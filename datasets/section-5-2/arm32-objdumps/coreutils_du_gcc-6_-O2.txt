
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

00011674 <.init>:
   11674:	push	{r3, lr}
   11678:	bl	13690 <__assert_fail@plt+0x1aec>
   1167c:	pop	{r3, pc}

Disassembly of section .plt:

00011680 <pthread_mutex_unlock@plt-0x14>:
   11680:	push	{lr}		; (str lr, [sp, #-4]!)
   11684:	ldr	lr, [pc, #4]	; 11690 <pthread_mutex_unlock@plt-0x4>
   11688:	add	lr, pc, lr
   1168c:	ldr	pc, [lr, #8]!
   11690:	andeq	r0, r3, r0, ror r9

00011694 <pthread_mutex_unlock@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #48, 20	; 0x30000
   1169c:	ldr	pc, [ip, #2416]!	; 0x970

000116a0 <fstatfs64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #48, 20	; 0x30000
   116a8:	ldr	pc, [ip, #2408]!	; 0x968

000116ac <calloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #48, 20	; 0x30000
   116b4:	ldr	pc, [ip, #2400]!	; 0x960

000116b8 <fputs_unlocked@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #48, 20	; 0x30000
   116c0:	ldr	pc, [ip, #2392]!	; 0x958

000116c4 <wctype@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #48, 20	; 0x30000
   116cc:	ldr	pc, [ip, #2384]!	; 0x950

000116d0 <raise@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #48, 20	; 0x30000
   116d8:	ldr	pc, [ip, #2376]!	; 0x948

000116dc <wcrtomb@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #48, 20	; 0x30000
   116e4:	ldr	pc, [ip, #2368]!	; 0x940

000116e8 <gmtime_r@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #48, 20	; 0x30000
   116f0:	ldr	pc, [ip, #2360]!	; 0x938

000116f4 <__getdelim@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #48, 20	; 0x30000
   116fc:	ldr	pc, [ip, #2352]!	; 0x930

00011700 <iswctype@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #48, 20	; 0x30000
   11708:	ldr	pc, [ip, #2344]!	; 0x928

0001170c <strcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #48, 20	; 0x30000
   11714:	ldr	pc, [ip, #2336]!	; 0x920

00011718 <pthread_mutex_destroy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #48, 20	; 0x30000
   11720:	ldr	pc, [ip, #2328]!	; 0x918

00011724 <mktime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #48, 20	; 0x30000
   1172c:	ldr	pc, [ip, #2320]!	; 0x910

00011730 <fflush@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #48, 20	; 0x30000
   11738:	ldr	pc, [ip, #2312]!	; 0x908

0001173c <wcwidth@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #48, 20	; 0x30000
   11744:	ldr	pc, [ip, #2304]!	; 0x900

00011748 <memmove@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #48, 20	; 0x30000
   11750:	ldr	pc, [ip, #2296]!	; 0x8f8

00011754 <free@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #48, 20	; 0x30000
   1175c:	ldr	pc, [ip, #2288]!	; 0x8f0

00011760 <pthread_mutex_lock@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #48, 20	; 0x30000
   11768:	ldr	pc, [ip, #2280]!	; 0x8e8

0001176c <ferror@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #48, 20	; 0x30000
   11774:	ldr	pc, [ip, #2272]!	; 0x8e0

00011778 <_exit@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #48, 20	; 0x30000
   11780:	ldr	pc, [ip, #2264]!	; 0x8d8

00011784 <memcpy@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #48, 20	; 0x30000
   1178c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011790 <pthread_mutex_init@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #48, 20	; 0x30000
   11798:	ldr	pc, [ip, #2248]!	; 0x8c8

0001179c <__strtoull_internal@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #48, 20	; 0x30000
   117a4:	ldr	pc, [ip, #2240]!	; 0x8c0

000117a8 <towlower@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #48, 20	; 0x30000
   117b0:	ldr	pc, [ip, #2232]!	; 0x8b8

000117b4 <mbsinit@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #48, 20	; 0x30000
   117bc:	ldr	pc, [ip, #2224]!	; 0x8b0

000117c0 <memcmp@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #48, 20	; 0x30000
   117c8:	ldr	pc, [ip, #2216]!	; 0x8a8

000117cc <fputc_unlocked@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #48, 20	; 0x30000
   117d4:	ldr	pc, [ip, #2208]!	; 0x8a0

000117d8 <dcgettext@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #48, 20	; 0x30000
   117e0:	ldr	pc, [ip, #2200]!	; 0x898

000117e4 <dup2@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #48, 20	; 0x30000
   117ec:	ldr	pc, [ip, #2192]!	; 0x890

000117f0 <realloc@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #48, 20	; 0x30000
   117f8:	ldr	pc, [ip, #2184]!	; 0x888

000117fc <localtime_r@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #48, 20	; 0x30000
   11804:	ldr	pc, [ip, #2176]!	; 0x880

00011808 <textdomain@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #48, 20	; 0x30000
   11810:	ldr	pc, [ip, #2168]!	; 0x878

00011814 <iswcntrl@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #48, 20	; 0x30000
   1181c:	ldr	pc, [ip, #2160]!	; 0x870

00011820 <__fxstatat64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #48, 20	; 0x30000
   11828:	ldr	pc, [ip, #2152]!	; 0x868

0001182c <fflush_unlocked@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #48, 20	; 0x30000
   11834:	ldr	pc, [ip, #2144]!	; 0x860

00011838 <iswprint@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #48, 20	; 0x30000
   11840:	ldr	pc, [ip, #2136]!	; 0x858

00011844 <tzset@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #48, 20	; 0x30000
   1184c:	ldr	pc, [ip, #2128]!	; 0x850

00011850 <__fxstat64@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #48, 20	; 0x30000
   11858:	ldr	pc, [ip, #2120]!	; 0x848

0001185c <__memcpy_chk@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #48, 20	; 0x30000
   11864:	ldr	pc, [ip, #2112]!	; 0x840

00011868 <fwrite@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #48, 20	; 0x30000
   11870:	ldr	pc, [ip, #2104]!	; 0x838

00011874 <lseek64@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #48, 20	; 0x30000
   1187c:	ldr	pc, [ip, #2096]!	; 0x830

00011880 <__ctype_get_mb_cur_max@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #48, 20	; 0x30000
   11888:	ldr	pc, [ip, #2088]!	; 0x828

0001188c <hasmntopt@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #48, 20	; 0x30000
   11894:	ldr	pc, [ip, #2080]!	; 0x820

00011898 <strcpy@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #48, 20	; 0x30000
   118a0:	ldr	pc, [ip, #2072]!	; 0x818

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #48, 20	; 0x30000
   118ac:	ldr	pc, [ip, #2064]!	; 0x810

000118b0 <mbrtowc@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #48, 20	; 0x30000
   118b8:	ldr	pc, [ip, #2056]!	; 0x808

000118bc <error@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #48, 20	; 0x30000
   118c4:	ldr	pc, [ip, #2048]!	; 0x800

000118c8 <getmntent@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #48, 20	; 0x30000
   118d0:	ldr	pc, [ip, #2040]!	; 0x7f8

000118d4 <fnmatch@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #48, 20	; 0x30000
   118dc:	ldr	pc, [ip, #2032]!	; 0x7f0

000118e0 <open64@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #48, 20	; 0x30000
   118e8:	ldr	pc, [ip, #2024]!	; 0x7e8

000118ec <getenv@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #48, 20	; 0x30000
   118f4:	ldr	pc, [ip, #2016]!	; 0x7e0

000118f8 <malloc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #48, 20	; 0x30000
   11900:	ldr	pc, [ip, #2008]!	; 0x7d8

00011904 <__libc_start_main@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #48, 20	; 0x30000
   1190c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011910 <strftime@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #48, 20	; 0x30000
   11918:	ldr	pc, [ip, #1992]!	; 0x7c8

0001191c <__freading@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #48, 20	; 0x30000
   11924:	ldr	pc, [ip, #1984]!	; 0x7c0

00011928 <__ctype_tolower_loc@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #48, 20	; 0x30000
   11930:	ldr	pc, [ip, #1976]!	; 0x7b8

00011934 <__ctype_toupper_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #48, 20	; 0x30000
   1193c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011940 <__gmon_start__@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #48, 20	; 0x30000
   11948:	ldr	pc, [ip, #1960]!	; 0x7a8

0001194c <freopen64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #48, 20	; 0x30000
   11954:	ldr	pc, [ip, #1952]!	; 0x7a0

00011958 <getopt_long@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #48, 20	; 0x30000
   11960:	ldr	pc, [ip, #1944]!	; 0x798

00011964 <__ctype_b_loc@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #48, 20	; 0x30000
   1196c:	ldr	pc, [ip, #1936]!	; 0x790

00011970 <exit@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #48, 20	; 0x30000
   11978:	ldr	pc, [ip, #1928]!	; 0x788

0001197c <feof@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #48, 20	; 0x30000
   11984:	ldr	pc, [ip, #1920]!	; 0x780

00011988 <strlen@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #48, 20	; 0x30000
   11990:	ldr	pc, [ip, #1912]!	; 0x778

00011994 <strchr@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #48, 20	; 0x30000
   1199c:	ldr	pc, [ip, #1904]!	; 0x770

000119a0 <setenv@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #48, 20	; 0x30000
   119a8:	ldr	pc, [ip, #1896]!	; 0x768

000119ac <openat64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #48, 20	; 0x30000
   119b4:	ldr	pc, [ip, #1888]!	; 0x760

000119b8 <__errno_location@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #48, 20	; 0x30000
   119c0:	ldr	pc, [ip, #1880]!	; 0x758

000119c4 <iswalnum@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #48, 20	; 0x30000
   119cc:	ldr	pc, [ip, #1872]!	; 0x750

000119d0 <__sprintf_chk@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #48, 20	; 0x30000
   119d8:	ldr	pc, [ip, #1864]!	; 0x748

000119dc <__cxa_atexit@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #48, 20	; 0x30000
   119e4:	ldr	pc, [ip, #1856]!	; 0x740

000119e8 <memset@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #48, 20	; 0x30000
   119f0:	ldr	pc, [ip, #1848]!	; 0x738

000119f4 <btowc@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #48, 20	; 0x30000
   119fc:	ldr	pc, [ip, #1840]!	; 0x730

00011a00 <__printf_chk@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #48, 20	; 0x30000
   11a08:	ldr	pc, [ip, #1832]!	; 0x728

00011a0c <fileno@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #48, 20	; 0x30000
   11a14:	ldr	pc, [ip, #1824]!	; 0x720

00011a18 <__fprintf_chk@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #48, 20	; 0x30000
   11a20:	ldr	pc, [ip, #1816]!	; 0x718

00011a24 <memchr@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #48, 20	; 0x30000
   11a2c:	ldr	pc, [ip, #1808]!	; 0x710

00011a30 <fclose@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #48, 20	; 0x30000
   11a38:	ldr	pc, [ip, #1800]!	; 0x708

00011a3c <fseeko64@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #48, 20	; 0x30000
   11a44:	ldr	pc, [ip, #1792]!	; 0x700

00011a48 <endmntent@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #48, 20	; 0x30000
   11a50:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a54 <fcntl64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #48, 20	; 0x30000
   11a5c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a60 <__overflow@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #48, 20	; 0x30000
   11a68:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a6c <setlocale@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #48, 20	; 0x30000
   11a74:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a78 <strrchr@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #48, 20	; 0x30000
   11a80:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a84 <nl_langinfo@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #48, 20	; 0x30000
   11a8c:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a90 <fputc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #48, 20	; 0x30000
   11a98:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a9c <sscanf@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #48, 20	; 0x30000
   11aa4:	ldr	pc, [ip, #1728]!	; 0x6c0

00011aa8 <localeconv@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #48, 20	; 0x30000
   11ab0:	ldr	pc, [ip, #1720]!	; 0x6b8

00011ab4 <readdir64@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #48, 20	; 0x30000
   11abc:	ldr	pc, [ip, #1712]!	; 0x6b0

00011ac0 <fdopendir@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #48, 20	; 0x30000
   11ac8:	ldr	pc, [ip, #1704]!	; 0x6a8

00011acc <timegm@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #48, 20	; 0x30000
   11ad4:	ldr	pc, [ip, #1696]!	; 0x6a0

00011ad8 <dirfd@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #48, 20	; 0x30000
   11ae0:	ldr	pc, [ip, #1688]!	; 0x698

00011ae4 <fchdir@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #48, 20	; 0x30000
   11aec:	ldr	pc, [ip, #1680]!	; 0x690

00011af0 <__strtoll_internal@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #48, 20	; 0x30000
   11af8:	ldr	pc, [ip, #1672]!	; 0x688

00011afc <fopen64@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #48, 20	; 0x30000
   11b04:	ldr	pc, [ip, #1664]!	; 0x680

00011b08 <qsort@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #48, 20	; 0x30000
   11b10:	ldr	pc, [ip, #1656]!	; 0x678

00011b14 <setmntent@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #48, 20	; 0x30000
   11b1c:	ldr	pc, [ip, #1648]!	; 0x670

00011b20 <bindtextdomain@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #48, 20	; 0x30000
   11b28:	ldr	pc, [ip, #1640]!	; 0x668

00011b2c <getdelim@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #48, 20	; 0x30000
   11b34:	ldr	pc, [ip, #1632]!	; 0x660

00011b38 <__xstat64@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #48, 20	; 0x30000
   11b40:	ldr	pc, [ip, #1624]!	; 0x658

00011b44 <unsetenv@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #48, 20	; 0x30000
   11b4c:	ldr	pc, [ip, #1616]!	; 0x650

00011b50 <towupper@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #48, 20	; 0x30000
   11b58:	ldr	pc, [ip, #1608]!	; 0x648

00011b5c <strncmp@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #48, 20	; 0x30000
   11b64:	ldr	pc, [ip, #1600]!	; 0x640

00011b68 <abort@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #48, 20	; 0x30000
   11b70:	ldr	pc, [ip, #1592]!	; 0x638

00011b74 <getc@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #48, 20	; 0x30000
   11b7c:	ldr	pc, [ip, #1584]!	; 0x630

00011b80 <close@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #48, 20	; 0x30000
   11b88:	ldr	pc, [ip, #1576]!	; 0x628

00011b8c <__lxstat64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #48, 20	; 0x30000
   11b94:	ldr	pc, [ip, #1568]!	; 0x620

00011b98 <closedir@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #48, 20	; 0x30000
   11ba0:	ldr	pc, [ip, #1560]!	; 0x618

00011ba4 <__assert_fail@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #48, 20	; 0x30000
   11bac:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00011bb0 <.text>:
   11bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb4:	sub	sp, sp, #228	; 0xe4
   11bb8:	ldr	r3, [pc, #3840]	; 12ac0 <__assert_fail@plt+0xf1c>
   11bbc:	mov	r8, #0
   11bc0:	mov	r6, r0
   11bc4:	ldr	r0, [r1]
   11bc8:	str	r3, [sp, #112]	; 0x70
   11bcc:	mov	r5, r1
   11bd0:	str	r8, [sp, #116]	; 0x74
   11bd4:	bl	1c6d0 <__assert_fail@plt+0xab2c>
   11bd8:	ldr	r1, [pc, #3812]	; 12ac4 <__assert_fail@plt+0xf20>
   11bdc:	mov	r0, #6
   11be0:	bl	11a6c <setlocale@plt>
   11be4:	ldr	r1, [pc, #3804]	; 12ac8 <__assert_fail@plt+0xf24>
   11be8:	ldr	r0, [pc, #3804]	; 12acc <__assert_fail@plt+0xf28>
   11bec:	bl	11b20 <bindtextdomain@plt>
   11bf0:	ldr	r0, [pc, #3796]	; 12acc <__assert_fail@plt+0xf28>
   11bf4:	bl	11808 <textdomain@plt>
   11bf8:	ldr	r0, [pc, #3792]	; 12ad0 <__assert_fail@plt+0xf2c>
   11bfc:	bl	2f1dc <__assert_fail@plt+0x1d638>
   11c00:	bl	14b98 <__assert_fail@plt+0x2ff4>
   11c04:	ldr	r4, [pc, #3784]	; 12ad4 <__assert_fail@plt+0xf30>
   11c08:	ldr	sl, [pc, #3784]	; 12ad8 <__assert_fail@plt+0xf34>
   11c0c:	add	r3, r4, #416	; 0x1a0
   11c10:	str	r3, [sp, #40]	; 0x28
   11c14:	mov	r3, #16
   11c18:	str	r3, [sp, #32]
   11c1c:	mov	r3, #8
   11c20:	str	r3, [sp, #36]	; 0x24
   11c24:	mov	r3, #1
   11c28:	str	r8, [sp, #64]	; 0x40
   11c2c:	str	r8, [sp, #56]	; 0x38
   11c30:	str	r3, [sp, #68]	; 0x44
   11c34:	ldr	r7, [pc, #3744]	; 12adc <__assert_fail@plt+0xf38>
   11c38:	ldr	r9, [pc, #3744]	; 12ae0 <__assert_fail@plt+0xf3c>
   11c3c:	add	fp, sp, #108	; 0x6c
   11c40:	str	r0, [sl, #32]
   11c44:	ldr	r0, [pc, #3736]	; 12ae4 <__assert_fail@plt+0xf40>
   11c48:	bl	118ec <getenv@plt>
   11c4c:	add	r2, sl, #8
   11c50:	mov	r1, sl
   11c54:	bl	1b068 <__assert_fail@plt+0x94c4>
   11c58:	mvn	ip, #0
   11c5c:	str	fp, [sp]
   11c60:	mov	r3, r4
   11c64:	mov	r2, r7
   11c68:	mov	r1, r5
   11c6c:	mov	r0, r6
   11c70:	str	ip, [sp, #108]	; 0x6c
   11c74:	bl	11958 <getopt_long@plt>
   11c78:	cmn	r0, #1
   11c7c:	beq	12430 <__assert_fail@plt+0x88c>
   11c80:	ldr	r3, [pc, #3680]	; 12ae8 <__assert_fail@plt+0xf44>
   11c84:	add	r0, r0, #3
   11c88:	cmp	r0, r3
   11c8c:	ldrls	pc, [pc, r0, lsl #2]
   11c90:	b	123e8 <__assert_fail@plt+0x844>
   11c94:	andeq	r2, r1, ip, ror #5
   11c98:	andeq	r2, r1, r4, ror #5
   11c9c:	andeq	r2, r1, r8, ror #7
   11ca0:	andeq	r2, r1, r8, ror #7
   11ca4:	andeq	r2, r1, r8, ror #7
   11ca8:	andeq	r2, r1, r8, ror #7
   11cac:	andeq	r2, r1, r8, ror #7
   11cb0:	andeq	r2, r1, r8, ror #7
   11cb4:	andeq	r2, r1, r8, ror #7
   11cb8:	andeq	r2, r1, r8, ror #7
   11cbc:	andeq	r2, r1, r8, ror #7
   11cc0:	andeq	r2, r1, r8, ror #7
   11cc4:	andeq	r2, r1, r8, ror #7
   11cc8:	andeq	r2, r1, r8, ror #7
   11ccc:	andeq	r2, r1, r8, ror #7
   11cd0:	andeq	r2, r1, r8, ror #7
   11cd4:	andeq	r2, r1, r8, ror #7
   11cd8:	andeq	r2, r1, r8, ror #7
   11cdc:	andeq	r2, r1, r8, ror #7
   11ce0:	andeq	r2, r1, r8, ror #7
   11ce4:	andeq	r2, r1, r8, ror #7
   11ce8:	andeq	r2, r1, r8, ror #7
   11cec:	andeq	r2, r1, r8, ror #7
   11cf0:	andeq	r2, r1, r8, ror #7
   11cf4:	andeq	r2, r1, r8, ror #7
   11cf8:	andeq	r2, r1, r8, ror #7
   11cfc:	andeq	r2, r1, r8, ror #7
   11d00:	andeq	r2, r1, r8, ror #7
   11d04:	andeq	r2, r1, r8, ror #7
   11d08:	andeq	r2, r1, r8, ror #7
   11d0c:	andeq	r2, r1, r8, ror #7
   11d10:	andeq	r2, r1, r8, ror #7
   11d14:	andeq	r2, r1, r8, ror #7
   11d18:	andeq	r2, r1, r8, ror #7
   11d1c:	andeq	r2, r1, r8, ror #7
   11d20:	andeq	r2, r1, r8, ror #7
   11d24:	andeq	r2, r1, r8, ror #7
   11d28:	andeq	r2, r1, r8, ror #7
   11d2c:	andeq	r2, r1, r8, ror #7
   11d30:	andeq	r2, r1, r8, ror #7
   11d34:	andeq	r2, r1, r8, ror #7
   11d38:	andeq	r2, r1, r8, ror #7
   11d3c:	andeq	r2, r1, r8, ror #7
   11d40:	andeq	r2, r1, r8, ror #7
   11d44:	andeq	r2, r1, r8, ror #7
   11d48:	andeq	r2, r1, r8, ror #7
   11d4c:	andeq	r2, r1, r8, ror #7
   11d50:	andeq	r2, r1, r8, ror #7
   11d54:	andeq	r2, r1, r8, ror #7
   11d58:	andeq	r2, r1, r8, ror #7
   11d5c:	andeq	r2, r1, r8, ror #7
   11d60:	ldrdeq	r2, [r1], -r8
   11d64:	andeq	r2, r1, r8, ror #7
   11d68:	andeq	r2, r1, r8, ror #7
   11d6c:	andeq	r2, r1, r8, ror #7
   11d70:	andeq	r2, r1, r8, ror #7
   11d74:	andeq	r2, r1, r8, ror #7
   11d78:	andeq	r2, r1, r8, ror #7
   11d7c:	andeq	r2, r1, r8, ror #7
   11d80:	andeq	r2, r1, r8, ror #7
   11d84:	andeq	r2, r1, r8, ror #7
   11d88:	andeq	r2, r1, r8, ror #7
   11d8c:	andeq	r2, r1, r8, ror #7
   11d90:	andeq	r2, r1, r8, ror #7
   11d94:	andeq	r2, r1, r8, ror #7
   11d98:	andeq	r2, r1, r8, ror #7
   11d9c:	andeq	r2, r1, r8, ror #7
   11da0:	andeq	r2, r1, r8, ror #7
   11da4:	andeq	r2, r1, r8, ror #7
   11da8:	andeq	r2, r1, r8, lsr #5
   11dac:	andeq	r2, r1, r8, ror #7
   11db0:	muleq	r1, ip, r2
   11db4:	andeq	r2, r1, r8, ror #7
   11db8:	andeq	r2, r1, r8, ror #7
   11dbc:	andeq	r2, r1, r8, ror #7
   11dc0:	muleq	r1, ip, r2
   11dc4:	andeq	r2, r1, r8, ror #7
   11dc8:	andeq	r2, r1, r8, ror #7
   11dcc:	andeq	r2, r1, r8, ror #7
   11dd0:	muleq	r1, r0, r2
   11dd4:	andeq	r2, r1, r8, ror #7
   11dd8:	andeq	r2, r1, r8, ror #7
   11ddc:	andeq	r2, r1, r8, ror #7
   11de0:	andeq	r2, r1, r4, lsl #5
   11de4:	andeq	r2, r1, r8, ror #7
   11de8:	andeq	r2, r1, r8, ror #7
   11dec:	andeq	r2, r1, r8, ror r2
   11df0:	andeq	r2, r1, r8, ror #7
   11df4:	andeq	r2, r1, r8, ror #7
   11df8:	andeq	r2, r1, r8, ror #7
   11dfc:	andeq	r2, r1, r8, ror #7
   11e00:	andeq	r2, r1, r8, lsl r2
   11e04:	andeq	r2, r1, r8, ror #7
   11e08:	andeq	r2, r1, r8, ror #7
   11e0c:	andeq	r2, r1, r8, ror #7
   11e10:	andeq	r2, r1, r8, ror #7
   11e14:	andeq	r2, r1, r8, ror #7
   11e18:	andeq	r2, r1, r8, ror #7
   11e1c:	andeq	r2, r1, r8, ror #7
   11e20:	andeq	r2, r1, r8, ror #7
   11e24:	andeq	r2, r1, ip, lsl #4
   11e28:	andeq	r2, r1, ip, ror #3
   11e2c:	andeq	r2, r1, r0, ror #3
   11e30:	andeq	r2, r1, r8, lsl #3
   11e34:	andeq	r2, r1, r8, ror #7
   11e38:	andeq	r2, r1, r8, ror #7
   11e3c:	andeq	r2, r1, r8, ror #7
   11e40:	andeq	r2, r1, r0, ror r1
   11e44:	andeq	r2, r1, r8, ror #7
   11e48:	andeq	r2, r1, r8, ror #7
   11e4c:	andeq	r2, r1, r8, asr r1
   11e50:	andeq	r2, r1, ip, asr #2
   11e54:	andeq	r2, r1, r4, lsr r1
   11e58:	andeq	r2, r1, r8, ror #7
   11e5c:	andeq	r2, r1, r8, ror #7
   11e60:	andeq	r2, r1, r8, ror #7
   11e64:	andeq	r2, r1, r8, ror #7
   11e68:	andeq	r2, r1, r8, ror #7
   11e6c:	andeq	r2, r1, ip, lsr #2
   11e70:	andeq	r2, r1, ip, asr #1
   11e74:	andeq	r2, r1, r8, ror #7
   11e78:	andeq	r2, r1, r8, ror #7
   11e7c:	andeq	r2, r1, r8, ror #7
   11e80:	andeq	r2, r1, r0, asr #1
   11e84:	andeq	r2, r1, r8, ror #7
   11e88:	andeq	r2, r1, r8, ror #7
   11e8c:	andeq	r2, r1, r8, ror #7
   11e90:	andeq	r2, r1, r8, ror #7
   11e94:	andeq	r2, r1, r8, ror #7
   11e98:	andeq	r2, r1, r8, ror #7
   11e9c:	andeq	r2, r1, r8, ror #7
   11ea0:	andeq	r2, r1, r8, ror #7
   11ea4:	andeq	r2, r1, r8, ror #7
   11ea8:	andeq	r2, r1, r8, ror #7
   11eac:	andeq	r2, r1, r8, ror #7
   11eb0:	andeq	r2, r1, r8, ror #7
   11eb4:	andeq	r2, r1, r8, ror #7
   11eb8:	andeq	r2, r1, r8, ror #7
   11ebc:	andeq	r2, r1, r8, ror #7
   11ec0:	andeq	r2, r1, r8, ror #7
   11ec4:	andeq	r2, r1, r8, ror #7
   11ec8:	andeq	r2, r1, r8, ror #7
   11ecc:	andeq	r2, r1, r8, ror #7
   11ed0:	andeq	r2, r1, r8, ror #7
   11ed4:	andeq	r2, r1, r8, ror #7
   11ed8:	andeq	r2, r1, r8, ror #7
   11edc:	andeq	r2, r1, r8, ror #7
   11ee0:	andeq	r2, r1, r8, ror #7
   11ee4:	andeq	r2, r1, r8, ror #7
   11ee8:	andeq	r2, r1, r8, ror #7
   11eec:	andeq	r2, r1, r8, ror #7
   11ef0:	andeq	r2, r1, r8, ror #7
   11ef4:	andeq	r2, r1, r8, ror #7
   11ef8:	andeq	r2, r1, r8, ror #7
   11efc:	andeq	r2, r1, r8, ror #7
   11f00:	andeq	r2, r1, r8, ror #7
   11f04:	andeq	r2, r1, r8, ror #7
   11f08:	andeq	r2, r1, r8, ror #7
   11f0c:	andeq	r2, r1, r8, ror #7
   11f10:	andeq	r2, r1, r8, ror #7
   11f14:	andeq	r2, r1, r8, ror #7
   11f18:	andeq	r2, r1, r8, ror #7
   11f1c:	andeq	r2, r1, r8, ror #7
   11f20:	andeq	r2, r1, r8, ror #7
   11f24:	andeq	r2, r1, r8, ror #7
   11f28:	andeq	r2, r1, r8, ror #7
   11f2c:	andeq	r2, r1, r8, ror #7
   11f30:	andeq	r2, r1, r8, ror #7
   11f34:	andeq	r2, r1, r8, ror #7
   11f38:	andeq	r2, r1, r8, ror #7
   11f3c:	andeq	r2, r1, r8, ror #7
   11f40:	andeq	r2, r1, r8, ror #7
   11f44:	andeq	r2, r1, r8, ror #7
   11f48:	andeq	r2, r1, r8, ror #7
   11f4c:	andeq	r2, r1, r8, ror #7
   11f50:	andeq	r2, r1, r8, ror #7
   11f54:	andeq	r2, r1, r8, ror #7
   11f58:	andeq	r2, r1, r8, ror #7
   11f5c:	andeq	r2, r1, r8, ror #7
   11f60:	andeq	r2, r1, r8, ror #7
   11f64:	andeq	r2, r1, r8, ror #7
   11f68:	andeq	r2, r1, r8, ror #7
   11f6c:	andeq	r2, r1, r8, ror #7
   11f70:	andeq	r2, r1, r8, ror #7
   11f74:	andeq	r2, r1, r8, ror #7
   11f78:	andeq	r2, r1, r8, ror #7
   11f7c:	andeq	r2, r1, r8, ror #7
   11f80:	andeq	r2, r1, r8, ror #7
   11f84:	andeq	r2, r1, r8, ror #7
   11f88:	andeq	r2, r1, r8, ror #7
   11f8c:	andeq	r2, r1, r8, ror #7
   11f90:	andeq	r2, r1, r8, ror #7
   11f94:	andeq	r2, r1, r8, ror #7
   11f98:	andeq	r2, r1, r8, ror #7
   11f9c:	andeq	r2, r1, r8, ror #7
   11fa0:	andeq	r2, r1, r8, ror #7
   11fa4:	andeq	r2, r1, r8, ror #7
   11fa8:	andeq	r2, r1, r8, ror #7
   11fac:	andeq	r2, r1, r8, ror #7
   11fb0:	andeq	r2, r1, r8, ror #7
   11fb4:	andeq	r2, r1, r8, ror #7
   11fb8:	andeq	r2, r1, r8, ror #7
   11fbc:	andeq	r2, r1, r8, ror #7
   11fc0:	andeq	r2, r1, r8, ror #7
   11fc4:	andeq	r2, r1, r8, ror #7
   11fc8:	andeq	r2, r1, r8, ror #7
   11fcc:	andeq	r2, r1, r8, ror #7
   11fd0:	andeq	r2, r1, r8, ror #7
   11fd4:	andeq	r2, r1, r8, ror #7
   11fd8:	andeq	r2, r1, r8, ror #7
   11fdc:	andeq	r2, r1, r8, ror #7
   11fe0:	andeq	r2, r1, r8, ror #7
   11fe4:	andeq	r2, r1, r8, ror #7
   11fe8:	andeq	r2, r1, r8, ror #7
   11fec:	andeq	r2, r1, r8, ror #7
   11ff0:	andeq	r2, r1, r8, ror #7
   11ff4:	andeq	r2, r1, r8, ror #7
   11ff8:	andeq	r2, r1, r8, ror #7
   11ffc:	andeq	r2, r1, r8, ror #7
   12000:	andeq	r2, r1, r8, ror #7
   12004:	andeq	r2, r1, r8, ror #7
   12008:	andeq	r2, r1, r8, ror #7
   1200c:	andeq	r2, r1, r8, ror #7
   12010:	andeq	r2, r1, r8, ror #7
   12014:	andeq	r2, r1, r8, ror #7
   12018:	andeq	r2, r1, r8, ror #7
   1201c:	andeq	r2, r1, r8, ror #7
   12020:	andeq	r2, r1, r8, ror #7
   12024:	andeq	r2, r1, r8, ror #7
   12028:	andeq	r2, r1, r8, ror #7
   1202c:	andeq	r2, r1, r8, ror #7
   12030:	andeq	r2, r1, r8, ror #7
   12034:	andeq	r2, r1, r8, ror #7
   12038:	andeq	r2, r1, r8, ror #7
   1203c:	andeq	r2, r1, r8, ror #7
   12040:	andeq	r2, r1, r8, ror #7
   12044:	andeq	r2, r1, r8, ror #7
   12048:	andeq	r2, r1, r8, ror #7
   1204c:	andeq	r2, r1, r8, ror #7
   12050:	andeq	r2, r1, r8, ror #7
   12054:	andeq	r2, r1, r8, ror #7
   12058:	andeq	r2, r1, r8, ror #7
   1205c:	andeq	r2, r1, r8, ror #7
   12060:	andeq	r2, r1, r8, ror #7
   12064:	andeq	r2, r1, r8, ror #7
   12068:	andeq	r2, r1, r8, ror #7
   1206c:	andeq	r2, r1, r8, ror #7
   12070:	andeq	r2, r1, r8, ror #7
   12074:	andeq	r2, r1, r8, ror #7
   12078:	andeq	r2, r1, r8, ror #7
   1207c:	andeq	r2, r1, r8, ror #7
   12080:	andeq	r2, r1, r8, ror #7
   12084:	andeq	r2, r1, r8, ror #7
   12088:	andeq	r2, r1, r8, ror #7
   1208c:	andeq	r2, r1, r8, ror #7
   12090:	andeq	r2, r1, r8, ror #7
   12094:	andeq	r2, r1, r8, ror #7
   12098:	andeq	r2, r1, r8, ror #7
   1209c:	andeq	r2, r1, r8, ror #7
   120a0:	ldrdeq	r2, [r1], -ip
   120a4:	andeq	r2, r1, r8, asr #7
   120a8:			; <UNDEFINED> instruction: 0x000123bc
   120ac:	andeq	r2, r1, r4, lsr #7
   120b0:	andeq	r2, r1, r8, ror #7
   120b4:	andeq	r2, r1, r8, asr #6
   120b8:	andeq	r2, r1, ip, lsr r3
   120bc:	andeq	r2, r1, r0, lsr r3
   120c0:	mov	r3, #72	; 0x48
   120c4:	str	r3, [sp, #36]	; 0x24
   120c8:	b	11c58 <__assert_fail@plt+0xb4>
   120cc:	ldr	r3, [pc, #2584]	; 12aec <__assert_fail@plt+0xf48>
   120d0:	mov	r2, #0
   120d4:	str	r3, [sp]
   120d8:	mov	r1, r2
   120dc:	ldr	r3, [pc, #2572]	; 12af0 <__assert_fail@plt+0xf4c>
   120e0:	ldr	r0, [r9]
   120e4:	bl	2cc14 <__assert_fail@plt+0x1b070>
   120e8:	subs	r1, r0, #0
   120ec:	bne	1363c <__assert_fail@plt+0x1a98>
   120f0:	ldrd	r2, [sl, #40]	; 0x28
   120f4:	orrs	r3, r2, r3
   120f8:	bne	11c58 <__assert_fail@plt+0xb4>
   120fc:	ldr	r3, [r9]
   12100:	ldrb	r3, [r3]
   12104:	cmp	r3, #45	; 0x2d
   12108:	bne	11c58 <__assert_fail@plt+0xb4>
   1210c:	mov	r4, r1
   12110:	mov	r2, #5
   12114:	ldr	r1, [pc, #2520]	; 12af4 <__assert_fail@plt+0xf50>
   12118:	bl	117d8 <dcgettext@plt>
   1211c:	mov	r1, r4
   12120:	mov	r2, r0
   12124:	mov	r0, #1
   12128:	bl	118bc <error@plt>
   1212c:	mov	r8, #1
   12130:	b	11c58 <__assert_fail@plt+0xb4>
   12134:	mov	r0, #1048576	; 0x100000
   12138:	mov	r1, #0
   1213c:	mov	r3, #0
   12140:	strd	r0, [sl, #8]
   12144:	str	r3, [sl]
   12148:	b	11c58 <__assert_fail@plt+0xb4>
   1214c:	mov	r3, #1
   12150:	strb	r3, [sl, #39]	; 0x27
   12154:	b	11c58 <__assert_fail@plt+0xb4>
   12158:	mov	r0, #1024	; 0x400
   1215c:	mov	r1, #0
   12160:	mov	r3, #0
   12164:	strd	r0, [sl, #8]
   12168:	str	r3, [sl]
   1216c:	b	11c58 <__assert_fail@plt+0xb4>
   12170:	mov	r0, #1
   12174:	mov	r1, #0
   12178:	mov	r3, #176	; 0xb0
   1217c:	strd	r0, [sl, #8]
   12180:	str	r3, [sl]
   12184:	b	11c58 <__assert_fail@plt+0xb4>
   12188:	ldr	r3, [pc, #2356]	; 12ac4 <__assert_fail@plt+0xf20>
   1218c:	mov	r2, #0
   12190:	str	r3, [sp]
   12194:	mov	r1, r2
   12198:	add	r3, sp, #120	; 0x78
   1219c:	ldr	r0, [r9]
   121a0:	bl	2d23c <__assert_fail@plt+0x1b698>
   121a4:	cmp	r0, #0
   121a8:	bne	123f4 <__assert_fail@plt+0x850>
   121ac:	ldrd	r2, [sp, #120]	; 0x78
   121b0:	mov	r1, #0
   121b4:	mvn	r0, #0
   121b8:	cmp	r3, r1
   121bc:	cmpeq	r2, r0
   121c0:	strd	r2, [sp, #48]	; 0x30
   121c4:	bhi	123f4 <__assert_fail@plt+0x850>
   121c8:	mov	r2, #1
   121cc:	ldr	r3, [pc, #2340]	; 12af8 <__assert_fail@plt+0xf54>
   121d0:	str	r2, [sp, #56]	; 0x38
   121d4:	ldr	r2, [sp, #48]	; 0x30
   121d8:	str	r2, [r3]
   121dc:	b	11c58 <__assert_fail@plt+0xb4>
   121e0:	mov	r3, #1
   121e4:	strb	r3, [sl, #38]	; 0x26
   121e8:	b	11c58 <__assert_fail@plt+0xb4>
   121ec:	mov	r0, #1
   121f0:	mov	r1, #0
   121f4:	mov	r2, #1
   121f8:	mov	r3, #0
   121fc:	strd	r0, [sl, #8]
   12200:	strb	r2, [sl, #37]	; 0x25
   12204:	str	r3, [sl]
   12208:	b	11c58 <__assert_fail@plt+0xb4>
   1220c:	mov	r3, #1
   12210:	strb	r3, [sl, #36]	; 0x24
   12214:	b	11c58 <__assert_fail@plt+0xb4>
   12218:	mov	r3, #10
   1221c:	str	r3, [sp]
   12220:	ldr	r1, [sl, #32]
   12224:	mov	r3, #268435456	; 0x10000000
   12228:	ldr	r2, [r9]
   1222c:	ldr	r0, [pc, #2248]	; 12afc <__assert_fail@plt+0xf58>
   12230:	bl	15410 <__assert_fail@plt+0x386c>
   12234:	cmp	r0, #0
   12238:	beq	11c58 <__assert_fail@plt+0xb4>
   1223c:	bl	119b8 <__errno_location@plt>
   12240:	mov	r3, #0
   12244:	str	r3, [sp, #68]	; 0x44
   12248:	ldr	r2, [r9]
   1224c:	mov	r1, #3
   12250:	ldr	r3, [r0]
   12254:	mov	r0, #0
   12258:	str	r3, [sp, #48]	; 0x30
   1225c:	bl	1e40c <__assert_fail@plt+0xc868>
   12260:	ldr	r1, [sp, #48]	; 0x30
   12264:	ldr	r2, [pc, #2304]	; 12b6c <__assert_fail@plt+0xfc8>
   12268:	mov	r3, r0
   1226c:	mov	r0, #0
   12270:	bl	118bc <error@plt>
   12274:	b	11c58 <__assert_fail@plt+0xb4>
   12278:	mov	r3, #1
   1227c:	strb	r3, [sl, #48]	; 0x30
   12280:	b	11c58 <__assert_fail@plt+0xb4>
   12284:	mov	r3, #16
   12288:	str	r3, [sp, #32]
   1228c:	b	11c58 <__assert_fail@plt+0xb4>
   12290:	mov	r3, #2
   12294:	str	r3, [sp, #32]
   12298:	b	11c58 <__assert_fail@plt+0xb4>
   1229c:	mov	r3, #17
   122a0:	str	r3, [sp, #32]
   122a4:	b	11c58 <__assert_fail@plt+0xb4>
   122a8:	ldr	r2, [pc, #2128]	; 12b00 <__assert_fail@plt+0xf5c>
   122ac:	ldr	r0, [r9]
   122b0:	sub	r1, r2, #8
   122b4:	bl	1b068 <__assert_fail@plt+0x94c4>
   122b8:	cmp	r0, #0
   122bc:	beq	11c58 <__assert_fail@plt+0xb4>
   122c0:	ldr	r2, [r9]
   122c4:	ldr	r3, [pc, #2056]	; 12ad4 <__assert_fail@plt+0xf30>
   122c8:	str	r2, [sp]
   122cc:	ldr	r1, [sp, #108]	; 0x6c
   122d0:	mov	r2, #66	; 0x42
   122d4:	bl	2d0f4 <__assert_fail@plt+0x1b550>
   122d8:	mov	r3, #1
   122dc:	strb	r3, [sl, #28]
   122e0:	b	11c58 <__assert_fail@plt+0xb4>
   122e4:	mov	r0, #0
   122e8:	bl	13940 <__assert_fail@plt+0x1d9c>
   122ec:	ldr	lr, [pc, #2064]	; 12b04 <__assert_fail@plt+0xf60>
   122f0:	ldr	ip, [pc, #2064]	; 12b08 <__assert_fail@plt+0xf64>
   122f4:	ldr	r1, [pc, #2064]	; 12b0c <__assert_fail@plt+0xf68>
   122f8:	ldr	r3, [pc, #2064]	; 12b10 <__assert_fail@plt+0xf6c>
   122fc:	ldr	r0, [pc, #2064]	; 12b14 <__assert_fail@plt+0xf70>
   12300:	ldr	r2, [pc, #2064]	; 12b18 <__assert_fail@plt+0xf74>
   12304:	mov	r4, #0
   12308:	ldr	r0, [r0]
   1230c:	ldr	r3, [r3]
   12310:	stmib	sp, {r1, ip, lr}
   12314:	str	r2, [sp]
   12318:	str	r4, [sp, #16]
   1231c:	ldr	r2, [pc, #2040]	; 12b1c <__assert_fail@plt+0xf78>
   12320:	ldr	r1, [pc, #2040]	; 12b20 <__assert_fail@plt+0xf7c>
   12324:	bl	2c3c0 <__assert_fail@plt+0x1a81c>
   12328:	mov	r0, r4
   1232c:	bl	11970 <exit@plt>
   12330:	mov	r3, #1
   12334:	strb	r3, [sl, #16]
   12338:	b	11c58 <__assert_fail@plt+0xb4>
   1233c:	ldr	r3, [r9]
   12340:	str	r3, [sl, #56]	; 0x38
   12344:	b	11c58 <__assert_fail@plt+0xb4>
   12348:	ldr	r1, [r9]
   1234c:	mov	r3, #1
   12350:	cmp	r1, #0
   12354:	strb	r3, [sl, #17]
   12358:	beq	1238c <__assert_fail@plt+0x7e8>
   1235c:	ldr	r2, [pc, #2092]	; 12b90 <__assert_fail@plt+0xfec>
   12360:	ldr	r0, [r2]
   12364:	mov	r2, #4
   12368:	str	r2, [sp]
   1236c:	stmib	sp, {r0, r3}
   12370:	ldr	r2, [pc, #1964]	; 12b24 <__assert_fail@plt+0xf80>
   12374:	ldr	r3, [sp, #40]	; 0x28
   12378:	ldr	r0, [pc, #1960]	; 12b28 <__assert_fail@plt+0xf84>
   1237c:	bl	13ffc <__assert_fail@plt+0x2458>
   12380:	ldr	r3, [pc, #2060]	; 12b94 <__assert_fail@plt+0xff0>
   12384:	add	r0, r3, r0, lsl #2
   12388:	ldr	r1, [r0, #472]	; 0x1d8
   1238c:	ldr	r0, [pc, #1944]	; 12b2c <__assert_fail@plt+0xf88>
   12390:	str	r1, [sl, #52]	; 0x34
   12394:	bl	118ec <getenv@plt>
   12398:	bl	2bb7c <__assert_fail@plt+0x19fd8>
   1239c:	str	r0, [sl, #24]
   123a0:	b	11c58 <__assert_fail@plt+0xb4>
   123a4:	mov	r0, #1
   123a8:	mov	r1, #0
   123ac:	mov	r3, #144	; 0x90
   123b0:	strd	r0, [sl, #8]
   123b4:	str	r3, [sl]
   123b8:	b	11c58 <__assert_fail@plt+0xb4>
   123bc:	ldr	r3, [r9]
   123c0:	str	r3, [sp, #64]	; 0x40
   123c4:	b	11c58 <__assert_fail@plt+0xb4>
   123c8:	mov	r2, #268435456	; 0x10000000
   123cc:	ldr	r1, [r9]
   123d0:	ldr	r0, [sl, #32]
   123d4:	bl	14ed8 <__assert_fail@plt+0x3334>
   123d8:	b	11c58 <__assert_fail@plt+0xb4>
   123dc:	mov	r3, #1
   123e0:	strb	r3, [sl, #37]	; 0x25
   123e4:	b	11c58 <__assert_fail@plt+0xb4>
   123e8:	mov	r3, #0
   123ec:	str	r3, [sp, #68]	; 0x44
   123f0:	b	11c58 <__assert_fail@plt+0xb4>
   123f4:	mov	r2, #5
   123f8:	ldr	r1, [pc, #1840]	; 12b30 <__assert_fail@plt+0xf8c>
   123fc:	mov	r0, #0
   12400:	bl	117d8 <dcgettext@plt>
   12404:	str	r0, [sp, #48]	; 0x30
   12408:	ldr	r0, [r9]
   1240c:	bl	1e590 <__assert_fail@plt+0xc9ec>
   12410:	mov	r1, #0
   12414:	ldr	r2, [sp, #48]	; 0x30
   12418:	mov	r3, r0
   1241c:	mov	r0, r1
   12420:	bl	118bc <error@plt>
   12424:	mov	r3, #0
   12428:	str	r3, [sp, #68]	; 0x44
   1242c:	b	11c58 <__assert_fail@plt+0xb4>
   12430:	ldr	r3, [sp, #68]	; 0x44
   12434:	cmp	r3, #0
   12438:	beq	13634 <__assert_fail@plt+0x1a90>
   1243c:	ldrb	r3, [sl, #36]	; 0x24
   12440:	ands	r3, r8, r3
   12444:	str	r3, [sp, #96]	; 0x60
   12448:	bne	13614 <__assert_fail@plt+0x1a70>
   1244c:	ldr	r3, [sp, #56]	; 0x38
   12450:	tst	r3, r8
   12454:	bne	12908 <__assert_fail@plt+0xd64>
   12458:	cmp	r8, #0
   1245c:	ldrne	r4, [pc, #1684]	; 12af8 <__assert_fail@plt+0xf54>
   12460:	bne	13320 <__assert_fail@plt+0x177c>
   12464:	ldrb	r3, [sl, #16]
   12468:	cmp	r3, #0
   1246c:	beq	12488 <__assert_fail@plt+0x8e4>
   12470:	ldrb	r3, [sl, #37]	; 0x25
   12474:	cmp	r3, #0
   12478:	bne	1344c <__assert_fail@plt+0x18a8>
   1247c:	mov	r2, #1
   12480:	mov	r3, #0
   12484:	strd	r2, [sl, #8]
   12488:	ldrb	r3, [sl, #17]
   1248c:	cmp	r3, #0
   12490:	beq	124b8 <__assert_fail@plt+0x914>
   12494:	ldr	r7, [sl, #56]	; 0x38
   12498:	cmp	r7, #0
   1249c:	beq	1348c <__assert_fail@plt+0x18e8>
   124a0:	ldr	r1, [sl, #56]	; 0x38
   124a4:	ldrb	r3, [r1]
   124a8:	cmp	r3, #43	; 0x2b
   124ac:	bne	13334 <__assert_fail@plt+0x1790>
   124b0:	add	r1, r1, #1
   124b4:	str	r1, [sl, #20]
   124b8:	ldr	r3, [sp, #64]	; 0x40
   124bc:	ldr	r4, [pc, #1648]	; 12b34 <__assert_fail@plt+0xf90>
   124c0:	cmp	r3, #0
   124c4:	ldr	r3, [r4]
   124c8:	beq	1340c <__assert_fail@plt+0x1868>
   124cc:	cmp	r6, r3
   124d0:	bgt	13550 <__assert_fail@plt+0x19ac>
   124d4:	ldr	r1, [pc, #1628]	; 12b38 <__assert_fail@plt+0xf94>
   124d8:	ldr	r0, [sp, #64]	; 0x40
   124dc:	bl	1170c <strcmp@plt>
   124e0:	ldr	r4, [pc, #1684]	; 12b7c <__assert_fail@plt+0xfd8>
   124e4:	cmp	r0, #0
   124e8:	beq	12504 <__assert_fail@plt+0x960>
   124ec:	ldr	r1, [pc, #1608]	; 12b3c <__assert_fail@plt+0xf98>
   124f0:	ldr	r0, [sp, #64]	; 0x40
   124f4:	ldr	r2, [r4]
   124f8:	bl	1731c <__assert_fail@plt+0x5778>
   124fc:	subs	r5, r0, #0
   12500:	beq	13514 <__assert_fail@plt+0x1970>
   12504:	ldr	r0, [r4]
   12508:	bl	140fc <__assert_fail@plt+0x2558>
   1250c:	mov	r3, #1
   12510:	strb	r3, [sl, #60]	; 0x3c
   12514:	str	r0, [sp, #72]	; 0x48
   12518:	ldr	r3, [sp, #72]	; 0x48
   1251c:	cmp	r3, #0
   12520:	beq	133fc <__assert_fail@plt+0x1858>
   12524:	bl	144a0 <__assert_fail@plt+0x28fc>
   12528:	cmp	r0, #0
   1252c:	str	r0, [sl, #64]	; 0x40
   12530:	beq	133fc <__assert_fail@plt+0x1858>
   12534:	ldrb	r3, [sl, #39]	; 0x27
   12538:	cmp	r3, #0
   1253c:	bne	1254c <__assert_fail@plt+0x9a8>
   12540:	ldrb	r3, [sl, #60]	; 0x3c
   12544:	cmp	r3, #0
   12548:	bne	12558 <__assert_fail@plt+0x9b4>
   1254c:	ldr	r3, [sp, #36]	; 0x24
   12550:	orr	r3, r3, #256	; 0x100
   12554:	str	r3, [sp, #36]	; 0x24
   12558:	ldr	r3, [sp, #36]	; 0x24
   1255c:	ldr	r2, [sp, #32]
   12560:	orr	r3, r3, r2
   12564:	str	r3, [sp, #100]	; 0x64
   12568:	ldr	r3, [sp, #68]	; 0x44
   1256c:	str	r3, [sp, #76]	; 0x4c
   12570:	mov	r1, fp
   12574:	ldr	r0, [sp, #72]	; 0x48
   12578:	bl	14130 <__assert_fail@plt+0x258c>
   1257c:	subs	r4, r0, #0
   12580:	beq	130c4 <__assert_fail@plt+0x1520>
   12584:	ldr	r3, [sp, #64]	; 0x40
   12588:	cmp	r3, #0
   1258c:	beq	12f30 <__assert_fail@plt+0x138c>
   12590:	ldr	r1, [pc, #1440]	; 12b38 <__assert_fail@plt+0xf94>
   12594:	ldr	r0, [sp, #64]	; 0x40
   12598:	bl	1170c <strcmp@plt>
   1259c:	cmp	r0, #0
   125a0:	bne	125b8 <__assert_fail@plt+0xa14>
   125a4:	ldr	r1, [pc, #1420]	; 12b38 <__assert_fail@plt+0xf94>
   125a8:	mov	r0, r4
   125ac:	bl	1170c <strcmp@plt>
   125b0:	subs	r5, r0, #0
   125b4:	beq	12a2c <__assert_fail@plt+0xe88>
   125b8:	ldrb	r3, [r4]
   125bc:	cmp	r3, #0
   125c0:	beq	12a68 <__assert_fail@plt+0xec4>
   125c4:	mov	r2, #0
   125c8:	ldr	r1, [sp, #100]	; 0x64
   125cc:	ldr	r0, [pc, #1388]	; 12b40 <__assert_fail@plt+0xf9c>
   125d0:	str	r4, [sl, #68]	; 0x44
   125d4:	bl	2ca44 <__assert_fail@plt+0x1aea0>
   125d8:	ldr	r9, [sp, #68]	; 0x44
   125dc:	str	r9, [sp, #32]
   125e0:	str	r0, [sp, #48]	; 0x30
   125e4:	b	12670 <__assert_fail@plt+0xacc>
   125e8:	ldr	r1, [sp, #56]	; 0x38
   125ec:	ldr	r0, [sl, #32]
   125f0:	bl	14d3c <__assert_fail@plt+0x3198>
   125f4:	subs	r5, r0, #0
   125f8:	bne	1264c <__assert_fail@plt+0xaa8>
   125fc:	cmp	r9, #11
   12600:	beq	131b4 <__assert_fail@plt+0x1610>
   12604:	cmp	r9, #13
   12608:	cmpne	r9, #10
   1260c:	moveq	r3, #1
   12610:	movne	r3, #0
   12614:	str	r3, [sp, #36]	; 0x24
   12618:	beq	13084 <__assert_fail@plt+0x14e0>
   1261c:	ldr	r2, [sp, #48]	; 0x30
   12620:	ldr	r3, [r2, #48]	; 0x30
   12624:	tst	r3, #64	; 0x40
   12628:	beq	129a0 <__assert_fail@plt+0xdfc>
   1262c:	ldr	r3, [r4, #48]	; 0x30
   12630:	cmp	r3, #0
   12634:	ble	129a0 <__assert_fail@plt+0xdfc>
   12638:	ldrd	r0, [r2, #16]
   1263c:	ldrd	r2, [r4, #64]	; 0x40
   12640:	cmp	r1, r3
   12644:	cmpeq	r0, r2
   12648:	beq	129a0 <__assert_fail@plt+0xdfc>
   1264c:	cmp	r9, #1
   12650:	beq	1304c <__assert_fail@plt+0x14a8>
   12654:	ldr	r3, [sp, #68]	; 0x44
   12658:	str	r3, [sp, #36]	; 0x24
   1265c:	ldr	r3, [sp, #32]
   12660:	ldr	r2, [sp, #36]	; 0x24
   12664:	and	r3, r3, r2
   12668:	uxtb	r3, r3
   1266c:	str	r3, [sp, #32]
   12670:	ldr	r0, [sp, #48]	; 0x30
   12674:	bl	18e04 <__assert_fail@plt+0x7260>
   12678:	subs	r4, r0, #0
   1267c:	beq	12eb4 <__assert_fail@plt+0x1310>
   12680:	ldrh	r9, [r4, #56]	; 0x38
   12684:	ldr	r3, [r4, #28]
   12688:	cmp	r9, #4
   1268c:	str	r3, [sp, #56]	; 0x38
   12690:	beq	12e54 <__assert_fail@plt+0x12b0>
   12694:	cmp	r9, #6
   12698:	bne	125e8 <__assert_fail@plt+0xa44>
   1269c:	ldr	r3, [sp, #68]	; 0x44
   126a0:	str	r3, [sp, #36]	; 0x24
   126a4:	ldrb	r3, [sl, #37]	; 0x25
   126a8:	cmp	r3, #0
   126ac:	beq	12980 <__assert_fail@plt+0xddc>
   126b0:	ldrd	r2, [r4, #112]	; 0x70
   126b4:	cmp	r2, #0
   126b8:	strd	r2, [sp, #24]
   126bc:	sbcs	r3, r3, #0
   126c0:	blt	12f20 <__assert_fail@plt+0x137c>
   126c4:	ldr	r3, [sl, #52]	; 0x34
   126c8:	cmp	r3, #0
   126cc:	bne	12968 <__assert_fail@plt+0xdc4>
   126d0:	ldr	r7, [r4, #144]	; 0x90
   126d4:	ldr	r8, [r4, #148]	; 0x94
   126d8:	ldr	r6, [r4, #48]	; 0x30
   126dc:	ldr	r3, [sl, #84]	; 0x54
   126e0:	ldrd	r4, [sp, #24]
   126e4:	mov	r0, #1
   126e8:	mov	r1, #0
   126ec:	cmp	r3, #0
   126f0:	strd	r4, [sp, #120]	; 0x78
   126f4:	str	r7, [sp, #136]	; 0x88
   126f8:	str	r8, [sp, #140]	; 0x8c
   126fc:	strd	r0, [sp, #128]	; 0x80
   12700:	beq	12a10 <__assert_fail@plt+0xe6c>
   12704:	ldr	lr, [sl, #76]	; 0x4c
   12708:	cmp	r6, lr
   1270c:	beq	12778 <__assert_fail@plt+0xbd4>
   12710:	bls	12bf0 <__assert_fail@plt+0x104c>
   12714:	cmp	r6, r3
   12718:	bcs	12f70 <__assert_fail@plt+0x13cc>
   1271c:	ldr	r3, [sl, #76]	; 0x4c
   12720:	add	r2, r3, #1
   12724:	cmp	r6, r2
   12728:	bcc	12778 <__assert_fail@plt+0xbd4>
   1272c:	ldr	ip, [sl, #88]	; 0x58
   12730:	add	r3, r3, r3, lsl #1
   12734:	mov	r0, #0
   12738:	add	r3, ip, r3, lsl #4
   1273c:	mov	r1, #0
   12740:	mov	lr, #-2147483648	; 0x80000000
   12744:	mvn	ip, #0
   12748:	add	r2, r2, #1
   1274c:	cmp	r6, r2
   12750:	strd	r0, [r3, #48]	; 0x30
   12754:	strd	r0, [r3, #56]	; 0x38
   12758:	str	lr, [r3, #64]	; 0x40
   1275c:	str	ip, [r3, #68]	; 0x44
   12760:	strd	r0, [r3, #72]	; 0x48
   12764:	strd	r0, [r3, #80]	; 0x50
   12768:	str	lr, [r3, #88]	; 0x58
   1276c:	str	ip, [r3, #92]	; 0x5c
   12770:	add	r3, r3, #48	; 0x30
   12774:	bcs	12748 <__assert_fail@plt+0xba4>
   12778:	ldrb	r3, [sl, #48]	; 0x30
   1277c:	str	r6, [sl, #76]	; 0x4c
   12780:	bic	r9, r9, #2
   12784:	cmp	r3, #0
   12788:	beq	12794 <__assert_fail@plt+0xbf0>
   1278c:	cmp	r9, #4
   12790:	beq	12824 <__assert_fail@plt+0xc80>
   12794:	add	lr, r6, r6, lsl #1
   12798:	ldr	r4, [sl, #88]	; 0x58
   1279c:	lsl	lr, lr, #4
   127a0:	ldrd	r2, [sp, #24]
   127a4:	ldrd	r0, [r4, lr]
   127a8:	add	ip, r4, lr
   127ac:	adds	r2, r2, r0
   127b0:	adc	r3, r3, r1
   127b4:	cmp	r1, r3
   127b8:	cmpeq	r0, r2
   127bc:	mvnhi	r2, #0
   127c0:	mvnhi	r3, #0
   127c4:	strd	r2, [r4, lr]
   127c8:	ldr	r2, [ip, #16]
   127cc:	ldr	r3, [ip, #20]
   127d0:	cmp	r7, r2
   127d4:	ldrd	r4, [ip, #8]
   127d8:	movle	r0, #0
   127dc:	movgt	r0, #1
   127e0:	cmp	r7, r2
   127e4:	rsbge	r0, r0, #0
   127e8:	rsblt	r0, r0, #1
   127ec:	cmp	r8, r3
   127f0:	movle	r1, #0
   127f4:	movgt	r1, #1
   127f8:	cmp	r8, r3
   127fc:	rsbge	r1, r1, #0
   12800:	rsblt	r1, r1, #1
   12804:	adds	r2, r4, #1
   12808:	adc	r3, r5, #0
   1280c:	mov	r5, r3
   12810:	adds	r3, r1, r0, lsl #1
   12814:	mov	r3, r5
   12818:	strmi	r7, [ip, #16]
   1281c:	strd	r2, [ip, #8]
   12820:	strmi	r8, [ip, #20]
   12824:	ldrd	r0, [sl, #96]	; 0x60
   12828:	ldrd	r2, [sp, #24]
   1282c:	ldrd	r4, [sl, #104]	; 0x68
   12830:	adds	r2, r2, r0
   12834:	adc	r3, r3, r1
   12838:	cmp	r1, r3
   1283c:	cmpeq	r0, r2
   12840:	ldr	r0, [sl, #112]	; 0x70
   12844:	mvnhi	r3, #0
   12848:	mvnhi	r2, #0
   1284c:	ldr	r1, [sl, #116]	; 0x74
   12850:	cmp	r7, r0
   12854:	strd	r2, [sl, #96]	; 0x60
   12858:	movle	r3, #0
   1285c:	movgt	r3, #1
   12860:	cmp	r7, r0
   12864:	rsbge	r0, r3, #0
   12868:	rsblt	r0, r3, #1
   1286c:	cmp	r8, r1
   12870:	movle	r3, #0
   12874:	movgt	r3, #1
   12878:	cmp	r8, r1
   1287c:	rsbge	r1, r3, #0
   12880:	rsblt	r1, r3, #1
   12884:	adds	r2, r4, #1
   12888:	adc	r3, r5, #0
   1288c:	mov	r5, r3
   12890:	adds	r3, r1, r0, lsl #1
   12894:	mov	r3, r5
   12898:	strmi	r7, [sl, #112]	; 0x70
   1289c:	strmi	r8, [sl, #116]	; 0x74
   128a0:	cmp	r9, #4
   128a4:	strd	r2, [sl, #104]	; 0x68
   128a8:	beq	12944 <__assert_fail@plt+0xda0>
   128ac:	ldrb	r3, [sl, #36]	; 0x24
   128b0:	cmp	r3, #0
   128b4:	bne	12944 <__assert_fail@plt+0xda0>
   128b8:	cmp	r6, #0
   128bc:	bne	1265c <__assert_fail@plt+0xab8>
   128c0:	ldrb	r3, [sl, #16]
   128c4:	cmp	r3, #0
   128c8:	beq	12960 <__assert_fail@plt+0xdbc>
   128cc:	ldrd	r0, [sp, #128]	; 0x80
   128d0:	ldrd	r4, [sl, #40]	; 0x28
   128d4:	cmp	r4, #0
   128d8:	sbcs	r3, r5, #0
   128dc:	blt	12e98 <__assert_fail@plt+0x12f4>
   128e0:	cmp	r1, r5
   128e4:	cmpeq	r0, r4
   128e8:	movcs	r3, #1
   128ec:	movcc	r3, #0
   128f0:	cmp	r3, #0
   128f4:	beq	1265c <__assert_fail@plt+0xab8>
   128f8:	ldr	r1, [sp, #56]	; 0x38
   128fc:	add	r0, sp, #120	; 0x78
   12900:	bl	137f0 <__assert_fail@plt+0x1c4c>
   12904:	b	1265c <__assert_fail@plt+0xab8>
   12908:	ldr	r4, [pc, #488]	; 12af8 <__assert_fail@plt+0xf54>
   1290c:	ldr	r7, [r4]
   12910:	cmp	r7, #0
   12914:	beq	132f4 <__assert_fail@plt+0x1750>
   12918:	mov	r2, #5
   1291c:	ldr	r1, [pc, #544]	; 12b44 <__assert_fail@plt+0xfa0>
   12920:	mov	r0, #0
   12924:	bl	117d8 <dcgettext@plt>
   12928:	mov	r1, #0
   1292c:	mov	r3, r7
   12930:	mov	r2, r0
   12934:	mov	r0, r1
   12938:	bl	118bc <error@plt>
   1293c:	mov	r0, #1
   12940:	bl	13940 <__assert_fail@plt+0x1d9c>
   12944:	ldr	r3, [pc, #428]	; 12af8 <__assert_fail@plt+0xf54>
   12948:	ldr	r3, [r3]
   1294c:	cmp	r6, r3
   12950:	bhi	128b8 <__assert_fail@plt+0xd14>
   12954:	ldrb	r3, [sl, #16]
   12958:	cmp	r3, #0
   1295c:	bne	128cc <__assert_fail@plt+0xd28>
   12960:	ldrd	r0, [sp, #120]	; 0x78
   12964:	b	128d0 <__assert_fail@plt+0xd2c>
   12968:	cmp	r3, #2
   1296c:	ldreq	r7, [r4, #136]	; 0x88
   12970:	ldreq	r8, [r4, #140]	; 0x8c
   12974:	ldrne	r7, [r4, #152]	; 0x98
   12978:	ldrne	r8, [r4, #156]	; 0x9c
   1297c:	b	126d8 <__assert_fail@plt+0xb34>
   12980:	ldr	r2, [r4, #132]	; 0x84
   12984:	ldr	r3, [r4, #128]	; 0x80
   12988:	lsl	r2, r2, #9
   1298c:	orr	r2, r2, r3, lsr #23
   12990:	lsl	r3, r3, #9
   12994:	str	r2, [sp, #28]
   12998:	str	r3, [sp, #24]
   1299c:	b	126c4 <__assert_fail@plt+0xb20>
   129a0:	ldrb	r3, [sl, #39]	; 0x27
   129a4:	cmp	r3, #0
   129a8:	bne	129f4 <__assert_fail@plt+0xe50>
   129ac:	ldrb	r3, [sl, #60]	; 0x3c
   129b0:	cmp	r3, #0
   129b4:	bne	129d4 <__assert_fail@plt+0xe30>
   129b8:	ldr	r3, [r4, #80]	; 0x50
   129bc:	and	r3, r3, #61440	; 0xf000
   129c0:	cmp	r3, #16384	; 0x4000
   129c4:	beq	129f4 <__assert_fail@plt+0xe50>
   129c8:	ldr	r3, [r4, #84]	; 0x54
   129cc:	cmp	r3, #1
   129d0:	bls	129f4 <__assert_fail@plt+0xe50>
   129d4:	ldrd	r6, [r4, #160]	; 0xa0
   129d8:	ldrd	r2, [r4, #64]	; 0x40
   129dc:	ldr	r0, [sl, #64]	; 0x40
   129e0:	strd	r6, [sp]
   129e4:	bl	1454c <__assert_fail@plt+0x29a8>
   129e8:	cmp	r0, #0
   129ec:	blt	133fc <__assert_fail@plt+0x1858>
   129f0:	beq	1264c <__assert_fail@plt+0xaa8>
   129f4:	cmp	r9, #2
   129f8:	beq	13120 <__assert_fail@plt+0x157c>
   129fc:	cmp	r9, #7
   12a00:	beq	130f4 <__assert_fail@plt+0x1550>
   12a04:	cmp	r9, #1
   12a08:	bne	1269c <__assert_fail@plt+0xaf8>
   12a0c:	b	12654 <__assert_fail@plt+0xab0>
   12a10:	add	r3, r6, #10
   12a14:	mov	r0, r3
   12a18:	mov	r1, #48	; 0x30
   12a1c:	str	r3, [sl, #84]	; 0x54
   12a20:	bl	2c91c <__assert_fail@plt+0x1ad78>
   12a24:	str	r0, [sl, #88]	; 0x58
   12a28:	b	12778 <__assert_fail@plt+0xbd4>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #272]	; 12b48 <__assert_fail@plt+0xfa4>
   12a34:	bl	117d8 <dcgettext@plt>
   12a38:	mov	r1, r4
   12a3c:	mov	r6, r0
   12a40:	mov	r0, #4
   12a44:	bl	1e350 <__assert_fail@plt+0xc7ac>
   12a48:	mov	r2, r6
   12a4c:	mov	r1, r5
   12a50:	mov	r3, r0
   12a54:	mov	r0, r5
   12a58:	bl	118bc <error@plt>
   12a5c:	ldrb	r3, [r4]
   12a60:	cmp	r3, #0
   12a64:	bne	12f64 <__assert_fail@plt+0x13c0>
   12a68:	ldr	r0, [sp, #72]	; 0x48
   12a6c:	bl	141cc <__assert_fail@plt+0x2628>
   12a70:	ldr	r2, [sp, #64]	; 0x40
   12a74:	mov	r1, #3
   12a78:	mov	r5, r0
   12a7c:	mov	r0, #0
   12a80:	bl	1e40c <__assert_fail@plt+0xc868>
   12a84:	mov	r2, #5
   12a88:	ldr	r1, [pc, #200]	; 12b58 <__assert_fail@plt+0xfb4>
   12a8c:	mov	r4, r0
   12a90:	mov	r0, #0
   12a94:	bl	117d8 <dcgettext@plt>
   12a98:	mov	r1, #0
   12a9c:	ldr	ip, [sp, #96]	; 0x60
   12aa0:	str	r5, [sp]
   12aa4:	mov	r3, r4
   12aa8:	ldr	r2, [pc, #156]	; 12b4c <__assert_fail@plt+0xfa8>
   12aac:	str	ip, [sp, #76]	; 0x4c
   12ab0:	str	r0, [sp, #4]
   12ab4:	mov	r0, r1
   12ab8:	bl	118bc <error@plt>
   12abc:	b	12570 <__assert_fail@plt+0x9cc>
   12ac0:	andeq	r0, r3, r4, asr #7
   12ac4:	andeq	r0, r3, r4, lsr #23
   12ac8:	andeq	r0, r3, r8, asr #7
   12acc:	andeq	r0, r3, r0, lsl r3
   12ad0:	andeq	r4, r1, r4, lsr r2
   12ad4:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   12ad8:	andeq	r2, r4, r8, asr #4
   12adc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   12ae0:	andeq	r2, r4, r0, asr #4
   12ae4:	andeq	r0, r3, r0, ror #7
   12ae8:	andeq	r0, r0, sl, lsl #2
   12aec:	andeq	r0, r3, r4, lsr #8
   12af0:	andeq	r2, r4, r0, ror r2
   12af4:	andeq	r0, r3, r0, lsr r4
   12af8:	andeq	r2, r4, ip, asr #3
   12afc:	ldrdeq	r4, [r1], -r8
   12b00:	andeq	r2, r4, r0, asr r2
   12b04:	andeq	r0, r3, r0, ror #8
   12b08:	andeq	r0, r3, r0, ror r4
   12b0c:	andeq	r0, r3, ip, ror r4
   12b10:	ldrdeq	r2, [r4], -r0
   12b14:	andeq	r2, r4, ip, lsr r2
   12b18:	andeq	r0, r3, ip, lsl #9
   12b1c:	andeq	r0, r3, ip, lsl #6
   12b20:	andeq	pc, r2, ip, ror #8
   12b24:	andeq	pc, r2, ip, ror #7
   12b28:	andeq	r0, r3, r4, asr r4
   12b2c:	andeq	r0, r3, ip, asr r4
   12b30:	andeq	r0, r3, r8, lsl #8
   12b34:	andeq	r2, r4, r8, lsr #4
   12b38:	andeq	r0, r3, ip, lsl r6
   12b3c:	andeq	r1, r3, r0, lsl #1
   12b40:	andeq	r2, r4, ip, lsl #5
   12b44:	andeq	r0, r3, r4, lsl #10
   12b48:	andeq	r0, r3, r0, lsl #13
   12b4c:	andeq	r0, r3, r4, lsr r8
   12b50:	ldrdeq	r0, [r3], -r4
   12b54:	andeq	r0, r3, r8, lsr #14
   12b58:	andeq	r0, r3, r4, lsl r8
   12b5c:	strdeq	r0, [r3], -ip
   12b60:	andeq	pc, r2, r8, lsr #8
   12b64:	andeq	r0, r0, r9, lsr r4
   12b68:	andeq	r0, r3, r8, asr r6
   12b6c:	andeq	r0, r3, ip, ror #20
   12b70:	andeq	r0, r3, r8, asr r7
   12b74:	andeq	r0, r3, r0, asr #13
   12b78:	andeq	r0, r3, ip, lsr r6
   12b7c:	andeq	r2, r4, r8, lsr r2
   12b80:	andeq	r0, r3, r0, asr r7
   12b84:	andeq	r2, r4, r8, lsr #5
   12b88:	andeq	r0, r3, ip, asr #9
   12b8c:			; <UNDEFINED> instruction: 0x000303b8
   12b90:	ldrdeq	r2, [r4], -r4
   12b94:	andeq	pc, r2, r0, lsl #4
   12b98:	muleq	r3, r4, r5
   12b9c:	andeq	r0, r3, r8, asr #11
   12ba0:			; <UNDEFINED> instruction: 0x000305b8
   12ba4:	andeq	r0, r3, r8, lsr r5
   12ba8:	andeq	r0, r3, r0, lsr #11
   12bac:	andeq	r0, r3, r0, lsl #11
   12bb0:	andeq	r0, r3, ip, lsl #11
   12bb4:	andeq	pc, r2, r4, lsl #8
   12bb8:	andeq	r0, r3, r0, lsr #12
   12bbc:	ldrdeq	r0, [r3], -r4
   12bc0:	andeq	r2, r4, r0, lsr r2
   12bc4:	andeq	r0, r3, r8, ror #11
   12bc8:	andeq	r1, r3, r4, ror #1
   12bcc:	andeq	r0, r0, pc, lsl #4
   12bd0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   12bd4:	andeq	r0, r0, lr, ror r2
   12bd8:	andeq	r0, r3, r0, lsl r7
   12bdc:	andeq	pc, r2, r0, lsr r4	; <UNPREDICTABLE>
   12be0:	andeq	r0, r3, ip, asr #12
   12be4:	andeq	r0, r3, ip, lsr r7
   12be8:	andeq	r0, r3, r0, lsr #9
   12bec:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   12bf0:	sub	r3, lr, #1
   12bf4:	cmp	r6, r3
   12bf8:	bne	135cc <__assert_fail@plt+0x1a28>
   12bfc:	add	lr, lr, lr, lsl #1
   12c00:	ldr	ip, [sl, #88]	; 0x58
   12c04:	lsl	lr, lr, #4
   12c08:	ldrd	r0, [sp, #24]
   12c0c:	ldrd	r4, [ip, lr]
   12c10:	add	r3, ip, lr
   12c14:	str	r3, [sp, #60]	; 0x3c
   12c18:	adds	r0, r0, r4
   12c1c:	adc	r1, r1, r5
   12c20:	mov	r2, r0
   12c24:	mov	r3, r1
   12c28:	ldrd	r0, [sp, #24]
   12c2c:	strd	r2, [sp, #40]	; 0x28
   12c30:	cmp	r1, r3
   12c34:	cmpeq	r0, r2
   12c38:	mvnhi	r2, #0
   12c3c:	mvnhi	r3, #0
   12c40:	strdhi	r2, [sp, #40]	; 0x28
   12c44:	add	r3, ip, lr
   12c48:	ldrd	r0, [r3, #8]
   12c4c:	ldrd	r2, [sp, #40]	; 0x28
   12c50:	adds	r4, r0, #1
   12c54:	adc	r5, r1, #0
   12c58:	strd	r2, [sp, #120]	; 0x78
   12c5c:	add	r3, ip, lr
   12c60:	strd	r4, [sp, #128]	; 0x80
   12c64:	add	r2, ip, lr
   12c68:	ldr	r3, [r3, #16]
   12c6c:	ldr	r0, [r2, #20]
   12c70:	cmp	r7, r3
   12c74:	movge	r1, #0
   12c78:	movlt	r1, #1
   12c7c:	cmp	r7, r3
   12c80:	rsble	r1, r1, #0
   12c84:	rsbgt	r1, r1, #1
   12c88:	cmp	r8, r0
   12c8c:	movge	r3, #0
   12c90:	movlt	r3, #1
   12c94:	cmp	r8, r0
   12c98:	rsble	r3, r3, #0
   12c9c:	rsbgt	r3, r3, #1
   12ca0:	adds	r3, r3, r1, lsl #1
   12ca4:	movmi	r3, r2
   12ca8:	addmi	r3, r3, #16
   12cac:	strd	r4, [sp, #80]	; 0x50
   12cb0:	ldmmi	r3, {r0, r1}
   12cb4:	addmi	r3, sp, #136	; 0x88
   12cb8:	stmmi	r3, {r0, r1}
   12cbc:	ldrb	r3, [sl, #48]	; 0x30
   12cc0:	cmp	r3, #0
   12cc4:	beq	12f90 <__assert_fail@plt+0x13ec>
   12cc8:	add	r3, r6, r6, lsl #1
   12ccc:	ldrd	r4, [ip, lr]
   12cd0:	add	r3, ip, r3, lsl #4
   12cd4:	str	r3, [sp, #40]	; 0x28
   12cd8:	ldrd	r0, [r3, #24]
   12cdc:	adds	r2, r4, r0
   12ce0:	adc	r3, r5, r1
   12ce4:	cmp	r1, r3
   12ce8:	cmpeq	r0, r2
   12cec:	strd	r2, [sp, #80]	; 0x50
   12cf0:	mvnhi	r2, #0
   12cf4:	mvnhi	r3, #0
   12cf8:	strdhi	r2, [sp, #80]	; 0x50
   12cfc:	ldr	ip, [sp, #40]	; 0x28
   12d00:	ldr	r3, [sp, #60]	; 0x3c
   12d04:	ldrd	r4, [ip, #32]
   12d08:	ldrd	r0, [r3, #8]
   12d0c:	ldrd	r2, [sp, #80]	; 0x50
   12d10:	ldr	lr, [ip, #40]	; 0x28
   12d14:	adds	r4, r4, r0
   12d18:	strd	r2, [ip, #24]
   12d1c:	adc	r5, r5, r1
   12d20:	mov	r3, ip
   12d24:	ldr	ip, [ip, #44]	; 0x2c
   12d28:	strd	r4, [r3, #32]
   12d2c:	ldr	r3, [sp, #60]	; 0x3c
   12d30:	strd	r4, [sp, #88]	; 0x58
   12d34:	ldr	r1, [r3, #16]
   12d38:	ldr	r4, [r3, #20]
   12d3c:	cmp	lr, r1
   12d40:	movge	r0, #0
   12d44:	movlt	r0, #1
   12d48:	cmp	lr, r1
   12d4c:	rsble	r0, r0, #0
   12d50:	rsbgt	r0, r0, #1
   12d54:	ldr	r1, [r3, #20]
   12d58:	cmp	ip, r1
   12d5c:	movge	r1, #0
   12d60:	movlt	r1, #1
   12d64:	cmp	ip, r4
   12d68:	rsble	r1, r1, #0
   12d6c:	rsbgt	r1, r1, #1
   12d70:	adds	r1, r1, r0, lsl #1
   12d74:	bpl	12d94 <__assert_fail@plt+0x11f0>
   12d78:	add	r1, r3, #16
   12d7c:	ldr	r3, [sp, #40]	; 0x28
   12d80:	ldm	r1, {r0, r1}
   12d84:	add	ip, r3, #40	; 0x28
   12d88:	stm	ip, {r0, r1}
   12d8c:	ldr	ip, [r3, #44]	; 0x2c
   12d90:	mov	lr, r0
   12d94:	ldr	r3, [sp, #60]	; 0x3c
   12d98:	ldrd	r0, [r3, #24]
   12d9c:	ldrd	r2, [sp, #80]	; 0x50
   12da0:	adds	r4, r2, r0
   12da4:	adc	r5, r3, r1
   12da8:	mov	r1, r5
   12dac:	cmp	r1, r3
   12db0:	mov	r0, r4
   12db4:	cmpeq	r0, r2
   12db8:	mvncc	r3, #0
   12dbc:	movcc	r1, r3
   12dc0:	ldr	r3, [sp, #60]	; 0x3c
   12dc4:	mvncc	r2, #0
   12dc8:	movcc	r0, r2
   12dcc:	ldrd	r4, [r3, #32]
   12dd0:	mov	r3, r1
   12dd4:	ldr	r1, [sp, #40]	; 0x28
   12dd8:	mov	r2, r0
   12ddc:	strd	r2, [r1, #24]
   12de0:	ldrd	r0, [sp, #88]	; 0x58
   12de4:	ldr	r3, [sp, #40]	; 0x28
   12de8:	adds	r0, r0, r4
   12dec:	adc	r1, r1, r5
   12df0:	mov	r5, r1
   12df4:	mov	r4, r0
   12df8:	strd	r4, [r3, #32]
   12dfc:	ldr	r3, [sp, #60]	; 0x3c
   12e00:	ldr	r4, [r3, #40]	; 0x28
   12e04:	ldr	r0, [r3, #44]	; 0x2c
   12e08:	cmp	lr, r4
   12e0c:	movge	r1, #0
   12e10:	movlt	r1, #1
   12e14:	cmp	lr, r4
   12e18:	rsble	lr, r1, #0
   12e1c:	rsbgt	lr, r1, #1
   12e20:	cmp	ip, r0
   12e24:	movge	r5, #0
   12e28:	movlt	r5, #1
   12e2c:	cmp	ip, r0
   12e30:	rsble	ip, r5, #0
   12e34:	rsbgt	ip, r5, #1
   12e38:	adds	r1, ip, lr, lsl #1
   12e3c:	addmi	r2, r3, #40	; 0x28
   12e40:	ldrmi	r3, [sp, #40]	; 0x28
   12e44:	ldmmi	r2, {r0, r1}
   12e48:	addmi	r3, r3, #40	; 0x28
   12e4c:	stmmi	r3, {r0, r1}
   12e50:	b	12778 <__assert_fail@plt+0xbd4>
   12e54:	mov	r2, #5
   12e58:	ldr	r1, [pc, #-784]	; 12b50 <__assert_fail@plt+0xfac>
   12e5c:	mov	r0, #0
   12e60:	ldr	r5, [r4, #32]
   12e64:	bl	117d8 <dcgettext@plt>
   12e68:	ldr	r1, [sp, #56]	; 0x38
   12e6c:	mov	r6, r0
   12e70:	mov	r0, r9
   12e74:	bl	1e350 <__assert_fail@plt+0xc7ac>
   12e78:	mov	r2, r6
   12e7c:	mov	r1, r5
   12e80:	mov	r3, r0
   12e84:	mov	r0, #0
   12e88:	bl	118bc <error@plt>
   12e8c:	ldr	r3, [sp, #96]	; 0x60
   12e90:	str	r3, [sp, #36]	; 0x24
   12e94:	b	126a4 <__assert_fail@plt+0xb00>
   12e98:	rsbs	r2, r4, #0
   12e9c:	rsc	r3, r5, #0
   12ea0:	cmp	r3, r1
   12ea4:	cmpeq	r2, r0
   12ea8:	movcs	r3, #1
   12eac:	movcc	r3, #0
   12eb0:	b	128f0 <__assert_fail@plt+0xd4c>
   12eb4:	bl	119b8 <__errno_location@plt>
   12eb8:	ldr	r9, [sp, #32]
   12ebc:	ldr	r6, [r0]
   12ec0:	mov	r5, r0
   12ec4:	cmp	r6, #0
   12ec8:	bne	131e0 <__assert_fail@plt+0x163c>
   12ecc:	mov	r4, #0
   12ed0:	ldr	r0, [sp, #48]	; 0x30
   12ed4:	str	r4, [sl, #76]	; 0x4c
   12ed8:	bl	18ca4 <__assert_fail@plt+0x7100>
   12edc:	cmp	r0, r4
   12ee0:	beq	12f0c <__assert_fail@plt+0x1368>
   12ee4:	mov	r2, #5
   12ee8:	ldr	r1, [pc, #-924]	; 12b54 <__assert_fail@plt+0xfb0>
   12eec:	mov	r0, r4
   12ef0:	ldr	r5, [r5]
   12ef4:	bl	117d8 <dcgettext@plt>
   12ef8:	mov	r1, r5
   12efc:	mov	r2, r0
   12f00:	mov	r0, r4
   12f04:	bl	118bc <error@plt>
   12f08:	ldr	r9, [sp, #96]	; 0x60
   12f0c:	ldr	r8, [sp, #76]	; 0x4c
   12f10:	and	r8, r8, r9
   12f14:	uxtb	r3, r8
   12f18:	str	r3, [sp, #76]	; 0x4c
   12f1c:	b	12570 <__assert_fail@plt+0x9cc>
   12f20:	mov	r2, #0
   12f24:	mov	r3, #0
   12f28:	strd	r2, [sp, #24]
   12f2c:	b	126c4 <__assert_fail@plt+0xb20>
   12f30:	ldrb	r3, [r4]
   12f34:	cmp	r3, #0
   12f38:	bne	125c4 <__assert_fail@plt+0xa20>
   12f3c:	ldr	r4, [sp, #64]	; 0x40
   12f40:	mov	r2, #5
   12f44:	ldr	r1, [pc, #-1012]	; 12b58 <__assert_fail@plt+0xfb4>
   12f48:	mov	r0, r4
   12f4c:	bl	117d8 <dcgettext@plt>
   12f50:	ldr	r2, [pc, #-1004]	; 12b6c <__assert_fail@plt+0xfc8>
   12f54:	mov	r1, r4
   12f58:	mov	r3, r0
   12f5c:	mov	r0, r4
   12f60:	bl	118bc <error@plt>
   12f64:	ldr	r3, [sp, #96]	; 0x60
   12f68:	str	r3, [sp, #76]	; 0x4c
   12f6c:	b	12570 <__assert_fail@plt+0x9cc>
   12f70:	mov	r2, #96	; 0x60
   12f74:	mov	r1, r6
   12f78:	ldr	r0, [sl, #88]	; 0x58
   12f7c:	bl	2c548 <__assert_fail@plt+0x1a9a4>
   12f80:	lsl	r3, r6, #1
   12f84:	str	r3, [sl, #84]	; 0x54
   12f88:	str	r0, [sl, #88]	; 0x58
   12f8c:	b	1271c <__assert_fail@plt+0xb78>
   12f90:	add	r3, ip, lr
   12f94:	ldrd	r0, [r3, #24]
   12f98:	ldrd	r2, [sp, #40]	; 0x28
   12f9c:	adds	r4, r2, r0
   12fa0:	adc	r5, r3, r1
   12fa4:	cmp	r3, r5
   12fa8:	cmpeq	r2, r4
   12fac:	mvnhi	r3, #0
   12fb0:	mov	r1, r5
   12fb4:	mvnhi	r2, #0
   12fb8:	movhi	r1, r3
   12fbc:	add	r3, ip, lr
   12fc0:	mov	r0, r4
   12fc4:	movhi	r0, r2
   12fc8:	ldrd	r4, [r3, #32]
   12fcc:	mov	r2, r0
   12fd0:	mov	r3, r1
   12fd4:	ldrd	r0, [sp, #80]	; 0x50
   12fd8:	strd	r2, [sp, #120]	; 0x78
   12fdc:	add	r3, ip, lr
   12fe0:	adds	r0, r0, r4
   12fe4:	adc	r1, r1, r5
   12fe8:	ldr	r4, [sp, #140]	; 0x8c
   12fec:	strd	r0, [sp, #128]	; 0x80
   12ff0:	ldr	r0, [r3, #40]	; 0x28
   12ff4:	ldr	r1, [r3, #44]	; 0x2c
   12ff8:	ldr	r3, [sp, #136]	; 0x88
   12ffc:	ldr	r5, [sp, #136]	; 0x88
   13000:	cmp	r3, r0
   13004:	movge	r3, #0
   13008:	movlt	r3, #1
   1300c:	cmp	r5, r0
   13010:	rsble	r3, r3, #0
   13014:	rsbgt	r3, r3, #1
   13018:	cmp	r4, r1
   1301c:	movge	r0, #0
   13020:	movlt	r0, #1
   13024:	cmp	r4, r1
   13028:	rsble	r4, r0, #0
   1302c:	rsbgt	r4, r0, #1
   13030:	adds	r3, r4, r3, lsl #1
   13034:	addmi	r3, ip, lr
   13038:	addmi	r3, r3, #40	; 0x28
   1303c:	ldmmi	r3, {r0, r1}
   13040:	addmi	r3, sp, #136	; 0x88
   13044:	stmmi	r3, {r0, r1}
   13048:	b	12cc8 <__assert_fail@plt+0x1124>
   1304c:	ldr	r5, [sp, #48]	; 0x30
   13050:	mov	r2, #4
   13054:	mov	r1, r4
   13058:	mov	r0, r5
   1305c:	bl	194bc <__assert_fail@plt+0x7918>
   13060:	mov	r0, r5
   13064:	bl	18e04 <__assert_fail@plt+0x7260>
   13068:	cmp	r4, r0
   1306c:	beq	12654 <__assert_fail@plt+0xab0>
   13070:	ldr	r3, [pc, #-1180]	; 12bdc <__assert_fail@plt+0x1038>
   13074:	mov	r2, #560	; 0x230
   13078:	ldr	r1, [pc, #-1184]	; 12be0 <__assert_fail@plt+0x103c>
   1307c:	ldr	r0, [pc, #-1204]	; 12bd0 <__assert_fail@plt+0x102c>
   13080:	bl	11ba4 <__assert_fail@plt>
   13084:	mov	r2, #5
   13088:	ldr	r1, [pc, #-1332]	; 12b5c <__assert_fail@plt+0xfb8>
   1308c:	mov	r0, #0
   13090:	ldr	r4, [r4, #32]
   13094:	bl	117d8 <dcgettext@plt>
   13098:	ldr	r1, [sp, #56]	; 0x38
   1309c:	mov	r6, r0
   130a0:	mov	r0, #4
   130a4:	bl	1e350 <__assert_fail@plt+0xc7ac>
   130a8:	mov	r2, r6
   130ac:	mov	r1, r4
   130b0:	str	r5, [sp, #36]	; 0x24
   130b4:	mov	r3, r0
   130b8:	mov	r0, #0
   130bc:	bl	118bc <error@plt>
   130c0:	b	1265c <__assert_fail@plt+0xab8>
   130c4:	ldr	r3, [sp, #108]	; 0x6c
   130c8:	cmp	r3, #3
   130cc:	beq	133fc <__assert_fail@plt+0x1858>
   130d0:	cmp	r3, #4
   130d4:	beq	13224 <__assert_fail@plt+0x1680>
   130d8:	cmp	r3, #2
   130dc:	beq	1326c <__assert_fail@plt+0x16c8>
   130e0:	ldr	r3, [pc, #-1416]	; 12b60 <__assert_fail@plt+0xfbc>
   130e4:	ldr	r2, [pc, #-1416]	; 12b64 <__assert_fail@plt+0xfc0>
   130e8:	ldr	r1, [pc, #-1296]	; 12be0 <__assert_fail@plt+0x103c>
   130ec:	ldr	r0, [pc, #-1420]	; 12b68 <__assert_fail@plt+0xfc4>
   130f0:	bl	11ba4 <__assert_fail@plt>
   130f4:	ldr	r2, [sp, #56]	; 0x38
   130f8:	mov	r1, #3
   130fc:	mov	r0, #0
   13100:	ldr	r5, [r4, #32]
   13104:	bl	1e40c <__assert_fail@plt+0xc868>
   13108:	ldr	r2, [pc, #-1444]	; 12b6c <__assert_fail@plt+0xfc8>
   1310c:	mov	r1, r5
   13110:	mov	r3, r0
   13114:	mov	r0, #0
   13118:	bl	118bc <error@plt>
   1311c:	b	126a4 <__assert_fail@plt+0xb00>
   13120:	mov	r1, r4
   13124:	ldr	r0, [sp, #48]	; 0x30
   13128:	bl	2ca8c <__assert_fail@plt+0x1aee8>
   1312c:	cmp	r0, #0
   13130:	beq	12654 <__assert_fail@plt+0xab0>
   13134:	ldr	r6, [sl, #80]	; 0x50
   13138:	ldr	r5, [r4]
   1313c:	cmp	r6, #0
   13140:	beq	13388 <__assert_fail@plt+0x17e4>
   13144:	cmp	r4, r5
   13148:	beq	13178 <__assert_fail@plt+0x15d4>
   1314c:	ldrd	r6, [r4, #160]	; 0xa0
   13150:	ldrd	r2, [r4, #64]	; 0x40
   13154:	ldr	r0, [sl, #80]	; 0x50
   13158:	strd	r6, [sp]
   1315c:	bl	1459c <__assert_fail@plt+0x29f8>
   13160:	cmp	r0, #0
   13164:	bgt	12654 <__assert_fail@plt+0xab0>
   13168:	ldr	r4, [r4, #4]
   1316c:	cmp	r4, #0
   13170:	cmpne	r5, r4
   13174:	bne	1314c <__assert_fail@plt+0x15a8>
   13178:	mov	r2, #5
   1317c:	ldr	r1, [pc, #-1556]	; 12b70 <__assert_fail@plt+0xfcc>
   13180:	mov	r0, #0
   13184:	bl	117d8 <dcgettext@plt>
   13188:	ldr	r2, [sp, #56]	; 0x38
   1318c:	mov	r1, #3
   13190:	mov	r4, r0
   13194:	mov	r0, #0
   13198:	bl	1e40c <__assert_fail@plt+0xc868>
   1319c:	mov	r1, #0
   131a0:	mov	r2, r4
   131a4:	mov	r3, r0
   131a8:	mov	r0, r1
   131ac:	bl	118bc <error@plt>
   131b0:	b	1265c <__assert_fail@plt+0xab8>
   131b4:	ldr	r6, [sp, #48]	; 0x30
   131b8:	mov	r2, #1
   131bc:	mov	r1, r4
   131c0:	mov	r0, r6
   131c4:	bl	194bc <__assert_fail@plt+0x7918>
   131c8:	mov	r0, r6
   131cc:	bl	18e04 <__assert_fail@plt+0x7260>
   131d0:	cmp	r4, r0
   131d4:	bne	135b8 <__assert_fail@plt+0x1a14>
   131d8:	ldrh	r9, [r4, #56]	; 0x38
   131dc:	b	12604 <__assert_fail@plt+0xa60>
   131e0:	mov	r2, #5
   131e4:	ldr	r1, [pc, #-1656]	; 12b74 <__assert_fail@plt+0xfd0>
   131e8:	mov	r0, r4
   131ec:	bl	117d8 <dcgettext@plt>
   131f0:	ldr	r3, [sp, #48]	; 0x30
   131f4:	mov	r1, #3
   131f8:	ldr	r2, [r3, #24]
   131fc:	mov	r7, r0
   13200:	mov	r0, r4
   13204:	bl	1e40c <__assert_fail@plt+0xc868>
   13208:	mov	r2, r7
   1320c:	mov	r1, r6
   13210:	mov	r3, r0
   13214:	mov	r0, r4
   13218:	bl	118bc <error@plt>
   1321c:	ldr	r9, [sp, #96]	; 0x60
   13220:	b	12ecc <__assert_fail@plt+0x1328>
   13224:	bl	119b8 <__errno_location@plt>
   13228:	ldr	r3, [sp, #96]	; 0x60
   1322c:	mov	r2, #5
   13230:	ldr	r1, [pc, #-1728]	; 12b78 <__assert_fail@plt+0xfd4>
   13234:	str	r3, [sp, #76]	; 0x4c
   13238:	ldr	r5, [r0]
   1323c:	mov	r0, r4
   13240:	bl	117d8 <dcgettext@plt>
   13244:	ldr	r2, [sp, #64]	; 0x40
   13248:	mov	r1, #3
   1324c:	mov	r6, r0
   13250:	mov	r0, r4
   13254:	bl	1e40c <__assert_fail@plt+0xc868>
   13258:	mov	r2, r6
   1325c:	mov	r1, r5
   13260:	mov	r3, r0
   13264:	mov	r0, r4
   13268:	bl	118bc <error@plt>
   1326c:	ldr	r0, [sp, #72]	; 0x48
   13270:	bl	141ec <__assert_fail@plt+0x2648>
   13274:	ldr	r0, [sl, #64]	; 0x40
   13278:	bl	14518 <__assert_fail@plt+0x2974>
   1327c:	ldr	r0, [sl, #80]	; 0x50
   13280:	cmp	r0, #0
   13284:	beq	1328c <__assert_fail@plt+0x16e8>
   13288:	bl	14518 <__assert_fail@plt+0x2974>
   1328c:	ldr	r3, [sp, #64]	; 0x40
   13290:	cmp	r3, #0
   13294:	beq	132b8 <__assert_fail@plt+0x1714>
   13298:	ldr	r3, [pc, #-1828]	; 12b7c <__assert_fail@plt+0xfd8>
   1329c:	ldr	r0, [r3]
   132a0:	ldr	r3, [r0]
   132a4:	tst	r3, #32
   132a8:	beq	13470 <__assert_fail@plt+0x18cc>
   132ac:	ldr	r3, [sp, #76]	; 0x4c
   132b0:	cmp	r3, #0
   132b4:	bne	135e0 <__assert_fail@plt+0x1a3c>
   132b8:	ldrb	r3, [sl, #38]	; 0x26
   132bc:	cmp	r3, #0
   132c0:	beq	132e0 <__assert_fail@plt+0x173c>
   132c4:	ldr	r1, [pc, #-1868]	; 12b80 <__assert_fail@plt+0xfdc>
   132c8:	mov	r2, #5
   132cc:	mov	r0, #0
   132d0:	bl	117d8 <dcgettext@plt>
   132d4:	mov	r1, r0
   132d8:	ldr	r0, [pc, #-1884]	; 12b84 <__assert_fail@plt+0xfe0>
   132dc:	bl	137f0 <__assert_fail@plt+0x1c4c>
   132e0:	ldr	r3, [sp, #76]	; 0x4c
   132e4:	eor	r0, r3, #1
   132e8:	uxtb	r0, r0
   132ec:	add	sp, sp, #228	; 0xe4
   132f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f4:	mov	r2, #5
   132f8:	ldr	r1, [pc, #-1912]	; 12b88 <__assert_fail@plt+0xfe4>
   132fc:	mov	r0, r7
   13300:	bl	117d8 <dcgettext@plt>
   13304:	mov	r1, r7
   13308:	mov	r2, r0
   1330c:	mov	r0, r7
   13310:	bl	118bc <error@plt>
   13314:	ldr	r7, [r4]
   13318:	cmp	r7, #0
   1331c:	bne	12918 <__assert_fail@plt+0xd74>
   13320:	mov	r3, #0
   13324:	str	r3, [r4]
   13328:	b	12464 <__assert_fail@plt+0x8c0>
   1332c:	ldr	r1, [pc, #-1960]	; 12b8c <__assert_fail@plt+0xfe8>
   13330:	str	r1, [sl, #56]	; 0x38
   13334:	ldr	r3, [pc, #-1964]	; 12b90 <__assert_fail@plt+0xfec>
   13338:	ldr	r4, [pc, #-1964]	; 12b94 <__assert_fail@plt+0xff0>
   1333c:	mov	ip, #1
   13340:	ldr	r3, [r3]
   13344:	mov	r0, #4
   13348:	str	r3, [sp, #4]
   1334c:	str	r0, [sp]
   13350:	add	r3, r4, #524	; 0x20c
   13354:	add	r2, r4, #536	; 0x218
   13358:	str	ip, [sp, #8]
   1335c:	ldr	r0, [pc, #-1996]	; 12b98 <__assert_fail@plt+0xff4>
   13360:	bl	13ffc <__assert_fail@plt+0x2458>
   13364:	add	r0, r4, r0, lsl #2
   13368:	ldr	r3, [r0, #524]	; 0x20c
   1336c:	cmp	r3, #1
   13370:	beq	13400 <__assert_fail@plt+0x185c>
   13374:	bcc	13480 <__assert_fail@plt+0x18dc>
   13378:	cmp	r3, #2
   1337c:	ldreq	r3, [pc, #-2024]	; 12b9c <__assert_fail@plt+0xff8>
   13380:	streq	r3, [sl, #20]
   13384:	b	124b8 <__assert_fail@plt+0x914>
   13388:	bl	144a0 <__assert_fail@plt+0x28fc>
   1338c:	cmp	r0, #0
   13390:	str	r0, [sl, #80]	; 0x50
   13394:	beq	133fc <__assert_fail@plt+0x1858>
   13398:	mov	r0, r6
   1339c:	bl	1bd20 <__assert_fail@plt+0xa17c>
   133a0:	mov	r6, r0
   133a4:	b	133b4 <__assert_fail@plt+0x1810>
   133a8:	mov	r0, r6
   133ac:	ldr	r6, [r6, #28]
   133b0:	bl	1bce0 <__assert_fail@plt+0xa13c>
   133b4:	cmp	r6, #0
   133b8:	beq	13144 <__assert_fail@plt+0x15a0>
   133bc:	ldrb	r3, [r6, #24]
   133c0:	tst	r3, #3
   133c4:	bne	133a8 <__assert_fail@plt+0x1804>
   133c8:	add	r2, sp, #120	; 0x78
   133cc:	ldr	r1, [r6, #4]
   133d0:	mov	r0, #3
   133d4:	bl	11b38 <__xstat64@plt>
   133d8:	cmp	r0, #0
   133dc:	bne	133a8 <__assert_fail@plt+0x1804>
   133e0:	ldrd	r8, [sp, #216]	; 0xd8
   133e4:	ldrd	r2, [sp, #120]	; 0x78
   133e8:	ldr	r0, [sl, #80]	; 0x50
   133ec:	strd	r8, [sp]
   133f0:	bl	1454c <__assert_fail@plt+0x29a8>
   133f4:	cmp	r0, #0
   133f8:	bge	133a8 <__assert_fail@plt+0x1804>
   133fc:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   13400:	ldr	r3, [pc, #-2152]	; 12ba0 <__assert_fail@plt+0xffc>
   13404:	str	r3, [sl, #20]
   13408:	b	124b8 <__assert_fail@plt+0x914>
   1340c:	cmp	r6, r3
   13410:	addgt	r0, r5, r3, lsl #2
   13414:	addle	r0, sp, #112	; 0x70
   13418:	bl	140d4 <__assert_fail@plt+0x2530>
   1341c:	ldr	r2, [r4]
   13420:	ldr	r3, [sp, #32]
   13424:	add	r2, r2, #1
   13428:	sub	r3, r3, #2
   1342c:	clz	r3, r3
   13430:	lsr	r3, r3, #5
   13434:	cmp	r6, r2
   13438:	movle	r6, r3
   1343c:	orrgt	r6, r3, #1
   13440:	strb	r6, [sl, #60]	; 0x3c
   13444:	str	r0, [sp, #72]	; 0x48
   13448:	b	12518 <__assert_fail@plt+0x974>
   1344c:	mov	r2, #5
   13450:	ldr	r1, [pc, #-2228]	; 12ba4 <__assert_fail@plt+0x1000>
   13454:	mov	r0, #0
   13458:	bl	117d8 <dcgettext@plt>
   1345c:	mov	r1, #0
   13460:	mov	r2, r0
   13464:	mov	r0, r1
   13468:	bl	118bc <error@plt>
   1346c:	b	1247c <__assert_fail@plt+0x8d8>
   13470:	bl	154f0 <__assert_fail@plt+0x394c>
   13474:	cmp	r0, #0
   13478:	bne	132ac <__assert_fail@plt+0x1708>
   1347c:	b	132b8 <__assert_fail@plt+0x1714>
   13480:	ldr	r3, [pc, #-2272]	; 12ba8 <__assert_fail@plt+0x1004>
   13484:	str	r3, [sl, #20]
   13488:	b	124b8 <__assert_fail@plt+0x914>
   1348c:	ldr	r0, [pc, #-2280]	; 12bac <__assert_fail@plt+0x1008>
   13490:	bl	118ec <getenv@plt>
   13494:	cmp	r0, #0
   13498:	mov	r4, r0
   1349c:	str	r0, [sl, #56]	; 0x38
   134a0:	beq	1332c <__assert_fail@plt+0x1788>
   134a4:	ldr	r1, [pc, #-2300]	; 12bb0 <__assert_fail@plt+0x100c>
   134a8:	bl	1170c <strcmp@plt>
   134ac:	cmp	r0, #0
   134b0:	beq	1332c <__assert_fail@plt+0x1788>
   134b4:	ldrb	r3, [r4]
   134b8:	cmp	r3, #43	; 0x2b
   134bc:	movne	r7, #6
   134c0:	ldrne	r4, [pc, #-2324]	; 12bb4 <__assert_fail@plt+0x1010>
   134c4:	bne	134d4 <__assert_fail@plt+0x1930>
   134c8:	b	134f4 <__assert_fail@plt+0x1950>
   134cc:	add	r8, r8, #6
   134d0:	str	r8, [sl, #56]	; 0x38
   134d4:	ldr	r8, [sl, #56]	; 0x38
   134d8:	mov	r2, r7
   134dc:	mov	r0, r8
   134e0:	mov	r1, r4
   134e4:	bl	11b5c <strncmp@plt>
   134e8:	cmp	r0, #0
   134ec:	beq	134cc <__assert_fail@plt+0x1928>
   134f0:	b	124a0 <__assert_fail@plt+0x8fc>
   134f4:	mov	r1, #10
   134f8:	mov	r0, r4
   134fc:	bl	11994 <strchr@plt>
   13500:	cmp	r0, #0
   13504:	strbne	r7, [r0]
   13508:	bne	124a0 <__assert_fail@plt+0x8fc>
   1350c:	mov	r1, r4
   13510:	b	124b0 <__assert_fail@plt+0x90c>
   13514:	bl	119b8 <__errno_location@plt>
   13518:	mov	r2, #5
   1351c:	ldr	r1, [pc, #-2412]	; 12bb8 <__assert_fail@plt+0x1014>
   13520:	ldr	r4, [r0]
   13524:	mov	r0, r5
   13528:	bl	117d8 <dcgettext@plt>
   1352c:	ldr	r1, [sp, #64]	; 0x40
   13530:	mov	r5, r0
   13534:	mov	r0, #4
   13538:	bl	1e350 <__assert_fail@plt+0xc7ac>
   1353c:	mov	r2, r5
   13540:	mov	r1, r4
   13544:	mov	r3, r0
   13548:	mov	r0, #1
   1354c:	bl	118bc <error@plt>
   13550:	mov	r2, #5
   13554:	ldr	r1, [pc, #-2464]	; 12bbc <__assert_fail@plt+0x1018>
   13558:	mov	r0, #0
   1355c:	bl	117d8 <dcgettext@plt>
   13560:	ldr	r3, [r4]
   13564:	mov	r6, r0
   13568:	ldr	r0, [r5, r3, lsl #2]
   1356c:	bl	1e590 <__assert_fail@plt+0xc9ec>
   13570:	mov	r1, #0
   13574:	mov	r2, r6
   13578:	mov	r3, r0
   1357c:	mov	r0, r1
   13580:	bl	118bc <error@plt>
   13584:	ldr	r3, [pc, #-2508]	; 12bc0 <__assert_fail@plt+0x101c>
   13588:	mov	r2, #5
   1358c:	ldr	r1, [pc, #-2512]	; 12bc4 <__assert_fail@plt+0x1020>
   13590:	mov	r0, #0
   13594:	ldr	r4, [r3]
   13598:	bl	117d8 <dcgettext@plt>
   1359c:	ldr	r2, [pc, #-2524]	; 12bc8 <__assert_fail@plt+0x1024>
   135a0:	mov	r1, #1
   135a4:	mov	r3, r0
   135a8:	mov	r0, r4
   135ac:	bl	11a18 <__fprintf_chk@plt>
   135b0:	mov	r0, #1
   135b4:	bl	13940 <__assert_fail@plt+0x1d9c>
   135b8:	ldr	r3, [pc, #-2532]	; 12bdc <__assert_fail@plt+0x1038>
   135bc:	ldr	r2, [pc, #-2552]	; 12bcc <__assert_fail@plt+0x1028>
   135c0:	ldr	r1, [pc, #-2536]	; 12be0 <__assert_fail@plt+0x103c>
   135c4:	ldr	r0, [pc, #-2556]	; 12bd0 <__assert_fail@plt+0x102c>
   135c8:	bl	11ba4 <__assert_fail@plt>
   135cc:	ldr	r3, [pc, #-2552]	; 12bdc <__assert_fail@plt+0x1038>
   135d0:	ldr	r2, [pc, #-2564]	; 12bd4 <__assert_fail@plt+0x1030>
   135d4:	ldr	r1, [pc, #-2556]	; 12be0 <__assert_fail@plt+0x103c>
   135d8:	ldr	r0, [pc, #-2568]	; 12bd8 <__assert_fail@plt+0x1034>
   135dc:	bl	11ba4 <__assert_fail@plt>
   135e0:	mov	r2, #5
   135e4:	ldr	r1, [pc, #-2568]	; 12be4 <__assert_fail@plt+0x1040>
   135e8:	mov	r0, #0
   135ec:	bl	117d8 <dcgettext@plt>
   135f0:	ldr	r1, [sp, #64]	; 0x40
   135f4:	mov	r4, r0
   135f8:	mov	r0, #4
   135fc:	bl	1e350 <__assert_fail@plt+0xc7ac>
   13600:	mov	r2, r4
   13604:	mov	r1, #0
   13608:	mov	r3, r0
   1360c:	mov	r0, #1
   13610:	bl	118bc <error@plt>
   13614:	mov	r2, #5
   13618:	ldr	r1, [pc, #-2616]	; 12be8 <__assert_fail@plt+0x1044>
   1361c:	mov	r0, #0
   13620:	bl	117d8 <dcgettext@plt>
   13624:	mov	r1, #0
   13628:	mov	r2, r0
   1362c:	mov	r0, r1
   13630:	bl	118bc <error@plt>
   13634:	mov	r0, #1
   13638:	bl	13940 <__assert_fail@plt+0x1d9c>
   1363c:	ldr	r2, [r9]
   13640:	ldr	r3, [pc, #-2652]	; 12bec <__assert_fail@plt+0x1048>
   13644:	str	r2, [sp]
   13648:	ldr	r1, [sp, #108]	; 0x6c
   1364c:	mov	r2, #116	; 0x74
   13650:	bl	2d0f4 <__assert_fail@plt+0x1b550>
   13654:	mov	fp, #0
   13658:	mov	lr, #0
   1365c:	pop	{r1}		; (ldr r1, [sp], #4)
   13660:	mov	r2, sp
   13664:	push	{r2}		; (str r2, [sp, #-4]!)
   13668:	push	{r0}		; (str r0, [sp, #-4]!)
   1366c:	ldr	ip, [pc, #16]	; 13684 <__assert_fail@plt+0x1ae0>
   13670:	push	{ip}		; (str ip, [sp, #-4]!)
   13674:	ldr	r0, [pc, #12]	; 13688 <__assert_fail@plt+0x1ae4>
   13678:	ldr	r3, [pc, #12]	; 1368c <__assert_fail@plt+0x1ae8>
   1367c:	bl	11904 <__libc_start_main@plt>
   13680:	bl	11b68 <abort@plt>
   13684:	ldrdeq	pc, [r2], -r8
   13688:			; <UNDEFINED> instruction: 0x00011bb0
   1368c:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   13690:	ldr	r3, [pc, #20]	; 136ac <__assert_fail@plt+0x1b08>
   13694:	ldr	r2, [pc, #20]	; 136b0 <__assert_fail@plt+0x1b0c>
   13698:	add	r3, pc, r3
   1369c:	ldr	r2, [r3, r2]
   136a0:	cmp	r2, #0
   136a4:	bxeq	lr
   136a8:	b	11940 <__gmon_start__@plt>
   136ac:	andeq	lr, r2, r0, ror #18
   136b0:	andeq	r0, r0, r0, asr #3
   136b4:	ldr	r3, [pc, #28]	; 136d8 <__assert_fail@plt+0x1b34>
   136b8:	ldr	r0, [pc, #28]	; 136dc <__assert_fail@plt+0x1b38>
   136bc:	sub	r3, r3, r0
   136c0:	cmp	r3, #6
   136c4:	bxls	lr
   136c8:	ldr	r3, [pc, #16]	; 136e0 <__assert_fail@plt+0x1b3c>
   136cc:	cmp	r3, #0
   136d0:	bxeq	lr
   136d4:	bx	r3
   136d8:	andeq	r2, r4, pc, lsl r2
   136dc:	andeq	r2, r4, ip, lsl r2
   136e0:	andeq	r0, r0, r0
   136e4:	ldr	r1, [pc, #36]	; 13710 <__assert_fail@plt+0x1b6c>
   136e8:	ldr	r0, [pc, #36]	; 13714 <__assert_fail@plt+0x1b70>
   136ec:	sub	r1, r1, r0
   136f0:	asr	r1, r1, #2
   136f4:	add	r1, r1, r1, lsr #31
   136f8:	asrs	r1, r1, #1
   136fc:	bxeq	lr
   13700:	ldr	r3, [pc, #16]	; 13718 <__assert_fail@plt+0x1b74>
   13704:	cmp	r3, #0
   13708:	bxeq	lr
   1370c:	bx	r3
   13710:	andeq	r2, r4, ip, lsl r2
   13714:	andeq	r2, r4, ip, lsl r2
   13718:	andeq	r0, r0, r0
   1371c:	push	{r4, lr}
   13720:	ldr	r4, [pc, #24]	; 13740 <__assert_fail@plt+0x1b9c>
   13724:	ldrb	r3, [r4]
   13728:	cmp	r3, #0
   1372c:	popne	{r4, pc}
   13730:	bl	136b4 <__assert_fail@plt+0x1b10>
   13734:	mov	r3, #1
   13738:	strb	r3, [r4]
   1373c:	pop	{r4, pc}
   13740:	andeq	r2, r4, r4, asr #4
   13744:	ldr	r0, [pc, #40]	; 13774 <__assert_fail@plt+0x1bd0>
   13748:	ldr	r3, [r0]
   1374c:	cmp	r3, #0
   13750:	bne	13758 <__assert_fail@plt+0x1bb4>
   13754:	b	136e4 <__assert_fail@plt+0x1b40>
   13758:	ldr	r3, [pc, #24]	; 13778 <__assert_fail@plt+0x1bd4>
   1375c:	cmp	r3, #0
   13760:	beq	13754 <__assert_fail@plt+0x1bb0>
   13764:	push	{r4, lr}
   13768:	blx	r3
   1376c:	pop	{r4, lr}
   13770:	b	136e4 <__assert_fail@plt+0x1b40>
   13774:	andeq	r1, r4, r4, lsl pc
   13778:	andeq	r0, r0, r0
   1377c:	mvn	r3, #0
   13780:	mvn	r2, #0
   13784:	cmp	r1, r3
   13788:	cmpeq	r0, r2
   1378c:	push	{r4, r5, r6, r7, lr}
   13790:	sub	sp, sp, #676	; 0x2a4
   13794:	beq	137d0 <__assert_fail@plt+0x1c2c>
   13798:	ldr	r3, [pc, #68]	; 137e4 <__assert_fail@plt+0x1c40>
   1379c:	mov	r6, #1
   137a0:	mov	r7, #0
   137a4:	ldrd	r4, [r3, #8]
   137a8:	add	r2, sp, #20
   137ac:	ldr	r3, [r3]
   137b0:	strd	r6, [sp]
   137b4:	strd	r4, [sp, #8]
   137b8:	bl	1a608 <__assert_fail@plt+0x8a64>
   137bc:	ldr	r3, [pc, #36]	; 137e8 <__assert_fail@plt+0x1c44>
   137c0:	ldr	r1, [r3]
   137c4:	bl	116b8 <fputs_unlocked@plt>
   137c8:	add	sp, sp, #676	; 0x2a4
   137cc:	pop	{r4, r5, r6, r7, pc}
   137d0:	mov	r2, #5
   137d4:	ldr	r1, [pc, #16]	; 137ec <__assert_fail@plt+0x1c48>
   137d8:	mov	r0, #0
   137dc:	bl	117d8 <dcgettext@plt>
   137e0:	b	137bc <__assert_fail@plt+0x1c18>
   137e4:	andeq	r2, r4, r8, asr #4
   137e8:	andeq	r2, r4, ip, lsr r2
   137ec:	andeq	pc, r2, r0, asr #8
   137f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   137f4:	mov	r5, r0
   137f8:	ldr	r4, [pc, #304]	; 13930 <__assert_fail@plt+0x1d8c>
   137fc:	sub	sp, sp, #92	; 0x5c
   13800:	mov	r7, r1
   13804:	ldrb	r3, [r4, #16]
   13808:	cmp	r3, #0
   1380c:	beq	138c8 <__assert_fail@plt+0x1d24>
   13810:	ldrd	r0, [r0, #8]
   13814:	bl	1377c <__assert_fail@plt+0x1bd8>
   13818:	ldrb	r3, [r4, #17]
   1381c:	ldr	r6, [pc, #272]	; 13934 <__assert_fail@plt+0x1d90>
   13820:	cmp	r3, #0
   13824:	beq	13898 <__assert_fail@plt+0x1cf4>
   13828:	ldr	r0, [r6]
   1382c:	ldr	r3, [r0, #20]
   13830:	ldr	r2, [r0, #24]
   13834:	cmp	r3, r2
   13838:	addcc	r1, r3, #1
   1383c:	movcc	r2, #9
   13840:	strcc	r1, [r0, #20]
   13844:	strbcc	r2, [r3]
   13848:	bcs	13924 <__assert_fail@plt+0x1d80>
   1384c:	add	r5, r5, #16
   13850:	add	ip, sp, #12
   13854:	ldm	r5, {r0, r1}
   13858:	ldr	r5, [r4, #24]
   1385c:	add	r2, sp, #44	; 0x2c
   13860:	stm	ip, {r0, r1}
   13864:	mov	r1, ip
   13868:	mov	r0, r5
   1386c:	ldr	r8, [r4, #20]
   13870:	bl	2bdf4 <__assert_fail@plt+0x1a250>
   13874:	subs	r9, r0, #0
   13878:	beq	138d0 <__assert_fail@plt+0x1d2c>
   1387c:	ldr	ip, [sp, #16]
   13880:	ldr	r0, [r6]
   13884:	mov	r3, r5
   13888:	add	r2, sp, #44	; 0x2c
   1388c:	mov	r1, r8
   13890:	str	ip, [sp]
   13894:	bl	17234 <__assert_fail@plt+0x5690>
   13898:	ldrb	r3, [r4, #28]
   1389c:	mov	r2, r7
   138a0:	ldr	r1, [pc, #144]	; 13938 <__assert_fail@plt+0x1d94>
   138a4:	cmp	r3, #0
   138a8:	moveq	r3, #10
   138ac:	movne	r3, #0
   138b0:	mov	r0, #1
   138b4:	bl	11a00 <__printf_chk@plt>
   138b8:	ldr	r0, [r6]
   138bc:	bl	1182c <fflush_unlocked@plt>
   138c0:	add	sp, sp, #92	; 0x5c
   138c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   138c8:	ldrd	r0, [r0]
   138cc:	b	13814 <__assert_fail@plt+0x1c70>
   138d0:	ldr	r0, [sp, #12]
   138d4:	add	r2, sp, #20
   138d8:	asr	r1, r0, #31
   138dc:	bl	1b444 <__assert_fail@plt+0x98a0>
   138e0:	mov	r2, #5
   138e4:	ldr	r1, [pc, #80]	; 1393c <__assert_fail@plt+0x1d98>
   138e8:	mov	r5, r0
   138ec:	mov	r0, r9
   138f0:	bl	117d8 <dcgettext@plt>
   138f4:	mov	r8, r0
   138f8:	mov	r0, r5
   138fc:	bl	1e590 <__assert_fail@plt+0xc9ec>
   13900:	mov	r1, r9
   13904:	mov	r2, r8
   13908:	mov	r3, r0
   1390c:	mov	r0, r9
   13910:	bl	118bc <error@plt>
   13914:	mov	r0, r5
   13918:	ldr	r1, [r6]
   1391c:	bl	116b8 <fputs_unlocked@plt>
   13920:	b	13898 <__assert_fail@plt+0x1cf4>
   13924:	mov	r1, #9
   13928:	bl	11a60 <__overflow@plt>
   1392c:	b	1384c <__assert_fail@plt+0x1ca8>
   13930:	andeq	r2, r4, r8, asr #4
   13934:	andeq	r2, r4, ip, lsr r2
   13938:	andeq	pc, r2, r4, ror #8
   1393c:	andeq	pc, r2, ip, asr #8
   13940:	subs	r5, r0, #0
   13944:	push	{r7, lr}
   13948:	sub	sp, sp, #56	; 0x38
   1394c:	beq	13988 <__assert_fail@plt+0x1de4>
   13950:	ldr	r3, [pc, #864]	; 13cb8 <__assert_fail@plt+0x2114>
   13954:	mov	r2, #5
   13958:	ldr	r1, [pc, #860]	; 13cbc <__assert_fail@plt+0x2118>
   1395c:	mov	r0, #0
   13960:	ldr	r4, [r3]
   13964:	bl	117d8 <dcgettext@plt>
   13968:	ldr	r3, [pc, #848]	; 13cc0 <__assert_fail@plt+0x211c>
   1396c:	mov	r1, #1
   13970:	ldr	r3, [r3]
   13974:	mov	r2, r0
   13978:	mov	r0, r4
   1397c:	bl	11a18 <__fprintf_chk@plt>
   13980:	mov	r0, r5
   13984:	bl	11970 <exit@plt>
   13988:	mov	r2, #5
   1398c:	ldr	r1, [pc, #816]	; 13cc4 <__assert_fail@plt+0x2120>
   13990:	bl	117d8 <dcgettext@plt>
   13994:	ldr	r3, [pc, #804]	; 13cc0 <__assert_fail@plt+0x211c>
   13998:	ldr	r6, [pc, #808]	; 13cc8 <__assert_fail@plt+0x2124>
   1399c:	ldr	r4, [pc, #808]	; 13ccc <__assert_fail@plt+0x2128>
   139a0:	ldr	r3, [r3]
   139a4:	mov	r2, r3
   139a8:	mov	r1, r0
   139ac:	mov	r0, #1
   139b0:	bl	11a00 <__printf_chk@plt>
   139b4:	mov	r2, #5
   139b8:	ldr	r1, [pc, #784]	; 13cd0 <__assert_fail@plt+0x212c>
   139bc:	mov	r0, r5
   139c0:	bl	117d8 <dcgettext@plt>
   139c4:	ldr	r1, [r6]
   139c8:	bl	116b8 <fputs_unlocked@plt>
   139cc:	mov	r2, #5
   139d0:	ldr	r1, [pc, #764]	; 13cd4 <__assert_fail@plt+0x2130>
   139d4:	mov	r0, r5
   139d8:	bl	117d8 <dcgettext@plt>
   139dc:	ldr	r1, [r6]
   139e0:	bl	116b8 <fputs_unlocked@plt>
   139e4:	mov	r2, #5
   139e8:	ldr	r1, [pc, #744]	; 13cd8 <__assert_fail@plt+0x2134>
   139ec:	mov	r0, r5
   139f0:	bl	117d8 <dcgettext@plt>
   139f4:	ldr	r1, [r6]
   139f8:	bl	116b8 <fputs_unlocked@plt>
   139fc:	mov	r2, #5
   13a00:	ldr	r1, [pc, #724]	; 13cdc <__assert_fail@plt+0x2138>
   13a04:	mov	r0, r5
   13a08:	bl	117d8 <dcgettext@plt>
   13a0c:	ldr	r1, [r6]
   13a10:	bl	116b8 <fputs_unlocked@plt>
   13a14:	mov	r2, #5
   13a18:	ldr	r1, [pc, #704]	; 13ce0 <__assert_fail@plt+0x213c>
   13a1c:	mov	r0, r5
   13a20:	bl	117d8 <dcgettext@plt>
   13a24:	ldr	r1, [r6]
   13a28:	bl	116b8 <fputs_unlocked@plt>
   13a2c:	mov	r2, #5
   13a30:	ldr	r1, [pc, #684]	; 13ce4 <__assert_fail@plt+0x2140>
   13a34:	mov	r0, r5
   13a38:	bl	117d8 <dcgettext@plt>
   13a3c:	ldr	r1, [r6]
   13a40:	bl	116b8 <fputs_unlocked@plt>
   13a44:	mov	r2, #5
   13a48:	ldr	r1, [pc, #664]	; 13ce8 <__assert_fail@plt+0x2144>
   13a4c:	mov	r0, r5
   13a50:	bl	117d8 <dcgettext@plt>
   13a54:	ldr	r1, [r6]
   13a58:	bl	116b8 <fputs_unlocked@plt>
   13a5c:	mov	r2, #5
   13a60:	ldr	r1, [pc, #644]	; 13cec <__assert_fail@plt+0x2148>
   13a64:	mov	r0, r5
   13a68:	bl	117d8 <dcgettext@plt>
   13a6c:	ldr	r1, [r6]
   13a70:	bl	116b8 <fputs_unlocked@plt>
   13a74:	mov	r2, #5
   13a78:	ldr	r1, [pc, #624]	; 13cf0 <__assert_fail@plt+0x214c>
   13a7c:	mov	r0, r5
   13a80:	bl	117d8 <dcgettext@plt>
   13a84:	ldr	r1, [r6]
   13a88:	bl	116b8 <fputs_unlocked@plt>
   13a8c:	mov	r2, #5
   13a90:	ldr	r1, [pc, #604]	; 13cf4 <__assert_fail@plt+0x2150>
   13a94:	mov	r0, r5
   13a98:	bl	117d8 <dcgettext@plt>
   13a9c:	ldr	r1, [r6]
   13aa0:	bl	116b8 <fputs_unlocked@plt>
   13aa4:	mov	r2, #5
   13aa8:	ldr	r1, [pc, #584]	; 13cf8 <__assert_fail@plt+0x2154>
   13aac:	mov	r0, r5
   13ab0:	bl	117d8 <dcgettext@plt>
   13ab4:	ldr	r1, [r6]
   13ab8:	bl	116b8 <fputs_unlocked@plt>
   13abc:	mov	r2, #5
   13ac0:	ldr	r1, [pc, #564]	; 13cfc <__assert_fail@plt+0x2158>
   13ac4:	mov	r0, r5
   13ac8:	bl	117d8 <dcgettext@plt>
   13acc:	ldr	r2, [pc, #556]	; 13d00 <__assert_fail@plt+0x215c>
   13ad0:	mov	r1, r0
   13ad4:	mov	r0, #1
   13ad8:	bl	11a00 <__printf_chk@plt>
   13adc:	mov	r2, #5
   13ae0:	ldr	r1, [pc, #540]	; 13d04 <__assert_fail@plt+0x2160>
   13ae4:	mov	r0, r5
   13ae8:	bl	117d8 <dcgettext@plt>
   13aec:	ldr	r1, [r6]
   13af0:	bl	116b8 <fputs_unlocked@plt>
   13af4:	ldm	r4!, {r0, r1, r2, r3}
   13af8:	mov	lr, sp
   13afc:	stmia	lr!, {r0, r1, r2, r3}
   13b00:	ldm	r4!, {r0, r1, r2, r3}
   13b04:	ldr	ip, [sp]
   13b08:	stmia	lr!, {r0, r1, r2, r3}
   13b0c:	cmp	ip, #0
   13b10:	ldm	r4!, {r0, r1, r2, r3}
   13b14:	stmia	lr!, {r0, r1, r2, r3}
   13b18:	ldm	r4, {r0, r1}
   13b1c:	moveq	r4, sp
   13b20:	stm	lr, {r0, r1}
   13b24:	beq	13b54 <__assert_fail@plt+0x1fb0>
   13b28:	ldr	r7, [pc, #472]	; 13d08 <__assert_fail@plt+0x2164>
   13b2c:	mov	r4, sp
   13b30:	b	13b40 <__assert_fail@plt+0x1f9c>
   13b34:	ldr	ip, [r4, #8]!
   13b38:	cmp	ip, #0
   13b3c:	beq	13b54 <__assert_fail@plt+0x1fb0>
   13b40:	mov	r1, ip
   13b44:	mov	r0, r7
   13b48:	bl	1170c <strcmp@plt>
   13b4c:	cmp	r0, #0
   13b50:	bne	13b34 <__assert_fail@plt+0x1f90>
   13b54:	ldr	r4, [r4, #4]
   13b58:	mov	r2, #5
   13b5c:	cmp	r4, #0
   13b60:	ldr	r1, [pc, #420]	; 13d0c <__assert_fail@plt+0x2168>
   13b64:	beq	13c0c <__assert_fail@plt+0x2068>
   13b68:	mov	r0, #0
   13b6c:	bl	117d8 <dcgettext@plt>
   13b70:	ldr	r3, [pc, #408]	; 13d10 <__assert_fail@plt+0x216c>
   13b74:	ldr	r2, [pc, #408]	; 13d14 <__assert_fail@plt+0x2170>
   13b78:	mov	r1, r0
   13b7c:	mov	r0, #1
   13b80:	bl	11a00 <__printf_chk@plt>
   13b84:	mov	r1, #0
   13b88:	mov	r0, #5
   13b8c:	bl	11a6c <setlocale@plt>
   13b90:	cmp	r0, #0
   13b94:	ldreq	r7, [pc, #364]	; 13d08 <__assert_fail@plt+0x2164>
   13b98:	beq	13bb4 <__assert_fail@plt+0x2010>
   13b9c:	mov	r2, #3
   13ba0:	ldr	r1, [pc, #368]	; 13d18 <__assert_fail@plt+0x2174>
   13ba4:	bl	11b5c <strncmp@plt>
   13ba8:	ldr	r7, [pc, #344]	; 13d08 <__assert_fail@plt+0x2164>
   13bac:	cmp	r0, #0
   13bb0:	bne	13c9c <__assert_fail@plt+0x20f8>
   13bb4:	mov	r2, #5
   13bb8:	ldr	r1, [pc, #348]	; 13d1c <__assert_fail@plt+0x2178>
   13bbc:	mov	r0, #0
   13bc0:	bl	117d8 <dcgettext@plt>
   13bc4:	ldr	r3, [pc, #316]	; 13d08 <__assert_fail@plt+0x2164>
   13bc8:	ldr	r2, [pc, #320]	; 13d10 <__assert_fail@plt+0x216c>
   13bcc:	mov	r1, r0
   13bd0:	mov	r0, #1
   13bd4:	bl	11a00 <__printf_chk@plt>
   13bd8:	mov	r2, #5
   13bdc:	ldr	r1, [pc, #316]	; 13d20 <__assert_fail@plt+0x217c>
   13be0:	mov	r0, #0
   13be4:	bl	117d8 <dcgettext@plt>
   13be8:	ldr	r2, [pc, #308]	; 13d24 <__assert_fail@plt+0x2180>
   13bec:	cmp	r4, r7
   13bf0:	ldr	r3, [pc, #304]	; 13d28 <__assert_fail@plt+0x2184>
   13bf4:	movne	r3, r2
   13bf8:	mov	r1, r0
   13bfc:	mov	r2, r4
   13c00:	mov	r0, #1
   13c04:	bl	11a00 <__printf_chk@plt>
   13c08:	b	13980 <__assert_fail@plt+0x1ddc>
   13c0c:	mov	r0, r4
   13c10:	bl	117d8 <dcgettext@plt>
   13c14:	ldr	r3, [pc, #244]	; 13d10 <__assert_fail@plt+0x216c>
   13c18:	ldr	r2, [pc, #244]	; 13d14 <__assert_fail@plt+0x2170>
   13c1c:	mov	r1, r0
   13c20:	mov	r0, #1
   13c24:	bl	11a00 <__printf_chk@plt>
   13c28:	mov	r1, r4
   13c2c:	mov	r0, #5
   13c30:	bl	11a6c <setlocale@plt>
   13c34:	cmp	r0, #0
   13c38:	beq	13c50 <__assert_fail@plt+0x20ac>
   13c3c:	mov	r2, #3
   13c40:	ldr	r1, [pc, #208]	; 13d18 <__assert_fail@plt+0x2174>
   13c44:	bl	11b5c <strncmp@plt>
   13c48:	cmp	r0, #0
   13c4c:	bne	13c94 <__assert_fail@plt+0x20f0>
   13c50:	mov	r2, #5
   13c54:	ldr	r1, [pc, #192]	; 13d1c <__assert_fail@plt+0x2178>
   13c58:	mov	r0, #0
   13c5c:	bl	117d8 <dcgettext@plt>
   13c60:	ldr	r3, [pc, #160]	; 13d08 <__assert_fail@plt+0x2164>
   13c64:	ldr	r2, [pc, #164]	; 13d10 <__assert_fail@plt+0x216c>
   13c68:	mov	r4, r3
   13c6c:	mov	r1, r0
   13c70:	mov	r0, #1
   13c74:	bl	11a00 <__printf_chk@plt>
   13c78:	ldr	r1, [pc, #160]	; 13d20 <__assert_fail@plt+0x217c>
   13c7c:	mov	r2, #5
   13c80:	mov	r0, #0
   13c84:	bl	117d8 <dcgettext@plt>
   13c88:	ldr	r3, [pc, #152]	; 13d28 <__assert_fail@plt+0x2184>
   13c8c:	mov	r1, r0
   13c90:	b	13bfc <__assert_fail@plt+0x2058>
   13c94:	ldr	r7, [pc, #108]	; 13d08 <__assert_fail@plt+0x2164>
   13c98:	mov	r4, r7
   13c9c:	mov	r2, #5
   13ca0:	ldr	r1, [pc, #132]	; 13d2c <__assert_fail@plt+0x2188>
   13ca4:	mov	r0, #0
   13ca8:	bl	117d8 <dcgettext@plt>
   13cac:	ldr	r1, [r6]
   13cb0:	bl	116b8 <fputs_unlocked@plt>
   13cb4:	b	13bb4 <__assert_fail@plt+0x2010>
   13cb8:	andeq	r2, r4, r0, lsr r2
   13cbc:	andeq	pc, r2, r0, ror r4	; <UNPREDICTABLE>
   13cc0:	andeq	r2, r4, r8, asr #5
   13cc4:	muleq	r2, r8, r4
   13cc8:	andeq	r2, r4, ip, lsr r2
   13ccc:	andeq	pc, r2, r0, lsl #4
   13cd0:	andeq	pc, r2, r0, ror #9
   13cd4:	andeq	pc, r2, ip, lsr #10
   13cd8:	andeq	pc, r2, r8, ror r5	; <UNPREDICTABLE>
   13cdc:	andeq	pc, r2, r4, lsr r7	; <UNPREDICTABLE>
   13ce0:	andeq	pc, r2, r8, ror #19
   13ce4:	andeq	pc, r2, ip, lsl #23
   13ce8:	andeq	pc, r2, ip, asr ip	; <UNPREDICTABLE>
   13cec:	andeq	pc, r2, ip, ror sp	; <UNPREDICTABLE>
   13cf0:	andeq	pc, r2, r0, ror #31
   13cf4:	andeq	r0, r3, ip, lsr #1
   13cf8:	ldrdeq	r0, [r3], -ip
   13cfc:	andeq	r0, r3, r4, lsl r1
   13d00:	strdeq	r0, [r3], -r4
   13d04:	strdeq	r0, [r3], -r8
   13d08:	andeq	pc, r2, ip, ror #8
   13d0c:	andeq	r0, r3, ip, asr #5
   13d10:	andeq	r0, r3, r4, ror #5
   13d14:	andeq	r0, r3, ip, lsl #6
   13d18:	andeq	r0, r3, ip, lsl r3
   13d1c:	andeq	r0, r3, r8, ror #6
   13d20:	andeq	r0, r3, r4, lsl #7
   13d24:	andeq	r0, r3, r4, lsr #23
   13d28:	andeq	r0, r3, r8, asr #16
   13d2c:	andeq	r0, r3, r0, lsr #6
   13d30:	mov	r0, #1
   13d34:	b	13940 <__assert_fail@plt+0x1d9c>
   13d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d3c:	mov	r5, r1
   13d40:	sub	sp, sp, #12
   13d44:	mov	r4, r2
   13d48:	str	r2, [sp]
   13d4c:	mov	r7, r3
   13d50:	mov	sl, r0
   13d54:	bl	11988 <strlen@plt>
   13d58:	ldr	fp, [r5]
   13d5c:	cmp	fp, #0
   13d60:	beq	13e28 <__assert_fail@plt+0x2284>
   13d64:	mov	r3, #0
   13d68:	mov	r8, r0
   13d6c:	str	r3, [sp, #4]
   13d70:	mov	r6, r3
   13d74:	mvn	r9, #0
   13d78:	b	13da4 <__assert_fail@plt+0x2200>
   13d7c:	bl	117c0 <memcmp@plt>
   13d80:	ldr	r3, [sp, #4]
   13d84:	cmp	r0, #0
   13d88:	movne	r3, #1
   13d8c:	str	r3, [sp, #4]
   13d90:	ldr	fp, [r5, #4]!
   13d94:	add	r6, r6, #1
   13d98:	cmp	fp, #0
   13d9c:	add	r4, r4, r7
   13da0:	beq	13e00 <__assert_fail@plt+0x225c>
   13da4:	mov	r2, r8
   13da8:	mov	r1, sl
   13dac:	mov	r0, fp
   13db0:	bl	11b5c <strncmp@plt>
   13db4:	cmp	r0, #0
   13db8:	mov	r0, fp
   13dbc:	bne	13d90 <__assert_fail@plt+0x21ec>
   13dc0:	bl	11988 <strlen@plt>
   13dc4:	ldr	r3, [sp]
   13dc8:	mov	r2, r7
   13dcc:	mov	r1, r4
   13dd0:	cmp	r8, r0
   13dd4:	mla	r0, r7, r9, r3
   13dd8:	beq	13e18 <__assert_fail@plt+0x2274>
   13ddc:	cmn	r9, #1
   13de0:	moveq	r9, r6
   13de4:	beq	13d90 <__assert_fail@plt+0x21ec>
   13de8:	ldr	r3, [sp]
   13dec:	cmp	r3, #0
   13df0:	bne	13d7c <__assert_fail@plt+0x21d8>
   13df4:	mov	r3, #1
   13df8:	str	r3, [sp, #4]
   13dfc:	b	13d90 <__assert_fail@plt+0x21ec>
   13e00:	ldr	r3, [sp, #4]
   13e04:	cmp	r3, #0
   13e08:	mvnne	r9, #1
   13e0c:	mov	r0, r9
   13e10:	add	sp, sp, #12
   13e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e18:	mov	r9, r6
   13e1c:	mov	r0, r9
   13e20:	add	sp, sp, #12
   13e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	mvn	r9, #0
   13e2c:	b	13e0c <__assert_fail@plt+0x2268>
   13e30:	push	{r4, r5, r6, lr}
   13e34:	mov	r6, r0
   13e38:	ldr	r0, [r1]
   13e3c:	cmp	r0, #0
   13e40:	beq	13e78 <__assert_fail@plt+0x22d4>
   13e44:	mov	r4, r1
   13e48:	mov	r5, #0
   13e4c:	b	13e60 <__assert_fail@plt+0x22bc>
   13e50:	ldr	r0, [r4, #4]!
   13e54:	add	r5, r5, #1
   13e58:	cmp	r0, #0
   13e5c:	beq	13e78 <__assert_fail@plt+0x22d4>
   13e60:	mov	r1, r6
   13e64:	bl	1170c <strcmp@plt>
   13e68:	cmp	r0, #0
   13e6c:	bne	13e50 <__assert_fail@plt+0x22ac>
   13e70:	mov	r0, r5
   13e74:	pop	{r4, r5, r6, pc}
   13e78:	mvn	r0, #0
   13e7c:	pop	{r4, r5, r6, pc}
   13e80:	cmn	r2, #1
   13e84:	push	{r4, r5, r6, lr}
   13e88:	mov	r2, #5
   13e8c:	sub	sp, sp, #8
   13e90:	mov	r4, r1
   13e94:	mov	r5, r0
   13e98:	ldreq	r1, [pc, #76]	; 13eec <__assert_fail@plt+0x2348>
   13e9c:	ldrne	r1, [pc, #76]	; 13ef0 <__assert_fail@plt+0x234c>
   13ea0:	mov	r0, #0
   13ea4:	bl	117d8 <dcgettext@plt>
   13ea8:	mov	r2, r4
   13eac:	mov	r1, #8
   13eb0:	mov	r6, r0
   13eb4:	mov	r0, #0
   13eb8:	bl	1e2e4 <__assert_fail@plt+0xc740>
   13ebc:	mov	r1, r5
   13ec0:	mov	r4, r0
   13ec4:	mov	r0, #1
   13ec8:	bl	1e580 <__assert_fail@plt+0xc9dc>
   13ecc:	mov	r1, #0
   13ed0:	mov	r3, r4
   13ed4:	mov	r2, r6
   13ed8:	str	r0, [sp]
   13edc:	mov	r0, r1
   13ee0:	bl	118bc <error@plt>
   13ee4:	add	sp, sp, #8
   13ee8:	pop	{r4, r5, r6, pc}
   13eec:	strdeq	r0, [r3], -r8
   13ef0:	andeq	r0, r3, r4, lsl sl
   13ef4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ef8:	mov	r6, r0
   13efc:	ldr	r9, [pc, #232]	; 13fec <__assert_fail@plt+0x2448>
   13f00:	mov	r4, r1
   13f04:	mov	r7, r2
   13f08:	ldr	r1, [pc, #224]	; 13ff0 <__assert_fail@plt+0x244c>
   13f0c:	mov	r2, #5
   13f10:	mov	r0, #0
   13f14:	bl	117d8 <dcgettext@plt>
   13f18:	ldr	r1, [r9]
   13f1c:	bl	116b8 <fputs_unlocked@plt>
   13f20:	ldr	fp, [r6]
   13f24:	cmp	fp, #0
   13f28:	movne	r8, #0
   13f2c:	movne	r5, r8
   13f30:	movne	sl, #1
   13f34:	bne	13f74 <__assert_fail@plt+0x23d0>
   13f38:	b	13fb8 <__assert_fail@plt+0x2414>
   13f3c:	mov	r0, fp
   13f40:	ldr	r8, [r9]
   13f44:	bl	1e590 <__assert_fail@plt+0xc9ec>
   13f48:	ldr	r2, [pc, #164]	; 13ff4 <__assert_fail@plt+0x2450>
   13f4c:	mov	r1, sl
   13f50:	mov	r3, r0
   13f54:	mov	r0, r8
   13f58:	bl	11a18 <__fprintf_chk@plt>
   13f5c:	mov	r8, r4
   13f60:	ldr	fp, [r6, #4]!
   13f64:	add	r5, r5, #1
   13f68:	cmp	fp, #0
   13f6c:	add	r4, r4, r7
   13f70:	beq	13fb8 <__assert_fail@plt+0x2414>
   13f74:	cmp	r5, #0
   13f78:	mov	r1, r4
   13f7c:	mov	r2, r7
   13f80:	mov	r0, r8
   13f84:	beq	13f3c <__assert_fail@plt+0x2398>
   13f88:	bl	117c0 <memcmp@plt>
   13f8c:	cmp	r0, #0
   13f90:	bne	13f3c <__assert_fail@plt+0x2398>
   13f94:	mov	r0, fp
   13f98:	ldr	fp, [r9]
   13f9c:	bl	1e590 <__assert_fail@plt+0xc9ec>
   13fa0:	ldr	r2, [pc, #80]	; 13ff8 <__assert_fail@plt+0x2454>
   13fa4:	mov	r1, sl
   13fa8:	mov	r3, r0
   13fac:	mov	r0, fp
   13fb0:	bl	11a18 <__fprintf_chk@plt>
   13fb4:	b	13f60 <__assert_fail@plt+0x23bc>
   13fb8:	ldr	r0, [r9]
   13fbc:	ldr	r3, [r0, #20]
   13fc0:	ldr	r2, [r0, #24]
   13fc4:	cmp	r3, r2
   13fc8:	bcs	13fe0 <__assert_fail@plt+0x243c>
   13fcc:	add	r1, r3, #1
   13fd0:	mov	r2, #10
   13fd4:	str	r1, [r0, #20]
   13fd8:	strb	r2, [r3]
   13fdc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe0:	mov	r1, #10
   13fe4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fe8:	b	11a60 <__overflow@plt>
   13fec:	andeq	r2, r4, r0, lsr r2
   13ff0:	andeq	r0, r3, r4, lsr sl
   13ff4:	andeq	r0, r3, ip, asr #20
   13ff8:	andeq	r0, r3, r4, asr sl
   13ffc:	push	{r4, r5, r6, r7, r8, lr}
   14000:	mov	r7, r0
   14004:	ldrb	ip, [sp, #32]
   14008:	mov	r5, r1
   1400c:	mov	r4, r2
   14010:	cmp	ip, #0
   14014:	mov	r6, r3
   14018:	beq	14068 <__assert_fail@plt+0x24c4>
   1401c:	ldr	r3, [sp, #24]
   14020:	mov	r2, r6
   14024:	mov	r1, r4
   14028:	mov	r0, r5
   1402c:	bl	13d38 <__assert_fail@plt+0x2194>
   14030:	cmp	r0, #0
   14034:	popge	{r4, r5, r6, r7, r8, pc}
   14038:	mov	r2, r0
   1403c:	mov	r1, r5
   14040:	mov	r0, r7
   14044:	bl	13e80 <__assert_fail@plt+0x22dc>
   14048:	mov	r0, r4
   1404c:	ldr	r2, [sp, #24]
   14050:	mov	r1, r6
   14054:	bl	13ef4 <__assert_fail@plt+0x2350>
   14058:	ldr	r3, [sp, #28]
   1405c:	blx	r3
   14060:	mvn	r0, #0
   14064:	pop	{r4, r5, r6, r7, r8, pc}
   14068:	mov	r1, r2
   1406c:	mov	r0, r5
   14070:	bl	13e30 <__assert_fail@plt+0x228c>
   14074:	cmp	r0, #0
   14078:	popge	{r4, r5, r6, r7, r8, pc}
   1407c:	b	14038 <__assert_fail@plt+0x2494>
   14080:	push	{r4, r5, r6, r7, r8, lr}
   14084:	ldr	r7, [r1]
   14088:	cmp	r7, #0
   1408c:	beq	140cc <__assert_fail@plt+0x2528>
   14090:	mov	r6, r3
   14094:	mov	r8, r0
   14098:	mov	r4, r2
   1409c:	mov	r5, r1
   140a0:	b	140b0 <__assert_fail@plt+0x250c>
   140a4:	ldr	r7, [r5, #4]!
   140a8:	cmp	r7, #0
   140ac:	beq	140cc <__assert_fail@plt+0x2528>
   140b0:	mov	r1, r4
   140b4:	mov	r2, r6
   140b8:	mov	r0, r8
   140bc:	bl	117c0 <memcmp@plt>
   140c0:	add	r4, r4, r6
   140c4:	cmp	r0, #0
   140c8:	bne	140a4 <__assert_fail@plt+0x2500>
   140cc:	mov	r0, r7
   140d0:	pop	{r4, r5, r6, r7, r8, pc}
   140d4:	push	{r4, lr}
   140d8:	mov	r4, r0
   140dc:	mov	r0, #24
   140e0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   140e4:	cmp	r0, #0
   140e8:	movne	r3, #0
   140ec:	strne	r4, [r0, #16]
   140f0:	strne	r4, [r0, #20]
   140f4:	strne	r3, [r0]
   140f8:	pop	{r4, pc}
   140fc:	push	{r4, lr}
   14100:	mov	r4, r0
   14104:	mov	r0, #24
   14108:	bl	2d82c <__assert_fail@plt+0x1bc88>
   1410c:	cmp	r0, #0
   14110:	popeq	{r4, pc}
   14114:	mov	r3, #0
   14118:	str	r4, [r0]
   1411c:	str	r3, [r0, #8]
   14120:	str	r3, [r0, #12]
   14124:	str	r3, [r0, #4]
   14128:	str	r3, [r0, #16]
   1412c:	pop	{r4, pc}
   14130:	ldr	r3, [r0]
   14134:	cmp	r3, #0
   14138:	beq	14180 <__assert_fail@plt+0x25dc>
   1413c:	push	{r4, r5, r6, lr}
   14140:	mov	r2, #0
   14144:	mov	r5, r1
   14148:	mov	r4, r0
   1414c:	add	r1, r0, #12
   14150:	add	r0, r0, #8
   14154:	bl	11b2c <getdelim@plt>
   14158:	cmp	r0, #0
   1415c:	blt	141ac <__assert_fail@plt+0x2608>
   14160:	ldr	r3, [r4, #4]
   14164:	mov	r2, #1
   14168:	add	r3, r3, r2
   1416c:	str	r2, [r5]
   14170:	ldr	r2, [r4, #8]
   14174:	str	r3, [r4, #4]
   14178:	mov	r0, r2
   1417c:	pop	{r4, r5, r6, pc}
   14180:	ldr	r3, [r0, #20]
   14184:	ldr	r2, [r3]
   14188:	cmp	r2, #0
   1418c:	moveq	r3, #2
   14190:	addne	r3, r3, #4
   14194:	movne	ip, #1
   14198:	strne	ip, [r1]
   1419c:	streq	r3, [r1]
   141a0:	strne	r3, [r0, #20]
   141a4:	mov	r0, r2
   141a8:	bx	lr
   141ac:	ldr	r0, [r4]
   141b0:	bl	1197c <feof@plt>
   141b4:	mov	r2, #0
   141b8:	cmp	r0, r2
   141bc:	movne	r0, #2
   141c0:	moveq	r0, #4
   141c4:	str	r0, [r5]
   141c8:	b	14178 <__assert_fail@plt+0x25d4>
   141cc:	ldr	r3, [r0]
   141d0:	cmp	r3, #0
   141d4:	ldreq	r3, [r0, #20]
   141d8:	ldrne	r0, [r0, #4]
   141dc:	ldreq	r0, [r0, #16]
   141e0:	subeq	r0, r3, r0
   141e4:	asreq	r0, r0, #2
   141e8:	bx	lr
   141ec:	ldr	r3, [r0]
   141f0:	push	{r4, lr}
   141f4:	cmp	r3, #0
   141f8:	mov	r4, r0
   141fc:	beq	14208 <__assert_fail@plt+0x2664>
   14200:	ldr	r0, [r0, #8]
   14204:	bl	17274 <__assert_fail@plt+0x56d0>
   14208:	mov	r0, r4
   1420c:	pop	{r4, lr}
   14210:	b	17274 <__assert_fail@plt+0x56d0>
   14214:	ldr	r3, [pc, #4]	; 14220 <__assert_fail@plt+0x267c>
   14218:	str	r0, [r3]
   1421c:	bx	lr
   14220:	andeq	r2, r4, r0, asr #5
   14224:	ldr	r3, [pc, #4]	; 14230 <__assert_fail@plt+0x268c>
   14228:	strb	r0, [r3, #4]
   1422c:	bx	lr
   14230:	andeq	r2, r4, r0, asr #5
   14234:	ldr	r3, [pc, #192]	; 142fc <__assert_fail@plt+0x2758>
   14238:	push	{r4, r5, r6, lr}
   1423c:	sub	sp, sp, #8
   14240:	ldr	r0, [r3]
   14244:	bl	2e124 <__assert_fail@plt+0x1c580>
   14248:	cmp	r0, #0
   1424c:	beq	14270 <__assert_fail@plt+0x26cc>
   14250:	ldr	r4, [pc, #168]	; 14300 <__assert_fail@plt+0x275c>
   14254:	ldrb	r3, [r4, #4]
   14258:	cmp	r3, #0
   1425c:	beq	1428c <__assert_fail@plt+0x26e8>
   14260:	bl	119b8 <__errno_location@plt>
   14264:	ldr	r3, [r0]
   14268:	cmp	r3, #32
   1426c:	bne	1428c <__assert_fail@plt+0x26e8>
   14270:	ldr	r3, [pc, #140]	; 14304 <__assert_fail@plt+0x2760>
   14274:	ldr	r0, [r3]
   14278:	bl	2e124 <__assert_fail@plt+0x1c580>
   1427c:	cmp	r0, #0
   14280:	bne	142d4 <__assert_fail@plt+0x2730>
   14284:	add	sp, sp, #8
   14288:	pop	{r4, r5, r6, pc}
   1428c:	mov	r2, #5
   14290:	ldr	r1, [pc, #112]	; 14308 <__assert_fail@plt+0x2764>
   14294:	mov	r0, #0
   14298:	bl	117d8 <dcgettext@plt>
   1429c:	ldr	r4, [r4]
   142a0:	cmp	r4, #0
   142a4:	mov	r5, r0
   142a8:	beq	142e0 <__assert_fail@plt+0x273c>
   142ac:	bl	119b8 <__errno_location@plt>
   142b0:	ldr	r6, [r0]
   142b4:	mov	r0, r4
   142b8:	bl	1e3f8 <__assert_fail@plt+0xc854>
   142bc:	mov	r1, r6
   142c0:	str	r5, [sp]
   142c4:	ldr	r2, [pc, #64]	; 1430c <__assert_fail@plt+0x2768>
   142c8:	mov	r3, r0
   142cc:	mov	r0, #0
   142d0:	bl	118bc <error@plt>
   142d4:	ldr	r3, [pc, #52]	; 14310 <__assert_fail@plt+0x276c>
   142d8:	ldr	r0, [r3]
   142dc:	bl	11778 <_exit@plt>
   142e0:	bl	119b8 <__errno_location@plt>
   142e4:	mov	r3, r5
   142e8:	ldr	r2, [pc, #36]	; 14314 <__assert_fail@plt+0x2770>
   142ec:	ldr	r1, [r0]
   142f0:	mov	r0, r4
   142f4:	bl	118bc <error@plt>
   142f8:	b	142d4 <__assert_fail@plt+0x2730>
   142fc:	andeq	r2, r4, ip, lsr r2
   14300:	andeq	r2, r4, r0, asr #5
   14304:	andeq	r2, r4, r0, lsr r2
   14308:	andeq	r0, r3, ip, asr sl
   1430c:	andeq	r0, r3, r8, ror #20
   14310:	ldrdeq	r2, [r4], -r8
   14314:	andeq	r0, r3, ip, ror #20
   14318:	ldm	r0, {r0, r2}
   1431c:	push	{r4, lr}
   14320:	eor	r0, r0, r2
   14324:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   14328:	mov	r0, r1
   1432c:	pop	{r4, pc}
   14330:	push	{r4, r5}
   14334:	ldrd	r2, [r1]
   14338:	ldrd	r4, [r0]
   1433c:	cmp	r5, r3
   14340:	cmpeq	r4, r2
   14344:	moveq	r0, #1
   14348:	movne	r0, #0
   1434c:	pop	{r4, r5}
   14350:	bx	lr
   14354:	push	{r4, lr}
   14358:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   1435c:	mov	r0, r1
   14360:	pop	{r4, pc}
   14364:	push	{r4, lr}
   14368:	mov	r4, r0
   1436c:	ldr	r0, [r0, #8]
   14370:	bl	1a0cc <__assert_fail@plt+0x8528>
   14374:	mov	r0, r4
   14378:	pop	{r4, lr}
   1437c:	b	17274 <__assert_fail@plt+0x56d0>
   14380:	push	{r4, r5, r6, lr}
   14384:	mov	r5, r1
   14388:	ldr	r4, [r1]
   1438c:	sub	sp, sp, #16
   14390:	cmp	r4, #0
   14394:	mov	r6, r0
   14398:	beq	143e0 <__assert_fail@plt+0x283c>
   1439c:	ldrd	r0, [r4]
   143a0:	cmp	r1, r3
   143a4:	cmpeq	r0, r2
   143a8:	ldreq	r0, [r4, #8]
   143ac:	beq	143d8 <__assert_fail@plt+0x2834>
   143b0:	strd	r2, [r4]
   143b4:	ldr	r0, [r6]
   143b8:	mov	r1, r4
   143bc:	bl	1a4c4 <__assert_fail@plt+0x8920>
   143c0:	cmp	r0, #0
   143c4:	beq	14400 <__assert_fail@plt+0x285c>
   143c8:	cmp	r4, r0
   143cc:	beq	14408 <__assert_fail@plt+0x2864>
   143d0:	ldr	r0, [r0, #8]
   143d4:	str	r0, [r4, #8]
   143d8:	add	sp, sp, #16
   143dc:	pop	{r4, r5, r6, pc}
   143e0:	mov	r0, #16
   143e4:	strd	r2, [sp, #8]
   143e8:	bl	2d82c <__assert_fail@plt+0x1bc88>
   143ec:	ldrd	r2, [sp, #8]
   143f0:	cmp	r0, #0
   143f4:	mov	r4, r0
   143f8:	str	r0, [r5]
   143fc:	bne	143b0 <__assert_fail@plt+0x280c>
   14400:	mov	r0, #0
   14404:	b	143d8 <__assert_fail@plt+0x2834>
   14408:	mov	r3, #0
   1440c:	str	r3, [r5]
   14410:	mov	r1, r3
   14414:	str	r3, [sp]
   14418:	ldr	r2, [pc, #12]	; 1442c <__assert_fail@plt+0x2888>
   1441c:	ldr	r0, [pc, #12]	; 14430 <__assert_fail@plt+0x288c>
   14420:	bl	19ed0 <__assert_fail@plt+0x832c>
   14424:	str	r0, [r4, #8]
   14428:	b	143d8 <__assert_fail@plt+0x2834>
   1442c:	andeq	r4, r1, r4, asr r3
   14430:	strdeq	r0, [r0], -sp
   14434:	push	{r4, r5, r6, r7, lr}
   14438:	subs	r6, r2, #1
   1443c:	sbc	r7, r3, #0
   14440:	mov	r5, #0
   14444:	cmp	r7, r5
   14448:	mvn	r4, #-2147483646	; 0x80000002
   1444c:	cmpeq	r6, r4
   14450:	sub	sp, sp, #12
   14454:	movls	r0, r2
   14458:	bls	14498 <__assert_fail@plt+0x28f4>
   1445c:	mov	r4, r0
   14460:	ldr	r0, [r0]
   14464:	cmp	r0, #0
   14468:	beq	14478 <__assert_fail@plt+0x28d4>
   1446c:	add	sp, sp, #12
   14470:	pop	{r4, r5, r6, r7, lr}
   14474:	b	1b3a8 <__assert_fail@plt+0x9804>
   14478:	mvn	r0, #-2147483648	; 0x80000000
   1447c:	strd	r2, [sp]
   14480:	bl	1b304 <__assert_fail@plt+0x9760>
   14484:	ldrd	r2, [sp]
   14488:	cmp	r0, #0
   1448c:	str	r0, [r4]
   14490:	bne	1446c <__assert_fail@plt+0x28c8>
   14494:	mvn	r0, #0
   14498:	add	sp, sp, #12
   1449c:	pop	{r4, r5, r6, r7, pc}
   144a0:	push	{r4, r5, lr}
   144a4:	mov	r0, #12
   144a8:	sub	sp, sp, #12
   144ac:	bl	2d82c <__assert_fail@plt+0x1bc88>
   144b0:	subs	r4, r0, #0
   144b4:	beq	144f0 <__assert_fail@plt+0x294c>
   144b8:	ldr	r2, [pc, #76]	; 1450c <__assert_fail@plt+0x2968>
   144bc:	ldr	r3, [pc, #76]	; 14510 <__assert_fail@plt+0x296c>
   144c0:	str	r2, [sp]
   144c4:	mov	r1, #0
   144c8:	ldr	r2, [pc, #68]	; 14514 <__assert_fail@plt+0x2970>
   144cc:	mov	r0, #11
   144d0:	bl	19ed0 <__assert_fail@plt+0x832c>
   144d4:	cmp	r0, #0
   144d8:	movne	r3, #0
   144dc:	mov	r5, r0
   144e0:	str	r0, [r4]
   144e4:	strne	r3, [r4, #4]
   144e8:	strne	r3, [r4, #8]
   144ec:	beq	144fc <__assert_fail@plt+0x2958>
   144f0:	mov	r0, r4
   144f4:	add	sp, sp, #12
   144f8:	pop	{r4, r5, pc}
   144fc:	mov	r0, r4
   14500:	bl	17274 <__assert_fail@plt+0x56d0>
   14504:	mov	r4, r5
   14508:	b	144f0 <__assert_fail@plt+0x294c>
   1450c:	andeq	r4, r1, r4, ror #6
   14510:	andeq	r4, r1, r0, lsr r3
   14514:	andeq	r4, r1, r8, lsl r3
   14518:	push	{r4, lr}
   1451c:	mov	r4, r0
   14520:	ldr	r0, [r0]
   14524:	bl	1a0cc <__assert_fail@plt+0x8528>
   14528:	ldr	r0, [r4, #4]
   1452c:	cmp	r0, #0
   14530:	beq	14538 <__assert_fail@plt+0x2994>
   14534:	bl	1b384 <__assert_fail@plt+0x97e0>
   14538:	ldr	r0, [r4, #8]
   1453c:	bl	17274 <__assert_fail@plt+0x56d0>
   14540:	mov	r0, r4
   14544:	pop	{r4, lr}
   14548:	b	17274 <__assert_fail@plt+0x56d0>
   1454c:	push	{r4, r5, r6, r7, r8, lr}
   14550:	add	r1, r0, #8
   14554:	mov	r4, r0
   14558:	ldrd	r6, [sp, #24]
   1455c:	bl	14380 <__assert_fail@plt+0x27dc>
   14560:	subs	r5, r0, #0
   14564:	beq	14594 <__assert_fail@plt+0x29f0>
   14568:	mov	r2, r6
   1456c:	mov	r3, r7
   14570:	add	r0, r4, #4
   14574:	bl	14434 <__assert_fail@plt+0x2890>
   14578:	cmn	r0, #1
   1457c:	beq	14594 <__assert_fail@plt+0x29f0>
   14580:	mov	r1, r0
   14584:	mov	r2, #0
   14588:	mov	r0, r5
   1458c:	pop	{r4, r5, r6, r7, r8, lr}
   14590:	b	1a33c <__assert_fail@plt+0x8798>
   14594:	mvn	r0, #0
   14598:	pop	{r4, r5, r6, r7, r8, pc}
   1459c:	push	{r4, r5, r6, lr}
   145a0:	add	r1, r0, #8
   145a4:	mov	r4, r0
   145a8:	bl	14380 <__assert_fail@plt+0x27dc>
   145ac:	subs	r5, r0, #0
   145b0:	beq	145e0 <__assert_fail@plt+0x2a3c>
   145b4:	add	r0, r4, #4
   145b8:	ldrd	r2, [sp, #16]
   145bc:	bl	14434 <__assert_fail@plt+0x2890>
   145c0:	cmn	r0, #1
   145c4:	beq	145e0 <__assert_fail@plt+0x2a3c>
   145c8:	mov	r1, r0
   145cc:	mov	r0, r5
   145d0:	bl	19c30 <__assert_fail@plt+0x808c>
   145d4:	adds	r0, r0, #0
   145d8:	movne	r0, #1
   145dc:	pop	{r4, r5, r6, pc}
   145e0:	mvn	r0, #0
   145e4:	pop	{r4, r5, r6, pc}
   145e8:	ldr	r3, [r3]
   145ec:	bx	r3
   145f0:	b	17274 <__assert_fail@plt+0x56d0>
   145f4:	push	{r4, lr}
   145f8:	bl	1b608 <__assert_fail@plt+0x9a64>
   145fc:	clz	r0, r0
   14600:	lsr	r0, r0, #5
   14604:	pop	{r4, pc}
   14608:	push	{r4, lr}
   1460c:	bl	1170c <strcmp@plt>
   14610:	clz	r0, r0
   14614:	lsr	r0, r0, #5
   14618:	pop	{r4, pc}
   1461c:	b	19e64 <__assert_fail@plt+0x82c0>
   14620:	tst	r2, #8
   14624:	bne	14634 <__assert_fail@plt+0x2a90>
   14628:	tst	r2, #16
   1462c:	beq	1467c <__assert_fail@plt+0x2ad8>
   14630:	b	1b608 <__assert_fail@plt+0x9a64>
   14634:	tst	r2, #16
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1463c:	mov	r5, r0
   14640:	mov	r4, r1
   14644:	bne	14680 <__assert_fail@plt+0x2adc>
   14648:	bl	11988 <strlen@plt>
   1464c:	mov	r1, r4
   14650:	mov	r2, r0
   14654:	mov	r6, r0
   14658:	mov	r0, r5
   1465c:	bl	11b5c <strncmp@plt>
   14660:	subs	r7, r0, #0
   14664:	bne	14674 <__assert_fail@plt+0x2ad0>
   14668:	ldrb	r3, [r4, r6]
   1466c:	cmp	r3, #47	; 0x2f
   14670:	movne	r7, r3
   14674:	mov	r0, r7
   14678:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1467c:	b	1170c <strcmp@plt>
   14680:	mov	r0, r1
   14684:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   14688:	mov	r6, #47	; 0x2f
   1468c:	mov	r9, #0
   14690:	mov	r8, r0
   14694:	mov	r3, r0
   14698:	b	146b4 <__assert_fail@plt+0x2b10>
   1469c:	strb	r9, [r4]
   146a0:	bl	1b608 <__assert_fail@plt+0x9a64>
   146a4:	add	r3, r4, #1
   146a8:	subs	r7, r0, #0
   146ac:	ble	146e0 <__assert_fail@plt+0x2b3c>
   146b0:	strb	r6, [r4]
   146b4:	mov	r1, r6
   146b8:	mov	r0, r3
   146bc:	bl	11994 <strchr@plt>
   146c0:	mov	r1, r8
   146c4:	subs	r4, r0, #0
   146c8:	mov	r0, r5
   146cc:	bne	1469c <__assert_fail@plt+0x2af8>
   146d0:	mov	r0, r5
   146d4:	mov	r1, r8
   146d8:	bl	1b608 <__assert_fail@plt+0x9a64>
   146dc:	mov	r7, r0
   146e0:	mov	r0, r8
   146e4:	bl	17274 <__assert_fail@plt+0x56d0>
   146e8:	mov	r0, r7
   146ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146f4:	sub	sp, sp, #56	; 0x38
   146f8:	mov	r3, #0
   146fc:	mov	r4, r3
   14700:	mov	r9, r1
   14704:	str	r0, [sp, #16]
   14708:	strb	r3, [sp]
   1470c:	str	r3, [sp, #4]
   14710:	strb	r3, [sp, #12]
   14714:	str	r3, [sp, #8]
   14718:	mov	r7, r3
   1471c:	mov	r6, #1
   14720:	ldr	r8, [pc, #424]	; 148d0 <__assert_fail@plt+0x2d2c>
   14724:	b	14748 <__assert_fail@plt+0x2ba4>
   14728:	mov	r0, sl
   1472c:	bl	117a8 <towlower@plt>
   14730:	rsb	r4, r4, r4, lsl #5
   14734:	ldr	r3, [sp, #20]
   14738:	add	r4, r0, r4
   1473c:	add	r5, r5, r3
   14740:	strb	r7, [sp, #12]
   14744:	str	r5, [sp, #16]
   14748:	ldrb	r3, [sp]
   1474c:	ldr	r5, [sp, #16]
   14750:	cmp	r3, #0
   14754:	bne	147bc <__assert_fail@plt+0x2c18>
   14758:	ldrb	r3, [r5]
   1475c:	and	r2, r3, #31
   14760:	lsr	r3, r3, #5
   14764:	ldr	r3, [r8, r3, lsl #2]
   14768:	lsr	r3, r3, r2
   1476c:	tst	r3, #1
   14770:	beq	147a8 <__assert_fail@plt+0x2c04>
   14774:	str	r6, [sp, #20]
   14778:	ldrb	sl, [r5]
   1477c:	strb	r6, [sp, #24]
   14780:	str	sl, [sp, #28]
   14784:	cmp	sl, #0
   14788:	strb	r6, [sp, #12]
   1478c:	beq	14830 <__assert_fail@plt+0x2c8c>
   14790:	ldrb	r3, [sp, #24]
   14794:	ldr	r5, [sp, #16]
   14798:	cmp	r3, #0
   1479c:	bne	14728 <__assert_fail@plt+0x2b84>
   147a0:	ldrb	r0, [r5]
   147a4:	b	14730 <__assert_fail@plt+0x2b8c>
   147a8:	add	r0, sp, #4
   147ac:	bl	117b4 <mbsinit@plt>
   147b0:	cmp	r0, #0
   147b4:	beq	14894 <__assert_fail@plt+0x2cf0>
   147b8:	strb	r6, [sp]
   147bc:	bl	11880 <__ctype_get_mb_cur_max@plt>
   147c0:	mov	r1, r0
   147c4:	mov	r0, r5
   147c8:	bl	2baa8 <__assert_fail@plt+0x19f04>
   147cc:	add	r3, sp, #4
   147d0:	mov	r1, r5
   147d4:	mov	r2, r0
   147d8:	add	r0, sp, #28
   147dc:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   147e0:	cmn	r0, #1
   147e4:	str	r0, [sp, #20]
   147e8:	beq	14848 <__assert_fail@plt+0x2ca4>
   147ec:	cmn	r0, #2
   147f0:	beq	1487c <__assert_fail@plt+0x2cd8>
   147f4:	cmp	r0, #0
   147f8:	bne	1485c <__assert_fail@plt+0x2cb8>
   147fc:	ldr	r3, [sp, #16]
   14800:	str	r6, [sp, #20]
   14804:	ldrb	r3, [r3]
   14808:	cmp	r3, #0
   1480c:	bne	148bc <__assert_fail@plt+0x2d18>
   14810:	ldr	sl, [sp, #28]
   14814:	cmp	sl, #0
   14818:	bne	148a8 <__assert_fail@plt+0x2d04>
   1481c:	add	r0, sp, #4
   14820:	strb	r6, [sp, #24]
   14824:	bl	117b4 <mbsinit@plt>
   14828:	cmp	r0, #0
   1482c:	bne	14874 <__assert_fail@plt+0x2cd0>
   14830:	mov	r1, r9
   14834:	mov	r0, r4
   14838:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   1483c:	mov	r0, r1
   14840:	add	sp, sp, #56	; 0x38
   14844:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14848:	ldr	sl, [sp, #28]
   1484c:	str	r6, [sp, #20]
   14850:	strb	r7, [sp, #24]
   14854:	strb	r6, [sp, #12]
   14858:	b	14790 <__assert_fail@plt+0x2bec>
   1485c:	add	r0, sp, #4
   14860:	strb	r6, [sp, #24]
   14864:	bl	117b4 <mbsinit@plt>
   14868:	ldr	sl, [sp, #28]
   1486c:	cmp	r0, #0
   14870:	beq	14784 <__assert_fail@plt+0x2be0>
   14874:	strb	r7, [sp]
   14878:	b	14784 <__assert_fail@plt+0x2be0>
   1487c:	ldr	r0, [sp, #16]
   14880:	bl	11988 <strlen@plt>
   14884:	strb	r7, [sp, #24]
   14888:	ldr	sl, [sp, #28]
   1488c:	str	r0, [sp, #20]
   14890:	b	14854 <__assert_fail@plt+0x2cb0>
   14894:	ldr	r3, [pc, #56]	; 148d4 <__assert_fail@plt+0x2d30>
   14898:	mov	r2, #143	; 0x8f
   1489c:	ldr	r1, [pc, #52]	; 148d8 <__assert_fail@plt+0x2d34>
   148a0:	ldr	r0, [pc, #52]	; 148dc <__assert_fail@plt+0x2d38>
   148a4:	bl	11ba4 <__assert_fail@plt>
   148a8:	ldr	r3, [pc, #36]	; 148d4 <__assert_fail@plt+0x2d30>
   148ac:	mov	r2, #172	; 0xac
   148b0:	ldr	r1, [pc, #32]	; 148d8 <__assert_fail@plt+0x2d34>
   148b4:	ldr	r0, [pc, #36]	; 148e0 <__assert_fail@plt+0x2d3c>
   148b8:	bl	11ba4 <__assert_fail@plt>
   148bc:	ldr	r3, [pc, #16]	; 148d4 <__assert_fail@plt+0x2d30>
   148c0:	mov	r2, #171	; 0xab
   148c4:	ldr	r1, [pc, #12]	; 148d8 <__assert_fail@plt+0x2d34>
   148c8:	ldr	r0, [pc, #20]	; 148e4 <__assert_fail@plt+0x2d40>
   148cc:	bl	11ba4 <__assert_fail@plt>
   148d0:	andeq	r0, r3, ip, lsr #24
   148d4:	andeq	r0, r3, r0, ror sl
   148d8:	andeq	r0, r3, r4, lsl #21
   148dc:	muleq	r3, r4, sl
   148e0:	andeq	r0, r3, r4, asr #21
   148e4:	andeq	r0, r3, ip, lsr #21
   148e8:	push	{r4, r5, r6, lr}
   148ec:	mov	r4, r0
   148f0:	mov	r0, #8
   148f4:	mov	r5, r1
   148f8:	bl	2c4bc <__assert_fail@plt+0x1a918>
   148fc:	ldr	r3, [r4, #4]
   14900:	str	r0, [r4, #4]
   14904:	stm	r0, {r3, r5}
   14908:	pop	{r4, r5, r6, pc}
   1490c:	push	{r4, lr}
   14910:	and	ip, r1, #134217728	; 0x8000000
   14914:	ldrb	r3, [r0]
   14918:	and	lr, r1, #32
   1491c:	mov	r4, #0
   14920:	and	r1, r1, #2
   14924:	add	r2, r0, #1
   14928:	cmp	r3, #125	; 0x7d
   1492c:	ldrls	pc, [pc, r3, lsl #2]
   14930:	b	14b44 <__assert_fail@plt+0x2fa0>
   14934:	andeq	r4, r1, ip, lsr #22
   14938:	andeq	r4, r1, r4, asr #22
   1493c:	andeq	r4, r1, r4, asr #22
   14940:	andeq	r4, r1, r4, asr #22
   14944:	andeq	r4, r1, r4, asr #22
   14948:	andeq	r4, r1, r4, asr #22
   1494c:	andeq	r4, r1, r4, asr #22
   14950:	andeq	r4, r1, r4, asr #22
   14954:	andeq	r4, r1, r4, asr #22
   14958:	andeq	r4, r1, r4, asr #22
   1495c:	andeq	r4, r1, r4, asr #22
   14960:	andeq	r4, r1, r4, asr #22
   14964:	andeq	r4, r1, r4, asr #22
   14968:	andeq	r4, r1, r4, asr #22
   1496c:	andeq	r4, r1, r4, asr #22
   14970:	andeq	r4, r1, r4, asr #22
   14974:	andeq	r4, r1, r4, asr #22
   14978:	andeq	r4, r1, r4, asr #22
   1497c:	andeq	r4, r1, r4, asr #22
   14980:	andeq	r4, r1, r4, asr #22
   14984:	andeq	r4, r1, r4, asr #22
   14988:	andeq	r4, r1, r4, asr #22
   1498c:	andeq	r4, r1, r4, asr #22
   14990:	andeq	r4, r1, r4, asr #22
   14994:	andeq	r4, r1, r4, asr #22
   14998:	andeq	r4, r1, r4, asr #22
   1499c:	andeq	r4, r1, r4, asr #22
   149a0:	andeq	r4, r1, r4, asr #22
   149a4:	andeq	r4, r1, r4, asr #22
   149a8:	andeq	r4, r1, r4, asr #22
   149ac:	andeq	r4, r1, r4, asr #22
   149b0:	andeq	r4, r1, r4, asr #22
   149b4:	andeq	r4, r1, r4, asr #22
   149b8:	andeq	r4, r1, ip, ror fp
   149bc:	andeq	r4, r1, r4, asr #22
   149c0:	andeq	r4, r1, r4, asr #22
   149c4:	andeq	r4, r1, r4, asr #22
   149c8:	andeq	r4, r1, r4, asr #22
   149cc:	andeq	r4, r1, r4, asr #22
   149d0:	andeq	r4, r1, r4, asr #22
   149d4:	andeq	r4, r1, r4, lsr fp
   149d8:	andeq	r4, r1, r4, lsr fp
   149dc:	andeq	r4, r1, ip, lsr fp
   149e0:	andeq	r4, r1, ip, ror fp
   149e4:	andeq	r4, r1, r4, asr #22
   149e8:	andeq	r4, r1, r4, asr #22
   149ec:	andeq	r4, r1, r4, lsr fp
   149f0:	andeq	r4, r1, r4, asr #22
   149f4:	andeq	r4, r1, r4, asr #22
   149f8:	andeq	r4, r1, r4, asr #22
   149fc:	andeq	r4, r1, r4, asr #22
   14a00:	andeq	r4, r1, r4, asr #22
   14a04:	andeq	r4, r1, r4, asr #22
   14a08:	andeq	r4, r1, r4, asr #22
   14a0c:	andeq	r4, r1, r4, asr #22
   14a10:	andeq	r4, r1, r4, asr #22
   14a14:	andeq	r4, r1, r4, asr #22
   14a18:	andeq	r4, r1, r4, asr #22
   14a1c:	andeq	r4, r1, r4, asr #22
   14a20:	andeq	r4, r1, r4, asr #22
   14a24:	andeq	r4, r1, r4, asr #22
   14a28:	andeq	r4, r1, r4, asr #22
   14a2c:	andeq	r4, r1, r4, asr #22
   14a30:	andeq	r4, r1, ip, lsr fp
   14a34:	andeq	r4, r1, ip, ror fp
   14a38:	andeq	r4, r1, r4, asr #22
   14a3c:	andeq	r4, r1, r4, asr #22
   14a40:	andeq	r4, r1, r4, asr #22
   14a44:	andeq	r4, r1, r4, asr #22
   14a48:	andeq	r4, r1, r4, asr #22
   14a4c:	andeq	r4, r1, r4, asr #22
   14a50:	andeq	r4, r1, r4, asr #22
   14a54:	andeq	r4, r1, r4, asr #22
   14a58:	andeq	r4, r1, r4, asr #22
   14a5c:	andeq	r4, r1, r4, asr #22
   14a60:	andeq	r4, r1, r4, asr #22
   14a64:	andeq	r4, r1, r4, asr #22
   14a68:	andeq	r4, r1, r4, asr #22
   14a6c:	andeq	r4, r1, r4, asr #22
   14a70:	andeq	r4, r1, r4, asr #22
   14a74:	andeq	r4, r1, r4, asr #22
   14a78:	andeq	r4, r1, r4, asr #22
   14a7c:	andeq	r4, r1, r4, asr #22
   14a80:	andeq	r4, r1, r4, asr #22
   14a84:	andeq	r4, r1, r4, asr #22
   14a88:	andeq	r4, r1, r4, asr #22
   14a8c:	andeq	r4, r1, r4, asr #22
   14a90:	andeq	r4, r1, r4, asr #22
   14a94:	andeq	r4, r1, r4, asr #22
   14a98:	andeq	r4, r1, r4, asr #22
   14a9c:	andeq	r4, r1, r4, asr #22
   14aa0:	andeq	r4, r1, ip, lsr fp
   14aa4:	andeq	r4, r1, r0, asr fp
   14aa8:	andeq	r4, r1, r4, asr #22
   14aac:	andeq	r4, r1, r4, asr #22
   14ab0:	andeq	r4, r1, r4, asr #22
   14ab4:	andeq	r4, r1, r4, asr #22
   14ab8:	andeq	r4, r1, r4, asr #22
   14abc:	andeq	r4, r1, r4, asr #22
   14ac0:	andeq	r4, r1, r4, asr #22
   14ac4:	andeq	r4, r1, r4, asr #22
   14ac8:	andeq	r4, r1, r4, asr #22
   14acc:	andeq	r4, r1, r4, asr #22
   14ad0:	andeq	r4, r1, r4, asr #22
   14ad4:	andeq	r4, r1, r4, asr #22
   14ad8:	andeq	r4, r1, r4, asr #22
   14adc:	andeq	r4, r1, r4, asr #22
   14ae0:	andeq	r4, r1, r4, asr #22
   14ae4:	andeq	r4, r1, r4, asr #22
   14ae8:	andeq	r4, r1, r4, asr #22
   14aec:	andeq	r4, r1, r4, asr #22
   14af0:	andeq	r4, r1, r4, asr #22
   14af4:	andeq	r4, r1, r4, asr #22
   14af8:	andeq	r4, r1, r4, asr #22
   14afc:	andeq	r4, r1, r4, asr #22
   14b00:	andeq	r4, r1, r4, asr #22
   14b04:	andeq	r4, r1, r4, asr #22
   14b08:	andeq	r4, r1, r4, asr #22
   14b0c:	andeq	r4, r1, r4, asr #22
   14b10:	andeq	r4, r1, r4, asr #22
   14b14:	andeq	r4, r1, r4, asr #22
   14b18:	andeq	r4, r1, r4, asr #22
   14b1c:	andeq	r4, r1, r4, asr #22
   14b20:	andeq	r4, r1, r4, lsr fp
   14b24:	andeq	r4, r1, r4, asr #22
   14b28:	andeq	r4, r1, r4, lsr fp
   14b2c:	mov	r0, #0
   14b30:	pop	{r4, pc}
   14b34:	cmp	ip, #0
   14b38:	beq	14b44 <__assert_fail@plt+0x2fa0>
   14b3c:	mov	r0, #1
   14b40:	pop	{r4, pc}
   14b44:	ldrb	r3, [r0, #1]
   14b48:	mov	r0, r2
   14b4c:	b	14924 <__assert_fail@plt+0x2d80>
   14b50:	cmp	ip, #0
   14b54:	bne	14b44 <__assert_fail@plt+0x2fa0>
   14b58:	cmp	r1, #0
   14b5c:	movne	r3, r4
   14b60:	bne	14b70 <__assert_fail@plt+0x2fcc>
   14b64:	ldrb	r3, [r0, #1]
   14b68:	adds	r3, r3, #0
   14b6c:	movne	r3, #1
   14b70:	add	r0, r2, r3
   14b74:	ldrb	r3, [r2, r3]
   14b78:	b	14924 <__assert_fail@plt+0x2d80>
   14b7c:	cmp	lr, #0
   14b80:	beq	14b44 <__assert_fail@plt+0x2fa0>
   14b84:	ldrb	r3, [r0, #1]
   14b88:	cmp	r3, #40	; 0x28
   14b8c:	beq	14b3c <__assert_fail@plt+0x2f98>
   14b90:	mov	r0, r2
   14b94:	b	14924 <__assert_fail@plt+0x2d80>
   14b98:	mov	r0, #8
   14b9c:	b	2c8ec <__assert_fail@plt+0x1ad48>
   14ba0:	push	{r4, r5, r6, r7, r8, lr}
   14ba4:	mov	r8, r0
   14ba8:	ldr	r6, [r0]
   14bac:	cmp	r6, #0
   14bb0:	beq	14c3c <__assert_fail@plt+0x3098>
   14bb4:	ldr	r3, [r6, #4]
   14bb8:	ldr	r7, [r6]
   14bbc:	cmp	r3, #0
   14bc0:	beq	14c70 <__assert_fail@plt+0x30cc>
   14bc4:	cmp	r3, #1
   14bc8:	bne	14c2c <__assert_fail@plt+0x3088>
   14bcc:	ldr	r2, [r6, #20]
   14bd0:	cmp	r2, #0
   14bd4:	ldrle	r0, [r6, #12]
   14bd8:	ble	14c28 <__assert_fail@plt+0x3084>
   14bdc:	mov	r4, #0
   14be0:	ldr	r0, [r6, #12]
   14be4:	mov	r5, r4
   14be8:	b	14bf8 <__assert_fail@plt+0x3054>
   14bec:	cmp	r5, r2
   14bf0:	add	r4, r4, #36	; 0x24
   14bf4:	bge	14c28 <__assert_fail@plt+0x3084>
   14bf8:	ldr	r3, [r0, r4]
   14bfc:	add	r5, r5, #1
   14c00:	tst	r3, #134217728	; 0x8000000
   14c04:	add	r3, r0, r4
   14c08:	beq	14bec <__assert_fail@plt+0x3048>
   14c0c:	add	r0, r3, #4
   14c10:	bl	2b7e4 <__assert_fail@plt+0x19c40>
   14c14:	ldr	r2, [r6, #20]
   14c18:	ldr	r0, [r6, #12]
   14c1c:	cmp	r5, r2
   14c20:	add	r4, r4, #36	; 0x24
   14c24:	blt	14bf8 <__assert_fail@plt+0x3054>
   14c28:	bl	17274 <__assert_fail@plt+0x56d0>
   14c2c:	mov	r0, r6
   14c30:	bl	17274 <__assert_fail@plt+0x56d0>
   14c34:	subs	r6, r7, #0
   14c38:	bne	14bb4 <__assert_fail@plt+0x3010>
   14c3c:	ldr	r4, [r8, #4]
   14c40:	cmp	r4, #0
   14c44:	beq	14c64 <__assert_fail@plt+0x30c0>
   14c48:	ldr	r0, [r4, #4]
   14c4c:	ldr	r5, [r4]
   14c50:	bl	17274 <__assert_fail@plt+0x56d0>
   14c54:	mov	r0, r4
   14c58:	bl	17274 <__assert_fail@plt+0x56d0>
   14c5c:	subs	r4, r5, #0
   14c60:	bne	14c48 <__assert_fail@plt+0x30a4>
   14c64:	mov	r0, r8
   14c68:	pop	{r4, r5, r6, r7, r8, lr}
   14c6c:	b	17274 <__assert_fail@plt+0x56d0>
   14c70:	ldr	r0, [r6, #12]
   14c74:	bl	1a0cc <__assert_fail@plt+0x8528>
   14c78:	mov	r0, r6
   14c7c:	bl	17274 <__assert_fail@plt+0x56d0>
   14c80:	subs	r6, r7, #0
   14c84:	bne	14bb4 <__assert_fail@plt+0x3010>
   14c88:	b	14c3c <__assert_fail@plt+0x3098>
   14c8c:	ldr	r3, [pc, #160]	; 14d34 <__assert_fail@plt+0x3190>
   14c90:	tst	r2, #268435456	; 0x10000000
   14c94:	push	{r4, r5, r6, r7, r8, lr}
   14c98:	mov	r8, r2
   14c9c:	ldr	r6, [pc, #148]	; 14d38 <__assert_fail@plt+0x3194>
   14ca0:	movne	r6, r3
   14ca4:	mov	r7, r0
   14ca8:	mov	r4, r1
   14cac:	blx	r6
   14cb0:	tst	r8, #1073741824	; 0x40000000
   14cb4:	clz	r3, r0
   14cb8:	lsr	r3, r3, #5
   14cbc:	bne	14cf4 <__assert_fail@plt+0x3150>
   14cc0:	ldrb	r2, [r4]
   14cc4:	cmp	r2, #0
   14cc8:	beq	14cf4 <__assert_fail@plt+0x3150>
   14ccc:	cmp	r0, #0
   14cd0:	beq	14d2c <__assert_fail@plt+0x3188>
   14cd4:	add	r4, r4, #1
   14cd8:	cmp	r2, #47	; 0x2f
   14cdc:	sub	r5, r4, #1
   14ce0:	ldrb	r2, [r4]
   14ce4:	beq	14cfc <__assert_fail@plt+0x3158>
   14ce8:	cmp	r2, #0
   14cec:	bne	14cd4 <__assert_fail@plt+0x3130>
   14cf0:	mov	r3, r2
   14cf4:	mov	r0, r3
   14cf8:	pop	{r4, r5, r6, r7, r8, pc}
   14cfc:	cmp	r2, #47	; 0x2f
   14d00:	beq	14cd4 <__assert_fail@plt+0x3130>
   14d04:	mov	r2, r8
   14d08:	mov	r1, r4
   14d0c:	mov	r0, r7
   14d10:	blx	r6
   14d14:	ldrb	r2, [r5, #1]
   14d18:	cmp	r2, #0
   14d1c:	bne	14ccc <__assert_fail@plt+0x3128>
   14d20:	clz	r3, r0
   14d24:	lsr	r3, r3, #5
   14d28:	b	14cf4 <__assert_fail@plt+0x3150>
   14d2c:	mov	r3, #1
   14d30:	b	14cf4 <__assert_fail@plt+0x3150>
   14d34:	ldrdeq	r1, [r1], -r4
   14d38:	andeq	r4, r1, r0, lsr #12
   14d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d40:	sub	sp, sp, #20
   14d44:	ldr	fp, [r0]
   14d48:	cmp	fp, #0
   14d4c:	beq	14ecc <__assert_fail@plt+0x3328>
   14d50:	ldr	r3, [fp, #4]
   14d54:	mov	sl, r1
   14d58:	cmp	r3, #0
   14d5c:	mov	r4, #0
   14d60:	mov	r6, #47	; 0x2f
   14d64:	bne	14e0c <__assert_fail@plt+0x3268>
   14d68:	cmp	r4, #0
   14d6c:	beq	14eac <__assert_fail@plt+0x3308>
   14d70:	ldr	r3, [fp, #8]
   14d74:	ldr	r7, [fp, #12]
   14d78:	mov	r9, sl
   14d7c:	and	r8, r3, #8
   14d80:	and	r3, r3, #1073741824	; 0x40000000
   14d84:	str	r3, [sp, #12]
   14d88:	mov	r1, r9
   14d8c:	mov	r0, r4
   14d90:	bl	11898 <strcpy@plt>
   14d94:	mov	r1, r4
   14d98:	mov	r0, r7
   14d9c:	bl	19c30 <__assert_fail@plt+0x808c>
   14da0:	mov	r1, r6
   14da4:	subs	r5, r0, #0
   14da8:	mov	r0, r4
   14dac:	bne	14e84 <__assert_fail@plt+0x32e0>
   14db0:	cmp	r8, #0
   14db4:	beq	14dc8 <__assert_fail@plt+0x3224>
   14db8:	bl	11a78 <strrchr@plt>
   14dbc:	cmp	r0, #0
   14dc0:	strbne	r5, [r0]
   14dc4:	bne	14d94 <__assert_fail@plt+0x31f0>
   14dc8:	ldr	r3, [sp, #12]
   14dcc:	cmp	r3, #0
   14dd0:	bne	14df0 <__assert_fail@plt+0x324c>
   14dd4:	mov	r0, r9
   14dd8:	mov	r1, r6
   14ddc:	bl	11994 <strchr@plt>
   14de0:	cmp	r0, #0
   14de4:	beq	14df0 <__assert_fail@plt+0x324c>
   14de8:	adds	r9, r0, #1
   14dec:	bne	14d88 <__assert_fail@plt+0x31e4>
   14df0:	ldr	r3, [fp]
   14df4:	cmp	r3, #0
   14df8:	beq	14ec4 <__assert_fail@plt+0x3320>
   14dfc:	mov	fp, r3
   14e00:	ldr	r3, [fp, #4]
   14e04:	cmp	r3, #0
   14e08:	beq	14d68 <__assert_fail@plt+0x31c4>
   14e0c:	ldr	r8, [fp, #20]
   14e10:	ldr	r5, [fp, #12]
   14e14:	cmp	r8, #0
   14e18:	ble	14df0 <__assert_fail@plt+0x324c>
   14e1c:	add	r5, r5, #4
   14e20:	mov	r7, #0
   14e24:	b	14e48 <__assert_fail@plt+0x32a4>
   14e28:	ldr	r0, [r5]
   14e2c:	bl	14c8c <__assert_fail@plt+0x30e8>
   14e30:	add	r7, r7, #1
   14e34:	cmp	r0, #0
   14e38:	bne	14e84 <__assert_fail@plt+0x32e0>
   14e3c:	cmp	r8, r7
   14e40:	add	r5, r5, #36	; 0x24
   14e44:	beq	14df0 <__assert_fail@plt+0x324c>
   14e48:	ldr	r3, [r5, #-4]
   14e4c:	mov	r1, sl
   14e50:	tst	r3, #134217728	; 0x8000000
   14e54:	mov	r2, r3
   14e58:	beq	14e28 <__assert_fail@plt+0x3284>
   14e5c:	mov	r3, #0
   14e60:	mov	r2, r3
   14e64:	str	r3, [sp]
   14e68:	mov	r0, r5
   14e6c:	bl	2b864 <__assert_fail@plt+0x19cc0>
   14e70:	add	r7, r7, #1
   14e74:	clz	r0, r0
   14e78:	lsr	r0, r0, #5
   14e7c:	cmp	r0, #0
   14e80:	beq	14e3c <__assert_fail@plt+0x3298>
   14e84:	mov	r5, #0
   14e88:	mov	r0, r4
   14e8c:	bl	17274 <__assert_fail@plt+0x56d0>
   14e90:	ldr	r0, [fp, #8]
   14e94:	lsr	r0, r0, #29
   14e98:	eor	r0, r0, #1
   14e9c:	and	r0, r0, #1
   14ea0:	eor	r0, r0, r5
   14ea4:	add	sp, sp, #20
   14ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eac:	mov	r0, sl
   14eb0:	bl	11988 <strlen@plt>
   14eb4:	add	r0, r0, #1
   14eb8:	bl	2c4bc <__assert_fail@plt+0x1a918>
   14ebc:	mov	r4, r0
   14ec0:	b	14d70 <__assert_fail@plt+0x31cc>
   14ec4:	mov	r5, #1
   14ec8:	b	14e88 <__assert_fail@plt+0x32e4>
   14ecc:	mov	r0, fp
   14ed0:	add	sp, sp, #20
   14ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed8:	tst	r2, #402653184	; 0x18000000
   14edc:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ee0:	mov	r4, r2
   14ee4:	sub	sp, sp, #12
   14ee8:	mov	r6, r0
   14eec:	mov	r7, r1
   14ef0:	ldr	r5, [r0]
   14ef4:	beq	14fd8 <__assert_fail@plt+0x3434>
   14ef8:	mov	r1, r2
   14efc:	mov	r0, r7
   14f00:	bl	1490c <__assert_fail@plt+0x2d68>
   14f04:	cmp	r0, #0
   14f08:	beq	14fd8 <__assert_fail@plt+0x3434>
   14f0c:	cmp	r5, #0
   14f10:	beq	14f20 <__assert_fail@plt+0x337c>
   14f14:	ldr	r3, [r5, #4]
   14f18:	cmp	r3, #1
   14f1c:	beq	15134 <__assert_fail@plt+0x3590>
   14f20:	mov	r0, #24
   14f24:	bl	2c8ec <__assert_fail@plt+0x1ad48>
   14f28:	ldr	r3, [r6]
   14f2c:	mov	r2, #1
   14f30:	mov	r5, r0
   14f34:	stmib	r0, {r2, r4}
   14f38:	str	r3, [r0]
   14f3c:	str	r0, [r6]
   14f40:	ldr	r3, [r5, #20]
   14f44:	ldr	r2, [r5, #16]
   14f48:	cmp	r3, r2
   14f4c:	beq	151c8 <__assert_fail@plt+0x3624>
   14f50:	ldr	r8, [r5, #12]
   14f54:	add	r2, r3, r3, lsl #3
   14f58:	add	r9, r3, #1
   14f5c:	lsl	r2, r2, #2
   14f60:	tst	r4, #134217728	; 0x8000000
   14f64:	str	r9, [r5, #20]
   14f68:	str	r4, [r8, r2]
   14f6c:	add	r8, r8, r2
   14f70:	beq	15100 <__assert_fail@plt+0x355c>
   14f74:	tst	r4, #16
   14f78:	moveq	r6, #9
   14f7c:	movne	r6, #11
   14f80:	tst	r4, #8
   14f84:	beq	151b0 <__assert_fail@plt+0x360c>
   14f88:	mov	r0, r7
   14f8c:	bl	11988 <strlen@plt>
   14f90:	cmp	r0, #0
   14f94:	mov	r4, r0
   14f98:	ble	151f4 <__assert_fail@plt+0x3650>
   14f9c:	sub	r2, r0, #1
   14fa0:	add	r3, r7, r2
   14fa4:	ldrb	r2, [r7, r2]
   14fa8:	cmp	r2, #47	; 0x2f
   14fac:	beq	14fc0 <__assert_fail@plt+0x341c>
   14fb0:	b	1514c <__assert_fail@plt+0x35a8>
   14fb4:	ldrb	r2, [r3, #-1]!
   14fb8:	cmp	r2, #47	; 0x2f
   14fbc:	bne	15148 <__assert_fail@plt+0x35a4>
   14fc0:	subs	r0, r0, #1
   14fc4:	bne	14fb4 <__assert_fail@plt+0x3410>
   14fc8:	sub	r3, r9, #1
   14fcc:	str	r3, [r5, #20]
   14fd0:	add	sp, sp, #12
   14fd4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14fd8:	cmp	r5, #0
   14fdc:	beq	14fec <__assert_fail@plt+0x3448>
   14fe0:	ldr	r3, [r5, #4]
   14fe4:	cmp	r3, #0
   14fe8:	beq	1507c <__assert_fail@plt+0x34d8>
   14fec:	mov	r0, #24
   14ff0:	bl	2c8ec <__assert_fail@plt+0x1ad48>
   14ff4:	ldr	r8, [pc, #512]	; 151fc <__assert_fail@plt+0x3658>
   14ff8:	mov	r1, #0
   14ffc:	ldr	lr, [pc, #508]	; 15200 <__assert_fail@plt+0x365c>
   15000:	ldr	ip, [pc, #508]	; 15204 <__assert_fail@plt+0x3660>
   15004:	ldr	r3, [pc, #508]	; 15208 <__assert_fail@plt+0x3664>
   15008:	ldr	r2, [pc, #508]	; 1520c <__assert_fail@plt+0x3668>
   1500c:	mov	r5, r0
   15010:	and	r0, r4, #16
   15014:	cmp	r0, r1
   15018:	stmib	r5, {r1, r4}
   1501c:	movne	r3, r8
   15020:	movne	r2, lr
   15024:	mov	r0, r1
   15028:	str	ip, [sp]
   1502c:	bl	19ed0 <__assert_fail@plt+0x832c>
   15030:	ldr	r3, [r6]
   15034:	str	r5, [r6]
   15038:	str	r3, [r5]
   1503c:	str	r0, [r5, #12]
   15040:	mov	r0, r7
   15044:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   15048:	and	r4, r4, #268435458	; 0x10000002
   1504c:	cmp	r4, #268435456	; 0x10000000
   15050:	mov	r6, r0
   15054:	beq	15098 <__assert_fail@plt+0x34f4>
   15058:	ldr	r0, [r5, #12]
   1505c:	mov	r1, r6
   15060:	bl	1a4c4 <__assert_fail@plt+0x8920>
   15064:	cmp	r6, r0
   15068:	beq	14fd0 <__assert_fail@plt+0x342c>
   1506c:	mov	r0, r6
   15070:	add	sp, sp, #12
   15074:	pop	{r4, r5, r6, r7, r8, r9, lr}
   15078:	b	17274 <__assert_fail@plt+0x56d0>
   1507c:	ldr	r2, [r5, #8]
   15080:	ldr	r3, [pc, #392]	; 15210 <__assert_fail@plt+0x366c>
   15084:	eor	r2, r2, r4
   15088:	and	r3, r3, r2
   1508c:	cmp	r3, #0
   15090:	beq	15040 <__assert_fail@plt+0x349c>
   15094:	b	14fec <__assert_fail@plt+0x3448>
   15098:	mov	r2, r0
   1509c:	mov	r1, r0
   150a0:	mov	ip, #0
   150a4:	mov	r4, #1
   150a8:	ldrb	r0, [r2]
   150ac:	mov	r3, ip
   150b0:	cmp	r0, #92	; 0x5c
   150b4:	beq	150e0 <__assert_fail@plt+0x353c>
   150b8:	add	r3, r2, r3
   150bc:	add	r2, r3, #1
   150c0:	ldrb	r3, [r3]
   150c4:	cmp	r3, #0
   150c8:	strb	r3, [r1], #1
   150cc:	beq	15058 <__assert_fail@plt+0x34b4>
   150d0:	ldrb	r0, [r2]
   150d4:	mov	r3, ip
   150d8:	cmp	r0, #92	; 0x5c
   150dc:	bne	150b8 <__assert_fail@plt+0x3514>
   150e0:	ldrb	r0, [r2, #1]
   150e4:	mov	r3, r4
   150e8:	cmp	r0, #0
   150ec:	bne	150b8 <__assert_fail@plt+0x3514>
   150f0:	ldrb	r3, [r2]
   150f4:	add	r2, r2, #1
   150f8:	strb	r3, [r1], #1
   150fc:	b	150a8 <__assert_fail@plt+0x3504>
   15100:	tst	r4, #67108864	; 0x4000000
   15104:	beq	15128 <__assert_fail@plt+0x3584>
   15108:	mov	r0, r7
   1510c:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   15110:	mov	r7, r0
   15114:	mov	r0, #8
   15118:	bl	2c4bc <__assert_fail@plt+0x1a918>
   1511c:	ldr	r3, [r6, #4]
   15120:	str	r0, [r6, #4]
   15124:	stm	r0, {r3, r7}
   15128:	str	r7, [r8, #4]
   1512c:	add	sp, sp, #12
   15130:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15134:	ldr	r3, [r5, #8]
   15138:	eor	r3, r3, r4
   1513c:	tst	r3, #536870912	; 0x20000000
   15140:	beq	14f40 <__assert_fail@plt+0x339c>
   15144:	b	14f20 <__assert_fail@plt+0x337c>
   15148:	mov	r4, r0
   1514c:	add	r0, r0, #7
   15150:	bl	2c4d0 <__assert_fail@plt+0x1a92c>
   15154:	mov	r2, r4
   15158:	mov	r1, r7
   1515c:	mov	r9, r0
   15160:	bl	11784 <memcpy@plt>
   15164:	ldr	r3, [pc, #168]	; 15214 <__assert_fail@plt+0x3670>
   15168:	add	ip, r9, r4
   1516c:	mov	r2, r6
   15170:	ldr	r0, [r3]
   15174:	ldrh	lr, [r3, #4]
   15178:	ldrb	r3, [r3, #6]
   1517c:	str	r0, [r9, r4]
   15180:	mov	r1, r9
   15184:	add	r0, r8, #4
   15188:	strh	lr, [ip, #4]
   1518c:	strb	r3, [ip, #6]
   15190:	bl	2b670 <__assert_fail@plt+0x19acc>
   15194:	mov	r4, r0
   15198:	mov	r0, r9
   1519c:	bl	17274 <__assert_fail@plt+0x56d0>
   151a0:	cmp	r4, #0
   151a4:	beq	14fd0 <__assert_fail@plt+0x342c>
   151a8:	ldr	r9, [r5, #20]
   151ac:	b	14fc8 <__assert_fail@plt+0x3424>
   151b0:	mov	r2, r6
   151b4:	mov	r1, r7
   151b8:	add	r0, r8, #4
   151bc:	bl	2b670 <__assert_fail@plt+0x19acc>
   151c0:	mov	r4, r0
   151c4:	b	151a0 <__assert_fail@plt+0x35fc>
   151c8:	mov	r3, #36	; 0x24
   151cc:	ldr	r0, [r5, #12]
   151d0:	mov	r2, #1
   151d4:	str	r3, [sp]
   151d8:	add	r1, r5, #16
   151dc:	mvn	r3, #0
   151e0:	bl	2c648 <__assert_fail@plt+0x1aaa4>
   151e4:	ldr	r3, [r5, #20]
   151e8:	mov	r8, r0
   151ec:	str	r0, [r5, #12]
   151f0:	b	14f54 <__assert_fail@plt+0x33b0>
   151f4:	beq	14fc8 <__assert_fail@plt+0x3424>
   151f8:	b	1514c <__assert_fail@plt+0x35a8>
   151fc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15200:	strdeq	r4, [r1], -r0
   15204:	strdeq	r4, [r1], -r0
   15208:	andeq	r4, r1, r8, lsl #12
   1520c:	andeq	r4, r1, ip, lsl r6
   15210:	andvs	r0, r0, r8, lsl r0
   15214:	ldrdeq	r0, [r3], -r8
   15218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1521c:	sub	sp, sp, #44	; 0x2c
   15220:	add	r9, sp, #40	; 0x28
   15224:	mov	ip, #0
   15228:	mov	r4, ip
   1522c:	str	r0, [sp, #12]
   15230:	mov	sl, r1
   15234:	mov	r7, r2
   15238:	str	r3, [sp, #16]
   1523c:	str	ip, [r9, #-4]!
   15240:	mov	r6, ip
   15244:	ldrb	r8, [sp, #80]	; 0x50
   15248:	mov	fp, #1
   1524c:	b	15258 <__assert_fail@plt+0x36b4>
   15250:	strb	r5, [r6, r4]
   15254:	add	r4, r4, #1
   15258:	mov	r0, r7
   1525c:	bl	11b74 <getc@plt>
   15260:	cmn	r0, #1
   15264:	mov	r5, r0
   15268:	beq	15298 <__assert_fail@plt+0x36f4>
   1526c:	ldr	r3, [sp, #36]	; 0x24
   15270:	cmp	r4, r3
   15274:	bne	15250 <__assert_fail@plt+0x36ac>
   15278:	mov	r0, r6
   1527c:	str	fp, [sp]
   15280:	mvn	r3, #0
   15284:	mov	r2, #1
   15288:	mov	r1, r9
   1528c:	bl	2c648 <__assert_fail@plt+0x1aaa4>
   15290:	mov	r6, r0
   15294:	b	15250 <__assert_fail@plt+0x36ac>
   15298:	mov	r0, r7
   1529c:	bl	1176c <ferror@plt>
   152a0:	subs	r5, r0, #0
   152a4:	bne	153f4 <__assert_fail@plt+0x3850>
   152a8:	bl	119b8 <__errno_location@plt>
   152ac:	str	r5, [sp, #24]
   152b0:	str	r0, [sp, #20]
   152b4:	mov	r0, r6
   152b8:	add	r1, r4, #1
   152bc:	bl	2c52c <__assert_fail@plt+0x1a988>
   152c0:	cmp	r4, #0
   152c4:	mov	fp, r0
   152c8:	strb	r8, [r0, r4]
   152cc:	beq	153dc <__assert_fail@plt+0x3838>
   152d0:	add	r3, r0, r4
   152d4:	mov	r0, #8
   152d8:	ldrb	r3, [r3, #-1]
   152dc:	cmp	r3, r8
   152e0:	addne	r4, r4, #1
   152e4:	bl	2c4bc <__assert_fail@plt+0x1a918>
   152e8:	ldr	r3, [sl, #4]
   152ec:	add	r4, fp, r4
   152f0:	cmp	fp, r4
   152f4:	stm	r0, {r3, fp}
   152f8:	str	r0, [sl, #4]
   152fc:	bcs	153a0 <__assert_fail@plt+0x37fc>
   15300:	lsl	r3, r8, #1
   15304:	mov	r7, fp
   15308:	str	r5, [sp, #28]
   1530c:	mov	r9, r3
   15310:	b	15320 <__assert_fail@plt+0x377c>
   15314:	cmp	r4, r6
   15318:	mov	fp, r6
   1531c:	bls	1539c <__assert_fail@plt+0x37f8>
   15320:	ldrb	r0, [fp]
   15324:	mov	r5, fp
   15328:	add	r6, fp, #1
   1532c:	cmp	r0, r8
   15330:	bne	15314 <__assert_fail@plt+0x3770>
   15334:	bl	11964 <__ctype_b_loc@plt>
   15338:	ldr	ip, [r0]
   1533c:	ldrh	r0, [ip, r9]
   15340:	tst	r0, #8192	; 0x2000
   15344:	beq	153b4 <__assert_fail@plt+0x3810>
   15348:	cmp	r7, fp
   1534c:	beq	1538c <__assert_fail@plt+0x37e8>
   15350:	ldrb	r0, [r6, #-2]
   15354:	lsl	r0, r0, #1
   15358:	ldrh	r0, [ip, r0]
   1535c:	tst	r0, #8192	; 0x2000
   15360:	subne	r3, fp, #1
   15364:	bne	15380 <__assert_fail@plt+0x37dc>
   15368:	b	153b4 <__assert_fail@plt+0x3810>
   1536c:	ldrb	r2, [r3, #-1]!
   15370:	lsl	r2, r2, #1
   15374:	ldrh	r2, [ip, r2]
   15378:	tst	r2, #8192	; 0x2000
   1537c:	beq	153b4 <__assert_fail@plt+0x3810>
   15380:	cmp	r3, r7
   15384:	mov	r5, r3
   15388:	bne	1536c <__assert_fail@plt+0x37c8>
   1538c:	mov	r7, r6
   15390:	cmp	r4, r6
   15394:	mov	fp, r6
   15398:	bhi	15320 <__assert_fail@plt+0x377c>
   1539c:	ldr	r5, [sp, #28]
   153a0:	ldr	r3, [sp, #20]
   153a4:	ldr	r0, [sp, #24]
   153a8:	str	r5, [r3]
   153ac:	add	sp, sp, #44	; 0x2c
   153b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153b4:	mov	r3, #0
   153b8:	strb	r3, [r5]
   153bc:	mov	r1, r7
   153c0:	ldr	r3, [sp, #84]	; 0x54
   153c4:	ldr	r2, [sp, #16]
   153c8:	mov	r0, sl
   153cc:	ldr	ip, [sp, #12]
   153d0:	blx	ip
   153d4:	mov	r7, r6
   153d8:	b	15390 <__assert_fail@plt+0x37ec>
   153dc:	mov	r0, #8
   153e0:	bl	2c4bc <__assert_fail@plt+0x1a918>
   153e4:	ldr	r3, [sl, #4]
   153e8:	str	r0, [sl, #4]
   153ec:	stm	r0, {r3, fp}
   153f0:	b	153a0 <__assert_fail@plt+0x37fc>
   153f4:	bl	119b8 <__errno_location@plt>
   153f8:	ldr	r5, [r0]
   153fc:	str	r0, [sp, #20]
   15400:	adds	r3, r5, #0
   15404:	mvnne	r3, #0
   15408:	str	r3, [sp, #24]
   1540c:	b	152b4 <__assert_fail@plt+0x3710>
   15410:	push	{r4, r5, r6, r7, r8, lr}
   15414:	sub	sp, sp, #16
   15418:	mov	r5, r1
   1541c:	str	r0, [sp, #12]
   15420:	ldr	r1, [pc, #184]	; 154e0 <__assert_fail@plt+0x393c>
   15424:	mov	r0, r2
   15428:	mov	r4, r2
   1542c:	mov	r6, r3
   15430:	bl	1170c <strcmp@plt>
   15434:	ldrb	r7, [sp, #40]	; 0x28
   15438:	cmp	r0, #0
   1543c:	beq	154a4 <__assert_fail@plt+0x3900>
   15440:	mov	r0, r4
   15444:	ldr	r1, [pc, #152]	; 154e4 <__assert_fail@plt+0x3940>
   15448:	bl	11afc <fopen64@plt>
   1544c:	subs	r8, r0, #0
   15450:	beq	154d8 <__assert_fail@plt+0x3934>
   15454:	add	r2, sp, #12
   15458:	mov	r3, r6
   1545c:	mov	r1, r5
   15460:	str	r2, [sp, #4]
   15464:	str	r7, [sp]
   15468:	mov	r2, r8
   1546c:	ldr	r0, [pc, #116]	; 154e8 <__assert_fail@plt+0x3944>
   15470:	bl	15218 <__assert_fail@plt+0x3674>
   15474:	mov	r4, r0
   15478:	bl	119b8 <__errno_location@plt>
   1547c:	mov	r5, r0
   15480:	mov	r0, r8
   15484:	ldr	r6, [r5]
   15488:	bl	154f0 <__assert_fail@plt+0x394c>
   1548c:	cmp	r0, #0
   15490:	bne	154d8 <__assert_fail@plt+0x3934>
   15494:	str	r6, [r5]
   15498:	mov	r0, r4
   1549c:	add	sp, sp, #16
   154a0:	pop	{r4, r5, r6, r7, r8, pc}
   154a4:	ldr	r3, [pc, #64]	; 154ec <__assert_fail@plt+0x3948>
   154a8:	add	r0, sp, #12
   154ac:	str	r7, [sp]
   154b0:	mov	r1, r5
   154b4:	ldr	r2, [r3]
   154b8:	str	r0, [sp, #4]
   154bc:	mov	r3, r6
   154c0:	ldr	r0, [pc, #32]	; 154e8 <__assert_fail@plt+0x3944>
   154c4:	bl	15218 <__assert_fail@plt+0x3674>
   154c8:	mov	r4, r0
   154cc:	mov	r0, r4
   154d0:	add	sp, sp, #16
   154d4:	pop	{r4, r5, r6, r7, r8, pc}
   154d8:	mvn	r4, #0
   154dc:	b	15498 <__assert_fail@plt+0x38f4>
   154e0:	andeq	r0, r3, ip, lsl r6
   154e4:	strdeq	r0, [r3], -ip
   154e8:	andeq	r4, r1, r8, ror #11
   154ec:	andeq	r2, r4, r8, lsr r2
   154f0:	push	{r4, r5, lr}
   154f4:	sub	sp, sp, #12
   154f8:	mov	r4, r0
   154fc:	bl	11a0c <fileno@plt>
   15500:	cmp	r0, #0
   15504:	mov	r0, r4
   15508:	blt	15584 <__assert_fail@plt+0x39e0>
   1550c:	bl	1191c <__freading@plt>
   15510:	cmp	r0, #0
   15514:	bne	15550 <__assert_fail@plt+0x39ac>
   15518:	mov	r0, r4
   1551c:	bl	15590 <__assert_fail@plt+0x39ec>
   15520:	cmp	r0, #0
   15524:	beq	15580 <__assert_fail@plt+0x39dc>
   15528:	bl	119b8 <__errno_location@plt>
   1552c:	mov	r5, r0
   15530:	mov	r0, r4
   15534:	ldr	r4, [r5]
   15538:	bl	11a30 <fclose@plt>
   1553c:	cmp	r4, #0
   15540:	mvnne	r0, #0
   15544:	strne	r4, [r5]
   15548:	add	sp, sp, #12
   1554c:	pop	{r4, r5, pc}
   15550:	mov	r0, r4
   15554:	bl	11a0c <fileno@plt>
   15558:	mov	r3, #1
   1555c:	str	r3, [sp]
   15560:	mov	r2, #0
   15564:	mov	r3, #0
   15568:	bl	11874 <lseek64@plt>
   1556c:	mvn	r3, #0
   15570:	mvn	r2, #0
   15574:	cmp	r1, r3
   15578:	cmpeq	r0, r2
   1557c:	bne	15518 <__assert_fail@plt+0x3974>
   15580:	mov	r0, r4
   15584:	add	sp, sp, #12
   15588:	pop	{r4, r5, lr}
   1558c:	b	11a30 <fclose@plt>
   15590:	push	{r4, lr}
   15594:	subs	r4, r0, #0
   15598:	sub	sp, sp, #8
   1559c:	beq	155b8 <__assert_fail@plt+0x3a14>
   155a0:	bl	1191c <__freading@plt>
   155a4:	cmp	r0, #0
   155a8:	beq	155b8 <__assert_fail@plt+0x3a14>
   155ac:	ldr	r3, [r4]
   155b0:	tst	r3, #256	; 0x100
   155b4:	bne	155c8 <__assert_fail@plt+0x3a24>
   155b8:	mov	r0, r4
   155bc:	add	sp, sp, #8
   155c0:	pop	{r4, lr}
   155c4:	b	11730 <fflush@plt>
   155c8:	mov	r3, #1
   155cc:	str	r3, [sp]
   155d0:	mov	r2, #0
   155d4:	mov	r3, #0
   155d8:	mov	r0, r4
   155dc:	bl	17490 <__assert_fail@plt+0x58ec>
   155e0:	mov	r0, r4
   155e4:	add	sp, sp, #8
   155e8:	pop	{r4, lr}
   155ec:	b	11730 <fflush@plt>
   155f0:	cmp	r2, #0
   155f4:	bxeq	lr
   155f8:	push	{r4, r5, r6, r7, r8, lr}
   155fc:	mov	r6, r0
   15600:	mov	r4, r1
   15604:	add	r5, r1, r2
   15608:	bl	11928 <__ctype_tolower_loc@plt>
   1560c:	mov	r7, r0
   15610:	ldrb	r2, [r4], #1
   15614:	ldr	r3, [r7]
   15618:	mov	r1, r6
   1561c:	ldr	r0, [r3, r2, lsl #2]
   15620:	bl	11a90 <fputc@plt>
   15624:	cmp	r4, r5
   15628:	bne	15610 <__assert_fail@plt+0x3a6c>
   1562c:	pop	{r4, r5, r6, r7, r8, pc}
   15630:	cmp	r2, #0
   15634:	bxeq	lr
   15638:	push	{r4, r5, r6, r7, r8, lr}
   1563c:	mov	r6, r0
   15640:	mov	r4, r1
   15644:	add	r5, r1, r2
   15648:	bl	11934 <__ctype_toupper_loc@plt>
   1564c:	mov	r7, r0
   15650:	ldrb	r2, [r4], #1
   15654:	ldr	r3, [r7]
   15658:	mov	r1, r6
   1565c:	ldr	r0, [r3, r2, lsl #2]
   15660:	bl	11a90 <fputc@plt>
   15664:	cmp	r4, r5
   15668:	bne	15650 <__assert_fail@plt+0x3aac>
   1566c:	pop	{r4, r5, r6, r7, r8, pc}
   15670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15674:	sub	sp, sp, #1104	; 0x450
   15678:	sub	sp, sp, #12
   1567c:	mov	r4, r2
   15680:	str	r2, [sp, #32]
   15684:	mov	r9, r1
   15688:	str	r3, [sp, #52]	; 0x34
   1568c:	mov	sl, r0
   15690:	bl	119b8 <__errno_location@plt>
   15694:	ldr	r3, [r4, #40]	; 0x28
   15698:	ldr	r2, [r4, #8]
   1569c:	mov	r1, r3
   156a0:	ldr	r3, [pc, #4024]	; 16660 <__assert_fail@plt+0x4abc>
   156a4:	mov	ip, r2
   156a8:	str	r2, [sp, #48]	; 0x30
   156ac:	subs	r2, r1, #0
   156b0:	moveq	r2, r3
   156b4:	cmp	ip, #12
   156b8:	str	r2, [sp, #56]	; 0x38
   156bc:	ldr	r7, [sp, #1156]	; 0x484
   156c0:	ldr	r3, [r0]
   156c4:	str	r0, [sp, #44]	; 0x2c
   156c8:	str	r3, [sp, #60]	; 0x3c
   156cc:	ble	15b44 <__assert_fail@plt+0x3fa0>
   156d0:	sub	r3, ip, #12
   156d4:	str	r3, [sp, #48]	; 0x30
   156d8:	ldrb	r3, [r9]
   156dc:	cmp	r3, #0
   156e0:	beq	16d2c <__assert_fail@plt+0x5188>
   156e4:	ldr	fp, [pc, #3960]	; 16664 <__assert_fail@plt+0x4ac0>
   156e8:	mov	r2, #0
   156ec:	str	r2, [sp, #28]
   156f0:	cmp	r3, #37	; 0x25
   156f4:	beq	157b0 <__assert_fail@plt+0x3c0c>
   156f8:	bic	r4, r7, r7, asr #31
   156fc:	ldr	r3, [sp, #28]
   15700:	cmp	r4, #1
   15704:	movcs	r6, r4
   15708:	movcc	r6, #1
   1570c:	mvn	r3, r3
   15710:	cmp	r6, r3
   15714:	bcs	1578c <__assert_fail@plt+0x3be8>
   15718:	cmp	sl, #0
   1571c:	beq	15758 <__assert_fail@plt+0x3bb4>
   15720:	cmp	r4, #1
   15724:	subgt	r4, r4, #1
   15728:	movgt	r7, #0
   1572c:	movgt	r5, #32
   15730:	ble	1574c <__assert_fail@plt+0x3ba8>
   15734:	add	r7, r7, #1
   15738:	mov	r1, sl
   1573c:	mov	r0, r5
   15740:	bl	11a90 <fputc@plt>
   15744:	cmp	r4, r7
   15748:	bne	15734 <__assert_fail@plt+0x3b90>
   1574c:	mov	r1, sl
   15750:	ldrb	r0, [r9]
   15754:	bl	11a90 <fputc@plt>
   15758:	ldr	r3, [sp, #28]
   1575c:	mov	r4, r9
   15760:	add	r3, r3, r6
   15764:	str	r3, [sp, #28]
   15768:	ldrb	r3, [r4, #1]
   1576c:	add	r9, r4, #1
   15770:	mvn	r7, #0
   15774:	cmp	r3, #0
   15778:	bne	156f0 <__assert_fail@plt+0x3b4c>
   1577c:	ldr	r3, [sp, #44]	; 0x2c
   15780:	ldr	r2, [sp, #60]	; 0x3c
   15784:	str	r2, [r3]
   15788:	b	157a0 <__assert_fail@plt+0x3bfc>
   1578c:	ldr	r2, [sp, #44]	; 0x2c
   15790:	mov	r3, #34	; 0x22
   15794:	str	r3, [r2]
   15798:	mov	r3, #0
   1579c:	str	r3, [sp, #28]
   157a0:	ldr	r0, [sp, #28]
   157a4:	add	sp, sp, #1104	; 0x450
   157a8:	add	sp, sp, #12
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b0:	mov	r6, #0
   157b4:	ldr	r3, [sp, #52]	; 0x34
   157b8:	mov	r5, r6
   157bc:	mov	r4, r9
   157c0:	str	r3, [sp, #40]	; 0x28
   157c4:	ldrb	r1, [r4, #1]!
   157c8:	sub	r3, r1, #35	; 0x23
   157cc:	mov	r0, r1
   157d0:	cmp	r3, #60	; 0x3c
   157d4:	ldrls	pc, [pc, r3, lsl #2]
   157d8:	b	158ec <__assert_fail@plt+0x3d48>
   157dc:	andeq	r5, r1, r4, ror #17
   157e0:	andeq	r5, r1, ip, ror #17
   157e4:	andeq	r5, r1, ip, ror #17
   157e8:	andeq	r5, r1, ip, ror #17
   157ec:	andeq	r5, r1, ip, ror #17
   157f0:	andeq	r5, r1, ip, ror #17
   157f4:	andeq	r5, r1, ip, ror #17
   157f8:	andeq	r5, r1, ip, ror #17
   157fc:	ldrdeq	r5, [r1], -ip
   15800:	andeq	r5, r1, ip, ror #17
   15804:	ldrdeq	r5, [r1], -ip
   15808:	andeq	r5, r1, ip, ror #17
   1580c:	andeq	r5, r1, ip, ror #17
   15810:	ldrdeq	r5, [r1], -ip
   15814:	andeq	r5, r1, ip, ror #17
   15818:	andeq	r5, r1, ip, ror #17
   1581c:	andeq	r5, r1, ip, ror #17
   15820:	andeq	r5, r1, ip, ror #17
   15824:	andeq	r5, r1, ip, ror #17
   15828:	andeq	r5, r1, ip, ror #17
   1582c:	andeq	r5, r1, ip, ror #17
   15830:	andeq	r5, r1, ip, ror #17
   15834:	andeq	r5, r1, ip, ror #17
   15838:	andeq	r5, r1, ip, ror #17
   1583c:	andeq	r5, r1, ip, ror #17
   15840:	andeq	r5, r1, ip, ror #17
   15844:	andeq	r5, r1, ip, ror #17
   15848:	andeq	r5, r1, ip, ror #17
   1584c:	andeq	r5, r1, ip, ror #17
   15850:	andeq	r5, r1, ip, ror #17
   15854:	andeq	r5, r1, ip, ror #17
   15858:	andeq	r5, r1, ip, ror #17
   1585c:	andeq	r5, r1, ip, ror #17
   15860:	andeq	r5, r1, ip, ror #17
   15864:	andeq	r5, r1, ip, ror #17
   15868:	andeq	r5, r1, ip, ror #17
   1586c:	andeq	r5, r1, ip, ror #17
   15870:	andeq	r5, r1, ip, ror #17
   15874:	andeq	r5, r1, ip, ror #17
   15878:	andeq	r5, r1, ip, ror #17
   1587c:	andeq	r5, r1, ip, ror #17
   15880:	andeq	r5, r1, ip, ror #17
   15884:	andeq	r5, r1, ip, ror #17
   15888:	andeq	r5, r1, ip, ror #17
   1588c:	andeq	r5, r1, ip, ror #17
   15890:	andeq	r5, r1, ip, ror #17
   15894:	andeq	r5, r1, ip, ror #17
   15898:	andeq	r5, r1, ip, ror #17
   1589c:	andeq	r5, r1, ip, ror #17
   158a0:	andeq	r5, r1, ip, ror #17
   158a4:	andeq	r5, r1, ip, ror #17
   158a8:	andeq	r5, r1, ip, ror #17
   158ac:	andeq	r5, r1, ip, ror #17
   158b0:	andeq	r5, r1, ip, ror #17
   158b4:	andeq	r5, r1, ip, ror #17
   158b8:	andeq	r5, r1, ip, ror #17
   158bc:	andeq	r5, r1, ip, ror #17
   158c0:	andeq	r5, r1, ip, ror #17
   158c4:	andeq	r5, r1, ip, ror #17
   158c8:	ldrdeq	r5, [r1], -r0
   158cc:	ldrdeq	r5, [r1], -ip
   158d0:	mov	r3, #1
   158d4:	str	r3, [sp, #40]	; 0x28
   158d8:	b	157c4 <__assert_fail@plt+0x3c20>
   158dc:	mov	r5, r1
   158e0:	b	157c4 <__assert_fail@plt+0x3c20>
   158e4:	mov	r6, #1
   158e8:	b	157c4 <__assert_fail@plt+0x3c20>
   158ec:	sub	r3, r1, #48	; 0x30
   158f0:	cmp	r3, #9
   158f4:	bhi	15938 <__assert_fail@plt+0x3d94>
   158f8:	mov	r7, #0
   158fc:	mvn	r8, #-2147483648	; 0x80000000
   15900:	cmp	r7, #0
   15904:	blt	15c34 <__assert_fail@plt+0x4090>
   15908:	ldr	r3, [pc, #3416]	; 16668 <__assert_fail@plt+0x4ac4>
   1590c:	cmp	r7, r3
   15910:	ble	15c50 <__assert_fail@plt+0x40ac>
   15914:	mov	r3, r4
   15918:	ldrb	r1, [r3, #1]
   1591c:	add	r4, r3, #1
   15920:	mov	r3, r4
   15924:	sub	r2, r1, #48	; 0x30
   15928:	cmp	r2, #9
   1592c:	bls	15918 <__assert_fail@plt+0x3d74>
   15930:	mov	r0, r1
   15934:	mvn	r7, #-2147483648	; 0x80000000
   15938:	cmp	r1, #69	; 0x45
   1593c:	beq	15b58 <__assert_fail@plt+0x3fb4>
   15940:	cmp	r1, #79	; 0x4f
   15944:	movne	r8, #0
   15948:	beq	15b58 <__assert_fail@plt+0x3fb4>
   1594c:	cmp	r1, #122	; 0x7a
   15950:	ldrls	pc, [pc, r1, lsl #2]
   15954:	b	15b70 <__assert_fail@plt+0x3fcc>
   15958:	andeq	r5, r1, ip, ror #22
   1595c:	andeq	r5, r1, r0, ror fp
   15960:	andeq	r5, r1, r0, ror fp
   15964:	andeq	r5, r1, r0, ror fp
   15968:	andeq	r5, r1, r0, ror fp
   1596c:	andeq	r5, r1, r0, ror fp
   15970:	andeq	r5, r1, r0, ror fp
   15974:	andeq	r5, r1, r0, ror fp
   15978:	andeq	r5, r1, r0, ror fp
   1597c:	andeq	r5, r1, r0, ror fp
   15980:	andeq	r5, r1, r0, ror fp
   15984:	andeq	r5, r1, r0, ror fp
   15988:	andeq	r5, r1, r0, ror fp
   1598c:	andeq	r5, r1, r0, ror fp
   15990:	andeq	r5, r1, r0, ror fp
   15994:	andeq	r5, r1, r0, ror fp
   15998:	andeq	r5, r1, r0, ror fp
   1599c:	andeq	r5, r1, r0, ror fp
   159a0:	andeq	r5, r1, r0, ror fp
   159a4:	andeq	r5, r1, r0, ror fp
   159a8:	andeq	r5, r1, r0, ror fp
   159ac:	andeq	r5, r1, r0, ror fp
   159b0:	andeq	r5, r1, r0, ror fp
   159b4:	andeq	r5, r1, r0, ror fp
   159b8:	andeq	r5, r1, r0, ror fp
   159bc:	andeq	r5, r1, r0, ror fp
   159c0:	andeq	r5, r1, r0, ror fp
   159c4:	andeq	r5, r1, r0, ror fp
   159c8:	andeq	r5, r1, r0, ror fp
   159cc:	andeq	r5, r1, r0, ror fp
   159d0:	andeq	r5, r1, r0, ror fp
   159d4:	andeq	r5, r1, r0, ror fp
   159d8:	andeq	r5, r1, r0, ror fp
   159dc:	andeq	r5, r1, r0, ror fp
   159e0:	andeq	r5, r1, r0, ror fp
   159e4:	andeq	r5, r1, r0, ror fp
   159e8:	andeq	r5, r1, r0, ror fp
   159ec:	andeq	r6, r1, ip, lsr r9
   159f0:	andeq	r5, r1, r0, ror fp
   159f4:	andeq	r5, r1, r0, ror fp
   159f8:	andeq	r5, r1, r0, ror fp
   159fc:	andeq	r5, r1, r0, ror fp
   15a00:	andeq	r5, r1, r0, ror fp
   15a04:	andeq	r5, r1, r0, ror fp
   15a08:	andeq	r5, r1, r0, ror fp
   15a0c:	andeq	r5, r1, r0, ror fp
   15a10:	andeq	r5, r1, r0, ror fp
   15a14:	andeq	r5, r1, r0, ror fp
   15a18:	andeq	r5, r1, r0, ror fp
   15a1c:	andeq	r5, r1, r0, ror fp
   15a20:	andeq	r5, r1, r0, ror fp
   15a24:	andeq	r5, r1, r0, ror fp
   15a28:	andeq	r5, r1, r0, ror fp
   15a2c:	andeq	r5, r1, r0, ror fp
   15a30:	andeq	r5, r1, r0, ror fp
   15a34:	andeq	r5, r1, r0, ror fp
   15a38:	andeq	r5, r1, r0, ror fp
   15a3c:	andeq	r5, r1, r0, ror fp
   15a40:	andeq	r6, r1, r8, asr sl
   15a44:	andeq	r5, r1, r0, ror fp
   15a48:	andeq	r5, r1, r0, ror fp
   15a4c:	andeq	r5, r1, r0, ror fp
   15a50:	andeq	r5, r1, r0, ror fp
   15a54:	andeq	r5, r1, r0, ror fp
   15a58:	andeq	r5, r1, r0, ror fp
   15a5c:			; <UNDEFINED> instruction: 0x00015eb0
   15a60:	strdeq	r5, [r1], -r8
   15a64:	andeq	r6, r1, r4, ror #22
   15a68:	ldrdeq	r6, [r1], -r4
   15a6c:	andeq	r5, r1, r0, ror fp
   15a70:	andeq	r6, r1, r8, asr #9
   15a74:	andeq	r6, r1, r8, asr r3
   15a78:	andeq	r6, r1, r0, asr #6
   15a7c:	andeq	r6, r1, ip, lsr #6
   15a80:	andeq	r5, r1, r0, ror fp
   15a84:	andeq	r5, r1, r0, ror fp
   15a88:	andeq	r5, r1, r0, ror fp
   15a8c:	andeq	r6, r1, r4, lsl r3
   15a90:	andeq	r6, r1, r0, lsl #12
   15a94:	andeq	r5, r1, r0, ror fp
   15a98:	andeq	r6, r1, ip, ror ip
   15a9c:	andeq	r5, r1, r0, ror fp
   15aa0:	ldrdeq	r6, [r1], -r0
   15aa4:			; <UNDEFINED> instruction: 0x00016ab8
   15aa8:	andeq	r6, r1, r0, lsl sl
   15aac:	ldrdeq	r6, [r1], -r8
   15ab0:	andeq	r6, r1, r8, asr r3
   15ab4:	andeq	r6, r1, ip, ror sl
   15ab8:	andeq	r5, r1, r8, ror lr
   15abc:	andeq	r6, r1, r0, lsl #22
   15ac0:	andeq	r6, r1, ip, ror #23
   15ac4:	andeq	r5, r1, r0, ror fp
   15ac8:	andeq	r5, r1, r0, ror fp
   15acc:	andeq	r5, r1, r0, ror fp
   15ad0:	andeq	r5, r1, r0, ror fp
   15ad4:	andeq	r5, r1, r0, ror fp
   15ad8:	andeq	r5, r1, r0, ror fp
   15adc:			; <UNDEFINED> instruction: 0x00015eb0
   15ae0:	andeq	r6, r1, r0, lsl #17
   15ae4:	andeq	r5, r1, r8, ror lr
   15ae8:	andeq	r6, r1, ip, lsr #15
   15aec:	andeq	r6, r1, ip, lsl #15
   15af0:	andeq	r5, r1, r0, ror fp
   15af4:	andeq	r6, r1, r8, asr r3
   15af8:	andeq	r6, r1, r0, lsl #17
   15afc:	andeq	r5, r1, r0, ror fp
   15b00:	andeq	r6, r1, ip, lsl sl
   15b04:	andeq	r6, r1, ip, ror #21
   15b08:	ldrdeq	r6, [r1], -ip
   15b0c:	ldrdeq	r6, [r1], -r8
   15b10:	ldrdeq	r6, [r1], -r0
   15b14:	andeq	r5, r1, r0, ror fp
   15b18:	andeq	r6, r1, ip, lsl r9
   15b1c:	andeq	r6, r1, r8, ror #17
   15b20:	andeq	r5, r1, ip, lsl #26
   15b24:	andeq	r5, r1, r8, ror #29
   15b28:	andeq	r6, r1, ip, asr #4
   15b2c:	andeq	r6, r1, r8, ror #2
   15b30:	andeq	r5, r1, r0, ror fp
   15b34:	andeq	r6, r1, r8, ror #11
   15b38:	andeq	r5, r1, r8, ror lr
   15b3c:	andeq	r6, r1, r4, lsr #17
   15b40:	andeq	r6, r1, r4, asr #15
   15b44:	ldr	r2, [sp, #48]	; 0x30
   15b48:	subs	r3, r2, #0
   15b4c:	moveq	r3, #12
   15b50:	str	r3, [sp, #48]	; 0x30
   15b54:	b	156d8 <__assert_fail@plt+0x3b34>
   15b58:	ldrb	r1, [r4, #1]
   15b5c:	mov	r8, r0
   15b60:	add	r4, r4, #1
   15b64:	mov	r0, r1
   15b68:	b	1594c <__assert_fail@plt+0x3da8>
   15b6c:	sub	r4, r4, #1
   15b70:	subs	r3, r5, #45	; 0x2d
   15b74:	movne	r3, #1
   15b78:	cmp	r7, #0
   15b7c:	movlt	r3, #0
   15b80:	cmp	r3, #0
   15b84:	sub	r6, r4, r9
   15b88:	add	r6, r6, #1
   15b8c:	moveq	r7, #0
   15b90:	cmp	r6, r7
   15b94:	movcs	r3, r6
   15b98:	movcc	r3, r7
   15b9c:	mov	r2, r3
   15ba0:	str	r3, [sp, #36]	; 0x24
   15ba4:	ldr	r3, [sp, #28]
   15ba8:	mvn	r3, r3
   15bac:	cmp	r2, r3
   15bb0:	bcs	1578c <__assert_fail@plt+0x3be8>
   15bb4:	cmp	sl, #0
   15bb8:	beq	15c20 <__assert_fail@plt+0x407c>
   15bbc:	cmp	r6, r7
   15bc0:	bcs	15c04 <__assert_fail@plt+0x4060>
   15bc4:	cmp	r5, #43	; 0x2b
   15bc8:	cmpne	r5, #48	; 0x30
   15bcc:	moveq	r5, #1
   15bd0:	movne	r5, #0
   15bd4:	sub	r7, r7, r6
   15bd8:	beq	15e4c <__assert_fail@plt+0x42a8>
   15bdc:	cmp	r7, #0
   15be0:	movne	r8, r5
   15be4:	movne	r5, #32
   15be8:	beq	15c04 <__assert_fail@plt+0x4060>
   15bec:	add	r8, r8, #1
   15bf0:	mov	r1, sl
   15bf4:	mov	r0, r5
   15bf8:	bl	11a90 <fputc@plt>
   15bfc:	cmp	r7, r8
   15c00:	bne	15bec <__assert_fail@plt+0x4048>
   15c04:	ldr	r3, [sp, #40]	; 0x28
   15c08:	cmp	r3, #0
   15c0c:	beq	15e34 <__assert_fail@plt+0x4290>
   15c10:	mov	r2, r6
   15c14:	mov	r1, r9
   15c18:	mov	r0, sl
   15c1c:	bl	15630 <__assert_fail@plt+0x3a8c>
   15c20:	ldr	r3, [sp, #28]
   15c24:	ldr	r2, [sp, #36]	; 0x24
   15c28:	add	r3, r3, r2
   15c2c:	str	r3, [sp, #28]
   15c30:	b	15768 <__assert_fail@plt+0x3bc4>
   15c34:	cmn	r7, #1
   15c38:	beq	15ccc <__assert_fail@plt+0x4128>
   15c3c:	mov	r1, r7
   15c40:	mov	r0, #-2147483648	; 0x80000000
   15c44:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   15c48:	cmp	r0, #9
   15c4c:	ble	15914 <__assert_fail@plt+0x3d70>
   15c50:	ldrb	r0, [r4]
   15c54:	add	r7, r7, r7, lsl #2
   15c58:	cmp	r0, #47	; 0x2f
   15c5c:	lsl	r3, r7, #1
   15c60:	mov	r1, r3
   15c64:	ble	15ce4 <__assert_fail@plt+0x4140>
   15c68:	cmp	r3, #0
   15c6c:	blt	15ca8 <__assert_fail@plt+0x4104>
   15c70:	sub	r2, r0, #48	; 0x30
   15c74:	sub	r2, r8, r2
   15c78:	cmp	r3, r2
   15c7c:	movle	r2, #0
   15c80:	movgt	r2, #1
   15c84:	cmp	r2, #0
   15c88:	beq	15ca8 <__assert_fail@plt+0x4104>
   15c8c:	ldrb	r1, [r4, #1]
   15c90:	add	r3, r4, #1
   15c94:	sub	r2, r1, #48	; 0x30
   15c98:	cmp	r2, #9
   15c9c:	bls	15918 <__assert_fail@plt+0x3d74>
   15ca0:	mov	r4, r3
   15ca4:	b	15930 <__assert_fail@plt+0x3d8c>
   15ca8:	ldrb	r1, [r4, #1]
   15cac:	add	r3, r0, r3
   15cb0:	sub	r7, r3, #48	; 0x30
   15cb4:	sub	r3, r1, #48	; 0x30
   15cb8:	cmp	r3, #9
   15cbc:	add	r4, r4, #1
   15cc0:	bls	15900 <__assert_fail@plt+0x3d5c>
   15cc4:	mov	r0, r1
   15cc8:	b	15938 <__assert_fail@plt+0x3d94>
   15ccc:	ldrb	r0, [r4]
   15cd0:	cmp	r0, #47	; 0x2f
   15cd4:	mvngt	r3, #9
   15cd8:	bgt	15ca8 <__assert_fail@plt+0x4104>
   15cdc:	mvn	r1, #9
   15ce0:	mov	r3, r1
   15ce4:	rsb	r2, r0, #-2147483600	; 0x80000030
   15ce8:	cmp	r2, r1
   15cec:	movle	r2, #0
   15cf0:	movgt	r2, #1
   15cf4:	b	15c84 <__assert_fail@plt+0x40e0>
   15cf8:	cmp	r8, #69	; 0x45
   15cfc:	beq	15b70 <__assert_fail@plt+0x3fcc>
   15d00:	cmp	r6, #0
   15d04:	beq	15d10 <__assert_fail@plt+0x416c>
   15d08:	str	r6, [sp, #40]	; 0x28
   15d0c:	mov	r6, #0
   15d10:	cmp	r8, #0
   15d14:	mov	r2, #32
   15d18:	mov	r3, #37	; 0x25
   15d1c:	strb	r2, [sp, #72]	; 0x48
   15d20:	strb	r3, [sp, #73]	; 0x49
   15d24:	addeq	r9, sp, #72	; 0x48
   15d28:	addeq	ip, sp, #74	; 0x4a
   15d2c:	bne	15e24 <__assert_fail@plt+0x4280>
   15d30:	mov	r8, #0
   15d34:	strb	r1, [ip]
   15d38:	mov	r2, r9
   15d3c:	add	r0, sp, #88	; 0x58
   15d40:	ldr	r3, [sp, #32]
   15d44:	mov	r1, #1024	; 0x400
   15d48:	strb	r8, [ip, #1]
   15d4c:	bl	11910 <strftime@plt>
   15d50:	cmp	r0, #0
   15d54:	beq	15768 <__assert_fail@plt+0x3bc4>
   15d58:	cmp	r7, r8
   15d5c:	movlt	r3, #0
   15d60:	movge	r3, #1
   15d64:	cmp	r5, #45	; 0x2d
   15d68:	moveq	r3, #0
   15d6c:	cmp	r3, r8
   15d70:	sub	r9, r0, #1
   15d74:	moveq	r7, r8
   15d78:	cmp	r9, r7
   15d7c:	movcs	r3, r9
   15d80:	movcc	r3, r7
   15d84:	mov	r2, r3
   15d88:	str	r3, [sp, #36]	; 0x24
   15d8c:	ldr	r3, [sp, #28]
   15d90:	mvn	r3, r3
   15d94:	cmp	r2, r3
   15d98:	bcs	1578c <__assert_fail@plt+0x3be8>
   15d9c:	cmp	sl, #0
   15da0:	beq	15c20 <__assert_fail@plt+0x407c>
   15da4:	cmp	r9, r7
   15da8:	bcs	15de8 <__assert_fail@plt+0x4244>
   15dac:	cmp	r5, #43	; 0x2b
   15db0:	cmpne	r5, #48	; 0x30
   15db4:	moveq	r5, #1
   15db8:	movne	r5, #0
   15dbc:	sub	r7, r7, r9
   15dc0:	bne	15e84 <__assert_fail@plt+0x42e0>
   15dc4:	cmp	r7, #0
   15dc8:	beq	15de8 <__assert_fail@plt+0x4244>
   15dcc:	mov	r5, #48	; 0x30
   15dd0:	add	r8, r8, #1
   15dd4:	mov	r1, sl
   15dd8:	mov	r0, r5
   15ddc:	bl	11a90 <fputc@plt>
   15de0:	cmp	r7, r8
   15de4:	bne	15dd0 <__assert_fail@plt+0x422c>
   15de8:	cmp	r6, #0
   15dec:	bne	16d18 <__assert_fail@plt+0x5174>
   15df0:	ldr	r3, [sp, #40]	; 0x28
   15df4:	cmp	r3, #0
   15df8:	beq	16d00 <__assert_fail@plt+0x515c>
   15dfc:	mov	r2, r9
   15e00:	add	r1, sp, #89	; 0x59
   15e04:	mov	r0, sl
   15e08:	bl	15630 <__assert_fail@plt+0x3a8c>
   15e0c:	b	15c20 <__assert_fail@plt+0x407c>
   15e10:	mov	r6, #0
   15e14:	mov	r2, #32
   15e18:	mov	r3, #37	; 0x25
   15e1c:	strb	r2, [sp, #72]	; 0x48
   15e20:	strb	r3, [sp, #73]	; 0x49
   15e24:	add	r9, sp, #72	; 0x48
   15e28:	strb	r8, [sp, #74]	; 0x4a
   15e2c:	add	ip, r9, #3
   15e30:	b	15d30 <__assert_fail@plt+0x418c>
   15e34:	mov	r1, r6
   15e38:	mov	r0, r9
   15e3c:	mov	r3, sl
   15e40:	mov	r2, #1
   15e44:	bl	11868 <fwrite@plt>
   15e48:	b	15c20 <__assert_fail@plt+0x407c>
   15e4c:	cmp	r7, #0
   15e50:	beq	15c04 <__assert_fail@plt+0x4060>
   15e54:	mov	r8, #0
   15e58:	mov	r5, #48	; 0x30
   15e5c:	add	r8, r8, #1
   15e60:	mov	r1, sl
   15e64:	mov	r0, r5
   15e68:	bl	11a90 <fputc@plt>
   15e6c:	cmp	r7, r8
   15e70:	bne	15e5c <__assert_fail@plt+0x42b8>
   15e74:	b	15c04 <__assert_fail@plt+0x4060>
   15e78:	cmp	r8, #79	; 0x4f
   15e7c:	bne	15d0c <__assert_fail@plt+0x4168>
   15e80:	b	15b70 <__assert_fail@plt+0x3fcc>
   15e84:	cmp	r7, #0
   15e88:	movne	r8, r5
   15e8c:	movne	r5, #32
   15e90:	beq	15de8 <__assert_fail@plt+0x4244>
   15e94:	add	r8, r8, #1
   15e98:	mov	r1, sl
   15e9c:	mov	r0, r5
   15ea0:	bl	11a90 <fputc@plt>
   15ea4:	cmp	r7, r8
   15ea8:	bne	15e94 <__assert_fail@plt+0x42f0>
   15eac:	b	15de8 <__assert_fail@plt+0x4244>
   15eb0:	cmp	r8, #0
   15eb4:	bne	15b70 <__assert_fail@plt+0x3fcc>
   15eb8:	ldr	r3, [sp, #40]	; 0x28
   15ebc:	cmp	r6, #0
   15ec0:	moveq	r6, r3
   15ec4:	mov	r2, #32
   15ec8:	mov	r3, #37	; 0x25
   15ecc:	add	r9, sp, #72	; 0x48
   15ed0:	str	r6, [sp, #40]	; 0x28
   15ed4:	strb	r2, [sp, #72]	; 0x48
   15ed8:	strb	r3, [sp, #73]	; 0x49
   15edc:	add	ip, r9, #2
   15ee0:	mov	r6, #0
   15ee4:	b	15d30 <__assert_fail@plt+0x418c>
   15ee8:	ldr	lr, [sp, #32]
   15eec:	add	ip, sp, #88	; 0x58
   15ef0:	mvn	r6, #0
   15ef4:	ldm	lr!, {r0, r1, r2, r3}
   15ef8:	stmia	ip!, {r0, r1, r2, r3}
   15efc:	ldm	lr!, {r0, r1, r2, r3}
   15f00:	stmia	ip!, {r0, r1, r2, r3}
   15f04:	ldm	lr, {r0, r1, r2}
   15f08:	str	r6, [sp, #116]	; 0x74
   15f0c:	stm	ip, {r0, r1, r2}
   15f10:	add	r1, sp, #88	; 0x58
   15f14:	ldr	r0, [sp, #1164]	; 0x48c
   15f18:	bl	2be78 <__assert_fail@plt+0x1a2d4>
   15f1c:	ldr	r3, [sp, #116]	; 0x74
   15f20:	cmp	r3, #0
   15f24:	blt	16f38 <__assert_fail@plt+0x5394>
   15f28:	add	r9, sp, #72	; 0x48
   15f2c:	add	lr, r9, #13
   15f30:	mov	r1, r0
   15f34:	lsr	r3, r0, #31
   15f38:	str	r3, [sp, #36]	; 0x24
   15f3c:	smull	r2, r3, fp, r1
   15f40:	asr	ip, r1, #31
   15f44:	rsb	ip, ip, r3, asr #2
   15f48:	cmp	r0, #0
   15f4c:	add	r3, ip, ip, lsl #2
   15f50:	mov	r6, lr
   15f54:	sub	r3, r1, r3, lsl #1
   15f58:	add	r2, r3, #48	; 0x30
   15f5c:	rsblt	r3, r3, #48	; 0x30
   15f60:	uxtb	r2, r2
   15f64:	uxtblt	r2, r3
   15f68:	cmp	ip, #0
   15f6c:	mov	r1, ip
   15f70:	strb	r2, [lr], #-1
   15f74:	bne	15f3c <__assert_fail@plt+0x4398>
   15f78:	mov	lr, #1
   15f7c:	cmp	r5, #0
   15f80:	moveq	r2, #1
   15f84:	moveq	r5, #48	; 0x30
   15f88:	beq	15f94 <__assert_fail@plt+0x43f0>
   15f8c:	subs	r2, r5, #45	; 0x2d
   15f90:	movne	r2, #1
   15f94:	ldr	r3, [sp, #36]	; 0x24
   15f98:	cmp	r7, #0
   15f9c:	movlt	r7, lr
   15fa0:	cmp	r3, #0
   15fa4:	bne	16c84 <__assert_fail@plt+0x50e0>
   15fa8:	cmp	ip, #0
   15fac:	beq	16ca8 <__assert_fail@plt+0x5104>
   15fb0:	mov	r3, #43	; 0x2b
   15fb4:	str	r3, [sp, #36]	; 0x24
   15fb8:	add	r9, r9, #14
   15fbc:	sub	r3, r9, r6
   15fc0:	sub	r8, r7, #1
   15fc4:	sub	r8, r8, r3
   15fc8:	str	r3, [sp, #64]	; 0x40
   15fcc:	cmp	r8, #0
   15fd0:	movle	r3, #0
   15fd4:	andgt	r3, r2, #1
   15fd8:	cmp	r3, #0
   15fdc:	moveq	r8, #0
   15fe0:	cmp	r5, #95	; 0x5f
   15fe4:	beq	16d34 <__assert_fail@plt+0x5190>
   15fe8:	ldr	r3, [sp, #28]
   15fec:	cmn	r3, #3
   15ff0:	bhi	1578c <__assert_fail@plt+0x3be8>
   15ff4:	cmp	sl, #0
   15ff8:	beq	16010 <__assert_fail@plt+0x446c>
   15ffc:	ldr	r0, [sp, #36]	; 0x24
   16000:	mov	r1, sl
   16004:	str	r2, [sp, #68]	; 0x44
   16008:	bl	11a90 <fputc@plt>
   1600c:	ldr	r2, [sp, #68]	; 0x44
   16010:	ldr	r3, [sp, #28]
   16014:	sub	r7, r7, #1
   16018:	cmp	r7, #0
   1601c:	movlt	r2, #0
   16020:	andge	r2, r2, #1
   16024:	add	r3, r3, #1
   16028:	cmp	r2, #0
   1602c:	str	r3, [sp, #28]
   16030:	ldr	r9, [sp, #64]	; 0x40
   16034:	bne	1603c <__assert_fail@plt+0x4498>
   16038:	mov	r7, r2
   1603c:	cmp	r7, r9
   16040:	movcs	r3, r7
   16044:	movcc	r3, r9
   16048:	mov	r2, r3
   1604c:	str	r3, [sp, #36]	; 0x24
   16050:	ldr	r3, [sp, #28]
   16054:	mvn	r3, r3
   16058:	cmp	r2, r3
   1605c:	bcs	1578c <__assert_fail@plt+0x3be8>
   16060:	cmp	sl, #0
   16064:	beq	15c20 <__assert_fail@plt+0x407c>
   16068:	cmp	r7, r9
   1606c:	bls	160b0 <__assert_fail@plt+0x450c>
   16070:	cmp	r5, #43	; 0x2b
   16074:	cmpne	r5, #48	; 0x30
   16078:	moveq	r5, #1
   1607c:	movne	r5, #0
   16080:	sub	r7, r7, r9
   16084:	beq	16cd4 <__assert_fail@plt+0x5130>
   16088:	cmp	r7, #0
   1608c:	movne	r8, r5
   16090:	movne	r5, #32
   16094:	beq	160b0 <__assert_fail@plt+0x450c>
   16098:	add	r8, r8, #1
   1609c:	mov	r1, sl
   160a0:	mov	r0, r5
   160a4:	bl	11a90 <fputc@plt>
   160a8:	cmp	r7, r8
   160ac:	bne	16098 <__assert_fail@plt+0x44f4>
   160b0:	ldr	r3, [sp, #40]	; 0x28
   160b4:	cmp	r3, #0
   160b8:	beq	16c90 <__assert_fail@plt+0x50ec>
   160bc:	mov	r2, r9
   160c0:	mov	r1, r6
   160c4:	mov	r0, sl
   160c8:	bl	15630 <__assert_fail@plt+0x3a8c>
   160cc:	b	15c20 <__assert_fail@plt+0x407c>
   160d0:	mvn	r3, r7
   160d4:	cmp	r5, #45	; 0x2d
   160d8:	lsr	r3, r3, #31
   160dc:	moveq	r3, #0
   160e0:	cmp	r3, #0
   160e4:	beq	16f54 <__assert_fail@plt+0x53b0>
   160e8:	cmp	r7, #1
   160ec:	movcs	r6, r7
   160f0:	movcc	r6, #1
   160f4:	ldr	r3, [sp, #28]
   160f8:	mvn	r3, r3
   160fc:	cmp	r3, r6
   16100:	bls	1578c <__assert_fail@plt+0x3be8>
   16104:	cmp	sl, #0
   16108:	beq	16158 <__assert_fail@plt+0x45b4>
   1610c:	cmp	r7, #1
   16110:	bls	1614c <__assert_fail@plt+0x45a8>
   16114:	cmp	r5, #43	; 0x2b
   16118:	cmpne	r5, #48	; 0x30
   1611c:	moveq	r5, #1
   16120:	movne	r5, #0
   16124:	sub	r7, r7, #1
   16128:	bne	16e64 <__assert_fail@plt+0x52c0>
   1612c:	mov	r5, #0
   16130:	mov	r8, #48	; 0x30
   16134:	add	r5, r5, #1
   16138:	mov	r1, sl
   1613c:	mov	r0, r8
   16140:	bl	11a90 <fputc@plt>
   16144:	cmp	r7, r5
   16148:	bne	16134 <__assert_fail@plt+0x4590>
   1614c:	mov	r1, sl
   16150:	mov	r0, #10
   16154:	bl	11a90 <fputc@plt>
   16158:	ldr	r3, [sp, #28]
   1615c:	add	r3, r3, r6
   16160:	str	r3, [sp, #28]
   16164:	b	15768 <__assert_fail@plt+0x3bc4>
   16168:	ldr	r3, [sp, #32]
   1616c:	ldr	r2, [pc, #1312]	; 16694 <__assert_fail@plt+0x4af0>
   16170:	mov	lr, #1
   16174:	ldr	r3, [r3, #24]
   16178:	add	r3, r3, #6
   1617c:	smull	r0, r2, r2, r3
   16180:	add	r0, r2, r3
   16184:	asr	r2, r3, #31
   16188:	rsb	r2, r2, r0, asr #2
   1618c:	rsb	r2, r2, r2, lsl #3
   16190:	sub	r3, r3, r2
   16194:	add	r2, r3, lr
   16198:	mov	r3, r2
   1619c:	mov	r0, #0
   161a0:	lsr	r2, r2, #31
   161a4:	cmp	r3, r0
   161a8:	str	r2, [sp, #36]	; 0x24
   161ac:	mov	ip, r0
   161b0:	movlt	r2, #0
   161b4:	movge	r2, #1
   161b8:	cmp	r8, #79	; 0x4f
   161bc:	movne	r2, #0
   161c0:	andeq	r2, r2, #1
   161c4:	cmp	r2, #0
   161c8:	uxtbne	r1, r1
   161cc:	bne	15e10 <__assert_fail@plt+0x426c>
   161d0:	ldr	r2, [sp, #36]	; 0x24
   161d4:	cmp	r2, #0
   161d8:	rsbne	r3, r3, #0
   161dc:	add	r9, sp, #72	; 0x48
   161e0:	add	r6, r9, #14
   161e4:	mov	r2, r6
   161e8:	mov	r6, r3
   161ec:	mov	r3, r2
   161f0:	tst	r0, #1
   161f4:	movne	r2, #58	; 0x3a
   161f8:	mov	r8, r3
   161fc:	strbne	r2, [r3, #-1]
   16200:	subne	r8, r3, #1
   16204:	ldr	r3, [pc, #1120]	; 1666c <__assert_fail@plt+0x4ac8>
   16208:	asrs	r0, r0, #1
   1620c:	movne	r1, #1
   16210:	umull	r3, r2, r3, r6
   16214:	moveq	r1, #0
   16218:	lsr	r2, r2, #3
   1621c:	cmp	r2, #0
   16220:	orrne	r1, r1, #1
   16224:	add	r3, r2, r2, lsl #2
   16228:	cmp	r1, #0
   1622c:	sub	r3, r6, r3, lsl #1
   16230:	add	r3, r3, #48	; 0x30
   16234:	strb	r3, [r8, #-1]
   16238:	mov	r6, r2
   1623c:	sub	r3, r8, #1
   16240:	bne	161f0 <__assert_fail@plt+0x464c>
   16244:	mov	r6, r3
   16248:	b	15f7c <__assert_fail@plt+0x43d8>
   1624c:	subs	r3, r5, #45	; 0x2d
   16250:	movne	r3, #1
   16254:	cmp	r7, #0
   16258:	movlt	r3, #0
   1625c:	cmp	r3, #0
   16260:	beq	16f48 <__assert_fail@plt+0x53a4>
   16264:	cmp	r7, #1
   16268:	movcs	r6, r7
   1626c:	movcc	r6, #1
   16270:	ldr	r3, [sp, #28]
   16274:	mvn	r3, r3
   16278:	cmp	r3, r6
   1627c:	bls	1578c <__assert_fail@plt+0x3be8>
   16280:	cmp	sl, #0
   16284:	beq	16158 <__assert_fail@plt+0x45b4>
   16288:	cmp	r7, #1
   1628c:	bls	162c8 <__assert_fail@plt+0x4724>
   16290:	cmp	r5, #43	; 0x2b
   16294:	cmpne	r5, #48	; 0x30
   16298:	moveq	r5, #1
   1629c:	movne	r5, #0
   162a0:	sub	r7, r7, #1
   162a4:	bne	16dc0 <__assert_fail@plt+0x521c>
   162a8:	mov	r5, #0
   162ac:	mov	r8, #48	; 0x30
   162b0:	add	r5, r5, #1
   162b4:	mov	r1, sl
   162b8:	mov	r0, r8
   162bc:	bl	11a90 <fputc@plt>
   162c0:	cmp	r7, r5
   162c4:	bne	162b0 <__assert_fail@plt+0x470c>
   162c8:	mov	r1, sl
   162cc:	mov	r0, #9
   162d0:	bl	11a90 <fputc@plt>
   162d4:	b	16158 <__assert_fail@plt+0x45b4>
   162d8:	cmp	r8, #69	; 0x45
   162dc:	beq	15b70 <__assert_fail@plt+0x3fcc>
   162e0:	ldr	r3, [sp, #32]
   162e4:	mov	r0, #0
   162e8:	mov	ip, r0
   162ec:	ldr	r3, [r3, #16]
   162f0:	mov	lr, #2
   162f4:	cmn	r3, #1
   162f8:	movlt	r2, #1
   162fc:	movge	r2, r0
   16300:	str	r2, [sp, #36]	; 0x24
   16304:	add	r3, r3, #1
   16308:	movge	r2, #1
   1630c:	movlt	r2, r0
   16310:	b	161b8 <__assert_fail@plt+0x4614>
   16314:	cmp	r8, #69	; 0x45
   16318:	beq	15b70 <__assert_fail@plt+0x3fcc>
   1631c:	ldr	r3, [sp, #32]
   16320:	mov	lr, #2
   16324:	ldr	r2, [r3, #4]
   16328:	b	16198 <__assert_fail@plt+0x45f4>
   1632c:	cmp	r8, #69	; 0x45
   16330:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16334:	ldr	r2, [sp, #48]	; 0x30
   16338:	mov	lr, #2
   1633c:	b	16198 <__assert_fail@plt+0x45f4>
   16340:	cmp	r8, #69	; 0x45
   16344:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16348:	ldr	r3, [sp, #32]
   1634c:	mov	lr, #2
   16350:	ldr	r2, [r3, #8]
   16354:	b	16198 <__assert_fail@plt+0x45f4>
   16358:	cmp	r8, #69	; 0x45
   1635c:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16360:	ldr	r3, [sp, #32]
   16364:	ldr	r9, [r3, #28]
   16368:	ldr	r2, [r3, #24]
   1636c:	ldr	r6, [r3, #20]
   16370:	str	r2, [sp, #36]	; 0x24
   16374:	sub	r2, r9, r2
   16378:	add	r2, r2, #380	; 0x17c
   1637c:	ldr	r3, [pc, #784]	; 16694 <__assert_fail@plt+0x4af0>
   16380:	add	r2, r2, #2
   16384:	cmp	r6, #0
   16388:	smull	r0, r3, r3, r2
   1638c:	add	r3, r3, r2
   16390:	asr	r0, r2, #31
   16394:	rsb	r0, r0, r3, asr #2
   16398:	mvnge	r3, #99	; 0x63
   1639c:	rsb	r0, r0, r0, lsl #3
   163a0:	sub	r2, r2, r0
   163a4:	sub	r2, r9, r2
   163a8:	movlt	r3, #300	; 0x12c
   163ac:	adds	r2, r2, #3
   163b0:	str	r2, [sp, #64]	; 0x40
   163b4:	add	r3, r3, r6
   163b8:	bmi	16fd8 <__assert_fail@plt+0x5434>
   163bc:	tst	r3, #3
   163c0:	ldrne	r3, [pc, #712]	; 16690 <__assert_fail@plt+0x4aec>
   163c4:	bne	1640c <__assert_fail@plt+0x4868>
   163c8:	ldr	r2, [pc, #696]	; 16688 <__assert_fail@plt+0x4ae4>
   163cc:	mov	r0, #100	; 0x64
   163d0:	smull	r2, ip, r2, r3
   163d4:	asr	r2, r3, #31
   163d8:	rsb	lr, r2, ip, asr #5
   163dc:	mul	r0, r0, lr
   163e0:	cmp	r3, r0
   163e4:	ldrne	r3, [pc, #672]	; 1668c <__assert_fail@plt+0x4ae8>
   163e8:	bne	1640c <__assert_fail@plt+0x4868>
   163ec:	rsb	r2, r2, ip, asr #7
   163f0:	mov	ip, #400	; 0x190
   163f4:	ldr	r0, [pc, #660]	; 16690 <__assert_fail@plt+0x4aec>
   163f8:	mul	r2, ip, r2
   163fc:	sub	ip, ip, #34	; 0x22
   16400:	cmp	r3, r2
   16404:	movne	r3, r0
   16408:	moveq	r3, ip
   1640c:	ldr	r2, [sp, #36]	; 0x24
   16410:	sub	r3, r9, r3
   16414:	sub	r2, r3, r2
   16418:	ldr	r0, [pc, #628]	; 16694 <__assert_fail@plt+0x4af0>
   1641c:	add	r2, r2, #380	; 0x17c
   16420:	add	r2, r2, #2
   16424:	smull	r0, ip, r0, r2
   16428:	add	ip, ip, r2
   1642c:	asr	r0, r2, #31
   16430:	rsb	r0, r0, ip, asr #2
   16434:	rsb	r0, r0, r0, lsl #3
   16438:	sub	r2, r2, r0
   1643c:	sub	r3, r3, r2
   16440:	adds	r3, r3, #3
   16444:	movmi	lr, #0
   16448:	ldrmi	r3, [sp, #64]	; 0x40
   1644c:	movpl	lr, #1
   16450:	cmp	r1, #71	; 0x47
   16454:	beq	170d4 <__assert_fail@plt+0x5530>
   16458:	cmp	r1, #103	; 0x67
   1645c:	bne	170b4 <__assert_fail@plt+0x5510>
   16460:	ldr	r3, [pc, #544]	; 16688 <__assert_fail@plt+0x4ae4>
   16464:	mov	r0, #100	; 0x64
   16468:	smull	r2, r3, r3, r6
   1646c:	asr	r2, r6, #31
   16470:	rsb	r2, r2, r3, asr #5
   16474:	ldr	r3, [pc, #524]	; 16688 <__assert_fail@plt+0x4ae4>
   16478:	mul	r2, r0, r2
   1647c:	sub	r2, r6, r2
   16480:	add	r2, r2, lr
   16484:	smull	r3, ip, r3, r2
   16488:	asr	r3, r2, #31
   1648c:	rsb	r3, r3, ip, asr #5
   16490:	mul	r3, r0, r3
   16494:	subs	r3, r2, r3
   16498:	bmi	17074 <__assert_fail@plt+0x54d0>
   1649c:	cmp	r5, #0
   164a0:	beq	16d9c <__assert_fail@plt+0x51f8>
   164a4:	mov	r2, #1
   164a8:	mov	r0, #0
   164ac:	str	r0, [sp, #36]	; 0x24
   164b0:	cmp	r5, #43	; 0x2b
   164b4:	beq	16e84 <__assert_fail@plt+0x52e0>
   164b8:	mov	ip, #0
   164bc:	mov	lr, #2
   164c0:	mov	r0, #0
   164c4:	b	161b8 <__assert_fail@plt+0x4614>
   164c8:	cmp	r8, #0
   164cc:	bne	15b70 <__assert_fail@plt+0x3fcc>
   164d0:	clz	r3, r5
   164d4:	lsr	r3, r3, #5
   164d8:	ands	r3, r3, r7, lsr #31
   164dc:	bne	17140 <__assert_fail@plt+0x559c>
   164e0:	sub	r9, r7, #6
   164e4:	ldr	r8, [pc, #436]	; 166a0 <__assert_fail@plt+0x4afc>
   164e8:	bic	r9, r9, r9, asr #31
   164ec:	ldr	r3, [sp, #1168]	; 0x490
   164f0:	stm	sp, {r5, r9}
   164f4:	str	r3, [sp, #16]
   164f8:	ldr	r3, [sp, #1164]	; 0x48c
   164fc:	ldr	r2, [sp, #32]
   16500:	str	r3, [sp, #12]
   16504:	ldr	r3, [sp, #1160]	; 0x488
   16508:	mov	r1, r8
   1650c:	str	r3, [sp, #8]
   16510:	mov	r0, #0
   16514:	ldr	r3, [sp, #40]	; 0x28
   16518:	bl	15670 <__assert_fail@plt+0x3acc>
   1651c:	cmp	r5, #45	; 0x2d
   16520:	moveq	r6, #0
   16524:	bicne	r6, r7, r7, asr #31
   16528:	cmp	r6, r0
   1652c:	movcs	r3, r6
   16530:	movcc	r3, r0
   16534:	mov	r2, r3
   16538:	str	r3, [sp, #36]	; 0x24
   1653c:	ldr	r3, [sp, #28]
   16540:	mvn	r3, r3
   16544:	cmp	r2, r3
   16548:	bcs	1578c <__assert_fail@plt+0x3be8>
   1654c:	cmp	sl, #0
   16550:	beq	15c20 <__assert_fail@plt+0x407c>
   16554:	cmp	r6, r0
   16558:	bls	165a0 <__assert_fail@plt+0x49fc>
   1655c:	cmp	r5, #43	; 0x2b
   16560:	cmpne	r5, #48	; 0x30
   16564:	moveq	r7, #1
   16568:	movne	r7, #0
   1656c:	sub	r6, r6, r0
   16570:	beq	16e30 <__assert_fail@plt+0x528c>
   16574:	cmp	r6, #0
   16578:	movne	r3, #32
   1657c:	beq	165a0 <__assert_fail@plt+0x49fc>
   16580:	mov	r0, r3
   16584:	add	r7, r7, #1
   16588:	mov	r1, sl
   1658c:	str	r3, [sp, #64]	; 0x40
   16590:	bl	11a90 <fputc@plt>
   16594:	cmp	r6, r7
   16598:	ldr	r3, [sp, #64]	; 0x40
   1659c:	bne	16580 <__assert_fail@plt+0x49dc>
   165a0:	ldr	r3, [sp, #1168]	; 0x490
   165a4:	stm	sp, {r5, r9}
   165a8:	str	r3, [sp, #16]
   165ac:	ldr	r3, [sp, #1164]	; 0x48c
   165b0:	mov	r1, r8
   165b4:	str	r3, [sp, #12]
   165b8:	ldr	r3, [sp, #1160]	; 0x488
   165bc:	ldr	r2, [sp, #32]
   165c0:	str	r3, [sp, #8]
   165c4:	mov	r0, sl
   165c8:	ldr	r3, [sp, #40]	; 0x28
   165cc:	bl	15670 <__assert_fail@plt+0x3acc>
   165d0:	b	15c20 <__assert_fail@plt+0x407c>
   165d4:	cmp	r8, #0
   165d8:	bne	15b70 <__assert_fail@plt+0x3fcc>
   165dc:	mvn	r9, #0
   165e0:	ldr	r8, [pc, #136]	; 16670 <__assert_fail@plt+0x4acc>
   165e4:	b	164ec <__assert_fail@plt+0x4948>
   165e8:	cmp	r8, #69	; 0x45
   165ec:	beq	15b70 <__assert_fail@plt+0x3fcc>
   165f0:	ldr	r3, [sp, #32]
   165f4:	mov	lr, #1
   165f8:	ldr	r2, [r3, #24]
   165fc:	b	16198 <__assert_fail@plt+0x45f4>
   16600:	cmp	r8, #69	; 0x45
   16604:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16608:	cmp	r7, #0
   1660c:	movle	r7, #9
   16610:	ldr	r3, [sp, #1168]	; 0x490
   16614:	mov	r6, #9
   16618:	b	1662c <__assert_fail@plt+0x4a88>
   1661c:	asr	r2, r3, #31
   16620:	smull	r1, r3, fp, r3
   16624:	sub	r6, r6, #1
   16628:	rsb	r3, r2, r3, asr #2
   1662c:	cmp	r6, r7
   16630:	bgt	1661c <__assert_fail@plt+0x4a78>
   16634:	smull	r2, r1, fp, r3
   16638:	asr	r2, r3, #31
   1663c:	rsb	r1, r2, r1, asr #2
   16640:	cmp	r6, #1
   16644:	add	r1, r1, r1, lsl #2
   16648:	ble	16f14 <__assert_fail@plt+0x5370>
   1664c:	cmp	r3, r1, lsl #1
   16650:	beq	16620 <__assert_fail@plt+0x4a7c>
   16654:	add	r0, sp, #72	; 0x48
   16658:	add	r1, r0, r6
   1665c:	b	166ac <__assert_fail@plt+0x4b08>
   16660:	andeq	r0, r3, r4, lsr #23
   16664:	strbtvs	r6, [r6], -r7, ror #12
   16668:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1666c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16670:	andeq	r0, r3, r8, ror #21
   16674:			; <UNDEFINED> instruction: 0x91a2b3c5
   16678:	stmhi	r8, {r0, r3, r7, fp, pc}
   1667c:	strdeq	r0, [r3], -r4
   16680:	andeq	r0, r3, r0, ror #21
   16684:	andeq	r0, r0, fp, ror #14
   16688:	mvnpl	r8, pc, lsl r5
   1668c:	andeq	r0, r0, lr, ror #2
   16690:	andeq	r0, r0, sp, ror #2
   16694:	subls	r2, r9, #-1828716544	; 0x93000000
   16698:			; <UNDEFINED> instruction: 0xfffff894
   1669c:	andeq	r2, r0, pc, lsl #14
   166a0:	andeq	r0, r3, r8, asr #11
   166a4:	andeq	r2, r0, r0, lsl r7
   166a8:	asr	r2, r2, #31
   166ac:	smull	lr, ip, fp, r3
   166b0:	rsb	r2, r2, ip, asr #2
   166b4:	add	ip, r2, r2, lsl #2
   166b8:	sub	r3, r3, ip, lsl #1
   166bc:	add	r3, r3, #48	; 0x30
   166c0:	strb	r3, [r1, #-1]!
   166c4:	cmp	r0, r1
   166c8:	mov	r3, r2
   166cc:	bne	166a8 <__assert_fail@plt+0x4b04>
   166d0:	cmp	r5, #0
   166d4:	ldr	r3, [sp, #28]
   166d8:	moveq	r5, #48	; 0x30
   166dc:	cmp	r6, #0
   166e0:	movcs	r8, r6
   166e4:	movcc	r8, #0
   166e8:	mvn	r3, r3
   166ec:	cmp	r8, r3
   166f0:	bcs	1578c <__assert_fail@plt+0x3be8>
   166f4:	cmp	sl, #0
   166f8:	beq	16718 <__assert_fail@plt+0x4b74>
   166fc:	ldr	r3, [sp, #40]	; 0x28
   16700:	cmp	r3, #0
   16704:	beq	16f20 <__assert_fail@plt+0x537c>
   16708:	mov	r2, r6
   1670c:	add	r1, sp, #72	; 0x48
   16710:	mov	r0, sl
   16714:	bl	15630 <__assert_fail@plt+0x3a8c>
   16718:	ldr	r3, [sp, #28]
   1671c:	cmp	r5, #45	; 0x2d
   16720:	add	r8, r3, r8
   16724:	beq	17130 <__assert_fail@plt+0x558c>
   16728:	subs	r6, r7, r6
   1672c:	bmi	17130 <__assert_fail@plt+0x558c>
   16730:	mvn	r3, r8
   16734:	cmp	r6, r3
   16738:	mov	r7, r6
   1673c:	bcs	1578c <__assert_fail@plt+0x3be8>
   16740:	cmp	r6, #0
   16744:	cmpne	sl, #0
   16748:	beq	16780 <__assert_fail@plt+0x4bdc>
   1674c:	cmp	r5, #43	; 0x2b
   16750:	cmpne	r5, #48	; 0x30
   16754:	moveq	r5, #1
   16758:	movne	r5, #0
   1675c:	bne	17184 <__assert_fail@plt+0x55e0>
   16760:	mov	r5, #0
   16764:	mov	r9, #48	; 0x30
   16768:	add	r5, r5, #1
   1676c:	mov	r1, sl
   16770:	mov	r0, r9
   16774:	bl	11a90 <fputc@plt>
   16778:	cmp	r6, r5
   1677c:	bhi	16768 <__assert_fail@plt+0x4bc4>
   16780:	add	r3, r7, r8
   16784:	str	r3, [sp, #28]
   16788:	b	15768 <__assert_fail@plt+0x3bc4>
   1678c:	cmp	r8, #69	; 0x45
   16790:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16794:	ldr	r3, [sp, #32]
   16798:	ldr	r2, [r3, #12]
   1679c:	cmp	r5, #0
   167a0:	mov	lr, #2
   167a4:	moveq	r5, #95	; 0x5f
   167a8:	b	16198 <__assert_fail@plt+0x45f4>
   167ac:	cmp	r8, #69	; 0x45
   167b0:	beq	15b70 <__assert_fail@plt+0x3fcc>
   167b4:	ldr	r3, [sp, #32]
   167b8:	mov	lr, #2
   167bc:	ldr	r2, [r3, #12]
   167c0:	b	16198 <__assert_fail@plt+0x45f4>
   167c4:	mov	lr, #0
   167c8:	ldr	r2, [sp, #32]
   167cc:	ldr	r3, [r2, #32]
   167d0:	cmp	r3, #0
   167d4:	blt	15768 <__assert_fail@plt+0x3bc4>
   167d8:	ldr	ip, [r2, #36]	; 0x24
   167dc:	mov	r3, r2
   167e0:	cmp	ip, #0
   167e4:	blt	16fa0 <__assert_fail@plt+0x53fc>
   167e8:	movne	r3, #0
   167ec:	strne	r3, [sp, #36]	; 0x24
   167f0:	bne	1680c <__assert_fail@plt+0x4c68>
   167f4:	ldr	r3, [sp, #56]	; 0x38
   167f8:	ldrb	r3, [r3]
   167fc:	sub	r3, r3, #45	; 0x2d
   16800:	clz	r3, r3
   16804:	lsr	r3, r3, #5
   16808:	str	r3, [sp, #36]	; 0x24
   1680c:	ldr	r3, [pc, #-412]	; 16678 <__assert_fail@plt+0x4ad4>
   16810:	smull	r3, r2, r3, ip
   16814:	ldr	r3, [pc, #-424]	; 16674 <__assert_fail@plt+0x4ad0>
   16818:	add	r2, r2, ip
   1681c:	smull	r3, r6, r3, ip
   16820:	add	r0, r6, ip
   16824:	asr	r3, ip, #31
   16828:	str	r0, [sp, #64]	; 0x40
   1682c:	ldr	r0, [pc, #-444]	; 16678 <__assert_fail@plt+0x4ad4>
   16830:	rsb	r2, r3, r2, asr #5
   16834:	smull	r6, r0, r0, r2
   16838:	add	r0, r0, r2
   1683c:	asr	r6, r2, #31
   16840:	rsb	r0, r6, r0, asr #5
   16844:	rsb	r6, r2, r2, lsl #4
   16848:	rsb	r0, r0, r0, lsl #4
   1684c:	str	r0, [sp, #68]	; 0x44
   16850:	ldr	r0, [sp, #64]	; 0x40
   16854:	sub	ip, ip, r6, lsl #2
   16858:	rsb	r3, r3, r0, asr #11
   1685c:	ldr	r0, [sp, #68]	; 0x44
   16860:	sub	r0, r2, r0, lsl #2
   16864:	cmp	lr, #3
   16868:	ldrls	pc, [pc, lr, lsl #2]
   1686c:	b	15b70 <__assert_fail@plt+0x3fcc>
   16870:	andeq	r7, r1, r4, lsl r2
   16874:	strdeq	r7, [r1], -r4
   16878:	andeq	r7, r1, r8, asr #3
   1687c:	andeq	r7, r1, r4, lsr #3
   16880:	ldr	r3, [sp, #40]	; 0x28
   16884:	cmp	r6, #0
   16888:	movne	r3, r6
   1688c:	cmp	r8, #69	; 0x45
   16890:	str	r3, [sp, #40]	; 0x28
   16894:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16898:	uxtb	r1, r1
   1689c:	mov	r6, #0
   168a0:	b	15d10 <__assert_fail@plt+0x416c>
   168a4:	cmp	r8, #69	; 0x45
   168a8:	beq	15e10 <__assert_fail@plt+0x426c>
   168ac:	ldr	r3, [sp, #32]
   168b0:	mov	r0, #100	; 0x64
   168b4:	ldr	r2, [r3, #20]
   168b8:	ldr	r3, [pc, #-568]	; 16688 <__assert_fail@plt+0x4ae4>
   168bc:	smull	r3, ip, r3, r2
   168c0:	asr	r3, r2, #31
   168c4:	rsb	r3, r3, ip, asr #5
   168c8:	mul	r3, r0, r3
   168cc:	subs	r3, r2, r3
   168d0:	bpl	1649c <__assert_fail@plt+0x48f8>
   168d4:	sub	r0, r0, #2000	; 0x7d0
   168d8:	cmp	r2, r0
   168dc:	rsblt	r3, r3, #0
   168e0:	addge	r3, r3, #100	; 0x64
   168e4:	b	1649c <__assert_fail@plt+0x48f8>
   168e8:	ldr	r3, [sp, #32]
   168ec:	cmp	r8, #79	; 0x4f
   168f0:	ldr	r3, [r3, #16]
   168f4:	beq	15e10 <__assert_fail@plt+0x426c>
   168f8:	add	r2, r3, r3, lsl #2
   168fc:	mov	ip, #0
   16900:	add	r3, r3, r2, lsl #1
   16904:	str	ip, [sp, #36]	; 0x24
   16908:	asr	r3, r3, #5
   1690c:	add	r3, r3, #1
   16910:	mov	r0, ip
   16914:	mov	lr, #1
   16918:	b	161dc <__assert_fail@plt+0x4638>
   1691c:	mov	r3, #0
   16920:	cmp	r6, #0
   16924:	moveq	r6, r3
   16928:	moveq	r1, #112	; 0x70
   1692c:	movne	r3, #0
   16930:	movne	r1, #112	; 0x70
   16934:	strne	r3, [sp, #40]	; 0x28
   16938:	b	15d10 <__assert_fail@plt+0x416c>
   1693c:	sub	r3, r4, #1
   16940:	cmp	r9, r3
   16944:	movne	r4, r3
   16948:	bne	15b70 <__assert_fail@plt+0x3fcc>
   1694c:	mvn	r3, r7
   16950:	cmp	r5, #45	; 0x2d
   16954:	lsr	r3, r3, #31
   16958:	moveq	r3, #0
   1695c:	cmp	r3, #0
   16960:	beq	16f94 <__assert_fail@plt+0x53f0>
   16964:	cmp	r7, #1
   16968:	movcs	r6, r7
   1696c:	movcc	r6, #1
   16970:	ldr	r3, [sp, #28]
   16974:	mvn	r3, r3
   16978:	cmp	r3, r6
   1697c:	bls	1578c <__assert_fail@plt+0x3be8>
   16980:	cmp	sl, #0
   16984:	beq	16158 <__assert_fail@plt+0x45b4>
   16988:	cmp	r7, #1
   1698c:	bls	169cc <__assert_fail@plt+0x4e28>
   16990:	cmp	r5, #43	; 0x2b
   16994:	cmpne	r5, #48	; 0x30
   16998:	moveq	r5, #1
   1699c:	movne	r5, #0
   169a0:	sub	r7, r7, #1
   169a4:	bne	16f74 <__assert_fail@plt+0x53d0>
   169a8:	mov	r5, #0
   169ac:	mov	r8, #48	; 0x30
   169b0:	add	r5, r5, #1
   169b4:	mov	r1, sl
   169b8:	mov	r0, r8
   169bc:	bl	11a90 <fputc@plt>
   169c0:	cmp	r7, r5
   169c4:	bne	169b0 <__assert_fail@plt+0x4e0c>
   169c8:	ldrb	r0, [r4]
   169cc:	mov	r1, sl
   169d0:	bl	11a90 <fputc@plt>
   169d4:	b	16158 <__assert_fail@plt+0x45b4>
   169d8:	cmp	r8, #69	; 0x45
   169dc:	beq	15b70 <__assert_fail@plt+0x3fcc>
   169e0:	ldr	r2, [sp, #32]
   169e4:	mov	lr, #2
   169e8:	ldr	r3, [r2, #28]
   169ec:	ldr	r2, [r2, #24]
   169f0:	sub	r3, r3, r2
   169f4:	ldr	r2, [pc, #-872]	; 16694 <__assert_fail@plt+0x4af0>
   169f8:	add	r3, r3, #7
   169fc:	smull	r0, r2, r2, r3
   16a00:	add	r2, r2, r3
   16a04:	asr	r3, r3, #31
   16a08:	rsb	r2, r3, r2, asr lr
   16a0c:	b	16198 <__assert_fail@plt+0x45f4>
   16a10:	ldr	r8, [pc, #-924]	; 1667c <__assert_fail@plt+0x4ad8>
   16a14:	mvn	r9, #0
   16a18:	b	164ec <__assert_fail@plt+0x4948>
   16a1c:	cmp	r8, #69	; 0x45
   16a20:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16a24:	ldr	r3, [sp, #32]
   16a28:	mov	r0, #0
   16a2c:	mov	ip, r0
   16a30:	ldr	r3, [r3, #28]
   16a34:	mov	lr, #3
   16a38:	cmn	r3, #1
   16a3c:	movlt	r2, #1
   16a40:	movge	r2, r0
   16a44:	str	r2, [sp, #36]	; 0x24
   16a48:	add	r3, r3, #1
   16a4c:	movge	r2, #1
   16a50:	movlt	r2, r0
   16a54:	b	161b8 <__assert_fail@plt+0x4614>
   16a58:	ldrb	r3, [r4, #1]
   16a5c:	add	r0, r4, #1
   16a60:	cmp	r3, #58	; 0x3a
   16a64:	movne	lr, #1
   16a68:	beq	16ef4 <__assert_fail@plt+0x5350>
   16a6c:	cmp	r3, #122	; 0x7a
   16a70:	moveq	r4, r0
   16a74:	bne	15b70 <__assert_fail@plt+0x3fcc>
   16a78:	b	167c8 <__assert_fail@plt+0x4c24>
   16a7c:	cmp	r8, #69	; 0x45
   16a80:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16a84:	ldr	r3, [sp, #32]
   16a88:	ldr	r0, [pc, #-1020]	; 16694 <__assert_fail@plt+0x4af0>
   16a8c:	mov	lr, #2
   16a90:	ldr	r2, [r3, #24]
   16a94:	ldr	r3, [r3, #28]
   16a98:	add	r2, r2, #6
   16a9c:	smull	ip, r0, r0, r2
   16aa0:	add	ip, r0, r2
   16aa4:	asr	r0, r2, #31
   16aa8:	rsb	r0, r0, ip, asr #2
   16aac:	rsb	r0, r0, r0, lsl #3
   16ab0:	sub	r2, r2, r0
   16ab4:	b	169f0 <__assert_fail@plt+0x4e4c>
   16ab8:	cmp	r8, #69	; 0x45
   16abc:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16ac0:	ldr	r3, [sp, #32]
   16ac4:	mov	lr, #2
   16ac8:	ldr	r2, [r3]
   16acc:	b	16198 <__assert_fail@plt+0x45f4>
   16ad0:	mvn	r9, #0
   16ad4:	ldr	r8, [pc, #-1116]	; 16680 <__assert_fail@plt+0x4adc>
   16ad8:	b	164ec <__assert_fail@plt+0x4948>
   16adc:	cmp	r8, #69	; 0x45
   16ae0:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16ae4:	ldr	r2, [sp, #48]	; 0x30
   16ae8:	b	1679c <__assert_fail@plt+0x4bf8>
   16aec:	cmp	r8, #69	; 0x45
   16af0:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16af4:	ldr	r3, [sp, #32]
   16af8:	ldr	r2, [r3, #8]
   16afc:	b	1679c <__assert_fail@plt+0x4bf8>
   16b00:	cmp	r8, #69	; 0x45
   16b04:	beq	15e10 <__assert_fail@plt+0x426c>
   16b08:	cmp	r8, #79	; 0x4f
   16b0c:	beq	15b70 <__assert_fail@plt+0x3fcc>
   16b10:	ldr	r3, [sp, #32]
   16b14:	ldr	r0, [pc, #-1156]	; 16698 <__assert_fail@plt+0x4af4>
   16b18:	ldr	r2, [r3, #20]
   16b1c:	cmp	r2, r0
   16b20:	movge	ip, #0
   16b24:	movlt	ip, #1
   16b28:	add	r3, r2, #1888	; 0x760
   16b2c:	cmp	r5, #0
   16b30:	str	ip, [sp, #36]	; 0x24
   16b34:	add	r3, r3, #12
   16b38:	bne	16eac <__assert_fail@plt+0x5308>
   16b3c:	ldr	ip, [sp, #1152]	; 0x480
   16b40:	cmp	r2, r0
   16b44:	movlt	r2, #0
   16b48:	movge	r2, #1
   16b4c:	cmp	ip, #43	; 0x2b
   16b50:	beq	17124 <__assert_fail@plt+0x5580>
   16b54:	mov	r5, ip
   16b58:	mov	lr, #4
   16b5c:	mov	ip, #0
   16b60:	b	164c0 <__assert_fail@plt+0x491c>
   16b64:	cmp	r8, #69	; 0x45
   16b68:	beq	15e10 <__assert_fail@plt+0x426c>
   16b6c:	ldr	r3, [sp, #32]
   16b70:	ldr	r0, [pc, #-1268]	; 16684 <__assert_fail@plt+0x4ae0>
   16b74:	mvn	ip, #98	; 0x62
   16b78:	ldr	r2, [r3, #20]
   16b7c:	add	r3, r2, #1888	; 0x760
   16b80:	add	r3, r3, #12
   16b84:	cmp	r3, r0
   16b88:	ldr	r0, [pc, #-1272]	; 16698 <__assert_fail@plt+0x4af4>
   16b8c:	movhi	r3, #0
   16b90:	movls	r3, #1
   16b94:	cmp	r2, r0
   16b98:	mla	r3, ip, r3, r2
   16b9c:	movge	ip, #0
   16ba0:	movlt	ip, #1
   16ba4:	str	ip, [sp, #36]	; 0x24
   16ba8:	ldr	ip, [pc, #-1320]	; 16688 <__assert_fail@plt+0x4ae4>
   16bac:	cmp	r5, #0
   16bb0:	smull	lr, ip, ip, r3
   16bb4:	asr	r3, r3, #31
   16bb8:	rsb	r3, r3, ip, asr #5
   16bbc:	add	r3, r3, #19
   16bc0:	bne	16e20 <__assert_fail@plt+0x527c>
   16bc4:	ldr	ip, [sp, #1152]	; 0x480
   16bc8:	cmp	r2, r0
   16bcc:	movlt	r2, #0
   16bd0:	movge	r2, #1
   16bd4:	cmp	ip, #43	; 0x2b
   16bd8:	beq	16e84 <__assert_fail@plt+0x52e0>
   16bdc:	mov	r5, ip
   16be0:	mov	lr, #2
   16be4:	mov	ip, #0
   16be8:	b	164c0 <__assert_fail@plt+0x491c>
   16bec:	ldr	r0, [sp, #56]	; 0x38
   16bf0:	bl	11988 <strlen@plt>
   16bf4:	mvn	r3, r7
   16bf8:	cmp	r5, #45	; 0x2d
   16bfc:	lsr	r3, r3, #31
   16c00:	moveq	r3, #0
   16c04:	cmp	r3, #0
   16c08:	moveq	r7, #0
   16c0c:	ldr	r3, [sp, #40]	; 0x28
   16c10:	cmp	r6, #0
   16c14:	movne	r3, #0
   16c18:	str	r3, [sp, #40]	; 0x28
   16c1c:	cmp	r0, r7
   16c20:	movcs	r3, r0
   16c24:	movcc	r3, r7
   16c28:	mov	r2, r3
   16c2c:	str	r3, [sp, #36]	; 0x24
   16c30:	ldr	r3, [sp, #28]
   16c34:	mov	r9, r0
   16c38:	mvn	r3, r3
   16c3c:	cmp	r2, r3
   16c40:	bcs	1578c <__assert_fail@plt+0x3be8>
   16c44:	cmp	sl, #0
   16c48:	beq	15c20 <__assert_fail@plt+0x407c>
   16c4c:	cmp	r0, r7
   16c50:	bcc	16de0 <__assert_fail@plt+0x523c>
   16c54:	cmp	r6, #0
   16c58:	bne	16fc4 <__assert_fail@plt+0x5420>
   16c5c:	ldr	r3, [sp, #40]	; 0x28
   16c60:	cmp	r3, #0
   16c64:	beq	16fac <__assert_fail@plt+0x5408>
   16c68:	mov	r2, r9
   16c6c:	ldr	r1, [sp, #56]	; 0x38
   16c70:	mov	r0, sl
   16c74:	bl	15630 <__assert_fail@plt+0x3a8c>
   16c78:	b	15c20 <__assert_fail@plt+0x407c>
   16c7c:	mov	r3, #1
   16c80:	b	16920 <__assert_fail@plt+0x4d7c>
   16c84:	mov	r3, #45	; 0x2d
   16c88:	str	r3, [sp, #36]	; 0x24
   16c8c:	b	15fb8 <__assert_fail@plt+0x4414>
   16c90:	mov	r1, r9
   16c94:	mov	r0, r6
   16c98:	mov	r3, sl
   16c9c:	mov	r2, #1
   16ca0:	bl	11868 <fwrite@plt>
   16ca4:	b	15c20 <__assert_fail@plt+0x407c>
   16ca8:	add	r9, r9, #14
   16cac:	sub	r9, r9, r6
   16cb0:	sub	r3, r7, r9
   16cb4:	cmp	r3, #0
   16cb8:	movle	r3, #0
   16cbc:	andgt	r3, r2, #1
   16cc0:	cmp	r3, #0
   16cc4:	bne	1603c <__assert_fail@plt+0x4498>
   16cc8:	cmp	r2, #0
   16ccc:	bne	1603c <__assert_fail@plt+0x4498>
   16cd0:	b	16038 <__assert_fail@plt+0x4494>
   16cd4:	cmp	r7, #0
   16cd8:	beq	160b0 <__assert_fail@plt+0x450c>
   16cdc:	mov	r8, #0
   16ce0:	mov	r5, #48	; 0x30
   16ce4:	add	r8, r8, #1
   16ce8:	mov	r1, sl
   16cec:	mov	r0, r5
   16cf0:	bl	11a90 <fputc@plt>
   16cf4:	cmp	r7, r8
   16cf8:	bne	16ce4 <__assert_fail@plt+0x5140>
   16cfc:	b	160b0 <__assert_fail@plt+0x450c>
   16d00:	mov	r1, r9
   16d04:	add	r0, sp, #89	; 0x59
   16d08:	mov	r3, sl
   16d0c:	mov	r2, #1
   16d10:	bl	11868 <fwrite@plt>
   16d14:	b	15c20 <__assert_fail@plt+0x407c>
   16d18:	mov	r2, r9
   16d1c:	add	r1, sp, #89	; 0x59
   16d20:	mov	r0, sl
   16d24:	bl	155f0 <__assert_fail@plt+0x3a4c>
   16d28:	b	15c20 <__assert_fail@plt+0x407c>
   16d2c:	str	r3, [sp, #28]
   16d30:	b	1577c <__assert_fail@plt+0x3bd8>
   16d34:	cmp	sl, #0
   16d38:	beq	1706c <__assert_fail@plt+0x54c8>
   16d3c:	cmp	r8, #0
   16d40:	beq	1706c <__assert_fail@plt+0x54c8>
   16d44:	str	r7, [sp, #1156]	; 0x484
   16d48:	mov	r9, #0
   16d4c:	mov	r3, #32
   16d50:	mov	r7, r2
   16d54:	mov	r0, r3
   16d58:	add	r9, r9, #1
   16d5c:	mov	r1, sl
   16d60:	str	r3, [sp, #68]	; 0x44
   16d64:	bl	11a90 <fputc@plt>
   16d68:	cmp	r9, r8
   16d6c:	ldr	r3, [sp, #68]	; 0x44
   16d70:	bne	16d54 <__assert_fail@plt+0x51b0>
   16d74:	mov	r2, r7
   16d78:	ldr	r7, [sp, #1156]	; 0x484
   16d7c:	ldr	r3, [sp, #28]
   16d80:	sub	r7, r7, r8
   16d84:	add	r3, r3, r9
   16d88:	str	r3, [sp, #28]
   16d8c:	b	15fe8 <__assert_fail@plt+0x4444>
   16d90:	cmp	r5, #0
   16d94:	add	r3, r3, #100	; 0x64
   16d98:	bne	164a4 <__assert_fail@plt+0x4900>
   16d9c:	ldr	r2, [sp, #1152]	; 0x480
   16da0:	cmp	r2, #43	; 0x2b
   16da4:	beq	16f60 <__assert_fail@plt+0x53bc>
   16da8:	mov	ip, #0
   16dac:	mov	r5, r2
   16db0:	str	ip, [sp, #36]	; 0x24
   16db4:	mov	r2, #1
   16db8:	mov	lr, #2
   16dbc:	b	164c0 <__assert_fail@plt+0x491c>
   16dc0:	mov	r8, #32
   16dc4:	add	r5, r5, #1
   16dc8:	mov	r1, sl
   16dcc:	mov	r0, r8
   16dd0:	bl	11a90 <fputc@plt>
   16dd4:	cmp	r7, r5
   16dd8:	bne	16dc4 <__assert_fail@plt+0x5220>
   16ddc:	b	162c8 <__assert_fail@plt+0x4724>
   16de0:	cmp	r5, #43	; 0x2b
   16de4:	cmpne	r5, #48	; 0x30
   16de8:	moveq	r5, #1
   16dec:	movne	r5, #0
   16df0:	sub	r7, r7, r0
   16df4:	beq	16ec8 <__assert_fail@plt+0x5324>
   16df8:	cmp	r7, #0
   16dfc:	movne	r8, #32
   16e00:	beq	16c54 <__assert_fail@plt+0x50b0>
   16e04:	add	r5, r5, #1
   16e08:	mov	r1, sl
   16e0c:	mov	r0, r8
   16e10:	bl	11a90 <fputc@plt>
   16e14:	cmp	r7, r5
   16e18:	bne	16e04 <__assert_fail@plt+0x5260>
   16e1c:	b	16c54 <__assert_fail@plt+0x50b0>
   16e20:	cmp	r2, r0
   16e24:	movlt	r2, #0
   16e28:	movge	r2, #1
   16e2c:	b	164b0 <__assert_fail@plt+0x490c>
   16e30:	cmp	r6, #0
   16e34:	beq	165a0 <__assert_fail@plt+0x49fc>
   16e38:	mov	r7, #0
   16e3c:	mov	r3, #48	; 0x30
   16e40:	mov	r0, r3
   16e44:	add	r7, r7, #1
   16e48:	mov	r1, sl
   16e4c:	str	r3, [sp, #64]	; 0x40
   16e50:	bl	11a90 <fputc@plt>
   16e54:	cmp	r6, r7
   16e58:	ldr	r3, [sp, #64]	; 0x40
   16e5c:	bne	16e40 <__assert_fail@plt+0x529c>
   16e60:	b	165a0 <__assert_fail@plt+0x49fc>
   16e64:	mov	r8, #32
   16e68:	add	r5, r5, #1
   16e6c:	mov	r1, sl
   16e70:	mov	r0, r8
   16e74:	bl	11a90 <fputc@plt>
   16e78:	cmp	r7, r5
   16e7c:	bne	16e68 <__assert_fail@plt+0x52c4>
   16e80:	b	1614c <__assert_fail@plt+0x45a8>
   16e84:	mov	lr, #2
   16e88:	mov	r0, #99	; 0x63
   16e8c:	cmp	r0, r3
   16e90:	movcs	r0, #0
   16e94:	movcc	r0, #1
   16e98:	cmp	r7, lr
   16e9c:	movle	ip, r0
   16ea0:	orrgt	ip, r0, #1
   16ea4:	mov	r5, #43	; 0x2b
   16ea8:	b	164c0 <__assert_fail@plt+0x491c>
   16eac:	ldr	r2, [sp, #36]	; 0x24
   16eb0:	cmp	r5, #43	; 0x2b
   16eb4:	eor	r2, r2, #1
   16eb8:	beq	17124 <__assert_fail@plt+0x5580>
   16ebc:	mov	ip, #0
   16ec0:	mov	lr, #4
   16ec4:	b	164c0 <__assert_fail@plt+0x491c>
   16ec8:	cmp	r7, #0
   16ecc:	beq	16c54 <__assert_fail@plt+0x50b0>
   16ed0:	mov	r5, #0
   16ed4:	mov	r8, #48	; 0x30
   16ed8:	add	r5, r5, #1
   16edc:	mov	r1, sl
   16ee0:	mov	r0, r8
   16ee4:	bl	11a90 <fputc@plt>
   16ee8:	cmp	r7, r5
   16eec:	bne	16ed8 <__assert_fail@plt+0x5334>
   16ef0:	b	16c54 <__assert_fail@plt+0x50b0>
   16ef4:	add	r2, r4, #2
   16ef8:	mov	lr, #1
   16efc:	mov	r0, r2
   16f00:	ldrb	r3, [r2], #1
   16f04:	add	lr, lr, #1
   16f08:	cmp	r3, #58	; 0x3a
   16f0c:	bne	16a6c <__assert_fail@plt+0x4ec8>
   16f10:	b	16efc <__assert_fail@plt+0x5358>
   16f14:	cmp	r6, #0
   16f18:	bgt	16654 <__assert_fail@plt+0x4ab0>
   16f1c:	b	166d0 <__assert_fail@plt+0x4b2c>
   16f20:	mov	r3, sl
   16f24:	mov	r2, #1
   16f28:	mov	r1, r6
   16f2c:	add	r0, sp, #72	; 0x48
   16f30:	bl	11868 <fwrite@plt>
   16f34:	b	16718 <__assert_fail@plt+0x4b74>
   16f38:	ldr	r2, [sp, #44]	; 0x2c
   16f3c:	mov	r3, #75	; 0x4b
   16f40:	str	r3, [r2]
   16f44:	b	15798 <__assert_fail@plt+0x3bf4>
   16f48:	mov	r7, r3
   16f4c:	mov	r6, #1
   16f50:	b	16270 <__assert_fail@plt+0x46cc>
   16f54:	mov	r7, r3
   16f58:	mov	r6, #1
   16f5c:	b	160f4 <__assert_fail@plt+0x4550>
   16f60:	str	r5, [sp, #36]	; 0x24
   16f64:	mov	r2, #1
   16f68:	mov	lr, #2
   16f6c:	mov	r0, #99	; 0x63
   16f70:	b	16e8c <__assert_fail@plt+0x52e8>
   16f74:	mov	r8, #32
   16f78:	add	r5, r5, #1
   16f7c:	mov	r1, sl
   16f80:	mov	r0, r8
   16f84:	bl	11a90 <fputc@plt>
   16f88:	cmp	r7, r5
   16f8c:	bne	16f78 <__assert_fail@plt+0x53d4>
   16f90:	b	169c8 <__assert_fail@plt+0x4e24>
   16f94:	mov	r7, r3
   16f98:	mov	r6, #1
   16f9c:	b	16970 <__assert_fail@plt+0x4dcc>
   16fa0:	mov	r3, #1
   16fa4:	str	r3, [sp, #36]	; 0x24
   16fa8:	b	1680c <__assert_fail@plt+0x4c68>
   16fac:	mov	r1, r9
   16fb0:	mov	r3, sl
   16fb4:	mov	r2, #1
   16fb8:	ldr	r0, [sp, #56]	; 0x38
   16fbc:	bl	11868 <fwrite@plt>
   16fc0:	b	15c20 <__assert_fail@plt+0x407c>
   16fc4:	mov	r2, r9
   16fc8:	ldr	r1, [sp, #56]	; 0x38
   16fcc:	mov	r0, sl
   16fd0:	bl	155f0 <__assert_fail@plt+0x3a4c>
   16fd4:	b	15c20 <__assert_fail@plt+0x407c>
   16fd8:	sub	r3, r3, #1
   16fdc:	tst	r3, #3
   16fe0:	ldrne	r3, [pc, #-2392]	; 16690 <__assert_fail@plt+0x4aec>
   16fe4:	bne	1702c <__assert_fail@plt+0x5488>
   16fe8:	ldr	r2, [pc, #-2408]	; 16688 <__assert_fail@plt+0x4ae4>
   16fec:	mov	r0, #100	; 0x64
   16ff0:	smull	r2, ip, r2, r3
   16ff4:	asr	r2, r3, #31
   16ff8:	rsb	lr, r2, ip, asr #5
   16ffc:	mul	r0, r0, lr
   17000:	cmp	r3, r0
   17004:	ldrne	r3, [pc, #-2432]	; 1668c <__assert_fail@plt+0x4ae8>
   17008:	bne	1702c <__assert_fail@plt+0x5488>
   1700c:	rsb	r2, r2, ip, asr #7
   17010:	mov	ip, #400	; 0x190
   17014:	ldr	r0, [pc, #-2444]	; 16690 <__assert_fail@plt+0x4aec>
   17018:	mul	r2, ip, r2
   1701c:	sub	ip, ip, #34	; 0x22
   17020:	cmp	r3, r2
   17024:	movne	r3, r0
   17028:	moveq	r3, ip
   1702c:	ldr	r2, [sp, #36]	; 0x24
   17030:	add	r3, r9, r3
   17034:	sub	r2, r3, r2
   17038:	ldr	r0, [pc, #-2476]	; 16694 <__assert_fail@plt+0x4af0>
   1703c:	add	r2, r2, #380	; 0x17c
   17040:	add	r2, r2, #2
   17044:	mvn	lr, #0
   17048:	smull	r0, ip, r0, r2
   1704c:	add	ip, ip, r2
   17050:	asr	r0, r2, #31
   17054:	rsb	r0, r0, ip, asr #2
   17058:	rsb	r0, r0, r0, lsl #3
   1705c:	sub	r2, r2, r0
   17060:	sub	r3, r3, r2
   17064:	add	r3, r3, #3
   17068:	b	16450 <__assert_fail@plt+0x48ac>
   1706c:	mov	r9, r8
   17070:	b	16d7c <__assert_fail@plt+0x51d8>
   17074:	ldr	r2, [pc, #-2532]	; 16698 <__assert_fail@plt+0x4af4>
   17078:	sub	r2, r2, lr
   1707c:	cmp	r6, r2
   17080:	bge	16d90 <__assert_fail@plt+0x51ec>
   17084:	cmp	r5, #0
   17088:	rsb	r3, r3, #0
   1708c:	bne	164a4 <__assert_fail@plt+0x4900>
   17090:	ldr	r2, [sp, #1152]	; 0x480
   17094:	cmp	r2, #43	; 0x2b
   17098:	beq	16f60 <__assert_fail@plt+0x53bc>
   1709c:	mov	ip, #0
   170a0:	str	ip, [sp, #36]	; 0x24
   170a4:	ldr	r5, [sp, #1152]	; 0x480
   170a8:	mov	r2, #1
   170ac:	mov	lr, #2
   170b0:	b	164c0 <__assert_fail@plt+0x491c>
   170b4:	ldr	r2, [pc, #-2600]	; 16694 <__assert_fail@plt+0x4af0>
   170b8:	mov	lr, #2
   170bc:	smull	r0, r2, r2, r3
   170c0:	add	r0, r2, r3
   170c4:	asr	r2, r3, #31
   170c8:	rsb	r2, r2, r0, asr #2
   170cc:	add	r2, r2, #1
   170d0:	b	16198 <__assert_fail@plt+0x45f4>
   170d4:	ldr	r2, [pc, #-2628]	; 16698 <__assert_fail@plt+0x4af4>
   170d8:	add	r3, r6, #1888	; 0x760
   170dc:	sub	r2, r2, lr
   170e0:	cmp	r6, r2
   170e4:	movge	r0, #0
   170e8:	movlt	r0, #1
   170ec:	add	r3, r3, #12
   170f0:	cmp	r5, #0
   170f4:	str	r0, [sp, #36]	; 0x24
   170f8:	add	r3, r3, lr
   170fc:	bne	16eac <__assert_fail@plt+0x5308>
   17100:	ldr	r0, [sp, #1152]	; 0x480
   17104:	cmp	r6, r2
   17108:	movlt	r2, #0
   1710c:	movge	r2, #1
   17110:	cmp	r0, #43	; 0x2b
   17114:	movne	r5, r0
   17118:	movne	ip, #0
   1711c:	movne	lr, #4
   17120:	bne	164c0 <__assert_fail@plt+0x491c>
   17124:	mov	lr, #4
   17128:	ldr	r0, [pc, #-2708]	; 1669c <__assert_fail@plt+0x4af8>
   1712c:	b	16e8c <__assert_fail@plt+0x52e8>
   17130:	cmn	r8, #1
   17134:	beq	1578c <__assert_fail@plt+0x3be8>
   17138:	mov	r7, #0
   1713c:	b	16780 <__assert_fail@plt+0x4bdc>
   17140:	ldr	r3, [sp, #1168]	; 0x490
   17144:	mov	r9, #4
   17148:	str	r3, [sp, #16]
   1714c:	ldr	r3, [sp, #1164]	; 0x48c
   17150:	mov	r5, #43	; 0x2b
   17154:	str	r3, [sp, #12]
   17158:	ldr	r3, [sp, #1160]	; 0x488
   1715c:	mov	r0, r8
   17160:	str	r3, [sp, #8]
   17164:	stm	sp, {r5, r9}
   17168:	ldr	r3, [sp, #40]	; 0x28
   1716c:	ldr	r2, [sp, #32]
   17170:	ldr	r1, [pc, #-2776]	; 166a0 <__assert_fail@plt+0x4afc>
   17174:	mov	r6, r8
   17178:	bl	15670 <__assert_fail@plt+0x3acc>
   1717c:	ldr	r8, [pc, #-2788]	; 166a0 <__assert_fail@plt+0x4afc>
   17180:	b	16528 <__assert_fail@plt+0x4984>
   17184:	mov	r9, #32
   17188:	add	r5, r5, #1
   1718c:	mov	r1, sl
   17190:	mov	r0, r9
   17194:	bl	11a90 <fputc@plt>
   17198:	cmp	r6, r5
   1719c:	bhi	17188 <__assert_fail@plt+0x55e4>
   171a0:	b	16780 <__assert_fail@plt+0x4bdc>
   171a4:	cmp	ip, #0
   171a8:	bne	171c8 <__assert_fail@plt+0x5624>
   171ac:	cmp	r0, #0
   171b0:	bne	171f4 <__assert_fail@plt+0x5650>
   171b4:	ldr	r2, [sp, #36]	; 0x24
   171b8:	mov	ip, #1
   171bc:	eor	r2, r2, #1
   171c0:	mov	lr, #3
   171c4:	b	161b8 <__assert_fail@plt+0x4614>
   171c8:	mov	r2, #100	; 0x64
   171cc:	ldr	lr, [pc, #-2864]	; 166a4 <__assert_fail@plt+0x4b00>
   171d0:	mul	r0, r2, r0
   171d4:	ldr	r2, [sp, #36]	; 0x24
   171d8:	mla	r3, lr, r3, r0
   171dc:	eor	r2, r2, #1
   171e0:	add	r3, r3, ip
   171e4:	mov	r0, #20
   171e8:	mov	ip, #1
   171ec:	mov	lr, #9
   171f0:	b	161b8 <__assert_fail@plt+0x4614>
   171f4:	mov	ip, #100	; 0x64
   171f8:	ldr	r2, [sp, #36]	; 0x24
   171fc:	mla	r3, ip, r3, r0
   17200:	eor	r2, r2, #1
   17204:	mov	ip, #1
   17208:	mov	r0, #4
   1720c:	mov	lr, #6
   17210:	b	161b8 <__assert_fail@plt+0x4614>
   17214:	mov	ip, #100	; 0x64
   17218:	ldr	r2, [sp, #36]	; 0x24
   1721c:	mla	r3, ip, r3, r0
   17220:	eor	r2, r2, #1
   17224:	mov	ip, #1
   17228:	mov	r0, #0
   1722c:	mov	lr, #5
   17230:	b	161b8 <__assert_fail@plt+0x4614>
   17234:	push	{r4, r5, lr}
   17238:	sub	sp, sp, #36	; 0x24
   1723c:	add	lr, sp, #32
   17240:	ldr	r5, [sp, #48]	; 0x30
   17244:	mov	ip, #0
   17248:	mvn	r4, #0
   1724c:	str	r3, [sp, #12]
   17250:	strb	ip, [lr, #-1]!
   17254:	mov	r3, ip
   17258:	str	ip, [sp]
   1725c:	str	lr, [sp, #8]
   17260:	str	r5, [sp, #16]
   17264:	str	r4, [sp, #4]
   17268:	bl	15670 <__assert_fail@plt+0x3acc>
   1726c:	add	sp, sp, #36	; 0x24
   17270:	pop	{r4, r5, pc}
   17274:	push	{r4, r5, lr}
   17278:	sub	sp, sp, #12
   1727c:	mov	r5, r0
   17280:	bl	119b8 <__errno_location@plt>
   17284:	mov	r2, #0
   17288:	mov	r4, r0
   1728c:	ldr	r3, [r0]
   17290:	str	r2, [r4]
   17294:	mov	r0, r5
   17298:	str	r3, [sp]
   1729c:	str	r3, [sp, #4]
   172a0:	bl	11754 <free@plt>
   172a4:	ldr	r3, [r4]
   172a8:	add	r2, sp, #8
   172ac:	cmp	r3, #0
   172b0:	moveq	r3, #4
   172b4:	movne	r3, #0
   172b8:	add	r3, r2, r3
   172bc:	ldr	r3, [r3, #-8]
   172c0:	str	r3, [r4]
   172c4:	add	sp, sp, #12
   172c8:	pop	{r4, r5, pc}
   172cc:	push	{r4, lr}
   172d0:	mov	r1, #0
   172d4:	mov	r4, r0
   172d8:	ldr	r0, [pc, #56]	; 17318 <__assert_fail@plt+0x5774>
   172dc:	bl	118e0 <open64@plt>
   172e0:	cmp	r4, r0
   172e4:	moveq	r3, #1
   172e8:	beq	17310 <__assert_fail@plt+0x576c>
   172ec:	cmp	r0, #0
   172f0:	mov	r3, r0
   172f4:	movlt	r3, #0
   172f8:	blt	17310 <__assert_fail@plt+0x576c>
   172fc:	bl	11b80 <close@plt>
   17300:	bl	119b8 <__errno_location@plt>
   17304:	mov	r3, #0
   17308:	mov	r2, #9
   1730c:	str	r2, [r0]
   17310:	mov	r0, r3
   17314:	pop	{r4, pc}
   17318:	andeq	r0, r3, r0, lsl #22
   1731c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17320:	mov	r9, r0
   17324:	mov	r0, r2
   17328:	mov	r7, r2
   1732c:	mov	sl, r1
   17330:	bl	11a0c <fileno@plt>
   17334:	cmp	r0, #1
   17338:	beq	17468 <__assert_fail@plt+0x58c4>
   1733c:	cmp	r0, #2
   17340:	beq	17460 <__assert_fail@plt+0x58bc>
   17344:	cmp	r0, #0
   17348:	beq	1740c <__assert_fail@plt+0x5868>
   1734c:	mov	r1, #2
   17350:	mov	r0, r1
   17354:	bl	117e4 <dup2@plt>
   17358:	subs	r4, r0, #2
   1735c:	movne	r4, #1
   17360:	mov	r1, #1
   17364:	mov	r0, r1
   17368:	bl	117e4 <dup2@plt>
   1736c:	mov	r1, #0
   17370:	subs	r8, r0, #1
   17374:	mov	r0, r1
   17378:	movne	r8, #1
   1737c:	bl	117e4 <dup2@plt>
   17380:	subs	r6, r0, #0
   17384:	beq	173a4 <__assert_fail@plt+0x5800>
   17388:	mov	r0, #0
   1738c:	bl	172cc <__assert_fail@plt+0x5728>
   17390:	cmp	r0, #0
   17394:	mov	r6, r0
   17398:	mov	r5, r0
   1739c:	moveq	r6, #1
   173a0:	beq	173d8 <__assert_fail@plt+0x5834>
   173a4:	cmp	r8, #0
   173a8:	bne	1744c <__assert_fail@plt+0x58a8>
   173ac:	cmp	r4, #0
   173b0:	beq	173c4 <__assert_fail@plt+0x5820>
   173b4:	mov	r0, #2
   173b8:	bl	172cc <__assert_fail@plt+0x5728>
   173bc:	subs	r5, r0, #0
   173c0:	beq	17434 <__assert_fail@plt+0x5890>
   173c4:	mov	r2, r7
   173c8:	mov	r1, sl
   173cc:	mov	r0, r9
   173d0:	bl	1194c <freopen64@plt>
   173d4:	mov	r5, r0
   173d8:	bl	119b8 <__errno_location@plt>
   173dc:	cmp	r4, #0
   173e0:	mov	r7, r0
   173e4:	ldr	r4, [r0]
   173e8:	bne	17440 <__assert_fail@plt+0x589c>
   173ec:	cmp	r8, #0
   173f0:	bne	17428 <__assert_fail@plt+0x5884>
   173f4:	cmp	r6, #0
   173f8:	bne	1741c <__assert_fail@plt+0x5878>
   173fc:	cmp	r5, #0
   17400:	streq	r4, [r7]
   17404:	mov	r0, r5
   17408:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1740c:	mov	r4, r0
   17410:	mov	r8, r0
   17414:	mov	r6, r0
   17418:	b	173c4 <__assert_fail@plt+0x5820>
   1741c:	mov	r0, #0
   17420:	bl	11b80 <close@plt>
   17424:	b	173fc <__assert_fail@plt+0x5858>
   17428:	mov	r0, #1
   1742c:	bl	11b80 <close@plt>
   17430:	b	173f4 <__assert_fail@plt+0x5850>
   17434:	bl	119b8 <__errno_location@plt>
   17438:	ldr	r4, [r0]
   1743c:	mov	r7, r0
   17440:	mov	r0, #2
   17444:	bl	11b80 <close@plt>
   17448:	b	173ec <__assert_fail@plt+0x5848>
   1744c:	mov	r0, #1
   17450:	bl	172cc <__assert_fail@plt+0x5728>
   17454:	cmp	r0, #0
   17458:	bne	173ac <__assert_fail@plt+0x5808>
   1745c:	b	173d4 <__assert_fail@plt+0x5830>
   17460:	mov	r4, #0
   17464:	b	17360 <__assert_fail@plt+0x57bc>
   17468:	mov	r1, #0
   1746c:	mov	r0, r1
   17470:	bl	117e4 <dup2@plt>
   17474:	subs	r4, r0, #0
   17478:	moveq	r8, r4
   1747c:	moveq	r6, r4
   17480:	beq	173c4 <__assert_fail@plt+0x5820>
   17484:	mov	r4, #0
   17488:	mov	r8, r4
   1748c:	b	17388 <__assert_fail@plt+0x57e4>
   17490:	push	{r4, r5, r6, r7, r8, lr}
   17494:	sub	sp, sp, #8
   17498:	ldmib	r0, {ip, lr}
   1749c:	mov	r4, r0
   174a0:	ldr	r5, [sp, #32]
   174a4:	cmp	lr, ip
   174a8:	beq	174c0 <__assert_fail@plt+0x591c>
   174ac:	str	r5, [sp, #32]
   174b0:	mov	r0, r4
   174b4:	add	sp, sp, #8
   174b8:	pop	{r4, r5, r6, r7, r8, lr}
   174bc:	b	11a3c <fseeko64@plt>
   174c0:	ldr	lr, [r0, #20]
   174c4:	ldr	ip, [r0, #16]
   174c8:	cmp	lr, ip
   174cc:	bne	174ac <__assert_fail@plt+0x5908>
   174d0:	ldr	r8, [r0, #36]	; 0x24
   174d4:	cmp	r8, #0
   174d8:	bne	174ac <__assert_fail@plt+0x5908>
   174dc:	mov	r6, r2
   174e0:	mov	r7, r3
   174e4:	bl	11a0c <fileno@plt>
   174e8:	mov	r2, r6
   174ec:	mov	r3, r7
   174f0:	str	r5, [sp]
   174f4:	bl	11874 <lseek64@plt>
   174f8:	mvn	r3, #0
   174fc:	mvn	r2, #0
   17500:	cmp	r1, r3
   17504:	cmpeq	r0, r2
   17508:	beq	17528 <__assert_fail@plt+0x5984>
   1750c:	ldr	r3, [r4]
   17510:	strd	r0, [r4, #80]	; 0x50
   17514:	mov	r0, r8
   17518:	bic	r3, r3, #16
   1751c:	str	r3, [r4]
   17520:	add	sp, sp, #8
   17524:	pop	{r4, r5, r6, r7, r8, pc}
   17528:	mvn	r0, #0
   1752c:	b	17520 <__assert_fail@plt+0x597c>
   17530:	ldrd	r2, [r1, #8]
   17534:	push	{r4, r5}
   17538:	ldrd	r4, [r0, #8]
   1753c:	cmp	r5, r3
   17540:	cmpeq	r4, r2
   17544:	movne	r0, #0
   17548:	beq	17554 <__assert_fail@plt+0x59b0>
   1754c:	pop	{r4, r5}
   17550:	bx	lr
   17554:	ldrd	r4, [r0]
   17558:	ldrd	r2, [r1]
   1755c:	cmp	r5, r3
   17560:	cmpeq	r4, r2
   17564:	moveq	r0, #1
   17568:	movne	r0, #0
   1756c:	pop	{r4, r5}
   17570:	bx	lr
   17574:	push	{r4, lr}
   17578:	mov	r2, r1
   1757c:	mov	r3, #0
   17580:	ldrd	r0, [r0, #8]
   17584:	bl	2efbc <__assert_fail@plt+0x1d418>
   17588:	mov	r0, r2
   1758c:	pop	{r4, pc}
   17590:	push	{r4, lr}
   17594:	mov	r2, r1
   17598:	mov	r3, #0
   1759c:	ldrd	r0, [r0]
   175a0:	bl	2efbc <__assert_fail@plt+0x1d418>
   175a4:	mov	r0, r2
   175a8:	pop	{r4, pc}
   175ac:	push	{r4, r5}
   175b0:	ldrd	r2, [r1]
   175b4:	ldrd	r4, [r0]
   175b8:	cmp	r5, r3
   175bc:	cmpeq	r4, r2
   175c0:	moveq	r0, #1
   175c4:	movne	r0, #0
   175c8:	pop	{r4, r5}
   175cc:	bx	lr
   175d0:	ldr	r2, [r0]
   175d4:	ldr	r3, [r1]
   175d8:	ldrd	r0, [r2, #160]	; 0xa0
   175dc:	ldrd	r2, [r3, #160]	; 0xa0
   175e0:	cmp	r1, r3
   175e4:	cmpeq	r0, r2
   175e8:	movhi	r0, #1
   175ec:	movls	r0, #0
   175f0:	movcc	r3, #1
   175f4:	movcs	r3, #0
   175f8:	sub	r0, r0, r3
   175fc:	bx	lr
   17600:	ldr	r3, [r0, #40]	; 0x28
   17604:	push	{r4, r5, r6, r7, r8, lr}
   17608:	cmp	r3, r2
   1760c:	mov	r6, r0
   17610:	mov	r5, r2
   17614:	mov	r4, r1
   17618:	ldr	r7, [r0, #44]	; 0x2c
   1761c:	bcc	17694 <__assert_fail@plt+0x5af0>
   17620:	ldr	r0, [r0, #8]
   17624:	cmp	r4, #0
   17628:	movne	r2, r0
   1762c:	beq	17640 <__assert_fail@plt+0x5a9c>
   17630:	str	r4, [r2], #4
   17634:	ldr	r4, [r4, #8]
   17638:	cmp	r4, #0
   1763c:	bne	17630 <__assert_fail@plt+0x5a8c>
   17640:	mov	r3, r7
   17644:	mov	r2, #4
   17648:	mov	r1, r5
   1764c:	bl	11b08 <qsort@plt>
   17650:	ldr	lr, [r6, #8]
   17654:	subs	r3, r5, #1
   17658:	ldr	r0, [lr]
   1765c:	beq	176d8 <__assert_fail@plt+0x5b34>
   17660:	mov	r2, lr
   17664:	mov	ip, r0
   17668:	b	17670 <__assert_fail@plt+0x5acc>
   1766c:	ldr	ip, [r2, #4]!
   17670:	ldr	r1, [r2, #4]
   17674:	subs	r3, r3, #1
   17678:	str	r1, [ip, #8]
   1767c:	bne	1766c <__assert_fail@plt+0x5ac8>
   17680:	add	r5, lr, r5, lsl #2
   17684:	ldr	r2, [r5, #-4]
   17688:	mov	r3, #0
   1768c:	str	r3, [r2, #8]
   17690:	pop	{r4, r5, r6, r7, r8, pc}
   17694:	add	r1, r2, #40	; 0x28
   17698:	cmn	r1, #-1073741823	; 0xc0000001
   1769c:	str	r1, [r0, #40]	; 0x28
   176a0:	bhi	176bc <__assert_fail@plt+0x5b18>
   176a4:	lsl	r1, r1, #2
   176a8:	ldr	r0, [r0, #8]
   176ac:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   176b0:	cmp	r0, #0
   176b4:	strne	r0, [r6, #8]
   176b8:	bne	17624 <__assert_fail@plt+0x5a80>
   176bc:	ldr	r0, [r6, #8]
   176c0:	bl	17274 <__assert_fail@plt+0x56d0>
   176c4:	mov	r3, #0
   176c8:	mov	r0, r4
   176cc:	str	r3, [r6, #8]
   176d0:	str	r3, [r6, #40]	; 0x28
   176d4:	pop	{r4, r5, r6, r7, r8, pc}
   176d8:	mov	r2, r0
   176dc:	b	17688 <__assert_fail@plt+0x5ae4>
   176e0:	add	r3, r2, #176	; 0xb0
   176e4:	push	{r4, r5, r6, r7, r8, lr}
   176e8:	mov	r6, r0
   176ec:	bic	r0, r3, #7
   176f0:	mov	r5, r2
   176f4:	mov	r7, r1
   176f8:	bl	2d82c <__assert_fail@plt+0x1bc88>
   176fc:	subs	r4, r0, #0
   17700:	beq	1774c <__assert_fail@plt+0x5ba8>
   17704:	mov	r1, r7
   17708:	mov	r2, r5
   1770c:	add	r0, r4, #168	; 0xa8
   17710:	bl	11784 <memcpy@plt>
   17714:	add	r0, r4, r5
   17718:	ldr	r1, [r6, #24]
   1771c:	mov	r3, #0
   17720:	mov	r2, #3
   17724:	strb	r3, [r0, #168]	; 0xa8
   17728:	str	r3, [r4, #32]
   1772c:	str	r3, [r4, #12]
   17730:	strh	r3, [r4, #58]	; 0x3a
   17734:	str	r3, [r4, #16]
   17738:	str	r3, [r4, #20]
   1773c:	str	r5, [r4, #52]	; 0x34
   17740:	str	r6, [r4, #44]	; 0x2c
   17744:	str	r1, [r4, #28]
   17748:	strh	r2, [r4, #60]	; 0x3c
   1774c:	mov	r0, r4
   17750:	pop	{r4, r5, r6, r7, r8, pc}
   17754:	push	{r4, r5, r6, lr}
   17758:	subs	r4, r0, #0
   1775c:	popeq	{r4, r5, r6, pc}
   17760:	ldr	r3, [r4, #12]
   17764:	ldr	r5, [r4, #8]
   17768:	subs	r0, r3, #0
   1776c:	beq	17774 <__assert_fail@plt+0x5bd0>
   17770:	bl	11b98 <closedir@plt>
   17774:	mov	r0, r4
   17778:	bl	17274 <__assert_fail@plt+0x56d0>
   1777c:	subs	r4, r5, #0
   17780:	bne	17760 <__assert_fail@plt+0x5bbc>
   17784:	pop	{r4, r5, r6, pc}
   17788:	push	{r4, lr}
   1778c:	mov	r4, r0
   17790:	b	177a0 <__assert_fail@plt+0x5bfc>
   17794:	bl	1b280 <__assert_fail@plt+0x96dc>
   17798:	cmp	r0, #0
   1779c:	bge	177b8 <__assert_fail@plt+0x5c14>
   177a0:	mov	r0, r4
   177a4:	bl	1b234 <__assert_fail@plt+0x9690>
   177a8:	cmp	r0, #0
   177ac:	mov	r0, r4
   177b0:	beq	17794 <__assert_fail@plt+0x5bf0>
   177b4:	pop	{r4, pc}
   177b8:	bl	11b80 <close@plt>
   177bc:	b	177a0 <__assert_fail@plt+0x5bfc>
   177c0:	push	{r4, r5, r6, r7, lr}
   177c4:	sub	sp, sp, #100	; 0x64
   177c8:	ldr	r4, [r0, #44]	; 0x2c
   177cc:	ldr	r3, [r4, #48]	; 0x30
   177d0:	tst	r3, #512	; 0x200
   177d4:	beq	17848 <__assert_fail@plt+0x5ca4>
   177d8:	ldr	r6, [r4, #52]	; 0x34
   177dc:	mov	r7, r1
   177e0:	cmp	r6, #0
   177e4:	mov	r5, r0
   177e8:	beq	17814 <__assert_fail@plt+0x5c70>
   177ec:	ldrd	r2, [r5, #64]	; 0x40
   177f0:	add	r1, sp, #96	; 0x60
   177f4:	mov	r0, r6
   177f8:	strd	r2, [r1, #-88]!	; 0xffffffa8
   177fc:	bl	19c30 <__assert_fail@plt+0x808c>
   17800:	cmp	r0, #0
   17804:	beq	17840 <__assert_fail@plt+0x5c9c>
   17808:	ldr	r0, [r0, #8]
   1780c:	add	sp, sp, #100	; 0x64
   17810:	pop	{r4, r5, r6, r7, pc}
   17814:	ldr	r3, [pc, #168]	; 178c4 <__assert_fail@plt+0x5d20>
   17818:	mov	r1, r6
   1781c:	str	r3, [sp]
   17820:	ldr	r2, [pc, #160]	; 178c8 <__assert_fail@plt+0x5d24>
   17824:	ldr	r3, [pc, #160]	; 178cc <__assert_fail@plt+0x5d28>
   17828:	mov	r0, #13
   1782c:	bl	19ed0 <__assert_fail@plt+0x832c>
   17830:	cmp	r0, #0
   17834:	mov	r6, r0
   17838:	str	r0, [r4, #52]	; 0x34
   1783c:	bne	177ec <__assert_fail@plt+0x5c48>
   17840:	cmp	r7, #0
   17844:	bge	17854 <__assert_fail@plt+0x5cb0>
   17848:	mov	r0, #0
   1784c:	add	sp, sp, #100	; 0x64
   17850:	pop	{r4, r5, r6, r7, pc}
   17854:	mov	r0, r7
   17858:	add	r1, sp, #8
   1785c:	bl	116a0 <fstatfs64@plt>
   17860:	cmp	r0, #0
   17864:	bne	17848 <__assert_fail@plt+0x5ca4>
   17868:	cmp	r6, #0
   1786c:	beq	178b8 <__assert_fail@plt+0x5d14>
   17870:	mov	r0, #16
   17874:	bl	2d82c <__assert_fail@plt+0x1bc88>
   17878:	subs	r4, r0, #0
   1787c:	beq	178b8 <__assert_fail@plt+0x5d14>
   17880:	ldrd	r2, [r5, #64]	; 0x40
   17884:	ldr	r1, [sp, #8]
   17888:	mov	r0, r6
   1788c:	str	r1, [r4, #8]
   17890:	strd	r2, [r4]
   17894:	mov	r1, r4
   17898:	bl	1a4c4 <__assert_fail@plt+0x8920>
   1789c:	cmp	r0, #0
   178a0:	beq	178b0 <__assert_fail@plt+0x5d0c>
   178a4:	cmp	r4, r0
   178a8:	beq	178b8 <__assert_fail@plt+0x5d14>
   178ac:	bl	11b68 <abort@plt>
   178b0:	mov	r0, r4
   178b4:	bl	17274 <__assert_fail@plt+0x56d0>
   178b8:	ldr	r0, [sp, #8]
   178bc:	add	sp, sp, #100	; 0x64
   178c0:	pop	{r4, r5, r6, r7, pc}
   178c4:	andeq	r7, r1, r4, ror r2
   178c8:	muleq	r1, r0, r5
   178cc:	andeq	r7, r1, ip, lsr #11
   178d0:	push	{r4, r5, r6, lr}
   178d4:	mov	r5, r1
   178d8:	ldr	r1, [r0, #32]
   178dc:	cmn	r1, #100	; 0x64
   178e0:	sub	r3, r1, r5
   178e4:	clz	r3, r3
   178e8:	lsr	r3, r3, #5
   178ec:	moveq	r3, #0
   178f0:	cmp	r3, #0
   178f4:	bne	1794c <__assert_fail@plt+0x5da8>
   178f8:	cmp	r2, #0
   178fc:	mov	r4, r0
   17900:	bne	17934 <__assert_fail@plt+0x5d90>
   17904:	ldr	r3, [r0, #48]	; 0x30
   17908:	lsr	r3, r3, #2
   1790c:	eor	r3, r3, #1
   17910:	cmp	r1, #0
   17914:	movlt	r3, #0
   17918:	andge	r3, r3, #1
   1791c:	cmp	r3, #0
   17920:	beq	1792c <__assert_fail@plt+0x5d88>
   17924:	mov	r0, r1
   17928:	bl	11b80 <close@plt>
   1792c:	str	r5, [r4, #32]
   17930:	pop	{r4, r5, r6, pc}
   17934:	add	r0, r0, #60	; 0x3c
   17938:	bl	1b23c <__assert_fail@plt+0x9698>
   1793c:	cmp	r0, #0
   17940:	bge	17928 <__assert_fail@plt+0x5d84>
   17944:	str	r5, [r4, #32]
   17948:	pop	{r4, r5, r6, pc}
   1794c:	bl	11b68 <abort@plt>
   17950:	ldr	r3, [r0, #48]	; 0x30
   17954:	push	{r4, r5, r6, lr}
   17958:	ands	r5, r3, #4
   1795c:	mov	r4, r0
   17960:	movne	r5, #0
   17964:	bne	17980 <__assert_fail@plt+0x5ddc>
   17968:	tst	r3, #512	; 0x200
   1796c:	bne	17990 <__assert_fail@plt+0x5dec>
   17970:	ldr	r0, [r0, #28]
   17974:	bl	11ae4 <fchdir@plt>
   17978:	adds	r5, r0, #0
   1797c:	movne	r5, #1
   17980:	add	r0, r4, #60	; 0x3c
   17984:	bl	17788 <__assert_fail@plt+0x5be4>
   17988:	mov	r0, r5
   1798c:	pop	{r4, r5, r6, pc}
   17990:	mov	r2, #1
   17994:	mvn	r1, #99	; 0x63
   17998:	bl	178d0 <__assert_fail@plt+0x5d2c>
   1799c:	b	17980 <__assert_fail@plt+0x5ddc>
   179a0:	push	{r4, r5, r6, lr}
   179a4:	mov	r4, r2
   179a8:	ldr	r2, [r2, #48]	; 0x30
   179ac:	sub	sp, sp, #8
   179b0:	cmp	r2, #0
   179b4:	add	r5, r4, #64	; 0x40
   179b8:	bne	17a10 <__assert_fail@plt+0x5e6c>
   179bc:	tst	r1, #1
   179c0:	beq	17a10 <__assert_fail@plt+0x5e6c>
   179c4:	mov	r2, r5
   179c8:	ldr	r1, [r4, #24]
   179cc:	mov	r0, #3
   179d0:	bl	11b38 <__xstat64@plt>
   179d4:	cmp	r0, #0
   179d8:	beq	17a4c <__assert_fail@plt+0x5ea8>
   179dc:	bl	119b8 <__errno_location@plt>
   179e0:	ldr	r3, [r0]
   179e4:	mov	r6, r0
   179e8:	cmp	r3, #2
   179ec:	beq	17ac4 <__assert_fail@plt+0x5f20>
   179f0:	str	r3, [r4, #32]
   179f4:	mov	r0, r5
   179f8:	mov	r2, #104	; 0x68
   179fc:	mov	r1, #0
   17a00:	bl	119e8 <memset@plt>
   17a04:	mov	r0, #10
   17a08:	add	sp, sp, #8
   17a0c:	pop	{r4, r5, r6, pc}
   17a10:	lsl	r1, r1, #30
   17a14:	orrs	r3, r3, r1, lsr #31
   17a18:	bne	179c4 <__assert_fail@plt+0x5e20>
   17a1c:	mov	r3, #256	; 0x100
   17a20:	ldr	r2, [r4, #24]
   17a24:	mov	r1, r0
   17a28:	str	r3, [sp]
   17a2c:	mov	r0, #3
   17a30:	mov	r3, r5
   17a34:	bl	11820 <__fxstatat64@plt>
   17a38:	cmp	r0, #0
   17a3c:	beq	17a4c <__assert_fail@plt+0x5ea8>
   17a40:	bl	119b8 <__errno_location@plt>
   17a44:	ldr	r3, [r0]
   17a48:	b	179f0 <__assert_fail@plt+0x5e4c>
   17a4c:	ldr	r0, [r4, #80]	; 0x50
   17a50:	and	r0, r0, #61440	; 0xf000
   17a54:	cmp	r0, #16384	; 0x4000
   17a58:	beq	17a7c <__assert_fail@plt+0x5ed8>
   17a5c:	cmp	r0, #40960	; 0xa000
   17a60:	moveq	r0, #12
   17a64:	beq	17a08 <__assert_fail@plt+0x5e64>
   17a68:	cmp	r0, #32768	; 0x8000
   17a6c:	movne	r0, #3
   17a70:	moveq	r0, #8
   17a74:	add	sp, sp, #8
   17a78:	pop	{r4, r5, r6, pc}
   17a7c:	ldrb	r3, [r4, #168]	; 0xa8
   17a80:	cmp	r3, #46	; 0x2e
   17a84:	beq	17a90 <__assert_fail@plt+0x5eec>
   17a88:	mov	r0, #1
   17a8c:	b	17a08 <__assert_fail@plt+0x5e64>
   17a90:	ldrb	r3, [r4, #169]	; 0xa9
   17a94:	cmp	r3, #0
   17a98:	beq	17ab0 <__assert_fail@plt+0x5f0c>
   17a9c:	ldr	r3, [r4, #168]	; 0xa8
   17aa0:	bic	r3, r3, #-16777216	; 0xff000000
   17aa4:	bic	r3, r3, #255	; 0xff
   17aa8:	cmp	r3, #11776	; 0x2e00
   17aac:	bne	17a88 <__assert_fail@plt+0x5ee4>
   17ab0:	ldr	r0, [r4, #48]	; 0x30
   17ab4:	cmp	r0, #0
   17ab8:	movne	r0, #5
   17abc:	moveq	r0, #1
   17ac0:	b	17a08 <__assert_fail@plt+0x5e64>
   17ac4:	mov	r2, r5
   17ac8:	ldr	r1, [r4, #24]
   17acc:	mov	r0, #3
   17ad0:	bl	11b8c <__lxstat64@plt>
   17ad4:	cmp	r0, #0
   17ad8:	streq	r0, [r6]
   17adc:	moveq	r0, #13
   17ae0:	beq	17a08 <__assert_fail@plt+0x5e64>
   17ae4:	ldr	r3, [r6]
   17ae8:	b	179f0 <__assert_fail@plt+0x5e4c>
   17aec:	push	{r4, r5, r6, lr}
   17af0:	mov	r5, r0
   17af4:	ldr	r0, [r1]
   17af8:	add	r3, r0, #256	; 0x100
   17afc:	add	r2, r3, r2
   17b00:	cmp	r0, r2
   17b04:	bhi	17b30 <__assert_fail@plt+0x5f8c>
   17b08:	str	r2, [r1]
   17b0c:	ldr	r0, [r5]
   17b10:	mov	r1, r2
   17b14:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   17b18:	subs	r4, r0, #0
   17b1c:	movne	r3, #1
   17b20:	strne	r4, [r5]
   17b24:	beq	17b58 <__assert_fail@plt+0x5fb4>
   17b28:	mov	r0, r3
   17b2c:	pop	{r4, r5, r6, pc}
   17b30:	ldr	r0, [r5]
   17b34:	mov	r4, #0
   17b38:	bl	17274 <__assert_fail@plt+0x56d0>
   17b3c:	str	r4, [r5]
   17b40:	bl	119b8 <__errno_location@plt>
   17b44:	mov	r2, #36	; 0x24
   17b48:	mov	r3, r4
   17b4c:	str	r2, [r0]
   17b50:	mov	r0, r3
   17b54:	pop	{r4, r5, r6, pc}
   17b58:	ldr	r0, [r5]
   17b5c:	bl	17274 <__assert_fail@plt+0x56d0>
   17b60:	str	r4, [r5]
   17b64:	mov	r3, r4
   17b68:	b	17b28 <__assert_fail@plt+0x5f84>
   17b6c:	ldr	r3, [pc, #104]	; 17bdc <__assert_fail@plt+0x6038>
   17b70:	push	{r4, lr}
   17b74:	and	r3, r3, r0
   17b78:	cmp	r3, #0
   17b7c:	sub	sp, sp, #8
   17b80:	mov	r4, r1
   17b84:	beq	17bb8 <__assert_fail@plt+0x6014>
   17b88:	ldr	r2, [pc, #80]	; 17be0 <__assert_fail@plt+0x603c>
   17b8c:	ldr	r3, [pc, #80]	; 17be4 <__assert_fail@plt+0x6040>
   17b90:	str	r2, [sp]
   17b94:	mov	r1, #0
   17b98:	ldr	r2, [pc, #72]	; 17be8 <__assert_fail@plt+0x6044>
   17b9c:	mov	r0, #31
   17ba0:	bl	19ed0 <__assert_fail@plt+0x832c>
   17ba4:	str	r0, [r4]
   17ba8:	adds	r0, r0, #0
   17bac:	movne	r0, #1
   17bb0:	add	sp, sp, #8
   17bb4:	pop	{r4, pc}
   17bb8:	mov	r0, #32
   17bbc:	bl	2d82c <__assert_fail@plt+0x1bc88>
   17bc0:	cmp	r0, #0
   17bc4:	str	r0, [r4]
   17bc8:	beq	17bb0 <__assert_fail@plt+0x600c>
   17bcc:	bl	2e1a0 <__assert_fail@plt+0x1c5fc>
   17bd0:	mov	r0, #1
   17bd4:	add	sp, sp, #8
   17bd8:	pop	{r4, pc}
   17bdc:	andeq	r0, r0, r2, lsl #2
   17be0:	andeq	r7, r1, r4, ror r2
   17be4:	andeq	r7, r1, r0, lsr r5
   17be8:	andeq	r7, r1, r4, ror r5
   17bec:	ldr	ip, [pc, #44]	; 17c20 <__assert_fail@plt+0x607c>
   17bf0:	tst	r1, #16
   17bf4:	ldr	r3, [pc, #40]	; 17c24 <__assert_fail@plt+0x6080>
   17bf8:	moveq	r3, ip
   17bfc:	tst	r1, #512	; 0x200
   17c00:	mov	ip, r2
   17c04:	bne	17c14 <__assert_fail@plt+0x6070>
   17c08:	mov	r1, r3
   17c0c:	mov	r0, r2
   17c10:	b	2e52c <__assert_fail@plt+0x1c988>
   17c14:	mov	r2, r3
   17c18:	mov	r1, ip
   17c1c:	b	1c644 <__assert_fail@plt+0xaaa0>
   17c20:	andeq	r4, r8, r0, lsl #18
   17c24:	andeq	ip, r8, r0, lsl #18
   17c28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c2c:	subs	sl, r3, #0
   17c30:	sub	sp, sp, #104	; 0x68
   17c34:	mov	r5, r0
   17c38:	mov	r6, r1
   17c3c:	mov	r4, r2
   17c40:	ldr	r9, [r0, #48]	; 0x30
   17c44:	beq	17c98 <__assert_fail@plt+0x60f4>
   17c48:	ldr	r1, [pc, #432]	; 17e00 <__assert_fail@plt+0x625c>
   17c4c:	mov	r0, sl
   17c50:	bl	1170c <strcmp@plt>
   17c54:	cmp	r0, #0
   17c58:	bne	17c98 <__assert_fail@plt+0x60f4>
   17c5c:	tst	r9, #4
   17c60:	bne	17ca0 <__assert_fail@plt+0x60fc>
   17c64:	cmp	r4, #0
   17c68:	bge	17dec <__assert_fail@plt+0x6248>
   17c6c:	tst	r9, #512	; 0x200
   17c70:	bne	17d8c <__assert_fail@plt+0x61e8>
   17c74:	mov	r8, #1
   17c78:	mov	r1, r9
   17c7c:	mov	r2, sl
   17c80:	ldr	r0, [r5, #32]
   17c84:	bl	17bec <__assert_fail@plt+0x6048>
   17c88:	subs	r7, r0, #0
   17c8c:	blt	17de4 <__assert_fail@plt+0x6240>
   17c90:	ldr	r9, [r5, #48]	; 0x30
   17c94:	b	17cd4 <__assert_fail@plt+0x6130>
   17c98:	ands	r8, r9, #4
   17c9c:	beq	17cc8 <__assert_fail@plt+0x6124>
   17ca0:	mvn	r3, r4
   17ca4:	lsr	r3, r3, #31
   17ca8:	ands	r9, r3, r9, lsr #9
   17cac:	beq	17cbc <__assert_fail@plt+0x6118>
   17cb0:	mov	r0, r4
   17cb4:	bl	11b80 <close@plt>
   17cb8:	mov	r9, #0
   17cbc:	mov	r0, r9
   17cc0:	add	sp, sp, #104	; 0x68
   17cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17cc8:	cmp	r4, #0
   17ccc:	movge	r7, r4
   17cd0:	blt	17c78 <__assert_fail@plt+0x60d4>
   17cd4:	tst	r9, #2
   17cd8:	bne	17cf8 <__assert_fail@plt+0x6154>
   17cdc:	cmp	sl, #0
   17ce0:	beq	17d50 <__assert_fail@plt+0x61ac>
   17ce4:	mov	r0, sl
   17ce8:	ldr	r1, [pc, #272]	; 17e00 <__assert_fail@plt+0x625c>
   17cec:	bl	1170c <strcmp@plt>
   17cf0:	cmp	r0, #0
   17cf4:	bne	17d50 <__assert_fail@plt+0x61ac>
   17cf8:	mov	r2, sp
   17cfc:	mov	r1, r7
   17d00:	mov	r0, #3
   17d04:	bl	11850 <__fxstat64@plt>
   17d08:	cmp	r0, #0
   17d0c:	beq	17d68 <__assert_fail@plt+0x61c4>
   17d10:	mvn	r9, #0
   17d14:	cmp	r4, #0
   17d18:	bge	17cbc <__assert_fail@plt+0x6118>
   17d1c:	bl	119b8 <__errno_location@plt>
   17d20:	mov	r4, r0
   17d24:	mov	r0, r7
   17d28:	ldr	r5, [r4]
   17d2c:	bl	11b80 <close@plt>
   17d30:	str	r5, [r4]
   17d34:	b	17cbc <__assert_fail@plt+0x6118>
   17d38:	ldrd	r0, [r6, #160]	; 0xa0
   17d3c:	ldrd	r2, [sp, #96]	; 0x60
   17d40:	cmp	r1, r3
   17d44:	cmpeq	r0, r2
   17d48:	bne	17d7c <__assert_fail@plt+0x61d8>
   17d4c:	ldr	r9, [r5, #48]	; 0x30
   17d50:	tst	r9, #512	; 0x200
   17d54:	bne	17dc8 <__assert_fail@plt+0x6224>
   17d58:	mov	r0, r7
   17d5c:	bl	11ae4 <fchdir@plt>
   17d60:	mov	r9, r0
   17d64:	b	17d14 <__assert_fail@plt+0x6170>
   17d68:	ldrd	r0, [r6, #64]	; 0x40
   17d6c:	ldrd	r2, [sp]
   17d70:	cmp	r1, r3
   17d74:	cmpeq	r0, r2
   17d78:	beq	17d38 <__assert_fail@plt+0x6194>
   17d7c:	bl	119b8 <__errno_location@plt>
   17d80:	mov	r3, #2
   17d84:	str	r3, [r0]
   17d88:	b	17d10 <__assert_fail@plt+0x616c>
   17d8c:	add	r7, r5, #60	; 0x3c
   17d90:	mov	r0, r7
   17d94:	bl	1b234 <__assert_fail@plt+0x9690>
   17d98:	subs	r8, r0, #0
   17d9c:	bne	17c78 <__assert_fail@plt+0x60d4>
   17da0:	mov	r0, r7
   17da4:	bl	1b280 <__assert_fail@plt+0x96dc>
   17da8:	ldr	r9, [r5, #48]	; 0x30
   17dac:	subs	r7, r0, #0
   17db0:	blt	17c74 <__assert_fail@plt+0x60d0>
   17db4:	tst	r9, #2
   17db8:	mov	r4, r7
   17dbc:	mov	r8, #1
   17dc0:	beq	17d50 <__assert_fail@plt+0x61ac>
   17dc4:	b	17cf8 <__assert_fail@plt+0x6154>
   17dc8:	eor	r2, r8, #1
   17dcc:	mov	r1, r7
   17dd0:	uxtb	r2, r2
   17dd4:	mov	r0, r5
   17dd8:	bl	178d0 <__assert_fail@plt+0x5d2c>
   17ddc:	mov	r9, #0
   17de0:	b	17cbc <__assert_fail@plt+0x6118>
   17de4:	mvn	r9, #0
   17de8:	b	17cbc <__assert_fail@plt+0x6118>
   17dec:	tst	r9, #2
   17df0:	mov	r7, r4
   17df4:	mov	r8, #1
   17df8:	beq	17ce4 <__assert_fail@plt+0x6140>
   17dfc:	b	17cf8 <__assert_fail@plt+0x6154>
   17e00:	andeq	r0, r3, ip, lsr fp
   17e04:	ldr	r3, [pc, #164]	; 17eb0 <__assert_fail@plt+0x630c>
   17e08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e0c:	and	r3, r3, r0
   17e10:	cmp	r3, #0
   17e14:	mov	sl, r1
   17e18:	mov	r8, r2
   17e1c:	beq	17e84 <__assert_fail@plt+0x62e0>
   17e20:	mov	r0, #24
   17e24:	bl	2d82c <__assert_fail@plt+0x1bc88>
   17e28:	subs	r9, r0, #0
   17e2c:	beq	17ea8 <__assert_fail@plt+0x6304>
   17e30:	ldrd	r4, [r8, #160]	; 0xa0
   17e34:	ldrd	r6, [r8, #64]	; 0x40
   17e38:	str	r8, [r9, #16]
   17e3c:	strd	r4, [r9, #8]
   17e40:	ldr	r0, [sl]
   17e44:	strd	r6, [r9]
   17e48:	mov	r1, r9
   17e4c:	bl	1a4c4 <__assert_fail@plt+0x8920>
   17e50:	cmp	r9, r0
   17e54:	mov	r4, r0
   17e58:	beq	17e7c <__assert_fail@plt+0x62d8>
   17e5c:	mov	r0, r9
   17e60:	bl	17274 <__assert_fail@plt+0x56d0>
   17e64:	cmp	r4, #0
   17e68:	beq	17ea8 <__assert_fail@plt+0x6304>
   17e6c:	ldr	r2, [r4, #16]
   17e70:	mov	r3, #2
   17e74:	str	r2, [r8]
   17e78:	strh	r3, [r8, #56]	; 0x38
   17e7c:	mov	r0, #1
   17e80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e84:	ldr	r0, [r1]
   17e88:	add	r1, r2, #64	; 0x40
   17e8c:	bl	2e1c4 <__assert_fail@plt+0x1c620>
   17e90:	cmp	r0, #0
   17e94:	beq	17e7c <__assert_fail@plt+0x62d8>
   17e98:	mov	r3, #2
   17e9c:	str	r8, [r8]
   17ea0:	strh	r3, [r8, #56]	; 0x38
   17ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ea8:	mov	r0, #0
   17eac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17eb0:	andeq	r0, r0, r2, lsl #2
   17eb4:	ldr	r3, [pc, #172]	; 17f68 <__assert_fail@plt+0x63c4>
   17eb8:	push	{r4, r5, lr}
   17ebc:	and	r3, r3, r0
   17ec0:	cmp	r3, #0
   17ec4:	sub	sp, sp, #28
   17ec8:	bne	17f10 <__assert_fail@plt+0x636c>
   17ecc:	ldr	r3, [r2, #4]
   17ed0:	cmp	r3, #0
   17ed4:	beq	17f08 <__assert_fail@plt+0x6364>
   17ed8:	ldr	r0, [r3, #48]	; 0x30
   17edc:	cmp	r0, #0
   17ee0:	blt	17f08 <__assert_fail@plt+0x6364>
   17ee4:	ldr	ip, [r1]
   17ee8:	ldrd	r0, [ip, #16]
   17eec:	orrs	r1, r0, r1
   17ef0:	beq	17f64 <__assert_fail@plt+0x63c0>
   17ef4:	ldrd	r4, [ip]
   17ef8:	ldrd	r0, [r2, #160]	; 0xa0
   17efc:	cmp	r5, r1
   17f00:	cmpeq	r4, r0
   17f04:	beq	17f40 <__assert_fail@plt+0x639c>
   17f08:	add	sp, sp, #28
   17f0c:	pop	{r4, r5, pc}
   17f10:	ldrd	r4, [r2, #64]	; 0x40
   17f14:	ldrd	r2, [r2, #160]	; 0xa0
   17f18:	ldr	r0, [r1]
   17f1c:	mov	r1, sp
   17f20:	strd	r4, [sp]
   17f24:	strd	r2, [sp, #8]
   17f28:	bl	1a4fc <__assert_fail@plt+0x8958>
   17f2c:	cmp	r0, #0
   17f30:	beq	17f64 <__assert_fail@plt+0x63c0>
   17f34:	bl	17274 <__assert_fail@plt+0x56d0>
   17f38:	add	sp, sp, #28
   17f3c:	pop	{r4, r5, pc}
   17f40:	ldrd	r0, [ip, #8]
   17f44:	ldrd	r4, [r2, #64]	; 0x40
   17f48:	cmp	r1, r5
   17f4c:	cmpeq	r0, r4
   17f50:	ldrdeq	r0, [r3, #64]	; 0x40
   17f54:	ldrdeq	r2, [r3, #160]	; 0xa0
   17f58:	strdeq	r0, [ip, #8]
   17f5c:	strdeq	r2, [ip]
   17f60:	b	17f08 <__assert_fail@plt+0x6364>
   17f64:	bl	11b68 <abort@plt>
   17f68:	andeq	r0, r0, r2, lsl #2
   17f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f70:	sub	sp, sp, #68	; 0x44
   17f74:	ldr	sl, [r0]
   17f78:	mov	r5, r0
   17f7c:	str	r1, [sp, #40]	; 0x28
   17f80:	ldr	r3, [sl, #12]
   17f84:	cmp	r3, #0
   17f88:	str	r3, [sp, #44]	; 0x2c
   17f8c:	beq	18350 <__assert_fail@plt+0x67ac>
   17f90:	mov	r0, r3
   17f94:	bl	11ad8 <dirfd@plt>
   17f98:	cmp	r0, #0
   17f9c:	str	r0, [sp, #60]	; 0x3c
   17fa0:	blt	1872c <__assert_fail@plt+0x6b88>
   17fa4:	ldr	r3, [r5, #44]	; 0x2c
   17fa8:	cmp	r3, #0
   17fac:	beq	188c8 <__assert_fail@plt+0x6d24>
   17fb0:	mvn	r3, #0
   17fb4:	str	r3, [sp, #20]
   17fb8:	ldr	r0, [r5, #48]	; 0x30
   17fbc:	mov	r3, #1
   17fc0:	str	r3, [sp, #52]	; 0x34
   17fc4:	ldr	r3, [sl, #40]	; 0x28
   17fc8:	ldr	r2, [sl, #28]
   17fcc:	mov	r1, r3
   17fd0:	sub	r3, r3, #1
   17fd4:	str	sl, [sp, #12]
   17fd8:	ldrb	r2, [r2, r3]
   17fdc:	cmp	r2, #47	; 0x2f
   17fe0:	moveq	r1, r3
   17fe4:	ands	r0, r0, #4
   17fe8:	mov	r2, r1
   17fec:	ldrne	r3, [r5, #24]
   17ff0:	movne	r0, r2
   17ff4:	str	r1, [sp, #32]
   17ff8:	addne	r2, r3, r2
   17ffc:	movne	r1, #47	; 0x2f
   18000:	strbne	r1, [r3, r0]
   18004:	addne	r3, r2, #1
   18008:	ldr	r2, [sp, #32]
   1800c:	strne	r3, [sp, #28]
   18010:	add	r2, r2, #1
   18014:	ldr	r3, [sl, #48]	; 0x30
   18018:	ldr	fp, [r5, #36]	; 0x24
   1801c:	mov	r1, r2
   18020:	str	r2, [sp, #8]
   18024:	sub	r1, fp, r1
   18028:	mov	r2, #0
   1802c:	add	r3, r3, #1
   18030:	streq	r0, [sp, #28]
   18034:	str	r2, [sp, #48]	; 0x30
   18038:	str	r1, [sp, #16]
   1803c:	str	r3, [sp, #24]
   18040:	str	r2, [sp, #36]	; 0x24
   18044:	mov	r7, r2
   18048:	str	r2, [sp, #4]
   1804c:	mov	r8, r2
   18050:	mov	sl, r2
   18054:	b	180d4 <__assert_fail@plt+0x6530>
   18058:	tst	r3, #251	; 0xfb
   1805c:	beq	181a8 <__assert_fail@plt+0x6604>
   18060:	lsr	r2, r2, #4
   18064:	cmp	r3, #10
   18068:	orrne	r2, r2, #1
   1806c:	tst	r2, #1
   18070:	beq	18478 <__assert_fail@plt+0x68d4>
   18074:	sub	r3, r3, #1
   18078:	mov	r2, #11
   1807c:	cmp	r3, #11
   18080:	strh	r2, [r4, #56]	; 0x38
   18084:	bhi	188b8 <__assert_fail@plt+0x6d14>
   18088:	ldr	r2, [pc, #2128]	; 188e0 <__assert_fail@plt+0x6d3c>
   1808c:	ldr	r1, [r2, r3, lsl #2]
   18090:	mov	r2, #1
   18094:	mov	r3, #0
   18098:	str	r1, [r4, #80]	; 0x50
   1809c:	strd	r2, [r4, #112]	; 0x70
   180a0:	ldr	r3, [sp, #4]
   180a4:	str	r8, [r4, #8]
   180a8:	cmp	r3, #0
   180ac:	ldr	r3, [pc, #2096]	; 188e4 <__assert_fail@plt+0x6d40>
   180b0:	strne	r4, [sl, #8]
   180b4:	streq	r4, [sp, #4]
   180b8:	cmp	r7, r3
   180bc:	beq	182c0 <__assert_fail@plt+0x671c>
   180c0:	ldr	r3, [sp, #20]
   180c4:	add	r7, r7, #1
   180c8:	cmp	r7, r3
   180cc:	bcs	186f4 <__assert_fail@plt+0x6b50>
   180d0:	mov	sl, r4
   180d4:	ldr	r3, [sp, #12]
   180d8:	ldr	r4, [r3, #12]
   180dc:	cmp	r4, #0
   180e0:	beq	18548 <__assert_fail@plt+0x69a4>
   180e4:	bl	119b8 <__errno_location@plt>
   180e8:	mov	r9, r0
   180ec:	mov	r0, r4
   180f0:	str	r8, [r9]
   180f4:	bl	11ab4 <readdir64@plt>
   180f8:	subs	fp, r0, #0
   180fc:	beq	18620 <__assert_fail@plt+0x6a7c>
   18100:	ldr	r2, [r5, #48]	; 0x30
   18104:	tst	r2, #32
   18108:	bne	18118 <__assert_fail@plt+0x6574>
   1810c:	ldrb	r2, [fp, #19]
   18110:	cmp	r2, #46	; 0x2e
   18114:	beq	18328 <__assert_fail@plt+0x6784>
   18118:	add	r4, fp, #19
   1811c:	mov	r0, r4
   18120:	bl	11988 <strlen@plt>
   18124:	mov	r1, r4
   18128:	mov	r2, r0
   1812c:	mov	r6, r0
   18130:	mov	r0, r5
   18134:	bl	176e0 <__assert_fail@plt+0x5b3c>
   18138:	subs	r4, r0, #0
   1813c:	beq	184f8 <__assert_fail@plt+0x6954>
   18140:	ldr	r3, [sp, #16]
   18144:	cmp	r3, r6
   18148:	bls	181e0 <__assert_fail@plt+0x663c>
   1814c:	ldr	r3, [sp, #8]
   18150:	adds	r6, r3, r6
   18154:	bcs	1824c <__assert_fail@plt+0x66a8>
   18158:	ldrd	r0, [fp]
   1815c:	ldr	r2, [r5, #48]	; 0x30
   18160:	ldr	ip, [r5]
   18164:	tst	r2, #4
   18168:	ldr	r3, [sp, #24]
   1816c:	strd	r0, [r4, #160]	; 0xa0
   18170:	addeq	r1, r4, #168	; 0xa8
   18174:	str	r3, [r4, #48]	; 0x30
   18178:	str	ip, [r4, #4]
   1817c:	str	r6, [r4, #40]	; 0x28
   18180:	streq	r1, [r4, #24]
   18184:	bne	1829c <__assert_fail@plt+0x66f8>
   18188:	ldr	r1, [r5, #44]	; 0x2c
   1818c:	cmp	r1, #0
   18190:	beq	1819c <__assert_fail@plt+0x65f8>
   18194:	tst	r2, #1024	; 0x400
   18198:	beq	1830c <__assert_fail@plt+0x6768>
   1819c:	tst	r2, #8
   181a0:	ldrb	r3, [fp, #18]
   181a4:	bne	18058 <__assert_fail@plt+0x64b4>
   181a8:	sub	r3, r3, #1
   181ac:	cmp	r3, #11
   181b0:	mov	r2, #11
   181b4:	strh	r2, [r4, #56]	; 0x38
   181b8:	strhi	r8, [r4, #80]	; 0x50
   181bc:	movhi	r2, #2
   181c0:	movhi	r3, #0
   181c4:	bhi	1809c <__assert_fail@plt+0x64f8>
   181c8:	ldr	r2, [pc, #1808]	; 188e0 <__assert_fail@plt+0x6d3c>
   181cc:	ldr	r1, [r2, r3, lsl #2]
   181d0:	mov	r2, #2
   181d4:	mov	r3, #0
   181d8:	str	r1, [r4, #80]	; 0x50
   181dc:	b	1809c <__assert_fail@plt+0x64f8>
   181e0:	ldr	r3, [sp, #32]
   181e4:	add	r1, r5, #36	; 0x24
   181e8:	add	r2, r3, #2
   181ec:	ldr	r3, [r5, #24]
   181f0:	add	r2, r2, r6
   181f4:	add	r0, r5, #24
   181f8:	str	r3, [sp, #16]
   181fc:	bl	17aec <__assert_fail@plt+0x5f48>
   18200:	cmp	r0, #0
   18204:	beq	184f8 <__assert_fail@plt+0x6954>
   18208:	ldr	r2, [r5, #24]
   1820c:	ldr	r3, [sp, #16]
   18210:	cmp	r3, r2
   18214:	beq	18348 <__assert_fail@plt+0x67a4>
   18218:	ldr	r1, [r5, #48]	; 0x30
   1821c:	tst	r1, #4
   18220:	ldrne	r3, [sp, #8]
   18224:	addne	r3, r2, r3
   18228:	strne	r3, [sp, #28]
   1822c:	ldr	r3, [r5, #36]	; 0x24
   18230:	ldr	r2, [sp, #8]
   18234:	str	r0, [sp, #36]	; 0x24
   18238:	sub	r3, r3, r2
   1823c:	str	r3, [sp, #16]
   18240:	ldr	r3, [sp, #8]
   18244:	adds	r6, r3, r6
   18248:	bcc	18158 <__assert_fail@plt+0x65b4>
   1824c:	ldr	sl, [sp, #12]
   18250:	mov	r0, r4
   18254:	bl	17274 <__assert_fail@plt+0x56d0>
   18258:	ldr	r0, [sp, #4]
   1825c:	bl	17754 <__assert_fail@plt+0x5bb0>
   18260:	ldr	r0, [sl, #12]
   18264:	bl	11b98 <closedir@plt>
   18268:	ldr	r3, [r5, #48]	; 0x30
   1826c:	mov	r2, #0
   18270:	orr	r3, r3, #8192	; 0x2000
   18274:	mov	r0, #7
   18278:	mov	r1, #36	; 0x24
   1827c:	str	r2, [sp, #4]
   18280:	strh	r0, [sl, #56]	; 0x38
   18284:	str	r2, [sl, #12]
   18288:	ldr	r0, [sp, #4]
   1828c:	str	r3, [r5, #48]	; 0x30
   18290:	str	r1, [r9]
   18294:	add	sp, sp, #68	; 0x44
   18298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1829c:	ldr	r1, [r4, #28]
   182a0:	ldr	r2, [r4, #52]	; 0x34
   182a4:	str	r1, [r4, #24]
   182a8:	add	r2, r2, #1
   182ac:	add	r1, r4, #168	; 0xa8
   182b0:	ldr	r0, [sp, #28]
   182b4:	bl	11748 <memmove@plt>
   182b8:	ldr	r2, [r5, #48]	; 0x30
   182bc:	b	18188 <__assert_fail@plt+0x65e4>
   182c0:	ldr	r3, [r5, #44]	; 0x2c
   182c4:	cmp	r3, #0
   182c8:	bne	180c0 <__assert_fail@plt+0x651c>
   182cc:	ldr	r1, [sp, #60]	; 0x3c
   182d0:	ldr	r0, [sp, #12]
   182d4:	bl	177c0 <__assert_fail@plt+0x5c1c>
   182d8:	ldr	r3, [pc, #1544]	; 188e8 <__assert_fail@plt+0x6d44>
   182dc:	cmp	r0, r3
   182e0:	beq	18304 <__assert_fail@plt+0x6760>
   182e4:	ldr	r3, [pc, #1536]	; 188ec <__assert_fail@plt+0x6d48>
   182e8:	cmp	r0, r3
   182ec:	beq	18304 <__assert_fail@plt+0x6760>
   182f0:	ldr	r3, [pc, #1528]	; 188f0 <__assert_fail@plt+0x6d4c>
   182f4:	cmp	r0, r3
   182f8:	movne	r3, #1
   182fc:	strne	r3, [sp, #48]	; 0x30
   18300:	bne	180c0 <__assert_fail@plt+0x651c>
   18304:	str	r8, [sp, #48]	; 0x30
   18308:	b	180c0 <__assert_fail@plt+0x651c>
   1830c:	mov	r1, r2
   18310:	mov	r3, r8
   18314:	mov	r2, r4
   18318:	ldr	r0, [r5, #32]
   1831c:	bl	179a0 <__assert_fail@plt+0x5dfc>
   18320:	strh	r0, [r4, #56]	; 0x38
   18324:	b	180a0 <__assert_fail@plt+0x64fc>
   18328:	ldrb	r2, [fp, #20]
   1832c:	cmp	r2, #0
   18330:	beq	18340 <__assert_fail@plt+0x679c>
   18334:	ldrh	r2, [fp, #20]
   18338:	cmp	r2, #46	; 0x2e
   1833c:	bne	18118 <__assert_fail@plt+0x6574>
   18340:	mov	r4, sl
   18344:	b	180d0 <__assert_fail@plt+0x652c>
   18348:	ldr	r0, [sp, #36]	; 0x24
   1834c:	b	1822c <__assert_fail@plt+0x6688>
   18350:	ldr	r3, [r0, #48]	; 0x30
   18354:	ldr	r1, [sl, #24]
   18358:	and	r2, r3, #516	; 0x204
   1835c:	cmp	r2, #512	; 0x200
   18360:	mvnne	r0, #99	; 0x63
   18364:	ldreq	r0, [r0, #32]
   18368:	ands	r2, r3, #16
   1836c:	bne	18488 <__assert_fail@plt+0x68e4>
   18370:	add	r3, sp, #60	; 0x3c
   18374:	bl	1c67c <__assert_fail@plt+0xaad8>
   18378:	cmp	r0, #0
   1837c:	mov	r4, r0
   18380:	str	r0, [sl, #12]
   18384:	beq	187e0 <__assert_fail@plt+0x6c3c>
   18388:	ldrh	r3, [sl, #56]	; 0x38
   1838c:	cmp	r3, #11
   18390:	beq	18808 <__assert_fail@plt+0x6c64>
   18394:	ldr	r0, [r5, #48]	; 0x30
   18398:	tst	r0, #256	; 0x100
   1839c:	bne	184a8 <__assert_fail@plt+0x6904>
   183a0:	ldr	r2, [r5, #44]	; 0x2c
   183a4:	ldr	r3, [pc, #1352]	; 188f4 <__assert_fail@plt+0x6d50>
   183a8:	cmp	r2, #0
   183ac:	mvnne	r3, #0
   183b0:	str	r3, [sp, #20]
   183b4:	ldr	r3, [sp, #40]	; 0x28
   183b8:	cmp	r3, #2
   183bc:	beq	1879c <__assert_fail@plt+0x6bf8>
   183c0:	ldr	r3, [r5, #48]	; 0x30
   183c4:	and	r3, r3, #56	; 0x38
   183c8:	cmp	r3, #24
   183cc:	beq	18824 <__assert_fail@plt+0x6c80>
   183d0:	ldr	r3, [sp, #40]	; 0x28
   183d4:	mov	r4, #1
   183d8:	sub	r6, r3, #3
   183dc:	clz	r6, r6
   183e0:	lsr	r6, r6, #5
   183e4:	ldr	r3, [r5, #48]	; 0x30
   183e8:	tst	r3, #512	; 0x200
   183ec:	bne	187c4 <__assert_fail@plt+0x6c20>
   183f0:	ldr	r2, [sp, #60]	; 0x3c
   183f4:	cmp	r2, #0
   183f8:	blt	18414 <__assert_fail@plt+0x6870>
   183fc:	mov	r3, #0
   18400:	mov	r1, sl
   18404:	mov	r0, r5
   18408:	bl	17c28 <__assert_fail@plt+0x6084>
   1840c:	cmp	r0, #0
   18410:	beq	17fb8 <__assert_fail@plt+0x6414>
   18414:	tst	r4, r6
   18418:	beq	18428 <__assert_fail@plt+0x6884>
   1841c:	bl	119b8 <__errno_location@plt>
   18420:	ldr	r3, [r0]
   18424:	str	r3, [sl, #32]
   18428:	ldrh	r3, [sl, #58]	; 0x3a
   1842c:	ldr	r0, [sl, #12]
   18430:	orr	r3, r3, #1
   18434:	strh	r3, [sl, #58]	; 0x3a
   18438:	bl	11b98 <closedir@plt>
   1843c:	ldr	r0, [r5, #48]	; 0x30
   18440:	mov	r3, #0
   18444:	tst	r0, #512	; 0x200
   18448:	str	r3, [sl, #12]
   1844c:	beq	18468 <__assert_fail@plt+0x68c4>
   18450:	ldr	r3, [sp, #60]	; 0x3c
   18454:	cmp	r3, #0
   18458:	blt	18468 <__assert_fail@plt+0x68c4>
   1845c:	mov	r0, r3
   18460:	bl	11b80 <close@plt>
   18464:	ldr	r0, [r5, #48]	; 0x30
   18468:	mov	r3, #0
   1846c:	str	r3, [sl, #12]
   18470:	str	r3, [sp, #52]	; 0x34
   18474:	b	17fc4 <__assert_fail@plt+0x6420>
   18478:	mov	r3, #11
   1847c:	strh	r3, [r4, #56]	; 0x38
   18480:	mov	r3, #9
   18484:	b	181c8 <__assert_fail@plt+0x6624>
   18488:	tst	r3, #1
   1848c:	moveq	r2, #32768	; 0x8000
   18490:	beq	18370 <__assert_fail@plt+0x67cc>
   18494:	ldr	r2, [sl, #48]	; 0x30
   18498:	cmp	r2, #0
   1849c:	movne	r2, #32768	; 0x8000
   184a0:	moveq	r2, #0
   184a4:	b	18370 <__assert_fail@plt+0x67cc>
   184a8:	add	r4, r5, #56	; 0x38
   184ac:	mov	r1, r4
   184b0:	mov	r2, sl
   184b4:	bl	17eb4 <__assert_fail@plt+0x6310>
   184b8:	mov	r3, #0
   184bc:	mov	r2, sl
   184c0:	ldr	r1, [r5, #48]	; 0x30
   184c4:	ldr	r0, [r5, #32]
   184c8:	bl	179a0 <__assert_fail@plt+0x5dfc>
   184cc:	mov	r1, r4
   184d0:	mov	r2, sl
   184d4:	ldr	r0, [r5, #48]	; 0x30
   184d8:	bl	17e04 <__assert_fail@plt+0x6260>
   184dc:	subs	r4, r0, #0
   184e0:	bne	183a0 <__assert_fail@plt+0x67fc>
   184e4:	bl	119b8 <__errno_location@plt>
   184e8:	mov	r3, #12
   184ec:	str	r4, [sp, #4]
   184f0:	str	r3, [r0]
   184f4:	b	1853c <__assert_fail@plt+0x6998>
   184f8:	ldr	sl, [sp, #12]
   184fc:	mov	r0, r4
   18500:	ldr	r4, [r9]
   18504:	bl	17274 <__assert_fail@plt+0x56d0>
   18508:	ldr	r0, [sp, #4]
   1850c:	bl	17754 <__assert_fail@plt+0x5bb0>
   18510:	ldr	r0, [sl, #12]
   18514:	bl	11b98 <closedir@plt>
   18518:	ldr	r3, [r5, #48]	; 0x30
   1851c:	mov	r2, #0
   18520:	orr	r3, r3, #8192	; 0x2000
   18524:	mov	r1, #7
   18528:	str	r2, [sl, #12]
   1852c:	strh	r1, [sl, #56]	; 0x38
   18530:	str	r2, [sp, #4]
   18534:	str	r3, [r5, #48]	; 0x30
   18538:	str	r4, [r9]
   1853c:	ldr	r0, [sp, #4]
   18540:	add	sp, sp, #68	; 0x44
   18544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18548:	mov	sl, r3
   1854c:	ldr	r3, [sp, #36]	; 0x24
   18550:	cmp	r3, #0
   18554:	bne	18670 <__assert_fail@plt+0x6acc>
   18558:	ldr	r3, [r5, #48]	; 0x30
   1855c:	tst	r3, #4
   18560:	beq	1858c <__assert_fail@plt+0x69e8>
   18564:	ldr	r3, [r5, #36]	; 0x24
   18568:	ldr	r2, [sp, #8]
   1856c:	cmp	r7, #0
   18570:	cmpne	r3, r2
   18574:	ldreq	r3, [sp, #28]
   18578:	subeq	r3, r3, #1
   1857c:	streq	r3, [sp, #28]
   18580:	ldr	r2, [sp, #28]
   18584:	mov	r3, #0
   18588:	strb	r3, [r2]
   1858c:	ldr	r3, [sp, #52]	; 0x34
   18590:	ldr	r2, [sp, #44]	; 0x2c
   18594:	cmp	r2, #0
   18598:	movne	r3, #0
   1859c:	andeq	r3, r3, #1
   185a0:	cmp	r3, #0
   185a4:	beq	185dc <__assert_fail@plt+0x6a38>
   185a8:	ldr	r3, [sp, #40]	; 0x28
   185ac:	cmp	r7, #0
   185b0:	cmpne	r3, #1
   185b4:	bne	185e4 <__assert_fail@plt+0x6a40>
   185b8:	ldr	r3, [sl, #48]	; 0x30
   185bc:	cmp	r3, #0
   185c0:	bne	1875c <__assert_fail@plt+0x6bb8>
   185c4:	mov	r0, r5
   185c8:	bl	17950 <__assert_fail@plt+0x5dac>
   185cc:	adds	r0, r0, #0
   185d0:	movne	r0, #1
   185d4:	cmp	r0, #0
   185d8:	bne	1887c <__assert_fail@plt+0x6cd8>
   185dc:	cmp	r7, #0
   185e0:	beq	1877c <__assert_fail@plt+0x6bd8>
   185e4:	ldr	r3, [sp, #48]	; 0x30
   185e8:	cmp	r3, #0
   185ec:	bne	186fc <__assert_fail@plt+0x6b58>
   185f0:	ldr	r3, [r5, #44]	; 0x2c
   185f4:	cmp	r3, #0
   185f8:	cmpne	r7, #1
   185fc:	bls	1853c <__assert_fail@plt+0x6998>
   18600:	mov	r2, r7
   18604:	ldr	r1, [sp, #4]
   18608:	mov	r0, r5
   1860c:	bl	17600 <__assert_fail@plt+0x5a5c>
   18610:	str	r0, [sp, #4]
   18614:	ldr	r0, [sp, #4]
   18618:	add	sp, sp, #68	; 0x44
   1861c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18620:	ldr	r3, [r9]
   18624:	ldr	sl, [sp, #12]
   18628:	cmp	r3, #0
   1862c:	beq	1864c <__assert_fail@plt+0x6aa8>
   18630:	ldr	r2, [sp, #44]	; 0x2c
   18634:	str	r3, [sl, #32]
   18638:	cmp	r7, #0
   1863c:	cmpeq	r2, #0
   18640:	moveq	r2, #4
   18644:	movne	r2, #7
   18648:	strh	r2, [sl, #56]	; 0x38
   1864c:	ldr	r0, [sl, #12]
   18650:	cmp	r0, #0
   18654:	beq	1854c <__assert_fail@plt+0x69a8>
   18658:	bl	11b98 <closedir@plt>
   1865c:	mov	r3, #0
   18660:	str	r3, [sl, #12]
   18664:	ldr	r3, [sp, #36]	; 0x24
   18668:	cmp	r3, #0
   1866c:	beq	18558 <__assert_fail@plt+0x69b4>
   18670:	ldr	r1, [r5, #4]
   18674:	ldr	r0, [r5, #24]
   18678:	cmp	r1, #0
   1867c:	beq	186ac <__assert_fail@plt+0x6b08>
   18680:	ldr	r3, [r1, #24]
   18684:	add	r2, r1, #168	; 0xa8
   18688:	cmp	r3, r2
   1868c:	ldrne	r2, [r1, #28]
   18690:	str	r0, [r1, #28]
   18694:	subne	r3, r3, r2
   18698:	addne	r3, r0, r3
   1869c:	strne	r3, [r1, #24]
   186a0:	ldr	r1, [r1, #8]
   186a4:	cmp	r1, #0
   186a8:	bne	18680 <__assert_fail@plt+0x6adc>
   186ac:	ldr	r3, [sp, #4]
   186b0:	b	186e0 <__assert_fail@plt+0x6b3c>
   186b4:	ldr	r2, [r3, #24]
   186b8:	cmp	r2, r1
   186bc:	ldrne	r1, [r3, #28]
   186c0:	str	r0, [r3, #28]
   186c4:	subne	r2, r2, r1
   186c8:	addne	r2, r0, r2
   186cc:	strne	r2, [r3, #24]
   186d0:	ldr	r2, [r3, #8]
   186d4:	cmp	r2, #0
   186d8:	ldreq	r2, [r3, #4]
   186dc:	mov	r3, r2
   186e0:	ldr	r2, [r3, #48]	; 0x30
   186e4:	add	r1, r3, #168	; 0xa8
   186e8:	cmp	r2, #0
   186ec:	bge	186b4 <__assert_fail@plt+0x6b10>
   186f0:	b	18558 <__assert_fail@plt+0x69b4>
   186f4:	ldr	sl, [sp, #12]
   186f8:	b	1854c <__assert_fail@plt+0x69a8>
   186fc:	ldr	r3, [pc, #500]	; 188f8 <__assert_fail@plt+0x6d54>
   18700:	mov	r2, r7
   18704:	str	r3, [r5, #44]	; 0x2c
   18708:	ldr	r1, [sp, #4]
   1870c:	mov	r0, r5
   18710:	bl	17600 <__assert_fail@plt+0x5a5c>
   18714:	mov	r3, #0
   18718:	str	r3, [r5, #44]	; 0x2c
   1871c:	str	r0, [sp, #4]
   18720:	ldr	r0, [sp, #4]
   18724:	add	sp, sp, #68	; 0x44
   18728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1872c:	ldr	r0, [sl, #12]
   18730:	bl	11b98 <closedir@plt>
   18734:	ldr	r3, [sp, #40]	; 0x28
   18738:	mov	r4, #0
   1873c:	cmp	r3, #3
   18740:	str	r4, [sl, #12]
   18744:	beq	187ec <__assert_fail@plt+0x6c48>
   18748:	mov	r3, #0
   1874c:	str	r3, [sp, #4]
   18750:	ldr	r0, [sp, #4]
   18754:	add	sp, sp, #68	; 0x44
   18758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1875c:	ldr	r3, [pc, #408]	; 188fc <__assert_fail@plt+0x6d58>
   18760:	mvn	r2, #0
   18764:	ldr	r1, [sl, #4]
   18768:	mov	r0, r5
   1876c:	bl	17c28 <__assert_fail@plt+0x6084>
   18770:	adds	r0, r0, #0
   18774:	movne	r0, #1
   18778:	b	185d4 <__assert_fail@plt+0x6a30>
   1877c:	ldr	r3, [sp, #40]	; 0x28
   18780:	cmp	r3, #3
   18784:	beq	187ac <__assert_fail@plt+0x6c08>
   18788:	ldr	r0, [sp, #4]
   1878c:	bl	17754 <__assert_fail@plt+0x5bb0>
   18790:	mov	r3, #0
   18794:	str	r3, [sp, #4]
   18798:	b	1853c <__assert_fail@plt+0x6998>
   1879c:	mov	r3, #0
   187a0:	str	r3, [sp, #52]	; 0x34
   187a4:	ldr	r0, [r5, #48]	; 0x30
   187a8:	b	17fc4 <__assert_fail@plt+0x6420>
   187ac:	ldrh	r3, [sl, #56]	; 0x38
   187b0:	cmp	r3, #4
   187b4:	cmpne	r3, #7
   187b8:	movne	r3, #6
   187bc:	strhne	r3, [sl, #56]	; 0x38
   187c0:	b	18788 <__assert_fail@plt+0x6be4>
   187c4:	mov	r2, #3
   187c8:	ldr	r1, [pc, #304]	; 18900 <__assert_fail@plt+0x6d5c>
   187cc:	ldr	r0, [sp, #60]	; 0x3c
   187d0:	bl	2e358 <__assert_fail@plt+0x1c7b4>
   187d4:	mov	r2, r0
   187d8:	str	r0, [sp, #60]	; 0x3c
   187dc:	b	183f4 <__assert_fail@plt+0x6850>
   187e0:	ldr	r3, [sp, #40]	; 0x28
   187e4:	cmp	r3, #3
   187e8:	bne	18748 <__assert_fail@plt+0x6ba4>
   187ec:	mov	r3, #4
   187f0:	strh	r3, [sl, #56]	; 0x38
   187f4:	bl	119b8 <__errno_location@plt>
   187f8:	str	r4, [sp, #4]
   187fc:	ldr	r3, [r0]
   18800:	str	r3, [sl, #32]
   18804:	b	1853c <__assert_fail@plt+0x6998>
   18808:	mov	r3, #0
   1880c:	mov	r2, sl
   18810:	ldr	r1, [r5, #48]	; 0x30
   18814:	ldr	r0, [r5, #32]
   18818:	bl	179a0 <__assert_fail@plt+0x5dfc>
   1881c:	strh	r0, [sl, #56]	; 0x38
   18820:	b	183a0 <__assert_fail@plt+0x67fc>
   18824:	ldr	r3, [sl, #84]	; 0x54
   18828:	cmp	r3, #2
   1882c:	bne	183d0 <__assert_fail@plt+0x682c>
   18830:	ldr	r1, [sp, #60]	; 0x3c
   18834:	mov	r0, sl
   18838:	bl	177c0 <__assert_fail@plt+0x5c1c>
   1883c:	ldr	r3, [pc, #164]	; 188e8 <__assert_fail@plt+0x6d44>
   18840:	cmp	r0, r3
   18844:	beq	183d0 <__assert_fail@plt+0x682c>
   18848:	bgt	1889c <__assert_fail@plt+0x6cf8>
   1884c:	ldr	r3, [pc, #156]	; 188f0 <__assert_fail@plt+0x6d4c>
   18850:	cmp	r0, r3
   18854:	beq	183d0 <__assert_fail@plt+0x682c>
   18858:	cmp	r0, #0
   1885c:	beq	183d0 <__assert_fail@plt+0x682c>
   18860:	ldr	r3, [sp, #40]	; 0x28
   18864:	cmp	r3, #3
   18868:	moveq	r6, #1
   1886c:	movne	r6, #0
   18870:	bne	1879c <__assert_fail@plt+0x6bf8>
   18874:	mov	r4, #0
   18878:	b	183e4 <__assert_fail@plt+0x6840>
   1887c:	ldr	r3, [r5, #48]	; 0x30
   18880:	mov	r2, #7
   18884:	orr	r3, r3, #8192	; 0x2000
   18888:	strh	r2, [sl, #56]	; 0x38
   1888c:	ldr	r0, [sp, #4]
   18890:	str	r3, [r5, #48]	; 0x30
   18894:	bl	17754 <__assert_fail@plt+0x5bb0>
   18898:	b	18748 <__assert_fail@plt+0x6ba4>
   1889c:	ldr	r3, [pc, #96]	; 18904 <__assert_fail@plt+0x6d60>
   188a0:	cmp	r0, r3
   188a4:	beq	183d0 <__assert_fail@plt+0x682c>
   188a8:	ldr	r3, [pc, #88]	; 18908 <__assert_fail@plt+0x6d64>
   188ac:	cmp	r0, r3
   188b0:	bne	18860 <__assert_fail@plt+0x6cbc>
   188b4:	b	183d0 <__assert_fail@plt+0x682c>
   188b8:	str	r8, [r4, #80]	; 0x50
   188bc:	mov	r2, #1
   188c0:	mov	r3, #0
   188c4:	b	1809c <__assert_fail@plt+0x64f8>
   188c8:	ldr	r3, [pc, #36]	; 188f4 <__assert_fail@plt+0x6d50>
   188cc:	ldr	r0, [r5, #48]	; 0x30
   188d0:	str	r3, [sp, #20]
   188d4:	mov	r3, #1
   188d8:	str	r3, [sp, #52]	; 0x34
   188dc:	b	17fc4 <__assert_fail@plt+0x6420>
   188e0:	andeq	r0, r3, ip, lsl #22
   188e4:	andeq	r2, r0, r0, lsl r7
   188e8:	andeq	r6, r0, r9, ror #18
   188ec:			; <UNDEFINED> instruction: 0x01021994
   188f0:			; <UNDEFINED> instruction: 0xff534d42
   188f4:	andeq	r8, r1, r0, lsr #13
   188f8:	ldrdeq	r7, [r1], -r0
   188fc:	andeq	r0, r3, ip, lsr fp
   18900:	andeq	r0, r0, r6, lsl #8
   18904:	andeq	r9, r0, r0, lsr #31
   18908:	movtpl	r4, #24911	; 0x614f
   1890c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18910:	bic	r5, r1, #4080	; 0xff0
   18914:	bic	r5, r5, #15
   18918:	cmp	r5, #0
   1891c:	sub	sp, sp, #20
   18920:	bne	18c58 <__assert_fail@plt+0x70b4>
   18924:	and	r3, r1, #516	; 0x204
   18928:	cmp	r3, #516	; 0x204
   1892c:	mov	r6, r1
   18930:	beq	18bf8 <__assert_fail@plt+0x7054>
   18934:	ands	r5, r1, #18
   18938:	beq	18bf8 <__assert_fail@plt+0x7054>
   1893c:	mov	r7, r0
   18940:	mov	r1, #96	; 0x60
   18944:	mov	r0, #1
   18948:	mov	r9, r2
   1894c:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   18950:	subs	r5, r0, #0
   18954:	beq	18ba0 <__assert_fail@plt+0x6ffc>
   18958:	tst	r6, #2
   1895c:	bicne	r3, r6, #512	; 0x200
   18960:	orrne	r3, r3, #4
   18964:	strne	r3, [r5, #48]	; 0x30
   18968:	ldr	r3, [r7]
   1896c:	streq	r6, [r5, #48]	; 0x30
   18970:	mvn	r2, #99	; 0x63
   18974:	cmp	r3, #0
   18978:	str	r9, [r5, #44]	; 0x2c
   1897c:	str	r2, [r5, #32]
   18980:	beq	18c8c <__assert_fail@plt+0x70e8>
   18984:	mov	r8, r7
   18988:	mov	r4, #0
   1898c:	mov	r0, r3
   18990:	bl	11988 <strlen@plt>
   18994:	ldr	r3, [r8, #4]!
   18998:	cmp	r4, r0
   1899c:	movcc	r4, r0
   189a0:	cmp	r3, #0
   189a4:	bne	1898c <__assert_fail@plt+0x6de8>
   189a8:	add	r2, r4, #1
   189ac:	cmp	r2, #4096	; 0x1000
   189b0:	movcc	r2, #4096	; 0x1000
   189b4:	add	r1, r5, #36	; 0x24
   189b8:	add	r0, r5, #24
   189bc:	bl	17aec <__assert_fail@plt+0x5f48>
   189c0:	subs	r3, r0, #0
   189c4:	str	r3, [sp, #4]
   189c8:	beq	18be0 <__assert_fail@plt+0x703c>
   189cc:	ldr	r4, [r7]
   189d0:	cmp	r4, #0
   189d4:	beq	18c10 <__assert_fail@plt+0x706c>
   189d8:	mov	r2, #0
   189dc:	ldr	r1, [pc, #696]	; 18c9c <__assert_fail@plt+0x70f8>
   189e0:	mov	r0, r5
   189e4:	bl	176e0 <__assert_fail@plt+0x5b3c>
   189e8:	subs	fp, r0, #0
   189ec:	beq	18bd8 <__assert_fail@plt+0x7034>
   189f0:	mvn	r3, #0
   189f4:	cmp	r9, #0
   189f8:	str	r3, [fp, #48]	; 0x30
   189fc:	ldr	r4, [r7]
   18a00:	beq	18a14 <__assert_fail@plt+0x6e70>
   18a04:	ldr	r3, [r5, #48]	; 0x30
   18a08:	lsr	r3, r3, #10
   18a0c:	and	r3, r3, #1
   18a10:	str	r3, [sp, #4]
   18a14:	cmp	r4, #0
   18a18:	beq	18c94 <__assert_fail@plt+0x70f0>
   18a1c:	lsr	r6, r6, #11
   18a20:	mov	r3, #0
   18a24:	eor	r6, r6, #1
   18a28:	mov	sl, r3
   18a2c:	str	r3, [sp, #12]
   18a30:	and	r3, r6, #1
   18a34:	str	r3, [sp, #8]
   18a38:	mov	r8, sl
   18a3c:	mov	r6, sl
   18a40:	b	18a78 <__assert_fail@plt+0x6ed4>
   18a44:	mov	r3, #11
   18a48:	strh	r3, [r4, #56]	; 0x38
   18a4c:	mov	r2, #2
   18a50:	mov	r3, #0
   18a54:	cmp	r9, #0
   18a58:	strd	r2, [r4, #112]	; 0x70
   18a5c:	beq	18b0c <__assert_fail@plt+0x6f68>
   18a60:	str	r6, [r4, #8]
   18a64:	mov	r6, r4
   18a68:	ldr	r4, [r7, #4]!
   18a6c:	add	r8, r8, #1
   18a70:	cmp	r4, #0
   18a74:	beq	18b38 <__assert_fail@plt+0x6f94>
   18a78:	mov	r0, r4
   18a7c:	bl	11988 <strlen@plt>
   18a80:	ldr	r3, [sp, #8]
   18a84:	cmp	r0, #2
   18a88:	movls	r3, #0
   18a8c:	andhi	r3, r3, #1
   18a90:	cmp	r3, #0
   18a94:	mov	r2, r0
   18a98:	beq	18ab0 <__assert_fail@plt+0x6f0c>
   18a9c:	sub	r1, r0, #1
   18aa0:	add	r3, r4, r1
   18aa4:	ldrb	r1, [r4, r1]
   18aa8:	cmp	r1, #47	; 0x2f
   18aac:	beq	18bac <__assert_fail@plt+0x7008>
   18ab0:	mov	r1, r4
   18ab4:	mov	r0, r5
   18ab8:	bl	176e0 <__assert_fail@plt+0x5b3c>
   18abc:	subs	r4, r0, #0
   18ac0:	beq	18bc8 <__assert_fail@plt+0x7024>
   18ac4:	ldr	r3, [sp, #4]
   18ac8:	str	sl, [r4, #48]	; 0x30
   18acc:	cmp	r6, #0
   18ad0:	moveq	r3, #0
   18ad4:	andne	r3, r3, #1
   18ad8:	cmp	r3, #0
   18adc:	add	r3, r4, #168	; 0xa8
   18ae0:	str	fp, [r4, #4]
   18ae4:	str	r3, [r4, #24]
   18ae8:	bne	18a44 <__assert_fail@plt+0x6ea0>
   18aec:	mov	r3, sl
   18af0:	mov	r2, r4
   18af4:	ldr	r1, [r5, #48]	; 0x30
   18af8:	ldr	r0, [r5, #32]
   18afc:	bl	179a0 <__assert_fail@plt+0x5dfc>
   18b00:	cmp	r9, #0
   18b04:	strh	r0, [r4, #56]	; 0x38
   18b08:	bne	18a60 <__assert_fail@plt+0x6ebc>
   18b0c:	cmp	r6, #0
   18b10:	str	r9, [r4, #8]
   18b14:	ldrne	r3, [sp, #12]
   18b18:	streq	r4, [sp, #12]
   18b1c:	strne	r4, [sp, #12]
   18b20:	strne	r4, [r3, #8]
   18b24:	moveq	r6, r4
   18b28:	ldr	r4, [r7, #4]!
   18b2c:	add	r8, r8, #1
   18b30:	cmp	r4, #0
   18b34:	bne	18a78 <__assert_fail@plt+0x6ed4>
   18b38:	cmp	r9, #0
   18b3c:	cmpne	r8, #1
   18b40:	bhi	18c74 <__assert_fail@plt+0x70d0>
   18b44:	mov	r2, #0
   18b48:	ldr	r1, [pc, #332]	; 18c9c <__assert_fail@plt+0x70f8>
   18b4c:	mov	r0, r5
   18b50:	bl	176e0 <__assert_fail@plt+0x5b3c>
   18b54:	cmp	r0, #0
   18b58:	str	r0, [r5]
   18b5c:	beq	18bc8 <__assert_fail@plt+0x7024>
   18b60:	mov	r2, #1
   18b64:	mov	r3, #9
   18b68:	str	r6, [r0, #8]
   18b6c:	str	r2, [r0, #48]	; 0x30
   18b70:	strh	r3, [r0, #56]	; 0x38
   18b74:	add	r1, r5, #56	; 0x38
   18b78:	ldr	r0, [r5, #48]	; 0x30
   18b7c:	bl	17b6c <__assert_fail@plt+0x5fc8>
   18b80:	cmp	r0, #0
   18b84:	beq	18bc8 <__assert_fail@plt+0x7024>
   18b88:	ldr	r1, [r5, #48]	; 0x30
   18b8c:	tst	r1, #516	; 0x204
   18b90:	beq	18c28 <__assert_fail@plt+0x7084>
   18b94:	mvn	r1, #0
   18b98:	add	r0, r5, #60	; 0x3c
   18b9c:	bl	1b208 <__assert_fail@plt+0x9664>
   18ba0:	mov	r0, r5
   18ba4:	add	sp, sp, #20
   18ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bac:	ldrb	r1, [r3, #-1]!
   18bb0:	cmp	r1, #47	; 0x2f
   18bb4:	bne	18ab0 <__assert_fail@plt+0x6f0c>
   18bb8:	sub	r2, r2, #1
   18bbc:	cmp	r2, #1
   18bc0:	bne	18bac <__assert_fail@plt+0x7008>
   18bc4:	b	18ab0 <__assert_fail@plt+0x6f0c>
   18bc8:	mov	r0, r6
   18bcc:	bl	17754 <__assert_fail@plt+0x5bb0>
   18bd0:	mov	r0, fp
   18bd4:	bl	17274 <__assert_fail@plt+0x56d0>
   18bd8:	ldr	r0, [r5, #24]
   18bdc:	bl	17274 <__assert_fail@plt+0x56d0>
   18be0:	mov	r0, r5
   18be4:	bl	17274 <__assert_fail@plt+0x56d0>
   18be8:	mov	r5, #0
   18bec:	mov	r0, r5
   18bf0:	add	sp, sp, #20
   18bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bf8:	bl	119b8 <__errno_location@plt>
   18bfc:	mov	r3, #22
   18c00:	str	r3, [r0]
   18c04:	mov	r0, r5
   18c08:	add	sp, sp, #20
   18c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c10:	cmp	r9, #0
   18c14:	movne	fp, r4
   18c18:	bne	18a04 <__assert_fail@plt+0x6e60>
   18c1c:	mov	fp, r9
   18c20:	mov	r6, r9
   18c24:	b	18b44 <__assert_fail@plt+0x6fa0>
   18c28:	ldr	r2, [pc, #112]	; 18ca0 <__assert_fail@plt+0x70fc>
   18c2c:	ldr	r0, [r5, #32]
   18c30:	bl	17bec <__assert_fail@plt+0x6048>
   18c34:	mvn	r1, #0
   18c38:	cmp	r0, #0
   18c3c:	str	r0, [r5, #28]
   18c40:	ldrlt	r3, [r5, #48]	; 0x30
   18c44:	add	r0, r5, #60	; 0x3c
   18c48:	orrlt	r3, r3, #4
   18c4c:	strlt	r3, [r5, #48]	; 0x30
   18c50:	bl	1b208 <__assert_fail@plt+0x9664>
   18c54:	b	18ba0 <__assert_fail@plt+0x6ffc>
   18c58:	bl	119b8 <__errno_location@plt>
   18c5c:	mov	r5, #0
   18c60:	mov	r3, #22
   18c64:	str	r3, [r0]
   18c68:	mov	r0, r5
   18c6c:	add	sp, sp, #20
   18c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c74:	mov	r1, r6
   18c78:	mov	r2, r8
   18c7c:	mov	r0, r5
   18c80:	bl	17600 <__assert_fail@plt+0x5a5c>
   18c84:	mov	r6, r0
   18c88:	b	18b44 <__assert_fail@plt+0x6fa0>
   18c8c:	mov	r2, #4096	; 0x1000
   18c90:	b	189b4 <__assert_fail@plt+0x6e10>
   18c94:	mov	r6, r4
   18c98:	b	18b44 <__assert_fail@plt+0x6fa0>
   18c9c:	andeq	r0, r3, r4, lsr #23
   18ca0:	andeq	r0, r3, r4, asr #7
   18ca4:	ldr	r3, [r0]
   18ca8:	push	{r4, r5, r6, lr}
   18cac:	cmp	r3, #0
   18cb0:	mov	r5, r0
   18cb4:	beq	18cf0 <__assert_fail@plt+0x714c>
   18cb8:	ldr	r2, [r3, #48]	; 0x30
   18cbc:	cmp	r2, #0
   18cc0:	blt	18de0 <__assert_fail@plt+0x723c>
   18cc4:	ldr	r4, [r3, #8]
   18cc8:	mov	r0, r3
   18ccc:	cmp	r4, #0
   18cd0:	ldreq	r4, [r3, #4]
   18cd4:	bl	17274 <__assert_fail@plt+0x56d0>
   18cd8:	mov	r3, r4
   18cdc:	ldr	r2, [r4, #48]	; 0x30
   18ce0:	cmp	r2, #0
   18ce4:	bge	18cc4 <__assert_fail@plt+0x7120>
   18ce8:	mov	r0, r4
   18cec:	bl	17274 <__assert_fail@plt+0x56d0>
   18cf0:	ldr	r0, [r5, #4]
   18cf4:	cmp	r0, #0
   18cf8:	beq	18d00 <__assert_fail@plt+0x715c>
   18cfc:	bl	17754 <__assert_fail@plt+0x5bb0>
   18d00:	ldr	r0, [r5, #8]
   18d04:	bl	17274 <__assert_fail@plt+0x56d0>
   18d08:	ldr	r0, [r5, #24]
   18d0c:	bl	17274 <__assert_fail@plt+0x56d0>
   18d10:	ldr	r3, [r5, #48]	; 0x30
   18d14:	tst	r3, #512	; 0x200
   18d18:	beq	18d8c <__assert_fail@plt+0x71e8>
   18d1c:	ldr	r0, [r5, #32]
   18d20:	cmp	r0, #0
   18d24:	blt	18d34 <__assert_fail@plt+0x7190>
   18d28:	bl	11b80 <close@plt>
   18d2c:	cmp	r0, #0
   18d30:	bne	18dcc <__assert_fail@plt+0x7228>
   18d34:	mov	r4, #0
   18d38:	add	r0, r5, #60	; 0x3c
   18d3c:	bl	17788 <__assert_fail@plt+0x5be4>
   18d40:	ldr	r0, [r5, #52]	; 0x34
   18d44:	cmp	r0, #0
   18d48:	beq	18d50 <__assert_fail@plt+0x71ac>
   18d4c:	bl	1a0cc <__assert_fail@plt+0x8528>
   18d50:	ldr	r2, [r5, #48]	; 0x30
   18d54:	ldr	r3, [pc, #164]	; 18e00 <__assert_fail@plt+0x725c>
   18d58:	ldr	r0, [r5, #56]	; 0x38
   18d5c:	and	r3, r3, r2
   18d60:	cmp	r3, #0
   18d64:	beq	18dd8 <__assert_fail@plt+0x7234>
   18d68:	cmp	r0, #0
   18d6c:	beq	18d74 <__assert_fail@plt+0x71d0>
   18d70:	bl	1a0cc <__assert_fail@plt+0x8528>
   18d74:	mov	r0, r5
   18d78:	bl	17274 <__assert_fail@plt+0x56d0>
   18d7c:	cmp	r4, #0
   18d80:	bne	18df0 <__assert_fail@plt+0x724c>
   18d84:	mov	r0, r4
   18d88:	pop	{r4, r5, r6, pc}
   18d8c:	tst	r3, #4
   18d90:	bne	18d34 <__assert_fail@plt+0x7190>
   18d94:	ldr	r0, [r5, #28]
   18d98:	bl	11ae4 <fchdir@plt>
   18d9c:	cmp	r0, #0
   18da0:	beq	18de8 <__assert_fail@plt+0x7244>
   18da4:	bl	119b8 <__errno_location@plt>
   18da8:	ldr	r4, [r0]
   18dac:	ldr	r0, [r5, #28]
   18db0:	bl	11b80 <close@plt>
   18db4:	clz	r3, r4
   18db8:	lsr	r3, r3, #5
   18dbc:	cmp	r0, #0
   18dc0:	moveq	r3, #0
   18dc4:	cmp	r3, #0
   18dc8:	beq	18d38 <__assert_fail@plt+0x7194>
   18dcc:	bl	119b8 <__errno_location@plt>
   18dd0:	ldr	r4, [r0]
   18dd4:	b	18d38 <__assert_fail@plt+0x7194>
   18dd8:	bl	17274 <__assert_fail@plt+0x56d0>
   18ddc:	b	18d74 <__assert_fail@plt+0x71d0>
   18de0:	mov	r4, r3
   18de4:	b	18ce8 <__assert_fail@plt+0x7144>
   18de8:	ldr	r0, [r5, #28]
   18dec:	b	18d28 <__assert_fail@plt+0x7184>
   18df0:	bl	119b8 <__errno_location@plt>
   18df4:	str	r4, [r0]
   18df8:	mvn	r4, #0
   18dfc:	b	18d84 <__assert_fail@plt+0x71e0>
   18e00:	andeq	r0, r0, r2, lsl #2
   18e04:	push	{r4, r5, r6, r7, r8, lr}
   18e08:	ldr	r5, [r0]
   18e0c:	cmp	r5, #0
   18e10:	beq	18f44 <__assert_fail@plt+0x73a0>
   18e14:	ldr	r1, [r0, #48]	; 0x30
   18e18:	ands	r3, r1, #8192	; 0x2000
   18e1c:	bne	18f44 <__assert_fail@plt+0x73a0>
   18e20:	ldrh	r2, [r5, #60]	; 0x3c
   18e24:	mov	r8, r0
   18e28:	mov	r0, #3
   18e2c:	cmp	r2, #1
   18e30:	strh	r0, [r5, #60]	; 0x3c
   18e34:	beq	191b0 <__assert_fail@plt+0x760c>
   18e38:	cmp	r2, #2
   18e3c:	ldrh	r3, [r5, #56]	; 0x38
   18e40:	beq	18f50 <__assert_fail@plt+0x73ac>
   18e44:	cmp	r3, #1
   18e48:	bne	18e80 <__assert_fail@plt+0x72dc>
   18e4c:	cmp	r2, #4
   18e50:	bne	18f64 <__assert_fail@plt+0x73c0>
   18e54:	b	18f80 <__assert_fail@plt+0x73dc>
   18e58:	mov	r0, r5
   18e5c:	str	r4, [r8]
   18e60:	bl	17274 <__assert_fail@plt+0x56d0>
   18e64:	ldr	r5, [r4, #48]	; 0x30
   18e68:	cmp	r5, #0
   18e6c:	beq	18fc8 <__assert_fail@plt+0x7424>
   18e70:	ldrh	r3, [r4, #60]	; 0x3c
   18e74:	mov	r5, r4
   18e78:	cmp	r3, #4
   18e7c:	bne	190c4 <__assert_fail@plt+0x7520>
   18e80:	ldr	r4, [r5, #8]
   18e84:	cmp	r4, #0
   18e88:	bne	18e58 <__assert_fail@plt+0x72b4>
   18e8c:	ldr	r4, [r5, #4]
   18e90:	ldr	r3, [r4, #12]
   18e94:	cmp	r3, #0
   18e98:	bne	19340 <__assert_fail@plt+0x779c>
   18e9c:	str	r4, [r8]
   18ea0:	mov	r0, r5
   18ea4:	bl	17274 <__assert_fail@plt+0x56d0>
   18ea8:	ldr	r3, [r4, #48]	; 0x30
   18eac:	cmn	r3, #1
   18eb0:	beq	1927c <__assert_fail@plt+0x76d8>
   18eb4:	ldrh	r3, [r4, #56]	; 0x38
   18eb8:	cmp	r3, #11
   18ebc:	beq	19138 <__assert_fail@plt+0x7594>
   18ec0:	ldr	r3, [r4, #40]	; 0x28
   18ec4:	ldr	r2, [r8, #24]
   18ec8:	mov	r1, #0
   18ecc:	strb	r1, [r2, r3]
   18ed0:	ldr	r3, [r4, #48]	; 0x30
   18ed4:	cmp	r3, r1
   18ed8:	beq	19208 <__assert_fail@plt+0x7664>
   18edc:	ldrh	r3, [r4, #58]	; 0x3a
   18ee0:	tst	r3, #2
   18ee4:	beq	191c8 <__assert_fail@plt+0x7624>
   18ee8:	ldr	r3, [r8, #48]	; 0x30
   18eec:	tst	r3, #4
   18ef0:	beq	1922c <__assert_fail@plt+0x7688>
   18ef4:	ldr	r0, [r4, #36]	; 0x24
   18ef8:	bl	11b80 <close@plt>
   18efc:	ldr	r3, [r8, #48]	; 0x30
   18f00:	ldrh	r2, [r4, #56]	; 0x38
   18f04:	cmp	r2, #2
   18f08:	beq	18f3c <__assert_fail@plt+0x7398>
   18f0c:	ldr	r2, [r4, #32]
   18f10:	cmp	r2, #0
   18f14:	movne	r2, #7
   18f18:	strhne	r2, [r4, #56]	; 0x38
   18f1c:	bne	18f3c <__assert_fail@plt+0x7398>
   18f20:	mov	r2, #6
   18f24:	mov	r0, r3
   18f28:	strh	r2, [r4, #56]	; 0x38
   18f2c:	add	r1, r8, #56	; 0x38
   18f30:	mov	r2, r4
   18f34:	bl	17eb4 <__assert_fail@plt+0x6310>
   18f38:	ldr	r3, [r8, #48]	; 0x30
   18f3c:	tst	r3, #8192	; 0x2000
   18f40:	beq	18fc0 <__assert_fail@plt+0x741c>
   18f44:	mov	r4, #0
   18f48:	mov	r0, r4
   18f4c:	pop	{r4, r5, r6, r7, r8, pc}
   18f50:	sub	r2, r3, #12
   18f54:	cmp	r2, #1
   18f58:	bls	19248 <__assert_fail@plt+0x76a4>
   18f5c:	cmp	r3, #1
   18f60:	bne	18e80 <__assert_fail@plt+0x72dc>
   18f64:	tst	r1, #64	; 0x40
   18f68:	beq	1913c <__assert_fail@plt+0x7598>
   18f6c:	ldrd	r6, [r5, #64]	; 0x40
   18f70:	ldrd	r2, [r8, #16]
   18f74:	cmp	r7, r3
   18f78:	cmpeq	r6, r2
   18f7c:	beq	1913c <__assert_fail@plt+0x7598>
   18f80:	ldrh	r3, [r5, #58]	; 0x3a
   18f84:	tst	r3, #2
   18f88:	bne	19334 <__assert_fail@plt+0x7790>
   18f8c:	ldr	r0, [r8, #4]
   18f90:	cmp	r0, #0
   18f94:	beq	18fa4 <__assert_fail@plt+0x7400>
   18f98:	bl	17754 <__assert_fail@plt+0x5bb0>
   18f9c:	mov	r3, #0
   18fa0:	str	r3, [r8, #4]
   18fa4:	mov	r3, #6
   18fa8:	strh	r3, [r5, #56]	; 0x38
   18fac:	mov	r2, r5
   18fb0:	add	r1, r8, #56	; 0x38
   18fb4:	ldr	r0, [r8, #48]	; 0x30
   18fb8:	mov	r4, r5
   18fbc:	bl	17eb4 <__assert_fail@plt+0x6310>
   18fc0:	mov	r0, r4
   18fc4:	pop	{r4, r5, r6, r7, r8, pc}
   18fc8:	mov	r0, r8
   18fcc:	bl	17950 <__assert_fail@plt+0x5dac>
   18fd0:	cmp	r0, #0
   18fd4:	bne	19320 <__assert_fail@plt+0x777c>
   18fd8:	ldr	r2, [r8, #48]	; 0x30
   18fdc:	ldr	r3, [pc, #1228]	; 194b0 <__assert_fail@plt+0x790c>
   18fe0:	ldr	r0, [r8, #56]	; 0x38
   18fe4:	and	r3, r3, r2
   18fe8:	cmp	r3, #0
   18fec:	beq	1929c <__assert_fail@plt+0x76f8>
   18ff0:	cmp	r0, #0
   18ff4:	beq	18ffc <__assert_fail@plt+0x7458>
   18ff8:	bl	1a0cc <__assert_fail@plt+0x8528>
   18ffc:	ldr	r2, [r4, #52]	; 0x34
   19000:	add	r6, r4, #168	; 0xa8
   19004:	str	r2, [r4, #40]	; 0x28
   19008:	mov	r1, r6
   1900c:	add	r2, r2, #1
   19010:	ldr	r0, [r8, #24]
   19014:	bl	11748 <memmove@plt>
   19018:	mov	r0, r6
   1901c:	mov	r1, #47	; 0x2f
   19020:	bl	11a78 <strrchr@plt>
   19024:	cmp	r0, #0
   19028:	beq	19058 <__assert_fail@plt+0x74b4>
   1902c:	cmp	r6, r0
   19030:	beq	19310 <__assert_fail@plt+0x776c>
   19034:	add	r5, r0, #1
   19038:	mov	r0, r5
   1903c:	bl	11988 <strlen@plt>
   19040:	mov	r1, r5
   19044:	mov	r7, r0
   19048:	add	r2, r7, #1
   1904c:	mov	r0, r6
   19050:	bl	11748 <memmove@plt>
   19054:	str	r7, [r4, #52]	; 0x34
   19058:	ldr	r3, [r8, #24]
   1905c:	add	r1, r8, #56	; 0x38
   19060:	str	r3, [r4, #28]
   19064:	str	r3, [r4, #24]
   19068:	ldr	r0, [r8, #48]	; 0x30
   1906c:	bl	17b6c <__assert_fail@plt+0x5fc8>
   19070:	ldrh	r3, [r4, #56]	; 0x38
   19074:	cmp	r3, #11
   19078:	str	r4, [r8]
   1907c:	beq	1911c <__assert_fail@plt+0x7578>
   19080:	cmp	r3, #1
   19084:	bne	18fc0 <__assert_fail@plt+0x741c>
   19088:	ldr	r3, [r4, #48]	; 0x30
   1908c:	cmp	r3, #0
   19090:	ldrdeq	r2, [r4, #64]	; 0x40
   19094:	strdeq	r2, [r8, #16]
   19098:	mov	r2, r4
   1909c:	add	r1, r8, #56	; 0x38
   190a0:	ldr	r0, [r8, #48]	; 0x30
   190a4:	bl	17e04 <__assert_fail@plt+0x6260>
   190a8:	subs	r5, r0, #0
   190ac:	bne	18fc0 <__assert_fail@plt+0x741c>
   190b0:	bl	119b8 <__errno_location@plt>
   190b4:	mov	r3, #12
   190b8:	mov	r4, r5
   190bc:	str	r3, [r0]
   190c0:	b	18fc0 <__assert_fail@plt+0x741c>
   190c4:	cmp	r3, #2
   190c8:	beq	19374 <__assert_fail@plt+0x77d0>
   190cc:	ldr	r3, [r4, #4]
   190d0:	mov	ip, #47	; 0x2f
   190d4:	ldr	r2, [r8, #24]
   190d8:	ldr	r0, [r3, #40]	; 0x28
   190dc:	ldr	lr, [r3, #28]
   190e0:	sub	r3, r0, #1
   190e4:	add	r1, r4, #168	; 0xa8
   190e8:	ldrb	lr, [lr, r3]
   190ec:	cmp	lr, ip
   190f0:	movne	r3, r0
   190f4:	add	r0, r2, r3
   190f8:	strb	ip, [r2, r3]
   190fc:	ldr	r2, [r4, #52]	; 0x34
   19100:	add	r0, r0, #1
   19104:	add	r2, r2, #1
   19108:	bl	11748 <memmove@plt>
   1910c:	ldrh	r3, [r4, #56]	; 0x38
   19110:	str	r4, [r8]
   19114:	cmp	r3, #11
   19118:	bne	19080 <__assert_fail@plt+0x74dc>
   1911c:	ldrd	r2, [r4, #112]	; 0x70
   19120:	cmp	r3, #0
   19124:	cmpeq	r2, #2
   19128:	beq	193a0 <__assert_fail@plt+0x77fc>
   1912c:	cmp	r3, #0
   19130:	cmpeq	r2, #1
   19134:	beq	18fc0 <__assert_fail@plt+0x741c>
   19138:	bl	11b68 <abort@plt>
   1913c:	ldr	r0, [r8, #4]
   19140:	cmp	r0, #0
   19144:	beq	192b8 <__assert_fail@plt+0x7714>
   19148:	tst	r1, #4096	; 0x1000
   1914c:	bne	192a4 <__assert_fail@plt+0x7700>
   19150:	ldr	r3, [r5, #24]
   19154:	mvn	r2, #0
   19158:	mov	r1, r5
   1915c:	mov	r0, r8
   19160:	bl	17c28 <__assert_fail@plt+0x6084>
   19164:	cmp	r0, #0
   19168:	beq	1921c <__assert_fail@plt+0x7678>
   1916c:	bl	119b8 <__errno_location@plt>
   19170:	ldrh	r3, [r5, #58]	; 0x3a
   19174:	ldr	r4, [r8, #4]
   19178:	orr	r3, r3, #1
   1917c:	cmp	r4, #0
   19180:	ldr	r2, [r0]
   19184:	strh	r3, [r5, #58]	; 0x3a
   19188:	str	r2, [r5, #32]
   1918c:	beq	19220 <__assert_fail@plt+0x767c>
   19190:	mov	r3, r4
   19194:	ldr	r2, [r3, #4]
   19198:	ldr	r2, [r2, #24]
   1919c:	str	r2, [r3, #24]
   191a0:	ldr	r3, [r3, #8]
   191a4:	cmp	r3, #0
   191a8:	bne	19194 <__assert_fail@plt+0x75f0>
   191ac:	b	19220 <__assert_fail@plt+0x767c>
   191b0:	ldr	r0, [r8, #32]
   191b4:	mov	r2, r5
   191b8:	bl	179a0 <__assert_fail@plt+0x5dfc>
   191bc:	mov	r4, r5
   191c0:	strh	r0, [r5, #56]	; 0x38
   191c4:	b	18fc0 <__assert_fail@plt+0x741c>
   191c8:	tst	r3, #1
   191cc:	bne	18efc <__assert_fail@plt+0x7358>
   191d0:	ldr	r3, [pc, #732]	; 194b4 <__assert_fail@plt+0x7910>
   191d4:	mvn	r2, #0
   191d8:	ldr	r1, [r4, #4]
   191dc:	mov	r0, r8
   191e0:	bl	17c28 <__assert_fail@plt+0x6084>
   191e4:	cmp	r0, #0
   191e8:	beq	18efc <__assert_fail@plt+0x7358>
   191ec:	bl	119b8 <__errno_location@plt>
   191f0:	ldr	r3, [r8, #48]	; 0x30
   191f4:	orr	r3, r3, #8192	; 0x2000
   191f8:	ldr	r2, [r0]
   191fc:	str	r2, [r4, #32]
   19200:	str	r3, [r8, #48]	; 0x30
   19204:	b	18f00 <__assert_fail@plt+0x735c>
   19208:	mov	r0, r8
   1920c:	bl	17950 <__assert_fail@plt+0x5dac>
   19210:	cmp	r0, #0
   19214:	bne	191ec <__assert_fail@plt+0x7648>
   19218:	b	18efc <__assert_fail@plt+0x7358>
   1921c:	ldr	r4, [r8, #4]
   19220:	mov	r3, #0
   19224:	str	r3, [r8, #4]
   19228:	b	190cc <__assert_fail@plt+0x7528>
   1922c:	tst	r3, #512	; 0x200
   19230:	beq	193c0 <__assert_fail@plt+0x781c>
   19234:	mov	r2, #1
   19238:	ldr	r1, [r4, #36]	; 0x24
   1923c:	mov	r0, r8
   19240:	bl	178d0 <__assert_fail@plt+0x5d2c>
   19244:	b	18ef4 <__assert_fail@plt+0x7350>
   19248:	mov	r3, #1
   1924c:	mov	r2, r5
   19250:	ldr	r0, [r8, #32]
   19254:	bl	179a0 <__assert_fail@plt+0x5dfc>
   19258:	cmp	r0, #1
   1925c:	mov	r3, r0
   19260:	strh	r0, [r5, #56]	; 0x38
   19264:	beq	19400 <__assert_fail@plt+0x785c>
   19268:	cmp	r0, #11
   1926c:	mov	r4, r5
   19270:	str	r5, [r8]
   19274:	bne	18fc0 <__assert_fail@plt+0x741c>
   19278:	b	1911c <__assert_fail@plt+0x7578>
   1927c:	mov	r0, r4
   19280:	bl	17274 <__assert_fail@plt+0x56d0>
   19284:	bl	119b8 <__errno_location@plt>
   19288:	mov	r3, #0
   1928c:	mov	r4, r3
   19290:	str	r3, [r0]
   19294:	str	r3, [r8]
   19298:	b	18fc0 <__assert_fail@plt+0x741c>
   1929c:	bl	17274 <__assert_fail@plt+0x56d0>
   192a0:	b	18ffc <__assert_fail@plt+0x7458>
   192a4:	bic	r1, r1, #4096	; 0x1000
   192a8:	str	r1, [r8, #48]	; 0x30
   192ac:	bl	17754 <__assert_fail@plt+0x5bb0>
   192b0:	mov	r3, #0
   192b4:	str	r3, [r8, #4]
   192b8:	mov	r1, #3
   192bc:	mov	r0, r8
   192c0:	bl	17f6c <__assert_fail@plt+0x63c8>
   192c4:	cmp	r0, #0
   192c8:	mov	r4, r0
   192cc:	str	r0, [r8, #4]
   192d0:	bne	19220 <__assert_fail@plt+0x767c>
   192d4:	ldr	r0, [r8, #48]	; 0x30
   192d8:	tst	r0, #8192	; 0x2000
   192dc:	bne	18f44 <__assert_fail@plt+0x73a0>
   192e0:	ldr	r3, [r5, #32]
   192e4:	cmp	r3, #0
   192e8:	beq	192fc <__assert_fail@plt+0x7758>
   192ec:	ldrh	r3, [r5, #56]	; 0x38
   192f0:	cmp	r3, #4
   192f4:	movne	r3, #7
   192f8:	strhne	r3, [r5, #56]	; 0x38
   192fc:	add	r1, r8, #56	; 0x38
   19300:	mov	r2, r5
   19304:	bl	17eb4 <__assert_fail@plt+0x6310>
   19308:	mov	r4, r5
   1930c:	b	18fc0 <__assert_fail@plt+0x741c>
   19310:	ldrb	r3, [r4, #169]	; 0xa9
   19314:	cmp	r3, #0
   19318:	bne	19034 <__assert_fail@plt+0x7490>
   1931c:	b	19058 <__assert_fail@plt+0x74b4>
   19320:	ldr	r3, [r8, #48]	; 0x30
   19324:	mov	r4, r5
   19328:	orr	r3, r3, #8192	; 0x2000
   1932c:	str	r3, [r8, #48]	; 0x30
   19330:	b	18fc0 <__assert_fail@plt+0x741c>
   19334:	ldr	r0, [r5, #36]	; 0x24
   19338:	bl	11b80 <close@plt>
   1933c:	b	18f8c <__assert_fail@plt+0x73e8>
   19340:	ldr	r3, [r4, #40]	; 0x28
   19344:	ldr	r2, [r8, #24]
   19348:	mov	r0, #0
   1934c:	str	r4, [r8]
   19350:	mov	r1, #3
   19354:	strb	r0, [r2, r3]
   19358:	mov	r0, r8
   1935c:	bl	17f6c <__assert_fail@plt+0x63c8>
   19360:	subs	r4, r0, #0
   19364:	beq	193ec <__assert_fail@plt+0x7848>
   19368:	mov	r0, r5
   1936c:	bl	17274 <__assert_fail@plt+0x56d0>
   19370:	b	190cc <__assert_fail@plt+0x7528>
   19374:	mov	r3, #1
   19378:	mov	r2, r4
   1937c:	ldr	r1, [r8, #48]	; 0x30
   19380:	ldr	r0, [r8, #32]
   19384:	bl	179a0 <__assert_fail@plt+0x5dfc>
   19388:	cmp	r0, #1
   1938c:	strh	r0, [r4, #56]	; 0x38
   19390:	beq	19418 <__assert_fail@plt+0x7874>
   19394:	mov	r3, #3
   19398:	strh	r3, [r4, #60]	; 0x3c
   1939c:	b	190cc <__assert_fail@plt+0x7528>
   193a0:	mov	r3, #0
   193a4:	mov	r2, r4
   193a8:	ldr	r1, [r8, #48]	; 0x30
   193ac:	ldr	r0, [r8, #32]
   193b0:	bl	179a0 <__assert_fail@plt+0x5dfc>
   193b4:	mov	r3, r0
   193b8:	strh	r0, [r4, #56]	; 0x38
   193bc:	b	19080 <__assert_fail@plt+0x74dc>
   193c0:	ldr	r0, [r4, #36]	; 0x24
   193c4:	bl	11ae4 <fchdir@plt>
   193c8:	cmp	r0, #0
   193cc:	beq	18ef4 <__assert_fail@plt+0x7350>
   193d0:	bl	119b8 <__errno_location@plt>
   193d4:	ldr	r3, [r8, #48]	; 0x30
   193d8:	orr	r3, r3, #8192	; 0x2000
   193dc:	ldr	r2, [r0]
   193e0:	str	r2, [r4, #32]
   193e4:	str	r3, [r8, #48]	; 0x30
   193e8:	b	18ef4 <__assert_fail@plt+0x7350>
   193ec:	ldr	r3, [r8, #48]	; 0x30
   193f0:	tst	r3, #8192	; 0x2000
   193f4:	bne	18f44 <__assert_fail@plt+0x73a0>
   193f8:	ldr	r4, [r5, #4]
   193fc:	b	18e9c <__assert_fail@plt+0x72f8>
   19400:	ldr	r1, [r8, #48]	; 0x30
   19404:	tst	r1, #4
   19408:	beq	1944c <__assert_fail@plt+0x78a8>
   1940c:	str	r5, [r8]
   19410:	mov	r4, r5
   19414:	b	19080 <__assert_fail@plt+0x74dc>
   19418:	ldr	r1, [r8, #48]	; 0x30
   1941c:	tst	r1, #4
   19420:	bne	19394 <__assert_fail@plt+0x77f0>
   19424:	ldr	r2, [pc, #140]	; 194b8 <__assert_fail@plt+0x7914>
   19428:	ldr	r0, [r8, #32]
   1942c:	bl	17bec <__assert_fail@plt+0x6048>
   19430:	cmp	r0, #0
   19434:	str	r0, [r4, #36]	; 0x24
   19438:	blt	1947c <__assert_fail@plt+0x78d8>
   1943c:	ldrh	r3, [r4, #58]	; 0x3a
   19440:	orr	r3, r3, #2
   19444:	strh	r3, [r4, #58]	; 0x3a
   19448:	b	19394 <__assert_fail@plt+0x77f0>
   1944c:	ldr	r2, [pc, #100]	; 194b8 <__assert_fail@plt+0x7914>
   19450:	ldr	r0, [r8, #32]
   19454:	bl	17bec <__assert_fail@plt+0x6048>
   19458:	cmp	r0, #0
   1945c:	str	r0, [r5, #36]	; 0x24
   19460:	blt	19494 <__assert_fail@plt+0x78f0>
   19464:	ldrh	r2, [r5, #58]	; 0x3a
   19468:	ldrh	r3, [r5, #56]	; 0x38
   1946c:	mov	r4, r5
   19470:	orr	r2, r2, #2
   19474:	strh	r2, [r5, #58]	; 0x3a
   19478:	b	19074 <__assert_fail@plt+0x74d0>
   1947c:	bl	119b8 <__errno_location@plt>
   19480:	mov	r2, #7
   19484:	ldr	r3, [r0]
   19488:	strh	r2, [r4, #56]	; 0x38
   1948c:	str	r3, [r4, #32]
   19490:	b	19394 <__assert_fail@plt+0x77f0>
   19494:	bl	119b8 <__errno_location@plt>
   19498:	mov	r2, #7
   1949c:	mov	r3, r2
   194a0:	ldr	r1, [r0]
   194a4:	strh	r2, [r5, #56]	; 0x38
   194a8:	str	r1, [r5, #32]
   194ac:	b	1940c <__assert_fail@plt+0x7868>
   194b0:	andeq	r0, r0, r2, lsl #2
   194b4:	andeq	r0, r3, ip, lsr fp
   194b8:	andeq	r0, r3, r4, asr #7
   194bc:	cmp	r2, #4
   194c0:	bhi	194d4 <__assert_fail@plt+0x7930>
   194c4:	mov	r3, #0
   194c8:	strh	r2, [r1, #60]	; 0x3c
   194cc:	mov	r0, r3
   194d0:	bx	lr
   194d4:	push	{r4, lr}
   194d8:	bl	119b8 <__errno_location@plt>
   194dc:	mov	r2, #22
   194e0:	mov	r3, #1
   194e4:	str	r2, [r0]
   194e8:	mov	r0, r3
   194ec:	pop	{r4, pc}
   194f0:	push	{r4, r5, r6, r7, r8, lr}
   194f4:	bics	r8, r1, #4096	; 0x1000
   194f8:	bne	195f8 <__assert_fail@plt+0x7a54>
   194fc:	mov	r5, r0
   19500:	mov	r4, r1
   19504:	bl	119b8 <__errno_location@plt>
   19508:	ldr	r6, [r5]
   1950c:	str	r8, [r0]
   19510:	ldr	r3, [r5, #48]	; 0x30
   19514:	mov	r7, r0
   19518:	ands	r3, r3, #8192	; 0x2000
   1951c:	bne	19610 <__assert_fail@plt+0x7a6c>
   19520:	ldrh	r2, [r6, #56]	; 0x38
   19524:	cmp	r2, #9
   19528:	ldreq	r3, [r6, #8]
   1952c:	beq	1959c <__assert_fail@plt+0x79f8>
   19530:	cmp	r2, #1
   19534:	bne	1959c <__assert_fail@plt+0x79f8>
   19538:	ldr	r0, [r5, #4]
   1953c:	cmp	r0, #0
   19540:	beq	19548 <__assert_fail@plt+0x79a4>
   19544:	bl	17754 <__assert_fail@plt+0x5bb0>
   19548:	cmp	r4, #4096	; 0x1000
   1954c:	moveq	r8, #2
   19550:	ldreq	r3, [r5, #48]	; 0x30
   19554:	movne	r8, #1
   19558:	orreq	r3, r3, #4096	; 0x1000
   1955c:	streq	r3, [r5, #48]	; 0x30
   19560:	ldr	r3, [r6, #48]	; 0x30
   19564:	cmp	r3, #0
   19568:	bne	19588 <__assert_fail@plt+0x79e4>
   1956c:	ldr	r3, [r6, #24]
   19570:	ldrb	r3, [r3]
   19574:	cmp	r3, #47	; 0x2f
   19578:	beq	19588 <__assert_fail@plt+0x79e4>
   1957c:	ldr	r1, [r5, #48]	; 0x30
   19580:	ands	r4, r1, #4
   19584:	beq	195a4 <__assert_fail@plt+0x7a00>
   19588:	mov	r1, r8
   1958c:	mov	r0, r5
   19590:	bl	17f6c <__assert_fail@plt+0x63c8>
   19594:	mov	r3, r0
   19598:	str	r0, [r5, #4]
   1959c:	mov	r0, r3
   195a0:	pop	{r4, r5, r6, r7, r8, pc}
   195a4:	ldr	r2, [pc, #160]	; 1964c <__assert_fail@plt+0x7aa8>
   195a8:	ldr	r0, [r5, #32]
   195ac:	bl	17bec <__assert_fail@plt+0x6048>
   195b0:	subs	r6, r0, #0
   195b4:	strlt	r4, [r5, #4]
   195b8:	movlt	r3, r4
   195bc:	blt	1959c <__assert_fail@plt+0x79f8>
   195c0:	mov	r1, r8
   195c4:	mov	r0, r5
   195c8:	bl	17f6c <__assert_fail@plt+0x63c8>
   195cc:	ldr	r3, [r5, #48]	; 0x30
   195d0:	ands	r4, r3, #512	; 0x200
   195d4:	str	r0, [r5, #4]
   195d8:	beq	19618 <__assert_fail@plt+0x7a74>
   195dc:	mov	r1, r6
   195e0:	mov	r2, #1
   195e4:	mov	r0, r5
   195e8:	bl	178d0 <__assert_fail@plt+0x5d2c>
   195ec:	ldr	r3, [r5, #4]
   195f0:	mov	r0, r3
   195f4:	pop	{r4, r5, r6, r7, r8, pc}
   195f8:	bl	119b8 <__errno_location@plt>
   195fc:	mov	r2, #22
   19600:	mov	r3, #0
   19604:	str	r2, [r0]
   19608:	mov	r0, r3
   1960c:	pop	{r4, r5, r6, r7, r8, pc}
   19610:	mov	r3, r8
   19614:	b	1959c <__assert_fail@plt+0x79f8>
   19618:	mov	r0, r6
   1961c:	bl	11ae4 <fchdir@plt>
   19620:	cmp	r0, #0
   19624:	bne	19634 <__assert_fail@plt+0x7a90>
   19628:	mov	r0, r6
   1962c:	bl	11b80 <close@plt>
   19630:	b	195ec <__assert_fail@plt+0x7a48>
   19634:	ldr	r5, [r7]
   19638:	mov	r0, r6
   1963c:	bl	11b80 <close@plt>
   19640:	str	r5, [r7]
   19644:	mov	r3, r4
   19648:	b	1959c <__assert_fail@plt+0x79f8>
   1964c:	andeq	r0, r3, r4, asr #7
   19650:	cmp	r0, #10
   19654:	movcc	r0, #10
   19658:	push	{r4, r5, r6, r7, r8, lr}
   1965c:	orr	r7, r0, #1
   19660:	cmn	r7, #1
   19664:	ldrne	r8, [pc, #132]	; 196f0 <__assert_fail@plt+0x7b4c>
   19668:	beq	196e0 <__assert_fail@plt+0x7b3c>
   1966c:	cmp	r7, #9
   19670:	bls	196e8 <__assert_fail@plt+0x7b44>
   19674:	umull	r2, r3, r8, r7
   19678:	lsr	r3, r3, #1
   1967c:	add	r3, r3, r3, lsl #1
   19680:	cmp	r7, r3
   19684:	beq	196d4 <__assert_fail@plt+0x7b30>
   19688:	mov	r6, #16
   1968c:	mov	r5, #9
   19690:	mov	r4, #3
   19694:	b	196a8 <__assert_fail@plt+0x7b04>
   19698:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   1969c:	add	r6, r6, #8
   196a0:	cmp	r1, #0
   196a4:	beq	196d4 <__assert_fail@plt+0x7b30>
   196a8:	add	r5, r5, r6
   196ac:	add	r4, r4, #2
   196b0:	cmp	r5, r7
   196b4:	mov	r0, r7
   196b8:	mov	r1, r4
   196bc:	bcc	19698 <__assert_fail@plt+0x7af4>
   196c0:	mov	r1, r4
   196c4:	mov	r0, r7
   196c8:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   196cc:	cmp	r1, #0
   196d0:	bne	196e0 <__assert_fail@plt+0x7b3c>
   196d4:	add	r7, r7, #2
   196d8:	cmn	r7, #1
   196dc:	bne	1966c <__assert_fail@plt+0x7ac8>
   196e0:	mov	r0, r7
   196e4:	pop	{r4, r5, r6, r7, r8, pc}
   196e8:	mov	r4, #3
   196ec:	b	196c0 <__assert_fail@plt+0x7b1c>
   196f0:	bge	feac41a4 <optarg@@GLIBC_2.4+0xfea81f64>
   196f4:	push	{r4, lr}
   196f8:	ror	r0, r0, #3
   196fc:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   19700:	mov	r0, r1
   19704:	pop	{r4, pc}
   19708:	sub	r0, r1, r0
   1970c:	clz	r0, r0
   19710:	lsr	r0, r0, #5
   19714:	bx	lr
   19718:	push	{r4, lr}
   1971c:	mov	r4, r0
   19720:	mov	r0, r1
   19724:	ldr	r3, [r4, #24]
   19728:	ldr	r1, [r4, #8]
   1972c:	blx	r3
   19730:	ldr	r3, [r4, #8]
   19734:	cmp	r0, r3
   19738:	bcs	19748 <__assert_fail@plt+0x7ba4>
   1973c:	ldr	r3, [r4]
   19740:	add	r0, r3, r0, lsl #3
   19744:	pop	{r4, pc}
   19748:	bl	11b68 <abort@plt>
   1974c:	push	{r4, r5, r6, r7, r8, lr}
   19750:	mov	r7, r2
   19754:	mov	r8, r3
   19758:	mov	r6, r0
   1975c:	mov	r5, r1
   19760:	bl	19718 <__assert_fail@plt+0x7b74>
   19764:	str	r0, [r7]
   19768:	ldr	r3, [r0]
   1976c:	cmp	r3, #0
   19770:	beq	19808 <__assert_fail@plt+0x7c64>
   19774:	cmp	r5, r3
   19778:	mov	r4, r0
   1977c:	beq	1979c <__assert_fail@plt+0x7bf8>
   19780:	mov	r1, r3
   19784:	mov	r0, r5
   19788:	ldr	r3, [r6, #28]
   1978c:	blx	r3
   19790:	cmp	r0, #0
   19794:	beq	197fc <__assert_fail@plt+0x7c58>
   19798:	ldr	r3, [r4]
   1979c:	cmp	r8, #0
   197a0:	beq	197cc <__assert_fail@plt+0x7c28>
   197a4:	ldr	r2, [r4, #4]
   197a8:	cmp	r2, #0
   197ac:	movne	ip, #0
   197b0:	ldmne	r2, {r0, r1}
   197b4:	streq	r2, [r4]
   197b8:	stmne	r4, {r0, r1}
   197bc:	strne	ip, [r2]
   197c0:	ldrne	r1, [r6, #36]	; 0x24
   197c4:	strne	r1, [r2, #4]
   197c8:	strne	r2, [r6, #36]	; 0x24
   197cc:	mov	r0, r3
   197d0:	pop	{r4, r5, r6, r7, r8, pc}
   197d4:	ldr	r3, [r2]
   197d8:	cmp	r5, r3
   197dc:	beq	1981c <__assert_fail@plt+0x7c78>
   197e0:	mov	r1, r3
   197e4:	mov	r0, r5
   197e8:	ldr	r3, [r6, #28]
   197ec:	blx	r3
   197f0:	cmp	r0, #0
   197f4:	bne	19814 <__assert_fail@plt+0x7c70>
   197f8:	ldr	r4, [r4, #4]
   197fc:	ldr	r2, [r4, #4]
   19800:	cmp	r2, #0
   19804:	bne	197d4 <__assert_fail@plt+0x7c30>
   19808:	mov	r3, #0
   1980c:	mov	r0, r3
   19810:	pop	{r4, r5, r6, r7, r8, pc}
   19814:	ldr	r2, [r4, #4]
   19818:	ldr	r3, [r2]
   1981c:	cmp	r8, #0
   19820:	beq	197cc <__assert_fail@plt+0x7c28>
   19824:	ldr	r0, [r2, #4]
   19828:	mov	r1, #0
   1982c:	str	r0, [r4, #4]
   19830:	str	r1, [r2]
   19834:	ldr	r1, [r6, #36]	; 0x24
   19838:	mov	r0, r3
   1983c:	str	r1, [r2, #4]
   19840:	str	r2, [r6, #36]	; 0x24
   19844:	pop	{r4, r5, r6, r7, r8, pc}
   19848:	ldr	r2, [pc, #164]	; 198f4 <__assert_fail@plt+0x7d50>
   1984c:	ldr	r3, [r0]
   19850:	cmp	r3, r2
   19854:	beq	198dc <__assert_fail@plt+0x7d38>
   19858:	vldr	s15, [r3, #8]
   1985c:	vldr	s14, [pc, #128]	; 198e4 <__assert_fail@plt+0x7d40>
   19860:	vcmpe.f32	s15, s14
   19864:	vmrs	APSR_nzcv, fpscr
   19868:	ble	198d0 <__assert_fail@plt+0x7d2c>
   1986c:	vldr	s13, [pc, #116]	; 198e8 <__assert_fail@plt+0x7d44>
   19870:	vcmpe.f32	s15, s13
   19874:	vmrs	APSR_nzcv, fpscr
   19878:	bpl	198d0 <__assert_fail@plt+0x7d2c>
   1987c:	vldr	s13, [pc, #104]	; 198ec <__assert_fail@plt+0x7d48>
   19880:	vldr	s12, [r3, #12]
   19884:	vcmpe.f32	s12, s13
   19888:	vmrs	APSR_nzcv, fpscr
   1988c:	ble	198d0 <__assert_fail@plt+0x7d2c>
   19890:	vldr	s13, [r3]
   19894:	vcmpe.f32	s13, #0.0
   19898:	vmrs	APSR_nzcv, fpscr
   1989c:	blt	198d0 <__assert_fail@plt+0x7d2c>
   198a0:	vadd.f32	s14, s13, s14
   198a4:	vldr	s13, [r3, #4]
   198a8:	vcmpe.f32	s14, s13
   198ac:	vmrs	APSR_nzcv, fpscr
   198b0:	bpl	198d0 <__assert_fail@plt+0x7d2c>
   198b4:	vldr	s12, [pc, #52]	; 198f0 <__assert_fail@plt+0x7d4c>
   198b8:	vcmpe.f32	s13, s12
   198bc:	vmrs	APSR_nzcv, fpscr
   198c0:	bhi	198d0 <__assert_fail@plt+0x7d2c>
   198c4:	vcmpe.f32	s15, s14
   198c8:	vmrs	APSR_nzcv, fpscr
   198cc:	bgt	198dc <__assert_fail@plt+0x7d38>
   198d0:	str	r2, [r0]
   198d4:	mov	r0, #0
   198d8:	bx	lr
   198dc:	mov	r0, #1
   198e0:	bx	lr
   198e4:	stclcc	12, cr12, [ip, #820]	; 0x334
   198e8:	svccc	0x00666666
   198ec:	svccc	0x008ccccd
   198f0:	svccc	0x00800000
   198f4:	andeq	r0, r3, r0, asr #22
   198f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198fc:	ldm	r1, {r6, ip}
   19900:	cmp	r6, ip
   19904:	bcs	199c0 <__assert_fail@plt+0x7e1c>
   19908:	mov	sl, r2
   1990c:	mov	r5, r0
   19910:	mov	r8, r1
   19914:	add	r6, r6, #8
   19918:	mov	r9, #0
   1991c:	ldr	fp, [r6, #-8]
   19920:	mov	r7, r6
   19924:	cmp	fp, #0
   19928:	beq	199b4 <__assert_fail@plt+0x7e10>
   1992c:	ldr	r4, [r6, #-4]
   19930:	cmp	r4, #0
   19934:	bne	19954 <__assert_fail@plt+0x7db0>
   19938:	b	199a4 <__assert_fail@plt+0x7e00>
   1993c:	ldr	r3, [r0, #4]
   19940:	cmp	r2, #0
   19944:	str	r3, [r4, #4]
   19948:	str	r4, [r0, #4]
   1994c:	mov	r4, r2
   19950:	beq	199a0 <__assert_fail@plt+0x7dfc>
   19954:	ldr	fp, [r4]
   19958:	mov	r0, r5
   1995c:	mov	r1, fp
   19960:	bl	19718 <__assert_fail@plt+0x7b74>
   19964:	ldr	r2, [r4, #4]
   19968:	ldr	r1, [r0]
   1996c:	cmp	r1, #0
   19970:	bne	1993c <__assert_fail@plt+0x7d98>
   19974:	ldr	ip, [r5, #12]
   19978:	str	fp, [r0]
   1997c:	add	r3, ip, #1
   19980:	str	r3, [r5, #12]
   19984:	str	r1, [r4]
   19988:	ldr	r3, [r5, #36]	; 0x24
   1998c:	cmp	r2, #0
   19990:	str	r3, [r4, #4]
   19994:	str	r4, [r5, #36]	; 0x24
   19998:	mov	r4, r2
   1999c:	bne	19954 <__assert_fail@plt+0x7db0>
   199a0:	ldr	fp, [r6, #-8]
   199a4:	cmp	sl, #0
   199a8:	str	r9, [r6, #-4]
   199ac:	beq	199c8 <__assert_fail@plt+0x7e24>
   199b0:	ldr	ip, [r8, #4]
   199b4:	cmp	ip, r7
   199b8:	add	r6, r6, #8
   199bc:	bhi	1991c <__assert_fail@plt+0x7d78>
   199c0:	mov	r0, #1
   199c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199c8:	mov	r1, fp
   199cc:	mov	r0, r5
   199d0:	bl	19718 <__assert_fail@plt+0x7b74>
   199d4:	ldr	r2, [r0]
   199d8:	mov	r4, r0
   199dc:	cmp	r2, #0
   199e0:	beq	19a2c <__assert_fail@plt+0x7e88>
   199e4:	ldr	r0, [r5, #36]	; 0x24
   199e8:	cmp	r0, #0
   199ec:	beq	19a40 <__assert_fail@plt+0x7e9c>
   199f0:	ldr	r2, [r0, #4]
   199f4:	str	r2, [r5, #36]	; 0x24
   199f8:	ldr	r2, [r4, #4]
   199fc:	str	fp, [r0]
   19a00:	str	r2, [r0, #4]
   19a04:	str	r0, [r4, #4]
   19a08:	str	r9, [r6, #-8]
   19a0c:	ldr	r3, [r8, #12]
   19a10:	ldr	ip, [r8, #4]
   19a14:	sub	r3, r3, #1
   19a18:	cmp	ip, r7
   19a1c:	str	r3, [r8, #12]
   19a20:	add	r6, r6, #8
   19a24:	bhi	1991c <__assert_fail@plt+0x7d78>
   19a28:	b	199c0 <__assert_fail@plt+0x7e1c>
   19a2c:	ldr	r2, [r5, #12]
   19a30:	str	fp, [r0]
   19a34:	add	r3, r2, #1
   19a38:	str	r3, [r5, #12]
   19a3c:	b	19a08 <__assert_fail@plt+0x7e64>
   19a40:	mov	r0, #8
   19a44:	bl	2d82c <__assert_fail@plt+0x1bc88>
   19a48:	cmp	r0, #0
   19a4c:	bne	199f8 <__assert_fail@plt+0x7e54>
   19a50:	mov	r0, sl
   19a54:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a58:	ldr	r0, [r0, #8]
   19a5c:	bx	lr
   19a60:	ldr	r0, [r0, #12]
   19a64:	bx	lr
   19a68:	ldr	r0, [r0, #16]
   19a6c:	bx	lr
   19a70:	ldm	r0, {r1, ip}
   19a74:	mov	r0, #0
   19a78:	cmp	r1, ip
   19a7c:	bcs	19ac4 <__assert_fail@plt+0x7f20>
   19a80:	ldr	r3, [r1]
   19a84:	cmp	r3, #0
   19a88:	beq	19ab4 <__assert_fail@plt+0x7f10>
   19a8c:	ldr	r3, [r1, #4]
   19a90:	mov	r2, #1
   19a94:	cmp	r3, #0
   19a98:	beq	19aac <__assert_fail@plt+0x7f08>
   19a9c:	ldr	r3, [r3, #4]
   19aa0:	add	r2, r2, #1
   19aa4:	cmp	r3, #0
   19aa8:	bne	19a9c <__assert_fail@plt+0x7ef8>
   19aac:	cmp	r0, r2
   19ab0:	movcc	r0, r2
   19ab4:	add	r1, r1, #8
   19ab8:	cmp	r1, ip
   19abc:	bcc	19a80 <__assert_fail@plt+0x7edc>
   19ac0:	bx	lr
   19ac4:	bx	lr
   19ac8:	push	{lr}		; (str lr, [sp, #-4]!)
   19acc:	mov	r2, #0
   19ad0:	ldm	r0, {r1, lr}
   19ad4:	mov	ip, r2
   19ad8:	cmp	r1, lr
   19adc:	bcs	19b1c <__assert_fail@plt+0x7f78>
   19ae0:	ldr	r3, [r1]
   19ae4:	cmp	r3, #0
   19ae8:	beq	19b10 <__assert_fail@plt+0x7f6c>
   19aec:	ldr	r3, [r1, #4]
   19af0:	add	ip, ip, #1
   19af4:	cmp	r3, #0
   19af8:	add	r2, r2, #1
   19afc:	beq	19b10 <__assert_fail@plt+0x7f6c>
   19b00:	ldr	r3, [r3, #4]
   19b04:	add	r2, r2, #1
   19b08:	cmp	r3, #0
   19b0c:	bne	19b00 <__assert_fail@plt+0x7f5c>
   19b10:	add	r1, r1, #8
   19b14:	cmp	r1, lr
   19b18:	bcc	19ae0 <__assert_fail@plt+0x7f3c>
   19b1c:	ldr	r3, [r0, #12]
   19b20:	cmp	r3, ip
   19b24:	ldreq	r0, [r0, #16]
   19b28:	subeq	r0, r0, r2
   19b2c:	clzeq	r0, r0
   19b30:	lsreq	r0, r0, #5
   19b34:	movne	r0, #0
   19b38:	pop	{pc}		; (ldr pc, [sp], #4)
   19b3c:	push	{r4, r5, r6, r7, lr}
   19b40:	mov	r5, r1
   19b44:	ldm	r0, {ip, lr}
   19b48:	sub	sp, sp, #12
   19b4c:	ldr	r3, [r0, #16]
   19b50:	cmp	ip, lr
   19b54:	mov	r4, #0
   19b58:	ldr	r6, [r0, #8]
   19b5c:	ldr	r7, [r0, #12]
   19b60:	bcs	19ba4 <__assert_fail@plt+0x8000>
   19b64:	ldr	r2, [ip]
   19b68:	cmp	r2, #0
   19b6c:	beq	19b98 <__assert_fail@plt+0x7ff4>
   19b70:	ldr	r2, [ip, #4]
   19b74:	mov	r1, #1
   19b78:	cmp	r2, #0
   19b7c:	beq	19b90 <__assert_fail@plt+0x7fec>
   19b80:	ldr	r2, [r2, #4]
   19b84:	add	r1, r1, #1
   19b88:	cmp	r2, #0
   19b8c:	bne	19b80 <__assert_fail@plt+0x7fdc>
   19b90:	cmp	r4, r1
   19b94:	movcc	r4, r1
   19b98:	add	ip, ip, #8
   19b9c:	cmp	ip, lr
   19ba0:	bcc	19b64 <__assert_fail@plt+0x7fc0>
   19ba4:	ldr	r2, [pc, #116]	; 19c20 <__assert_fail@plt+0x807c>
   19ba8:	mov	r1, #1
   19bac:	mov	r0, r5
   19bb0:	bl	11a18 <__fprintf_chk@plt>
   19bb4:	mov	r3, r6
   19bb8:	ldr	r2, [pc, #100]	; 19c24 <__assert_fail@plt+0x8080>
   19bbc:	mov	r1, #1
   19bc0:	mov	r0, r5
   19bc4:	bl	11a18 <__fprintf_chk@plt>
   19bc8:	vmov	s15, r7
   19bcc:	vldr	d5, [pc, #68]	; 19c18 <__assert_fail@plt+0x8074>
   19bd0:	mov	r3, r7
   19bd4:	ldr	r2, [pc, #76]	; 19c28 <__assert_fail@plt+0x8084>
   19bd8:	vcvt.f64.u32	d6, s15
   19bdc:	vmov	s15, r6
   19be0:	mov	r1, #1
   19be4:	mov	r0, r5
   19be8:	vcvt.f64.u32	d7, s15
   19bec:	vmul.f64	d6, d6, d5
   19bf0:	vdiv.f64	d5, d6, d7
   19bf4:	vstr	d5, [sp]
   19bf8:	bl	11a18 <__fprintf_chk@plt>
   19bfc:	mov	r3, r4
   19c00:	mov	r0, r5
   19c04:	ldr	r2, [pc, #32]	; 19c2c <__assert_fail@plt+0x8088>
   19c08:	mov	r1, #1
   19c0c:	add	sp, sp, #12
   19c10:	pop	{r4, r5, r6, r7, lr}
   19c14:	b	11a18 <__fprintf_chk@plt>
   19c18:	andeq	r0, r0, r0
   19c1c:	subsmi	r0, r9, r0
   19c20:	andeq	r0, r3, r4, asr fp
   19c24:	andeq	r0, r3, ip, ror #22
   19c28:	andeq	r0, r3, r4, lsl #23
   19c2c:	andeq	r0, r3, r8, lsr #23
   19c30:	push	{r4, r5, r6, lr}
   19c34:	mov	r6, r0
   19c38:	mov	r5, r1
   19c3c:	bl	19718 <__assert_fail@plt+0x7b74>
   19c40:	ldr	r3, [r0]
   19c44:	cmp	r3, #0
   19c48:	movne	r4, r0
   19c4c:	bne	19c58 <__assert_fail@plt+0x80b4>
   19c50:	b	19c84 <__assert_fail@plt+0x80e0>
   19c54:	ldr	r3, [r4]
   19c58:	cmp	r5, r3
   19c5c:	mov	r1, r3
   19c60:	mov	r0, r5
   19c64:	beq	19c8c <__assert_fail@plt+0x80e8>
   19c68:	ldr	r3, [r6, #28]
   19c6c:	blx	r3
   19c70:	cmp	r0, #0
   19c74:	bne	19c94 <__assert_fail@plt+0x80f0>
   19c78:	ldr	r4, [r4, #4]
   19c7c:	cmp	r4, #0
   19c80:	bne	19c54 <__assert_fail@plt+0x80b0>
   19c84:	mov	r0, #0
   19c88:	pop	{r4, r5, r6, pc}
   19c8c:	mov	r0, r5
   19c90:	pop	{r4, r5, r6, pc}
   19c94:	ldr	r0, [r4]
   19c98:	pop	{r4, r5, r6, pc}
   19c9c:	ldr	r3, [r0, #16]
   19ca0:	cmp	r3, #0
   19ca4:	beq	19cd8 <__assert_fail@plt+0x8134>
   19ca8:	ldr	r3, [r0]
   19cac:	ldr	r2, [r0, #4]
   19cb0:	cmp	r3, r2
   19cb4:	bcc	19cc8 <__assert_fail@plt+0x8124>
   19cb8:	b	19ce0 <__assert_fail@plt+0x813c>
   19cbc:	add	r3, r3, #8
   19cc0:	cmp	r3, r2
   19cc4:	bcs	19ce0 <__assert_fail@plt+0x813c>
   19cc8:	ldr	r0, [r3]
   19ccc:	cmp	r0, #0
   19cd0:	beq	19cbc <__assert_fail@plt+0x8118>
   19cd4:	bx	lr
   19cd8:	mov	r0, r3
   19cdc:	bx	lr
   19ce0:	push	{r4, lr}
   19ce4:	bl	11b68 <abort@plt>
   19ce8:	push	{r4, r5, r6, lr}
   19cec:	mov	r5, r0
   19cf0:	mov	r4, r1
   19cf4:	bl	19718 <__assert_fail@plt+0x7b74>
   19cf8:	mov	r2, r0
   19cfc:	mov	r3, r0
   19d00:	b	19d0c <__assert_fail@plt+0x8168>
   19d04:	cmp	r3, #0
   19d08:	beq	19d20 <__assert_fail@plt+0x817c>
   19d0c:	ldm	r3, {r1, r3}
   19d10:	cmp	r4, r1
   19d14:	bne	19d04 <__assert_fail@plt+0x8160>
   19d18:	cmp	r3, #0
   19d1c:	bne	19d48 <__assert_fail@plt+0x81a4>
   19d20:	ldr	r3, [r5, #4]
   19d24:	b	19d34 <__assert_fail@plt+0x8190>
   19d28:	ldr	r0, [r2]
   19d2c:	cmp	r0, #0
   19d30:	popne	{r4, r5, r6, pc}
   19d34:	add	r2, r2, #8
   19d38:	cmp	r2, r3
   19d3c:	bcc	19d28 <__assert_fail@plt+0x8184>
   19d40:	mov	r0, #0
   19d44:	pop	{r4, r5, r6, pc}
   19d48:	ldr	r0, [r3]
   19d4c:	pop	{r4, r5, r6, pc}
   19d50:	push	{r4, r5, r6, lr}
   19d54:	ldm	r0, {r5, lr}
   19d58:	cmp	r5, lr
   19d5c:	bcs	19de0 <__assert_fail@plt+0x823c>
   19d60:	add	r5, r5, #8
   19d64:	mov	ip, #0
   19d68:	ldr	r3, [r5, #-8]
   19d6c:	mov	r6, r5
   19d70:	cmp	r3, #0
   19d74:	beq	19dc0 <__assert_fail@plt+0x821c>
   19d78:	cmp	r2, ip
   19d7c:	bls	19dcc <__assert_fail@plt+0x8228>
   19d80:	str	r3, [r1, ip, lsl #2]
   19d84:	ldr	r3, [r5, #-4]
   19d88:	add	r4, ip, #1
   19d8c:	cmp	r3, #0
   19d90:	add	lr, r1, ip, lsl #2
   19d94:	beq	19dd4 <__assert_fail@plt+0x8230>
   19d98:	mov	ip, r4
   19d9c:	cmp	r2, ip
   19da0:	beq	19dcc <__assert_fail@plt+0x8228>
   19da4:	ldr	r4, [r3]
   19da8:	add	ip, ip, #1
   19dac:	str	r4, [lr, #4]!
   19db0:	ldr	r3, [r3, #4]
   19db4:	cmp	r3, #0
   19db8:	bne	19d9c <__assert_fail@plt+0x81f8>
   19dbc:	ldr	lr, [r0, #4]
   19dc0:	cmp	lr, r6
   19dc4:	add	r5, r5, #8
   19dc8:	bhi	19d68 <__assert_fail@plt+0x81c4>
   19dcc:	mov	r0, ip
   19dd0:	pop	{r4, r5, r6, pc}
   19dd4:	ldr	lr, [r0, #4]
   19dd8:	mov	ip, r4
   19ddc:	b	19dc0 <__assert_fail@plt+0x821c>
   19de0:	mov	ip, #0
   19de4:	b	19dcc <__assert_fail@plt+0x8228>
   19de8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19dec:	ldr	r3, [r0, #4]
   19df0:	ldr	r8, [r0]
   19df4:	cmp	r8, r3
   19df8:	bcs	19e5c <__assert_fail@plt+0x82b8>
   19dfc:	mov	r7, r2
   19e00:	mov	r6, r1
   19e04:	mov	r9, r0
   19e08:	mov	r5, #0
   19e0c:	ldr	r0, [r8]
   19e10:	cmp	r0, #0
   19e14:	beq	19e48 <__assert_fail@plt+0x82a4>
   19e18:	mov	r4, r8
   19e1c:	b	19e24 <__assert_fail@plt+0x8280>
   19e20:	ldr	r0, [r4]
   19e24:	mov	r1, r7
   19e28:	blx	r6
   19e2c:	cmp	r0, #0
   19e30:	beq	19e54 <__assert_fail@plt+0x82b0>
   19e34:	ldr	r4, [r4, #4]
   19e38:	add	r5, r5, #1
   19e3c:	cmp	r4, #0
   19e40:	bne	19e20 <__assert_fail@plt+0x827c>
   19e44:	ldr	r3, [r9, #4]
   19e48:	add	r8, r8, #8
   19e4c:	cmp	r3, r8
   19e50:	bhi	19e0c <__assert_fail@plt+0x8268>
   19e54:	mov	r0, r5
   19e58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e5c:	mov	r5, #0
   19e60:	b	19e54 <__assert_fail@plt+0x82b0>
   19e64:	push	{r4, r5, r6, lr}
   19e68:	mov	r4, r0
   19e6c:	ldrb	r0, [r0]
   19e70:	cmp	r0, #0
   19e74:	beq	19ea4 <__assert_fail@plt+0x8300>
   19e78:	mov	r5, r1
   19e7c:	mov	r1, #0
   19e80:	rsb	r1, r1, r1, lsl #5
   19e84:	add	r0, r1, r0
   19e88:	mov	r1, r5
   19e8c:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   19e90:	ldrb	r0, [r4, #1]!
   19e94:	cmp	r0, #0
   19e98:	bne	19e80 <__assert_fail@plt+0x82dc>
   19e9c:	mov	r0, r1
   19ea0:	pop	{r4, r5, r6, pc}
   19ea4:	mov	r1, r0
   19ea8:	b	19e9c <__assert_fail@plt+0x82f8>
   19eac:	push	{lr}		; (str lr, [sp, #-4]!)
   19eb0:	mov	ip, r0
   19eb4:	ldr	lr, [pc, #16]	; 19ecc <__assert_fail@plt+0x8328>
   19eb8:	ldm	lr!, {r0, r1, r2, r3}
   19ebc:	ldr	lr, [lr]
   19ec0:	stmia	ip!, {r0, r1, r2, r3}
   19ec4:	str	lr, [ip]
   19ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ecc:	andeq	r0, r3, r0, asr #22
   19ed0:	push	{r4, r5, r6, r7, lr}
   19ed4:	sub	sp, sp, #12
   19ed8:	cmp	r2, #0
   19edc:	str	r0, [sp, #4]
   19ee0:	ldr	r6, [pc, #304]	; 1a018 <__assert_fail@plt+0x8474>
   19ee4:	mov	r0, #40	; 0x28
   19ee8:	movne	r6, r2
   19eec:	cmp	r3, #0
   19ef0:	ldr	r7, [pc, #292]	; 1a01c <__assert_fail@plt+0x8478>
   19ef4:	mov	r5, r1
   19ef8:	movne	r7, r3
   19efc:	bl	2d82c <__assert_fail@plt+0x1bc88>
   19f00:	subs	r4, r0, #0
   19f04:	beq	19f9c <__assert_fail@plt+0x83f8>
   19f08:	cmp	r5, #0
   19f0c:	beq	19ff0 <__assert_fail@plt+0x844c>
   19f10:	mov	r0, r4
   19f14:	str	r5, [r0, #20]!
   19f18:	bl	19848 <__assert_fail@plt+0x7ca4>
   19f1c:	cmp	r0, #0
   19f20:	beq	19fd8 <__assert_fail@plt+0x8434>
   19f24:	ldrb	r3, [r5, #16]
   19f28:	cmp	r3, #0
   19f2c:	beq	19fa8 <__assert_fail@plt+0x8404>
   19f30:	ldr	r0, [sp, #4]
   19f34:	bl	19650 <__assert_fail@plt+0x7aac>
   19f38:	lsrs	r2, r0, #30
   19f3c:	movne	r5, #1
   19f40:	moveq	r5, #0
   19f44:	tst	r0, #536870912	; 0x20000000
   19f48:	bne	19fd0 <__assert_fail@plt+0x842c>
   19f4c:	cmp	r5, #0
   19f50:	bne	19fd0 <__assert_fail@plt+0x842c>
   19f54:	cmp	r0, #0
   19f58:	str	r0, [r4, #8]
   19f5c:	beq	19fd8 <__assert_fail@plt+0x8434>
   19f60:	mov	r1, #8
   19f64:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   19f68:	cmp	r0, #0
   19f6c:	str	r0, [r4]
   19f70:	beq	19fd8 <__assert_fail@plt+0x8434>
   19f74:	ldr	r3, [r4, #8]
   19f78:	str	r5, [r4, #12]
   19f7c:	str	r5, [r4, #16]
   19f80:	add	r0, r0, r3, lsl #3
   19f84:	ldr	r3, [sp, #32]
   19f88:	str	r6, [r4, #24]
   19f8c:	str	r7, [r4, #28]
   19f90:	str	r3, [r4, #32]
   19f94:	str	r5, [r4, #36]	; 0x24
   19f98:	str	r0, [r4, #4]
   19f9c:	mov	r0, r4
   19fa0:	add	sp, sp, #12
   19fa4:	pop	{r4, r5, r6, r7, pc}
   19fa8:	vldr	s12, [r5, #8]
   19fac:	vldr	s15, [sp, #4]
   19fb0:	vldr	s14, [pc, #88]	; 1a010 <__assert_fail@plt+0x846c>
   19fb4:	vcvt.f32.u32	s13, s15
   19fb8:	vdiv.f32	s15, s13, s12
   19fbc:	vcmpe.f32	s15, s14
   19fc0:	vmrs	APSR_nzcv, fpscr
   19fc4:	vcvtlt.u32.f32	s15, s15
   19fc8:	vstrlt	s15, [sp, #4]
   19fcc:	blt	19f30 <__assert_fail@plt+0x838c>
   19fd0:	mov	r3, #0
   19fd4:	str	r3, [r4, #8]
   19fd8:	mov	r0, r4
   19fdc:	bl	17274 <__assert_fail@plt+0x56d0>
   19fe0:	mov	r4, #0
   19fe4:	mov	r0, r4
   19fe8:	add	sp, sp, #12
   19fec:	pop	{r4, r5, r6, r7, pc}
   19ff0:	ldr	r3, [pc, #40]	; 1a020 <__assert_fail@plt+0x847c>
   19ff4:	mov	r0, r4
   19ff8:	str	r3, [r0, #20]!
   19ffc:	bl	19848 <__assert_fail@plt+0x7ca4>
   1a000:	cmp	r0, #0
   1a004:	vldrne	s12, [pc, #8]	; 1a014 <__assert_fail@plt+0x8470>
   1a008:	bne	19fac <__assert_fail@plt+0x8408>
   1a00c:	b	19fd8 <__assert_fail@plt+0x8434>
   1a010:	svcmi	0x00800000
   1a014:	svccc	0x004ccccd
   1a018:	strdeq	r9, [r1], -r4
   1a01c:	andeq	r9, r1, r8, lsl #14
   1a020:	andeq	r0, r3, r0, asr #22
   1a024:	push	{r4, r5, r6, r7, r8, lr}
   1a028:	mov	r5, r0
   1a02c:	ldr	r7, [r0]
   1a030:	ldr	r3, [r0, #4]
   1a034:	cmp	r7, r3
   1a038:	addcc	r7, r7, #8
   1a03c:	movcc	r6, #0
   1a040:	bcs	1a0bc <__assert_fail@plt+0x8518>
   1a044:	ldr	r2, [r7, #-8]
   1a048:	mov	r8, r7
   1a04c:	cmp	r2, #0
   1a050:	beq	1a0b0 <__assert_fail@plt+0x850c>
   1a054:	ldr	r4, [r7, #-4]
   1a058:	ldr	r2, [r5, #32]
   1a05c:	cmp	r4, #0
   1a060:	beq	1a094 <__assert_fail@plt+0x84f0>
   1a064:	cmp	r2, #0
   1a068:	beq	1a078 <__assert_fail@plt+0x84d4>
   1a06c:	ldr	r0, [r4]
   1a070:	blx	r2
   1a074:	ldr	r2, [r5, #32]
   1a078:	ldr	r3, [r4, #4]
   1a07c:	ldr	r1, [r5, #36]	; 0x24
   1a080:	str	r6, [r4]
   1a084:	str	r1, [r4, #4]
   1a088:	str	r4, [r5, #36]	; 0x24
   1a08c:	subs	r4, r3, #0
   1a090:	bne	1a064 <__assert_fail@plt+0x84c0>
   1a094:	cmp	r2, #0
   1a098:	beq	1a0a4 <__assert_fail@plt+0x8500>
   1a09c:	ldr	r0, [r7, #-8]
   1a0a0:	blx	r2
   1a0a4:	str	r6, [r7, #-8]
   1a0a8:	str	r6, [r7, #-4]
   1a0ac:	ldr	r3, [r5, #4]
   1a0b0:	cmp	r3, r8
   1a0b4:	add	r7, r7, #8
   1a0b8:	bhi	1a044 <__assert_fail@plt+0x84a0>
   1a0bc:	mov	r3, #0
   1a0c0:	str	r3, [r5, #12]
   1a0c4:	str	r3, [r5, #16]
   1a0c8:	pop	{r4, r5, r6, r7, r8, pc}
   1a0cc:	ldr	r3, [r0, #32]
   1a0d0:	push	{r4, r5, r6, lr}
   1a0d4:	cmp	r3, #0
   1a0d8:	mov	r5, r0
   1a0dc:	beq	1a13c <__assert_fail@plt+0x8598>
   1a0e0:	ldr	r3, [r0, #16]
   1a0e4:	cmp	r3, #0
   1a0e8:	beq	1a13c <__assert_fail@plt+0x8598>
   1a0ec:	ldr	r6, [r0]
   1a0f0:	ldr	r3, [r0, #4]
   1a0f4:	cmp	r6, r3
   1a0f8:	bcs	1a178 <__assert_fail@plt+0x85d4>
   1a0fc:	ldr	r0, [r6]
   1a100:	cmp	r0, #0
   1a104:	movne	r4, r6
   1a108:	bne	1a114 <__assert_fail@plt+0x8570>
   1a10c:	b	1a12c <__assert_fail@plt+0x8588>
   1a110:	ldr	r0, [r4]
   1a114:	ldr	r3, [r5, #32]
   1a118:	blx	r3
   1a11c:	ldr	r4, [r4, #4]
   1a120:	cmp	r4, #0
   1a124:	bne	1a110 <__assert_fail@plt+0x856c>
   1a128:	ldr	r3, [r5, #4]
   1a12c:	add	r6, r6, #8
   1a130:	cmp	r3, r6
   1a134:	bhi	1a0fc <__assert_fail@plt+0x8558>
   1a138:	b	1a140 <__assert_fail@plt+0x859c>
   1a13c:	ldr	r3, [r5, #4]
   1a140:	ldr	r6, [r5]
   1a144:	cmp	r3, r6
   1a148:	bls	1a178 <__assert_fail@plt+0x85d4>
   1a14c:	ldr	r0, [r6, #4]
   1a150:	cmp	r0, #0
   1a154:	beq	1a16c <__assert_fail@plt+0x85c8>
   1a158:	ldr	r4, [r0, #4]
   1a15c:	bl	17274 <__assert_fail@plt+0x56d0>
   1a160:	subs	r0, r4, #0
   1a164:	bne	1a158 <__assert_fail@plt+0x85b4>
   1a168:	ldr	r3, [r5, #4]
   1a16c:	add	r6, r6, #8
   1a170:	cmp	r3, r6
   1a174:	bhi	1a14c <__assert_fail@plt+0x85a8>
   1a178:	ldr	r0, [r5, #36]	; 0x24
   1a17c:	cmp	r0, #0
   1a180:	beq	1a194 <__assert_fail@plt+0x85f0>
   1a184:	ldr	r4, [r0, #4]
   1a188:	bl	17274 <__assert_fail@plt+0x56d0>
   1a18c:	subs	r0, r4, #0
   1a190:	bne	1a184 <__assert_fail@plt+0x85e0>
   1a194:	ldr	r0, [r5]
   1a198:	bl	17274 <__assert_fail@plt+0x56d0>
   1a19c:	mov	r0, r5
   1a1a0:	pop	{r4, r5, r6, lr}
   1a1a4:	b	17274 <__assert_fail@plt+0x56d0>
   1a1a8:	ldr	r3, [r0, #20]
   1a1ac:	push	{r4, r5, r6, r7, lr}
   1a1b0:	sub	sp, sp, #52	; 0x34
   1a1b4:	ldrb	r2, [r3, #16]
   1a1b8:	mov	r5, r0
   1a1bc:	str	r1, [sp, #4]
   1a1c0:	cmp	r2, #0
   1a1c4:	bne	1a1f0 <__assert_fail@plt+0x864c>
   1a1c8:	vmov	s15, r1
   1a1cc:	vldr	s13, [r3, #8]
   1a1d0:	vldr	s14, [pc, #352]	; 1a338 <__assert_fail@plt+0x8794>
   1a1d4:	vcvt.f32.u32	s12, s15
   1a1d8:	vdiv.f32	s15, s12, s13
   1a1dc:	vcmpe.f32	s15, s14
   1a1e0:	vmrs	APSR_nzcv, fpscr
   1a1e4:	bge	1a2f4 <__assert_fail@plt+0x8750>
   1a1e8:	vcvt.u32.f32	s15, s15
   1a1ec:	vstr	s15, [sp, #4]
   1a1f0:	ldr	r0, [sp, #4]
   1a1f4:	bl	19650 <__assert_fail@plt+0x7aac>
   1a1f8:	lsrs	r3, r0, #30
   1a1fc:	movne	r2, #1
   1a200:	moveq	r2, #0
   1a204:	tst	r0, #536870912	; 0x20000000
   1a208:	movne	r2, #1
   1a20c:	cmp	r0, #0
   1a210:	movne	r4, r2
   1a214:	orreq	r4, r2, #1
   1a218:	cmp	r4, #0
   1a21c:	mov	r6, r0
   1a220:	bne	1a2f4 <__assert_fail@plt+0x8750>
   1a224:	ldr	r3, [r5, #8]
   1a228:	cmp	r3, r0
   1a22c:	beq	1a2e4 <__assert_fail@plt+0x8740>
   1a230:	mov	r1, #8
   1a234:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   1a238:	cmp	r0, #0
   1a23c:	str	r0, [sp, #8]
   1a240:	beq	1a2f4 <__assert_fail@plt+0x8750>
   1a244:	ldr	r1, [r5, #24]
   1a248:	ldr	r7, [r5, #20]
   1a24c:	ldr	lr, [r5, #28]
   1a250:	ldr	ip, [r5, #32]
   1a254:	add	r0, r0, r6, lsl #3
   1a258:	ldr	r3, [r5, #36]	; 0x24
   1a25c:	str	r0, [sp, #12]
   1a260:	mov	r2, r4
   1a264:	str	r1, [sp, #32]
   1a268:	add	r0, sp, #8
   1a26c:	mov	r1, r5
   1a270:	str	r4, [sp, #20]
   1a274:	str	r4, [sp, #24]
   1a278:	str	r6, [sp, #16]
   1a27c:	str	r7, [sp, #28]
   1a280:	str	lr, [sp, #36]	; 0x24
   1a284:	str	ip, [sp, #40]	; 0x28
   1a288:	str	r3, [sp, #44]	; 0x2c
   1a28c:	bl	198f8 <__assert_fail@plt+0x7d54>
   1a290:	subs	r4, r0, #0
   1a294:	bne	1a304 <__assert_fail@plt+0x8760>
   1a298:	ldr	r3, [sp, #44]	; 0x2c
   1a29c:	mov	r2, #1
   1a2a0:	str	r3, [r5, #36]	; 0x24
   1a2a4:	add	r1, sp, #8
   1a2a8:	mov	r0, r5
   1a2ac:	bl	198f8 <__assert_fail@plt+0x7d54>
   1a2b0:	cmp	r0, #0
   1a2b4:	beq	1a334 <__assert_fail@plt+0x8790>
   1a2b8:	add	r1, sp, #8
   1a2bc:	mov	r0, r5
   1a2c0:	mov	r2, r4
   1a2c4:	bl	198f8 <__assert_fail@plt+0x7d54>
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1a334 <__assert_fail@plt+0x8790>
   1a2d0:	ldr	r0, [sp, #8]
   1a2d4:	bl	17274 <__assert_fail@plt+0x56d0>
   1a2d8:	mov	r0, r4
   1a2dc:	add	sp, sp, #52	; 0x34
   1a2e0:	pop	{r4, r5, r6, r7, pc}
   1a2e4:	mov	r4, #1
   1a2e8:	mov	r0, r4
   1a2ec:	add	sp, sp, #52	; 0x34
   1a2f0:	pop	{r4, r5, r6, r7, pc}
   1a2f4:	mov	r4, #0
   1a2f8:	mov	r0, r4
   1a2fc:	add	sp, sp, #52	; 0x34
   1a300:	pop	{r4, r5, r6, r7, pc}
   1a304:	ldr	r0, [r5]
   1a308:	bl	17274 <__assert_fail@plt+0x56d0>
   1a30c:	add	r0, sp, #12
   1a310:	ldr	ip, [sp, #8]
   1a314:	ldm	r0, {r0, r1, r2}
   1a318:	ldr	r3, [sp, #44]	; 0x2c
   1a31c:	str	ip, [r5]
   1a320:	stmib	r5, {r0, r1, r2}
   1a324:	mov	r0, r4
   1a328:	str	r3, [r5, #36]	; 0x24
   1a32c:	add	sp, sp, #52	; 0x34
   1a330:	pop	{r4, r5, r6, r7, pc}
   1a334:	bl	11b68 <abort@plt>
   1a338:	svcmi	0x00800000
   1a33c:	push	{r4, r5, r6, lr}
   1a340:	subs	r6, r1, #0
   1a344:	sub	sp, sp, #8
   1a348:	beq	1a47c <__assert_fail@plt+0x88d8>
   1a34c:	mov	r4, r2
   1a350:	mov	r3, #0
   1a354:	add	r2, sp, #4
   1a358:	mov	r5, r0
   1a35c:	bl	1974c <__assert_fail@plt+0x7ba8>
   1a360:	cmp	r0, #0
   1a364:	beq	1a380 <__assert_fail@plt+0x87dc>
   1a368:	cmp	r4, #0
   1a36c:	moveq	r0, r4
   1a370:	strne	r0, [r4]
   1a374:	movne	r0, #0
   1a378:	add	sp, sp, #8
   1a37c:	pop	{r4, r5, r6, pc}
   1a380:	vldr	s15, [r5, #8]
   1a384:	ldr	r3, [r5, #20]
   1a388:	vldr	s14, [r5, #12]
   1a38c:	vcvt.f32.u32	s15, s15
   1a390:	vldr	s13, [r3, #8]
   1a394:	vcvt.f32.u32	s14, s14
   1a398:	vmul.f32	s15, s15, s13
   1a39c:	vcmpe.f32	s14, s15
   1a3a0:	vmrs	APSR_nzcv, fpscr
   1a3a4:	bgt	1a3f4 <__assert_fail@plt+0x8850>
   1a3a8:	ldr	r2, [sp, #4]
   1a3ac:	ldr	r3, [r2]
   1a3b0:	cmp	r3, #0
   1a3b4:	beq	1a480 <__assert_fail@plt+0x88dc>
   1a3b8:	ldr	r3, [r5, #36]	; 0x24
   1a3bc:	cmp	r3, #0
   1a3c0:	beq	1a4a4 <__assert_fail@plt+0x8900>
   1a3c4:	ldr	r1, [r3, #4]
   1a3c8:	str	r1, [r5, #36]	; 0x24
   1a3cc:	ldr	r1, [r5, #16]
   1a3d0:	ldr	r0, [r2, #4]
   1a3d4:	add	r1, r1, #1
   1a3d8:	str	r0, [r3, #4]
   1a3dc:	str	r6, [r3]
   1a3e0:	mov	r0, #1
   1a3e4:	str	r3, [r2, #4]
   1a3e8:	str	r1, [r5, #16]
   1a3ec:	add	sp, sp, #8
   1a3f0:	pop	{r4, r5, r6, pc}
   1a3f4:	add	r0, r5, #20
   1a3f8:	bl	19848 <__assert_fail@plt+0x7ca4>
   1a3fc:	vldr	s15, [r5, #8]
   1a400:	ldr	r3, [r5, #20]
   1a404:	vldr	s14, [r5, #12]
   1a408:	vcvt.f32.u32	s15, s15
   1a40c:	vldr	s13, [r3, #8]
   1a410:	vcvt.f32.u32	s14, s14
   1a414:	vmul.f32	s12, s13, s15
   1a418:	vcmpe.f32	s14, s12
   1a41c:	vmrs	APSR_nzcv, fpscr
   1a420:	ble	1a3a8 <__assert_fail@plt+0x8804>
   1a424:	vldr	s14, [r3, #12]
   1a428:	ldrb	r2, [r3, #16]
   1a42c:	vmul.f32	s15, s15, s14
   1a430:	cmp	r2, #0
   1a434:	vldr	s14, [pc, #132]	; 1a4c0 <__assert_fail@plt+0x891c>
   1a438:	vmuleq.f32	s15, s15, s13
   1a43c:	vcmpe.f32	s15, s14
   1a440:	vmrs	APSR_nzcv, fpscr
   1a444:	bge	1a4b8 <__assert_fail@plt+0x8914>
   1a448:	vcvt.u32.f32	s15, s15
   1a44c:	mov	r0, r5
   1a450:	vmov	r1, s15
   1a454:	bl	1a1a8 <__assert_fail@plt+0x8604>
   1a458:	cmp	r0, #0
   1a45c:	beq	1a4b8 <__assert_fail@plt+0x8914>
   1a460:	add	r2, sp, #4
   1a464:	mov	r3, #0
   1a468:	mov	r1, r6
   1a46c:	mov	r0, r5
   1a470:	bl	1974c <__assert_fail@plt+0x7ba8>
   1a474:	cmp	r0, #0
   1a478:	beq	1a3a8 <__assert_fail@plt+0x8804>
   1a47c:	bl	11b68 <abort@plt>
   1a480:	ldr	r1, [r5, #16]
   1a484:	ldr	r3, [r5, #12]
   1a488:	add	r1, r1, #1
   1a48c:	add	r3, r3, #1
   1a490:	str	r6, [r2]
   1a494:	mov	r0, #1
   1a498:	str	r1, [r5, #16]
   1a49c:	str	r3, [r5, #12]
   1a4a0:	b	1a378 <__assert_fail@plt+0x87d4>
   1a4a4:	mov	r0, #8
   1a4a8:	bl	2d82c <__assert_fail@plt+0x1bc88>
   1a4ac:	subs	r3, r0, #0
   1a4b0:	ldrne	r2, [sp, #4]
   1a4b4:	bne	1a3cc <__assert_fail@plt+0x8828>
   1a4b8:	mvn	r0, #0
   1a4bc:	b	1a378 <__assert_fail@plt+0x87d4>
   1a4c0:	svcmi	0x00800000
   1a4c4:	push	{r4, lr}
   1a4c8:	sub	sp, sp, #8
   1a4cc:	add	r2, sp, #4
   1a4d0:	mov	r4, r1
   1a4d4:	bl	1a33c <__assert_fail@plt+0x8798>
   1a4d8:	cmn	r0, #1
   1a4dc:	beq	1a4f4 <__assert_fail@plt+0x8950>
   1a4e0:	cmp	r0, #0
   1a4e4:	movne	r0, r4
   1a4e8:	ldreq	r0, [sp, #4]
   1a4ec:	add	sp, sp, #8
   1a4f0:	pop	{r4, pc}
   1a4f4:	mov	r0, #0
   1a4f8:	b	1a4ec <__assert_fail@plt+0x8948>
   1a4fc:	push	{r4, r5, r6, lr}
   1a500:	sub	sp, sp, #8
   1a504:	mov	r3, #1
   1a508:	add	r2, sp, #4
   1a50c:	mov	r4, r0
   1a510:	bl	1974c <__assert_fail@plt+0x7ba8>
   1a514:	subs	r5, r0, #0
   1a518:	beq	1a538 <__assert_fail@plt+0x8994>
   1a51c:	ldr	r2, [sp, #4]
   1a520:	ldr	r3, [r4, #16]
   1a524:	ldr	r2, [r2]
   1a528:	sub	r3, r3, #1
   1a52c:	cmp	r2, #0
   1a530:	str	r3, [r4, #16]
   1a534:	beq	1a544 <__assert_fail@plt+0x89a0>
   1a538:	mov	r0, r5
   1a53c:	add	sp, sp, #8
   1a540:	pop	{r4, r5, r6, pc}
   1a544:	vldr	s15, [r4, #8]
   1a548:	ldr	r3, [r4, #12]
   1a54c:	ldr	r2, [r4, #20]
   1a550:	sub	r3, r3, #1
   1a554:	vcvt.f32.u32	s14, s15
   1a558:	vldr	s13, [r2]
   1a55c:	vmov	s15, r3
   1a560:	str	r3, [r4, #12]
   1a564:	vcvt.f32.u32	s15, s15
   1a568:	vmul.f32	s14, s14, s13
   1a56c:	vcmpe.f32	s15, s14
   1a570:	vmrs	APSR_nzcv, fpscr
   1a574:	bpl	1a538 <__assert_fail@plt+0x8994>
   1a578:	add	r0, r4, #20
   1a57c:	bl	19848 <__assert_fail@plt+0x7ca4>
   1a580:	vldr	s15, [r4, #8]
   1a584:	ldr	r3, [r4, #20]
   1a588:	vldr	s13, [r4, #12]
   1a58c:	vcvt.f32.u32	s15, s15
   1a590:	vldr	s14, [r3]
   1a594:	vcvt.f32.u32	s13, s13
   1a598:	vmul.f32	s14, s15, s14
   1a59c:	vcmpe.f32	s13, s14
   1a5a0:	vmrs	APSR_nzcv, fpscr
   1a5a4:	bpl	1a538 <__assert_fail@plt+0x8994>
   1a5a8:	ldrb	r2, [r3, #16]
   1a5ac:	mov	r0, r4
   1a5b0:	cmp	r2, #0
   1a5b4:	vldreq	s13, [r3, #4]
   1a5b8:	vldrne	s14, [r3, #4]
   1a5bc:	vldreq	s14, [r3, #8]
   1a5c0:	vmuleq.f32	s15, s15, s13
   1a5c4:	vmul.f32	s15, s15, s14
   1a5c8:	vcvt.u32.f32	s15, s15
   1a5cc:	vmov	r1, s15
   1a5d0:	bl	1a1a8 <__assert_fail@plt+0x8604>
   1a5d4:	cmp	r0, #0
   1a5d8:	bne	1a538 <__assert_fail@plt+0x8994>
   1a5dc:	ldr	r0, [r4, #36]	; 0x24
   1a5e0:	cmp	r0, #0
   1a5e4:	beq	1a5f8 <__assert_fail@plt+0x8a54>
   1a5e8:	ldr	r6, [r0, #4]
   1a5ec:	bl	17274 <__assert_fail@plt+0x56d0>
   1a5f0:	subs	r0, r6, #0
   1a5f4:	bne	1a5e8 <__assert_fail@plt+0x8a44>
   1a5f8:	mov	r3, #0
   1a5fc:	str	r3, [r4, #36]	; 0x24
   1a600:	b	1a538 <__assert_fail@plt+0x8994>
   1a604:	b	1a4fc <__assert_fail@plt+0x8958>
   1a608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a60c:	vpush	{d8-d9}
   1a610:	mov	r8, r3
   1a614:	ands	r3, r3, #32
   1a618:	mov	r4, r2
   1a61c:	sub	sp, sp, #124	; 0x7c
   1a620:	mov	r7, r1
   1a624:	str	r3, [sp, #20]
   1a628:	moveq	r3, #1000	; 0x3e8
   1a62c:	movne	r3, #1024	; 0x400
   1a630:	str	r2, [sp, #12]
   1a634:	str	r3, [sp, #24]
   1a638:	mov	r6, r0
   1a63c:	bl	11aa8 <localeconv@plt>
   1a640:	add	r3, r4, #644	; 0x284
   1a644:	str	r3, [sp, #36]	; 0x24
   1a648:	add	r3, r3, #3
   1a64c:	str	r3, [sp, #8]
   1a650:	ldr	r9, [r0]
   1a654:	mov	r5, r0
   1a658:	mov	r0, r9
   1a65c:	bl	11988 <strlen@plt>
   1a660:	ldr	fp, [r5, #4]
   1a664:	ldr	r3, [pc, #1036]	; 1aa78 <__assert_fail@plt+0x8ed4>
   1a668:	sub	r2, r0, #1
   1a66c:	cmp	r2, #16
   1a670:	movcc	r3, r9
   1a674:	mov	r4, r0
   1a678:	mov	r0, fp
   1a67c:	movcs	r4, #1
   1a680:	str	r3, [sp, #32]
   1a684:	bl	11988 <strlen@plt>
   1a688:	ldr	r3, [pc, #1004]	; 1aa7c <__assert_fail@plt+0x8ed8>
   1a68c:	and	r2, r8, #3
   1a690:	str	r2, [sp, #16]
   1a694:	ldr	r9, [r5, #8]
   1a698:	cmp	r0, #16
   1a69c:	movhi	fp, r3
   1a6a0:	ldrd	r0, [sp, #176]	; 0xb0
   1a6a4:	ldrd	r2, [sp, #184]	; 0xb8
   1a6a8:	str	fp, [sp, #28]
   1a6ac:	cmp	r3, r1
   1a6b0:	cmpeq	r2, r0
   1a6b4:	bhi	1a8a0 <__assert_fail@plt+0x8cfc>
   1a6b8:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a6bc:	orrs	r3, r2, r3
   1a6c0:	bne	1a700 <__assert_fail@plt+0x8b5c>
   1a6c4:	ldrd	r2, [sp, #184]	; 0xb8
   1a6c8:	ldrd	r0, [sp, #176]	; 0xb0
   1a6cc:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a6d0:	mov	r2, r0
   1a6d4:	mul	r0, r0, r7
   1a6d8:	umull	sl, fp, r2, r6
   1a6dc:	mla	r0, r6, r1, r0
   1a6e0:	mov	r3, r1
   1a6e4:	add	fp, r0, fp
   1a6e8:	mov	r1, fp
   1a6ec:	mov	r0, sl
   1a6f0:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a6f4:	cmp	r7, r1
   1a6f8:	cmpeq	r6, r0
   1a6fc:	beq	1ad0c <__assert_fail@plt+0x9168>
   1a700:	ldrd	r0, [sp, #176]	; 0xb0
   1a704:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1a708:	vmov	d9, r0, r1
   1a70c:	ldrd	r0, [sp, #184]	; 0xb8
   1a710:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1a714:	vmov	d7, r0, r1
   1a718:	mov	r0, r6
   1a71c:	mov	r1, r7
   1a720:	vdiv.f64	d8, d9, d7
   1a724:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1a728:	ands	r6, r8, #16
   1a72c:	vmov	d7, r0, r1
   1a730:	vmul.f64	d8, d8, d7
   1a734:	beq	1aa88 <__assert_fail@plt+0x8ee4>
   1a738:	vldr	s15, [sp, #24]
   1a73c:	mov	r5, #0
   1a740:	vcvt.f64.s32	d6, s15
   1a744:	vmov.f64	d7, d6
   1a748:	vmov.f64	d5, d7
   1a74c:	vmul.f64	d7, d7, d6
   1a750:	add	r5, r5, #1
   1a754:	vcmpe.f64	d8, d7
   1a758:	vmrs	APSR_nzcv, fpscr
   1a75c:	blt	1a768 <__assert_fail@plt+0x8bc4>
   1a760:	cmp	r5, #8
   1a764:	bne	1a748 <__assert_fail@plt+0x8ba4>
   1a768:	ldr	sl, [sp, #16]
   1a76c:	vdiv.f64	d9, d8, d5
   1a770:	cmp	sl, #1
   1a774:	beq	1abb4 <__assert_fail@plt+0x9010>
   1a778:	vldr	d7, [pc, #744]	; 1aa68 <__assert_fail@plt+0x8ec4>
   1a77c:	vmov	r0, r1, d9
   1a780:	vcmpe.f64	d9, d7
   1a784:	vmrs	APSR_nzcv, fpscr
   1a788:	bpl	1a7d0 <__assert_fail@plt+0x8c2c>
   1a78c:	bl	2f008 <__assert_fail@plt+0x1d464>
   1a790:	cmp	sl, #0
   1a794:	mov	r6, r0
   1a798:	mov	r7, r1
   1a79c:	movne	r0, #0
   1a7a0:	bne	1a7bc <__assert_fail@plt+0x8c18>
   1a7a4:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1a7a8:	vmov	d7, r0, r1
   1a7ac:	vcmp.f64	d7, d9
   1a7b0:	vmrs	APSR_nzcv, fpscr
   1a7b4:	movne	r0, #1
   1a7b8:	moveq	r0, #0
   1a7bc:	adds	r2, r6, r0
   1a7c0:	adc	r3, r7, #0
   1a7c4:	mov	r0, r2
   1a7c8:	mov	r1, r3
   1a7cc:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1a7d0:	ldr	r6, [sp, #12]
   1a7d4:	strd	r0, [sp]
   1a7d8:	ldr	r3, [pc, #672]	; 1aa80 <__assert_fail@plt+0x8edc>
   1a7dc:	mvn	r2, #0
   1a7e0:	mov	r1, #1
   1a7e4:	mov	r0, r6
   1a7e8:	bl	119d0 <__sprintf_chk@plt>
   1a7ec:	mov	r0, r6
   1a7f0:	bl	11988 <strlen@plt>
   1a7f4:	ldr	r3, [sp, #20]
   1a7f8:	add	r6, r4, #1
   1a7fc:	cmp	r3, #0
   1a800:	movne	r3, #1
   1a804:	moveq	r3, #2
   1a808:	add	r3, r3, r6
   1a80c:	cmp	r0, r3
   1a810:	mov	r7, r0
   1a814:	bls	1abfc <__assert_fail@plt+0x9058>
   1a818:	vldr	d7, [pc, #592]	; 1aa70 <__assert_fail@plt+0x8ecc>
   1a81c:	vmul.f64	d9, d9, d7
   1a820:	vldr	d7, [pc, #576]	; 1aa68 <__assert_fail@plt+0x8ec4>
   1a824:	vcmpe.f64	d9, d7
   1a828:	vmrs	APSR_nzcv, fpscr
   1a82c:	bpl	1a868 <__assert_fail@plt+0x8cc4>
   1a830:	vmov	r0, r1, d9
   1a834:	bl	2f008 <__assert_fail@plt+0x1d464>
   1a838:	ldr	r3, [sp, #16]
   1a83c:	cmp	r3, #0
   1a840:	mov	r6, r0
   1a844:	mov	r7, r1
   1a848:	movne	r0, #0
   1a84c:	beq	1aec0 <__assert_fail@plt+0x931c>
   1a850:	adds	r2, r6, r0
   1a854:	adc	r3, r7, #0
   1a858:	mov	r0, r2
   1a85c:	mov	r1, r3
   1a860:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1a864:	vmov	d9, r0, r1
   1a868:	vldr	d6, [pc, #512]	; 1aa70 <__assert_fail@plt+0x8ecc>
   1a86c:	ldr	r4, [sp, #12]
   1a870:	ldr	r3, [pc, #524]	; 1aa84 <__assert_fail@plt+0x8ee0>
   1a874:	mvn	r2, #0
   1a878:	vdiv.f64	d7, d9, d6
   1a87c:	mov	r1, #1
   1a880:	mov	r0, r4
   1a884:	mov	r6, #0
   1a888:	vstr	d7, [sp]
   1a88c:	bl	119d0 <__sprintf_chk@plt>
   1a890:	mov	r0, r4
   1a894:	bl	11988 <strlen@plt>
   1a898:	mov	r7, r0
   1a89c:	b	1aad4 <__assert_fail@plt+0x8f30>
   1a8a0:	ldrd	r2, [sp, #176]	; 0xb0
   1a8a4:	orrs	r3, r2, r3
   1a8a8:	beq	1a700 <__assert_fail@plt+0x8b5c>
   1a8ac:	ldrd	r2, [sp, #176]	; 0xb0
   1a8b0:	ldrd	r0, [sp, #184]	; 0xb8
   1a8b4:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a8b8:	orrs	r3, r2, r3
   1a8bc:	bne	1a700 <__assert_fail@plt+0x8b5c>
   1a8c0:	ldrd	r2, [sp, #176]	; 0xb0
   1a8c4:	ldrd	r0, [sp, #184]	; 0xb8
   1a8c8:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a8cc:	mov	sl, r0
   1a8d0:	mov	fp, r1
   1a8d4:	mov	r2, r0
   1a8d8:	mov	r3, r1
   1a8dc:	mov	r0, r6
   1a8e0:	mov	r1, r7
   1a8e4:	strd	sl, [sp, #48]	; 0x30
   1a8e8:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a8ec:	mov	r1, #10
   1a8f0:	umull	sl, fp, r2, r1
   1a8f4:	mla	r3, r1, r3, fp
   1a8f8:	strd	sl, [sp, #40]	; 0x28
   1a8fc:	ldrd	sl, [sp, #48]	; 0x30
   1a900:	str	r3, [sp, #44]	; 0x2c
   1a904:	ldrd	r0, [sp, #40]	; 0x28
   1a908:	mov	r2, sl
   1a90c:	mov	r3, fp
   1a910:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a914:	mov	r0, r6
   1a918:	mov	r1, r7
   1a91c:	lsls	r6, r2, #1
   1a920:	adc	r7, r3, r3
   1a924:	mov	r2, sl
   1a928:	mov	r3, fp
   1a92c:	strd	r6, [sp, #56]	; 0x38
   1a930:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a934:	mov	r7, fp
   1a938:	mov	r6, sl
   1a93c:	mov	r3, r7
   1a940:	mov	r2, r6
   1a944:	strd	r6, [sp, #48]	; 0x30
   1a948:	mov	sl, r0
   1a94c:	mov	fp, r1
   1a950:	ldrd	r0, [sp, #40]	; 0x28
   1a954:	bl	2efbc <__assert_fail@plt+0x1d418>
   1a958:	ldrd	r2, [sp, #48]	; 0x30
   1a95c:	mov	r7, r0
   1a960:	ldrd	r0, [sp, #56]	; 0x38
   1a964:	cmp	r3, r1
   1a968:	cmpeq	r2, r0
   1a96c:	bls	1ae9c <__assert_fail@plt+0x92f8>
   1a970:	mov	r3, r0
   1a974:	orrs	r3, r3, r1
   1a978:	movne	r3, #1
   1a97c:	moveq	r3, #0
   1a980:	str	r3, [sp, #48]	; 0x30
   1a984:	ands	r3, r8, #16
   1a988:	str	r3, [sp, #56]	; 0x38
   1a98c:	beq	1ad68 <__assert_fail@plt+0x91c4>
   1a990:	ldr	r1, [sp, #24]
   1a994:	mov	r3, #0
   1a998:	mov	r2, r1
   1a99c:	cmp	fp, r3
   1a9a0:	cmpeq	sl, r1
   1a9a4:	strd	r2, [sp, #40]	; 0x28
   1a9a8:	bcc	1aeb0 <__assert_fail@plt+0x930c>
   1a9ac:	mov	r5, #0
   1a9b0:	mov	r6, r7
   1a9b4:	str	r9, [sp, #64]	; 0x40
   1a9b8:	str	r8, [sp, #68]	; 0x44
   1a9bc:	mov	r7, r1
   1a9c0:	mov	r8, r5
   1a9c4:	mov	r9, r4
   1a9c8:	ldr	r5, [sp, #48]	; 0x30
   1a9cc:	b	1a9f8 <__assert_fail@plt+0x8e54>
   1a9d0:	cmn	r5, r4
   1a9d4:	movne	r5, #1
   1a9d8:	moveq	r5, #0
   1a9dc:	ldrd	r2, [sp, #40]	; 0x28
   1a9e0:	add	r8, r8, #1
   1a9e4:	cmp	r3, fp
   1a9e8:	cmpeq	r2, sl
   1a9ec:	bhi	1af0c <__assert_fail@plt+0x9368>
   1a9f0:	cmp	r8, #8
   1a9f4:	beq	1aee8 <__assert_fail@plt+0x9344>
   1a9f8:	mov	r0, sl
   1a9fc:	mov	r1, fp
   1aa00:	ldrd	r2, [sp, #40]	; 0x28
   1aa04:	bl	2efbc <__assert_fail@plt+0x1d418>
   1aa08:	mov	r1, r7
   1aa0c:	asr	r4, r5, #1
   1aa10:	add	r2, r2, r2, lsl #2
   1aa14:	add	r6, r6, r2, lsl #1
   1aa18:	mov	r0, r6
   1aa1c:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   1aa20:	ldrd	r2, [sp, #40]	; 0x28
   1aa24:	mov	r0, sl
   1aa28:	add	r4, r4, r1, lsl #1
   1aa2c:	mov	r1, fp
   1aa30:	bl	2efbc <__assert_fail@plt+0x1d418>
   1aa34:	mov	sl, r0
   1aa38:	mov	fp, r1
   1aa3c:	mov	r0, r6
   1aa40:	mov	r1, r7
   1aa44:	bl	2e6e4 <__assert_fail@plt+0x1cb40>
   1aa48:	cmp	r7, r4
   1aa4c:	add	r3, r5, r4
   1aa50:	mov	r6, r0
   1aa54:	bhi	1a9d0 <__assert_fail@plt+0x8e2c>
   1aa58:	cmp	r7, r3
   1aa5c:	movcs	r5, #2
   1aa60:	movcc	r5, #3
   1aa64:	b	1a9dc <__assert_fail@plt+0x8e38>
   1aa68:	andeq	r0, r0, r0
   1aa6c:	mvnsmi	r0, #0
   1aa70:	andeq	r0, r0, r0
   1aa74:	eormi	r0, r4, r0
   1aa78:	andeq	r0, r3, r4, asr #7
   1aa7c:	andeq	r0, r3, r4, lsr #23
   1aa80:	andeq	r0, r3, r8, ror #23
   1aa84:	andeq	r0, r3, r0, ror #23
   1aa88:	and	r7, r8, #3
   1aa8c:	cmp	r7, #1
   1aa90:	beq	1aaa4 <__assert_fail@plt+0x8f00>
   1aa94:	vldr	d7, [pc, #996]	; 1ae80 <__assert_fail@plt+0x92dc>
   1aa98:	vcmpe.f64	d8, d7
   1aa9c:	vmrs	APSR_nzcv, fpscr
   1aaa0:	bmi	1acc8 <__assert_fail@plt+0x9124>
   1aaa4:	ldr	r4, [sp, #12]
   1aaa8:	ldr	r3, [pc, #992]	; 1ae90 <__assert_fail@plt+0x92ec>
   1aaac:	mvn	r2, #0
   1aab0:	mov	r1, #1
   1aab4:	vstr	d8, [sp]
   1aab8:	mov	r0, r4
   1aabc:	bl	119d0 <__sprintf_chk@plt>
   1aac0:	mov	r0, r4
   1aac4:	bl	11988 <strlen@plt>
   1aac8:	mov	r6, #0
   1aacc:	mvn	r5, #0
   1aad0:	mov	r7, r0
   1aad4:	ldr	r3, [sp, #8]
   1aad8:	mov	r2, r7
   1aadc:	sub	r4, r3, r7
   1aae0:	mov	r0, r4
   1aae4:	ldr	r1, [sp, #12]
   1aae8:	bl	11748 <memmove@plt>
   1aaec:	sub	r7, r7, r6
   1aaf0:	add	r7, r4, r7
   1aaf4:	tst	r8, #4
   1aaf8:	bne	1ac30 <__assert_fail@plt+0x908c>
   1aafc:	tst	r8, #128	; 0x80
   1ab00:	beq	1ab98 <__assert_fail@plt+0x8ff4>
   1ab04:	cmn	r5, #1
   1ab08:	beq	1ad1c <__assert_fail@plt+0x9178>
   1ab0c:	and	r3, r8, #256	; 0x100
   1ab10:	orrs	r2, r5, r3
   1ab14:	beq	1ab98 <__assert_fail@plt+0x8ff4>
   1ab18:	tst	r8, #64	; 0x40
   1ab1c:	ldrne	r1, [sp, #12]
   1ab20:	addne	r2, r1, #648	; 0x288
   1ab24:	strne	r2, [sp, #8]
   1ab28:	movne	r2, #32
   1ab2c:	strbne	r2, [r1, #647]	; 0x287
   1ab30:	cmp	r5, #0
   1ab34:	beq	1b04c <__assert_fail@plt+0x94a8>
   1ab38:	ldr	r2, [sp, #20]
   1ab3c:	ldr	r0, [sp, #8]
   1ab40:	cmp	r2, #0
   1ab44:	cmpeq	r5, #1
   1ab48:	ldr	r2, [sp, #8]
   1ab4c:	ldrne	r1, [pc, #832]	; 1ae94 <__assert_fail@plt+0x92f0>
   1ab50:	moveq	r1, #107	; 0x6b
   1ab54:	add	r2, r2, #1
   1ab58:	ldrbne	r1, [r1, r5]
   1ab5c:	cmp	r3, #0
   1ab60:	streq	r2, [sp, #8]
   1ab64:	strb	r1, [r0]
   1ab68:	beq	1ab98 <__assert_fail@plt+0x8ff4>
   1ab6c:	ldr	r3, [sp, #20]
   1ab70:	cmp	r5, #0
   1ab74:	cmpne	r3, #0
   1ab78:	movne	r2, r0
   1ab7c:	movne	r3, #105	; 0x69
   1ab80:	strbne	r3, [r2, #1]
   1ab84:	addne	r2, r2, #2
   1ab88:	mov	r3, #66	; 0x42
   1ab8c:	strb	r3, [r2]
   1ab90:	add	r3, r2, #1
   1ab94:	str	r3, [sp, #8]
   1ab98:	ldr	r2, [sp, #8]
   1ab9c:	mov	r3, #0
   1aba0:	mov	r0, r4
   1aba4:	strb	r3, [r2]
   1aba8:	add	sp, sp, #124	; 0x7c
   1abac:	vpop	{d8-d9}
   1abb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abb4:	ldr	r6, [sp, #12]
   1abb8:	ldr	r3, [pc, #728]	; 1ae98 <__assert_fail@plt+0x92f4>
   1abbc:	mvn	r2, #0
   1abc0:	ldr	r1, [sp, #16]
   1abc4:	mov	r0, r6
   1abc8:	vstr	d9, [sp]
   1abcc:	bl	119d0 <__sprintf_chk@plt>
   1abd0:	mov	r0, r6
   1abd4:	bl	11988 <strlen@plt>
   1abd8:	ldr	r3, [sp, #20]
   1abdc:	add	r6, r4, #1
   1abe0:	cmp	r3, #0
   1abe4:	movne	r3, #1
   1abe8:	moveq	r3, #2
   1abec:	add	r3, r3, r6
   1abf0:	cmp	r3, r0
   1abf4:	mov	r7, r0
   1abf8:	bcc	1aedc <__assert_fail@plt+0x9338>
   1abfc:	tst	r8, #8
   1ac00:	beq	1aad4 <__assert_fail@plt+0x8f30>
   1ac04:	ldr	r3, [sp, #12]
   1ac08:	add	r3, r3, r7
   1ac0c:	ldrb	r3, [r3, #-1]
   1ac10:	cmp	r3, #48	; 0x30
   1ac14:	bne	1aad4 <__assert_fail@plt+0x8f30>
   1ac18:	vldr	d7, [pc, #616]	; 1ae88 <__assert_fail@plt+0x92e4>
   1ac1c:	ldr	r3, [sp, #16]
   1ac20:	cmp	r3, #1
   1ac24:	vmul.f64	d9, d9, d7
   1ac28:	beq	1a868 <__assert_fail@plt+0x8cc4>
   1ac2c:	b	1a820 <__assert_fail@plt+0x8c7c>
   1ac30:	ldr	r0, [sp, #28]
   1ac34:	bl	11988 <strlen@plt>
   1ac38:	sub	r6, r7, r4
   1ac3c:	mov	r1, r4
   1ac40:	mov	r2, r6
   1ac44:	mov	r3, #41	; 0x29
   1ac48:	mvn	sl, #0
   1ac4c:	mov	fp, r0
   1ac50:	add	r0, sp, #76	; 0x4c
   1ac54:	bl	1185c <__memcpy_chk@plt>
   1ac58:	ldr	r4, [sp, #28]
   1ac5c:	b	1ac64 <__assert_fail@plt+0x90c0>
   1ac60:	bl	11784 <memcpy@plt>
   1ac64:	ldrb	r3, [r9]
   1ac68:	cmp	r3, #0
   1ac6c:	beq	1ac80 <__assert_fail@plt+0x90dc>
   1ac70:	cmp	r3, #255	; 0xff
   1ac74:	movne	sl, r3
   1ac78:	moveq	sl, r6
   1ac7c:	add	r9, r9, #1
   1ac80:	cmp	sl, r6
   1ac84:	movcs	sl, r6
   1ac88:	sub	r3, r7, sl
   1ac8c:	sub	r6, r6, sl
   1ac90:	add	r2, sp, #76	; 0x4c
   1ac94:	add	r1, r2, r6
   1ac98:	mov	r0, r3
   1ac9c:	mov	r2, sl
   1aca0:	sub	r7, r3, fp
   1aca4:	bl	11784 <memcpy@plt>
   1aca8:	cmp	r6, #0
   1acac:	mov	r2, fp
   1acb0:	mov	r1, r4
   1acb4:	mov	r3, r0
   1acb8:	mov	r0, r7
   1acbc:	bne	1ac60 <__assert_fail@plt+0x90bc>
   1acc0:	mov	r4, r3
   1acc4:	b	1aafc <__assert_fail@plt+0x8f58>
   1acc8:	vmov	r0, r1, d8
   1accc:	bl	2f008 <__assert_fail@plt+0x1d464>
   1acd0:	cmp	r7, #0
   1acd4:	mov	r4, r0
   1acd8:	mov	r5, r1
   1acdc:	bne	1acf8 <__assert_fail@plt+0x9154>
   1ace0:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1ace4:	vmov	d7, r0, r1
   1ace8:	vcmp.f64	d7, d8
   1acec:	vmrs	APSR_nzcv, fpscr
   1acf0:	movne	r6, #1
   1acf4:	moveq	r6, #0
   1acf8:	adds	r0, r4, r6
   1acfc:	adc	r1, r5, #0
   1ad00:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1ad04:	vmov	d8, r0, r1
   1ad08:	b	1aaa4 <__assert_fail@plt+0x8f00>
   1ad0c:	mov	r3, #0
   1ad10:	str	r3, [sp, #48]	; 0x30
   1ad14:	mov	r7, r3
   1ad18:	b	1a984 <__assert_fail@plt+0x8de0>
   1ad1c:	ldrd	r2, [sp, #184]	; 0xb8
   1ad20:	cmp	r3, #0
   1ad24:	cmpeq	r2, #1
   1ad28:	bls	1afc0 <__assert_fail@plt+0x941c>
   1ad2c:	ldr	r1, [sp, #24]
   1ad30:	ldrd	r6, [sp, #184]	; 0xb8
   1ad34:	mov	r5, #1
   1ad38:	mov	r2, #1
   1ad3c:	mov	r3, #0
   1ad40:	mul	r0, r1, r3
   1ad44:	umull	r2, r3, r2, r1
   1ad48:	add	r3, r0, r3
   1ad4c:	cmp	r7, r3
   1ad50:	cmpeq	r6, r2
   1ad54:	bls	1ab0c <__assert_fail@plt+0x8f68>
   1ad58:	add	r5, r5, #1
   1ad5c:	cmp	r5, #8
   1ad60:	bne	1ad40 <__assert_fail@plt+0x919c>
   1ad64:	b	1ab0c <__assert_fail@plt+0x8f68>
   1ad68:	ldr	r3, [sp, #8]
   1ad6c:	mvn	r5, #0
   1ad70:	str	r3, [sp, #36]	; 0x24
   1ad74:	ldr	r3, [sp, #16]
   1ad78:	cmp	r3, #1
   1ad7c:	beq	1ae00 <__assert_fail@plt+0x925c>
   1ad80:	ldr	r3, [sp, #16]
   1ad84:	cmp	r3, #0
   1ad88:	bne	1ae28 <__assert_fail@plt+0x9284>
   1ad8c:	ldr	r3, [sp, #48]	; 0x30
   1ad90:	add	r7, r7, r3
   1ad94:	cmp	r7, #0
   1ad98:	ble	1ae28 <__assert_fail@plt+0x9284>
   1ad9c:	ldr	r3, [sp, #56]	; 0x38
   1ada0:	adds	sl, sl, #1
   1ada4:	adc	fp, fp, #0
   1ada8:	cmp	r3, #0
   1adac:	beq	1ae28 <__assert_fail@plt+0x9284>
   1adb0:	mov	r3, #0
   1adb4:	ldr	r2, [sp, #24]
   1adb8:	cmp	r3, fp
   1adbc:	cmpeq	r2, sl
   1adc0:	moveq	r3, #1
   1adc4:	movne	r3, #0
   1adc8:	cmp	r5, #7
   1adcc:	movgt	r3, #0
   1add0:	andle	r3, r3, #1
   1add4:	cmp	r3, #0
   1add8:	beq	1ae28 <__assert_fail@plt+0x9284>
   1addc:	tst	r8, #8
   1ade0:	add	r5, r5, #1
   1ade4:	beq	1b020 <__assert_fail@plt+0x947c>
   1ade8:	ldr	r2, [sp, #36]	; 0x24
   1adec:	mov	r3, #49	; 0x31
   1adf0:	sub	r4, r2, #1
   1adf4:	strb	r3, [r2, #-1]
   1adf8:	mov	r7, r2
   1adfc:	b	1aaf4 <__assert_fail@plt+0x8f50>
   1ae00:	ldr	r1, [sp, #48]	; 0x30
   1ae04:	and	r2, sl, #1
   1ae08:	adds	r2, r2, r1
   1ae0c:	mov	r3, #0
   1ae10:	adc	r3, r3, r1, asr #31
   1ae14:	orr	r2, r2, r3
   1ae18:	cmp	r2, #0
   1ae1c:	addne	r7, r7, #1
   1ae20:	cmp	r7, #5
   1ae24:	bgt	1ad9c <__assert_fail@plt+0x91f8>
   1ae28:	ldr	r4, [sp, #36]	; 0x24
   1ae2c:	mov	r6, #10
   1ae30:	mov	r7, #0
   1ae34:	mov	r0, sl
   1ae38:	mov	r1, fp
   1ae3c:	mov	r2, r6
   1ae40:	mov	r3, r7
   1ae44:	bl	2efbc <__assert_fail@plt+0x1d418>
   1ae48:	mov	r0, sl
   1ae4c:	mov	r1, fp
   1ae50:	mov	r3, r7
   1ae54:	add	r2, r2, #48	; 0x30
   1ae58:	strb	r2, [r4, #-1]!
   1ae5c:	mov	r2, r6
   1ae60:	bl	2efbc <__assert_fail@plt+0x1d418>
   1ae64:	mov	sl, r0
   1ae68:	mov	fp, r1
   1ae6c:	orrs	r3, sl, fp
   1ae70:	bne	1ae34 <__assert_fail@plt+0x9290>
   1ae74:	ldr	r7, [sp, #36]	; 0x24
   1ae78:	b	1aaf4 <__assert_fail@plt+0x8f50>
   1ae7c:	nop			; (mov r0, r0)
   1ae80:	andeq	r0, r0, r0
   1ae84:	mvnsmi	r0, #0
   1ae88:	andeq	r0, r0, r0
   1ae8c:	eormi	r0, r4, r0
   1ae90:	andeq	r0, r3, r0, ror #23
   1ae94:	andeq	r0, r3, r0, asr #23
   1ae98:	andeq	r0, r3, r8, ror #23
   1ae9c:	movcc	r3, #3
   1aea0:	strcc	r3, [sp, #48]	; 0x30
   1aea4:	movcs	r3, #2
   1aea8:	strcs	r3, [sp, #48]	; 0x30
   1aeac:	b	1a984 <__assert_fail@plt+0x8de0>
   1aeb0:	ldr	r3, [sp, #8]
   1aeb4:	mov	r5, #0
   1aeb8:	str	r3, [sp, #36]	; 0x24
   1aebc:	b	1ad74 <__assert_fail@plt+0x91d0>
   1aec0:	bl	2ee74 <__assert_fail@plt+0x1d2d0>
   1aec4:	vmov	d7, r0, r1
   1aec8:	vcmp.f64	d7, d9
   1aecc:	vmrs	APSR_nzcv, fpscr
   1aed0:	movne	r0, #1
   1aed4:	moveq	r0, #0
   1aed8:	b	1a850 <__assert_fail@plt+0x8cac>
   1aedc:	vldr	d7, [pc, #380]	; 1b060 <__assert_fail@plt+0x94bc>
   1aee0:	vmul.f64	d9, d9, d7
   1aee4:	b	1a868 <__assert_fail@plt+0x8cc4>
   1aee8:	ldr	r3, [sp, #8]
   1aeec:	str	r5, [sp, #48]	; 0x30
   1aef0:	mov	r4, r9
   1aef4:	mov	r5, r8
   1aef8:	mov	r7, r6
   1aefc:	ldr	r9, [sp, #64]	; 0x40
   1af00:	ldr	r8, [sp, #68]	; 0x44
   1af04:	str	r3, [sp, #36]	; 0x24
   1af08:	b	1ad74 <__assert_fail@plt+0x91d0>
   1af0c:	cmp	fp, #0
   1af10:	cmpeq	sl, #9
   1af14:	str	r5, [sp, #48]	; 0x30
   1af18:	mov	r4, r9
   1af1c:	mov	r5, r8
   1af20:	mov	r7, r6
   1af24:	ldr	r9, [sp, #64]	; 0x40
   1af28:	ldr	r8, [sp, #68]	; 0x44
   1af2c:	bhi	1b014 <__assert_fail@plt+0x9470>
   1af30:	ldr	r3, [sp, #16]
   1af34:	cmp	r3, #1
   1af38:	beq	1afc8 <__assert_fail@plt+0x9424>
   1af3c:	ldr	r2, [sp, #48]	; 0x30
   1af40:	ldr	r3, [sp, #16]
   1af44:	cmp	r2, #0
   1af48:	clz	r3, r3
   1af4c:	lsr	r3, r3, #5
   1af50:	moveq	r3, #0
   1af54:	cmp	r3, #0
   1af58:	beq	1afa8 <__assert_fail@plt+0x9404>
   1af5c:	add	r7, r7, #1
   1af60:	cmp	r7, #10
   1af64:	beq	1aff4 <__assert_fail@plt+0x9450>
   1af68:	add	r7, r7, #48	; 0x30
   1af6c:	uxtb	r3, r7
   1af70:	ldr	r2, [sp, #36]	; 0x24
   1af74:	ldr	r1, [sp, #12]
   1af78:	add	r7, r2, #2
   1af7c:	sub	r2, r7, r4
   1af80:	str	r2, [sp, #36]	; 0x24
   1af84:	strb	r3, [r1, #646]	; 0x286
   1af88:	mov	r0, r2
   1af8c:	mov	r3, #0
   1af90:	mov	r2, r4
   1af94:	ldr	r1, [sp, #32]
   1af98:	mov	r7, r3
   1af9c:	str	r3, [sp, #48]	; 0x30
   1afa0:	bl	11784 <memcpy@plt>
   1afa4:	b	1ad74 <__assert_fail@plt+0x91d0>
   1afa8:	cmp	r7, #0
   1afac:	bne	1af68 <__assert_fail@plt+0x93c4>
   1afb0:	tst	r8, #8
   1afb4:	bne	1afe4 <__assert_fail@plt+0x9440>
   1afb8:	mov	r3, #48	; 0x30
   1afbc:	b	1af70 <__assert_fail@plt+0x93cc>
   1afc0:	mov	r5, #0
   1afc4:	b	1ab0c <__assert_fail@plt+0x8f68>
   1afc8:	ldr	r2, [sp, #48]	; 0x30
   1afcc:	and	r3, r6, #1
   1afd0:	add	r3, r3, r2
   1afd4:	cmp	r3, #2
   1afd8:	movle	r3, #0
   1afdc:	movgt	r3, #1
   1afe0:	b	1af54 <__assert_fail@plt+0x93b0>
   1afe4:	ldr	r3, [sp, #8]
   1afe8:	mov	r7, #0
   1afec:	str	r3, [sp, #36]	; 0x24
   1aff0:	b	1ad74 <__assert_fail@plt+0x91d0>
   1aff4:	adds	sl, sl, #1
   1aff8:	adc	fp, fp, #0
   1affc:	cmp	fp, #0
   1b000:	mov	r3, #0
   1b004:	cmpeq	sl, #10
   1b008:	str	r3, [sp, #48]	; 0x30
   1b00c:	moveq	r7, r3
   1b010:	bne	1afb0 <__assert_fail@plt+0x940c>
   1b014:	ldr	r3, [sp, #8]
   1b018:	str	r3, [sp, #36]	; 0x24
   1b01c:	b	1ad74 <__assert_fail@plt+0x91d0>
   1b020:	ldr	r1, [sp, #36]	; 0x24
   1b024:	mvn	r3, r4
   1b028:	add	r3, r1, r3
   1b02c:	mov	r2, #48	; 0x30
   1b030:	strb	r2, [r1, #-1]
   1b034:	mov	r0, r3
   1b038:	ldr	r1, [sp, #32]
   1b03c:	mov	r2, r4
   1b040:	str	r3, [sp, #36]	; 0x24
   1b044:	bl	11784 <memcpy@plt>
   1b048:	b	1ade8 <__assert_fail@plt+0x9244>
   1b04c:	cmp	r3, #0
   1b050:	ldrne	r2, [sp, #8]
   1b054:	bne	1ab88 <__assert_fail@plt+0x8fe4>
   1b058:	b	1ab98 <__assert_fail@plt+0x8ff4>
   1b05c:	nop			; (mov r0, r0)
   1b060:	andeq	r0, r0, r0
   1b064:	eormi	r0, r4, r0
   1b068:	push	{r4, r5, r6, r7, r8, lr}
   1b06c:	subs	r4, r0, #0
   1b070:	sub	sp, sp, #16
   1b074:	mov	r8, r1
   1b078:	mov	r7, r2
   1b07c:	beq	1b174 <__assert_fail@plt+0x95d0>
   1b080:	ldrb	r3, [r4]
   1b084:	ldr	r5, [pc, #360]	; 1b1f4 <__assert_fail@plt+0x9650>
   1b088:	cmp	r3, #39	; 0x27
   1b08c:	addeq	r4, r4, #1
   1b090:	mov	r3, #4
   1b094:	add	r2, r5, #12
   1b098:	add	r1, r5, #20
   1b09c:	mov	r0, r4
   1b0a0:	moveq	r6, #4
   1b0a4:	movne	r6, #0
   1b0a8:	bl	13d38 <__assert_fail@plt+0x2194>
   1b0ac:	cmp	r0, #0
   1b0b0:	blt	1b110 <__assert_fail@plt+0x956c>
   1b0b4:	add	r5, r5, r0, lsl #2
   1b0b8:	mov	r1, #0
   1b0bc:	ldr	ip, [r5, #12]
   1b0c0:	mov	r0, #1
   1b0c4:	mov	r2, r0
   1b0c8:	orr	r6, r6, ip
   1b0cc:	mov	r3, r1
   1b0d0:	str	r0, [r7]
   1b0d4:	str	r1, [r7, #4]
   1b0d8:	mov	r0, #0
   1b0dc:	str	r6, [r8]
   1b0e0:	orrs	r3, r2, r3
   1b0e4:	bne	1b108 <__assert_fail@plt+0x9564>
   1b0e8:	ldr	r0, [pc, #264]	; 1b1f8 <__assert_fail@plt+0x9654>
   1b0ec:	bl	118ec <getenv@plt>
   1b0f0:	mov	r3, #0
   1b0f4:	cmp	r0, #0
   1b0f8:	movne	r2, #512	; 0x200
   1b0fc:	moveq	r2, #1024	; 0x400
   1b100:	mov	r0, #4
   1b104:	strd	r2, [r7]
   1b108:	add	sp, sp, #16
   1b10c:	pop	{r4, r5, r6, r7, r8, pc}
   1b110:	ldr	r2, [pc, #228]	; 1b1fc <__assert_fail@plt+0x9658>
   1b114:	mov	r3, r7
   1b118:	str	r2, [sp]
   1b11c:	add	r1, sp, #12
   1b120:	mov	r2, #0
   1b124:	mov	r0, r4
   1b128:	bl	2d23c <__assert_fail@plt+0x1b698>
   1b12c:	cmp	r0, #0
   1b130:	bne	1b1b8 <__assert_fail@plt+0x9614>
   1b134:	ldrb	r3, [r4]
   1b138:	sub	r3, r3, #48	; 0x30
   1b13c:	cmp	r3, #9
   1b140:	bls	1b16c <__assert_fail@plt+0x95c8>
   1b144:	ldr	r2, [sp, #12]
   1b148:	cmp	r4, r2
   1b14c:	bne	1b15c <__assert_fail@plt+0x95b8>
   1b150:	b	1b1c8 <__assert_fail@plt+0x9624>
   1b154:	cmp	r2, r4
   1b158:	beq	1b1c8 <__assert_fail@plt+0x9624>
   1b15c:	ldrb	r3, [r4, #1]!
   1b160:	sub	r3, r3, #48	; 0x30
   1b164:	cmp	r3, #9
   1b168:	bhi	1b154 <__assert_fail@plt+0x95b0>
   1b16c:	ldrd	r2, [r7]
   1b170:	b	1b0d8 <__assert_fail@plt+0x9534>
   1b174:	ldr	r0, [pc, #132]	; 1b200 <__assert_fail@plt+0x965c>
   1b178:	bl	118ec <getenv@plt>
   1b17c:	subs	r4, r0, #0
   1b180:	bne	1b080 <__assert_fail@plt+0x94dc>
   1b184:	ldr	r0, [pc, #120]	; 1b204 <__assert_fail@plt+0x9660>
   1b188:	bl	118ec <getenv@plt>
   1b18c:	subs	r4, r0, #0
   1b190:	bne	1b080 <__assert_fail@plt+0x94dc>
   1b194:	ldr	r0, [pc, #92]	; 1b1f8 <__assert_fail@plt+0x9654>
   1b198:	bl	118ec <getenv@plt>
   1b19c:	mov	r3, #0
   1b1a0:	mov	r6, #0
   1b1a4:	cmp	r0, #0
   1b1a8:	movne	r2, #512	; 0x200
   1b1ac:	moveq	r2, #1024	; 0x400
   1b1b0:	strd	r2, [r7]
   1b1b4:	b	1b0d8 <__assert_fail@plt+0x9534>
   1b1b8:	mov	r3, #0
   1b1bc:	str	r3, [r8]
   1b1c0:	ldrd	r2, [r7]
   1b1c4:	b	1b0e0 <__assert_fail@plt+0x953c>
   1b1c8:	ldrb	r3, [r2, #-1]
   1b1cc:	cmp	r3, #66	; 0x42
   1b1d0:	orrne	r6, r6, #128	; 0x80
   1b1d4:	beq	1b1e0 <__assert_fail@plt+0x963c>
   1b1d8:	orr	r6, r6, #32
   1b1dc:	b	1b16c <__assert_fail@plt+0x95c8>
   1b1e0:	ldrb	r3, [r2, #-2]
   1b1e4:	orr	r6, r6, #384	; 0x180
   1b1e8:	cmp	r3, #105	; 0x69
   1b1ec:	bne	1b16c <__assert_fail@plt+0x95c8>
   1b1f0:	b	1b1d8 <__assert_fail@plt+0x9634>
   1b1f4:	andeq	r0, r3, r0, asr #23
   1b1f8:	andeq	r0, r3, r8, lsl #24
   1b1fc:	andeq	r0, r3, r8, lsl ip
   1b200:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1b204:	strdeq	r0, [r3], -ip
   1b208:	mov	r3, #0
   1b20c:	mov	r2, #1
   1b210:	str	r1, [r0]
   1b214:	str	r1, [r0, #4]
   1b218:	str	r1, [r0, #8]
   1b21c:	str	r1, [r0, #12]
   1b220:	str	r1, [r0, #16]
   1b224:	strb	r2, [r0, #28]
   1b228:	str	r3, [r0, #20]
   1b22c:	str	r3, [r0, #24]
   1b230:	bx	lr
   1b234:	ldrb	r0, [r0, #28]
   1b238:	bx	lr
   1b23c:	ldrb	ip, [r0, #28]
   1b240:	ldr	r3, [r0, #20]
   1b244:	mov	r2, r0
   1b248:	eor	ip, ip, #1
   1b24c:	add	r3, ip, r3
   1b250:	and	r3, r3, #3
   1b254:	ldr	r0, [r0, r3, lsl #2]
   1b258:	str	r1, [r2, r3, lsl #2]
   1b25c:	ldr	r1, [r2, #24]
   1b260:	str	r3, [r2, #20]
   1b264:	cmp	r3, r1
   1b268:	addeq	r3, ip, r3
   1b26c:	andeq	r3, r3, #3
   1b270:	streq	r3, [r2, #24]
   1b274:	mov	r3, #0
   1b278:	strb	r3, [r2, #28]
   1b27c:	bx	lr
   1b280:	ldrb	r3, [r0, #28]
   1b284:	cmp	r3, #0
   1b288:	bne	1b2c0 <__assert_fail@plt+0x971c>
   1b28c:	ldr	r3, [r0, #20]
   1b290:	ldr	r1, [r0, #16]
   1b294:	ldr	r2, [r0, r3, lsl #2]
   1b298:	str	r1, [r0, r3, lsl #2]
   1b29c:	ldr	r1, [r0, #24]
   1b2a0:	cmp	r3, r1
   1b2a4:	addne	r3, r3, #3
   1b2a8:	moveq	r3, #1
   1b2ac:	andne	r3, r3, #3
   1b2b0:	strbeq	r3, [r0, #28]
   1b2b4:	strne	r3, [r0, #20]
   1b2b8:	mov	r0, r2
   1b2bc:	bx	lr
   1b2c0:	push	{r4, lr}
   1b2c4:	bl	11b68 <abort@plt>
   1b2c8:	ldm	r0, {r0, r2}
   1b2cc:	push	{r4, lr}
   1b2d0:	eor	r0, r0, r2
   1b2d4:	bl	2e8d0 <__assert_fail@plt+0x1cd2c>
   1b2d8:	mov	r0, r1
   1b2dc:	pop	{r4, pc}
   1b2e0:	push	{r4, r5}
   1b2e4:	ldrd	r2, [r1]
   1b2e8:	ldrd	r4, [r0]
   1b2ec:	cmp	r5, r3
   1b2f0:	cmpeq	r4, r2
   1b2f4:	moveq	r0, #1
   1b2f8:	movne	r0, #0
   1b2fc:	pop	{r4, r5}
   1b300:	bx	lr
   1b304:	push	{r4, r5, r6, lr}
   1b308:	mov	r6, r0
   1b30c:	sub	sp, sp, #8
   1b310:	mov	r0, #12
   1b314:	bl	2d82c <__assert_fail@plt+0x1bc88>
   1b318:	subs	r4, r0, #0
   1b31c:	beq	1b358 <__assert_fail@plt+0x97b4>
   1b320:	ldr	r2, [pc, #76]	; 1b374 <__assert_fail@plt+0x97d0>
   1b324:	ldr	r3, [pc, #76]	; 1b378 <__assert_fail@plt+0x97d4>
   1b328:	str	r2, [sp]
   1b32c:	mov	r1, #0
   1b330:	ldr	r2, [pc, #68]	; 1b37c <__assert_fail@plt+0x97d8>
   1b334:	ldr	r0, [pc, #68]	; 1b380 <__assert_fail@plt+0x97dc>
   1b338:	bl	19ed0 <__assert_fail@plt+0x832c>
   1b33c:	cmp	r0, #0
   1b340:	movne	r3, #0
   1b344:	mov	r5, r0
   1b348:	str	r0, [r4]
   1b34c:	strne	r6, [r4, #4]
   1b350:	strne	r3, [r4, #8]
   1b354:	beq	1b364 <__assert_fail@plt+0x97c0>
   1b358:	mov	r0, r4
   1b35c:	add	sp, sp, #8
   1b360:	pop	{r4, r5, r6, pc}
   1b364:	mov	r0, r4
   1b368:	bl	17274 <__assert_fail@plt+0x56d0>
   1b36c:	mov	r4, r5
   1b370:	b	1b358 <__assert_fail@plt+0x97b4>
   1b374:	andeq	r7, r1, r4, ror r2
   1b378:	andeq	fp, r1, r0, ror #5
   1b37c:	andeq	fp, r1, r8, asr #5
   1b380:	strdeq	r0, [r0], -sp
   1b384:	push	{r4, lr}
   1b388:	mov	r4, r0
   1b38c:	ldr	r0, [r0]
   1b390:	bl	1a0cc <__assert_fail@plt+0x8528>
   1b394:	ldr	r0, [r4, #8]
   1b398:	bl	17274 <__assert_fail@plt+0x56d0>
   1b39c:	mov	r0, r4
   1b3a0:	pop	{r4, lr}
   1b3a4:	b	17274 <__assert_fail@plt+0x56d0>
   1b3a8:	push	{r4, r5, lr}
   1b3ac:	mov	r5, r0
   1b3b0:	ldr	r4, [r0, #8]
   1b3b4:	sub	sp, sp, #12
   1b3b8:	cmp	r4, #0
   1b3bc:	beq	1b418 <__assert_fail@plt+0x9874>
   1b3c0:	ldrd	r0, [r4]
   1b3c4:	cmp	r1, r3
   1b3c8:	cmpeq	r0, r2
   1b3cc:	ldreq	r0, [r4, #8]
   1b3d0:	beq	1b410 <__assert_fail@plt+0x986c>
   1b3d4:	strd	r2, [r4]
   1b3d8:	mov	r1, r4
   1b3dc:	ldr	r0, [r5]
   1b3e0:	bl	1a4c4 <__assert_fail@plt+0x8920>
   1b3e4:	cmp	r0, #0
   1b3e8:	beq	1b438 <__assert_fail@plt+0x9894>
   1b3ec:	cmp	r4, r0
   1b3f0:	moveq	r2, #0
   1b3f4:	ldreq	r3, [r5, #4]
   1b3f8:	ldrne	r0, [r0, #8]
   1b3fc:	addeq	r1, r3, #1
   1b400:	moveq	r0, r3
   1b404:	stmibeq	r5, {r1, r2}
   1b408:	strne	r0, [r4, #8]
   1b40c:	streq	r3, [r4, #8]
   1b410:	add	sp, sp, #12
   1b414:	pop	{r4, r5, pc}
   1b418:	mov	r0, #16
   1b41c:	strd	r2, [sp]
   1b420:	bl	2d82c <__assert_fail@plt+0x1bc88>
   1b424:	ldrd	r2, [sp]
   1b428:	cmp	r0, #0
   1b42c:	mov	r4, r0
   1b430:	str	r0, [r5, #8]
   1b434:	bne	1b3d4 <__assert_fail@plt+0x9830>
   1b438:	mvn	r0, #0
   1b43c:	add	sp, sp, #12
   1b440:	pop	{r4, r5, pc}
   1b444:	cmp	r0, #0
   1b448:	sbcs	r3, r1, #0
   1b44c:	mov	r3, #0
   1b450:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b454:	mov	r4, r0
   1b458:	mov	r5, r1
   1b45c:	strb	r3, [r2, #20]
   1b460:	add	r6, r2, #20
   1b464:	mov	r8, #10
   1b468:	mov	r9, #0
   1b46c:	blt	1b4bc <__assert_fail@plt+0x9918>
   1b470:	mov	r0, r4
   1b474:	mov	r1, r5
   1b478:	mov	r2, r8
   1b47c:	mov	r3, r9
   1b480:	bl	2eee8 <__assert_fail@plt+0x1d344>
   1b484:	mov	r0, r4
   1b488:	mov	r1, r5
   1b48c:	mov	r3, r9
   1b490:	add	r2, r2, #48	; 0x30
   1b494:	strb	r2, [r6, #-1]!
   1b498:	mov	r2, r8
   1b49c:	bl	2eee8 <__assert_fail@plt+0x1d344>
   1b4a0:	mov	r4, r0
   1b4a4:	mov	r5, r1
   1b4a8:	orrs	r3, r4, r5
   1b4ac:	bne	1b470 <__assert_fail@plt+0x98cc>
   1b4b0:	mov	r0, r6
   1b4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b4b8:	mov	r6, r7
   1b4bc:	mov	r0, r4
   1b4c0:	mov	r1, r5
   1b4c4:	mov	r2, r8
   1b4c8:	mov	r3, r9
   1b4cc:	bl	2eee8 <__assert_fail@plt+0x1d344>
   1b4d0:	mov	r0, r4
   1b4d4:	mov	r1, r5
   1b4d8:	mov	r3, r9
   1b4dc:	sub	r7, r6, #1
   1b4e0:	rsb	r2, r2, #48	; 0x30
   1b4e4:	strb	r2, [r6, #-1]
   1b4e8:	mov	r2, r8
   1b4ec:	bl	2eee8 <__assert_fail@plt+0x1d344>
   1b4f0:	mov	r4, r0
   1b4f4:	mov	r5, r1
   1b4f8:	orrs	r3, r4, r5
   1b4fc:	bne	1b4b8 <__assert_fail@plt+0x9914>
   1b500:	mov	r3, #45	; 0x2d
   1b504:	sub	r6, r6, #2
   1b508:	strb	r3, [r7, #-1]
   1b50c:	mov	r0, r6
   1b510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b514:	push	{r4, lr}
   1b518:	mov	r4, r0
   1b51c:	bl	1173c <wcwidth@plt>
   1b520:	cmp	r0, #0
   1b524:	popge	{r4, pc}
   1b528:	mov	r0, r4
   1b52c:	bl	11814 <iswcntrl@plt>
   1b530:	clz	r0, r0
   1b534:	lsr	r0, r0, #5
   1b538:	pop	{r4, pc}
   1b53c:	mov	r3, r1
   1b540:	push	{r4, r5, r6, lr}
   1b544:	mov	r4, r1
   1b548:	ldr	r1, [r3], #16
   1b54c:	mov	r5, r0
   1b550:	cmp	r1, r3
   1b554:	strne	r1, [r0]
   1b558:	beq	1b57c <__assert_fail@plt+0x99d8>
   1b55c:	ldrb	r3, [r4, #8]
   1b560:	ldr	r2, [r4, #4]
   1b564:	cmp	r3, #0
   1b568:	strb	r3, [r5, #8]
   1b56c:	ldrne	r3, [r4, #12]
   1b570:	str	r2, [r5, #4]
   1b574:	strne	r3, [r5, #12]
   1b578:	pop	{r4, r5, r6, pc}
   1b57c:	add	r3, r0, #16
   1b580:	mov	r0, r3
   1b584:	ldr	r2, [r4, #4]
   1b588:	bl	11784 <memcpy@plt>
   1b58c:	str	r0, [r5]
   1b590:	b	1b55c <__assert_fail@plt+0x99b8>
   1b594:	ldr	r3, [pc, #20]	; 1b5b0 <__assert_fail@plt+0x9a0c>
   1b598:	lsr	r2, r0, #5
   1b59c:	and	r0, r0, #31
   1b5a0:	ldr	r3, [r3, r2, lsl #2]
   1b5a4:	lsr	r0, r3, r0
   1b5a8:	and	r0, r0, #1
   1b5ac:	bx	lr
   1b5b0:	andeq	r0, r3, ip, lsr #24
   1b5b4:	push	{r4, r5, r6, r7, lr}
   1b5b8:	subs	r6, r0, #0
   1b5bc:	sub	sp, sp, #12
   1b5c0:	addeq	r6, sp, #4
   1b5c4:	mov	r0, r6
   1b5c8:	mov	r5, r2
   1b5cc:	mov	r7, r1
   1b5d0:	bl	118b0 <mbrtowc@plt>
   1b5d4:	cmp	r5, #0
   1b5d8:	cmnne	r0, #3
   1b5dc:	mov	r4, r0
   1b5e0:	bls	1b5fc <__assert_fail@plt+0x9a58>
   1b5e4:	mov	r0, #0
   1b5e8:	bl	2e564 <__assert_fail@plt+0x1c9c0>
   1b5ec:	cmp	r0, #0
   1b5f0:	moveq	r4, #1
   1b5f4:	ldrbeq	r3, [r7]
   1b5f8:	streq	r3, [r6]
   1b5fc:	mov	r0, r4
   1b600:	add	sp, sp, #12
   1b604:	pop	{r4, r5, r6, r7, pc}
   1b608:	cmp	r0, r1
   1b60c:	beq	1baf4 <__assert_fail@plt+0x9f50>
   1b610:	push	{r4, r5, r6, r7, r8, lr}
   1b614:	sub	sp, sp, #112	; 0x70
   1b618:	mov	r5, r1
   1b61c:	mov	r4, r0
   1b620:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b624:	cmp	r0, #1
   1b628:	bls	1b760 <__assert_fail@plt+0x9bbc>
   1b62c:	ldr	r7, [pc, #1516]	; 1bc20 <__assert_fail@plt+0xa07c>
   1b630:	str	r5, [sp, #72]	; 0x48
   1b634:	mov	r5, #1
   1b638:	mov	r6, #0
   1b63c:	str	r4, [sp, #16]
   1b640:	str	r6, [sp, #8]
   1b644:	strb	r6, [sp]
   1b648:	str	r6, [sp, #4]
   1b64c:	strb	r6, [sp, #12]
   1b650:	strb	r6, [sp, #56]	; 0x38
   1b654:	str	r6, [sp, #60]	; 0x3c
   1b658:	strb	r6, [sp, #68]	; 0x44
   1b65c:	str	r6, [sp, #64]	; 0x40
   1b660:	ldrb	r3, [sp]
   1b664:	cmp	r3, #0
   1b668:	bne	1b9c4 <__assert_fail@plt+0x9e20>
   1b66c:	ldrb	r3, [r4]
   1b670:	and	r2, r3, #31
   1b674:	lsr	r3, r3, #5
   1b678:	ldr	r3, [r7, r3, lsl #2]
   1b67c:	lsr	r3, r3, r2
   1b680:	tst	r3, #1
   1b684:	beq	1b9b0 <__assert_fail@plt+0x9e0c>
   1b688:	str	r5, [sp, #20]
   1b68c:	ldrb	r4, [r4]
   1b690:	strb	r5, [sp, #24]
   1b694:	str	r4, [sp, #28]
   1b698:	cmp	r4, #0
   1b69c:	strb	r5, [sp, #12]
   1b6a0:	bne	1b7ec <__assert_fail@plt+0x9c48>
   1b6a4:	ldrb	r3, [sp, #68]	; 0x44
   1b6a8:	cmp	r3, #0
   1b6ac:	bne	1bafc <__assert_fail@plt+0x9f58>
   1b6b0:	ldrb	r3, [sp, #56]	; 0x38
   1b6b4:	ldr	r4, [sp, #72]	; 0x48
   1b6b8:	cmp	r3, #0
   1b6bc:	bne	1b6f8 <__assert_fail@plt+0x9b54>
   1b6c0:	ldrb	r3, [r4]
   1b6c4:	ldr	r1, [pc, #1364]	; 1bc20 <__assert_fail@plt+0xa07c>
   1b6c8:	and	r2, r3, #31
   1b6cc:	lsr	r3, r3, #5
   1b6d0:	ldr	r3, [r1, r3, lsl #2]
   1b6d4:	lsr	r3, r3, r2
   1b6d8:	tst	r3, #1
   1b6dc:	bne	1bbac <__assert_fail@plt+0xa008>
   1b6e0:	add	r0, sp, #60	; 0x3c
   1b6e4:	bl	117b4 <mbsinit@plt>
   1b6e8:	cmp	r0, #0
   1b6ec:	beq	1bbe8 <__assert_fail@plt+0xa044>
   1b6f0:	mov	r3, #1
   1b6f4:	strb	r3, [sp, #56]	; 0x38
   1b6f8:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b6fc:	mov	r1, r0
   1b700:	mov	r0, r4
   1b704:	bl	2baa8 <__assert_fail@plt+0x19f04>
   1b708:	add	r3, sp, #60	; 0x3c
   1b70c:	mov	r1, r4
   1b710:	mov	r2, r0
   1b714:	add	r0, sp, #84	; 0x54
   1b718:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1b71c:	add	r3, r0, #2
   1b720:	cmp	r3, #1
   1b724:	bls	1b83c <__assert_fail@plt+0x9c98>
   1b728:	cmp	r0, #0
   1b72c:	bne	1bb08 <__assert_fail@plt+0x9f64>
   1b730:	ldr	r3, [sp, #72]	; 0x48
   1b734:	mov	r2, #1
   1b738:	str	r2, [sp, #76]	; 0x4c
   1b73c:	ldrb	r3, [r3]
   1b740:	cmp	r3, #0
   1b744:	bne	1bbfc <__assert_fail@plt+0xa058>
   1b748:	ldr	r0, [sp, #84]	; 0x54
   1b74c:	cmp	r0, #0
   1b750:	bne	1babc <__assert_fail@plt+0x9f18>
   1b754:	adds	r0, r0, #0
   1b758:	mvnne	r0, #0
   1b75c:	b	1b7d0 <__assert_fail@plt+0x9c2c>
   1b760:	bl	11964 <__ctype_b_loc@plt>
   1b764:	sub	r4, r4, #1
   1b768:	sub	r6, r5, #1
   1b76c:	ldr	r8, [r0]
   1b770:	b	1b77c <__assert_fail@plt+0x9bd8>
   1b774:	cmp	r5, r0
   1b778:	bne	1b7cc <__assert_fail@plt+0x9c28>
   1b77c:	ldrb	r5, [r4, #1]!
   1b780:	sxth	r7, r5
   1b784:	lsl	r3, r7, #1
   1b788:	ldrh	r3, [r8, r3]
   1b78c:	tst	r3, #256	; 0x100
   1b790:	beq	1b7a0 <__assert_fail@plt+0x9bfc>
   1b794:	bl	11928 <__ctype_tolower_loc@plt>
   1b798:	ldr	r3, [r0]
   1b79c:	ldrb	r5, [r3, r7, lsl #2]
   1b7a0:	ldrb	r0, [r6, #1]!
   1b7a4:	sxth	r7, r0
   1b7a8:	lsl	r3, r7, #1
   1b7ac:	ldrh	r3, [r8, r3]
   1b7b0:	tst	r3, #256	; 0x100
   1b7b4:	beq	1b7c4 <__assert_fail@plt+0x9c20>
   1b7b8:	bl	11928 <__ctype_tolower_loc@plt>
   1b7bc:	ldr	r3, [r0]
   1b7c0:	ldrb	r0, [r3, r7, lsl #2]
   1b7c4:	cmp	r5, #0
   1b7c8:	bne	1b774 <__assert_fail@plt+0x9bd0>
   1b7cc:	sub	r0, r5, r0
   1b7d0:	add	sp, sp, #112	; 0x70
   1b7d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b7d8:	ldr	r0, [sp, #16]
   1b7dc:	bl	11988 <strlen@plt>
   1b7e0:	strb	r6, [sp, #24]
   1b7e4:	str	r0, [sp, #20]
   1b7e8:	strb	r5, [sp, #12]
   1b7ec:	ldrb	r3, [sp, #68]	; 0x44
   1b7f0:	cmp	r3, #0
   1b7f4:	beq	1b848 <__assert_fail@plt+0x9ca4>
   1b7f8:	ldrb	r3, [sp, #80]	; 0x50
   1b7fc:	cmp	r3, #0
   1b800:	ldrne	r8, [sp, #84]	; 0x54
   1b804:	bne	1b8f0 <__assert_fail@plt+0x9d4c>
   1b808:	ldrb	r3, [sp, #24]
   1b80c:	cmp	r3, #0
   1b810:	bne	1b83c <__assert_fail@plt+0x9c98>
   1b814:	ldr	r2, [sp, #20]
   1b818:	ldr	r3, [sp, #76]	; 0x4c
   1b81c:	cmp	r2, r3
   1b820:	beq	1ba5c <__assert_fail@plt+0x9eb8>
   1b824:	bcs	1ba28 <__assert_fail@plt+0x9e84>
   1b828:	ldr	r1, [sp, #72]	; 0x48
   1b82c:	ldr	r0, [sp, #16]
   1b830:	bl	117c0 <memcmp@plt>
   1b834:	cmp	r0, #0
   1b838:	bgt	1b960 <__assert_fail@plt+0x9dbc>
   1b83c:	mvn	r0, #0
   1b840:	add	sp, sp, #112	; 0x70
   1b844:	pop	{r4, r5, r6, r7, r8, pc}
   1b848:	ldrb	r3, [sp, #56]	; 0x38
   1b84c:	ldr	r4, [sp, #72]	; 0x48
   1b850:	cmp	r3, #0
   1b854:	bne	1b888 <__assert_fail@plt+0x9ce4>
   1b858:	ldrb	r3, [r4]
   1b85c:	and	r2, r3, #31
   1b860:	lsr	r3, r3, #5
   1b864:	ldr	r3, [r7, r3, lsl #2]
   1b868:	lsr	r3, r3, r2
   1b86c:	tst	r3, #1
   1b870:	bne	1b968 <__assert_fail@plt+0x9dc4>
   1b874:	add	r0, sp, #60	; 0x3c
   1b878:	bl	117b4 <mbsinit@plt>
   1b87c:	cmp	r0, #0
   1b880:	beq	1bbe8 <__assert_fail@plt+0xa044>
   1b884:	strb	r5, [sp, #56]	; 0x38
   1b888:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b88c:	mov	r1, r0
   1b890:	mov	r0, r4
   1b894:	bl	2baa8 <__assert_fail@plt+0x19f04>
   1b898:	add	r3, sp, #60	; 0x3c
   1b89c:	mov	r1, r4
   1b8a0:	mov	r2, r0
   1b8a4:	add	r0, sp, #84	; 0x54
   1b8a8:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1b8ac:	cmn	r0, #1
   1b8b0:	str	r0, [sp, #76]	; 0x4c
   1b8b4:	strbeq	r6, [sp, #80]	; 0x50
   1b8b8:	streq	r5, [sp, #76]	; 0x4c
   1b8bc:	strbeq	r5, [sp, #68]	; 0x44
   1b8c0:	beq	1b808 <__assert_fail@plt+0x9c64>
   1b8c4:	cmn	r0, #2
   1b8c8:	beq	1ba44 <__assert_fail@plt+0x9ea0>
   1b8cc:	cmp	r0, #0
   1b8d0:	beq	1bad0 <__assert_fail@plt+0x9f2c>
   1b8d4:	ldr	r8, [sp, #84]	; 0x54
   1b8d8:	add	r0, sp, #60	; 0x3c
   1b8dc:	strb	r5, [sp, #80]	; 0x50
   1b8e0:	bl	117b4 <mbsinit@plt>
   1b8e4:	strb	r5, [sp, #68]	; 0x44
   1b8e8:	cmp	r0, #0
   1b8ec:	strbne	r6, [sp, #56]	; 0x38
   1b8f0:	cmp	r8, #0
   1b8f4:	bne	1b988 <__assert_fail@plt+0x9de4>
   1b8f8:	ldrb	r5, [sp, #12]
   1b8fc:	cmp	r5, #0
   1b900:	ldrbne	r5, [sp, #24]
   1b904:	bne	1b958 <__assert_fail@plt+0x9db4>
   1b908:	ldrb	r3, [sp]
   1b90c:	ldr	r4, [sp, #16]
   1b910:	cmp	r3, #0
   1b914:	bne	1bb28 <__assert_fail@plt+0x9f84>
   1b918:	ldrb	r3, [r4]
   1b91c:	ldr	r1, [pc, #764]	; 1bc20 <__assert_fail@plt+0xa07c>
   1b920:	and	r2, r3, #31
   1b924:	lsr	r3, r3, #5
   1b928:	ldr	r3, [r1, r3, lsl #2]
   1b92c:	lsr	r3, r3, r2
   1b930:	tst	r3, #1
   1b934:	beq	1bb10 <__assert_fail@plt+0x9f6c>
   1b938:	mov	r3, #1
   1b93c:	str	r3, [sp, #20]
   1b940:	ldrb	r2, [r4]
   1b944:	mov	r5, r3
   1b948:	strb	r3, [sp, #24]
   1b94c:	str	r2, [sp, #28]
   1b950:	mov	r3, #1
   1b954:	strb	r3, [sp, #12]
   1b958:	cmp	r5, #0
   1b95c:	bne	1bc10 <__assert_fail@plt+0xa06c>
   1b960:	mov	r0, #1
   1b964:	b	1b7d0 <__assert_fail@plt+0x9c2c>
   1b968:	str	r5, [sp, #76]	; 0x4c
   1b96c:	ldrb	r0, [r4]
   1b970:	strb	r5, [sp, #80]	; 0x50
   1b974:	strb	r5, [sp, #68]	; 0x44
   1b978:	mov	r8, r0
   1b97c:	cmp	r8, #0
   1b980:	str	r0, [sp, #84]	; 0x54
   1b984:	beq	1b8f8 <__assert_fail@plt+0x9d54>
   1b988:	ldrb	r3, [sp, #24]
   1b98c:	cmp	r3, #0
   1b990:	beq	1b960 <__assert_fail@plt+0x9dbc>
   1b994:	ldr	r0, [sp, #28]
   1b998:	bl	117a8 <towlower@plt>
   1b99c:	mov	r4, r0
   1b9a0:	mov	r0, r8
   1b9a4:	bl	117a8 <towlower@plt>
   1b9a8:	sub	r0, r4, r0
   1b9ac:	b	1ba68 <__assert_fail@plt+0x9ec4>
   1b9b0:	add	r0, sp, #4
   1b9b4:	bl	117b4 <mbsinit@plt>
   1b9b8:	cmp	r0, #0
   1b9bc:	beq	1bbe8 <__assert_fail@plt+0xa044>
   1b9c0:	strb	r5, [sp]
   1b9c4:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b9c8:	mov	r1, r0
   1b9cc:	mov	r0, r4
   1b9d0:	bl	2baa8 <__assert_fail@plt+0x19f04>
   1b9d4:	add	r3, sp, #4
   1b9d8:	mov	r1, r4
   1b9dc:	mov	r2, r0
   1b9e0:	add	r0, sp, #28
   1b9e4:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1b9e8:	cmn	r0, #1
   1b9ec:	str	r0, [sp, #20]
   1b9f0:	strbeq	r6, [sp, #24]
   1b9f4:	streq	r5, [sp, #20]
   1b9f8:	beq	1b7e8 <__assert_fail@plt+0x9c44>
   1b9fc:	cmn	r0, #2
   1ba00:	beq	1b7d8 <__assert_fail@plt+0x9c34>
   1ba04:	cmp	r0, #0
   1ba08:	beq	1ba9c <__assert_fail@plt+0x9ef8>
   1ba0c:	ldr	r4, [sp, #28]
   1ba10:	add	r0, sp, #4
   1ba14:	strb	r5, [sp, #24]
   1ba18:	bl	117b4 <mbsinit@plt>
   1ba1c:	cmp	r0, #0
   1ba20:	strbne	r6, [sp]
   1ba24:	b	1b698 <__assert_fail@plt+0x9af4>
   1ba28:	mov	r2, r3
   1ba2c:	ldr	r1, [sp, #72]	; 0x48
   1ba30:	ldr	r0, [sp, #16]
   1ba34:	bl	117c0 <memcmp@plt>
   1ba38:	cmp	r0, #0
   1ba3c:	blt	1b83c <__assert_fail@plt+0x9c98>
   1ba40:	b	1b960 <__assert_fail@plt+0x9dbc>
   1ba44:	ldr	r0, [sp, #72]	; 0x48
   1ba48:	bl	11988 <strlen@plt>
   1ba4c:	strb	r6, [sp, #80]	; 0x50
   1ba50:	strb	r5, [sp, #68]	; 0x44
   1ba54:	str	r0, [sp, #76]	; 0x4c
   1ba58:	b	1b808 <__assert_fail@plt+0x9c64>
   1ba5c:	ldr	r1, [sp, #72]	; 0x48
   1ba60:	ldr	r0, [sp, #16]
   1ba64:	bl	117c0 <memcmp@plt>
   1ba68:	cmp	r0, #0
   1ba6c:	bne	1b7d0 <__assert_fail@plt+0x9c2c>
   1ba70:	ldr	r4, [sp, #16]
   1ba74:	ldr	r3, [sp, #72]	; 0x48
   1ba78:	ldr	r1, [sp, #20]
   1ba7c:	ldr	r2, [sp, #76]	; 0x4c
   1ba80:	add	r4, r4, r1
   1ba84:	add	r3, r3, r2
   1ba88:	strb	r0, [sp, #12]
   1ba8c:	strb	r0, [sp, #68]	; 0x44
   1ba90:	str	r4, [sp, #16]
   1ba94:	str	r3, [sp, #72]	; 0x48
   1ba98:	b	1b660 <__assert_fail@plt+0x9abc>
   1ba9c:	ldr	r3, [sp, #16]
   1baa0:	str	r5, [sp, #20]
   1baa4:	ldrb	r3, [r3]
   1baa8:	cmp	r3, #0
   1baac:	bne	1bbfc <__assert_fail@plt+0xa058>
   1bab0:	ldr	r4, [sp, #28]
   1bab4:	cmp	r4, #0
   1bab8:	beq	1ba10 <__assert_fail@plt+0x9e6c>
   1babc:	ldr	r3, [pc, #352]	; 1bc24 <__assert_fail@plt+0xa080>
   1bac0:	mov	r2, #172	; 0xac
   1bac4:	ldr	r1, [pc, #348]	; 1bc28 <__assert_fail@plt+0xa084>
   1bac8:	ldr	r0, [pc, #348]	; 1bc2c <__assert_fail@plt+0xa088>
   1bacc:	bl	11ba4 <__assert_fail@plt>
   1bad0:	ldr	r3, [sp, #72]	; 0x48
   1bad4:	str	r5, [sp, #76]	; 0x4c
   1bad8:	ldrb	r3, [r3]
   1badc:	cmp	r3, #0
   1bae0:	bne	1bbfc <__assert_fail@plt+0xa058>
   1bae4:	ldr	r8, [sp, #84]	; 0x54
   1bae8:	cmp	r8, #0
   1baec:	beq	1b8d8 <__assert_fail@plt+0x9d34>
   1baf0:	b	1babc <__assert_fail@plt+0x9f18>
   1baf4:	mov	r0, #0
   1baf8:	bx	lr
   1bafc:	ldrb	r3, [sp, #80]	; 0x50
   1bb00:	cmp	r3, #0
   1bb04:	beq	1b83c <__assert_fail@plt+0x9c98>
   1bb08:	ldr	r0, [sp, #84]	; 0x54
   1bb0c:	b	1b754 <__assert_fail@plt+0x9bb0>
   1bb10:	add	r0, sp, #4
   1bb14:	bl	117b4 <mbsinit@plt>
   1bb18:	cmp	r0, #0
   1bb1c:	beq	1bbe8 <__assert_fail@plt+0xa044>
   1bb20:	mov	r3, #1
   1bb24:	strb	r3, [sp]
   1bb28:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1bb2c:	mov	r1, r0
   1bb30:	mov	r0, r4
   1bb34:	bl	2baa8 <__assert_fail@plt+0x19f04>
   1bb38:	add	r3, sp, #4
   1bb3c:	mov	r1, r4
   1bb40:	mov	r2, r0
   1bb44:	add	r0, sp, #28
   1bb48:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1bb4c:	cmn	r0, #1
   1bb50:	str	r0, [sp, #20]
   1bb54:	beq	1bbd4 <__assert_fail@plt+0xa030>
   1bb58:	cmn	r0, #2
   1bb5c:	beq	1bbbc <__assert_fail@plt+0xa018>
   1bb60:	cmp	r0, #0
   1bb64:	bne	1bb8c <__assert_fail@plt+0x9fe8>
   1bb68:	ldr	r3, [sp, #16]
   1bb6c:	mov	r2, #1
   1bb70:	str	r2, [sp, #20]
   1bb74:	ldrb	r3, [r3]
   1bb78:	cmp	r3, #0
   1bb7c:	bne	1bbfc <__assert_fail@plt+0xa058>
   1bb80:	ldr	r3, [sp, #28]
   1bb84:	cmp	r3, #0
   1bb88:	bne	1babc <__assert_fail@plt+0x9f18>
   1bb8c:	add	r0, sp, #4
   1bb90:	mov	r5, #1
   1bb94:	strb	r5, [sp, #24]
   1bb98:	bl	117b4 <mbsinit@plt>
   1bb9c:	cmp	r0, #0
   1bba0:	movne	r3, #0
   1bba4:	strbne	r3, [sp]
   1bba8:	b	1b950 <__assert_fail@plt+0x9dac>
   1bbac:	mov	r3, #1
   1bbb0:	str	r3, [sp, #76]	; 0x4c
   1bbb4:	ldrb	r0, [r4]
   1bbb8:	b	1b754 <__assert_fail@plt+0x9bb0>
   1bbbc:	ldr	r0, [sp, #16]
   1bbc0:	bl	11988 <strlen@plt>
   1bbc4:	mov	r3, #0
   1bbc8:	strb	r3, [sp, #24]
   1bbcc:	str	r0, [sp, #20]
   1bbd0:	b	1b950 <__assert_fail@plt+0x9dac>
   1bbd4:	mov	r2, #1
   1bbd8:	mov	r3, #0
   1bbdc:	str	r2, [sp, #20]
   1bbe0:	strb	r3, [sp, #24]
   1bbe4:	b	1b950 <__assert_fail@plt+0x9dac>
   1bbe8:	ldr	r3, [pc, #52]	; 1bc24 <__assert_fail@plt+0xa080>
   1bbec:	mov	r2, #143	; 0x8f
   1bbf0:	ldr	r1, [pc, #48]	; 1bc28 <__assert_fail@plt+0xa084>
   1bbf4:	ldr	r0, [pc, #52]	; 1bc30 <__assert_fail@plt+0xa08c>
   1bbf8:	bl	11ba4 <__assert_fail@plt>
   1bbfc:	ldr	r3, [pc, #32]	; 1bc24 <__assert_fail@plt+0xa080>
   1bc00:	mov	r2, #171	; 0xab
   1bc04:	ldr	r1, [pc, #28]	; 1bc28 <__assert_fail@plt+0xa084>
   1bc08:	ldr	r0, [pc, #36]	; 1bc34 <__assert_fail@plt+0xa090>
   1bc0c:	bl	11ba4 <__assert_fail@plt>
   1bc10:	ldr	r3, [sp, #28]
   1bc14:	cmp	r3, #0
   1bc18:	bne	1b960 <__assert_fail@plt+0x9dbc>
   1bc1c:	b	1b6a4 <__assert_fail@plt+0x9b00>
   1bc20:	andeq	r0, r3, ip, lsr #24
   1bc24:	andeq	r0, r3, ip, asr #24
   1bc28:	andeq	r0, r3, r4, lsl #21
   1bc2c:	andeq	r0, r3, r4, asr #21
   1bc30:	muleq	r3, r4, sl
   1bc34:	andeq	r0, r3, ip, lsr #21
   1bc38:	push	{r4, r5, r6, r7, r8, lr}
   1bc3c:	mov	r4, r0
   1bc40:	bl	11988 <strlen@plt>
   1bc44:	adds	r0, r0, #1
   1bc48:	popeq	{r4, r5, r6, r7, r8, pc}
   1bc4c:	mov	r2, r4
   1bc50:	mov	r3, #0
   1bc54:	b	1bc6c <__assert_fail@plt+0xa0c8>
   1bc58:	mov	r3, ip
   1bc5c:	strb	r1, [r2]
   1bc60:	cmp	r0, r3
   1bc64:	add	r2, r2, #1
   1bc68:	bls	1bcdc <__assert_fail@plt+0xa138>
   1bc6c:	ldrb	r1, [r4, r3]
   1bc70:	add	ip, r3, #1
   1bc74:	cmp	r1, #92	; 0x5c
   1bc78:	bne	1bc58 <__assert_fail@plt+0xa0b4>
   1bc7c:	add	lr, r3, #4
   1bc80:	cmp	r0, lr
   1bc84:	bls	1bc58 <__assert_fail@plt+0xa0b4>
   1bc88:	ldrb	r5, [r4, ip]
   1bc8c:	add	r3, r4, r3
   1bc90:	sub	r5, r5, #48	; 0x30
   1bc94:	uxtb	r6, r5
   1bc98:	cmp	r6, #3
   1bc9c:	bhi	1bc58 <__assert_fail@plt+0xa0b4>
   1bca0:	ldrb	r6, [r3, #2]
   1bca4:	sub	r6, r6, #48	; 0x30
   1bca8:	uxtb	r7, r6
   1bcac:	cmp	r7, #7
   1bcb0:	bhi	1bc58 <__assert_fail@plt+0xa0b4>
   1bcb4:	ldrb	r7, [r3, #3]
   1bcb8:	mov	r3, lr
   1bcbc:	add	r5, r6, r5, lsl #3
   1bcc0:	sub	lr, r7, #48	; 0x30
   1bcc4:	uxtb	lr, lr
   1bcc8:	cmp	lr, #7
   1bccc:	add	r5, lr, r5, lsl #3
   1bcd0:	strbls	r5, [r2]
   1bcd4:	bls	1bc60 <__assert_fail@plt+0xa0bc>
   1bcd8:	b	1bc58 <__assert_fail@plt+0xa0b4>
   1bcdc:	pop	{r4, r5, r6, r7, r8, pc}
   1bce0:	push	{r4, lr}
   1bce4:	mov	r4, r0
   1bce8:	ldr	r0, [r0]
   1bcec:	bl	17274 <__assert_fail@plt+0x56d0>
   1bcf0:	ldr	r0, [r4, #4]
   1bcf4:	bl	17274 <__assert_fail@plt+0x56d0>
   1bcf8:	ldr	r0, [r4, #8]
   1bcfc:	bl	17274 <__assert_fail@plt+0x56d0>
   1bd00:	ldrb	r3, [r4, #24]
   1bd04:	tst	r3, #4
   1bd08:	beq	1bd14 <__assert_fail@plt+0xa170>
   1bd0c:	ldr	r0, [r4, #12]
   1bd10:	bl	17274 <__assert_fail@plt+0x56d0>
   1bd14:	mov	r0, r4
   1bd18:	pop	{r4, lr}
   1bd1c:	b	17274 <__assert_fail@plt+0x56d0>
   1bd20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd24:	sub	sp, sp, #68	; 0x44
   1bd28:	ldr	r1, [pc, #1264]	; 1c220 <__assert_fail@plt+0xa67c>
   1bd2c:	ldr	r0, [pc, #1264]	; 1c224 <__assert_fail@plt+0xa680>
   1bd30:	bl	11afc <fopen64@plt>
   1bd34:	subs	r7, r0, #0
   1bd38:	beq	1c2b0 <__assert_fail@plt+0xa70c>
   1bd3c:	add	sl, sp, #40	; 0x28
   1bd40:	ldr	r9, [pc, #1248]	; 1c228 <__assert_fail@plt+0xa684>
   1bd44:	mov	r5, sl
   1bd48:	mov	r3, #0
   1bd4c:	str	r3, [sp, #44]	; 0x2c
   1bd50:	str	r3, [sp, #48]	; 0x30
   1bd54:	mov	r3, r7
   1bd58:	mov	r2, #10
   1bd5c:	add	r1, sp, #48	; 0x30
   1bd60:	add	r0, sp, #44	; 0x2c
   1bd64:	bl	116f4 <__getdelim@plt>
   1bd68:	cmn	r0, #1
   1bd6c:	beq	1bfbc <__assert_fail@plt+0xa418>
   1bd70:	add	r3, sp, #60	; 0x3c
   1bd74:	str	r3, [sp]
   1bd78:	ldr	r0, [sp, #44]	; 0x2c
   1bd7c:	add	r3, sp, #56	; 0x38
   1bd80:	add	r2, sp, #52	; 0x34
   1bd84:	mov	r1, r9
   1bd88:	bl	11a9c <sscanf@plt>
   1bd8c:	sub	r0, r0, #2
   1bd90:	cmp	r0, #1
   1bd94:	bhi	1bd54 <__assert_fail@plt+0xa1b0>
   1bd98:	ldr	r3, [sp, #60]	; 0x3c
   1bd9c:	ldr	sl, [sp, #44]	; 0x2c
   1bda0:	mov	r1, #32
   1bda4:	add	sl, sl, r3
   1bda8:	mov	r0, sl
   1bdac:	bl	11994 <strchr@plt>
   1bdb0:	subs	r6, r0, #0
   1bdb4:	beq	1bd54 <__assert_fail@plt+0xa1b0>
   1bdb8:	mov	r8, #0
   1bdbc:	strb	r8, [r6], #1
   1bdc0:	mov	r1, #32
   1bdc4:	mov	r0, r6
   1bdc8:	bl	11994 <strchr@plt>
   1bdcc:	cmp	r0, #0
   1bdd0:	beq	1bd54 <__assert_fail@plt+0xa1b0>
   1bdd4:	ldr	r1, [pc, #1104]	; 1c22c <__assert_fail@plt+0xa688>
   1bdd8:	strb	r8, [r0], #1
   1bddc:	bl	2dd7c <__assert_fail@plt+0x1c1d8>
   1bde0:	cmp	r0, #0
   1bde4:	beq	1bd54 <__assert_fail@plt+0xa1b0>
   1bde8:	add	fp, r0, #3
   1bdec:	mov	r0, fp
   1bdf0:	mov	r1, #32
   1bdf4:	bl	11994 <strchr@plt>
   1bdf8:	subs	r3, r0, #0
   1bdfc:	beq	1bd54 <__assert_fail@plt+0xa1b0>
   1be00:	strb	r8, [r3], #1
   1be04:	mov	r1, #32
   1be08:	mov	r0, r3
   1be0c:	str	r3, [sp, #32]
   1be10:	bl	11994 <strchr@plt>
   1be14:	cmp	r0, #0
   1be18:	beq	1bd54 <__assert_fail@plt+0xa1b0>
   1be1c:	ldr	r3, [sp, #32]
   1be20:	strb	r8, [r0]
   1be24:	mov	r0, r3
   1be28:	bl	1bc38 <__assert_fail@plt+0xa094>
   1be2c:	mov	r0, r6
   1be30:	bl	1bc38 <__assert_fail@plt+0xa094>
   1be34:	mov	r0, sl
   1be38:	bl	1bc38 <__assert_fail@plt+0xa094>
   1be3c:	mov	r0, fp
   1be40:	bl	1bc38 <__assert_fail@plt+0xa094>
   1be44:	mov	r0, #32
   1be48:	bl	2c4bc <__assert_fail@plt+0x1a918>
   1be4c:	ldr	r3, [sp, #32]
   1be50:	mov	r4, r0
   1be54:	mov	r0, r3
   1be58:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   1be5c:	str	r8, [sp, #12]
   1be60:	str	r8, [sp, #20]
   1be64:	str	r0, [r4]
   1be68:	mov	r0, r6
   1be6c:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   1be70:	str	r0, [r4, #4]
   1be74:	mov	r0, sl
   1be78:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   1be7c:	ldr	sl, [pc, #940]	; 1c230 <__assert_fail@plt+0xa68c>
   1be80:	str	r0, [r4, #8]
   1be84:	mov	r0, fp
   1be88:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   1be8c:	ldr	r3, [sp, #52]	; 0x34
   1be90:	mov	fp, #0
   1be94:	str	r3, [sp, #28]
   1be98:	lsr	r2, r3, #24
   1be9c:	lsl	r3, r3, #8
   1bea0:	str	r2, [sp, #12]
   1bea4:	str	r3, [sp, #8]
   1bea8:	ldrd	r2, [sp, #8]
   1beac:	str	r8, [sp, #24]
   1beb0:	ldr	r1, [sp, #56]	; 0x38
   1beb4:	and	r2, r2, sl
   1beb8:	and	r3, r3, fp
   1bebc:	ldr	fp, [pc, #880]	; 1c234 <__assert_fail@plt+0xa690>
   1bec0:	strd	r2, [sp, #32]
   1bec4:	ldrd	r2, [sp, #24]
   1bec8:	mov	sl, #0
   1becc:	lsr	ip, r1, #20
   1bed0:	and	sl, sl, r2
   1bed4:	and	fp, fp, r3
   1bed8:	mov	r2, sl
   1bedc:	mov	r3, fp
   1bee0:	ldrd	sl, [sp, #32]
   1bee4:	str	ip, [sp, #20]
   1bee8:	ldrb	ip, [r4, #24]
   1beec:	orr	sl, sl, r2
   1bef0:	orr	fp, fp, r3
   1bef4:	lsl	r3, r1, #12
   1bef8:	uxtb	r1, r1
   1befc:	orr	sl, sl, r1
   1bf00:	str	r3, [sp, #16]
   1bf04:	strd	sl, [sp, #32]
   1bf08:	add	r3, pc, #776	; 0x308
   1bf0c:	ldrd	r2, [r3]
   1bf10:	ldrd	sl, [sp, #16]
   1bf14:	orr	ip, ip, #4
   1bf18:	strb	ip, [r4, #24]
   1bf1c:	and	sl, sl, r2
   1bf20:	and	fp, fp, r3
   1bf24:	mov	r2, sl
   1bf28:	mov	r3, fp
   1bf2c:	ldrd	sl, [sp, #32]
   1bf30:	ldr	r1, [pc, #780]	; 1c244 <__assert_fail@plt+0xa6a0>
   1bf34:	str	r0, [r4, #12]
   1bf38:	orr	sl, sl, r2
   1bf3c:	orr	fp, fp, r3
   1bf40:	mov	r2, sl
   1bf44:	mov	r3, fp
   1bf48:	mov	r6, r0
   1bf4c:	strd	r2, [r4, #16]
   1bf50:	bl	1170c <strcmp@plt>
   1bf54:	cmp	r0, r8
   1bf58:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1bf5c:	ldr	r1, [pc, #740]	; 1c248 <__assert_fail@plt+0xa6a4>
   1bf60:	mov	r0, r6
   1bf64:	bl	1170c <strcmp@plt>
   1bf68:	cmp	r0, r8
   1bf6c:	bne	1bff8 <__assert_fail@plt+0xa454>
   1bf70:	mov	r0, #1
   1bf74:	ldrb	r3, [r4, #24]
   1bf78:	ldr	r8, [r4]
   1bf7c:	mov	r1, #58	; 0x3a
   1bf80:	bic	r3, r3, #1
   1bf84:	orr	r3, r0, r3
   1bf88:	strb	r3, [r4, #24]
   1bf8c:	mov	r0, r8
   1bf90:	bl	11994 <strchr@plt>
   1bf94:	cmp	r0, #0
   1bf98:	beq	1c0ec <__assert_fail@plt+0xa548>
   1bf9c:	mov	r3, #1
   1bfa0:	ldrb	r0, [r4, #24]
   1bfa4:	bic	r0, r0, #2
   1bfa8:	orr	r0, r0, r3, lsl #1
   1bfac:	strb	r0, [r4, #24]
   1bfb0:	str	r4, [r5]
   1bfb4:	add	r5, r4, #28
   1bfb8:	b	1bd54 <__assert_fail@plt+0xa1b0>
   1bfbc:	ldr	r0, [sp, #44]	; 0x2c
   1bfc0:	bl	17274 <__assert_fail@plt+0x56d0>
   1bfc4:	ldr	r3, [r7]
   1bfc8:	mov	sl, r5
   1bfcc:	tst	r3, #32
   1bfd0:	bne	1c1c4 <__assert_fail@plt+0xa620>
   1bfd4:	mov	r0, r7
   1bfd8:	bl	154f0 <__assert_fail@plt+0x394c>
   1bfdc:	cmn	r0, #1
   1bfe0:	beq	1c594 <__assert_fail@plt+0xa9f0>
   1bfe4:	mov	r3, #0
   1bfe8:	str	r3, [sl]
   1bfec:	ldr	r0, [sp, #40]	; 0x28
   1bff0:	add	sp, sp, #68	; 0x44
   1bff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bff8:	ldr	r1, [pc, #588]	; 1c24c <__assert_fail@plt+0xa6a8>
   1bffc:	mov	r0, r6
   1c000:	bl	1170c <strcmp@plt>
   1c004:	cmp	r0, r8
   1c008:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c00c:	ldr	r1, [pc, #572]	; 1c250 <__assert_fail@plt+0xa6ac>
   1c010:	mov	r0, r6
   1c014:	bl	1170c <strcmp@plt>
   1c018:	cmp	r0, r8
   1c01c:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c020:	ldr	r1, [pc, #556]	; 1c254 <__assert_fail@plt+0xa6b0>
   1c024:	mov	r0, r6
   1c028:	bl	1170c <strcmp@plt>
   1c02c:	cmp	r0, r8
   1c030:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c034:	ldr	r1, [pc, #540]	; 1c258 <__assert_fail@plt+0xa6b4>
   1c038:	mov	r0, r6
   1c03c:	bl	1170c <strcmp@plt>
   1c040:	cmp	r0, r8
   1c044:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c048:	ldr	r1, [pc, #524]	; 1c25c <__assert_fail@plt+0xa6b8>
   1c04c:	mov	r0, r6
   1c050:	bl	1170c <strcmp@plt>
   1c054:	cmp	r0, r8
   1c058:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c05c:	ldr	r1, [pc, #508]	; 1c260 <__assert_fail@plt+0xa6bc>
   1c060:	mov	r0, r6
   1c064:	bl	1170c <strcmp@plt>
   1c068:	cmp	r0, r8
   1c06c:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c070:	ldr	r1, [pc, #492]	; 1c264 <__assert_fail@plt+0xa6c0>
   1c074:	mov	r0, r6
   1c078:	bl	1170c <strcmp@plt>
   1c07c:	cmp	r0, r8
   1c080:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c084:	ldr	r1, [pc, #476]	; 1c268 <__assert_fail@plt+0xa6c4>
   1c088:	mov	r0, r6
   1c08c:	bl	1170c <strcmp@plt>
   1c090:	cmp	r0, r8
   1c094:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c098:	ldr	r1, [pc, #460]	; 1c26c <__assert_fail@plt+0xa6c8>
   1c09c:	mov	r0, r6
   1c0a0:	bl	1170c <strcmp@plt>
   1c0a4:	cmp	r0, r8
   1c0a8:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c0ac:	ldr	r1, [pc, #444]	; 1c270 <__assert_fail@plt+0xa6cc>
   1c0b0:	mov	r0, r6
   1c0b4:	bl	1170c <strcmp@plt>
   1c0b8:	cmp	r0, r8
   1c0bc:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c0c0:	ldr	r1, [pc, #428]	; 1c274 <__assert_fail@plt+0xa6d0>
   1c0c4:	mov	r0, r6
   1c0c8:	bl	1170c <strcmp@plt>
   1c0cc:	cmp	r0, r8
   1c0d0:	beq	1bf70 <__assert_fail@plt+0xa3cc>
   1c0d4:	ldr	r1, [pc, #412]	; 1c278 <__assert_fail@plt+0xa6d4>
   1c0d8:	mov	r0, r6
   1c0dc:	bl	1170c <strcmp@plt>
   1c0e0:	clz	r0, r0
   1c0e4:	lsr	r0, r0, #5
   1c0e8:	b	1bf74 <__assert_fail@plt+0xa3d0>
   1c0ec:	ldrb	r3, [r8]
   1c0f0:	cmp	r3, #47	; 0x2f
   1c0f4:	beq	1c5a4 <__assert_fail@plt+0xaa00>
   1c0f8:	ldr	r1, [pc, #380]	; 1c27c <__assert_fail@plt+0xa6d8>
   1c0fc:	mov	r0, r6
   1c100:	bl	1170c <strcmp@plt>
   1c104:	cmp	r0, #0
   1c108:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c10c:	ldr	r1, [pc, #364]	; 1c280 <__assert_fail@plt+0xa6dc>
   1c110:	mov	r0, r6
   1c114:	bl	1170c <strcmp@plt>
   1c118:	cmp	r0, #0
   1c11c:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c120:	ldr	r1, [pc, #348]	; 1c284 <__assert_fail@plt+0xa6e0>
   1c124:	mov	r0, r6
   1c128:	bl	1170c <strcmp@plt>
   1c12c:	cmp	r0, #0
   1c130:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c134:	ldr	r1, [pc, #332]	; 1c288 <__assert_fail@plt+0xa6e4>
   1c138:	mov	r0, r6
   1c13c:	bl	1170c <strcmp@plt>
   1c140:	cmp	r0, #0
   1c144:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c148:	ldr	r1, [pc, #316]	; 1c28c <__assert_fail@plt+0xa6e8>
   1c14c:	mov	r0, r6
   1c150:	bl	1170c <strcmp@plt>
   1c154:	cmp	r0, #0
   1c158:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c15c:	ldr	r1, [pc, #300]	; 1c290 <__assert_fail@plt+0xa6ec>
   1c160:	mov	r0, r6
   1c164:	bl	1170c <strcmp@plt>
   1c168:	cmp	r0, #0
   1c16c:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c170:	ldr	r1, [pc, #284]	; 1c294 <__assert_fail@plt+0xa6f0>
   1c174:	mov	r0, r6
   1c178:	bl	1170c <strcmp@plt>
   1c17c:	cmp	r0, #0
   1c180:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c184:	ldr	r1, [pc, #268]	; 1c298 <__assert_fail@plt+0xa6f4>
   1c188:	mov	r0, r6
   1c18c:	bl	1170c <strcmp@plt>
   1c190:	cmp	r0, #0
   1c194:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c198:	mov	r0, r6
   1c19c:	ldr	r1, [pc, #248]	; 1c29c <__assert_fail@plt+0xa6f8>
   1c1a0:	bl	1170c <strcmp@plt>
   1c1a4:	cmp	r0, #0
   1c1a8:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c1ac:	mov	r1, r8
   1c1b0:	ldr	r0, [pc, #232]	; 1c2a0 <__assert_fail@plt+0xa6fc>
   1c1b4:	bl	1170c <strcmp@plt>
   1c1b8:	clz	r3, r0
   1c1bc:	lsr	r3, r3, #5
   1c1c0:	b	1bfa0 <__assert_fail@plt+0xa3fc>
   1c1c4:	bl	119b8 <__errno_location@plt>
   1c1c8:	mov	r5, r0
   1c1cc:	mov	r0, r7
   1c1d0:	ldr	r6, [r5]
   1c1d4:	bl	154f0 <__assert_fail@plt+0x394c>
   1c1d8:	str	r6, [r5]
   1c1dc:	mov	r3, #0
   1c1e0:	str	r3, [sl]
   1c1e4:	ldr	r0, [sp, #40]	; 0x28
   1c1e8:	cmp	r0, r3
   1c1ec:	beq	1c204 <__assert_fail@plt+0xa660>
   1c1f0:	ldr	r4, [r0, #28]
   1c1f4:	bl	1bce0 <__assert_fail@plt+0xa13c>
   1c1f8:	subs	r0, r4, #0
   1c1fc:	str	r4, [sp, #40]	; 0x28
   1c200:	bne	1c1f0 <__assert_fail@plt+0xa64c>
   1c204:	mov	r0, #0
   1c208:	str	r6, [r5]
   1c20c:	add	sp, sp, #68	; 0x44
   1c210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c214:	nop			; (mov r0, r0)
   1c218:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1c21c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1c220:	strdeq	r0, [r3], -ip
   1c224:	andeq	r0, r3, r0, ror #24
   1c228:	andeq	r0, r3, r8, ror ip
   1c22c:	andeq	r0, r3, ip, lsl #25
   1c230:	andeq	pc, pc, r0, lsl #30
   1c234:			; <UNDEFINED> instruction: 0xfffff000
   1c238:	andeq	r1, r3, r0, lsl #1
   1c23c:	andeq	r0, r3, r0, ror sp
   1c240:	andeq	r0, r3, ip, ror sp
   1c244:	muleq	r3, r0, ip
   1c248:	muleq	r3, r8, ip
   1c24c:	andeq	r0, r3, r0, lsr #25
   1c250:	andeq	r0, r3, r8, lsr #25
   1c254:			; <UNDEFINED> instruction: 0x00030cb0
   1c258:			; <UNDEFINED> instruction: 0x00030cb8
   1c25c:	andeq	r0, r3, r0, asr #25
   1c260:	andeq	r0, r3, ip, asr #25
   1c264:	ldrdeq	r0, [r3], -r4
   1c268:	andeq	r0, r3, r0, ror #25
   1c26c:	andeq	r0, r3, r8, ror #25
   1c270:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1c274:	strdeq	r0, [r3], -r8
   1c278:	andeq	r0, r3, r0, lsl #26
   1c27c:	andeq	r0, r3, r0, lsr #26
   1c280:	andeq	r0, r3, r8, lsr #26
   1c284:	andeq	r0, r3, ip, lsr #26
   1c288:	andeq	r0, r3, r4, lsr sp
   1c28c:	andeq	r0, r3, r0, asr #26
   1c290:	andeq	r0, r3, r8, asr #26
   1c294:	andeq	r0, r3, r0, asr sp
   1c298:	andeq	r0, r3, r8, asr sp
   1c29c:	andeq	r0, r3, r0, ror #26
   1c2a0:	andeq	r0, r3, r8, ror #26
   1c2a4:	andeq	r0, r3, r8, lsl #26
   1c2a8:	andeq	r0, r3, r0, lsl sp
   1c2ac:	andeq	r0, r3, r8, lsl sp
   1c2b0:	ldr	r1, [pc, #-128]	; 1c238 <__assert_fail@plt+0xa694>
   1c2b4:	ldr	r0, [pc, #-128]	; 1c23c <__assert_fail@plt+0xa698>
   1c2b8:	bl	11b14 <setmntent@plt>
   1c2bc:	subs	r5, r0, #0
   1c2c0:	beq	1c63c <__assert_fail@plt+0xaa98>
   1c2c4:	ldr	r8, [pc, #-140]	; 1c240 <__assert_fail@plt+0xa69c>
   1c2c8:	ldr	r7, [pc, #-140]	; 1c244 <__assert_fail@plt+0xa6a0>
   1c2cc:	ldr	r9, [pc, #-140]	; 1c248 <__assert_fail@plt+0xa6a4>
   1c2d0:	add	sl, sp, #40	; 0x28
   1c2d4:	mov	r0, r5
   1c2d8:	bl	118c8 <getmntent@plt>
   1c2dc:	subs	r6, r0, #0
   1c2e0:	beq	1c584 <__assert_fail@plt+0xa9e0>
   1c2e4:	mov	r1, r8
   1c2e8:	bl	1188c <hasmntopt@plt>
   1c2ec:	mov	fp, r0
   1c2f0:	mov	r0, #32
   1c2f4:	bl	2c4bc <__assert_fail@plt+0x1a918>
   1c2f8:	mov	r4, r0
   1c2fc:	ldr	r0, [r6]
   1c300:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   1c304:	str	r0, [r4]
   1c308:	ldr	r0, [r6, #4]
   1c30c:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   1c310:	mov	r3, #0
   1c314:	stmib	r4, {r0, r3}
   1c318:	ldr	r0, [r6, #8]
   1c31c:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   1c320:	ldrb	r3, [r4, #24]
   1c324:	mov	r1, r7
   1c328:	orr	r3, r3, #4
   1c32c:	strb	r3, [r4, #24]
   1c330:	str	r0, [r4, #12]
   1c334:	mov	r6, r0
   1c338:	bl	1170c <strcmp@plt>
   1c33c:	cmp	r0, #0
   1c340:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c344:	mov	r1, r9
   1c348:	mov	r0, r6
   1c34c:	bl	1170c <strcmp@plt>
   1c350:	cmp	r0, #0
   1c354:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c358:	ldr	r1, [pc, #-276]	; 1c24c <__assert_fail@plt+0xa6a8>
   1c35c:	mov	r0, r6
   1c360:	bl	1170c <strcmp@plt>
   1c364:	cmp	r0, #0
   1c368:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c36c:	ldr	r1, [pc, #-292]	; 1c250 <__assert_fail@plt+0xa6ac>
   1c370:	mov	r0, r6
   1c374:	bl	1170c <strcmp@plt>
   1c378:	cmp	r0, #0
   1c37c:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c380:	ldr	r1, [pc, #-308]	; 1c254 <__assert_fail@plt+0xa6b0>
   1c384:	mov	r0, r6
   1c388:	bl	1170c <strcmp@plt>
   1c38c:	cmp	r0, #0
   1c390:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c394:	ldr	r1, [pc, #-324]	; 1c258 <__assert_fail@plt+0xa6b4>
   1c398:	mov	r0, r6
   1c39c:	bl	1170c <strcmp@plt>
   1c3a0:	cmp	r0, #0
   1c3a4:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c3a8:	ldr	r1, [pc, #-340]	; 1c25c <__assert_fail@plt+0xa6b8>
   1c3ac:	mov	r0, r6
   1c3b0:	bl	1170c <strcmp@plt>
   1c3b4:	cmp	r0, #0
   1c3b8:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c3bc:	ldr	r1, [pc, #-356]	; 1c260 <__assert_fail@plt+0xa6bc>
   1c3c0:	mov	r0, r6
   1c3c4:	bl	1170c <strcmp@plt>
   1c3c8:	cmp	r0, #0
   1c3cc:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c3d0:	ldr	r1, [pc, #-372]	; 1c264 <__assert_fail@plt+0xa6c0>
   1c3d4:	mov	r0, r6
   1c3d8:	bl	1170c <strcmp@plt>
   1c3dc:	cmp	r0, #0
   1c3e0:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c3e4:	ldr	r1, [pc, #-388]	; 1c268 <__assert_fail@plt+0xa6c4>
   1c3e8:	mov	r0, r6
   1c3ec:	bl	1170c <strcmp@plt>
   1c3f0:	cmp	r0, #0
   1c3f4:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c3f8:	ldr	r1, [pc, #-404]	; 1c26c <__assert_fail@plt+0xa6c8>
   1c3fc:	mov	r0, r6
   1c400:	bl	1170c <strcmp@plt>
   1c404:	cmp	r0, #0
   1c408:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c40c:	ldr	r1, [pc, #-420]	; 1c270 <__assert_fail@plt+0xa6cc>
   1c410:	mov	r0, r6
   1c414:	bl	1170c <strcmp@plt>
   1c418:	cmp	r0, #0
   1c41c:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c420:	ldr	r1, [pc, #-436]	; 1c274 <__assert_fail@plt+0xa6d0>
   1c424:	mov	r0, r6
   1c428:	bl	1170c <strcmp@plt>
   1c42c:	cmp	r0, #0
   1c430:	beq	1c454 <__assert_fail@plt+0xa8b0>
   1c434:	ldr	r1, [pc, #-452]	; 1c278 <__assert_fail@plt+0xa6d4>
   1c438:	mov	r0, r6
   1c43c:	bl	1170c <strcmp@plt>
   1c440:	cmp	r0, #0
   1c444:	cmpeq	fp, #0
   1c448:	moveq	r0, #1
   1c44c:	movne	r0, #0
   1c450:	b	1c458 <__assert_fail@plt+0xa8b4>
   1c454:	mov	r0, #1
   1c458:	ldrb	r3, [r4, #24]
   1c45c:	ldr	fp, [r4]
   1c460:	mov	r1, #58	; 0x3a
   1c464:	bic	r3, r3, #1
   1c468:	orr	r3, r0, r3
   1c46c:	strb	r3, [r4, #24]
   1c470:	mov	r0, fp
   1c474:	bl	11994 <strchr@plt>
   1c478:	cmp	r0, #0
   1c47c:	beq	1c4ac <__assert_fail@plt+0xa908>
   1c480:	mov	r1, #1
   1c484:	ldrb	r0, [r4, #24]
   1c488:	mvn	r2, #0
   1c48c:	mvn	r3, #0
   1c490:	bic	r0, r0, #2
   1c494:	orr	r0, r0, r1, lsl #1
   1c498:	strb	r0, [r4, #24]
   1c49c:	strd	r2, [r4, #16]
   1c4a0:	str	r4, [sl]
   1c4a4:	add	sl, r4, #28
   1c4a8:	b	1c2d4 <__assert_fail@plt+0xa730>
   1c4ac:	ldrb	r3, [fp]
   1c4b0:	cmp	r3, #47	; 0x2f
   1c4b4:	beq	1c5f0 <__assert_fail@plt+0xaa4c>
   1c4b8:	ldr	r1, [pc, #-580]	; 1c27c <__assert_fail@plt+0xa6d8>
   1c4bc:	mov	r0, r6
   1c4c0:	bl	1170c <strcmp@plt>
   1c4c4:	cmp	r0, #0
   1c4c8:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c4cc:	ldr	r1, [pc, #-596]	; 1c280 <__assert_fail@plt+0xa6dc>
   1c4d0:	mov	r0, r6
   1c4d4:	bl	1170c <strcmp@plt>
   1c4d8:	cmp	r0, #0
   1c4dc:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c4e0:	ldr	r1, [pc, #-612]	; 1c284 <__assert_fail@plt+0xa6e0>
   1c4e4:	mov	r0, r6
   1c4e8:	bl	1170c <strcmp@plt>
   1c4ec:	cmp	r0, #0
   1c4f0:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c4f4:	ldr	r1, [pc, #-628]	; 1c288 <__assert_fail@plt+0xa6e4>
   1c4f8:	mov	r0, r6
   1c4fc:	bl	1170c <strcmp@plt>
   1c500:	cmp	r0, #0
   1c504:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c508:	ldr	r1, [pc, #-644]	; 1c28c <__assert_fail@plt+0xa6e8>
   1c50c:	mov	r0, r6
   1c510:	bl	1170c <strcmp@plt>
   1c514:	cmp	r0, #0
   1c518:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c51c:	ldr	r1, [pc, #-660]	; 1c290 <__assert_fail@plt+0xa6ec>
   1c520:	mov	r0, r6
   1c524:	bl	1170c <strcmp@plt>
   1c528:	cmp	r0, #0
   1c52c:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c530:	ldr	r1, [pc, #-676]	; 1c294 <__assert_fail@plt+0xa6f0>
   1c534:	mov	r0, r6
   1c538:	bl	1170c <strcmp@plt>
   1c53c:	cmp	r0, #0
   1c540:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c544:	ldr	r1, [pc, #-692]	; 1c298 <__assert_fail@plt+0xa6f4>
   1c548:	mov	r0, r6
   1c54c:	bl	1170c <strcmp@plt>
   1c550:	cmp	r0, #0
   1c554:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c558:	mov	r0, r6
   1c55c:	ldr	r1, [pc, #-712]	; 1c29c <__assert_fail@plt+0xa6f8>
   1c560:	bl	1170c <strcmp@plt>
   1c564:	cmp	r0, #0
   1c568:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c56c:	mov	r1, fp
   1c570:	ldr	r0, [pc, #-728]	; 1c2a0 <__assert_fail@plt+0xa6fc>
   1c574:	bl	1170c <strcmp@plt>
   1c578:	clz	r1, r0
   1c57c:	lsr	r1, r1, #5
   1c580:	b	1c484 <__assert_fail@plt+0xa8e0>
   1c584:	mov	r0, r5
   1c588:	bl	11a48 <endmntent@plt>
   1c58c:	cmp	r0, #0
   1c590:	bne	1bfe4 <__assert_fail@plt+0xa440>
   1c594:	bl	119b8 <__errno_location@plt>
   1c598:	mov	r5, r0
   1c59c:	ldr	r6, [r0]
   1c5a0:	b	1c1dc <__assert_fail@plt+0xa638>
   1c5a4:	ldrb	r3, [r8, #1]
   1c5a8:	cmp	r3, #47	; 0x2f
   1c5ac:	bne	1c0f8 <__assert_fail@plt+0xa554>
   1c5b0:	ldr	r1, [pc, #-788]	; 1c2a4 <__assert_fail@plt+0xa700>
   1c5b4:	mov	r0, r6
   1c5b8:	bl	1170c <strcmp@plt>
   1c5bc:	cmp	r0, #0
   1c5c0:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c5c4:	ldr	r1, [pc, #-804]	; 1c2a8 <__assert_fail@plt+0xa704>
   1c5c8:	mov	r0, r6
   1c5cc:	bl	1170c <strcmp@plt>
   1c5d0:	cmp	r0, #0
   1c5d4:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c5d8:	ldr	r1, [pc, #-820]	; 1c2ac <__assert_fail@plt+0xa708>
   1c5dc:	mov	r0, r6
   1c5e0:	bl	1170c <strcmp@plt>
   1c5e4:	cmp	r0, #0
   1c5e8:	beq	1bf9c <__assert_fail@plt+0xa3f8>
   1c5ec:	b	1c0f8 <__assert_fail@plt+0xa554>
   1c5f0:	ldrb	r3, [fp, #1]
   1c5f4:	cmp	r3, #47	; 0x2f
   1c5f8:	bne	1c4b8 <__assert_fail@plt+0xa914>
   1c5fc:	ldr	r1, [pc, #-864]	; 1c2a4 <__assert_fail@plt+0xa700>
   1c600:	mov	r0, r6
   1c604:	bl	1170c <strcmp@plt>
   1c608:	cmp	r0, #0
   1c60c:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c610:	ldr	r1, [pc, #-880]	; 1c2a8 <__assert_fail@plt+0xa704>
   1c614:	mov	r0, r6
   1c618:	bl	1170c <strcmp@plt>
   1c61c:	cmp	r0, #0
   1c620:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c624:	ldr	r1, [pc, #-896]	; 1c2ac <__assert_fail@plt+0xa708>
   1c628:	mov	r0, r6
   1c62c:	bl	1170c <strcmp@plt>
   1c630:	cmp	r0, #0
   1c634:	beq	1c480 <__assert_fail@plt+0xa8dc>
   1c638:	b	1c4b8 <__assert_fail@plt+0xa914>
   1c63c:	mov	r0, r5
   1c640:	b	1bff0 <__assert_fail@plt+0xa44c>
   1c644:	push	{r2, r3}
   1c648:	push	{lr}		; (str lr, [sp, #-4]!)
   1c64c:	sub	sp, sp, #12
   1c650:	ldr	r2, [sp, #16]
   1c654:	ands	r3, r2, #64	; 0x40
   1c658:	addne	r3, sp, #20
   1c65c:	strne	r3, [sp, #4]
   1c660:	ldrne	r3, [sp, #20]
   1c664:	bl	119ac <openat64@plt>
   1c668:	bl	2bf60 <__assert_fail@plt+0x1a3bc>
   1c66c:	add	sp, sp, #12
   1c670:	pop	{lr}		; (ldr lr, [sp], #4)
   1c674:	add	sp, sp, #8
   1c678:	bx	lr
   1c67c:	orr	r2, r2, #540672	; 0x84000
   1c680:	push	{r4, r5, r6, lr}
   1c684:	orr	r2, r2, #2304	; 0x900
   1c688:	mov	r6, r3
   1c68c:	bl	1c644 <__assert_fail@plt+0xaaa0>
   1c690:	subs	r5, r0, #0
   1c694:	blt	1c6c8 <__assert_fail@plt+0xab24>
   1c698:	bl	11ac0 <fdopendir@plt>
   1c69c:	subs	r4, r0, #0
   1c6a0:	beq	1c6b0 <__assert_fail@plt+0xab0c>
   1c6a4:	str	r5, [r6]
   1c6a8:	mov	r0, r4
   1c6ac:	pop	{r4, r5, r6, pc}
   1c6b0:	bl	119b8 <__errno_location@plt>
   1c6b4:	mov	r6, r0
   1c6b8:	mov	r0, r5
   1c6bc:	ldr	r5, [r6]
   1c6c0:	bl	11b80 <close@plt>
   1c6c4:	b	1c6a4 <__assert_fail@plt+0xab00>
   1c6c8:	mov	r4, #0
   1c6cc:	b	1c6a8 <__assert_fail@plt+0xab04>
   1c6d0:	push	{r4, r5, r6, lr}
   1c6d4:	subs	r4, r0, #0
   1c6d8:	beq	1c74c <__assert_fail@plt+0xaba8>
   1c6dc:	mov	r1, #47	; 0x2f
   1c6e0:	bl	11a78 <strrchr@plt>
   1c6e4:	subs	r5, r0, #0
   1c6e8:	beq	1c738 <__assert_fail@plt+0xab94>
   1c6ec:	add	r6, r5, #1
   1c6f0:	sub	r3, r6, r4
   1c6f4:	cmp	r3, #6
   1c6f8:	ble	1c738 <__assert_fail@plt+0xab94>
   1c6fc:	mov	r2, #7
   1c700:	ldr	r1, [pc, #96]	; 1c768 <__assert_fail@plt+0xabc4>
   1c704:	sub	r0, r5, #6
   1c708:	bl	11b5c <strncmp@plt>
   1c70c:	cmp	r0, #0
   1c710:	bne	1c738 <__assert_fail@plt+0xab94>
   1c714:	mov	r2, #3
   1c718:	ldr	r1, [pc, #76]	; 1c76c <__assert_fail@plt+0xabc8>
   1c71c:	mov	r0, r6
   1c720:	bl	11b5c <strncmp@plt>
   1c724:	cmp	r0, #0
   1c728:	movne	r4, r6
   1c72c:	ldreq	r3, [pc, #60]	; 1c770 <__assert_fail@plt+0xabcc>
   1c730:	addeq	r4, r5, #4
   1c734:	streq	r4, [r3]
   1c738:	ldr	r2, [pc, #52]	; 1c774 <__assert_fail@plt+0xabd0>
   1c73c:	ldr	r3, [pc, #52]	; 1c778 <__assert_fail@plt+0xabd4>
   1c740:	str	r4, [r2]
   1c744:	str	r4, [r3]
   1c748:	pop	{r4, r5, r6, pc}
   1c74c:	ldr	r3, [pc, #40]	; 1c77c <__assert_fail@plt+0xabd8>
   1c750:	mov	r2, #55	; 0x37
   1c754:	mov	r1, #1
   1c758:	ldr	r3, [r3]
   1c75c:	ldr	r0, [pc, #28]	; 1c780 <__assert_fail@plt+0xabdc>
   1c760:	bl	11868 <fwrite@plt>
   1c764:	bl	11b68 <abort@plt>
   1c768:			; <UNDEFINED> instruction: 0x00030dbc
   1c76c:	andeq	r0, r3, r4, asr #27
   1c770:	andeq	r2, r4, r0, lsr #4
   1c774:	andeq	r2, r4, r8, asr #5
   1c778:	andeq	r2, r4, r4, lsr #4
   1c77c:	andeq	r2, r4, r0, lsr r2
   1c780:	andeq	r0, r3, r4, lsl #27
   1c784:	push	{r4, r5, r6, lr}
   1c788:	mov	r2, #48	; 0x30
   1c78c:	mov	r4, r1
   1c790:	mov	r1, #0
   1c794:	mov	r5, r0
   1c798:	bl	119e8 <memset@plt>
   1c79c:	cmp	r4, #10
   1c7a0:	beq	1c7b0 <__assert_fail@plt+0xac0c>
   1c7a4:	str	r4, [r5]
   1c7a8:	mov	r0, r5
   1c7ac:	pop	{r4, r5, r6, pc}
   1c7b0:	bl	11b68 <abort@plt>
   1c7b4:	push	{r4, r5, r6, lr}
   1c7b8:	mov	r4, r0
   1c7bc:	mov	r5, r1
   1c7c0:	bl	2e5c0 <__assert_fail@plt+0x1ca1c>
   1c7c4:	ldrb	r3, [r0]
   1c7c8:	bic	r3, r3, #32
   1c7cc:	cmp	r3, #85	; 0x55
   1c7d0:	bne	1c830 <__assert_fail@plt+0xac8c>
   1c7d4:	ldrb	r3, [r0, #1]
   1c7d8:	bic	r3, r3, #32
   1c7dc:	cmp	r3, #84	; 0x54
   1c7e0:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c7e4:	ldrb	r3, [r0, #2]
   1c7e8:	bic	r3, r3, #32
   1c7ec:	cmp	r3, #70	; 0x46
   1c7f0:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c7f4:	ldrb	r3, [r0, #3]
   1c7f8:	cmp	r3, #45	; 0x2d
   1c7fc:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c800:	ldrb	r3, [r0, #4]
   1c804:	cmp	r3, #56	; 0x38
   1c808:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c80c:	ldrb	r3, [r0, #5]
   1c810:	cmp	r3, #0
   1c814:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c818:	ldrb	r2, [r4]
   1c81c:	ldr	r3, [pc, #152]	; 1c8bc <__assert_fail@plt+0xad18>
   1c820:	ldr	r0, [pc, #152]	; 1c8c0 <__assert_fail@plt+0xad1c>
   1c824:	cmp	r2, #96	; 0x60
   1c828:	movne	r0, r3
   1c82c:	pop	{r4, r5, r6, pc}
   1c830:	cmp	r3, #71	; 0x47
   1c834:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c838:	ldrb	r3, [r0, #1]
   1c83c:	bic	r3, r3, #32
   1c840:	cmp	r3, #66	; 0x42
   1c844:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c848:	ldrb	r3, [r0, #2]
   1c84c:	cmp	r3, #49	; 0x31
   1c850:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c854:	ldrb	r3, [r0, #3]
   1c858:	cmp	r3, #56	; 0x38
   1c85c:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c860:	ldrb	r3, [r0, #4]
   1c864:	cmp	r3, #48	; 0x30
   1c868:	beq	1c880 <__assert_fail@plt+0xacdc>
   1c86c:	ldr	r3, [pc, #80]	; 1c8c4 <__assert_fail@plt+0xad20>
   1c870:	cmp	r5, #9
   1c874:	ldr	r0, [pc, #76]	; 1c8c8 <__assert_fail@plt+0xad24>
   1c878:	movne	r0, r3
   1c87c:	pop	{r4, r5, r6, pc}
   1c880:	ldrb	r3, [r0, #5]
   1c884:	cmp	r3, #51	; 0x33
   1c888:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c88c:	ldrb	r3, [r0, #6]
   1c890:	cmp	r3, #48	; 0x30
   1c894:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c898:	ldrb	r3, [r0, #7]
   1c89c:	cmp	r3, #0
   1c8a0:	bne	1c86c <__assert_fail@plt+0xacc8>
   1c8a4:	ldrb	r2, [r4]
   1c8a8:	ldr	r3, [pc, #28]	; 1c8cc <__assert_fail@plt+0xad28>
   1c8ac:	ldr	r0, [pc, #28]	; 1c8d0 <__assert_fail@plt+0xad2c>
   1c8b0:	cmp	r2, #96	; 0x60
   1c8b4:	movne	r0, r3
   1c8b8:	pop	{r4, r5, r6, pc}
   1c8bc:	andeq	r0, r3, r0, lsr #28
   1c8c0:	andeq	r0, r3, ip, lsl lr
   1c8c4:	andeq	r0, r3, r0, asr r4
   1c8c8:	andeq	r0, r3, ip, lsr #28
   1c8cc:	andeq	r0, r3, r8, lsr #28
   1c8d0:	andeq	r0, r3, r4, lsr #28
   1c8d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8d8:	sub	sp, sp, #116	; 0x74
   1c8dc:	mov	sl, r0
   1c8e0:	str	r3, [sp, #24]
   1c8e4:	mov	r3, #1
   1c8e8:	mov	r8, r1
   1c8ec:	str	r2, [sp, #56]	; 0x38
   1c8f0:	str	r3, [sp, #36]	; 0x24
   1c8f4:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c8f8:	ldr	r3, [sp, #156]	; 0x9c
   1c8fc:	mov	fp, r8
   1c900:	mov	r2, #0
   1c904:	lsr	r3, r3, #1
   1c908:	and	r3, r3, #1
   1c90c:	str	r2, [sp, #68]	; 0x44
   1c910:	str	r3, [sp, #28]
   1c914:	str	r2, [sp, #40]	; 0x28
   1c918:	str	r2, [sp, #44]	; 0x2c
   1c91c:	str	r2, [sp, #52]	; 0x34
   1c920:	str	r2, [sp, #64]	; 0x40
   1c924:	str	r2, [sp, #72]	; 0x48
   1c928:	str	sl, [sp, #32]
   1c92c:	str	r0, [sp, #76]	; 0x4c
   1c930:	ldr	r3, [sp, #152]	; 0x98
   1c934:	cmp	r3, #10
   1c938:	ldrls	pc, [pc, r3, lsl #2]
   1c93c:	b	1dafc <__assert_fail@plt+0xbf58>
   1c940:	andeq	ip, r1, ip, ror #18
   1c944:	andeq	ip, r1, r4, asr ip
   1c948:	andeq	ip, r1, r8, ror ip
   1c94c:	muleq	r1, ip, ip
   1c950:	andeq	ip, r1, r8, asr #27
   1c954:	muleq	r1, ip, sp
   1c958:	andeq	ip, r1, r4, ror sp
   1c95c:			; <UNDEFINED> instruction: 0x0001ccb0
   1c960:	andeq	ip, r1, r8, asr #25
   1c964:	andeq	ip, r1, r8, asr #25
   1c968:	andeq	ip, r1, r8, asr #25
   1c96c:	mov	r3, #0
   1c970:	mov	r7, r3
   1c974:	str	r3, [sp, #28]
   1c978:	ldr	r3, [sp, #44]	; 0x2c
   1c97c:	mov	sl, #0
   1c980:	eor	r3, r3, #1
   1c984:	str	r3, [sp, #60]	; 0x3c
   1c988:	ldr	r3, [sp, #24]
   1c98c:	cmn	r3, #1
   1c990:	beq	1cef4 <__assert_fail@plt+0xb350>
   1c994:	ldr	r3, [sp, #24]
   1c998:	subs	r5, r3, sl
   1c99c:	movne	r5, #1
   1c9a0:	cmp	r5, #0
   1c9a4:	beq	1cf0c <__assert_fail@plt+0xb368>
   1c9a8:	ldr	r3, [sp, #152]	; 0x98
   1c9ac:	ldr	r8, [sp, #44]	; 0x2c
   1c9b0:	cmp	r3, #2
   1c9b4:	moveq	r8, #0
   1c9b8:	andne	r8, r8, #1
   1c9bc:	ldr	r3, [sp, #52]	; 0x34
   1c9c0:	adds	r9, r3, #0
   1c9c4:	movne	r9, #1
   1c9c8:	ands	r6, r9, r8
   1c9cc:	beq	1d374 <__assert_fail@plt+0xb7d0>
   1c9d0:	ldr	r2, [sp, #52]	; 0x34
   1c9d4:	ldr	r1, [sp, #24]
   1c9d8:	cmp	r2, #1
   1c9dc:	mov	r3, r2
   1c9e0:	movls	r3, #0
   1c9e4:	movhi	r3, #1
   1c9e8:	cmn	r1, #1
   1c9ec:	movne	r3, #0
   1c9f0:	cmp	r3, #0
   1c9f4:	add	r4, sl, r2
   1c9f8:	beq	1ca08 <__assert_fail@plt+0xae64>
   1c9fc:	ldr	r0, [sp, #56]	; 0x38
   1ca00:	bl	11988 <strlen@plt>
   1ca04:	str	r0, [sp, #24]
   1ca08:	ldr	r3, [sp, #24]
   1ca0c:	cmp	r3, r4
   1ca10:	ldr	r3, [sp, #56]	; 0x38
   1ca14:	add	r3, r3, sl
   1ca18:	str	r3, [sp, #48]	; 0x30
   1ca1c:	bcc	1d380 <__assert_fail@plt+0xb7dc>
   1ca20:	mov	r0, r3
   1ca24:	ldr	r2, [sp, #52]	; 0x34
   1ca28:	ldr	r1, [sp, #64]	; 0x40
   1ca2c:	bl	117c0 <memcmp@plt>
   1ca30:	cmp	r0, #0
   1ca34:	bne	1d380 <__assert_fail@plt+0xb7dc>
   1ca38:	ldr	r3, [sp, #28]
   1ca3c:	cmp	r3, #0
   1ca40:	bne	1dbfc <__assert_fail@plt+0xc058>
   1ca44:	ldr	r3, [sp, #48]	; 0x30
   1ca48:	ldrb	r4, [r3]
   1ca4c:	cmp	r4, #126	; 0x7e
   1ca50:	ldrls	pc, [pc, r4, lsl #2]
   1ca54:	b	1d314 <__assert_fail@plt+0xb770>
   1ca58:	andeq	sp, r1, r8, lsr r1
   1ca5c:	andeq	sp, r1, r4, lsl r3
   1ca60:	andeq	sp, r1, r4, lsl r3
   1ca64:	andeq	sp, r1, r4, lsl r3
   1ca68:	andeq	sp, r1, r4, lsl r3
   1ca6c:	andeq	sp, r1, r4, lsl r3
   1ca70:	andeq	sp, r1, r4, lsl r3
   1ca74:	andeq	sp, r1, ip, lsl r1
   1ca78:	andeq	sp, r1, r0, lsl #2
   1ca7c:	strdeq	sp, [r1], -ip
   1ca80:	andeq	sp, r1, r0, rrx
   1ca84:	andeq	sp, r1, r4, asr #32
   1ca88:	ldrdeq	sp, [r1], -r8
   1ca8c:			; <UNDEFINED> instruction: 0x0001d2b4
   1ca90:	andeq	sp, r1, r4, lsl r3
   1ca94:	andeq	sp, r1, r4, lsl r3
   1ca98:	andeq	sp, r1, r4, lsl r3
   1ca9c:	andeq	sp, r1, r4, lsl r3
   1caa0:	andeq	sp, r1, r4, lsl r3
   1caa4:	andeq	sp, r1, r4, lsl r3
   1caa8:	andeq	sp, r1, r4, lsl r3
   1caac:	andeq	sp, r1, r4, lsl r3
   1cab0:	andeq	sp, r1, r4, lsl r3
   1cab4:	andeq	sp, r1, r4, lsl r3
   1cab8:	andeq	sp, r1, r4, lsl r3
   1cabc:	andeq	sp, r1, r4, lsl r3
   1cac0:	andeq	sp, r1, r4, lsl r3
   1cac4:	andeq	sp, r1, r4, lsl r3
   1cac8:	andeq	sp, r1, r4, lsl r3
   1cacc:	andeq	sp, r1, r4, lsl r3
   1cad0:	andeq	sp, r1, r4, lsl r3
   1cad4:	andeq	sp, r1, r4, lsl r3
   1cad8:	strdeq	sp, [r1], -r4
   1cadc:	andeq	sp, r1, r8, lsr #4
   1cae0:	andeq	sp, r1, r8, lsr #4
   1cae4:	andeq	ip, r1, r8, lsr lr
   1cae8:	andeq	sp, r1, r8, lsr #4
   1caec:	andeq	sp, r1, r0, asr #5
   1caf0:	andeq	sp, r1, r8, lsr #4
   1caf4:	muleq	r1, r4, r2
   1caf8:	andeq	sp, r1, r8, lsr #4
   1cafc:	andeq	sp, r1, r8, lsr #4
   1cb00:	andeq	sp, r1, r8, lsr #4
   1cb04:	andeq	sp, r1, r0, asr #5
   1cb08:	andeq	sp, r1, r0, asr #5
   1cb0c:	andeq	sp, r1, r0, asr #5
   1cb10:	andeq	sp, r1, r0, asr #5
   1cb14:	andeq	sp, r1, r0, asr #5
   1cb18:	andeq	sp, r1, r0, asr #5
   1cb1c:	andeq	sp, r1, r0, asr #5
   1cb20:	andeq	sp, r1, r0, asr #5
   1cb24:	andeq	sp, r1, r0, asr #5
   1cb28:	andeq	sp, r1, r0, asr #5
   1cb2c:	andeq	sp, r1, r0, asr #5
   1cb30:	andeq	sp, r1, r0, asr #5
   1cb34:	andeq	sp, r1, r0, asr #5
   1cb38:	andeq	sp, r1, r0, asr #5
   1cb3c:	andeq	sp, r1, r0, asr #5
   1cb40:	andeq	sp, r1, r0, asr #5
   1cb44:	andeq	sp, r1, r8, lsr #4
   1cb48:	andeq	sp, r1, r8, lsr #4
   1cb4c:	andeq	sp, r1, r8, lsr #4
   1cb50:	andeq	sp, r1, r8, lsr #4
   1cb54:	andeq	sp, r1, r4, ror #4
   1cb58:	andeq	sp, r1, r4, lsl r3
   1cb5c:	andeq	sp, r1, r0, asr #5
   1cb60:	andeq	sp, r1, r0, asr #5
   1cb64:	andeq	sp, r1, r0, asr #5
   1cb68:	andeq	sp, r1, r0, asr #5
   1cb6c:	andeq	sp, r1, r0, asr #5
   1cb70:	andeq	sp, r1, r0, asr #5
   1cb74:	andeq	sp, r1, r0, asr #5
   1cb78:	andeq	sp, r1, r0, asr #5
   1cb7c:	andeq	sp, r1, r0, asr #5
   1cb80:	andeq	sp, r1, r0, asr #5
   1cb84:	andeq	sp, r1, r0, asr #5
   1cb88:	andeq	sp, r1, r0, asr #5
   1cb8c:	andeq	sp, r1, r0, asr #5
   1cb90:	andeq	sp, r1, r0, asr #5
   1cb94:	andeq	sp, r1, r0, asr #5
   1cb98:	andeq	sp, r1, r0, asr #5
   1cb9c:	andeq	sp, r1, r0, asr #5
   1cba0:	andeq	sp, r1, r0, asr #5
   1cba4:	andeq	sp, r1, r0, asr #5
   1cba8:	andeq	sp, r1, r0, asr #5
   1cbac:	andeq	sp, r1, r0, asr #5
   1cbb0:	andeq	sp, r1, r0, asr #5
   1cbb4:	andeq	sp, r1, r0, asr #5
   1cbb8:	andeq	sp, r1, r0, asr #5
   1cbbc:	andeq	sp, r1, r0, asr #5
   1cbc0:	andeq	sp, r1, r0, asr #5
   1cbc4:	andeq	sp, r1, r8, lsr #4
   1cbc8:	andeq	ip, r1, r4, lsl #31
   1cbcc:	andeq	sp, r1, r0, asr #5
   1cbd0:	andeq	sp, r1, r8, lsr #4
   1cbd4:	andeq	sp, r1, r0, asr #5
   1cbd8:	andeq	sp, r1, r8, lsr #4
   1cbdc:	andeq	sp, r1, r0, asr #5
   1cbe0:	andeq	sp, r1, r0, asr #5
   1cbe4:	andeq	sp, r1, r0, asr #5
   1cbe8:	andeq	sp, r1, r0, asr #5
   1cbec:	andeq	sp, r1, r0, asr #5
   1cbf0:	andeq	sp, r1, r0, asr #5
   1cbf4:	andeq	sp, r1, r0, asr #5
   1cbf8:	andeq	sp, r1, r0, asr #5
   1cbfc:	andeq	sp, r1, r0, asr #5
   1cc00:	andeq	sp, r1, r0, asr #5
   1cc04:	andeq	sp, r1, r0, asr #5
   1cc08:	andeq	sp, r1, r0, asr #5
   1cc0c:	andeq	sp, r1, r0, asr #5
   1cc10:	andeq	sp, r1, r0, asr #5
   1cc14:	andeq	sp, r1, r0, asr #5
   1cc18:	andeq	sp, r1, r0, asr #5
   1cc1c:	andeq	sp, r1, r0, asr #5
   1cc20:	andeq	sp, r1, r0, asr #5
   1cc24:	andeq	sp, r1, r0, asr #5
   1cc28:	andeq	sp, r1, r0, asr #5
   1cc2c:	andeq	sp, r1, r0, asr #5
   1cc30:	andeq	sp, r1, r0, asr #5
   1cc34:	andeq	sp, r1, r0, asr #5
   1cc38:	andeq	sp, r1, r0, asr #5
   1cc3c:	andeq	sp, r1, r0, asr #5
   1cc40:	andeq	sp, r1, r0, asr #5
   1cc44:	andeq	ip, r1, r8, lsl lr
   1cc48:	andeq	sp, r1, r8, lsr #4
   1cc4c:	andeq	ip, r1, r8, lsl lr
   1cc50:	andeq	ip, r1, r8, lsr lr
   1cc54:	mov	r3, #1
   1cc58:	str	r3, [sp, #28]
   1cc5c:	str	r3, [sp, #52]	; 0x34
   1cc60:	ldr	r3, [pc, #4000]	; 1dc08 <__assert_fail@plt+0xc064>
   1cc64:	mov	r7, #0
   1cc68:	str	r3, [sp, #64]	; 0x40
   1cc6c:	mov	r3, #2
   1cc70:	str	r3, [sp, #152]	; 0x98
   1cc74:	b	1c978 <__assert_fail@plt+0xadd4>
   1cc78:	ldr	r3, [sp, #28]
   1cc7c:	cmp	r3, #0
   1cc80:	beq	1cddc <__assert_fail@plt+0xb238>
   1cc84:	mov	r3, #1
   1cc88:	str	r3, [sp, #52]	; 0x34
   1cc8c:	ldr	r3, [pc, #3956]	; 1dc08 <__assert_fail@plt+0xc064>
   1cc90:	mov	r7, #0
   1cc94:	str	r3, [sp, #64]	; 0x40
   1cc98:	b	1c978 <__assert_fail@plt+0xadd4>
   1cc9c:	mov	r3, #1
   1cca0:	str	r3, [sp, #44]	; 0x2c
   1cca4:	str	r3, [sp, #52]	; 0x34
   1cca8:	str	r3, [sp, #28]
   1ccac:	b	1cc60 <__assert_fail@plt+0xb0bc>
   1ccb0:	mov	r3, #0
   1ccb4:	str	r3, [sp, #28]
   1ccb8:	mov	r3, #1
   1ccbc:	str	r3, [sp, #44]	; 0x2c
   1ccc0:	mov	r7, #0
   1ccc4:	b	1c978 <__assert_fail@plt+0xadd4>
   1ccc8:	ldr	r3, [sp, #152]	; 0x98
   1cccc:	cmp	r3, #10
   1ccd0:	beq	1cd14 <__assert_fail@plt+0xb170>
   1ccd4:	mov	r2, #5
   1ccd8:	ldr	r1, [pc, #3884]	; 1dc0c <__assert_fail@plt+0xc068>
   1ccdc:	mov	r0, #0
   1cce0:	bl	117d8 <dcgettext@plt>
   1cce4:	ldr	r2, [pc, #3872]	; 1dc0c <__assert_fail@plt+0xc068>
   1cce8:	cmp	r0, r2
   1ccec:	str	r0, [sp, #164]	; 0xa4
   1ccf0:	beq	1dcf8 <__assert_fail@plt+0xc154>
   1ccf4:	mov	r2, #5
   1ccf8:	ldr	r1, [pc, #3848]	; 1dc08 <__assert_fail@plt+0xc064>
   1ccfc:	mov	r0, #0
   1cd00:	bl	117d8 <dcgettext@plt>
   1cd04:	ldr	r2, [pc, #3836]	; 1dc08 <__assert_fail@plt+0xc064>
   1cd08:	cmp	r0, r2
   1cd0c:	str	r0, [sp, #168]	; 0xa8
   1cd10:	beq	1dce8 <__assert_fail@plt+0xc144>
   1cd14:	ldr	r7, [sp, #28]
   1cd18:	cmp	r7, #0
   1cd1c:	movne	r7, #0
   1cd20:	bne	1cd54 <__assert_fail@plt+0xb1b0>
   1cd24:	ldr	r3, [sp, #164]	; 0xa4
   1cd28:	ldrb	r3, [r3]
   1cd2c:	cmp	r3, #0
   1cd30:	beq	1dd08 <__assert_fail@plt+0xc164>
   1cd34:	ldr	r2, [sp, #164]	; 0xa4
   1cd38:	ldr	r1, [sp, #32]
   1cd3c:	cmp	fp, r7
   1cd40:	strbhi	r3, [r1, r7]
   1cd44:	ldrb	r3, [r2, #1]!
   1cd48:	add	r7, r7, #1
   1cd4c:	cmp	r3, #0
   1cd50:	bne	1cd3c <__assert_fail@plt+0xb198>
   1cd54:	ldr	r0, [sp, #168]	; 0xa8
   1cd58:	bl	11988 <strlen@plt>
   1cd5c:	ldr	r3, [sp, #168]	; 0xa8
   1cd60:	str	r3, [sp, #64]	; 0x40
   1cd64:	mov	r3, #1
   1cd68:	str	r3, [sp, #44]	; 0x2c
   1cd6c:	str	r0, [sp, #52]	; 0x34
   1cd70:	b	1c978 <__assert_fail@plt+0xadd4>
   1cd74:	mov	r3, #1
   1cd78:	str	r3, [sp, #44]	; 0x2c
   1cd7c:	str	r3, [sp, #52]	; 0x34
   1cd80:	str	r3, [sp, #28]
   1cd84:	ldr	r3, [pc, #3716]	; 1dc10 <__assert_fail@plt+0xc06c>
   1cd88:	mov	r7, #0
   1cd8c:	str	r3, [sp, #64]	; 0x40
   1cd90:	mov	r3, #5
   1cd94:	str	r3, [sp, #152]	; 0x98
   1cd98:	b	1c978 <__assert_fail@plt+0xadd4>
   1cd9c:	ldr	r3, [sp, #28]
   1cda0:	cmp	r3, #0
   1cda4:	beq	1daa4 <__assert_fail@plt+0xbf00>
   1cda8:	ldr	r3, [sp, #28]
   1cdac:	mov	r7, #0
   1cdb0:	str	r3, [sp, #44]	; 0x2c
   1cdb4:	mov	r3, #1
   1cdb8:	str	r3, [sp, #52]	; 0x34
   1cdbc:	ldr	r3, [pc, #3660]	; 1dc10 <__assert_fail@plt+0xc06c>
   1cdc0:	str	r3, [sp, #64]	; 0x40
   1cdc4:	b	1c978 <__assert_fail@plt+0xadd4>
   1cdc8:	ldr	r3, [sp, #28]
   1cdcc:	cmp	r3, #0
   1cdd0:	mov	r3, #1
   1cdd4:	streq	r3, [sp, #44]	; 0x2c
   1cdd8:	bne	1cc5c <__assert_fail@plt+0xb0b8>
   1cddc:	cmp	fp, #0
   1cde0:	beq	1dad4 <__assert_fail@plt+0xbf30>
   1cde4:	ldr	r3, [sp, #32]
   1cde8:	mov	r2, #39	; 0x27
   1cdec:	mov	r7, #1
   1cdf0:	strb	r2, [r3]
   1cdf4:	mov	r3, #0
   1cdf8:	str	r3, [sp, #28]
   1cdfc:	mov	r3, #1
   1ce00:	str	r3, [sp, #52]	; 0x34
   1ce04:	ldr	r3, [pc, #3580]	; 1dc08 <__assert_fail@plt+0xc064>
   1ce08:	str	r3, [sp, #64]	; 0x40
   1ce0c:	mov	r3, #2
   1ce10:	str	r3, [sp, #152]	; 0x98
   1ce14:	b	1c978 <__assert_fail@plt+0xadd4>
   1ce18:	ldr	r3, [sp, #24]
   1ce1c:	cmn	r3, #1
   1ce20:	beq	1da38 <__assert_fail@plt+0xbe94>
   1ce24:	ldr	r3, [sp, #24]
   1ce28:	subs	r3, r3, #1
   1ce2c:	movne	r3, #1
   1ce30:	cmp	r3, #0
   1ce34:	bne	1ce40 <__assert_fail@plt+0xb29c>
   1ce38:	cmp	sl, #0
   1ce3c:	beq	1d22c <__assert_fail@plt+0xb688>
   1ce40:	ldr	r3, [sp, #152]	; 0x98
   1ce44:	mov	r5, #0
   1ce48:	sub	r2, r3, #2
   1ce4c:	mov	r8, r5
   1ce50:	clz	r2, r2
   1ce54:	lsr	r2, r2, #5
   1ce58:	ldr	r3, [sp, #60]	; 0x3c
   1ce5c:	ldr	r1, [sp, #28]
   1ce60:	orr	r3, r2, r3
   1ce64:	eor	r3, r3, #1
   1ce68:	orr	r3, r1, r3
   1ce6c:	tst	r3, #255	; 0xff
   1ce70:	bne	1d59c <__assert_fail@plt+0xb9f8>
   1ce74:	cmp	r6, #0
   1ce78:	bne	1cfc8 <__assert_fail@plt+0xb424>
   1ce7c:	ldr	r3, [sp, #40]	; 0x28
   1ce80:	eor	r8, r8, #1
   1ce84:	and	r8, r8, r3
   1ce88:	add	sl, sl, #1
   1ce8c:	uxtb	r6, r8
   1ce90:	cmp	r6, #0
   1ce94:	beq	1cec8 <__assert_fail@plt+0xb324>
   1ce98:	cmp	fp, r7
   1ce9c:	movhi	r2, #39	; 0x27
   1cea0:	ldrhi	r3, [sp, #32]
   1cea4:	strbhi	r2, [r3, r7]
   1cea8:	add	r3, r7, #1
   1ceac:	cmp	fp, r3
   1ceb0:	movhi	r1, #39	; 0x27
   1ceb4:	ldrhi	r2, [sp, #32]
   1ceb8:	add	r7, r7, #2
   1cebc:	strbhi	r1, [r2, r3]
   1cec0:	mov	r3, #0
   1cec4:	str	r3, [sp, #40]	; 0x28
   1cec8:	cmp	r7, fp
   1cecc:	ldrcc	r3, [sp, #32]
   1ced0:	strbcc	r4, [r3, r7]
   1ced4:	ldr	r3, [sp, #36]	; 0x24
   1ced8:	cmp	r5, #0
   1cedc:	moveq	r3, #0
   1cee0:	str	r3, [sp, #36]	; 0x24
   1cee4:	ldr	r3, [sp, #24]
   1cee8:	add	r7, r7, #1
   1ceec:	cmn	r3, #1
   1cef0:	bne	1c994 <__assert_fail@plt+0xadf0>
   1cef4:	ldr	r3, [sp, #56]	; 0x38
   1cef8:	ldrb	r5, [r3, sl]
   1cefc:	adds	r5, r5, #0
   1cf00:	movne	r5, #1
   1cf04:	cmp	r5, #0
   1cf08:	bne	1c9a8 <__assert_fail@plt+0xae04>
   1cf0c:	ldr	r3, [sp, #152]	; 0x98
   1cf10:	ldr	r1, [sp, #28]
   1cf14:	sub	r3, r3, #2
   1cf18:	clz	r3, r3
   1cf1c:	lsr	r3, r3, #5
   1cf20:	and	r9, r1, r3
   1cf24:	cmp	r7, #0
   1cf28:	movne	r2, #0
   1cf2c:	andeq	r2, r9, #1
   1cf30:	cmp	r2, #0
   1cf34:	bne	1d910 <__assert_fail@plt+0xbd6c>
   1cf38:	eor	r2, r1, #1
   1cf3c:	ands	r3, r3, r2
   1cf40:	beq	1ddcc <__assert_fail@plt+0xc228>
   1cf44:	ldr	r2, [sp, #68]	; 0x44
   1cf48:	cmp	r2, #0
   1cf4c:	beq	1ddb8 <__assert_fail@plt+0xc214>
   1cf50:	ldr	r3, [sp, #36]	; 0x24
   1cf54:	cmp	r3, #0
   1cf58:	bne	1dd70 <__assert_fail@plt+0xc1cc>
   1cf5c:	ldr	r2, [sp, #72]	; 0x48
   1cf60:	clz	r3, fp
   1cf64:	cmp	r2, #0
   1cf68:	lsr	r3, r3, #5
   1cf6c:	moveq	r3, #0
   1cf70:	cmp	r3, #0
   1cf74:	beq	1dd10 <__assert_fail@plt+0xc16c>
   1cf78:	str	r3, [sp, #68]	; 0x44
   1cf7c:	ldr	fp, [sp, #72]	; 0x48
   1cf80:	b	1c930 <__assert_fail@plt+0xad8c>
   1cf84:	ldr	r3, [sp, #152]	; 0x98
   1cf88:	cmp	r3, #2
   1cf8c:	beq	1d5e0 <__assert_fail@plt+0xba3c>
   1cf90:	ldr	r3, [sp, #44]	; 0x2c
   1cf94:	ldr	r2, [sp, #28]
   1cf98:	and	r2, r3, r2
   1cf9c:	ands	r2, r9, r2
   1cfa0:	bne	1d5ec <__assert_fail@plt+0xba48>
   1cfa4:	mov	r4, #92	; 0x5c
   1cfa8:	mov	r3, r4
   1cfac:	ldr	r1, [sp, #44]	; 0x2c
   1cfb0:	cmp	r1, #0
   1cfb4:	moveq	r5, #0
   1cfb8:	moveq	r8, r1
   1cfbc:	beq	1ce58 <__assert_fail@plt+0xb2b4>
   1cfc0:	mov	r4, r3
   1cfc4:	mov	r5, #0
   1cfc8:	ldr	r3, [sp, #28]
   1cfcc:	cmp	r3, #0
   1cfd0:	bne	1d5d4 <__assert_fail@plt+0xba30>
   1cfd4:	ldr	r3, [sp, #40]	; 0x28
   1cfd8:	eor	r9, r3, #1
   1cfdc:	and	r9, r9, r2
   1cfe0:	ands	r9, r9, #255	; 0xff
   1cfe4:	beq	1d028 <__assert_fail@plt+0xb484>
   1cfe8:	cmp	fp, r7
   1cfec:	movhi	r2, #39	; 0x27
   1cff0:	ldrhi	r3, [sp, #32]
   1cff4:	str	r9, [sp, #40]	; 0x28
   1cff8:	strbhi	r2, [r3, r7]
   1cffc:	add	r3, r7, #1
   1d000:	cmp	fp, r3
   1d004:	movhi	r1, #36	; 0x24
   1d008:	ldrhi	r2, [sp, #32]
   1d00c:	strbhi	r1, [r2, r3]
   1d010:	add	r3, r7, #2
   1d014:	cmp	fp, r3
   1d018:	add	r7, r7, #3
   1d01c:	ldrhi	r2, [sp, #32]
   1d020:	movhi	r1, #39	; 0x27
   1d024:	strbhi	r1, [r2, r3]
   1d028:	cmp	fp, r7
   1d02c:	movhi	r2, #92	; 0x5c
   1d030:	ldrhi	r3, [sp, #32]
   1d034:	add	sl, sl, #1
   1d038:	strbhi	r2, [r3, r7]
   1d03c:	add	r7, r7, #1
   1d040:	b	1cec8 <__assert_fail@plt+0xb324>
   1d044:	ldr	r3, [sp, #152]	; 0x98
   1d048:	mov	r4, #11
   1d04c:	sub	r2, r3, #2
   1d050:	mov	r3, #118	; 0x76
   1d054:	clz	r2, r2
   1d058:	lsr	r2, r2, #5
   1d05c:	b	1cfac <__assert_fail@plt+0xb408>
   1d060:	mov	r4, #10
   1d064:	mov	r3, #110	; 0x6e
   1d068:	ldr	r2, [sp, #152]	; 0x98
   1d06c:	ldr	r1, [sp, #28]
   1d070:	sub	r2, r2, #2
   1d074:	clz	r2, r2
   1d078:	lsr	r2, r2, #5
   1d07c:	ands	r1, r1, r2
   1d080:	beq	1cfac <__assert_fail@plt+0xb408>
   1d084:	ldr	sl, [sp, #32]
   1d088:	mov	r8, fp
   1d08c:	mov	r2, r1
   1d090:	mov	r3, #2
   1d094:	str	r3, [sp, #152]	; 0x98
   1d098:	ldr	r9, [sp, #44]	; 0x2c
   1d09c:	ldr	r3, [sp, #152]	; 0x98
   1d0a0:	and	r9, r9, r2
   1d0a4:	tst	r9, #255	; 0xff
   1d0a8:	movne	r3, #4
   1d0ac:	str	r3, [sp, #152]	; 0x98
   1d0b0:	ldr	r3, [sp, #156]	; 0x9c
   1d0b4:	mov	ip, #0
   1d0b8:	bic	r3, r3, #2
   1d0bc:	str	r3, [sp, #4]
   1d0c0:	ldr	r3, [sp, #168]	; 0xa8
   1d0c4:	ldr	r2, [sp, #56]	; 0x38
   1d0c8:	str	r3, [sp, #16]
   1d0cc:	ldr	r3, [sp, #164]	; 0xa4
   1d0d0:	mov	r1, r8
   1d0d4:	str	r3, [sp, #12]
   1d0d8:	ldr	r3, [sp, #152]	; 0x98
   1d0dc:	mov	r0, sl
   1d0e0:	str	r3, [sp]
   1d0e4:	str	ip, [sp, #8]
   1d0e8:	ldr	r3, [sp, #24]
   1d0ec:	bl	1c8d4 <__assert_fail@plt+0xad30>
   1d0f0:	mov	fp, r0
   1d0f4:	mov	r0, fp
   1d0f8:	add	sp, sp, #116	; 0x74
   1d0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d100:	ldr	r3, [sp, #152]	; 0x98
   1d104:	mov	r4, #8
   1d108:	sub	r2, r3, #2
   1d10c:	mov	r3, #98	; 0x62
   1d110:	clz	r2, r2
   1d114:	lsr	r2, r2, #5
   1d118:	b	1cfac <__assert_fail@plt+0xb408>
   1d11c:	ldr	r3, [sp, #152]	; 0x98
   1d120:	mov	r4, #7
   1d124:	sub	r2, r3, #2
   1d128:	mov	r3, #97	; 0x61
   1d12c:	clz	r2, r2
   1d130:	lsr	r2, r2, #5
   1d134:	b	1cfac <__assert_fail@plt+0xb408>
   1d138:	ldr	r3, [sp, #44]	; 0x2c
   1d13c:	cmp	r3, #0
   1d140:	beq	1d924 <__assert_fail@plt+0xbd80>
   1d144:	ldr	r3, [sp, #28]
   1d148:	cmp	r3, #0
   1d14c:	bne	1dbfc <__assert_fail@plt+0xc058>
   1d150:	ldr	r3, [sp, #152]	; 0x98
   1d154:	sub	r2, r3, #2
   1d158:	ldr	r3, [sp, #40]	; 0x28
   1d15c:	clz	r2, r2
   1d160:	eor	r3, r3, #1
   1d164:	lsr	r2, r2, #5
   1d168:	ands	r3, r2, r3
   1d16c:	moveq	r1, r7
   1d170:	beq	1d1b4 <__assert_fail@plt+0xb610>
   1d174:	cmp	fp, r7
   1d178:	movhi	r0, #39	; 0x27
   1d17c:	ldrhi	r1, [sp, #32]
   1d180:	str	r3, [sp, #40]	; 0x28
   1d184:	strbhi	r0, [r1, r7]
   1d188:	add	r1, r7, #1
   1d18c:	cmp	fp, r1
   1d190:	movhi	ip, #36	; 0x24
   1d194:	ldrhi	r0, [sp, #32]
   1d198:	strbhi	ip, [r0, r1]
   1d19c:	add	r1, r7, #2
   1d1a0:	cmp	fp, r1
   1d1a4:	movhi	ip, #39	; 0x27
   1d1a8:	ldrhi	r0, [sp, #32]
   1d1ac:	strbhi	ip, [r0, r1]
   1d1b0:	add	r1, r7, #3
   1d1b4:	cmp	fp, r1
   1d1b8:	movhi	r0, #92	; 0x5c
   1d1bc:	ldrhi	r3, [sp, #32]
   1d1c0:	add	r7, r1, #1
   1d1c4:	strbhi	r0, [r3, r1]
   1d1c8:	cmp	r8, #0
   1d1cc:	beq	1db10 <__assert_fail@plt+0xbf6c>
   1d1d0:	ldr	r0, [sp, #24]
   1d1d4:	add	r3, sl, #1
   1d1d8:	cmp	r3, r0
   1d1dc:	bcs	1da4c <__assert_fail@plt+0xbea8>
   1d1e0:	ldr	r0, [sp, #56]	; 0x38
   1d1e4:	ldrb	r3, [r0, r3]
   1d1e8:	sub	r3, r3, #48	; 0x30
   1d1ec:	cmp	r3, #9
   1d1f0:	bhi	1da4c <__assert_fail@plt+0xbea8>
   1d1f4:	cmp	fp, r7
   1d1f8:	movhi	r3, #48	; 0x30
   1d1fc:	ldrhi	r0, [sp, #32]
   1d200:	ldr	r5, [sp, #28]
   1d204:	mov	r4, #48	; 0x30
   1d208:	strbhi	r3, [r0, r7]
   1d20c:	add	r3, r1, #2
   1d210:	cmp	fp, r3
   1d214:	movhi	r0, #48	; 0x30
   1d218:	ldrhi	ip, [sp, #32]
   1d21c:	add	r7, r1, #3
   1d220:	strbhi	r0, [ip, r3]
   1d224:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d228:	mov	r5, #0
   1d22c:	ldr	r3, [sp, #152]	; 0x98
   1d230:	sub	r2, r3, #2
   1d234:	ldr	r3, [sp, #28]
   1d238:	clz	r2, r2
   1d23c:	lsr	r2, r2, #5
   1d240:	ands	r8, r3, r2
   1d244:	beq	1ce58 <__assert_fail@plt+0xb2b4>
   1d248:	mov	r3, r8
   1d24c:	mov	r2, r3
   1d250:	mov	r3, #2
   1d254:	ldr	sl, [sp, #32]
   1d258:	mov	r8, fp
   1d25c:	str	r3, [sp, #152]	; 0x98
   1d260:	b	1d098 <__assert_fail@plt+0xb4f4>
   1d264:	ldr	r3, [sp, #152]	; 0x98
   1d268:	cmp	r3, #2
   1d26c:	beq	1d990 <__assert_fail@plt+0xbdec>
   1d270:	cmp	r3, #5
   1d274:	beq	1d950 <__assert_fail@plt+0xbdac>
   1d278:	mov	r5, #0
   1d27c:	sub	r2, r3, #2
   1d280:	mov	r8, r5
   1d284:	clz	r2, r2
   1d288:	mov	r4, #63	; 0x3f
   1d28c:	lsr	r2, r2, #5
   1d290:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d294:	ldr	r3, [sp, #152]	; 0x98
   1d298:	cmp	r3, #2
   1d29c:	beq	1d9b0 <__assert_fail@plt+0xbe0c>
   1d2a0:	mov	r2, #0
   1d2a4:	str	r5, [sp, #68]	; 0x44
   1d2a8:	mov	r8, r2
   1d2ac:	mov	r4, #39	; 0x27
   1d2b0:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d2b4:	mov	r4, #13
   1d2b8:	mov	r3, #114	; 0x72
   1d2bc:	b	1d068 <__assert_fail@plt+0xb4c4>
   1d2c0:	ldr	r3, [sp, #152]	; 0x98
   1d2c4:	mov	r8, #0
   1d2c8:	sub	r2, r3, #2
   1d2cc:	clz	r2, r2
   1d2d0:	lsr	r2, r2, #5
   1d2d4:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d2d8:	ldr	r3, [sp, #152]	; 0x98
   1d2dc:	mov	r4, #12
   1d2e0:	sub	r2, r3, #2
   1d2e4:	mov	r3, #102	; 0x66
   1d2e8:	clz	r2, r2
   1d2ec:	lsr	r2, r2, #5
   1d2f0:	b	1cfac <__assert_fail@plt+0xb408>
   1d2f4:	mov	r5, r6
   1d2f8:	b	1d22c <__assert_fail@plt+0xb688>
   1d2fc:	ldr	r3, [sp, #152]	; 0x98
   1d300:	sub	r2, r3, #2
   1d304:	mov	r3, #116	; 0x74
   1d308:	clz	r2, r2
   1d30c:	lsr	r2, r2, #5
   1d310:	b	1cfac <__assert_fail@plt+0xb408>
   1d314:	ldr	r8, [sp, #76]	; 0x4c
   1d318:	cmp	r8, #1
   1d31c:	bne	1d7cc <__assert_fail@plt+0xbc28>
   1d320:	bl	11964 <__ctype_b_loc@plt>
   1d324:	sxth	r3, r4
   1d328:	mov	ip, r8
   1d32c:	lsl	r3, r3, #1
   1d330:	ldr	r2, [r0]
   1d334:	ldrh	r3, [r2, r3]
   1d338:	and	r3, r3, #16384	; 0x4000
   1d33c:	cmp	r3, #0
   1d340:	movne	r5, #1
   1d344:	moveq	r5, #0
   1d348:	moveq	r3, #1
   1d34c:	movne	r3, #0
   1d350:	ldr	r2, [sp, #44]	; 0x2c
   1d354:	and	r3, r3, r2
   1d358:	ands	r8, r3, #255	; 0xff
   1d35c:	bne	1d660 <__assert_fail@plt+0xbabc>
   1d360:	ldr	r3, [sp, #152]	; 0x98
   1d364:	sub	r2, r3, #2
   1d368:	clz	r2, r2
   1d36c:	lsr	r2, r2, #5
   1d370:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d374:	ldr	r3, [sp, #56]	; 0x38
   1d378:	add	r3, r3, sl
   1d37c:	str	r3, [sp, #48]	; 0x30
   1d380:	ldr	r3, [sp, #48]	; 0x30
   1d384:	mov	r6, #0
   1d388:	ldrb	r4, [r3]
   1d38c:	cmp	r4, #126	; 0x7e
   1d390:	ldrls	pc, [pc, r4, lsl #2]
   1d394:	b	1d314 <__assert_fail@plt+0xb770>
   1d398:	andeq	sp, r1, r8, lsr r1
   1d39c:	andeq	sp, r1, r4, lsl r3
   1d3a0:	andeq	sp, r1, r4, lsl r3
   1d3a4:	andeq	sp, r1, r4, lsl r3
   1d3a8:	andeq	sp, r1, r4, lsl r3
   1d3ac:	andeq	sp, r1, r4, lsl r3
   1d3b0:	andeq	sp, r1, r4, lsl r3
   1d3b4:	andeq	sp, r1, ip, lsl r1
   1d3b8:	andeq	sp, r1, r0, lsl #2
   1d3bc:	muleq	r1, r4, r5
   1d3c0:	andeq	sp, r1, r0, rrx
   1d3c4:	andeq	sp, r1, r4, asr #32
   1d3c8:	ldrdeq	sp, [r1], -r8
   1d3cc:			; <UNDEFINED> instruction: 0x0001d2b4
   1d3d0:	andeq	sp, r1, r4, lsl r3
   1d3d4:	andeq	sp, r1, r4, lsl r3
   1d3d8:	andeq	sp, r1, r4, lsl r3
   1d3dc:	andeq	sp, r1, r4, lsl r3
   1d3e0:	andeq	sp, r1, r4, lsl r3
   1d3e4:	andeq	sp, r1, r4, lsl r3
   1d3e8:	andeq	sp, r1, r4, lsl r3
   1d3ec:	andeq	sp, r1, r4, lsl r3
   1d3f0:	andeq	sp, r1, r4, lsl r3
   1d3f4:	andeq	sp, r1, r4, lsl r3
   1d3f8:	andeq	sp, r1, r4, lsl r3
   1d3fc:	andeq	sp, r1, r4, lsl r3
   1d400:	andeq	sp, r1, r4, lsl r3
   1d404:	andeq	sp, r1, r4, lsl r3
   1d408:	andeq	sp, r1, r4, lsl r3
   1d40c:	andeq	sp, r1, r4, lsl r3
   1d410:	andeq	sp, r1, r4, lsl r3
   1d414:	andeq	sp, r1, r4, lsl r3
   1d418:	andeq	sp, r1, ip, lsr #4
   1d41c:	andeq	sp, r1, r8, lsr #4
   1d420:	andeq	sp, r1, r8, lsr #4
   1d424:	andeq	ip, r1, r8, lsr lr
   1d428:	andeq	sp, r1, r8, lsr #4
   1d42c:	andeq	sp, r1, r0, asr #5
   1d430:	andeq	sp, r1, r8, lsr #4
   1d434:	muleq	r1, r4, r2
   1d438:	andeq	sp, r1, r8, lsr #4
   1d43c:	andeq	sp, r1, r8, lsr #4
   1d440:	andeq	sp, r1, r8, lsr #4
   1d444:	andeq	sp, r1, r0, asr #5
   1d448:	andeq	sp, r1, r0, asr #5
   1d44c:	andeq	sp, r1, r0, asr #5
   1d450:	andeq	sp, r1, r0, asr #5
   1d454:	andeq	sp, r1, r0, asr #5
   1d458:	andeq	sp, r1, r0, asr #5
   1d45c:	andeq	sp, r1, r0, asr #5
   1d460:	andeq	sp, r1, r0, asr #5
   1d464:	andeq	sp, r1, r0, asr #5
   1d468:	andeq	sp, r1, r0, asr #5
   1d46c:	andeq	sp, r1, r0, asr #5
   1d470:	andeq	sp, r1, r0, asr #5
   1d474:	andeq	sp, r1, r0, asr #5
   1d478:	andeq	sp, r1, r0, asr #5
   1d47c:	andeq	sp, r1, r0, asr #5
   1d480:	andeq	sp, r1, r0, asr #5
   1d484:	andeq	sp, r1, r8, lsr #4
   1d488:	andeq	sp, r1, r8, lsr #4
   1d48c:	andeq	sp, r1, r8, lsr #4
   1d490:	andeq	sp, r1, r8, lsr #4
   1d494:	andeq	sp, r1, r4, ror #4
   1d498:	andeq	sp, r1, r4, lsl r3
   1d49c:	andeq	sp, r1, r0, asr #5
   1d4a0:	andeq	sp, r1, r0, asr #5
   1d4a4:	andeq	sp, r1, r0, asr #5
   1d4a8:	andeq	sp, r1, r0, asr #5
   1d4ac:	andeq	sp, r1, r0, asr #5
   1d4b0:	andeq	sp, r1, r0, asr #5
   1d4b4:	andeq	sp, r1, r0, asr #5
   1d4b8:	andeq	sp, r1, r0, asr #5
   1d4bc:	andeq	sp, r1, r0, asr #5
   1d4c0:	andeq	sp, r1, r0, asr #5
   1d4c4:	andeq	sp, r1, r0, asr #5
   1d4c8:	andeq	sp, r1, r0, asr #5
   1d4cc:	andeq	sp, r1, r0, asr #5
   1d4d0:	andeq	sp, r1, r0, asr #5
   1d4d4:	andeq	sp, r1, r0, asr #5
   1d4d8:	andeq	sp, r1, r0, asr #5
   1d4dc:	andeq	sp, r1, r0, asr #5
   1d4e0:	andeq	sp, r1, r0, asr #5
   1d4e4:	andeq	sp, r1, r0, asr #5
   1d4e8:	andeq	sp, r1, r0, asr #5
   1d4ec:	andeq	sp, r1, r0, asr #5
   1d4f0:	andeq	sp, r1, r0, asr #5
   1d4f4:	andeq	sp, r1, r0, asr #5
   1d4f8:	andeq	sp, r1, r0, asr #5
   1d4fc:	andeq	sp, r1, r0, asr #5
   1d500:	andeq	sp, r1, r0, asr #5
   1d504:	andeq	sp, r1, r8, lsr #4
   1d508:	andeq	ip, r1, r4, lsl #31
   1d50c:	andeq	sp, r1, r0, asr #5
   1d510:	andeq	sp, r1, r8, lsr #4
   1d514:	andeq	sp, r1, r0, asr #5
   1d518:	andeq	sp, r1, r8, lsr #4
   1d51c:	andeq	sp, r1, r0, asr #5
   1d520:	andeq	sp, r1, r0, asr #5
   1d524:	andeq	sp, r1, r0, asr #5
   1d528:	andeq	sp, r1, r0, asr #5
   1d52c:	andeq	sp, r1, r0, asr #5
   1d530:	andeq	sp, r1, r0, asr #5
   1d534:	andeq	sp, r1, r0, asr #5
   1d538:	andeq	sp, r1, r0, asr #5
   1d53c:	andeq	sp, r1, r0, asr #5
   1d540:	andeq	sp, r1, r0, asr #5
   1d544:	andeq	sp, r1, r0, asr #5
   1d548:	andeq	sp, r1, r0, asr #5
   1d54c:	andeq	sp, r1, r0, asr #5
   1d550:	andeq	sp, r1, r0, asr #5
   1d554:	andeq	sp, r1, r0, asr #5
   1d558:	andeq	sp, r1, r0, asr #5
   1d55c:	andeq	sp, r1, r0, asr #5
   1d560:	andeq	sp, r1, r0, asr #5
   1d564:	andeq	sp, r1, r0, asr #5
   1d568:	andeq	sp, r1, r0, asr #5
   1d56c:	andeq	sp, r1, r0, asr #5
   1d570:	andeq	sp, r1, r0, asr #5
   1d574:	andeq	sp, r1, r0, asr #5
   1d578:	andeq	sp, r1, r0, asr #5
   1d57c:	andeq	sp, r1, r0, asr #5
   1d580:	andeq	sp, r1, r0, asr #5
   1d584:	andeq	ip, r1, r8, lsl lr
   1d588:	andeq	sp, r1, r8, lsr #4
   1d58c:	andeq	ip, r1, r8, lsl lr
   1d590:	andeq	ip, r1, r8, lsr lr
   1d594:	mov	r3, #116	; 0x74
   1d598:	b	1d068 <__assert_fail@plt+0xb4c4>
   1d59c:	ldr	r3, [sp, #160]	; 0xa0
   1d5a0:	cmp	r3, #0
   1d5a4:	beq	1ce74 <__assert_fail@plt+0xb2d0>
   1d5a8:	lsr	r3, r4, #5
   1d5ac:	ldr	r0, [sp, #160]	; 0xa0
   1d5b0:	uxtb	r3, r3
   1d5b4:	and	r1, r4, #31
   1d5b8:	ldr	r0, [r0, r3, lsl #2]
   1d5bc:	lsr	r3, r0, r1
   1d5c0:	tst	r3, #1
   1d5c4:	beq	1ce74 <__assert_fail@plt+0xb2d0>
   1d5c8:	ldr	r3, [sp, #28]
   1d5cc:	cmp	r3, #0
   1d5d0:	beq	1cfd4 <__assert_fail@plt+0xb430>
   1d5d4:	ldr	sl, [sp, #32]
   1d5d8:	mov	r8, fp
   1d5dc:	b	1d098 <__assert_fail@plt+0xb4f4>
   1d5e0:	ldr	r3, [sp, #28]
   1d5e4:	cmp	r3, #0
   1d5e8:	bne	1db3c <__assert_fail@plt+0xbf98>
   1d5ec:	add	sl, sl, #1
   1d5f0:	ldr	r6, [sp, #40]	; 0x28
   1d5f4:	mov	r5, #0
   1d5f8:	mov	r4, #92	; 0x5c
   1d5fc:	b	1ce90 <__assert_fail@plt+0xb2ec>
   1d600:	cmp	r9, r8
   1d604:	bne	1d874 <__assert_fail@plt+0xbcd0>
   1d608:	ldr	r0, [sp, #100]	; 0x64
   1d60c:	bl	11838 <iswprint@plt>
   1d610:	add	r5, r5, r4
   1d614:	cmp	r0, #0
   1d618:	add	r0, sp, #104	; 0x68
   1d61c:	moveq	r6, #0
   1d620:	bl	117b4 <mbsinit@plt>
   1d624:	cmp	r0, #0
   1d628:	beq	1d808 <__assert_fail@plt+0xbc64>
   1d62c:	mov	r2, r6
   1d630:	mov	ip, r5
   1d634:	eor	r5, r2, #1
   1d638:	ldr	r4, [sp, #80]	; 0x50
   1d63c:	ldr	r6, [sp, #84]	; 0x54
   1d640:	ldr	r7, [sp, #88]	; 0x58
   1d644:	uxtb	r5, r5
   1d648:	cmp	ip, #1
   1d64c:	bls	1db4c <__assert_fail@plt+0xbfa8>
   1d650:	ldr	r3, [sp, #44]	; 0x2c
   1d654:	and	r8, r3, r5
   1d658:	mov	r5, r2
   1d65c:	uxtb	r8, r8
   1d660:	add	r2, sl, ip
   1d664:	ldr	r0, [sp, #48]	; 0x30
   1d668:	mov	r1, #0
   1d66c:	str	r5, [sp, #48]	; 0x30
   1d670:	ldr	r9, [sp, #28]
   1d674:	ldr	ip, [sp, #40]	; 0x28
   1d678:	ldr	r3, [sp, #32]
   1d67c:	ldr	r5, [sp, #152]	; 0x98
   1d680:	b	1d73c <__assert_fail@plt+0xbb98>
   1d684:	cmp	r9, #0
   1d688:	bne	1da60 <__assert_fail@plt+0xbebc>
   1d68c:	eor	r1, ip, #1
   1d690:	cmp	r5, #2
   1d694:	movne	r1, #0
   1d698:	andeq	r1, r1, #1
   1d69c:	cmp	r1, #0
   1d6a0:	beq	1d6d8 <__assert_fail@plt+0xbb34>
   1d6a4:	cmp	fp, r7
   1d6a8:	movhi	ip, #39	; 0x27
   1d6ac:	strbhi	ip, [r3, r7]
   1d6b0:	add	ip, r7, #1
   1d6b4:	cmp	fp, ip
   1d6b8:	movhi	lr, #36	; 0x24
   1d6bc:	strbhi	lr, [r3, ip]
   1d6c0:	add	ip, r7, #2
   1d6c4:	cmp	fp, ip
   1d6c8:	movhi	lr, #39	; 0x27
   1d6cc:	strbhi	lr, [r3, ip]
   1d6d0:	add	r7, r7, #3
   1d6d4:	mov	ip, r1
   1d6d8:	cmp	fp, r7
   1d6dc:	movhi	r1, #92	; 0x5c
   1d6e0:	strbhi	r1, [r3, r7]
   1d6e4:	add	r1, r7, #1
   1d6e8:	cmp	fp, r1
   1d6ec:	lsrhi	lr, r4, #6
   1d6f0:	addhi	lr, lr, #48	; 0x30
   1d6f4:	strbhi	lr, [r3, r1]
   1d6f8:	add	lr, r7, #2
   1d6fc:	cmp	fp, lr
   1d700:	lsrhi	r1, r4, #3
   1d704:	andhi	r1, r1, #7
   1d708:	addhi	r1, r1, #48	; 0x30
   1d70c:	add	sl, sl, #1
   1d710:	strbhi	r1, [r3, lr]
   1d714:	and	r4, r4, #7
   1d718:	cmp	r2, sl
   1d71c:	add	r4, r4, #48	; 0x30
   1d720:	add	r7, r7, #3
   1d724:	bls	1da84 <__assert_fail@plt+0xbee0>
   1d728:	mov	r1, r8
   1d72c:	cmp	fp, r7
   1d730:	strbhi	r4, [r3, r7]
   1d734:	ldrb	r4, [r0, #1]!
   1d738:	add	r7, r7, #1
   1d73c:	cmp	r8, #0
   1d740:	bne	1d684 <__assert_fail@plt+0xbae0>
   1d744:	cmp	r6, #0
   1d748:	bne	1d798 <__assert_fail@plt+0xbbf4>
   1d74c:	eor	r6, r1, #1
   1d750:	and	r6, r6, ip
   1d754:	add	sl, sl, #1
   1d758:	cmp	r2, sl
   1d75c:	uxtb	r6, r6
   1d760:	bls	1d7c0 <__assert_fail@plt+0xbc1c>
   1d764:	cmp	r6, #0
   1d768:	beq	1d72c <__assert_fail@plt+0xbb88>
   1d76c:	cmp	fp, r7
   1d770:	movhi	ip, #39	; 0x27
   1d774:	strbhi	ip, [r3, r7]
   1d778:	add	ip, r7, #1
   1d77c:	cmp	fp, ip
   1d780:	movhi	lr, #39	; 0x27
   1d784:	strbhi	lr, [r3, ip]
   1d788:	add	r7, r7, #2
   1d78c:	mov	r6, r8
   1d790:	mov	ip, r8
   1d794:	b	1d72c <__assert_fail@plt+0xbb88>
   1d798:	cmp	fp, r7
   1d79c:	eor	r6, r1, #1
   1d7a0:	movhi	lr, #92	; 0x5c
   1d7a4:	and	r6, r6, ip
   1d7a8:	add	sl, sl, #1
   1d7ac:	strbhi	lr, [r3, r7]
   1d7b0:	cmp	r2, sl
   1d7b4:	add	r7, r7, #1
   1d7b8:	uxtb	r6, r6
   1d7bc:	bhi	1d764 <__assert_fail@plt+0xbbc0>
   1d7c0:	str	ip, [sp, #40]	; 0x28
   1d7c4:	ldr	r5, [sp, #48]	; 0x30
   1d7c8:	b	1ce90 <__assert_fail@plt+0xb2ec>
   1d7cc:	ldr	r3, [sp, #24]
   1d7d0:	cmn	r3, #1
   1d7d4:	mov	r3, #0
   1d7d8:	str	r3, [sp, #104]	; 0x68
   1d7dc:	str	r3, [sp, #108]	; 0x6c
   1d7e0:	beq	1db00 <__assert_fail@plt+0xbf5c>
   1d7e4:	mov	r2, r5
   1d7e8:	mov	r3, #0
   1d7ec:	str	r7, [sp, #88]	; 0x58
   1d7f0:	ldr	r7, [sp, #152]	; 0x98
   1d7f4:	str	r5, [sp, #92]	; 0x5c
   1d7f8:	str	r6, [sp, #84]	; 0x54
   1d7fc:	mov	r5, r3
   1d800:	mov	r6, r2
   1d804:	str	r4, [sp, #80]	; 0x50
   1d808:	ldr	r3, [sp, #56]	; 0x38
   1d80c:	add	r9, sl, r5
   1d810:	add	r8, r3, r9
   1d814:	ldr	r3, [sp, #24]
   1d818:	mov	r1, r8
   1d81c:	sub	r2, r3, r9
   1d820:	add	r0, sp, #100	; 0x64
   1d824:	add	r3, sp, #104	; 0x68
   1d828:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1d82c:	subs	r4, r0, #0
   1d830:	beq	1dbd8 <__assert_fail@plt+0xc034>
   1d834:	cmn	r4, #1
   1d838:	beq	1dbb8 <__assert_fail@plt+0xc014>
   1d83c:	cmn	r4, #2
   1d840:	beq	1db58 <__assert_fail@plt+0xbfb4>
   1d844:	ldr	r2, [sp, #28]
   1d848:	cmp	r7, #2
   1d84c:	movne	r2, #0
   1d850:	andeq	r2, r2, #1
   1d854:	cmp	r2, #0
   1d858:	beq	1d608 <__assert_fail@plt+0xba64>
   1d85c:	cmp	r4, #1
   1d860:	beq	1d608 <__assert_fail@plt+0xba64>
   1d864:	sub	r3, r4, #1
   1d868:	add	r9, r3, r9
   1d86c:	ldr	r3, [sp, #56]	; 0x38
   1d870:	add	r9, r3, r9
   1d874:	ldrb	r3, [r8, #1]!
   1d878:	sub	r3, r3, #91	; 0x5b
   1d87c:	cmp	r3, #33	; 0x21
   1d880:	ldrls	pc, [pc, r3, lsl #2]
   1d884:	b	1d600 <__assert_fail@plt+0xba5c>
   1d888:	andeq	sp, r1, r0, lsl r9
   1d88c:	andeq	sp, r1, r0, lsl r9
   1d890:	andeq	sp, r1, r0, lsl #12
   1d894:	andeq	sp, r1, r0, lsl r9
   1d898:	andeq	sp, r1, r0, lsl #12
   1d89c:	andeq	sp, r1, r0, lsl r9
   1d8a0:	andeq	sp, r1, r0, lsl #12
   1d8a4:	andeq	sp, r1, r0, lsl #12
   1d8a8:	andeq	sp, r1, r0, lsl #12
   1d8ac:	andeq	sp, r1, r0, lsl #12
   1d8b0:	andeq	sp, r1, r0, lsl #12
   1d8b4:	andeq	sp, r1, r0, lsl #12
   1d8b8:	andeq	sp, r1, r0, lsl #12
   1d8bc:	andeq	sp, r1, r0, lsl #12
   1d8c0:	andeq	sp, r1, r0, lsl #12
   1d8c4:	andeq	sp, r1, r0, lsl #12
   1d8c8:	andeq	sp, r1, r0, lsl #12
   1d8cc:	andeq	sp, r1, r0, lsl #12
   1d8d0:	andeq	sp, r1, r0, lsl #12
   1d8d4:	andeq	sp, r1, r0, lsl #12
   1d8d8:	andeq	sp, r1, r0, lsl #12
   1d8dc:	andeq	sp, r1, r0, lsl #12
   1d8e0:	andeq	sp, r1, r0, lsl #12
   1d8e4:	andeq	sp, r1, r0, lsl #12
   1d8e8:	andeq	sp, r1, r0, lsl #12
   1d8ec:	andeq	sp, r1, r0, lsl #12
   1d8f0:	andeq	sp, r1, r0, lsl #12
   1d8f4:	andeq	sp, r1, r0, lsl #12
   1d8f8:	andeq	sp, r1, r0, lsl #12
   1d8fc:	andeq	sp, r1, r0, lsl #12
   1d900:	andeq	sp, r1, r0, lsl #12
   1d904:	andeq	sp, r1, r0, lsl #12
   1d908:	andeq	sp, r1, r0, lsl #12
   1d90c:	andeq	sp, r1, r0, lsl r9
   1d910:	mov	r3, #2
   1d914:	ldr	sl, [sp, #32]
   1d918:	mov	r8, fp
   1d91c:	str	r3, [sp, #152]	; 0x98
   1d920:	b	1d098 <__assert_fail@plt+0xb4f4>
   1d924:	ldr	r3, [sp, #156]	; 0x9c
   1d928:	tst	r3, #1
   1d92c:	bne	1da58 <__assert_fail@plt+0xbeb4>
   1d930:	ldr	r3, [sp, #152]	; 0x98
   1d934:	ldr	r4, [sp, #44]	; 0x2c
   1d938:	sub	r2, r3, #2
   1d93c:	mov	r5, #0
   1d940:	clz	r2, r2
   1d944:	mov	r8, r4
   1d948:	lsr	r2, r2, #5
   1d94c:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d950:	ldr	r3, [sp, #156]	; 0x9c
   1d954:	ands	r9, r3, #4
   1d958:	beq	1da90 <__assert_fail@plt+0xbeec>
   1d95c:	ldr	r2, [sp, #24]
   1d960:	add	r3, sl, #2
   1d964:	cmp	r3, r2
   1d968:	bcs	1d97c <__assert_fail@plt+0xbdd8>
   1d96c:	ldr	r2, [sp, #48]	; 0x30
   1d970:	ldrb	r4, [r2, #1]
   1d974:	cmp	r4, #63	; 0x3f
   1d978:	beq	1dc18 <__assert_fail@plt+0xc074>
   1d97c:	mov	r2, #0
   1d980:	mov	r8, r2
   1d984:	mov	r5, r2
   1d988:	mov	r4, #63	; 0x3f
   1d98c:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d990:	ldr	r3, [sp, #28]
   1d994:	cmp	r3, #0
   1d998:	bne	1dcbc <__assert_fail@plt+0xc118>
   1d99c:	mov	r2, r5
   1d9a0:	mov	r8, r3
   1d9a4:	mov	r5, #0
   1d9a8:	mov	r4, #63	; 0x3f
   1d9ac:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1d9b0:	ldr	r3, [sp, #28]
   1d9b4:	cmp	r3, #0
   1d9b8:	bne	1dcbc <__assert_fail@plt+0xc118>
   1d9bc:	ldr	r2, [sp, #72]	; 0x48
   1d9c0:	adds	r3, fp, #0
   1d9c4:	movne	r3, #1
   1d9c8:	cmp	r2, #0
   1d9cc:	movne	r3, #0
   1d9d0:	cmp	r3, #0
   1d9d4:	strne	fp, [sp, #72]	; 0x48
   1d9d8:	movne	fp, #0
   1d9dc:	bne	1da18 <__assert_fail@plt+0xbe74>
   1d9e0:	cmp	fp, r7
   1d9e4:	movhi	r2, #39	; 0x27
   1d9e8:	ldrhi	r3, [sp, #32]
   1d9ec:	strbhi	r2, [r3, r7]
   1d9f0:	add	r3, r7, #1
   1d9f4:	cmp	fp, r3
   1d9f8:	movhi	r1, #92	; 0x5c
   1d9fc:	ldrhi	r2, [sp, #32]
   1da00:	strbhi	r1, [r2, r3]
   1da04:	add	r3, r7, #2
   1da08:	cmp	fp, r3
   1da0c:	movhi	r1, #39	; 0x27
   1da10:	ldrhi	r2, [sp, #32]
   1da14:	strbhi	r1, [r2, r3]
   1da18:	ldr	r3, [sp, #28]
   1da1c:	add	r7, r7, #3
   1da20:	mov	r2, r5
   1da24:	mov	r8, r3
   1da28:	str	r5, [sp, #68]	; 0x44
   1da2c:	str	r3, [sp, #40]	; 0x28
   1da30:	mov	r4, #39	; 0x27
   1da34:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1da38:	ldr	r3, [sp, #56]	; 0x38
   1da3c:	ldrb	r3, [r3, #1]
   1da40:	adds	r3, r3, #0
   1da44:	movne	r3, #1
   1da48:	b	1ce30 <__assert_fail@plt+0xb28c>
   1da4c:	ldr	r5, [sp, #28]
   1da50:	mov	r4, #48	; 0x30
   1da54:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1da58:	add	sl, sl, #1
   1da5c:	b	1c988 <__assert_fail@plt+0xade4>
   1da60:	mov	sl, r3
   1da64:	ldr	r3, [sp, #28]
   1da68:	mov	r8, fp
   1da6c:	str	r3, [sp, #44]	; 0x2c
   1da70:	ldr	r3, [sp, #152]	; 0x98
   1da74:	sub	r2, r3, #2
   1da78:	clz	r2, r2
   1da7c:	lsr	r2, r2, #5
   1da80:	b	1d098 <__assert_fail@plt+0xb4f4>
   1da84:	str	ip, [sp, #40]	; 0x28
   1da88:	ldr	r5, [sp, #48]	; 0x30
   1da8c:	b	1cec8 <__assert_fail@plt+0xb324>
   1da90:	mov	r2, r9
   1da94:	mov	r8, r9
   1da98:	mov	r5, #0
   1da9c:	mov	r4, #63	; 0x3f
   1daa0:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1daa4:	cmp	fp, #0
   1daa8:	beq	1db20 <__assert_fail@plt+0xbf7c>
   1daac:	ldr	r1, [sp, #32]
   1dab0:	mov	r3, #34	; 0x22
   1dab4:	mov	r2, #1
   1dab8:	strb	r3, [r1]
   1dabc:	ldr	r3, [pc, #332]	; 1dc10 <__assert_fail@plt+0xc06c>
   1dac0:	str	r2, [sp, #52]	; 0x34
   1dac4:	mov	r7, r2
   1dac8:	str	r2, [sp, #44]	; 0x2c
   1dacc:	str	r3, [sp, #64]	; 0x40
   1dad0:	b	1c978 <__assert_fail@plt+0xadd4>
   1dad4:	ldr	r3, [pc, #300]	; 1dc08 <__assert_fail@plt+0xc064>
   1dad8:	str	r3, [sp, #64]	; 0x40
   1dadc:	mov	r3, #0
   1dae0:	str	r3, [sp, #28]
   1dae4:	mov	r3, #1
   1dae8:	str	r3, [sp, #52]	; 0x34
   1daec:	mov	r7, r3
   1daf0:	mov	r3, #2
   1daf4:	str	r3, [sp, #152]	; 0x98
   1daf8:	b	1c978 <__assert_fail@plt+0xadd4>
   1dafc:	bl	11b68 <abort@plt>
   1db00:	ldr	r0, [sp, #56]	; 0x38
   1db04:	bl	11988 <strlen@plt>
   1db08:	str	r0, [sp, #24]
   1db0c:	b	1d7e4 <__assert_fail@plt+0xbc40>
   1db10:	mov	r5, r8
   1db14:	mov	r4, #48	; 0x30
   1db18:	ldr	r8, [sp, #44]	; 0x2c
   1db1c:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1db20:	mov	r3, #1
   1db24:	str	r3, [sp, #52]	; 0x34
   1db28:	mov	r7, r3
   1db2c:	str	r3, [sp, #44]	; 0x2c
   1db30:	ldr	r3, [pc, #216]	; 1dc10 <__assert_fail@plt+0xc06c>
   1db34:	str	r3, [sp, #64]	; 0x40
   1db38:	b	1c978 <__assert_fail@plt+0xadd4>
   1db3c:	ldr	sl, [sp, #32]
   1db40:	mov	r8, fp
   1db44:	mov	r2, r3
   1db48:	b	1d098 <__assert_fail@plt+0xb4f4>
   1db4c:	mov	r3, r5
   1db50:	mov	r5, r2
   1db54:	b	1d350 <__assert_fail@plt+0xb7ac>
   1db58:	ldr	r1, [sp, #24]
   1db5c:	mov	r2, r5
   1db60:	cmp	r1, r9
   1db64:	mov	ip, r5
   1db68:	ldr	r4, [sp, #80]	; 0x50
   1db6c:	ldr	r5, [sp, #92]	; 0x5c
   1db70:	ldr	r6, [sp, #84]	; 0x54
   1db74:	ldr	r7, [sp, #88]	; 0x58
   1db78:	bls	1dbac <__assert_fail@plt+0xc008>
   1db7c:	ldrb	r3, [r8]
   1db80:	cmp	r3, #0
   1db84:	bne	1db98 <__assert_fail@plt+0xbff4>
   1db88:	b	1dbb0 <__assert_fail@plt+0xc00c>
   1db8c:	ldrb	r3, [r8, #1]!
   1db90:	cmp	r3, #0
   1db94:	beq	1dcb0 <__assert_fail@plt+0xc10c>
   1db98:	add	r2, r2, #1
   1db9c:	add	r3, sl, r2
   1dba0:	cmp	r1, r3
   1dba4:	bhi	1db8c <__assert_fail@plt+0xbfe8>
   1dba8:	mov	ip, r2
   1dbac:	mov	r3, #0
   1dbb0:	mov	r2, r3
   1dbb4:	b	1d648 <__assert_fail@plt+0xbaa4>
   1dbb8:	mov	r3, #0
   1dbbc:	mov	ip, r5
   1dbc0:	ldr	r4, [sp, #80]	; 0x50
   1dbc4:	ldr	r5, [sp, #92]	; 0x5c
   1dbc8:	ldr	r6, [sp, #84]	; 0x54
   1dbcc:	ldr	r7, [sp, #88]	; 0x58
   1dbd0:	mov	r2, r3
   1dbd4:	b	1d648 <__assert_fail@plt+0xbaa4>
   1dbd8:	mov	r3, r6
   1dbdc:	mov	ip, r5
   1dbe0:	eor	r5, r3, #1
   1dbe4:	mov	r2, r6
   1dbe8:	ldr	r4, [sp, #80]	; 0x50
   1dbec:	ldr	r6, [sp, #84]	; 0x54
   1dbf0:	ldr	r7, [sp, #88]	; 0x58
   1dbf4:	uxtb	r5, r5
   1dbf8:	b	1d648 <__assert_fail@plt+0xbaa4>
   1dbfc:	ldr	sl, [sp, #32]
   1dc00:	mov	r8, fp
   1dc04:	b	1da6c <__assert_fail@plt+0xbec8>
   1dc08:	andeq	r0, r3, r0, asr r4
   1dc0c:	andeq	r0, r3, r0, lsr lr
   1dc10:	andeq	r0, r3, ip, lsr #28
   1dc14:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1dc18:	ldr	r2, [sp, #56]	; 0x38
   1dc1c:	ldrb	r1, [r2, r3]
   1dc20:	sub	r2, r1, #33	; 0x21
   1dc24:	uxtb	r2, r2
   1dc28:	cmp	r2, #29
   1dc2c:	bhi	1dccc <__assert_fail@plt+0xc128>
   1dc30:	ldr	r0, [pc, #-36]	; 1dc14 <__assert_fail@plt+0xc070>
   1dc34:	mov	ip, #1
   1dc38:	ands	r2, r0, ip, lsl r2
   1dc3c:	beq	1dcdc <__assert_fail@plt+0xc138>
   1dc40:	ldr	r2, [sp, #28]
   1dc44:	cmp	r2, #0
   1dc48:	bne	1dddc <__assert_fail@plt+0xc238>
   1dc4c:	cmp	fp, r7
   1dc50:	ldr	r8, [sp, #28]
   1dc54:	ldrhi	r2, [sp, #32]
   1dc58:	mov	sl, r3
   1dc5c:	mov	r5, r8
   1dc60:	strbhi	r4, [r2, r7]
   1dc64:	add	r2, r7, #1
   1dc68:	cmp	fp, r2
   1dc6c:	movhi	r0, #34	; 0x22
   1dc70:	ldrhi	ip, [sp, #32]
   1dc74:	mov	r4, r1
   1dc78:	strbhi	r0, [ip, r2]
   1dc7c:	add	r2, r7, #2
   1dc80:	cmp	fp, r2
   1dc84:	movhi	r0, #34	; 0x22
   1dc88:	ldrhi	ip, [sp, #32]
   1dc8c:	strbhi	r0, [ip, r2]
   1dc90:	add	r2, r7, #3
   1dc94:	cmp	fp, r2
   1dc98:	movhi	r0, #63	; 0x3f
   1dc9c:	ldrhi	ip, [sp, #32]
   1dca0:	add	r7, r7, #4
   1dca4:	strbhi	r0, [ip, r2]
   1dca8:	mov	r2, r8
   1dcac:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1dcb0:	mov	ip, r2
   1dcb4:	mov	r2, r3
   1dcb8:	b	1d648 <__assert_fail@plt+0xbaa4>
   1dcbc:	ldr	sl, [sp, #32]
   1dcc0:	mov	r8, fp
   1dcc4:	ldr	r2, [sp, #28]
   1dcc8:	b	1d098 <__assert_fail@plt+0xb4f4>
   1dccc:	mov	r2, #0
   1dcd0:	mov	r8, r2
   1dcd4:	mov	r5, r2
   1dcd8:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1dcdc:	mov	r8, r2
   1dce0:	mov	r5, #0
   1dce4:	b	1ce58 <__assert_fail@plt+0xb2b4>
   1dce8:	ldr	r1, [sp, #152]	; 0x98
   1dcec:	bl	1c7b4 <__assert_fail@plt+0xac10>
   1dcf0:	str	r0, [sp, #168]	; 0xa8
   1dcf4:	b	1cd14 <__assert_fail@plt+0xb170>
   1dcf8:	ldr	r1, [sp, #152]	; 0x98
   1dcfc:	bl	1c7b4 <__assert_fail@plt+0xac10>
   1dd00:	str	r0, [sp, #164]	; 0xa4
   1dd04:	b	1ccf4 <__assert_fail@plt+0xb150>
   1dd08:	ldr	r7, [sp, #28]
   1dd0c:	b	1cd54 <__assert_fail@plt+0xb1b0>
   1dd10:	ldr	sl, [sp, #32]
   1dd14:	ldr	r2, [sp, #68]	; 0x44
   1dd18:	mov	r8, fp
   1dd1c:	mov	fp, r7
   1dd20:	ldr	r3, [sp, #64]	; 0x40
   1dd24:	cmp	r3, #0
   1dd28:	moveq	r2, #0
   1dd2c:	andne	r2, r2, #1
   1dd30:	cmp	r2, #0
   1dd34:	beq	1dd60 <__assert_fail@plt+0xc1bc>
   1dd38:	mov	r2, r3
   1dd3c:	ldrb	r3, [r3]
   1dd40:	cmp	r3, #0
   1dd44:	beq	1dd60 <__assert_fail@plt+0xc1bc>
   1dd48:	cmp	r8, fp
   1dd4c:	strbhi	r3, [sl, fp]
   1dd50:	ldrb	r3, [r2, #1]!
   1dd54:	add	fp, fp, #1
   1dd58:	cmp	r3, #0
   1dd5c:	bne	1dd48 <__assert_fail@plt+0xc1a4>
   1dd60:	cmp	r8, fp
   1dd64:	movhi	r3, #0
   1dd68:	strbhi	r3, [sl, fp]
   1dd6c:	b	1d0f4 <__assert_fail@plt+0xb550>
   1dd70:	ldr	r3, [sp, #168]	; 0xa8
   1dd74:	ldr	sl, [sp, #32]
   1dd78:	str	r3, [sp, #16]
   1dd7c:	ldr	r3, [sp, #164]	; 0xa4
   1dd80:	mov	ip, #5
   1dd84:	str	r3, [sp, #12]
   1dd88:	ldr	r3, [sp, #160]	; 0xa0
   1dd8c:	ldr	r2, [sp, #56]	; 0x38
   1dd90:	str	r3, [sp, #8]
   1dd94:	ldr	r3, [sp, #156]	; 0x9c
   1dd98:	ldr	r1, [sp, #72]	; 0x48
   1dd9c:	str	r3, [sp, #4]
   1dda0:	mov	r0, sl
   1dda4:	ldr	r3, [sp, #24]
   1dda8:	str	ip, [sp]
   1ddac:	bl	1c8d4 <__assert_fail@plt+0xad30>
   1ddb0:	mov	fp, r0
   1ddb4:	b	1d0f4 <__assert_fail@plt+0xb550>
   1ddb8:	mov	r8, fp
   1ddbc:	ldr	sl, [sp, #32]
   1ddc0:	mov	fp, r7
   1ddc4:	mov	r2, r3
   1ddc8:	b	1dd20 <__assert_fail@plt+0xc17c>
   1ddcc:	mov	r8, fp
   1ddd0:	ldr	sl, [sp, #32]
   1ddd4:	mov	fp, r7
   1ddd8:	b	1dd20 <__assert_fail@plt+0xc17c>
   1dddc:	ldr	sl, [sp, #32]
   1dde0:	mov	r8, fp
   1dde4:	b	1d0b0 <__assert_fail@plt+0xb50c>
   1dde8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddec:	sub	sp, sp, #52	; 0x34
   1ddf0:	mov	r4, r0
   1ddf4:	mov	r5, r3
   1ddf8:	mov	sl, r1
   1ddfc:	mov	fp, r2
   1de00:	bl	119b8 <__errno_location@plt>
   1de04:	ldr	r7, [pc, #412]	; 1dfa8 <__assert_fail@plt+0xc404>
   1de08:	cmn	r4, #-2147483647	; 0x80000001
   1de0c:	ldr	r6, [r7]
   1de10:	mov	r8, r0
   1de14:	movne	r0, #0
   1de18:	moveq	r0, #1
   1de1c:	ldr	r3, [r8]
   1de20:	orrs	r0, r0, r4, lsr #31
   1de24:	str	r3, [sp, #24]
   1de28:	bne	1dfa4 <__assert_fail@plt+0xc400>
   1de2c:	ldr	r2, [r7, #4]
   1de30:	cmp	r4, r2
   1de34:	blt	1de94 <__assert_fail@plt+0xc2f0>
   1de38:	add	r9, r7, #8
   1de3c:	cmp	r6, r9
   1de40:	str	r2, [sp, #44]	; 0x2c
   1de44:	beq	1df74 <__assert_fail@plt+0xc3d0>
   1de48:	mov	r3, #8
   1de4c:	sub	r2, r4, r2
   1de50:	mov	r0, r6
   1de54:	str	r3, [sp]
   1de58:	add	r2, r2, #1
   1de5c:	mvn	r3, #-2147483648	; 0x80000000
   1de60:	add	r1, sp, #44	; 0x2c
   1de64:	bl	2c648 <__assert_fail@plt+0x1aaa4>
   1de68:	mov	r6, r0
   1de6c:	str	r0, [r7]
   1de70:	ldr	r0, [r7, #4]
   1de74:	ldr	r2, [sp, #44]	; 0x2c
   1de78:	mov	r1, #0
   1de7c:	sub	r2, r2, r0
   1de80:	add	r0, r6, r0, lsl #3
   1de84:	lsl	r2, r2, #3
   1de88:	bl	119e8 <memset@plt>
   1de8c:	ldr	r3, [sp, #44]	; 0x2c
   1de90:	str	r3, [r7, #4]
   1de94:	add	r3, r6, r4, lsl #3
   1de98:	ldr	r1, [r5, #4]
   1de9c:	ldr	r7, [r3, #4]
   1dea0:	ldr	r9, [r6, r4, lsl #3]
   1dea4:	ldr	r2, [r5, #40]	; 0x28
   1dea8:	ldr	ip, [r5, #44]	; 0x2c
   1deac:	add	r0, r5, #8
   1deb0:	str	r3, [sp, #28]
   1deb4:	ldr	r3, [r5]
   1deb8:	orr	r1, r1, #1
   1debc:	mov	lr, r0
   1dec0:	str	r1, [sp, #32]
   1dec4:	str	r0, [sp, #36]	; 0x24
   1dec8:	str	r1, [sp, #4]
   1decc:	str	r2, [sp, #12]
   1ded0:	str	r3, [sp]
   1ded4:	mov	r0, r7
   1ded8:	mov	r1, r9
   1dedc:	str	ip, [sp, #16]
   1dee0:	str	lr, [sp, #8]
   1dee4:	mov	r3, fp
   1dee8:	mov	r2, sl
   1deec:	bl	1c8d4 <__assert_fail@plt+0xad30>
   1def0:	cmp	r9, r0
   1def4:	bhi	1df60 <__assert_fail@plt+0xc3bc>
   1def8:	ldr	r3, [pc, #172]	; 1dfac <__assert_fail@plt+0xc408>
   1defc:	add	r9, r0, #1
   1df00:	cmp	r7, r3
   1df04:	str	r9, [r6, r4, lsl #3]
   1df08:	beq	1df14 <__assert_fail@plt+0xc370>
   1df0c:	mov	r0, r7
   1df10:	bl	17274 <__assert_fail@plt+0x56d0>
   1df14:	mov	r0, r9
   1df18:	bl	2c4e4 <__assert_fail@plt+0x1a940>
   1df1c:	ldr	lr, [sp, #28]
   1df20:	ldr	ip, [r5, #44]	; 0x2c
   1df24:	ldr	r4, [r5, #40]	; 0x28
   1df28:	mov	r3, fp
   1df2c:	mov	r2, sl
   1df30:	mov	r1, r9
   1df34:	str	r0, [lr, #4]
   1df38:	ldr	lr, [r5]
   1df3c:	ldr	r5, [sp, #36]	; 0x24
   1df40:	str	ip, [sp, #16]
   1df44:	str	r5, [sp, #8]
   1df48:	ldr	r5, [sp, #32]
   1df4c:	str	r4, [sp, #12]
   1df50:	str	r5, [sp, #4]
   1df54:	str	lr, [sp]
   1df58:	mov	r7, r0
   1df5c:	bl	1c8d4 <__assert_fail@plt+0xad30>
   1df60:	ldr	r3, [sp, #24]
   1df64:	mov	r0, r7
   1df68:	str	r3, [r8]
   1df6c:	add	sp, sp, #52	; 0x34
   1df70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df74:	mov	r3, #8
   1df78:	sub	r2, r4, r2
   1df7c:	str	r3, [sp]
   1df80:	add	r1, sp, #44	; 0x2c
   1df84:	add	r2, r2, #1
   1df88:	mvn	r3, #-2147483648	; 0x80000000
   1df8c:	bl	2c648 <__assert_fail@plt+0x1aaa4>
   1df90:	mov	r6, r0
   1df94:	ldm	r9, {r0, r1}
   1df98:	str	r6, [r7]
   1df9c:	stm	r6, {r0, r1}
   1dfa0:	b	1de70 <__assert_fail@plt+0xc2cc>
   1dfa4:	bl	11b68 <abort@plt>
   1dfa8:	ldrdeq	r2, [r4], -ip
   1dfac:	andeq	r2, r4, ip, asr #5
   1dfb0:	push	{r4, r5, r6, lr}
   1dfb4:	mov	r5, r0
   1dfb8:	bl	119b8 <__errno_location@plt>
   1dfbc:	cmp	r5, #0
   1dfc0:	mov	r1, #48	; 0x30
   1dfc4:	mov	r4, r0
   1dfc8:	ldr	r0, [pc, #16]	; 1dfe0 <__assert_fail@plt+0xc43c>
   1dfcc:	ldr	r6, [r4]
   1dfd0:	movne	r0, r5
   1dfd4:	bl	2c944 <__assert_fail@plt+0x1ada0>
   1dfd8:	str	r6, [r4]
   1dfdc:	pop	{r4, r5, r6, pc}
   1dfe0:	andeq	r2, r4, ip, asr #7
   1dfe4:	ldr	r3, [pc, #12]	; 1dff8 <__assert_fail@plt+0xc454>
   1dfe8:	cmp	r0, #0
   1dfec:	moveq	r0, r3
   1dff0:	ldr	r0, [r0]
   1dff4:	bx	lr
   1dff8:	andeq	r2, r4, ip, asr #7
   1dffc:	ldr	r3, [pc, #12]	; 1e010 <__assert_fail@plt+0xc46c>
   1e000:	cmp	r0, #0
   1e004:	moveq	r0, r3
   1e008:	str	r1, [r0]
   1e00c:	bx	lr
   1e010:	andeq	r2, r4, ip, asr #7
   1e014:	ldr	r3, [pc, #52]	; 1e050 <__assert_fail@plt+0xc4ac>
   1e018:	cmp	r0, #0
   1e01c:	moveq	r0, r3
   1e020:	add	r3, r0, #8
   1e024:	push	{lr}		; (str lr, [sp, #-4]!)
   1e028:	lsr	lr, r1, #5
   1e02c:	and	r1, r1, #31
   1e030:	ldr	ip, [r3, lr, lsl #2]
   1e034:	lsr	r0, ip, r1
   1e038:	eor	r2, r2, r0
   1e03c:	and	r2, r2, #1
   1e040:	and	r0, r0, #1
   1e044:	eor	r1, ip, r2, lsl r1
   1e048:	str	r1, [r3, lr, lsl #2]
   1e04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e050:	andeq	r2, r4, ip, asr #7
   1e054:	ldr	r3, [pc, #16]	; 1e06c <__assert_fail@plt+0xc4c8>
   1e058:	cmp	r0, #0
   1e05c:	movne	r3, r0
   1e060:	ldr	r0, [r3, #4]
   1e064:	str	r1, [r3, #4]
   1e068:	bx	lr
   1e06c:	andeq	r2, r4, ip, asr #7
   1e070:	ldr	r3, [pc, #44]	; 1e0a4 <__assert_fail@plt+0xc500>
   1e074:	cmp	r0, #0
   1e078:	moveq	r0, r3
   1e07c:	mov	ip, #10
   1e080:	cmp	r2, #0
   1e084:	cmpne	r1, #0
   1e088:	str	ip, [r0]
   1e08c:	beq	1e09c <__assert_fail@plt+0xc4f8>
   1e090:	str	r1, [r0, #40]	; 0x28
   1e094:	str	r2, [r0, #44]	; 0x2c
   1e098:	bx	lr
   1e09c:	push	{r4, lr}
   1e0a0:	bl	11b68 <abort@plt>
   1e0a4:	andeq	r2, r4, ip, asr #7
   1e0a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e0ac:	sub	sp, sp, #24
   1e0b0:	ldr	ip, [pc, #108]	; 1e124 <__assert_fail@plt+0xc580>
   1e0b4:	ldr	r4, [sp, #56]	; 0x38
   1e0b8:	mov	r9, r2
   1e0bc:	cmp	r4, #0
   1e0c0:	moveq	r4, ip
   1e0c4:	mov	sl, r3
   1e0c8:	mov	r7, r0
   1e0cc:	mov	r8, r1
   1e0d0:	bl	119b8 <__errno_location@plt>
   1e0d4:	ldr	r3, [r4, #44]	; 0x2c
   1e0d8:	mov	r1, r8
   1e0dc:	ldr	r6, [r0]
   1e0e0:	str	r3, [sp, #16]
   1e0e4:	ldr	r2, [r4, #40]	; 0x28
   1e0e8:	add	r3, r4, #8
   1e0ec:	str	r3, [sp, #8]
   1e0f0:	str	r2, [sp, #12]
   1e0f4:	ldr	r2, [r4, #4]
   1e0f8:	mov	r5, r0
   1e0fc:	str	r2, [sp, #4]
   1e100:	ldr	ip, [r4]
   1e104:	mov	r3, sl
   1e108:	mov	r2, r9
   1e10c:	mov	r0, r7
   1e110:	str	ip, [sp]
   1e114:	bl	1c8d4 <__assert_fail@plt+0xad30>
   1e118:	str	r6, [r5]
   1e11c:	add	sp, sp, #24
   1e120:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e124:	andeq	r2, r4, ip, asr #7
   1e128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e12c:	cmp	r3, #0
   1e130:	sub	sp, sp, #44	; 0x2c
   1e134:	ldr	r4, [pc, #192]	; 1e1fc <__assert_fail@plt+0xc658>
   1e138:	mov	r6, r2
   1e13c:	movne	r4, r3
   1e140:	mov	r9, r1
   1e144:	mov	r8, r0
   1e148:	bl	119b8 <__errno_location@plt>
   1e14c:	ldr	r3, [r4, #44]	; 0x2c
   1e150:	ldr	r5, [r4, #4]
   1e154:	add	sl, r4, #8
   1e158:	cmp	r6, #0
   1e15c:	orreq	r5, r5, #1
   1e160:	mov	r1, #0
   1e164:	ldr	r2, [r0]
   1e168:	str	r3, [sp, #16]
   1e16c:	ldr	r3, [r4, #40]	; 0x28
   1e170:	stmib	sp, {r5, sl}
   1e174:	str	r3, [sp, #12]
   1e178:	ldr	r3, [r4]
   1e17c:	mov	r7, r0
   1e180:	str	r2, [sp, #28]
   1e184:	str	r3, [sp]
   1e188:	mov	r2, r8
   1e18c:	mov	r3, r9
   1e190:	mov	r0, r1
   1e194:	bl	1c8d4 <__assert_fail@plt+0xad30>
   1e198:	add	r1, r0, #1
   1e19c:	mov	fp, r0
   1e1a0:	mov	r0, r1
   1e1a4:	str	r1, [sp, #36]	; 0x24
   1e1a8:	bl	2c4e4 <__assert_fail@plt+0x1a940>
   1e1ac:	ldr	r3, [r4, #44]	; 0x2c
   1e1b0:	mov	r2, r8
   1e1b4:	str	r3, [sp, #16]
   1e1b8:	ldr	r3, [r4, #40]	; 0x28
   1e1bc:	str	r5, [sp, #4]
   1e1c0:	str	r3, [sp, #12]
   1e1c4:	str	sl, [sp, #8]
   1e1c8:	ldr	ip, [r4]
   1e1cc:	ldr	r1, [sp, #36]	; 0x24
   1e1d0:	mov	r3, r9
   1e1d4:	str	ip, [sp]
   1e1d8:	str	r0, [sp, #32]
   1e1dc:	bl	1c8d4 <__assert_fail@plt+0xad30>
   1e1e0:	ldr	r2, [sp, #28]
   1e1e4:	cmp	r6, #0
   1e1e8:	str	r2, [r7]
   1e1ec:	ldr	r0, [sp, #32]
   1e1f0:	strne	fp, [r6]
   1e1f4:	add	sp, sp, #44	; 0x2c
   1e1f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1fc:	andeq	r2, r4, ip, asr #7
   1e200:	mov	r3, r2
   1e204:	mov	r2, #0
   1e208:	b	1e128 <__assert_fail@plt+0xc584>
   1e20c:	push	{r4, r5, r6, r7, r8, lr}
   1e210:	ldr	r6, [pc, #116]	; 1e28c <__assert_fail@plt+0xc6e8>
   1e214:	ldr	r3, [r6, #4]
   1e218:	ldr	r7, [r6]
   1e21c:	cmp	r3, #1
   1e220:	movgt	r5, r7
   1e224:	movgt	r4, #1
   1e228:	ble	1e248 <__assert_fail@plt+0xc6a4>
   1e22c:	ldr	r0, [r5, #12]
   1e230:	bl	17274 <__assert_fail@plt+0x56d0>
   1e234:	ldr	r3, [r6, #4]
   1e238:	add	r4, r4, #1
   1e23c:	cmp	r3, r4
   1e240:	add	r5, r5, #8
   1e244:	bgt	1e22c <__assert_fail@plt+0xc688>
   1e248:	ldr	r0, [r7, #4]
   1e24c:	ldr	r4, [pc, #60]	; 1e290 <__assert_fail@plt+0xc6ec>
   1e250:	cmp	r0, r4
   1e254:	beq	1e268 <__assert_fail@plt+0xc6c4>
   1e258:	bl	17274 <__assert_fail@plt+0x56d0>
   1e25c:	mov	r3, #256	; 0x100
   1e260:	str	r4, [r6, #12]
   1e264:	str	r3, [r6, #8]
   1e268:	ldr	r4, [pc, #36]	; 1e294 <__assert_fail@plt+0xc6f0>
   1e26c:	cmp	r7, r4
   1e270:	beq	1e280 <__assert_fail@plt+0xc6dc>
   1e274:	mov	r0, r7
   1e278:	bl	17274 <__assert_fail@plt+0x56d0>
   1e27c:	str	r4, [r6]
   1e280:	mov	r3, #1
   1e284:	str	r3, [r6, #4]
   1e288:	pop	{r4, r5, r6, r7, r8, pc}
   1e28c:	ldrdeq	r2, [r4], -ip
   1e290:	andeq	r2, r4, ip, asr #5
   1e294:	andeq	r2, r4, r4, ror #3
   1e298:	ldr	r3, [pc, #4]	; 1e2a4 <__assert_fail@plt+0xc700>
   1e29c:	mvn	r2, #0
   1e2a0:	b	1dde8 <__assert_fail@plt+0xc244>
   1e2a4:	andeq	r2, r4, ip, asr #7
   1e2a8:	ldr	r3, [pc]	; 1e2b0 <__assert_fail@plt+0xc70c>
   1e2ac:	b	1dde8 <__assert_fail@plt+0xc244>
   1e2b0:	andeq	r2, r4, ip, asr #7
   1e2b4:	mov	r1, r0
   1e2b8:	ldr	r3, [pc, #8]	; 1e2c8 <__assert_fail@plt+0xc724>
   1e2bc:	mvn	r2, #0
   1e2c0:	mov	r0, #0
   1e2c4:	b	1dde8 <__assert_fail@plt+0xc244>
   1e2c8:	andeq	r2, r4, ip, asr #7
   1e2cc:	mov	r2, r1
   1e2d0:	ldr	r3, [pc, #8]	; 1e2e0 <__assert_fail@plt+0xc73c>
   1e2d4:	mov	r1, r0
   1e2d8:	mov	r0, #0
   1e2dc:	b	1dde8 <__assert_fail@plt+0xc244>
   1e2e0:	andeq	r2, r4, ip, asr #7
   1e2e4:	push	{r4, r5, lr}
   1e2e8:	sub	sp, sp, #52	; 0x34
   1e2ec:	mov	r5, r2
   1e2f0:	mov	r4, r0
   1e2f4:	mov	r0, sp
   1e2f8:	bl	1c784 <__assert_fail@plt+0xabe0>
   1e2fc:	mov	r3, sp
   1e300:	mov	r1, r5
   1e304:	mov	r0, r4
   1e308:	mvn	r2, #0
   1e30c:	bl	1dde8 <__assert_fail@plt+0xc244>
   1e310:	add	sp, sp, #52	; 0x34
   1e314:	pop	{r4, r5, pc}
   1e318:	push	{r4, r5, r6, lr}
   1e31c:	sub	sp, sp, #48	; 0x30
   1e320:	mov	r5, r2
   1e324:	mov	r6, r3
   1e328:	mov	r4, r0
   1e32c:	mov	r0, sp
   1e330:	bl	1c784 <__assert_fail@plt+0xabe0>
   1e334:	mov	r3, sp
   1e338:	mov	r2, r6
   1e33c:	mov	r1, r5
   1e340:	mov	r0, r4
   1e344:	bl	1dde8 <__assert_fail@plt+0xc244>
   1e348:	add	sp, sp, #48	; 0x30
   1e34c:	pop	{r4, r5, r6, pc}
   1e350:	mov	r2, r1
   1e354:	mov	r1, r0
   1e358:	mov	r0, #0
   1e35c:	b	1e2e4 <__assert_fail@plt+0xc740>
   1e360:	mov	r3, r2
   1e364:	mov	r2, r1
   1e368:	mov	r1, r0
   1e36c:	mov	r0, #0
   1e370:	b	1e318 <__assert_fail@plt+0xc774>
   1e374:	push	{r4, r5, r6, r7, r8, lr}
   1e378:	mov	r7, r0
   1e37c:	ldr	lr, [pc, #100]	; 1e3e8 <__assert_fail@plt+0xc844>
   1e380:	mov	r8, r1
   1e384:	mov	r4, r2
   1e388:	ldm	lr!, {r0, r1, r2, r3}
   1e38c:	sub	sp, sp, #48	; 0x30
   1e390:	mov	ip, sp
   1e394:	lsr	r5, r4, #5
   1e398:	stmia	ip!, {r0, r1, r2, r3}
   1e39c:	add	r6, sp, #8
   1e3a0:	ldm	lr!, {r0, r1, r2, r3}
   1e3a4:	and	r4, r4, #31
   1e3a8:	stmia	ip!, {r0, r1, r2, r3}
   1e3ac:	ldm	lr, {r0, r1, r2, r3}
   1e3b0:	stm	ip, {r0, r1, r2, r3}
   1e3b4:	mov	r2, r8
   1e3b8:	ldr	lr, [r6, r5, lsl #2]
   1e3bc:	mov	r1, r7
   1e3c0:	mov	r3, sp
   1e3c4:	lsr	ip, lr, r4
   1e3c8:	eor	ip, ip, #1
   1e3cc:	and	ip, ip, #1
   1e3d0:	mov	r0, #0
   1e3d4:	eor	r4, lr, ip, lsl r4
   1e3d8:	str	r4, [r6, r5, lsl #2]
   1e3dc:	bl	1dde8 <__assert_fail@plt+0xc244>
   1e3e0:	add	sp, sp, #48	; 0x30
   1e3e4:	pop	{r4, r5, r6, r7, r8, pc}
   1e3e8:	andeq	r2, r4, ip, asr #7
   1e3ec:	mov	r2, r1
   1e3f0:	mvn	r1, #0
   1e3f4:	b	1e374 <__assert_fail@plt+0xc7d0>
   1e3f8:	mov	r2, #58	; 0x3a
   1e3fc:	mvn	r1, #0
   1e400:	b	1e374 <__assert_fail@plt+0xc7d0>
   1e404:	mov	r2, #58	; 0x3a
   1e408:	b	1e374 <__assert_fail@plt+0xc7d0>
   1e40c:	push	{r4, r5, r6, r7, lr}
   1e410:	sub	sp, sp, #100	; 0x64
   1e414:	mov	r6, r0
   1e418:	mov	r0, sp
   1e41c:	mov	r7, r2
   1e420:	bl	1c784 <__assert_fail@plt+0xabe0>
   1e424:	mov	ip, sp
   1e428:	add	lr, sp, #48	; 0x30
   1e42c:	ldm	ip!, {r0, r1, r2, r3}
   1e430:	stmia	lr!, {r0, r1, r2, r3}
   1e434:	ldm	ip!, {r0, r1, r2, r3}
   1e438:	ldr	r5, [sp, #60]	; 0x3c
   1e43c:	stmia	lr!, {r0, r1, r2, r3}
   1e440:	mvn	r4, r5
   1e444:	ldm	ip, {r0, r1, r2, r3}
   1e448:	and	ip, r4, #67108864	; 0x4000000
   1e44c:	eor	ip, ip, r5
   1e450:	str	ip, [sp, #60]	; 0x3c
   1e454:	stm	lr, {r0, r1, r2, r3}
   1e458:	mov	r1, r7
   1e45c:	mov	r0, r6
   1e460:	add	r3, sp, #48	; 0x30
   1e464:	mvn	r2, #0
   1e468:	bl	1dde8 <__assert_fail@plt+0xc244>
   1e46c:	add	sp, sp, #100	; 0x64
   1e470:	pop	{r4, r5, r6, r7, pc}
   1e474:	push	{r4, r5, r6, r7, r8, lr}
   1e478:	mov	r5, r1
   1e47c:	ldr	lr, [pc, #100]	; 1e4e8 <__assert_fail@plt+0xc944>
   1e480:	mov	r4, r2
   1e484:	mov	r7, r0
   1e488:	mov	r8, r3
   1e48c:	ldm	lr!, {r0, r1, r2, r3}
   1e490:	sub	sp, sp, #48	; 0x30
   1e494:	mov	ip, sp
   1e498:	mov	r6, #10
   1e49c:	stmia	ip!, {r0, r1, r2, r3}
   1e4a0:	cmp	r4, #0
   1e4a4:	cmpne	r5, #0
   1e4a8:	ldm	lr!, {r0, r1, r2, r3}
   1e4ac:	str	r6, [sp]
   1e4b0:	stmia	ip!, {r0, r1, r2, r3}
   1e4b4:	ldm	lr, {r0, r1, r2, r3}
   1e4b8:	stm	ip, {r0, r1, r2, r3}
   1e4bc:	beq	1e4e4 <__assert_fail@plt+0xc940>
   1e4c0:	mov	r3, sp
   1e4c4:	mov	r1, r8
   1e4c8:	mov	r0, r7
   1e4cc:	ldr	r2, [sp, #72]	; 0x48
   1e4d0:	str	r5, [sp, #40]	; 0x28
   1e4d4:	str	r4, [sp, #44]	; 0x2c
   1e4d8:	bl	1dde8 <__assert_fail@plt+0xc244>
   1e4dc:	add	sp, sp, #48	; 0x30
   1e4e0:	pop	{r4, r5, r6, r7, r8, pc}
   1e4e4:	bl	11b68 <abort@plt>
   1e4e8:	andeq	r2, r4, ip, asr #7
   1e4ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1e4f0:	sub	sp, sp, #12
   1e4f4:	mvn	ip, #0
   1e4f8:	str	ip, [sp]
   1e4fc:	bl	1e474 <__assert_fail@plt+0xc8d0>
   1e500:	add	sp, sp, #12
   1e504:	pop	{pc}		; (ldr pc, [sp], #4)
   1e508:	push	{lr}		; (str lr, [sp, #-4]!)
   1e50c:	sub	sp, sp, #12
   1e510:	mvn	ip, #0
   1e514:	mov	r3, r2
   1e518:	str	ip, [sp]
   1e51c:	mov	r2, r1
   1e520:	mov	r1, r0
   1e524:	mov	r0, #0
   1e528:	bl	1e474 <__assert_fail@plt+0xc8d0>
   1e52c:	add	sp, sp, #12
   1e530:	pop	{pc}		; (ldr pc, [sp], #4)
   1e534:	push	{lr}		; (str lr, [sp, #-4]!)
   1e538:	sub	sp, sp, #12
   1e53c:	str	r3, [sp]
   1e540:	mov	r3, r2
   1e544:	mov	r2, r1
   1e548:	mov	r1, r0
   1e54c:	mov	r0, #0
   1e550:	bl	1e474 <__assert_fail@plt+0xc8d0>
   1e554:	add	sp, sp, #12
   1e558:	pop	{pc}		; (ldr pc, [sp], #4)
   1e55c:	ldr	r3, [pc]	; 1e564 <__assert_fail@plt+0xc9c0>
   1e560:	b	1dde8 <__assert_fail@plt+0xc244>
   1e564:	andeq	r2, r4, ip, ror #3
   1e568:	mov	r2, r1
   1e56c:	ldr	r3, [pc, #8]	; 1e57c <__assert_fail@plt+0xc9d8>
   1e570:	mov	r1, r0
   1e574:	mov	r0, #0
   1e578:	b	1dde8 <__assert_fail@plt+0xc244>
   1e57c:	andeq	r2, r4, ip, ror #3
   1e580:	ldr	r3, [pc, #4]	; 1e58c <__assert_fail@plt+0xc9e8>
   1e584:	mvn	r2, #0
   1e588:	b	1dde8 <__assert_fail@plt+0xc244>
   1e58c:	andeq	r2, r4, ip, ror #3
   1e590:	mov	r1, r0
   1e594:	ldr	r3, [pc, #8]	; 1e5a4 <__assert_fail@plt+0xca00>
   1e598:	mvn	r2, #0
   1e59c:	mov	r0, #0
   1e5a0:	b	1dde8 <__assert_fail@plt+0xc244>
   1e5a4:	andeq	r2, r4, ip, ror #3
   1e5a8:	mov	ip, r0
   1e5ac:	ldr	r3, [r1, #40]	; 0x28
   1e5b0:	ldr	r0, [r1, #56]	; 0x38
   1e5b4:	cmp	r0, r3
   1e5b8:	ble	1e62c <__assert_fail@plt+0xca88>
   1e5bc:	push	{r4, lr}
   1e5c0:	ldr	lr, [r1, #4]
   1e5c4:	ldrb	r0, [lr, r3]
   1e5c8:	strb	r0, [ip]
   1e5cc:	ldr	r4, [r1, #80]	; 0x50
   1e5d0:	cmp	r4, #1
   1e5d4:	ble	1e5f4 <__assert_fail@plt+0xca50>
   1e5d8:	ldr	r4, [r1, #28]
   1e5dc:	cmp	r3, r4
   1e5e0:	beq	1e5f4 <__assert_fail@plt+0xca50>
   1e5e4:	ldr	r4, [r1, #8]
   1e5e8:	ldr	r4, [r4, r3, lsl #2]
   1e5ec:	cmn	r4, #1
   1e5f0:	beq	1e674 <__assert_fail@plt+0xcad0>
   1e5f4:	cmp	r0, #92	; 0x5c
   1e5f8:	beq	1e63c <__assert_fail@plt+0xca98>
   1e5fc:	cmp	r0, #91	; 0x5b
   1e600:	beq	1e680 <__assert_fail@plt+0xcadc>
   1e604:	cmp	r0, #93	; 0x5d
   1e608:	beq	1e664 <__assert_fail@plt+0xcac0>
   1e60c:	cmp	r0, #94	; 0x5e
   1e610:	beq	1e6a4 <__assert_fail@plt+0xcb00>
   1e614:	cmp	r0, #45	; 0x2d
   1e618:	bne	1e654 <__assert_fail@plt+0xcab0>
   1e61c:	mov	r3, #22
   1e620:	strb	r3, [ip, #4]
   1e624:	mov	r0, #1
   1e628:	pop	{r4, pc}
   1e62c:	mov	r3, #2
   1e630:	strb	r3, [ip, #4]
   1e634:	mov	r0, #0
   1e638:	bx	lr
   1e63c:	tst	r2, #1
   1e640:	beq	1e654 <__assert_fail@plt+0xcab0>
   1e644:	ldr	r2, [r1, #48]	; 0x30
   1e648:	add	r3, r3, #1
   1e64c:	cmp	r3, r2
   1e650:	blt	1e6e8 <__assert_fail@plt+0xcb44>
   1e654:	mov	r3, #1
   1e658:	mov	r0, r3
   1e65c:	strb	r3, [ip, #4]
   1e660:	pop	{r4, pc}
   1e664:	mov	r3, #21
   1e668:	strb	r3, [ip, #4]
   1e66c:	mov	r0, #1
   1e670:	pop	{r4, pc}
   1e674:	mov	r0, #1
   1e678:	strb	r0, [ip, #4]
   1e67c:	pop	{r4, pc}
   1e680:	ldr	r1, [r1, #48]	; 0x30
   1e684:	add	r0, r3, #1
   1e688:	cmp	r0, r1
   1e68c:	blt	1e6b4 <__assert_fail@plt+0xcb10>
   1e690:	mov	r0, #1
   1e694:	mov	r3, #91	; 0x5b
   1e698:	strb	r0, [ip, #4]
   1e69c:	strb	r3, [ip]
   1e6a0:	pop	{r4, pc}
   1e6a4:	mov	r3, #25
   1e6a8:	strb	r3, [ip, #4]
   1e6ac:	mov	r0, #1
   1e6b0:	pop	{r4, pc}
   1e6b4:	add	r3, lr, r3
   1e6b8:	ldrb	r3, [r3, #1]
   1e6bc:	cmp	r3, #58	; 0x3a
   1e6c0:	strb	r3, [ip]
   1e6c4:	beq	1e700 <__assert_fail@plt+0xcb5c>
   1e6c8:	cmp	r3, #61	; 0x3d
   1e6cc:	beq	1e718 <__assert_fail@plt+0xcb74>
   1e6d0:	cmp	r3, #46	; 0x2e
   1e6d4:	bne	1e690 <__assert_fail@plt+0xcaec>
   1e6d8:	mov	r3, #26
   1e6dc:	strb	r3, [ip, #4]
   1e6e0:	mov	r0, #2
   1e6e4:	pop	{r4, pc}
   1e6e8:	str	r3, [r1, #40]	; 0x28
   1e6ec:	ldrb	r3, [lr, r3]
   1e6f0:	mov	r0, #1
   1e6f4:	strb	r0, [ip, #4]
   1e6f8:	strb	r3, [ip]
   1e6fc:	pop	{r4, pc}
   1e700:	tst	r2, #4
   1e704:	beq	1e690 <__assert_fail@plt+0xcaec>
   1e708:	mov	r3, #30
   1e70c:	strb	r3, [ip, #4]
   1e710:	mov	r0, #2
   1e714:	pop	{r4, pc}
   1e718:	mov	r3, #28
   1e71c:	strb	r3, [ip, #4]
   1e720:	mov	r0, #2
   1e724:	pop	{r4, pc}
   1e728:	ldrb	r3, [r1, #24]
   1e72c:	cmp	r3, #17
   1e730:	bne	1e748 <__assert_fail@plt+0xcba4>
   1e734:	ldr	r3, [r1, #20]
   1e738:	cmp	r0, r3
   1e73c:	ldrbeq	r3, [r1, #26]
   1e740:	orreq	r3, r3, #8
   1e744:	strbeq	r3, [r1, #26]
   1e748:	mov	r0, #0
   1e74c:	bx	lr
   1e750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e754:	sub	sp, sp, #52	; 0x34
   1e758:	ldr	r8, [r0, #84]	; 0x54
   1e75c:	str	r3, [sp, #40]	; 0x28
   1e760:	add	r3, r3, r3, lsl #1
   1e764:	ldr	fp, [r8, #24]
   1e768:	str	r1, [sp, #24]
   1e76c:	add	fp, fp, r3, lsl #2
   1e770:	ldr	r1, [fp, #4]
   1e774:	cmp	r1, #0
   1e778:	ble	1e918 <__assert_fail@plt+0xcd74>
   1e77c:	ldr	r3, [sp, #88]	; 0x58
   1e780:	mov	r6, r2
   1e784:	mov	r2, #1
   1e788:	mov	sl, r0
   1e78c:	add	r3, r3, r3, lsl r2
   1e790:	lsl	r2, r2, r6
   1e794:	lsl	r3, r3, #3
   1e798:	add	r3, r3, #24
   1e79c:	str	r3, [sp, #44]	; 0x2c
   1e7a0:	ldr	r3, [sp, #24]
   1e7a4:	str	r2, [sp, #16]
   1e7a8:	mvn	r2, r2
   1e7ac:	str	r2, [sp, #20]
   1e7b0:	and	r2, r3, #1
   1e7b4:	and	r3, r3, #2
   1e7b8:	mov	r7, #0
   1e7bc:	str	r2, [sp, #28]
   1e7c0:	str	r3, [sp, #12]
   1e7c4:	b	1e7e4 <__assert_fail@plt+0xcc40>
   1e7c8:	cmp	r3, #9
   1e7cc:	beq	1e92c <__assert_fail@plt+0xcd88>
   1e7d0:	cmp	r3, #4
   1e7d4:	beq	1e824 <__assert_fail@plt+0xcc80>
   1e7d8:	add	r7, r7, #1
   1e7dc:	cmp	r1, r7
   1e7e0:	ble	1e918 <__assert_fail@plt+0xcd74>
   1e7e4:	ldr	r3, [fp, #8]
   1e7e8:	ldr	r2, [r8]
   1e7ec:	ldr	r5, [r3, r7, lsl #2]
   1e7f0:	add	r3, r2, r5, lsl #3
   1e7f4:	ldrb	r3, [r3, #4]
   1e7f8:	cmp	r3, #8
   1e7fc:	bne	1e7c8 <__assert_fail@plt+0xcc24>
   1e800:	ldr	r3, [sp, #28]
   1e804:	cmp	r3, #0
   1e808:	beq	1e7d8 <__assert_fail@plt+0xcc34>
   1e80c:	ldr	r3, [r2, r5, lsl #3]
   1e810:	cmp	r3, r6
   1e814:	bne	1e7d8 <__assert_fail@plt+0xcc34>
   1e818:	mvn	r0, #0
   1e81c:	add	sp, sp, #52	; 0x34
   1e820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e824:	ldr	r3, [sp, #88]	; 0x58
   1e828:	cmn	r3, #1
   1e82c:	beq	1e7d8 <__assert_fail@plt+0xcc34>
   1e830:	add	r9, r5, r5, lsl #1
   1e834:	ldr	r4, [sl, #116]	; 0x74
   1e838:	ldr	r3, [sp, #44]	; 0x2c
   1e83c:	str	fp, [sp, #32]
   1e840:	str	r7, [sp, #36]	; 0x24
   1e844:	lsl	r9, r9, #2
   1e848:	add	r4, r4, r3
   1e84c:	ldr	fp, [sp, #24]
   1e850:	ldr	r7, [sp, #40]	; 0x28
   1e854:	b	1e868 <__assert_fail@plt+0xccc4>
   1e858:	add	r4, r4, #24
   1e85c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1e860:	cmp	r3, #0
   1e864:	beq	1e900 <__assert_fail@plt+0xcd5c>
   1e868:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1e86c:	cmp	r5, r3
   1e870:	bne	1e858 <__assert_fail@plt+0xccb4>
   1e874:	cmp	r6, #31
   1e878:	mov	r2, r6
   1e87c:	mov	r1, fp
   1e880:	mov	r0, sl
   1e884:	bgt	1e898 <__assert_fail@plt+0xccf4>
   1e888:	ldr	r3, [r4, #-8]
   1e88c:	ldr	ip, [sp, #16]
   1e890:	tst	ip, r3
   1e894:	beq	1e858 <__assert_fail@plt+0xccb4>
   1e898:	ldr	r3, [r8, #20]
   1e89c:	add	r3, r3, r9
   1e8a0:	ldr	r3, [r3, #8]
   1e8a4:	ldr	ip, [r3]
   1e8a8:	cmp	r7, ip
   1e8ac:	mov	r3, ip
   1e8b0:	beq	1e950 <__assert_fail@plt+0xcdac>
   1e8b4:	ldr	ip, [sp, #88]	; 0x58
   1e8b8:	str	ip, [sp]
   1e8bc:	bl	1e750 <__assert_fail@plt+0xcbac>
   1e8c0:	cmn	r0, #1
   1e8c4:	beq	1e818 <__assert_fail@plt+0xcc74>
   1e8c8:	cmp	r0, #0
   1e8cc:	bne	1e8dc <__assert_fail@plt+0xcd38>
   1e8d0:	ldr	r3, [sp, #12]
   1e8d4:	cmp	r3, #0
   1e8d8:	bne	1e944 <__assert_fail@plt+0xcda0>
   1e8dc:	cmp	r6, #31
   1e8e0:	add	r4, r4, #24
   1e8e4:	ldrle	r3, [r4, #-32]	; 0xffffffe0
   1e8e8:	ldrle	r2, [sp, #20]
   1e8ec:	andle	r3, r3, r2
   1e8f0:	strle	r3, [r4, #-32]	; 0xffffffe0
   1e8f4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1e8f8:	cmp	r3, #0
   1e8fc:	bne	1e868 <__assert_fail@plt+0xccc4>
   1e900:	ldr	fp, [sp, #32]
   1e904:	ldr	r7, [sp, #36]	; 0x24
   1e908:	ldr	r1, [fp, #4]
   1e90c:	add	r7, r7, #1
   1e910:	cmp	r1, r7
   1e914:	bgt	1e7e4 <__assert_fail@plt+0xcc40>
   1e918:	ldr	r3, [sp, #24]
   1e91c:	lsr	r0, r3, #1
   1e920:	and	r0, r0, #1
   1e924:	add	sp, sp, #52	; 0x34
   1e928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e92c:	ldr	r3, [sp, #12]
   1e930:	cmp	r3, #0
   1e934:	beq	1e7d8 <__assert_fail@plt+0xcc34>
   1e938:	ldr	r3, [r2, r5, lsl #3]
   1e93c:	cmp	r6, r3
   1e940:	bne	1e7d8 <__assert_fail@plt+0xcc34>
   1e944:	mov	r0, #0
   1e948:	add	sp, sp, #52	; 0x34
   1e94c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e950:	ldr	r3, [sp, #24]
   1e954:	ands	r0, r3, #1
   1e958:	mvnne	r0, #0
   1e95c:	add	sp, sp, #52	; 0x34
   1e960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e964:	add	r1, r1, r1, lsl #1
   1e968:	ldr	ip, [r0, #116]	; 0x74
   1e96c:	push	{r4, lr}
   1e970:	add	ip, ip, r1, lsl #3
   1e974:	ldr	lr, [sp, #8]
   1e978:	ldr	r1, [ip, #8]
   1e97c:	ldr	r4, [sp, #12]
   1e980:	cmp	r1, lr
   1e984:	bgt	1e9d4 <__assert_fail@plt+0xce30>
   1e988:	ldr	ip, [ip, #12]
   1e98c:	cmp	lr, ip
   1e990:	bgt	1e9c8 <__assert_fail@plt+0xce24>
   1e994:	cmp	lr, ip
   1e998:	moveq	ip, #2
   1e99c:	movne	ip, #0
   1e9a0:	cmp	r1, lr
   1e9a4:	movne	r1, ip
   1e9a8:	orreq	r1, ip, #1
   1e9ac:	cmp	r1, #0
   1e9b0:	bne	1e9bc <__assert_fail@plt+0xce18>
   1e9b4:	mov	r0, r1
   1e9b8:	pop	{r4, pc}
   1e9bc:	str	r4, [sp, #8]
   1e9c0:	pop	{r4, lr}
   1e9c4:	b	1e750 <__assert_fail@plt+0xcbac>
   1e9c8:	mov	r1, #1
   1e9cc:	mov	r0, r1
   1e9d0:	pop	{r4, pc}
   1e9d4:	mvn	r1, #0
   1e9d8:	b	1e9b4 <__assert_fail@plt+0xce10>
   1e9dc:	push	{r4, r5, r6, lr}
   1e9e0:	mov	r4, r0
   1e9e4:	mov	r6, r1
   1e9e8:	mov	r5, r2
   1e9ec:	b	1e9f4 <__assert_fail@plt+0xce50>
   1e9f0:	mov	r4, r3
   1e9f4:	ldr	r3, [r4, #4]
   1e9f8:	cmp	r3, #0
   1e9fc:	bne	1e9f0 <__assert_fail@plt+0xce4c>
   1ea00:	ldr	r3, [r4, #8]
   1ea04:	cmp	r3, #0
   1ea08:	bne	1e9f0 <__assert_fail@plt+0xce4c>
   1ea0c:	mov	r1, r4
   1ea10:	mov	r0, r5
   1ea14:	blx	r6
   1ea18:	cmp	r0, #0
   1ea1c:	popne	{r4, r5, r6, pc}
   1ea20:	ldr	r2, [r4]
   1ea24:	cmp	r2, #0
   1ea28:	popeq	{r4, r5, r6, pc}
   1ea2c:	ldr	r3, [r2, #8]
   1ea30:	cmp	r4, r3
   1ea34:	cmpne	r3, #0
   1ea38:	moveq	r4, #1
   1ea3c:	movne	r4, #0
   1ea40:	cmp	r4, #0
   1ea44:	mov	r4, r2
   1ea48:	bne	1ea0c <__assert_fail@plt+0xce68>
   1ea4c:	b	1e9f0 <__assert_fail@plt+0xce4c>
   1ea50:	push	{r4, r5, r6, r7, r8, lr}
   1ea54:	mov	r4, r0
   1ea58:	mov	r6, r1
   1ea5c:	mov	r5, r2
   1ea60:	mov	r7, #0
   1ea64:	b	1ea6c <__assert_fail@plt+0xcec8>
   1ea68:	mov	r4, r3
   1ea6c:	mov	r1, r4
   1ea70:	mov	r0, r5
   1ea74:	blx	r6
   1ea78:	cmp	r0, #0
   1ea7c:	popne	{r4, r5, r6, r7, r8, pc}
   1ea80:	ldr	r3, [r4, #4]
   1ea84:	cmp	r3, #0
   1ea88:	moveq	r2, r7
   1ea8c:	bne	1ea68 <__assert_fail@plt+0xcec4>
   1ea90:	ldr	r3, [r4, #8]
   1ea94:	cmp	r3, #0
   1ea98:	cmpne	r2, r3
   1ea9c:	bne	1ea68 <__assert_fail@plt+0xcec4>
   1eaa0:	ldr	r3, [r4]
   1eaa4:	mov	r2, r4
   1eaa8:	subs	r4, r3, #0
   1eaac:	popeq	{r4, r5, r6, r7, r8, pc}
   1eab0:	ldr	r3, [r4, #8]
   1eab4:	cmp	r3, #0
   1eab8:	cmpne	r2, r3
   1eabc:	beq	1eaa0 <__assert_fail@plt+0xcefc>
   1eac0:	b	1ea68 <__assert_fail@plt+0xcec4>
   1eac4:	ldr	r3, [r0, #80]	; 0x50
   1eac8:	push	{r4, r5, r6, lr}
   1eacc:	cmp	r3, #1
   1ead0:	mov	r4, r0
   1ead4:	mov	r5, r1
   1ead8:	ble	1eb20 <__assert_fail@plt+0xcf7c>
   1eadc:	cmn	r1, #-1073741823	; 0xc0000001
   1eae0:	bhi	1eb50 <__assert_fail@plt+0xcfac>
   1eae4:	lsl	r6, r1, #2
   1eae8:	mov	r1, r6
   1eaec:	ldr	r0, [r0, #8]
   1eaf0:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1eaf4:	subs	r3, r0, #0
   1eaf8:	beq	1eb50 <__assert_fail@plt+0xcfac>
   1eafc:	ldr	r0, [r4, #12]
   1eb00:	str	r3, [r4, #8]
   1eb04:	cmp	r0, #0
   1eb08:	beq	1eb20 <__assert_fail@plt+0xcf7c>
   1eb0c:	mov	r1, r6
   1eb10:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1eb14:	cmp	r0, #0
   1eb18:	beq	1eb50 <__assert_fail@plt+0xcfac>
   1eb1c:	str	r0, [r4, #12]
   1eb20:	ldrb	r3, [r4, #75]	; 0x4b
   1eb24:	cmp	r3, #0
   1eb28:	bne	1eb38 <__assert_fail@plt+0xcf94>
   1eb2c:	mov	r0, #0
   1eb30:	str	r5, [r4, #36]	; 0x24
   1eb34:	pop	{r4, r5, r6, pc}
   1eb38:	mov	r1, r5
   1eb3c:	ldr	r0, [r4, #4]
   1eb40:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1eb44:	cmp	r0, #0
   1eb48:	strne	r0, [r4, #4]
   1eb4c:	bne	1eb2c <__assert_fail@plt+0xcf88>
   1eb50:	mov	r0, #12
   1eb54:	pop	{r4, r5, r6, pc}
   1eb58:	push	{r4, r5, r6, lr}
   1eb5c:	mov	r5, r1
   1eb60:	ldr	r3, [r0]
   1eb64:	ldr	r1, [r0, #4]
   1eb68:	mov	r4, r0
   1eb6c:	cmp	r3, r1
   1eb70:	beq	1eb8c <__assert_fail@plt+0xcfe8>
   1eb74:	ldr	r3, [r0, #8]
   1eb78:	add	r2, r1, #1
   1eb7c:	str	r2, [r4, #4]
   1eb80:	mov	r0, #1
   1eb84:	str	r5, [r3, r1, lsl #2]
   1eb88:	pop	{r4, r5, r6, pc}
   1eb8c:	add	r1, r1, #1
   1eb90:	ldr	r0, [r0, #8]
   1eb94:	lsl	r3, r1, #1
   1eb98:	str	r3, [r4]
   1eb9c:	lsl	r1, r1, #3
   1eba0:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1eba4:	subs	r3, r0, #0
   1eba8:	ldrne	r1, [r4, #4]
   1ebac:	strne	r3, [r4, #8]
   1ebb0:	bne	1eb78 <__assert_fail@plt+0xcfd4>
   1ebb4:	mov	r0, r3
   1ebb8:	pop	{r4, r5, r6, pc}
   1ebbc:	ldr	r3, [r1, #8]
   1ebc0:	push	{r4, r5, r6, r7, r8, lr}
   1ebc4:	mov	r5, r1
   1ebc8:	mov	r4, #0
   1ebcc:	str	r2, [r5], #16
   1ebd0:	mov	r8, r0
   1ebd4:	str	r3, [r1, #16]
   1ebd8:	lsl	r0, r3, #2
   1ebdc:	str	r4, [r1, #20]
   1ebe0:	mov	r7, r1
   1ebe4:	mov	r6, r2
   1ebe8:	bl	2d82c <__assert_fail@plt+0x1bc88>
   1ebec:	cmp	r0, r4
   1ebf0:	str	r0, [r7, #24]
   1ebf4:	beq	1ec90 <__assert_fail@plt+0xd0ec>
   1ebf8:	ldr	r0, [r7, #8]
   1ebfc:	cmp	r0, #0
   1ec00:	bgt	1ec14 <__assert_fail@plt+0xd070>
   1ec04:	b	1ec50 <__assert_fail@plt+0xd0ac>
   1ec08:	add	r4, r4, #1
   1ec0c:	cmp	r0, r4
   1ec10:	ble	1ec50 <__assert_fail@plt+0xd0ac>
   1ec14:	ldr	r2, [r7, #12]
   1ec18:	ldr	r3, [r8]
   1ec1c:	ldr	r1, [r2, r4, lsl #2]
   1ec20:	add	r3, r3, r1, lsl #3
   1ec24:	ldrb	r3, [r3, #4]
   1ec28:	tst	r3, #8
   1ec2c:	bne	1ec08 <__assert_fail@plt+0xd064>
   1ec30:	mov	r0, r5
   1ec34:	bl	1eb58 <__assert_fail@plt+0xcfb4>
   1ec38:	cmp	r0, #0
   1ec3c:	beq	1ec90 <__assert_fail@plt+0xd0ec>
   1ec40:	ldr	r0, [r7, #8]
   1ec44:	add	r4, r4, #1
   1ec48:	cmp	r0, r4
   1ec4c:	bgt	1ec14 <__assert_fail@plt+0xd070>
   1ec50:	ldr	r4, [r8, #68]	; 0x44
   1ec54:	ldr	r5, [r8, #32]
   1ec58:	and	r6, r6, r4
   1ec5c:	add	r6, r6, r6, lsl #1
   1ec60:	lsl	r4, r6, #2
   1ec64:	add	r6, r5, r4
   1ec68:	ldr	r3, [r5, r4]
   1ec6c:	ldr	r2, [r6, #4]
   1ec70:	cmp	r2, r3
   1ec74:	ldrgt	r2, [r6, #8]
   1ec78:	ble	1ec98 <__assert_fail@plt+0xd0f4>
   1ec7c:	add	r1, r3, #1
   1ec80:	str	r1, [r5, r4]
   1ec84:	mov	r0, #0
   1ec88:	str	r7, [r2, r3, lsl #2]
   1ec8c:	pop	{r4, r5, r6, r7, r8, pc}
   1ec90:	mov	r0, #12
   1ec94:	pop	{r4, r5, r6, r7, r8, pc}
   1ec98:	add	r3, r3, #1
   1ec9c:	ldr	r0, [r6, #8]
   1eca0:	lsl	r1, r3, #3
   1eca4:	lsl	r8, r3, #1
   1eca8:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1ecac:	subs	r2, r0, #0
   1ecb0:	beq	1ec90 <__assert_fail@plt+0xd0ec>
   1ecb4:	ldr	r3, [r5, r4]
   1ecb8:	str	r2, [r6, #8]
   1ecbc:	str	r8, [r6, #4]
   1ecc0:	b	1ec7c <__assert_fail@plt+0xd0d8>
   1ecc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecc8:	mov	r5, r0
   1eccc:	ldr	r9, [r0, #36]	; 0x24
   1ecd0:	ldr	r3, [r0, #48]	; 0x30
   1ecd4:	ldr	r4, [r0, #28]
   1ecd8:	cmp	r9, r3
   1ecdc:	movge	r9, r3
   1ece0:	cmp	r9, r4
   1ece4:	sub	sp, sp, #84	; 0x54
   1ece8:	ble	1ed88 <__assert_fail@plt+0xd1e4>
   1ecec:	add	r7, r0, #16
   1ecf0:	add	r8, sp, #8
   1ecf4:	mov	sl, #1
   1ecf8:	mvn	r6, #0
   1ecfc:	ldm	r7, {r0, r1}
   1ed00:	ldr	ip, [r5, #64]	; 0x40
   1ed04:	sub	r2, r9, r4
   1ed08:	cmp	ip, #0
   1ed0c:	stm	r8, {r0, r1}
   1ed10:	bne	1edcc <__assert_fail@plt+0xd228>
   1ed14:	ldr	r3, [r5, #24]
   1ed18:	ldr	r1, [r5]
   1ed1c:	add	r3, r4, r3
   1ed20:	add	r1, r1, r3
   1ed24:	mov	r3, r7
   1ed28:	add	r0, sp, #4
   1ed2c:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1ed30:	sub	r2, r0, #1
   1ed34:	cmn	r2, #3
   1ed38:	mov	r3, r0
   1ed3c:	bhi	1ed98 <__assert_fail@plt+0xd1f4>
   1ed40:	cmn	r0, #2
   1ed44:	ldrne	r2, [sp, #4]
   1ed48:	beq	1ee2c <__assert_fail@plt+0xd288>
   1ed4c:	ldr	r1, [r5, #8]
   1ed50:	add	r0, r4, r3
   1ed54:	add	ip, r4, #1
   1ed58:	cmp	ip, r0
   1ed5c:	str	r2, [r1, r4, lsl #2]
   1ed60:	add	r3, r1, r4, lsl #2
   1ed64:	bge	1ee54 <__assert_fail@plt+0xd2b0>
   1ed68:	sub	r2, r0, #-1073741823	; 0xc0000001
   1ed6c:	add	r2, r1, r2, lsl #2
   1ed70:	str	r6, [r3, #4]!
   1ed74:	cmp	r2, r3
   1ed78:	bne	1ed70 <__assert_fail@plt+0xd1cc>
   1ed7c:	mov	r4, r0
   1ed80:	cmp	r9, r4
   1ed84:	bgt	1ecfc <__assert_fail@plt+0xd158>
   1ed88:	str	r4, [r5, #28]
   1ed8c:	str	r4, [r5, #32]
   1ed90:	add	sp, sp, #84	; 0x54
   1ed94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed98:	ldr	r3, [r5]
   1ed9c:	ldr	r2, [r5, #24]
   1eda0:	add	r3, r3, r4
   1eda4:	ldr	r1, [r5, #64]	; 0x40
   1eda8:	ldrb	r2, [r3, r2]
   1edac:	cmp	r1, #0
   1edb0:	mov	r3, sl
   1edb4:	str	r2, [sp, #4]
   1edb8:	ldrbne	r2, [r1, r2]
   1edbc:	ldm	r8, {r0, r1}
   1edc0:	strne	r2, [sp, #4]
   1edc4:	stm	r7, {r0, r1}
   1edc8:	b	1ed4c <__assert_fail@plt+0xd1a8>
   1edcc:	ldr	r3, [r5, #80]	; 0x50
   1edd0:	cmp	r3, #0
   1edd4:	ble	1ee24 <__assert_fail@plt+0xd280>
   1edd8:	add	r0, sp, #15
   1eddc:	mov	r3, #0
   1ede0:	b	1ede8 <__assert_fail@plt+0xd244>
   1ede4:	ldr	ip, [r5, #64]	; 0x40
   1ede8:	ldr	r1, [r5]
   1edec:	ldr	lr, [r5, #24]
   1edf0:	add	r1, r1, r4
   1edf4:	add	r1, r1, r3
   1edf8:	ldr	fp, [r5, #4]
   1edfc:	ldrb	lr, [r1, lr]
   1ee00:	add	r1, fp, r4
   1ee04:	ldrb	ip, [ip, lr]
   1ee08:	strb	ip, [r1, r3]
   1ee0c:	ldr	r1, [r5, #80]	; 0x50
   1ee10:	add	r3, r3, #1
   1ee14:	cmp	r1, r3
   1ee18:	cmpgt	r2, r3
   1ee1c:	strb	ip, [r0, #1]!
   1ee20:	bgt	1ede4 <__assert_fail@plt+0xd240>
   1ee24:	add	r1, sp, #16
   1ee28:	b	1ed24 <__assert_fail@plt+0xd180>
   1ee2c:	ldr	r2, [r5, #36]	; 0x24
   1ee30:	ldr	r3, [r5, #48]	; 0x30
   1ee34:	cmp	r2, r3
   1ee38:	bge	1ed98 <__assert_fail@plt+0xd1f4>
   1ee3c:	ldm	r8, {r0, r1}
   1ee40:	stm	r7, {r0, r1}
   1ee44:	str	r4, [r5, #28]
   1ee48:	str	r4, [r5, #32]
   1ee4c:	add	sp, sp, #84	; 0x54
   1ee50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee54:	mov	r4, ip
   1ee58:	b	1ed80 <__assert_fail@plt+0xd1dc>
   1ee5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee60:	mov	r5, r0
   1ee64:	ldr	r7, [r0, #36]	; 0x24
   1ee68:	ldr	r3, [r0, #48]	; 0x30
   1ee6c:	ldrb	r2, [r0, #74]	; 0x4a
   1ee70:	cmp	r7, r3
   1ee74:	movge	r7, r3
   1ee78:	cmp	r2, #0
   1ee7c:	sub	sp, sp, #100	; 0x64
   1ee80:	ldr	r6, [r0, #28]
   1ee84:	bne	1ee94 <__assert_fail@plt+0xd2f0>
   1ee88:	ldr	r3, [r0, #64]	; 0x40
   1ee8c:	cmp	r3, #0
   1ee90:	beq	1efc8 <__assert_fail@plt+0xd424>
   1ee94:	ldr	r4, [r5, #32]
   1ee98:	cmp	r6, r7
   1ee9c:	bge	1efb4 <__assert_fail@plt+0xd410>
   1eea0:	sub	r3, r7, r6
   1eea4:	str	r3, [sp, #4]
   1eea8:	add	sl, r5, #16
   1eeac:	add	r3, sp, #24
   1eeb0:	str	r3, [sp]
   1eeb4:	add	r3, sp, #20
   1eeb8:	str	r3, [sp, #8]
   1eebc:	ldm	sl, {r0, r1}
   1eec0:	ldr	r2, [r5, #64]	; 0x40
   1eec4:	ldr	r3, [sp]
   1eec8:	cmp	r2, #0
   1eecc:	stm	r3, {r0, r1}
   1eed0:	bne	1f114 <__assert_fail@plt+0xd570>
   1eed4:	ldr	r3, [r5, #24]
   1eed8:	ldr	r2, [r5]
   1eedc:	add	r3, r4, r3
   1eee0:	add	r3, r2, r3
   1eee4:	str	r3, [sp, #12]
   1eee8:	mov	r3, sl
   1eeec:	ldr	r2, [sp, #4]
   1eef0:	ldr	r0, [sp, #8]
   1eef4:	ldr	r1, [sp, #12]
   1eef8:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1eefc:	sub	r3, r0, #1
   1ef00:	cmn	r3, #4
   1ef04:	mov	r8, r0
   1ef08:	str	r3, [sp, #4]
   1ef0c:	bhi	1f224 <__assert_fail@plt+0xd680>
   1ef10:	ldr	fp, [sp, #20]
   1ef14:	mov	r0, fp
   1ef18:	bl	11b50 <towupper@plt>
   1ef1c:	cmp	fp, r0
   1ef20:	mov	r9, r0
   1ef24:	beq	1f20c <__assert_fail@plt+0xd668>
   1ef28:	add	r0, sp, #32
   1ef2c:	ldr	r2, [sp]
   1ef30:	mov	r1, r9
   1ef34:	bl	116dc <wcrtomb@plt>
   1ef38:	cmp	r8, r0
   1ef3c:	mov	fp, r0
   1ef40:	bne	1f2c4 <__assert_fail@plt+0xd720>
   1ef44:	ldr	r0, [r5, #4]
   1ef48:	add	r1, sp, #32
   1ef4c:	add	r0, r0, r6
   1ef50:	mov	r2, r8
   1ef54:	bl	11784 <memcpy@plt>
   1ef58:	ldrb	r3, [r5, #76]	; 0x4c
   1ef5c:	cmp	r3, #0
   1ef60:	bne	1f29c <__assert_fail@plt+0xd6f8>
   1ef64:	add	r2, r8, r4
   1ef68:	ldr	r3, [r5, #8]
   1ef6c:	add	r8, r6, r8
   1ef70:	add	r1, r6, #1
   1ef74:	cmp	r1, r8
   1ef78:	mov	r4, r2
   1ef7c:	str	r9, [r3, r6, lsl #2]
   1ef80:	bge	1f2bc <__assert_fail@plt+0xd718>
   1ef84:	sub	r2, r8, #-1073741823	; 0xc0000001
   1ef88:	add	r6, r3, r6, lsl #2
   1ef8c:	add	r3, r3, r2, lsl #2
   1ef90:	mvn	r2, #0
   1ef94:	str	r2, [r6, #4]!
   1ef98:	cmp	r3, r6
   1ef9c:	bne	1ef94 <__assert_fail@plt+0xd3f0>
   1efa0:	mov	r6, r8
   1efa4:	b	1ee98 <__assert_fail@plt+0xd2f4>
   1efa8:	ldr	r3, [sp]
   1efac:	ldm	r3, {r0, r1}
   1efb0:	stm	sl, {r0, r1}
   1efb4:	mov	r0, #0
   1efb8:	str	r6, [r5, #28]
   1efbc:	str	r4, [r5, #32]
   1efc0:	add	sp, sp, #100	; 0x64
   1efc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efc8:	ldrb	r3, [r0, #76]	; 0x4c
   1efcc:	cmp	r3, #0
   1efd0:	bne	1ee94 <__assert_fail@plt+0xd2f0>
   1efd4:	cmp	r6, r7
   1efd8:	bge	1f1fc <__assert_fail@plt+0xd658>
   1efdc:	add	sl, r0, #16
   1efe0:	mvn	r9, #0
   1efe4:	b	1f014 <__assert_fail@plt+0xd470>
   1efe8:	mov	r0, fp
   1efec:	bl	11b50 <towupper@plt>
   1eff0:	bics	r3, r0, #127	; 0x7f
   1eff4:	bne	1f03c <__assert_fail@plt+0xd498>
   1eff8:	ldr	r3, [r5, #4]
   1effc:	strb	r0, [r3, r6]
   1f000:	ldr	r3, [r5, #8]
   1f004:	str	r0, [r3, r6, lsl #2]
   1f008:	add	r6, r6, #1
   1f00c:	cmp	r7, r6
   1f010:	ble	1f1fc <__assert_fail@plt+0xd658>
   1f014:	ldr	r8, [r5]
   1f018:	ldr	r4, [r5, #24]
   1f01c:	add	r3, r8, r4
   1f020:	ldrb	fp, [r3, r6]
   1f024:	tst	fp, #128	; 0x80
   1f028:	bne	1f03c <__assert_fail@plt+0xd498>
   1f02c:	mov	r0, sl
   1f030:	bl	117b4 <mbsinit@plt>
   1f034:	cmp	r0, #0
   1f038:	bne	1efe8 <__assert_fail@plt+0xd444>
   1f03c:	ldm	sl, {r0, r1}
   1f040:	add	r2, sp, #24
   1f044:	sub	r3, r7, r6
   1f048:	add	r4, r4, r6
   1f04c:	stm	r2, {r0, r1}
   1f050:	str	r3, [sp, #4]
   1f054:	mov	r2, r3
   1f058:	add	r1, r8, r4
   1f05c:	mov	r3, sl
   1f060:	add	r0, sp, #20
   1f064:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   1f068:	add	r2, sp, #24
   1f06c:	str	r2, [sp]
   1f070:	add	r2, sp, #20
   1f074:	mov	r4, r6
   1f078:	str	r2, [sp, #8]
   1f07c:	sub	r3, r0, #1
   1f080:	cmn	r3, #4
   1f084:	mov	r8, r0
   1f088:	bhi	1f190 <__assert_fail@plt+0xd5ec>
   1f08c:	ldr	r3, [sp, #20]
   1f090:	mov	r0, r3
   1f094:	str	r3, [sp, #12]
   1f098:	bl	11b50 <towupper@plt>
   1f09c:	ldr	r3, [sp, #12]
   1f0a0:	cmp	r3, r0
   1f0a4:	mov	fp, r0
   1f0a8:	beq	1f16c <__assert_fail@plt+0xd5c8>
   1f0ac:	mov	r1, r0
   1f0b0:	add	r2, sp, #24
   1f0b4:	add	r0, sp, #32
   1f0b8:	bl	116dc <wcrtomb@plt>
   1f0bc:	cmp	r8, r0
   1f0c0:	bne	1f1c0 <__assert_fail@plt+0xd61c>
   1f0c4:	ldr	r0, [r5, #4]
   1f0c8:	mov	r2, r8
   1f0cc:	add	r0, r0, r6
   1f0d0:	add	r1, sp, #32
   1f0d4:	bl	11784 <memcpy@plt>
   1f0d8:	add	r6, r6, #1
   1f0dc:	ldr	r2, [r5, #8]
   1f0e0:	sub	r3, r6, #1
   1f0e4:	add	r8, r3, r8
   1f0e8:	cmp	r6, r8
   1f0ec:	str	fp, [r2, r4, lsl #2]
   1f0f0:	add	r4, r2, r4, lsl #2
   1f0f4:	bge	1f00c <__assert_fail@plt+0xd468>
   1f0f8:	sub	r3, r8, #-1073741823	; 0xc0000001
   1f0fc:	add	r3, r2, r3, lsl #2
   1f100:	str	r9, [r4, #4]!
   1f104:	cmp	r4, r3
   1f108:	bne	1f100 <__assert_fail@plt+0xd55c>
   1f10c:	mov	r6, r8
   1f110:	b	1f00c <__assert_fail@plt+0xd468>
   1f114:	ldr	lr, [r5, #80]	; 0x50
   1f118:	cmp	lr, #0
   1f11c:	ble	1f160 <__assert_fail@plt+0xd5bc>
   1f120:	ldr	r3, [r5, #24]
   1f124:	ldr	r0, [sp, #4]
   1f128:	ldr	r1, [r5]
   1f12c:	add	r3, r4, r3
   1f130:	cmp	lr, r0
   1f134:	sub	r3, r3, #1
   1f138:	movge	lr, r0
   1f13c:	add	r1, r1, r3
   1f140:	add	r0, sp, #31
   1f144:	mov	r3, #0
   1f148:	ldrb	ip, [r1, #1]!
   1f14c:	add	r3, r3, #1
   1f150:	cmp	r3, lr
   1f154:	ldrb	ip, [r2, ip]
   1f158:	strb	ip, [r0, #1]!
   1f15c:	blt	1f148 <__assert_fail@plt+0xd5a4>
   1f160:	add	r3, sp, #32
   1f164:	str	r3, [sp, #12]
   1f168:	b	1eee8 <__assert_fail@plt+0xd344>
   1f16c:	ldr	r3, [r5, #24]
   1f170:	ldr	r1, [r5]
   1f174:	ldr	r0, [r5, #4]
   1f178:	add	r3, r6, r3
   1f17c:	add	r1, r1, r3
   1f180:	add	r0, r0, r6
   1f184:	mov	r2, r8
   1f188:	bl	11784 <memcpy@plt>
   1f18c:	b	1f0d8 <__assert_fail@plt+0xd534>
   1f190:	cmn	r3, #3
   1f194:	bne	1f1c8 <__assert_fail@plt+0xd624>
   1f198:	ldr	r2, [r5, #36]	; 0x24
   1f19c:	ldr	r3, [r5, #48]	; 0x30
   1f1a0:	cmp	r2, r3
   1f1a4:	blt	1f1f0 <__assert_fail@plt+0xd64c>
   1f1a8:	ldr	r3, [r5, #4]
   1f1ac:	strb	fp, [r3, r6]
   1f1b0:	ldr	r3, [r5, #8]
   1f1b4:	add	r6, r6, #1
   1f1b8:	str	fp, [r3, r4, lsl #2]
   1f1bc:	b	1f00c <__assert_fail@plt+0xd468>
   1f1c0:	mov	r4, r6
   1f1c4:	b	1eebc <__assert_fail@plt+0xd318>
   1f1c8:	ldr	r3, [r5, #4]
   1f1cc:	cmn	r0, #1
   1f1d0:	strb	fp, [r3, r6]
   1f1d4:	ldr	r3, [r5, #8]
   1f1d8:	add	r6, r6, #1
   1f1dc:	str	fp, [r3, r4, lsl #2]
   1f1e0:	addeq	r3, sp, #24
   1f1e4:	ldmeq	r3, {r0, r1}
   1f1e8:	stmeq	sl, {r0, r1}
   1f1ec:	b	1f00c <__assert_fail@plt+0xd468>
   1f1f0:	add	r3, sp, #24
   1f1f4:	ldm	r3, {r0, r1}
   1f1f8:	stm	sl, {r0, r1}
   1f1fc:	str	r6, [r5, #28]
   1f200:	str	r6, [r5, #32]
   1f204:	mov	r0, #0
   1f208:	b	1efc0 <__assert_fail@plt+0xd41c>
   1f20c:	ldr	r0, [r5, #4]
   1f210:	ldr	r1, [sp, #12]
   1f214:	add	r0, r0, r6
   1f218:	mov	r2, r8
   1f21c:	bl	11784 <memcpy@plt>
   1f220:	b	1ef58 <__assert_fail@plt+0xd3b4>
   1f224:	ldr	r3, [sp, #4]
   1f228:	cmn	r3, #3
   1f22c:	bne	1f240 <__assert_fail@plt+0xd69c>
   1f230:	ldr	r2, [r5, #36]	; 0x24
   1f234:	ldr	r3, [r5, #48]	; 0x30
   1f238:	cmp	r2, r3
   1f23c:	blt	1efa8 <__assert_fail@plt+0xd404>
   1f240:	ldr	r3, [r5]
   1f244:	ldr	r1, [r5, #24]
   1f248:	add	r3, r3, r4
   1f24c:	ldr	r2, [r5, #64]	; 0x40
   1f250:	ldrb	r3, [r3, r1]
   1f254:	cmp	r2, #0
   1f258:	mov	r1, r6
   1f25c:	ldrbne	r3, [r2, r3]
   1f260:	ldr	r2, [r5, #4]
   1f264:	strb	r3, [r2, r6]
   1f268:	ldrb	r2, [r5, #76]	; 0x4c
   1f26c:	cmp	r2, #0
   1f270:	ldrne	r2, [r5, #12]
   1f274:	strne	r4, [r2, r6, lsl #2]
   1f278:	ldr	r2, [r5, #8]
   1f27c:	cmn	r8, #1
   1f280:	add	r4, r4, #1
   1f284:	add	r6, r6, #1
   1f288:	str	r3, [r2, r1, lsl #2]
   1f28c:	ldreq	r3, [sp]
   1f290:	ldmeq	r3, {r0, r1}
   1f294:	stmeq	sl, {r0, r1}
   1f298:	b	1ee98 <__assert_fail@plt+0xd2f4>
   1f29c:	ldr	r3, [r5, #12]
   1f2a0:	add	r2, r8, r4
   1f2a4:	add	r3, r3, r6, lsl #2
   1f2a8:	str	r4, [r3], #4
   1f2ac:	add	r4, r4, #1
   1f2b0:	cmp	r2, r4
   1f2b4:	bne	1f2a8 <__assert_fail@plt+0xd704>
   1f2b8:	b	1ef68 <__assert_fail@plt+0xd3c4>
   1f2bc:	mov	r6, r1
   1f2c0:	b	1ee98 <__assert_fail@plt+0xd2f4>
   1f2c4:	cmn	r0, #1
   1f2c8:	beq	1f20c <__assert_fail@plt+0xd668>
   1f2cc:	ldr	r0, [r5, #36]	; 0x24
   1f2d0:	add	r7, r6, fp
   1f2d4:	cmp	r7, r0
   1f2d8:	bhi	1efa8 <__assert_fail@plt+0xd404>
   1f2dc:	ldr	r3, [r5, #12]
   1f2e0:	cmp	r3, #0
   1f2e4:	beq	1f3c0 <__assert_fail@plt+0xd81c>
   1f2e8:	ldrb	r3, [r5, #76]	; 0x4c
   1f2ec:	cmp	r3, #0
   1f2f0:	bne	1f31c <__assert_fail@plt+0xd778>
   1f2f4:	cmp	r6, #0
   1f2f8:	ldrne	r2, [r5, #12]
   1f2fc:	subne	r2, r2, #4
   1f300:	beq	1f314 <__assert_fail@plt+0xd770>
   1f304:	str	r3, [r2, #4]!
   1f308:	add	r3, r3, #1
   1f30c:	cmp	r6, r3
   1f310:	bne	1f304 <__assert_fail@plt+0xd760>
   1f314:	mov	r3, #1
   1f318:	strb	r3, [r5, #76]	; 0x4c
   1f31c:	ldr	r0, [r5, #4]
   1f320:	add	r1, sp, #32
   1f324:	mov	r2, fp
   1f328:	add	r0, r0, r6
   1f32c:	bl	11784 <memcpy@plt>
   1f330:	ldr	r3, [r5, #8]
   1f334:	ldr	r1, [r5, #12]
   1f338:	lsl	r2, r6, #2
   1f33c:	cmp	fp, #1
   1f340:	str	r9, [r3, r6, lsl #2]
   1f344:	add	r3, r3, r2
   1f348:	str	r4, [r1, r6, lsl #2]
   1f34c:	add	r2, r1, r2
   1f350:	bls	1f380 <__assert_fail@plt+0xd7dc>
   1f354:	mov	r1, #1
   1f358:	mvn	ip, #0
   1f35c:	cmp	r1, r8
   1f360:	ldr	r0, [sp, #4]
   1f364:	movcc	r0, r1
   1f368:	add	r1, r1, #1
   1f36c:	add	r0, r0, r4
   1f370:	cmp	r1, fp
   1f374:	str	r0, [r2, #4]!
   1f378:	str	ip, [r3, #4]!
   1f37c:	bne	1f35c <__assert_fail@plt+0xd7b8>
   1f380:	ldr	r2, [r5, #52]	; 0x34
   1f384:	ldr	r3, [r5, #48]	; 0x30
   1f388:	cmp	r4, r2
   1f38c:	sub	fp, fp, r8
   1f390:	ldrlt	r2, [r5, #56]	; 0x38
   1f394:	add	r3, fp, r3
   1f398:	addlt	fp, r2, fp
   1f39c:	ldr	r2, [r5, #36]	; 0x24
   1f3a0:	strlt	fp, [r5, #56]	; 0x38
   1f3a4:	cmp	r3, r2
   1f3a8:	mov	r6, r7
   1f3ac:	str	r3, [r5, #48]	; 0x30
   1f3b0:	add	r4, r8, r4
   1f3b4:	movlt	r7, r3
   1f3b8:	movge	r7, r2
   1f3bc:	b	1ee98 <__assert_fail@plt+0xd2f4>
   1f3c0:	lsl	r0, r0, #2
   1f3c4:	bl	2d82c <__assert_fail@plt+0x1bc88>
   1f3c8:	cmp	r0, #0
   1f3cc:	str	r0, [r5, #12]
   1f3d0:	moveq	r0, #12
   1f3d4:	bne	1f2e8 <__assert_fail@plt+0xd744>
   1f3d8:	b	1efc0 <__assert_fail@plt+0xd41c>
   1f3dc:	push	{r4, r5, r6, lr}
   1f3e0:	mov	r5, r0
   1f3e4:	ldr	r6, [r0, #36]	; 0x24
   1f3e8:	ldr	r3, [r0, #48]	; 0x30
   1f3ec:	ldr	r4, [r0, #28]
   1f3f0:	cmp	r6, r3
   1f3f4:	movge	r6, r3
   1f3f8:	cmp	r6, r4
   1f3fc:	ble	1f440 <__assert_fail@plt+0xd89c>
   1f400:	bl	11934 <__ctype_toupper_loc@plt>
   1f404:	ldr	r3, [r5]
   1f408:	ldr	r2, [r5, #24]
   1f40c:	add	r3, r3, r4
   1f410:	ldr	r1, [r5, #64]	; 0x40
   1f414:	ldrb	r2, [r3, r2]
   1f418:	cmp	r1, #0
   1f41c:	ldr	r3, [r5, #4]
   1f420:	ldrbne	r2, [r1, r2]
   1f424:	ldr	r1, [r0]
   1f428:	add	r3, r3, r4
   1f42c:	add	r4, r4, #1
   1f430:	ldr	r2, [r1, r2, lsl #2]
   1f434:	cmp	r6, r4
   1f438:	strb	r2, [r3]
   1f43c:	bne	1f404 <__assert_fail@plt+0xd860>
   1f440:	str	r4, [r5, #28]
   1f444:	str	r4, [r5, #32]
   1f448:	pop	{r4, r5, r6, pc}
   1f44c:	ldr	r3, [r0, #36]	; 0x24
   1f450:	push	{r4, r5, r6, lr}
   1f454:	cmn	r3, #-536870910	; 0xe0000002
   1f458:	bhi	1f540 <__assert_fail@plt+0xd99c>
   1f45c:	ldr	r2, [r0, #48]	; 0x30
   1f460:	lsl	r3, r3, #1
   1f464:	cmp	r3, r2
   1f468:	movge	r3, r2
   1f46c:	cmp	r3, r1
   1f470:	movge	r1, r3
   1f474:	mov	r4, r0
   1f478:	bl	1eac4 <__assert_fail@plt+0xcf20>
   1f47c:	subs	r5, r0, #0
   1f480:	bne	1f538 <__assert_fail@plt+0xd994>
   1f484:	ldr	r0, [r4, #100]	; 0x64
   1f488:	cmp	r0, #0
   1f48c:	beq	1f4ac <__assert_fail@plt+0xd908>
   1f490:	ldr	r1, [r4, #36]	; 0x24
   1f494:	add	r1, r1, #1
   1f498:	lsl	r1, r1, #2
   1f49c:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1f4a0:	cmp	r0, #0
   1f4a4:	beq	1f540 <__assert_fail@plt+0xd99c>
   1f4a8:	str	r0, [r4, #100]	; 0x64
   1f4ac:	ldrb	r3, [r4, #72]	; 0x48
   1f4b0:	cmp	r3, #0
   1f4b4:	ldr	r3, [r4, #80]	; 0x50
   1f4b8:	beq	1f4d0 <__assert_fail@plt+0xd92c>
   1f4bc:	cmp	r3, #1
   1f4c0:	mov	r0, r4
   1f4c4:	ble	1f55c <__assert_fail@plt+0xd9b8>
   1f4c8:	pop	{r4, r5, r6, lr}
   1f4cc:	b	1ee5c <__assert_fail@plt+0xd2b8>
   1f4d0:	cmp	r3, #1
   1f4d4:	bgt	1f54c <__assert_fail@plt+0xd9a8>
   1f4d8:	ldr	r1, [r4, #64]	; 0x40
   1f4dc:	cmp	r1, #0
   1f4e0:	beq	1f538 <__assert_fail@plt+0xd994>
   1f4e4:	ldr	lr, [r4, #36]	; 0x24
   1f4e8:	ldr	r2, [r4, #48]	; 0x30
   1f4ec:	ldr	r3, [r4, #28]
   1f4f0:	cmp	lr, r2
   1f4f4:	movge	lr, r2
   1f4f8:	cmp	lr, r3
   1f4fc:	bgt	1f508 <__assert_fail@plt+0xd964>
   1f500:	b	1f530 <__assert_fail@plt+0xd98c>
   1f504:	ldr	r1, [r4, #64]	; 0x40
   1f508:	ldr	r2, [r4]
   1f50c:	ldr	ip, [r4, #24]
   1f510:	add	r2, r2, r3
   1f514:	ldr	r0, [r4, #4]
   1f518:	ldrb	r2, [r2, ip]
   1f51c:	ldrb	r2, [r1, r2]
   1f520:	strb	r2, [r0, r3]
   1f524:	add	r3, r3, #1
   1f528:	cmp	lr, r3
   1f52c:	bne	1f504 <__assert_fail@plt+0xd960>
   1f530:	str	r3, [r4, #28]
   1f534:	str	r3, [r4, #32]
   1f538:	mov	r0, r5
   1f53c:	pop	{r4, r5, r6, pc}
   1f540:	mov	r5, #12
   1f544:	mov	r0, r5
   1f548:	pop	{r4, r5, r6, pc}
   1f54c:	mov	r0, r4
   1f550:	bl	1ecc4 <__assert_fail@plt+0xd120>
   1f554:	mov	r0, r5
   1f558:	pop	{r4, r5, r6, pc}
   1f55c:	bl	1f3dc <__assert_fail@plt+0xd838>
   1f560:	b	1f538 <__assert_fail@plt+0xd994>
   1f564:	push	{r4, lr}
   1f568:	mov	r4, r0
   1f56c:	ldr	r0, [r0]
   1f570:	bl	17274 <__assert_fail@plt+0x56d0>
   1f574:	ldr	r0, [r4, #4]
   1f578:	bl	17274 <__assert_fail@plt+0x56d0>
   1f57c:	ldr	r0, [r4, #8]
   1f580:	bl	17274 <__assert_fail@plt+0x56d0>
   1f584:	ldr	r0, [r4, #12]
   1f588:	bl	17274 <__assert_fail@plt+0x56d0>
   1f58c:	mov	r0, r4
   1f590:	pop	{r4, lr}
   1f594:	b	17274 <__assert_fail@plt+0x56d0>
   1f598:	ldr	r3, [pc, #36]	; 1f5c4 <__assert_fail@plt+0xda20>
   1f59c:	ldr	r2, [r0, #4]
   1f5a0:	and	r3, r3, r2
   1f5a4:	cmp	r3, #6
   1f5a8:	beq	1f5bc <__assert_fail@plt+0xda18>
   1f5ac:	cmp	r3, #3
   1f5b0:	bxne	lr
   1f5b4:	ldr	r0, [r0]
   1f5b8:	b	17274 <__assert_fail@plt+0x56d0>
   1f5bc:	ldr	r0, [r0]
   1f5c0:	b	1f564 <__assert_fail@plt+0xd9c0>
   1f5c4:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1f5c8:	add	r0, r1, #20
   1f5cc:	push	{r4, lr}
   1f5d0:	bl	1f598 <__assert_fail@plt+0xd9f4>
   1f5d4:	mov	r0, #0
   1f5d8:	pop	{r4, pc}
   1f5dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5e0:	sub	sp, sp, #12
   1f5e4:	ldmib	r0, {r5, ip}
   1f5e8:	stm	sp, {r1, r2}
   1f5ec:	mov	r4, r0
   1f5f0:	cmp	ip, r5
   1f5f4:	mov	r8, sp
   1f5f8:	ldrb	r6, [sp, #4]
   1f5fc:	bcs	1f6bc <__assert_fail@plt+0xdb18>
   1f600:	ldr	r7, [r0, #12]
   1f604:	ldr	r5, [r0, #20]
   1f608:	ldm	r8, {r0, r1}
   1f60c:	ldr	r3, [r4]
   1f610:	cmp	r6, #5
   1f614:	add	r3, r3, ip, lsl #3
   1f618:	bic	r2, r1, #261120	; 0x3fc00
   1f61c:	bic	r2, r2, #768	; 0x300
   1f620:	stm	r3, {r0, r1}
   1f624:	str	r2, [r3, #4]
   1f628:	beq	1f6a8 <__assert_fail@plt+0xdb04>
   1f62c:	sub	r6, r6, #6
   1f630:	clz	r6, r6
   1f634:	lsr	r6, r6, #5
   1f638:	ldrb	r2, [r3, #6]
   1f63c:	mvn	r1, #0
   1f640:	bic	r2, r2, #16
   1f644:	orr	r2, r2, r6, lsl #4
   1f648:	strb	r2, [r3, #6]
   1f64c:	str	r1, [r7, ip, lsl #2]
   1f650:	ldr	r3, [r4, #8]
   1f654:	mov	r2, #0
   1f658:	add	r3, r3, r3, lsl #1
   1f65c:	lsl	r3, r3, #2
   1f660:	add	r1, r5, r3
   1f664:	str	r2, [r5, r3]
   1f668:	str	r2, [r1, #4]
   1f66c:	str	r2, [r1, #8]
   1f670:	ldr	r3, [r4, #8]
   1f674:	ldr	r0, [r4, #24]
   1f678:	add	r3, r3, r3, lsl #1
   1f67c:	lsl	r3, r3, #2
   1f680:	add	r1, r0, r3
   1f684:	str	r2, [r0, r3]
   1f688:	str	r2, [r1, #4]
   1f68c:	str	r2, [r1, #8]
   1f690:	ldr	r3, [r4, #8]
   1f694:	mov	r0, r3
   1f698:	add	r3, r3, #1
   1f69c:	str	r3, [r4, #8]
   1f6a0:	add	sp, sp, #12
   1f6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6a8:	ldr	r6, [r4, #92]	; 0x5c
   1f6ac:	cmp	r6, #1
   1f6b0:	movle	r6, #0
   1f6b4:	movgt	r6, #1
   1f6b8:	b	1f638 <__assert_fail@plt+0xda94>
   1f6bc:	ldr	r3, [pc, #200]	; 1f78c <__assert_fail@plt+0xdbe8>
   1f6c0:	lsl	r9, r5, #1
   1f6c4:	cmp	r9, r3
   1f6c8:	bhi	1f784 <__assert_fail@plt+0xdbe0>
   1f6cc:	lsl	r1, r5, #4
   1f6d0:	ldr	r0, [r0]
   1f6d4:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1f6d8:	cmp	r0, #0
   1f6dc:	beq	1f784 <__assert_fail@plt+0xdbe0>
   1f6e0:	lsl	sl, r5, #3
   1f6e4:	mov	r1, sl
   1f6e8:	str	r0, [r4]
   1f6ec:	ldr	r0, [r4, #12]
   1f6f0:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1f6f4:	mov	r1, sl
   1f6f8:	add	r5, r9, r5, lsl #2
   1f6fc:	lsl	sl, r5, #2
   1f700:	mov	r7, r0
   1f704:	ldr	r0, [r4, #16]
   1f708:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1f70c:	mov	r1, sl
   1f710:	mov	fp, r0
   1f714:	ldr	r0, [r4, #20]
   1f718:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1f71c:	mov	r1, sl
   1f720:	mov	r5, r0
   1f724:	ldr	r0, [r4, #24]
   1f728:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1f72c:	cmp	fp, #0
   1f730:	cmpne	r7, #0
   1f734:	mov	sl, r0
   1f738:	beq	1f764 <__assert_fail@plt+0xdbc0>
   1f73c:	cmp	r0, #0
   1f740:	cmpne	r5, #0
   1f744:	beq	1f764 <__assert_fail@plt+0xdbc0>
   1f748:	ldr	ip, [r4, #8]
   1f74c:	str	r7, [r4, #12]
   1f750:	str	fp, [r4, #16]
   1f754:	str	r5, [r4, #20]
   1f758:	str	r0, [r4, #24]
   1f75c:	str	r9, [r4, #4]
   1f760:	b	1f608 <__assert_fail@plt+0xda64>
   1f764:	mov	r0, r7
   1f768:	bl	17274 <__assert_fail@plt+0x56d0>
   1f76c:	mov	r0, fp
   1f770:	bl	17274 <__assert_fail@plt+0x56d0>
   1f774:	mov	r0, r5
   1f778:	bl	17274 <__assert_fail@plt+0x56d0>
   1f77c:	mov	r0, sl
   1f780:	bl	17274 <__assert_fail@plt+0x56d0>
   1f784:	mvn	r0, #0
   1f788:	b	1f6a0 <__assert_fail@plt+0xdafc>
   1f78c:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1f790:	ldr	r3, [r0]
   1f794:	push	{r4, r5, r6, r7, r8, lr}
   1f798:	lsl	r7, r1, #3
   1f79c:	add	r3, r3, r7
   1f7a0:	mov	r5, r1
   1f7a4:	mov	r6, r2
   1f7a8:	ldm	r3, {r1, r2}
   1f7ac:	mov	r4, r0
   1f7b0:	bl	1f5dc <__assert_fail@plt+0xda38>
   1f7b4:	cmn	r0, #1
   1f7b8:	popeq	{r4, r5, r6, r7, r8, pc}
   1f7bc:	ldr	lr, [r4]
   1f7c0:	ldr	ip, [pc, #80]	; 1f818 <__assert_fail@plt+0xdc74>
   1f7c4:	add	r1, lr, r0, lsl #3
   1f7c8:	ldr	r8, [pc, #76]	; 1f81c <__assert_fail@plt+0xdc78>
   1f7cc:	ldr	r3, [r1, #4]
   1f7d0:	and	r2, r6, ip
   1f7d4:	add	r7, lr, r7
   1f7d8:	bic	r3, r3, r8
   1f7dc:	orr	r3, r3, r2, lsl #8
   1f7e0:	str	r3, [r1, #4]
   1f7e4:	ldr	lr, [r7, #4]
   1f7e8:	bic	r3, r3, r8
   1f7ec:	and	ip, ip, lr, lsr #8
   1f7f0:	orr	r2, r2, ip
   1f7f4:	orr	r3, r3, r2, lsl #8
   1f7f8:	str	r3, [r1, #4]
   1f7fc:	lsr	r3, r3, #16
   1f800:	uxtb	r3, r3
   1f804:	orr	r3, r3, #4
   1f808:	strb	r3, [r1, #6]
   1f80c:	ldr	r3, [r4, #16]
   1f810:	str	r5, [r3, r0, lsl #2]
   1f814:	pop	{r4, r5, r6, r7, r8, pc}
   1f818:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f81c:	andeq	pc, r3, r0, lsl #30
   1f820:	push	{r4, lr}
   1f824:	mov	r4, r0
   1f828:	ldr	r0, [r0, #24]
   1f82c:	bl	17274 <__assert_fail@plt+0x56d0>
   1f830:	ldr	r0, [r4, #36]	; 0x24
   1f834:	bl	17274 <__assert_fail@plt+0x56d0>
   1f838:	ldr	r3, [r4, #40]	; 0x28
   1f83c:	add	r2, r4, #4
   1f840:	cmp	r3, r2
   1f844:	beq	1f858 <__assert_fail@plt+0xdcb4>
   1f848:	ldr	r0, [r3, #8]
   1f84c:	bl	17274 <__assert_fail@plt+0x56d0>
   1f850:	ldr	r0, [r4, #40]	; 0x28
   1f854:	bl	17274 <__assert_fail@plt+0x56d0>
   1f858:	ldr	r0, [r4, #12]
   1f85c:	bl	17274 <__assert_fail@plt+0x56d0>
   1f860:	ldr	r0, [r4, #48]	; 0x30
   1f864:	bl	17274 <__assert_fail@plt+0x56d0>
   1f868:	ldr	r0, [r4, #44]	; 0x2c
   1f86c:	bl	17274 <__assert_fail@plt+0x56d0>
   1f870:	mov	r0, r4
   1f874:	pop	{r4, lr}
   1f878:	b	17274 <__assert_fail@plt+0x56d0>
   1f87c:	push	{r4, lr}
   1f880:	mov	r4, r0
   1f884:	ldr	r0, [r0, #8]
   1f888:	bl	17274 <__assert_fail@plt+0x56d0>
   1f88c:	ldr	r0, [r4, #12]
   1f890:	bl	17274 <__assert_fail@plt+0x56d0>
   1f894:	ldrb	r3, [r4, #75]	; 0x4b
   1f898:	cmp	r3, #0
   1f89c:	popeq	{r4, pc}
   1f8a0:	ldr	r0, [r4, #4]
   1f8a4:	pop	{r4, lr}
   1f8a8:	b	17274 <__assert_fail@plt+0x56d0>
   1f8ac:	push	{r4, r5, r6, r7, r8, lr}
   1f8b0:	mov	r6, r0
   1f8b4:	ldr	r0, [r0]
   1f8b8:	cmp	r0, #0
   1f8bc:	beq	1f8f0 <__assert_fail@plt+0xdd4c>
   1f8c0:	ldr	r3, [r6, #8]
   1f8c4:	cmp	r3, #0
   1f8c8:	beq	1f8f0 <__assert_fail@plt+0xdd4c>
   1f8cc:	mov	r4, #0
   1f8d0:	b	1f8d8 <__assert_fail@plt+0xdd34>
   1f8d4:	ldr	r0, [r6]
   1f8d8:	add	r0, r0, r4, lsl #3
   1f8dc:	bl	1f598 <__assert_fail@plt+0xd9f4>
   1f8e0:	ldr	r3, [r6, #8]
   1f8e4:	add	r4, r4, #1
   1f8e8:	cmp	r3, r4
   1f8ec:	bhi	1f8d4 <__assert_fail@plt+0xdd30>
   1f8f0:	ldr	r0, [r6, #12]
   1f8f4:	bl	17274 <__assert_fail@plt+0x56d0>
   1f8f8:	ldr	r3, [r6, #8]
   1f8fc:	cmp	r3, #0
   1f900:	movne	r4, #0
   1f904:	movne	r5, r4
   1f908:	beq	1f968 <__assert_fail@plt+0xddc4>
   1f90c:	ldr	r3, [r6, #24]
   1f910:	add	r5, r5, #1
   1f914:	cmp	r3, #0
   1f918:	add	r2, r3, r4
   1f91c:	beq	1f928 <__assert_fail@plt+0xdd84>
   1f920:	ldr	r0, [r2, #8]
   1f924:	bl	17274 <__assert_fail@plt+0x56d0>
   1f928:	ldr	r3, [r6, #28]
   1f92c:	cmp	r3, #0
   1f930:	add	r2, r3, r4
   1f934:	beq	1f940 <__assert_fail@plt+0xdd9c>
   1f938:	ldr	r0, [r2, #8]
   1f93c:	bl	17274 <__assert_fail@plt+0x56d0>
   1f940:	ldr	r3, [r6, #20]
   1f944:	cmp	r3, #0
   1f948:	add	r2, r3, r4
   1f94c:	beq	1f958 <__assert_fail@plt+0xddb4>
   1f950:	ldr	r0, [r2, #8]
   1f954:	bl	17274 <__assert_fail@plt+0x56d0>
   1f958:	ldr	r3, [r6, #8]
   1f95c:	add	r4, r4, #12
   1f960:	cmp	r3, r5
   1f964:	bhi	1f90c <__assert_fail@plt+0xdd68>
   1f968:	ldr	r0, [r6, #20]
   1f96c:	bl	17274 <__assert_fail@plt+0x56d0>
   1f970:	ldr	r0, [r6, #24]
   1f974:	bl	17274 <__assert_fail@plt+0x56d0>
   1f978:	ldr	r0, [r6, #28]
   1f97c:	bl	17274 <__assert_fail@plt+0x56d0>
   1f980:	ldr	r0, [r6]
   1f984:	bl	17274 <__assert_fail@plt+0x56d0>
   1f988:	ldr	r0, [r6, #32]
   1f98c:	cmp	r0, #0
   1f990:	beq	1f9f0 <__assert_fail@plt+0xde4c>
   1f994:	mov	r7, #0
   1f998:	mov	r8, r7
   1f99c:	ldr	r3, [r0, r7]
   1f9a0:	add	r5, r0, r7
   1f9a4:	cmp	r3, #0
   1f9a8:	movgt	r4, #0
   1f9ac:	ble	1f9cc <__assert_fail@plt+0xde28>
   1f9b0:	ldr	r3, [r5, #8]
   1f9b4:	ldr	r0, [r3, r4, lsl #2]
   1f9b8:	bl	1f820 <__assert_fail@plt+0xdc7c>
   1f9bc:	ldr	r3, [r5]
   1f9c0:	add	r4, r4, #1
   1f9c4:	cmp	r3, r4
   1f9c8:	bgt	1f9b0 <__assert_fail@plt+0xde0c>
   1f9cc:	ldr	r0, [r5, #8]
   1f9d0:	bl	17274 <__assert_fail@plt+0x56d0>
   1f9d4:	ldr	r3, [r6, #68]	; 0x44
   1f9d8:	add	r8, r8, #1
   1f9dc:	cmp	r3, r8
   1f9e0:	add	r7, r7, #12
   1f9e4:	ldrcs	r0, [r6, #32]
   1f9e8:	bcs	1f99c <__assert_fail@plt+0xddf8>
   1f9ec:	ldr	r0, [r6, #32]
   1f9f0:	bl	17274 <__assert_fail@plt+0x56d0>
   1f9f4:	ldr	r0, [r6, #60]	; 0x3c
   1f9f8:	ldr	r3, [pc, #28]	; 1fa1c <__assert_fail@plt+0xde78>
   1f9fc:	cmp	r0, r3
   1fa00:	beq	1fa08 <__assert_fail@plt+0xde64>
   1fa04:	bl	17274 <__assert_fail@plt+0x56d0>
   1fa08:	ldr	r0, [r6, #132]	; 0x84
   1fa0c:	bl	17274 <__assert_fail@plt+0x56d0>
   1fa10:	mov	r0, r6
   1fa14:	pop	{r4, r5, r6, r7, r8, lr}
   1fa18:	b	17274 <__assert_fail@plt+0x56d0>
   1fa1c:	muleq	r3, r0, lr
   1fa20:	ldr	r3, [r0, #124]	; 0x7c
   1fa24:	push	{r4, r5, r6, r7, r8, lr}
   1fa28:	cmp	r3, #0
   1fa2c:	mov	r8, r0
   1fa30:	movgt	r7, #0
   1fa34:	ble	1fab4 <__assert_fail@plt+0xdf10>
   1fa38:	ldr	r3, [r8, #132]	; 0x84
   1fa3c:	ldr	r6, [r3, r7, lsl #2]
   1fa40:	ldr	r3, [r6, #16]
   1fa44:	cmp	r3, #0
   1fa48:	movgt	r4, #0
   1fa4c:	ble	1fa78 <__assert_fail@plt+0xded4>
   1fa50:	ldr	r3, [r6, #20]
   1fa54:	ldr	r5, [r3, r4, lsl #2]
   1fa58:	add	r4, r4, #1
   1fa5c:	ldr	r0, [r5, #16]
   1fa60:	bl	17274 <__assert_fail@plt+0x56d0>
   1fa64:	mov	r0, r5
   1fa68:	bl	17274 <__assert_fail@plt+0x56d0>
   1fa6c:	ldr	r3, [r6, #16]
   1fa70:	cmp	r3, r4
   1fa74:	bgt	1fa50 <__assert_fail@plt+0xdeac>
   1fa78:	ldr	r0, [r6, #20]
   1fa7c:	bl	17274 <__assert_fail@plt+0x56d0>
   1fa80:	ldr	r3, [r6, #8]
   1fa84:	cmp	r3, #0
   1fa88:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fa8c:	ldr	r0, [r3, #8]
   1fa90:	bl	17274 <__assert_fail@plt+0x56d0>
   1fa94:	ldr	r0, [r6, #8]
   1fa98:	bl	17274 <__assert_fail@plt+0x56d0>
   1fa9c:	mov	r0, r6
   1faa0:	bl	17274 <__assert_fail@plt+0x56d0>
   1faa4:	ldr	r3, [r8, #124]	; 0x7c
   1faa8:	add	r7, r7, #1
   1faac:	cmp	r3, r7
   1fab0:	bgt	1fa38 <__assert_fail@plt+0xde94>
   1fab4:	mov	r3, #0
   1fab8:	str	r3, [r8, #124]	; 0x7c
   1fabc:	str	r3, [r8, #108]	; 0x6c
   1fac0:	pop	{r4, r5, r6, r7, r8, pc}
   1fac4:	push	{r4, r5, r6, lr}
   1fac8:	subs	r5, r0, #0
   1facc:	beq	1fb20 <__assert_fail@plt+0xdf7c>
   1fad0:	ldr	r3, [r5]
   1fad4:	cmp	r3, #0
   1fad8:	movgt	r4, #0
   1fadc:	movgt	r6, r4
   1fae0:	ble	1fb18 <__assert_fail@plt+0xdf74>
   1fae4:	ldr	r3, [r5, #8]
   1fae8:	add	r6, r6, #1
   1faec:	add	r3, r3, r4
   1faf0:	ldr	r0, [r3, #20]
   1faf4:	bl	17274 <__assert_fail@plt+0x56d0>
   1faf8:	ldr	r3, [r5, #8]
   1fafc:	add	r3, r3, r4
   1fb00:	add	r4, r4, #24
   1fb04:	ldr	r0, [r3, #8]
   1fb08:	bl	17274 <__assert_fail@plt+0x56d0>
   1fb0c:	ldr	r3, [r5]
   1fb10:	cmp	r3, r6
   1fb14:	bgt	1fae4 <__assert_fail@plt+0xdf40>
   1fb18:	ldr	r0, [r5, #8]
   1fb1c:	bl	17274 <__assert_fail@plt+0x56d0>
   1fb20:	mov	r0, #0
   1fb24:	pop	{r4, r5, r6, pc}
   1fb28:	ldr	r3, [r0]
   1fb2c:	push	{r4, r5, r6, lr}
   1fb30:	cmp	r3, #0
   1fb34:	mov	r4, r0
   1fb38:	mov	r6, r1
   1fb3c:	beq	1fb68 <__assert_fail@plt+0xdfc4>
   1fb40:	ldr	r1, [r0, #4]
   1fb44:	cmp	r1, #0
   1fb48:	bne	1fb98 <__assert_fail@plt+0xdff4>
   1fb4c:	ldr	r3, [r0, #8]
   1fb50:	mov	r0, #1
   1fb54:	str	r6, [r3]
   1fb58:	ldr	r3, [r4, #4]
   1fb5c:	add	r3, r3, r0
   1fb60:	str	r3, [r4, #4]
   1fb64:	pop	{r4, r5, r6, pc}
   1fb68:	mov	r5, #1
   1fb6c:	str	r5, [r0]
   1fb70:	str	r5, [r0, #4]
   1fb74:	mov	r0, #4
   1fb78:	bl	2d82c <__assert_fail@plt+0x1bc88>
   1fb7c:	cmp	r0, #0
   1fb80:	str	r0, [r4, #8]
   1fb84:	strne	r6, [r0]
   1fb88:	streq	r0, [r4, #4]
   1fb8c:	streq	r0, [r4]
   1fb90:	movne	r0, r5
   1fb94:	pop	{r4, r5, r6, pc}
   1fb98:	cmp	r3, r1
   1fb9c:	beq	1fc1c <__assert_fail@plt+0xe078>
   1fba0:	ldr	r0, [r0, #8]
   1fba4:	ldr	r3, [r0]
   1fba8:	cmp	r6, r3
   1fbac:	bge	1fbe8 <__assert_fail@plt+0xe044>
   1fbb0:	cmp	r1, #0
   1fbb4:	ble	1fbd0 <__assert_fail@plt+0xe02c>
   1fbb8:	add	r1, r0, r1, lsl #2
   1fbbc:	ldr	r3, [r1, #-4]
   1fbc0:	str	r3, [r1], #-4
   1fbc4:	cmp	r0, r1
   1fbc8:	bne	1fbbc <__assert_fail@plt+0xe018>
   1fbcc:	mov	r1, #0
   1fbd0:	str	r6, [r0, r1, lsl #2]
   1fbd4:	ldr	r3, [r4, #4]
   1fbd8:	mov	r0, #1
   1fbdc:	add	r3, r3, r0
   1fbe0:	str	r3, [r4, #4]
   1fbe4:	pop	{r4, r5, r6, pc}
   1fbe8:	sub	r3, r1, #-1073741823	; 0xc0000001
   1fbec:	ldr	r2, [r0, r3, lsl #2]
   1fbf0:	lsl	r3, r3, #2
   1fbf4:	cmp	r6, r2
   1fbf8:	bge	1fbd0 <__assert_fail@plt+0xe02c>
   1fbfc:	add	r3, r3, #4
   1fc00:	add	r3, r0, r3
   1fc04:	str	r2, [r3], #-4
   1fc08:	ldr	r2, [r3, #-4]
   1fc0c:	sub	r1, r1, #1
   1fc10:	cmp	r6, r2
   1fc14:	blt	1fc04 <__assert_fail@plt+0xe060>
   1fc18:	b	1fbd0 <__assert_fail@plt+0xe02c>
   1fc1c:	lsl	r3, r1, #1
   1fc20:	str	r3, [r0]
   1fc24:	lsl	r1, r1, #3
   1fc28:	ldr	r0, [r0, #8]
   1fc2c:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   1fc30:	cmp	r0, #0
   1fc34:	popeq	{r4, r5, r6, pc}
   1fc38:	ldr	r1, [r4, #4]
   1fc3c:	str	r0, [r4, #8]
   1fc40:	b	1fba4 <__assert_fail@plt+0xe000>
   1fc44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc48:	sub	sp, sp, #20
   1fc4c:	ldr	r8, [pc, #680]	; 1fefc <__assert_fail@plt+0xe358>
   1fc50:	ldr	r7, [sp, #56]	; 0x38
   1fc54:	mov	r6, r0
   1fc58:	mov	fp, r1
   1fc5c:	mov	r9, r2
   1fc60:	str	r3, [sp, #12]
   1fc64:	ldr	sl, [r6]
   1fc68:	add	r3, sl, fp, lsl #3
   1fc6c:	ldrb	r2, [r3, #4]
   1fc70:	cmp	r2, #4
   1fc74:	beq	1fe64 <__assert_fail@plt+0xe2c0>
   1fc78:	add	r4, fp, fp, lsl #1
   1fc7c:	ldr	r0, [r6, #20]
   1fc80:	lsl	r4, r4, #2
   1fc84:	add	ip, r0, r4
   1fc88:	ldr	r2, [ip, #4]
   1fc8c:	cmp	r2, #0
   1fc90:	beq	1fed0 <__assert_fail@plt+0xe32c>
   1fc94:	cmp	r2, #1
   1fc98:	beq	1fde4 <__assert_fail@plt+0xe240>
   1fc9c:	ldr	r2, [r6, #8]
   1fca0:	add	r9, r9, r9, lsl #1
   1fca4:	sub	r1, r2, #1
   1fca8:	cmp	r1, #0
   1fcac:	add	r3, sl, r1, lsl #3
   1fcb0:	lsl	r5, r9, #2
   1fcb4:	ldrb	lr, [r3, #6]
   1fcb8:	ldr	r9, [ip, #8]
   1fcbc:	add	r0, r0, r5
   1fcc0:	movle	ip, #0
   1fcc4:	movgt	ip, #1
   1fcc8:	ands	ip, ip, lr, lsr #2
   1fccc:	mov	ip, #0
   1fcd0:	ldr	r9, [r9]
   1fcd4:	str	ip, [r0, #4]
   1fcd8:	beq	1fd8c <__assert_fail@plt+0xe1e8>
   1fcdc:	ldr	ip, [r6, #16]
   1fce0:	rsb	fp, r3, r2, lsl #3
   1fce4:	sub	fp, fp, #16
   1fce8:	add	r2, ip, r2, lsl #2
   1fcec:	b	1fd10 <__assert_fail@plt+0xe16c>
   1fcf0:	add	r3, sl, lr
   1fcf4:	sub	r1, r1, #1
   1fcf8:	ldrb	lr, [r3, #6]
   1fcfc:	cmp	r1, #0
   1fd00:	movle	ip, #0
   1fd04:	movgt	ip, #1
   1fd08:	ands	ip, ip, lr, lsr #2
   1fd0c:	beq	1fd8c <__assert_fail@plt+0xe1e8>
   1fd10:	ldr	ip, [r2, #-4]!
   1fd14:	add	lr, r3, fp
   1fd18:	cmp	r9, ip
   1fd1c:	bne	1fcf0 <__assert_fail@plt+0xe14c>
   1fd20:	ldr	r3, [r3, #4]
   1fd24:	and	r3, r8, r3, lsr #8
   1fd28:	cmp	r7, r3
   1fd2c:	bne	1fcf0 <__assert_fail@plt+0xe14c>
   1fd30:	bl	1fb28 <__assert_fail@plt+0xdf84>
   1fd34:	cmp	r0, #0
   1fd38:	beq	1fd80 <__assert_fail@plt+0xe1dc>
   1fd3c:	ldr	r3, [r6, #20]
   1fd40:	mov	r2, r7
   1fd44:	add	r4, r3, r4
   1fd48:	mov	r0, r6
   1fd4c:	ldr	r3, [r4, #8]
   1fd50:	ldr	fp, [r3, #4]
   1fd54:	mov	r1, fp
   1fd58:	bl	1f790 <__assert_fail@plt+0xdbec>
   1fd5c:	cmn	r0, #1
   1fd60:	mov	r9, r0
   1fd64:	beq	1fd80 <__assert_fail@plt+0xe1dc>
   1fd68:	ldr	r0, [r6, #20]
   1fd6c:	mov	r1, r9
   1fd70:	add	r0, r0, r5
   1fd74:	bl	1fb28 <__assert_fail@plt+0xdf84>
   1fd78:	cmp	r0, #0
   1fd7c:	bne	1fc64 <__assert_fail@plt+0xe0c0>
   1fd80:	mov	r0, #12
   1fd84:	add	sp, sp, #20
   1fd88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd8c:	mov	r2, r7
   1fd90:	mov	r1, r9
   1fd94:	mov	r0, r6
   1fd98:	bl	1f790 <__assert_fail@plt+0xdbec>
   1fd9c:	cmn	r0, #1
   1fda0:	mov	sl, r0
   1fda4:	beq	1fd80 <__assert_fail@plt+0xe1dc>
   1fda8:	ldr	r0, [r6, #20]
   1fdac:	mov	r1, sl
   1fdb0:	add	r0, r0, r5
   1fdb4:	bl	1fb28 <__assert_fail@plt+0xdf84>
   1fdb8:	cmp	r0, #0
   1fdbc:	beq	1fd80 <__assert_fail@plt+0xe1dc>
   1fdc0:	str	r7, [sp]
   1fdc4:	mov	r2, sl
   1fdc8:	mov	r1, r9
   1fdcc:	ldr	r3, [sp, #12]
   1fdd0:	mov	r0, r6
   1fdd4:	bl	1fc44 <__assert_fail@plt+0xe0a0>
   1fdd8:	cmp	r0, #0
   1fddc:	beq	1fd3c <__assert_fail@plt+0xe198>
   1fde0:	b	1fd84 <__assert_fail@plt+0xe1e0>
   1fde4:	add	r4, r9, r9, lsl #1
   1fde8:	ldr	r2, [ip, #8]
   1fdec:	ldr	r1, [sp, #12]
   1fdf0:	cmp	fp, r9
   1fdf4:	lsl	r4, r4, #2
   1fdf8:	sub	r1, fp, r1
   1fdfc:	add	r0, r0, r4
   1fe00:	clz	r1, r1
   1fe04:	lsr	r1, r1, #5
   1fe08:	moveq	r1, #0
   1fe0c:	ldr	fp, [r2]
   1fe10:	cmp	r1, #0
   1fe14:	mov	r2, #0
   1fe18:	str	r2, [r0, #4]
   1fe1c:	bne	1fee4 <__assert_fail@plt+0xe340>
   1fe20:	ldr	r3, [r3, #4]
   1fe24:	mov	r1, fp
   1fe28:	mov	r0, r6
   1fe2c:	and	r3, r8, r3, lsr #8
   1fe30:	orr	r7, r7, r3
   1fe34:	mov	r2, r7
   1fe38:	bl	1f790 <__assert_fail@plt+0xdbec>
   1fe3c:	cmn	r0, #1
   1fe40:	mov	r9, r0
   1fe44:	beq	1fd80 <__assert_fail@plt+0xe1dc>
   1fe48:	ldr	r0, [r6, #20]
   1fe4c:	mov	r1, r9
   1fe50:	add	r0, r0, r4
   1fe54:	bl	1fb28 <__assert_fail@plt+0xdf84>
   1fe58:	cmp	r0, #0
   1fe5c:	bne	1fc64 <__assert_fail@plt+0xe0c0>
   1fe60:	b	1fd80 <__assert_fail@plt+0xe1dc>
   1fe64:	ldr	r2, [r6, #12]
   1fe68:	add	r4, r9, r9, lsl #1
   1fe6c:	ldr	r3, [r6, #20]
   1fe70:	lsl	r4, r4, #2
   1fe74:	add	r3, r3, r4
   1fe78:	lsl	sl, fp, #2
   1fe7c:	ldr	fp, [r2, fp, lsl #2]
   1fe80:	mov	r1, #0
   1fe84:	str	r1, [r3, #4]
   1fe88:	mov	r2, r7
   1fe8c:	mov	r1, fp
   1fe90:	mov	r0, r6
   1fe94:	bl	1f790 <__assert_fail@plt+0xdbec>
   1fe98:	mov	r5, r9
   1fe9c:	cmn	r0, #1
   1fea0:	mov	r9, r0
   1fea4:	beq	1fd80 <__assert_fail@plt+0xe1dc>
   1fea8:	ldr	r3, [r6, #12]
   1feac:	ldr	r0, [r6, #20]
   1feb0:	mov	r1, r9
   1feb4:	ldr	r2, [r3, sl]
   1feb8:	add	r0, r0, r4
   1febc:	str	r2, [r3, r5, lsl #2]
   1fec0:	bl	1fb28 <__assert_fail@plt+0xdf84>
   1fec4:	cmp	r0, #0
   1fec8:	bne	1fc64 <__assert_fail@plt+0xe0c0>
   1fecc:	b	1fd80 <__assert_fail@plt+0xe1dc>
   1fed0:	ldr	r3, [r6, #12]
   1fed4:	mov	r0, r2
   1fed8:	ldr	r2, [r3, fp, lsl #2]
   1fedc:	str	r2, [r3, r9, lsl #2]
   1fee0:	b	1fd84 <__assert_fail@plt+0xe1e0>
   1fee4:	mov	r1, fp
   1fee8:	bl	1fb28 <__assert_fail@plt+0xdf84>
   1feec:	cmp	r0, #0
   1fef0:	movne	r0, #0
   1fef4:	bne	1fd84 <__assert_fail@plt+0xe1e0>
   1fef8:	b	1fd80 <__assert_fail@plt+0xe1dc>
   1fefc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ff00:	ldr	r3, [r0, #36]	; 0x24
   1ff04:	push	{r4, r5, r6, lr}
   1ff08:	cmp	r3, r1
   1ff0c:	mov	r4, r0
   1ff10:	mov	r5, r1
   1ff14:	ldr	r6, [r0, #104]	; 0x68
   1ff18:	bgt	1ff6c <__assert_fail@plt+0xe3c8>
   1ff1c:	ldr	r2, [r0, #48]	; 0x30
   1ff20:	cmp	r3, r2
   1ff24:	bge	1ff6c <__assert_fail@plt+0xe3c8>
   1ff28:	add	r1, r5, #1
   1ff2c:	mov	r0, r4
   1ff30:	bl	1f44c <__assert_fail@plt+0xd8a8>
   1ff34:	cmp	r0, #0
   1ff38:	bne	1ff90 <__assert_fail@plt+0xe3ec>
   1ff3c:	cmp	r6, r5
   1ff40:	bge	1ff88 <__assert_fail@plt+0xe3e4>
   1ff44:	sub	r2, r5, r6
   1ff48:	ldr	r0, [r4, #100]	; 0x64
   1ff4c:	add	r6, r6, #1
   1ff50:	lsl	r2, r2, #2
   1ff54:	add	r0, r0, r6, lsl #2
   1ff58:	mov	r1, #0
   1ff5c:	bl	119e8 <memset@plt>
   1ff60:	mov	r0, #0
   1ff64:	str	r5, [r4, #104]	; 0x68
   1ff68:	pop	{r4, r5, r6, pc}
   1ff6c:	ldr	r3, [r4, #28]
   1ff70:	cmp	r5, r3
   1ff74:	blt	1ff3c <__assert_fail@plt+0xe398>
   1ff78:	ldr	r2, [r4, #48]	; 0x30
   1ff7c:	cmp	r3, r2
   1ff80:	bge	1ff3c <__assert_fail@plt+0xe398>
   1ff84:	b	1ff28 <__assert_fail@plt+0xe384>
   1ff88:	mov	r0, #0
   1ff8c:	pop	{r4, r5, r6, pc}
   1ff90:	pop	{r4, r5, r6, pc}
   1ff94:	push	{r4, r5, r6, r7, r8, lr}
   1ff98:	subs	r4, r0, #0
   1ff9c:	ldr	r7, [sp, #28]
   1ffa0:	beq	2003c <__assert_fail@plt+0xe498>
   1ffa4:	ldr	ip, [r4]
   1ffa8:	cmp	ip, #0
   1ffac:	beq	2003c <__assert_fail@plt+0xe498>
   1ffb0:	sub	ip, ip, #1
   1ffb4:	ldr	lr, [r4, #8]
   1ffb8:	add	r5, ip, ip, lsl #1
   1ffbc:	lsl	r6, r2, #3
   1ffc0:	lsl	r5, r5, #3
   1ffc4:	add	r2, lr, r5
   1ffc8:	mov	r0, r3
   1ffcc:	mov	r8, r1
   1ffd0:	ldr	r3, [lr, r5]
   1ffd4:	ldr	r1, [r2, #8]
   1ffd8:	str	ip, [r4]
   1ffdc:	mov	r2, r6
   1ffe0:	str	r3, [r8]
   1ffe4:	bl	11784 <memcpy@plt>
   1ffe8:	ldr	r3, [r4, #8]
   1ffec:	mov	r2, r6
   1fff0:	add	r3, r3, r5
   1fff4:	ldr	r0, [sp, #24]
   1fff8:	ldr	r1, [r3, #8]
   1fffc:	add	r1, r1, r6
   20000:	bl	11784 <memcpy@plt>
   20004:	ldr	r0, [r7, #8]
   20008:	bl	17274 <__assert_fail@plt+0x56d0>
   2000c:	ldr	r3, [r4, #8]
   20010:	add	r3, r3, r5
   20014:	ldr	r0, [r3, #8]
   20018:	bl	17274 <__assert_fail@plt+0x56d0>
   2001c:	ldr	r3, [r4, #8]
   20020:	add	r5, r3, r5
   20024:	add	r3, r5, #12
   20028:	ldr	ip, [r5, #4]
   2002c:	ldm	r3, {r0, r1, r2}
   20030:	stm	r7, {r0, r1, r2}
   20034:	mov	r0, ip
   20038:	pop	{r4, r5, r6, r7, r8, pc}
   2003c:	mvn	ip, #0
   20040:	b	20034 <__assert_fail@plt+0xe490>
   20044:	ldr	r2, [r0, #4]
   20048:	ldr	r3, [r1, #4]
   2004c:	cmp	r2, r3
   20050:	beq	2005c <__assert_fail@plt+0xe4b8>
   20054:	mov	r0, #0
   20058:	bx	lr
   2005c:	sub	r2, r2, #1
   20060:	cmp	r2, #0
   20064:	lsl	r3, r2, #2
   20068:	sub	r2, r2, #1
   2006c:	blt	200b0 <__assert_fail@plt+0xe50c>
   20070:	push	{lr}		; (str lr, [sp, #-4]!)
   20074:	b	20084 <__assert_fail@plt+0xe4e0>
   20078:	cmp	r2, #0
   2007c:	sub	r2, r2, #1
   20080:	blt	200a8 <__assert_fail@plt+0xe504>
   20084:	ldr	lr, [r0, #8]
   20088:	ldr	ip, [r1, #8]
   2008c:	ldr	lr, [lr, r3]
   20090:	ldr	ip, [ip, r3]
   20094:	sub	r3, r3, #4
   20098:	cmp	lr, ip
   2009c:	beq	20078 <__assert_fail@plt+0xe4d4>
   200a0:	mov	r0, #0
   200a4:	pop	{pc}		; (ldr pc, [sp], #4)
   200a8:	mov	r0, #1
   200ac:	pop	{pc}		; (ldr pc, [sp], #4)
   200b0:	mov	r0, #1
   200b4:	bx	lr
   200b8:	cmp	r0, #0
   200bc:	ble	20140 <__assert_fail@plt+0xe59c>
   200c0:	push	{lr}		; (str lr, [sp, #-4]!)
   200c4:	sub	ip, r0, #1
   200c8:	ldr	lr, [r1]
   200cc:	mov	r0, #0
   200d0:	cmp	r0, ip
   200d4:	bcs	20110 <__assert_fail@plt+0xe56c>
   200d8:	add	r1, r0, ip
   200dc:	lsr	r1, r1, #1
   200e0:	ldr	r3, [lr, r1, lsl #2]
   200e4:	cmp	r2, r3
   200e8:	ble	20100 <__assert_fail@plt+0xe55c>
   200ec:	b	20124 <__assert_fail@plt+0xe580>
   200f0:	ldr	ip, [lr, r3, lsl #2]
   200f4:	cmp	ip, r2
   200f8:	blt	2012c <__assert_fail@plt+0xe588>
   200fc:	mov	r1, r3
   20100:	add	r3, r0, r1
   20104:	cmp	r0, r1
   20108:	lsr	r3, r3, #1
   2010c:	bcc	200f0 <__assert_fail@plt+0xe54c>
   20110:	ldr	r3, [lr, r0, lsl #2]
   20114:	cmp	r2, r3
   20118:	beq	20138 <__assert_fail@plt+0xe594>
   2011c:	mov	r0, #0
   20120:	pop	{pc}		; (ldr pc, [sp], #4)
   20124:	mov	r3, r1
   20128:	mov	r1, ip
   2012c:	add	r0, r3, #1
   20130:	mov	ip, r1
   20134:	b	200d0 <__assert_fail@plt+0xe52c>
   20138:	add	r0, r0, #1
   2013c:	pop	{pc}		; (ldr pc, [sp], #4)
   20140:	mov	r0, #0
   20144:	bx	lr
   20148:	push	{r4, r5, r6, r7, r8, r9, lr}
   2014c:	sub	sp, sp, #12
   20150:	mov	r5, r1
   20154:	mov	r6, r0
   20158:	mov	r4, r2
   2015c:	mov	r9, r3
   20160:	add	r8, r1, #8
   20164:	ldr	r7, [sp, #40]	; 0x28
   20168:	b	20174 <__assert_fail@plt+0xe5d0>
   2016c:	ldr	r3, [r3, #8]
   20170:	ldr	r4, [r3]
   20174:	mov	r1, r8
   20178:	mov	r2, r4
   2017c:	ldr	r0, [r5, #4]
   20180:	bl	200b8 <__assert_fail@plt+0xe514>
   20184:	mov	r1, r4
   20188:	cmp	r0, #0
   2018c:	mov	r0, r5
   20190:	bne	2023c <__assert_fail@plt+0xe698>
   20194:	ldr	r3, [r6]
   20198:	add	r2, r3, r4, lsl #3
   2019c:	ldrb	r2, [r2, #4]
   201a0:	cmp	r2, r7
   201a4:	bne	201b4 <__assert_fail@plt+0xe610>
   201a8:	ldr	r3, [r3, r4, lsl #3]
   201ac:	cmp	r9, r3
   201b0:	beq	20214 <__assert_fail@plt+0xe670>
   201b4:	bl	1fb28 <__assert_fail@plt+0xdf84>
   201b8:	add	r4, r4, r4, lsl #1
   201bc:	lsl	r4, r4, #2
   201c0:	cmp	r0, #0
   201c4:	beq	20230 <__assert_fail@plt+0xe68c>
   201c8:	ldr	r3, [r6, #20]
   201cc:	add	r3, r3, r4
   201d0:	ldr	r2, [r3, #4]
   201d4:	cmp	r2, #0
   201d8:	beq	2023c <__assert_fail@plt+0xe698>
   201dc:	cmp	r2, #2
   201e0:	bne	2016c <__assert_fail@plt+0xe5c8>
   201e4:	ldr	r2, [r3, #8]
   201e8:	mov	r1, r5
   201ec:	mov	r3, r9
   201f0:	ldr	r2, [r2, #4]
   201f4:	mov	r0, r6
   201f8:	str	r7, [sp]
   201fc:	bl	20148 <__assert_fail@plt+0xe5a4>
   20200:	cmp	r0, #0
   20204:	bne	20234 <__assert_fail@plt+0xe690>
   20208:	ldr	r3, [r6, #20]
   2020c:	add	r3, r3, r4
   20210:	b	2016c <__assert_fail@plt+0xe5c8>
   20214:	cmp	r7, #9
   20218:	bne	2023c <__assert_fail@plt+0xe698>
   2021c:	mov	r1, r4
   20220:	mov	r0, r5
   20224:	bl	1fb28 <__assert_fail@plt+0xdf84>
   20228:	cmp	r0, #0
   2022c:	bne	2023c <__assert_fail@plt+0xe698>
   20230:	mov	r0, #12
   20234:	add	sp, sp, #12
   20238:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2023c:	mov	r0, #0
   20240:	add	sp, sp, #12
   20244:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20248:	ldr	r3, [r0]
   2024c:	cmp	r2, r3
   20250:	bxge	lr
   20254:	ldr	r3, [r1]
   20258:	add	r3, r3, r2, lsl #2
   2025c:	ldr	r1, [r3, #4]
   20260:	add	r2, r2, #1
   20264:	str	r1, [r3], #4
   20268:	ldr	r1, [r0]
   2026c:	cmp	r2, r1
   20270:	blt	2025c <__assert_fail@plt+0xe6b8>
   20274:	bx	lr
   20278:	ldrb	r3, [r1, #24]
   2027c:	cmp	r3, #4
   20280:	beq	202ec <__assert_fail@plt+0xe748>
   20284:	cmp	r3, #17
   20288:	beq	20294 <__assert_fail@plt+0xe6f0>
   2028c:	mov	r0, #0
   20290:	bx	lr
   20294:	ldr	r3, [r1, #4]
   20298:	cmp	r3, #0
   2029c:	beq	2028c <__assert_fail@plt+0xe6e8>
   202a0:	ldrb	r2, [r3, #24]
   202a4:	cmp	r2, #17
   202a8:	bne	2028c <__assert_fail@plt+0xe6e8>
   202ac:	ldr	r2, [r3, #4]
   202b0:	ldr	r3, [r3, #20]
   202b4:	cmp	r2, #0
   202b8:	str	r2, [r1, #4]
   202bc:	strne	r1, [r2]
   202c0:	ldr	r2, [r0, #132]	; 0x84
   202c4:	ldr	r1, [r1, #20]
   202c8:	cmp	r3, #31
   202cc:	ldr	r1, [r2, r1, lsl #2]
   202d0:	str	r1, [r2, r3, lsl #2]
   202d4:	ldrle	r2, [r0, #80]	; 0x50
   202d8:	movle	r1, #1
   202dc:	bicle	r3, r2, r1, lsl r3
   202e0:	strle	r3, [r0, #80]	; 0x50
   202e4:	mov	r0, #0
   202e8:	bx	lr
   202ec:	ldr	r2, [r0, #132]	; 0x84
   202f0:	cmp	r2, #0
   202f4:	beq	2028c <__assert_fail@plt+0xe6e8>
   202f8:	ldr	r3, [r1, #20]
   202fc:	mov	ip, #1
   20300:	ldr	r2, [r2, r3, lsl #2]
   20304:	str	r2, [r1, #20]
   20308:	ldr	r3, [r0, #80]	; 0x50
   2030c:	orr	r3, r3, ip, lsl r2
   20310:	str	r3, [r0, #80]	; 0x50
   20314:	mov	r0, #0
   20318:	bx	lr
   2031c:	ldrb	r3, [r1, #24]
   20320:	cmp	r3, #11
   20324:	beq	20374 <__assert_fail@plt+0xe7d0>
   20328:	cmp	r3, #16
   2032c:	beq	20358 <__assert_fail@plt+0xe7b4>
   20330:	ldr	r3, [r1, #4]
   20334:	mov	r0, #0
   20338:	cmp	r3, #0
   2033c:	ldrne	r2, [r1, #16]
   20340:	strne	r2, [r3, #16]
   20344:	ldr	r3, [r1, #8]
   20348:	cmp	r3, #0
   2034c:	ldrne	r2, [r1, #16]
   20350:	strne	r2, [r3, #16]
   20354:	bx	lr
   20358:	ldmib	r1, {r2, r3}
   2035c:	ldr	r0, [r3, #12]
   20360:	str	r0, [r2, #16]
   20364:	ldr	r2, [r1, #16]
   20368:	mov	r0, #0
   2036c:	str	r2, [r3, #16]
   20370:	bx	lr
   20374:	ldr	r3, [r1, #4]
   20378:	mov	r0, #0
   2037c:	str	r1, [r3, #16]
   20380:	bx	lr
   20384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20388:	sub	sp, sp, #28
   2038c:	ldr	r9, [r0, #108]	; 0x6c
   20390:	ldr	r6, [sp, #64]	; 0x40
   20394:	ldr	r7, [sp, #72]	; 0x48
   20398:	ldr	lr, [r0, #84]	; 0x54
   2039c:	mov	ip, r9
   203a0:	mov	r4, #0
   203a4:	str	lr, [sp, #8]
   203a8:	cmp	r4, ip
   203ac:	bge	20408 <__assert_fail@plt+0xe864>
   203b0:	add	lr, r4, ip
   203b4:	ldr	r5, [r0, #116]	; 0x74
   203b8:	add	lr, lr, lr, lsr #31
   203bc:	asr	lr, lr, #1
   203c0:	add	r8, lr, lr, lsl #1
   203c4:	add	r8, r5, r8, lsl #3
   203c8:	ldr	r8, [r8, #4]
   203cc:	cmp	r6, r8
   203d0:	ble	203f8 <__assert_fail@plt+0xe854>
   203d4:	b	20554 <__assert_fail@plt+0xe9b0>
   203d8:	asr	ip, ip, #1
   203dc:	mov	sl, ip
   203e0:	add	r8, ip, ip, lsl #1
   203e4:	add	r8, r5, r8, lsl #3
   203e8:	ldr	r8, [r8, #4]
   203ec:	cmp	r8, r6
   203f0:	blt	2055c <__assert_fail@plt+0xe9b8>
   203f4:	mov	lr, ip
   203f8:	add	ip, r4, lr
   203fc:	cmp	r4, lr
   20400:	add	ip, ip, ip, lsr #31
   20404:	blt	203d8 <__assert_fail@plt+0xe834>
   20408:	cmp	r9, r4
   2040c:	mvnle	r4, #0
   20410:	ble	2042c <__assert_fail@plt+0xe888>
   20414:	add	lr, r4, r4, lsl #1
   20418:	ldr	ip, [r0, #116]	; 0x74
   2041c:	add	ip, ip, lr, lsl #3
   20420:	ldr	ip, [ip, #4]
   20424:	cmp	r6, ip
   20428:	mvnne	r4, #0
   2042c:	mov	ip, r9
   20430:	mov	r5, #0
   20434:	cmp	r5, ip
   20438:	bge	20494 <__assert_fail@plt+0xe8f0>
   2043c:	add	lr, r5, ip
   20440:	ldr	r8, [r0, #116]	; 0x74
   20444:	add	lr, lr, lr, lsr #31
   20448:	asr	lr, lr, #1
   2044c:	add	sl, lr, lr, lsl #1
   20450:	add	sl, r8, sl, lsl #3
   20454:	ldr	sl, [sl, #4]
   20458:	cmp	r7, sl
   2045c:	ble	20484 <__assert_fail@plt+0xe8e0>
   20460:	b	20568 <__assert_fail@plt+0xe9c4>
   20464:	asr	ip, ip, #1
   20468:	mov	fp, ip
   2046c:	add	sl, ip, ip, lsl #1
   20470:	add	sl, r8, sl, lsl #3
   20474:	ldr	sl, [sl, #4]
   20478:	cmp	sl, r7
   2047c:	blt	20570 <__assert_fail@plt+0xe9cc>
   20480:	mov	lr, ip
   20484:	add	ip, r5, lr
   20488:	cmp	r5, lr
   2048c:	add	ip, ip, ip, lsr #31
   20490:	blt	20464 <__assert_fail@plt+0xe8c0>
   20494:	cmp	r9, r5
   20498:	mvnle	r5, #0
   2049c:	ble	204b8 <__assert_fail@plt+0xe914>
   204a0:	add	lr, r5, r5, lsl #1
   204a4:	ldr	ip, [r0, #116]	; 0x74
   204a8:	add	ip, ip, lr, lsl #3
   204ac:	ldr	ip, [ip, #4]
   204b0:	cmp	r7, ip
   204b4:	mvnne	r5, #0
   204b8:	ldr	ip, [r1]
   204bc:	cmp	ip, #0
   204c0:	ble	20590 <__assert_fail@plt+0xe9ec>
   204c4:	mov	r9, r2
   204c8:	mov	r8, r0
   204cc:	mov	fp, #0
   204d0:	str	r3, [sp, #12]
   204d4:	str	r1, [sp, #20]
   204d8:	str	r4, [sp, #16]
   204dc:	ldr	r3, [r9]
   204e0:	ldr	r2, [sp, #8]
   204e4:	ldr	lr, [r8, #116]	; 0x74
   204e8:	mov	r0, r8
   204ec:	ldr	ip, [r2]
   204f0:	ldr	r2, [r3, fp, lsl #2]
   204f4:	ldr	r3, [sp, #12]
   204f8:	mov	r1, r2
   204fc:	add	r2, r2, r2, lsl #1
   20500:	ldr	r2, [lr, r2, lsl #3]
   20504:	ldr	r4, [ip, r2, lsl #3]
   20508:	ldr	r2, [sp, #16]
   2050c:	str	r6, [sp]
   20510:	str	r2, [sp, #4]
   20514:	mov	r2, r4
   20518:	bl	1e964 <__assert_fail@plt+0xcdc0>
   2051c:	ldr	r1, [r9]
   20520:	mov	r2, r4
   20524:	ldr	r3, [sp, #68]	; 0x44
   20528:	ldr	r1, [r1, fp, lsl #2]
   2052c:	str	r5, [sp, #4]
   20530:	str	r7, [sp]
   20534:	mov	sl, r0
   20538:	mov	r0, r8
   2053c:	bl	1e964 <__assert_fail@plt+0xcdc0>
   20540:	cmp	sl, r0
   20544:	beq	2057c <__assert_fail@plt+0xe9d8>
   20548:	mov	r0, #1
   2054c:	add	sp, sp, #28
   20550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20554:	mov	sl, lr
   20558:	mov	lr, ip
   2055c:	add	r4, sl, #1
   20560:	mov	ip, lr
   20564:	b	203a8 <__assert_fail@plt+0xe804>
   20568:	mov	fp, lr
   2056c:	mov	lr, ip
   20570:	add	r5, fp, #1
   20574:	mov	ip, lr
   20578:	b	20434 <__assert_fail@plt+0xe890>
   2057c:	ldr	r3, [sp, #20]
   20580:	add	fp, fp, #1
   20584:	ldr	r3, [r3]
   20588:	cmp	fp, r3
   2058c:	blt	204dc <__assert_fail@plt+0xe938>
   20590:	mov	r0, #0
   20594:	b	2054c <__assert_fail@plt+0xe9a8>
   20598:	ldr	ip, [r1, #4]
   2059c:	cmp	ip, #0
   205a0:	beq	206d0 <__assert_fail@plt+0xeb2c>
   205a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   205a8:	ldr	lr, [r2, #4]
   205ac:	cmp	lr, #0
   205b0:	beq	206ac <__assert_fail@plt+0xeb08>
   205b4:	ldr	r3, [r0, #4]
   205b8:	mov	r9, r2
   205bc:	ldr	r4, [r0]
   205c0:	add	r2, ip, lr
   205c4:	mov	r8, r1
   205c8:	add	r1, r2, r3
   205cc:	cmp	r1, r4
   205d0:	mov	r7, r0
   205d4:	bgt	20714 <__assert_fail@plt+0xeb70>
   205d8:	ldr	r0, [r0, #8]
   205dc:	ldr	sl, [r8, #8]
   205e0:	ldr	r2, [r9, #8]
   205e4:	sub	r5, ip, #1
   205e8:	sub	r6, lr, #1
   205ec:	add	r1, r3, ip
   205f0:	ldr	r4, [r2, r6, lsl #2]
   205f4:	ldr	ip, [sl, r5, lsl #2]
   205f8:	add	r1, r1, lr
   205fc:	sub	r3, r3, #1
   20600:	cmp	ip, r4
   20604:	beq	20620 <__assert_fail@plt+0xea7c>
   20608:	bge	206b4 <__assert_fail@plt+0xeb10>
   2060c:	subs	r6, r6, #1
   20610:	bmi	2066c <__assert_fail@plt+0xeac8>
   20614:	ldr	r4, [r2, r6, lsl #2]
   20618:	cmp	ip, r4
   2061c:	bne	20608 <__assert_fail@plt+0xea64>
   20620:	cmp	r3, #0
   20624:	blt	20650 <__assert_fail@plt+0xeaac>
   20628:	ldr	lr, [r0, r3, lsl #2]
   2062c:	add	ip, r0, r3, lsl #2
   20630:	cmp	lr, r4
   20634:	bgt	20648 <__assert_fail@plt+0xeaa4>
   20638:	b	206c4 <__assert_fail@plt+0xeb20>
   2063c:	ldr	lr, [ip, #-4]!
   20640:	cmp	lr, r4
   20644:	ble	206c4 <__assert_fail@plt+0xeb20>
   20648:	subs	r3, r3, #1
   2064c:	bcs	2063c <__assert_fail@plt+0xea98>
   20650:	sub	r1, r1, #1
   20654:	str	r4, [r0, r1, lsl #2]
   20658:	subs	r5, r5, #1
   2065c:	bmi	2066c <__assert_fail@plt+0xeac8>
   20660:	subs	r6, r6, #1
   20664:	ldrpl	ip, [sl, r5, lsl #2]
   20668:	bpl	20614 <__assert_fail@plt+0xea70>
   2066c:	ldr	lr, [r7, #4]
   20670:	ldr	ip, [r8, #4]
   20674:	ldr	r3, [r9, #4]
   20678:	add	ip, lr, ip
   2067c:	add	ip, ip, r3
   20680:	sub	r2, ip, r1
   20684:	sub	r3, lr, #1
   20688:	cmp	r3, #0
   2068c:	cmpge	r2, #0
   20690:	add	lr, lr, r2
   20694:	sub	ip, ip, #1
   20698:	str	lr, [r7, #4]
   2069c:	bgt	206e8 <__assert_fail@plt+0xeb44>
   206a0:	lsl	r2, r2, #2
   206a4:	add	r1, r0, r1, lsl #2
   206a8:	bl	11784 <memcpy@plt>
   206ac:	mov	r0, #0
   206b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   206b4:	subs	r5, r5, #1
   206b8:	bmi	2066c <__assert_fail@plt+0xeac8>
   206bc:	ldr	ip, [sl, r5, lsl #2]
   206c0:	b	20600 <__assert_fail@plt+0xea5c>
   206c4:	cmp	lr, r4
   206c8:	bne	20650 <__assert_fail@plt+0xeaac>
   206cc:	b	20658 <__assert_fail@plt+0xeab4>
   206d0:	mov	r0, ip
   206d4:	bx	lr
   206d8:	sub	r3, r3, #1
   206dc:	cmn	r3, #1
   206e0:	str	lr, [r0, r6, lsl #2]
   206e4:	beq	206a0 <__assert_fail@plt+0xeafc>
   206e8:	ldr	r4, [r0, ip, lsl #2]
   206ec:	ldr	lr, [r0, r3, lsl #2]
   206f0:	add	r6, r3, r2
   206f4:	cmp	r4, lr
   206f8:	mov	r5, r6
   206fc:	ble	206d8 <__assert_fail@plt+0xeb34>
   20700:	subs	r2, r2, #1
   20704:	sub	ip, ip, #1
   20708:	str	r4, [r0, r6, lsl #2]
   2070c:	bne	206e8 <__assert_fail@plt+0xeb44>
   20710:	b	206a4 <__assert_fail@plt+0xeb00>
   20714:	add	r4, r2, r4
   20718:	ldr	r0, [r0, #8]
   2071c:	lsl	r1, r4, #2
   20720:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   20724:	cmp	r0, #0
   20728:	beq	20744 <__assert_fail@plt+0xeba0>
   2072c:	ldr	ip, [r8, #4]
   20730:	ldr	lr, [r9, #4]
   20734:	ldr	r3, [r7, #4]
   20738:	str	r0, [r7, #8]
   2073c:	str	r4, [r7]
   20740:	b	205dc <__assert_fail@plt+0xea38>
   20744:	mov	r0, #12
   20748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2074c:	push	{r4, r5, r6, lr}
   20750:	mov	r5, r0
   20754:	ldr	r0, [r1]
   20758:	sub	sp, sp, #16
   2075c:	cmp	r0, #31
   20760:	beq	207d4 <__assert_fail@plt+0xec30>
   20764:	lsl	ip, r0, #5
   20768:	ldr	r4, [r5]
   2076c:	add	r0, r0, #1
   20770:	add	r6, ip, #4
   20774:	str	r0, [r1]
   20778:	ldr	r1, [sp, #32]
   2077c:	add	ip, r4, ip
   20780:	mov	r5, #0
   20784:	str	r2, [ip, #8]
   20788:	str	r3, [ip, #12]
   2078c:	str	r5, [ip, #4]
   20790:	ldm	r1, {r0, r1}
   20794:	add	lr, ip, #24
   20798:	cmp	r2, r5
   2079c:	stm	lr, {r0, r1}
   207a0:	ldrb	r1, [ip, #30]
   207a4:	mvn	lr, #0
   207a8:	add	r0, r4, r6
   207ac:	and	r1, r1, #243	; 0xf3
   207b0:	str	r5, [ip, #16]
   207b4:	str	r5, [ip, #20]
   207b8:	strb	r1, [ip, #30]
   207bc:	str	lr, [ip, #32]
   207c0:	strne	r0, [r2]
   207c4:	cmp	r3, #0
   207c8:	strne	r0, [r3]
   207cc:	add	sp, sp, #16
   207d0:	pop	{r4, r5, r6, pc}
   207d4:	mov	r0, #996	; 0x3e4
   207d8:	stmib	sp, {r1, r2, r3}
   207dc:	bl	2d82c <__assert_fail@plt+0x1bc88>
   207e0:	subs	r4, r0, #0
   207e4:	beq	20808 <__assert_fail@plt+0xec64>
   207e8:	ldr	ip, [r5]
   207ec:	mov	r6, #4
   207f0:	str	ip, [r4]
   207f4:	mov	r0, #1
   207f8:	mov	ip, #0
   207fc:	str	r4, [r5]
   20800:	ldmib	sp, {r1, r2, r3}
   20804:	b	20774 <__assert_fail@plt+0xebd0>
   20808:	mov	r0, r4
   2080c:	b	207cc <__assert_fail@plt+0xec28>
   20810:	push	{r4, r5, r6, r7, r8, r9, lr}
   20814:	sub	sp, sp, #20
   20818:	mov	r4, r0
   2081c:	ldr	r5, [r0]
   20820:	add	r8, r1, #56	; 0x38
   20824:	add	r6, r1, #64	; 0x40
   20828:	add	r9, sp, #12
   2082c:	mov	r7, #0
   20830:	b	2083c <__assert_fail@plt+0xec98>
   20834:	mov	r4, r3
   20838:	add	r9, r5, #4
   2083c:	add	r3, r4, #20
   20840:	str	r3, [sp]
   20844:	mov	r2, #0
   20848:	mov	r3, r7
   2084c:	mov	r1, r6
   20850:	mov	r0, r8
   20854:	bl	2074c <__assert_fail@plt+0xeba8>
   20858:	cmp	r0, #0
   2085c:	str	r0, [r9]
   20860:	beq	208c4 <__assert_fail@plt+0xed20>
   20864:	str	r5, [r0]
   20868:	ldr	r5, [r9]
   2086c:	ldrb	r3, [r5, #26]
   20870:	orr	r3, r3, #4
   20874:	strb	r3, [r5, #26]
   20878:	ldr	r3, [r4, #4]
   2087c:	cmp	r3, #0
   20880:	bne	20834 <__assert_fail@plt+0xec90>
   20884:	mov	r2, r7
   20888:	b	208a4 <__assert_fail@plt+0xed00>
   2088c:	ldr	r3, [r4]
   20890:	mov	r2, r4
   20894:	cmp	r3, #0
   20898:	ldr	r5, [r5]
   2089c:	mov	r4, r3
   208a0:	beq	208c0 <__assert_fail@plt+0xed1c>
   208a4:	ldr	r3, [r4, #8]
   208a8:	cmp	r3, #0
   208ac:	cmpne	r2, r3
   208b0:	beq	2088c <__assert_fail@plt+0xece8>
   208b4:	mov	r4, r3
   208b8:	add	r9, r5, #8
   208bc:	b	2083c <__assert_fail@plt+0xec98>
   208c0:	ldr	r0, [sp, #12]
   208c4:	add	sp, sp, #20
   208c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   208cc:	ldrb	r3, [r1, #28]
   208d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208d4:	sub	sp, sp, #28
   208d8:	ands	r9, r3, #16
   208dc:	mov	r7, r2
   208e0:	str	r0, [sp, #12]
   208e4:	ldr	r4, [r1]
   208e8:	ldr	r5, [r2, #4]
   208ec:	beq	20a34 <__assert_fail@plt+0xee90>
   208f0:	cmp	r5, #0
   208f4:	beq	20ac4 <__assert_fail@plt+0xef20>
   208f8:	ldr	r3, [r2, #20]
   208fc:	cmp	r3, #31
   20900:	bgt	20a28 <__assert_fail@plt+0xee84>
   20904:	ldr	r2, [r4, #80]	; 0x50
   20908:	lsr	r3, r2, r3
   2090c:	tst	r3, #1
   20910:	beq	20a28 <__assert_fail@plt+0xee84>
   20914:	add	r6, sp, #16
   20918:	mov	r9, #0
   2091c:	add	sl, r4, #56	; 0x38
   20920:	add	r4, r4, #64	; 0x40
   20924:	mov	r3, r9
   20928:	mov	r2, r9
   2092c:	mov	ip, #8
   20930:	str	r6, [sp]
   20934:	mov	r1, r4
   20938:	str	r9, [r6, #4]
   2093c:	mov	r0, sl
   20940:	str	r9, [sp, #16]
   20944:	strb	ip, [sp, #20]
   20948:	bl	2074c <__assert_fail@plt+0xeba8>
   2094c:	str	r6, [sp]
   20950:	mov	r3, r9
   20954:	str	r9, [r6, #4]
   20958:	mov	r2, r9
   2095c:	mov	ip, #9
   20960:	mov	r1, r4
   20964:	str	r9, [sp, #16]
   20968:	strb	ip, [sp, #20]
   2096c:	mov	r8, r0
   20970:	mov	r0, sl
   20974:	bl	2074c <__assert_fail@plt+0xeba8>
   20978:	mov	r9, r0
   2097c:	mov	r0, #0
   20980:	str	r6, [sp]
   20984:	mov	ip, #16
   20988:	str	r0, [r6, #4]
   2098c:	str	r0, [sp, #16]
   20990:	mov	r2, r5
   20994:	mov	r3, r9
   20998:	mov	r1, r4
   2099c:	mov	r0, sl
   209a0:	strb	ip, [sp, #20]
   209a4:	bl	2074c <__assert_fail@plt+0xeba8>
   209a8:	mov	fp, r0
   209ac:	mov	r2, #0
   209b0:	str	r6, [sp]
   209b4:	mov	ip, #16
   209b8:	str	r2, [r6, #4]
   209bc:	str	r2, [sp, #16]
   209c0:	mov	r1, r4
   209c4:	mov	r0, sl
   209c8:	mov	r3, fp
   209cc:	mov	r2, r8
   209d0:	strb	ip, [sp, #20]
   209d4:	bl	2074c <__assert_fail@plt+0xeba8>
   209d8:	cmp	fp, #0
   209dc:	cmpne	r0, #0
   209e0:	mov	r5, r0
   209e4:	beq	20aa8 <__assert_fail@plt+0xef04>
   209e8:	cmp	r9, #0
   209ec:	cmpne	r8, #0
   209f0:	beq	20aa8 <__assert_fail@plt+0xef04>
   209f4:	ldr	r3, [r7, #20]
   209f8:	str	r3, [r9, #20]
   209fc:	str	r3, [r8, #20]
   20a00:	ldrb	r3, [r7, #26]
   20a04:	ldrb	r2, [r9, #26]
   20a08:	and	r3, r3, #8
   20a0c:	bic	r2, r2, #8
   20a10:	orr	r2, r3, r2
   20a14:	strb	r2, [r9, #26]
   20a18:	ldrb	r2, [r8, #26]
   20a1c:	bic	r2, r2, #8
   20a20:	orr	r3, r3, r2
   20a24:	strb	r3, [r8, #26]
   20a28:	mov	r0, r5
   20a2c:	add	sp, sp, #28
   20a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a34:	add	r6, sp, #16
   20a38:	add	sl, r4, #56	; 0x38
   20a3c:	add	r4, r4, #64	; 0x40
   20a40:	mov	ip, #8
   20a44:	mov	r3, r9
   20a48:	mov	r2, r9
   20a4c:	str	r6, [sp]
   20a50:	mov	r1, r4
   20a54:	str	r9, [r6, #4]
   20a58:	mov	r0, sl
   20a5c:	str	r9, [sp, #16]
   20a60:	strb	ip, [sp, #20]
   20a64:	bl	2074c <__assert_fail@plt+0xeba8>
   20a68:	str	r6, [sp]
   20a6c:	mov	ip, #9
   20a70:	str	r9, [r6, #4]
   20a74:	mov	r3, r9
   20a78:	mov	r2, r9
   20a7c:	mov	r1, r4
   20a80:	str	r9, [sp, #16]
   20a84:	strb	ip, [sp, #20]
   20a88:	mov	r8, r0
   20a8c:	mov	r0, sl
   20a90:	bl	2074c <__assert_fail@plt+0xeba8>
   20a94:	cmp	r5, #0
   20a98:	mov	r9, r0
   20a9c:	moveq	fp, r0
   20aa0:	bne	2097c <__assert_fail@plt+0xedd8>
   20aa4:	b	209ac <__assert_fail@plt+0xee08>
   20aa8:	ldr	r2, [sp, #12]
   20aac:	mov	r3, #12
   20ab0:	mov	r5, #0
   20ab4:	mov	r0, r5
   20ab8:	str	r3, [r2]
   20abc:	add	sp, sp, #28
   20ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ac4:	add	r6, sp, #16
   20ac8:	add	sl, r4, #56	; 0x38
   20acc:	add	r4, r4, #64	; 0x40
   20ad0:	mov	ip, #8
   20ad4:	str	r6, [sp]
   20ad8:	mov	r1, r4
   20adc:	mov	r3, r5
   20ae0:	mov	r2, r5
   20ae4:	str	r5, [r6, #4]
   20ae8:	mov	r0, sl
   20aec:	strb	ip, [sp, #20]
   20af0:	str	r5, [sp, #16]
   20af4:	bl	2074c <__assert_fail@plt+0xeba8>
   20af8:	str	r6, [sp]
   20afc:	mov	ip, #9
   20b00:	str	r5, [r6, #4]
   20b04:	mov	r1, r4
   20b08:	mov	r3, r5
   20b0c:	mov	r2, r5
   20b10:	str	r5, [sp, #16]
   20b14:	strb	ip, [sp, #20]
   20b18:	mov	r8, r0
   20b1c:	mov	r0, sl
   20b20:	bl	2074c <__assert_fail@plt+0xeba8>
   20b24:	mov	fp, r0
   20b28:	mov	r9, r0
   20b2c:	b	209ac <__assert_fail@plt+0xee08>
   20b30:	ldr	r2, [r1, #4]
   20b34:	push	{r4, r5, lr}
   20b38:	mov	r3, #0
   20b3c:	sub	sp, sp, #12
   20b40:	cmp	r2, r3
   20b44:	mov	r4, r1
   20b48:	mov	r5, r0
   20b4c:	str	r3, [sp, #4]
   20b50:	beq	20b60 <__assert_fail@plt+0xefbc>
   20b54:	ldrb	r3, [r2, #24]
   20b58:	cmp	r3, #17
   20b5c:	beq	20ba8 <__assert_fail@plt+0xf004>
   20b60:	ldr	r2, [r4, #8]
   20b64:	cmp	r2, #0
   20b68:	beq	20b78 <__assert_fail@plt+0xefd4>
   20b6c:	ldrb	r3, [r2, #24]
   20b70:	cmp	r3, #17
   20b74:	beq	20b84 <__assert_fail@plt+0xefe0>
   20b78:	ldr	r0, [sp, #4]
   20b7c:	add	sp, sp, #12
   20b80:	pop	{r4, r5, pc}
   20b84:	mov	r1, r5
   20b88:	add	r0, sp, #4
   20b8c:	bl	208cc <__assert_fail@plt+0xed28>
   20b90:	cmp	r0, #0
   20b94:	str	r0, [r4, #8]
   20b98:	strne	r4, [r0]
   20b9c:	ldr	r0, [sp, #4]
   20ba0:	add	sp, sp, #12
   20ba4:	pop	{r4, r5, pc}
   20ba8:	mov	r1, r0
   20bac:	add	r0, sp, #4
   20bb0:	bl	208cc <__assert_fail@plt+0xed28>
   20bb4:	cmp	r0, #0
   20bb8:	str	r0, [r4, #4]
   20bbc:	strne	r4, [r0]
   20bc0:	b	20b60 <__assert_fail@plt+0xefbc>
   20bc4:	push	{r4, r5, r6, lr}
   20bc8:	mov	r4, r0
   20bcc:	ldr	r0, [r1, #4]
   20bd0:	str	r0, [r4, #4]
   20bd4:	ldr	r2, [r1, #4]
   20bd8:	cmp	r2, #0
   20bdc:	ble	20c14 <__assert_fail@plt+0xf070>
   20be0:	str	r0, [r4]
   20be4:	lsl	r0, r0, #2
   20be8:	mov	r5, r1
   20bec:	bl	2d82c <__assert_fail@plt+0x1bc88>
   20bf0:	cmp	r0, #0
   20bf4:	str	r0, [r4, #8]
   20bf8:	beq	20c2c <__assert_fail@plt+0xf088>
   20bfc:	ldr	r2, [r5, #4]
   20c00:	ldr	r1, [r5, #8]
   20c04:	lsl	r2, r2, #2
   20c08:	bl	11784 <memcpy@plt>
   20c0c:	mov	r0, #0
   20c10:	pop	{r4, r5, r6, pc}
   20c14:	mov	r2, #0
   20c18:	mov	r0, r2
   20c1c:	str	r2, [r4]
   20c20:	str	r2, [r4, #4]
   20c24:	str	r2, [r4, #8]
   20c28:	pop	{r4, r5, r6, pc}
   20c2c:	str	r0, [r4, #4]
   20c30:	str	r0, [r4]
   20c34:	mov	r0, #12
   20c38:	pop	{r4, r5, r6, pc}
   20c3c:	cmp	r1, #0
   20c40:	beq	20d0c <__assert_fail@plt+0xf168>
   20c44:	ldr	r3, [r1, #4]
   20c48:	cmp	r2, #0
   20c4c:	cmpne	r3, #0
   20c50:	ble	20d04 <__assert_fail@plt+0xf160>
   20c54:	ldr	ip, [r2, #4]
   20c58:	cmp	ip, #0
   20c5c:	ble	20d24 <__assert_fail@plt+0xf180>
   20c60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20c64:	mov	r8, r0
   20c68:	add	r0, r3, ip
   20c6c:	str	r0, [r8]
   20c70:	lsl	r0, r0, #2
   20c74:	mov	r5, r2
   20c78:	mov	r7, r1
   20c7c:	bl	2d82c <__assert_fail@plt+0x1bc88>
   20c80:	cmp	r0, #0
   20c84:	str	r0, [r8, #8]
   20c88:	beq	20d80 <__assert_fail@plt+0xf1dc>
   20c8c:	mov	r3, #0
   20c90:	mov	ip, r3
   20c94:	ldr	r9, [r7, #4]
   20c98:	ldr	sl, [r5, #4]
   20c9c:	mov	r4, r0
   20ca0:	mov	lr, #1
   20ca4:	b	20ce4 <__assert_fail@plt+0xf140>
   20ca8:	cmp	r3, sl
   20cac:	bge	20d40 <__assert_fail@plt+0xf19c>
   20cb0:	ldr	r2, [r7, #8]
   20cb4:	ldr	r1, [r5, #8]
   20cb8:	ldr	r2, [r2, ip, lsl #2]
   20cbc:	ldr	r6, [r1, r3, lsl #2]
   20cc0:	cmp	r2, r6
   20cc4:	addgt	r3, r3, #1
   20cc8:	strgt	r6, [r4]
   20ccc:	bgt	20cdc <__assert_fail@plt+0xf138>
   20cd0:	add	ip, ip, #1
   20cd4:	addeq	r3, r3, #1
   20cd8:	str	r2, [r4]
   20cdc:	add	lr, lr, #1
   20ce0:	add	r4, r4, #4
   20ce4:	cmp	ip, r9
   20ce8:	sub	r6, lr, #1
   20cec:	blt	20ca8 <__assert_fail@plt+0xf104>
   20cf0:	cmp	r3, sl
   20cf4:	blt	20d60 <__assert_fail@plt+0xf1bc>
   20cf8:	str	r6, [r8, #4]
   20cfc:	mov	r0, #0
   20d00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20d04:	cmp	r3, #0
   20d08:	bgt	20d24 <__assert_fail@plt+0xf180>
   20d0c:	cmp	r2, #0
   20d10:	beq	20d28 <__assert_fail@plt+0xf184>
   20d14:	ldr	r3, [r2, #4]
   20d18:	cmp	r3, #0
   20d1c:	ble	20d28 <__assert_fail@plt+0xf184>
   20d20:	mov	r1, r2
   20d24:	b	20bc4 <__assert_fail@plt+0xf020>
   20d28:	mov	r3, #0
   20d2c:	str	r3, [r0]
   20d30:	str	r3, [r0, #4]
   20d34:	str	r3, [r0, #8]
   20d38:	mov	r0, r3
   20d3c:	bx	lr
   20d40:	sub	r9, r9, ip
   20d44:	ldr	r1, [r7, #8]
   20d48:	add	r0, r0, r6, lsl #2
   20d4c:	add	r1, r1, ip, lsl #2
   20d50:	lsl	r2, r9, #2
   20d54:	add	r6, r6, r9
   20d58:	bl	11784 <memcpy@plt>
   20d5c:	b	20cf8 <__assert_fail@plt+0xf154>
   20d60:	sub	sl, sl, r3
   20d64:	ldr	r1, [r5, #8]
   20d68:	add	r0, r0, r6, lsl #2
   20d6c:	add	r1, r1, r3, lsl #2
   20d70:	lsl	r2, sl, #2
   20d74:	bl	11784 <memcpy@plt>
   20d78:	add	r6, r6, sl
   20d7c:	b	20cf8 <__assert_fail@plt+0xf154>
   20d80:	mov	r0, #12
   20d84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d8c:	mov	ip, #0
   20d90:	ldr	r4, [r2, #4]
   20d94:	sub	sp, sp, #36	; 0x24
   20d98:	cmp	r4, ip
   20d9c:	str	ip, [r0]
   20da0:	beq	20e50 <__assert_fail@plt+0xf2ac>
   20da4:	add	r7, r3, r4
   20da8:	ble	20dc4 <__assert_fail@plt+0xf220>
   20dac:	ldr	ip, [r2, #8]
   20db0:	add	r4, ip, r4, lsl #2
   20db4:	ldr	lr, [ip], #4
   20db8:	cmp	r4, ip
   20dbc:	add	r7, r7, lr
   20dc0:	bne	20db4 <__assert_fail@plt+0xf210>
   20dc4:	mov	fp, r3
   20dc8:	ldr	r3, [r1, #68]	; 0x44
   20dcc:	mov	r8, r2
   20dd0:	and	r3, r3, r7
   20dd4:	ldr	r2, [r1, #32]
   20dd8:	add	r3, r3, r3, lsl #1
   20ddc:	mov	r9, r1
   20de0:	lsl	r3, r3, #2
   20de4:	str	r0, [sp, #24]
   20de8:	ldr	sl, [r2, r3]
   20dec:	add	r1, r2, r3
   20df0:	cmp	sl, #0
   20df4:	ble	20e5c <__assert_fail@plt+0xf2b8>
   20df8:	ldr	r6, [r1, #8]
   20dfc:	mov	r5, #0
   20e00:	sub	r6, r6, #4
   20e04:	b	20e10 <__assert_fail@plt+0xf26c>
   20e08:	cmp	r5, sl
   20e0c:	beq	20e5c <__assert_fail@plt+0xf2b8>
   20e10:	ldr	r4, [r6, #4]!
   20e14:	add	r5, r5, #1
   20e18:	ldr	r3, [r4]
   20e1c:	cmp	r3, r7
   20e20:	bne	20e08 <__assert_fail@plt+0xf264>
   20e24:	ldrb	r3, [r4, #52]	; 0x34
   20e28:	and	r3, r3, #15
   20e2c:	cmp	fp, r3
   20e30:	bne	20e08 <__assert_fail@plt+0xf264>
   20e34:	ldr	r3, [r4, #40]	; 0x28
   20e38:	mov	r1, r8
   20e3c:	subs	r0, r3, #0
   20e40:	beq	20e08 <__assert_fail@plt+0xf264>
   20e44:	bl	20044 <__assert_fail@plt+0xe4a0>
   20e48:	cmp	r0, #0
   20e4c:	beq	20e08 <__assert_fail@plt+0xf264>
   20e50:	mov	r0, r4
   20e54:	add	sp, sp, #36	; 0x24
   20e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e5c:	mov	r1, #1
   20e60:	mov	r0, #56	; 0x38
   20e64:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   20e68:	subs	r4, r0, #0
   20e6c:	beq	2102c <__assert_fail@plt+0xf488>
   20e70:	add	r3, r4, #4
   20e74:	mov	r0, r3
   20e78:	mov	r1, r8
   20e7c:	str	r3, [sp, #4]
   20e80:	bl	20bc4 <__assert_fail@plt+0xf020>
   20e84:	ldr	r3, [sp, #4]
   20e88:	subs	sl, r0, #0
   20e8c:	bne	210a4 <__assert_fail@plt+0xf500>
   20e90:	ldrb	r1, [r4, #52]	; 0x34
   20e94:	ldr	ip, [r8, #4]
   20e98:	and	r2, fp, #15
   20e9c:	bic	r1, r1, #15
   20ea0:	orr	r2, r2, r1
   20ea4:	cmp	ip, #0
   20ea8:	str	r3, [r4, #40]	; 0x28
   20eac:	strb	r2, [r4, #52]	; 0x34
   20eb0:	ble	2100c <__assert_fail@plt+0xf468>
   20eb4:	add	r2, r4, #12
   20eb8:	str	r2, [sp, #12]
   20ebc:	add	r2, r4, #8
   20ec0:	str	r2, [sp, #16]
   20ec4:	and	r2, fp, #4
   20ec8:	str	r2, [sp, #8]
   20ecc:	and	r2, fp, #2
   20ed0:	and	fp, fp, #1
   20ed4:	str	r7, [sp, #20]
   20ed8:	ldr	r6, [pc, #464]	; 210b0 <__assert_fail@plt+0xf50c>
   20edc:	mov	r7, fp
   20ee0:	mov	r5, sl
   20ee4:	str	r2, [sp, #4]
   20ee8:	mov	fp, r3
   20eec:	b	20f38 <__assert_fail@plt+0xf394>
   20ef0:	cmp	r7, #0
   20ef4:	beq	20fe0 <__assert_fail@plt+0xf43c>
   20ef8:	tst	r2, #2
   20efc:	bne	20fe0 <__assert_fail@plt+0xf43c>
   20f00:	tst	r2, #16
   20f04:	beq	20f14 <__assert_fail@plt+0xf370>
   20f08:	ldr	r3, [sp, #4]
   20f0c:	cmp	r3, #0
   20f10:	beq	20fe0 <__assert_fail@plt+0xf43c>
   20f14:	tst	r2, #64	; 0x40
   20f18:	beq	20f28 <__assert_fail@plt+0xf384>
   20f1c:	ldr	r3, [sp, #8]
   20f20:	cmp	r3, #0
   20f24:	beq	20fe0 <__assert_fail@plt+0xf43c>
   20f28:	ldr	ip, [r8, #4]
   20f2c:	add	r5, r5, #1
   20f30:	cmp	r5, ip
   20f34:	bge	21008 <__assert_fail@plt+0xf464>
   20f38:	ldr	r2, [r8, #8]
   20f3c:	ldr	r1, [r9]
   20f40:	ldr	r2, [r2, r5, lsl #2]
   20f44:	add	r1, r1, r2, lsl #3
   20f48:	ldr	r2, [r1, #4]
   20f4c:	ldrb	r0, [r1, #4]
   20f50:	ands	r2, r6, r2, lsr #8
   20f54:	moveq	lr, #1
   20f58:	movne	lr, #0
   20f5c:	cmp	r0, #1
   20f60:	movne	lr, #0
   20f64:	andeq	lr, lr, #1
   20f68:	cmp	lr, #0
   20f6c:	bne	20f2c <__assert_fail@plt+0xf388>
   20f70:	ldrb	r1, [r1, #6]
   20f74:	ldrb	lr, [r4, #52]	; 0x34
   20f78:	cmp	r0, #2
   20f7c:	lsr	r1, r1, #4
   20f80:	orr	r1, r1, lr, lsr #5
   20f84:	and	r1, r1, #1
   20f88:	bic	lr, lr, #32
   20f8c:	orr	r1, lr, r1, lsl #5
   20f90:	strb	r1, [r4, #52]	; 0x34
   20f94:	uxtbeq	r1, r1
   20f98:	orreq	r1, r1, #16
   20f9c:	strbeq	r1, [r4, #52]	; 0x34
   20fa0:	beq	20fb4 <__assert_fail@plt+0xf410>
   20fa4:	cmp	r0, #4
   20fa8:	ldrbeq	r1, [r4, #52]	; 0x34
   20fac:	orreq	r1, r1, #64	; 0x40
   20fb0:	strbeq	r1, [r4, #52]	; 0x34
   20fb4:	cmp	r2, #0
   20fb8:	beq	20f2c <__assert_fail@plt+0xf388>
   20fbc:	ldr	r1, [r4, #40]	; 0x28
   20fc0:	cmp	fp, r1
   20fc4:	beq	21060 <__assert_fail@plt+0xf4bc>
   20fc8:	tst	r2, #1
   20fcc:	bne	20ef0 <__assert_fail@plt+0xf34c>
   20fd0:	tst	r2, #2
   20fd4:	beq	20f00 <__assert_fail@plt+0xf35c>
   20fd8:	cmp	r7, #0
   20fdc:	beq	20f00 <__assert_fail@plt+0xf35c>
   20fe0:	subs	r2, r5, sl
   20fe4:	bmi	20ff4 <__assert_fail@plt+0xf450>
   20fe8:	ldr	r1, [r4, #8]
   20fec:	cmp	r2, r1
   20ff0:	blt	21048 <__assert_fail@plt+0xf4a4>
   20ff4:	ldr	ip, [r8, #4]
   20ff8:	add	r5, r5, #1
   20ffc:	cmp	r5, ip
   21000:	add	sl, sl, #1
   21004:	blt	20f38 <__assert_fail@plt+0xf394>
   21008:	ldr	r7, [sp, #20]
   2100c:	mov	r2, r7
   21010:	mov	r0, r9
   21014:	mov	r1, r4
   21018:	bl	1ebbc <__assert_fail@plt+0xd018>
   2101c:	cmp	r0, #0
   21020:	beq	20e50 <__assert_fail@plt+0xf2ac>
   21024:	mov	r0, r4
   21028:	bl	1f820 <__assert_fail@plt+0xdc7c>
   2102c:	ldr	r2, [sp, #24]
   21030:	mov	r3, #12
   21034:	mov	r4, #0
   21038:	mov	r0, r4
   2103c:	str	r3, [r2]
   21040:	add	sp, sp, #36	; 0x24
   21044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21048:	sub	r1, r1, #1
   2104c:	str	r1, [r4, #8]
   21050:	ldr	r0, [sp, #16]
   21054:	ldr	r1, [sp, #12]
   21058:	bl	20248 <__assert_fail@plt+0xe6a4>
   2105c:	b	20ff4 <__assert_fail@plt+0xf450>
   21060:	mov	r0, #12
   21064:	str	r2, [sp, #28]
   21068:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2106c:	ldr	r2, [sp, #28]
   21070:	subs	r1, r0, #0
   21074:	beq	21024 <__assert_fail@plt+0xf480>
   21078:	str	r1, [r4, #40]	; 0x28
   2107c:	mov	r1, r8
   21080:	str	r2, [sp, #28]
   21084:	bl	20bc4 <__assert_fail@plt+0xf020>
   21088:	ldr	r2, [sp, #28]
   2108c:	subs	sl, r0, #0
   21090:	bne	21024 <__assert_fail@plt+0xf480>
   21094:	ldrb	r1, [r4, #52]	; 0x34
   21098:	orr	r1, r1, #128	; 0x80
   2109c:	strb	r1, [r4, #52]	; 0x34
   210a0:	b	20fc8 <__assert_fail@plt+0xf424>
   210a4:	mov	r0, r4
   210a8:	bl	17274 <__assert_fail@plt+0x56d0>
   210ac:	b	2102c <__assert_fail@plt+0xf488>
   210b0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   210b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210b8:	mov	r3, #0
   210bc:	ldr	r6, [r2, #4]
   210c0:	str	r3, [r0]
   210c4:	cmp	r6, r3
   210c8:	beq	212a0 <__assert_fail@plt+0xf6fc>
   210cc:	ble	210e8 <__assert_fail@plt+0xf544>
   210d0:	ldr	r3, [r2, #8]
   210d4:	add	lr, r3, r6, lsl #2
   210d8:	ldr	ip, [r3], #4
   210dc:	cmp	lr, r3
   210e0:	add	r6, r6, ip
   210e4:	bne	210d8 <__assert_fail@plt+0xf534>
   210e8:	ldr	r3, [r1, #68]	; 0x44
   210ec:	mov	sl, r2
   210f0:	and	r3, r3, r6
   210f4:	ldr	r2, [r1, #32]
   210f8:	add	r3, r3, r3, lsl #1
   210fc:	mov	r7, r1
   21100:	lsl	r3, r3, #2
   21104:	mov	r8, r0
   21108:	ldr	fp, [r2, r3]
   2110c:	add	r1, r2, r3
   21110:	cmp	fp, #0
   21114:	ble	21160 <__assert_fail@plt+0xf5bc>
   21118:	ldr	r9, [r1, #8]
   2111c:	mov	r5, #0
   21120:	sub	r9, r9, #4
   21124:	b	21130 <__assert_fail@plt+0xf58c>
   21128:	cmp	r5, fp
   2112c:	beq	21160 <__assert_fail@plt+0xf5bc>
   21130:	ldr	r4, [r9, #4]!
   21134:	add	r5, r5, #1
   21138:	ldr	r3, [r4]
   2113c:	cmp	r3, r6
   21140:	bne	21128 <__assert_fail@plt+0xf584>
   21144:	mov	r1, sl
   21148:	add	r0, r4, #4
   2114c:	bl	20044 <__assert_fail@plt+0xe4a0>
   21150:	cmp	r0, #0
   21154:	beq	21128 <__assert_fail@plt+0xf584>
   21158:	mov	r0, r4
   2115c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21160:	mov	r1, #1
   21164:	mov	r0, #56	; 0x38
   21168:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   2116c:	subs	r4, r0, #0
   21170:	beq	2127c <__assert_fail@plt+0xf6d8>
   21174:	add	r5, r4, #4
   21178:	mov	r0, r5
   2117c:	mov	r1, sl
   21180:	bl	20bc4 <__assert_fail@plt+0xf020>
   21184:	cmp	r0, #0
   21188:	bne	212ac <__assert_fail@plt+0xf708>
   2118c:	ldr	lr, [sl, #4]
   21190:	str	r5, [r4, #40]	; 0x28
   21194:	cmp	lr, #0
   21198:	ble	2125c <__assert_fail@plt+0xf6b8>
   2119c:	ldr	ip, [sl, #8]
   211a0:	ldr	r5, [r7]
   211a4:	ldr	r9, [pc, #268]	; 212b8 <__assert_fail@plt+0xf714>
   211a8:	add	lr, ip, lr, lsl #2
   211ac:	b	21208 <__assert_fail@plt+0xf664>
   211b0:	ldrb	r3, [r2, #6]
   211b4:	ldrb	r1, [r4, #52]	; 0x34
   211b8:	cmp	r0, #2
   211bc:	lsr	r3, r3, #4
   211c0:	orr	r3, r3, r1, lsr #5
   211c4:	and	r3, r3, #1
   211c8:	bic	r1, r1, #32
   211cc:	orr	r3, r1, r3, lsl #5
   211d0:	strb	r3, [r4, #52]	; 0x34
   211d4:	uxtbeq	r3, r3
   211d8:	orreq	r3, r3, #16
   211dc:	strbeq	r3, [r4, #52]	; 0x34
   211e0:	beq	21200 <__assert_fail@plt+0xf65c>
   211e4:	cmp	r0, #4
   211e8:	beq	21290 <__assert_fail@plt+0xf6ec>
   211ec:	cmp	r0, #12
   211f0:	beq	21248 <__assert_fail@plt+0xf6a4>
   211f4:	ldr	r3, [r2, #4]
   211f8:	tst	r3, r9
   211fc:	bne	21248 <__assert_fail@plt+0xf6a4>
   21200:	cmp	lr, ip
   21204:	beq	2125c <__assert_fail@plt+0xf6b8>
   21208:	ldr	r2, [ip], #4
   2120c:	add	r2, r5, r2, lsl #3
   21210:	ldrb	r0, [r2, #4]
   21214:	cmp	r0, #1
   21218:	bne	211b0 <__assert_fail@plt+0xf60c>
   2121c:	ldr	r3, [r2, #4]
   21220:	tst	r3, r9
   21224:	beq	21200 <__assert_fail@plt+0xf65c>
   21228:	ldrb	r3, [r2, #6]
   2122c:	ldrb	r2, [r4, #52]	; 0x34
   21230:	lsr	r3, r3, #4
   21234:	orr	r3, r3, r2, lsr #5
   21238:	and	r3, r3, #1
   2123c:	bic	r2, r2, #32
   21240:	orr	r3, r2, r3, lsl #5
   21244:	strb	r3, [r4, #52]	; 0x34
   21248:	ldrb	r3, [r4, #52]	; 0x34
   2124c:	cmp	lr, ip
   21250:	orr	r3, r3, #128	; 0x80
   21254:	strb	r3, [r4, #52]	; 0x34
   21258:	bne	21208 <__assert_fail@plt+0xf664>
   2125c:	mov	r2, r6
   21260:	mov	r0, r7
   21264:	mov	r1, r4
   21268:	bl	1ebbc <__assert_fail@plt+0xd018>
   2126c:	cmp	r0, #0
   21270:	beq	21158 <__assert_fail@plt+0xf5b4>
   21274:	mov	r0, r4
   21278:	bl	1f820 <__assert_fail@plt+0xdc7c>
   2127c:	mov	r4, #0
   21280:	mov	r3, #12
   21284:	str	r3, [r8]
   21288:	mov	r0, r4
   2128c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21290:	ldrb	r3, [r4, #52]	; 0x34
   21294:	orr	r3, r3, #64	; 0x40
   21298:	strb	r3, [r4, #52]	; 0x34
   2129c:	b	21200 <__assert_fail@plt+0xf65c>
   212a0:	mov	r4, r6
   212a4:	mov	r0, r4
   212a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212ac:	mov	r0, r4
   212b0:	bl	17274 <__assert_fail@plt+0x56d0>
   212b4:	b	2127c <__assert_fail@plt+0xf6d8>
   212b8:	andeq	pc, r3, r0, lsl #30
   212bc:	push	{r4, r5, r6, r7, r8, lr}
   212c0:	subs	r7, r3, #0
   212c4:	sub	sp, sp, #16
   212c8:	movgt	r8, r0
   212cc:	movgt	r4, r1
   212d0:	movgt	r5, r2
   212d4:	movgt	r6, #0
   212d8:	bgt	21310 <__assert_fail@plt+0xf76c>
   212dc:	b	21364 <__assert_fail@plt+0xf7c0>
   212e0:	bl	210b4 <__assert_fail@plt+0xf510>
   212e4:	str	r0, [r4]
   212e8:	ldr	r0, [sp, #12]
   212ec:	bl	17274 <__assert_fail@plt+0x56d0>
   212f0:	ldr	ip, [sp]
   212f4:	cmp	ip, #0
   212f8:	bne	21358 <__assert_fail@plt+0xf7b4>
   212fc:	add	r6, r6, #1
   21300:	cmp	r7, r6
   21304:	add	r4, r4, #4
   21308:	add	r5, r5, #4
   2130c:	beq	21364 <__assert_fail@plt+0xf7c0>
   21310:	ldr	r2, [r4]
   21314:	ldr	r3, [r5]
   21318:	cmp	r2, #0
   2131c:	add	r0, sp, #4
   21320:	add	r1, r2, #4
   21324:	streq	r3, [r4]
   21328:	beq	212fc <__assert_fail@plt+0xf758>
   2132c:	cmp	r3, #0
   21330:	add	r2, r3, #4
   21334:	beq	212fc <__assert_fail@plt+0xf758>
   21338:	bl	20c3c <__assert_fail@plt+0xf098>
   2133c:	add	r2, sp, #4
   21340:	mov	r1, r8
   21344:	mov	ip, r0
   21348:	cmp	ip, #0
   2134c:	mov	r0, sp
   21350:	str	ip, [sp]
   21354:	beq	212e0 <__assert_fail@plt+0xf73c>
   21358:	mov	r0, ip
   2135c:	add	sp, sp, #16
   21360:	pop	{r4, r5, r6, r7, r8, pc}
   21364:	mov	ip, #0
   21368:	mov	r0, ip
   2136c:	add	sp, sp, #16
   21370:	pop	{r4, r5, r6, r7, r8, pc}
   21374:	ldrb	r2, [r1, #24]
   21378:	cmp	r2, #16
   2137c:	beq	213ec <__assert_fail@plt+0xf848>
   21380:	push	{r4, r5, r6, lr}
   21384:	add	r3, r1, #20
   21388:	mov	r4, r1
   2138c:	mov	r5, r0
   21390:	str	r1, [r4, #12]
   21394:	ldm	r3, {r1, r2}
   21398:	bl	1f5dc <__assert_fail@plt+0xda38>
   2139c:	cmn	r0, #1
   213a0:	str	r0, [r4, #28]
   213a4:	beq	21408 <__assert_fail@plt+0xf864>
   213a8:	ldrb	r3, [r4, #24]
   213ac:	cmp	r3, #12
   213b0:	beq	213bc <__assert_fail@plt+0xf818>
   213b4:	mov	r0, #0
   213b8:	pop	{r4, r5, r6, pc}
   213bc:	ldr	r1, [r5]
   213c0:	ldr	r2, [r4, #20]
   213c4:	add	r1, r1, r0, lsl #3
   213c8:	mov	r0, #0
   213cc:	ldr	r3, [r1, #4]
   213d0:	lsl	r2, r2, #22
   213d4:	bic	r3, r3, #261120	; 0x3fc00
   213d8:	lsr	r2, r2, #22
   213dc:	bic	r3, r3, #768	; 0x300
   213e0:	orr	r3, r3, r2, lsl #8
   213e4:	str	r3, [r1, #4]
   213e8:	pop	{r4, r5, r6, pc}
   213ec:	ldr	r3, [r1, #4]
   213f0:	mov	r0, #0
   213f4:	ldr	r2, [r3, #12]
   213f8:	ldr	r3, [r3, #28]
   213fc:	str	r2, [r1, #12]
   21400:	str	r3, [r1, #28]
   21404:	bx	lr
   21408:	mov	r0, #12
   2140c:	pop	{r4, r5, r6, pc}
   21410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21414:	mov	r9, r1
   21418:	ldr	r7, [r0, #28]
   2141c:	add	r1, r1, r1, lsl #1
   21420:	sub	sp, sp, #36	; 0x24
   21424:	add	r7, r7, r1, lsl #2
   21428:	mov	r5, #0
   2142c:	str	r5, [sp, #24]
   21430:	str	r5, [sp, #20]
   21434:	str	r5, [sp, #28]
   21438:	ldr	r6, [r7, #4]
   2143c:	str	r3, [sp, #12]
   21440:	cmp	r6, r5
   21444:	ble	2162c <__assert_fail@plt+0xfa88>
   21448:	add	r3, r7, #8
   2144c:	str	r3, [sp]
   21450:	add	r3, r2, #8
   21454:	mov	r8, r0
   21458:	str	r3, [sp, #8]
   2145c:	str	r2, [sp, #4]
   21460:	b	214ac <__assert_fail@plt+0xf908>
   21464:	ldr	r3, [sp, #4]
   21468:	mov	r2, fp
   2146c:	ldr	r1, [sp, #8]
   21470:	ldr	r0, [r3, #4]
   21474:	bl	200b8 <__assert_fail@plt+0xe514>
   21478:	cmp	r0, #0
   2147c:	beq	21508 <__assert_fail@plt+0xf964>
   21480:	ldr	r2, [r8, #28]
   21484:	ldr	r1, [sp, #12]
   21488:	add	r2, r2, r4
   2148c:	add	r0, sp, #20
   21490:	bl	20598 <__assert_fail@plt+0xe9f4>
   21494:	cmp	r0, #0
   21498:	bne	21614 <__assert_fail@plt+0xfa70>
   2149c:	ldr	r6, [r7, #4]
   214a0:	add	r5, r5, #1
   214a4:	cmp	r6, r5
   214a8:	ble	21568 <__assert_fail@plt+0xf9c4>
   214ac:	ldr	r3, [r7, #8]
   214b0:	ldr	r4, [r3, r5, lsl #2]
   214b4:	cmp	r9, r4
   214b8:	beq	214a0 <__assert_fail@plt+0xf8fc>
   214bc:	ldr	r3, [r8]
   214c0:	add	r3, r3, r4, lsl #3
   214c4:	ldrb	r3, [r3, #4]
   214c8:	tst	r3, #8
   214cc:	beq	214a0 <__assert_fail@plt+0xf8fc>
   214d0:	add	r4, r4, r4, lsl #1
   214d4:	ldr	r3, [r8, #20]
   214d8:	lsl	r4, r4, #2
   214dc:	add	r3, r3, r4
   214e0:	ldr	r1, [sp]
   214e4:	ldmib	r3, {r3, sl}
   214e8:	mov	r0, r6
   214ec:	ldr	fp, [sl]
   214f0:	cmp	r3, #1
   214f4:	mov	r2, fp
   214f8:	ble	2154c <__assert_fail@plt+0xf9a8>
   214fc:	bl	200b8 <__assert_fail@plt+0xe514>
   21500:	cmp	r0, #0
   21504:	beq	21464 <__assert_fail@plt+0xf8c0>
   21508:	ldr	sl, [sl, #4]
   2150c:	cmp	sl, #0
   21510:	ble	214a0 <__assert_fail@plt+0xf8fc>
   21514:	mov	r2, sl
   21518:	ldr	r1, [sp]
   2151c:	mov	r0, r6
   21520:	bl	200b8 <__assert_fail@plt+0xe514>
   21524:	cmp	r0, #0
   21528:	bne	214a0 <__assert_fail@plt+0xf8fc>
   2152c:	mov	r2, sl
   21530:	ldr	r3, [sp, #4]
   21534:	ldr	r1, [sp, #8]
   21538:	ldr	r0, [r3, #4]
   2153c:	bl	200b8 <__assert_fail@plt+0xe514>
   21540:	cmp	r0, #0
   21544:	beq	214a0 <__assert_fail@plt+0xf8fc>
   21548:	b	21480 <__assert_fail@plt+0xf8dc>
   2154c:	bl	200b8 <__assert_fail@plt+0xe514>
   21550:	cmp	r0, #0
   21554:	moveq	r2, fp
   21558:	beq	21530 <__assert_fail@plt+0xf98c>
   2155c:	add	r5, r5, #1
   21560:	cmp	r6, r5
   21564:	bgt	214ac <__assert_fail@plt+0xf908>
   21568:	cmp	r6, #0
   2156c:	ldr	fp, [sp, #4]
   21570:	ble	215fc <__assert_fail@plt+0xfa58>
   21574:	mov	r4, #0
   21578:	add	r8, fp, #8
   2157c:	add	r9, fp, #4
   21580:	b	2158c <__assert_fail@plt+0xf9e8>
   21584:	cmp	r6, r4
   21588:	ble	215fc <__assert_fail@plt+0xfa58>
   2158c:	ldr	r3, [r7, #8]
   21590:	add	r1, sp, #28
   21594:	ldr	r0, [sp, #24]
   21598:	ldr	r5, [r3, r4, lsl #2]
   2159c:	add	r4, r4, #1
   215a0:	mov	r2, r5
   215a4:	bl	200b8 <__assert_fail@plt+0xe514>
   215a8:	mov	r2, r5
   215ac:	mov	r1, r8
   215b0:	cmp	r0, #0
   215b4:	bne	21584 <__assert_fail@plt+0xf9e0>
   215b8:	ldr	r5, [fp, #4]
   215bc:	mov	r0, r5
   215c0:	bl	200b8 <__assert_fail@plt+0xe514>
   215c4:	sub	r2, r0, #1
   215c8:	cmp	r2, r5
   215cc:	movlt	r3, #0
   215d0:	movge	r3, #1
   215d4:	orrs	r3, r3, r2, lsr #31
   215d8:	bne	21584 <__assert_fail@plt+0xf9e0>
   215dc:	sub	r5, r5, #1
   215e0:	str	r5, [fp, #4]
   215e4:	mov	r1, r8
   215e8:	mov	r0, r9
   215ec:	bl	20248 <__assert_fail@plt+0xe6a4>
   215f0:	ldr	r6, [r7, #4]
   215f4:	cmp	r6, r4
   215f8:	bgt	2158c <__assert_fail@plt+0xf9e8>
   215fc:	ldr	r0, [sp, #28]
   21600:	bl	17274 <__assert_fail@plt+0x56d0>
   21604:	mov	r4, #0
   21608:	mov	r0, r4
   2160c:	add	sp, sp, #36	; 0x24
   21610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21614:	mov	r4, r0
   21618:	ldr	r0, [sp, #28]
   2161c:	bl	17274 <__assert_fail@plt+0x56d0>
   21620:	mov	r0, r4
   21624:	add	sp, sp, #36	; 0x24
   21628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2162c:	mov	r0, r5
   21630:	b	21600 <__assert_fail@plt+0xfa5c>
   21634:	push	{r4, r5, r6, r7, r8, lr}
   21638:	subs	r6, r1, #0
   2163c:	beq	21730 <__assert_fail@plt+0xfb8c>
   21640:	ldr	r2, [r6, #4]
   21644:	cmp	r2, #0
   21648:	mov	ip, r2
   2164c:	beq	21730 <__assert_fail@plt+0xfb8c>
   21650:	ldm	r0, {r1, r3}
   21654:	mov	r5, r0
   21658:	add	r4, r3, r2, lsl #1
   2165c:	cmp	r1, r4
   21660:	blt	21758 <__assert_fail@plt+0xfbb4>
   21664:	cmp	r3, #0
   21668:	beq	21798 <__assert_fail@plt+0xfbf4>
   2166c:	sub	r2, r2, #1
   21670:	sub	r3, r3, #1
   21674:	mvn	r7, r2
   21678:	mvn	lr, r3
   2167c:	tst	r7, lr
   21680:	bpl	216bc <__assert_fail@plt+0xfb18>
   21684:	ldr	r1, [r5, #8]
   21688:	ldr	r0, [r6, #8]
   2168c:	ldr	ip, [r1, r3, lsl #2]
   21690:	ldr	r0, [r0, r2, lsl #2]
   21694:	cmp	ip, r0
   21698:	beq	2166c <__assert_fail@plt+0xfac8>
   2169c:	sublt	r4, r4, #1
   216a0:	sublt	r2, r2, #1
   216a4:	subge	r3, r3, #1
   216a8:	mvnlt	r7, r2
   216ac:	mvnge	lr, r3
   216b0:	strlt	r0, [r1, r4, lsl #2]
   216b4:	tst	r7, lr
   216b8:	bmi	21684 <__assert_fail@plt+0xfae0>
   216bc:	cmp	r2, #0
   216c0:	blt	216e0 <__assert_fail@plt+0xfb3c>
   216c4:	add	r2, r2, #1
   216c8:	sub	r4, r4, r2
   216cc:	ldr	r0, [r5, #8]
   216d0:	lsl	r2, r2, #2
   216d4:	add	r0, r0, r4, lsl #2
   216d8:	ldr	r1, [r6, #8]
   216dc:	bl	11784 <memcpy@plt>
   216e0:	ldr	r1, [r6, #4]
   216e4:	ldr	ip, [r5, #4]
   216e8:	add	r1, ip, r1, lsl #1
   216ec:	subs	r2, r1, r4
   216f0:	sub	r1, r1, #1
   216f4:	beq	21730 <__assert_fail@plt+0xfb8c>
   216f8:	ldr	r0, [r5, #8]
   216fc:	sub	r3, ip, #1
   21700:	add	ip, ip, r2
   21704:	str	ip, [r5, #4]
   21708:	ldr	lr, [r0, r1, lsl #2]
   2170c:	ldr	ip, [r0, r3, lsl #2]
   21710:	add	r6, r3, r2
   21714:	cmp	lr, ip
   21718:	mov	r5, r6
   2171c:	ble	21738 <__assert_fail@plt+0xfb94>
   21720:	subs	r2, r2, #1
   21724:	sub	r1, r1, #1
   21728:	str	lr, [r0, r6, lsl #2]
   2172c:	bne	21708 <__assert_fail@plt+0xfb64>
   21730:	mov	r0, #0
   21734:	pop	{r4, r5, r6, r7, r8, pc}
   21738:	subs	r3, r3, #1
   2173c:	str	ip, [r0, r6, lsl #2]
   21740:	bpl	21708 <__assert_fail@plt+0xfb64>
   21744:	lsl	r2, r2, #2
   21748:	add	r1, r0, r4, lsl #2
   2174c:	bl	11784 <memcpy@plt>
   21750:	mov	r0, #0
   21754:	pop	{r4, r5, r6, r7, r8, pc}
   21758:	add	r2, r2, r1
   2175c:	ldr	r0, [r0, #8]
   21760:	lsl	r1, r2, #3
   21764:	lsl	r4, r2, #1
   21768:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   2176c:	cmp	r0, #0
   21770:	beq	217b4 <__assert_fail@plt+0xfc10>
   21774:	ldr	r3, [r5, #4]
   21778:	str	r0, [r5, #8]
   2177c:	cmp	r3, #0
   21780:	str	r4, [r5]
   21784:	ldreq	ip, [r6, #4]
   21788:	beq	2179c <__assert_fail@plt+0xfbf8>
   2178c:	ldr	r2, [r6, #4]
   21790:	add	r4, r3, r2, lsl #1
   21794:	b	2166c <__assert_fail@plt+0xfac8>
   21798:	ldr	r0, [r0, #8]
   2179c:	str	ip, [r5, #4]
   217a0:	ldr	r2, [r6, #4]
   217a4:	ldr	r1, [r6, #8]
   217a8:	lsl	r2, r2, #2
   217ac:	bl	11784 <memcpy@plt>
   217b0:	b	21730 <__assert_fail@plt+0xfb8c>
   217b4:	mov	r0, #12
   217b8:	pop	{r4, r5, r6, r7, r8, pc}
   217bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217c0:	add	r7, r2, r2, lsl #1
   217c4:	mov	r4, r2
   217c8:	ldr	r2, [r1, #20]
   217cc:	lsl	r7, r7, #2
   217d0:	add	r2, r2, r7
   217d4:	mov	r6, r1
   217d8:	ldr	r1, [r2, #4]
   217dc:	sub	sp, sp, #44	; 0x2c
   217e0:	add	r1, r1, #1
   217e4:	mov	r2, #0
   217e8:	mov	sl, r0
   217ec:	lsl	r0, r1, #2
   217f0:	str	r3, [sp, #12]
   217f4:	str	r1, [sp, #16]
   217f8:	str	r2, [sp, #20]
   217fc:	bl	2d82c <__assert_fail@plt+0x1bc88>
   21800:	cmp	r0, #0
   21804:	str	r0, [sp, #24]
   21808:	beq	219e4 <__assert_fail@plt+0xfe40>
   2180c:	ldr	r8, [r6]
   21810:	ldr	r3, [sp, #20]
   21814:	lsl	r5, r4, #3
   21818:	add	lr, r8, r5
   2181c:	str	r4, [r0, r3, lsl #2]
   21820:	ldr	r1, [r6, #24]
   21824:	ldr	r0, [lr, #4]
   21828:	ldr	r2, [pc, #452]	; 219f4 <__assert_fail@plt+0xfe50>
   2182c:	add	ip, r1, r7
   21830:	and	r2, r2, r0
   21834:	add	r3, r3, #1
   21838:	cmp	r2, #0
   2183c:	mvn	r2, #0
   21840:	str	r3, [sp, #20]
   21844:	str	r2, [ip, #4]
   21848:	beq	21878 <__assert_fail@plt+0xfcd4>
   2184c:	ldr	r3, [r6, #20]
   21850:	add	r3, r3, r7
   21854:	ldr	r2, [r3, #4]
   21858:	cmp	r2, #0
   2185c:	beq	21948 <__assert_fail@plt+0xfda4>
   21860:	ldr	r3, [r3, #8]
   21864:	ldr	r3, [r3]
   21868:	add	r8, r8, r3, lsl #3
   2186c:	ldrb	r3, [r8, #6]
   21870:	tst	r3, #4
   21874:	beq	219ac <__assert_fail@plt+0xfe08>
   21878:	ldrb	r3, [lr, #4]
   2187c:	tst	r3, #8
   21880:	beq	21944 <__assert_fail@plt+0xfda0>
   21884:	ldr	ip, [r6, #20]
   21888:	add	r3, ip, r7
   2188c:	ldr	r2, [r3, #4]
   21890:	cmp	r2, #0
   21894:	ble	21944 <__assert_fail@plt+0xfda0>
   21898:	mov	r9, #0
   2189c:	mov	r5, r9
   218a0:	mov	fp, #1
   218a4:	add	r8, sp, #28
   218a8:	b	218fc <__assert_fail@plt+0xfd58>
   218ac:	cmp	r0, #0
   218b0:	beq	2196c <__assert_fail@plt+0xfdc8>
   218b4:	ldm	r3, {r0, r1, r2}
   218b8:	stm	r8, {r0, r1, r2}
   218bc:	mov	r1, r8
   218c0:	add	r0, sp, #16
   218c4:	bl	21634 <__assert_fail@plt+0xfa90>
   218c8:	cmp	r0, #0
   218cc:	bne	21984 <__assert_fail@plt+0xfde0>
   218d0:	ldr	r1, [r6, #24]
   218d4:	add	r4, r1, r4
   218d8:	ldr	r3, [r4, #4]
   218dc:	cmp	r3, #0
   218e0:	beq	21994 <__assert_fail@plt+0xfdf0>
   218e4:	ldr	ip, [r6, #20]
   218e8:	add	r3, ip, r7
   218ec:	add	r5, r5, #1
   218f0:	ldr	r2, [r3, #4]
   218f4:	cmp	r2, r5
   218f8:	ble	21924 <__assert_fail@plt+0xfd80>
   218fc:	ldr	r3, [r3, #8]
   21900:	ldr	r2, [r3, r5, lsl #2]
   21904:	add	r4, r2, r2, lsl #1
   21908:	lsl	r4, r4, #2
   2190c:	add	r3, r1, r4
   21910:	ldr	r0, [r3, #4]
   21914:	cmn	r0, #1
   21918:	bne	218ac <__assert_fail@plt+0xfd08>
   2191c:	mov	r9, fp
   21920:	b	218e8 <__assert_fail@plt+0xfd44>
   21924:	ldr	r3, [sp, #12]
   21928:	eor	r3, r3, #1
   2192c:	tst	r9, r3
   21930:	addne	r7, r1, r7
   21934:	movne	r3, #0
   21938:	strne	r3, [r7, #4]
   2193c:	addne	lr, sp, #16
   21940:	bne	21954 <__assert_fail@plt+0xfdb0>
   21944:	add	ip, r1, r7
   21948:	add	lr, sp, #16
   2194c:	ldm	lr, {r0, r1, r2}
   21950:	stm	ip, {r0, r1, r2}
   21954:	mov	r3, #0
   21958:	ldm	lr, {r0, r1, r2}
   2195c:	stm	sl, {r0, r1, r2}
   21960:	mov	r0, r3
   21964:	add	sp, sp, #44	; 0x2c
   21968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2196c:	mov	r3, #0
   21970:	mov	r1, r6
   21974:	mov	r0, r8
   21978:	bl	217bc <__assert_fail@plt+0xfc18>
   2197c:	cmp	r0, #0
   21980:	beq	218bc <__assert_fail@plt+0xfd18>
   21984:	mov	r3, r0
   21988:	mov	r0, r3
   2198c:	add	sp, sp, #44	; 0x2c
   21990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21994:	ldr	r0, [sp, #36]	; 0x24
   21998:	bl	17274 <__assert_fail@plt+0x56d0>
   2199c:	mov	r9, fp
   219a0:	ldr	r1, [r6, #24]
   219a4:	ldr	ip, [r6, #20]
   219a8:	b	218e8 <__assert_fail@plt+0xfd44>
   219ac:	ldr	r2, [pc, #68]	; 219f8 <__assert_fail@plt+0xfe54>
   219b0:	mov	r3, r4
   219b4:	and	r0, r2, r0, lsr #8
   219b8:	str	r0, [sp]
   219bc:	mov	r2, r4
   219c0:	mov	r1, r4
   219c4:	mov	r0, r6
   219c8:	bl	1fc44 <__assert_fail@plt+0xe0a0>
   219cc:	subs	r3, r0, #0
   219d0:	bne	21960 <__assert_fail@plt+0xfdbc>
   219d4:	ldr	lr, [r6]
   219d8:	ldr	r1, [r6, #24]
   219dc:	add	lr, lr, r5
   219e0:	b	21878 <__assert_fail@plt+0xfcd4>
   219e4:	mov	r3, #12
   219e8:	mov	r0, r3
   219ec:	add	sp, sp, #44	; 0x2c
   219f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219f4:	andeq	pc, r3, r0, lsl #30
   219f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   219fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a00:	mov	r8, r1
   21a04:	ldr	r1, [r1, #4]
   21a08:	sub	sp, sp, #28
   21a0c:	mov	r6, #0
   21a10:	mov	r7, r0
   21a14:	lsl	r0, r1, #2
   21a18:	mov	r5, r2
   21a1c:	mov	r4, r3
   21a20:	str	r1, [sp, #12]
   21a24:	str	r6, [sp, #16]
   21a28:	bl	2d82c <__assert_fail@plt+0x1bc88>
   21a2c:	cmp	r0, r6
   21a30:	str	r0, [sp, #20]
   21a34:	beq	21b20 <__assert_fail@plt+0xff7c>
   21a38:	ldr	r3, [r8, #4]
   21a3c:	add	r9, sp, #12
   21a40:	cmp	r3, r6
   21a44:	ble	21adc <__assert_fail@plt+0xff38>
   21a48:	ldr	r3, [r8, #8]
   21a4c:	ldr	r1, [r7, #24]
   21a50:	ldr	r2, [r3, r6, lsl #2]
   21a54:	add	r3, r2, r2, lsl #1
   21a58:	add	r1, r1, r3, lsl #2
   21a5c:	ldr	fp, [r1, #4]
   21a60:	cmp	fp, #0
   21a64:	ble	21afc <__assert_fail@plt+0xff58>
   21a68:	ldr	ip, [r1, #8]
   21a6c:	ldr	sl, [r7]
   21a70:	sub	ip, ip, #4
   21a74:	mov	r3, #0
   21a78:	b	21a84 <__assert_fail@plt+0xfee0>
   21a7c:	cmp	fp, r3
   21a80:	beq	21afc <__assert_fail@plt+0xff58>
   21a84:	ldr	r0, [ip, #4]!
   21a88:	add	r3, r3, #1
   21a8c:	add	lr, sl, r0, lsl #3
   21a90:	ldrb	lr, [lr, #4]
   21a94:	cmp	r4, lr
   21a98:	bne	21a7c <__assert_fail@plt+0xfed8>
   21a9c:	ldr	lr, [sl, r0, lsl #3]
   21aa0:	cmp	r5, lr
   21aa4:	bne	21a7c <__assert_fail@plt+0xfed8>
   21aa8:	cmn	r0, #1
   21aac:	beq	21afc <__assert_fail@plt+0xff58>
   21ab0:	str	r4, [sp]
   21ab4:	mov	r3, r5
   21ab8:	mov	r1, r9
   21abc:	mov	r0, r7
   21ac0:	bl	20148 <__assert_fail@plt+0xe5a4>
   21ac4:	subs	sl, r0, #0
   21ac8:	bne	21b0c <__assert_fail@plt+0xff68>
   21acc:	ldr	r3, [r8, #4]
   21ad0:	add	r6, r6, #1
   21ad4:	cmp	r3, r6
   21ad8:	bgt	21a48 <__assert_fail@plt+0xfea4>
   21adc:	ldr	r0, [r8, #8]
   21ae0:	bl	17274 <__assert_fail@plt+0x56d0>
   21ae4:	ldm	r9, {r0, r1, r2}
   21ae8:	mov	sl, #0
   21aec:	stm	r8, {r0, r1, r2}
   21af0:	mov	r0, sl
   21af4:	add	sp, sp, #28
   21af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21afc:	mov	r0, r9
   21b00:	bl	21634 <__assert_fail@plt+0xfa90>
   21b04:	subs	sl, r0, #0
   21b08:	beq	21acc <__assert_fail@plt+0xff28>
   21b0c:	ldr	r0, [sp, #20]
   21b10:	bl	17274 <__assert_fail@plt+0x56d0>
   21b14:	mov	r0, sl
   21b18:	add	sp, sp, #28
   21b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b20:	mov	sl, #12
   21b24:	mov	r0, sl
   21b28:	add	sp, sp, #28
   21b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b34:	mov	r5, #0
   21b38:	ldr	r6, [r0, #108]	; 0x6c
   21b3c:	sub	sp, sp, #44	; 0x2c
   21b40:	mov	r4, r6
   21b44:	cmp	r5, r4
   21b48:	bge	21ba4 <__assert_fail@plt+0x10000>
   21b4c:	add	lr, r5, r4
   21b50:	ldr	r7, [r0, #116]	; 0x74
   21b54:	add	lr, lr, lr, lsr #31
   21b58:	asr	lr, lr, #1
   21b5c:	add	ip, lr, lr, lsl #1
   21b60:	add	ip, r7, ip, lsl #3
   21b64:	ldr	ip, [ip, #4]
   21b68:	cmp	r2, ip
   21b6c:	ble	21b94 <__assert_fail@plt+0xfff0>
   21b70:	b	21dc4 <__assert_fail@plt+0x10220>
   21b74:	asr	ip, ip, #1
   21b78:	mov	r8, ip
   21b7c:	add	r4, ip, ip, lsl #1
   21b80:	add	r4, r7, r4, lsl #3
   21b84:	ldr	r4, [r4, #4]
   21b88:	cmp	r2, r4
   21b8c:	bgt	21dcc <__assert_fail@plt+0x10228>
   21b90:	mov	lr, ip
   21b94:	add	ip, r5, lr
   21b98:	cmp	r5, lr
   21b9c:	add	ip, ip, ip, lsr #31
   21ba0:	blt	21b74 <__assert_fail@plt+0xffd0>
   21ba4:	cmp	r6, r5
   21ba8:	ble	21db8 <__assert_fail@plt+0x10214>
   21bac:	add	ip, r5, r5, lsl #1
   21bb0:	ldr	r4, [r0, #116]	; 0x74
   21bb4:	lsl	ip, ip, #3
   21bb8:	add	lr, r4, ip
   21bbc:	cmn	r5, #1
   21bc0:	ldr	lr, [lr, #4]
   21bc4:	movne	r5, #0
   21bc8:	moveq	r5, #1
   21bcc:	cmp	lr, r2
   21bd0:	orrne	r5, r5, #1
   21bd4:	cmp	r5, #0
   21bd8:	bne	21db8 <__assert_fail@plt+0x10214>
   21bdc:	ldr	fp, [r0, #84]	; 0x54
   21be0:	mov	r8, r1
   21be4:	mov	r9, r0
   21be8:	add	r7, r1, #8
   21bec:	str	r3, [sp, #16]
   21bf0:	add	r3, ip, #24
   21bf4:	str	r2, [sp, #8]
   21bf8:	str	r3, [sp, #12]
   21bfc:	str	r5, [sp, #20]
   21c00:	ldr	r3, [sp, #12]
   21c04:	add	r4, r4, r3
   21c08:	b	21c54 <__assert_fail@plt+0x100b0>
   21c0c:	ldr	r3, [r9, #100]	; 0x64
   21c10:	ldr	r2, [fp, #12]
   21c14:	ldr	r3, [r3, r5, lsl #2]
   21c18:	ldr	sl, [r2, sl, lsl #2]
   21c1c:	cmp	r3, #0
   21c20:	beq	21dd8 <__assert_fail@plt+0x10234>
   21c24:	add	r1, r3, #12
   21c28:	ldr	r0, [r3, #8]
   21c2c:	mov	r2, sl
   21c30:	str	r3, [sp, #4]
   21c34:	bl	200b8 <__assert_fail@plt+0xe514>
   21c38:	ldr	r3, [sp, #4]
   21c3c:	cmp	r0, #0
   21c40:	beq	21d38 <__assert_fail@plt+0x10194>
   21c44:	add	r4, r4, #24
   21c48:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   21c4c:	cmp	r3, #0
   21c50:	beq	21db8 <__assert_fail@plt+0x10214>
   21c54:	ldr	sl, [r4, #-24]	; 0xffffffe8
   21c58:	ldr	r6, [r8, #4]
   21c5c:	mov	r2, sl
   21c60:	mov	r0, r6
   21c64:	mov	r1, r7
   21c68:	bl	200b8 <__assert_fail@plt+0xe514>
   21c6c:	cmp	r0, #0
   21c70:	beq	21c44 <__assert_fail@plt+0x100a0>
   21c74:	ldr	r3, [sp, #8]
   21c78:	ldr	r5, [r4, #-12]
   21c7c:	ldr	r2, [r4, #-16]
   21c80:	add	r5, r3, r5
   21c84:	sub	r5, r5, r2
   21c88:	cmp	r3, r5
   21c8c:	bne	21c0c <__assert_fail@plt+0x10068>
   21c90:	ldr	r2, [fp, #20]
   21c94:	add	sl, sl, sl, lsl #1
   21c98:	mov	r0, r6
   21c9c:	add	sl, r2, sl, lsl #2
   21ca0:	mov	r1, r7
   21ca4:	ldr	r3, [sl, #8]
   21ca8:	ldr	r5, [r3]
   21cac:	mov	r2, r5
   21cb0:	bl	200b8 <__assert_fail@plt+0xe514>
   21cb4:	cmp	r0, #0
   21cb8:	bne	21c44 <__assert_fail@plt+0x100a0>
   21cbc:	mov	r3, #1
   21cc0:	mov	r0, #4
   21cc4:	str	r3, [sp, #28]
   21cc8:	str	r3, [sp, #32]
   21ccc:	bl	2d82c <__assert_fail@plt+0x1bc88>
   21cd0:	ldr	r3, [sp, #80]	; 0x50
   21cd4:	ldr	r2, [sp, #16]
   21cd8:	add	r1, sp, #28
   21cdc:	cmp	r0, #0
   21ce0:	strne	r5, [r0]
   21ce4:	ldrne	ip, [sp, #20]
   21ce8:	streq	r0, [sp, #32]
   21cec:	streq	r0, [sp, #28]
   21cf0:	moveq	ip, #12
   21cf4:	str	r0, [sp, #36]	; 0x24
   21cf8:	mov	r0, fp
   21cfc:	str	ip, [sp, #24]
   21d00:	bl	219fc <__assert_fail@plt+0xfe58>
   21d04:	add	r1, sp, #28
   21d08:	mov	r4, r0
   21d0c:	mov	r0, r8
   21d10:	bl	21634 <__assert_fail@plt+0xfa90>
   21d14:	mov	r5, r0
   21d18:	ldr	r0, [sp, #36]	; 0x24
   21d1c:	bl	17274 <__assert_fail@plt+0x56d0>
   21d20:	ldr	r0, [sp, #24]
   21d24:	orr	r3, r4, r5
   21d28:	orrs	r3, r3, r0
   21d2c:	bne	21e2c <__assert_fail@plt+0x10288>
   21d30:	ldr	r4, [r9, #116]	; 0x74
   21d34:	b	21c00 <__assert_fail@plt+0x1005c>
   21d38:	add	r1, r3, #4
   21d3c:	add	r0, sp, #28
   21d40:	bl	20bc4 <__assert_fail@plt+0xf020>
   21d44:	mov	r1, sl
   21d48:	str	r0, [sp, #24]
   21d4c:	add	r0, sp, #28
   21d50:	bl	1fb28 <__assert_fail@plt+0xdf84>
   21d54:	ldr	r3, [sp, #24]
   21d58:	eor	r0, r0, #1
   21d5c:	cmp	r3, #0
   21d60:	orrne	r0, r0, #1
   21d64:	tst	r0, #255	; 0xff
   21d68:	bne	21e0c <__assert_fail@plt+0x10268>
   21d6c:	add	r2, sp, #28
   21d70:	mov	r1, fp
   21d74:	add	r0, sp, #24
   21d78:	ldr	sl, [r9, #100]	; 0x64
   21d7c:	bl	210b4 <__assert_fail@plt+0xf510>
   21d80:	str	r0, [sl, r5, lsl #2]
   21d84:	ldr	r0, [sp, #36]	; 0x24
   21d88:	bl	17274 <__assert_fail@plt+0x56d0>
   21d8c:	ldr	r3, [r9, #100]	; 0x64
   21d90:	ldr	r3, [r3, r5, lsl #2]
   21d94:	cmp	r3, #0
   21d98:	bne	21c44 <__assert_fail@plt+0x100a0>
   21d9c:	ldr	r0, [sp, #24]
   21da0:	cmp	r0, #0
   21da4:	bne	21dbc <__assert_fail@plt+0x10218>
   21da8:	add	r4, r4, #24
   21dac:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   21db0:	cmp	r3, #0
   21db4:	bne	21c54 <__assert_fail@plt+0x100b0>
   21db8:	mov	r0, #0
   21dbc:	add	sp, sp, #44	; 0x2c
   21dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dc4:	mov	r8, lr
   21dc8:	mov	lr, r4
   21dcc:	add	r5, r8, #1
   21dd0:	mov	r4, lr
   21dd4:	b	21b44 <__assert_fail@plt+0xffa0>
   21dd8:	str	r3, [sp, #4]
   21ddc:	mov	r0, #4
   21de0:	mov	r3, #1
   21de4:	str	r3, [sp, #28]
   21de8:	str	r3, [sp, #32]
   21dec:	bl	2d82c <__assert_fail@plt+0x1bc88>
   21df0:	cmp	r0, #0
   21df4:	str	r0, [sp, #36]	; 0x24
   21df8:	beq	21e20 <__assert_fail@plt+0x1027c>
   21dfc:	ldr	r3, [sp, #4]
   21e00:	str	sl, [r0]
   21e04:	str	r3, [sp, #24]
   21e08:	b	21d6c <__assert_fail@plt+0x101c8>
   21e0c:	ldr	r0, [sp, #36]	; 0x24
   21e10:	bl	17274 <__assert_fail@plt+0x56d0>
   21e14:	ldr	r0, [sp, #24]
   21e18:	cmp	r0, #0
   21e1c:	bne	21dbc <__assert_fail@plt+0x10218>
   21e20:	mov	r0, #12
   21e24:	add	sp, sp, #44	; 0x2c
   21e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e2c:	cmp	r0, #0
   21e30:	bne	21dbc <__assert_fail@plt+0x10218>
   21e34:	cmp	r4, #0
   21e38:	movne	r0, r4
   21e3c:	moveq	r0, r5
   21e40:	b	21dbc <__assert_fail@plt+0x10218>
   21e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e48:	sub	sp, sp, #14400	; 0x3840
   21e4c:	sub	sp, sp, #28
   21e50:	mov	r4, #0
   21e54:	mov	r5, r1
   21e58:	str	r1, [sp, #8]
   21e5c:	str	r4, [r1, #44]	; 0x2c
   21e60:	str	r4, [r1, #48]	; 0x30
   21e64:	mov	r8, r0
   21e68:	mov	r1, r4
   21e6c:	add	r0, sp, #88	; 0x58
   21e70:	mov	r2, #32
   21e74:	bl	119e8 <memset@plt>
   21e78:	ldr	r1, [r5, #8]
   21e7c:	cmp	r1, r4
   21e80:	ble	227d8 <__assert_fail@plt+0x10c34>
   21e84:	add	r2, sp, #6208	; 0x1840
   21e88:	add	r2, r2, #24
   21e8c:	sub	r2, r2, #4
   21e90:	str	r2, [sp, #32]
   21e94:	str	r8, [sp, #28]
   21e98:	add	r2, r8, #128	; 0x80
   21e9c:	mov	r8, r4
   21ea0:	str	r4, [sp, #16]
   21ea4:	str	r2, [sp, #36]	; 0x24
   21ea8:	ldr	r3, [sp, #8]
   21eac:	ldr	r0, [sp, #16]
   21eb0:	ldr	r2, [r3, #12]
   21eb4:	ldr	r3, [sp, #28]
   21eb8:	lsl	ip, r0, #2
   21ebc:	ldr	r2, [r2, r0, lsl #2]
   21ec0:	ldr	r3, [r3]
   21ec4:	str	ip, [sp, #12]
   21ec8:	add	r0, r3, r2, lsl #3
   21ecc:	str	r0, [sp, #20]
   21ed0:	ldrb	ip, [r0, #4]
   21ed4:	ldr	r4, [r0, #4]
   21ed8:	ldr	r0, [pc, #2548]	; 228d4 <__assert_fail@plt+0x10d30>
   21edc:	cmp	ip, #1
   21ee0:	str	ip, [sp, #4]
   21ee4:	and	r4, r0, r4, lsr #8
   21ee8:	beq	2205c <__assert_fail@plt+0x104b8>
   21eec:	ldr	r0, [sp, #4]
   21ef0:	cmp	r0, #3
   21ef4:	beq	2233c <__assert_fail@plt+0x10798>
   21ef8:	ldr	r3, [sp, #4]
   21efc:	cmp	r3, #5
   21f00:	beq	22368 <__assert_fail@plt+0x107c4>
   21f04:	ldr	r3, [sp, #4]
   21f08:	cmp	r3, #7
   21f0c:	beq	22620 <__assert_fail@plt+0x10a7c>
   21f10:	ldr	r3, [sp, #16]
   21f14:	add	r3, r3, #1
   21f18:	cmp	r3, r1
   21f1c:	str	r3, [sp, #16]
   21f20:	blt	21ea8 <__assert_fail@plt+0x10304>
   21f24:	str	r8, [sp, #4]
   21f28:	ldr	r3, [sp, #4]
   21f2c:	ldr	r8, [sp, #28]
   21f30:	cmp	r3, #0
   21f34:	ble	227d4 <__assert_fail@plt+0x10c30>
   21f38:	ldr	r3, [sp, #4]
   21f3c:	add	r6, sp, #2128	; 0x850
   21f40:	add	r3, r3, #1
   21f44:	add	r6, r6, #8
   21f48:	mov	r4, #0
   21f4c:	lsl	r0, r3, #2
   21f50:	str	r3, [r6, #-2092]	; 0xfffff7d4
   21f54:	str	r4, [r6, #-2088]	; 0xfffff7d8
   21f58:	bl	2d82c <__assert_fail@plt+0x1bc88>
   21f5c:	cmp	r0, r4
   21f60:	str	r0, [r6, #-2084]	; 0xfffff7dc
   21f64:	beq	226d4 <__assert_fail@plt+0x10b30>
   21f68:	add	r3, sp, #3152	; 0xc50
   21f6c:	add	r3, r3, #8
   21f70:	mov	r1, r4
   21f74:	add	r0, sp, #56	; 0x38
   21f78:	mov	r2, #32
   21f7c:	mov	r5, r3
   21f80:	str	r4, [sp, #20]
   21f84:	str	r3, [sp, #24]
   21f88:	str	r4, [r6, #-2096]	; 0xfffff7d0
   21f8c:	bl	119e8 <memset@plt>
   21f90:	add	r3, sp, #6208	; 0x1840
   21f94:	add	r3, r3, #24
   21f98:	add	sl, sp, #1104	; 0x450
   21f9c:	mov	r9, r4
   21fa0:	mov	fp, r4
   21fa4:	add	sl, sl, #8
   21fa8:	mov	r4, r5
   21fac:	sub	r5, r3, #4
   21fb0:	add	r3, sp, #84	; 0x54
   21fb4:	str	r3, [sp, #12]
   21fb8:	add	r3, sp, #40	; 0x28
   21fbc:	str	r3, [sp, #16]
   21fc0:	ldr	r2, [r4, #4]
   21fc4:	str	r9, [r6, #-2088]	; 0xfffff7d8
   21fc8:	cmp	r2, #0
   21fcc:	movgt	r7, #0
   21fd0:	bgt	21fe8 <__assert_fail@plt+0x10444>
   21fd4:	b	2245c <__assert_fail@plt+0x108b8>
   21fd8:	ldr	r2, [r4, #4]
   21fdc:	add	r7, r7, #1
   21fe0:	cmp	r2, r7
   21fe4:	ble	2245c <__assert_fail@plt+0x108b8>
   21fe8:	ldr	r1, [r4, #8]
   21fec:	ldr	r3, [r8, #12]
   21ff0:	add	r0, sp, #44	; 0x2c
   21ff4:	ldr	r1, [r1, r7, lsl #2]
   21ff8:	ldr	r1, [r3, r1, lsl #2]
   21ffc:	cmn	r1, #1
   22000:	add	r1, r1, r1, lsl #1
   22004:	beq	21fdc <__assert_fail@plt+0x10438>
   22008:	ldr	r3, [r8, #24]
   2200c:	add	r1, r3, r1, lsl #2
   22010:	bl	21634 <__assert_fail@plt+0xfa90>
   22014:	cmp	r0, #0
   22018:	str	r0, [r6, #-2096]	; 0xfffff7d0
   2201c:	beq	21fd8 <__assert_fail@plt+0x10434>
   22020:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   22024:	bl	17274 <__assert_fail@plt+0x56d0>
   22028:	ldr	r5, [sp, #24]
   2202c:	ldr	r6, [sp, #4]
   22030:	mov	r4, #0
   22034:	ldr	r0, [r5, #8]
   22038:	add	r4, r4, #1
   2203c:	bl	17274 <__assert_fail@plt+0x56d0>
   22040:	cmp	r4, r6
   22044:	add	r5, r5, #12
   22048:	bne	22034 <__assert_fail@plt+0x10490>
   2204c:	mov	r0, #0
   22050:	add	sp, sp, #14400	; 0x3840
   22054:	add	sp, sp, #28
   22058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2205c:	ldrb	r3, [r3, r2, lsl #3]
   22060:	add	r2, sp, #88	; 0x58
   22064:	and	r1, r3, #31
   22068:	asr	r3, r3, #5
   2206c:	ldr	r2, [r2, r3, lsl #2]
   22070:	orr	r2, r2, ip, lsl r1
   22074:	add	r1, sp, #88	; 0x58
   22078:	str	r2, [r1, r3, lsl #2]
   2207c:	cmp	r4, #0
   22080:	beq	22168 <__assert_fail@plt+0x105c4>
   22084:	tst	r4, #32
   22088:	bne	223d0 <__assert_fail@plt+0x1082c>
   2208c:	tst	r4, #128	; 0x80
   22090:	bne	22400 <__assert_fail@plt+0x1085c>
   22094:	tst	r4, #4
   22098:	beq	22100 <__assert_fail@plt+0x1055c>
   2209c:	ldr	r3, [sp, #4]
   220a0:	cmp	r3, #1
   220a4:	beq	226c0 <__assert_fail@plt+0x10b1c>
   220a8:	ldr	r2, [sp, #28]
   220ac:	ldr	r3, [r2, #92]	; 0x5c
   220b0:	cmp	r3, #1
   220b4:	ble	226ec <__assert_fail@plt+0x10b48>
   220b8:	ldr	lr, [r2, #60]	; 0x3c
   220bc:	ldr	r6, [sp, #36]	; 0x24
   220c0:	add	r0, sp, #88	; 0x58
   220c4:	sub	lr, lr, #4
   220c8:	add	r1, r2, #96	; 0x60
   220cc:	mov	ip, #0
   220d0:	ldr	r3, [lr, #4]!
   220d4:	ldr	r5, [r1], #4
   220d8:	ldr	r2, [r0]
   220dc:	mvn	r3, r3
   220e0:	orr	r3, r3, r5
   220e4:	and	r3, r3, r2
   220e8:	cmp	r6, r1
   220ec:	str	r3, [r0], #4
   220f0:	orr	ip, ip, r3
   220f4:	bne	220d0 <__assert_fail@plt+0x1052c>
   220f8:	cmp	ip, #0
   220fc:	beq	222c4 <__assert_fail@plt+0x10720>
   22100:	tst	r4, #8
   22104:	beq	22168 <__assert_fail@plt+0x105c4>
   22108:	ldr	r3, [sp, #4]
   2210c:	cmp	r3, #1
   22110:	beq	22414 <__assert_fail@plt+0x10870>
   22114:	ldr	r2, [sp, #28]
   22118:	ldr	r3, [r2, #92]	; 0x5c
   2211c:	cmp	r3, #1
   22120:	ble	22428 <__assert_fail@plt+0x10884>
   22124:	ldr	lr, [r2, #60]	; 0x3c
   22128:	ldr	r5, [sp, #36]	; 0x24
   2212c:	add	ip, sp, #88	; 0x58
   22130:	sub	lr, lr, #4
   22134:	add	r0, r2, #96	; 0x60
   22138:	mov	r1, #0
   2213c:	ldr	r2, [r0], #4
   22140:	ldr	r4, [lr, #4]!
   22144:	ldr	r3, [ip]
   22148:	and	r2, r2, r4
   2214c:	bic	r3, r3, r2
   22150:	cmp	r5, r0
   22154:	str	r3, [ip], #4
   22158:	orr	r1, r1, r3
   2215c:	bne	2213c <__assert_fail@plt+0x10598>
   22160:	cmp	r1, #0
   22164:	beq	222c4 <__assert_fail@plt+0x10720>
   22168:	cmp	r8, #0
   2216c:	movle	r6, #0
   22170:	ble	222bc <__assert_fail@plt+0x10718>
   22174:	add	r3, sp, #3152	; 0xc50
   22178:	add	r3, r3, #8
   2217c:	ldr	ip, [sp, #32]
   22180:	mov	r7, r3
   22184:	mov	r6, #0
   22188:	str	r3, [sp, #24]
   2218c:	ldr	r3, [sp, #4]
   22190:	cmp	r3, #1
   22194:	beq	222d0 <__assert_fail@plt+0x1072c>
   22198:	add	r0, sp, #88	; 0x58
   2219c:	add	r9, sp, #1104	; 0x450
   221a0:	add	r9, r9, #8
   221a4:	add	r4, ip, #32
   221a8:	mov	r1, ip
   221ac:	mov	r5, r0
   221b0:	mov	lr, #0
   221b4:	ldr	r2, [r1, #4]!
   221b8:	ldr	r3, [r5], #4
   221bc:	cmp	r1, r4
   221c0:	and	r3, r3, r2
   221c4:	str	r3, [r9], #4
   221c8:	orr	lr, lr, r3
   221cc:	bne	221b4 <__assert_fail@plt+0x10610>
   221d0:	cmp	lr, #0
   221d4:	beq	222a8 <__assert_fail@plt+0x10704>
   221d8:	mov	r5, #0
   221dc:	add	fp, sp, #2128	; 0x850
   221e0:	mov	sl, r5
   221e4:	add	fp, fp, #8
   221e8:	mov	lr, ip
   221ec:	ldr	r3, [r0]
   221f0:	ldr	r9, [lr, #4]!
   221f4:	bic	r2, r9, r3
   221f8:	cmp	r1, lr
   221fc:	bic	r3, r3, r9
   22200:	str	r2, [fp], #4
   22204:	orr	sl, sl, r2
   22208:	str	r3, [r0], #4
   2220c:	orr	r5, r5, r3
   22210:	bne	221ec <__assert_fail@plt+0x10648>
   22214:	cmp	sl, #0
   22218:	beq	22280 <__assert_fail@plt+0x106dc>
   2221c:	add	sl, sp, #2128	; 0x850
   22220:	add	sl, sl, #8
   22224:	add	lr, sp, #14400	; 0x3840
   22228:	ldm	sl!, {r0, r1, r2, r3}
   2222c:	add	lr, lr, #24
   22230:	add	lr, lr, r8, lsl #5
   22234:	sub	lr, lr, #8192	; 0x2000
   22238:	add	r9, sp, #1104	; 0x450
   2223c:	stmia	lr!, {r0, r1, r2, r3}
   22240:	add	r9, r9, #8
   22244:	ldm	sl, {r0, r1, r2, r3}
   22248:	add	ip, ip, #4
   2224c:	add	fp, r8, r8, lsl #1
   22250:	stm	lr, {r0, r1, r2, r3}
   22254:	ldm	r9!, {r0, r1, r2, r3}
   22258:	stmia	ip!, {r0, r1, r2, r3}
   2225c:	ldm	r9, {r0, r1, r2, r3}
   22260:	stm	ip, {r0, r1, r2, r3}
   22264:	mov	r1, r7
   22268:	ldr	r3, [sp, #24]
   2226c:	add	r0, r3, fp, lsl #2
   22270:	bl	20bc4 <__assert_fail@plt+0xf020>
   22274:	cmp	r0, #0
   22278:	bne	22310 <__assert_fail@plt+0x1076c>
   2227c:	add	r8, r8, #1
   22280:	ldr	r3, [sp, #8]
   22284:	ldr	r2, [sp, #12]
   22288:	mov	r0, r7
   2228c:	ldr	r3, [r3, #12]
   22290:	ldr	r1, [r3, r2]
   22294:	bl	1fb28 <__assert_fail@plt+0xdf84>
   22298:	cmp	r0, #0
   2229c:	beq	22310 <__assert_fail@plt+0x1076c>
   222a0:	cmp	r5, #0
   222a4:	beq	222bc <__assert_fail@plt+0x10718>
   222a8:	add	r6, r6, #1
   222ac:	cmp	r6, r8
   222b0:	mov	ip, r4
   222b4:	add	r7, r7, #12
   222b8:	blt	2218c <__assert_fail@plt+0x105e8>
   222bc:	cmp	r8, r6
   222c0:	beq	22730 <__assert_fail@plt+0x10b8c>
   222c4:	ldr	r3, [sp, #8]
   222c8:	ldr	r1, [r3, #8]
   222cc:	b	21f10 <__assert_fail@plt+0x1036c>
   222d0:	ldr	r3, [sp, #20]
   222d4:	ldrb	r1, [r3]
   222d8:	lsl	r3, r6, #5
   222dc:	and	r2, r1, #31
   222e0:	asr	r1, r1, #5
   222e4:	add	r3, r3, r1, lsl #2
   222e8:	add	r1, sp, #14400	; 0x3840
   222ec:	add	r1, r1, #24
   222f0:	add	r3, r1, r3
   222f4:	sub	r3, r3, #8192	; 0x2000
   222f8:	ldr	r3, [r3]
   222fc:	lsr	r2, r3, r2
   22300:	tst	r2, #1
   22304:	addeq	r4, ip, #32
   22308:	beq	222a8 <__assert_fail@plt+0x10704>
   2230c:	b	22198 <__assert_fail@plt+0x105f4>
   22310:	str	r8, [sp, #4]
   22314:	ldr	r5, [sp, #24]
   22318:	ldr	r6, [sp, #4]
   2231c:	mov	r4, #0
   22320:	ldr	r0, [r5, #8]
   22324:	add	r4, r4, #1
   22328:	bl	17274 <__assert_fail@plt+0x56d0>
   2232c:	cmp	r4, r6
   22330:	add	r5, r5, #12
   22334:	bne	22320 <__assert_fail@plt+0x1077c>
   22338:	b	2204c <__assert_fail@plt+0x104a8>
   2233c:	ldr	r0, [r3, r2, lsl #3]
   22340:	add	r1, sp, #88	; 0x58
   22344:	sub	r2, r0, #4
   22348:	add	r0, r0, #28
   2234c:	ldr	r3, [r1]
   22350:	ldr	ip, [r2, #4]!
   22354:	orr	r3, r3, ip
   22358:	cmp	r2, r0
   2235c:	str	r3, [r1], #4
   22360:	bne	2234c <__assert_fail@plt+0x107a8>
   22364:	b	2207c <__assert_fail@plt+0x104d8>
   22368:	ldr	r2, [sp, #28]
   2236c:	ldr	r3, [r2, #92]	; 0x5c
   22370:	cmp	r3, #1
   22374:	ble	227c0 <__assert_fail@plt+0x10c1c>
   22378:	ldr	r0, [r2, #60]	; 0x3c
   2237c:	add	r1, sp, #88	; 0x58
   22380:	sub	r2, r0, #4
   22384:	add	r0, r0, #28
   22388:	ldr	r3, [r1]
   2238c:	ldr	ip, [r2, #4]!
   22390:	orr	r3, r3, ip
   22394:	cmp	r2, r0
   22398:	str	r3, [r1], #4
   2239c:	bne	22388 <__assert_fail@plt+0x107e4>
   223a0:	ldr	r3, [sp, #28]
   223a4:	ldr	r3, [r3, #128]	; 0x80
   223a8:	tst	r3, #64	; 0x40
   223ac:	ldreq	r2, [sp, #88]	; 0x58
   223b0:	biceq	r2, r2, #1024	; 0x400
   223b4:	streq	r2, [sp, #88]	; 0x58
   223b8:	tst	r3, #128	; 0x80
   223bc:	beq	2207c <__assert_fail@plt+0x104d8>
   223c0:	ldr	r3, [sp, #88]	; 0x58
   223c4:	bic	r3, r3, #1
   223c8:	str	r3, [sp, #88]	; 0x58
   223cc:	b	2207c <__assert_fail@plt+0x104d8>
   223d0:	ldr	r5, [sp, #88]	; 0x58
   223d4:	mov	r2, #32
   223d8:	mov	r1, #0
   223dc:	and	r5, r5, #1024	; 0x400
   223e0:	add	r0, sp, #88	; 0x58
   223e4:	bl	119e8 <memset@plt>
   223e8:	cmp	r5, #0
   223ec:	beq	222c4 <__assert_fail@plt+0x10720>
   223f0:	mov	r3, #1024	; 0x400
   223f4:	tst	r4, #128	; 0x80
   223f8:	str	r3, [sp, #88]	; 0x58
   223fc:	beq	22094 <__assert_fail@plt+0x104f0>
   22400:	mov	r2, #32
   22404:	mov	r1, #0
   22408:	add	r0, sp, #88	; 0x58
   2240c:	bl	119e8 <memset@plt>
   22410:	b	222c4 <__assert_fail@plt+0x10720>
   22414:	ldr	r3, [sp, #20]
   22418:	ldrb	r3, [r3, #6]
   2241c:	tst	r3, #64	; 0x40
   22420:	beq	22114 <__assert_fail@plt+0x10570>
   22424:	b	22400 <__assert_fail@plt+0x1085c>
   22428:	ldr	r3, [sp, #28]
   2242c:	ldr	lr, [sp, #36]	; 0x24
   22430:	add	ip, sp, #88	; 0x58
   22434:	add	r0, r3, #96	; 0x60
   22438:	mov	r1, #0
   2243c:	ldr	r2, [r0], #4
   22440:	ldr	r3, [ip]
   22444:	cmp	lr, r0
   22448:	bic	r3, r3, r2
   2244c:	str	r3, [ip], #4
   22450:	orr	r1, r1, r3
   22454:	bne	2243c <__assert_fail@plt+0x10898>
   22458:	b	22160 <__assert_fail@plt+0x105bc>
   2245c:	mov	r3, r9
   22460:	add	r2, sp, #44	; 0x2c
   22464:	mov	r1, r8
   22468:	ldr	r0, [sp, #16]
   2246c:	bl	20d88 <__assert_fail@plt+0xf1e4>
   22470:	ldr	r3, [sp, #12]
   22474:	cmp	r0, #0
   22478:	str	r0, [r3, #4]!
   2247c:	mov	r7, r0
   22480:	str	r3, [sp, #12]
   22484:	beq	22720 <__assert_fail@plt+0x10b7c>
   22488:	ldrsb	r3, [r7, #52]	; 0x34
   2248c:	cmp	r3, #0
   22490:	strge	r7, [sl]
   22494:	strge	r7, [r6, fp, lsl #2]
   22498:	blt	22654 <__assert_fail@plt+0x10ab0>
   2249c:	add	r7, sp, #56	; 0x38
   224a0:	add	r0, r5, #32
   224a4:	mov	r1, r7
   224a8:	ldr	r3, [r1]
   224ac:	ldr	r2, [r5, #4]!
   224b0:	orr	r3, r3, r2
   224b4:	cmp	r0, r5
   224b8:	str	r3, [r1], #4
   224bc:	bne	224a8 <__assert_fail@plt+0x10904>
   224c0:	ldr	r3, [sp, #4]
   224c4:	add	fp, fp, #1
   224c8:	cmp	fp, r3
   224cc:	add	r4, r4, #12
   224d0:	add	sl, sl, #4
   224d4:	mov	r5, r0
   224d8:	bne	21fc0 <__assert_fail@plt+0x1041c>
   224dc:	ldr	r3, [sp, #20]
   224e0:	cmp	r3, #0
   224e4:	bne	22828 <__assert_fail@plt+0x10c84>
   224e8:	mov	r1, #256	; 0x100
   224ec:	mov	r0, #4
   224f0:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   224f4:	ldr	r3, [sp, #8]
   224f8:	cmp	r0, #0
   224fc:	str	r0, [r3, #44]	; 0x2c
   22500:	beq	22020 <__assert_fail@plt+0x1047c>
   22504:	add	ip, sp, #6208	; 0x1840
   22508:	add	r9, r8, #96	; 0x60
   2250c:	mov	r5, r0
   22510:	add	ip, ip, #24
   22514:	add	sl, r0, #1024	; 0x400
   22518:	ldr	r1, [r7], #4
   2251c:	cmp	r1, #0
   22520:	movne	lr, r5
   22524:	movne	r2, #1
   22528:	bne	22540 <__assert_fail@plt+0x1099c>
   2252c:	b	2258c <__assert_fail@plt+0x109e8>
   22530:	lsrs	r1, r1, #1
   22534:	lsl	r2, r2, #1
   22538:	add	lr, lr, #4
   2253c:	beq	2258c <__assert_fail@plt+0x109e8>
   22540:	tst	r1, #1
   22544:	beq	22530 <__assert_fail@plt+0x1098c>
   22548:	ldr	r3, [ip]
   2254c:	ands	r3, r2, r3
   22550:	bne	22820 <__assert_fail@plt+0x10c7c>
   22554:	add	r3, r3, #1
   22558:	ldr	r4, [ip, r3, lsl #5]
   2255c:	tst	r2, r4
   22560:	beq	22554 <__assert_fail@plt+0x109b0>
   22564:	ldr	r4, [r9]
   22568:	add	r3, r6, r3, lsl #2
   2256c:	tst	r2, r4
   22570:	add	lr, lr, #4
   22574:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   22578:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   2257c:	lsrs	r1, r1, #1
   22580:	str	r3, [lr, #-4]
   22584:	lsl	r2, r2, #1
   22588:	bne	22540 <__assert_fail@plt+0x1099c>
   2258c:	add	r5, r5, #128	; 0x80
   22590:	cmp	sl, r5
   22594:	add	r9, r9, #4
   22598:	add	ip, ip, #4
   2259c:	bne	22518 <__assert_fail@plt+0x10974>
   225a0:	ldr	r3, [r6, #-2080]	; 0xfffff7e0
   225a4:	tst	r3, #1024	; 0x400
   225a8:	beq	225e8 <__assert_fail@plt+0x10a44>
   225ac:	mov	r3, #0
   225b0:	b	225c0 <__assert_fail@plt+0x10a1c>
   225b4:	add	r3, r3, #1
   225b8:	cmp	fp, r3
   225bc:	beq	225e8 <__assert_fail@plt+0x10a44>
   225c0:	add	r2, sp, #6208	; 0x1840
   225c4:	add	r2, r2, #24
   225c8:	ldr	r2, [r2, r3, lsl #5]
   225cc:	tst	r2, #1024	; 0x400
   225d0:	beq	225b4 <__assert_fail@plt+0x10a10>
   225d4:	ldr	r2, [sp, #20]
   225d8:	ldr	r3, [r6, r3, lsl #2]
   225dc:	cmp	r2, #0
   225e0:	str	r3, [r0, #40]	; 0x28
   225e4:	strne	r3, [r0, #1064]	; 0x428
   225e8:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   225ec:	add	r8, fp, fp, lsl #1
   225f0:	bl	17274 <__assert_fail@plt+0x56d0>
   225f4:	ldr	r5, [sp, #24]
   225f8:	mov	r4, #0
   225fc:	lsl	r8, r8, #2
   22600:	add	r3, r5, r4
   22604:	add	r4, r4, #12
   22608:	ldr	r0, [r3, #8]
   2260c:	bl	17274 <__assert_fail@plt+0x56d0>
   22610:	cmp	r8, r4
   22614:	bne	22600 <__assert_fail@plt+0x10a5c>
   22618:	mov	r0, #1
   2261c:	b	22050 <__assert_fail@plt+0x104ac>
   22620:	ldr	r3, [sp, #28]
   22624:	ldr	r2, [r3, #128]	; 0x80
   22628:	mvn	r3, #0
   2262c:	tst	r2, #64	; 0x40
   22630:	str	r3, [sp, #88]	; 0x58
   22634:	str	r3, [sp, #92]	; 0x5c
   22638:	str	r3, [sp, #96]	; 0x60
   2263c:	str	r3, [sp, #100]	; 0x64
   22640:	biceq	r3, r3, #1024	; 0x400
   22644:	streq	r3, [sp, #88]	; 0x58
   22648:	tst	r2, #128	; 0x80
   2264c:	beq	2207c <__assert_fail@plt+0x104d8>
   22650:	b	223c0 <__assert_fail@plt+0x1081c>
   22654:	mov	r3, #1
   22658:	add	r2, sp, #44	; 0x2c
   2265c:	mov	r1, r8
   22660:	ldr	r0, [sp, #16]
   22664:	bl	20d88 <__assert_fail@plt+0xf1e4>
   22668:	cmp	r0, #0
   2266c:	str	r0, [sl]
   22670:	beq	22810 <__assert_fail@plt+0x10c6c>
   22674:	cmp	r7, r0
   22678:	beq	22690 <__assert_fail@plt+0x10aec>
   2267c:	ldr	r3, [r8, #92]	; 0x5c
   22680:	ldr	r2, [sp, #20]
   22684:	cmp	r3, #1
   22688:	movgt	r2, #1
   2268c:	str	r2, [sp, #20]
   22690:	mov	r3, #2
   22694:	add	r2, sp, #44	; 0x2c
   22698:	mov	r1, r8
   2269c:	ldr	r0, [sp, #16]
   226a0:	bl	20d88 <__assert_fail@plt+0xf1e4>
   226a4:	cmp	r0, #0
   226a8:	str	r0, [r6, fp, lsl #2]
   226ac:	bne	2249c <__assert_fail@plt+0x108f8>
   226b0:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   226b4:	cmp	r3, #0
   226b8:	beq	2249c <__assert_fail@plt+0x108f8>
   226bc:	b	22020 <__assert_fail@plt+0x1047c>
   226c0:	ldr	r3, [sp, #20]
   226c4:	ldrb	r3, [r3, #6]
   226c8:	tst	r3, #64	; 0x40
   226cc:	bne	220a8 <__assert_fail@plt+0x10504>
   226d0:	b	22400 <__assert_fail@plt+0x1085c>
   226d4:	mov	r3, #12
   226d8:	str	r3, [r6, #-2096]	; 0xfffff7d0
   226dc:	add	r3, sp, #3152	; 0xc50
   226e0:	add	r3, r3, #8
   226e4:	str	r3, [sp, #24]
   226e8:	b	22024 <__assert_fail@plt+0x10480>
   226ec:	ldr	r3, [sp, #28]
   226f0:	ldr	lr, [sp, #36]	; 0x24
   226f4:	add	r1, sp, #88	; 0x58
   226f8:	add	r2, r3, #96	; 0x60
   226fc:	mov	ip, #0
   22700:	ldr	r3, [r2], #4
   22704:	ldr	r0, [r1]
   22708:	cmp	r2, lr
   2270c:	and	r3, r3, r0
   22710:	str	r3, [r1], #4
   22714:	orr	ip, ip, r3
   22718:	bne	22700 <__assert_fail@plt+0x10b5c>
   2271c:	b	220f8 <__assert_fail@plt+0x10554>
   22720:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   22724:	cmp	r3, #0
   22728:	beq	22488 <__assert_fail@plt+0x108e4>
   2272c:	b	22020 <__assert_fail@plt+0x1047c>
   22730:	add	r4, sp, #88	; 0x58
   22734:	add	ip, sp, #14400	; 0x3840
   22738:	ldm	r4!, {r0, r1, r2, r3}
   2273c:	add	ip, ip, #24
   22740:	add	ip, ip, r8, lsl #5
   22744:	sub	ip, ip, #8192	; 0x2000
   22748:	ldr	r5, [sp, #8]
   2274c:	stmia	ip!, {r0, r1, r2, r3}
   22750:	add	r3, sp, #3152	; 0xc50
   22754:	add	r3, r3, #8
   22758:	mov	r6, r3
   2275c:	str	r3, [sp, #24]
   22760:	ldm	r4, {r0, r1, r2, r3}
   22764:	add	lr, r8, r8, lsl #1
   22768:	ldr	r5, [r5, #12]
   2276c:	add	r4, r6, lr, lsl #2
   22770:	stm	ip, {r0, r1, r2, r3}
   22774:	mov	r3, #1
   22778:	ldr	r2, [sp, #12]
   2277c:	mov	r0, #4
   22780:	ldr	r5, [r5, r2]
   22784:	str	r3, [r6, lr, lsl #2]
   22788:	str	r3, [r4, #4]
   2278c:	bl	2d82c <__assert_fail@plt+0x1bc88>
   22790:	cmp	r0, #0
   22794:	str	r0, [r4, #8]
   22798:	beq	227f8 <__assert_fail@plt+0x10c54>
   2279c:	mov	r1, #0
   227a0:	str	r5, [r0]
   227a4:	mov	r2, #32
   227a8:	add	r0, sp, #88	; 0x58
   227ac:	bl	119e8 <memset@plt>
   227b0:	ldr	r3, [sp, #8]
   227b4:	add	r8, r8, #1
   227b8:	ldr	r1, [r3, #8]
   227bc:	b	21f10 <__assert_fail@plt+0x1036c>
   227c0:	mov	r2, #32
   227c4:	mvn	r1, #0
   227c8:	add	r0, sp, #88	; 0x58
   227cc:	bl	119e8 <memset@plt>
   227d0:	b	223a0 <__assert_fail@plt+0x107fc>
   227d4:	bne	2204c <__assert_fail@plt+0x104a8>
   227d8:	mov	r1, #256	; 0x100
   227dc:	mov	r0, #4
   227e0:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   227e4:	ldr	r3, [sp, #8]
   227e8:	str	r0, [r3, #44]	; 0x2c
   227ec:	adds	r0, r0, #0
   227f0:	movne	r0, #1
   227f4:	b	22050 <__assert_fail@plt+0x104ac>
   227f8:	cmp	r8, #0
   227fc:	str	r8, [sp, #4]
   22800:	str	r0, [r4, #4]
   22804:	str	r0, [r4]
   22808:	beq	2204c <__assert_fail@plt+0x104a8>
   2280c:	b	22314 <__assert_fail@plt+0x10770>
   22810:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   22814:	cmp	r3, #0
   22818:	beq	2267c <__assert_fail@plt+0x10ad8>
   2281c:	b	22020 <__assert_fail@plt+0x1047c>
   22820:	mov	r3, #0
   22824:	b	22564 <__assert_fail@plt+0x109c0>
   22828:	mov	r1, #512	; 0x200
   2282c:	mov	r0, #4
   22830:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   22834:	ldr	r3, [sp, #8]
   22838:	cmp	r0, #0
   2283c:	str	r0, [r3, #48]	; 0x30
   22840:	beq	22020 <__assert_fail@plt+0x1047c>
   22844:	add	r1, sp, #6208	; 0x1840
   22848:	mov	lr, r0
   2284c:	add	r1, r1, #24
   22850:	add	r5, r0, #1024	; 0x400
   22854:	ldr	ip, [r7], #4
   22858:	cmp	ip, #0
   2285c:	movne	r4, lr
   22860:	movne	r2, #1
   22864:	bne	2287c <__assert_fail@plt+0x10cd8>
   22868:	b	228b8 <__assert_fail@plt+0x10d14>
   2286c:	lsrs	ip, ip, #1
   22870:	lsl	r2, r2, #1
   22874:	add	r4, r4, #4
   22878:	beq	228b8 <__assert_fail@plt+0x10d14>
   2287c:	tst	ip, #1
   22880:	beq	2286c <__assert_fail@plt+0x10cc8>
   22884:	ldr	r3, [r1]
   22888:	ands	r3, r2, r3
   2288c:	bne	228cc <__assert_fail@plt+0x10d28>
   22890:	add	r3, r3, #1
   22894:	ldr	r8, [r1, r3, lsl #5]
   22898:	tst	r2, r8
   2289c:	beq	22890 <__assert_fail@plt+0x10cec>
   228a0:	add	r3, r6, r3, lsl #2
   228a4:	ldr	r8, [r3, #-2048]	; 0xfffff800
   228a8:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   228ac:	str	r8, [r4]
   228b0:	str	r3, [r4, #1024]	; 0x400
   228b4:	b	2286c <__assert_fail@plt+0x10cc8>
   228b8:	add	lr, lr, #128	; 0x80
   228bc:	cmp	r5, lr
   228c0:	add	r1, r1, #4
   228c4:	bne	22854 <__assert_fail@plt+0x10cb0>
   228c8:	b	225a0 <__assert_fail@plt+0x109fc>
   228cc:	mov	r3, #0
   228d0:	b	228a0 <__assert_fail@plt+0x10cfc>
   228d4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   228d8:	cmp	r1, #0
   228dc:	push	{r4, r5, r6, lr}
   228e0:	mov	r5, r0
   228e4:	blt	22940 <__assert_fail@plt+0x10d9c>
   228e8:	ldr	r3, [r0, #48]	; 0x30
   228ec:	cmp	r1, r3
   228f0:	beq	229b4 <__assert_fail@plt+0x10e10>
   228f4:	ldr	r3, [r0, #80]	; 0x50
   228f8:	cmp	r3, #1
   228fc:	ble	22948 <__assert_fail@plt+0x10da4>
   22900:	ldr	r3, [r0, #8]
   22904:	add	r3, r3, r1, lsl #2
   22908:	b	22914 <__assert_fail@plt+0x10d70>
   2290c:	cmn	r1, #1
   22910:	beq	22940 <__assert_fail@plt+0x10d9c>
   22914:	ldr	r4, [r3], #-4
   22918:	sub	r1, r1, #1
   2291c:	cmn	r4, #1
   22920:	beq	2290c <__assert_fail@plt+0x10d68>
   22924:	ldrb	r3, [r5, #78]	; 0x4e
   22928:	cmp	r3, #0
   2292c:	bne	22988 <__assert_fail@plt+0x10de4>
   22930:	cmp	r4, #10
   22934:	beq	22974 <__assert_fail@plt+0x10dd0>
   22938:	mov	r0, #0
   2293c:	pop	{r4, r5, r6, pc}
   22940:	ldr	r0, [r5, #60]	; 0x3c
   22944:	pop	{r4, r5, r6, pc}
   22948:	ldr	r3, [r0, #4]
   2294c:	ldr	r0, [r0, #68]	; 0x44
   22950:	ldrb	r3, [r3, r1]
   22954:	and	r2, r3, #31
   22958:	asr	r1, r3, #5
   2295c:	ldr	r0, [r0, r1, lsl #2]
   22960:	lsr	r0, r0, r2
   22964:	ands	r0, r0, #1
   22968:	bne	229ac <__assert_fail@plt+0x10e08>
   2296c:	cmp	r3, #10
   22970:	popne	{r4, r5, r6, pc}
   22974:	ldrb	r0, [r5, #77]	; 0x4d
   22978:	cmp	r0, #0
   2297c:	movne	r0, #2
   22980:	moveq	r0, #0
   22984:	pop	{r4, r5, r6, pc}
   22988:	mov	r0, r4
   2298c:	bl	119c4 <iswalnum@plt>
   22990:	sub	r3, r4, #95	; 0x5f
   22994:	clz	r3, r3
   22998:	lsr	r3, r3, #5
   2299c:	cmp	r0, #0
   229a0:	orrne	r3, r3, #1
   229a4:	cmp	r3, #0
   229a8:	beq	22930 <__assert_fail@plt+0x10d8c>
   229ac:	mov	r0, #1
   229b0:	pop	{r4, r5, r6, pc}
   229b4:	tst	r2, #2
   229b8:	moveq	r0, #10
   229bc:	movne	r0, #8
   229c0:	pop	{r4, r5, r6, pc}
   229c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229c8:	mov	r4, r0
   229cc:	ldr	r5, [r0, #24]
   229d0:	sub	sp, sp, #36	; 0x24
   229d4:	cmp	r5, r1
   229d8:	mov	r6, r1
   229dc:	mov	r7, r2
   229e0:	suble	r5, r1, r5
   229e4:	ble	22a48 <__assert_fail@plt+0x10ea4>
   229e8:	ldr	r3, [r0, #80]	; 0x50
   229ec:	ldr	r1, [r0, #44]	; 0x2c
   229f0:	cmp	r3, #1
   229f4:	ldrb	r3, [r0, #75]	; 0x4b
   229f8:	movgt	r2, #0
   229fc:	strgt	r2, [r0, #16]
   22a00:	strgt	r2, [r0, #20]
   22a04:	tst	r7, #1
   22a08:	ldr	r2, [r0, #52]	; 0x34
   22a0c:	moveq	r0, #6
   22a10:	movne	r0, #4
   22a14:	cmp	r3, #0
   22a18:	mov	r3, #0
   22a1c:	str	r3, [r4, #28]
   22a20:	str	r3, [r4, #24]
   22a24:	str	r3, [r4, #32]
   22a28:	strb	r3, [r4, #76]	; 0x4c
   22a2c:	moveq	r5, r6
   22a30:	ldreq	r3, [r4]
   22a34:	movne	r5, r6
   22a38:	str	r0, [r4, #60]	; 0x3c
   22a3c:	str	r1, [r4, #48]	; 0x30
   22a40:	str	r2, [r4, #56]	; 0x38
   22a44:	streq	r3, [r4, #4]
   22a48:	cmp	r5, #0
   22a4c:	ldreq	r3, [r4, #80]	; 0x50
   22a50:	beq	22ae0 <__assert_fail@plt+0x10f3c>
   22a54:	ldr	r2, [r4, #32]
   22a58:	ldrb	r3, [r4, #76]	; 0x4c
   22a5c:	cmp	r5, r2
   22a60:	bge	22bb0 <__assert_fail@plt+0x1100c>
   22a64:	cmp	r3, #0
   22a68:	bne	22c74 <__assert_fail@plt+0x110d0>
   22a6c:	mov	r2, r7
   22a70:	sub	r1, r5, #1
   22a74:	mov	r0, r4
   22a78:	bl	228d8 <__assert_fail@plt+0x10d34>
   22a7c:	ldr	r3, [r4, #80]	; 0x50
   22a80:	cmp	r3, #1
   22a84:	str	r0, [r4, #60]	; 0x3c
   22a88:	ble	22aa4 <__assert_fail@plt+0x10f00>
   22a8c:	ldr	r2, [r4, #28]
   22a90:	ldr	r0, [r4, #8]
   22a94:	sub	r2, r2, r5
   22a98:	add	r1, r0, r5, lsl #2
   22a9c:	lsl	r2, r2, #2
   22aa0:	bl	11748 <memmove@plt>
   22aa4:	ldrb	r3, [r4, #75]	; 0x4b
   22aa8:	cmp	r3, #0
   22aac:	bne	22db4 <__assert_fail@plt+0x11210>
   22ab0:	ldr	r0, [r4, #28]
   22ab4:	ldr	r1, [r4, #32]
   22ab8:	mov	r2, r3
   22abc:	ldr	r3, [r4, #80]	; 0x50
   22ac0:	sub	r0, r0, r5
   22ac4:	sub	r1, r1, r5
   22ac8:	str	r0, [r4, #28]
   22acc:	str	r1, [r4, #32]
   22ad0:	cmp	r2, #0
   22ad4:	ldreq	r2, [r4, #4]
   22ad8:	addeq	r2, r2, r5
   22adc:	streq	r2, [r4, #4]
   22ae0:	ldr	r2, [r4, #48]	; 0x30
   22ae4:	ldr	r1, [r4, #56]	; 0x38
   22ae8:	cmp	r3, #1
   22aec:	sub	r3, r2, r5
   22af0:	sub	r5, r1, r5
   22af4:	str	r6, [r4, #24]
   22af8:	str	r3, [r4, #48]	; 0x30
   22afc:	str	r5, [r4, #56]	; 0x38
   22b00:	ble	22b38 <__assert_fail@plt+0x10f94>
   22b04:	ldrb	r3, [r4, #72]	; 0x48
   22b08:	mov	r0, r4
   22b0c:	cmp	r3, #0
   22b10:	bne	22b28 <__assert_fail@plt+0x10f84>
   22b14:	bl	1ecc4 <__assert_fail@plt+0xd120>
   22b18:	mov	r0, #0
   22b1c:	str	r0, [r4, #40]	; 0x28
   22b20:	add	sp, sp, #36	; 0x24
   22b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b28:	bl	1ee5c <__assert_fail@plt+0xd2b8>
   22b2c:	cmp	r0, #0
   22b30:	beq	22b18 <__assert_fail@plt+0x10f74>
   22b34:	b	22b20 <__assert_fail@plt+0x10f7c>
   22b38:	ldrb	r2, [r4, #75]	; 0x4b
   22b3c:	cmp	r2, #0
   22b40:	streq	r3, [r4, #28]
   22b44:	beq	22b18 <__assert_fail@plt+0x10f74>
   22b48:	ldrb	r2, [r4, #72]	; 0x48
   22b4c:	cmp	r2, #0
   22b50:	bne	23098 <__assert_fail@plt+0x114f4>
   22b54:	ldr	r0, [r4, #64]	; 0x40
   22b58:	cmp	r0, #0
   22b5c:	beq	22b18 <__assert_fail@plt+0x10f74>
   22b60:	ldr	r1, [r4, #36]	; 0x24
   22b64:	ldr	r2, [r4, #28]
   22b68:	cmp	r3, r1
   22b6c:	movge	r3, r1
   22b70:	cmp	r3, r2
   22b74:	bgt	22b84 <__assert_fail@plt+0x10fe0>
   22b78:	b	22ba4 <__assert_fail@plt+0x11000>
   22b7c:	ldr	r6, [r4, #24]
   22b80:	ldr	r0, [r4, #64]	; 0x40
   22b84:	ldm	r4, {r1, ip}
   22b88:	add	r1, r1, r2
   22b8c:	ldrb	r1, [r1, r6]
   22b90:	ldrb	r1, [r0, r1]
   22b94:	strb	r1, [ip, r2]
   22b98:	add	r2, r2, #1
   22b9c:	cmp	r3, r2
   22ba0:	bne	22b7c <__assert_fail@plt+0x10fd8>
   22ba4:	str	r2, [r4, #28]
   22ba8:	str	r2, [r4, #32]
   22bac:	b	22b18 <__assert_fail@plt+0x10f74>
   22bb0:	ldr	r1, [r4, #28]
   22bb4:	cmp	r3, #0
   22bb8:	str	r1, [sp]
   22bbc:	bne	22fd4 <__assert_fail@plt+0x11430>
   22bc0:	ldr	r3, [r4, #80]	; 0x50
   22bc4:	mov	r1, #0
   22bc8:	cmp	r3, #1
   22bcc:	str	r1, [r4, #28]
   22bd0:	ble	22ef4 <__assert_fail@plt+0x11350>
   22bd4:	ldrb	r1, [r4, #73]	; 0x49
   22bd8:	cmp	r1, #0
   22bdc:	bne	22e28 <__assert_fail@plt+0x11284>
   22be0:	ldr	r8, [r4, #24]
   22be4:	add	r8, r8, r2
   22be8:	cmp	r6, r8
   22bec:	ble	2317c <__assert_fail@plt+0x115d8>
   22bf0:	add	r3, sp, #16
   22bf4:	add	sl, r4, #16
   22bf8:	add	fp, sp, #24
   22bfc:	str	r5, [sp, #4]
   22c00:	mov	r9, r3
   22c04:	b	22c14 <__assert_fail@plt+0x11070>
   22c08:	add	r8, r8, r3
   22c0c:	cmp	r6, r8
   22c10:	ble	23000 <__assert_fail@plt+0x1145c>
   22c14:	ldm	sl, {r0, r1}
   22c18:	ldr	r5, [r4, #44]	; 0x2c
   22c1c:	ldr	ip, [r4]
   22c20:	sub	r5, r5, r8
   22c24:	stm	fp, {r0, r1}
   22c28:	mov	r2, r5
   22c2c:	mov	r3, sl
   22c30:	add	r1, ip, r8
   22c34:	mov	r0, r9
   22c38:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   22c3c:	sub	r2, r0, #1
   22c40:	cmn	r2, #4
   22c44:	mov	r3, r0
   22c48:	ldrls	r2, [sp, #16]
   22c4c:	bls	22c08 <__assert_fail@plt+0x11064>
   22c50:	mov	r2, #0
   22c54:	cmp	r5, r2
   22c58:	cmpne	r0, r2
   22c5c:	ldm	fp, {r0, r1}
   22c60:	ldrne	r3, [r4]
   22c64:	ldrbne	r2, [r3, r8]
   22c68:	mov	r3, #1
   22c6c:	stm	sl, {r0, r1}
   22c70:	b	22c08 <__assert_fail@plt+0x11064>
   22c74:	ldr	sl, [r4, #28]
   22c78:	ldr	r9, [r4, #12]
   22c7c:	mov	r3, sl
   22c80:	mov	r2, #0
   22c84:	b	22c98 <__assert_fail@plt+0x110f4>
   22c88:	ble	22cc0 <__assert_fail@plt+0x1111c>
   22c8c:	add	r2, r8, #1
   22c90:	cmp	r2, r3
   22c94:	bge	22cb8 <__assert_fail@plt+0x11114>
   22c98:	add	r1, r2, r3
   22c9c:	add	r1, r1, r1, lsr #31
   22ca0:	asr	r8, r1, #1
   22ca4:	ldr	r1, [r9, r8, lsl #2]
   22ca8:	cmp	r5, r1
   22cac:	bge	22c88 <__assert_fail@plt+0x110e4>
   22cb0:	mov	r3, r8
   22cb4:	b	22c90 <__assert_fail@plt+0x110ec>
   22cb8:	cmp	r5, r1
   22cbc:	addgt	r8, r8, #1
   22cc0:	sub	fp, r8, #1
   22cc4:	mov	r2, r7
   22cc8:	mov	r1, fp
   22ccc:	mov	r0, r4
   22cd0:	bl	228d8 <__assert_fail@plt+0x10d34>
   22cd4:	cmp	r5, sl
   22cd8:	movge	r3, #0
   22cdc:	movlt	r3, #1
   22ce0:	cmp	r5, r8
   22ce4:	movne	r3, #0
   22ce8:	cmp	r3, #0
   22cec:	str	r0, [r4, #60]	; 0x3c
   22cf0:	bne	22f4c <__assert_fail@plt+0x113a8>
   22cf4:	ldr	r2, [r4, #44]	; 0x2c
   22cf8:	ldr	r3, [r4, #52]	; 0x34
   22cfc:	sub	r2, r2, r6
   22d00:	add	r2, r2, r5
   22d04:	sub	r3, r3, r6
   22d08:	add	r3, r3, r5
   22d0c:	str	r2, [r4, #48]	; 0x30
   22d10:	cmp	r8, #0
   22d14:	mov	r2, #0
   22d18:	str	r3, [r4, #56]	; 0x38
   22d1c:	strb	r2, [r4, #76]	; 0x4c
   22d20:	ble	22d58 <__assert_fail@plt+0x111b4>
   22d24:	sub	r3, r8, #-1073741823	; 0xc0000001
   22d28:	ldr	r2, [r9, r3, lsl #2]
   22d2c:	add	r3, r9, r3, lsl #2
   22d30:	cmp	r5, r2
   22d34:	beq	22d4c <__assert_fail@plt+0x111a8>
   22d38:	b	22d58 <__assert_fail@plt+0x111b4>
   22d3c:	ldr	r2, [r3, #-4]!
   22d40:	sub	fp, fp, #1
   22d44:	cmp	r5, r2
   22d48:	bne	22d58 <__assert_fail@plt+0x111b4>
   22d4c:	cmp	fp, #0
   22d50:	mov	r8, fp
   22d54:	bne	22d3c <__assert_fail@plt+0x11198>
   22d58:	cmp	sl, r8
   22d5c:	ble	22dd0 <__assert_fail@plt+0x1122c>
   22d60:	ldr	r1, [r4, #8]
   22d64:	lsl	r0, r8, #2
   22d68:	add	r3, r1, r0
   22d6c:	ldr	r2, [r1, r8, lsl #2]
   22d70:	cmn	r2, #1
   22d74:	rsbeq	r1, r1, #4
   22d78:	beq	22d8c <__assert_fail@plt+0x111e8>
   22d7c:	b	22dd8 <__assert_fail@plt+0x11234>
   22d80:	ldr	r2, [r3, #4]!
   22d84:	cmn	r2, #1
   22d88:	bne	22dd8 <__assert_fail@plt+0x11234>
   22d8c:	add	r8, r8, #1
   22d90:	cmp	sl, r8
   22d94:	add	r0, r1, r3
   22d98:	bne	22d80 <__assert_fail@plt+0x111dc>
   22d9c:	mov	r2, #0
   22da0:	str	r2, [r4, #28]
   22da4:	str	r2, [r4, #32]
   22da8:	ldrb	r2, [r4, #75]	; 0x4b
   22dac:	ldr	r3, [r4, #80]	; 0x50
   22db0:	b	22ad0 <__assert_fail@plt+0x10f2c>
   22db4:	ldr	r0, [r4, #4]
   22db8:	ldr	r2, [r4, #28]
   22dbc:	add	r1, r0, r5
   22dc0:	sub	r2, r2, r5
   22dc4:	bl	11748 <memmove@plt>
   22dc8:	ldrb	r3, [r4, #75]	; 0x4b
   22dcc:	b	22ab0 <__assert_fail@plt+0x10f0c>
   22dd0:	beq	22d9c <__assert_fail@plt+0x111f8>
   22dd4:	lsl	r0, r8, #2
   22dd8:	ldr	r2, [r9, r0]
   22ddc:	sub	r2, r2, r5
   22de0:	cmp	r2, #0
   22de4:	str	r2, [r4, #28]
   22de8:	beq	22da4 <__assert_fail@plt+0x11200>
   22dec:	ble	22e14 <__assert_fail@plt+0x11270>
   22df0:	ldr	r1, [r4, #8]
   22df4:	mov	r3, #0
   22df8:	sub	r1, r1, #4
   22dfc:	mvn	r0, #0
   22e00:	str	r0, [r1, #4]!
   22e04:	ldr	r2, [r4, #28]
   22e08:	add	r3, r3, #1
   22e0c:	cmp	r2, r3
   22e10:	bgt	22e00 <__assert_fail@plt+0x1125c>
   22e14:	mov	r1, #255	; 0xff
   22e18:	ldr	r0, [r4, #4]
   22e1c:	bl	119e8 <memset@plt>
   22e20:	ldr	r2, [r4, #28]
   22e24:	b	22da4 <__assert_fail@plt+0x11200>
   22e28:	ldr	ip, [r4]
   22e2c:	ldr	r8, [r4, #24]
   22e30:	sub	r3, r5, r3
   22e34:	add	r9, ip, r8
   22e38:	add	r3, r9, r3
   22e3c:	cmp	ip, r3
   22e40:	sub	r0, r5, #1
   22e44:	movcc	ip, r3
   22e48:	add	r1, r9, r0
   22e4c:	cmp	r1, ip
   22e50:	bcc	22be4 <__assert_fail@plt+0x11040>
   22e54:	ldrb	r3, [r9, r0]
   22e58:	and	r3, r3, #192	; 0xc0
   22e5c:	cmp	r3, #128	; 0x80
   22e60:	subeq	r3, r1, #1
   22e64:	subeq	ip, ip, #1
   22e68:	bne	22e8c <__assert_fail@plt+0x112e8>
   22e6c:	cmp	ip, r3
   22e70:	mov	r1, r3
   22e74:	beq	22be4 <__assert_fail@plt+0x11040>
   22e78:	ldrb	r0, [r1]
   22e7c:	sub	r3, r3, #1
   22e80:	and	r0, r0, #192	; 0xc0
   22e84:	cmp	r0, #128	; 0x80
   22e88:	beq	22e6c <__assert_fail@plt+0x112c8>
   22e8c:	ldr	r2, [r4, #48]	; 0x30
   22e90:	ldr	r3, [r4, #64]	; 0x40
   22e94:	add	r2, r9, r2
   22e98:	cmp	r3, #0
   22e9c:	mov	r8, r1
   22ea0:	sub	r2, r2, r1
   22ea4:	bne	23134 <__assert_fail@plt+0x11590>
   22ea8:	add	fp, sp, #24
   22eac:	mov	r3, fp
   22eb0:	mov	sl, #0
   22eb4:	add	r0, sp, #12
   22eb8:	str	sl, [sp, #24]
   22ebc:	str	sl, [sp, #28]
   22ec0:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   22ec4:	add	r9, r9, r5
   22ec8:	sub	r8, r9, r8
   22ecc:	cmp	r0, r8
   22ed0:	movcc	r3, #0
   22ed4:	movcs	r3, #1
   22ed8:	cmn	r0, #3
   22edc:	movhi	r3, #0
   22ee0:	cmp	r3, sl
   22ee4:	bne	23048 <__assert_fail@plt+0x114a4>
   22ee8:	ldr	r8, [r4, #24]
   22eec:	ldr	r2, [r4, #32]
   22ef0:	b	22be4 <__assert_fail@plt+0x11040>
   22ef4:	ldr	r2, [r4]
   22ef8:	ldr	r0, [r4, #24]
   22efc:	add	r2, r2, r5
   22f00:	add	r2, r2, r0
   22f04:	ldr	ip, [r4, #64]	; 0x40
   22f08:	ldrb	r0, [r2, #-1]
   22f0c:	cmp	ip, #0
   22f10:	str	r1, [r4, #32]
   22f14:	ldrbne	r0, [ip, r0]
   22f18:	ldr	ip, [r4, #68]	; 0x44
   22f1c:	and	r2, r0, #31
   22f20:	asr	r1, r0, #5
   22f24:	ldr	r1, [ip, r1, lsl #2]
   22f28:	lsr	r2, r1, r2
   22f2c:	ands	r1, r2, #1
   22f30:	movne	r1, #1
   22f34:	bne	22f40 <__assert_fail@plt+0x1139c>
   22f38:	cmp	r0, #10
   22f3c:	beq	23108 <__assert_fail@plt+0x11564>
   22f40:	ldrb	r2, [r4, #75]	; 0x4b
   22f44:	str	r1, [r4, #60]	; 0x3c
   22f48:	b	22ad0 <__assert_fail@plt+0x10f2c>
   22f4c:	ldr	r3, [r9, r8, lsl #2]
   22f50:	cmp	r5, r3
   22f54:	bne	22cf4 <__assert_fail@plt+0x11150>
   22f58:	ldr	r0, [r4, #8]
   22f5c:	sub	r2, sl, r5
   22f60:	lsl	r7, r5, #2
   22f64:	lsl	r2, r2, #2
   22f68:	add	r1, r0, r7
   22f6c:	bl	11748 <memmove@plt>
   22f70:	ldr	r0, [r4, #4]
   22f74:	ldr	r2, [r4, #28]
   22f78:	add	r1, r0, r5
   22f7c:	sub	r2, r2, r5
   22f80:	bl	11748 <memmove@plt>
   22f84:	ldr	r3, [r4, #28]
   22f88:	ldr	r2, [r4, #32]
   22f8c:	sub	r3, r3, r5
   22f90:	sub	r2, r2, r5
   22f94:	cmp	r3, #0
   22f98:	str	r3, [r4, #28]
   22f9c:	str	r2, [r4, #32]
   22fa0:	ble	22da8 <__assert_fail@plt+0x11204>
   22fa4:	ldr	r1, [r4, #12]
   22fa8:	mov	r2, #0
   22fac:	add	r0, r1, r7
   22fb0:	sub	r1, r1, #4
   22fb4:	ldr	r3, [r0], #4
   22fb8:	add	r2, r2, #1
   22fbc:	sub	r3, r3, r5
   22fc0:	str	r3, [r1, #4]!
   22fc4:	ldr	r3, [r4, #28]
   22fc8:	cmp	r3, r2
   22fcc:	bgt	22fb4 <__assert_fail@plt+0x11410>
   22fd0:	b	22da8 <__assert_fail@plt+0x11204>
   22fd4:	ldr	r1, [r4, #44]	; 0x2c
   22fd8:	ldr	r3, [r4, #52]	; 0x34
   22fdc:	sub	r1, r1, r6
   22fe0:	add	r1, r1, r5
   22fe4:	sub	r3, r3, r6
   22fe8:	add	r3, r3, r5
   22fec:	str	r1, [r4, #48]	; 0x30
   22ff0:	mov	r1, #0
   22ff4:	str	r3, [r4, #56]	; 0x38
   22ff8:	strb	r1, [r4, #76]	; 0x4c
   22ffc:	b	22bc0 <__assert_fail@plt+0x1101c>
   23000:	sub	r8, r8, r6
   23004:	cmn	r2, #1
   23008:	ldr	r5, [sp, #4]
   2300c:	mov	r9, r2
   23010:	str	r8, [r4, #28]
   23014:	bne	23064 <__assert_fail@plt+0x114c0>
   23018:	ldr	r3, [sp]
   2301c:	mov	r2, r7
   23020:	sub	r1, r3, #1
   23024:	mov	r0, r4
   23028:	bl	228d8 <__assert_fail@plt+0x10d34>
   2302c:	str	r0, [r4, #60]	; 0x3c
   23030:	cmp	r8, #0
   23034:	bne	230a4 <__assert_fail@plt+0x11500>
   23038:	ldrb	r2, [r4, #75]	; 0x4b
   2303c:	str	r8, [r4, #32]
   23040:	ldr	r3, [r4, #80]	; 0x50
   23044:	b	22ad0 <__assert_fail@plt+0x10f2c>
   23048:	ldr	r9, [sp, #12]
   2304c:	sub	r8, r0, r8
   23050:	cmn	r9, #1
   23054:	str	sl, [r4, #16]
   23058:	str	sl, [r4, #20]
   2305c:	str	r8, [r4, #28]
   23060:	beq	22ee8 <__assert_fail@plt+0x11344>
   23064:	ldrb	r3, [r4, #78]	; 0x4e
   23068:	cmp	r3, #0
   2306c:	bne	230e0 <__assert_fail@plt+0x1153c>
   23070:	cmp	r9, #10
   23074:	movne	r3, #0
   23078:	beq	23084 <__assert_fail@plt+0x114e0>
   2307c:	str	r3, [r4, #60]	; 0x3c
   23080:	b	23030 <__assert_fail@plt+0x1148c>
   23084:	ldrb	r3, [r4, #77]	; 0x4d
   23088:	cmp	r3, #0
   2308c:	movne	r3, #2
   23090:	moveq	r3, #0
   23094:	b	2307c <__assert_fail@plt+0x114d8>
   23098:	mov	r0, r4
   2309c:	bl	1f3dc <__assert_fail@plt+0xd838>
   230a0:	b	22b18 <__assert_fail@plt+0x10f74>
   230a4:	ble	230cc <__assert_fail@plt+0x11528>
   230a8:	ldr	r2, [r4, #8]
   230ac:	mov	r3, #0
   230b0:	sub	r2, r2, #4
   230b4:	mvn	r1, #0
   230b8:	str	r1, [r2, #4]!
   230bc:	ldr	r8, [r4, #28]
   230c0:	add	r3, r3, #1
   230c4:	cmp	r8, r3
   230c8:	bgt	230b8 <__assert_fail@plt+0x11514>
   230cc:	ldrb	r2, [r4, #75]	; 0x4b
   230d0:	cmp	r2, #0
   230d4:	bne	2311c <__assert_fail@plt+0x11578>
   230d8:	ldr	r8, [r4, #28]
   230dc:	b	2303c <__assert_fail@plt+0x11498>
   230e0:	mov	r0, r9
   230e4:	bl	119c4 <iswalnum@plt>
   230e8:	cmp	r9, #95	; 0x5f
   230ec:	clz	r0, r0
   230f0:	lsr	r0, r0, #5
   230f4:	moveq	r0, #0
   230f8:	cmp	r0, #0
   230fc:	moveq	r3, #1
   23100:	bne	23070 <__assert_fail@plt+0x114cc>
   23104:	b	2307c <__assert_fail@plt+0x114d8>
   23108:	ldrb	r1, [r4, #77]	; 0x4d
   2310c:	cmp	r1, #0
   23110:	movne	r1, #2
   23114:	moveq	r1, #0
   23118:	b	22f40 <__assert_fail@plt+0x1139c>
   2311c:	mov	r2, r8
   23120:	mov	r1, #255	; 0xff
   23124:	ldr	r0, [r4, #4]
   23128:	bl	119e8 <memset@plt>
   2312c:	ldrb	r2, [r4, #75]	; 0x4b
   23130:	b	230d8 <__assert_fail@plt+0x11534>
   23134:	cmp	r2, #6
   23138:	movlt	r0, r2
   2313c:	movge	r0, #6
   23140:	cmp	r0, #0
   23144:	ble	23188 <__assert_fail@plt+0x115e4>
   23148:	add	ip, sp, #16
   2314c:	mov	lr, ip
   23150:	mov	sl, ip
   23154:	sub	ip, r0, #1
   23158:	add	ip, lr, ip
   2315c:	add	r0, r1, r0
   23160:	ldrb	lr, [r0, #-1]!
   23164:	cmp	r1, r0
   23168:	ldrb	lr, [r3, lr]
   2316c:	strb	lr, [ip], #-1
   23170:	bne	23160 <__assert_fail@plt+0x115bc>
   23174:	mov	r1, sl
   23178:	b	22ea8 <__assert_fail@plt+0x11304>
   2317c:	sub	r8, r8, r6
   23180:	str	r8, [r4, #28]
   23184:	b	23018 <__assert_fail@plt+0x11474>
   23188:	add	r3, sp, #16
   2318c:	mov	sl, r3
   23190:	b	23174 <__assert_fail@plt+0x115d0>
   23194:	ldrb	ip, [r1, #4]
   23198:	ldr	r3, [r0, #4]
   2319c:	push	{r4, lr}
   231a0:	sub	ip, ip, #1
   231a4:	ldrb	r3, [r3, r2]
   231a8:	cmp	ip, #6
   231ac:	ldrls	pc, [pc, ip, lsl #2]
   231b0:	b	231dc <__assert_fail@plt+0x11638>
   231b4:	ldrdeq	r3, [r2], -r0
   231b8:	ldrdeq	r3, [r2], -ip
   231bc:	andeq	r3, r2, r0, ror r2
   231c0:	ldrdeq	r3, [r2], -ip
   231c4:	andeq	r3, r2, ip, ror #3
   231c8:	ldrdeq	r3, [r2], -ip
   231cc:	andeq	r3, r2, r4, ror #3
   231d0:	ldrb	ip, [r1]
   231d4:	cmp	ip, r3
   231d8:	beq	2320c <__assert_fail@plt+0x11668>
   231dc:	mov	r0, #0
   231e0:	pop	{r4, pc}
   231e4:	tst	r3, #128	; 0x80
   231e8:	bne	231dc <__assert_fail@plt+0x11638>
   231ec:	cmp	r3, #10
   231f0:	beq	232ac <__assert_fail@plt+0x11708>
   231f4:	cmp	r3, #0
   231f8:	bne	2320c <__assert_fail@plt+0x11668>
   231fc:	ldr	ip, [r0, #84]	; 0x54
   23200:	ldr	ip, [ip, #128]	; 0x80
   23204:	tst	ip, #128	; 0x80
   23208:	bne	231dc <__assert_fail@plt+0x11638>
   2320c:	ldr	r4, [r1, #4]
   23210:	ldr	r3, [pc, #168]	; 232c0 <__assert_fail@plt+0x1171c>
   23214:	and	r3, r3, r4
   23218:	cmp	r3, #0
   2321c:	beq	23290 <__assert_fail@plt+0x116ec>
   23220:	mov	r1, r2
   23224:	ldr	r2, [r0, #88]	; 0x58
   23228:	bl	228d8 <__assert_fail@plt+0x10d34>
   2322c:	ldr	r1, [pc, #144]	; 232c4 <__assert_fail@plt+0x11720>
   23230:	and	r1, r1, r4, lsr #8
   23234:	ands	r2, r1, #4
   23238:	bne	23298 <__assert_fail@plt+0x116f4>
   2323c:	tst	r1, #8
   23240:	beq	2324c <__assert_fail@plt+0x116a8>
   23244:	tst	r0, #1
   23248:	bne	231dc <__assert_fail@plt+0x11638>
   2324c:	tst	r1, #32
   23250:	beq	2325c <__assert_fail@plt+0x116b8>
   23254:	ands	r3, r0, #2
   23258:	beq	231dc <__assert_fail@plt+0x11638>
   2325c:	tst	r1, #128	; 0x80
   23260:	beq	23290 <__assert_fail@plt+0x116ec>
   23264:	lsr	r0, r0, #3
   23268:	and	r0, r0, #1
   2326c:	pop	{r4, pc}
   23270:	ldr	ip, [r1]
   23274:	asr	lr, r3, #5
   23278:	and	r3, r3, #31
   2327c:	ldr	ip, [ip, lr, lsl #2]
   23280:	lsr	r3, ip, r3
   23284:	ands	r3, r3, #1
   23288:	bne	2320c <__assert_fail@plt+0x11668>
   2328c:	b	231dc <__assert_fail@plt+0x11638>
   23290:	mov	r0, #1
   23294:	pop	{r4, pc}
   23298:	ands	r3, r0, #1
   2329c:	beq	231dc <__assert_fail@plt+0x11638>
   232a0:	tst	r1, #8
   232a4:	bne	231dc <__assert_fail@plt+0x11638>
   232a8:	b	2324c <__assert_fail@plt+0x116a8>
   232ac:	ldr	r3, [r0, #84]	; 0x54
   232b0:	ldr	r3, [r3, #128]	; 0x80
   232b4:	ands	r3, r3, #64	; 0x40
   232b8:	bne	2320c <__assert_fail@plt+0x11668>
   232bc:	b	231dc <__assert_fail@plt+0x11638>
   232c0:	andeq	pc, r3, r0, lsl #30
   232c4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   232c8:	push	{r4, r5, r6, r7, r8, lr}
   232cc:	mov	r4, r1
   232d0:	mov	r1, r2
   232d4:	ldr	r2, [r0, #88]	; 0x58
   232d8:	mov	r5, r0
   232dc:	bl	228d8 <__assert_fail@plt+0x10d34>
   232e0:	ldr	lr, [r4, #8]
   232e4:	cmp	lr, #0
   232e8:	ble	23388 <__assert_fail@plt+0x117e4>
   232ec:	ldr	r3, [r5, #84]	; 0x54
   232f0:	ldr	r1, [r4, #12]
   232f4:	ldr	r5, [pc, #168]	; 233a4 <__assert_fail@plt+0x11800>
   232f8:	ldr	r4, [r3]
   232fc:	sub	r1, r1, #4
   23300:	mov	r2, #0
   23304:	and	r8, r0, #8
   23308:	and	r7, r0, #2
   2330c:	and	r6, r0, #1
   23310:	b	23320 <__assert_fail@plt+0x1177c>
   23314:	add	r2, r2, #1
   23318:	cmp	r2, lr
   2331c:	beq	23388 <__assert_fail@plt+0x117e4>
   23320:	ldr	r0, [r1, #4]!
   23324:	add	r3, r4, r0, lsl #3
   23328:	ldrb	ip, [r3, #4]
   2332c:	ldr	r3, [r3, #4]
   23330:	cmp	ip, #2
   23334:	and	r3, r5, r3, lsr #8
   23338:	bne	23314 <__assert_fail@plt+0x11770>
   2333c:	cmp	r3, #0
   23340:	popeq	{r4, r5, r6, r7, r8, pc}
   23344:	tst	r3, #4
   23348:	beq	23390 <__assert_fail@plt+0x117ec>
   2334c:	cmp	r6, #0
   23350:	beq	23314 <__assert_fail@plt+0x11770>
   23354:	tst	r3, #8
   23358:	bne	23314 <__assert_fail@plt+0x11770>
   2335c:	tst	r3, #32
   23360:	beq	2336c <__assert_fail@plt+0x117c8>
   23364:	cmp	r7, #0
   23368:	beq	23314 <__assert_fail@plt+0x11770>
   2336c:	tst	r3, #128	; 0x80
   23370:	popeq	{r4, r5, r6, r7, r8, pc}
   23374:	cmp	r8, #0
   23378:	popne	{r4, r5, r6, r7, r8, pc}
   2337c:	add	r2, r2, #1
   23380:	cmp	r2, lr
   23384:	bne	23320 <__assert_fail@plt+0x1177c>
   23388:	mov	r0, #0
   2338c:	pop	{r4, r5, r6, r7, r8, pc}
   23390:	tst	r3, #8
   23394:	beq	2335c <__assert_fail@plt+0x117b8>
   23398:	cmp	r6, #0
   2339c:	beq	2335c <__assert_fail@plt+0x117b8>
   233a0:	b	23314 <__assert_fail@plt+0x11770>
   233a4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   233a8:	ldr	ip, [r1]
   233ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233b0:	cmp	ip, #0
   233b4:	sub	sp, sp, #20
   233b8:	ldr	r6, [r0, #84]	; 0x54
   233bc:	ble	23488 <__assert_fail@plt+0x118e4>
   233c0:	mov	r7, r2
   233c4:	str	r3, [sp, #8]
   233c8:	mov	r8, r0
   233cc:	str	r1, [sp, #4]
   233d0:	mov	r4, #0
   233d4:	mov	r2, #24
   233d8:	mov	r9, #1
   233dc:	b	233e8 <__assert_fail@plt+0x11844>
   233e0:	cmp	r4, ip
   233e4:	bge	23488 <__assert_fail@plt+0x118e4>
   233e8:	ldr	r1, [r7]
   233ec:	ldr	r3, [r6]
   233f0:	ldr	r5, [r1, r4, lsl #2]
   233f4:	add	r4, r4, #1
   233f8:	add	r1, r3, r5, lsl #3
   233fc:	ldrb	r1, [r1, #4]
   23400:	cmp	r1, #8
   23404:	bne	233e0 <__assert_fail@plt+0x1183c>
   23408:	ldr	r3, [r3, r5, lsl #3]
   2340c:	cmp	r3, #31
   23410:	bgt	233e0 <__assert_fail@plt+0x1183c>
   23414:	ldr	r1, [r6, #80]	; 0x50
   23418:	lsr	r3, r1, r3
   2341c:	tst	r3, #1
   23420:	beq	233e0 <__assert_fail@plt+0x1183c>
   23424:	ldr	sl, [r8, #124]	; 0x7c
   23428:	ldr	r3, [r8, #128]	; 0x80
   2342c:	ldr	fp, [r8, #132]	; 0x84
   23430:	cmp	r3, sl
   23434:	beq	2349c <__assert_fail@plt+0x118f8>
   23438:	mov	r1, r2
   2343c:	mov	r0, r9
   23440:	str	r2, [sp, #12]
   23444:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   23448:	ldr	r3, [r8, #124]	; 0x7c
   2344c:	ldr	r1, [r8, #132]	; 0x84
   23450:	add	ip, r3, #1
   23454:	str	r0, [fp, sl, lsl #2]
   23458:	ldr	r3, [r1, r3, lsl #2]
   2345c:	cmp	r3, #0
   23460:	beq	23494 <__assert_fail@plt+0x118f0>
   23464:	ldr	r2, [sp, #8]
   23468:	str	r5, [r3, #4]
   2346c:	str	ip, [r8, #124]	; 0x7c
   23470:	str	r2, [r3]
   23474:	ldr	r3, [sp, #4]
   23478:	ldr	r2, [sp, #12]
   2347c:	ldr	ip, [r3]
   23480:	cmp	r4, ip
   23484:	blt	233e8 <__assert_fail@plt+0x11844>
   23488:	mov	r0, #0
   2348c:	add	sp, sp, #20
   23490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23494:	mov	r0, #12
   23498:	b	2348c <__assert_fail@plt+0x118e8>
   2349c:	mov	r0, fp
   234a0:	lsl	r1, sl, #3
   234a4:	str	r2, [sp, #12]
   234a8:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   234ac:	lsl	r3, sl, #1
   234b0:	ldr	r2, [sp, #12]
   234b4:	subs	fp, r0, #0
   234b8:	beq	23494 <__assert_fail@plt+0x118f0>
   234bc:	ldr	sl, [r8, #124]	; 0x7c
   234c0:	str	fp, [r8, #132]	; 0x84
   234c4:	str	r3, [r8, #128]	; 0x80
   234c8:	b	23438 <__assert_fail@plt+0x11894>
   234cc:	push	{r4, r5, r6, lr}
   234d0:	mov	r5, r0
   234d4:	mov	r0, r1
   234d8:	mov	r4, r1
   234dc:	bl	11988 <strlen@plt>
   234e0:	cmp	r0, #1
   234e4:	moveq	r1, #0
   234e8:	ldrbeq	r3, [r4]
   234ec:	movne	r1, #3
   234f0:	andeq	ip, r3, #31
   234f4:	asreq	r3, r3, #5
   234f8:	ldreq	r2, [r5, r3, lsl #2]
   234fc:	orreq	r2, r2, r0, lsl ip
   23500:	mov	r0, r1
   23504:	streq	r2, [r5, r3, lsl #2]
   23508:	pop	{r4, r5, r6, pc}
   2350c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23510:	mov	r6, r0
   23514:	ldr	ip, [sp, #40]	; 0x28
   23518:	mov	r5, r1
   2351c:	tst	ip, #4194304	; 0x400000
   23520:	mov	sl, r2
   23524:	mov	r7, r3
   23528:	ldr	r9, [sp, #32]
   2352c:	beq	2354c <__assert_fail@plt+0x119a8>
   23530:	ldr	r1, [pc, #2196]	; 23dcc <__assert_fail@plt+0x12228>
   23534:	ldr	r0, [sp, #36]	; 0x24
   23538:	bl	1170c <strcmp@plt>
   2353c:	cmp	r0, #0
   23540:	bne	2362c <__assert_fail@plt+0x11a88>
   23544:	ldr	r3, [pc, #2180]	; 23dd0 <__assert_fail@plt+0x1222c>
   23548:	str	r3, [sp, #36]	; 0x24
   2354c:	ldr	r4, [r7]
   23550:	ldr	r3, [r9]
   23554:	cmp	r3, r4
   23558:	beq	2365c <__assert_fail@plt+0x11ab8>
   2355c:	ldr	r8, [sl]
   23560:	add	r3, r4, #1
   23564:	str	r3, [r7]
   23568:	ldr	r0, [sp, #36]	; 0x24
   2356c:	bl	116c4 <wctype@plt>
   23570:	ldr	r1, [pc, #2140]	; 23dd4 <__assert_fail@plt+0x12230>
   23574:	str	r0, [r8, r4, lsl #2]
   23578:	ldr	r0, [sp, #36]	; 0x24
   2357c:	bl	1170c <strcmp@plt>
   23580:	subs	r4, r0, #0
   23584:	beq	235e4 <__assert_fail@plt+0x11a40>
   23588:	ldr	r1, [pc, #2120]	; 23dd8 <__assert_fail@plt+0x12234>
   2358c:	ldr	r0, [sp, #36]	; 0x24
   23590:	bl	1170c <strcmp@plt>
   23594:	subs	r4, r0, #0
   23598:	bne	23688 <__assert_fail@plt+0x11ae4>
   2359c:	cmp	r6, #0
   235a0:	bne	2383c <__assert_fail@plt+0x11c98>
   235a4:	bl	11964 <__ctype_b_loc@plt>
   235a8:	mov	ip, #1
   235ac:	ldr	r3, [r0]
   235b0:	sub	r3, r3, #2
   235b4:	ldrh	r2, [r3, #2]!
   235b8:	asr	r1, r4, #5
   235bc:	and	r0, r4, #31
   235c0:	tst	r2, #2
   235c4:	add	r4, r4, #1
   235c8:	ldrne	r2, [r5, r1, lsl #2]
   235cc:	orrne	r2, r2, ip, lsl r0
   235d0:	strne	r2, [r5, r1, lsl #2]
   235d4:	cmp	r4, #256	; 0x100
   235d8:	bne	235b4 <__assert_fail@plt+0x11a10>
   235dc:	mov	r0, #0
   235e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   235e4:	cmp	r6, #0
   235e8:	bne	237a8 <__assert_fail@plt+0x11c04>
   235ec:	bl	11964 <__ctype_b_loc@plt>
   235f0:	mov	lr, #1
   235f4:	ldr	r3, [r0]
   235f8:	sub	r3, r3, #2
   235fc:	ldrh	r0, [r3, #2]!
   23600:	asr	r2, r4, #5
   23604:	and	ip, r4, #31
   23608:	tst	r0, #8
   2360c:	add	r4, r4, #1
   23610:	ldrne	r1, [r5, r2, lsl #2]
   23614:	orrne	r1, r1, lr, lsl ip
   23618:	strne	r1, [r5, r2, lsl #2]
   2361c:	cmp	r4, #256	; 0x100
   23620:	bne	235fc <__assert_fail@plt+0x11a58>
   23624:	mov	r0, #0
   23628:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2362c:	ldr	r0, [sp, #36]	; 0x24
   23630:	ldr	r1, [pc, #1956]	; 23ddc <__assert_fail@plt+0x12238>
   23634:	bl	1170c <strcmp@plt>
   23638:	ldr	r3, [pc, #1936]	; 23dd0 <__assert_fail@plt+0x1222c>
   2363c:	ldr	r2, [sp, #36]	; 0x24
   23640:	ldr	r4, [r7]
   23644:	cmp	r0, #0
   23648:	moveq	r2, r3
   2364c:	ldr	r3, [r9]
   23650:	str	r2, [sp, #36]	; 0x24
   23654:	cmp	r3, r4
   23658:	bne	2355c <__assert_fail@plt+0x119b8>
   2365c:	lsl	r4, r4, #1
   23660:	add	r4, r4, #1
   23664:	ldr	r0, [sl]
   23668:	lsl	r1, r4, #2
   2366c:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   23670:	subs	r8, r0, #0
   23674:	beq	23934 <__assert_fail@plt+0x11d90>
   23678:	str	r8, [sl]
   2367c:	str	r4, [r9]
   23680:	ldr	r4, [r7]
   23684:	b	23560 <__assert_fail@plt+0x119bc>
   23688:	ldr	r1, [pc, #1868]	; 23ddc <__assert_fail@plt+0x12238>
   2368c:	ldr	r0, [sp, #36]	; 0x24
   23690:	bl	1170c <strcmp@plt>
   23694:	subs	r4, r0, #0
   23698:	beq	236f4 <__assert_fail@plt+0x11b50>
   2369c:	ldr	r1, [pc, #1852]	; 23de0 <__assert_fail@plt+0x1223c>
   236a0:	ldr	r0, [sp, #36]	; 0x24
   236a4:	bl	1170c <strcmp@plt>
   236a8:	subs	r4, r0, #0
   236ac:	bne	2373c <__assert_fail@plt+0x11b98>
   236b0:	cmp	r6, #0
   236b4:	bne	23994 <__assert_fail@plt+0x11df0>
   236b8:	bl	11964 <__ctype_b_loc@plt>
   236bc:	mov	ip, #1
   236c0:	ldr	r3, [r0]
   236c4:	sub	r3, r3, #2
   236c8:	ldrh	r2, [r3, #2]!
   236cc:	asr	r1, r4, #5
   236d0:	and	r0, r4, #31
   236d4:	tst	r2, #8192	; 0x2000
   236d8:	add	r4, r4, #1
   236dc:	ldrne	r2, [r5, r1, lsl #2]
   236e0:	orrne	r2, r2, ip, lsl r0
   236e4:	strne	r2, [r5, r1, lsl #2]
   236e8:	cmp	r4, #256	; 0x100
   236ec:	bne	236c8 <__assert_fail@plt+0x11b24>
   236f0:	b	235dc <__assert_fail@plt+0x11a38>
   236f4:	cmp	r6, #0
   236f8:	bne	238e4 <__assert_fail@plt+0x11d40>
   236fc:	bl	11964 <__ctype_b_loc@plt>
   23700:	mov	ip, #1
   23704:	ldr	r3, [r0]
   23708:	sub	r3, r3, #2
   2370c:	ldrh	r2, [r3, #2]!
   23710:	asr	r1, r4, #5
   23714:	and	r0, r4, #31
   23718:	tst	r2, #512	; 0x200
   2371c:	add	r4, r4, #1
   23720:	ldrne	r2, [r5, r1, lsl #2]
   23724:	orrne	r2, r2, ip, lsl r0
   23728:	strne	r2, [r5, r1, lsl #2]
   2372c:	cmp	r4, #256	; 0x100
   23730:	bne	2370c <__assert_fail@plt+0x11b68>
   23734:	mov	r0, #0
   23738:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2373c:	ldr	r1, [pc, #1676]	; 23dd0 <__assert_fail@plt+0x1222c>
   23740:	ldr	r0, [sp, #36]	; 0x24
   23744:	bl	1170c <strcmp@plt>
   23748:	subs	r4, r0, #0
   2374c:	beq	237f8 <__assert_fail@plt+0x11c54>
   23750:	ldr	r1, [pc, #1676]	; 23de4 <__assert_fail@plt+0x12240>
   23754:	ldr	r0, [sp, #36]	; 0x24
   23758:	bl	1170c <strcmp@plt>
   2375c:	subs	r4, r0, #0
   23760:	bne	2388c <__assert_fail@plt+0x11ce8>
   23764:	cmp	r6, #0
   23768:	bne	23b84 <__assert_fail@plt+0x11fe0>
   2376c:	bl	11964 <__ctype_b_loc@plt>
   23770:	mov	ip, #1
   23774:	ldr	r3, [r0]
   23778:	sub	r3, r3, #2
   2377c:	ldrh	r1, [r3, #2]!
   23780:	asr	r2, r4, #5
   23784:	and	r0, r4, #31
   23788:	tst	r1, #2048	; 0x800
   2378c:	add	r4, r4, #1
   23790:	ldrne	r1, [r5, r2, lsl #2]
   23794:	orrne	r1, r1, ip, lsl r0
   23798:	strne	r1, [r5, r2, lsl #2]
   2379c:	cmp	r4, #256	; 0x100
   237a0:	bne	2377c <__assert_fail@plt+0x11bd8>
   237a4:	b	235dc <__assert_fail@plt+0x11a38>
   237a8:	bl	11964 <__ctype_b_loc@plt>
   237ac:	mov	r4, #1
   237b0:	mov	r1, r6
   237b4:	ldr	r3, [r0]
   237b8:	add	ip, r3, #508	; 0x1fc
   237bc:	add	ip, ip, #2
   237c0:	sub	r3, r3, #2
   237c4:	ldrh	r2, [r3, #2]!
   237c8:	tst	r2, #8
   237cc:	beq	237e8 <__assert_fail@plt+0x11c44>
   237d0:	ldrb	r2, [r1]
   237d4:	and	lr, r2, #31
   237d8:	asr	r2, r2, #5
   237dc:	ldr	r0, [r5, r2, lsl #2]
   237e0:	orr	r0, r0, r4, lsl lr
   237e4:	str	r0, [r5, r2, lsl #2]
   237e8:	cmp	ip, r3
   237ec:	add	r1, r1, #1
   237f0:	bne	237c4 <__assert_fail@plt+0x11c20>
   237f4:	b	235dc <__assert_fail@plt+0x11a38>
   237f8:	cmp	r6, #0
   237fc:	bne	239e4 <__assert_fail@plt+0x11e40>
   23800:	bl	11964 <__ctype_b_loc@plt>
   23804:	mov	ip, #1
   23808:	ldr	r3, [r0]
   2380c:	sub	r3, r3, #2
   23810:	ldrh	r2, [r3, #2]!
   23814:	asr	r1, r4, #5
   23818:	and	r0, r4, #31
   2381c:	tst	r2, #1024	; 0x400
   23820:	add	r4, r4, #1
   23824:	ldrne	r2, [r5, r1, lsl #2]
   23828:	orrne	r2, r2, ip, lsl r0
   2382c:	strne	r2, [r5, r1, lsl #2]
   23830:	cmp	r4, #256	; 0x100
   23834:	bne	23810 <__assert_fail@plt+0x11c6c>
   23838:	b	235dc <__assert_fail@plt+0x11a38>
   2383c:	bl	11964 <__ctype_b_loc@plt>
   23840:	mov	r4, #1
   23844:	mov	r1, r6
   23848:	ldr	r3, [r0]
   2384c:	add	ip, r3, #508	; 0x1fc
   23850:	add	ip, ip, #2
   23854:	sub	r3, r3, #2
   23858:	ldrh	r2, [r3, #2]!
   2385c:	tst	r2, #2
   23860:	beq	2387c <__assert_fail@plt+0x11cd8>
   23864:	ldrb	r2, [r1]
   23868:	and	lr, r2, #31
   2386c:	asr	r2, r2, #5
   23870:	ldr	r0, [r5, r2, lsl #2]
   23874:	orr	r0, r0, r4, lsl lr
   23878:	str	r0, [r5, r2, lsl #2]
   2387c:	cmp	ip, r3
   23880:	add	r1, r1, #1
   23884:	bne	23858 <__assert_fail@plt+0x11cb4>
   23888:	b	235dc <__assert_fail@plt+0x11a38>
   2388c:	ldr	r1, [pc, #1364]	; 23de8 <__assert_fail@plt+0x12244>
   23890:	ldr	r0, [sp, #36]	; 0x24
   23894:	bl	1170c <strcmp@plt>
   23898:	subs	r4, r0, #0
   2389c:	bne	2393c <__assert_fail@plt+0x11d98>
   238a0:	cmp	r6, #0
   238a4:	bne	23bd4 <__assert_fail@plt+0x12030>
   238a8:	bl	11964 <__ctype_b_loc@plt>
   238ac:	mov	ip, #1
   238b0:	ldr	r3, [r0]
   238b4:	sub	r3, r3, #2
   238b8:	ldrh	r2, [r3, #2]!
   238bc:	asr	r1, r4, #5
   238c0:	and	r0, r4, #31
   238c4:	tst	r2, #16384	; 0x4000
   238c8:	add	r4, r4, #1
   238cc:	ldrne	r2, [r5, r1, lsl #2]
   238d0:	orrne	r2, r2, ip, lsl r0
   238d4:	strne	r2, [r5, r1, lsl #2]
   238d8:	cmp	r4, #256	; 0x100
   238dc:	bne	238b8 <__assert_fail@plt+0x11d14>
   238e0:	b	235dc <__assert_fail@plt+0x11a38>
   238e4:	bl	11964 <__ctype_b_loc@plt>
   238e8:	mov	r4, #1
   238ec:	mov	r1, r6
   238f0:	ldr	r3, [r0]
   238f4:	add	ip, r3, #508	; 0x1fc
   238f8:	add	ip, ip, #2
   238fc:	sub	r3, r3, #2
   23900:	ldrh	r2, [r3, #2]!
   23904:	tst	r2, #512	; 0x200
   23908:	beq	23924 <__assert_fail@plt+0x11d80>
   2390c:	ldrb	r2, [r1]
   23910:	and	lr, r2, #31
   23914:	asr	r2, r2, #5
   23918:	ldr	r0, [r5, r2, lsl #2]
   2391c:	orr	r0, r0, r4, lsl lr
   23920:	str	r0, [r5, r2, lsl #2]
   23924:	cmp	ip, r3
   23928:	add	r1, r1, #1
   2392c:	bne	23900 <__assert_fail@plt+0x11d5c>
   23930:	b	235dc <__assert_fail@plt+0x11a38>
   23934:	mov	r0, #12
   23938:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2393c:	ldr	r1, [pc, #1160]	; 23dcc <__assert_fail@plt+0x12228>
   23940:	ldr	r0, [sp, #36]	; 0x24
   23944:	bl	1170c <strcmp@plt>
   23948:	subs	r4, r0, #0
   2394c:	bne	23a34 <__assert_fail@plt+0x11e90>
   23950:	cmp	r6, #0
   23954:	bne	23a8c <__assert_fail@plt+0x11ee8>
   23958:	bl	11964 <__ctype_b_loc@plt>
   2395c:	mov	ip, #1
   23960:	ldr	r3, [r0]
   23964:	sub	r3, r3, #2
   23968:	ldrh	r2, [r3, #2]!
   2396c:	asr	r1, r4, #5
   23970:	and	r0, r4, #31
   23974:	tst	r2, #256	; 0x100
   23978:	add	r4, r4, #1
   2397c:	ldrne	r2, [r5, r1, lsl #2]
   23980:	orrne	r2, r2, ip, lsl r0
   23984:	strne	r2, [r5, r1, lsl #2]
   23988:	cmp	r4, #256	; 0x100
   2398c:	bne	23968 <__assert_fail@plt+0x11dc4>
   23990:	b	235dc <__assert_fail@plt+0x11a38>
   23994:	bl	11964 <__ctype_b_loc@plt>
   23998:	mov	r4, #1
   2399c:	mov	r1, r6
   239a0:	ldr	r3, [r0]
   239a4:	add	ip, r3, #508	; 0x1fc
   239a8:	add	ip, ip, #2
   239ac:	sub	r3, r3, #2
   239b0:	ldrh	r2, [r3, #2]!
   239b4:	tst	r2, #8192	; 0x2000
   239b8:	beq	239d4 <__assert_fail@plt+0x11e30>
   239bc:	ldrb	r2, [r1]
   239c0:	and	lr, r2, #31
   239c4:	asr	r2, r2, #5
   239c8:	ldr	r0, [r5, r2, lsl #2]
   239cc:	orr	r0, r0, r4, lsl lr
   239d0:	str	r0, [r5, r2, lsl #2]
   239d4:	cmp	r3, ip
   239d8:	add	r1, r1, #1
   239dc:	bne	239b0 <__assert_fail@plt+0x11e0c>
   239e0:	b	235dc <__assert_fail@plt+0x11a38>
   239e4:	bl	11964 <__ctype_b_loc@plt>
   239e8:	mov	r4, #1
   239ec:	mov	r1, r6
   239f0:	ldr	r3, [r0]
   239f4:	add	ip, r3, #508	; 0x1fc
   239f8:	add	ip, ip, #2
   239fc:	sub	r3, r3, #2
   23a00:	ldrh	r2, [r3, #2]!
   23a04:	tst	r2, #1024	; 0x400
   23a08:	beq	23a24 <__assert_fail@plt+0x11e80>
   23a0c:	ldrb	r2, [r1]
   23a10:	and	lr, r2, #31
   23a14:	asr	r2, r2, #5
   23a18:	ldr	r0, [r5, r2, lsl #2]
   23a1c:	orr	r0, r0, r4, lsl lr
   23a20:	str	r0, [r5, r2, lsl #2]
   23a24:	cmp	ip, r3
   23a28:	add	r1, r1, #1
   23a2c:	bne	23a00 <__assert_fail@plt+0x11e5c>
   23a30:	b	235dc <__assert_fail@plt+0x11a38>
   23a34:	ldr	r1, [pc, #944]	; 23dec <__assert_fail@plt+0x12248>
   23a38:	ldr	r0, [sp, #36]	; 0x24
   23a3c:	bl	1170c <strcmp@plt>
   23a40:	subs	r4, r0, #0
   23a44:	bne	23b2c <__assert_fail@plt+0x11f88>
   23a48:	cmp	r6, #0
   23a4c:	bne	23adc <__assert_fail@plt+0x11f38>
   23a50:	bl	11964 <__ctype_b_loc@plt>
   23a54:	mov	ip, #1
   23a58:	ldr	r3, [r0]
   23a5c:	sub	r3, r3, #2
   23a60:	ldrh	r2, [r3, #2]!
   23a64:	asr	r1, r4, #5
   23a68:	and	r0, r4, #31
   23a6c:	tst	r2, #1
   23a70:	add	r4, r4, #1
   23a74:	ldrne	r2, [r5, r1, lsl #2]
   23a78:	orrne	r2, r2, ip, lsl r0
   23a7c:	strne	r2, [r5, r1, lsl #2]
   23a80:	cmp	r4, #256	; 0x100
   23a84:	bne	23a60 <__assert_fail@plt+0x11ebc>
   23a88:	b	235dc <__assert_fail@plt+0x11a38>
   23a8c:	bl	11964 <__ctype_b_loc@plt>
   23a90:	mov	r1, r6
   23a94:	mov	lr, #1
   23a98:	ldr	r3, [r0]
   23a9c:	add	r0, r3, #508	; 0x1fc
   23aa0:	add	r0, r0, #2
   23aa4:	sub	r3, r3, #2
   23aa8:	ldrh	r2, [r3, #2]!
   23aac:	tst	r2, #256	; 0x100
   23ab0:	beq	23acc <__assert_fail@plt+0x11f28>
   23ab4:	ldrb	r2, [r1]
   23ab8:	and	r4, r2, #31
   23abc:	asr	r2, r2, #5
   23ac0:	ldr	ip, [r5, r2, lsl #2]
   23ac4:	orr	ip, ip, lr, lsl r4
   23ac8:	str	ip, [r5, r2, lsl #2]
   23acc:	cmp	r0, r3
   23ad0:	add	r1, r1, #1
   23ad4:	bne	23aa8 <__assert_fail@plt+0x11f04>
   23ad8:	b	235dc <__assert_fail@plt+0x11a38>
   23adc:	bl	11964 <__ctype_b_loc@plt>
   23ae0:	mov	r1, r6
   23ae4:	mov	lr, #1
   23ae8:	ldr	r3, [r0]
   23aec:	add	r0, r3, #508	; 0x1fc
   23af0:	add	r0, r0, #2
   23af4:	sub	r3, r3, #2
   23af8:	ldrh	r2, [r3, #2]!
   23afc:	tst	r2, #1
   23b00:	beq	23b1c <__assert_fail@plt+0x11f78>
   23b04:	ldrb	r2, [r1]
   23b08:	and	r4, r2, #31
   23b0c:	asr	r2, r2, #5
   23b10:	ldr	ip, [r5, r2, lsl #2]
   23b14:	orr	ip, ip, lr, lsl r4
   23b18:	str	ip, [r5, r2, lsl #2]
   23b1c:	cmp	r0, r3
   23b20:	add	r1, r1, #1
   23b24:	bne	23af8 <__assert_fail@plt+0x11f54>
   23b28:	b	235dc <__assert_fail@plt+0x11a38>
   23b2c:	ldr	r1, [pc, #700]	; 23df0 <__assert_fail@plt+0x1224c>
   23b30:	ldr	r0, [sp, #36]	; 0x24
   23b34:	bl	1170c <strcmp@plt>
   23b38:	subs	r4, r0, #0
   23b3c:	bne	23c74 <__assert_fail@plt+0x120d0>
   23b40:	cmp	r6, #0
   23b44:	bne	23c24 <__assert_fail@plt+0x12080>
   23b48:	bl	11964 <__ctype_b_loc@plt>
   23b4c:	mov	ip, #1
   23b50:	ldr	r3, [r0]
   23b54:	sub	r3, r3, #2
   23b58:	ldrsh	r2, [r3, #2]!
   23b5c:	cmp	r2, #0
   23b60:	asrlt	r0, r4, #5
   23b64:	andlt	r1, r4, #31
   23b68:	ldrlt	r2, [r5, r0, lsl #2]
   23b6c:	add	r4, r4, #1
   23b70:	orrlt	r2, r2, ip, lsl r1
   23b74:	strlt	r2, [r5, r0, lsl #2]
   23b78:	cmp	r4, #256	; 0x100
   23b7c:	bne	23b58 <__assert_fail@plt+0x11fb4>
   23b80:	b	235dc <__assert_fail@plt+0x11a38>
   23b84:	bl	11964 <__ctype_b_loc@plt>
   23b88:	mov	r1, r6
   23b8c:	mov	lr, #1
   23b90:	ldr	r3, [r0]
   23b94:	add	r2, r3, #508	; 0x1fc
   23b98:	add	r2, r2, #2
   23b9c:	sub	r3, r3, #2
   23ba0:	ldrh	r0, [r3, #2]!
   23ba4:	tst	r0, #2048	; 0x800
   23ba8:	beq	23bc4 <__assert_fail@plt+0x12020>
   23bac:	ldrb	r0, [r1]
   23bb0:	and	r4, r0, #31
   23bb4:	asr	r0, r0, #5
   23bb8:	ldr	ip, [r5, r0, lsl #2]
   23bbc:	orr	ip, ip, lr, lsl r4
   23bc0:	str	ip, [r5, r0, lsl #2]
   23bc4:	cmp	r2, r3
   23bc8:	add	r1, r1, #1
   23bcc:	bne	23ba0 <__assert_fail@plt+0x11ffc>
   23bd0:	b	235dc <__assert_fail@plt+0x11a38>
   23bd4:	bl	11964 <__ctype_b_loc@plt>
   23bd8:	mov	r1, r6
   23bdc:	mov	lr, #1
   23be0:	ldr	r3, [r0]
   23be4:	add	r0, r3, #508	; 0x1fc
   23be8:	add	r0, r0, #2
   23bec:	sub	r3, r3, #2
   23bf0:	ldrh	r2, [r3, #2]!
   23bf4:	tst	r2, #16384	; 0x4000
   23bf8:	beq	23c14 <__assert_fail@plt+0x12070>
   23bfc:	ldrb	r2, [r1]
   23c00:	and	r4, r2, #31
   23c04:	asr	r2, r2, #5
   23c08:	ldr	ip, [r5, r2, lsl #2]
   23c0c:	orr	ip, ip, lr, lsl r4
   23c10:	str	ip, [r5, r2, lsl #2]
   23c14:	cmp	r0, r3
   23c18:	add	r1, r1, #1
   23c1c:	bne	23bf0 <__assert_fail@plt+0x1204c>
   23c20:	b	235dc <__assert_fail@plt+0x11a38>
   23c24:	bl	11964 <__ctype_b_loc@plt>
   23c28:	mov	r1, r6
   23c2c:	mov	lr, #1
   23c30:	ldr	r3, [r0]
   23c34:	add	r0, r3, #508	; 0x1fc
   23c38:	add	r0, r0, #2
   23c3c:	sub	r3, r3, #2
   23c40:	ldrsh	r2, [r3, #2]!
   23c44:	cmp	r2, #0
   23c48:	bge	23c64 <__assert_fail@plt+0x120c0>
   23c4c:	ldrb	r2, [r1]
   23c50:	and	r4, r2, #31
   23c54:	asr	r2, r2, #5
   23c58:	ldr	ip, [r5, r2, lsl #2]
   23c5c:	orr	ip, ip, lr, lsl r4
   23c60:	str	ip, [r5, r2, lsl #2]
   23c64:	cmp	r0, r3
   23c68:	add	r1, r1, #1
   23c6c:	bne	23c40 <__assert_fail@plt+0x1209c>
   23c70:	b	235dc <__assert_fail@plt+0x11a38>
   23c74:	ldr	r1, [pc, #376]	; 23df4 <__assert_fail@plt+0x12250>
   23c78:	ldr	r0, [sp, #36]	; 0x24
   23c7c:	bl	1170c <strcmp@plt>
   23c80:	subs	r4, r0, #0
   23c84:	bne	23ccc <__assert_fail@plt+0x12128>
   23c88:	cmp	r6, #0
   23c8c:	bne	23ce8 <__assert_fail@plt+0x12144>
   23c90:	bl	11964 <__ctype_b_loc@plt>
   23c94:	mov	ip, #1
   23c98:	ldr	r3, [r0]
   23c9c:	sub	r3, r3, #2
   23ca0:	ldrh	r2, [r3, #2]!
   23ca4:	asr	r1, r4, #5
   23ca8:	and	r0, r4, #31
   23cac:	tst	r2, #4
   23cb0:	add	r4, r4, #1
   23cb4:	ldrne	r2, [r5, r1, lsl #2]
   23cb8:	orrne	r2, r2, ip, lsl r0
   23cbc:	strne	r2, [r5, r1, lsl #2]
   23cc0:	cmp	r4, #256	; 0x100
   23cc4:	bne	23ca0 <__assert_fail@plt+0x120fc>
   23cc8:	b	235dc <__assert_fail@plt+0x11a38>
   23ccc:	ldr	r1, [pc, #292]	; 23df8 <__assert_fail@plt+0x12254>
   23cd0:	ldr	r0, [sp, #36]	; 0x24
   23cd4:	bl	1170c <strcmp@plt>
   23cd8:	subs	r4, r0, #0
   23cdc:	beq	23d38 <__assert_fail@plt+0x12194>
   23ce0:	mov	r0, #4
   23ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23ce8:	bl	11964 <__ctype_b_loc@plt>
   23cec:	mov	r1, r6
   23cf0:	mov	lr, #1
   23cf4:	ldr	r3, [r0]
   23cf8:	add	r0, r3, #508	; 0x1fc
   23cfc:	add	r0, r0, #2
   23d00:	sub	r3, r3, #2
   23d04:	ldrh	r2, [r3, #2]!
   23d08:	tst	r2, #4
   23d0c:	beq	23d28 <__assert_fail@plt+0x12184>
   23d10:	ldrb	r2, [r1]
   23d14:	and	r4, r2, #31
   23d18:	asr	r2, r2, #5
   23d1c:	ldr	ip, [r5, r2, lsl #2]
   23d20:	orr	ip, ip, lr, lsl r4
   23d24:	str	ip, [r5, r2, lsl #2]
   23d28:	cmp	r3, r0
   23d2c:	add	r1, r1, #1
   23d30:	bne	23d04 <__assert_fail@plt+0x12160>
   23d34:	b	235dc <__assert_fail@plt+0x11a38>
   23d38:	cmp	r6, #0
   23d3c:	bne	23d7c <__assert_fail@plt+0x121d8>
   23d40:	bl	11964 <__ctype_b_loc@plt>
   23d44:	mov	ip, #1
   23d48:	ldr	r3, [r0]
   23d4c:	sub	r3, r3, #2
   23d50:	ldrh	r2, [r3, #2]!
   23d54:	asr	r1, r4, #5
   23d58:	and	r0, r4, #31
   23d5c:	tst	r2, #4096	; 0x1000
   23d60:	add	r4, r4, #1
   23d64:	ldrne	r2, [r5, r1, lsl #2]
   23d68:	orrne	r2, r2, ip, lsl r0
   23d6c:	strne	r2, [r5, r1, lsl #2]
   23d70:	cmp	r4, #256	; 0x100
   23d74:	bne	23d50 <__assert_fail@plt+0x121ac>
   23d78:	b	235dc <__assert_fail@plt+0x11a38>
   23d7c:	bl	11964 <__ctype_b_loc@plt>
   23d80:	mov	r1, r6
   23d84:	mov	lr, #1
   23d88:	ldr	r3, [r0]
   23d8c:	add	r0, r3, #508	; 0x1fc
   23d90:	add	r0, r0, #2
   23d94:	sub	r3, r3, #2
   23d98:	ldrh	r2, [r3, #2]!
   23d9c:	tst	r2, #4096	; 0x1000
   23da0:	beq	23dbc <__assert_fail@plt+0x12218>
   23da4:	ldrb	r2, [r1]
   23da8:	and	r4, r2, #31
   23dac:	asr	r2, r2, #5
   23db0:	ldr	ip, [r5, r2, lsl #2]
   23db4:	orr	ip, ip, lr, lsl r4
   23db8:	str	ip, [r5, r2, lsl #2]
   23dbc:	cmp	r0, r3
   23dc0:	add	r1, r1, #1
   23dc4:	bne	23d98 <__assert_fail@plt+0x121f4>
   23dc8:	b	235dc <__assert_fail@plt+0x11a38>
   23dcc:	andeq	r1, r3, ip, ror r0
   23dd0:	andeq	r1, r3, r4, ror r0
   23dd4:	andeq	r1, r3, ip, lsl #1
   23dd8:	muleq	r3, r4, r0
   23ddc:	andeq	r1, r3, r4, lsl #1
   23de0:	muleq	r3, ip, r0
   23de4:	andeq	r1, r3, r4, lsr #1
   23de8:	andeq	r1, r3, ip, lsr #1
   23dec:	strheq	r1, [r3], -r4
   23df0:	strheq	r1, [r3], -ip
   23df4:	andeq	r1, r3, r4, asr #1
   23df8:	andeq	r1, r3, ip, asr #1
   23dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e00:	sub	sp, sp, #44	; 0x2c
   23e04:	mov	r6, r0
   23e08:	mov	fp, r1
   23e0c:	mov	r9, #0
   23e10:	mov	r1, #1
   23e14:	mov	r0, #32
   23e18:	mov	sl, r2
   23e1c:	mov	r5, r3
   23e20:	str	r9, [sp, #20]
   23e24:	ldrb	r8, [sp, #80]	; 0x50
   23e28:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   23e2c:	subs	r4, r0, #0
   23e30:	beq	2400c <__assert_fail@plt+0x12468>
   23e34:	mov	r1, #1
   23e38:	mov	r0, #40	; 0x28
   23e3c:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   23e40:	subs	r7, r0, #0
   23e44:	beq	24028 <__assert_fail@plt+0x12484>
   23e48:	ldrb	r2, [r7, #16]
   23e4c:	and	r3, r8, #1
   23e50:	mov	r0, fp
   23e54:	bic	r2, r2, #1
   23e58:	orr	r3, r3, r2
   23e5c:	add	r2, sp, #20
   23e60:	strb	r3, [r7, #16]
   23e64:	mov	r1, r4
   23e68:	stm	sp, {r2, sl}
   23e6c:	add	r3, r7, #36	; 0x24
   23e70:	str	r9, [sp, #8]
   23e74:	add	r2, r7, #12
   23e78:	bl	2350c <__assert_fail@plt+0x11968>
   23e7c:	subs	sl, r0, #0
   23e80:	bne	24044 <__assert_fail@plt+0x124a0>
   23e84:	ldrb	r3, [r5]
   23e88:	cmp	r3, #0
   23e8c:	movne	ip, #1
   23e90:	beq	23eb4 <__assert_fail@plt+0x12310>
   23e94:	asr	r1, r3, #5
   23e98:	and	r0, r3, #31
   23e9c:	ldr	r2, [r4, r1, lsl #2]
   23ea0:	ldrb	r3, [r5, #1]!
   23ea4:	orr	r2, r2, ip, lsl r0
   23ea8:	cmp	r3, #0
   23eac:	str	r2, [r4, r1, lsl #2]
   23eb0:	bne	23e94 <__assert_fail@plt+0x122f0>
   23eb4:	cmp	r8, #0
   23eb8:	bne	23fac <__assert_fail@plt+0x12408>
   23ebc:	ldr	r3, [r6, #92]	; 0x5c
   23ec0:	cmp	r3, #1
   23ec4:	ble	23ef0 <__assert_fail@plt+0x1234c>
   23ec8:	ldr	r1, [r6, #60]	; 0x3c
   23ecc:	sub	r3, r4, #4
   23ed0:	sub	r1, r1, #4
   23ed4:	add	ip, r4, #28
   23ed8:	ldr	r2, [r3, #4]
   23edc:	ldr	r0, [r1, #4]!
   23ee0:	and	r2, r2, r0
   23ee4:	str	r2, [r3, #4]!
   23ee8:	cmp	ip, r3
   23eec:	bne	23ed8 <__assert_fail@plt+0x12334>
   23ef0:	add	r8, sp, #24
   23ef4:	mov	r5, #0
   23ef8:	add	sl, r6, #56	; 0x38
   23efc:	add	fp, r6, #64	; 0x40
   23f00:	str	r8, [sp]
   23f04:	mov	ip, #3
   23f08:	str	r5, [r8, #4]
   23f0c:	mov	r3, r5
   23f10:	mov	r2, r5
   23f14:	mov	r0, sl
   23f18:	mov	r1, fp
   23f1c:	str	r4, [sp, #24]
   23f20:	strb	ip, [sp, #28]
   23f24:	bl	2074c <__assert_fail@plt+0xeba8>
   23f28:	subs	r9, r0, #0
   23f2c:	beq	23fcc <__assert_fail@plt+0x12428>
   23f30:	ldr	r3, [r6, #92]	; 0x5c
   23f34:	cmp	r3, #1
   23f38:	ble	23ff8 <__assert_fail@plt+0x12454>
   23f3c:	ldrb	r3, [r6, #88]	; 0x58
   23f40:	mov	ip, #6
   23f44:	str	r8, [sp]
   23f48:	orr	r3, r3, #2
   23f4c:	strb	r3, [r6, #88]	; 0x58
   23f50:	mov	r2, r5
   23f54:	mov	r3, r5
   23f58:	mov	r1, fp
   23f5c:	mov	r0, sl
   23f60:	str	r7, [sp, #24]
   23f64:	strb	ip, [sp, #28]
   23f68:	bl	2074c <__assert_fail@plt+0xeba8>
   23f6c:	subs	r3, r0, #0
   23f70:	beq	23fcc <__assert_fail@plt+0x12428>
   23f74:	add	ip, sp, #32
   23f78:	mov	r2, r9
   23f7c:	mov	lr, #10
   23f80:	mov	r1, fp
   23f84:	mov	r0, sl
   23f88:	str	ip, [sp]
   23f8c:	str	r5, [sp, #36]	; 0x24
   23f90:	str	r5, [sp, #32]
   23f94:	strb	lr, [sp, #36]	; 0x24
   23f98:	bl	2074c <__assert_fail@plt+0xeba8>
   23f9c:	mov	r9, r0
   23fa0:	mov	r0, r9
   23fa4:	add	sp, sp, #44	; 0x2c
   23fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fac:	sub	r3, r4, #4
   23fb0:	add	r1, r4, #28
   23fb4:	ldr	r2, [r3, #4]
   23fb8:	mvn	r2, r2
   23fbc:	str	r2, [r3, #4]!
   23fc0:	cmp	r1, r3
   23fc4:	bne	23fb4 <__assert_fail@plt+0x12410>
   23fc8:	b	23ebc <__assert_fail@plt+0x12318>
   23fcc:	mov	r0, r4
   23fd0:	bl	17274 <__assert_fail@plt+0x56d0>
   23fd4:	mov	r0, r7
   23fd8:	bl	1f564 <__assert_fail@plt+0xd9c0>
   23fdc:	ldr	r2, [sp, #84]	; 0x54
   23fe0:	mov	r9, #0
   23fe4:	mov	r3, #12
   23fe8:	mov	r0, r9
   23fec:	str	r3, [r2]
   23ff0:	add	sp, sp, #44	; 0x2c
   23ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ff8:	mov	r0, r7
   23ffc:	bl	1f564 <__assert_fail@plt+0xd9c0>
   24000:	mov	r0, r9
   24004:	add	sp, sp, #44	; 0x2c
   24008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2400c:	ldr	r2, [sp, #84]	; 0x54
   24010:	mov	r3, #12
   24014:	mov	r9, r4
   24018:	mov	r0, r9
   2401c:	str	r3, [r2]
   24020:	add	sp, sp, #44	; 0x2c
   24024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24028:	mov	r0, r4
   2402c:	bl	17274 <__assert_fail@plt+0x56d0>
   24030:	ldr	r2, [sp, #84]	; 0x54
   24034:	mov	r3, #12
   24038:	mov	r9, r7
   2403c:	str	r3, [r2]
   24040:	b	23fa0 <__assert_fail@plt+0x123fc>
   24044:	mov	r0, r4
   24048:	bl	17274 <__assert_fail@plt+0x56d0>
   2404c:	mov	r0, r7
   24050:	bl	1f564 <__assert_fail@plt+0xd9c0>
   24054:	ldr	r3, [sp, #84]	; 0x54
   24058:	str	sl, [r3]
   2405c:	b	23fa0 <__assert_fail@plt+0x123fc>
   24060:	ldr	ip, [r0]
   24064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24068:	sub	sp, sp, #308	; 0x134
   2406c:	str	ip, [sp, #12]
   24070:	ldr	ip, [ip, #92]	; 0x5c
   24074:	cmp	ip, #1
   24078:	ldr	ip, [r1]
   2407c:	ldreq	r6, [r0, #12]
   24080:	movne	r6, #0
   24084:	lsreq	r6, r6, #22
   24088:	andeq	r6, r6, #1
   2408c:	cmp	ip, #0
   24090:	ble	2440c <__assert_fail@plt+0x12868>
   24094:	mov	r7, r3
   24098:	mov	r3, #0
   2409c:	str	r2, [sp, #20]
   240a0:	str	r1, [sp, #24]
   240a4:	str	r0, [sp, #28]
   240a8:	str	r3, [sp, #8]
   240ac:	mov	r5, #1
   240b0:	b	240ec <__assert_fail@plt+0x12548>
   240b4:	cmp	r4, #3
   240b8:	beq	2422c <__assert_fail@plt+0x12688>
   240bc:	cmp	r4, #6
   240c0:	beq	242ac <__assert_fail@plt+0x12708>
   240c4:	and	r3, r4, #253	; 0xfd
   240c8:	cmp	r3, #5
   240cc:	beq	24450 <__assert_fail@plt+0x128ac>
   240d0:	cmp	r4, #2
   240d4:	beq	243ec <__assert_fail@plt+0x12848>
   240d8:	ldr	r3, [sp, #8]
   240dc:	add	r3, r3, #1
   240e0:	cmp	r3, ip
   240e4:	str	r3, [sp, #8]
   240e8:	bge	2440c <__assert_fail@plt+0x12868>
   240ec:	ldr	r3, [sp, #20]
   240f0:	ldr	r1, [sp, #8]
   240f4:	ldr	r2, [r3]
   240f8:	ldr	r3, [sp, #12]
   240fc:	ldr	r8, [r2, r1, lsl #2]
   24100:	ldr	r3, [r3]
   24104:	lsl	r2, r8, #3
   24108:	str	r2, [sp, #16]
   2410c:	add	r2, r3, r2
   24110:	ldrb	r4, [r2, #4]
   24114:	cmp	r4, #1
   24118:	bne	240b4 <__assert_fail@plt+0x12510>
   2411c:	ldrb	fp, [r3, r8, lsl #3]
   24120:	cmp	r6, #0
   24124:	strb	r4, [r7, fp]
   24128:	beq	2413c <__assert_fail@plt+0x12598>
   2412c:	bl	11928 <__ctype_tolower_loc@plt>
   24130:	ldr	r3, [r0]
   24134:	ldr	r3, [r3, fp, lsl #2]
   24138:	strb	r4, [r7, r3]
   2413c:	ldr	r3, [sp, #28]
   24140:	ldr	r3, [r3, #12]
   24144:	tst	r3, #4194304	; 0x400000
   24148:	beq	24220 <__assert_fail@plt+0x1267c>
   2414c:	ldr	r3, [sp, #12]
   24150:	ldr	r3, [r3, #92]	; 0x5c
   24154:	cmp	r3, #1
   24158:	ble	24220 <__assert_fail@plt+0x1267c>
   2415c:	ldr	r0, [sp, #12]
   24160:	add	r1, r8, #1
   24164:	ldr	r3, [r0]
   24168:	ldrb	r2, [r3, r8, lsl #3]
   2416c:	strb	r2, [sp, #48]	; 0x30
   24170:	ldr	r2, [r0, #8]
   24174:	cmp	r2, r1
   24178:	bls	24448 <__assert_fail@plt+0x128a4>
   2417c:	ldr	ip, [sp, #16]
   24180:	ldr	lr, [pc, #744]	; 24470 <__assert_fail@plt+0x128cc>
   24184:	add	r2, ip, #8
   24188:	add	r3, r3, r2
   2418c:	ldr	r2, [r3, #4]
   24190:	bic	r2, r2, #-16777216	; 0xff000000
   24194:	bic	r2, r2, #14614528	; 0xdf0000
   24198:	bic	r2, r2, #65280	; 0xff00
   2419c:	cmp	r2, lr
   241a0:	bne	24448 <__assert_fail@plt+0x128a4>
   241a4:	add	r9, ip, #16
   241a8:	add	r4, sp, #49	; 0x31
   241ac:	b	241d8 <__assert_fail@plt+0x12634>
   241b0:	ldr	r3, [r0]
   241b4:	ldr	ip, [pc, #692]	; 24470 <__assert_fail@plt+0x128cc>
   241b8:	add	r3, r3, r9
   241bc:	add	r9, r9, #8
   241c0:	ldr	r2, [r3, #4]
   241c4:	bic	r2, r2, #-16777216	; 0xff000000
   241c8:	bic	r2, r2, #14614528	; 0xdf0000
   241cc:	bic	r2, r2, #65280	; 0xff00
   241d0:	cmp	r2, ip
   241d4:	bne	241f0 <__assert_fail@plt+0x1264c>
   241d8:	ldrb	r3, [r3]
   241dc:	add	r1, r1, #1
   241e0:	strb	r3, [r4], #1
   241e4:	ldr	r3, [r0, #8]
   241e8:	cmp	r1, r3
   241ec:	bcc	241b0 <__assert_fail@plt+0x1260c>
   241f0:	add	r3, sp, #48	; 0x30
   241f4:	sub	r4, r4, r3
   241f8:	mov	ip, #0
   241fc:	mov	r2, r4
   24200:	add	r3, sp, #40	; 0x28
   24204:	add	r1, sp, #48	; 0x30
   24208:	add	r0, sp, #36	; 0x24
   2420c:	str	ip, [sp, #40]	; 0x28
   24210:	str	ip, [sp, #44]	; 0x2c
   24214:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   24218:	cmp	r4, r0
   2421c:	beq	24414 <__assert_fail@plt+0x12870>
   24220:	ldr	r3, [sp, #24]
   24224:	ldr	ip, [r3]
   24228:	b	240d8 <__assert_fail@plt+0x12534>
   2422c:	mov	r8, #0
   24230:	str	r7, [sp, #4]
   24234:	ldr	r2, [sp, #16]
   24238:	ldr	r9, [sp, #4]
   2423c:	lsl	sl, r8, #5
   24240:	ldr	r2, [r3, r2]
   24244:	mov	r4, #0
   24248:	ldr	fp, [r2, r8]
   2424c:	lsr	r3, fp, r4
   24250:	tst	r3, #1
   24254:	add	r4, r4, #1
   24258:	beq	24278 <__assert_fail@plt+0x126d4>
   2425c:	cmp	r6, #0
   24260:	strb	r5, [r9]
   24264:	beq	24278 <__assert_fail@plt+0x126d4>
   24268:	bl	11928 <__ctype_tolower_loc@plt>
   2426c:	ldr	r3, [r0]
   24270:	ldr	r3, [r3, sl]
   24274:	strb	r5, [r7, r3]
   24278:	cmp	r4, #32
   2427c:	add	r9, r9, #1
   24280:	add	sl, sl, #4
   24284:	bne	2424c <__assert_fail@plt+0x126a8>
   24288:	ldr	r3, [sp, #4]
   2428c:	add	r8, r8, #4
   24290:	add	r3, r3, #32
   24294:	cmp	r8, #32
   24298:	str	r3, [sp, #4]
   2429c:	beq	24220 <__assert_fail@plt+0x1267c>
   242a0:	ldr	r3, [sp, #12]
   242a4:	ldr	r3, [r3]
   242a8:	b	24234 <__assert_fail@plt+0x12690>
   242ac:	ldr	r3, [sp, #12]
   242b0:	ldr	r8, [r2]
   242b4:	ldr	r3, [r3, #92]	; 0x5c
   242b8:	cmp	r3, #1
   242bc:	ble	242e4 <__assert_fail@plt+0x12740>
   242c0:	ldr	r3, [r8, #36]	; 0x24
   242c4:	cmp	r3, #0
   242c8:	bne	243a4 <__assert_fail@plt+0x12800>
   242cc:	ldrb	r3, [r8, #16]
   242d0:	tst	r3, #1
   242d4:	bne	243a4 <__assert_fail@plt+0x12800>
   242d8:	ldr	r3, [r8, #32]
   242dc:	cmp	r3, #0
   242e0:	bne	243a4 <__assert_fail@plt+0x12800>
   242e4:	ldr	r3, [r8, #20]
   242e8:	cmp	r3, #0
   242ec:	ble	240d8 <__assert_fail@plt+0x12534>
   242f0:	ldr	sl, [sp, #12]
   242f4:	ldr	r9, [sp, #28]
   242f8:	mov	r4, #0
   242fc:	mov	r3, #0
   24300:	str	r3, [sp, #40]	; 0x28
   24304:	str	r3, [sp, #44]	; 0x2c
   24308:	ldr	r3, [r8]
   2430c:	add	r2, sp, #40	; 0x28
   24310:	add	r0, sp, #48	; 0x30
   24314:	ldr	r1, [r3, r4, lsl #2]
   24318:	bl	116dc <wcrtomb@plt>
   2431c:	lsl	r2, r4, #2
   24320:	add	r4, r4, #1
   24324:	cmn	r0, #1
   24328:	beq	24354 <__assert_fail@plt+0x127b0>
   2432c:	ldrb	fp, [sp, #48]	; 0x30
   24330:	cmp	r6, #0
   24334:	strb	r5, [r7, fp]
   24338:	beq	24354 <__assert_fail@plt+0x127b0>
   2433c:	str	r2, [sp, #4]
   24340:	bl	11928 <__ctype_tolower_loc@plt>
   24344:	ldr	r2, [sp, #4]
   24348:	ldr	r3, [r0]
   2434c:	ldr	r3, [r3, fp, lsl #2]
   24350:	strb	r5, [r7, r3]
   24354:	ldr	r3, [r9, #12]
   24358:	tst	r3, #4194304	; 0x400000
   2435c:	beq	24394 <__assert_fail@plt+0x127f0>
   24360:	ldr	r3, [sl, #92]	; 0x5c
   24364:	cmp	r3, #1
   24368:	ble	24394 <__assert_fail@plt+0x127f0>
   2436c:	ldr	r3, [r8]
   24370:	ldr	r0, [r3, r2]
   24374:	bl	117a8 <towlower@plt>
   24378:	add	r2, sp, #40	; 0x28
   2437c:	mov	r1, r0
   24380:	add	r0, sp, #48	; 0x30
   24384:	bl	116dc <wcrtomb@plt>
   24388:	cmn	r0, #1
   2438c:	ldrbne	r3, [sp, #48]	; 0x30
   24390:	strbne	r5, [r7, r3]
   24394:	ldr	r3, [r8, #20]
   24398:	cmp	r4, r3
   2439c:	blt	242fc <__assert_fail@plt+0x12758>
   243a0:	b	24220 <__assert_fail@plt+0x1267c>
   243a4:	mov	r3, #0
   243a8:	strb	r3, [sp, #40]	; 0x28
   243ac:	mov	r0, #0
   243b0:	add	r3, sp, #48	; 0x30
   243b4:	mov	r2, r5
   243b8:	add	r1, sp, #40	; 0x28
   243bc:	str	r0, [sp, #48]	; 0x30
   243c0:	str	r0, [sp, #52]	; 0x34
   243c4:	bl	1b5b4 <__assert_fail@plt+0x9a10>
   243c8:	ldrb	r3, [sp, #40]	; 0x28
   243cc:	cmn	r0, #2
   243d0:	strbeq	r5, [r7, r3]
   243d4:	add	r3, r3, #1
   243d8:	uxtb	r3, r3
   243dc:	cmp	r3, #0
   243e0:	strb	r3, [sp, #40]	; 0x28
   243e4:	bne	243ac <__assert_fail@plt+0x12808>
   243e8:	b	24220 <__assert_fail@plt+0x1267c>
   243ec:	mov	r0, r7
   243f0:	mov	r2, #256	; 0x100
   243f4:	mov	r1, #1
   243f8:	bl	119e8 <memset@plt>
   243fc:	ldr	r2, [sp, #28]
   24400:	ldrb	r3, [r2, #28]
   24404:	orr	r3, r3, #1
   24408:	strb	r3, [r2, #28]
   2440c:	add	sp, sp, #308	; 0x134
   24410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24414:	ldr	r0, [sp, #36]	; 0x24
   24418:	bl	117a8 <towlower@plt>
   2441c:	add	r2, sp, #40	; 0x28
   24420:	mov	r1, r0
   24424:	add	r0, sp, #48	; 0x30
   24428:	bl	116dc <wcrtomb@plt>
   2442c:	cmn	r0, #1
   24430:	beq	24220 <__assert_fail@plt+0x1267c>
   24434:	ldrb	r3, [sp, #48]	; 0x30
   24438:	strb	r5, [r7, r3]
   2443c:	ldr	r3, [sp, #24]
   24440:	ldr	ip, [r3]
   24444:	b	240d8 <__assert_fail@plt+0x12534>
   24448:	add	r4, sp, #49	; 0x31
   2444c:	b	241f0 <__assert_fail@plt+0x1264c>
   24450:	mov	r0, r7
   24454:	mov	r2, #256	; 0x100
   24458:	mov	r1, #1
   2445c:	bl	119e8 <memset@plt>
   24460:	cmp	r4, #2
   24464:	beq	243fc <__assert_fail@plt+0x12858>
   24468:	add	sp, sp, #308	; 0x134
   2446c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24470:	eoreq	r0, r0, r1
   24474:	add	ip, r0, r2, lsl #3
   24478:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2447c:	ldrb	r6, [ip, #4]
   24480:	ldr	r7, [sp, #32]
   24484:	cmp	r6, #7
   24488:	beq	24568 <__assert_fail@plt+0x129c4>
   2448c:	ldr	ip, [r3, #80]	; 0x50
   24490:	cmp	ip, #1
   24494:	beq	2457c <__assert_fail@plt+0x129d8>
   24498:	ldr	r5, [r3, #28]
   2449c:	add	lr, r7, #1
   244a0:	cmp	r5, lr
   244a4:	ble	2457c <__assert_fail@plt+0x129d8>
   244a8:	ldr	r8, [r3, #8]
   244ac:	add	ip, r8, lr, lsl #2
   244b0:	ldr	lr, [r8, lr, lsl #2]
   244b4:	cmn	lr, #1
   244b8:	subeq	r5, r5, r7
   244bc:	moveq	r4, #1
   244c0:	beq	244d4 <__assert_fail@plt+0x12930>
   244c4:	b	2457c <__assert_fail@plt+0x129d8>
   244c8:	ldr	lr, [ip, #4]!
   244cc:	cmn	lr, #1
   244d0:	bne	244e0 <__assert_fail@plt+0x1293c>
   244d4:	add	r4, r4, #1
   244d8:	cmp	r4, r5
   244dc:	bne	244c8 <__assert_fail@plt+0x12924>
   244e0:	cmp	r6, #5
   244e4:	beq	24588 <__assert_fail@plt+0x129e4>
   244e8:	cmp	r4, #1
   244ec:	sub	r6, r6, #6
   244f0:	clz	r6, r6
   244f4:	lsr	r6, r6, #5
   244f8:	moveq	r6, #0
   244fc:	cmp	r6, #0
   24500:	beq	2457c <__assert_fail@plt+0x129d8>
   24504:	ldr	r9, [r0, r2, lsl #3]
   24508:	ldr	ip, [r9, #32]
   2450c:	cmp	ip, #0
   24510:	beq	245c4 <__assert_fail@plt+0x12a20>
   24514:	ldr	r0, [r9, #20]
   24518:	cmp	r0, #0
   2451c:	ldr	r5, [r8, r7, lsl #2]
   24520:	ble	24554 <__assert_fail@plt+0x129b0>
   24524:	ldr	r2, [r9]
   24528:	ldr	r3, [r2]
   2452c:	cmp	r5, r3
   24530:	movne	r3, #0
   24534:	bne	24548 <__assert_fail@plt+0x129a4>
   24538:	b	24614 <__assert_fail@plt+0x12a70>
   2453c:	ldr	r1, [r2, #4]!
   24540:	cmp	r5, r1
   24544:	beq	24614 <__assert_fail@plt+0x12a70>
   24548:	add	r3, r3, #1
   2454c:	cmp	r3, r0
   24550:	bne	2453c <__assert_fail@plt+0x12998>
   24554:	ldr	r3, [r9, #36]	; 0x24
   24558:	cmp	r3, #0
   2455c:	ble	24658 <__assert_fail@plt+0x12ab4>
   24560:	mov	r6, #0
   24564:	b	245f8 <__assert_fail@plt+0x12a54>
   24568:	ldr	r2, [r3, #4]
   2456c:	add	r0, r2, r7
   24570:	ldrb	r1, [r2, r7]
   24574:	cmp	r1, #193	; 0xc1
   24578:	bhi	24624 <__assert_fail@plt+0x12a80>
   2457c:	mov	r4, #0
   24580:	mov	r0, r4
   24584:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24588:	ldr	r2, [r1]
   2458c:	tst	r2, #64	; 0x40
   24590:	beq	245b0 <__assert_fail@plt+0x12a0c>
   24594:	tst	r2, #128	; 0x80
   24598:	beq	24580 <__assert_fail@plt+0x129dc>
   2459c:	ldr	r3, [r3, #4]
   245a0:	ldrb	r3, [r3, r7]
   245a4:	cmp	r3, #0
   245a8:	beq	2457c <__assert_fail@plt+0x129d8>
   245ac:	b	24580 <__assert_fail@plt+0x129dc>
   245b0:	ldr	r1, [r3, #4]
   245b4:	ldrb	r1, [r1, r7]
   245b8:	cmp	r1, #10
   245bc:	bne	24594 <__assert_fail@plt+0x129f0>
   245c0:	b	2457c <__assert_fail@plt+0x129d8>
   245c4:	ldr	r3, [r9, #36]	; 0x24
   245c8:	ldr	r0, [r9, #20]
   245cc:	cmp	r3, #0
   245d0:	bne	24518 <__assert_fail@plt+0x12974>
   245d4:	cmp	r0, #0
   245d8:	bne	24518 <__assert_fail@plt+0x12974>
   245dc:	ldrb	r3, [r9, #16]
   245e0:	tst	r3, #1
   245e4:	bne	24580 <__assert_fail@plt+0x129dc>
   245e8:	b	2457c <__assert_fail@plt+0x129d8>
   245ec:	ldr	r3, [r9, #36]	; 0x24
   245f0:	cmp	r6, r3
   245f4:	bge	24654 <__assert_fail@plt+0x12ab0>
   245f8:	ldr	r3, [r9, #12]
   245fc:	mov	r0, r5
   24600:	ldr	r1, [r3, r6, lsl #2]
   24604:	bl	11700 <iswctype@plt>
   24608:	add	r6, r6, #1
   2460c:	cmp	r0, #0
   24610:	beq	245ec <__assert_fail@plt+0x12a48>
   24614:	ldrb	r3, [r9, #16]
   24618:	tst	r3, #1
   2461c:	beq	24580 <__assert_fail@plt+0x129dc>
   24620:	b	2457c <__assert_fail@plt+0x129d8>
   24624:	ldr	ip, [r3, #48]	; 0x30
   24628:	add	r3, r7, #1
   2462c:	cmp	r3, ip
   24630:	bge	2457c <__assert_fail@plt+0x129d8>
   24634:	cmp	r1, #223	; 0xdf
   24638:	ldrb	r3, [r0, #1]
   2463c:	bhi	2469c <__assert_fail@plt+0x12af8>
   24640:	eor	r3, r3, #128	; 0x80
   24644:	cmp	r3, #63	; 0x3f
   24648:	movls	r4, #2
   2464c:	bls	24580 <__assert_fail@plt+0x129dc>
   24650:	b	2457c <__assert_fail@plt+0x129d8>
   24654:	ldr	ip, [r9, #32]
   24658:	cmp	ip, #0
   2465c:	ble	245dc <__assert_fail@plt+0x12a38>
   24660:	ldr	r2, [r9, #4]
   24664:	mov	r3, #0
   24668:	sub	r2, r2, #4
   2466c:	b	2467c <__assert_fail@plt+0x12ad8>
   24670:	add	r3, r3, #1
   24674:	cmp	r3, ip
   24678:	beq	245dc <__assert_fail@plt+0x12a38>
   2467c:	ldr	r1, [r2, #4]!
   24680:	cmp	r5, r1
   24684:	bcc	24670 <__assert_fail@plt+0x12acc>
   24688:	ldr	r1, [r9, #8]
   2468c:	ldr	r1, [r1, r3, lsl #2]
   24690:	cmp	r5, r1
   24694:	bhi	24670 <__assert_fail@plt+0x12acc>
   24698:	b	24614 <__assert_fail@plt+0x12a70>
   2469c:	cmp	r1, #239	; 0xef
   246a0:	bhi	246ec <__assert_fail@plt+0x12b48>
   246a4:	cmp	r3, #159	; 0x9f
   246a8:	cmpls	r1, #224	; 0xe0
   246ac:	movne	r4, #3
   246b0:	beq	2457c <__assert_fail@plt+0x129d8>
   246b4:	add	r3, r7, r4
   246b8:	cmp	ip, r3
   246bc:	blt	2457c <__assert_fail@plt+0x129d8>
   246c0:	sub	r3, r7, #1
   246c4:	add	r3, r3, r4
   246c8:	add	r2, r2, r3
   246cc:	b	246d8 <__assert_fail@plt+0x12b34>
   246d0:	cmp	r2, r0
   246d4:	beq	24580 <__assert_fail@plt+0x129dc>
   246d8:	ldrb	r3, [r0, #1]!
   246dc:	eor	r3, r3, #128	; 0x80
   246e0:	cmp	r3, #63	; 0x3f
   246e4:	bls	246d0 <__assert_fail@plt+0x12b2c>
   246e8:	b	2457c <__assert_fail@plt+0x129d8>
   246ec:	cmp	r1, #247	; 0xf7
   246f0:	bhi	24708 <__assert_fail@plt+0x12b64>
   246f4:	cmp	r3, #143	; 0x8f
   246f8:	cmpls	r1, #240	; 0xf0
   246fc:	movne	r4, #4
   24700:	bne	246b4 <__assert_fail@plt+0x12b10>
   24704:	b	2457c <__assert_fail@plt+0x129d8>
   24708:	cmp	r1, #251	; 0xfb
   2470c:	bhi	24724 <__assert_fail@plt+0x12b80>
   24710:	cmp	r3, #135	; 0x87
   24714:	cmpls	r1, #248	; 0xf8
   24718:	movne	r4, #5
   2471c:	bne	246b4 <__assert_fail@plt+0x12b10>
   24720:	b	2457c <__assert_fail@plt+0x129d8>
   24724:	cmp	r1, #253	; 0xfd
   24728:	bhi	2457c <__assert_fail@plt+0x129d8>
   2472c:	cmp	r3, #131	; 0x83
   24730:	cmpls	r1, #252	; 0xfc
   24734:	beq	2457c <__assert_fail@plt+0x129d8>
   24738:	mov	r4, #6
   2473c:	b	246b4 <__assert_fail@plt+0x12b10>
   24740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24744:	mov	r5, r0
   24748:	ldr	r0, [r0, #84]	; 0x54
   2474c:	sub	sp, sp, #84	; 0x54
   24750:	mov	ip, r1
   24754:	str	r0, [sp, #28]
   24758:	ldr	r0, [r0]
   2475c:	mov	r8, r2
   24760:	str	r1, [sp, #36]	; 0x24
   24764:	ldr	r2, [sp, #124]	; 0x7c
   24768:	ldr	r1, [r5, #120]	; 0x78
   2476c:	ldr	r4, [ip, #4]
   24770:	mov	r7, #0
   24774:	add	r2, r2, r1
   24778:	mov	r6, r3
   2477c:	str	r7, [sp, #48]	; 0x30
   24780:	ldr	r3, [r0, r8, lsl #3]
   24784:	cmp	r2, r4
   24788:	str	r3, [sp, #32]
   2478c:	bge	24c94 <__assert_fail@plt+0x130f0>
   24790:	ldr	r3, [sp, #36]	; 0x24
   24794:	ldr	r4, [r3]
   24798:	cmp	r4, #0
   2479c:	beq	24b68 <__assert_fail@plt+0x12fc4>
   247a0:	ldr	r9, [r3, #8]
   247a4:	ldr	r3, [r5, #100]	; 0x64
   247a8:	ldr	r2, [r5, #88]	; 0x58
   247ac:	str	r3, [sp, #40]	; 0x28
   247b0:	ldr	r3, [r5, #40]	; 0x28
   247b4:	str	r9, [r5, #100]	; 0x64
   247b8:	str	r4, [r5, #40]	; 0x28
   247bc:	sub	r1, r4, #1
   247c0:	mov	r0, r5
   247c4:	str	r3, [sp, #44]	; 0x2c
   247c8:	bl	228d8 <__assert_fail@plt+0x10d34>
   247cc:	cmp	r4, r6
   247d0:	mov	r7, r0
   247d4:	beq	24b9c <__assert_fail@plt+0x12ff8>
   247d8:	ldr	r8, [r9, r4, lsl #2]
   247dc:	cmp	r8, #0
   247e0:	beq	24ce8 <__assert_fail@plt+0x13144>
   247e4:	ldrb	r3, [r8, #52]	; 0x34
   247e8:	add	fp, sp, #56	; 0x38
   247ec:	ands	r2, r3, #64	; 0x40
   247f0:	streq	r2, [sp, #56]	; 0x38
   247f4:	streq	r2, [fp, #4]
   247f8:	streq	r2, [fp, #8]
   247fc:	bne	24c74 <__assert_fail@plt+0x130d0>
   24800:	tst	r3, #64	; 0x40
   24804:	beq	24860 <__assert_fail@plt+0x12cbc>
   24808:	ldr	r3, [sp, #60]	; 0x3c
   2480c:	cmp	r3, #0
   24810:	beq	2483c <__assert_fail@plt+0x12c98>
   24814:	ldr	r3, [sp, #128]	; 0x80
   24818:	mov	r2, r4
   2481c:	str	r3, [sp]
   24820:	mov	r1, fp
   24824:	ldr	r3, [sp, #32]
   24828:	mov	r0, r5
   2482c:	bl	21b30 <__assert_fail@plt+0xff8c>
   24830:	cmp	r0, #0
   24834:	str	r0, [sp, #48]	; 0x30
   24838:	bne	24c04 <__assert_fail@plt+0x13060>
   2483c:	mov	r3, r7
   24840:	mov	r2, fp
   24844:	ldr	r1, [sp, #28]
   24848:	add	r0, sp, #48	; 0x30
   2484c:	bl	20d88 <__assert_fail@plt+0xf1e4>
   24850:	subs	r8, r0, #0
   24854:	beq	24cfc <__assert_fail@plt+0x13158>
   24858:	ldr	r3, [r5, #100]	; 0x64
   2485c:	str	r8, [r3, r4, lsl #2]
   24860:	ldr	r3, [sp, #124]	; 0x7c
   24864:	cmp	r3, r4
   24868:	ble	24b14 <__assert_fail@plt+0x12f70>
   2486c:	ldr	r3, [r5, #120]	; 0x78
   24870:	cmp	r3, #0
   24874:	blt	24b14 <__assert_fail@plt+0x12f70>
   24878:	mov	r3, #0
   2487c:	add	r4, r4, #1
   24880:	str	r3, [sp, #24]
   24884:	ldr	r3, [r5, #100]	; 0x64
   24888:	lsl	r2, r4, #2
   2488c:	str	r2, [sp, #12]
   24890:	str	r4, [sp, #8]
   24894:	ldr	r2, [sp, #12]
   24898:	ldr	r1, [r3, r2]
   2489c:	mov	r3, #0
   248a0:	str	r3, [sp, #60]	; 0x3c
   248a4:	cmp	r1, r3
   248a8:	ldr	r3, [sp, #8]
   248ac:	sub	sl, r3, #1
   248b0:	beq	24c28 <__assert_fail@plt+0x13084>
   248b4:	add	r1, r1, #4
   248b8:	mov	r0, fp
   248bc:	bl	21634 <__assert_fail@plt+0xfa90>
   248c0:	cmp	r0, #0
   248c4:	str	r0, [sp, #48]	; 0x30
   248c8:	bne	24c04 <__assert_fail@plt+0x13060>
   248cc:	cmp	r8, #0
   248d0:	beq	24a48 <__assert_fail@plt+0x12ea4>
   248d4:	ldr	r3, [r8, #20]
   248d8:	mov	r2, #0
   248dc:	cmp	r3, r2
   248e0:	str	r2, [sp, #52]	; 0x34
   248e4:	str	r2, [sp, #68]	; 0x44
   248e8:	str	r2, [sp, #72]	; 0x48
   248ec:	str	r2, [sp, #76]	; 0x4c
   248f0:	ldr	r9, [r5, #84]	; 0x54
   248f4:	ble	24d14 <__assert_fail@plt+0x13170>
   248f8:	ldr	r3, [r8, #24]
   248fc:	mov	r4, #0
   24900:	ldr	r6, [r3]
   24904:	mov	r3, r9
   24908:	ldr	r0, [r3], #128	; 0x80
   2490c:	lsl	r7, r6, #3
   24910:	str	r3, [sp, #16]
   24914:	add	r3, r0, r7
   24918:	b	24974 <__assert_fail@plt+0x12dd0>
   2491c:	add	r1, r0, r7
   24920:	mov	r2, sl
   24924:	mov	r0, r5
   24928:	bl	23194 <__assert_fail@plt+0x115f0>
   2492c:	cmp	r0, #0
   24930:	beq	24950 <__assert_fail@plt+0x12dac>
   24934:	lsl	r7, r6, #2
   24938:	ldr	r2, [r9, #12]
   2493c:	mov	r0, fp
   24940:	ldr	r1, [r2, r7]
   24944:	bl	1fb28 <__assert_fail@plt+0xdf84>
   24948:	cmp	r0, #0
   2494c:	beq	24bf4 <__assert_fail@plt+0x13050>
   24950:	ldr	r3, [r8, #20]
   24954:	add	r4, r4, #1
   24958:	cmp	r4, r3
   2495c:	bge	24c38 <__assert_fail@plt+0x13094>
   24960:	ldr	r3, [r8, #24]
   24964:	ldr	r0, [r9]
   24968:	ldr	r6, [r3, r4, lsl #2]
   2496c:	lsl	r7, r6, #3
   24970:	add	r3, r0, r7
   24974:	ldrb	r3, [r3, #6]
   24978:	tst	r3, #16
   2497c:	beq	2491c <__assert_fail@plt+0x12d78>
   24980:	str	sl, [sp]
   24984:	mov	r3, r5
   24988:	mov	r2, r6
   2498c:	ldr	r1, [sp, #16]
   24990:	bl	24474 <__assert_fail@plt+0x128d0>
   24994:	cmp	r0, #1
   24998:	ble	24c18 <__assert_fail@plt+0x13074>
   2499c:	add	r2, r0, sl
   249a0:	ldr	r3, [r5, #100]	; 0x64
   249a4:	mov	r1, r2
   249a8:	str	r2, [sp, #20]
   249ac:	ldr	r1, [r3, r1, lsl #2]
   249b0:	ldr	r2, [r9, #12]
   249b4:	mov	r3, #0
   249b8:	cmp	r1, #0
   249bc:	lsl	r7, r6, #2
   249c0:	ldr	r6, [r2, r6, lsl #2]
   249c4:	str	r3, [sp, #72]	; 0x48
   249c8:	beq	249e4 <__assert_fail@plt+0x12e40>
   249cc:	add	r1, r1, #4
   249d0:	add	r0, sp, #68	; 0x44
   249d4:	bl	21634 <__assert_fail@plt+0xfa90>
   249d8:	cmp	r0, #0
   249dc:	str	r0, [sp, #52]	; 0x34
   249e0:	bne	24a30 <__assert_fail@plt+0x12e8c>
   249e4:	mov	r1, r6
   249e8:	add	r0, sp, #68	; 0x44
   249ec:	bl	1fb28 <__assert_fail@plt+0xdf84>
   249f0:	cmp	r0, #0
   249f4:	beq	24bf4 <__assert_fail@plt+0x13050>
   249f8:	add	r2, sp, #68	; 0x44
   249fc:	mov	r1, r9
   24a00:	add	r0, sp, #52	; 0x34
   24a04:	ldr	r6, [r5, #100]	; 0x64
   24a08:	bl	210b4 <__assert_fail@plt+0xf510>
   24a0c:	ldr	r2, [r5, #100]	; 0x64
   24a10:	ldr	r3, [sp, #20]
   24a14:	str	r0, [r6, r3, lsl #2]
   24a18:	ldr	r2, [r2, r3, lsl #2]
   24a1c:	cmp	r2, #0
   24a20:	bne	24938 <__assert_fail@plt+0x12d94>
   24a24:	ldr	r2, [sp, #52]	; 0x34
   24a28:	cmp	r2, #0
   24a2c:	beq	24938 <__assert_fail@plt+0x12d94>
   24a30:	ldr	r0, [sp, #76]	; 0x4c
   24a34:	bl	17274 <__assert_fail@plt+0x56d0>
   24a38:	ldr	r3, [sp, #52]	; 0x34
   24a3c:	cmp	r3, #0
   24a40:	str	r3, [sp, #48]	; 0x30
   24a44:	bne	24c04 <__assert_fail@plt+0x13060>
   24a48:	ldr	r3, [sp, #60]	; 0x3c
   24a4c:	ldr	r4, [sp, #8]
   24a50:	cmp	r3, #0
   24a54:	beq	24aa0 <__assert_fail@plt+0x12efc>
   24a58:	ldr	r3, [sp, #128]	; 0x80
   24a5c:	ldr	r2, [sp, #32]
   24a60:	mov	r1, fp
   24a64:	ldr	r0, [sp, #28]
   24a68:	bl	219fc <__assert_fail@plt+0xfe58>
   24a6c:	cmp	r0, #0
   24a70:	str	r0, [sp, #48]	; 0x30
   24a74:	bne	24c04 <__assert_fail@plt+0x13060>
   24a78:	ldr	r3, [sp, #128]	; 0x80
   24a7c:	ldr	r2, [sp, #8]
   24a80:	str	r3, [sp]
   24a84:	mov	r1, fp
   24a88:	ldr	r3, [sp, #32]
   24a8c:	mov	r0, r5
   24a90:	bl	21b30 <__assert_fail@plt+0xff8c>
   24a94:	cmp	r0, #0
   24a98:	str	r0, [sp, #48]	; 0x30
   24a9c:	bne	24c04 <__assert_fail@plt+0x13060>
   24aa0:	ldr	r2, [r5, #88]	; 0x58
   24aa4:	mov	r1, sl
   24aa8:	mov	r0, r5
   24aac:	bl	228d8 <__assert_fail@plt+0x10d34>
   24ab0:	mov	r2, fp
   24ab4:	ldr	r1, [sp, #28]
   24ab8:	mov	r3, r0
   24abc:	add	r0, sp, #48	; 0x30
   24ac0:	bl	20d88 <__assert_fail@plt+0xf1e4>
   24ac4:	subs	r8, r0, #0
   24ac8:	beq	24c4c <__assert_fail@plt+0x130a8>
   24acc:	mov	r2, #0
   24ad0:	str	r2, [sp, #24]
   24ad4:	ldr	r3, [r5, #100]	; 0x64
   24ad8:	ldr	r2, [sp, #12]
   24adc:	str	r8, [r3, r2]
   24ae0:	ldr	r0, [sp, #124]	; 0x7c
   24ae4:	ldr	r1, [sp, #8]
   24ae8:	cmp	r0, r1
   24aec:	ble	24b14 <__assert_fail@plt+0x12f70>
   24af0:	ldr	r0, [sp, #12]
   24af4:	ldr	r2, [r5, #120]	; 0x78
   24af8:	add	r0, r0, #4
   24afc:	str	r0, [sp, #12]
   24b00:	ldr	r0, [sp, #24]
   24b04:	cmp	r0, r2
   24b08:	add	r2, r1, #1
   24b0c:	str	r2, [sp, #8]
   24b10:	ble	24894 <__assert_fail@plt+0x12cf0>
   24b14:	ldr	r0, [sp, #64]	; 0x40
   24b18:	bl	17274 <__assert_fail@plt+0x56d0>
   24b1c:	ldr	r3, [r5, #100]	; 0x64
   24b20:	ldr	r2, [sp, #124]	; 0x7c
   24b24:	ldr	r3, [r3, r2, lsl #2]
   24b28:	cmp	r3, #0
   24b2c:	beq	24d1c <__assert_fail@plt+0x13178>
   24b30:	ldr	r2, [sp, #36]	; 0x24
   24b34:	add	r1, r3, #12
   24b38:	str	r4, [r2]
   24b3c:	ldr	r2, [sp, #44]	; 0x2c
   24b40:	str	r2, [r5, #40]	; 0x28
   24b44:	ldr	r2, [sp, #40]	; 0x28
   24b48:	ldr	r0, [r3, #8]
   24b4c:	str	r2, [r5, #100]	; 0x64
   24b50:	ldr	r2, [sp, #120]	; 0x78
   24b54:	bl	200b8 <__assert_fail@plt+0xe514>
   24b58:	clz	r0, r0
   24b5c:	lsr	r0, r0, #5
   24b60:	add	sp, sp, #84	; 0x54
   24b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b68:	ldr	r3, [sp, #36]	; 0x24
   24b6c:	ldr	r2, [r5, #100]	; 0x64
   24b70:	sub	r1, r6, #1
   24b74:	ldr	r3, [r3, #8]
   24b78:	str	r2, [sp, #40]	; 0x28
   24b7c:	ldr	r2, [r5, #40]	; 0x28
   24b80:	str	r3, [r5, #100]	; 0x64
   24b84:	str	r2, [sp, #44]	; 0x2c
   24b88:	str	r6, [r5, #40]	; 0x28
   24b8c:	ldr	r2, [r5, #88]	; 0x58
   24b90:	mov	r0, r5
   24b94:	bl	228d8 <__assert_fail@plt+0x10d34>
   24b98:	mov	r7, r0
   24b9c:	mov	r3, #1
   24ba0:	mov	r0, #4
   24ba4:	str	r3, [sp, #56]	; 0x38
   24ba8:	str	r3, [sp, #60]	; 0x3c
   24bac:	bl	2d82c <__assert_fail@plt+0x1bc88>
   24bb0:	cmp	r0, #0
   24bb4:	str	r0, [sp, #64]	; 0x40
   24bb8:	beq	24d0c <__assert_fail@plt+0x13168>
   24bbc:	add	fp, sp, #56	; 0x38
   24bc0:	mov	ip, #0
   24bc4:	str	r8, [r0]
   24bc8:	mov	r1, fp
   24bcc:	ldr	r3, [sp, #128]	; 0x80
   24bd0:	ldr	r2, [sp, #32]
   24bd4:	ldr	r0, [sp, #28]
   24bd8:	str	ip, [sp, #48]	; 0x30
   24bdc:	bl	219fc <__assert_fail@plt+0xfe58>
   24be0:	cmp	r0, #0
   24be4:	str	r0, [sp, #48]	; 0x30
   24be8:	moveq	r4, r6
   24bec:	beq	24808 <__assert_fail@plt+0x12c64>
   24bf0:	b	24c04 <__assert_fail@plt+0x13060>
   24bf4:	ldr	r0, [sp, #76]	; 0x4c
   24bf8:	bl	17274 <__assert_fail@plt+0x56d0>
   24bfc:	mov	r3, #12
   24c00:	str	r3, [sp, #48]	; 0x30
   24c04:	ldr	r0, [sp, #64]	; 0x40
   24c08:	bl	17274 <__assert_fail@plt+0x56d0>
   24c0c:	ldr	r0, [sp, #48]	; 0x30
   24c10:	add	sp, sp, #84	; 0x54
   24c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c18:	cmp	r0, #0
   24c1c:	bne	24934 <__assert_fail@plt+0x12d90>
   24c20:	ldr	r0, [r9]
   24c24:	b	2491c <__assert_fail@plt+0x12d78>
   24c28:	cmp	r8, #0
   24c2c:	bne	248d4 <__assert_fail@plt+0x12d30>
   24c30:	ldr	r4, [sp, #8]
   24c34:	b	24aa0 <__assert_fail@plt+0x12efc>
   24c38:	ldr	r0, [sp, #76]	; 0x4c
   24c3c:	bl	17274 <__assert_fail@plt+0x56d0>
   24c40:	mov	r3, #0
   24c44:	str	r3, [sp, #48]	; 0x30
   24c48:	b	24a48 <__assert_fail@plt+0x12ea4>
   24c4c:	ldr	r3, [sp, #48]	; 0x30
   24c50:	cmp	r3, #0
   24c54:	bne	24c04 <__assert_fail@plt+0x13060>
   24c58:	ldr	r2, [sp, #24]
   24c5c:	ldr	r3, [r5, #100]	; 0x64
   24c60:	add	r2, r2, #1
   24c64:	str	r2, [sp, #24]
   24c68:	ldr	r2, [sp, #12]
   24c6c:	str	r8, [r3, r2]
   24c70:	b	24ae0 <__assert_fail@plt+0x12f3c>
   24c74:	mov	r0, fp
   24c78:	add	r1, r8, #4
   24c7c:	bl	20bc4 <__assert_fail@plt+0xf020>
   24c80:	cmp	r0, #0
   24c84:	str	r0, [sp, #48]	; 0x30
   24c88:	bne	24c10 <__assert_fail@plt+0x1306c>
   24c8c:	ldrb	r3, [r8, #52]	; 0x34
   24c90:	b	24800 <__assert_fail@plt+0x12c5c>
   24c94:	mvn	r3, #-2147483648	; 0x80000000
   24c98:	add	r9, r2, #1
   24c9c:	sub	r3, r3, r4
   24ca0:	cmp	r9, r3
   24ca4:	bgt	24d0c <__assert_fail@plt+0x13168>
   24ca8:	add	sl, r4, r9
   24cac:	cmn	sl, #-1073741823	; 0xc0000001
   24cb0:	bhi	24d0c <__assert_fail@plt+0x13168>
   24cb4:	ldr	fp, [sp, #36]	; 0x24
   24cb8:	lsl	r1, sl, #2
   24cbc:	ldr	r0, [fp, #8]
   24cc0:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   24cc4:	cmp	r0, #0
   24cc8:	beq	24d0c <__assert_fail@plt+0x13168>
   24ccc:	str	r0, [fp, #8]
   24cd0:	str	sl, [fp, #4]
   24cd4:	lsl	r2, r9, #2
   24cd8:	mov	r1, r7
   24cdc:	add	r0, r0, r4, lsl #2
   24ce0:	bl	119e8 <memset@plt>
   24ce4:	b	24790 <__assert_fail@plt+0x12bec>
   24ce8:	add	fp, sp, #56	; 0x38
   24cec:	str	r8, [sp, #56]	; 0x38
   24cf0:	str	r8, [fp, #4]
   24cf4:	str	r8, [fp, #8]
   24cf8:	b	24860 <__assert_fail@plt+0x12cbc>
   24cfc:	ldr	r3, [sp, #48]	; 0x30
   24d00:	cmp	r3, #0
   24d04:	beq	24858 <__assert_fail@plt+0x12cb4>
   24d08:	b	24c04 <__assert_fail@plt+0x13060>
   24d0c:	mov	r0, #12
   24d10:	b	24c10 <__assert_fail@plt+0x1306c>
   24d14:	mov	r0, #0
   24d18:	b	24c3c <__assert_fail@plt+0x13098>
   24d1c:	ldr	r3, [sp, #36]	; 0x24
   24d20:	mov	r0, #1
   24d24:	str	r4, [r3]
   24d28:	ldr	r3, [sp, #40]	; 0x28
   24d2c:	str	r3, [r5, #100]	; 0x64
   24d30:	ldr	r3, [sp, #44]	; 0x2c
   24d34:	str	r3, [r5, #40]	; 0x28
   24d38:	b	24c10 <__assert_fail@plt+0x1306c>
   24d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d40:	sub	sp, sp, #20
   24d44:	mov	ip, r2
   24d48:	ldr	r5, [sp, #56]	; 0x38
   24d4c:	ldr	r4, [r2, #4]
   24d50:	mov	lr, #8
   24d54:	mov	r6, r2
   24d58:	ldr	r2, [ip], #8
   24d5c:	mov	r7, r3
   24d60:	str	r3, [sp]
   24d64:	mov	r8, r1
   24d68:	mov	r3, r4
   24d6c:	mov	r1, ip
   24d70:	stmib	sp, {r5, lr}
   24d74:	mov	r4, r0
   24d78:	bl	24740 <__assert_fail@plt+0x12b9c>
   24d7c:	subs	fp, r0, #0
   24d80:	beq	24d90 <__assert_fail@plt+0x131ec>
   24d84:	mov	r0, fp
   24d88:	add	sp, sp, #20
   24d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d90:	ldr	r3, [r4, #108]	; 0x6c
   24d94:	ldr	r1, [r4, #112]	; 0x70
   24d98:	ldr	r9, [r6, #4]
   24d9c:	cmp	r3, r1
   24da0:	ldr	sl, [r8]
   24da4:	movlt	lr, r9
   24da8:	bge	24e34 <__assert_fail@plt+0x13290>
   24dac:	add	r2, r3, r3, lsl #1
   24db0:	cmp	r3, #0
   24db4:	ldr	ip, [r4, #116]	; 0x74
   24db8:	lsl	r2, r2, #3
   24dbc:	ble	24dd8 <__assert_fail@plt+0x13234>
   24dc0:	sub	r0, r2, #24
   24dc4:	add	r0, ip, r0
   24dc8:	ldr	r1, [r0, #4]
   24dcc:	cmp	r5, r1
   24dd0:	moveq	r1, #1
   24dd4:	strbeq	r1, [r0, #20]
   24dd8:	add	r0, ip, r2
   24ddc:	cmp	sl, r9
   24de0:	str	r7, [ip, r2]
   24de4:	movne	r1, #0
   24de8:	mvneq	r1, #0
   24dec:	add	r3, r3, #1
   24df0:	mov	r2, #0
   24df4:	stmib	r0, {r5, sl}
   24df8:	str	r9, [r0, #12]
   24dfc:	str	r1, [r0, #16]
   24e00:	str	r3, [r4, #108]	; 0x6c
   24e04:	strb	r2, [r0, #20]
   24e08:	ldr	r3, [r4, #120]	; 0x78
   24e0c:	sub	r9, r9, sl
   24e10:	cmp	r3, r9
   24e14:	strlt	r9, [r4, #120]	; 0x78
   24e18:	ldr	r1, [r8]
   24e1c:	add	r5, r5, lr
   24e20:	sub	r1, r5, r1
   24e24:	mov	r0, r4
   24e28:	add	sp, sp, #20
   24e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e30:	b	1ff00 <__assert_fail@plt+0xe35c>
   24e34:	add	r1, r1, r1, lsl #1
   24e38:	ldr	r0, [r4, #116]	; 0x74
   24e3c:	lsl	r1, r1, #4
   24e40:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   24e44:	cmp	r0, #0
   24e48:	beq	24e88 <__assert_fail@plt+0x132e4>
   24e4c:	ldr	r2, [r4, #112]	; 0x70
   24e50:	ldr	r3, [r4, #108]	; 0x6c
   24e54:	str	r0, [r4, #116]	; 0x74
   24e58:	add	r2, r2, r2, lsl #1
   24e5c:	add	r3, r3, r3, lsl #1
   24e60:	lsl	r2, r2, #3
   24e64:	add	r0, r0, r3, lsl #3
   24e68:	mov	r1, fp
   24e6c:	bl	119e8 <memset@plt>
   24e70:	ldr	r2, [r4, #112]	; 0x70
   24e74:	ldr	lr, [r6, #4]
   24e78:	ldr	r3, [r4, #108]	; 0x6c
   24e7c:	lsl	r2, r2, #1
   24e80:	str	r2, [r4, #112]	; 0x70
   24e84:	b	24dac <__assert_fail@plt+0x13208>
   24e88:	ldr	r0, [r4, #116]	; 0x74
   24e8c:	bl	17274 <__assert_fail@plt+0x56d0>
   24e90:	mov	fp, #12
   24e94:	b	24d84 <__assert_fail@plt+0x131e0>
   24e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e9c:	sub	sp, sp, #92	; 0x5c
   24ea0:	ldr	r6, [r1]
   24ea4:	ldr	r3, [r0, #84]	; 0x54
   24ea8:	cmp	r6, #0
   24eac:	str	r3, [sp, #32]
   24eb0:	ldr	sl, [r0, #40]	; 0x28
   24eb4:	ble	253dc <__assert_fail@plt+0x13838>
   24eb8:	mov	r3, #0
   24ebc:	str	r3, [sp, #20]
   24ec0:	lsl	r3, sl, #2
   24ec4:	str	r2, [sp, #36]	; 0x24
   24ec8:	mov	fp, r0
   24ecc:	str	r1, [sp, #60]	; 0x3c
   24ed0:	str	r3, [sp, #48]	; 0x30
   24ed4:	b	24eec <__assert_fail@plt+0x13348>
   24ed8:	ldr	r3, [sp, #20]
   24edc:	add	r3, r3, #1
   24ee0:	cmp	r3, r6
   24ee4:	str	r3, [sp, #20]
   24ee8:	bge	253dc <__assert_fail@plt+0x13838>
   24eec:	ldr	r3, [sp, #36]	; 0x24
   24ef0:	ldr	r1, [sp, #20]
   24ef4:	ldr	r2, [r3]
   24ef8:	ldr	r3, [sp, #32]
   24efc:	ldr	r9, [r2, r1, lsl #2]
   24f00:	ldr	r3, [r3]
   24f04:	add	r3, r3, r9, lsl #3
   24f08:	ldrb	r2, [r3, #4]
   24f0c:	cmp	r2, #4
   24f10:	bne	24ed8 <__assert_fail@plt+0x13334>
   24f14:	ldr	r4, [r3, #4]
   24f18:	ldr	r3, [pc, #1804]	; 2562c <__assert_fail@plt+0x13a88>
   24f1c:	tst	r4, r3
   24f20:	beq	24f74 <__assert_fail@plt+0x133d0>
   24f24:	ldr	r2, [fp, #88]	; 0x58
   24f28:	mov	r1, sl
   24f2c:	mov	r0, fp
   24f30:	bl	228d8 <__assert_fail@plt+0x10d34>
   24f34:	ldr	r3, [pc, #1780]	; 25630 <__assert_fail@plt+0x13a8c>
   24f38:	and	r4, r3, r4, lsr #8
   24f3c:	tst	r4, #4
   24f40:	beq	251d4 <__assert_fail@plt+0x13630>
   24f44:	tst	r0, #1
   24f48:	beq	24ed8 <__assert_fail@plt+0x13334>
   24f4c:	tst	r4, #8
   24f50:	bne	24ed8 <__assert_fail@plt+0x13334>
   24f54:	tst	r4, #32
   24f58:	beq	24f64 <__assert_fail@plt+0x133c0>
   24f5c:	tst	r0, #2
   24f60:	beq	24ed8 <__assert_fail@plt+0x13334>
   24f64:	tst	r4, #128	; 0x80
   24f68:	beq	24f74 <__assert_fail@plt+0x133d0>
   24f6c:	tst	r0, #8
   24f70:	beq	24ed8 <__assert_fail@plt+0x13334>
   24f74:	ldr	ip, [fp, #108]	; 0x6c
   24f78:	mov	r0, #0
   24f7c:	mov	r5, ip
   24f80:	mov	r3, ip
   24f84:	cmp	r0, r3
   24f88:	bge	24fe4 <__assert_fail@plt+0x13440>
   24f8c:	add	r2, r0, r3
   24f90:	ldr	lr, [fp, #116]	; 0x74
   24f94:	add	r2, r2, r2, lsr #31
   24f98:	asr	r2, r2, #1
   24f9c:	add	r1, r2, r2, lsl #1
   24fa0:	add	r1, lr, r1, lsl #3
   24fa4:	ldr	r1, [r1, #4]
   24fa8:	cmp	sl, r1
   24fac:	ble	24fd4 <__assert_fail@plt+0x13430>
   24fb0:	b	251c0 <__assert_fail@plt+0x1361c>
   24fb4:	asr	r3, r3, #1
   24fb8:	mov	r4, r3
   24fbc:	add	r1, r3, r3, lsl #1
   24fc0:	add	r1, lr, r1, lsl #3
   24fc4:	ldr	r1, [r1, #4]
   24fc8:	cmp	sl, r1
   24fcc:	bgt	251c8 <__assert_fail@plt+0x13624>
   24fd0:	mov	r2, r3
   24fd4:	add	r3, r2, r0
   24fd8:	cmp	r2, r0
   24fdc:	add	r3, r3, r3, lsr #31
   24fe0:	bgt	24fb4 <__assert_fail@plt+0x13410>
   24fe4:	cmp	ip, r0
   24fe8:	ble	251e8 <__assert_fail@plt+0x13644>
   24fec:	add	r2, r0, r0, lsl #1
   24ff0:	ldr	r3, [fp, #116]	; 0x74
   24ff4:	cmn	r0, #1
   24ff8:	add	r3, r3, r2, lsl #3
   24ffc:	ldr	r2, [r3, #4]
   25000:	sub	r2, r2, sl
   25004:	clz	r2, r2
   25008:	lsr	r2, r2, #5
   2500c:	moveq	r2, #0
   25010:	cmp	r2, #0
   25014:	beq	251e8 <__assert_fail@plt+0x13644>
   25018:	add	r3, r3, #24
   2501c:	b	2502c <__assert_fail@plt+0x13488>
   25020:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   25024:	cmp	r2, #0
   25028:	beq	251e8 <__assert_fail@plt+0x13644>
   2502c:	ldr	r2, [r3, #-24]	; 0xffffffe8
   25030:	add	r3, r3, #24
   25034:	cmp	r9, r2
   25038:	bne	25020 <__assert_fail@plt+0x1347c>
   2503c:	mov	r3, #0
   25040:	str	r3, [sp, #72]	; 0x48
   25044:	cmp	r5, ip
   25048:	lsl	r3, r9, #2
   2504c:	str	r3, [sp, #52]	; 0x34
   25050:	bge	251b4 <__assert_fail@plt+0x13610>
   25054:	add	r3, r9, r9, lsl #1
   25058:	add	r4, r5, r5, lsl #1
   2505c:	lsl	r3, r3, #2
   25060:	str	r3, [sp, #56]	; 0x38
   25064:	lsl	r4, r4, #3
   25068:	ldr	r7, [sp, #32]
   2506c:	b	25080 <__assert_fail@plt+0x134dc>
   25070:	add	r5, r5, #1
   25074:	cmp	r5, ip
   25078:	add	r4, r4, #24
   2507c:	bge	251b4 <__assert_fail@plt+0x13610>
   25080:	ldr	r3, [fp, #116]	; 0x74
   25084:	add	r2, r3, r4
   25088:	ldr	r3, [r3, r4]
   2508c:	cmp	r9, r3
   25090:	bne	25070 <__assert_fail@plt+0x134cc>
   25094:	ldr	r3, [r2, #4]
   25098:	cmp	sl, r3
   2509c:	bne	25070 <__assert_fail@plt+0x134cc>
   250a0:	ldr	r3, [r2, #12]
   250a4:	ldr	r6, [r2, #8]
   250a8:	subs	r2, r3, r6
   250ac:	str	r2, [sp, #28]
   250b0:	ldreq	r0, [sp, #56]	; 0x38
   250b4:	ldreq	r2, [r7, #20]
   250b8:	ldrne	r2, [r7, #12]
   250bc:	addeq	r2, r2, r0
   250c0:	ldrne	r0, [sp, #52]	; 0x34
   250c4:	ldreq	r2, [r2, #8]
   250c8:	ldreq	r1, [r7, #24]
   250cc:	ldrne	r2, [r2, r0]
   250d0:	ldreq	r2, [r2]
   250d4:	ldrne	r1, [r7, #24]
   250d8:	add	r3, sl, r3
   250dc:	add	r2, r2, r2, lsl #1
   250e0:	sub	r6, r3, r6
   250e4:	add	r2, r1, r2, lsl #2
   250e8:	str	r2, [sp, #24]
   250ec:	sub	r1, r6, #1
   250f0:	ldr	r2, [fp, #88]	; 0x58
   250f4:	mov	r0, fp
   250f8:	bl	228d8 <__assert_fail@plt+0x10d34>
   250fc:	ldr	r8, [fp, #100]	; 0x64
   25100:	ldr	r2, [sp, #48]	; 0x30
   25104:	ldr	r1, [r8, r2]
   25108:	ldr	r2, [r8, r6, lsl #2]
   2510c:	cmp	r1, #0
   25110:	moveq	r1, #0
   25114:	ldrne	r1, [r1, #8]
   25118:	cmp	r2, #0
   2511c:	str	r1, [sp, #44]	; 0x2c
   25120:	mov	r3, r0
   25124:	beq	25348 <__assert_fail@plt+0x137a4>
   25128:	str	r0, [sp, #40]	; 0x28
   2512c:	ldr	r1, [r2, #40]	; 0x28
   25130:	add	r0, sp, #76	; 0x4c
   25134:	ldr	r2, [sp, #24]
   25138:	bl	20c3c <__assert_fail@plt+0xf098>
   2513c:	ldr	r3, [sp, #40]	; 0x28
   25140:	cmp	r0, #0
   25144:	str	r0, [sp, #72]	; 0x48
   25148:	bne	253c8 <__assert_fail@plt+0x13824>
   2514c:	add	r2, sp, #76	; 0x4c
   25150:	mov	r1, r7
   25154:	add	r0, sp, #72	; 0x48
   25158:	ldr	r8, [fp, #100]	; 0x64
   2515c:	bl	20d88 <__assert_fail@plt+0xf1e4>
   25160:	str	r0, [r8, r6, lsl #2]
   25164:	ldr	r0, [sp, #84]	; 0x54
   25168:	bl	17274 <__assert_fail@plt+0x56d0>
   2516c:	ldr	r3, [fp, #100]	; 0x64
   25170:	ldr	r2, [r3, r6, lsl #2]
   25174:	cmp	r2, #0
   25178:	beq	2536c <__assert_fail@plt+0x137c8>
   2517c:	ldr	r2, [sp, #28]
   25180:	cmp	r2, #0
   25184:	bne	251a0 <__assert_fail@plt+0x135fc>
   25188:	ldr	r2, [sp, #48]	; 0x30
   2518c:	ldr	r3, [r3, r2]
   25190:	ldr	r2, [sp, #44]	; 0x2c
   25194:	ldr	r3, [r3, #8]
   25198:	cmp	r3, r2
   2519c:	bgt	2537c <__assert_fail@plt+0x137d8>
   251a0:	ldr	ip, [fp, #108]	; 0x6c
   251a4:	add	r5, r5, #1
   251a8:	cmp	r5, ip
   251ac:	add	r4, r4, #24
   251b0:	blt	25080 <__assert_fail@plt+0x134dc>
   251b4:	ldr	r3, [sp, #60]	; 0x3c
   251b8:	ldr	r6, [r3]
   251bc:	b	24ed8 <__assert_fail@plt+0x13334>
   251c0:	mov	r4, r2
   251c4:	mov	r2, r3
   251c8:	add	r0, r4, #1
   251cc:	mov	r3, r2
   251d0:	b	24f84 <__assert_fail@plt+0x133e0>
   251d4:	tst	r4, #8
   251d8:	beq	24f54 <__assert_fail@plt+0x133b0>
   251dc:	tst	r0, #1
   251e0:	beq	24f54 <__assert_fail@plt+0x133b0>
   251e4:	b	24ed8 <__assert_fail@plt+0x13334>
   251e8:	ldr	r3, [fp, #84]	; 0x54
   251ec:	ldr	r1, [fp, #124]	; 0x7c
   251f0:	str	r3, [sp, #56]	; 0x38
   251f4:	ldr	r3, [r3]
   251f8:	cmp	r1, #0
   251fc:	ldr	r2, [r3, r9, lsl #3]
   25200:	str	r2, [sp, #52]	; 0x34
   25204:	ble	2503c <__assert_fail@plt+0x13498>
   25208:	ldr	r2, [fp, #4]
   2520c:	str	r9, [sp, #44]	; 0x2c
   25210:	mov	r9, r2
   25214:	mov	r0, #0
   25218:	str	r0, [sp, #40]	; 0x28
   2521c:	str	sl, [sp, #28]
   25220:	str	r5, [sp, #68]	; 0x44
   25224:	ldr	r2, [fp, #132]	; 0x84
   25228:	ldr	r0, [sp, #40]	; 0x28
   2522c:	ldr	r4, [r2, r0, lsl #2]
   25230:	ldr	r2, [r4, #4]
   25234:	ldr	r3, [r3, r2, lsl #3]
   25238:	ldr	r2, [sp, #52]	; 0x34
   2523c:	cmp	r2, r3
   25240:	beq	25264 <__assert_fail@plt+0x136c0>
   25244:	ldr	r3, [sp, #40]	; 0x28
   25248:	add	r3, r3, #1
   2524c:	cmp	r3, r1
   25250:	str	r3, [sp, #40]	; 0x28
   25254:	bge	255d8 <__assert_fail@plt+0x13a34>
   25258:	ldr	r3, [sp, #56]	; 0x38
   2525c:	ldr	r3, [r3]
   25260:	b	25224 <__assert_fail@plt+0x13680>
   25264:	ldr	ip, [r4, #16]
   25268:	ldr	r6, [r4]
   2526c:	cmp	ip, #0
   25270:	ble	2561c <__assert_fail@plt+0x13a78>
   25274:	ldr	r8, [sp, #28]
   25278:	mov	r5, #0
   2527c:	mov	r3, r6
   25280:	b	25298 <__assert_fail@plt+0x136f4>
   25284:	ldr	ip, [r4, #16]
   25288:	mov	r3, r6
   2528c:	cmp	r5, ip
   25290:	mov	r8, r7
   25294:	bge	253e8 <__assert_fail@plt+0x13844>
   25298:	ldr	r2, [r4, #20]
   2529c:	ldr	sl, [r2, r5, lsl #2]
   252a0:	ldr	r6, [sl, #4]
   252a4:	sub	r2, r6, r3
   252a8:	cmp	r2, #0
   252ac:	add	r7, r2, r8
   252b0:	ble	252dc <__assert_fail@plt+0x13738>
   252b4:	ldr	r1, [fp, #28]
   252b8:	cmp	r7, r1
   252bc:	bgt	25310 <__assert_fail@plt+0x1376c>
   252c0:	add	r1, r9, r3
   252c4:	add	r0, r9, r8
   252c8:	str	r3, [sp, #24]
   252cc:	bl	117c0 <memcmp@plt>
   252d0:	ldr	r3, [sp, #24]
   252d4:	cmp	r0, #0
   252d8:	bne	2555c <__assert_fail@plt+0x139b8>
   252dc:	ldr	r3, [sp, #28]
   252e0:	mov	r2, sl
   252e4:	str	r3, [sp]
   252e8:	mov	r1, r4
   252ec:	ldr	r3, [sp, #44]	; 0x2c
   252f0:	mov	r0, fp
   252f4:	bl	24d3c <__assert_fail@plt+0x13198>
   252f8:	add	r5, r5, #1
   252fc:	ldr	r9, [fp, #4]
   25300:	cmp	r0, #1
   25304:	bls	25284 <__assert_fail@plt+0x136e0>
   25308:	add	sp, sp, #92	; 0x5c
   2530c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25310:	ldr	lr, [fp, #48]	; 0x30
   25314:	str	r2, [sp, #64]	; 0x40
   25318:	cmp	r7, lr
   2531c:	mov	r1, r7
   25320:	mov	r0, fp
   25324:	bgt	25624 <__assert_fail@plt+0x13a80>
   25328:	str	r3, [sp, #24]
   2532c:	bl	1ff00 <__assert_fail@plt+0xe35c>
   25330:	cmp	r0, #0
   25334:	bne	25308 <__assert_fail@plt+0x13764>
   25338:	ldr	r9, [fp, #4]
   2533c:	ldr	r2, [sp, #64]	; 0x40
   25340:	ldr	r3, [sp, #24]
   25344:	b	252c0 <__assert_fail@plt+0x1371c>
   25348:	ldr	r2, [sp, #24]
   2534c:	mov	r1, r7
   25350:	add	r0, sp, #72	; 0x48
   25354:	bl	20d88 <__assert_fail@plt+0xf1e4>
   25358:	ldr	r3, [fp, #100]	; 0x64
   2535c:	str	r0, [r8, r6, lsl #2]
   25360:	ldr	r2, [r3, r6, lsl #2]
   25364:	cmp	r2, #0
   25368:	bne	2517c <__assert_fail@plt+0x135d8>
   2536c:	ldr	r0, [sp, #72]	; 0x48
   25370:	cmp	r0, #0
   25374:	beq	2517c <__assert_fail@plt+0x135d8>
   25378:	b	25308 <__assert_fail@plt+0x13764>
   2537c:	ldr	r3, [sp, #24]
   25380:	mov	r0, fp
   25384:	add	r6, r3, #4
   25388:	add	r8, r3, #8
   2538c:	mov	r2, r8
   25390:	mov	r1, r6
   25394:	mov	r3, sl
   25398:	bl	233a8 <__assert_fail@plt+0x11804>
   2539c:	cmp	r0, #0
   253a0:	str	r0, [sp, #72]	; 0x48
   253a4:	bne	25308 <__assert_fail@plt+0x13764>
   253a8:	mov	r2, r8
   253ac:	mov	r1, r6
   253b0:	mov	r0, fp
   253b4:	bl	24e98 <__assert_fail@plt+0x132f4>
   253b8:	cmp	r0, #0
   253bc:	str	r0, [sp, #72]	; 0x48
   253c0:	beq	251a0 <__assert_fail@plt+0x135fc>
   253c4:	b	25308 <__assert_fail@plt+0x13764>
   253c8:	ldr	r0, [sp, #84]	; 0x54
   253cc:	bl	17274 <__assert_fail@plt+0x56d0>
   253d0:	ldr	r0, [sp, #72]	; 0x48
   253d4:	add	sp, sp, #92	; 0x5c
   253d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253dc:	mov	r0, #0
   253e0:	add	sp, sp, #92	; 0x5c
   253e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253e8:	mov	sl, r6
   253ec:	add	r6, sl, #1
   253f0:	ldr	r3, [sp, #28]
   253f4:	cmp	r3, r6
   253f8:	blt	25554 <__assert_fail@plt+0x139b0>
   253fc:	ldr	sl, [sp, #52]	; 0x34
   25400:	lsl	r8, r6, #2
   25404:	ldr	r3, [r4]
   25408:	sub	r3, r6, r3
   2540c:	cmp	r3, #0
   25410:	ble	2543c <__assert_fail@plt+0x13898>
   25414:	ldr	r3, [fp, #28]
   25418:	cmp	r3, r7
   2541c:	ble	255ac <__assert_fail@plt+0x13a08>
   25420:	add	r5, r7, #1
   25424:	add	r3, r9, r6
   25428:	ldrb	r2, [r9, r7]
   2542c:	ldrb	r3, [r3, #-1]
   25430:	cmp	r2, r3
   25434:	bne	25554 <__assert_fail@plt+0x139b0>
   25438:	mov	r7, r5
   2543c:	ldr	r3, [fp, #100]	; 0x64
   25440:	ldr	r3, [r3, r8]
   25444:	cmp	r3, #0
   25448:	beq	25540 <__assert_fail@plt+0x1399c>
   2544c:	ldr	ip, [r3, #8]
   25450:	cmp	ip, #0
   25454:	ble	25540 <__assert_fail@plt+0x1399c>
   25458:	ldr	r2, [r3, #12]
   2545c:	ldr	r3, [sp, #56]	; 0x38
   25460:	sub	r2, r2, #4
   25464:	ldr	r0, [r3]
   25468:	mov	r3, #0
   2546c:	b	25478 <__assert_fail@plt+0x138d4>
   25470:	cmp	ip, r3
   25474:	beq	25540 <__assert_fail@plt+0x1399c>
   25478:	ldr	r5, [r2, #4]!
   2547c:	add	r3, r3, #1
   25480:	add	r1, r0, r5, lsl #3
   25484:	ldrb	r1, [r1, #4]
   25488:	cmp	r1, #9
   2548c:	bne	25470 <__assert_fail@plt+0x138cc>
   25490:	ldr	r1, [r0, r5, lsl #3]
   25494:	cmp	sl, r1
   25498:	bne	25470 <__assert_fail@plt+0x138cc>
   2549c:	cmn	r5, #1
   254a0:	beq	25540 <__assert_fail@plt+0x1399c>
   254a4:	ldr	r1, [r4, #8]
   254a8:	cmp	r1, #0
   254ac:	beq	25584 <__assert_fail@plt+0x139e0>
   254b0:	mov	r0, #9
   254b4:	ldr	r3, [r4]
   254b8:	ldr	r2, [r4, #4]
   254bc:	str	r0, [sp, #8]
   254c0:	stm	sp, {r5, r6}
   254c4:	mov	r0, fp
   254c8:	bl	24740 <__assert_fail@plt+0x12b9c>
   254cc:	cmp	r0, #1
   254d0:	beq	25540 <__assert_fail@plt+0x1399c>
   254d4:	cmp	r0, #0
   254d8:	bne	25308 <__assert_fail@plt+0x13764>
   254dc:	ldr	r3, [r4, #16]
   254e0:	ldr	r2, [r4, #12]
   254e4:	cmp	r3, r2
   254e8:	beq	255f4 <__assert_fail@plt+0x13a50>
   254ec:	mov	r1, #20
   254f0:	mov	r0, #1
   254f4:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   254f8:	cmp	r0, #0
   254fc:	beq	255ec <__assert_fail@plt+0x13a48>
   25500:	ldr	r3, [r4, #16]
   25504:	ldr	r2, [r4, #20]
   25508:	add	r1, r3, #1
   2550c:	str	r0, [r2, r3, lsl #2]
   25510:	stm	r0, {r5, r6}
   25514:	mov	r2, r0
   25518:	ldr	r0, [sp, #28]
   2551c:	str	r1, [r4, #16]
   25520:	ldr	r3, [sp, #44]	; 0x2c
   25524:	str	r0, [sp]
   25528:	mov	r1, r4
   2552c:	mov	r0, fp
   25530:	bl	24d3c <__assert_fail@plt+0x13198>
   25534:	ldr	r9, [fp, #4]
   25538:	cmp	r0, #1
   2553c:	bhi	25308 <__assert_fail@plt+0x13764>
   25540:	ldr	r3, [sp, #28]
   25544:	add	r6, r6, #1
   25548:	cmp	r3, r6
   2554c:	add	r8, r8, #4
   25550:	bge	25404 <__assert_fail@plt+0x13860>
   25554:	ldr	r1, [fp, #124]	; 0x7c
   25558:	b	25244 <__assert_fail@plt+0x136a0>
   2555c:	ldr	ip, [r4, #16]
   25560:	mov	r6, r3
   25564:	cmp	ip, r5
   25568:	bgt	25554 <__assert_fail@plt+0x139b0>
   2556c:	cmp	r5, #0
   25570:	movle	r7, r8
   25574:	ble	253f0 <__assert_fail@plt+0x1384c>
   25578:	mov	sl, r6
   2557c:	mov	r7, r8
   25580:	b	253ec <__assert_fail@plt+0x13848>
   25584:	ldr	r1, [r4]
   25588:	mov	r0, #12
   2558c:	sub	r1, r6, r1
   25590:	add	r1, r1, #1
   25594:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   25598:	cmp	r0, #0
   2559c:	str	r0, [r4, #8]
   255a0:	beq	255ec <__assert_fail@plt+0x13a48>
   255a4:	mov	r1, r0
   255a8:	b	254b0 <__assert_fail@plt+0x1390c>
   255ac:	ldr	r3, [fp, #48]	; 0x30
   255b0:	cmp	r3, r7
   255b4:	ble	25554 <__assert_fail@plt+0x139b0>
   255b8:	add	r5, r7, #1
   255bc:	mov	r1, r5
   255c0:	mov	r0, fp
   255c4:	bl	1f44c <__assert_fail@plt+0xd8a8>
   255c8:	cmp	r0, #0
   255cc:	bne	25308 <__assert_fail@plt+0x13764>
   255d0:	ldr	r9, [fp, #4]
   255d4:	b	25424 <__assert_fail@plt+0x13880>
   255d8:	ldr	sl, [sp, #28]
   255dc:	ldr	r9, [sp, #44]	; 0x2c
   255e0:	ldr	r5, [sp, #68]	; 0x44
   255e4:	ldr	ip, [fp, #108]	; 0x6c
   255e8:	b	2503c <__assert_fail@plt+0x13498>
   255ec:	mov	r0, #12
   255f0:	b	25308 <__assert_fail@plt+0x13764>
   255f4:	lsl	r3, r3, #1
   255f8:	add	r9, r3, #1
   255fc:	ldr	r0, [r4, #20]
   25600:	lsl	r1, r9, #2
   25604:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   25608:	cmp	r0, #0
   2560c:	beq	255ec <__assert_fail@plt+0x13a48>
   25610:	str	r0, [r4, #20]
   25614:	str	r9, [r4, #12]
   25618:	b	254ec <__assert_fail@plt+0x13948>
   2561c:	ldr	r7, [sp, #28]
   25620:	b	253f0 <__assert_fail@plt+0x1384c>
   25624:	mov	r6, r3
   25628:	b	25564 <__assert_fail@plt+0x139c0>
   2562c:	andeq	pc, r3, r0, lsl #30
   25630:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   25634:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25638:	mov	r4, r1
   2563c:	ldr	r5, [r1, #40]	; 0x28
   25640:	ldr	r3, [r1, #104]	; 0x68
   25644:	sub	sp, sp, #16
   25648:	cmp	r5, r3
   2564c:	mov	r8, r0
   25650:	ldr	r7, [r1, #84]	; 0x54
   25654:	ble	25680 <__assert_fail@plt+0x13adc>
   25658:	ldr	r3, [r1, #100]	; 0x64
   2565c:	mov	r6, r2
   25660:	str	r2, [r3, r5, lsl #2]
   25664:	str	r5, [r1, #104]	; 0x68
   25668:	ldr	r3, [r7, #76]	; 0x4c
   2566c:	cmp	r3, #0
   25670:	bne	25748 <__assert_fail@plt+0x13ba4>
   25674:	mov	r0, r6
   25678:	add	sp, sp, #16
   2567c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25680:	ldr	r9, [r1, #100]	; 0x64
   25684:	ldr	r3, [r9, r5, lsl #2]
   25688:	cmp	r3, #0
   2568c:	streq	r2, [r9, r5, lsl #2]
   25690:	moveq	r6, r2
   25694:	beq	25668 <__assert_fail@plt+0x13ac4>
   25698:	cmp	r2, #0
   2569c:	ldr	r3, [r3, #40]	; 0x28
   256a0:	beq	2570c <__assert_fail@plt+0x13b68>
   256a4:	ldr	r9, [r2, #40]	; 0x28
   256a8:	add	r0, sp, #4
   256ac:	mov	r2, r3
   256b0:	mov	r1, r9
   256b4:	bl	20c3c <__assert_fail@plt+0xf098>
   256b8:	cmp	r0, #0
   256bc:	str	r0, [r8]
   256c0:	bne	257a8 <__assert_fail@plt+0x13c04>
   256c4:	ldr	r1, [r4, #40]	; 0x28
   256c8:	ldr	r2, [r4, #88]	; 0x58
   256cc:	sub	r1, r1, #1
   256d0:	mov	r0, r4
   256d4:	bl	228d8 <__assert_fail@plt+0x10d34>
   256d8:	add	r2, sp, #4
   256dc:	mov	r1, r7
   256e0:	ldr	sl, [r4, #100]	; 0x64
   256e4:	mov	r3, r0
   256e8:	mov	r0, r8
   256ec:	bl	20d88 <__assert_fail@plt+0xf1e4>
   256f0:	cmp	r9, #0
   256f4:	mov	r6, r0
   256f8:	str	r0, [sl, r5, lsl #2]
   256fc:	beq	25668 <__assert_fail@plt+0x13ac4>
   25700:	ldr	r0, [sp, #12]
   25704:	bl	17274 <__assert_fail@plt+0x56d0>
   25708:	b	25668 <__assert_fail@plt+0x13ac4>
   2570c:	ldm	r3, {r0, r1, r2}
   25710:	add	r6, sp, #4
   25714:	stm	r6, {r0, r1, r2}
   25718:	sub	r1, r5, #1
   2571c:	ldr	r2, [r4, #88]	; 0x58
   25720:	mov	r0, r4
   25724:	bl	228d8 <__assert_fail@plt+0x10d34>
   25728:	mov	r2, r6
   2572c:	mov	r1, r7
   25730:	mov	r3, r0
   25734:	mov	r0, r8
   25738:	bl	20d88 <__assert_fail@plt+0xf1e4>
   2573c:	mov	r6, r0
   25740:	str	r0, [r9, r5, lsl #2]
   25744:	b	25668 <__assert_fail@plt+0x13ac4>
   25748:	cmp	r6, #0
   2574c:	beq	257a8 <__assert_fail@plt+0x13c04>
   25750:	add	r7, r6, #8
   25754:	add	r9, r6, #12
   25758:	mov	r1, r7
   2575c:	mov	r2, r9
   25760:	mov	r3, r5
   25764:	mov	r0, r4
   25768:	bl	233a8 <__assert_fail@plt+0x11804>
   2576c:	cmp	r0, #0
   25770:	str	r0, [r8]
   25774:	bne	257a8 <__assert_fail@plt+0x13c04>
   25778:	ldrb	r3, [r6, #52]	; 0x34
   2577c:	tst	r3, #64	; 0x40
   25780:	beq	25674 <__assert_fail@plt+0x13ad0>
   25784:	mov	r2, r9
   25788:	mov	r1, r7
   2578c:	mov	r0, r4
   25790:	bl	24e98 <__assert_fail@plt+0x132f4>
   25794:	cmp	r0, #0
   25798:	str	r0, [r8]
   2579c:	ldreq	r3, [r4, #100]	; 0x64
   257a0:	ldreq	r6, [r3, r5, lsl #2]
   257a4:	beq	25674 <__assert_fail@plt+0x13ad0>
   257a8:	mov	r6, #0
   257ac:	b	25674 <__assert_fail@plt+0x13ad0>
   257b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257b4:	sub	sp, sp, #68	; 0x44
   257b8:	mov	r4, #1
   257bc:	mov	sl, r0
   257c0:	mov	r0, #4
   257c4:	ldr	fp, [r1, #12]
   257c8:	mov	r9, r1
   257cc:	ldr	r5, [r1, #8]
   257d0:	str	r4, [sp, #52]	; 0x34
   257d4:	str	r4, [sp, #56]	; 0x38
   257d8:	bl	2d82c <__assert_fail@plt+0x1bc88>
   257dc:	lsl	r3, fp, #2
   257e0:	str	r3, [sp, #16]
   257e4:	cmp	r0, #0
   257e8:	str	r0, [sp, #60]	; 0x3c
   257ec:	beq	25a60 <__assert_fail@plt+0x13ebc>
   257f0:	add	r3, sp, #52	; 0x34
   257f4:	str	r5, [r0]
   257f8:	mov	r2, fp
   257fc:	mov	r1, r9
   25800:	mov	r0, sl
   25804:	bl	27498 <__assert_fail@plt+0x158f4>
   25808:	subs	r3, r0, #0
   2580c:	str	r3, [sp, #44]	; 0x2c
   25810:	bne	25a30 <__assert_fail@plt+0x13e8c>
   25814:	cmp	fp, #0
   25818:	ble	25a30 <__assert_fail@plt+0x13e8c>
   2581c:	ldr	r3, [sp, #44]	; 0x2c
   25820:	str	r4, [sp, #40]	; 0x28
   25824:	str	r3, [sp, #36]	; 0x24
   25828:	add	r3, r9, #24
   2582c:	str	r3, [sp, #28]
   25830:	add	r3, r9, #20
   25834:	str	r3, [sp, #32]
   25838:	ldr	r0, [r9]
   2583c:	ldr	r3, [sp, #16]
   25840:	ldr	r3, [r0, r3]
   25844:	cmp	r3, #0
   25848:	movne	r3, #0
   2584c:	ldreq	r3, [sp, #36]	; 0x24
   25850:	addeq	r3, r3, #1
   25854:	str	r3, [sp, #36]	; 0x24
   25858:	ldr	r2, [sp, #36]	; 0x24
   2585c:	ldr	r3, [sl, #120]	; 0x78
   25860:	cmp	r2, r3
   25864:	bgt	25a70 <__assert_fail@plt+0x13ecc>
   25868:	mov	r2, #0
   2586c:	ldr	r3, [sl, #100]	; 0x64
   25870:	str	r2, [sp, #56]	; 0x38
   25874:	ldr	r2, [sp, #16]
   25878:	sub	fp, fp, #1
   2587c:	add	r3, r3, r2
   25880:	ldr	r7, [r3, #-4]
   25884:	cmp	r7, #0
   25888:	beq	25a00 <__assert_fail@plt+0x13e5c>
   2588c:	ldr	r3, [r7, #20]
   25890:	ldr	r8, [sl, #84]	; 0x54
   25894:	cmp	r3, #0
   25898:	ble	25a00 <__assert_fail@plt+0x13e5c>
   2589c:	ldr	r3, [r7, #24]
   258a0:	ldr	r1, [r8]
   258a4:	mov	r4, #0
   258a8:	ldr	r5, [r3]
   258ac:	lsl	r6, r5, #3
   258b0:	add	r3, r1, r6
   258b4:	b	25970 <__assert_fail@plt+0x13dcc>
   258b8:	add	r1, r1, r6
   258bc:	mov	r2, fp
   258c0:	mov	r0, sl
   258c4:	bl	23194 <__assert_fail@plt+0x115f0>
   258c8:	cmp	r0, #0
   258cc:	beq	2594c <__assert_fail@plt+0x13da8>
   258d0:	ldr	r3, [r9]
   258d4:	ldr	r2, [sp, #16]
   258d8:	ldr	r3, [r3, r2]
   258dc:	cmp	r3, #0
   258e0:	beq	2594c <__assert_fail@plt+0x13da8>
   258e4:	ldr	r2, [r8, #12]
   258e8:	add	r1, r3, #12
   258ec:	ldr	r0, [r3, #8]
   258f0:	ldr	r2, [r2, r5, lsl #2]
   258f4:	bl	200b8 <__assert_fail@plt+0xe514>
   258f8:	cmp	r0, #0
   258fc:	beq	2594c <__assert_fail@plt+0x13da8>
   25900:	ldr	r3, [sp, #40]	; 0x28
   25904:	ldr	r2, [r9, #20]
   25908:	cmp	r2, #0
   2590c:	beq	25938 <__assert_fail@plt+0x13d94>
   25910:	ldr	r1, [r8, #12]
   25914:	add	r0, fp, r3
   25918:	ldr	r2, [sp, #28]
   2591c:	ldr	r3, [r1, r5, lsl #2]
   25920:	stm	sp, {r0, r5, fp}
   25924:	mov	r0, sl
   25928:	ldr	r1, [sp, #32]
   2592c:	bl	20384 <__assert_fail@plt+0xe7e0>
   25930:	cmp	r0, #0
   25934:	bne	2594c <__assert_fail@plt+0x13da8>
   25938:	mov	r1, r5
   2593c:	add	r0, sp, #52	; 0x34
   25940:	bl	1fb28 <__assert_fail@plt+0xdf84>
   25944:	cmp	r0, #0
   25948:	beq	25a40 <__assert_fail@plt+0x13e9c>
   2594c:	ldr	r3, [r7, #20]
   25950:	add	r4, r4, #1
   25954:	cmp	r4, r3
   25958:	bge	25a00 <__assert_fail@plt+0x13e5c>
   2595c:	ldr	r3, [r7, #24]
   25960:	ldr	r1, [r8]
   25964:	ldr	r5, [r3, r4, lsl #2]
   25968:	lsl	r6, r5, #3
   2596c:	add	r3, r1, r6
   25970:	ldrb	r3, [r3, #6]
   25974:	tst	r3, #16
   25978:	beq	258b8 <__assert_fail@plt+0x13d14>
   2597c:	ldr	r3, [sl, #84]	; 0x54
   25980:	mov	r2, r3
   25984:	str	r3, [sp, #24]
   25988:	ldr	r0, [r2]
   2598c:	str	fp, [sp]
   25990:	ldr	ip, [r9, #12]
   25994:	mov	r3, sl
   25998:	add	r1, r2, #128	; 0x80
   2599c:	mov	r2, r5
   259a0:	str	ip, [sp, #20]
   259a4:	bl	24474 <__assert_fail@plt+0x128d0>
   259a8:	subs	r3, r0, #0
   259ac:	ble	25a38 <__assert_fail@plt+0x13e94>
   259b0:	ldr	ip, [sp, #20]
   259b4:	add	r2, fp, r3
   259b8:	cmp	ip, r2
   259bc:	blt	25904 <__assert_fail@plt+0x13d60>
   259c0:	ldr	r1, [r9]
   259c4:	ldr	r2, [r1, r2, lsl #2]
   259c8:	cmp	r2, #0
   259cc:	beq	259f8 <__assert_fail@plt+0x13e54>
   259d0:	str	r3, [sp, #20]
   259d4:	ldr	r3, [sp, #24]
   259d8:	add	r1, r2, #12
   259dc:	ldr	r0, [r2, #8]
   259e0:	ldr	ip, [r3, #12]
   259e4:	ldr	r2, [ip, r5, lsl #2]
   259e8:	bl	200b8 <__assert_fail@plt+0xe514>
   259ec:	ldr	r3, [sp, #20]
   259f0:	cmp	r0, #0
   259f4:	bne	25904 <__assert_fail@plt+0x13d60>
   259f8:	ldr	r1, [r8]
   259fc:	b	258b8 <__assert_fail@plt+0x13d14>
   25a00:	add	r3, sp, #52	; 0x34
   25a04:	mov	r2, fp
   25a08:	mov	r1, r9
   25a0c:	mov	r0, sl
   25a10:	bl	27498 <__assert_fail@plt+0x158f4>
   25a14:	cmp	r0, #0
   25a18:	bne	25a58 <__assert_fail@plt+0x13eb4>
   25a1c:	ldr	r3, [sp, #16]
   25a20:	cmp	fp, #0
   25a24:	sub	r3, r3, #4
   25a28:	str	r3, [sp, #16]
   25a2c:	bne	25838 <__assert_fail@plt+0x13c94>
   25a30:	ldr	r4, [sp, #44]	; 0x2c
   25a34:	b	25a44 <__assert_fail@plt+0x13ea0>
   25a38:	beq	259f8 <__assert_fail@plt+0x13e54>
   25a3c:	b	25904 <__assert_fail@plt+0x13d60>
   25a40:	mov	r4, #12
   25a44:	ldr	r0, [sp, #60]	; 0x3c
   25a48:	bl	17274 <__assert_fail@plt+0x56d0>
   25a4c:	mov	r0, r4
   25a50:	add	sp, sp, #68	; 0x44
   25a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a58:	mov	r4, r0
   25a5c:	b	25a44 <__assert_fail@plt+0x13ea0>
   25a60:	mov	r4, #12
   25a64:	mov	r0, r4
   25a68:	add	sp, sp, #68	; 0x44
   25a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a70:	ldr	r2, [sp, #16]
   25a74:	mov	r1, #0
   25a78:	bl	119e8 <memset@plt>
   25a7c:	ldr	r0, [sp, #60]	; 0x3c
   25a80:	ldr	r4, [sp, #44]	; 0x2c
   25a84:	bl	17274 <__assert_fail@plt+0x56d0>
   25a88:	b	25a4c <__assert_fail@plt+0x13ea8>
   25a8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a90:	mov	r7, r0
   25a94:	sub	sp, sp, #428	; 0x1ac
   25a98:	mov	r6, r3
   25a9c:	ldr	r3, [r7]
   25aa0:	str	r0, [sp, #44]	; 0x2c
   25aa4:	str	r1, [sp, #56]	; 0x38
   25aa8:	str	r2, [sp, #72]	; 0x48
   25aac:	mov	r1, #0
   25ab0:	add	r0, sp, #148	; 0x94
   25ab4:	mov	r2, #136	; 0x88
   25ab8:	mov	r8, r3
   25abc:	str	r3, [sp, #28]
   25ac0:	ldr	r4, [sp, #464]	; 0x1d0
   25ac4:	ldr	r5, [sp, #472]	; 0x1d8
   25ac8:	bl	119e8 <memset@plt>
   25acc:	ldr	r1, [r7, #16]
   25ad0:	str	r8, [sp, #232]	; 0xe8
   25ad4:	cmp	r1, #0
   25ad8:	streq	r1, [sp, #60]	; 0x3c
   25adc:	beq	25b08 <__assert_fail@plt+0x13f64>
   25ae0:	ldrb	r2, [r7, #28]
   25ae4:	subs	r3, r6, r4
   25ae8:	movne	r3, #1
   25aec:	ands	r3, r3, r2, lsr #3
   25af0:	streq	r3, [sp, #60]	; 0x3c
   25af4:	beq	25b08 <__assert_fail@plt+0x13f64>
   25af8:	tst	r2, #1
   25afc:	moveq	r3, r1
   25b00:	movne	r3, #0
   25b04:	str	r3, [sp, #60]	; 0x3c
   25b08:	ldr	r3, [sp, #44]	; 0x2c
   25b0c:	ldr	r3, [r3, #24]
   25b10:	cmp	r3, r5
   25b14:	subcc	r2, r5, #1
   25b18:	subcc	r3, r2, r3
   25b1c:	ldr	r2, [sp, #44]	; 0x2c
   25b20:	movcs	r3, #0
   25b24:	str	r3, [sp, #96]	; 0x60
   25b28:	ldr	r2, [r2, #8]
   25b2c:	cmp	r2, #0
   25b30:	beq	26160 <__assert_fail@plt+0x145bc>
   25b34:	ldr	r2, [sp, #28]
   25b38:	ldr	r2, [r2, #36]	; 0x24
   25b3c:	cmp	r2, #0
   25b40:	beq	26160 <__assert_fail@plt+0x145bc>
   25b44:	ldr	r1, [sp, #28]
   25b48:	ldr	r1, [r1, #40]	; 0x28
   25b4c:	cmp	r1, #0
   25b50:	beq	26160 <__assert_fail@plt+0x145bc>
   25b54:	ldr	r0, [sp, #28]
   25b58:	ldr	ip, [r0, #44]	; 0x2c
   25b5c:	cmp	ip, #0
   25b60:	beq	26160 <__assert_fail@plt+0x145bc>
   25b64:	ldr	r0, [r0, #48]	; 0x30
   25b68:	cmp	r0, #0
   25b6c:	beq	26160 <__assert_fail@plt+0x145bc>
   25b70:	ldr	r2, [r2, #8]
   25b74:	cmp	r2, #0
   25b78:	bne	25bbc <__assert_fail@plt+0x14018>
   25b7c:	ldr	r2, [r1, #8]
   25b80:	cmp	r2, #0
   25b84:	bne	25bbc <__assert_fail@plt+0x14018>
   25b88:	ldr	r2, [ip, #8]
   25b8c:	cmp	r2, #0
   25b90:	beq	25ba4 <__assert_fail@plt+0x14000>
   25b94:	ldr	r2, [sp, #44]	; 0x2c
   25b98:	ldrsb	r2, [r2, #28]
   25b9c:	cmp	r2, #0
   25ba0:	blt	25bbc <__assert_fail@plt+0x14018>
   25ba4:	cmp	r6, #0
   25ba8:	cmpne	r4, #0
   25bac:	movne	r4, #1
   25bb0:	moveq	r4, #0
   25bb4:	bne	26160 <__assert_fail@plt+0x145bc>
   25bb8:	mov	r6, r4
   25bbc:	subs	r3, r5, r3
   25bc0:	str	r3, [sp, #76]	; 0x4c
   25bc4:	movne	r3, #1
   25bc8:	strne	r3, [sp, #40]	; 0x28
   25bcc:	beq	25e94 <__assert_fail@plt+0x142f0>
   25bd0:	ldr	r1, [sp, #28]
   25bd4:	ldr	lr, [sp, #44]	; 0x2c
   25bd8:	ldr	r7, [sp, #56]	; 0x38
   25bdc:	ldr	r2, [r1, #8]
   25be0:	ldr	ip, [r1, #92]	; 0x5c
   25be4:	ldrb	r0, [r1, #88]	; 0x58
   25be8:	ldr	r1, [lr, #20]
   25bec:	add	r2, r2, #1
   25bf0:	ldr	r3, [lr, #12]
   25bf4:	ldr	lr, [sp, #72]	; 0x48
   25bf8:	cmp	r2, ip
   25bfc:	mov	r5, r1
   25c00:	movlt	r2, ip
   25c04:	str	r1, [sp, #88]	; 0x58
   25c08:	str	lr, [sp, #196]	; 0xc4
   25c0c:	add	r1, lr, #1
   25c10:	str	lr, [sp, #192]	; 0xc0
   25c14:	str	lr, [sp, #204]	; 0xcc
   25c18:	str	lr, [sp, #200]	; 0xc8
   25c1c:	mov	lr, r5
   25c20:	adds	r5, r5, #0
   25c24:	movne	r5, #1
   25c28:	lsr	r3, r3, #22
   25c2c:	cmp	r2, r1
   25c30:	movlt	r1, r2
   25c34:	and	r3, r3, #1
   25c38:	str	ip, [sp, #228]	; 0xe4
   25c3c:	lsr	r2, r0, #3
   25c40:	lsr	ip, r0, #2
   25c44:	and	ip, ip, #1
   25c48:	and	r2, r2, #1
   25c4c:	strb	r3, [sp, #220]	; 0xdc
   25c50:	add	r0, sp, #148	; 0x94
   25c54:	orr	r3, r3, r5
   25c58:	strb	r3, [sp, #223]	; 0xdf
   25c5c:	str	r7, [sp, #148]	; 0x94
   25c60:	str	lr, [sp, #212]	; 0xd4
   25c64:	strb	ip, [sp, #221]	; 0xdd
   25c68:	strb	r2, [sp, #222]	; 0xde
   25c6c:	bl	1eac4 <__assert_fail@plt+0xcf20>
   25c70:	subs	r3, r0, #0
   25c74:	str	r3, [sp, #48]	; 0x30
   25c78:	bne	26c1c <__assert_fail@plt+0x15078>
   25c7c:	ldr	r1, [sp, #28]
   25c80:	ldrb	r2, [sp, #223]	; 0xdf
   25c84:	add	r1, r1, #96	; 0x60
   25c88:	ldrb	r3, [r1, #-8]
   25c8c:	cmp	r2, #0
   25c90:	str	r1, [sp, #216]	; 0xd8
   25c94:	lsr	r3, r3, #4
   25c98:	and	r3, r3, #1
   25c9c:	strb	r3, [sp, #226]	; 0xe2
   25ca0:	bne	25cbc <__assert_fail@plt+0x14118>
   25ca4:	ldr	r3, [sp, #28]
   25ca8:	ldr	r2, [sp, #56]	; 0x38
   25cac:	ldr	r3, [r3, #92]	; 0x5c
   25cb0:	str	r2, [sp, #152]	; 0x98
   25cb4:	cmp	r3, #1
   25cb8:	ble	26ba4 <__assert_fail@plt+0x15000>
   25cbc:	mov	r1, #0
   25cc0:	ldr	r3, [sp, #44]	; 0x2c
   25cc4:	mvn	r2, #0
   25cc8:	str	r1, [sp, #176]	; 0xb0
   25ccc:	ldrb	r3, [r3, #28]
   25cd0:	str	r1, [sp, #180]	; 0xb4
   25cd4:	lsr	r3, r3, #7
   25cd8:	strb	r3, [sp, #225]	; 0xe1
   25cdc:	ldr	r3, [sp, #28]
   25ce0:	ldr	r8, [r3, #76]	; 0x4c
   25ce4:	ldr	r3, [sp, #468]	; 0x1d4
   25ce8:	str	r2, [sp, #240]	; 0xf0
   25cec:	str	r3, [sp, #204]	; 0xcc
   25cf0:	str	r3, [sp, #200]	; 0xc8
   25cf4:	lsl	r7, r8, #1
   25cf8:	ldr	r3, [sp, #480]	; 0x1e0
   25cfc:	cmp	r7, #0
   25d00:	str	r3, [sp, #236]	; 0xec
   25d04:	ble	25d40 <__assert_fail@plt+0x1419c>
   25d08:	ldr	r3, [pc, #4068]	; 26cf4 <__assert_fail@plt+0x15150>
   25d0c:	cmp	r7, r3
   25d10:	bgt	266ac <__assert_fail@plt+0x14b08>
   25d14:	add	r0, r7, r8, lsl #2
   25d18:	lsl	r0, r0, #3
   25d1c:	bl	2d82c <__assert_fail@plt+0x1bc88>
   25d20:	str	r0, [sp, #264]	; 0x108
   25d24:	lsl	r0, r8, #3
   25d28:	bl	2d82c <__assert_fail@plt+0x1bc88>
   25d2c:	ldr	r3, [sp, #264]	; 0x108
   25d30:	cmp	r0, #0
   25d34:	cmpne	r3, #0
   25d38:	str	r0, [sp, #280]	; 0x118
   25d3c:	beq	266ac <__assert_fail@plt+0x14b08>
   25d40:	ldr	r3, [sp, #76]	; 0x4c
   25d44:	str	r7, [sp, #260]	; 0x104
   25d48:	cmp	r3, #1
   25d4c:	mov	r3, #1
   25d50:	str	r7, [sp, #276]	; 0x114
   25d54:	str	r3, [sp, #268]	; 0x10c
   25d58:	bls	26d20 <__assert_fail@plt+0x1517c>
   25d5c:	ldr	r3, [sp, #184]	; 0xb8
   25d60:	cmn	r3, #-1073741822	; 0xc0000002
   25d64:	bhi	266ac <__assert_fail@plt+0x14b08>
   25d68:	add	r3, r3, #1
   25d6c:	lsl	r0, r3, #2
   25d70:	bl	2d82c <__assert_fail@plt+0x1bc88>
   25d74:	cmp	r0, #0
   25d78:	str	r0, [sp, #248]	; 0xf8
   25d7c:	beq	266e4 <__assert_fail@plt+0x14b40>
   25d80:	ldr	r3, [sp, #480]	; 0x1e0
   25d84:	str	r6, [sp, #116]	; 0x74
   25d88:	tst	r3, #1
   25d8c:	moveq	r3, #6
   25d90:	movne	r3, #4
   25d94:	cmp	r6, r4
   25d98:	movle	r2, #1
   25d9c:	mvngt	r2, #0
   25da0:	str	r2, [sp, #92]	; 0x5c
   25da4:	str	r3, [sp, #208]	; 0xd0
   25da8:	movlt	r2, r6
   25dac:	movge	r2, r4
   25db0:	ldr	r3, [sp, #28]
   25db4:	str	r2, [sp, #68]	; 0x44
   25db8:	movge	r2, r6
   25dbc:	movlt	r2, r4
   25dc0:	str	r2, [sp, #52]	; 0x34
   25dc4:	ldr	r2, [sp, #60]	; 0x3c
   25dc8:	ldr	r3, [r3, #92]	; 0x5c
   25dcc:	cmp	r2, #0
   25dd0:	str	r3, [sp, #80]	; 0x50
   25dd4:	beq	26de4 <__assert_fail@plt+0x15240>
   25dd8:	ldr	r3, [sp, #80]	; 0x50
   25ddc:	cmp	r3, #1
   25de0:	moveq	r3, #4
   25de4:	beq	25e0c <__assert_fail@plt+0x14268>
   25de8:	ldr	r3, [sp, #44]	; 0x2c
   25dec:	ldr	r2, [sp, #88]	; 0x58
   25df0:	ldr	r3, [r3, #12]
   25df4:	lsr	r3, r3, #22
   25df8:	eor	r3, r3, #1
   25dfc:	cmp	r2, #0
   25e00:	movne	r3, #0
   25e04:	andeq	r3, r3, #1
   25e08:	lsl	r3, r3, #2
   25e0c:	cmp	r6, r4
   25e10:	orr	r3, r5, r3
   25e14:	movle	r2, #2
   25e18:	movgt	r2, #0
   25e1c:	orr	r3, r3, r2
   25e20:	ldr	r2, [sp, #68]	; 0x44
   25e24:	ldr	r1, [sp, #52]	; 0x34
   25e28:	cmp	r6, r2
   25e2c:	movge	r2, #0
   25e30:	movlt	r2, #1
   25e34:	cmp	r6, r1
   25e38:	orrgt	r2, r2, #1
   25e3c:	cmp	r2, #0
   25e40:	str	r2, [sp, #108]	; 0x6c
   25e44:	bne	26150 <__assert_fail@plt+0x145ac>
   25e48:	sub	r3, r3, #4
   25e4c:	cmp	r6, r4
   25e50:	str	r3, [sp, #84]	; 0x54
   25e54:	add	r3, sp, #424	; 0x1a8
   25e58:	suble	r3, r3, #308	; 0x134
   25e5c:	movgt	r3, #0
   25e60:	str	r3, [sp, #100]	; 0x64
   25e64:	movle	r3, #1
   25e68:	movgt	r3, #0
   25e6c:	str	r3, [sp, #104]	; 0x68
   25e70:	ldr	r3, [sp, #84]	; 0x54
   25e74:	cmp	r3, #4
   25e78:	ldrls	pc, [pc, r3, lsl #2]
   25e7c:	b	26c24 <__assert_fail@plt+0x15080>
   25e80:	andeq	r6, r2, r4, lsl fp
   25e84:	andeq	r6, r2, r4, lsl fp
   25e88:	andeq	r5, r2, ip, lsr #29
   25e8c:	andeq	r6, r2, r8, lsr #21
   25e90:	andeq	r5, r2, r4, asr pc
   25e94:	ldr	r3, [sp, #28]
   25e98:	ldr	r3, [r3, #76]	; 0x4c
   25e9c:	adds	r3, r3, #0
   25ea0:	movne	r3, #1
   25ea4:	str	r3, [sp, #40]	; 0x28
   25ea8:	b	25bd0 <__assert_fail@plt+0x1402c>
   25eac:	ldr	r3, [sp, #52]	; 0x34
   25eb0:	cmp	r3, r6
   25eb4:	ble	25f0c <__assert_fail@plt+0x14368>
   25eb8:	ldr	r3, [sp, #56]	; 0x38
   25ebc:	ldr	r1, [sp, #60]	; 0x3c
   25ec0:	ldrb	r2, [r3, r6]
   25ec4:	add	r3, r3, r6
   25ec8:	ldrb	r2, [r1, r2]
   25ecc:	cmp	r2, #0
   25ed0:	bne	25f54 <__assert_fail@plt+0x143b0>
   25ed4:	add	r2, r6, #1
   25ed8:	ldr	ip, [sp, #60]	; 0x3c
   25edc:	ldr	r0, [sp, #52]	; 0x34
   25ee0:	b	25ef8 <__assert_fail@plt+0x14354>
   25ee4:	ldrb	r1, [r3, #1]!
   25ee8:	add	r2, r2, #1
   25eec:	ldrb	r1, [ip, r1]
   25ef0:	cmp	r1, #0
   25ef4:	bne	26d98 <__assert_fail@plt+0x151f4>
   25ef8:	cmp	r2, r0
   25efc:	mov	r6, r2
   25f00:	bne	25ee4 <__assert_fail@plt+0x14340>
   25f04:	ldr	r3, [sp, #52]	; 0x34
   25f08:	str	r3, [sp, #116]	; 0x74
   25f0c:	ldr	r3, [sp, #52]	; 0x34
   25f10:	cmp	r3, r6
   25f14:	bne	25f54 <__assert_fail@plt+0x143b0>
   25f18:	ldr	r2, [sp, #72]	; 0x48
   25f1c:	ldr	r1, [sp, #88]	; 0x58
   25f20:	cmp	r2, r3
   25f24:	movle	r3, #0
   25f28:	ldrgt	r2, [sp, #56]	; 0x38
   25f2c:	ldrbgt	r3, [r2, r3]
   25f30:	cmp	r1, #0
   25f34:	mov	r2, r3
   25f38:	movne	r2, r1
   25f3c:	ldrbne	r2, [r2, r3]
   25f40:	ldr	r3, [sp, #60]	; 0x3c
   25f44:	ldrb	r3, [r3, r2]
   25f48:	cmp	r3, #0
   25f4c:	beq	26150 <__assert_fail@plt+0x145ac>
   25f50:	ldr	r6, [sp, #52]	; 0x34
   25f54:	ldr	r2, [sp, #480]	; 0x1e0
   25f58:	mov	r1, r6
   25f5c:	add	r0, sp, #148	; 0x94
   25f60:	bl	229c4 <__assert_fail@plt+0x10e20>
   25f64:	subs	r3, r0, #0
   25f68:	str	r3, [sp, #48]	; 0x30
   25f6c:	bne	26c1c <__assert_fail@plt+0x15078>
   25f70:	ldr	r3, [sp, #80]	; 0x50
   25f74:	cmp	r3, #1
   25f78:	beq	25f98 <__assert_fail@plt+0x143f4>
   25f7c:	ldr	r3, [sp, #176]	; 0xb0
   25f80:	cmp	r3, #0
   25f84:	beq	25f98 <__assert_fail@plt+0x143f4>
   25f88:	ldr	r3, [sp, #156]	; 0x9c
   25f8c:	ldr	r3, [r3]
   25f90:	cmn	r3, #1
   25f94:	beq	26120 <__assert_fail@plt+0x1457c>
   25f98:	ldr	r4, [sp, #232]	; 0xe8
   25f9c:	mov	r3, #0
   25fa0:	str	r3, [sp, #268]	; 0x10c
   25fa4:	ldr	fp, [r4, #36]	; 0x24
   25fa8:	str	r3, [sp, #256]	; 0x100
   25fac:	str	r3, [sp, #252]	; 0xfc
   25fb0:	str	r3, [sp, #124]	; 0x7c
   25fb4:	ldrsb	r3, [fp, #52]	; 0x34
   25fb8:	ldr	r2, [sp, #188]	; 0xbc
   25fbc:	cmp	r3, #0
   25fc0:	str	r2, [sp, #12]
   25fc4:	blt	26cb4 <__assert_fail@plt+0x15110>
   25fc8:	ldr	r3, [sp, #248]	; 0xf8
   25fcc:	cmp	r3, #0
   25fd0:	beq	26d60 <__assert_fail@plt+0x151bc>
   25fd4:	ldr	r2, [r4, #76]	; 0x4c
   25fd8:	ldr	r1, [sp, #12]
   25fdc:	cmp	r2, #0
   25fe0:	str	fp, [r3, r1, lsl #2]
   25fe4:	bne	26dec <__assert_fail@plt+0x15248>
   25fe8:	ldrb	r3, [fp, #52]	; 0x34
   25fec:	ldr	r2, [sp, #104]	; 0x68
   25ff0:	str	r2, [sp, #16]
   25ff4:	tst	r3, #16
   25ff8:	bne	26db0 <__assert_fail@plt+0x1520c>
   25ffc:	mvn	r3, #0
   26000:	str	r3, [sp, #20]
   26004:	mov	r3, #0
   26008:	str	r3, [sp, #36]	; 0x24
   2600c:	ldr	r3, [sp, #100]	; 0x64
   26010:	ldr	r5, [sp, #188]	; 0xbc
   26014:	str	r3, [sp, #32]
   26018:	b	26024 <__assert_fail@plt+0x14480>
   2601c:	ldr	r5, [sp, #188]	; 0xbc
   26020:	mov	fp, r4
   26024:	ldr	r3, [sp, #204]	; 0xcc
   26028:	cmp	r3, r5
   2602c:	ble	261e0 <__assert_fail@plt+0x1463c>
   26030:	ldr	r3, [sp, #184]	; 0xb8
   26034:	add	r9, r5, #1
   26038:	cmp	r9, r3
   2603c:	bge	26598 <__assert_fail@plt+0x149f4>
   26040:	ldr	r3, [sp, #176]	; 0xb0
   26044:	cmp	r9, r3
   26048:	bge	265f4 <__assert_fail@plt+0x14a50>
   2604c:	ldrb	r3, [fp, #52]	; 0x34
   26050:	tst	r3, #32
   26054:	bne	263d0 <__assert_fail@plt+0x1482c>
   26058:	ldr	r3, [sp, #152]	; 0x98
   2605c:	add	r2, r5, #1
   26060:	str	r2, [sp, #188]	; 0xbc
   26064:	ldrb	r4, [r3, r5]
   26068:	ldr	r3, [fp, #44]	; 0x2c
   2606c:	cmp	r3, #0
   26070:	beq	265c4 <__assert_fail@plt+0x14a20>
   26074:	ldr	r4, [r3, r4, lsl #2]
   26078:	ldr	r3, [sp, #248]	; 0xf8
   2607c:	cmp	r3, #0
   26080:	beq	26098 <__assert_fail@plt+0x144f4>
   26084:	mov	r2, r4
   26088:	add	r1, sp, #148	; 0x94
   2608c:	add	r0, sp, #124	; 0x7c
   26090:	bl	25634 <__assert_fail@plt+0x13a90>
   26094:	mov	r4, r0
   26098:	cmp	r4, #0
   2609c:	beq	26174 <__assert_fail@plt+0x145d0>
   260a0:	ldr	r2, [sp, #16]
   260a4:	ldrb	r3, [r4, #52]	; 0x34
   260a8:	cmp	fp, r4
   260ac:	movne	r2, #0
   260b0:	andeq	r2, r2, #1
   260b4:	ldr	r1, [sp, #12]
   260b8:	cmp	r2, #0
   260bc:	movne	r1, r9
   260c0:	tst	r3, #16
   260c4:	str	r2, [sp, #16]
   260c8:	str	r1, [sp, #12]
   260cc:	beq	2601c <__assert_fail@plt+0x14478>
   260d0:	tst	r3, #128	; 0x80
   260d4:	bne	2637c <__assert_fail@plt+0x147d8>
   260d8:	ldr	r3, [sp, #188]	; 0xbc
   260dc:	str	r3, [sp, #20]
   260e0:	ldr	r3, [sp, #40]	; 0x28
   260e4:	cmp	r3, #0
   260e8:	beq	26200 <__assert_fail@plt+0x1465c>
   260ec:	mov	r3, #1
   260f0:	str	r3, [sp, #36]	; 0x24
   260f4:	mov	r3, #0
   260f8:	ldr	r5, [sp, #20]
   260fc:	str	r3, [sp, #32]
   26100:	b	26020 <__assert_fail@plt+0x1447c>
   26104:	mov	r0, r5
   26108:	bl	17274 <__assert_fail@plt+0x56d0>
   2610c:	mov	r0, #0
   26110:	bl	17274 <__assert_fail@plt+0x56d0>
   26114:	add	r0, sp, #148	; 0x94
   26118:	bl	1fa20 <__assert_fail@plt+0xde7c>
   2611c:	ldr	r6, [sp, #116]	; 0x74
   26120:	ldr	r3, [sp, #92]	; 0x5c
   26124:	ldr	r2, [sp, #68]	; 0x44
   26128:	add	r6, r6, r3
   2612c:	ldr	r3, [sp, #52]	; 0x34
   26130:	str	r6, [sp, #116]	; 0x74
   26134:	cmp	r3, r6
   26138:	movge	r3, #0
   2613c:	movlt	r3, #1
   26140:	cmp	r2, r6
   26144:	orrgt	r3, r3, #1
   26148:	cmp	r3, #0
   2614c:	beq	25e70 <__assert_fail@plt+0x142cc>
   26150:	mov	r3, #1
   26154:	ldr	r7, [sp, #248]	; 0xf8
   26158:	str	r3, [sp, #48]	; 0x30
   2615c:	b	266b8 <__assert_fail@plt+0x14b14>
   26160:	mov	r3, #1
   26164:	str	r3, [sp, #48]	; 0x30
   26168:	ldr	r0, [sp, #48]	; 0x30
   2616c:	add	sp, sp, #428	; 0x1ac
   26170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26174:	ldr	r3, [sp, #124]	; 0x7c
   26178:	cmp	r3, #0
   2617c:	bne	26ddc <__assert_fail@plt+0x15238>
   26180:	ldr	r2, [sp, #248]	; 0xf8
   26184:	cmp	r2, #0
   26188:	beq	261e0 <__assert_fail@plt+0x1463c>
   2618c:	ldr	r3, [sp, #40]	; 0x28
   26190:	eor	r5, r3, #1
   26194:	ldr	r3, [sp, #36]	; 0x24
   26198:	ands	r5, r5, r3
   2619c:	bne	261e0 <__assert_fail@plt+0x1463c>
   261a0:	ldr	r3, [sp, #188]	; 0xbc
   261a4:	ldr	lr, [sp, #252]	; 0xfc
   261a8:	mov	ip, r3
   261ac:	add	r2, r2, r3, lsl #2
   261b0:	mov	r0, r5
   261b4:	b	261cc <__assert_fail@plt+0x14628>
   261b8:	ldr	r1, [r2, #4]!
   261bc:	add	ip, ip, #1
   261c0:	cmp	r1, #0
   261c4:	mov	r0, #1
   261c8:	bne	263a0 <__assert_fail@plt+0x147fc>
   261cc:	add	r3, r3, #1
   261d0:	cmp	lr, r3
   261d4:	bge	261b8 <__assert_fail@plt+0x14614>
   261d8:	cmp	r0, #0
   261dc:	strne	ip, [sp, #188]	; 0xbc
   261e0:	ldr	r3, [sp, #32]
   261e4:	cmp	r3, #0
   261e8:	beq	26200 <__assert_fail@plt+0x1465c>
   261ec:	ldr	r2, [sp, #32]
   261f0:	ldr	r1, [sp, #12]
   261f4:	ldr	r3, [r2]
   261f8:	add	r3, r3, r1
   261fc:	str	r3, [r2]
   26200:	ldr	r3, [sp, #20]
   26204:	cmn	r3, #1
   26208:	beq	26114 <__assert_fail@plt+0x14570>
   2620c:	cmn	r3, #2
   26210:	beq	266ac <__assert_fail@plt+0x14b08>
   26214:	ldr	r3, [sp, #44]	; 0x2c
   26218:	ldr	r2, [sp, #20]
   2621c:	ldrb	r3, [r3, #28]
   26220:	str	r2, [sp, #240]	; 0xf0
   26224:	ldr	r2, [sp, #76]	; 0x4c
   26228:	lsr	r3, r3, #4
   2622c:	eor	r3, r3, #1
   26230:	cmp	r2, #1
   26234:	movls	r3, #0
   26238:	andhi	r3, r3, #1
   2623c:	cmp	r3, #0
   26240:	beq	26658 <__assert_fail@plt+0x14ab4>
   26244:	ldr	r3, [sp, #20]
   26248:	ldr	r7, [sp, #248]	; 0xf8
   2624c:	mov	r2, r3
   26250:	add	r0, sp, #148	; 0x94
   26254:	ldr	r1, [r7, r3, lsl #2]
   26258:	bl	232c8 <__assert_fail@plt+0x11724>
   2625c:	ldr	r3, [sp, #28]
   26260:	ldrb	r3, [r3, #88]	; 0x58
   26264:	tst	r3, #1
   26268:	str	r0, [sp, #244]	; 0xf4
   2626c:	beq	26b90 <__assert_fail@plt+0x14fec>
   26270:	ldr	r3, [sp, #20]
   26274:	ldr	fp, [sp, #232]	; 0xe8
   26278:	cmn	r3, #-1073741822	; 0xc0000002
   2627c:	ldr	r9, [sp, #244]	; 0xf4
   26280:	bhi	266e8 <__assert_fail@plt+0x14b44>
   26284:	ldr	r3, [sp, #20]
   26288:	add	r7, r3, #1
   2628c:	lsl	r4, r7, #2
   26290:	mov	r0, r4
   26294:	bl	2d82c <__assert_fail@plt+0x1bc88>
   26298:	subs	r5, r0, #0
   2629c:	beq	26ecc <__assert_fail@plt+0x15328>
   262a0:	ldr	r3, [fp, #76]	; 0x4c
   262a4:	cmp	r3, #0
   262a8:	beq	266f4 <__assert_fail@plt+0x14b50>
   262ac:	mov	r0, r4
   262b0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   262b4:	subs	r6, r0, #0
   262b8:	beq	26e2c <__assert_fail@plt+0x15288>
   262bc:	ldr	r4, [sp, #20]
   262c0:	str	fp, [sp, #12]
   262c4:	add	sl, sp, #300	; 0x12c
   262c8:	mov	fp, r7
   262cc:	lsl	r8, fp, #2
   262d0:	mov	r2, r8
   262d4:	mov	r1, #0
   262d8:	mov	r0, r6
   262dc:	bl	119e8 <memset@plt>
   262e0:	mov	r3, #0
   262e4:	str	r5, [sp, #284]	; 0x11c
   262e8:	str	r6, [sp, #288]	; 0x120
   262ec:	str	r9, [sp, #292]	; 0x124
   262f0:	str	r4, [sp, #296]	; 0x128
   262f4:	add	r1, sp, #284	; 0x11c
   262f8:	str	r3, [sl]
   262fc:	str	r3, [sl, #4]
   26300:	str	r3, [sl, #8]
   26304:	add	r0, sp, #148	; 0x94
   26308:	bl	257b0 <__assert_fail@plt+0x13c0c>
   2630c:	mov	r7, r0
   26310:	ldr	r0, [sp, #308]	; 0x134
   26314:	bl	17274 <__assert_fail@plt+0x56d0>
   26318:	cmp	r7, #0
   2631c:	bne	26f00 <__assert_fail@plt+0x1535c>
   26320:	ldr	r2, [r5]
   26324:	cmp	r2, #0
   26328:	bne	26e4c <__assert_fail@plt+0x152a8>
   2632c:	ldr	r2, [r6]
   26330:	cmp	r2, #0
   26334:	bne	26e4c <__assert_fail@plt+0x152a8>
   26338:	ldr	r3, [sp, #248]	; 0xf8
   2633c:	sub	r8, r8, #4
   26340:	add	r3, r3, r8
   26344:	subs	r4, r4, #1
   26348:	bcc	26d00 <__assert_fail@plt+0x1515c>
   2634c:	ldr	r1, [r3, #-4]!
   26350:	cmp	r1, #0
   26354:	beq	26344 <__assert_fail@plt+0x147a0>
   26358:	ldrb	r2, [r1, #52]	; 0x34
   2635c:	tst	r2, #16
   26360:	beq	26344 <__assert_fail@plt+0x147a0>
   26364:	mov	r2, r4
   26368:	add	r0, sp, #148	; 0x94
   2636c:	bl	232c8 <__assert_fail@plt+0x11724>
   26370:	add	fp, r4, #1
   26374:	mov	r9, r0
   26378:	b	262cc <__assert_fail@plt+0x14728>
   2637c:	ldr	r5, [sp, #188]	; 0xbc
   26380:	mov	r1, r4
   26384:	mov	r2, r5
   26388:	add	r0, sp, #148	; 0x94
   2638c:	bl	232c8 <__assert_fail@plt+0x11724>
   26390:	cmp	r0, #0
   26394:	beq	26020 <__assert_fail@plt+0x1447c>
   26398:	str	r5, [sp, #20]
   2639c:	b	260e0 <__assert_fail@plt+0x1453c>
   263a0:	mov	r2, #0
   263a4:	add	r1, sp, #148	; 0x94
   263a8:	add	r0, sp, #124	; 0x7c
   263ac:	str	ip, [sp, #188]	; 0xbc
   263b0:	bl	25634 <__assert_fail@plt+0x13a90>
   263b4:	ldr	r3, [sp, #124]	; 0x7c
   263b8:	cmp	r3, #0
   263bc:	bne	26ee8 <__assert_fail@plt+0x15344>
   263c0:	cmp	r0, #0
   263c4:	bne	26ef8 <__assert_fail@plt+0x15354>
   263c8:	ldr	r2, [sp, #248]	; 0xf8
   263cc:	b	261a0 <__assert_fail@plt+0x145fc>
   263d0:	ldr	r3, [fp, #8]
   263d4:	ldr	sl, [sp, #232]	; 0xe8
   263d8:	cmp	r3, #0
   263dc:	ble	264c8 <__assert_fail@plt+0x14924>
   263e0:	add	r2, sl, #128	; 0x80
   263e4:	str	r9, [sp, #64]	; 0x40
   263e8:	mov	r4, #0
   263ec:	str	r2, [sp, #24]
   263f0:	mov	r9, r3
   263f4:	b	2645c <__assert_fail@plt+0x148b8>
   263f8:	tst	r0, #1
   263fc:	beq	26450 <__assert_fail@plt+0x148ac>
   26400:	tst	r6, #8
   26404:	bne	26450 <__assert_fail@plt+0x148ac>
   26408:	tst	r6, #32
   2640c:	beq	26418 <__assert_fail@plt+0x14874>
   26410:	tst	r0, #2
   26414:	beq	26450 <__assert_fail@plt+0x148ac>
   26418:	tst	r6, #128	; 0x80
   2641c:	beq	26428 <__assert_fail@plt+0x14884>
   26420:	tst	r0, #8
   26424:	beq	26450 <__assert_fail@plt+0x148ac>
   26428:	str	r5, [sp]
   2642c:	mov	r0, r8
   26430:	add	r3, sp, #148	; 0x94
   26434:	mov	r2, r7
   26438:	ldr	r1, [sp, #24]
   2643c:	bl	24474 <__assert_fail@plt+0x128d0>
   26440:	cmp	r0, #0
   26444:	bne	264d4 <__assert_fail@plt+0x14930>
   26448:	ldr	r5, [sp, #188]	; 0xbc
   2644c:	ldr	r9, [fp, #8]
   26450:	add	r4, r4, #1
   26454:	cmp	r4, r9
   26458:	bge	264c4 <__assert_fail@plt+0x14920>
   2645c:	ldr	r2, [fp, #12]
   26460:	ldr	r8, [sl]
   26464:	ldr	r7, [r2, r4, lsl #2]
   26468:	add	r2, r8, r7, lsl #3
   2646c:	ldrb	r1, [r2, #6]
   26470:	tst	r1, #16
   26474:	beq	26450 <__assert_fail@plt+0x148ac>
   26478:	ldr	r6, [r2, #4]
   2647c:	ldr	r3, [pc, #2164]	; 26cf8 <__assert_fail@plt+0x15154>
   26480:	tst	r6, r3
   26484:	beq	26428 <__assert_fail@plt+0x14884>
   26488:	ldr	r2, [sp, #236]	; 0xec
   2648c:	mov	r1, r5
   26490:	add	r0, sp, #148	; 0x94
   26494:	bl	228d8 <__assert_fail@plt+0x10d34>
   26498:	ldr	r3, [pc, #2140]	; 26cfc <__assert_fail@plt+0x15158>
   2649c:	and	r6, r3, r6, lsr #8
   264a0:	tst	r6, #4
   264a4:	bne	263f8 <__assert_fail@plt+0x14854>
   264a8:	tst	r6, #8
   264ac:	beq	26408 <__assert_fail@plt+0x14864>
   264b0:	tst	r0, #1
   264b4:	beq	26408 <__assert_fail@plt+0x14864>
   264b8:	add	r4, r4, #1
   264bc:	cmp	r4, r9
   264c0:	blt	2645c <__assert_fail@plt+0x148b8>
   264c4:	ldr	r9, [sp, #64]	; 0x40
   264c8:	mov	r3, #0
   264cc:	str	r3, [sp, #124]	; 0x7c
   264d0:	b	26058 <__assert_fail@plt+0x144b4>
   264d4:	ldr	r3, [sp, #268]	; 0x10c
   264d8:	ldr	r6, [sp, #188]	; 0xbc
   264dc:	cmp	r3, r0
   264e0:	add	r6, r0, r6
   264e4:	movlt	r3, r0
   264e8:	mov	r1, r6
   264ec:	add	r0, sp, #148	; 0x94
   264f0:	str	r3, [sp, #268]	; 0x10c
   264f4:	bl	1ff00 <__assert_fail@plt+0xe35c>
   264f8:	cmp	r0, #0
   264fc:	str	r0, [sp, #136]	; 0x88
   26500:	bne	2663c <__assert_fail@plt+0x14a98>
   26504:	ldr	r3, [sl, #12]
   26508:	ldr	r8, [sp, #248]	; 0xf8
   2650c:	ldr	r2, [sl, #24]
   26510:	ldr	r3, [r3, r7, lsl #2]
   26514:	ldr	r1, [r8, r6, lsl #2]
   26518:	add	r3, r3, r3, lsl #1
   2651c:	cmp	r1, #0
   26520:	add	r2, r2, r3, lsl #2
   26524:	beq	26604 <__assert_fail@plt+0x14a60>
   26528:	ldr	r1, [r1, #40]	; 0x28
   2652c:	add	r0, sp, #284	; 0x11c
   26530:	bl	20c3c <__assert_fail@plt+0xf098>
   26534:	cmp	r0, #0
   26538:	str	r0, [sp, #136]	; 0x88
   2653c:	bne	2663c <__assert_fail@plt+0x14a98>
   26540:	ldr	r2, [sp, #236]	; 0xec
   26544:	sub	r1, r6, #1
   26548:	add	r0, sp, #148	; 0x94
   2654c:	bl	228d8 <__assert_fail@plt+0x10d34>
   26550:	add	r2, sp, #284	; 0x11c
   26554:	mov	r1, sl
   26558:	ldr	r7, [sp, #248]	; 0xf8
   2655c:	mov	r3, r0
   26560:	add	r0, sp, #136	; 0x88
   26564:	bl	20d88 <__assert_fail@plt+0xf1e4>
   26568:	str	r0, [r7, r6, lsl #2]
   2656c:	ldr	r0, [sp, #292]	; 0x124
   26570:	bl	17274 <__assert_fail@plt+0x56d0>
   26574:	ldr	r7, [sp, #248]	; 0xf8
   26578:	ldr	r3, [r7, r6, lsl #2]
   2657c:	cmp	r3, #0
   26580:	bne	26448 <__assert_fail@plt+0x148a4>
   26584:	ldr	r0, [sp, #136]	; 0x88
   26588:	cmp	r0, #0
   2658c:	beq	26448 <__assert_fail@plt+0x148a4>
   26590:	ldr	r9, [sp, #64]	; 0x40
   26594:	b	26644 <__assert_fail@plt+0x14aa0>
   26598:	ldr	r2, [sp, #196]	; 0xc4
   2659c:	cmp	r3, r2
   265a0:	bge	26040 <__assert_fail@plt+0x1449c>
   265a4:	add	r1, r5, #2
   265a8:	add	r0, sp, #148	; 0x94
   265ac:	bl	1f44c <__assert_fail@plt+0xd8a8>
   265b0:	cmp	r0, #0
   265b4:	str	r0, [sp, #124]	; 0x7c
   265b8:	bne	266ac <__assert_fail@plt+0x14b08>
   265bc:	ldr	r5, [sp, #188]	; 0xbc
   265c0:	b	2604c <__assert_fail@plt+0x144a8>
   265c4:	ldr	r5, [fp, #48]	; 0x30
   265c8:	cmp	r5, #0
   265cc:	beq	26d34 <__assert_fail@plt+0x15190>
   265d0:	ldr	r1, [sp, #188]	; 0xbc
   265d4:	ldr	r2, [sp, #236]	; 0xec
   265d8:	sub	r1, r1, #1
   265dc:	add	r0, sp, #148	; 0x94
   265e0:	bl	228d8 <__assert_fail@plt+0x10d34>
   265e4:	tst	r0, #1
   265e8:	addne	r4, r4, #256	; 0x100
   265ec:	ldr	r4, [r5, r4, lsl #2]
   265f0:	b	26078 <__assert_fail@plt+0x144d4>
   265f4:	ldr	r2, [sp, #196]	; 0xc4
   265f8:	cmp	r3, r2
   265fc:	bge	2604c <__assert_fail@plt+0x144a8>
   26600:	b	265a4 <__assert_fail@plt+0x14a00>
   26604:	ldm	r2, {r0, r1, r2}
   26608:	add	r3, sp, #284	; 0x11c
   2660c:	stm	r3, {r0, r1, r2}
   26610:	sub	r1, r6, #1
   26614:	ldr	r2, [sp, #236]	; 0xec
   26618:	add	r0, sp, #148	; 0x94
   2661c:	bl	228d8 <__assert_fail@plt+0x10d34>
   26620:	add	r2, sp, #284	; 0x11c
   26624:	mov	r1, sl
   26628:	mov	r3, r0
   2662c:	add	r0, sp, #136	; 0x88
   26630:	bl	20d88 <__assert_fail@plt+0xf1e4>
   26634:	str	r0, [r8, r6, lsl #2]
   26638:	b	26574 <__assert_fail@plt+0x149d0>
   2663c:	ldr	r9, [sp, #64]	; 0x40
   26640:	ldr	r7, [sp, #248]	; 0xf8
   26644:	cmp	r7, #0
   26648:	str	r0, [sp, #124]	; 0x7c
   2664c:	beq	266e8 <__assert_fail@plt+0x14b44>
   26650:	mov	r4, #0
   26654:	b	26084 <__assert_fail@plt+0x144e0>
   26658:	ldr	r3, [sp, #28]
   2665c:	ldr	r7, [sp, #248]	; 0xf8
   26660:	ldr	r4, [r3, #76]	; 0x4c
   26664:	cmp	r4, #0
   26668:	beq	2676c <__assert_fail@plt+0x14bc8>
   2666c:	ldr	r3, [sp, #20]
   26670:	add	r0, sp, #148	; 0x94
   26674:	mov	r2, r3
   26678:	ldr	r1, [r7, r3, lsl #2]
   2667c:	bl	232c8 <__assert_fail@plt+0x11724>
   26680:	str	r0, [sp, #244]	; 0xf4
   26684:	b	26b98 <__assert_fail@plt+0x14ff4>
   26688:	tst	r0, #4
   2668c:	beq	25fc8 <__assert_fail@plt+0x14424>
   26690:	mov	r3, r0
   26694:	ldr	r2, [fp, #40]	; 0x28
   26698:	mov	r1, r4
   2669c:	add	r0, sp, #124	; 0x7c
   266a0:	bl	20d88 <__assert_fail@plt+0xf1e4>
   266a4:	subs	fp, r0, #0
   266a8:	bne	25fc8 <__assert_fail@plt+0x14424>
   266ac:	ldr	r7, [sp, #248]	; 0xf8
   266b0:	mov	r3, #12
   266b4:	str	r3, [sp, #48]	; 0x30
   266b8:	mov	r0, r7
   266bc:	bl	17274 <__assert_fail@plt+0x56d0>
   266c0:	ldr	r3, [sp, #28]
   266c4:	ldr	r3, [r3, #76]	; 0x4c
   266c8:	cmp	r3, #0
   266cc:	bne	26cd8 <__assert_fail@plt+0x15134>
   266d0:	add	r0, sp, #148	; 0x94
   266d4:	bl	1f87c <__assert_fail@plt+0xdcd8>
   266d8:	ldr	r0, [sp, #48]	; 0x30
   266dc:	add	sp, sp, #428	; 0x1ac
   266e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266e4:	mov	r7, r0
   266e8:	mov	r3, #12
   266ec:	str	r3, [sp, #48]	; 0x30
   266f0:	b	266b8 <__assert_fail@plt+0x14b14>
   266f4:	ldr	r2, [sp, #20]
   266f8:	add	r1, sp, #284	; 0x11c
   266fc:	add	r0, sp, #148	; 0x94
   26700:	str	r3, [sp, #288]	; 0x120
   26704:	str	r2, [sp, #296]	; 0x128
   26708:	str	r3, [sp, #300]	; 0x12c
   2670c:	str	r3, [sp, #304]	; 0x130
   26710:	str	r3, [sp, #308]	; 0x134
   26714:	str	r5, [sp, #284]	; 0x11c
   26718:	str	r9, [sp, #292]	; 0x124
   2671c:	bl	257b0 <__assert_fail@plt+0x13c0c>
   26720:	mov	r8, r0
   26724:	ldr	r0, [sp, #308]	; 0x134
   26728:	bl	17274 <__assert_fail@plt+0x56d0>
   2672c:	cmp	r8, #0
   26730:	bne	26e80 <__assert_fail@plt+0x152dc>
   26734:	ldr	r3, [r5]
   26738:	cmp	r3, #0
   2673c:	beq	26104 <__assert_fail@plt+0x14560>
   26740:	ldr	r0, [sp, #248]	; 0xf8
   26744:	bl	17274 <__assert_fail@plt+0x56d0>
   26748:	ldr	r3, [sp, #20]
   2674c:	mov	r0, #0
   26750:	str	r3, [sp, #240]	; 0xf0
   26754:	str	r5, [sp, #248]	; 0xf8
   26758:	str	r9, [sp, #244]	; 0xf4
   2675c:	bl	17274 <__assert_fail@plt+0x56d0>
   26760:	mov	r0, #0
   26764:	bl	17274 <__assert_fail@plt+0x56d0>
   26768:	ldr	r7, [sp, #248]	; 0xf8
   2676c:	ldr	r3, [sp, #76]	; 0x4c
   26770:	cmp	r3, #0
   26774:	beq	266b8 <__assert_fail@plt+0x14b14>
   26778:	cmp	r3, #1
   2677c:	bls	267a4 <__assert_fail@plt+0x14c00>
   26780:	ldr	r3, [sp, #76]	; 0x4c
   26784:	mvn	r1, #0
   26788:	sub	r2, r3, #-536870911	; 0xe0000001
   2678c:	ldr	r3, [sp, #476]	; 0x1dc
   26790:	add	r2, r3, r2, lsl #3
   26794:	str	r1, [r3, #12]
   26798:	str	r1, [r3, #8]!
   2679c:	cmp	r2, r3
   267a0:	bne	26794 <__assert_fail@plt+0x14bf0>
   267a4:	ldr	r3, [sp, #44]	; 0x2c
   267a8:	ldr	r1, [sp, #476]	; 0x1dc
   267ac:	ldr	r2, [sp, #240]	; 0xf0
   267b0:	ldrb	r3, [r3, #28]
   267b4:	str	r2, [r1, #4]
   267b8:	ldr	r2, [sp, #76]	; 0x4c
   267bc:	mov	r4, #0
   267c0:	lsr	r3, r3, #4
   267c4:	eor	r3, r3, #1
   267c8:	cmp	r2, #1
   267cc:	moveq	r3, #0
   267d0:	andne	r3, r3, #1
   267d4:	cmp	r3, #0
   267d8:	mov	r3, r1
   267dc:	moveq	r3, r2
   267e0:	str	r4, [r1]
   267e4:	lsleq	r3, r3, #3
   267e8:	streq	r3, [sp, #20]
   267ec:	beq	269a8 <__assert_fail@plt+0x14e04>
   267f0:	ldr	r2, [sp, #28]
   267f4:	ldrb	r3, [r2, #88]	; 0x58
   267f8:	tst	r3, #1
   267fc:	beq	270e0 <__assert_fail@plt+0x1553c>
   26800:	ldr	r3, [r2, #76]	; 0x4c
   26804:	cmp	r3, #0
   26808:	ble	270e0 <__assert_fail@plt+0x1553c>
   2680c:	ldr	r1, [sp, #44]	; 0x2c
   26810:	mov	r2, #2
   26814:	mov	r3, #16
   26818:	ldr	r1, [r1]
   2681c:	add	r8, sp, #296	; 0x128
   26820:	mov	r0, #48	; 0x30
   26824:	str	r1, [sp, #24]
   26828:	str	r4, [sp, #136]	; 0x88
   2682c:	str	r4, [sp, #144]	; 0x90
   26830:	str	r4, [sp, #284]	; 0x11c
   26834:	str	r2, [sp, #140]	; 0x8c
   26838:	str	r3, [sp, #288]	; 0x120
   2683c:	str	r8, [sp, #292]	; 0x124
   26840:	bl	2d82c <__assert_fail@plt+0x1bc88>
   26844:	cmp	r0, #0
   26848:	str	r0, [sp, #144]	; 0x90
   2684c:	beq	2738c <__assert_fail@plt+0x157e8>
   26850:	ldr	r3, [sp, #284]	; 0x11c
   26854:	ldr	r2, [sp, #76]	; 0x4c
   26858:	add	r9, sp, #124	; 0x7c
   2685c:	cmp	r2, r3
   26860:	ldr	r3, [sp, #24]
   26864:	ldr	fp, [r3, #72]	; 0x48
   26868:	str	r4, [sp, #124]	; 0x7c
   2686c:	str	r4, [r9, #4]
   26870:	str	r4, [r9, #8]
   26874:	bhi	27384 <__assert_fail@plt+0x157e0>
   26878:	ldr	r3, [sp, #76]	; 0x4c
   2687c:	add	sl, sp, #136	; 0x88
   26880:	str	r3, [sp, #284]	; 0x11c
   26884:	ldr	r5, [sp, #76]	; 0x4c
   26888:	ldr	r3, [sp, #292]	; 0x124
   2688c:	ldr	r1, [sp, #476]	; 0x1dc
   26890:	mov	r0, r3
   26894:	str	r3, [sp, #16]
   26898:	lsl	r3, r5, #3
   2689c:	mov	r2, r3
   268a0:	str	r3, [sp, #20]
   268a4:	bl	11784 <memcpy@plt>
   268a8:	add	r3, sp, #424	; 0x1a8
   268ac:	mov	r2, r3
   268b0:	ldr	r3, [sp, #476]	; 0x1dc
   268b4:	str	r8, [sp, #12]
   268b8:	mov	r8, r5
   268bc:	ldr	r4, [r3]
   268c0:	lsl	r1, r5, #4
   268c4:	str	r4, [r2, #-304]!	; 0xfffffed0
   268c8:	str	r1, [sp, #44]	; 0x2c
   268cc:	str	r2, [sp, #40]	; 0x28
   268d0:	ldr	r3, [sp, #476]	; 0x1dc
   268d4:	ldr	r3, [r3, #4]
   268d8:	cmp	r4, r3
   268dc:	bgt	26964 <__assert_fail@plt+0x14dc0>
   268e0:	ldr	r2, [sp, #24]
   268e4:	lsl	r6, fp, #3
   268e8:	mov	r7, fp
   268ec:	ldr	r0, [r2]
   268f0:	add	r1, r0, r6
   268f4:	ldrb	r2, [r1, #4]
   268f8:	cmp	r2, #8
   268fc:	beq	271d4 <__assert_fail@plt+0x15630>
   26900:	cmp	r2, #9
   26904:	beq	27184 <__assert_fail@plt+0x155e0>
   26908:	cmp	r3, r4
   2690c:	beq	270c8 <__assert_fail@plt+0x15524>
   26910:	cmp	sl, #0
   26914:	beq	26f64 <__assert_fail@plt+0x153c0>
   26918:	mov	r2, fp
   2691c:	add	r1, sp, #132	; 0x84
   26920:	ldr	r0, [sp, #128]	; 0x80
   26924:	bl	200b8 <__assert_fail@plt+0xe514>
   26928:	cmp	r0, #0
   2692c:	beq	26f64 <__assert_fail@plt+0x153c0>
   26930:	ldr	r2, [sp, #476]	; 0x1dc
   26934:	mov	r3, #0
   26938:	ldr	r1, [sp, #476]	; 0x1dc
   2693c:	ldr	r1, [r1, r3, lsl #3]
   26940:	add	r3, r3, #1
   26944:	cmp	r1, #0
   26948:	blt	26958 <__assert_fail@plt+0x14db4>
   2694c:	ldr	r1, [r2, #4]
   26950:	cmn	r1, #1
   26954:	beq	26f34 <__assert_fail@plt+0x15390>
   26958:	cmp	r8, r3
   2695c:	add	r2, r2, #8
   26960:	bne	26938 <__assert_fail@plt+0x14d94>
   26964:	ldr	r0, [sp, #132]	; 0x84
   26968:	ldr	r8, [sp, #12]
   2696c:	bl	17274 <__assert_fail@plt+0x56d0>
   26970:	ldr	r0, [sp, #292]	; 0x124
   26974:	cmp	r0, r8
   26978:	beq	26980 <__assert_fail@plt+0x14ddc>
   2697c:	bl	17274 <__assert_fail@plt+0x56d0>
   26980:	mov	r2, #0
   26984:	mov	r3, #16
   26988:	mov	r0, sl
   2698c:	str	r8, [sp, #292]	; 0x124
   26990:	str	r2, [sp, #284]	; 0x11c
   26994:	str	r3, [sp, #288]	; 0x120
   26998:	bl	1fac4 <__assert_fail@plt+0xdf20>
   2699c:	cmp	r0, #0
   269a0:	bne	26f08 <__assert_fail@plt+0x15364>
   269a4:	ldr	r7, [sp, #248]	; 0xf8
   269a8:	ldr	r3, [sp, #476]	; 0x1dc
   269ac:	ldr	r2, [sp, #20]
   269b0:	ldrb	r6, [sp, #224]	; 0xe0
   269b4:	ldr	r5, [sp, #176]	; 0xb0
   269b8:	ldr	r8, [sp, #160]	; 0xa0
   269bc:	ldr	r9, [sp, #180]	; 0xb4
   269c0:	ldr	lr, [sp, #116]	; 0x74
   269c4:	add	r4, r3, r2
   269c8:	mov	ip, r3
   269cc:	add	r1, r3, #4
   269d0:	ldr	r2, [r1, #-4]
   269d4:	cmn	r2, #1
   269d8:	beq	269f8 <__assert_fail@plt+0x14e54>
   269dc:	cmp	r6, #0
   269e0:	bne	270a0 <__assert_fail@plt+0x154fc>
   269e4:	ldr	r0, [r3, #4]
   269e8:	add	r2, lr, r2
   269ec:	add	r0, lr, r0
   269f0:	str	r2, [r1, #-4]
   269f4:	str	r0, [r3, #4]
   269f8:	add	r3, r3, #8
   269fc:	cmp	r4, r3
   26a00:	add	r1, r1, #8
   26a04:	bne	269d0 <__assert_fail@plt+0x14e2c>
   26a08:	ldr	r2, [sp, #96]	; 0x60
   26a0c:	cmp	r2, #0
   26a10:	ble	26a40 <__assert_fail@plt+0x14e9c>
   26a14:	ldr	r2, [sp, #96]	; 0x60
   26a18:	ldr	r1, [sp, #76]	; 0x4c
   26a1c:	ldr	r0, [sp, #476]	; 0x1dc
   26a20:	add	r1, r2, r1
   26a24:	mvn	r2, #0
   26a28:	add	r1, r0, r1, lsl #3
   26a2c:	str	r2, [r3]
   26a30:	str	r2, [r3, #4]
   26a34:	add	r3, r3, #8
   26a38:	cmp	r3, r1
   26a3c:	bne	26a2c <__assert_fail@plt+0x14e88>
   26a40:	ldr	r3, [sp, #28]
   26a44:	ldr	r3, [r3, #132]	; 0x84
   26a48:	cmp	r3, #0
   26a4c:	beq	266b8 <__assert_fail@plt+0x14b14>
   26a50:	mov	r2, #0
   26a54:	ldr	lr, [sp, #76]	; 0x4c
   26a58:	b	26a98 <__assert_fail@plt+0x14ef4>
   26a5c:	ldr	r0, [r3]
   26a60:	cmp	r2, r0
   26a64:	add	r4, r0, #1
   26a68:	mov	r2, r1
   26a6c:	beq	26a90 <__assert_fail@plt+0x14eec>
   26a70:	ldr	r1, [sp, #476]	; 0x1dc
   26a74:	ldr	r0, [sp, #476]	; 0x1dc
   26a78:	ldr	r1, [r1, r4, lsl #3]
   26a7c:	str	r1, [ip, #8]
   26a80:	ldr	r1, [r3]
   26a84:	add	r1, r0, r1, lsl #3
   26a88:	ldr	r1, [r1, #12]
   26a8c:	str	r1, [ip, #12]
   26a90:	add	r3, r3, #4
   26a94:	add	ip, ip, #8
   26a98:	add	r1, r2, #1
   26a9c:	cmp	r1, lr
   26aa0:	bne	26a5c <__assert_fail@plt+0x14eb8>
   26aa4:	b	266b8 <__assert_fail@plt+0x14b14>
   26aa8:	ldr	r3, [sp, #52]	; 0x34
   26aac:	cmp	r3, r6
   26ab0:	ble	25f0c <__assert_fail@plt+0x14368>
   26ab4:	ldr	r3, [sp, #56]	; 0x38
   26ab8:	ldr	r1, [sp, #88]	; 0x58
   26abc:	ldrb	r2, [r3, r6]
   26ac0:	add	r3, r3, r6
   26ac4:	ldrb	r2, [r1, r2]
   26ac8:	ldr	r1, [sp, #60]	; 0x3c
   26acc:	ldrb	r2, [r1, r2]
   26ad0:	cmp	r2, #0
   26ad4:	bne	25f54 <__assert_fail@plt+0x143b0>
   26ad8:	add	r2, r6, #1
   26adc:	ldr	ip, [sp, #60]	; 0x3c
   26ae0:	ldr	lr, [sp, #88]	; 0x58
   26ae4:	ldr	r0, [sp, #52]	; 0x34
   26ae8:	b	26b04 <__assert_fail@plt+0x14f60>
   26aec:	ldrb	r1, [r3, #1]!
   26af0:	add	r2, r2, #1
   26af4:	ldrb	r1, [lr, r1]
   26af8:	ldrb	r1, [ip, r1]
   26afc:	cmp	r1, #0
   26b00:	bne	26d98 <__assert_fail@plt+0x151f4>
   26b04:	cmp	r0, r2
   26b08:	mov	r6, r2
   26b0c:	bne	26aec <__assert_fail@plt+0x14f48>
   26b10:	b	25f04 <__assert_fail@plt+0x14360>
   26b14:	ldr	r3, [sp, #68]	; 0x44
   26b18:	cmp	r3, r6
   26b1c:	bgt	26150 <__assert_fail@plt+0x145ac>
   26b20:	ldr	ip, [sp, #116]	; 0x74
   26b24:	ldr	r1, [sp, #108]	; 0x6c
   26b28:	mov	r0, ip
   26b2c:	ldr	r4, [sp, #60]	; 0x3c
   26b30:	ldr	lr, [sp, #88]	; 0x58
   26b34:	ldr	r7, [sp, #68]	; 0x44
   26b38:	ldr	r8, [sp, #56]	; 0x38
   26b3c:	ldr	r5, [sp, #72]	; 0x48
   26b40:	b	26b54 <__assert_fail@plt+0x14fb0>
   26b44:	cmp	r7, r6
   26b48:	mov	r0, r6
   26b4c:	mov	r1, #1
   26b50:	bgt	26da0 <__assert_fail@plt+0x151fc>
   26b54:	cmp	r5, r6
   26b58:	mov	r3, #0
   26b5c:	ldrbgt	r3, [r8, r6]
   26b60:	cmp	lr, #0
   26b64:	sub	r6, r6, #1
   26b68:	mov	r2, r3
   26b6c:	ldrbne	r2, [lr, r3]
   26b70:	ldrb	r3, [r4, r2]
   26b74:	cmp	r3, #0
   26b78:	beq	26b44 <__assert_fail@plt+0x14fa0>
   26b7c:	cmp	r1, #0
   26b80:	movne	ip, r0
   26b84:	strne	r0, [sp, #116]	; 0x74
   26b88:	mov	r6, ip
   26b8c:	b	25f54 <__assert_fail@plt+0x143b0>
   26b90:	ldr	r3, [sp, #28]
   26b94:	ldr	r4, [r3, #76]	; 0x4c
   26b98:	cmp	r4, #0
   26b9c:	bne	26270 <__assert_fail@plt+0x146cc>
   26ba0:	b	2676c <__assert_fail@plt+0x14bc8>
   26ba4:	ldr	r1, [sp, #72]	; 0x48
   26ba8:	b	25cc0 <__assert_fail@plt+0x1411c>
   26bac:	cmp	sl, #0
   26bb0:	beq	27300 <__assert_fail@plt+0x1575c>
   26bb4:	ldr	r3, [sp, #16]
   26bb8:	str	r9, [sp, #4]
   26bbc:	str	r3, [sp]
   26bc0:	mov	r2, r8
   26bc4:	ldr	r3, [sp, #476]	; 0x1dc
   26bc8:	ldr	r1, [sp, #40]	; 0x28
   26bcc:	mov	r0, sl
   26bd0:	bl	1ff94 <__assert_fail@plt+0xe3f0>
   26bd4:	subs	fp, r0, #0
   26bd8:	bge	27014 <__assert_fail@plt+0x15470>
   26bdc:	ldr	r0, [sp, #132]	; 0x84
   26be0:	ldr	r8, [sp, #12]
   26be4:	bl	17274 <__assert_fail@plt+0x56d0>
   26be8:	ldr	r0, [sp, #292]	; 0x124
   26bec:	cmp	r0, r8
   26bf0:	beq	26bf8 <__assert_fail@plt+0x15054>
   26bf4:	bl	17274 <__assert_fail@plt+0x56d0>
   26bf8:	mov	r3, #16
   26bfc:	mov	r2, #0
   26c00:	str	r3, [sp, #288]	; 0x120
   26c04:	mov	r0, sl
   26c08:	mov	r3, #1
   26c0c:	str	r8, [sp, #292]	; 0x124
   26c10:	str	r2, [sp, #284]	; 0x11c
   26c14:	str	r3, [sp, #48]	; 0x30
   26c18:	bl	1fac4 <__assert_fail@plt+0xdf20>
   26c1c:	ldr	r7, [sp, #248]	; 0xf8
   26c20:	b	266b8 <__assert_fail@plt+0x14b14>
   26c24:	ldr	r1, [sp, #172]	; 0xac
   26c28:	ldr	r4, [sp, #60]	; 0x3c
   26c2c:	ldr	r5, [sp, #92]	; 0x5c
   26c30:	ldr	r7, [sp, #68]	; 0x44
   26c34:	ldr	r8, [sp, #52]	; 0x34
   26c38:	b	26c80 <__assert_fail@plt+0x150dc>
   26c3c:	ldr	r0, [sp, #176]	; 0xb0
   26c40:	mov	r2, #0
   26c44:	cmp	r3, r0
   26c48:	ldrcc	r2, [sp, #152]	; 0x98
   26c4c:	ldrbcc	r2, [r2, r3]
   26c50:	ldrb	r3, [r4, r2]
   26c54:	cmp	r3, #0
   26c58:	bne	25f54 <__assert_fail@plt+0x143b0>
   26c5c:	add	r6, r6, r5
   26c60:	cmp	r8, r6
   26c64:	movge	r3, #0
   26c68:	movlt	r3, #1
   26c6c:	cmp	r7, r6
   26c70:	orrgt	r3, r3, #1
   26c74:	cmp	r3, #0
   26c78:	str	r6, [sp, #116]	; 0x74
   26c7c:	bne	26150 <__assert_fail@plt+0x145ac>
   26c80:	ldr	r2, [sp, #180]	; 0xb4
   26c84:	sub	r3, r6, r1
   26c88:	cmp	r3, r2
   26c8c:	bcc	26c3c <__assert_fail@plt+0x15098>
   26c90:	ldr	r2, [sp, #480]	; 0x1e0
   26c94:	mov	r1, r6
   26c98:	add	r0, sp, #148	; 0x94
   26c9c:	bl	229c4 <__assert_fail@plt+0x10e20>
   26ca0:	cmp	r0, #0
   26ca4:	bne	26f08 <__assert_fail@plt+0x15364>
   26ca8:	ldr	r1, [sp, #172]	; 0xac
   26cac:	sub	r3, r6, r1
   26cb0:	b	26c3c <__assert_fail@plt+0x15098>
   26cb4:	ldr	r3, [sp, #12]
   26cb8:	ldr	r2, [sp, #236]	; 0xec
   26cbc:	sub	r1, r3, #1
   26cc0:	add	r0, sp, #148	; 0x94
   26cc4:	bl	228d8 <__assert_fail@plt+0x10d34>
   26cc8:	tst	r0, #1
   26ccc:	beq	26d70 <__assert_fail@plt+0x151cc>
   26cd0:	ldr	fp, [r4, #40]	; 0x28
   26cd4:	b	25fc8 <__assert_fail@plt+0x14424>
   26cd8:	add	r0, sp, #148	; 0x94
   26cdc:	bl	1fa20 <__assert_fail@plt+0xde7c>
   26ce0:	ldr	r0, [sp, #280]	; 0x118
   26ce4:	bl	17274 <__assert_fail@plt+0x56d0>
   26ce8:	ldr	r0, [sp, #264]	; 0x108
   26cec:	bl	17274 <__assert_fail@plt+0x56d0>
   26cf0:	b	266d0 <__assert_fail@plt+0x14b2c>
   26cf4:	beq	fead17a4 <optarg@@GLIBC_2.4+0xfea8f564>
   26cf8:	andeq	pc, r3, r0, lsl #30
   26cfc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   26d00:	mov	r0, r5
   26d04:	bl	17274 <__assert_fail@plt+0x56d0>
   26d08:	mov	r0, r6
   26d0c:	bl	17274 <__assert_fail@plt+0x56d0>
   26d10:	add	r0, sp, #148	; 0x94
   26d14:	bl	1fa20 <__assert_fail@plt+0xde7c>
   26d18:	ldr	r6, [sp, #116]	; 0x74
   26d1c:	b	26120 <__assert_fail@plt+0x1457c>
   26d20:	ldr	r3, [sp, #28]
   26d24:	ldrb	r3, [r3, #88]	; 0x58
   26d28:	tst	r3, #2
   26d2c:	bne	25d5c <__assert_fail@plt+0x141b8>
   26d30:	b	25d80 <__assert_fail@plt+0x141dc>
   26d34:	mov	r1, fp
   26d38:	ldr	r0, [sp, #232]	; 0xe8
   26d3c:	bl	21e44 <__assert_fail@plt+0x102a0>
   26d40:	cmp	r0, #0
   26d44:	bne	26068 <__assert_fail@plt+0x144c4>
   26d48:	ldr	r7, [sp, #248]	; 0xf8
   26d4c:	mov	r3, #12
   26d50:	cmp	r7, #0
   26d54:	str	r3, [sp, #124]	; 0x7c
   26d58:	bne	26650 <__assert_fail@plt+0x14aac>
   26d5c:	b	266e8 <__assert_fail@plt+0x14b44>
   26d60:	ldr	r3, [sp, #104]	; 0x68
   26d64:	str	r3, [sp, #16]
   26d68:	ldrb	r3, [fp, #52]	; 0x34
   26d6c:	b	25ff4 <__assert_fail@plt+0x14450>
   26d70:	cmp	r0, #0
   26d74:	beq	25fc8 <__assert_fail@plt+0x14424>
   26d78:	and	r3, r0, #6
   26d7c:	cmp	r3, #6
   26d80:	ldreq	fp, [r4, #48]	; 0x30
   26d84:	beq	25fc8 <__assert_fail@plt+0x14424>
   26d88:	tst	r0, #2
   26d8c:	beq	26688 <__assert_fail@plt+0x14ae4>
   26d90:	ldr	fp, [r4, #44]	; 0x2c
   26d94:	b	25fc8 <__assert_fail@plt+0x14424>
   26d98:	str	r6, [sp, #116]	; 0x74
   26d9c:	b	25f54 <__assert_fail@plt+0x143b0>
   26da0:	str	r6, [sp, #116]	; 0x74
   26da4:	ldr	r7, [sp, #248]	; 0xf8
   26da8:	str	r1, [sp, #48]	; 0x30
   26dac:	b	266b8 <__assert_fail@plt+0x14b14>
   26db0:	ldrsb	r3, [fp, #52]	; 0x34
   26db4:	cmp	r3, #0
   26db8:	blt	26ea8 <__assert_fail@plt+0x15304>
   26dbc:	ldr	r3, [sp, #40]	; 0x28
   26dc0:	cmp	r3, #0
   26dc4:	ldr	r3, [sp, #12]
   26dc8:	str	r3, [sp, #20]
   26dcc:	movne	r3, #1
   26dd0:	strne	r3, [sp, #36]	; 0x24
   26dd4:	bne	2600c <__assert_fail@plt+0x14468>
   26dd8:	b	26200 <__assert_fail@plt+0x1465c>
   26ddc:	ldr	r7, [sp, #248]	; 0xf8
   26de0:	b	266e8 <__assert_fail@plt+0x14b44>
   26de4:	mov	r3, #8
   26de8:	b	25e20 <__assert_fail@plt+0x1427c>
   26dec:	add	r4, fp, #8
   26df0:	add	r5, fp, #12
   26df4:	mov	r1, r4
   26df8:	mov	r2, r5
   26dfc:	mov	r3, #0
   26e00:	add	r0, sp, #148	; 0x94
   26e04:	bl	233a8 <__assert_fail@plt+0x11804>
   26e08:	cmp	r0, #0
   26e0c:	str	r0, [sp, #124]	; 0x7c
   26e10:	bne	26ec4 <__assert_fail@plt+0x15320>
   26e14:	ldrb	r3, [fp, #52]	; 0x34
   26e18:	tst	r3, #64	; 0x40
   26e1c:	bne	26f10 <__assert_fail@plt+0x1536c>
   26e20:	ldr	r2, [sp, #108]	; 0x6c
   26e24:	str	r2, [sp, #16]
   26e28:	b	25ff4 <__assert_fail@plt+0x14450>
   26e2c:	mov	r0, r5
   26e30:	bl	17274 <__assert_fail@plt+0x56d0>
   26e34:	mov	r0, r6
   26e38:	bl	17274 <__assert_fail@plt+0x56d0>
   26e3c:	mov	r3, #12
   26e40:	str	r3, [sp, #48]	; 0x30
   26e44:	ldr	r7, [sp, #248]	; 0xf8
   26e48:	b	266b8 <__assert_fail@plt+0x14b14>
   26e4c:	mov	r7, fp
   26e50:	ldr	fp, [sp, #12]
   26e54:	mov	r3, r7
   26e58:	mov	r2, r6
   26e5c:	mov	r1, r5
   26e60:	mov	r0, fp
   26e64:	str	r4, [sp, #20]
   26e68:	bl	212bc <__assert_fail@plt+0xf718>
   26e6c:	mov	r8, r0
   26e70:	mov	r0, r6
   26e74:	bl	17274 <__assert_fail@plt+0x56d0>
   26e78:	cmp	r8, #0
   26e7c:	beq	26740 <__assert_fail@plt+0x14b9c>
   26e80:	mov	r6, #0
   26e84:	mov	r0, r5
   26e88:	bl	17274 <__assert_fail@plt+0x56d0>
   26e8c:	mov	r0, r6
   26e90:	bl	17274 <__assert_fail@plt+0x56d0>
   26e94:	cmp	r8, #1
   26e98:	beq	26114 <__assert_fail@plt+0x14570>
   26e9c:	str	r8, [sp, #48]	; 0x30
   26ea0:	ldr	r7, [sp, #248]	; 0xf8
   26ea4:	b	266b8 <__assert_fail@plt+0x14b14>
   26ea8:	ldr	r2, [sp, #12]
   26eac:	mov	r1, fp
   26eb0:	add	r0, sp, #148	; 0x94
   26eb4:	bl	232c8 <__assert_fail@plt+0x11724>
   26eb8:	cmp	r0, #0
   26ebc:	beq	25ffc <__assert_fail@plt+0x14458>
   26ec0:	b	26dbc <__assert_fail@plt+0x15218>
   26ec4:	str	r0, [sp, #20]
   26ec8:	b	26200 <__assert_fail@plt+0x1465c>
   26ecc:	bl	17274 <__assert_fail@plt+0x56d0>
   26ed0:	mov	r0, r5
   26ed4:	bl	17274 <__assert_fail@plt+0x56d0>
   26ed8:	mov	r3, #12
   26edc:	str	r3, [sp, #48]	; 0x30
   26ee0:	ldr	r7, [sp, #248]	; 0xf8
   26ee4:	b	266b8 <__assert_fail@plt+0x14b14>
   26ee8:	cmp	r0, #0
   26eec:	mov	r4, r0
   26ef0:	bne	260a0 <__assert_fail@plt+0x144fc>
   26ef4:	b	261e0 <__assert_fail@plt+0x1463c>
   26ef8:	mov	r4, r0
   26efc:	b	260a0 <__assert_fail@plt+0x144fc>
   26f00:	mov	r8, r7
   26f04:	b	26e84 <__assert_fail@plt+0x152e0>
   26f08:	str	r0, [sp, #48]	; 0x30
   26f0c:	b	26c1c <__assert_fail@plt+0x15078>
   26f10:	mov	r2, r5
   26f14:	mov	r1, r4
   26f18:	add	r0, sp, #148	; 0x94
   26f1c:	bl	24e98 <__assert_fail@plt+0x132f4>
   26f20:	cmp	r0, #0
   26f24:	str	r0, [sp, #124]	; 0x7c
   26f28:	bne	26ec4 <__assert_fail@plt+0x15320>
   26f2c:	ldrb	r3, [fp, #52]	; 0x34
   26f30:	b	26e20 <__assert_fail@plt+0x1527c>
   26f34:	ldr	r3, [sp, #16]
   26f38:	str	r9, [sp, #4]
   26f3c:	str	r3, [sp]
   26f40:	mov	r2, r8
   26f44:	ldr	r3, [sp, #476]	; 0x1dc
   26f48:	ldr	r1, [sp, #40]	; 0x28
   26f4c:	mov	r0, sl
   26f50:	bl	1ff94 <__assert_fail@plt+0xe3f0>
   26f54:	subs	fp, r0, #0
   26f58:	blt	26964 <__assert_fail@plt+0x14dc0>
   26f5c:	mov	r7, fp
   26f60:	lsl	r6, fp, #3
   26f64:	ldr	r5, [sp, #232]	; 0xe8
   26f68:	ldr	r0, [r5]
   26f6c:	add	r1, r0, r6
   26f70:	ldrb	r3, [r1, #4]
   26f74:	tst	r3, #8
   26f78:	beq	2701c <__assert_fail@plt+0x15478>
   26f7c:	ldr	ip, [sp, #120]	; 0x78
   26f80:	ldr	r3, [sp, #248]	; 0xf8
   26f84:	mov	r2, fp
   26f88:	add	r1, sp, #132	; 0x84
   26f8c:	ldr	r0, [sp, #128]	; 0x80
   26f90:	ldr	r4, [r3, ip, lsl #2]
   26f94:	bl	200b8 <__assert_fail@plt+0xe514>
   26f98:	ldr	r5, [r5, #20]
   26f9c:	cmp	r0, #0
   26fa0:	beq	27360 <__assert_fail@plt+0x157bc>
   26fa4:	add	fp, fp, fp, lsl #1
   26fa8:	add	r2, r5, fp, lsl #2
   26fac:	ldr	r7, [r2, #4]
   26fb0:	cmp	r7, #0
   26fb4:	ble	26bb4 <__assert_fail@plt+0x15010>
   26fb8:	ldr	r3, [r4, #8]
   26fbc:	ldr	r5, [r2, #8]
   26fc0:	str	r3, [sp, #32]
   26fc4:	sub	r5, r5, #4
   26fc8:	add	r3, r4, #12
   26fcc:	mvn	fp, #0
   26fd0:	mov	r4, #0
   26fd4:	str	r3, [sp, #36]	; 0x24
   26fd8:	ldr	r6, [r5, #4]!
   26fdc:	ldr	r1, [sp, #36]	; 0x24
   26fe0:	mov	r2, r6
   26fe4:	ldr	r0, [sp, #32]
   26fe8:	bl	200b8 <__assert_fail@plt+0xe514>
   26fec:	add	r4, r4, #1
   26ff0:	cmp	r0, #0
   26ff4:	beq	27004 <__assert_fail@plt+0x15460>
   26ff8:	cmn	fp, #1
   26ffc:	bne	27398 <__assert_fail@plt+0x157f4>
   27000:	mov	fp, r6
   27004:	cmp	r4, r7
   27008:	bne	26fd8 <__assert_fail@plt+0x15434>
   2700c:	cmp	fp, #0
   27010:	blt	27458 <__assert_fail@plt+0x158b4>
   27014:	ldr	r4, [sp, #120]	; 0x78
   27018:	b	268d0 <__assert_fail@plt+0x14d2c>
   2701c:	ldrb	r2, [r1, #6]
   27020:	tst	r2, #16
   27024:	bne	272c8 <__assert_fail@plt+0x15724>
   27028:	cmp	r3, #4
   2702c:	beq	27240 <__assert_fail@plt+0x1569c>
   27030:	ldr	r4, [sp, #120]	; 0x78
   27034:	mov	r2, r4
   27038:	add	r0, sp, #148	; 0x94
   2703c:	bl	23194 <__assert_fail@plt+0x115f0>
   27040:	cmp	r0, #0
   27044:	beq	26bb4 <__assert_fail@plt+0x15010>
   27048:	ldr	r3, [r5, #12]
   2704c:	add	r4, r4, #1
   27050:	ldr	fp, [r3, r7, lsl #2]
   27054:	cmp	sl, #0
   27058:	str	r4, [sp, #120]	; 0x78
   2705c:	beq	27094 <__assert_fail@plt+0x154f0>
   27060:	ldr	r3, [sp, #240]	; 0xf0
   27064:	cmp	r4, r3
   27068:	bgt	26bb4 <__assert_fail@plt+0x15010>
   2706c:	ldr	r3, [sp, #248]	; 0xf8
   27070:	ldr	r3, [r3, r4, lsl #2]
   27074:	cmp	r3, #0
   27078:	beq	26bb4 <__assert_fail@plt+0x15010>
   2707c:	mov	r2, fp
   27080:	add	r1, r3, #12
   27084:	ldr	r0, [r3, #8]
   27088:	bl	200b8 <__assert_fail@plt+0xe514>
   2708c:	cmp	r0, #0
   27090:	beq	26bb4 <__assert_fail@plt+0x15010>
   27094:	mov	r3, #0
   27098:	str	r3, [sp, #128]	; 0x80
   2709c:	b	2700c <__assert_fail@plt+0x15468>
   270a0:	cmp	r2, r5
   270a4:	moveq	r2, r9
   270a8:	ldrne	r2, [r8, r2, lsl #2]
   270ac:	str	r2, [r1, #-4]
   270b0:	ldr	r0, [r3, #4]
   270b4:	cmp	r5, r0
   270b8:	moveq	r0, r9
   270bc:	ldrne	r0, [r8, r0, lsl #2]
   270c0:	str	r0, [r3, #4]
   270c4:	b	269e8 <__assert_fail@plt+0x14e44>
   270c8:	ldr	r3, [sp, #244]	; 0xf4
   270cc:	cmp	fp, r3
   270d0:	bne	26910 <__assert_fail@plt+0x14d6c>
   270d4:	cmp	sl, #0
   270d8:	beq	26964 <__assert_fail@plt+0x14dc0>
   270dc:	b	26930 <__assert_fail@plt+0x14d8c>
   270e0:	ldr	r3, [sp, #44]	; 0x2c
   270e4:	add	r9, sp, #124	; 0x7c
   270e8:	mov	r1, #16
   270ec:	ldr	r3, [r3]
   270f0:	add	r8, sp, #296	; 0x128
   270f4:	mov	r0, r3
   270f8:	str	r3, [sp, #24]
   270fc:	mov	r3, #0
   27100:	mov	sl, r3
   27104:	mov	r2, #2
   27108:	str	r3, [sp, #284]	; 0x11c
   2710c:	str	r1, [sp, #288]	; 0x120
   27110:	str	r8, [sp, #292]	; 0x124
   27114:	str	r3, [sp, #136]	; 0x88
   27118:	ldr	fp, [r0, #72]	; 0x48
   2711c:	str	r3, [sp, #144]	; 0x90
   27120:	str	r3, [sp, #124]	; 0x7c
   27124:	str	r2, [sp, #140]	; 0x8c
   27128:	str	r3, [r9, #4]
   2712c:	str	r3, [r9, #8]
   27130:	mov	r3, #8
   27134:	mov	r2, r8
   27138:	ldr	r1, [sp, #76]	; 0x4c
   2713c:	add	r0, sp, #284	; 0x11c
   27140:	bl	2e290 <__assert_fail@plt+0x1c6ec>
   27144:	cmp	r0, #0
   27148:	bne	26884 <__assert_fail@plt+0x14ce0>
   2714c:	ldr	r0, [sp, #292]	; 0x124
   27150:	cmp	r0, r8
   27154:	beq	2715c <__assert_fail@plt+0x155b8>
   27158:	bl	17274 <__assert_fail@plt+0x56d0>
   2715c:	mov	r3, #16
   27160:	mov	r2, #0
   27164:	str	r3, [sp, #288]	; 0x120
   27168:	mov	r0, sl
   2716c:	mov	r3, #12
   27170:	str	r8, [sp, #292]	; 0x124
   27174:	str	r2, [sp, #284]	; 0x11c
   27178:	str	r3, [sp, #48]	; 0x30
   2717c:	bl	1fac4 <__assert_fail@plt+0xdf20>
   27180:	b	26c1c <__assert_fail@plt+0x15078>
   27184:	ldr	r2, [r1]
   27188:	add	r2, r2, #1
   2718c:	cmp	r8, r2
   27190:	ble	26908 <__assert_fail@plt+0x14d64>
   27194:	ldr	r3, [sp, #476]	; 0x1dc
   27198:	ldr	r0, [r3, r2, lsl #3]
   2719c:	add	r3, r3, r2, lsl #3
   271a0:	cmp	r4, r0
   271a4:	bgt	27204 <__assert_fail@plt+0x15660>
   271a8:	ldrb	r1, [r1, #6]
   271ac:	tst	r1, #8
   271b0:	beq	271c4 <__assert_fail@plt+0x15620>
   271b4:	ldr	r1, [sp, #16]
   271b8:	ldr	r2, [r1, r2, lsl #3]
   271bc:	cmn	r2, #1
   271c0:	bne	27228 <__assert_fail@plt+0x15684>
   271c4:	str	r4, [r3, #4]
   271c8:	ldr	r3, [sp, #476]	; 0x1dc
   271cc:	ldr	r3, [r3, #4]
   271d0:	b	26908 <__assert_fail@plt+0x14d64>
   271d4:	ldr	r2, [r0, fp, lsl #3]
   271d8:	add	r2, r2, #1
   271dc:	cmp	r8, r2
   271e0:	ble	26908 <__assert_fail@plt+0x14d64>
   271e4:	ldr	r1, [sp, #476]	; 0x1dc
   271e8:	ldr	r3, [sp, #476]	; 0x1dc
   271ec:	add	r3, r3, r2, lsl #3
   271f0:	str	r4, [r1, r2, lsl #3]
   271f4:	mvn	r2, #0
   271f8:	str	r2, [r3, #4]
   271fc:	ldr	r3, [r1, #4]
   27200:	b	26908 <__assert_fail@plt+0x14d64>
   27204:	str	r4, [r3, #4]
   27208:	ldr	r2, [sp, #20]
   2720c:	ldr	r1, [sp, #476]	; 0x1dc
   27210:	ldr	r0, [sp, #16]
   27214:	bl	11784 <memcpy@plt>
   27218:	ldr	r3, [sp, #476]	; 0x1dc
   2721c:	ldr	r4, [sp, #120]	; 0x78
   27220:	ldr	r3, [r3, #4]
   27224:	b	26908 <__assert_fail@plt+0x14d64>
   27228:	ldr	r2, [sp, #20]
   2722c:	ldr	r0, [sp, #476]	; 0x1dc
   27230:	bl	11784 <memcpy@plt>
   27234:	ldr	r3, [sp, #476]	; 0x1dc
   27238:	ldr	r3, [r3, #4]
   2723c:	b	26908 <__assert_fail@plt+0x14d64>
   27240:	ldr	r3, [r1]
   27244:	add	r3, r3, #1
   27248:	cmp	r8, r3
   2724c:	ble	26bac <__assert_fail@plt+0x15008>
   27250:	ldr	r2, [sp, #476]	; 0x1dc
   27254:	ldr	r1, [sp, #476]	; 0x1dc
   27258:	add	r2, r2, r3, lsl #3
   2725c:	cmp	sl, #0
   27260:	ldr	r0, [r1, r3, lsl #3]
   27264:	ldr	r3, [r2, #4]
   27268:	sub	r4, r3, r0
   2726c:	beq	272f8 <__assert_fail@plt+0x15754>
   27270:	cmn	r0, #1
   27274:	beq	26bb4 <__assert_fail@plt+0x15010>
   27278:	cmn	r3, #1
   2727c:	beq	26bb4 <__assert_fail@plt+0x15010>
   27280:	cmp	r4, #0
   27284:	beq	27300 <__assert_fail@plt+0x1575c>
   27288:	ldr	r6, [sp, #120]	; 0x78
   2728c:	ldr	r3, [sp, #176]	; 0xb0
   27290:	ldr	r1, [sp, #152]	; 0x98
   27294:	sub	r3, r3, r6
   27298:	cmp	r4, r3
   2729c:	bgt	26bb4 <__assert_fail@plt+0x15010>
   272a0:	add	r0, r1, r0
   272a4:	mov	r2, r4
   272a8:	add	r1, r1, r6
   272ac:	bl	117c0 <memcmp@plt>
   272b0:	cmp	r0, #0
   272b4:	bne	26bb4 <__assert_fail@plt+0x15010>
   272b8:	ldr	r3, [r5, #12]
   272bc:	add	r4, r6, r4
   272c0:	ldr	fp, [r3, fp, lsl #2]
   272c4:	b	27054 <__assert_fail@plt+0x154b0>
   272c8:	ldr	r3, [sp, #120]	; 0x78
   272cc:	mov	r2, fp
   272d0:	str	r3, [sp]
   272d4:	add	r1, r5, #128	; 0x80
   272d8:	add	r3, sp, #148	; 0x94
   272dc:	bl	24474 <__assert_fail@plt+0x128d0>
   272e0:	subs	r4, r0, #0
   272e4:	bne	27358 <__assert_fail@plt+0x157b4>
   272e8:	ldr	r1, [r5]
   272ec:	ldr	r4, [sp, #120]	; 0x78
   272f0:	add	r1, r1, r6
   272f4:	b	27034 <__assert_fail@plt+0x15490>
   272f8:	cmp	r4, #0
   272fc:	bne	27358 <__assert_fail@plt+0x157b4>
   27300:	mov	r1, fp
   27304:	mov	r0, r9
   27308:	bl	1fb28 <__assert_fail@plt+0xdf84>
   2730c:	cmp	r0, #0
   27310:	beq	27374 <__assert_fail@plt+0x157d0>
   27314:	add	fp, fp, fp, lsl #1
   27318:	ldr	r3, [r5, #20]
   2731c:	ldr	r1, [sp, #248]	; 0xf8
   27320:	add	r3, r3, fp, lsl #2
   27324:	ldr	r4, [sp, #120]	; 0x78
   27328:	ldr	r2, [r3, #8]
   2732c:	ldr	r3, [r1, r4, lsl #2]
   27330:	ldr	fp, [r2]
   27334:	add	r1, r3, #12
   27338:	mov	r2, fp
   2733c:	ldr	r0, [r3, #8]
   27340:	bl	200b8 <__assert_fail@plt+0xe514>
   27344:	cmp	r0, #0
   27348:	bne	2700c <__assert_fail@plt+0x15468>
   2734c:	ldr	r1, [r5]
   27350:	add	r1, r1, r6
   27354:	b	27034 <__assert_fail@plt+0x15490>
   27358:	ldr	r6, [sp, #120]	; 0x78
   2735c:	b	272b8 <__assert_fail@plt+0x15714>
   27360:	mov	r1, fp
   27364:	mov	r0, r9
   27368:	bl	1fb28 <__assert_fail@plt+0xdf84>
   2736c:	cmp	r0, #0
   27370:	bne	26fa4 <__assert_fail@plt+0x15400>
   27374:	ldr	r0, [sp, #132]	; 0x84
   27378:	ldr	r8, [sp, #12]
   2737c:	bl	17274 <__assert_fail@plt+0x56d0>
   27380:	b	2714c <__assert_fail@plt+0x155a8>
   27384:	add	sl, sp, #136	; 0x88
   27388:	b	27130 <__assert_fail@plt+0x1558c>
   2738c:	mov	r3, #12
   27390:	str	r3, [sp, #48]	; 0x30
   27394:	b	26c1c <__assert_fail@plt+0x15078>
   27398:	mov	r2, fp
   2739c:	add	r1, sp, #132	; 0x84
   273a0:	ldr	r0, [sp, #128]	; 0x80
   273a4:	bl	200b8 <__assert_fail@plt+0xe514>
   273a8:	cmp	r0, #0
   273ac:	bne	27490 <__assert_fail@plt+0x158ec>
   273b0:	cmp	sl, #0
   273b4:	beq	2700c <__assert_fail@plt+0x15468>
   273b8:	ldr	r4, [sl]
   273bc:	ldr	r3, [sl, #4]
   273c0:	add	r1, r4, #1
   273c4:	cmp	r1, r3
   273c8:	str	r1, [sl]
   273cc:	ldr	r5, [sp, #120]	; 0x78
   273d0:	beq	27464 <__assert_fail@plt+0x158c0>
   273d4:	ldr	r3, [sl, #8]
   273d8:	add	r2, r4, r4, lsl #1
   273dc:	ldr	r0, [sp, #44]	; 0x2c
   273e0:	lsl	r4, r2, #3
   273e4:	str	r5, [r3, r2, lsl #3]
   273e8:	add	r5, r3, r4
   273ec:	str	r6, [r5, #4]
   273f0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   273f4:	ldr	r3, [sl, #8]
   273f8:	add	r3, r3, r4
   273fc:	str	r0, [r5, #8]
   27400:	ldr	r0, [r3, #8]
   27404:	cmp	r0, #0
   27408:	beq	27374 <__assert_fail@plt+0x157d0>
   2740c:	ldr	r5, [sp, #20]
   27410:	ldr	r1, [sp, #476]	; 0x1dc
   27414:	mov	r2, r5
   27418:	bl	11784 <memcpy@plt>
   2741c:	ldr	r3, [sl, #8]
   27420:	mov	r2, r5
   27424:	add	r3, r3, r4
   27428:	ldr	r1, [sp, #16]
   2742c:	ldr	r0, [r3, #8]
   27430:	add	r0, r0, r5
   27434:	bl	11784 <memcpy@plt>
   27438:	ldr	r0, [sl, #8]
   2743c:	mov	r1, r9
   27440:	add	r0, r0, r4
   27444:	add	r0, r0, #12
   27448:	bl	20bc4 <__assert_fail@plt+0xf020>
   2744c:	cmp	r0, #0
   27450:	beq	2700c <__assert_fail@plt+0x15468>
   27454:	b	27374 <__assert_fail@plt+0x157d0>
   27458:	cmn	fp, #2
   2745c:	bne	26bb4 <__assert_fail@plt+0x15010>
   27460:	b	27374 <__assert_fail@plt+0x157d0>
   27464:	add	r1, r1, r1, lsl #1
   27468:	ldr	r0, [sl, #8]
   2746c:	lsl	r1, r1, #4
   27470:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   27474:	subs	r3, r0, #0
   27478:	beq	27374 <__assert_fail@plt+0x157d0>
   2747c:	ldr	r2, [sl, #4]
   27480:	str	r3, [sl, #8]
   27484:	lsl	r2, r2, #1
   27488:	str	r2, [sl, #4]
   2748c:	b	273d8 <__assert_fail@plt+0x15834>
   27490:	mov	fp, r6
   27494:	b	2700c <__assert_fail@plt+0x15468>
   27498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2749c:	mov	fp, r2
   274a0:	ldr	r2, [r0, #100]	; 0x64
   274a4:	sub	sp, sp, #100	; 0x64
   274a8:	mov	ip, #0
   274ac:	ldr	r2, [r2, fp, lsl #2]
   274b0:	mov	r4, r3
   274b4:	cmp	r2, ip
   274b8:	lsl	r3, fp, #2
   274bc:	str	r3, [sp, #40]	; 0x28
   274c0:	str	r0, [sp, #32]
   274c4:	mov	r9, r1
   274c8:	ldr	r5, [r0, #84]	; 0x54
   274cc:	str	ip, [sp, #64]	; 0x40
   274d0:	ldr	r3, [r4, #4]
   274d4:	beq	27948 <__assert_fail@plt+0x15da4>
   274d8:	add	r2, r2, #4
   274dc:	cmp	r3, ip
   274e0:	str	r2, [sp, #24]
   274e4:	bne	27524 <__assert_fail@plt+0x15980>
   274e8:	ldr	r3, [r9]
   274ec:	mov	r2, #0
   274f0:	str	r2, [r3, fp, lsl #2]
   274f4:	ldr	r3, [sp, #24]
   274f8:	cmp	r3, #0
   274fc:	beq	27684 <__assert_fail@plt+0x15ae0>
   27500:	ldr	r3, [sp, #32]
   27504:	ldr	r3, [r3, #100]	; 0x64
   27508:	ldr	r3, [r3, fp, lsl #2]
   2750c:	ldrb	r3, [r3, #52]	; 0x34
   27510:	ands	r3, r3, #64	; 0x40
   27514:	bne	275d8 <__assert_fail@plt+0x15a34>
   27518:	mov	r0, r3
   2751c:	add	sp, sp, #100	; 0x64
   27520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27524:	add	r0, sp, #96	; 0x60
   27528:	mov	r2, r4
   2752c:	str	ip, [r0, #-28]!	; 0xffffffe4
   27530:	mov	r1, r5
   27534:	bl	210b4 <__assert_fail@plt+0xf510>
   27538:	ldr	r3, [sp, #68]	; 0x44
   2753c:	cmp	r3, #0
   27540:	mov	r6, r0
   27544:	bne	27518 <__assert_fail@plt+0x15974>
   27548:	ldr	r7, [r0, #28]
   2754c:	cmp	r7, #0
   27550:	addne	r6, r0, #28
   27554:	bne	27694 <__assert_fail@plt+0x15af0>
   27558:	ldr	r0, [r4, #4]
   2755c:	str	r7, [r6, #32]
   27560:	str	r0, [r6, #28]
   27564:	lsl	r0, r0, #2
   27568:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2756c:	add	r6, r6, #28
   27570:	cmp	r0, #0
   27574:	str	r0, [r6, #8]
   27578:	beq	275c8 <__assert_fail@plt+0x15a24>
   2757c:	ldr	r3, [r4, #4]
   27580:	str	r7, [sp, #68]	; 0x44
   27584:	cmp	r3, #0
   27588:	bgt	2759c <__assert_fail@plt+0x159f8>
   2758c:	b	27694 <__assert_fail@plt+0x15af0>
   27590:	ldr	r3, [r4, #4]
   27594:	cmp	r7, r3
   27598:	bge	27694 <__assert_fail@plt+0x15af0>
   2759c:	ldr	r3, [r4, #8]
   275a0:	ldr	r1, [r5, #28]
   275a4:	mov	r0, r6
   275a8:	ldr	r3, [r3, r7, lsl #2]
   275ac:	add	r7, r7, #1
   275b0:	add	r3, r3, r3, lsl #1
   275b4:	add	r1, r1, r3, lsl #2
   275b8:	bl	21634 <__assert_fail@plt+0xfa90>
   275bc:	cmp	r0, #0
   275c0:	str	r0, [sp, #68]	; 0x44
   275c4:	beq	27590 <__assert_fail@plt+0x159ec>
   275c8:	mov	r3, #12
   275cc:	mov	r0, r3
   275d0:	add	sp, sp, #100	; 0x64
   275d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275d8:	ldr	r3, [sp, #32]
   275dc:	ldr	ip, [r3, #108]	; 0x6c
   275e0:	mov	r3, #0
   275e4:	mov	r0, r3
   275e8:	mov	r3, ip
   275ec:	cmp	r0, r3
   275f0:	bge	27650 <__assert_fail@plt+0x15aac>
   275f4:	add	r2, r0, r3
   275f8:	ldr	r1, [sp, #32]
   275fc:	add	r2, r2, r2, lsr #31
   27600:	asr	r2, r2, #1
   27604:	ldr	lr, [r1, #116]	; 0x74
   27608:	add	r1, r2, r2, lsl #1
   2760c:	add	r1, lr, r1, lsl #3
   27610:	ldr	r1, [r1, #4]
   27614:	cmp	fp, r1
   27618:	ble	27640 <__assert_fail@plt+0x15a9c>
   2761c:	b	276e8 <__assert_fail@plt+0x15b44>
   27620:	asr	r3, r3, #1
   27624:	mov	r4, r3
   27628:	add	r1, r3, r3, lsl #1
   2762c:	add	r1, lr, r1, lsl #3
   27630:	ldr	r1, [r1, #4]
   27634:	cmp	fp, r1
   27638:	bgt	276f0 <__assert_fail@plt+0x15b4c>
   2763c:	mov	r2, r3
   27640:	add	r3, r0, r2
   27644:	cmp	r0, r2
   27648:	add	r3, r3, r3, lsr #31
   2764c:	blt	27620 <__assert_fail@plt+0x15a7c>
   27650:	str	r0, [sp, #44]	; 0x2c
   27654:	ldr	r3, [sp, #44]	; 0x2c
   27658:	cmp	ip, r3
   2765c:	ble	27684 <__assert_fail@plt+0x15ae0>
   27660:	add	r2, r3, r3, lsl #1
   27664:	ldr	r3, [sp, #32]
   27668:	lsl	r2, r2, #3
   2766c:	str	r2, [sp, #56]	; 0x38
   27670:	ldr	r3, [r3, #116]	; 0x74
   27674:	add	r3, r3, r2
   27678:	ldr	r3, [r3, #4]
   2767c:	cmp	fp, r3
   27680:	beq	276fc <__assert_fail@plt+0x15b58>
   27684:	mov	r3, #0
   27688:	mov	r0, r3
   2768c:	add	sp, sp, #100	; 0x64
   27690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27694:	mov	r2, r6
   27698:	ldr	r1, [sp, #24]
   2769c:	mov	r0, r4
   276a0:	bl	20598 <__assert_fail@plt+0xe9f4>
   276a4:	cmp	r0, #0
   276a8:	mov	r3, r0
   276ac:	str	r0, [sp, #64]	; 0x40
   276b0:	bne	27518 <__assert_fail@plt+0x15974>
   276b4:	ldr	r2, [r9, #20]
   276b8:	cmp	r2, #0
   276bc:	bne	2795c <__assert_fail@plt+0x15db8>
   276c0:	mov	r2, r4
   276c4:	mov	r1, r5
   276c8:	add	r0, sp, #64	; 0x40
   276cc:	ldr	r4, [r9]
   276d0:	bl	210b4 <__assert_fail@plt+0xf510>
   276d4:	ldr	r3, [sp, #64]	; 0x40
   276d8:	cmp	r3, #0
   276dc:	str	r0, [r4, fp, lsl #2]
   276e0:	beq	274f4 <__assert_fail@plt+0x15950>
   276e4:	b	27518 <__assert_fail@plt+0x15974>
   276e8:	mov	r4, r2
   276ec:	mov	r2, r3
   276f0:	add	r0, r4, #1
   276f4:	mov	r3, r2
   276f8:	b	275ec <__assert_fail@plt+0x15a48>
   276fc:	ldr	r3, [sp, #44]	; 0x2c
   27700:	cmn	r3, #1
   27704:	beq	27684 <__assert_fail@plt+0x15ae0>
   27708:	ldr	r3, [sp, #24]
   2770c:	ldr	r2, [sp, #32]
   27710:	ldr	r0, [r3, #4]
   27714:	mov	r3, #0
   27718:	cmp	r0, r3
   2771c:	str	r3, [sp, #68]	; 0x44
   27720:	ldr	sl, [r2, #84]	; 0x54
   27724:	ble	27684 <__assert_fail@plt+0x15ae0>
   27728:	str	r3, [sp, #16]
   2772c:	add	r3, r9, #24
   27730:	str	r3, [sp, #48]	; 0x30
   27734:	add	r3, r9, #20
   27738:	str	r3, [sp, #52]	; 0x34
   2773c:	add	r3, fp, #1
   27740:	str	r3, [sp, #60]	; 0x3c
   27744:	b	27764 <__assert_fail@plt+0x15bc0>
   27748:	cmp	r3, #4
   2774c:	beq	277a0 <__assert_fail@plt+0x15bfc>
   27750:	ldr	r3, [sp, #16]
   27754:	add	r3, r3, #1
   27758:	cmp	r3, r0
   2775c:	str	r3, [sp, #16]
   27760:	bge	27c18 <__assert_fail@plt+0x16074>
   27764:	ldr	r3, [sp, #24]
   27768:	ldr	ip, [sp, #16]
   2776c:	ldr	r2, [r9, #8]
   27770:	ldr	r1, [r3, #8]
   27774:	ldr	r3, [sl]
   27778:	ldr	r8, [r1, ip, lsl #2]
   2777c:	cmp	r8, r2
   27780:	add	r3, r3, r8, lsl #3
   27784:	ldrb	r3, [r3, #4]
   27788:	bne	27748 <__assert_fail@plt+0x15ba4>
   2778c:	ldr	r2, [r9, #12]
   27790:	cmp	fp, r2
   27794:	beq	27750 <__assert_fail@plt+0x15bac>
   27798:	cmp	r3, #4
   2779c:	bne	27750 <__assert_fail@plt+0x15bac>
   277a0:	ldr	r3, [sp, #32]
   277a4:	ldr	r2, [sp, #56]	; 0x38
   277a8:	ldr	r6, [sp, #44]	; 0x2c
   277ac:	ldr	r4, [r3, #116]	; 0x74
   277b0:	add	r3, r8, r8, lsl #1
   277b4:	add	r4, r4, r2
   277b8:	lsl	r3, r3, #2
   277bc:	str	r3, [sp, #36]	; 0x24
   277c0:	lsl	r3, r8, #2
   277c4:	str	r3, [sp, #28]
   277c8:	mov	r7, r2
   277cc:	b	277e8 <__assert_fail@plt+0x15c44>
   277d0:	ldrb	r3, [r4, #20]
   277d4:	add	r6, r6, #1
   277d8:	add	r7, r7, #24
   277dc:	cmp	r3, #0
   277e0:	add	r4, r4, #24
   277e4:	beq	2793c <__assert_fail@plt+0x15d98>
   277e8:	ldr	r3, [r4]
   277ec:	cmp	r8, r3
   277f0:	bne	277d0 <__assert_fail@plt+0x15c2c>
   277f4:	ldr	r3, [r4, #8]
   277f8:	ldr	r5, [r4, #12]
   277fc:	sub	r5, r5, r3
   27800:	cmp	r5, #0
   27804:	add	r5, fp, r5
   27808:	ldreq	r3, [sl, #20]
   2780c:	ldreq	r2, [sp, #36]	; 0x24
   27810:	ldrne	r2, [sp, #28]
   27814:	addeq	r3, r3, r2
   27818:	ldrne	r3, [sl, #12]
   2781c:	ldreq	r3, [r3, #8]
   27820:	ldrne	r3, [r3, r2]
   27824:	ldr	r2, [r9, #12]
   27828:	ldreq	r3, [r3]
   2782c:	cmp	r5, r2
   27830:	bgt	277d0 <__assert_fail@plt+0x15c2c>
   27834:	ldr	r2, [r9]
   27838:	ldr	r0, [r2, r5, lsl #2]
   2783c:	cmp	r0, #0
   27840:	beq	277d0 <__assert_fail@plt+0x15c2c>
   27844:	mov	r2, r3
   27848:	add	r1, r0, #12
   2784c:	ldr	r0, [r0, #8]
   27850:	str	r3, [sp, #20]
   27854:	bl	200b8 <__assert_fail@plt+0xe514>
   27858:	ldr	r3, [sp, #20]
   2785c:	cmp	r0, #0
   27860:	beq	277d0 <__assert_fail@plt+0x15c2c>
   27864:	stmib	sp, {r3, r5}
   27868:	str	fp, [sp]
   2786c:	mov	r3, r8
   27870:	ldr	r2, [sp, #48]	; 0x30
   27874:	ldr	r1, [sp, #52]	; 0x34
   27878:	ldr	r0, [sp, #32]
   2787c:	bl	20384 <__assert_fail@plt+0xe7e0>
   27880:	cmp	r0, #0
   27884:	bne	277d0 <__assert_fail@plt+0x15c2c>
   27888:	ldr	r3, [sp, #68]	; 0x44
   2788c:	cmp	r3, #0
   27890:	beq	27ba0 <__assert_fail@plt+0x15ffc>
   27894:	mov	r1, r6
   27898:	add	r0, sp, #84	; 0x54
   2789c:	str	r8, [sp, #76]	; 0x4c
   278a0:	str	fp, [sp, #80]	; 0x50
   278a4:	bl	1fb28 <__assert_fail@plt+0xdf84>
   278a8:	cmp	r0, #0
   278ac:	beq	27c2c <__assert_fail@plt+0x16088>
   278b0:	ldr	r3, [sp, #68]	; 0x44
   278b4:	ldr	r2, [sp, #40]	; 0x28
   278b8:	add	r1, sp, #68	; 0x44
   278bc:	ldr	r0, [sp, #32]
   278c0:	ldr	r4, [r3, r2]
   278c4:	bl	257b0 <__assert_fail@plt+0x13c0c>
   278c8:	cmp	r0, #0
   278cc:	bne	27bcc <__assert_fail@plt+0x16028>
   278d0:	ldr	r1, [r9, #4]
   278d4:	cmp	r1, #0
   278d8:	beq	278f4 <__assert_fail@plt+0x15d50>
   278dc:	ldr	r3, [sp, #60]	; 0x3c
   278e0:	ldr	r2, [sp, #68]	; 0x44
   278e4:	mov	r0, sl
   278e8:	bl	212bc <__assert_fail@plt+0xf718>
   278ec:	cmp	r0, #0
   278f0:	bne	27bcc <__assert_fail@plt+0x16028>
   278f4:	ldr	r3, [sp, #68]	; 0x44
   278f8:	ldr	r1, [sp, #40]	; 0x28
   278fc:	ldr	r5, [sp, #88]	; 0x58
   27900:	mov	r2, r6
   27904:	str	r4, [r3, r1]
   27908:	mov	r0, r5
   2790c:	add	r1, sp, #92	; 0x5c
   27910:	bl	200b8 <__assert_fail@plt+0xe514>
   27914:	sub	r2, r0, #1
   27918:	cmp	r5, r2
   2791c:	movgt	r3, #0
   27920:	movle	r3, #1
   27924:	orrs	r3, r3, r2, lsr #31
   27928:	beq	27bf8 <__assert_fail@plt+0x16054>
   2792c:	ldr	r3, [sp, #32]
   27930:	ldr	r4, [r3, #116]	; 0x74
   27934:	add	r4, r4, r7
   27938:	b	277d0 <__assert_fail@plt+0x15c2c>
   2793c:	ldr	r3, [sp, #24]
   27940:	ldr	r0, [r3, #4]
   27944:	b	27750 <__assert_fail@plt+0x15bac>
   27948:	cmp	r3, #0
   2794c:	strne	r2, [sp, #24]
   27950:	bne	276c0 <__assert_fail@plt+0x15b1c>
   27954:	str	r3, [sp, #24]
   27958:	b	274e8 <__assert_fail@plt+0x15944>
   2795c:	ldr	r2, [sp, #32]
   27960:	ldr	r2, [r2, #116]	; 0x74
   27964:	str	r2, [sp, #20]
   27968:	ble	27a4c <__assert_fail@plt+0x15ea8>
   2796c:	mov	r8, r0
   27970:	str	fp, [sp, #16]
   27974:	ldr	r3, [r9, #24]
   27978:	ldr	r2, [sp, #20]
   2797c:	ldr	r0, [sp, #16]
   27980:	ldr	r3, [r3, r8, lsl #2]
   27984:	add	r3, r3, r3, lsl #1
   27988:	add	r2, r2, r3, lsl #3
   2798c:	ldr	r1, [r2, #8]
   27990:	cmp	r0, r1
   27994:	ble	27a38 <__assert_fail@plt+0x15e94>
   27998:	ldr	r1, [r2, #4]
   2799c:	ldr	r0, [sp, #16]
   279a0:	cmp	r0, r1
   279a4:	bgt	27a38 <__assert_fail@plt+0x15e94>
   279a8:	ldr	r1, [sp, #20]
   279ac:	ldr	r2, [r2, #12]
   279b0:	ldr	r7, [r4, #4]
   279b4:	ldr	r1, [r1, r3, lsl #3]
   279b8:	ldr	r3, [r5]
   279bc:	cmp	r0, r2
   279c0:	ldr	r6, [r3, r1, lsl #3]
   279c4:	beq	27a58 <__assert_fail@plt+0x15eb4>
   279c8:	cmp	r7, #0
   279cc:	ble	27a38 <__assert_fail@plt+0x15e94>
   279d0:	mov	sl, #0
   279d4:	b	279e8 <__assert_fail@plt+0x15e44>
   279d8:	add	sl, sl, #1
   279dc:	cmp	sl, r7
   279e0:	bge	27a38 <__assert_fail@plt+0x15e94>
   279e4:	ldr	r3, [r5]
   279e8:	ldr	r2, [r4, #8]
   279ec:	ldr	r1, [r2, sl, lsl #2]
   279f0:	add	r2, r3, r1, lsl #3
   279f4:	ldrb	r2, [r2, #4]
   279f8:	sub	r2, r2, #8
   279fc:	cmp	r2, #1
   27a00:	bhi	279d8 <__assert_fail@plt+0x15e34>
   27a04:	ldr	r3, [r3, r1, lsl #3]
   27a08:	cmp	r6, r3
   27a0c:	bne	279d8 <__assert_fail@plt+0x15e34>
   27a10:	ldr	r3, [sp, #24]
   27a14:	mov	r2, r4
   27a18:	mov	r0, r5
   27a1c:	bl	21410 <__assert_fail@plt+0xf86c>
   27a20:	cmp	r0, #0
   27a24:	bne	27c40 <__assert_fail@plt+0x1609c>
   27a28:	ldr	r7, [r4, #4]
   27a2c:	add	sl, sl, #1
   27a30:	cmp	sl, r7
   27a34:	blt	279e4 <__assert_fail@plt+0x15e40>
   27a38:	ldr	r3, [r9, #20]
   27a3c:	add	r8, r8, #1
   27a40:	cmp	r8, r3
   27a44:	blt	27974 <__assert_fail@plt+0x15dd0>
   27a48:	ldr	fp, [sp, #16]
   27a4c:	mov	r3, #0
   27a50:	str	r3, [sp, #64]	; 0x40
   27a54:	b	276c0 <__assert_fail@plt+0x15b1c>
   27a58:	cmp	r7, #0
   27a5c:	ble	27a38 <__assert_fail@plt+0x15e94>
   27a60:	ldr	ip, [r4, #8]
   27a64:	mvn	r2, #0
   27a68:	mov	fp, r2
   27a6c:	add	sl, ip, r7, lsl #2
   27a70:	mov	r2, ip
   27a74:	str	ip, [sp, #28]
   27a78:	mov	ip, fp
   27a7c:	b	27a9c <__assert_fail@plt+0x15ef8>
   27a80:	cmp	r0, #9
   27a84:	bne	27a94 <__assert_fail@plt+0x15ef0>
   27a88:	ldr	r0, [lr]
   27a8c:	cmp	r6, r0
   27a90:	moveq	fp, r1
   27a94:	cmp	sl, r2
   27a98:	beq	27ac4 <__assert_fail@plt+0x15f20>
   27a9c:	ldr	r1, [r2], #4
   27aa0:	add	lr, r3, r1, lsl #3
   27aa4:	ldrb	r0, [lr, #4]
   27aa8:	cmp	r0, #8
   27aac:	bne	27a80 <__assert_fail@plt+0x15edc>
   27ab0:	ldr	r0, [r3, r1, lsl #3]
   27ab4:	cmp	r6, r0
   27ab8:	moveq	ip, r1
   27abc:	cmp	sl, r2
   27ac0:	bne	27a9c <__assert_fail@plt+0x15ef8>
   27ac4:	mov	r3, ip
   27ac8:	cmp	r3, #0
   27acc:	mov	r6, fp
   27ad0:	ldr	ip, [sp, #28]
   27ad4:	blt	27c34 <__assert_fail@plt+0x16090>
   27ad8:	mov	r1, r3
   27adc:	mov	r2, r4
   27ae0:	ldr	r3, [sp, #24]
   27ae4:	mov	r0, r5
   27ae8:	bl	21410 <__assert_fail@plt+0xf86c>
   27aec:	cmp	r0, #0
   27af0:	bne	27c40 <__assert_fail@plt+0x1609c>
   27af4:	cmp	fp, #0
   27af8:	blt	27a38 <__assert_fail@plt+0x15e94>
   27afc:	ldr	r7, [r4, #4]
   27b00:	cmp	r7, #0
   27b04:	ble	27a38 <__assert_fail@plt+0x15e94>
   27b08:	ldr	ip, [r4, #8]
   27b0c:	mov	sl, #0
   27b10:	str	r8, [sp, #28]
   27b14:	mov	fp, r6
   27b18:	b	27b2c <__assert_fail@plt+0x15f88>
   27b1c:	add	sl, sl, #1
   27b20:	cmp	sl, r7
   27b24:	bge	27c10 <__assert_fail@plt+0x1606c>
   27b28:	ldr	ip, [r4, #8]
   27b2c:	ldr	r8, [ip, sl, lsl #2]
   27b30:	ldr	r0, [r5, #28]
   27b34:	mov	r2, fp
   27b38:	add	r6, r8, r8, lsl #1
   27b3c:	lsl	r6, r6, #2
   27b40:	add	r0, r0, r6
   27b44:	add	r1, r0, #8
   27b48:	ldr	r0, [r0, #4]
   27b4c:	bl	200b8 <__assert_fail@plt+0xe514>
   27b50:	mov	r2, fp
   27b54:	cmp	r0, #0
   27b58:	bne	27b1c <__assert_fail@plt+0x15f78>
   27b5c:	ldr	r1, [r5, #24]
   27b60:	add	r6, r1, r6
   27b64:	add	r1, r6, #8
   27b68:	ldr	r0, [r6, #4]
   27b6c:	bl	200b8 <__assert_fail@plt+0xe514>
   27b70:	cmp	r0, #0
   27b74:	bne	27b1c <__assert_fail@plt+0x15f78>
   27b78:	mov	r1, r8
   27b7c:	ldr	r3, [sp, #24]
   27b80:	mov	r2, r4
   27b84:	mov	r0, r5
   27b88:	bl	21410 <__assert_fail@plt+0xf86c>
   27b8c:	sub	sl, sl, #1
   27b90:	cmp	r0, #0
   27b94:	bne	27c40 <__assert_fail@plt+0x1609c>
   27b98:	ldr	r7, [r4, #4]
   27b9c:	b	27b1c <__assert_fail@plt+0x15f78>
   27ba0:	mov	ip, r9
   27ba4:	add	lr, sp, #68	; 0x44
   27ba8:	ldm	ip!, {r0, r1, r2, r3}
   27bac:	stmia	lr!, {r0, r1, r2, r3}
   27bb0:	ldm	ip, {r0, r1, r2}
   27bb4:	stm	lr, {r0, r1, r2}
   27bb8:	mov	r1, ip
   27bbc:	add	r0, sp, #84	; 0x54
   27bc0:	bl	20bc4 <__assert_fail@plt+0xf020>
   27bc4:	cmp	r0, #0
   27bc8:	beq	27894 <__assert_fail@plt+0x15cf0>
   27bcc:	mov	r3, r0
   27bd0:	ldr	r2, [sp, #68]	; 0x44
   27bd4:	cmp	r2, #0
   27bd8:	beq	27518 <__assert_fail@plt+0x15974>
   27bdc:	ldr	r0, [sp, #92]	; 0x5c
   27be0:	str	r3, [sp, #16]
   27be4:	bl	17274 <__assert_fail@plt+0x56d0>
   27be8:	ldr	r3, [sp, #16]
   27bec:	mov	r0, r3
   27bf0:	add	sp, sp, #100	; 0x64
   27bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bf8:	add	r0, sp, #96	; 0x60
   27bfc:	sub	r5, r5, #1
   27c00:	str	r5, [r0, #-8]!
   27c04:	add	r1, sp, #92	; 0x5c
   27c08:	bl	20248 <__assert_fail@plt+0xe6a4>
   27c0c:	b	2792c <__assert_fail@plt+0x15d88>
   27c10:	ldr	r8, [sp, #28]
   27c14:	b	27a38 <__assert_fail@plt+0x15e94>
   27c18:	ldr	r3, [sp, #68]	; 0x44
   27c1c:	cmp	r3, #0
   27c20:	movne	r3, #0
   27c24:	bne	27bdc <__assert_fail@plt+0x16038>
   27c28:	b	27684 <__assert_fail@plt+0x15ae0>
   27c2c:	mov	r3, #12
   27c30:	b	27bd0 <__assert_fail@plt+0x1602c>
   27c34:	cmp	fp, #0
   27c38:	bge	27b0c <__assert_fail@plt+0x15f68>
   27c3c:	b	27a38 <__assert_fail@plt+0x15e94>
   27c40:	mov	r3, r0
   27c44:	b	27518 <__assert_fail@plt+0x15974>
   27c48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27c4c:	sub	sp, sp, #8
   27c50:	ldr	r6, [r1, #40]	; 0x28
   27c54:	ldr	r3, [r1, #56]	; 0x38
   27c58:	cmp	r3, r6
   27c5c:	ble	27ed0 <__assert_fail@plt+0x1632c>
   27c60:	ldr	sl, [r1, #4]
   27c64:	ldrb	r3, [r0, #6]
   27c68:	mov	r8, r2
   27c6c:	ldrb	r7, [sl, r6]
   27c70:	and	r3, r3, #159	; 0x9f
   27c74:	strb	r3, [r0, #6]
   27c78:	strb	r7, [r0]
   27c7c:	ldr	r3, [r1, #80]	; 0x50
   27c80:	mov	r5, r0
   27c84:	cmp	r3, #1
   27c88:	mov	r4, r1
   27c8c:	ble	27ee4 <__assert_fail@plt+0x16340>
   27c90:	ldr	r2, [r1, #28]
   27c94:	cmp	r6, r2
   27c98:	beq	27cac <__assert_fail@plt+0x16108>
   27c9c:	ldr	r2, [r1, #8]
   27ca0:	ldr	r2, [r2, r6, lsl #2]
   27ca4:	cmn	r2, #1
   27ca8:	beq	28144 <__assert_fail@plt+0x165a0>
   27cac:	cmp	r7, #92	; 0x5c
   27cb0:	beq	27f4c <__assert_fail@plt+0x163a8>
   27cb4:	ldr	r3, [r4, #8]
   27cb8:	mov	r2, #1
   27cbc:	strb	r2, [r5, #4]
   27cc0:	ldr	r9, [r3, r6, lsl #2]
   27cc4:	mov	r0, r9
   27cc8:	bl	119c4 <iswalnum@plt>
   27ccc:	ldrb	r3, [r5, #6]
   27cd0:	sub	r9, r9, #95	; 0x5f
   27cd4:	clz	r9, r9
   27cd8:	lsr	r9, r9, #5
   27cdc:	bic	r3, r3, #64	; 0x40
   27ce0:	cmp	r0, #0
   27ce4:	orrne	r9, r9, #1
   27ce8:	orr	r9, r3, r9, lsl #6
   27cec:	strb	r9, [r5, #6]
   27cf0:	sub	r7, r7, #10
   27cf4:	cmp	r7, #115	; 0x73
   27cf8:	ldrls	pc, [pc, r7, lsl #2]
   27cfc:	b	27f40 <__assert_fail@plt+0x1639c>
   27d00:	andeq	r8, r2, r8, lsl #3
   27d04:	andeq	r7, r2, r0, asr #30
   27d08:	andeq	r7, r2, r0, asr #30
   27d0c:	andeq	r7, r2, r0, asr #30
   27d10:	andeq	r7, r2, r0, asr #30
   27d14:	andeq	r7, r2, r0, asr #30
   27d18:	andeq	r7, r2, r0, asr #30
   27d1c:	andeq	r7, r2, r0, asr #30
   27d20:	andeq	r7, r2, r0, asr #30
   27d24:	andeq	r7, r2, r0, asr #30
   27d28:	andeq	r7, r2, r0, asr #30
   27d2c:	andeq	r7, r2, r0, asr #30
   27d30:	andeq	r7, r2, r0, asr #30
   27d34:	andeq	r7, r2, r0, asr #30
   27d38:	andeq	r7, r2, r0, asr #30
   27d3c:	andeq	r7, r2, r0, asr #30
   27d40:	andeq	r7, r2, r0, asr #30
   27d44:	andeq	r7, r2, r0, asr #30
   27d48:	andeq	r7, r2, r0, asr #30
   27d4c:	andeq	r7, r2, r0, asr #30
   27d50:	andeq	r7, r2, r0, asr #30
   27d54:	andeq	r7, r2, r0, asr #30
   27d58:	andeq	r7, r2, r0, asr #30
   27d5c:	andeq	r7, r2, r0, asr #30
   27d60:	andeq	r7, r2, r0, asr #30
   27d64:	andeq	r7, r2, r0, asr #30
   27d68:	andeq	r8, r2, r0, lsr #3
   27d6c:	andeq	r7, r2, r0, asr #30
   27d70:	andeq	r7, r2, r0, asr #30
   27d74:	andeq	r7, r2, r0, asr #30
   27d78:	andeq	r8, r2, r0, lsl #4
   27d7c:	andeq	r8, r2, r8, lsl r2
   27d80:	andeq	r8, r2, r0, lsr r2
   27d84:	andeq	r8, r2, r0, asr #4
   27d88:	andeq	r7, r2, r0, asr #30
   27d8c:	andeq	r7, r2, r0, asr #30
   27d90:	andeq	r8, r2, r0, ror #4
   27d94:	andeq	r7, r2, r0, asr #30
   27d98:	andeq	r7, r2, r0, asr #30
   27d9c:	andeq	r7, r2, r0, asr #30
   27da0:	andeq	r7, r2, r0, asr #30
   27da4:	andeq	r7, r2, r0, asr #30
   27da8:	andeq	r7, r2, r0, asr #30
   27dac:	andeq	r7, r2, r0, asr #30
   27db0:	andeq	r7, r2, r0, asr #30
   27db4:	andeq	r7, r2, r0, asr #30
   27db8:	andeq	r7, r2, r0, asr #30
   27dbc:	andeq	r7, r2, r0, asr #30
   27dc0:	andeq	r7, r2, r0, asr #30
   27dc4:	andeq	r7, r2, r0, asr #30
   27dc8:	andeq	r7, r2, r0, asr #30
   27dcc:	andeq	r7, r2, r0, asr #30
   27dd0:	andeq	r7, r2, r0, asr #30
   27dd4:	andeq	r8, r2, r0, ror r2
   27dd8:	andeq	r7, r2, r0, asr #30
   27ddc:	andeq	r7, r2, r0, asr #30
   27de0:	andeq	r7, r2, r0, asr #30
   27de4:	andeq	r7, r2, r0, asr #30
   27de8:	andeq	r7, r2, r0, asr #30
   27dec:	andeq	r7, r2, r0, asr #30
   27df0:	andeq	r7, r2, r0, asr #30
   27df4:	andeq	r7, r2, r0, asr #30
   27df8:	andeq	r7, r2, r0, asr #30
   27dfc:	andeq	r7, r2, r0, asr #30
   27e00:	andeq	r7, r2, r0, asr #30
   27e04:	andeq	r7, r2, r0, asr #30
   27e08:	andeq	r7, r2, r0, asr #30
   27e0c:	andeq	r7, r2, r0, asr #30
   27e10:	andeq	r7, r2, r0, asr #30
   27e14:	andeq	r7, r2, r0, asr #30
   27e18:	andeq	r7, r2, r0, asr #30
   27e1c:	andeq	r7, r2, r0, asr #30
   27e20:	andeq	r7, r2, r0, asr #30
   27e24:	andeq	r7, r2, r0, asr #30
   27e28:	andeq	r7, r2, r0, asr #30
   27e2c:	andeq	r7, r2, r0, asr #30
   27e30:	andeq	r7, r2, r0, asr #30
   27e34:	andeq	r7, r2, r0, asr #30
   27e38:	andeq	r7, r2, r0, asr #30
   27e3c:	andeq	r7, r2, r0, asr #30
   27e40:	andeq	r7, r2, r0, asr #30
   27e44:	muleq	r2, r0, r2
   27e48:	andeq	r7, r2, r0, asr #30
   27e4c:	andeq	r7, r2, r0, asr #30
   27e50:	andeq	r8, r2, r0, lsr #5
   27e54:	andeq	r7, r2, r0, asr #30
   27e58:	andeq	r7, r2, r0, asr #30
   27e5c:	andeq	r7, r2, r0, asr #30
   27e60:	andeq	r7, r2, r0, asr #30
   27e64:	andeq	r7, r2, r0, asr #30
   27e68:	andeq	r7, r2, r0, asr #30
   27e6c:	andeq	r7, r2, r0, asr #30
   27e70:	andeq	r7, r2, r0, asr #30
   27e74:	andeq	r7, r2, r0, asr #30
   27e78:	andeq	r7, r2, r0, asr #30
   27e7c:	andeq	r7, r2, r0, asr #30
   27e80:	andeq	r7, r2, r0, asr #30
   27e84:	andeq	r7, r2, r0, asr #30
   27e88:	andeq	r7, r2, r0, asr #30
   27e8c:	andeq	r7, r2, r0, asr #30
   27e90:	andeq	r7, r2, r0, asr #30
   27e94:	andeq	r7, r2, r0, asr #30
   27e98:	andeq	r7, r2, r0, asr #30
   27e9c:	andeq	r7, r2, r0, asr #30
   27ea0:	andeq	r7, r2, r0, asr #30
   27ea4:	andeq	r7, r2, r0, asr #30
   27ea8:	andeq	r7, r2, r0, asr #30
   27eac:	andeq	r7, r2, r0, asr #30
   27eb0:	andeq	r7, r2, r0, asr #30
   27eb4:	andeq	r7, r2, r0, asr #30
   27eb8:	andeq	r7, r2, r0, asr #30
   27ebc:	andeq	r7, r2, r0, asr #30
   27ec0:	andeq	r7, r2, r0, asr #30
   27ec4:	andeq	r7, r2, r8, lsr #30
   27ec8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   27ecc:	andeq	r8, r2, ip, ror #2
   27ed0:	mov	r3, #2
   27ed4:	strb	r3, [r0, #4]
   27ed8:	mov	r0, #0
   27edc:	add	sp, sp, #8
   27ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27ee4:	cmp	r7, #92	; 0x5c
   27ee8:	beq	27f4c <__assert_fail@plt+0x163a8>
   27eec:	mov	r3, #1
   27ef0:	strb	r3, [r5, #4]
   27ef4:	bl	11964 <__ctype_b_loc@plt>
   27ef8:	lsl	r1, r7, #1
   27efc:	ldrb	r2, [r5, #6]
   27f00:	bic	r2, r2, #64	; 0x40
   27f04:	ldr	r3, [r0]
   27f08:	ldrh	r3, [r3, r1]
   27f0c:	lsr	r3, r3, #3
   27f10:	and	r3, r3, #1
   27f14:	cmp	r7, #95	; 0x5f
   27f18:	orreq	r3, r3, #1
   27f1c:	orr	r3, r2, r3, lsl #6
   27f20:	strb	r3, [r5, #6]
   27f24:	b	27cf0 <__assert_fail@plt+0x1614c>
   27f28:	and	r8, r8, #4608	; 0x1200
   27f2c:	cmp	r8, #4608	; 0x1200
   27f30:	moveq	r3, #23
   27f34:	strbeq	r3, [r5, #4]
   27f38:	moveq	r0, #1
   27f3c:	beq	27edc <__assert_fail@plt+0x16338>
   27f40:	mov	r0, #1
   27f44:	add	sp, sp, #8
   27f48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27f4c:	ldr	r1, [r4, #48]	; 0x30
   27f50:	add	r2, r6, #1
   27f54:	cmp	r2, r1
   27f58:	bge	2815c <__assert_fail@plt+0x165b8>
   27f5c:	ldrb	r1, [r4, #75]	; 0x4b
   27f60:	cmp	r1, #0
   27f64:	bne	28518 <__assert_fail@plt+0x16974>
   27f68:	ldrb	r6, [sl, r2]
   27f6c:	cmp	r3, #1
   27f70:	mov	r3, #1
   27f74:	strb	r6, [r5]
   27f78:	strb	r3, [r5, #4]
   27f7c:	ble	284e4 <__assert_fail@plt+0x16940>
   27f80:	ldr	r1, [r4, #8]
   27f84:	add	r1, r1, r2, lsl #2
   27f88:	ldr	r4, [r1]
   27f8c:	mov	r0, r4
   27f90:	bl	119c4 <iswalnum@plt>
   27f94:	ldrb	r3, [r5, #6]
   27f98:	sub	r4, r4, #95	; 0x5f
   27f9c:	clz	r4, r4
   27fa0:	lsr	r4, r4, #5
   27fa4:	bic	r3, r3, #64	; 0x40
   27fa8:	cmp	r0, #0
   27fac:	orrne	r4, r4, #1
   27fb0:	orr	r4, r3, r4, lsl #6
   27fb4:	strb	r4, [r5, #6]
   27fb8:	sub	r3, r6, #39	; 0x27
   27fbc:	cmp	r3, #86	; 0x56
   27fc0:	ldrls	pc, [pc, r3, lsl #2]
   27fc4:	b	2813c <__assert_fail@plt+0x16598>
   27fc8:	andeq	r8, r2, r0, lsr #6
   27fcc:	andeq	r8, r2, r8, lsl #6
   27fd0:	andeq	r8, r2, ip, asr #9
   27fd4:	andeq	r8, r2, ip, lsr r1
   27fd8:			; <UNDEFINED> instruction: 0x000284b0
   27fdc:	andeq	r8, r2, ip, lsr r1
   27fe0:	andeq	r8, r2, ip, lsr r1
   27fe4:	andeq	r8, r2, ip, lsr r1
   27fe8:	andeq	r8, r2, ip, lsr r1
   27fec:	andeq	r8, r2, ip, lsr r1
   27ff0:	muleq	r2, r0, r4
   27ff4:	muleq	r2, r0, r4
   27ff8:	muleq	r2, r0, r4
   27ffc:	muleq	r2, r0, r4
   28000:	muleq	r2, r0, r4
   28004:	muleq	r2, r0, r4
   28008:	muleq	r2, r0, r4
   2800c:	muleq	r2, r0, r4
   28010:	muleq	r2, r0, r4
   28014:	andeq	r8, r2, ip, lsr r1
   28018:	andeq	r8, r2, ip, lsr r1
   2801c:	andeq	r8, r2, r0, ror r4
   28020:	andeq	r8, r2, ip, lsr r1
   28024:	andeq	r8, r2, r0, asr r4
   28028:	andeq	r8, r2, r4, lsr r4
   2802c:	andeq	r8, r2, ip, lsr r1
   28030:	andeq	r8, r2, ip, lsr r1
   28034:	andeq	r8, r2, r4, lsl r4
   28038:	andeq	r8, r2, ip, lsr r1
   2803c:	andeq	r8, r2, ip, lsr r1
   28040:	andeq	r8, r2, ip, lsr r1
   28044:	andeq	r8, r2, ip, lsr r1
   28048:	andeq	r8, r2, ip, lsr r1
   2804c:	andeq	r8, r2, ip, lsr r1
   28050:	andeq	r8, r2, ip, lsr r1
   28054:	andeq	r8, r2, ip, lsr r1
   28058:	andeq	r8, r2, ip, lsr r1
   2805c:	andeq	r8, r2, ip, lsr r1
   28060:	andeq	r8, r2, ip, lsr r1
   28064:	andeq	r8, r2, ip, lsr r1
   28068:	andeq	r8, r2, ip, lsr r1
   2806c:	andeq	r8, r2, ip, lsr r1
   28070:	andeq	r8, r2, ip, lsr r1
   28074:	andeq	r8, r2, ip, lsr r1
   28078:	strdeq	r8, [r2], -ip
   2807c:	andeq	r8, r2, ip, lsr r1
   28080:	andeq	r8, r2, ip, lsr r1
   28084:	andeq	r8, r2, ip, lsr r1
   28088:	andeq	r8, r2, r4, ror #7
   2808c:	andeq	r8, r2, ip, lsr r1
   28090:	andeq	r8, r2, ip, lsr r1
   28094:	andeq	r8, r2, ip, lsr r1
   28098:	andeq	r8, r2, ip, lsr r1
   2809c:	andeq	r8, r2, ip, lsr r1
   280a0:	andeq	r8, r2, ip, lsr r1
   280a4:	andeq	r8, r2, ip, lsr r1
   280a8:	andeq	r8, r2, ip, lsr r1
   280ac:	andeq	r8, r2, r4, asr #7
   280b0:	andeq	r8, r2, ip, lsr r1
   280b4:	andeq	r8, r2, r4, lsr #7
   280b8:	andeq	r8, r2, ip, lsr r1
   280bc:	andeq	r8, r2, ip, lsr r1
   280c0:	andeq	r8, r2, ip, lsr r1
   280c4:	andeq	r8, r2, ip, lsr r1
   280c8:	andeq	r8, r2, ip, lsr r1
   280cc:	andeq	r8, r2, ip, lsr r1
   280d0:	andeq	r8, r2, ip, lsr r1
   280d4:	andeq	r8, r2, ip, lsr r1
   280d8:	andeq	r8, r2, ip, lsr r1
   280dc:	andeq	r8, r2, ip, lsr r1
   280e0:	andeq	r8, r2, ip, lsr r1
   280e4:	andeq	r8, r2, ip, lsr r1
   280e8:	andeq	r8, r2, ip, lsr r1
   280ec:	andeq	r8, r2, ip, lsr r1
   280f0:	andeq	r8, r2, ip, lsr r1
   280f4:	andeq	r8, r2, ip, lsr r1
   280f8:	andeq	r8, r2, ip, lsl #7
   280fc:	andeq	r8, r2, ip, lsr r1
   28100:	andeq	r8, r2, ip, lsr r1
   28104:	andeq	r8, r2, ip, lsr r1
   28108:	andeq	r8, r2, r4, ror r3
   2810c:	andeq	r8, r2, ip, lsr r1
   28110:	andeq	r8, r2, ip, lsr r1
   28114:	andeq	r8, r2, ip, lsr r1
   28118:	andeq	r8, r2, r4, lsr #2
   2811c:	andeq	r8, r2, ip, asr r3
   28120:	andeq	r8, r2, r0, asr #6
   28124:	and	r8, r8, #4608	; 0x1200
   28128:	cmp	r8, #512	; 0x200
   2812c:	moveq	r3, #23
   28130:	strbeq	r3, [r5, #4]
   28134:	moveq	r0, #2
   28138:	beq	27edc <__assert_fail@plt+0x16338>
   2813c:	mov	r0, #2
   28140:	b	27edc <__assert_fail@plt+0x16338>
   28144:	ldrb	r3, [r0, #6]
   28148:	mov	r0, #1
   2814c:	strb	r0, [r5, #4]
   28150:	orr	r3, r3, #32
   28154:	strb	r3, [r5, #6]
   28158:	b	27edc <__assert_fail@plt+0x16338>
   2815c:	mov	r3, #36	; 0x24
   28160:	strb	r3, [r5, #4]
   28164:	mov	r0, #1
   28168:	b	27edc <__assert_fail@plt+0x16338>
   2816c:	and	r8, r8, #4608	; 0x1200
   28170:	cmp	r8, #4608	; 0x1200
   28174:	moveq	r3, #24
   28178:	strbeq	r3, [r5, #4]
   2817c:	moveq	r0, #1
   28180:	bne	27f40 <__assert_fail@plt+0x1639c>
   28184:	b	27edc <__assert_fail@plt+0x16338>
   28188:	tst	r8, #2048	; 0x800
   2818c:	beq	27f40 <__assert_fail@plt+0x1639c>
   28190:	mov	r3, #10
   28194:	strb	r3, [r5, #4]
   28198:	mov	r0, #1
   2819c:	b	27edc <__assert_fail@plt+0x16338>
   281a0:	tst	r8, #8
   281a4:	bne	281e8 <__assert_fail@plt+0x16644>
   281a8:	ldr	r3, [r4, #48]	; 0x30
   281ac:	add	r6, r6, #1
   281b0:	cmp	r6, r3
   281b4:	beq	281e8 <__assert_fail@plt+0x16644>
   281b8:	mov	r2, r8
   281bc:	str	r6, [r4, #40]	; 0x28
   281c0:	mov	r1, r4
   281c4:	mov	r0, sp
   281c8:	bl	27c48 <__assert_fail@plt+0x160a4>
   281cc:	ldrb	r2, [sp, #4]
   281d0:	ldr	r3, [r4, #40]	; 0x28
   281d4:	sub	r2, r2, #9
   281d8:	sub	r3, r3, #1
   281dc:	cmp	r2, #1
   281e0:	str	r3, [r4, #40]	; 0x28
   281e4:	bhi	27f40 <__assert_fail@plt+0x1639c>
   281e8:	mov	r2, #12
   281ec:	mov	r3, #32
   281f0:	strb	r2, [r5, #4]
   281f4:	str	r3, [r5]
   281f8:	mov	r0, #1
   281fc:	b	27edc <__assert_fail@plt+0x16338>
   28200:	tst	r8, #8192	; 0x2000
   28204:	beq	27f40 <__assert_fail@plt+0x1639c>
   28208:	mov	r3, #8
   2820c:	strb	r3, [r5, #4]
   28210:	mov	r0, #1
   28214:	b	27edc <__assert_fail@plt+0x16338>
   28218:	tst	r8, #8192	; 0x2000
   2821c:	beq	27f40 <__assert_fail@plt+0x1639c>
   28220:	mov	r3, #9
   28224:	strb	r3, [r5, #4]
   28228:	mov	r0, #1
   2822c:	b	27edc <__assert_fail@plt+0x16338>
   28230:	mov	r3, #11
   28234:	strb	r3, [r5, #4]
   28238:	mov	r0, #1
   2823c:	b	27edc <__assert_fail@plt+0x16338>
   28240:	ldr	r3, [pc, #864]	; 285a8 <__assert_fail@plt+0x16a04>
   28244:	and	r3, r3, r8
   28248:	cmp	r3, #0
   2824c:	bne	27f40 <__assert_fail@plt+0x1639c>
   28250:	mov	r3, #18
   28254:	strb	r3, [r5, #4]
   28258:	mov	r0, #1
   2825c:	b	27edc <__assert_fail@plt+0x16338>
   28260:	mov	r3, #5
   28264:	strb	r3, [r5, #4]
   28268:	mov	r0, #1
   2826c:	b	27edc <__assert_fail@plt+0x16338>
   28270:	ldr	r3, [pc, #816]	; 285a8 <__assert_fail@plt+0x16a04>
   28274:	and	r3, r3, r8
   28278:	cmp	r3, #0
   2827c:	bne	27f40 <__assert_fail@plt+0x1639c>
   28280:	mov	r3, #19
   28284:	strb	r3, [r5, #4]
   28288:	mov	r0, #1
   2828c:	b	27edc <__assert_fail@plt+0x16338>
   28290:	mov	r3, #20
   28294:	strb	r3, [r5, #4]
   28298:	mov	r0, #1
   2829c:	b	27edc <__assert_fail@plt+0x16338>
   282a0:	ldr	r3, [pc, #772]	; 285ac <__assert_fail@plt+0x16a08>
   282a4:	cmp	r6, #0
   282a8:	and	r3, r3, r8
   282ac:	clz	r3, r3
   282b0:	lsr	r3, r3, #5
   282b4:	moveq	r3, #0
   282b8:	cmp	r3, #0
   282bc:	beq	282e0 <__assert_fail@plt+0x1673c>
   282c0:	add	r6, sl, r6
   282c4:	lsr	r3, r8, #11
   282c8:	ldrb	r2, [r6, #-1]
   282cc:	eor	r3, r3, #1
   282d0:	cmp	r2, #10
   282d4:	orrne	r3, r3, #1
   282d8:	tst	r3, #1
   282dc:	bne	27f40 <__assert_fail@plt+0x1639c>
   282e0:	mov	r2, #12
   282e4:	mov	r3, #16
   282e8:	strb	r2, [r5, #4]
   282ec:	str	r3, [r5]
   282f0:	mov	r0, #1
   282f4:	b	27edc <__assert_fail@plt+0x16338>
   282f8:	and	r8, r8, #33792	; 0x8400
   282fc:	cmp	r8, #32768	; 0x8000
   28300:	bne	27f40 <__assert_fail@plt+0x1639c>
   28304:	b	28190 <__assert_fail@plt+0x165ec>
   28308:	tst	r8, #8192	; 0x2000
   2830c:	bne	2813c <__assert_fail@plt+0x16598>
   28310:	mov	r3, #8
   28314:	strb	r3, [r5, #4]
   28318:	mov	r0, #2
   2831c:	b	27edc <__assert_fail@plt+0x16338>
   28320:	tst	r8, #524288	; 0x80000
   28324:	bne	2813c <__assert_fail@plt+0x16598>
   28328:	mov	r2, #12
   2832c:	mov	r3, #128	; 0x80
   28330:	strb	r2, [r5, #4]
   28334:	str	r3, [r5]
   28338:	mov	r0, #2
   2833c:	b	27edc <__assert_fail@plt+0x16338>
   28340:	and	r8, r8, #4608	; 0x1200
   28344:	cmp	r8, #512	; 0x200
   28348:	moveq	r3, #24
   2834c:	strbeq	r3, [r5, #4]
   28350:	moveq	r0, #2
   28354:	bne	2813c <__assert_fail@plt+0x16598>
   28358:	b	27edc <__assert_fail@plt+0x16338>
   2835c:	tst	r8, #33792	; 0x8400
   28360:	bne	2813c <__assert_fail@plt+0x16598>
   28364:	mov	r3, #10
   28368:	strb	r3, [r5, #4]
   2836c:	mov	r0, #2
   28370:	b	27edc <__assert_fail@plt+0x16338>
   28374:	tst	r8, #524288	; 0x80000
   28378:	bne	2813c <__assert_fail@plt+0x16598>
   2837c:	mov	r3, #32
   28380:	strb	r3, [r5, #4]
   28384:	mov	r0, #2
   28388:	b	27edc <__assert_fail@plt+0x16338>
   2838c:	tst	r8, #524288	; 0x80000
   28390:	bne	2813c <__assert_fail@plt+0x16598>
   28394:	mov	r3, #34	; 0x22
   28398:	strb	r3, [r5, #4]
   2839c:	mov	r0, #2
   283a0:	b	27edc <__assert_fail@plt+0x16338>
   283a4:	tst	r8, #524288	; 0x80000
   283a8:	bne	2813c <__assert_fail@plt+0x16598>
   283ac:	mov	r2, #12
   283b0:	mov	r3, #256	; 0x100
   283b4:	strb	r2, [r5, #4]
   283b8:	str	r3, [r5]
   283bc:	mov	r0, #2
   283c0:	b	27edc <__assert_fail@plt+0x16338>
   283c4:	tst	r8, #524288	; 0x80000
   283c8:	bne	2813c <__assert_fail@plt+0x16598>
   283cc:	mov	r2, #12
   283d0:	mov	r3, #64	; 0x40
   283d4:	strb	r2, [r5, #4]
   283d8:	str	r3, [r5]
   283dc:	mov	r0, #2
   283e0:	b	27edc <__assert_fail@plt+0x16338>
   283e4:	tst	r8, #524288	; 0x80000
   283e8:	bne	2813c <__assert_fail@plt+0x16598>
   283ec:	mov	r3, #33	; 0x21
   283f0:	strb	r3, [r5, #4]
   283f4:	mov	r0, #2
   283f8:	b	27edc <__assert_fail@plt+0x16338>
   283fc:	tst	r8, #524288	; 0x80000
   28400:	bne	2813c <__assert_fail@plt+0x16598>
   28404:	mov	r3, #35	; 0x23
   28408:	strb	r3, [r5, #4]
   2840c:	mov	r0, #2
   28410:	b	27edc <__assert_fail@plt+0x16338>
   28414:	tst	r8, #524288	; 0x80000
   28418:	bne	2813c <__assert_fail@plt+0x16598>
   2841c:	mov	r2, #12
   28420:	mov	r3, #512	; 0x200
   28424:	strb	r2, [r5, #4]
   28428:	str	r3, [r5]
   2842c:	mov	r0, #2
   28430:	b	27edc <__assert_fail@plt+0x16338>
   28434:	ldr	r0, [pc, #364]	; 285a8 <__assert_fail@plt+0x16a04>
   28438:	and	r0, r0, r8
   2843c:	cmp	r0, #2
   28440:	moveq	r3, #19
   28444:	strbeq	r3, [r5, #4]
   28448:	bne	2813c <__assert_fail@plt+0x16598>
   2844c:	b	27edc <__assert_fail@plt+0x16338>
   28450:	tst	r8, #524288	; 0x80000
   28454:	bne	2813c <__assert_fail@plt+0x16598>
   28458:	mov	r2, #12
   2845c:	mov	r3, #9
   28460:	strb	r2, [r5, #4]
   28464:	str	r3, [r5]
   28468:	mov	r0, #2
   2846c:	b	27edc <__assert_fail@plt+0x16338>
   28470:	tst	r8, #524288	; 0x80000
   28474:	bne	2813c <__assert_fail@plt+0x16598>
   28478:	mov	r2, #12
   2847c:	mov	r3, #6
   28480:	strb	r2, [r5, #4]
   28484:	str	r3, [r5]
   28488:	mov	r0, #2
   2848c:	b	27edc <__assert_fail@plt+0x16338>
   28490:	tst	r8, #16384	; 0x4000
   28494:	bne	2813c <__assert_fail@plt+0x16598>
   28498:	sub	r6, r6, #49	; 0x31
   2849c:	mov	r3, #4
   284a0:	str	r6, [r5]
   284a4:	strb	r3, [r5, #4]
   284a8:	mov	r0, #2
   284ac:	b	27edc <__assert_fail@plt+0x16338>
   284b0:	ldr	r0, [pc, #240]	; 285a8 <__assert_fail@plt+0x16a04>
   284b4:	and	r0, r0, r8
   284b8:	cmp	r0, #2
   284bc:	moveq	r3, #18
   284c0:	strbeq	r3, [r5, #4]
   284c4:	bne	2813c <__assert_fail@plt+0x16598>
   284c8:	b	27edc <__assert_fail@plt+0x16338>
   284cc:	tst	r8, #8192	; 0x2000
   284d0:	bne	2813c <__assert_fail@plt+0x16598>
   284d4:	mov	r3, #9
   284d8:	strb	r3, [r5, #4]
   284dc:	mov	r0, #2
   284e0:	b	27edc <__assert_fail@plt+0x16338>
   284e4:	bl	11964 <__ctype_b_loc@plt>
   284e8:	lsl	r3, r6, #1
   284ec:	ldrb	r2, [r5, #6]
   284f0:	bic	r2, r2, #64	; 0x40
   284f4:	ldr	r1, [r0]
   284f8:	ldrh	r3, [r1, r3]
   284fc:	lsr	r3, r3, #3
   28500:	and	r3, r3, #1
   28504:	cmp	r6, #95	; 0x5f
   28508:	orreq	r3, r3, #1
   2850c:	orr	r3, r2, r3, lsl #6
   28510:	strb	r3, [r5, #6]
   28514:	b	27fb8 <__assert_fail@plt+0x16414>
   28518:	cmp	r3, #1
   2851c:	ble	28550 <__assert_fail@plt+0x169ac>
   28520:	ldr	r0, [r4, #8]
   28524:	add	r1, r0, r2, lsl #2
   28528:	ldr	r0, [r0, r2, lsl #2]
   2852c:	cmn	r0, #1
   28530:	beq	28594 <__assert_fail@plt+0x169f0>
   28534:	ldr	r0, [r4, #28]
   28538:	add	r6, r6, #2
   2853c:	cmp	r0, r6
   28540:	beq	28550 <__assert_fail@plt+0x169ac>
   28544:	ldr	r0, [r1, #4]
   28548:	cmn	r0, #1
   2854c:	beq	28594 <__assert_fail@plt+0x169f0>
   28550:	ldrb	r1, [r4, #76]	; 0x4c
   28554:	cmp	r1, #0
   28558:	bne	28570 <__assert_fail@plt+0x169cc>
   2855c:	ldr	r1, [r4]
   28560:	ldr	r0, [r4, #24]
   28564:	add	r1, r1, r2
   28568:	ldrb	r6, [r1, r0]
   2856c:	b	27f6c <__assert_fail@plt+0x163c8>
   28570:	ldr	ip, [r4, #12]
   28574:	ldr	r1, [r4]
   28578:	ldr	r0, [r4, #24]
   2857c:	ldr	ip, [ip, r2, lsl #2]
   28580:	add	r1, r1, ip
   28584:	ldrb	r6, [r1, r0]
   28588:	tst	r6, #128	; 0x80
   2858c:	bne	27f68 <__assert_fail@plt+0x163c4>
   28590:	b	27f6c <__assert_fail@plt+0x163c8>
   28594:	ldrb	r6, [sl, r2]
   28598:	mov	r3, #1
   2859c:	strb	r3, [r5, #4]
   285a0:	strb	r6, [r5]
   285a4:	b	27f88 <__assert_fail@plt+0x163e4>
   285a8:	andeq	r0, r0, r2, lsl #8
   285ac:	addeq	r0, r0, r8
   285b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   285b4:	mov	sl, r0
   285b8:	ldr	r8, [pc, #172]	; 2866c <__assert_fail@plt+0x16ac8>
   285bc:	mov	r4, r1
   285c0:	mov	r6, r2
   285c4:	mvn	r5, #0
   285c8:	mov	r9, #32768	; 0x8000
   285cc:	mvn	r7, #1
   285d0:	mov	r2, r6
   285d4:	mov	r1, sl
   285d8:	mov	r0, r4
   285dc:	bl	27c48 <__assert_fail@plt+0x160a4>
   285e0:	ldrb	r2, [r4, #4]
   285e4:	ldr	r3, [sl, #40]	; 0x28
   285e8:	cmp	r2, #2
   285ec:	add	r0, r3, r0
   285f0:	str	r0, [sl, #40]	; 0x28
   285f4:	ldrb	r3, [r4]
   285f8:	beq	28660 <__assert_fail@plt+0x16abc>
   285fc:	cmp	r3, #44	; 0x2c
   28600:	cmpne	r2, #24
   28604:	beq	28664 <__assert_fail@plt+0x16ac0>
   28608:	cmp	r2, #1
   2860c:	beq	28618 <__assert_fail@plt+0x16a74>
   28610:	mov	r5, r7
   28614:	b	285d0 <__assert_fail@plt+0x16a2c>
   28618:	sub	r1, r3, #48	; 0x30
   2861c:	uxtb	r2, r1
   28620:	cmp	r2, #9
   28624:	movhi	r2, #0
   28628:	movls	r2, #1
   2862c:	cmn	r5, #2
   28630:	moveq	r2, #0
   28634:	cmp	r2, #0
   28638:	beq	28610 <__assert_fail@plt+0x16a6c>
   2863c:	cmn	r5, #1
   28640:	moveq	r5, r1
   28644:	beq	285d0 <__assert_fail@plt+0x16a2c>
   28648:	add	r5, r5, r5, lsl #2
   2864c:	add	r3, r3, r5, lsl #1
   28650:	cmp	r3, r8
   28654:	suble	r5, r3, #48	; 0x30
   28658:	movgt	r5, r9
   2865c:	b	285d0 <__assert_fail@plt+0x16a2c>
   28660:	mvn	r5, #1
   28664:	mov	r0, r5
   28668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2866c:	andeq	r8, r0, r0, lsr r0
   28670:	ldr	ip, [r1, #80]	; 0x50
   28674:	push	{r4, r5, r6, r7, r8, r9, lr}
   28678:	sub	sp, sp, #12
   2867c:	cmp	ip, #1
   28680:	ldr	r4, [r1, #40]	; 0x28
   28684:	ldrb	r7, [sp, #44]	; 0x2c
   28688:	beq	286fc <__assert_fail@plt+0x16b58>
   2868c:	ldr	lr, [r1, #28]
   28690:	add	ip, r4, #1
   28694:	cmp	ip, lr
   28698:	bge	286fc <__assert_fail@plt+0x16b58>
   2869c:	ldr	r5, [r1, #8]
   286a0:	add	r6, r5, ip, lsl #2
   286a4:	ldr	ip, [r5, ip, lsl #2]
   286a8:	cmn	ip, #1
   286ac:	subeq	lr, lr, r4
   286b0:	moveq	r2, r6
   286b4:	moveq	r3, #1
   286b8:	beq	286cc <__assert_fail@plt+0x16b28>
   286bc:	b	286fc <__assert_fail@plt+0x16b58>
   286c0:	ldr	ip, [r2, #4]!
   286c4:	cmn	ip, #1
   286c8:	bne	286dc <__assert_fail@plt+0x16b38>
   286cc:	add	r3, r3, #1
   286d0:	cmp	r3, lr
   286d4:	add	r5, r3, r4
   286d8:	bne	286c0 <__assert_fail@plt+0x16b1c>
   286dc:	ldr	ip, [r6, #-4]
   286e0:	mov	r2, #1
   286e4:	mov	r3, #0
   286e8:	stm	r0, {r2, ip}
   286ec:	str	r5, [r1, #40]	; 0x28
   286f0:	mov	r0, r3
   286f4:	add	sp, sp, #12
   286f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   286fc:	ldrb	ip, [r2, #4]
   28700:	add	r4, r4, r3
   28704:	str	r4, [r1, #40]	; 0x28
   28708:	and	r3, ip, #251	; 0xfb
   2870c:	cmp	ip, #28
   28710:	cmpne	r3, #26
   28714:	beq	28750 <__assert_fail@plt+0x16bac>
   28718:	cmp	ip, #22
   2871c:	moveq	ip, r7
   28720:	orrne	ip, r7, #1
   28724:	cmp	ip, #0
   28728:	mov	r5, r2
   2872c:	mov	r4, r0
   28730:	beq	28764 <__assert_fail@plt+0x16bc0>
   28734:	mov	r3, #0
   28738:	str	r3, [r4]
   2873c:	ldrb	r2, [r5]
   28740:	mov	r0, r3
   28744:	strb	r2, [r4, #4]
   28748:	add	sp, sp, #12
   2874c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28750:	ldr	r5, [r1, #56]	; 0x38
   28754:	cmp	r4, r5
   28758:	blt	28784 <__assert_fail@plt+0x16be0>
   2875c:	mov	r3, #7
   28760:	b	286f0 <__assert_fail@plt+0x16b4c>
   28764:	ldr	r2, [sp, #40]	; 0x28
   28768:	mov	r0, sp
   2876c:	bl	1e5a8 <__assert_fail@plt+0xca04>
   28770:	ldrb	r3, [sp, #4]
   28774:	cmp	r3, #21
   28778:	movne	r3, #11
   2877c:	bne	286f0 <__assert_fail@plt+0x16b4c>
   28780:	b	28734 <__assert_fail@plt+0x16b90>
   28784:	ldrb	r6, [r2]
   28788:	mov	lr, #0
   2878c:	b	287b0 <__assert_fail@plt+0x16c0c>
   28790:	ldr	r3, [r0, #4]
   28794:	strb	ip, [r3, lr]
   28798:	add	lr, lr, #1
   2879c:	cmp	lr, #32
   287a0:	beq	2875c <__assert_fail@plt+0x16bb8>
   287a4:	ldrb	ip, [r2, #4]
   287a8:	ldr	r4, [r1, #40]	; 0x28
   287ac:	ldr	r5, [r1, #56]	; 0x38
   287b0:	cmp	ip, #30
   287b4:	beq	28820 <__assert_fail@plt+0x16c7c>
   287b8:	ldr	ip, [r1, #4]
   287bc:	add	r3, r4, #1
   287c0:	str	r3, [r1, #40]	; 0x28
   287c4:	ldrb	ip, [ip, r4]
   287c8:	cmp	r5, r3
   287cc:	ble	2875c <__assert_fail@plt+0x16bb8>
   287d0:	cmp	r6, ip
   287d4:	bne	28790 <__assert_fail@plt+0x16bec>
   287d8:	ldr	r4, [r1, #4]
   287dc:	ldrb	r4, [r4, r3]
   287e0:	cmp	r4, #93	; 0x5d
   287e4:	bne	28790 <__assert_fail@plt+0x16bec>
   287e8:	add	r3, r3, #1
   287ec:	str	r3, [r1, #40]	; 0x28
   287f0:	ldr	r1, [r0, #4]
   287f4:	mov	r3, #0
   287f8:	strb	r3, [r1, lr]
   287fc:	ldrb	r2, [r2, #4]
   28800:	cmp	r2, #28
   28804:	beq	28900 <__assert_fail@plt+0x16d5c>
   28808:	cmp	r2, #30
   2880c:	beq	288f4 <__assert_fail@plt+0x16d50>
   28810:	cmp	r2, #26
   28814:	moveq	r2, #3
   28818:	streq	r2, [r0]
   2881c:	b	286f0 <__assert_fail@plt+0x16b4c>
   28820:	ldrb	r3, [r1, #75]	; 0x4b
   28824:	cmp	r3, #0
   28828:	beq	287b8 <__assert_fail@plt+0x16c14>
   2882c:	ldrb	r3, [r1, #76]	; 0x4c
   28830:	cmp	r3, #0
   28834:	beq	288d0 <__assert_fail@plt+0x16d2c>
   28838:	ldr	r8, [r1, #28]
   2883c:	cmp	r4, r8
   28840:	beq	288ec <__assert_fail@plt+0x16d48>
   28844:	ldr	r3, [r1, #8]
   28848:	lsl	ip, r4, #2
   2884c:	ldr	r3, [r3, r4, lsl #2]
   28850:	cmn	r3, #1
   28854:	beq	287b8 <__assert_fail@plt+0x16c14>
   28858:	ldr	r7, [r1, #12]
   2885c:	ldr	r3, [r1]
   28860:	ldr	r7, [r7, ip]
   28864:	ldr	ip, [r1, #24]
   28868:	add	r3, r3, r7
   2886c:	ldrb	ip, [r3, ip]
   28870:	tst	ip, #128	; 0x80
   28874:	bne	287b8 <__assert_fail@plt+0x16c14>
   28878:	ldr	r3, [r1, #80]	; 0x50
   2887c:	cmp	r3, #1
   28880:	add	r3, r4, #1
   28884:	beq	288c8 <__assert_fail@plt+0x16d24>
   28888:	cmp	r8, r3
   2888c:	ble	288c8 <__assert_fail@plt+0x16d24>
   28890:	ldr	r9, [r1, #8]
   28894:	add	r7, r9, r3, lsl #2
   28898:	ldr	r9, [r9, r3, lsl #2]
   2889c:	cmn	r9, #1
   288a0:	addeq	r4, r4, #2
   288a4:	beq	288bc <__assert_fail@plt+0x16d18>
   288a8:	b	288c8 <__assert_fail@plt+0x16d24>
   288ac:	ldr	r9, [r7, #4]!
   288b0:	add	r4, r4, #1
   288b4:	cmn	r9, #1
   288b8:	bne	288c8 <__assert_fail@plt+0x16d24>
   288bc:	cmp	r4, r8
   288c0:	mov	r3, r4
   288c4:	bne	288ac <__assert_fail@plt+0x16d08>
   288c8:	str	r3, [r1, #40]	; 0x28
   288cc:	b	287c8 <__assert_fail@plt+0x16c24>
   288d0:	ldr	ip, [r1]
   288d4:	ldr	r7, [r1, #24]
   288d8:	add	ip, ip, r4
   288dc:	add	r3, r4, #1
   288e0:	str	r3, [r1, #40]	; 0x28
   288e4:	ldrb	ip, [ip, r7]
   288e8:	b	287c8 <__assert_fail@plt+0x16c24>
   288ec:	lsl	ip, r4, #2
   288f0:	b	28858 <__assert_fail@plt+0x16cb4>
   288f4:	mov	r2, #4
   288f8:	str	r2, [r0]
   288fc:	b	286f0 <__assert_fail@plt+0x16b4c>
   28900:	mov	r2, #2
   28904:	str	r2, [r0]
   28908:	b	286f0 <__assert_fail@plt+0x16b4c>
   2890c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28910:	sub	sp, sp, #164	; 0xa4
   28914:	mov	r4, r1
   28918:	str	r2, [sp, #20]
   2891c:	ldrb	r2, [r2, #4]
   28920:	ldr	r1, [r1]
   28924:	str	r3, [sp, #28]
   28928:	sub	r3, r2, #1
   2892c:	mov	sl, r0
   28930:	str	r1, [sp, #24]
   28934:	cmp	r3, #35	; 0x23
   28938:	ldrls	pc, [pc, r3, lsl #2]
   2893c:	b	29564 <__assert_fail@plt+0x179c0>
   28940:	andeq	r9, r2, r4, lsr r4
   28944:	andeq	r8, r2, ip, ror #19
   28948:	andeq	r9, r2, r4, ror #10
   2894c:	andeq	r9, r2, r0, asr #7
   28950:	andeq	r8, r2, r8, ror pc
   28954:	andeq	r9, r2, r4, ror #10
   28958:	andeq	r9, r2, r4, ror #10
   2895c:			; <UNDEFINED> instruction: 0x00028fbc
   28960:	andeq	r9, r2, r4, ror r5
   28964:	andeq	r8, r2, ip, ror #19
   28968:	andeq	r8, r2, ip, lsl #20
   2896c:	andeq	r9, r2, r4, lsl r1
   28970:	andeq	r9, r2, r4, ror #10
   28974:	andeq	r9, r2, r4, ror #10
   28978:	andeq	r9, r2, r4, ror #10
   2897c:	andeq	r9, r2, r4, ror #10
   28980:	andeq	r9, r2, r4, ror #10
   28984:	andeq	r8, r2, ip, lsl #20
   28988:	andeq	r8, r2, ip, lsl #20
   2898c:	andeq	r9, r2, r0, ror r2
   28990:	andeq	r9, r2, r4, ror #10
   28994:	andeq	r9, r2, r4, ror #10
   28998:	andeq	r8, r2, r0, lsl #20
   2899c:	andeq	r8, r2, r8, lsr #20
   289a0:	andeq	r9, r2, r4, ror #10
   289a4:	andeq	r9, r2, r4, ror #10
   289a8:	andeq	r9, r2, r4, ror #10
   289ac:	andeq	r9, r2, r4, ror #10
   289b0:	andeq	r9, r2, r4, ror #10
   289b4:	andeq	r9, r2, r4, ror #10
   289b8:	andeq	r9, r2, r4, ror #10
   289bc:	andeq	r9, r2, ip, lsr r5
   289c0:	andeq	r9, r2, ip, lsr r5
   289c4:	andeq	r9, r2, r8, lsr #1
   289c8:	andeq	r9, r2, r8, lsr #1
   289cc:	strdeq	r9, [r2], -ip
   289d0:	cmp	r0, #0
   289d4:	beq	289e0 <__assert_fail@plt+0x16e3c>
   289d8:	ldr	r1, [pc, #4032]	; 299a0 <__assert_fail@plt+0x17dfc>
   289dc:	bl	1e9dc <__assert_fail@plt+0xce38>
   289e0:	ldr	r2, [sp, #204]	; 0xcc
   289e4:	mov	r3, #8
   289e8:	str	r3, [r2]
   289ec:	mov	r3, #0
   289f0:	str	r3, [sp, #32]
   289f4:	ldr	r0, [sp, #32]
   289f8:	add	sp, sp, #164	; 0xa4
   289fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a00:	ldr	r3, [sp, #28]
   28a04:	tst	r3, #16777216	; 0x1000000
   28a08:	bne	28ca4 <__assert_fail@plt+0x17100>
   28a0c:	ldr	r3, [sp, #28]
   28a10:	tst	r3, #32
   28a14:	bne	28ca4 <__assert_fail@plt+0x17100>
   28a18:	tst	r3, #16
   28a1c:	bne	29734 <__assert_fail@plt+0x17b90>
   28a20:	cmp	r2, #9
   28a24:	beq	29574 <__assert_fail@plt+0x179d0>
   28a28:	ldr	r1, [sp, #20]
   28a2c:	ldr	r0, [sp, #24]
   28a30:	mov	r3, #0
   28a34:	mov	r2, #1
   28a38:	str	r1, [sp]
   28a3c:	strb	r2, [r1, #4]
   28a40:	mov	r2, r3
   28a44:	add	r1, r0, #64	; 0x40
   28a48:	add	r0, r0, #56	; 0x38
   28a4c:	bl	2074c <__assert_fail@plt+0xeba8>
   28a50:	subs	r3, r0, #0
   28a54:	str	r3, [sp, #32]
   28a58:	beq	29524 <__assert_fail@plt+0x17980>
   28a5c:	ldr	r4, [sp, #20]
   28a60:	ldr	r2, [sp, #28]
   28a64:	mov	r1, sl
   28a68:	mov	r0, r4
   28a6c:	bl	27c48 <__assert_fail@plt+0x160a4>
   28a70:	ldr	r2, [sl, #40]	; 0x28
   28a74:	mov	fp, #0
   28a78:	ldrb	r3, [r4, #4]
   28a7c:	add	r2, r2, r0
   28a80:	str	r2, [sl, #40]	; 0x28
   28a84:	cmp	r3, #23
   28a88:	bhi	289f4 <__assert_fail@plt+0x16e50>
   28a8c:	ldr	r2, [pc, #3856]	; 299a4 <__assert_fail@plt+0x17e00>
   28a90:	sub	r6, r3, #18
   28a94:	clz	r6, r6
   28a98:	mvn	r2, r2, lsr r3
   28a9c:	tst	r2, #1
   28aa0:	lsr	r6, r6, #5
   28aa4:	bne	289f4 <__assert_fail@plt+0x16e50>
   28aa8:	ldr	r2, [sp, #20]
   28aac:	cmp	r3, #23
   28ab0:	ldr	r4, [sl, #40]	; 0x28
   28ab4:	ldm	r2, {r0, r1}
   28ab8:	add	r2, sp, #96	; 0x60
   28abc:	stm	r2, {r0, r1}
   28ac0:	beq	28d74 <__assert_fail@plt+0x171d0>
   28ac4:	cmp	r3, #19
   28ac8:	moveq	r3, #1
   28acc:	mvnne	r3, #0
   28ad0:	ldr	r2, [sp, #28]
   28ad4:	mov	r1, sl
   28ad8:	ldr	r0, [sp, #20]
   28adc:	str	r3, [sp, #16]
   28ae0:	bl	27c48 <__assert_fail@plt+0x160a4>
   28ae4:	ldr	r3, [sl, #40]	; 0x28
   28ae8:	ldr	r2, [sp, #32]
   28aec:	cmp	r2, #0
   28af0:	add	r0, r3, r0
   28af4:	str	r0, [sl, #40]	; 0x28
   28af8:	beq	28de4 <__assert_fail@plt+0x17240>
   28afc:	cmp	r6, #0
   28b00:	strle	fp, [sp, #36]	; 0x24
   28b04:	ldrle	r5, [sp, #32]
   28b08:	bgt	28cc4 <__assert_fail@plt+0x17120>
   28b0c:	ldrb	r3, [r5, #24]
   28b10:	cmp	r3, #17
   28b14:	beq	28dfc <__assert_fail@plt+0x17258>
   28b18:	ldr	r3, [sp, #24]
   28b1c:	ldr	r2, [sp, #16]
   28b20:	add	r4, sp, #128	; 0x80
   28b24:	cmn	r2, #1
   28b28:	add	r7, r3, #56	; 0x38
   28b2c:	add	r8, r3, #64	; 0x40
   28b30:	movne	ip, #10
   28b34:	moveq	ip, #11
   28b38:	str	r4, [sp]
   28b3c:	mov	r0, r7
   28b40:	str	fp, [r4, #4]
   28b44:	mov	r1, r8
   28b48:	mov	r3, #0
   28b4c:	mov	r2, r5
   28b50:	str	fp, [sp, #128]	; 0x80
   28b54:	strb	ip, [sp, #132]	; 0x84
   28b58:	bl	2074c <__assert_fail@plt+0xeba8>
   28b5c:	subs	r9, r0, #0
   28b60:	beq	28d48 <__assert_fail@plt+0x171a4>
   28b64:	ldr	r2, [sp, #16]
   28b68:	add	r6, r6, #2
   28b6c:	cmp	r6, r2
   28b70:	bgt	28c14 <__assert_fail@plt+0x17070>
   28b74:	str	sl, [sp, #40]	; 0x28
   28b78:	mov	sl, r9
   28b7c:	ldr	r9, [sp, #24]
   28b80:	mov	r0, r5
   28b84:	mov	r1, r9
   28b88:	bl	20810 <__assert_fail@plt+0xec6c>
   28b8c:	mov	ip, #16
   28b90:	str	r4, [sp]
   28b94:	mov	r2, sl
   28b98:	str	fp, [r4, #4]
   28b9c:	mov	r1, r8
   28ba0:	str	fp, [r4]
   28ba4:	strb	ip, [sp, #132]	; 0x84
   28ba8:	mov	r5, r0
   28bac:	mov	r3, r0
   28bb0:	mov	r0, r7
   28bb4:	bl	2074c <__assert_fail@plt+0xeba8>
   28bb8:	cmp	r0, #0
   28bbc:	cmpne	r5, #0
   28bc0:	moveq	ip, #1
   28bc4:	movne	ip, #0
   28bc8:	beq	28d48 <__assert_fail@plt+0x171a4>
   28bcc:	str	r4, [sp]
   28bd0:	mov	r2, r0
   28bd4:	str	ip, [r4, #4]
   28bd8:	str	ip, [r4]
   28bdc:	mov	r3, fp
   28be0:	mov	ip, #10
   28be4:	mov	r1, r8
   28be8:	mov	r0, r7
   28bec:	strb	ip, [sp, #132]	; 0x84
   28bf0:	bl	2074c <__assert_fail@plt+0xeba8>
   28bf4:	subs	sl, r0, #0
   28bf8:	beq	28d48 <__assert_fail@plt+0x171a4>
   28bfc:	ldr	r3, [sp, #16]
   28c00:	add	r6, r6, #1
   28c04:	cmp	r6, r3
   28c08:	ble	28b80 <__assert_fail@plt+0x16fdc>
   28c0c:	mov	r9, sl
   28c10:	ldr	sl, [sp, #40]	; 0x28
   28c14:	ldr	r2, [sp, #36]	; 0x24
   28c18:	cmp	r2, #0
   28c1c:	beq	28f14 <__assert_fail@plt+0x17370>
   28c20:	str	r4, [sp]
   28c24:	mov	ip, #16
   28c28:	str	fp, [r4, #4]
   28c2c:	mov	r3, r9
   28c30:	mov	r1, r8
   28c34:	mov	r0, r7
   28c38:	str	fp, [r4]
   28c3c:	strb	ip, [sp, #132]	; 0x84
   28c40:	bl	2074c <__assert_fail@plt+0xeba8>
   28c44:	ldr	r3, [sp, #204]	; 0xcc
   28c48:	ldr	r3, [r3]
   28c4c:	adds	r3, r3, #0
   28c50:	movne	r3, #1
   28c54:	cmp	r0, #0
   28c58:	movne	r3, #0
   28c5c:	cmp	r3, #0
   28c60:	bne	28d54 <__assert_fail@plt+0x171b0>
   28c64:	str	r0, [sp, #32]
   28c68:	ldr	r3, [sp, #28]
   28c6c:	tst	r3, #16777216	; 0x1000000
   28c70:	ldr	r3, [sp, #20]
   28c74:	ldrb	r3, [r3, #4]
   28c78:	beq	28a84 <__assert_fail@plt+0x16ee0>
   28c7c:	cmp	r3, #23
   28c80:	cmpne	r3, #11
   28c84:	bne	28a84 <__assert_fail@plt+0x16ee0>
   28c88:	ldr	r3, [sp, #32]
   28c8c:	cmp	r3, #0
   28c90:	beq	28ca4 <__assert_fail@plt+0x17100>
   28c94:	mov	r0, r3
   28c98:	mov	r2, #0
   28c9c:	ldr	r1, [pc, #3324]	; 299a0 <__assert_fail@plt+0x17dfc>
   28ca0:	bl	1e9dc <__assert_fail@plt+0xce38>
   28ca4:	ldr	r2, [sp, #204]	; 0xcc
   28ca8:	mov	r3, #13
   28cac:	str	r3, [r2]
   28cb0:	mov	r3, #0
   28cb4:	str	r3, [sp, #32]
   28cb8:	ldr	r0, [sp, #32]
   28cbc:	add	sp, sp, #164	; 0xa4
   28cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28cc4:	cmp	r6, #1
   28cc8:	beq	29564 <__assert_fail@plt+0x179c0>
   28ccc:	ldr	r3, [sp, #24]
   28cd0:	ldr	r5, [sp, #32]
   28cd4:	add	r2, r3, #56	; 0x38
   28cd8:	str	sl, [sp, #40]	; 0x28
   28cdc:	str	r2, [sp, #36]	; 0x24
   28ce0:	add	r9, r3, #64	; 0x40
   28ce4:	mov	r7, #2
   28ce8:	add	r4, sp, #128	; 0x80
   28cec:	mov	r8, #16
   28cf0:	mov	sl, r5
   28cf4:	b	28d04 <__assert_fail@plt+0x17160>
   28cf8:	add	r7, r7, #1
   28cfc:	cmp	r7, r6
   28d00:	bgt	28f4c <__assert_fail@plt+0x173a8>
   28d04:	mov	r0, r5
   28d08:	ldr	r1, [sp, #24]
   28d0c:	bl	20810 <__assert_fail@plt+0xec6c>
   28d10:	str	r4, [sp]
   28d14:	mov	r2, sl
   28d18:	str	fp, [r4, #4]
   28d1c:	mov	r1, r9
   28d20:	str	fp, [r4]
   28d24:	strb	r8, [sp, #132]	; 0x84
   28d28:	mov	r5, r0
   28d2c:	mov	r3, r0
   28d30:	ldr	r0, [sp, #36]	; 0x24
   28d34:	bl	2074c <__assert_fail@plt+0xeba8>
   28d38:	cmp	r0, #0
   28d3c:	cmpne	r5, #0
   28d40:	mov	sl, r0
   28d44:	bne	28cf8 <__assert_fail@plt+0x17154>
   28d48:	ldr	r2, [sp, #204]	; 0xcc
   28d4c:	mov	r3, #12
   28d50:	str	r3, [r2]
   28d54:	ldr	r3, [sp, #32]
   28d58:	cmp	r3, #0
   28d5c:	beq	289ec <__assert_fail@plt+0x16e48>
   28d60:	mov	r0, r3
   28d64:	mov	r2, #0
   28d68:	ldr	r1, [pc, #3120]	; 299a0 <__assert_fail@plt+0x17dfc>
   28d6c:	bl	1e9dc <__assert_fail@plt+0xce38>
   28d70:	b	289ec <__assert_fail@plt+0x16e48>
   28d74:	ldr	r2, [sp, #28]
   28d78:	ldr	r1, [sp, #20]
   28d7c:	mov	r0, sl
   28d80:	bl	285b0 <__assert_fail@plt+0x16a0c>
   28d84:	cmn	r0, #1
   28d88:	str	r0, [sp, #16]
   28d8c:	beq	28e10 <__assert_fail@plt+0x1726c>
   28d90:	ldr	r3, [sp, #16]
   28d94:	cmn	r3, #2
   28d98:	beq	28db4 <__assert_fail@plt+0x17210>
   28d9c:	ldr	r3, [sp, #20]
   28da0:	ldrb	r3, [r3, #4]
   28da4:	cmp	r3, #24
   28da8:	beq	28f1c <__assert_fail@plt+0x17378>
   28dac:	cmp	r3, #1
   28db0:	beq	28ee4 <__assert_fail@plt+0x17340>
   28db4:	ldr	r3, [sp, #28]
   28db8:	tst	r3, #2097152	; 0x200000
   28dbc:	beq	29980 <__assert_fail@plt+0x17ddc>
   28dc0:	add	r3, sp, #96	; 0x60
   28dc4:	ldr	r2, [sp, #20]
   28dc8:	ldm	r3, {r0, r1}
   28dcc:	mov	r3, #1
   28dd0:	str	r4, [sl, #40]	; 0x28
   28dd4:	stm	r2, {r0, r1}
   28dd8:	ldr	r0, [sp, #32]
   28ddc:	strb	r3, [r2, #4]
   28de0:	b	28c44 <__assert_fail@plt+0x170a0>
   28de4:	ldr	r3, [sp, #204]	; 0xcc
   28de8:	ldr	r3, [r3]
   28dec:	cmp	r3, #0
   28df0:	bne	28d54 <__assert_fail@plt+0x171b0>
   28df4:	str	fp, [sp, #32]
   28df8:	b	28c68 <__assert_fail@plt+0x170c4>
   28dfc:	ldr	r2, [r5, #20]
   28e00:	ldr	r1, [pc, #2976]	; 299a8 <__assert_fail@plt+0x17e04>
   28e04:	mov	r0, r5
   28e08:	bl	1e9dc <__assert_fail@plt+0xce38>
   28e0c:	b	28b18 <__assert_fail@plt+0x16f74>
   28e10:	ldr	r3, [sp, #20]
   28e14:	ldrb	r3, [r3, #4]
   28e18:	cmp	r3, #1
   28e1c:	bne	28f00 <__assert_fail@plt+0x1735c>
   28e20:	ldr	r3, [sp, #20]
   28e24:	ldrb	r3, [r3]
   28e28:	cmp	r3, #44	; 0x2c
   28e2c:	bne	28f00 <__assert_fail@plt+0x1735c>
   28e30:	mov	r6, fp
   28e34:	ldr	r2, [sp, #28]
   28e38:	ldr	r1, [sp, #20]
   28e3c:	mov	r0, sl
   28e40:	bl	285b0 <__assert_fail@plt+0x16a0c>
   28e44:	cmn	r0, #2
   28e48:	str	r0, [sp, #16]
   28e4c:	beq	28db4 <__assert_fail@plt+0x17210>
   28e50:	ldr	r2, [sp, #16]
   28e54:	cmn	r2, #1
   28e58:	cmpne	r6, r2
   28e5c:	bgt	28f00 <__assert_fail@plt+0x1735c>
   28e60:	ldr	r3, [sp, #20]
   28e64:	ldrb	r3, [r3, #4]
   28e68:	cmp	r3, #24
   28e6c:	bne	28f00 <__assert_fail@plt+0x1735c>
   28e70:	cmn	r2, #1
   28e74:	beq	28f24 <__assert_fail@plt+0x17380>
   28e78:	ldr	r3, [sp, #16]
   28e7c:	ldr	r2, [pc, #2856]	; 299ac <__assert_fail@plt+0x17e08>
   28e80:	cmp	r3, r2
   28e84:	movle	r3, #0
   28e88:	movgt	r3, #1
   28e8c:	cmp	r3, #0
   28e90:	bne	28f3c <__assert_fail@plt+0x17398>
   28e94:	ldr	r2, [sp, #28]
   28e98:	mov	r1, sl
   28e9c:	ldr	r0, [sp, #20]
   28ea0:	bl	27c48 <__assert_fail@plt+0x160a4>
   28ea4:	ldr	r3, [sl, #40]	; 0x28
   28ea8:	ldr	ip, [sp, #32]
   28eac:	cmp	ip, #0
   28eb0:	add	r0, r3, r0
   28eb4:	str	r0, [sl, #40]	; 0x28
   28eb8:	beq	28de4 <__assert_fail@plt+0x17240>
   28ebc:	ldr	r3, [sp, #16]
   28ec0:	orrs	r3, r6, r3
   28ec4:	bne	28afc <__assert_fail@plt+0x16f58>
   28ec8:	mov	r2, fp
   28ecc:	ldr	r1, [pc, #2764]	; 299a0 <__assert_fail@plt+0x17dfc>
   28ed0:	mov	r0, ip
   28ed4:	bl	1e9dc <__assert_fail@plt+0xce38>
   28ed8:	ldr	r3, [sp, #204]	; 0xcc
   28edc:	ldr	r3, [r3]
   28ee0:	b	28dec <__assert_fail@plt+0x17248>
   28ee4:	ldr	r3, [sp, #20]
   28ee8:	ldrb	r3, [r3]
   28eec:	cmp	r3, #44	; 0x2c
   28ef0:	beq	29e44 <__assert_fail@plt+0x182a0>
   28ef4:	ldr	r3, [sp, #28]
   28ef8:	tst	r3, #2097152	; 0x200000
   28efc:	bne	28dc0 <__assert_fail@plt+0x1721c>
   28f00:	ldr	r2, [sp, #204]	; 0xcc
   28f04:	mov	r3, #10
   28f08:	str	r3, [r2]
   28f0c:	b	28d54 <__assert_fail@plt+0x171b0>
   28f10:	ldr	r9, [sp, #36]	; 0x24
   28f14:	str	r9, [sp, #32]
   28f18:	b	28c68 <__assert_fail@plt+0x170c4>
   28f1c:	ldr	r6, [sp, #16]
   28f20:	b	28e78 <__assert_fail@plt+0x172d4>
   28f24:	add	r3, r2, #32768	; 0x8000
   28f28:	cmp	r6, r3
   28f2c:	movle	r3, #0
   28f30:	movgt	r3, #1
   28f34:	cmp	r3, #0
   28f38:	beq	28e94 <__assert_fail@plt+0x172f0>
   28f3c:	ldr	r2, [sp, #204]	; 0xcc
   28f40:	mov	r3, #15
   28f44:	str	r3, [r2]
   28f48:	b	28d54 <__assert_fail@plt+0x171b0>
   28f4c:	ldr	sl, [sp, #40]	; 0x28
   28f50:	str	r0, [sp, #36]	; 0x24
   28f54:	ldr	r3, [sp, #16]
   28f58:	cmp	r6, r3
   28f5c:	beq	28f10 <__assert_fail@plt+0x1736c>
   28f60:	mov	r0, r5
   28f64:	ldr	r1, [sp, #24]
   28f68:	bl	20810 <__assert_fail@plt+0xec6c>
   28f6c:	subs	r5, r0, #0
   28f70:	bne	28b0c <__assert_fail@plt+0x16f68>
   28f74:	b	28d48 <__assert_fail@plt+0x171a4>
   28f78:	ldr	r2, [sp, #20]
   28f7c:	ldr	r4, [sp, #24]
   28f80:	mov	r3, #0
   28f84:	str	r2, [sp]
   28f88:	add	r1, r4, #64	; 0x40
   28f8c:	mov	r2, r3
   28f90:	add	r0, r4, #56	; 0x38
   28f94:	bl	2074c <__assert_fail@plt+0xeba8>
   28f98:	subs	r3, r0, #0
   28f9c:	str	r3, [sp, #32]
   28fa0:	beq	29524 <__assert_fail@plt+0x17980>
   28fa4:	ldr	r3, [r4, #92]	; 0x5c
   28fa8:	cmp	r3, #1
   28fac:	ldrbgt	r3, [r4, #88]	; 0x58
   28fb0:	orrgt	r3, r3, #2
   28fb4:	strbgt	r3, [r4, #88]	; 0x58
   28fb8:	b	28a5c <__assert_fail@plt+0x16eb8>
   28fbc:	ldr	r5, [r4, #24]
   28fc0:	ldr	r6, [sp, #20]
   28fc4:	ldr	r7, [sp, #28]
   28fc8:	add	r3, r5, #1
   28fcc:	orr	r2, r7, #8388608	; 0x800000
   28fd0:	str	r3, [r4, #24]
   28fd4:	mov	r1, r0
   28fd8:	mov	r0, r6
   28fdc:	bl	27c48 <__assert_fail@plt+0x160a4>
   28fe0:	ldrb	r2, [r6, #4]
   28fe4:	ldr	r3, [sl, #40]	; 0x28
   28fe8:	cmp	r2, #9
   28fec:	add	r3, r3, r0
   28ff0:	str	r3, [sl, #40]	; 0x28
   28ff4:	beq	29594 <__assert_fail@plt+0x179f0>
   28ff8:	ldr	r3, [sp, #200]	; 0xc8
   28ffc:	ldr	r2, [sp, #204]	; 0xcc
   29000:	add	r3, r3, #1
   29004:	str	r2, [sp, #4]
   29008:	str	r3, [sp]
   2900c:	mov	r2, r6
   29010:	mov	r3, r7
   29014:	mov	r1, r4
   29018:	mov	r0, sl
   2901c:	bl	29ffc <__assert_fail@plt+0x18458>
   29020:	ldr	r2, [sp, #204]	; 0xcc
   29024:	ldr	r2, [r2]
   29028:	cmp	r2, #0
   2902c:	mov	r3, r0
   29030:	bne	289ec <__assert_fail@plt+0x16e48>
   29034:	ldr	r1, [sp, #20]
   29038:	ldrb	r1, [r1, #4]
   2903c:	cmp	r1, #9
   29040:	bne	289d0 <__assert_fail@plt+0x16e2c>
   29044:	cmp	r5, #8
   29048:	bhi	29060 <__assert_fail@plt+0x174bc>
   2904c:	ldr	r0, [sp, #24]
   29050:	mov	r1, #1
   29054:	ldr	r2, [r0, #84]	; 0x54
   29058:	orr	r2, r2, r1, lsl r5
   2905c:	str	r2, [r0, #84]	; 0x54
   29060:	add	ip, sp, #128	; 0x80
   29064:	str	ip, [sp]
   29068:	ldr	ip, [sp, #24]
   2906c:	mov	r0, #0
   29070:	str	r0, [sp, #132]	; 0x84
   29074:	mov	r2, r3
   29078:	mov	lr, #17
   2907c:	mov	r3, r0
   29080:	str	r0, [sp, #128]	; 0x80
   29084:	add	r1, ip, #64	; 0x40
   29088:	add	r0, ip, #56	; 0x38
   2908c:	strb	lr, [sp, #132]	; 0x84
   29090:	bl	2074c <__assert_fail@plt+0xeba8>
   29094:	subs	r3, r0, #0
   29098:	str	r3, [sp, #32]
   2909c:	beq	29524 <__assert_fail@plt+0x17980>
   290a0:	str	r5, [r3, #20]
   290a4:	b	28a5c <__assert_fail@plt+0x16eb8>
   290a8:	ldr	r3, [sp, #204]	; 0xcc
   290ac:	sub	r2, r2, #35	; 0x23
   290b0:	clz	r2, r2
   290b4:	lsr	r2, r2, #5
   290b8:	ldr	r1, [r0, #64]	; 0x40
   290bc:	str	r2, [sp]
   290c0:	str	r3, [sp, #4]
   290c4:	ldr	r2, [pc, #2276]	; 299b0 <__assert_fail@plt+0x17e0c>
   290c8:	ldr	r3, [pc, #2276]	; 299b4 <__assert_fail@plt+0x17e10>
   290cc:	ldr	r0, [sp, #24]
   290d0:	bl	23dfc <__assert_fail@plt+0x12258>
   290d4:	ldr	r3, [sp, #204]	; 0xcc
   290d8:	ldr	r3, [r3]
   290dc:	adds	r3, r3, #0
   290e0:	movne	r3, #1
   290e4:	cmp	r0, #0
   290e8:	movne	r3, #0
   290ec:	cmp	r3, #0
   290f0:	str	r0, [sp, #32]
   290f4:	beq	28a5c <__assert_fail@plt+0x16eb8>
   290f8:	b	289ec <__assert_fail@plt+0x16e48>
   290fc:	ldr	r2, [sp, #204]	; 0xcc
   29100:	mov	r3, #5
   29104:	str	r3, [r2]
   29108:	mov	r3, #0
   2910c:	str	r3, [sp, #32]
   29110:	b	289f4 <__assert_fail@plt+0x16e50>
   29114:	ldr	r3, [sp, #20]
   29118:	ldr	r2, [r3]
   2911c:	ldr	r3, [pc, #2196]	; 299b8 <__assert_fail@plt+0x17e14>
   29120:	and	r3, r3, r2
   29124:	cmp	r3, #0
   29128:	beq	29190 <__assert_fail@plt+0x175ec>
   2912c:	ldr	r3, [sp, #24]
   29130:	ldrb	r3, [r3, #88]	; 0x58
   29134:	ands	r4, r3, #16
   29138:	bne	29190 <__assert_fail@plt+0x175ec>
   2913c:	ldr	r0, [sp, #24]
   29140:	orr	r3, r3, #16
   29144:	ands	r2, r3, #8
   29148:	mov	r1, r3
   2914c:	strb	r3, [r0, #88]	; 0x58
   29150:	bne	29c4c <__assert_fail@plt+0x180a8>
   29154:	ldr	r3, [pc, #2144]	; 299bc <__assert_fail@plt+0x17e18>
   29158:	tst	r1, #4
   2915c:	str	r3, [r0, #100]	; 0x64
   29160:	mvn	r1, #2013265921	; 0x78000001
   29164:	mvn	r3, #-134217727	; 0xf8000001
   29168:	str	r2, [r0, #96]	; 0x60
   2916c:	str	r1, [r0, #104]	; 0x68
   29170:	str	r3, [r0, #108]	; 0x6c
   29174:	beq	29bc4 <__assert_fail@plt+0x18020>
   29178:	ldr	r3, [sp, #20]
   2917c:	str	r2, [r0, #112]	; 0x70
   29180:	str	r2, [r0, #116]	; 0x74
   29184:	str	r2, [r0, #120]	; 0x78
   29188:	str	r2, [r0, #124]	; 0x7c
   2918c:	ldr	r2, [r3]
   29190:	sub	r3, r2, #256	; 0x100
   29194:	bics	r3, r3, #256	; 0x100
   29198:	bne	29784 <__assert_fail@plt+0x17be0>
   2919c:	cmp	r2, #256	; 0x100
   291a0:	beq	2969c <__assert_fail@plt+0x17af8>
   291a4:	ldr	r1, [sp, #24]
   291a8:	ldr	r7, [sp, #20]
   291ac:	mov	r2, #5
   291b0:	add	r5, r1, #56	; 0x38
   291b4:	add	r6, r1, #64	; 0x40
   291b8:	str	r7, [sp]
   291bc:	mov	r1, r6
   291c0:	str	r2, [r7]
   291c4:	mov	r0, r5
   291c8:	mov	r2, r3
   291cc:	bl	2074c <__assert_fail@plt+0xeba8>
   291d0:	mov	r3, #10
   291d4:	str	r3, [r7]
   291d8:	mov	r4, r0
   291dc:	ldr	r2, [sp, #20]
   291e0:	mov	r3, #0
   291e4:	str	r2, [sp]
   291e8:	mov	r1, r6
   291ec:	mov	r2, r3
   291f0:	mov	r0, r5
   291f4:	bl	2074c <__assert_fail@plt+0xeba8>
   291f8:	add	r2, sp, #128	; 0x80
   291fc:	mov	ip, #0
   29200:	str	r2, [sp]
   29204:	mov	lr, #10
   29208:	mov	r1, r6
   2920c:	mov	r2, r4
   29210:	str	ip, [sp, #132]	; 0x84
   29214:	str	ip, [sp, #128]	; 0x80
   29218:	strb	lr, [sp, #132]	; 0x84
   2921c:	mov	r7, r0
   29220:	mov	r3, r7
   29224:	mov	r0, r5
   29228:	bl	2074c <__assert_fail@plt+0xeba8>
   2922c:	cmp	r7, #0
   29230:	cmpne	r4, #0
   29234:	moveq	r3, #1
   29238:	movne	r3, #0
   2923c:	cmp	r0, #0
   29240:	orreq	r3, r3, #1
   29244:	cmp	r3, #0
   29248:	str	r0, [sp, #32]
   2924c:	bne	29524 <__assert_fail@plt+0x17980>
   29250:	ldr	r2, [sp, #28]
   29254:	ldr	r0, [sp, #20]
   29258:	mov	r1, sl
   2925c:	bl	27c48 <__assert_fail@plt+0x160a4>
   29260:	ldr	r3, [sl, #40]	; 0x28
   29264:	add	r3, r3, r0
   29268:	str	r3, [sl, #40]	; 0x28
   2926c:	b	289f4 <__assert_fail@plt+0x16e50>
   29270:	mov	r3, #0
   29274:	mov	r1, #1
   29278:	mov	r0, #32
   2927c:	str	r3, [sp, #68]	; 0x44
   29280:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   29284:	mov	r1, #1
   29288:	mov	r9, r0
   2928c:	mov	r0, #40	; 0x28
   29290:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   29294:	cmp	r0, #0
   29298:	cmpne	r9, #0
   2929c:	moveq	r3, #1
   292a0:	movne	r3, #0
   292a4:	mov	r6, r0
   292a8:	str	r3, [sp, #36]	; 0x24
   292ac:	beq	29944 <__assert_fail@plt+0x17da0>
   292b0:	ldr	r4, [sp, #20]
   292b4:	ldr	r2, [sp, #28]
   292b8:	mov	r1, sl
   292bc:	mov	r0, r4
   292c0:	bl	1e5a8 <__assert_fail@plt+0xca04>
   292c4:	ldrb	r3, [r4, #4]
   292c8:	cmp	r3, #2
   292cc:	mov	fp, r0
   292d0:	beq	29964 <__assert_fail@plt+0x17dc0>
   292d4:	cmp	r3, #25
   292d8:	beq	296d8 <__assert_fail@plt+0x17b34>
   292dc:	ldr	r2, [sp, #36]	; 0x24
   292e0:	str	r2, [sp, #40]	; 0x28
   292e4:	cmp	r3, #21
   292e8:	ldr	r1, [sp, #28]
   292ec:	ldreq	r2, [sp, #20]
   292f0:	moveq	r3, #1
   292f4:	ldr	r4, [sp, #20]
   292f8:	strbeq	r3, [r2, #4]
   292fc:	mov	r3, #0
   29300:	mov	r2, r3
   29304:	str	r3, [sp, #32]
   29308:	lsr	r3, r1, #16
   2930c:	and	r3, r3, #1
   29310:	str	r2, [sp, #16]
   29314:	str	r3, [sp, #52]	; 0x34
   29318:	add	r2, r6, #36	; 0x24
   2931c:	mov	r8, r9
   29320:	mov	r3, #1
   29324:	mov	r9, r1
   29328:	str	r2, [sp, #44]	; 0x2c
   2932c:	add	r2, r6, #12
   29330:	str	r2, [sp, #48]	; 0x30
   29334:	add	ip, sp, #96	; 0x60
   29338:	str	r3, [sp, #4]
   2933c:	str	ip, [sp, #76]	; 0x4c
   29340:	str	r9, [sp]
   29344:	mov	ip, #3
   29348:	mov	r3, fp
   2934c:	mov	r2, r4
   29350:	mov	r1, sl
   29354:	add	r0, sp, #72	; 0x48
   29358:	str	ip, [sp, #72]	; 0x48
   2935c:	bl	28670 <__assert_fail@plt+0x16acc>
   29360:	cmp	r0, #0
   29364:	bne	297b4 <__assert_fail@plt+0x17c10>
   29368:	mov	r2, r9
   2936c:	mov	r1, sl
   29370:	mov	r0, r4
   29374:	bl	1e5a8 <__assert_fail@plt+0xca04>
   29378:	ldr	r3, [sp, #72]	; 0x48
   2937c:	sub	r2, r3, #2
   29380:	bics	r2, r2, #2
   29384:	mov	fp, r0
   29388:	beq	293a0 <__assert_fail@plt+0x177fc>
   2938c:	ldrb	r2, [r4, #4]
   29390:	cmp	r2, #2
   29394:	beq	297cc <__assert_fail@plt+0x17c28>
   29398:	cmp	r2, #22
   2939c:	beq	297e0 <__assert_fail@plt+0x17c3c>
   293a0:	cmp	r3, #4
   293a4:	ldrls	pc, [pc, r3, lsl #2]
   293a8:	b	297cc <__assert_fail@plt+0x17c28>
   293ac:	andeq	r9, r2, ip, ror r6
   293b0:	andeq	r9, r2, r4, asr r6
   293b4:	andeq	r9, r2, r4, lsr r6
   293b8:	andeq	r9, r2, ip, ror #11
   293bc:	muleq	r2, ip, r5
   293c0:	ldr	r3, [sp, #20]
   293c4:	mov	r2, #1
   293c8:	ldr	r1, [r3]
   293cc:	ldr	r3, [sp, #24]
   293d0:	lsl	r2, r2, r1
   293d4:	ldr	r3, [r3, #84]	; 0x54
   293d8:	ands	r3, r2, r3
   293dc:	beq	29930 <__assert_fail@plt+0x17d8c>
   293e0:	ldr	r4, [sp, #24]
   293e4:	ldr	r0, [sp, #20]
   293e8:	mov	r3, #0
   293ec:	ldr	r1, [r4, #80]	; 0x50
   293f0:	orr	r2, r1, r2
   293f4:	str	r2, [r4, #80]	; 0x50
   293f8:	add	r1, r4, #64	; 0x40
   293fc:	mov	r2, r3
   29400:	str	r0, [sp]
   29404:	add	r0, r4, #56	; 0x38
   29408:	bl	2074c <__assert_fail@plt+0xeba8>
   2940c:	subs	r3, r0, #0
   29410:	str	r3, [sp, #32]
   29414:	beq	29524 <__assert_fail@plt+0x17980>
   29418:	ldrb	r2, [r4, #88]	; 0x58
   2941c:	ldr	r3, [r4, #76]	; 0x4c
   29420:	orr	r2, r2, #2
   29424:	add	r3, r3, #1
   29428:	strb	r2, [r4, #88]	; 0x58
   2942c:	str	r3, [r4, #76]	; 0x4c
   29430:	b	28a5c <__assert_fail@plt+0x16eb8>
   29434:	ldr	r3, [sp, #24]
   29438:	ldr	r2, [sp, #20]
   2943c:	add	r8, r3, #56	; 0x38
   29440:	add	r7, r3, #64	; 0x40
   29444:	mov	r3, #0
   29448:	str	r2, [sp]
   2944c:	mov	r0, r8
   29450:	mov	r2, r3
   29454:	mov	r1, r7
   29458:	bl	2074c <__assert_fail@plt+0xeba8>
   2945c:	subs	r3, r0, #0
   29460:	str	r3, [sp, #32]
   29464:	beq	29524 <__assert_fail@plt+0x17980>
   29468:	ldr	r3, [sp, #24]
   2946c:	ldr	r3, [r3, #92]	; 0x5c
   29470:	cmp	r3, #1
   29474:	ble	28a5c <__assert_fail@plt+0x16eb8>
   29478:	ldr	r6, [sp, #32]
   2947c:	mov	r5, #0
   29480:	add	r4, sp, #128	; 0x80
   29484:	mov	r9, #16
   29488:	ldr	r3, [sl, #40]	; 0x28
   2948c:	ldr	r2, [sl, #56]	; 0x38
   29490:	cmp	r2, r3
   29494:	ble	297c4 <__assert_fail@plt+0x17c20>
   29498:	ldr	r2, [sl, #28]
   2949c:	cmp	r3, r2
   294a0:	beq	297c4 <__assert_fail@plt+0x17c20>
   294a4:	ldr	r2, [sl, #8]
   294a8:	ldr	r3, [r2, r3, lsl #2]
   294ac:	cmn	r3, #1
   294b0:	bne	297c4 <__assert_fail@plt+0x17c20>
   294b4:	ldr	fp, [sp, #20]
   294b8:	ldr	r2, [sp, #28]
   294bc:	mov	r1, sl
   294c0:	mov	r0, fp
   294c4:	bl	27c48 <__assert_fail@plt+0x160a4>
   294c8:	ldr	ip, [sl, #40]	; 0x28
   294cc:	mov	r3, r5
   294d0:	str	fp, [sp]
   294d4:	mov	r2, #0
   294d8:	mov	r1, r7
   294dc:	add	r0, ip, r0
   294e0:	str	r0, [sl, #40]	; 0x28
   294e4:	mov	r0, r8
   294e8:	bl	2074c <__assert_fail@plt+0xeba8>
   294ec:	str	r4, [sp]
   294f0:	mov	r2, r6
   294f4:	str	r5, [r4, #4]
   294f8:	mov	r1, r7
   294fc:	str	r5, [r4]
   29500:	strb	r9, [sp, #132]	; 0x84
   29504:	mov	fp, r0
   29508:	mov	r3, r0
   2950c:	mov	r0, r8
   29510:	bl	2074c <__assert_fail@plt+0xeba8>
   29514:	cmp	r0, #0
   29518:	cmpne	fp, #0
   2951c:	mov	r6, r0
   29520:	bne	29488 <__assert_fail@plt+0x178e4>
   29524:	ldr	r2, [sp, #204]	; 0xcc
   29528:	mov	r3, #12
   2952c:	str	r3, [r2]
   29530:	mov	r3, #0
   29534:	str	r3, [sp, #32]
   29538:	b	289f4 <__assert_fail@plt+0x16e50>
   2953c:	ldr	r3, [sp, #204]	; 0xcc
   29540:	sub	r2, r2, #33	; 0x21
   29544:	clz	r2, r2
   29548:	lsr	r2, r2, #5
   2954c:	ldr	r1, [r0, #64]	; 0x40
   29550:	str	r2, [sp]
   29554:	str	r3, [sp, #4]
   29558:	ldr	r2, [pc, #1120]	; 299c0 <__assert_fail@plt+0x17e1c>
   2955c:	ldr	r3, [pc, #1120]	; 299c4 <__assert_fail@plt+0x17e20>
   29560:	b	290cc <__assert_fail@plt+0x17528>
   29564:	ldr	r3, [sp, #32]
   29568:	str	r3, [sp, #36]	; 0x24
   2956c:	mov	r5, r3
   29570:	b	28f54 <__assert_fail@plt+0x173b0>
   29574:	ldr	r3, [sp, #28]
   29578:	ands	r2, r3, #131072	; 0x20000
   2957c:	bne	28a28 <__assert_fail@plt+0x16e84>
   29580:	str	r2, [sp, #32]
   29584:	ldr	r2, [sp, #204]	; 0xcc
   29588:	mov	r3, #16
   2958c:	str	r3, [r2]
   29590:	b	289f4 <__assert_fail@plt+0x16e50>
   29594:	mov	r3, #0
   29598:	b	29044 <__assert_fail@plt+0x174a0>
   2959c:	ldr	r3, [sp, #76]	; 0x4c
   295a0:	add	r2, sp, #68	; 0x44
   295a4:	ldr	r0, [sl, #64]	; 0x40
   295a8:	mov	r1, r8
   295ac:	stm	sp, {r2, r3}
   295b0:	str	r9, [sp, #8]
   295b4:	ldr	r3, [sp, #44]	; 0x2c
   295b8:	ldr	r2, [sp, #48]	; 0x30
   295bc:	bl	2350c <__assert_fail@plt+0x11968>
   295c0:	ldr	r3, [sp, #204]	; 0xcc
   295c4:	cmp	r0, #0
   295c8:	str	r0, [r3]
   295cc:	bne	29608 <__assert_fail@plt+0x17a64>
   295d0:	ldrb	r3, [r4, #4]
   295d4:	cmp	r3, #2
   295d8:	beq	297cc <__assert_fail@plt+0x17c28>
   295dc:	cmp	r3, #21
   295e0:	beq	29c54 <__assert_fail@plt+0x180b0>
   295e4:	ldr	r3, [sp, #36]	; 0x24
   295e8:	b	29334 <__assert_fail@plt+0x17790>
   295ec:	ldr	r1, [sp, #76]	; 0x4c
   295f0:	mov	r0, r8
   295f4:	bl	234cc <__assert_fail@plt+0x11928>
   295f8:	ldr	r3, [sp, #204]	; 0xcc
   295fc:	cmp	r0, #0
   29600:	str	r0, [r3]
   29604:	beq	295d0 <__assert_fail@plt+0x17a2c>
   29608:	mov	r9, r8
   2960c:	mov	r0, r9
   29610:	bl	17274 <__assert_fail@plt+0x56d0>
   29614:	mov	r0, r6
   29618:	bl	1f564 <__assert_fail@plt+0xd9c0>
   2961c:	ldr	r3, [sp, #204]	; 0xcc
   29620:	ldr	r3, [r3]
   29624:	cmp	r3, #0
   29628:	bne	289ec <__assert_fail@plt+0x16e48>
   2962c:	str	r3, [sp, #32]
   29630:	b	28a5c <__assert_fail@plt+0x16eb8>
   29634:	ldr	r1, [sp, #76]	; 0x4c
   29638:	mov	r0, r8
   2963c:	bl	234cc <__assert_fail@plt+0x11928>
   29640:	ldr	r3, [sp, #204]	; 0xcc
   29644:	cmp	r0, #0
   29648:	str	r0, [r3]
   2964c:	beq	295d0 <__assert_fail@plt+0x17a2c>
   29650:	b	29608 <__assert_fail@plt+0x17a64>
   29654:	ldr	r3, [r6, #20]
   29658:	ldr	r2, [sp, #16]
   2965c:	cmp	r3, r2
   29660:	beq	29a48 <__assert_fail@plt+0x17ea4>
   29664:	ldr	r0, [r6]
   29668:	ldr	r2, [sp, #76]	; 0x4c
   2966c:	add	r1, r3, #1
   29670:	str	r1, [r6, #20]
   29674:	str	r2, [r0, r3, lsl #2]
   29678:	b	295d0 <__assert_fail@plt+0x17a2c>
   2967c:	ldrb	r3, [sp, #76]	; 0x4c
   29680:	mov	r0, #1
   29684:	and	r1, r3, #31
   29688:	asr	r3, r3, #5
   2968c:	ldr	r2, [r8, r3, lsl #2]
   29690:	orr	r2, r2, r0, lsl r1
   29694:	str	r2, [r8, r3, lsl #2]
   29698:	b	295d0 <__assert_fail@plt+0x17a2c>
   2969c:	ldr	r1, [sp, #24]
   296a0:	ldr	r7, [sp, #20]
   296a4:	mov	r2, #6
   296a8:	add	r5, r1, #56	; 0x38
   296ac:	add	r6, r1, #64	; 0x40
   296b0:	str	r7, [sp]
   296b4:	mov	r1, r6
   296b8:	str	r2, [r7]
   296bc:	mov	r0, r5
   296c0:	mov	r2, r3
   296c4:	bl	2074c <__assert_fail@plt+0xeba8>
   296c8:	mov	r3, #9
   296cc:	str	r3, [r7]
   296d0:	mov	r4, r0
   296d4:	b	291dc <__assert_fail@plt+0x17638>
   296d8:	ldrb	r3, [r6, #16]
   296dc:	ldr	r2, [sp, #28]
   296e0:	ldr	r4, [sp, #20]
   296e4:	tst	r2, #256	; 0x100
   296e8:	orr	r3, r3, #1
   296ec:	strb	r3, [r6, #16]
   296f0:	ldrne	r3, [r9]
   296f4:	ldr	r2, [sp, #28]
   296f8:	orrne	r3, r3, #1024	; 0x400
   296fc:	strne	r3, [r9]
   29700:	ldr	r3, [sl, #40]	; 0x28
   29704:	mov	r1, sl
   29708:	add	r3, r3, r0
   2970c:	str	r3, [sl, #40]	; 0x28
   29710:	mov	r0, r4
   29714:	bl	1e5a8 <__assert_fail@plt+0xca04>
   29718:	ldrb	r3, [r4, #4]
   2971c:	cmp	r3, #2
   29720:	mov	fp, r0
   29724:	beq	29964 <__assert_fail@plt+0x17dc0>
   29728:	mov	r2, #1
   2972c:	str	r2, [sp, #40]	; 0x28
   29730:	b	292e4 <__assert_fail@plt+0x17740>
   29734:	ldr	r5, [sp, #20]
   29738:	mov	r2, r3
   2973c:	mov	r1, sl
   29740:	mov	r0, r5
   29744:	mov	r6, r3
   29748:	bl	27c48 <__assert_fail@plt+0x160a4>
   2974c:	ldr	r3, [sp, #204]	; 0xcc
   29750:	ldr	ip, [sl, #40]	; 0x28
   29754:	str	r3, [sp, #4]
   29758:	ldr	r3, [sp, #200]	; 0xc8
   2975c:	mov	r2, r5
   29760:	str	r3, [sp]
   29764:	mov	r1, r4
   29768:	mov	r3, r6
   2976c:	add	r0, ip, r0
   29770:	str	r0, [sl, #40]	; 0x28
   29774:	mov	r0, sl
   29778:	bl	2890c <__assert_fail@plt+0x16d68>
   2977c:	str	r0, [sp, #32]
   29780:	b	289f4 <__assert_fail@plt+0x16e50>
   29784:	ldr	r2, [sp, #20]
   29788:	ldr	r0, [sp, #24]
   2978c:	mov	r3, #0
   29790:	str	r2, [sp]
   29794:	add	r1, r0, #64	; 0x40
   29798:	mov	r2, r3
   2979c:	add	r0, r0, #56	; 0x38
   297a0:	bl	2074c <__assert_fail@plt+0xeba8>
   297a4:	subs	r3, r0, #0
   297a8:	str	r3, [sp, #32]
   297ac:	bne	29250 <__assert_fail@plt+0x176ac>
   297b0:	b	29524 <__assert_fail@plt+0x17980>
   297b4:	ldr	r3, [sp, #204]	; 0xcc
   297b8:	mov	r9, r8
   297bc:	str	r0, [r3]
   297c0:	b	2960c <__assert_fail@plt+0x17a68>
   297c4:	str	r6, [sp, #32]
   297c8:	b	28a5c <__assert_fail@plt+0x16eb8>
   297cc:	ldr	r2, [sp, #204]	; 0xcc
   297d0:	mov	r3, #7
   297d4:	mov	r9, r8
   297d8:	str	r3, [r2]
   297dc:	b	2960c <__assert_fail@plt+0x17a68>
   297e0:	ldr	r3, [sl, #40]	; 0x28
   297e4:	mov	r2, r9
   297e8:	add	r3, r3, r0
   297ec:	str	r3, [sl, #40]	; 0x28
   297f0:	add	r0, sp, #88	; 0x58
   297f4:	mov	r1, sl
   297f8:	bl	1e5a8 <__assert_fail@plt+0xca04>
   297fc:	ldrb	r2, [sp, #92]	; 0x5c
   29800:	cmp	r2, #2
   29804:	mov	r3, r0
   29808:	beq	297cc <__assert_fail@plt+0x17c28>
   2980c:	cmp	r2, #21
   29810:	beq	29a78 <__assert_fail@plt+0x17ed4>
   29814:	add	r0, sp, #160	; 0xa0
   29818:	mov	ip, #1
   2981c:	mov	r1, #3
   29820:	str	r9, [sp]
   29824:	add	r2, sp, #88	; 0x58
   29828:	str	r1, [r0, #-80]!	; 0xffffffb0
   2982c:	str	ip, [sp, #4]
   29830:	mov	r1, sl
   29834:	add	ip, sp, #128	; 0x80
   29838:	str	ip, [sp, #84]	; 0x54
   2983c:	bl	28670 <__assert_fail@plt+0x16acc>
   29840:	cmp	r0, #0
   29844:	bne	297b4 <__assert_fail@plt+0x17c10>
   29848:	mov	r2, r9
   2984c:	mov	r1, sl
   29850:	mov	r0, r4
   29854:	bl	1e5a8 <__assert_fail@plt+0xca04>
   29858:	ldr	r2, [sp, #72]	; 0x48
   2985c:	sub	r3, r2, #2
   29860:	bics	r3, r3, #2
   29864:	mov	fp, r0
   29868:	beq	2991c <__assert_fail@plt+0x17d78>
   2986c:	ldr	r3, [sp, #80]	; 0x50
   29870:	cmp	r3, #2
   29874:	beq	2991c <__assert_fail@plt+0x17d78>
   29878:	cmp	r3, #4
   2987c:	beq	29974 <__assert_fail@plt+0x17dd0>
   29880:	cmp	r2, #3
   29884:	beq	299c8 <__assert_fail@plt+0x17e24>
   29888:	cmp	r3, #3
   2988c:	beq	29a10 <__assert_fail@plt+0x17e6c>
   29890:	cmp	r2, #0
   29894:	bne	299fc <__assert_fail@plt+0x17e58>
   29898:	ldrb	r5, [sp, #76]	; 0x4c
   2989c:	cmp	r3, #0
   298a0:	bne	29e5c <__assert_fail@plt+0x182b8>
   298a4:	ldrb	r7, [sp, #84]	; 0x54
   298a8:	cmp	r2, #0
   298ac:	cmpne	r2, #3
   298b0:	bne	29e54 <__assert_fail@plt+0x182b0>
   298b4:	ldr	r2, [sp, #24]
   298b8:	ldr	r2, [r2, #92]	; 0x5c
   298bc:	cmp	r2, #1
   298c0:	ble	29a94 <__assert_fail@plt+0x17ef0>
   298c4:	mov	r0, r5
   298c8:	bl	119f4 <btowc@plt>
   298cc:	ldr	r3, [sp, #80]	; 0x50
   298d0:	mov	r5, r0
   298d4:	cmp	r3, #3
   298d8:	cmpne	r3, #0
   298dc:	bne	29e4c <__assert_fail@plt+0x182a8>
   298e0:	ldr	r3, [sp, #24]
   298e4:	ldr	r3, [r3, #92]	; 0x5c
   298e8:	cmp	r3, #1
   298ec:	ble	298fc <__assert_fail@plt+0x17d58>
   298f0:	mov	r0, r7
   298f4:	bl	119f4 <btowc@plt>
   298f8:	mov	r7, r0
   298fc:	cmn	r5, #1
   29900:	cmnne	r7, #1
   29904:	bne	29aa0 <__assert_fail@plt+0x17efc>
   29908:	mov	r9, r8
   2990c:	mov	r3, #3
   29910:	ldr	r2, [sp, #204]	; 0xcc
   29914:	str	r3, [r2]
   29918:	b	2960c <__assert_fail@plt+0x17a68>
   2991c:	mov	r9, r8
   29920:	mov	r8, #11
   29924:	ldr	r3, [sp, #204]	; 0xcc
   29928:	str	r8, [r3]
   2992c:	b	2960c <__assert_fail@plt+0x17a68>
   29930:	str	r3, [sp, #32]
   29934:	ldr	r3, [sp, #204]	; 0xcc
   29938:	mov	r2, #6
   2993c:	str	r2, [r3]
   29940:	b	289f4 <__assert_fail@plt+0x16e50>
   29944:	mov	r0, r9
   29948:	bl	17274 <__assert_fail@plt+0x56d0>
   2994c:	mov	r0, r6
   29950:	bl	17274 <__assert_fail@plt+0x56d0>
   29954:	ldr	r2, [sp, #204]	; 0xcc
   29958:	mov	r3, #12
   2995c:	str	r3, [r2]
   29960:	b	289ec <__assert_fail@plt+0x16e48>
   29964:	ldr	r2, [sp, #204]	; 0xcc
   29968:	mov	r3, #2
   2996c:	str	r3, [r2]
   29970:	b	2960c <__assert_fail@plt+0x17a68>
   29974:	mov	r9, r8
   29978:	mov	r3, #11
   2997c:	b	29910 <__assert_fail@plt+0x17d6c>
   29980:	ldr	r3, [sp, #20]
   29984:	ldrb	r3, [r3, #4]
   29988:	cmp	r3, #2
   2998c:	bne	28f00 <__assert_fail@plt+0x1735c>
   29990:	ldr	r2, [sp, #204]	; 0xcc
   29994:	mov	r3, #9
   29998:	str	r3, [r2]
   2999c:	b	28d54 <__assert_fail@plt+0x171b0>
   299a0:	andeq	pc, r1, r8, asr #11
   299a4:	addeq	r0, ip, r0, lsl #16
   299a8:	andeq	lr, r1, r8, lsr #14
   299ac:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   299b0:	muleq	r3, ip, r0
   299b4:	andeq	r0, r3, r4, lsr #23
   299b8:	andeq	r0, r0, pc, lsl #6
   299bc:	mvnseq	r0, #0
   299c0:	andeq	r1, r3, ip, lsl #1
   299c4:	ldrdeq	r1, [r3], -r4
   299c8:	ldr	r5, [sp, #76]	; 0x4c
   299cc:	str	r2, [sp, #60]	; 0x3c
   299d0:	mov	r0, r5
   299d4:	str	r3, [sp, #56]	; 0x38
   299d8:	bl	11988 <strlen@plt>
   299dc:	ldr	r3, [sp, #56]	; 0x38
   299e0:	ldr	r2, [sp, #60]	; 0x3c
   299e4:	cmp	r0, #1
   299e8:	bhi	29a3c <__assert_fail@plt+0x17e98>
   299ec:	cmp	r3, #3
   299f0:	beq	29a10 <__assert_fail@plt+0x17e6c>
   299f4:	ldrb	r5, [r5]
   299f8:	b	2989c <__assert_fail@plt+0x17cf8>
   299fc:	cmp	r2, #3
   29a00:	movne	r5, #0
   29a04:	bne	2989c <__assert_fail@plt+0x17cf8>
   29a08:	ldr	r5, [sp, #76]	; 0x4c
   29a0c:	b	299f4 <__assert_fail@plt+0x17e50>
   29a10:	ldr	r0, [sp, #84]	; 0x54
   29a14:	str	r2, [sp, #60]	; 0x3c
   29a18:	str	r3, [sp, #56]	; 0x38
   29a1c:	bl	11988 <strlen@plt>
   29a20:	ldr	r3, [sp, #56]	; 0x38
   29a24:	ldr	r2, [sp, #60]	; 0x3c
   29a28:	cmp	r0, #1
   29a2c:	bls	29890 <__assert_fail@plt+0x17cec>
   29a30:	mov	r9, r8
   29a34:	mov	r8, #3
   29a38:	b	29924 <__assert_fail@plt+0x17d80>
   29a3c:	mov	r9, r8
   29a40:	mov	r8, r2
   29a44:	b	29924 <__assert_fail@plt+0x17d80>
   29a48:	ldr	r3, [sp, #16]
   29a4c:	ldr	r0, [r6]
   29a50:	lsl	r3, r3, #1
   29a54:	add	r3, r3, #1
   29a58:	str	r3, [sp, #16]
   29a5c:	lsl	r1, r3, #2
   29a60:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   29a64:	cmp	r0, #0
   29a68:	beq	29b44 <__assert_fail@plt+0x17fa0>
   29a6c:	ldr	r3, [r6, #20]
   29a70:	str	r0, [r6]
   29a74:	b	29668 <__assert_fail@plt+0x17ac4>
   29a78:	ldr	r3, [sl, #40]	; 0x28
   29a7c:	mov	r2, #1
   29a80:	sub	r3, r3, fp
   29a84:	str	r3, [sl, #40]	; 0x28
   29a88:	strb	r2, [r4, #4]
   29a8c:	ldr	r3, [sp, #72]	; 0x48
   29a90:	b	293a0 <__assert_fail@plt+0x177fc>
   29a94:	cmp	r3, #0
   29a98:	cmpne	r3, #3
   29a9c:	bne	29e4c <__assert_fail@plt+0x182a8>
   29aa0:	ldr	r3, [sp, #52]	; 0x34
   29aa4:	cmp	r7, r5
   29aa8:	movcs	r3, #0
   29aac:	andcc	r3, r3, #1
   29ab0:	cmp	r3, #0
   29ab4:	bne	29974 <__assert_fail@plt+0x17dd0>
   29ab8:	ldr	r3, [sp, #24]
   29abc:	ldr	r3, [r3, #92]	; 0x5c
   29ac0:	cmp	r3, #1
   29ac4:	ble	29af4 <__assert_fail@plt+0x17f50>
   29ac8:	ldr	r2, [r6, #32]
   29acc:	ldr	r3, [sp, #32]
   29ad0:	cmp	r2, r3
   29ad4:	beq	29b50 <__assert_fail@plt+0x17fac>
   29ad8:	ldr	r3, [r6, #4]
   29adc:	ldr	r0, [r6, #8]
   29ae0:	str	r5, [r3, r2, lsl #2]
   29ae4:	ldr	r3, [r6, #32]
   29ae8:	add	r2, r3, #1
   29aec:	str	r2, [r6, #32]
   29af0:	str	r7, [r0, r3, lsl #2]
   29af4:	mov	r3, #0
   29af8:	mov	ip, #1
   29afc:	cmp	r5, r3
   29b00:	movhi	r2, #0
   29b04:	movls	r2, #1
   29b08:	cmp	r7, r3
   29b0c:	movcc	r2, #0
   29b10:	cmp	r2, #0
   29b14:	asrne	r0, r3, #5
   29b18:	andne	r1, r3, #31
   29b1c:	ldrne	r2, [r8, r0, lsl #2]
   29b20:	add	r3, r3, #1
   29b24:	orrne	r2, r2, ip, lsl r1
   29b28:	strne	r2, [r8, r0, lsl #2]
   29b2c:	cmp	r3, #256	; 0x100
   29b30:	bne	29afc <__assert_fail@plt+0x17f58>
   29b34:	ldr	r2, [sp, #204]	; 0xcc
   29b38:	mov	r3, #0
   29b3c:	str	r3, [r2]
   29b40:	b	295d0 <__assert_fail@plt+0x17a2c>
   29b44:	mov	r9, r8
   29b48:	mov	r3, #12
   29b4c:	b	29910 <__assert_fail@plt+0x17d6c>
   29b50:	ldr	r3, [sp, #32]
   29b54:	ldr	r0, [r6, #4]
   29b58:	lsl	r3, r3, #1
   29b5c:	add	r3, r3, #1
   29b60:	str	r3, [sp, #32]
   29b64:	lsl	r2, r3, #2
   29b68:	mov	r1, r2
   29b6c:	str	r2, [sp, #60]	; 0x3c
   29b70:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   29b74:	ldr	r2, [sp, #60]	; 0x3c
   29b78:	mov	r1, r2
   29b7c:	str	r0, [sp, #56]	; 0x38
   29b80:	ldr	r0, [r6, #8]
   29b84:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   29b88:	ldr	r3, [sp, #56]	; 0x38
   29b8c:	cmp	r0, #0
   29b90:	cmpne	r3, #0
   29b94:	ldrne	r2, [r6, #32]
   29b98:	strne	r3, [r6, #4]
   29b9c:	strne	r0, [r6, #8]
   29ba0:	bne	29ae0 <__assert_fail@plt+0x17f3c>
   29ba4:	mov	r9, r8
   29ba8:	mov	r8, r0
   29bac:	mov	r0, r3
   29bb0:	bl	17274 <__assert_fail@plt+0x56d0>
   29bb4:	mov	r0, r8
   29bb8:	bl	17274 <__assert_fail@plt+0x56d0>
   29bbc:	mov	r3, #12
   29bc0:	b	29910 <__assert_fail@plt+0x17d6c>
   29bc4:	mov	r4, #128	; 0x80
   29bc8:	mov	r5, #4
   29bcc:	bl	11964 <__ctype_b_loc@plt>
   29bd0:	sub	r3, r4, #-2147483647	; 0x80000001
   29bd4:	mov	lr, #1
   29bd8:	add	ip, r5, #24
   29bdc:	ldr	r2, [sp, #24]
   29be0:	add	ip, r2, ip, lsl #2
   29be4:	ldr	r6, [r0]
   29be8:	add	r6, r6, r3, lsl lr
   29bec:	mov	r0, r6
   29bf0:	mov	r1, #0
   29bf4:	ldrh	r2, [r0, #2]!
   29bf8:	add	r3, r4, r1
   29bfc:	lsr	r2, r2, #3
   29c00:	cmp	r3, #95	; 0x5f
   29c04:	movne	r3, r2
   29c08:	orreq	r3, r2, #1
   29c0c:	tst	r3, #1
   29c10:	ldrne	r3, [ip]
   29c14:	orrne	r3, r3, lr, lsl r1
   29c18:	add	r1, r1, #1
   29c1c:	strne	r3, [ip]
   29c20:	cmp	r1, #32
   29c24:	bne	29bf4 <__assert_fail@plt+0x18050>
   29c28:	add	r5, r5, #1
   29c2c:	cmp	r5, #8
   29c30:	add	r4, r4, #32
   29c34:	add	r6, r6, #64	; 0x40
   29c38:	add	ip, ip, #4
   29c3c:	bne	29bec <__assert_fail@plt+0x18048>
   29c40:	ldr	r3, [sp, #20]
   29c44:	ldr	r2, [r3]
   29c48:	b	29190 <__assert_fail@plt+0x175ec>
   29c4c:	mov	r5, r4
   29c50:	b	29bcc <__assert_fail@plt+0x18028>
   29c54:	ldr	r3, [sl, #40]	; 0x28
   29c58:	ldr	r2, [sp, #40]	; 0x28
   29c5c:	add	r3, r3, fp
   29c60:	cmp	r2, #0
   29c64:	mov	r9, r8
   29c68:	str	r3, [sl, #40]	; 0x28
   29c6c:	bne	29e24 <__assert_fail@plt+0x18280>
   29c70:	ldr	r3, [sp, #24]
   29c74:	ldr	r0, [r3, #92]	; 0x5c
   29c78:	cmp	r0, #1
   29c7c:	ble	29cac <__assert_fail@plt+0x18108>
   29c80:	ldr	r3, [sp, #24]
   29c84:	sub	r1, r9, #4
   29c88:	add	ip, r9, #28
   29c8c:	ldr	r2, [r3, #60]	; 0x3c
   29c90:	sub	r2, r2, #4
   29c94:	ldr	r3, [r1, #4]
   29c98:	ldr	lr, [r2, #4]!
   29c9c:	and	r3, r3, lr
   29ca0:	str	r3, [r1, #4]!
   29ca4:	cmp	ip, r1
   29ca8:	bne	29c94 <__assert_fail@plt+0x180f0>
   29cac:	ldr	r3, [r6, #20]
   29cb0:	cmp	r3, #0
   29cb4:	bne	29cfc <__assert_fail@plt+0x18158>
   29cb8:	ldr	r3, [r6, #24]
   29cbc:	cmp	r3, #0
   29cc0:	bne	29cfc <__assert_fail@plt+0x18158>
   29cc4:	ldr	r3, [r6, #28]
   29cc8:	cmp	r3, #0
   29ccc:	bne	29cfc <__assert_fail@plt+0x18158>
   29cd0:	ldr	r3, [r6, #32]
   29cd4:	cmp	r3, #0
   29cd8:	bne	29cfc <__assert_fail@plt+0x18158>
   29cdc:	cmp	r0, #1
   29ce0:	ble	29dd4 <__assert_fail@plt+0x18230>
   29ce4:	ldr	r3, [r6, #36]	; 0x24
   29ce8:	cmp	r3, #0
   29cec:	bne	29cfc <__assert_fail@plt+0x18158>
   29cf0:	ldrb	r3, [r6, #16]
   29cf4:	tst	r3, #1
   29cf8:	beq	29dd4 <__assert_fail@plt+0x18230>
   29cfc:	ldr	r1, [sp, #24]
   29d00:	mov	r3, #0
   29d04:	add	r4, r1, #56	; 0x38
   29d08:	ldrb	r2, [r1, #88]	; 0x58
   29d0c:	add	r5, r1, #64	; 0x40
   29d10:	mov	ip, #6
   29d14:	orr	r2, r2, #2
   29d18:	strb	r2, [r1, #88]	; 0x58
   29d1c:	add	r2, sp, #96	; 0x60
   29d20:	str	r2, [sp]
   29d24:	mov	r0, r4
   29d28:	mov	r2, r3
   29d2c:	mov	r1, r5
   29d30:	str	r6, [sp, #96]	; 0x60
   29d34:	strb	ip, [sp, #100]	; 0x64
   29d38:	bl	2074c <__assert_fail@plt+0xeba8>
   29d3c:	subs	r3, r0, #0
   29d40:	str	r3, [sp, #32]
   29d44:	beq	29b48 <__assert_fail@plt+0x17fa4>
   29d48:	sub	r3, r9, #4
   29d4c:	add	r2, r9, #28
   29d50:	b	29d5c <__assert_fail@plt+0x181b8>
   29d54:	cmp	r2, r3
   29d58:	beq	29e18 <__assert_fail@plt+0x18274>
   29d5c:	ldr	r1, [r3, #4]!
   29d60:	cmp	r1, #0
   29d64:	beq	29d54 <__assert_fail@plt+0x181b0>
   29d68:	mov	r3, #0
   29d6c:	add	r2, sp, #96	; 0x60
   29d70:	str	r2, [sp]
   29d74:	mov	ip, #3
   29d78:	mov	r2, r3
   29d7c:	mov	r1, r5
   29d80:	mov	r0, r4
   29d84:	str	r9, [sp, #96]	; 0x60
   29d88:	strb	ip, [sp, #100]	; 0x64
   29d8c:	bl	2074c <__assert_fail@plt+0xeba8>
   29d90:	subs	r2, r0, #0
   29d94:	beq	29b48 <__assert_fail@plt+0x17fa4>
   29d98:	add	ip, sp, #128	; 0x80
   29d9c:	mov	lr, #0
   29da0:	ldr	r3, [sp, #32]
   29da4:	mov	r0, r4
   29da8:	mov	r1, r5
   29dac:	str	ip, [sp]
   29db0:	mov	r4, #10
   29db4:	str	lr, [sp, #132]	; 0x84
   29db8:	str	lr, [sp, #128]	; 0x80
   29dbc:	strb	r4, [sp, #132]	; 0x84
   29dc0:	bl	2074c <__assert_fail@plt+0xeba8>
   29dc4:	subs	r3, r0, #0
   29dc8:	str	r3, [sp, #32]
   29dcc:	bne	28a5c <__assert_fail@plt+0x16eb8>
   29dd0:	b	29b48 <__assert_fail@plt+0x17fa4>
   29dd4:	mov	r0, r6
   29dd8:	bl	1f564 <__assert_fail@plt+0xd9c0>
   29ddc:	ldr	r0, [sp, #24]
   29de0:	mov	r3, #0
   29de4:	add	r2, sp, #96	; 0x60
   29de8:	str	r2, [sp]
   29dec:	mov	ip, #3
   29df0:	mov	r2, r3
   29df4:	add	r1, r0, #64	; 0x40
   29df8:	add	r0, r0, #56	; 0x38
   29dfc:	str	r9, [sp, #96]	; 0x60
   29e00:	strb	ip, [sp, #100]	; 0x64
   29e04:	bl	2074c <__assert_fail@plt+0xeba8>
   29e08:	subs	r3, r0, #0
   29e0c:	str	r3, [sp, #32]
   29e10:	bne	28a5c <__assert_fail@plt+0x16eb8>
   29e14:	b	29b48 <__assert_fail@plt+0x17fa4>
   29e18:	mov	r0, r9
   29e1c:	bl	17274 <__assert_fail@plt+0x56d0>
   29e20:	b	28a5c <__assert_fail@plt+0x16eb8>
   29e24:	sub	r3, r8, #4
   29e28:	add	r1, r8, #28
   29e2c:	ldr	r2, [r3, #4]
   29e30:	mvn	r2, r2
   29e34:	str	r2, [r3, #4]!
   29e38:	cmp	r1, r3
   29e3c:	bne	29e2c <__assert_fail@plt+0x18288>
   29e40:	b	29c70 <__assert_fail@plt+0x180cc>
   29e44:	ldr	r6, [sp, #16]
   29e48:	b	28e34 <__assert_fail@plt+0x17290>
   29e4c:	ldr	r7, [sp, #84]	; 0x54
   29e50:	b	298fc <__assert_fail@plt+0x17d58>
   29e54:	ldr	r5, [sp, #76]	; 0x4c
   29e58:	b	298d4 <__assert_fail@plt+0x17d30>
   29e5c:	cmp	r3, #3
   29e60:	movne	r7, #0
   29e64:	ldreq	r1, [sp, #84]	; 0x54
   29e68:	ldrbeq	r7, [r1]
   29e6c:	b	298a8 <__assert_fail@plt+0x17d04>
   29e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e74:	sub	sp, sp, #28
   29e78:	mov	sl, r3
   29e7c:	ldr	r5, [sp, #68]	; 0x44
   29e80:	ldr	r6, [sp, #64]	; 0x40
   29e84:	str	r5, [sp, #4]
   29e88:	str	r6, [sp]
   29e8c:	mov	r8, r1
   29e90:	ldr	fp, [r1]
   29e94:	mov	r9, r0
   29e98:	mov	r7, r2
   29e9c:	bl	2890c <__assert_fail@plt+0x16d68>
   29ea0:	ldr	r3, [r5]
   29ea4:	adds	r3, r3, #0
   29ea8:	movne	r3, #1
   29eac:	cmp	r0, #0
   29eb0:	movne	r3, #0
   29eb4:	cmp	r3, #0
   29eb8:	bne	29fa0 <__assert_fail@plt+0x183fc>
   29ebc:	add	r3, fp, #64	; 0x40
   29ec0:	mov	r4, r0
   29ec4:	str	r3, [sp, #8]
   29ec8:	add	r3, fp, #56	; 0x38
   29ecc:	str	r3, [sp, #12]
   29ed0:	ldrb	lr, [r7, #4]
   29ed4:	clz	ip, r6
   29ed8:	mov	r3, sl
   29edc:	and	fp, lr, #247	; 0xf7
   29ee0:	cmp	fp, #2
   29ee4:	mov	r2, r7
   29ee8:	mov	r1, r8
   29eec:	mov	r0, r9
   29ef0:	lsr	ip, ip, #5
   29ef4:	beq	29fa4 <__assert_fail@plt+0x18400>
   29ef8:	cmp	lr, #9
   29efc:	orrne	ip, ip, #1
   29f00:	cmp	ip, #0
   29f04:	beq	29fa4 <__assert_fail@plt+0x18400>
   29f08:	str	r5, [sp, #4]
   29f0c:	str	r6, [sp]
   29f10:	bl	2890c <__assert_fail@plt+0x16d68>
   29f14:	ldr	ip, [r5]
   29f18:	adds	ip, ip, #0
   29f1c:	movne	ip, #1
   29f20:	cmp	r0, #0
   29f24:	movne	ip, #0
   29f28:	cmp	ip, #0
   29f2c:	mov	fp, r0
   29f30:	bne	29f88 <__assert_fail@plt+0x183e4>
   29f34:	cmp	r4, #0
   29f38:	cmpne	r0, #0
   29f3c:	bne	29f4c <__assert_fail@plt+0x183a8>
   29f40:	cmp	r4, #0
   29f44:	moveq	r4, r0
   29f48:	b	29ed0 <__assert_fail@plt+0x1832c>
   29f4c:	add	r3, sp, #16
   29f50:	str	ip, [sp, #20]
   29f54:	str	r3, [sp]
   29f58:	str	ip, [sp, #16]
   29f5c:	mov	r3, r0
   29f60:	mov	ip, #16
   29f64:	mov	r2, r4
   29f68:	ldr	r1, [sp, #8]
   29f6c:	ldr	r0, [sp, #12]
   29f70:	strb	ip, [sp, #20]
   29f74:	bl	2074c <__assert_fail@plt+0xeba8>
   29f78:	cmp	r0, #0
   29f7c:	beq	29fb0 <__assert_fail@plt+0x1840c>
   29f80:	mov	r4, r0
   29f84:	b	29ed0 <__assert_fail@plt+0x1832c>
   29f88:	cmp	r4, #0
   29f8c:	beq	29fa0 <__assert_fail@plt+0x183fc>
   29f90:	mov	r0, r4
   29f94:	mov	r2, #0
   29f98:	ldr	r1, [pc, #88]	; 29ff8 <__assert_fail@plt+0x18454>
   29f9c:	bl	1e9dc <__assert_fail@plt+0xce38>
   29fa0:	mov	r4, #0
   29fa4:	mov	r0, r4
   29fa8:	add	sp, sp, #28
   29fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fb0:	mov	r3, r0
   29fb4:	mov	r2, r3
   29fb8:	mov	r0, fp
   29fbc:	ldr	r1, [pc, #52]	; 29ff8 <__assert_fail@plt+0x18454>
   29fc0:	str	r3, [sp, #8]
   29fc4:	bl	1e9dc <__assert_fail@plt+0xce38>
   29fc8:	ldr	r3, [sp, #8]
   29fcc:	mov	r0, r4
   29fd0:	mov	r2, r3
   29fd4:	ldr	r1, [pc, #28]	; 29ff8 <__assert_fail@plt+0x18454>
   29fd8:	bl	1e9dc <__assert_fail@plt+0xce38>
   29fdc:	ldr	r3, [sp, #8]
   29fe0:	mov	r2, #12
   29fe4:	mov	r4, r3
   29fe8:	mov	r0, r4
   29fec:	str	r2, [r5]
   29ff0:	add	sp, sp, #28
   29ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ff8:	andeq	pc, r1, r8, asr #11
   29ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a000:	sub	sp, sp, #44	; 0x2c
   2a004:	ldr	r8, [r1]
   2a008:	ldr	fp, [sp, #84]	; 0x54
   2a00c:	str	r1, [sp, #16]
   2a010:	ldr	ip, [r8, #84]	; 0x54
   2a014:	str	fp, [sp, #4]
   2a018:	str	ip, [sp, #28]
   2a01c:	ldr	ip, [sp, #80]	; 0x50
   2a020:	mov	r5, r0
   2a024:	str	ip, [sp]
   2a028:	mov	r4, r2
   2a02c:	str	r3, [sp, #8]
   2a030:	bl	29e70 <__assert_fail@plt+0x182cc>
   2a034:	ldr	r6, [fp]
   2a038:	adds	r6, r6, #0
   2a03c:	movne	r6, #1
   2a040:	cmp	r0, #0
   2a044:	movne	r6, #0
   2a048:	cmp	r6, #0
   2a04c:	bne	2a17c <__assert_fail@plt+0x185d8>
   2a050:	ldr	r3, [sp, #8]
   2a054:	mov	r9, r0
   2a058:	orr	r3, r3, #8388608	; 0x800000
   2a05c:	str	r3, [sp, #12]
   2a060:	add	r3, r8, #64	; 0x40
   2a064:	str	r3, [sp, #20]
   2a068:	add	r3, r8, #56	; 0x38
   2a06c:	add	r7, sp, #32
   2a070:	str	r3, [sp, #24]
   2a074:	str	fp, [sp, #84]	; 0x54
   2a078:	b	2a108 <__assert_fail@plt+0x18564>
   2a07c:	cmp	sl, #9
   2a080:	orrne	ip, ip, #1
   2a084:	cmp	ip, #0
   2a088:	beq	2a15c <__assert_fail@plt+0x185b8>
   2a08c:	ldr	ip, [sp, #28]
   2a090:	ldr	sl, [r8, #84]	; 0x54
   2a094:	str	ip, [r8, #84]	; 0x54
   2a098:	ldr	ip, [sp, #84]	; 0x54
   2a09c:	str	ip, [sp, #4]
   2a0a0:	ldr	ip, [sp, #80]	; 0x50
   2a0a4:	str	ip, [sp]
   2a0a8:	bl	29e70 <__assert_fail@plt+0x182cc>
   2a0ac:	ldr	r3, [sp, #84]	; 0x54
   2a0b0:	ldr	r3, [r3]
   2a0b4:	adds	r3, r3, #0
   2a0b8:	movne	r3, #1
   2a0bc:	cmp	r0, #0
   2a0c0:	movne	r3, #0
   2a0c4:	cmp	r3, #0
   2a0c8:	mov	r3, r0
   2a0cc:	bne	2a164 <__assert_fail@plt+0x185c0>
   2a0d0:	ldr	r2, [r8, #84]	; 0x54
   2a0d4:	orr	sl, r2, sl
   2a0d8:	str	sl, [r8, #84]	; 0x54
   2a0dc:	str	r7, [sp]
   2a0e0:	mov	r2, r9
   2a0e4:	str	r6, [r7, #4]
   2a0e8:	mov	ip, #10
   2a0ec:	ldr	r1, [sp, #20]
   2a0f0:	ldr	r0, [sp, #24]
   2a0f4:	str	r6, [r7]
   2a0f8:	strb	ip, [sp, #36]	; 0x24
   2a0fc:	bl	2074c <__assert_fail@plt+0xeba8>
   2a100:	subs	r9, r0, #0
   2a104:	beq	2a18c <__assert_fail@plt+0x185e8>
   2a108:	ldrb	r3, [r4, #4]
   2a10c:	ldr	r2, [sp, #12]
   2a110:	mov	r1, r5
   2a114:	cmp	r3, #10
   2a118:	mov	r0, r4
   2a11c:	bne	2a180 <__assert_fail@plt+0x185dc>
   2a120:	bl	27c48 <__assert_fail@plt+0x160a4>
   2a124:	ldrb	sl, [r4, #4]
   2a128:	ldr	lr, [r5, #40]	; 0x28
   2a12c:	ldr	ip, [sp, #80]	; 0x50
   2a130:	and	fp, sl, #247	; 0xf7
   2a134:	cmp	fp, #2
   2a138:	clz	ip, ip
   2a13c:	ldr	r3, [sp, #8]
   2a140:	mov	r2, r4
   2a144:	ldr	r1, [sp, #16]
   2a148:	lsr	ip, ip, #5
   2a14c:	add	lr, lr, r0
   2a150:	str	lr, [r5, #40]	; 0x28
   2a154:	mov	r0, r5
   2a158:	bne	2a07c <__assert_fail@plt+0x184d8>
   2a15c:	mov	r3, r6
   2a160:	b	2a0dc <__assert_fail@plt+0x18538>
   2a164:	cmp	r9, #0
   2a168:	beq	2a17c <__assert_fail@plt+0x185d8>
   2a16c:	mov	r0, r9
   2a170:	mov	r2, #0
   2a174:	ldr	r1, [pc, #40]	; 2a1a4 <__assert_fail@plt+0x18600>
   2a178:	bl	1e9dc <__assert_fail@plt+0xce38>
   2a17c:	mov	r9, #0
   2a180:	mov	r0, r9
   2a184:	add	sp, sp, #44	; 0x2c
   2a188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a18c:	ldr	fp, [sp, #84]	; 0x54
   2a190:	mov	r3, #12
   2a194:	mov	r0, r9
   2a198:	str	r3, [fp]
   2a19c:	add	sp, sp, #44	; 0x2c
   2a1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1a4:	andeq	pc, r1, r8, asr #11
   2a1a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a1ac:	mov	r8, r0
   2a1b0:	ldrb	r0, [r0, #28]
   2a1b4:	ldr	ip, [r8, #4]
   2a1b8:	sub	sp, sp, #148	; 0x94
   2a1bc:	mov	r7, r3
   2a1c0:	and	r0, r0, #144	; 0x90
   2a1c4:	mov	r3, #0
   2a1c8:	cmp	ip, #159	; 0x9f
   2a1cc:	str	r7, [r8, #12]
   2a1d0:	str	r1, [sp, #12]
   2a1d4:	mov	r5, r2
   2a1d8:	strb	r0, [r8, #28]
   2a1dc:	str	r3, [r8, #8]
   2a1e0:	str	r3, [sp, #36]	; 0x24
   2a1e4:	str	r3, [r8, #24]
   2a1e8:	ldr	r4, [r8]
   2a1ec:	bls	2add8 <__assert_fail@plt+0x19234>
   2a1f0:	mov	r2, #160	; 0xa0
   2a1f4:	str	r2, [r8, #8]
   2a1f8:	mov	r1, #0
   2a1fc:	mov	r0, r4
   2a200:	bl	119e8 <memset@plt>
   2a204:	ldr	r2, [pc, #3696]	; 2b07c <__assert_fail@plt+0x194d8>
   2a208:	mov	r3, #31
   2a20c:	cmp	r5, r2
   2a210:	str	r3, [r4, #64]	; 0x40
   2a214:	bhi	2a814 <__assert_fail@plt+0x18c70>
   2a218:	add	r3, r5, #1
   2a21c:	str	r3, [r4, #4]
   2a220:	lsl	r0, r3, #3
   2a224:	str	r3, [sp, #20]
   2a228:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a22c:	cmp	r5, #0
   2a230:	str	r0, [r4]
   2a234:	beq	2ae74 <__assert_fail@plt+0x192d0>
   2a238:	mov	r1, #1
   2a23c:	lsl	r1, r1, #1
   2a240:	cmp	r5, r1
   2a244:	bcs	2a23c <__assert_fail@plt+0x18698>
   2a248:	sub	sl, r1, #1
   2a24c:	mov	r0, #12
   2a250:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   2a254:	str	sl, [r4, #68]	; 0x44
   2a258:	str	r0, [r4, #32]
   2a25c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   2a260:	str	r0, [r4, #92]	; 0x5c
   2a264:	mov	r0, #14
   2a268:	bl	11a84 <nl_langinfo@plt>
   2a26c:	ldrb	r3, [r0]
   2a270:	and	r3, r3, #223	; 0xdf
   2a274:	cmp	r3, #85	; 0x55
   2a278:	bne	2a29c <__assert_fail@plt+0x186f8>
   2a27c:	ldrb	r3, [r0, #1]
   2a280:	and	r3, r3, #223	; 0xdf
   2a284:	cmp	r3, #84	; 0x54
   2a288:	bne	2a29c <__assert_fail@plt+0x186f8>
   2a28c:	ldrb	r3, [r0, #2]
   2a290:	and	r3, r3, #223	; 0xdf
   2a294:	cmp	r3, #70	; 0x46
   2a298:	beq	2ab04 <__assert_fail@plt+0x18f60>
   2a29c:	ldrb	r3, [r4, #88]	; 0x58
   2a2a0:	ldr	r2, [r4, #92]	; 0x5c
   2a2a4:	bic	r3, r3, #8
   2a2a8:	cmp	r2, #1
   2a2ac:	strb	r3, [r4, #88]	; 0x58
   2a2b0:	ble	2a2c8 <__assert_fail@plt+0x18724>
   2a2b4:	uxtb	r3, r3
   2a2b8:	ands	r6, r3, #4
   2a2bc:	beq	2aa50 <__assert_fail@plt+0x18eac>
   2a2c0:	ldr	r3, [pc, #3512]	; 2b080 <__assert_fail@plt+0x194dc>
   2a2c4:	str	r3, [r4, #60]	; 0x3c
   2a2c8:	ldr	r3, [r4]
   2a2cc:	cmp	r3, #0
   2a2d0:	beq	2a814 <__assert_fail@plt+0x18c70>
   2a2d4:	ldr	r3, [r4, #32]
   2a2d8:	cmp	r3, #0
   2a2dc:	beq	2a814 <__assert_fail@plt+0x18c70>
   2a2e0:	ldr	r2, [pc, #3484]	; 2b084 <__assert_fail@plt+0x194e0>
   2a2e4:	mov	r3, #0
   2a2e8:	ldr	r1, [pc, #3480]	; 2b088 <__assert_fail@plt+0x194e4>
   2a2ec:	cmp	r2, r3
   2a2f0:	str	r3, [sp, #36]	; 0x24
   2a2f4:	mov	r3, #1
   2a2f8:	moveq	r3, r2
   2a2fc:	cmp	r1, #0
   2a300:	mov	r2, #1
   2a304:	moveq	r2, r1
   2a308:	orr	r3, r3, r2
   2a30c:	ands	r3, r3, #255	; 0xff
   2a310:	str	r3, [sp, #24]
   2a314:	beq	2a338 <__assert_fail@plt+0x18794>
   2a318:	mov	r1, #0
   2a31c:	add	r0, r4, #136	; 0x88
   2a320:	bl	11790 <pthread_mutex_init@plt>
   2a324:	cmp	r0, #0
   2a328:	bne	2a814 <__assert_fail@plt+0x18c70>
   2a32c:	ldr	r3, [sp, #36]	; 0x24
   2a330:	cmp	r3, #0
   2a334:	bne	2a81c <__assert_fail@plt+0x18c78>
   2a338:	ands	r3, r7, #4194304	; 0x400000
   2a33c:	mov	r1, #0
   2a340:	mov	r2, #84	; 0x54
   2a344:	add	r0, sp, #60	; 0x3c
   2a348:	moveq	fp, r1
   2a34c:	movne	fp, #1
   2a350:	ldr	sl, [r8, #20]
   2a354:	str	r3, [sp, #16]
   2a358:	bl	119e8 <memset@plt>
   2a35c:	ldrb	r2, [r4, #88]	; 0x58
   2a360:	ldr	ip, [sp, #12]
   2a364:	ldr	r1, [r4, #92]	; 0x5c
   2a368:	cmp	sl, #0
   2a36c:	moveq	r3, fp
   2a370:	orrne	r3, fp, #1
   2a374:	lsr	r0, r2, #2
   2a378:	lsr	r2, r2, #3
   2a37c:	and	r0, r0, #1
   2a380:	and	r2, r2, #1
   2a384:	cmp	r5, #0
   2a388:	str	ip, [sp, #60]	; 0x3c
   2a38c:	strb	fp, [sp, #132]	; 0x84
   2a390:	strb	r3, [sp, #135]	; 0x87
   2a394:	str	sl, [sp, #124]	; 0x7c
   2a398:	str	r5, [sp, #108]	; 0x6c
   2a39c:	str	r5, [sp, #104]	; 0x68
   2a3a0:	str	r5, [sp, #116]	; 0x74
   2a3a4:	str	r5, [sp, #112]	; 0x70
   2a3a8:	mov	ip, r3
   2a3ac:	strb	r0, [sp, #133]	; 0x85
   2a3b0:	strb	r2, [sp, #134]	; 0x86
   2a3b4:	str	r1, [sp, #140]	; 0x8c
   2a3b8:	beq	2a3e0 <__assert_fail@plt+0x1883c>
   2a3bc:	ldr	r1, [sp, #20]
   2a3c0:	add	r0, sp, #60	; 0x3c
   2a3c4:	str	r3, [sp, #28]
   2a3c8:	bl	1eac4 <__assert_fail@plt+0xcf20>
   2a3cc:	cmp	r0, #0
   2a3d0:	bne	2a44c <__assert_fail@plt+0x188a8>
   2a3d4:	ldrb	ip, [sp, #135]	; 0x87
   2a3d8:	ldr	r1, [r4, #92]	; 0x5c
   2a3dc:	ldr	r3, [sp, #28]
   2a3e0:	cmp	ip, #0
   2a3e4:	ldrne	r6, [sp, #64]	; 0x40
   2a3e8:	ldreq	r6, [sp, #12]
   2a3ec:	ands	r2, r7, #4194304	; 0x400000
   2a3f0:	cmp	r2, #0
   2a3f4:	str	r6, [sp, #64]	; 0x40
   2a3f8:	beq	2a4cc <__assert_fail@plt+0x18928>
   2a3fc:	cmp	r1, #1
   2a400:	ble	2aef0 <__assert_fail@plt+0x1934c>
   2a404:	add	r0, sp, #60	; 0x3c
   2a408:	bl	1ee5c <__assert_fail@plt+0xd2b8>
   2a40c:	cmp	r0, #0
   2a410:	bne	2a44c <__assert_fail@plt+0x188a8>
   2a414:	ldr	r3, [sp, #92]	; 0x5c
   2a418:	cmp	r5, r3
   2a41c:	ble	2a500 <__assert_fail@plt+0x1895c>
   2a420:	ldr	r3, [sp, #88]	; 0x58
   2a424:	ldr	r2, [r4, #92]	; 0x5c
   2a428:	ldr	r1, [sp, #96]	; 0x60
   2a42c:	add	r3, r3, r2
   2a430:	cmp	r1, r3
   2a434:	bgt	2a500 <__assert_fail@plt+0x1895c>
   2a438:	lsl	r1, r1, #1
   2a43c:	add	r0, sp, #60	; 0x3c
   2a440:	bl	1eac4 <__assert_fail@plt+0xcf20>
   2a444:	cmp	r0, #0
   2a448:	beq	2a404 <__assert_fail@plt+0x18860>
   2a44c:	str	r0, [sp, #36]	; 0x24
   2a450:	ldr	r6, [r8]
   2a454:	ldr	r0, [r6, #56]	; 0x38
   2a458:	cmp	r0, #0
   2a45c:	beq	2a470 <__assert_fail@plt+0x188cc>
   2a460:	ldr	r5, [r0]
   2a464:	bl	17274 <__assert_fail@plt+0x56d0>
   2a468:	subs	r0, r5, #0
   2a46c:	bne	2a460 <__assert_fail@plt+0x188bc>
   2a470:	mov	r5, #0
   2a474:	mov	r3, #31
   2a478:	str	r3, [r6, #64]	; 0x40
   2a47c:	ldr	r0, [r6, #16]
   2a480:	str	r5, [r6, #56]	; 0x38
   2a484:	str	r5, [r6, #52]	; 0x34
   2a488:	bl	17274 <__assert_fail@plt+0x56d0>
   2a48c:	str	r5, [r6, #16]
   2a490:	add	r0, sp, #60	; 0x3c
   2a494:	bl	1f87c <__assert_fail@plt+0xdcd8>
   2a498:	ldr	r3, [sp, #24]
   2a49c:	cmp	r3, r5
   2a4a0:	beq	2a4ac <__assert_fail@plt+0x18908>
   2a4a4:	add	r0, r4, #136	; 0x88
   2a4a8:	bl	11718 <pthread_mutex_destroy@plt>
   2a4ac:	mov	r0, r4
   2a4b0:	bl	1f8ac <__assert_fail@plt+0xdd08>
   2a4b4:	ldr	r0, [sp, #36]	; 0x24
   2a4b8:	mov	r3, #0
   2a4bc:	str	r3, [r8]
   2a4c0:	str	r3, [r8, #4]
   2a4c4:	add	sp, sp, #148	; 0x94
   2a4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4cc:	cmp	r1, #1
   2a4d0:	bgt	2aba8 <__assert_fail@plt+0x19004>
   2a4d4:	cmp	r3, #0
   2a4d8:	beq	2aee8 <__assert_fail@plt+0x19344>
   2a4dc:	ldr	ip, [sp, #96]	; 0x60
   2a4e0:	ldr	r2, [sp, #108]	; 0x6c
   2a4e4:	ldr	r3, [sp, #88]	; 0x58
   2a4e8:	cmp	ip, r2
   2a4ec:	movge	ip, r2
   2a4f0:	cmp	ip, r3
   2a4f4:	bgt	2a78c <__assert_fail@plt+0x18be8>
   2a4f8:	str	r3, [sp, #88]	; 0x58
   2a4fc:	str	r3, [sp, #92]	; 0x5c
   2a500:	ldr	r5, [r8]
   2a504:	mov	r6, #0
   2a508:	orr	r2, r7, #8388608	; 0x800000
   2a50c:	str	r6, [r8, #24]
   2a510:	add	r1, sp, #60	; 0x3c
   2a514:	str	r7, [r5, #128]	; 0x80
   2a518:	add	r0, sp, #40	; 0x28
   2a51c:	str	r6, [sp, #36]	; 0x24
   2a520:	bl	27c48 <__assert_fail@plt+0x160a4>
   2a524:	ldr	ip, [sp, #100]	; 0x64
   2a528:	add	r2, sp, #36	; 0x24
   2a52c:	mov	r3, r7
   2a530:	str	r2, [sp, #4]
   2a534:	str	r6, [sp]
   2a538:	add	r2, sp, #40	; 0x28
   2a53c:	mov	r1, r8
   2a540:	add	ip, ip, r0
   2a544:	add	r0, sp, #60	; 0x3c
   2a548:	str	ip, [sp, #100]	; 0x64
   2a54c:	bl	29ffc <__assert_fail@plt+0x18458>
   2a550:	ldr	r3, [sp, #36]	; 0x24
   2a554:	cmp	r3, r6
   2a558:	mov	r7, r0
   2a55c:	bne	2ae80 <__assert_fail@plt+0x192dc>
   2a560:	add	fp, sp, #48	; 0x30
   2a564:	add	r9, r5, #56	; 0x38
   2a568:	add	r5, r5, #64	; 0x40
   2a56c:	str	fp, [sp]
   2a570:	mov	ip, #2
   2a574:	str	r3, [fp, #4]
   2a578:	mov	r1, r5
   2a57c:	mov	r0, r9
   2a580:	mov	r2, r3
   2a584:	str	r3, [sp, #48]	; 0x30
   2a588:	strb	ip, [sp, #52]	; 0x34
   2a58c:	bl	2074c <__assert_fail@plt+0xeba8>
   2a590:	cmp	r7, #0
   2a594:	mov	r6, r0
   2a598:	beq	2a5c8 <__assert_fail@plt+0x18a24>
   2a59c:	mov	r3, #0
   2a5a0:	str	fp, [sp]
   2a5a4:	mov	ip, #16
   2a5a8:	str	r3, [fp, #4]
   2a5ac:	str	r3, [sp, #48]	; 0x30
   2a5b0:	mov	r2, r7
   2a5b4:	mov	r1, r5
   2a5b8:	mov	r0, r9
   2a5bc:	mov	r3, r6
   2a5c0:	strb	ip, [sp, #52]	; 0x34
   2a5c4:	bl	2074c <__assert_fail@plt+0xeba8>
   2a5c8:	cmp	r0, #0
   2a5cc:	cmpne	r6, #0
   2a5d0:	moveq	r3, #1
   2a5d4:	movne	r3, #0
   2a5d8:	str	r3, [sp, #12]
   2a5dc:	moveq	r3, #12
   2a5e0:	streq	r3, [sp, #36]	; 0x24
   2a5e4:	beq	2adfc <__assert_fail@plt+0x19258>
   2a5e8:	ldr	r6, [r8]
   2a5ec:	str	r0, [r4, #52]	; 0x34
   2a5f0:	ldr	r0, [r6, #4]
   2a5f4:	lsl	r0, r0, #2
   2a5f8:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a5fc:	ldr	r3, [r6, #4]
   2a600:	str	r0, [r6, #12]
   2a604:	lsl	r0, r3, #2
   2a608:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a60c:	ldr	r3, [r6, #4]
   2a610:	add	r3, r3, r3, lsl #1
   2a614:	str	r0, [r6, #16]
   2a618:	lsl	r0, r3, #2
   2a61c:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a620:	ldr	r3, [r6, #4]
   2a624:	add	r3, r3, r3, lsl #1
   2a628:	str	r0, [r6, #20]
   2a62c:	lsl	r0, r3, #2
   2a630:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a634:	ldr	r3, [r6, #12]
   2a638:	cmp	r3, #0
   2a63c:	str	r0, [r6, #24]
   2a640:	beq	2a938 <__assert_fail@plt+0x18d94>
   2a644:	ldr	r3, [r6, #16]
   2a648:	cmp	r3, #0
   2a64c:	beq	2a938 <__assert_fail@plt+0x18d94>
   2a650:	ldr	r3, [r6, #20]
   2a654:	cmp	r3, #0
   2a658:	beq	2adcc <__assert_fail@plt+0x19228>
   2a65c:	cmp	r0, #0
   2a660:	beq	2a938 <__assert_fail@plt+0x18d94>
   2a664:	ldr	r0, [r8, #24]
   2a668:	lsl	r0, r0, #2
   2a66c:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a670:	cmp	r0, #0
   2a674:	str	r0, [r6, #132]	; 0x84
   2a678:	beq	2a6ec <__assert_fail@plt+0x18b48>
   2a67c:	ldr	r1, [r8, #24]
   2a680:	cmp	r1, #0
   2a684:	subne	r2, r0, #4
   2a688:	ldrne	r3, [sp, #12]
   2a68c:	beq	2a6a0 <__assert_fail@plt+0x18afc>
   2a690:	str	r3, [r2, #4]!
   2a694:	add	r3, r3, #1
   2a698:	cmp	r3, r1
   2a69c:	bne	2a690 <__assert_fail@plt+0x18aec>
   2a6a0:	ldr	r1, [pc, #2532]	; 2b08c <__assert_fail@plt+0x194e8>
   2a6a4:	mov	r2, r6
   2a6a8:	ldr	r0, [r6, #52]	; 0x34
   2a6ac:	bl	1ea50 <__assert_fail@plt+0xceac>
   2a6b0:	ldr	r1, [r8, #24]
   2a6b4:	cmp	r1, #0
   2a6b8:	beq	2aed4 <__assert_fail@plt+0x19330>
   2a6bc:	ldr	r0, [r6, #132]	; 0x84
   2a6c0:	ldr	r3, [r0]
   2a6c4:	cmp	r3, #0
   2a6c8:	beq	2a6dc <__assert_fail@plt+0x18b38>
   2a6cc:	b	2a6ec <__assert_fail@plt+0x18b48>
   2a6d0:	ldr	r2, [r0, r3, lsl #2]
   2a6d4:	cmp	r2, r3
   2a6d8:	bne	2a6ec <__assert_fail@plt+0x18b48>
   2a6dc:	add	r3, r3, #1
   2a6e0:	cmp	r3, r1
   2a6e4:	bcc	2a6d0 <__assert_fail@plt+0x18b2c>
   2a6e8:	beq	2aed8 <__assert_fail@plt+0x19334>
   2a6ec:	mov	r2, r8
   2a6f0:	ldr	r1, [pc, #2456]	; 2b090 <__assert_fail@plt+0x194ec>
   2a6f4:	ldr	r0, [r6, #52]	; 0x34
   2a6f8:	bl	1e9dc <__assert_fail@plt+0xce38>
   2a6fc:	subs	r3, r0, #0
   2a700:	bne	2a80c <__assert_fail@plt+0x18c68>
   2a704:	mov	r2, r6
   2a708:	ldr	r1, [pc, #2436]	; 2b094 <__assert_fail@plt+0x194f0>
   2a70c:	ldr	r0, [r6, #52]	; 0x34
   2a710:	bl	1e9dc <__assert_fail@plt+0xce38>
   2a714:	subs	r3, r0, #0
   2a718:	bne	2a80c <__assert_fail@plt+0x18c68>
   2a71c:	mov	r2, r6
   2a720:	ldr	r1, [pc, #2416]	; 2b098 <__assert_fail@plt+0x194f4>
   2a724:	ldr	r0, [r6, #52]	; 0x34
   2a728:	str	r3, [sp, #20]
   2a72c:	bl	1ea50 <__assert_fail@plt+0xceac>
   2a730:	ldr	r7, [r6, #52]	; 0x34
   2a734:	ldrb	r3, [r7, #24]
   2a738:	ldr	r2, [r7, #28]
   2a73c:	sub	r3, r3, #2
   2a740:	cmp	r3, #14
   2a744:	ldrls	pc, [pc, r3, lsl #2]
   2a748:	b	2ab34 <__assert_fail@plt+0x18f90>
   2a74c:	andeq	sl, r2, r8, asr #19
   2a750:	andeq	sl, r2, r4, lsr fp
   2a754:			; <UNDEFINED> instruction: 0x0002a7b8
   2a758:	andeq	sl, r2, r4, lsr fp
   2a75c:	andeq	sl, r2, r4, lsr fp
   2a760:	andeq	sl, r2, r4, lsr fp
   2a764:	andeq	sl, r2, r8, asr #21
   2a768:	andeq	sl, r2, r8, asr #21
   2a76c:	andeq	sl, r2, r4, asr #18
   2a770:	andeq	sl, r2, r4, asr #18
   2a774:	andeq	sl, r2, r8, asr #21
   2a778:	andeq	sl, r2, r4, lsr fp
   2a77c:	andeq	sl, r2, r4, lsr fp
   2a780:	andeq	sl, r2, r4, lsr fp
   2a784:	andeq	sl, r2, r8, asr #19
   2a788:	ldr	r6, [sp, #64]	; 0x40
   2a78c:	ldr	r2, [sp, #60]	; 0x3c
   2a790:	ldr	r0, [sp, #84]	; 0x54
   2a794:	add	r2, r2, r3
   2a798:	ldr	r1, [sp, #124]	; 0x7c
   2a79c:	ldrb	r2, [r2, r0]
   2a7a0:	ldrb	r2, [r1, r2]
   2a7a4:	strb	r2, [r6, r3]
   2a7a8:	add	r3, r3, #1
   2a7ac:	cmp	ip, r3
   2a7b0:	bne	2a788 <__assert_fail@plt+0x18be4>
   2a7b4:	b	2a4f8 <__assert_fail@plt+0x18954>
   2a7b8:	ldr	r1, [r7, #16]
   2a7bc:	ldr	r3, [r6, #12]
   2a7c0:	ldr	r5, [r1, #28]
   2a7c4:	str	r5, [r3, r2, lsl #2]
   2a7c8:	ldrb	r3, [r7, #24]
   2a7cc:	cmp	r3, #4
   2a7d0:	bne	2a9c8 <__assert_fail@plt+0x18e24>
   2a7d4:	ldr	r3, [r6, #20]
   2a7d8:	add	r2, r2, r2, lsl #1
   2a7dc:	mov	r1, #1
   2a7e0:	add	sl, r3, r2, lsl #2
   2a7e4:	str	r1, [r3, r2, lsl #2]
   2a7e8:	mov	r0, #4
   2a7ec:	str	r1, [sl, #4]
   2a7f0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a7f4:	cmp	r0, #0
   2a7f8:	str	r0, [sl, #8]
   2a7fc:	bne	2aafc <__assert_fail@plt+0x18f58>
   2a800:	mov	r3, #12
   2a804:	str	r0, [sl, #4]
   2a808:	str	r0, [sl]
   2a80c:	str	r3, [sp, #36]	; 0x24
   2a810:	b	2a450 <__assert_fail@plt+0x188ac>
   2a814:	mov	r3, #12
   2a818:	str	r3, [sp, #36]	; 0x24
   2a81c:	mov	r0, r4
   2a820:	bl	1f8ac <__assert_fail@plt+0xdd08>
   2a824:	mov	r3, #0
   2a828:	ldr	r0, [sp, #36]	; 0x24
   2a82c:	str	r3, [r8]
   2a830:	str	r3, [r8, #4]
   2a834:	add	sp, sp, #148	; 0x94
   2a838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a83c:	ldrb	r3, [r8, #28]
   2a840:	tst	r3, #16
   2a844:	bne	2a854 <__assert_fail@plt+0x18cb0>
   2a848:	ldr	r3, [r8, #24]
   2a84c:	cmp	r3, #0
   2a850:	bne	2aec4 <__assert_fail@plt+0x19320>
   2a854:	ldr	r3, [r6, #76]	; 0x4c
   2a858:	cmp	r3, #0
   2a85c:	beq	2abcc <__assert_fail@plt+0x19028>
   2a860:	add	r0, r0, r0, lsl #1
   2a864:	lsl	r0, r0, #2
   2a868:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a86c:	cmp	r0, #0
   2a870:	str	r0, [r6, #28]
   2a874:	beq	2a938 <__assert_fail@plt+0x18d94>
   2a878:	ldr	r3, [r6, #8]
   2a87c:	cmp	r3, #0
   2a880:	beq	2abcc <__assert_fail@plt+0x19028>
   2a884:	mov	r3, #0
   2a888:	mov	r2, r0
   2a88c:	mov	r1, r3
   2a890:	mov	r0, r3
   2a894:	b	2a89c <__assert_fail@plt+0x18cf8>
   2a898:	ldr	r2, [r6, #28]
   2a89c:	add	ip, r2, r3
   2a8a0:	str	r1, [r2, r3]
   2a8a4:	str	r1, [ip, #4]
   2a8a8:	str	r1, [ip, #8]
   2a8ac:	ldr	r2, [r6, #8]
   2a8b0:	add	r0, r0, #1
   2a8b4:	cmp	r0, r2
   2a8b8:	add	r3, r3, #12
   2a8bc:	bcc	2a898 <__assert_fail@plt+0x18cf4>
   2a8c0:	cmp	r2, #0
   2a8c4:	beq	2abcc <__assert_fail@plt+0x19028>
   2a8c8:	mov	r5, #0
   2a8cc:	ldr	r3, [r6, #24]
   2a8d0:	str	r4, [sp, #12]
   2a8d4:	mov	sl, r5
   2a8d8:	mov	r4, r6
   2a8dc:	mov	ip, r2
   2a8e0:	add	r1, r3, r5
   2a8e4:	ldmib	r1, {r0, r6}
   2a8e8:	cmp	r0, #0
   2a8ec:	subgt	r6, r6, #4
   2a8f0:	movgt	r7, #0
   2a8f4:	bgt	2a914 <__assert_fail@plt+0x18d70>
   2a8f8:	b	2abb8 <__assert_fail@plt+0x19014>
   2a8fc:	ldr	r3, [r4, #24]
   2a900:	add	r7, r7, #1
   2a904:	add	r2, r3, r5
   2a908:	ldr	r2, [r2, #4]
   2a90c:	cmp	r7, r2
   2a910:	bge	2abb4 <__assert_fail@plt+0x19010>
   2a914:	ldr	r3, [r6, #4]!
   2a918:	ldr	r0, [r4, #28]
   2a91c:	mov	r1, sl
   2a920:	add	r3, r3, r3, lsl #1
   2a924:	add	r0, r0, r3, lsl #2
   2a928:	bl	1eb58 <__assert_fail@plt+0xcfb4>
   2a92c:	cmp	r0, #0
   2a930:	bne	2a8fc <__assert_fail@plt+0x18d58>
   2a934:	ldr	r4, [sp, #12]
   2a938:	mov	r3, #12
   2a93c:	str	r3, [sp, #36]	; 0x24
   2a940:	b	2a450 <__assert_fail@plt+0x188ac>
   2a944:	ldrb	r3, [r6, #88]	; 0x58
   2a948:	ldr	r5, [r6, #20]
   2a94c:	add	r2, r2, r2, lsl #1
   2a950:	orr	r3, r3, #1
   2a954:	strb	r3, [r6, #88]	; 0x58
   2a958:	ldr	r3, [r7, #4]
   2a95c:	mov	r0, #8
   2a960:	cmp	r3, #0
   2a964:	ldrne	r3, [r3, #12]
   2a968:	ldreq	r3, [r7, #16]
   2a96c:	ldr	r9, [r3, #28]
   2a970:	ldr	r3, [r7, #8]
   2a974:	cmp	r3, #0
   2a978:	ldrne	r3, [r3, #12]
   2a97c:	ldreq	r3, [r7, #16]
   2a980:	ldr	sl, [r3, #28]
   2a984:	mov	r3, #2
   2a988:	str	r3, [r5, r2, lsl #2]
   2a98c:	add	r5, r5, r2, lsl r3
   2a990:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2a994:	cmp	r0, #0
   2a998:	str	r0, [r5, #8]
   2a99c:	beq	2a938 <__assert_fail@plt+0x18d94>
   2a9a0:	cmp	r9, sl
   2a9a4:	moveq	r3, #1
   2a9a8:	streq	r3, [r5, #4]
   2a9ac:	streq	r9, [r0]
   2a9b0:	beq	2a9c8 <__assert_fail@plt+0x18e24>
   2a9b4:	mov	r3, #2
   2a9b8:	str	r3, [r5, #4]
   2a9bc:	stmlt	r0, {r9, sl}
   2a9c0:	strge	sl, [r0]
   2a9c4:	strge	r9, [r0, #4]
   2a9c8:	ldr	r3, [r7, #4]
   2a9cc:	cmp	r3, #0
   2a9d0:	ldreq	r2, [sp, #20]
   2a9d4:	beq	2a9e4 <__assert_fail@plt+0x18e40>
   2a9d8:	mov	r7, r3
   2a9dc:	b	2a734 <__assert_fail@plt+0x18b90>
   2a9e0:	mov	r7, r5
   2a9e4:	ldr	r3, [r7, #8]
   2a9e8:	cmp	r3, #0
   2a9ec:	cmpne	r3, r2
   2a9f0:	moveq	sl, #1
   2a9f4:	movne	sl, #0
   2a9f8:	bne	2a9d8 <__assert_fail@plt+0x18e34>
   2a9fc:	ldr	r5, [r7]
   2aa00:	mov	r2, r7
   2aa04:	cmp	r5, #0
   2aa08:	bne	2a9e0 <__assert_fail@plt+0x18e3c>
   2aa0c:	ldr	r9, [sp, #12]
   2aa10:	ldr	r3, [r6, #24]
   2aa14:	add	r7, r5, r5, lsl #1
   2aa18:	lsl	r7, r7, #2
   2aa1c:	add	r2, r3, r7
   2aa20:	ldr	r2, [r2, #4]
   2aa24:	cmp	r2, #0
   2aa28:	beq	2ab48 <__assert_fail@plt+0x18fa4>
   2aa2c:	ldr	r0, [r6, #8]
   2aa30:	add	r5, r5, #1
   2aa34:	cmp	r0, r5
   2aa38:	bne	2aa14 <__assert_fail@plt+0x18e70>
   2aa3c:	cmp	r9, #0
   2aa40:	beq	2a83c <__assert_fail@plt+0x18c98>
   2aa44:	ldr	r9, [sp, #12]
   2aa48:	mov	r5, #0
   2aa4c:	b	2aa14 <__assert_fail@plt+0x18e70>
   2aa50:	mov	r1, #1
   2aa54:	mov	r0, #32
   2aa58:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   2aa5c:	cmp	r0, #0
   2aa60:	str	r0, [r4, #60]	; 0x3c
   2aa64:	beq	2a814 <__assert_fail@plt+0x18c70>
   2aa68:	mov	fp, #1
   2aa6c:	lsl	r9, r6, #3
   2aa70:	mov	sl, #0
   2aa74:	mov	r0, r9
   2aa78:	bl	119f4 <btowc@plt>
   2aa7c:	cmn	r0, #1
   2aa80:	ldrne	r2, [r4, #60]	; 0x3c
   2aa84:	ldrne	r3, [r2, r6]
   2aa88:	orrne	r3, r3, fp, lsl sl
   2aa8c:	strne	r3, [r2, r6]
   2aa90:	bics	r3, r9, #127	; 0x7f
   2aa94:	bne	2aaa8 <__assert_fail@plt+0x18f04>
   2aa98:	cmp	r0, r9
   2aa9c:	ldrbne	r3, [r4, #88]	; 0x58
   2aaa0:	orrne	r3, r3, #8
   2aaa4:	strbne	r3, [r4, #88]	; 0x58
   2aaa8:	add	sl, sl, #1
   2aaac:	cmp	sl, #32
   2aab0:	add	r9, r9, #1
   2aab4:	bne	2aa74 <__assert_fail@plt+0x18ed0>
   2aab8:	add	r6, r6, #4
   2aabc:	cmp	r6, #32
   2aac0:	bne	2aa6c <__assert_fail@plt+0x18ec8>
   2aac4:	b	2a2c8 <__assert_fail@plt+0x18724>
   2aac8:	ldr	r1, [r7, #16]
   2aacc:	ldr	r3, [r6, #20]
   2aad0:	add	r2, r2, r2, lsl #1
   2aad4:	ldr	r5, [r1, #28]
   2aad8:	add	r9, r3, r2, lsl #2
   2aadc:	mov	r1, #1
   2aae0:	str	r1, [r3, r2, lsl #2]
   2aae4:	mov	r0, #4
   2aae8:	str	r1, [r9, #4]
   2aaec:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2aaf0:	cmp	r0, #0
   2aaf4:	str	r0, [r9, #8]
   2aaf8:	beq	2af0c <__assert_fail@plt+0x19368>
   2aafc:	str	r5, [r0]
   2ab00:	b	2a9c8 <__assert_fail@plt+0x18e24>
   2ab04:	ldrb	r3, [r0, #3]
   2ab08:	ldr	r1, [pc, #1420]	; 2b09c <__assert_fail@plt+0x194f8>
   2ab0c:	cmp	r3, #45	; 0x2d
   2ab10:	moveq	r3, #4
   2ab14:	movne	r3, #3
   2ab18:	add	r0, r0, r3
   2ab1c:	bl	1170c <strcmp@plt>
   2ab20:	cmp	r0, #0
   2ab24:	ldrbeq	r3, [r4, #88]	; 0x58
   2ab28:	orreq	r3, r3, #4
   2ab2c:	strbeq	r3, [r4, #88]	; 0x58
   2ab30:	b	2a29c <__assert_fail@plt+0x186f8>
   2ab34:	ldr	r1, [r7, #16]
   2ab38:	ldr	r3, [r6, #12]
   2ab3c:	ldr	r1, [r1, #28]
   2ab40:	str	r1, [r3, r2, lsl #2]
   2ab44:	b	2a9c8 <__assert_fail@plt+0x18e24>
   2ab48:	mov	r3, #1
   2ab4c:	mov	r2, r5
   2ab50:	mov	r1, r6
   2ab54:	mov	r0, fp
   2ab58:	bl	217bc <__assert_fail@plt+0xfc18>
   2ab5c:	cmp	r0, #0
   2ab60:	bne	2adc0 <__assert_fail@plt+0x1921c>
   2ab64:	ldr	r3, [r6, #24]
   2ab68:	add	r7, r3, r7
   2ab6c:	ldr	r7, [r7, #4]
   2ab70:	cmp	r7, #0
   2ab74:	bne	2aa2c <__assert_fail@plt+0x18e88>
   2ab78:	ldr	r0, [sp, #56]	; 0x38
   2ab7c:	bl	17274 <__assert_fail@plt+0x56d0>
   2ab80:	ldr	r3, [r6, #8]
   2ab84:	add	r5, r5, #1
   2ab88:	cmp	r3, r5
   2ab8c:	movne	r9, sl
   2ab90:	beq	2ab9c <__assert_fail@plt+0x18ff8>
   2ab94:	ldr	r3, [r6, #24]
   2ab98:	b	2aa14 <__assert_fail@plt+0x18e70>
   2ab9c:	mov	r5, r7
   2aba0:	ldr	r9, [sp, #12]
   2aba4:	b	2ab94 <__assert_fail@plt+0x18ff0>
   2aba8:	add	r0, sp, #60	; 0x3c
   2abac:	bl	1ecc4 <__assert_fail@plt+0xd120>
   2abb0:	b	2a500 <__assert_fail@plt+0x1895c>
   2abb4:	ldr	ip, [r4, #8]
   2abb8:	add	sl, sl, #1
   2abbc:	cmp	sl, ip
   2abc0:	add	r5, r5, #12
   2abc4:	bcc	2a8e0 <__assert_fail@plt+0x18d3c>
   2abc8:	ldr	r4, [sp, #12]
   2abcc:	ldrb	r2, [r4, #88]	; 0x58
   2abd0:	ldr	r3, [sp, #16]
   2abd4:	clz	r3, r3
   2abd8:	lsr	r3, r3, #5
   2abdc:	mov	r1, #0
   2abe0:	ands	r3, r3, r2, lsr #2
   2abe4:	str	r1, [sp, #36]	; 0x24
   2abe8:	beq	2abf8 <__assert_fail@plt+0x19054>
   2abec:	ldr	r2, [r8, #20]
   2abf0:	cmp	r2, #0
   2abf4:	beq	2af1c <__assert_fail@plt+0x19378>
   2abf8:	ldr	r3, [r4, #52]	; 0x34
   2abfc:	ldr	r1, [r4, #24]
   2ac00:	mov	r0, fp
   2ac04:	ldr	r3, [r3, #12]
   2ac08:	ldr	r3, [r3, #28]
   2ac0c:	str	r3, [r4, #72]	; 0x48
   2ac10:	add	r3, r3, r3, lsl #1
   2ac14:	add	r1, r1, r3, lsl #2
   2ac18:	bl	20bc4 <__assert_fail@plt+0xf020>
   2ac1c:	cmp	r0, #0
   2ac20:	mov	r6, r0
   2ac24:	str	r0, [sp, #40]	; 0x28
   2ac28:	bne	2ad50 <__assert_fail@plt+0x191ac>
   2ac2c:	ldr	r3, [r4, #76]	; 0x4c
   2ac30:	cmp	r3, #0
   2ac34:	ble	2ad10 <__assert_fail@plt+0x1916c>
   2ac38:	ldr	r5, [sp, #52]	; 0x34
   2ac3c:	cmp	r5, #0
   2ac40:	ble	2ad10 <__assert_fail@plt+0x1916c>
   2ac44:	mov	r7, r0
   2ac48:	b	2ac58 <__assert_fail@plt+0x190b4>
   2ac4c:	add	r7, r7, #1
   2ac50:	cmp	r7, r5
   2ac54:	bge	2ad10 <__assert_fail@plt+0x1916c>
   2ac58:	ldr	r2, [sp, #56]	; 0x38
   2ac5c:	ldr	ip, [r4]
   2ac60:	ldr	r9, [r2, r7, lsl #2]
   2ac64:	add	lr, ip, r9, lsl #3
   2ac68:	ldrb	r3, [lr, #4]
   2ac6c:	cmp	r3, #4
   2ac70:	bne	2ac4c <__assert_fail@plt+0x190a8>
   2ac74:	cmp	r5, #0
   2ac78:	ble	2adb8 <__assert_fail@plt+0x19214>
   2ac7c:	sub	r2, r2, #4
   2ac80:	mov	r3, #0
   2ac84:	b	2ac94 <__assert_fail@plt+0x190f0>
   2ac88:	add	r3, r3, #1
   2ac8c:	cmp	r5, r3
   2ac90:	beq	2ac4c <__assert_fail@plt+0x190a8>
   2ac94:	ldr	r1, [r2, #4]!
   2ac98:	add	r0, ip, r1, lsl #3
   2ac9c:	ldrb	r0, [r0, #4]
   2aca0:	cmp	r0, #9
   2aca4:	bne	2ac88 <__assert_fail@plt+0x190e4>
   2aca8:	ldr	r0, [ip, r1, lsl #3]
   2acac:	ldr	r1, [lr]
   2acb0:	cmp	r0, r1
   2acb4:	bne	2ac88 <__assert_fail@plt+0x190e4>
   2acb8:	ldr	r3, [r4, #20]
   2acbc:	add	r9, r9, r9, lsl #1
   2acc0:	add	r1, sp, #56	; 0x38
   2acc4:	add	r9, r3, r9, lsl #2
   2acc8:	mov	r0, r5
   2accc:	ldr	r3, [r9, #8]
   2acd0:	ldr	r9, [r3]
   2acd4:	mov	r2, r9
   2acd8:	bl	200b8 <__assert_fail@plt+0xe514>
   2acdc:	cmp	r0, #0
   2ace0:	bne	2ac4c <__assert_fail@plt+0x190a8>
   2ace4:	ldr	r1, [r4, #24]
   2ace8:	add	r9, r9, r9, lsl #1
   2acec:	mov	r0, fp
   2acf0:	add	r1, r1, r9, lsl #2
   2acf4:	bl	21634 <__assert_fail@plt+0xfa90>
   2acf8:	cmp	r0, #0
   2acfc:	bne	2af04 <__assert_fail@plt+0x19360>
   2ad00:	ldr	r5, [sp, #52]	; 0x34
   2ad04:	mov	r7, #1
   2ad08:	cmp	r7, r5
   2ad0c:	blt	2ac58 <__assert_fail@plt+0x190b4>
   2ad10:	mov	r3, #0
   2ad14:	mov	r2, fp
   2ad18:	mov	r1, r4
   2ad1c:	add	r0, sp, #40	; 0x28
   2ad20:	bl	20d88 <__assert_fail@plt+0xf1e4>
   2ad24:	cmp	r0, #0
   2ad28:	str	r0, [r4, #36]	; 0x24
   2ad2c:	beq	2ae6c <__assert_fail@plt+0x192c8>
   2ad30:	ldrsb	r3, [r0, #52]	; 0x34
   2ad34:	cmp	r3, #0
   2ad38:	strge	r0, [r4, #48]	; 0x30
   2ad3c:	strge	r0, [r4, #44]	; 0x2c
   2ad40:	strge	r0, [r4, #40]	; 0x28
   2ad44:	blt	2ae08 <__assert_fail@plt+0x19264>
   2ad48:	ldr	r0, [sp, #56]	; 0x38
   2ad4c:	bl	17274 <__assert_fail@plt+0x56d0>
   2ad50:	ldr	r7, [r8]
   2ad54:	str	r6, [sp, #36]	; 0x24
   2ad58:	ldr	r0, [r7, #56]	; 0x38
   2ad5c:	cmp	r0, #0
   2ad60:	beq	2ad74 <__assert_fail@plt+0x191d0>
   2ad64:	ldr	r5, [r0]
   2ad68:	bl	17274 <__assert_fail@plt+0x56d0>
   2ad6c:	subs	r0, r5, #0
   2ad70:	bne	2ad64 <__assert_fail@plt+0x191c0>
   2ad74:	mov	r5, #0
   2ad78:	mov	r3, #31
   2ad7c:	str	r3, [r7, #64]	; 0x40
   2ad80:	ldr	r0, [r7, #16]
   2ad84:	str	r5, [r7, #56]	; 0x38
   2ad88:	str	r5, [r7, #52]	; 0x34
   2ad8c:	bl	17274 <__assert_fail@plt+0x56d0>
   2ad90:	add	r0, sp, #60	; 0x3c
   2ad94:	str	r5, [r7, #16]
   2ad98:	bl	1f87c <__assert_fail@plt+0xdcd8>
   2ad9c:	ldr	r0, [sp, #36]	; 0x24
   2ada0:	cmp	r0, r5
   2ada4:	beq	2a4c4 <__assert_fail@plt+0x18920>
   2ada8:	ldr	r3, [sp, #24]
   2adac:	cmp	r3, #0
   2adb0:	bne	2a4a4 <__assert_fail@plt+0x18900>
   2adb4:	b	2a4ac <__assert_fail@plt+0x18908>
   2adb8:	bne	2acb8 <__assert_fail@plt+0x19114>
   2adbc:	b	2ac4c <__assert_fail@plt+0x190a8>
   2adc0:	mov	r3, r0
   2adc4:	str	r3, [sp, #36]	; 0x24
   2adc8:	b	2a450 <__assert_fail@plt+0x188ac>
   2adcc:	mov	r3, #12
   2add0:	str	r3, [sp, #36]	; 0x24
   2add4:	b	2a450 <__assert_fail@plt+0x188ac>
   2add8:	mov	r0, r4
   2addc:	mov	r1, #160	; 0xa0
   2ade0:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   2ade4:	subs	r4, r0, #0
   2ade8:	beq	2aefc <__assert_fail@plt+0x19358>
   2adec:	mov	r3, #160	; 0xa0
   2adf0:	str	r4, [r8]
   2adf4:	str	r3, [r8, #4]
   2adf8:	b	2a1f0 <__assert_fail@plt+0x1864c>
   2adfc:	mov	r3, #0
   2ae00:	str	r3, [r4, #52]	; 0x34
   2ae04:	b	2a450 <__assert_fail@plt+0x188ac>
   2ae08:	mov	r3, #1
   2ae0c:	mov	r2, fp
   2ae10:	mov	r1, r4
   2ae14:	add	r0, sp, #40	; 0x28
   2ae18:	bl	20d88 <__assert_fail@plt+0xf1e4>
   2ae1c:	mov	r3, #2
   2ae20:	mov	r2, fp
   2ae24:	mov	r1, r4
   2ae28:	str	r0, [r4, #40]	; 0x28
   2ae2c:	add	r0, sp, #40	; 0x28
   2ae30:	bl	20d88 <__assert_fail@plt+0xf1e4>
   2ae34:	mov	r3, #6
   2ae38:	mov	r2, fp
   2ae3c:	mov	r1, r4
   2ae40:	str	r0, [r4, #44]	; 0x2c
   2ae44:	add	r0, sp, #40	; 0x28
   2ae48:	bl	20d88 <__assert_fail@plt+0xf1e4>
   2ae4c:	ldr	r3, [r4, #40]	; 0x28
   2ae50:	cmp	r3, #0
   2ae54:	str	r0, [r4, #48]	; 0x30
   2ae58:	beq	2ae6c <__assert_fail@plt+0x192c8>
   2ae5c:	ldr	r3, [r4, #44]	; 0x2c
   2ae60:	cmp	r0, #0
   2ae64:	cmpne	r3, #0
   2ae68:	bne	2ad48 <__assert_fail@plt+0x191a4>
   2ae6c:	ldr	r6, [sp, #40]	; 0x28
   2ae70:	b	2ad50 <__assert_fail@plt+0x191ac>
   2ae74:	mov	sl, r5
   2ae78:	mov	r1, #1
   2ae7c:	b	2a24c <__assert_fail@plt+0x186a8>
   2ae80:	cmp	r7, #0
   2ae84:	beq	2adfc <__assert_fail@plt+0x19258>
   2ae88:	add	fp, sp, #48	; 0x30
   2ae8c:	add	r9, r5, #56	; 0x38
   2ae90:	add	r5, r5, #64	; 0x40
   2ae94:	str	fp, [sp]
   2ae98:	mov	ip, #2
   2ae9c:	str	r6, [fp, #4]
   2aea0:	mov	r3, r6
   2aea4:	mov	r2, r6
   2aea8:	mov	r1, r5
   2aeac:	mov	r0, r9
   2aeb0:	str	r6, [sp, #48]	; 0x30
   2aeb4:	strb	ip, [sp, #52]	; 0x34
   2aeb8:	bl	2074c <__assert_fail@plt+0xeba8>
   2aebc:	mov	r6, r0
   2aec0:	b	2a59c <__assert_fail@plt+0x189f8>
   2aec4:	ldrb	r3, [r6, #88]	; 0x58
   2aec8:	tst	r3, #1
   2aecc:	bne	2a860 <__assert_fail@plt+0x18cbc>
   2aed0:	b	2a854 <__assert_fail@plt+0x18cb0>
   2aed4:	ldr	r0, [r6, #132]	; 0x84
   2aed8:	bl	17274 <__assert_fail@plt+0x56d0>
   2aedc:	mov	r3, #0
   2aee0:	str	r3, [r6, #132]	; 0x84
   2aee4:	b	2a6ec <__assert_fail@plt+0x18b48>
   2aee8:	ldr	r3, [sp, #96]	; 0x60
   2aeec:	b	2a4f8 <__assert_fail@plt+0x18954>
   2aef0:	add	r0, sp, #60	; 0x3c
   2aef4:	bl	1f3dc <__assert_fail@plt+0xd838>
   2aef8:	b	2a500 <__assert_fail@plt+0x1895c>
   2aefc:	mov	r0, #12
   2af00:	b	2a4c4 <__assert_fail@plt+0x18920>
   2af04:	mov	r6, r0
   2af08:	b	2ad50 <__assert_fail@plt+0x191ac>
   2af0c:	str	r0, [r9, #4]
   2af10:	str	r0, [r9]
   2af14:	mov	r3, #12
   2af18:	b	2a80c <__assert_fail@plt+0x18c68>
   2af1c:	ldr	r7, [r4, #8]
   2af20:	cmp	r7, #0
   2af24:	beq	2b04c <__assert_fail@plt+0x194a8>
   2af28:	ldr	r1, [r4]
   2af2c:	mov	lr, r9
   2af30:	mov	r0, r1
   2af34:	mov	r5, r1
   2af38:	ldrb	ip, [r5, #4]
   2af3c:	sub	ip, ip, #1
   2af40:	cmp	ip, #11
   2af44:	ldrls	pc, [pc, ip, lsl #2]
   2af48:	b	2afe8 <__assert_fail@plt+0x19444>
   2af4c:	andeq	sl, r2, ip, ror pc
   2af50:	andeq	sl, r2, r8, lsl #31
   2af54:	andeq	fp, r2, r8, lsl r0
   2af58:	andeq	sl, r2, r8, lsl #31
   2af5c:	andeq	fp, r2, r0, lsl r0
   2af60:	strdeq	sl, [r2], -r8
   2af64:	andeq	sl, r2, r8, ror #31
   2af68:	andeq	sl, r2, r8, lsl #31
   2af6c:	andeq	sl, r2, r8, lsl #31
   2af70:	andeq	sl, r2, r8, lsl #31
   2af74:	andeq	sl, r2, r8, lsl #31
   2af78:	andeq	sl, r2, ip, ror #31
   2af7c:	ldrb	ip, [r1, r2, lsl #3]
   2af80:	lsrs	ip, ip, #7
   2af84:	movne	r9, r3
   2af88:	add	r2, r2, #1
   2af8c:	cmp	r2, r7
   2af90:	add	r5, r5, #8
   2af94:	bne	2af38 <__assert_fail@plt+0x19394>
   2af98:	orr	r9, r9, lr
   2af9c:	ands	r9, r9, #255	; 0xff
   2afa0:	beq	2b04c <__assert_fail@plt+0x194a8>
   2afa4:	add	r2, r1, r2, lsl #3
   2afa8:	mov	r1, #7
   2afac:	b	2afc4 <__assert_fail@plt+0x19420>
   2afb0:	cmp	r3, #5
   2afb4:	strbeq	r1, [r0, #4]
   2afb8:	add	r0, r0, #8
   2afbc:	cmp	r0, r2
   2afc0:	beq	2b048 <__assert_fail@plt+0x194a4>
   2afc4:	ldrb	r3, [r0, #4]
   2afc8:	cmp	r3, #1
   2afcc:	bne	2afb0 <__assert_fail@plt+0x1940c>
   2afd0:	ldrsb	r3, [r0]
   2afd4:	cmp	r3, #0
   2afd8:	ldrblt	r3, [r0, #6]
   2afdc:	biclt	r3, r3, #32
   2afe0:	strblt	r3, [r0, #6]
   2afe4:	b	2afb8 <__assert_fail@plt+0x19414>
   2afe8:	bl	11b68 <abort@plt>
   2afec:	ldr	ip, [r1, r2, lsl #3]
   2aff0:	cmp	ip, #32
   2aff4:	beq	2af88 <__assert_fail@plt+0x193e4>
   2aff8:	bls	2b03c <__assert_fail@plt+0x19498>
   2affc:	cmp	ip, #64	; 0x40
   2b000:	beq	2af88 <__assert_fail@plt+0x193e4>
   2b004:	cmp	ip, #128	; 0x80
   2b008:	beq	2af88 <__assert_fail@plt+0x193e4>
   2b00c:	b	2abf8 <__assert_fail@plt+0x19054>
   2b010:	mov	lr, r3
   2b014:	b	2af88 <__assert_fail@plt+0x193e4>
   2b018:	ldr	ip, [r1, r2, lsl #3]
   2b01c:	add	r6, ip, #12
   2b020:	add	ip, ip, #28
   2b024:	ldr	sl, [r6, #4]!
   2b028:	cmp	sl, #0
   2b02c:	bne	2abf8 <__assert_fail@plt+0x19054>
   2b030:	cmp	r6, ip
   2b034:	bne	2b024 <__assert_fail@plt+0x19480>
   2b038:	b	2af88 <__assert_fail@plt+0x193e4>
   2b03c:	cmp	ip, #16
   2b040:	beq	2af88 <__assert_fail@plt+0x193e4>
   2b044:	b	2abf8 <__assert_fail@plt+0x19054>
   2b048:	mov	r9, lr
   2b04c:	ldr	r2, [r4, #76]	; 0x4c
   2b050:	ldrb	r3, [r4, #88]	; 0x58
   2b054:	cmp	r2, #0
   2b058:	movle	r2, r9
   2b05c:	orrgt	r2, r9, #1
   2b060:	and	r2, r2, #1
   2b064:	and	r3, r3, #249	; 0xf9
   2b068:	orr	r3, r3, r2, lsl #1
   2b06c:	mov	r2, #1
   2b070:	strb	r3, [r4, #88]	; 0x58
   2b074:	str	r2, [r4, #92]	; 0x5c
   2b078:	b	2abf8 <__assert_fail@plt+0x19054>
   2b07c:	beq	fead5b28 <optarg@@GLIBC_2.4+0xfea938e8>
   2b080:	muleq	r3, r0, lr
	...
   2b08c:	andeq	r0, r2, r8, ror r2
   2b090:	andeq	r0, r2, r0, lsr fp
   2b094:	andeq	r1, r2, r4, ror r3
   2b098:	andeq	r0, r2, ip, lsl r3
   2b09c:	ldrdeq	r1, [r3], -r8
   2b0a0:	ldr	r3, [pc, #96]	; 2b108 <__assert_fail@plt+0x19564>
   2b0a4:	push	{r4, lr}
   2b0a8:	mov	lr, r2
   2b0ac:	ldr	r3, [r3]
   2b0b0:	ldrb	ip, [lr, #28]
   2b0b4:	mov	r2, r1
   2b0b8:	mov	r1, r0
   2b0bc:	lsr	r0, r3, #21
   2b0c0:	and	r4, r0, #16
   2b0c4:	and	r0, ip, #239	; 0xef
   2b0c8:	orr	r0, r0, r4
   2b0cc:	orr	r0, r0, #128	; 0x80
   2b0d0:	strb	r0, [lr, #28]
   2b0d4:	mov	r0, lr
   2b0d8:	bl	2a1a8 <__assert_fail@plt+0x18604>
   2b0dc:	subs	r3, r0, #0
   2b0e0:	popeq	{r4, pc}
   2b0e4:	ldr	r1, [pc, #32]	; 2b10c <__assert_fail@plt+0x19568>
   2b0e8:	mov	r2, #5
   2b0ec:	add	r3, r1, r3, lsl #2
   2b0f0:	add	r1, r1, #32
   2b0f4:	ldr	r3, [r3, #416]	; 0x1a0
   2b0f8:	mov	r0, #0
   2b0fc:	add	r1, r1, r3
   2b100:	pop	{r4, lr}
   2b104:	b	117d8 <dcgettext@plt>
   2b108:	strdeq	r2, [r4], -ip
   2b10c:	muleq	r3, r0, lr
   2b110:	ldr	r3, [pc, #12]	; 2b124 <__assert_fail@plt+0x19580>
   2b114:	ldr	r2, [r3]
   2b118:	str	r0, [r3]
   2b11c:	mov	r0, r2
   2b120:	bx	lr
   2b124:	strdeq	r2, [r4], -ip
   2b128:	push	{r4, r5, r6, lr}
   2b12c:	mov	r2, #256	; 0x100
   2b130:	ldr	r5, [r0]
   2b134:	ldr	r6, [r0, #16]
   2b138:	mov	r4, r0
   2b13c:	mov	r1, #0
   2b140:	mov	r0, r6
   2b144:	bl	119e8 <memset@plt>
   2b148:	ldr	r1, [r5, #36]	; 0x24
   2b14c:	mov	r3, r6
   2b150:	add	r2, r1, #12
   2b154:	mov	r0, r4
   2b158:	add	r1, r1, #8
   2b15c:	bl	24060 <__assert_fail@plt+0x124bc>
   2b160:	ldr	r0, [r5, #40]	; 0x28
   2b164:	ldr	r3, [r5, #36]	; 0x24
   2b168:	cmp	r3, r0
   2b16c:	beq	2b188 <__assert_fail@plt+0x195e4>
   2b170:	add	r2, r0, #12
   2b174:	add	r1, r0, #8
   2b178:	mov	r3, r6
   2b17c:	mov	r0, r4
   2b180:	bl	24060 <__assert_fail@plt+0x124bc>
   2b184:	ldr	r0, [r5, #36]	; 0x24
   2b188:	ldr	r1, [r5, #44]	; 0x2c
   2b18c:	cmp	r1, r0
   2b190:	beq	2b1ac <__assert_fail@plt+0x19608>
   2b194:	add	r2, r1, #12
   2b198:	mov	r0, r4
   2b19c:	mov	r3, r6
   2b1a0:	add	r1, r1, #8
   2b1a4:	bl	24060 <__assert_fail@plt+0x124bc>
   2b1a8:	ldr	r0, [r5, #36]	; 0x24
   2b1ac:	ldr	r1, [r5, #48]	; 0x30
   2b1b0:	cmp	r1, r0
   2b1b4:	beq	2b1cc <__assert_fail@plt+0x19628>
   2b1b8:	add	r2, r1, #12
   2b1bc:	mov	r3, r6
   2b1c0:	add	r1, r1, #8
   2b1c4:	mov	r0, r4
   2b1c8:	bl	24060 <__assert_fail@plt+0x124bc>
   2b1cc:	ldrb	r3, [r4, #28]
   2b1d0:	mov	r0, #0
   2b1d4:	orr	r3, r3, #8
   2b1d8:	strb	r3, [r4, #28]
   2b1dc:	pop	{r4, r5, r6, pc}
   2b1e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1e4:	cmp	r3, r2
   2b1e8:	mov	r5, r3
   2b1ec:	sub	sp, sp, #52	; 0x34
   2b1f0:	movle	r3, #0
   2b1f4:	movgt	r3, #1
   2b1f8:	orrs	r3, r3, r5, lsr #31
   2b1fc:	ldrb	r3, [sp, #100]	; 0x64
   2b200:	ldr	ip, [sp, #88]	; 0x58
   2b204:	ldr	sl, [r0]
   2b208:	add	r8, r5, ip
   2b20c:	ldr	r7, [sp, #96]	; 0x60
   2b210:	str	r3, [sp, #32]
   2b214:	bne	2b4bc <__assert_fail@plt+0x19918>
   2b218:	cmp	r8, r2
   2b21c:	bgt	2b4b4 <__assert_fail@plt+0x19910>
   2b220:	cmp	ip, #0
   2b224:	cmpge	r5, r8
   2b228:	movgt	lr, #1
   2b22c:	movle	lr, #0
   2b230:	bgt	2b4b4 <__assert_fail@plt+0x19910>
   2b234:	cmp	r8, #0
   2b238:	blt	2b548 <__assert_fail@plt+0x199a4>
   2b23c:	cmp	r5, r8
   2b240:	movgt	lr, #0
   2b244:	movle	lr, #1
   2b248:	ands	r3, lr, ip, lsr #31
   2b24c:	movne	r8, #0
   2b250:	ldr	lr, [pc, #796]	; 2b574 <__assert_fail@plt+0x199d0>
   2b254:	ldr	r4, [pc, #796]	; 2b578 <__assert_fail@plt+0x199d4>
   2b258:	cmp	lr, #0
   2b25c:	mov	ip, #1
   2b260:	moveq	ip, lr
   2b264:	cmp	r4, #0
   2b268:	mov	lr, #1
   2b26c:	moveq	lr, r4
   2b270:	str	r2, [sp, #40]	; 0x28
   2b274:	orr	r2, ip, lr
   2b278:	ands	r3, r2, #255	; 0xff
   2b27c:	str	r1, [sp, #44]	; 0x2c
   2b280:	mov	r6, r0
   2b284:	str	r3, [sp, #28]
   2b288:	beq	2b294 <__assert_fail@plt+0x196f0>
   2b28c:	add	r0, sl, #136	; 0x88
   2b290:	bl	11760 <pthread_mutex_lock@plt>
   2b294:	ldrb	r2, [r6, #28]
   2b298:	cmp	r8, r5
   2b29c:	lsr	fp, r2, #5
   2b2a0:	and	r3, fp, #3
   2b2a4:	str	r3, [sp, #36]	; 0x24
   2b2a8:	bgt	2b35c <__assert_fail@plt+0x197b8>
   2b2ac:	lsr	r1, r2, #4
   2b2b0:	and	r1, r1, #1
   2b2b4:	cmp	r7, #0
   2b2b8:	orreq	r1, r1, #1
   2b2bc:	cmp	r1, #0
   2b2c0:	bne	2b550 <__assert_fail@plt+0x199ac>
   2b2c4:	and	r2, r2, #6
   2b2c8:	cmp	r2, #4
   2b2cc:	ldrne	r0, [r6, #24]
   2b2d0:	beq	2b518 <__assert_fail@plt+0x19974>
   2b2d4:	add	fp, r0, #1
   2b2d8:	mov	r4, fp
   2b2dc:	lsl	r0, fp, #3
   2b2e0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2b2e4:	subs	r9, r0, #0
   2b2e8:	beq	2b4cc <__assert_fail@plt+0x19928>
   2b2ec:	ldr	r3, [sp, #36]	; 0x24
   2b2f0:	str	r9, [sp, #12]
   2b2f4:	str	r3, [sp, #16]
   2b2f8:	ldr	r3, [sp, #92]	; 0x5c
   2b2fc:	str	fp, [sp, #8]
   2b300:	str	r3, [sp, #4]
   2b304:	str	r8, [sp]
   2b308:	ldr	r2, [sp, #40]	; 0x28
   2b30c:	ldr	r1, [sp, #44]	; 0x2c
   2b310:	mov	r3, r5
   2b314:	mov	r0, r6
   2b318:	bl	25a8c <__assert_fail@plt+0x13ee8>
   2b31c:	cmp	r0, #0
   2b320:	beq	2b380 <__assert_fail@plt+0x197dc>
   2b324:	cmp	r0, #1
   2b328:	mvneq	r5, #0
   2b32c:	beq	2b334 <__assert_fail@plt+0x19790>
   2b330:	mvn	r5, #1
   2b334:	mov	r0, r9
   2b338:	bl	17274 <__assert_fail@plt+0x56d0>
   2b33c:	ldr	r3, [sp, #28]
   2b340:	cmp	r3, #0
   2b344:	beq	2b350 <__assert_fail@plt+0x197ac>
   2b348:	add	r0, sl, #136	; 0x88
   2b34c:	bl	11694 <pthread_mutex_unlock@plt>
   2b350:	mov	r0, r5
   2b354:	add	sp, sp, #52	; 0x34
   2b358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b35c:	ldr	r1, [r6, #16]
   2b360:	cmp	r1, #0
   2b364:	beq	2b2ac <__assert_fail@plt+0x19708>
   2b368:	tst	r2, #8
   2b36c:	bne	2b2ac <__assert_fail@plt+0x19708>
   2b370:	mov	r0, r6
   2b374:	bl	2b128 <__assert_fail@plt+0x19584>
   2b378:	ldrb	r2, [r6, #28]
   2b37c:	b	2b2ac <__assert_fail@plt+0x19708>
   2b380:	cmp	r7, #0
   2b384:	beq	2b42c <__assert_fail@plt+0x19888>
   2b388:	ldrb	r8, [r6, #28]
   2b38c:	add	fp, r4, #1
   2b390:	lsr	r8, r8, #1
   2b394:	ands	r8, r8, #3
   2b398:	beq	2b4d4 <__assert_fail@plt+0x19930>
   2b39c:	cmp	r8, #1
   2b3a0:	movne	r8, #2
   2b3a4:	beq	2b448 <__assert_fail@plt+0x198a4>
   2b3a8:	cmp	r4, #0
   2b3ac:	ble	2b564 <__assert_fail@plt+0x199c0>
   2b3b0:	ldmib	r7, {r1, r2}
   2b3b4:	mov	r3, r9
   2b3b8:	add	ip, r9, r4, lsl #3
   2b3bc:	sub	r1, r1, #4
   2b3c0:	sub	r2, r2, #4
   2b3c4:	ldr	r0, [r3]
   2b3c8:	add	r3, r3, #8
   2b3cc:	str	r0, [r1, #4]!
   2b3d0:	ldr	r0, [r3, #-4]
   2b3d4:	cmp	ip, r3
   2b3d8:	str	r0, [r2, #4]!
   2b3dc:	bne	2b3c4 <__assert_fail@plt+0x19820>
   2b3e0:	ldr	r2, [r7]
   2b3e4:	mov	r3, r4
   2b3e8:	cmp	r2, r4
   2b3ec:	bls	2b414 <__assert_fail@plt+0x19870>
   2b3f0:	ldmib	r7, {r0, r1}
   2b3f4:	mvn	r2, #0
   2b3f8:	str	r2, [r1, r3, lsl #2]
   2b3fc:	str	r2, [r0, r3, lsl #2]
   2b400:	ldr	r3, [r7]
   2b404:	add	r4, r4, #1
   2b408:	cmp	r4, r3
   2b40c:	mov	r3, r4
   2b410:	bcc	2b3f8 <__assert_fail@plt+0x19854>
   2b414:	ldrb	r3, [r6, #28]
   2b418:	bic	r3, r3, #6
   2b41c:	orr	r8, r3, r8, lsl #1
   2b420:	tst	r8, #6
   2b424:	strb	r8, [r6, #28]
   2b428:	beq	2b330 <__assert_fail@plt+0x1978c>
   2b42c:	ldr	r3, [sp, #32]
   2b430:	cmp	r3, #0
   2b434:	ldrne	r3, [r9, #4]
   2b438:	subne	r5, r3, r5
   2b43c:	bne	2b334 <__assert_fail@plt+0x19790>
   2b440:	ldr	r5, [r9]
   2b444:	b	2b334 <__assert_fail@plt+0x19790>
   2b448:	ldr	r3, [r7]
   2b44c:	cmp	r3, fp
   2b450:	bcs	2b3a8 <__assert_fail@plt+0x19804>
   2b454:	lsl	r2, fp, #2
   2b458:	mov	r1, r2
   2b45c:	ldr	r0, [r7, #4]
   2b460:	str	r2, [sp, #40]	; 0x28
   2b464:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   2b468:	subs	r3, r0, #0
   2b46c:	str	r3, [sp, #36]	; 0x24
   2b470:	beq	2b56c <__assert_fail@plt+0x199c8>
   2b474:	ldr	r2, [sp, #40]	; 0x28
   2b478:	ldr	r0, [r7, #8]
   2b47c:	mov	r1, r2
   2b480:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   2b484:	ldr	r3, [sp, #36]	; 0x24
   2b488:	subs	r2, r0, #0
   2b48c:	strne	r3, [r7, #4]
   2b490:	strne	r2, [r7, #8]
   2b494:	strne	fp, [r7]
   2b498:	bne	2b3a8 <__assert_fail@plt+0x19804>
   2b49c:	mov	r0, r3
   2b4a0:	str	r2, [sp, #36]	; 0x24
   2b4a4:	bl	17274 <__assert_fail@plt+0x56d0>
   2b4a8:	ldr	r2, [sp, #36]	; 0x24
   2b4ac:	mov	r8, r2
   2b4b0:	b	2b414 <__assert_fail@plt+0x19870>
   2b4b4:	mov	r8, r2
   2b4b8:	b	2b250 <__assert_fail@plt+0x196ac>
   2b4bc:	mvn	r5, #0
   2b4c0:	mov	r0, r5
   2b4c4:	add	sp, sp, #52	; 0x34
   2b4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b4cc:	mvn	r5, #1
   2b4d0:	b	2b33c <__assert_fail@plt+0x19798>
   2b4d4:	lsl	r8, fp, #2
   2b4d8:	mov	r0, r8
   2b4dc:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2b4e0:	cmp	r0, #0
   2b4e4:	str	r0, [r7, #4]
   2b4e8:	beq	2b56c <__assert_fail@plt+0x199c8>
   2b4ec:	mov	r0, r8
   2b4f0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2b4f4:	cmp	r0, #0
   2b4f8:	mov	r8, r0
   2b4fc:	str	r0, [r7, #8]
   2b500:	strne	fp, [r7]
   2b504:	movne	r8, #1
   2b508:	bne	2b3a8 <__assert_fail@plt+0x19804>
   2b50c:	ldr	r0, [r7, #4]
   2b510:	bl	17274 <__assert_fail@plt+0x56d0>
   2b514:	b	2b414 <__assert_fail@plt+0x19870>
   2b518:	ldr	fp, [r7]
   2b51c:	ldr	r0, [r6, #24]
   2b520:	cmp	fp, r0
   2b524:	bhi	2b2d4 <__assert_fail@plt+0x19730>
   2b528:	cmp	fp, #0
   2b52c:	mov	r4, fp
   2b530:	bgt	2b2dc <__assert_fail@plt+0x19738>
   2b534:	mov	fp, #1
   2b538:	mov	r7, r1
   2b53c:	mov	r4, fp
   2b540:	mov	r0, #8
   2b544:	b	2b2e0 <__assert_fail@plt+0x1973c>
   2b548:	mov	r8, lr
   2b54c:	b	2b250 <__assert_fail@plt+0x196ac>
   2b550:	mov	fp, #1
   2b554:	mov	r4, fp
   2b558:	mov	r0, #8
   2b55c:	mov	r7, #0
   2b560:	b	2b2e0 <__assert_fail@plt+0x1973c>
   2b564:	mov	r4, #0
   2b568:	b	2b3e0 <__assert_fail@plt+0x1983c>
   2b56c:	mov	r8, #0
   2b570:	b	2b414 <__assert_fail@plt+0x19870>
	...
   2b57c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b580:	sub	sp, sp, #28
   2b584:	mov	r5, r2
   2b588:	ldr	r6, [sp, #80]	; 0x50
   2b58c:	ldr	r4, [sp, #64]	; 0x40
   2b590:	orr	r2, r2, r6
   2b594:	orrs	r2, r2, r4
   2b598:	ldrb	fp, [sp, #84]	; 0x54
   2b59c:	bmi	2b5c0 <__assert_fail@plt+0x19a1c>
   2b5a0:	cmp	r4, #0
   2b5a4:	mov	sl, r0
   2b5a8:	mov	r7, r3
   2b5ac:	blt	2b5d0 <__assert_fail@plt+0x19a2c>
   2b5b0:	mvn	r3, #-2147483648	; 0x80000000
   2b5b4:	sub	r3, r3, r4
   2b5b8:	cmp	r5, r3
   2b5bc:	ble	2b5d0 <__assert_fail@plt+0x19a2c>
   2b5c0:	mvn	r4, #1
   2b5c4:	mov	r0, r4
   2b5c8:	add	sp, sp, #28
   2b5cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5d0:	cmp	r4, #0
   2b5d4:	add	r9, r5, r4
   2b5d8:	ble	2b664 <__assert_fail@plt+0x19ac0>
   2b5dc:	cmp	r5, #0
   2b5e0:	str	r1, [sp, #20]
   2b5e4:	beq	2b65c <__assert_fail@plt+0x19ab8>
   2b5e8:	mov	r0, r9
   2b5ec:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2b5f0:	subs	r8, r0, #0
   2b5f4:	beq	2b5c0 <__assert_fail@plt+0x19a1c>
   2b5f8:	ldr	r1, [sp, #20]
   2b5fc:	mov	r2, r5
   2b600:	bl	11784 <memcpy@plt>
   2b604:	mov	r1, r7
   2b608:	mov	r2, r4
   2b60c:	add	r0, r8, r5
   2b610:	bl	11784 <memcpy@plt>
   2b614:	mov	r7, r8
   2b618:	ldr	r3, [sp, #76]	; 0x4c
   2b61c:	mov	r2, r9
   2b620:	str	r3, [sp, #8]
   2b624:	ldr	r3, [sp, #72]	; 0x48
   2b628:	mov	r1, r7
   2b62c:	str	r3, [sp]
   2b630:	str	fp, [sp, #12]
   2b634:	ldr	r3, [sp, #68]	; 0x44
   2b638:	str	r6, [sp, #4]
   2b63c:	mov	r0, sl
   2b640:	bl	2b1e0 <__assert_fail@plt+0x1963c>
   2b644:	mov	r4, r0
   2b648:	mov	r0, r8
   2b64c:	bl	17274 <__assert_fail@plt+0x56d0>
   2b650:	mov	r0, r4
   2b654:	add	sp, sp, #28
   2b658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b65c:	mov	r8, r5
   2b660:	b	2b618 <__assert_fail@plt+0x19a74>
   2b664:	mov	r7, r1
   2b668:	mov	r8, #0
   2b66c:	b	2b618 <__assert_fail@plt+0x19a74>
   2b670:	push	{r4, r5, r6, r7, r8, lr}
   2b674:	mov	r5, r2
   2b678:	ldr	r3, [pc, #228]	; 2b764 <__assert_fail@plt+0x19bc0>
   2b67c:	mov	r2, #0
   2b680:	tst	r5, #1
   2b684:	mov	r4, r0
   2b688:	str	r2, [r0]
   2b68c:	str	r2, [r0, #4]
   2b690:	str	r2, [r0, #8]
   2b694:	mov	r0, #256	; 0x100
   2b698:	ldr	r6, [pc, #200]	; 2b768 <__assert_fail@plt+0x19bc4>
   2b69c:	mov	r7, r1
   2b6a0:	moveq	r6, r3
   2b6a4:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2b6a8:	cmp	r0, #0
   2b6ac:	str	r0, [r4, #16]
   2b6b0:	beq	2b75c <__assert_fail@plt+0x19bb8>
   2b6b4:	tst	r5, #2
   2b6b8:	movne	r3, #4194304	; 0x400000
   2b6bc:	moveq	r3, #0
   2b6c0:	orr	r6, r6, r3
   2b6c4:	ldrb	r3, [r4, #28]
   2b6c8:	tst	r5, #4
   2b6cc:	lsl	r5, r5, #1
   2b6d0:	orrne	r3, r3, #128	; 0x80
   2b6d4:	biceq	r3, r3, #128	; 0x80
   2b6d8:	strb	r3, [r4, #28]
   2b6dc:	ldrb	r2, [r4, #28]
   2b6e0:	and	r5, r5, #16
   2b6e4:	mov	r3, #0
   2b6e8:	bic	r2, r2, #16
   2b6ec:	orr	r5, r5, r2
   2b6f0:	bicne	r6, r6, #64	; 0x40
   2b6f4:	strb	r5, [r4, #28]
   2b6f8:	str	r3, [r4, #20]
   2b6fc:	mov	r0, r7
   2b700:	orrne	r6, r6, #256	; 0x100
   2b704:	bl	11988 <strlen@plt>
   2b708:	mov	r3, r6
   2b70c:	mov	r1, r7
   2b710:	mov	r2, r0
   2b714:	mov	r0, r4
   2b718:	bl	2a1a8 <__assert_fail@plt+0x18604>
   2b71c:	cmp	r0, #16
   2b720:	mov	r5, r0
   2b724:	beq	2b740 <__assert_fail@plt+0x19b9c>
   2b728:	cmp	r0, #0
   2b72c:	bne	2b744 <__assert_fail@plt+0x19ba0>
   2b730:	mov	r0, r4
   2b734:	bl	2b128 <__assert_fail@plt+0x19584>
   2b738:	mov	r0, r5
   2b73c:	pop	{r4, r5, r6, r7, r8, pc}
   2b740:	mov	r5, #8
   2b744:	ldr	r0, [r4, #16]
   2b748:	bl	17274 <__assert_fail@plt+0x56d0>
   2b74c:	mov	r3, #0
   2b750:	mov	r0, r5
   2b754:	str	r3, [r4, #16]
   2b758:	pop	{r4, r5, r6, r7, r8, pc}
   2b75c:	mov	r0, #12
   2b760:	pop	{r4, r5, r6, r7, r8, pc}
   2b764:	smlabteq	r1, r6, r2, r0
   2b768:	strdeq	fp, [r3], -ip
   2b76c:	cmp	r0, #16
   2b770:	push	{r4, r5, r6, r7, r8, lr}
   2b774:	bhi	2b7dc <__assert_fail@plt+0x19c38>
   2b778:	ldr	r1, [pc, #96]	; 2b7e0 <__assert_fail@plt+0x19c3c>
   2b77c:	mov	r4, r3
   2b780:	add	r0, r1, r0, lsl #2
   2b784:	add	r1, r1, #32
   2b788:	ldr	r3, [r0, #416]	; 0x1a0
   2b78c:	mov	r6, r2
   2b790:	add	r1, r1, r3
   2b794:	mov	r2, #5
   2b798:	mov	r0, #0
   2b79c:	bl	117d8 <dcgettext@plt>
   2b7a0:	mov	r7, r0
   2b7a4:	bl	11988 <strlen@plt>
   2b7a8:	cmp	r4, #0
   2b7ac:	add	r5, r0, #1
   2b7b0:	beq	2b7d4 <__assert_fail@plt+0x19c30>
   2b7b4:	cmp	r5, r4
   2b7b8:	subhi	r2, r4, #1
   2b7bc:	movhi	r3, #0
   2b7c0:	strbhi	r3, [r6, r2]
   2b7c4:	movls	r2, r5
   2b7c8:	mov	r1, r7
   2b7cc:	mov	r0, r6
   2b7d0:	bl	11784 <memcpy@plt>
   2b7d4:	mov	r0, r5
   2b7d8:	pop	{r4, r5, r6, r7, r8, pc}
   2b7dc:	bl	11b68 <abort@plt>
   2b7e0:	muleq	r3, r0, lr
   2b7e4:	push	{r4, r5, r6, lr}
   2b7e8:	mov	r4, r0
   2b7ec:	ldr	r5, [r0]
   2b7f0:	cmp	r5, #0
   2b7f4:	beq	2b834 <__assert_fail@plt+0x19c90>
   2b7f8:	ldr	r2, [pc, #92]	; 2b85c <__assert_fail@plt+0x19cb8>
   2b7fc:	ldr	r1, [pc, #92]	; 2b860 <__assert_fail@plt+0x19cbc>
   2b800:	cmp	r2, #0
   2b804:	mov	r3, #1
   2b808:	moveq	r3, r2
   2b80c:	cmp	r1, #0
   2b810:	mov	r2, #1
   2b814:	moveq	r2, r1
   2b818:	orr	r3, r3, r2
   2b81c:	tst	r3, #1
   2b820:	beq	2b82c <__assert_fail@plt+0x19c88>
   2b824:	add	r0, r5, #136	; 0x88
   2b828:	bl	11718 <pthread_mutex_destroy@plt>
   2b82c:	mov	r0, r5
   2b830:	bl	1f8ac <__assert_fail@plt+0xdd08>
   2b834:	mov	r5, #0
   2b838:	ldr	r0, [r4, #16]
   2b83c:	str	r5, [r4]
   2b840:	str	r5, [r4, #4]
   2b844:	bl	17274 <__assert_fail@plt+0x56d0>
   2b848:	str	r5, [r4, #16]
   2b84c:	ldr	r0, [r4, #20]
   2b850:	bl	17274 <__assert_fail@plt+0x56d0>
   2b854:	str	r5, [r4, #20]
   2b858:	pop	{r4, r5, r6, pc}
	...
   2b864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b868:	sub	sp, sp, #36	; 0x24
   2b86c:	ldr	r4, [sp, #72]	; 0x48
   2b870:	bics	ip, r4, #7
   2b874:	movne	r0, #2
   2b878:	beq	2b884 <__assert_fail@plt+0x19ce0>
   2b87c:	add	sp, sp, #36	; 0x24
   2b880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b884:	ands	fp, r4, #4
   2b888:	mov	r8, r3
   2b88c:	str	r2, [sp, #28]
   2b890:	mov	r7, r1
   2b894:	mov	r5, r0
   2b898:	bne	2b93c <__assert_fail@plt+0x19d98>
   2b89c:	mov	r0, r1
   2b8a0:	bl	11988 <strlen@plt>
   2b8a4:	mov	r9, r0
   2b8a8:	ldr	r3, [pc, #204]	; 2b97c <__assert_fail@plt+0x19dd8>
   2b8ac:	ldr	r1, [pc, #204]	; 2b980 <__assert_fail@plt+0x19ddc>
   2b8b0:	cmp	r3, #0
   2b8b4:	mov	r6, #1
   2b8b8:	moveq	r6, r3
   2b8bc:	cmp	r1, #0
   2b8c0:	mov	r3, #1
   2b8c4:	moveq	r3, r1
   2b8c8:	orr	r6, r6, r3
   2b8cc:	ands	r6, r6, #255	; 0xff
   2b8d0:	ldr	sl, [r5]
   2b8d4:	beq	2b8e0 <__assert_fail@plt+0x19d3c>
   2b8d8:	add	r0, sl, #136	; 0x88
   2b8dc:	bl	11760 <pthread_mutex_lock@plt>
   2b8e0:	ldrb	r3, [r5, #28]
   2b8e4:	tst	r3, #16
   2b8e8:	beq	2b948 <__assert_fail@plt+0x19da4>
   2b8ec:	mov	ip, #0
   2b8f0:	str	r4, [sp, #16]
   2b8f4:	str	r9, [sp, #4]
   2b8f8:	str	r9, [sp]
   2b8fc:	mov	r3, fp
   2b900:	mov	r2, r9
   2b904:	mov	r1, r7
   2b908:	mov	r0, r5
   2b90c:	str	ip, [sp, #12]
   2b910:	str	ip, [sp, #8]
   2b914:	bl	25a8c <__assert_fail@plt+0x13ee8>
   2b918:	mov	r4, r0
   2b91c:	cmp	r6, #0
   2b920:	beq	2b92c <__assert_fail@plt+0x19d88>
   2b924:	add	r0, sl, #136	; 0x88
   2b928:	bl	11694 <pthread_mutex_unlock@plt>
   2b92c:	adds	r0, r4, #0
   2b930:	movne	r0, #1
   2b934:	add	sp, sp, #36	; 0x24
   2b938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b93c:	ldr	fp, [r3]
   2b940:	ldr	r9, [r3, #4]
   2b944:	b	2b8a8 <__assert_fail@plt+0x19d04>
   2b948:	ldr	r3, [sp, #28]
   2b94c:	str	r4, [sp, #16]
   2b950:	str	r3, [sp, #8]
   2b954:	str	r8, [sp, #12]
   2b958:	str	r9, [sp, #4]
   2b95c:	str	r9, [sp]
   2b960:	mov	r3, fp
   2b964:	mov	r2, r9
   2b968:	mov	r1, r7
   2b96c:	mov	r0, r5
   2b970:	bl	25a8c <__assert_fail@plt+0x13ee8>
   2b974:	mov	r4, r0
   2b978:	b	2b91c <__assert_fail@plt+0x19d78>
	...
   2b984:	push	{r4, lr}
   2b988:	sub	sp, sp, #16
   2b98c:	mov	lr, #1
   2b990:	ldr	r4, [sp, #24]
   2b994:	mov	ip, #0
   2b998:	str	ip, [sp]
   2b99c:	stmib	sp, {r2, r4, lr}
   2b9a0:	bl	2b1e0 <__assert_fail@plt+0x1963c>
   2b9a4:	add	sp, sp, #16
   2b9a8:	pop	{r4, pc}
   2b9ac:	push	{r4, lr}
   2b9b0:	sub	sp, sp, #16
   2b9b4:	mov	ip, #0
   2b9b8:	ldr	r4, [sp, #24]
   2b9bc:	ldr	lr, [sp, #28]
   2b9c0:	str	r2, [sp, #4]
   2b9c4:	str	r4, [sp]
   2b9c8:	str	lr, [sp, #8]
   2b9cc:	str	ip, [sp, #12]
   2b9d0:	bl	2b1e0 <__assert_fail@plt+0x1963c>
   2b9d4:	add	sp, sp, #16
   2b9d8:	pop	{r4, pc}
   2b9dc:	push	{r4, r5, lr}
   2b9e0:	sub	sp, sp, #28
   2b9e4:	ldr	lr, [sp, #40]	; 0x28
   2b9e8:	ldr	ip, [sp, #44]	; 0x2c
   2b9ec:	ldr	r5, [sp, #48]	; 0x30
   2b9f0:	ldr	r4, [sp, #52]	; 0x34
   2b9f4:	str	lr, [sp]
   2b9f8:	str	ip, [sp, #4]
   2b9fc:	mov	lr, #1
   2ba00:	mov	ip, #0
   2ba04:	str	r5, [sp, #12]
   2ba08:	str	r4, [sp, #16]
   2ba0c:	str	lr, [sp, #20]
   2ba10:	str	ip, [sp, #8]
   2ba14:	bl	2b57c <__assert_fail@plt+0x199d8>
   2ba18:	add	sp, sp, #28
   2ba1c:	pop	{r4, r5, pc}
   2ba20:	push	{r4, r5, lr}
   2ba24:	sub	sp, sp, #28
   2ba28:	ldr	lr, [sp, #40]	; 0x28
   2ba2c:	ldr	ip, [sp, #44]	; 0x2c
   2ba30:	ldr	r5, [sp, #48]	; 0x30
   2ba34:	ldr	r4, [sp, #52]	; 0x34
   2ba38:	str	lr, [sp]
   2ba3c:	ldr	lr, [sp, #56]	; 0x38
   2ba40:	str	ip, [sp, #4]
   2ba44:	mov	ip, #0
   2ba48:	str	r5, [sp, #8]
   2ba4c:	str	r4, [sp, #12]
   2ba50:	str	lr, [sp, #16]
   2ba54:	str	ip, [sp, #20]
   2ba58:	bl	2b57c <__assert_fail@plt+0x199d8>
   2ba5c:	add	sp, sp, #28
   2ba60:	pop	{r4, r5, pc}
   2ba64:	cmp	r2, #0
   2ba68:	bne	2ba88 <__assert_fail@plt+0x19ee4>
   2ba6c:	ldrb	r3, [r0, #28]
   2ba70:	bic	r3, r3, #6
   2ba74:	strb	r3, [r0, #28]
   2ba78:	str	r2, [r1]
   2ba7c:	str	r2, [r1, #8]
   2ba80:	str	r2, [r1, #4]
   2ba84:	bx	lr
   2ba88:	ldrb	ip, [r0, #28]
   2ba8c:	bic	ip, ip, #4
   2ba90:	orr	ip, ip, #2
   2ba94:	strb	ip, [r0, #28]
   2ba98:	stm	r1, {r2, r3}
   2ba9c:	ldr	r3, [sp]
   2baa0:	str	r3, [r1, #8]
   2baa4:	bx	lr
   2baa8:	push	{r4, r5, r6, lr}
   2baac:	mov	r2, r1
   2bab0:	mov	r4, r1
   2bab4:	mov	r1, #0
   2bab8:	mov	r5, r0
   2babc:	bl	11a24 <memchr@plt>
   2bac0:	cmp	r0, #0
   2bac4:	subne	r0, r0, r5
   2bac8:	addne	r0, r0, #1
   2bacc:	moveq	r0, r4
   2bad0:	pop	{r4, r5, r6, pc}
   2bad4:	push	{r4, lr}
   2bad8:	ldrb	r3, [r0, #4]
   2badc:	cmp	r3, #0
   2bae0:	bne	2bafc <__assert_fail@plt+0x19f58>
   2bae4:	ldr	r0, [pc, #52]	; 2bb20 <__assert_fail@plt+0x19f7c>
   2bae8:	bl	11b44 <unsetenv@plt>
   2baec:	cmp	r0, #0
   2baf0:	beq	2bb14 <__assert_fail@plt+0x19f70>
   2baf4:	mov	r0, #0
   2baf8:	pop	{r4, pc}
   2bafc:	add	r1, r0, #5
   2bb00:	mov	r2, #1
   2bb04:	ldr	r0, [pc, #20]	; 2bb20 <__assert_fail@plt+0x19f7c>
   2bb08:	bl	119a0 <setenv@plt>
   2bb0c:	cmp	r0, #0
   2bb10:	bne	2baf4 <__assert_fail@plt+0x19f50>
   2bb14:	bl	11844 <tzset@plt>
   2bb18:	mov	r0, #1
   2bb1c:	pop	{r4, pc}
   2bb20:	andeq	r0, r3, ip, asr r4
   2bb24:	cmp	r0, #1
   2bb28:	push	{r4, r5, r6, r7, r8, lr}
   2bb2c:	mov	r4, r0
   2bb30:	moveq	r7, r0
   2bb34:	beq	2bb74 <__assert_fail@plt+0x19fd0>
   2bb38:	bl	119b8 <__errno_location@plt>
   2bb3c:	mov	r6, r0
   2bb40:	mov	r0, r4
   2bb44:	ldr	r8, [r6]
   2bb48:	bl	2bad4 <__assert_fail@plt+0x19f30>
   2bb4c:	subs	r7, r0, #0
   2bb50:	ldreq	r8, [r6]
   2bb54:	cmp	r4, #0
   2bb58:	beq	2bb70 <__assert_fail@plt+0x19fcc>
   2bb5c:	ldr	r5, [r4]
   2bb60:	mov	r0, r4
   2bb64:	bl	17274 <__assert_fail@plt+0x56d0>
   2bb68:	subs	r4, r5, #0
   2bb6c:	bne	2bb5c <__assert_fail@plt+0x19fb8>
   2bb70:	str	r8, [r6]
   2bb74:	mov	r0, r7
   2bb78:	pop	{r4, r5, r6, r7, r8, pc}
   2bb7c:	push	{r4, r5, r6, r7, r8, lr}
   2bb80:	subs	r7, r0, #0
   2bb84:	beq	2bbe0 <__assert_fail@plt+0x1a03c>
   2bb88:	bl	11988 <strlen@plt>
   2bb8c:	add	r5, r0, #1
   2bb90:	cmp	r5, #58	; 0x3a
   2bb94:	addhi	r0, r0, #10
   2bb98:	bichi	r0, r0, #3
   2bb9c:	movls	r0, #64	; 0x40
   2bba0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2bba4:	subs	r4, r0, #0
   2bba8:	beq	2bbd8 <__assert_fail@plt+0x1a034>
   2bbac:	mov	r3, r4
   2bbb0:	mov	r6, #0
   2bbb4:	mov	r2, #1
   2bbb8:	strb	r2, [r4, #4]
   2bbbc:	str	r6, [r4]
   2bbc0:	mov	r1, r7
   2bbc4:	strb	r6, [r3, #5]!
   2bbc8:	mov	r2, r5
   2bbcc:	mov	r0, r3
   2bbd0:	bl	11784 <memcpy@plt>
   2bbd4:	strb	r6, [r0, r5]
   2bbd8:	mov	r0, r4
   2bbdc:	pop	{r4, r5, r6, r7, r8, pc}
   2bbe0:	mov	r0, #64	; 0x40
   2bbe4:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2bbe8:	subs	r4, r0, #0
   2bbec:	beq	2bbd8 <__assert_fail@plt+0x1a034>
   2bbf0:	str	r7, [r4]
   2bbf4:	strb	r7, [r4, #4]
   2bbf8:	strb	r7, [r4, #5]
   2bbfc:	mov	r0, r4
   2bc00:	pop	{r4, r5, r6, r7, r8, pc}
   2bc04:	push	{r4, r5, r6, r7, r8, lr}
   2bc08:	ldr	r6, [r1, #40]	; 0x28
   2bc0c:	cmp	r6, #0
   2bc10:	beq	2bcd8 <__assert_fail@plt+0x1a134>
   2bc14:	cmp	r1, r6
   2bc18:	mov	r7, r1
   2bc1c:	mov	r5, r0
   2bc20:	bhi	2bc30 <__assert_fail@plt+0x1a08c>
   2bc24:	add	r3, r1, #44	; 0x2c
   2bc28:	cmp	r6, r3
   2bc2c:	bcc	2bcd8 <__assert_fail@plt+0x1a134>
   2bc30:	ldrb	r3, [r6]
   2bc34:	cmp	r3, #0
   2bc38:	addne	r4, r5, #5
   2bc3c:	beq	2bcd0 <__assert_fail@plt+0x1a12c>
   2bc40:	mov	r1, r6
   2bc44:	mov	r0, r4
   2bc48:	bl	1170c <strcmp@plt>
   2bc4c:	add	r2, r5, #5
   2bc50:	cmp	r0, #0
   2bc54:	mov	r0, r4
   2bc58:	beq	2bcc4 <__assert_fail@plt+0x1a120>
   2bc5c:	ldrb	r3, [r4]
   2bc60:	cmp	r3, #0
   2bc64:	bne	2bc7c <__assert_fail@plt+0x1a0d8>
   2bc68:	cmp	r4, r2
   2bc6c:	bne	2bce0 <__assert_fail@plt+0x1a13c>
   2bc70:	ldrb	r3, [r5, #4]
   2bc74:	cmp	r3, #0
   2bc78:	beq	2bce0 <__assert_fail@plt+0x1a13c>
   2bc7c:	bl	11988 <strlen@plt>
   2bc80:	add	r0, r0, #1
   2bc84:	ldrb	r3, [r4, r0]!
   2bc88:	cmp	r3, #0
   2bc8c:	bne	2bc40 <__assert_fail@plt+0x1a09c>
   2bc90:	ldr	r3, [r5]
   2bc94:	cmp	r3, #0
   2bc98:	addne	r4, r3, #5
   2bc9c:	movne	r5, r3
   2bca0:	b	2bc40 <__assert_fail@plt+0x1a09c>
   2bca4:	mov	r0, r6
   2bca8:	bl	2bb7c <__assert_fail@plt+0x19fd8>
   2bcac:	cmp	r0, #0
   2bcb0:	str	r0, [r5]
   2bcb4:	popeq	{r4, r5, r6, r7, r8, pc}
   2bcb8:	add	r4, r0, #5
   2bcbc:	mov	r3, #0
   2bcc0:	strb	r3, [r0, #4]
   2bcc4:	str	r4, [r7, #40]	; 0x28
   2bcc8:	mov	r0, #1
   2bccc:	pop	{r4, r5, r6, r7, r8, pc}
   2bcd0:	ldr	r4, [pc, #64]	; 2bd18 <__assert_fail@plt+0x1a174>
   2bcd4:	b	2bcc4 <__assert_fail@plt+0x1a120>
   2bcd8:	mov	r0, #1
   2bcdc:	pop	{r4, r5, r6, r7, r8, pc}
   2bce0:	mov	r0, r6
   2bce4:	bl	11988 <strlen@plt>
   2bce8:	add	r3, r5, #64	; 0x40
   2bcec:	sub	r3, r3, r4
   2bcf0:	add	r8, r0, #1
   2bcf4:	cmp	r8, r3
   2bcf8:	bge	2bca4 <__assert_fail@plt+0x1a100>
   2bcfc:	mov	r1, r6
   2bd00:	mov	r2, r8
   2bd04:	mov	r0, r4
   2bd08:	bl	11784 <memcpy@plt>
   2bd0c:	mov	r3, #0
   2bd10:	strb	r3, [r4, r8]
   2bd14:	b	2bcc4 <__assert_fail@plt+0x1a120>
   2bd18:	andeq	r0, r3, r4, lsr #23
   2bd1c:	push	{r4, r5, r6, r7, r8, lr}
   2bd20:	mov	r4, r0
   2bd24:	ldr	r0, [pc, #152]	; 2bdc4 <__assert_fail@plt+0x1a220>
   2bd28:	bl	118ec <getenv@plt>
   2bd2c:	ldrb	r3, [r4, #4]
   2bd30:	subs	r5, r0, #0
   2bd34:	beq	2bd7c <__assert_fail@plt+0x1a1d8>
   2bd38:	cmp	r3, #0
   2bd3c:	beq	2bd54 <__assert_fail@plt+0x1a1b0>
   2bd40:	mov	r1, r5
   2bd44:	add	r0, r4, #5
   2bd48:	bl	1170c <strcmp@plt>
   2bd4c:	cmp	r0, #0
   2bd50:	beq	2bd84 <__assert_fail@plt+0x1a1e0>
   2bd54:	mov	r0, r5
   2bd58:	bl	2bb7c <__assert_fail@plt+0x19fd8>
   2bd5c:	subs	r5, r0, #0
   2bd60:	beq	2bd74 <__assert_fail@plt+0x1a1d0>
   2bd64:	mov	r0, r4
   2bd68:	bl	2bad4 <__assert_fail@plt+0x19f30>
   2bd6c:	cmp	r0, #0
   2bd70:	beq	2bd90 <__assert_fail@plt+0x1a1ec>
   2bd74:	mov	r0, r5
   2bd78:	pop	{r4, r5, r6, r7, r8, pc}
   2bd7c:	cmp	r3, #0
   2bd80:	bne	2bd54 <__assert_fail@plt+0x1a1b0>
   2bd84:	mov	r5, #1
   2bd88:	mov	r0, r5
   2bd8c:	pop	{r4, r5, r6, r7, r8, pc}
   2bd90:	bl	119b8 <__errno_location@plt>
   2bd94:	cmp	r5, #1
   2bd98:	mov	r6, r0
   2bd9c:	ldr	r7, [r0]
   2bda0:	beq	2bdb8 <__assert_fail@plt+0x1a214>
   2bda4:	ldr	r4, [r5]
   2bda8:	mov	r0, r5
   2bdac:	bl	17274 <__assert_fail@plt+0x56d0>
   2bdb0:	subs	r5, r4, #0
   2bdb4:	bne	2bda4 <__assert_fail@plt+0x1a200>
   2bdb8:	str	r7, [r6]
   2bdbc:	mov	r5, #0
   2bdc0:	b	2bd74 <__assert_fail@plt+0x1a1d0>
   2bdc4:	andeq	r0, r3, ip, asr r4
   2bdc8:	cmp	r0, #1
   2bdcc:	bxeq	lr
   2bdd0:	cmp	r0, #0
   2bdd4:	beq	2bdf0 <__assert_fail@plt+0x1a24c>
   2bdd8:	push	{r4, lr}
   2bddc:	ldr	r4, [r0]
   2bde0:	bl	17274 <__assert_fail@plt+0x56d0>
   2bde4:	subs	r0, r4, #0
   2bde8:	bne	2bddc <__assert_fail@plt+0x1a238>
   2bdec:	pop	{r4, pc}
   2bdf0:	bx	lr
   2bdf4:	subs	ip, r0, #0
   2bdf8:	push	{r4, r5, r6, r7, r8, lr}
   2bdfc:	mov	r5, r1
   2be00:	beq	2be68 <__assert_fail@plt+0x1a2c4>
   2be04:	mov	r4, r2
   2be08:	mov	r6, ip
   2be0c:	bl	2bd1c <__assert_fail@plt+0x1a178>
   2be10:	subs	r7, r0, #0
   2be14:	beq	2be60 <__assert_fail@plt+0x1a2bc>
   2be18:	mov	r0, r5
   2be1c:	mov	r1, r4
   2be20:	bl	117fc <localtime_r@plt>
   2be24:	cmp	r0, #0
   2be28:	beq	2be58 <__assert_fail@plt+0x1a2b4>
   2be2c:	mov	r0, r6
   2be30:	mov	r1, r4
   2be34:	bl	2bc04 <__assert_fail@plt+0x1a060>
   2be38:	cmp	r0, #0
   2be3c:	beq	2be58 <__assert_fail@plt+0x1a2b4>
   2be40:	mov	r0, r7
   2be44:	bl	2bb24 <__assert_fail@plt+0x19f80>
   2be48:	cmp	r0, #0
   2be4c:	beq	2be60 <__assert_fail@plt+0x1a2bc>
   2be50:	mov	r0, r4
   2be54:	pop	{r4, r5, r6, r7, r8, pc}
   2be58:	mov	r0, r7
   2be5c:	bl	2bb24 <__assert_fail@plt+0x19f80>
   2be60:	mov	r0, #0
   2be64:	pop	{r4, r5, r6, r7, r8, pc}
   2be68:	mov	r0, r5
   2be6c:	mov	r1, r2
   2be70:	pop	{r4, r5, r6, r7, r8, lr}
   2be74:	b	116e8 <gmtime_r@plt>
   2be78:	push	{r4, r5, r6, r7, lr}
   2be7c:	subs	r7, r0, #0
   2be80:	sub	sp, sp, #52	; 0x34
   2be84:	mov	r4, r1
   2be88:	beq	2bf48 <__assert_fail@plt+0x1a3a4>
   2be8c:	bl	2bd1c <__assert_fail@plt+0x1a178>
   2be90:	subs	r6, r0, #0
   2be94:	beq	2bf40 <__assert_fail@plt+0x1a39c>
   2be98:	ldm	r4, {r1, r2, ip}
   2be9c:	ldr	r0, [r4, #12]
   2bea0:	ldr	r3, [r4, #16]
   2bea4:	str	r1, [sp, #4]
   2bea8:	str	r2, [sp, #8]
   2beac:	ldr	r1, [r4, #20]
   2beb0:	ldr	r2, [r4, #32]
   2beb4:	str	r0, [sp, #16]
   2beb8:	str	r3, [sp, #20]
   2bebc:	add	r0, sp, #4
   2bec0:	mvn	r3, #0
   2bec4:	str	r3, [sp, #32]
   2bec8:	str	ip, [sp, #12]
   2becc:	str	r1, [sp, #24]
   2bed0:	str	r2, [sp, #36]	; 0x24
   2bed4:	bl	11724 <mktime@plt>
   2bed8:	ldr	r3, [sp, #32]
   2bedc:	cmp	r3, #0
   2bee0:	mov	r5, r0
   2bee4:	blt	2bf38 <__assert_fail@plt+0x1a394>
   2bee8:	mov	r0, r7
   2beec:	add	r1, sp, #4
   2bef0:	bl	2bc04 <__assert_fail@plt+0x1a060>
   2bef4:	cmp	r0, #0
   2bef8:	beq	2bf38 <__assert_fail@plt+0x1a394>
   2befc:	mov	r0, r6
   2bf00:	bl	2bb24 <__assert_fail@plt+0x19f80>
   2bf04:	cmp	r0, #0
   2bf08:	beq	2bf40 <__assert_fail@plt+0x1a39c>
   2bf0c:	add	lr, sp, #4
   2bf10:	mov	ip, r4
   2bf14:	ldm	lr!, {r0, r1, r2, r3}
   2bf18:	stmia	ip!, {r0, r1, r2, r3}
   2bf1c:	ldm	lr!, {r0, r1, r2, r3}
   2bf20:	stmia	ip!, {r0, r1, r2, r3}
   2bf24:	ldm	lr, {r0, r1, r2}
   2bf28:	stm	ip, {r0, r1, r2}
   2bf2c:	mov	r0, r5
   2bf30:	add	sp, sp, #52	; 0x34
   2bf34:	pop	{r4, r5, r6, r7, pc}
   2bf38:	mov	r0, r6
   2bf3c:	bl	2bb24 <__assert_fail@plt+0x19f80>
   2bf40:	mvn	r5, #0
   2bf44:	b	2bf2c <__assert_fail@plt+0x1a388>
   2bf48:	mov	r0, r1
   2bf4c:	bl	11acc <timegm@plt>
   2bf50:	mov	r5, r0
   2bf54:	mov	r0, r5
   2bf58:	add	sp, sp, #52	; 0x34
   2bf5c:	pop	{r4, r5, r6, r7, pc}
   2bf60:	cmp	r0, #2
   2bf64:	push	{r4, r5, r6, r7, r8, lr}
   2bf68:	mov	r4, r0
   2bf6c:	bhi	2bf94 <__assert_fail@plt+0x1a3f0>
   2bf70:	bl	2e6d8 <__assert_fail@plt+0x1cb34>
   2bf74:	mov	r7, r0
   2bf78:	bl	119b8 <__errno_location@plt>
   2bf7c:	mov	r5, r0
   2bf80:	mov	r0, r4
   2bf84:	ldr	r6, [r5]
   2bf88:	mov	r4, r7
   2bf8c:	bl	11b80 <close@plt>
   2bf90:	str	r6, [r5]
   2bf94:	mov	r0, r4
   2bf98:	pop	{r4, r5, r6, r7, r8, pc}
   2bf9c:	push	{r4, r5, r6, lr}
   2bfa0:	sub	sp, sp, #32
   2bfa4:	cmp	r1, #0
   2bfa8:	mov	r4, r0
   2bfac:	ldr	r5, [sp, #48]	; 0x30
   2bfb0:	ldr	r6, [sp, #52]	; 0x34
   2bfb4:	beq	2c2cc <__assert_fail@plt+0x1a728>
   2bfb8:	stm	sp, {r2, r3}
   2bfbc:	mov	r3, r1
   2bfc0:	ldr	r2, [pc, #808]	; 2c2f0 <__assert_fail@plt+0x1a74c>
   2bfc4:	mov	r1, #1
   2bfc8:	bl	11a18 <__fprintf_chk@plt>
   2bfcc:	mov	r2, #5
   2bfd0:	ldr	r1, [pc, #796]	; 2c2f4 <__assert_fail@plt+0x1a750>
   2bfd4:	mov	r0, #0
   2bfd8:	bl	117d8 <dcgettext@plt>
   2bfdc:	ldr	r3, [pc, #788]	; 2c2f8 <__assert_fail@plt+0x1a754>
   2bfe0:	ldr	r2, [pc, #788]	; 2c2fc <__assert_fail@plt+0x1a758>
   2bfe4:	str	r3, [sp]
   2bfe8:	mov	r1, #1
   2bfec:	mov	r3, r0
   2bff0:	mov	r0, r4
   2bff4:	bl	11a18 <__fprintf_chk@plt>
   2bff8:	mov	r1, r4
   2bffc:	mov	r0, #10
   2c000:	bl	117cc <fputc_unlocked@plt>
   2c004:	mov	r2, #5
   2c008:	ldr	r1, [pc, #752]	; 2c300 <__assert_fail@plt+0x1a75c>
   2c00c:	mov	r0, #0
   2c010:	bl	117d8 <dcgettext@plt>
   2c014:	mov	r1, #1
   2c018:	ldr	r3, [pc, #740]	; 2c304 <__assert_fail@plt+0x1a760>
   2c01c:	mov	r2, r0
   2c020:	mov	r0, r4
   2c024:	bl	11a18 <__fprintf_chk@plt>
   2c028:	mov	r1, r4
   2c02c:	mov	r0, #10
   2c030:	bl	117cc <fputc_unlocked@plt>
   2c034:	cmp	r6, #9
   2c038:	ldrls	pc, [pc, r6, lsl #2]
   2c03c:	b	2c2e4 <__assert_fail@plt+0x1a740>
   2c040:	andeq	ip, r2, r4, asr #1
   2c044:	andeq	ip, r2, ip, asr #1
   2c048:	strdeq	ip, [r2], -r8
   2c04c:	andeq	ip, r2, ip, lsr #2
   2c050:	andeq	ip, r2, r8, ror #2
   2c054:	andeq	ip, r2, r4, lsr #3
   2c058:	andeq	ip, r2, r0, ror #3
   2c05c:	andeq	ip, r2, r4, lsr #4
   2c060:	andeq	ip, r2, r4, ror r2
   2c064:	andeq	ip, r2, r8, rrx
   2c068:	ldr	r1, [pc, #664]	; 2c308 <__assert_fail@plt+0x1a764>
   2c06c:	mov	r2, #5
   2c070:	mov	r0, #0
   2c074:	bl	117d8 <dcgettext@plt>
   2c078:	ldr	ip, [r5, #32]
   2c07c:	ldr	r1, [r5, #28]
   2c080:	ldr	r2, [r5, #24]
   2c084:	ldr	r3, [r5]
   2c088:	ldr	r6, [r5, #20]
   2c08c:	str	ip, [sp, #28]
   2c090:	ldr	lr, [r5, #16]
   2c094:	str	r1, [sp, #24]
   2c098:	ldr	ip, [r5, #12]
   2c09c:	str	r2, [sp, #20]
   2c0a0:	ldr	r1, [r5, #8]
   2c0a4:	ldr	r2, [r5, #4]
   2c0a8:	str	r6, [sp, #16]
   2c0ac:	stmib	sp, {r1, ip, lr}
   2c0b0:	mov	r1, #1
   2c0b4:	str	r2, [sp]
   2c0b8:	mov	r2, r0
   2c0bc:	mov	r0, r4
   2c0c0:	bl	11a18 <__fprintf_chk@plt>
   2c0c4:	add	sp, sp, #32
   2c0c8:	pop	{r4, r5, r6, pc}
   2c0cc:	mov	r2, #5
   2c0d0:	ldr	r1, [pc, #564]	; 2c30c <__assert_fail@plt+0x1a768>
   2c0d4:	mov	r0, #0
   2c0d8:	bl	117d8 <dcgettext@plt>
   2c0dc:	ldr	r3, [r5]
   2c0e0:	mov	r1, #1
   2c0e4:	mov	r2, r0
   2c0e8:	mov	r0, r4
   2c0ec:	add	sp, sp, #32
   2c0f0:	pop	{r4, r5, r6, lr}
   2c0f4:	b	11a18 <__fprintf_chk@plt>
   2c0f8:	mov	r2, #5
   2c0fc:	ldr	r1, [pc, #524]	; 2c310 <__assert_fail@plt+0x1a76c>
   2c100:	mov	r0, #0
   2c104:	bl	117d8 <dcgettext@plt>
   2c108:	ldr	r2, [r5, #4]
   2c10c:	ldr	r3, [r5]
   2c110:	mov	r1, #1
   2c114:	str	r2, [sp, #48]	; 0x30
   2c118:	mov	r2, r0
   2c11c:	mov	r0, r4
   2c120:	add	sp, sp, #32
   2c124:	pop	{r4, r5, r6, lr}
   2c128:	b	11a18 <__fprintf_chk@plt>
   2c12c:	mov	r2, #5
   2c130:	ldr	r1, [pc, #476]	; 2c314 <__assert_fail@plt+0x1a770>
   2c134:	mov	r0, #0
   2c138:	bl	117d8 <dcgettext@plt>
   2c13c:	ldr	r1, [r5, #8]
   2c140:	ldr	r2, [r5, #4]
   2c144:	ldr	r3, [r5]
   2c148:	str	r1, [sp, #52]	; 0x34
   2c14c:	str	r2, [sp, #48]	; 0x30
   2c150:	mov	r1, #1
   2c154:	mov	r2, r0
   2c158:	mov	r0, r4
   2c15c:	add	sp, sp, #32
   2c160:	pop	{r4, r5, r6, lr}
   2c164:	b	11a18 <__fprintf_chk@plt>
   2c168:	mov	r2, #5
   2c16c:	ldr	r1, [pc, #420]	; 2c318 <__assert_fail@plt+0x1a774>
   2c170:	mov	r0, #0
   2c174:	bl	117d8 <dcgettext@plt>
   2c178:	ldr	r1, [r5, #8]
   2c17c:	ldr	ip, [r5, #12]
   2c180:	ldr	r2, [r5, #4]
   2c184:	ldr	r3, [r5]
   2c188:	stmib	sp, {r1, ip}
   2c18c:	str	r2, [sp]
   2c190:	mov	r1, #1
   2c194:	mov	r2, r0
   2c198:	mov	r0, r4
   2c19c:	bl	11a18 <__fprintf_chk@plt>
   2c1a0:	b	2c0c4 <__assert_fail@plt+0x1a520>
   2c1a4:	mov	r2, #5
   2c1a8:	ldr	r1, [pc, #364]	; 2c31c <__assert_fail@plt+0x1a778>
   2c1ac:	mov	r0, #0
   2c1b0:	bl	117d8 <dcgettext@plt>
   2c1b4:	add	r1, r5, #8
   2c1b8:	ldr	r2, [r5, #4]
   2c1bc:	ldm	r1, {r1, ip, lr}
   2c1c0:	ldr	r3, [r5]
   2c1c4:	str	r2, [sp]
   2c1c8:	stmib	sp, {r1, ip, lr}
   2c1cc:	mov	r1, #1
   2c1d0:	mov	r2, r0
   2c1d4:	mov	r0, r4
   2c1d8:	bl	11a18 <__fprintf_chk@plt>
   2c1dc:	b	2c0c4 <__assert_fail@plt+0x1a520>
   2c1e0:	mov	r2, #5
   2c1e4:	ldr	r1, [pc, #308]	; 2c320 <__assert_fail@plt+0x1a77c>
   2c1e8:	mov	r0, #0
   2c1ec:	bl	117d8 <dcgettext@plt>
   2c1f0:	add	r1, r5, #8
   2c1f4:	ldr	r2, [r5, #4]
   2c1f8:	ldm	r1, {r1, ip, lr}
   2c1fc:	ldr	r6, [r5, #20]
   2c200:	ldr	r3, [r5]
   2c204:	stmib	sp, {r1, ip, lr}
   2c208:	mov	r1, #1
   2c20c:	str	r2, [sp]
   2c210:	str	r6, [sp, #16]
   2c214:	mov	r2, r0
   2c218:	mov	r0, r4
   2c21c:	bl	11a18 <__fprintf_chk@plt>
   2c220:	b	2c0c4 <__assert_fail@plt+0x1a520>
   2c224:	mov	r2, #5
   2c228:	ldr	r1, [pc, #244]	; 2c324 <__assert_fail@plt+0x1a780>
   2c22c:	mov	r0, #0
   2c230:	bl	117d8 <dcgettext@plt>
   2c234:	ldr	r2, [r5, #24]
   2c238:	ldr	r3, [r5]
   2c23c:	ldr	r6, [r5, #20]
   2c240:	ldr	lr, [r5, #16]
   2c244:	ldr	ip, [r5, #12]
   2c248:	str	r2, [sp, #20]
   2c24c:	ldr	r1, [r5, #8]
   2c250:	ldr	r2, [r5, #4]
   2c254:	str	r6, [sp, #16]
   2c258:	stmib	sp, {r1, ip, lr}
   2c25c:	mov	r1, #1
   2c260:	str	r2, [sp]
   2c264:	mov	r2, r0
   2c268:	mov	r0, r4
   2c26c:	bl	11a18 <__fprintf_chk@plt>
   2c270:	b	2c0c4 <__assert_fail@plt+0x1a520>
   2c274:	mov	r2, #5
   2c278:	ldr	r1, [pc, #168]	; 2c328 <__assert_fail@plt+0x1a784>
   2c27c:	mov	r0, #0
   2c280:	bl	117d8 <dcgettext@plt>
   2c284:	ldr	r1, [r5, #28]
   2c288:	ldr	r2, [r5, #24]
   2c28c:	ldr	r3, [r5]
   2c290:	ldr	r6, [r5, #20]
   2c294:	ldr	lr, [r5, #16]
   2c298:	str	r1, [sp, #24]
   2c29c:	ldr	ip, [r5, #12]
   2c2a0:	str	r2, [sp, #20]
   2c2a4:	ldr	r1, [r5, #8]
   2c2a8:	ldr	r2, [r5, #4]
   2c2ac:	str	r6, [sp, #16]
   2c2b0:	stmib	sp, {r1, ip, lr}
   2c2b4:	mov	r1, #1
   2c2b8:	str	r2, [sp]
   2c2bc:	mov	r2, r0
   2c2c0:	mov	r0, r4
   2c2c4:	bl	11a18 <__fprintf_chk@plt>
   2c2c8:	b	2c0c4 <__assert_fail@plt+0x1a520>
   2c2cc:	str	r3, [sp]
   2c2d0:	mov	r1, #1
   2c2d4:	mov	r3, r2
   2c2d8:	ldr	r2, [pc, #76]	; 2c32c <__assert_fail@plt+0x1a788>
   2c2dc:	bl	11a18 <__fprintf_chk@plt>
   2c2e0:	b	2bfcc <__assert_fail@plt+0x1a428>
   2c2e4:	mov	r2, #5
   2c2e8:	ldr	r1, [pc, #64]	; 2c330 <__assert_fail@plt+0x1a78c>
   2c2ec:	b	2c070 <__assert_fail@plt+0x1a4cc>
   2c2f0:	ldrdeq	r1, [r3], -ip
   2c2f4:	strdeq	r1, [r3], -r0
   2c2f8:	andeq	r0, r0, r6, ror #15
   2c2fc:	andeq	r1, r3, r8, asr #7
   2c300:	strdeq	r1, [r3], -r4
   2c304:	andeq	r1, r3, r0, lsr #3
   2c308:	ldrdeq	r1, [r3], -r0
   2c30c:	andeq	r1, r3, r4, asr #3
   2c310:	ldrdeq	r1, [r3], -r4
   2c314:	andeq	r1, r3, ip, ror #3
   2c318:	andeq	r1, r3, r8, lsl #4
   2c31c:	andeq	r1, r3, r8, lsr #4
   2c320:	andeq	r1, r3, ip, asr #4
   2c324:	andeq	r1, r3, r4, ror r2
   2c328:	andeq	r1, r3, r0, lsr #5
   2c32c:	andeq	r1, r3, r8, ror #1
   2c330:	andeq	r1, r3, r4, lsl #6
   2c334:	push	{r4, r5, lr}
   2c338:	sub	sp, sp, #12
   2c33c:	ldr	r5, [sp, #24]
   2c340:	ldr	ip, [r5]
   2c344:	cmp	ip, #0
   2c348:	beq	2c364 <__assert_fail@plt+0x1a7c0>
   2c34c:	mov	lr, r5
   2c350:	mov	ip, #0
   2c354:	ldr	r4, [lr, #4]!
   2c358:	add	ip, ip, #1
   2c35c:	cmp	r4, #0
   2c360:	bne	2c354 <__assert_fail@plt+0x1a7b0>
   2c364:	stm	sp, {r5, ip}
   2c368:	bl	2bf9c <__assert_fail@plt+0x1a3f8>
   2c36c:	add	sp, sp, #12
   2c370:	pop	{r4, r5, pc}
   2c374:	push	{r4, r5, lr}
   2c378:	sub	sp, sp, #52	; 0x34
   2c37c:	add	r5, sp, #4
   2c380:	ldr	r4, [sp, #64]	; 0x40
   2c384:	mov	ip, #0
   2c388:	sub	r4, r4, #4
   2c38c:	ldr	lr, [r4, #4]!
   2c390:	cmp	lr, #0
   2c394:	str	lr, [r5, #4]!
   2c398:	beq	2c3a8 <__assert_fail@plt+0x1a804>
   2c39c:	add	ip, ip, #1
   2c3a0:	cmp	ip, #10
   2c3a4:	bne	2c38c <__assert_fail@plt+0x1a7e8>
   2c3a8:	add	lr, sp, #8
   2c3ac:	str	ip, [sp, #4]
   2c3b0:	str	lr, [sp]
   2c3b4:	bl	2bf9c <__assert_fail@plt+0x1a3f8>
   2c3b8:	add	sp, sp, #52	; 0x34
   2c3bc:	pop	{r4, r5, pc}
   2c3c0:	push	{r3}		; (str r3, [sp, #-4]!)
   2c3c4:	push	{r4, lr}
   2c3c8:	sub	sp, sp, #60	; 0x3c
   2c3cc:	add	lr, sp, #56	; 0x38
   2c3d0:	add	r3, sp, #72	; 0x48
   2c3d4:	str	r3, [lr, #-44]!	; 0xffffffd4
   2c3d8:	add	r4, sp, #68	; 0x44
   2c3dc:	mov	r3, #0
   2c3e0:	ldr	ip, [r4, #4]!
   2c3e4:	cmp	ip, #0
   2c3e8:	str	ip, [lr, #4]!
   2c3ec:	beq	2c3fc <__assert_fail@plt+0x1a858>
   2c3f0:	add	r3, r3, #1
   2c3f4:	cmp	r3, #10
   2c3f8:	bne	2c3e0 <__assert_fail@plt+0x1a83c>
   2c3fc:	add	ip, sp, #16
   2c400:	str	r3, [sp, #4]
   2c404:	str	ip, [sp]
   2c408:	ldr	r3, [sp, #68]	; 0x44
   2c40c:	bl	2bf9c <__assert_fail@plt+0x1a3f8>
   2c410:	add	sp, sp, #60	; 0x3c
   2c414:	pop	{r4, lr}
   2c418:	add	sp, sp, #4
   2c41c:	bx	lr
   2c420:	ldr	r3, [pc, #116]	; 2c49c <__assert_fail@plt+0x1a8f8>
   2c424:	push	{r4, lr}
   2c428:	mov	r0, #10
   2c42c:	ldr	r1, [r3]
   2c430:	bl	117cc <fputc_unlocked@plt>
   2c434:	mov	r2, #5
   2c438:	ldr	r1, [pc, #96]	; 2c4a0 <__assert_fail@plt+0x1a8fc>
   2c43c:	mov	r0, #0
   2c440:	bl	117d8 <dcgettext@plt>
   2c444:	ldr	r2, [pc, #88]	; 2c4a4 <__assert_fail@plt+0x1a900>
   2c448:	mov	r1, r0
   2c44c:	mov	r0, #1
   2c450:	bl	11a00 <__printf_chk@plt>
   2c454:	mov	r2, #5
   2c458:	ldr	r1, [pc, #72]	; 2c4a8 <__assert_fail@plt+0x1a904>
   2c45c:	mov	r0, #0
   2c460:	bl	117d8 <dcgettext@plt>
   2c464:	ldr	r3, [pc, #64]	; 2c4ac <__assert_fail@plt+0x1a908>
   2c468:	ldr	r2, [pc, #64]	; 2c4b0 <__assert_fail@plt+0x1a90c>
   2c46c:	mov	r1, r0
   2c470:	mov	r0, #1
   2c474:	bl	11a00 <__printf_chk@plt>
   2c478:	mov	r2, #5
   2c47c:	ldr	r1, [pc, #48]	; 2c4b4 <__assert_fail@plt+0x1a910>
   2c480:	mov	r0, #0
   2c484:	bl	117d8 <dcgettext@plt>
   2c488:	ldr	r2, [pc, #40]	; 2c4b8 <__assert_fail@plt+0x1a914>
   2c48c:	pop	{r4, lr}
   2c490:	mov	r1, r0
   2c494:	mov	r0, #1
   2c498:	b	11a00 <__printf_chk@plt>
   2c49c:	andeq	r2, r4, ip, lsr r2
   2c4a0:	andeq	r1, r3, r0, asr #6
   2c4a4:	andeq	r1, r3, r4, asr r3
   2c4a8:	andeq	r1, r3, ip, ror #6
   2c4ac:	andeq	r0, r3, r4, ror #5
   2c4b0:	andeq	r0, r3, ip, lsl #6
   2c4b4:	andeq	r1, r3, r0, lsl #7
   2c4b8:	andeq	r1, r3, r8, lsr #7
   2c4bc:	push	{r4, lr}
   2c4c0:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2c4c4:	cmp	r0, #0
   2c4c8:	popne	{r4, pc}
   2c4cc:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c4d0:	push	{r4, lr}
   2c4d4:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2c4d8:	cmp	r0, #0
   2c4dc:	popne	{r4, pc}
   2c4e0:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c4e4:	push	{r4, lr}
   2c4e8:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2c4ec:	cmp	r0, #0
   2c4f0:	popne	{r4, pc}
   2c4f4:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c4f8:	push	{r4, r5, r6, lr}
   2c4fc:	mov	r5, r0
   2c500:	mov	r4, r1
   2c504:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   2c508:	cmp	r0, #0
   2c50c:	popne	{r4, r5, r6, pc}
   2c510:	adds	r4, r4, #0
   2c514:	movne	r4, #1
   2c518:	cmp	r5, #0
   2c51c:	orreq	r4, r4, #1
   2c520:	cmp	r4, #0
   2c524:	popeq	{r4, r5, r6, pc}
   2c528:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c52c:	push	{r4, lr}
   2c530:	cmp	r1, #0
   2c534:	orreq	r1, r1, #1
   2c538:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   2c53c:	cmp	r0, #0
   2c540:	popne	{r4, pc}
   2c544:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c548:	push	{r4, r5, r6, lr}
   2c54c:	mov	r6, r0
   2c550:	mov	r5, r1
   2c554:	mov	r4, r2
   2c558:	bl	2e5f4 <__assert_fail@plt+0x1ca50>
   2c55c:	cmp	r0, #0
   2c560:	popne	{r4, r5, r6, pc}
   2c564:	cmp	r6, #0
   2c568:	beq	2c578 <__assert_fail@plt+0x1a9d4>
   2c56c:	cmp	r5, #0
   2c570:	cmpne	r4, #0
   2c574:	popeq	{r4, r5, r6, pc}
   2c578:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c57c:	b	2c548 <__assert_fail@plt+0x1a9a4>
   2c580:	cmp	r2, #0
   2c584:	cmpne	r1, #0
   2c588:	moveq	r2, #1
   2c58c:	moveq	r1, r2
   2c590:	push	{r4, lr}
   2c594:	bl	2e5f4 <__assert_fail@plt+0x1ca50>
   2c598:	cmp	r0, #0
   2c59c:	popne	{r4, pc}
   2c5a0:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c5a4:	mov	r2, r1
   2c5a8:	mov	r1, r0
   2c5ac:	mov	r0, #0
   2c5b0:	b	2c548 <__assert_fail@plt+0x1a9a4>
   2c5b4:	mov	r2, r1
   2c5b8:	mov	r1, r0
   2c5bc:	mov	r0, #0
   2c5c0:	b	2c580 <__assert_fail@plt+0x1a9dc>
   2c5c4:	push	{r4, r5, r6, lr}
   2c5c8:	subs	r6, r0, #0
   2c5cc:	sub	sp, sp, #8
   2c5d0:	mov	r5, r1
   2c5d4:	ldr	r4, [r1]
   2c5d8:	beq	2c614 <__assert_fail@plt+0x1aa70>
   2c5dc:	lsr	r1, r4, #1
   2c5e0:	add	r3, r1, #1
   2c5e4:	mvn	r3, r3
   2c5e8:	cmp	r4, r3
   2c5ec:	bhi	2c610 <__assert_fail@plt+0x1aa6c>
   2c5f0:	add	r4, r4, #1
   2c5f4:	add	r4, r4, r1
   2c5f8:	mov	r0, r6
   2c5fc:	mov	r1, r4
   2c600:	bl	2c548 <__assert_fail@plt+0x1a9a4>
   2c604:	str	r4, [r5]
   2c608:	add	sp, sp, #8
   2c60c:	pop	{r4, r5, r6, pc}
   2c610:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c614:	cmp	r4, #0
   2c618:	bne	2c5f8 <__assert_fail@plt+0x1aa54>
   2c61c:	mov	r1, r2
   2c620:	mov	r0, #64	; 0x40
   2c624:	str	r2, [sp, #4]
   2c628:	bl	2e6e4 <__assert_fail@plt+0x1cb40>
   2c62c:	ldr	r2, [sp, #4]
   2c630:	cmp	r0, #0
   2c634:	movne	r4, r0
   2c638:	addeq	r4, r0, #1
   2c63c:	b	2c5f8 <__assert_fail@plt+0x1aa54>
   2c640:	mov	r2, #1
   2c644:	b	2c5c4 <__assert_fail@plt+0x1aa20>
   2c648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c64c:	sub	sp, sp, #12
   2c650:	ldr	r6, [r1]
   2c654:	mov	sl, r1
   2c658:	mov	r9, r0
   2c65c:	asrs	r4, r6, #1
   2c660:	mov	r5, r2
   2c664:	mov	fp, r3
   2c668:	ldr	r7, [sp, #48]	; 0x30
   2c66c:	bmi	2c7d8 <__assert_fail@plt+0x1ac34>
   2c670:	mvn	r3, #-2147483648	; 0x80000000
   2c674:	sub	r3, r3, r4
   2c678:	cmp	r6, r3
   2c67c:	movle	r3, #0
   2c680:	movgt	r3, #1
   2c684:	mvn	r8, fp
   2c688:	cmp	r3, #0
   2c68c:	addeq	r4, r4, r6
   2c690:	mvnne	r4, #-2147483648	; 0x80000000
   2c694:	lsr	r8, r8, #31
   2c698:	cmp	fp, r4
   2c69c:	movge	r3, #0
   2c6a0:	andlt	r3, r8, #1
   2c6a4:	cmp	r3, #0
   2c6a8:	beq	2c790 <__assert_fail@plt+0x1abec>
   2c6ac:	cmp	r7, #0
   2c6b0:	blt	2c860 <__assert_fail@plt+0x1acbc>
   2c6b4:	bne	2c858 <__assert_fail@plt+0x1acb4>
   2c6b8:	mov	r2, #64	; 0x40
   2c6bc:	mov	r1, r7
   2c6c0:	mov	r0, r2
   2c6c4:	str	r2, [sp, #4]
   2c6c8:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c6cc:	ldr	r2, [sp, #4]
   2c6d0:	mov	r1, r7
   2c6d4:	mov	r4, r0
   2c6d8:	mov	r0, r2
   2c6dc:	bl	2eb10 <__assert_fail@plt+0x1cf6c>
   2c6e0:	ldr	r2, [sp, #4]
   2c6e4:	sub	r1, r2, r1
   2c6e8:	cmp	r9, #0
   2c6ec:	sub	r3, r4, r6
   2c6f0:	streq	r9, [sl]
   2c6f4:	cmp	r3, r5
   2c6f8:	bge	2c77c <__assert_fail@plt+0x1abd8>
   2c6fc:	cmp	r5, #0
   2c700:	blt	2c7ec <__assert_fail@plt+0x1ac48>
   2c704:	cmp	r6, #0
   2c708:	blt	2c728 <__assert_fail@plt+0x1ab84>
   2c70c:	mvn	r3, #-2147483648	; 0x80000000
   2c710:	sub	r3, r3, r5
   2c714:	cmp	r6, r3
   2c718:	movle	r3, #0
   2c71c:	movgt	r3, #1
   2c720:	cmp	r3, #0
   2c724:	bne	2c8e8 <__assert_fail@plt+0x1ad44>
   2c728:	add	r5, r6, r5
   2c72c:	cmp	fp, r5
   2c730:	movge	r8, #0
   2c734:	andlt	r8, r8, #1
   2c738:	cmp	r8, #0
   2c73c:	mov	r4, r5
   2c740:	bne	2c8e8 <__assert_fail@plt+0x1ad44>
   2c744:	cmp	r7, #0
   2c748:	blt	2c800 <__assert_fail@plt+0x1ac5c>
   2c74c:	beq	2c778 <__assert_fail@plt+0x1abd4>
   2c750:	cmp	r5, #0
   2c754:	blt	2c8a8 <__assert_fail@plt+0x1ad04>
   2c758:	mov	r1, r7
   2c75c:	mvn	r0, #-2147483648	; 0x80000000
   2c760:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c764:	cmp	r5, r0
   2c768:	movle	r0, #0
   2c76c:	movgt	r0, #1
   2c770:	cmp	r0, #0
   2c774:	bne	2c8e8 <__assert_fail@plt+0x1ad44>
   2c778:	mul	r1, r5, r7
   2c77c:	mov	r0, r9
   2c780:	bl	2c4f8 <__assert_fail@plt+0x1a954>
   2c784:	str	r4, [sl]
   2c788:	add	sp, sp, #12
   2c78c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c790:	cmp	r7, #0
   2c794:	blt	2c82c <__assert_fail@plt+0x1ac88>
   2c798:	beq	2c6b8 <__assert_fail@plt+0x1ab14>
   2c79c:	cmp	r4, #0
   2c7a0:	blt	2c868 <__assert_fail@plt+0x1acc4>
   2c7a4:	mov	r1, r7
   2c7a8:	mvn	r0, #-2147483648	; 0x80000000
   2c7ac:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c7b0:	cmp	r0, r4
   2c7b4:	movge	r0, #0
   2c7b8:	movlt	r0, #1
   2c7bc:	cmp	r0, #0
   2c7c0:	mvnne	r2, #-2147483648	; 0x80000000
   2c7c4:	bne	2c6bc <__assert_fail@plt+0x1ab18>
   2c7c8:	mul	r1, r7, r4
   2c7cc:	cmp	r1, #63	; 0x3f
   2c7d0:	bgt	2c6e8 <__assert_fail@plt+0x1ab44>
   2c7d4:	b	2c6b8 <__assert_fail@plt+0x1ab14>
   2c7d8:	rsb	r3, r4, #-2147483648	; 0x80000000
   2c7dc:	cmp	r6, r3
   2c7e0:	movge	r3, #0
   2c7e4:	movlt	r3, #1
   2c7e8:	b	2c684 <__assert_fail@plt+0x1aae0>
   2c7ec:	rsb	r3, r5, #-2147483648	; 0x80000000
   2c7f0:	cmp	r6, r3
   2c7f4:	movge	r3, #0
   2c7f8:	movlt	r3, #1
   2c7fc:	b	2c720 <__assert_fail@plt+0x1ab7c>
   2c800:	cmp	r5, #0
   2c804:	blt	2c88c <__assert_fail@plt+0x1ace8>
   2c808:	cmn	r7, #1
   2c80c:	beq	2c778 <__assert_fail@plt+0x1abd4>
   2c810:	mov	r1, r7
   2c814:	mov	r0, #-2147483648	; 0x80000000
   2c818:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c81c:	cmp	r5, r0
   2c820:	movle	r0, #0
   2c824:	movgt	r0, #1
   2c828:	b	2c770 <__assert_fail@plt+0x1abcc>
   2c82c:	cmp	r4, #0
   2c830:	blt	2c8cc <__assert_fail@plt+0x1ad28>
   2c834:	cmn	r7, #1
   2c838:	beq	2c7c8 <__assert_fail@plt+0x1ac24>
   2c83c:	mov	r1, r7
   2c840:	mov	r0, #-2147483648	; 0x80000000
   2c844:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c848:	cmp	r0, r4
   2c84c:	movge	r0, #0
   2c850:	movlt	r0, #1
   2c854:	b	2c7bc <__assert_fail@plt+0x1ac18>
   2c858:	mov	r4, fp
   2c85c:	b	2c7a4 <__assert_fail@plt+0x1ac00>
   2c860:	mov	r4, fp
   2c864:	b	2c834 <__assert_fail@plt+0x1ac90>
   2c868:	cmn	r4, #1
   2c86c:	beq	2c7c8 <__assert_fail@plt+0x1ac24>
   2c870:	mov	r1, r4
   2c874:	mov	r0, #-2147483648	; 0x80000000
   2c878:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c87c:	cmp	r7, r0
   2c880:	movle	r0, #0
   2c884:	movgt	r0, #1
   2c888:	b	2c7bc <__assert_fail@plt+0x1ac18>
   2c88c:	mov	r1, r7
   2c890:	mvn	r0, #-2147483648	; 0x80000000
   2c894:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c898:	cmp	r5, r0
   2c89c:	movge	r0, #0
   2c8a0:	movlt	r0, #1
   2c8a4:	b	2c770 <__assert_fail@plt+0x1abcc>
   2c8a8:	cmn	r5, #1
   2c8ac:	beq	2c778 <__assert_fail@plt+0x1abd4>
   2c8b0:	mov	r1, r5
   2c8b4:	mov	r0, #-2147483648	; 0x80000000
   2c8b8:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c8bc:	cmp	r7, r0
   2c8c0:	movle	r0, #0
   2c8c4:	movgt	r0, #1
   2c8c8:	b	2c770 <__assert_fail@plt+0x1abcc>
   2c8cc:	mov	r1, r7
   2c8d0:	mvn	r0, #-2147483648	; 0x80000000
   2c8d4:	bl	2e8f0 <__assert_fail@plt+0x1cd4c>
   2c8d8:	cmp	r0, r4
   2c8dc:	movle	r0, #0
   2c8e0:	movgt	r0, #1
   2c8e4:	b	2c7bc <__assert_fail@plt+0x1ac18>
   2c8e8:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c8ec:	push	{r4, lr}
   2c8f0:	mov	r1, #1
   2c8f4:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   2c8f8:	cmp	r0, #0
   2c8fc:	popne	{r4, pc}
   2c900:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c904:	push	{r4, lr}
   2c908:	mov	r1, #1
   2c90c:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   2c910:	cmp	r0, #0
   2c914:	popne	{r4, pc}
   2c918:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c91c:	push	{r4, lr}
   2c920:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   2c924:	cmp	r0, #0
   2c928:	popne	{r4, pc}
   2c92c:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c930:	push	{r4, lr}
   2c934:	bl	2d7e4 <__assert_fail@plt+0x1bc40>
   2c938:	cmp	r0, #0
   2c93c:	popne	{r4, pc}
   2c940:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c944:	push	{r4, r5, r6, lr}
   2c948:	mov	r6, r0
   2c94c:	mov	r0, r1
   2c950:	mov	r4, r1
   2c954:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2c958:	subs	r5, r0, #0
   2c95c:	beq	2c974 <__assert_fail@plt+0x1add0>
   2c960:	mov	r2, r4
   2c964:	mov	r1, r6
   2c968:	bl	11784 <memcpy@plt>
   2c96c:	mov	r0, r5
   2c970:	pop	{r4, r5, r6, pc}
   2c974:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c978:	push	{r4, r5, r6, lr}
   2c97c:	mov	r6, r0
   2c980:	mov	r0, r1
   2c984:	mov	r4, r1
   2c988:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2c98c:	subs	r5, r0, #0
   2c990:	beq	2c9a8 <__assert_fail@plt+0x1ae04>
   2c994:	mov	r2, r4
   2c998:	mov	r1, r6
   2c99c:	bl	11784 <memcpy@plt>
   2c9a0:	mov	r0, r5
   2c9a4:	pop	{r4, r5, r6, pc}
   2c9a8:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c9ac:	push	{r4, r5, r6, lr}
   2c9b0:	mov	r6, r0
   2c9b4:	add	r0, r1, #1
   2c9b8:	mov	r4, r1
   2c9bc:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2c9c0:	subs	r5, r0, #0
   2c9c4:	beq	2c9e4 <__assert_fail@plt+0x1ae40>
   2c9c8:	mov	r3, #0
   2c9cc:	mov	r1, r6
   2c9d0:	strb	r3, [r5, r4]
   2c9d4:	mov	r2, r4
   2c9d8:	bl	11784 <memcpy@plt>
   2c9dc:	mov	r0, r5
   2c9e0:	pop	{r4, r5, r6, pc}
   2c9e4:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2c9e8:	push	{r4, lr}
   2c9ec:	mov	r4, r0
   2c9f0:	bl	11988 <strlen@plt>
   2c9f4:	add	r1, r0, #1
   2c9f8:	mov	r0, r4
   2c9fc:	pop	{r4, lr}
   2ca00:	b	2c944 <__assert_fail@plt+0x1ada0>
   2ca04:	ldr	r3, [pc, #44]	; 2ca38 <__assert_fail@plt+0x1ae94>
   2ca08:	push	{r4, lr}
   2ca0c:	mov	r2, #5
   2ca10:	ldr	r1, [pc, #36]	; 2ca3c <__assert_fail@plt+0x1ae98>
   2ca14:	mov	r0, #0
   2ca18:	ldr	r4, [r3]
   2ca1c:	bl	117d8 <dcgettext@plt>
   2ca20:	ldr	r2, [pc, #24]	; 2ca40 <__assert_fail@plt+0x1ae9c>
   2ca24:	mov	r1, #0
   2ca28:	mov	r3, r0
   2ca2c:	mov	r0, r4
   2ca30:	bl	118bc <error@plt>
   2ca34:	bl	11b68 <abort@plt>
   2ca38:	ldrdeq	r2, [r4], -r8
   2ca3c:	strdeq	r1, [r3], -r8
   2ca40:	andeq	r0, r3, ip, ror #20
   2ca44:	push	{r4, lr}
   2ca48:	orr	r1, r1, #512	; 0x200
   2ca4c:	bl	1890c <__assert_fail@plt+0x6d68>
   2ca50:	cmp	r0, #0
   2ca54:	popne	{r4, pc}
   2ca58:	bl	119b8 <__errno_location@plt>
   2ca5c:	ldr	r3, [r0]
   2ca60:	cmp	r3, #22
   2ca64:	beq	2ca6c <__assert_fail@plt+0x1aec8>
   2ca68:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2ca6c:	ldr	r3, [pc, #12]	; 2ca80 <__assert_fail@plt+0x1aedc>
   2ca70:	mov	r2, #41	; 0x29
   2ca74:	ldr	r1, [pc, #8]	; 2ca84 <__assert_fail@plt+0x1aee0>
   2ca78:	ldr	r0, [pc, #8]	; 2ca88 <__assert_fail@plt+0x1aee4>
   2ca7c:	bl	11ba4 <__assert_fail@plt>
   2ca80:	andeq	r1, r3, ip, lsl #8
   2ca84:	andeq	r1, r3, r8, lsl r4
   2ca88:	andeq	r1, r3, r4, lsr #8
   2ca8c:	ldr	r3, [r0, #48]	; 0x30
   2ca90:	and	r3, r3, #17
   2ca94:	cmp	r3, #16
   2ca98:	beq	2cabc <__assert_fail@plt+0x1af18>
   2ca9c:	cmp	r3, #17
   2caa0:	beq	2caac <__assert_fail@plt+0x1af08>
   2caa4:	mov	r0, #0
   2caa8:	bx	lr
   2caac:	ldr	r0, [r1, #48]	; 0x30
   2cab0:	adds	r0, r0, #0
   2cab4:	movne	r0, #1
   2cab8:	bx	lr
   2cabc:	mov	r0, #1
   2cac0:	bx	lr
   2cac4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cac8:	subs	r5, r1, #0
   2cacc:	mov	r4, r0
   2cad0:	blt	2cb2c <__assert_fail@plt+0x1af88>
   2cad4:	moveq	r6, #0
   2cad8:	moveq	r7, #0
   2cadc:	beq	2cb74 <__assert_fail@plt+0x1afd0>
   2cae0:	ldrd	r8, [r0]
   2cae4:	cmp	r8, #0
   2cae8:	sbcs	r3, r9, #0
   2caec:	blt	2cbcc <__assert_fail@plt+0x1b028>
   2caf0:	asr	r7, r5, #31
   2caf4:	mov	r3, r7
   2caf8:	mov	r2, r5
   2cafc:	mvn	r0, #0
   2cb00:	mvn	r1, #-2147483648	; 0x80000000
   2cb04:	bl	2eee8 <__assert_fail@plt+0x1d344>
   2cb08:	mov	r6, r5
   2cb0c:	cmp	r0, r8
   2cb10:	sbcs	r3, r1, r9
   2cb14:	bge	2cb74 <__assert_fail@plt+0x1afd0>
   2cb18:	mvn	r2, #0
   2cb1c:	mvn	r3, #-2147483648	; 0x80000000
   2cb20:	mov	r0, #1
   2cb24:	strd	r2, [r4]
   2cb28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cb2c:	ldrd	r8, [r0]
   2cb30:	cmp	r8, #0
   2cb34:	sbcs	r3, r9, #0
   2cb38:	blt	2cb98 <__assert_fail@plt+0x1aff4>
   2cb3c:	cmn	r5, #1
   2cb40:	mvneq	r6, #0
   2cb44:	mvneq	r7, #0
   2cb48:	beq	2cb74 <__assert_fail@plt+0x1afd0>
   2cb4c:	asr	r7, r5, #31
   2cb50:	mov	r3, r7
   2cb54:	mov	r2, r5
   2cb58:	mov	r0, #0
   2cb5c:	mov	r1, #-2147483648	; 0x80000000
   2cb60:	bl	2eee8 <__assert_fail@plt+0x1d344>
   2cb64:	mov	r6, r5
   2cb68:	cmp	r0, r8
   2cb6c:	sbcs	r3, r1, r9
   2cb70:	blt	2cb18 <__assert_fail@plt+0x1af74>
   2cb74:	ldr	r2, [r4]
   2cb78:	ldr	r1, [r4, #4]
   2cb7c:	mov	r0, #0
   2cb80:	mul	ip, r2, r7
   2cb84:	umull	r2, r3, r2, r5
   2cb88:	mla	r5, r5, r1, ip
   2cb8c:	add	r3, r5, r3
   2cb90:	strd	r2, [r4]
   2cb94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cb98:	asr	r7, r5, #31
   2cb9c:	mov	r3, r7
   2cba0:	mov	r2, r5
   2cba4:	mvn	r0, #0
   2cba8:	mvn	r1, #-2147483648	; 0x80000000
   2cbac:	bl	2eee8 <__assert_fail@plt+0x1d344>
   2cbb0:	mov	r6, r5
   2cbb4:	cmp	r8, r0
   2cbb8:	sbcs	r3, r9, r1
   2cbbc:	bge	2cb74 <__assert_fail@plt+0x1afd0>
   2cbc0:	mov	r2, #0
   2cbc4:	mov	r3, #-2147483648	; 0x80000000
   2cbc8:	b	2cb20 <__assert_fail@plt+0x1af7c>
   2cbcc:	mvn	r3, #0
   2cbd0:	cmp	r9, r3
   2cbd4:	mvn	r2, #0
   2cbd8:	cmpeq	r8, r2
   2cbdc:	moveq	r6, r5
   2cbe0:	asreq	r7, r6, #31
   2cbe4:	beq	2cb74 <__assert_fail@plt+0x1afd0>
   2cbe8:	mov	r3, r9
   2cbec:	mov	r2, r8
   2cbf0:	mov	r0, #0
   2cbf4:	mov	r1, #-2147483648	; 0x80000000
   2cbf8:	bl	2eee8 <__assert_fail@plt+0x1d344>
   2cbfc:	asr	r7, r5, #31
   2cc00:	mov	r6, r5
   2cc04:	cmp	r0, r5
   2cc08:	sbcs	r3, r1, r7
   2cc0c:	blt	2cbc0 <__assert_fail@plt+0x1b01c>
   2cc10:	b	2cb74 <__assert_fail@plt+0x1afd0>
   2cc14:	cmp	r2, #36	; 0x24
   2cc18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc1c:	sub	sp, sp, #20
   2cc20:	bhi	2d0d4 <__assert_fail@plt+0x1b530>
   2cc24:	cmp	r1, #0
   2cc28:	mov	r6, r1
   2cc2c:	mov	r5, r2
   2cc30:	addeq	r6, sp, #4
   2cc34:	mov	r8, r0
   2cc38:	mov	r7, r3
   2cc3c:	bl	119b8 <__errno_location@plt>
   2cc40:	mov	r4, #0
   2cc44:	mov	r2, r5
   2cc48:	mov	r3, r4
   2cc4c:	mov	r1, r6
   2cc50:	str	r4, [r0]
   2cc54:	mov	r9, r0
   2cc58:	mov	r0, r8
   2cc5c:	bl	11af0 <__strtoll_internal@plt>
   2cc60:	ldr	r5, [r6]
   2cc64:	cmp	r8, r5
   2cc68:	strd	r0, [sp, #8]
   2cc6c:	beq	2ccbc <__assert_fail@plt+0x1b118>
   2cc70:	ldr	r4, [r9]
   2cc74:	cmp	r4, #0
   2cc78:	bne	2cca4 <__assert_fail@plt+0x1b100>
   2cc7c:	ldr	r3, [sp, #56]	; 0x38
   2cc80:	cmp	r3, #0
   2cc84:	beq	2cc94 <__assert_fail@plt+0x1b0f0>
   2cc88:	ldrb	r8, [r5]
   2cc8c:	cmp	r8, #0
   2cc90:	bne	2ccf4 <__assert_fail@plt+0x1b150>
   2cc94:	strd	r0, [r7]
   2cc98:	mov	r0, r4
   2cc9c:	add	sp, sp, #20
   2cca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cca4:	cmp	r4, #34	; 0x22
   2cca8:	beq	2cf04 <__assert_fail@plt+0x1b360>
   2ccac:	mov	r4, #4
   2ccb0:	mov	r0, r4
   2ccb4:	add	sp, sp, #20
   2ccb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ccbc:	ldr	r3, [sp, #56]	; 0x38
   2ccc0:	cmp	r3, r4
   2ccc4:	beq	2ccac <__assert_fail@plt+0x1b108>
   2ccc8:	ldrb	r1, [r5]
   2cccc:	cmp	r1, r4
   2ccd0:	beq	2ccac <__assert_fail@plt+0x1b108>
   2ccd4:	mov	r0, r3
   2ccd8:	bl	11994 <strchr@plt>
   2ccdc:	cmp	r0, r4
   2cce0:	beq	2ccac <__assert_fail@plt+0x1b108>
   2cce4:	ldrb	r8, [r5]
   2cce8:	mov	r2, #1
   2ccec:	mov	r3, #0
   2ccf0:	strd	r2, [sp, #8]
   2ccf4:	mov	r1, r8
   2ccf8:	ldr	r0, [sp, #56]	; 0x38
   2ccfc:	bl	11994 <strchr@plt>
   2cd00:	cmp	r0, #0
   2cd04:	beq	2d0c4 <__assert_fail@plt+0x1b520>
   2cd08:	sub	r3, r8, #69	; 0x45
   2cd0c:	cmp	r3, #47	; 0x2f
   2cd10:	ldrls	pc, [pc, r3, lsl #2]
   2cd14:	b	2cdd8 <__assert_fail@plt+0x1b234>
   2cd18:	andeq	ip, r2, r8, asr #29
   2cd1c:	ldrdeq	ip, [r2], -r8
   2cd20:	andeq	ip, r2, r8, asr #29
   2cd24:	ldrdeq	ip, [r2], -r8
   2cd28:	ldrdeq	ip, [r2], -r8
   2cd2c:	ldrdeq	ip, [r2], -r8
   2cd30:	andeq	ip, r2, r8, asr #29
   2cd34:	ldrdeq	ip, [r2], -r8
   2cd38:	andeq	ip, r2, r8, asr #29
   2cd3c:	ldrdeq	ip, [r2], -r8
   2cd40:	ldrdeq	ip, [r2], -r8
   2cd44:	andeq	ip, r2, r8, asr #29
   2cd48:	ldrdeq	ip, [r2], -r8
   2cd4c:	ldrdeq	ip, [r2], -r8
   2cd50:	ldrdeq	ip, [r2], -r8
   2cd54:	andeq	ip, r2, r8, asr #29
   2cd58:	ldrdeq	ip, [r2], -r8
   2cd5c:	ldrdeq	ip, [r2], -r8
   2cd60:	ldrdeq	ip, [r2], -r8
   2cd64:	ldrdeq	ip, [r2], -r8
   2cd68:	andeq	ip, r2, r8, asr #29
   2cd6c:	andeq	ip, r2, r8, asr #29
   2cd70:	ldrdeq	ip, [r2], -r8
   2cd74:	ldrdeq	ip, [r2], -r8
   2cd78:	ldrdeq	ip, [r2], -r8
   2cd7c:	ldrdeq	ip, [r2], -r8
   2cd80:	ldrdeq	ip, [r2], -r8
   2cd84:	ldrdeq	ip, [r2], -r8
   2cd88:	ldrdeq	ip, [r2], -r8
   2cd8c:	ldrdeq	ip, [r2], -r8
   2cd90:	ldrdeq	ip, [r2], -r8
   2cd94:	ldrdeq	ip, [r2], -r8
   2cd98:	ldrdeq	ip, [r2], -r8
   2cd9c:	ldrdeq	ip, [r2], -r8
   2cda0:	andeq	ip, r2, r8, asr #29
   2cda4:	ldrdeq	ip, [r2], -r8
   2cda8:	ldrdeq	ip, [r2], -r8
   2cdac:	ldrdeq	ip, [r2], -r8
   2cdb0:	andeq	ip, r2, r8, asr #29
   2cdb4:	ldrdeq	ip, [r2], -r8
   2cdb8:	andeq	ip, r2, r8, asr #29
   2cdbc:	ldrdeq	ip, [r2], -r8
   2cdc0:	ldrdeq	ip, [r2], -r8
   2cdc4:	ldrdeq	ip, [r2], -r8
   2cdc8:	ldrdeq	ip, [r2], -r8
   2cdcc:	ldrdeq	ip, [r2], -r8
   2cdd0:	ldrdeq	ip, [r2], -r8
   2cdd4:	andeq	ip, r2, r8, asr #29
   2cdd8:	mov	sl, #1
   2cddc:	mov	r9, #1024	; 0x400
   2cde0:	sub	r8, r8, #66	; 0x42
   2cde4:	cmp	r8, #53	; 0x35
   2cde8:	ldrls	pc, [pc, r8, lsl #2]
   2cdec:	b	2d0c4 <__assert_fail@plt+0x1b520>
   2cdf0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2cdf4:	andeq	sp, r2, r4, asr #1
   2cdf8:	andeq	sp, r2, r4, asr #1
   2cdfc:			; <UNDEFINED> instruction: 0x0002cfb4
   2ce00:	andeq	sp, r2, r4, asr #1
   2ce04:	andeq	ip, r2, r8, lsl #31
   2ce08:	andeq	sp, r2, r4, asr #1
   2ce0c:	andeq	sp, r2, r4, asr #1
   2ce10:	andeq	sp, r2, r4, asr #1
   2ce14:	andeq	ip, r2, r0, ror pc
   2ce18:	andeq	sp, r2, r4, asr #1
   2ce1c:	andeq	ip, r2, r8, asr #30
   2ce20:	andeq	sp, r2, r4, asr #1
   2ce24:	andeq	sp, r2, r4, asr #1
   2ce28:	muleq	r2, ip, r0
   2ce2c:	andeq	sp, r2, r4, asr #1
   2ce30:	andeq	sp, r2, r4, asr #1
   2ce34:	andeq	sp, r2, r4, asr #1
   2ce38:	andeq	sp, r2, r4, ror r0
   2ce3c:	andeq	sp, r2, r4, asr #1
   2ce40:	andeq	sp, r2, r4, asr #1
   2ce44:	andeq	sp, r2, r4, asr #1
   2ce48:	andeq	sp, r2, r4, asr #1
   2ce4c:	andeq	sp, r2, ip, asr #32
   2ce50:	andeq	sp, r2, r4, lsr #32
   2ce54:	andeq	sp, r2, r4, asr #1
   2ce58:	andeq	sp, r2, r4, asr #1
   2ce5c:	andeq	sp, r2, r4, asr #1
   2ce60:	andeq	sp, r2, r4, asr #1
   2ce64:	andeq	sp, r2, r4, asr #1
   2ce68:	andeq	sp, r2, r4, asr #1
   2ce6c:	andeq	sp, r2, r4, asr #1
   2ce70:	andeq	sp, r2, ip
   2ce74:	andeq	ip, r2, r4, lsr #30
   2ce78:	andeq	sp, r2, r4, asr #1
   2ce7c:	andeq	sp, r2, r4, asr #1
   2ce80:	andeq	sp, r2, r4, asr #1
   2ce84:	andeq	ip, r2, r8, lsl #31
   2ce88:	andeq	sp, r2, r4, asr #1
   2ce8c:	andeq	sp, r2, r4, asr #1
   2ce90:	andeq	sp, r2, r4, asr #1
   2ce94:	andeq	ip, r2, r0, ror pc
   2ce98:	andeq	sp, r2, r4, asr #1
   2ce9c:	andeq	ip, r2, r8, asr #30
   2cea0:	andeq	sp, r2, r4, asr #1
   2cea4:	andeq	sp, r2, r4, asr #1
   2cea8:	andeq	sp, r2, r4, asr #1
   2ceac:	andeq	sp, r2, r4, asr #1
   2ceb0:	andeq	sp, r2, r4, asr #1
   2ceb4:	andeq	sp, r2, r4, asr #1
   2ceb8:	andeq	sp, r2, r4, ror r0
   2cebc:	andeq	sp, r2, r4, asr #1
   2cec0:	andeq	sp, r2, r4, asr #1
   2cec4:	strdeq	ip, [r2], -r4
   2cec8:	mov	r1, #48	; 0x30
   2cecc:	ldr	r0, [sp, #56]	; 0x38
   2ced0:	bl	11994 <strchr@plt>
   2ced4:	cmp	r0, #0
   2ced8:	beq	2cdd8 <__assert_fail@plt+0x1b234>
   2cedc:	ldrb	r3, [r5, #1]
   2cee0:	cmp	r3, #68	; 0x44
   2cee4:	beq	2cef8 <__assert_fail@plt+0x1b354>
   2cee8:	cmp	r3, #105	; 0x69
   2ceec:	beq	2cf0c <__assert_fail@plt+0x1b368>
   2cef0:	cmp	r3, #66	; 0x42
   2cef4:	bne	2cdd8 <__assert_fail@plt+0x1b234>
   2cef8:	mov	sl, #2
   2cefc:	mov	r9, #1000	; 0x3e8
   2cf00:	b	2cde0 <__assert_fail@plt+0x1b23c>
   2cf04:	mov	r4, #1
   2cf08:	b	2cc7c <__assert_fail@plt+0x1b0d8>
   2cf0c:	ldrb	sl, [r5, #2]
   2cf10:	mov	r9, #1024	; 0x400
   2cf14:	cmp	sl, #66	; 0x42
   2cf18:	movne	sl, #1
   2cf1c:	moveq	sl, #3
   2cf20:	b	2cde0 <__assert_fail@plt+0x1b23c>
   2cf24:	mov	r8, #0
   2cf28:	add	r3, r5, sl
   2cf2c:	str	r3, [r6]
   2cf30:	ldrb	r3, [r5, sl]
   2cf34:	orr	r4, r4, r8
   2cf38:	ldrd	r0, [sp, #8]
   2cf3c:	cmp	r3, #0
   2cf40:	orrne	r4, r4, #2
   2cf44:	b	2cc94 <__assert_fail@plt+0x1b0f0>
   2cf48:	mov	r1, r9
   2cf4c:	add	r0, sp, #8
   2cf50:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2cf54:	mov	r1, r9
   2cf58:	mov	r8, r0
   2cf5c:	add	r0, sp, #8
   2cf60:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2cf64:	ldr	r5, [r6]
   2cf68:	orr	r8, r8, r0
   2cf6c:	b	2cf28 <__assert_fail@plt+0x1b384>
   2cf70:	mov	r1, r9
   2cf74:	add	r0, sp, #8
   2cf78:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2cf7c:	ldr	r5, [r6]
   2cf80:	mov	r8, r0
   2cf84:	b	2cf28 <__assert_fail@plt+0x1b384>
   2cf88:	mov	fp, #3
   2cf8c:	mov	r8, #0
   2cf90:	add	r5, sp, #8
   2cf94:	mov	r1, r9
   2cf98:	mov	r0, r5
   2cf9c:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2cfa0:	subs	fp, fp, #1
   2cfa4:	orr	r8, r8, r0
   2cfa8:	bne	2cf94 <__assert_fail@plt+0x1b3f0>
   2cfac:	ldr	r5, [r6]
   2cfb0:	b	2cf28 <__assert_fail@plt+0x1b384>
   2cfb4:	mov	fp, #6
   2cfb8:	mov	r8, #0
   2cfbc:	add	r5, sp, #8
   2cfc0:	mov	r1, r9
   2cfc4:	mov	r0, r5
   2cfc8:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2cfcc:	subs	fp, fp, #1
   2cfd0:	orr	r8, r8, r0
   2cfd4:	bne	2cfc0 <__assert_fail@plt+0x1b41c>
   2cfd8:	b	2cfac <__assert_fail@plt+0x1b408>
   2cfdc:	mov	r1, #1024	; 0x400
   2cfe0:	add	r0, sp, #8
   2cfe4:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2cfe8:	ldr	r5, [r6]
   2cfec:	mov	r8, r0
   2cff0:	b	2cf28 <__assert_fail@plt+0x1b384>
   2cff4:	mov	r1, #2
   2cff8:	add	r0, sp, #8
   2cffc:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2d000:	ldr	r5, [r6]
   2d004:	mov	r8, r0
   2d008:	b	2cf28 <__assert_fail@plt+0x1b384>
   2d00c:	mov	r1, #512	; 0x200
   2d010:	add	r0, sp, #8
   2d014:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2d018:	ldr	r5, [r6]
   2d01c:	mov	r8, r0
   2d020:	b	2cf28 <__assert_fail@plt+0x1b384>
   2d024:	mov	fp, #7
   2d028:	mov	r8, #0
   2d02c:	add	r5, sp, #8
   2d030:	mov	r1, r9
   2d034:	mov	r0, r5
   2d038:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2d03c:	subs	fp, fp, #1
   2d040:	orr	r8, r8, r0
   2d044:	bne	2d030 <__assert_fail@plt+0x1b48c>
   2d048:	b	2cfac <__assert_fail@plt+0x1b408>
   2d04c:	mov	fp, #8
   2d050:	mov	r8, #0
   2d054:	add	r5, sp, fp
   2d058:	mov	r1, r9
   2d05c:	mov	r0, r5
   2d060:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2d064:	subs	fp, fp, #1
   2d068:	orr	r8, r8, r0
   2d06c:	bne	2d058 <__assert_fail@plt+0x1b4b4>
   2d070:	b	2cfac <__assert_fail@plt+0x1b408>
   2d074:	mov	fp, #4
   2d078:	mov	r8, #0
   2d07c:	add	r5, sp, #8
   2d080:	mov	r1, r9
   2d084:	mov	r0, r5
   2d088:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2d08c:	subs	fp, fp, #1
   2d090:	orr	r8, r8, r0
   2d094:	bne	2d080 <__assert_fail@plt+0x1b4dc>
   2d098:	b	2cfac <__assert_fail@plt+0x1b408>
   2d09c:	mov	fp, #5
   2d0a0:	mov	r8, #0
   2d0a4:	add	r5, sp, #8
   2d0a8:	mov	r1, r9
   2d0ac:	mov	r0, r5
   2d0b0:	bl	2cac4 <__assert_fail@plt+0x1af20>
   2d0b4:	subs	fp, fp, #1
   2d0b8:	orr	r8, r8, r0
   2d0bc:	bne	2d0a8 <__assert_fail@plt+0x1b504>
   2d0c0:	b	2cfac <__assert_fail@plt+0x1b408>
   2d0c4:	ldrd	r2, [sp, #8]
   2d0c8:	orr	r4, r4, #2
   2d0cc:	strd	r2, [r7]
   2d0d0:	b	2cc98 <__assert_fail@plt+0x1b0f4>
   2d0d4:	ldr	r3, [pc, #12]	; 2d0e8 <__assert_fail@plt+0x1b544>
   2d0d8:	mov	r2, #85	; 0x55
   2d0dc:	ldr	r1, [pc, #8]	; 2d0ec <__assert_fail@plt+0x1b548>
   2d0e0:	ldr	r0, [pc, #8]	; 2d0f0 <__assert_fail@plt+0x1b54c>
   2d0e4:	bl	11ba4 <__assert_fail@plt>
   2d0e8:	andeq	r1, r3, r4, lsr r4
   2d0ec:	andeq	r1, r3, r0, asr #8
   2d0f0:	andeq	r1, r3, r0, asr r4
   2d0f4:	ldr	ip, [pc, #148]	; 2d190 <__assert_fail@plt+0x1b5ec>
   2d0f8:	sub	r0, r0, #1
   2d0fc:	push	{lr}		; (str lr, [sp, #-4]!)
   2d100:	sub	sp, sp, #20
   2d104:	ldr	r5, [ip]
   2d108:	cmp	r0, #3
   2d10c:	ldrls	pc, [pc, r0, lsl #2]
   2d110:	b	2d17c <__assert_fail@plt+0x1b5d8>
   2d114:	andeq	sp, r2, r8, lsl #3
   2d118:	andeq	sp, r2, r0, lsl #3
   2d11c:	andeq	sp, r2, r0, lsl #3
   2d120:	andeq	sp, r2, r4, lsr #2
   2d124:	ldr	r0, [pc, #104]	; 2d194 <__assert_fail@plt+0x1b5f0>
   2d128:	cmp	r1, #0
   2d12c:	movlt	r3, #0
   2d130:	ldrlt	r4, [pc, #96]	; 2d198 <__assert_fail@plt+0x1b5f4>
   2d134:	ldrge	r6, [r3, r1, lsl #4]
   2d138:	sublt	r4, r4, r1
   2d13c:	strblt	r2, [sp, #12]
   2d140:	mov	r1, r0
   2d144:	mov	r2, #5
   2d148:	mov	r0, #0
   2d14c:	strblt	r3, [sp, #13]
   2d150:	addlt	r6, sp, #12
   2d154:	ldrge	r4, [pc, #60]	; 2d198 <__assert_fail@plt+0x1b5f4>
   2d158:	bl	117d8 <dcgettext@plt>
   2d15c:	ldr	r3, [sp, #24]
   2d160:	str	r6, [sp]
   2d164:	str	r3, [sp, #4]
   2d168:	mov	r1, #0
   2d16c:	mov	r3, r4
   2d170:	mov	r2, r0
   2d174:	mov	r0, r5
   2d178:	bl	118bc <error@plt>
   2d17c:	bl	11b68 <abort@plt>
   2d180:	ldr	r0, [pc, #20]	; 2d19c <__assert_fail@plt+0x1b5f8>
   2d184:	b	2d128 <__assert_fail@plt+0x1b584>
   2d188:	ldr	r0, [pc, #16]	; 2d1a0 <__assert_fail@plt+0x1b5fc>
   2d18c:	b	2d128 <__assert_fail@plt+0x1b584>
   2d190:	ldrdeq	r2, [r4], -r8
   2d194:	andeq	r1, r3, r8, ror r4
   2d198:	ldrdeq	r1, [r3], -ip
   2d19c:	muleq	r3, r4, r4
   2d1a0:			; <UNDEFINED> instruction: 0x000314bc
   2d1a4:	push	{r4, r5, r6, r7, r8, lr}
   2d1a8:	subs	r5, r1, #0
   2d1ac:	mov	r4, r0
   2d1b0:	blt	2d224 <__assert_fail@plt+0x1b680>
   2d1b4:	moveq	r6, #0
   2d1b8:	moveq	r7, #0
   2d1bc:	bne	2d1e4 <__assert_fail@plt+0x1b640>
   2d1c0:	ldr	r2, [r4]
   2d1c4:	ldr	r1, [r4, #4]
   2d1c8:	mov	r0, #0
   2d1cc:	mul	ip, r2, r7
   2d1d0:	umull	r2, r3, r2, r5
   2d1d4:	mla	r5, r5, r1, ip
   2d1d8:	add	r3, r5, r3
   2d1dc:	strd	r2, [r4]
   2d1e0:	pop	{r4, r5, r6, r7, r8, pc}
   2d1e4:	asr	r7, r5, #31
   2d1e8:	mov	r2, r5
   2d1ec:	mov	r3, r7
   2d1f0:	mvn	r0, #0
   2d1f4:	mvn	r1, #0
   2d1f8:	bl	2efbc <__assert_fail@plt+0x1d418>
   2d1fc:	ldrd	r2, [r4]
   2d200:	mov	r6, r5
   2d204:	cmp	r1, r3
   2d208:	cmpeq	r0, r2
   2d20c:	bcs	2d1c0 <__assert_fail@plt+0x1b61c>
   2d210:	mvn	r2, #0
   2d214:	mvn	r3, #0
   2d218:	mov	r0, #1
   2d21c:	strd	r2, [r4]
   2d220:	pop	{r4, r5, r6, r7, r8, pc}
   2d224:	ldrd	r2, [r0]
   2d228:	orrs	r3, r2, r3
   2d22c:	moveq	r6, r5
   2d230:	asreq	r7, r6, #31
   2d234:	bne	2d210 <__assert_fail@plt+0x1b66c>
   2d238:	b	2d1c0 <__assert_fail@plt+0x1b61c>
   2d23c:	cmp	r2, #36	; 0x24
   2d240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d244:	sub	sp, sp, #20
   2d248:	bhi	2d7bc <__assert_fail@plt+0x1bc18>
   2d24c:	cmp	r1, #0
   2d250:	mov	r8, r2
   2d254:	mov	r7, r0
   2d258:	mov	r5, r1
   2d25c:	mov	r6, r3
   2d260:	addeq	r5, sp, #4
   2d264:	bl	119b8 <__errno_location@plt>
   2d268:	mov	r3, #0
   2d26c:	str	r3, [r0]
   2d270:	mov	r9, r0
   2d274:	bl	11964 <__ctype_b_loc@plt>
   2d278:	ldrb	r3, [r7]
   2d27c:	mov	r2, r7
   2d280:	ldr	r0, [r0]
   2d284:	b	2d28c <__assert_fail@plt+0x1b6e8>
   2d288:	ldrb	r3, [r2, #1]!
   2d28c:	lsl	r1, r3, #1
   2d290:	ldrh	r4, [r0, r1]
   2d294:	ands	r4, r4, #8192	; 0x2000
   2d298:	bne	2d288 <__assert_fail@plt+0x1b6e4>
   2d29c:	cmp	r3, #45	; 0x2d
   2d2a0:	bne	2d2b4 <__assert_fail@plt+0x1b710>
   2d2a4:	mov	r4, #4
   2d2a8:	mov	r0, r4
   2d2ac:	add	sp, sp, #20
   2d2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2b4:	mov	r2, r8
   2d2b8:	mov	r3, r4
   2d2bc:	mov	r1, r5
   2d2c0:	mov	r0, r7
   2d2c4:	bl	1179c <__strtoull_internal@plt>
   2d2c8:	ldr	r8, [r5]
   2d2cc:	cmp	r7, r8
   2d2d0:	mov	r2, r0
   2d2d4:	str	r0, [sp, #8]
   2d2d8:	str	r1, [sp, #12]
   2d2dc:	beq	2d328 <__assert_fail@plt+0x1b784>
   2d2e0:	ldr	r4, [r9]
   2d2e4:	cmp	r4, #0
   2d2e8:	bne	2d318 <__assert_fail@plt+0x1b774>
   2d2ec:	ldr	r3, [sp, #56]	; 0x38
   2d2f0:	cmp	r3, #0
   2d2f4:	beq	2d304 <__assert_fail@plt+0x1b760>
   2d2f8:	ldrb	r9, [r8]
   2d2fc:	cmp	r9, #0
   2d300:	bne	2d360 <__assert_fail@plt+0x1b7bc>
   2d304:	mov	r0, r4
   2d308:	str	r2, [r6]
   2d30c:	str	r1, [r6, #4]
   2d310:	add	sp, sp, #20
   2d314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d318:	cmp	r4, #34	; 0x22
   2d31c:	bne	2d2a4 <__assert_fail@plt+0x1b700>
   2d320:	mov	r4, #1
   2d324:	b	2d2ec <__assert_fail@plt+0x1b748>
   2d328:	ldr	r3, [sp, #56]	; 0x38
   2d32c:	cmp	r3, #0
   2d330:	beq	2d2a4 <__assert_fail@plt+0x1b700>
   2d334:	ldrb	r1, [r8]
   2d338:	cmp	r1, #0
   2d33c:	beq	2d2a4 <__assert_fail@plt+0x1b700>
   2d340:	mov	r0, r3
   2d344:	bl	11994 <strchr@plt>
   2d348:	cmp	r0, #0
   2d34c:	beq	2d2a4 <__assert_fail@plt+0x1b700>
   2d350:	ldrb	r9, [r8]
   2d354:	mov	r2, #1
   2d358:	mov	r3, #0
   2d35c:	strd	r2, [sp, #8]
   2d360:	mov	r1, r9
   2d364:	ldr	r0, [sp, #56]	; 0x38
   2d368:	bl	11994 <strchr@plt>
   2d36c:	cmp	r0, #0
   2d370:	beq	2d778 <__assert_fail@plt+0x1bbd4>
   2d374:	sub	r3, r9, #69	; 0x45
   2d378:	cmp	r3, #47	; 0x2f
   2d37c:	ldrls	pc, [pc, r3, lsl #2]
   2d380:	b	2d444 <__assert_fail@plt+0x1b8a0>
   2d384:	andeq	sp, r2, r4, lsr r5
   2d388:	andeq	sp, r2, r4, asr #8
   2d38c:	andeq	sp, r2, r4, lsr r5
   2d390:	andeq	sp, r2, r4, asr #8
   2d394:	andeq	sp, r2, r4, asr #8
   2d398:	andeq	sp, r2, r4, asr #8
   2d39c:	andeq	sp, r2, r4, lsr r5
   2d3a0:	andeq	sp, r2, r4, asr #8
   2d3a4:	andeq	sp, r2, r4, lsr r5
   2d3a8:	andeq	sp, r2, r4, asr #8
   2d3ac:	andeq	sp, r2, r4, asr #8
   2d3b0:	andeq	sp, r2, r4, lsr r5
   2d3b4:	andeq	sp, r2, r4, asr #8
   2d3b8:	andeq	sp, r2, r4, asr #8
   2d3bc:	andeq	sp, r2, r4, asr #8
   2d3c0:	andeq	sp, r2, r4, lsr r5
   2d3c4:	andeq	sp, r2, r4, asr #8
   2d3c8:	andeq	sp, r2, r4, asr #8
   2d3cc:	andeq	sp, r2, r4, asr #8
   2d3d0:	andeq	sp, r2, r4, asr #8
   2d3d4:	andeq	sp, r2, r4, lsr r5
   2d3d8:	andeq	sp, r2, r4, lsr r5
   2d3dc:	andeq	sp, r2, r4, asr #8
   2d3e0:	andeq	sp, r2, r4, asr #8
   2d3e4:	andeq	sp, r2, r4, asr #8
   2d3e8:	andeq	sp, r2, r4, asr #8
   2d3ec:	andeq	sp, r2, r4, asr #8
   2d3f0:	andeq	sp, r2, r4, asr #8
   2d3f4:	andeq	sp, r2, r4, asr #8
   2d3f8:	andeq	sp, r2, r4, asr #8
   2d3fc:	andeq	sp, r2, r4, asr #8
   2d400:	andeq	sp, r2, r4, asr #8
   2d404:	andeq	sp, r2, r4, asr #8
   2d408:	andeq	sp, r2, r4, asr #8
   2d40c:	andeq	sp, r2, r4, lsr r5
   2d410:	andeq	sp, r2, r4, asr #8
   2d414:	andeq	sp, r2, r4, asr #8
   2d418:	andeq	sp, r2, r4, asr #8
   2d41c:	andeq	sp, r2, r4, lsr r5
   2d420:	andeq	sp, r2, r4, asr #8
   2d424:	andeq	sp, r2, r4, lsr r5
   2d428:	andeq	sp, r2, r4, asr #8
   2d42c:	andeq	sp, r2, r4, asr #8
   2d430:	andeq	sp, r2, r4, asr #8
   2d434:	andeq	sp, r2, r4, asr #8
   2d438:	andeq	sp, r2, r4, asr #8
   2d43c:	andeq	sp, r2, r4, asr #8
   2d440:	andeq	sp, r2, r4, lsr r5
   2d444:	mov	r7, #1
   2d448:	mov	sl, #1024	; 0x400
   2d44c:	sub	r9, r9, #66	; 0x42
   2d450:	cmp	r9, #53	; 0x35
   2d454:	ldrls	pc, [pc, r9, lsl #2]
   2d458:	b	2d778 <__assert_fail@plt+0x1bbd4>
   2d45c:	andeq	sp, r2, r4, asr #13
   2d460:	andeq	sp, r2, r8, ror r7
   2d464:	andeq	sp, r2, r8, ror r7
   2d468:	muleq	r2, ip, r6
   2d46c:	andeq	sp, r2, r8, ror r7
   2d470:	andeq	sp, r2, r4, ror r6
   2d474:	andeq	sp, r2, r8, ror r7
   2d478:	andeq	sp, r2, r8, ror r7
   2d47c:	andeq	sp, r2, r8, ror r7
   2d480:	andeq	sp, r2, r4, asr r6
   2d484:	andeq	sp, r2, r8, ror r7
   2d488:	andeq	sp, r2, r0, lsr #14
   2d48c:	andeq	sp, r2, r8, ror r7
   2d490:	andeq	sp, r2, r8, ror r7
   2d494:	strdeq	sp, [r2], -r8
   2d498:	andeq	sp, r2, r8, ror r7
   2d49c:	andeq	sp, r2, r8, ror r7
   2d4a0:	andeq	sp, r2, r8, ror r7
   2d4a4:	andeq	sp, r2, r0, asr r7
   2d4a8:	andeq	sp, r2, r8, ror r7
   2d4ac:	andeq	sp, r2, r8, ror r7
   2d4b0:	andeq	sp, r2, r8, ror r7
   2d4b4:	andeq	sp, r2, r8, ror r7
   2d4b8:	andeq	sp, r2, ip, lsr #12
   2d4bc:	strdeq	sp, [r2], -r8
   2d4c0:	andeq	sp, r2, r8, ror r7
   2d4c4:	andeq	sp, r2, r8, ror r7
   2d4c8:	andeq	sp, r2, r8, ror r7
   2d4cc:	andeq	sp, r2, r8, ror r7
   2d4d0:	andeq	sp, r2, r8, ror r7
   2d4d4:	andeq	sp, r2, r8, ror r7
   2d4d8:	andeq	sp, r2, r8, ror r7
   2d4dc:	andeq	sp, r2, r4, asr #11
   2d4e0:			; <UNDEFINED> instruction: 0x0002d5b4
   2d4e4:	andeq	sp, r2, r8, ror r7
   2d4e8:	andeq	sp, r2, r8, ror r7
   2d4ec:	andeq	sp, r2, r8, ror r7
   2d4f0:	andeq	sp, r2, r4, ror r6
   2d4f4:	andeq	sp, r2, r8, ror r7
   2d4f8:	andeq	sp, r2, r8, ror r7
   2d4fc:	andeq	sp, r2, r8, ror r7
   2d500:	andeq	sp, r2, r4, asr r6
   2d504:	andeq	sp, r2, r8, ror r7
   2d508:	andeq	sp, r2, r0, lsr #14
   2d50c:	andeq	sp, r2, r8, ror r7
   2d510:	andeq	sp, r2, r8, ror r7
   2d514:	andeq	sp, r2, r8, ror r7
   2d518:	andeq	sp, r2, r8, ror r7
   2d51c:	andeq	sp, r2, r8, ror r7
   2d520:	andeq	sp, r2, r8, ror r7
   2d524:	andeq	sp, r2, r0, asr r7
   2d528:	andeq	sp, r2, r8, ror r7
   2d52c:	andeq	sp, r2, r8, ror r7
   2d530:	andeq	sp, r2, r0, ror r5
   2d534:	mov	r1, #48	; 0x30
   2d538:	ldr	r0, [sp, #56]	; 0x38
   2d53c:	bl	11994 <strchr@plt>
   2d540:	cmp	r0, #0
   2d544:	beq	2d444 <__assert_fail@plt+0x1b8a0>
   2d548:	ldrb	r3, [r8, #1]
   2d54c:	cmp	r3, #68	; 0x44
   2d550:	beq	2d564 <__assert_fail@plt+0x1b9c0>
   2d554:	cmp	r3, #105	; 0x69
   2d558:	beq	2d788 <__assert_fail@plt+0x1bbe4>
   2d55c:	cmp	r3, #66	; 0x42
   2d560:	bne	2d444 <__assert_fail@plt+0x1b8a0>
   2d564:	mov	r7, #2
   2d568:	mov	sl, #1000	; 0x3e8
   2d56c:	b	2d44c <__assert_fail@plt+0x1b8a8>
   2d570:	ldrd	r2, [sp, #8]
   2d574:	cmp	r2, #0
   2d578:	sbcs	r1, r3, #0
   2d57c:	blt	2d7a0 <__assert_fail@plt+0x1bbfc>
   2d580:	adds	r2, r2, r2
   2d584:	adc	r3, r3, r3
   2d588:	mov	r1, r3
   2d58c:	mov	r9, #0
   2d590:	str	r2, [sp, #8]
   2d594:	str	r3, [sp, #12]
   2d598:	add	r3, r8, r7
   2d59c:	str	r3, [r5]
   2d5a0:	ldrb	r3, [r8, r7]
   2d5a4:	orr	r4, r4, r9
   2d5a8:	cmp	r3, #0
   2d5ac:	orrne	r4, r4, #2
   2d5b0:	b	2d304 <__assert_fail@plt+0x1b760>
   2d5b4:	ldr	r2, [sp, #8]
   2d5b8:	ldr	r1, [sp, #12]
   2d5bc:	mov	r9, #0
   2d5c0:	b	2d598 <__assert_fail@plt+0x1b9f4>
   2d5c4:	ldrd	r2, [sp, #8]
   2d5c8:	ldr	r1, [pc, #512]	; 2d7d0 <__assert_fail@plt+0x1bc2c>
   2d5cc:	mvn	r0, #0
   2d5d0:	cmp	r3, r1
   2d5d4:	cmpeq	r2, r0
   2d5d8:	bhi	2d7a0 <__assert_fail@plt+0x1bbfc>
   2d5dc:	lsl	r1, r3, #9
   2d5e0:	orr	r1, r1, r2, lsr #23
   2d5e4:	lsl	r2, r2, #9
   2d5e8:	str	r1, [sp, #12]
   2d5ec:	str	r2, [sp, #8]
   2d5f0:	mov	r9, #0
   2d5f4:	b	2d598 <__assert_fail@plt+0x1b9f4>
   2d5f8:	mov	fp, #7
   2d5fc:	mov	r9, #0
   2d600:	add	r8, sp, #8
   2d604:	mov	r1, sl
   2d608:	mov	r0, r8
   2d60c:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d610:	subs	fp, fp, #1
   2d614:	orr	r9, r9, r0
   2d618:	bne	2d604 <__assert_fail@plt+0x1ba60>
   2d61c:	ldr	r8, [r5]
   2d620:	ldr	r2, [sp, #8]
   2d624:	ldr	r1, [sp, #12]
   2d628:	b	2d598 <__assert_fail@plt+0x1b9f4>
   2d62c:	mov	fp, #8
   2d630:	mov	r9, #0
   2d634:	add	r8, sp, fp
   2d638:	mov	r1, sl
   2d63c:	mov	r0, r8
   2d640:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d644:	subs	fp, fp, #1
   2d648:	orr	r9, r9, r0
   2d64c:	bne	2d638 <__assert_fail@plt+0x1ba94>
   2d650:	b	2d61c <__assert_fail@plt+0x1ba78>
   2d654:	mov	r1, sl
   2d658:	add	r0, sp, #8
   2d65c:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d660:	ldr	r8, [r5]
   2d664:	ldr	r2, [sp, #8]
   2d668:	ldr	r1, [sp, #12]
   2d66c:	mov	r9, r0
   2d670:	b	2d598 <__assert_fail@plt+0x1b9f4>
   2d674:	mov	fp, #3
   2d678:	mov	r9, #0
   2d67c:	add	r8, sp, #8
   2d680:	mov	r1, sl
   2d684:	mov	r0, r8
   2d688:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d68c:	subs	fp, fp, #1
   2d690:	orr	r9, r9, r0
   2d694:	bne	2d680 <__assert_fail@plt+0x1badc>
   2d698:	b	2d61c <__assert_fail@plt+0x1ba78>
   2d69c:	mov	fp, #6
   2d6a0:	mov	r9, #0
   2d6a4:	add	r8, sp, #8
   2d6a8:	mov	r1, sl
   2d6ac:	mov	r0, r8
   2d6b0:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d6b4:	subs	fp, fp, #1
   2d6b8:	orr	r9, r9, r0
   2d6bc:	bne	2d6a8 <__assert_fail@plt+0x1bb04>
   2d6c0:	b	2d61c <__assert_fail@plt+0x1ba78>
   2d6c4:	ldrd	r0, [sp, #8]
   2d6c8:	ldr	r3, [pc, #260]	; 2d7d4 <__assert_fail@plt+0x1bc30>
   2d6cc:	mvn	r2, #0
   2d6d0:	cmp	r1, r3
   2d6d4:	cmpeq	r0, r2
   2d6d8:	bhi	2d7a0 <__assert_fail@plt+0x1bbfc>
   2d6dc:	lsl	r1, r1, #10
   2d6e0:	orr	r1, r1, r0, lsr #22
   2d6e4:	lsl	r2, r0, #10
   2d6e8:	str	r1, [sp, #12]
   2d6ec:	str	r2, [sp, #8]
   2d6f0:	mov	r9, #0
   2d6f4:	b	2d598 <__assert_fail@plt+0x1b9f4>
   2d6f8:	mov	fp, #5
   2d6fc:	mov	r9, #0
   2d700:	add	r8, sp, #8
   2d704:	mov	r1, sl
   2d708:	mov	r0, r8
   2d70c:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d710:	subs	fp, fp, #1
   2d714:	orr	r9, r9, r0
   2d718:	bne	2d704 <__assert_fail@plt+0x1bb60>
   2d71c:	b	2d61c <__assert_fail@plt+0x1ba78>
   2d720:	mov	r1, sl
   2d724:	add	r0, sp, #8
   2d728:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d72c:	mov	r1, sl
   2d730:	mov	r9, r0
   2d734:	add	r0, sp, #8
   2d738:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d73c:	ldr	r8, [r5]
   2d740:	ldr	r2, [sp, #8]
   2d744:	ldr	r1, [sp, #12]
   2d748:	orr	r9, r9, r0
   2d74c:	b	2d598 <__assert_fail@plt+0x1b9f4>
   2d750:	mov	fp, #4
   2d754:	mov	r9, #0
   2d758:	add	r8, sp, #8
   2d75c:	mov	r1, sl
   2d760:	mov	r0, r8
   2d764:	bl	2d1a4 <__assert_fail@plt+0x1b600>
   2d768:	subs	fp, fp, #1
   2d76c:	orr	r9, r9, r0
   2d770:	bne	2d75c <__assert_fail@plt+0x1bbb8>
   2d774:	b	2d61c <__assert_fail@plt+0x1ba78>
   2d778:	ldrd	r2, [sp, #8]
   2d77c:	orr	r4, r4, #2
   2d780:	strd	r2, [r6]
   2d784:	b	2d2a8 <__assert_fail@plt+0x1b704>
   2d788:	ldrb	r7, [r8, #2]
   2d78c:	mov	sl, #1024	; 0x400
   2d790:	cmp	r7, #66	; 0x42
   2d794:	movne	r7, #1
   2d798:	moveq	r7, #3
   2d79c:	b	2d44c <__assert_fail@plt+0x1b8a8>
   2d7a0:	mvn	r1, #0
   2d7a4:	mvn	r0, #0
   2d7a8:	mvn	r2, #0
   2d7ac:	strd	r0, [sp, #8]
   2d7b0:	mov	r9, #1
   2d7b4:	mov	r1, r2
   2d7b8:	b	2d598 <__assert_fail@plt+0x1b9f4>
   2d7bc:	ldr	r3, [pc, #20]	; 2d7d8 <__assert_fail@plt+0x1bc34>
   2d7c0:	mov	r2, #85	; 0x55
   2d7c4:	ldr	r1, [pc, #16]	; 2d7dc <__assert_fail@plt+0x1bc38>
   2d7c8:	ldr	r0, [pc, #16]	; 2d7e0 <__assert_fail@plt+0x1bc3c>
   2d7cc:	bl	11ba4 <__assert_fail@plt>
   2d7d0:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   2d7d4:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   2d7d8:	andeq	r1, r3, r0, ror #9
   2d7dc:	andeq	r1, r3, r0, asr #8
   2d7e0:	andeq	r1, r3, r0, asr r4
   2d7e4:	cmp	r1, #0
   2d7e8:	cmpne	r0, #0
   2d7ec:	moveq	r1, #1
   2d7f0:	moveq	r0, r1
   2d7f4:	umull	r2, r3, r0, r1
   2d7f8:	adds	r3, r3, #0
   2d7fc:	movne	r3, #1
   2d800:	cmp	r2, #0
   2d804:	blt	2d814 <__assert_fail@plt+0x1bc70>
   2d808:	cmp	r3, #0
   2d80c:	bne	2d814 <__assert_fail@plt+0x1bc70>
   2d810:	b	116ac <calloc@plt>
   2d814:	push	{r4, lr}
   2d818:	bl	119b8 <__errno_location@plt>
   2d81c:	mov	r3, #12
   2d820:	str	r3, [r0]
   2d824:	mov	r0, #0
   2d828:	pop	{r4, pc}
   2d82c:	cmp	r0, #0
   2d830:	moveq	r0, #1
   2d834:	cmp	r0, #0
   2d838:	blt	2d840 <__assert_fail@plt+0x1bc9c>
   2d83c:	b	118f8 <malloc@plt>
   2d840:	push	{r4, lr}
   2d844:	bl	119b8 <__errno_location@plt>
   2d848:	mov	r3, #12
   2d84c:	str	r3, [r0]
   2d850:	mov	r0, #0
   2d854:	pop	{r4, pc}
   2d858:	cmp	r0, #0
   2d85c:	beq	2d880 <__assert_fail@plt+0x1bcdc>
   2d860:	cmp	r1, #0
   2d864:	push	{lr}		; (str lr, [sp, #-4]!)
   2d868:	sub	sp, sp, #12
   2d86c:	beq	2d888 <__assert_fail@plt+0x1bce4>
   2d870:	blt	2d8a0 <__assert_fail@plt+0x1bcfc>
   2d874:	add	sp, sp, #12
   2d878:	pop	{lr}		; (ldr lr, [sp], #4)
   2d87c:	b	117f0 <realloc@plt>
   2d880:	mov	r0, r1
   2d884:	b	2d82c <__assert_fail@plt+0x1bc88>
   2d888:	str	r1, [sp, #4]
   2d88c:	bl	17274 <__assert_fail@plt+0x56d0>
   2d890:	ldr	r3, [sp, #4]
   2d894:	mov	r0, r3
   2d898:	add	sp, sp, #12
   2d89c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d8a0:	bl	119b8 <__errno_location@plt>
   2d8a4:	mov	r2, #12
   2d8a8:	mov	r3, #0
   2d8ac:	str	r2, [r0]
   2d8b0:	b	2d894 <__assert_fail@plt+0x1bcf0>
   2d8b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d8b8:	mov	r6, #1
   2d8bc:	mov	ip, r6
   2d8c0:	mov	r8, r6
   2d8c4:	mov	lr, #0
   2d8c8:	mvn	r4, #0
   2d8cc:	add	r3, ip, lr
   2d8d0:	cmp	r3, r1
   2d8d4:	add	r5, r0, r4
   2d8d8:	bcs	2d908 <__assert_fail@plt+0x1bd64>
   2d8dc:	ldrb	r5, [r5, ip]
   2d8e0:	ldrb	r7, [r0, r3]
   2d8e4:	cmp	r7, r5
   2d8e8:	bcs	2d974 <__assert_fail@plt+0x1bdd0>
   2d8ec:	mov	lr, r3
   2d8f0:	mov	ip, #1
   2d8f4:	sub	r6, r3, r4
   2d8f8:	add	r3, ip, lr
   2d8fc:	cmp	r3, r1
   2d900:	add	r5, r0, r4
   2d904:	bcc	2d8dc <__assert_fail@plt+0x1bd38>
   2d908:	mov	r8, #1
   2d90c:	mov	ip, r8
   2d910:	mov	r9, r8
   2d914:	mov	lr, #0
   2d918:	mvn	r5, #0
   2d91c:	str	r6, [r2]
   2d920:	add	r3, ip, lr
   2d924:	cmp	r1, r3
   2d928:	add	r6, r0, r5
   2d92c:	bls	2d95c <__assert_fail@plt+0x1bdb8>
   2d930:	ldrb	r6, [r6, ip]
   2d934:	ldrb	r7, [r0, r3]
   2d938:	cmp	r7, r6
   2d93c:	bls	2d98c <__assert_fail@plt+0x1bde8>
   2d940:	mov	lr, r3
   2d944:	mov	ip, #1
   2d948:	sub	r8, r3, r5
   2d94c:	add	r3, ip, lr
   2d950:	cmp	r1, r3
   2d954:	add	r6, r0, r5
   2d958:	bhi	2d930 <__assert_fail@plt+0x1bd8c>
   2d95c:	add	r0, r4, #1
   2d960:	add	r5, r5, #1
   2d964:	cmp	r5, r0
   2d968:	strcs	r8, [r2]
   2d96c:	movcs	r0, r5
   2d970:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d974:	beq	2d9a4 <__assert_fail@plt+0x1be00>
   2d978:	mov	r4, lr
   2d97c:	mov	r6, r8
   2d980:	add	lr, lr, #1
   2d984:	mov	ip, #1
   2d988:	b	2d8cc <__assert_fail@plt+0x1bd28>
   2d98c:	beq	2d9b8 <__assert_fail@plt+0x1be14>
   2d990:	mov	r5, lr
   2d994:	mov	r8, r9
   2d998:	add	lr, lr, #1
   2d99c:	mov	ip, #1
   2d9a0:	b	2d920 <__assert_fail@plt+0x1bd7c>
   2d9a4:	cmp	ip, r6
   2d9a8:	addne	ip, ip, #1
   2d9ac:	moveq	lr, r3
   2d9b0:	moveq	ip, #1
   2d9b4:	b	2d8cc <__assert_fail@plt+0x1bd28>
   2d9b8:	cmp	ip, r8
   2d9bc:	addne	ip, ip, #1
   2d9c0:	moveq	lr, r3
   2d9c4:	moveq	ip, #1
   2d9c8:	b	2d920 <__assert_fail@plt+0x1bd7c>
   2d9cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d9d0:	cmp	r3, #2
   2d9d4:	sub	sp, sp, #1056	; 0x420
   2d9d8:	sub	sp, sp, #4
   2d9dc:	mov	r4, r3
   2d9e0:	mov	r5, r0
   2d9e4:	mov	fp, r1
   2d9e8:	mov	r8, r2
   2d9ec:	bhi	2dd50 <__assert_fail@plt+0x1c1ac>
   2d9f0:	sub	r2, r4, #1
   2d9f4:	mov	r9, r2
   2d9f8:	add	r6, sp, #32
   2d9fc:	mov	r3, #1
   2da00:	str	r3, [sp]
   2da04:	str	r3, [sp, #28]
   2da08:	add	r2, sp, #1040	; 0x410
   2da0c:	sub	r3, r6, #4
   2da10:	add	r2, r2, #12
   2da14:	str	r4, [r3, #4]!
   2da18:	cmp	r2, r3
   2da1c:	bne	2da14 <__assert_fail@plt+0x1be70>
   2da20:	cmp	r4, #0
   2da24:	subne	r3, r4, #1
   2da28:	subne	r1, r8, #1
   2da2c:	beq	2da48 <__assert_fail@plt+0x1bea4>
   2da30:	ldrb	r2, [r1, #1]!
   2da34:	add	r0, sp, #1056	; 0x420
   2da38:	add	r2, r0, r2, lsl #2
   2da3c:	str	r3, [r2, #-1024]	; 0xfffffc00
   2da40:	subs	r3, r3, #1
   2da44:	bcs	2da30 <__assert_fail@plt+0x1be8c>
   2da48:	ldr	r7, [sp]
   2da4c:	mov	r2, r9
   2da50:	add	r1, r8, r7
   2da54:	mov	r0, r8
   2da58:	bl	117c0 <memcmp@plt>
   2da5c:	mov	r6, r9
   2da60:	subs	sl, r0, #0
   2da64:	bne	2dbe8 <__assert_fail@plt+0x1c044>
   2da68:	sub	r2, r9, #1
   2da6c:	str	r2, [sp, #4]
   2da70:	add	r2, r8, r2
   2da74:	mov	r3, r9
   2da78:	str	r2, [sp, #16]
   2da7c:	sub	r2, r4, r7
   2da80:	str	r2, [sp, #12]
   2da84:	rsb	r2, r3, #1
   2da88:	str	r8, [sp, #8]
   2da8c:	mov	r9, sl
   2da90:	sub	r6, r4, #1
   2da94:	str	r2, [sp, #20]
   2da98:	mov	r0, fp
   2da9c:	mov	r8, r3
   2daa0:	b	2dac0 <__assert_fail@plt+0x1bf1c>
   2daa4:	ldr	r3, [sp]
   2daa8:	cmp	sl, #0
   2daac:	cmpne	ip, r3
   2dab0:	mov	sl, #0
   2dab4:	ldrcc	ip, [sp, #12]
   2dab8:	add	r9, r9, ip
   2dabc:	mov	r0, r7
   2dac0:	add	r7, r9, r4
   2dac4:	sub	r2, r7, r0
   2dac8:	mov	r1, #0
   2dacc:	add	r0, r5, r0
   2dad0:	bl	11a24 <memchr@plt>
   2dad4:	adds	r3, r7, #0
   2dad8:	movne	r3, #1
   2dadc:	cmp	r0, #0
   2dae0:	movne	r3, #0
   2dae4:	cmp	r3, #0
   2dae8:	mov	r0, r3
   2daec:	beq	2dd24 <__assert_fail@plt+0x1c180>
   2daf0:	add	r3, r5, r7
   2daf4:	add	r2, sp, #1056	; 0x420
   2daf8:	ldrb	r3, [r3, #-1]
   2dafc:	add	r3, r2, r3, lsl #2
   2db00:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   2db04:	cmp	ip, #0
   2db08:	bne	2daa4 <__assert_fail@plt+0x1bf00>
   2db0c:	cmp	sl, r8
   2db10:	movcs	r3, sl
   2db14:	movcc	r3, r8
   2db18:	cmp	r3, r6
   2db1c:	bcs	2db60 <__assert_fail@plt+0x1bfbc>
   2db20:	ldr	r1, [sp, #8]
   2db24:	add	r2, r9, r3
   2db28:	ldrb	r0, [r1, r3]
   2db2c:	ldrb	lr, [r5, r2]
   2db30:	add	r1, r1, r3
   2db34:	add	r2, r5, r2
   2db38:	cmp	lr, r0
   2db3c:	beq	2db54 <__assert_fail@plt+0x1bfb0>
   2db40:	b	2dbd4 <__assert_fail@plt+0x1c030>
   2db44:	ldrb	lr, [r1, #1]!
   2db48:	ldrb	r0, [r2, #1]!
   2db4c:	cmp	lr, r0
   2db50:	bne	2dbd4 <__assert_fail@plt+0x1c030>
   2db54:	add	r3, r3, #1
   2db58:	cmp	r3, r6
   2db5c:	bcc	2db44 <__assert_fail@plt+0x1bfa0>
   2db60:	cmp	sl, r8
   2db64:	ldr	r1, [sp, #4]
   2db68:	bcs	2dd74 <__assert_fail@plt+0x1c1d0>
   2db6c:	ldr	r3, [sp, #4]
   2db70:	ldr	ip, [sp, #16]
   2db74:	add	r2, r9, r3
   2db78:	ldrb	r3, [ip]
   2db7c:	ldrb	r0, [r5, r2]
   2db80:	add	r2, r5, r2
   2db84:	cmp	r3, r0
   2db88:	bne	2dd74 <__assert_fail@plt+0x1c1d0>
   2db8c:	mov	r0, ip
   2db90:	sub	fp, sl, #1
   2db94:	b	2dbac <__assert_fail@plt+0x1c008>
   2db98:	ldrb	lr, [r0, #-1]!
   2db9c:	ldrb	ip, [r2, #-1]!
   2dba0:	cmp	lr, ip
   2dba4:	bne	2dbb8 <__assert_fail@plt+0x1c014>
   2dba8:	mov	r1, r3
   2dbac:	sub	r3, r1, #1
   2dbb0:	cmp	r3, fp
   2dbb4:	bne	2db98 <__assert_fail@plt+0x1bff4>
   2dbb8:	add	sl, sl, #1
   2dbbc:	cmp	sl, r1
   2dbc0:	bhi	2dd20 <__assert_fail@plt+0x1c17c>
   2dbc4:	ldr	r3, [sp]
   2dbc8:	ldr	sl, [sp, #12]
   2dbcc:	add	r9, r9, r3
   2dbd0:	b	2dabc <__assert_fail@plt+0x1bf18>
   2dbd4:	ldr	r2, [sp, #20]
   2dbd8:	mov	sl, ip
   2dbdc:	add	r9, r2, r9
   2dbe0:	add	r9, r3, r9
   2dbe4:	b	2dabc <__assert_fail@plt+0x1bf18>
   2dbe8:	sub	r3, r4, r9
   2dbec:	cmp	r3, r9
   2dbf0:	movcc	r3, r9
   2dbf4:	sub	r1, r6, #1
   2dbf8:	add	r3, r3, #1
   2dbfc:	mov	r2, r9
   2dc00:	str	r3, [sp, #8]
   2dc04:	mov	r9, #0
   2dc08:	add	r3, r8, r1
   2dc0c:	str	r3, [sp, #12]
   2dc10:	sub	r6, r4, #1
   2dc14:	add	r3, r8, r2
   2dc18:	mov	r0, fp
   2dc1c:	mov	sl, r9
   2dc20:	mov	fp, r8
   2dc24:	mov	r8, r4
   2dc28:	mov	r4, r2
   2dc2c:	str	r3, [sp]
   2dc30:	rsb	r3, r2, #1
   2dc34:	str	r1, [sp, #4]
   2dc38:	str	r3, [sp, #16]
   2dc3c:	add	r7, r9, r8
   2dc40:	sub	r2, r7, r0
   2dc44:	mov	r1, sl
   2dc48:	add	r0, r5, r0
   2dc4c:	bl	11a24 <memchr@plt>
   2dc50:	cmp	r7, #0
   2dc54:	clz	r0, r0
   2dc58:	lsr	r0, r0, #5
   2dc5c:	moveq	r0, #0
   2dc60:	cmp	r0, #0
   2dc64:	beq	2dd24 <__assert_fail@plt+0x1c180>
   2dc68:	add	r2, r5, r7
   2dc6c:	add	r3, sp, #1056	; 0x420
   2dc70:	ldrb	r2, [r2, #-1]
   2dc74:	add	r2, r3, r2, lsl #2
   2dc78:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   2dc7c:	cmp	r2, #0
   2dc80:	bne	2dd38 <__assert_fail@plt+0x1c194>
   2dc84:	cmp	r4, r6
   2dc88:	bcs	2dcd4 <__assert_fail@plt+0x1c130>
   2dc8c:	ldr	r3, [sp]
   2dc90:	add	r1, r9, r4
   2dc94:	ldrb	r0, [r3]
   2dc98:	ldrb	r2, [r5, r1]
   2dc9c:	add	r1, r5, r1
   2dca0:	cmp	r0, r2
   2dca4:	movne	r2, r4
   2dca8:	bne	2dd30 <__assert_fail@plt+0x1c18c>
   2dcac:	ldr	r0, [sp]
   2dcb0:	mov	r2, r4
   2dcb4:	b	2dcc8 <__assert_fail@plt+0x1c124>
   2dcb8:	ldrb	ip, [r0, #1]!
   2dcbc:	ldrb	r3, [r1, #1]!
   2dcc0:	cmp	ip, r3
   2dcc4:	bne	2dd30 <__assert_fail@plt+0x1c18c>
   2dcc8:	add	r2, r2, #1
   2dccc:	cmp	r2, r6
   2dcd0:	bcc	2dcb8 <__assert_fail@plt+0x1c114>
   2dcd4:	ldr	r3, [sp, #4]
   2dcd8:	cmn	r3, #1
   2dcdc:	beq	2dd20 <__assert_fail@plt+0x1c17c>
   2dce0:	ldr	r3, [sp, #4]
   2dce4:	add	r1, r9, r3
   2dce8:	ldr	r3, [sp, #12]
   2dcec:	ldrb	r2, [r5, r1]
   2dcf0:	add	r1, r5, r1
   2dcf4:	ldrb	r0, [r3]
   2dcf8:	cmp	r0, r2
   2dcfc:	bne	2dd44 <__assert_fail@plt+0x1c1a0>
   2dd00:	mov	r2, r3
   2dd04:	b	2dd18 <__assert_fail@plt+0x1c174>
   2dd08:	ldrb	r0, [r2, #-1]!
   2dd0c:	ldrb	r3, [r1, #-1]!
   2dd10:	cmp	r0, r3
   2dd14:	bne	2dd44 <__assert_fail@plt+0x1c1a0>
   2dd18:	cmp	fp, r2
   2dd1c:	bne	2dd08 <__assert_fail@plt+0x1c164>
   2dd20:	add	r0, r5, r9
   2dd24:	add	sp, sp, #1056	; 0x420
   2dd28:	add	sp, sp, #4
   2dd2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd30:	ldr	r3, [sp, #16]
   2dd34:	add	r9, r3, r9
   2dd38:	add	r9, r9, r2
   2dd3c:	mov	r0, r7
   2dd40:	b	2dc3c <__assert_fail@plt+0x1c098>
   2dd44:	ldr	r3, [sp, #8]
   2dd48:	add	r9, r9, r3
   2dd4c:	b	2dd3c <__assert_fail@plt+0x1c198>
   2dd50:	add	r6, sp, #32
   2dd54:	mov	r1, r3
   2dd58:	sub	r2, r6, #4
   2dd5c:	mov	r0, r8
   2dd60:	bl	2d8b4 <__assert_fail@plt+0x1bd10>
   2dd64:	ldr	r3, [sp, #28]
   2dd68:	str	r3, [sp]
   2dd6c:	mov	r9, r0
   2dd70:	b	2da08 <__assert_fail@plt+0x1be64>
   2dd74:	mov	r1, r8
   2dd78:	b	2dbb8 <__assert_fail@plt+0x1c014>
   2dd7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd80:	sub	sp, sp, #36	; 0x24
   2dd84:	ldrb	r2, [r0]
   2dd88:	cmp	r2, #0
   2dd8c:	beq	2e110 <__assert_fail@plt+0x1c56c>
   2dd90:	ldrb	ip, [r1]
   2dd94:	cmp	ip, #0
   2dd98:	beq	2de40 <__assert_fail@plt+0x1c29c>
   2dd9c:	mov	r8, r0
   2dda0:	add	lr, r1, #1
   2dda4:	mov	sl, #1
   2dda8:	b	2ddb8 <__assert_fail@plt+0x1c214>
   2ddac:	ldrb	ip, [lr], #1
   2ddb0:	cmp	ip, #0
   2ddb4:	beq	2dde0 <__assert_fail@plt+0x1c23c>
   2ddb8:	cmp	ip, r2
   2ddbc:	movne	sl, #0
   2ddc0:	andeq	sl, sl, #1
   2ddc4:	ldrb	r2, [r8, #1]!
   2ddc8:	mov	r6, lr
   2ddcc:	cmp	r2, #0
   2ddd0:	bne	2ddac <__assert_fail@plt+0x1c208>
   2ddd4:	ldrb	r3, [r6]
   2ddd8:	cmp	r3, #0
   2dddc:	bne	2de48 <__assert_fail@plt+0x1c2a4>
   2dde0:	cmp	sl, #0
   2dde4:	bne	2de40 <__assert_fail@plt+0x1c29c>
   2dde8:	mov	r4, r1
   2ddec:	mov	r5, r0
   2ddf0:	ldrb	r1, [r1]
   2ddf4:	add	r0, r0, #1
   2ddf8:	bl	11994 <strchr@plt>
   2ddfc:	sub	r4, r6, r4
   2de00:	subs	r7, r0, #0
   2de04:	beq	2de48 <__assert_fail@plt+0x1c2a4>
   2de08:	cmp	r4, #1
   2de0c:	beq	2e108 <__assert_fail@plt+0x1c564>
   2de10:	add	r0, r5, r4
   2de14:	cmp	r7, r0
   2de18:	subls	r1, r0, r7
   2de1c:	movhi	r1, #1
   2de20:	cmp	r4, #31
   2de24:	sub	r6, r6, r4
   2de28:	mov	r8, r1
   2de2c:	bls	2de54 <__assert_fail@plt+0x1c2b0>
   2de30:	mov	r3, r4
   2de34:	mov	r2, r6
   2de38:	mov	r0, r7
   2de3c:	bl	2d9cc <__assert_fail@plt+0x1be28>
   2de40:	add	sp, sp, #36	; 0x24
   2de44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de48:	mov	r0, #0
   2de4c:	add	sp, sp, #36	; 0x24
   2de50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de54:	cmp	r4, #2
   2de58:	bhi	2e0e0 <__assert_fail@plt+0x1c53c>
   2de5c:	sub	r9, r4, #1
   2de60:	mov	r3, #1
   2de64:	str	r3, [sp, #8]
   2de68:	str	r3, [sp, #28]
   2de6c:	ldr	r5, [sp, #8]
   2de70:	mov	r2, r9
   2de74:	add	r1, r6, r5
   2de78:	mov	r0, r6
   2de7c:	bl	117c0 <memcmp@plt>
   2de80:	subs	fp, r0, #0
   2de84:	bne	2dfbc <__assert_fail@plt+0x1c418>
   2de88:	sub	r3, r9, #1
   2de8c:	str	r3, [sp, #4]
   2de90:	add	r3, r6, r3
   2de94:	str	r3, [sp, #20]
   2de98:	mov	sl, fp
   2de9c:	sub	r3, r4, r5
   2dea0:	mov	r0, r8
   2dea4:	str	r3, [sp, #16]
   2dea8:	rsb	r3, r9, #1
   2deac:	str	r3, [sp, #12]
   2deb0:	add	r5, r4, sl
   2deb4:	sub	r2, r5, r0
   2deb8:	mov	r1, #0
   2debc:	add	r0, r7, r0
   2dec0:	bl	11a24 <memchr@plt>
   2dec4:	adds	r3, r5, #0
   2dec8:	movne	r3, #1
   2decc:	cmp	r0, #0
   2ded0:	movne	r3, #0
   2ded4:	cmp	r3, #0
   2ded8:	mov	r0, r3
   2dedc:	beq	2de40 <__assert_fail@plt+0x1c29c>
   2dee0:	cmp	r9, fp
   2dee4:	movcs	r3, r9
   2dee8:	movcc	r3, fp
   2deec:	cmp	r4, r3
   2def0:	bls	2df30 <__assert_fail@plt+0x1c38c>
   2def4:	add	r2, r3, sl
   2def8:	ldrb	r1, [r6, r3]
   2defc:	ldrb	r0, [r7, r2]
   2df00:	add	ip, r6, r3
   2df04:	add	r2, r7, r2
   2df08:	cmp	r0, r1
   2df0c:	beq	2df24 <__assert_fail@plt+0x1c380>
   2df10:	b	2dfa8 <__assert_fail@plt+0x1c404>
   2df14:	ldrb	r0, [ip, #1]!
   2df18:	ldrb	r1, [r2, #1]!
   2df1c:	cmp	r0, r1
   2df20:	bne	2dfa8 <__assert_fail@plt+0x1c404>
   2df24:	add	r3, r3, #1
   2df28:	cmp	r4, r3
   2df2c:	bne	2df14 <__assert_fail@plt+0x1c370>
   2df30:	cmp	r9, fp
   2df34:	ldr	r1, [sp, #4]
   2df38:	bls	2e100 <__assert_fail@plt+0x1c55c>
   2df3c:	ldr	r3, [sp, #4]
   2df40:	ldr	ip, [sp, #20]
   2df44:	add	r2, sl, r3
   2df48:	ldrb	r3, [ip]
   2df4c:	ldrb	r0, [r7, r2]
   2df50:	add	r2, r7, r2
   2df54:	cmp	r3, r0
   2df58:	bne	2e100 <__assert_fail@plt+0x1c55c>
   2df5c:	mov	r0, ip
   2df60:	sub	r8, fp, #1
   2df64:	b	2df7c <__assert_fail@plt+0x1c3d8>
   2df68:	ldrb	lr, [r0, #-1]!
   2df6c:	ldrb	ip, [r2, #-1]!
   2df70:	cmp	lr, ip
   2df74:	bne	2df88 <__assert_fail@plt+0x1c3e4>
   2df78:	mov	r1, r3
   2df7c:	sub	r3, r1, #1
   2df80:	cmp	r3, r8
   2df84:	bne	2df68 <__assert_fail@plt+0x1c3c4>
   2df88:	add	fp, fp, #1
   2df8c:	cmp	fp, r1
   2df90:	bhi	2e11c <__assert_fail@plt+0x1c578>
   2df94:	ldr	r3, [sp, #8]
   2df98:	ldr	fp, [sp, #16]
   2df9c:	add	sl, sl, r3
   2dfa0:	mov	r0, r5
   2dfa4:	b	2deb0 <__assert_fail@plt+0x1c30c>
   2dfa8:	ldr	r2, [sp, #12]
   2dfac:	mov	fp, #0
   2dfb0:	add	sl, r2, sl
   2dfb4:	add	sl, sl, r3
   2dfb8:	b	2dfa0 <__assert_fail@plt+0x1c3fc>
   2dfbc:	sub	r3, r4, r9
   2dfc0:	cmp	r3, r9
   2dfc4:	movcc	r3, r9
   2dfc8:	sub	r2, r9, #1
   2dfcc:	add	r3, r3, #1
   2dfd0:	str	r3, [sp, #8]
   2dfd4:	mov	r0, r8
   2dfd8:	add	r3, r6, r2
   2dfdc:	mov	r5, #0
   2dfe0:	add	sl, r6, r9
   2dfe4:	mov	r8, r2
   2dfe8:	str	r3, [sp, #12]
   2dfec:	rsb	r3, r9, #1
   2dff0:	str	r3, [sp, #4]
   2dff4:	add	fp, r4, r5
   2dff8:	sub	r2, fp, r0
   2dffc:	mov	r1, #0
   2e000:	add	r0, r7, r0
   2e004:	bl	11a24 <memchr@plt>
   2e008:	adds	r3, fp, #0
   2e00c:	movne	r3, #1
   2e010:	cmp	r0, #0
   2e014:	movne	r3, #0
   2e018:	cmp	r3, #0
   2e01c:	mov	r0, r3
   2e020:	beq	2de40 <__assert_fail@plt+0x1c29c>
   2e024:	cmp	r4, r9
   2e028:	bls	2e070 <__assert_fail@plt+0x1c4cc>
   2e02c:	add	r1, r9, r5
   2e030:	ldrb	r0, [sl]
   2e034:	ldrb	r2, [r7, r1]
   2e038:	add	r1, r7, r1
   2e03c:	cmp	r0, r2
   2e040:	movne	r2, r9
   2e044:	bne	2e0c0 <__assert_fail@plt+0x1c51c>
   2e048:	mov	r0, sl
   2e04c:	mov	r2, r9
   2e050:	b	2e064 <__assert_fail@plt+0x1c4c0>
   2e054:	ldrb	ip, [r0, #1]!
   2e058:	ldrb	r3, [r1, #1]!
   2e05c:	cmp	ip, r3
   2e060:	bne	2e0c0 <__assert_fail@plt+0x1c51c>
   2e064:	add	r2, r2, #1
   2e068:	cmp	r4, r2
   2e06c:	bhi	2e054 <__assert_fail@plt+0x1c4b0>
   2e070:	cmn	r8, #1
   2e074:	beq	2e0b4 <__assert_fail@plt+0x1c510>
   2e078:	ldr	r3, [sp, #12]
   2e07c:	add	r1, r5, r8
   2e080:	ldrb	r0, [r3]
   2e084:	ldrb	r2, [r7, r1]
   2e088:	add	r1, r7, r1
   2e08c:	cmp	r0, r2
   2e090:	bne	2e0d4 <__assert_fail@plt+0x1c530>
   2e094:	mov	r2, r3
   2e098:	b	2e0ac <__assert_fail@plt+0x1c508>
   2e09c:	ldrb	r0, [r2, #-1]!
   2e0a0:	ldrb	r3, [r1, #-1]!
   2e0a4:	cmp	r0, r3
   2e0a8:	bne	2e0d4 <__assert_fail@plt+0x1c530>
   2e0ac:	cmp	r6, r2
   2e0b0:	bne	2e09c <__assert_fail@plt+0x1c4f8>
   2e0b4:	add	r0, r7, r5
   2e0b8:	add	sp, sp, #36	; 0x24
   2e0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e0c0:	ldr	r3, [sp, #4]
   2e0c4:	add	r5, r3, r5
   2e0c8:	add	r5, r5, r2
   2e0cc:	mov	r0, fp
   2e0d0:	b	2dff4 <__assert_fail@plt+0x1c450>
   2e0d4:	ldr	r3, [sp, #8]
   2e0d8:	add	r5, r5, r3
   2e0dc:	b	2e0cc <__assert_fail@plt+0x1c528>
   2e0e0:	add	r2, sp, #28
   2e0e4:	mov	r1, r4
   2e0e8:	mov	r0, r6
   2e0ec:	bl	2d8b4 <__assert_fail@plt+0x1bd10>
   2e0f0:	ldr	r3, [sp, #28]
   2e0f4:	str	r3, [sp, #8]
   2e0f8:	mov	r9, r0
   2e0fc:	b	2de6c <__assert_fail@plt+0x1c2c8>
   2e100:	mov	r1, r9
   2e104:	b	2df88 <__assert_fail@plt+0x1c3e4>
   2e108:	mov	r0, r7
   2e10c:	b	2de40 <__assert_fail@plt+0x1c29c>
   2e110:	mov	r6, r1
   2e114:	mov	sl, #1
   2e118:	b	2ddd4 <__assert_fail@plt+0x1c230>
   2e11c:	add	r0, r7, sl
   2e120:	b	2de40 <__assert_fail@plt+0x1c29c>
   2e124:	push	{r4, r5, r6, lr}
   2e128:	mov	r4, r0
   2e12c:	bl	118a4 <__fpending@plt>
   2e130:	ldr	r5, [r4]
   2e134:	and	r5, r5, #32
   2e138:	mov	r6, r0
   2e13c:	mov	r0, r4
   2e140:	bl	154f0 <__assert_fail@plt+0x394c>
   2e144:	cmp	r5, #0
   2e148:	mov	r4, r0
   2e14c:	bne	2e16c <__assert_fail@plt+0x1c5c8>
   2e150:	cmp	r0, #0
   2e154:	beq	2e164 <__assert_fail@plt+0x1c5c0>
   2e158:	cmp	r6, #0
   2e15c:	beq	2e188 <__assert_fail@plt+0x1c5e4>
   2e160:	mvn	r4, #0
   2e164:	mov	r0, r4
   2e168:	pop	{r4, r5, r6, pc}
   2e16c:	cmp	r0, #0
   2e170:	bne	2e160 <__assert_fail@plt+0x1c5bc>
   2e174:	bl	119b8 <__errno_location@plt>
   2e178:	str	r4, [r0]
   2e17c:	mvn	r4, #0
   2e180:	mov	r0, r4
   2e184:	pop	{r4, r5, r6, pc}
   2e188:	bl	119b8 <__errno_location@plt>
   2e18c:	ldr	r4, [r0]
   2e190:	subs	r4, r4, #9
   2e194:	mvnne	r4, #0
   2e198:	mov	r0, r4
   2e19c:	pop	{r4, r5, r6, pc}
   2e1a0:	push	{r4, r5}
   2e1a4:	mov	r4, #0
   2e1a8:	mov	r5, #0
   2e1ac:	ldr	r3, [pc, #12]	; 2e1c0 <__assert_fail@plt+0x1c61c>
   2e1b0:	strd	r4, [r0, #16]
   2e1b4:	str	r3, [r0, #24]
   2e1b8:	pop	{r4, r5}
   2e1bc:	bx	lr
   2e1c0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   2e1c4:	ldr	r3, [pc, #180]	; 2e280 <__assert_fail@plt+0x1c6dc>
   2e1c8:	ldr	r2, [r0, #24]
   2e1cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e1d0:	cmp	r2, r3
   2e1d4:	bne	2e26c <__assert_fail@plt+0x1c6c8>
   2e1d8:	ldrd	r6, [r0, #16]
   2e1dc:	orrs	r3, r6, r7
   2e1e0:	bne	2e20c <__assert_fail@plt+0x1c668>
   2e1e4:	mov	r2, #1
   2e1e8:	mov	r3, #0
   2e1ec:	ldrd	r8, [r1, #96]	; 0x60
   2e1f0:	strd	r2, [r0, #16]
   2e1f4:	ldrd	r2, [r1]
   2e1f8:	mov	r1, #0
   2e1fc:	strd	r8, [r0]
   2e200:	strd	r2, [r0, #8]
   2e204:	mov	r0, r1
   2e208:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e20c:	ldrd	r8, [r1, #96]	; 0x60
   2e210:	ldrd	r2, [r0]
   2e214:	cmp	r9, r3
   2e218:	cmpeq	r8, r2
   2e21c:	beq	2e254 <__assert_fail@plt+0x1c6b0>
   2e220:	adds	r2, r6, #1
   2e224:	adc	r3, r7, #0
   2e228:	and	r6, r6, r2
   2e22c:	and	r7, r7, r3
   2e230:	orrs	ip, r6, r7
   2e234:	strd	r2, [r0, #16]
   2e238:	movne	r1, #0
   2e23c:	bne	2e204 <__assert_fail@plt+0x1c660>
   2e240:	orrs	r3, r2, r3
   2e244:	bne	2e1f4 <__assert_fail@plt+0x1c650>
   2e248:	mov	r1, #1
   2e24c:	mov	r0, r1
   2e250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e254:	ldrd	r4, [r1]
   2e258:	ldrd	r2, [r0, #8]
   2e25c:	cmp	r5, r3
   2e260:	cmpeq	r4, r2
   2e264:	bne	2e220 <__assert_fail@plt+0x1c67c>
   2e268:	b	2e248 <__assert_fail@plt+0x1c6a4>
   2e26c:	ldr	r3, [pc, #16]	; 2e284 <__assert_fail@plt+0x1c6e0>
   2e270:	mov	r2, #60	; 0x3c
   2e274:	ldr	r1, [pc, #12]	; 2e288 <__assert_fail@plt+0x1c6e4>
   2e278:	ldr	r0, [pc, #12]	; 2e28c <__assert_fail@plt+0x1c6e8>
   2e27c:	bl	11ba4 <__assert_fail@plt>
   2e280:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   2e284:	andeq	r1, r3, ip, ror #9
   2e288:	strdeq	r1, [r3], -r8
   2e28c:	andeq	r1, r3, ip, lsl #10
   2e290:	ldr	ip, [r0, #4]
   2e294:	cmp	ip, r1
   2e298:	bcs	2e314 <__assert_fail@plt+0x1c770>
   2e29c:	cmp	r3, #0
   2e2a0:	push	{r4, r5, r6, r7, r8, lr}
   2e2a4:	mov	r6, r3
   2e2a8:	mov	r7, r2
   2e2ac:	mov	r5, r1
   2e2b0:	mov	r4, r0
   2e2b4:	bne	2e2e8 <__assert_fail@plt+0x1c744>
   2e2b8:	ldr	r0, [r4, #8]
   2e2bc:	mul	r1, r6, r5
   2e2c0:	cmp	r0, r7
   2e2c4:	beq	2e324 <__assert_fail@plt+0x1c780>
   2e2c8:	bl	2d858 <__assert_fail@plt+0x1bcb4>
   2e2cc:	subs	r7, r0, #0
   2e2d0:	beq	2e350 <__assert_fail@plt+0x1c7ac>
   2e2d4:	mov	r3, #1
   2e2d8:	stmib	r4, {r5, r7}
   2e2dc:	str	r5, [r4]
   2e2e0:	mov	r0, r3
   2e2e4:	pop	{r4, r5, r6, r7, r8, pc}
   2e2e8:	mov	r1, r3
   2e2ec:	mvn	r0, #0
   2e2f0:	bl	2e6e4 <__assert_fail@plt+0x1cb40>
   2e2f4:	cmp	r5, r0
   2e2f8:	bls	2e2b8 <__assert_fail@plt+0x1c714>
   2e2fc:	bl	119b8 <__errno_location@plt>
   2e300:	mov	r3, #0
   2e304:	mov	r2, #12
   2e308:	str	r2, [r0]
   2e30c:	mov	r0, r3
   2e310:	pop	{r4, r5, r6, r7, r8, pc}
   2e314:	mov	r3, #1
   2e318:	str	r1, [r0]
   2e31c:	mov	r0, r3
   2e320:	bx	lr
   2e324:	mov	r0, r1
   2e328:	bl	2d82c <__assert_fail@plt+0x1bc88>
   2e32c:	subs	r7, r0, #0
   2e330:	beq	2e350 <__assert_fail@plt+0x1c7ac>
   2e334:	ldr	r1, [r4, #8]
   2e338:	cmp	r1, #0
   2e33c:	beq	2e2d4 <__assert_fail@plt+0x1c730>
   2e340:	ldr	r2, [r4]
   2e344:	mul	r2, r2, r6
   2e348:	bl	11784 <memcpy@plt>
   2e34c:	b	2e2d4 <__assert_fail@plt+0x1c730>
   2e350:	mov	r3, #0
   2e354:	b	2e2e0 <__assert_fail@plt+0x1c73c>
   2e358:	push	{r1, r2, r3}
   2e35c:	push	{r4, r5, r6, r7, lr}
   2e360:	sub	sp, sp, #8
   2e364:	add	r3, sp, #32
   2e368:	ldr	r1, [sp, #28]
   2e36c:	str	r3, [sp, #4]
   2e370:	cmp	r1, #0
   2e374:	beq	2e40c <__assert_fail@plt+0x1c868>
   2e378:	ldr	r2, [pc, #412]	; 2e51c <__assert_fail@plt+0x1c978>
   2e37c:	mov	r5, r0
   2e380:	cmp	r1, r2
   2e384:	bne	2e3d0 <__assert_fail@plt+0x1c82c>
   2e388:	ldr	r6, [pc, #400]	; 2e520 <__assert_fail@plt+0x1c97c>
   2e38c:	ldr	r7, [r3]
   2e390:	add	r2, sp, #36	; 0x24
   2e394:	ldr	r3, [r6]
   2e398:	str	r2, [sp, #4]
   2e39c:	cmp	r3, #0
   2e3a0:	mov	r2, r7
   2e3a4:	blt	2e4d0 <__assert_fail@plt+0x1c92c>
   2e3a8:	bl	11a54 <fcntl64@plt>
   2e3ac:	subs	r4, r0, #0
   2e3b0:	blt	2e454 <__assert_fail@plt+0x1c8b0>
   2e3b4:	mov	r3, #1
   2e3b8:	str	r3, [r6]
   2e3bc:	mov	r0, r4
   2e3c0:	add	sp, sp, #8
   2e3c4:	pop	{r4, r5, r6, r7, lr}
   2e3c8:	add	sp, sp, #12
   2e3cc:	bx	lr
   2e3d0:	cmp	r1, #11
   2e3d4:	beq	2e3fc <__assert_fail@plt+0x1c858>
   2e3d8:	bgt	2e41c <__assert_fail@plt+0x1c878>
   2e3dc:	cmp	r1, #3
   2e3e0:	beq	2e3fc <__assert_fail@plt+0x1c858>
   2e3e4:	ble	2e510 <__assert_fail@plt+0x1c96c>
   2e3e8:	cmp	r1, #8
   2e3ec:	beq	2e43c <__assert_fail@plt+0x1c898>
   2e3f0:	ble	2e43c <__assert_fail@plt+0x1c898>
   2e3f4:	cmp	r1, #9
   2e3f8:	bne	2e43c <__assert_fail@plt+0x1c898>
   2e3fc:	mov	r0, r5
   2e400:	bl	11a54 <fcntl64@plt>
   2e404:	mov	r4, r0
   2e408:	b	2e3bc <__assert_fail@plt+0x1c818>
   2e40c:	ldr	r2, [sp, #32]
   2e410:	bl	11a54 <fcntl64@plt>
   2e414:	mov	r4, r0
   2e418:	b	2e3bc <__assert_fail@plt+0x1c818>
   2e41c:	ldr	r3, [pc, #256]	; 2e524 <__assert_fail@plt+0x1c980>
   2e420:	cmp	r1, r3
   2e424:	bgt	2e4f0 <__assert_fail@plt+0x1c94c>
   2e428:	cmp	r1, r2
   2e42c:	bge	2e43c <__assert_fail@plt+0x1c898>
   2e430:	sub	r3, r3, #6
   2e434:	cmp	r1, r3
   2e438:	beq	2e3fc <__assert_fail@plt+0x1c858>
   2e43c:	ldr	r3, [sp, #4]
   2e440:	mov	r0, r5
   2e444:	ldr	r2, [r3]
   2e448:	bl	11a54 <fcntl64@plt>
   2e44c:	mov	r4, r0
   2e450:	b	2e3bc <__assert_fail@plt+0x1c818>
   2e454:	bl	119b8 <__errno_location@plt>
   2e458:	ldr	r3, [r0]
   2e45c:	cmp	r3, #22
   2e460:	bne	2e3b4 <__assert_fail@plt+0x1c810>
   2e464:	mov	r2, r7
   2e468:	mov	r0, r5
   2e46c:	mov	r1, #0
   2e470:	bl	11a54 <fcntl64@plt>
   2e474:	subs	r4, r0, #0
   2e478:	blt	2e3bc <__assert_fail@plt+0x1c818>
   2e47c:	mvn	r3, #0
   2e480:	str	r3, [r6]
   2e484:	mov	r1, #1
   2e488:	mov	r0, r4
   2e48c:	bl	11a54 <fcntl64@plt>
   2e490:	subs	r2, r0, #0
   2e494:	blt	2e4b0 <__assert_fail@plt+0x1c90c>
   2e498:	orr	r2, r2, #1
   2e49c:	mov	r1, #2
   2e4a0:	mov	r0, r4
   2e4a4:	bl	11a54 <fcntl64@plt>
   2e4a8:	cmn	r0, #1
   2e4ac:	bne	2e3bc <__assert_fail@plt+0x1c818>
   2e4b0:	bl	119b8 <__errno_location@plt>
   2e4b4:	mov	r5, r0
   2e4b8:	mov	r0, r4
   2e4bc:	ldr	r6, [r5]
   2e4c0:	mvn	r4, #0
   2e4c4:	bl	11b80 <close@plt>
   2e4c8:	str	r6, [r5]
   2e4cc:	b	2e3bc <__assert_fail@plt+0x1c818>
   2e4d0:	mov	r1, #0
   2e4d4:	bl	11a54 <fcntl64@plt>
   2e4d8:	subs	r4, r0, #0
   2e4dc:	blt	2e3bc <__assert_fail@plt+0x1c818>
   2e4e0:	ldr	r3, [r6]
   2e4e4:	cmn	r3, #1
   2e4e8:	beq	2e484 <__assert_fail@plt+0x1c8e0>
   2e4ec:	b	2e3bc <__assert_fail@plt+0x1c818>
   2e4f0:	ldr	r3, [pc, #48]	; 2e528 <__assert_fail@plt+0x1c984>
   2e4f4:	cmp	r1, r3
   2e4f8:	beq	2e43c <__assert_fail@plt+0x1c898>
   2e4fc:	blt	2e3fc <__assert_fail@plt+0x1c858>
   2e500:	add	r3, r3, #1
   2e504:	cmp	r1, r3
   2e508:	bne	2e43c <__assert_fail@plt+0x1c898>
   2e50c:	b	2e3fc <__assert_fail@plt+0x1c858>
   2e510:	cmp	r1, #1
   2e514:	bne	2e43c <__assert_fail@plt+0x1c898>
   2e518:	b	2e3fc <__assert_fail@plt+0x1c858>
   2e51c:	andeq	r0, r0, r6, lsl #8
   2e520:	andeq	r2, r4, r0, lsl #8
   2e524:	andeq	r0, r0, r7, lsl #8
   2e528:	andeq	r0, r0, r9, lsl #8
   2e52c:	push	{r1, r2, r3}
   2e530:	push	{lr}		; (str lr, [sp, #-4]!)
   2e534:	sub	sp, sp, #8
   2e538:	ldr	r1, [sp, #12]
   2e53c:	ands	r2, r1, #64	; 0x40
   2e540:	addne	r3, sp, #16
   2e544:	ldrne	r2, [sp, #16]
   2e548:	strne	r3, [sp, #4]
   2e54c:	bl	118e0 <open64@plt>
   2e550:	bl	2bf60 <__assert_fail@plt+0x1a3bc>
   2e554:	add	sp, sp, #8
   2e558:	pop	{lr}		; (ldr lr, [sp], #4)
   2e55c:	add	sp, sp, #12
   2e560:	bx	lr
   2e564:	push	{lr}		; (str lr, [sp, #-4]!)
   2e568:	sub	sp, sp, #268	; 0x10c
   2e56c:	add	r1, sp, #4
   2e570:	ldr	r2, [pc, #60]	; 2e5b4 <__assert_fail@plt+0x1ca10>
   2e574:	bl	2e640 <__assert_fail@plt+0x1ca9c>
   2e578:	cmp	r0, #0
   2e57c:	movne	r0, #0
   2e580:	bne	2e5ac <__assert_fail@plt+0x1ca08>
   2e584:	ldr	r1, [pc, #44]	; 2e5b8 <__assert_fail@plt+0x1ca14>
   2e588:	add	r0, sp, #4
   2e58c:	bl	1170c <strcmp@plt>
   2e590:	cmp	r0, #0
   2e594:	beq	2e5ac <__assert_fail@plt+0x1ca08>
   2e598:	add	r0, sp, #4
   2e59c:	ldr	r1, [pc, #24]	; 2e5bc <__assert_fail@plt+0x1ca18>
   2e5a0:	bl	1170c <strcmp@plt>
   2e5a4:	adds	r0, r0, #0
   2e5a8:	movne	r0, #1
   2e5ac:	add	sp, sp, #268	; 0x10c
   2e5b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e5b4:	andeq	r0, r0, r1, lsl #2
   2e5b8:	andeq	r1, r3, r4, lsr #10
   2e5bc:	andeq	r1, r3, r8, lsr #10
   2e5c0:	push	{r4, lr}
   2e5c4:	mov	r0, #14
   2e5c8:	bl	11a84 <nl_langinfo@plt>
   2e5cc:	cmp	r0, #0
   2e5d0:	beq	2e5e8 <__assert_fail@plt+0x1ca44>
   2e5d4:	ldrb	r2, [r0]
   2e5d8:	ldr	r3, [pc, #16]	; 2e5f0 <__assert_fail@plt+0x1ca4c>
   2e5dc:	cmp	r2, #0
   2e5e0:	moveq	r0, r3
   2e5e4:	pop	{r4, pc}
   2e5e8:	ldr	r0, [pc]	; 2e5f0 <__assert_fail@plt+0x1ca4c>
   2e5ec:	pop	{r4, pc}
   2e5f0:	andeq	r1, r3, r0, lsr r5
   2e5f4:	push	{r4, r5, r6, lr}
   2e5f8:	subs	r4, r2, #0
   2e5fc:	mov	r6, r0
   2e600:	mov	r5, r1
   2e604:	beq	2e630 <__assert_fail@plt+0x1ca8c>
   2e608:	mov	r1, r4
   2e60c:	mvn	r0, #0
   2e610:	bl	2e6e4 <__assert_fail@plt+0x1cb40>
   2e614:	cmp	r0, r5
   2e618:	bcs	2e630 <__assert_fail@plt+0x1ca8c>
   2e61c:	bl	119b8 <__errno_location@plt>
   2e620:	mov	r3, #12
   2e624:	str	r3, [r0]
   2e628:	mov	r0, #0
   2e62c:	pop	{r4, r5, r6, pc}
   2e630:	mul	r1, r5, r4
   2e634:	mov	r0, r6
   2e638:	pop	{r4, r5, r6, lr}
   2e63c:	b	2d858 <__assert_fail@plt+0x1bcb4>
   2e640:	push	{r4, r5, r6, lr}
   2e644:	mov	r5, r1
   2e648:	mov	r1, #0
   2e64c:	mov	r4, r2
   2e650:	bl	11a6c <setlocale@plt>
   2e654:	subs	r6, r0, #0
   2e658:	beq	2e6b4 <__assert_fail@plt+0x1cb10>
   2e65c:	bl	11988 <strlen@plt>
   2e660:	cmp	r4, r0
   2e664:	bhi	2e69c <__assert_fail@plt+0x1caf8>
   2e668:	cmp	r4, #0
   2e66c:	bne	2e678 <__assert_fail@plt+0x1cad4>
   2e670:	mov	r0, #34	; 0x22
   2e674:	pop	{r4, r5, r6, pc}
   2e678:	sub	r4, r4, #1
   2e67c:	mov	r1, r6
   2e680:	mov	r2, r4
   2e684:	mov	r0, r5
   2e688:	bl	11784 <memcpy@plt>
   2e68c:	mov	r3, #0
   2e690:	strb	r3, [r5, r4]
   2e694:	mov	r0, #34	; 0x22
   2e698:	pop	{r4, r5, r6, pc}
   2e69c:	add	r2, r0, #1
   2e6a0:	mov	r1, r6
   2e6a4:	mov	r0, r5
   2e6a8:	bl	11784 <memcpy@plt>
   2e6ac:	mov	r0, #0
   2e6b0:	pop	{r4, r5, r6, pc}
   2e6b4:	cmp	r4, #0
   2e6b8:	beq	2e6c8 <__assert_fail@plt+0x1cb24>
   2e6bc:	strb	r6, [r5]
   2e6c0:	mov	r0, #22
   2e6c4:	pop	{r4, r5, r6, pc}
   2e6c8:	mov	r0, #22
   2e6cc:	pop	{r4, r5, r6, pc}
   2e6d0:	mov	r1, #0
   2e6d4:	b	11a6c <setlocale@plt>
   2e6d8:	mov	r2, #3
   2e6dc:	mov	r1, #0
   2e6e0:	b	2e358 <__assert_fail@plt+0x1c7b4>
   2e6e4:	subs	r2, r1, #1
   2e6e8:	bxeq	lr
   2e6ec:	bcc	2e8c4 <__assert_fail@plt+0x1cd20>
   2e6f0:	cmp	r0, r1
   2e6f4:	bls	2e8a8 <__assert_fail@plt+0x1cd04>
   2e6f8:	tst	r1, r2
   2e6fc:	beq	2e8b4 <__assert_fail@plt+0x1cd10>
   2e700:	clz	r3, r0
   2e704:	clz	r2, r1
   2e708:	sub	r3, r2, r3
   2e70c:	rsbs	r3, r3, #31
   2e710:	addne	r3, r3, r3, lsl #1
   2e714:	mov	r2, #0
   2e718:	addne	pc, pc, r3, lsl #2
   2e71c:	nop			; (mov r0, r0)
   2e720:	cmp	r0, r1, lsl #31
   2e724:	adc	r2, r2, r2
   2e728:	subcs	r0, r0, r1, lsl #31
   2e72c:	cmp	r0, r1, lsl #30
   2e730:	adc	r2, r2, r2
   2e734:	subcs	r0, r0, r1, lsl #30
   2e738:	cmp	r0, r1, lsl #29
   2e73c:	adc	r2, r2, r2
   2e740:	subcs	r0, r0, r1, lsl #29
   2e744:	cmp	r0, r1, lsl #28
   2e748:	adc	r2, r2, r2
   2e74c:	subcs	r0, r0, r1, lsl #28
   2e750:	cmp	r0, r1, lsl #27
   2e754:	adc	r2, r2, r2
   2e758:	subcs	r0, r0, r1, lsl #27
   2e75c:	cmp	r0, r1, lsl #26
   2e760:	adc	r2, r2, r2
   2e764:	subcs	r0, r0, r1, lsl #26
   2e768:	cmp	r0, r1, lsl #25
   2e76c:	adc	r2, r2, r2
   2e770:	subcs	r0, r0, r1, lsl #25
   2e774:	cmp	r0, r1, lsl #24
   2e778:	adc	r2, r2, r2
   2e77c:	subcs	r0, r0, r1, lsl #24
   2e780:	cmp	r0, r1, lsl #23
   2e784:	adc	r2, r2, r2
   2e788:	subcs	r0, r0, r1, lsl #23
   2e78c:	cmp	r0, r1, lsl #22
   2e790:	adc	r2, r2, r2
   2e794:	subcs	r0, r0, r1, lsl #22
   2e798:	cmp	r0, r1, lsl #21
   2e79c:	adc	r2, r2, r2
   2e7a0:	subcs	r0, r0, r1, lsl #21
   2e7a4:	cmp	r0, r1, lsl #20
   2e7a8:	adc	r2, r2, r2
   2e7ac:	subcs	r0, r0, r1, lsl #20
   2e7b0:	cmp	r0, r1, lsl #19
   2e7b4:	adc	r2, r2, r2
   2e7b8:	subcs	r0, r0, r1, lsl #19
   2e7bc:	cmp	r0, r1, lsl #18
   2e7c0:	adc	r2, r2, r2
   2e7c4:	subcs	r0, r0, r1, lsl #18
   2e7c8:	cmp	r0, r1, lsl #17
   2e7cc:	adc	r2, r2, r2
   2e7d0:	subcs	r0, r0, r1, lsl #17
   2e7d4:	cmp	r0, r1, lsl #16
   2e7d8:	adc	r2, r2, r2
   2e7dc:	subcs	r0, r0, r1, lsl #16
   2e7e0:	cmp	r0, r1, lsl #15
   2e7e4:	adc	r2, r2, r2
   2e7e8:	subcs	r0, r0, r1, lsl #15
   2e7ec:	cmp	r0, r1, lsl #14
   2e7f0:	adc	r2, r2, r2
   2e7f4:	subcs	r0, r0, r1, lsl #14
   2e7f8:	cmp	r0, r1, lsl #13
   2e7fc:	adc	r2, r2, r2
   2e800:	subcs	r0, r0, r1, lsl #13
   2e804:	cmp	r0, r1, lsl #12
   2e808:	adc	r2, r2, r2
   2e80c:	subcs	r0, r0, r1, lsl #12
   2e810:	cmp	r0, r1, lsl #11
   2e814:	adc	r2, r2, r2
   2e818:	subcs	r0, r0, r1, lsl #11
   2e81c:	cmp	r0, r1, lsl #10
   2e820:	adc	r2, r2, r2
   2e824:	subcs	r0, r0, r1, lsl #10
   2e828:	cmp	r0, r1, lsl #9
   2e82c:	adc	r2, r2, r2
   2e830:	subcs	r0, r0, r1, lsl #9
   2e834:	cmp	r0, r1, lsl #8
   2e838:	adc	r2, r2, r2
   2e83c:	subcs	r0, r0, r1, lsl #8
   2e840:	cmp	r0, r1, lsl #7
   2e844:	adc	r2, r2, r2
   2e848:	subcs	r0, r0, r1, lsl #7
   2e84c:	cmp	r0, r1, lsl #6
   2e850:	adc	r2, r2, r2
   2e854:	subcs	r0, r0, r1, lsl #6
   2e858:	cmp	r0, r1, lsl #5
   2e85c:	adc	r2, r2, r2
   2e860:	subcs	r0, r0, r1, lsl #5
   2e864:	cmp	r0, r1, lsl #4
   2e868:	adc	r2, r2, r2
   2e86c:	subcs	r0, r0, r1, lsl #4
   2e870:	cmp	r0, r1, lsl #3
   2e874:	adc	r2, r2, r2
   2e878:	subcs	r0, r0, r1, lsl #3
   2e87c:	cmp	r0, r1, lsl #2
   2e880:	adc	r2, r2, r2
   2e884:	subcs	r0, r0, r1, lsl #2
   2e888:	cmp	r0, r1, lsl #1
   2e88c:	adc	r2, r2, r2
   2e890:	subcs	r0, r0, r1, lsl #1
   2e894:	cmp	r0, r1
   2e898:	adc	r2, r2, r2
   2e89c:	subcs	r0, r0, r1
   2e8a0:	mov	r0, r2
   2e8a4:	bx	lr
   2e8a8:	moveq	r0, #1
   2e8ac:	movne	r0, #0
   2e8b0:	bx	lr
   2e8b4:	clz	r2, r1
   2e8b8:	rsb	r2, r2, #31
   2e8bc:	lsr	r0, r0, r2
   2e8c0:	bx	lr
   2e8c4:	cmp	r0, #0
   2e8c8:	mvnne	r0, #0
   2e8cc:	b	2eff8 <__assert_fail@plt+0x1d454>
   2e8d0:	cmp	r1, #0
   2e8d4:	beq	2e8c4 <__assert_fail@plt+0x1cd20>
   2e8d8:	push	{r0, r1, lr}
   2e8dc:	bl	2e6e4 <__assert_fail@plt+0x1cb40>
   2e8e0:	pop	{r1, r2, lr}
   2e8e4:	mul	r3, r2, r0
   2e8e8:	sub	r1, r1, r3
   2e8ec:	bx	lr
   2e8f0:	cmp	r1, #0
   2e8f4:	beq	2eb00 <__assert_fail@plt+0x1cf5c>
   2e8f8:	eor	ip, r0, r1
   2e8fc:	rsbmi	r1, r1, #0
   2e900:	subs	r2, r1, #1
   2e904:	beq	2eacc <__assert_fail@plt+0x1cf28>
   2e908:	movs	r3, r0
   2e90c:	rsbmi	r3, r0, #0
   2e910:	cmp	r3, r1
   2e914:	bls	2ead8 <__assert_fail@plt+0x1cf34>
   2e918:	tst	r1, r2
   2e91c:	beq	2eae8 <__assert_fail@plt+0x1cf44>
   2e920:	clz	r2, r3
   2e924:	clz	r0, r1
   2e928:	sub	r2, r0, r2
   2e92c:	rsbs	r2, r2, #31
   2e930:	addne	r2, r2, r2, lsl #1
   2e934:	mov	r0, #0
   2e938:	addne	pc, pc, r2, lsl #2
   2e93c:	nop			; (mov r0, r0)
   2e940:	cmp	r3, r1, lsl #31
   2e944:	adc	r0, r0, r0
   2e948:	subcs	r3, r3, r1, lsl #31
   2e94c:	cmp	r3, r1, lsl #30
   2e950:	adc	r0, r0, r0
   2e954:	subcs	r3, r3, r1, lsl #30
   2e958:	cmp	r3, r1, lsl #29
   2e95c:	adc	r0, r0, r0
   2e960:	subcs	r3, r3, r1, lsl #29
   2e964:	cmp	r3, r1, lsl #28
   2e968:	adc	r0, r0, r0
   2e96c:	subcs	r3, r3, r1, lsl #28
   2e970:	cmp	r3, r1, lsl #27
   2e974:	adc	r0, r0, r0
   2e978:	subcs	r3, r3, r1, lsl #27
   2e97c:	cmp	r3, r1, lsl #26
   2e980:	adc	r0, r0, r0
   2e984:	subcs	r3, r3, r1, lsl #26
   2e988:	cmp	r3, r1, lsl #25
   2e98c:	adc	r0, r0, r0
   2e990:	subcs	r3, r3, r1, lsl #25
   2e994:	cmp	r3, r1, lsl #24
   2e998:	adc	r0, r0, r0
   2e99c:	subcs	r3, r3, r1, lsl #24
   2e9a0:	cmp	r3, r1, lsl #23
   2e9a4:	adc	r0, r0, r0
   2e9a8:	subcs	r3, r3, r1, lsl #23
   2e9ac:	cmp	r3, r1, lsl #22
   2e9b0:	adc	r0, r0, r0
   2e9b4:	subcs	r3, r3, r1, lsl #22
   2e9b8:	cmp	r3, r1, lsl #21
   2e9bc:	adc	r0, r0, r0
   2e9c0:	subcs	r3, r3, r1, lsl #21
   2e9c4:	cmp	r3, r1, lsl #20
   2e9c8:	adc	r0, r0, r0
   2e9cc:	subcs	r3, r3, r1, lsl #20
   2e9d0:	cmp	r3, r1, lsl #19
   2e9d4:	adc	r0, r0, r0
   2e9d8:	subcs	r3, r3, r1, lsl #19
   2e9dc:	cmp	r3, r1, lsl #18
   2e9e0:	adc	r0, r0, r0
   2e9e4:	subcs	r3, r3, r1, lsl #18
   2e9e8:	cmp	r3, r1, lsl #17
   2e9ec:	adc	r0, r0, r0
   2e9f0:	subcs	r3, r3, r1, lsl #17
   2e9f4:	cmp	r3, r1, lsl #16
   2e9f8:	adc	r0, r0, r0
   2e9fc:	subcs	r3, r3, r1, lsl #16
   2ea00:	cmp	r3, r1, lsl #15
   2ea04:	adc	r0, r0, r0
   2ea08:	subcs	r3, r3, r1, lsl #15
   2ea0c:	cmp	r3, r1, lsl #14
   2ea10:	adc	r0, r0, r0
   2ea14:	subcs	r3, r3, r1, lsl #14
   2ea18:	cmp	r3, r1, lsl #13
   2ea1c:	adc	r0, r0, r0
   2ea20:	subcs	r3, r3, r1, lsl #13
   2ea24:	cmp	r3, r1, lsl #12
   2ea28:	adc	r0, r0, r0
   2ea2c:	subcs	r3, r3, r1, lsl #12
   2ea30:	cmp	r3, r1, lsl #11
   2ea34:	adc	r0, r0, r0
   2ea38:	subcs	r3, r3, r1, lsl #11
   2ea3c:	cmp	r3, r1, lsl #10
   2ea40:	adc	r0, r0, r0
   2ea44:	subcs	r3, r3, r1, lsl #10
   2ea48:	cmp	r3, r1, lsl #9
   2ea4c:	adc	r0, r0, r0
   2ea50:	subcs	r3, r3, r1, lsl #9
   2ea54:	cmp	r3, r1, lsl #8
   2ea58:	adc	r0, r0, r0
   2ea5c:	subcs	r3, r3, r1, lsl #8
   2ea60:	cmp	r3, r1, lsl #7
   2ea64:	adc	r0, r0, r0
   2ea68:	subcs	r3, r3, r1, lsl #7
   2ea6c:	cmp	r3, r1, lsl #6
   2ea70:	adc	r0, r0, r0
   2ea74:	subcs	r3, r3, r1, lsl #6
   2ea78:	cmp	r3, r1, lsl #5
   2ea7c:	adc	r0, r0, r0
   2ea80:	subcs	r3, r3, r1, lsl #5
   2ea84:	cmp	r3, r1, lsl #4
   2ea88:	adc	r0, r0, r0
   2ea8c:	subcs	r3, r3, r1, lsl #4
   2ea90:	cmp	r3, r1, lsl #3
   2ea94:	adc	r0, r0, r0
   2ea98:	subcs	r3, r3, r1, lsl #3
   2ea9c:	cmp	r3, r1, lsl #2
   2eaa0:	adc	r0, r0, r0
   2eaa4:	subcs	r3, r3, r1, lsl #2
   2eaa8:	cmp	r3, r1, lsl #1
   2eaac:	adc	r0, r0, r0
   2eab0:	subcs	r3, r3, r1, lsl #1
   2eab4:	cmp	r3, r1
   2eab8:	adc	r0, r0, r0
   2eabc:	subcs	r3, r3, r1
   2eac0:	cmp	ip, #0
   2eac4:	rsbmi	r0, r0, #0
   2eac8:	bx	lr
   2eacc:	teq	ip, r0
   2ead0:	rsbmi	r0, r0, #0
   2ead4:	bx	lr
   2ead8:	movcc	r0, #0
   2eadc:	asreq	r0, ip, #31
   2eae0:	orreq	r0, r0, #1
   2eae4:	bx	lr
   2eae8:	clz	r2, r1
   2eaec:	rsb	r2, r2, #31
   2eaf0:	cmp	ip, #0
   2eaf4:	lsr	r0, r3, r2
   2eaf8:	rsbmi	r0, r0, #0
   2eafc:	bx	lr
   2eb00:	cmp	r0, #0
   2eb04:	mvngt	r0, #-2147483648	; 0x80000000
   2eb08:	movlt	r0, #-2147483648	; 0x80000000
   2eb0c:	b	2eff8 <__assert_fail@plt+0x1d454>
   2eb10:	cmp	r1, #0
   2eb14:	beq	2eb00 <__assert_fail@plt+0x1cf5c>
   2eb18:	push	{r0, r1, lr}
   2eb1c:	bl	2e8f8 <__assert_fail@plt+0x1cd54>
   2eb20:	pop	{r1, r2, lr}
   2eb24:	mul	r3, r2, r0
   2eb28:	sub	r1, r1, r3
   2eb2c:	bx	lr
   2eb30:	eor	r1, r1, #-2147483648	; 0x80000000
   2eb34:	b	2eb3c <__assert_fail@plt+0x1cf98>
   2eb38:	eor	r3, r3, #-2147483648	; 0x80000000
   2eb3c:	push	{r4, r5, lr}
   2eb40:	lsl	r4, r1, #1
   2eb44:	lsl	r5, r3, #1
   2eb48:	teq	r4, r5
   2eb4c:	teqeq	r0, r2
   2eb50:	orrsne	ip, r4, r0
   2eb54:	orrsne	ip, r5, r2
   2eb58:	mvnsne	ip, r4, asr #21
   2eb5c:	mvnsne	ip, r5, asr #21
   2eb60:	beq	2ed4c <__assert_fail@plt+0x1d1a8>
   2eb64:	lsr	r4, r4, #21
   2eb68:	rsbs	r5, r4, r5, lsr #21
   2eb6c:	rsblt	r5, r5, #0
   2eb70:	ble	2eb90 <__assert_fail@plt+0x1cfec>
   2eb74:	add	r4, r4, r5
   2eb78:	eor	r2, r0, r2
   2eb7c:	eor	r3, r1, r3
   2eb80:	eor	r0, r2, r0
   2eb84:	eor	r1, r3, r1
   2eb88:	eor	r2, r0, r2
   2eb8c:	eor	r3, r1, r3
   2eb90:	cmp	r5, #54	; 0x36
   2eb94:	pophi	{r4, r5, pc}
   2eb98:	tst	r1, #-2147483648	; 0x80000000
   2eb9c:	lsl	r1, r1, #12
   2eba0:	mov	ip, #1048576	; 0x100000
   2eba4:	orr	r1, ip, r1, lsr #12
   2eba8:	beq	2ebb4 <__assert_fail@plt+0x1d010>
   2ebac:	rsbs	r0, r0, #0
   2ebb0:	rsc	r1, r1, #0
   2ebb4:	tst	r3, #-2147483648	; 0x80000000
   2ebb8:	lsl	r3, r3, #12
   2ebbc:	orr	r3, ip, r3, lsr #12
   2ebc0:	beq	2ebcc <__assert_fail@plt+0x1d028>
   2ebc4:	rsbs	r2, r2, #0
   2ebc8:	rsc	r3, r3, #0
   2ebcc:	teq	r4, r5
   2ebd0:	beq	2ed34 <__assert_fail@plt+0x1d190>
   2ebd4:	sub	r4, r4, #1
   2ebd8:	rsbs	lr, r5, #32
   2ebdc:	blt	2ebf8 <__assert_fail@plt+0x1d054>
   2ebe0:	lsl	ip, r2, lr
   2ebe4:	adds	r0, r0, r2, lsr r5
   2ebe8:	adc	r1, r1, #0
   2ebec:	adds	r0, r0, r3, lsl lr
   2ebf0:	adcs	r1, r1, r3, asr r5
   2ebf4:	b	2ec14 <__assert_fail@plt+0x1d070>
   2ebf8:	sub	r5, r5, #32
   2ebfc:	add	lr, lr, #32
   2ec00:	cmp	r2, #1
   2ec04:	lsl	ip, r3, lr
   2ec08:	orrcs	ip, ip, #2
   2ec0c:	adds	r0, r0, r3, asr r5
   2ec10:	adcs	r1, r1, r3, asr #31
   2ec14:	and	r5, r1, #-2147483648	; 0x80000000
   2ec18:	bpl	2ec28 <__assert_fail@plt+0x1d084>
   2ec1c:	rsbs	ip, ip, #0
   2ec20:	rscs	r0, r0, #0
   2ec24:	rsc	r1, r1, #0
   2ec28:	cmp	r1, #1048576	; 0x100000
   2ec2c:	bcc	2ec6c <__assert_fail@plt+0x1d0c8>
   2ec30:	cmp	r1, #2097152	; 0x200000
   2ec34:	bcc	2ec54 <__assert_fail@plt+0x1d0b0>
   2ec38:	lsrs	r1, r1, #1
   2ec3c:	rrxs	r0, r0
   2ec40:	rrx	ip, ip
   2ec44:	add	r4, r4, #1
   2ec48:	lsl	r2, r4, #21
   2ec4c:	cmn	r2, #4194304	; 0x400000
   2ec50:	bcs	2edac <__assert_fail@plt+0x1d208>
   2ec54:	cmp	ip, #-2147483648	; 0x80000000
   2ec58:	lsrseq	ip, r0, #1
   2ec5c:	adcs	r0, r0, #0
   2ec60:	adc	r1, r1, r4, lsl #20
   2ec64:	orr	r1, r1, r5
   2ec68:	pop	{r4, r5, pc}
   2ec6c:	lsls	ip, ip, #1
   2ec70:	adcs	r0, r0, r0
   2ec74:	adc	r1, r1, r1
   2ec78:	tst	r1, #1048576	; 0x100000
   2ec7c:	sub	r4, r4, #1
   2ec80:	bne	2ec54 <__assert_fail@plt+0x1d0b0>
   2ec84:	teq	r1, #0
   2ec88:	moveq	r1, r0
   2ec8c:	moveq	r0, #0
   2ec90:	clz	r3, r1
   2ec94:	addeq	r3, r3, #32
   2ec98:	sub	r3, r3, #11
   2ec9c:	subs	r2, r3, #32
   2eca0:	bge	2ecc4 <__assert_fail@plt+0x1d120>
   2eca4:	adds	r2, r2, #12
   2eca8:	ble	2ecc0 <__assert_fail@plt+0x1d11c>
   2ecac:	add	ip, r2, #20
   2ecb0:	rsb	r2, r2, #12
   2ecb4:	lsl	r0, r1, ip
   2ecb8:	lsr	r1, r1, r2
   2ecbc:	b	2ecd4 <__assert_fail@plt+0x1d130>
   2ecc0:	add	r2, r2, #20
   2ecc4:	rsble	ip, r2, #32
   2ecc8:	lsl	r1, r1, r2
   2eccc:	orrle	r1, r1, r0, lsr ip
   2ecd0:	lslle	r0, r0, r2
   2ecd4:	subs	r4, r4, r3
   2ecd8:	addge	r1, r1, r4, lsl #20
   2ecdc:	orrge	r1, r1, r5
   2ece0:	popge	{r4, r5, pc}
   2ece4:	mvn	r4, r4
   2ece8:	subs	r4, r4, #31
   2ecec:	bge	2ed28 <__assert_fail@plt+0x1d184>
   2ecf0:	adds	r4, r4, #12
   2ecf4:	bgt	2ed10 <__assert_fail@plt+0x1d16c>
   2ecf8:	add	r4, r4, #20
   2ecfc:	rsb	r2, r4, #32
   2ed00:	lsr	r0, r0, r4
   2ed04:	orr	r0, r0, r1, lsl r2
   2ed08:	orr	r1, r5, r1, lsr r4
   2ed0c:	pop	{r4, r5, pc}
   2ed10:	rsb	r4, r4, #12
   2ed14:	rsb	r2, r4, #32
   2ed18:	lsr	r0, r0, r2
   2ed1c:	orr	r0, r0, r1, lsl r4
   2ed20:	mov	r1, r5
   2ed24:	pop	{r4, r5, pc}
   2ed28:	lsr	r0, r1, r4
   2ed2c:	mov	r1, r5
   2ed30:	pop	{r4, r5, pc}
   2ed34:	teq	r4, #0
   2ed38:	eor	r3, r3, #1048576	; 0x100000
   2ed3c:	eoreq	r1, r1, #1048576	; 0x100000
   2ed40:	addeq	r4, r4, #1
   2ed44:	subne	r5, r5, #1
   2ed48:	b	2ebd4 <__assert_fail@plt+0x1d030>
   2ed4c:	mvns	ip, r4, asr #21
   2ed50:	mvnsne	ip, r5, asr #21
   2ed54:	beq	2edbc <__assert_fail@plt+0x1d218>
   2ed58:	teq	r4, r5
   2ed5c:	teqeq	r0, r2
   2ed60:	beq	2ed74 <__assert_fail@plt+0x1d1d0>
   2ed64:	orrs	ip, r4, r0
   2ed68:	moveq	r1, r3
   2ed6c:	moveq	r0, r2
   2ed70:	pop	{r4, r5, pc}
   2ed74:	teq	r1, r3
   2ed78:	movne	r1, #0
   2ed7c:	movne	r0, #0
   2ed80:	popne	{r4, r5, pc}
   2ed84:	lsrs	ip, r4, #21
   2ed88:	bne	2ed9c <__assert_fail@plt+0x1d1f8>
   2ed8c:	lsls	r0, r0, #1
   2ed90:	adcs	r1, r1, r1
   2ed94:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2ed98:	pop	{r4, r5, pc}
   2ed9c:	adds	r4, r4, #4194304	; 0x400000
   2eda0:	addcc	r1, r1, #1048576	; 0x100000
   2eda4:	popcc	{r4, r5, pc}
   2eda8:	and	r5, r1, #-2147483648	; 0x80000000
   2edac:	orr	r1, r5, #2130706432	; 0x7f000000
   2edb0:	orr	r1, r1, #15728640	; 0xf00000
   2edb4:	mov	r0, #0
   2edb8:	pop	{r4, r5, pc}
   2edbc:	mvns	ip, r4, asr #21
   2edc0:	movne	r1, r3
   2edc4:	movne	r0, r2
   2edc8:	mvnseq	ip, r5, asr #21
   2edcc:	movne	r3, r1
   2edd0:	movne	r2, r0
   2edd4:	orrs	r4, r0, r1, lsl #12
   2edd8:	orrseq	r5, r2, r3, lsl #12
   2eddc:	teqeq	r1, r3
   2ede0:	orrne	r1, r1, #524288	; 0x80000
   2ede4:	pop	{r4, r5, pc}
   2ede8:	teq	r0, #0
   2edec:	moveq	r1, #0
   2edf0:	bxeq	lr
   2edf4:	push	{r4, r5, lr}
   2edf8:	mov	r4, #1024	; 0x400
   2edfc:	add	r4, r4, #50	; 0x32
   2ee00:	mov	r5, #0
   2ee04:	mov	r1, #0
   2ee08:	b	2ec84 <__assert_fail@plt+0x1d0e0>
   2ee0c:	teq	r0, #0
   2ee10:	moveq	r1, #0
   2ee14:	bxeq	lr
   2ee18:	push	{r4, r5, lr}
   2ee1c:	mov	r4, #1024	; 0x400
   2ee20:	add	r4, r4, #50	; 0x32
   2ee24:	ands	r5, r0, #-2147483648	; 0x80000000
   2ee28:	rsbmi	r0, r0, #0
   2ee2c:	mov	r1, #0
   2ee30:	b	2ec84 <__assert_fail@plt+0x1d0e0>
   2ee34:	lsls	r2, r0, #1
   2ee38:	asr	r1, r2, #3
   2ee3c:	rrx	r1, r1
   2ee40:	lsl	r0, r2, #28
   2ee44:	andsne	r3, r2, #-16777216	; 0xff000000
   2ee48:	teqne	r3, #-16777216	; 0xff000000
   2ee4c:	eorne	r1, r1, #939524096	; 0x38000000
   2ee50:	bxne	lr
   2ee54:	teq	r2, #0
   2ee58:	teqne	r3, #-16777216	; 0xff000000
   2ee5c:	bxeq	lr
   2ee60:	push	{r4, r5, lr}
   2ee64:	mov	r4, #896	; 0x380
   2ee68:	and	r5, r1, #-2147483648	; 0x80000000
   2ee6c:	bic	r1, r1, #-2147483648	; 0x80000000
   2ee70:	b	2ec84 <__assert_fail@plt+0x1d0e0>
   2ee74:	orrs	r2, r0, r1
   2ee78:	bxeq	lr
   2ee7c:	push	{r4, r5, lr}
   2ee80:	mov	r5, #0
   2ee84:	b	2eea4 <__assert_fail@plt+0x1d300>
   2ee88:	orrs	r2, r0, r1
   2ee8c:	bxeq	lr
   2ee90:	push	{r4, r5, lr}
   2ee94:	ands	r5, r1, #-2147483648	; 0x80000000
   2ee98:	bpl	2eea4 <__assert_fail@plt+0x1d300>
   2ee9c:	rsbs	r0, r0, #0
   2eea0:	rsc	r1, r1, #0
   2eea4:	mov	r4, #1024	; 0x400
   2eea8:	add	r4, r4, #50	; 0x32
   2eeac:	lsrs	ip, r1, #22
   2eeb0:	beq	2ec28 <__assert_fail@plt+0x1d084>
   2eeb4:	mov	r2, #3
   2eeb8:	lsrs	ip, ip, #3
   2eebc:	addne	r2, r2, #3
   2eec0:	lsrs	ip, ip, #3
   2eec4:	addne	r2, r2, #3
   2eec8:	add	r2, r2, ip, lsr #3
   2eecc:	rsb	r3, r2, #32
   2eed0:	lsl	ip, r0, r3
   2eed4:	lsr	r0, r0, r2
   2eed8:	orr	r0, r0, r1, lsl r3
   2eedc:	lsr	r1, r1, r2
   2eee0:	add	r4, r4, r2
   2eee4:	b	2ec28 <__assert_fail@plt+0x1d084>
   2eee8:	cmp	r3, #0
   2eeec:	cmpeq	r2, #0
   2eef0:	bne	2ef14 <__assert_fail@plt+0x1d370>
   2eef4:	cmp	r1, #0
   2eef8:	movlt	r1, #-2147483648	; 0x80000000
   2eefc:	movlt	r0, #0
   2ef00:	blt	2ef10 <__assert_fail@plt+0x1d36c>
   2ef04:	cmpeq	r0, #0
   2ef08:	mvnne	r1, #-2147483648	; 0x80000000
   2ef0c:	mvnne	r0, #0
   2ef10:	b	2eff8 <__assert_fail@plt+0x1d454>
   2ef14:	sub	sp, sp, #8
   2ef18:	push	{sp, lr}
   2ef1c:	cmp	r1, #0
   2ef20:	blt	2ef40 <__assert_fail@plt+0x1d39c>
   2ef24:	cmp	r3, #0
   2ef28:	blt	2ef74 <__assert_fail@plt+0x1d3d0>
   2ef2c:	bl	2f050 <__assert_fail@plt+0x1d4ac>
   2ef30:	ldr	lr, [sp, #4]
   2ef34:	add	sp, sp, #8
   2ef38:	pop	{r2, r3}
   2ef3c:	bx	lr
   2ef40:	rsbs	r0, r0, #0
   2ef44:	sbc	r1, r1, r1, lsl #1
   2ef48:	cmp	r3, #0
   2ef4c:	blt	2ef98 <__assert_fail@plt+0x1d3f4>
   2ef50:	bl	2f050 <__assert_fail@plt+0x1d4ac>
   2ef54:	ldr	lr, [sp, #4]
   2ef58:	add	sp, sp, #8
   2ef5c:	pop	{r2, r3}
   2ef60:	rsbs	r0, r0, #0
   2ef64:	sbc	r1, r1, r1, lsl #1
   2ef68:	rsbs	r2, r2, #0
   2ef6c:	sbc	r3, r3, r3, lsl #1
   2ef70:	bx	lr
   2ef74:	rsbs	r2, r2, #0
   2ef78:	sbc	r3, r3, r3, lsl #1
   2ef7c:	bl	2f050 <__assert_fail@plt+0x1d4ac>
   2ef80:	ldr	lr, [sp, #4]
   2ef84:	add	sp, sp, #8
   2ef88:	pop	{r2, r3}
   2ef8c:	rsbs	r0, r0, #0
   2ef90:	sbc	r1, r1, r1, lsl #1
   2ef94:	bx	lr
   2ef98:	rsbs	r2, r2, #0
   2ef9c:	sbc	r3, r3, r3, lsl #1
   2efa0:	bl	2f050 <__assert_fail@plt+0x1d4ac>
   2efa4:	ldr	lr, [sp, #4]
   2efa8:	add	sp, sp, #8
   2efac:	pop	{r2, r3}
   2efb0:	rsbs	r2, r2, #0
   2efb4:	sbc	r3, r3, r3, lsl #1
   2efb8:	bx	lr
   2efbc:	cmp	r3, #0
   2efc0:	cmpeq	r2, #0
   2efc4:	bne	2efdc <__assert_fail@plt+0x1d438>
   2efc8:	cmp	r1, #0
   2efcc:	cmpeq	r0, #0
   2efd0:	mvnne	r1, #0
   2efd4:	mvnne	r0, #0
   2efd8:	b	2eff8 <__assert_fail@plt+0x1d454>
   2efdc:	sub	sp, sp, #8
   2efe0:	push	{sp, lr}
   2efe4:	bl	2f050 <__assert_fail@plt+0x1d4ac>
   2efe8:	ldr	lr, [sp, #4]
   2efec:	add	sp, sp, #8
   2eff0:	pop	{r2, r3}
   2eff4:	bx	lr
   2eff8:	push	{r1, lr}
   2effc:	mov	r0, #8
   2f000:	bl	116d0 <raise@plt>
   2f004:	pop	{r1, pc}
   2f008:	vmov	d7, r0, r1
   2f00c:	vldr	d6, [pc, #44]	; 2f040 <__assert_fail@plt+0x1d49c>
   2f010:	vldr	d5, [pc, #48]	; 2f048 <__assert_fail@plt+0x1d4a4>
   2f014:	mov	r0, #0
   2f018:	vmul.f64	d6, d7, d6
   2f01c:	vcvt.u32.f64	s12, d6
   2f020:	vcvt.f64.u32	d4, s12
   2f024:	vmov	r1, s12
   2f028:	vmls.f64	d7, d4, d5
   2f02c:	vcvt.u32.f64	s14, d7
   2f030:	vmov	r3, s14
   2f034:	orr	r0, r0, r3
   2f038:	bx	lr
   2f03c:	nop			; (mov r0, r0)
   2f040:	andeq	r0, r0, r0
   2f044:	ldclcc	0, cr0, [r0]
   2f048:	andeq	r0, r0, r0
   2f04c:	mvnsmi	r0, r0
   2f050:	cmp	r1, r3
   2f054:	push	{r4, r5, r6, r7, r8, r9, lr}
   2f058:	cmpeq	r0, r2
   2f05c:	mov	r4, r0
   2f060:	mov	r5, r1
   2f064:	ldr	r9, [sp, #28]
   2f068:	movcc	r0, #0
   2f06c:	movcc	r1, #0
   2f070:	bcc	2f168 <__assert_fail@plt+0x1d5c4>
   2f074:	cmp	r3, #0
   2f078:	clzeq	ip, r2
   2f07c:	clzne	ip, r3
   2f080:	addeq	ip, ip, #32
   2f084:	cmp	r5, #0
   2f088:	clzeq	r1, r4
   2f08c:	addeq	r1, r1, #32
   2f090:	clzne	r1, r5
   2f094:	sub	ip, ip, r1
   2f098:	sub	lr, ip, #32
   2f09c:	lsl	r7, r3, ip
   2f0a0:	rsb	r8, ip, #32
   2f0a4:	orr	r7, r7, r2, lsl lr
   2f0a8:	orr	r7, r7, r2, lsr r8
   2f0ac:	lsl	r6, r2, ip
   2f0b0:	cmp	r5, r7
   2f0b4:	cmpeq	r4, r6
   2f0b8:	movcc	r0, #0
   2f0bc:	movcc	r1, #0
   2f0c0:	bcc	2f0dc <__assert_fail@plt+0x1d538>
   2f0c4:	mov	r3, #1
   2f0c8:	subs	r4, r4, r6
   2f0cc:	lsl	r1, r3, lr
   2f0d0:	lsl	r0, r3, ip
   2f0d4:	orr	r1, r1, r3, lsr r8
   2f0d8:	sbc	r5, r5, r7
   2f0dc:	cmp	ip, #0
   2f0e0:	beq	2f168 <__assert_fail@plt+0x1d5c4>
   2f0e4:	lsrs	r3, r7, #1
   2f0e8:	rrx	r2, r6
   2f0ec:	mov	r6, ip
   2f0f0:	b	2f114 <__assert_fail@plt+0x1d570>
   2f0f4:	subs	r4, r4, r2
   2f0f8:	sbc	r5, r5, r3
   2f0fc:	adds	r4, r4, r4
   2f100:	adc	r5, r5, r5
   2f104:	adds	r4, r4, #1
   2f108:	adc	r5, r5, #0
   2f10c:	subs	r6, r6, #1
   2f110:	beq	2f130 <__assert_fail@plt+0x1d58c>
   2f114:	cmp	r5, r3
   2f118:	cmpeq	r4, r2
   2f11c:	bcs	2f0f4 <__assert_fail@plt+0x1d550>
   2f120:	adds	r4, r4, r4
   2f124:	adc	r5, r5, r5
   2f128:	subs	r6, r6, #1
   2f12c:	bne	2f114 <__assert_fail@plt+0x1d570>
   2f130:	lsr	r6, r4, ip
   2f134:	lsr	r7, r5, ip
   2f138:	orr	r6, r6, r5, lsl r8
   2f13c:	adds	r2, r0, r4
   2f140:	orr	r6, r6, r5, lsr lr
   2f144:	adc	r3, r1, r5
   2f148:	lsl	r1, r7, ip
   2f14c:	orr	r1, r1, r6, lsl lr
   2f150:	lsl	r0, r6, ip
   2f154:	orr	r1, r1, r6, lsr r8
   2f158:	subs	r0, r2, r0
   2f15c:	mov	r4, r6
   2f160:	mov	r5, r7
   2f164:	sbc	r1, r3, r1
   2f168:	cmp	r9, #0
   2f16c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   2f170:	strd	r4, [r9]
   2f174:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f178:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f17c:	mov	r7, r0
   2f180:	ldr	r6, [pc, #72]	; 2f1d0 <__assert_fail@plt+0x1d62c>
   2f184:	ldr	r5, [pc, #72]	; 2f1d4 <__assert_fail@plt+0x1d630>
   2f188:	add	r6, pc, r6
   2f18c:	add	r5, pc, r5
   2f190:	sub	r6, r6, r5
   2f194:	mov	r8, r1
   2f198:	mov	r9, r2
   2f19c:	bl	11674 <pthread_mutex_unlock@plt-0x20>
   2f1a0:	asrs	r6, r6, #2
   2f1a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f1a8:	mov	r4, #0
   2f1ac:	add	r4, r4, #1
   2f1b0:	ldr	r3, [r5], #4
   2f1b4:	mov	r2, r9
   2f1b8:	mov	r1, r8
   2f1bc:	mov	r0, r7
   2f1c0:	blx	r3
   2f1c4:	cmp	r6, r4
   2f1c8:	bne	2f1ac <__assert_fail@plt+0x1d608>
   2f1cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f1d0:	andeq	r2, r1, r0, lsl #27
   2f1d4:	andeq	r2, r1, r8, ror sp
   2f1d8:	bx	lr
   2f1dc:	ldr	r3, [pc, #12]	; 2f1f0 <__assert_fail@plt+0x1d64c>
   2f1e0:	mov	r1, #0
   2f1e4:	add	r3, pc, r3
   2f1e8:	ldr	r2, [r3]
   2f1ec:	b	119dc <__cxa_atexit@plt>
   2f1f0:	ldrdeq	r2, [r1], -ip

Disassembly of section .fini:

0002f1f4 <.fini>:
   2f1f4:	push	{r3, lr}
   2f1f8:	pop	{r3, pc}
