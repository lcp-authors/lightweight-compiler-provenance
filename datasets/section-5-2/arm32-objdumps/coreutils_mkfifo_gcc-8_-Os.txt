
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

0001143c <.init>:
   1143c:	push	{r3, lr}
   11440:	bl	11cd4 <__assert_fail@plt+0x440>
   11444:	pop	{r3, pc}

Disassembly of section .plt:

00011448 <fstatfs64@plt-0x14>:
   11448:	push	{lr}		; (str lr, [sp, #-4]!)
   1144c:	ldr	lr, [pc, #4]	; 11458 <fstatfs64@plt-0x4>
   11450:	add	lr, pc, lr
   11454:	ldr	pc, [lr, #8]!
   11458:	andeq	r8, r1, r8, lsr #23

0001145c <fstatfs64@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #24, 20	; 0x18000
   11464:	ldr	pc, [ip, #2984]!	; 0xba8

00011468 <selabel_lookup@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #24, 20	; 0x18000
   11470:	ldr	pc, [ip, #2976]!	; 0xba0

00011474 <calloc@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #24, 20	; 0x18000
   1147c:	ldr	pc, [ip, #2968]!	; 0xb98

00011480 <fputs_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #24, 20	; 0x18000
   11488:	ldr	pc, [ip, #2960]!	; 0xb90

0001148c <raise@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #24, 20	; 0x18000
   11494:	ldr	pc, [ip, #2952]!	; 0xb88

00011498 <is_selinux_enabled@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #24, 20	; 0x18000
   114a0:	ldr	pc, [ip, #2944]!	; 0xb80

000114a4 <strcmp@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #24, 20	; 0x18000
   114ac:	ldr	pc, [ip, #2936]!	; 0xb78

000114b0 <context_type_get@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #24, 20	; 0x18000
   114b8:	ldr	pc, [ip, #2928]!	; 0xb70

000114bc <fflush@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #24, 20	; 0x18000
   114c4:	ldr	pc, [ip, #2920]!	; 0xb68

000114c8 <lsetfilecon@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #24, 20	; 0x18000
   114d0:	ldr	pc, [ip, #2912]!	; 0xb60

000114d4 <memmove@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #24, 20	; 0x18000
   114dc:	ldr	pc, [ip, #2904]!	; 0xb58

000114e0 <free@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #24, 20	; 0x18000
   114e8:	ldr	pc, [ip, #2896]!	; 0xb50

000114ec <faccessat@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #24, 20	; 0x18000
   114f4:	ldr	pc, [ip, #2888]!	; 0xb48

000114f8 <_exit@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #24, 20	; 0x18000
   11500:	ldr	pc, [ip, #2880]!	; 0xb40

00011504 <memcpy@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #24, 20	; 0x18000
   1150c:	ldr	pc, [ip, #2872]!	; 0xb38

00011510 <mbsinit@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #24, 20	; 0x18000
   11518:	ldr	pc, [ip, #2864]!	; 0xb30

0001151c <context_new@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #24, 20	; 0x18000
   11524:	ldr	pc, [ip, #2856]!	; 0xb28

00011528 <memcmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #24, 20	; 0x18000
   11530:	ldr	pc, [ip, #2848]!	; 0xb20

00011534 <fputc_unlocked@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #24, 20	; 0x18000
   1153c:	ldr	pc, [ip, #2840]!	; 0xb18

00011540 <dcgettext@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #24, 20	; 0x18000
   11548:	ldr	pc, [ip, #2832]!	; 0xb10

0001154c <context_type_set@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #24, 20	; 0x18000
   11554:	ldr	pc, [ip, #2824]!	; 0xb08

00011558 <realloc@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #24, 20	; 0x18000
   11560:	ldr	pc, [ip, #2816]!	; 0xb00

00011564 <fgetfilecon@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #24, 20	; 0x18000
   1156c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011570 <textdomain@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #24, 20	; 0x18000
   11578:	ldr	pc, [ip, #2800]!	; 0xaf0

0001157c <rawmemchr@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #24, 20	; 0x18000
   11584:	ldr	pc, [ip, #2792]!	; 0xae8

00011588 <__fxstatat64@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #24, 20	; 0x18000
   11590:	ldr	pc, [ip, #2784]!	; 0xae0

00011594 <iswprint@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #24, 20	; 0x18000
   1159c:	ldr	pc, [ip, #2776]!	; 0xad8

000115a0 <__fxstat64@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #24, 20	; 0x18000
   115a8:	ldr	pc, [ip, #2768]!	; 0xad0

000115ac <readlink@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #24, 20	; 0x18000
   115b4:	ldr	pc, [ip, #2760]!	; 0xac8

000115b8 <lseek64@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #24, 20	; 0x18000
   115c0:	ldr	pc, [ip, #2752]!	; 0xac0

000115c4 <__ctype_get_mb_cur_max@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #24, 20	; 0x18000
   115cc:	ldr	pc, [ip, #2744]!	; 0xab8

000115d0 <strcpy@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #24, 20	; 0x18000
   115d8:	ldr	pc, [ip, #2736]!	; 0xab0

000115dc <getcon@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #24, 20	; 0x18000
   115e4:	ldr	pc, [ip, #2728]!	; 0xaa8

000115e8 <__fpending@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #24, 20	; 0x18000
   115f0:	ldr	pc, [ip, #2720]!	; 0xaa0

000115f4 <ferror_unlocked@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #24, 20	; 0x18000
   115fc:	ldr	pc, [ip, #2712]!	; 0xa98

00011600 <mbrtowc@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #24, 20	; 0x18000
   11608:	ldr	pc, [ip, #2704]!	; 0xa90

0001160c <error@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #24, 20	; 0x18000
   11614:	ldr	pc, [ip, #2696]!	; 0xa88

00011618 <open64@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #24, 20	; 0x18000
   11620:	ldr	pc, [ip, #2688]!	; 0xa80

00011624 <lgetfilecon@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #24, 20	; 0x18000
   1162c:	ldr	pc, [ip, #2680]!	; 0xa78

00011630 <malloc@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #24, 20	; 0x18000
   11638:	ldr	pc, [ip, #2672]!	; 0xa70

0001163c <__libc_start_main@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #24, 20	; 0x18000
   11644:	ldr	pc, [ip, #2664]!	; 0xa68

00011648 <__freading@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #24, 20	; 0x18000
   11650:	ldr	pc, [ip, #2656]!	; 0xa60

00011654 <__gmon_start__@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #24, 20	; 0x18000
   1165c:	ldr	pc, [ip, #2648]!	; 0xa58

00011660 <context_free@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #24, 20	; 0x18000
   11668:	ldr	pc, [ip, #2640]!	; 0xa50

0001166c <mempcpy@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #24, 20	; 0x18000
   11674:	ldr	pc, [ip, #2632]!	; 0xa48

00011678 <getopt_long@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #24, 20	; 0x18000
   11680:	ldr	pc, [ip, #2624]!	; 0xa40

00011684 <__ctype_b_loc@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #24, 20	; 0x18000
   1168c:	ldr	pc, [ip, #2616]!	; 0xa38

00011690 <getcwd@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #24, 20	; 0x18000
   11698:	ldr	pc, [ip, #2608]!	; 0xa30

0001169c <exit@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #24, 20	; 0x18000
   116a4:	ldr	pc, [ip, #2600]!	; 0xa28

000116a8 <getfilecon@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #24, 20	; 0x18000
   116b0:	ldr	pc, [ip, #2592]!	; 0xa20

000116b4 <strlen@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #24, 20	; 0x18000
   116bc:	ldr	pc, [ip, #2584]!	; 0xa18

000116c0 <selabel_open@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #24, 20	; 0x18000
   116c8:	ldr	pc, [ip, #2576]!	; 0xa10

000116cc <openat64@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #24, 20	; 0x18000
   116d4:	ldr	pc, [ip, #2568]!	; 0xa08

000116d8 <setfscreatecon@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #24, 20	; 0x18000
   116e0:	ldr	pc, [ip, #2560]!	; 0xa00

000116e4 <__errno_location@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #24, 20	; 0x18000
   116ec:	ldr	pc, [ip, #2552]!	; 0x9f8

000116f0 <__sprintf_chk@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #24, 20	; 0x18000
   116f8:	ldr	pc, [ip, #2544]!	; 0x9f0

000116fc <__cxa_atexit@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #24, 20	; 0x18000
   11704:	ldr	pc, [ip, #2536]!	; 0x9e8

00011708 <memset@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #24, 20	; 0x18000
   11710:	ldr	pc, [ip, #2528]!	; 0x9e0

00011714 <__printf_chk@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #24, 20	; 0x18000
   1171c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011720 <fileno@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #24, 20	; 0x18000
   11728:	ldr	pc, [ip, #2512]!	; 0x9d0

0001172c <__fprintf_chk@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #24, 20	; 0x18000
   11734:	ldr	pc, [ip, #2504]!	; 0x9c8

00011738 <fclose@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #24, 20	; 0x18000
   11740:	ldr	pc, [ip, #2496]!	; 0x9c0

00011744 <fseeko64@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #24, 20	; 0x18000
   1174c:	ldr	pc, [ip, #2488]!	; 0x9b8

00011750 <fcntl64@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #24, 20	; 0x18000
   11758:	ldr	pc, [ip, #2480]!	; 0x9b0

0001175c <setlocale@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #24, 20	; 0x18000
   11764:	ldr	pc, [ip, #2472]!	; 0x9a8

00011768 <fsetfilecon@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #24, 20	; 0x18000
   11770:	ldr	pc, [ip, #2464]!	; 0x9a0

00011774 <strrchr@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #24, 20	; 0x18000
   1177c:	ldr	pc, [ip, #2456]!	; 0x998

00011780 <nl_langinfo@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #24, 20	; 0x18000
   11788:	ldr	pc, [ip, #2448]!	; 0x990

0001178c <readdir64@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #24, 20	; 0x18000
   11794:	ldr	pc, [ip, #2440]!	; 0x988

00011798 <fdopendir@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #24, 20	; 0x18000
   117a0:	ldr	pc, [ip, #2432]!	; 0x980

000117a4 <security_compute_create@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #24, 20	; 0x18000
   117ac:	ldr	pc, [ip, #2424]!	; 0x978

000117b0 <dirfd@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #24, 20	; 0x18000
   117b8:	ldr	pc, [ip, #2416]!	; 0x970

000117bc <fchdir@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #24, 20	; 0x18000
   117c4:	ldr	pc, [ip, #2408]!	; 0x968

000117c8 <qsort@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #24, 20	; 0x18000
   117d0:	ldr	pc, [ip, #2400]!	; 0x960

000117d4 <freecon@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #24, 20	; 0x18000
   117dc:	ldr	pc, [ip, #2392]!	; 0x958

000117e0 <bindtextdomain@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #24, 20	; 0x18000
   117e8:	ldr	pc, [ip, #2384]!	; 0x950

000117ec <getfscreatecon@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #24, 20	; 0x18000
   117f4:	ldr	pc, [ip, #2376]!	; 0x948

000117f8 <umask@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #24, 20	; 0x18000
   11800:	ldr	pc, [ip, #2368]!	; 0x940

00011804 <context_str@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #24, 20	; 0x18000
   1180c:	ldr	pc, [ip, #2360]!	; 0x938

00011810 <chmod@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #24, 20	; 0x18000
   11818:	ldr	pc, [ip, #2352]!	; 0x930

0001181c <__xstat64@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #24, 20	; 0x18000
   11824:	ldr	pc, [ip, #2344]!	; 0x928

00011828 <fputs@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #24, 20	; 0x18000
   11830:	ldr	pc, [ip, #2336]!	; 0x920

00011834 <strncmp@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #24, 20	; 0x18000
   1183c:	ldr	pc, [ip, #2328]!	; 0x918

00011840 <abort@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #24, 20	; 0x18000
   11848:	ldr	pc, [ip, #2320]!	; 0x910

0001184c <close@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #24, 20	; 0x18000
   11854:	ldr	pc, [ip, #2312]!	; 0x908

00011858 <__lxstat64@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #24, 20	; 0x18000
   11860:	ldr	pc, [ip, #2304]!	; 0x900

00011864 <mkfifo@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #24, 20	; 0x18000
   1186c:	ldr	pc, [ip, #2296]!	; 0x8f8

00011870 <mode_to_security_class@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #24, 20	; 0x18000
   11878:	ldr	pc, [ip, #2288]!	; 0x8f0

0001187c <closedir@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #24, 20	; 0x18000
   11884:	ldr	pc, [ip, #2280]!	; 0x8e8

00011888 <strspn@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #24, 20	; 0x18000
   11890:	ldr	pc, [ip, #2272]!	; 0x8e0

00011894 <__assert_fail@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #24, 20	; 0x18000
   1189c:	ldr	pc, [ip, #2264]!	; 0x8d8

Disassembly of section .text:

000118a0 <lchmod@@Base-0x4010>:
   118a0:	push	{r4, lr}
   118a4:	bl	116e4 <__errno_location@plt>
   118a8:	mov	r3, #12
   118ac:	str	r3, [r0]
   118b0:	mov	r0, #0
   118b4:	pop	{r4, pc}
   118b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118bc:	mov	r9, r0
   118c0:	sub	sp, sp, #20
   118c4:	mov	r6, r1
   118c8:	mov	r5, #0
   118cc:	mov	r8, r5
   118d0:	mov	r7, r5
   118d4:	ldr	r0, [r1]
   118d8:	bl	15e6c <lchmod@@Base+0x5bc>
   118dc:	ldr	r1, [pc, #864]	; 11c44 <__assert_fail@plt+0x3b0>
   118e0:	mov	r0, #6
   118e4:	bl	1175c <setlocale@plt>
   118e8:	ldr	r1, [pc, #856]	; 11c48 <__assert_fail@plt+0x3b4>
   118ec:	ldr	r0, [pc, #856]	; 11c4c <__assert_fail@plt+0x3b8>
   118f0:	bl	117e0 <bindtextdomain@plt>
   118f4:	ldr	r0, [pc, #848]	; 11c4c <__assert_fail@plt+0x3b8>
   118f8:	bl	11570 <textdomain@plt>
   118fc:	ldr	r0, [pc, #844]	; 11c50 <__assert_fail@plt+0x3bc>
   11900:	ldr	fp, [pc, #844]	; 11c54 <__assert_fail@plt+0x3c0>
   11904:	ldr	sl, [pc, #844]	; 11c58 <__assert_fail@plt+0x3c4>
   11908:	bl	188ec <lchmod@@Base+0x303c>
   1190c:	mov	r4, #0
   11910:	mov	r3, fp
   11914:	ldr	r2, [pc, #832]	; 11c5c <__assert_fail@plt+0x3c8>
   11918:	mov	r1, r6
   1191c:	mov	r0, r9
   11920:	str	r4, [sp]
   11924:	bl	11678 <getopt_long@plt>
   11928:	cmn	r0, #1
   1192c:	bne	11964 <__assert_fail@plt+0xd0>
   11930:	ldr	sl, [pc, #808]	; 11c60 <__assert_fail@plt+0x3cc>
   11934:	ldr	r3, [sl]
   11938:	cmp	r3, r9
   1193c:	bne	11a54 <__assert_fail@plt+0x1c0>
   11940:	mov	r2, #5
   11944:	ldr	r1, [pc, #792]	; 11c64 <__assert_fail@plt+0x3d0>
   11948:	mov	r0, r4
   1194c:	bl	11540 <dcgettext@plt>
   11950:	mov	r2, r0
   11954:	mov	r1, r4
   11958:	mov	r0, r4
   1195c:	bl	1160c <error@plt>
   11960:	b	11978 <__assert_fail@plt+0xe4>
   11964:	cmn	r0, #2
   11968:	beq	11a20 <__assert_fail@plt+0x18c>
   1196c:	bgt	11980 <__assert_fail@plt+0xec>
   11970:	cmn	r0, #3
   11974:	beq	11a28 <__assert_fail@plt+0x194>
   11978:	mov	r0, #1
   1197c:	b	11a24 <__assert_fail@plt+0x190>
   11980:	cmp	r0, #90	; 0x5a
   11984:	beq	11998 <__assert_fail@plt+0x104>
   11988:	cmp	r0, #109	; 0x6d
   1198c:	bne	11978 <__assert_fail@plt+0xe4>
   11990:	ldr	r7, [sl]
   11994:	b	1190c <__assert_fail@plt+0x78>
   11998:	bl	11498 <is_selinux_enabled@plt>
   1199c:	cmp	r0, #0
   119a0:	ble	119f4 <__assert_fail@plt+0x160>
   119a4:	ldr	r2, [sl]
   119a8:	cmp	r2, #0
   119ac:	movne	r8, r2
   119b0:	bne	1190c <__assert_fail@plt+0x78>
   119b4:	mov	r1, r2
   119b8:	mov	r0, r2
   119bc:	bl	116c0 <selabel_open@plt>
   119c0:	subs	r5, r0, #0
   119c4:	bne	1190c <__assert_fail@plt+0x78>
   119c8:	bl	116e4 <__errno_location@plt>
   119cc:	ldr	r4, [r0]
   119d0:	mov	r2, #5
   119d4:	mov	r0, r5
   119d8:	ldr	r1, [pc, #648]	; 11c68 <__assert_fail@plt+0x3d4>
   119dc:	bl	11540 <dcgettext@plt>
   119e0:	mov	r2, r0
   119e4:	mov	r0, r5
   119e8:	mov	r1, r4
   119ec:	bl	1160c <error@plt>
   119f0:	b	1190c <__assert_fail@plt+0x78>
   119f4:	ldr	r3, [sl]
   119f8:	cmp	r3, #0
   119fc:	beq	1190c <__assert_fail@plt+0x78>
   11a00:	mov	r2, #5
   11a04:	ldr	r1, [pc, #608]	; 11c6c <__assert_fail@plt+0x3d8>
   11a08:	mov	r0, r4
   11a0c:	bl	11540 <dcgettext@plt>
   11a10:	mov	r2, r0
   11a14:	mov	r1, r4
   11a18:	mov	r0, r4
   11a1c:	b	119ec <__assert_fail@plt+0x158>
   11a20:	mov	r0, r4
   11a24:	bl	11d88 <__assert_fail@plt+0x4f4>
   11a28:	ldr	r3, [pc, #576]	; 11c70 <__assert_fail@plt+0x3dc>
   11a2c:	ldr	r0, [pc, #576]	; 11c74 <__assert_fail@plt+0x3e0>
   11a30:	ldr	r2, [pc, #576]	; 11c78 <__assert_fail@plt+0x3e4>
   11a34:	stm	sp, {r3, r4}
   11a38:	ldr	r3, [pc, #572]	; 11c7c <__assert_fail@plt+0x3e8>
   11a3c:	ldr	r1, [pc, #572]	; 11c80 <__assert_fail@plt+0x3ec>
   11a40:	ldr	r0, [r0]
   11a44:	ldr	r3, [r3]
   11a48:	bl	17af0 <lchmod@@Base+0x2240>
   11a4c:	mov	r0, r4
   11a50:	bl	1169c <exit@plt>
   11a54:	cmp	r8, #0
   11a58:	beq	11aa4 <__assert_fail@plt+0x210>
   11a5c:	mov	r0, r8
   11a60:	bl	116d8 <setfscreatecon@plt>
   11a64:	cmp	r0, #0
   11a68:	bge	11aa4 <__assert_fail@plt+0x210>
   11a6c:	bl	116e4 <__errno_location@plt>
   11a70:	ldr	r5, [r0]
   11a74:	mov	r2, #5
   11a78:	mov	r0, r4
   11a7c:	ldr	r1, [pc, #512]	; 11c84 <__assert_fail@plt+0x3f0>
   11a80:	bl	11540 <dcgettext@plt>
   11a84:	mov	r4, r0
   11a88:	mov	r0, r8
   11a8c:	bl	1746c <lchmod@@Base+0x1bbc>
   11a90:	mov	r3, r0
   11a94:	mov	r2, r4
   11a98:	mov	r1, r5
   11a9c:	mov	r0, #1
   11aa0:	bl	1160c <error@plt>
   11aa4:	cmp	r7, #0
   11aa8:	beq	11c38 <__assert_fail@plt+0x3a4>
   11aac:	mov	r0, r7
   11ab0:	bl	159a0 <lchmod@@Base+0xf0>
   11ab4:	subs	fp, r0, #0
   11ab8:	bne	11ad8 <__assert_fail@plt+0x244>
   11abc:	mov	r2, #5
   11ac0:	ldr	r1, [pc, #448]	; 11c88 <__assert_fail@plt+0x3f4>
   11ac4:	bl	11540 <dcgettext@plt>
   11ac8:	mov	r2, r0
   11acc:	mov	r1, fp
   11ad0:	mov	r0, #1
   11ad4:	bl	1160c <error@plt>
   11ad8:	mov	r0, #0
   11adc:	mov	r8, #0
   11ae0:	bl	117f8 <umask@plt>
   11ae4:	mov	r4, r0
   11ae8:	bl	117f8 <umask@plt>
   11aec:	mov	r3, fp
   11af0:	mov	r2, r4
   11af4:	str	r8, [sp]
   11af8:	mov	r1, r8
   11afc:	movw	r0, #438	; 0x1b6
   11b00:	bl	15ce0 <lchmod@@Base+0x430>
   11b04:	mov	r4, r0
   11b08:	mov	r0, fp
   11b0c:	bl	12cd8 <__assert_fail@plt+0x1444>
   11b10:	bic	r3, r4, #508	; 0x1fc
   11b14:	bic	r3, r3, #3
   11b18:	cmp	r3, r8
   11b1c:	beq	11c3c <__assert_fail@plt+0x3a8>
   11b20:	mov	r2, #5
   11b24:	ldr	r1, [pc, #352]	; 11c8c <__assert_fail@plt+0x3f8>
   11b28:	mov	r0, r8
   11b2c:	bl	11540 <dcgettext@plt>
   11b30:	mov	r2, r0
   11b34:	mov	r1, r8
   11b38:	b	11ad0 <__assert_fail@plt+0x23c>
   11b3c:	cmp	r5, #0
   11b40:	beq	11b54 <__assert_fail@plt+0x2c0>
   11b44:	mov	r2, #4096	; 0x1000
   11b48:	mov	r0, r5
   11b4c:	ldr	r1, [r6, r3, lsl #2]
   11b50:	bl	121f8 <__assert_fail@plt+0x964>
   11b54:	ldr	r3, [sl]
   11b58:	mov	r1, r4
   11b5c:	ldr	r0, [r6, r3, lsl #2]
   11b60:	bl	11864 <mkfifo@plt>
   11b64:	subs	fp, r0, #0
   11b68:	beq	11bd4 <__assert_fail@plt+0x340>
   11b6c:	bl	116e4 <__errno_location@plt>
   11b70:	mov	r2, #5
   11b74:	ldr	r1, [pc, #276]	; 11c90 <__assert_fail@plt+0x3fc>
   11b78:	ldr	r8, [r0]
   11b7c:	mov	r0, #0
   11b80:	bl	11540 <dcgettext@plt>
   11b84:	ldr	r3, [sl]
   11b88:	mov	fp, r0
   11b8c:	mov	r0, #4
   11b90:	ldr	r1, [r6, r3, lsl #2]
   11b94:	bl	17288 <lchmod@@Base+0x19d8>
   11b98:	mov	r3, r0
   11b9c:	mov	r2, fp
   11ba0:	mov	r1, r8
   11ba4:	mov	r0, #0
   11ba8:	mov	r8, #1
   11bac:	bl	1160c <error@plt>
   11bb0:	ldr	r3, [sl]
   11bb4:	add	r3, r3, #1
   11bb8:	str	r3, [sl]
   11bbc:	ldr	r3, [sl]
   11bc0:	cmp	r3, r9
   11bc4:	blt	11b3c <__assert_fail@plt+0x2a8>
   11bc8:	mov	r0, r8
   11bcc:	add	sp, sp, #20
   11bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bd4:	cmp	r7, #0
   11bd8:	beq	11bb0 <__assert_fail@plt+0x31c>
   11bdc:	ldr	r3, [sl]
   11be0:	mov	r1, r4
   11be4:	ldr	r0, [r6, r3, lsl #2]
   11be8:	bl	158b0 <lchmod@@Base>
   11bec:	cmp	r0, #0
   11bf0:	beq	11bb0 <__assert_fail@plt+0x31c>
   11bf4:	bl	116e4 <__errno_location@plt>
   11bf8:	mov	r2, #5
   11bfc:	ldr	r1, [pc, #144]	; 11c94 <__assert_fail@plt+0x400>
   11c00:	ldr	r8, [r0]
   11c04:	mov	r0, fp
   11c08:	bl	11540 <dcgettext@plt>
   11c0c:	ldr	r3, [sl]
   11c10:	mov	r2, r0
   11c14:	mov	r0, #4
   11c18:	str	r2, [sp, #12]
   11c1c:	ldr	r1, [r6, r3, lsl #2]
   11c20:	bl	17288 <lchmod@@Base+0x19d8>
   11c24:	mov	r3, r0
   11c28:	mov	r1, r8
   11c2c:	ldr	r2, [sp, #12]
   11c30:	mov	r0, fp
   11c34:	b	11ba8 <__assert_fail@plt+0x314>
   11c38:	movw	r4, #438	; 0x1b6
   11c3c:	mov	r8, #0
   11c40:	b	11bbc <__assert_fail@plt+0x328>
   11c44:	andeq	r8, r1, sl, lsl sp
   11c48:	andeq	r8, r1, fp, lsl sp
   11c4c:	andeq	r8, r1, r8, ror ip
   11c50:	andeq	r2, r1, ip, lsr #21
   11c54:	andeq	r8, r1, r0, lsr #19
   11c58:	andeq	sl, r2, r8, ror #3
   11c5c:	andeq	r8, r1, r8, lsr #27
   11c60:	ldrdeq	sl, [r2], -r8
   11c64:	andeq	r8, r1, ip, lsr #27
   11c68:	andeq	r8, r1, r3, lsr sp
   11c6c:	andeq	r8, r1, pc, asr #26
   11c70:	muleq	r1, r8, sp
   11c74:	andeq	sl, r2, r4, ror #3
   11c78:	andeq	r8, r1, r4, ror ip
   11c7c:	andeq	sl, r2, r4, lsl #3
   11c80:	strdeq	r8, [r1], -r0
   11c84:			; <UNDEFINED> instruction: 0x00018dbc
   11c88:	andeq	r8, r1, lr, ror #27
   11c8c:	strdeq	r8, [r1], -fp
   11c90:	andeq	r8, r1, r7, lsr #28
   11c94:	andeq	r8, r1, sp, lsr lr
   11c98:	mov	fp, #0
   11c9c:	mov	lr, #0
   11ca0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ca4:	mov	r2, sp
   11ca8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cac:	push	{r0}		; (str r0, [sp, #-4]!)
   11cb0:	ldr	ip, [pc, #16]	; 11cc8 <__assert_fail@plt+0x434>
   11cb4:	push	{ip}		; (str ip, [sp, #-4]!)
   11cb8:	ldr	r0, [pc, #12]	; 11ccc <__assert_fail@plt+0x438>
   11cbc:	ldr	r3, [pc, #12]	; 11cd0 <__assert_fail@plt+0x43c>
   11cc0:	bl	1163c <__libc_start_main@plt>
   11cc4:	bl	11840 <abort@plt>
   11cc8:	andeq	r8, r1, r8, ror #17
   11ccc:			; <UNDEFINED> instruction: 0x000118b8
   11cd0:	andeq	r8, r1, r8, lsl #17
   11cd4:	ldr	r3, [pc, #20]	; 11cf0 <__assert_fail@plt+0x45c>
   11cd8:	ldr	r2, [pc, #20]	; 11cf4 <__assert_fail@plt+0x460>
   11cdc:	add	r3, pc, r3
   11ce0:	ldr	r2, [r3, r2]
   11ce4:	cmp	r2, #0
   11ce8:	bxeq	lr
   11cec:	b	11654 <__gmon_start__@plt>
   11cf0:	andeq	r8, r1, ip, lsl r3
   11cf4:	andeq	r0, r0, r8, ror r1
   11cf8:	ldr	r0, [pc, #24]	; 11d18 <__assert_fail@plt+0x484>
   11cfc:	ldr	r3, [pc, #24]	; 11d1c <__assert_fail@plt+0x488>
   11d00:	cmp	r3, r0
   11d04:	bxeq	lr
   11d08:	ldr	r3, [pc, #16]	; 11d20 <__assert_fail@plt+0x48c>
   11d0c:	cmp	r3, #0
   11d10:	bxeq	lr
   11d14:	bx	r3
   11d18:	andeq	sl, r2, ip, asr #3
   11d1c:	andeq	sl, r2, ip, asr #3
   11d20:	andeq	r0, r0, r0
   11d24:	ldr	r0, [pc, #36]	; 11d50 <__assert_fail@plt+0x4bc>
   11d28:	ldr	r1, [pc, #36]	; 11d54 <__assert_fail@plt+0x4c0>
   11d2c:	sub	r1, r1, r0
   11d30:	asr	r1, r1, #2
   11d34:	add	r1, r1, r1, lsr #31
   11d38:	asrs	r1, r1, #1
   11d3c:	bxeq	lr
   11d40:	ldr	r3, [pc, #16]	; 11d58 <__assert_fail@plt+0x4c4>
   11d44:	cmp	r3, #0
   11d48:	bxeq	lr
   11d4c:	bx	r3
   11d50:	andeq	sl, r2, ip, asr #3
   11d54:	andeq	sl, r2, ip, asr #3
   11d58:	andeq	r0, r0, r0
   11d5c:	push	{r4, lr}
   11d60:	ldr	r4, [pc, #24]	; 11d80 <__assert_fail@plt+0x4ec>
   11d64:	ldrb	r3, [r4]
   11d68:	cmp	r3, #0
   11d6c:	popne	{r4, pc}
   11d70:	bl	11cf8 <__assert_fail@plt+0x464>
   11d74:	mov	r3, #1
   11d78:	strb	r3, [r4]
   11d7c:	pop	{r4, pc}
   11d80:	andeq	sl, r2, ip, ror #3
   11d84:	b	11d24 <__assert_fail@plt+0x490>
   11d88:	subs	r5, r0, #0
   11d8c:	push	{r7, lr}
   11d90:	sub	sp, sp, #56	; 0x38
   11d94:	ldr	r4, [pc, #520]	; 11fa4 <__assert_fail@plt+0x710>
   11d98:	beq	11dd0 <__assert_fail@plt+0x53c>
   11d9c:	mov	r2, #5
   11da0:	mov	r0, #0
   11da4:	ldr	r3, [pc, #508]	; 11fa8 <__assert_fail@plt+0x714>
   11da8:	ldr	r1, [pc, #508]	; 11fac <__assert_fail@plt+0x718>
   11dac:	ldr	r6, [r3]
   11db0:	bl	11540 <dcgettext@plt>
   11db4:	mov	r2, r0
   11db8:	mov	r1, #1
   11dbc:	ldr	r3, [r4]
   11dc0:	mov	r0, r6
   11dc4:	bl	1172c <__fprintf_chk@plt>
   11dc8:	mov	r0, r5
   11dcc:	bl	1169c <exit@plt>
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #468]	; 11fb0 <__assert_fail@plt+0x71c>
   11dd8:	mov	r6, sp
   11ddc:	bl	11540 <dcgettext@plt>
   11de0:	ldr	r2, [r4]
   11de4:	mov	r1, r0
   11de8:	mov	r0, #1
   11dec:	bl	11714 <__printf_chk@plt>
   11df0:	ldr	r4, [pc, #444]	; 11fb4 <__assert_fail@plt+0x720>
   11df4:	mov	r2, #5
   11df8:	mov	r0, r5
   11dfc:	ldr	r1, [pc, #436]	; 11fb8 <__assert_fail@plt+0x724>
   11e00:	bl	11540 <dcgettext@plt>
   11e04:	ldr	r7, [pc, #432]	; 11fbc <__assert_fail@plt+0x728>
   11e08:	ldr	r1, [r4]
   11e0c:	bl	11480 <fputs_unlocked@plt>
   11e10:	mov	r2, #5
   11e14:	ldr	r1, [pc, #420]	; 11fc0 <__assert_fail@plt+0x72c>
   11e18:	mov	r0, r5
   11e1c:	bl	11540 <dcgettext@plt>
   11e20:	ldr	r1, [r4]
   11e24:	bl	11480 <fputs_unlocked@plt>
   11e28:	mov	r2, #5
   11e2c:	ldr	r1, [pc, #400]	; 11fc4 <__assert_fail@plt+0x730>
   11e30:	mov	r0, r5
   11e34:	bl	11540 <dcgettext@plt>
   11e38:	ldr	r1, [r4]
   11e3c:	bl	11480 <fputs_unlocked@plt>
   11e40:	mov	r2, #5
   11e44:	ldr	r1, [pc, #380]	; 11fc8 <__assert_fail@plt+0x734>
   11e48:	mov	r0, r5
   11e4c:	bl	11540 <dcgettext@plt>
   11e50:	ldr	r1, [r4]
   11e54:	bl	11480 <fputs_unlocked@plt>
   11e58:	mov	r2, #5
   11e5c:	ldr	r1, [pc, #360]	; 11fcc <__assert_fail@plt+0x738>
   11e60:	mov	r0, r5
   11e64:	bl	11540 <dcgettext@plt>
   11e68:	ldr	r1, [r4]
   11e6c:	bl	11480 <fputs_unlocked@plt>
   11e70:	mov	r2, #5
   11e74:	ldr	r1, [pc, #340]	; 11fd0 <__assert_fail@plt+0x73c>
   11e78:	mov	r0, r5
   11e7c:	bl	11540 <dcgettext@plt>
   11e80:	ldr	r1, [r4]
   11e84:	bl	11480 <fputs_unlocked@plt>
   11e88:	ldr	lr, [pc, #324]	; 11fd4 <__assert_fail@plt+0x740>
   11e8c:	mov	ip, sp
   11e90:	ldm	lr!, {r0, r1, r2, r3}
   11e94:	stmia	ip!, {r0, r1, r2, r3}
   11e98:	ldm	lr!, {r0, r1, r2, r3}
   11e9c:	stmia	ip!, {r0, r1, r2, r3}
   11ea0:	ldm	lr!, {r0, r1, r2, r3}
   11ea4:	stmia	ip!, {r0, r1, r2, r3}
   11ea8:	ldm	lr, {r0, r1}
   11eac:	stm	ip, {r0, r1}
   11eb0:	ldr	r1, [r6]
   11eb4:	cmp	r1, #0
   11eb8:	bne	11f5c <__assert_fail@plt+0x6c8>
   11ebc:	ldr	r6, [r6, #4]
   11ec0:	mov	r2, #5
   11ec4:	mov	r0, #0
   11ec8:	ldr	r7, [pc, #236]	; 11fbc <__assert_fail@plt+0x728>
   11ecc:	ldr	r1, [pc, #260]	; 11fd8 <__assert_fail@plt+0x744>
   11ed0:	cmp	r6, #0
   11ed4:	moveq	r6, r7
   11ed8:	bl	11540 <dcgettext@plt>
   11edc:	mov	r1, r0
   11ee0:	ldr	r3, [pc, #244]	; 11fdc <__assert_fail@plt+0x748>
   11ee4:	mov	r0, #1
   11ee8:	ldr	r2, [pc, #240]	; 11fe0 <__assert_fail@plt+0x74c>
   11eec:	bl	11714 <__printf_chk@plt>
   11ef0:	mov	r1, #0
   11ef4:	mov	r0, #5
   11ef8:	bl	1175c <setlocale@plt>
   11efc:	cmp	r0, #0
   11f00:	bne	11f74 <__assert_fail@plt+0x6e0>
   11f04:	mov	r2, #5
   11f08:	ldr	r1, [pc, #212]	; 11fe4 <__assert_fail@plt+0x750>
   11f0c:	mov	r0, #0
   11f10:	bl	11540 <dcgettext@plt>
   11f14:	mov	r1, r0
   11f18:	ldr	r3, [pc, #156]	; 11fbc <__assert_fail@plt+0x728>
   11f1c:	mov	r0, #1
   11f20:	ldr	r2, [pc, #180]	; 11fdc <__assert_fail@plt+0x748>
   11f24:	bl	11714 <__printf_chk@plt>
   11f28:	mov	r2, #5
   11f2c:	ldr	r1, [pc, #180]	; 11fe8 <__assert_fail@plt+0x754>
   11f30:	mov	r0, #0
   11f34:	bl	11540 <dcgettext@plt>
   11f38:	ldr	r2, [pc, #172]	; 11fec <__assert_fail@plt+0x758>
   11f3c:	cmp	r6, r7
   11f40:	mov	r1, r0
   11f44:	mov	r0, #1
   11f48:	ldr	r3, [pc, #160]	; 11ff0 <__assert_fail@plt+0x75c>
   11f4c:	moveq	r3, r2
   11f50:	mov	r2, r6
   11f54:	bl	11714 <__printf_chk@plt>
   11f58:	b	11dc8 <__assert_fail@plt+0x534>
   11f5c:	mov	r0, r7
   11f60:	bl	114a4 <strcmp@plt>
   11f64:	cmp	r0, #0
   11f68:	beq	11ebc <__assert_fail@plt+0x628>
   11f6c:	add	r6, r6, #8
   11f70:	b	11eb0 <__assert_fail@plt+0x61c>
   11f74:	mov	r2, #3
   11f78:	ldr	r1, [pc, #116]	; 11ff4 <__assert_fail@plt+0x760>
   11f7c:	bl	11834 <strncmp@plt>
   11f80:	cmp	r0, #0
   11f84:	beq	11f04 <__assert_fail@plt+0x670>
   11f88:	mov	r2, #5
   11f8c:	ldr	r1, [pc, #100]	; 11ff8 <__assert_fail@plt+0x764>
   11f90:	mov	r0, #0
   11f94:	bl	11540 <dcgettext@plt>
   11f98:	ldr	r1, [r4]
   11f9c:	bl	11480 <fputs_unlocked@plt>
   11fa0:	b	11f04 <__assert_fail@plt+0x670>
   11fa4:	strdeq	sl, [r2], -r8
   11fa8:	andeq	sl, r2, r0, ror #3
   11fac:	strdeq	r8, [r1], -r7
   11fb0:	andeq	r8, r1, lr, lsl sl
   11fb4:	andeq	sl, r2, r4, ror #3
   11fb8:	andeq	r8, r1, sp, lsr sl
   11fbc:	strdeq	r8, [r1], -r0
   11fc0:	andeq	r8, r1, pc, ror #20
   11fc4:			; <UNDEFINED> instruction: 0x00018aba
   11fc8:	andeq	r8, r1, r3, lsl #22
   11fcc:	ldrdeq	r8, [r1], -r2
   11fd0:	strdeq	r8, [r1], -pc	; <UNPREDICTABLE>
   11fd4:	andeq	r8, r1, r8, ror #18
   11fd8:	andeq	r8, r1, r5, lsr ip
   11fdc:	andeq	r8, r1, ip, asr #24
   11fe0:	andeq	r8, r1, r4, ror ip
   11fe4:	andeq	r8, r1, sp, asr #25
   11fe8:	andeq	r8, r1, r8, ror #25
   11fec:	andeq	r8, r1, r6, ror lr
   11ff0:	andeq	r8, r1, sl, lsl sp
   11ff4:	andeq	r8, r1, r2, lsl #25
   11ff8:	andeq	r8, r1, r6, lsl #25
   11ffc:	push	{r4, r5, r6, r7, r8, r9, lr}
   12000:	mov	r3, #0
   12004:	sub	sp, sp, #116	; 0x74
   12008:	subs	r5, r0, #0
   1200c:	mov	r4, r1
   12010:	str	r3, [sp]
   12014:	str	r3, [sp, #4]
   12018:	bne	12074 <__assert_fail@plt+0x7e0>
   1201c:	add	r0, sp, #4
   12020:	bl	117ec <getfscreatecon@plt>
   12024:	cmp	r0, #0
   12028:	blt	121f0 <__assert_fail@plt+0x95c>
   1202c:	bl	116e4 <__errno_location@plt>
   12030:	ldr	r6, [sp, #4]
   12034:	mov	r5, r0
   12038:	cmp	r6, #0
   1203c:	moveq	r3, #61	; 0x3d
   12040:	streq	r3, [r0]
   12044:	beq	121f0 <__assert_fail@plt+0x95c>
   12048:	mov	r1, r6
   1204c:	mov	r0, r4
   12050:	bl	114c8 <lsetfilecon@plt>
   12054:	ldr	r6, [r5]
   12058:	mov	r4, r0
   1205c:	ldr	r0, [sp, #4]
   12060:	bl	117d4 <freecon@plt>
   12064:	str	r6, [r5]
   12068:	mov	r0, r4
   1206c:	add	sp, sp, #116	; 0x74
   12070:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12074:	mov	r1, #32768	; 0x8000
   12078:	mov	r0, r4
   1207c:	bl	11618 <open64@plt>
   12080:	mov	r6, r0
   12084:	bl	116e4 <__errno_location@plt>
   12088:	cmn	r6, #1
   1208c:	mov	r7, r0
   12090:	bne	120b0 <__assert_fail@plt+0x81c>
   12094:	ldr	r3, [r0]
   12098:	cmp	r3, #40	; 0x28
   1209c:	beq	120f4 <__assert_fail@plt+0x860>
   120a0:	mov	r5, #0
   120a4:	mov	r8, r5
   120a8:	mvn	r4, #0
   120ac:	b	12184 <__assert_fail@plt+0x8f0>
   120b0:	add	r1, sp, #8
   120b4:	mov	r0, r6
   120b8:	bl	18914 <lchmod@@Base+0x3064>
   120bc:	cmp	r0, #0
   120c0:	blt	120a0 <__assert_fail@plt+0x80c>
   120c4:	mov	r2, r4
   120c8:	mov	r1, sp
   120cc:	ldr	r3, [sp, #24]
   120d0:	mov	r0, r5
   120d4:	bl	11468 <selabel_lookup@plt>
   120d8:	cmp	r0, #0
   120dc:	bge	12104 <__assert_fail@plt+0x870>
   120e0:	ldr	r3, [r7]
   120e4:	cmp	r3, #2
   120e8:	moveq	r3, #61	; 0x3d
   120ec:	streq	r3, [r7]
   120f0:	b	120a0 <__assert_fail@plt+0x80c>
   120f4:	add	r1, sp, #8
   120f8:	mov	r0, r4
   120fc:	bl	18924 <lchmod@@Base+0x3074>
   12100:	b	120bc <__assert_fail@plt+0x828>
   12104:	ldr	r0, [sp]
   12108:	bl	1151c <context_new@plt>
   1210c:	subs	r8, r0, #0
   12110:	beq	120a0 <__assert_fail@plt+0x80c>
   12114:	cmn	r6, #1
   12118:	add	r1, sp, #4
   1211c:	beq	121c0 <__assert_fail@plt+0x92c>
   12120:	mov	r0, r6
   12124:	bl	1765c <lchmod@@Base+0x1dac>
   12128:	cmp	r0, #0
   1212c:	blt	121e8 <__assert_fail@plt+0x954>
   12130:	ldr	r0, [sp, #4]
   12134:	bl	1151c <context_new@plt>
   12138:	subs	r5, r0, #0
   1213c:	beq	120a8 <__assert_fail@plt+0x814>
   12140:	mov	r0, r8
   12144:	bl	114b0 <context_type_get@plt>
   12148:	subs	r1, r0, #0
   1214c:	beq	120a8 <__assert_fail@plt+0x814>
   12150:	mov	r0, r5
   12154:	bl	1154c <context_type_set@plt>
   12158:	cmp	r0, #0
   1215c:	bne	120a8 <__assert_fail@plt+0x814>
   12160:	mov	r0, r5
   12164:	bl	11804 <context_str@plt>
   12168:	subs	r1, r0, #0
   1216c:	beq	120a8 <__assert_fail@plt+0x814>
   12170:	cmn	r6, #1
   12174:	beq	121dc <__assert_fail@plt+0x948>
   12178:	mov	r0, r6
   1217c:	bl	11768 <fsetfilecon@plt>
   12180:	mov	r4, r0
   12184:	cmn	r6, #1
   12188:	ldr	r9, [r7]
   1218c:	beq	12198 <__assert_fail@plt+0x904>
   12190:	mov	r0, r6
   12194:	bl	1184c <close@plt>
   12198:	mov	r0, r8
   1219c:	bl	11660 <context_free@plt>
   121a0:	mov	r0, r5
   121a4:	bl	11660 <context_free@plt>
   121a8:	ldr	r0, [sp]
   121ac:	bl	117d4 <freecon@plt>
   121b0:	ldr	r0, [sp, #4]
   121b4:	bl	117d4 <freecon@plt>
   121b8:	str	r9, [r7]
   121bc:	b	12068 <__assert_fail@plt+0x7d4>
   121c0:	mov	r0, r4
   121c4:	bl	17644 <lchmod@@Base+0x1d94>
   121c8:	cmp	r0, #0
   121cc:	bge	12130 <__assert_fail@plt+0x89c>
   121d0:	mov	r4, r6
   121d4:	mov	r5, #0
   121d8:	b	12184 <__assert_fail@plt+0x8f0>
   121dc:	mov	r0, r4
   121e0:	bl	114c8 <lsetfilecon@plt>
   121e4:	b	12180 <__assert_fail@plt+0x8ec>
   121e8:	mov	r5, #0
   121ec:	b	120a8 <__assert_fail@plt+0x814>
   121f0:	mvn	r4, #0
   121f4:	b	12068 <__assert_fail@plt+0x7d4>
   121f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   121fc:	mov	r7, #0
   12200:	sub	sp, sp, #20
   12204:	mov	r5, r0
   12208:	mov	r4, r1
   1220c:	mov	r8, r2
   12210:	ldrb	r3, [r1]
   12214:	str	r7, [sp]
   12218:	str	r7, [sp, #4]
   1221c:	cmp	r3, #47	; 0x2f
   12220:	beq	1223c <__assert_fail@plt+0x9a8>
   12224:	mov	r0, r4
   12228:	mov	r1, #2
   1222c:	bl	124c0 <__assert_fail@plt+0xc2c>
   12230:	subs	r4, r0, #0
   12234:	mov	r7, r4
   12238:	beq	1227c <__assert_fail@plt+0x9e8>
   1223c:	mov	r3, r8
   12240:	mov	r2, r4
   12244:	mov	r1, sp
   12248:	mov	r0, r5
   1224c:	bl	11468 <selabel_lookup@plt>
   12250:	mov	r6, r0
   12254:	bl	116e4 <__errno_location@plt>
   12258:	cmp	r6, #0
   1225c:	mov	r5, r0
   12260:	mov	r3, #0
   12264:	bge	12284 <__assert_fail@plt+0x9f0>
   12268:	ldr	r2, [r0]
   1226c:	mov	r4, r3
   12270:	cmp	r2, #2
   12274:	moveq	r2, #61	; 0x3d
   12278:	streq	r2, [r0]
   1227c:	mov	r6, r4
   12280:	b	123b0 <__assert_fail@plt+0xb1c>
   12284:	mov	r0, r4
   12288:	str	r3, [sp, #8]
   1228c:	str	r3, [sp, #12]
   12290:	bl	12b80 <__assert_fail@plt+0x12ec>
   12294:	mov	r6, r0
   12298:	add	r0, sp, #8
   1229c:	bl	115dc <getcon@plt>
   122a0:	cmp	r0, #0
   122a4:	bge	12370 <__assert_fail@plt+0xadc>
   122a8:	mvn	r4, #0
   122ac:	ldr	r8, [r5]
   122b0:	mov	r0, r6
   122b4:	bl	12cd8 <__assert_fail@plt+0x1444>
   122b8:	ldr	r0, [sp, #8]
   122bc:	bl	117d4 <freecon@plt>
   122c0:	ldr	r0, [sp, #12]
   122c4:	bl	117d4 <freecon@plt>
   122c8:	cmp	r4, #0
   122cc:	str	r8, [r5]
   122d0:	blt	123a8 <__assert_fail@plt+0xb14>
   122d4:	ldr	r0, [sp]
   122d8:	bl	1151c <context_new@plt>
   122dc:	subs	r4, r0, #0
   122e0:	beq	1227c <__assert_fail@plt+0x9e8>
   122e4:	ldr	r0, [sp, #4]
   122e8:	bl	1151c <context_new@plt>
   122ec:	subs	r6, r0, #0
   122f0:	beq	123b0 <__assert_fail@plt+0xb1c>
   122f4:	mov	r0, r4
   122f8:	bl	114b0 <context_type_get@plt>
   122fc:	subs	r1, r0, #0
   12300:	beq	123b0 <__assert_fail@plt+0xb1c>
   12304:	mov	r0, r6
   12308:	bl	1154c <context_type_set@plt>
   1230c:	cmp	r0, #0
   12310:	bne	123b0 <__assert_fail@plt+0xb1c>
   12314:	mov	r0, r6
   12318:	bl	11804 <context_str@plt>
   1231c:	cmp	r0, #0
   12320:	beq	123b0 <__assert_fail@plt+0xb1c>
   12324:	bl	116d8 <setfscreatecon@plt>
   12328:	mov	r5, r0
   1232c:	bl	116e4 <__errno_location@plt>
   12330:	mov	r8, r0
   12334:	mov	r0, r4
   12338:	ldr	r9, [r8]
   1233c:	bl	11660 <context_free@plt>
   12340:	mov	r0, r6
   12344:	bl	11660 <context_free@plt>
   12348:	ldr	r0, [sp]
   1234c:	bl	117d4 <freecon@plt>
   12350:	ldr	r0, [sp, #4]
   12354:	bl	117d4 <freecon@plt>
   12358:	mov	r0, r7
   1235c:	bl	12cd8 <__assert_fail@plt+0x1444>
   12360:	mov	r0, r5
   12364:	str	r9, [r8]
   12368:	add	sp, sp, #20
   1236c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12370:	add	r1, sp, #12
   12374:	mov	r0, r6
   12378:	bl	1762c <lchmod@@Base+0x1d7c>
   1237c:	cmp	r0, #0
   12380:	blt	122a8 <__assert_fail@plt+0xa14>
   12384:	mov	r0, r8
   12388:	bl	11870 <mode_to_security_class@plt>
   1238c:	subs	r2, r0, #0
   12390:	beq	122a8 <__assert_fail@plt+0xa14>
   12394:	add	r3, sp, #4
   12398:	ldrd	r0, [sp, #8]
   1239c:	bl	117a4 <security_compute_create@plt>
   123a0:	mov	r4, r0
   123a4:	b	122ac <__assert_fail@plt+0xa18>
   123a8:	mov	r6, #0
   123ac:	mov	r4, r6
   123b0:	mvn	r5, #0
   123b4:	b	1232c <__assert_fail@plt+0xa98>
   123b8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   123bc:	mov	r8, r0
   123c0:	mov	r4, r1
   123c4:	mov	r7, r2
   123c8:	ldrb	r3, [r1]
   123cc:	cmp	r3, #47	; 0x2f
   123d0:	moveq	r6, #0
   123d4:	beq	123fc <__assert_fail@plt+0xb68>
   123d8:	mov	r0, r4
   123dc:	mov	r1, #2
   123e0:	bl	124c0 <__assert_fail@plt+0xc2c>
   123e4:	subs	r4, r0, #0
   123e8:	movne	r6, r4
   123ec:	bne	123fc <__assert_fail@plt+0xb68>
   123f0:	mov	r0, r4
   123f4:	add	sp, sp, #8
   123f8:	pop	{r4, r5, r6, r7, r8, pc}
   123fc:	bl	116e4 <__errno_location@plt>
   12400:	cmp	r7, #0
   12404:	mov	r5, r0
   12408:	bne	12434 <__assert_fail@plt+0xba0>
   1240c:	mov	r1, r4
   12410:	mov	r0, r8
   12414:	bl	11ffc <__assert_fail@plt+0x768>
   12418:	ldr	r7, [r5]
   1241c:	adds	r4, r0, #1
   12420:	mov	r0, r6
   12424:	movne	r4, #1
   12428:	bl	12cd8 <__assert_fail@plt+0x1444>
   1242c:	str	r7, [r5]
   12430:	b	123f0 <__assert_fail@plt+0xb5c>
   12434:	str	r4, [sp]
   12438:	mov	r4, #0
   1243c:	mov	r1, #16
   12440:	mov	r0, sp
   12444:	mov	r2, r4
   12448:	str	r4, [sp, #4]
   1244c:	bl	17eb0 <lchmod@@Base+0x2600>
   12450:	mov	r7, r0
   12454:	mov	r0, r7
   12458:	bl	142e0 <__assert_fail@plt+0x2a4c>
   1245c:	cmp	r0, #0
   12460:	bne	12494 <__assert_fail@plt+0xc00>
   12464:	ldr	r3, [r5]
   12468:	mov	r0, r7
   1246c:	cmp	r3, #0
   12470:	movne	r4, r3
   12474:	bl	141c8 <__assert_fail@plt+0x2934>
   12478:	cmp	r0, #0
   1247c:	mov	r0, r6
   12480:	ldrne	r4, [r5]
   12484:	bl	12cd8 <__assert_fail@plt+0x1444>
   12488:	clz	r4, r4
   1248c:	lsr	r4, r4, #5
   12490:	b	123f0 <__assert_fail@plt+0xb5c>
   12494:	mov	r0, r8
   12498:	ldr	r1, [r7, #24]
   1249c:	bl	11ffc <__assert_fail@plt+0x768>
   124a0:	cmp	r0, #0
   124a4:	ldrlt	r4, [r5]
   124a8:	b	12454 <__assert_fail@plt+0xbc0>
   124ac:	mov	r3, r0
   124b0:	ldr	r0, [r3], #8
   124b4:	cmp	r0, r3
   124b8:	bxeq	lr
   124bc:	b	12cd8 <__assert_fail@plt+0x1444>
   124c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c4:	and	fp, r1, #3
   124c8:	sub	sp, sp, #3232	; 0xca0
   124cc:	sub	r3, fp, #1
   124d0:	sub	sp, sp, #4
   124d4:	tst	r3, fp
   124d8:	beq	124fc <__assert_fail@plt+0xc68>
   124dc:	bl	116e4 <__errno_location@plt>
   124e0:	mov	r3, #22
   124e4:	str	r3, [r0]
   124e8:	mov	r5, #0
   124ec:	mov	r0, r5
   124f0:	add	sp, sp, #3232	; 0xca0
   124f4:	add	sp, sp, #4
   124f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124fc:	cmp	r0, #0
   12500:	mov	r5, r0
   12504:	bne	12518 <__assert_fail@plt+0xc84>
   12508:	bl	116e4 <__errno_location@plt>
   1250c:	mov	r3, #22
   12510:	str	r3, [r0]
   12514:	b	124ec <__assert_fail@plt+0xc58>
   12518:	ldrb	r6, [r0]
   1251c:	cmp	r6, #0
   12520:	bne	12530 <__assert_fail@plt+0xc9c>
   12524:	bl	116e4 <__errno_location@plt>
   12528:	mov	r3, #2
   1252c:	b	124e4 <__assert_fail@plt+0xc50>
   12530:	add	r3, sp, #1168	; 0x490
   12534:	add	r4, sp, #144	; 0x90
   12538:	add	r3, r3, #8
   1253c:	add	r2, sp, #2208	; 0x8a0
   12540:	cmp	r6, #47	; 0x2f
   12544:	mov	r7, r1
   12548:	str	r4, [sp, #136]	; 0x88
   1254c:	str	r3, [sp, #1168]	; 0x490
   12550:	mov	r3, #1024	; 0x400
   12554:	subne	r6, r4, #8
   12558:	str	r3, [sp, #140]	; 0x8c
   1255c:	str	r3, [sp, #1172]	; 0x494
   12560:	str	r2, [sp, #2200]	; 0x898
   12564:	str	r3, [sp, #2204]	; 0x89c
   12568:	bne	125a8 <__assert_fail@plt+0xd14>
   1256c:	add	r0, r4, #1
   12570:	strb	r6, [sp, #144]	; 0x90
   12574:	b	125c8 <__assert_fail@plt+0xd34>
   12578:	bl	116e4 <__errno_location@plt>
   1257c:	ldr	r3, [r0]
   12580:	cmp	r3, #12
   12584:	beq	125a0 <__assert_fail@plt+0xd0c>
   12588:	cmp	r3, #34	; 0x22
   1258c:	bne	12a4c <__assert_fail@plt+0x11b8>
   12590:	mov	r0, r6
   12594:	bl	174c8 <lchmod@@Base+0x1c18>
   12598:	cmp	r0, #0
   1259c:	bne	125a4 <__assert_fail@plt+0xd10>
   125a0:	bl	17e70 <lchmod@@Base+0x25c0>
   125a4:	ldr	r4, [sp, #136]	; 0x88
   125a8:	mov	r0, r4
   125ac:	ldr	r1, [sp, #140]	; 0x8c
   125b0:	bl	11690 <getcwd@plt>
   125b4:	cmp	r0, #0
   125b8:	beq	12578 <__assert_fail@plt+0xce4>
   125bc:	mov	r1, #0
   125c0:	mov	r0, r4
   125c4:	bl	1157c <rawmemchr@plt>
   125c8:	and	r3, r7, #4
   125cc:	mov	r7, #0
   125d0:	mov	r6, r4
   125d4:	mov	r9, r7
   125d8:	mov	r4, r0
   125dc:	str	r7, [sp, #12]
   125e0:	str	r3, [sp, #16]
   125e4:	b	12630 <__assert_fail@plt+0xd9c>
   125e8:	mov	r3, r1
   125ec:	mov	r1, r3
   125f0:	mov	r8, r3
   125f4:	ldrb	r2, [r1], #1
   125f8:	cmp	r2, #47	; 0x2f
   125fc:	beq	125e8 <__assert_fail@plt+0xd54>
   12600:	ldrb	r1, [r3]
   12604:	mov	r5, r3
   12608:	add	r3, r3, #1
   1260c:	cmp	r1, #0
   12610:	cmpne	r1, #47	; 0x2f
   12614:	bne	12600 <__assert_fail@plt+0xd6c>
   12618:	subs	sl, r5, r8
   1261c:	beq	12a2c <__assert_fail@plt+0x1198>
   12620:	cmp	sl, #1
   12624:	bne	12644 <__assert_fail@plt+0xdb0>
   12628:	cmp	r2, #46	; 0x2e
   1262c:	bne	12688 <__assert_fail@plt+0xdf4>
   12630:	ldrb	r3, [r5]
   12634:	cmp	r3, #0
   12638:	beq	12a2c <__assert_fail@plt+0x1198>
   1263c:	mov	r3, r5
   12640:	b	125ec <__assert_fail@plt+0xd58>
   12644:	cmp	r2, #46	; 0x2e
   12648:	cmpeq	sl, #2
   1264c:	bne	12688 <__assert_fail@plt+0xdf4>
   12650:	ldrb	r3, [r8, #1]
   12654:	cmp	r3, #46	; 0x2e
   12658:	bne	12688 <__assert_fail@plt+0xdf4>
   1265c:	add	r3, r6, #1
   12660:	cmp	r4, r3
   12664:	bls	12630 <__assert_fail@plt+0xd9c>
   12668:	sub	r3, r4, #1
   1266c:	cmp	r3, r6
   12670:	mov	r4, r3
   12674:	beq	12630 <__assert_fail@plt+0xd9c>
   12678:	ldrb	r2, [r3, #-1]!
   1267c:	cmp	r2, #47	; 0x2f
   12680:	beq	12630 <__assert_fail@plt+0xd9c>
   12684:	b	1266c <__assert_fail@plt+0xdd8>
   12688:	ldrb	r3, [r4, #-1]
   1268c:	add	r2, sl, #2
   12690:	cmp	r3, #47	; 0x2f
   12694:	movne	r3, #47	; 0x2f
   12698:	strbne	r3, [r4], #1
   1269c:	ldr	r3, [sp, #140]	; 0x8c
   126a0:	add	r3, r6, r3
   126a4:	sub	r3, r3, r4
   126a8:	cmp	r3, r2
   126ac:	bcc	12724 <__assert_fail@plt+0xe90>
   126b0:	mov	r0, r4
   126b4:	mov	r2, sl
   126b8:	mov	r1, r8
   126bc:	bl	1166c <mempcpy@plt>
   126c0:	mov	r3, #0
   126c4:	mov	r4, r0
   126c8:	strb	r3, [r0]
   126cc:	ldr	r3, [sp, #16]
   126d0:	cmp	r3, #0
   126d4:	bne	12930 <__assert_fail@plt+0x109c>
   126d8:	ldr	r3, [sp, #2200]	; 0x898
   126dc:	mov	r0, r6
   126e0:	str	r3, [sp, #8]
   126e4:	ldr	r1, [sp, #8]
   126e8:	ldr	r3, [sp, #2204]	; 0x89c
   126ec:	sub	r3, r3, #1
   126f0:	mov	r2, r3
   126f4:	str	r3, [sp, #20]
   126f8:	bl	115ac <readlink@plt>
   126fc:	ldr	r3, [sp, #20]
   12700:	mov	sl, r0
   12704:	cmp	r3, r0
   12708:	bgt	1274c <__assert_fail@plt+0xeb8>
   1270c:	add	r0, sp, #2192	; 0x890
   12710:	add	r0, r0, #8
   12714:	bl	174c8 <lchmod@@Base+0x1c18>
   12718:	cmp	r0, #0
   1271c:	bne	126d8 <__assert_fail@plt+0xe44>
   12720:	b	125a0 <__assert_fail@plt+0xd0c>
   12724:	add	r0, sp, #136	; 0x88
   12728:	str	r2, [sp, #8]
   1272c:	sub	r4, r4, r6
   12730:	bl	17538 <lchmod@@Base+0x1c88>
   12734:	cmp	r0, #0
   12738:	ldr	r2, [sp, #8]
   1273c:	beq	125a0 <__assert_fail@plt+0xd0c>
   12740:	ldr	r6, [sp, #136]	; 0x88
   12744:	add	r4, r6, r4
   12748:	b	1269c <__assert_fail@plt+0xe08>
   1274c:	cmp	r0, #0
   12750:	blt	12930 <__assert_fail@plt+0x109c>
   12754:	ldr	r3, [sp, #12]
   12758:	cmp	r3, #19
   1275c:	addle	r3, r3, #1
   12760:	strle	r3, [sp, #12]
   12764:	ble	12858 <__assert_fail@plt+0xfc4>
   12768:	ldrb	r3, [r8]
   1276c:	cmp	r3, #0
   12770:	beq	12858 <__assert_fail@plt+0xfc4>
   12774:	sub	r3, r8, r5
   12778:	mov	r2, #0
   1277c:	add	r1, sp, #32
   12780:	strb	r2, [r4, r3]
   12784:	ldrb	r0, [r6]
   12788:	str	r3, [sp, #20]
   1278c:	ldr	r2, [pc, #736]	; 12a74 <__assert_fail@plt+0x11e0>
   12790:	cmp	r0, #0
   12794:	movne	r0, r6
   12798:	moveq	r0, r2
   1279c:	bl	18904 <lchmod@@Base+0x3054>
   127a0:	cmp	r0, #0
   127a4:	bne	1280c <__assert_fail@plt+0xf78>
   127a8:	ldrb	r2, [r8]
   127ac:	cmp	r7, #0
   127b0:	ldr	r3, [sp, #20]
   127b4:	strb	r2, [r4, r3]
   127b8:	bne	127e0 <__assert_fail@plt+0xf4c>
   127bc:	ldr	r3, [pc, #692]	; 12a78 <__assert_fail@plt+0x11e4>
   127c0:	mov	r1, r7
   127c4:	mov	r0, #7
   127c8:	ldr	r2, [pc, #684]	; 12a7c <__assert_fail@plt+0x11e8>
   127cc:	str	r3, [sp]
   127d0:	ldr	r3, [pc, #680]	; 12a80 <__assert_fail@plt+0x11ec>
   127d4:	bl	15160 <__assert_fail@plt+0x38cc>
   127d8:	subs	r7, r0, #0
   127dc:	beq	125a0 <__assert_fail@plt+0xd0c>
   127e0:	add	r2, sp, #32
   127e4:	mov	r1, r8
   127e8:	mov	r0, r7
   127ec:	bl	12c94 <__assert_fail@plt+0x1400>
   127f0:	cmp	r0, #0
   127f4:	beq	12848 <__assert_fail@plt+0xfb4>
   127f8:	cmp	fp, #2
   127fc:	beq	12630 <__assert_fail@plt+0xd9c>
   12800:	bl	116e4 <__errno_location@plt>
   12804:	mov	r3, #40	; 0x28
   12808:	str	r3, [r0]
   1280c:	mov	r8, #1
   12810:	cmp	r7, #0
   12814:	beq	12820 <__assert_fail@plt+0xf8c>
   12818:	mov	r0, r7
   1281c:	bl	152c8 <__assert_fail@plt+0x3a34>
   12820:	add	r0, sp, #1168	; 0x490
   12824:	bl	124ac <__assert_fail@plt+0xc18>
   12828:	add	r0, sp, #2192	; 0x890
   1282c:	add	r0, r0, #8
   12830:	bl	124ac <__assert_fail@plt+0xc18>
   12834:	cmp	r8, #0
   12838:	beq	12a58 <__assert_fail@plt+0x11c4>
   1283c:	add	r0, sp, #136	; 0x88
   12840:	bl	124ac <__assert_fail@plt+0xc18>
   12844:	b	124e8 <__assert_fail@plt+0xc54>
   12848:	add	r2, sp, #32
   1284c:	mov	r1, r8
   12850:	mov	r0, r7
   12854:	bl	12c2c <__assert_fail@plt+0x1398>
   12858:	ldr	r2, [sp, #8]
   1285c:	mov	r3, #0
   12860:	mov	r0, r5
   12864:	cmp	r9, r3
   12868:	streq	r9, [sp, #20]
   1286c:	strb	r3, [r2, sl]
   12870:	ldr	r8, [sp, #1168]	; 0x490
   12874:	subne	r3, r5, r8
   12878:	strne	r3, [sp, #20]
   1287c:	bl	116b4 <strlen@plt>
   12880:	mov	r2, r0
   12884:	add	r1, sl, r0
   12888:	ldr	r0, [sp, #1172]	; 0x494
   1288c:	cmp	r0, r1
   12890:	bls	12908 <__assert_fail@plt+0x1074>
   12894:	cmp	r9, #0
   12898:	add	r2, r2, #1
   1289c:	ldrne	r3, [sp, #20]
   128a0:	add	r0, r8, sl
   128a4:	addne	r5, r8, r3
   128a8:	mov	r1, r5
   128ac:	bl	114d4 <memmove@plt>
   128b0:	mov	r2, sl
   128b4:	mov	r0, r8
   128b8:	ldr	r1, [sp, #8]
   128bc:	bl	11504 <memcpy@plt>
   128c0:	ldr	r2, [sp, #8]
   128c4:	add	r3, r6, #1
   128c8:	mov	r5, r0
   128cc:	ldrb	r2, [r2]
   128d0:	cmp	r2, #47	; 0x2f
   128d4:	moveq	r4, r3
   128d8:	strbeq	r2, [r6]
   128dc:	beq	12900 <__assert_fail@plt+0x106c>
   128e0:	cmp	r4, r3
   128e4:	bls	12900 <__assert_fail@plt+0x106c>
   128e8:	sub	r4, r4, #1
   128ec:	cmp	r6, r4
   128f0:	beq	12900 <__assert_fail@plt+0x106c>
   128f4:	ldrb	r3, [r4, #-1]
   128f8:	cmp	r3, #47	; 0x2f
   128fc:	bne	128e8 <__assert_fail@plt+0x1054>
   12900:	mov	r9, #1
   12904:	b	12630 <__assert_fail@plt+0xd9c>
   12908:	add	r0, sp, #1168	; 0x490
   1290c:	str	r2, [sp, #24]
   12910:	str	r1, [sp, #28]
   12914:	bl	17538 <lchmod@@Base+0x1c88>
   12918:	cmp	r0, #0
   1291c:	beq	125a0 <__assert_fail@plt+0xd0c>
   12920:	ldr	r2, [sp, #24]
   12924:	ldr	r1, [sp, #28]
   12928:	ldr	r8, [sp, #1168]	; 0x490
   1292c:	b	12888 <__assert_fail@plt+0xff4>
   12930:	cmp	fp, #2
   12934:	movne	r3, r5
   12938:	beq	12630 <__assert_fail@plt+0xd9c>
   1293c:	ldrb	r2, [r3]
   12940:	cmp	r2, #47	; 0x2f
   12944:	beq	129a4 <__assert_fail@plt+0x1110>
   12948:	ldr	r3, [sp, #16]
   1294c:	cmp	r3, #0
   12950:	bne	12a14 <__assert_fail@plt+0x1180>
   12954:	bl	116e4 <__errno_location@plt>
   12958:	ldr	r8, [r0]
   1295c:	subs	r8, r8, #22
   12960:	movne	r8, #1
   12964:	cmp	r8, #0
   12968:	beq	12630 <__assert_fail@plt+0xd9c>
   1296c:	cmp	fp, #1
   12970:	bne	12810 <__assert_fail@plt+0xf7c>
   12974:	bl	116e4 <__errno_location@plt>
   12978:	ldr	r3, [r0]
   1297c:	cmp	r3, #2
   12980:	bne	12810 <__assert_fail@plt+0xf7c>
   12984:	ldr	r1, [pc, #248]	; 12a84 <__assert_fail@plt+0x11f0>
   12988:	mov	r0, r5
   1298c:	bl	11888 <strspn@plt>
   12990:	ldrb	r3, [r5, r0]
   12994:	cmp	r3, #0
   12998:	beq	12630 <__assert_fail@plt+0xd9c>
   1299c:	b	12810 <__assert_fail@plt+0xf7c>
   129a0:	mov	r3, r2
   129a4:	ldrb	r1, [r3, #1]
   129a8:	add	r2, r3, #1
   129ac:	cmp	r1, #47	; 0x2f
   129b0:	beq	129a0 <__assert_fail@plt+0x110c>
   129b4:	cmp	r1, #0
   129b8:	add	r3, r3, #2
   129bc:	beq	129ec <__assert_fail@plt+0x1158>
   129c0:	cmp	r1, #46	; 0x2e
   129c4:	bne	12948 <__assert_fail@plt+0x10b4>
   129c8:	ldrb	r1, [r2, #1]
   129cc:	cmp	r1, #0
   129d0:	beq	129ec <__assert_fail@plt+0x1158>
   129d4:	cmp	r1, #46	; 0x2e
   129d8:	bne	1293c <__assert_fail@plt+0x10a8>
   129dc:	ldrb	r2, [r2, #2]
   129e0:	cmp	r2, #47	; 0x2f
   129e4:	cmpne	r2, #0
   129e8:	bne	1293c <__assert_fail@plt+0x10a8>
   129ec:	ldr	r1, [pc, #148]	; 12a88 <__assert_fail@plt+0x11f4>
   129f0:	mov	r0, r4
   129f4:	bl	115d0 <strcpy@plt>
   129f8:	mov	r3, #512	; 0x200
   129fc:	mov	r2, #0
   12a00:	mov	r1, r6
   12a04:	mvn	r0, #99	; 0x63
   12a08:	bl	114ec <faccessat@plt>
   12a0c:	adds	r8, r0, #0
   12a10:	b	12960 <__assert_fail@plt+0x10cc>
   12a14:	ldrb	r2, [r5]
   12a18:	cmp	r2, #0
   12a1c:	movne	r8, #0
   12a20:	bne	12964 <__assert_fail@plt+0x10d0>
   12a24:	mov	r3, #512	; 0x200
   12a28:	b	12a00 <__assert_fail@plt+0x116c>
   12a2c:	add	r3, r6, #1
   12a30:	cmp	r4, r3
   12a34:	bls	12a44 <__assert_fail@plt+0x11b0>
   12a38:	ldrb	r3, [r4, #-1]
   12a3c:	cmp	r3, #47	; 0x2f
   12a40:	subeq	r4, r4, #1
   12a44:	mov	r8, #0
   12a48:	b	12810 <__assert_fail@plt+0xf7c>
   12a4c:	mov	r6, r4
   12a50:	mov	r8, #1
   12a54:	b	12820 <__assert_fail@plt+0xf8c>
   12a58:	add	r0, sp, #136	; 0x88
   12a5c:	strb	r8, [r4], #1
   12a60:	sub	r1, r4, r6
   12a64:	bl	17478 <lchmod@@Base+0x1bc8>
   12a68:	subs	r5, r0, #0
   12a6c:	bne	124ec <__assert_fail@plt+0xc58>
   12a70:	b	125a0 <__assert_fail@plt+0xd0c>
   12a74:	andeq	r8, r1, r3, lsl #30
   12a78:	ldrdeq	r5, [r1], -r4
   12a7c:	andeq	r5, r1, r4, asr r7
   12a80:	andeq	r5, r1, r8, lsl #15
   12a84:	andeq	r9, r1, sl, ror r3
   12a88:	ldrdeq	r8, [r1], -r5
   12a8c:	ldr	r3, [pc, #4]	; 12a98 <__assert_fail@plt+0x1204>
   12a90:	str	r0, [r3]
   12a94:	bx	lr
   12a98:	strdeq	sl, [r2], -r0
   12a9c:	ldr	r3, [pc, #4]	; 12aa8 <__assert_fail@plt+0x1214>
   12aa0:	strb	r0, [r3, #4]
   12aa4:	bx	lr
   12aa8:	strdeq	sl, [r2], -r0
   12aac:	ldr	r3, [pc, #176]	; 12b64 <__assert_fail@plt+0x12d0>
   12ab0:	push	{r0, r1, r4, r5, r6, lr}
   12ab4:	ldr	r0, [r3]
   12ab8:	bl	18078 <lchmod@@Base+0x27c8>
   12abc:	cmp	r0, #0
   12ac0:	beq	12b48 <__assert_fail@plt+0x12b4>
   12ac4:	ldr	r4, [pc, #156]	; 12b68 <__assert_fail@plt+0x12d4>
   12ac8:	bl	116e4 <__errno_location@plt>
   12acc:	mov	r5, r0
   12ad0:	ldrb	r6, [r4, #4]
   12ad4:	cmp	r6, #0
   12ad8:	beq	12ae8 <__assert_fail@plt+0x1254>
   12adc:	ldr	r3, [r0]
   12ae0:	cmp	r3, #32
   12ae4:	beq	12b48 <__assert_fail@plt+0x12b4>
   12ae8:	mov	r2, #5
   12aec:	ldr	r1, [pc, #120]	; 12b6c <__assert_fail@plt+0x12d8>
   12af0:	mov	r0, #0
   12af4:	bl	11540 <dcgettext@plt>
   12af8:	mov	r6, r0
   12afc:	ldr	r0, [r4]
   12b00:	cmp	r0, #0
   12b04:	beq	12b34 <__assert_fail@plt+0x12a0>
   12b08:	ldr	r4, [r5]
   12b0c:	bl	1731c <lchmod@@Base+0x1a6c>
   12b10:	mov	r3, r0
   12b14:	ldr	r2, [pc, #84]	; 12b70 <__assert_fail@plt+0x12dc>
   12b18:	mov	r0, #0
   12b1c:	str	r6, [sp]
   12b20:	mov	r1, r4
   12b24:	bl	1160c <error@plt>
   12b28:	ldr	r3, [pc, #68]	; 12b74 <__assert_fail@plt+0x12e0>
   12b2c:	ldr	r0, [r3]
   12b30:	bl	114f8 <_exit@plt>
   12b34:	mov	r3, r6
   12b38:	ldr	r2, [pc, #56]	; 12b78 <__assert_fail@plt+0x12e4>
   12b3c:	ldr	r1, [r5]
   12b40:	bl	1160c <error@plt>
   12b44:	b	12b28 <__assert_fail@plt+0x1294>
   12b48:	ldr	r3, [pc, #44]	; 12b7c <__assert_fail@plt+0x12e8>
   12b4c:	ldr	r0, [r3]
   12b50:	bl	18078 <lchmod@@Base+0x27c8>
   12b54:	cmp	r0, #0
   12b58:	bne	12b28 <__assert_fail@plt+0x1294>
   12b5c:	add	sp, sp, #8
   12b60:	pop	{r4, r5, r6, pc}
   12b64:	andeq	sl, r2, r4, ror #3
   12b68:	strdeq	sl, [r2], -r0
   12b6c:	ldrdeq	r8, [r1], -r7
   12b70:	andeq	r8, r1, r3, ror #29
   12b74:	andeq	sl, r2, r8, lsl #3
   12b78:	andeq	r8, r1, r7, ror #29
   12b7c:	andeq	sl, r2, r0, ror #3
   12b80:	push	{r4, lr}
   12b84:	bl	12bd4 <__assert_fail@plt+0x1340>
   12b88:	cmp	r0, #0
   12b8c:	popne	{r4, pc}
   12b90:	bl	17e70 <lchmod@@Base+0x25c0>
   12b94:	push	{r4, r5, r6, lr}
   12b98:	mov	r5, r0
   12b9c:	ldrb	r4, [r0]
   12ba0:	bl	17ff4 <lchmod@@Base+0x2744>
   12ba4:	sub	r0, r0, r5
   12ba8:	sub	r4, r4, #47	; 0x2f
   12bac:	clz	r4, r4
   12bb0:	lsr	r4, r4, #5
   12bb4:	cmp	r0, r4
   12bb8:	popls	{r4, r5, r6, pc}
   12bbc:	sub	r3, r0, #1
   12bc0:	ldrb	r2, [r5, r3]
   12bc4:	cmp	r2, #47	; 0x2f
   12bc8:	popne	{r4, r5, r6, pc}
   12bcc:	mov	r0, r3
   12bd0:	b	12bb4 <__assert_fail@plt+0x1320>
   12bd4:	push	{r4, r5, r6, lr}
   12bd8:	mov	r6, r0
   12bdc:	bl	12b94 <__assert_fail@plt+0x1300>
   12be0:	add	r3, r0, #1
   12be4:	mov	r4, r0
   12be8:	cmp	r0, #0
   12bec:	movne	r0, r3
   12bf0:	addeq	r0, r3, #1
   12bf4:	bl	17f84 <lchmod@@Base+0x26d4>
   12bf8:	subs	r5, r0, #0
   12bfc:	beq	12c24 <__assert_fail@plt+0x1390>
   12c00:	mov	r2, r4
   12c04:	mov	r1, r6
   12c08:	bl	11504 <memcpy@plt>
   12c0c:	cmp	r4, #0
   12c10:	moveq	r3, #46	; 0x2e
   12c14:	moveq	r4, #1
   12c18:	strbeq	r3, [r5]
   12c1c:	mov	r3, #0
   12c20:	strb	r3, [r5, r4]
   12c24:	mov	r0, r5
   12c28:	pop	{r4, r5, r6, pc}
   12c2c:	push	{r4, r5, r6, r7, r8, lr}
   12c30:	subs	r6, r0, #0
   12c34:	popeq	{r4, r5, r6, r7, r8, pc}
   12c38:	mov	r0, #24
   12c3c:	mov	r5, r2
   12c40:	mov	r7, r1
   12c44:	bl	17bb8 <lchmod@@Base+0x2308>
   12c48:	mov	r4, r0
   12c4c:	mov	r0, r7
   12c50:	bl	17e54 <lchmod@@Base+0x25a4>
   12c54:	ldrd	r2, [r5, #96]	; 0x60
   12c58:	mov	r1, r4
   12c5c:	str	r0, [r4]
   12c60:	mov	r0, r6
   12c64:	strd	r2, [r4, #8]
   12c68:	ldrd	r2, [r5]
   12c6c:	strd	r2, [r4, #16]
   12c70:	bl	15628 <__assert_fail@plt+0x3d94>
   12c74:	cmp	r0, #0
   12c78:	bne	12c80 <__assert_fail@plt+0x13ec>
   12c7c:	bl	17e70 <lchmod@@Base+0x25c0>
   12c80:	cmp	r4, r0
   12c84:	popeq	{r4, r5, r6, r7, r8, pc}
   12c88:	mov	r0, r4
   12c8c:	pop	{r4, r5, r6, r7, r8, lr}
   12c90:	b	157d4 <__assert_fail@plt+0x3f40>
   12c94:	subs	r3, r0, #0
   12c98:	beq	12cd0 <__assert_fail@plt+0x143c>
   12c9c:	push	{r4, r5, lr}
   12ca0:	sub	sp, sp, #28
   12ca4:	ldrd	r4, [r2, #96]	; 0x60
   12ca8:	str	r1, [sp]
   12cac:	mov	r1, sp
   12cb0:	ldrd	r2, [r2]
   12cb4:	strd	r4, [sp, #8]
   12cb8:	strd	r2, [sp, #16]
   12cbc:	bl	14f50 <__assert_fail@plt+0x36bc>
   12cc0:	adds	r0, r0, #0
   12cc4:	movne	r0, #1
   12cc8:	add	sp, sp, #28
   12ccc:	pop	{r4, r5, pc}
   12cd0:	mov	r0, r3
   12cd4:	bx	lr
   12cd8:	push	{r0, r1, r2, r4, r5, lr}
   12cdc:	mov	r5, r0
   12ce0:	bl	116e4 <__errno_location@plt>
   12ce4:	mov	r4, r0
   12ce8:	mov	r0, r5
   12cec:	ldr	r3, [r4]
   12cf0:	str	r3, [sp]
   12cf4:	str	r3, [sp, #4]
   12cf8:	mov	r3, #0
   12cfc:	str	r3, [r4]
   12d00:	bl	114e0 <free@plt>
   12d04:	ldr	r3, [r4]
   12d08:	add	r2, sp, #8
   12d0c:	clz	r3, r3
   12d10:	lsr	r3, r3, #5
   12d14:	add	r3, r2, r3, lsl #2
   12d18:	ldr	r3, [r3, #-8]
   12d1c:	str	r3, [r4]
   12d20:	add	sp, sp, #12
   12d24:	pop	{r4, r5, pc}
   12d28:	push	{r4, r5, lr}
   12d2c:	ldrd	r2, [r1, #8]
   12d30:	ldrd	r4, [r0, #8]
   12d34:	cmp	r5, r3
   12d38:	cmpeq	r4, r2
   12d3c:	bne	12d5c <__assert_fail@plt+0x14c8>
   12d40:	ldrd	r4, [r0]
   12d44:	ldrd	r2, [r1]
   12d48:	cmp	r5, r3
   12d4c:	cmpeq	r4, r2
   12d50:	moveq	r0, #1
   12d54:	movne	r0, #0
   12d58:	pop	{r4, r5, pc}
   12d5c:	mov	r0, #0
   12d60:	pop	{r4, r5, pc}
   12d64:	push	{r4, lr}
   12d68:	mov	r2, r1
   12d6c:	mov	r3, #0
   12d70:	ldrd	r0, [r0, #8]
   12d74:	bl	18714 <lchmod@@Base+0x2e64>
   12d78:	mov	r0, r2
   12d7c:	pop	{r4, pc}
   12d80:	push	{r4, lr}
   12d84:	mov	r2, r1
   12d88:	mov	r3, #0
   12d8c:	ldrd	r0, [r0]
   12d90:	bl	18714 <lchmod@@Base+0x2e64>
   12d94:	mov	r0, r2
   12d98:	pop	{r4, pc}
   12d9c:	push	{r4, r5, lr}
   12da0:	ldrd	r2, [r1]
   12da4:	ldrd	r4, [r0]
   12da8:	cmp	r5, r3
   12dac:	cmpeq	r4, r2
   12db0:	moveq	r0, #1
   12db4:	movne	r0, #0
   12db8:	pop	{r4, r5, pc}
   12dbc:	ldr	r3, [r0]
   12dc0:	push	{r4, r5, lr}
   12dc4:	ldrd	r4, [r3, #160]	; 0xa0
   12dc8:	ldr	r3, [r1]
   12dcc:	ldrd	r2, [r3, #160]	; 0xa0
   12dd0:	cmp	r5, r3
   12dd4:	cmpeq	r4, r2
   12dd8:	movhi	r0, #1
   12ddc:	movls	r0, #0
   12de0:	movcc	r3, #1
   12de4:	movcs	r3, #0
   12de8:	sub	r0, r0, r3
   12dec:	pop	{r4, r5, pc}
   12df0:	push	{r4, r5, r6, lr}
   12df4:	mov	r4, r1
   12df8:	add	r5, r1, #64	; 0x40
   12dfc:	ldr	r1, [r1, #48]	; 0x30
   12e00:	ldr	r3, [r0, #48]	; 0x30
   12e04:	cmp	r1, #0
   12e08:	bne	12e14 <__assert_fail@plt+0x1580>
   12e0c:	tst	r3, #1
   12e10:	bne	12e20 <__assert_fail@plt+0x158c>
   12e14:	ubfx	r3, r3, #1, #1
   12e18:	orrs	r3, r2, r3
   12e1c:	beq	12e88 <__assert_fail@plt+0x15f4>
   12e20:	mov	r1, r5
   12e24:	ldr	r0, [r4, #24]
   12e28:	bl	18904 <lchmod@@Base+0x3054>
   12e2c:	cmp	r0, #0
   12e30:	beq	12eb0 <__assert_fail@plt+0x161c>
   12e34:	bl	116e4 <__errno_location@plt>
   12e38:	ldr	r3, [r0]
   12e3c:	mov	r6, r0
   12e40:	cmp	r3, #2
   12e44:	bne	12e68 <__assert_fail@plt+0x15d4>
   12e48:	mov	r1, r5
   12e4c:	ldr	r0, [r4, #24]
   12e50:	bl	18924 <lchmod@@Base+0x3074>
   12e54:	cmp	r0, #0
   12e58:	bne	12e68 <__assert_fail@plt+0x15d4>
   12e5c:	str	r0, [r6]
   12e60:	mov	r0, #13
   12e64:	pop	{r4, r5, r6, pc}
   12e68:	ldr	r3, [r6]
   12e6c:	mov	r2, #104	; 0x68
   12e70:	mov	r1, #0
   12e74:	str	r3, [r4, #32]
   12e78:	mov	r0, r5
   12e7c:	bl	11708 <memset@plt>
   12e80:	mov	r0, #10
   12e84:	pop	{r4, r5, r6, pc}
   12e88:	mov	r3, #256	; 0x100
   12e8c:	mov	r2, r5
   12e90:	ldr	r1, [r4, #24]
   12e94:	ldr	r0, [r0, #32]
   12e98:	bl	18934 <lchmod@@Base+0x3084>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12eb0 <__assert_fail@plt+0x161c>
   12ea4:	bl	116e4 <__errno_location@plt>
   12ea8:	ldr	r3, [r0]
   12eac:	b	12e6c <__assert_fail@plt+0x15d8>
   12eb0:	ldr	r3, [r4, #80]	; 0x50
   12eb4:	and	r3, r3, #61440	; 0xf000
   12eb8:	cmp	r3, #16384	; 0x4000
   12ebc:	bne	12f00 <__assert_fail@plt+0x166c>
   12ec0:	ldrb	r3, [r4, #168]	; 0xa8
   12ec4:	cmp	r3, #46	; 0x2e
   12ec8:	bne	12f18 <__assert_fail@plt+0x1684>
   12ecc:	ldrb	r3, [r4, #169]	; 0xa9
   12ed0:	cmp	r3, #0
   12ed4:	beq	12eec <__assert_fail@plt+0x1658>
   12ed8:	ldr	r3, [r4, #168]	; 0xa8
   12edc:	bic	r3, r3, #-16777216	; 0xff000000
   12ee0:	bic	r3, r3, #255	; 0xff
   12ee4:	cmp	r3, #11776	; 0x2e00
   12ee8:	bne	12f18 <__assert_fail@plt+0x1684>
   12eec:	ldr	r3, [r4, #48]	; 0x30
   12ef0:	cmp	r3, #0
   12ef4:	moveq	r0, #1
   12ef8:	movne	r0, #5
   12efc:	pop	{r4, r5, r6, pc}
   12f00:	cmp	r3, #40960	; 0xa000
   12f04:	beq	12f20 <__assert_fail@plt+0x168c>
   12f08:	cmp	r3, #32768	; 0x8000
   12f0c:	movne	r0, #3
   12f10:	moveq	r0, #8
   12f14:	pop	{r4, r5, r6, pc}
   12f18:	mov	r0, #1
   12f1c:	pop	{r4, r5, r6, pc}
   12f20:	mov	r0, #12
   12f24:	pop	{r4, r5, r6, pc}
   12f28:	ldr	r3, [r0, #40]	; 0x28
   12f2c:	push	{r4, r5, r6, r7, r8, lr}
   12f30:	mov	r4, r0
   12f34:	mov	r6, r1
   12f38:	mov	r5, r2
   12f3c:	ldr	r7, [r0, #44]	; 0x2c
   12f40:	cmp	r3, r2
   12f44:	bcs	12f8c <__assert_fail@plt+0x16f8>
   12f48:	add	r1, r2, #40	; 0x28
   12f4c:	ldr	r0, [r0, #8]
   12f50:	cmn	r1, #-1073741823	; 0xc0000001
   12f54:	str	r1, [r4, #40]	; 0x28
   12f58:	bls	12f78 <__assert_fail@plt+0x16e4>
   12f5c:	ldr	r0, [r4, #8]
   12f60:	bl	12cd8 <__assert_fail@plt+0x1444>
   12f64:	mov	r3, #0
   12f68:	str	r3, [r4, #8]
   12f6c:	str	r3, [r4, #40]	; 0x28
   12f70:	mov	r0, r6
   12f74:	pop	{r4, r5, r6, r7, r8, pc}
   12f78:	lsl	r1, r1, #2
   12f7c:	bl	17fb0 <lchmod@@Base+0x2700>
   12f80:	cmp	r0, #0
   12f84:	beq	12f5c <__assert_fail@plt+0x16c8>
   12f88:	str	r0, [r4, #8]
   12f8c:	ldr	r0, [r4, #8]
   12f90:	mov	r2, r0
   12f94:	cmp	r6, #0
   12f98:	bne	12fc8 <__assert_fail@plt+0x1734>
   12f9c:	mov	r3, r7
   12fa0:	mov	r2, #4
   12fa4:	mov	r1, r5
   12fa8:	bl	117c8 <qsort@plt>
   12fac:	ldr	r3, [r4, #8]
   12fb0:	ldr	r6, [r3]
   12fb4:	subs	r5, r5, #1
   12fb8:	ldr	r2, [r3]
   12fbc:	bne	12fd4 <__assert_fail@plt+0x1740>
   12fc0:	str	r5, [r2, #8]
   12fc4:	b	12f70 <__assert_fail@plt+0x16dc>
   12fc8:	str	r6, [r2], #4
   12fcc:	ldr	r6, [r6, #8]
   12fd0:	b	12f94 <__assert_fail@plt+0x1700>
   12fd4:	ldr	r1, [r3, #4]!
   12fd8:	str	r1, [r2, #8]
   12fdc:	b	12fb4 <__assert_fail@plt+0x1720>
   12fe0:	push	{r4, r5, r6, r7, r8, lr}
   12fe4:	mov	r6, r0
   12fe8:	add	r0, r2, #176	; 0xb0
   12fec:	bic	r0, r0, #7
   12ff0:	mov	r7, r1
   12ff4:	mov	r5, r2
   12ff8:	bl	17f84 <lchmod@@Base+0x26d4>
   12ffc:	subs	r4, r0, #0
   13000:	beq	1304c <__assert_fail@plt+0x17b8>
   13004:	mov	r2, r5
   13008:	mov	r1, r7
   1300c:	add	r0, r4, #168	; 0xa8
   13010:	bl	11504 <memcpy@plt>
   13014:	mov	r3, #0
   13018:	add	r2, r4, r5
   1301c:	strb	r3, [r2, #168]	; 0xa8
   13020:	ldr	r2, [r6, #24]
   13024:	str	r3, [r4, #12]
   13028:	str	r3, [r4, #16]
   1302c:	str	r3, [r4, #20]
   13030:	str	r2, [r4, #28]
   13034:	mov	r2, #3
   13038:	str	r3, [r4, #32]
   1303c:	str	r6, [r4, #44]	; 0x2c
   13040:	str	r5, [r4, #52]	; 0x34
   13044:	strh	r3, [r4, #58]	; 0x3a
   13048:	strh	r2, [r4, #60]	; 0x3c
   1304c:	mov	r0, r4
   13050:	pop	{r4, r5, r6, r7, r8, pc}
   13054:	mov	r3, r0
   13058:	mov	r0, r1
   1305c:	ldr	ip, [r3, #48]	; 0x30
   13060:	lsl	r2, ip, #11
   13064:	tst	ip, #512	; 0x200
   13068:	and	r2, r2, #32768	; 0x8000
   1306c:	orr	r2, r2, #540672	; 0x84000
   13070:	orr	r2, r2, #2304	; 0x900
   13074:	beq	13080 <__assert_fail@plt+0x17ec>
   13078:	ldr	r0, [r3, #32]
   1307c:	b	15de8 <lchmod@@Base+0x538>
   13080:	mov	r1, r2
   13084:	b	1840c <lchmod@@Base+0x2b5c>
   13088:	push	{r4, r5, r6, lr}
   1308c:	mov	r4, r0
   13090:	cmp	r4, #0
   13094:	popeq	{r4, r5, r6, pc}
   13098:	ldr	r5, [r4, #8]
   1309c:	ldr	r0, [r4, #12]
   130a0:	cmp	r0, #0
   130a4:	beq	130ac <__assert_fail@plt+0x1818>
   130a8:	bl	1187c <closedir@plt>
   130ac:	mov	r0, r4
   130b0:	mov	r4, r5
   130b4:	bl	12cd8 <__assert_fail@plt+0x1444>
   130b8:	b	13090 <__assert_fail@plt+0x17fc>
   130bc:	push	{r4, lr}
   130c0:	mov	r4, r0
   130c4:	mov	r0, r4
   130c8:	bl	1581c <__assert_fail@plt+0x3f88>
   130cc:	cmp	r0, #0
   130d0:	popne	{r4, pc}
   130d4:	mov	r0, r4
   130d8:	bl	15868 <__assert_fail@plt+0x3fd4>
   130dc:	cmp	r0, #0
   130e0:	blt	130c4 <__assert_fail@plt+0x1830>
   130e4:	bl	1184c <close@plt>
   130e8:	b	130c4 <__assert_fail@plt+0x1830>
   130ec:	push	{r4, r5, r6, r7, lr}
   130f0:	sub	sp, sp, #100	; 0x64
   130f4:	ldr	r5, [r0, #44]	; 0x2c
   130f8:	ldr	r3, [r5, #48]	; 0x30
   130fc:	tst	r3, #512	; 0x200
   13100:	bne	13110 <__assert_fail@plt+0x187c>
   13104:	mov	r0, #0
   13108:	add	sp, sp, #100	; 0x64
   1310c:	pop	{r4, r5, r6, r7, pc}
   13110:	ldr	r4, [r5, #52]	; 0x34
   13114:	mov	r7, r1
   13118:	mov	r6, r0
   1311c:	cmp	r4, #0
   13120:	bne	13150 <__assert_fail@plt+0x18bc>
   13124:	ldr	r3, [pc, #184]	; 131e4 <__assert_fail@plt+0x1950>
   13128:	mov	r1, r4
   1312c:	mov	r0, #13
   13130:	ldr	r2, [pc, #176]	; 131e8 <__assert_fail@plt+0x1954>
   13134:	str	r3, [sp]
   13138:	ldr	r3, [pc, #172]	; 131ec <__assert_fail@plt+0x1958>
   1313c:	bl	15160 <__assert_fail@plt+0x38cc>
   13140:	cmp	r0, #0
   13144:	mov	r4, r0
   13148:	str	r0, [r5, #52]	; 0x34
   1314c:	beq	13170 <__assert_fail@plt+0x18dc>
   13150:	ldrd	r2, [r6, #64]	; 0x40
   13154:	add	r1, sp, #8
   13158:	mov	r0, r4
   1315c:	strd	r2, [sp, #8]
   13160:	bl	14f50 <__assert_fail@plt+0x36bc>
   13164:	cmp	r0, #0
   13168:	ldrne	r0, [r0, #8]
   1316c:	bne	13108 <__assert_fail@plt+0x1874>
   13170:	cmp	r7, #0
   13174:	blt	13104 <__assert_fail@plt+0x1870>
   13178:	add	r1, sp, #8
   1317c:	mov	r0, r7
   13180:	bl	1145c <fstatfs64@plt>
   13184:	cmp	r0, #0
   13188:	bne	13104 <__assert_fail@plt+0x1870>
   1318c:	cmp	r4, #0
   13190:	beq	131dc <__assert_fail@plt+0x1948>
   13194:	mov	r0, #16
   13198:	bl	17f84 <lchmod@@Base+0x26d4>
   1319c:	subs	r5, r0, #0
   131a0:	beq	131dc <__assert_fail@plt+0x1948>
   131a4:	ldrd	r2, [r6, #64]	; 0x40
   131a8:	mov	r1, r5
   131ac:	mov	r0, r4
   131b0:	strd	r2, [r5]
   131b4:	ldr	r3, [sp, #8]
   131b8:	str	r3, [r5, #8]
   131bc:	bl	15628 <__assert_fail@plt+0x3d94>
   131c0:	cmp	r0, #0
   131c4:	beq	131d4 <__assert_fail@plt+0x1940>
   131c8:	cmp	r5, r0
   131cc:	beq	131dc <__assert_fail@plt+0x1948>
   131d0:	bl	11840 <abort@plt>
   131d4:	mov	r0, r5
   131d8:	bl	12cd8 <__assert_fail@plt+0x1444>
   131dc:	ldr	r0, [sp, #8]
   131e0:	b	13108 <__assert_fail@plt+0x1874>
   131e4:	ldrdeq	r2, [r1], -r8
   131e8:	andeq	r2, r1, r0, lsl #27
   131ec:	muleq	r1, ip, sp
   131f0:	push	{r4, r5, r6, lr}
   131f4:	mov	r5, r1
   131f8:	ldr	r1, [r0, #32]
   131fc:	sub	r3, r1, r5
   13200:	cmn	r1, #100	; 0x64
   13204:	clz	r3, r3
   13208:	lsr	r3, r3, #5
   1320c:	moveq	r3, #0
   13210:	cmp	r3, #0
   13214:	beq	1321c <__assert_fail@plt+0x1988>
   13218:	bl	11840 <abort@plt>
   1321c:	cmp	r2, #0
   13220:	mov	r4, r0
   13224:	beq	13244 <__assert_fail@plt+0x19b0>
   13228:	add	r0, r0, #60	; 0x3c
   1322c:	bl	15824 <__assert_fail@plt+0x3f90>
   13230:	cmp	r0, #0
   13234:	blt	1323c <__assert_fail@plt+0x19a8>
   13238:	bl	1184c <close@plt>
   1323c:	str	r5, [r4, #32]
   13240:	pop	{r4, r5, r6, pc}
   13244:	ldr	r3, [r0, #48]	; 0x30
   13248:	mvn	r2, r1
   1324c:	lsr	r2, r2, #31
   13250:	eor	r3, r3, #4
   13254:	ands	r3, r2, r3, lsr #2
   13258:	beq	1323c <__assert_fail@plt+0x19a8>
   1325c:	mov	r0, r1
   13260:	b	13238 <__assert_fail@plt+0x19a4>
   13264:	ldr	r3, [r0, #48]	; 0x30
   13268:	push	{r4, r5, r6, lr}
   1326c:	mov	r5, r0
   13270:	ands	r4, r3, #4
   13274:	movne	r4, #0
   13278:	bne	13290 <__assert_fail@plt+0x19fc>
   1327c:	tst	r3, #512	; 0x200
   13280:	beq	132a0 <__assert_fail@plt+0x1a0c>
   13284:	mov	r2, #1
   13288:	mvn	r1, #99	; 0x63
   1328c:	bl	131f0 <__assert_fail@plt+0x195c>
   13290:	add	r0, r5, #60	; 0x3c
   13294:	bl	130bc <__assert_fail@plt+0x1828>
   13298:	mov	r0, r4
   1329c:	pop	{r4, r5, r6, pc}
   132a0:	ldr	r0, [r0, #28]
   132a4:	bl	117bc <fchdir@plt>
   132a8:	adds	r4, r0, #0
   132ac:	movne	r4, #1
   132b0:	b	13290 <__assert_fail@plt+0x19fc>
   132b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132b8:	subs	sl, r3, #0
   132bc:	sub	sp, sp, #104	; 0x68
   132c0:	mov	r7, r0
   132c4:	mov	r8, r1
   132c8:	mov	r6, r2
   132cc:	moveq	r9, sl
   132d0:	beq	132e8 <__assert_fail@plt+0x1a54>
   132d4:	ldr	r1, [pc, #368]	; 1344c <__assert_fail@plt+0x1bb8>
   132d8:	mov	r0, sl
   132dc:	bl	114a4 <strcmp@plt>
   132e0:	clz	r9, r0
   132e4:	lsr	r9, r9, #5
   132e8:	ldr	r3, [r7, #48]	; 0x30
   132ec:	ands	r4, r3, #4
   132f0:	beq	1331c <__assert_fail@plt+0x1a88>
   132f4:	mvn	r4, r6
   132f8:	lsr	r4, r4, #31
   132fc:	ands	r4, r4, r3, lsr #9
   13300:	beq	13310 <__assert_fail@plt+0x1a7c>
   13304:	mov	r0, r6
   13308:	mov	r4, #0
   1330c:	bl	1184c <close@plt>
   13310:	mov	r0, r4
   13314:	add	sp, sp, #104	; 0x68
   13318:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1331c:	ands	r2, r9, r6, lsr #31
   13320:	beq	1340c <__assert_fail@plt+0x1b78>
   13324:	tst	r3, #512	; 0x200
   13328:	bne	13348 <__assert_fail@plt+0x1ab4>
   1332c:	mov	r1, sl
   13330:	mov	r0, r7
   13334:	bl	13054 <__assert_fail@plt+0x17c0>
   13338:	subs	r5, r0, #0
   1333c:	bge	13374 <__assert_fail@plt+0x1ae0>
   13340:	mvn	r4, #0
   13344:	b	13310 <__assert_fail@plt+0x1a7c>
   13348:	add	r5, r7, #60	; 0x3c
   1334c:	mov	r0, r5
   13350:	bl	1581c <__assert_fail@plt+0x3f88>
   13354:	cmp	r0, #0
   13358:	bne	1332c <__assert_fail@plt+0x1a98>
   1335c:	mov	r0, r5
   13360:	bl	15868 <__assert_fail@plt+0x3fd4>
   13364:	subs	r5, r0, #0
   13368:	movge	r6, r5
   1336c:	movge	sl, r4
   13370:	blt	1332c <__assert_fail@plt+0x1a98>
   13374:	ldr	r3, [r7, #48]	; 0x30
   13378:	tst	r3, #2
   1337c:	bne	1339c <__assert_fail@plt+0x1b08>
   13380:	cmp	sl, #0
   13384:	beq	1341c <__assert_fail@plt+0x1b88>
   13388:	ldr	r1, [pc, #188]	; 1344c <__assert_fail@plt+0x1bb8>
   1338c:	mov	r0, sl
   13390:	bl	114a4 <strcmp@plt>
   13394:	cmp	r0, #0
   13398:	bne	1341c <__assert_fail@plt+0x1b88>
   1339c:	mov	r1, sp
   133a0:	mov	r0, r5
   133a4:	bl	18914 <lchmod@@Base+0x3064>
   133a8:	cmp	r0, #0
   133ac:	bne	133e4 <__assert_fail@plt+0x1b50>
   133b0:	ldrd	r2, [sp]
   133b4:	ldrd	r0, [r8, #64]	; 0x40
   133b8:	cmp	r1, r3
   133bc:	cmpeq	r0, r2
   133c0:	bne	133d8 <__assert_fail@plt+0x1b44>
   133c4:	ldrd	r2, [sp, #96]	; 0x60
   133c8:	ldrd	r0, [r8, #160]	; 0xa0
   133cc:	cmp	r1, r3
   133d0:	cmpeq	r0, r2
   133d4:	beq	1341c <__assert_fail@plt+0x1b88>
   133d8:	bl	116e4 <__errno_location@plt>
   133dc:	mov	r3, #2
   133e0:	str	r3, [r0]
   133e4:	mvn	r4, #0
   133e8:	cmp	r6, #0
   133ec:	bge	13310 <__assert_fail@plt+0x1a7c>
   133f0:	bl	116e4 <__errno_location@plt>
   133f4:	mov	r6, r0
   133f8:	mov	r0, r5
   133fc:	ldr	r7, [r6]
   13400:	bl	1184c <close@plt>
   13404:	str	r7, [r6]
   13408:	b	13310 <__assert_fail@plt+0x1a7c>
   1340c:	cmp	r6, #0
   13410:	movge	r5, r6
   13414:	bge	13374 <__assert_fail@plt+0x1ae0>
   13418:	b	1332c <__assert_fail@plt+0x1a98>
   1341c:	ldr	r3, [r7, #48]	; 0x30
   13420:	tst	r3, #512	; 0x200
   13424:	beq	1343c <__assert_fail@plt+0x1ba8>
   13428:	eor	r2, r9, #1
   1342c:	mov	r1, r5
   13430:	mov	r0, r7
   13434:	bl	131f0 <__assert_fail@plt+0x195c>
   13438:	b	13310 <__assert_fail@plt+0x1a7c>
   1343c:	mov	r0, r5
   13440:	bl	117bc <fchdir@plt>
   13444:	mov	r4, r0
   13448:	b	133e8 <__assert_fail@plt+0x1b54>
   1344c:	andeq	r8, r1, r2, lsl #30
   13450:	ldr	r3, [r0, #36]	; 0x24
   13454:	add	r1, r1, #256	; 0x100
   13458:	push	{r4, r5, r6, lr}
   1345c:	mov	r5, r0
   13460:	ldr	r0, [r0, #24]
   13464:	adds	r1, r3, r1
   13468:	bcc	1348c <__assert_fail@plt+0x1bf8>
   1346c:	mov	r4, #0
   13470:	bl	12cd8 <__assert_fail@plt+0x1444>
   13474:	str	r4, [r5, #24]
   13478:	bl	116e4 <__errno_location@plt>
   1347c:	mov	r3, #36	; 0x24
   13480:	str	r3, [r0]
   13484:	mov	r0, r4
   13488:	pop	{r4, r5, r6, pc}
   1348c:	str	r1, [r5, #36]	; 0x24
   13490:	bl	17fb0 <lchmod@@Base+0x2700>
   13494:	subs	r4, r0, #0
   13498:	bne	134ac <__assert_fail@plt+0x1c18>
   1349c:	ldr	r0, [r5, #24]
   134a0:	bl	12cd8 <__assert_fail@plt+0x1444>
   134a4:	str	r4, [r5, #24]
   134a8:	b	13484 <__assert_fail@plt+0x1bf0>
   134ac:	mov	r0, #1
   134b0:	str	r4, [r5, #24]
   134b4:	pop	{r4, r5, r6, pc}
   134b8:	ldr	r3, [r0, #48]	; 0x30
   134bc:	movw	r2, #258	; 0x102
   134c0:	push	{r0, r1, r4, lr}
   134c4:	mov	r4, r0
   134c8:	tst	r2, r3
   134cc:	beq	13500 <__assert_fail@plt+0x1c6c>
   134d0:	ldr	r3, [pc, #72]	; 13520 <__assert_fail@plt+0x1c8c>
   134d4:	mov	r1, #0
   134d8:	mov	r0, #31
   134dc:	ldr	r2, [pc, #64]	; 13524 <__assert_fail@plt+0x1c90>
   134e0:	str	r3, [sp]
   134e4:	ldr	r3, [pc, #60]	; 13528 <__assert_fail@plt+0x1c94>
   134e8:	bl	15160 <__assert_fail@plt+0x38cc>
   134ec:	str	r0, [r4, #56]	; 0x38
   134f0:	adds	r0, r0, #0
   134f4:	movne	r0, #1
   134f8:	add	sp, sp, #8
   134fc:	pop	{r4, pc}
   13500:	mov	r0, #32
   13504:	bl	17f84 <lchmod@@Base+0x26d4>
   13508:	cmp	r0, #0
   1350c:	str	r0, [r4, #56]	; 0x38
   13510:	beq	134f8 <__assert_fail@plt+0x1c64>
   13514:	bl	180e8 <lchmod@@Base+0x2838>
   13518:	mov	r0, #1
   1351c:	b	134f8 <__assert_fail@plt+0x1c64>
   13520:	ldrdeq	r2, [r1], -r8
   13524:	andeq	r2, r1, r4, ror #26
   13528:	andeq	r2, r1, r8, lsr #26
   1352c:	mov	r3, r0
   13530:	movw	r2, #258	; 0x102
   13534:	ldr	r0, [r0, #56]	; 0x38
   13538:	ldr	r3, [r3, #48]	; 0x30
   1353c:	tst	r2, r3
   13540:	beq	13550 <__assert_fail@plt+0x1cbc>
   13544:	cmp	r0, #0
   13548:	bxeq	lr
   1354c:	b	152c8 <__assert_fail@plt+0x3a34>
   13550:	b	12cd8 <__assert_fail@plt+0x1444>
   13554:	ldr	r3, [r0, #48]	; 0x30
   13558:	movw	r2, #258	; 0x102
   1355c:	push	{r4, r5, r6, lr}
   13560:	mov	r6, r0
   13564:	mov	r4, r1
   13568:	tst	r2, r3
   1356c:	beq	135e0 <__assert_fail@plt+0x1d4c>
   13570:	mov	r0, #24
   13574:	bl	17f84 <lchmod@@Base+0x26d4>
   13578:	subs	r5, r0, #0
   1357c:	bne	13588 <__assert_fail@plt+0x1cf4>
   13580:	mov	r0, #0
   13584:	pop	{r4, r5, r6, pc}
   13588:	ldrd	r2, [r4, #64]	; 0x40
   1358c:	mov	r1, r5
   13590:	ldr	r0, [r6, #56]	; 0x38
   13594:	strd	r2, [r5]
   13598:	ldrd	r2, [r4, #160]	; 0xa0
   1359c:	str	r4, [r5, #16]
   135a0:	strd	r2, [r5, #8]
   135a4:	bl	15628 <__assert_fail@plt+0x3d94>
   135a8:	cmp	r5, r0
   135ac:	mov	r6, r0
   135b0:	bne	135bc <__assert_fail@plt+0x1d28>
   135b4:	mov	r0, #1
   135b8:	pop	{r4, r5, r6, pc}
   135bc:	mov	r0, r5
   135c0:	bl	12cd8 <__assert_fail@plt+0x1444>
   135c4:	cmp	r6, #0
   135c8:	beq	13580 <__assert_fail@plt+0x1cec>
   135cc:	ldr	r3, [r6, #16]
   135d0:	str	r3, [r4]
   135d4:	mov	r3, #2
   135d8:	strh	r3, [r4, #56]	; 0x38
   135dc:	b	135b4 <__assert_fail@plt+0x1d20>
   135e0:	add	r1, r1, #64	; 0x40
   135e4:	ldr	r0, [r0, #56]	; 0x38
   135e8:	bl	18104 <lchmod@@Base+0x2854>
   135ec:	cmp	r0, #0
   135f0:	beq	135b4 <__assert_fail@plt+0x1d20>
   135f4:	mov	r3, #2
   135f8:	str	r4, [r4]
   135fc:	strh	r3, [r4, #56]	; 0x38
   13600:	pop	{r4, r5, r6, pc}
   13604:	ldr	r3, [r0, #48]	; 0x30
   13608:	mov	r2, r1
   1360c:	movw	r1, #258	; 0x102
   13610:	push	{r4, r5, lr}
   13614:	sub	sp, sp, #28
   13618:	tst	r1, r3
   1361c:	beq	13654 <__assert_fail@plt+0x1dc0>
   13620:	ldrd	r4, [r2, #64]	; 0x40
   13624:	mov	r1, sp
   13628:	ldrd	r2, [r2, #160]	; 0xa0
   1362c:	ldr	r0, [r0, #56]	; 0x38
   13630:	strd	r4, [sp]
   13634:	strd	r2, [sp, #8]
   13638:	bl	15658 <__assert_fail@plt+0x3dc4>
   1363c:	cmp	r0, #0
   13640:	bne	13648 <__assert_fail@plt+0x1db4>
   13644:	bl	11840 <abort@plt>
   13648:	bl	12cd8 <__assert_fail@plt+0x1444>
   1364c:	add	sp, sp, #28
   13650:	pop	{r4, r5, pc}
   13654:	ldr	ip, [r2, #4]
   13658:	cmp	ip, #0
   1365c:	beq	1364c <__assert_fail@plt+0x1db8>
   13660:	ldr	r3, [ip, #48]	; 0x30
   13664:	cmp	r3, #0
   13668:	blt	1364c <__assert_fail@plt+0x1db8>
   1366c:	ldr	r3, [r0, #56]	; 0x38
   13670:	ldrd	r0, [r3, #16]
   13674:	orrs	r1, r0, r1
   13678:	beq	13644 <__assert_fail@plt+0x1db0>
   1367c:	ldrd	r4, [r3]
   13680:	ldrd	r0, [r2, #160]	; 0xa0
   13684:	cmp	r5, r1
   13688:	cmpeq	r4, r0
   1368c:	bne	1364c <__assert_fail@plt+0x1db8>
   13690:	ldrd	r0, [r3, #8]
   13694:	ldrd	r4, [r2, #64]	; 0x40
   13698:	cmp	r1, r5
   1369c:	cmpeq	r0, r4
   136a0:	ldrdeq	r0, [ip, #64]	; 0x40
   136a4:	strdeq	r0, [r3, #8]
   136a8:	ldrdeq	r0, [ip, #160]	; 0xa0
   136ac:	strdeq	r0, [r3]
   136b0:	b	1364c <__assert_fail@plt+0x1db8>
   136b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136b8:	sub	sp, sp, #60	; 0x3c
   136bc:	mov	r4, r0
   136c0:	ldr	r5, [r0]
   136c4:	str	r1, [sp, #8]
   136c8:	ldr	r3, [r5, #12]
   136cc:	cmp	r3, #0
   136d0:	str	r3, [sp]
   136d4:	beq	13728 <__assert_fail@plt+0x1e94>
   136d8:	mov	r0, r3
   136dc:	bl	117b0 <dirfd@plt>
   136e0:	cmp	r0, #0
   136e4:	str	r0, [sp, #52]	; 0x34
   136e8:	bge	13798 <__assert_fail@plt+0x1f04>
   136ec:	mov	r6, #0
   136f0:	ldr	r0, [r5, #12]
   136f4:	bl	1187c <closedir@plt>
   136f8:	str	r6, [r5, #12]
   136fc:	ldr	r3, [sp, #8]
   13700:	cmp	r3, #3
   13704:	bne	13920 <__assert_fail@plt+0x208c>
   13708:	mov	r3, #4
   1370c:	strh	r3, [r5, #56]	; 0x38
   13710:	bl	116e4 <__errno_location@plt>
   13714:	ldr	r3, [r0]
   13718:	str	r3, [r5, #32]
   1371c:	mov	r0, r6
   13720:	add	sp, sp, #60	; 0x3c
   13724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13728:	ldr	r3, [r0, #48]	; 0x30
   1372c:	ldr	r1, [r5, #24]
   13730:	and	r2, r3, #516	; 0x204
   13734:	cmp	r2, #512	; 0x200
   13738:	ldreq	r0, [r0, #32]
   1373c:	mvnne	r0, #99	; 0x63
   13740:	ands	r2, r3, #16
   13744:	beq	13760 <__assert_fail@plt+0x1ecc>
   13748:	tst	r3, #1
   1374c:	moveq	r2, #32768	; 0x8000
   13750:	beq	13760 <__assert_fail@plt+0x1ecc>
   13754:	ldr	r2, [r5, #48]	; 0x30
   13758:	cmp	r2, #0
   1375c:	movne	r2, #32768	; 0x8000
   13760:	add	r3, sp, #52	; 0x34
   13764:	bl	15e1c <lchmod@@Base+0x56c>
   13768:	cmp	r0, #0
   1376c:	mov	r6, r0
   13770:	str	r0, [r5, #12]
   13774:	beq	136fc <__assert_fail@plt+0x1e68>
   13778:	ldrh	r3, [r5, #56]	; 0x38
   1377c:	cmp	r3, #11
   13780:	bne	13928 <__assert_fail@plt+0x2094>
   13784:	mov	r2, #0
   13788:	mov	r1, r5
   1378c:	mov	r0, r4
   13790:	bl	12df0 <__assert_fail@plt+0x155c>
   13794:	strh	r0, [r5, #56]	; 0x38
   13798:	ldr	r3, [r4, #44]	; 0x2c
   1379c:	cmp	r3, #0
   137a0:	ldr	r3, [pc, #1812]	; 13ebc <__assert_fail@plt+0x2628>
   137a4:	mvnne	r3, #0
   137a8:	str	r3, [sp, #36]	; 0x24
   137ac:	ldr	r3, [sp]
   137b0:	cmp	r3, #0
   137b4:	beq	13974 <__assert_fail@plt+0x20e0>
   137b8:	mov	r3, #1
   137bc:	str	r3, [sp, #24]
   137c0:	ldr	r2, [r5, #28]
   137c4:	mov	r8, #0
   137c8:	mov	r9, r8
   137cc:	mov	r6, r8
   137d0:	ldr	r3, [r5, #40]	; 0x28
   137d4:	str	r8, [sp, #20]
   137d8:	str	r8, [sp, #32]
   137dc:	sub	fp, r3, #1
   137e0:	ldrb	r2, [r2, fp]
   137e4:	cmp	r2, #47	; 0x2f
   137e8:	movne	fp, r3
   137ec:	ldr	r3, [r4, #48]	; 0x30
   137f0:	ands	r3, r3, #4
   137f4:	ldrne	r3, [r4, #24]
   137f8:	streq	r3, [sp, #4]
   137fc:	addne	r2, r3, fp
   13800:	addne	r2, r2, #1
   13804:	strne	r2, [sp, #4]
   13808:	movne	r2, #47	; 0x2f
   1380c:	strbne	r2, [r3, fp]
   13810:	add	r3, fp, #1
   13814:	add	r2, fp, #1
   13818:	str	r3, [sp, #16]
   1381c:	ldr	r3, [r4, #36]	; 0x24
   13820:	sub	r3, r3, r2
   13824:	str	r3, [sp, #28]
   13828:	ldr	r3, [r5, #48]	; 0x30
   1382c:	add	r3, r3, #1
   13830:	str	r3, [sp, #40]	; 0x28
   13834:	ldr	r7, [r5, #12]
   13838:	cmp	r7, #0
   1383c:	beq	13888 <__assert_fail@plt+0x1ff4>
   13840:	bl	116e4 <__errno_location@plt>
   13844:	mov	r3, #0
   13848:	str	r0, [sp, #12]
   1384c:	str	r3, [r0]
   13850:	mov	r0, r7
   13854:	bl	1178c <readdir64@plt>
   13858:	subs	r3, r0, #0
   1385c:	bne	13ab8 <__assert_fail@plt+0x2224>
   13860:	ldr	r3, [sp, #12]
   13864:	ldr	r3, [r3]
   13868:	cmp	r3, #0
   1386c:	beq	13888 <__assert_fail@plt+0x1ff4>
   13870:	str	r3, [r5, #32]
   13874:	ldr	r3, [sp]
   13878:	orrs	r3, r3, r9
   1387c:	moveq	r3, #4
   13880:	movne	r3, #7
   13884:	strh	r3, [r5, #56]	; 0x38
   13888:	ldr	r0, [r5, #12]
   1388c:	cmp	r0, #0
   13890:	beq	138a0 <__assert_fail@plt+0x200c>
   13894:	bl	1187c <closedir@plt>
   13898:	mov	r3, #0
   1389c:	str	r3, [r5, #12]
   138a0:	ldr	r3, [sp, #20]
   138a4:	cmp	r3, #0
   138a8:	bne	13d78 <__assert_fail@plt+0x24e4>
   138ac:	ldr	r3, [r4, #48]	; 0x30
   138b0:	tst	r3, #4
   138b4:	bne	13df4 <__assert_fail@plt+0x2560>
   138b8:	ldr	r2, [sp]
   138bc:	ldr	r3, [sp, #24]
   138c0:	cmp	r2, #0
   138c4:	movne	r3, #0
   138c8:	cmp	r3, #0
   138cc:	beq	13e38 <__assert_fail@plt+0x25a4>
   138d0:	ldr	r3, [sp, #8]
   138d4:	cmp	r9, #0
   138d8:	cmpne	r3, #1
   138dc:	bne	13e64 <__assert_fail@plt+0x25d0>
   138e0:	ldr	r3, [r5, #48]	; 0x30
   138e4:	cmp	r3, #0
   138e8:	bne	13e20 <__assert_fail@plt+0x258c>
   138ec:	mov	r0, r4
   138f0:	bl	13264 <__assert_fail@plt+0x19d0>
   138f4:	adds	r0, r0, #0
   138f8:	movne	r0, #1
   138fc:	cmp	r0, #0
   13900:	beq	13e38 <__assert_fail@plt+0x25a4>
   13904:	mov	r3, #7
   13908:	strh	r3, [r5, #56]	; 0x38
   1390c:	ldr	r3, [r4, #48]	; 0x30
   13910:	orr	r3, r3, #8192	; 0x2000
   13914:	str	r3, [r4, #48]	; 0x30
   13918:	mov	r0, r6
   1391c:	bl	13088 <__assert_fail@plt+0x17f4>
   13920:	mov	r6, #0
   13924:	b	1371c <__assert_fail@plt+0x1e88>
   13928:	ldr	r3, [r4, #48]	; 0x30
   1392c:	tst	r3, #256	; 0x100
   13930:	beq	13798 <__assert_fail@plt+0x1f04>
   13934:	mov	r1, r5
   13938:	mov	r0, r4
   1393c:	bl	13604 <__assert_fail@plt+0x1d70>
   13940:	mov	r2, #0
   13944:	mov	r1, r5
   13948:	mov	r0, r4
   1394c:	bl	12df0 <__assert_fail@plt+0x155c>
   13950:	mov	r1, r5
   13954:	mov	r0, r4
   13958:	bl	13554 <__assert_fail@plt+0x1cc0>
   1395c:	subs	r6, r0, #0
   13960:	bne	13798 <__assert_fail@plt+0x1f04>
   13964:	bl	116e4 <__errno_location@plt>
   13968:	mov	r3, #12
   1396c:	str	r3, [r0]
   13970:	b	1371c <__assert_fail@plt+0x1e88>
   13974:	ldr	r3, [sp, #8]
   13978:	cmp	r3, #2
   1397c:	ldreq	r0, [sp]
   13980:	beq	139f4 <__assert_fail@plt+0x2160>
   13984:	ldr	r3, [r4, #48]	; 0x30
   13988:	and	r3, r3, #56	; 0x38
   1398c:	cmp	r3, #24
   13990:	bne	139d0 <__assert_fail@plt+0x213c>
   13994:	ldr	r3, [r5, #84]	; 0x54
   13998:	cmp	r3, #2
   1399c:	bne	139d0 <__assert_fail@plt+0x213c>
   139a0:	mov	r0, r5
   139a4:	ldr	r1, [sp, #52]	; 0x34
   139a8:	bl	130ec <__assert_fail@plt+0x1858>
   139ac:	movw	r3, #26985	; 0x6969
   139b0:	cmp	r0, r3
   139b4:	beq	139d0 <__assert_fail@plt+0x213c>
   139b8:	bgt	139d8 <__assert_fail@plt+0x2144>
   139bc:	ldr	r3, [pc, #1276]	; 13ec0 <__assert_fail@plt+0x262c>
   139c0:	cmp	r0, r3
   139c4:	clzne	r0, r0
   139c8:	lsrne	r0, r0, #5
   139cc:	bne	139f4 <__assert_fail@plt+0x2160>
   139d0:	mov	r0, #1
   139d4:	b	139f4 <__assert_fail@plt+0x2160>
   139d8:	movw	r3, #40864	; 0x9fa0
   139dc:	cmp	r0, r3
   139e0:	beq	139d0 <__assert_fail@plt+0x213c>
   139e4:	ldr	r3, [pc, #1240]	; 13ec4 <__assert_fail@plt+0x2630>
   139e8:	sub	r0, r0, r3
   139ec:	clz	r0, r0
   139f0:	lsr	r0, r0, #5
   139f4:	ldr	r3, [sp, #8]
   139f8:	mov	r6, r0
   139fc:	sub	r7, r3, #3
   13a00:	clz	r7, r7
   13a04:	lsr	r7, r7, #5
   13a08:	orrs	r3, r7, r0
   13a0c:	str	r3, [sp, #24]
   13a10:	beq	137c0 <__assert_fail@plt+0x1f2c>
   13a14:	ldr	r3, [r4, #48]	; 0x30
   13a18:	tst	r3, #512	; 0x200
   13a1c:	beq	13a34 <__assert_fail@plt+0x21a0>
   13a20:	mov	r2, #3
   13a24:	movw	r1, #1030	; 0x406
   13a28:	ldr	r0, [sp, #52]	; 0x34
   13a2c:	bl	1825c <lchmod@@Base+0x29ac>
   13a30:	str	r0, [sp, #52]	; 0x34
   13a34:	ldr	r2, [sp, #52]	; 0x34
   13a38:	cmp	r2, #0
   13a3c:	bge	13a8c <__assert_fail@plt+0x21f8>
   13a40:	tst	r7, r6
   13a44:	bne	13aa8 <__assert_fail@plt+0x2214>
   13a48:	ldrh	r3, [r5, #58]	; 0x3a
   13a4c:	ldr	r0, [r5, #12]
   13a50:	orr	r3, r3, #1
   13a54:	strh	r3, [r5, #58]	; 0x3a
   13a58:	bl	1187c <closedir@plt>
   13a5c:	mov	r3, #0
   13a60:	str	r3, [r5, #12]
   13a64:	ldr	r3, [r4, #48]	; 0x30
   13a68:	tst	r3, #512	; 0x200
   13a6c:	beq	13a80 <__assert_fail@plt+0x21ec>
   13a70:	ldr	r0, [sp, #52]	; 0x34
   13a74:	cmp	r0, #0
   13a78:	blt	13a80 <__assert_fail@plt+0x21ec>
   13a7c:	bl	1184c <close@plt>
   13a80:	mov	r3, #0
   13a84:	str	r3, [r5, #12]
   13a88:	b	137bc <__assert_fail@plt+0x1f28>
   13a8c:	mov	r3, #0
   13a90:	mov	r1, r5
   13a94:	mov	r0, r4
   13a98:	bl	132b4 <__assert_fail@plt+0x1a20>
   13a9c:	cmp	r0, #0
   13aa0:	bne	13a40 <__assert_fail@plt+0x21ac>
   13aa4:	b	137b8 <__assert_fail@plt+0x1f24>
   13aa8:	bl	116e4 <__errno_location@plt>
   13aac:	ldr	r3, [r0]
   13ab0:	str	r3, [r5, #32]
   13ab4:	b	13a48 <__assert_fail@plt+0x21b4>
   13ab8:	ldr	r2, [r4, #48]	; 0x30
   13abc:	tst	r2, #32
   13ac0:	bne	13ae8 <__assert_fail@plt+0x2254>
   13ac4:	ldrb	r2, [r3, #19]
   13ac8:	cmp	r2, #46	; 0x2e
   13acc:	bne	13ae8 <__assert_fail@plt+0x2254>
   13ad0:	ldrb	r2, [r3, #20]
   13ad4:	cmp	r2, #0
   13ad8:	beq	13834 <__assert_fail@plt+0x1fa0>
   13adc:	ldrh	r2, [r3, #20]
   13ae0:	cmp	r2, #46	; 0x2e
   13ae4:	beq	13834 <__assert_fail@plt+0x1fa0>
   13ae8:	add	r7, r3, #19
   13aec:	str	r3, [sp, #44]	; 0x2c
   13af0:	mov	r0, r7
   13af4:	bl	116b4 <strlen@plt>
   13af8:	mov	r2, r0
   13afc:	mov	r1, r7
   13b00:	mov	sl, r0
   13b04:	mov	r0, r4
   13b08:	bl	12fe0 <__assert_fail@plt+0x174c>
   13b0c:	subs	r7, r0, #0
   13b10:	beq	13b4c <__assert_fail@plt+0x22b8>
   13b14:	ldr	r3, [sp, #28]
   13b18:	cmp	r3, sl
   13b1c:	ldr	r3, [sp, #44]	; 0x2c
   13b20:	bhi	13bcc <__assert_fail@plt+0x2338>
   13b24:	ldr	r2, [r4, #24]
   13b28:	add	r1, fp, #2
   13b2c:	mov	r0, r4
   13b30:	add	r1, r1, sl
   13b34:	str	r2, [sp, #28]
   13b38:	bl	13450 <__assert_fail@plt+0x1bbc>
   13b3c:	cmp	r0, #0
   13b40:	ldr	r2, [sp, #28]
   13b44:	ldr	r3, [sp, #44]	; 0x2c
   13b48:	bne	13b94 <__assert_fail@plt+0x2300>
   13b4c:	ldr	r3, [sp, #12]
   13b50:	mov	r0, r7
   13b54:	ldr	r8, [r3]
   13b58:	bl	12cd8 <__assert_fail@plt+0x1444>
   13b5c:	mov	r0, r6
   13b60:	mov	r6, #0
   13b64:	bl	13088 <__assert_fail@plt+0x17f4>
   13b68:	ldr	r0, [r5, #12]
   13b6c:	bl	1187c <closedir@plt>
   13b70:	mov	r3, #7
   13b74:	str	r6, [r5, #12]
   13b78:	strh	r3, [r5, #56]	; 0x38
   13b7c:	ldr	r3, [r4, #48]	; 0x30
   13b80:	orr	r3, r3, #8192	; 0x2000
   13b84:	str	r3, [r4, #48]	; 0x30
   13b88:	ldr	r3, [sp, #12]
   13b8c:	str	r8, [r3]
   13b90:	b	1371c <__assert_fail@plt+0x1e88>
   13b94:	ldr	r1, [r4, #24]
   13b98:	cmp	r1, r2
   13b9c:	ldreq	r0, [sp, #20]
   13ba0:	beq	13bb8 <__assert_fail@plt+0x2324>
   13ba4:	ldr	r2, [r4, #48]	; 0x30
   13ba8:	tst	r2, #4
   13bac:	ldrne	r2, [sp, #16]
   13bb0:	addne	r2, r1, r2
   13bb4:	strne	r2, [sp, #4]
   13bb8:	ldr	r1, [sp, #16]
   13bbc:	str	r0, [sp, #20]
   13bc0:	ldr	r2, [r4, #36]	; 0x24
   13bc4:	sub	r2, r2, r1
   13bc8:	str	r2, [sp, #28]
   13bcc:	ldr	r2, [sp, #16]
   13bd0:	adds	r2, r2, sl
   13bd4:	movcs	sl, #1
   13bd8:	movcc	sl, #0
   13bdc:	bcc	13c24 <__assert_fail@plt+0x2390>
   13be0:	mov	r0, r7
   13be4:	bl	12cd8 <__assert_fail@plt+0x1444>
   13be8:	mov	r0, r6
   13bec:	mov	r6, #0
   13bf0:	bl	13088 <__assert_fail@plt+0x17f4>
   13bf4:	ldr	r0, [r5, #12]
   13bf8:	bl	1187c <closedir@plt>
   13bfc:	mov	r3, #7
   13c00:	ldr	r2, [sp, #12]
   13c04:	str	r6, [r5, #12]
   13c08:	strh	r3, [r5, #56]	; 0x38
   13c0c:	ldr	r3, [r4, #48]	; 0x30
   13c10:	orr	r3, r3, #8192	; 0x2000
   13c14:	str	r3, [r4, #48]	; 0x30
   13c18:	mov	r3, #36	; 0x24
   13c1c:	str	r3, [r2]
   13c20:	b	1371c <__assert_fail@plt+0x1e88>
   13c24:	ldr	r1, [sp, #40]	; 0x28
   13c28:	str	r1, [r7, #48]	; 0x30
   13c2c:	ldr	r1, [r4]
   13c30:	str	r1, [r7, #4]
   13c34:	str	r2, [r7, #40]	; 0x28
   13c38:	ldrd	r0, [r3]
   13c3c:	ldr	r2, [r4, #48]	; 0x30
   13c40:	strd	r0, [r7, #160]	; 0xa0
   13c44:	add	r1, r7, #168	; 0xa8
   13c48:	tst	r2, #4
   13c4c:	streq	r1, [r7, #24]
   13c50:	beq	13c74 <__assert_fail@plt+0x23e0>
   13c54:	ldr	r2, [r7, #28]
   13c58:	str	r3, [sp, #12]
   13c5c:	ldr	r0, [sp, #4]
   13c60:	str	r2, [r7, #24]
   13c64:	ldr	r2, [r7, #52]	; 0x34
   13c68:	add	r2, r2, #1
   13c6c:	bl	114d4 <memmove@plt>
   13c70:	ldr	r3, [sp, #12]
   13c74:	ldr	r2, [r4, #44]	; 0x2c
   13c78:	ldr	r1, [r4, #48]	; 0x30
   13c7c:	cmp	r2, #0
   13c80:	beq	13c8c <__assert_fail@plt+0x23f8>
   13c84:	ands	r2, r1, #1024	; 0x400
   13c88:	beq	13d5c <__assert_fail@plt+0x24c8>
   13c8c:	ands	r2, r1, #8
   13c90:	ldrb	r3, [r3, #18]
   13c94:	beq	13cb0 <__assert_fail@plt+0x241c>
   13c98:	ands	r2, r3, #251	; 0xfb
   13c9c:	beq	13cb0 <__assert_fail@plt+0x241c>
   13ca0:	ubfx	r1, r1, #4, #1
   13ca4:	cmp	r3, #10
   13ca8:	moveq	r2, r1
   13cac:	orrne	r2, r1, #1
   13cb0:	mov	r1, #11
   13cb4:	sub	r3, r3, #1
   13cb8:	cmp	r3, r1
   13cbc:	strh	r1, [r7, #56]	; 0x38
   13cc0:	lslls	r3, r3, #1
   13cc4:	ldrls	r1, [pc, #508]	; 13ec8 <__assert_fail@plt+0x2634>
   13cc8:	ldrhls	sl, [r1, r3]
   13ccc:	cmp	r2, #0
   13cd0:	mov	r3, #0
   13cd4:	movne	r2, #1
   13cd8:	moveq	r2, #2
   13cdc:	str	sl, [r7, #80]	; 0x50
   13ce0:	strd	r2, [r7, #112]	; 0x70
   13ce4:	mov	r3, #0
   13ce8:	cmp	r6, r3
   13cec:	str	r3, [r7, #8]
   13cf0:	moveq	r6, r7
   13cf4:	ldrne	r3, [sp, #32]
   13cf8:	strne	r7, [r3, #8]
   13cfc:	movw	r3, #10000	; 0x2710
   13d00:	cmp	r9, r3
   13d04:	bne	13d44 <__assert_fail@plt+0x24b0>
   13d08:	ldr	sl, [r4, #44]	; 0x2c
   13d0c:	cmp	sl, #0
   13d10:	bne	13d44 <__assert_fail@plt+0x24b0>
   13d14:	mov	r0, r5
   13d18:	ldr	r1, [sp, #52]	; 0x34
   13d1c:	bl	130ec <__assert_fail@plt+0x1858>
   13d20:	movw	r3, #26985	; 0x6969
   13d24:	cmp	r0, r3
   13d28:	beq	13d70 <__assert_fail@plt+0x24dc>
   13d2c:	ldr	r3, [pc, #408]	; 13ecc <__assert_fail@plt+0x2638>
   13d30:	cmp	r0, r3
   13d34:	beq	13d70 <__assert_fail@plt+0x24dc>
   13d38:	ldr	r3, [pc, #384]	; 13ec0 <__assert_fail@plt+0x262c>
   13d3c:	subs	r8, r0, r3
   13d40:	movne	r8, #1
   13d44:	ldr	r3, [sp, #36]	; 0x24
   13d48:	add	r9, r9, #1
   13d4c:	cmp	r3, r9
   13d50:	bls	138a0 <__assert_fail@plt+0x200c>
   13d54:	str	r7, [sp, #32]
   13d58:	b	13834 <__assert_fail@plt+0x1fa0>
   13d5c:	mov	r1, r7
   13d60:	mov	r0, r4
   13d64:	bl	12df0 <__assert_fail@plt+0x155c>
   13d68:	strh	r0, [r7, #56]	; 0x38
   13d6c:	b	13ce4 <__assert_fail@plt+0x2450>
   13d70:	mov	r8, sl
   13d74:	b	13d44 <__assert_fail@plt+0x24b0>
   13d78:	ldr	r3, [r4, #4]
   13d7c:	ldr	r1, [r4, #24]
   13d80:	cmp	r3, #0
   13d84:	bne	13dcc <__assert_fail@plt+0x2538>
   13d88:	mov	r3, r6
   13d8c:	ldr	r2, [r3, #48]	; 0x30
   13d90:	cmp	r2, #0
   13d94:	blt	138ac <__assert_fail@plt+0x2018>
   13d98:	ldr	r2, [r3, #24]
   13d9c:	add	r0, r3, #168	; 0xa8
   13da0:	cmp	r2, r0
   13da4:	ldrne	r0, [r3, #28]
   13da8:	str	r1, [r3, #28]
   13dac:	subne	r2, r2, r0
   13db0:	addne	r2, r1, r2
   13db4:	strne	r2, [r3, #24]
   13db8:	ldr	r2, [r3, #8]
   13dbc:	cmp	r2, #0
   13dc0:	ldreq	r2, [r3, #4]
   13dc4:	mov	r3, r2
   13dc8:	b	13d8c <__assert_fail@plt+0x24f8>
   13dcc:	ldr	r2, [r3, #24]
   13dd0:	add	r0, r3, #168	; 0xa8
   13dd4:	cmp	r2, r0
   13dd8:	ldrne	r0, [r3, #28]
   13ddc:	str	r1, [r3, #28]
   13de0:	subne	r2, r2, r0
   13de4:	addne	r2, r1, r2
   13de8:	strne	r2, [r3, #24]
   13dec:	ldr	r3, [r3, #8]
   13df0:	b	13d80 <__assert_fail@plt+0x24ec>
   13df4:	ldr	r2, [sp, #16]
   13df8:	ldr	r3, [r4, #36]	; 0x24
   13dfc:	cmp	r9, #0
   13e00:	cmpne	r3, r2
   13e04:	ldreq	r3, [sp, #4]
   13e08:	subeq	r3, r3, #1
   13e0c:	streq	r3, [sp, #4]
   13e10:	mov	r3, #0
   13e14:	ldr	r2, [sp, #4]
   13e18:	strb	r3, [r2]
   13e1c:	b	138b8 <__assert_fail@plt+0x2024>
   13e20:	ldr	r3, [pc, #168]	; 13ed0 <__assert_fail@plt+0x263c>
   13e24:	mvn	r2, #0
   13e28:	mov	r0, r4
   13e2c:	ldr	r1, [r5, #4]
   13e30:	bl	132b4 <__assert_fail@plt+0x1a20>
   13e34:	b	138f4 <__assert_fail@plt+0x2060>
   13e38:	cmp	r9, #0
   13e3c:	bne	13e64 <__assert_fail@plt+0x25d0>
   13e40:	ldr	r3, [sp, #8]
   13e44:	cmp	r3, #3
   13e48:	bne	13918 <__assert_fail@plt+0x2084>
   13e4c:	ldrh	r3, [r5, #56]	; 0x38
   13e50:	cmp	r3, #4
   13e54:	cmpne	r3, #7
   13e58:	movne	r3, #6
   13e5c:	strhne	r3, [r5, #56]	; 0x38
   13e60:	b	13918 <__assert_fail@plt+0x2084>
   13e64:	cmp	r8, #0
   13e68:	beq	13e94 <__assert_fail@plt+0x2600>
   13e6c:	ldr	r3, [pc, #96]	; 13ed4 <__assert_fail@plt+0x2640>
   13e70:	mov	r1, r6
   13e74:	mov	r2, r9
   13e78:	mov	r0, r4
   13e7c:	str	r3, [r4, #44]	; 0x2c
   13e80:	bl	12f28 <__assert_fail@plt+0x1694>
   13e84:	mov	r3, #0
   13e88:	mov	r6, r0
   13e8c:	str	r3, [r4, #44]	; 0x2c
   13e90:	b	1371c <__assert_fail@plt+0x1e88>
   13e94:	ldr	r3, [r4, #44]	; 0x2c
   13e98:	cmp	r3, #0
   13e9c:	cmpne	r9, #1
   13ea0:	beq	1371c <__assert_fail@plt+0x1e88>
   13ea4:	mov	r1, r6
   13ea8:	mov	r2, r9
   13eac:	mov	r0, r4
   13eb0:	bl	12f28 <__assert_fail@plt+0x1694>
   13eb4:	mov	r6, r0
   13eb8:	b	1371c <__assert_fail@plt+0x1e88>
   13ebc:	andeq	r8, r1, r0, lsr #13
   13ec0:			; <UNDEFINED> instruction: 0xff534d42
   13ec4:	movtpl	r4, #24911	; 0x614f
   13ec8:	andeq	r8, r1, sl, ror #29
   13ecc:			; <UNDEFINED> instruction: 0x01021994
   13ed0:	andeq	r8, r1, r2, lsl #30
   13ed4:			; <UNDEFINED> instruction: 0x00012dbc
   13ed8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13edc:	bic	r4, r1, #4080	; 0xff0
   13ee0:	bic	r4, r4, #15
   13ee4:	cmp	r4, #0
   13ee8:	str	r0, [sp]
   13eec:	beq	13f04 <__assert_fail@plt+0x2670>
   13ef0:	bl	116e4 <__errno_location@plt>
   13ef4:	mov	r3, #22
   13ef8:	str	r3, [r0]
   13efc:	mov	r4, #0
   13f00:	b	13f20 <__assert_fail@plt+0x268c>
   13f04:	and	r3, r1, #516	; 0x204
   13f08:	mov	r6, r1
   13f0c:	cmp	r3, #516	; 0x204
   13f10:	bne	13f2c <__assert_fail@plt+0x2698>
   13f14:	bl	116e4 <__errno_location@plt>
   13f18:	mov	r3, #22
   13f1c:	str	r3, [r0]
   13f20:	mov	r0, r4
   13f24:	add	sp, sp, #12
   13f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f2c:	ands	r4, r1, #18
   13f30:	beq	13f14 <__assert_fail@plt+0x2680>
   13f34:	mov	r1, #96	; 0x60
   13f38:	mov	r0, #1
   13f3c:	mov	sl, r2
   13f40:	bl	17f30 <lchmod@@Base+0x2680>
   13f44:	subs	r4, r0, #0
   13f48:	beq	13f20 <__assert_fail@plt+0x268c>
   13f4c:	tst	r6, #2
   13f50:	mov	r5, #0
   13f54:	str	sl, [r4, #44]	; 0x2c
   13f58:	bicne	r3, r6, #512	; 0x200
   13f5c:	orrne	r3, r3, #4
   13f60:	streq	r6, [r4, #48]	; 0x30
   13f64:	strne	r3, [r4, #48]	; 0x30
   13f68:	mvn	r3, #99	; 0x63
   13f6c:	str	r3, [r4, #32]
   13f70:	ldr	r3, [sp]
   13f74:	sub	r8, r3, #4
   13f78:	ldr	r7, [r8, #4]!
   13f7c:	cmp	r7, #0
   13f80:	bne	140a4 <__assert_fail@plt+0x2810>
   13f84:	add	r1, r5, #1
   13f88:	mov	r0, r4
   13f8c:	cmp	r1, #4096	; 0x1000
   13f90:	movcc	r1, #4096	; 0x1000
   13f94:	bl	13450 <__assert_fail@plt+0x1bbc>
   13f98:	cmp	r0, #0
   13f9c:	beq	141b4 <__assert_fail@plt+0x2920>
   13fa0:	ldr	r3, [sp]
   13fa4:	ldr	r8, [r3]
   13fa8:	cmp	r8, #0
   13fac:	beq	13fd0 <__assert_fail@plt+0x273c>
   13fb0:	mov	r2, r7
   13fb4:	ldr	r1, [pc, #516]	; 141c0 <__assert_fail@plt+0x292c>
   13fb8:	mov	r0, r4
   13fbc:	bl	12fe0 <__assert_fail@plt+0x174c>
   13fc0:	subs	r8, r0, #0
   13fc4:	beq	141ac <__assert_fail@plt+0x2918>
   13fc8:	mvn	r3, #0
   13fcc:	str	r3, [r8, #48]	; 0x30
   13fd0:	cmp	sl, #0
   13fd4:	eor	r6, r6, #2048	; 0x800
   13fd8:	ldrne	r3, [r4, #48]	; 0x30
   13fdc:	mov	fp, #0
   13fe0:	ubfx	r6, r6, #11, #1
   13fe4:	moveq	r3, #1
   13fe8:	mov	r7, fp
   13fec:	mov	r9, fp
   13ff0:	ubfxne	r3, r3, #10, #1
   13ff4:	str	r3, [sp, #4]
   13ff8:	ldr	r3, [sp]
   13ffc:	ldr	r5, [r3, r9, lsl #2]
   14000:	cmp	r5, #0
   14004:	bne	140b8 <__assert_fail@plt+0x2824>
   14008:	cmp	sl, #0
   1400c:	cmpne	r9, #1
   14010:	bls	14028 <__assert_fail@plt+0x2794>
   14014:	mov	r1, r7
   14018:	mov	r2, r9
   1401c:	mov	r0, r4
   14020:	bl	12f28 <__assert_fail@plt+0x1694>
   14024:	mov	r7, r0
   14028:	mov	r2, #0
   1402c:	ldr	r1, [pc, #396]	; 141c0 <__assert_fail@plt+0x292c>
   14030:	mov	r0, r4
   14034:	bl	12fe0 <__assert_fail@plt+0x174c>
   14038:	cmp	r0, #0
   1403c:	str	r0, [r4]
   14040:	beq	1419c <__assert_fail@plt+0x2908>
   14044:	mov	r3, #9
   14048:	str	r7, [r0, #8]
   1404c:	strh	r3, [r0, #56]	; 0x38
   14050:	mov	r3, #1
   14054:	str	r3, [r0, #48]	; 0x30
   14058:	mov	r0, r4
   1405c:	bl	134b8 <__assert_fail@plt+0x1c24>
   14060:	cmp	r0, #0
   14064:	beq	1419c <__assert_fail@plt+0x2908>
   14068:	ldr	r3, [r4, #48]	; 0x30
   1406c:	tst	r3, #516	; 0x204
   14070:	bne	14094 <__assert_fail@plt+0x2800>
   14074:	ldr	r1, [pc, #328]	; 141c4 <__assert_fail@plt+0x2930>
   14078:	mov	r0, r4
   1407c:	bl	13054 <__assert_fail@plt+0x17c0>
   14080:	cmp	r0, #0
   14084:	str	r0, [r4, #28]
   14088:	ldrlt	r3, [r4, #48]	; 0x30
   1408c:	orrlt	r3, r3, #4
   14090:	strlt	r3, [r4, #48]	; 0x30
   14094:	mvn	r1, #0
   14098:	add	r0, r4, #60	; 0x3c
   1409c:	bl	157f0 <__assert_fail@plt+0x3f5c>
   140a0:	b	13f20 <__assert_fail@plt+0x268c>
   140a4:	mov	r0, r7
   140a8:	bl	116b4 <strlen@plt>
   140ac:	cmp	r5, r0
   140b0:	movcc	r5, r0
   140b4:	b	13f78 <__assert_fail@plt+0x26e4>
   140b8:	mov	r0, r5
   140bc:	bl	116b4 <strlen@plt>
   140c0:	cmp	r0, #2
   140c4:	movls	r1, #0
   140c8:	andhi	r1, r6, #1
   140cc:	mov	r2, r0
   140d0:	cmp	r1, #0
   140d4:	beq	140ec <__assert_fail@plt+0x2858>
   140d8:	add	r1, r5, r0
   140dc:	ldrb	r1, [r1, #-1]
   140e0:	cmp	r1, #47	; 0x2f
   140e4:	subeq	r0, r5, #2
   140e8:	beq	14178 <__assert_fail@plt+0x28e4>
   140ec:	mov	r1, r5
   140f0:	mov	r0, r4
   140f4:	bl	12fe0 <__assert_fail@plt+0x174c>
   140f8:	subs	r5, r0, #0
   140fc:	beq	1419c <__assert_fail@plt+0x2908>
   14100:	mov	r2, #0
   14104:	cmp	r7, #0
   14108:	str	r8, [r5, #4]
   1410c:	str	r2, [r5, #48]	; 0x30
   14110:	add	r2, r5, #168	; 0xa8
   14114:	str	r2, [r5, #24]
   14118:	ldr	r2, [sp, #4]
   1411c:	moveq	r2, #0
   14120:	cmp	r2, #0
   14124:	beq	14188 <__assert_fail@plt+0x28f4>
   14128:	mov	r2, #11
   1412c:	mov	r0, #2
   14130:	mov	r1, #0
   14134:	strh	r2, [r5, #56]	; 0x38
   14138:	strd	r0, [r5, #112]	; 0x70
   1413c:	cmp	sl, #0
   14140:	strne	r7, [r5, #8]
   14144:	bne	14160 <__assert_fail@plt+0x28cc>
   14148:	cmp	r7, #0
   1414c:	str	sl, [r5, #8]
   14150:	moveq	fp, r5
   14154:	strne	r5, [fp, #8]
   14158:	movne	fp, r5
   1415c:	movne	r5, r7
   14160:	add	r9, r9, #1
   14164:	mov	r7, r5
   14168:	b	13ff8 <__assert_fail@plt+0x2764>
   1416c:	sub	r2, r2, #1
   14170:	cmp	r2, #1
   14174:	beq	140ec <__assert_fail@plt+0x2858>
   14178:	ldrb	r1, [r0, r2]
   1417c:	cmp	r1, #47	; 0x2f
   14180:	beq	1416c <__assert_fail@plt+0x28d8>
   14184:	b	140ec <__assert_fail@plt+0x2858>
   14188:	mov	r1, r5
   1418c:	mov	r0, r4
   14190:	bl	12df0 <__assert_fail@plt+0x155c>
   14194:	strh	r0, [r5, #56]	; 0x38
   14198:	b	1413c <__assert_fail@plt+0x28a8>
   1419c:	mov	r0, r7
   141a0:	bl	13088 <__assert_fail@plt+0x17f4>
   141a4:	mov	r0, r8
   141a8:	bl	12cd8 <__assert_fail@plt+0x1444>
   141ac:	ldr	r0, [r4, #24]
   141b0:	bl	12cd8 <__assert_fail@plt+0x1444>
   141b4:	mov	r0, r4
   141b8:	bl	12cd8 <__assert_fail@plt+0x1444>
   141bc:	b	13efc <__assert_fail@plt+0x2668>
   141c0:	andeq	r8, r1, sl, lsl sp
   141c4:	andeq	r8, r1, r3, lsl #30
   141c8:	push	{r4, r5, r6, lr}
   141cc:	mov	r4, r0
   141d0:	ldr	r0, [r0]
   141d4:	cmp	r0, #0
   141d8:	bne	14270 <__assert_fail@plt+0x29dc>
   141dc:	ldr	r0, [r4, #4]
   141e0:	cmp	r0, #0
   141e4:	beq	141ec <__assert_fail@plt+0x2958>
   141e8:	bl	13088 <__assert_fail@plt+0x17f4>
   141ec:	ldr	r0, [r4, #8]
   141f0:	bl	12cd8 <__assert_fail@plt+0x1444>
   141f4:	ldr	r0, [r4, #24]
   141f8:	bl	12cd8 <__assert_fail@plt+0x1444>
   141fc:	ldr	r3, [r4, #48]	; 0x30
   14200:	tst	r3, #512	; 0x200
   14204:	beq	1429c <__assert_fail@plt+0x2a08>
   14208:	ldr	r0, [r4, #32]
   1420c:	cmp	r0, #0
   14210:	bge	14284 <__assert_fail@plt+0x29f0>
   14214:	mov	r5, #0
   14218:	add	r0, r4, #60	; 0x3c
   1421c:	bl	130bc <__assert_fail@plt+0x1828>
   14220:	ldr	r0, [r4, #52]	; 0x34
   14224:	cmp	r0, #0
   14228:	beq	14230 <__assert_fail@plt+0x299c>
   1422c:	bl	152c8 <__assert_fail@plt+0x3a34>
   14230:	mov	r0, r4
   14234:	bl	1352c <__assert_fail@plt+0x1c98>
   14238:	mov	r0, r4
   1423c:	bl	12cd8 <__assert_fail@plt+0x1444>
   14240:	cmp	r5, #0
   14244:	beq	14254 <__assert_fail@plt+0x29c0>
   14248:	bl	116e4 <__errno_location@plt>
   1424c:	str	r5, [r0]
   14250:	mvn	r5, #0
   14254:	mov	r0, r5
   14258:	pop	{r4, r5, r6, pc}
   1425c:	ldr	r5, [r0, #8]
   14260:	cmp	r5, #0
   14264:	ldreq	r5, [r0, #4]
   14268:	bl	12cd8 <__assert_fail@plt+0x1444>
   1426c:	mov	r0, r5
   14270:	ldr	r3, [r0, #48]	; 0x30
   14274:	cmp	r3, #0
   14278:	bge	1425c <__assert_fail@plt+0x29c8>
   1427c:	bl	12cd8 <__assert_fail@plt+0x1444>
   14280:	b	141dc <__assert_fail@plt+0x2948>
   14284:	bl	1184c <close@plt>
   14288:	cmp	r0, #0
   1428c:	beq	14214 <__assert_fail@plt+0x2980>
   14290:	bl	116e4 <__errno_location@plt>
   14294:	ldr	r5, [r0]
   14298:	b	14218 <__assert_fail@plt+0x2984>
   1429c:	tst	r3, #4
   142a0:	bne	14214 <__assert_fail@plt+0x2980>
   142a4:	ldr	r0, [r4, #28]
   142a8:	bl	117bc <fchdir@plt>
   142ac:	subs	r5, r0, #0
   142b0:	beq	142bc <__assert_fail@plt+0x2a28>
   142b4:	bl	116e4 <__errno_location@plt>
   142b8:	ldr	r5, [r0]
   142bc:	ldr	r0, [r4, #28]
   142c0:	bl	1184c <close@plt>
   142c4:	adds	r0, r0, #0
   142c8:	movne	r0, #1
   142cc:	cmp	r5, #0
   142d0:	movne	r0, #0
   142d4:	cmp	r0, #0
   142d8:	beq	14218 <__assert_fail@plt+0x2984>
   142dc:	b	14290 <__assert_fail@plt+0x29fc>
   142e0:	push	{r4, r5, r6, r7, r8, lr}
   142e4:	ldr	r4, [r0]
   142e8:	cmp	r4, #0
   142ec:	bne	142fc <__assert_fail@plt+0x2a68>
   142f0:	mov	r4, #0
   142f4:	mov	r0, r4
   142f8:	pop	{r4, r5, r6, r7, r8, pc}
   142fc:	ldr	r1, [r0, #48]	; 0x30
   14300:	mov	r5, r0
   14304:	ands	r2, r1, #8192	; 0x2000
   14308:	bne	142f0 <__assert_fail@plt+0x2a5c>
   1430c:	ldrh	ip, [r4, #60]	; 0x3c
   14310:	mov	r3, #3
   14314:	strh	r3, [r4, #60]	; 0x3c
   14318:	cmp	ip, #1
   1431c:	bne	14330 <__assert_fail@plt+0x2a9c>
   14320:	mov	r1, r4
   14324:	bl	12df0 <__assert_fail@plt+0x155c>
   14328:	strh	r0, [r4, #56]	; 0x38
   1432c:	b	142f4 <__assert_fail@plt+0x2a60>
   14330:	cmp	ip, #2
   14334:	ldrh	r3, [r4, #56]	; 0x38
   14338:	bne	14418 <__assert_fail@plt+0x2b84>
   1433c:	sub	r2, r3, #12
   14340:	cmp	r2, #1
   14344:	bhi	1480c <__assert_fail@plt+0x2f78>
   14348:	mov	r2, #1
   1434c:	mov	r1, r4
   14350:	bl	12df0 <__assert_fail@plt+0x155c>
   14354:	cmp	r0, #1
   14358:	strh	r0, [r4, #56]	; 0x38
   1435c:	bne	143a4 <__assert_fail@plt+0x2b10>
   14360:	ldr	r3, [r5, #48]	; 0x30
   14364:	tst	r3, #4
   14368:	bne	143a4 <__assert_fail@plt+0x2b10>
   1436c:	ldr	r1, [pc, #1320]	; 1489c <__assert_fail@plt+0x3008>
   14370:	mov	r0, r5
   14374:	bl	13054 <__assert_fail@plt+0x17c0>
   14378:	cmp	r0, #0
   1437c:	str	r0, [r4, #36]	; 0x24
   14380:	ldrhge	r3, [r4, #58]	; 0x3a
   14384:	orrge	r3, r3, #2
   14388:	strhge	r3, [r4, #58]	; 0x3a
   1438c:	bge	143a4 <__assert_fail@plt+0x2b10>
   14390:	bl	116e4 <__errno_location@plt>
   14394:	ldr	r3, [r0]
   14398:	str	r3, [r4, #32]
   1439c:	mov	r3, #7
   143a0:	strh	r3, [r4, #56]	; 0x38
   143a4:	ldrh	r3, [r4, #56]	; 0x38
   143a8:	str	r4, [r5]
   143ac:	cmp	r3, #11
   143b0:	bne	143d8 <__assert_fail@plt+0x2b44>
   143b4:	ldrd	r2, [r4, #112]	; 0x70
   143b8:	cmp	r3, #0
   143bc:	cmpeq	r2, #2
   143c0:	bne	14654 <__assert_fail@plt+0x2dc0>
   143c4:	mov	r2, #0
   143c8:	mov	r1, r4
   143cc:	mov	r0, r5
   143d0:	bl	12df0 <__assert_fail@plt+0x155c>
   143d4:	strh	r0, [r4, #56]	; 0x38
   143d8:	ldrh	r3, [r4, #56]	; 0x38
   143dc:	cmp	r3, #1
   143e0:	bne	142f4 <__assert_fail@plt+0x2a60>
   143e4:	ldr	r3, [r4, #48]	; 0x30
   143e8:	mov	r0, r5
   143ec:	mov	r1, r4
   143f0:	cmp	r3, #0
   143f4:	ldrdeq	r2, [r4, #64]	; 0x40
   143f8:	strdeq	r2, [r5, #16]
   143fc:	bl	13554 <__assert_fail@plt+0x1cc0>
   14400:	subs	r5, r0, #0
   14404:	bne	142f4 <__assert_fail@plt+0x2a60>
   14408:	bl	116e4 <__errno_location@plt>
   1440c:	mov	r3, #12
   14410:	str	r3, [r0]
   14414:	b	142f0 <__assert_fail@plt+0x2a5c>
   14418:	cmp	r3, #1
   1441c:	bne	14814 <__assert_fail@plt+0x2f80>
   14420:	cmp	ip, #4
   14424:	beq	14444 <__assert_fail@plt+0x2bb0>
   14428:	tst	r1, #64	; 0x40
   1442c:	beq	14488 <__assert_fail@plt+0x2bf4>
   14430:	ldrd	r2, [r5, #16]
   14434:	ldrd	r6, [r4, #64]	; 0x40
   14438:	cmp	r7, r3
   1443c:	cmpeq	r6, r2
   14440:	beq	14488 <__assert_fail@plt+0x2bf4>
   14444:	ldrh	r3, [r4, #58]	; 0x3a
   14448:	tst	r3, #2
   1444c:	beq	14458 <__assert_fail@plt+0x2bc4>
   14450:	ldr	r0, [r4, #36]	; 0x24
   14454:	bl	1184c <close@plt>
   14458:	ldr	r0, [r5, #4]
   1445c:	cmp	r0, #0
   14460:	beq	14470 <__assert_fail@plt+0x2bdc>
   14464:	bl	13088 <__assert_fail@plt+0x17f4>
   14468:	mov	r3, #0
   1446c:	str	r3, [r5, #4]
   14470:	mov	r3, #6
   14474:	strh	r3, [r4, #56]	; 0x38
   14478:	mov	r1, r4
   1447c:	mov	r0, r5
   14480:	bl	13604 <__assert_fail@plt+0x1d70>
   14484:	b	142f4 <__assert_fail@plt+0x2a60>
   14488:	ldr	r0, [r5, #4]
   1448c:	cmp	r0, #0
   14490:	beq	144b0 <__assert_fail@plt+0x2c1c>
   14494:	tst	r1, #4096	; 0x1000
   14498:	beq	1477c <__assert_fail@plt+0x2ee8>
   1449c:	bic	r1, r1, #4096	; 0x1000
   144a0:	str	r1, [r5, #48]	; 0x30
   144a4:	bl	13088 <__assert_fail@plt+0x17f4>
   144a8:	mov	r3, #0
   144ac:	str	r3, [r5, #4]
   144b0:	mov	r1, #3
   144b4:	mov	r0, r5
   144b8:	bl	136b4 <__assert_fail@plt+0x1e20>
   144bc:	cmp	r0, #0
   144c0:	str	r0, [r5, #4]
   144c4:	bne	147bc <__assert_fail@plt+0x2f28>
   144c8:	ldr	r3, [r5, #48]	; 0x30
   144cc:	tst	r3, #8192	; 0x2000
   144d0:	bne	142f0 <__assert_fail@plt+0x2a5c>
   144d4:	ldr	r3, [r4, #32]
   144d8:	cmp	r3, #0
   144dc:	beq	14478 <__assert_fail@plt+0x2be4>
   144e0:	ldrh	r3, [r4, #56]	; 0x38
   144e4:	cmp	r3, #4
   144e8:	beq	14478 <__assert_fail@plt+0x2be4>
   144ec:	mov	r3, #7
   144f0:	b	14474 <__assert_fail@plt+0x2be0>
   144f4:	ldr	r2, [r3, #4]
   144f8:	ldr	r2, [r2, #24]
   144fc:	str	r2, [r3, #24]
   14500:	ldr	r3, [r3, #8]
   14504:	b	147b4 <__assert_fail@plt+0x2f20>
   14508:	mov	r0, r6
   1450c:	bl	12cd8 <__assert_fail@plt+0x1444>
   14510:	b	147c8 <__assert_fail@plt+0x2f34>
   14514:	mov	r0, r6
   14518:	str	r4, [r5]
   1451c:	bl	12cd8 <__assert_fail@plt+0x1444>
   14520:	ldr	r6, [r4, #48]	; 0x30
   14524:	cmp	r6, #0
   14528:	bne	145d0 <__assert_fail@plt+0x2d3c>
   1452c:	mov	r0, r5
   14530:	bl	13264 <__assert_fail@plt+0x19d0>
   14534:	cmp	r0, #0
   14538:	ldrne	r3, [r5, #48]	; 0x30
   1453c:	orrne	r3, r3, #8192	; 0x2000
   14540:	strne	r3, [r5, #48]	; 0x30
   14544:	bne	142f0 <__assert_fail@plt+0x2a5c>
   14548:	mov	r0, r5
   1454c:	add	r6, r4, #168	; 0xa8
   14550:	bl	1352c <__assert_fail@plt+0x1c98>
   14554:	ldr	r2, [r4, #52]	; 0x34
   14558:	mov	r1, r6
   1455c:	ldr	r0, [r5, #24]
   14560:	str	r2, [r4, #40]	; 0x28
   14564:	add	r2, r2, #1
   14568:	bl	114d4 <memmove@plt>
   1456c:	mov	r1, #47	; 0x2f
   14570:	mov	r0, r6
   14574:	bl	11774 <strrchr@plt>
   14578:	cmp	r0, #0
   1457c:	beq	145b8 <__assert_fail@plt+0x2d24>
   14580:	cmp	r6, r0
   14584:	bne	14594 <__assert_fail@plt+0x2d00>
   14588:	ldrb	r3, [r6, #1]
   1458c:	cmp	r3, #0
   14590:	beq	145b8 <__assert_fail@plt+0x2d24>
   14594:	add	r7, r0, #1
   14598:	mov	r0, r7
   1459c:	bl	116b4 <strlen@plt>
   145a0:	mov	r8, r0
   145a4:	add	r2, r0, #1
   145a8:	mov	r1, r7
   145ac:	mov	r0, r6
   145b0:	bl	114d4 <memmove@plt>
   145b4:	str	r8, [r4, #52]	; 0x34
   145b8:	ldr	r3, [r5, #24]
   145bc:	mov	r0, r5
   145c0:	str	r3, [r4, #24]
   145c4:	str	r3, [r4, #28]
   145c8:	bl	134b8 <__assert_fail@plt+0x1c24>
   145cc:	b	143a4 <__assert_fail@plt+0x2b10>
   145d0:	ldrh	r3, [r4, #60]	; 0x3c
   145d4:	mov	r6, r4
   145d8:	cmp	r3, #4
   145dc:	beq	14818 <__assert_fail@plt+0x2f84>
   145e0:	cmp	r3, #2
   145e4:	bne	147c8 <__assert_fail@plt+0x2f34>
   145e8:	mov	r2, #1
   145ec:	mov	r1, r4
   145f0:	mov	r0, r5
   145f4:	bl	12df0 <__assert_fail@plt+0x155c>
   145f8:	cmp	r0, #1
   145fc:	strh	r0, [r4, #56]	; 0x38
   14600:	bne	14648 <__assert_fail@plt+0x2db4>
   14604:	ldr	r3, [r5, #48]	; 0x30
   14608:	tst	r3, #4
   1460c:	bne	14648 <__assert_fail@plt+0x2db4>
   14610:	ldr	r1, [pc, #644]	; 1489c <__assert_fail@plt+0x3008>
   14614:	mov	r0, r5
   14618:	bl	13054 <__assert_fail@plt+0x17c0>
   1461c:	cmp	r0, #0
   14620:	str	r0, [r4, #36]	; 0x24
   14624:	ldrhge	r3, [r4, #58]	; 0x3a
   14628:	orrge	r3, r3, #2
   1462c:	strhge	r3, [r4, #58]	; 0x3a
   14630:	bge	14648 <__assert_fail@plt+0x2db4>
   14634:	bl	116e4 <__errno_location@plt>
   14638:	ldr	r3, [r0]
   1463c:	str	r3, [r4, #32]
   14640:	mov	r3, #7
   14644:	strh	r3, [r4, #56]	; 0x38
   14648:	mov	r3, #3
   1464c:	strh	r3, [r4, #60]	; 0x3c
   14650:	b	147c8 <__assert_fail@plt+0x2f34>
   14654:	cmp	r3, #0
   14658:	cmpeq	r2, #1
   1465c:	beq	142f4 <__assert_fail@plt+0x2a60>
   14660:	bl	11840 <abort@plt>
   14664:	ldrh	r3, [r4, #56]	; 0x38
   14668:	cmp	r3, #11
   1466c:	beq	14660 <__assert_fail@plt+0x2dcc>
   14670:	ldr	r2, [r5, #24]
   14674:	mov	r1, #0
   14678:	ldr	r3, [r4, #40]	; 0x28
   1467c:	strb	r1, [r2, r3]
   14680:	ldr	r3, [r4, #48]	; 0x30
   14684:	cmp	r3, r1
   14688:	bne	146b8 <__assert_fail@plt+0x2e24>
   1468c:	mov	r0, r5
   14690:	bl	13264 <__assert_fail@plt+0x19d0>
   14694:	cmp	r0, #0
   14698:	beq	146f0 <__assert_fail@plt+0x2e5c>
   1469c:	bl	116e4 <__errno_location@plt>
   146a0:	ldr	r3, [r0]
   146a4:	str	r3, [r4, #32]
   146a8:	ldr	r3, [r5, #48]	; 0x30
   146ac:	orr	r3, r3, #8192	; 0x2000
   146b0:	str	r3, [r5, #48]	; 0x30
   146b4:	b	146f0 <__assert_fail@plt+0x2e5c>
   146b8:	ldrh	r3, [r4, #58]	; 0x3a
   146bc:	tst	r3, #2
   146c0:	beq	1475c <__assert_fail@plt+0x2ec8>
   146c4:	ldr	r3, [r5, #48]	; 0x30
   146c8:	tst	r3, #4
   146cc:	bne	146e8 <__assert_fail@plt+0x2e54>
   146d0:	tst	r3, #512	; 0x200
   146d4:	ldr	r1, [r4, #36]	; 0x24
   146d8:	beq	14730 <__assert_fail@plt+0x2e9c>
   146dc:	mov	r2, #1
   146e0:	mov	r0, r5
   146e4:	bl	131f0 <__assert_fail@plt+0x195c>
   146e8:	ldr	r0, [r4, #36]	; 0x24
   146ec:	bl	1184c <close@plt>
   146f0:	ldrh	r3, [r4, #56]	; 0x38
   146f4:	cmp	r3, #2
   146f8:	beq	14720 <__assert_fail@plt+0x2e8c>
   146fc:	ldr	r3, [r4, #32]
   14700:	cmp	r3, #0
   14704:	movne	r3, #7
   14708:	moveq	r3, #6
   1470c:	strh	r3, [r4, #56]	; 0x38
   14710:	bne	14720 <__assert_fail@plt+0x2e8c>
   14714:	mov	r1, r4
   14718:	mov	r0, r5
   1471c:	bl	13604 <__assert_fail@plt+0x1d70>
   14720:	ldr	r3, [r5, #48]	; 0x30
   14724:	tst	r3, #8192	; 0x2000
   14728:	beq	142f4 <__assert_fail@plt+0x2a60>
   1472c:	b	142f0 <__assert_fail@plt+0x2a5c>
   14730:	mov	r0, r1
   14734:	bl	117bc <fchdir@plt>
   14738:	cmp	r0, #0
   1473c:	beq	146e8 <__assert_fail@plt+0x2e54>
   14740:	bl	116e4 <__errno_location@plt>
   14744:	ldr	r3, [r0]
   14748:	str	r3, [r4, #32]
   1474c:	ldr	r3, [r5, #48]	; 0x30
   14750:	orr	r3, r3, #8192	; 0x2000
   14754:	str	r3, [r5, #48]	; 0x30
   14758:	b	146e8 <__assert_fail@plt+0x2e54>
   1475c:	tst	r3, #1
   14760:	bne	146f0 <__assert_fail@plt+0x2e5c>
   14764:	ldr	r3, [pc, #308]	; 148a0 <__assert_fail@plt+0x300c>
   14768:	mvn	r2, #0
   1476c:	mov	r0, r5
   14770:	ldr	r1, [r4, #4]
   14774:	bl	132b4 <__assert_fail@plt+0x1a20>
   14778:	b	14694 <__assert_fail@plt+0x2e00>
   1477c:	mvn	r2, #0
   14780:	mov	r1, r4
   14784:	ldr	r3, [r4, #24]
   14788:	mov	r0, r5
   1478c:	bl	132b4 <__assert_fail@plt+0x1a20>
   14790:	cmp	r0, #0
   14794:	beq	147bc <__assert_fail@plt+0x2f28>
   14798:	bl	116e4 <__errno_location@plt>
   1479c:	ldr	r3, [r0]
   147a0:	str	r3, [r4, #32]
   147a4:	ldrh	r3, [r4, #58]	; 0x3a
   147a8:	orr	r3, r3, #1
   147ac:	strh	r3, [r4, #58]	; 0x3a
   147b0:	ldr	r3, [r5, #4]
   147b4:	cmp	r3, #0
   147b8:	bne	144f4 <__assert_fail@plt+0x2c60>
   147bc:	mov	r3, #0
   147c0:	ldr	r4, [r5, #4]
   147c4:	str	r3, [r5, #4]
   147c8:	ldr	r0, [r4, #4]
   147cc:	ldr	r2, [r5, #24]
   147d0:	ldr	r1, [r0, #40]	; 0x28
   147d4:	ldr	r0, [r0, #28]
   147d8:	sub	r3, r1, #1
   147dc:	ldrb	r0, [r0, r3]
   147e0:	cmp	r0, #47	; 0x2f
   147e4:	movne	r3, r1
   147e8:	mov	r1, #47	; 0x2f
   147ec:	add	r0, r2, r3
   147f0:	strb	r1, [r2, r3]
   147f4:	add	r0, r0, #1
   147f8:	add	r1, r4, #168	; 0xa8
   147fc:	ldr	r2, [r4, #52]	; 0x34
   14800:	add	r2, r2, #1
   14804:	bl	114d4 <memmove@plt>
   14808:	b	143a4 <__assert_fail@plt+0x2b10>
   1480c:	cmp	r3, #1
   14810:	beq	14428 <__assert_fail@plt+0x2b94>
   14814:	mov	r6, r4
   14818:	ldr	r4, [r6, #8]
   1481c:	cmp	r4, #0
   14820:	bne	14514 <__assert_fail@plt+0x2c80>
   14824:	ldr	r3, [r6, #4]
   14828:	ldr	r2, [r3, #12]
   1482c:	cmp	r2, #0
   14830:	beq	14864 <__assert_fail@plt+0x2fd0>
   14834:	str	r3, [r5]
   14838:	mov	r1, #3
   1483c:	mov	r0, r5
   14840:	ldr	r2, [r5, #24]
   14844:	ldr	r3, [r3, #40]	; 0x28
   14848:	strb	r4, [r2, r3]
   1484c:	bl	136b4 <__assert_fail@plt+0x1e20>
   14850:	subs	r4, r0, #0
   14854:	bne	14508 <__assert_fail@plt+0x2c74>
   14858:	ldr	r3, [r5, #48]	; 0x30
   1485c:	tst	r3, #8192	; 0x2000
   14860:	bne	142f0 <__assert_fail@plt+0x2a5c>
   14864:	ldr	r4, [r6, #4]
   14868:	mov	r0, r6
   1486c:	str	r4, [r5]
   14870:	bl	12cd8 <__assert_fail@plt+0x1444>
   14874:	ldr	r3, [r4, #48]	; 0x30
   14878:	cmn	r3, #1
   1487c:	bne	14664 <__assert_fail@plt+0x2dd0>
   14880:	mov	r0, r4
   14884:	mov	r4, #0
   14888:	bl	12cd8 <__assert_fail@plt+0x1444>
   1488c:	bl	116e4 <__errno_location@plt>
   14890:	str	r4, [r0]
   14894:	str	r4, [r5]
   14898:	b	142f4 <__assert_fail@plt+0x2a60>
   1489c:	andeq	r8, r1, r3, lsl #30
   148a0:	andeq	r8, r1, r2, lsl #30
   148a4:	cmp	r2, #4
   148a8:	bls	148c4 <__assert_fail@plt+0x3030>
   148ac:	push	{r4, lr}
   148b0:	bl	116e4 <__errno_location@plt>
   148b4:	mov	r3, #22
   148b8:	str	r3, [r0]
   148bc:	mov	r0, #1
   148c0:	pop	{r4, pc}
   148c4:	mov	r0, #0
   148c8:	strh	r2, [r1, #60]	; 0x3c
   148cc:	bx	lr
   148d0:	push	{r4, r5, r6, r7, r8, lr}
   148d4:	mov	r7, r1
   148d8:	mov	r5, r0
   148dc:	bl	116e4 <__errno_location@plt>
   148e0:	bics	r2, r7, #4096	; 0x1000
   148e4:	mov	r6, r0
   148e8:	beq	148fc <__assert_fail@plt+0x3068>
   148ec:	mov	r3, #22
   148f0:	str	r3, [r0]
   148f4:	mov	r0, #0
   148f8:	pop	{r4, r5, r6, r7, r8, pc}
   148fc:	ldr	r4, [r5]
   14900:	str	r2, [r0]
   14904:	ldr	r3, [r5, #48]	; 0x30
   14908:	ands	r0, r3, #8192	; 0x2000
   1490c:	bne	148f4 <__assert_fail@plt+0x3060>
   14910:	ldrh	r3, [r4, #56]	; 0x38
   14914:	cmp	r3, #9
   14918:	bne	14924 <__assert_fail@plt+0x3090>
   1491c:	ldr	r0, [r4, #8]
   14920:	pop	{r4, r5, r6, r7, r8, pc}
   14924:	cmp	r3, #1
   14928:	popne	{r4, r5, r6, r7, r8, pc}
   1492c:	ldr	r0, [r5, #4]
   14930:	cmp	r0, #0
   14934:	beq	1493c <__assert_fail@plt+0x30a8>
   14938:	bl	13088 <__assert_fail@plt+0x17f4>
   1493c:	cmp	r7, #4096	; 0x1000
   14940:	ldreq	r3, [r5, #48]	; 0x30
   14944:	moveq	r8, #2
   14948:	movne	r8, #1
   1494c:	orreq	r3, r3, #4096	; 0x1000
   14950:	streq	r3, [r5, #48]	; 0x30
   14954:	ldr	r3, [r4, #48]	; 0x30
   14958:	cmp	r3, #0
   1495c:	bne	1497c <__assert_fail@plt+0x30e8>
   14960:	ldr	r3, [r4, #24]
   14964:	ldrb	r3, [r3]
   14968:	cmp	r3, #47	; 0x2f
   1496c:	beq	1497c <__assert_fail@plt+0x30e8>
   14970:	ldr	r0, [r5, #48]	; 0x30
   14974:	ands	r4, r0, #4
   14978:	beq	14990 <__assert_fail@plt+0x30fc>
   1497c:	mov	r1, r8
   14980:	mov	r0, r5
   14984:	bl	136b4 <__assert_fail@plt+0x1e20>
   14988:	str	r0, [r5, #4]
   1498c:	pop	{r4, r5, r6, r7, r8, pc}
   14990:	ldr	r1, [pc, #116]	; 14a0c <__assert_fail@plt+0x3178>
   14994:	mov	r0, r5
   14998:	bl	13054 <__assert_fail@plt+0x17c0>
   1499c:	subs	r7, r0, #0
   149a0:	strlt	r4, [r5, #4]
   149a4:	blt	148f4 <__assert_fail@plt+0x3060>
   149a8:	mov	r1, r8
   149ac:	mov	r0, r5
   149b0:	bl	136b4 <__assert_fail@plt+0x1e20>
   149b4:	str	r0, [r5, #4]
   149b8:	ldr	r0, [r5, #48]	; 0x30
   149bc:	ands	r4, r0, #512	; 0x200
   149c0:	beq	149dc <__assert_fail@plt+0x3148>
   149c4:	mov	r2, #1
   149c8:	mov	r1, r7
   149cc:	mov	r0, r5
   149d0:	bl	131f0 <__assert_fail@plt+0x195c>
   149d4:	ldr	r0, [r5, #4]
   149d8:	pop	{r4, r5, r6, r7, r8, pc}
   149dc:	mov	r0, r7
   149e0:	bl	117bc <fchdir@plt>
   149e4:	cmp	r0, #0
   149e8:	beq	14a00 <__assert_fail@plt+0x316c>
   149ec:	ldr	r5, [r6]
   149f0:	mov	r0, r7
   149f4:	bl	1184c <close@plt>
   149f8:	str	r5, [r6]
   149fc:	b	148f4 <__assert_fail@plt+0x3060>
   14a00:	mov	r0, r7
   14a04:	bl	1184c <close@plt>
   14a08:	b	149d4 <__assert_fail@plt+0x3140>
   14a0c:	andeq	r8, r1, r3, lsl #30
   14a10:	ror	r0, r0, #3
   14a14:	udiv	r3, r0, r1
   14a18:	mls	r0, r3, r1, r0
   14a1c:	bx	lr
   14a20:	sub	r0, r1, r0
   14a24:	clz	r0, r0
   14a28:	lsr	r0, r0, #5
   14a2c:	bx	lr
   14a30:	ldrb	r3, [r1, #16]
   14a34:	cmp	r3, #0
   14a38:	bne	14a64 <__assert_fail@plt+0x31d0>
   14a3c:	vmov	s15, r0
   14a40:	vldr	s14, [r1, #8]
   14a44:	vcvt.f32.u32	s13, s15
   14a48:	vdiv.f32	s15, s13, s14
   14a4c:	vldr	s14, [pc, #140]	; 14ae0 <__assert_fail@plt+0x324c>
   14a50:	vcmpe.f32	s15, s14
   14a54:	vmrs	APSR_nzcv, fpscr
   14a58:	bge	14a78 <__assert_fail@plt+0x31e4>
   14a5c:	vcvt.u32.f32	s15, s15
   14a60:	vmov	r0, s15
   14a64:	cmp	r0, #10
   14a68:	movcc	r0, #10
   14a6c:	orr	r0, r0, #1
   14a70:	cmn	r0, #1
   14a74:	bne	14aac <__assert_fail@plt+0x3218>
   14a78:	mov	r0, #0
   14a7c:	bx	lr
   14a80:	add	r2, r3, #1
   14a84:	add	r3, r3, #2
   14a88:	add	r1, r1, r2, lsl #2
   14a8c:	udiv	r2, r0, r3
   14a90:	cmp	r0, r1
   14a94:	mls	r2, r3, r2, r0
   14a98:	bls	14ab8 <__assert_fail@plt+0x3224>
   14a9c:	cmp	r2, #0
   14aa0:	bne	14a80 <__assert_fail@plt+0x31ec>
   14aa4:	add	r0, r0, #2
   14aa8:	b	14a70 <__assert_fail@plt+0x31dc>
   14aac:	mov	r1, #9
   14ab0:	mov	r3, #3
   14ab4:	b	14a8c <__assert_fail@plt+0x31f8>
   14ab8:	cmp	r2, #0
   14abc:	beq	14aa4 <__assert_fail@plt+0x3210>
   14ac0:	lsrs	r3, r0, #30
   14ac4:	movne	r3, #1
   14ac8:	moveq	r3, #0
   14acc:	tst	r0, #536870912	; 0x20000000
   14ad0:	bne	14a78 <__assert_fail@plt+0x31e4>
   14ad4:	cmp	r3, #0
   14ad8:	bxeq	lr
   14adc:	b	14a78 <__assert_fail@plt+0x31e4>
   14ae0:	svcmi	0x00800000
   14ae4:	push	{r4, lr}
   14ae8:	mov	r4, r0
   14aec:	mov	r0, r1
   14af0:	ldr	r1, [r4, #8]
   14af4:	ldr	r3, [r4, #24]
   14af8:	blx	r3
   14afc:	ldr	r3, [r4, #8]
   14b00:	cmp	r3, r0
   14b04:	bhi	14b0c <__assert_fail@plt+0x3278>
   14b08:	bl	11840 <abort@plt>
   14b0c:	ldr	r3, [r4]
   14b10:	add	r0, r3, r0, lsl #3
   14b14:	pop	{r4, pc}
   14b18:	push	{r4, r5, r6, r7, r8, lr}
   14b1c:	mov	r8, r2
   14b20:	mov	r6, r1
   14b24:	mov	r5, r0
   14b28:	mov	r7, r3
   14b2c:	bl	14ae4 <__assert_fail@plt+0x3250>
   14b30:	str	r0, [r8]
   14b34:	ldr	r1, [r0]
   14b38:	cmp	r1, #0
   14b3c:	bne	14b4c <__assert_fail@plt+0x32b8>
   14b40:	mov	r2, #0
   14b44:	mov	r0, r2
   14b48:	pop	{r4, r5, r6, r7, r8, pc}
   14b4c:	cmp	r1, r6
   14b50:	mov	r4, r0
   14b54:	beq	14b6c <__assert_fail@plt+0x32d8>
   14b58:	mov	r0, r6
   14b5c:	ldr	r3, [r5, #28]
   14b60:	blx	r3
   14b64:	cmp	r0, #0
   14b68:	beq	14bc0 <__assert_fail@plt+0x332c>
   14b6c:	cmp	r7, #0
   14b70:	ldr	r2, [r4]
   14b74:	beq	14b44 <__assert_fail@plt+0x32b0>
   14b78:	ldr	r3, [r4, #4]
   14b7c:	cmp	r3, #0
   14b80:	streq	r3, [r4]
   14b84:	beq	14b44 <__assert_fail@plt+0x32b0>
   14b88:	ldm	r3, {r0, r1}
   14b8c:	stm	r4, {r0, r1}
   14b90:	mov	r1, #0
   14b94:	str	r1, [r3]
   14b98:	ldr	r1, [r5, #36]	; 0x24
   14b9c:	str	r1, [r3, #4]
   14ba0:	str	r3, [r5, #36]	; 0x24
   14ba4:	b	14b44 <__assert_fail@plt+0x32b0>
   14ba8:	mov	r0, r6
   14bac:	ldr	r3, [r5, #28]
   14bb0:	blx	r3
   14bb4:	cmp	r0, #0
   14bb8:	bne	14bd8 <__assert_fail@plt+0x3344>
   14bbc:	ldr	r4, [r4, #4]
   14bc0:	ldr	r3, [r4, #4]
   14bc4:	cmp	r3, #0
   14bc8:	beq	14b40 <__assert_fail@plt+0x32ac>
   14bcc:	ldr	r1, [r3]
   14bd0:	cmp	r1, r6
   14bd4:	bne	14ba8 <__assert_fail@plt+0x3314>
   14bd8:	ldr	r3, [r4, #4]
   14bdc:	cmp	r7, #0
   14be0:	ldr	r2, [r3]
   14be4:	beq	14b44 <__assert_fail@plt+0x32b0>
   14be8:	ldr	r1, [r3, #4]
   14bec:	str	r1, [r4, #4]
   14bf0:	b	14b90 <__assert_fail@plt+0x32fc>
   14bf4:	ldr	r2, [pc, #164]	; 14ca0 <__assert_fail@plt+0x340c>
   14bf8:	ldr	r3, [r0]
   14bfc:	cmp	r3, r2
   14c00:	beq	14c88 <__assert_fail@plt+0x33f4>
   14c04:	vldr	s13, [pc, #132]	; 14c90 <__assert_fail@plt+0x33fc>
   14c08:	vldr	s14, [r3, #8]
   14c0c:	vcmpe.f32	s14, s13
   14c10:	vmrs	APSR_nzcv, fpscr
   14c14:	ble	14c7c <__assert_fail@plt+0x33e8>
   14c18:	vldr	s15, [pc, #116]	; 14c94 <__assert_fail@plt+0x3400>
   14c1c:	vcmpe.f32	s14, s15
   14c20:	vmrs	APSR_nzcv, fpscr
   14c24:	bpl	14c7c <__assert_fail@plt+0x33e8>
   14c28:	vldr	s15, [pc, #104]	; 14c98 <__assert_fail@plt+0x3404>
   14c2c:	vldr	s12, [r3, #12]
   14c30:	vcmpe.f32	s12, s15
   14c34:	vmrs	APSR_nzcv, fpscr
   14c38:	ble	14c7c <__assert_fail@plt+0x33e8>
   14c3c:	vldr	s15, [r3]
   14c40:	vcmpe.f32	s15, #0.0
   14c44:	vmrs	APSR_nzcv, fpscr
   14c48:	blt	14c7c <__assert_fail@plt+0x33e8>
   14c4c:	vadd.f32	s15, s15, s13
   14c50:	vldr	s13, [r3, #4]
   14c54:	vcmpe.f32	s15, s13
   14c58:	vmrs	APSR_nzcv, fpscr
   14c5c:	bpl	14c7c <__assert_fail@plt+0x33e8>
   14c60:	vldr	s12, [pc, #52]	; 14c9c <__assert_fail@plt+0x3408>
   14c64:	vcmpe.f32	s13, s12
   14c68:	vmrs	APSR_nzcv, fpscr
   14c6c:	bhi	14c7c <__assert_fail@plt+0x33e8>
   14c70:	vcmpe.f32	s14, s15
   14c74:	vmrs	APSR_nzcv, fpscr
   14c78:	bgt	14c88 <__assert_fail@plt+0x33f4>
   14c7c:	str	r2, [r0]
   14c80:	mov	r0, #0
   14c84:	bx	lr
   14c88:	mov	r0, #1
   14c8c:	bx	lr
   14c90:	stclcc	12, cr12, [ip, #820]	; 0x334
   14c94:	svccc	0x00666666
   14c98:	svccc	0x008ccccd
   14c9c:	svccc	0x00800000
   14ca0:	andeq	r8, r1, r8, lsl #30
   14ca4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ca8:	mov	r5, r0
   14cac:	mov	r7, r1
   14cb0:	mov	r8, r2
   14cb4:	mov	r9, #0
   14cb8:	ldr	r4, [r1]
   14cbc:	add	r4, r4, #8
   14cc0:	ldr	r2, [r7, #4]
   14cc4:	sub	r3, r4, #8
   14cc8:	cmp	r2, r3
   14ccc:	bhi	14cdc <__assert_fail@plt+0x3448>
   14cd0:	mov	r8, #1
   14cd4:	mov	r0, r8
   14cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cdc:	ldr	r3, [r4, #-8]
   14ce0:	cmp	r3, #0
   14ce4:	ldrne	r6, [r4, #-4]
   14ce8:	bne	14d44 <__assert_fail@plt+0x34b0>
   14cec:	add	r4, r4, #8
   14cf0:	b	14cc0 <__assert_fail@plt+0x342c>
   14cf4:	ldr	sl, [r6]
   14cf8:	mov	r0, r5
   14cfc:	mov	r1, sl
   14d00:	bl	14ae4 <__assert_fail@plt+0x3250>
   14d04:	ldr	r2, [r0]
   14d08:	ldr	r1, [r6, #4]
   14d0c:	cmp	r2, #0
   14d10:	ldrne	r3, [r0, #4]
   14d14:	strne	r3, [r6, #4]
   14d18:	strne	r6, [r0, #4]
   14d1c:	bne	14d40 <__assert_fail@plt+0x34ac>
   14d20:	ldr	r3, [r5, #12]
   14d24:	str	sl, [r0]
   14d28:	add	r3, r3, #1
   14d2c:	str	r3, [r5, #12]
   14d30:	str	r2, [r6]
   14d34:	ldr	r3, [r5, #36]	; 0x24
   14d38:	str	r3, [r6, #4]
   14d3c:	str	r6, [r5, #36]	; 0x24
   14d40:	mov	r6, r1
   14d44:	cmp	r6, #0
   14d48:	bne	14cf4 <__assert_fail@plt+0x3460>
   14d4c:	cmp	r8, #0
   14d50:	str	r6, [r4, #-4]
   14d54:	ldr	sl, [r4, #-8]
   14d58:	bne	14cec <__assert_fail@plt+0x3458>
   14d5c:	mov	r1, sl
   14d60:	mov	r0, r5
   14d64:	bl	14ae4 <__assert_fail@plt+0x3250>
   14d68:	ldr	r3, [r0]
   14d6c:	mov	r6, r0
   14d70:	cmp	r3, #0
   14d74:	beq	14dc0 <__assert_fail@plt+0x352c>
   14d78:	ldr	r0, [r5, #36]	; 0x24
   14d7c:	cmp	r0, #0
   14d80:	ldrne	r3, [r0, #4]
   14d84:	strne	r3, [r5, #36]	; 0x24
   14d88:	bne	14d9c <__assert_fail@plt+0x3508>
   14d8c:	mov	r0, #8
   14d90:	bl	17f84 <lchmod@@Base+0x26d4>
   14d94:	cmp	r0, #0
   14d98:	beq	14cd4 <__assert_fail@plt+0x3440>
   14d9c:	ldr	r3, [r6, #4]
   14da0:	str	sl, [r0]
   14da4:	str	r3, [r0, #4]
   14da8:	str	r0, [r6, #4]
   14dac:	ldr	r3, [r7, #12]
   14db0:	str	r9, [r4, #-8]
   14db4:	sub	r3, r3, #1
   14db8:	str	r3, [r7, #12]
   14dbc:	b	14cec <__assert_fail@plt+0x3458>
   14dc0:	ldr	r3, [r5, #12]
   14dc4:	str	sl, [r0]
   14dc8:	add	r3, r3, #1
   14dcc:	str	r3, [r5, #12]
   14dd0:	b	14dac <__assert_fail@plt+0x3518>
   14dd4:	ldr	r0, [r0, #8]
   14dd8:	bx	lr
   14ddc:	ldr	r0, [r0, #12]
   14de0:	bx	lr
   14de4:	ldr	r0, [r0, #16]
   14de8:	bx	lr
   14dec:	ldm	r0, {r3, ip}
   14df0:	mov	r0, #0
   14df4:	cmp	ip, r3
   14df8:	bxls	lr
   14dfc:	ldr	r2, [r3]
   14e00:	cmp	r2, #0
   14e04:	beq	14e2c <__assert_fail@plt+0x3598>
   14e08:	mov	r1, r3
   14e0c:	mov	r2, #1
   14e10:	b	14e18 <__assert_fail@plt+0x3584>
   14e14:	add	r2, r2, #1
   14e18:	ldr	r1, [r1, #4]
   14e1c:	cmp	r1, #0
   14e20:	bne	14e14 <__assert_fail@plt+0x3580>
   14e24:	cmp	r0, r2
   14e28:	movcc	r0, r2
   14e2c:	add	r3, r3, #8
   14e30:	b	14df4 <__assert_fail@plt+0x3560>
   14e34:	push	{lr}		; (str lr, [sp, #-4]!)
   14e38:	mov	r3, #0
   14e3c:	mov	r1, r3
   14e40:	ldm	r0, {r2, lr}
   14e44:	cmp	lr, r2
   14e48:	bhi	14e6c <__assert_fail@plt+0x35d8>
   14e4c:	ldr	r2, [r0, #12]
   14e50:	cmp	r2, r1
   14e54:	ldreq	r0, [r0, #16]
   14e58:	subeq	r0, r0, r3
   14e5c:	clzeq	r0, r0
   14e60:	lsreq	r0, r0, #5
   14e64:	movne	r0, #0
   14e68:	pop	{pc}		; (ldr pc, [sp], #4)
   14e6c:	ldr	ip, [r2]
   14e70:	cmp	ip, #0
   14e74:	addne	r1, r1, #1
   14e78:	addne	r3, r3, #1
   14e7c:	movne	ip, r2
   14e80:	bne	14e90 <__assert_fail@plt+0x35fc>
   14e84:	add	r2, r2, #8
   14e88:	b	14e44 <__assert_fail@plt+0x35b0>
   14e8c:	add	r3, r3, #1
   14e90:	ldr	ip, [ip, #4]
   14e94:	cmp	ip, #0
   14e98:	bne	14e8c <__assert_fail@plt+0x35f8>
   14e9c:	b	14e84 <__assert_fail@plt+0x35f0>
   14ea0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14ea4:	mov	r6, r0
   14ea8:	mov	r4, r1
   14eac:	bl	14dec <__assert_fail@plt+0x3558>
   14eb0:	ldr	r5, [r6, #8]
   14eb4:	mov	r8, r0
   14eb8:	mov	r1, #1
   14ebc:	mov	r0, r4
   14ec0:	ldr	r7, [r6, #12]
   14ec4:	ldr	r2, [pc, #116]	; 14f40 <__assert_fail@plt+0x36ac>
   14ec8:	ldr	r3, [r6, #16]
   14ecc:	bl	1172c <__fprintf_chk@plt>
   14ed0:	mov	r3, r5
   14ed4:	ldr	r2, [pc, #104]	; 14f44 <__assert_fail@plt+0x36b0>
   14ed8:	mov	r1, #1
   14edc:	mov	r0, r4
   14ee0:	bl	1172c <__fprintf_chk@plt>
   14ee4:	vmov	s15, r7
   14ee8:	mov	r3, r7
   14eec:	mov	r1, #1
   14ef0:	ldr	r2, [pc, #80]	; 14f48 <__assert_fail@plt+0x36b4>
   14ef4:	mov	r0, r4
   14ef8:	vcvt.f64.u32	d6, s15
   14efc:	vldr	d7, [pc, #52]	; 14f38 <__assert_fail@plt+0x36a4>
   14f00:	vmul.f64	d6, d6, d7
   14f04:	vmov	s15, r5
   14f08:	vcvt.f64.u32	d7, s15
   14f0c:	vdiv.f64	d5, d6, d7
   14f10:	vstr	d5, [sp]
   14f14:	bl	1172c <__fprintf_chk@plt>
   14f18:	ldr	r2, [pc, #44]	; 14f4c <__assert_fail@plt+0x36b8>
   14f1c:	mov	r3, r8
   14f20:	mov	r1, #1
   14f24:	mov	r0, r4
   14f28:	add	sp, sp, #8
   14f2c:	pop	{r4, r5, r6, r7, r8, lr}
   14f30:	b	1172c <__fprintf_chk@plt>
   14f34:	nop	{0}
   14f38:	andeq	r0, r0, r0
   14f3c:	subsmi	r0, r9, r0
   14f40:	andeq	r8, r1, ip, lsl pc
   14f44:	andeq	r8, r1, r4, lsr pc
   14f48:	andeq	r8, r1, ip, asr #30
   14f4c:	andeq	r8, r1, sp, ror #30
   14f50:	push	{r4, r5, r6, lr}
   14f54:	mov	r6, r0
   14f58:	mov	r5, r1
   14f5c:	bl	14ae4 <__assert_fail@plt+0x3250>
   14f60:	ldr	r3, [r0]
   14f64:	cmp	r3, #0
   14f68:	beq	14fa4 <__assert_fail@plt+0x3710>
   14f6c:	mov	r4, r0
   14f70:	ldr	r1, [r4]
   14f74:	cmp	r1, r5
   14f78:	bne	14f84 <__assert_fail@plt+0x36f0>
   14f7c:	ldr	r0, [r4]
   14f80:	pop	{r4, r5, r6, pc}
   14f84:	mov	r0, r5
   14f88:	ldr	r3, [r6, #28]
   14f8c:	blx	r3
   14f90:	cmp	r0, #0
   14f94:	bne	14f7c <__assert_fail@plt+0x36e8>
   14f98:	ldr	r4, [r4, #4]
   14f9c:	cmp	r4, #0
   14fa0:	bne	14f70 <__assert_fail@plt+0x36dc>
   14fa4:	mov	r0, #0
   14fa8:	pop	{r4, r5, r6, pc}
   14fac:	ldr	r3, [r0, #16]
   14fb0:	cmp	r3, #0
   14fb4:	beq	14fe4 <__assert_fail@plt+0x3750>
   14fb8:	ldr	r3, [r0]
   14fbc:	ldr	r2, [r0, #4]
   14fc0:	cmp	r2, r3
   14fc4:	bhi	14fd0 <__assert_fail@plt+0x373c>
   14fc8:	push	{r4, lr}
   14fcc:	bl	11840 <abort@plt>
   14fd0:	ldr	r0, [r3]
   14fd4:	cmp	r0, #0
   14fd8:	bxne	lr
   14fdc:	add	r3, r3, #8
   14fe0:	b	14fc0 <__assert_fail@plt+0x372c>
   14fe4:	mov	r0, r3
   14fe8:	bx	lr
   14fec:	push	{r4, r5, r6, lr}
   14ff0:	mov	r4, r0
   14ff4:	mov	r5, r1
   14ff8:	bl	14ae4 <__assert_fail@plt+0x3250>
   14ffc:	mov	r2, r0
   15000:	mov	r3, r0
   15004:	ldm	r3, {r1, r3}
   15008:	cmp	r1, r5
   1500c:	bne	15020 <__assert_fail@plt+0x378c>
   15010:	cmp	r3, #0
   15014:	beq	15028 <__assert_fail@plt+0x3794>
   15018:	ldr	r0, [r3]
   1501c:	pop	{r4, r5, r6, pc}
   15020:	cmp	r3, #0
   15024:	bne	15004 <__assert_fail@plt+0x3770>
   15028:	ldr	r3, [r4, #4]
   1502c:	add	r2, r2, #8
   15030:	cmp	r3, r2
   15034:	bhi	15040 <__assert_fail@plt+0x37ac>
   15038:	mov	r0, #0
   1503c:	pop	{r4, r5, r6, pc}
   15040:	ldr	r0, [r2]
   15044:	cmp	r0, #0
   15048:	beq	1502c <__assert_fail@plt+0x3798>
   1504c:	pop	{r4, r5, r6, pc}
   15050:	ldr	ip, [r0]
   15054:	mov	r3, #0
   15058:	push	{r4, r5, lr}
   1505c:	ldr	lr, [r0, #4]
   15060:	cmp	lr, ip
   15064:	bhi	15070 <__assert_fail@plt+0x37dc>
   15068:	mov	r0, r3
   1506c:	pop	{r4, r5, pc}
   15070:	ldr	lr, [ip]
   15074:	cmp	lr, #0
   15078:	beq	150a4 <__assert_fail@plt+0x3810>
   1507c:	add	r4, r1, r3, lsl #2
   15080:	mov	lr, ip
   15084:	cmp	r2, r3
   15088:	bls	15068 <__assert_fail@plt+0x37d4>
   1508c:	ldr	r5, [lr]
   15090:	add	r3, r3, #1
   15094:	str	r5, [r4], #4
   15098:	ldr	lr, [lr, #4]
   1509c:	cmp	lr, #0
   150a0:	bne	15084 <__assert_fail@plt+0x37f0>
   150a4:	add	ip, ip, #8
   150a8:	b	1505c <__assert_fail@plt+0x37c8>
   150ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150b0:	mov	r7, r0
   150b4:	mov	r8, r1
   150b8:	mov	r9, r2
   150bc:	mov	r6, #0
   150c0:	ldr	r4, [r0]
   150c4:	ldr	r3, [r7, #4]
   150c8:	cmp	r3, r4
   150cc:	bhi	150d8 <__assert_fail@plt+0x3844>
   150d0:	mov	r0, r6
   150d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150d8:	ldr	r3, [r4]
   150dc:	cmp	r3, #0
   150e0:	beq	1510c <__assert_fail@plt+0x3878>
   150e4:	mov	r5, r4
   150e8:	mov	r1, r9
   150ec:	ldr	r0, [r5]
   150f0:	blx	r8
   150f4:	cmp	r0, #0
   150f8:	beq	150d0 <__assert_fail@plt+0x383c>
   150fc:	ldr	r5, [r5, #4]
   15100:	add	r6, r6, #1
   15104:	cmp	r5, #0
   15108:	bne	150e8 <__assert_fail@plt+0x3854>
   1510c:	add	r4, r4, #8
   15110:	b	150c4 <__assert_fail@plt+0x3830>
   15114:	sub	r2, r0, #1
   15118:	mov	r0, #0
   1511c:	ldrb	r3, [r2, #1]!
   15120:	cmp	r3, #0
   15124:	bxeq	lr
   15128:	rsb	r0, r0, r0, lsl #5
   1512c:	add	r0, r0, r3
   15130:	udiv	r3, r0, r1
   15134:	mls	r0, r1, r3, r0
   15138:	b	1511c <__assert_fail@plt+0x3888>
   1513c:	push	{lr}		; (str lr, [sp, #-4]!)
   15140:	mov	ip, r0
   15144:	ldr	lr, [pc, #16]	; 1515c <__assert_fail@plt+0x38c8>
   15148:	ldm	lr!, {r0, r1, r2, r3}
   1514c:	stmia	ip!, {r0, r1, r2, r3}
   15150:	ldr	r3, [lr]
   15154:	str	r3, [ip]
   15158:	pop	{pc}		; (ldr pc, [sp], #4)
   1515c:	andeq	r8, r1, r8, lsl #30
   15160:	cmp	r2, #0
   15164:	push	{r4, r5, r6, r7, r8, lr}
   15168:	mov	r8, r0
   1516c:	mov	r0, #40	; 0x28
   15170:	mov	r5, r1
   15174:	ldr	r7, [pc, #164]	; 15220 <__assert_fail@plt+0x398c>
   15178:	movne	r7, r2
   1517c:	cmp	r3, #0
   15180:	ldr	r6, [pc, #156]	; 15224 <__assert_fail@plt+0x3990>
   15184:	movne	r6, r3
   15188:	bl	17f84 <lchmod@@Base+0x26d4>
   1518c:	subs	r4, r0, #0
   15190:	beq	15208 <__assert_fail@plt+0x3974>
   15194:	ldr	r3, [pc, #140]	; 15228 <__assert_fail@plt+0x3994>
   15198:	cmp	r5, #0
   1519c:	mov	r0, r4
   151a0:	moveq	r5, r3
   151a4:	str	r5, [r0, #20]!
   151a8:	bl	14bf4 <__assert_fail@plt+0x3360>
   151ac:	cmp	r0, #0
   151b0:	beq	15210 <__assert_fail@plt+0x397c>
   151b4:	mov	r1, r5
   151b8:	mov	r0, r8
   151bc:	bl	14a30 <__assert_fail@plt+0x319c>
   151c0:	cmp	r0, #0
   151c4:	str	r0, [r4, #8]
   151c8:	beq	15210 <__assert_fail@plt+0x397c>
   151cc:	mov	r1, #8
   151d0:	bl	17f30 <lchmod@@Base+0x2680>
   151d4:	cmp	r0, #0
   151d8:	str	r0, [r4]
   151dc:	beq	15210 <__assert_fail@plt+0x397c>
   151e0:	ldr	r3, [r4, #8]
   151e4:	str	r7, [r4, #24]
   151e8:	ldr	r2, [sp, #24]
   151ec:	str	r6, [r4, #28]
   151f0:	add	r0, r0, r3, lsl #3
   151f4:	mov	r3, #0
   151f8:	str	r0, [r4, #4]
   151fc:	str	r3, [r4, #12]
   15200:	str	r3, [r4, #16]
   15204:	strd	r2, [r4, #32]
   15208:	mov	r0, r4
   1520c:	pop	{r4, r5, r6, r7, r8, pc}
   15210:	mov	r0, r4
   15214:	mov	r4, #0
   15218:	bl	12cd8 <__assert_fail@plt+0x1444>
   1521c:	b	15208 <__assert_fail@plt+0x3974>
   15220:	andeq	r4, r1, r0, lsl sl
   15224:	andeq	r4, r1, r0, lsr #20
   15228:	andeq	r8, r1, r8, lsl #30
   1522c:	push	{r4, r5, r6, r7, r8, lr}
   15230:	mov	r5, r0
   15234:	mov	r7, #0
   15238:	ldr	r4, [r0]
   1523c:	add	r4, r4, #8
   15240:	ldr	r2, [r5, #4]
   15244:	sub	r3, r4, #8
   15248:	cmp	r2, r3
   1524c:	bhi	15260 <__assert_fail@plt+0x39cc>
   15250:	mov	r3, #0
   15254:	str	r3, [r5, #12]
   15258:	str	r3, [r5, #16]
   1525c:	pop	{r4, r5, r6, r7, r8, pc}
   15260:	ldr	r3, [r4, #-8]
   15264:	cmp	r3, #0
   15268:	ldrne	r6, [r4, #-4]
   1526c:	bne	152a0 <__assert_fail@plt+0x3a0c>
   15270:	add	r4, r4, #8
   15274:	b	15240 <__assert_fail@plt+0x39ac>
   15278:	cmp	r3, #0
   1527c:	beq	15288 <__assert_fail@plt+0x39f4>
   15280:	ldr	r0, [r6]
   15284:	blx	r3
   15288:	ldr	r3, [r6, #4]
   1528c:	ldr	r2, [r5, #36]	; 0x24
   15290:	str	r7, [r6]
   15294:	str	r2, [r6, #4]
   15298:	str	r6, [r5, #36]	; 0x24
   1529c:	mov	r6, r3
   152a0:	cmp	r6, #0
   152a4:	ldr	r3, [r5, #32]
   152a8:	bne	15278 <__assert_fail@plt+0x39e4>
   152ac:	cmp	r3, #0
   152b0:	beq	152bc <__assert_fail@plt+0x3a28>
   152b4:	ldr	r0, [r4, #-8]
   152b8:	blx	r3
   152bc:	str	r7, [r4, #-8]
   152c0:	str	r7, [r4, #-4]
   152c4:	b	15270 <__assert_fail@plt+0x39dc>
   152c8:	ldr	r3, [r0, #32]
   152cc:	push	{r4, r5, r6, lr}
   152d0:	mov	r4, r0
   152d4:	cmp	r3, #0
   152d8:	bne	1530c <__assert_fail@plt+0x3a78>
   152dc:	ldr	r5, [r4]
   152e0:	ldr	r3, [r4, #4]
   152e4:	cmp	r3, r5
   152e8:	bhi	1535c <__assert_fail@plt+0x3ac8>
   152ec:	ldr	r0, [r4, #36]	; 0x24
   152f0:	cmp	r0, #0
   152f4:	bne	1537c <__assert_fail@plt+0x3ae8>
   152f8:	ldr	r0, [r4]
   152fc:	bl	12cd8 <__assert_fail@plt+0x1444>
   15300:	mov	r0, r4
   15304:	pop	{r4, r5, r6, lr}
   15308:	b	12cd8 <__assert_fail@plt+0x1444>
   1530c:	ldr	r3, [r0, #16]
   15310:	cmp	r3, #0
   15314:	ldrne	r5, [r0]
   15318:	beq	152dc <__assert_fail@plt+0x3a48>
   1531c:	ldr	r3, [r4, #4]
   15320:	cmp	r3, r5
   15324:	bls	152dc <__assert_fail@plt+0x3a48>
   15328:	ldr	r3, [r5]
   1532c:	cmp	r3, #0
   15330:	bne	1533c <__assert_fail@plt+0x3aa8>
   15334:	add	r5, r5, #8
   15338:	b	1531c <__assert_fail@plt+0x3a88>
   1533c:	mov	r6, r5
   15340:	ldr	r0, [r6]
   15344:	ldr	r3, [r4, #32]
   15348:	blx	r3
   1534c:	ldr	r6, [r6, #4]
   15350:	cmp	r6, #0
   15354:	bne	15340 <__assert_fail@plt+0x3aac>
   15358:	b	15334 <__assert_fail@plt+0x3aa0>
   1535c:	ldr	r0, [r5, #4]
   15360:	cmp	r0, #0
   15364:	addeq	r5, r5, #8
   15368:	beq	152e0 <__assert_fail@plt+0x3a4c>
   1536c:	ldr	r6, [r0, #4]
   15370:	bl	12cd8 <__assert_fail@plt+0x1444>
   15374:	mov	r0, r6
   15378:	b	15360 <__assert_fail@plt+0x3acc>
   1537c:	ldr	r5, [r0, #4]
   15380:	bl	12cd8 <__assert_fail@plt+0x1444>
   15384:	mov	r0, r5
   15388:	b	152f0 <__assert_fail@plt+0x3a5c>
   1538c:	push	{r4, r5, lr}
   15390:	mov	r4, r0
   15394:	sub	sp, sp, #44	; 0x2c
   15398:	mov	r0, r1
   1539c:	ldr	r1, [r4, #20]
   153a0:	bl	14a30 <__assert_fail@plt+0x319c>
   153a4:	subs	r5, r0, #0
   153a8:	bne	153bc <__assert_fail@plt+0x3b28>
   153ac:	mov	r5, #0
   153b0:	mov	r0, r5
   153b4:	add	sp, sp, #44	; 0x2c
   153b8:	pop	{r4, r5, pc}
   153bc:	ldr	r3, [r4, #8]
   153c0:	cmp	r3, r5
   153c4:	beq	154a4 <__assert_fail@plt+0x3c10>
   153c8:	mov	r1, #8
   153cc:	bl	17f30 <lchmod@@Base+0x2680>
   153d0:	cmp	r0, #0
   153d4:	str	r0, [sp]
   153d8:	beq	153ac <__assert_fail@plt+0x3b18>
   153dc:	ldr	r3, [r4, #20]
   153e0:	mov	r2, #0
   153e4:	add	r0, r0, r5, lsl #3
   153e8:	mov	r1, r4
   153ec:	stmib	sp, {r0, r5}
   153f0:	mov	r0, sp
   153f4:	str	r2, [sp, #12]
   153f8:	strd	r2, [sp, #16]
   153fc:	ldr	r3, [r4, #24]
   15400:	str	r3, [sp, #24]
   15404:	ldr	r3, [r4, #28]
   15408:	str	r3, [sp, #28]
   1540c:	ldr	r3, [r4, #32]
   15410:	str	r3, [sp, #32]
   15414:	ldr	r3, [r4, #36]	; 0x24
   15418:	str	r3, [sp, #36]	; 0x24
   1541c:	bl	14ca4 <__assert_fail@plt+0x3410>
   15420:	subs	r5, r0, #0
   15424:	beq	1545c <__assert_fail@plt+0x3bc8>
   15428:	ldr	r0, [r4]
   1542c:	bl	12cd8 <__assert_fail@plt+0x1444>
   15430:	ldr	r3, [sp]
   15434:	str	r3, [r4]
   15438:	ldr	r3, [sp, #4]
   1543c:	str	r3, [r4, #4]
   15440:	ldr	r3, [sp, #8]
   15444:	str	r3, [r4, #8]
   15448:	ldr	r3, [sp, #12]
   1544c:	str	r3, [r4, #12]
   15450:	ldr	r3, [sp, #36]	; 0x24
   15454:	str	r3, [r4, #36]	; 0x24
   15458:	b	153b0 <__assert_fail@plt+0x3b1c>
   1545c:	ldr	r3, [sp, #36]	; 0x24
   15460:	mov	r2, #1
   15464:	mov	r1, sp
   15468:	mov	r0, r4
   1546c:	str	r3, [r4, #36]	; 0x24
   15470:	bl	14ca4 <__assert_fail@plt+0x3410>
   15474:	cmp	r0, #0
   15478:	bne	15480 <__assert_fail@plt+0x3bec>
   1547c:	bl	11840 <abort@plt>
   15480:	mov	r2, r5
   15484:	mov	r1, sp
   15488:	mov	r0, r4
   1548c:	bl	14ca4 <__assert_fail@plt+0x3410>
   15490:	cmp	r0, #0
   15494:	beq	1547c <__assert_fail@plt+0x3be8>
   15498:	ldr	r0, [sp]
   1549c:	bl	12cd8 <__assert_fail@plt+0x1444>
   154a0:	b	153b0 <__assert_fail@plt+0x3b1c>
   154a4:	mov	r5, #1
   154a8:	b	153b0 <__assert_fail@plt+0x3b1c>
   154ac:	push	{r0, r1, r4, r5, r6, lr}
   154b0:	subs	r6, r1, #0
   154b4:	bne	154bc <__assert_fail@plt+0x3c28>
   154b8:	bl	11840 <abort@plt>
   154bc:	mov	r5, r2
   154c0:	mov	r3, #0
   154c4:	add	r2, sp, #4
   154c8:	mov	r4, r0
   154cc:	bl	14b18 <__assert_fail@plt+0x3284>
   154d0:	cmp	r0, #0
   154d4:	beq	154ec <__assert_fail@plt+0x3c58>
   154d8:	cmp	r5, #0
   154dc:	strne	r0, [r5]
   154e0:	movne	r0, #0
   154e4:	moveq	r0, r5
   154e8:	b	1556c <__assert_fail@plt+0x3cd8>
   154ec:	vldr	s15, [r4, #12]
   154f0:	ldr	r3, [r4, #20]
   154f4:	vcvt.f32.u32	s14, s15
   154f8:	vldr	s15, [r4, #8]
   154fc:	vldr	s13, [r3, #8]
   15500:	vcvt.f32.u32	s15, s15
   15504:	vmul.f32	s15, s15, s13
   15508:	vcmpe.f32	s14, s15
   1550c:	vmrs	APSR_nzcv, fpscr
   15510:	ble	155a8 <__assert_fail@plt+0x3d14>
   15514:	add	r0, r4, #20
   15518:	bl	14bf4 <__assert_fail@plt+0x3360>
   1551c:	vldr	s15, [r4, #8]
   15520:	vldr	s14, [r4, #12]
   15524:	ldr	r3, [r4, #20]
   15528:	vcvt.f32.u32	s15, s15
   1552c:	vcvt.f32.u32	s14, s14
   15530:	vldr	s13, [r3, #8]
   15534:	vmul.f32	s12, s13, s15
   15538:	vcmpe.f32	s14, s12
   1553c:	vmrs	APSR_nzcv, fpscr
   15540:	ble	155a8 <__assert_fail@plt+0x3d14>
   15544:	vldr	s14, [r3, #12]
   15548:	ldrb	r3, [r3, #16]
   1554c:	vmul.f32	s15, s15, s14
   15550:	vldr	s14, [pc, #204]	; 15624 <__assert_fail@plt+0x3d90>
   15554:	cmp	r3, #0
   15558:	vmuleq.f32	s15, s15, s13
   1555c:	vcmpe.f32	s15, s14
   15560:	vmrs	APSR_nzcv, fpscr
   15564:	blt	15574 <__assert_fail@plt+0x3ce0>
   15568:	mvn	r0, #0
   1556c:	add	sp, sp, #8
   15570:	pop	{r4, r5, r6, pc}
   15574:	vcvt.u32.f32	s15, s15
   15578:	mov	r0, r4
   1557c:	vmov	r1, s15
   15580:	bl	1538c <__assert_fail@plt+0x3af8>
   15584:	cmp	r0, #0
   15588:	beq	15568 <__assert_fail@plt+0x3cd4>
   1558c:	mov	r3, #0
   15590:	add	r2, sp, #4
   15594:	mov	r1, r6
   15598:	mov	r0, r4
   1559c:	bl	14b18 <__assert_fail@plt+0x3284>
   155a0:	cmp	r0, #0
   155a4:	bne	154b8 <__assert_fail@plt+0x3c24>
   155a8:	ldr	r3, [sp, #4]
   155ac:	ldr	r2, [r3]
   155b0:	cmp	r2, #0
   155b4:	beq	15604 <__assert_fail@plt+0x3d70>
   155b8:	ldr	r0, [r4, #36]	; 0x24
   155bc:	cmp	r0, #0
   155c0:	ldrne	r3, [r0, #4]
   155c4:	strne	r3, [r4, #36]	; 0x24
   155c8:	bne	155dc <__assert_fail@plt+0x3d48>
   155cc:	mov	r0, #8
   155d0:	bl	17f84 <lchmod@@Base+0x26d4>
   155d4:	cmp	r0, #0
   155d8:	beq	15568 <__assert_fail@plt+0x3cd4>
   155dc:	ldr	r3, [sp, #4]
   155e0:	ldr	r2, [r3, #4]
   155e4:	str	r6, [r0]
   155e8:	str	r2, [r0, #4]
   155ec:	str	r0, [r3, #4]
   155f0:	ldr	r3, [r4, #16]
   155f4:	add	r3, r3, #1
   155f8:	str	r3, [r4, #16]
   155fc:	mov	r0, #1
   15600:	b	1556c <__assert_fail@plt+0x3cd8>
   15604:	str	r6, [r3]
   15608:	ldr	r3, [r4, #16]
   1560c:	add	r3, r3, #1
   15610:	str	r3, [r4, #16]
   15614:	ldr	r3, [r4, #12]
   15618:	add	r3, r3, #1
   1561c:	str	r3, [r4, #12]
   15620:	b	155fc <__assert_fail@plt+0x3d68>
   15624:	svcmi	0x00800000
   15628:	push	{r0, r1, r4, lr}
   1562c:	add	r2, sp, #4
   15630:	mov	r4, r1
   15634:	bl	154ac <__assert_fail@plt+0x3c18>
   15638:	cmn	r0, #1
   1563c:	moveq	r4, #0
   15640:	beq	1564c <__assert_fail@plt+0x3db8>
   15644:	cmp	r0, #0
   15648:	ldreq	r4, [sp, #4]
   1564c:	mov	r0, r4
   15650:	add	sp, sp, #8
   15654:	pop	{r4, pc}
   15658:	push	{r0, r1, r4, r5, r6, lr}
   1565c:	mov	r3, #1
   15660:	add	r2, sp, #4
   15664:	mov	r4, r0
   15668:	bl	14b18 <__assert_fail@plt+0x3284>
   1566c:	subs	r5, r0, #0
   15670:	beq	15728 <__assert_fail@plt+0x3e94>
   15674:	ldr	r3, [r4, #16]
   15678:	sub	r3, r3, #1
   1567c:	str	r3, [r4, #16]
   15680:	ldr	r3, [sp, #4]
   15684:	ldr	r3, [r3]
   15688:	cmp	r3, #0
   1568c:	bne	15728 <__assert_fail@plt+0x3e94>
   15690:	vldr	s14, [r4, #8]
   15694:	ldr	r3, [r4, #12]
   15698:	vcvt.f32.u32	s14, s14
   1569c:	sub	r3, r3, #1
   156a0:	vmov	s15, r3
   156a4:	str	r3, [r4, #12]
   156a8:	ldr	r3, [r4, #20]
   156ac:	vldr	s13, [r3]
   156b0:	vcvt.f32.u32	s15, s15
   156b4:	vmul.f32	s14, s14, s13
   156b8:	vcmpe.f32	s15, s14
   156bc:	vmrs	APSR_nzcv, fpscr
   156c0:	bpl	15728 <__assert_fail@plt+0x3e94>
   156c4:	add	r0, r4, #20
   156c8:	bl	14bf4 <__assert_fail@plt+0x3360>
   156cc:	vldr	s15, [r4, #8]
   156d0:	vldr	s14, [r4, #12]
   156d4:	ldr	r3, [r4, #20]
   156d8:	vcvt.f32.u32	s15, s15
   156dc:	vcvt.f32.u32	s13, s14
   156e0:	vldr	s14, [r3]
   156e4:	vmul.f32	s14, s15, s14
   156e8:	vcmpe.f32	s13, s14
   156ec:	vmrs	APSR_nzcv, fpscr
   156f0:	bpl	15728 <__assert_fail@plt+0x3e94>
   156f4:	ldrb	r2, [r3, #16]
   156f8:	mov	r0, r4
   156fc:	vldr	s14, [r3, #4]
   15700:	cmp	r2, #0
   15704:	vmul.f32	s15, s15, s14
   15708:	vldreq	s14, [r3, #8]
   1570c:	vmuleq.f32	s15, s15, s14
   15710:	vcvt.u32.f32	s15, s15
   15714:	vmov	r1, s15
   15718:	bl	1538c <__assert_fail@plt+0x3af8>
   1571c:	cmp	r0, #0
   15720:	ldreq	r0, [r4, #36]	; 0x24
   15724:	beq	15740 <__assert_fail@plt+0x3eac>
   15728:	mov	r0, r5
   1572c:	add	sp, sp, #8
   15730:	pop	{r4, r5, r6, pc}
   15734:	ldr	r6, [r0, #4]
   15738:	bl	12cd8 <__assert_fail@plt+0x1444>
   1573c:	mov	r0, r6
   15740:	cmp	r0, #0
   15744:	bne	15734 <__assert_fail@plt+0x3ea0>
   15748:	str	r0, [r4, #36]	; 0x24
   1574c:	b	15728 <__assert_fail@plt+0x3e94>
   15750:	b	15658 <__assert_fail@plt+0x3dc4>
   15754:	push	{r4, r5, r6, lr}
   15758:	mov	r4, r0
   1575c:	mov	r5, r1
   15760:	ldr	r0, [r0]
   15764:	bl	18528 <lchmod@@Base+0x2c78>
   15768:	ldr	r1, [r4, #8]
   1576c:	mov	r2, r5
   15770:	mov	r3, #0
   15774:	eor	r0, r0, r1
   15778:	ldr	r1, [r4, #12]
   1577c:	bl	18714 <lchmod@@Base+0x2e64>
   15780:	mov	r0, r2
   15784:	pop	{r4, r5, r6, pc}
   15788:	push	{r4, r5, r6, lr}
   1578c:	ldrd	r2, [r1, #8]
   15790:	ldrd	r4, [r0, #8]
   15794:	cmp	r5, r3
   15798:	cmpeq	r4, r2
   1579c:	bne	157cc <__assert_fail@plt+0x3f38>
   157a0:	ldrd	r4, [r0, #16]
   157a4:	ldrd	r2, [r1, #16]
   157a8:	cmp	r5, r3
   157ac:	cmpeq	r4, r2
   157b0:	bne	157cc <__assert_fail@plt+0x3f38>
   157b4:	ldr	r0, [r0]
   157b8:	ldr	r1, [r1]
   157bc:	bl	114a4 <strcmp@plt>
   157c0:	clz	r0, r0
   157c4:	lsr	r0, r0, #5
   157c8:	pop	{r4, r5, r6, pc}
   157cc:	mov	r0, #0
   157d0:	pop	{r4, r5, r6, pc}
   157d4:	push	{r4, lr}
   157d8:	mov	r4, r0
   157dc:	ldr	r0, [r0]
   157e0:	bl	12cd8 <__assert_fail@plt+0x1444>
   157e4:	mov	r0, r4
   157e8:	pop	{r4, lr}
   157ec:	b	12cd8 <__assert_fail@plt+0x1444>
   157f0:	mov	r3, #1
   157f4:	str	r1, [r0]
   157f8:	str	r1, [r0, #4]
   157fc:	str	r1, [r0, #8]
   15800:	strb	r3, [r0, #28]
   15804:	mov	r3, #0
   15808:	str	r1, [r0, #12]
   1580c:	str	r1, [r0, #16]
   15810:	str	r3, [r0, #20]
   15814:	str	r3, [r0, #24]
   15818:	bx	lr
   1581c:	ldrb	r0, [r0, #28]
   15820:	bx	lr
   15824:	ldrb	r2, [r0, #28]
   15828:	mov	r3, r0
   1582c:	ldr	ip, [r0, #20]
   15830:	eor	r2, r2, #1
   15834:	add	ip, r2, ip
   15838:	and	ip, ip, #3
   1583c:	ldr	r0, [r0, ip, lsl #2]
   15840:	str	r1, [r3, ip, lsl #2]
   15844:	ldr	r1, [r3, #24]
   15848:	str	ip, [r3, #20]
   1584c:	cmp	r1, ip
   15850:	addeq	r2, r2, r1
   15854:	andeq	r2, r2, #3
   15858:	streq	r2, [r3, #24]
   1585c:	mov	r2, #0
   15860:	strb	r2, [r3, #28]
   15864:	bx	lr
   15868:	ldrb	r2, [r0, #28]
   1586c:	cmp	r2, #0
   15870:	beq	1587c <__assert_fail@plt+0x3fe8>
   15874:	push	{r4, lr}
   15878:	bl	11840 <abort@plt>
   1587c:	ldr	r1, [r0, #16]
   15880:	mov	r3, r0
   15884:	ldr	r2, [r0, #20]
   15888:	ldr	r0, [r0, r2, lsl #2]
   1588c:	str	r1, [r3, r2, lsl #2]
   15890:	ldr	r1, [r3, #24]
   15894:	cmp	r2, r1
   15898:	addne	r2, r2, #3
   1589c:	moveq	r2, #1
   158a0:	andne	r2, r2, #3
   158a4:	strbeq	r2, [r3, #28]
   158a8:	strne	r2, [r3, #20]
   158ac:	bx	lr

000158b0 <lchmod@@Base>:
   158b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   158b4:	mov	r7, r1
   158b8:	sub	sp, sp, #148	; 0x94
   158bc:	mov	r1, #2654208	; 0x288000
   158c0:	mov	r9, r0
   158c4:	bl	11618 <open64@plt>
   158c8:	subs	r5, r0, #0
   158cc:	movlt	r4, r5
   158d0:	blt	1590c <lchmod@@Base+0x5c>
   158d4:	mov	r3, #4096	; 0x1000
   158d8:	add	r2, sp, #40	; 0x28
   158dc:	ldr	r1, [pc, #180]	; 15998 <lchmod@@Base+0xe8>
   158e0:	bl	18934 <lchmod@@Base+0x3084>
   158e4:	mov	r4, r0
   158e8:	bl	116e4 <__errno_location@plt>
   158ec:	cmp	r4, #0
   158f0:	mov	r6, r0
   158f4:	beq	15918 <lchmod@@Base+0x68>
   158f8:	ldr	r4, [r6]
   158fc:	mov	r0, r5
   15900:	bl	1184c <close@plt>
   15904:	str	r4, [r6]
   15908:	mvn	r4, #0
   1590c:	mov	r0, r4
   15910:	add	sp, sp, #148	; 0x94
   15914:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15918:	ldr	r3, [sp, #56]	; 0x38
   1591c:	and	r3, r3, #61440	; 0xf000
   15920:	cmp	r3, #40960	; 0xa000
   15924:	bne	1593c <lchmod@@Base+0x8c>
   15928:	mov	r0, r5
   1592c:	bl	1184c <close@plt>
   15930:	mov	r3, #95	; 0x5f
   15934:	str	r3, [r6]
   15938:	b	15908 <lchmod@@Base+0x58>
   1593c:	ldr	r3, [pc, #88]	; 1599c <lchmod@@Base+0xec>
   15940:	mov	r2, #26
   15944:	mov	r1, #1
   15948:	add	r0, sp, #12
   1594c:	str	r5, [sp]
   15950:	bl	116f0 <__sprintf_chk@plt>
   15954:	mov	r1, r7
   15958:	add	r0, sp, #12
   1595c:	bl	11810 <chmod@plt>
   15960:	mov	r4, r0
   15964:	mov	r0, r5
   15968:	ldr	r8, [r6]
   1596c:	bl	1184c <close@plt>
   15970:	cmp	r4, #0
   15974:	beq	1590c <lchmod@@Base+0x5c>
   15978:	cmp	r8, #2
   1597c:	strne	r8, [r6]
   15980:	bne	1590c <lchmod@@Base+0x5c>
   15984:	mov	r1, r7
   15988:	mov	r0, r9
   1598c:	bl	11810 <chmod@plt>
   15990:	mov	r4, r0
   15994:	b	1590c <lchmod@@Base+0x5c>
   15998:	andeq	r8, r1, sl, lsl sp
   1599c:	andeq	r8, r1, r5, lsl #31
   159a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159a4:	mov	r5, r0
   159a8:	ldrb	r3, [r0]
   159ac:	sub	r3, r3, #48	; 0x30
   159b0:	cmp	r3, #7
   159b4:	subhi	r3, r0, #1
   159b8:	movhi	r0, #1
   159bc:	bhi	15a50 <lchmod@@Base+0x1a0>
   159c0:	mov	r3, r5
   159c4:	mov	r4, #0
   159c8:	ldrb	r2, [r3], #1
   159cc:	lsl	r4, r4, #3
   159d0:	sub	r4, r4, #48	; 0x30
   159d4:	add	r4, r2, r4
   159d8:	cmp	r4, #4096	; 0x1000
   159dc:	bcs	15c8c <lchmod@@Base+0x3dc>
   159e0:	ldrb	r2, [r3]
   159e4:	sub	r1, r2, #48	; 0x30
   159e8:	cmp	r1, #7
   159ec:	bls	159c8 <lchmod@@Base+0x118>
   159f0:	cmp	r2, #0
   159f4:	bne	15c8c <lchmod@@Base+0x3dc>
   159f8:	sub	r3, r3, r5
   159fc:	mov	r0, #32
   15a00:	cmp	r3, #4
   15a04:	andle	r5, r4, #3072	; 0xc00
   15a08:	movwgt	r5, #4095	; 0xfff
   15a0c:	mvnle	r5, r5, lsr #10
   15a10:	mvnle	r5, r5, lsl #10
   15a14:	bl	17bb8 <lchmod@@Base+0x2308>
   15a18:	movw	r3, #317	; 0x13d
   15a1c:	strh	r3, [r0]
   15a20:	movw	r3, #4095	; 0xfff
   15a24:	strd	r4, [r0, #8]
   15a28:	str	r3, [r0, #4]
   15a2c:	mov	r3, #0
   15a30:	strb	r3, [r0, #17]
   15a34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a38:	and	ip, r4, #239	; 0xef
   15a3c:	cmp	r4, #43	; 0x2b
   15a40:	cmpne	ip, #45	; 0x2d
   15a44:	moveq	ip, #1
   15a48:	movne	ip, #0
   15a4c:	add	r0, r0, ip
   15a50:	ldrb	r4, [r3, #1]!
   15a54:	cmp	r4, #0
   15a58:	bne	15a38 <lchmod@@Base+0x188>
   15a5c:	mov	r1, #16
   15a60:	movw	r7, #519	; 0x207
   15a64:	bl	17c78 <lchmod@@Base+0x23c8>
   15a68:	movw	r8, #1080	; 0x438
   15a6c:	mov	ip, r4
   15a70:	mov	r1, #0
   15a74:	ldrb	r3, [r5]
   15a78:	mov	r2, r5
   15a7c:	add	r5, r5, #1
   15a80:	cmp	r3, #97	; 0x61
   15a84:	beq	15b40 <lchmod@@Base+0x290>
   15a88:	bhi	15b10 <lchmod@@Base+0x260>
   15a8c:	cmp	r3, #45	; 0x2d
   15a90:	beq	15aa4 <lchmod@@Base+0x1f4>
   15a94:	cmp	r3, #61	; 0x3d
   15a98:	beq	15aa4 <lchmod@@Base+0x1f4>
   15a9c:	cmp	r3, #43	; 0x2b
   15aa0:	bne	15c88 <lchmod@@Base+0x3d8>
   15aa4:	add	r4, r0, ip, lsl #4
   15aa8:	ldrb	lr, [r2, #1]
   15aac:	mov	r3, r2
   15ab0:	ldrb	r9, [r3], #1
   15ab4:	cmp	lr, #103	; 0x67
   15ab8:	beq	15c04 <lchmod@@Base+0x354>
   15abc:	bhi	15b48 <lchmod@@Base+0x298>
   15ac0:	sub	lr, lr, #48	; 0x30
   15ac4:	cmp	lr, #7
   15ac8:	movls	r2, r3
   15acc:	movls	r3, #0
   15ad0:	bls	15b6c <lchmod@@Base+0x2bc>
   15ad4:	mov	lr, r3
   15ad8:	mov	r5, #1
   15adc:	mov	r3, #0
   15ae0:	ldrb	r6, [lr]
   15ae4:	mov	r2, lr
   15ae8:	add	lr, lr, #1
   15aec:	cmp	r6, #115	; 0x73
   15af0:	beq	15c64 <lchmod@@Base+0x3b4>
   15af4:	bhi	15c2c <lchmod@@Base+0x37c>
   15af8:	cmp	r6, #88	; 0x58
   15afc:	beq	15c6c <lchmod@@Base+0x3bc>
   15b00:	cmp	r6, #114	; 0x72
   15b04:	beq	15c4c <lchmod@@Base+0x39c>
   15b08:	mov	lr, #0
   15b0c:	b	15bb4 <lchmod@@Base+0x304>
   15b10:	cmp	r3, #111	; 0x6f
   15b14:	beq	15b38 <lchmod@@Base+0x288>
   15b18:	cmp	r3, #117	; 0x75
   15b1c:	beq	15b30 <lchmod@@Base+0x280>
   15b20:	cmp	r3, #103	; 0x67
   15b24:	bne	15c88 <lchmod@@Base+0x3d8>
   15b28:	orr	r1, r1, r8
   15b2c:	b	15a74 <lchmod@@Base+0x1c4>
   15b30:	orr	r1, r1, #2496	; 0x9c0
   15b34:	b	15a74 <lchmod@@Base+0x1c4>
   15b38:	orr	r1, r1, r7
   15b3c:	b	15a74 <lchmod@@Base+0x1c4>
   15b40:	movw	r1, #4095	; 0xfff
   15b44:	b	15a74 <lchmod@@Base+0x1c4>
   15b48:	cmp	lr, #111	; 0x6f
   15b4c:	beq	15c18 <lchmod@@Base+0x368>
   15b50:	cmp	lr, #117	; 0x75
   15b54:	bne	15ad4 <lchmod@@Base+0x224>
   15b58:	add	r2, r2, #2
   15b5c:	mov	r5, #3
   15b60:	mov	lr, #0
   15b64:	mov	r3, #448	; 0x1c0
   15b68:	b	15bb4 <lchmod@@Base+0x304>
   15b6c:	ldrb	lr, [r2], #1
   15b70:	lsl	r3, r3, #3
   15b74:	sub	r3, r3, #48	; 0x30
   15b78:	add	r3, lr, r3
   15b7c:	cmp	r3, #4096	; 0x1000
   15b80:	bcs	15c88 <lchmod@@Base+0x3d8>
   15b84:	ldrb	lr, [r2]
   15b88:	sub	r5, lr, #48	; 0x30
   15b8c:	cmp	r5, #7
   15b90:	bls	15b6c <lchmod@@Base+0x2bc>
   15b94:	cmp	r1, #0
   15b98:	bne	15c88 <lchmod@@Base+0x3d8>
   15b9c:	cmp	lr, #0
   15ba0:	cmpne	lr, #44	; 0x2c
   15ba4:	bne	15c88 <lchmod@@Base+0x3d8>
   15ba8:	movw	r1, #4095	; 0xfff
   15bac:	mov	r5, #1
   15bb0:	mov	lr, r1
   15bb4:	cmp	lr, #0
   15bb8:	add	ip, ip, #1
   15bbc:	strb	r9, [r4]
   15bc0:	strb	r5, [r4, #1]
   15bc4:	stmib	r4, {r1, r3}
   15bc8:	bne	15bd8 <lchmod@@Base+0x328>
   15bcc:	cmp	r1, #0
   15bd0:	andne	lr, r1, r3
   15bd4:	moveq	lr, r3
   15bd8:	ldrb	r3, [r2]
   15bdc:	add	r4, r4, #16
   15be0:	str	lr, [r4, #-4]
   15be4:	and	lr, r3, #239	; 0xef
   15be8:	cmp	r3, #43	; 0x2b
   15bec:	cmpne	lr, #45	; 0x2d
   15bf0:	beq	15aa8 <lchmod@@Base+0x1f8>
   15bf4:	cmp	r3, #44	; 0x2c
   15bf8:	bne	15c74 <lchmod@@Base+0x3c4>
   15bfc:	add	r5, r2, #1
   15c00:	b	15a70 <lchmod@@Base+0x1c0>
   15c04:	add	r2, r2, #2
   15c08:	mov	r5, #3
   15c0c:	mov	lr, #0
   15c10:	mov	r3, #56	; 0x38
   15c14:	b	15bb4 <lchmod@@Base+0x304>
   15c18:	add	r2, r2, #2
   15c1c:	mov	r5, #3
   15c20:	mov	lr, #0
   15c24:	mov	r3, #7
   15c28:	b	15bb4 <lchmod@@Base+0x304>
   15c2c:	cmp	r6, #119	; 0x77
   15c30:	beq	15c54 <lchmod@@Base+0x3a4>
   15c34:	cmp	r6, #120	; 0x78
   15c38:	beq	15c5c <lchmod@@Base+0x3ac>
   15c3c:	cmp	r6, #116	; 0x74
   15c40:	bne	15b08 <lchmod@@Base+0x258>
   15c44:	orr	r3, r3, #512	; 0x200
   15c48:	b	15ae0 <lchmod@@Base+0x230>
   15c4c:	orr	r3, r3, #292	; 0x124
   15c50:	b	15ae0 <lchmod@@Base+0x230>
   15c54:	orr	r3, r3, #146	; 0x92
   15c58:	b	15ae0 <lchmod@@Base+0x230>
   15c5c:	orr	r3, r3, #73	; 0x49
   15c60:	b	15ae0 <lchmod@@Base+0x230>
   15c64:	orr	r3, r3, #3072	; 0xc00
   15c68:	b	15ae0 <lchmod@@Base+0x230>
   15c6c:	mov	r5, #2
   15c70:	b	15ae0 <lchmod@@Base+0x230>
   15c74:	cmp	r3, #0
   15c78:	bne	15c88 <lchmod@@Base+0x3d8>
   15c7c:	add	ip, r0, ip, lsl #4
   15c80:	strb	r3, [ip, #1]
   15c84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c88:	bl	12cd8 <__assert_fail@plt+0x1444>
   15c8c:	mov	r0, #0
   15c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c94:	push	{r4, r5, lr}
   15c98:	sub	sp, sp, #108	; 0x6c
   15c9c:	mov	r1, sp
   15ca0:	bl	18904 <lchmod@@Base+0x3054>
   15ca4:	subs	r4, r0, #0
   15ca8:	movne	r0, #0
   15cac:	bne	15cd8 <lchmod@@Base+0x428>
   15cb0:	mov	r0, #32
   15cb4:	ldr	r5, [sp, #16]
   15cb8:	bl	17bb8 <lchmod@@Base+0x2308>
   15cbc:	movw	r3, #317	; 0x13d
   15cc0:	strh	r3, [r0]
   15cc4:	movw	r3, #4095	; 0xfff
   15cc8:	str	r3, [r0, #4]
   15ccc:	str	r5, [r0, #8]
   15cd0:	str	r3, [r0, #12]
   15cd4:	strb	r4, [r0, #17]
   15cd8:	add	sp, sp, #108	; 0x6c
   15cdc:	pop	{r4, r5, pc}
   15ce0:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ce4:	cmp	r1, #0
   15ce8:	ubfx	r0, r0, #0, #12
   15cec:	movne	r6, #3072	; 0xc00
   15cf0:	moveq	r6, #0
   15cf4:	add	r3, r3, #16
   15cf8:	mov	r4, #0
   15cfc:	ldr	r5, [sp, #28]
   15d00:	mvn	r2, r2
   15d04:	ldrb	r7, [r3, #-15]
   15d08:	cmp	r7, #0
   15d0c:	bne	15d1c <lchmod@@Base+0x46c>
   15d10:	cmp	r5, #0
   15d14:	strne	r4, [r5]
   15d18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15d1c:	cmp	r7, #2
   15d20:	ldr	ip, [r3, #-12]
   15d24:	ldr	r8, [r3, #-4]
   15d28:	ldr	lr, [r3, #-8]
   15d2c:	bic	r8, r6, r8
   15d30:	beq	15db0 <lchmod@@Base+0x500>
   15d34:	cmp	r7, #3
   15d38:	bne	15d70 <lchmod@@Base+0x4c0>
   15d3c:	and	lr, lr, r0
   15d40:	tst	lr, #292	; 0x124
   15d44:	movne	r7, #292	; 0x124
   15d48:	moveq	r7, #0
   15d4c:	tst	lr, #146	; 0x92
   15d50:	movne	r9, #146	; 0x92
   15d54:	moveq	r9, #0
   15d58:	tst	lr, #73	; 0x49
   15d5c:	orr	r7, r7, r9
   15d60:	movne	r9, #73	; 0x49
   15d64:	moveq	r9, #0
   15d68:	orr	r7, r7, r9
   15d6c:	orr	lr, r7, lr
   15d70:	cmp	ip, #0
   15d74:	bic	lr, lr, r8
   15d78:	movne	r7, ip
   15d7c:	moveq	r7, r2
   15d80:	and	lr, lr, r7
   15d84:	ldrb	r7, [r3, #-16]
   15d88:	cmp	r7, #45	; 0x2d
   15d8c:	orreq	r4, r4, lr
   15d90:	biceq	r0, r0, lr
   15d94:	beq	15de0 <lchmod@@Base+0x530>
   15d98:	cmp	r7, #61	; 0x3d
   15d9c:	beq	15dc0 <lchmod@@Base+0x510>
   15da0:	cmp	r7, #43	; 0x2b
   15da4:	orreq	r4, r4, lr
   15da8:	orreq	r0, r0, lr
   15dac:	b	15de0 <lchmod@@Base+0x530>
   15db0:	and	r7, r0, #73	; 0x49
   15db4:	orrs	r7, r7, r1
   15db8:	orrne	lr, lr, #73	; 0x49
   15dbc:	b	15d70 <lchmod@@Base+0x4c0>
   15dc0:	cmp	ip, #0
   15dc4:	mvnne	ip, ip
   15dc8:	orr	ip, ip, r8
   15dcc:	mvn	r7, ip
   15dd0:	and	ip, ip, r0
   15dd4:	ubfx	r7, r7, #0, #12
   15dd8:	orr	r0, ip, lr
   15ddc:	orr	r4, r4, r7
   15de0:	add	r3, r3, #16
   15de4:	b	15d04 <lchmod@@Base+0x454>
   15de8:	push	{r2, r3}
   15dec:	push	{r0, r1, r2, lr}
   15df0:	ldr	r2, [sp, #16]
   15df4:	ands	r3, r2, #64	; 0x40
   15df8:	addne	r3, sp, #20
   15dfc:	strne	r3, [sp, #4]
   15e00:	ldrne	r3, [sp, #20]
   15e04:	bl	116cc <openat64@plt>
   15e08:	bl	17674 <lchmod@@Base+0x1dc4>
   15e0c:	add	sp, sp, #12
   15e10:	pop	{lr}		; (ldr lr, [sp], #4)
   15e14:	add	sp, sp, #8
   15e18:	bx	lr
   15e1c:	orr	r2, r2, #540672	; 0x84000
   15e20:	push	{r4, r5, r6, r7, r8, lr}
   15e24:	mov	r5, r3
   15e28:	orr	r2, r2, #2304	; 0x900
   15e2c:	bl	15de8 <lchmod@@Base+0x538>
   15e30:	subs	r6, r0, #0
   15e34:	movlt	r4, #0
   15e38:	blt	15e64 <lchmod@@Base+0x5b4>
   15e3c:	bl	11798 <fdopendir@plt>
   15e40:	subs	r4, r0, #0
   15e44:	strne	r6, [r5]
   15e48:	bne	15e64 <lchmod@@Base+0x5b4>
   15e4c:	bl	116e4 <__errno_location@plt>
   15e50:	mov	r5, r0
   15e54:	mov	r0, r6
   15e58:	ldr	r7, [r5]
   15e5c:	bl	1184c <close@plt>
   15e60:	str	r7, [r5]
   15e64:	mov	r0, r4
   15e68:	pop	{r4, r5, r6, r7, r8, pc}
   15e6c:	push	{r4, r5, r6, lr}
   15e70:	subs	r4, r0, #0
   15e74:	bne	15e8c <lchmod@@Base+0x5dc>
   15e78:	ldr	r3, [pc, #124]	; 15efc <lchmod@@Base+0x64c>
   15e7c:	ldr	r0, [pc, #124]	; 15f00 <lchmod@@Base+0x650>
   15e80:	ldr	r1, [r3]
   15e84:	bl	11828 <fputs@plt>
   15e88:	bl	11840 <abort@plt>
   15e8c:	mov	r1, #47	; 0x2f
   15e90:	bl	11774 <strrchr@plt>
   15e94:	subs	r6, r0, #0
   15e98:	beq	15ee8 <lchmod@@Base+0x638>
   15e9c:	add	r5, r6, #1
   15ea0:	sub	r3, r5, r4
   15ea4:	cmp	r3, #6
   15ea8:	ble	15ee8 <lchmod@@Base+0x638>
   15eac:	mov	r2, #7
   15eb0:	ldr	r1, [pc, #76]	; 15f04 <lchmod@@Base+0x654>
   15eb4:	sub	r0, r6, #6
   15eb8:	bl	11834 <strncmp@plt>
   15ebc:	cmp	r0, #0
   15ec0:	bne	15ee8 <lchmod@@Base+0x638>
   15ec4:	mov	r2, #3
   15ec8:	ldr	r1, [pc, #56]	; 15f08 <lchmod@@Base+0x658>
   15ecc:	mov	r0, r5
   15ed0:	bl	11834 <strncmp@plt>
   15ed4:	cmp	r0, #0
   15ed8:	ldreq	r3, [pc, #44]	; 15f0c <lchmod@@Base+0x65c>
   15edc:	addeq	r4, r6, #4
   15ee0:	movne	r4, r5
   15ee4:	streq	r4, [r3]
   15ee8:	ldr	r3, [pc, #32]	; 15f10 <lchmod@@Base+0x660>
   15eec:	str	r4, [r3]
   15ef0:	ldr	r3, [pc, #28]	; 15f14 <lchmod@@Base+0x664>
   15ef4:	str	r4, [r3]
   15ef8:	pop	{r4, r5, r6, pc}
   15efc:	andeq	sl, r2, r0, ror #3
   15f00:	muleq	r1, r6, pc	; <UNPREDICTABLE>
   15f04:	andeq	r8, r1, lr, asr #31
   15f08:	ldrdeq	r8, [r1], -r6
   15f0c:	ldrdeq	sl, [r2], -r0
   15f10:	strdeq	sl, [r2], -r8
   15f14:	ldrdeq	sl, [r2], -r4
   15f18:	push	{r4, lr}
   15f1c:	mov	r2, #48	; 0x30
   15f20:	mov	r4, r1
   15f24:	mov	r1, #0
   15f28:	bl	11708 <memset@plt>
   15f2c:	cmp	r4, #10
   15f30:	bne	15f38 <lchmod@@Base+0x688>
   15f34:	bl	11840 <abort@plt>
   15f38:	str	r4, [r0]
   15f3c:	pop	{r4, pc}
   15f40:	push	{r4, r5, r6, lr}
   15f44:	mov	r2, #5
   15f48:	mov	r6, r0
   15f4c:	mov	r5, r1
   15f50:	mov	r1, r0
   15f54:	mov	r0, #0
   15f58:	bl	11540 <dcgettext@plt>
   15f5c:	cmp	r6, r0
   15f60:	mov	r4, r0
   15f64:	bne	15fd4 <lchmod@@Base+0x724>
   15f68:	bl	18578 <lchmod@@Base+0x2cc8>
   15f6c:	ldrb	r3, [r0]
   15f70:	bic	r3, r3, #32
   15f74:	cmp	r3, #85	; 0x55
   15f78:	bne	15fdc <lchmod@@Base+0x72c>
   15f7c:	ldrb	r3, [r0, #1]
   15f80:	bic	r3, r3, #32
   15f84:	cmp	r3, #84	; 0x54
   15f88:	bne	1604c <lchmod@@Base+0x79c>
   15f8c:	ldrb	r3, [r0, #2]
   15f90:	bic	r3, r3, #32
   15f94:	cmp	r3, #70	; 0x46
   15f98:	bne	1604c <lchmod@@Base+0x79c>
   15f9c:	ldrb	r3, [r0, #3]
   15fa0:	cmp	r3, #45	; 0x2d
   15fa4:	bne	1604c <lchmod@@Base+0x79c>
   15fa8:	ldrb	r3, [r0, #4]
   15fac:	cmp	r3, #56	; 0x38
   15fb0:	bne	1604c <lchmod@@Base+0x79c>
   15fb4:	ldrb	r3, [r0, #5]
   15fb8:	cmp	r3, #0
   15fbc:	bne	1604c <lchmod@@Base+0x79c>
   15fc0:	ldrb	r2, [r4]
   15fc4:	ldr	r3, [pc, #144]	; 1605c <lchmod@@Base+0x7ac>
   15fc8:	ldr	r4, [pc, #144]	; 16060 <lchmod@@Base+0x7b0>
   15fcc:	cmp	r2, #96	; 0x60
   15fd0:	movne	r4, r3
   15fd4:	mov	r0, r4
   15fd8:	pop	{r4, r5, r6, pc}
   15fdc:	cmp	r3, #71	; 0x47
   15fe0:	bne	1604c <lchmod@@Base+0x79c>
   15fe4:	ldrb	r3, [r0, #1]
   15fe8:	bic	r3, r3, #32
   15fec:	cmp	r3, #66	; 0x42
   15ff0:	bne	1604c <lchmod@@Base+0x79c>
   15ff4:	ldrb	r3, [r0, #2]
   15ff8:	cmp	r3, #49	; 0x31
   15ffc:	bne	1604c <lchmod@@Base+0x79c>
   16000:	ldrb	r3, [r0, #3]
   16004:	cmp	r3, #56	; 0x38
   16008:	bne	1604c <lchmod@@Base+0x79c>
   1600c:	ldrb	r3, [r0, #4]
   16010:	cmp	r3, #48	; 0x30
   16014:	bne	1604c <lchmod@@Base+0x79c>
   16018:	ldrb	r3, [r0, #5]
   1601c:	cmp	r3, #51	; 0x33
   16020:	bne	1604c <lchmod@@Base+0x79c>
   16024:	ldrb	r3, [r0, #6]
   16028:	cmp	r3, #48	; 0x30
   1602c:	bne	1604c <lchmod@@Base+0x79c>
   16030:	ldrb	r3, [r0, #7]
   16034:	cmp	r3, #0
   16038:	bne	1604c <lchmod@@Base+0x79c>
   1603c:	ldrb	r2, [r4]
   16040:	ldr	r3, [pc, #28]	; 16064 <lchmod@@Base+0x7b4>
   16044:	ldr	r4, [pc, #28]	; 16068 <lchmod@@Base+0x7b8>
   16048:	b	15fcc <lchmod@@Base+0x71c>
   1604c:	ldr	r4, [pc, #24]	; 1606c <lchmod@@Base+0x7bc>
   16050:	cmp	r5, #9
   16054:	ldr	r3, [pc, #20]	; 16070 <lchmod@@Base+0x7c0>
   16058:	b	15fd0 <lchmod@@Base+0x720>
   1605c:	andeq	r9, r1, r2, lsr r0
   16060:	andeq	r9, r1, sp, lsr r0
   16064:	andeq	r9, r1, r6, lsr r0
   16068:	andeq	r9, r1, r9, lsr r0
   1606c:	andeq	r9, r1, r0, lsr r0
   16070:	andeq	r9, r1, r1, asr #32
   16074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16078:	sub	sp, sp, #108	; 0x6c
   1607c:	mov	r8, r0
   16080:	mov	r5, r1
   16084:	mov	r6, #0
   16088:	str	r3, [sp, #40]	; 0x28
   1608c:	str	r2, [sp, #48]	; 0x30
   16090:	ldr	sl, [sp, #144]	; 0x90
   16094:	bl	115c4 <__ctype_get_mb_cur_max@plt>
   16098:	ldr	r3, [sp, #148]	; 0x94
   1609c:	str	r6, [sp, #24]
   160a0:	str	r6, [sp, #32]
   160a4:	str	r6, [sp, #44]	; 0x2c
   160a8:	str	r6, [sp, #52]	; 0x34
   160ac:	ubfx	r7, r3, #1, #1
   160b0:	mov	r3, #1
   160b4:	str	r6, [sp, #60]	; 0x3c
   160b8:	str	r3, [sp, #72]	; 0x48
   160bc:	str	r0, [sp, #76]	; 0x4c
   160c0:	cmp	sl, #10
   160c4:	ldrls	pc, [pc, sl, lsl #2]
   160c8:	b	1630c <lchmod@@Base+0xa5c>
   160cc:	strdeq	r6, [r1], -r8
   160d0:	andeq	r6, r1, r4, lsr #6
   160d4:	andeq	r6, r1, r8, lsr #5
   160d8:	andeq	r6, r1, r0, asr #5
   160dc:	muleq	r1, r0, r2
   160e0:	andeq	r6, r1, r8, ror #3
   160e4:	andeq	r6, r1, r8, asr #3
   160e8:	andeq	r6, r1, r0, lsl r3
   160ec:	andeq	r6, r1, r8, lsl r2
   160f0:	andeq	r6, r1, r8, lsl r2
   160f4:	andeq	r6, r1, r8, lsl r2
   160f8:	mov	r4, sl
   160fc:	mov	r7, #0
   16100:	mov	r9, r5
   16104:	mov	r3, #0
   16108:	str	r6, [sp, #68]	; 0x44
   1610c:	str	r3, [sp, #28]
   16110:	ldr	r3, [sp, #40]	; 0x28
   16114:	cmn	r3, #1
   16118:	bne	16cb8 <lchmod@@Base+0x1408>
   1611c:	ldr	r2, [sp, #28]
   16120:	ldr	r3, [sp, #48]	; 0x30
   16124:	ldrb	r3, [r3, r2]
   16128:	adds	r3, r3, #0
   1612c:	movne	r3, #1
   16130:	str	r3, [sp, #36]	; 0x24
   16134:	ldr	r3, [sp, #36]	; 0x24
   16138:	cmp	r3, #0
   1613c:	bne	16348 <lchmod@@Base+0xa98>
   16140:	sub	r3, sl, #2
   16144:	cmp	r4, #0
   16148:	clz	r3, r3
   1614c:	movne	r2, #0
   16150:	lsr	r3, r3, #5
   16154:	andeq	r2, r3, r7
   16158:	cmp	r2, #0
   1615c:	bne	1650c <lchmod@@Base+0xc5c>
   16160:	eor	r7, r7, #1
   16164:	ands	r3, r3, r7
   16168:	beq	16d30 <lchmod@@Base+0x1480>
   1616c:	ldr	r2, [sp, #68]	; 0x44
   16170:	cmp	r2, #0
   16174:	beq	16cf8 <lchmod@@Base+0x1448>
   16178:	ldr	r3, [sp, #72]	; 0x48
   1617c:	cmp	r3, #0
   16180:	beq	16ccc <lchmod@@Base+0x141c>
   16184:	ldr	r2, [sp, #48]	; 0x30
   16188:	ldr	r3, [sp, #160]	; 0xa0
   1618c:	ldr	r1, [sp, #60]	; 0x3c
   16190:	str	r3, [sp, #16]
   16194:	ldr	r3, [sp, #156]	; 0x9c
   16198:	str	r3, [sp, #12]
   1619c:	ldr	r3, [sp, #152]	; 0x98
   161a0:	str	r3, [sp, #8]
   161a4:	ldr	r3, [sp, #148]	; 0x94
   161a8:	str	r3, [sp, #4]
   161ac:	mov	r3, #5
   161b0:	str	r3, [sp]
   161b4:	ldr	r3, [sp, #40]	; 0x28
   161b8:	mov	r0, r8
   161bc:	bl	16074 <lchmod@@Base+0x7c4>
   161c0:	mov	r4, r0
   161c4:	b	16d24 <lchmod@@Base+0x1474>
   161c8:	ldr	r3, [pc, #2948]	; 16d54 <lchmod@@Base+0x14a4>
   161cc:	mov	r7, #1
   161d0:	mov	r4, #0
   161d4:	mov	sl, #5
   161d8:	str	r7, [sp, #24]
   161dc:	str	r7, [sp, #32]
   161e0:	str	r3, [sp, #44]	; 0x2c
   161e4:	b	16100 <lchmod@@Base+0x850>
   161e8:	cmp	r7, #0
   161ec:	bne	16330 <lchmod@@Base+0xa80>
   161f0:	cmp	r5, #0
   161f4:	mov	r4, #1
   161f8:	movne	r3, #34	; 0x22
   161fc:	strbne	r3, [r8]
   16200:	mov	r3, #1
   16204:	str	r3, [sp, #24]
   16208:	str	r3, [sp, #32]
   1620c:	ldr	r3, [pc, #2880]	; 16d54 <lchmod@@Base+0x14a4>
   16210:	str	r3, [sp, #44]	; 0x2c
   16214:	b	16100 <lchmod@@Base+0x850>
   16218:	cmp	sl, #10
   1621c:	beq	16240 <lchmod@@Base+0x990>
   16220:	mov	r1, sl
   16224:	ldr	r0, [pc, #2860]	; 16d58 <lchmod@@Base+0x14a8>
   16228:	bl	15f40 <lchmod@@Base+0x690>
   1622c:	mov	r1, sl
   16230:	str	r0, [sp, #156]	; 0x9c
   16234:	ldr	r0, [pc, #2848]	; 16d5c <lchmod@@Base+0x14ac>
   16238:	bl	15f40 <lchmod@@Base+0x690>
   1623c:	str	r0, [sp, #160]	; 0xa0
   16240:	cmp	r7, #0
   16244:	moveq	r4, r7
   16248:	beq	16260 <lchmod@@Base+0x9b0>
   1624c:	mov	r4, #0
   16250:	b	16270 <lchmod@@Base+0x9c0>
   16254:	cmp	r5, r4
   16258:	strbhi	r3, [r8, r4]
   1625c:	add	r4, r4, #1
   16260:	ldr	r3, [sp, #156]	; 0x9c
   16264:	ldrb	r3, [r3, r4]
   16268:	cmp	r3, #0
   1626c:	bne	16254 <lchmod@@Base+0x9a4>
   16270:	ldr	r0, [sp, #160]	; 0xa0
   16274:	bl	116b4 <strlen@plt>
   16278:	ldr	r3, [sp, #160]	; 0xa0
   1627c:	str	r0, [sp, #32]
   16280:	str	r3, [sp, #44]	; 0x2c
   16284:	mov	r3, #1
   16288:	str	r3, [sp, #24]
   1628c:	b	16100 <lchmod@@Base+0x850>
   16290:	mov	r3, #1
   16294:	cmp	r7, #0
   16298:	streq	r3, [sp, #24]
   1629c:	beq	162e0 <lchmod@@Base+0xa30>
   162a0:	str	r3, [sp, #32]
   162a4:	b	162cc <lchmod@@Base+0xa1c>
   162a8:	cmp	r7, #0
   162ac:	beq	162e0 <lchmod@@Base+0xa30>
   162b0:	mov	r3, #1
   162b4:	str	r3, [sp, #32]
   162b8:	ldr	r3, [pc, #2716]	; 16d5c <lchmod@@Base+0x14ac>
   162bc:	b	16340 <lchmod@@Base+0xa90>
   162c0:	mov	r7, #1
   162c4:	str	r7, [sp, #24]
   162c8:	str	r7, [sp, #32]
   162cc:	ldr	r3, [pc, #2696]	; 16d5c <lchmod@@Base+0x14ac>
   162d0:	mov	r4, #0
   162d4:	str	r3, [sp, #44]	; 0x2c
   162d8:	mov	sl, #2
   162dc:	b	16100 <lchmod@@Base+0x850>
   162e0:	cmp	r5, #0
   162e4:	movne	r3, #39	; 0x27
   162e8:	movne	r7, #0
   162ec:	strbne	r3, [r8]
   162f0:	moveq	r7, r5
   162f4:	mov	r3, #1
   162f8:	mov	r4, #1
   162fc:	str	r3, [sp, #32]
   16300:	ldr	r3, [pc, #2644]	; 16d5c <lchmod@@Base+0x14ac>
   16304:	str	r3, [sp, #44]	; 0x2c
   16308:	b	162d8 <lchmod@@Base+0xa28>
   1630c:	bl	11840 <abort@plt>
   16310:	mov	r3, #1
   16314:	mov	r7, #0
   16318:	str	r3, [sp, #24]
   1631c:	mov	r4, #0
   16320:	b	16100 <lchmod@@Base+0x850>
   16324:	mov	r7, #1
   16328:	str	sl, [sp, #32]
   1632c:	b	162cc <lchmod@@Base+0xa1c>
   16330:	mov	r3, #1
   16334:	str	r7, [sp, #24]
   16338:	str	r3, [sp, #32]
   1633c:	ldr	r3, [pc, #2576]	; 16d54 <lchmod@@Base+0x14a4>
   16340:	str	r3, [sp, #44]	; 0x2c
   16344:	b	1631c <lchmod@@Base+0xa6c>
   16348:	ldr	fp, [sp, #24]
   1634c:	ldr	r3, [sp, #32]
   16350:	cmp	sl, #2
   16354:	moveq	fp, #0
   16358:	andne	fp, fp, #1
   1635c:	adds	r5, r3, #0
   16360:	movne	r5, #1
   16364:	ands	r3, fp, r5
   16368:	str	r3, [sp, #64]	; 0x40
   1636c:	beq	1643c <lchmod@@Base+0xb8c>
   16370:	ldr	r3, [sp, #28]
   16374:	ldr	r2, [sp, #32]
   16378:	cmp	r2, #1
   1637c:	add	r6, r3, r2
   16380:	mov	r3, r2
   16384:	ldr	r2, [sp, #40]	; 0x28
   16388:	movls	r3, #0
   1638c:	movhi	r3, #1
   16390:	cmn	r2, #1
   16394:	movne	r3, #0
   16398:	cmp	r3, #0
   1639c:	beq	163ac <lchmod@@Base+0xafc>
   163a0:	ldr	r0, [sp, #48]	; 0x30
   163a4:	bl	116b4 <strlen@plt>
   163a8:	str	r0, [sp, #40]	; 0x28
   163ac:	ldr	r3, [sp, #40]	; 0x28
   163b0:	cmp	r6, r3
   163b4:	bhi	16434 <lchmod@@Base+0xb84>
   163b8:	ldr	r0, [sp, #28]
   163bc:	ldr	r2, [sp, #32]
   163c0:	ldr	r3, [sp, #48]	; 0x30
   163c4:	ldr	r1, [sp, #44]	; 0x2c
   163c8:	add	r0, r3, r0
   163cc:	bl	11528 <memcmp@plt>
   163d0:	cmp	r0, #0
   163d4:	bne	16434 <lchmod@@Base+0xb84>
   163d8:	cmp	r7, #0
   163dc:	beq	1643c <lchmod@@Base+0xb8c>
   163e0:	str	r7, [sp, #24]
   163e4:	ldr	r3, [sp, #24]
   163e8:	mov	r1, r9
   163ec:	ldr	r2, [sp, #48]	; 0x30
   163f0:	cmp	sl, #2
   163f4:	movne	r3, #0
   163f8:	andeq	r3, r3, #1
   163fc:	cmp	r3, #0
   16400:	ldr	r3, [sp, #160]	; 0xa0
   16404:	movne	sl, #4
   16408:	str	sl, [sp]
   1640c:	str	r3, [sp, #16]
   16410:	ldr	r3, [sp, #156]	; 0x9c
   16414:	str	r3, [sp, #12]
   16418:	mov	r3, #0
   1641c:	str	r3, [sp, #8]
   16420:	ldr	r3, [sp, #148]	; 0x94
   16424:	bic	r3, r3, #2
   16428:	str	r3, [sp, #4]
   1642c:	ldr	r3, [sp, #40]	; 0x28
   16430:	b	161b8 <lchmod@@Base+0x908>
   16434:	mov	r3, #0
   16438:	str	r3, [sp, #64]	; 0x40
   1643c:	ldr	r2, [sp, #28]
   16440:	ldr	r3, [sp, #48]	; 0x30
   16444:	add	r3, r3, r2
   16448:	str	r3, [sp, #80]	; 0x50
   1644c:	ldr	r3, [sp, #48]	; 0x30
   16450:	ldrb	r6, [r3, r2]
   16454:	cmp	r6, #58	; 0x3a
   16458:	bhi	165bc <lchmod@@Base+0xd0c>
   1645c:	cmp	r6, #43	; 0x2b
   16460:	bcs	1677c <lchmod@@Base+0xecc>
   16464:	cmp	r6, #32
   16468:	beq	167d0 <lchmod@@Base+0xf20>
   1646c:	bhi	16514 <lchmod@@Base+0xc64>
   16470:	cmp	r6, #9
   16474:	beq	16978 <lchmod@@Base+0x10c8>
   16478:	bhi	164d8 <lchmod@@Base+0xc28>
   1647c:	cmp	r6, #7
   16480:	beq	16988 <lchmod@@Base+0x10d8>
   16484:	bhi	169a4 <lchmod@@Base+0x10f4>
   16488:	cmp	r6, #0
   1648c:	beq	167ec <lchmod@@Base+0xf3c>
   16490:	ldr	r3, [sp, #76]	; 0x4c
   16494:	cmp	r3, #1
   16498:	bne	169f0 <lchmod@@Base+0x1140>
   1649c:	bl	11684 <__ctype_b_loc@plt>
   164a0:	ldr	r2, [r0]
   164a4:	sxth	r3, r6
   164a8:	lsl	r3, r3, #1
   164ac:	ldrh	r5, [r2, r3]
   164b0:	ldr	r3, [sp, #76]	; 0x4c
   164b4:	ubfx	r5, r5, #14, #1
   164b8:	str	r3, [sp, #56]	; 0x38
   164bc:	ldr	r3, [sp, #24]
   164c0:	eor	fp, r5, #1
   164c4:	and	fp, fp, r3
   164c8:	ands	fp, fp, #255	; 0xff
   164cc:	beq	166ac <lchmod@@Base+0xdfc>
   164d0:	mov	r5, #0
   164d4:	b	16a9c <lchmod@@Base+0x11ec>
   164d8:	cmp	r6, #11
   164dc:	beq	169ac <lchmod@@Base+0x10fc>
   164e0:	bcc	16980 <lchmod@@Base+0x10d0>
   164e4:	cmp	r6, #12
   164e8:	beq	169b4 <lchmod@@Base+0x1104>
   164ec:	cmp	r6, #13
   164f0:	moveq	r3, #114	; 0x72
   164f4:	bne	16490 <lchmod@@Base+0xbe0>
   164f8:	cmp	sl, #2
   164fc:	movne	r2, #0
   16500:	andeq	r2, r7, #1
   16504:	cmp	r2, #0
   16508:	beq	1698c <lchmod@@Base+0x10dc>
   1650c:	mov	sl, #2
   16510:	b	163e4 <lchmod@@Base+0xb34>
   16514:	cmp	r6, #37	; 0x25
   16518:	beq	1677c <lchmod@@Base+0xecc>
   1651c:	bhi	16530 <lchmod@@Base+0xc80>
   16520:	cmp	r6, #35	; 0x23
   16524:	beq	167c4 <lchmod@@Base+0xf14>
   16528:	mov	r5, #0
   1652c:	b	167d4 <lchmod@@Base+0xf24>
   16530:	cmp	r6, #39	; 0x27
   16534:	bne	16528 <lchmod@@Base+0xc78>
   16538:	cmp	sl, #2
   1653c:	ldrne	r5, [sp, #36]	; 0x24
   16540:	movne	r3, r5
   16544:	strne	r3, [sp, #68]	; 0x44
   16548:	bne	168c8 <lchmod@@Base+0x1018>
   1654c:	cmp	r7, #0
   16550:	bne	163e4 <lchmod@@Base+0xb34>
   16554:	ldr	r3, [sp, #60]	; 0x3c
   16558:	cmp	r9, #0
   1655c:	clz	r3, r3
   16560:	lsr	r3, r3, #5
   16564:	moveq	r3, #0
   16568:	cmp	r3, #0
   1656c:	strne	r9, [sp, #60]	; 0x3c
   16570:	movne	r9, #0
   16574:	bne	16584 <lchmod@@Base+0xcd4>
   16578:	cmp	r9, r4
   1657c:	movhi	r3, #39	; 0x27
   16580:	strbhi	r3, [r8, r4]
   16584:	add	r3, r4, #1
   16588:	ldr	r5, [sp, #36]	; 0x24
   1658c:	mov	fp, #0
   16590:	cmp	r3, r9
   16594:	movcc	r2, #92	; 0x5c
   16598:	str	fp, [sp, #52]	; 0x34
   1659c:	strbcc	r2, [r8, r3]
   165a0:	add	r3, r4, #2
   165a4:	add	r4, r4, #3
   165a8:	cmp	r3, r9
   165ac:	str	r5, [sp, #68]	; 0x44
   165b0:	movcc	r2, #39	; 0x27
   165b4:	strbcc	r2, [r8, r3]
   165b8:	b	166ac <lchmod@@Base+0xdfc>
   165bc:	cmp	r6, #94	; 0x5e
   165c0:	beq	16528 <lchmod@@Base+0xc78>
   165c4:	bhi	16784 <lchmod@@Base+0xed4>
   165c8:	cmp	r6, #90	; 0x5a
   165cc:	bhi	16770 <lchmod@@Base+0xec0>
   165d0:	cmp	r6, #65	; 0x41
   165d4:	bcs	1677c <lchmod@@Base+0xecc>
   165d8:	cmp	r6, #62	; 0x3e
   165dc:	bls	16528 <lchmod@@Base+0xc78>
   165e0:	cmp	r6, #63	; 0x3f
   165e4:	bne	16490 <lchmod@@Base+0xbe0>
   165e8:	cmp	sl, #2
   165ec:	beq	168d0 <lchmod@@Base+0x1020>
   165f0:	cmp	sl, #5
   165f4:	movne	fp, #0
   165f8:	bne	16ca0 <lchmod@@Base+0x13f0>
   165fc:	ldr	r3, [sp, #148]	; 0x94
   16600:	tst	r3, #4
   16604:	beq	168d8 <lchmod@@Base+0x1028>
   16608:	ldr	r3, [sp, #28]
   1660c:	add	r2, r3, #2
   16610:	ldr	r3, [sp, #40]	; 0x28
   16614:	cmp	r2, r3
   16618:	bcs	168d8 <lchmod@@Base+0x1028>
   1661c:	ldr	r1, [sp, #28]
   16620:	ldr	r3, [sp, #48]	; 0x30
   16624:	add	r3, r3, r1
   16628:	ldrb	r1, [r3, #1]
   1662c:	cmp	r1, #63	; 0x3f
   16630:	bne	168d8 <lchmod@@Base+0x1028>
   16634:	ldr	r3, [sp, #48]	; 0x30
   16638:	ldrb	r6, [r3, r2]
   1663c:	sub	r3, r6, #33	; 0x21
   16640:	uxtb	r3, r3
   16644:	cmp	r3, #29
   16648:	bhi	16ca8 <lchmod@@Base+0x13f8>
   1664c:	ldr	r0, [pc, #1804]	; 16d60 <lchmod@@Base+0x14b0>
   16650:	mov	r5, #1
   16654:	ands	r5, r0, r5, lsl r3
   16658:	beq	16cb0 <lchmod@@Base+0x1400>
   1665c:	cmp	r7, #0
   16660:	bne	163e4 <lchmod@@Base+0xb34>
   16664:	cmp	r9, r4
   16668:	add	r3, r4, #1
   1666c:	str	r2, [sp, #28]
   16670:	mov	r5, #0
   16674:	strbhi	r1, [r8, r4]
   16678:	cmp	r9, r3
   1667c:	mov	fp, r5
   16680:	movhi	r1, #34	; 0x22
   16684:	strbhi	r1, [r8, r3]
   16688:	add	r3, r4, #2
   1668c:	cmp	r9, r3
   16690:	movhi	r1, #34	; 0x22
   16694:	strbhi	r1, [r8, r3]
   16698:	add	r3, r4, #3
   1669c:	add	r4, r4, #4
   166a0:	cmp	r9, r3
   166a4:	movhi	r1, #63	; 0x3f
   166a8:	strbhi	r1, [r8, r3]
   166ac:	ldr	r3, [sp, #24]
   166b0:	eor	r3, r3, #1
   166b4:	cmp	sl, #2
   166b8:	orreq	r3, r3, #1
   166bc:	eor	r3, r3, #1
   166c0:	orr	r3, r7, r3
   166c4:	tst	r3, #255	; 0xff
   166c8:	beq	166f4 <lchmod@@Base+0xe44>
   166cc:	ldr	r3, [sp, #152]	; 0x98
   166d0:	cmp	r3, #0
   166d4:	beq	166f4 <lchmod@@Base+0xe44>
   166d8:	ldr	r1, [sp, #152]	; 0x98
   166dc:	ubfx	r2, r6, #5, #8
   166e0:	and	r3, r6, #31
   166e4:	ldr	r2, [r1, r2, lsl #2]
   166e8:	lsr	r3, r2, r3
   166ec:	tst	r3, #1
   166f0:	bne	16700 <lchmod@@Base+0xe50>
   166f4:	ldr	r3, [sp, #64]	; 0x40
   166f8:	cmp	r3, #0
   166fc:	beq	168f8 <lchmod@@Base+0x1048>
   16700:	sub	r3, sl, #2
   16704:	cmp	r7, #0
   16708:	clz	r3, r3
   1670c:	lsr	r3, r3, #5
   16710:	bne	163e4 <lchmod@@Base+0xb34>
   16714:	ldr	r2, [sp, #52]	; 0x34
   16718:	eor	r2, r2, #1
   1671c:	ands	r3, r3, r2
   16720:	beq	16758 <lchmod@@Base+0xea8>
   16724:	cmp	r9, r4
   16728:	str	r3, [sp, #52]	; 0x34
   1672c:	movhi	r2, #39	; 0x27
   16730:	strbhi	r2, [r8, r4]
   16734:	add	r2, r4, #1
   16738:	cmp	r9, r2
   1673c:	movhi	r1, #36	; 0x24
   16740:	strbhi	r1, [r8, r2]
   16744:	add	r2, r4, #2
   16748:	add	r4, r4, #3
   1674c:	cmp	r9, r2
   16750:	movhi	r1, #39	; 0x27
   16754:	strbhi	r1, [r8, r2]
   16758:	cmp	r9, r4
   1675c:	ldr	fp, [sp, #36]	; 0x24
   16760:	movhi	r3, #92	; 0x5c
   16764:	strbhi	r3, [r8, r4]
   16768:	add	r4, r4, #1
   1676c:	b	168f8 <lchmod@@Base+0x1048>
   16770:	cmp	r6, #92	; 0x5c
   16774:	beq	168e0 <lchmod@@Base+0x1030>
   16778:	bls	16528 <lchmod@@Base+0xc78>
   1677c:	ldr	r5, [sp, #36]	; 0x24
   16780:	b	168c8 <lchmod@@Base+0x1018>
   16784:	cmp	r6, #122	; 0x7a
   16788:	bhi	167a8 <lchmod@@Base+0xef8>
   1678c:	cmp	r6, #97	; 0x61
   16790:	bcs	1677c <lchmod@@Base+0xecc>
   16794:	cmp	r6, #95	; 0x5f
   16798:	beq	1677c <lchmod@@Base+0xecc>
   1679c:	cmp	r6, #96	; 0x60
   167a0:	bne	16490 <lchmod@@Base+0xbe0>
   167a4:	b	16528 <lchmod@@Base+0xc78>
   167a8:	cmp	r6, #124	; 0x7c
   167ac:	beq	16528 <lchmod@@Base+0xc78>
   167b0:	bcc	169bc <lchmod@@Base+0x110c>
   167b4:	cmp	r6, #125	; 0x7d
   167b8:	beq	169bc <lchmod@@Base+0x110c>
   167bc:	cmp	r6, #126	; 0x7e
   167c0:	bne	16490 <lchmod@@Base+0xbe0>
   167c4:	ldr	r3, [sp, #28]
   167c8:	cmp	r3, #0
   167cc:	bne	168d8 <lchmod@@Base+0x1028>
   167d0:	ldr	r5, [sp, #36]	; 0x24
   167d4:	cmp	sl, #2
   167d8:	movne	fp, #0
   167dc:	andeq	fp, r7, #1
   167e0:	cmp	fp, #0
   167e4:	beq	166ac <lchmod@@Base+0xdfc>
   167e8:	b	1650c <lchmod@@Base+0xc5c>
   167ec:	ldr	r3, [sp, #24]
   167f0:	cmp	r3, #0
   167f4:	beq	168bc <lchmod@@Base+0x100c>
   167f8:	sub	r2, sl, #2
   167fc:	cmp	r7, #0
   16800:	clz	r2, r2
   16804:	lsr	r2, r2, #5
   16808:	bne	163e0 <lchmod@@Base+0xb30>
   1680c:	ldr	r3, [sp, #52]	; 0x34
   16810:	eor	r3, r3, #1
   16814:	ands	r2, r2, r3
   16818:	moveq	r3, r4
   1681c:	beq	16854 <lchmod@@Base+0xfa4>
   16820:	cmp	r9, r4
   16824:	str	r2, [sp, #52]	; 0x34
   16828:	movhi	r3, #39	; 0x27
   1682c:	strbhi	r3, [r8, r4]
   16830:	add	r3, r4, #1
   16834:	cmp	r9, r3
   16838:	movhi	r1, #36	; 0x24
   1683c:	strbhi	r1, [r8, r3]
   16840:	add	r3, r4, #2
   16844:	cmp	r9, r3
   16848:	movhi	r1, #39	; 0x27
   1684c:	strbhi	r1, [r8, r3]
   16850:	add	r3, r4, #3
   16854:	cmp	r9, r3
   16858:	add	r4, r3, #1
   1685c:	movhi	r2, #92	; 0x5c
   16860:	strbhi	r2, [r8, r3]
   16864:	cmp	fp, #0
   16868:	beq	16c90 <lchmod@@Base+0x13e0>
   1686c:	ldr	r2, [sp, #28]
   16870:	ldr	r1, [sp, #40]	; 0x28
   16874:	add	r2, r2, #1
   16878:	cmp	r2, r1
   1687c:	bcs	168b4 <lchmod@@Base+0x1004>
   16880:	ldr	r1, [sp, #48]	; 0x30
   16884:	mov	r6, #48	; 0x30
   16888:	ldrb	r2, [r1, r2]
   1688c:	sub	r2, r2, #48	; 0x30
   16890:	cmp	r2, #9
   16894:	bhi	16ca0 <lchmod@@Base+0x13f0>
   16898:	cmp	r9, r4
   1689c:	add	r2, r3, #2
   168a0:	strbhi	r6, [r8, r4]
   168a4:	cmp	r9, r2
   168a8:	add	r4, r3, #3
   168ac:	movhi	r1, #48	; 0x30
   168b0:	strbhi	r1, [r8, r2]
   168b4:	mov	r5, #0
   168b8:	b	16c98 <lchmod@@Base+0x13e8>
   168bc:	ldr	r3, [sp, #148]	; 0x94
   168c0:	ands	r5, r3, #1
   168c4:	bne	1694c <lchmod@@Base+0x109c>
   168c8:	mov	fp, #0
   168cc:	b	166ac <lchmod@@Base+0xdfc>
   168d0:	cmp	r7, #0
   168d4:	bne	163e4 <lchmod@@Base+0xb34>
   168d8:	mov	r5, #0
   168dc:	b	168c8 <lchmod@@Base+0x1018>
   168e0:	cmp	sl, #2
   168e4:	bne	16958 <lchmod@@Base+0x10a8>
   168e8:	cmp	r7, #0
   168ec:	bne	163e4 <lchmod@@Base+0xb34>
   168f0:	mov	r5, r7
   168f4:	mov	fp, r7
   168f8:	ldr	r3, [sp, #52]	; 0x34
   168fc:	eor	fp, fp, #1
   16900:	tst	r3, fp
   16904:	beq	16930 <lchmod@@Base+0x1080>
   16908:	cmp	r9, r4
   1690c:	movhi	r3, #39	; 0x27
   16910:	strbhi	r3, [r8, r4]
   16914:	add	r3, r4, #1
   16918:	add	r4, r4, #2
   1691c:	cmp	r9, r3
   16920:	movhi	r2, #39	; 0x27
   16924:	strbhi	r2, [r8, r3]
   16928:	mov	r3, #0
   1692c:	str	r3, [sp, #52]	; 0x34
   16930:	cmp	r9, r4
   16934:	ldr	r3, [sp, #72]	; 0x48
   16938:	strbhi	r6, [r8, r4]
   1693c:	cmp	r5, #0
   16940:	add	r4, r4, #1
   16944:	moveq	r3, #0
   16948:	str	r3, [sp, #72]	; 0x48
   1694c:	ldr	r3, [sp, #28]
   16950:	add	r3, r3, #1
   16954:	b	1610c <lchmod@@Base+0x85c>
   16958:	ldr	r3, [sp, #24]
   1695c:	and	r3, r3, r7
   16960:	tst	r5, r3
   16964:	moveq	r3, r6
   16968:	beq	164f8 <lchmod@@Base+0xc48>
   1696c:	mov	fp, #0
   16970:	mov	r5, fp
   16974:	b	168f8 <lchmod@@Base+0x1048>
   16978:	mov	r3, #116	; 0x74
   1697c:	b	164f8 <lchmod@@Base+0xc48>
   16980:	mov	r3, #110	; 0x6e
   16984:	b	164f8 <lchmod@@Base+0xc48>
   16988:	mov	r3, #97	; 0x61
   1698c:	ldr	r2, [sp, #24]
   16990:	cmp	r2, #0
   16994:	beq	168d8 <lchmod@@Base+0x1028>
   16998:	mov	r6, r3
   1699c:	mov	r5, #0
   169a0:	b	16700 <lchmod@@Base+0xe50>
   169a4:	mov	r3, #98	; 0x62
   169a8:	b	1698c <lchmod@@Base+0x10dc>
   169ac:	mov	r3, #118	; 0x76
   169b0:	b	1698c <lchmod@@Base+0x10dc>
   169b4:	mov	r3, #102	; 0x66
   169b8:	b	1698c <lchmod@@Base+0x10dc>
   169bc:	ldr	r3, [sp, #40]	; 0x28
   169c0:	cmn	r3, #1
   169c4:	bne	169e4 <lchmod@@Base+0x1134>
   169c8:	ldr	r3, [sp, #48]	; 0x30
   169cc:	ldrb	r3, [r3, #1]
   169d0:	adds	r3, r3, #0
   169d4:	movne	r3, #1
   169d8:	cmp	r3, #0
   169dc:	bne	168d8 <lchmod@@Base+0x1028>
   169e0:	b	167c4 <lchmod@@Base+0xf14>
   169e4:	ldr	r3, [sp, #40]	; 0x28
   169e8:	subs	r3, r3, #1
   169ec:	b	169d4 <lchmod@@Base+0x1124>
   169f0:	mov	r3, #0
   169f4:	mov	r2, #0
   169f8:	strd	r2, [sp, #96]	; 0x60
   169fc:	ldr	r3, [sp, #40]	; 0x28
   16a00:	cmn	r3, #1
   16a04:	bne	16a14 <lchmod@@Base+0x1164>
   16a08:	ldr	r0, [sp, #48]	; 0x30
   16a0c:	bl	116b4 <strlen@plt>
   16a10:	str	r0, [sp, #40]	; 0x28
   16a14:	ldr	r5, [sp, #36]	; 0x24
   16a18:	mov	r3, #0
   16a1c:	str	r3, [sp, #56]	; 0x38
   16a20:	ldr	r3, [sp, #28]
   16a24:	add	r0, sp, #92	; 0x5c
   16a28:	ldr	r1, [sp, #40]	; 0x28
   16a2c:	ldr	r2, [sp, #56]	; 0x38
   16a30:	add	r2, r3, r2
   16a34:	ldr	r3, [sp, #48]	; 0x30
   16a38:	add	fp, r3, r2
   16a3c:	sub	r2, r1, r2
   16a40:	add	r3, sp, #96	; 0x60
   16a44:	mov	r1, fp
   16a48:	bl	185ac <lchmod@@Base+0x2cfc>
   16a4c:	subs	r2, r0, #0
   16a50:	beq	16a90 <lchmod@@Base+0x11e0>
   16a54:	cmn	r2, #1
   16a58:	beq	16c64 <lchmod@@Base+0x13b4>
   16a5c:	cmn	r2, #2
   16a60:	bne	16bd4 <lchmod@@Base+0x1324>
   16a64:	ldr	r3, [sp, #28]
   16a68:	ldr	r2, [sp, #56]	; 0x38
   16a6c:	add	r3, r3, r2
   16a70:	ldr	r2, [sp, #40]	; 0x28
   16a74:	cmp	r2, r3
   16a78:	bls	16c64 <lchmod@@Base+0x13b4>
   16a7c:	ldr	r2, [sp, #56]	; 0x38
   16a80:	ldr	r3, [sp, #80]	; 0x50
   16a84:	ldrb	r5, [r3, r2]
   16a88:	cmp	r5, #0
   16a8c:	bne	16bc4 <lchmod@@Base+0x1314>
   16a90:	ldr	r3, [sp, #56]	; 0x38
   16a94:	cmp	r3, #1
   16a98:	bls	164bc <lchmod@@Base+0xc0c>
   16a9c:	ldr	r3, [sp, #28]
   16aa0:	mov	fp, #0
   16aa4:	mov	ip, #92	; 0x5c
   16aa8:	ldr	r2, [sp, #56]	; 0x38
   16aac:	add	r3, r3, r2
   16ab0:	ldr	r2, [sp, #24]
   16ab4:	str	r3, [sp, #36]	; 0x24
   16ab8:	eor	r3, r5, #1
   16abc:	and	r3, r3, r2
   16ac0:	mov	r2, #39	; 0x27
   16ac4:	uxtb	r3, r3
   16ac8:	cmp	r3, #0
   16acc:	beq	16c6c <lchmod@@Base+0x13bc>
   16ad0:	sub	r0, sl, #2
   16ad4:	cmp	r7, #0
   16ad8:	clz	r0, r0
   16adc:	lsr	r0, r0, #5
   16ae0:	bne	163e0 <lchmod@@Base+0xb30>
   16ae4:	ldr	r1, [sp, #52]	; 0x34
   16ae8:	eor	r1, r1, #1
   16aec:	ands	r1, r0, r1
   16af0:	beq	16b20 <lchmod@@Base+0x1270>
   16af4:	cmp	r9, r4
   16af8:	add	r0, r4, #1
   16afc:	str	r1, [sp, #52]	; 0x34
   16b00:	strbhi	r2, [r8, r4]
   16b04:	cmp	r9, r0
   16b08:	movhi	lr, #36	; 0x24
   16b0c:	strbhi	lr, [r8, r0]
   16b10:	add	r0, r4, #2
   16b14:	add	r4, r4, #3
   16b18:	cmp	r9, r0
   16b1c:	strbhi	r2, [r8, r0]
   16b20:	cmp	r9, r4
   16b24:	add	r0, r4, #1
   16b28:	mov	fp, r3
   16b2c:	strbhi	ip, [r8, r4]
   16b30:	cmp	r9, r0
   16b34:	lsrhi	r1, r6, #6
   16b38:	addhi	r1, r1, #48	; 0x30
   16b3c:	strbhi	r1, [r8, r0]
   16b40:	add	r0, r4, #2
   16b44:	add	r4, r4, #3
   16b48:	cmp	r9, r0
   16b4c:	ubfxhi	r1, r6, #3, #3
   16b50:	and	r6, r6, #7
   16b54:	add	r6, r6, #48	; 0x30
   16b58:	addhi	r1, r1, #48	; 0x30
   16b5c:	strbhi	r1, [r8, r0]
   16b60:	eor	r0, fp, #1
   16b64:	ldr	r1, [sp, #28]
   16b68:	ldr	lr, [sp, #52]	; 0x34
   16b6c:	add	r1, r1, #1
   16b70:	and	r0, r0, lr
   16b74:	ldr	lr, [sp, #36]	; 0x24
   16b78:	cmp	r1, lr
   16b7c:	bcs	168f8 <lchmod@@Base+0x1048>
   16b80:	cmp	r0, #0
   16b84:	beq	16ba8 <lchmod@@Base+0x12f8>
   16b88:	cmp	r9, r4
   16b8c:	add	r0, r4, #1
   16b90:	strbhi	r2, [r8, r4]
   16b94:	cmp	r9, r0
   16b98:	add	r4, r4, #2
   16b9c:	strbhi	r2, [r8, r0]
   16ba0:	mov	r0, #0
   16ba4:	str	r0, [sp, #52]	; 0x34
   16ba8:	ldr	r0, [sp, #48]	; 0x30
   16bac:	cmp	r9, r4
   16bb0:	str	r1, [sp, #28]
   16bb4:	strbhi	r6, [r8, r4]
   16bb8:	add	r4, r4, #1
   16bbc:	ldrb	r6, [r0, r1]
   16bc0:	b	16ac8 <lchmod@@Base+0x1218>
   16bc4:	ldr	r3, [sp, #56]	; 0x38
   16bc8:	add	r3, r3, #1
   16bcc:	str	r3, [sp, #56]	; 0x38
   16bd0:	b	16a64 <lchmod@@Base+0x11b4>
   16bd4:	cmp	sl, #2
   16bd8:	movne	r3, #0
   16bdc:	andeq	r3, r7, #1
   16be0:	cmp	r3, #0
   16be4:	movne	r1, #1
   16be8:	bne	16c44 <lchmod@@Base+0x1394>
   16bec:	ldr	r0, [sp, #92]	; 0x5c
   16bf0:	str	r2, [sp, #84]	; 0x54
   16bf4:	bl	11594 <iswprint@plt>
   16bf8:	ldr	r3, [sp, #56]	; 0x38
   16bfc:	cmp	r0, #0
   16c00:	add	r0, sp, #96	; 0x60
   16c04:	moveq	r5, #0
   16c08:	ldr	r2, [sp, #84]	; 0x54
   16c0c:	add	r3, r3, r2
   16c10:	str	r3, [sp, #56]	; 0x38
   16c14:	bl	11510 <mbsinit@plt>
   16c18:	cmp	r0, #0
   16c1c:	beq	16a20 <lchmod@@Base+0x1170>
   16c20:	b	16a90 <lchmod@@Base+0x11e0>
   16c24:	ldrb	r3, [fp, #1]!
   16c28:	cmp	r3, #94	; 0x5e
   16c2c:	beq	1650c <lchmod@@Base+0xc5c>
   16c30:	bhi	16c50 <lchmod@@Base+0x13a0>
   16c34:	sub	r3, r3, #91	; 0x5b
   16c38:	cmp	r3, #1
   16c3c:	bls	1650c <lchmod@@Base+0xc5c>
   16c40:	add	r1, r1, #1
   16c44:	cmp	r1, r2
   16c48:	bne	16c24 <lchmod@@Base+0x1374>
   16c4c:	b	16bec <lchmod@@Base+0x133c>
   16c50:	cmp	r3, #96	; 0x60
   16c54:	beq	1650c <lchmod@@Base+0xc5c>
   16c58:	cmp	r3, #124	; 0x7c
   16c5c:	bne	16c40 <lchmod@@Base+0x1390>
   16c60:	b	1650c <lchmod@@Base+0xc5c>
   16c64:	mov	r5, #0
   16c68:	b	16a90 <lchmod@@Base+0x11e0>
   16c6c:	ldr	r1, [sp, #64]	; 0x40
   16c70:	cmp	r1, #0
   16c74:	beq	16b60 <lchmod@@Base+0x12b0>
   16c78:	cmp	r9, r4
   16c7c:	mov	r1, #0
   16c80:	strbhi	ip, [r8, r4]
   16c84:	add	r4, r4, #1
   16c88:	str	r1, [sp, #64]	; 0x40
   16c8c:	b	16b60 <lchmod@@Base+0x12b0>
   16c90:	mov	r5, fp
   16c94:	ldr	fp, [sp, #24]
   16c98:	mov	r6, #48	; 0x30
   16c9c:	b	166ac <lchmod@@Base+0xdfc>
   16ca0:	mov	r5, #0
   16ca4:	b	166ac <lchmod@@Base+0xdfc>
   16ca8:	mov	r6, r1
   16cac:	b	168d8 <lchmod@@Base+0x1028>
   16cb0:	mov	r6, r1
   16cb4:	b	168c8 <lchmod@@Base+0x1018>
   16cb8:	ldr	r2, [sp, #28]
   16cbc:	ldr	r3, [sp, #40]	; 0x28
   16cc0:	subs	r3, r3, r2
   16cc4:	movne	r3, #1
   16cc8:	b	16130 <lchmod@@Base+0x880>
   16ccc:	ldr	r3, [sp, #60]	; 0x3c
   16cd0:	mov	sl, #2
   16cd4:	ldr	r7, [sp, #72]	; 0x48
   16cd8:	adds	r6, r3, #0
   16cdc:	mov	r5, r3
   16ce0:	movne	r6, #1
   16ce4:	cmp	r9, #0
   16ce8:	movne	r6, #0
   16cec:	cmp	r6, #0
   16cf0:	bne	160c0 <lchmod@@Base+0x810>
   16cf4:	ldr	r3, [sp, #68]	; 0x44
   16cf8:	ldr	r2, [sp, #44]	; 0x2c
   16cfc:	cmp	r2, #0
   16d00:	moveq	r3, #0
   16d04:	andne	r3, r3, #1
   16d08:	cmp	r3, #0
   16d0c:	movne	r3, r2
   16d10:	subne	r3, r3, #1
   16d14:	bne	16d44 <lchmod@@Base+0x1494>
   16d18:	cmp	r9, r4
   16d1c:	movhi	r3, #0
   16d20:	strbhi	r3, [r8, r4]
   16d24:	mov	r0, r4
   16d28:	add	sp, sp, #108	; 0x6c
   16d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d30:	mov	r3, r7
   16d34:	b	16cf8 <lchmod@@Base+0x1448>
   16d38:	cmp	r9, r4
   16d3c:	strbhi	r2, [r8, r4]
   16d40:	add	r4, r4, #1
   16d44:	ldrb	r2, [r3, #1]!
   16d48:	cmp	r2, #0
   16d4c:	bne	16d38 <lchmod@@Base+0x1488>
   16d50:	b	16d18 <lchmod@@Base+0x1468>
   16d54:	andeq	r9, r1, r0, lsr r0
   16d58:	andeq	r9, r1, r3, asr #32
   16d5c:	andeq	r9, r1, r1, asr #32
   16d60:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d68:	sub	sp, sp, #52	; 0x34
   16d6c:	mov	r6, r0
   16d70:	mov	r5, r3
   16d74:	mov	r8, r1
   16d78:	mov	r9, r2
   16d7c:	bl	116e4 <__errno_location@plt>
   16d80:	ldr	r3, [r0]
   16d84:	cmn	r6, #-2147483647	; 0x80000001
   16d88:	str	r0, [sp, #24]
   16d8c:	ldr	r7, [pc, #368]	; 16f04 <lchmod@@Base+0x1654>
   16d90:	str	r3, [sp, #32]
   16d94:	movne	r3, #0
   16d98:	moveq	r3, #1
   16d9c:	orrs	r3, r3, r6, lsr #31
   16da0:	ldr	r4, [r7]
   16da4:	beq	16dac <lchmod@@Base+0x14fc>
   16da8:	bl	11840 <abort@plt>
   16dac:	ldr	r2, [r7, #4]
   16db0:	cmp	r2, r6
   16db4:	bgt	16e24 <lchmod@@Base+0x1574>
   16db8:	add	sl, r7, #8
   16dbc:	mov	r3, #8
   16dc0:	cmp	r4, sl
   16dc4:	add	r1, sp, #44	; 0x2c
   16dc8:	str	r2, [sp, #44]	; 0x2c
   16dcc:	sub	r2, r6, r2
   16dd0:	movne	r0, r4
   16dd4:	moveq	r0, #0
   16dd8:	add	r2, r2, #1
   16ddc:	str	r3, [sp]
   16de0:	mvn	r3, #-2147483648	; 0x80000000
   16de4:	bl	17cf0 <lchmod@@Base+0x2440>
   16de8:	cmp	r4, sl
   16dec:	mov	fp, r0
   16df0:	str	r0, [r7]
   16df4:	ldmeq	r4, {r0, r1}
   16df8:	mov	r4, fp
   16dfc:	ldr	r2, [sp, #44]	; 0x2c
   16e00:	stmeq	fp, {r0, r1}
   16e04:	mov	r1, #0
   16e08:	ldr	r0, [r7, #4]
   16e0c:	sub	r2, r2, r0
   16e10:	add	r0, fp, r0, lsl #3
   16e14:	lsl	r2, r2, #3
   16e18:	bl	11708 <memset@plt>
   16e1c:	ldr	r3, [sp, #44]	; 0x2c
   16e20:	str	r3, [r7, #4]
   16e24:	ldr	r3, [r5, #4]
   16e28:	add	sl, r4, r6, lsl #3
   16e2c:	mov	r2, r8
   16e30:	ldr	fp, [r4, r6, lsl #3]
   16e34:	ldr	r7, [sl, #4]
   16e38:	orr	r3, r3, #1
   16e3c:	str	r3, [sp, #28]
   16e40:	add	r3, r5, #8
   16e44:	mov	r1, fp
   16e48:	str	r3, [sp, #36]	; 0x24
   16e4c:	mov	r0, r7
   16e50:	ldr	r3, [r5, #44]	; 0x2c
   16e54:	str	r3, [sp, #16]
   16e58:	ldr	r3, [r5, #40]	; 0x28
   16e5c:	str	r3, [sp, #12]
   16e60:	add	r3, r5, #8
   16e64:	str	r3, [sp, #8]
   16e68:	ldr	r3, [sp, #28]
   16e6c:	str	r3, [sp, #4]
   16e70:	ldr	r3, [r5]
   16e74:	str	r3, [sp]
   16e78:	mov	r3, r9
   16e7c:	bl	16074 <lchmod@@Base+0x7c4>
   16e80:	cmp	fp, r0
   16e84:	bhi	16eec <lchmod@@Base+0x163c>
   16e88:	ldr	r3, [pc, #120]	; 16f08 <lchmod@@Base+0x1658>
   16e8c:	add	fp, r0, #1
   16e90:	str	fp, [r4, r6, lsl #3]
   16e94:	cmp	r7, r3
   16e98:	beq	16ea4 <lchmod@@Base+0x15f4>
   16e9c:	mov	r0, r7
   16ea0:	bl	12cd8 <__assert_fail@plt+0x1444>
   16ea4:	mov	r0, fp
   16ea8:	bl	17be0 <lchmod@@Base+0x2330>
   16eac:	ldr	r3, [r5, #44]	; 0x2c
   16eb0:	mov	r2, r8
   16eb4:	mov	r1, fp
   16eb8:	str	r0, [sl, #4]
   16ebc:	mov	r7, r0
   16ec0:	str	r3, [sp, #16]
   16ec4:	ldr	r3, [r5, #40]	; 0x28
   16ec8:	str	r3, [sp, #12]
   16ecc:	add	r3, r5, #8
   16ed0:	str	r3, [sp, #8]
   16ed4:	ldr	r3, [sp, #28]
   16ed8:	str	r3, [sp, #4]
   16edc:	ldr	r3, [r5]
   16ee0:	str	r3, [sp]
   16ee4:	mov	r3, r9
   16ee8:	bl	16074 <lchmod@@Base+0x7c4>
   16eec:	ldr	r3, [sp, #24]
   16ef0:	mov	r0, r7
   16ef4:	ldr	r2, [sp, #32]
   16ef8:	str	r2, [r3]
   16efc:	add	sp, sp, #52	; 0x34
   16f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f04:	andeq	sl, r2, ip, lsl #3
   16f08:	strdeq	sl, [r2], -ip
   16f0c:	push	{r4, r5, r6, lr}
   16f10:	mov	r5, r0
   16f14:	bl	116e4 <__errno_location@plt>
   16f18:	mov	r4, r0
   16f1c:	cmp	r5, #0
   16f20:	ldr	r0, [pc, #20]	; 16f3c <lchmod@@Base+0x168c>
   16f24:	mov	r1, #48	; 0x30
   16f28:	movne	r0, r5
   16f2c:	ldr	r6, [r4]
   16f30:	bl	17de0 <lchmod@@Base+0x2530>
   16f34:	str	r6, [r4]
   16f38:	pop	{r4, r5, r6, pc}
   16f3c:	strdeq	sl, [r2], -ip
   16f40:	ldr	r3, [pc, #12]	; 16f54 <lchmod@@Base+0x16a4>
   16f44:	cmp	r0, #0
   16f48:	moveq	r0, r3
   16f4c:	ldr	r0, [r0]
   16f50:	bx	lr
   16f54:	strdeq	sl, [r2], -ip
   16f58:	ldr	r3, [pc, #12]	; 16f6c <lchmod@@Base+0x16bc>
   16f5c:	cmp	r0, #0
   16f60:	moveq	r0, r3
   16f64:	str	r1, [r0]
   16f68:	bx	lr
   16f6c:	strdeq	sl, [r2], -ip
   16f70:	ldr	r3, [pc, #52]	; 16fac <lchmod@@Base+0x16fc>
   16f74:	cmp	r0, #0
   16f78:	push	{lr}		; (str lr, [sp, #-4]!)
   16f7c:	lsr	lr, r1, #5
   16f80:	and	r1, r1, #31
   16f84:	moveq	r0, r3
   16f88:	add	r3, r0, #8
   16f8c:	ldr	ip, [r3, lr, lsl #2]
   16f90:	lsr	r0, ip, r1
   16f94:	eor	r2, r2, r0
   16f98:	and	r0, r0, #1
   16f9c:	and	r2, r2, #1
   16fa0:	eor	r1, ip, r2, lsl r1
   16fa4:	str	r1, [r3, lr, lsl #2]
   16fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fac:	strdeq	sl, [r2], -ip
   16fb0:	ldr	r3, [pc, #16]	; 16fc8 <lchmod@@Base+0x1718>
   16fb4:	cmp	r0, #0
   16fb8:	movne	r3, r0
   16fbc:	ldr	r0, [r3, #4]
   16fc0:	str	r1, [r3, #4]
   16fc4:	bx	lr
   16fc8:	strdeq	sl, [r2], -ip
   16fcc:	ldr	r3, [pc, #44]	; 17000 <lchmod@@Base+0x1750>
   16fd0:	cmp	r0, #0
   16fd4:	moveq	r0, r3
   16fd8:	mov	r3, #10
   16fdc:	cmp	r2, #0
   16fe0:	cmpne	r1, #0
   16fe4:	str	r3, [r0]
   16fe8:	bne	16ff4 <lchmod@@Base+0x1744>
   16fec:	push	{r4, lr}
   16ff0:	bl	11840 <abort@plt>
   16ff4:	str	r1, [r0, #40]	; 0x28
   16ff8:	str	r2, [r0, #44]	; 0x2c
   16ffc:	bx	lr
   17000:	strdeq	sl, [r2], -ip
   17004:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17008:	sub	sp, sp, #24
   1700c:	mov	sl, r3
   17010:	mov	r7, r0
   17014:	mov	r8, r1
   17018:	mov	r9, r2
   1701c:	ldr	r4, [sp, #56]	; 0x38
   17020:	ldr	r3, [pc, #88]	; 17080 <lchmod@@Base+0x17d0>
   17024:	cmp	r4, #0
   17028:	moveq	r4, r3
   1702c:	bl	116e4 <__errno_location@plt>
   17030:	ldr	r3, [r4, #44]	; 0x2c
   17034:	mov	r5, r0
   17038:	mov	r2, r9
   1703c:	mov	r1, r8
   17040:	mov	r0, r7
   17044:	ldr	r6, [r5]
   17048:	str	r3, [sp, #16]
   1704c:	ldr	r3, [r4, #40]	; 0x28
   17050:	str	r3, [sp, #12]
   17054:	add	r3, r4, #8
   17058:	str	r3, [sp, #8]
   1705c:	ldr	r3, [r4, #4]
   17060:	str	r3, [sp, #4]
   17064:	ldr	r3, [r4]
   17068:	str	r3, [sp]
   1706c:	mov	r3, sl
   17070:	bl	16074 <lchmod@@Base+0x7c4>
   17074:	str	r6, [r5]
   17078:	add	sp, sp, #24
   1707c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17080:	strdeq	sl, [r2], -ip
   17084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17088:	cmp	r3, #0
   1708c:	sub	sp, sp, #44	; 0x2c
   17090:	mov	r6, r2
   17094:	mov	sl, r1
   17098:	mov	r9, r0
   1709c:	ldr	r4, [pc, #176]	; 17154 <lchmod@@Base+0x18a4>
   170a0:	movne	r4, r3
   170a4:	bl	116e4 <__errno_location@plt>
   170a8:	ldr	r3, [r0]
   170ac:	mov	r1, #0
   170b0:	mov	r2, r9
   170b4:	mov	r8, r0
   170b8:	mov	r0, r1
   170bc:	ldr	r5, [r4, #4]
   170c0:	add	fp, r4, #8
   170c4:	str	r3, [sp, #28]
   170c8:	ldr	r3, [r4, #44]	; 0x2c
   170cc:	cmp	r6, #0
   170d0:	orreq	r5, r5, #1
   170d4:	str	r3, [sp, #16]
   170d8:	ldr	r3, [r4, #40]	; 0x28
   170dc:	stmib	sp, {r5, fp}
   170e0:	str	r3, [sp, #12]
   170e4:	ldr	r3, [r4]
   170e8:	str	r3, [sp]
   170ec:	mov	r3, sl
   170f0:	bl	16074 <lchmod@@Base+0x7c4>
   170f4:	add	r1, r0, #1
   170f8:	mov	r7, r0
   170fc:	mov	r0, r1
   17100:	str	r1, [sp, #36]	; 0x24
   17104:	bl	17be0 <lchmod@@Base+0x2330>
   17108:	ldr	r3, [r4, #44]	; 0x2c
   1710c:	mov	r2, r9
   17110:	ldr	r1, [sp, #36]	; 0x24
   17114:	str	r3, [sp, #16]
   17118:	ldr	r3, [r4, #40]	; 0x28
   1711c:	stmib	sp, {r5, fp}
   17120:	str	r0, [sp, #32]
   17124:	str	r3, [sp, #12]
   17128:	ldr	r3, [r4]
   1712c:	str	r3, [sp]
   17130:	mov	r3, sl
   17134:	bl	16074 <lchmod@@Base+0x7c4>
   17138:	ldr	r3, [sp, #28]
   1713c:	cmp	r6, #0
   17140:	ldr	r0, [sp, #32]
   17144:	str	r3, [r8]
   17148:	strne	r7, [r6]
   1714c:	add	sp, sp, #44	; 0x2c
   17150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17154:	strdeq	sl, [r2], -ip
   17158:	mov	r3, r2
   1715c:	mov	r2, #0
   17160:	b	17084 <lchmod@@Base+0x17d4>
   17164:	push	{r4, r5, r6, r7, r8, lr}
   17168:	mov	r6, #1
   1716c:	ldr	r4, [pc, #100]	; 171d8 <lchmod@@Base+0x1928>
   17170:	ldr	r5, [r4]
   17174:	add	r7, r5, #4
   17178:	ldr	r3, [r4, #4]
   1717c:	cmp	r3, r6
   17180:	bgt	171c8 <lchmod@@Base+0x1918>
   17184:	ldr	r6, [pc, #80]	; 171dc <lchmod@@Base+0x192c>
   17188:	ldr	r0, [r5, #4]
   1718c:	cmp	r0, r6
   17190:	beq	171a4 <lchmod@@Base+0x18f4>
   17194:	bl	12cd8 <__assert_fail@plt+0x1444>
   17198:	mov	r3, #256	; 0x100
   1719c:	str	r3, [r4, #8]
   171a0:	str	r6, [r4, #12]
   171a4:	ldr	r6, [pc, #52]	; 171e0 <lchmod@@Base+0x1930>
   171a8:	cmp	r5, r6
   171ac:	beq	171bc <lchmod@@Base+0x190c>
   171b0:	mov	r0, r5
   171b4:	bl	12cd8 <__assert_fail@plt+0x1444>
   171b8:	str	r6, [r4]
   171bc:	mov	r3, #1
   171c0:	str	r3, [r4, #4]
   171c4:	pop	{r4, r5, r6, r7, r8, pc}
   171c8:	ldr	r0, [r7, r6, lsl #3]
   171cc:	add	r6, r6, #1
   171d0:	bl	12cd8 <__assert_fail@plt+0x1444>
   171d4:	b	17178 <lchmod@@Base+0x18c8>
   171d8:	andeq	sl, r2, ip, lsl #3
   171dc:	strdeq	sl, [r2], -ip
   171e0:	muleq	r2, r4, r1
   171e4:	ldr	r3, [pc, #4]	; 171f0 <lchmod@@Base+0x1940>
   171e8:	mvn	r2, #0
   171ec:	b	16d64 <lchmod@@Base+0x14b4>
   171f0:	strdeq	sl, [r2], -ip
   171f4:	ldr	r3, [pc]	; 171fc <lchmod@@Base+0x194c>
   171f8:	b	16d64 <lchmod@@Base+0x14b4>
   171fc:	strdeq	sl, [r2], -ip
   17200:	mov	r1, r0
   17204:	mov	r0, #0
   17208:	b	171e4 <lchmod@@Base+0x1934>
   1720c:	mov	r2, r1
   17210:	mov	r1, r0
   17214:	mov	r0, #0
   17218:	b	171f4 <lchmod@@Base+0x1944>
   1721c:	push	{r4, r5, lr}
   17220:	sub	sp, sp, #52	; 0x34
   17224:	mov	r5, r2
   17228:	mov	r4, r0
   1722c:	mov	r0, sp
   17230:	bl	15f18 <lchmod@@Base+0x668>
   17234:	mov	r3, sp
   17238:	mvn	r2, #0
   1723c:	mov	r1, r5
   17240:	mov	r0, r4
   17244:	bl	16d64 <lchmod@@Base+0x14b4>
   17248:	add	sp, sp, #52	; 0x34
   1724c:	pop	{r4, r5, pc}
   17250:	push	{r4, r5, r6, lr}
   17254:	sub	sp, sp, #48	; 0x30
   17258:	mov	r5, r2
   1725c:	mov	r6, r3
   17260:	mov	r4, r0
   17264:	mov	r0, sp
   17268:	bl	15f18 <lchmod@@Base+0x668>
   1726c:	mov	r3, sp
   17270:	mov	r2, r6
   17274:	mov	r1, r5
   17278:	mov	r0, r4
   1727c:	bl	16d64 <lchmod@@Base+0x14b4>
   17280:	add	sp, sp, #48	; 0x30
   17284:	pop	{r4, r5, r6, pc}
   17288:	mov	r2, r1
   1728c:	mov	r1, r0
   17290:	mov	r0, #0
   17294:	b	1721c <lchmod@@Base+0x196c>
   17298:	mov	r3, r2
   1729c:	mov	r2, r1
   172a0:	mov	r1, r0
   172a4:	mov	r0, #0
   172a8:	b	17250 <lchmod@@Base+0x19a0>
   172ac:	push	{r4, r5, r6, lr}
   172b0:	mov	r4, r0
   172b4:	mov	r5, r1
   172b8:	mov	r6, r2
   172bc:	sub	sp, sp, #48	; 0x30
   172c0:	mov	ip, sp
   172c4:	ldr	lr, [pc, #64]	; 1730c <lchmod@@Base+0x1a5c>
   172c8:	ldm	lr!, {r0, r1, r2, r3}
   172cc:	stmia	ip!, {r0, r1, r2, r3}
   172d0:	ldm	lr!, {r0, r1, r2, r3}
   172d4:	stmia	ip!, {r0, r1, r2, r3}
   172d8:	ldm	lr, {r0, r1, r2, r3}
   172dc:	stm	ip, {r0, r1, r2, r3}
   172e0:	mov	r1, r6
   172e4:	mov	r2, #1
   172e8:	mov	r0, sp
   172ec:	bl	16f70 <lchmod@@Base+0x16c0>
   172f0:	mov	r3, sp
   172f4:	mov	r2, r5
   172f8:	mov	r1, r4
   172fc:	mov	r0, #0
   17300:	bl	16d64 <lchmod@@Base+0x14b4>
   17304:	add	sp, sp, #48	; 0x30
   17308:	pop	{r4, r5, r6, pc}
   1730c:	strdeq	sl, [r2], -ip
   17310:	mov	r2, r1
   17314:	mvn	r1, #0
   17318:	b	172ac <lchmod@@Base+0x19fc>
   1731c:	mov	r1, #58	; 0x3a
   17320:	b	17310 <lchmod@@Base+0x1a60>
   17324:	mov	r2, #58	; 0x3a
   17328:	b	172ac <lchmod@@Base+0x19fc>
   1732c:	push	{r4, r5, lr}
   17330:	sub	sp, sp, #100	; 0x64
   17334:	mov	r4, r0
   17338:	mov	r0, sp
   1733c:	mov	r5, r2
   17340:	bl	15f18 <lchmod@@Base+0x668>
   17344:	mov	ip, sp
   17348:	add	lr, sp, #48	; 0x30
   1734c:	ldm	ip!, {r0, r1, r2, r3}
   17350:	stmia	lr!, {r0, r1, r2, r3}
   17354:	ldm	ip!, {r0, r1, r2, r3}
   17358:	stmia	lr!, {r0, r1, r2, r3}
   1735c:	ldm	ip, {r0, r1, r2, r3}
   17360:	stm	lr, {r0, r1, r2, r3}
   17364:	mov	r2, #1
   17368:	mov	r1, #58	; 0x3a
   1736c:	add	r0, sp, #48	; 0x30
   17370:	bl	16f70 <lchmod@@Base+0x16c0>
   17374:	add	r3, sp, #48	; 0x30
   17378:	mvn	r2, #0
   1737c:	mov	r1, r5
   17380:	mov	r0, r4
   17384:	bl	16d64 <lchmod@@Base+0x14b4>
   17388:	add	sp, sp, #100	; 0x64
   1738c:	pop	{r4, r5, pc}
   17390:	push	{r4, r5, r6, r7, lr}
   17394:	mov	r4, r0
   17398:	mov	r6, r1
   1739c:	mov	r7, r2
   173a0:	mov	r5, r3
   173a4:	sub	sp, sp, #52	; 0x34
   173a8:	ldr	lr, [pc, #68]	; 173f4 <lchmod@@Base+0x1b44>
   173ac:	mov	ip, sp
   173b0:	ldm	lr!, {r0, r1, r2, r3}
   173b4:	stmia	ip!, {r0, r1, r2, r3}
   173b8:	ldm	lr!, {r0, r1, r2, r3}
   173bc:	stmia	ip!, {r0, r1, r2, r3}
   173c0:	ldm	lr, {r0, r1, r2, r3}
   173c4:	stm	ip, {r0, r1, r2, r3}
   173c8:	mov	r2, r7
   173cc:	mov	r1, r6
   173d0:	mov	r0, sp
   173d4:	bl	16fcc <lchmod@@Base+0x171c>
   173d8:	ldr	r2, [sp, #72]	; 0x48
   173dc:	mov	r3, sp
   173e0:	mov	r1, r5
   173e4:	mov	r0, r4
   173e8:	bl	16d64 <lchmod@@Base+0x14b4>
   173ec:	add	sp, sp, #52	; 0x34
   173f0:	pop	{r4, r5, r6, r7, pc}
   173f4:	strdeq	sl, [r2], -ip
   173f8:	mvn	ip, #0
   173fc:	push	{r0, r1, r2, lr}
   17400:	str	ip, [sp]
   17404:	bl	17390 <lchmod@@Base+0x1ae0>
   17408:	add	sp, sp, #12
   1740c:	pop	{pc}		; (ldr pc, [sp], #4)
   17410:	mov	r3, r2
   17414:	mov	r2, r1
   17418:	mov	r1, r0
   1741c:	mov	r0, #0
   17420:	b	173f8 <lchmod@@Base+0x1b48>
   17424:	push	{r0, r1, r2, lr}
   17428:	str	r3, [sp]
   1742c:	mov	r3, r2
   17430:	mov	r2, r1
   17434:	mov	r1, r0
   17438:	mov	r0, #0
   1743c:	bl	17390 <lchmod@@Base+0x1ae0>
   17440:	add	sp, sp, #12
   17444:	pop	{pc}		; (ldr pc, [sp], #4)
   17448:	ldr	r3, [pc]	; 17450 <lchmod@@Base+0x1ba0>
   1744c:	b	16d64 <lchmod@@Base+0x14b4>
   17450:	muleq	r2, ip, r1
   17454:	mov	r2, r1
   17458:	mov	r1, r0
   1745c:	mov	r0, #0
   17460:	b	17448 <lchmod@@Base+0x1b98>
   17464:	mvn	r2, #0
   17468:	b	17448 <lchmod@@Base+0x1b98>
   1746c:	mov	r1, r0
   17470:	mov	r0, #0
   17474:	b	17464 <lchmod@@Base+0x1bb4>
   17478:	push	{r4, r5, r6, lr}
   1747c:	ldr	r4, [r0], #8
   17480:	cmp	r4, r0
   17484:	bne	174ac <lchmod@@Base+0x1bfc>
   17488:	mov	r0, r1
   1748c:	mov	r5, r1
   17490:	bl	17f84 <lchmod@@Base+0x26d4>
   17494:	subs	r3, r0, #0
   17498:	beq	174c0 <lchmod@@Base+0x1c10>
   1749c:	mov	r2, r5
   174a0:	mov	r1, r4
   174a4:	pop	{r4, r5, r6, lr}
   174a8:	b	11504 <memcpy@plt>
   174ac:	mov	r0, r4
   174b0:	bl	17fb0 <lchmod@@Base+0x2700>
   174b4:	cmp	r0, #0
   174b8:	movne	r3, r0
   174bc:	moveq	r3, r4
   174c0:	mov	r0, r3
   174c4:	pop	{r4, r5, r6, pc}
   174c8:	push	{r4, r5, r6, lr}
   174cc:	mov	r6, r0
   174d0:	mov	r4, r0
   174d4:	ldr	r5, [r0, #4]
   174d8:	ldr	r0, [r6], #8
   174dc:	lsl	r5, r5, #1
   174e0:	cmp	r0, r6
   174e4:	beq	174ec <lchmod@@Base+0x1c3c>
   174e8:	bl	12cd8 <__assert_fail@plt+0x1444>
   174ec:	ldr	r3, [r4, #4]
   174f0:	cmp	r3, r5
   174f4:	bhi	1751c <lchmod@@Base+0x1c6c>
   174f8:	mov	r0, r5
   174fc:	bl	17f84 <lchmod@@Base+0x26d4>
   17500:	cmp	r0, #0
   17504:	bne	1752c <lchmod@@Base+0x1c7c>
   17508:	mov	r3, #1024	; 0x400
   1750c:	mov	r0, #0
   17510:	str	r6, [r4]
   17514:	str	r3, [r4, #4]
   17518:	pop	{r4, r5, r6, pc}
   1751c:	bl	116e4 <__errno_location@plt>
   17520:	mov	r3, #12
   17524:	str	r3, [r0]
   17528:	b	17508 <lchmod@@Base+0x1c58>
   1752c:	stm	r4, {r0, r5}
   17530:	mov	r0, #1
   17534:	pop	{r4, r5, r6, pc}
   17538:	push	{r4, r5, r6, r7, r8, lr}
   1753c:	mov	r7, r0
   17540:	mov	r4, r0
   17544:	ldr	r8, [r7], #8
   17548:	ldr	r3, [r0, #4]
   1754c:	cmp	r8, r7
   17550:	lsl	r6, r3, #1
   17554:	bne	17580 <lchmod@@Base+0x1cd0>
   17558:	mov	r0, r6
   1755c:	bl	17f84 <lchmod@@Base+0x26d4>
   17560:	subs	r5, r0, #0
   17564:	beq	175b0 <lchmod@@Base+0x1d00>
   17568:	mov	r1, r8
   1756c:	ldr	r2, [r4, #4]
   17570:	bl	11504 <memcpy@plt>
   17574:	mov	r0, #1
   17578:	stm	r4, {r5, r6}
   1757c:	pop	{r4, r5, r6, r7, r8, pc}
   17580:	cmp	r3, r6
   17584:	bhi	175b8 <lchmod@@Base+0x1d08>
   17588:	mov	r1, r6
   1758c:	mov	r0, r8
   17590:	bl	17fb0 <lchmod@@Base+0x2700>
   17594:	subs	r5, r0, #0
   17598:	bne	17574 <lchmod@@Base+0x1cc4>
   1759c:	ldr	r0, [r4]
   175a0:	bl	12cd8 <__assert_fail@plt+0x1444>
   175a4:	mov	r3, #1024	; 0x400
   175a8:	str	r7, [r4]
   175ac:	str	r3, [r4, #4]
   175b0:	mov	r0, #0
   175b4:	pop	{r4, r5, r6, r7, r8, pc}
   175b8:	bl	116e4 <__errno_location@plt>
   175bc:	mov	r3, #12
   175c0:	str	r3, [r0]
   175c4:	b	1759c <lchmod@@Base+0x1cec>
   175c8:	push	{r4, r5, r6, r7, r8, lr}
   175cc:	subs	r4, r0, #0
   175d0:	bne	175ec <lchmod@@Base+0x1d3c>
   175d4:	bl	116e4 <__errno_location@plt>
   175d8:	mov	r3, #95	; 0x5f
   175dc:	mvn	r4, #0
   175e0:	str	r3, [r0]
   175e4:	mov	r0, r4
   175e8:	pop	{r4, r5, r6, r7, r8, pc}
   175ec:	cmp	r4, #10
   175f0:	bne	175e4 <lchmod@@Base+0x1d34>
   175f4:	mov	r5, r1
   175f8:	ldr	r1, [pc, #40]	; 17628 <lchmod@@Base+0x1d78>
   175fc:	ldr	r6, [r5]
   17600:	mov	r0, r6
   17604:	bl	114a4 <strcmp@plt>
   17608:	subs	r7, r0, #0
   1760c:	bne	175e4 <lchmod@@Base+0x1d34>
   17610:	mov	r0, r6
   17614:	bl	117d4 <freecon@plt>
   17618:	str	r7, [r5]
   1761c:	bl	116e4 <__errno_location@plt>
   17620:	mov	r3, #61	; 0x3d
   17624:	b	175dc <lchmod@@Base+0x1d2c>
   17628:	muleq	r1, r1, r0
   1762c:	push	{r4, lr}
   17630:	mov	r4, r1
   17634:	bl	116a8 <getfilecon@plt>
   17638:	mov	r1, r4
   1763c:	pop	{r4, lr}
   17640:	b	175c8 <lchmod@@Base+0x1d18>
   17644:	push	{r4, lr}
   17648:	mov	r4, r1
   1764c:	bl	11624 <lgetfilecon@plt>
   17650:	mov	r1, r4
   17654:	pop	{r4, lr}
   17658:	b	175c8 <lchmod@@Base+0x1d18>
   1765c:	push	{r4, lr}
   17660:	mov	r4, r1
   17664:	bl	11564 <fgetfilecon@plt>
   17668:	mov	r1, r4
   1766c:	pop	{r4, lr}
   17670:	b	175c8 <lchmod@@Base+0x1d18>
   17674:	cmp	r0, #2
   17678:	push	{r4, r5, r6, r7, r8, lr}
   1767c:	mov	r4, r0
   17680:	bhi	176a8 <lchmod@@Base+0x1df8>
   17684:	bl	18628 <lchmod@@Base+0x2d78>
   17688:	mov	r6, r0
   1768c:	bl	116e4 <__errno_location@plt>
   17690:	mov	r5, r0
   17694:	mov	r0, r4
   17698:	ldr	r7, [r5]
   1769c:	mov	r4, r6
   176a0:	bl	1184c <close@plt>
   176a4:	str	r7, [r5]
   176a8:	mov	r0, r4
   176ac:	pop	{r4, r5, r6, r7, r8, pc}
   176b0:	push	{r4, r5, r6, lr}
   176b4:	cmp	r1, #0
   176b8:	sub	sp, sp, #32
   176bc:	mov	r5, r0
   176c0:	ldr	r4, [sp, #48]	; 0x30
   176c4:	ldr	r6, [sp, #52]	; 0x34
   176c8:	beq	1777c <lchmod@@Base+0x1ecc>
   176cc:	strd	r2, [sp]
   176d0:	mov	r3, r1
   176d4:	mov	r1, #1
   176d8:	ldr	r2, [pc, #856]	; 17a38 <lchmod@@Base+0x2188>
   176dc:	bl	1172c <__fprintf_chk@plt>
   176e0:	mov	r2, #5
   176e4:	ldr	r1, [pc, #848]	; 17a3c <lchmod@@Base+0x218c>
   176e8:	mov	r0, #0
   176ec:	bl	11540 <dcgettext@plt>
   176f0:	movw	r3, #2022	; 0x7e6
   176f4:	ldr	r2, [pc, #836]	; 17a40 <lchmod@@Base+0x2190>
   176f8:	mov	r1, #1
   176fc:	str	r3, [sp]
   17700:	mov	r3, r0
   17704:	mov	r0, r5
   17708:	bl	1172c <__fprintf_chk@plt>
   1770c:	mov	r1, r5
   17710:	mov	r0, #10
   17714:	bl	11534 <fputc_unlocked@plt>
   17718:	mov	r2, #5
   1771c:	ldr	r1, [pc, #800]	; 17a44 <lchmod@@Base+0x2194>
   17720:	mov	r0, #0
   17724:	bl	11540 <dcgettext@plt>
   17728:	mov	r2, r0
   1772c:	mov	r1, #1
   17730:	ldr	r3, [pc, #784]	; 17a48 <lchmod@@Base+0x2198>
   17734:	mov	r0, r5
   17738:	bl	1172c <__fprintf_chk@plt>
   1773c:	mov	r1, r5
   17740:	mov	r0, #10
   17744:	bl	11534 <fputc_unlocked@plt>
   17748:	cmp	r6, #9
   1774c:	ldrls	pc, [pc, r6, lsl #2]
   17750:	b	17a2c <lchmod@@Base+0x217c>
   17754:	andeq	r7, r1, ip, ror #16
   17758:	muleq	r1, r4, r7
   1775c:	andeq	r7, r1, r0, asr #15
   17760:	strdeq	r7, [r1], -r4
   17764:	andeq	r7, r1, r0, lsr r8
   17768:	andeq	r7, r1, r4, ror r8
   1776c:			; <UNDEFINED> instruction: 0x000178bc
   17770:	andeq	r7, r1, ip, lsl #18
   17774:	andeq	r7, r1, r4, ror #18
   17778:	andeq	r7, r1, r4, asr #19
   1777c:	mov	r1, #1
   17780:	str	r3, [sp]
   17784:	mov	r3, r2
   17788:	ldr	r2, [pc, #700]	; 17a4c <lchmod@@Base+0x219c>
   1778c:	bl	1172c <__fprintf_chk@plt>
   17790:	b	176e0 <lchmod@@Base+0x1e30>
   17794:	mov	r2, #5
   17798:	ldr	r1, [pc, #688]	; 17a50 <lchmod@@Base+0x21a0>
   1779c:	mov	r0, #0
   177a0:	bl	11540 <dcgettext@plt>
   177a4:	ldr	r3, [r4]
   177a8:	mov	r2, r0
   177ac:	mov	r1, #1
   177b0:	mov	r0, r5
   177b4:	add	sp, sp, #32
   177b8:	pop	{r4, r5, r6, lr}
   177bc:	b	1172c <__fprintf_chk@plt>
   177c0:	mov	r2, #5
   177c4:	ldr	r1, [pc, #648]	; 17a54 <lchmod@@Base+0x21a4>
   177c8:	mov	r0, #0
   177cc:	bl	11540 <dcgettext@plt>
   177d0:	ldr	r3, [r4, #4]
   177d4:	mov	r2, r0
   177d8:	mov	r1, #1
   177dc:	mov	r0, r5
   177e0:	str	r3, [sp, #48]	; 0x30
   177e4:	ldr	r3, [r4]
   177e8:	add	sp, sp, #32
   177ec:	pop	{r4, r5, r6, lr}
   177f0:	b	1172c <__fprintf_chk@plt>
   177f4:	mov	r2, #5
   177f8:	ldr	r1, [pc, #600]	; 17a58 <lchmod@@Base+0x21a8>
   177fc:	mov	r0, #0
   17800:	bl	11540 <dcgettext@plt>
   17804:	ldr	r3, [r4, #8]
   17808:	mov	r2, r0
   1780c:	mov	r1, #1
   17810:	mov	r0, r5
   17814:	str	r3, [sp, #52]	; 0x34
   17818:	ldr	r3, [r4, #4]
   1781c:	str	r3, [sp, #48]	; 0x30
   17820:	ldr	r3, [r4]
   17824:	add	sp, sp, #32
   17828:	pop	{r4, r5, r6, lr}
   1782c:	b	1172c <__fprintf_chk@plt>
   17830:	mov	r2, #5
   17834:	ldr	r1, [pc, #544]	; 17a5c <lchmod@@Base+0x21ac>
   17838:	mov	r0, #0
   1783c:	bl	11540 <dcgettext@plt>
   17840:	ldr	r3, [r4, #12]
   17844:	mov	r2, r0
   17848:	mov	r1, #1
   1784c:	mov	r0, r5
   17850:	str	r3, [sp, #8]
   17854:	ldr	r3, [r4, #8]
   17858:	str	r3, [sp, #4]
   1785c:	ldr	r3, [r4, #4]
   17860:	str	r3, [sp]
   17864:	ldr	r3, [r4]
   17868:	bl	1172c <__fprintf_chk@plt>
   1786c:	add	sp, sp, #32
   17870:	pop	{r4, r5, r6, pc}
   17874:	mov	r2, #5
   17878:	ldr	r1, [pc, #480]	; 17a60 <lchmod@@Base+0x21b0>
   1787c:	mov	r0, #0
   17880:	bl	11540 <dcgettext@plt>
   17884:	ldr	r3, [r4, #16]
   17888:	mov	r2, r0
   1788c:	mov	r1, #1
   17890:	mov	r0, r5
   17894:	str	r3, [sp, #12]
   17898:	ldr	r3, [r4, #12]
   1789c:	str	r3, [sp, #8]
   178a0:	ldr	r3, [r4, #8]
   178a4:	str	r3, [sp, #4]
   178a8:	ldr	r3, [r4, #4]
   178ac:	str	r3, [sp]
   178b0:	ldr	r3, [r4]
   178b4:	bl	1172c <__fprintf_chk@plt>
   178b8:	b	1786c <lchmod@@Base+0x1fbc>
   178bc:	mov	r2, #5
   178c0:	ldr	r1, [pc, #412]	; 17a64 <lchmod@@Base+0x21b4>
   178c4:	mov	r0, #0
   178c8:	bl	11540 <dcgettext@plt>
   178cc:	ldr	r3, [r4, #20]
   178d0:	mov	r2, r0
   178d4:	mov	r1, #1
   178d8:	mov	r0, r5
   178dc:	str	r3, [sp, #16]
   178e0:	ldr	r3, [r4, #16]
   178e4:	str	r3, [sp, #12]
   178e8:	ldr	r3, [r4, #12]
   178ec:	str	r3, [sp, #8]
   178f0:	ldr	r3, [r4, #8]
   178f4:	str	r3, [sp, #4]
   178f8:	ldr	r3, [r4, #4]
   178fc:	str	r3, [sp]
   17900:	ldr	r3, [r4]
   17904:	bl	1172c <__fprintf_chk@plt>
   17908:	b	1786c <lchmod@@Base+0x1fbc>
   1790c:	mov	r2, #5
   17910:	ldr	r1, [pc, #336]	; 17a68 <lchmod@@Base+0x21b8>
   17914:	mov	r0, #0
   17918:	bl	11540 <dcgettext@plt>
   1791c:	ldr	r3, [r4, #24]
   17920:	mov	r2, r0
   17924:	mov	r1, #1
   17928:	mov	r0, r5
   1792c:	str	r3, [sp, #20]
   17930:	ldr	r3, [r4, #20]
   17934:	str	r3, [sp, #16]
   17938:	ldr	r3, [r4, #16]
   1793c:	str	r3, [sp, #12]
   17940:	ldr	r3, [r4, #12]
   17944:	str	r3, [sp, #8]
   17948:	ldr	r3, [r4, #8]
   1794c:	str	r3, [sp, #4]
   17950:	ldr	r3, [r4, #4]
   17954:	str	r3, [sp]
   17958:	ldr	r3, [r4]
   1795c:	bl	1172c <__fprintf_chk@plt>
   17960:	b	1786c <lchmod@@Base+0x1fbc>
   17964:	mov	r2, #5
   17968:	ldr	r1, [pc, #252]	; 17a6c <lchmod@@Base+0x21bc>
   1796c:	mov	r0, #0
   17970:	bl	11540 <dcgettext@plt>
   17974:	ldr	r3, [r4, #28]
   17978:	mov	r2, r0
   1797c:	mov	r1, #1
   17980:	mov	r0, r5
   17984:	str	r3, [sp, #24]
   17988:	ldr	r3, [r4, #24]
   1798c:	str	r3, [sp, #20]
   17990:	ldr	r3, [r4, #20]
   17994:	str	r3, [sp, #16]
   17998:	ldr	r3, [r4, #16]
   1799c:	str	r3, [sp, #12]
   179a0:	ldr	r3, [r4, #12]
   179a4:	str	r3, [sp, #8]
   179a8:	ldr	r3, [r4, #8]
   179ac:	str	r3, [sp, #4]
   179b0:	ldr	r3, [r4, #4]
   179b4:	str	r3, [sp]
   179b8:	ldr	r3, [r4]
   179bc:	bl	1172c <__fprintf_chk@plt>
   179c0:	b	1786c <lchmod@@Base+0x1fbc>
   179c4:	ldr	r1, [pc, #164]	; 17a70 <lchmod@@Base+0x21c0>
   179c8:	mov	r2, #5
   179cc:	mov	r0, #0
   179d0:	bl	11540 <dcgettext@plt>
   179d4:	ldr	r3, [r4, #32]
   179d8:	mov	r2, r0
   179dc:	mov	r1, #1
   179e0:	mov	r0, r5
   179e4:	str	r3, [sp, #28]
   179e8:	ldr	r3, [r4, #28]
   179ec:	str	r3, [sp, #24]
   179f0:	ldr	r3, [r4, #24]
   179f4:	str	r3, [sp, #20]
   179f8:	ldr	r3, [r4, #20]
   179fc:	str	r3, [sp, #16]
   17a00:	ldr	r3, [r4, #16]
   17a04:	str	r3, [sp, #12]
   17a08:	ldr	r3, [r4, #12]
   17a0c:	str	r3, [sp, #8]
   17a10:	ldr	r3, [r4, #8]
   17a14:	str	r3, [sp, #4]
   17a18:	ldr	r3, [r4, #4]
   17a1c:	str	r3, [sp]
   17a20:	ldr	r3, [r4]
   17a24:	bl	1172c <__fprintf_chk@plt>
   17a28:	b	1786c <lchmod@@Base+0x1fbc>
   17a2c:	mov	r2, #5
   17a30:	ldr	r1, [pc, #60]	; 17a74 <lchmod@@Base+0x21c4>
   17a34:	b	179cc <lchmod@@Base+0x211c>
   17a38:	muleq	r1, fp, r0
   17a3c:	andeq	r9, r1, lr, lsr #1
   17a40:	andeq	r9, r1, ip, ror r3
   17a44:	strheq	r9, [r1], -r2
   17a48:	andeq	r9, r1, sp, asr r1
   17a4c:	andeq	r9, r1, r7, lsr #1
   17a50:	andeq	r9, r1, pc, ror r1
   17a54:	andeq	r9, r1, pc, lsl #3
   17a58:	andeq	r9, r1, r6, lsr #3
   17a5c:	andeq	r9, r1, r2, asr #3
   17a60:	andeq	r9, r1, r2, ror #3
   17a64:	andeq	r9, r1, r6, lsl #4
   17a68:	andeq	r9, r1, lr, lsr #4
   17a6c:	andeq	r9, r1, sl, asr r2
   17a70:	andeq	r9, r1, sl, lsl #5
   17a74:			; <UNDEFINED> instruction: 0x000192be
   17a78:	push	{r0, r1, r4, lr}
   17a7c:	mov	ip, #0
   17a80:	ldr	lr, [sp, #16]
   17a84:	ldr	r4, [lr, ip, lsl #2]
   17a88:	cmp	r4, #0
   17a8c:	bne	17aa4 <lchmod@@Base+0x21f4>
   17a90:	str	lr, [sp]
   17a94:	str	ip, [sp, #4]
   17a98:	bl	176b0 <lchmod@@Base+0x1e00>
   17a9c:	add	sp, sp, #8
   17aa0:	pop	{r4, pc}
   17aa4:	add	ip, ip, #1
   17aa8:	b	17a84 <lchmod@@Base+0x21d4>
   17aac:	push	{r4, r5, r6, lr}
   17ab0:	sub	sp, sp, #48	; 0x30
   17ab4:	mov	ip, #0
   17ab8:	add	lr, sp, #8
   17abc:	mov	r5, lr
   17ac0:	ldr	r6, [sp, #64]	; 0x40
   17ac4:	ldr	r4, [r6, ip, lsl #2]
   17ac8:	cmp	r4, #0
   17acc:	str	r4, [lr], #4
   17ad0:	beq	17ae0 <lchmod@@Base+0x2230>
   17ad4:	add	ip, ip, #1
   17ad8:	cmp	ip, #10
   17adc:	bne	17ac4 <lchmod@@Base+0x2214>
   17ae0:	stm	sp, {r5, ip}
   17ae4:	bl	176b0 <lchmod@@Base+0x1e00>
   17ae8:	add	sp, sp, #48	; 0x30
   17aec:	pop	{r4, r5, r6, pc}
   17af0:	push	{r3}		; (str r3, [sp, #-4]!)
   17af4:	push	{r0, r1, r2, r3, lr}
   17af8:	add	r3, sp, #24
   17afc:	str	r3, [sp]
   17b00:	str	r3, [sp, #12]
   17b04:	ldr	r3, [sp, #20]
   17b08:	bl	17aac <lchmod@@Base+0x21fc>
   17b0c:	add	sp, sp, #16
   17b10:	pop	{lr}		; (ldr lr, [sp], #4)
   17b14:	add	sp, sp, #4
   17b18:	bx	lr
   17b1c:	ldr	r3, [pc, #116]	; 17b98 <lchmod@@Base+0x22e8>
   17b20:	mov	r0, #10
   17b24:	push	{r4, lr}
   17b28:	ldr	r1, [r3]
   17b2c:	bl	11534 <fputc_unlocked@plt>
   17b30:	mov	r2, #5
   17b34:	ldr	r1, [pc, #96]	; 17b9c <lchmod@@Base+0x22ec>
   17b38:	mov	r0, #0
   17b3c:	bl	11540 <dcgettext@plt>
   17b40:	mov	r1, r0
   17b44:	ldr	r2, [pc, #84]	; 17ba0 <lchmod@@Base+0x22f0>
   17b48:	mov	r0, #1
   17b4c:	bl	11714 <__printf_chk@plt>
   17b50:	mov	r2, #5
   17b54:	ldr	r1, [pc, #72]	; 17ba4 <lchmod@@Base+0x22f4>
   17b58:	mov	r0, #0
   17b5c:	bl	11540 <dcgettext@plt>
   17b60:	mov	r1, r0
   17b64:	ldr	r3, [pc, #60]	; 17ba8 <lchmod@@Base+0x22f8>
   17b68:	mov	r0, #1
   17b6c:	ldr	r2, [pc, #56]	; 17bac <lchmod@@Base+0x22fc>
   17b70:	bl	11714 <__printf_chk@plt>
   17b74:	mov	r2, #5
   17b78:	ldr	r1, [pc, #48]	; 17bb0 <lchmod@@Base+0x2300>
   17b7c:	mov	r0, #0
   17b80:	bl	11540 <dcgettext@plt>
   17b84:	mov	r1, r0
   17b88:	ldr	r2, [pc, #36]	; 17bb4 <lchmod@@Base+0x2304>
   17b8c:	mov	r0, #1
   17b90:	pop	{r4, lr}
   17b94:	b	11714 <__printf_chk@plt>
   17b98:	andeq	sl, r2, r4, ror #3
   17b9c:	strdeq	r9, [r1], -sl
   17ba0:	andeq	r9, r1, lr, lsl #6
   17ba4:	andeq	r9, r1, r4, lsr #6
   17ba8:	andeq	r8, r1, ip, asr #24
   17bac:	andeq	r8, r1, r4, ror ip
   17bb0:	andeq	r9, r1, r8, lsr r3
   17bb4:	andeq	r9, r1, pc, asr r3
   17bb8:	push	{r4, lr}
   17bbc:	bl	17f84 <lchmod@@Base+0x26d4>
   17bc0:	cmp	r0, #0
   17bc4:	popne	{r4, pc}
   17bc8:	bl	17e70 <lchmod@@Base+0x25c0>
   17bcc:	push	{r4, lr}
   17bd0:	bl	17f84 <lchmod@@Base+0x26d4>
   17bd4:	cmp	r0, #0
   17bd8:	popne	{r4, pc}
   17bdc:	bl	17e70 <lchmod@@Base+0x25c0>
   17be0:	b	17bb8 <lchmod@@Base+0x2308>
   17be4:	push	{r4, r5, r6, lr}
   17be8:	mov	r5, r0
   17bec:	mov	r4, r1
   17bf0:	bl	17fb0 <lchmod@@Base+0x2700>
   17bf4:	cmp	r0, #0
   17bf8:	popne	{r4, r5, r6, pc}
   17bfc:	adds	r4, r4, #0
   17c00:	movne	r4, #1
   17c04:	cmp	r5, #0
   17c08:	moveq	r4, #1
   17c0c:	cmp	r4, #0
   17c10:	popeq	{r4, r5, r6, pc}
   17c14:	bl	17e70 <lchmod@@Base+0x25c0>
   17c18:	push	{r4, lr}
   17c1c:	bl	18554 <lchmod@@Base+0x2ca4>
   17c20:	cmp	r0, #0
   17c24:	popne	{r4, pc}
   17c28:	bl	17e70 <lchmod@@Base+0x25c0>
   17c2c:	push	{r4, r5, r6, lr}
   17c30:	mov	r6, r0
   17c34:	mov	r5, r1
   17c38:	mov	r4, r2
   17c3c:	bl	185fc <lchmod@@Base+0x2d4c>
   17c40:	cmp	r0, #0
   17c44:	popne	{r4, r5, r6, pc}
   17c48:	cmp	r6, #0
   17c4c:	beq	17c5c <lchmod@@Base+0x23ac>
   17c50:	cmp	r5, #0
   17c54:	cmpne	r4, #0
   17c58:	popeq	{r4, r5, r6, pc}
   17c5c:	bl	17e70 <lchmod@@Base+0x25c0>
   17c60:	b	17c2c <lchmod@@Base+0x237c>
   17c64:	push	{r4, lr}
   17c68:	bl	18564 <lchmod@@Base+0x2cb4>
   17c6c:	cmp	r0, #0
   17c70:	popne	{r4, pc}
   17c74:	bl	17e70 <lchmod@@Base+0x25c0>
   17c78:	mov	r2, r1
   17c7c:	mov	r1, r0
   17c80:	mov	r0, #0
   17c84:	b	17c2c <lchmod@@Base+0x237c>
   17c88:	mov	r2, r1
   17c8c:	mov	r1, r0
   17c90:	mov	r0, #0
   17c94:	b	17c64 <lchmod@@Base+0x23b4>
   17c98:	cmp	r0, #0
   17c9c:	push	{r4, r5, r6, lr}
   17ca0:	mov	r5, r1
   17ca4:	ldr	r4, [r1]
   17ca8:	bne	17cd4 <lchmod@@Base+0x2424>
   17cac:	cmp	r4, #0
   17cb0:	bne	17cc4 <lchmod@@Base+0x2414>
   17cb4:	mov	r4, #64	; 0x40
   17cb8:	udiv	r4, r4, r2
   17cbc:	cmp	r2, #64	; 0x40
   17cc0:	addhi	r4, r4, #1
   17cc4:	mov	r1, r4
   17cc8:	bl	17c2c <lchmod@@Base+0x237c>
   17ccc:	str	r4, [r5]
   17cd0:	pop	{r4, r5, r6, pc}
   17cd4:	lsr	r3, r4, #1
   17cd8:	add	r3, r3, #1
   17cdc:	adds	r4, r4, r3
   17ce0:	bcc	17cc4 <lchmod@@Base+0x2414>
   17ce4:	bl	17e70 <lchmod@@Base+0x25c0>
   17ce8:	mov	r2, #1
   17cec:	b	17c98 <lchmod@@Base+0x23e8>
   17cf0:	ldr	ip, [r1]
   17cf4:	push	{r4, r5, r6, r7, r8, lr}
   17cf8:	mov	r5, r1
   17cfc:	mvn	r8, r3
   17d00:	lsr	r8, r8, #31
   17d04:	ldr	lr, [sp, #24]
   17d08:	asr	r1, ip, #1
   17d0c:	adds	r4, ip, r1
   17d10:	mvnvs	r4, #-2147483648	; 0x80000000
   17d14:	cmp	r3, r4
   17d18:	movge	r1, #0
   17d1c:	andlt	r1, r8, #1
   17d20:	cmp	r1, #0
   17d24:	movne	r4, r3
   17d28:	smull	r6, r7, r4, lr
   17d2c:	cmp	r7, r6, asr #31
   17d30:	bne	17d48 <lchmod@@Base+0x2498>
   17d34:	cmp	r6, #63	; 0x3f
   17d38:	mov	r1, r6
   17d3c:	bgt	17d58 <lchmod@@Base+0x24a8>
   17d40:	mov	r1, #64	; 0x40
   17d44:	b	17d4c <lchmod@@Base+0x249c>
   17d48:	mvn	r1, #-2147483648	; 0x80000000
   17d4c:	sdiv	r4, r1, lr
   17d50:	mls	r6, lr, r4, r1
   17d54:	sub	r1, r1, r6
   17d58:	cmp	r0, #0
   17d5c:	sub	r6, r4, ip
   17d60:	streq	r0, [r5]
   17d64:	cmp	r6, r2
   17d68:	bge	17d9c <lchmod@@Base+0x24ec>
   17d6c:	adds	r4, ip, r2
   17d70:	bvs	17d98 <lchmod@@Base+0x24e8>
   17d74:	cmp	r4, r3
   17d78:	movle	r3, #0
   17d7c:	andgt	r3, r8, #1
   17d80:	cmp	r3, #0
   17d84:	bne	17d98 <lchmod@@Base+0x24e8>
   17d88:	smull	r2, r3, r4, lr
   17d8c:	cmp	r3, r2, asr #31
   17d90:	mov	r1, r2
   17d94:	beq	17d9c <lchmod@@Base+0x24ec>
   17d98:	bl	17e70 <lchmod@@Base+0x25c0>
   17d9c:	bl	17be4 <lchmod@@Base+0x2334>
   17da0:	str	r4, [r5]
   17da4:	pop	{r4, r5, r6, r7, r8, pc}
   17da8:	push	{r4, lr}
   17dac:	bl	17f30 <lchmod@@Base+0x2680>
   17db0:	cmp	r0, #0
   17db4:	popne	{r4, pc}
   17db8:	bl	17e70 <lchmod@@Base+0x25c0>
   17dbc:	mov	r1, #1
   17dc0:	b	17da8 <lchmod@@Base+0x24f8>
   17dc4:	push	{r4, lr}
   17dc8:	bl	17f30 <lchmod@@Base+0x2680>
   17dcc:	cmp	r0, #0
   17dd0:	popne	{r4, pc}
   17dd4:	bl	17e70 <lchmod@@Base+0x25c0>
   17dd8:	mov	r1, #1
   17ddc:	b	17dc4 <lchmod@@Base+0x2514>
   17de0:	push	{r4, r5, r6, lr}
   17de4:	mov	r4, r1
   17de8:	mov	r5, r0
   17dec:	mov	r0, r1
   17df0:	bl	17bb8 <lchmod@@Base+0x2308>
   17df4:	mov	r2, r4
   17df8:	mov	r1, r5
   17dfc:	pop	{r4, r5, r6, lr}
   17e00:	b	11504 <memcpy@plt>
   17e04:	push	{r4, r5, r6, lr}
   17e08:	mov	r4, r1
   17e0c:	mov	r5, r0
   17e10:	mov	r0, r1
   17e14:	bl	17bcc <lchmod@@Base+0x231c>
   17e18:	mov	r2, r4
   17e1c:	mov	r1, r5
   17e20:	pop	{r4, r5, r6, lr}
   17e24:	b	11504 <memcpy@plt>
   17e28:	push	{r4, r5, r6, lr}
   17e2c:	mov	r5, r0
   17e30:	add	r0, r1, #1
   17e34:	mov	r4, r1
   17e38:	bl	17bcc <lchmod@@Base+0x231c>
   17e3c:	mov	r2, #0
   17e40:	mov	r1, r5
   17e44:	strb	r2, [r0, r4]
   17e48:	mov	r2, r4
   17e4c:	pop	{r4, r5, r6, lr}
   17e50:	b	11504 <memcpy@plt>
   17e54:	push	{r4, lr}
   17e58:	mov	r4, r0
   17e5c:	bl	116b4 <strlen@plt>
   17e60:	add	r1, r0, #1
   17e64:	mov	r0, r4
   17e68:	pop	{r4, lr}
   17e6c:	b	17de0 <lchmod@@Base+0x2530>
   17e70:	ldr	r3, [pc, #44]	; 17ea4 <lchmod@@Base+0x25f4>
   17e74:	mov	r2, #5
   17e78:	mov	r0, #0
   17e7c:	push	{r4, lr}
   17e80:	ldr	r1, [pc, #32]	; 17ea8 <lchmod@@Base+0x25f8>
   17e84:	ldr	r4, [r3]
   17e88:	bl	11540 <dcgettext@plt>
   17e8c:	mov	r3, r0
   17e90:	ldr	r2, [pc, #20]	; 17eac <lchmod@@Base+0x25fc>
   17e94:	mov	r1, #0
   17e98:	mov	r0, r4
   17e9c:	bl	1160c <error@plt>
   17ea0:	bl	11840 <abort@plt>
   17ea4:	andeq	sl, r2, r8, lsl #3
   17ea8:	andeq	r9, r1, fp, lsr #7
   17eac:	andeq	r8, r1, r7, ror #29
   17eb0:	push	{r4, lr}
   17eb4:	orr	r1, r1, #512	; 0x200
   17eb8:	bl	13ed8 <__assert_fail@plt+0x2644>
   17ebc:	cmp	r0, #0
   17ec0:	popne	{r4, pc}
   17ec4:	bl	116e4 <__errno_location@plt>
   17ec8:	ldr	r3, [r0]
   17ecc:	cmp	r3, #22
   17ed0:	bne	17ee8 <lchmod@@Base+0x2638>
   17ed4:	ldr	r3, [pc, #16]	; 17eec <lchmod@@Base+0x263c>
   17ed8:	mov	r2, #41	; 0x29
   17edc:	ldr	r1, [pc, #12]	; 17ef0 <lchmod@@Base+0x2640>
   17ee0:	ldr	r0, [pc, #12]	; 17ef4 <lchmod@@Base+0x2644>
   17ee4:	bl	11894 <__assert_fail@plt>
   17ee8:	bl	17e70 <lchmod@@Base+0x25c0>
   17eec:			; <UNDEFINED> instruction: 0x000193bc
   17ef0:	andeq	r9, r1, r6, asr #7
   17ef4:	ldrdeq	r9, [r1], -r1
   17ef8:	ldr	r3, [r0, #48]	; 0x30
   17efc:	and	r3, r3, #17
   17f00:	cmp	r3, #16
   17f04:	beq	17f20 <lchmod@@Base+0x2670>
   17f08:	cmp	r3, #17
   17f0c:	bne	17f28 <lchmod@@Base+0x2678>
   17f10:	ldr	r0, [r1, #48]	; 0x30
   17f14:	adds	r0, r0, #0
   17f18:	movne	r0, #1
   17f1c:	bx	lr
   17f20:	mov	r0, #1
   17f24:	bx	lr
   17f28:	mov	r0, #0
   17f2c:	bx	lr
   17f30:	cmp	r1, #0
   17f34:	cmpne	r0, #0
   17f38:	beq	17f70 <lchmod@@Base+0x26c0>
   17f3c:	push	{r4, r5, r6, lr}
   17f40:	umull	r4, r5, r0, r1
   17f44:	adds	r3, r5, #0
   17f48:	movne	r3, #1
   17f4c:	cmp	r4, #0
   17f50:	blt	17f5c <lchmod@@Base+0x26ac>
   17f54:	cmp	r3, #0
   17f58:	beq	17f7c <lchmod@@Base+0x26cc>
   17f5c:	bl	116e4 <__errno_location@plt>
   17f60:	mov	r3, #12
   17f64:	str	r3, [r0]
   17f68:	mov	r0, #0
   17f6c:	pop	{r4, r5, r6, pc}
   17f70:	mov	r1, #1
   17f74:	mov	r0, r1
   17f78:	b	11474 <calloc@plt>
   17f7c:	pop	{r4, r5, r6, lr}
   17f80:	b	17f78 <lchmod@@Base+0x26c8>
   17f84:	cmp	r0, #0
   17f88:	beq	17fa8 <lchmod@@Base+0x26f8>
   17f8c:	bge	17fac <lchmod@@Base+0x26fc>
   17f90:	push	{r4, lr}
   17f94:	bl	116e4 <__errno_location@plt>
   17f98:	mov	r3, #12
   17f9c:	str	r3, [r0]
   17fa0:	mov	r0, #0
   17fa4:	pop	{r4, pc}
   17fa8:	mov	r0, #1
   17fac:	b	11630 <malloc@plt>
   17fb0:	cmp	r0, #0
   17fb4:	bne	17fc0 <lchmod@@Base+0x2710>
   17fb8:	mov	r0, r1
   17fbc:	b	17f84 <lchmod@@Base+0x26d4>
   17fc0:	cmp	r1, #0
   17fc4:	push	{r4, lr}
   17fc8:	bne	17fd8 <lchmod@@Base+0x2728>
   17fcc:	bl	12cd8 <__assert_fail@plt+0x1444>
   17fd0:	mov	r0, #0
   17fd4:	pop	{r4, pc}
   17fd8:	blt	17fe4 <lchmod@@Base+0x2734>
   17fdc:	pop	{r4, lr}
   17fe0:	b	11558 <realloc@plt>
   17fe4:	bl	116e4 <__errno_location@plt>
   17fe8:	mov	r3, #12
   17fec:	str	r3, [r0]
   17ff0:	b	17fd0 <lchmod@@Base+0x2720>
   17ff4:	mov	r3, r0
   17ff8:	mov	r2, r3
   17ffc:	mov	r0, r3
   18000:	ldrb	r1, [r2], #1
   18004:	cmp	r1, #47	; 0x2f
   18008:	beq	18014 <lchmod@@Base+0x2764>
   1800c:	mov	r2, #0
   18010:	b	18030 <lchmod@@Base+0x2780>
   18014:	mov	r3, r2
   18018:	b	17ff8 <lchmod@@Base+0x2748>
   1801c:	cmp	r1, #47	; 0x2f
   18020:	moveq	r2, #1
   18024:	beq	18030 <lchmod@@Base+0x2780>
   18028:	cmp	r2, #0
   1802c:	bne	18044 <lchmod@@Base+0x2794>
   18030:	mov	ip, r3
   18034:	ldrb	r1, [r3], #1
   18038:	cmp	r1, #0
   1803c:	bne	1801c <lchmod@@Base+0x276c>
   18040:	bx	lr
   18044:	mov	r0, ip
   18048:	b	1800c <lchmod@@Base+0x275c>
   1804c:	push	{r4, lr}
   18050:	mov	r4, r0
   18054:	bl	116b4 <strlen@plt>
   18058:	cmp	r0, #1
   1805c:	popls	{r4, pc}
   18060:	sub	r3, r0, #1
   18064:	ldrb	r2, [r4, r3]
   18068:	cmp	r2, #47	; 0x2f
   1806c:	popne	{r4, pc}
   18070:	mov	r0, r3
   18074:	b	18058 <lchmod@@Base+0x27a8>
   18078:	push	{r4, r5, r6, lr}
   1807c:	mov	r4, r0
   18080:	bl	115e8 <__fpending@plt>
   18084:	mov	r5, r0
   18088:	mov	r0, r4
   1808c:	bl	115f4 <ferror_unlocked@plt>
   18090:	mov	r6, r0
   18094:	mov	r0, r4
   18098:	bl	181b4 <lchmod@@Base+0x2904>
   1809c:	cmp	r6, #0
   180a0:	mov	r4, r0
   180a4:	bne	180d0 <lchmod@@Base+0x2820>
   180a8:	cmp	r0, #0
   180ac:	beq	180c8 <lchmod@@Base+0x2818>
   180b0:	cmp	r5, #0
   180b4:	bne	180e0 <lchmod@@Base+0x2830>
   180b8:	bl	116e4 <__errno_location@plt>
   180bc:	ldr	r4, [r0]
   180c0:	subs	r4, r4, #9
   180c4:	mvnne	r4, #0
   180c8:	mov	r0, r4
   180cc:	pop	{r4, r5, r6, pc}
   180d0:	cmp	r0, #0
   180d4:	bne	180e0 <lchmod@@Base+0x2830>
   180d8:	bl	116e4 <__errno_location@plt>
   180dc:	str	r4, [r0]
   180e0:	mvn	r4, #0
   180e4:	b	180c8 <lchmod@@Base+0x2818>
   180e8:	mov	r3, #0
   180ec:	mov	r2, #0
   180f0:	strd	r2, [r0, #16]
   180f4:	ldr	r3, [pc, #4]	; 18100 <lchmod@@Base+0x2850>
   180f8:	str	r3, [r0, #24]
   180fc:	bx	lr
   18100:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18104:	ldr	r3, [pc, #152]	; 181a4 <lchmod@@Base+0x28f4>
   18108:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1810c:	ldr	r2, [r0, #24]
   18110:	cmp	r2, r3
   18114:	beq	1812c <lchmod@@Base+0x287c>
   18118:	ldr	r3, [pc, #136]	; 181a8 <lchmod@@Base+0x28f8>
   1811c:	mov	r2, #60	; 0x3c
   18120:	ldr	r1, [pc, #132]	; 181ac <lchmod@@Base+0x28fc>
   18124:	ldr	r0, [pc, #132]	; 181b0 <lchmod@@Base+0x2900>
   18128:	bl	11894 <__assert_fail@plt>
   1812c:	ldrd	r6, [r0, #16]
   18130:	orrs	r3, r6, r7
   18134:	beq	18168 <lchmod@@Base+0x28b8>
   18138:	ldrd	r2, [r0]
   1813c:	ldrd	r4, [r1, #96]	; 0x60
   18140:	cmp	r5, r3
   18144:	cmpeq	r4, r2
   18148:	bne	18168 <lchmod@@Base+0x28b8>
   1814c:	ldrd	r4, [r1]
   18150:	ldrd	r2, [r0, #8]
   18154:	cmp	r5, r3
   18158:	cmpeq	r4, r2
   1815c:	bne	18168 <lchmod@@Base+0x28b8>
   18160:	mov	r0, #1
   18164:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18168:	adds	r8, r6, #1
   1816c:	adc	r9, r7, #0
   18170:	and	r2, r6, r8
   18174:	and	r3, r7, r9
   18178:	orrs	r3, r2, r3
   1817c:	strd	r8, [r0, #16]
   18180:	bne	1819c <lchmod@@Base+0x28ec>
   18184:	orrs	r3, r8, r9
   18188:	beq	18160 <lchmod@@Base+0x28b0>
   1818c:	ldrd	r2, [r1]
   18190:	strd	r2, [r0, #8]
   18194:	ldrd	r2, [r1, #96]	; 0x60
   18198:	strd	r2, [r0]
   1819c:	mov	r0, #0
   181a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   181a4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   181a8:	andeq	r9, r1, r1, ror #7
   181ac:	andeq	r9, r1, sp, ror #7
   181b0:	strdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   181b4:	push	{r0, r1, r2, r4, r5, lr}
   181b8:	mov	r4, r0
   181bc:	bl	11720 <fileno@plt>
   181c0:	cmp	r0, #0
   181c4:	mov	r0, r4
   181c8:	bge	181d8 <lchmod@@Base+0x2928>
   181cc:	add	sp, sp, #12
   181d0:	pop	{r4, r5, lr}
   181d4:	b	11738 <fclose@plt>
   181d8:	bl	11648 <__freading@plt>
   181dc:	cmp	r0, #0
   181e0:	bne	1821c <lchmod@@Base+0x296c>
   181e4:	mov	r0, r4
   181e8:	bl	18440 <lchmod@@Base+0x2b90>
   181ec:	cmp	r0, #0
   181f0:	bne	18250 <lchmod@@Base+0x29a0>
   181f4:	mov	r5, #0
   181f8:	mov	r0, r4
   181fc:	bl	11738 <fclose@plt>
   18200:	cmp	r5, #0
   18204:	beq	18214 <lchmod@@Base+0x2964>
   18208:	bl	116e4 <__errno_location@plt>
   1820c:	str	r5, [r0]
   18210:	mvn	r0, #0
   18214:	add	sp, sp, #12
   18218:	pop	{r4, r5, pc}
   1821c:	mov	r0, r4
   18220:	bl	11720 <fileno@plt>
   18224:	mov	r3, #1
   18228:	mov	r2, #0
   1822c:	str	r3, [sp]
   18230:	mov	r3, #0
   18234:	bl	115b8 <lseek64@plt>
   18238:	mvn	r3, #0
   1823c:	mvn	r2, #0
   18240:	cmp	r1, r3
   18244:	cmpeq	r0, r2
   18248:	bne	181e4 <lchmod@@Base+0x2934>
   1824c:	b	181f4 <lchmod@@Base+0x2944>
   18250:	bl	116e4 <__errno_location@plt>
   18254:	ldr	r5, [r0]
   18258:	b	181f8 <lchmod@@Base+0x2948>
   1825c:	push	{r1, r2, r3}
   18260:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   18264:	add	r2, sp, #40	; 0x28
   18268:	ldr	r1, [sp, #36]	; 0x24
   1826c:	str	r2, [sp, #4]
   18270:	cmp	r1, #0
   18274:	beq	182c4 <lchmod@@Base+0x2a14>
   18278:	movw	r3, #1030	; 0x406
   1827c:	mov	r5, r0
   18280:	cmp	r1, r3
   18284:	beq	182d0 <lchmod@@Base+0x2a20>
   18288:	cmp	r1, #11
   1828c:	beq	182b4 <lchmod@@Base+0x2a04>
   18290:	bgt	183c4 <lchmod@@Base+0x2b14>
   18294:	cmp	r1, #4
   18298:	beq	183dc <lchmod@@Base+0x2b2c>
   1829c:	bgt	183bc <lchmod@@Base+0x2b0c>
   182a0:	cmp	r1, #2
   182a4:	beq	183dc <lchmod@@Base+0x2b2c>
   182a8:	bgt	182b4 <lchmod@@Base+0x2a04>
   182ac:	cmp	r1, #1
   182b0:	bne	183dc <lchmod@@Base+0x2b2c>
   182b4:	mov	r0, r5
   182b8:	bl	11750 <fcntl64@plt>
   182bc:	mov	r4, r0
   182c0:	b	18318 <lchmod@@Base+0x2a68>
   182c4:	ldr	r2, [sp, #40]	; 0x28
   182c8:	bl	11750 <fcntl64@plt>
   182cc:	b	182bc <lchmod@@Base+0x2a0c>
   182d0:	ldr	r6, [pc, #304]	; 18408 <lchmod@@Base+0x2b58>
   182d4:	add	r3, sp, #44	; 0x2c
   182d8:	str	r3, [sp, #4]
   182dc:	ldr	r7, [r2]
   182e0:	ldr	r3, [r6]
   182e4:	mov	r8, r6
   182e8:	mov	r2, r7
   182ec:	cmp	r3, #0
   182f0:	blt	18380 <lchmod@@Base+0x2ad0>
   182f4:	bl	11750 <fcntl64@plt>
   182f8:	subs	r4, r0, #0
   182fc:	bge	18310 <lchmod@@Base+0x2a60>
   18300:	bl	116e4 <__errno_location@plt>
   18304:	ldr	r3, [r0]
   18308:	cmp	r3, #22
   1830c:	beq	1832c <lchmod@@Base+0x2a7c>
   18310:	mov	r3, #1
   18314:	str	r3, [r8]
   18318:	mov	r0, r4
   1831c:	add	sp, sp, #12
   18320:	pop	{r4, r5, r6, r7, r8, lr}
   18324:	add	sp, sp, #12
   18328:	bx	lr
   1832c:	mov	r2, r7
   18330:	mov	r1, #0
   18334:	mov	r0, r5
   18338:	bl	11750 <fcntl64@plt>
   1833c:	subs	r4, r0, #0
   18340:	mvnge	r3, #0
   18344:	strge	r3, [r6]
   18348:	blt	18318 <lchmod@@Base+0x2a68>
   1834c:	mov	r1, #1
   18350:	mov	r0, r4
   18354:	bl	11750 <fcntl64@plt>
   18358:	subs	r2, r0, #0
   1835c:	bge	183a0 <lchmod@@Base+0x2af0>
   18360:	bl	116e4 <__errno_location@plt>
   18364:	mov	r5, r0
   18368:	mov	r0, r4
   1836c:	ldr	r6, [r5]
   18370:	mvn	r4, #0
   18374:	bl	1184c <close@plt>
   18378:	str	r6, [r5]
   1837c:	b	18318 <lchmod@@Base+0x2a68>
   18380:	mov	r1, #0
   18384:	bl	11750 <fcntl64@plt>
   18388:	subs	r4, r0, #0
   1838c:	blt	18318 <lchmod@@Base+0x2a68>
   18390:	ldr	r3, [r6]
   18394:	cmn	r3, #1
   18398:	bne	18318 <lchmod@@Base+0x2a68>
   1839c:	b	1834c <lchmod@@Base+0x2a9c>
   183a0:	orr	r2, r2, #1
   183a4:	mov	r1, #2
   183a8:	mov	r0, r4
   183ac:	bl	11750 <fcntl64@plt>
   183b0:	cmn	r0, #1
   183b4:	bne	18318 <lchmod@@Base+0x2a68>
   183b8:	b	18360 <lchmod@@Base+0x2ab0>
   183bc:	cmp	r1, #9
   183c0:	b	182b0 <lchmod@@Base+0x2a00>
   183c4:	movw	r2, #1031	; 0x407
   183c8:	cmp	r1, r2
   183cc:	bgt	183ec <lchmod@@Base+0x2b3c>
   183d0:	cmp	r1, r3
   183d4:	movwlt	r3, #1025	; 0x401
   183d8:	blt	18400 <lchmod@@Base+0x2b50>
   183dc:	ldr	r3, [sp, #4]
   183e0:	mov	r0, r5
   183e4:	ldr	r2, [r3]
   183e8:	b	182c8 <lchmod@@Base+0x2a18>
   183ec:	movw	r3, #1033	; 0x409
   183f0:	cmp	r1, r3
   183f4:	beq	183dc <lchmod@@Base+0x2b2c>
   183f8:	blt	182b4 <lchmod@@Base+0x2a04>
   183fc:	movw	r3, #1034	; 0x40a
   18400:	cmp	r1, r3
   18404:	b	182b0 <lchmod@@Base+0x2a00>
   18408:	andeq	sl, r2, ip, lsr #6
   1840c:	push	{r1, r2, r3}
   18410:	push	{r0, r1, lr}
   18414:	ldr	r1, [sp, #12]
   18418:	ands	r2, r1, #64	; 0x40
   1841c:	ldrne	r2, [sp, #16]
   18420:	addne	r3, sp, #16
   18424:	strne	r3, [sp, #4]
   18428:	bl	11618 <open64@plt>
   1842c:	bl	17674 <lchmod@@Base+0x1dc4>
   18430:	add	sp, sp, #8
   18434:	pop	{lr}		; (ldr lr, [sp], #4)
   18438:	add	sp, sp, #12
   1843c:	bx	lr
   18440:	push	{r0, r1, r4, lr}
   18444:	subs	r4, r0, #0
   18448:	bne	1845c <lchmod@@Base+0x2bac>
   1844c:	mov	r0, r4
   18450:	add	sp, sp, #8
   18454:	pop	{r4, lr}
   18458:	b	114bc <fflush@plt>
   1845c:	bl	11648 <__freading@plt>
   18460:	cmp	r0, #0
   18464:	beq	1844c <lchmod@@Base+0x2b9c>
   18468:	ldr	r3, [r4]
   1846c:	tst	r3, #256	; 0x100
   18470:	beq	1844c <lchmod@@Base+0x2b9c>
   18474:	mov	r3, #1
   18478:	mov	r2, #0
   1847c:	mov	r0, r4
   18480:	str	r3, [sp]
   18484:	mov	r3, #0
   18488:	bl	18490 <lchmod@@Base+0x2be0>
   1848c:	b	1844c <lchmod@@Base+0x2b9c>
   18490:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   18494:	mov	r4, r0
   18498:	ldmib	r0, {ip, lr}
   1849c:	ldr	r8, [sp, #32]
   184a0:	cmp	lr, ip
   184a4:	bne	18514 <lchmod@@Base+0x2c64>
   184a8:	ldr	ip, [r0, #16]
   184ac:	ldr	lr, [r0, #20]
   184b0:	cmp	lr, ip
   184b4:	bne	18514 <lchmod@@Base+0x2c64>
   184b8:	ldr	r5, [r0, #36]	; 0x24
   184bc:	cmp	r5, #0
   184c0:	bne	18514 <lchmod@@Base+0x2c64>
   184c4:	mov	r6, r2
   184c8:	mov	r7, r3
   184cc:	bl	11720 <fileno@plt>
   184d0:	mov	r2, r6
   184d4:	mov	r3, r7
   184d8:	str	r8, [sp]
   184dc:	bl	115b8 <lseek64@plt>
   184e0:	mvn	r3, #0
   184e4:	mvn	r2, #0
   184e8:	cmp	r1, r3
   184ec:	cmpeq	r0, r2
   184f0:	mvneq	r0, #0
   184f4:	beq	1850c <lchmod@@Base+0x2c5c>
   184f8:	ldr	r3, [r4]
   184fc:	strd	r0, [r4, #80]	; 0x50
   18500:	mov	r0, r5
   18504:	bic	r3, r3, #16
   18508:	str	r3, [r4]
   1850c:	add	sp, sp, #8
   18510:	pop	{r4, r5, r6, r7, r8, pc}
   18514:	mov	r0, r4
   18518:	str	r8, [sp, #32]
   1851c:	add	sp, sp, #8
   18520:	pop	{r4, r5, r6, r7, r8, lr}
   18524:	b	11744 <fseeko64@plt>
   18528:	sub	r0, r0, #1
   1852c:	mov	r3, #0
   18530:	ldrb	r2, [r0, #1]!
   18534:	cmp	r2, #0
   18538:	bne	18548 <lchmod@@Base+0x2c98>
   1853c:	udiv	r0, r3, r1
   18540:	mls	r0, r1, r0, r3
   18544:	bx	lr
   18548:	add	r3, r2, r3, ror #23
   1854c:	b	18530 <lchmod@@Base+0x2c80>
   18550:	b	17f84 <lchmod@@Base+0x26d4>
   18554:	cmp	r1, #0
   18558:	orreq	r1, r1, #1
   1855c:	b	17fb0 <lchmod@@Base+0x2700>
   18560:	b	17f30 <lchmod@@Base+0x2680>
   18564:	cmp	r2, #0
   18568:	cmpne	r1, #0
   1856c:	moveq	r2, #1
   18570:	moveq	r1, r2
   18574:	b	185fc <lchmod@@Base+0x2d4c>
   18578:	push	{r4, lr}
   1857c:	mov	r0, #14
   18580:	bl	11780 <nl_langinfo@plt>
   18584:	cmp	r0, #0
   18588:	beq	185a0 <lchmod@@Base+0x2cf0>
   1858c:	ldrb	r2, [r0]
   18590:	ldr	r3, [pc, #16]	; 185a8 <lchmod@@Base+0x2cf8>
   18594:	cmp	r2, #0
   18598:	moveq	r0, r3
   1859c:	pop	{r4, pc}
   185a0:	ldr	r0, [pc]	; 185a8 <lchmod@@Base+0x2cf8>
   185a4:	pop	{r4, pc}
   185a8:	andeq	r9, r1, r7, lsl r4
   185ac:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   185b0:	subs	r5, r0, #0
   185b4:	mov	r7, r2
   185b8:	addeq	r5, sp, #4
   185bc:	mov	r6, r1
   185c0:	mov	r0, r5
   185c4:	bl	11600 <mbrtowc@plt>
   185c8:	cmp	r7, #0
   185cc:	cmnne	r0, #3
   185d0:	mov	r4, r0
   185d4:	bls	185f0 <lchmod@@Base+0x2d40>
   185d8:	mov	r0, #0
   185dc:	bl	18634 <lchmod@@Base+0x2d84>
   185e0:	cmp	r0, #0
   185e4:	ldrbeq	r3, [r6]
   185e8:	moveq	r4, #1
   185ec:	streq	r3, [r5]
   185f0:	mov	r0, r4
   185f4:	add	sp, sp, #12
   185f8:	pop	{r4, r5, r6, r7, pc}
   185fc:	umull	r2, r3, r1, r2
   18600:	cmp	r3, #0
   18604:	bne	18610 <lchmod@@Base+0x2d60>
   18608:	mov	r1, r2
   1860c:	b	17fb0 <lchmod@@Base+0x2700>
   18610:	push	{r4, lr}
   18614:	bl	116e4 <__errno_location@plt>
   18618:	mov	r3, #12
   1861c:	str	r3, [r0]
   18620:	mov	r0, #0
   18624:	pop	{r4, pc}
   18628:	mov	r2, #3
   1862c:	mov	r1, #0
   18630:	b	1825c <lchmod@@Base+0x29ac>
   18634:	push	{lr}		; (str lr, [sp, #-4]!)
   18638:	sub	sp, sp, #268	; 0x10c
   1863c:	movw	r2, #257	; 0x101
   18640:	add	r1, sp, #4
   18644:	bl	18690 <lchmod@@Base+0x2de0>
   18648:	cmp	r0, #0
   1864c:	movne	r0, #0
   18650:	bne	18680 <lchmod@@Base+0x2dd0>
   18654:	ldr	r1, [pc, #44]	; 18688 <lchmod@@Base+0x2dd8>
   18658:	add	r0, sp, #4
   1865c:	bl	114a4 <strcmp@plt>
   18660:	cmp	r0, #0
   18664:	beq	1867c <lchmod@@Base+0x2dcc>
   18668:	ldr	r1, [pc, #28]	; 1868c <lchmod@@Base+0x2ddc>
   1866c:	add	r0, sp, #4
   18670:	bl	114a4 <strcmp@plt>
   18674:	adds	r0, r0, #0
   18678:	movne	r0, #1
   1867c:	and	r0, r0, #1
   18680:	add	sp, sp, #268	; 0x10c
   18684:	pop	{pc}		; (ldr pc, [sp], #4)
   18688:	andeq	r9, r1, sp, lsl r4
   1868c:	andeq	r9, r1, pc, lsl r4
   18690:	push	{r4, r5, r6, lr}
   18694:	mov	r5, r1
   18698:	mov	r1, #0
   1869c:	mov	r4, r2
   186a0:	bl	1175c <setlocale@plt>
   186a4:	subs	r6, r0, #0
   186a8:	bne	186bc <lchmod@@Base+0x2e0c>
   186ac:	cmp	r4, #0
   186b0:	mov	r0, #22
   186b4:	strbne	r6, [r5]
   186b8:	pop	{r4, r5, r6, pc}
   186bc:	bl	116b4 <strlen@plt>
   186c0:	cmp	r4, r0
   186c4:	bls	186e0 <lchmod@@Base+0x2e30>
   186c8:	add	r2, r0, #1
   186cc:	mov	r1, r6
   186d0:	mov	r0, r5
   186d4:	bl	11504 <memcpy@plt>
   186d8:	mov	r0, #0
   186dc:	pop	{r4, r5, r6, pc}
   186e0:	cmp	r4, #0
   186e4:	beq	18704 <lchmod@@Base+0x2e54>
   186e8:	sub	r4, r4, #1
   186ec:	mov	r1, r6
   186f0:	mov	r2, r4
   186f4:	mov	r0, r5
   186f8:	bl	11504 <memcpy@plt>
   186fc:	mov	r3, #0
   18700:	strb	r3, [r5, r4]
   18704:	mov	r0, #34	; 0x22
   18708:	pop	{r4, r5, r6, pc}
   1870c:	mov	r1, #0
   18710:	b	1175c <setlocale@plt>
   18714:	cmp	r3, #0
   18718:	cmpeq	r2, #0
   1871c:	bne	18734 <lchmod@@Base+0x2e84>
   18720:	cmp	r1, #0
   18724:	cmpeq	r0, #0
   18728:	mvnne	r1, #0
   1872c:	mvnne	r0, #0
   18730:	b	18750 <lchmod@@Base+0x2ea0>
   18734:	sub	sp, sp, #8
   18738:	push	{sp, lr}
   1873c:	bl	18760 <lchmod@@Base+0x2eb0>
   18740:	ldr	lr, [sp, #4]
   18744:	add	sp, sp, #8
   18748:	pop	{r2, r3}
   1874c:	bx	lr
   18750:	push	{r1, lr}
   18754:	mov	r0, #8
   18758:	bl	1148c <raise@plt>
   1875c:	pop	{r1, pc}
   18760:	cmp	r1, r3
   18764:	cmpeq	r0, r2
   18768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1876c:	mov	r4, r0
   18770:	movcc	r0, #0
   18774:	mov	r5, r1
   18778:	ldr	lr, [sp, #36]	; 0x24
   1877c:	movcc	r1, r0
   18780:	bcc	1887c <lchmod@@Base+0x2fcc>
   18784:	cmp	r3, #0
   18788:	clzeq	ip, r2
   1878c:	clzne	ip, r3
   18790:	addeq	ip, ip, #32
   18794:	cmp	r5, #0
   18798:	clzeq	r1, r4
   1879c:	addeq	r1, r1, #32
   187a0:	clzne	r1, r5
   187a4:	sub	ip, ip, r1
   187a8:	sub	sl, ip, #32
   187ac:	lsl	r9, r3, ip
   187b0:	rsb	fp, ip, #32
   187b4:	orr	r9, r9, r2, lsl sl
   187b8:	orr	r9, r9, r2, lsr fp
   187bc:	lsl	r8, r2, ip
   187c0:	cmp	r5, r9
   187c4:	cmpeq	r4, r8
   187c8:	movcc	r0, #0
   187cc:	movcc	r1, r0
   187d0:	bcc	187ec <lchmod@@Base+0x2f3c>
   187d4:	mov	r0, #1
   187d8:	subs	r4, r4, r8
   187dc:	lsl	r1, r0, sl
   187e0:	orr	r1, r1, r0, lsr fp
   187e4:	lsl	r0, r0, ip
   187e8:	sbc	r5, r5, r9
   187ec:	cmp	ip, #0
   187f0:	beq	1887c <lchmod@@Base+0x2fcc>
   187f4:	lsr	r6, r8, #1
   187f8:	orr	r6, r6, r9, lsl #31
   187fc:	lsr	r7, r9, #1
   18800:	mov	r2, ip
   18804:	b	18828 <lchmod@@Base+0x2f78>
   18808:	subs	r3, r4, r6
   1880c:	sbc	r8, r5, r7
   18810:	adds	r3, r3, r3
   18814:	adc	r8, r8, r8
   18818:	adds	r4, r3, #1
   1881c:	adc	r5, r8, #0
   18820:	subs	r2, r2, #1
   18824:	beq	18844 <lchmod@@Base+0x2f94>
   18828:	cmp	r5, r7
   1882c:	cmpeq	r4, r6
   18830:	bcs	18808 <lchmod@@Base+0x2f58>
   18834:	adds	r4, r4, r4
   18838:	adc	r5, r5, r5
   1883c:	subs	r2, r2, #1
   18840:	bne	18828 <lchmod@@Base+0x2f78>
   18844:	lsr	r3, r4, ip
   18848:	orr	r3, r3, r5, lsl fp
   1884c:	lsr	r2, r5, ip
   18850:	orr	r3, r3, r5, lsr sl
   18854:	adds	r0, r0, r4
   18858:	mov	r4, r3
   1885c:	lsl	r3, r2, ip
   18860:	orr	r3, r3, r4, lsl sl
   18864:	lsl	ip, r4, ip
   18868:	orr	r3, r3, r4, lsr fp
   1886c:	adc	r1, r1, r5
   18870:	subs	r0, r0, ip
   18874:	mov	r5, r2
   18878:	sbc	r1, r1, r3
   1887c:	cmp	lr, #0
   18880:	strdne	r4, [lr]
   18884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18888:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1888c:	mov	r7, r0
   18890:	ldr	r6, [pc, #72]	; 188e0 <lchmod@@Base+0x3030>
   18894:	ldr	r5, [pc, #72]	; 188e4 <lchmod@@Base+0x3034>
   18898:	add	r6, pc, r6
   1889c:	add	r5, pc, r5
   188a0:	sub	r6, r6, r5
   188a4:	mov	r8, r1
   188a8:	mov	r9, r2
   188ac:	bl	1143c <fstatfs64@plt-0x20>
   188b0:	asrs	r6, r6, #2
   188b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   188b8:	mov	r4, #0
   188bc:	add	r4, r4, #1
   188c0:	ldr	r3, [r5], #4
   188c4:	mov	r2, r9
   188c8:	mov	r1, r8
   188cc:	mov	r0, r7
   188d0:	blx	r3
   188d4:	cmp	r6, r4
   188d8:	bne	188bc <lchmod@@Base+0x300c>
   188dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188e0:	andeq	r1, r1, ip, ror #12
   188e4:	andeq	r1, r1, r4, ror #12
   188e8:	bx	lr
   188ec:	ldr	r3, [pc, #12]	; 18900 <lchmod@@Base+0x3050>
   188f0:	mov	r1, #0
   188f4:	add	r3, pc, r3
   188f8:	ldr	r2, [r3]
   188fc:	b	116fc <__cxa_atexit@plt>
   18900:	andeq	r1, r1, r4, lsl #17
   18904:	mov	r2, r1
   18908:	mov	r1, r0
   1890c:	mov	r0, #3
   18910:	b	1181c <__xstat64@plt>
   18914:	mov	r2, r1
   18918:	mov	r1, r0
   1891c:	mov	r0, #3
   18920:	b	115a0 <__fxstat64@plt>
   18924:	mov	r2, r1
   18928:	mov	r1, r0
   1892c:	mov	r0, #3
   18930:	b	11858 <__lxstat64@plt>
   18934:	push	{lr}		; (str lr, [sp, #-4]!)
   18938:	sub	sp, sp, #12
   1893c:	str	r3, [sp]
   18940:	mov	r3, r2
   18944:	mov	r2, r1
   18948:	mov	r1, r0
   1894c:	mov	r0, #3
   18950:	bl	11588 <__fxstatat64@plt>
   18954:	add	sp, sp, #12
   18958:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001895c <.fini>:
   1895c:	push	{r3, lr}
   18960:	pop	{r3, pc}
