
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010dc4 <.init>:
   10dc4:	push	{r3, lr}
   10dc8:	bl	11084 <__assert_fail@plt+0x48>
   10dcc:	pop	{r3, pc}

Disassembly of section .plt:

00010dd0 <calloc@plt-0x14>:
   10dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dd4:	ldr	lr, [pc, #4]	; 10de0 <calloc@plt-0x4>
   10dd8:	add	lr, pc, lr
   10ddc:	ldr	pc, [lr, #8]!
   10de0:	andeq	r5, r1, r0, lsr #4

00010de4 <calloc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #544]!	; 0x220

00010df0 <fputs_unlocked@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #536]!	; 0x218

00010dfc <raise@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #528]!	; 0x210

00010e08 <strcmp@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #520]!	; 0x208

00010e14 <fflush@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #512]!	; 0x200

00010e20 <free@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #504]!	; 0x1f8

00010e2c <_exit@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #496]!	; 0x1f0

00010e38 <memcpy@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #488]!	; 0x1e8

00010e44 <mbsinit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e50 <__sched_cpucount@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #472]!	; 0x1d8

00010e5c <dcgettext@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #464]!	; 0x1d0

00010e68 <sysconf@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #456]!	; 0x1c8

00010e74 <realloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e80 <textdomain@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #440]!	; 0x1b8

00010e8c <iswprint@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #432]!	; 0x1b0

00010e98 <fwrite@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ea4 <lseek64@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb0 <__ctype_get_mb_cur_max@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #408]!	; 0x198

00010ebc <__fpending@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #400]!	; 0x190

00010ec8 <ferror_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #392]!	; 0x188

00010ed4 <mbrtowc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #384]!	; 0x180

00010ee0 <error@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #376]!	; 0x178

00010eec <getenv@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #368]!	; 0x170

00010ef8 <malloc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #360]!	; 0x168

00010f04 <__libc_start_main@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #352]!	; 0x160

00010f10 <__freading@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #344]!	; 0x158

00010f1c <__gmon_start__@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #336]!	; 0x150

00010f28 <getopt_long@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #328]!	; 0x148

00010f34 <__ctype_b_loc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #320]!	; 0x140

00010f40 <exit@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #312]!	; 0x138

00010f4c <bcmp@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #304]!	; 0x130

00010f58 <strtoul@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #296]!	; 0x128

00010f64 <strlen@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #288]!	; 0x120

00010f70 <strchr@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #280]!	; 0x118

00010f7c <__errno_location@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #272]!	; 0x110

00010f88 <__cxa_atexit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #264]!	; 0x108

00010f94 <memset@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #256]!	; 0x100

00010fa0 <__printf_chk@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #248]!	; 0xf8

00010fac <fileno@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #240]!	; 0xf0

00010fb8 <strtoumax@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #232]!	; 0xe8

00010fc4 <__fprintf_chk@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #224]!	; 0xe0

00010fd0 <fclose@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #216]!	; 0xd8

00010fdc <fseeko64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #208]!	; 0xd0

00010fe8 <setlocale@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #200]!	; 0xc8

00010ff4 <strrchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #192]!	; 0xc0

00011000 <nl_langinfo@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #184]!	; 0xb8

0001100c <sched_getaffinity@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #176]!	; 0xb0

00011018 <bindtextdomain@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #168]!	; 0xa8

00011024 <strncmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #160]!	; 0xa0

00011030 <abort@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #152]!	; 0x98

0001103c <__assert_fail@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #144]!	; 0x90

Disassembly of section .text:

00011048 <.text>:
   11048:	mov	fp, #0
   1104c:	mov	lr, #0
   11050:	pop	{r1}		; (ldr r1, [sp], #4)
   11054:	mov	r2, sp
   11058:	push	{r2}		; (str r2, [sp, #-4]!)
   1105c:	push	{r0}		; (str r0, [sp, #-4]!)
   11060:	ldr	ip, [pc, #16]	; 11078 <__assert_fail@plt+0x3c>
   11064:	push	{ip}		; (str ip, [sp, #-4]!)
   11068:	ldr	r0, [pc, #12]	; 1107c <__assert_fail@plt+0x40>
   1106c:	ldr	r3, [pc, #12]	; 11080 <__assert_fail@plt+0x44>
   11070:	bl	10f04 <__libc_start_main@plt>
   11074:	bl	11030 <abort@plt>
   11078:	andeq	r4, r1, r8, lsr #28
   1107c:	andeq	r1, r1, r8, asr #7
   11080:	andeq	r4, r1, r8, asr #27
   11084:	ldr	r3, [pc, #20]	; 110a0 <__assert_fail@plt+0x64>
   11088:	ldr	r2, [pc, #20]	; 110a4 <__assert_fail@plt+0x68>
   1108c:	add	r3, pc, r3
   11090:	ldr	r2, [r3, r2]
   11094:	cmp	r2, #0
   11098:	bxeq	lr
   1109c:	b	10f1c <__gmon_start__@plt>
   110a0:	andeq	r4, r1, ip, ror #30
   110a4:	ldrdeq	r0, [r0], -r8
   110a8:	ldr	r0, [pc, #24]	; 110c8 <__assert_fail@plt+0x8c>
   110ac:	ldr	r3, [pc, #24]	; 110cc <__assert_fail@plt+0x90>
   110b0:	cmp	r3, r0
   110b4:	bxeq	lr
   110b8:	ldr	r3, [pc, #16]	; 110d0 <__assert_fail@plt+0x94>
   110bc:	cmp	r3, #0
   110c0:	bxeq	lr
   110c4:	bx	r3
   110c8:	andeq	r6, r2, r0, lsr r1
   110cc:	andeq	r6, r2, r0, lsr r1
   110d0:	andeq	r0, r0, r0
   110d4:	ldr	r0, [pc, #36]	; 11100 <__assert_fail@plt+0xc4>
   110d8:	ldr	r1, [pc, #36]	; 11104 <__assert_fail@plt+0xc8>
   110dc:	sub	r1, r1, r0
   110e0:	asr	r1, r1, #2
   110e4:	add	r1, r1, r1, lsr #31
   110e8:	asrs	r1, r1, #1
   110ec:	bxeq	lr
   110f0:	ldr	r3, [pc, #16]	; 11108 <__assert_fail@plt+0xcc>
   110f4:	cmp	r3, #0
   110f8:	bxeq	lr
   110fc:	bx	r3
   11100:	andeq	r6, r2, r0, lsr r1
   11104:	andeq	r6, r2, r0, lsr r1
   11108:	andeq	r0, r0, r0
   1110c:	push	{r4, lr}
   11110:	ldr	r4, [pc, #24]	; 11130 <__assert_fail@plt+0xf4>
   11114:	ldrb	r3, [r4]
   11118:	cmp	r3, #0
   1111c:	popne	{r4, pc}
   11120:	bl	110a8 <__assert_fail@plt+0x6c>
   11124:	mov	r3, #1
   11128:	strb	r3, [r4]
   1112c:	pop	{r4, pc}
   11130:	andeq	r6, r2, ip, asr #2
   11134:	b	110d4 <__assert_fail@plt+0x98>
   11138:	push	{fp, lr}
   1113c:	mov	fp, sp
   11140:	mov	r4, r0
   11144:	cmp	r0, #0
   11148:	bne	111fc <__assert_fail@plt+0x1c0>
   1114c:	movw	r1, #20091	; 0x4e7b
   11150:	movt	r1, #1
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	bl	10e5c <dcgettext@plt>
   11160:	mov	r1, r0
   11164:	movw	r0, #24920	; 0x6158
   11168:	movt	r0, #2
   1116c:	ldr	r2, [r0]
   11170:	mov	r0, #1
   11174:	bl	10fa0 <__printf_chk@plt>
   11178:	movw	r1, #20114	; 0x4e92
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	bl	10e5c <dcgettext@plt>
   1118c:	movw	r5, #24900	; 0x6144
   11190:	movt	r5, #2
   11194:	ldr	r1, [r5]
   11198:	bl	10df0 <fputs_unlocked@plt>
   1119c:	movw	r1, #20242	; 0x4f12
   111a0:	movt	r1, #1
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	bl	10e5c <dcgettext@plt>
   111b0:	ldr	r1, [r5]
   111b4:	bl	10df0 <fputs_unlocked@plt>
   111b8:	movw	r1, #20359	; 0x4f87
   111bc:	movt	r1, #1
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	bl	10e5c <dcgettext@plt>
   111cc:	ldr	r1, [r5]
   111d0:	bl	10df0 <fputs_unlocked@plt>
   111d4:	movw	r1, #20404	; 0x4fb4
   111d8:	movt	r1, #1
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	bl	10e5c <dcgettext@plt>
   111e8:	ldr	r1, [r5]
   111ec:	bl	10df0 <fputs_unlocked@plt>
   111f0:	bl	11240 <__assert_fail@plt+0x204>
   111f4:	mov	r0, r4
   111f8:	bl	10f40 <exit@plt>
   111fc:	movw	r0, #24896	; 0x6140
   11200:	movt	r0, #2
   11204:	ldr	r5, [r0]
   11208:	movw	r1, #20052	; 0x4e54
   1120c:	movt	r1, #1
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	bl	10e5c <dcgettext@plt>
   1121c:	mov	r2, r0
   11220:	movw	r0, #24920	; 0x6158
   11224:	movt	r0, #2
   11228:	ldr	r3, [r0]
   1122c:	mov	r0, r5
   11230:	mov	r1, #1
   11234:	bl	10fc4 <__fprintf_chk@plt>
   11238:	mov	r0, r4
   1123c:	bl	10f40 <exit@plt>
   11240:	push	{r4, r5, r6, sl, fp, lr}
   11244:	add	fp, sp, #16
   11248:	sub	sp, sp, #56	; 0x38
   1124c:	movw	r0, #20976	; 0x51f0
   11250:	movt	r0, #1
   11254:	add	r1, r0, #32
   11258:	mov	r2, #48	; 0x30
   1125c:	vld1.64	{d16-d17}, [r1]
   11260:	mov	r6, sp
   11264:	add	r1, r6, #32
   11268:	add	r3, r0, #16
   1126c:	vld1.64	{d18-d19}, [r0], r2
   11270:	vld1.64	{d20-d21}, [r3]
   11274:	vldr	d22, [r0]
   11278:	vst1.64	{d16-d17}, [r1]
   1127c:	add	r0, r6, #16
   11280:	vst1.64	{d20-d21}, [r0]
   11284:	mov	r0, r6
   11288:	vst1.64	{d18-d19}, [r0], r2
   1128c:	vstr	d22, [r0]
   11290:	ldr	r1, [sp]
   11294:	cmp	r1, #0
   11298:	movw	r4, #20458	; 0x4fea
   1129c:	movt	r4, #1
   112a0:	beq	112c8 <__assert_fail@plt+0x28c>
   112a4:	mov	r6, sp
   112a8:	movw	r5, #20458	; 0x4fea
   112ac:	movt	r5, #1
   112b0:	mov	r0, r5
   112b4:	bl	10e08 <strcmp@plt>
   112b8:	cmp	r0, #0
   112bc:	ldrne	r1, [r6, #8]!
   112c0:	cmpne	r1, #0
   112c4:	bne	112b0 <__assert_fail@plt+0x274>
   112c8:	ldr	r5, [r6, #4]
   112cc:	movw	r1, #20652	; 0x50ac
   112d0:	movt	r1, #1
   112d4:	mov	r0, #0
   112d8:	mov	r2, #5
   112dc:	bl	10e5c <dcgettext@plt>
   112e0:	mov	r1, r0
   112e4:	movw	r2, #20488	; 0x5008
   112e8:	movt	r2, #1
   112ec:	movw	r3, #20675	; 0x50c3
   112f0:	movt	r3, #1
   112f4:	mov	r0, #1
   112f8:	bl	10fa0 <__printf_chk@plt>
   112fc:	cmp	r5, #0
   11300:	moveq	r5, r4
   11304:	mov	r0, #5
   11308:	mov	r1, #0
   1130c:	bl	10fe8 <setlocale@plt>
   11310:	cmp	r0, #0
   11314:	beq	11354 <__assert_fail@plt+0x318>
   11318:	movw	r1, #20715	; 0x50eb
   1131c:	movt	r1, #1
   11320:	mov	r2, #3
   11324:	bl	11024 <strncmp@plt>
   11328:	cmp	r0, #0
   1132c:	beq	11354 <__assert_fail@plt+0x318>
   11330:	movw	r1, #20719	; 0x50ef
   11334:	movt	r1, #1
   11338:	mov	r0, #0
   1133c:	mov	r2, #5
   11340:	bl	10e5c <dcgettext@plt>
   11344:	movw	r1, #24900	; 0x6144
   11348:	movt	r1, #2
   1134c:	ldr	r1, [r1]
   11350:	bl	10df0 <fputs_unlocked@plt>
   11354:	movw	r1, #20790	; 0x5136
   11358:	movt	r1, #1
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	bl	10e5c <dcgettext@plt>
   11368:	mov	r1, r0
   1136c:	movw	r2, #20675	; 0x50c3
   11370:	movt	r2, #1
   11374:	mov	r0, #1
   11378:	mov	r3, r4
   1137c:	bl	10fa0 <__printf_chk@plt>
   11380:	movw	r0, #20585	; 0x5069
   11384:	movt	r0, #1
   11388:	movw	r6, #20241	; 0x4f11
   1138c:	movt	r6, #1
   11390:	cmp	r5, r4
   11394:	moveq	r6, r0
   11398:	movw	r1, #20817	; 0x5151
   1139c:	movt	r1, #1
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	bl	10e5c <dcgettext@plt>
   113ac:	mov	r1, r0
   113b0:	mov	r0, #1
   113b4:	mov	r2, r5
   113b8:	mov	r3, r6
   113bc:	sub	sp, fp, #16
   113c0:	pop	{r4, r5, r6, sl, fp, lr}
   113c4:	b	10fa0 <__printf_chk@plt>
   113c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113cc:	add	fp, sp, #28
   113d0:	sub	sp, sp, #20
   113d4:	mov	r4, r1
   113d8:	mov	r5, r0
   113dc:	ldr	r0, [r1]
   113e0:	bl	118f0 <__assert_fail@plt+0x8b4>
   113e4:	movw	sl, #20241	; 0x4f11
   113e8:	movt	sl, #1
   113ec:	mov	r0, #6
   113f0:	mov	r1, sl
   113f4:	bl	10fe8 <setlocale@plt>
   113f8:	movw	r6, #20492	; 0x500c
   113fc:	movt	r6, #1
   11400:	movw	r1, #20464	; 0x4ff0
   11404:	movt	r1, #1
   11408:	mov	r0, r6
   1140c:	bl	11018 <bindtextdomain@plt>
   11410:	mov	r0, r6
   11414:	bl	10e80 <textdomain@plt>
   11418:	movw	r0, #5584	; 0x15d0
   1141c:	movt	r0, #1
   11420:	bl	14e2c <__assert_fail@plt+0x3df0>
   11424:	mov	r7, #2
   11428:	movw	r8, #20896	; 0x51a0
   1142c:	movt	r8, #1
   11430:	mov	r6, #0
   11434:	mov	r9, r7
   11438:	mov	r7, #0
   1143c:	str	r7, [sp]
   11440:	mov	r0, r5
   11444:	mov	r1, r4
   11448:	mov	r2, sl
   1144c:	mov	r3, r8
   11450:	bl	10f28 <getopt_long@plt>
   11454:	cmp	r0, #255	; 0xff
   11458:	ble	114c4 <__assert_fail@plt+0x488>
   1145c:	cmp	r0, #256	; 0x100
   11460:	beq	11434 <__assert_fail@plt+0x3f8>
   11464:	movw	r1, #257	; 0x101
   11468:	cmp	r0, r1
   1146c:	bne	115a8 <__assert_fail@plt+0x56c>
   11470:	movw	r0, #24904	; 0x6148
   11474:	movt	r0, #2
   11478:	ldr	r6, [r0]
   1147c:	mov	r0, #0
   11480:	movw	r1, #20520	; 0x5028
   11484:	movt	r1, #1
   11488:	mov	r2, #5
   1148c:	bl	10e5c <dcgettext@plt>
   11490:	mvn	r1, #0
   11494:	str	r1, [sp]
   11498:	mov	r1, #0
   1149c:	stmib	sp, {r1, sl}
   114a0:	str	r0, [sp, #12]
   114a4:	str	r1, [sp, #16]
   114a8:	mov	r0, r6
   114ac:	mov	r2, #0
   114b0:	mov	r3, #0
   114b4:	bl	13e80 <__assert_fail@plt+0x2e44>
   114b8:	mov	r6, r0
   114bc:	mov	r7, r9
   114c0:	b	11434 <__assert_fail@plt+0x3f8>
   114c4:	cmn	r0, #1
   114c8:	bne	11510 <__assert_fail@plt+0x4d4>
   114cc:	movw	r7, #24888	; 0x6138
   114d0:	movt	r7, #2
   114d4:	ldr	r0, [r7]
   114d8:	cmp	r0, r5
   114dc:	bne	11570 <__assert_fail@plt+0x534>
   114e0:	mov	r0, r9
   114e4:	bl	116b8 <__assert_fail@plt+0x67c>
   114e8:	subs	r2, r0, r6
   114ec:	mov	r0, #1
   114f0:	movls	r2, r0
   114f4:	movw	r1, #20552	; 0x5048
   114f8:	movt	r1, #1
   114fc:	mov	r0, #1
   11500:	bl	10fa0 <__printf_chk@plt>
   11504:	mov	r0, #0
   11508:	sub	sp, fp, #28
   1150c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11510:	cmn	r0, #3
   11514:	bne	11560 <__assert_fail@plt+0x524>
   11518:	movw	r0, #24808	; 0x60e8
   1151c:	movt	r0, #2
   11520:	ldr	r3, [r0]
   11524:	movw	r0, #24900	; 0x6144
   11528:	movt	r0, #2
   1152c:	ldr	r0, [r0]
   11530:	mov	r1, #0
   11534:	movw	r2, #20502	; 0x5016
   11538:	movt	r2, #1
   1153c:	str	r2, [sp]
   11540:	str	r1, [sp, #4]
   11544:	movw	r1, #20458	; 0x4fea
   11548:	movt	r1, #1
   1154c:	movw	r2, #20488	; 0x5008
   11550:	movt	r2, #1
   11554:	bl	138bc <__assert_fail@plt+0x2880>
   11558:	mov	r0, #0
   1155c:	bl	10f40 <exit@plt>
   11560:	cmn	r0, #2
   11564:	bne	115a8 <__assert_fail@plt+0x56c>
   11568:	mov	r0, #0
   1156c:	bl	11138 <__assert_fail@plt+0xfc>
   11570:	movw	r1, #20535	; 0x5037
   11574:	movt	r1, #1
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	bl	10e5c <dcgettext@plt>
   11584:	mov	r5, r0
   11588:	ldr	r0, [r7]
   1158c:	ldr	r0, [r4, r0, lsl #2]
   11590:	bl	130e4 <__assert_fail@plt+0x20a8>
   11594:	mov	r3, r0
   11598:	mov	r0, #0
   1159c:	mov	r1, #0
   115a0:	mov	r2, r5
   115a4:	bl	10ee0 <error@plt>
   115a8:	mov	r0, #1
   115ac:	bl	11138 <__assert_fail@plt+0xfc>
   115b0:	movw	r1, #24912	; 0x6150
   115b4:	movt	r1, #2
   115b8:	str	r0, [r1]
   115bc:	bx	lr
   115c0:	movw	r1, #24916	; 0x6154
   115c4:	movt	r1, #2
   115c8:	strb	r0, [r1]
   115cc:	bx	lr
   115d0:	push	{r4, r5, r6, sl, fp, lr}
   115d4:	add	fp, sp, #16
   115d8:	sub	sp, sp, #8
   115dc:	movw	r0, #24900	; 0x6144
   115e0:	movt	r0, #2
   115e4:	ldr	r0, [r0]
   115e8:	bl	147c0 <__assert_fail@plt+0x3784>
   115ec:	cmp	r0, #0
   115f0:	beq	11618 <__assert_fail@plt+0x5dc>
   115f4:	movw	r0, #24916	; 0x6154
   115f8:	movt	r0, #2
   115fc:	ldrb	r0, [r0]
   11600:	cmp	r0, #0
   11604:	beq	11638 <__assert_fail@plt+0x5fc>
   11608:	bl	10f7c <__errno_location@plt>
   1160c:	ldr	r0, [r0]
   11610:	cmp	r0, #32
   11614:	bne	11638 <__assert_fail@plt+0x5fc>
   11618:	movw	r0, #24896	; 0x6140
   1161c:	movt	r0, #2
   11620:	ldr	r0, [r0]
   11624:	bl	147c0 <__assert_fail@plt+0x3784>
   11628:	cmp	r0, #0
   1162c:	subeq	sp, fp, #16
   11630:	popeq	{r4, r5, r6, sl, fp, pc}
   11634:	b	116a8 <__assert_fail@plt+0x66c>
   11638:	movw	r1, #21047	; 0x5237
   1163c:	movt	r1, #1
   11640:	mov	r0, #0
   11644:	mov	r2, #5
   11648:	bl	10e5c <dcgettext@plt>
   1164c:	mov	r4, r0
   11650:	movw	r0, #24912	; 0x6150
   11654:	movt	r0, #2
   11658:	ldr	r6, [r0]
   1165c:	bl	10f7c <__errno_location@plt>
   11660:	ldr	r5, [r0]
   11664:	cmp	r6, #0
   11668:	bne	11684 <__assert_fail@plt+0x648>
   1166c:	movw	r2, #21063	; 0x5247
   11670:	movt	r2, #1
   11674:	mov	r0, #0
   11678:	mov	r1, r5
   1167c:	mov	r3, r4
   11680:	b	116a4 <__assert_fail@plt+0x668>
   11684:	mov	r0, r6
   11688:	bl	12f94 <__assert_fail@plt+0x1f58>
   1168c:	mov	r3, r0
   11690:	str	r4, [sp]
   11694:	movw	r2, #21059	; 0x5243
   11698:	movt	r2, #1
   1169c:	mov	r0, #0
   116a0:	mov	r1, r5
   116a4:	bl	10ee0 <error@plt>
   116a8:	movw	r0, #24812	; 0x60ec
   116ac:	movt	r0, #2
   116b0:	ldr	r0, [r0]
   116b4:	bl	10e2c <_exit@plt>
   116b8:	push	{r4, r5, fp, lr}
   116bc:	add	fp, sp, #8
   116c0:	mvn	r4, #0
   116c4:	cmp	r0, #2
   116c8:	bne	11720 <__assert_fail@plt+0x6e4>
   116cc:	movw	r0, #21066	; 0x524a
   116d0:	movt	r0, #1
   116d4:	bl	10eec <getenv@plt>
   116d8:	bl	11734 <__assert_fail@plt+0x6f8>
   116dc:	mov	r5, r0
   116e0:	movw	r0, #21082	; 0x525a
   116e4:	movt	r0, #1
   116e8:	bl	10eec <getenv@plt>
   116ec:	bl	11734 <__assert_fail@plt+0x6f8>
   116f0:	mov	r1, r0
   116f4:	cmp	r0, #0
   116f8:	mvneq	r1, #0
   116fc:	cmp	r5, r1
   11700:	mov	r4, r1
   11704:	movcc	r4, r5
   11708:	cmp	r5, #0
   1170c:	beq	11718 <__assert_fail@plt+0x6dc>
   11710:	mov	r0, r4
   11714:	pop	{r4, r5, fp, pc}
   11718:	mov	r0, #1
   1171c:	mov	r4, r1
   11720:	bl	11824 <__assert_fail@plt+0x7e8>
   11724:	cmp	r0, r4
   11728:	movcc	r4, r0
   1172c:	mov	r0, r4
   11730:	pop	{r4, r5, fp, pc}
   11734:	push	{r4, r5, r6, sl, fp, lr}
   11738:	add	fp, sp, #16
   1173c:	sub	sp, sp, #8
   11740:	mov	r4, #0
   11744:	cmp	r0, #0
   11748:	beq	11810 <__assert_fail@plt+0x7d4>
   1174c:	mov	r5, r0
   11750:	ldrb	r0, [r0]
   11754:	cmp	r0, #0
   11758:	beq	11778 <__assert_fail@plt+0x73c>
   1175c:	uxtb	r0, r0
   11760:	bl	14728 <__assert_fail@plt+0x36ec>
   11764:	cmp	r0, #0
   11768:	beq	11778 <__assert_fail@plt+0x73c>
   1176c:	ldrb	r0, [r5, #1]!
   11770:	cmp	r0, #0
   11774:	bne	1175c <__assert_fail@plt+0x720>
   11778:	ldrb	r0, [r5]
   1177c:	bl	1453c <__assert_fail@plt+0x3500>
   11780:	cmp	r0, #0
   11784:	beq	11810 <__assert_fail@plt+0x7d4>
   11788:	mov	r0, #0
   1178c:	str	r0, [sp, #4]
   11790:	add	r1, sp, #4
   11794:	mov	r0, r5
   11798:	mov	r2, #10
   1179c:	bl	10f58 <strtoul@plt>
   117a0:	mov	r4, r0
   117a4:	ldr	r0, [sp, #4]
   117a8:	cmp	r0, #0
   117ac:	beq	1180c <__assert_fail@plt+0x7d0>
   117b0:	ldr	r5, [sp, #4]
   117b4:	ldrb	r0, [r5]
   117b8:	cmp	r0, #0
   117bc:	beq	11810 <__assert_fail@plt+0x7d4>
   117c0:	ldr	r6, [sp, #4]
   117c4:	bl	14728 <__assert_fail@plt+0x36ec>
   117c8:	cmp	r0, #0
   117cc:	beq	117f8 <__assert_fail@plt+0x7bc>
   117d0:	add	r5, r5, #1
   117d4:	ldrb	r0, [r5]
   117d8:	cmp	r0, #0
   117dc:	beq	1181c <__assert_fail@plt+0x7e0>
   117e0:	bl	14728 <__assert_fail@plt+0x36ec>
   117e4:	add	r5, r5, #1
   117e8:	cmp	r0, #0
   117ec:	bne	117d4 <__assert_fail@plt+0x798>
   117f0:	sub	r6, r5, #1
   117f4:	mov	r5, r6
   117f8:	str	r6, [sp, #4]
   117fc:	ldrb	r0, [r5]
   11800:	cmp	r0, #0
   11804:	cmpne	r0, #44	; 0x2c
   11808:	beq	11810 <__assert_fail@plt+0x7d4>
   1180c:	mov	r4, #0
   11810:	mov	r0, r4
   11814:	sub	sp, fp, #16
   11818:	pop	{r4, r5, r6, sl, fp, pc}
   1181c:	str	r5, [sp, #4]
   11820:	b	11810 <__assert_fail@plt+0x7d4>
   11824:	push	{r4, sl, fp, lr}
   11828:	add	fp, sp, #8
   1182c:	cmp	r0, #1
   11830:	bne	11860 <__assert_fail@plt+0x824>
   11834:	bl	118ac <__assert_fail@plt+0x870>
   11838:	mov	r4, r0
   1183c:	cmp	r0, #0
   11840:	bne	11898 <__assert_fail@plt+0x85c>
   11844:	mov	r0, #84	; 0x54
   11848:	bl	10e68 <sysconf@plt>
   1184c:	mov	r4, r0
   11850:	cmp	r0, #0
   11854:	movle	r4, #1
   11858:	mov	r0, r4
   1185c:	pop	{r4, sl, fp, pc}
   11860:	mov	r0, #83	; 0x53
   11864:	bl	10e68 <sysconf@plt>
   11868:	mov	r4, r0
   1186c:	sub	r0, r0, #1
   11870:	cmp	r0, #1
   11874:	bhi	11888 <__assert_fail@plt+0x84c>
   11878:	bl	118ac <__assert_fail@plt+0x870>
   1187c:	cmp	r0, r4
   11880:	bhi	1188c <__assert_fail@plt+0x850>
   11884:	b	11898 <__assert_fail@plt+0x85c>
   11888:	mov	r0, r4
   1188c:	cmp	r0, #0
   11890:	mov	r4, r0
   11894:	ble	118a0 <__assert_fail@plt+0x864>
   11898:	mov	r0, r4
   1189c:	pop	{r4, sl, fp, pc}
   118a0:	mov	r4, #1
   118a4:	mov	r0, r4
   118a8:	pop	{r4, sl, fp, pc}
   118ac:	push	{r4, sl, fp, lr}
   118b0:	add	fp, sp, #8
   118b4:	sub	sp, sp, #128	; 0x80
   118b8:	mov	r4, #0
   118bc:	mov	r2, sp
   118c0:	mov	r0, #0
   118c4:	mov	r1, #128	; 0x80
   118c8:	bl	1100c <sched_getaffinity@plt>
   118cc:	cmp	r0, #0
   118d0:	bne	118e4 <__assert_fail@plt+0x8a8>
   118d4:	mov	r1, sp
   118d8:	mov	r0, #128	; 0x80
   118dc:	bl	10e50 <__sched_cpucount@plt>
   118e0:	mov	r4, r0
   118e4:	mov	r0, r4
   118e8:	sub	sp, fp, #8
   118ec:	pop	{r4, sl, fp, pc}
   118f0:	push	{r4, r5, fp, lr}
   118f4:	add	fp, sp, #8
   118f8:	cmp	r0, #0
   118fc:	beq	11990 <__assert_fail@plt+0x954>
   11900:	mov	r4, r0
   11904:	mov	r1, #47	; 0x2f
   11908:	bl	10ff4 <strrchr@plt>
   1190c:	cmp	r0, #0
   11910:	mov	r5, r4
   11914:	addne	r5, r0, #1
   11918:	sub	r0, r5, r4
   1191c:	cmp	r0, #7
   11920:	blt	11974 <__assert_fail@plt+0x938>
   11924:	sub	r0, r5, #7
   11928:	movw	r1, #21155	; 0x52a3
   1192c:	movt	r1, #1
   11930:	mov	r2, #7
   11934:	bl	11024 <strncmp@plt>
   11938:	cmp	r0, #0
   1193c:	bne	11974 <__assert_fail@plt+0x938>
   11940:	movw	r1, #21163	; 0x52ab
   11944:	movt	r1, #1
   11948:	mov	r0, r5
   1194c:	mov	r2, #3
   11950:	bl	11024 <strncmp@plt>
   11954:	cmp	r0, #0
   11958:	beq	11964 <__assert_fail@plt+0x928>
   1195c:	mov	r4, r5
   11960:	b	11974 <__assert_fail@plt+0x938>
   11964:	add	r4, r5, #3
   11968:	movw	r0, #24880	; 0x6130
   1196c:	movt	r0, #2
   11970:	str	r4, [r0]
   11974:	movw	r0, #24884	; 0x6134
   11978:	movt	r0, #2
   1197c:	str	r4, [r0]
   11980:	movw	r0, #24920	; 0x6158
   11984:	movt	r0, #2
   11988:	str	r4, [r0]
   1198c:	pop	{r4, r5, fp, pc}
   11990:	movw	r0, #24896	; 0x6140
   11994:	movt	r0, #2
   11998:	ldr	r3, [r0]
   1199c:	movw	r0, #21099	; 0x526b
   119a0:	movt	r0, #1
   119a4:	mov	r1, #55	; 0x37
   119a8:	mov	r2, #1
   119ac:	bl	10e98 <fwrite@plt>
   119b0:	bl	11030 <abort@plt>
   119b4:	push	{r4, r5, r6, sl, fp, lr}
   119b8:	add	fp, sp, #16
   119bc:	mov	r4, r0
   119c0:	movw	r0, #24928	; 0x6160
   119c4:	movt	r0, #2
   119c8:	cmp	r4, #0
   119cc:	moveq	r4, r0
   119d0:	bl	10f7c <__errno_location@plt>
   119d4:	mov	r5, r0
   119d8:	ldr	r6, [r0]
   119dc:	mov	r0, r4
   119e0:	mov	r1, #48	; 0x30
   119e4:	bl	13cac <__assert_fail@plt+0x2c70>
   119e8:	str	r6, [r5]
   119ec:	pop	{r4, r5, r6, sl, fp, pc}
   119f0:	movw	r1, #24928	; 0x6160
   119f4:	movt	r1, #2
   119f8:	cmp	r0, #0
   119fc:	movne	r1, r0
   11a00:	ldr	r0, [r1]
   11a04:	bx	lr
   11a08:	movw	r2, #24928	; 0x6160
   11a0c:	movt	r2, #2
   11a10:	cmp	r0, #0
   11a14:	movne	r2, r0
   11a18:	str	r1, [r2]
   11a1c:	bx	lr
   11a20:	movw	r3, #24928	; 0x6160
   11a24:	movt	r3, #2
   11a28:	cmp	r0, #0
   11a2c:	movne	r3, r0
   11a30:	ubfx	r0, r1, #5, #3
   11a34:	add	ip, r3, r0, lsl #2
   11a38:	ldr	r3, [ip, #8]
   11a3c:	and	r1, r1, #31
   11a40:	mov	r0, #1
   11a44:	and	r0, r0, r3, lsr r1
   11a48:	and	r2, r2, #1
   11a4c:	eor	r2, r0, r2
   11a50:	eor	r1, r3, r2, lsl r1
   11a54:	str	r1, [ip, #8]
   11a58:	bx	lr
   11a5c:	movw	r2, #24928	; 0x6160
   11a60:	movt	r2, #2
   11a64:	cmp	r0, #0
   11a68:	movne	r2, r0
   11a6c:	ldr	r0, [r2, #4]
   11a70:	str	r1, [r2, #4]
   11a74:	bx	lr
   11a78:	push	{fp, lr}
   11a7c:	mov	fp, sp
   11a80:	movw	r3, #24928	; 0x6160
   11a84:	movt	r3, #2
   11a88:	cmp	r0, #0
   11a8c:	movne	r3, r0
   11a90:	mov	r0, #10
   11a94:	str	r0, [r3]
   11a98:	cmp	r1, #0
   11a9c:	cmpne	r2, #0
   11aa0:	bne	11aa8 <__assert_fail@plt+0xa6c>
   11aa4:	bl	11030 <abort@plt>
   11aa8:	str	r1, [r3, #40]	; 0x28
   11aac:	str	r2, [r3, #44]	; 0x2c
   11ab0:	pop	{fp, pc}
   11ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ab8:	add	fp, sp, #28
   11abc:	sub	sp, sp, #20
   11ac0:	mov	r8, r3
   11ac4:	mov	r9, r2
   11ac8:	mov	sl, r1
   11acc:	mov	r7, r0
   11ad0:	ldr	r0, [fp, #8]
   11ad4:	movw	r5, #24928	; 0x6160
   11ad8:	movt	r5, #2
   11adc:	cmp	r0, #0
   11ae0:	movne	r5, r0
   11ae4:	bl	10f7c <__errno_location@plt>
   11ae8:	mov	r4, r0
   11aec:	ldm	r5, {r0, r1}
   11af0:	ldr	r2, [r5, #40]	; 0x28
   11af4:	ldr	r3, [r5, #44]	; 0x2c
   11af8:	ldr	r6, [r4]
   11afc:	add	r5, r5, #8
   11b00:	stm	sp, {r0, r1, r5}
   11b04:	str	r2, [sp, #12]
   11b08:	str	r3, [sp, #16]
   11b0c:	mov	r0, r7
   11b10:	mov	r1, sl
   11b14:	mov	r2, r9
   11b18:	mov	r3, r8
   11b1c:	bl	11b2c <__assert_fail@plt+0xaf0>
   11b20:	str	r6, [r4]
   11b24:	sub	sp, fp, #28
   11b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b30:	add	fp, sp, #28
   11b34:	sub	sp, sp, #156	; 0x9c
   11b38:	mov	r9, r3
   11b3c:	mov	r7, r1
   11b40:	mov	r6, r0
   11b44:	str	r2, [fp, #-80]	; 0xffffffb0
   11b48:	add	r0, r2, #1
   11b4c:	str	r0, [sp, #76]	; 0x4c
   11b50:	ldr	r0, [fp, #12]
   11b54:	and	r1, r0, #1
   11b58:	str	r1, [sp, #40]	; 0x28
   11b5c:	and	r1, r0, #4
   11b60:	str	r1, [sp, #36]	; 0x24
   11b64:	ubfx	r4, r0, #1, #1
   11b68:	bl	10eb0 <__ctype_get_mb_cur_max@plt>
   11b6c:	str	r0, [sp, #44]	; 0x2c
   11b70:	ldr	r0, [fp, #24]
   11b74:	str	r0, [sp, #88]	; 0x58
   11b78:	ldr	r0, [fp, #20]
   11b7c:	str	r0, [sp, #80]	; 0x50
   11b80:	ldr	r1, [fp, #8]
   11b84:	mov	r0, #0
   11b88:	str	r0, [sp, #84]	; 0x54
   11b8c:	mov	r0, #0
   11b90:	str	r0, [fp, #-84]	; 0xffffffac
   11b94:	mov	r0, #0
   11b98:	str	r0, [fp, #-72]	; 0xffffffb8
   11b9c:	mov	r0, #0
   11ba0:	mov	r2, #0
   11ba4:	str	r2, [fp, #-56]	; 0xffffffc8
   11ba8:	mov	r2, #0
   11bac:	str	r2, [sp, #64]	; 0x40
   11bb0:	mov	r2, #1
   11bb4:	str	r2, [fp, #-48]	; 0xffffffd0
   11bb8:	cmp	r1, #10
   11bbc:	bhi	12ae8 <__assert_fail@plt+0x1aac>
   11bc0:	mov	sl, r7
   11bc4:	mov	r7, r1
   11bc8:	add	r1, pc, #24
   11bcc:	mov	r8, #0
   11bd0:	mov	r2, #1
   11bd4:	mov	r3, #0
   11bd8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11bdc:	mov	lr, r9
   11be0:	mov	r5, r6
   11be4:	ldr	pc, [r1, r7, lsl #2]
   11be8:			; <UNDEFINED> instruction: 0x00011cbc
   11bec:	strdeq	r1, [r1], -ip
   11bf0:	andeq	r1, r1, ip, asr #25
   11bf4:			; <UNDEFINED> instruction: 0x00011cb4
   11bf8:	strdeq	r1, [r1], -r0
   11bfc:	andeq	r1, r1, r0, asr sp
   11c00:	ldrdeq	r1, [r1], -ip
   11c04:	andeq	r1, r1, ip, lsr #27
   11c08:	andeq	r1, r1, r4, lsl ip
   11c0c:	andeq	r1, r1, r4, lsl ip
   11c10:	andeq	r1, r1, r0, asr #24
   11c14:	movw	r0, #21245	; 0x52fd
   11c18:	movt	r0, #1
   11c1c:	mov	r1, r7
   11c20:	bl	130f0 <__assert_fail@plt+0x20b4>
   11c24:	str	r0, [sp, #80]	; 0x50
   11c28:	movw	r0, #21247	; 0x52ff
   11c2c:	movt	r0, #1
   11c30:	mov	r1, r7
   11c34:	bl	130f0 <__assert_fail@plt+0x20b4>
   11c38:	mov	r5, r6
   11c3c:	str	r0, [sp, #88]	; 0x58
   11c40:	mov	r8, #0
   11c44:	tst	r4, #1
   11c48:	str	r7, [fp, #-64]	; 0xffffffc0
   11c4c:	bne	11c84 <__assert_fail@plt+0xc48>
   11c50:	ldr	r0, [sp, #80]	; 0x50
   11c54:	ldrb	r0, [r0]
   11c58:	cmp	r0, #0
   11c5c:	beq	11c84 <__assert_fail@plt+0xc48>
   11c60:	ldr	r1, [sp, #80]	; 0x50
   11c64:	add	r1, r1, #1
   11c68:	mov	r8, #0
   11c6c:	cmp	r8, sl
   11c70:	strbcc	r0, [r5, r8]
   11c74:	ldrb	r0, [r1, r8]
   11c78:	add	r8, r8, #1
   11c7c:	cmp	r0, #0
   11c80:	bne	11c6c <__assert_fail@plt+0xc30>
   11c84:	ldr	r7, [sp, #88]	; 0x58
   11c88:	mov	r0, r7
   11c8c:	bl	10f64 <strlen@plt>
   11c90:	mov	r5, r6
   11c94:	str	r0, [fp, #-72]	; 0xffffffb8
   11c98:	str	r7, [fp, #-84]	; 0xffffffac
   11c9c:	mov	r2, #1
   11ca0:	mov	r3, r4
   11ca4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11ca8:	mov	lr, r9
   11cac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   11cb0:	b	11dac <__assert_fail@plt+0xd70>
   11cb4:	mov	r0, #1
   11cb8:	b	11cfc <__assert_fail@plt+0xcc0>
   11cbc:	mov	r7, #0
   11cc0:	mov	r8, #0
   11cc4:	mov	r2, r0
   11cc8:	b	11da8 <__assert_fail@plt+0xd6c>
   11ccc:	tst	r4, #1
   11cd0:	bne	11cfc <__assert_fail@plt+0xcc0>
   11cd4:	mov	r2, r0
   11cd8:	b	11d24 <__assert_fail@plt+0xce8>
   11cdc:	mov	r0, #1
   11ce0:	str	r0, [fp, #-72]	; 0xffffffb8
   11ce4:	mov	r8, #0
   11ce8:	mov	r7, #5
   11cec:	b	11d68 <__assert_fail@plt+0xd2c>
   11cf0:	mov	r2, #1
   11cf4:	tst	r4, #1
   11cf8:	beq	11d24 <__assert_fail@plt+0xce8>
   11cfc:	mov	r1, #1
   11d00:	str	r1, [fp, #-72]	; 0xffffffb8
   11d04:	mov	r8, #0
   11d08:	mov	r7, #2
   11d0c:	movw	r1, #21247	; 0x52ff
   11d10:	movt	r1, #1
   11d14:	str	r1, [fp, #-84]	; 0xffffffac
   11d18:	mov	r2, r0
   11d1c:	mov	r3, #1
   11d20:	b	11dac <__assert_fail@plt+0xd70>
   11d24:	mov	r8, #1
   11d28:	mov	r7, #2
   11d2c:	cmp	sl, #0
   11d30:	movne	r0, #39	; 0x27
   11d34:	strbne	r0, [r5]
   11d38:	movw	r0, #21247	; 0x52ff
   11d3c:	movt	r0, #1
   11d40:	str	r0, [fp, #-84]	; 0xffffffac
   11d44:	mov	r0, #1
   11d48:	str	r0, [fp, #-72]	; 0xffffffb8
   11d4c:	b	11da8 <__assert_fail@plt+0xd6c>
   11d50:	mov	r7, #5
   11d54:	tst	r4, #1
   11d58:	beq	11d80 <__assert_fail@plt+0xd44>
   11d5c:	mov	r0, #1
   11d60:	str	r0, [fp, #-72]	; 0xffffffb8
   11d64:	mov	r8, #0
   11d68:	movw	r0, #21243	; 0x52fb
   11d6c:	movt	r0, #1
   11d70:	str	r0, [fp, #-84]	; 0xffffffac
   11d74:	mov	r2, #1
   11d78:	mov	r3, #1
   11d7c:	b	11dac <__assert_fail@plt+0xd70>
   11d80:	cmp	sl, #0
   11d84:	movne	r0, #34	; 0x22
   11d88:	strbne	r0, [r5]
   11d8c:	mov	r8, #1
   11d90:	movw	r0, #21243	; 0x52fb
   11d94:	movt	r0, #1
   11d98:	str	r0, [fp, #-84]	; 0xffffffac
   11d9c:	mov	r0, #1
   11da0:	str	r0, [fp, #-72]	; 0xffffffb8
   11da4:	mov	r2, #1
   11da8:	mov	r3, #0
   11dac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11db0:	cmp	r0, #0
   11db4:	movwne	r0, #1
   11db8:	and	r1, r0, r3
   11dbc:	and	r1, r2, r1
   11dc0:	str	r1, [sp, #56]	; 0x38
   11dc4:	sub	r1, r7, #2
   11dc8:	clz	r1, r1
   11dcc:	lsr	r1, r1, #5
   11dd0:	and	r1, r1, r3
   11dd4:	str	r1, [sp, #68]	; 0x44
   11dd8:	str	r7, [fp, #-64]	; 0xffffffc0
   11ddc:	subs	r1, r7, #2
   11de0:	movwne	r1, #1
   11de4:	eor	r4, r3, #1
   11de8:	str	r4, [fp, #-88]	; 0xffffffa8
   11dec:	orr	r4, r1, r4
   11df0:	str	r4, [sp, #72]	; 0x48
   11df4:	and	r1, r1, r2
   11df8:	and	r0, r0, r1
   11dfc:	str	r0, [fp, #-60]	; 0xffffffc4
   11e00:	str	r3, [fp, #-76]	; 0xffffffb4
   11e04:	orr	r0, r1, r3
   11e08:	eor	r0, r0, #1
   11e0c:	ldr	r1, [fp, #16]
   11e10:	clz	r1, r1
   11e14:	lsr	r1, r1, #5
   11e18:	orr	r0, r1, r0
   11e1c:	str	r0, [fp, #-68]	; 0xffffffbc
   11e20:	str	r2, [sp, #92]	; 0x5c
   11e24:	eor	r0, r2, #1
   11e28:	str	r0, [sp, #60]	; 0x3c
   11e2c:	mov	r7, #0
   11e30:	cmn	lr, #1
   11e34:	beq	11e44 <__assert_fail@plt+0xe08>
   11e38:	cmp	r7, lr
   11e3c:	bne	11e50 <__assert_fail@plt+0xe14>
   11e40:	b	1295c <__assert_fail@plt+0x1920>
   11e44:	ldrb	r0, [ip, r7]
   11e48:	cmp	r0, #0
   11e4c:	beq	1295c <__assert_fail@plt+0x1920>
   11e50:	mov	r9, #0
   11e54:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11e58:	cmp	r0, #0
   11e5c:	beq	11e90 <__assert_fail@plt+0xe54>
   11e60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11e64:	add	r4, r7, r0
   11e68:	cmp	r0, #2
   11e6c:	bcc	11e88 <__assert_fail@plt+0xe4c>
   11e70:	cmn	lr, #1
   11e74:	bne	11e88 <__assert_fail@plt+0xe4c>
   11e78:	mov	r0, ip
   11e7c:	bl	10f64 <strlen@plt>
   11e80:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11e84:	mov	lr, r0
   11e88:	cmp	r4, lr
   11e8c:	bls	11e9c <__assert_fail@plt+0xe60>
   11e90:	mov	r0, #0
   11e94:	str	r0, [fp, #-52]	; 0xffffffcc
   11e98:	b	11ee0 <__assert_fail@plt+0xea4>
   11e9c:	mov	r4, lr
   11ea0:	add	r0, ip, r7
   11ea4:	ldr	r1, [fp, #-84]	; 0xffffffac
   11ea8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11eac:	bl	10f4c <bcmp@plt>
   11eb0:	cmp	r0, #0
   11eb4:	mov	r1, r0
   11eb8:	movwne	r1, #1
   11ebc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   11ec0:	orr	r1, r1, r2
   11ec4:	tst	r1, #1
   11ec8:	beq	12a30 <__assert_fail@plt+0x19f4>
   11ecc:	clz	r0, r0
   11ed0:	lsr	r0, r0, #5
   11ed4:	str	r0, [fp, #-52]	; 0xffffffcc
   11ed8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11edc:	mov	lr, r4
   11ee0:	ldrb	r4, [ip, r7]
   11ee4:	cmp	r4, #126	; 0x7e
   11ee8:	bhi	12418 <__assert_fail@plt+0x13dc>
   11eec:	mov	r6, #1
   11ef0:	mov	r2, #110	; 0x6e
   11ef4:	mov	r0, #97	; 0x61
   11ef8:	add	r3, pc, #4
   11efc:	mov	r1, #0
   11f00:	ldr	pc, [r3, r4, lsl #2]
   11f04:	andeq	r2, r1, r8, ror r2
   11f08:	andeq	r2, r1, r8, lsl r4
   11f0c:	andeq	r2, r1, r8, lsl r4
   11f10:	andeq	r2, r1, r8, lsl r4
   11f14:	andeq	r2, r1, r8, lsl r4
   11f18:	andeq	r2, r1, r8, lsl r4
   11f1c:	andeq	r2, r1, r8, lsl r4
   11f20:	andeq	r2, r1, ip, ror #9
   11f24:	andeq	r2, r1, r8, asr r2
   11f28:	andeq	r2, r1, r0, asr r2
   11f2c:	andeq	r2, r1, r4, ror #4
   11f30:	andeq	r2, r1, r0, lsl #7
   11f34:	andeq	r2, r1, r8, asr #4
   11f38:	andeq	r2, r1, r0, ror #4
   11f3c:	andeq	r2, r1, r8, lsl r4
   11f40:	andeq	r2, r1, r8, lsl r4
   11f44:	andeq	r2, r1, r8, lsl r4
   11f48:	andeq	r2, r1, r8, lsl r4
   11f4c:	andeq	r2, r1, r8, lsl r4
   11f50:	andeq	r2, r1, r8, lsl r4
   11f54:	andeq	r2, r1, r8, lsl r4
   11f58:	andeq	r2, r1, r8, lsl r4
   11f5c:	andeq	r2, r1, r8, lsl r4
   11f60:	andeq	r2, r1, r8, lsl r4
   11f64:	andeq	r2, r1, r8, lsl r4
   11f68:	andeq	r2, r1, r8, lsl r4
   11f6c:	andeq	r2, r1, r8, lsl r4
   11f70:	andeq	r2, r1, r8, lsl r4
   11f74:	andeq	r2, r1, r8, lsl r4
   11f78:	andeq	r2, r1, r8, lsl r4
   11f7c:	andeq	r2, r1, r8, lsl r4
   11f80:	andeq	r2, r1, r8, lsl r4
   11f84:	strdeq	r2, [r1], -ip
   11f88:	andeq	r2, r1, r0, lsl #4
   11f8c:	andeq	r2, r1, r0, lsl #4
   11f90:	andeq	r2, r1, r8, ror #3
   11f94:	andeq	r2, r1, r0, lsl #4
   11f98:	andeq	r2, r1, r0, lsl #2
   11f9c:	andeq	r2, r1, r0, lsl #4
   11fa0:	andeq	r2, r1, r8, lsl #7
   11fa4:	andeq	r2, r1, r0, lsl #4
   11fa8:	andeq	r2, r1, r0, lsl #4
   11fac:	andeq	r2, r1, r0, lsl #4
   11fb0:	andeq	r2, r1, r0, lsl #2
   11fb4:	andeq	r2, r1, r0, lsl #2
   11fb8:	andeq	r2, r1, r0, lsl #2
   11fbc:	andeq	r2, r1, r0, lsl #2
   11fc0:	andeq	r2, r1, r0, lsl #2
   11fc4:	andeq	r2, r1, r0, lsl #2
   11fc8:	andeq	r2, r1, r0, lsl #2
   11fcc:	andeq	r2, r1, r0, lsl #2
   11fd0:	andeq	r2, r1, r0, lsl #2
   11fd4:	andeq	r2, r1, r0, lsl #2
   11fd8:	andeq	r2, r1, r0, lsl #2
   11fdc:	andeq	r2, r1, r0, lsl #2
   11fe0:	andeq	r2, r1, r0, lsl #2
   11fe4:	andeq	r2, r1, r0, lsl #2
   11fe8:	andeq	r2, r1, r0, lsl #2
   11fec:	andeq	r2, r1, r0, lsl #2
   11ff0:	andeq	r2, r1, r0, lsl #4
   11ff4:	andeq	r2, r1, r0, lsl #4
   11ff8:	andeq	r2, r1, r0, lsl #4
   11ffc:	andeq	r2, r1, r0, lsl #4
   12000:	andeq	r2, r1, r0, asr r3
   12004:	andeq	r2, r1, r8, lsl r4
   12008:	andeq	r2, r1, r0, lsl #2
   1200c:	andeq	r2, r1, r0, lsl #2
   12010:	andeq	r2, r1, r0, lsl #2
   12014:	andeq	r2, r1, r0, lsl #2
   12018:	andeq	r2, r1, r0, lsl #2
   1201c:	andeq	r2, r1, r0, lsl #2
   12020:	andeq	r2, r1, r0, lsl #2
   12024:	andeq	r2, r1, r0, lsl #2
   12028:	andeq	r2, r1, r0, lsl #2
   1202c:	andeq	r2, r1, r0, lsl #2
   12030:	andeq	r2, r1, r0, lsl #2
   12034:	andeq	r2, r1, r0, lsl #2
   12038:	andeq	r2, r1, r0, lsl #2
   1203c:	andeq	r2, r1, r0, lsl #2
   12040:	andeq	r2, r1, r0, lsl #2
   12044:	andeq	r2, r1, r0, lsl #2
   12048:	andeq	r2, r1, r0, lsl #2
   1204c:	andeq	r2, r1, r0, lsl #2
   12050:	andeq	r2, r1, r0, lsl #2
   12054:	andeq	r2, r1, r0, lsl #2
   12058:	andeq	r2, r1, r0, lsl #2
   1205c:	andeq	r2, r1, r0, lsl #2
   12060:	andeq	r2, r1, r0, lsl #2
   12064:	andeq	r2, r1, r0, lsl #2
   12068:	andeq	r2, r1, r0, lsl #2
   1206c:	andeq	r2, r1, r0, lsl #2
   12070:	andeq	r2, r1, r0, lsl #4
   12074:	andeq	r2, r1, r8, lsr #4
   12078:	andeq	r2, r1, r0, lsl #2
   1207c:	andeq	r2, r1, r0, lsl #4
   12080:	andeq	r2, r1, r0, lsl #2
   12084:	andeq	r2, r1, r0, lsl #4
   12088:	andeq	r2, r1, r0, lsl #2
   1208c:	andeq	r2, r1, r0, lsl #2
   12090:	andeq	r2, r1, r0, lsl #2
   12094:	andeq	r2, r1, r0, lsl #2
   12098:	andeq	r2, r1, r0, lsl #2
   1209c:	andeq	r2, r1, r0, lsl #2
   120a0:	andeq	r2, r1, r0, lsl #2
   120a4:	andeq	r2, r1, r0, lsl #2
   120a8:	andeq	r2, r1, r0, lsl #2
   120ac:	andeq	r2, r1, r0, lsl #2
   120b0:	andeq	r2, r1, r0, lsl #2
   120b4:	andeq	r2, r1, r0, lsl #2
   120b8:	andeq	r2, r1, r0, lsl #2
   120bc:	andeq	r2, r1, r0, lsl #2
   120c0:	andeq	r2, r1, r0, lsl #2
   120c4:	andeq	r2, r1, r0, lsl #2
   120c8:	andeq	r2, r1, r0, lsl #2
   120cc:	andeq	r2, r1, r0, lsl #2
   120d0:	andeq	r2, r1, r0, lsl #2
   120d4:	andeq	r2, r1, r0, lsl #2
   120d8:	andeq	r2, r1, r0, lsl #2
   120dc:	andeq	r2, r1, r0, lsl #2
   120e0:	andeq	r2, r1, r0, lsl #2
   120e4:	andeq	r2, r1, r0, lsl #2
   120e8:	andeq	r2, r1, r0, lsl #2
   120ec:	andeq	r2, r1, r0, lsl #2
   120f0:			; <UNDEFINED> instruction: 0x000121bc
   120f4:	andeq	r2, r1, r0, lsl #4
   120f8:			; <UNDEFINED> instruction: 0x000121bc
   120fc:	andeq	r2, r1, r8, ror #3
   12100:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12104:	tst	r0, #1
   12108:	bne	12134 <__assert_fail@plt+0x10f8>
   1210c:	ubfx	r0, r4, #5, #3
   12110:	ldr	r1, [fp, #16]
   12114:	ldr	r0, [r1, r0, lsl #2]
   12118:	and	r1, r4, #31
   1211c:	mov	r2, #1
   12120:	tst	r0, r2, lsl r1
   12124:	beq	12134 <__assert_fail@plt+0x10f8>
   12128:	mov	r0, r4
   1212c:	mov	r1, r6
   12130:	b	12148 <__assert_fail@plt+0x110c>
   12134:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12138:	cmp	r0, #0
   1213c:	mov	r0, r4
   12140:	mov	r1, r6
   12144:	beq	12480 <__assert_fail@plt+0x1444>
   12148:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1214c:	tst	r2, #1
   12150:	bne	12a44 <__assert_fail@plt+0x1a08>
   12154:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12158:	subs	r2, r2, #2
   1215c:	movwne	r2, #1
   12160:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12164:	orr	r2, r2, r3
   12168:	tst	r2, #1
   1216c:	bne	121a8 <__assert_fail@plt+0x116c>
   12170:	cmp	r8, sl
   12174:	movcc	r2, #39	; 0x27
   12178:	strbcc	r2, [r5, r8]
   1217c:	add	r2, r8, #1
   12180:	cmp	r2, sl
   12184:	movcc	r3, #36	; 0x24
   12188:	strbcc	r3, [r5, r2]
   1218c:	add	r2, r8, #2
   12190:	cmp	r2, sl
   12194:	movcc	r3, #39	; 0x27
   12198:	strbcc	r3, [r5, r2]
   1219c:	add	r8, r8, #3
   121a0:	mov	r2, #1
   121a4:	str	r2, [fp, #-56]	; 0xffffffc8
   121a8:	cmp	r8, sl
   121ac:	movcc	r2, #92	; 0x5c
   121b0:	strbcc	r2, [r5, r8]
   121b4:	add	r8, r8, #1
   121b8:	b	124c4 <__assert_fail@plt+0x1488>
   121bc:	cmp	lr, #1
   121c0:	beq	121e8 <__assert_fail@plt+0x11ac>
   121c4:	mov	r6, #0
   121c8:	cmn	lr, #1
   121cc:	bne	121f4 <__assert_fail@plt+0x11b8>
   121d0:	ldrb	r0, [ip, #1]
   121d4:	cmp	r0, #0
   121d8:	beq	121e8 <__assert_fail@plt+0x11ac>
   121dc:	mvn	lr, #0
   121e0:	mov	r9, #0
   121e4:	b	12100 <__assert_fail@plt+0x10c4>
   121e8:	mov	r6, #0
   121ec:	cmp	r7, #0
   121f0:	beq	121fc <__assert_fail@plt+0x11c0>
   121f4:	mov	r9, #0
   121f8:	b	12100 <__assert_fail@plt+0x10c4>
   121fc:	mov	r1, #1
   12200:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12204:	cmp	r0, #2
   12208:	bne	12220 <__assert_fail@plt+0x11e4>
   1220c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12210:	tst	r0, #1
   12214:	mov	r6, r1
   12218:	beq	12100 <__assert_fail@plt+0x10c4>
   1221c:	b	12a44 <__assert_fail@plt+0x1a08>
   12220:	mov	r6, r1
   12224:	b	12100 <__assert_fail@plt+0x10c4>
   12228:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1222c:	cmp	r0, #2
   12230:	bne	12464 <__assert_fail@plt+0x1428>
   12234:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12238:	tst	r0, #1
   1223c:	bne	12a44 <__assert_fail@plt+0x1a08>
   12240:	mov	r9, #0
   12244:	b	12478 <__assert_fail@plt+0x143c>
   12248:	mov	r0, #102	; 0x66
   1224c:	b	124ec <__assert_fail@plt+0x14b0>
   12250:	mov	r2, #116	; 0x74
   12254:	b	12264 <__assert_fail@plt+0x1228>
   12258:	mov	r0, #98	; 0x62
   1225c:	b	124ec <__assert_fail@plt+0x14b0>
   12260:	mov	r2, #114	; 0x72
   12264:	ldr	r0, [sp, #72]	; 0x48
   12268:	tst	r0, #1
   1226c:	mov	r0, r2
   12270:	bne	124ec <__assert_fail@plt+0x14b0>
   12274:	b	12a44 <__assert_fail@plt+0x1a08>
   12278:	ldr	r0, [sp, #92]	; 0x5c
   1227c:	tst	r0, #1
   12280:	beq	12508 <__assert_fail@plt+0x14cc>
   12284:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12288:	tst	r0, #1
   1228c:	bne	12a44 <__assert_fail@plt+0x1a08>
   12290:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12294:	subs	r0, r0, #2
   12298:	movwne	r0, #1
   1229c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   122a0:	orr	r0, r0, r1
   122a4:	tst	r0, #1
   122a8:	bne	122e4 <__assert_fail@plt+0x12a8>
   122ac:	cmp	r8, sl
   122b0:	movcc	r0, #39	; 0x27
   122b4:	strbcc	r0, [r5, r8]
   122b8:	add	r0, r8, #1
   122bc:	cmp	r0, sl
   122c0:	movcc	r1, #36	; 0x24
   122c4:	strbcc	r1, [r5, r0]
   122c8:	add	r0, r8, #2
   122cc:	cmp	r0, sl
   122d0:	movcc	r1, #39	; 0x27
   122d4:	strbcc	r1, [r5, r0]
   122d8:	add	r8, r8, #3
   122dc:	mov	r0, #1
   122e0:	str	r0, [fp, #-56]	; 0xffffffc8
   122e4:	cmp	r8, sl
   122e8:	movcc	r0, #92	; 0x5c
   122ec:	strbcc	r0, [r5, r8]
   122f0:	add	r0, r8, #1
   122f4:	mov	r6, #0
   122f8:	mov	r9, #1
   122fc:	mov	r4, #48	; 0x30
   12300:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12304:	cmp	r1, #2
   12308:	beq	126cc <__assert_fail@plt+0x1690>
   1230c:	add	r1, r7, #1
   12310:	cmp	r1, lr
   12314:	bcs	126cc <__assert_fail@plt+0x1690>
   12318:	ldrb	r1, [ip, r1]
   1231c:	sub	r1, r1, #48	; 0x30
   12320:	uxtb	r1, r1
   12324:	cmp	r1, #9
   12328:	bhi	126cc <__assert_fail@plt+0x1690>
   1232c:	cmp	r0, sl
   12330:	movcc	r1, #48	; 0x30
   12334:	strbcc	r1, [r5, r0]
   12338:	add	r0, r8, #2
   1233c:	cmp	r0, sl
   12340:	movcc	r1, #48	; 0x30
   12344:	strbcc	r1, [r5, r0]
   12348:	add	r8, r8, #3
   1234c:	b	12100 <__assert_fail@plt+0x10c4>
   12350:	mov	r9, #0
   12354:	mov	r4, #63	; 0x3f
   12358:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1235c:	cmp	r0, #5
   12360:	beq	126d4 <__assert_fail@plt+0x1698>
   12364:	cmp	r0, #2
   12368:	bne	1277c <__assert_fail@plt+0x1740>
   1236c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12370:	tst	r0, #1
   12374:	mov	r6, #0
   12378:	beq	12100 <__assert_fail@plt+0x10c4>
   1237c:	b	12a44 <__assert_fail@plt+0x1a08>
   12380:	mov	r0, #118	; 0x76
   12384:	b	124ec <__assert_fail@plt+0x14b0>
   12388:	mov	r4, #39	; 0x27
   1238c:	mov	r0, #1
   12390:	str	r0, [sp, #64]	; 0x40
   12394:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12398:	cmp	r0, #2
   1239c:	bne	12524 <__assert_fail@plt+0x14e8>
   123a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   123a4:	tst	r0, #1
   123a8:	bne	12a44 <__assert_fail@plt+0x1a08>
   123ac:	ldr	r2, [sp, #84]	; 0x54
   123b0:	cmp	r2, #0
   123b4:	mov	r0, r2
   123b8:	movwne	r0, #1
   123bc:	clz	r1, sl
   123c0:	lsr	r1, r1, #5
   123c4:	orrs	r0, r0, r1
   123c8:	moveq	r2, sl
   123cc:	str	r2, [sp, #84]	; 0x54
   123d0:	moveq	sl, r0
   123d4:	cmp	r8, sl
   123d8:	movcc	r0, #39	; 0x27
   123dc:	strbcc	r0, [r5, r8]
   123e0:	add	r0, r8, #1
   123e4:	cmp	r0, sl
   123e8:	movcc	r1, #92	; 0x5c
   123ec:	strbcc	r1, [r5, r0]
   123f0:	add	r0, r8, #2
   123f4:	cmp	r0, sl
   123f8:	movcc	r1, #39	; 0x27
   123fc:	strbcc	r1, [r5, r0]
   12400:	add	r8, r8, #3
   12404:	mov	r0, #0
   12408:	str	r0, [fp, #-56]	; 0xffffffc8
   1240c:	mov	r9, #0
   12410:	mov	r6, #1
   12414:	b	12100 <__assert_fail@plt+0x10c4>
   12418:	ldr	r0, [sp, #44]	; 0x2c
   1241c:	cmp	r0, #1
   12420:	bne	1252c <__assert_fail@plt+0x14f0>
   12424:	str	lr, [sp, #32]
   12428:	bl	10f34 <__ctype_b_loc@plt>
   1242c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12430:	ldr	r0, [r0]
   12434:	add	r0, r0, r4, lsl #1
   12438:	ldrb	r0, [r0, #1]
   1243c:	ubfx	r6, r0, #6, #1
   12440:	mov	r2, #1
   12444:	ldr	r0, [sp, #60]	; 0x3c
   12448:	orr	r1, r6, r0
   1244c:	cmp	r2, #1
   12450:	bhi	12784 <__assert_fail@plt+0x1748>
   12454:	tst	r1, #1
   12458:	beq	12784 <__assert_fail@plt+0x1748>
   1245c:	ldr	lr, [sp, #32]
   12460:	b	12100 <__assert_fail@plt+0x10c4>
   12464:	mov	r9, #0
   12468:	mov	r0, #92	; 0x5c
   1246c:	ldr	r1, [sp, #56]	; 0x38
   12470:	cmp	r1, #0
   12474:	beq	124ec <__assert_fail@plt+0x14b0>
   12478:	mov	r4, #92	; 0x5c
   1247c:	mov	r6, #0
   12480:	cmp	r9, #0
   12484:	bne	124bc <__assert_fail@plt+0x1480>
   12488:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1248c:	tst	r0, #1
   12490:	beq	124bc <__assert_fail@plt+0x1480>
   12494:	cmp	r8, sl
   12498:	movcc	r0, #39	; 0x27
   1249c:	strbcc	r0, [r5, r8]
   124a0:	add	r0, r8, #1
   124a4:	cmp	r0, sl
   124a8:	movcc	r1, #39	; 0x27
   124ac:	strbcc	r1, [r5, r0]
   124b0:	add	r8, r8, #2
   124b4:	mov	r0, #0
   124b8:	str	r0, [fp, #-56]	; 0xffffffc8
   124bc:	mov	r1, r6
   124c0:	mov	r0, r4
   124c4:	cmp	r8, sl
   124c8:	strbcc	r0, [r5, r8]
   124cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   124d0:	and	r0, r0, r1
   124d4:	str	r0, [fp, #-48]	; 0xffffffd0
   124d8:	add	r8, r8, #1
   124dc:	add	r7, r7, #1
   124e0:	cmn	lr, #1
   124e4:	bne	11e38 <__assert_fail@plt+0xdfc>
   124e8:	b	11e44 <__assert_fail@plt+0xe08>
   124ec:	mov	r9, #0
   124f0:	ldr	r1, [sp, #92]	; 0x5c
   124f4:	tst	r1, #1
   124f8:	mov	r6, #0
   124fc:	mov	r1, #0
   12500:	beq	12100 <__assert_fail@plt+0x10c4>
   12504:	b	12148 <__assert_fail@plt+0x110c>
   12508:	mov	r4, #0
   1250c:	ldr	r0, [sp, #40]	; 0x28
   12510:	cmp	r0, #0
   12514:	mov	r9, #0
   12518:	mov	r6, #0
   1251c:	beq	12100 <__assert_fail@plt+0x10c4>
   12520:	b	124dc <__assert_fail@plt+0x14a0>
   12524:	mov	r6, #1
   12528:	b	12100 <__assert_fail@plt+0x10c4>
   1252c:	mov	r0, #0
   12530:	str	r0, [fp, #-36]	; 0xffffffdc
   12534:	str	r0, [fp, #-40]	; 0xffffffd8
   12538:	cmn	lr, #1
   1253c:	bne	12550 <__assert_fail@plt+0x1514>
   12540:	mov	r0, ip
   12544:	bl	10f64 <strlen@plt>
   12548:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1254c:	mov	lr, r0
   12550:	ldr	r0, [sp, #76]	; 0x4c
   12554:	add	r0, r0, r7
   12558:	str	r0, [sp, #24]
   1255c:	mov	r6, #1
   12560:	mov	r2, #0
   12564:	sub	r0, fp, #40	; 0x28
   12568:	mov	r3, r0
   1256c:	str	r5, [sp, #28]
   12570:	str	lr, [sp, #32]
   12574:	b	125b8 <__assert_fail@plt+0x157c>
   12578:	ldr	r5, [sp, #52]	; 0x34
   1257c:	add	r5, r0, r5
   12580:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12584:	bl	10e8c <iswprint@plt>
   12588:	cmp	r0, #0
   1258c:	movwne	r0, #1
   12590:	and	r6, r6, r0
   12594:	sub	r0, fp, #40	; 0x28
   12598:	bl	10e44 <mbsinit@plt>
   1259c:	sub	r3, fp, #40	; 0x28
   125a0:	mov	r2, r5
   125a4:	ldr	lr, [sp, #32]
   125a8:	cmp	r0, #0
   125ac:	ldr	r5, [sp, #28]
   125b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   125b4:	bne	12444 <__assert_fail@plt+0x1408>
   125b8:	str	r2, [sp, #52]	; 0x34
   125bc:	add	r0, r2, r7
   125c0:	add	r1, ip, r0
   125c4:	str	r0, [sp, #48]	; 0x30
   125c8:	sub	r2, lr, r0
   125cc:	sub	r0, fp, #44	; 0x2c
   125d0:	bl	14aa4 <__assert_fail@plt+0x3a68>
   125d4:	cmp	r0, #0
   125d8:	beq	12950 <__assert_fail@plt+0x1914>
   125dc:	cmn	r0, #1
   125e0:	beq	1290c <__assert_fail@plt+0x18d0>
   125e4:	cmn	r0, #2
   125e8:	ldr	lr, [sp, #32]
   125ec:	beq	12914 <__assert_fail@plt+0x18d8>
   125f0:	cmp	r0, #2
   125f4:	mov	r1, #0
   125f8:	movwcc	r1, #1
   125fc:	ldr	r2, [sp, #68]	; 0x44
   12600:	eor	r2, r2, #1
   12604:	orrs	r1, r2, r1
   12608:	bne	12578 <__assert_fail@plt+0x153c>
   1260c:	ldr	r1, [sp, #52]	; 0x34
   12610:	ldr	r2, [sp, #24]
   12614:	add	r1, r2, r1
   12618:	sub	r2, r0, #1
   1261c:	b	1262c <__assert_fail@plt+0x15f0>
   12620:	add	r1, r1, #1
   12624:	subs	r2, r2, #1
   12628:	beq	12578 <__assert_fail@plt+0x153c>
   1262c:	ldrb	r3, [r1]
   12630:	sub	r3, r3, #91	; 0x5b
   12634:	cmp	r3, #33	; 0x21
   12638:	bhi	12620 <__assert_fail@plt+0x15e4>
   1263c:	add	r5, pc, #0
   12640:	ldr	pc, [r5, r3, lsl #2]
   12644:	andeq	r2, r1, ip, lsr sl
   12648:	andeq	r2, r1, ip, lsr sl
   1264c:	andeq	r2, r1, r0, lsr #12
   12650:	andeq	r2, r1, ip, lsr sl
   12654:	andeq	r2, r1, r0, lsr #12
   12658:	andeq	r2, r1, ip, lsr sl
   1265c:	andeq	r2, r1, r0, lsr #12
   12660:	andeq	r2, r1, r0, lsr #12
   12664:	andeq	r2, r1, r0, lsr #12
   12668:	andeq	r2, r1, r0, lsr #12
   1266c:	andeq	r2, r1, r0, lsr #12
   12670:	andeq	r2, r1, r0, lsr #12
   12674:	andeq	r2, r1, r0, lsr #12
   12678:	andeq	r2, r1, r0, lsr #12
   1267c:	andeq	r2, r1, r0, lsr #12
   12680:	andeq	r2, r1, r0, lsr #12
   12684:	andeq	r2, r1, r0, lsr #12
   12688:	andeq	r2, r1, r0, lsr #12
   1268c:	andeq	r2, r1, r0, lsr #12
   12690:	andeq	r2, r1, r0, lsr #12
   12694:	andeq	r2, r1, r0, lsr #12
   12698:	andeq	r2, r1, r0, lsr #12
   1269c:	andeq	r2, r1, r0, lsr #12
   126a0:	andeq	r2, r1, r0, lsr #12
   126a4:	andeq	r2, r1, r0, lsr #12
   126a8:	andeq	r2, r1, r0, lsr #12
   126ac:	andeq	r2, r1, r0, lsr #12
   126b0:	andeq	r2, r1, r0, lsr #12
   126b4:	andeq	r2, r1, r0, lsr #12
   126b8:	andeq	r2, r1, r0, lsr #12
   126bc:	andeq	r2, r1, r0, lsr #12
   126c0:	andeq	r2, r1, r0, lsr #12
   126c4:	andeq	r2, r1, r0, lsr #12
   126c8:	andeq	r2, r1, ip, lsr sl
   126cc:	mov	r8, r0
   126d0:	b	12100 <__assert_fail@plt+0x10c4>
   126d4:	ldr	r0, [sp, #36]	; 0x24
   126d8:	cmp	r0, #0
   126dc:	beq	1277c <__assert_fail@plt+0x1740>
   126e0:	add	r0, r7, #2
   126e4:	cmp	r0, lr
   126e8:	bcs	1277c <__assert_fail@plt+0x1740>
   126ec:	add	r1, r7, ip
   126f0:	ldrb	r1, [r1, #1]
   126f4:	cmp	r1, #63	; 0x3f
   126f8:	bne	1277c <__assert_fail@plt+0x1740>
   126fc:	ldrb	r1, [ip, r0]
   12700:	sub	r2, r1, #33	; 0x21
   12704:	cmp	r2, #29
   12708:	bhi	1277c <__assert_fail@plt+0x1740>
   1270c:	mov	r3, #1
   12710:	movw	r6, #20929	; 0x51c1
   12714:	movt	r6, #14336	; 0x3800
   12718:	tst	r6, r3, lsl r2
   1271c:	beq	1277c <__assert_fail@plt+0x1740>
   12720:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12724:	tst	r2, #1
   12728:	bne	12a44 <__assert_fail@plt+0x1a08>
   1272c:	cmp	r8, sl
   12730:	movcc	r2, #63	; 0x3f
   12734:	strbcc	r2, [r5, r8]
   12738:	add	r2, r8, #1
   1273c:	cmp	r2, sl
   12740:	movcc	r3, #34	; 0x22
   12744:	strbcc	r3, [r5, r2]
   12748:	add	r2, r8, #2
   1274c:	cmp	r2, sl
   12750:	movcc	r3, #34	; 0x22
   12754:	strbcc	r3, [r5, r2]
   12758:	add	r2, r8, #3
   1275c:	cmp	r2, sl
   12760:	movcc	r3, #63	; 0x3f
   12764:	strbcc	r3, [r5, r2]
   12768:	add	r8, r8, #4
   1276c:	mov	r7, r0
   12770:	mov	r4, r1
   12774:	mov	r6, #0
   12778:	b	12100 <__assert_fail@plt+0x10c4>
   1277c:	mov	r6, #0
   12780:	b	12100 <__assert_fail@plt+0x10c4>
   12784:	add	r0, r2, r7
   12788:	str	r0, [sp, #52]	; 0x34
   1278c:	mov	r2, #0
   12790:	ldr	lr, [sp, #32]
   12794:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12798:	str	r1, [sp, #48]	; 0x30
   1279c:	tst	r1, #1
   127a0:	bne	1287c <__assert_fail@plt+0x1840>
   127a4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   127a8:	tst	r1, #1
   127ac:	bne	12a44 <__assert_fail@plt+0x1a08>
   127b0:	mov	r3, r0
   127b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127b8:	subs	r1, r0, #2
   127bc:	movwne	r1, #1
   127c0:	orr	r1, r1, r3
   127c4:	tst	r1, #1
   127c8:	bne	12800 <__assert_fail@plt+0x17c4>
   127cc:	cmp	r8, sl
   127d0:	movcc	r0, #39	; 0x27
   127d4:	strbcc	r0, [r5, r8]
   127d8:	add	r2, r8, #1
   127dc:	cmp	r2, sl
   127e0:	movcc	r0, #36	; 0x24
   127e4:	strbcc	r0, [r5, r2]
   127e8:	add	r2, r8, #2
   127ec:	cmp	r2, sl
   127f0:	movcc	r0, #39	; 0x27
   127f4:	strbcc	r0, [r5, r2]
   127f8:	add	r8, r8, #3
   127fc:	mov	r3, #1
   12800:	cmp	r8, sl
   12804:	movcc	r1, #92	; 0x5c
   12808:	strbcc	r1, [r5, r8]
   1280c:	add	r2, r8, #1
   12810:	cmp	r2, sl
   12814:	bcs	12828 <__assert_fail@plt+0x17ec>
   12818:	uxtb	r1, r4
   1281c:	mov	r0, #48	; 0x30
   12820:	orr	r1, r0, r1, lsr #6
   12824:	strb	r1, [r5, r2]
   12828:	add	r2, r8, #2
   1282c:	cmp	r2, sl
   12830:	lsrcc	r1, r4, #3
   12834:	movcc	r0, #6
   12838:	bficc	r1, r0, #3, #29
   1283c:	strbcc	r1, [r5, r2]
   12840:	mov	r0, #6
   12844:	bfi	r4, r0, #3, #29
   12848:	add	r8, r8, #3
   1284c:	mov	r2, #1
   12850:	mov	r0, r3
   12854:	b	128a0 <__assert_fail@plt+0x1864>
   12858:	cmp	r8, sl
   1285c:	strbcc	r4, [r5, r8]
   12860:	ldr	r1, [sp, #76]	; 0x4c
   12864:	ldrb	r4, [r1, r7]
   12868:	add	r8, r8, #1
   1286c:	mov	r7, r3
   12870:	ldr	r1, [sp, #48]	; 0x30
   12874:	tst	r1, #1
   12878:	beq	127a4 <__assert_fail@plt+0x1768>
   1287c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12880:	tst	r1, #1
   12884:	beq	12898 <__assert_fail@plt+0x185c>
   12888:	cmp	r8, sl
   1288c:	movcc	r1, #92	; 0x5c
   12890:	strbcc	r1, [r5, r8]
   12894:	add	r8, r8, #1
   12898:	mov	r1, #0
   1289c:	str	r1, [fp, #-52]	; 0xffffffcc
   128a0:	and	r9, r2, #1
   128a4:	add	r3, r7, #1
   128a8:	ldr	r1, [sp, #52]	; 0x34
   128ac:	cmp	r1, r3
   128b0:	bls	128f4 <__assert_fail@plt+0x18b8>
   128b4:	cmp	r9, #0
   128b8:	movwne	r9, #1
   128bc:	mvn	r1, r0
   128c0:	orr	r1, r1, r9
   128c4:	tst	r1, #1
   128c8:	bne	12858 <__assert_fail@plt+0x181c>
   128cc:	cmp	r8, sl
   128d0:	movcc	r1, #39	; 0x27
   128d4:	strbcc	r1, [r5, r8]
   128d8:	add	r1, r8, #1
   128dc:	cmp	r1, sl
   128e0:	movcc	r0, #39	; 0x27
   128e4:	strbcc	r0, [r5, r1]
   128e8:	add	r8, r8, #2
   128ec:	mov	r0, #0
   128f0:	b	12858 <__assert_fail@plt+0x181c>
   128f4:	str	r0, [fp, #-56]	; 0xffffffc8
   128f8:	cmp	r9, #0
   128fc:	movwne	r9, #1
   12900:	cmp	r9, #0
   12904:	beq	12488 <__assert_fail@plt+0x144c>
   12908:	b	124bc <__assert_fail@plt+0x1480>
   1290c:	mov	r6, #0
   12910:	b	12950 <__assert_fail@plt+0x1914>
   12914:	mov	r6, #0
   12918:	ldr	r0, [sp, #48]	; 0x30
   1291c:	cmp	r0, lr
   12920:	bcs	12950 <__assert_fail@plt+0x1914>
   12924:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12928:	add	r0, ip, r7
   1292c:	ldr	r2, [sp, #52]	; 0x34
   12930:	ldrb	r1, [r0, r2]
   12934:	cmp	r1, #0
   12938:	beq	12444 <__assert_fail@plt+0x1408>
   1293c:	add	r2, r2, #1
   12940:	add	r1, r7, r2
   12944:	cmp	r1, lr
   12948:	bcc	12930 <__assert_fail@plt+0x18f4>
   1294c:	b	12444 <__assert_fail@plt+0x1408>
   12950:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12954:	ldr	r2, [sp, #52]	; 0x34
   12958:	b	12444 <__assert_fail@plt+0x1408>
   1295c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12960:	eor	r0, r1, #2
   12964:	orr	r0, r0, r8
   12968:	clz	r0, r0
   1296c:	lsr	r0, r0, #5
   12970:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12974:	tst	r3, r0
   12978:	bne	12a44 <__assert_fail@plt+0x1a08>
   1297c:	mov	r6, r5
   12980:	subs	r0, r1, #2
   12984:	movwne	r0, #1
   12988:	orr	r0, r3, r0
   1298c:	tst	r0, #1
   12990:	ldr	r2, [sp, #92]	; 0x5c
   12994:	ldreq	r0, [sp, #64]	; 0x40
   12998:	eoreq	r0, r0, #1
   1299c:	tsteq	r0, #1
   129a0:	bne	129e0 <__assert_fail@plt+0x19a4>
   129a4:	mov	r9, lr
   129a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129ac:	tst	r0, #1
   129b0:	bne	12aac <__assert_fail@plt+0x1a70>
   129b4:	ldr	r0, [sp, #84]	; 0x54
   129b8:	cmp	r0, #0
   129bc:	beq	129e0 <__assert_fail@plt+0x19a4>
   129c0:	mov	r0, #0
   129c4:	str	r0, [fp, #-48]	; 0xffffffd0
   129c8:	mov	r1, #2
   129cc:	cmp	sl, #0
   129d0:	mov	r0, r2
   129d4:	mov	r4, r3
   129d8:	ldr	r7, [sp, #84]	; 0x54
   129dc:	beq	11bb8 <__assert_fail@plt+0xb7c>
   129e0:	ldr	r1, [fp, #-84]	; 0xffffffac
   129e4:	clz	r0, r1
   129e8:	lsr	r0, r0, #5
   129ec:	orr	r0, r0, r3
   129f0:	tst	r0, #1
   129f4:	bne	12a20 <__assert_fail@plt+0x19e4>
   129f8:	ldrb	r0, [r1]
   129fc:	cmp	r0, #0
   12a00:	beq	12a20 <__assert_fail@plt+0x19e4>
   12a04:	add	r1, r1, #1
   12a08:	cmp	r8, sl
   12a0c:	strbcc	r0, [r6, r8]
   12a10:	add	r8, r8, #1
   12a14:	ldrb	r0, [r1], #1
   12a18:	cmp	r0, #0
   12a1c:	bne	12a08 <__assert_fail@plt+0x19cc>
   12a20:	cmp	r8, sl
   12a24:	movcc	r0, #0
   12a28:	strbcc	r0, [r6, r8]
   12a2c:	b	12aa0 <__assert_fail@plt+0x1a64>
   12a30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a34:	mov	lr, r4
   12a38:	b	12a44 <__assert_fail@plt+0x1a08>
   12a3c:	ldr	r5, [sp, #28]
   12a40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a44:	mov	r0, #0
   12a48:	ldr	r1, [fp, #12]
   12a4c:	bic	r1, r1, #2
   12a50:	mov	r2, #2
   12a54:	ldr	r3, [sp, #92]	; 0x5c
   12a58:	tst	r3, #1
   12a5c:	movwne	r2, #4
   12a60:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12a64:	cmp	r3, #2
   12a68:	movne	r2, r3
   12a6c:	str	r2, [sp]
   12a70:	str	r1, [sp, #4]
   12a74:	str	r0, [sp, #8]
   12a78:	ldr	r0, [sp, #80]	; 0x50
   12a7c:	str	r0, [sp, #12]
   12a80:	ldr	r0, [sp, #88]	; 0x58
   12a84:	str	r0, [sp, #16]
   12a88:	mov	r0, r5
   12a8c:	mov	r1, sl
   12a90:	mov	r2, ip
   12a94:	mov	r3, lr
   12a98:	bl	11b2c <__assert_fail@plt+0xaf0>
   12a9c:	mov	r8, r0
   12aa0:	mov	r0, r8
   12aa4:	sub	sp, fp, #28
   12aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aac:	mov	r0, #5
   12ab0:	str	r0, [sp]
   12ab4:	ldr	r0, [fp, #12]
   12ab8:	str	r0, [sp, #4]
   12abc:	ldr	r0, [fp, #16]
   12ac0:	str	r0, [sp, #8]
   12ac4:	ldr	r0, [sp, #80]	; 0x50
   12ac8:	str	r0, [sp, #12]
   12acc:	ldr	r0, [sp, #88]	; 0x58
   12ad0:	str	r0, [sp, #16]
   12ad4:	mov	r0, r6
   12ad8:	ldr	r1, [sp, #84]	; 0x54
   12adc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12ae0:	mov	r3, r9
   12ae4:	b	12a98 <__assert_fail@plt+0x1a5c>
   12ae8:	bl	11030 <abort@plt>
   12aec:	mov	r3, r2
   12af0:	mov	r2, #0
   12af4:	b	12af8 <__assert_fail@plt+0x1abc>
   12af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12afc:	add	fp, sp, #28
   12b00:	sub	sp, sp, #36	; 0x24
   12b04:	mov	r4, r2
   12b08:	str	r2, [sp, #24]
   12b0c:	mov	r5, r1
   12b10:	mov	r6, r0
   12b14:	str	r0, [sp, #20]
   12b18:	movw	r8, #24928	; 0x6160
   12b1c:	movt	r8, #2
   12b20:	cmp	r3, #0
   12b24:	movne	r8, r3
   12b28:	bl	10f7c <__errno_location@plt>
   12b2c:	str	r0, [sp, #28]
   12b30:	ldm	r8, {r3, r9}
   12b34:	ldr	r1, [r8, #40]	; 0x28
   12b38:	ldr	r2, [r8, #44]	; 0x2c
   12b3c:	ldr	r7, [r0]
   12b40:	str	r7, [sp, #32]
   12b44:	add	sl, r8, #8
   12b48:	cmp	r4, #0
   12b4c:	orreq	r9, r9, #1
   12b50:	stm	sp, {r3, r9, sl}
   12b54:	str	r1, [sp, #12]
   12b58:	str	r2, [sp, #16]
   12b5c:	mov	r0, #0
   12b60:	mov	r1, #0
   12b64:	mov	r2, r6
   12b68:	mov	r3, r5
   12b6c:	mov	r7, r5
   12b70:	bl	11b2c <__assert_fail@plt+0xaf0>
   12b74:	mov	r5, r0
   12b78:	add	r4, r0, #1
   12b7c:	mov	r0, r4
   12b80:	bl	13a00 <__assert_fail@plt+0x29c4>
   12b84:	mov	r6, r0
   12b88:	ldr	r0, [r8]
   12b8c:	ldr	r1, [r8, #40]	; 0x28
   12b90:	ldr	r2, [r8, #44]	; 0x2c
   12b94:	stm	sp, {r0, r9, sl}
   12b98:	str	r1, [sp, #12]
   12b9c:	str	r2, [sp, #16]
   12ba0:	mov	r0, r6
   12ba4:	mov	r1, r4
   12ba8:	ldr	r2, [sp, #20]
   12bac:	mov	r3, r7
   12bb0:	bl	11b2c <__assert_fail@plt+0xaf0>
   12bb4:	ldr	r0, [sp, #24]
   12bb8:	ldr	r1, [sp, #32]
   12bbc:	ldr	r2, [sp, #28]
   12bc0:	str	r1, [r2]
   12bc4:	cmp	r0, #0
   12bc8:	strne	r5, [r0]
   12bcc:	mov	r0, r6
   12bd0:	sub	sp, fp, #28
   12bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bdc:	add	fp, sp, #24
   12be0:	movw	r8, #24816	; 0x60f0
   12be4:	movt	r8, #2
   12be8:	ldr	r4, [r8]
   12bec:	movw	r5, #24820	; 0x60f4
   12bf0:	movt	r5, #2
   12bf4:	ldr	r0, [r5]
   12bf8:	cmp	r0, #2
   12bfc:	blt	12c28 <__assert_fail@plt+0x1bec>
   12c00:	add	r7, r4, #12
   12c04:	mov	r6, #0
   12c08:	ldr	r0, [r7, r6, lsl #3]
   12c0c:	bl	1494c <__assert_fail@plt+0x3910>
   12c10:	add	r0, r6, #1
   12c14:	ldr	r1, [r5]
   12c18:	add	r2, r6, #2
   12c1c:	cmp	r2, r1
   12c20:	mov	r6, r0
   12c24:	blt	12c08 <__assert_fail@plt+0x1bcc>
   12c28:	ldr	r0, [r4, #4]
   12c2c:	movw	r9, #24976	; 0x6190
   12c30:	movt	r9, #2
   12c34:	cmp	r0, r9
   12c38:	movw	r7, #24824	; 0x60f8
   12c3c:	movt	r7, #2
   12c40:	beq	12c50 <__assert_fail@plt+0x1c14>
   12c44:	bl	1494c <__assert_fail@plt+0x3910>
   12c48:	mov	r0, #256	; 0x100
   12c4c:	stm	r7, {r0, r9}
   12c50:	cmp	r4, r7
   12c54:	beq	12c64 <__assert_fail@plt+0x1c28>
   12c58:	mov	r0, r4
   12c5c:	bl	1494c <__assert_fail@plt+0x3910>
   12c60:	str	r7, [r8]
   12c64:	mov	r0, #1
   12c68:	str	r0, [r5]
   12c6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c70:	movw	r3, #24928	; 0x6160
   12c74:	movt	r3, #2
   12c78:	mvn	r2, #0
   12c7c:	b	12c80 <__assert_fail@plt+0x1c44>
   12c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c84:	add	fp, sp, #28
   12c88:	sub	sp, sp, #44	; 0x2c
   12c8c:	mov	r7, r3
   12c90:	str	r2, [sp, #36]	; 0x24
   12c94:	str	r1, [sp, #32]
   12c98:	mov	r5, r0
   12c9c:	bl	10f7c <__errno_location@plt>
   12ca0:	cmp	r5, #0
   12ca4:	bmi	12e14 <__assert_fail@plt+0x1dd8>
   12ca8:	cmn	r5, #-2147483647	; 0x80000001
   12cac:	beq	12e14 <__assert_fail@plt+0x1dd8>
   12cb0:	movw	r4, #24816	; 0x60f0
   12cb4:	movt	r4, #2
   12cb8:	ldr	r6, [r4]
   12cbc:	str	r0, [sp, #28]
   12cc0:	ldr	r0, [r0]
   12cc4:	str	r0, [sp, #24]
   12cc8:	movw	r8, #24820	; 0x60f4
   12ccc:	movt	r8, #2
   12cd0:	ldr	r1, [r8]
   12cd4:	cmp	r1, r5
   12cd8:	ble	12ce4 <__assert_fail@plt+0x1ca8>
   12cdc:	mov	sl, r6
   12ce0:	b	12d50 <__assert_fail@plt+0x1d14>
   12ce4:	str	r1, [fp, #-32]	; 0xffffffe0
   12ce8:	mov	r0, #8
   12cec:	str	r0, [sp]
   12cf0:	movw	r9, #24824	; 0x60f8
   12cf4:	movt	r9, #2
   12cf8:	subs	r0, r6, r9
   12cfc:	movne	r0, r6
   12d00:	sub	r1, r5, r1
   12d04:	add	r2, r1, #1
   12d08:	sub	r1, fp, #32
   12d0c:	mvn	r3, #-2147483648	; 0x80000000
   12d10:	bl	13adc <__assert_fail@plt+0x2aa0>
   12d14:	mov	sl, r0
   12d18:	str	r0, [r4]
   12d1c:	cmp	r6, r9
   12d20:	bne	12d2c <__assert_fail@plt+0x1cf0>
   12d24:	ldrd	r0, [r9]
   12d28:	stm	sl, {r0, r1}
   12d2c:	ldr	r1, [r8]
   12d30:	add	r0, sl, r1, lsl #3
   12d34:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d38:	sub	r1, r2, r1
   12d3c:	lsl	r2, r1, #3
   12d40:	mov	r1, #0
   12d44:	bl	10f94 <memset@plt>
   12d48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d4c:	str	r0, [r8]
   12d50:	mov	r9, sl
   12d54:	ldr	r6, [r9, r5, lsl #3]!
   12d58:	ldr	r4, [r9, #4]!
   12d5c:	ldm	r7, {r0, r1}
   12d60:	ldr	r2, [r7, #40]	; 0x28
   12d64:	ldr	r3, [r7, #44]	; 0x2c
   12d68:	orr	r8, r1, #1
   12d6c:	add	r1, r7, #8
   12d70:	stm	sp, {r0, r8}
   12d74:	str	r1, [sp, #20]
   12d78:	add	r0, sp, #8
   12d7c:	stm	r0, {r1, r2, r3}
   12d80:	mov	r0, r4
   12d84:	mov	r1, r6
   12d88:	ldr	r2, [sp, #32]
   12d8c:	ldr	r3, [sp, #36]	; 0x24
   12d90:	bl	11b2c <__assert_fail@plt+0xaf0>
   12d94:	cmp	r6, r0
   12d98:	bhi	12dfc <__assert_fail@plt+0x1dc0>
   12d9c:	add	r6, r0, #1
   12da0:	str	r6, [sl, r5, lsl #3]
   12da4:	movw	r0, #24976	; 0x6190
   12da8:	movt	r0, #2
   12dac:	cmp	r4, r0
   12db0:	beq	12dbc <__assert_fail@plt+0x1d80>
   12db4:	mov	r0, r4
   12db8:	bl	1494c <__assert_fail@plt+0x3910>
   12dbc:	mov	r0, r6
   12dc0:	bl	13a00 <__assert_fail@plt+0x29c4>
   12dc4:	mov	r4, r0
   12dc8:	str	r0, [r9]
   12dcc:	ldr	r0, [r7]
   12dd0:	ldr	r1, [r7, #40]	; 0x28
   12dd4:	ldr	r2, [r7, #44]	; 0x2c
   12dd8:	stm	sp, {r0, r8}
   12ddc:	ldr	r0, [sp, #20]
   12de0:	add	r3, sp, #8
   12de4:	stm	r3, {r0, r1, r2}
   12de8:	mov	r0, r4
   12dec:	mov	r1, r6
   12df0:	ldr	r2, [sp, #32]
   12df4:	ldr	r3, [sp, #36]	; 0x24
   12df8:	bl	11b2c <__assert_fail@plt+0xaf0>
   12dfc:	ldr	r0, [sp, #28]
   12e00:	ldr	r1, [sp, #24]
   12e04:	str	r1, [r0]
   12e08:	mov	r0, r4
   12e0c:	sub	sp, fp, #28
   12e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e14:	bl	11030 <abort@plt>
   12e18:	movw	r3, #24928	; 0x6160
   12e1c:	movt	r3, #2
   12e20:	b	12c80 <__assert_fail@plt+0x1c44>
   12e24:	mov	r1, r0
   12e28:	mov	r0, #0
   12e2c:	b	12c70 <__assert_fail@plt+0x1c34>
   12e30:	mov	r2, r1
   12e34:	mov	r1, r0
   12e38:	mov	r0, #0
   12e3c:	b	12e18 <__assert_fail@plt+0x1ddc>
   12e40:	push	{r4, r5, r6, sl, fp, lr}
   12e44:	add	fp, sp, #16
   12e48:	sub	sp, sp, #48	; 0x30
   12e4c:	mov	r4, r2
   12e50:	mov	r5, r0
   12e54:	mov	r6, sp
   12e58:	mov	r0, r6
   12e5c:	bl	12e7c <__assert_fail@plt+0x1e40>
   12e60:	mov	r0, r5
   12e64:	mov	r1, r4
   12e68:	mvn	r2, #0
   12e6c:	mov	r3, r6
   12e70:	bl	12c80 <__assert_fail@plt+0x1c44>
   12e74:	sub	sp, fp, #16
   12e78:	pop	{r4, r5, r6, sl, fp, pc}
   12e7c:	push	{fp, lr}
   12e80:	mov	fp, sp
   12e84:	vmov.i32	q8, #0	; 0x00000000
   12e88:	mov	r2, #32
   12e8c:	mov	r3, r0
   12e90:	vst1.32	{d16-d17}, [r3], r2
   12e94:	vst1.32	{d16-d17}, [r3]
   12e98:	add	r2, r0, #16
   12e9c:	vst1.32	{d16-d17}, [r2]
   12ea0:	cmp	r1, #10
   12ea4:	strne	r1, [r0]
   12ea8:	popne	{fp, pc}
   12eac:	bl	11030 <abort@plt>
   12eb0:	push	{r4, r5, r6, r7, fp, lr}
   12eb4:	add	fp, sp, #16
   12eb8:	sub	sp, sp, #48	; 0x30
   12ebc:	mov	r4, r3
   12ec0:	mov	r5, r2
   12ec4:	mov	r6, r0
   12ec8:	mov	r7, sp
   12ecc:	mov	r0, r7
   12ed0:	bl	12e7c <__assert_fail@plt+0x1e40>
   12ed4:	mov	r0, r6
   12ed8:	mov	r1, r5
   12edc:	mov	r2, r4
   12ee0:	mov	r3, r7
   12ee4:	bl	12c80 <__assert_fail@plt+0x1c44>
   12ee8:	sub	sp, fp, #16
   12eec:	pop	{r4, r5, r6, r7, fp, pc}
   12ef0:	mov	r2, r1
   12ef4:	mov	r1, r0
   12ef8:	mov	r0, #0
   12efc:	b	12e40 <__assert_fail@plt+0x1e04>
   12f00:	mov	r3, r2
   12f04:	mov	r2, r1
   12f08:	mov	r1, r0
   12f0c:	mov	r0, #0
   12f10:	b	12eb0 <__assert_fail@plt+0x1e74>
   12f14:	push	{r4, r5, r6, sl, fp, lr}
   12f18:	add	fp, sp, #16
   12f1c:	sub	sp, sp, #48	; 0x30
   12f20:	mov	r4, r1
   12f24:	mov	r5, r0
   12f28:	movw	r0, #24928	; 0x6160
   12f2c:	movt	r0, #2
   12f30:	add	r1, r0, #16
   12f34:	mov	r3, #32
   12f38:	vld1.64	{d16-d17}, [r0], r3
   12f3c:	vld1.64	{d18-d19}, [r1]
   12f40:	mov	r6, sp
   12f44:	add	r1, r6, #16
   12f48:	vld1.64	{d20-d21}, [r0]
   12f4c:	vst1.64	{d18-d19}, [r1]
   12f50:	mov	r0, r6
   12f54:	vst1.64	{d16-d17}, [r0], r3
   12f58:	vst1.64	{d20-d21}, [r0]
   12f5c:	mov	r0, r6
   12f60:	mov	r1, r2
   12f64:	mov	r2, #1
   12f68:	bl	11a20 <__assert_fail@plt+0x9e4>
   12f6c:	mov	r0, #0
   12f70:	mov	r1, r5
   12f74:	mov	r2, r4
   12f78:	mov	r3, r6
   12f7c:	bl	12c80 <__assert_fail@plt+0x1c44>
   12f80:	sub	sp, fp, #16
   12f84:	pop	{r4, r5, r6, sl, fp, pc}
   12f88:	mov	r2, r1
   12f8c:	mvn	r1, #0
   12f90:	b	12f14 <__assert_fail@plt+0x1ed8>
   12f94:	mov	r1, #58	; 0x3a
   12f98:	b	12f88 <__assert_fail@plt+0x1f4c>
   12f9c:	mov	r2, #58	; 0x3a
   12fa0:	b	12f14 <__assert_fail@plt+0x1ed8>
   12fa4:	push	{r4, r5, r6, sl, fp, lr}
   12fa8:	add	fp, sp, #16
   12fac:	sub	sp, sp, #48	; 0x30
   12fb0:	mov	r4, r2
   12fb4:	mov	r5, r0
   12fb8:	mov	r6, sp
   12fbc:	mov	r0, r6
   12fc0:	bl	12e7c <__assert_fail@plt+0x1e40>
   12fc4:	mov	r0, r6
   12fc8:	mov	r1, #58	; 0x3a
   12fcc:	mov	r2, #1
   12fd0:	bl	11a20 <__assert_fail@plt+0x9e4>
   12fd4:	mov	r0, r5
   12fd8:	mov	r1, r4
   12fdc:	mvn	r2, #0
   12fe0:	mov	r3, r6
   12fe4:	bl	12c80 <__assert_fail@plt+0x1c44>
   12fe8:	sub	sp, fp, #16
   12fec:	pop	{r4, r5, r6, sl, fp, pc}
   12ff0:	push	{fp, lr}
   12ff4:	mov	fp, sp
   12ff8:	sub	sp, sp, #8
   12ffc:	mvn	ip, #0
   13000:	str	ip, [sp]
   13004:	bl	13010 <__assert_fail@plt+0x1fd4>
   13008:	mov	sp, fp
   1300c:	pop	{fp, pc}
   13010:	push	{r4, r5, r6, r7, fp, lr}
   13014:	add	fp, sp, #16
   13018:	sub	sp, sp, #48	; 0x30
   1301c:	mov	r7, r3
   13020:	mov	r5, r0
   13024:	movw	r0, #24928	; 0x6160
   13028:	movt	r0, #2
   1302c:	add	r3, r0, #16
   13030:	mov	r4, #32
   13034:	vld1.64	{d16-d17}, [r0], r4
   13038:	vld1.64	{d18-d19}, [r3]
   1303c:	mov	r6, sp
   13040:	add	r3, r6, #16
   13044:	vld1.64	{d20-d21}, [r0]
   13048:	vst1.64	{d18-d19}, [r3]
   1304c:	mov	r0, r6
   13050:	vst1.64	{d16-d17}, [r0], r4
   13054:	vst1.64	{d20-d21}, [r0]
   13058:	mov	r0, r6
   1305c:	bl	11a78 <__assert_fail@plt+0xa3c>
   13060:	ldr	r2, [fp, #8]
   13064:	mov	r0, r5
   13068:	mov	r1, r7
   1306c:	mov	r3, r6
   13070:	bl	12c80 <__assert_fail@plt+0x1c44>
   13074:	sub	sp, fp, #16
   13078:	pop	{r4, r5, r6, r7, fp, pc}
   1307c:	mov	r3, r2
   13080:	mov	r2, r1
   13084:	mov	r1, r0
   13088:	mov	r0, #0
   1308c:	b	12ff0 <__assert_fail@plt+0x1fb4>
   13090:	push	{fp, lr}
   13094:	mov	fp, sp
   13098:	sub	sp, sp, #8
   1309c:	mov	ip, r2
   130a0:	mov	r2, r1
   130a4:	mov	r1, r0
   130a8:	str	r3, [sp]
   130ac:	mov	r0, #0
   130b0:	mov	r3, ip
   130b4:	bl	13010 <__assert_fail@plt+0x1fd4>
   130b8:	mov	sp, fp
   130bc:	pop	{fp, pc}
   130c0:	movw	r3, #24832	; 0x6100
   130c4:	movt	r3, #2
   130c8:	b	12c80 <__assert_fail@plt+0x1c44>
   130cc:	mov	r2, r1
   130d0:	mov	r1, r0
   130d4:	mov	r0, #0
   130d8:	b	130c0 <__assert_fail@plt+0x2084>
   130dc:	mvn	r2, #0
   130e0:	b	130c0 <__assert_fail@plt+0x2084>
   130e4:	mov	r1, r0
   130e8:	mov	r0, #0
   130ec:	b	130dc <__assert_fail@plt+0x20a0>
   130f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130f4:	add	fp, sp, #24
   130f8:	sub	sp, sp, #16
   130fc:	mov	r4, r1
   13100:	mov	r5, r0
   13104:	mov	r7, #0
   13108:	mov	r0, #0
   1310c:	mov	r1, r5
   13110:	mov	r2, #5
   13114:	bl	10e5c <dcgettext@plt>
   13118:	cmp	r0, r5
   1311c:	beq	13128 <__assert_fail@plt+0x20ec>
   13120:	sub	sp, fp, #24
   13124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13128:	bl	14a6c <__assert_fail@plt+0x3a30>
   1312c:	mov	r6, r0
   13130:	mov	r8, #56	; 0x38
   13134:	mov	r0, #45	; 0x2d
   13138:	stm	sp, {r0, r8}
   1313c:	str	r7, [sp, #8]
   13140:	str	r7, [sp, #12]
   13144:	mov	r0, r6
   13148:	mov	r1, #85	; 0x55
   1314c:	mov	r2, #84	; 0x54
   13150:	mov	r3, #70	; 0x46
   13154:	bl	131ec <__assert_fail@plt+0x21b0>
   13158:	cmp	r0, #0
   1315c:	beq	13178 <__assert_fail@plt+0x213c>
   13160:	ldrb	r1, [r5]
   13164:	movw	r2, #21249	; 0x5301
   13168:	movt	r2, #1
   1316c:	movw	r0, #21253	; 0x5305
   13170:	movt	r0, #1
   13174:	b	131bc <__assert_fail@plt+0x2180>
   13178:	mov	r0, #48	; 0x30
   1317c:	mov	r1, #51	; 0x33
   13180:	str	r8, [sp]
   13184:	stmib	sp, {r0, r1}
   13188:	str	r0, [sp, #12]
   1318c:	mov	r0, r6
   13190:	mov	r1, #71	; 0x47
   13194:	mov	r2, #66	; 0x42
   13198:	mov	r3, #49	; 0x31
   1319c:	bl	131ec <__assert_fail@plt+0x21b0>
   131a0:	cmp	r0, #0
   131a4:	beq	131cc <__assert_fail@plt+0x2190>
   131a8:	ldrb	r1, [r5]
   131ac:	movw	r2, #21257	; 0x5309
   131b0:	movt	r2, #1
   131b4:	movw	r0, #21261	; 0x530d
   131b8:	movt	r0, #1
   131bc:	cmp	r1, #96	; 0x60
   131c0:	moveq	r0, r2
   131c4:	sub	sp, fp, #24
   131c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131cc:	movw	r1, #21243	; 0x52fb
   131d0:	movt	r1, #1
   131d4:	movw	r0, #21247	; 0x52ff
   131d8:	movt	r0, #1
   131dc:	cmp	r4, #9
   131e0:	moveq	r0, r1
   131e4:	sub	sp, fp, #24
   131e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131ec:	push	{r4, r5, r6, r7, fp, lr}
   131f0:	add	fp, sp, #16
   131f4:	sub	sp, sp, #16
   131f8:	mov	r4, r3
   131fc:	mov	r5, r2
   13200:	mov	r7, r1
   13204:	mov	r6, r0
   13208:	mov	r0, r1
   1320c:	bl	14750 <__assert_fail@plt+0x3714>
   13210:	ldrb	r1, [r6]
   13214:	cmp	r0, #0
   13218:	andne	r1, r1, #223	; 0xdf
   1321c:	mov	r0, #0
   13220:	cmp	r1, r7
   13224:	bne	1325c <__assert_fail@plt+0x2220>
   13228:	cmp	r7, #0
   1322c:	beq	13264 <__assert_fail@plt+0x2228>
   13230:	ldr	r0, [fp, #20]
   13234:	ldr	r1, [fp, #16]
   13238:	ldr	r2, [fp, #12]
   1323c:	ldr	r3, [fp, #8]
   13240:	str	r2, [sp]
   13244:	str	r1, [sp, #4]
   13248:	str	r0, [sp, #8]
   1324c:	mov	r0, r6
   13250:	mov	r1, r5
   13254:	mov	r2, r4
   13258:	bl	13270 <__assert_fail@plt+0x2234>
   1325c:	sub	sp, fp, #16
   13260:	pop	{r4, r5, r6, r7, fp, pc}
   13264:	mov	r0, #1
   13268:	sub	sp, fp, #16
   1326c:	pop	{r4, r5, r6, r7, fp, pc}
   13270:	push	{r4, r5, r6, r7, fp, lr}
   13274:	add	fp, sp, #16
   13278:	sub	sp, sp, #8
   1327c:	mov	r4, r3
   13280:	mov	r5, r2
   13284:	mov	r7, r1
   13288:	mov	r6, r0
   1328c:	mov	r0, r1
   13290:	bl	14750 <__assert_fail@plt+0x3714>
   13294:	ldrb	r1, [r6, #1]
   13298:	cmp	r0, #0
   1329c:	andne	r1, r1, #223	; 0xdf
   132a0:	mov	r0, #0
   132a4:	cmp	r1, r7
   132a8:	bne	132d8 <__assert_fail@plt+0x229c>
   132ac:	cmp	r7, #0
   132b0:	beq	132e0 <__assert_fail@plt+0x22a4>
   132b4:	ldr	r0, [fp, #16]
   132b8:	ldr	r1, [fp, #12]
   132bc:	ldr	r3, [fp, #8]
   132c0:	str	r1, [sp]
   132c4:	str	r0, [sp, #4]
   132c8:	mov	r0, r6
   132cc:	mov	r1, r5
   132d0:	mov	r2, r4
   132d4:	bl	132ec <__assert_fail@plt+0x22b0>
   132d8:	sub	sp, fp, #16
   132dc:	pop	{r4, r5, r6, r7, fp, pc}
   132e0:	mov	r0, #1
   132e4:	sub	sp, fp, #16
   132e8:	pop	{r4, r5, r6, r7, fp, pc}
   132ec:	push	{r4, r5, r6, r7, fp, lr}
   132f0:	add	fp, sp, #16
   132f4:	sub	sp, sp, #8
   132f8:	mov	r4, r3
   132fc:	mov	r5, r2
   13300:	mov	r7, r1
   13304:	mov	r6, r0
   13308:	mov	r0, r1
   1330c:	bl	14750 <__assert_fail@plt+0x3714>
   13310:	ldrb	r1, [r6, #2]
   13314:	cmp	r0, #0
   13318:	andne	r1, r1, #223	; 0xdf
   1331c:	mov	r0, #0
   13320:	cmp	r1, r7
   13324:	bne	1334c <__assert_fail@plt+0x2310>
   13328:	cmp	r7, #0
   1332c:	beq	13354 <__assert_fail@plt+0x2318>
   13330:	ldr	r0, [fp, #12]
   13334:	ldr	r3, [fp, #8]
   13338:	str	r0, [sp]
   1333c:	mov	r0, r6
   13340:	mov	r1, r5
   13344:	mov	r2, r4
   13348:	bl	13360 <__assert_fail@plt+0x2324>
   1334c:	sub	sp, fp, #16
   13350:	pop	{r4, r5, r6, r7, fp, pc}
   13354:	mov	r0, #1
   13358:	sub	sp, fp, #16
   1335c:	pop	{r4, r5, r6, r7, fp, pc}
   13360:	push	{r4, r5, r6, r7, fp, lr}
   13364:	add	fp, sp, #16
   13368:	mov	r4, r3
   1336c:	mov	r5, r2
   13370:	mov	r7, r1
   13374:	mov	r6, r0
   13378:	mov	r0, r1
   1337c:	bl	14750 <__assert_fail@plt+0x3714>
   13380:	ldrb	r1, [r6, #3]
   13384:	ldr	r3, [fp, #8]
   13388:	cmp	r0, #0
   1338c:	andne	r1, r1, #223	; 0xdf
   13390:	mov	r0, #0
   13394:	cmp	r1, r7
   13398:	bne	133bc <__assert_fail@plt+0x2380>
   1339c:	cmp	r7, #0
   133a0:	beq	133b8 <__assert_fail@plt+0x237c>
   133a4:	mov	r0, r6
   133a8:	mov	r1, r5
   133ac:	mov	r2, r4
   133b0:	pop	{r4, r5, r6, r7, fp, lr}
   133b4:	b	133c0 <__assert_fail@plt+0x2384>
   133b8:	mov	r0, #1
   133bc:	pop	{r4, r5, r6, r7, fp, pc}
   133c0:	push	{r4, r5, r6, r7, fp, lr}
   133c4:	add	fp, sp, #16
   133c8:	mov	r4, r3
   133cc:	mov	r5, r2
   133d0:	mov	r7, r1
   133d4:	mov	r6, r0
   133d8:	mov	r0, r1
   133dc:	bl	14750 <__assert_fail@plt+0x3714>
   133e0:	ldrb	r1, [r6, #4]
   133e4:	cmp	r0, #0
   133e8:	andne	r1, r1, #223	; 0xdf
   133ec:	mov	r0, #0
   133f0:	cmp	r1, r7
   133f4:	bne	13418 <__assert_fail@plt+0x23dc>
   133f8:	cmp	r7, #0
   133fc:	beq	13414 <__assert_fail@plt+0x23d8>
   13400:	mov	r0, r6
   13404:	mov	r1, r5
   13408:	mov	r2, r4
   1340c:	pop	{r4, r5, r6, r7, fp, lr}
   13410:	b	1341c <__assert_fail@plt+0x23e0>
   13414:	mov	r0, #1
   13418:	pop	{r4, r5, r6, r7, fp, pc}
   1341c:	push	{r4, r5, r6, sl, fp, lr}
   13420:	add	fp, sp, #16
   13424:	mov	r4, r2
   13428:	mov	r6, r1
   1342c:	mov	r5, r0
   13430:	mov	r0, r1
   13434:	bl	14750 <__assert_fail@plt+0x3714>
   13438:	ldrb	r1, [r5, #5]
   1343c:	cmp	r0, #0
   13440:	andne	r1, r1, #223	; 0xdf
   13444:	mov	r0, #0
   13448:	cmp	r1, r6
   1344c:	bne	1346c <__assert_fail@plt+0x2430>
   13450:	cmp	r6, #0
   13454:	beq	13468 <__assert_fail@plt+0x242c>
   13458:	mov	r0, r5
   1345c:	mov	r1, r4
   13460:	pop	{r4, r5, r6, sl, fp, lr}
   13464:	b	13470 <__assert_fail@plt+0x2434>
   13468:	mov	r0, #1
   1346c:	pop	{r4, r5, r6, sl, fp, pc}
   13470:	push	{r4, r5, fp, lr}
   13474:	add	fp, sp, #8
   13478:	mov	r5, r1
   1347c:	mov	r4, r0
   13480:	mov	r0, r1
   13484:	bl	14750 <__assert_fail@plt+0x3714>
   13488:	ldrb	r1, [r4, #6]
   1348c:	cmp	r0, #0
   13490:	andne	r1, r1, #223	; 0xdf
   13494:	mov	r0, #0
   13498:	cmp	r1, r5
   1349c:	popne	{r4, r5, fp, pc}
   134a0:	cmp	r5, #0
   134a4:	beq	134b4 <__assert_fail@plt+0x2478>
   134a8:	mov	r0, r4
   134ac:	pop	{r4, r5, fp, lr}
   134b0:	b	134bc <__assert_fail@plt+0x2480>
   134b4:	mov	r0, #1
   134b8:	pop	{r4, r5, fp, pc}
   134bc:	push	{r4, sl, fp, lr}
   134c0:	add	fp, sp, #8
   134c4:	mov	r4, r0
   134c8:	mov	r0, #0
   134cc:	bl	14750 <__assert_fail@plt+0x3714>
   134d0:	ldrb	r1, [r4, #7]
   134d4:	cmp	r0, #0
   134d8:	beq	134ec <__assert_fail@plt+0x24b0>
   134dc:	tst	r1, #223	; 0xdf
   134e0:	bne	134f4 <__assert_fail@plt+0x24b8>
   134e4:	mov	r0, #1
   134e8:	pop	{r4, sl, fp, pc}
   134ec:	cmp	r1, #0
   134f0:	beq	134e4 <__assert_fail@plt+0x24a8>
   134f4:	mov	r0, #0
   134f8:	pop	{r4, sl, fp, pc}
   134fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13500:	add	fp, sp, #24
   13504:	sub	sp, sp, #32
   13508:	mov	r4, r2
   1350c:	mov	r8, r0
   13510:	ldr	r6, [fp, #12]
   13514:	ldr	r7, [fp, #8]
   13518:	cmp	r1, #0
   1351c:	beq	13544 <__assert_fail@plt+0x2508>
   13520:	mov	r5, r1
   13524:	str	r4, [sp]
   13528:	str	r3, [sp, #4]
   1352c:	movw	r2, #21348	; 0x5364
   13530:	movt	r2, #1
   13534:	mov	r0, r8
   13538:	mov	r1, #1
   1353c:	mov	r3, r5
   13540:	b	1355c <__assert_fail@plt+0x2520>
   13544:	str	r3, [sp]
   13548:	movw	r2, #21360	; 0x5370
   1354c:	movt	r2, #1
   13550:	mov	r0, r8
   13554:	mov	r1, #1
   13558:	mov	r3, r4
   1355c:	bl	10fc4 <__fprintf_chk@plt>
   13560:	movw	r1, #21367	; 0x5377
   13564:	movt	r1, #1
   13568:	mov	r0, #0
   1356c:	mov	r2, #5
   13570:	bl	10e5c <dcgettext@plt>
   13574:	mov	r3, r0
   13578:	movw	r0, #2022	; 0x7e6
   1357c:	str	r0, [sp]
   13580:	movw	r2, #22085	; 0x5645
   13584:	movt	r2, #1
   13588:	mov	r0, r8
   1358c:	mov	r1, #1
   13590:	bl	10fc4 <__fprintf_chk@plt>
   13594:	movw	r4, #20240	; 0x4f10
   13598:	movt	r4, #1
   1359c:	mov	r0, r4
   135a0:	mov	r1, r8
   135a4:	bl	10df0 <fputs_unlocked@plt>
   135a8:	movw	r1, #21371	; 0x537b
   135ac:	movt	r1, #1
   135b0:	mov	r0, #0
   135b4:	mov	r2, #5
   135b8:	bl	10e5c <dcgettext@plt>
   135bc:	mov	r2, r0
   135c0:	movw	r3, #21542	; 0x5426
   135c4:	movt	r3, #1
   135c8:	mov	r0, r8
   135cc:	mov	r1, #1
   135d0:	bl	10fc4 <__fprintf_chk@plt>
   135d4:	mov	r0, r4
   135d8:	mov	r1, r8
   135dc:	bl	10df0 <fputs_unlocked@plt>
   135e0:	cmp	r6, #9
   135e4:	bhi	13620 <__assert_fail@plt+0x25e4>
   135e8:	add	r0, pc, #0
   135ec:	ldr	pc, [r0, r6, lsl #2]
   135f0:	andeq	r3, r1, r8, lsl r6
   135f4:	andeq	r3, r1, ip, lsr #12
   135f8:	andeq	r3, r1, ip, asr r6
   135fc:	andeq	r3, r1, r4, lsl #13
   13600:	andeq	r3, r1, ip, lsr #13
   13604:	ldrdeq	r3, [r1], -r4
   13608:	strdeq	r3, [r1], -ip
   1360c:	andeq	r3, r1, r4, lsr r7
   13610:	ldrdeq	r3, [r1], -r4
   13614:	andeq	r3, r1, ip, ror r7
   13618:	sub	sp, fp, #24
   1361c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13620:	movw	r1, #21895	; 0x5587
   13624:	movt	r1, #1
   13628:	b	13784 <__assert_fail@plt+0x2748>
   1362c:	movw	r1, #21576	; 0x5448
   13630:	movt	r1, #1
   13634:	mov	r0, #0
   13638:	mov	r2, #5
   1363c:	bl	10e5c <dcgettext@plt>
   13640:	mov	r2, r0
   13644:	ldr	r3, [r7]
   13648:	mov	r0, r8
   1364c:	mov	r1, #1
   13650:	sub	sp, fp, #24
   13654:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13658:	b	10fc4 <__fprintf_chk@plt>
   1365c:	movw	r1, #21592	; 0x5458
   13660:	movt	r1, #1
   13664:	mov	r0, #0
   13668:	mov	r2, #5
   1366c:	bl	10e5c <dcgettext@plt>
   13670:	mov	r2, r0
   13674:	ldr	r3, [r7]
   13678:	ldr	r0, [r7, #4]
   1367c:	str	r0, [sp]
   13680:	b	13770 <__assert_fail@plt+0x2734>
   13684:	movw	r1, #21615	; 0x546f
   13688:	movt	r1, #1
   1368c:	mov	r0, #0
   13690:	mov	r2, #5
   13694:	bl	10e5c <dcgettext@plt>
   13698:	mov	r2, r0
   1369c:	ldr	r3, [r7]
   136a0:	ldmib	r7, {r0, r1}
   136a4:	stm	sp, {r0, r1}
   136a8:	b	13770 <__assert_fail@plt+0x2734>
   136ac:	movw	r1, #21643	; 0x548b
   136b0:	movt	r1, #1
   136b4:	mov	r0, #0
   136b8:	mov	r2, #5
   136bc:	bl	10e5c <dcgettext@plt>
   136c0:	mov	r2, r0
   136c4:	ldr	r3, [r7]
   136c8:	ldmib	r7, {r0, r1, r7}
   136cc:	stm	sp, {r0, r1, r7}
   136d0:	b	13770 <__assert_fail@plt+0x2734>
   136d4:	movw	r1, #21675	; 0x54ab
   136d8:	movt	r1, #1
   136dc:	mov	r0, #0
   136e0:	mov	r2, #5
   136e4:	bl	10e5c <dcgettext@plt>
   136e8:	mov	r2, r0
   136ec:	ldr	r3, [r7]
   136f0:	ldmib	r7, {r0, r1, r6, r7}
   136f4:	stm	sp, {r0, r1, r6, r7}
   136f8:	b	13770 <__assert_fail@plt+0x2734>
   136fc:	movw	r1, #21711	; 0x54cf
   13700:	movt	r1, #1
   13704:	mov	r0, #0
   13708:	mov	r2, #5
   1370c:	bl	10e5c <dcgettext@plt>
   13710:	mov	r2, r0
   13714:	ldr	r3, [r7]
   13718:	ldmib	r7, {r0, r1, r6}
   1371c:	ldr	r5, [r7, #16]
   13720:	ldr	r7, [r7, #20]
   13724:	stm	sp, {r0, r1, r6}
   13728:	str	r5, [sp, #12]
   1372c:	str	r7, [sp, #16]
   13730:	b	13770 <__assert_fail@plt+0x2734>
   13734:	movw	r1, #21751	; 0x54f7
   13738:	movt	r1, #1
   1373c:	mov	r0, #0
   13740:	mov	r2, #5
   13744:	bl	10e5c <dcgettext@plt>
   13748:	mov	r2, r0
   1374c:	ldr	r3, [r7]
   13750:	ldmib	r7, {r0, r1, r6}
   13754:	ldr	r5, [r7, #16]
   13758:	ldr	r4, [r7, #20]
   1375c:	ldr	r7, [r7, #24]
   13760:	stm	sp, {r0, r1, r6}
   13764:	str	r5, [sp, #12]
   13768:	str	r4, [sp, #16]
   1376c:	str	r7, [sp, #20]
   13770:	mov	r0, r8
   13774:	mov	r1, #1
   13778:	b	13824 <__assert_fail@plt+0x27e8>
   1377c:	movw	r1, #21843	; 0x5553
   13780:	movt	r1, #1
   13784:	mov	r0, #0
   13788:	mov	r2, #5
   1378c:	bl	10e5c <dcgettext@plt>
   13790:	mov	ip, r0
   13794:	ldr	r3, [r7]
   13798:	ldr	r0, [r7, #4]
   1379c:	ldr	r1, [r7, #8]
   137a0:	ldr	r6, [r7, #12]
   137a4:	ldr	r5, [r7, #16]
   137a8:	ldr	r4, [r7, #20]
   137ac:	ldr	r2, [r7, #24]
   137b0:	ldr	lr, [r7, #28]
   137b4:	ldr	r7, [r7, #32]
   137b8:	stm	sp, {r0, r1, r6}
   137bc:	str	r5, [sp, #12]
   137c0:	str	r4, [sp, #16]
   137c4:	str	r2, [sp, #20]
   137c8:	str	lr, [sp, #24]
   137cc:	str	r7, [sp, #28]
   137d0:	b	13818 <__assert_fail@plt+0x27dc>
   137d4:	movw	r1, #21795	; 0x5523
   137d8:	movt	r1, #1
   137dc:	mov	r0, #0
   137e0:	mov	r2, #5
   137e4:	bl	10e5c <dcgettext@plt>
   137e8:	mov	ip, r0
   137ec:	ldr	r3, [r7]
   137f0:	ldmib	r7, {r0, r1, r6}
   137f4:	ldr	r5, [r7, #16]
   137f8:	ldr	r4, [r7, #20]
   137fc:	ldr	r2, [r7, #24]
   13800:	ldr	r7, [r7, #28]
   13804:	stm	sp, {r0, r1, r6}
   13808:	str	r5, [sp, #12]
   1380c:	str	r4, [sp, #16]
   13810:	str	r2, [sp, #20]
   13814:	str	r7, [sp, #24]
   13818:	mov	r0, r8
   1381c:	mov	r1, #1
   13820:	mov	r2, ip
   13824:	bl	10fc4 <__fprintf_chk@plt>
   13828:	sub	sp, fp, #24
   1382c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13830:	push	{r4, sl, fp, lr}
   13834:	add	fp, sp, #8
   13838:	sub	sp, sp, #8
   1383c:	mov	lr, #0
   13840:	ldr	ip, [fp, #8]
   13844:	ldr	r4, [ip, lr, lsl #2]
   13848:	add	lr, lr, #1
   1384c:	cmp	r4, #0
   13850:	bne	13844 <__assert_fail@plt+0x2808>
   13854:	sub	r4, lr, #1
   13858:	str	ip, [sp]
   1385c:	str	r4, [sp, #4]
   13860:	bl	134fc <__assert_fail@plt+0x24c0>
   13864:	sub	sp, fp, #8
   13868:	pop	{r4, sl, fp, pc}
   1386c:	push	{r4, r5, fp, lr}
   13870:	add	fp, sp, #8
   13874:	sub	sp, sp, #48	; 0x30
   13878:	mov	ip, #0
   1387c:	ldr	r4, [fp, #8]
   13880:	add	lr, sp, #8
   13884:	ldr	r5, [r4]
   13888:	str	r5, [lr, ip, lsl #2]
   1388c:	cmp	r5, #0
   13890:	beq	138a8 <__assert_fail@plt+0x286c>
   13894:	add	ip, ip, #1
   13898:	add	r4, r4, #4
   1389c:	cmp	ip, #10
   138a0:	bne	13884 <__assert_fail@plt+0x2848>
   138a4:	mov	ip, #10
   138a8:	str	lr, [sp]
   138ac:	str	ip, [sp, #4]
   138b0:	bl	134fc <__assert_fail@plt+0x24c0>
   138b4:	sub	sp, fp, #8
   138b8:	pop	{r4, r5, fp, pc}
   138bc:	push	{fp, lr}
   138c0:	mov	fp, sp
   138c4:	sub	sp, sp, #8
   138c8:	add	ip, fp, #8
   138cc:	str	ip, [sp, #4]
   138d0:	str	ip, [sp]
   138d4:	bl	1386c <__assert_fail@plt+0x2830>
   138d8:	mov	sp, fp
   138dc:	pop	{fp, pc}
   138e0:	push	{fp, lr}
   138e4:	mov	fp, sp
   138e8:	movw	r0, #24900	; 0x6144
   138ec:	movt	r0, #2
   138f0:	ldr	r1, [r0]
   138f4:	movw	r0, #20240	; 0x4f10
   138f8:	movt	r0, #1
   138fc:	bl	10df0 <fputs_unlocked@plt>
   13900:	movw	r1, #21955	; 0x55c3
   13904:	movt	r1, #1
   13908:	mov	r0, #0
   1390c:	mov	r2, #5
   13910:	bl	10e5c <dcgettext@plt>
   13914:	mov	r1, r0
   13918:	movw	r2, #21975	; 0x55d7
   1391c:	movt	r2, #1
   13920:	mov	r0, #1
   13924:	bl	10fa0 <__printf_chk@plt>
   13928:	movw	r1, #21997	; 0x55ed
   1392c:	movt	r1, #1
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	bl	10e5c <dcgettext@plt>
   1393c:	mov	r1, r0
   13940:	movw	r2, #20488	; 0x5008
   13944:	movt	r2, #1
   13948:	movw	r3, #20675	; 0x50c3
   1394c:	movt	r3, #1
   13950:	mov	r0, #1
   13954:	bl	10fa0 <__printf_chk@plt>
   13958:	movw	r1, #22017	; 0x5601
   1395c:	movt	r1, #1
   13960:	mov	r0, #0
   13964:	mov	r2, #5
   13968:	bl	10e5c <dcgettext@plt>
   1396c:	mov	r1, r0
   13970:	movw	r2, #22056	; 0x5628
   13974:	movt	r2, #1
   13978:	mov	r0, #1
   1397c:	pop	{fp, lr}
   13980:	b	10fa0 <__printf_chk@plt>
   13984:	b	13988 <__assert_fail@plt+0x294c>
   13988:	push	{r4, r5, r6, sl, fp, lr}
   1398c:	add	fp, sp, #16
   13990:	mov	r4, r2
   13994:	mov	r5, r1
   13998:	mov	r6, r0
   1399c:	bl	14b08 <__assert_fail@plt+0x3acc>
   139a0:	cmp	r0, #0
   139a4:	popne	{r4, r5, r6, sl, fp, pc}
   139a8:	cmp	r6, #0
   139ac:	beq	139c0 <__assert_fail@plt+0x2984>
   139b0:	cmp	r5, #0
   139b4:	cmpne	r4, #0
   139b8:	bne	139c0 <__assert_fail@plt+0x2984>
   139bc:	pop	{r4, r5, r6, sl, fp, pc}
   139c0:	bl	13d4c <__assert_fail@plt+0x2d10>
   139c4:	push	{fp, lr}
   139c8:	mov	fp, sp
   139cc:	bl	14418 <__assert_fail@plt+0x33dc>
   139d0:	pop	{fp, lr}
   139d4:	b	139d8 <__assert_fail@plt+0x299c>
   139d8:	cmp	r0, #0
   139dc:	bxne	lr
   139e0:	push	{fp, lr}
   139e4:	mov	fp, sp
   139e8:	bl	13d4c <__assert_fail@plt+0x2d10>
   139ec:	push	{fp, lr}
   139f0:	mov	fp, sp
   139f4:	bl	14a38 <__assert_fail@plt+0x39fc>
   139f8:	pop	{fp, lr}
   139fc:	b	139d8 <__assert_fail@plt+0x299c>
   13a00:	b	139c4 <__assert_fail@plt+0x2988>
   13a04:	push	{r4, r5, fp, lr}
   13a08:	add	fp, sp, #8
   13a0c:	mov	r4, r1
   13a10:	mov	r5, r0
   13a14:	bl	14448 <__assert_fail@plt+0x340c>
   13a18:	cmp	r0, #0
   13a1c:	popne	{r4, r5, fp, pc}
   13a20:	cmp	r5, #0
   13a24:	beq	13a34 <__assert_fail@plt+0x29f8>
   13a28:	cmp	r4, #0
   13a2c:	bne	13a34 <__assert_fail@plt+0x29f8>
   13a30:	pop	{r4, r5, fp, pc}
   13a34:	bl	13d4c <__assert_fail@plt+0x2d10>
   13a38:	push	{fp, lr}
   13a3c:	mov	fp, sp
   13a40:	bl	14a3c <__assert_fail@plt+0x3a00>
   13a44:	pop	{fp, lr}
   13a48:	b	139d8 <__assert_fail@plt+0x299c>
   13a4c:	push	{fp, lr}
   13a50:	mov	fp, sp
   13a54:	bl	14a4c <__assert_fail@plt+0x3a10>
   13a58:	pop	{fp, lr}
   13a5c:	b	139d8 <__assert_fail@plt+0x299c>
   13a60:	mov	r2, r1
   13a64:	mov	r1, r0
   13a68:	mov	r0, #0
   13a6c:	b	13988 <__assert_fail@plt+0x294c>
   13a70:	mov	r2, r1
   13a74:	mov	r1, r0
   13a78:	mov	r0, #0
   13a7c:	b	13a4c <__assert_fail@plt+0x2a10>
   13a80:	mov	r2, #1
   13a84:	b	13a88 <__assert_fail@plt+0x2a4c>
   13a88:	push	{r4, r5, fp, lr}
   13a8c:	add	fp, sp, #8
   13a90:	mov	r4, r1
   13a94:	ldr	r5, [r1]
   13a98:	cmp	r0, #0
   13a9c:	beq	13ab4 <__assert_fail@plt+0x2a78>
   13aa0:	mov	r1, #1
   13aa4:	add	r1, r1, r5, lsr #1
   13aa8:	adds	r5, r5, r1
   13aac:	bcc	13acc <__assert_fail@plt+0x2a90>
   13ab0:	bl	13d4c <__assert_fail@plt+0x2d10>
   13ab4:	cmp	r5, #0
   13ab8:	bne	13acc <__assert_fail@plt+0x2a90>
   13abc:	mov	r1, #64	; 0x40
   13ac0:	udiv	r5, r1, r2
   13ac4:	cmp	r2, #64	; 0x40
   13ac8:	addhi	r5, r5, #1
   13acc:	mov	r1, r5
   13ad0:	bl	13988 <__assert_fail@plt+0x294c>
   13ad4:	str	r5, [r4]
   13ad8:	pop	{r4, r5, fp, pc}
   13adc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ae0:	add	fp, sp, #24
   13ae4:	mov	r8, r1
   13ae8:	ldr	r6, [r1]
   13aec:	add	r1, r6, r6, asr #1
   13af0:	cmp	r1, r6
   13af4:	mvnvs	r1, #-2147483648	; 0x80000000
   13af8:	cmp	r1, r3
   13afc:	mov	r5, r1
   13b00:	movgt	r5, r3
   13b04:	cmn	r3, #1
   13b08:	movle	r5, r1
   13b0c:	ldr	r4, [fp, #8]
   13b10:	cmn	r4, #1
   13b14:	ble	13b3c <__assert_fail@plt+0x2b00>
   13b18:	cmp	r4, #0
   13b1c:	beq	13b90 <__assert_fail@plt+0x2b54>
   13b20:	cmn	r5, #1
   13b24:	ble	13b64 <__assert_fail@plt+0x2b28>
   13b28:	mvn	r7, #-2147483648	; 0x80000000
   13b2c:	udiv	r1, r7, r4
   13b30:	cmp	r1, r5
   13b34:	bge	13b90 <__assert_fail@plt+0x2b54>
   13b38:	b	13ba0 <__assert_fail@plt+0x2b64>
   13b3c:	cmn	r5, #1
   13b40:	ble	13b80 <__assert_fail@plt+0x2b44>
   13b44:	cmn	r4, #1
   13b48:	beq	13b90 <__assert_fail@plt+0x2b54>
   13b4c:	mov	r1, #-2147483648	; 0x80000000
   13b50:	sdiv	r1, r1, r4
   13b54:	mvn	r7, #-2147483648	; 0x80000000
   13b58:	cmp	r1, r5
   13b5c:	bge	13b90 <__assert_fail@plt+0x2b54>
   13b60:	b	13ba0 <__assert_fail@plt+0x2b64>
   13b64:	beq	13b90 <__assert_fail@plt+0x2b54>
   13b68:	mov	r1, #-2147483648	; 0x80000000
   13b6c:	sdiv	r1, r1, r5
   13b70:	mvn	r7, #-2147483648	; 0x80000000
   13b74:	cmp	r1, r4
   13b78:	bge	13b90 <__assert_fail@plt+0x2b54>
   13b7c:	b	13ba0 <__assert_fail@plt+0x2b64>
   13b80:	mvn	r7, #-2147483648	; 0x80000000
   13b84:	sdiv	r1, r7, r4
   13b88:	cmp	r5, r1
   13b8c:	blt	13ba0 <__assert_fail@plt+0x2b64>
   13b90:	mul	r1, r5, r4
   13b94:	mov	r7, #64	; 0x40
   13b98:	cmp	r1, #63	; 0x3f
   13b9c:	bgt	13ba8 <__assert_fail@plt+0x2b6c>
   13ba0:	sdiv	r5, r7, r4
   13ba4:	mul	r1, r5, r4
   13ba8:	cmp	r0, #0
   13bac:	moveq	r7, #0
   13bb0:	streq	r7, [r8]
   13bb4:	sub	r7, r5, r6
   13bb8:	cmp	r7, r2
   13bbc:	bge	13c68 <__assert_fail@plt+0x2c2c>
   13bc0:	add	r5, r6, r2
   13bc4:	mov	r1, #0
   13bc8:	cmp	r5, r3
   13bcc:	mov	r2, #0
   13bd0:	movwgt	r2, #1
   13bd4:	cmn	r3, #1
   13bd8:	movwgt	r1, #1
   13bdc:	cmp	r5, r6
   13be0:	bvs	13c50 <__assert_fail@plt+0x2c14>
   13be4:	ands	r1, r1, r2
   13be8:	bne	13c50 <__assert_fail@plt+0x2c14>
   13bec:	cmn	r4, #1
   13bf0:	ble	13c18 <__assert_fail@plt+0x2bdc>
   13bf4:	cmp	r4, #0
   13bf8:	beq	13c64 <__assert_fail@plt+0x2c28>
   13bfc:	cmn	r5, #1
   13c00:	ble	13c3c <__assert_fail@plt+0x2c00>
   13c04:	mvn	r1, #-2147483648	; 0x80000000
   13c08:	udiv	r1, r1, r4
   13c0c:	cmp	r1, r5
   13c10:	bge	13c64 <__assert_fail@plt+0x2c28>
   13c14:	b	13c50 <__assert_fail@plt+0x2c14>
   13c18:	cmn	r5, #1
   13c1c:	ble	13c54 <__assert_fail@plt+0x2c18>
   13c20:	cmn	r4, #1
   13c24:	beq	13c64 <__assert_fail@plt+0x2c28>
   13c28:	mov	r1, #-2147483648	; 0x80000000
   13c2c:	sdiv	r1, r1, r4
   13c30:	cmp	r1, r5
   13c34:	bge	13c64 <__assert_fail@plt+0x2c28>
   13c38:	b	13c50 <__assert_fail@plt+0x2c14>
   13c3c:	beq	13c64 <__assert_fail@plt+0x2c28>
   13c40:	mov	r1, #-2147483648	; 0x80000000
   13c44:	sdiv	r1, r1, r5
   13c48:	cmp	r1, r4
   13c4c:	bge	13c64 <__assert_fail@plt+0x2c28>
   13c50:	bl	13d4c <__assert_fail@plt+0x2d10>
   13c54:	mvn	r1, #-2147483648	; 0x80000000
   13c58:	sdiv	r1, r1, r4
   13c5c:	cmp	r5, r1
   13c60:	blt	13c50 <__assert_fail@plt+0x2c14>
   13c64:	mul	r1, r5, r4
   13c68:	bl	13a04 <__assert_fail@plt+0x29c8>
   13c6c:	str	r5, [r8]
   13c70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c74:	mov	r1, #1
   13c78:	b	13c7c <__assert_fail@plt+0x2c40>
   13c7c:	push	{fp, lr}
   13c80:	mov	fp, sp
   13c84:	bl	143c4 <__assert_fail@plt+0x3388>
   13c88:	pop	{fp, lr}
   13c8c:	b	139d8 <__assert_fail@plt+0x299c>
   13c90:	mov	r1, #1
   13c94:	b	13c98 <__assert_fail@plt+0x2c5c>
   13c98:	push	{fp, lr}
   13c9c:	mov	fp, sp
   13ca0:	bl	14a48 <__assert_fail@plt+0x3a0c>
   13ca4:	pop	{fp, lr}
   13ca8:	b	139d8 <__assert_fail@plt+0x299c>
   13cac:	push	{r4, r5, fp, lr}
   13cb0:	add	fp, sp, #8
   13cb4:	mov	r4, r1
   13cb8:	mov	r5, r0
   13cbc:	mov	r0, r1
   13cc0:	bl	139c4 <__assert_fail@plt+0x2988>
   13cc4:	mov	r1, r5
   13cc8:	mov	r2, r4
   13ccc:	pop	{r4, r5, fp, lr}
   13cd0:	b	10e38 <memcpy@plt>
   13cd4:	push	{r4, r5, fp, lr}
   13cd8:	add	fp, sp, #8
   13cdc:	mov	r4, r1
   13ce0:	mov	r5, r0
   13ce4:	mov	r0, r1
   13ce8:	bl	139ec <__assert_fail@plt+0x29b0>
   13cec:	mov	r1, r5
   13cf0:	mov	r2, r4
   13cf4:	pop	{r4, r5, fp, lr}
   13cf8:	b	10e38 <memcpy@plt>
   13cfc:	push	{r4, r5, fp, lr}
   13d00:	add	fp, sp, #8
   13d04:	mov	r4, r1
   13d08:	mov	r5, r0
   13d0c:	add	r0, r1, #1
   13d10:	bl	139ec <__assert_fail@plt+0x29b0>
   13d14:	mov	r1, #0
   13d18:	strb	r1, [r0, r4]
   13d1c:	mov	r1, r5
   13d20:	mov	r2, r4
   13d24:	pop	{r4, r5, fp, lr}
   13d28:	b	10e38 <memcpy@plt>
   13d2c:	push	{r4, sl, fp, lr}
   13d30:	add	fp, sp, #8
   13d34:	mov	r4, r0
   13d38:	bl	10f64 <strlen@plt>
   13d3c:	add	r1, r0, #1
   13d40:	mov	r0, r4
   13d44:	pop	{r4, sl, fp, lr}
   13d48:	b	13cac <__assert_fail@plt+0x2c70>
   13d4c:	push	{fp, lr}
   13d50:	mov	fp, sp
   13d54:	movw	r0, #24812	; 0x60ec
   13d58:	movt	r0, #2
   13d5c:	ldr	r4, [r0]
   13d60:	movw	r1, #22132	; 0x5674
   13d64:	movt	r1, #1
   13d68:	mov	r0, #0
   13d6c:	mov	r2, #5
   13d70:	bl	10e5c <dcgettext@plt>
   13d74:	mov	r3, r0
   13d78:	movw	r2, #21063	; 0x5247
   13d7c:	movt	r2, #1
   13d80:	mov	r0, r4
   13d84:	mov	r1, #0
   13d88:	bl	10ee0 <error@plt>
   13d8c:	bl	11030 <abort@plt>
   13d90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d94:	add	fp, sp, #24
   13d98:	sub	sp, sp, #16
   13d9c:	mov	r5, r3
   13da0:	mov	r6, r2
   13da4:	mov	r2, r1
   13da8:	mov	r8, r0
   13dac:	ldr	r0, [fp, #16]
   13db0:	str	r0, [sp]
   13db4:	add	r3, sp, #8
   13db8:	mov	r0, r8
   13dbc:	mov	r1, #0
   13dc0:	bl	13e88 <__assert_fail@plt+0x2e4c>
   13dc4:	cmp	r0, #0
   13dc8:	bne	13e58 <__assert_fail@plt+0x2e1c>
   13dcc:	ldr	r7, [sp, #8]
   13dd0:	ldr	r4, [sp, #12]
   13dd4:	subs	r0, r7, r6
   13dd8:	sbcs	r0, r4, r5
   13ddc:	bcc	13e00 <__assert_fail@plt+0x2dc4>
   13de0:	ldr	r0, [fp, #12]
   13de4:	ldr	r1, [fp, #8]
   13de8:	subs	r1, r1, r7
   13dec:	sbcs	r0, r0, r4
   13df0:	ldrcs	r0, [sp, #8]
   13df4:	ldrcs	r1, [sp, #12]
   13df8:	subcs	sp, fp, #24
   13dfc:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e00:	bl	10f7c <__errno_location@plt>
   13e04:	subs	r1, r7, #1073741824	; 0x40000000
   13e08:	sbcs	r1, r4, #0
   13e0c:	movcc	r1, #34	; 0x22
   13e10:	movcs	r1, #75	; 0x4b
   13e14:	str	r1, [r0]
   13e18:	ldr	r5, [fp, #24]
   13e1c:	ldr	r6, [fp, #20]
   13e20:	bl	10f7c <__errno_location@plt>
   13e24:	ldr	r4, [r0]
   13e28:	mov	r0, r8
   13e2c:	bl	130e4 <__assert_fail@plt+0x20a8>
   13e30:	str	r0, [sp]
   13e34:	subs	r1, r4, #22
   13e38:	movne	r1, r4
   13e3c:	cmp	r5, #0
   13e40:	movweq	r5, #1
   13e44:	movw	r2, #21059	; 0x5243
   13e48:	movt	r2, #1
   13e4c:	mov	r0, r5
   13e50:	mov	r3, r6
   13e54:	bl	10ee0 <error@plt>
   13e58:	cmp	r0, #1
   13e5c:	beq	13e74 <__assert_fail@plt+0x2e38>
   13e60:	cmp	r0, #3
   13e64:	bne	13e18 <__assert_fail@plt+0x2ddc>
   13e68:	bl	10f7c <__errno_location@plt>
   13e6c:	mov	r1, #0
   13e70:	b	13e14 <__assert_fail@plt+0x2dd8>
   13e74:	bl	10f7c <__errno_location@plt>
   13e78:	mov	r1, #75	; 0x4b
   13e7c:	b	13e14 <__assert_fail@plt+0x2dd8>
   13e80:	mov	r1, #10
   13e84:	b	13d90 <__assert_fail@plt+0x2d54>
   13e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e8c:	add	fp, sp, #28
   13e90:	sub	sp, sp, #20
   13e94:	cmp	r2, #37	; 0x25
   13e98:	bcs	142cc <__assert_fail@plt+0x3290>
   13e9c:	mov	r5, r2
   13ea0:	mov	r6, r1
   13ea4:	mov	r4, r0
   13ea8:	str	r3, [sp, #4]
   13eac:	ldr	sl, [fp, #8]
   13eb0:	bl	10f7c <__errno_location@plt>
   13eb4:	mov	r7, r0
   13eb8:	mov	r0, #0
   13ebc:	str	r0, [r7]
   13ec0:	bl	10f34 <__ctype_b_loc@plt>
   13ec4:	ldr	r1, [r0]
   13ec8:	mov	r2, r4
   13ecc:	ldrb	r0, [r2], #1
   13ed0:	add	r3, r1, r0, lsl #1
   13ed4:	ldrb	r3, [r3, #1]
   13ed8:	tst	r3, #32
   13edc:	bne	13ecc <__assert_fail@plt+0x2e90>
   13ee0:	add	r9, sp, #16
   13ee4:	cmp	r6, #0
   13ee8:	movne	r9, r6
   13eec:	mov	r8, #4
   13ef0:	cmp	r0, #45	; 0x2d
   13ef4:	beq	142c0 <__assert_fail@plt+0x3284>
   13ef8:	mov	r0, r4
   13efc:	mov	r1, r9
   13f00:	mov	r2, r5
   13f04:	bl	10fb8 <strtoumax@plt>
   13f08:	str	r1, [sp, #12]
   13f0c:	str	r0, [sp, #8]
   13f10:	ldr	r6, [r9]
   13f14:	cmp	r6, r4
   13f18:	beq	13f40 <__assert_fail@plt+0x2f04>
   13f1c:	ldr	r0, [r7]
   13f20:	cmp	r0, #0
   13f24:	beq	13f78 <__assert_fail@plt+0x2f3c>
   13f28:	cmp	r0, #34	; 0x22
   13f2c:	bne	142c0 <__assert_fail@plt+0x3284>
   13f30:	mov	r8, #1
   13f34:	cmp	sl, #0
   13f38:	bne	13f84 <__assert_fail@plt+0x2f48>
   13f3c:	b	142b0 <__assert_fail@plt+0x3274>
   13f40:	cmp	sl, #0
   13f44:	beq	142c0 <__assert_fail@plt+0x3284>
   13f48:	ldrb	r1, [r6]
   13f4c:	cmp	r1, #0
   13f50:	beq	142c0 <__assert_fail@plt+0x3284>
   13f54:	mov	r0, sl
   13f58:	bl	10f70 <strchr@plt>
   13f5c:	cmp	r0, #0
   13f60:	beq	142c0 <__assert_fail@plt+0x3284>
   13f64:	mov	r8, #0
   13f68:	str	r8, [sp, #12]
   13f6c:	mov	r0, #1
   13f70:	str	r0, [sp, #8]
   13f74:	b	13f84 <__assert_fail@plt+0x2f48>
   13f78:	mov	r8, r0
   13f7c:	cmp	sl, #0
   13f80:	beq	142b0 <__assert_fail@plt+0x3274>
   13f84:	ldrb	r4, [r6]
   13f88:	cmp	r4, #0
   13f8c:	beq	142b0 <__assert_fail@plt+0x3274>
   13f90:	mov	r0, sl
   13f94:	mov	r1, r4
   13f98:	bl	10f70 <strchr@plt>
   13f9c:	cmp	r0, #0
   13fa0:	beq	141cc <__assert_fail@plt+0x3190>
   13fa4:	sub	r0, r4, #69	; 0x45
   13fa8:	mov	r7, #1
   13fac:	mov	r5, #1024	; 0x400
   13fb0:	cmp	r0, #47	; 0x2f
   13fb4:	bhi	140c8 <__assert_fail@plt+0x308c>
   13fb8:	add	r1, pc, #0
   13fbc:	ldr	pc, [r1, r0, lsl #2]
   13fc0:	andeq	r4, r1, r0, lsl #1
   13fc4:	andeq	r4, r1, r8, asr #1
   13fc8:	andeq	r4, r1, r0, lsl #1
   13fcc:	andeq	r4, r1, r8, asr #1
   13fd0:	andeq	r4, r1, r8, asr #1
   13fd4:	andeq	r4, r1, r8, asr #1
   13fd8:	andeq	r4, r1, r0, lsl #1
   13fdc:	andeq	r4, r1, r8, asr #1
   13fe0:	andeq	r4, r1, r0, lsl #1
   13fe4:	andeq	r4, r1, r8, asr #1
   13fe8:	andeq	r4, r1, r8, asr #1
   13fec:	andeq	r4, r1, r0, lsl #1
   13ff0:	andeq	r4, r1, r8, asr #1
   13ff4:	andeq	r4, r1, r8, asr #1
   13ff8:	andeq	r4, r1, r8, asr #1
   13ffc:	andeq	r4, r1, r0, lsl #1
   14000:	andeq	r4, r1, r8, asr #1
   14004:	andeq	r4, r1, r8, asr #1
   14008:	andeq	r4, r1, r8, asr #1
   1400c:	andeq	r4, r1, r8, asr #1
   14010:	andeq	r4, r1, r0, lsl #1
   14014:	andeq	r4, r1, r0, lsl #1
   14018:	andeq	r4, r1, r8, asr #1
   1401c:	andeq	r4, r1, r8, asr #1
   14020:	andeq	r4, r1, r8, asr #1
   14024:	andeq	r4, r1, r8, asr #1
   14028:	andeq	r4, r1, r8, asr #1
   1402c:	andeq	r4, r1, r8, asr #1
   14030:	andeq	r4, r1, r8, asr #1
   14034:	andeq	r4, r1, r8, asr #1
   14038:	andeq	r4, r1, r8, asr #1
   1403c:	andeq	r4, r1, r8, asr #1
   14040:	andeq	r4, r1, r8, asr #1
   14044:	andeq	r4, r1, r8, asr #1
   14048:	andeq	r4, r1, r0, lsl #1
   1404c:	andeq	r4, r1, r8, asr #1
   14050:	andeq	r4, r1, r8, asr #1
   14054:	andeq	r4, r1, r8, asr #1
   14058:	andeq	r4, r1, r0, lsl #1
   1405c:	andeq	r4, r1, r8, asr #1
   14060:	andeq	r4, r1, r0, lsl #1
   14064:	andeq	r4, r1, r8, asr #1
   14068:	andeq	r4, r1, r8, asr #1
   1406c:	andeq	r4, r1, r8, asr #1
   14070:	andeq	r4, r1, r8, asr #1
   14074:	andeq	r4, r1, r8, asr #1
   14078:	andeq	r4, r1, r8, asr #1
   1407c:	andeq	r4, r1, r0, lsl #1
   14080:	mov	r0, sl
   14084:	mov	r1, #48	; 0x30
   14088:	bl	10f70 <strchr@plt>
   1408c:	cmp	r0, #0
   14090:	beq	140c8 <__assert_fail@plt+0x308c>
   14094:	ldrb	r0, [r6, #1]
   14098:	cmp	r0, #66	; 0x42
   1409c:	cmpne	r0, #68	; 0x44
   140a0:	bne	140b0 <__assert_fail@plt+0x3074>
   140a4:	mov	r7, #2
   140a8:	mov	r5, #1000	; 0x3e8
   140ac:	b	140c8 <__assert_fail@plt+0x308c>
   140b0:	cmp	r0, #105	; 0x69
   140b4:	bne	140c8 <__assert_fail@plt+0x308c>
   140b8:	ldrb	r0, [r6, #2]
   140bc:	mov	r7, #1
   140c0:	cmp	r0, #66	; 0x42
   140c4:	movweq	r7, #3
   140c8:	sub	r1, r4, #66	; 0x42
   140cc:	cmp	r1, #53	; 0x35
   140d0:	bhi	141cc <__assert_fail@plt+0x3190>
   140d4:	mov	r0, #0
   140d8:	add	r2, pc, #0
   140dc:	ldr	pc, [r2, r1, lsl #2]
   140e0:	andeq	r4, r1, r4, lsr r2
   140e4:	andeq	r4, r1, ip, asr #3
   140e8:	andeq	r4, r1, ip, asr #3
   140ec:	andeq	r4, r1, r0, asr #4
   140f0:	andeq	r4, r1, ip, asr #3
   140f4:			; <UNDEFINED> instruction: 0x000141b8
   140f8:	andeq	r4, r1, ip, asr #3
   140fc:	andeq	r4, r1, ip, asr #3
   14100:	andeq	r4, r1, ip, asr #3
   14104:	andeq	r4, r1, r4, ror #3
   14108:	andeq	r4, r1, ip, asr #3
   1410c:	strdeq	r4, [r1], -r8
   14110:	andeq	r4, r1, ip, asr #3
   14114:	andeq	r4, r1, ip, asr #3
   14118:	andeq	r4, r1, r4, asr r2
   1411c:	andeq	r4, r1, ip, asr #3
   14120:	andeq	r4, r1, ip, asr #3
   14124:	andeq	r4, r1, ip, asr #3
   14128:	andeq	r4, r1, ip, lsl #4
   1412c:	andeq	r4, r1, ip, asr #3
   14130:	andeq	r4, r1, ip, asr #3
   14134:	andeq	r4, r1, ip, asr #3
   14138:	andeq	r4, r1, ip, asr #3
   1413c:	andeq	r4, r1, r8, ror #4
   14140:	andeq	r4, r1, r0, lsr #4
   14144:	andeq	r4, r1, ip, asr #3
   14148:	andeq	r4, r1, ip, asr #3
   1414c:	andeq	r4, r1, ip, asr #3
   14150:	andeq	r4, r1, ip, asr #3
   14154:	andeq	r4, r1, ip, asr #3
   14158:	andeq	r4, r1, ip, asr #3
   1415c:	andeq	r4, r1, ip, asr #3
   14160:	andeq	r4, r1, ip, ror r2
   14164:	muleq	r1, r4, r2
   14168:	andeq	r4, r1, ip, asr #3
   1416c:	andeq	r4, r1, ip, asr #3
   14170:	andeq	r4, r1, ip, asr #3
   14174:			; <UNDEFINED> instruction: 0x000141b8
   14178:	andeq	r4, r1, ip, asr #3
   1417c:	andeq	r4, r1, ip, asr #3
   14180:	andeq	r4, r1, ip, asr #3
   14184:	andeq	r4, r1, r4, ror #3
   14188:	andeq	r4, r1, ip, asr #3
   1418c:	strdeq	r4, [r1], -r8
   14190:	andeq	r4, r1, ip, asr #3
   14194:	andeq	r4, r1, ip, asr #3
   14198:	andeq	r4, r1, ip, asr #3
   1419c:	andeq	r4, r1, ip, asr #3
   141a0:	andeq	r4, r1, ip, asr #3
   141a4:	andeq	r4, r1, ip, asr #3
   141a8:	andeq	r4, r1, ip, lsl #4
   141ac:	andeq	r4, r1, ip, asr #3
   141b0:	andeq	r4, r1, ip, asr #3
   141b4:	andeq	r4, r1, r8, lsl #5
   141b8:	add	r0, sp, #8
   141bc:	mov	r1, r5
   141c0:	mov	r2, #3
   141c4:	bl	14378 <__assert_fail@plt+0x333c>
   141c8:	b	14294 <__assert_fail@plt+0x3258>
   141cc:	ldr	r0, [sp, #8]
   141d0:	ldr	r1, [sp, #12]
   141d4:	ldr	r2, [sp, #4]
   141d8:	strd	r0, [r2]
   141dc:	orr	r8, r8, #2
   141e0:	b	142c0 <__assert_fail@plt+0x3284>
   141e4:	add	r0, sp, #8
   141e8:	mov	r1, r5
   141ec:	mov	r2, #1
   141f0:	bl	14378 <__assert_fail@plt+0x333c>
   141f4:	b	14294 <__assert_fail@plt+0x3258>
   141f8:	add	r0, sp, #8
   141fc:	mov	r1, r5
   14200:	mov	r2, #2
   14204:	bl	14378 <__assert_fail@plt+0x333c>
   14208:	b	14294 <__assert_fail@plt+0x3258>
   1420c:	add	r0, sp, #8
   14210:	mov	r1, r5
   14214:	mov	r2, #4
   14218:	bl	14378 <__assert_fail@plt+0x333c>
   1421c:	b	14294 <__assert_fail@plt+0x3258>
   14220:	add	r0, sp, #8
   14224:	mov	r1, r5
   14228:	mov	r2, #7
   1422c:	bl	14378 <__assert_fail@plt+0x333c>
   14230:	b	14294 <__assert_fail@plt+0x3258>
   14234:	add	r0, sp, #8
   14238:	mov	r1, #1024	; 0x400
   1423c:	b	14290 <__assert_fail@plt+0x3254>
   14240:	add	r0, sp, #8
   14244:	mov	r1, r5
   14248:	mov	r2, #6
   1424c:	bl	14378 <__assert_fail@plt+0x333c>
   14250:	b	14294 <__assert_fail@plt+0x3258>
   14254:	add	r0, sp, #8
   14258:	mov	r1, r5
   1425c:	mov	r2, #5
   14260:	bl	14378 <__assert_fail@plt+0x333c>
   14264:	b	14294 <__assert_fail@plt+0x3258>
   14268:	add	r0, sp, #8
   1426c:	mov	r1, r5
   14270:	mov	r2, #8
   14274:	bl	14378 <__assert_fail@plt+0x333c>
   14278:	b	14294 <__assert_fail@plt+0x3258>
   1427c:	add	r0, sp, #8
   14280:	mov	r1, #512	; 0x200
   14284:	b	14290 <__assert_fail@plt+0x3254>
   14288:	add	r0, sp, #8
   1428c:	mov	r1, #2
   14290:	bl	142ec <__assert_fail@plt+0x32b0>
   14294:	ldr	r1, [r9]
   14298:	add	r2, r1, r7
   1429c:	str	r2, [r9]
   142a0:	ldrb	r1, [r1, r7]
   142a4:	orr	r8, r0, r8
   142a8:	cmp	r1, #0
   142ac:	orrne	r8, r8, #2
   142b0:	ldr	r0, [sp, #8]
   142b4:	ldr	r1, [sp, #12]
   142b8:	ldr	r2, [sp, #4]
   142bc:	strd	r0, [r2]
   142c0:	mov	r0, r8
   142c4:	sub	sp, fp, #28
   142c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142cc:	movw	r0, #22149	; 0x5685
   142d0:	movt	r0, #1
   142d4:	movw	r1, #22187	; 0x56ab
   142d8:	movt	r1, #1
   142dc:	movw	r3, #22203	; 0x56bb
   142e0:	movt	r3, #1
   142e4:	mov	r2, #85	; 0x55
   142e8:	bl	1103c <__assert_fail@plt>
   142ec:	push	{r4, r5, r6, r7, fp, lr}
   142f0:	add	fp, sp, #16
   142f4:	mov	r5, r1
   142f8:	mov	r4, r0
   142fc:	cmn	r1, #1
   14300:	ble	14338 <__assert_fail@plt+0x32fc>
   14304:	cmp	r5, #0
   14308:	beq	14358 <__assert_fail@plt+0x331c>
   1430c:	asr	r3, r5, #31
   14310:	mvn	r6, #0
   14314:	mvn	r0, #0
   14318:	mvn	r1, #0
   1431c:	mov	r2, r5
   14320:	bl	14c54 <__assert_fail@plt+0x3c18>
   14324:	ldrd	r2, [r4]
   14328:	subs	r0, r0, r2
   1432c:	sbcs	r0, r1, r3
   14330:	bcc	14348 <__assert_fail@plt+0x330c>
   14334:	b	14358 <__assert_fail@plt+0x331c>
   14338:	ldrd	r0, [r4]
   1433c:	orrs	r0, r0, r1
   14340:	beq	14358 <__assert_fail@plt+0x331c>
   14344:	mvn	r6, #0
   14348:	mov	r0, #1
   1434c:	mvn	r7, #0
   14350:	strd	r6, [r4]
   14354:	pop	{r4, r5, r6, r7, fp, pc}
   14358:	ldrd	r0, [r4]
   1435c:	umull	r6, r2, r0, r5
   14360:	asr	r3, r5, #31
   14364:	mla	r0, r0, r3, r2
   14368:	mla	r7, r1, r5, r0
   1436c:	mov	r0, #0
   14370:	strd	r6, [r4]
   14374:	pop	{r4, r5, r6, r7, fp, pc}
   14378:	push	{r4, r5, r6, r7, fp, lr}
   1437c:	add	fp, sp, #16
   14380:	cmp	r2, #0
   14384:	beq	143b8 <__assert_fail@plt+0x337c>
   14388:	mov	r4, r2
   1438c:	mov	r5, r1
   14390:	mov	r7, r0
   14394:	mov	r6, #0
   14398:	mov	r0, r7
   1439c:	mov	r1, r5
   143a0:	bl	142ec <__assert_fail@plt+0x32b0>
   143a4:	orr	r6, r0, r6
   143a8:	subs	r4, r4, #1
   143ac:	bne	14398 <__assert_fail@plt+0x335c>
   143b0:	mov	r0, r6
   143b4:	pop	{r4, r5, r6, r7, fp, pc}
   143b8:	mov	r6, #0
   143bc:	mov	r0, r6
   143c0:	pop	{r4, r5, r6, r7, fp, pc}
   143c4:	clz	r2, r1
   143c8:	lsr	r2, r2, #5
   143cc:	clz	r3, r0
   143d0:	lsr	r3, r3, #5
   143d4:	orrs	r2, r3, r2
   143d8:	movwne	r1, #1
   143dc:	movwne	r0, #1
   143e0:	cmp	r1, #0
   143e4:	beq	14414 <__assert_fail@plt+0x33d8>
   143e8:	mvn	r2, #-2147483648	; 0x80000000
   143ec:	udiv	r2, r2, r1
   143f0:	cmp	r2, r0
   143f4:	bcs	14414 <__assert_fail@plt+0x33d8>
   143f8:	push	{fp, lr}
   143fc:	mov	fp, sp
   14400:	bl	10f7c <__errno_location@plt>
   14404:	mov	r1, #12
   14408:	str	r1, [r0]
   1440c:	mov	r0, #0
   14410:	pop	{fp, pc}
   14414:	b	10de4 <calloc@plt>
   14418:	cmp	r0, #0
   1441c:	movweq	r0, #1
   14420:	cmn	r0, #1
   14424:	ble	1442c <__assert_fail@plt+0x33f0>
   14428:	b	10ef8 <malloc@plt>
   1442c:	push	{fp, lr}
   14430:	mov	fp, sp
   14434:	bl	10f7c <__errno_location@plt>
   14438:	mov	r1, #12
   1443c:	str	r1, [r0]
   14440:	mov	r0, #0
   14444:	pop	{fp, pc}
   14448:	push	{fp, lr}
   1444c:	mov	fp, sp
   14450:	cmp	r0, #0
   14454:	beq	14470 <__assert_fail@plt+0x3434>
   14458:	cmp	r1, #0
   1445c:	beq	1447c <__assert_fail@plt+0x3440>
   14460:	cmn	r1, #1
   14464:	ble	14488 <__assert_fail@plt+0x344c>
   14468:	pop	{fp, lr}
   1446c:	b	10e74 <realloc@plt>
   14470:	mov	r0, r1
   14474:	pop	{fp, lr}
   14478:	b	14418 <__assert_fail@plt+0x33dc>
   1447c:	bl	1494c <__assert_fail@plt+0x3910>
   14480:	mov	r0, #0
   14484:	pop	{fp, pc}
   14488:	bl	10f7c <__errno_location@plt>
   1448c:	mov	r1, #12
   14490:	str	r1, [r0]
   14494:	mov	r0, #0
   14498:	pop	{fp, pc}
   1449c:	mov	r1, r0
   144a0:	sub	r2, r0, #65	; 0x41
   144a4:	mov	r0, #1
   144a8:	cmp	r2, #26
   144ac:	subcs	r2, r1, #97	; 0x61
   144b0:	cmpcs	r2, #26
   144b4:	bcs	144bc <__assert_fail@plt+0x3480>
   144b8:	bx	lr
   144bc:	sub	r1, r1, #48	; 0x30
   144c0:	cmp	r1, #10
   144c4:	movcs	r0, #0
   144c8:	bx	lr
   144cc:	mov	r1, r0
   144d0:	sub	r2, r0, #65	; 0x41
   144d4:	mov	r0, #1
   144d8:	cmp	r2, #26
   144dc:	subcs	r1, r1, #97	; 0x61
   144e0:	cmpcs	r1, #26
   144e4:	movcs	r0, #0
   144e8:	bx	lr
   144ec:	mov	r1, #0
   144f0:	cmp	r0, #128	; 0x80
   144f4:	movwcc	r1, #1
   144f8:	mov	r0, r1
   144fc:	bx	lr
   14500:	sub	r1, r0, #9
   14504:	clz	r1, r1
   14508:	lsr	r1, r1, #5
   1450c:	sub	r0, r0, #32
   14510:	clz	r0, r0
   14514:	lsr	r0, r0, #5
   14518:	orr	r0, r0, r1
   1451c:	bx	lr
   14520:	mov	r1, r0
   14524:	mov	r0, #1
   14528:	cmp	r1, #32
   1452c:	bxcc	lr
   14530:	cmp	r1, #127	; 0x7f
   14534:	movne	r0, #0
   14538:	bx	lr
   1453c:	sub	r1, r0, #48	; 0x30
   14540:	mov	r0, #0
   14544:	cmp	r1, #10
   14548:	movwcc	r0, #1
   1454c:	bx	lr
   14550:	sub	r1, r0, #33	; 0x21
   14554:	mov	r0, #0
   14558:	cmp	r1, #94	; 0x5e
   1455c:	movwcc	r0, #1
   14560:	bx	lr
   14564:	sub	r1, r0, #97	; 0x61
   14568:	mov	r0, #0
   1456c:	cmp	r1, #26
   14570:	movwcc	r0, #1
   14574:	bx	lr
   14578:	sub	r1, r0, #32
   1457c:	mov	r0, #0
   14580:	cmp	r1, #95	; 0x5f
   14584:	movwcc	r0, #1
   14588:	bx	lr
   1458c:	sub	r1, r0, #33	; 0x21
   14590:	cmp	r1, #93	; 0x5d
   14594:	bhi	14720 <__assert_fail@plt+0x36e4>
   14598:	mov	r0, #1
   1459c:	add	r2, pc, #0
   145a0:	ldr	pc, [r2, r1, lsl #2]
   145a4:	andeq	r4, r1, ip, lsl r7
   145a8:	andeq	r4, r1, ip, lsl r7
   145ac:	andeq	r4, r1, ip, lsl r7
   145b0:	andeq	r4, r1, ip, lsl r7
   145b4:	andeq	r4, r1, ip, lsl r7
   145b8:	andeq	r4, r1, ip, lsl r7
   145bc:	andeq	r4, r1, ip, lsl r7
   145c0:	andeq	r4, r1, ip, lsl r7
   145c4:	andeq	r4, r1, ip, lsl r7
   145c8:	andeq	r4, r1, ip, lsl r7
   145cc:	andeq	r4, r1, ip, lsl r7
   145d0:	andeq	r4, r1, ip, lsl r7
   145d4:	andeq	r4, r1, ip, lsl r7
   145d8:	andeq	r4, r1, ip, lsl r7
   145dc:	andeq	r4, r1, ip, lsl r7
   145e0:	andeq	r4, r1, r0, lsr #14
   145e4:	andeq	r4, r1, r0, lsr #14
   145e8:	andeq	r4, r1, r0, lsr #14
   145ec:	andeq	r4, r1, r0, lsr #14
   145f0:	andeq	r4, r1, r0, lsr #14
   145f4:	andeq	r4, r1, r0, lsr #14
   145f8:	andeq	r4, r1, r0, lsr #14
   145fc:	andeq	r4, r1, r0, lsr #14
   14600:	andeq	r4, r1, r0, lsr #14
   14604:	andeq	r4, r1, r0, lsr #14
   14608:	andeq	r4, r1, ip, lsl r7
   1460c:	andeq	r4, r1, ip, lsl r7
   14610:	andeq	r4, r1, ip, lsl r7
   14614:	andeq	r4, r1, ip, lsl r7
   14618:	andeq	r4, r1, ip, lsl r7
   1461c:	andeq	r4, r1, ip, lsl r7
   14620:	andeq	r4, r1, ip, lsl r7
   14624:	andeq	r4, r1, r0, lsr #14
   14628:	andeq	r4, r1, r0, lsr #14
   1462c:	andeq	r4, r1, r0, lsr #14
   14630:	andeq	r4, r1, r0, lsr #14
   14634:	andeq	r4, r1, r0, lsr #14
   14638:	andeq	r4, r1, r0, lsr #14
   1463c:	andeq	r4, r1, r0, lsr #14
   14640:	andeq	r4, r1, r0, lsr #14
   14644:	andeq	r4, r1, r0, lsr #14
   14648:	andeq	r4, r1, r0, lsr #14
   1464c:	andeq	r4, r1, r0, lsr #14
   14650:	andeq	r4, r1, r0, lsr #14
   14654:	andeq	r4, r1, r0, lsr #14
   14658:	andeq	r4, r1, r0, lsr #14
   1465c:	andeq	r4, r1, r0, lsr #14
   14660:	andeq	r4, r1, r0, lsr #14
   14664:	andeq	r4, r1, r0, lsr #14
   14668:	andeq	r4, r1, r0, lsr #14
   1466c:	andeq	r4, r1, r0, lsr #14
   14670:	andeq	r4, r1, r0, lsr #14
   14674:	andeq	r4, r1, r0, lsr #14
   14678:	andeq	r4, r1, r0, lsr #14
   1467c:	andeq	r4, r1, r0, lsr #14
   14680:	andeq	r4, r1, r0, lsr #14
   14684:	andeq	r4, r1, r0, lsr #14
   14688:	andeq	r4, r1, r0, lsr #14
   1468c:	andeq	r4, r1, ip, lsl r7
   14690:	andeq	r4, r1, ip, lsl r7
   14694:	andeq	r4, r1, ip, lsl r7
   14698:	andeq	r4, r1, ip, lsl r7
   1469c:	andeq	r4, r1, ip, lsl r7
   146a0:	andeq	r4, r1, ip, lsl r7
   146a4:	andeq	r4, r1, r0, lsr #14
   146a8:	andeq	r4, r1, r0, lsr #14
   146ac:	andeq	r4, r1, r0, lsr #14
   146b0:	andeq	r4, r1, r0, lsr #14
   146b4:	andeq	r4, r1, r0, lsr #14
   146b8:	andeq	r4, r1, r0, lsr #14
   146bc:	andeq	r4, r1, r0, lsr #14
   146c0:	andeq	r4, r1, r0, lsr #14
   146c4:	andeq	r4, r1, r0, lsr #14
   146c8:	andeq	r4, r1, r0, lsr #14
   146cc:	andeq	r4, r1, r0, lsr #14
   146d0:	andeq	r4, r1, r0, lsr #14
   146d4:	andeq	r4, r1, r0, lsr #14
   146d8:	andeq	r4, r1, r0, lsr #14
   146dc:	andeq	r4, r1, r0, lsr #14
   146e0:	andeq	r4, r1, r0, lsr #14
   146e4:	andeq	r4, r1, r0, lsr #14
   146e8:	andeq	r4, r1, r0, lsr #14
   146ec:	andeq	r4, r1, r0, lsr #14
   146f0:	andeq	r4, r1, r0, lsr #14
   146f4:	andeq	r4, r1, r0, lsr #14
   146f8:	andeq	r4, r1, r0, lsr #14
   146fc:	andeq	r4, r1, r0, lsr #14
   14700:	andeq	r4, r1, r0, lsr #14
   14704:	andeq	r4, r1, r0, lsr #14
   14708:	andeq	r4, r1, r0, lsr #14
   1470c:	andeq	r4, r1, ip, lsl r7
   14710:	andeq	r4, r1, ip, lsl r7
   14714:	andeq	r4, r1, ip, lsl r7
   14718:	andeq	r4, r1, ip, lsl r7
   1471c:	bx	lr
   14720:	mov	r0, #0
   14724:	bx	lr
   14728:	sub	r0, r0, #9
   1472c:	cmp	r0, #23
   14730:	movhi	r0, #0
   14734:	bxhi	lr
   14738:	bic	r0, r0, #-16777216	; 0xff000000
   1473c:	movw	r1, #31
   14740:	movt	r1, #128	; 0x80
   14744:	mov	r2, #1
   14748:	and	r0, r2, r1, lsr r0
   1474c:	bx	lr
   14750:	sub	r1, r0, #65	; 0x41
   14754:	mov	r0, #0
   14758:	cmp	r1, #26
   1475c:	movwcc	r0, #1
   14760:	bx	lr
   14764:	mov	r1, r0
   14768:	sub	r2, r0, #48	; 0x30
   1476c:	mov	r0, #1
   14770:	cmp	r2, #22
   14774:	bhi	1478c <__assert_fail@plt+0x3750>
   14778:	mov	ip, #1
   1477c:	movw	r3, #1023	; 0x3ff
   14780:	movt	r3, #126	; 0x7e
   14784:	tst	r3, ip, lsl r2
   14788:	bxne	lr
   1478c:	sub	r1, r1, #97	; 0x61
   14790:	cmp	r1, #6
   14794:	movcs	r0, #0
   14798:	bxcs	lr
   1479c:	bx	lr
   147a0:	sub	r1, r0, #65	; 0x41
   147a4:	cmp	r1, #26
   147a8:	addcc	r0, r0, #32
   147ac:	bx	lr
   147b0:	sub	r1, r0, #97	; 0x61
   147b4:	cmp	r1, #26
   147b8:	subcc	r0, r0, #32
   147bc:	bx	lr
   147c0:	push	{r4, r5, r6, sl, fp, lr}
   147c4:	add	fp, sp, #16
   147c8:	mov	r4, r0
   147cc:	bl	10ebc <__fpending@plt>
   147d0:	mov	r5, r0
   147d4:	mov	r0, r4
   147d8:	bl	10ec8 <ferror_unlocked@plt>
   147dc:	mov	r6, r0
   147e0:	mov	r0, r4
   147e4:	bl	14844 <__assert_fail@plt+0x3808>
   147e8:	cmp	r6, #0
   147ec:	beq	14810 <__assert_fail@plt+0x37d4>
   147f0:	mvn	r4, #0
   147f4:	cmp	r0, #0
   147f8:	bne	1483c <__assert_fail@plt+0x3800>
   147fc:	bl	10f7c <__errno_location@plt>
   14800:	mov	r1, #0
   14804:	str	r1, [r0]
   14808:	mov	r0, r4
   1480c:	pop	{r4, r5, r6, sl, fp, pc}
   14810:	cmp	r0, #0
   14814:	mov	r4, r0
   14818:	mvnne	r4, #0
   1481c:	cmp	r5, #0
   14820:	bne	1483c <__assert_fail@plt+0x3800>
   14824:	cmp	r0, #0
   14828:	beq	1483c <__assert_fail@plt+0x3800>
   1482c:	bl	10f7c <__errno_location@plt>
   14830:	ldr	r0, [r0]
   14834:	subs	r4, r0, #9
   14838:	mvnne	r4, #0
   1483c:	mov	r0, r4
   14840:	pop	{r4, r5, r6, sl, fp, pc}
   14844:	push	{r4, r5, fp, lr}
   14848:	add	fp, sp, #8
   1484c:	sub	sp, sp, #8
   14850:	mov	r4, r0
   14854:	bl	10fac <fileno@plt>
   14858:	cmn	r0, #1
   1485c:	ble	148d4 <__assert_fail@plt+0x3898>
   14860:	mov	r0, r4
   14864:	bl	10f10 <__freading@plt>
   14868:	cmp	r0, #0
   1486c:	beq	14898 <__assert_fail@plt+0x385c>
   14870:	mov	r0, r4
   14874:	bl	10fac <fileno@plt>
   14878:	mov	r1, #1
   1487c:	str	r1, [sp]
   14880:	mov	r2, #0
   14884:	mov	r3, #0
   14888:	bl	10ea4 <lseek64@plt>
   1488c:	and	r0, r0, r1
   14890:	cmn	r0, #1
   14894:	beq	148d4 <__assert_fail@plt+0x3898>
   14898:	mov	r0, r4
   1489c:	bl	148e4 <__assert_fail@plt+0x38a8>
   148a0:	cmp	r0, #0
   148a4:	beq	148d4 <__assert_fail@plt+0x3898>
   148a8:	bl	10f7c <__errno_location@plt>
   148ac:	ldr	r5, [r0]
   148b0:	mov	r0, r4
   148b4:	bl	10fd0 <fclose@plt>
   148b8:	cmp	r5, #0
   148bc:	beq	148cc <__assert_fail@plt+0x3890>
   148c0:	bl	10f7c <__errno_location@plt>
   148c4:	str	r5, [r0]
   148c8:	mvn	r0, #0
   148cc:	sub	sp, fp, #8
   148d0:	pop	{r4, r5, fp, pc}
   148d4:	mov	r0, r4
   148d8:	sub	sp, fp, #8
   148dc:	pop	{r4, r5, fp, lr}
   148e0:	b	10fd0 <fclose@plt>
   148e4:	push	{r4, sl, fp, lr}
   148e8:	add	fp, sp, #8
   148ec:	mov	r4, r0
   148f0:	cmp	r0, #0
   148f4:	beq	1490c <__assert_fail@plt+0x38d0>
   148f8:	mov	r0, r4
   148fc:	bl	10f10 <__freading@plt>
   14900:	cmp	r0, #0
   14904:	movne	r0, r4
   14908:	blne	14918 <__assert_fail@plt+0x38dc>
   1490c:	mov	r0, r4
   14910:	pop	{r4, sl, fp, lr}
   14914:	b	10e14 <fflush@plt>
   14918:	push	{fp, lr}
   1491c:	mov	fp, sp
   14920:	sub	sp, sp, #8
   14924:	ldrb	r1, [r0, #1]
   14928:	tst	r1, #1
   1492c:	beq	14944 <__assert_fail@plt+0x3908>
   14930:	mov	r1, #1
   14934:	str	r1, [sp]
   14938:	mov	r2, #0
   1493c:	mov	r3, #0
   14940:	bl	14974 <__assert_fail@plt+0x3938>
   14944:	mov	sp, fp
   14948:	pop	{fp, pc}
   1494c:	push	{r4, r5, r6, sl, fp, lr}
   14950:	add	fp, sp, #16
   14954:	mov	r4, r0
   14958:	bl	10f7c <__errno_location@plt>
   1495c:	mov	r5, r0
   14960:	ldr	r6, [r0]
   14964:	mov	r0, r4
   14968:	bl	10e20 <free@plt>
   1496c:	str	r6, [r5]
   14970:	pop	{r4, r5, r6, sl, fp, pc}
   14974:	push	{r4, r5, r6, r7, fp, lr}
   14978:	add	fp, sp, #16
   1497c:	sub	sp, sp, #8
   14980:	mov	r5, r3
   14984:	mov	r6, r2
   14988:	mov	r4, r0
   1498c:	ldr	r0, [r0, #4]
   14990:	ldr	r1, [r4, #8]
   14994:	cmp	r1, r0
   14998:	bne	149b4 <__assert_fail@plt+0x3978>
   1499c:	ldrd	r0, [r4, #16]
   149a0:	cmp	r1, r0
   149a4:	bne	149b4 <__assert_fail@plt+0x3978>
   149a8:	ldr	r0, [r4, #36]	; 0x24
   149ac:	cmp	r0, #0
   149b0:	beq	149cc <__assert_fail@plt+0x3990>
   149b4:	mov	r0, r4
   149b8:	mov	r2, r6
   149bc:	mov	r3, r5
   149c0:	sub	sp, fp, #16
   149c4:	pop	{r4, r5, r6, r7, fp, lr}
   149c8:	b	10fdc <fseeko64@plt>
   149cc:	ldr	r7, [fp, #8]
   149d0:	mov	r0, r4
   149d4:	bl	10fac <fileno@plt>
   149d8:	str	r7, [sp]
   149dc:	mov	r2, r6
   149e0:	mov	r3, r5
   149e4:	bl	10ea4 <lseek64@plt>
   149e8:	and	r2, r0, r1
   149ec:	cmn	r2, #1
   149f0:	beq	14a10 <__assert_fail@plt+0x39d4>
   149f4:	strd	r0, [r4, #80]	; 0x50
   149f8:	ldr	r0, [r4]
   149fc:	bic	r0, r0, #16
   14a00:	str	r0, [r4]
   14a04:	mov	r0, #0
   14a08:	sub	sp, fp, #16
   14a0c:	pop	{r4, r5, r6, r7, fp, pc}
   14a10:	mvn	r0, #0
   14a14:	sub	sp, fp, #16
   14a18:	pop	{r4, r5, r6, r7, fp, pc}
   14a1c:	push	{fp, lr}
   14a20:	mov	fp, sp
   14a24:	bl	10f7c <__errno_location@plt>
   14a28:	mov	r1, #12
   14a2c:	str	r1, [r0]
   14a30:	mov	r0, #0
   14a34:	pop	{fp, pc}
   14a38:	b	14418 <__assert_fail@plt+0x33dc>
   14a3c:	cmp	r1, #0
   14a40:	orreq	r1, r1, #1
   14a44:	b	14448 <__assert_fail@plt+0x340c>
   14a48:	b	143c4 <__assert_fail@plt+0x3388>
   14a4c:	clz	r3, r2
   14a50:	lsr	ip, r3, #5
   14a54:	clz	r3, r1
   14a58:	lsr	r3, r3, #5
   14a5c:	orrs	r3, r3, ip
   14a60:	movwne	r1, #1
   14a64:	movwne	r2, #1
   14a68:	b	14b08 <__assert_fail@plt+0x3acc>
   14a6c:	push	{fp, lr}
   14a70:	mov	fp, sp
   14a74:	mov	r0, #14
   14a78:	bl	11000 <nl_langinfo@plt>
   14a7c:	movw	r1, #20241	; 0x4f11
   14a80:	movt	r1, #1
   14a84:	cmp	r0, #0
   14a88:	movne	r1, r0
   14a8c:	ldrb	r2, [r1]
   14a90:	movw	r0, #22282	; 0x570a
   14a94:	movt	r0, #1
   14a98:	cmp	r2, #0
   14a9c:	movne	r0, r1
   14aa0:	pop	{fp, pc}
   14aa4:	push	{r4, r5, r6, r7, fp, lr}
   14aa8:	add	fp, sp, #16
   14aac:	sub	sp, sp, #8
   14ab0:	mov	r7, r2
   14ab4:	mov	r4, r1
   14ab8:	add	r5, sp, #4
   14abc:	cmp	r0, #0
   14ac0:	movne	r5, r0
   14ac4:	mov	r0, r5
   14ac8:	bl	10ed4 <mbrtowc@plt>
   14acc:	mov	r6, r0
   14ad0:	cmp	r7, #0
   14ad4:	beq	14afc <__assert_fail@plt+0x3ac0>
   14ad8:	cmn	r6, #2
   14adc:	bcc	14afc <__assert_fail@plt+0x3ac0>
   14ae0:	mov	r0, #0
   14ae4:	bl	14b44 <__assert_fail@plt+0x3b08>
   14ae8:	cmp	r0, #0
   14aec:	bne	14afc <__assert_fail@plt+0x3ac0>
   14af0:	ldrb	r0, [r4]
   14af4:	str	r0, [r5]
   14af8:	mov	r6, #1
   14afc:	mov	r0, r6
   14b00:	sub	sp, fp, #16
   14b04:	pop	{r4, r5, r6, r7, fp, pc}
   14b08:	cmp	r2, #0
   14b0c:	beq	14b3c <__assert_fail@plt+0x3b00>
   14b10:	mvn	r3, #0
   14b14:	udiv	r3, r3, r2
   14b18:	cmp	r3, r1
   14b1c:	bcs	14b3c <__assert_fail@plt+0x3b00>
   14b20:	push	{fp, lr}
   14b24:	mov	fp, sp
   14b28:	bl	10f7c <__errno_location@plt>
   14b2c:	mov	r1, #12
   14b30:	str	r1, [r0]
   14b34:	mov	r0, #0
   14b38:	pop	{fp, pc}
   14b3c:	mul	r1, r2, r1
   14b40:	b	14448 <__assert_fail@plt+0x340c>
   14b44:	push	{r4, sl, fp, lr}
   14b48:	add	fp, sp, #8
   14b4c:	sub	sp, sp, #264	; 0x108
   14b50:	add	r1, sp, #7
   14b54:	movw	r2, #257	; 0x101
   14b58:	bl	14bb0 <__assert_fail@plt+0x3b74>
   14b5c:	mov	r4, #0
   14b60:	cmp	r0, #0
   14b64:	bne	14ba4 <__assert_fail@plt+0x3b68>
   14b68:	add	r0, sp, #7
   14b6c:	movw	r1, #22288	; 0x5710
   14b70:	movt	r1, #1
   14b74:	mov	r2, #2
   14b78:	bl	10f4c <bcmp@plt>
   14b7c:	cmp	r0, #0
   14b80:	beq	14ba4 <__assert_fail@plt+0x3b68>
   14b84:	add	r0, sp, #7
   14b88:	movw	r1, #22290	; 0x5712
   14b8c:	movt	r1, #1
   14b90:	mov	r2, #6
   14b94:	bl	10f4c <bcmp@plt>
   14b98:	mov	r4, r0
   14b9c:	cmp	r0, #0
   14ba0:	movwne	r4, #1
   14ba4:	mov	r0, r4
   14ba8:	sub	sp, fp, #8
   14bac:	pop	{r4, sl, fp, pc}
   14bb0:	b	14bb4 <__assert_fail@plt+0x3b78>
   14bb4:	push	{r4, r5, r6, r7, fp, lr}
   14bb8:	add	fp, sp, #16
   14bbc:	mov	r6, r2
   14bc0:	mov	r4, r1
   14bc4:	bl	14c4c <__assert_fail@plt+0x3c10>
   14bc8:	cmp	r0, #0
   14bcc:	beq	14bfc <__assert_fail@plt+0x3bc0>
   14bd0:	mov	r7, r0
   14bd4:	bl	10f64 <strlen@plt>
   14bd8:	cmp	r0, r6
   14bdc:	bcs	14c18 <__assert_fail@plt+0x3bdc>
   14be0:	add	r2, r0, #1
   14be4:	mov	r0, r4
   14be8:	mov	r1, r7
   14bec:	bl	10e38 <memcpy@plt>
   14bf0:	mov	r5, #0
   14bf4:	mov	r0, r5
   14bf8:	pop	{r4, r5, r6, r7, fp, pc}
   14bfc:	mov	r5, #22
   14c00:	cmp	r6, #0
   14c04:	beq	14c40 <__assert_fail@plt+0x3c04>
   14c08:	mov	r0, #0
   14c0c:	strb	r0, [r4]
   14c10:	mov	r0, r5
   14c14:	pop	{r4, r5, r6, r7, fp, pc}
   14c18:	mov	r5, #34	; 0x22
   14c1c:	cmp	r6, #0
   14c20:	beq	14c40 <__assert_fail@plt+0x3c04>
   14c24:	sub	r6, r6, #1
   14c28:	mov	r0, r4
   14c2c:	mov	r1, r7
   14c30:	mov	r2, r6
   14c34:	bl	10e38 <memcpy@plt>
   14c38:	mov	r0, #0
   14c3c:	strb	r0, [r4, r6]
   14c40:	mov	r0, r5
   14c44:	pop	{r4, r5, r6, r7, fp, pc}
   14c48:	b	14c4c <__assert_fail@plt+0x3c10>
   14c4c:	mov	r1, #0
   14c50:	b	10fe8 <setlocale@plt>
   14c54:	cmp	r3, #0
   14c58:	cmpeq	r2, #0
   14c5c:	bne	14c74 <__assert_fail@plt+0x3c38>
   14c60:	cmp	r1, #0
   14c64:	cmpeq	r0, #0
   14c68:	mvnne	r1, #0
   14c6c:	mvnne	r0, #0
   14c70:	b	14c90 <__assert_fail@plt+0x3c54>
   14c74:	sub	sp, sp, #8
   14c78:	push	{sp, lr}
   14c7c:	bl	14ca0 <__assert_fail@plt+0x3c64>
   14c80:	ldr	lr, [sp, #4]
   14c84:	add	sp, sp, #8
   14c88:	pop	{r2, r3}
   14c8c:	bx	lr
   14c90:	push	{r1, lr}
   14c94:	mov	r0, #8
   14c98:	bl	10dfc <raise@plt>
   14c9c:	pop	{r1, pc}
   14ca0:	cmp	r1, r3
   14ca4:	cmpeq	r0, r2
   14ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cac:	mov	r4, r0
   14cb0:	movcc	r0, #0
   14cb4:	mov	r5, r1
   14cb8:	ldr	lr, [sp, #36]	; 0x24
   14cbc:	movcc	r1, r0
   14cc0:	bcc	14dbc <__assert_fail@plt+0x3d80>
   14cc4:	cmp	r3, #0
   14cc8:	clzeq	ip, r2
   14ccc:	clzne	ip, r3
   14cd0:	addeq	ip, ip, #32
   14cd4:	cmp	r5, #0
   14cd8:	clzeq	r1, r4
   14cdc:	addeq	r1, r1, #32
   14ce0:	clzne	r1, r5
   14ce4:	sub	ip, ip, r1
   14ce8:	sub	sl, ip, #32
   14cec:	lsl	r9, r3, ip
   14cf0:	rsb	fp, ip, #32
   14cf4:	orr	r9, r9, r2, lsl sl
   14cf8:	orr	r9, r9, r2, lsr fp
   14cfc:	lsl	r8, r2, ip
   14d00:	cmp	r5, r9
   14d04:	cmpeq	r4, r8
   14d08:	movcc	r0, #0
   14d0c:	movcc	r1, r0
   14d10:	bcc	14d2c <__assert_fail@plt+0x3cf0>
   14d14:	mov	r0, #1
   14d18:	subs	r4, r4, r8
   14d1c:	lsl	r1, r0, sl
   14d20:	orr	r1, r1, r0, lsr fp
   14d24:	lsl	r0, r0, ip
   14d28:	sbc	r5, r5, r9
   14d2c:	cmp	ip, #0
   14d30:	beq	14dbc <__assert_fail@plt+0x3d80>
   14d34:	lsr	r6, r8, #1
   14d38:	orr	r6, r6, r9, lsl #31
   14d3c:	lsr	r7, r9, #1
   14d40:	mov	r2, ip
   14d44:	b	14d68 <__assert_fail@plt+0x3d2c>
   14d48:	subs	r3, r4, r6
   14d4c:	sbc	r8, r5, r7
   14d50:	adds	r3, r3, r3
   14d54:	adc	r8, r8, r8
   14d58:	adds	r4, r3, #1
   14d5c:	adc	r5, r8, #0
   14d60:	subs	r2, r2, #1
   14d64:	beq	14d84 <__assert_fail@plt+0x3d48>
   14d68:	cmp	r5, r7
   14d6c:	cmpeq	r4, r6
   14d70:	bcs	14d48 <__assert_fail@plt+0x3d0c>
   14d74:	adds	r4, r4, r4
   14d78:	adc	r5, r5, r5
   14d7c:	subs	r2, r2, #1
   14d80:	bne	14d68 <__assert_fail@plt+0x3d2c>
   14d84:	lsr	r3, r4, ip
   14d88:	orr	r3, r3, r5, lsl fp
   14d8c:	lsr	r2, r5, ip
   14d90:	orr	r3, r3, r5, lsr sl
   14d94:	adds	r0, r0, r4
   14d98:	mov	r4, r3
   14d9c:	lsl	r3, r2, ip
   14da0:	orr	r3, r3, r4, lsl sl
   14da4:	lsl	ip, r4, ip
   14da8:	orr	r3, r3, r4, lsr fp
   14dac:	adc	r1, r1, r5
   14db0:	subs	r0, r0, ip
   14db4:	mov	r5, r2
   14db8:	sbc	r1, r1, r3
   14dbc:	cmp	lr, #0
   14dc0:	strdne	r4, [lr]
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14dcc:	mov	r7, r0
   14dd0:	ldr	r6, [pc, #72]	; 14e20 <__assert_fail@plt+0x3de4>
   14dd4:	ldr	r5, [pc, #72]	; 14e24 <__assert_fail@plt+0x3de8>
   14dd8:	add	r6, pc, r6
   14ddc:	add	r5, pc, r5
   14de0:	sub	r6, r6, r5
   14de4:	mov	r8, r1
   14de8:	mov	r9, r2
   14dec:	bl	10dc4 <calloc@plt-0x20>
   14df0:	asrs	r6, r6, #2
   14df4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14df8:	mov	r4, #0
   14dfc:	add	r4, r4, #1
   14e00:	ldr	r3, [r5], #4
   14e04:	mov	r2, r9
   14e08:	mov	r1, r8
   14e0c:	mov	r0, r7
   14e10:	blx	r3
   14e14:	cmp	r6, r4
   14e18:	bne	14dfc <__assert_fail@plt+0x3dc0>
   14e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e20:	andeq	r1, r1, ip, lsr #2
   14e24:	andeq	r1, r1, r4, lsr #2
   14e28:	bx	lr
   14e2c:	ldr	r3, [pc, #12]	; 14e40 <__assert_fail@plt+0x3e04>
   14e30:	mov	r1, #0
   14e34:	add	r3, pc, r3
   14e38:	ldr	r2, [r3]
   14e3c:	b	10f88 <__cxa_atexit@plt>
   14e40:	andeq	r1, r1, r8, lsr #5

Disassembly of section .fini:

00014e44 <.fini>:
   14e44:	push	{r3, lr}
   14e48:	pop	{r3, pc}
