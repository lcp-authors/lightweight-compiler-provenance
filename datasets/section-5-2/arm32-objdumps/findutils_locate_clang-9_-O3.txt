
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000117e8 <.init>:
   117e8:	push	{r3, lr}
   117ec:	bl	11cfc <__assert_fail@plt+0x50>
   117f0:	pop	{r3, pc}

Disassembly of section .plt:

000117f4 <pthread_mutex_unlock@plt-0x14>:
   117f4:	push	{lr}		; (str lr, [sp, #-4]!)
   117f8:	ldr	lr, [pc, #4]	; 11804 <pthread_mutex_unlock@plt-0x4>
   117fc:	add	lr, pc, lr
   11800:	ldr	pc, [lr, #8]!
   11804:	strdeq	r4, [r3], -ip

00011808 <pthread_mutex_unlock@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #52, 20	; 0x34000
   11810:	ldr	pc, [ip, #2044]!	; 0x7fc

00011814 <fdopen@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #52, 20	; 0x34000
   1181c:	ldr	pc, [ip, #2036]!	; 0x7f4

00011820 <calloc@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #52, 20	; 0x34000
   11828:	ldr	pc, [ip, #2028]!	; 0x7ec

0001182c <wctype@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #52, 20	; 0x34000
   11834:	ldr	pc, [ip, #2020]!	; 0x7e4

00011838 <raise@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #52, 20	; 0x34000
   11840:	ldr	pc, [ip, #2012]!	; 0x7dc

00011844 <wcrtomb@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #52, 20	; 0x34000
   1184c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011850 <iswctype@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #52, 20	; 0x34000
   11858:	ldr	pc, [ip, #1996]!	; 0x7cc

0001185c <strcmp@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #52, 20	; 0x34000
   11864:	ldr	pc, [ip, #1988]!	; 0x7c4

00011868 <printf@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #52, 20	; 0x34000
   11870:	ldr	pc, [ip, #1980]!	; 0x7bc

00011874 <pthread_mutex_destroy@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #52, 20	; 0x34000
   1187c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011880 <fflush@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #52, 20	; 0x34000
   11888:	ldr	pc, [ip, #1964]!	; 0x7ac

0001188c <wcwidth@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #52, 20	; 0x34000
   11894:	ldr	pc, [ip, #1956]!	; 0x7a4

00011898 <getuid@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #52, 20	; 0x34000
   118a0:	ldr	pc, [ip, #1948]!	; 0x79c

000118a4 <memmove@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #52, 20	; 0x34000
   118ac:	ldr	pc, [ip, #1940]!	; 0x794

000118b0 <free@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #52, 20	; 0x34000
   118b8:	ldr	pc, [ip, #1932]!	; 0x78c

000118bc <pthread_mutex_lock@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #52, 20	; 0x34000
   118c4:	ldr	pc, [ip, #1924]!	; 0x784

000118c8 <ferror@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #52, 20	; 0x34000
   118d0:	ldr	pc, [ip, #1916]!	; 0x77c

000118d4 <strndup@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #52, 20	; 0x34000
   118dc:	ldr	pc, [ip, #1908]!	; 0x774

000118e0 <_exit@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #52, 20	; 0x34000
   118e8:	ldr	pc, [ip, #1900]!	; 0x76c

000118ec <memcpy@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #52, 20	; 0x34000
   118f4:	ldr	pc, [ip, #1892]!	; 0x764

000118f8 <pthread_mutex_init@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #52, 20	; 0x34000
   11900:	ldr	pc, [ip, #1884]!	; 0x75c

00011904 <__strtoull_internal@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #52, 20	; 0x34000
   1190c:	ldr	pc, [ip, #1876]!	; 0x754

00011910 <towlower@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #52, 20	; 0x34000
   11918:	ldr	pc, [ip, #1868]!	; 0x74c

0001191c <mbsinit@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #52, 20	; 0x34000
   11924:	ldr	pc, [ip, #1860]!	; 0x744

00011928 <time@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #52, 20	; 0x34000
   11930:	ldr	pc, [ip, #1852]!	; 0x73c

00011934 <dcgettext@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #52, 20	; 0x34000
   1193c:	ldr	pc, [ip, #1844]!	; 0x734

00011940 <realloc@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #52, 20	; 0x34000
   11948:	ldr	pc, [ip, #1836]!	; 0x72c

0001194c <textdomain@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #52, 20	; 0x34000
   11954:	ldr	pc, [ip, #1828]!	; 0x724

00011958 <iswcntrl@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #52, 20	; 0x34000
   11960:	ldr	pc, [ip, #1820]!	; 0x71c

00011964 <geteuid@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #52, 20	; 0x34000
   1196c:	ldr	pc, [ip, #1812]!	; 0x714

00011970 <iswprint@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #52, 20	; 0x34000
   11978:	ldr	pc, [ip, #1804]!	; 0x70c

0001197c <setgroups@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #52, 20	; 0x34000
   11984:	ldr	pc, [ip, #1796]!	; 0x704

00011988 <__fxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #52, 20	; 0x34000
   11990:	ldr	pc, [ip, #1788]!	; 0x6fc

00011994 <fwrite@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #52, 20	; 0x34000
   1199c:	ldr	pc, [ip, #1780]!	; 0x6f4

000119a0 <lseek64@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #52, 20	; 0x34000
   119a8:	ldr	pc, [ip, #1772]!	; 0x6ec

000119ac <__ctype_get_mb_cur_max@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #52, 20	; 0x34000
   119b4:	ldr	pc, [ip, #1764]!	; 0x6e4

000119b8 <fread@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #52, 20	; 0x34000
   119c0:	ldr	pc, [ip, #1756]!	; 0x6dc

000119c4 <__fpending@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #52, 20	; 0x34000
   119cc:	ldr	pc, [ip, #1748]!	; 0x6d4

000119d0 <mbrtowc@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #52, 20	; 0x34000
   119d8:	ldr	pc, [ip, #1740]!	; 0x6cc

000119dc <error@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #52, 20	; 0x34000
   119e4:	ldr	pc, [ip, #1732]!	; 0x6c4

000119e8 <fnmatch@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #52, 20	; 0x34000
   119f0:	ldr	pc, [ip, #1724]!	; 0x6bc

000119f4 <open64@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #52, 20	; 0x34000
   119fc:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a00 <getenv@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #52, 20	; 0x34000
   11a08:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a0c <setgid@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #52, 20	; 0x34000
   11a14:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a18 <malloc@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #52, 20	; 0x34000
   11a20:	ldr	pc, [ip, #1692]!	; 0x69c

00011a24 <__libc_start_main@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #52, 20	; 0x34000
   11a2c:	ldr	pc, [ip, #1684]!	; 0x694

00011a30 <strftime@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #52, 20	; 0x34000
   11a38:	ldr	pc, [ip, #1676]!	; 0x68c

00011a3c <__freading@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #52, 20	; 0x34000
   11a44:	ldr	pc, [ip, #1668]!	; 0x684

00011a48 <localtime@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #52, 20	; 0x34000
   11a50:	ldr	pc, [ip, #1660]!	; 0x67c

00011a54 <__ctype_tolower_loc@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #52, 20	; 0x34000
   11a5c:	ldr	pc, [ip, #1652]!	; 0x674

00011a60 <__ctype_toupper_loc@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #52, 20	; 0x34000
   11a68:	ldr	pc, [ip, #1644]!	; 0x66c

00011a6c <__gmon_start__@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #52, 20	; 0x34000
   11a74:	ldr	pc, [ip, #1636]!	; 0x664

00011a78 <getopt_long@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #52, 20	; 0x34000
   11a80:	ldr	pc, [ip, #1628]!	; 0x65c

00011a84 <__ctype_b_loc@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #52, 20	; 0x34000
   11a8c:	ldr	pc, [ip, #1620]!	; 0x654

00011a90 <exit@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #52, 20	; 0x34000
   11a98:	ldr	pc, [ip, #1612]!	; 0x64c

00011a9c <feof@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #52, 20	; 0x34000
   11aa4:	ldr	pc, [ip, #1604]!	; 0x644

00011aa8 <bcmp@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #52, 20	; 0x34000
   11ab0:	ldr	pc, [ip, #1596]!	; 0x63c

00011ab4 <strtoul@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #52, 20	; 0x34000
   11abc:	ldr	pc, [ip, #1588]!	; 0x634

00011ac0 <strlen@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #52, 20	; 0x34000
   11ac8:	ldr	pc, [ip, #1580]!	; 0x62c

00011acc <strchr@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #52, 20	; 0x34000
   11ad4:	ldr	pc, [ip, #1572]!	; 0x624

00011ad8 <fprintf@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #52, 20	; 0x34000
   11ae0:	ldr	pc, [ip, #1564]!	; 0x61c

00011ae4 <ungetc@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #52, 20	; 0x34000
   11aec:	ldr	pc, [ip, #1556]!	; 0x614

00011af0 <__errno_location@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #52, 20	; 0x34000
   11af8:	ldr	pc, [ip, #1548]!	; 0x60c

00011afc <iswalnum@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #52, 20	; 0x34000
   11b04:	ldr	pc, [ip, #1540]!	; 0x604

00011b08 <strncasecmp@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #52, 20	; 0x34000
   11b10:	ldr	pc, [ip, #1532]!	; 0x5fc

00011b14 <__cxa_atexit@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #52, 20	; 0x34000
   11b1c:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b20 <getgid@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #52, 20	; 0x34000
   11b28:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b2c <memset@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #52, 20	; 0x34000
   11b34:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b38 <btowc@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #52, 20	; 0x34000
   11b40:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b44 <fgetc@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #52, 20	; 0x34000
   11b4c:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b50 <fileno@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #52, 20	; 0x34000
   11b58:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b5c <difftime@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #52, 20	; 0x34000
   11b64:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b68 <memchr@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #52, 20	; 0x34000
   11b70:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b74 <fclose@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #52, 20	; 0x34000
   11b7c:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b80 <strnlen@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #52, 20	; 0x34000
   11b88:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b8c <fseeko64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #52, 20	; 0x34000
   11b94:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b98 <fcntl64@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #52, 20	; 0x34000
   11ba0:	ldr	pc, [ip, #1436]!	; 0x59c

00011ba4 <setlocale@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #52, 20	; 0x34000
   11bac:	ldr	pc, [ip, #1428]!	; 0x594

00011bb0 <strrchr@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #52, 20	; 0x34000
   11bb8:	ldr	pc, [ip, #1420]!	; 0x58c

00011bbc <nl_langinfo@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #52, 20	; 0x34000
   11bc4:	ldr	pc, [ip, #1412]!	; 0x584

00011bc8 <fputc@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #52, 20	; 0x34000
   11bd0:	ldr	pc, [ip, #1404]!	; 0x57c

00011bd4 <setuid@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #52, 20	; 0x34000
   11bdc:	ldr	pc, [ip, #1396]!	; 0x574

00011be0 <localeconv@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #52, 20	; 0x34000
   11be8:	ldr	pc, [ip, #1388]!	; 0x56c

00011bec <clearerr@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #52, 20	; 0x34000
   11bf4:	ldr	pc, [ip, #1380]!	; 0x564

00011bf8 <sprintf@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #52, 20	; 0x34000
   11c00:	ldr	pc, [ip, #1372]!	; 0x55c

00011c04 <putc@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #52, 20	; 0x34000
   11c0c:	ldr	pc, [ip, #1364]!	; 0x554

00011c10 <strpbrk@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #52, 20	; 0x34000
   11c18:	ldr	pc, [ip, #1356]!	; 0x54c

00011c1c <bindtextdomain@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #52, 20	; 0x34000
   11c24:	ldr	pc, [ip, #1348]!	; 0x544

00011c28 <getdelim@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #52, 20	; 0x34000
   11c30:	ldr	pc, [ip, #1340]!	; 0x53c

00011c34 <__xstat64@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #52, 20	; 0x34000
   11c3c:	ldr	pc, [ip, #1332]!	; 0x534

00011c40 <isatty@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #52, 20	; 0x34000
   11c48:	ldr	pc, [ip, #1324]!	; 0x52c

00011c4c <towupper@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #52, 20	; 0x34000
   11c54:	ldr	pc, [ip, #1316]!	; 0x524

00011c58 <fputs@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #52, 20	; 0x34000
   11c60:	ldr	pc, [ip, #1308]!	; 0x51c

00011c64 <strncmp@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #52, 20	; 0x34000
   11c6c:	ldr	pc, [ip, #1300]!	; 0x514

00011c70 <abort@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #52, 20	; 0x34000
   11c78:	ldr	pc, [ip, #1292]!	; 0x50c

00011c7c <getc@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #52, 20	; 0x34000
   11c84:	ldr	pc, [ip, #1284]!	; 0x504

00011c88 <close@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #52, 20	; 0x34000
   11c90:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c94 <__lxstat64@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #52, 20	; 0x34000
   11c9c:	ldr	pc, [ip, #1268]!	; 0x4f4

00011ca0 <dcngettext@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #52, 20	; 0x34000
   11ca8:	ldr	pc, [ip, #1260]!	; 0x4ec

00011cac <__assert_fail@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #52, 20	; 0x34000
   11cb4:	ldr	pc, [ip, #1252]!	; 0x4e4

Disassembly of section .text:

00011cc0 <.text>:
   11cc0:	mov	fp, #0
   11cc4:	mov	lr, #0
   11cc8:	pop	{r1}		; (ldr r1, [sp], #4)
   11ccc:	mov	r2, sp
   11cd0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cd4:	push	{r0}		; (str r0, [sp, #-4]!)
   11cd8:	ldr	ip, [pc, #16]	; 11cf0 <__assert_fail@plt+0x44>
   11cdc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce0:	ldr	r0, [pc, #12]	; 11cf4 <__assert_fail@plt+0x48>
   11ce4:	ldr	r3, [pc, #12]	; 11cf8 <__assert_fail@plt+0x4c>
   11ce8:	bl	11a24 <__libc_start_main@plt>
   11cec:	bl	11c70 <abort@plt>
   11cf0:	andeq	r3, r3, r0, ror #10
   11cf4:			; <UNDEFINED> instruction: 0x00011db0
   11cf8:	andeq	r3, r3, r0, lsl #10
   11cfc:	ldr	r3, [pc, #20]	; 11d18 <__assert_fail@plt+0x6c>
   11d00:	ldr	r2, [pc, #20]	; 11d1c <__assert_fail@plt+0x70>
   11d04:	add	r3, pc, r3
   11d08:	ldr	r2, [r3, r2]
   11d0c:	cmp	r2, #0
   11d10:	bxeq	lr
   11d14:	b	11a6c <__gmon_start__@plt>
   11d18:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   11d1c:	muleq	r0, ip, r1
   11d20:	ldr	r0, [pc, #24]	; 11d40 <__assert_fail@plt+0x94>
   11d24:	ldr	r3, [pc, #24]	; 11d44 <__assert_fail@plt+0x98>
   11d28:	cmp	r3, r0
   11d2c:	bxeq	lr
   11d30:	ldr	r3, [pc, #16]	; 11d48 <__assert_fail@plt+0x9c>
   11d34:	cmp	r3, #0
   11d38:	bxeq	lr
   11d3c:	bx	r3
   11d40:	strdeq	r6, [r4], -ip
   11d44:	strdeq	r6, [r4], -ip
   11d48:	andeq	r0, r0, r0
   11d4c:	ldr	r0, [pc, #36]	; 11d78 <__assert_fail@plt+0xcc>
   11d50:	ldr	r1, [pc, #36]	; 11d7c <__assert_fail@plt+0xd0>
   11d54:	sub	r1, r1, r0
   11d58:	asr	r1, r1, #2
   11d5c:	add	r1, r1, r1, lsr #31
   11d60:	asrs	r1, r1, #1
   11d64:	bxeq	lr
   11d68:	ldr	r3, [pc, #16]	; 11d80 <__assert_fail@plt+0xd4>
   11d6c:	cmp	r3, #0
   11d70:	bxeq	lr
   11d74:	bx	r3
   11d78:	strdeq	r6, [r4], -ip
   11d7c:	strdeq	r6, [r4], -ip
   11d80:	andeq	r0, r0, r0
   11d84:	push	{r4, lr}
   11d88:	ldr	r4, [pc, #24]	; 11da8 <__assert_fail@plt+0xfc>
   11d8c:	ldrb	r3, [r4]
   11d90:	cmp	r3, #0
   11d94:	popne	{r4, pc}
   11d98:	bl	11d20 <__assert_fail@plt+0x74>
   11d9c:	mov	r3, #1
   11da0:	strb	r3, [r4]
   11da4:	pop	{r4, pc}
   11da8:	andeq	r6, r4, ip, lsl r2
   11dac:	b	11d4c <__assert_fail@plt+0xa0>
   11db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11db4:	add	fp, sp, #28
   11db8:	sub	sp, sp, #4
   11dbc:	vpush	{d8-d12}
   11dc0:	sub	sp, sp, #184	; 0xb8
   11dc4:	sub	sp, sp, #3072	; 0xc00
   11dc8:	str	r0, [sp, #188]	; 0xbc
   11dcc:	movw	r0, #13708	; 0x358c
   11dd0:	str	r1, [sp, #224]	; 0xe0
   11dd4:	mov	r1, #131072	; 0x20000
   11dd8:	movt	r0, #3
   11ddc:	bl	15864 <__assert_fail@plt+0x3bb8>
   11de0:	movw	r9, #25120	; 0x6220
   11de4:	movw	r4, #16944	; 0x4230
   11de8:	cmp	r0, #0
   11dec:	movt	r9, #4
   11df0:	movt	r4, #3
   11df4:	bmi	11e18 <__assert_fail@plt+0x16c>
   11df8:	mov	r1, #2
   11dfc:	mov	r2, #1
   11e00:	mov	r5, r0
   11e04:	bl	1bfe8 <__assert_fail@plt+0xa33c>
   11e08:	cmp	r0, #0
   11e0c:	beq	11e5c <__assert_fail@plt+0x1b0>
   11e10:	mov	r0, r5
   11e14:	bl	11c88 <close@plt>
   11e18:	movw	r0, #13732	; 0x35a4
   11e1c:	mov	r1, #131072	; 0x20000
   11e20:	movt	r0, #3
   11e24:	bl	15864 <__assert_fail@plt+0x3bb8>
   11e28:	cmp	r0, #0
   11e2c:	bmi	11e50 <__assert_fail@plt+0x1a4>
   11e30:	mov	r1, #2
   11e34:	mov	r2, #1
   11e38:	mov	r5, r0
   11e3c:	bl	1bfe8 <__assert_fail@plt+0xa33c>
   11e40:	cmp	r0, #0
   11e44:	beq	11e64 <__assert_fail@plt+0x1b8>
   11e48:	mov	r0, r5
   11e4c:	bl	11c88 <close@plt>
   11e50:	mvn	r0, #0
   11e54:	str	r0, [sp, #128]	; 0x80
   11e58:	b	11e74 <__assert_fail@plt+0x1c8>
   11e5c:	str	r5, [sp, #128]	; 0x80
   11e60:	b	11e6c <__assert_fail@plt+0x1c0>
   11e64:	str	r5, [sp, #128]	; 0x80
   11e68:	add	r4, r4, #4
   11e6c:	ldr	r0, [r4]
   11e70:	str	r0, [r9, #12]
   11e74:	bl	11964 <geteuid@plt>
   11e78:	mov	r5, r0
   11e7c:	bl	11898 <getuid@plt>
   11e80:	mov	r6, r0
   11e84:	bl	11b20 <getgid@plt>
   11e88:	mov	r4, r0
   11e8c:	cmp	r5, #0
   11e90:	bne	11eac <__assert_fail@plt+0x200>
   11e94:	sub	r1, fp, #728	; 0x2d8
   11e98:	mov	r0, #1
   11e9c:	str	r4, [fp, #-728]	; 0xfffffd28
   11ea0:	bl	1197c <setgroups@plt>
   11ea4:	cmp	r0, #0
   11ea8:	bne	13b48 <__assert_fail@plt+0x1e9c>
   11eac:	bl	11af0 <__errno_location@plt>
   11eb0:	cmp	r6, r5
   11eb4:	str	r0, [sp, #208]	; 0xd0
   11eb8:	cmpne	r6, #0
   11ebc:	beq	11ef0 <__assert_fail@plt+0x244>
   11ec0:	ldr	r1, [sp, #208]	; 0xd0
   11ec4:	mov	r0, #0
   11ec8:	str	r0, [r1]
   11ecc:	bl	11898 <getuid@plt>
   11ed0:	bl	11bd4 <setuid@plt>
   11ed4:	cmp	r0, #0
   11ed8:	bne	13b6c <__assert_fail@plt+0x1ec0>
   11edc:	mov	r0, #0
   11ee0:	mov	r5, #0
   11ee4:	bl	11bd4 <setuid@plt>
   11ee8:	cmp	r0, #0
   11eec:	beq	13b88 <__assert_fail@plt+0x1edc>
   11ef0:	ldr	r1, [sp, #208]	; 0xd0
   11ef4:	mov	r0, #0
   11ef8:	str	r0, [r1]
   11efc:	mov	r0, r4
   11f00:	bl	11a0c <setgid@plt>
   11f04:	cmp	r0, #0
   11f08:	bne	13a94 <__assert_fail@plt+0x1de8>
   11f0c:	ldr	r0, [sp, #224]	; 0xe0
   11f10:	ldr	r5, [sp, #188]	; 0xbc
   11f14:	ldr	r0, [r0]
   11f18:	cmp	r0, #0
   11f1c:	movweq	r0, #15250	; 0x3b92
   11f20:	movteq	r0, #3
   11f24:	bl	18590 <__assert_fail@plt+0x68e4>
   11f28:	movw	r1, #16911	; 0x420f
   11f2c:	mov	r0, #6
   11f30:	movt	r1, #3
   11f34:	bl	11ba4 <setlocale@plt>
   11f38:	movw	r4, #17473	; 0x4441
   11f3c:	movw	r1, #13890	; 0x3642
   11f40:	movt	r4, #3
   11f44:	movt	r1, #3
   11f48:	mov	r0, r4
   11f4c:	bl	11c1c <bindtextdomain@plt>
   11f50:	mov	r0, r4
   11f54:	bl	1194c <textdomain@plt>
   11f58:	mov	r0, #0
   11f5c:	bl	18654 <__assert_fail@plt+0x69a8>
   11f60:	str	r0, [r9, #16]
   11f64:	movw	r0, #22392	; 0x5778
   11f68:	movt	r0, #1
   11f6c:	bl	33564 <__assert_fail@plt+0x218b8>
   11f70:	cmp	r0, #0
   11f74:	bne	13a68 <__assert_fail@plt+0x1dbc>
   11f78:	movw	r0, #15320	; 0x3bd8
   11f7c:	movt	r0, #1
   11f80:	bl	33564 <__assert_fail@plt+0x218b8>
   11f84:	cmp	r0, #0
   11f88:	bne	13a68 <__assert_fail@plt+0x1dbc>
   11f8c:	add	r0, sp, #240	; 0xf0
   11f90:	add	r1, sp, #352	; 0x160
   11f94:	vmov.i32	q8, #0	; 0x00000000
   11f98:	add	r2, r0, #48	; 0x30
   11f9c:	add	r0, r0, #80	; 0x50
   11fa0:	str	r0, [sp, #104]	; 0x68
   11fa4:	add	r0, r1, #36	; 0x24
   11fa8:	str	r2, [sp, #108]	; 0x6c
   11fac:	str	r0, [sp, #148]	; 0x94
   11fb0:	mov	r0, #1
   11fb4:	strb	r0, [r9]
   11fb8:	add	r0, r9, #40	; 0x28
   11fbc:	str	r0, [sp, #136]	; 0x88
   11fc0:	vst1.64	{d16-d17}, [r0]
   11fc4:	movw	r0, #13949	; 0x367d
   11fc8:	movt	r0, #3
   11fcc:	bl	11a00 <getenv@plt>
   11fd0:	str	r0, [sp, #172]	; 0xac
   11fd4:	mov	r0, #0
   11fd8:	movw	r4, #13961	; 0x3689
   11fdc:	movw	r7, #16956	; 0x423c
   11fe0:	sub	lr, fp, #1024	; 0x400
   11fe4:	mvn	r8, #0
   11fe8:	mov	sl, #0
   11fec:	str	r0, [r9, #20]
   11ff0:	mov	r0, #0
   11ff4:	movt	r4, #3
   11ff8:	movt	r7, #3
   11ffc:	sub	r6, lr, #356	; 0x164
   12000:	str	r0, [sp, #112]	; 0x70
   12004:	mov	r0, #0
   12008:	str	r0, [sp, #184]	; 0xb8
   1200c:	mov	r0, #0
   12010:	str	r0, [sp, #156]	; 0x9c
   12014:	mov	r0, #0
   12018:	str	r0, [sp, #216]	; 0xd8
   1201c:	mov	r0, #0
   12020:	str	r0, [sp, #116]	; 0x74
   12024:	mov	r0, #0
   12028:	str	r0, [sp, #228]	; 0xe4
   1202c:	mov	r0, #0
   12030:	str	r0, [sp, #196]	; 0xc4
   12034:	mov	r0, #0
   12038:	str	r0, [sp, #220]	; 0xdc
   1203c:	ldr	r1, [sp, #224]	; 0xe0
   12040:	mov	r0, r5
   12044:	mov	r2, r4
   12048:	mov	r3, r7
   1204c:	str	r8, [fp, #-1380]	; 0xfffffa9c
   12050:	str	r6, [sp]
   12054:	bl	11a78 <getopt_long@plt>
   12058:	sub	r1, r0, #48	; 0x30
   1205c:	cmp	r1, #209	; 0xd1
   12060:	bhi	1254c <__assert_fail@plt+0x8a0>
   12064:	add	r0, pc, #0
   12068:	ldr	pc, [r0, r1, lsl #2]
   1206c:	andeq	r2, r1, ip, asr #9
   12070:	andeq	r3, r1, ip, asr #18
   12074:	andeq	r3, r1, ip, asr #18
   12078:	andeq	r3, r1, ip, asr #18
   1207c:	andeq	r3, r1, ip, asr #18
   12080:	andeq	r3, r1, ip, asr #18
   12084:	andeq	r3, r1, ip, asr #18
   12088:	andeq	r3, r1, ip, asr #18
   1208c:	andeq	r3, r1, ip, asr #18
   12090:	andeq	r3, r1, ip, asr #18
   12094:	andeq	r3, r1, ip, asr #18
   12098:	andeq	r3, r1, ip, asr #18
   1209c:	andeq	r3, r1, ip, asr #18
   120a0:	andeq	r3, r1, ip, asr #18
   120a4:	andeq	r3, r1, ip, asr #18
   120a8:	andeq	r3, r1, ip, asr #18
   120ac:	andeq	r3, r1, ip, asr #18
   120b0:	andeq	r2, r1, r4, asr #10
   120b4:	andeq	r3, r1, ip, asr #18
   120b8:	andeq	r3, r1, ip, asr #18
   120bc:	andeq	r3, r1, ip, asr #18
   120c0:	andeq	r2, r1, r0, ror #9
   120c4:	andeq	r3, r1, ip, asr #18
   120c8:	andeq	r3, r1, ip, asr #18
   120cc:			; <UNDEFINED> instruction: 0x000123b4
   120d0:	andeq	r3, r1, ip, asr #18
   120d4:	andeq	r3, r1, ip, asr #18
   120d8:	andeq	r3, r1, ip, asr #18
   120dc:	andeq	r2, r1, r0, lsr r4
   120e0:	andeq	r3, r1, ip, asr #18
   120e4:	andeq	r3, r1, ip, asr #18
   120e8:	andeq	r3, r1, ip, asr #18
   120ec:			; <UNDEFINED> instruction: 0x000123b4
   120f0:	andeq	r3, r1, ip, asr #18
   120f4:	andeq	r3, r1, ip, asr #18
   120f8:	andeq	r2, r1, ip, lsr r4
   120fc:	andeq	r3, r1, ip, asr #18
   12100:	andeq	r3, r1, ip, asr #18
   12104:	andeq	r3, r1, ip, asr #18
   12108:	andeq	r3, r1, ip, asr #18
   1210c:	andeq	r3, r1, ip, asr #18
   12110:	andeq	r3, r1, ip, asr #18
   12114:	andeq	r3, r1, ip, asr #18
   12118:	andeq	r3, r1, ip, asr #18
   1211c:	andeq	r3, r1, ip, asr #18
   12120:	andeq	r3, r1, ip, asr #18
   12124:	andeq	r3, r1, ip, asr #18
   12128:	andeq	r3, r1, ip, asr #18
   1212c:	andeq	r3, r1, ip, asr #18
   12130:	andeq	r3, r1, ip, asr #18
   12134:	andeq	r2, r1, r8, lsl r4
   12138:	andeq	r2, r1, ip, ror #8
   1213c:	strdeq	r2, [r1], -ip
   12140:	andeq	r2, r1, r0, ror #8
   12144:	andeq	r3, r1, ip, asr #18
   12148:	andeq	r3, r1, ip, asr #18
   1214c:	andeq	r3, r1, r4, asr r9
   12150:	andeq	r2, r1, ip, ror #9
   12154:	andeq	r3, r1, ip, asr #18
   12158:	andeq	r3, r1, ip, asr #18
   1215c:	andeq	r2, r1, r0, asr #7
   12160:	andeq	r2, r1, ip, lsr r0
   12164:	andeq	r3, r1, ip, asr #18
   12168:	andeq	r3, r1, ip, asr #18
   1216c:	andeq	r2, r1, r4, lsr #8
   12170:	andeq	r3, r1, ip, asr #18
   12174:	strdeq	r2, [r1], -r8
   12178:	andeq	r2, r1, ip, lsr r0
   1217c:	andeq	r3, r1, ip, asr #18
   12180:	andeq	r3, r1, ip, asr #18
   12184:	andeq	r2, r1, r8, lsl #11
   12188:	andeq	r2, r1, r4, lsl #10
   1218c:	andeq	r3, r1, ip, asr #18
   12190:	andeq	r3, r1, ip, asr #18
   12194:	andeq	r3, r1, ip, asr #18
   12198:	andeq	r3, r1, ip, asr #18
   1219c:	andeq	r3, r1, ip, asr #18
   121a0:	andeq	r3, r1, ip, asr #18
   121a4:	andeq	r3, r1, ip, asr #18
   121a8:	andeq	r3, r1, ip, asr #18
   121ac:	andeq	r3, r1, ip, asr #18
   121b0:	andeq	r3, r1, ip, asr #18
   121b4:	andeq	r3, r1, ip, asr #18
   121b8:	andeq	r3, r1, ip, asr #18
   121bc:	andeq	r3, r1, ip, asr #18
   121c0:	andeq	r3, r1, ip, asr #18
   121c4:	andeq	r3, r1, ip, asr #18
   121c8:	andeq	r3, r1, ip, asr #18
   121cc:	andeq	r3, r1, ip, asr #18
   121d0:	andeq	r3, r1, ip, asr #18
   121d4:	andeq	r3, r1, ip, asr #18
   121d8:	andeq	r3, r1, ip, asr #18
   121dc:	andeq	r3, r1, ip, asr #18
   121e0:	andeq	r3, r1, ip, asr #18
   121e4:	andeq	r3, r1, ip, asr #18
   121e8:	andeq	r3, r1, ip, asr #18
   121ec:	andeq	r3, r1, ip, asr #18
   121f0:	andeq	r3, r1, ip, asr #18
   121f4:	andeq	r3, r1, ip, asr #18
   121f8:	andeq	r3, r1, ip, asr #18
   121fc:	andeq	r3, r1, ip, asr #18
   12200:	andeq	r3, r1, ip, asr #18
   12204:	andeq	r3, r1, ip, asr #18
   12208:	andeq	r3, r1, ip, asr #18
   1220c:	andeq	r3, r1, ip, asr #18
   12210:	andeq	r3, r1, ip, asr #18
   12214:	andeq	r3, r1, ip, asr #18
   12218:	andeq	r3, r1, ip, asr #18
   1221c:	andeq	r3, r1, ip, asr #18
   12220:	andeq	r3, r1, ip, asr #18
   12224:	andeq	r3, r1, ip, asr #18
   12228:	andeq	r3, r1, ip, asr #18
   1222c:	andeq	r3, r1, ip, asr #18
   12230:	andeq	r3, r1, ip, asr #18
   12234:	andeq	r3, r1, ip, asr #18
   12238:	andeq	r3, r1, ip, asr #18
   1223c:	andeq	r3, r1, ip, asr #18
   12240:	andeq	r3, r1, ip, asr #18
   12244:	andeq	r3, r1, ip, asr #18
   12248:	andeq	r3, r1, ip, asr #18
   1224c:	andeq	r3, r1, ip, asr #18
   12250:	andeq	r3, r1, ip, asr #18
   12254:	andeq	r3, r1, ip, asr #18
   12258:	andeq	r3, r1, ip, asr #18
   1225c:	andeq	r3, r1, ip, asr #18
   12260:	andeq	r3, r1, ip, asr #18
   12264:	andeq	r3, r1, ip, asr #18
   12268:	andeq	r3, r1, ip, asr #18
   1226c:	andeq	r3, r1, ip, asr #18
   12270:	andeq	r3, r1, ip, asr #18
   12274:	andeq	r3, r1, ip, asr #18
   12278:	andeq	r3, r1, ip, asr #18
   1227c:	andeq	r3, r1, ip, asr #18
   12280:	andeq	r3, r1, ip, asr #18
   12284:	andeq	r3, r1, ip, asr #18
   12288:	andeq	r3, r1, ip, asr #18
   1228c:	andeq	r3, r1, ip, asr #18
   12290:	andeq	r3, r1, ip, asr #18
   12294:	andeq	r3, r1, ip, asr #18
   12298:	andeq	r3, r1, ip, asr #18
   1229c:	andeq	r3, r1, ip, asr #18
   122a0:	andeq	r3, r1, ip, asr #18
   122a4:	andeq	r3, r1, ip, asr #18
   122a8:	andeq	r3, r1, ip, asr #18
   122ac:	andeq	r3, r1, ip, asr #18
   122b0:	andeq	r3, r1, ip, asr #18
   122b4:	andeq	r3, r1, ip, asr #18
   122b8:	andeq	r3, r1, ip, asr #18
   122bc:	andeq	r3, r1, ip, asr #18
   122c0:	andeq	r3, r1, ip, asr #18
   122c4:	andeq	r3, r1, ip, asr #18
   122c8:	andeq	r3, r1, ip, asr #18
   122cc:	andeq	r3, r1, ip, asr #18
   122d0:	andeq	r3, r1, ip, asr #18
   122d4:	andeq	r3, r1, ip, asr #18
   122d8:	andeq	r3, r1, ip, asr #18
   122dc:	andeq	r3, r1, ip, asr #18
   122e0:	andeq	r3, r1, ip, asr #18
   122e4:	andeq	r3, r1, ip, asr #18
   122e8:	andeq	r3, r1, ip, asr #18
   122ec:	andeq	r3, r1, ip, asr #18
   122f0:	andeq	r3, r1, ip, asr #18
   122f4:	andeq	r3, r1, ip, asr #18
   122f8:	andeq	r3, r1, ip, asr #18
   122fc:	andeq	r3, r1, ip, asr #18
   12300:	andeq	r3, r1, ip, asr #18
   12304:	andeq	r3, r1, ip, asr #18
   12308:	andeq	r3, r1, ip, asr #18
   1230c:	andeq	r3, r1, ip, asr #18
   12310:	andeq	r3, r1, ip, asr #18
   12314:	andeq	r3, r1, ip, asr #18
   12318:	andeq	r3, r1, ip, asr #18
   1231c:	andeq	r3, r1, ip, asr #18
   12320:	andeq	r3, r1, ip, asr #18
   12324:	andeq	r3, r1, ip, asr #18
   12328:	andeq	r3, r1, ip, asr #18
   1232c:	andeq	r3, r1, ip, asr #18
   12330:	andeq	r3, r1, ip, asr #18
   12334:	andeq	r3, r1, ip, asr #18
   12338:	andeq	r3, r1, ip, asr #18
   1233c:	andeq	r3, r1, ip, asr #18
   12340:	andeq	r3, r1, ip, asr #18
   12344:	andeq	r3, r1, ip, asr #18
   12348:	andeq	r3, r1, ip, asr #18
   1234c:	andeq	r3, r1, ip, asr #18
   12350:	andeq	r3, r1, ip, asr #18
   12354:	andeq	r3, r1, ip, asr #18
   12358:	andeq	r3, r1, ip, asr #18
   1235c:	andeq	r3, r1, ip, asr #18
   12360:	andeq	r3, r1, ip, asr #18
   12364:	andeq	r3, r1, ip, asr #18
   12368:	andeq	r3, r1, ip, asr #18
   1236c:	andeq	r3, r1, ip, asr #18
   12370:	andeq	r3, r1, ip, asr #18
   12374:	andeq	r3, r1, ip, asr #18
   12378:	andeq	r3, r1, ip, asr #18
   1237c:	andeq	r3, r1, ip, asr #18
   12380:	andeq	r3, r1, ip, asr #18
   12384:	andeq	r3, r1, ip, asr #18
   12388:	andeq	r3, r1, ip, asr #18
   1238c:	andeq	r3, r1, ip, asr #18
   12390:	andeq	r3, r1, ip, asr #18
   12394:	andeq	r3, r1, ip, asr #18
   12398:	andeq	r3, r1, ip, asr #18
   1239c:	andeq	r3, r1, ip, asr #18
   123a0:	andeq	r3, r1, ip, asr #18
   123a4:	andeq	r3, r1, ip, asr #18
   123a8:	andeq	r3, r1, ip, asr #18
   123ac:	andeq	r2, r1, r8, asr #8
   123b0:	andeq	r2, r1, r4, ror r4
   123b4:	mov	r0, #1
   123b8:	strb	r0, [r9, #8]
   123bc:	b	1203c <__assert_fail@plt+0x390>
   123c0:	movw	r0, #25112	; 0x6218
   123c4:	ldr	r3, [sp, #136]	; 0x88
   123c8:	mov	r1, #0
   123cc:	mov	r2, #10
   123d0:	movt	r0, #4
   123d4:	str	r1, [sp]
   123d8:	sub	r1, fp, #728	; 0x2d8
   123dc:	ldr	r0, [r0]
   123e0:	str	r0, [fp, #-728]	; 0xfffffd28
   123e4:	bl	1b2e0 <__assert_fail@plt+0x9634>
   123e8:	cmp	r0, #0
   123ec:	bne	1395c <__assert_fail@plt+0x1cb0>
   123f0:	mov	r0, #1
   123f4:	str	r0, [sp, #216]	; 0xd8
   123f8:	b	1203c <__assert_fail@plt+0x390>
   123fc:	movw	r0, #25112	; 0x6218
   12400:	movt	r0, #4
   12404:	ldr	r0, [r0]
   12408:	cmp	r0, #0
   1240c:	str	r0, [sp, #172]	; 0xac
   12410:	bne	1203c <__assert_fail@plt+0x390>
   12414:	b	13980 <__assert_fail@plt+0x1cd4>
   12418:	mov	r0, #1
   1241c:	str	r0, [sp, #156]	; 0x9c
   12420:	b	1203c <__assert_fail@plt+0x390>
   12424:	mov	r0, #1
   12428:	str	r0, [sp, #184]	; 0xb8
   1242c:	b	1203c <__assert_fail@plt+0x390>
   12430:	mov	r0, #0
   12434:	strb	r0, [r9, #8]
   12438:	b	1203c <__assert_fail@plt+0x390>
   1243c:	mov	r0, #1
   12440:	str	r0, [sp, #196]	; 0xc4
   12444:	b	1203c <__assert_fail@plt+0x390>
   12448:	movw	r0, #25112	; 0x6218
   1244c:	movt	r0, #4
   12450:	ldr	r0, [r0]
   12454:	bl	14eac <__assert_fail@plt+0x3200>
   12458:	str	r0, [sp, #228]	; 0xe4
   1245c:	b	1203c <__assert_fail@plt+0x390>
   12460:	mov	r0, #1
   12464:	str	r0, [r9, #20]
   12468:	b	1203c <__assert_fail@plt+0x390>
   1246c:	mov	sl, #1
   12470:	b	1203c <__assert_fail@plt+0x390>
   12474:	movw	r0, #25112	; 0x6218
   12478:	movt	r0, #4
   1247c:	ldr	r5, [r0]
   12480:	ldrb	r0, [r5]
   12484:	cmp	r0, #0
   12488:	beq	139a0 <__assert_fail@plt+0x1cf4>
   1248c:	ldr	r0, [sp, #208]	; 0xd0
   12490:	mov	r1, #0
   12494:	mov	r2, #10
   12498:	str	r1, [r0]
   1249c:	mov	r0, r5
   124a0:	sub	r1, fp, #728	; 0x2d8
   124a4:	bl	11ab4 <strtoul@plt>
   124a8:	cmp	r0, #0
   124ac:	beq	12510 <__assert_fail@plt+0x864>
   124b0:	cmn	r0, #1
   124b4:	bne	12520 <__assert_fail@plt+0x874>
   124b8:	ldr	r1, [sp, #208]	; 0xd0
   124bc:	ldr	r1, [r1]
   124c0:	cmp	r1, #34	; 0x22
   124c4:	bne	12520 <__assert_fail@plt+0x874>
   124c8:	b	139c4 <__assert_fail@plt+0x1d18>
   124cc:	mov	r0, #0
   124d0:	strb	r0, [r9]
   124d4:	mov	r0, #1
   124d8:	strb	r0, [r9, #4]
   124dc:	b	1203c <__assert_fail@plt+0x390>
   124e0:	mov	r0, #2
   124e4:	str	r0, [r9, #20]
   124e8:	b	1203c <__assert_fail@plt+0x390>
   124ec:	mov	r0, #1
   124f0:	str	r0, [sp, #112]	; 0x70
   124f4:	b	1203c <__assert_fail@plt+0x390>
   124f8:	mov	r0, #1
   124fc:	str	r0, [sp, #116]	; 0x74
   12500:	b	1203c <__assert_fail@plt+0x390>
   12504:	mov	r0, #0
   12508:	str	r0, [sp, #156]	; 0x9c
   1250c:	b	1203c <__assert_fail@plt+0x390>
   12510:	ldr	r1, [sp, #208]	; 0xd0
   12514:	ldr	r1, [r1]
   12518:	cmp	r1, #22
   1251c:	beq	139cc <__assert_fail@plt+0x1d20>
   12520:	ldr	r1, [fp, #-728]	; 0xfffffd28
   12524:	ldrb	r1, [r1]
   12528:	cmp	r1, #0
   1252c:	bne	13a0c <__assert_fail@plt+0x1d60>
   12530:	movw	r1, #25000	; 0x61a8
   12534:	ldr	r5, [sp, #188]	; 0xbc
   12538:	movt	r1, #4
   1253c:	str	r0, [r1]
   12540:	b	1203c <__assert_fail@plt+0x390>
   12544:	mov	r0, #1
   12548:	b	12038 <__assert_fail@plt+0x38c>
   1254c:	cmn	r0, #1
   12550:	bne	1394c <__assert_fail@plt+0x1ca0>
   12554:	ldr	r0, [sp, #128]	; 0x80
   12558:	str	sl, [sp, #28]
   1255c:	cmp	r0, #0
   12560:	bmi	1259c <__assert_fail@plt+0x8f0>
   12564:	ldr	r1, [sp, #172]	; 0xac
   12568:	ldr	r8, [sp, #196]	; 0xc4
   1256c:	add	r6, sp, #352	; 0x160
   12570:	cmp	r1, #0
   12574:	beq	125a4 <__assert_fail@plt+0x8f8>
   12578:	bl	11c88 <close@plt>
   1257c:	mvn	r0, #0
   12580:	str	r0, [sp, #128]	; 0x80
   12584:	b	125a4 <__assert_fail@plt+0x8f8>
   12588:	movw	r0, #15250	; 0x3b92
   1258c:	movt	r0, #3
   12590:	bl	14900 <__assert_fail@plt+0x2c54>
   12594:	mov	r5, #0
   12598:	b	138f4 <__assert_fail@plt+0x1c48>
   1259c:	ldr	r8, [sp, #196]	; 0xc4
   125a0:	add	r6, sp, #352	; 0x160
   125a4:	ldr	r0, [sp, #28]
   125a8:	orrs	r0, r8, r0
   125ac:	ldr	r0, [sp, #184]	; 0xb8
   125b0:	movweq	r0, #1
   125b4:	cmp	r8, #0
   125b8:	str	r0, [sp, #184]	; 0xb8
   125bc:	movw	r0, #25096	; 0x6208
   125c0:	movt	r0, #4
   125c4:	beq	125e4 <__assert_fail@plt+0x938>
   125c8:	ldr	r0, [r0]
   125cc:	ldr	r1, [sp, #216]	; 0xd8
   125d0:	subs	r0, r0, r5
   125d4:	ldr	r5, [sp, #172]	; 0xac
   125d8:	moveq	r1, r0
   125dc:	str	r1, [sp, #216]	; 0xd8
   125e0:	b	12630 <__assert_fail@plt+0x984>
   125e4:	ldr	r0, [r0]
   125e8:	cmp	r0, r5
   125ec:	bne	1262c <__assert_fail@plt+0x980>
   125f0:	ldr	r0, [sp, #28]
   125f4:	ldr	r5, [sp, #172]	; 0xac
   125f8:	cmp	r0, #0
   125fc:	bne	12630 <__assert_fail@plt+0x984>
   12600:	movw	r1, #14038	; 0x36d6
   12604:	mov	r0, #0
   12608:	mov	r2, #5
   1260c:	movt	r1, #3
   12610:	bl	11934 <dcgettext@plt>
   12614:	mov	r2, r0
   12618:	mov	r0, #0
   1261c:	mov	r1, #0
   12620:	bl	119dc <error@plt>
   12624:	mov	r0, #1
   12628:	bl	13be8 <__assert_fail@plt+0x1f3c>
   1262c:	ldr	r5, [sp, #172]	; 0xac
   12630:	mov	r0, #1
   12634:	bl	11c40 <isatty@plt>
   12638:	sub	r0, r0, #1
   1263c:	cmp	r5, #0
   12640:	clz	r0, r0
   12644:	lsr	r0, r0, #5
   12648:	strb	r0, [r9, #9]
   1264c:	beq	12670 <__assert_fail@plt+0x9c4>
   12650:	movw	r1, #20336	; 0x4f70
   12654:	add	r0, sp, #344	; 0x158
   12658:	add	r3, sp, #348	; 0x15c
   1265c:	mov	r2, #1
   12660:	movt	r1, #3
   12664:	str	r0, [sp]
   12668:	mov	r0, r5
   1266c:	bl	155b0 <__assert_fail@plt+0x3904>
   12670:	ldr	r2, [sp, #220]	; 0xdc
   12674:	movw	r0, #18060	; 0x468c
   12678:	movw	r1, #17900	; 0x45ec
   1267c:	vldr	d9, [pc, #916]	; 12a18 <__assert_fail@plt+0xd6c>
   12680:	vldr	d12, [pc, #920]	; 12a20 <__assert_fail@plt+0xd74>
   12684:	vmov.i32	q5, #0	; 0x00000000
   12688:	mov	r4, #0
   1268c:	str	r8, [sp, #196]	; 0xc4
   12690:	movt	r0, #1
   12694:	movt	r1, #1
   12698:	cmp	r2, #0
   1269c:	movw	r2, #17120	; 0x42e0
   126a0:	moveq	r1, r0
   126a4:	movw	r0, #17084	; 0x42bc
   126a8:	movt	r2, #1
   126ac:	str	r1, [sp, #96]	; 0x60
   126b0:	ldr	r1, [sp, #112]	; 0x70
   126b4:	movt	r0, #1
   126b8:	cmp	r1, #0
   126bc:	movne	r2, r0
   126c0:	movw	r0, #16900	; 0x4204
   126c4:	movt	r0, #1
   126c8:	str	r2, [sp, #204]	; 0xcc
   126cc:	movw	r2, #16992	; 0x4260
   126d0:	movt	r2, #1
   126d4:	movne	r2, r0
   126d8:	ldr	r0, [sp, #228]	; 0xe4
   126dc:	cmp	r1, #0
   126e0:	str	r2, [sp, #200]	; 0xc8
   126e4:	orrne	r0, r0, #4194304	; 0x400000
   126e8:	str	r0, [sp, #228]	; 0xe4
   126ec:	ldr	r0, [sp, #184]	; 0xb8
   126f0:	orr	r0, r0, r8
   126f4:	str	r0, [sp, #20]
   126f8:	ldr	r0, [sp, #148]	; 0x94
   126fc:	add	r1, r0, #240	; 0xf0
   12700:	str	r1, [sp, #92]	; 0x5c
   12704:	add	r1, r0, #112	; 0x70
   12708:	str	r1, [sp, #88]	; 0x58
   1270c:	add	r1, r0, #224	; 0xe0
   12710:	str	r1, [sp, #84]	; 0x54
   12714:	add	r1, r0, #96	; 0x60
   12718:	str	r1, [sp, #80]	; 0x50
   1271c:	add	r1, r0, #208	; 0xd0
   12720:	str	r1, [sp, #76]	; 0x4c
   12724:	add	r1, r0, #80	; 0x50
   12728:	str	r1, [sp, #72]	; 0x48
   1272c:	add	r1, r0, #192	; 0xc0
   12730:	str	r1, [sp, #68]	; 0x44
   12734:	add	r1, r0, #64	; 0x40
   12738:	str	r1, [sp, #64]	; 0x40
   1273c:	add	r1, r0, #176	; 0xb0
   12740:	str	r1, [sp, #60]	; 0x3c
   12744:	add	r1, r0, #48	; 0x30
   12748:	str	r1, [sp, #56]	; 0x38
   1274c:	add	r1, r0, #160	; 0xa0
   12750:	str	r1, [sp, #52]	; 0x34
   12754:	add	r1, r0, #32
   12758:	str	r1, [sp, #48]	; 0x30
   1275c:	add	r1, r0, #144	; 0x90
   12760:	str	r1, [sp, #44]	; 0x2c
   12764:	add	r1, r0, #16
   12768:	add	r0, r0, #128	; 0x80
   1276c:	str	r0, [sp, #36]	; 0x24
   12770:	add	r0, r6, #292	; 0x124
   12774:	str	r1, [sp, #40]	; 0x28
   12778:	str	r0, [sp, #100]	; 0x64
   1277c:	add	r0, r6, #16
   12780:	str	r0, [sp, #32]
   12784:	mov	r0, #0
   12788:	str	r0, [sp, #24]
   1278c:	ldr	r0, [sp, #216]	; 0xd8
   12790:	cmp	r0, #0
   12794:	beq	127ac <__assert_fail@plt+0xb00>
   12798:	add	r3, r9, #40	; 0x28
   1279c:	ldm	r3, {r0, r1, r2, r3}
   127a0:	subs	r0, r2, r0
   127a4:	sbcs	r0, r3, r1
   127a8:	bcs	13850 <__assert_fail@plt+0x1ba4>
   127ac:	add	r0, r9, #72	; 0x48
   127b0:	add	r2, r9, #56	; 0x38
   127b4:	cmp	r5, #0
   127b8:	vst1.64	{d10-d11}, [r0]
   127bc:	add	r0, r9, #88	; 0x58
   127c0:	vst1.64	{d10-d11}, [r2]
   127c4:	str	r2, [sp, #144]	; 0x90
   127c8:	vst1.64	{d10-d11}, [r0]
   127cc:	beq	12834 <__assert_fail@plt+0xb88>
   127d0:	ldr	r1, [sp, #344]	; 0x158
   127d4:	mov	r7, #0
   127d8:	cmp	r1, #0
   127dc:	beq	1285c <__assert_fail@plt+0xbb0>
   127e0:	cmp	r1, #1
   127e4:	bne	12868 <__assert_fail@plt+0xbbc>
   127e8:	ldr	r0, [sp, #348]	; 0x15c
   127ec:	movw	r8, #13708	; 0x358c
   127f0:	movt	r8, #3
   127f4:	ldrb	r2, [r5, r0]
   127f8:	cmp	r2, #46	; 0x2e
   127fc:	beq	1287c <__assert_fail@plt+0xbd0>
   12800:	cmp	r2, #45	; 0x2d
   12804:	bne	1286c <__assert_fail@plt+0xbc0>
   12808:	ldr	r0, [sp, #24]
   1280c:	tst	r0, #1
   12810:	bne	13908 <__assert_fail@plt+0x1c5c>
   12814:	mov	r0, #0
   12818:	movw	r8, #14127	; 0x372f
   1281c:	mov	r4, #0
   12820:	str	r0, [sp, #180]	; 0xb4
   12824:	mov	r0, #1
   12828:	movt	r8, #3
   1282c:	str	r0, [sp, #24]
   12830:	b	128ac <__assert_fail@plt+0xc00>
   12834:	ldr	r0, [sp, #128]	; 0x80
   12838:	cmn	r0, #1
   1283c:	beq	13850 <__assert_fail@plt+0x1ba4>
   12840:	ldr	r8, [r9, #12]
   12844:	mov	r4, r0
   12848:	mov	r1, #0
   1284c:	mvn	r0, #0
   12850:	str	r1, [sp, #180]	; 0xb4
   12854:	str	r0, [sp, #128]	; 0x80
   12858:	b	128ac <__assert_fail@plt+0xc00>
   1285c:	movw	r8, #13708	; 0x358c
   12860:	movt	r8, #3
   12864:	b	1287c <__assert_fail@plt+0xbd0>
   12868:	ldr	r0, [sp, #348]	; 0x15c
   1286c:	add	r0, r5, r0
   12870:	bl	118d4 <strndup@plt>
   12874:	mov	r8, r0
   12878:	mov	r7, r0
   1287c:	mov	r0, r8
   12880:	mov	r1, #131072	; 0x20000
   12884:	str	r7, [sp, #180]	; 0xb4
   12888:	bl	15864 <__assert_fail@plt+0x3bb8>
   1288c:	cmp	r0, #0
   12890:	bmi	138c0 <__assert_fail@plt+0x1c14>
   12894:	mov	r1, #2
   12898:	mov	r2, #1
   1289c:	mov	r4, r0
   128a0:	bl	1bfe8 <__assert_fail@plt+0xa33c>
   128a4:	cmp	r0, #0
   128a8:	bne	138b8 <__assert_fail@plt+0x1c0c>
   128ac:	mov	r0, #3
   128b0:	mov	r1, r4
   128b4:	add	r2, sp, #240	; 0xf0
   128b8:	bl	11988 <__fxstat64@plt>
   128bc:	cmp	r0, #0
   128c0:	str	r8, [sp, #120]	; 0x78
   128c4:	beq	12914 <__assert_fail@plt+0xc68>
   128c8:	ldr	r0, [sp, #208]	; 0xd0
   128cc:	mov	r1, #8
   128d0:	mov	r2, r8
   128d4:	ldr	r5, [r0]
   128d8:	mov	r0, #0
   128dc:	str	r0, [sp, #192]	; 0xc0
   128e0:	mov	r0, #0
   128e4:	bl	19f84 <__assert_fail@plt+0x82d8>
   128e8:	movw	r2, #20348	; 0x4f7c
   128ec:	mov	r3, r0
   128f0:	mov	r0, #0
   128f4:	mov	r1, r5
   128f8:	movt	r2, #3
   128fc:	bl	119dc <error@plt>
   12900:	mov	r0, #0
   12904:	str	r0, [sp, #176]	; 0xb0
   12908:	mov	r0, #0
   1290c:	str	r0, [sp, #140]	; 0x8c
   12910:	b	12a5c <__assert_fail@plt+0xdb0>
   12914:	ldr	r0, [sp, #108]	; 0x6c
   12918:	ldrd	r0, [r0]
   1291c:	str	r0, [sp, #176]	; 0xb0
   12920:	ldr	r0, [sp, #104]	; 0x68
   12924:	str	r1, [sp, #140]	; 0x8c
   12928:	ldrd	r0, [r0]
   1292c:	str	r0, [sp, #232]	; 0xe8
   12930:	sub	r0, fp, #728	; 0x2d8
   12934:	str	r1, [sp, #236]	; 0xec
   12938:	bl	11928 <time@plt>
   1293c:	cmn	r0, #1
   12940:	beq	12a28 <__assert_fail@plt+0xd7c>
   12944:	ldr	r1, [sp, #320]	; 0x140
   12948:	ldr	r0, [fp, #-728]	; 0xfffffd28
   1294c:	bl	11b5c <difftime@plt>
   12950:	movw	r0, #25000	; 0x61a8
   12954:	movw	r1, #20864	; 0x5180
   12958:	vmov.f64	d8, d0
   1295c:	movt	r0, #4
   12960:	movt	r1, #1
   12964:	ldr	r0, [r0]
   12968:	mul	r0, r0, r1
   1296c:	vmov	s0, r0
   12970:	vcvt.f64.u32	d16, s0
   12974:	vcmpe.f64	d8, d16
   12978:	vmrs	APSR_nzcv, fpscr
   1297c:	ble	12a54 <__assert_fail@plt+0xda8>
   12980:	movw	r1, #14159	; 0x374f
   12984:	mov	r0, #0
   12988:	mov	r2, #5
   1298c:	movt	r1, #3
   12990:	bl	11934 <dcgettext@plt>
   12994:	ldr	r2, [sp, #120]	; 0x78
   12998:	mov	r8, r0
   1299c:	mov	r0, #0
   129a0:	mov	r1, #8
   129a4:	bl	19f84 <__assert_fail@plt+0x82d8>
   129a8:	mov	sl, r0
   129ac:	movw	r0, #25000	; 0x61a8
   129b0:	movw	r7, #17324	; 0x43ac
   129b4:	mov	r2, #5
   129b8:	movt	r0, #4
   129bc:	movt	r7, #3
   129c0:	ldr	r6, [r0]
   129c4:	mov	r0, #0
   129c8:	mov	r1, r7
   129cc:	bl	11934 <dcgettext@plt>
   129d0:	mov	r5, r0
   129d4:	mov	r0, #0
   129d8:	mov	r1, r7
   129dc:	mov	r2, #5
   129e0:	bl	11934 <dcgettext@plt>
   129e4:	vdiv.f64	d16, d8, d9
   129e8:	mov	r2, r8
   129ec:	ldr	r8, [sp, #120]	; 0x78
   129f0:	str	r0, [sp, #16]
   129f4:	mov	r0, #0
   129f8:	mov	r1, #0
   129fc:	mov	r3, sl
   12a00:	str	r6, [sp]
   12a04:	str	r5, [sp, #4]
   12a08:	add	r6, sp, #352	; 0x160
   12a0c:	vstr	d16, [sp, #8]
   12a10:	bl	119dc <error@plt>
   12a14:	b	12a54 <__assert_fail@plt+0xda8>
   12a18:	andeq	r0, r0, r0
   12a1c:	rscsmi	r1, r5, r0, lsl #16
   12a20:	andeq	r0, r0, r0
   12a24:	subsmi	r0, r9, r0
   12a28:	ldr	r0, [sp, #208]	; 0xd0
   12a2c:	movw	r1, #14135	; 0x3737
   12a30:	mov	r2, #5
   12a34:	movt	r1, #3
   12a38:	ldr	r5, [r0]
   12a3c:	mov	r0, #0
   12a40:	bl	11934 <dcgettext@plt>
   12a44:	mov	r2, r0
   12a48:	mov	r0, #0
   12a4c:	mov	r1, r5
   12a50:	bl	119dc <error@plt>
   12a54:	mov	r0, #1
   12a58:	str	r0, [sp, #192]	; 0xc0
   12a5c:	movw	r1, #17453	; 0x442d
   12a60:	mov	r0, r4
   12a64:	movt	r1, #3
   12a68:	bl	11814 <fdopen@plt>
   12a6c:	cmp	r0, #0
   12a70:	beq	138c0 <__assert_fail@plt+0x1c14>
   12a74:	mov	r4, r0
   12a78:	movw	r0, #25096	; 0x6208
   12a7c:	mov	r1, #0
   12a80:	movt	r0, #4
   12a84:	str	r1, [r9, #24]
   12a88:	str	r1, [r9, #28]
   12a8c:	str	r1, [r9, #32]
   12a90:	strb	r1, [r9, #10]
   12a94:	str	r1, [sp, #384]	; 0x180
   12a98:	str	r8, [sp, #380]	; 0x17c
   12a9c:	str	r1, [sp, #360]	; 0x168
   12aa0:	str	r1, [sp, #356]	; 0x164
   12aa4:	str	r4, [sp, #376]	; 0x178
   12aa8:	ldr	sl, [r0]
   12aac:	mov	r0, #128	; 0x80
   12ab0:	str	r0, [sp, #368]	; 0x170
   12ab4:	ldr	r0, [r9, #20]
   12ab8:	str	r0, [sp, #168]	; 0xa8
   12abc:	mov	r0, #128	; 0x80
   12ac0:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12ac4:	mov	r1, #1
   12ac8:	mov	r2, #2
   12acc:	mov	r3, r4
   12ad0:	mov	r5, r0
   12ad4:	str	r0, [sp, #364]	; 0x16c
   12ad8:	str	r4, [sp, #212]	; 0xd4
   12adc:	bl	119b8 <fread@plt>
   12ae0:	mov	r4, r0
   12ae4:	ldr	r0, [sp, #192]	; 0xc0
   12ae8:	cmp	r0, #0
   12aec:	mov	r1, r0
   12af0:	add	r0, sp, #232	; 0xe8
   12af4:	movne	r1, r0
   12af8:	cmp	r4, #3
   12afc:	str	r1, [sp, #152]	; 0x98
   12b00:	bcs	13a48 <__assert_fail@plt+0x1d9c>
   12b04:	cmp	r4, #2
   12b08:	bne	12b34 <__assert_fail@plt+0xe88>
   12b0c:	ldrb	r0, [r5, #1]
   12b10:	cmp	r0, #0
   12b14:	bne	12b34 <__assert_fail@plt+0xe88>
   12b18:	bl	11a84 <__ctype_b_loc@plt>
   12b1c:	ldrb	r1, [r5]
   12b20:	ldr	r0, [r0]
   12b24:	add	r0, r0, r1, lsl #1
   12b28:	ldrb	r0, [r0, #1]
   12b2c:	tst	r0, #8
   12b30:	bne	131a4 <__assert_fail@plt+0x14f8>
   12b34:	ldr	r3, [sp, #212]	; 0xd4
   12b38:	add	r0, r5, r4
   12b3c:	rsb	r2, r4, #10
   12b40:	mov	r1, #1
   12b44:	bl	119b8 <fread@plt>
   12b48:	add	r5, r0, r4
   12b4c:	ldr	r4, [sp, #364]	; 0x16c
   12b50:	cmp	r5, #10
   12b54:	bcc	12b74 <__assert_fail@plt+0xec8>
   12b58:	movw	r1, #17329	; 0x43b1
   12b5c:	mov	r0, r4
   12b60:	mov	r2, #10
   12b64:	movt	r1, #3
   12b68:	bl	11aa8 <bcmp@plt>
   12b6c:	cmp	r0, #0
   12b70:	beq	12fd4 <__assert_fail@plt+0x1328>
   12b74:	ldr	r0, [sp, #368]	; 0x170
   12b78:	cmp	r0, #255	; 0xff
   12b7c:	bhi	12ba0 <__assert_fail@plt+0xef4>
   12b80:	ldr	r1, [sp, #32]
   12b84:	mov	r0, #256	; 0x100
   12b88:	mov	r2, #1
   12b8c:	str	r0, [sp, #368]	; 0x170
   12b90:	mov	r0, r4
   12b94:	bl	1ae48 <__assert_fail@plt+0x919c>
   12b98:	mov	r4, r0
   12b9c:	str	r0, [sp, #364]	; 0x16c
   12ba0:	cmp	r5, #255	; 0xff
   12ba4:	bgt	12bcc <__assert_fail@plt+0xf20>
   12ba8:	ldr	r3, [sp, #376]	; 0x178
   12bac:	add	r0, r4, r5
   12bb0:	rsb	r2, r5, #256	; 0x100
   12bb4:	mov	r1, #1
   12bb8:	bl	119b8 <fread@plt>
   12bbc:	add	r0, r0, r5
   12bc0:	cmp	r0, #256	; 0x100
   12bc4:	bne	13aa0 <__assert_fail@plt+0x1df4>
   12bc8:	ldr	r4, [sp, #364]	; 0x16c
   12bcc:	ldr	r1, [sp, #148]	; 0x94
   12bd0:	add	r0, r4, #256	; 0x100
   12bd4:	ldr	r5, [sp, #188]	; 0xbc
   12bd8:	cmp	r1, r0
   12bdc:	ldrcc	r0, [sp, #100]	; 0x64
   12be0:	cmpcc	r4, r0
   12be4:	bcc	12cdc <__assert_fail@plt+0x1030>
   12be8:	mov	r0, r4
   12bec:	mov	r1, #224	; 0xe0
   12bf0:	vld2.8	{d16-d19}, [r0], r1
   12bf4:	ldr	r1, [sp, #148]	; 0x94
   12bf8:	vst1.32	{d16-d17}, [r1]
   12bfc:	ldr	r1, [sp, #36]	; 0x24
   12c00:	vst1.32	{d18-d19}, [r1]
   12c04:	add	r1, r4, #32
   12c08:	vld2.8	{d16-d19}, [r1]
   12c0c:	ldr	r1, [sp, #40]	; 0x28
   12c10:	vst1.32	{d16-d17}, [r1]
   12c14:	ldr	r1, [sp, #44]	; 0x2c
   12c18:	vst1.32	{d18-d19}, [r1]
   12c1c:	add	r1, r4, #64	; 0x40
   12c20:	vld2.8	{d16-d19}, [r1]
   12c24:	ldr	r1, [sp, #48]	; 0x30
   12c28:	vst1.32	{d16-d17}, [r1]
   12c2c:	ldr	r1, [sp, #52]	; 0x34
   12c30:	vst1.32	{d18-d19}, [r1]
   12c34:	add	r1, r4, #96	; 0x60
   12c38:	vld2.8	{d16-d19}, [r1]
   12c3c:	ldr	r1, [sp, #56]	; 0x38
   12c40:	vst1.32	{d16-d17}, [r1]
   12c44:	ldr	r1, [sp, #60]	; 0x3c
   12c48:	vst1.32	{d18-d19}, [r1]
   12c4c:	add	r1, r4, #128	; 0x80
   12c50:	vld2.8	{d16-d19}, [r1]
   12c54:	ldr	r1, [sp, #64]	; 0x40
   12c58:	vorr	q10, q8, q8
   12c5c:	vorr	q8, q9, q9
   12c60:	vst1.32	{d20-d21}, [r1]
   12c64:	ldr	r1, [sp, #68]	; 0x44
   12c68:	vst1.32	{d16-d17}, [r1]
   12c6c:	add	r1, r4, #160	; 0xa0
   12c70:	vld2.8	{d16-d19}, [r1]
   12c74:	ldr	r1, [sp, #72]	; 0x48
   12c78:	vorr	q10, q8, q8
   12c7c:	vorr	q8, q9, q9
   12c80:	vst1.32	{d20-d21}, [r1]
   12c84:	ldr	r1, [sp, #76]	; 0x4c
   12c88:	vst1.32	{d16-d17}, [r1]
   12c8c:	add	r1, r4, #192	; 0xc0
   12c90:	vld2.8	{d16-d19}, [r1]
   12c94:	ldr	r1, [sp, #80]	; 0x50
   12c98:	vorr	q10, q8, q8
   12c9c:	vorr	q8, q9, q9
   12ca0:	vst1.32	{d20-d21}, [r1]
   12ca4:	ldr	r1, [sp, #84]	; 0x54
   12ca8:	vst1.32	{d16-d17}, [r1]
   12cac:	vld2.8	{d16-d19}, [r0]
   12cb0:	ldr	r0, [sp, #88]	; 0x58
   12cb4:	vorr	q10, q8, q8
   12cb8:	vorr	q8, q9, q9
   12cbc:	vst1.32	{d20-d21}, [r0]
   12cc0:	ldr	r0, [sp, #92]	; 0x5c
   12cc4:	vst1.32	{d16-d17}, [r0]
   12cc8:	mov	r0, #1
   12ccc:	str	r0, [sp, #132]	; 0x84
   12cd0:	mov	r0, #0
   12cd4:	str	r0, [sp, #164]	; 0xa4
   12cd8:	b	12d18 <__assert_fail@plt+0x106c>
   12cdc:	mov	r1, #0
   12ce0:	add	r0, r4, #1
   12ce4:	str	r1, [sp, #164]	; 0xa4
   12ce8:	mov	r1, #0
   12cec:	ldrb	r3, [r0, #-1]
   12cf0:	add	r2, r6, r1
   12cf4:	add	r1, r1, #1
   12cf8:	cmp	r1, #128	; 0x80
   12cfc:	strb	r3, [r2, #36]	; 0x24
   12d00:	ldrb	r3, [r0]
   12d04:	add	r0, r0, #2
   12d08:	strb	r3, [r2, #164]	; 0xa4
   12d0c:	bne	12cec <__assert_fail@plt+0x1040>
   12d10:	mov	r0, #1
   12d14:	str	r0, [sp, #132]	; 0x84
   12d18:	movw	r4, #16108	; 0x3eec
   12d1c:	movw	r0, #15325	; 0x3bdd
   12d20:	movt	r4, #1
   12d24:	movt	r0, #3
   12d28:	mov	r6, r4
   12d2c:	str	r0, [sp, #124]	; 0x7c
   12d30:	sub	r0, r5, sl
   12d34:	str	r0, [sp, #220]	; 0xdc
   12d38:	mov	r0, #12
   12d3c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12d40:	mov	r5, #0
   12d44:	str	r6, [r0]
   12d48:	mov	r4, r0
   12d4c:	add	r6, r9, #24
   12d50:	str	r5, [r0, #4]
   12d54:	str	r5, [r0, #8]
   12d58:	ldr	r0, [r9, #28]
   12d5c:	mov	r1, r6
   12d60:	str	r6, [sp, #160]	; 0xa0
   12d64:	cmp	r0, #0
   12d68:	addne	r1, r0, #8
   12d6c:	ldr	r0, [sp, #156]	; 0x9c
   12d70:	str	r4, [r1]
   12d74:	str	r4, [r9, #28]
   12d78:	cmp	r0, #0
   12d7c:	beq	12db4 <__assert_fail@plt+0x1108>
   12d80:	mov	r0, #12
   12d84:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12d88:	mov	r4, r0
   12d8c:	movw	r0, #16688	; 0x4130
   12d90:	mov	r1, r6
   12d94:	movt	r0, #1
   12d98:	stm	r4, {r0, r5}
   12d9c:	ldr	r0, [r9, #28]
   12da0:	str	r5, [r4, #8]
   12da4:	cmp	r0, #0
   12da8:	addne	r1, r0, #8
   12dac:	str	r4, [r1]
   12db0:	str	r4, [r9, #28]
   12db4:	ldr	r0, [sp, #220]	; 0xdc
   12db8:	cmp	r0, #1
   12dbc:	blt	12e9c <__assert_fail@plt+0x11f0>
   12dc0:	ldr	r0, [sp, #224]	; 0xe0
   12dc4:	add	r8, r0, sl, lsl #2
   12dc8:	ldr	r0, [sp, #116]	; 0x74
   12dcc:	cmp	r0, #0
   12dd0:	beq	12f18 <__assert_fail@plt+0x126c>
   12dd4:	ldr	r6, [sp, #220]	; 0xdc
   12dd8:	mov	r0, #1
   12ddc:	strb	r0, [r9, #10]
   12de0:	mov	r0, #32
   12de4:	ldr	r4, [r8]
   12de8:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12dec:	ldr	sl, [sp, #228]	; 0xe4
   12df0:	mov	r7, r0
   12df4:	add	r0, r0, #16
   12df8:	vst1.32	{d10-d11}, [r0]
   12dfc:	mov	r5, r7
   12e00:	mov	r0, #20
   12e04:	vst1.32	{d10-d11}, [r5], r0
   12e08:	mov	r0, sl
   12e0c:	bl	1dcc4 <__assert_fail@plt+0xc018>
   12e10:	mov	r0, #100	; 0x64
   12e14:	str	r0, [r7, #4]
   12e18:	mov	r0, #100	; 0x64
   12e1c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12e20:	str	r0, [r7]
   12e24:	mov	r0, #0
   12e28:	str	r0, [r5]
   12e2c:	mov	r0, r4
   12e30:	mov	r5, #0
   12e34:	str	sl, [r7, #12]
   12e38:	str	r5, [r7, #16]
   12e3c:	bl	11ac0 <strlen@plt>
   12e40:	mov	r1, r0
   12e44:	mov	r0, r4
   12e48:	mov	r2, r7
   12e4c:	bl	1c420 <__assert_fail@plt+0xa774>
   12e50:	cmp	r0, #0
   12e54:	bne	13934 <__assert_fail@plt+0x1c88>
   12e58:	mov	r0, #12
   12e5c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12e60:	mov	r4, r0
   12e64:	movw	r0, #16720	; 0x4150
   12e68:	add	r8, r8, #4
   12e6c:	movt	r0, #1
   12e70:	stm	r4, {r0, r7}
   12e74:	ldr	r0, [r9, #28]
   12e78:	str	r5, [r4, #8]
   12e7c:	mov	r5, #0
   12e80:	cmp	r0, #0
   12e84:	add	r1, r0, #8
   12e88:	addeq	r1, r9, #24
   12e8c:	subs	r6, r6, #1
   12e90:	str	r4, [r1]
   12e94:	str	r4, [r9, #28]
   12e98:	bne	12dd8 <__assert_fail@plt+0x112c>
   12e9c:	ldr	r0, [sp, #168]	; 0xa8
   12ea0:	cmp	r0, #2
   12ea4:	beq	12ee4 <__assert_fail@plt+0x1238>
   12ea8:	ldr	r8, [sp, #196]	; 0xc4
   12eac:	ldr	sl, [sp, #176]	; 0xb0
   12eb0:	ldr	r7, [sp, #160]	; 0xa0
   12eb4:	cmp	r0, #1
   12eb8:	bne	13040 <__assert_fail@plt+0x1394>
   12ebc:	mov	r0, #1
   12ec0:	strb	r0, [r9, #10]
   12ec4:	mov	r0, #12
   12ec8:	ldrb	r5, [r9, #8]
   12ecc:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12ed0:	cmp	r5, #0
   12ed4:	beq	13004 <__assert_fail@plt+0x1358>
   12ed8:	movw	r1, #17208	; 0x4338
   12edc:	movt	r1, #1
   12ee0:	b	13018 <__assert_fail@plt+0x136c>
   12ee4:	mov	r0, #1
   12ee8:	strb	r0, [r9, #10]
   12eec:	mov	r0, #12
   12ef0:	ldrb	r5, [r9, #8]
   12ef4:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12ef8:	ldr	r8, [sp, #196]	; 0xc4
   12efc:	ldr	sl, [sp, #176]	; 0xb0
   12f00:	ldr	r7, [sp, #160]	; 0xa0
   12f04:	cmp	r5, #0
   12f08:	beq	13010 <__assert_fail@plt+0x1364>
   12f0c:	movw	r1, #17312	; 0x43a0
   12f10:	movt	r1, #1
   12f14:	b	13018 <__assert_fail@plt+0x136c>
   12f18:	ldr	r0, [sp, #112]	; 0x70
   12f1c:	cmp	r0, #0
   12f20:	beq	13244 <__assert_fail@plt+0x1598>
   12f24:	ldr	r0, [sp, #188]	; 0xbc
   12f28:	sub	r6, r0, sl
   12f2c:	b	12f44 <__assert_fail@plt+0x1298>
   12f30:	str	r4, [r9, #24]
   12f34:	add	r8, r8, #4
   12f38:	subs	r6, r6, #1
   12f3c:	str	r4, [r9, #28]
   12f40:	beq	12e9c <__assert_fail@plt+0x11f0>
   12f44:	mov	r0, #1
   12f48:	movw	r1, #16110	; 0x3eee
   12f4c:	strb	r0, [r9, #10]
   12f50:	movt	r1, #3
   12f54:	ldr	r7, [r8]
   12f58:	mov	r0, r7
   12f5c:	bl	11c10 <strpbrk@plt>
   12f60:	cmp	r0, #0
   12f64:	beq	12f80 <__assert_fail@plt+0x12d4>
   12f68:	mov	r0, #12
   12f6c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12f70:	mov	r4, r0
   12f74:	movw	r0, #16804	; 0x41a4
   12f78:	movt	r0, #1
   12f7c:	b	12fa8 <__assert_fail@plt+0x12fc>
   12f80:	bl	119ac <__ctype_get_mb_cur_max@plt>
   12f84:	mov	r5, r0
   12f88:	mov	r0, #12
   12f8c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   12f90:	ldr	r1, [sp, #200]	; 0xc8
   12f94:	cmp	r5, #1
   12f98:	mov	r4, r0
   12f9c:	ldr	r0, [sp, #204]	; 0xcc
   12fa0:	mov	r5, #0
   12fa4:	moveq	r0, r1
   12fa8:	stm	r4, {r0, r7}
   12fac:	ldr	r0, [r9, #28]
   12fb0:	str	r5, [r4, #8]
   12fb4:	cmp	r0, #0
   12fb8:	beq	12f30 <__assert_fail@plt+0x1284>
   12fbc:	str	r4, [r0, #8]
   12fc0:	add	r8, r8, #4
   12fc4:	subs	r6, r6, #1
   12fc8:	str	r4, [r9, #28]
   12fcc:	bne	12f44 <__assert_fail@plt+0x1298>
   12fd0:	b	12e9c <__assert_fail@plt+0x11f0>
   12fd4:	mov	r0, #0
   12fd8:	movw	r4, #15496	; 0x3c88
   12fdc:	ldr	r5, [sp, #188]	; 0xbc
   12fe0:	str	r0, [sp, #164]	; 0xa4
   12fe4:	movw	r0, #15257	; 0x3b99
   12fe8:	movt	r4, #1
   12fec:	movt	r0, #3
   12ff0:	mov	r6, r4
   12ff4:	str	r0, [sp, #124]	; 0x7c
   12ff8:	mov	r0, #0
   12ffc:	str	r0, [sp, #132]	; 0x84
   13000:	b	12d30 <__assert_fail@plt+0x1084>
   13004:	movw	r1, #17156	; 0x4304
   13008:	movt	r1, #1
   1300c:	b	13018 <__assert_fail@plt+0x136c>
   13010:	movw	r1, #17260	; 0x436c
   13014:	movt	r1, #1
   13018:	str	r1, [r0]
   1301c:	ldr	r1, [r9, #28]
   13020:	mov	r5, #0
   13024:	str	r5, [r0, #4]
   13028:	str	r5, [r0, #8]
   1302c:	cmp	r1, #0
   13030:	add	r2, r1, #8
   13034:	addeq	r2, r9, #24
   13038:	str	r0, [r2]
   1303c:	str	r0, [r9, #28]
   13040:	cmp	r8, #0
   13044:	beq	1307c <__assert_fail@plt+0x13d0>
   13048:	mov	r0, #12
   1304c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   13050:	movw	r1, #17364	; 0x43d4
   13054:	movt	r1, #1
   13058:	str	r1, [r0]
   1305c:	ldr	r1, [sp, #144]	; 0x90
   13060:	stmib	r0, {r1, r5}
   13064:	ldr	r1, [r9, #28]
   13068:	cmp	r1, #0
   1306c:	add	r2, r1, #8
   13070:	addeq	r2, r9, #24
   13074:	str	r0, [r2]
   13078:	str	r0, [r9, #28]
   1307c:	ldr	r0, [sp, #184]	; 0xb8
   13080:	add	r6, sp, #352	; 0x160
   13084:	cmp	r0, #0
   13088:	beq	130d4 <__assert_fail@plt+0x1428>
   1308c:	ldrb	r5, [r9]
   13090:	mov	r0, #12
   13094:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   13098:	movw	r2, #17644	; 0x44ec
   1309c:	movw	r1, #17744	; 0x4550
   130a0:	cmp	r5, #0
   130a4:	mov	r5, #0
   130a8:	movt	r2, #1
   130ac:	movt	r1, #1
   130b0:	movne	r1, r2
   130b4:	mov	r2, r7
   130b8:	stm	r0, {r1, r5}
   130bc:	ldr	r1, [r9, #28]
   130c0:	str	r5, [r0, #8]
   130c4:	cmp	r1, #0
   130c8:	addne	r2, r1, #8
   130cc:	str	r0, [r2]
   130d0:	str	r0, [r9, #28]
   130d4:	mov	r0, #12
   130d8:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   130dc:	ldr	r1, [sp, #216]	; 0xd8
   130e0:	cmp	r1, #0
   130e4:	beq	130f4 <__assert_fail@plt+0x1448>
   130e8:	movw	r1, #17812	; 0x4594
   130ec:	movt	r1, #1
   130f0:	b	130fc <__assert_fail@plt+0x1450>
   130f4:	movw	r1, #17868	; 0x45cc
   130f8:	movt	r1, #1
   130fc:	str	r1, [r0]
   13100:	ldr	r1, [sp, #136]	; 0x88
   13104:	str	r1, [r0, #4]
   13108:	ldr	r1, [r9, #28]
   1310c:	str	r5, [r0, #8]
   13110:	cmp	r1, #0
   13114:	addne	r7, r1, #8
   13118:	str	r0, [r7]
   1311c:	str	r0, [r9, #28]
   13120:	ldr	r0, [sp, #220]	; 0xdc
   13124:	cmp	r0, #2
   13128:	movw	r0, #18228	; 0x4734
   1312c:	movt	r0, #1
   13130:	blt	13140 <__assert_fail@plt+0x1494>
   13134:	ldr	r0, [r4, #8]
   13138:	str	r0, [r9, #32]
   1313c:	ldr	r0, [sp, #96]	; 0x60
   13140:	cmp	r8, #0
   13144:	str	r0, [r9, #36]	; 0x24
   13148:	beq	1316c <__assert_fail@plt+0x14c0>
   1314c:	movw	r1, #15329	; 0x3be1
   13150:	mov	r0, #0
   13154:	mov	r2, #5
   13158:	movt	r1, #3
   1315c:	bl	11934 <dcgettext@plt>
   13160:	ldr	r1, [sp, #380]	; 0x17c
   13164:	ldr	r2, [sp, #124]	; 0x7c
   13168:	bl	11868 <printf@plt>
   1316c:	ldr	r0, [sp, #376]	; 0x178
   13170:	bl	11c7c <getc@plt>
   13174:	ldr	r1, [sp, #164]	; 0xa4
   13178:	str	r0, [sp, #352]	; 0x160
   1317c:	cmp	r1, #0
   13180:	cmnne	r0, #1
   13184:	bne	13194 <__assert_fail@plt+0x14e8>
   13188:	cmn	r0, #1
   1318c:	bne	1341c <__assert_fail@plt+0x1770>
   13190:	b	1343c <__assert_fail@plt+0x1790>
   13194:	ldr	r1, [sp, #376]	; 0x178
   13198:	bl	11ae4 <ungetc@plt>
   1319c:	str	r5, [sp, #352]	; 0x160
   131a0:	b	1341c <__assert_fail@plt+0x1770>
   131a4:	sub	r8, r1, #48	; 0x30
   131a8:	cmp	r8, #2
   131ac:	blt	1331c <__assert_fail@plt+0x1670>
   131b0:	movw	r1, #15612	; 0x3cfc
   131b4:	mov	r0, #0
   131b8:	mov	r2, #5
   131bc:	mov	r4, #0
   131c0:	movt	r1, #3
   131c4:	bl	11934 <dcgettext@plt>
   131c8:	ldr	r7, [sp, #120]	; 0x78
   131cc:	mov	sl, r0
   131d0:	mov	r0, #0
   131d4:	mov	r1, #8
   131d8:	mov	r2, r7
   131dc:	bl	19f84 <__assert_fail@plt+0x82d8>
   131e0:	mov	r3, r0
   131e4:	ldrb	r0, [r5, #1]
   131e8:	mov	r1, #0
   131ec:	mov	r2, sl
   131f0:	str	r0, [sp]
   131f4:	mov	r0, #0
   131f8:	bl	119dc <error@plt>
   131fc:	movw	r1, #14948	; 0x3a64
   13200:	mov	r0, #0
   13204:	mov	r2, #5
   13208:	movt	r1, #3
   1320c:	bl	11934 <dcgettext@plt>
   13210:	mov	r5, r0
   13214:	mov	r0, #0
   13218:	mov	r1, #8
   1321c:	mov	r2, r7
   13220:	bl	19f84 <__assert_fail@plt+0x82d8>
   13224:	mov	r3, r0
   13228:	mov	r0, #0
   1322c:	mov	r1, #0
   13230:	mov	r2, r5
   13234:	str	r8, [sp]
   13238:	bl	119dc <error@plt>
   1323c:	ldr	r8, [sp, #196]	; 0xc4
   13240:	b	137fc <__assert_fail@plt+0x1b50>
   13244:	ldr	r0, [sp, #188]	; 0xbc
   13248:	sub	sl, r0, sl
   1324c:	b	13264 <__assert_fail@plt+0x15b8>
   13250:	str	r4, [r9, #24]
   13254:	add	r8, r8, #4
   13258:	subs	sl, sl, #1
   1325c:	str	r4, [r9, #28]
   13260:	beq	12e9c <__assert_fail@plt+0x11f0>
   13264:	mov	r0, #1
   13268:	movw	r1, #16110	; 0x3eee
   1326c:	strb	r0, [r9, #10]
   13270:	movt	r1, #3
   13274:	ldr	r7, [r8]
   13278:	mov	r0, r7
   1327c:	bl	11c10 <strpbrk@plt>
   13280:	cmp	r0, #0
   13284:	beq	132c8 <__assert_fail@plt+0x161c>
   13288:	mov	r0, #12
   1328c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   13290:	mov	r4, r0
   13294:	movw	r0, #16852	; 0x41d4
   13298:	movt	r0, #1
   1329c:	stm	r4, {r0, r7}
   132a0:	ldr	r0, [r9, #28]
   132a4:	str	r5, [r4, #8]
   132a8:	cmp	r0, #0
   132ac:	beq	13250 <__assert_fail@plt+0x15a4>
   132b0:	str	r4, [r0, #8]
   132b4:	add	r8, r8, #4
   132b8:	subs	sl, sl, #1
   132bc:	str	r4, [r9, #28]
   132c0:	bne	13264 <__assert_fail@plt+0x15b8>
   132c4:	b	12e9c <__assert_fail@plt+0x11f0>
   132c8:	bl	119ac <__ctype_get_mb_cur_max@plt>
   132cc:	mov	r5, r0
   132d0:	mov	r0, #12
   132d4:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   132d8:	ldr	r1, [sp, #200]	; 0xc8
   132dc:	cmp	r5, #1
   132e0:	mov	r4, r0
   132e4:	ldr	r0, [sp, #204]	; 0xcc
   132e8:	mov	r5, #0
   132ec:	moveq	r0, r1
   132f0:	stm	r4, {r0, r7}
   132f4:	ldr	r0, [r9, #28]
   132f8:	str	r5, [r4, #8]
   132fc:	cmp	r0, #0
   13300:	beq	13250 <__assert_fail@plt+0x15a4>
   13304:	str	r4, [r0, #8]
   13308:	add	r8, r8, #4
   1330c:	subs	sl, sl, #1
   13310:	str	r4, [r9, #28]
   13314:	bne	13264 <__assert_fail@plt+0x15b8>
   13318:	b	12e9c <__assert_fail@plt+0x11f0>
   1331c:	cmp	r8, #1
   13320:	bne	13360 <__assert_fail@plt+0x16b4>
   13324:	ldr	r0, [r9, #20]
   13328:	ldr	r8, [sp, #196]	; 0xc4
   1332c:	cmp	r0, #2
   13330:	bne	13388 <__assert_fail@plt+0x16dc>
   13334:	movw	r1, #15021	; 0x3aad
   13338:	mov	r0, #0
   1333c:	mov	r2, #5
   13340:	mov	r4, #0
   13344:	movt	r1, #3
   13348:	bl	11934 <dcgettext@plt>
   1334c:	mov	r2, r0
   13350:	mov	r0, #0
   13354:	mov	r1, #0
   13358:	bl	119dc <error@plt>
   1335c:	b	137fc <__assert_fail@plt+0x1b50>
   13360:	mov	r0, #1
   13364:	movw	r4, #15496	; 0x3c88
   13368:	ldr	r5, [sp, #188]	; 0xbc
   1336c:	str	r0, [sp, #164]	; 0xa4
   13370:	mov	r0, #0
   13374:	movt	r4, #1
   13378:	str	r0, [sp, #132]	; 0x84
   1337c:	movw	r0, #15249	; 0x3b91
   13380:	movt	r0, #3
   13384:	b	12d28 <__assert_fail@plt+0x107c>
   13388:	mov	r0, #0
   1338c:	ldr	r5, [sp, #188]	; 0xbc
   13390:	ldr	r6, [sp, #120]	; 0x78
   13394:	str	r0, [sp, #132]	; 0x84
   13398:	mov	r0, #1
   1339c:	str	r0, [sp, #164]	; 0xa4
   133a0:	ldr	r0, [sp, #20]
   133a4:	cmp	r0, #0
   133a8:	ldrne	r0, [sp, #168]	; 0xa8
   133ac:	cmpne	r0, #1
   133b0:	beq	133f8 <__assert_fail@plt+0x174c>
   133b4:	movw	r1, #15193	; 0x3b59
   133b8:	mov	r0, #0
   133bc:	mov	r2, #5
   133c0:	movt	r1, #3
   133c4:	str	r0, [sp, #132]	; 0x84
   133c8:	mov	r0, #0
   133cc:	bl	11934 <dcgettext@plt>
   133d0:	mov	r4, r0
   133d4:	mov	r0, #0
   133d8:	mov	r1, #8
   133dc:	mov	r2, r6
   133e0:	bl	19f84 <__assert_fail@plt+0x82d8>
   133e4:	mov	r3, r0
   133e8:	mov	r0, #0
   133ec:	mov	r1, #0
   133f0:	mov	r2, r4
   133f4:	bl	119dc <error@plt>
   133f8:	movw	r0, #15249	; 0x3b91
   133fc:	movw	r4, #15496	; 0x3c88
   13400:	movt	r0, #3
   13404:	movt	r4, #1
   13408:	str	r0, [sp, #124]	; 0x7c
   1340c:	mov	r0, #1
   13410:	mov	r6, r4
   13414:	str	r0, [sp, #168]	; 0xa8
   13418:	b	12d30 <__assert_fail@plt+0x1084>
   1341c:	ldr	r1, [r9, #36]	; 0x24
   13420:	mov	r0, r6
   13424:	blx	r1
   13428:	cmp	r0, #8
   1342c:	beq	1343c <__assert_fail@plt+0x1790>
   13430:	ldr	r0, [sp, #352]	; 0x160
   13434:	cmn	r0, #1
   13438:	bne	1341c <__assert_fail@plt+0x1770>
   1343c:	cmp	r8, #0
   13440:	beq	137b0 <__assert_fail@plt+0x1b04>
   13444:	ldr	r0, [sp, #132]	; 0x84
   13448:	cmp	r0, #0
   1344c:	beq	134d0 <__assert_fail@plt+0x1824>
   13450:	movw	r1, #15363	; 0x3c03
   13454:	mov	r0, #0
   13458:	mov	r2, #5
   1345c:	movt	r1, #3
   13460:	bl	11934 <dcgettext@plt>
   13464:	movw	r1, #15418	; 0x3c3a
   13468:	mov	r4, r0
   1346c:	mov	r0, #0
   13470:	mov	r2, #5
   13474:	movt	r1, #3
   13478:	bl	11934 <dcgettext@plt>
   1347c:	mov	r1, r0
   13480:	ldr	r0, [sp, #384]	; 0x180
   13484:	cmp	r0, #2
   13488:	beq	134a8 <__assert_fail@plt+0x17fc>
   1348c:	cmp	r0, #1
   13490:	bne	134b8 <__assert_fail@plt+0x180c>
   13494:	movw	r0, #20348	; 0x4f7c
   13498:	mov	r1, r4
   1349c:	movt	r0, #3
   134a0:	bl	11868 <printf@plt>
   134a4:	b	134d0 <__assert_fail@plt+0x1824>
   134a8:	movw	r0, #20348	; 0x4f7c
   134ac:	movt	r0, #3
   134b0:	bl	11868 <printf@plt>
   134b4:	b	134d0 <__assert_fail@plt+0x1824>
   134b8:	movw	r1, #15470	; 0x3c6e
   134bc:	mov	r0, #0
   134c0:	mov	r2, #5
   134c4:	movt	r1, #3
   134c8:	bl	11934 <dcgettext@plt>
   134cc:	bl	11868 <printf@plt>
   134d0:	ldr	r0, [sp, #140]	; 0x8c
   134d4:	orrs	r0, sl, r0
   134d8:	ldreq	r0, [sp, #152]	; 0x98
   134dc:	cmpeq	r0, #0
   134e0:	beq	137b0 <__assert_fail@plt+0x1b04>
   134e4:	ldr	r0, [sp, #192]	; 0xc0
   134e8:	cmp	r0, #0
   134ec:	beq	13594 <__assert_fail@plt+0x18e8>
   134f0:	ldr	r0, [sp, #152]	; 0x98
   134f4:	bl	11a48 <localtime@plt>
   134f8:	cmp	r0, #0
   134fc:	beq	13594 <__assert_fail@plt+0x18e8>
   13500:	movw	r2, #16280	; 0x3f98
   13504:	mov	r4, r0
   13508:	sub	r5, fp, #728	; 0x2d8
   1350c:	mov	r1, #20
   13510:	movt	r2, #3
   13514:	mov	r0, r5
   13518:	mov	r3, r4
   1351c:	bl	11a30 <strftime@plt>
   13520:	cmp	r0, #19
   13524:	bne	13ac8 <__assert_fail@plt+0x1e1c>
   13528:	ldrb	r0, [fp, #-709]	; 0xfffffd3b
   1352c:	cmp	r0, #0
   13530:	bne	13ae8 <__assert_fail@plt+0x1e3c>
   13534:	ldrb	r0, [fp, #-710]	; 0xfffffd3a
   13538:	cmp	r0, #0
   1353c:	beq	13b08 <__assert_fail@plt+0x1e5c>
   13540:	movw	r1, #16437	; 0x4035
   13544:	mov	r0, #0
   13548:	mov	r2, #5
   1354c:	movt	r1, #3
   13550:	bl	11934 <dcgettext@plt>
   13554:	ldr	r1, [sp, #152]	; 0x98
   13558:	ldr	r2, [r1, #4]
   1355c:	mov	r1, r5
   13560:	bl	11868 <printf@plt>
   13564:	movw	r2, #16476	; 0x405c
   13568:	mov	r0, r5
   1356c:	mov	r1, #20
   13570:	mov	r3, r4
   13574:	movt	r2, #3
   13578:	bl	11a30 <strftime@plt>
   1357c:	cmp	r0, #5
   13580:	bne	13b28 <__assert_fail@plt+0x1e7c>
   13584:	movw	r0, #18679	; 0x48f7
   13588:	mov	r1, r5
   1358c:	movt	r0, #3
   13590:	bl	11868 <printf@plt>
   13594:	movw	r1, #16492	; 0x406c
   13598:	movw	r2, #16523	; 0x408b
   1359c:	mov	r0, #5
   135a0:	mov	r3, sl
   135a4:	movt	r1, #3
   135a8:	movt	r2, #3
   135ac:	str	r0, [sp]
   135b0:	mov	r0, #0
   135b4:	bl	11ca0 <dcngettext@plt>
   135b8:	sub	r5, fp, #728	; 0x2d8
   135bc:	mov	r6, #1
   135c0:	mov	r4, r0
   135c4:	mov	r0, sl
   135c8:	mov	sl, #0
   135cc:	mov	r1, #0
   135d0:	mov	r3, #0
   135d4:	mov	r2, r5
   135d8:	str	r6, [sp]
   135dc:	str	sl, [sp, #4]
   135e0:	str	r6, [sp, #8]
   135e4:	str	sl, [sp, #12]
   135e8:	bl	158a0 <__assert_fail@plt+0x3bf4>
   135ec:	mov	r1, r0
   135f0:	mov	r0, r4
   135f4:	bl	11868 <printf@plt>
   135f8:	ldrb	r0, [r9, #10]
   135fc:	movw	r1, #16579	; 0x40c3
   13600:	mov	r2, #5
   13604:	movt	r1, #3
   13608:	cmp	r0, #0
   1360c:	movw	r0, #16555	; 0x40ab
   13610:	movt	r0, #3
   13614:	movne	r1, r0
   13618:	mov	r0, #0
   1361c:	bl	11934 <dcgettext@plt>
   13620:	mov	r4, r0
   13624:	ldrd	r0, [r9, #64]	; 0x40
   13628:	mov	r2, r5
   1362c:	mov	r3, #0
   13630:	stm	sp, {r6, sl}
   13634:	str	r6, [sp, #8]
   13638:	str	sl, [sp, #12]
   1363c:	bl	158a0 <__assert_fail@plt+0x3bf4>
   13640:	mov	r1, r0
   13644:	mov	r0, r4
   13648:	bl	11868 <printf@plt>
   1364c:	movw	r1, #16598	; 0x40d6
   13650:	mov	r0, #0
   13654:	mov	r2, #5
   13658:	movt	r1, #3
   1365c:	bl	11934 <dcgettext@plt>
   13660:	mov	r8, r0
   13664:	ldrd	r0, [r9, #72]	; 0x48
   13668:	mov	r2, r5
   1366c:	mov	r3, #0
   13670:	stm	sp, {r6, sl}
   13674:	str	r6, [sp, #8]
   13678:	str	sl, [sp, #12]
   1367c:	bl	158a0 <__assert_fail@plt+0x3bf4>
   13680:	mov	r5, r0
   13684:	ldrd	r0, [r9, #80]	; 0x50
   13688:	sub	lr, fp, #1024	; 0x400
   1368c:	mov	r3, #0
   13690:	stm	sp, {r6, sl}
   13694:	str	r6, [sp, #8]
   13698:	str	sl, [sp, #12]
   1369c:	sub	r2, lr, #356	; 0x164
   136a0:	bl	158a0 <__assert_fail@plt+0x3bf4>
   136a4:	mov	r7, r0
   136a8:	ldrd	r0, [r9, #88]	; 0x58
   136ac:	add	r2, sp, #1296	; 0x510
   136b0:	mov	r3, #0
   136b4:	stm	sp, {r6, sl}
   136b8:	str	r6, [sp, #8]
   136bc:	str	sl, [sp, #12]
   136c0:	bl	158a0 <__assert_fail@plt+0x3bf4>
   136c4:	mov	r4, r0
   136c8:	ldrd	r0, [r9, #96]	; 0x60
   136cc:	add	r2, sp, #644	; 0x284
   136d0:	mov	r3, #0
   136d4:	stm	sp, {r6, sl}
   136d8:	str	r6, [sp, #8]
   136dc:	str	sl, [sp, #12]
   136e0:	bl	158a0 <__assert_fail@plt+0x3bf4>
   136e4:	str	r0, [sp]
   136e8:	mov	r0, r8
   136ec:	ldr	r8, [sp, #196]	; 0xc4
   136f0:	mov	r1, r5
   136f4:	mov	r2, r7
   136f8:	mov	r3, r4
   136fc:	add	r6, sp, #352	; 0x160
   13700:	bl	11868 <printf@plt>
   13704:	ldr	r0, [sp, #220]	; 0xdc
   13708:	cmp	r0, #0
   1370c:	bne	1379c <__assert_fail@plt+0x1af0>
   13710:	ldrb	r0, [r9, #10]
   13714:	cmp	r0, #1
   13718:	bne	1372c <__assert_fail@plt+0x1a80>
   1371c:	movw	r1, #16778	; 0x418a
   13720:	mov	r0, #0
   13724:	movt	r1, #3
   13728:	b	13790 <__assert_fail@plt+0x1ae4>
   1372c:	ldrd	r0, [r9, #72]	; 0x48
   13730:	orrs	r0, r0, r1
   13734:	beq	13784 <__assert_fail@plt+0x1ad8>
   13738:	movw	r1, #16866	; 0x41e2
   1373c:	mov	r0, #0
   13740:	mov	r2, #5
   13744:	movt	r1, #3
   13748:	bl	11934 <dcgettext@plt>
   1374c:	mov	r4, r0
   13750:	ldrd	r0, [r9, #72]	; 0x48
   13754:	bl	332d8 <__assert_fail@plt+0x2162c>
   13758:	ldr	r2, [sp, #176]	; 0xb0
   1375c:	vmov	d17, r0, r1
   13760:	mov	r0, r4
   13764:	vmov	s0, r2
   13768:	vcvt.f64.u32	d16, s0
   1376c:	vsub.f64	d16, d17, d16
   13770:	vmul.f64	d16, d16, d12
   13774:	vdiv.f64	d16, d16, d17
   13778:	vmov	r2, r3, d16
   1377c:	bl	11868 <printf@plt>
   13780:	b	1379c <__assert_fail@plt+0x1af0>
   13784:	movw	r1, #16912	; 0x4210
   13788:	mov	r0, #0
   1378c:	movt	r1, #3
   13790:	mov	r2, #5
   13794:	bl	11934 <dcgettext@plt>
   13798:	bl	11868 <printf@plt>
   1379c:	movw	r0, #25108	; 0x6214
   137a0:	movt	r0, #4
   137a4:	ldr	r1, [r0]
   137a8:	mov	r0, #10
   137ac:	bl	11c04 <putc@plt>
   137b0:	ldr	r0, [sp, #376]	; 0x178
   137b4:	bl	118c8 <ferror@plt>
   137b8:	cmp	r0, #0
   137bc:	beq	137f8 <__assert_fail@plt+0x1b4c>
   137c0:	ldr	r0, [sp, #208]	; 0xd0
   137c4:	ldr	r2, [sp, #380]	; 0x17c
   137c8:	mov	r1, #8
   137cc:	mov	r4, #0
   137d0:	ldr	r5, [r0]
   137d4:	mov	r0, #0
   137d8:	bl	19f84 <__assert_fail@plt+0x82d8>
   137dc:	movw	r2, #20348	; 0x4f7c
   137e0:	mov	r3, r0
   137e4:	mov	r0, #0
   137e8:	mov	r1, r5
   137ec:	movt	r2, #3
   137f0:	bl	119dc <error@plt>
   137f4:	b	137fc <__assert_fail@plt+0x1b50>
   137f8:	ldr	r4, [r9, #48]	; 0x30
   137fc:	ldr	r0, [sp, #212]	; 0xd4
   13800:	bl	11b74 <fclose@plt>
   13804:	ldr	r5, [sp, #172]	; 0xac
   13808:	cmn	r0, #1
   1380c:	beq	138a4 <__assert_fail@plt+0x1bf8>
   13810:	ldr	r0, [sp, #180]	; 0xb4
   13814:	cmp	r0, #0
   13818:	beq	13820 <__assert_fail@plt+0x1b74>
   1381c:	bl	1c224 <__assert_fail@plt+0xa578>
   13820:	cmp	r5, #0
   13824:	beq	13850 <__assert_fail@plt+0x1ba4>
   13828:	movw	r1, #20336	; 0x4f70
   1382c:	add	r0, sp, #344	; 0x158
   13830:	mov	r2, #0
   13834:	add	r3, sp, #348	; 0x15c
   13838:	movt	r1, #3
   1383c:	str	r0, [sp]
   13840:	mov	r0, r5
   13844:	bl	155b0 <__assert_fail@plt+0x3904>
   13848:	cmp	r0, #0
   1384c:	bne	1278c <__assert_fail@plt+0xae0>
   13850:	ldr	r0, [sp, #28]
   13854:	cmp	r0, #0
   13858:	beq	1386c <__assert_fail@plt+0x1bc0>
   1385c:	movw	r0, #14227	; 0x3793
   13860:	mov	r1, r4
   13864:	movt	r0, #3
   13868:	bl	11868 <printf@plt>
   1386c:	mov	r5, #0
   13870:	cmp	r4, #0
   13874:	bne	138f4 <__assert_fail@plt+0x1c48>
   13878:	ldr	r0, [sp, #216]	; 0xd8
   1387c:	ldrd	r2, [r9, #40]	; 0x28
   13880:	orrs	r1, r2, r3
   13884:	clz	r0, r0
   13888:	lsr	r0, r0, #5
   1388c:	movwne	r1, #1
   13890:	orr	r0, r0, r1
   13894:	clz	r1, r8
   13898:	lsr	r1, r1, #5
   1389c:	and	r5, r1, r0
   138a0:	b	138f4 <__assert_fail@plt+0x1c48>
   138a4:	ldr	r0, [sp, #208]	; 0xd0
   138a8:	ldr	r2, [sp, #120]	; 0x78
   138ac:	mov	r5, #0
   138b0:	mov	r1, #8
   138b4:	b	138d0 <__assert_fail@plt+0x1c24>
   138b8:	mov	r0, r4
   138bc:	bl	11c88 <close@plt>
   138c0:	ldr	r0, [sp, #208]	; 0xd0
   138c4:	mov	r5, #0
   138c8:	mov	r1, #8
   138cc:	mov	r2, r8
   138d0:	ldr	r4, [r0]
   138d4:	mov	r0, #0
   138d8:	bl	19f84 <__assert_fail@plt+0x82d8>
   138dc:	movw	r2, #20348	; 0x4f7c
   138e0:	mov	r3, r0
   138e4:	mov	r0, #0
   138e8:	mov	r1, r4
   138ec:	movt	r2, #3
   138f0:	bl	119dc <error@plt>
   138f4:	mov	r0, r5
   138f8:	sub	sp, fp, #72	; 0x48
   138fc:	vpop	{d8-d12}
   13900:	add	sp, sp, #4
   13904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13908:	movw	r1, #14064	; 0x36f0
   1390c:	mov	r0, #0
   13910:	mov	r2, #5
   13914:	mov	r5, #0
   13918:	movt	r1, #3
   1391c:	bl	11934 <dcgettext@plt>
   13920:	mov	r2, r0
   13924:	mov	r0, #0
   13928:	mov	r1, #0
   1392c:	bl	119dc <error@plt>
   13930:	b	138f4 <__assert_fail@plt+0x1c48>
   13934:	movw	r2, #20348	; 0x4f7c
   13938:	mov	r3, r0
   1393c:	mov	r0, #1
   13940:	mov	r1, #0
   13944:	movt	r2, #3
   13948:	bl	119dc <error@plt>
   1394c:	mov	r0, #1
   13950:	bl	13be8 <__assert_fail@plt+0x1f3c>
   13954:	mov	r0, #0
   13958:	bl	13be8 <__assert_fail@plt+0x1f3c>
   1395c:	movw	r1, #25112	; 0x6218
   13960:	movw	r3, #16956	; 0x423c
   13964:	movt	r1, #4
   13968:	movt	r3, #3
   1396c:	ldr	r2, [r1]
   13970:	ldr	r1, [fp, #-1380]	; 0xfffffa9c
   13974:	str	r2, [sp]
   13978:	mov	r2, #108	; 0x6c
   1397c:	bl	1b21c <__assert_fail@plt+0x9570>
   13980:	movw	r0, #13982	; 0x369e
   13984:	movw	r1, #13997	; 0x36ad
   13988:	movw	r3, #14006	; 0x36b6
   1398c:	movw	r2, #1613	; 0x64d
   13990:	movt	r0, #3
   13994:	movt	r1, #3
   13998:	movt	r3, #3
   1399c:	bl	11cac <__assert_fail@plt>
   139a0:	movw	r1, #14837	; 0x39f5
   139a4:	mov	r0, #0
   139a8:	mov	r2, #5
   139ac:	movt	r1, #3
   139b0:	bl	11934 <dcgettext@plt>
   139b4:	mov	r2, r0
   139b8:	mov	r0, #1
   139bc:	mov	r1, #0
   139c0:	bl	119dc <error@plt>
   139c4:	mov	r4, #34	; 0x22
   139c8:	b	139d0 <__assert_fail@plt+0x1d24>
   139cc:	mov	r4, #22
   139d0:	movw	r1, #14898	; 0x3a32
   139d4:	mov	r0, #0
   139d8:	mov	r2, #5
   139dc:	movt	r1, #3
   139e0:	bl	11934 <dcgettext@plt>
   139e4:	mov	r6, r0
   139e8:	mov	r0, #0
   139ec:	mov	r1, #8
   139f0:	mov	r2, r5
   139f4:	bl	19f84 <__assert_fail@plt+0x82d8>
   139f8:	mov	r3, r0
   139fc:	mov	r0, #1
   13a00:	mov	r1, r4
   13a04:	mov	r2, r6
   13a08:	bl	119dc <error@plt>
   13a0c:	movw	r1, #14898	; 0x3a32
   13a10:	mov	r0, #0
   13a14:	mov	r2, #5
   13a18:	movt	r1, #3
   13a1c:	bl	11934 <dcgettext@plt>
   13a20:	mov	r4, r0
   13a24:	mov	r0, #0
   13a28:	mov	r1, #8
   13a2c:	mov	r2, r5
   13a30:	bl	19f84 <__assert_fail@plt+0x82d8>
   13a34:	mov	r3, r0
   13a38:	mov	r0, #1
   13a3c:	mov	r1, #0
   13a40:	mov	r2, r4
   13a44:	bl	119dc <error@plt>
   13a48:	movw	r0, #15528	; 0x3ca8
   13a4c:	movw	r1, #13997	; 0x36ad
   13a50:	movw	r3, #15537	; 0x3cb1
   13a54:	movw	r2, #935	; 0x3a7
   13a58:	movt	r0, #3
   13a5c:	movt	r1, #3
   13a60:	movt	r3, #3
   13a64:	bl	11cac <__assert_fail@plt>
   13a68:	ldr	r0, [sp, #208]	; 0xd0
   13a6c:	movw	r1, #13914	; 0x365a
   13a70:	mov	r2, #5
   13a74:	movt	r1, #3
   13a78:	ldr	r4, [r0]
   13a7c:	mov	r0, #0
   13a80:	bl	11934 <dcgettext@plt>
   13a84:	mov	r2, r0
   13a88:	mov	r0, #1
   13a8c:	mov	r1, r4
   13a90:	bl	119dc <error@plt>
   13a94:	movw	r1, #13857	; 0x3621
   13a98:	movt	r1, #3
   13a9c:	b	13b74 <__assert_fail@plt+0x1ec8>
   13aa0:	movw	r1, #15270	; 0x3ba6
   13aa4:	mov	r0, #0
   13aa8:	mov	r2, #5
   13aac:	movt	r1, #3
   13ab0:	bl	11934 <dcgettext@plt>
   13ab4:	mov	r4, r0
   13ab8:	mov	r0, #0
   13abc:	mov	r1, #8
   13ac0:	mov	r2, r8
   13ac4:	b	13a30 <__assert_fail@plt+0x1d84>
   13ac8:	movw	r0, #16298	; 0x3faa
   13acc:	movw	r1, #13997	; 0x36ad
   13ad0:	movw	r3, #16324	; 0x3fc4
   13ad4:	movw	r2, #845	; 0x34d
   13ad8:	movt	r0, #3
   13adc:	movt	r1, #3
   13ae0:	movt	r3, #3
   13ae4:	bl	11cac <__assert_fail@plt>
   13ae8:	movw	r0, #16379	; 0x3ffb
   13aec:	movw	r1, #13997	; 0x36ad
   13af0:	movw	r3, #16324	; 0x3fc4
   13af4:	movw	r2, #846	; 0x34e
   13af8:	movt	r0, #3
   13afc:	movt	r1, #3
   13b00:	movt	r3, #3
   13b04:	bl	11cac <__assert_fail@plt>
   13b08:	movw	r0, #16408	; 0x4018
   13b0c:	movw	r1, #13997	; 0x36ad
   13b10:	movw	r3, #16324	; 0x3fc4
   13b14:	movw	r2, #847	; 0x34f
   13b18:	movt	r0, #3
   13b1c:	movt	r1, #3
   13b20:	movt	r3, #3
   13b24:	bl	11cac <__assert_fail@plt>
   13b28:	movw	r0, #16479	; 0x405f
   13b2c:	movw	r1, #13997	; 0x36ad
   13b30:	movw	r3, #16324	; 0x3fc4
   13b34:	movw	r2, #851	; 0x353
   13b38:	movt	r0, #3
   13b3c:	movt	r1, #3
   13b40:	movt	r3, #3
   13b44:	bl	11cac <__assert_fail@plt>
   13b48:	movw	r1, #13760	; 0x35c0
   13b4c:	mov	r0, #0
   13b50:	mov	r2, #5
   13b54:	movt	r1, #3
   13b58:	bl	11934 <dcgettext@plt>
   13b5c:	mov	r4, r0
   13b60:	bl	11af0 <__errno_location@plt>
   13b64:	str	r0, [sp, #208]	; 0xd0
   13b68:	b	13ba8 <__assert_fail@plt+0x1efc>
   13b6c:	movw	r1, #13792	; 0x35e0
   13b70:	movt	r1, #3
   13b74:	mov	r0, #0
   13b78:	mov	r2, #5
   13b7c:	bl	11934 <dcgettext@plt>
   13b80:	mov	r4, r0
   13b84:	b	13ba8 <__assert_fail@plt+0x1efc>
   13b88:	movw	r1, #13825	; 0x3601
   13b8c:	mov	r0, #0
   13b90:	mov	r2, #5
   13b94:	movt	r1, #3
   13b98:	bl	11934 <dcgettext@plt>
   13b9c:	mov	r4, r0
   13ba0:	ldr	r0, [sp, #208]	; 0xd0
   13ba4:	str	r5, [r0]
   13ba8:	ldr	r0, [sp, #208]	; 0xd0
   13bac:	mov	r1, #8
   13bb0:	mov	r2, r4
   13bb4:	ldr	r5, [r0]
   13bb8:	mov	r0, #0
   13bbc:	bl	19f84 <__assert_fail@plt+0x82d8>
   13bc0:	movw	r2, #20348	; 0x4f7c
   13bc4:	mov	r3, r0
   13bc8:	mov	r0, #1
   13bcc:	mov	r1, r5
   13bd0:	movt	r2, #3
   13bd4:	bl	119dc <error@plt>
   13bd8:	movw	r0, #25120	; 0x6220
   13bdc:	movt	r0, #4
   13be0:	ldr	r0, [r0, #16]
   13be4:	b	1c224 <__assert_fail@plt+0xa578>
   13be8:	push	{fp, lr}
   13bec:	mov	fp, sp
   13bf0:	cmp	r0, #0
   13bf4:	bne	13c44 <__assert_fail@plt+0x1f98>
   13bf8:	movw	r5, #25108	; 0x6214
   13bfc:	movw	r1, #14421	; 0x3855
   13c00:	mov	r0, #0
   13c04:	mov	r2, #5
   13c08:	movt	r5, #4
   13c0c:	movt	r1, #3
   13c10:	ldr	r4, [r5]
   13c14:	bl	11934 <dcgettext@plt>
   13c18:	movw	r6, #25232	; 0x6290
   13c1c:	mov	r1, r0
   13c20:	mov	r0, r4
   13c24:	movt	r6, #4
   13c28:	ldr	r2, [r6]
   13c2c:	bl	11ad8 <fprintf@plt>
   13c30:	ldr	r0, [r5]
   13c34:	ldr	r1, [r6]
   13c38:	bl	15654 <__assert_fail@plt+0x39a8>
   13c3c:	mov	r0, #0
   13c40:	bl	11a90 <exit@plt>
   13c44:	mov	r4, r0
   13c48:	movw	r0, #25104	; 0x6210
   13c4c:	movw	r1, #14382	; 0x382e
   13c50:	mov	r2, #5
   13c54:	movt	r0, #4
   13c58:	movt	r1, #3
   13c5c:	ldr	r5, [r0]
   13c60:	mov	r0, #0
   13c64:	bl	11934 <dcgettext@plt>
   13c68:	mov	r1, r0
   13c6c:	movw	r0, #25232	; 0x6290
   13c70:	movt	r0, #4
   13c74:	ldr	r2, [r0]
   13c78:	mov	r0, r5
   13c7c:	bl	11ad8 <fprintf@plt>
   13c80:	mov	r0, r4
   13c84:	bl	11a90 <exit@plt>
   13c88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c8c:	add	fp, sp, #24
   13c90:	sub	sp, sp, #8
   13c94:	mov	r4, r0
   13c98:	ldr	r0, [r0]
   13c9c:	cmp	r0, #128	; 0x80
   13ca0:	bne	13cdc <__assert_fail@plt+0x2030>
   13ca4:	ldr	r5, [r4, #24]
   13ca8:	mov	r0, r5
   13cac:	bl	11b44 <fgetc@plt>
   13cb0:	mov	r6, r0
   13cb4:	mov	r0, r5
   13cb8:	bl	11b44 <fgetc@plt>
   13cbc:	uxtb	r0, r0
   13cc0:	ldr	r1, [r4, #4]
   13cc4:	orr	r0, r0, r6, lsl #8
   13cc8:	sxtah	r6, r1, r0
   13ccc:	cmp	r6, #0
   13cd0:	str	r6, [r4, #4]
   13cd4:	bpl	13cf8 <__assert_fail@plt+0x204c>
   13cd8:	b	13e50 <__assert_fail@plt+0x21a4>
   13cdc:	ldr	r1, [r4, #4]
   13ce0:	addlt	r6, r1, r0
   13ce4:	addge	r0, r0, r1
   13ce8:	subge	r6, r0, #256	; 0x100
   13cec:	cmp	r6, #0
   13cf0:	str	r6, [r4, #4]
   13cf4:	bmi	13e50 <__assert_fail@plt+0x21a4>
   13cf8:	ldr	r0, [r4, #8]
   13cfc:	cmp	r6, r0
   13d00:	bgt	13e50 <__assert_fail@plt+0x21a4>
   13d04:	ldr	r3, [r4, #24]
   13d08:	mov	r0, #0
   13d0c:	mov	r1, sp
   13d10:	mov	r2, #0
   13d14:	str	r0, [sp, #4]
   13d18:	str	r0, [sp]
   13d1c:	add	r0, sp, #4
   13d20:	bl	11c28 <getdelim@plt>
   13d24:	cmp	r0, #0
   13d28:	bmi	13e44 <__assert_fail@plt+0x2198>
   13d2c:	ldr	r1, [sp, #4]
   13d30:	cmp	r1, #0
   13d34:	beq	13e8c <__assert_fail@plt+0x21e0>
   13d38:	ldr	r2, [r4, #16]
   13d3c:	add	r8, r0, #1
   13d40:	mov	r5, r0
   13d44:	ldr	r0, [r4, #12]
   13d48:	add	r7, r8, r6
   13d4c:	cmp	r7, r2
   13d50:	bls	13d70 <__assert_fail@plt+0x20c4>
   13d54:	mov	r1, r7
   13d58:	bl	1c388 <__assert_fail@plt+0xa6dc>
   13d5c:	cmp	r0, #0
   13d60:	beq	13e44 <__assert_fail@plt+0x2198>
   13d64:	str	r0, [r4, #12]
   13d68:	str	r7, [r4, #16]
   13d6c:	ldr	r1, [sp, #4]
   13d70:	add	r0, r0, r6
   13d74:	mov	r2, r8
   13d78:	bl	118ec <memcpy@plt>
   13d7c:	ldr	r0, [sp, #4]
   13d80:	bl	1c224 <__assert_fail@plt+0xa578>
   13d84:	cmp	r5, #1
   13d88:	blt	13e44 <__assert_fail@plt+0x2198>
   13d8c:	ldr	r0, [r4, #24]
   13d90:	bl	11c7c <getc@plt>
   13d94:	str	r0, [r4]
   13d98:	ldr	r0, [r4, #4]
   13d9c:	add	r0, r0, r5
   13da0:	subs	r1, r0, #1
   13da4:	str	r1, [r4, #8]
   13da8:	bgt	13dec <__assert_fail@plt+0x2140>
   13dac:	movw	r1, #15749	; 0x3d85
   13db0:	mov	r0, #0
   13db4:	mov	r2, #5
   13db8:	movt	r1, #3
   13dbc:	bl	11934 <dcgettext@plt>
   13dc0:	ldr	r2, [r4, #28]
   13dc4:	mov	r5, r0
   13dc8:	mov	r0, #0
   13dcc:	mov	r1, #8
   13dd0:	bl	19f84 <__assert_fail@plt+0x82d8>
   13dd4:	mov	r3, r0
   13dd8:	mov	r0, #1
   13ddc:	mov	r1, #0
   13de0:	mov	r2, r5
   13de4:	bl	119dc <error@plt>
   13de8:	ldr	r1, [r4, #8]
   13dec:	ldr	r0, [r4, #12]
   13df0:	add	r2, r0, r1
   13df4:	ldrb	r3, [r2, #-1]
   13df8:	cmp	r3, #0
   13dfc:	beq	13eac <__assert_fail@plt+0x2200>
   13e00:	ldrb	r1, [r0, r1]
   13e04:	cmp	r1, #0
   13e08:	bne	13ecc <__assert_fail@plt+0x2220>
   13e0c:	ldrb	r1, [r2, #1]
   13e10:	cmp	r1, #0
   13e14:	streq	r0, [r4, #20]
   13e18:	moveq	r0, #1
   13e1c:	subeq	sp, fp, #24
   13e20:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e24:	movw	r0, #15873	; 0x3e01
   13e28:	movw	r1, #13997	; 0x36ad
   13e2c:	movw	r3, #15803	; 0x3dbb
   13e30:	movw	r2, #570	; 0x23a
   13e34:	movt	r0, #3
   13e38:	movt	r1, #3
   13e3c:	movt	r3, #3
   13e40:	bl	11cac <__assert_fail@plt>
   13e44:	mov	r0, #8
   13e48:	sub	sp, fp, #24
   13e4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e50:	movw	r1, #15749	; 0x3d85
   13e54:	mov	r0, #0
   13e58:	mov	r2, #5
   13e5c:	movt	r1, #3
   13e60:	bl	11934 <dcgettext@plt>
   13e64:	ldr	r2, [r4, #28]
   13e68:	mov	r5, r0
   13e6c:	mov	r0, #0
   13e70:	mov	r1, #8
   13e74:	bl	19f84 <__assert_fail@plt+0x82d8>
   13e78:	mov	r3, r0
   13e7c:	mov	r0, #1
   13e80:	mov	r1, #0
   13e84:	mov	r2, r5
   13e88:	bl	119dc <error@plt>
   13e8c:	movw	r0, #15886	; 0x3e0e
   13e90:	movw	r1, #13997	; 0x36ad
   13e94:	movw	r3, #15896	; 0x3e18
   13e98:	mov	r2, #245	; 0xf5
   13e9c:	movt	r0, #3
   13ea0:	movt	r1, #3
   13ea4:	movt	r3, #3
   13ea8:	bl	11cac <__assert_fail@plt>
   13eac:	movw	r0, #15790	; 0x3dae
   13eb0:	movw	r1, #13997	; 0x36ad
   13eb4:	movw	r3, #15803	; 0x3dbb
   13eb8:	mov	r2, #568	; 0x238
   13ebc:	movt	r0, #3
   13ec0:	movt	r1, #3
   13ec4:	movt	r3, #3
   13ec8:	bl	11cac <__assert_fail@plt>
   13ecc:	movw	r0, #15860	; 0x3df4
   13ed0:	movw	r1, #13997	; 0x36ad
   13ed4:	movw	r3, #15803	; 0x3dbb
   13ed8:	movw	r2, #569	; 0x239
   13edc:	movt	r0, #3
   13ee0:	movt	r1, #3
   13ee4:	movt	r3, #3
   13ee8:	bl	11cac <__assert_fail@plt>
   13eec:	push	{r4, r5, r6, r7, fp, lr}
   13ef0:	add	fp, sp, #16
   13ef4:	mov	r4, r0
   13ef8:	ldr	r0, [r0]
   13efc:	cmn	r0, #1
   13f00:	beq	13f74 <__assert_fail@plt+0x22c8>
   13f04:	cmp	r0, #30
   13f08:	bne	13f7c <__assert_fail@plt+0x22d0>
   13f0c:	ldr	r5, [r4, #4]
   13f10:	ldr	r2, [r4, #8]
   13f14:	ldr	r0, [r4, #24]
   13f18:	ldr	r1, [r4, #28]
   13f1c:	sub	r3, r5, #14
   13f20:	cmp	r3, #0
   13f24:	str	r3, [r4, #4]
   13f28:	subgt	r2, r2, r3
   13f2c:	add	r3, r4, #32
   13f30:	bl	147b4 <__assert_fail@plt+0x2b08>
   13f34:	rsb	r1, r5, #14
   13f38:	cmp	r0, r1
   13f3c:	blt	140f0 <__assert_fail@plt+0x2444>
   13f40:	ldr	r1, [r4, #4]
   13f44:	add	r6, r1, r0
   13f48:	cmn	r6, #1
   13f4c:	str	r6, [r4, #4]
   13f50:	bgt	13f94 <__assert_fail@plt+0x22e8>
   13f54:	movw	r0, #16089	; 0x3ed9
   13f58:	movw	r1, #13997	; 0x36ad
   13f5c:	movw	r3, #16037	; 0x3ea5
   13f60:	mov	r2, #480	; 0x1e0
   13f64:	movt	r0, #3
   13f68:	movt	r1, #3
   13f6c:	movt	r3, #3
   13f70:	bl	11cac <__assert_fail@plt>
   13f74:	mov	r0, #8
   13f78:	pop	{r4, r5, r6, r7, fp, pc}
   13f7c:	ldr	r1, [r4, #4]
   13f80:	add	r0, r0, r1
   13f84:	sub	r6, r0, #14
   13f88:	cmn	r6, #1
   13f8c:	str	r6, [r4, #4]
   13f90:	ble	14110 <__assert_fail@plt+0x2464>
   13f94:	ldr	r0, [r4, #24]
   13f98:	bl	11c7c <getc@plt>
   13f9c:	cmp	r0, #31
   13fa0:	str	r0, [r4]
   13fa4:	blt	1409c <__assert_fail@plt+0x23f0>
   13fa8:	add	r5, r4, #16
   13fac:	cmp	r0, #127	; 0x7f
   13fb0:	bgt	1404c <__assert_fail@plt+0x23a0>
   13fb4:	b	14028 <__assert_fail@plt+0x237c>
   13fb8:	str	r7, [r4, #16]
   13fbc:	mov	r1, r5
   13fc0:	mov	r2, #1
   13fc4:	ldr	r0, [r4, #12]
   13fc8:	bl	1ae48 <__assert_fail@plt+0x919c>
   13fcc:	str	r0, [r4, #12]
   13fd0:	mov	r1, r0
   13fd4:	ldr	r0, [r4]
   13fd8:	and	r0, r0, #127	; 0x7f
   13fdc:	str	r0, [r4]
   13fe0:	add	r0, r4, r0
   13fe4:	ldrb	r0, [r0, #36]	; 0x24
   13fe8:	strb	r0, [r1, r6]
   13fec:	ldr	r0, [r4]
   13ff0:	ldr	r1, [r4, #12]
   13ff4:	add	r0, r4, r0
   13ff8:	add	r1, r6, r1
   13ffc:	ldrb	r0, [r0, #164]	; 0xa4
   14000:	add	r1, r1, #1
   14004:	strb	r0, [r1]
   14008:	mov	r6, r7
   1400c:	ldr	r0, [r4, #24]
   14010:	bl	11c7c <getc@plt>
   14014:	cmp	r0, #30
   14018:	str	r0, [r4]
   1401c:	ble	14094 <__assert_fail@plt+0x23e8>
   14020:	cmp	r0, #127	; 0x7f
   14024:	bgt	1404c <__assert_fail@plt+0x23a0>
   14028:	cmn	r6, #1
   1402c:	beq	140e8 <__assert_fail@plt+0x243c>
   14030:	ldr	r1, [r5]
   14034:	add	r7, r6, #1
   14038:	cmp	r1, r6
   1403c:	bls	1406c <__assert_fail@plt+0x23c0>
   14040:	ldr	r1, [r4, #12]
   14044:	add	r1, r1, r6
   14048:	b	14004 <__assert_fail@plt+0x2358>
   1404c:	cmn	r6, #2
   14050:	bcs	140e8 <__assert_fail@plt+0x243c>
   14054:	ldr	r1, [r5]
   14058:	add	r7, r6, #2
   1405c:	cmp	r1, r7
   14060:	bcc	13fb8 <__assert_fail@plt+0x230c>
   14064:	ldr	r1, [r4, #12]
   14068:	b	13fd8 <__assert_fail@plt+0x232c>
   1406c:	str	r7, [r4, #16]
   14070:	mov	r1, r5
   14074:	mov	r2, #1
   14078:	ldr	r0, [r4, #12]
   1407c:	bl	1ae48 <__assert_fail@plt+0x919c>
   14080:	str	r0, [r4, #12]
   14084:	mov	r1, r0
   14088:	ldr	r0, [r4]
   1408c:	add	r1, r1, r6
   14090:	b	14004 <__assert_fail@plt+0x2358>
   14094:	cmn	r6, #1
   14098:	beq	140e8 <__assert_fail@plt+0x243c>
   1409c:	mov	r1, r4
   140a0:	ldr	r0, [r1, #16]!
   140a4:	cmp	r0, r6
   140a8:	bls	140b4 <__assert_fail@plt+0x2408>
   140ac:	ldr	r0, [r4, #12]
   140b0:	b	140cc <__assert_fail@plt+0x2420>
   140b4:	add	r0, r6, #1
   140b8:	mov	r2, #1
   140bc:	str	r0, [r4, #16]
   140c0:	ldr	r0, [r4, #12]
   140c4:	bl	1ae48 <__assert_fail@plt+0x919c>
   140c8:	str	r0, [r4, #12]
   140cc:	mov	r1, #0
   140d0:	strb	r1, [r0, r6]
   140d4:	str	r6, [r4, #8]
   140d8:	ldr	r0, [r4, #12]
   140dc:	str	r0, [r4, #20]
   140e0:	mov	r0, #1
   140e4:	pop	{r4, r5, r6, r7, fp, pc}
   140e8:	mov	r0, r4
   140ec:	bl	14780 <__assert_fail@plt+0x2ad4>
   140f0:	movw	r0, #16022	; 0x3e96
   140f4:	movw	r1, #13997	; 0x36ad
   140f8:	movw	r3, #16037	; 0x3ea5
   140fc:	movw	r2, #478	; 0x1de
   14100:	movt	r0, #3
   14104:	movt	r1, #3
   14108:	movt	r3, #3
   1410c:	bl	11cac <__assert_fail@plt>
   14110:	movw	r0, #16089	; 0x3ed9
   14114:	movw	r1, #13997	; 0x36ad
   14118:	movw	r3, #16037	; 0x3ea5
   1411c:	movw	r2, #485	; 0x1e5
   14120:	movt	r0, #3
   14124:	movt	r1, #3
   14128:	movt	r3, #3
   1412c:	bl	11cac <__assert_fail@plt>
   14130:	push	{r4, sl, fp, lr}
   14134:	add	fp, sp, #8
   14138:	mov	r4, r0
   1413c:	ldr	r0, [r0, #12]
   14140:	bl	156c0 <__assert_fail@plt+0x3a14>
   14144:	str	r0, [r4, #20]
   14148:	mov	r0, #1
   1414c:	pop	{r4, sl, fp, pc}
   14150:	push	{r4, r5, fp, lr}
   14154:	add	fp, sp, #8
   14158:	sub	sp, sp, #8
   1415c:	ldr	r5, [r0, #20]
   14160:	mov	r4, r1
   14164:	mov	r0, r5
   14168:	bl	11ac0 <strlen@plt>
   1416c:	mov	r2, r0
   14170:	mov	r0, #0
   14174:	mov	r1, r5
   14178:	mov	r3, #0
   1417c:	str	r0, [sp, #4]
   14180:	mov	r0, r4
   14184:	str	r2, [sp]
   14188:	bl	21c54 <__assert_fail@plt+0xffa8>
   1418c:	cmp	r0, #0
   14190:	mov	r1, #2
   14194:	movwmi	r1, #4
   14198:	mov	r0, r1
   1419c:	sub	sp, fp, #8
   141a0:	pop	{r4, r5, fp, pc}
   141a4:	push	{fp, lr}
   141a8:	mov	fp, sp
   141ac:	mov	r2, r1
   141b0:	ldr	r1, [r0, #20]
   141b4:	mov	r0, r2
   141b8:	mov	r2, #16
   141bc:	bl	119e8 <fnmatch@plt>
   141c0:	cmp	r0, #0
   141c4:	mov	r1, #4
   141c8:	movweq	r1, #2
   141cc:	mov	r0, r1
   141d0:	pop	{fp, pc}
   141d4:	push	{fp, lr}
   141d8:	mov	fp, sp
   141dc:	mov	r2, r1
   141e0:	ldr	r1, [r0, #20]
   141e4:	mov	r0, r2
   141e8:	mov	r2, #0
   141ec:	bl	119e8 <fnmatch@plt>
   141f0:	cmp	r0, #0
   141f4:	mov	r1, #4
   141f8:	movweq	r1, #2
   141fc:	mov	r0, r1
   14200:	pop	{fp, pc}
   14204:	push	{r4, r5, fp, lr}
   14208:	add	fp, sp, #8
   1420c:	mov	r4, r1
   14210:	mov	r5, r0
   14214:	bl	119ac <__ctype_get_mb_cur_max@plt>
   14218:	cmp	r0, #1
   1421c:	bne	14240 <__assert_fail@plt+0x2594>
   14220:	ldr	r0, [r5, #20]
   14224:	mov	r1, r4
   14228:	bl	30a98 <__assert_fail@plt+0x1edec>
   1422c:	cmp	r0, #0
   14230:	mov	r1, #2
   14234:	movweq	r1, #4
   14238:	mov	r0, r1
   1423c:	pop	{r4, r5, fp, pc}
   14240:	movw	r0, #16116	; 0x3ef4
   14244:	movw	r1, #13997	; 0x36ad
   14248:	movw	r3, #16132	; 0x3f04
   1424c:	movw	r2, #714	; 0x2ca
   14250:	movt	r0, #3
   14254:	movt	r1, #3
   14258:	movt	r3, #3
   1425c:	bl	11cac <__assert_fail@plt>
   14260:	push	{r4, r5, fp, lr}
   14264:	add	fp, sp, #8
   14268:	mov	r4, r1
   1426c:	mov	r5, r0
   14270:	bl	119ac <__ctype_get_mb_cur_max@plt>
   14274:	cmp	r0, #1
   14278:	bne	1429c <__assert_fail@plt+0x25f0>
   1427c:	ldr	r0, [r5, #20]
   14280:	mov	r1, r4
   14284:	bl	31ae8 <__assert_fail@plt+0x1fe3c>
   14288:	cmp	r0, #0
   1428c:	mov	r1, #2
   14290:	movweq	r1, #4
   14294:	mov	r0, r1
   14298:	pop	{r4, r5, fp, pc}
   1429c:	movw	r0, #16116	; 0x3ef4
   142a0:	movw	r1, #13997	; 0x36ad
   142a4:	movw	r3, #16205	; 0x3f4d
   142a8:	movw	r2, #690	; 0x2b2
   142ac:	movt	r0, #3
   142b0:	movt	r1, #3
   142b4:	movt	r3, #3
   142b8:	bl	11cac <__assert_fail@plt>
   142bc:	push	{fp, lr}
   142c0:	mov	fp, sp
   142c4:	ldr	r0, [r0, #20]
   142c8:	bl	16968 <__assert_fail@plt+0x4cbc>
   142cc:	cmp	r0, #0
   142d0:	mov	r1, #2
   142d4:	movweq	r1, #4
   142d8:	mov	r0, r1
   142dc:	pop	{fp, pc}
   142e0:	push	{fp, lr}
   142e4:	mov	fp, sp
   142e8:	ldr	r0, [r0, #20]
   142ec:	bl	1780c <__assert_fail@plt+0x5b60>
   142f0:	cmp	r0, #0
   142f4:	mov	r1, #2
   142f8:	movweq	r1, #4
   142fc:	mov	r0, r1
   14300:	pop	{fp, pc}
   14304:	push	{fp, lr}
   14308:	mov	fp, sp
   1430c:	sub	sp, sp, #104	; 0x68
   14310:	ldr	r1, [r0, #12]
   14314:	mov	r2, sp
   14318:	mov	r0, #3
   1431c:	bl	11c34 <__xstat64@plt>
   14320:	cmp	r0, #0
   14324:	mov	r1, #4
   14328:	movweq	r1, #1
   1432c:	mov	r0, r1
   14330:	mov	sp, fp
   14334:	pop	{fp, pc}
   14338:	push	{fp, lr}
   1433c:	mov	fp, sp
   14340:	sub	sp, sp, #104	; 0x68
   14344:	ldr	r1, [r0, #12]
   14348:	mov	r2, sp
   1434c:	mov	r0, #3
   14350:	bl	11c94 <__lxstat64@plt>
   14354:	cmp	r0, #0
   14358:	mov	r1, #4
   1435c:	movweq	r1, #1
   14360:	mov	r0, r1
   14364:	mov	sp, fp
   14368:	pop	{fp, pc}
   1436c:	push	{fp, lr}
   14370:	mov	fp, sp
   14374:	sub	sp, sp, #104	; 0x68
   14378:	ldr	r1, [r0, #12]
   1437c:	mov	r2, sp
   14380:	mov	r0, #3
   14384:	bl	11c34 <__xstat64@plt>
   14388:	cmp	r0, #0
   1438c:	mov	r1, #1
   14390:	movweq	r1, #4
   14394:	mov	r0, r1
   14398:	mov	sp, fp
   1439c:	pop	{fp, pc}
   143a0:	push	{fp, lr}
   143a4:	mov	fp, sp
   143a8:	sub	sp, sp, #104	; 0x68
   143ac:	ldr	r1, [r0, #12]
   143b0:	mov	r2, sp
   143b4:	mov	r0, #3
   143b8:	bl	11c94 <__lxstat64@plt>
   143bc:	cmp	r0, #0
   143c0:	mov	r1, #1
   143c4:	movweq	r1, #4
   143c8:	mov	r0, r1
   143cc:	mov	sp, fp
   143d0:	pop	{fp, pc}
   143d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d8:	add	fp, sp, #28
   143dc:	sub	sp, sp, #4
   143e0:	vpush	{d8-d9}
   143e4:	ldr	r4, [r0, #12]
   143e8:	vldr	s17, [pc, #244]	; 144e4 <__assert_fail@plt+0x2838>
   143ec:	vldr	s16, [pc, #244]	; 144e8 <__assert_fail@plt+0x283c>
   143f0:	add	r8, r1, #8
   143f4:	mov	r0, r4
   143f8:	bl	11ac0 <strlen@plt>
   143fc:	vld1.64	{d16-d17}, [r8]
   14400:	vmov	s18, r0
   14404:	vmov.f32	s19, s17
   14408:	vadd.i64	q8, q8, q4
   1440c:	vst1.64	{d16-d17}, [r8]
   14410:	ldrb	r1, [r4]
   14414:	cmp	r1, #0
   14418:	beq	144d4 <__assert_fail@plt+0x2828>
   1441c:	add	r4, r4, #1
   14420:	mov	r5, #0
   14424:	mov	r9, #1
   14428:	mov	r6, #0
   1442c:	mov	sl, #0
   14430:	b	14448 <__assert_fail@plt+0x279c>
   14434:	ldrb	r1, [r4], #1
   14438:	mov	r5, r0
   1443c:	mov	r6, r2
   14440:	cmp	r1, #0
   14444:	beq	1448c <__assert_fail@plt+0x27e0>
   14448:	sxtb	r0, r1
   1444c:	uxtb	r7, r1
   14450:	mov	r2, #1
   14454:	cmp	r0, #0
   14458:	mov	r0, #1
   1445c:	movwmi	sl, #1
   14460:	cmp	r7, #10
   14464:	beq	14434 <__assert_fail@plt+0x2788>
   14468:	bl	11a84 <__ctype_b_loc@plt>
   1446c:	ldr	r0, [r0]
   14470:	add	r0, r0, r7, lsl #1
   14474:	ldrb	r0, [r0, #1]
   14478:	tst	r0, #32
   1447c:	mov	r0, r5
   14480:	movne	r6, r9
   14484:	mov	r2, r6
   14488:	b	14434 <__assert_fail@plt+0x2788>
   1448c:	cmp	sl, #0
   14490:	beq	144a4 <__assert_fail@plt+0x27f8>
   14494:	ldrd	r4, [r8, #32]
   14498:	adds	r4, r4, #1
   1449c:	adc	r5, r5, #0
   144a0:	strd	r4, [r8, #32]
   144a4:	cmp	r2, #0
   144a8:	beq	144bc <__assert_fail@plt+0x2810>
   144ac:	ldrd	r2, [r8, #16]
   144b0:	adds	r2, r2, #1
   144b4:	adc	r3, r3, #0
   144b8:	strd	r2, [r8, #16]
   144bc:	cmp	r0, #0
   144c0:	beq	144d4 <__assert_fail@plt+0x2828>
   144c4:	ldrd	r0, [r8, #24]
   144c8:	adds	r0, r0, #1
   144cc:	adc	r1, r1, #0
   144d0:	strd	r0, [r8, #24]
   144d4:	mov	r0, #1
   144d8:	vpop	{d8-d9}
   144dc:	add	sp, sp, #4
   144e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e4:	andeq	r0, r0, r0
   144e8:	andeq	r0, r0, r1
   144ec:	push	{r4, r5, fp, lr}
   144f0:	add	fp, sp, #8
   144f4:	sub	sp, sp, #8
   144f8:	movw	r5, #25108	; 0x6214
   144fc:	movw	r4, #25120	; 0x6220
   14500:	ldr	r0, [r0, #12]
   14504:	movw	r3, #20348	; 0x4f7c
   14508:	movt	r5, #4
   1450c:	movt	r4, #4
   14510:	movt	r3, #3
   14514:	ldr	ip, [r5]
   14518:	ldrb	r2, [r4, #9]
   1451c:	ldr	r1, [r4, #16]
   14520:	str	r0, [sp]
   14524:	mov	r0, ip
   14528:	bl	149b0 <__assert_fail@plt+0x2d04>
   1452c:	ldrb	r1, [r4, #4]
   14530:	mov	r0, #10
   14534:	cmp	r1, #0
   14538:	ldr	r1, [r5]
   1453c:	movwne	r0, #0
   14540:	bl	11c04 <putc@plt>
   14544:	mov	r0, #1
   14548:	sub	sp, fp, #8
   1454c:	pop	{r4, r5, fp, pc}
   14550:	push	{r4, sl, fp, lr}
   14554:	add	fp, sp, #8
   14558:	movw	r4, #25108	; 0x6214
   1455c:	ldr	r0, [r0, #12]
   14560:	movt	r4, #4
   14564:	ldr	r1, [r4]
   14568:	bl	11c58 <fputs@plt>
   1456c:	movw	r0, #25120	; 0x6220
   14570:	movt	r0, #4
   14574:	ldrb	r1, [r0, #4]
   14578:	mov	r0, #10
   1457c:	cmp	r1, #0
   14580:	ldr	r1, [r4]
   14584:	movwne	r0, #0
   14588:	bl	11c04 <putc@plt>
   1458c:	mov	r0, #1
   14590:	pop	{r4, sl, fp, pc}
   14594:	push	{r4, r5, fp, lr}
   14598:	add	fp, sp, #8
   1459c:	ldr	r0, [r1, #8]
   145a0:	ldr	r2, [r1, #12]
   145a4:	ldr	ip, [r1]
   145a8:	ldr	r3, [r1, #4]
   145ac:	adds	r4, r0, #1
   145b0:	mov	r0, #8
   145b4:	adc	r5, r2, #0
   145b8:	strd	r4, [r1, #8]
   145bc:	subs	r1, r4, ip
   145c0:	sbcs	r1, r5, r3
   145c4:	movwcc	r0, #1
   145c8:	pop	{r4, r5, fp, pc}
   145cc:	ldr	r0, [r1, #8]
   145d0:	ldr	r3, [r1, #12]
   145d4:	adds	r0, r0, #1
   145d8:	str	r0, [r1, #8]
   145dc:	adc	r3, r3, #0
   145e0:	mov	r0, #1
   145e4:	str	r3, [r1, #12]
   145e8:	bx	lr
   145ec:	push	{r4, r5, r6, r7, fp, lr}
   145f0:	add	fp, sp, #16
   145f4:	movw	r6, #25120	; 0x6220
   145f8:	mov	r4, r0
   145fc:	movt	r6, #4
   14600:	ldr	r5, [r6, #24]
   14604:	ldr	r7, [r6, #32]
   14608:	cmp	r5, r7
   1460c:	beq	14650 <__assert_fail@plt+0x29a4>
   14610:	ldr	r2, [r5]
   14614:	ldr	r1, [r5, #4]
   14618:	mov	r0, r4
   1461c:	blx	r2
   14620:	ldr	r5, [r5, #8]
   14624:	mov	r1, r0
   14628:	cmp	r5, r7
   1462c:	andsne	r0, r1, #3
   14630:	bne	14610 <__assert_fail@plt+0x2964>
   14634:	mov	r0, #4
   14638:	cmp	r1, #1
   1463c:	beq	14680 <__assert_fail@plt+0x29d4>
   14640:	tst	r1, #12
   14644:	mov	r0, r1
   14648:	popne	{r4, r5, r6, r7, fp, pc}
   1464c:	ldr	r5, [r6, #32]
   14650:	cmp	r5, #0
   14654:	beq	14684 <__assert_fail@plt+0x29d8>
   14658:	ldr	r2, [r5]
   1465c:	ldr	r1, [r5, #4]
   14660:	mov	r0, r4
   14664:	blx	r2
   14668:	ldr	r5, [r5, #8]
   1466c:	cmp	r5, #0
   14670:	andsne	r1, r0, #1
   14674:	bne	14658 <__assert_fail@plt+0x29ac>
   14678:	cmp	r0, #1
   1467c:	moveq	r0, #2
   14680:	pop	{r4, r5, r6, r7, fp, pc}
   14684:	mov	r0, #2
   14688:	pop	{r4, r5, r6, r7, fp, pc}
   1468c:	push	{r4, r5, r6, r7, fp, lr}
   14690:	add	fp, sp, #16
   14694:	movw	r5, #25120	; 0x6220
   14698:	movt	r5, #4
   1469c:	ldr	r6, [r5, #24]
   146a0:	ldr	r7, [r5, #32]
   146a4:	cmp	r6, r7
   146a8:	beq	14724 <__assert_fail@plt+0x2a78>
   146ac:	mov	r4, r0
   146b0:	ldr	r2, [r6]
   146b4:	ldr	r1, [r6, #4]
   146b8:	mov	r0, r4
   146bc:	blx	r2
   146c0:	ldr	r6, [r6, #8]
   146c4:	mov	r1, r0
   146c8:	cmp	r6, r7
   146cc:	andsne	r0, r1, #5
   146d0:	bne	146b0 <__assert_fail@plt+0x2a04>
   146d4:	mov	r0, #4
   146d8:	cmp	r1, #1
   146dc:	beq	14720 <__assert_fail@plt+0x2a74>
   146e0:	tst	r1, #12
   146e4:	mov	r0, r1
   146e8:	popne	{r4, r5, r6, r7, fp, pc}
   146ec:	ldr	r5, [r5, #32]
   146f0:	cmp	r5, #0
   146f4:	beq	1472c <__assert_fail@plt+0x2a80>
   146f8:	ldr	r2, [r5]
   146fc:	ldr	r1, [r5, #4]
   14700:	mov	r0, r4
   14704:	blx	r2
   14708:	ldr	r5, [r5, #8]
   1470c:	cmp	r5, #0
   14710:	andsne	r1, r0, #1
   14714:	bne	146f8 <__assert_fail@plt+0x2a4c>
   14718:	cmp	r0, #1
   1471c:	moveq	r0, #2
   14720:	pop	{r4, r5, r6, r7, fp, pc}
   14724:	mov	r0, #5
   14728:	pop	{r4, r5, r6, r7, fp, pc}
   1472c:	mov	r0, #2
   14730:	pop	{r4, r5, r6, r7, fp, pc}
   14734:	push	{r4, r5, fp, lr}
   14738:	add	fp, sp, #8
   1473c:	mov	r4, r0
   14740:	movw	r0, #25120	; 0x6220
   14744:	movt	r0, #4
   14748:	ldr	r5, [r0, #24]
   1474c:	cmp	r5, #0
   14750:	beq	14778 <__assert_fail@plt+0x2acc>
   14754:	ldr	r2, [r5]
   14758:	ldr	r1, [r5, #4]
   1475c:	mov	r0, r4
   14760:	blx	r2
   14764:	ldr	r5, [r5, #8]
   14768:	cmp	r5, #0
   1476c:	andsne	r1, r0, #3
   14770:	bne	14754 <__assert_fail@plt+0x2aa8>
   14774:	pop	{r4, r5, fp, pc}
   14778:	mov	r0, #3
   1477c:	pop	{r4, r5, fp, pc}
   14780:	push	{fp, lr}
   14784:	mov	fp, sp
   14788:	movw	r1, #15953	; 0x3e51
   1478c:	mov	r4, r0
   14790:	mov	r0, #0
   14794:	mov	r2, #5
   14798:	movt	r1, #3
   1479c:	bl	11934 <dcgettext@plt>
   147a0:	ldr	r3, [r4, #28]
   147a4:	mov	r2, r0
   147a8:	mov	r0, #1
   147ac:	mov	r1, #0
   147b0:	bl	119dc <error@plt>
   147b4:	push	{r4, r5, r6, r7, fp, lr}
   147b8:	add	fp, sp, #16
   147bc:	sub	sp, sp, #8
   147c0:	mov	r4, r3
   147c4:	mov	r6, r2
   147c8:	mov	r5, r1
   147cc:	mov	r7, r0
   147d0:	bl	11bec <clearerr@plt>
   147d4:	add	r0, sp, #4
   147d8:	mov	r1, #4
   147dc:	mov	r2, #1
   147e0:	mov	r3, r7
   147e4:	bl	119b8 <fread@plt>
   147e8:	cmp	r0, #1
   147ec:	bne	14884 <__assert_fail@plt+0x2bd8>
   147f0:	ldr	r1, [r4]
   147f4:	ldr	r0, [sp, #4]
   147f8:	rev	r7, r0
   147fc:	cmp	r1, #2
   14800:	beq	14860 <__assert_fail@plt+0x2bb4>
   14804:	cmp	r1, #0
   14808:	bne	14864 <__assert_fail@plt+0x2bb8>
   1480c:	cmp	r0, r6
   14810:	ble	1486c <__assert_fail@plt+0x2bc0>
   14814:	cmp	r7, r6
   14818:	bgt	14864 <__assert_fail@plt+0x2bb8>
   1481c:	movw	r1, #17389	; 0x43ed
   14820:	mov	r0, #0
   14824:	mov	r2, #5
   14828:	movt	r1, #3
   1482c:	bl	11934 <dcgettext@plt>
   14830:	mov	r6, r0
   14834:	mov	r0, #0
   14838:	mov	r1, #8
   1483c:	mov	r2, r5
   14840:	bl	19f84 <__assert_fail@plt+0x82d8>
   14844:	mov	r3, r0
   14848:	mov	r0, #0
   1484c:	mov	r1, #0
   14850:	mov	r2, r6
   14854:	bl	119dc <error@plt>
   14858:	mov	r0, #2
   1485c:	str	r0, [r4]
   14860:	mov	r0, r7
   14864:	sub	sp, fp, #16
   14868:	pop	{r4, r5, r6, r7, fp, pc}
   1486c:	cmp	r7, r6
   14870:	ble	14864 <__assert_fail@plt+0x2bb8>
   14874:	mov	r1, #1
   14878:	str	r1, [r4]
   1487c:	sub	sp, fp, #16
   14880:	pop	{r4, r5, r6, r7, fp, pc}
   14884:	mov	r0, #0
   14888:	mov	r1, #8
   1488c:	mov	r2, r5
   14890:	bl	19f84 <__assert_fail@plt+0x82d8>
   14894:	mov	r4, r0
   14898:	mov	r0, r7
   1489c:	bl	11a9c <feof@plt>
   148a0:	cmp	r0, #0
   148a4:	bne	148d8 <__assert_fail@plt+0x2c2c>
   148a8:	bl	11af0 <__errno_location@plt>
   148ac:	movw	r1, #17360	; 0x43d0
   148b0:	ldr	r5, [r0]
   148b4:	mov	r0, #0
   148b8:	mov	r2, #5
   148bc:	movt	r1, #3
   148c0:	bl	11934 <dcgettext@plt>
   148c4:	mov	r2, r0
   148c8:	mov	r0, #1
   148cc:	mov	r1, r5
   148d0:	mov	r3, r4
   148d4:	bl	119dc <error@plt>
   148d8:	movw	r1, #17339	; 0x43bb
   148dc:	mov	r0, #0
   148e0:	mov	r2, #5
   148e4:	movt	r1, #3
   148e8:	bl	11934 <dcgettext@plt>
   148ec:	mov	r2, r0
   148f0:	mov	r0, #1
   148f4:	mov	r1, #0
   148f8:	mov	r3, r4
   148fc:	bl	119dc <error@plt>
   14900:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14904:	add	fp, sp, #24
   14908:	sub	sp, sp, #16
   1490c:	mov	r8, r0
   14910:	movw	r0, #25104	; 0x6210
   14914:	movt	r0, #4
   14918:	ldr	r0, [r0]
   1491c:	bl	1c1c8 <__assert_fail@plt+0xa51c>
   14920:	movw	r0, #25108	; 0x6214
   14924:	movw	r1, #17483	; 0x444b
   14928:	mov	r2, #5
   1492c:	mov	r9, #0
   14930:	movt	r0, #4
   14934:	movt	r1, #3
   14938:	ldr	r6, [r0]
   1493c:	movw	r0, #25004	; 0x61ac
   14940:	movt	r0, #4
   14944:	ldr	r5, [r0]
   14948:	mov	r0, #0
   1494c:	bl	11934 <dcgettext@plt>
   14950:	movw	r1, #17498	; 0x445a
   14954:	mov	r7, r0
   14958:	mov	r0, #0
   1495c:	mov	r2, #5
   14960:	movt	r1, #3
   14964:	bl	11934 <dcgettext@plt>
   14968:	movw	r1, #17513	; 0x4469
   1496c:	mov	r4, r0
   14970:	mov	r0, #0
   14974:	mov	r2, #5
   14978:	movt	r1, #3
   1497c:	bl	11934 <dcgettext@plt>
   14980:	movw	r2, #17469	; 0x443d
   14984:	str	r0, [sp, #8]
   14988:	mov	r0, r6
   1498c:	mov	r1, r8
   14990:	mov	r3, r5
   14994:	str	r7, [sp]
   14998:	str	r4, [sp, #4]
   1499c:	str	r9, [sp, #12]
   149a0:	movt	r2, #3
   149a4:	bl	1aa84 <__assert_fail@plt+0x8dd8>
   149a8:	sub	sp, fp, #24
   149ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149b4:	add	fp, sp, #28
   149b8:	sub	sp, sp, #12
   149bc:	sub	sp, sp, #8192	; 0x2000
   149c0:	ldr	r7, [fp, #8]
   149c4:	mov	r9, r3
   149c8:	mov	sl, r0
   149cc:	cmp	r2, #0
   149d0:	beq	14a70 <__assert_fail@plt+0x2dc4>
   149d4:	add	r4, sp, #8
   149d8:	mov	r8, r1
   149dc:	str	r1, [sp]
   149e0:	mov	r1, #8192	; 0x2000
   149e4:	mov	r2, r7
   149e8:	mvn	r3, #0
   149ec:	mov	r0, r4
   149f0:	bl	18754 <__assert_fail@plt+0x6aa8>
   149f4:	mov	r5, r0
   149f8:	cmp	r0, #8192	; 0x2000
   149fc:	mov	r6, r4
   14a00:	bcc	14a2c <__assert_fail@plt+0x2d80>
   14a04:	add	r4, r5, #1
   14a08:	mov	r0, r4
   14a0c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   14a10:	mov	r1, r4
   14a14:	mov	r2, r7
   14a18:	mvn	r3, #0
   14a1c:	mov	r6, r0
   14a20:	str	r8, [sp]
   14a24:	add	r4, sp, #8
   14a28:	bl	18754 <__assert_fail@plt+0x6aa8>
   14a2c:	mov	r0, r6
   14a30:	mov	r1, r5
   14a34:	bl	14a88 <__assert_fail@plt+0x2ddc>
   14a38:	mov	r1, #0
   14a3c:	mov	r2, r6
   14a40:	strb	r1, [r6, r0]
   14a44:	mov	r0, sl
   14a48:	mov	r1, r9
   14a4c:	bl	11ad8 <fprintf@plt>
   14a50:	mov	r5, r0
   14a54:	cmp	r6, r4
   14a58:	beq	14a64 <__assert_fail@plt+0x2db8>
   14a5c:	mov	r0, r6
   14a60:	bl	1c224 <__assert_fail@plt+0xa578>
   14a64:	mov	r0, r5
   14a68:	sub	sp, fp, #28
   14a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a70:	mov	r0, sl
   14a74:	mov	r1, r9
   14a78:	mov	r2, r7
   14a7c:	sub	sp, fp, #28
   14a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a84:	b	11ad8 <fprintf@plt>
   14a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a8c:	add	fp, sp, #28
   14a90:	sub	sp, sp, #28
   14a94:	mov	r5, r1
   14a98:	mov	sl, r0
   14a9c:	add	r6, r0, r1
   14aa0:	bl	119ac <__ctype_get_mb_cur_max@plt>
   14aa4:	cmp	r0, #2
   14aa8:	bcs	14aec <__assert_fail@plt+0x2e40>
   14aac:	cmp	r5, #1
   14ab0:	blt	14ae0 <__assert_fail@plt+0x2e34>
   14ab4:	bl	11a84 <__ctype_b_loc@plt>
   14ab8:	mov	r1, #63	; 0x3f
   14abc:	ldrb	r2, [sl]
   14ac0:	ldr	r3, [r0]
   14ac4:	add	r2, r3, r2, lsl #1
   14ac8:	ldrb	r2, [r2, #1]
   14acc:	tst	r2, #64	; 0x40
   14ad0:	strbeq	r1, [sl]
   14ad4:	add	sl, sl, #1
   14ad8:	cmp	sl, r6
   14adc:	bcc	14abc <__assert_fail@plt+0x2e10>
   14ae0:	mov	r0, r5
   14ae4:	sub	sp, fp, #28
   14ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aec:	cmp	r5, #1
   14af0:	mov	r4, sl
   14af4:	blt	14e9c <__assert_fail@plt+0x31f0>
   14af8:	mov	r3, #0
   14afc:	add	r8, sp, #12
   14b00:	add	r9, sp, #16
   14b04:	mov	r4, sl
   14b08:	mov	r7, sl
   14b0c:	ldrb	r0, [r7]
   14b10:	sub	r1, r0, #32
   14b14:	cmp	r1, #94	; 0x5e
   14b18:	bhi	14cb4 <__assert_fail@plt+0x3008>
   14b1c:	add	r2, pc, #0
   14b20:	ldr	pc, [r2, r1, lsl #2]
   14b24:	andeq	r4, r1, r0, lsr #25
   14b28:	andeq	r4, r1, r0, lsr #25
   14b2c:	andeq	r4, r1, r0, lsr #25
   14b30:	andeq	r4, r1, r0, lsr #25
   14b34:			; <UNDEFINED> instruction: 0x00014cb4
   14b38:	andeq	r4, r1, r0, lsr #25
   14b3c:	andeq	r4, r1, r0, lsr #25
   14b40:	andeq	r4, r1, r0, lsr #25
   14b44:	andeq	r4, r1, r0, lsr #25
   14b48:	andeq	r4, r1, r0, lsr #25
   14b4c:	andeq	r4, r1, r0, lsr #25
   14b50:	andeq	r4, r1, r0, lsr #25
   14b54:	andeq	r4, r1, r0, lsr #25
   14b58:	andeq	r4, r1, r0, lsr #25
   14b5c:	andeq	r4, r1, r0, lsr #25
   14b60:	andeq	r4, r1, r0, lsr #25
   14b64:	andeq	r4, r1, r0, lsr #25
   14b68:	andeq	r4, r1, r0, lsr #25
   14b6c:	andeq	r4, r1, r0, lsr #25
   14b70:	andeq	r4, r1, r0, lsr #25
   14b74:	andeq	r4, r1, r0, lsr #25
   14b78:	andeq	r4, r1, r0, lsr #25
   14b7c:	andeq	r4, r1, r0, lsr #25
   14b80:	andeq	r4, r1, r0, lsr #25
   14b84:	andeq	r4, r1, r0, lsr #25
   14b88:	andeq	r4, r1, r0, lsr #25
   14b8c:	andeq	r4, r1, r0, lsr #25
   14b90:	andeq	r4, r1, r0, lsr #25
   14b94:	andeq	r4, r1, r0, lsr #25
   14b98:	andeq	r4, r1, r0, lsr #25
   14b9c:	andeq	r4, r1, r0, lsr #25
   14ba0:	andeq	r4, r1, r0, lsr #25
   14ba4:			; <UNDEFINED> instruction: 0x00014cb4
   14ba8:	andeq	r4, r1, r0, lsr #25
   14bac:	andeq	r4, r1, r0, lsr #25
   14bb0:	andeq	r4, r1, r0, lsr #25
   14bb4:	andeq	r4, r1, r0, lsr #25
   14bb8:	andeq	r4, r1, r0, lsr #25
   14bbc:	andeq	r4, r1, r0, lsr #25
   14bc0:	andeq	r4, r1, r0, lsr #25
   14bc4:	andeq	r4, r1, r0, lsr #25
   14bc8:	andeq	r4, r1, r0, lsr #25
   14bcc:	andeq	r4, r1, r0, lsr #25
   14bd0:	andeq	r4, r1, r0, lsr #25
   14bd4:	andeq	r4, r1, r0, lsr #25
   14bd8:	andeq	r4, r1, r0, lsr #25
   14bdc:	andeq	r4, r1, r0, lsr #25
   14be0:	andeq	r4, r1, r0, lsr #25
   14be4:	andeq	r4, r1, r0, lsr #25
   14be8:	andeq	r4, r1, r0, lsr #25
   14bec:	andeq	r4, r1, r0, lsr #25
   14bf0:	andeq	r4, r1, r0, lsr #25
   14bf4:	andeq	r4, r1, r0, lsr #25
   14bf8:	andeq	r4, r1, r0, lsr #25
   14bfc:	andeq	r4, r1, r0, lsr #25
   14c00:	andeq	r4, r1, r0, lsr #25
   14c04:	andeq	r4, r1, r0, lsr #25
   14c08:	andeq	r4, r1, r0, lsr #25
   14c0c:	andeq	r4, r1, r0, lsr #25
   14c10:	andeq	r4, r1, r0, lsr #25
   14c14:	andeq	r4, r1, r0, lsr #25
   14c18:	andeq	r4, r1, r0, lsr #25
   14c1c:	andeq	r4, r1, r0, lsr #25
   14c20:	andeq	r4, r1, r0, lsr #25
   14c24:			; <UNDEFINED> instruction: 0x00014cb4
   14c28:	andeq	r4, r1, r0, lsr #25
   14c2c:	andeq	r4, r1, r0, lsr #25
   14c30:	andeq	r4, r1, r0, lsr #25
   14c34:	andeq	r4, r1, r0, lsr #25
   14c38:	andeq	r4, r1, r0, lsr #25
   14c3c:	andeq	r4, r1, r0, lsr #25
   14c40:	andeq	r4, r1, r0, lsr #25
   14c44:	andeq	r4, r1, r0, lsr #25
   14c48:	andeq	r4, r1, r0, lsr #25
   14c4c:	andeq	r4, r1, r0, lsr #25
   14c50:	andeq	r4, r1, r0, lsr #25
   14c54:	andeq	r4, r1, r0, lsr #25
   14c58:	andeq	r4, r1, r0, lsr #25
   14c5c:	andeq	r4, r1, r0, lsr #25
   14c60:	andeq	r4, r1, r0, lsr #25
   14c64:	andeq	r4, r1, r0, lsr #25
   14c68:	andeq	r4, r1, r0, lsr #25
   14c6c:	andeq	r4, r1, r0, lsr #25
   14c70:	andeq	r4, r1, r0, lsr #25
   14c74:	andeq	r4, r1, r0, lsr #25
   14c78:	andeq	r4, r1, r0, lsr #25
   14c7c:	andeq	r4, r1, r0, lsr #25
   14c80:	andeq	r4, r1, r0, lsr #25
   14c84:	andeq	r4, r1, r0, lsr #25
   14c88:	andeq	r4, r1, r0, lsr #25
   14c8c:	andeq	r4, r1, r0, lsr #25
   14c90:	andeq	r4, r1, r0, lsr #25
   14c94:	andeq	r4, r1, r0, lsr #25
   14c98:	andeq	r4, r1, r0, lsr #25
   14c9c:	andeq	r4, r1, r0, lsr #25
   14ca0:	strb	r0, [r4], #1
   14ca4:	add	r7, r7, #1
   14ca8:	cmp	r7, r6
   14cac:	bcc	14b0c <__assert_fail@plt+0x2e60>
   14cb0:	b	14e9c <__assert_fail@plt+0x31f0>
   14cb4:	str	r3, [sp, #20]
   14cb8:	str	r3, [sp, #16]
   14cbc:	str	r6, [sp]
   14cc0:	b	14ce0 <__assert_fail@plt+0x3034>
   14cc4:	mov	r0, #63	; 0x3f
   14cc8:	add	r7, r7, r5
   14ccc:	strb	r0, [r4], #1
   14cd0:	mov	r0, r9
   14cd4:	bl	1191c <mbsinit@plt>
   14cd8:	cmp	r0, #0
   14cdc:	bne	14e90 <__assert_fail@plt+0x31e4>
   14ce0:	sub	r2, r6, r7
   14ce4:	mov	r0, r8
   14ce8:	mov	r1, r7
   14cec:	mov	r3, r9
   14cf0:	bl	1c324 <__assert_fail@plt+0xa678>
   14cf4:	cmp	r0, #0
   14cf8:	beq	14e64 <__assert_fail@plt+0x31b8>
   14cfc:	mov	r5, r0
   14d00:	cmn	r0, #2
   14d04:	beq	14e7c <__assert_fail@plt+0x31d0>
   14d08:	cmn	r5, #1
   14d0c:	beq	14e84 <__assert_fail@plt+0x31d8>
   14d10:	ldr	r0, [sp, #12]
   14d14:	bl	1188c <wcwidth@plt>
   14d18:	cmp	r0, #0
   14d1c:	bmi	14cc4 <__assert_fail@plt+0x3018>
   14d20:	cmp	r5, #16
   14d24:	bcc	14e08 <__assert_fail@plt+0x315c>
   14d28:	add	r0, r7, r5
   14d2c:	cmp	r4, r0
   14d30:	addcc	r0, r4, r5
   14d34:	cmpcc	r7, r0
   14d38:	bcc	14e08 <__assert_fail@plt+0x315c>
   14d3c:	bic	r0, r5, #15
   14d40:	mov	r2, #0
   14d44:	mov	lr, #48	; 0x30
   14d48:	sub	r1, r0, #16
   14d4c:	str	r0, [sp, #4]
   14d50:	mov	r0, #1
   14d54:	add	r3, r0, r1, lsr #4
   14d58:	cmp	r1, #48	; 0x30
   14d5c:	and	r0, r3, #3
   14d60:	str	r0, [sp, #8]
   14d64:	bcc	14dc0 <__assert_fail@plt+0x3114>
   14d68:	ldr	r0, [sp, #8]
   14d6c:	mov	r2, #0
   14d70:	sub	r3, r3, r0
   14d74:	add	r1, r7, r2
   14d78:	add	r9, r4, r2
   14d7c:	subs	r3, r3, #4
   14d80:	add	r2, r2, #64	; 0x40
   14d84:	mov	r0, r1
   14d88:	mov	ip, r9
   14d8c:	add	r8, r1, #16
   14d90:	add	r6, r9, #16
   14d94:	add	r1, r1, #32
   14d98:	vld1.8	{d16-d17}, [r0], lr
   14d9c:	vst1.8	{d16-d17}, [ip], lr
   14da0:	vld1.8	{d16-d17}, [r8]
   14da4:	vst1.8	{d16-d17}, [r6]
   14da8:	vld1.8	{d16-d17}, [r1]
   14dac:	add	r1, r9, #32
   14db0:	vst1.8	{d16-d17}, [r1]
   14db4:	vld1.8	{d16-d17}, [r0]
   14db8:	vst1.8	{d16-d17}, [ip]
   14dbc:	bne	14d74 <__assert_fail@plt+0x30c8>
   14dc0:	ldr	r0, [sp, #8]
   14dc4:	cmp	r0, #0
   14dc8:	beq	14de8 <__assert_fail@plt+0x313c>
   14dcc:	add	r3, r4, r2
   14dd0:	add	r2, r7, r2
   14dd4:	rsb	r1, r0, #0
   14dd8:	vld1.8	{d16-d17}, [r2]!
   14ddc:	adds	r1, r1, #1
   14de0:	vst1.8	{d16-d17}, [r3]!
   14de4:	bcc	14dd8 <__assert_fail@plt+0x312c>
   14de8:	ldr	r0, [sp, #4]
   14dec:	ldr	r6, [sp]
   14df0:	add	r8, sp, #12
   14df4:	add	r9, sp, #16
   14df8:	add	r7, r7, r0
   14dfc:	add	r4, r4, r0
   14e00:	subs	r5, r5, r0
   14e04:	beq	14cd0 <__assert_fail@plt+0x3024>
   14e08:	ands	r1, r5, #3
   14e0c:	sub	r0, r5, #1
   14e10:	beq	14e28 <__assert_fail@plt+0x317c>
   14e14:	ldrb	r2, [r7], #1
   14e18:	subs	r1, r1, #1
   14e1c:	sub	r5, r5, #1
   14e20:	strb	r2, [r4], #1
   14e24:	bne	14e14 <__assert_fail@plt+0x3168>
   14e28:	cmp	r0, #3
   14e2c:	bcc	14cd0 <__assert_fail@plt+0x3024>
   14e30:	ldrb	r0, [r7]
   14e34:	subs	r5, r5, #4
   14e38:	strb	r0, [r4]
   14e3c:	ldrb	r0, [r7, #1]
   14e40:	strb	r0, [r4, #1]
   14e44:	ldrb	r0, [r7, #2]
   14e48:	strb	r0, [r4, #2]
   14e4c:	ldrb	r0, [r7, #3]
   14e50:	add	r7, r7, #4
   14e54:	strb	r0, [r4, #3]
   14e58:	add	r4, r4, #4
   14e5c:	bne	14e30 <__assert_fail@plt+0x3184>
   14e60:	b	14cd0 <__assert_fail@plt+0x3024>
   14e64:	mov	r5, #1
   14e68:	ldr	r0, [sp, #12]
   14e6c:	bl	1188c <wcwidth@plt>
   14e70:	cmp	r0, #0
   14e74:	bpl	14d20 <__assert_fail@plt+0x3074>
   14e78:	b	14cc4 <__assert_fail@plt+0x3018>
   14e7c:	mov	r7, r6
   14e80:	b	14e88 <__assert_fail@plt+0x31dc>
   14e84:	add	r7, r7, #1
   14e88:	mov	r0, #63	; 0x3f
   14e8c:	strb	r0, [r4], #1
   14e90:	mov	r3, #0
   14e94:	cmp	r7, r6
   14e98:	bcc	14b0c <__assert_fail@plt+0x2e60>
   14e9c:	sub	r5, r4, sl
   14ea0:	mov	r0, r5
   14ea4:	sub	sp, fp, #28
   14ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb0:	add	fp, sp, #28
   14eb4:	sub	sp, sp, #28
   14eb8:	mov	r4, r0
   14ebc:	movw	r0, #17743	; 0x454f
   14ec0:	movt	r0, #3
   14ec4:	mov	r1, r4
   14ec8:	bl	1185c <strcmp@plt>
   14ecc:	cmp	r0, #0
   14ed0:	beq	1544c <__assert_fail@plt+0x37a0>
   14ed4:	movw	r0, #17743	; 0x454f
   14ed8:	movt	r0, #3
   14edc:	bl	1a554 <__assert_fail@plt+0x88a8>
   14ee0:	mov	r5, r0
   14ee4:	movw	r0, #17821	; 0x459d
   14ee8:	mov	r1, r4
   14eec:	movt	r0, #3
   14ef0:	bl	1185c <strcmp@plt>
   14ef4:	cmp	r0, #0
   14ef8:	beq	15454 <__assert_fail@plt+0x37a8>
   14efc:	mov	r0, r5
   14f00:	bl	11ac0 <strlen@plt>
   14f04:	mov	r5, r0
   14f08:	movw	r0, #17821	; 0x459d
   14f0c:	movt	r0, #3
   14f10:	bl	1a554 <__assert_fail@plt+0x88a8>
   14f14:	mov	r6, r0
   14f18:	movw	r0, #17761	; 0x4561
   14f1c:	mov	r1, r4
   14f20:	movt	r0, #3
   14f24:	bl	1185c <strcmp@plt>
   14f28:	cmp	r0, #0
   14f2c:	beq	1545c <__assert_fail@plt+0x37b0>
   14f30:	mov	r0, r6
   14f34:	bl	11ac0 <strlen@plt>
   14f38:	mov	r6, r0
   14f3c:	movw	r0, #17761	; 0x4561
   14f40:	movt	r0, #3
   14f44:	bl	1a554 <__assert_fail@plt+0x88a8>
   14f48:	mov	r7, r0
   14f4c:	movw	r0, #17767	; 0x4567
   14f50:	mov	r1, r4
   14f54:	movt	r0, #3
   14f58:	bl	1185c <strcmp@plt>
   14f5c:	cmp	r0, #0
   14f60:	beq	15464 <__assert_fail@plt+0x37b8>
   14f64:	mov	r0, r7
   14f68:	bl	11ac0 <strlen@plt>
   14f6c:	mov	sl, r0
   14f70:	movw	r0, #17767	; 0x4567
   14f74:	movt	r0, #3
   14f78:	bl	1a554 <__assert_fail@plt+0x88a8>
   14f7c:	mov	r7, r0
   14f80:	movw	r0, #17804	; 0x458c
   14f84:	mov	r1, r4
   14f88:	movt	r0, #3
   14f8c:	bl	1185c <strcmp@plt>
   14f90:	cmp	r0, #0
   14f94:	beq	1546c <__assert_fail@plt+0x37c0>
   14f98:	mov	r0, r7
   14f9c:	bl	11ac0 <strlen@plt>
   14fa0:	mov	r8, r0
   14fa4:	movw	r0, #17804	; 0x458c
   14fa8:	movt	r0, #3
   14fac:	bl	1a554 <__assert_fail@plt+0x88a8>
   14fb0:	mov	r7, r0
   14fb4:	movw	r0, #17775	; 0x456f
   14fb8:	mov	r1, r4
   14fbc:	movt	r0, #3
   14fc0:	bl	1185c <strcmp@plt>
   14fc4:	cmp	r0, #0
   14fc8:	beq	15474 <__assert_fail@plt+0x37c8>
   14fcc:	mov	r0, r7
   14fd0:	bl	11ac0 <strlen@plt>
   14fd4:	mov	r9, r0
   14fd8:	movw	r0, #17775	; 0x456f
   14fdc:	movt	r0, #3
   14fe0:	bl	1a554 <__assert_fail@plt+0x88a8>
   14fe4:	mov	r7, r0
   14fe8:	movw	r0, #17771	; 0x456b
   14fec:	mov	r1, r4
   14ff0:	movt	r0, #3
   14ff4:	bl	1185c <strcmp@plt>
   14ff8:	cmp	r0, #0
   14ffc:	beq	1547c <__assert_fail@plt+0x37d0>
   15000:	mov	r0, r7
   15004:	bl	11ac0 <strlen@plt>
   15008:	str	r0, [sp, #24]
   1500c:	movw	r0, #17771	; 0x456b
   15010:	movt	r0, #3
   15014:	bl	1a554 <__assert_fail@plt+0x88a8>
   15018:	mov	r7, r0
   1501c:	movw	r0, #17785	; 0x4579
   15020:	mov	r1, r4
   15024:	movt	r0, #3
   15028:	bl	1185c <strcmp@plt>
   1502c:	cmp	r0, #0
   15030:	beq	15484 <__assert_fail@plt+0x37d8>
   15034:	mov	r0, r7
   15038:	bl	11ac0 <strlen@plt>
   1503c:	str	r0, [sp, #20]
   15040:	movw	r0, #17785	; 0x4579
   15044:	movt	r0, #3
   15048:	bl	1a554 <__assert_fail@plt+0x88a8>
   1504c:	mov	r7, r0
   15050:	movw	r0, #17797	; 0x4585
   15054:	mov	r1, r4
   15058:	movt	r0, #3
   1505c:	bl	1185c <strcmp@plt>
   15060:	cmp	r0, #0
   15064:	beq	1548c <__assert_fail@plt+0x37e0>
   15068:	mov	r0, r7
   1506c:	bl	11ac0 <strlen@plt>
   15070:	str	r0, [sp, #16]
   15074:	movw	r0, #17797	; 0x4585
   15078:	movt	r0, #3
   1507c:	bl	1a554 <__assert_fail@plt+0x88a8>
   15080:	mov	r7, r0
   15084:	movw	r0, #17803	; 0x458b
   15088:	mov	r1, r4
   1508c:	movt	r0, #3
   15090:	bl	1185c <strcmp@plt>
   15094:	cmp	r0, #0
   15098:	beq	15494 <__assert_fail@plt+0x37e8>
   1509c:	mov	r0, r7
   150a0:	bl	11ac0 <strlen@plt>
   150a4:	str	r0, [sp, #12]
   150a8:	movw	r0, #17803	; 0x458b
   150ac:	movt	r0, #3
   150b0:	bl	1a554 <__assert_fail@plt+0x88a8>
   150b4:	mov	r7, r0
   150b8:	movw	r0, #17809	; 0x4591
   150bc:	mov	r1, r4
   150c0:	movt	r0, #3
   150c4:	bl	1185c <strcmp@plt>
   150c8:	cmp	r0, #0
   150cc:	beq	1549c <__assert_fail@plt+0x37f0>
   150d0:	mov	r0, r7
   150d4:	bl	11ac0 <strlen@plt>
   150d8:	str	r0, [sp, #8]
   150dc:	movw	r0, #17809	; 0x4591
   150e0:	movt	r0, #3
   150e4:	bl	1a554 <__assert_fail@plt+0x88a8>
   150e8:	mov	r7, r0
   150ec:	movw	r0, #17824	; 0x45a0
   150f0:	mov	r1, r4
   150f4:	movt	r0, #3
   150f8:	bl	1185c <strcmp@plt>
   150fc:	cmp	r0, #0
   15100:	beq	154a4 <__assert_fail@plt+0x37f8>
   15104:	mov	r0, r7
   15108:	bl	11ac0 <strlen@plt>
   1510c:	mov	r7, r0
   15110:	movw	r0, #17824	; 0x45a0
   15114:	movt	r0, #3
   15118:	bl	1a554 <__assert_fail@plt+0x88a8>
   1511c:	str	r0, [sp, #4]
   15120:	movw	r0, #17844	; 0x45b4
   15124:	mov	r1, r4
   15128:	movt	r0, #3
   1512c:	bl	1185c <strcmp@plt>
   15130:	mov	r1, #12
   15134:	cmp	r0, #0
   15138:	beq	154a8 <__assert_fail@plt+0x37fc>
   1513c:	add	r0, r5, r6
   15140:	ldr	r1, [sp, #24]
   15144:	add	r0, r0, sl
   15148:	add	r0, r0, r8
   1514c:	add	r0, r0, r9
   15150:	add	r0, r0, r1
   15154:	ldr	r1, [sp, #20]
   15158:	add	r0, r0, r1
   1515c:	ldr	r1, [sp, #16]
   15160:	add	r0, r0, r1
   15164:	ldr	r1, [sp, #12]
   15168:	add	r0, r0, r1
   1516c:	ldr	r1, [sp, #8]
   15170:	add	r0, r0, r1
   15174:	add	r5, r0, r7
   15178:	ldr	r0, [sp, #4]
   1517c:	bl	11ac0 <strlen@plt>
   15180:	add	r5, r5, r0
   15184:	movw	r0, #17844	; 0x45b4
   15188:	movt	r0, #3
   1518c:	bl	1a554 <__assert_fail@plt+0x88a8>
   15190:	bl	11ac0 <strlen@plt>
   15194:	add	r0, r5, r0
   15198:	add	r0, r0, #27
   1519c:	bl	1ac9c <__assert_fail@plt+0x8ff0>
   151a0:	mov	r9, r0
   151a4:	movw	r0, #17743	; 0x454f
   151a8:	movt	r0, #3
   151ac:	bl	1a554 <__assert_fail@plt+0x88a8>
   151b0:	mov	r7, r0
   151b4:	bl	11ac0 <strlen@plt>
   151b8:	mov	r6, r0
   151bc:	add	r2, r0, #1
   151c0:	mov	r0, r9
   151c4:	mov	r1, r7
   151c8:	bl	118ec <memcpy@plt>
   151cc:	movw	r0, #17821	; 0x459d
   151d0:	movw	sl, #8236	; 0x202c
   151d4:	mov	r7, r9
   151d8:	mov	r8, #0
   151dc:	movt	r0, #3
   151e0:	strh	sl, [r7, r6]!
   151e4:	strb	r8, [r7, #2]!
   151e8:	bl	1a554 <__assert_fail@plt+0x88a8>
   151ec:	mov	r6, r0
   151f0:	bl	11ac0 <strlen@plt>
   151f4:	mov	r5, r0
   151f8:	add	r2, r0, #1
   151fc:	mov	r0, r7
   15200:	mov	r1, r6
   15204:	bl	118ec <memcpy@plt>
   15208:	movw	r0, #17761	; 0x4561
   1520c:	strh	sl, [r7, r5]!
   15210:	movt	r0, #3
   15214:	strb	r8, [r7, #2]!
   15218:	bl	1a554 <__assert_fail@plt+0x88a8>
   1521c:	mov	r5, r0
   15220:	bl	11ac0 <strlen@plt>
   15224:	mov	r6, r0
   15228:	add	r2, r0, #1
   1522c:	mov	r0, r7
   15230:	mov	r1, r5
   15234:	bl	118ec <memcpy@plt>
   15238:	movw	r0, #17767	; 0x4567
   1523c:	strh	sl, [r7, r6]!
   15240:	movt	r0, #3
   15244:	strb	r8, [r7, #2]!
   15248:	bl	1a554 <__assert_fail@plt+0x88a8>
   1524c:	mov	r5, r0
   15250:	bl	11ac0 <strlen@plt>
   15254:	mov	r6, r0
   15258:	add	r2, r0, #1
   1525c:	mov	r0, r7
   15260:	mov	r1, r5
   15264:	bl	118ec <memcpy@plt>
   15268:	movw	r0, #17804	; 0x458c
   1526c:	strh	sl, [r7, r6]!
   15270:	movt	r0, #3
   15274:	strb	r8, [r7, #2]!
   15278:	bl	1a554 <__assert_fail@plt+0x88a8>
   1527c:	mov	r5, r0
   15280:	bl	11ac0 <strlen@plt>
   15284:	mov	r6, r0
   15288:	add	r2, r0, #1
   1528c:	mov	r0, r7
   15290:	mov	r1, r5
   15294:	bl	118ec <memcpy@plt>
   15298:	movw	r0, #17775	; 0x456f
   1529c:	strh	sl, [r7, r6]!
   152a0:	movt	r0, #3
   152a4:	strb	r8, [r7, #2]!
   152a8:	bl	1a554 <__assert_fail@plt+0x88a8>
   152ac:	mov	r5, r0
   152b0:	bl	11ac0 <strlen@plt>
   152b4:	mov	r6, r0
   152b8:	add	r2, r0, #1
   152bc:	mov	r0, r7
   152c0:	mov	r1, r5
   152c4:	bl	118ec <memcpy@plt>
   152c8:	movw	r0, #17771	; 0x456b
   152cc:	strh	sl, [r7, r6]!
   152d0:	movt	r0, #3
   152d4:	strb	r8, [r7, #2]!
   152d8:	bl	1a554 <__assert_fail@plt+0x88a8>
   152dc:	mov	r5, r0
   152e0:	bl	11ac0 <strlen@plt>
   152e4:	mov	r6, r0
   152e8:	add	r2, r0, #1
   152ec:	mov	r0, r7
   152f0:	mov	r1, r5
   152f4:	bl	118ec <memcpy@plt>
   152f8:	movw	r0, #17785	; 0x4579
   152fc:	strh	sl, [r7, r6]!
   15300:	movt	r0, #3
   15304:	strb	r8, [r7, #2]!
   15308:	bl	1a554 <__assert_fail@plt+0x88a8>
   1530c:	mov	r5, r0
   15310:	bl	11ac0 <strlen@plt>
   15314:	mov	r6, r0
   15318:	add	r2, r0, #1
   1531c:	mov	r0, r7
   15320:	mov	r1, r5
   15324:	bl	118ec <memcpy@plt>
   15328:	movw	r0, #17797	; 0x4585
   1532c:	strh	sl, [r7, r6]!
   15330:	movt	r0, #3
   15334:	strb	r8, [r7, #2]!
   15338:	bl	1a554 <__assert_fail@plt+0x88a8>
   1533c:	mov	r5, r0
   15340:	bl	11ac0 <strlen@plt>
   15344:	mov	r6, r0
   15348:	add	r2, r0, #1
   1534c:	mov	r0, r7
   15350:	mov	r1, r5
   15354:	bl	118ec <memcpy@plt>
   15358:	movw	r0, #17803	; 0x458b
   1535c:	strh	sl, [r7, r6]!
   15360:	movt	r0, #3
   15364:	strb	r8, [r7, #2]!
   15368:	bl	1a554 <__assert_fail@plt+0x88a8>
   1536c:	mov	r5, r0
   15370:	bl	11ac0 <strlen@plt>
   15374:	mov	r6, r0
   15378:	add	r2, r0, #1
   1537c:	mov	r0, r7
   15380:	mov	r1, r5
   15384:	bl	118ec <memcpy@plt>
   15388:	movw	r0, #17809	; 0x4591
   1538c:	strh	sl, [r7, r6]!
   15390:	movt	r0, #3
   15394:	strb	r8, [r7, #2]!
   15398:	bl	1a554 <__assert_fail@plt+0x88a8>
   1539c:	mov	r5, r0
   153a0:	bl	11ac0 <strlen@plt>
   153a4:	mov	r6, r0
   153a8:	add	r2, r0, #1
   153ac:	mov	r0, r7
   153b0:	mov	r1, r5
   153b4:	bl	118ec <memcpy@plt>
   153b8:	movw	r0, #17824	; 0x45a0
   153bc:	strh	sl, [r7, r6]!
   153c0:	movt	r0, #3
   153c4:	strb	r8, [r7, #2]!
   153c8:	bl	1a554 <__assert_fail@plt+0x88a8>
   153cc:	mov	r5, r0
   153d0:	bl	11ac0 <strlen@plt>
   153d4:	mov	r6, r0
   153d8:	add	r2, r0, #1
   153dc:	mov	r0, r7
   153e0:	mov	r1, r5
   153e4:	bl	118ec <memcpy@plt>
   153e8:	movw	r0, #17844	; 0x45b4
   153ec:	strh	sl, [r7, r6]!
   153f0:	movt	r0, #3
   153f4:	strb	r8, [r7, #2]!
   153f8:	bl	1a554 <__assert_fail@plt+0x88a8>
   153fc:	mov	r5, r0
   15400:	bl	11ac0 <strlen@plt>
   15404:	add	r2, r0, #1
   15408:	mov	r0, r7
   1540c:	mov	r1, r5
   15410:	bl	118ec <memcpy@plt>
   15414:	movw	r1, #17687	; 0x4517
   15418:	mov	r0, #0
   1541c:	mov	r2, #5
   15420:	movt	r1, #3
   15424:	bl	11934 <dcgettext@plt>
   15428:	mov	r5, r0
   1542c:	mov	r0, r4
   15430:	bl	1a554 <__assert_fail@plt+0x88a8>
   15434:	mov	r3, r0
   15438:	mov	r0, #1
   1543c:	mov	r1, #0
   15440:	mov	r2, r5
   15444:	str	r9, [sp]
   15448:	bl	119dc <error@plt>
   1544c:	mov	r1, #0
   15450:	b	154a8 <__assert_fail@plt+0x37fc>
   15454:	mov	r1, #1
   15458:	b	154a8 <__assert_fail@plt+0x37fc>
   1545c:	mov	r1, #2
   15460:	b	154a8 <__assert_fail@plt+0x37fc>
   15464:	mov	r1, #3
   15468:	b	154a8 <__assert_fail@plt+0x37fc>
   1546c:	mov	r1, #4
   15470:	b	154a8 <__assert_fail@plt+0x37fc>
   15474:	mov	r1, #5
   15478:	b	154a8 <__assert_fail@plt+0x37fc>
   1547c:	mov	r1, #6
   15480:	b	154a8 <__assert_fail@plt+0x37fc>
   15484:	mov	r1, #7
   15488:	b	154a8 <__assert_fail@plt+0x37fc>
   1548c:	mov	r1, #8
   15490:	b	154a8 <__assert_fail@plt+0x37fc>
   15494:	mov	r1, #9
   15498:	b	154a8 <__assert_fail@plt+0x37fc>
   1549c:	mov	r1, #10
   154a0:	b	154a8 <__assert_fail@plt+0x37fc>
   154a4:	mov	r1, #11
   154a8:	add	r0, r1, r1, lsl #1
   154ac:	movw	r1, #17528	; 0x4478
   154b0:	movt	r1, #3
   154b4:	add	r0, r1, r0, lsl #2
   154b8:	ldr	r0, [r0, #8]
   154bc:	sub	sp, fp, #28
   154c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154c4:	mov	r1, r0
   154c8:	mov	r0, #0
   154cc:	cmp	r1, #12
   154d0:	bxhi	lr
   154d4:	add	r0, r1, r1, lsl #1
   154d8:	movw	r1, #17528	; 0x4478
   154dc:	movt	r1, #3
   154e0:	ldr	r0, [r1, r0, lsl #2]
   154e4:	bx	lr
   154e8:	mov	r1, r0
   154ec:	mvn	r0, #0
   154f0:	cmp	r1, #12
   154f4:	bxhi	lr
   154f8:	add	r0, r1, r1, lsl #1
   154fc:	movw	r1, #17528	; 0x4478
   15500:	movt	r1, #3
   15504:	add	r0, r1, r0, lsl #2
   15508:	ldr	r0, [r0, #8]
   1550c:	bx	lr
   15510:	mov	r1, r0
   15514:	mov	r0, #0
   15518:	cmp	r1, #12
   1551c:	bxhi	lr
   15520:	add	r0, r1, r1, lsl #1
   15524:	movw	r1, #17528	; 0x4478
   15528:	movt	r1, #3
   1552c:	add	r0, r1, r0, lsl #2
   15530:	ldr	r0, [r0, #4]
   15534:	bx	lr
   15538:	push	{r4, sl, fp, lr}
   1553c:	add	fp, sp, #8
   15540:	mov	lr, r0
   15544:	mvn	r0, #0
   15548:	cmp	lr, #12
   1554c:	pophi	{r4, sl, fp, pc}
   15550:	cmp	lr, #0
   15554:	beq	155ac <__assert_fail@plt+0x3900>
   15558:	movw	r3, #17528	; 0x4478
   1555c:	add	r2, lr, lr, lsl #1
   15560:	movt	r3, #3
   15564:	add	r2, r3, r2, lsl #2
   15568:	ldr	ip, [r2, #8]
   1556c:	add	r2, r3, #4
   15570:	mov	r3, #0
   15574:	ldr	r4, [r2]
   15578:	tst	r4, r1
   1557c:	bne	1559c <__assert_fail@plt+0x38f0>
   15580:	add	r3, r3, #1
   15584:	add	r2, r2, #12
   15588:	cmp	lr, r3
   1558c:	beq	155ac <__assert_fail@plt+0x3900>
   15590:	ldr	r4, [r2]
   15594:	tst	r4, r1
   15598:	beq	15580 <__assert_fail@plt+0x38d4>
   1559c:	ldr	r4, [r2, #4]
   155a0:	cmp	ip, r4
   155a4:	bne	15580 <__assert_fail@plt+0x38d4>
   155a8:	mov	r0, r3
   155ac:	pop	{r4, sl, fp, pc}
   155b0:	push	{r4, r5, fp, lr}
   155b4:	add	fp, sp, #8
   155b8:	ldr	r5, [fp, #8]
   155bc:	cmp	r2, #0
   155c0:	beq	15604 <__assert_fail@plt+0x3958>
   155c4:	mov	r2, #0
   155c8:	str	r2, [r3]
   155cc:	str	r2, [r5]
   155d0:	ldr	r2, [r3]
   155d4:	add	r4, r0, r2
   155d8:	ldrb	r0, [r1]
   155dc:	cmp	r0, #0
   155e0:	beq	15638 <__assert_fail@plt+0x398c>
   155e4:	mov	r0, r4
   155e8:	bl	11c10 <strpbrk@plt>
   155ec:	cmp	r0, #0
   155f0:	beq	15638 <__assert_fail@plt+0x398c>
   155f4:	sub	r0, r0, r4
   155f8:	str	r0, [r5]
   155fc:	mov	r0, #1
   15600:	pop	{r4, r5, fp, pc}
   15604:	ldr	r2, [r5]
   15608:	ldr	r4, [r3]
   1560c:	add	r2, r4, r2
   15610:	str	r2, [r3]
   15614:	ldrb	r4, [r0, r2]
   15618:	cmp	r4, #0
   1561c:	beq	1564c <__assert_fail@plt+0x39a0>
   15620:	add	r2, r2, #1
   15624:	str	r2, [r3]
   15628:	add	r4, r0, r2
   1562c:	ldrb	r0, [r1]
   15630:	cmp	r0, #0
   15634:	bne	155e4 <__assert_fail@plt+0x3938>
   15638:	mov	r0, r4
   1563c:	bl	11ac0 <strlen@plt>
   15640:	str	r0, [r5]
   15644:	mov	r0, #1
   15648:	pop	{r4, r5, fp, pc}
   1564c:	mov	r0, #0
   15650:	pop	{r4, r5, fp, pc}
   15654:	push	{r4, r5, fp, lr}
   15658:	add	fp, sp, #8
   1565c:	sub	sp, sp, #16
   15660:	mov	r4, r1
   15664:	movw	r1, #17848	; 0x45b8
   15668:	mov	r5, r0
   1566c:	mov	r0, #0
   15670:	mov	r2, #5
   15674:	movt	r1, #3
   15678:	bl	11934 <dcgettext@plt>
   1567c:	movw	r2, #18093	; 0x46ad
   15680:	movw	r3, #17469	; 0x443d
   15684:	mov	r1, r0
   15688:	movw	r0, #18140	; 0x46dc
   1568c:	movt	r2, #3
   15690:	movt	r0, #3
   15694:	movt	r3, #3
   15698:	str	r2, [sp, #4]
   1569c:	movw	r2, #18054	; 0x4686
   156a0:	str	r3, [sp]
   156a4:	str	r0, [sp, #8]
   156a8:	mov	r0, r5
   156ac:	mov	r3, r4
   156b0:	movt	r2, #3
   156b4:	bl	11ad8 <fprintf@plt>
   156b8:	sub	sp, fp, #8
   156bc:	pop	{r4, r5, fp, pc}
   156c0:	sub	r0, r0, #1
   156c4:	ldrb	r3, [r0, #1]!
   156c8:	cmp	r3, #47	; 0x2f
   156cc:	beq	156c4 <__assert_fail@plt+0x3a18>
   156d0:	mov	r2, #0
   156d4:	mov	r1, r0
   156d8:	uxtb	r3, r3
   156dc:	cmp	r3, #47	; 0x2f
   156e0:	bne	156f8 <__assert_fail@plt+0x3a4c>
   156e4:	ldrb	r3, [r1, #1]!
   156e8:	mov	r2, #1
   156ec:	uxtb	r3, r3
   156f0:	cmp	r3, #47	; 0x2f
   156f4:	beq	156e4 <__assert_fail@plt+0x3a38>
   156f8:	cmp	r3, #0
   156fc:	bxeq	lr
   15700:	tst	r2, #1
   15704:	mov	r2, #0
   15708:	movne	r0, r1
   1570c:	ldrb	r3, [r1, #1]!
   15710:	uxtb	r3, r3
   15714:	cmp	r3, #47	; 0x2f
   15718:	bne	156f8 <__assert_fail@plt+0x3a4c>
   1571c:	b	156e4 <__assert_fail@plt+0x3a38>
   15720:	push	{r4, sl, fp, lr}
   15724:	add	fp, sp, #8
   15728:	mov	r4, r0
   1572c:	bl	11ac0 <strlen@plt>
   15730:	mov	r1, r0
   15734:	sub	r2, r4, #1
   15738:	mov	r0, r1
   1573c:	cmp	r1, #2
   15740:	bcc	15754 <__assert_fail@plt+0x3aa8>
   15744:	ldrb	r3, [r2, r0]
   15748:	sub	r1, r0, #1
   1574c:	cmp	r3, #47	; 0x2f
   15750:	beq	15738 <__assert_fail@plt+0x3a8c>
   15754:	pop	{r4, sl, fp, pc}
   15758:	movw	r1, #25224	; 0x6288
   1575c:	movt	r1, #4
   15760:	str	r0, [r1, #4]
   15764:	bx	lr
   15768:	movw	r1, #25224	; 0x6288
   1576c:	movt	r1, #4
   15770:	strb	r0, [r1]
   15774:	bx	lr
   15778:	push	{r4, r5, r6, sl, fp, lr}
   1577c:	add	fp, sp, #16
   15780:	sub	sp, sp, #8
   15784:	movw	r0, #25108	; 0x6214
   15788:	movt	r0, #4
   1578c:	ldr	r0, [r0]
   15790:	bl	32ba8 <__assert_fail@plt+0x20efc>
   15794:	cmp	r0, #0
   15798:	beq	157c0 <__assert_fail@plt+0x3b14>
   1579c:	movw	r5, #25224	; 0x6288
   157a0:	movt	r5, #4
   157a4:	ldrb	r0, [r5]
   157a8:	cmp	r0, #0
   157ac:	beq	157ec <__assert_fail@plt+0x3b40>
   157b0:	bl	11af0 <__errno_location@plt>
   157b4:	ldr	r0, [r0]
   157b8:	cmp	r0, #32
   157bc:	bne	157ec <__assert_fail@plt+0x3b40>
   157c0:	movw	r0, #25104	; 0x6210
   157c4:	movt	r0, #4
   157c8:	ldr	r0, [r0]
   157cc:	bl	32ba8 <__assert_fail@plt+0x20efc>
   157d0:	cmp	r0, #0
   157d4:	subeq	sp, fp, #16
   157d8:	popeq	{r4, r5, r6, sl, fp, pc}
   157dc:	movw	r0, #25008	; 0x61b0
   157e0:	movt	r0, #4
   157e4:	ldr	r0, [r0]
   157e8:	bl	118e0 <_exit@plt>
   157ec:	movw	r1, #18162	; 0x46f2
   157f0:	mov	r0, #0
   157f4:	mov	r2, #5
   157f8:	movt	r1, #3
   157fc:	bl	11934 <dcgettext@plt>
   15800:	ldr	r6, [r5, #4]
   15804:	mov	r4, r0
   15808:	bl	11af0 <__errno_location@plt>
   1580c:	ldr	r5, [r0]
   15810:	cmp	r6, #0
   15814:	bne	15830 <__assert_fail@plt+0x3b84>
   15818:	movw	r2, #20348	; 0x4f7c
   1581c:	mov	r0, #0
   15820:	mov	r1, r5
   15824:	mov	r3, r4
   15828:	movt	r2, #3
   1582c:	b	15850 <__assert_fail@plt+0x3ba4>
   15830:	mov	r0, r6
   15834:	bl	1a1cc <__assert_fail@plt+0x8520>
   15838:	movw	r2, #18174	; 0x46fe
   1583c:	mov	r3, r0
   15840:	str	r4, [sp]
   15844:	mov	r0, #0
   15848:	mov	r1, r5
   1584c:	movt	r2, #3
   15850:	bl	119dc <error@plt>
   15854:	movw	r0, #25008	; 0x61b0
   15858:	movt	r0, #4
   1585c:	ldr	r0, [r0]
   15860:	bl	118e0 <_exit@plt>
   15864:	sub	sp, sp, #8
   15868:	push	{fp, lr}
   1586c:	mov	fp, sp
   15870:	sub	sp, sp, #8
   15874:	str	r2, [fp, #8]
   15878:	str	r3, [fp, #12]
   1587c:	tst	r1, #64	; 0x40
   15880:	mov	r2, #0
   15884:	ldrne	r2, [fp, #8]
   15888:	bl	119f4 <open64@plt>
   1588c:	bl	1a59c <__assert_fail@plt+0x88f0>
   15890:	mov	sp, fp
   15894:	pop	{fp, lr}
   15898:	add	sp, sp, #8
   1589c:	bx	lr
   158a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158a4:	add	fp, sp, #28
   158a8:	sub	sp, sp, #4
   158ac:	vpush	{d8-d9}
   158b0:	sub	sp, sp, #96	; 0x60
   158b4:	mov	r6, r3
   158b8:	mov	r7, r2
   158bc:	str	r1, [sp, #36]	; 0x24
   158c0:	mov	sl, r0
   158c4:	bl	11be0 <localeconv@plt>
   158c8:	ldr	r5, [r0]
   158cc:	mov	r4, r0
   158d0:	mov	r0, r5
   158d4:	bl	11ac0 <strlen@plt>
   158d8:	sub	r1, r0, #1
   158dc:	movw	r2, #14125	; 0x372d
   158e0:	cmp	r1, #16
   158e4:	movt	r2, #3
   158e8:	movcs	r0, #1
   158ec:	movcc	r2, r5
   158f0:	ldr	r5, [r4, #4]
   158f4:	str	r0, [sp, #4]
   158f8:	ldr	r0, [r4, #8]
   158fc:	str	r2, [sp]
   15900:	str	r0, [sp, #8]
   15904:	mov	r0, r5
   15908:	bl	11ac0 <strlen@plt>
   1590c:	cmp	r0, #17
   15910:	movw	r0, #647	; 0x287
   15914:	movw	r1, #16911	; 0x420f
   15918:	str	r7, [sp, #24]
   1591c:	ldr	r4, [fp, #16]
   15920:	str	r6, [sp, #32]
   15924:	add	r0, r7, r0
   15928:	movt	r1, #3
   1592c:	movcc	r1, r5
   15930:	ldr	r7, [fp, #8]
   15934:	ldr	r5, [fp, #12]
   15938:	str	r0, [sp, #28]
   1593c:	ands	r0, r6, #32
   15940:	str	r1, [sp, #44]	; 0x2c
   15944:	str	r0, [sp, #16]
   15948:	mov	r0, #1000	; 0x3e8
   1594c:	movwne	r0, #1024	; 0x400
   15950:	str	r0, [sp, #12]
   15954:	and	r0, r6, #3
   15958:	ldr	r6, [fp, #20]
   1595c:	str	r0, [sp, #40]	; 0x28
   15960:	subs	r0, r7, r4
   15964:	sbcs	r0, r5, r6
   15968:	bcs	15a54 <__assert_fail@plt+0x3da8>
   1596c:	orrs	r0, r7, r5
   15970:	beq	15b5c <__assert_fail@plt+0x3eb0>
   15974:	ldr	r9, [fp, #16]
   15978:	mov	r1, r6
   1597c:	mov	r2, r7
   15980:	mov	r3, r5
   15984:	mov	r0, r9
   15988:	bl	3334c <__assert_fail@plt+0x216a0>
   1598c:	mov	r4, r0
   15990:	mov	r8, r1
   15994:	umull	r0, r1, r0, r7
   15998:	mla	r1, r4, r5, r1
   1599c:	mla	r1, r8, r7, r1
   159a0:	subs	r0, r9, r0
   159a4:	sbc	r1, r6, r1
   159a8:	orrs	r0, r0, r1
   159ac:	bne	15b5c <__assert_fail@plt+0x3eb0>
   159b0:	ldr	r5, [sp, #36]	; 0x24
   159b4:	mov	r0, sl
   159b8:	mov	r2, r4
   159bc:	mov	r3, r8
   159c0:	mov	r1, r5
   159c4:	bl	3334c <__assert_fail@plt+0x216a0>
   159c8:	mov	r9, r1
   159cc:	umull	r2, r1, r0, r4
   159d0:	str	r0, [sp, #20]
   159d4:	mov	r3, r8
   159d8:	mla	r1, r0, r8, r1
   159dc:	mla	r1, r9, r4, r1
   159e0:	subs	r0, sl, r2
   159e4:	mov	r2, #10
   159e8:	sbc	r1, r5, r1
   159ec:	umull	r5, r0, r0, r2
   159f0:	mov	r2, r4
   159f4:	add	r1, r1, r1, lsl #2
   159f8:	add	r6, r0, r1, lsl #1
   159fc:	mov	r0, r5
   15a00:	mov	r1, r6
   15a04:	bl	3334c <__assert_fail@plt+0x216a0>
   15a08:	mov	r7, r0
   15a0c:	umull	r0, r2, r0, r4
   15a10:	mla	r2, r7, r8, r2
   15a14:	mla	r1, r1, r4, r2
   15a18:	mov	r2, #2
   15a1c:	subs	r0, r5, r0
   15a20:	sbc	r1, r6, r1
   15a24:	subs	r3, r4, r0, lsl #1
   15a28:	lsl	r1, r1, #1
   15a2c:	orr	r1, r1, r0, lsr #31
   15a30:	orr	ip, r1, r0, lsl #1
   15a34:	sbcs	r3, r8, r1
   15a38:	movwcc	r2, #3
   15a3c:	cmp	ip, #0
   15a40:	movwne	ip, #1
   15a44:	rsbs	r0, r4, r0, lsl #1
   15a48:	sbcs	r0, r1, r8
   15a4c:	movcs	ip, r2
   15a50:	b	15ac0 <__assert_fail@plt+0x3e14>
   15a54:	mov	r0, r7
   15a58:	mov	r1, r5
   15a5c:	mov	r2, r4
   15a60:	mov	r3, r6
   15a64:	bl	3334c <__assert_fail@plt+0x216a0>
   15a68:	mov	r2, r0
   15a6c:	mov	r3, r1
   15a70:	umull	r0, r1, r0, r4
   15a74:	mla	r1, r2, r6, r1
   15a78:	mla	r1, r3, r4, r1
   15a7c:	subs	r0, r7, r0
   15a80:	sbc	r1, r5, r1
   15a84:	orrs	r0, r0, r1
   15a88:	bne	15b5c <__assert_fail@plt+0x3eb0>
   15a8c:	ldr	r4, [sp, #36]	; 0x24
   15a90:	umull	r0, r1, r2, sl
   15a94:	mla	r1, r2, r4, r1
   15a98:	str	r0, [sp, #20]
   15a9c:	mla	r9, r3, sl, r1
   15aa0:	mov	r1, r9
   15aa4:	bl	3334c <__assert_fail@plt+0x216a0>
   15aa8:	eor	r1, r1, r4
   15aac:	eor	r0, r0, sl
   15ab0:	orrs	r0, r0, r1
   15ab4:	bne	15b5c <__assert_fail@plt+0x3eb0>
   15ab8:	mov	ip, #0
   15abc:	mov	r7, #0
   15ac0:	ldr	r0, [sp, #32]
   15ac4:	ldr	r8, [sp, #12]
   15ac8:	ldr	r5, [sp, #40]	; 0x28
   15acc:	mvn	r3, #0
   15ad0:	ands	r4, r0, #16
   15ad4:	beq	15e88 <__assert_fail@plt+0x41dc>
   15ad8:	ldr	sl, [sp, #20]
   15adc:	mov	r3, #0
   15ae0:	subs	r0, sl, r8
   15ae4:	sbcs	r0, r9, #0
   15ae8:	bcc	16444 <__assert_fail@plt+0x4798>
   15aec:	mov	r0, sl
   15af0:	mov	r1, r9
   15af4:	mov	r2, r8
   15af8:	mov	r3, #0
   15afc:	mov	r6, r5
   15b00:	mov	r5, ip
   15b04:	bl	3334c <__assert_fail@plt+0x216a0>
   15b08:	mov	r3, sl
   15b0c:	mov	sl, r0
   15b10:	mov	r2, r5
   15b14:	mov	r9, r1
   15b18:	mls	r0, r0, r8, r3
   15b1c:	add	r0, r0, r0, lsl #2
   15b20:	add	r0, r7, r0, lsl #1
   15b24:	udiv	r7, r0, r8
   15b28:	mls	r0, r7, r8, r0
   15b2c:	lsl	r0, r0, #1
   15b30:	orr	r0, r0, r5, lsr #1
   15b34:	cmp	r0, r8
   15b38:	bcs	16088 <__assert_fail@plt+0x43dc>
   15b3c:	rsb	r1, r2, #0
   15b40:	subs	ip, r0, r1
   15b44:	movwne	ip, #1
   15b48:	subs	r0, sl, r8
   15b4c:	mov	r3, #1
   15b50:	sbcs	r0, r9, #0
   15b54:	bcs	160a8 <__assert_fail@plt+0x43fc>
   15b58:	b	161cc <__assert_fail@plt+0x4520>
   15b5c:	ldr	r9, [fp, #16]
   15b60:	mov	r1, r6
   15b64:	mov	r0, r9
   15b68:	bl	332d8 <__assert_fail@plt+0x2162c>
   15b6c:	vmov	d8, r0, r1
   15b70:	ldr	r1, [sp, #36]	; 0x24
   15b74:	mov	r0, sl
   15b78:	bl	332d8 <__assert_fail@plt+0x2162c>
   15b7c:	mov	r4, r0
   15b80:	mov	r6, r1
   15b84:	mov	r0, r7
   15b88:	mov	r1, r5
   15b8c:	bl	332d8 <__assert_fail@plt+0x2162c>
   15b90:	vmov	d16, r0, r1
   15b94:	vmov	d17, r4, r6
   15b98:	ldr	r5, [sp, #32]
   15b9c:	tst	r5, #16
   15ba0:	vdiv.f64	d16, d16, d8
   15ba4:	vmul.f64	d8, d16, d17
   15ba8:	bne	15c28 <__assert_fail@plt+0x3f7c>
   15bac:	ldr	r6, [sp, #40]	; 0x28
   15bb0:	cmp	r6, #1
   15bb4:	beq	15ed0 <__assert_fail@plt+0x4224>
   15bb8:	vldr	d16, [pc, #776]	; 15ec8 <__assert_fail@plt+0x421c>
   15bbc:	ldr	r7, [sp, #28]
   15bc0:	ldr	sl, [sp, #24]
   15bc4:	vcmpe.f64	d8, d16
   15bc8:	vmrs	APSR_nzcv, fpscr
   15bcc:	bpl	15ed8 <__assert_fail@plt+0x422c>
   15bd0:	vmov	r0, r1, d8
   15bd4:	bl	33398 <__assert_fail@plt+0x216ec>
   15bd8:	mov	r4, r0
   15bdc:	mov	r8, r1
   15be0:	mov	r0, #0
   15be4:	cmp	r6, #0
   15be8:	mov	r2, #0
   15bec:	bne	15c14 <__assert_fail@plt+0x3f68>
   15bf0:	mov	r0, r4
   15bf4:	mov	r1, r8
   15bf8:	bl	332d8 <__assert_fail@plt+0x2162c>
   15bfc:	vmov	d16, r0, r1
   15c00:	mov	r2, #0
   15c04:	mov	r0, #0
   15c08:	vcmp.f64	d8, d16
   15c0c:	vmrs	APSR_nzcv, fpscr
   15c10:	movwne	r0, #1
   15c14:	adds	r0, r0, r4
   15c18:	adc	r1, r2, r8
   15c1c:	bl	332d8 <__assert_fail@plt+0x2162c>
   15c20:	vmov	d8, r0, r1
   15c24:	b	15ed8 <__assert_fail@plt+0x422c>
   15c28:	ldr	r0, [sp, #12]
   15c2c:	mov	r1, #1
   15c30:	vmov	s0, r0
   15c34:	vcvt.f64.u32	d16, s0
   15c38:	ldr	r6, [sp, #40]	; 0x28
   15c3c:	vmul.f64	d17, d16, d16
   15c40:	vcmpe.f64	d17, d8
   15c44:	vmrs	APSR_nzcv, fpscr
   15c48:	bls	15c60 <__assert_fail@plt+0x3fb4>
   15c4c:	ldr	r7, [sp, #28]
   15c50:	ldr	sl, [sp, #24]
   15c54:	ldr	r9, [sp, #4]
   15c58:	vmov.f64	d17, d16
   15c5c:	b	15cfc <__assert_fail@plt+0x4050>
   15c60:	vmul.f64	d18, d17, d16
   15c64:	ldr	r7, [sp, #28]
   15c68:	ldr	sl, [sp, #24]
   15c6c:	ldr	r9, [sp, #4]
   15c70:	mov	r1, #2
   15c74:	vcmpe.f64	d18, d8
   15c78:	vmrs	APSR_nzcv, fpscr
   15c7c:	bhi	15cfc <__assert_fail@plt+0x4050>
   15c80:	vmul.f64	d19, d18, d16
   15c84:	vmov.f64	d17, d18
   15c88:	mov	r1, #3
   15c8c:	vcmpe.f64	d19, d8
   15c90:	vmrs	APSR_nzcv, fpscr
   15c94:	bhi	15cfc <__assert_fail@plt+0x4050>
   15c98:	vmul.f64	d18, d19, d16
   15c9c:	vmov.f64	d17, d19
   15ca0:	mov	r1, #4
   15ca4:	vcmpe.f64	d18, d8
   15ca8:	vmrs	APSR_nzcv, fpscr
   15cac:	bhi	15cfc <__assert_fail@plt+0x4050>
   15cb0:	vmul.f64	d19, d18, d16
   15cb4:	vmov.f64	d17, d18
   15cb8:	mov	r1, #5
   15cbc:	vcmpe.f64	d19, d8
   15cc0:	vmrs	APSR_nzcv, fpscr
   15cc4:	bhi	15cfc <__assert_fail@plt+0x4050>
   15cc8:	vmul.f64	d18, d19, d16
   15ccc:	vmov.f64	d17, d19
   15cd0:	mov	r1, #6
   15cd4:	vcmpe.f64	d18, d8
   15cd8:	vmrs	APSR_nzcv, fpscr
   15cdc:	bhi	15cfc <__assert_fail@plt+0x4050>
   15ce0:	vmul.f64	d16, d18, d16
   15ce4:	mov	r1, #7
   15ce8:	vmov.f64	d17, d18
   15cec:	vcmpe.f64	d16, d8
   15cf0:	vmrs	APSR_nzcv, fpscr
   15cf4:	movls	r1, #8
   15cf8:	vmovls.f64	d17, d16
   15cfc:	vdiv.f64	d8, d8, d17
   15d00:	cmp	r6, #1
   15d04:	str	r1, [sp, #20]
   15d08:	vmov.f64	d16, d8
   15d0c:	beq	15d7c <__assert_fail@plt+0x40d0>
   15d10:	vldr	d16, [pc, #432]	; 15ec8 <__assert_fail@plt+0x421c>
   15d14:	vcmpe.f64	d8, d16
   15d18:	vmov.f64	d16, d8
   15d1c:	vmrs	APSR_nzcv, fpscr
   15d20:	bpl	15d7c <__assert_fail@plt+0x40d0>
   15d24:	vmov	r0, r1, d8
   15d28:	bl	33398 <__assert_fail@plt+0x216ec>
   15d2c:	mov	r4, r0
   15d30:	mov	r8, r1
   15d34:	mov	r0, #0
   15d38:	cmp	r6, #0
   15d3c:	mov	r2, #0
   15d40:	bne	15d68 <__assert_fail@plt+0x40bc>
   15d44:	mov	r0, r4
   15d48:	mov	r1, r8
   15d4c:	bl	332d8 <__assert_fail@plt+0x2162c>
   15d50:	vmov	d16, r0, r1
   15d54:	mov	r2, #0
   15d58:	mov	r0, #0
   15d5c:	vcmp.f64	d8, d16
   15d60:	vmrs	APSR_nzcv, fpscr
   15d64:	movwne	r0, #1
   15d68:	adds	r0, r0, r4
   15d6c:	adc	r1, r2, r8
   15d70:	bl	332d8 <__assert_fail@plt+0x2162c>
   15d74:	vmov	d16, r0, r1
   15d78:	ldr	r6, [sp, #40]	; 0x28
   15d7c:	vmov	r2, r3, d16
   15d80:	movw	r1, #18187	; 0x470b
   15d84:	mov	r0, sl
   15d88:	movt	r1, #3
   15d8c:	bl	11bf8 <sprintf@plt>
   15d90:	ldr	r1, [sp, #16]
   15d94:	mov	r0, #3
   15d98:	cmp	r1, #0
   15d9c:	movwne	r0, #2
   15da0:	add	r4, r0, r9
   15da4:	mov	r0, sl
   15da8:	bl	11ac0 <strlen@plt>
   15dac:	cmp	r4, r0
   15db0:	bcs	15e30 <__assert_fail@plt+0x4184>
   15db4:	vmov.f64	d9, #36	; 0x41200000  10.0
   15db8:	cmp	r6, #1
   15dbc:	vmul.f64	d8, d8, d9
   15dc0:	beq	15e58 <__assert_fail@plt+0x41ac>
   15dc4:	vldr	d16, [pc, #252]	; 15ec8 <__assert_fail@plt+0x421c>
   15dc8:	vcmpe.f64	d8, d16
   15dcc:	vmrs	APSR_nzcv, fpscr
   15dd0:	bpl	15e58 <__assert_fail@plt+0x41ac>
   15dd4:	vmov	r0, r1, d8
   15dd8:	bl	33398 <__assert_fail@plt+0x216ec>
   15ddc:	ldr	r9, [fp, #16]
   15de0:	mov	r4, r0
   15de4:	mov	r8, r1
   15de8:	mov	r0, #0
   15dec:	cmp	r6, #0
   15df0:	mov	r2, #0
   15df4:	bne	15e1c <__assert_fail@plt+0x4170>
   15df8:	mov	r0, r4
   15dfc:	mov	r1, r8
   15e00:	bl	332d8 <__assert_fail@plt+0x2162c>
   15e04:	vmov	d16, r0, r1
   15e08:	mov	r2, #0
   15e0c:	mov	r0, #0
   15e10:	vcmp.f64	d8, d16
   15e14:	vmrs	APSR_nzcv, fpscr
   15e18:	movwne	r0, #1
   15e1c:	adds	r0, r0, r4
   15e20:	adc	r1, r2, r8
   15e24:	bl	332d8 <__assert_fail@plt+0x2162c>
   15e28:	vmov	d8, r0, r1
   15e2c:	b	15e5c <__assert_fail@plt+0x41b0>
   15e30:	mov	r2, r0
   15e34:	add	r4, r9, #1
   15e38:	tst	r5, #8
   15e3c:	beq	15e50 <__assert_fail@plt+0x41a4>
   15e40:	add	r0, r2, sl
   15e44:	ldrb	r0, [r0, #-1]
   15e48:	cmp	r0, #48	; 0x30
   15e4c:	beq	15db4 <__assert_fail@plt+0x4108>
   15e50:	ldr	r9, [fp, #16]
   15e54:	b	15f04 <__assert_fail@plt+0x4258>
   15e58:	ldr	r9, [fp, #16]
   15e5c:	vdiv.f64	d16, d8, d9
   15e60:	movw	r1, #18181	; 0x4705
   15e64:	mov	r0, sl
   15e68:	movt	r1, #3
   15e6c:	vmov	r2, r3, d16
   15e70:	bl	11bf8 <sprintf@plt>
   15e74:	mov	r0, sl
   15e78:	bl	11ac0 <strlen@plt>
   15e7c:	mov	r2, r0
   15e80:	mov	r4, #0
   15e84:	b	15f04 <__assert_fail@plt+0x4258>
   15e88:	ldr	r6, [sp, #28]
   15e8c:	ldr	sl, [sp, #20]
   15e90:	cmp	r5, #0
   15e94:	beq	16450 <__assert_fail@plt+0x47a4>
   15e98:	cmp	r5, #1
   15e9c:	bne	164c0 <__assert_fail@plt+0x4814>
   15ea0:	mov	r0, #0
   15ea4:	rsbs	r1, ip, #0
   15ea8:	and	r2, sl, #1
   15eac:	sbc	r0, r0, #0
   15eb0:	eor	r1, r2, r1
   15eb4:	orrs	r0, r1, r0
   15eb8:	addne	r7, r7, #1
   15ebc:	cmp	r7, #5
   15ec0:	bgt	1645c <__assert_fail@plt+0x47b0>
   15ec4:	b	164c0 <__assert_fail@plt+0x4814>
   15ec8:	andeq	r0, r0, r0
   15ecc:	mvnsmi	r0, #0
   15ed0:	ldr	r7, [sp, #28]
   15ed4:	ldr	sl, [sp, #24]
   15ed8:	vmov	r2, r3, d8
   15edc:	movw	r1, #18181	; 0x4705
   15ee0:	mov	r0, sl
   15ee4:	movt	r1, #3
   15ee8:	bl	11bf8 <sprintf@plt>
   15eec:	mov	r0, sl
   15ef0:	bl	11ac0 <strlen@plt>
   15ef4:	mov	r2, r0
   15ef8:	mvn	r0, #0
   15efc:	mov	r4, #0
   15f00:	str	r0, [sp, #20]
   15f04:	sub	r0, r7, r2
   15f08:	mov	r1, sl
   15f0c:	mov	r8, r0
   15f10:	bl	118a4 <memmove@plt>
   15f14:	sub	r6, r7, r4
   15f18:	tst	r5, #4
   15f1c:	bne	16518 <__assert_fail@plt+0x486c>
   15f20:	ldr	r3, [sp, #20]
   15f24:	tst	r5, #128	; 0x80
   15f28:	beq	16630 <__assert_fail@plt+0x4984>
   15f2c:	cmn	r3, #1
   15f30:	bgt	1601c <__assert_fail@plt+0x4370>
   15f34:	subs	r0, r9, #2
   15f38:	ldr	r0, [fp, #20]
   15f3c:	mov	r3, #0
   15f40:	sbcs	r0, r0, #0
   15f44:	bcc	1601c <__assert_fail@plt+0x4370>
   15f48:	ldr	r0, [sp, #12]
   15f4c:	mov	r3, #1
   15f50:	subs	r0, r0, r9
   15f54:	ldr	r0, [fp, #20]
   15f58:	rscs	r0, r0, #0
   15f5c:	bcs	1601c <__assert_fail@plt+0x4370>
   15f60:	ldr	r0, [sp, #12]
   15f64:	mov	r3, #2
   15f68:	umull	r1, r0, r0, r0
   15f6c:	subs	r2, r1, r9
   15f70:	ldr	r2, [fp, #20]
   15f74:	sbcs	r2, r0, r2
   15f78:	bcs	1601c <__assert_fail@plt+0x4370>
   15f7c:	ldr	r3, [sp, #12]
   15f80:	umull	r1, r2, r1, r3
   15f84:	mla	r2, r0, r3, r2
   15f88:	mov	r3, #3
   15f8c:	subs	r0, r1, r9
   15f90:	ldr	r0, [fp, #20]
   15f94:	sbcs	r0, r2, r0
   15f98:	bcs	1601c <__assert_fail@plt+0x4370>
   15f9c:	ldr	r3, [sp, #12]
   15fa0:	umull	r0, r1, r1, r3
   15fa4:	mla	r1, r2, r3, r1
   15fa8:	mov	r3, #4
   15fac:	subs	r2, r0, r9
   15fb0:	ldr	r2, [fp, #20]
   15fb4:	sbcs	r2, r1, r2
   15fb8:	bcs	1601c <__assert_fail@plt+0x4370>
   15fbc:	ldr	r3, [sp, #12]
   15fc0:	umull	r0, r2, r0, r3
   15fc4:	mla	r1, r1, r3, r2
   15fc8:	mov	r3, #5
   15fcc:	subs	r2, r0, r9
   15fd0:	ldr	r2, [fp, #20]
   15fd4:	sbcs	r2, r1, r2
   15fd8:	bcs	1601c <__assert_fail@plt+0x4370>
   15fdc:	ldr	r3, [sp, #12]
   15fe0:	umull	r0, r2, r0, r3
   15fe4:	mla	r1, r1, r3, r2
   15fe8:	mov	r3, #6
   15fec:	subs	r2, r0, r9
   15ff0:	ldr	r2, [fp, #20]
   15ff4:	sbcs	r2, r1, r2
   15ff8:	bcs	1601c <__assert_fail@plt+0x4370>
   15ffc:	ldr	r3, [sp, #12]
   16000:	umull	r0, r2, r0, r3
   16004:	mla	r1, r1, r3, r2
   16008:	mov	r3, #7
   1600c:	subs	r0, r0, r9
   16010:	ldr	r0, [fp, #20]
   16014:	sbcs	r0, r1, r0
   16018:	movwcc	r3, #8
   1601c:	and	r0, r5, #256	; 0x100
   16020:	tst	r5, #64	; 0x40
   16024:	orrsne	r1, r3, r0
   16028:	movne	r1, #32
   1602c:	addne	r7, sl, #648	; 0x288
   16030:	strbne	r1, [sl, #647]	; 0x287
   16034:	cmp	r3, #0
   16038:	beq	16060 <__assert_fail@plt+0x43b4>
   1603c:	ldr	r1, [sp, #16]
   16040:	cmp	r1, #0
   16044:	moveq	r1, #107	; 0x6b
   16048:	cmpeq	r3, #1
   1604c:	beq	1605c <__assert_fail@plt+0x43b0>
   16050:	movw	r1, #18268	; 0x475c
   16054:	movt	r1, #3
   16058:	ldrb	r1, [r1, r3]
   1605c:	strb	r1, [r7], #1
   16060:	cmp	r0, #0
   16064:	beq	16630 <__assert_fail@plt+0x4984>
   16068:	ldr	r0, [sp, #16]
   1606c:	cmp	r0, #0
   16070:	cmpne	r3, #0
   16074:	movne	r0, #105	; 0x69
   16078:	strbne	r0, [r7], #1
   1607c:	mov	r0, #66	; 0x42
   16080:	strb	r0, [r7], #1
   16084:	b	16630 <__assert_fail@plt+0x4984>
   16088:	add	r0, r0, r2
   1608c:	mov	ip, #2
   16090:	cmp	r8, r0
   16094:	movwcc	ip, #3
   16098:	subs	r0, sl, r8
   1609c:	mov	r3, #1
   160a0:	sbcs	r0, r9, #0
   160a4:	bcc	161cc <__assert_fail@plt+0x4520>
   160a8:	mov	r0, sl
   160ac:	mov	r1, r9
   160b0:	mov	r2, r8
   160b4:	mov	r3, #0
   160b8:	str	r4, [sp, #36]	; 0x24
   160bc:	mov	r4, ip
   160c0:	bl	3334c <__assert_fail@plt+0x216a0>
   160c4:	mov	r2, r4
   160c8:	mov	r4, r0
   160cc:	mls	r0, r0, r8, sl
   160d0:	mov	r9, r1
   160d4:	add	r0, r0, r0, lsl #2
   160d8:	add	r0, r7, r0, lsl #1
   160dc:	udiv	r7, r0, r8
   160e0:	mls	r0, r7, r8, r0
   160e4:	lsl	r0, r0, #1
   160e8:	orr	r0, r0, r2, lsr #1
   160ec:	cmp	r0, r8
   160f0:	bcs	16114 <__assert_fail@plt+0x4468>
   160f4:	rsb	r1, r2, #0
   160f8:	subs	ip, r0, r1
   160fc:	movwne	ip, #1
   16100:	subs	r0, r4, r8
   16104:	mov	r3, #2
   16108:	sbcs	r0, r9, #0
   1610c:	bcs	16150 <__assert_fail@plt+0x44a4>
   16110:	b	16134 <__assert_fail@plt+0x4488>
   16114:	add	r0, r0, r2
   16118:	mov	ip, #2
   1611c:	cmp	r8, r0
   16120:	movwcc	ip, #3
   16124:	subs	r0, r4, r8
   16128:	mov	r3, #2
   1612c:	sbcs	r0, r9, #0
   16130:	bcs	16150 <__assert_fail@plt+0x44a4>
   16134:	mov	sl, r4
   16138:	ldr	r4, [sp, #36]	; 0x24
   1613c:	mov	r5, r6
   16140:	rsbs	r0, sl, #9
   16144:	rscs	r0, r9, #0
   16148:	bcc	16444 <__assert_fail@plt+0x4798>
   1614c:	b	161dc <__assert_fail@plt+0x4530>
   16150:	mov	r0, r4
   16154:	mov	r1, r9
   16158:	mov	r2, r8
   1615c:	mov	r3, #0
   16160:	mov	r5, ip
   16164:	bl	3334c <__assert_fail@plt+0x216a0>
   16168:	mov	sl, r0
   1616c:	mls	r0, r0, r8, r4
   16170:	mov	r2, r5
   16174:	mov	r9, r1
   16178:	add	r0, r0, r0, lsl #2
   1617c:	add	r0, r7, r0, lsl #1
   16180:	udiv	r7, r0, r8
   16184:	mls	r0, r7, r8, r0
   16188:	lsl	r0, r0, #1
   1618c:	orr	r0, r0, r5, lsr #1
   16190:	cmp	r0, r8
   16194:	bcs	161a8 <__assert_fail@plt+0x44fc>
   16198:	rsb	r1, r2, #0
   1619c:	subs	ip, r0, r1
   161a0:	movwne	ip, #1
   161a4:	b	161b8 <__assert_fail@plt+0x450c>
   161a8:	add	r0, r0, r2
   161ac:	mov	ip, #2
   161b0:	cmp	r8, r0
   161b4:	movwcc	ip, #3
   161b8:	ldr	r4, [sp, #36]	; 0x24
   161bc:	subs	r0, sl, r8
   161c0:	mov	r3, #3
   161c4:	sbcs	r0, r9, #0
   161c8:	bcs	162a8 <__assert_fail@plt+0x45fc>
   161cc:	mov	r5, r6
   161d0:	rsbs	r0, sl, #9
   161d4:	rscs	r0, r9, #0
   161d8:	bcc	16444 <__assert_fail@plt+0x4798>
   161dc:	cmp	r5, #1
   161e0:	bne	161f8 <__assert_fail@plt+0x454c>
   161e4:	and	r0, r7, #1
   161e8:	add	r0, ip, r0
   161ec:	cmp	r0, #2
   161f0:	bhi	16208 <__assert_fail@plt+0x455c>
   161f4:	b	1623c <__assert_fail@plt+0x4590>
   161f8:	cmp	r5, #0
   161fc:	bne	1623c <__assert_fail@plt+0x4590>
   16200:	cmp	ip, #0
   16204:	beq	1623c <__assert_fail@plt+0x4590>
   16208:	adds	r0, sl, #1
   1620c:	add	r7, r7, #1
   16210:	mov	ip, #0
   16214:	adc	r1, r9, #0
   16218:	cmp	r7, #10
   1621c:	bne	1623c <__assert_fail@plt+0x4590>
   16220:	rsbs	r2, r0, #9
   16224:	mov	r7, #0
   16228:	mov	sl, r0
   1622c:	mov	r9, r1
   16230:	mov	ip, #0
   16234:	rscs	r2, r1, #0
   16238:	bcc	16310 <__assert_fail@plt+0x4664>
   1623c:	ldr	r0, [sp, #32]
   16240:	tst	r0, #8
   16244:	beq	16264 <__assert_fail@plt+0x45b8>
   16248:	cmp	r7, #0
   1624c:	bne	16264 <__assert_fail@plt+0x45b8>
   16250:	ldr	r6, [sp, #28]
   16254:	mov	r7, #0
   16258:	cmp	r5, #0
   1625c:	bne	15e98 <__assert_fail@plt+0x41ec>
   16260:	b	16450 <__assert_fail@plt+0x47a4>
   16264:	ldr	r1, [sp, #24]
   16268:	ldr	r2, [sp, #4]
   1626c:	add	r0, r7, #48	; 0x30
   16270:	mov	r7, r4
   16274:	mov	r4, r3
   16278:	strb	r0, [r1, #646]!	; 0x286
   1627c:	sub	r0, r1, r2
   16280:	ldr	r1, [sp]
   16284:	mov	r6, r0
   16288:	bl	118ec <memcpy@plt>
   1628c:	mov	r3, r4
   16290:	mov	r4, r7
   16294:	mov	ip, #0
   16298:	mov	r7, #0
   1629c:	cmp	r5, #0
   162a0:	bne	15e98 <__assert_fail@plt+0x41ec>
   162a4:	b	16450 <__assert_fail@plt+0x47a4>
   162a8:	mov	r0, sl
   162ac:	mov	r1, r9
   162b0:	mov	r2, r8
   162b4:	mov	r3, #0
   162b8:	mov	r4, ip
   162bc:	bl	3334c <__assert_fail@plt+0x216a0>
   162c0:	mov	r2, r4
   162c4:	mov	r4, r0
   162c8:	mls	r0, r0, r8, sl
   162cc:	mov	r9, r1
   162d0:	add	r0, r0, r0, lsl #2
   162d4:	add	r0, r7, r0, lsl #1
   162d8:	udiv	r7, r0, r8
   162dc:	mls	r0, r7, r8, r0
   162e0:	lsl	r0, r0, #1
   162e4:	orr	r0, r0, r2, lsr #1
   162e8:	cmp	r0, r8
   162ec:	bcs	1632c <__assert_fail@plt+0x4680>
   162f0:	rsb	r1, r2, #0
   162f4:	subs	ip, r0, r1
   162f8:	movwne	ip, #1
   162fc:	subs	r0, r4, r8
   16300:	mov	r3, #4
   16304:	sbcs	r0, r9, #0
   16308:	bcc	16134 <__assert_fail@plt+0x4488>
   1630c:	b	1634c <__assert_fail@plt+0x46a0>
   16310:	ldr	r6, [sp, #28]
   16314:	mov	ip, #0
   16318:	mov	sl, #10
   1631c:	mov	r9, #0
   16320:	cmp	r5, #0
   16324:	bne	15e98 <__assert_fail@plt+0x41ec>
   16328:	b	16450 <__assert_fail@plt+0x47a4>
   1632c:	add	r0, r0, r2
   16330:	mov	ip, #2
   16334:	cmp	r8, r0
   16338:	movwcc	ip, #3
   1633c:	subs	r0, r4, r8
   16340:	mov	r3, #4
   16344:	sbcs	r0, r9, #0
   16348:	bcc	16134 <__assert_fail@plt+0x4488>
   1634c:	mov	r0, r4
   16350:	mov	r1, r9
   16354:	mov	r2, r8
   16358:	mov	r3, #0
   1635c:	mov	r5, ip
   16360:	bl	3334c <__assert_fail@plt+0x216a0>
   16364:	mov	sl, r0
   16368:	mls	r0, r0, r8, r4
   1636c:	mov	r2, r5
   16370:	mov	r9, r1
   16374:	add	r0, r0, r0, lsl #2
   16378:	add	r0, r7, r0, lsl #1
   1637c:	udiv	r7, r0, r8
   16380:	mls	r0, r7, r8, r0
   16384:	lsl	r0, r0, #1
   16388:	orr	r0, r0, r5, lsr #1
   1638c:	cmp	r0, r8
   16390:	bcs	163a4 <__assert_fail@plt+0x46f8>
   16394:	rsb	r1, r2, #0
   16398:	subs	ip, r0, r1
   1639c:	movwne	ip, #1
   163a0:	b	163b4 <__assert_fail@plt+0x4708>
   163a4:	add	r0, r0, r2
   163a8:	mov	ip, #2
   163ac:	cmp	r8, r0
   163b0:	movwcc	ip, #3
   163b4:	ldr	r4, [sp, #36]	; 0x24
   163b8:	subs	r0, sl, r8
   163bc:	mov	r3, #5
   163c0:	sbcs	r0, r9, #0
   163c4:	bcc	161cc <__assert_fail@plt+0x4520>
   163c8:	mov	r0, sl
   163cc:	mov	r1, r9
   163d0:	mov	r2, r8
   163d4:	mov	r3, #0
   163d8:	mov	r4, ip
   163dc:	bl	3334c <__assert_fail@plt+0x216a0>
   163e0:	mov	r2, r4
   163e4:	mov	r4, r0
   163e8:	mls	r0, r0, r8, sl
   163ec:	mov	r9, r1
   163f0:	add	r0, r0, r0, lsl #2
   163f4:	add	r0, r7, r0, lsl #1
   163f8:	udiv	r7, r0, r8
   163fc:	mls	r0, r7, r8, r0
   16400:	lsl	r0, r0, #1
   16404:	orr	r0, r0, r2, lsr #1
   16408:	cmp	r0, r8
   1640c:	bcs	1664c <__assert_fail@plt+0x49a0>
   16410:	rsb	r1, r2, #0
   16414:	subs	ip, r0, r1
   16418:	movwne	ip, #1
   1641c:	subs	r0, r4, r8
   16420:	mov	r3, #6
   16424:	sbcs	r0, r9, #0
   16428:	bcs	1666c <__assert_fail@plt+0x49c0>
   1642c:	mov	sl, r4
   16430:	ldr	r4, [sp, #36]	; 0x24
   16434:	mov	r5, r6
   16438:	rsbs	r0, sl, #9
   1643c:	rscs	r0, r9, #0
   16440:	bcs	161dc <__assert_fail@plt+0x4530>
   16444:	ldr	r6, [sp, #28]
   16448:	cmp	r5, #0
   1644c:	bne	15e98 <__assert_fail@plt+0x41ec>
   16450:	add	r0, r7, ip
   16454:	cmp	r0, #1
   16458:	blt	164c0 <__assert_fail@plt+0x4814>
   1645c:	adds	sl, sl, #1
   16460:	adc	r9, r9, #0
   16464:	cmp	r3, #7
   16468:	bgt	164c0 <__assert_fail@plt+0x4814>
   1646c:	cmp	r4, #0
   16470:	beq	164c0 <__assert_fail@plt+0x4814>
   16474:	ldr	r7, [sp, #28]
   16478:	eor	r0, sl, r8
   1647c:	orrs	r0, r0, r9
   16480:	bne	164c4 <__assert_fail@plt+0x4818>
   16484:	ldr	r0, [sp, #32]
   16488:	add	r3, r3, #1
   1648c:	mov	r9, #0
   16490:	mov	sl, #1
   16494:	str	r3, [sp, #20]
   16498:	tst	r0, #8
   1649c:	bne	164c8 <__assert_fail@plt+0x481c>
   164a0:	ldr	r2, [sp, #4]
   164a4:	mov	r0, #48	; 0x30
   164a8:	ldr	r1, [sp]
   164ac:	strb	r0, [r6, #-1]!
   164b0:	sub	r6, r6, r2
   164b4:	mov	r0, r6
   164b8:	bl	118ec <memcpy@plt>
   164bc:	b	164c8 <__assert_fail@plt+0x481c>
   164c0:	ldr	r7, [sp, #28]
   164c4:	str	r3, [sp, #20]
   164c8:	mov	r8, r6
   164cc:	mov	r0, sl
   164d0:	mov	r1, r9
   164d4:	mov	r2, #10
   164d8:	mov	r3, #0
   164dc:	bl	3334c <__assert_fail@plt+0x216a0>
   164e0:	add	r2, r0, r0, lsl #2
   164e4:	sub	r2, sl, r2, lsl #1
   164e8:	orr	r2, r2, #48	; 0x30
   164ec:	strb	r2, [r8, #-1]!
   164f0:	rsbs	r2, sl, #9
   164f4:	mov	sl, r0
   164f8:	rscs	r2, r9, #0
   164fc:	mov	r9, r1
   16500:	bcc	164cc <__assert_fail@plt+0x4820>
   16504:	ldr	sl, [sp, #24]
   16508:	ldr	r5, [sp, #32]
   1650c:	ldr	r9, [fp, #16]
   16510:	tst	r5, #4
   16514:	beq	15f20 <__assert_fail@plt+0x4274>
   16518:	ldr	r9, [sp, #44]	; 0x2c
   1651c:	mov	r5, r8
   16520:	sub	r4, r6, r8
   16524:	mov	r0, r9
   16528:	bl	11ac0 <strlen@plt>
   1652c:	add	r8, sp, #48	; 0x30
   16530:	str	r0, [sp, #40]	; 0x28
   16534:	mov	r1, r5
   16538:	mov	r2, r4
   1653c:	mov	r0, r8
   16540:	bl	118ec <memcpy@plt>
   16544:	ldr	r5, [sp, #8]
   16548:	ldrb	r7, [r5]
   1654c:	cmp	r7, #255	; 0xff
   16550:	mov	sl, r7
   16554:	moveq	sl, r4
   16558:	cmp	r7, #0
   1655c:	mvneq	sl, #0
   16560:	cmp	sl, r4
   16564:	movhi	sl, r4
   16568:	sub	r0, r6, sl
   1656c:	sub	r6, r4, sl
   16570:	mov	r2, sl
   16574:	add	r1, r8, r6
   16578:	mov	r8, r0
   1657c:	bl	118ec <memcpy@plt>
   16580:	cmp	r6, #0
   16584:	beq	16614 <__assert_fail@plt+0x4968>
   16588:	clz	r0, r7
   1658c:	lsr	r9, r0, #5
   16590:	ldr	r0, [sp, #40]	; 0x28
   16594:	rsb	r0, r0, #0
   16598:	str	r0, [sp, #36]	; 0x24
   1659c:	ldr	r0, [sp, #36]	; 0x24
   165a0:	ldr	r1, [sp, #44]	; 0x2c
   165a4:	ldr	r2, [sp, #40]	; 0x28
   165a8:	add	r4, r8, r0
   165ac:	mov	r0, r4
   165b0:	bl	118ec <memcpy@plt>
   165b4:	tst	r9, #1
   165b8:	add	r0, sp, #48	; 0x30
   165bc:	addeq	r5, r5, #1
   165c0:	mov	r9, r5
   165c4:	ldrb	r5, [r5]
   165c8:	cmp	r5, #255	; 0xff
   165cc:	mov	r7, r5
   165d0:	moveq	r7, r6
   165d4:	cmp	r5, #0
   165d8:	moveq	r7, sl
   165dc:	cmp	r6, r7
   165e0:	movcc	r7, r6
   165e4:	sub	r6, r6, r7
   165e8:	sub	r8, r4, r7
   165ec:	mov	r2, r7
   165f0:	add	r1, r0, r6
   165f4:	mov	r0, r8
   165f8:	bl	118ec <memcpy@plt>
   165fc:	clz	r0, r5
   16600:	mov	r5, r9
   16604:	cmp	r6, #0
   16608:	mov	sl, r7
   1660c:	lsr	r9, r0, #5
   16610:	bne	1659c <__assert_fail@plt+0x48f0>
   16614:	ldr	r7, [sp, #28]
   16618:	ldr	sl, [sp, #24]
   1661c:	ldr	r5, [sp, #32]
   16620:	ldr	r9, [fp, #16]
   16624:	ldr	r3, [sp, #20]
   16628:	tst	r5, #128	; 0x80
   1662c:	bne	15f2c <__assert_fail@plt+0x4280>
   16630:	mov	r0, #0
   16634:	strb	r0, [r7]
   16638:	mov	r0, r8
   1663c:	sub	sp, fp, #48	; 0x30
   16640:	vpop	{d8-d9}
   16644:	add	sp, sp, #4
   16648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1664c:	add	r0, r0, r2
   16650:	mov	ip, #2
   16654:	cmp	r8, r0
   16658:	movwcc	ip, #3
   1665c:	subs	r0, r4, r8
   16660:	mov	r3, #6
   16664:	sbcs	r0, r9, #0
   16668:	bcc	1642c <__assert_fail@plt+0x4780>
   1666c:	mov	r0, r4
   16670:	mov	r1, r9
   16674:	mov	r2, r8
   16678:	mov	r3, #0
   1667c:	mov	r5, ip
   16680:	bl	3334c <__assert_fail@plt+0x216a0>
   16684:	mov	r6, r8
   16688:	mov	r8, r0
   1668c:	mov	r2, r5
   16690:	mov	r9, r1
   16694:	mls	r0, r0, r6, r4
   16698:	add	r0, r0, r0, lsl #2
   1669c:	add	r0, r7, r0, lsl #1
   166a0:	udiv	r4, r0, r6
   166a4:	mls	r0, r4, r6, r0
   166a8:	lsl	r0, r0, #1
   166ac:	orr	r0, r0, r2, lsr #1
   166b0:	cmp	r0, r6
   166b4:	bcs	166f8 <__assert_fail@plt+0x4a4c>
   166b8:	rsb	r1, r2, #0
   166bc:	subs	ip, r0, r1
   166c0:	movwne	ip, #1
   166c4:	subs	r0, r8, r6
   166c8:	mov	r3, #7
   166cc:	sbcs	r0, r9, #0
   166d0:	bcs	16718 <__assert_fail@plt+0x4a6c>
   166d4:	mov	r7, r4
   166d8:	ldr	r5, [sp, #40]	; 0x28
   166dc:	ldr	r4, [sp, #36]	; 0x24
   166e0:	mov	sl, r8
   166e4:	mov	r8, r6
   166e8:	rsbs	r0, sl, #9
   166ec:	rscs	r0, r9, #0
   166f0:	bcc	16444 <__assert_fail@plt+0x4798>
   166f4:	b	161dc <__assert_fail@plt+0x4530>
   166f8:	add	r0, r0, r2
   166fc:	mov	ip, #2
   16700:	cmp	r6, r0
   16704:	movwcc	ip, #3
   16708:	subs	r0, r8, r6
   1670c:	mov	r3, #7
   16710:	sbcs	r0, r9, #0
   16714:	bcc	166d4 <__assert_fail@plt+0x4a28>
   16718:	mov	r0, r8
   1671c:	mov	r1, r9
   16720:	mov	r2, r6
   16724:	mov	r3, #0
   16728:	mov	r5, ip
   1672c:	bl	3334c <__assert_fail@plt+0x216a0>
   16730:	mov	sl, r0
   16734:	mls	r0, r0, r6, r8
   16738:	mov	r2, r5
   1673c:	mov	r9, r1
   16740:	mov	r8, r6
   16744:	add	r0, r0, r0, lsl #2
   16748:	add	r0, r4, r0, lsl #1
   1674c:	udiv	r7, r0, r6
   16750:	mls	r0, r7, r6, r0
   16754:	lsl	r0, r0, #1
   16758:	orr	r0, r0, r5, lsr #1
   1675c:	cmp	r0, r6
   16760:	bcs	16774 <__assert_fail@plt+0x4ac8>
   16764:	rsb	r1, r2, #0
   16768:	subs	ip, r0, r1
   1676c:	movwne	ip, #1
   16770:	b	16784 <__assert_fail@plt+0x4ad8>
   16774:	add	r0, r0, r2
   16778:	mov	ip, #2
   1677c:	cmp	r8, r0
   16780:	movwcc	ip, #3
   16784:	ldr	r5, [sp, #40]	; 0x28
   16788:	ldr	r4, [sp, #36]	; 0x24
   1678c:	mov	r3, #8
   16790:	rsbs	r0, sl, #9
   16794:	rscs	r0, r9, #0
   16798:	bcc	16444 <__assert_fail@plt+0x4798>
   1679c:	b	161dc <__assert_fail@plt+0x4530>
   167a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167a4:	add	fp, sp, #24
   167a8:	sub	sp, sp, #8
   167ac:	mov	r4, r2
   167b0:	mov	r8, r1
   167b4:	cmp	r0, #0
   167b8:	bne	167e4 <__assert_fail@plt+0x4b38>
   167bc:	movw	r0, #18193	; 0x4711
   167c0:	movt	r0, #3
   167c4:	bl	11a00 <getenv@plt>
   167c8:	cmp	r0, #0
   167cc:	bne	167e4 <__assert_fail@plt+0x4b38>
   167d0:	movw	r0, #18204	; 0x471c
   167d4:	movt	r0, #3
   167d8:	bl	11a00 <getenv@plt>
   167dc:	cmp	r0, #0
   167e0:	beq	16910 <__assert_fail@plt+0x4c64>
   167e4:	mov	r6, r0
   167e8:	movw	r7, #18292	; 0x4774
   167ec:	movw	r1, #18280	; 0x4768
   167f0:	mov	r3, #4
   167f4:	ldrb	r5, [r6], #1
   167f8:	movt	r7, #3
   167fc:	movt	r1, #3
   16800:	mov	r2, r7
   16804:	cmp	r5, #39	; 0x27
   16808:	movne	r6, r0
   1680c:	mov	r0, r6
   16810:	bl	3275c <__assert_fail@plt+0x20ab0>
   16814:	sub	r1, r5, #39	; 0x27
   16818:	cmp	r0, #0
   1681c:	clz	r1, r1
   16820:	lsr	r1, r1, #5
   16824:	lsl	r5, r1, #2
   16828:	bmi	16860 <__assert_fail@plt+0x4bb4>
   1682c:	ldr	r0, [r7, r0, lsl #2]
   16830:	mov	r2, #1
   16834:	mov	r1, #0
   16838:	str	r2, [r4]
   1683c:	str	r1, [r4, #4]
   16840:	orr	r1, r0, r5
   16844:	mov	r0, #0
   16848:	str	r1, [r8]
   1684c:	ldrd	r2, [r4]
   16850:	orrs	r1, r2, r3
   16854:	beq	1689c <__assert_fail@plt+0x4bf0>
   16858:	sub	sp, fp, #24
   1685c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16860:	movw	r0, #18214	; 0x4726
   16864:	add	r1, sp, #4
   16868:	mov	r2, #0
   1686c:	mov	r3, r4
   16870:	mov	r7, #0
   16874:	movt	r0, #3
   16878:	str	r0, [sp]
   1687c:	mov	r0, r6
   16880:	bl	1b2e0 <__assert_fail@plt+0x9634>
   16884:	cmp	r0, #0
   16888:	beq	168cc <__assert_fail@plt+0x4c20>
   1688c:	str	r7, [r8]
   16890:	ldrd	r2, [r4]
   16894:	orrs	r1, r2, r3
   16898:	bne	16858 <__assert_fail@plt+0x4bac>
   1689c:	movw	r0, #18250	; 0x474a
   168a0:	movt	r0, #3
   168a4:	bl	11a00 <getenv@plt>
   168a8:	cmp	r0, #0
   168ac:	mov	r2, #512	; 0x200
   168b0:	mov	r0, #4
   168b4:	mov	r1, #0
   168b8:	movweq	r2, #1024	; 0x400
   168bc:	str	r2, [r4]
   168c0:	str	r1, [r4, #4]
   168c4:	sub	sp, fp, #24
   168c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168cc:	ldrb	r0, [r6]
   168d0:	sub	r0, r0, #48	; 0x30
   168d4:	uxtb	r0, r0
   168d8:	cmp	r0, #10
   168dc:	bcc	16908 <__assert_fail@plt+0x4c5c>
   168e0:	ldr	r0, [sp, #4]
   168e4:	cmp	r0, r6
   168e8:	beq	16938 <__assert_fail@plt+0x4c8c>
   168ec:	ldrb	r2, [r6, #1]
   168f0:	add	r1, r6, #1
   168f4:	mov	r6, r1
   168f8:	sub	r2, r2, #48	; 0x30
   168fc:	uxtb	r2, r2
   16900:	cmp	r2, #10
   16904:	bcs	168e4 <__assert_fail@plt+0x4c38>
   16908:	mov	r1, r5
   1690c:	b	16844 <__assert_fail@plt+0x4b98>
   16910:	movw	r0, #18250	; 0x474a
   16914:	movt	r0, #3
   16918:	bl	11a00 <getenv@plt>
   1691c:	cmp	r0, #0
   16920:	mov	r2, #512	; 0x200
   16924:	mov	r1, #0
   16928:	movweq	r2, #1024	; 0x400
   1692c:	str	r2, [r4]
   16930:	str	r1, [r4, #4]
   16934:	b	16844 <__assert_fail@plt+0x4b98>
   16938:	ldrb	r2, [r0, #-1]
   1693c:	orr	r1, r5, #384	; 0x180
   16940:	cmp	r2, #66	; 0x42
   16944:	mov	r2, r1
   16948:	orrne	r2, r5, #128	; 0x80
   1694c:	bne	16960 <__assert_fail@plt+0x4cb4>
   16950:	ldrb	r0, [r0, #-2]
   16954:	cmp	r0, #105	; 0x69
   16958:	orreq	r1, r2, #32
   1695c:	b	16844 <__assert_fail@plt+0x4b98>
   16960:	orr	r1, r2, #32
   16964:	b	16844 <__assert_fail@plt+0x4b98>
   16968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1696c:	add	fp, sp, #28
   16970:	sub	sp, sp, #396	; 0x18c
   16974:	mov	sl, r1
   16978:	str	r0, [sp, #28]
   1697c:	bl	119ac <__ctype_get_mb_cur_max@plt>
   16980:	cmp	r0, #2
   16984:	str	sl, [sp, #24]
   16988:	bcc	169f4 <__assert_fail@plt+0x4d48>
   1698c:	sub	r6, fp, #88	; 0x58
   16990:	mov	r7, #0
   16994:	mov	r0, r6
   16998:	str	r7, [fp, #-80]	; 0xffffffb0
   1699c:	str	r7, [fp, #-84]	; 0xffffffac
   169a0:	strb	r7, [fp, #-76]	; 0xffffffb4
   169a4:	strb	r7, [fp, #-88]	; 0xffffffa8
   169a8:	str	sl, [fp, #-72]	; 0xffffffb8
   169ac:	bl	18340 <__assert_fail@plt+0x6694>
   169b0:	ldrb	r5, [fp, #-64]	; 0xffffffc0
   169b4:	ldr	r4, [fp, #-60]	; 0xffffffc4
   169b8:	cmp	r5, #0
   169bc:	beq	169c8 <__assert_fail@plt+0x4d1c>
   169c0:	cmp	r4, #0
   169c4:	beq	16be8 <__assert_fail@plt+0x4f3c>
   169c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   169cc:	add	r0, r6, #32
   169d0:	str	r7, [fp, #-136]	; 0xffffff78
   169d4:	str	r7, [fp, #-140]	; 0xffffff74
   169d8:	str	sl, [fp, #-128]	; 0xffffff80
   169dc:	strb	r7, [fp, #-132]	; 0xffffff7c
   169e0:	strb	r7, [fp, #-144]	; 0xffffff70
   169e4:	cmp	r1, r0
   169e8:	beq	16bf8 <__assert_fail@plt+0x4f4c>
   169ec:	ldr	r6, [fp, #-68]	; 0xffffffbc
   169f0:	b	16c14 <__assert_fail@plt+0x4f68>
   169f4:	ldrb	r6, [sl]
   169f8:	cmp	r6, #0
   169fc:	beq	16be8 <__assert_fail@plt+0x4f3c>
   16a00:	bl	11a84 <__ctype_b_loc@plt>
   16a04:	ldr	r8, [r0]
   16a08:	str	r0, [sp, #4]
   16a0c:	ldr	r4, [sp, #28]
   16a10:	add	r0, r8, r6, lsl #1
   16a14:	ldrb	r0, [r0, #1]
   16a18:	tst	r0, #1
   16a1c:	beq	16a2c <__assert_fail@plt+0x4d80>
   16a20:	bl	11a54 <__ctype_tolower_loc@plt>
   16a24:	ldr	r0, [r0]
   16a28:	ldrb	r6, [r0, r6, lsl #2]
   16a2c:	ldrb	sl, [r4]
   16a30:	cmp	sl, #0
   16a34:	beq	1701c <__assert_fail@plt+0x5370>
   16a38:	mov	r0, #0
   16a3c:	mov	r7, #0
   16a40:	mov	r9, #0
   16a44:	str	r6, [sp]
   16a48:	str	r0, [sp, #8]
   16a4c:	mov	r0, #1
   16a50:	str	r0, [sp, #12]
   16a54:	ldr	r0, [sp, #24]
   16a58:	str	r0, [sp, #16]
   16a5c:	add	r0, r9, r9, lsl #2
   16a60:	cmp	r7, r0
   16a64:	cmpcs	r9, #10
   16a68:	bcs	16b34 <__assert_fail@plt+0x4e88>
   16a6c:	uxtb	r4, sl
   16a70:	str	r7, [sp, #20]
   16a74:	add	r0, r8, r4, lsl #1
   16a78:	ldrb	r0, [r0, #1]
   16a7c:	tst	r0, #1
   16a80:	beq	16a90 <__assert_fail@plt+0x4de4>
   16a84:	bl	11a54 <__ctype_tolower_loc@plt>
   16a88:	ldr	r0, [r0]
   16a8c:	ldr	r4, [r0, r4, lsl #2]
   16a90:	ldr	sl, [sp, #28]
   16a94:	ldr	r7, [sp, #24]
   16a98:	cmp	r4, r6
   16a9c:	bne	16b28 <__assert_fail@plt+0x4e7c>
   16aa0:	mov	r4, #1
   16aa4:	ldrb	r6, [r7, r4]
   16aa8:	cmp	r6, #0
   16aac:	bne	16acc <__assert_fail@plt+0x4e20>
   16ab0:	b	1702c <__assert_fail@plt+0x5380>
   16ab4:	add	r4, r4, #1
   16ab8:	cmp	r5, r6
   16abc:	bne	16bbc <__assert_fail@plt+0x4f10>
   16ac0:	ldrb	r6, [r7, r4]
   16ac4:	cmp	r6, #0
   16ac8:	beq	1702c <__assert_fail@plt+0x5380>
   16acc:	ldrb	r5, [sl, r4]
   16ad0:	cmp	r5, #0
   16ad4:	beq	1701c <__assert_fail@plt+0x5370>
   16ad8:	add	r0, r8, r5, lsl #1
   16adc:	ldrb	r0, [r0, #1]
   16ae0:	tst	r0, #1
   16ae4:	bne	16afc <__assert_fail@plt+0x4e50>
   16ae8:	add	r0, r8, r6, lsl #1
   16aec:	ldrb	r0, [r0, #1]
   16af0:	tst	r0, #1
   16af4:	beq	16ab4 <__assert_fail@plt+0x4e08>
   16af8:	b	16b18 <__assert_fail@plt+0x4e6c>
   16afc:	bl	11a54 <__ctype_tolower_loc@plt>
   16b00:	ldr	r0, [r0]
   16b04:	ldr	r5, [r0, r5, lsl #2]
   16b08:	add	r0, r8, r6, lsl #1
   16b0c:	ldrb	r0, [r0, #1]
   16b10:	tst	r0, #1
   16b14:	beq	16ab4 <__assert_fail@plt+0x4e08>
   16b18:	bl	11a54 <__ctype_tolower_loc@plt>
   16b1c:	ldr	r0, [r0]
   16b20:	ldr	r6, [r0, r6, lsl #2]
   16b24:	b	16ab4 <__assert_fail@plt+0x4e08>
   16b28:	ldr	r7, [sp, #20]
   16b2c:	add	r7, r7, #1
   16b30:	b	16bc8 <__assert_fail@plt+0x4f1c>
   16b34:	ldr	r0, [sp, #12]
   16b38:	tst	r0, #1
   16b3c:	beq	16a6c <__assert_fail@plt+0x4dc0>
   16b40:	ldr	r4, [sp, #16]
   16b44:	cmp	r4, #0
   16b48:	beq	16b70 <__assert_fail@plt+0x4ec4>
   16b4c:	ldr	r0, [sp, #8]
   16b50:	sub	r1, r7, r0
   16b54:	mov	r0, r4
   16b58:	bl	11b80 <strnlen@plt>
   16b5c:	ldrb	r0, [r4, r0]!
   16b60:	str	r7, [sp, #8]
   16b64:	str	r4, [sp, #16]
   16b68:	cmp	r0, #0
   16b6c:	bne	16a6c <__assert_fail@plt+0x4dc0>
   16b70:	ldr	r4, [sp, #24]
   16b74:	mov	r0, r4
   16b78:	bl	11ac0 <strlen@plt>
   16b7c:	ldr	r5, [sp, #28]
   16b80:	mov	r2, r0
   16b84:	mov	r1, r4
   16b88:	sub	r3, fp, #88	; 0x58
   16b8c:	mov	r0, r5
   16b90:	bl	17524 <__assert_fail@plt+0x5878>
   16b94:	cmp	r0, #0
   16b98:	bne	1705c <__assert_fail@plt+0x53b0>
   16b9c:	ldr	r0, [sp, #4]
   16ba0:	ldrb	sl, [r5]
   16ba4:	ldr	r8, [r0]
   16ba8:	mov	r0, #0
   16bac:	str	r0, [sp, #16]
   16bb0:	mov	r0, #0
   16bb4:	str	r0, [sp, #12]
   16bb8:	b	16a6c <__assert_fail@plt+0x4dc0>
   16bbc:	ldr	r7, [sp, #20]
   16bc0:	ldr	r6, [sp]
   16bc4:	add	r7, r7, r4
   16bc8:	mov	r0, sl
   16bcc:	add	r9, r9, #1
   16bd0:	mov	r4, #0
   16bd4:	ldrb	sl, [r0, #1]!
   16bd8:	str	r0, [sp, #28]
   16bdc:	cmp	sl, #0
   16be0:	bne	16a5c <__assert_fail@plt+0x4db0>
   16be4:	b	17030 <__assert_fail@plt+0x5384>
   16be8:	ldr	r4, [sp, #28]
   16bec:	mov	r0, r4
   16bf0:	sub	sp, fp, #28
   16bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf8:	ldr	r6, [fp, #-68]	; 0xffffffbc
   16bfc:	sub	r0, fp, #184	; 0xb8
   16c00:	add	r7, r0, #16
   16c04:	mov	r0, r7
   16c08:	mov	r2, r6
   16c0c:	bl	118ec <memcpy@plt>
   16c10:	mov	r1, r7
   16c14:	cmp	r5, #0
   16c18:	strb	r5, [fp, #-176]	; 0xffffff50
   16c1c:	str	r6, [fp, #-180]	; 0xffffff4c
   16c20:	str	r1, [fp, #-184]	; 0xffffff48
   16c24:	beq	16c38 <__assert_fail@plt+0x4f8c>
   16c28:	mov	r0, r4
   16c2c:	str	r4, [fp, #-172]	; 0xffffff54
   16c30:	bl	11910 <towlower@plt>
   16c34:	str	r0, [fp, #-172]	; 0xffffff54
   16c38:	ldr	r0, [sp, #28]
   16c3c:	mov	r4, #0
   16c40:	str	r4, [sp, #192]	; 0xc0
   16c44:	str	r4, [sp, #188]	; 0xbc
   16c48:	strb	r4, [sp, #196]	; 0xc4
   16c4c:	strb	r4, [sp, #184]	; 0xb8
   16c50:	str	r0, [sp, #200]	; 0xc8
   16c54:	add	r0, sp, #184	; 0xb8
   16c58:	bl	18340 <__assert_fail@plt+0x6694>
   16c5c:	ldrb	r0, [sp, #208]	; 0xd0
   16c60:	cmp	r0, #0
   16c64:	beq	16c74 <__assert_fail@plt+0x4fc8>
   16c68:	ldr	r0, [sp, #212]	; 0xd4
   16c6c:	cmp	r0, #0
   16c70:	beq	17030 <__assert_fail@plt+0x5384>
   16c74:	add	r5, sp, #32
   16c78:	mov	r6, #0
   16c7c:	mov	r1, #0
   16c80:	mov	r8, #0
   16c84:	add	r0, r5, #4
   16c88:	str	r0, [sp]
   16c8c:	add	r0, sp, #144	; 0x90
   16c90:	add	r0, r0, #16
   16c94:	str	r0, [sp, #4]
   16c98:	add	r0, sp, #184	; 0xb8
   16c9c:	add	r0, r0, #32
   16ca0:	str	r0, [sp, #20]
   16ca4:	mov	r0, #1
   16ca8:	str	r0, [sp, #8]
   16cac:	mov	r0, #0
   16cb0:	str	r0, [sp, #12]
   16cb4:	add	r0, r1, r1, lsl #2
   16cb8:	mov	r9, r8
   16cbc:	str	r1, [sp, #16]
   16cc0:	cmp	r8, r0
   16cc4:	bcc	16d80 <__assert_fail@plt+0x50d4>
   16cc8:	ldr	r0, [sp, #8]
   16ccc:	sub	r7, fp, #144	; 0x90
   16cd0:	tst	r0, #1
   16cd4:	beq	16d80 <__assert_fail@plt+0x50d4>
   16cd8:	cmp	r1, #10
   16cdc:	bcc	16d80 <__assert_fail@plt+0x50d4>
   16ce0:	ldr	r1, [sp, #12]
   16ce4:	subs	r0, r9, r1
   16ce8:	beq	16d30 <__assert_fail@plt+0x5084>
   16cec:	sub	r4, r1, r9
   16cf0:	b	16d10 <__assert_fail@plt+0x5064>
   16cf4:	strb	r6, [fp, #-132]	; 0xffffff7c
   16cf8:	adds	r4, r4, #1
   16cfc:	ldr	r0, [fp, #-128]	; 0xffffff80
   16d00:	ldr	r1, [fp, #-124]	; 0xffffff84
   16d04:	add	r0, r0, r1
   16d08:	str	r0, [fp, #-128]	; 0xffffff80
   16d0c:	bcs	16d30 <__assert_fail@plt+0x5084>
   16d10:	mov	r0, r7
   16d14:	bl	18340 <__assert_fail@plt+0x6694>
   16d18:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16d1c:	cmp	r0, #0
   16d20:	beq	16cf4 <__assert_fail@plt+0x5048>
   16d24:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16d28:	cmp	r0, #0
   16d2c:	bne	16cf4 <__assert_fail@plt+0x5048>
   16d30:	mov	r0, r7
   16d34:	bl	18340 <__assert_fail@plt+0x6694>
   16d38:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16d3c:	cmp	r0, #0
   16d40:	beq	16d7c <__assert_fail@plt+0x50d0>
   16d44:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16d48:	str	r9, [sp, #12]
   16d4c:	cmp	r0, #0
   16d50:	bne	16d80 <__assert_fail@plt+0x50d4>
   16d54:	ldr	r0, [sp, #28]
   16d58:	mov	r1, sl
   16d5c:	add	r2, sp, #88	; 0x58
   16d60:	bl	17070 <__assert_fail@plt+0x53c4>
   16d64:	mov	r1, #0
   16d68:	cmp	r0, #0
   16d6c:	str	r9, [sp, #12]
   16d70:	str	r1, [sp, #8]
   16d74:	beq	16d80 <__assert_fail@plt+0x50d4>
   16d78:	b	1704c <__assert_fail@plt+0x53a0>
   16d7c:	str	r9, [sp, #12]
   16d80:	ldr	r0, [sp, #200]	; 0xc8
   16d84:	ldr	r1, [sp, #20]
   16d88:	ldr	r4, [sp, #204]	; 0xcc
   16d8c:	cmp	r0, r1
   16d90:	bne	16db8 <__assert_fail@plt+0x510c>
   16d94:	mov	r7, r5
   16d98:	ldr	r5, [sp, #4]
   16d9c:	ldr	r1, [sp, #20]
   16da0:	mov	r2, r4
   16da4:	mov	r0, r5
   16da8:	bl	118ec <memcpy@plt>
   16dac:	mov	r0, r5
   16db0:	mov	r5, r7
   16db4:	mov	r6, #0
   16db8:	str	r4, [sp, #148]	; 0x94
   16dbc:	str	r0, [sp, #144]	; 0x90
   16dc0:	ldrb	r0, [sp, #208]	; 0xd0
   16dc4:	add	r8, r9, #1
   16dc8:	cmp	r0, #0
   16dcc:	strb	r0, [sp, #152]	; 0x98
   16dd0:	beq	16df8 <__assert_fail@plt+0x514c>
   16dd4:	ldr	r0, [sp, #212]	; 0xd4
   16dd8:	str	r0, [sp, #156]	; 0x9c
   16ddc:	bl	11910 <towlower@plt>
   16de0:	str	r0, [sp, #156]	; 0x9c
   16de4:	ldrb	r0, [sp, #152]	; 0x98
   16de8:	cmp	r0, #0
   16dec:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   16df0:	cmpne	r0, #0
   16df4:	bne	16e20 <__assert_fail@plt+0x5174>
   16df8:	ldr	r2, [sp, #148]	; 0x94
   16dfc:	ldr	r0, [fp, #-180]	; 0xffffff4c
   16e00:	cmp	r2, r0
   16e04:	bne	16fd4 <__assert_fail@plt+0x5328>
   16e08:	ldr	r1, [fp, #-184]	; 0xffffff48
   16e0c:	ldr	r0, [sp, #144]	; 0x90
   16e10:	bl	11aa8 <bcmp@plt>
   16e14:	cmp	r0, #0
   16e18:	bne	16fd4 <__assert_fail@plt+0x5328>
   16e1c:	b	16e30 <__assert_fail@plt+0x5184>
   16e20:	ldr	r0, [fp, #-172]	; 0xffffff54
   16e24:	ldr	r1, [sp, #156]	; 0x9c
   16e28:	cmp	r1, r0
   16e2c:	bne	16fd4 <__assert_fail@plt+0x5328>
   16e30:	add	r1, sp, #184	; 0xb8
   16e34:	mov	r2, #48	; 0x30
   16e38:	add	r3, sp, #88	; 0x58
   16e3c:	str	sl, [sp, #48]	; 0x30
   16e40:	strb	r6, [sp, #32]
   16e44:	add	r0, r1, #16
   16e48:	vld1.64	{d16-d17}, [r1], r2
   16e4c:	ldr	r2, [sp, #20]
   16e50:	vld1.64	{d18-d19}, [r0]
   16e54:	vldr	d22, [r1]
   16e58:	add	r0, r3, #16
   16e5c:	mov	r1, #12
   16e60:	vld1.64	{d20-d21}, [r2]
   16e64:	vst1.64	{d18-d19}, [r0]
   16e68:	add	r0, r3, #32
   16e6c:	vst1.64	{d20-d21}, [r0]
   16e70:	mov	r0, r3
   16e74:	vst1.64	{d16-d17}, [r0], r1
   16e78:	strb	r6, [r0]
   16e7c:	vstr	d22, [sp, #136]	; 0x88
   16e80:	ldr	r0, [sp, #104]	; 0x68
   16e84:	ldr	r1, [sp, #108]	; 0x6c
   16e88:	add	r0, r0, r1
   16e8c:	str	r0, [sp, #104]	; 0x68
   16e90:	ldr	r0, [sp]
   16e94:	str	r6, [r0]
   16e98:	str	r6, [r0, #4]
   16e9c:	mov	r0, r5
   16ea0:	strb	r6, [sp, #44]	; 0x2c
   16ea4:	bl	18340 <__assert_fail@plt+0x6694>
   16ea8:	ldrb	r0, [sp, #56]	; 0x38
   16eac:	cmp	r0, #0
   16eb0:	beq	16ec0 <__assert_fail@plt+0x5214>
   16eb4:	ldr	r0, [sp, #60]	; 0x3c
   16eb8:	cmp	r0, #0
   16ebc:	beq	1706c <__assert_fail@plt+0x53c0>
   16ec0:	strb	r6, [sp, #44]	; 0x2c
   16ec4:	ldr	r0, [sp, #48]	; 0x30
   16ec8:	ldr	r1, [sp, #52]	; 0x34
   16ecc:	add	r0, r0, r1
   16ed0:	str	r0, [sp, #48]	; 0x30
   16ed4:	mov	r0, r5
   16ed8:	bl	18340 <__assert_fail@plt+0x6694>
   16edc:	ldrb	r0, [sp, #56]	; 0x38
   16ee0:	cmp	r0, #0
   16ee4:	beq	16ef4 <__assert_fail@plt+0x5248>
   16ee8:	ldr	r0, [sp, #60]	; 0x3c
   16eec:	cmp	r0, #0
   16ef0:	beq	1703c <__assert_fail@plt+0x5390>
   16ef4:	add	r8, r9, #2
   16ef8:	add	r0, sp, #88	; 0x58
   16efc:	bl	18340 <__assert_fail@plt+0x6694>
   16f00:	ldr	r0, [sp, #116]	; 0x74
   16f04:	ldrb	r1, [sp, #112]	; 0x70
   16f08:	cmp	r0, #0
   16f0c:	bne	16f18 <__assert_fail@plt+0x526c>
   16f10:	cmp	r1, #0
   16f14:	bne	1701c <__assert_fail@plt+0x5370>
   16f18:	cmp	r1, #0
   16f1c:	ldrbne	r1, [sp, #56]	; 0x38
   16f20:	cmpne	r1, #0
   16f24:	bne	16f60 <__assert_fail@plt+0x52b4>
   16f28:	ldr	r4, [sp, #108]	; 0x6c
   16f2c:	ldr	r0, [sp, #52]	; 0x34
   16f30:	cmp	r4, r0
   16f34:	bne	16fcc <__assert_fail@plt+0x5320>
   16f38:	ldr	sl, [sp, #48]	; 0x30
   16f3c:	ldr	r6, [sp, #104]	; 0x68
   16f40:	mov	r2, r4
   16f44:	mov	r0, r6
   16f48:	mov	r1, sl
   16f4c:	bl	11aa8 <bcmp@plt>
   16f50:	cmp	r0, #0
   16f54:	mov	r0, r4
   16f58:	beq	16f88 <__assert_fail@plt+0x52dc>
   16f5c:	b	16fcc <__assert_fail@plt+0x5320>
   16f60:	bl	11910 <towlower@plt>
   16f64:	mov	r4, r0
   16f68:	ldr	r0, [sp, #60]	; 0x3c
   16f6c:	bl	11910 <towlower@plt>
   16f70:	cmp	r4, r0
   16f74:	bne	16fcc <__assert_fail@plt+0x5320>
   16f78:	ldr	sl, [sp, #48]	; 0x30
   16f7c:	ldr	r4, [sp, #52]	; 0x34
   16f80:	ldr	r6, [sp, #104]	; 0x68
   16f84:	ldr	r0, [sp, #108]	; 0x6c
   16f88:	mov	r1, #0
   16f8c:	add	r0, r6, r0
   16f90:	strb	r1, [sp, #100]	; 0x64
   16f94:	str	r0, [sp, #104]	; 0x68
   16f98:	add	r0, sl, r4
   16f9c:	strb	r1, [sp, #44]	; 0x2c
   16fa0:	str	r0, [sp, #48]	; 0x30
   16fa4:	mov	r0, r5
   16fa8:	bl	18340 <__assert_fail@plt+0x6694>
   16fac:	ldrb	r0, [sp, #56]	; 0x38
   16fb0:	add	r8, r8, #1
   16fb4:	cmp	r0, #0
   16fb8:	beq	16ef8 <__assert_fail@plt+0x524c>
   16fbc:	ldr	r0, [sp, #60]	; 0x3c
   16fc0:	cmp	r0, #0
   16fc4:	bne	16ef8 <__assert_fail@plt+0x524c>
   16fc8:	b	1703c <__assert_fail@plt+0x5390>
   16fcc:	ldr	sl, [sp, #24]
   16fd0:	mov	r6, #0
   16fd4:	mov	r4, #0
   16fd8:	ldr	r7, [sp, #16]
   16fdc:	strb	r4, [sp, #196]	; 0xc4
   16fe0:	ldr	r0, [sp, #200]	; 0xc8
   16fe4:	ldr	r1, [sp, #204]	; 0xcc
   16fe8:	add	r7, r7, #1
   16fec:	add	r0, r0, r1
   16ff0:	str	r0, [sp, #200]	; 0xc8
   16ff4:	add	r0, sp, #184	; 0xb8
   16ff8:	bl	18340 <__assert_fail@plt+0x6694>
   16ffc:	ldrb	r0, [sp, #208]	; 0xd0
   17000:	mov	r1, r7
   17004:	cmp	r0, #0
   17008:	beq	16cb4 <__assert_fail@plt+0x5008>
   1700c:	ldr	r0, [sp, #212]	; 0xd4
   17010:	cmp	r0, #0
   17014:	bne	16cb4 <__assert_fail@plt+0x5008>
   17018:	b	17030 <__assert_fail@plt+0x5384>
   1701c:	mov	r4, #0
   17020:	mov	r0, r4
   17024:	sub	sp, fp, #28
   17028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1702c:	mov	r4, sl
   17030:	mov	r0, r4
   17034:	sub	sp, fp, #28
   17038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1703c:	ldr	r4, [sp, #200]	; 0xc8
   17040:	mov	r0, r4
   17044:	sub	sp, fp, #28
   17048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1704c:	ldr	r4, [sp, #88]	; 0x58
   17050:	mov	r0, r4
   17054:	sub	sp, fp, #28
   17058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1705c:	ldr	r4, [fp, #-88]	; 0xffffffa8
   17060:	mov	r0, r4
   17064:	sub	sp, fp, #28
   17068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1706c:	bl	11c70 <abort@plt>
   17070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17074:	add	fp, sp, #28
   17078:	sub	sp, sp, #172	; 0xac
   1707c:	mov	r6, r0
   17080:	mov	r0, r1
   17084:	mov	r8, r2
   17088:	mov	r4, r1
   1708c:	bl	17758 <__assert_fail@plt+0x5aac>
   17090:	mov	r7, r0
   17094:	movw	r0, #47662	; 0xba2e
   17098:	mov	r5, #0
   1709c:	movt	r0, #744	; 0x2e8
   170a0:	cmp	r7, r0
   170a4:	bhi	170d8 <__assert_fail@plt+0x542c>
   170a8:	mov	r0, #44	; 0x2c
   170ac:	mul	r0, r7, r0
   170b0:	cmp	r0, #4016	; 0xfb0
   170b4:	bhi	170e4 <__assert_fail@plt+0x5438>
   170b8:	add	r0, r0, #22
   170bc:	bic	r0, r0, #7
   170c0:	sub	r0, sp, r0
   170c4:	add	r1, r0, #15
   170c8:	bic	r9, r1, #15
   170cc:	mov	sp, r0
   170d0:	cmp	r9, #0
   170d4:	bne	170f4 <__assert_fail@plt+0x5448>
   170d8:	mov	r0, r5
   170dc:	sub	sp, fp, #28
   170e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e4:	bl	32d94 <__assert_fail@plt+0x210e8>
   170e8:	mov	r9, r0
   170ec:	cmp	r9, #0
   170f0:	beq	170d8 <__assert_fail@plt+0x542c>
   170f4:	str	r6, [fp, #-192]	; 0xffffff40
   170f8:	mov	r6, #0
   170fc:	str	r8, [fp, #-200]	; 0xffffff38
   17100:	str	r6, [fp, #-80]	; 0xffffffb0
   17104:	str	r6, [fp, #-84]	; 0xffffffac
   17108:	strb	r6, [fp, #-76]	; 0xffffffb4
   1710c:	strb	r6, [fp, #-88]	; 0xffffffa8
   17110:	str	r4, [fp, #-72]	; 0xffffffb8
   17114:	sub	r4, fp, #88	; 0x58
   17118:	mov	r0, r4
   1711c:	bl	18340 <__assert_fail@plt+0x6694>
   17120:	add	r0, r7, r7, lsl #2
   17124:	str	r7, [fp, #-188]	; 0xffffff44
   17128:	add	sl, r9, r0, lsl #3
   1712c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17130:	cmp	r0, #0
   17134:	beq	17144 <__assert_fail@plt+0x5498>
   17138:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1713c:	cmp	r0, #0
   17140:	beq	171d0 <__assert_fail@plt+0x5524>
   17144:	add	r7, r9, #16
   17148:	add	r5, r4, #32
   1714c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17150:	cmp	r0, r5
   17154:	bne	1716c <__assert_fail@plt+0x54c0>
   17158:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1715c:	mov	r0, r7
   17160:	mov	r1, r5
   17164:	bl	118ec <memcpy@plt>
   17168:	mov	r0, r7
   1716c:	str	r0, [r7, #-16]
   17170:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17174:	str	r0, [r7, #-12]
   17178:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1717c:	cmp	r0, #0
   17180:	strb	r0, [r7, #-8]
   17184:	beq	17198 <__assert_fail@plt+0x54ec>
   17188:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1718c:	str	r0, [r7, #-4]
   17190:	bl	11910 <towlower@plt>
   17194:	str	r0, [r7, #-4]
   17198:	strb	r6, [fp, #-76]	; 0xffffffb4
   1719c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   171a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   171a4:	add	r0, r0, r1
   171a8:	str	r0, [fp, #-72]	; 0xffffffb8
   171ac:	mov	r0, r4
   171b0:	bl	18340 <__assert_fail@plt+0x6694>
   171b4:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   171b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171bc:	add	r7, r7, #40	; 0x28
   171c0:	cmp	r1, #0
   171c4:	beq	1714c <__assert_fail@plt+0x54a0>
   171c8:	cmp	r0, #0
   171cc:	bne	1714c <__assert_fail@plt+0x54a0>
   171d0:	mov	r0, #1
   171d4:	str	r0, [sl, #4]
   171d8:	ldr	r0, [fp, #-188]	; 0xffffff44
   171dc:	cmp	r0, #3
   171e0:	bcc	172dc <__assert_fail@plt+0x5630>
   171e4:	mov	r5, #2
   171e8:	mov	r7, #0
   171ec:	b	1720c <__assert_fail@plt+0x5560>
   171f0:	mov	r7, #0
   171f4:	mov	r0, r5
   171f8:	str	r0, [sl, r5, lsl #2]
   171fc:	ldr	r0, [fp, #-188]	; 0xffffff44
   17200:	add	r5, r5, #1
   17204:	cmp	r5, r0
   17208:	beq	172dc <__assert_fail@plt+0x5630>
   1720c:	add	r0, r5, r5, lsl #2
   17210:	add	r0, r9, r0, lsl #3
   17214:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   17218:	sub	r6, r0, #40	; 0x28
   1721c:	sub	r4, r0, #36	; 0x24
   17220:	cmp	r1, #0
   17224:	beq	1728c <__assert_fail@plt+0x55e0>
   17228:	sub	r8, r0, #28
   1722c:	add	r0, r7, r7, lsl #2
   17230:	add	r1, r9, r0, lsl #3
   17234:	ldrb	r2, [r1, #8]
   17238:	cmp	r2, #0
   1723c:	beq	17254 <__assert_fail@plt+0x55a8>
   17240:	ldr	r0, [r1, #12]
   17244:	ldr	r1, [r8]
   17248:	cmp	r1, r0
   1724c:	bne	17278 <__assert_fail@plt+0x55cc>
   17250:	b	172d0 <__assert_fail@plt+0x5624>
   17254:	ldr	r1, [r1, #4]
   17258:	ldr	r2, [r4]
   1725c:	cmp	r2, r1
   17260:	bne	17278 <__assert_fail@plt+0x55cc>
   17264:	ldr	r1, [r9, r0, lsl #3]
   17268:	ldr	r0, [r6]
   1726c:	bl	11aa8 <bcmp@plt>
   17270:	cmp	r0, #0
   17274:	beq	172d0 <__assert_fail@plt+0x5624>
   17278:	cmp	r7, #0
   1727c:	beq	171f0 <__assert_fail@plt+0x5544>
   17280:	ldr	r0, [sl, r7, lsl #2]
   17284:	sub	r7, r7, r0
   17288:	b	1722c <__assert_fail@plt+0x5580>
   1728c:	ldr	r4, [r4]
   17290:	add	r0, r7, r7, lsl #2
   17294:	add	r1, r9, r0, lsl #3
   17298:	ldr	r1, [r1, #4]
   1729c:	cmp	r4, r1
   172a0:	bne	172bc <__assert_fail@plt+0x5610>
   172a4:	ldr	r1, [r9, r0, lsl #3]
   172a8:	ldr	r0, [r6]
   172ac:	mov	r2, r4
   172b0:	bl	11aa8 <bcmp@plt>
   172b4:	cmp	r0, #0
   172b8:	beq	172d0 <__assert_fail@plt+0x5624>
   172bc:	cmp	r7, #0
   172c0:	beq	171f0 <__assert_fail@plt+0x5544>
   172c4:	ldr	r0, [sl, r7, lsl #2]
   172c8:	sub	r7, r7, r0
   172cc:	b	17290 <__assert_fail@plt+0x55e4>
   172d0:	add	r7, r7, #1
   172d4:	sub	r0, r5, r7
   172d8:	b	171f8 <__assert_fail@plt+0x554c>
   172dc:	ldr	r0, [fp, #-200]	; 0xffffff38
   172e0:	mov	r1, #0
   172e4:	str	r1, [r0]
   172e8:	ldr	r0, [fp, #-192]	; 0xffffff40
   172ec:	str	r1, [fp, #-80]	; 0xffffffb0
   172f0:	str	r1, [fp, #-84]	; 0xffffffac
   172f4:	strb	r1, [fp, #-76]	; 0xffffffb4
   172f8:	strb	r1, [fp, #-88]	; 0xffffffa8
   172fc:	str	r1, [fp, #-136]	; 0xffffff78
   17300:	str	r1, [fp, #-140]	; 0xffffff74
   17304:	str	r0, [fp, #-128]	; 0xffffff80
   17308:	str	r0, [fp, #-72]	; 0xffffffb8
   1730c:	sub	r0, fp, #144	; 0x90
   17310:	strb	r1, [fp, #-132]	; 0xffffff7c
   17314:	strb	r1, [fp, #-144]	; 0xffffff70
   17318:	bl	18340 <__assert_fail@plt+0x6694>
   1731c:	ldrb	r6, [fp, #-120]	; 0xffffff88
   17320:	ldr	r8, [fp, #-116]	; 0xffffff8c
   17324:	cmp	r6, #0
   17328:	beq	17334 <__assert_fail@plt+0x5688>
   1732c:	cmp	r8, #0
   17330:	beq	17508 <__assert_fail@plt+0x585c>
   17334:	sub	r0, fp, #184	; 0xb8
   17338:	sub	r4, fp, #88	; 0x58
   1733c:	mov	r7, #0
   17340:	add	r0, r0, #16
   17344:	str	r0, [fp, #-196]	; 0xffffff3c
   17348:	sub	r0, fp, #144	; 0x90
   1734c:	add	r0, r0, #32
   17350:	str	r0, [fp, #-192]	; 0xffffff40
   17354:	ldr	r0, [fp, #-128]	; 0xffffff80
   17358:	ldr	r1, [fp, #-192]	; 0xffffff40
   1735c:	ldr	r5, [fp, #-124]	; 0xffffff84
   17360:	cmp	r0, r1
   17364:	bne	17384 <__assert_fail@plt+0x56d8>
   17368:	ldr	r4, [fp, #-196]	; 0xffffff3c
   1736c:	ldr	r1, [fp, #-192]	; 0xffffff40
   17370:	mov	r2, r5
   17374:	mov	r0, r4
   17378:	bl	118ec <memcpy@plt>
   1737c:	mov	r0, r4
   17380:	sub	r4, fp, #88	; 0x58
   17384:	tst	r6, #255	; 0xff
   17388:	strb	r6, [fp, #-176]	; 0xffffff50
   1738c:	str	r5, [fp, #-180]	; 0xffffff4c
   17390:	str	r0, [fp, #-184]	; 0xffffff48
   17394:	beq	173c4 <__assert_fail@plt+0x5718>
   17398:	mov	r0, r8
   1739c:	str	r8, [fp, #-172]	; 0xffffff54
   173a0:	bl	11910 <towlower@plt>
   173a4:	str	r0, [fp, #-172]	; 0xffffff54
   173a8:	add	r0, r7, r7, lsl #2
   173ac:	add	r0, r9, r0, lsl #3
   173b0:	ldrb	r1, [r0, #8]
   173b4:	cmp	r1, #0
   173b8:	ldrbne	r1, [fp, #-176]	; 0xffffff50
   173bc:	cmpne	r1, #0
   173c0:	bne	174a0 <__assert_fail@plt+0x57f4>
   173c4:	add	r0, r7, r7, lsl #2
   173c8:	mov	r6, #0
   173cc:	add	r1, r9, r0, lsl #3
   173d0:	ldr	r2, [r1, #4]
   173d4:	ldr	r1, [fp, #-180]	; 0xffffff4c
   173d8:	cmp	r2, r1
   173dc:	bne	173f4 <__assert_fail@plt+0x5748>
   173e0:	ldr	r0, [r9, r0, lsl #3]
   173e4:	ldr	r1, [fp, #-184]	; 0xffffff48
   173e8:	bl	11aa8 <bcmp@plt>
   173ec:	cmp	r0, #0
   173f0:	beq	174b4 <__assert_fail@plt+0x5808>
   173f4:	cmp	r7, #0
   173f8:	beq	17450 <__assert_fail@plt+0x57a4>
   173fc:	ldr	r5, [sl, r7, lsl #2]
   17400:	sub	r7, r7, r5
   17404:	cmp	r5, #0
   17408:	bne	1742c <__assert_fail@plt+0x5780>
   1740c:	b	174d8 <__assert_fail@plt+0x582c>
   17410:	strb	r6, [fp, #-76]	; 0xffffffb4
   17414:	subs	r5, r5, #1
   17418:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1741c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17420:	add	r0, r0, r1
   17424:	str	r0, [fp, #-72]	; 0xffffffb8
   17428:	beq	174d8 <__assert_fail@plt+0x582c>
   1742c:	mov	r0, r4
   17430:	bl	18340 <__assert_fail@plt+0x6694>
   17434:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17438:	cmp	r0, #0
   1743c:	beq	17410 <__assert_fail@plt+0x5764>
   17440:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17444:	cmp	r0, #0
   17448:	bne	17410 <__assert_fail@plt+0x5764>
   1744c:	b	17520 <__assert_fail@plt+0x5874>
   17450:	mov	r0, r4
   17454:	bl	18340 <__assert_fail@plt+0x6694>
   17458:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1745c:	cmp	r0, #0
   17460:	beq	17470 <__assert_fail@plt+0x57c4>
   17464:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17468:	cmp	r0, #0
   1746c:	beq	17520 <__assert_fail@plt+0x5874>
   17470:	mov	r7, #0
   17474:	strb	r7, [fp, #-76]	; 0xffffffb4
   17478:	strb	r7, [fp, #-132]	; 0xffffff7c
   1747c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17480:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17484:	add	r0, r0, r1
   17488:	ldr	r1, [fp, #-124]	; 0xffffff84
   1748c:	str	r0, [fp, #-72]	; 0xffffffb8
   17490:	ldr	r0, [fp, #-128]	; 0xffffff80
   17494:	add	r0, r0, r1
   17498:	str	r0, [fp, #-128]	; 0xffffff80
   1749c:	b	174d8 <__assert_fail@plt+0x582c>
   174a0:	ldr	r0, [r0, #12]
   174a4:	ldr	r1, [fp, #-172]	; 0xffffff54
   174a8:	mov	r6, #0
   174ac:	cmp	r0, r1
   174b0:	bne	173f4 <__assert_fail@plt+0x5748>
   174b4:	strb	r6, [fp, #-132]	; 0xffffff7c
   174b8:	add	r7, r7, #1
   174bc:	ldr	r0, [fp, #-128]	; 0xffffff80
   174c0:	ldr	r1, [fp, #-124]	; 0xffffff84
   174c4:	add	r0, r0, r1
   174c8:	str	r0, [fp, #-128]	; 0xffffff80
   174cc:	ldr	r0, [fp, #-188]	; 0xffffff44
   174d0:	cmp	r7, r0
   174d4:	beq	174fc <__assert_fail@plt+0x5850>
   174d8:	sub	r0, fp, #144	; 0x90
   174dc:	bl	18340 <__assert_fail@plt+0x6694>
   174e0:	ldrb	r6, [fp, #-120]	; 0xffffff88
   174e4:	ldr	r8, [fp, #-116]	; 0xffffff8c
   174e8:	cmp	r6, #0
   174ec:	beq	17354 <__assert_fail@plt+0x56a8>
   174f0:	cmp	r8, #0
   174f4:	bne	17354 <__assert_fail@plt+0x56a8>
   174f8:	b	17508 <__assert_fail@plt+0x585c>
   174fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17500:	ldr	r1, [fp, #-200]	; 0xffffff38
   17504:	str	r0, [r1]
   17508:	mov	r0, r9
   1750c:	bl	32e04 <__assert_fail@plt+0x21158>
   17510:	mov	r5, #1
   17514:	mov	r0, r5
   17518:	sub	sp, fp, #28
   1751c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17520:	bl	11c70 <abort@plt>
   17524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17528:	add	fp, sp, #28
   1752c:	sub	sp, sp, #28
   17530:	mov	r4, #0
   17534:	cmn	r2, #-536870911	; 0xe0000001
   17538:	bhi	17578 <__assert_fail@plt+0x58cc>
   1753c:	str	r0, [fp, #-48]	; 0xffffffd0
   17540:	lsl	r0, r2, #2
   17544:	mov	r5, r3
   17548:	mov	r8, r2
   1754c:	mov	r9, r1
   17550:	cmp	r0, #4016	; 0xfb0
   17554:	bhi	17584 <__assert_fail@plt+0x58d8>
   17558:	add	r0, r0, #22
   1755c:	bic	r0, r0, #7
   17560:	sub	r0, sp, r0
   17564:	add	r1, r0, #15
   17568:	bic	sl, r1, #15
   1756c:	mov	sp, r0
   17570:	cmp	sl, #0
   17574:	bne	17594 <__assert_fail@plt+0x58e8>
   17578:	mov	r0, r4
   1757c:	sub	sp, fp, #28
   17580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17584:	bl	32d94 <__assert_fail@plt+0x210e8>
   17588:	mov	sl, r0
   1758c:	cmp	sl, #0
   17590:	beq	17578 <__assert_fail@plt+0x58cc>
   17594:	mov	r0, #1
   17598:	cmp	r8, #3
   1759c:	str	r5, [fp, #-52]	; 0xffffffcc
   175a0:	str	r0, [sl, #4]
   175a4:	bcc	17648 <__assert_fail@plt+0x599c>
   175a8:	bl	11a84 <__ctype_b_loc@plt>
   175ac:	ldr	r5, [r0]
   175b0:	mov	r4, #0
   175b4:	mov	r7, #2
   175b8:	str	r8, [fp, #-36]	; 0xffffffdc
   175bc:	b	175dc <__assert_fail@plt+0x5930>
   175c0:	add	r4, r4, #1
   175c4:	sub	r0, r7, r4
   175c8:	ldr	r8, [fp, #-36]	; 0xffffffdc
   175cc:	str	r0, [sl, r7, lsl #2]
   175d0:	add	r7, r7, #1
   175d4:	cmp	r7, r8
   175d8:	beq	17648 <__assert_fail@plt+0x599c>
   175dc:	add	r0, r7, r9
   175e0:	ldrb	r6, [r0, #-1]
   175e4:	add	r0, r5, r6, lsl #1
   175e8:	ldrb	r0, [r0, #1]
   175ec:	tst	r0, #1
   175f0:	beq	17600 <__assert_fail@plt+0x5954>
   175f4:	bl	11a54 <__ctype_tolower_loc@plt>
   175f8:	ldr	r0, [r0]
   175fc:	ldrb	r6, [r0, r6, lsl #2]
   17600:	ldrb	r8, [r9, r4]
   17604:	add	r0, r5, r8, lsl #1
   17608:	ldrb	r0, [r0, #1]
   1760c:	tst	r0, #1
   17610:	beq	17620 <__assert_fail@plt+0x5974>
   17614:	bl	11a54 <__ctype_tolower_loc@plt>
   17618:	ldr	r0, [r0]
   1761c:	ldr	r8, [r0, r8, lsl #2]
   17620:	cmp	r6, r8
   17624:	beq	175c0 <__assert_fail@plt+0x5914>
   17628:	cmp	r4, #0
   1762c:	beq	1763c <__assert_fail@plt+0x5990>
   17630:	ldr	r0, [sl, r4, lsl #2]
   17634:	sub	r4, r4, r0
   17638:	b	17600 <__assert_fail@plt+0x5954>
   1763c:	mov	r4, #0
   17640:	mov	r0, r7
   17644:	b	175c8 <__assert_fail@plt+0x591c>
   17648:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1764c:	ldr	r7, [fp, #-48]	; 0xffffffd0
   17650:	mov	r5, #0
   17654:	str	r5, [r0]
   17658:	ldrb	r6, [r7]
   1765c:	cmp	r6, #0
   17660:	beq	17740 <__assert_fail@plt+0x5a94>
   17664:	bl	11a84 <__ctype_b_loc@plt>
   17668:	ldr	r1, [r0]
   1766c:	str	r7, [fp, #-40]	; 0xffffffd8
   17670:	str	r1, [fp, #-44]	; 0xffffffd4
   17674:	b	17698 <__assert_fail@plt+0x59ec>
   17678:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1767c:	add	r7, r7, #1
   17680:	mov	r5, #0
   17684:	add	r0, r0, #1
   17688:	str	r0, [fp, #-40]	; 0xffffffd8
   1768c:	ldrb	r6, [r7]
   17690:	cmp	r6, #0
   17694:	beq	17740 <__assert_fail@plt+0x5a94>
   17698:	ldrb	r4, [r9, r5]
   1769c:	add	r0, r1, r4, lsl #1
   176a0:	ldrb	r0, [r0, #1]
   176a4:	tst	r0, #1
   176a8:	beq	176bc <__assert_fail@plt+0x5a10>
   176ac:	bl	11a54 <__ctype_tolower_loc@plt>
   176b0:	ldr	r0, [r0]
   176b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   176b8:	ldr	r4, [r0, r4, lsl #2]
   176bc:	uxtb	r6, r6
   176c0:	add	r0, r1, r6, lsl #1
   176c4:	ldrb	r0, [r0, #1]
   176c8:	tst	r0, #1
   176cc:	beq	176e0 <__assert_fail@plt+0x5a34>
   176d0:	bl	11a54 <__ctype_tolower_loc@plt>
   176d4:	ldr	r0, [r0]
   176d8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   176dc:	ldr	r6, [r0, r6, lsl #2]
   176e0:	cmp	r4, r6
   176e4:	bne	17708 <__assert_fail@plt+0x5a5c>
   176e8:	add	r5, r5, #1
   176ec:	cmp	r5, r8
   176f0:	beq	17734 <__assert_fail@plt+0x5a88>
   176f4:	add	r7, r7, #1
   176f8:	ldrb	r6, [r7]
   176fc:	cmp	r6, #0
   17700:	bne	17698 <__assert_fail@plt+0x59ec>
   17704:	b	17740 <__assert_fail@plt+0x5a94>
   17708:	cmp	r5, #0
   1770c:	beq	17678 <__assert_fail@plt+0x59cc>
   17710:	ldr	r0, [sl, r5, lsl #2]
   17714:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17718:	add	r2, r2, r0
   1771c:	sub	r5, r5, r0
   17720:	str	r2, [fp, #-40]	; 0xffffffd8
   17724:	ldrb	r6, [r7]
   17728:	cmp	r6, #0
   1772c:	bne	17698 <__assert_fail@plt+0x59ec>
   17730:	b	17740 <__assert_fail@plt+0x5a94>
   17734:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17738:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1773c:	str	r1, [r0]
   17740:	mov	r0, sl
   17744:	bl	32e04 <__assert_fail@plt+0x21158>
   17748:	mov	r4, #1
   1774c:	mov	r0, r4
   17750:	sub	sp, fp, #28
   17754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17758:	push	{r4, r5, r6, sl, fp, lr}
   1775c:	add	fp, sp, #16
   17760:	sub	sp, sp, #56	; 0x38
   17764:	mov	r5, r0
   17768:	bl	119ac <__ctype_get_mb_cur_max@plt>
   1776c:	cmp	r0, #2
   17770:	bcc	177fc <__assert_fail@plt+0x5b50>
   17774:	mov	r4, #0
   17778:	mov	r0, sp
   1777c:	str	r4, [sp, #8]
   17780:	str	r4, [sp, #4]
   17784:	strb	r4, [sp, #12]
   17788:	strb	r4, [sp]
   1778c:	str	r5, [sp, #16]
   17790:	bl	18340 <__assert_fail@plt+0x6694>
   17794:	ldrb	r0, [sp, #24]
   17798:	cmp	r0, #0
   1779c:	beq	177ac <__assert_fail@plt+0x5b00>
   177a0:	ldr	r0, [sp, #28]
   177a4:	cmp	r0, #0
   177a8:	beq	177f0 <__assert_fail@plt+0x5b44>
   177ac:	mov	r6, #0
   177b0:	mov	r5, sp
   177b4:	mov	r4, #0
   177b8:	strb	r6, [sp, #12]
   177bc:	ldr	r0, [sp, #16]
   177c0:	ldr	r1, [sp, #20]
   177c4:	add	r0, r0, r1
   177c8:	str	r0, [sp, #16]
   177cc:	mov	r0, r5
   177d0:	bl	18340 <__assert_fail@plt+0x6694>
   177d4:	ldrb	r1, [sp, #24]
   177d8:	ldr	r0, [sp, #28]
   177dc:	add	r4, r4, #1
   177e0:	cmp	r1, #0
   177e4:	beq	177b8 <__assert_fail@plt+0x5b0c>
   177e8:	cmp	r0, #0
   177ec:	bne	177b8 <__assert_fail@plt+0x5b0c>
   177f0:	mov	r0, r4
   177f4:	sub	sp, fp, #16
   177f8:	pop	{r4, r5, r6, sl, fp, pc}
   177fc:	mov	r0, r5
   17800:	sub	sp, fp, #16
   17804:	pop	{r4, r5, r6, sl, fp, lr}
   17808:	b	11ac0 <strlen@plt>
   1780c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17810:	add	fp, sp, #28
   17814:	sub	sp, sp, #308	; 0x134
   17818:	mov	r6, r1
   1781c:	mov	sl, r0
   17820:	bl	119ac <__ctype_get_mb_cur_max@plt>
   17824:	cmp	r0, #2
   17828:	bcc	17bdc <__assert_fail@plt+0x5f30>
   1782c:	mov	r4, #0
   17830:	sub	r0, fp, #88	; 0x58
   17834:	str	r4, [fp, #-80]	; 0xffffffb0
   17838:	str	r4, [fp, #-84]	; 0xffffffac
   1783c:	strb	r4, [fp, #-76]	; 0xffffffb4
   17840:	strb	r4, [fp, #-88]	; 0xffffffa8
   17844:	str	r6, [fp, #-72]	; 0xffffffb8
   17848:	bl	18340 <__assert_fail@plt+0x6694>
   1784c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17850:	cmp	r0, #0
   17854:	beq	17864 <__assert_fail@plt+0x5bb8>
   17858:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1785c:	cmp	r0, #0
   17860:	beq	17d04 <__assert_fail@plt+0x6058>
   17864:	add	r0, sp, #136	; 0x88
   17868:	str	r4, [fp, #-136]	; 0xffffff78
   1786c:	str	r4, [fp, #-140]	; 0xffffff74
   17870:	str	r6, [fp, #-128]	; 0xffffff80
   17874:	strb	r4, [fp, #-132]	; 0xffffff7c
   17878:	str	r6, [sp, #16]
   1787c:	strb	r4, [fp, #-144]	; 0xffffff70
   17880:	str	r4, [sp, #144]	; 0x90
   17884:	str	r4, [sp, #140]	; 0x8c
   17888:	str	sl, [sp, #152]	; 0x98
   1788c:	strb	r4, [sp, #148]	; 0x94
   17890:	strb	r4, [sp, #136]	; 0x88
   17894:	bl	18340 <__assert_fail@plt+0x6694>
   17898:	ldrb	r0, [sp, #160]	; 0xa0
   1789c:	cmp	r0, #0
   178a0:	beq	178b0 <__assert_fail@plt+0x5c04>
   178a4:	ldr	r0, [sp, #164]	; 0xa4
   178a8:	cmp	r0, #0
   178ac:	beq	17d28 <__assert_fail@plt+0x607c>
   178b0:	add	r0, sp, #24
   178b4:	mov	r8, #1
   178b8:	mov	r6, #0
   178bc:	sub	r5, fp, #144	; 0x90
   178c0:	mov	r1, #0
   178c4:	mov	r7, #0
   178c8:	mov	r9, #0
   178cc:	add	r0, r0, #4
   178d0:	str	r0, [sp, #12]
   178d4:	add	r0, sp, #136	; 0x88
   178d8:	add	r0, r0, #16
   178dc:	str	r0, [sp, #8]
   178e0:	add	r0, r9, r9, lsl #2
   178e4:	mov	r4, r7
   178e8:	cmp	r7, r0
   178ec:	bcc	17998 <__assert_fail@plt+0x5cec>
   178f0:	tst	r8, #1
   178f4:	beq	17998 <__assert_fail@plt+0x5cec>
   178f8:	cmp	r9, #10
   178fc:	bcc	17998 <__assert_fail@plt+0x5cec>
   17900:	subs	r0, r4, r1
   17904:	beq	1794c <__assert_fail@plt+0x5ca0>
   17908:	sub	r7, r1, r4
   1790c:	b	1792c <__assert_fail@plt+0x5c80>
   17910:	strb	r6, [fp, #-132]	; 0xffffff7c
   17914:	adds	r7, r7, #1
   17918:	ldr	r0, [fp, #-128]	; 0xffffff80
   1791c:	ldr	r1, [fp, #-124]	; 0xffffff84
   17920:	add	r0, r0, r1
   17924:	str	r0, [fp, #-128]	; 0xffffff80
   17928:	bcs	1794c <__assert_fail@plt+0x5ca0>
   1792c:	mov	r0, r5
   17930:	bl	18340 <__assert_fail@plt+0x6694>
   17934:	ldrb	r0, [fp, #-120]	; 0xffffff88
   17938:	cmp	r0, #0
   1793c:	beq	17910 <__assert_fail@plt+0x5c64>
   17940:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17944:	cmp	r0, #0
   17948:	bne	17910 <__assert_fail@plt+0x5c64>
   1794c:	mov	r0, r5
   17950:	bl	18340 <__assert_fail@plt+0x6694>
   17954:	ldrb	r0, [fp, #-120]	; 0xffffff88
   17958:	cmp	r0, #0
   1795c:	beq	17994 <__assert_fail@plt+0x5ce8>
   17960:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17964:	mov	r1, r4
   17968:	cmp	r0, #0
   1796c:	bne	17998 <__assert_fail@plt+0x5cec>
   17970:	ldr	r1, [sp, #16]
   17974:	mov	r0, sl
   17978:	add	r2, sp, #80	; 0x50
   1797c:	bl	17d68 <__assert_fail@plt+0x60bc>
   17980:	mov	r8, #0
   17984:	cmp	r0, #0
   17988:	mov	r1, r4
   1798c:	beq	17998 <__assert_fail@plt+0x5cec>
   17990:	b	17d54 <__assert_fail@plt+0x60a8>
   17994:	mov	r1, r4
   17998:	ldrb	r0, [sp, #160]	; 0xa0
   1799c:	add	r7, r4, #1
   179a0:	str	r1, [sp, #20]
   179a4:	cmp	r0, #0
   179a8:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   179ac:	cmpne	r0, #0
   179b0:	bne	179dc <__assert_fail@plt+0x5d30>
   179b4:	ldr	r2, [sp, #156]	; 0x9c
   179b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   179bc:	cmp	r2, r0
   179c0:	bne	17b98 <__assert_fail@plt+0x5eec>
   179c4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   179c8:	ldr	r0, [sp, #152]	; 0x98
   179cc:	bl	11aa8 <bcmp@plt>
   179d0:	cmp	r0, #0
   179d4:	bne	17b98 <__assert_fail@plt+0x5eec>
   179d8:	b	179ec <__assert_fail@plt+0x5d40>
   179dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   179e0:	ldr	r1, [sp, #164]	; 0xa4
   179e4:	cmp	r1, r0
   179e8:	bne	17b98 <__assert_fail@plt+0x5eec>
   179ec:	add	r2, sp, #136	; 0x88
   179f0:	mov	r1, #48	; 0x30
   179f4:	add	r3, sp, #80	; 0x50
   179f8:	str	r9, [sp]
   179fc:	str	r8, [sp, #4]
   17a00:	mov	r0, r2
   17a04:	add	r2, r2, #32
   17a08:	vld1.64	{d16-d17}, [r0], r1
   17a0c:	ldr	r1, [sp, #8]
   17a10:	vld1.64	{d20-d21}, [r2]
   17a14:	vldr	d22, [r0]
   17a18:	add	r0, r3, #32
   17a1c:	vld1.64	{d18-d19}, [r1]
   17a20:	add	r1, r3, #16
   17a24:	vst1.64	{d20-d21}, [r0]
   17a28:	mov	r0, r3
   17a2c:	vst1.64	{d18-d19}, [r1]
   17a30:	mov	r1, #12
   17a34:	vst1.64	{d16-d17}, [r0], r1
   17a38:	strb	r6, [r0]
   17a3c:	ldr	r0, [sp, #16]
   17a40:	vstr	d22, [sp, #128]	; 0x80
   17a44:	ldr	r1, [sp, #100]	; 0x64
   17a48:	str	r0, [sp, #40]	; 0x28
   17a4c:	ldr	r0, [sp, #96]	; 0x60
   17a50:	strb	r6, [sp, #24]
   17a54:	add	r0, r0, r1
   17a58:	str	r0, [sp, #96]	; 0x60
   17a5c:	ldr	r0, [sp, #12]
   17a60:	str	r6, [r0]
   17a64:	str	r6, [r0, #4]
   17a68:	add	r0, sp, #24
   17a6c:	strb	r6, [sp, #36]	; 0x24
   17a70:	bl	18340 <__assert_fail@plt+0x6694>
   17a74:	ldrb	r0, [sp, #48]	; 0x30
   17a78:	cmp	r0, #0
   17a7c:	beq	17a8c <__assert_fail@plt+0x5de0>
   17a80:	ldr	r0, [sp, #52]	; 0x34
   17a84:	cmp	r0, #0
   17a88:	beq	17d64 <__assert_fail@plt+0x60b8>
   17a8c:	strb	r6, [sp, #36]	; 0x24
   17a90:	ldr	r0, [sp, #40]	; 0x28
   17a94:	ldr	r1, [sp, #44]	; 0x2c
   17a98:	add	r0, r0, r1
   17a9c:	str	r0, [sp, #40]	; 0x28
   17aa0:	add	r0, sp, #24
   17aa4:	bl	18340 <__assert_fail@plt+0x6694>
   17aa8:	ldrb	r0, [sp, #48]	; 0x30
   17aac:	cmp	r0, #0
   17ab0:	beq	17ac0 <__assert_fail@plt+0x5e14>
   17ab4:	ldr	r0, [sp, #52]	; 0x34
   17ab8:	cmp	r0, #0
   17abc:	beq	17d34 <__assert_fail@plt+0x6088>
   17ac0:	add	r7, r4, #2
   17ac4:	add	r0, sp, #80	; 0x50
   17ac8:	bl	18340 <__assert_fail@plt+0x6694>
   17acc:	ldr	r0, [sp, #108]	; 0x6c
   17ad0:	ldrb	r1, [sp, #104]	; 0x68
   17ad4:	cmp	r0, #0
   17ad8:	bne	17ae4 <__assert_fail@plt+0x5e38>
   17adc:	cmp	r1, #0
   17ae0:	bne	17d14 <__assert_fail@plt+0x6068>
   17ae4:	cmp	r1, #0
   17ae8:	ldrbne	r1, [sp, #48]	; 0x30
   17aec:	cmpne	r1, #0
   17af0:	bne	17b2c <__assert_fail@plt+0x5e80>
   17af4:	ldr	r4, [sp, #100]	; 0x64
   17af8:	ldr	r0, [sp, #44]	; 0x2c
   17afc:	cmp	r4, r0
   17b00:	bne	17b8c <__assert_fail@plt+0x5ee0>
   17b04:	ldr	r8, [sp, #40]	; 0x28
   17b08:	ldr	r9, [sp, #96]	; 0x60
   17b0c:	mov	r2, r4
   17b10:	mov	r0, r9
   17b14:	mov	r1, r8
   17b18:	bl	11aa8 <bcmp@plt>
   17b1c:	cmp	r0, #0
   17b20:	mov	r0, r4
   17b24:	beq	17b48 <__assert_fail@plt+0x5e9c>
   17b28:	b	17b8c <__assert_fail@plt+0x5ee0>
   17b2c:	ldr	r1, [sp, #52]	; 0x34
   17b30:	cmp	r0, r1
   17b34:	bne	17b8c <__assert_fail@plt+0x5ee0>
   17b38:	ldr	r8, [sp, #40]	; 0x28
   17b3c:	ldr	r4, [sp, #44]	; 0x2c
   17b40:	ldr	r9, [sp, #96]	; 0x60
   17b44:	ldr	r0, [sp, #100]	; 0x64
   17b48:	mov	r1, #0
   17b4c:	add	r0, r9, r0
   17b50:	strb	r1, [sp, #92]	; 0x5c
   17b54:	str	r0, [sp, #96]	; 0x60
   17b58:	add	r0, r8, r4
   17b5c:	strb	r1, [sp, #36]	; 0x24
   17b60:	str	r0, [sp, #40]	; 0x28
   17b64:	add	r0, sp, #24
   17b68:	bl	18340 <__assert_fail@plt+0x6694>
   17b6c:	ldrb	r0, [sp, #48]	; 0x30
   17b70:	add	r7, r7, #1
   17b74:	cmp	r0, #0
   17b78:	beq	17ac4 <__assert_fail@plt+0x5e18>
   17b7c:	ldr	r0, [sp, #52]	; 0x34
   17b80:	cmp	r0, #0
   17b84:	bne	17ac4 <__assert_fail@plt+0x5e18>
   17b88:	b	17d34 <__assert_fail@plt+0x6088>
   17b8c:	ldr	r8, [sp, #4]
   17b90:	ldr	r9, [sp]
   17b94:	mov	r6, #0
   17b98:	mov	r4, #0
   17b9c:	add	r9, r9, #1
   17ba0:	strb	r4, [sp, #148]	; 0x94
   17ba4:	ldr	r0, [sp, #152]	; 0x98
   17ba8:	ldr	r1, [sp, #156]	; 0x9c
   17bac:	add	r0, r0, r1
   17bb0:	str	r0, [sp, #152]	; 0x98
   17bb4:	add	r0, sp, #136	; 0x88
   17bb8:	bl	18340 <__assert_fail@plt+0x6694>
   17bbc:	ldrb	r0, [sp, #160]	; 0xa0
   17bc0:	ldr	r1, [sp, #20]
   17bc4:	cmp	r0, #0
   17bc8:	beq	178e0 <__assert_fail@plt+0x5c34>
   17bcc:	ldr	r0, [sp, #164]	; 0xa4
   17bd0:	cmp	r0, #0
   17bd4:	bne	178e0 <__assert_fail@plt+0x5c34>
   17bd8:	b	17d28 <__assert_fail@plt+0x607c>
   17bdc:	ldrb	r5, [r6]
   17be0:	cmp	r5, #0
   17be4:	beq	17d24 <__assert_fail@plt+0x6078>
   17be8:	ldrb	r9, [sl]
   17bec:	cmp	r9, #0
   17bf0:	beq	17d14 <__assert_fail@plt+0x6068>
   17bf4:	mov	lr, #1
   17bf8:	mov	ip, #0
   17bfc:	mov	r3, r6
   17c00:	mov	r7, #0
   17c04:	mov	r8, #0
   17c08:	add	r0, r8, r8, lsl #2
   17c0c:	cmp	r7, r0
   17c10:	bcc	17c68 <__assert_fail@plt+0x5fbc>
   17c14:	tst	lr, #1
   17c18:	beq	17c68 <__assert_fail@plt+0x5fbc>
   17c1c:	cmp	r8, #10
   17c20:	bcc	17c68 <__assert_fail@plt+0x5fbc>
   17c24:	cmp	r3, #0
   17c28:	beq	17ca4 <__assert_fail@plt+0x5ff8>
   17c2c:	sub	r1, r7, ip
   17c30:	mov	r0, r3
   17c34:	str	r7, [sp, #20]
   17c38:	mov	r7, r5
   17c3c:	mov	r4, lr
   17c40:	mov	r5, r3
   17c44:	bl	11b80 <strnlen@plt>
   17c48:	mov	r3, r5
   17c4c:	mov	r5, r7
   17c50:	ldr	r7, [sp, #20]
   17c54:	mov	lr, r4
   17c58:	ldrb	r0, [r3, r0]!
   17c5c:	mov	ip, r7
   17c60:	cmp	r0, #0
   17c64:	beq	17ca4 <__assert_fail@plt+0x5ff8>
   17c68:	uxtb	r0, r9
   17c6c:	cmp	r0, r5
   17c70:	bne	17ce8 <__assert_fail@plt+0x603c>
   17c74:	mov	r0, #1
   17c78:	ldrb	r1, [r6, r0]
   17c7c:	cmp	r1, #0
   17c80:	beq	17d04 <__assert_fail@plt+0x6058>
   17c84:	ldrb	r2, [sl, r0]
   17c88:	cmp	r2, #0
   17c8c:	beq	17d14 <__assert_fail@plt+0x6068>
   17c90:	add	r0, r0, #1
   17c94:	cmp	r2, r1
   17c98:	beq	17c78 <__assert_fail@plt+0x5fcc>
   17c9c:	add	r7, r7, r0
   17ca0:	b	17cec <__assert_fail@plt+0x6040>
   17ca4:	mov	r0, r6
   17ca8:	mov	r4, ip
   17cac:	bl	11ac0 <strlen@plt>
   17cb0:	mov	r2, r0
   17cb4:	mov	r0, sl
   17cb8:	mov	r1, r6
   17cbc:	sub	r3, fp, #88	; 0x58
   17cc0:	bl	181a8 <__assert_fail@plt+0x64fc>
   17cc4:	cmp	r0, #0
   17cc8:	bne	17d44 <__assert_fail@plt+0x6098>
   17ccc:	ldrb	r9, [sl]
   17cd0:	mov	lr, #0
   17cd4:	mov	r3, #0
   17cd8:	mov	ip, r4
   17cdc:	uxtb	r0, r9
   17ce0:	cmp	r0, r5
   17ce4:	beq	17c74 <__assert_fail@plt+0x5fc8>
   17ce8:	add	r7, r7, #1
   17cec:	ldrb	r9, [sl, #1]!
   17cf0:	add	r8, r8, #1
   17cf4:	mov	r4, #0
   17cf8:	cmp	r9, #0
   17cfc:	bne	17c08 <__assert_fail@plt+0x5f5c>
   17d00:	b	17d28 <__assert_fail@plt+0x607c>
   17d04:	mov	r4, sl
   17d08:	mov	r0, r4
   17d0c:	sub	sp, fp, #28
   17d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d14:	mov	r4, #0
   17d18:	mov	r0, r4
   17d1c:	sub	sp, fp, #28
   17d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d24:	mov	r4, sl
   17d28:	mov	r0, r4
   17d2c:	sub	sp, fp, #28
   17d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d34:	ldr	r4, [sp, #152]	; 0x98
   17d38:	mov	r0, r4
   17d3c:	sub	sp, fp, #28
   17d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d44:	ldr	r4, [fp, #-88]	; 0xffffffa8
   17d48:	mov	r0, r4
   17d4c:	sub	sp, fp, #28
   17d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d54:	ldr	r4, [sp, #80]	; 0x50
   17d58:	mov	r0, r4
   17d5c:	sub	sp, fp, #28
   17d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d64:	bl	11c70 <abort@plt>
   17d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d6c:	add	fp, sp, #28
   17d70:	sub	sp, sp, #132	; 0x84
   17d74:	mov	r7, r0
   17d78:	mov	r0, r1
   17d7c:	mov	r6, r2
   17d80:	mov	r4, r1
   17d84:	bl	17758 <__assert_fail@plt+0x5aac>
   17d88:	mov	sl, r0
   17d8c:	movw	r0, #47662	; 0xba2e
   17d90:	mov	r5, #0
   17d94:	movt	r0, #744	; 0x2e8
   17d98:	cmp	sl, r0
   17d9c:	bhi	17dd0 <__assert_fail@plt+0x6124>
   17da0:	mov	r0, #44	; 0x2c
   17da4:	mul	r0, sl, r0
   17da8:	cmp	r0, #4016	; 0xfb0
   17dac:	bhi	17ddc <__assert_fail@plt+0x6130>
   17db0:	add	r0, r0, #22
   17db4:	bic	r0, r0, #7
   17db8:	sub	r0, sp, r0
   17dbc:	add	r1, r0, #15
   17dc0:	bic	r9, r1, #15
   17dc4:	mov	sp, r0
   17dc8:	cmp	r9, #0
   17dcc:	bne	17dec <__assert_fail@plt+0x6140>
   17dd0:	mov	r0, r5
   17dd4:	sub	sp, fp, #28
   17dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ddc:	bl	32d94 <__assert_fail@plt+0x210e8>
   17de0:	mov	r9, r0
   17de4:	cmp	r9, #0
   17de8:	beq	17dd0 <__assert_fail@plt+0x6124>
   17dec:	str	r6, [fp, #-152]	; 0xffffff68
   17df0:	mov	r6, #0
   17df4:	str	r7, [fp, #-156]	; 0xffffff64
   17df8:	str	r6, [fp, #-80]	; 0xffffffb0
   17dfc:	str	r6, [fp, #-84]	; 0xffffffac
   17e00:	strb	r6, [fp, #-76]	; 0xffffffb4
   17e04:	strb	r6, [fp, #-88]	; 0xffffffa8
   17e08:	str	r4, [fp, #-72]	; 0xffffffb8
   17e0c:	sub	r4, fp, #88	; 0x58
   17e10:	mov	r0, r4
   17e14:	bl	18340 <__assert_fail@plt+0x6694>
   17e18:	add	r0, sl, sl, lsl #2
   17e1c:	add	r8, r9, r0, lsl #3
   17e20:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17e24:	cmp	r0, #0
   17e28:	beq	17e38 <__assert_fail@plt+0x618c>
   17e2c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17e30:	cmp	r0, #0
   17e34:	beq	17eb8 <__assert_fail@plt+0x620c>
   17e38:	add	r7, r9, #16
   17e3c:	add	r5, r4, #32
   17e40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17e44:	cmp	r0, r5
   17e48:	bne	17e60 <__assert_fail@plt+0x61b4>
   17e4c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17e50:	mov	r0, r7
   17e54:	mov	r1, r5
   17e58:	bl	118ec <memcpy@plt>
   17e5c:	mov	r0, r7
   17e60:	str	r0, [r7, #-16]
   17e64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e68:	str	r0, [r7, #-12]
   17e6c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17e70:	strb	r0, [r7, #-8]
   17e74:	cmp	r0, #0
   17e78:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   17e7c:	strne	r0, [r7, #-4]
   17e80:	strb	r6, [fp, #-76]	; 0xffffffb4
   17e84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17e88:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17e8c:	add	r0, r0, r1
   17e90:	str	r0, [fp, #-72]	; 0xffffffb8
   17e94:	mov	r0, r4
   17e98:	bl	18340 <__assert_fail@plt+0x6694>
   17e9c:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   17ea0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17ea4:	add	r7, r7, #40	; 0x28
   17ea8:	cmp	r1, #0
   17eac:	beq	17e40 <__assert_fail@plt+0x6194>
   17eb0:	cmp	r0, #0
   17eb4:	bne	17e40 <__assert_fail@plt+0x6194>
   17eb8:	mov	r0, #1
   17ebc:	cmp	sl, #3
   17ec0:	str	sl, [fp, #-148]	; 0xffffff6c
   17ec4:	str	r0, [r8, #4]
   17ec8:	bcc	17fc4 <__assert_fail@plt+0x6318>
   17ecc:	mov	sl, #2
   17ed0:	mov	r7, #0
   17ed4:	b	17ef4 <__assert_fail@plt+0x6248>
   17ed8:	mov	r7, #0
   17edc:	mov	r0, sl
   17ee0:	str	r0, [r8, sl, lsl #2]
   17ee4:	ldr	r0, [fp, #-148]	; 0xffffff6c
   17ee8:	add	sl, sl, #1
   17eec:	cmp	sl, r0
   17ef0:	beq	17fc4 <__assert_fail@plt+0x6318>
   17ef4:	add	r0, sl, sl, lsl #2
   17ef8:	add	r0, r9, r0, lsl #3
   17efc:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   17f00:	sub	r6, r0, #40	; 0x28
   17f04:	sub	r4, r0, #36	; 0x24
   17f08:	cmp	r1, #0
   17f0c:	beq	17f74 <__assert_fail@plt+0x62c8>
   17f10:	sub	r5, r0, #28
   17f14:	add	r0, r7, r7, lsl #2
   17f18:	add	r1, r9, r0, lsl #3
   17f1c:	ldrb	r2, [r1, #8]
   17f20:	cmp	r2, #0
   17f24:	beq	17f3c <__assert_fail@plt+0x6290>
   17f28:	ldr	r0, [r1, #12]
   17f2c:	ldr	r1, [r5]
   17f30:	cmp	r1, r0
   17f34:	bne	17f60 <__assert_fail@plt+0x62b4>
   17f38:	b	17fb8 <__assert_fail@plt+0x630c>
   17f3c:	ldr	r1, [r1, #4]
   17f40:	ldr	r2, [r4]
   17f44:	cmp	r2, r1
   17f48:	bne	17f60 <__assert_fail@plt+0x62b4>
   17f4c:	ldr	r1, [r9, r0, lsl #3]
   17f50:	ldr	r0, [r6]
   17f54:	bl	11aa8 <bcmp@plt>
   17f58:	cmp	r0, #0
   17f5c:	beq	17fb8 <__assert_fail@plt+0x630c>
   17f60:	cmp	r7, #0
   17f64:	beq	17ed8 <__assert_fail@plt+0x622c>
   17f68:	ldr	r0, [r8, r7, lsl #2]
   17f6c:	sub	r7, r7, r0
   17f70:	b	17f14 <__assert_fail@plt+0x6268>
   17f74:	ldr	r4, [r4]
   17f78:	add	r0, r7, r7, lsl #2
   17f7c:	add	r1, r9, r0, lsl #3
   17f80:	ldr	r1, [r1, #4]
   17f84:	cmp	r4, r1
   17f88:	bne	17fa4 <__assert_fail@plt+0x62f8>
   17f8c:	ldr	r1, [r9, r0, lsl #3]
   17f90:	ldr	r0, [r6]
   17f94:	mov	r2, r4
   17f98:	bl	11aa8 <bcmp@plt>
   17f9c:	cmp	r0, #0
   17fa0:	beq	17fb8 <__assert_fail@plt+0x630c>
   17fa4:	cmp	r7, #0
   17fa8:	beq	17ed8 <__assert_fail@plt+0x622c>
   17fac:	ldr	r0, [r8, r7, lsl #2]
   17fb0:	sub	r7, r7, r0
   17fb4:	b	17f78 <__assert_fail@plt+0x62cc>
   17fb8:	add	r7, r7, #1
   17fbc:	sub	r0, sl, r7
   17fc0:	b	17ee0 <__assert_fail@plt+0x6234>
   17fc4:	ldr	r0, [fp, #-152]	; 0xffffff68
   17fc8:	mov	r6, #0
   17fcc:	str	r6, [r0]
   17fd0:	ldr	r0, [fp, #-156]	; 0xffffff64
   17fd4:	str	r6, [fp, #-80]	; 0xffffffb0
   17fd8:	str	r6, [fp, #-84]	; 0xffffffac
   17fdc:	strb	r6, [fp, #-76]	; 0xffffffb4
   17fe0:	strb	r6, [fp, #-88]	; 0xffffffa8
   17fe4:	str	r6, [fp, #-136]	; 0xffffff78
   17fe8:	str	r6, [fp, #-140]	; 0xffffff74
   17fec:	str	r0, [fp, #-128]	; 0xffffff80
   17ff0:	str	r0, [fp, #-72]	; 0xffffffb8
   17ff4:	sub	r0, fp, #144	; 0x90
   17ff8:	strb	r6, [fp, #-132]	; 0xffffff7c
   17ffc:	strb	r6, [fp, #-144]	; 0xffffff70
   18000:	bl	18340 <__assert_fail@plt+0x6694>
   18004:	ldr	r0, [fp, #-116]	; 0xffffff8c
   18008:	ldrb	r1, [fp, #-120]	; 0xffffff88
   1800c:	cmp	r0, #0
   18010:	bne	1801c <__assert_fail@plt+0x6370>
   18014:	cmp	r1, #0
   18018:	bne	1818c <__assert_fail@plt+0x64e0>
   1801c:	clz	r1, r1
   18020:	sub	r4, fp, #88	; 0x58
   18024:	mov	sl, #0
   18028:	lsr	r1, r1, #5
   1802c:	add	r2, sl, sl, lsl #2
   18030:	tst	r1, #1
   18034:	add	r3, r9, r2, lsl #3
   18038:	bne	18060 <__assert_fail@plt+0x63b4>
   1803c:	ldrb	r1, [r3, #8]
   18040:	cmp	r1, #0
   18044:	beq	18060 <__assert_fail@plt+0x63b4>
   18048:	ldr	r1, [r3, #12]
   1804c:	cmp	r1, r0
   18050:	bne	1808c <__assert_fail@plt+0x63e0>
   18054:	ldr	r7, [fp, #-128]	; 0xffffff80
   18058:	ldr	r5, [fp, #-124]	; 0xffffff84
   1805c:	b	180e8 <__assert_fail@plt+0x643c>
   18060:	ldr	r5, [r3, #4]
   18064:	ldr	r0, [fp, #-124]	; 0xffffff84
   18068:	cmp	r5, r0
   1806c:	bne	1808c <__assert_fail@plt+0x63e0>
   18070:	ldr	r0, [r9, r2, lsl #3]
   18074:	ldr	r7, [fp, #-128]	; 0xffffff80
   18078:	mov	r2, r5
   1807c:	mov	r1, r7
   18080:	bl	11aa8 <bcmp@plt>
   18084:	cmp	r0, #0
   18088:	beq	180e8 <__assert_fail@plt+0x643c>
   1808c:	cmp	sl, #0
   18090:	beq	18108 <__assert_fail@plt+0x645c>
   18094:	ldr	r5, [r8, sl, lsl #2]
   18098:	sub	sl, sl, r5
   1809c:	cmp	r5, #0
   180a0:	bne	180c4 <__assert_fail@plt+0x6418>
   180a4:	b	18154 <__assert_fail@plt+0x64a8>
   180a8:	strb	r6, [fp, #-76]	; 0xffffffb4
   180ac:	subs	r5, r5, #1
   180b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   180b4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   180b8:	add	r0, r0, r1
   180bc:	str	r0, [fp, #-72]	; 0xffffffb8
   180c0:	beq	18154 <__assert_fail@plt+0x64a8>
   180c4:	mov	r0, r4
   180c8:	bl	18340 <__assert_fail@plt+0x6694>
   180cc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   180d0:	cmp	r0, #0
   180d4:	beq	180a8 <__assert_fail@plt+0x63fc>
   180d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   180dc:	cmp	r0, #0
   180e0:	bne	180a8 <__assert_fail@plt+0x63fc>
   180e4:	b	181a4 <__assert_fail@plt+0x64f8>
   180e8:	add	r0, r7, r5
   180ec:	strb	r6, [fp, #-132]	; 0xffffff7c
   180f0:	add	sl, sl, #1
   180f4:	str	r0, [fp, #-128]	; 0xffffff80
   180f8:	ldr	r0, [fp, #-148]	; 0xffffff6c
   180fc:	cmp	sl, r0
   18100:	bne	18154 <__assert_fail@plt+0x64a8>
   18104:	b	18180 <__assert_fail@plt+0x64d4>
   18108:	mov	r0, r4
   1810c:	bl	18340 <__assert_fail@plt+0x6694>
   18110:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   18114:	cmp	r0, #0
   18118:	beq	18128 <__assert_fail@plt+0x647c>
   1811c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18120:	cmp	r0, #0
   18124:	beq	181a4 <__assert_fail@plt+0x64f8>
   18128:	mov	sl, #0
   1812c:	strb	sl, [fp, #-76]	; 0xffffffb4
   18130:	strb	sl, [fp, #-132]	; 0xffffff7c
   18134:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18138:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1813c:	add	r0, r0, r1
   18140:	ldr	r1, [fp, #-124]	; 0xffffff84
   18144:	str	r0, [fp, #-72]	; 0xffffffb8
   18148:	ldr	r0, [fp, #-128]	; 0xffffff80
   1814c:	add	r0, r0, r1
   18150:	str	r0, [fp, #-128]	; 0xffffff80
   18154:	sub	r0, fp, #144	; 0x90
   18158:	bl	18340 <__assert_fail@plt+0x6694>
   1815c:	ldrb	r2, [fp, #-120]	; 0xffffff88
   18160:	clz	r0, r2
   18164:	lsr	r1, r0, #5
   18168:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1816c:	cmp	r0, #0
   18170:	bne	1802c <__assert_fail@plt+0x6380>
   18174:	cmp	r2, #0
   18178:	beq	1802c <__assert_fail@plt+0x6380>
   1817c:	b	1818c <__assert_fail@plt+0x64e0>
   18180:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18184:	ldr	r1, [fp, #-152]	; 0xffffff68
   18188:	str	r0, [r1]
   1818c:	mov	r0, r9
   18190:	bl	32e04 <__assert_fail@plt+0x21158>
   18194:	mov	r5, #1
   18198:	mov	r0, r5
   1819c:	sub	sp, fp, #28
   181a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a4:	bl	11c70 <abort@plt>
   181a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   181ac:	add	fp, sp, #24
   181b0:	mov	r4, #0
   181b4:	cmn	r2, #-536870911	; 0xe0000001
   181b8:	bhi	1831c <__assert_fail@plt+0x6670>
   181bc:	mov	r7, r0
   181c0:	lsl	r0, r2, #2
   181c4:	mov	r8, r3
   181c8:	mov	r5, r2
   181cc:	mov	r6, r1
   181d0:	cmp	r0, #4016	; 0xfb0
   181d4:	bhi	18310 <__assert_fail@plt+0x6664>
   181d8:	add	r0, r0, #22
   181dc:	bic	r0, r0, #7
   181e0:	sub	r1, sp, r0
   181e4:	add	r0, r1, #15
   181e8:	bic	r0, r0, #15
   181ec:	mov	sp, r1
   181f0:	cmp	r0, #0
   181f4:	beq	1831c <__assert_fail@plt+0x6670>
   181f8:	mov	r1, #1
   181fc:	cmp	r5, #3
   18200:	str	r1, [r0, #4]
   18204:	bcc	18278 <__assert_fail@plt+0x65cc>
   18208:	mov	r1, #2
   1820c:	mov	r2, #0
   18210:	b	1822c <__assert_fail@plt+0x6580>
   18214:	add	r2, r2, #1
   18218:	sub	r3, r1, r2
   1821c:	str	r3, [r0, r1, lsl #2]
   18220:	add	r1, r1, #1
   18224:	cmp	r1, r5
   18228:	beq	18278 <__assert_fail@plt+0x65cc>
   1822c:	add	r3, r1, r6
   18230:	ldrb	r4, [r6, r2]
   18234:	ldrb	r3, [r3, #-1]
   18238:	cmp	r3, r4
   1823c:	beq	18214 <__assert_fail@plt+0x6568>
   18240:	cmp	r2, #0
   18244:	beq	18260 <__assert_fail@plt+0x65b4>
   18248:	ldr	r4, [r0, r2, lsl #2]
   1824c:	sub	r2, r2, r4
   18250:	ldrb	r4, [r6, r2]
   18254:	cmp	r3, r4
   18258:	bne	18240 <__assert_fail@plt+0x6594>
   1825c:	b	18214 <__assert_fail@plt+0x6568>
   18260:	mov	r2, #0
   18264:	mov	r3, r1
   18268:	str	r3, [r0, r1, lsl #2]
   1826c:	add	r1, r1, #1
   18270:	cmp	r1, r5
   18274:	bne	1822c <__assert_fail@plt+0x6580>
   18278:	mov	r1, #0
   1827c:	str	r1, [r8]
   18280:	ldrb	r3, [r7]
   18284:	cmp	r3, #0
   18288:	beq	1832c <__assert_fail@plt+0x6680>
   1828c:	mov	r2, r7
   18290:	ldrb	r4, [r6, r1]
   18294:	uxtb	r3, r3
   18298:	cmp	r4, r3
   1829c:	bne	182ec <__assert_fail@plt+0x6640>
   182a0:	b	182cc <__assert_fail@plt+0x6620>
   182a4:	add	r7, r7, #1
   182a8:	add	r2, r2, #1
   182ac:	mov	r1, #0
   182b0:	ldrb	r3, [r7]
   182b4:	cmp	r3, #0
   182b8:	beq	1832c <__assert_fail@plt+0x6680>
   182bc:	ldrb	r4, [r6, r1]
   182c0:	uxtb	r3, r3
   182c4:	cmp	r4, r3
   182c8:	bne	182ec <__assert_fail@plt+0x6640>
   182cc:	add	r1, r1, #1
   182d0:	cmp	r1, r5
   182d4:	beq	18328 <__assert_fail@plt+0x667c>
   182d8:	add	r7, r7, #1
   182dc:	ldrb	r3, [r7]
   182e0:	cmp	r3, #0
   182e4:	bne	182bc <__assert_fail@plt+0x6610>
   182e8:	b	1832c <__assert_fail@plt+0x6680>
   182ec:	cmp	r1, #0
   182f0:	beq	182a4 <__assert_fail@plt+0x65f8>
   182f4:	ldr	r3, [r0, r1, lsl #2]
   182f8:	sub	r1, r1, r3
   182fc:	add	r2, r2, r3
   18300:	ldrb	r3, [r7]
   18304:	cmp	r3, #0
   18308:	bne	182bc <__assert_fail@plt+0x6610>
   1830c:	b	1832c <__assert_fail@plt+0x6680>
   18310:	bl	32d94 <__assert_fail@plt+0x210e8>
   18314:	cmp	r0, #0
   18318:	bne	181f8 <__assert_fail@plt+0x654c>
   1831c:	mov	r0, r4
   18320:	sub	sp, fp, #24
   18324:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18328:	str	r2, [r8]
   1832c:	bl	32e04 <__assert_fail@plt+0x21158>
   18330:	mov	r4, #1
   18334:	mov	r0, r4
   18338:	sub	sp, fp, #24
   1833c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18340:	push	{r4, r5, r6, r7, fp, lr}
   18344:	add	fp, sp, #16
   18348:	mov	r4, r0
   1834c:	ldrb	r0, [r0, #12]
   18350:	cmp	r0, #0
   18354:	popne	{r4, r5, r6, r7, fp, pc}
   18358:	ldrb	r0, [r4]
   1835c:	ldr	r5, [r4, #16]
   18360:	cmp	r0, #0
   18364:	beq	183cc <__assert_fail@plt+0x6720>
   18368:	bl	119ac <__ctype_get_mb_cur_max@plt>
   1836c:	mov	r1, r0
   18370:	mov	r0, r5
   18374:	bl	1a56c <__assert_fail@plt+0x88c0>
   18378:	add	r6, r4, #4
   1837c:	add	r7, r4, #28
   18380:	mov	r2, r0
   18384:	mov	r1, r5
   18388:	mov	r0, r7
   1838c:	mov	r3, r6
   18390:	bl	1c324 <__assert_fail@plt+0xa678>
   18394:	cmn	r0, #2
   18398:	str	r0, [r4, #20]
   1839c:	beq	18458 <__assert_fail@plt+0x67ac>
   183a0:	cmp	r0, #0
   183a4:	beq	1840c <__assert_fail@plt+0x6760>
   183a8:	cmn	r0, #1
   183ac:	bne	18430 <__assert_fail@plt+0x6784>
   183b0:	mov	r0, #0
   183b4:	strb	r0, [r4, #24]
   183b8:	mov	r0, #1
   183bc:	str	r0, [r4, #20]
   183c0:	mov	r0, #1
   183c4:	strb	r0, [r4, #12]
   183c8:	pop	{r4, r5, r6, r7, fp, pc}
   183cc:	ldrb	r0, [r5]
   183d0:	movw	r2, #20368	; 0x4f90
   183d4:	movt	r2, #3
   183d8:	ubfx	r1, r0, #5, #3
   183dc:	ldr	r1, [r2, r1, lsl #2]
   183e0:	and	r2, r0, #31
   183e4:	mov	r0, #1
   183e8:	tst	r1, r0, lsl r2
   183ec:	beq	18478 <__assert_fail@plt+0x67cc>
   183f0:	str	r0, [r4, #20]
   183f4:	ldrb	r1, [r5]
   183f8:	strb	r0, [r4, #24]
   183fc:	str	r1, [r4, #28]
   18400:	mov	r0, #1
   18404:	strb	r0, [r4, #12]
   18408:	pop	{r4, r5, r6, r7, fp, pc}
   1840c:	mov	r0, #1
   18410:	str	r0, [r4, #20]
   18414:	ldr	r0, [r4, #16]
   18418:	ldrb	r0, [r0]
   1841c:	cmp	r0, #0
   18420:	bne	18494 <__assert_fail@plt+0x67e8>
   18424:	ldr	r0, [r7]
   18428:	cmp	r0, #0
   1842c:	bne	184b4 <__assert_fail@plt+0x6808>
   18430:	mov	r0, #1
   18434:	strb	r0, [r4, #24]
   18438:	mov	r0, r6
   1843c:	bl	1191c <mbsinit@plt>
   18440:	cmp	r0, #0
   18444:	movne	r0, #0
   18448:	strbne	r0, [r4]
   1844c:	mov	r0, #1
   18450:	strb	r0, [r4, #12]
   18454:	pop	{r4, r5, r6, r7, fp, pc}
   18458:	ldr	r0, [r4, #16]
   1845c:	bl	11ac0 <strlen@plt>
   18460:	mov	r1, #0
   18464:	strb	r1, [r4, #24]
   18468:	str	r0, [r4, #20]
   1846c:	mov	r0, #1
   18470:	strb	r0, [r4, #12]
   18474:	pop	{r4, r5, r6, r7, fp, pc}
   18478:	add	r0, r4, #4
   1847c:	bl	1191c <mbsinit@plt>
   18480:	cmp	r0, #0
   18484:	beq	184d4 <__assert_fail@plt+0x6828>
   18488:	mov	r0, #1
   1848c:	strb	r0, [r4]
   18490:	b	18368 <__assert_fail@plt+0x66bc>
   18494:	movw	r0, #18383	; 0x47cf
   18498:	movw	r1, #18323	; 0x4793
   1849c:	movw	r3, #18335	; 0x479f
   184a0:	mov	r2, #171	; 0xab
   184a4:	movt	r0, #3
   184a8:	movt	r1, #3
   184ac:	movt	r3, #3
   184b0:	bl	11cac <__assert_fail@plt>
   184b4:	movw	r0, #18406	; 0x47e6
   184b8:	movw	r1, #18323	; 0x4793
   184bc:	movw	r3, #18335	; 0x479f
   184c0:	mov	r2, #172	; 0xac
   184c4:	movt	r0, #3
   184c8:	movt	r1, #3
   184cc:	movt	r3, #3
   184d0:	bl	11cac <__assert_fail@plt>
   184d4:	movw	r0, #18300	; 0x477c
   184d8:	movw	r1, #18323	; 0x4793
   184dc:	movw	r3, #18335	; 0x479f
   184e0:	mov	r2, #143	; 0x8f
   184e4:	movt	r0, #3
   184e8:	movt	r1, #3
   184ec:	movt	r3, #3
   184f0:	bl	11cac <__assert_fail@plt>
   184f4:	ldr	r2, [r0, #16]
   184f8:	add	r1, r2, r1
   184fc:	str	r1, [r0, #16]
   18500:	bx	lr
   18504:	push	{r4, r5, r6, sl, fp, lr}
   18508:	add	fp, sp, #16
   1850c:	mov	r5, r1
   18510:	ldrb	r1, [r1]
   18514:	mov	r4, r0
   18518:	strb	r1, [r0], #4
   1851c:	cmp	r1, #0
   18520:	beq	18530 <__assert_fail@plt+0x6884>
   18524:	ldmib	r5, {r1, r2}
   18528:	stm	r0, {r1, r2}
   1852c:	b	1853c <__assert_fail@plt+0x6890>
   18530:	mov	r1, #0
   18534:	str	r1, [r0]
   18538:	str	r1, [r0, #4]
   1853c:	ldrb	r0, [r5, #12]
   18540:	strb	r0, [r4, #12]
   18544:	add	r0, r5, #32
   18548:	ldr	r1, [r5, #16]
   1854c:	cmp	r1, r0
   18550:	beq	1855c <__assert_fail@plt+0x68b0>
   18554:	mov	r6, r1
   18558:	b	1856c <__assert_fail@plt+0x68c0>
   1855c:	ldr	r2, [r5, #20]
   18560:	add	r6, r4, #32
   18564:	mov	r0, r6
   18568:	bl	118ec <memcpy@plt>
   1856c:	str	r6, [r4, #16]
   18570:	ldr	r0, [r5, #20]
   18574:	str	r0, [r4, #20]
   18578:	ldrb	r0, [r5, #24]
   1857c:	strb	r0, [r4, #24]
   18580:	cmp	r0, #0
   18584:	ldrne	r0, [r5, #28]
   18588:	strne	r0, [r4, #28]
   1858c:	pop	{r4, r5, r6, sl, fp, pc}
   18590:	push	{r4, r5, fp, lr}
   18594:	add	fp, sp, #8
   18598:	cmp	r0, #0
   1859c:	beq	18630 <__assert_fail@plt+0x6984>
   185a0:	mov	r1, #47	; 0x2f
   185a4:	mov	r4, r0
   185a8:	bl	11bb0 <strrchr@plt>
   185ac:	cmp	r0, #0
   185b0:	mov	r5, r4
   185b4:	addne	r5, r0, #1
   185b8:	sub	r0, r5, r4
   185bc:	cmp	r0, #7
   185c0:	blt	18614 <__assert_fail@plt+0x6968>
   185c4:	movw	r1, #18480	; 0x4830
   185c8:	sub	r0, r5, #7
   185cc:	mov	r2, #7
   185d0:	movt	r1, #3
   185d4:	bl	11c64 <strncmp@plt>
   185d8:	cmp	r0, #0
   185dc:	bne	18614 <__assert_fail@plt+0x6968>
   185e0:	movw	r1, #18488	; 0x4838
   185e4:	mov	r0, r5
   185e8:	mov	r2, #3
   185ec:	movt	r1, #3
   185f0:	bl	11c64 <strncmp@plt>
   185f4:	cmp	r0, #0
   185f8:	beq	18604 <__assert_fail@plt+0x6958>
   185fc:	mov	r4, r5
   18600:	b	18614 <__assert_fail@plt+0x6968>
   18604:	movw	r0, #25088	; 0x6200
   18608:	add	r4, r5, #3
   1860c:	movt	r0, #4
   18610:	str	r4, [r0]
   18614:	movw	r0, #25092	; 0x6204
   18618:	movt	r0, #4
   1861c:	str	r4, [r0]
   18620:	movw	r0, #25232	; 0x6290
   18624:	movt	r0, #4
   18628:	str	r4, [r0]
   1862c:	pop	{r4, r5, fp, pc}
   18630:	movw	r0, #25104	; 0x6210
   18634:	mov	r1, #55	; 0x37
   18638:	mov	r2, #1
   1863c:	movt	r0, #4
   18640:	ldr	r3, [r0]
   18644:	movw	r0, #18424	; 0x47f8
   18648:	movt	r0, #3
   1864c:	bl	11994 <fwrite@plt>
   18650:	bl	11c70 <abort@plt>
   18654:	push	{r4, r5, r6, sl, fp, lr}
   18658:	add	fp, sp, #16
   1865c:	mov	r4, r0
   18660:	movw	r0, #25240	; 0x6298
   18664:	movt	r0, #4
   18668:	cmp	r4, #0
   1866c:	moveq	r4, r0
   18670:	bl	11af0 <__errno_location@plt>
   18674:	ldr	r6, [r0]
   18678:	mov	r5, r0
   1867c:	mov	r0, r4
   18680:	mov	r1, #48	; 0x30
   18684:	bl	1b0fc <__assert_fail@plt+0x9450>
   18688:	str	r6, [r5]
   1868c:	pop	{r4, r5, r6, sl, fp, pc}
   18690:	movw	r1, #25240	; 0x6298
   18694:	cmp	r0, #0
   18698:	movt	r1, #4
   1869c:	movne	r1, r0
   186a0:	ldr	r0, [r1]
   186a4:	bx	lr
   186a8:	movw	r2, #25240	; 0x6298
   186ac:	cmp	r0, #0
   186b0:	movt	r2, #4
   186b4:	movne	r2, r0
   186b8:	str	r1, [r2]
   186bc:	bx	lr
   186c0:	movw	r3, #25240	; 0x6298
   186c4:	cmp	r0, #0
   186c8:	and	r2, r2, #1
   186cc:	movt	r3, #4
   186d0:	movne	r3, r0
   186d4:	ubfx	r0, r1, #5, #3
   186d8:	and	r1, r1, #31
   186dc:	add	ip, r3, r0, lsl #2
   186e0:	mov	r0, #1
   186e4:	ldr	r3, [ip, #8]
   186e8:	and	r0, r0, r3, lsr r1
   186ec:	eor	r2, r0, r2
   186f0:	eor	r1, r3, r2, lsl r1
   186f4:	str	r1, [ip, #8]
   186f8:	bx	lr
   186fc:	movw	r2, #25240	; 0x6298
   18700:	cmp	r0, #0
   18704:	movt	r2, #4
   18708:	movne	r2, r0
   1870c:	ldr	r0, [r2, #4]
   18710:	str	r1, [r2, #4]
   18714:	bx	lr
   18718:	push	{fp, lr}
   1871c:	mov	fp, sp
   18720:	movw	r3, #25240	; 0x6298
   18724:	cmp	r0, #0
   18728:	movt	r3, #4
   1872c:	movne	r3, r0
   18730:	cmp	r1, #0
   18734:	mov	r0, #10
   18738:	cmpne	r2, #0
   1873c:	str	r0, [r3]
   18740:	bne	18748 <__assert_fail@plt+0x6a9c>
   18744:	bl	11c70 <abort@plt>
   18748:	str	r1, [r3, #40]	; 0x28
   1874c:	str	r2, [r3, #44]	; 0x2c
   18750:	pop	{fp, pc}
   18754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18758:	add	fp, sp, #28
   1875c:	sub	sp, sp, #20
   18760:	mov	r7, r0
   18764:	ldr	r0, [fp, #8]
   18768:	movw	r5, #25240	; 0x6298
   1876c:	mov	r8, r3
   18770:	mov	r9, r2
   18774:	mov	sl, r1
   18778:	movt	r5, #4
   1877c:	cmp	r0, #0
   18780:	movne	r5, r0
   18784:	bl	11af0 <__errno_location@plt>
   18788:	ldr	r2, [r5, #40]	; 0x28
   1878c:	ldr	r3, [r5, #44]	; 0x2c
   18790:	mov	r4, r0
   18794:	ldm	r5, {r0, r1}
   18798:	add	r5, r5, #8
   1879c:	ldr	r6, [r4]
   187a0:	stm	sp, {r0, r1, r5}
   187a4:	mov	r0, r7
   187a8:	mov	r1, sl
   187ac:	str	r2, [sp, #12]
   187b0:	str	r3, [sp, #16]
   187b4:	mov	r2, r9
   187b8:	mov	r3, r8
   187bc:	bl	187cc <__assert_fail@plt+0x6b20>
   187c0:	str	r6, [r4]
   187c4:	sub	sp, fp, #28
   187c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187d0:	add	fp, sp, #28
   187d4:	sub	sp, sp, #156	; 0x9c
   187d8:	str	r0, [fp, #-84]	; 0xffffffac
   187dc:	add	r0, r2, #1
   187e0:	mov	r6, r1
   187e4:	mov	r7, r3
   187e8:	str	r2, [fp, #-80]	; 0xffffffb0
   187ec:	str	r0, [sp, #80]	; 0x50
   187f0:	ldr	r0, [fp, #12]
   187f4:	and	r1, r0, #1
   187f8:	str	r1, [sp, #36]	; 0x24
   187fc:	and	r1, r0, #4
   18800:	str	r1, [sp, #32]
   18804:	ubfx	r8, r0, #1, #1
   18808:	bl	119ac <__ctype_get_mb_cur_max@plt>
   1880c:	str	r0, [sp, #40]	; 0x28
   18810:	ldr	r0, [fp, #24]
   18814:	ldr	r4, [fp, #8]
   18818:	mov	r1, #0
   1881c:	str	r1, [fp, #-52]	; 0xffffffcc
   18820:	mov	r1, #0
   18824:	str	r1, [sp, #60]	; 0x3c
   18828:	mov	r1, #1
   1882c:	str	r1, [sp, #84]	; 0x54
   18830:	str	r0, [sp, #76]	; 0x4c
   18834:	ldr	r0, [fp, #20]
   18838:	str	r0, [sp, #72]	; 0x48
   1883c:	mov	r0, #0
   18840:	str	r0, [sp, #56]	; 0x38
   18844:	mov	r0, #0
   18848:	str	r0, [fp, #-88]	; 0xffffffa8
   1884c:	mov	r0, #0
   18850:	str	r0, [fp, #-72]	; 0xffffffb8
   18854:	mov	r0, #0
   18858:	cmp	r4, #10
   1885c:	bhi	19b78 <__assert_fail@plt+0x7ecc>
   18860:	add	r1, pc, #24
   18864:	ldr	ip, [fp, #-84]	; 0xffffffac
   18868:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1886c:	mov	r5, r6
   18870:	mov	r9, #0
   18874:	mov	r2, #1
   18878:	mov	r3, #0
   1887c:	ldr	pc, [r1, r4, lsl #2]
   18880:	andeq	r8, r1, r8, asr #18
   18884:	andeq	r8, r1, r4, lsl #19
   18888:	andeq	r8, r1, r8, asr r9
   1888c:	andeq	r8, r1, r0, asr #18
   18890:	andeq	r8, r1, r8, ror r9
   18894:	ldrdeq	r8, [r1], -ip
   18898:	andeq	r8, r1, r8, ror #18
   1889c:	andeq	r8, r1, r4, asr ip
   188a0:	andeq	r8, r1, ip, lsr #17
   188a4:	andeq	r8, r1, ip, lsr #17
   188a8:	andeq	r8, r1, r4, ror #21
   188ac:	movw	r6, #18570	; 0x488a
   188b0:	mov	r0, #0
   188b4:	mov	r2, #5
   188b8:	movt	r6, #3
   188bc:	mov	r1, r6
   188c0:	bl	11934 <dcgettext@plt>
   188c4:	cmp	r0, r6
   188c8:	str	r0, [sp, #72]	; 0x48
   188cc:	bne	18abc <__assert_fail@plt+0x6e10>
   188d0:	bl	32d5c <__assert_fail@plt+0x210b0>
   188d4:	ldrb	r1, [r0]
   188d8:	and	r1, r1, #223	; 0xdf
   188dc:	cmp	r1, #71	; 0x47
   188e0:	beq	18a3c <__assert_fail@plt+0x6d90>
   188e4:	cmp	r1, #85	; 0x55
   188e8:	bne	18aa0 <__assert_fail@plt+0x6df4>
   188ec:	ldrb	r1, [r0, #1]
   188f0:	and	r1, r1, #223	; 0xdf
   188f4:	cmp	r1, #84	; 0x54
   188f8:	bne	18aa0 <__assert_fail@plt+0x6df4>
   188fc:	ldrb	r1, [r0, #2]
   18900:	and	r1, r1, #223	; 0xdf
   18904:	cmp	r1, #70	; 0x46
   18908:	bne	18aa0 <__assert_fail@plt+0x6df4>
   1890c:	ldrb	r1, [r0, #3]
   18910:	cmp	r1, #45	; 0x2d
   18914:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18918:	ldrb	r1, [r0, #4]
   1891c:	cmp	r1, #56	; 0x38
   18920:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18924:	ldrb	r0, [r0, #5]
   18928:	cmp	r0, #0
   1892c:	movw	r0, #18572	; 0x488c
   18930:	movt	r0, #3
   18934:	str	r0, [sp, #72]	; 0x48
   18938:	bne	18aa0 <__assert_fail@plt+0x6df4>
   1893c:	b	18abc <__assert_fail@plt+0x6e10>
   18940:	mov	r0, #1
   18944:	b	18984 <__assert_fail@plt+0x6cd8>
   18948:	mov	r4, #0
   1894c:	mov	r9, #0
   18950:	mov	r2, r0
   18954:	b	189d4 <__assert_fail@plt+0x6d28>
   18958:	tst	r8, #1
   1895c:	bne	18984 <__assert_fail@plt+0x6cd8>
   18960:	mov	r2, r0
   18964:	b	189ac <__assert_fail@plt+0x6d00>
   18968:	mov	r0, #1
   1896c:	mov	r9, #0
   18970:	mov	r4, #5
   18974:	b	189f0 <__assert_fail@plt+0x6d44>
   18978:	mov	r2, #1
   1897c:	tst	r8, #1
   18980:	beq	189ac <__assert_fail@plt+0x6d00>
   18984:	mov	r1, #1
   18988:	mov	r9, #0
   1898c:	mov	r4, #2
   18990:	mov	r2, r0
   18994:	mov	r3, #1
   18998:	str	r1, [fp, #-72]	; 0xffffffb8
   1899c:	movw	r1, #15801	; 0x3db9
   189a0:	movt	r1, #3
   189a4:	str	r1, [fp, #-88]	; 0xffffffa8
   189a8:	b	18c54 <__assert_fail@plt+0x6fa8>
   189ac:	cmp	r5, #0
   189b0:	mov	r9, #1
   189b4:	mov	r4, #2
   189b8:	movne	r0, #39	; 0x27
   189bc:	strbne	r0, [ip]
   189c0:	movw	r0, #15801	; 0x3db9
   189c4:	movt	r0, #3
   189c8:	str	r0, [fp, #-88]	; 0xffffffa8
   189cc:	mov	r0, #1
   189d0:	str	r0, [fp, #-72]	; 0xffffffb8
   189d4:	mov	r3, #0
   189d8:	b	18c54 <__assert_fail@plt+0x6fa8>
   189dc:	mov	r4, #5
   189e0:	tst	r8, #1
   189e4:	beq	18a0c <__assert_fail@plt+0x6d60>
   189e8:	mov	r0, #1
   189ec:	mov	r9, #0
   189f0:	str	r0, [fp, #-72]	; 0xffffffb8
   189f4:	movw	r0, #18568	; 0x4888
   189f8:	mov	r2, #1
   189fc:	mov	r3, #1
   18a00:	movt	r0, #3
   18a04:	str	r0, [fp, #-88]	; 0xffffffa8
   18a08:	b	18c54 <__assert_fail@plt+0x6fa8>
   18a0c:	cmp	r5, #0
   18a10:	mov	r3, #0
   18a14:	mov	r9, #1
   18a18:	mov	r2, #1
   18a1c:	movne	r0, #34	; 0x22
   18a20:	strbne	r0, [ip]
   18a24:	movw	r0, #18568	; 0x4888
   18a28:	movt	r0, #3
   18a2c:	str	r0, [fp, #-88]	; 0xffffffa8
   18a30:	mov	r0, #1
   18a34:	str	r0, [fp, #-72]	; 0xffffffb8
   18a38:	b	18c54 <__assert_fail@plt+0x6fa8>
   18a3c:	ldrb	r1, [r0, #1]
   18a40:	and	r1, r1, #223	; 0xdf
   18a44:	cmp	r1, #66	; 0x42
   18a48:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18a4c:	ldrb	r1, [r0, #2]
   18a50:	cmp	r1, #49	; 0x31
   18a54:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18a58:	ldrb	r1, [r0, #3]
   18a5c:	cmp	r1, #56	; 0x38
   18a60:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18a64:	ldrb	r1, [r0, #4]
   18a68:	cmp	r1, #48	; 0x30
   18a6c:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18a70:	ldrb	r1, [r0, #5]
   18a74:	cmp	r1, #51	; 0x33
   18a78:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18a7c:	ldrb	r1, [r0, #6]
   18a80:	cmp	r1, #48	; 0x30
   18a84:	bne	18aa0 <__assert_fail@plt+0x6df4>
   18a88:	ldrb	r0, [r0, #7]
   18a8c:	cmp	r0, #0
   18a90:	movw	r0, #18580	; 0x4894
   18a94:	movt	r0, #3
   18a98:	str	r0, [sp, #72]	; 0x48
   18a9c:	beq	18abc <__assert_fail@plt+0x6e10>
   18aa0:	movw	r1, #18568	; 0x4888
   18aa4:	movw	r0, #15801	; 0x3db9
   18aa8:	cmp	r4, #9
   18aac:	movt	r1, #3
   18ab0:	movt	r0, #3
   18ab4:	moveq	r0, r1
   18ab8:	str	r0, [sp, #72]	; 0x48
   18abc:	movw	r6, #15801	; 0x3db9
   18ac0:	mov	r0, #0
   18ac4:	mov	r2, #5
   18ac8:	movt	r6, #3
   18acc:	mov	r1, r6
   18ad0:	bl	11934 <dcgettext@plt>
   18ad4:	cmp	r0, r6
   18ad8:	str	r0, [sp, #76]	; 0x4c
   18adc:	beq	18b28 <__assert_fail@plt+0x6e7c>
   18ae0:	ldr	ip, [fp, #-84]	; 0xffffffac
   18ae4:	mov	r9, #0
   18ae8:	tst	r8, #1
   18aec:	bne	18c30 <__assert_fail@plt+0x6f84>
   18af0:	ldr	r0, [sp, #72]	; 0x48
   18af4:	ldrb	r0, [r0]
   18af8:	cmp	r0, #0
   18afc:	beq	18c30 <__assert_fail@plt+0x6f84>
   18b00:	ldr	r1, [sp, #72]	; 0x48
   18b04:	mov	r9, #0
   18b08:	add	r1, r1, #1
   18b0c:	cmp	r9, r5
   18b10:	strbcc	r0, [ip, r9]
   18b14:	ldrb	r0, [r1, r9]
   18b18:	add	r9, r9, #1
   18b1c:	cmp	r0, #0
   18b20:	bne	18b0c <__assert_fail@plt+0x6e60>
   18b24:	b	18c30 <__assert_fail@plt+0x6f84>
   18b28:	bl	32d5c <__assert_fail@plt+0x210b0>
   18b2c:	ldrb	r1, [r0]
   18b30:	and	r1, r1, #223	; 0xdf
   18b34:	cmp	r1, #71	; 0x47
   18b38:	beq	18ba8 <__assert_fail@plt+0x6efc>
   18b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18b40:	cmp	r1, #85	; 0x55
   18b44:	bne	18c04 <__assert_fail@plt+0x6f58>
   18b48:	ldrb	r1, [r0, #1]
   18b4c:	and	r1, r1, #223	; 0xdf
   18b50:	cmp	r1, #84	; 0x54
   18b54:	bne	18c04 <__assert_fail@plt+0x6f58>
   18b58:	ldrb	r1, [r0, #2]
   18b5c:	and	r1, r1, #223	; 0xdf
   18b60:	cmp	r1, #70	; 0x46
   18b64:	bne	18c04 <__assert_fail@plt+0x6f58>
   18b68:	ldrb	r1, [r0, #3]
   18b6c:	cmp	r1, #45	; 0x2d
   18b70:	bne	18c04 <__assert_fail@plt+0x6f58>
   18b74:	ldrb	r1, [r0, #4]
   18b78:	cmp	r1, #56	; 0x38
   18b7c:	bne	18c04 <__assert_fail@plt+0x6f58>
   18b80:	ldrb	r0, [r0, #5]
   18b84:	cmp	r0, #0
   18b88:	bne	18c04 <__assert_fail@plt+0x6f58>
   18b8c:	movw	r0, #18576	; 0x4890
   18b90:	movt	r0, #3
   18b94:	str	r0, [sp, #76]	; 0x4c
   18b98:	mov	r9, #0
   18b9c:	tst	r8, #1
   18ba0:	beq	18af0 <__assert_fail@plt+0x6e44>
   18ba4:	b	18c30 <__assert_fail@plt+0x6f84>
   18ba8:	ldrb	r1, [r0, #1]
   18bac:	ldr	ip, [fp, #-84]	; 0xffffffac
   18bb0:	and	r1, r1, #223	; 0xdf
   18bb4:	cmp	r1, #66	; 0x42
   18bb8:	bne	18c04 <__assert_fail@plt+0x6f58>
   18bbc:	ldrb	r1, [r0, #2]
   18bc0:	cmp	r1, #49	; 0x31
   18bc4:	bne	18c04 <__assert_fail@plt+0x6f58>
   18bc8:	ldrb	r1, [r0, #3]
   18bcc:	cmp	r1, #56	; 0x38
   18bd0:	bne	18c04 <__assert_fail@plt+0x6f58>
   18bd4:	ldrb	r1, [r0, #4]
   18bd8:	cmp	r1, #48	; 0x30
   18bdc:	bne	18c04 <__assert_fail@plt+0x6f58>
   18be0:	ldrb	r1, [r0, #5]
   18be4:	cmp	r1, #51	; 0x33
   18be8:	bne	18c04 <__assert_fail@plt+0x6f58>
   18bec:	ldrb	r1, [r0, #6]
   18bf0:	cmp	r1, #48	; 0x30
   18bf4:	bne	18c04 <__assert_fail@plt+0x6f58>
   18bf8:	ldrb	r0, [r0, #7]
   18bfc:	cmp	r0, #0
   18c00:	beq	19a18 <__assert_fail@plt+0x7d6c>
   18c04:	movw	r0, #15801	; 0x3db9
   18c08:	cmp	r4, #9
   18c0c:	movt	r0, #3
   18c10:	mov	r1, r0
   18c14:	movw	r0, #18568	; 0x4888
   18c18:	movt	r0, #3
   18c1c:	moveq	r1, r0
   18c20:	str	r1, [sp, #76]	; 0x4c
   18c24:	mov	r9, #0
   18c28:	tst	r8, #1
   18c2c:	beq	18af0 <__assert_fail@plt+0x6e44>
   18c30:	ldr	r6, [sp, #76]	; 0x4c
   18c34:	mov	r0, r6
   18c38:	bl	11ac0 <strlen@plt>
   18c3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18c40:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18c44:	str	r0, [fp, #-72]	; 0xffffffb8
   18c48:	str	r6, [fp, #-88]	; 0xffffffa8
   18c4c:	mov	r2, #1
   18c50:	mov	r3, r8
   18c54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18c58:	str	r4, [fp, #-64]	; 0xffffffc0
   18c5c:	mov	sl, #0
   18c60:	str	r3, [fp, #-76]	; 0xffffffb4
   18c64:	str	r2, [sp, #88]	; 0x58
   18c68:	cmp	r0, #0
   18c6c:	movwne	r0, #1
   18c70:	and	r1, r0, r3
   18c74:	and	r1, r2, r1
   18c78:	str	r1, [sp, #48]	; 0x30
   18c7c:	sub	r1, r4, #2
   18c80:	clz	r1, r1
   18c84:	lsr	r1, r1, #5
   18c88:	and	r1, r1, r3
   18c8c:	str	r1, [sp, #44]	; 0x2c
   18c90:	subs	r1, r4, #2
   18c94:	eor	r4, r3, #1
   18c98:	movwne	r1, #1
   18c9c:	str	r4, [sp, #92]	; 0x5c
   18ca0:	orr	r4, r1, r4
   18ca4:	and	r1, r1, r2
   18ca8:	and	r0, r0, r1
   18cac:	str	r4, [sp, #64]	; 0x40
   18cb0:	ldr	r4, [sp, #84]	; 0x54
   18cb4:	str	r0, [fp, #-60]	; 0xffffffc4
   18cb8:	orr	r0, r1, r3
   18cbc:	ldr	r1, [fp, #16]
   18cc0:	eor	r0, r0, #1
   18cc4:	clz	r1, r1
   18cc8:	lsr	r1, r1, #5
   18ccc:	orr	r0, r1, r0
   18cd0:	str	r0, [fp, #-68]	; 0xffffffbc
   18cd4:	eor	r0, r2, #1
   18cd8:	str	r0, [sp, #52]	; 0x34
   18cdc:	cmn	r7, #1
   18ce0:	beq	18cf0 <__assert_fail@plt+0x7044>
   18ce4:	cmp	sl, r7
   18ce8:	bne	18cfc <__assert_fail@plt+0x7050>
   18cec:	b	19990 <__assert_fail@plt+0x7ce4>
   18cf0:	ldrb	r0, [lr, sl]
   18cf4:	cmp	r0, #0
   18cf8:	beq	19998 <__assert_fail@plt+0x7cec>
   18cfc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18d00:	cmp	r0, #0
   18d04:	beq	18d64 <__assert_fail@plt+0x70b8>
   18d08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18d0c:	mov	r6, r5
   18d10:	add	r5, sl, r0
   18d14:	cmp	r0, #2
   18d18:	bcc	18d84 <__assert_fail@plt+0x70d8>
   18d1c:	mov	r0, #0
   18d20:	cmn	r7, #1
   18d24:	str	r0, [fp, #-56]	; 0xffffffc8
   18d28:	bne	18d40 <__assert_fail@plt+0x7094>
   18d2c:	mov	r0, lr
   18d30:	bl	11ac0 <strlen@plt>
   18d34:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18d38:	ldr	ip, [fp, #-84]	; 0xffffffac
   18d3c:	mov	r7, r0
   18d40:	cmp	r5, r7
   18d44:	bls	18d94 <__assert_fail@plt+0x70e8>
   18d48:	mov	r0, #0
   18d4c:	mov	r5, r6
   18d50:	str	r0, [fp, #-48]	; 0xffffffd0
   18d54:	ldrb	r6, [lr, sl]
   18d58:	cmp	r6, #126	; 0x7e
   18d5c:	bls	18de4 <__assert_fail@plt+0x7138>
   18d60:	b	19340 <__assert_fail@plt+0x7694>
   18d64:	mov	r0, #0
   18d68:	str	r0, [fp, #-56]	; 0xffffffc8
   18d6c:	mov	r0, #0
   18d70:	str	r0, [fp, #-48]	; 0xffffffd0
   18d74:	ldrb	r6, [lr, sl]
   18d78:	cmp	r6, #126	; 0x7e
   18d7c:	bls	18de4 <__assert_fail@plt+0x7138>
   18d80:	b	19340 <__assert_fail@plt+0x7694>
   18d84:	mov	r0, #0
   18d88:	str	r0, [fp, #-56]	; 0xffffffc8
   18d8c:	cmp	r5, r7
   18d90:	bhi	18d48 <__assert_fail@plt+0x709c>
   18d94:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18d98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18d9c:	add	r0, lr, sl
   18da0:	bl	11aa8 <bcmp@plt>
   18da4:	ldr	r2, [sp, #92]	; 0x5c
   18da8:	cmp	r0, #0
   18dac:	mov	r1, r0
   18db0:	mov	r5, r6
   18db4:	movwne	r1, #1
   18db8:	orr	r1, r1, r2
   18dbc:	tst	r1, #1
   18dc0:	beq	19a58 <__assert_fail@plt+0x7dac>
   18dc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   18dc8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18dcc:	clz	r0, r0
   18dd0:	lsr	r0, r0, #5
   18dd4:	str	r0, [fp, #-48]	; 0xffffffd0
   18dd8:	ldrb	r6, [lr, sl]
   18ddc:	cmp	r6, #126	; 0x7e
   18de0:	bhi	19340 <__assert_fail@plt+0x7694>
   18de4:	add	r3, pc, #16
   18de8:	mov	r8, #1
   18dec:	mov	r2, #110	; 0x6e
   18df0:	mov	r0, #97	; 0x61
   18df4:	mov	r1, #0
   18df8:	ldr	pc, [r3, r6, lsl #2]
   18dfc:	strdeq	r9, [r1], -r8
   18e00:	andeq	r9, r1, r0, asr #6
   18e04:	andeq	r9, r1, r0, asr #6
   18e08:	andeq	r9, r1, r0, asr #6
   18e0c:	andeq	r9, r1, r0, asr #6
   18e10:	andeq	r9, r1, r0, asr #6
   18e14:	andeq	r9, r1, r0, asr #6
   18e18:	strdeq	r9, [r1], -r4
   18e1c:	ldrdeq	r9, [r1], -r8
   18e20:	ldrdeq	r9, [r1], -r0
   18e24:	andeq	r9, r1, r4, ror #1
   18e28:	andeq	r9, r1, r4, lsl r2
   18e2c:	andeq	r9, r1, r8, asr #1
   18e30:	andeq	r9, r1, r0, ror #1
   18e34:	andeq	r9, r1, r0, asr #6
   18e38:	andeq	r9, r1, r0, asr #6
   18e3c:	andeq	r9, r1, r0, asr #6
   18e40:	andeq	r9, r1, r0, asr #6
   18e44:	andeq	r9, r1, r0, asr #6
   18e48:	andeq	r9, r1, r0, asr #6
   18e4c:	andeq	r9, r1, r0, asr #6
   18e50:	andeq	r9, r1, r0, asr #6
   18e54:	andeq	r9, r1, r0, asr #6
   18e58:	andeq	r9, r1, r0, asr #6
   18e5c:	andeq	r9, r1, r0, asr #6
   18e60:	andeq	r9, r1, r0, asr #6
   18e64:	andeq	r9, r1, r0, asr #6
   18e68:	andeq	r9, r1, r0, asr #6
   18e6c:	andeq	r9, r1, r0, asr #6
   18e70:	andeq	r9, r1, r0, asr #6
   18e74:	andeq	r9, r1, r0, asr #6
   18e78:	andeq	r9, r1, r0, asr #6
   18e7c:	andeq	r9, r1, ip, rrx
   18e80:	andeq	r9, r1, r0, ror r0
   18e84:	andeq	r9, r1, r0, ror r0
   18e88:	andeq	r9, r1, r0, rrx
   18e8c:	andeq	r9, r1, r0, ror r0
   18e90:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e94:	andeq	r9, r1, r0, ror r0
   18e98:	andeq	r9, r1, ip, lsl r2
   18e9c:	andeq	r9, r1, r0, ror r0
   18ea0:	andeq	r9, r1, r0, ror r0
   18ea4:	andeq	r9, r1, r0, ror r0
   18ea8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ebc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ecc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18edc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee8:	andeq	r9, r1, r0, ror r0
   18eec:	andeq	r9, r1, r0, ror r0
   18ef0:	andeq	r9, r1, r0, ror r0
   18ef4:	andeq	r9, r1, r0, ror r0
   18ef8:	andeq	r9, r1, r0, ror #3
   18efc:	andeq	r9, r1, r0, asr #6
   18f00:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f08:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f0c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f10:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f14:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f18:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f1c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f20:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f24:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f28:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f2c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f30:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f34:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f38:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f3c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f40:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f44:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f48:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f4c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f50:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f54:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f58:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f5c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f60:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f64:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f68:	andeq	r9, r1, r0, ror r0
   18f6c:	andeq	r9, r1, r4, lsr #1
   18f70:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f74:	andeq	r9, r1, r0, ror r0
   18f78:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f7c:	andeq	r9, r1, r0, ror r0
   18f80:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f84:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f88:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f8c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f90:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f94:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f98:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18f9c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fa0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fa4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fa8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fb0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fb4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fb8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fbc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fc0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fc4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fc8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fcc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fd0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fd4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fd8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fdc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fe0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fe4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18fe8:	andeq	r9, r1, r8, lsr r0
   18fec:	andeq	r9, r1, r0, ror r0
   18ff0:	andeq	r9, r1, r8, lsr r0
   18ff4:	andeq	r9, r1, r0, rrx
   18ff8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ffc:	tst	r0, #1
   19000:	bne	192b8 <__assert_fail@plt+0x760c>
   19004:	ldr	r1, [fp, #16]
   19008:	ubfx	r0, r6, #5, #3
   1900c:	mov	r2, #1
   19010:	ldr	r0, [r1, r0, lsl #2]
   19014:	and	r1, r6, #31
   19018:	tst	r0, r2, lsl r1
   1901c:	beq	192b8 <__assert_fail@plt+0x760c>
   19020:	mov	r0, r6
   19024:	mov	r1, r8
   19028:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1902c:	tst	r2, #1
   19030:	beq	192d8 <__assert_fail@plt+0x762c>
   19034:	b	19a34 <__assert_fail@plt+0x7d88>
   19038:	cmp	r7, #1
   1903c:	beq	19060 <__assert_fail@plt+0x73b4>
   19040:	mov	r8, #0
   19044:	cmn	r7, #1
   19048:	bne	192a4 <__assert_fail@plt+0x75f8>
   1904c:	ldrb	r0, [lr, #1]
   19050:	cmp	r0, #0
   19054:	beq	19060 <__assert_fail@plt+0x73b4>
   19058:	mvn	r7, #0
   1905c:	b	192a4 <__assert_fail@plt+0x75f8>
   19060:	mov	r8, #0
   19064:	cmp	sl, #0
   19068:	bne	192a4 <__assert_fail@plt+0x75f8>
   1906c:	mov	r1, #1
   19070:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19074:	cmp	r0, #2
   19078:	bne	19090 <__assert_fail@plt+0x73e4>
   1907c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19080:	mov	r8, r1
   19084:	tst	r0, #1
   19088:	beq	18ff8 <__assert_fail@plt+0x734c>
   1908c:	b	19a34 <__assert_fail@plt+0x7d88>
   19090:	mov	r8, r1
   19094:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19098:	tst	r0, #1
   1909c:	beq	19004 <__assert_fail@plt+0x7358>
   190a0:	b	192b8 <__assert_fail@plt+0x760c>
   190a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   190a8:	cmp	r0, #2
   190ac:	bne	1936c <__assert_fail@plt+0x76c0>
   190b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   190b4:	tst	r0, #1
   190b8:	bne	19a34 <__assert_fail@plt+0x7d88>
   190bc:	mov	r0, #0
   190c0:	str	r0, [fp, #-56]	; 0xffffffc8
   190c4:	b	19384 <__assert_fail@plt+0x76d8>
   190c8:	mov	r0, #102	; 0x66
   190cc:	b	193f4 <__assert_fail@plt+0x7748>
   190d0:	mov	r2, #116	; 0x74
   190d4:	b	190e4 <__assert_fail@plt+0x7438>
   190d8:	mov	r0, #98	; 0x62
   190dc:	b	193f4 <__assert_fail@plt+0x7748>
   190e0:	mov	r2, #114	; 0x72
   190e4:	ldr	r0, [sp, #64]	; 0x40
   190e8:	tst	r0, #1
   190ec:	mov	r0, r2
   190f0:	bne	193f4 <__assert_fail@plt+0x7748>
   190f4:	b	19a34 <__assert_fail@plt+0x7d88>
   190f8:	ldr	r0, [sp, #88]	; 0x58
   190fc:	tst	r0, #1
   19100:	beq	19414 <__assert_fail@plt+0x7768>
   19104:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19108:	tst	r0, #1
   1910c:	bne	19b70 <__assert_fail@plt+0x7ec4>
   19110:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19114:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19118:	subs	r0, r0, #2
   1911c:	movwne	r0, #1
   19120:	orr	r0, r0, r1
   19124:	tst	r0, #1
   19128:	bne	19164 <__assert_fail@plt+0x74b8>
   1912c:	cmp	r9, r5
   19130:	movcc	r0, #39	; 0x27
   19134:	strbcc	r0, [ip, r9]
   19138:	add	r0, r9, #1
   1913c:	cmp	r0, r5
   19140:	movcc	r1, #36	; 0x24
   19144:	strbcc	r1, [ip, r0]
   19148:	add	r0, r9, #2
   1914c:	add	r9, r9, #3
   19150:	cmp	r0, r5
   19154:	movcc	r1, #39	; 0x27
   19158:	strbcc	r1, [ip, r0]
   1915c:	mov	r0, #1
   19160:	str	r0, [fp, #-52]	; 0xffffffcc
   19164:	mov	r1, #1
   19168:	cmp	r9, r5
   1916c:	mov	r8, #0
   19170:	mov	r6, #48	; 0x30
   19174:	str	r1, [fp, #-56]	; 0xffffffc8
   19178:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1917c:	movcc	r0, #92	; 0x5c
   19180:	strbcc	r0, [ip, r9]
   19184:	add	r0, r9, #1
   19188:	cmp	r1, #2
   1918c:	beq	195e0 <__assert_fail@plt+0x7934>
   19190:	add	r1, sl, #1
   19194:	cmp	r1, r7
   19198:	bcs	195e0 <__assert_fail@plt+0x7934>
   1919c:	ldrb	r1, [lr, r1]
   191a0:	sub	r1, r1, #48	; 0x30
   191a4:	uxtb	r1, r1
   191a8:	cmp	r1, #9
   191ac:	bhi	195e0 <__assert_fail@plt+0x7934>
   191b0:	cmp	r0, r5
   191b4:	movcc	r1, #48	; 0x30
   191b8:	strbcc	r1, [ip, r0]
   191bc:	add	r0, r9, #2
   191c0:	add	r9, r9, #3
   191c4:	cmp	r0, r5
   191c8:	movcc	r1, #48	; 0x30
   191cc:	strbcc	r1, [ip, r0]
   191d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   191d4:	tst	r0, #1
   191d8:	beq	19004 <__assert_fail@plt+0x7358>
   191dc:	b	192b8 <__assert_fail@plt+0x760c>
   191e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   191e4:	mov	r6, #63	; 0x3f
   191e8:	cmp	r0, #5
   191ec:	beq	195f4 <__assert_fail@plt+0x7948>
   191f0:	mov	r1, #0
   191f4:	cmp	r0, #2
   191f8:	str	r1, [fp, #-56]	; 0xffffffc8
   191fc:	bne	196bc <__assert_fail@plt+0x7a10>
   19200:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19204:	mov	r8, #0
   19208:	tst	r0, #1
   1920c:	beq	18ff8 <__assert_fail@plt+0x734c>
   19210:	b	19a34 <__assert_fail@plt+0x7d88>
   19214:	mov	r0, #118	; 0x76
   19218:	b	193f4 <__assert_fail@plt+0x7748>
   1921c:	mov	r0, #1
   19220:	mov	r6, #39	; 0x27
   19224:	str	r0, [sp, #60]	; 0x3c
   19228:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1922c:	cmp	r0, #2
   19230:	bne	19434 <__assert_fail@plt+0x7788>
   19234:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19238:	tst	r0, #1
   1923c:	bne	19a34 <__assert_fail@plt+0x7d88>
   19240:	ldr	r2, [sp, #56]	; 0x38
   19244:	clz	r1, r5
   19248:	mov	r8, #1
   1924c:	lsr	r1, r1, #5
   19250:	cmp	r2, #0
   19254:	mov	r0, r2
   19258:	movwne	r0, #1
   1925c:	orrs	r0, r0, r1
   19260:	moveq	r2, r5
   19264:	moveq	r5, r0
   19268:	cmp	r9, r5
   1926c:	str	r2, [sp, #56]	; 0x38
   19270:	movcc	r0, #39	; 0x27
   19274:	strbcc	r0, [ip, r9]
   19278:	add	r0, r9, #1
   1927c:	cmp	r0, r5
   19280:	movcc	r1, #92	; 0x5c
   19284:	strbcc	r1, [ip, r0]
   19288:	add	r0, r9, #2
   1928c:	add	r9, r9, #3
   19290:	cmp	r0, r5
   19294:	movcc	r1, #39	; 0x27
   19298:	strbcc	r1, [ip, r0]
   1929c:	mov	r0, #0
   192a0:	str	r0, [fp, #-52]	; 0xffffffcc
   192a4:	mov	r0, #0
   192a8:	str	r0, [fp, #-56]	; 0xffffffc8
   192ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   192b0:	tst	r0, #1
   192b4:	beq	19004 <__assert_fail@plt+0x7358>
   192b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   192bc:	mov	r1, r8
   192c0:	cmp	r0, #0
   192c4:	mov	r0, r6
   192c8:	beq	1938c <__assert_fail@plt+0x76e0>
   192cc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   192d0:	tst	r2, #1
   192d4:	bne	19a34 <__assert_fail@plt+0x7d88>
   192d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   192dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   192e0:	subs	r2, r2, #2
   192e4:	movwne	r2, #1
   192e8:	orr	r2, r2, r3
   192ec:	tst	r2, #1
   192f0:	bne	1932c <__assert_fail@plt+0x7680>
   192f4:	cmp	r9, r5
   192f8:	movcc	r2, #39	; 0x27
   192fc:	strbcc	r2, [ip, r9]
   19300:	add	r2, r9, #1
   19304:	cmp	r2, r5
   19308:	movcc	r3, #36	; 0x24
   1930c:	strbcc	r3, [ip, r2]
   19310:	add	r2, r9, #2
   19314:	add	r9, r9, #3
   19318:	cmp	r2, r5
   1931c:	movcc	r3, #39	; 0x27
   19320:	strbcc	r3, [ip, r2]
   19324:	mov	r2, #1
   19328:	str	r2, [fp, #-52]	; 0xffffffcc
   1932c:	cmp	r9, r5
   19330:	movcc	r2, #92	; 0x5c
   19334:	strbcc	r2, [ip, r9]
   19338:	add	r9, r9, #1
   1933c:	b	193d4 <__assert_fail@plt+0x7728>
   19340:	ldr	r0, [sp, #40]	; 0x28
   19344:	cmp	r0, #1
   19348:	bne	19448 <__assert_fail@plt+0x779c>
   1934c:	bl	11a84 <__ctype_b_loc@plt>
   19350:	ldr	r0, [r0]
   19354:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19358:	mov	r1, #1
   1935c:	add	r0, r0, r6, lsl #1
   19360:	ldrb	r0, [r0, #1]
   19364:	ubfx	r8, r0, #6, #1
   19368:	b	197a0 <__assert_fail@plt+0x7af4>
   1936c:	ldr	r1, [sp, #48]	; 0x30
   19370:	mov	r0, #0
   19374:	str	r0, [fp, #-56]	; 0xffffffc8
   19378:	mov	r0, #92	; 0x5c
   1937c:	cmp	r1, #0
   19380:	beq	193f4 <__assert_fail@plt+0x7748>
   19384:	mov	r6, #92	; 0x5c
   19388:	mov	r8, #0
   1938c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19390:	cmp	r0, #0
   19394:	bne	193cc <__assert_fail@plt+0x7720>
   19398:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1939c:	tst	r0, #1
   193a0:	beq	193cc <__assert_fail@plt+0x7720>
   193a4:	cmp	r9, r5
   193a8:	movcc	r0, #39	; 0x27
   193ac:	strbcc	r0, [ip, r9]
   193b0:	add	r0, r9, #1
   193b4:	add	r9, r9, #2
   193b8:	cmp	r0, r5
   193bc:	movcc	r1, #39	; 0x27
   193c0:	strbcc	r1, [ip, r0]
   193c4:	mov	r0, #0
   193c8:	str	r0, [fp, #-52]	; 0xffffffcc
   193cc:	mov	r1, r8
   193d0:	mov	r0, r6
   193d4:	cmp	r9, r5
   193d8:	and	r4, r4, r1
   193dc:	strbcc	r0, [ip, r9]
   193e0:	add	r9, r9, #1
   193e4:	add	sl, sl, #1
   193e8:	cmn	r7, #1
   193ec:	bne	18ce4 <__assert_fail@plt+0x7038>
   193f0:	b	18cf0 <__assert_fail@plt+0x7044>
   193f4:	mov	r1, #0
   193f8:	mov	r8, #0
   193fc:	str	r1, [fp, #-56]	; 0xffffffc8
   19400:	ldr	r1, [sp, #88]	; 0x58
   19404:	tst	r1, #1
   19408:	mov	r1, #0
   1940c:	beq	18ff8 <__assert_fail@plt+0x734c>
   19410:	b	192cc <__assert_fail@plt+0x7620>
   19414:	ldr	r0, [sp, #36]	; 0x24
   19418:	mov	r6, #0
   1941c:	mov	r8, #0
   19420:	cmp	r0, #0
   19424:	mov	r0, #0
   19428:	str	r0, [fp, #-56]	; 0xffffffc8
   1942c:	bne	193e4 <__assert_fail@plt+0x7738>
   19430:	b	18ff8 <__assert_fail@plt+0x734c>
   19434:	mov	r8, #1
   19438:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1943c:	tst	r0, #1
   19440:	beq	19004 <__assert_fail@plt+0x7358>
   19444:	b	192b8 <__assert_fail@plt+0x760c>
   19448:	mov	r0, #0
   1944c:	cmn	r7, #1
   19450:	str	r0, [fp, #-36]	; 0xffffffdc
   19454:	str	r0, [fp, #-40]	; 0xffffffd8
   19458:	bne	1946c <__assert_fail@plt+0x77c0>
   1945c:	mov	r0, lr
   19460:	bl	11ac0 <strlen@plt>
   19464:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19468:	mov	r7, r0
   1946c:	ldr	r0, [sp, #44]	; 0x2c
   19470:	str	r4, [sp, #84]	; 0x54
   19474:	str	r5, [sp, #28]
   19478:	cmp	r0, #0
   1947c:	beq	196d0 <__assert_fail@plt+0x7a24>
   19480:	ldr	r0, [sp, #80]	; 0x50
   19484:	mov	r8, #1
   19488:	mov	r5, #0
   1948c:	add	r0, r0, sl
   19490:	str	r0, [sp, #24]
   19494:	sub	r0, fp, #40	; 0x28
   19498:	mov	r3, r0
   1949c:	b	194d8 <__assert_fail@plt+0x782c>
   194a0:	ldr	r5, [sp, #68]	; 0x44
   194a4:	add	r5, r0, r5
   194a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   194ac:	bl	11970 <iswprint@plt>
   194b0:	cmp	r0, #0
   194b4:	sub	r4, fp, #40	; 0x28
   194b8:	movwne	r0, #1
   194bc:	and	r8, r8, r0
   194c0:	mov	r0, r4
   194c4:	bl	1191c <mbsinit@plt>
   194c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   194cc:	mov	r3, r4
   194d0:	cmp	r0, #0
   194d4:	bne	19794 <__assert_fail@plt+0x7ae8>
   194d8:	str	r5, [sp, #68]	; 0x44
   194dc:	add	r5, r5, sl
   194e0:	sub	r0, fp, #44	; 0x2c
   194e4:	add	r1, lr, r5
   194e8:	sub	r2, r7, r5
   194ec:	bl	1c324 <__assert_fail@plt+0xa678>
   194f0:	cmn	r0, #2
   194f4:	beq	19754 <__assert_fail@plt+0x7aa8>
   194f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   194fc:	cmn	r0, #1
   19500:	beq	19748 <__assert_fail@plt+0x7a9c>
   19504:	cmp	r0, #0
   19508:	beq	1974c <__assert_fail@plt+0x7aa0>
   1950c:	cmp	r0, #2
   19510:	bcc	194a0 <__assert_fail@plt+0x77f4>
   19514:	ldr	r1, [sp, #68]	; 0x44
   19518:	ldr	r2, [sp, #24]
   1951c:	add	r1, r2, r1
   19520:	sub	r2, r0, #1
   19524:	ldrb	r3, [r1]
   19528:	sub	r3, r3, #91	; 0x5b
   1952c:	cmp	r3, #33	; 0x21
   19530:	bls	19550 <__assert_fail@plt+0x78a4>
   19534:	add	r1, r1, #1
   19538:	subs	r2, r2, #1
   1953c:	beq	194a0 <__assert_fail@plt+0x77f4>
   19540:	ldrb	r3, [r1]
   19544:	sub	r3, r3, #91	; 0x5b
   19548:	cmp	r3, #33	; 0x21
   1954c:	bhi	19534 <__assert_fail@plt+0x7888>
   19550:	add	r5, pc, #0
   19554:	ldr	pc, [r5, r3, lsl #2]
   19558:	andeq	r9, r1, ip, ror #20
   1955c:	andeq	r9, r1, ip, ror #20
   19560:	andeq	r9, r1, r4, lsr r5
   19564:	andeq	r9, r1, ip, ror #20
   19568:	andeq	r9, r1, r4, lsr r5
   1956c:	andeq	r9, r1, ip, ror #20
   19570:	andeq	r9, r1, r4, lsr r5
   19574:	andeq	r9, r1, r4, lsr r5
   19578:	andeq	r9, r1, r4, lsr r5
   1957c:	andeq	r9, r1, r4, lsr r5
   19580:	andeq	r9, r1, r4, lsr r5
   19584:	andeq	r9, r1, r4, lsr r5
   19588:	andeq	r9, r1, r4, lsr r5
   1958c:	andeq	r9, r1, r4, lsr r5
   19590:	andeq	r9, r1, r4, lsr r5
   19594:	andeq	r9, r1, r4, lsr r5
   19598:	andeq	r9, r1, r4, lsr r5
   1959c:	andeq	r9, r1, r4, lsr r5
   195a0:	andeq	r9, r1, r4, lsr r5
   195a4:	andeq	r9, r1, r4, lsr r5
   195a8:	andeq	r9, r1, r4, lsr r5
   195ac:	andeq	r9, r1, r4, lsr r5
   195b0:	andeq	r9, r1, r4, lsr r5
   195b4:	andeq	r9, r1, r4, lsr r5
   195b8:	andeq	r9, r1, r4, lsr r5
   195bc:	andeq	r9, r1, r4, lsr r5
   195c0:	andeq	r9, r1, r4, lsr r5
   195c4:	andeq	r9, r1, r4, lsr r5
   195c8:	andeq	r9, r1, r4, lsr r5
   195cc:	andeq	r9, r1, r4, lsr r5
   195d0:	andeq	r9, r1, r4, lsr r5
   195d4:	andeq	r9, r1, r4, lsr r5
   195d8:	andeq	r9, r1, r4, lsr r5
   195dc:	andeq	r9, r1, ip, ror #20
   195e0:	mov	r9, r0
   195e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   195e8:	tst	r0, #1
   195ec:	beq	19004 <__assert_fail@plt+0x7358>
   195f0:	b	192b8 <__assert_fail@plt+0x760c>
   195f4:	mov	r0, #0
   195f8:	str	r0, [fp, #-56]	; 0xffffffc8
   195fc:	ldr	r0, [sp, #32]
   19600:	cmp	r0, #0
   19604:	beq	196bc <__assert_fail@plt+0x7a10>
   19608:	add	r0, sl, #2
   1960c:	mov	r1, r7
   19610:	cmp	r0, r7
   19614:	bcs	196bc <__assert_fail@plt+0x7a10>
   19618:	add	r1, sl, lr
   1961c:	ldrb	r1, [r1, #1]
   19620:	cmp	r1, #63	; 0x3f
   19624:	bne	196bc <__assert_fail@plt+0x7a10>
   19628:	ldrb	r8, [lr, r0]
   1962c:	sub	r2, r8, #33	; 0x21
   19630:	cmp	r2, #29
   19634:	bhi	196bc <__assert_fail@plt+0x7a10>
   19638:	mov	r1, r4
   1963c:	movw	r4, #20929	; 0x51c1
   19640:	mov	r3, #1
   19644:	movt	r4, #14336	; 0x3800
   19648:	tst	r4, r3, lsl r2
   1964c:	beq	19978 <__assert_fail@plt+0x7ccc>
   19650:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19654:	tst	r2, #1
   19658:	bne	19a34 <__assert_fail@plt+0x7d88>
   1965c:	cmp	r9, r5
   19660:	mov	r6, r8
   19664:	mov	r4, r1
   19668:	mov	sl, r0
   1966c:	mov	r8, #0
   19670:	movcc	r2, #63	; 0x3f
   19674:	strbcc	r2, [ip, r9]
   19678:	add	r2, r9, #1
   1967c:	cmp	r2, r5
   19680:	movcc	r3, #34	; 0x22
   19684:	strbcc	r3, [ip, r2]
   19688:	add	r2, r9, #2
   1968c:	cmp	r2, r5
   19690:	movcc	r3, #34	; 0x22
   19694:	strbcc	r3, [ip, r2]
   19698:	add	r2, r9, #3
   1969c:	add	r9, r9, #4
   196a0:	cmp	r2, r5
   196a4:	movcc	r3, #63	; 0x3f
   196a8:	strbcc	r3, [ip, r2]
   196ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   196b0:	tst	r0, #1
   196b4:	beq	19004 <__assert_fail@plt+0x7358>
   196b8:	b	192b8 <__assert_fail@plt+0x760c>
   196bc:	mov	r8, #0
   196c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   196c4:	tst	r0, #1
   196c8:	beq	19004 <__assert_fail@plt+0x7358>
   196cc:	b	192b8 <__assert_fail@plt+0x760c>
   196d0:	mov	r8, #1
   196d4:	mov	r5, #0
   196d8:	sub	r4, fp, #40	; 0x28
   196dc:	str	r5, [sp, #68]	; 0x44
   196e0:	add	r5, r5, sl
   196e4:	sub	r0, fp, #44	; 0x2c
   196e8:	mov	r3, r4
   196ec:	add	r1, lr, r5
   196f0:	sub	r2, r7, r5
   196f4:	bl	1c324 <__assert_fail@plt+0xa678>
   196f8:	cmn	r0, #2
   196fc:	beq	19754 <__assert_fail@plt+0x7aa8>
   19700:	cmn	r0, #1
   19704:	beq	19748 <__assert_fail@plt+0x7a9c>
   19708:	ldr	r5, [sp, #68]	; 0x44
   1970c:	cmp	r0, #0
   19710:	beq	19790 <__assert_fail@plt+0x7ae4>
   19714:	add	r5, r0, r5
   19718:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1971c:	bl	11970 <iswprint@plt>
   19720:	cmp	r0, #0
   19724:	sub	r4, fp, #40	; 0x28
   19728:	movwne	r0, #1
   1972c:	and	r8, r8, r0
   19730:	mov	r0, r4
   19734:	bl	1191c <mbsinit@plt>
   19738:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1973c:	cmp	r0, #0
   19740:	beq	196dc <__assert_fail@plt+0x7a30>
   19744:	b	19794 <__assert_fail@plt+0x7ae8>
   19748:	mov	r8, #0
   1974c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19750:	b	19788 <__assert_fail@plt+0x7adc>
   19754:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19758:	mov	r8, #0
   1975c:	cmp	r5, r7
   19760:	bcs	19788 <__assert_fail@plt+0x7adc>
   19764:	ldrb	r0, [lr, r5]
   19768:	cmp	r0, #0
   1976c:	beq	19788 <__assert_fail@plt+0x7adc>
   19770:	ldr	r0, [sp, #68]	; 0x44
   19774:	add	r0, r0, #1
   19778:	add	r5, r0, sl
   1977c:	str	r0, [sp, #68]	; 0x44
   19780:	cmp	r5, r7
   19784:	bcc	19764 <__assert_fail@plt+0x7ab8>
   19788:	ldr	r5, [sp, #68]	; 0x44
   1978c:	b	19794 <__assert_fail@plt+0x7ae8>
   19790:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19794:	mov	r1, r5
   19798:	ldr	r5, [sp, #28]
   1979c:	ldr	r4, [sp, #84]	; 0x54
   197a0:	ldr	r0, [sp, #52]	; 0x34
   197a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   197a8:	cmp	r1, #1
   197ac:	orr	r2, r8, r0
   197b0:	mov	r0, r1
   197b4:	bhi	197c0 <__assert_fail@plt+0x7b14>
   197b8:	tst	r2, #1
   197bc:	bne	18ff8 <__assert_fail@plt+0x734c>
   197c0:	add	r0, r0, sl
   197c4:	str	r2, [sp, #84]	; 0x54
   197c8:	str	r0, [fp, #-56]	; 0xffffffc8
   197cc:	mov	r0, #0
   197d0:	tst	r2, #1
   197d4:	bne	198b4 <__assert_fail@plt+0x7c08>
   197d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   197dc:	tst	r1, #1
   197e0:	bne	19a34 <__assert_fail@plt+0x7d88>
   197e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   197e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   197ec:	subs	r2, r1, #2
   197f0:	movwne	r2, #1
   197f4:	orr	r2, r2, r0
   197f8:	tst	r2, #1
   197fc:	bne	19838 <__assert_fail@plt+0x7b8c>
   19800:	cmp	r9, r5
   19804:	add	r2, r9, #1
   19808:	mov	r0, #1
   1980c:	movcc	r1, #39	; 0x27
   19810:	str	r0, [fp, #-52]	; 0xffffffcc
   19814:	strbcc	r1, [ip, r9]
   19818:	cmp	r2, r5
   1981c:	movcc	r1, #36	; 0x24
   19820:	strbcc	r1, [ip, r2]
   19824:	add	r2, r9, #2
   19828:	add	r9, r9, #3
   1982c:	cmp	r2, r5
   19830:	movcc	r1, #39	; 0x27
   19834:	strbcc	r1, [ip, r2]
   19838:	cmp	r9, r5
   1983c:	add	r2, r9, #1
   19840:	movcc	r1, #92	; 0x5c
   19844:	strbcc	r1, [ip, r9]
   19848:	cmp	r2, r5
   1984c:	bcs	19860 <__assert_fail@plt+0x7bb4>
   19850:	uxtb	r3, r6
   19854:	mov	r1, #48	; 0x30
   19858:	orr	r3, r1, r3, lsr #6
   1985c:	strb	r3, [ip, r2]
   19860:	add	r2, r9, #2
   19864:	add	r9, r9, #3
   19868:	cmp	r2, r5
   1986c:	lsrcc	r3, r6, #3
   19870:	movcc	r1, #6
   19874:	bficc	r3, r1, #3, #29
   19878:	mov	r1, #6
   1987c:	bfi	r6, r1, #3, #29
   19880:	strbcc	r3, [ip, r2]
   19884:	mov	r2, #1
   19888:	b	198e8 <__assert_fail@plt+0x7c3c>
   1988c:	ldr	r1, [sp, #80]	; 0x50
   19890:	cmp	r9, r2
   19894:	mov	r5, r2
   19898:	ldr	r2, [sp, #84]	; 0x54
   1989c:	strbcc	r6, [ip, r9]
   198a0:	add	r9, r9, #1
   198a4:	ldrb	r6, [r1, sl]
   198a8:	mov	sl, r3
   198ac:	tst	r2, #1
   198b0:	beq	197d8 <__assert_fail@plt+0x7b2c>
   198b4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   198b8:	tst	r1, #1
   198bc:	beq	198dc <__assert_fail@plt+0x7c30>
   198c0:	cmp	r9, r5
   198c4:	mov	r2, r0
   198c8:	movcc	r1, #92	; 0x5c
   198cc:	strbcc	r1, [ip, r9]
   198d0:	add	r9, r9, #1
   198d4:	mov	r1, #0
   198d8:	b	198e4 <__assert_fail@plt+0x7c38>
   198dc:	mov	r1, #0
   198e0:	mov	r2, r0
   198e4:	str	r1, [fp, #-48]	; 0xffffffd0
   198e8:	mov	r0, r2
   198ec:	and	r1, r2, #1
   198f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   198f4:	add	r3, sl, #1
   198f8:	cmp	r2, r3
   198fc:	bls	1995c <__assert_fail@plt+0x7cb0>
   19900:	mov	r2, r5
   19904:	ldr	r5, [fp, #-52]	; 0xffffffcc
   19908:	cmp	r1, #0
   1990c:	movwne	r1, #1
   19910:	mvn	r5, r5
   19914:	orr	r5, r5, r1
   19918:	tst	r5, #1
   1991c:	bne	1988c <__assert_fail@plt+0x7be0>
   19920:	cmp	r9, r2
   19924:	movcc	r5, r4
   19928:	movcc	r4, #39	; 0x27
   1992c:	strbcc	r4, [ip, r9]
   19930:	movcc	r4, r5
   19934:	add	r5, r9, #1
   19938:	add	r9, r9, #2
   1993c:	cmp	r5, r2
   19940:	movcc	r1, r4
   19944:	movcc	r4, #39	; 0x27
   19948:	strbcc	r4, [ip, r5]
   1994c:	movcc	r4, r1
   19950:	mov	r1, #0
   19954:	str	r1, [fp, #-52]	; 0xffffffcc
   19958:	b	1988c <__assert_fail@plt+0x7be0>
   1995c:	cmp	r1, #0
   19960:	movwne	r1, #1
   19964:	str	r1, [fp, #-56]	; 0xffffffc8
   19968:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1996c:	cmp	r0, #0
   19970:	beq	19398 <__assert_fail@plt+0x76ec>
   19974:	b	193cc <__assert_fail@plt+0x7720>
   19978:	mov	r8, #0
   1997c:	mov	r4, r1
   19980:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19984:	tst	r0, #1
   19988:	beq	19004 <__assert_fail@plt+0x7358>
   1998c:	b	192b8 <__assert_fail@plt+0x760c>
   19990:	mov	r7, sl
   19994:	b	1999c <__assert_fail@plt+0x7cf0>
   19998:	mvn	r7, #0
   1999c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   199a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   199a4:	ldr	r2, [sp, #88]	; 0x58
   199a8:	eor	r0, r1, #2
   199ac:	orr	r0, r0, r9
   199b0:	clz	r0, r0
   199b4:	lsr	r0, r0, #5
   199b8:	tst	r3, r0
   199bc:	bne	19a34 <__assert_fail@plt+0x7d88>
   199c0:	subs	r0, r1, #2
   199c4:	movwne	r0, #1
   199c8:	orr	r0, r3, r0
   199cc:	tst	r0, #1
   199d0:	ldreq	r0, [sp, #60]	; 0x3c
   199d4:	eoreq	r0, r0, #1
   199d8:	tsteq	r0, #1
   199dc:	bne	19b10 <__assert_fail@plt+0x7e64>
   199e0:	tst	r4, #1
   199e4:	bne	19ad4 <__assert_fail@plt+0x7e28>
   199e8:	ldr	r6, [sp, #56]	; 0x38
   199ec:	mov	r8, #0
   199f0:	cmp	r6, #0
   199f4:	beq	19b0c <__assert_fail@plt+0x7e60>
   199f8:	mov	r1, #0
   199fc:	mov	r4, #2
   19a00:	cmp	r5, #0
   19a04:	mov	r0, r2
   19a08:	mov	r3, #0
   19a0c:	str	r1, [sp, #84]	; 0x54
   19a10:	beq	18858 <__assert_fail@plt+0x6bac>
   19a14:	b	19b10 <__assert_fail@plt+0x7e64>
   19a18:	movw	r0, #18584	; 0x4898
   19a1c:	movt	r0, #3
   19a20:	str	r0, [sp, #76]	; 0x4c
   19a24:	mov	r9, #0
   19a28:	tst	r8, #1
   19a2c:	beq	18af0 <__assert_fail@plt+0x6e44>
   19a30:	b	18c30 <__assert_fail@plt+0x6f84>
   19a34:	ldr	r1, [sp, #88]	; 0x58
   19a38:	mov	r0, #2
   19a3c:	tst	r1, #1
   19a40:	movwne	r0, #4
   19a44:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19a48:	ldr	r1, [fp, #12]
   19a4c:	cmp	r2, #2
   19a50:	moveq	r2, r0
   19a54:	b	19a8c <__assert_fail@plt+0x7de0>
   19a58:	ldr	ip, [fp, #-84]	; 0xffffffac
   19a5c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19a60:	ldr	r1, [fp, #12]
   19a64:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19a68:	b	19a8c <__assert_fail@plt+0x7de0>
   19a6c:	ldr	r1, [sp, #88]	; 0x58
   19a70:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19a74:	ldr	r5, [sp, #28]
   19a78:	mov	r0, #2
   19a7c:	tst	r1, #1
   19a80:	ldr	r1, [fp, #12]
   19a84:	movwne	r0, #4
   19a88:	mov	r2, r0
   19a8c:	mov	r0, #0
   19a90:	bic	r1, r1, #2
   19a94:	str	r2, [sp]
   19a98:	mov	r2, lr
   19a9c:	str	r0, [sp, #8]
   19aa0:	ldr	r0, [sp, #72]	; 0x48
   19aa4:	str	r1, [sp, #4]
   19aa8:	mov	r1, r5
   19aac:	str	r0, [sp, #12]
   19ab0:	ldr	r0, [sp, #76]	; 0x4c
   19ab4:	str	r0, [sp, #16]
   19ab8:	mov	r0, ip
   19abc:	mov	r3, r7
   19ac0:	bl	187cc <__assert_fail@plt+0x6b20>
   19ac4:	mov	r9, r0
   19ac8:	mov	r0, r9
   19acc:	sub	sp, fp, #28
   19ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ad4:	mov	r0, #5
   19ad8:	ldr	r1, [sp, #56]	; 0x38
   19adc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   19ae0:	str	r0, [sp]
   19ae4:	ldr	r0, [fp, #12]
   19ae8:	str	r0, [sp, #4]
   19aec:	ldr	r0, [fp, #16]
   19af0:	str	r0, [sp, #8]
   19af4:	ldr	r0, [sp, #72]	; 0x48
   19af8:	str	r0, [sp, #12]
   19afc:	ldr	r0, [sp, #76]	; 0x4c
   19b00:	str	r0, [sp, #16]
   19b04:	ldr	r0, [fp, #-84]	; 0xffffffac
   19b08:	b	19abc <__assert_fail@plt+0x7e10>
   19b0c:	mov	r3, #0
   19b10:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19b14:	cmp	r1, #0
   19b18:	beq	19b54 <__assert_fail@plt+0x7ea8>
   19b1c:	ldr	r2, [fp, #-84]	; 0xffffffac
   19b20:	tst	r3, #1
   19b24:	bne	19b58 <__assert_fail@plt+0x7eac>
   19b28:	ldrb	r0, [r1]
   19b2c:	cmp	r0, #0
   19b30:	beq	19b58 <__assert_fail@plt+0x7eac>
   19b34:	add	r1, r1, #1
   19b38:	cmp	r9, r5
   19b3c:	strbcc	r0, [r2, r9]
   19b40:	add	r9, r9, #1
   19b44:	ldrb	r0, [r1], #1
   19b48:	cmp	r0, #0
   19b4c:	bne	19b38 <__assert_fail@plt+0x7e8c>
   19b50:	b	19b58 <__assert_fail@plt+0x7eac>
   19b54:	ldr	r2, [fp, #-84]	; 0xffffffac
   19b58:	cmp	r9, r5
   19b5c:	movcc	r0, #0
   19b60:	strbcc	r0, [r2, r9]
   19b64:	mov	r0, r9
   19b68:	sub	sp, fp, #28
   19b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b70:	mov	r0, #4
   19b74:	b	19a44 <__assert_fail@plt+0x7d98>
   19b78:	bl	11c70 <abort@plt>
   19b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b80:	add	fp, sp, #28
   19b84:	sub	sp, sp, #28
   19b88:	movw	r5, #25240	; 0x6298
   19b8c:	cmp	r2, #0
   19b90:	mov	r4, r1
   19b94:	mov	r7, r0
   19b98:	str	r0, [sp, #20]
   19b9c:	movt	r5, #4
   19ba0:	movne	r5, r2
   19ba4:	bl	11af0 <__errno_location@plt>
   19ba8:	mov	sl, r0
   19bac:	ldr	r2, [r5, #40]	; 0x28
   19bb0:	ldr	r3, [r5, #44]	; 0x2c
   19bb4:	ldm	r5, {r0, r1}
   19bb8:	orr	r8, r1, #1
   19bbc:	add	r9, r5, #8
   19bc0:	mov	r1, #0
   19bc4:	ldr	r6, [sl]
   19bc8:	stm	sp, {r0, r8, r9}
   19bcc:	mov	r0, #0
   19bd0:	str	r2, [sp, #12]
   19bd4:	str	r3, [sp, #16]
   19bd8:	mov	r2, r7
   19bdc:	mov	r3, r4
   19be0:	str	r6, [sp, #24]
   19be4:	mov	r6, r4
   19be8:	bl	187cc <__assert_fail@plt+0x6b20>
   19bec:	add	r7, r0, #1
   19bf0:	mov	r0, r7
   19bf4:	bl	1accc <__assert_fail@plt+0x9020>
   19bf8:	mov	r4, r0
   19bfc:	ldr	r0, [r5]
   19c00:	ldr	r2, [r5, #44]	; 0x2c
   19c04:	ldr	r1, [r5, #40]	; 0x28
   19c08:	mov	r3, r6
   19c0c:	stm	sp, {r0, r8, r9}
   19c10:	str	r2, [sp, #16]
   19c14:	ldr	r2, [sp, #20]
   19c18:	str	r1, [sp, #12]
   19c1c:	mov	r0, r4
   19c20:	mov	r1, r7
   19c24:	bl	187cc <__assert_fail@plt+0x6b20>
   19c28:	ldr	r0, [sp, #24]
   19c2c:	str	r0, [sl]
   19c30:	mov	r0, r4
   19c34:	sub	sp, fp, #28
   19c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c40:	add	fp, sp, #28
   19c44:	sub	sp, sp, #36	; 0x24
   19c48:	movw	r8, #25240	; 0x6298
   19c4c:	cmp	r3, #0
   19c50:	mov	r4, r2
   19c54:	str	r2, [sp, #24]
   19c58:	mov	r5, r1
   19c5c:	mov	r6, r0
   19c60:	str	r0, [sp, #20]
   19c64:	movt	r8, #4
   19c68:	movne	r8, r3
   19c6c:	bl	11af0 <__errno_location@plt>
   19c70:	str	r0, [sp, #28]
   19c74:	ldr	r1, [r8, #40]	; 0x28
   19c78:	ldr	r2, [r8, #44]	; 0x2c
   19c7c:	ldr	r7, [r0]
   19c80:	cmp	r4, #0
   19c84:	add	sl, r8, #8
   19c88:	mov	r0, #0
   19c8c:	ldm	r8, {r3, r9}
   19c90:	orreq	r9, r9, #1
   19c94:	stm	sp, {r3, r9, sl}
   19c98:	str	r1, [sp, #12]
   19c9c:	str	r2, [sp, #16]
   19ca0:	mov	r1, #0
   19ca4:	mov	r2, r6
   19ca8:	mov	r3, r5
   19cac:	str	r7, [sp, #32]
   19cb0:	mov	r7, r5
   19cb4:	bl	187cc <__assert_fail@plt+0x6b20>
   19cb8:	add	r4, r0, #1
   19cbc:	mov	r5, r0
   19cc0:	mov	r0, r4
   19cc4:	bl	1accc <__assert_fail@plt+0x9020>
   19cc8:	mov	r6, r0
   19ccc:	ldr	r0, [r8]
   19cd0:	ldr	r2, [r8, #44]	; 0x2c
   19cd4:	ldr	r1, [r8, #40]	; 0x28
   19cd8:	mov	r3, r7
   19cdc:	stm	sp, {r0, r9, sl}
   19ce0:	str	r2, [sp, #16]
   19ce4:	ldr	r2, [sp, #20]
   19ce8:	str	r1, [sp, #12]
   19cec:	mov	r0, r6
   19cf0:	mov	r1, r4
   19cf4:	bl	187cc <__assert_fail@plt+0x6b20>
   19cf8:	ldr	r0, [sp, #24]
   19cfc:	ldr	r1, [sp, #32]
   19d00:	ldr	r2, [sp, #28]
   19d04:	cmp	r0, #0
   19d08:	str	r1, [r2]
   19d0c:	strne	r5, [r0]
   19d10:	mov	r0, r6
   19d14:	sub	sp, fp, #28
   19d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d1c:	push	{r4, r5, r6, r7, fp, lr}
   19d20:	add	fp, sp, #16
   19d24:	movw	r4, #25064	; 0x61e8
   19d28:	movt	r4, #4
   19d2c:	ldrd	r6, [r4]
   19d30:	cmp	r7, #2
   19d34:	blt	19d60 <__assert_fail@plt+0x80b4>
   19d38:	add	r5, r6, #12
   19d3c:	mov	r7, #0
   19d40:	ldr	r0, [r5, r7, lsl #3]
   19d44:	bl	1c224 <__assert_fail@plt+0xa578>
   19d48:	ldr	r1, [r4, #4]
   19d4c:	add	r2, r7, #2
   19d50:	add	r0, r7, #1
   19d54:	mov	r7, r0
   19d58:	cmp	r2, r1
   19d5c:	blt	19d40 <__assert_fail@plt+0x8094>
   19d60:	ldr	r0, [r6, #4]
   19d64:	movw	r5, #25288	; 0x62c8
   19d68:	movt	r5, #4
   19d6c:	cmp	r0, r5
   19d70:	beq	19d84 <__assert_fail@plt+0x80d8>
   19d74:	bl	1c224 <__assert_fail@plt+0xa578>
   19d78:	mov	r0, #256	; 0x100
   19d7c:	str	r0, [r4, #8]
   19d80:	str	r5, [r4, #12]
   19d84:	add	r5, r4, #8
   19d88:	cmp	r6, r5
   19d8c:	beq	19d9c <__assert_fail@plt+0x80f0>
   19d90:	mov	r0, r6
   19d94:	bl	1c224 <__assert_fail@plt+0xa578>
   19d98:	str	r5, [r4]
   19d9c:	mov	r0, #1
   19da0:	str	r0, [r4, #4]
   19da4:	pop	{r4, r5, r6, r7, fp, pc}
   19da8:	movw	r3, #25240	; 0x6298
   19dac:	mvn	r2, #0
   19db0:	movt	r3, #4
   19db4:	b	19db8 <__assert_fail@plt+0x810c>
   19db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dbc:	add	fp, sp, #28
   19dc0:	sub	sp, sp, #44	; 0x2c
   19dc4:	mov	r7, r3
   19dc8:	str	r2, [sp, #36]	; 0x24
   19dcc:	str	r1, [sp, #32]
   19dd0:	mov	r5, r0
   19dd4:	bl	11af0 <__errno_location@plt>
   19dd8:	cmp	r5, #0
   19ddc:	bmi	19f44 <__assert_fail@plt+0x8298>
   19de0:	cmn	r5, #-2147483647	; 0x80000001
   19de4:	beq	19f44 <__assert_fail@plt+0x8298>
   19de8:	movw	r8, #25064	; 0x61e8
   19dec:	mov	r4, r0
   19df0:	ldr	r0, [r0]
   19df4:	movt	r8, #4
   19df8:	str	r4, [sp, #28]
   19dfc:	ldr	r1, [r8, #4]
   19e00:	ldr	r6, [r8]
   19e04:	str	r0, [sp, #24]
   19e08:	cmp	r1, r5
   19e0c:	ble	19e18 <__assert_fail@plt+0x816c>
   19e10:	mov	sl, r6
   19e14:	b	19e80 <__assert_fail@plt+0x81d4>
   19e18:	mov	r0, #8
   19e1c:	add	r9, r8, #8
   19e20:	str	r1, [fp, #-32]	; 0xffffffe0
   19e24:	sub	r1, r5, r1
   19e28:	mvn	r3, #-2147483648	; 0x80000000
   19e2c:	str	r0, [sp]
   19e30:	subs	r0, r6, r9
   19e34:	add	r2, r1, #1
   19e38:	sub	r1, fp, #32
   19e3c:	movne	r0, r6
   19e40:	bl	1aecc <__assert_fail@plt+0x9220>
   19e44:	mov	sl, r0
   19e48:	cmp	r6, r9
   19e4c:	str	r0, [r8]
   19e50:	bne	19e5c <__assert_fail@plt+0x81b0>
   19e54:	ldrd	r0, [r8, #8]
   19e58:	stm	sl, {r0, r1}
   19e5c:	ldr	r1, [r8, #4]
   19e60:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19e64:	add	r0, sl, r1, lsl #3
   19e68:	sub	r1, r2, r1
   19e6c:	lsl	r2, r1, #3
   19e70:	mov	r1, #0
   19e74:	bl	11b2c <memset@plt>
   19e78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19e7c:	str	r0, [r8, #4]
   19e80:	mov	r9, sl
   19e84:	ldm	r7, {r0, r1}
   19e88:	orr	r8, r1, #1
   19e8c:	add	r1, r7, #8
   19e90:	ldr	r2, [r7, #40]	; 0x28
   19e94:	ldr	r3, [r7, #44]	; 0x2c
   19e98:	ldr	r6, [r9, r5, lsl #3]!
   19e9c:	str	r1, [sp, #20]
   19ea0:	ldr	r4, [r9, #4]!
   19ea4:	stm	sp, {r0, r8}
   19ea8:	add	r0, sp, #8
   19eac:	stm	r0, {r1, r2, r3}
   19eb0:	ldr	r2, [sp, #32]
   19eb4:	ldr	r3, [sp, #36]	; 0x24
   19eb8:	mov	r1, r6
   19ebc:	mov	r0, r4
   19ec0:	bl	187cc <__assert_fail@plt+0x6b20>
   19ec4:	cmp	r6, r0
   19ec8:	bhi	19f2c <__assert_fail@plt+0x8280>
   19ecc:	add	r6, r0, #1
   19ed0:	movw	r0, #25288	; 0x62c8
   19ed4:	movt	r0, #4
   19ed8:	str	r6, [sl, r5, lsl #3]
   19edc:	cmp	r4, r0
   19ee0:	beq	19eec <__assert_fail@plt+0x8240>
   19ee4:	mov	r0, r4
   19ee8:	bl	1c224 <__assert_fail@plt+0xa578>
   19eec:	mov	r0, r6
   19ef0:	bl	1accc <__assert_fail@plt+0x9020>
   19ef4:	str	r0, [r9]
   19ef8:	mov	r4, r0
   19efc:	add	r3, sp, #8
   19f00:	ldr	r0, [r7]
   19f04:	ldr	r1, [r7, #40]	; 0x28
   19f08:	ldr	r2, [r7, #44]	; 0x2c
   19f0c:	stm	sp, {r0, r8}
   19f10:	ldr	r0, [sp, #20]
   19f14:	stm	r3, {r0, r1, r2}
   19f18:	ldr	r2, [sp, #32]
   19f1c:	ldr	r3, [sp, #36]	; 0x24
   19f20:	mov	r0, r4
   19f24:	mov	r1, r6
   19f28:	bl	187cc <__assert_fail@plt+0x6b20>
   19f2c:	ldr	r1, [sp, #24]
   19f30:	ldr	r0, [sp, #28]
   19f34:	str	r1, [r0]
   19f38:	mov	r0, r4
   19f3c:	sub	sp, fp, #28
   19f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f44:	bl	11c70 <abort@plt>
   19f48:	movw	r3, #25240	; 0x6298
   19f4c:	movt	r3, #4
   19f50:	b	19db8 <__assert_fail@plt+0x810c>
   19f54:	movw	r3, #25240	; 0x6298
   19f58:	mov	r1, r0
   19f5c:	mov	r0, #0
   19f60:	mvn	r2, #0
   19f64:	movt	r3, #4
   19f68:	b	19db8 <__assert_fail@plt+0x810c>
   19f6c:	movw	r3, #25240	; 0x6298
   19f70:	mov	r2, r1
   19f74:	mov	r1, r0
   19f78:	mov	r0, #0
   19f7c:	movt	r3, #4
   19f80:	b	19db8 <__assert_fail@plt+0x810c>
   19f84:	push	{fp, lr}
   19f88:	mov	fp, sp
   19f8c:	sub	sp, sp, #48	; 0x30
   19f90:	vmov.i32	q8, #0	; 0x00000000
   19f94:	mov	ip, #32
   19f98:	mov	r3, sp
   19f9c:	mov	lr, r2
   19fa0:	cmp	r1, #10
   19fa4:	add	r2, r3, #16
   19fa8:	vst1.64	{d16-d17}, [r3], ip
   19fac:	vst1.64	{d16-d17}, [r2]
   19fb0:	vst1.64	{d16-d17}, [r3]
   19fb4:	beq	19fd4 <__assert_fail@plt+0x8328>
   19fb8:	str	r1, [sp]
   19fbc:	mov	r3, sp
   19fc0:	mov	r1, lr
   19fc4:	mvn	r2, #0
   19fc8:	bl	19db8 <__assert_fail@plt+0x810c>
   19fcc:	mov	sp, fp
   19fd0:	pop	{fp, pc}
   19fd4:	bl	11c70 <abort@plt>
   19fd8:	push	{r4, sl, fp, lr}
   19fdc:	add	fp, sp, #8
   19fe0:	sub	sp, sp, #48	; 0x30
   19fe4:	vmov.i32	q8, #0	; 0x00000000
   19fe8:	mov	ip, r3
   19fec:	mov	r3, sp
   19ff0:	mov	lr, #32
   19ff4:	cmp	r1, #10
   19ff8:	add	r4, r3, #16
   19ffc:	vst1.64	{d16-d17}, [r3], lr
   1a000:	vst1.64	{d16-d17}, [r4]
   1a004:	vst1.64	{d16-d17}, [r3]
   1a008:	beq	1a028 <__assert_fail@plt+0x837c>
   1a00c:	str	r1, [sp]
   1a010:	mov	r1, r2
   1a014:	mov	r3, sp
   1a018:	mov	r2, ip
   1a01c:	bl	19db8 <__assert_fail@plt+0x810c>
   1a020:	sub	sp, fp, #8
   1a024:	pop	{r4, sl, fp, pc}
   1a028:	bl	11c70 <abort@plt>
   1a02c:	push	{fp, lr}
   1a030:	mov	fp, sp
   1a034:	sub	sp, sp, #48	; 0x30
   1a038:	vmov.i32	q8, #0	; 0x00000000
   1a03c:	mov	r3, sp
   1a040:	mov	ip, #32
   1a044:	cmp	r0, #10
   1a048:	add	r2, r3, #16
   1a04c:	vst1.64	{d16-d17}, [r3], ip
   1a050:	vst1.64	{d16-d17}, [r2]
   1a054:	vst1.64	{d16-d17}, [r3]
   1a058:	beq	1a078 <__assert_fail@plt+0x83cc>
   1a05c:	str	r0, [sp]
   1a060:	mov	r3, sp
   1a064:	mov	r0, #0
   1a068:	mvn	r2, #0
   1a06c:	bl	19db8 <__assert_fail@plt+0x810c>
   1a070:	mov	sp, fp
   1a074:	pop	{fp, pc}
   1a078:	bl	11c70 <abort@plt>
   1a07c:	push	{fp, lr}
   1a080:	mov	fp, sp
   1a084:	sub	sp, sp, #48	; 0x30
   1a088:	vmov.i32	q8, #0	; 0x00000000
   1a08c:	mov	r3, sp
   1a090:	mov	ip, #32
   1a094:	cmp	r0, #10
   1a098:	add	lr, r3, #16
   1a09c:	vst1.64	{d16-d17}, [r3], ip
   1a0a0:	vst1.64	{d16-d17}, [lr]
   1a0a4:	vst1.64	{d16-d17}, [r3]
   1a0a8:	beq	1a0c4 <__assert_fail@plt+0x8418>
   1a0ac:	str	r0, [sp]
   1a0b0:	mov	r3, sp
   1a0b4:	mov	r0, #0
   1a0b8:	bl	19db8 <__assert_fail@plt+0x810c>
   1a0bc:	mov	sp, fp
   1a0c0:	pop	{fp, pc}
   1a0c4:	bl	11c70 <abort@plt>
   1a0c8:	push	{r4, sl, fp, lr}
   1a0cc:	add	fp, sp, #8
   1a0d0:	sub	sp, sp, #48	; 0x30
   1a0d4:	mov	lr, r0
   1a0d8:	movw	r0, #25240	; 0x6298
   1a0dc:	mov	ip, r1
   1a0e0:	mov	r1, #32
   1a0e4:	mov	r4, #1
   1a0e8:	movt	r0, #4
   1a0ec:	add	r3, r0, #16
   1a0f0:	vld1.64	{d16-d17}, [r0], r1
   1a0f4:	vld1.64	{d20-d21}, [r0]
   1a0f8:	vld1.64	{d18-d19}, [r3]
   1a0fc:	mov	r3, sp
   1a100:	add	r0, r3, #32
   1a104:	add	r1, r3, #16
   1a108:	vst1.64	{d20-d21}, [r0]
   1a10c:	mov	r0, #28
   1a110:	vst1.64	{d18-d19}, [r1]
   1a114:	mov	r1, r3
   1a118:	and	r0, r0, r2, lsr #3
   1a11c:	and	r2, r2, #31
   1a120:	vst1.64	{d16-d17}, [r1], r0
   1a124:	ldr	r0, [r1, #8]
   1a128:	bic	r4, r4, r0, lsr r2
   1a12c:	eor	r0, r0, r4, lsl r2
   1a130:	mov	r2, ip
   1a134:	str	r0, [r1, #8]
   1a138:	mov	r0, #0
   1a13c:	mov	r1, lr
   1a140:	bl	19db8 <__assert_fail@plt+0x810c>
   1a144:	sub	sp, fp, #8
   1a148:	pop	{r4, sl, fp, pc}
   1a14c:	push	{fp, lr}
   1a150:	mov	fp, sp
   1a154:	sub	sp, sp, #48	; 0x30
   1a158:	mov	ip, r0
   1a15c:	movw	r0, #25240	; 0x6298
   1a160:	mov	r2, #32
   1a164:	movt	r0, #4
   1a168:	add	r3, r0, #16
   1a16c:	vld1.64	{d16-d17}, [r0], r2
   1a170:	vld1.64	{d20-d21}, [r0]
   1a174:	vld1.64	{d18-d19}, [r3]
   1a178:	mov	r3, sp
   1a17c:	add	r0, r3, #32
   1a180:	add	r2, r3, #16
   1a184:	vst1.64	{d20-d21}, [r0]
   1a188:	mov	r0, #28
   1a18c:	vst1.64	{d18-d19}, [r2]
   1a190:	mov	r2, r3
   1a194:	and	r0, r0, r1, lsr #3
   1a198:	and	r1, r1, #31
   1a19c:	vst1.64	{d16-d17}, [r2], r0
   1a1a0:	mov	r0, #1
   1a1a4:	ldr	lr, [r2, #8]
   1a1a8:	bic	r0, r0, lr, lsr r1
   1a1ac:	eor	r0, lr, r0, lsl r1
   1a1b0:	mov	r1, ip
   1a1b4:	str	r0, [r2, #8]
   1a1b8:	mov	r0, #0
   1a1bc:	mvn	r2, #0
   1a1c0:	bl	19db8 <__assert_fail@plt+0x810c>
   1a1c4:	mov	sp, fp
   1a1c8:	pop	{fp, pc}
   1a1cc:	push	{fp, lr}
   1a1d0:	mov	fp, sp
   1a1d4:	sub	sp, sp, #48	; 0x30
   1a1d8:	mov	r1, r0
   1a1dc:	movw	r0, #25240	; 0x6298
   1a1e0:	mov	r3, #32
   1a1e4:	movt	r0, #4
   1a1e8:	add	r2, r0, #16
   1a1ec:	vld1.64	{d16-d17}, [r0], r3
   1a1f0:	mov	r3, sp
   1a1f4:	vld1.64	{d18-d19}, [r2]
   1a1f8:	vld1.64	{d20-d21}, [r0]
   1a1fc:	add	r2, r3, #16
   1a200:	add	r0, r3, #32
   1a204:	vst1.64	{d18-d19}, [r2]
   1a208:	vst1.64	{d20-d21}, [r0]
   1a20c:	mov	r0, #12
   1a210:	mov	r2, r3
   1a214:	vst1.64	{d16-d17}, [r2], r0
   1a218:	ldr	r0, [r2]
   1a21c:	orr	r0, r0, #67108864	; 0x4000000
   1a220:	str	r0, [r2]
   1a224:	mov	r0, #0
   1a228:	mvn	r2, #0
   1a22c:	bl	19db8 <__assert_fail@plt+0x810c>
   1a230:	mov	sp, fp
   1a234:	pop	{fp, pc}
   1a238:	push	{fp, lr}
   1a23c:	mov	fp, sp
   1a240:	sub	sp, sp, #48	; 0x30
   1a244:	mov	ip, r1
   1a248:	mov	r1, r0
   1a24c:	movw	r0, #25240	; 0x6298
   1a250:	mov	r2, #32
   1a254:	movt	r0, #4
   1a258:	add	r3, r0, #16
   1a25c:	vld1.64	{d16-d17}, [r0], r2
   1a260:	vld1.64	{d18-d19}, [r3]
   1a264:	vld1.64	{d20-d21}, [r0]
   1a268:	mov	r3, sp
   1a26c:	add	r2, r3, #16
   1a270:	add	r0, r3, #32
   1a274:	vst1.64	{d18-d19}, [r2]
   1a278:	vst1.64	{d20-d21}, [r0]
   1a27c:	mov	r0, #12
   1a280:	mov	r2, r3
   1a284:	vst1.64	{d16-d17}, [r2], r0
   1a288:	ldr	r0, [r2]
   1a28c:	orr	r0, r0, #67108864	; 0x4000000
   1a290:	str	r0, [r2]
   1a294:	mov	r0, #0
   1a298:	mov	r2, ip
   1a29c:	bl	19db8 <__assert_fail@plt+0x810c>
   1a2a0:	mov	sp, fp
   1a2a4:	pop	{fp, pc}
   1a2a8:	push	{r4, sl, fp, lr}
   1a2ac:	add	fp, sp, #8
   1a2b0:	sub	sp, sp, #96	; 0x60
   1a2b4:	vmov.i32	q8, #0	; 0x00000000
   1a2b8:	mov	ip, r2
   1a2bc:	mov	r2, sp
   1a2c0:	mov	r4, #28
   1a2c4:	cmp	r1, #10
   1a2c8:	mov	r3, r2
   1a2cc:	add	lr, r2, #16
   1a2d0:	vst1.64	{d16-d17}, [r3], r4
   1a2d4:	vst1.64	{d16-d17}, [lr]
   1a2d8:	vst1.32	{d16-d17}, [r3]
   1a2dc:	beq	1a32c <__assert_fail@plt+0x8680>
   1a2e0:	vld1.64	{d16-d17}, [r2], r4
   1a2e4:	vld1.64	{d18-d19}, [lr]
   1a2e8:	add	r3, sp, #48	; 0x30
   1a2ec:	vld1.32	{d20-d21}, [r2]
   1a2f0:	add	r2, r3, #20
   1a2f4:	add	r4, r3, #4
   1a2f8:	vst1.32	{d18-d19}, [r2]
   1a2fc:	add	r2, r3, #32
   1a300:	vst1.32	{d16-d17}, [r4]
   1a304:	vst1.32	{d20-d21}, [r2]
   1a308:	str	r1, [sp, #48]	; 0x30
   1a30c:	mvn	r2, #0
   1a310:	ldr	r1, [sp, #60]	; 0x3c
   1a314:	orr	r1, r1, #67108864	; 0x4000000
   1a318:	str	r1, [sp, #60]	; 0x3c
   1a31c:	mov	r1, ip
   1a320:	bl	19db8 <__assert_fail@plt+0x810c>
   1a324:	sub	sp, fp, #8
   1a328:	pop	{r4, sl, fp, pc}
   1a32c:	bl	11c70 <abort@plt>
   1a330:	push	{r4, r5, r6, sl, fp, lr}
   1a334:	add	fp, sp, #16
   1a338:	sub	sp, sp, #48	; 0x30
   1a33c:	mov	ip, r3
   1a340:	movw	r3, #25240	; 0x6298
   1a344:	mov	r6, #32
   1a348:	cmp	r1, #0
   1a34c:	mov	r4, sp
   1a350:	movt	r3, #4
   1a354:	cmpne	r2, #0
   1a358:	add	r5, r4, #16
   1a35c:	add	lr, r3, #16
   1a360:	vld1.64	{d16-d17}, [r3], r6
   1a364:	vld1.64	{d18-d19}, [lr]
   1a368:	vld1.64	{d20-d21}, [r3]
   1a36c:	mov	r3, #10
   1a370:	vst1.64	{d16-d17}, [r4], r6
   1a374:	vst1.64	{d18-d19}, [r5]
   1a378:	vst1.64	{d20-d21}, [r4]
   1a37c:	str	r3, [sp]
   1a380:	bne	1a388 <__assert_fail@plt+0x86dc>
   1a384:	bl	11c70 <abort@plt>
   1a388:	str	r2, [sp, #44]	; 0x2c
   1a38c:	str	r1, [sp, #40]	; 0x28
   1a390:	mov	r3, sp
   1a394:	mov	r1, ip
   1a398:	mvn	r2, #0
   1a39c:	bl	19db8 <__assert_fail@plt+0x810c>
   1a3a0:	sub	sp, fp, #16
   1a3a4:	pop	{r4, r5, r6, sl, fp, pc}
   1a3a8:	push	{r4, r5, r6, sl, fp, lr}
   1a3ac:	add	fp, sp, #16
   1a3b0:	sub	sp, sp, #48	; 0x30
   1a3b4:	mov	lr, r3
   1a3b8:	movw	r3, #25240	; 0x6298
   1a3bc:	mov	r6, #32
   1a3c0:	cmp	r1, #0
   1a3c4:	mov	r4, sp
   1a3c8:	movt	r3, #4
   1a3cc:	cmpne	r2, #0
   1a3d0:	add	r5, r4, #16
   1a3d4:	add	ip, r3, #16
   1a3d8:	vld1.64	{d16-d17}, [r3], r6
   1a3dc:	vld1.64	{d18-d19}, [ip]
   1a3e0:	vld1.64	{d20-d21}, [r3]
   1a3e4:	mov	r3, #10
   1a3e8:	vst1.64	{d16-d17}, [r4], r6
   1a3ec:	vst1.64	{d18-d19}, [r5]
   1a3f0:	vst1.64	{d20-d21}, [r4]
   1a3f4:	str	r3, [sp]
   1a3f8:	bne	1a400 <__assert_fail@plt+0x8754>
   1a3fc:	bl	11c70 <abort@plt>
   1a400:	ldr	ip, [fp, #8]
   1a404:	str	r2, [sp, #44]	; 0x2c
   1a408:	str	r1, [sp, #40]	; 0x28
   1a40c:	mov	r3, sp
   1a410:	mov	r1, lr
   1a414:	mov	r2, ip
   1a418:	bl	19db8 <__assert_fail@plt+0x810c>
   1a41c:	sub	sp, fp, #16
   1a420:	pop	{r4, r5, r6, sl, fp, pc}
   1a424:	push	{r4, sl, fp, lr}
   1a428:	add	fp, sp, #8
   1a42c:	sub	sp, sp, #48	; 0x30
   1a430:	movw	r3, #25240	; 0x6298
   1a434:	mov	lr, #32
   1a438:	mov	ip, r2
   1a43c:	cmp	r0, #0
   1a440:	movt	r3, #4
   1a444:	cmpne	r1, #0
   1a448:	add	r2, r3, #16
   1a44c:	vld1.64	{d16-d17}, [r3], lr
   1a450:	vld1.64	{d20-d21}, [r3]
   1a454:	vld1.64	{d18-d19}, [r2]
   1a458:	mov	r2, sp
   1a45c:	add	r4, r2, #16
   1a460:	vst1.64	{d16-d17}, [r2], lr
   1a464:	vst1.64	{d20-d21}, [r2]
   1a468:	mov	r2, #10
   1a46c:	vst1.64	{d18-d19}, [r4]
   1a470:	str	r2, [sp]
   1a474:	bne	1a47c <__assert_fail@plt+0x87d0>
   1a478:	bl	11c70 <abort@plt>
   1a47c:	str	r1, [sp, #44]	; 0x2c
   1a480:	str	r0, [sp, #40]	; 0x28
   1a484:	mov	r3, sp
   1a488:	mov	r0, #0
   1a48c:	mov	r1, ip
   1a490:	mvn	r2, #0
   1a494:	bl	19db8 <__assert_fail@plt+0x810c>
   1a498:	sub	sp, fp, #8
   1a49c:	pop	{r4, sl, fp, pc}
   1a4a0:	push	{r4, r5, fp, lr}
   1a4a4:	add	fp, sp, #8
   1a4a8:	sub	sp, sp, #48	; 0x30
   1a4ac:	mov	ip, r3
   1a4b0:	movw	r3, #25240	; 0x6298
   1a4b4:	mov	r4, #32
   1a4b8:	mov	lr, r2
   1a4bc:	cmp	r0, #0
   1a4c0:	movt	r3, #4
   1a4c4:	cmpne	r1, #0
   1a4c8:	add	r2, r3, #16
   1a4cc:	vld1.64	{d16-d17}, [r3], r4
   1a4d0:	vld1.64	{d20-d21}, [r3]
   1a4d4:	vld1.64	{d18-d19}, [r2]
   1a4d8:	mov	r2, sp
   1a4dc:	add	r5, r2, #16
   1a4e0:	vst1.64	{d16-d17}, [r2], r4
   1a4e4:	vst1.64	{d20-d21}, [r2]
   1a4e8:	mov	r2, #10
   1a4ec:	vst1.64	{d18-d19}, [r5]
   1a4f0:	str	r2, [sp]
   1a4f4:	bne	1a4fc <__assert_fail@plt+0x8850>
   1a4f8:	bl	11c70 <abort@plt>
   1a4fc:	str	r1, [sp, #44]	; 0x2c
   1a500:	str	r0, [sp, #40]	; 0x28
   1a504:	mov	r3, sp
   1a508:	mov	r0, #0
   1a50c:	mov	r1, lr
   1a510:	mov	r2, ip
   1a514:	bl	19db8 <__assert_fail@plt+0x810c>
   1a518:	sub	sp, fp, #8
   1a51c:	pop	{r4, r5, fp, pc}
   1a520:	movw	r3, #25016	; 0x61b8
   1a524:	movt	r3, #4
   1a528:	b	19db8 <__assert_fail@plt+0x810c>
   1a52c:	movw	r3, #25016	; 0x61b8
   1a530:	mov	r2, r1
   1a534:	mov	r1, r0
   1a538:	mov	r0, #0
   1a53c:	movt	r3, #4
   1a540:	b	19db8 <__assert_fail@plt+0x810c>
   1a544:	movw	r3, #25016	; 0x61b8
   1a548:	mvn	r2, #0
   1a54c:	movt	r3, #4
   1a550:	b	19db8 <__assert_fail@plt+0x810c>
   1a554:	movw	r3, #25016	; 0x61b8
   1a558:	mov	r1, r0
   1a55c:	mov	r0, #0
   1a560:	mvn	r2, #0
   1a564:	movt	r3, #4
   1a568:	b	19db8 <__assert_fail@plt+0x810c>
   1a56c:	push	{r4, r5, fp, lr}
   1a570:	add	fp, sp, #8
   1a574:	mov	r4, r1
   1a578:	mov	r1, #0
   1a57c:	mov	r5, r0
   1a580:	mov	r2, r4
   1a584:	bl	11b68 <memchr@plt>
   1a588:	sub	r1, r0, r5
   1a58c:	cmp	r0, #0
   1a590:	addne	r4, r1, #1
   1a594:	mov	r0, r4
   1a598:	pop	{r4, r5, fp, pc}
   1a59c:	push	{r4, r5, r6, r7, fp, lr}
   1a5a0:	add	fp, sp, #16
   1a5a4:	mov	r4, r0
   1a5a8:	cmp	r0, #2
   1a5ac:	bhi	1a5dc <__assert_fail@plt+0x8930>
   1a5b0:	mov	r0, r4
   1a5b4:	bl	32f80 <__assert_fail@plt+0x212d4>
   1a5b8:	mov	r5, r0
   1a5bc:	bl	11af0 <__errno_location@plt>
   1a5c0:	ldr	r7, [r0]
   1a5c4:	mov	r6, r0
   1a5c8:	mov	r0, r4
   1a5cc:	bl	11c88 <close@plt>
   1a5d0:	mov	r0, r5
   1a5d4:	str	r7, [r6]
   1a5d8:	pop	{r4, r5, r6, r7, fp, pc}
   1a5dc:	mov	r0, r4
   1a5e0:	pop	{r4, r5, r6, r7, fp, pc}
   1a5e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a5e8:	add	fp, sp, #24
   1a5ec:	sub	sp, sp, #32
   1a5f0:	ldr	r7, [fp, #12]
   1a5f4:	ldr	r6, [fp, #8]
   1a5f8:	mov	r4, r2
   1a5fc:	mov	r5, r0
   1a600:	cmp	r1, #0
   1a604:	beq	1a624 <__assert_fail@plt+0x8978>
   1a608:	mov	r2, r1
   1a60c:	movw	r1, #18672	; 0x48f0
   1a610:	str	r3, [sp]
   1a614:	mov	r0, r5
   1a618:	mov	r3, r4
   1a61c:	movt	r1, #3
   1a620:	b	1a634 <__assert_fail@plt+0x8988>
   1a624:	movw	r1, #18684	; 0x48fc
   1a628:	mov	r0, r5
   1a62c:	mov	r2, r4
   1a630:	movt	r1, #3
   1a634:	bl	11ad8 <fprintf@plt>
   1a638:	movw	r1, #18691	; 0x4903
   1a63c:	mov	r0, #0
   1a640:	mov	r2, #5
   1a644:	movt	r1, #3
   1a648:	bl	11934 <dcgettext@plt>
   1a64c:	movw	r1, #19387	; 0x4bbb
   1a650:	mov	r2, r0
   1a654:	mov	r0, r5
   1a658:	movw	r3, #2022	; 0x7e6
   1a65c:	movt	r1, #3
   1a660:	bl	11ad8 <fprintf@plt>
   1a664:	mov	r0, #10
   1a668:	mov	r1, r5
   1a66c:	bl	11bc8 <fputc@plt>
   1a670:	movw	r1, #18695	; 0x4907
   1a674:	mov	r0, #0
   1a678:	mov	r2, #5
   1a67c:	movt	r1, #3
   1a680:	bl	11934 <dcgettext@plt>
   1a684:	movw	r2, #18866	; 0x49b2
   1a688:	mov	r1, r0
   1a68c:	mov	r0, r5
   1a690:	movt	r2, #3
   1a694:	bl	11ad8 <fprintf@plt>
   1a698:	mov	r0, #10
   1a69c:	mov	r1, r5
   1a6a0:	bl	11bc8 <fputc@plt>
   1a6a4:	cmp	r7, #9
   1a6a8:	bhi	1a6e4 <__assert_fail@plt+0x8a38>
   1a6ac:	add	r0, pc, #0
   1a6b0:	ldr	pc, [r0, r7, lsl #2]
   1a6b4:	ldrdeq	sl, [r1], -ip
   1a6b8:	strdeq	sl, [r1], -r0
   1a6bc:	andeq	sl, r1, ip, lsl r7
   1a6c0:	andeq	sl, r1, r8, asr #14
   1a6c4:	andeq	sl, r1, ip, ror r7
   1a6c8:			; <UNDEFINED> instruction: 0x0001a7b4
   1a6cc:	strdeq	sl, [r1], -r4
   1a6d0:	andeq	sl, r1, ip, lsr r8
   1a6d4:	ldrdeq	sl, [r1], -r8
   1a6d8:	andeq	sl, r1, r0, lsl #17
   1a6dc:	sub	sp, fp, #24
   1a6e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a6e4:	movw	r1, #19219	; 0x4b13
   1a6e8:	movt	r1, #3
   1a6ec:	b	1a888 <__assert_fail@plt+0x8bdc>
   1a6f0:	movw	r1, #18900	; 0x49d4
   1a6f4:	mov	r0, #0
   1a6f8:	mov	r2, #5
   1a6fc:	movt	r1, #3
   1a700:	bl	11934 <dcgettext@plt>
   1a704:	ldr	r2, [r6]
   1a708:	mov	r1, r0
   1a70c:	mov	r0, r5
   1a710:	sub	sp, fp, #24
   1a714:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a718:	b	11ad8 <fprintf@plt>
   1a71c:	movw	r1, #18916	; 0x49e4
   1a720:	mov	r0, #0
   1a724:	mov	r2, #5
   1a728:	movt	r1, #3
   1a72c:	bl	11934 <dcgettext@plt>
   1a730:	ldm	r6, {r2, r3}
   1a734:	mov	r1, r0
   1a738:	mov	r0, r5
   1a73c:	sub	sp, fp, #24
   1a740:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a744:	b	11ad8 <fprintf@plt>
   1a748:	movw	r1, #18939	; 0x49fb
   1a74c:	mov	r0, #0
   1a750:	mov	r2, #5
   1a754:	movt	r1, #3
   1a758:	bl	11934 <dcgettext@plt>
   1a75c:	mov	r1, r0
   1a760:	ldr	r0, [r6, #8]
   1a764:	ldm	r6, {r2, r3}
   1a768:	str	r0, [sp]
   1a76c:	mov	r0, r5
   1a770:	bl	11ad8 <fprintf@plt>
   1a774:	sub	sp, fp, #24
   1a778:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a77c:	movw	r1, #18967	; 0x4a17
   1a780:	mov	r0, #0
   1a784:	mov	r2, #5
   1a788:	movt	r1, #3
   1a78c:	bl	11934 <dcgettext@plt>
   1a790:	mov	r1, r0
   1a794:	ldr	r0, [r6, #8]
   1a798:	ldm	r6, {r2, r3}
   1a79c:	ldr	r7, [r6, #12]
   1a7a0:	stm	sp, {r0, r7}
   1a7a4:	mov	r0, r5
   1a7a8:	bl	11ad8 <fprintf@plt>
   1a7ac:	sub	sp, fp, #24
   1a7b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a7b4:	movw	r1, #18999	; 0x4a37
   1a7b8:	mov	r0, #0
   1a7bc:	mov	r2, #5
   1a7c0:	movt	r1, #3
   1a7c4:	bl	11934 <dcgettext@plt>
   1a7c8:	mov	r1, r0
   1a7cc:	ldm	r6, {r2, r3}
   1a7d0:	ldr	r0, [r6, #8]
   1a7d4:	ldr	r7, [r6, #12]
   1a7d8:	ldr	r6, [r6, #16]
   1a7dc:	stm	sp, {r0, r7}
   1a7e0:	str	r6, [sp, #8]
   1a7e4:	mov	r0, r5
   1a7e8:	bl	11ad8 <fprintf@plt>
   1a7ec:	sub	sp, fp, #24
   1a7f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a7f4:	movw	r1, #19035	; 0x4a5b
   1a7f8:	mov	r0, #0
   1a7fc:	mov	r2, #5
   1a800:	movt	r1, #3
   1a804:	bl	11934 <dcgettext@plt>
   1a808:	mov	r1, r0
   1a80c:	ldm	r6, {r2, r3}
   1a810:	ldr	r0, [r6, #8]
   1a814:	ldr	r7, [r6, #12]
   1a818:	ldr	r4, [r6, #16]
   1a81c:	ldr	r6, [r6, #20]
   1a820:	stm	sp, {r0, r7}
   1a824:	str	r4, [sp, #8]
   1a828:	str	r6, [sp, #12]
   1a82c:	mov	r0, r5
   1a830:	bl	11ad8 <fprintf@plt>
   1a834:	sub	sp, fp, #24
   1a838:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a83c:	movw	r1, #19075	; 0x4a83
   1a840:	mov	r0, #0
   1a844:	mov	r2, #5
   1a848:	movt	r1, #3
   1a84c:	bl	11934 <dcgettext@plt>
   1a850:	mov	ip, r0
   1a854:	ldm	r6, {r2, r3}
   1a858:	ldr	r0, [r6, #8]
   1a85c:	ldr	r7, [r6, #12]
   1a860:	ldr	r4, [r6, #16]
   1a864:	ldr	r1, [r6, #20]
   1a868:	ldr	r6, [r6, #24]
   1a86c:	stm	sp, {r0, r7}
   1a870:	str	r4, [sp, #8]
   1a874:	str	r1, [sp, #12]
   1a878:	str	r6, [sp, #16]
   1a87c:	b	1a920 <__assert_fail@plt+0x8c74>
   1a880:	movw	r1, #19167	; 0x4adf
   1a884:	movt	r1, #3
   1a888:	mov	r0, #0
   1a88c:	mov	r2, #5
   1a890:	bl	11934 <dcgettext@plt>
   1a894:	mov	ip, r0
   1a898:	ldr	r2, [r6]
   1a89c:	ldr	r3, [r6, #4]
   1a8a0:	ldr	r0, [r6, #8]
   1a8a4:	ldr	r7, [r6, #12]
   1a8a8:	ldr	r4, [r6, #16]
   1a8ac:	ldr	r1, [r6, #20]
   1a8b0:	ldr	lr, [r6, #24]
   1a8b4:	ldr	r8, [r6, #28]
   1a8b8:	ldr	r6, [r6, #32]
   1a8bc:	stm	sp, {r0, r7}
   1a8c0:	str	r4, [sp, #8]
   1a8c4:	str	r1, [sp, #12]
   1a8c8:	str	lr, [sp, #16]
   1a8cc:	str	r8, [sp, #20]
   1a8d0:	str	r6, [sp, #24]
   1a8d4:	b	1a920 <__assert_fail@plt+0x8c74>
   1a8d8:	movw	r1, #19119	; 0x4aaf
   1a8dc:	mov	r0, #0
   1a8e0:	mov	r2, #5
   1a8e4:	movt	r1, #3
   1a8e8:	bl	11934 <dcgettext@plt>
   1a8ec:	mov	ip, r0
   1a8f0:	ldm	r6, {r2, r3}
   1a8f4:	ldr	r0, [r6, #8]
   1a8f8:	ldr	r7, [r6, #12]
   1a8fc:	ldr	r4, [r6, #16]
   1a900:	ldr	r1, [r6, #20]
   1a904:	ldr	lr, [r6, #24]
   1a908:	ldr	r6, [r6, #28]
   1a90c:	stm	sp, {r0, r7}
   1a910:	str	r4, [sp, #8]
   1a914:	str	r1, [sp, #12]
   1a918:	str	lr, [sp, #16]
   1a91c:	str	r6, [sp, #20]
   1a920:	mov	r0, r5
   1a924:	mov	r1, ip
   1a928:	bl	11ad8 <fprintf@plt>
   1a92c:	sub	sp, fp, #24
   1a930:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a934:	push	{r4, sl, fp, lr}
   1a938:	add	fp, sp, #8
   1a93c:	sub	sp, sp, #8
   1a940:	ldr	ip, [fp, #8]
   1a944:	mov	lr, #0
   1a948:	ldr	r4, [ip, lr, lsl #2]
   1a94c:	add	lr, lr, #1
   1a950:	cmp	r4, #0
   1a954:	bne	1a948 <__assert_fail@plt+0x8c9c>
   1a958:	sub	r4, lr, #1
   1a95c:	str	ip, [sp]
   1a960:	str	r4, [sp, #4]
   1a964:	bl	1a5e4 <__assert_fail@plt+0x8938>
   1a968:	sub	sp, fp, #8
   1a96c:	pop	{r4, sl, fp, pc}
   1a970:	push	{fp, lr}
   1a974:	mov	fp, sp
   1a978:	sub	sp, sp, #48	; 0x30
   1a97c:	ldr	ip, [fp, #8]
   1a980:	ldr	lr, [ip]
   1a984:	cmp	lr, #0
   1a988:	str	lr, [sp, #8]
   1a98c:	beq	1aa28 <__assert_fail@plt+0x8d7c>
   1a990:	ldr	lr, [ip, #4]
   1a994:	cmp	lr, #0
   1a998:	str	lr, [sp, #12]
   1a99c:	beq	1aa30 <__assert_fail@plt+0x8d84>
   1a9a0:	ldr	lr, [ip, #8]
   1a9a4:	cmp	lr, #0
   1a9a8:	str	lr, [sp, #16]
   1a9ac:	beq	1aa38 <__assert_fail@plt+0x8d8c>
   1a9b0:	ldr	lr, [ip, #12]
   1a9b4:	cmp	lr, #0
   1a9b8:	str	lr, [sp, #20]
   1a9bc:	beq	1aa40 <__assert_fail@plt+0x8d94>
   1a9c0:	ldr	lr, [ip, #16]
   1a9c4:	cmp	lr, #0
   1a9c8:	str	lr, [sp, #24]
   1a9cc:	beq	1aa48 <__assert_fail@plt+0x8d9c>
   1a9d0:	ldr	lr, [ip, #20]
   1a9d4:	cmp	lr, #0
   1a9d8:	str	lr, [sp, #28]
   1a9dc:	beq	1aa50 <__assert_fail@plt+0x8da4>
   1a9e0:	ldr	lr, [ip, #24]
   1a9e4:	cmp	lr, #0
   1a9e8:	str	lr, [sp, #32]
   1a9ec:	beq	1aa58 <__assert_fail@plt+0x8dac>
   1a9f0:	ldr	lr, [ip, #28]
   1a9f4:	cmp	lr, #0
   1a9f8:	str	lr, [sp, #36]	; 0x24
   1a9fc:	beq	1aa60 <__assert_fail@plt+0x8db4>
   1aa00:	ldr	lr, [ip, #32]
   1aa04:	cmp	lr, #0
   1aa08:	str	lr, [sp, #40]	; 0x28
   1aa0c:	beq	1aa68 <__assert_fail@plt+0x8dbc>
   1aa10:	ldr	lr, [ip, #36]	; 0x24
   1aa14:	mov	ip, #10
   1aa18:	cmp	lr, #0
   1aa1c:	str	lr, [sp, #44]	; 0x2c
   1aa20:	movweq	ip, #9
   1aa24:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa28:	mov	ip, #0
   1aa2c:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa30:	mov	ip, #1
   1aa34:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa38:	mov	ip, #2
   1aa3c:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa40:	mov	ip, #3
   1aa44:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa48:	mov	ip, #4
   1aa4c:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa50:	mov	ip, #5
   1aa54:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa58:	mov	ip, #6
   1aa5c:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa60:	mov	ip, #7
   1aa64:	b	1aa6c <__assert_fail@plt+0x8dc0>
   1aa68:	mov	ip, #8
   1aa6c:	add	lr, sp, #8
   1aa70:	str	ip, [sp, #4]
   1aa74:	str	lr, [sp]
   1aa78:	bl	1a5e4 <__assert_fail@plt+0x8938>
   1aa7c:	mov	sp, fp
   1aa80:	pop	{fp, pc}
   1aa84:	push	{fp, lr}
   1aa88:	mov	fp, sp
   1aa8c:	sub	sp, sp, #56	; 0x38
   1aa90:	add	ip, fp, #8
   1aa94:	str	ip, [sp, #12]
   1aa98:	ldr	lr, [fp, #8]
   1aa9c:	cmp	lr, #0
   1aaa0:	str	lr, [sp, #16]
   1aaa4:	beq	1ab40 <__assert_fail@plt+0x8e94>
   1aaa8:	ldr	lr, [ip, #4]
   1aaac:	cmp	lr, #0
   1aab0:	str	lr, [sp, #20]
   1aab4:	beq	1ab48 <__assert_fail@plt+0x8e9c>
   1aab8:	ldr	lr, [ip, #8]
   1aabc:	cmp	lr, #0
   1aac0:	str	lr, [sp, #24]
   1aac4:	beq	1ab50 <__assert_fail@plt+0x8ea4>
   1aac8:	ldr	lr, [ip, #12]
   1aacc:	cmp	lr, #0
   1aad0:	str	lr, [sp, #28]
   1aad4:	beq	1ab58 <__assert_fail@plt+0x8eac>
   1aad8:	ldr	lr, [ip, #16]
   1aadc:	cmp	lr, #0
   1aae0:	str	lr, [sp, #32]
   1aae4:	beq	1ab60 <__assert_fail@plt+0x8eb4>
   1aae8:	ldr	lr, [ip, #20]
   1aaec:	cmp	lr, #0
   1aaf0:	str	lr, [sp, #36]	; 0x24
   1aaf4:	beq	1ab68 <__assert_fail@plt+0x8ebc>
   1aaf8:	ldr	lr, [ip, #24]
   1aafc:	cmp	lr, #0
   1ab00:	str	lr, [sp, #40]	; 0x28
   1ab04:	beq	1ab70 <__assert_fail@plt+0x8ec4>
   1ab08:	ldr	lr, [ip, #28]
   1ab0c:	cmp	lr, #0
   1ab10:	str	lr, [sp, #44]	; 0x2c
   1ab14:	beq	1ab78 <__assert_fail@plt+0x8ecc>
   1ab18:	ldr	lr, [ip, #32]
   1ab1c:	cmp	lr, #0
   1ab20:	str	lr, [sp, #48]	; 0x30
   1ab24:	beq	1ab80 <__assert_fail@plt+0x8ed4>
   1ab28:	ldr	lr, [ip, #36]	; 0x24
   1ab2c:	mov	ip, #10
   1ab30:	cmp	lr, #0
   1ab34:	str	lr, [sp, #52]	; 0x34
   1ab38:	movweq	ip, #9
   1ab3c:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab40:	mov	ip, #0
   1ab44:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab48:	mov	ip, #1
   1ab4c:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab50:	mov	ip, #2
   1ab54:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab58:	mov	ip, #3
   1ab5c:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab60:	mov	ip, #4
   1ab64:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab68:	mov	ip, #5
   1ab6c:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab70:	mov	ip, #6
   1ab74:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab78:	mov	ip, #7
   1ab7c:	b	1ab84 <__assert_fail@plt+0x8ed8>
   1ab80:	mov	ip, #8
   1ab84:	add	lr, sp, #16
   1ab88:	str	ip, [sp, #4]
   1ab8c:	str	lr, [sp]
   1ab90:	bl	1a5e4 <__assert_fail@plt+0x8938>
   1ab94:	mov	sp, fp
   1ab98:	pop	{fp, pc}
   1ab9c:	push	{fp, lr}
   1aba0:	mov	fp, sp
   1aba4:	movw	r0, #25108	; 0x6214
   1aba8:	movt	r0, #4
   1abac:	ldr	r1, [r0]
   1abb0:	mov	r0, #10
   1abb4:	bl	11bc8 <fputc@plt>
   1abb8:	movw	r1, #19279	; 0x4b4f
   1abbc:	mov	r0, #0
   1abc0:	mov	r2, #5
   1abc4:	movt	r1, #3
   1abc8:	bl	11934 <dcgettext@plt>
   1abcc:	movw	r1, #18140	; 0x46dc
   1abd0:	movt	r1, #3
   1abd4:	bl	11868 <printf@plt>
   1abd8:	movw	r1, #19299	; 0x4b63
   1abdc:	mov	r0, #0
   1abe0:	mov	r2, #5
   1abe4:	movt	r1, #3
   1abe8:	bl	11934 <dcgettext@plt>
   1abec:	movw	r1, #17469	; 0x443d
   1abf0:	movw	r2, #18054	; 0x4686
   1abf4:	movt	r1, #3
   1abf8:	movt	r2, #3
   1abfc:	bl	11868 <printf@plt>
   1ac00:	movw	r1, #19319	; 0x4b77
   1ac04:	mov	r0, #0
   1ac08:	mov	r2, #5
   1ac0c:	movt	r1, #3
   1ac10:	bl	11934 <dcgettext@plt>
   1ac14:	movw	r1, #19358	; 0x4b9e
   1ac18:	movt	r1, #3
   1ac1c:	pop	{fp, lr}
   1ac20:	b	11868 <printf@plt>
   1ac24:	push	{r4, r5, r6, sl, fp, lr}
   1ac28:	add	fp, sp, #16
   1ac2c:	mov	r4, r2
   1ac30:	mov	r5, r1
   1ac34:	mov	r6, r0
   1ac38:	bl	1c3dc <__assert_fail@plt+0xa730>
   1ac3c:	cmp	r0, #0
   1ac40:	popne	{r4, r5, r6, sl, fp, pc}
   1ac44:	cmp	r6, #0
   1ac48:	beq	1ac5c <__assert_fail@plt+0x8fb0>
   1ac4c:	cmp	r5, #0
   1ac50:	cmpne	r4, #0
   1ac54:	bne	1ac5c <__assert_fail@plt+0x8fb0>
   1ac58:	pop	{r4, r5, r6, sl, fp, pc}
   1ac5c:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ac60:	push	{r4, r5, r6, sl, fp, lr}
   1ac64:	add	fp, sp, #16
   1ac68:	mov	r4, r2
   1ac6c:	mov	r5, r1
   1ac70:	mov	r6, r0
   1ac74:	bl	1c3dc <__assert_fail@plt+0xa730>
   1ac78:	cmp	r0, #0
   1ac7c:	popne	{r4, r5, r6, sl, fp, pc}
   1ac80:	cmp	r6, #0
   1ac84:	beq	1ac98 <__assert_fail@plt+0x8fec>
   1ac88:	cmp	r5, #0
   1ac8c:	cmpne	r4, #0
   1ac90:	bne	1ac98 <__assert_fail@plt+0x8fec>
   1ac94:	pop	{r4, r5, r6, sl, fp, pc}
   1ac98:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ac9c:	push	{fp, lr}
   1aca0:	mov	fp, sp
   1aca4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1aca8:	cmp	r0, #0
   1acac:	popne	{fp, pc}
   1acb0:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1acb4:	push	{fp, lr}
   1acb8:	mov	fp, sp
   1acbc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1acc0:	cmp	r0, #0
   1acc4:	popne	{fp, pc}
   1acc8:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1accc:	push	{fp, lr}
   1acd0:	mov	fp, sp
   1acd4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1acd8:	cmp	r0, #0
   1acdc:	popne	{fp, pc}
   1ace0:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ace4:	push	{r4, r5, fp, lr}
   1ace8:	add	fp, sp, #8
   1acec:	mov	r4, r1
   1acf0:	mov	r5, r0
   1acf4:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1acf8:	cmp	r0, #0
   1acfc:	popne	{r4, r5, fp, pc}
   1ad00:	cmp	r5, #0
   1ad04:	beq	1ad14 <__assert_fail@plt+0x9068>
   1ad08:	cmp	r4, #0
   1ad0c:	bne	1ad14 <__assert_fail@plt+0x9068>
   1ad10:	pop	{r4, r5, fp, pc}
   1ad14:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ad18:	push	{fp, lr}
   1ad1c:	mov	fp, sp
   1ad20:	cmp	r1, #0
   1ad24:	orreq	r1, r1, #1
   1ad28:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1ad2c:	cmp	r0, #0
   1ad30:	popne	{fp, pc}
   1ad34:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ad38:	push	{fp, lr}
   1ad3c:	mov	fp, sp
   1ad40:	clz	r3, r2
   1ad44:	lsr	ip, r3, #5
   1ad48:	clz	r3, r1
   1ad4c:	lsr	r3, r3, #5
   1ad50:	orrs	r3, r3, ip
   1ad54:	movwne	r1, #1
   1ad58:	movwne	r2, #1
   1ad5c:	bl	1c3dc <__assert_fail@plt+0xa730>
   1ad60:	cmp	r0, #0
   1ad64:	popne	{fp, pc}
   1ad68:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ad6c:	push	{fp, lr}
   1ad70:	mov	fp, sp
   1ad74:	mov	r2, r1
   1ad78:	mov	r1, r0
   1ad7c:	mov	r0, #0
   1ad80:	bl	1c3dc <__assert_fail@plt+0xa730>
   1ad84:	cmp	r0, #0
   1ad88:	popne	{fp, pc}
   1ad8c:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ad90:	push	{fp, lr}
   1ad94:	mov	fp, sp
   1ad98:	mov	r2, r1
   1ad9c:	mov	r1, r0
   1ada0:	clz	r0, r2
   1ada4:	clz	r3, r1
   1ada8:	lsr	r0, r0, #5
   1adac:	lsr	r3, r3, #5
   1adb0:	orrs	r0, r3, r0
   1adb4:	mov	r0, #0
   1adb8:	movwne	r1, #1
   1adbc:	movwne	r2, #1
   1adc0:	bl	1c3dc <__assert_fail@plt+0xa730>
   1adc4:	cmp	r0, #0
   1adc8:	popne	{fp, pc}
   1adcc:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1add0:	push	{r4, r5, r6, sl, fp, lr}
   1add4:	add	fp, sp, #16
   1add8:	ldr	r5, [r1]
   1addc:	mov	r4, r1
   1ade0:	mov	r6, r0
   1ade4:	cmp	r0, #0
   1ade8:	beq	1ae00 <__assert_fail@plt+0x9154>
   1adec:	mov	r0, #1
   1adf0:	add	r0, r0, r5, lsr #1
   1adf4:	adds	r5, r5, r0
   1adf8:	bcc	1ae08 <__assert_fail@plt+0x915c>
   1adfc:	b	1ae44 <__assert_fail@plt+0x9198>
   1ae00:	cmp	r5, #0
   1ae04:	movweq	r5, #64	; 0x40
   1ae08:	mov	r0, r6
   1ae0c:	mov	r1, r5
   1ae10:	mov	r2, #1
   1ae14:	bl	1c3dc <__assert_fail@plt+0xa730>
   1ae18:	cmp	r5, #0
   1ae1c:	mov	r1, r5
   1ae20:	movwne	r1, #1
   1ae24:	cmp	r0, #0
   1ae28:	bne	1ae3c <__assert_fail@plt+0x9190>
   1ae2c:	clz	r2, r6
   1ae30:	lsr	r2, r2, #5
   1ae34:	orrs	r1, r2, r1
   1ae38:	bne	1ae44 <__assert_fail@plt+0x9198>
   1ae3c:	str	r5, [r4]
   1ae40:	pop	{r4, r5, r6, sl, fp, pc}
   1ae44:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1ae48:	push	{r4, r5, r6, r7, fp, lr}
   1ae4c:	add	fp, sp, #16
   1ae50:	ldr	r5, [r1]
   1ae54:	mov	r6, r2
   1ae58:	mov	r4, r1
   1ae5c:	mov	r7, r0
   1ae60:	cmp	r0, #0
   1ae64:	beq	1ae7c <__assert_fail@plt+0x91d0>
   1ae68:	mov	r0, #1
   1ae6c:	add	r0, r0, r5, lsr #1
   1ae70:	adds	r5, r5, r0
   1ae74:	bcc	1ae94 <__assert_fail@plt+0x91e8>
   1ae78:	b	1aec8 <__assert_fail@plt+0x921c>
   1ae7c:	cmp	r5, #0
   1ae80:	bne	1ae94 <__assert_fail@plt+0x91e8>
   1ae84:	mov	r0, #64	; 0x40
   1ae88:	cmp	r6, #64	; 0x40
   1ae8c:	udiv	r5, r0, r6
   1ae90:	addhi	r5, r5, #1
   1ae94:	mov	r0, r7
   1ae98:	mov	r1, r5
   1ae9c:	mov	r2, r6
   1aea0:	bl	1c3dc <__assert_fail@plt+0xa730>
   1aea4:	cmp	r0, #0
   1aea8:	bne	1aec0 <__assert_fail@plt+0x9214>
   1aeac:	cmp	r7, #0
   1aeb0:	beq	1aec8 <__assert_fail@plt+0x921c>
   1aeb4:	cmp	r6, #0
   1aeb8:	cmpne	r5, #0
   1aebc:	bne	1aec8 <__assert_fail@plt+0x921c>
   1aec0:	str	r5, [r4]
   1aec4:	pop	{r4, r5, r6, r7, fp, pc}
   1aec8:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1aecc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aed0:	add	fp, sp, #24
   1aed4:	mov	r8, r1
   1aed8:	ldr	r1, [r1]
   1aedc:	mov	r5, r0
   1aee0:	add	r0, r1, r1, asr #1
   1aee4:	cmp	r0, r1
   1aee8:	mvnvs	r0, #-2147483648	; 0x80000000
   1aeec:	cmp	r0, r3
   1aef0:	mov	r7, r0
   1aef4:	movgt	r7, r3
   1aef8:	cmn	r3, #1
   1aefc:	movle	r7, r0
   1af00:	ldr	r0, [fp, #8]
   1af04:	cmn	r0, #1
   1af08:	ble	1af30 <__assert_fail@plt+0x9284>
   1af0c:	cmp	r0, #0
   1af10:	beq	1af84 <__assert_fail@plt+0x92d8>
   1af14:	cmn	r7, #1
   1af18:	ble	1af58 <__assert_fail@plt+0x92ac>
   1af1c:	mvn	r4, #-2147483648	; 0x80000000
   1af20:	udiv	r6, r4, r0
   1af24:	cmp	r6, r7
   1af28:	bge	1af84 <__assert_fail@plt+0x92d8>
   1af2c:	b	1af94 <__assert_fail@plt+0x92e8>
   1af30:	cmn	r7, #1
   1af34:	ble	1af74 <__assert_fail@plt+0x92c8>
   1af38:	cmn	r0, #1
   1af3c:	beq	1af84 <__assert_fail@plt+0x92d8>
   1af40:	mov	r6, #-2147483648	; 0x80000000
   1af44:	mvn	r4, #-2147483648	; 0x80000000
   1af48:	sdiv	r6, r6, r0
   1af4c:	cmp	r6, r7
   1af50:	bge	1af84 <__assert_fail@plt+0x92d8>
   1af54:	b	1af94 <__assert_fail@plt+0x92e8>
   1af58:	beq	1af84 <__assert_fail@plt+0x92d8>
   1af5c:	mov	r6, #-2147483648	; 0x80000000
   1af60:	mvn	r4, #-2147483648	; 0x80000000
   1af64:	sdiv	r6, r6, r7
   1af68:	cmp	r6, r0
   1af6c:	bge	1af84 <__assert_fail@plt+0x92d8>
   1af70:	b	1af94 <__assert_fail@plt+0x92e8>
   1af74:	mvn	r4, #-2147483648	; 0x80000000
   1af78:	sdiv	r6, r4, r0
   1af7c:	cmp	r7, r6
   1af80:	blt	1af94 <__assert_fail@plt+0x92e8>
   1af84:	mul	r6, r7, r0
   1af88:	mov	r4, #64	; 0x40
   1af8c:	cmp	r6, #63	; 0x3f
   1af90:	bgt	1af9c <__assert_fail@plt+0x92f0>
   1af94:	sdiv	r7, r4, r0
   1af98:	mul	r6, r7, r0
   1af9c:	cmp	r5, #0
   1afa0:	moveq	r4, #0
   1afa4:	streq	r4, [r8]
   1afa8:	sub	r4, r7, r1
   1afac:	cmp	r4, r2
   1afb0:	bge	1b05c <__assert_fail@plt+0x93b0>
   1afb4:	add	r7, r1, r2
   1afb8:	mov	r6, #0
   1afbc:	mov	r2, #0
   1afc0:	cmp	r7, r3
   1afc4:	movwgt	r6, #1
   1afc8:	cmn	r3, #1
   1afcc:	movwgt	r2, #1
   1afd0:	cmp	r7, r1
   1afd4:	bvs	1b090 <__assert_fail@plt+0x93e4>
   1afd8:	ands	r1, r2, r6
   1afdc:	bne	1b090 <__assert_fail@plt+0x93e4>
   1afe0:	cmn	r0, #1
   1afe4:	ble	1b00c <__assert_fail@plt+0x9360>
   1afe8:	cmp	r0, #0
   1afec:	beq	1b058 <__assert_fail@plt+0x93ac>
   1aff0:	cmn	r7, #1
   1aff4:	ble	1b030 <__assert_fail@plt+0x9384>
   1aff8:	mvn	r1, #-2147483648	; 0x80000000
   1affc:	udiv	r1, r1, r0
   1b000:	cmp	r1, r7
   1b004:	bge	1b058 <__assert_fail@plt+0x93ac>
   1b008:	b	1b090 <__assert_fail@plt+0x93e4>
   1b00c:	cmn	r7, #1
   1b010:	ble	1b048 <__assert_fail@plt+0x939c>
   1b014:	cmn	r0, #1
   1b018:	beq	1b058 <__assert_fail@plt+0x93ac>
   1b01c:	mov	r1, #-2147483648	; 0x80000000
   1b020:	sdiv	r1, r1, r0
   1b024:	cmp	r1, r7
   1b028:	bge	1b058 <__assert_fail@plt+0x93ac>
   1b02c:	b	1b090 <__assert_fail@plt+0x93e4>
   1b030:	beq	1b058 <__assert_fail@plt+0x93ac>
   1b034:	mov	r1, #-2147483648	; 0x80000000
   1b038:	sdiv	r1, r1, r7
   1b03c:	cmp	r1, r0
   1b040:	bge	1b058 <__assert_fail@plt+0x93ac>
   1b044:	b	1b090 <__assert_fail@plt+0x93e4>
   1b048:	mvn	r1, #-2147483648	; 0x80000000
   1b04c:	sdiv	r1, r1, r0
   1b050:	cmp	r7, r1
   1b054:	blt	1b090 <__assert_fail@plt+0x93e4>
   1b058:	mul	r6, r7, r0
   1b05c:	mov	r0, r5
   1b060:	mov	r1, r6
   1b064:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1b068:	cmp	r6, #0
   1b06c:	movwne	r6, #1
   1b070:	cmp	r0, #0
   1b074:	bne	1b088 <__assert_fail@plt+0x93dc>
   1b078:	clz	r1, r5
   1b07c:	lsr	r1, r1, #5
   1b080:	orrs	r1, r1, r6
   1b084:	bne	1b090 <__assert_fail@plt+0x93e4>
   1b088:	str	r7, [r8]
   1b08c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b090:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b094:	push	{fp, lr}
   1b098:	mov	fp, sp
   1b09c:	mov	r1, #1
   1b0a0:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   1b0a4:	cmp	r0, #0
   1b0a8:	popne	{fp, pc}
   1b0ac:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b0b0:	push	{fp, lr}
   1b0b4:	mov	fp, sp
   1b0b8:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   1b0bc:	cmp	r0, #0
   1b0c0:	popne	{fp, pc}
   1b0c4:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b0c8:	push	{fp, lr}
   1b0cc:	mov	fp, sp
   1b0d0:	mov	r1, #1
   1b0d4:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   1b0d8:	cmp	r0, #0
   1b0dc:	popne	{fp, pc}
   1b0e0:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b0e4:	push	{fp, lr}
   1b0e8:	mov	fp, sp
   1b0ec:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   1b0f0:	cmp	r0, #0
   1b0f4:	popne	{fp, pc}
   1b0f8:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b0fc:	push	{r4, r5, fp, lr}
   1b100:	add	fp, sp, #8
   1b104:	mov	r5, r0
   1b108:	mov	r0, r1
   1b10c:	mov	r4, r1
   1b110:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1b114:	cmp	r0, #0
   1b118:	beq	1b12c <__assert_fail@plt+0x9480>
   1b11c:	mov	r1, r5
   1b120:	mov	r2, r4
   1b124:	pop	{r4, r5, fp, lr}
   1b128:	b	118ec <memcpy@plt>
   1b12c:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b130:	push	{r4, r5, fp, lr}
   1b134:	add	fp, sp, #8
   1b138:	mov	r5, r0
   1b13c:	mov	r0, r1
   1b140:	mov	r4, r1
   1b144:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1b148:	cmp	r0, #0
   1b14c:	beq	1b160 <__assert_fail@plt+0x94b4>
   1b150:	mov	r1, r5
   1b154:	mov	r2, r4
   1b158:	pop	{r4, r5, fp, lr}
   1b15c:	b	118ec <memcpy@plt>
   1b160:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b164:	push	{r4, r5, fp, lr}
   1b168:	add	fp, sp, #8
   1b16c:	mov	r5, r0
   1b170:	add	r0, r1, #1
   1b174:	mov	r4, r1
   1b178:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1b17c:	cmp	r0, #0
   1b180:	beq	1b19c <__assert_fail@plt+0x94f0>
   1b184:	mov	r1, #0
   1b188:	mov	r2, r4
   1b18c:	strb	r1, [r0, r4]
   1b190:	mov	r1, r5
   1b194:	pop	{r4, r5, fp, lr}
   1b198:	b	118ec <memcpy@plt>
   1b19c:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b1a0:	push	{r4, r5, fp, lr}
   1b1a4:	add	fp, sp, #8
   1b1a8:	mov	r4, r0
   1b1ac:	bl	11ac0 <strlen@plt>
   1b1b0:	add	r5, r0, #1
   1b1b4:	mov	r0, r5
   1b1b8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1b1bc:	cmp	r0, #0
   1b1c0:	beq	1b1d4 <__assert_fail@plt+0x9528>
   1b1c4:	mov	r1, r4
   1b1c8:	mov	r2, r5
   1b1cc:	pop	{r4, r5, fp, lr}
   1b1d0:	b	118ec <memcpy@plt>
   1b1d4:	bl	1b1d8 <__assert_fail@plt+0x952c>
   1b1d8:	push	{fp, lr}
   1b1dc:	mov	fp, sp
   1b1e0:	movw	r0, #25008	; 0x61b0
   1b1e4:	movw	r1, #19434	; 0x4bea
   1b1e8:	mov	r2, #5
   1b1ec:	movt	r0, #4
   1b1f0:	movt	r1, #3
   1b1f4:	ldr	r4, [r0]
   1b1f8:	mov	r0, #0
   1b1fc:	bl	11934 <dcgettext@plt>
   1b200:	movw	r2, #20348	; 0x4f7c
   1b204:	mov	r3, r0
   1b208:	mov	r0, r4
   1b20c:	mov	r1, #0
   1b210:	movt	r2, #3
   1b214:	bl	119dc <error@plt>
   1b218:	bl	11c70 <abort@plt>
   1b21c:	push	{fp, lr}
   1b220:	mov	fp, sp
   1b224:	sub	sp, sp, #8
   1b228:	movw	ip, #25008	; 0x61b0
   1b22c:	movt	ip, #4
   1b230:	ldr	ip, [ip]
   1b234:	str	ip, [sp, #4]
   1b238:	ldr	ip, [fp, #8]
   1b23c:	str	ip, [sp]
   1b240:	bl	1b248 <__assert_fail@plt+0x959c>
   1b244:	bl	11c70 <abort@plt>
   1b248:	push	{r4, r5, r6, r7, fp, lr}
   1b24c:	add	fp, sp, #16
   1b250:	sub	sp, sp, #16
   1b254:	sub	r0, r0, #1
   1b258:	cmp	r0, #4
   1b25c:	bcs	1b2dc <__assert_fail@plt+0x9630>
   1b260:	mov	r5, r1
   1b264:	movw	r1, #19548	; 0x4c5c
   1b268:	ldr	r4, [fp, #12]
   1b26c:	ldr	r6, [fp, #8]
   1b270:	movt	r1, #3
   1b274:	cmn	r5, #1
   1b278:	ldr	r1, [r1, r0, lsl #2]
   1b27c:	ble	1b290 <__assert_fail@plt+0x95e4>
   1b280:	ldr	r7, [r3, r5, lsl #4]
   1b284:	movw	r5, #19451	; 0x4bfb
   1b288:	movt	r5, #3
   1b28c:	b	1b2ac <__assert_fail@plt+0x9600>
   1b290:	mov	r0, #0
   1b294:	add	r7, sp, #14
   1b298:	strb	r0, [sp, #15]
   1b29c:	movw	r0, #19451	; 0x4bfb
   1b2a0:	strb	r2, [sp, #14]
   1b2a4:	movt	r0, #3
   1b2a8:	sub	r5, r0, r5
   1b2ac:	mov	r0, #0
   1b2b0:	mov	r2, #5
   1b2b4:	bl	11934 <dcgettext@plt>
   1b2b8:	mov	r2, r0
   1b2bc:	mov	r0, r4
   1b2c0:	mov	r1, #0
   1b2c4:	mov	r3, r5
   1b2c8:	str	r7, [sp]
   1b2cc:	str	r6, [sp, #4]
   1b2d0:	bl	119dc <error@plt>
   1b2d4:	sub	sp, fp, #16
   1b2d8:	pop	{r4, r5, r6, r7, fp, pc}
   1b2dc:	bl	11c70 <abort@plt>
   1b2e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e4:	add	fp, sp, #28
   1b2e8:	sub	sp, sp, #44	; 0x2c
   1b2ec:	cmp	r2, #37	; 0x25
   1b2f0:	bcs	1bf74 <__assert_fail@plt+0xa2c8>
   1b2f4:	ldr	sl, [fp, #8]
   1b2f8:	mov	r6, r2
   1b2fc:	mov	r7, r1
   1b300:	mov	r4, r0
   1b304:	str	r3, [sp, #36]	; 0x24
   1b308:	bl	11af0 <__errno_location@plt>
   1b30c:	mov	r5, r0
   1b310:	mov	r0, #0
   1b314:	str	r0, [r5]
   1b318:	bl	11a84 <__ctype_b_loc@plt>
   1b31c:	ldr	r1, [r0]
   1b320:	mov	r2, r4
   1b324:	ldrb	r0, [r2], #1
   1b328:	add	r3, r1, r0, lsl #1
   1b32c:	ldrb	r3, [r3, #1]
   1b330:	tst	r3, #32
   1b334:	bne	1b324 <__assert_fail@plt+0x9678>
   1b338:	cmp	r7, #0
   1b33c:	sub	r9, fp, #32
   1b340:	mov	r8, #4
   1b344:	movne	r9, r7
   1b348:	cmp	r0, #45	; 0x2d
   1b34c:	beq	1b70c <__assert_fail@plt+0x9a60>
   1b350:	mov	r0, r4
   1b354:	mov	r1, r9
   1b358:	mov	r2, r6
   1b35c:	mov	r3, #0
   1b360:	bl	11904 <__strtoull_internal@plt>
   1b364:	mov	r7, r1
   1b368:	ldr	r1, [r9]
   1b36c:	cmp	r1, r4
   1b370:	beq	1b3a8 <__assert_fail@plt+0x96fc>
   1b374:	mov	r6, r0
   1b378:	ldr	r0, [r5]
   1b37c:	cmp	r0, #0
   1b380:	beq	1b6c4 <__assert_fail@plt+0x9a18>
   1b384:	cmp	r0, #34	; 0x22
   1b388:	bne	1b70c <__assert_fail@plt+0x9a60>
   1b38c:	mov	r8, #1
   1b390:	cmp	sl, #0
   1b394:	beq	1bf60 <__assert_fail@plt+0xa2b4>
   1b398:	ldrb	r4, [r1]
   1b39c:	cmp	r4, #0
   1b3a0:	bne	1b3ec <__assert_fail@plt+0x9740>
   1b3a4:	b	1bf60 <__assert_fail@plt+0xa2b4>
   1b3a8:	cmp	sl, #0
   1b3ac:	beq	1b70c <__assert_fail@plt+0x9a60>
   1b3b0:	mov	r5, r1
   1b3b4:	ldrb	r1, [r4]
   1b3b8:	cmp	r1, #0
   1b3bc:	beq	1b70c <__assert_fail@plt+0x9a60>
   1b3c0:	mov	r0, sl
   1b3c4:	bl	11acc <strchr@plt>
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b70c <__assert_fail@plt+0x9a60>
   1b3d0:	mov	r1, r5
   1b3d4:	mov	r8, #0
   1b3d8:	mov	r6, #1
   1b3dc:	mov	r7, #0
   1b3e0:	ldrb	r4, [r1]
   1b3e4:	cmp	r4, #0
   1b3e8:	beq	1bf60 <__assert_fail@plt+0xa2b4>
   1b3ec:	str	r1, [sp, #32]
   1b3f0:	mov	r0, sl
   1b3f4:	mov	r1, r4
   1b3f8:	bl	11acc <strchr@plt>
   1b3fc:	cmp	r0, #0
   1b400:	beq	1b700 <__assert_fail@plt+0x9a54>
   1b404:	sub	r0, r4, #69	; 0x45
   1b408:	mov	r1, #1
   1b40c:	mov	r3, #0
   1b410:	mov	r5, #1024	; 0x400
   1b414:	cmp	r0, #47	; 0x2f
   1b418:	str	r1, [sp, #28]
   1b41c:	bhi	1b520 <__assert_fail@plt+0x9874>
   1b420:	add	r1, pc, #0
   1b424:	ldr	pc, [r1, r0, lsl #2]
   1b428:	andeq	fp, r1, r8, ror #9
   1b42c:	andeq	fp, r1, r0, lsr #10
   1b430:	andeq	fp, r1, r8, ror #9
   1b434:	andeq	fp, r1, r0, lsr #10
   1b438:	andeq	fp, r1, r0, lsr #10
   1b43c:	andeq	fp, r1, r0, lsr #10
   1b440:	andeq	fp, r1, r8, ror #9
   1b444:	andeq	fp, r1, r0, lsr #10
   1b448:	andeq	fp, r1, r8, ror #9
   1b44c:	andeq	fp, r1, r0, lsr #10
   1b450:	andeq	fp, r1, r0, lsr #10
   1b454:	andeq	fp, r1, r8, ror #9
   1b458:	andeq	fp, r1, r0, lsr #10
   1b45c:	andeq	fp, r1, r0, lsr #10
   1b460:	andeq	fp, r1, r0, lsr #10
   1b464:	andeq	fp, r1, r8, ror #9
   1b468:	andeq	fp, r1, r0, lsr #10
   1b46c:	andeq	fp, r1, r0, lsr #10
   1b470:	andeq	fp, r1, r0, lsr #10
   1b474:	andeq	fp, r1, r0, lsr #10
   1b478:	andeq	fp, r1, r8, ror #9
   1b47c:	andeq	fp, r1, r8, ror #9
   1b480:	andeq	fp, r1, r0, lsr #10
   1b484:	andeq	fp, r1, r0, lsr #10
   1b488:	andeq	fp, r1, r0, lsr #10
   1b48c:	andeq	fp, r1, r0, lsr #10
   1b490:	andeq	fp, r1, r0, lsr #10
   1b494:	andeq	fp, r1, r0, lsr #10
   1b498:	andeq	fp, r1, r0, lsr #10
   1b49c:	andeq	fp, r1, r0, lsr #10
   1b4a0:	andeq	fp, r1, r0, lsr #10
   1b4a4:	andeq	fp, r1, r0, lsr #10
   1b4a8:	andeq	fp, r1, r0, lsr #10
   1b4ac:	andeq	fp, r1, r0, lsr #10
   1b4b0:	andeq	fp, r1, r8, ror #9
   1b4b4:	andeq	fp, r1, r0, lsr #10
   1b4b8:	andeq	fp, r1, r0, lsr #10
   1b4bc:	andeq	fp, r1, r0, lsr #10
   1b4c0:	andeq	fp, r1, r8, ror #9
   1b4c4:	andeq	fp, r1, r0, lsr #10
   1b4c8:	andeq	fp, r1, r8, ror #9
   1b4cc:	andeq	fp, r1, r0, lsr #10
   1b4d0:	andeq	fp, r1, r0, lsr #10
   1b4d4:	andeq	fp, r1, r0, lsr #10
   1b4d8:	andeq	fp, r1, r0, lsr #10
   1b4dc:	andeq	fp, r1, r0, lsr #10
   1b4e0:	andeq	fp, r1, r0, lsr #10
   1b4e4:	andeq	fp, r1, r8, ror #9
   1b4e8:	mov	r0, sl
   1b4ec:	mov	r1, #48	; 0x30
   1b4f0:	bl	11acc <strchr@plt>
   1b4f4:	cmp	r0, #0
   1b4f8:	beq	1b51c <__assert_fail@plt+0x9870>
   1b4fc:	ldr	r1, [sp, #32]
   1b500:	ldrb	r0, [r1, #1]
   1b504:	cmp	r0, #66	; 0x42
   1b508:	cmpne	r0, #68	; 0x44
   1b50c:	bne	1b6d4 <__assert_fail@plt+0x9a28>
   1b510:	mov	r5, #1000	; 0x3e8
   1b514:	mov	r0, #2
   1b518:	str	r0, [sp, #28]
   1b51c:	mov	r3, #0
   1b520:	sub	r0, r4, #66	; 0x42
   1b524:	cmp	r0, #53	; 0x35
   1b528:	bhi	1b700 <__assert_fail@plt+0x9a54>
   1b52c:	add	r1, pc, #0
   1b530:	ldr	pc, [r1, r0, lsl #2]
   1b534:	andeq	fp, r1, r0, ror sl
   1b538:	andeq	fp, r1, r0, lsl #14
   1b53c:	andeq	fp, r1, r0, lsl #14
   1b540:	muleq	r1, r8, sl
   1b544:	andeq	fp, r1, r0, lsl #14
   1b548:	andeq	fp, r1, ip, lsl #12
   1b54c:	andeq	fp, r1, r0, lsl #14
   1b550:	andeq	fp, r1, r0, lsl #14
   1b554:	andeq	fp, r1, r0, lsl #14
   1b558:	andeq	fp, r1, r8, lsl r7
   1b55c:	andeq	fp, r1, r0, lsl #14
   1b560:	andeq	fp, r1, r0, ror #14
   1b564:	andeq	fp, r1, r0, lsl #14
   1b568:	andeq	fp, r1, r0, lsl #14
   1b56c:	andeq	fp, r1, ip, ror #23
   1b570:	andeq	fp, r1, r0, lsl #14
   1b574:	andeq	fp, r1, r0, lsl #14
   1b578:	andeq	fp, r1, r0, lsl #14
   1b57c:	andeq	fp, r1, ip, ror #15
   1b580:	andeq	fp, r1, r0, lsl #14
   1b584:	andeq	fp, r1, r0, lsl #14
   1b588:	andeq	fp, r1, r0, lsl #14
   1b58c:	andeq	fp, r1, r0, lsl #14
   1b590:	andeq	fp, r1, r4, lsl sp
   1b594:	ldrdeq	fp, [r1], -r4
   1b598:	andeq	fp, r1, r0, lsl #14
   1b59c:	andeq	fp, r1, r0, lsl #14
   1b5a0:	andeq	fp, r1, r0, lsl #14
   1b5a4:	andeq	fp, r1, r0, lsl #14
   1b5a8:	andeq	fp, r1, r0, lsl #14
   1b5ac:	andeq	fp, r1, r0, lsl #14
   1b5b0:	andeq	fp, r1, r0, lsl #14
   1b5b4:	andeq	fp, r1, r8, ror #29
   1b5b8:	andeq	fp, r1, r0, asr #30
   1b5bc:	andeq	fp, r1, r0, lsl #14
   1b5c0:	andeq	fp, r1, r0, lsl #14
   1b5c4:	andeq	fp, r1, r0, lsl #14
   1b5c8:	andeq	fp, r1, ip, lsl #12
   1b5cc:	andeq	fp, r1, r0, lsl #14
   1b5d0:	andeq	fp, r1, r0, lsl #14
   1b5d4:	andeq	fp, r1, r0, lsl #14
   1b5d8:	andeq	fp, r1, r8, lsl r7
   1b5dc:	andeq	fp, r1, r0, lsl #14
   1b5e0:	andeq	fp, r1, r0, ror #14
   1b5e4:	andeq	fp, r1, r0, lsl #14
   1b5e8:	andeq	fp, r1, r0, lsl #14
   1b5ec:	andeq	fp, r1, r0, lsl #14
   1b5f0:	andeq	fp, r1, r0, lsl #14
   1b5f4:	andeq	fp, r1, r0, lsl #14
   1b5f8:	andeq	fp, r1, r0, lsl #14
   1b5fc:	andeq	fp, r1, ip, ror #15
   1b600:	andeq	fp, r1, r0, lsl #14
   1b604:	andeq	fp, r1, r0, lsl #14
   1b608:	andeq	fp, r1, ip, lsl pc
   1b60c:	mvn	r0, #0
   1b610:	mvn	r1, #0
   1b614:	mov	r2, r5
   1b618:	mov	sl, r3
   1b61c:	bl	3334c <__assert_fail@plt+0x216a0>
   1b620:	subs	r3, r0, r6
   1b624:	umull	r4, r2, r6, r5
   1b628:	mov	lr, #0
   1b62c:	str	r1, [sp, #20]
   1b630:	sbcs	r3, r1, r7
   1b634:	movwcc	lr, #1
   1b638:	mla	ip, r6, sl, r2
   1b63c:	mov	r2, r1
   1b640:	mov	r2, #0
   1b644:	cmp	lr, #0
   1b648:	mla	r7, r7, r5, ip
   1b64c:	mvnne	r4, #0
   1b650:	mvnne	r7, #0
   1b654:	subs	r6, r0, r4
   1b658:	sbcs	r6, r1, r7
   1b65c:	umull	r3, r6, r4, r5
   1b660:	movwcc	r2, #1
   1b664:	cmp	r2, #0
   1b668:	mvnne	r3, #0
   1b66c:	cmp	r2, #0
   1b670:	str	r6, [sp, #16]
   1b674:	umull	r6, ip, r3, r5
   1b678:	mla	r1, r3, sl, ip
   1b67c:	ldr	ip, [sp, #16]
   1b680:	str	r1, [sp, #12]
   1b684:	mla	r4, r4, sl, ip
   1b688:	mla	r4, r7, r5, r4
   1b68c:	mvnne	r4, #0
   1b690:	subs	r0, r0, r3
   1b694:	ldr	r0, [sp, #20]
   1b698:	ldr	r7, [sp, #12]
   1b69c:	sbcs	r0, r0, r4
   1b6a0:	mov	r0, #0
   1b6a4:	mla	r7, r4, r5, r7
   1b6a8:	movwcc	r0, #1
   1b6ac:	cmp	r0, #0
   1b6b0:	mov	r1, r0
   1b6b4:	orr	r0, lr, r2
   1b6b8:	mvnne	r7, #0
   1b6bc:	mvnne	r6, #0
   1b6c0:	b	1bd0c <__assert_fail@plt+0xa060>
   1b6c4:	mov	r8, r0
   1b6c8:	cmp	sl, #0
   1b6cc:	bne	1b398 <__assert_fail@plt+0x96ec>
   1b6d0:	b	1bf60 <__assert_fail@plt+0xa2b4>
   1b6d4:	cmp	r0, #105	; 0x69
   1b6d8:	mov	r3, #0
   1b6dc:	bne	1b520 <__assert_fail@plt+0x9874>
   1b6e0:	ldrb	r0, [r1, #2]
   1b6e4:	mov	r1, #1
   1b6e8:	cmp	r0, #66	; 0x42
   1b6ec:	movweq	r1, #3
   1b6f0:	str	r1, [sp, #28]
   1b6f4:	sub	r0, r4, #66	; 0x42
   1b6f8:	cmp	r0, #53	; 0x35
   1b6fc:	bls	1b52c <__assert_fail@plt+0x9880>
   1b700:	ldr	r0, [sp, #36]	; 0x24
   1b704:	orr	r8, r8, #2
   1b708:	strd	r6, [r0]
   1b70c:	mov	r0, r8
   1b710:	sub	sp, fp, #28
   1b714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b718:	mvn	r0, #0
   1b71c:	mvn	r1, #0
   1b720:	mov	r2, r5
   1b724:	mov	r4, r3
   1b728:	bl	3334c <__assert_fail@plt+0x216a0>
   1b72c:	subs	r0, r0, r6
   1b730:	mov	r2, #0
   1b734:	sbcs	r0, r1, r7
   1b738:	umull	r0, r1, r6, r5
   1b73c:	movwcc	r2, #1
   1b740:	cmp	r2, #0
   1b744:	mla	r1, r6, r4, r1
   1b748:	mov	r3, r2
   1b74c:	mvnne	r0, #0
   1b750:	mla	r7, r7, r5, r1
   1b754:	mvnne	r7, #0
   1b758:	mov	r6, r0
   1b75c:	b	1bf40 <__assert_fail@plt+0xa294>
   1b760:	mvn	r0, #0
   1b764:	mvn	r1, #0
   1b768:	mov	r2, r5
   1b76c:	str	r3, [sp, #24]
   1b770:	bl	3334c <__assert_fail@plt+0x216a0>
   1b774:	subs	r3, r0, r6
   1b778:	mov	ip, r0
   1b77c:	umull	r4, r0, r6, r5
   1b780:	mov	sl, #0
   1b784:	sbcs	r3, r1, r7
   1b788:	mov	r3, #0
   1b78c:	movwcc	r3, #1
   1b790:	cmp	r3, #0
   1b794:	str	r0, [sp, #20]
   1b798:	ldr	r0, [sp, #24]
   1b79c:	mvnne	r4, #0
   1b7a0:	cmp	r3, #0
   1b7a4:	umull	lr, r2, r4, r5
   1b7a8:	mla	r2, r4, r0, r2
   1b7ac:	str	r2, [sp, #16]
   1b7b0:	ldr	r2, [sp, #20]
   1b7b4:	mla	r6, r6, r0, r2
   1b7b8:	ldr	r0, [sp, #16]
   1b7bc:	mla	r6, r7, r5, r6
   1b7c0:	mvnne	r6, #0
   1b7c4:	mla	r7, r6, r5, r0
   1b7c8:	subs	r0, ip, r4
   1b7cc:	sbcs	r0, r1, r6
   1b7d0:	movwcc	sl, #1
   1b7d4:	cmp	sl, #0
   1b7d8:	orr	r3, r3, sl
   1b7dc:	mvnne	lr, #0
   1b7e0:	mvnne	r7, #0
   1b7e4:	mov	r6, lr
   1b7e8:	b	1bf40 <__assert_fail@plt+0xa294>
   1b7ec:	mvn	r0, #0
   1b7f0:	mvn	r1, #0
   1b7f4:	mov	r2, r5
   1b7f8:	mov	sl, r3
   1b7fc:	bl	3334c <__assert_fail@plt+0x216a0>
   1b800:	subs	r3, r0, r6
   1b804:	mov	ip, r1
   1b808:	umull	r2, lr, r6, r5
   1b80c:	str	r0, [sp, #20]
   1b810:	sbcs	r3, r1, r7
   1b814:	mov	r1, #0
   1b818:	str	ip, [sp, #16]
   1b81c:	movwcc	r1, #1
   1b820:	mla	r6, r6, sl, lr
   1b824:	mov	lr, #0
   1b828:	cmp	r1, #0
   1b82c:	mla	r7, r7, r5, r6
   1b830:	mvnne	r2, #0
   1b834:	cmp	r1, #0
   1b838:	umull	r3, r4, r2, r5
   1b83c:	mvnne	r7, #0
   1b840:	mla	r4, r2, sl, r4
   1b844:	subs	r2, r0, r2
   1b848:	sbcs	r2, ip, r7
   1b84c:	mla	r4, r7, r5, r4
   1b850:	mov	r2, #0
   1b854:	movwcc	lr, #1
   1b858:	cmp	lr, #0
   1b85c:	mvnne	r3, #0
   1b860:	mvnne	r4, #0
   1b864:	subs	r7, r0, r3
   1b868:	mov	r0, r5
   1b86c:	sbcs	r7, ip, r4
   1b870:	umull	r5, r7, r3, r5
   1b874:	movwcc	r2, #1
   1b878:	cmp	r2, #0
   1b87c:	mla	r3, r3, sl, r7
   1b880:	mvnne	r5, #0
   1b884:	cmp	r2, #0
   1b888:	mla	r3, r4, r0, r3
   1b88c:	umull	r6, ip, r5, r0
   1b890:	mvnne	r3, #0
   1b894:	mla	ip, r5, sl, ip
   1b898:	mla	r7, r3, r0, ip
   1b89c:	ldr	r0, [sp, #20]
   1b8a0:	subs	r0, r0, r5
   1b8a4:	ldr	r0, [sp, #16]
   1b8a8:	sbcs	r0, r0, r3
   1b8ac:	mov	r0, #0
   1b8b0:	movwcc	r0, #1
   1b8b4:	cmp	r0, #0
   1b8b8:	mov	r3, r0
   1b8bc:	orr	r0, r1, lr
   1b8c0:	orr	r0, r0, r2
   1b8c4:	mvnne	r7, #0
   1b8c8:	mvnne	r6, #0
   1b8cc:	orr	r3, r0, r3
   1b8d0:	b	1bf40 <__assert_fail@plt+0xa294>
   1b8d4:	mvn	r0, #0
   1b8d8:	mvn	r1, #0
   1b8dc:	mov	r2, r5
   1b8e0:	mov	r4, r3
   1b8e4:	str	r3, [sp, #24]
   1b8e8:	bl	3334c <__assert_fail@plt+0x216a0>
   1b8ec:	umull	r3, r2, r6, r5
   1b8f0:	mla	r2, r6, r4, r2
   1b8f4:	subs	r6, r0, r6
   1b8f8:	sbcs	r6, r1, r7
   1b8fc:	mov	r6, #0
   1b900:	mla	r2, r7, r5, r2
   1b904:	mov	r7, #0
   1b908:	movwcc	r6, #1
   1b90c:	cmp	r6, #0
   1b910:	str	r6, [sp, #20]
   1b914:	mvnne	r3, #0
   1b918:	mvnne	r2, #0
   1b91c:	subs	r4, r0, r3
   1b920:	umull	r6, ip, r3, r5
   1b924:	sbcs	r4, r1, r2
   1b928:	ldr	r4, [sp, #24]
   1b92c:	movwcc	r7, #1
   1b930:	cmp	r7, #0
   1b934:	mov	lr, r7
   1b938:	str	r7, [sp, #16]
   1b93c:	mvnne	r6, #0
   1b940:	cmp	lr, #0
   1b944:	mov	lr, #0
   1b948:	umull	sl, r7, r6, r5
   1b94c:	mla	r3, r3, r4, ip
   1b950:	mla	r2, r2, r5, r3
   1b954:	mvnne	r2, #0
   1b958:	subs	r3, r0, r6
   1b95c:	mla	r7, r6, r4, r7
   1b960:	mov	r4, r0
   1b964:	mov	r0, #0
   1b968:	mla	r7, r2, r5, r7
   1b96c:	sbcs	r2, r1, r2
   1b970:	mov	r3, r4
   1b974:	movwcc	r0, #1
   1b978:	str	r3, [sp, #4]
   1b97c:	cmp	r0, #0
   1b980:	str	r0, [sp, #12]
   1b984:	mov	r0, r1
   1b988:	mvnne	sl, #0
   1b98c:	mvnne	r7, #0
   1b990:	str	r0, [sp, #8]
   1b994:	subs	r2, r4, sl
   1b998:	ldr	r4, [sp, #24]
   1b99c:	sbcs	r2, r1, r7
   1b9a0:	umull	r6, r2, sl, r5
   1b9a4:	movwcc	lr, #1
   1b9a8:	cmp	lr, #0
   1b9ac:	mvnne	r6, #0
   1b9b0:	mla	r2, sl, r4, r2
   1b9b4:	cmp	lr, #0
   1b9b8:	umull	r1, ip, r6, r5
   1b9bc:	mla	r2, r7, r5, r2
   1b9c0:	mvnne	r2, #0
   1b9c4:	mla	ip, r6, r4, ip
   1b9c8:	subs	r6, r3, r6
   1b9cc:	mla	r7, r2, r5, ip
   1b9d0:	sbcs	r2, r0, r2
   1b9d4:	mov	ip, #0
   1b9d8:	mov	r2, #0
   1b9dc:	movwcc	ip, #1
   1b9e0:	cmp	ip, #0
   1b9e4:	mvnne	r1, #0
   1b9e8:	mvnne	r7, #0
   1b9ec:	subs	r6, r3, r1
   1b9f0:	ldr	r3, [sp, #24]
   1b9f4:	sbcs	r6, r0, r7
   1b9f8:	umull	r0, sl, r1, r5
   1b9fc:	movwcc	r2, #1
   1ba00:	cmp	r2, #0
   1ba04:	mvnne	r0, #0
   1ba08:	mla	r1, r1, r3, sl
   1ba0c:	cmp	r2, #0
   1ba10:	umull	r6, r4, r0, r5
   1ba14:	mla	r1, r7, r5, r1
   1ba18:	mvnne	r1, #0
   1ba1c:	mla	r4, r0, r3, r4
   1ba20:	ldr	r3, [sp, #4]
   1ba24:	mla	r7, r1, r5, r4
   1ba28:	ldr	r5, [sp, #16]
   1ba2c:	subs	r0, r3, r0
   1ba30:	ldr	r0, [sp, #8]
   1ba34:	sbcs	r0, r0, r1
   1ba38:	mov	r0, #0
   1ba3c:	movwcc	r0, #1
   1ba40:	cmp	r0, #0
   1ba44:	mov	r1, r0
   1ba48:	ldr	r0, [sp, #20]
   1ba4c:	mvnne	r7, #0
   1ba50:	mvnne	r6, #0
   1ba54:	orr	r0, r0, r5
   1ba58:	ldr	r5, [sp, #12]
   1ba5c:	orr	r0, r0, r5
   1ba60:	orr	r0, r0, lr
   1ba64:	orr	r0, r0, ip
   1ba68:	orr	r0, r0, r2
   1ba6c:	b	1bedc <__assert_fail@plt+0xa230>
   1ba70:	mov	r1, #0
   1ba74:	lsl	r2, r7, #10
   1ba78:	lsl	r0, r6, #10
   1ba7c:	lsr	r3, r7, #22
   1ba80:	cmp	r1, r7, lsr #22
   1ba84:	orr	r2, r2, r6, lsr #22
   1ba88:	mvnne	r0, #0
   1ba8c:	movwne	r3, #1
   1ba90:	cmp	r1, r7, lsr #22
   1ba94:	b	1bf0c <__assert_fail@plt+0xa260>
   1ba98:	mvn	r0, #0
   1ba9c:	mvn	r1, #0
   1baa0:	mov	r2, r5
   1baa4:	mov	sl, r3
   1baa8:	bl	3334c <__assert_fail@plt+0x216a0>
   1baac:	subs	r2, r0, r6
   1bab0:	mov	ip, r0
   1bab4:	mov	r0, #0
   1bab8:	sbcs	r2, r1, r7
   1babc:	umull	r4, r2, r6, r5
   1bac0:	movwcc	r0, #1
   1bac4:	cmp	r0, #0
   1bac8:	mla	r2, r6, sl, r2
   1bacc:	str	r0, [sp, #20]
   1bad0:	mvnne	r4, #0
   1bad4:	cmp	r0, #0
   1bad8:	mla	r2, r7, r5, r2
   1badc:	mov	r0, #0
   1bae0:	umull	lr, r3, r4, r5
   1bae4:	mvnne	r2, #0
   1bae8:	mla	r3, r4, sl, r3
   1baec:	mla	r6, r2, r5, r3
   1baf0:	subs	r3, ip, r4
   1baf4:	mov	r3, r1
   1baf8:	sbcs	r2, r1, r2
   1bafc:	str	r3, [sp, #8]
   1bb00:	movwcc	r0, #1
   1bb04:	cmp	r0, #0
   1bb08:	str	r0, [sp, #16]
   1bb0c:	mov	r0, ip
   1bb10:	mvnne	lr, #0
   1bb14:	mvnne	r6, #0
   1bb18:	str	r0, [sp, #12]
   1bb1c:	subs	r2, ip, lr
   1bb20:	umull	r7, r4, lr, r5
   1bb24:	sbcs	r2, r1, r6
   1bb28:	mov	r2, #0
   1bb2c:	movwcc	r2, #1
   1bb30:	mla	r4, lr, sl, r4
   1bb34:	cmp	r2, #0
   1bb38:	mla	r6, r6, r5, r4
   1bb3c:	mov	r4, #0
   1bb40:	mvnne	r7, #0
   1bb44:	cmp	r2, #0
   1bb48:	umull	r1, ip, r7, r5
   1bb4c:	mvnne	r6, #0
   1bb50:	mla	ip, r7, sl, ip
   1bb54:	subs	r7, r0, r7
   1bb58:	sbcs	r7, r3, r6
   1bb5c:	mla	lr, r6, r5, ip
   1bb60:	mov	ip, #0
   1bb64:	movwcc	ip, #1
   1bb68:	cmp	ip, #0
   1bb6c:	mvnne	r1, #0
   1bb70:	mvnne	lr, #0
   1bb74:	subs	r7, r0, r1
   1bb78:	sbcs	r7, r3, lr
   1bb7c:	umull	r0, r7, r1, r5
   1bb80:	movwcc	r4, #1
   1bb84:	cmp	r4, #0
   1bb88:	mla	r1, r1, sl, r7
   1bb8c:	mvnne	r0, #0
   1bb90:	cmp	r4, #0
   1bb94:	mla	r1, lr, r5, r1
   1bb98:	umull	r6, r3, r0, r5
   1bb9c:	mvnne	r1, #0
   1bba0:	mla	r3, r0, sl, r3
   1bba4:	mla	r7, r1, r5, r3
   1bba8:	ldr	r3, [sp, #12]
   1bbac:	subs	r0, r3, r0
   1bbb0:	ldr	r0, [sp, #8]
   1bbb4:	ldr	r3, [sp, #16]
   1bbb8:	sbcs	r0, r0, r1
   1bbbc:	mov	r0, #0
   1bbc0:	movwcc	r0, #1
   1bbc4:	cmp	r0, #0
   1bbc8:	mov	r1, r0
   1bbcc:	ldr	r0, [sp, #20]
   1bbd0:	mvnne	r7, #0
   1bbd4:	mvnne	r6, #0
   1bbd8:	orr	r0, r0, r3
   1bbdc:	orr	r0, r0, r2
   1bbe0:	orr	r0, r0, ip
   1bbe4:	orr	r0, r0, r4
   1bbe8:	b	1bd0c <__assert_fail@plt+0xa060>
   1bbec:	mvn	r0, #0
   1bbf0:	mvn	r1, #0
   1bbf4:	mov	r2, r5
   1bbf8:	mov	sl, r3
   1bbfc:	bl	3334c <__assert_fail@plt+0x216a0>
   1bc00:	umull	r3, r2, r6, r5
   1bc04:	mov	lr, r1
   1bc08:	mov	r1, r0
   1bc0c:	mla	r2, r6, sl, r2
   1bc10:	subs	r6, r0, r6
   1bc14:	mov	r0, #0
   1bc18:	sbcs	r6, lr, r7
   1bc1c:	mla	r2, r7, r5, r2
   1bc20:	movwcc	r0, #1
   1bc24:	cmp	r0, #0
   1bc28:	str	r0, [sp, #20]
   1bc2c:	mov	r0, r1
   1bc30:	mvnne	r3, #0
   1bc34:	mvnne	r2, #0
   1bc38:	str	r0, [sp, #16]
   1bc3c:	subs	r4, r1, r3
   1bc40:	umull	r7, ip, r3, r5
   1bc44:	sbcs	r4, lr, r2
   1bc48:	mov	r4, #0
   1bc4c:	movwcc	r4, #1
   1bc50:	mla	r3, r3, sl, ip
   1bc54:	mov	ip, #0
   1bc58:	cmp	r4, #0
   1bc5c:	mla	r2, r2, r5, r3
   1bc60:	mvnne	r7, #0
   1bc64:	cmp	r4, #0
   1bc68:	umull	r1, r6, r7, r5
   1bc6c:	mvnne	r2, #0
   1bc70:	mla	r6, r7, sl, r6
   1bc74:	mla	r3, r2, r5, r6
   1bc78:	subs	r6, r0, r7
   1bc7c:	sbcs	r2, lr, r2
   1bc80:	mov	r2, #0
   1bc84:	movwcc	ip, #1
   1bc88:	cmp	ip, #0
   1bc8c:	mvnne	r1, #0
   1bc90:	mvnne	r3, #0
   1bc94:	subs	r6, r0, r1
   1bc98:	sbcs	r6, lr, r3
   1bc9c:	umull	r0, r6, r1, r5
   1bca0:	movwcc	r2, #1
   1bca4:	cmp	r2, #0
   1bca8:	mvnne	r0, #0
   1bcac:	cmp	r2, #0
   1bcb0:	str	r6, [sp, #12]
   1bcb4:	umull	r6, r7, r0, r5
   1bcb8:	mla	r7, r0, sl, r7
   1bcbc:	str	r7, [sp, #8]
   1bcc0:	ldr	r7, [sp, #12]
   1bcc4:	mla	r1, r1, sl, r7
   1bcc8:	mla	r1, r3, r5, r1
   1bccc:	ldr	r3, [sp, #8]
   1bcd0:	mvnne	r1, #0
   1bcd4:	mla	r7, r1, r5, r3
   1bcd8:	ldr	r3, [sp, #16]
   1bcdc:	subs	r0, r3, r0
   1bce0:	sbcs	r0, lr, r1
   1bce4:	mov	r0, #0
   1bce8:	movwcc	r0, #1
   1bcec:	cmp	r0, #0
   1bcf0:	mov	r1, r0
   1bcf4:	ldr	r0, [sp, #20]
   1bcf8:	mvnne	r7, #0
   1bcfc:	mvnne	r6, #0
   1bd00:	orr	r0, r0, r4
   1bd04:	orr	r0, r0, ip
   1bd08:	orr	r0, r0, r2
   1bd0c:	orr	r3, r0, r1
   1bd10:	b	1bf40 <__assert_fail@plt+0xa294>
   1bd14:	mvn	r0, #0
   1bd18:	mvn	r1, #0
   1bd1c:	mov	r2, r5
   1bd20:	mov	sl, r3
   1bd24:	bl	3334c <__assert_fail@plt+0x216a0>
   1bd28:	mov	ip, r1
   1bd2c:	subs	r1, r0, r6
   1bd30:	umull	r3, lr, r6, r5
   1bd34:	mov	r2, r5
   1bd38:	sbcs	r1, ip, r7
   1bd3c:	mov	r1, #0
   1bd40:	str	ip, [sp, #4]
   1bd44:	movwcc	r1, #1
   1bd48:	mla	r6, r6, sl, lr
   1bd4c:	cmp	r1, #0
   1bd50:	mla	r7, r7, r2, r6
   1bd54:	str	r1, [sp, #20]
   1bd58:	mvnne	r3, #0
   1bd5c:	cmp	r1, #0
   1bd60:	mov	r1, r0
   1bd64:	umull	r4, r5, r3, r5
   1bd68:	mvnne	r7, #0
   1bd6c:	mov	lr, r1
   1bd70:	mla	r5, r3, sl, r5
   1bd74:	subs	r3, r0, r3
   1bd78:	sbcs	r0, ip, r7
   1bd7c:	mov	r0, #0
   1bd80:	mla	r5, r7, r2, r5
   1bd84:	movwcc	r0, #1
   1bd88:	cmp	r0, #0
   1bd8c:	str	r0, [sp, #16]
   1bd90:	mvnne	r4, #0
   1bd94:	mvnne	r5, #0
   1bd98:	subs	r0, r1, r4
   1bd9c:	mov	r1, #0
   1bda0:	sbcs	r0, ip, r5
   1bda4:	umull	r3, r0, r4, r2
   1bda8:	movwcc	r1, #1
   1bdac:	cmp	r1, #0
   1bdb0:	mla	r0, r4, sl, r0
   1bdb4:	mov	r4, lr
   1bdb8:	str	r1, [sp, #12]
   1bdbc:	mvnne	r3, #0
   1bdc0:	cmp	r1, #0
   1bdc4:	mla	r0, r5, r2, r0
   1bdc8:	str	r4, [sp]
   1bdcc:	umull	r7, r6, r3, r2
   1bdd0:	mvnne	r0, #0
   1bdd4:	mla	r6, r3, sl, r6
   1bdd8:	subs	r3, lr, r3
   1bddc:	mov	r3, #0
   1bde0:	mla	r5, r0, r2, r6
   1bde4:	sbcs	r0, ip, r0
   1bde8:	mov	r0, #0
   1bdec:	movwcc	r0, #1
   1bdf0:	cmp	r0, #0
   1bdf4:	str	r0, [sp, #8]
   1bdf8:	mvnne	r7, #0
   1bdfc:	mvnne	r5, #0
   1be00:	subs	r0, lr, r7
   1be04:	sbcs	r0, ip, r5
   1be08:	umull	r6, r0, r7, r2
   1be0c:	movwcc	r3, #1
   1be10:	cmp	r3, #0
   1be14:	mla	r7, r7, sl, r0
   1be18:	mov	r0, ip
   1be1c:	mvnne	r6, #0
   1be20:	cmp	r3, #0
   1be24:	mla	r7, r5, r2, r7
   1be28:	mov	r5, #0
   1be2c:	umull	r1, lr, r6, r2
   1be30:	mvnne	r7, #0
   1be34:	mla	lr, r6, sl, lr
   1be38:	subs	r6, r4, r6
   1be3c:	mla	lr, r7, r2, lr
   1be40:	sbcs	r7, ip, r7
   1be44:	mov	ip, #0
   1be48:	movwcc	ip, #1
   1be4c:	cmp	ip, #0
   1be50:	mvnne	r1, #0
   1be54:	mvnne	lr, #0
   1be58:	subs	r7, r4, r1
   1be5c:	sbcs	r7, r0, lr
   1be60:	umull	r0, r7, r1, r2
   1be64:	movwcc	r5, #1
   1be68:	cmp	r5, #0
   1be6c:	mla	r1, r1, sl, r7
   1be70:	mvnne	r0, #0
   1be74:	cmp	r5, #0
   1be78:	mla	r1, lr, r2, r1
   1be7c:	umull	r6, r4, r0, r2
   1be80:	mvnne	r1, #0
   1be84:	mla	r4, r0, sl, r4
   1be88:	mla	r7, r1, r2, r4
   1be8c:	ldr	r2, [sp]
   1be90:	subs	r0, r2, r0
   1be94:	ldr	r0, [sp, #4]
   1be98:	ldr	r2, [sp, #16]
   1be9c:	sbcs	r0, r0, r1
   1bea0:	mov	r0, #0
   1bea4:	movwcc	r0, #1
   1bea8:	cmp	r0, #0
   1beac:	mov	r1, r0
   1beb0:	ldr	r0, [sp, #20]
   1beb4:	mvnne	r7, #0
   1beb8:	mvnne	r6, #0
   1bebc:	orr	r0, r0, r2
   1bec0:	ldr	r2, [sp, #12]
   1bec4:	orr	r0, r0, r2
   1bec8:	ldr	r2, [sp, #8]
   1becc:	orr	r0, r0, r2
   1bed0:	orr	r0, r0, r3
   1bed4:	orr	r0, r0, ip
   1bed8:	orr	r0, r0, r5
   1bedc:	orr	r0, r0, r1
   1bee0:	and	r3, r0, #1
   1bee4:	b	1bf40 <__assert_fail@plt+0xa294>
   1bee8:	mov	r1, #0
   1beec:	lsl	r2, r7, #9
   1bef0:	lsl	r0, r6, #9
   1bef4:	lsr	r3, r7, #23
   1bef8:	cmp	r1, r7, lsr #23
   1befc:	orr	r2, r2, r6, lsr #23
   1bf00:	mvnne	r0, #0
   1bf04:	movwne	r3, #1
   1bf08:	cmp	r1, r7, lsr #23
   1bf0c:	mvnne	r2, #0
   1bf10:	mov	r6, r0
   1bf14:	mov	r7, r2
   1bf18:	b	1bf40 <__assert_fail@plt+0xa294>
   1bf1c:	lsl	r1, r7, #1
   1bf20:	cmp	r7, #0
   1bf24:	lsl	r0, r6, #1
   1bf28:	lsr	r3, r7, #31
   1bf2c:	orr	r1, r1, r6, lsr #31
   1bf30:	mvnmi	r0, #0
   1bf34:	mvnmi	r1, #0
   1bf38:	mov	r6, r0
   1bf3c:	mov	r7, r1
   1bf40:	ldr	r1, [sp, #32]
   1bf44:	ldr	r2, [sp, #28]
   1bf48:	orr	r8, r3, r8
   1bf4c:	add	r0, r1, r2
   1bf50:	str	r0, [r9]
   1bf54:	ldrb	r0, [r1, r2]
   1bf58:	cmp	r0, #0
   1bf5c:	orrne	r8, r8, #2
   1bf60:	ldr	r0, [sp, #36]	; 0x24
   1bf64:	strd	r6, [r0]
   1bf68:	mov	r0, r8
   1bf6c:	sub	sp, fp, #28
   1bf70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf74:	movw	r0, #19564	; 0x4c6c
   1bf78:	movw	r1, #19602	; 0x4c92
   1bf7c:	movw	r3, #19614	; 0x4c9e
   1bf80:	mov	r2, #84	; 0x54
   1bf84:	movt	r0, #3
   1bf88:	movt	r1, #3
   1bf8c:	movt	r3, #3
   1bf90:	bl	11cac <__assert_fail@plt>
   1bf94:	clz	r2, r1
   1bf98:	clz	r3, r0
   1bf9c:	lsr	r2, r2, #5
   1bfa0:	lsr	r3, r3, #5
   1bfa4:	orrs	r2, r3, r2
   1bfa8:	movwne	r1, #1
   1bfac:	movwne	r0, #1
   1bfb0:	cmp	r1, #0
   1bfb4:	beq	1bfe4 <__assert_fail@plt+0xa338>
   1bfb8:	mvn	r2, #-2147483648	; 0x80000000
   1bfbc:	udiv	r2, r2, r1
   1bfc0:	cmp	r2, r0
   1bfc4:	bcs	1bfe4 <__assert_fail@plt+0xa338>
   1bfc8:	push	{fp, lr}
   1bfcc:	mov	fp, sp
   1bfd0:	bl	11af0 <__errno_location@plt>
   1bfd4:	mov	r1, #12
   1bfd8:	str	r1, [r0]
   1bfdc:	mov	r0, #0
   1bfe0:	pop	{fp, pc}
   1bfe4:	b	11820 <calloc@plt>
   1bfe8:	sub	sp, sp, #8
   1bfec:	push	{r4, r5, r6, r7, fp, lr}
   1bff0:	add	fp, sp, #16
   1bff4:	sub	sp, sp, #8
   1bff8:	mov	r5, r0
   1bffc:	add	r0, fp, #8
   1c000:	cmp	r1, #11
   1c004:	str	r2, [fp, #8]
   1c008:	str	r3, [fp, #12]
   1c00c:	str	r0, [sp, #4]
   1c010:	bhi	1c04c <__assert_fail@plt+0xa3a0>
   1c014:	mov	r0, #1
   1c018:	movw	r2, #1300	; 0x514
   1c01c:	tst	r2, r0, lsl r1
   1c020:	bne	1c10c <__assert_fail@plt+0xa460>
   1c024:	movw	r2, #2570	; 0xa0a
   1c028:	tst	r2, r0, lsl r1
   1c02c:	bne	1c074 <__assert_fail@plt+0xa3c8>
   1c030:	cmp	r1, #0
   1c034:	bne	1c04c <__assert_fail@plt+0xa3a0>
   1c038:	ldr	r0, [sp, #4]
   1c03c:	add	r1, r0, #4
   1c040:	str	r1, [sp, #4]
   1c044:	mov	r1, #0
   1c048:	b	1c118 <__assert_fail@plt+0xa46c>
   1c04c:	sub	r0, r1, #1024	; 0x400
   1c050:	cmp	r0, #10
   1c054:	bhi	1c10c <__assert_fail@plt+0xa460>
   1c058:	mov	r2, #1
   1c05c:	movw	r3, #645	; 0x285
   1c060:	tst	r3, r2, lsl r0
   1c064:	bne	1c10c <__assert_fail@plt+0xa460>
   1c068:	movw	r3, #1282	; 0x502
   1c06c:	tst	r3, r2, lsl r0
   1c070:	beq	1c080 <__assert_fail@plt+0xa3d4>
   1c074:	mov	r0, r5
   1c078:	bl	11b98 <fcntl64@plt>
   1c07c:	b	1c124 <__assert_fail@plt+0xa478>
   1c080:	cmp	r0, #6
   1c084:	bne	1c10c <__assert_fail@plt+0xa460>
   1c088:	ldr	r0, [sp, #4]
   1c08c:	movw	r7, #25544	; 0x63c8
   1c090:	movt	r7, #4
   1c094:	add	r1, r0, #4
   1c098:	str	r1, [sp, #4]
   1c09c:	ldr	r6, [r0]
   1c0a0:	ldr	r0, [r7]
   1c0a4:	cmp	r0, #0
   1c0a8:	bmi	1c148 <__assert_fail@plt+0xa49c>
   1c0ac:	mov	r0, r5
   1c0b0:	movw	r1, #1030	; 0x406
   1c0b4:	mov	r2, r6
   1c0b8:	bl	11b98 <fcntl64@plt>
   1c0bc:	mov	r4, r0
   1c0c0:	cmn	r0, #1
   1c0c4:	bgt	1c13c <__assert_fail@plt+0xa490>
   1c0c8:	bl	11af0 <__errno_location@plt>
   1c0cc:	ldr	r0, [r0]
   1c0d0:	cmp	r0, #22
   1c0d4:	bne	1c13c <__assert_fail@plt+0xa490>
   1c0d8:	mov	r0, r5
   1c0dc:	mov	r1, #0
   1c0e0:	mov	r2, r6
   1c0e4:	bl	11b98 <fcntl64@plt>
   1c0e8:	mov	r4, r0
   1c0ec:	cmp	r0, #0
   1c0f0:	bmi	1c128 <__assert_fail@plt+0xa47c>
   1c0f4:	mvn	r0, #0
   1c0f8:	str	r0, [r7]
   1c0fc:	mov	r0, #1
   1c100:	cmp	r0, #0
   1c104:	bne	1c174 <__assert_fail@plt+0xa4c8>
   1c108:	b	1c128 <__assert_fail@plt+0xa47c>
   1c10c:	ldr	r0, [sp, #4]
   1c110:	add	r2, r0, #4
   1c114:	str	r2, [sp, #4]
   1c118:	ldr	r2, [r0]
   1c11c:	mov	r0, r5
   1c120:	bl	11b98 <fcntl64@plt>
   1c124:	mov	r4, r0
   1c128:	mov	r0, r4
   1c12c:	sub	sp, fp, #16
   1c130:	pop	{r4, r5, r6, r7, fp, lr}
   1c134:	add	sp, sp, #8
   1c138:	bx	lr
   1c13c:	mov	r0, #1
   1c140:	str	r0, [r7]
   1c144:	b	1c128 <__assert_fail@plt+0xa47c>
   1c148:	mov	r0, r5
   1c14c:	mov	r1, #0
   1c150:	mov	r2, r6
   1c154:	bl	11b98 <fcntl64@plt>
   1c158:	mov	r4, r0
   1c15c:	ldr	r0, [r7]
   1c160:	add	r0, r0, #1
   1c164:	clz	r0, r0
   1c168:	lsr	r0, r0, #5
   1c16c:	cmp	r0, #0
   1c170:	beq	1c128 <__assert_fail@plt+0xa47c>
   1c174:	cmp	r4, #0
   1c178:	bmi	1c128 <__assert_fail@plt+0xa47c>
   1c17c:	mov	r0, r4
   1c180:	mov	r1, #1
   1c184:	bl	11b98 <fcntl64@plt>
   1c188:	cmp	r0, #0
   1c18c:	bmi	1c1a8 <__assert_fail@plt+0xa4fc>
   1c190:	orr	r2, r0, #1
   1c194:	mov	r0, r4
   1c198:	mov	r1, #2
   1c19c:	bl	11b98 <fcntl64@plt>
   1c1a0:	cmn	r0, #1
   1c1a4:	bne	1c128 <__assert_fail@plt+0xa47c>
   1c1a8:	bl	11af0 <__errno_location@plt>
   1c1ac:	ldr	r6, [r0]
   1c1b0:	mov	r5, r0
   1c1b4:	mov	r0, r4
   1c1b8:	bl	11c88 <close@plt>
   1c1bc:	str	r6, [r5]
   1c1c0:	mvn	r4, #0
   1c1c4:	b	1c128 <__assert_fail@plt+0xa47c>
   1c1c8:	push	{r4, sl, fp, lr}
   1c1cc:	add	fp, sp, #8
   1c1d0:	sub	sp, sp, #8
   1c1d4:	mov	r4, r0
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c214 <__assert_fail@plt+0xa568>
   1c1e0:	mov	r0, r4
   1c1e4:	bl	11a3c <__freading@plt>
   1c1e8:	cmp	r0, #0
   1c1ec:	beq	1c214 <__assert_fail@plt+0xa568>
   1c1f0:	ldrb	r0, [r4, #1]
   1c1f4:	tst	r0, #1
   1c1f8:	beq	1c214 <__assert_fail@plt+0xa568>
   1c1fc:	mov	r0, #1
   1c200:	mov	r2, #0
   1c204:	mov	r3, #0
   1c208:	str	r0, [sp]
   1c20c:	mov	r0, r4
   1c210:	bl	1c24c <__assert_fail@plt+0xa5a0>
   1c214:	mov	r0, r4
   1c218:	sub	sp, fp, #8
   1c21c:	pop	{r4, sl, fp, lr}
   1c220:	b	11880 <fflush@plt>
   1c224:	push	{r4, r5, r6, sl, fp, lr}
   1c228:	add	fp, sp, #16
   1c22c:	mov	r4, r0
   1c230:	bl	11af0 <__errno_location@plt>
   1c234:	ldr	r6, [r0]
   1c238:	mov	r5, r0
   1c23c:	mov	r0, r4
   1c240:	bl	118b0 <free@plt>
   1c244:	str	r6, [r5]
   1c248:	pop	{r4, r5, r6, sl, fp, pc}
   1c24c:	push	{r4, r5, r6, r7, fp, lr}
   1c250:	add	fp, sp, #16
   1c254:	sub	sp, sp, #8
   1c258:	mov	r4, r0
   1c25c:	ldr	r0, [r0, #4]
   1c260:	mov	r5, r3
   1c264:	mov	r6, r2
   1c268:	ldr	r1, [r4, #8]
   1c26c:	cmp	r1, r0
   1c270:	bne	1c28c <__assert_fail@plt+0xa5e0>
   1c274:	ldrd	r0, [r4, #16]
   1c278:	cmp	r1, r0
   1c27c:	bne	1c28c <__assert_fail@plt+0xa5e0>
   1c280:	ldr	r0, [r4, #36]	; 0x24
   1c284:	cmp	r0, #0
   1c288:	beq	1c2a4 <__assert_fail@plt+0xa5f8>
   1c28c:	mov	r0, r4
   1c290:	mov	r2, r6
   1c294:	mov	r3, r5
   1c298:	sub	sp, fp, #16
   1c29c:	pop	{r4, r5, r6, r7, fp, lr}
   1c2a0:	b	11b8c <fseeko64@plt>
   1c2a4:	ldr	r7, [fp, #8]
   1c2a8:	mov	r0, r4
   1c2ac:	bl	11b50 <fileno@plt>
   1c2b0:	mov	r2, r6
   1c2b4:	mov	r3, r5
   1c2b8:	str	r7, [sp]
   1c2bc:	bl	119a0 <lseek64@plt>
   1c2c0:	and	r2, r0, r1
   1c2c4:	cmn	r2, #1
   1c2c8:	beq	1c2e8 <__assert_fail@plt+0xa63c>
   1c2cc:	strd	r0, [r4, #80]	; 0x50
   1c2d0:	ldr	r0, [r4]
   1c2d4:	bic	r0, r0, #16
   1c2d8:	str	r0, [r4]
   1c2dc:	mov	r0, #0
   1c2e0:	sub	sp, fp, #16
   1c2e4:	pop	{r4, r5, r6, r7, fp, pc}
   1c2e8:	mvn	r0, #0
   1c2ec:	sub	sp, fp, #16
   1c2f0:	pop	{r4, r5, r6, r7, fp, pc}
   1c2f4:	cmp	r0, #0
   1c2f8:	movweq	r0, #1
   1c2fc:	cmn	r0, #1
   1c300:	ble	1c308 <__assert_fail@plt+0xa65c>
   1c304:	b	11a18 <malloc@plt>
   1c308:	push	{fp, lr}
   1c30c:	mov	fp, sp
   1c310:	bl	11af0 <__errno_location@plt>
   1c314:	mov	r1, #12
   1c318:	str	r1, [r0]
   1c31c:	mov	r0, #0
   1c320:	pop	{fp, pc}
   1c324:	push	{r4, r5, r6, r7, fp, lr}
   1c328:	add	fp, sp, #16
   1c32c:	sub	sp, sp, #8
   1c330:	cmp	r0, #0
   1c334:	add	r5, sp, #4
   1c338:	mov	r7, r2
   1c33c:	mov	r4, r1
   1c340:	movne	r5, r0
   1c344:	mov	r0, r5
   1c348:	bl	119d0 <mbrtowc@plt>
   1c34c:	mov	r6, r0
   1c350:	cmp	r7, #0
   1c354:	beq	1c37c <__assert_fail@plt+0xa6d0>
   1c358:	cmn	r6, #2
   1c35c:	bcc	1c37c <__assert_fail@plt+0xa6d0>
   1c360:	mov	r0, #0
   1c364:	bl	32cf0 <__assert_fail@plt+0x21044>
   1c368:	cmp	r0, #0
   1c36c:	bne	1c37c <__assert_fail@plt+0xa6d0>
   1c370:	ldrb	r0, [r4]
   1c374:	mov	r6, #1
   1c378:	str	r0, [r5]
   1c37c:	mov	r0, r6
   1c380:	sub	sp, fp, #16
   1c384:	pop	{r4, r5, r6, r7, fp, pc}
   1c388:	push	{fp, lr}
   1c38c:	mov	fp, sp
   1c390:	cmp	r0, #0
   1c394:	beq	1c3b0 <__assert_fail@plt+0xa704>
   1c398:	cmp	r1, #0
   1c39c:	beq	1c3bc <__assert_fail@plt+0xa710>
   1c3a0:	cmn	r1, #1
   1c3a4:	ble	1c3c8 <__assert_fail@plt+0xa71c>
   1c3a8:	pop	{fp, lr}
   1c3ac:	b	11940 <realloc@plt>
   1c3b0:	mov	r0, r1
   1c3b4:	pop	{fp, lr}
   1c3b8:	b	1c2f4 <__assert_fail@plt+0xa648>
   1c3bc:	bl	1c224 <__assert_fail@plt+0xa578>
   1c3c0:	mov	r0, #0
   1c3c4:	pop	{fp, pc}
   1c3c8:	bl	11af0 <__errno_location@plt>
   1c3cc:	mov	r1, #12
   1c3d0:	str	r1, [r0]
   1c3d4:	mov	r0, #0
   1c3d8:	pop	{fp, pc}
   1c3dc:	cmp	r2, #0
   1c3e0:	beq	1c410 <__assert_fail@plt+0xa764>
   1c3e4:	mvn	r3, #0
   1c3e8:	udiv	r3, r3, r2
   1c3ec:	cmp	r3, r1
   1c3f0:	bcs	1c410 <__assert_fail@plt+0xa764>
   1c3f4:	push	{fp, lr}
   1c3f8:	mov	fp, sp
   1c3fc:	bl	11af0 <__errno_location@plt>
   1c400:	mov	r1, #12
   1c404:	str	r1, [r0]
   1c408:	mov	r0, #0
   1c40c:	pop	{fp, pc}
   1c410:	mul	r1, r2, r1
   1c414:	b	1c388 <__assert_fail@plt+0xa6dc>
	...
   1c420:	push	{fp, lr}
   1c424:	mov	fp, sp
   1c428:	mov	lr, r0
   1c42c:	movw	r0, #25548	; 0x63cc
   1c430:	mov	ip, r1
   1c434:	ldrb	r1, [r2, #28]
   1c438:	movt	r0, #4
   1c43c:	ldr	r3, [r0]
   1c440:	mov	r0, #16
   1c444:	and	r1, r1, #111	; 0x6f
   1c448:	and	r0, r0, r3, lsr #21
   1c44c:	orr	r0, r1, r0
   1c450:	mov	r1, lr
   1c454:	orr	r0, r0, #128	; 0x80
   1c458:	strb	r0, [r2, #28]
   1c45c:	mov	r0, r2
   1c460:	mov	r2, ip
   1c464:	bl	1c4a0 <__assert_fail@plt+0xa7f4>
   1c468:	cmp	r0, #0
   1c46c:	beq	1c498 <__assert_fail@plt+0xa7ec>
   1c470:	movw	r1, #20080	; 0x4e70
   1c474:	mov	r2, #5
   1c478:	movt	r1, #3
   1c47c:	ldr	r0, [r1, r0, lsl #2]
   1c480:	movw	r1, #19696	; 0x4cf0
   1c484:	movt	r1, #3
   1c488:	add	r1, r1, r0
   1c48c:	mov	r0, #0
   1c490:	pop	{fp, lr}
   1c494:	b	11934 <dcgettext@plt>
   1c498:	mov	r0, #0
   1c49c:	pop	{fp, pc}
   1c4a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4a4:	add	fp, sp, #28
   1c4a8:	sub	sp, sp, #140	; 0x8c
   1c4ac:	mov	sl, r0
   1c4b0:	mov	r0, #0
   1c4b4:	mov	r9, r3
   1c4b8:	mov	r7, r2
   1c4bc:	str	r1, [sp, #28]
   1c4c0:	str	r0, [fp, #-52]	; 0xffffffcc
   1c4c4:	str	r0, [sl, #24]
   1c4c8:	str	r0, [sl, #8]
   1c4cc:	str	r3, [sl, #12]
   1c4d0:	ldrb	r0, [sl, #28]
   1c4d4:	and	r0, r0, #144	; 0x90
   1c4d8:	strb	r0, [sl, #28]
   1c4dc:	ldr	r0, [sl, #4]
   1c4e0:	ldr	r5, [sl]
   1c4e4:	cmp	r0, #159	; 0x9f
   1c4e8:	bls	1d004 <__assert_fail@plt+0xb358>
   1c4ec:	mov	r0, #160	; 0xa0
   1c4f0:	mov	r1, #0
   1c4f4:	mov	r2, #160	; 0xa0
   1c4f8:	str	r0, [sl, #8]
   1c4fc:	mov	r0, r5
   1c500:	bl	11b2c <memset@plt>
   1c504:	mov	r0, #31
   1c508:	str	r0, [r5, #64]	; 0x40
   1c50c:	movw	r0, #43689	; 0xaaa9
   1c510:	movt	r0, #2730	; 0xaaa
   1c514:	cmp	r7, r0
   1c518:	bhi	1c918 <__assert_fail@plt+0xac6c>
   1c51c:	add	r8, r7, #1
   1c520:	lsl	r0, r8, #3
   1c524:	str	r8, [r5, #4]
   1c528:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1c52c:	str	r0, [r5]
   1c530:	mov	r0, #1
   1c534:	mov	r6, r0
   1c538:	lsl	r0, r0, #1
   1c53c:	cmp	r6, r7
   1c540:	bls	1c534 <__assert_fail@plt+0xa888>
   1c544:	mov	r0, #12
   1c548:	mov	r1, r6
   1c54c:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   1c550:	sub	r1, r6, #1
   1c554:	str	r1, [r5, #68]	; 0x44
   1c558:	str	r0, [r5, #32]
   1c55c:	bl	119ac <__ctype_get_mb_cur_max@plt>
   1c560:	str	r0, [r5, #92]	; 0x5c
   1c564:	mov	r0, #14
   1c568:	bl	11bbc <nl_langinfo@plt>
   1c56c:	ldrb	r1, [r0]
   1c570:	orr	r1, r1, #32
   1c574:	cmp	r1, #117	; 0x75
   1c578:	bne	1c5c8 <__assert_fail@plt+0xa91c>
   1c57c:	ldrb	r1, [r0, #1]
   1c580:	orr	r1, r1, #32
   1c584:	cmp	r1, #116	; 0x74
   1c588:	bne	1c5c8 <__assert_fail@plt+0xa91c>
   1c58c:	ldrb	r1, [r0, #2]
   1c590:	orr	r1, r1, #32
   1c594:	cmp	r1, #102	; 0x66
   1c598:	bne	1c5c8 <__assert_fail@plt+0xa91c>
   1c59c:	ldrb	r1, [r0, #3]!
   1c5a0:	cmp	r1, #45	; 0x2d
   1c5a4:	movw	r1, #20196	; 0x4ee4
   1c5a8:	movt	r1, #3
   1c5ac:	addeq	r0, r0, #1
   1c5b0:	bl	1185c <strcmp@plt>
   1c5b4:	cmp	r0, #0
   1c5b8:	bne	1c5c8 <__assert_fail@plt+0xa91c>
   1c5bc:	ldrb	r0, [r5, #88]	; 0x58
   1c5c0:	orr	r0, r0, #4
   1c5c4:	strb	r0, [r5, #88]	; 0x58
   1c5c8:	ldrb	r0, [r5, #88]	; 0x58
   1c5cc:	and	r1, r0, #247	; 0xf7
   1c5d0:	strb	r1, [r5, #88]	; 0x58
   1c5d4:	ldr	r1, [r5, #92]	; 0x5c
   1c5d8:	cmp	r1, #2
   1c5dc:	blt	1c904 <__assert_fail@plt+0xac58>
   1c5e0:	tst	r0, #4
   1c5e4:	bne	1c660 <__assert_fail@plt+0xa9b4>
   1c5e8:	mov	r0, #32
   1c5ec:	mov	r1, #1
   1c5f0:	mov	r4, #1
   1c5f4:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   1c5f8:	cmp	r0, #0
   1c5fc:	str	r0, [r5, #60]	; 0x3c
   1c600:	beq	1c918 <__assert_fail@plt+0xac6c>
   1c604:	mov	r6, #0
   1c608:	mov	r0, r6
   1c60c:	bl	11b38 <btowc@plt>
   1c610:	cmn	r0, #1
   1c614:	bne	1c638 <__assert_fail@plt+0xa98c>
   1c618:	b	1c648 <__assert_fail@plt+0xa99c>
   1c61c:	add	r6, r6, #1
   1c620:	cmp	r6, #32
   1c624:	beq	1c670 <__assert_fail@plt+0xa9c4>
   1c628:	mov	r0, r6
   1c62c:	bl	11b38 <btowc@plt>
   1c630:	cmn	r0, #1
   1c634:	beq	1c648 <__assert_fail@plt+0xa99c>
   1c638:	ldr	r1, [r5, #60]	; 0x3c
   1c63c:	ldr	r2, [r1]
   1c640:	orr	r2, r2, r4, lsl r6
   1c644:	str	r2, [r1]
   1c648:	cmp	r6, r0
   1c64c:	beq	1c61c <__assert_fail@plt+0xa970>
   1c650:	ldrb	r0, [r5, #88]	; 0x58
   1c654:	orr	r0, r0, #8
   1c658:	strb	r0, [r5, #88]	; 0x58
   1c65c:	b	1c61c <__assert_fail@plt+0xa970>
   1c660:	movw	r0, #20148	; 0x4eb4
   1c664:	movt	r0, #3
   1c668:	str	r0, [r5, #60]	; 0x3c
   1c66c:	b	1c904 <__assert_fail@plt+0xac58>
   1c670:	mov	r6, #32
   1c674:	mov	r4, #1
   1c678:	mov	r0, r6
   1c67c:	bl	11b38 <btowc@plt>
   1c680:	cmn	r0, #1
   1c684:	bne	1c6b0 <__assert_fail@plt+0xaa04>
   1c688:	b	1c6c4 <__assert_fail@plt+0xaa18>
   1c68c:	sub	r1, r6, #31
   1c690:	add	r0, r6, #1
   1c694:	cmp	r1, #32
   1c698:	mov	r6, r0
   1c69c:	beq	1c6dc <__assert_fail@plt+0xaa30>
   1c6a0:	mov	r0, r6
   1c6a4:	bl	11b38 <btowc@plt>
   1c6a8:	cmn	r0, #1
   1c6ac:	beq	1c6c4 <__assert_fail@plt+0xaa18>
   1c6b0:	ldr	r2, [r5, #60]	; 0x3c
   1c6b4:	sub	r1, r6, #32
   1c6b8:	ldr	r3, [r2, #4]
   1c6bc:	orr	r1, r3, r4, lsl r1
   1c6c0:	str	r1, [r2, #4]
   1c6c4:	cmp	r0, r6
   1c6c8:	beq	1c68c <__assert_fail@plt+0xa9e0>
   1c6cc:	ldrb	r0, [r5, #88]	; 0x58
   1c6d0:	orr	r0, r0, #8
   1c6d4:	strb	r0, [r5, #88]	; 0x58
   1c6d8:	b	1c68c <__assert_fail@plt+0xa9e0>
   1c6dc:	mov	r6, #64	; 0x40
   1c6e0:	mov	r4, #1
   1c6e4:	mov	r0, r6
   1c6e8:	bl	11b38 <btowc@plt>
   1c6ec:	cmn	r0, #1
   1c6f0:	bne	1c71c <__assert_fail@plt+0xaa70>
   1c6f4:	b	1c730 <__assert_fail@plt+0xaa84>
   1c6f8:	sub	r1, r6, #63	; 0x3f
   1c6fc:	add	r0, r6, #1
   1c700:	cmp	r1, #32
   1c704:	mov	r6, r0
   1c708:	beq	1c748 <__assert_fail@plt+0xaa9c>
   1c70c:	mov	r0, r6
   1c710:	bl	11b38 <btowc@plt>
   1c714:	cmn	r0, #1
   1c718:	beq	1c730 <__assert_fail@plt+0xaa84>
   1c71c:	ldr	r2, [r5, #60]	; 0x3c
   1c720:	sub	r1, r6, #64	; 0x40
   1c724:	ldr	r3, [r2, #8]
   1c728:	orr	r1, r3, r4, lsl r1
   1c72c:	str	r1, [r2, #8]
   1c730:	cmp	r0, r6
   1c734:	beq	1c6f8 <__assert_fail@plt+0xaa4c>
   1c738:	ldrb	r0, [r5, #88]	; 0x58
   1c73c:	orr	r0, r0, #8
   1c740:	strb	r0, [r5, #88]	; 0x58
   1c744:	b	1c6f8 <__assert_fail@plt+0xaa4c>
   1c748:	mov	r6, #96	; 0x60
   1c74c:	mov	r4, #1
   1c750:	mov	r0, r6
   1c754:	bl	11b38 <btowc@plt>
   1c758:	cmn	r0, #1
   1c75c:	bne	1c788 <__assert_fail@plt+0xaadc>
   1c760:	b	1c79c <__assert_fail@plt+0xaaf0>
   1c764:	sub	r1, r6, #95	; 0x5f
   1c768:	add	r0, r6, #1
   1c76c:	cmp	r1, #32
   1c770:	mov	r6, r0
   1c774:	beq	1c7b4 <__assert_fail@plt+0xab08>
   1c778:	mov	r0, r6
   1c77c:	bl	11b38 <btowc@plt>
   1c780:	cmn	r0, #1
   1c784:	beq	1c79c <__assert_fail@plt+0xaaf0>
   1c788:	ldr	r2, [r5, #60]	; 0x3c
   1c78c:	sub	r1, r6, #96	; 0x60
   1c790:	ldr	r3, [r2, #12]
   1c794:	orr	r1, r3, r4, lsl r1
   1c798:	str	r1, [r2, #12]
   1c79c:	cmp	r0, r6
   1c7a0:	beq	1c764 <__assert_fail@plt+0xaab8>
   1c7a4:	ldrb	r0, [r5, #88]	; 0x58
   1c7a8:	orr	r0, r0, #8
   1c7ac:	strb	r0, [r5, #88]	; 0x58
   1c7b0:	b	1c764 <__assert_fail@plt+0xaab8>
   1c7b4:	mov	r6, #128	; 0x80
   1c7b8:	mov	r4, #1
   1c7bc:	mov	r0, r6
   1c7c0:	bl	11b38 <btowc@plt>
   1c7c4:	cmn	r0, #1
   1c7c8:	bne	1c7f0 <__assert_fail@plt+0xab44>
   1c7cc:	sub	r1, r6, #127	; 0x7f
   1c7d0:	add	r0, r6, #1
   1c7d4:	cmp	r1, #32
   1c7d8:	mov	r6, r0
   1c7dc:	beq	1c808 <__assert_fail@plt+0xab5c>
   1c7e0:	mov	r0, r6
   1c7e4:	bl	11b38 <btowc@plt>
   1c7e8:	cmn	r0, #1
   1c7ec:	beq	1c7cc <__assert_fail@plt+0xab20>
   1c7f0:	ldr	r1, [r5, #60]	; 0x3c
   1c7f4:	sub	r0, r6, #128	; 0x80
   1c7f8:	ldr	r2, [r1, #16]
   1c7fc:	orr	r0, r2, r4, lsl r0
   1c800:	str	r0, [r1, #16]
   1c804:	b	1c7cc <__assert_fail@plt+0xab20>
   1c808:	mov	r6, #160	; 0xa0
   1c80c:	mov	r4, #1
   1c810:	mov	r0, r6
   1c814:	bl	11b38 <btowc@plt>
   1c818:	cmn	r0, #1
   1c81c:	bne	1c844 <__assert_fail@plt+0xab98>
   1c820:	sub	r1, r6, #159	; 0x9f
   1c824:	add	r0, r6, #1
   1c828:	cmp	r1, #32
   1c82c:	mov	r6, r0
   1c830:	beq	1c85c <__assert_fail@plt+0xabb0>
   1c834:	mov	r0, r6
   1c838:	bl	11b38 <btowc@plt>
   1c83c:	cmn	r0, #1
   1c840:	beq	1c820 <__assert_fail@plt+0xab74>
   1c844:	ldr	r1, [r5, #60]	; 0x3c
   1c848:	sub	r0, r6, #160	; 0xa0
   1c84c:	ldr	r2, [r1, #20]
   1c850:	orr	r0, r2, r4, lsl r0
   1c854:	str	r0, [r1, #20]
   1c858:	b	1c820 <__assert_fail@plt+0xab74>
   1c85c:	mov	r6, #192	; 0xc0
   1c860:	mov	r4, #1
   1c864:	mov	r0, r6
   1c868:	bl	11b38 <btowc@plt>
   1c86c:	cmn	r0, #1
   1c870:	bne	1c898 <__assert_fail@plt+0xabec>
   1c874:	sub	r1, r6, #191	; 0xbf
   1c878:	add	r0, r6, #1
   1c87c:	cmp	r1, #32
   1c880:	mov	r6, r0
   1c884:	beq	1c8b0 <__assert_fail@plt+0xac04>
   1c888:	mov	r0, r6
   1c88c:	bl	11b38 <btowc@plt>
   1c890:	cmn	r0, #1
   1c894:	beq	1c874 <__assert_fail@plt+0xabc8>
   1c898:	ldr	r1, [r5, #60]	; 0x3c
   1c89c:	sub	r0, r6, #192	; 0xc0
   1c8a0:	ldr	r2, [r1, #24]
   1c8a4:	orr	r0, r2, r4, lsl r0
   1c8a8:	str	r0, [r1, #24]
   1c8ac:	b	1c874 <__assert_fail@plt+0xabc8>
   1c8b0:	mov	r6, #224	; 0xe0
   1c8b4:	mov	r4, #1
   1c8b8:	mov	r0, r6
   1c8bc:	bl	11b38 <btowc@plt>
   1c8c0:	cmn	r0, #1
   1c8c4:	bne	1c8ec <__assert_fail@plt+0xac40>
   1c8c8:	sub	r1, r6, #223	; 0xdf
   1c8cc:	add	r0, r6, #1
   1c8d0:	cmp	r1, #32
   1c8d4:	mov	r6, r0
   1c8d8:	beq	1c904 <__assert_fail@plt+0xac58>
   1c8dc:	mov	r0, r6
   1c8e0:	bl	11b38 <btowc@plt>
   1c8e4:	cmn	r0, #1
   1c8e8:	beq	1c8c8 <__assert_fail@plt+0xac1c>
   1c8ec:	ldr	r1, [r5, #60]	; 0x3c
   1c8f0:	sub	r0, r6, #224	; 0xe0
   1c8f4:	ldr	r2, [r1, #28]
   1c8f8:	orr	r0, r2, r4, lsl r0
   1c8fc:	str	r0, [r1, #28]
   1c900:	b	1c8c8 <__assert_fail@plt+0xac1c>
   1c904:	ldr	r0, [r5]
   1c908:	cmp	r0, #0
   1c90c:	ldrne	r0, [r5, #32]
   1c910:	cmpne	r0, #0
   1c914:	bne	1c940 <__assert_fail@plt+0xac94>
   1c918:	mov	r4, #12
   1c91c:	mov	r0, r5
   1c920:	str	r4, [fp, #-52]	; 0xffffffcc
   1c924:	bl	1ead4 <__assert_fail@plt+0xce28>
   1c928:	mov	r0, #0
   1c92c:	str	r0, [sl]
   1c930:	str	r0, [sl, #4]
   1c934:	mov	r0, r4
   1c938:	sub	sp, fp, #28
   1c93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c940:	movw	r0, #0
   1c944:	movw	r1, #0
   1c948:	mov	r6, #0
   1c94c:	movt	r0, #0
   1c950:	movt	r1, #0
   1c954:	str	r6, [fp, #-52]	; 0xffffffcc
   1c958:	orrs	r4, r1, r0
   1c95c:	beq	1c974 <__assert_fail@plt+0xacc8>
   1c960:	add	r0, r5, #136	; 0x88
   1c964:	mov	r1, #0
   1c968:	bl	118f8 <pthread_mutex_init@plt>
   1c96c:	cmp	r0, #0
   1c970:	bne	1c918 <__assert_fail@plt+0xac6c>
   1c974:	vmov.i32	q8, #0	; 0x00000000
   1c978:	add	r1, sp, #32
   1c97c:	str	r4, [sp, #8]
   1c980:	ldr	r4, [sl, #20]
   1c984:	ldr	r3, [sp, #28]
   1c988:	add	r0, r1, #64	; 0x40
   1c98c:	vst1.32	{d16-d17}, [r0]
   1c990:	add	r0, r1, #52	; 0x34
   1c994:	vst1.32	{d16-d17}, [r0]
   1c998:	add	r0, r1, #36	; 0x24
   1c99c:	vst1.32	{d16-d17}, [r0]
   1c9a0:	add	r0, r1, #20
   1c9a4:	vst1.32	{d16-d17}, [r0]
   1c9a8:	add	r0, r1, #4
   1c9ac:	add	r1, r1, #44	; 0x2c
   1c9b0:	vst1.32	{d16-d17}, [r0]
   1c9b4:	str	r3, [sp, #32]
   1c9b8:	ubfx	r0, r9, #22, #1
   1c9bc:	str	r9, [sp, #24]
   1c9c0:	vdup.32	q8, r7
   1c9c4:	str	r5, [sp, #20]
   1c9c8:	strb	r0, [sp, #104]	; 0x68
   1c9cc:	and	r0, r9, #4194304	; 0x400000
   1c9d0:	str	r4, [sp, #96]	; 0x60
   1c9d4:	orrs	r9, r0, r4
   1c9d8:	str	r0, [sp, #12]
   1c9dc:	movwne	r9, #1
   1c9e0:	cmp	r7, #1
   1c9e4:	strb	r9, [sp, #107]	; 0x6b
   1c9e8:	ldr	r0, [r5, #92]	; 0x5c
   1c9ec:	str	r0, [sp, #112]	; 0x70
   1c9f0:	ldrb	r2, [r5, #88]	; 0x58
   1c9f4:	vst1.32	{d16-d17}, [r1]
   1c9f8:	ubfx	r1, r2, #3, #1
   1c9fc:	strb	r1, [sp, #106]	; 0x6a
   1ca00:	ubfx	r1, r2, #2, #1
   1ca04:	strb	r1, [sp, #105]	; 0x69
   1ca08:	blt	1ca80 <__assert_fail@plt+0xadd4>
   1ca0c:	cmp	r0, #2
   1ca10:	blt	1ca3c <__assert_fail@plt+0xad90>
   1ca14:	mov	r6, #12
   1ca18:	cmn	r7, #-1073741822	; 0xc0000002
   1ca1c:	bhi	1cfe8 <__assert_fail@plt+0xb33c>
   1ca20:	lsl	r1, r8, #2
   1ca24:	mov	r0, #0
   1ca28:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1ca2c:	cmp	r0, #0
   1ca30:	beq	1cfe8 <__assert_fail@plt+0xb33c>
   1ca34:	ldr	r3, [sp, #28]
   1ca38:	str	r0, [sp, #40]	; 0x28
   1ca3c:	cmp	r9, #0
   1ca40:	mov	r6, #0
   1ca44:	mov	r9, #0
   1ca48:	beq	1ca70 <__assert_fail@plt+0xadc4>
   1ca4c:	mov	r0, #0
   1ca50:	mov	r1, r8
   1ca54:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1ca58:	cmp	r0, #0
   1ca5c:	beq	1cfe4 <__assert_fail@plt+0xb338>
   1ca60:	ldr	r3, [sp, #28]
   1ca64:	mov	r6, r0
   1ca68:	mov	r9, #1
   1ca6c:	str	r0, [sp, #36]	; 0x24
   1ca70:	ldr	r0, [sp, #20]
   1ca74:	str	r8, [sp, #68]	; 0x44
   1ca78:	ldr	r0, [r0, #92]	; 0x5c
   1ca7c:	b	1ca84 <__assert_fail@plt+0xadd8>
   1ca80:	mov	r8, #0
   1ca84:	ldr	r1, [sp, #12]
   1ca88:	cmp	r9, #0
   1ca8c:	moveq	r6, r3
   1ca90:	str	r6, [sp, #36]	; 0x24
   1ca94:	cmp	r1, #0
   1ca98:	beq	1cb88 <__assert_fail@plt+0xaedc>
   1ca9c:	cmp	r0, #2
   1caa0:	blt	1cba0 <__assert_fail@plt+0xaef4>
   1caa4:	add	r0, sp, #32
   1caa8:	bl	21f00 <__assert_fail@plt+0x10254>
   1caac:	ldr	r9, [sp, #20]
   1cab0:	cmp	r0, #0
   1cab4:	bne	1cfdc <__assert_fail@plt+0xb330>
   1cab8:	add	r5, sp, #32
   1cabc:	ldr	r0, [sp, #64]	; 0x40
   1cac0:	cmp	r0, r7
   1cac4:	blt	1caec <__assert_fail@plt+0xae40>
   1cac8:	b	1cc94 <__assert_fail@plt+0xafe8>
   1cacc:	mov	r0, r5
   1cad0:	str	r4, [sp, #68]	; 0x44
   1cad4:	bl	21f00 <__assert_fail@plt+0x10254>
   1cad8:	cmp	r0, #0
   1cadc:	bne	1cfdc <__assert_fail@plt+0xb330>
   1cae0:	ldr	r0, [sp, #64]	; 0x40
   1cae4:	cmp	r0, r7
   1cae8:	bge	1cc94 <__assert_fail@plt+0xafe8>
   1caec:	ldr	r0, [r9, #92]	; 0x5c
   1caf0:	ldr	r2, [sp, #60]	; 0x3c
   1caf4:	ldr	r1, [sp, #68]	; 0x44
   1caf8:	add	r0, r0, r2
   1cafc:	cmp	r1, r0
   1cb00:	bgt	1cc94 <__assert_fail@plt+0xafe8>
   1cb04:	ldr	r0, [sp, #112]	; 0x70
   1cb08:	lsl	r4, r1, #1
   1cb0c:	cmp	r0, #2
   1cb10:	blt	1cb60 <__assert_fail@plt+0xaeb4>
   1cb14:	mov	r6, #12
   1cb18:	cmn	r4, #-1073741823	; 0xc0000001
   1cb1c:	bhi	1cfe8 <__assert_fail@plt+0xb33c>
   1cb20:	ldr	r0, [sp, #40]	; 0x28
   1cb24:	lsl	r8, r1, #3
   1cb28:	mov	r1, r8
   1cb2c:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1cb30:	cmp	r0, #0
   1cb34:	beq	1cfe8 <__assert_fail@plt+0xb33c>
   1cb38:	str	r0, [sp, #40]	; 0x28
   1cb3c:	ldr	r0, [sp, #44]	; 0x2c
   1cb40:	cmp	r0, #0
   1cb44:	beq	1cb60 <__assert_fail@plt+0xaeb4>
   1cb48:	mov	r1, r8
   1cb4c:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1cb50:	cmp	r0, #0
   1cb54:	beq	1cfe8 <__assert_fail@plt+0xb33c>
   1cb58:	ldr	r9, [sp, #20]
   1cb5c:	str	r0, [sp, #44]	; 0x2c
   1cb60:	ldrb	r0, [sp, #107]	; 0x6b
   1cb64:	cmp	r0, #0
   1cb68:	beq	1cacc <__assert_fail@plt+0xae20>
   1cb6c:	ldr	r0, [sp, #36]	; 0x24
   1cb70:	mov	r1, r4
   1cb74:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1cb78:	cmp	r0, #0
   1cb7c:	beq	1cfe4 <__assert_fail@plt+0xb338>
   1cb80:	str	r0, [sp, #36]	; 0x24
   1cb84:	b	1cacc <__assert_fail@plt+0xae20>
   1cb88:	cmp	r0, #2
   1cb8c:	blt	1cc20 <__assert_fail@plt+0xaf74>
   1cb90:	add	r0, sp, #32
   1cb94:	bl	22820 <__assert_fail@plt+0x10b74>
   1cb98:	ldr	r9, [sp, #20]
   1cb9c:	b	1cc94 <__assert_fail@plt+0xafe8>
   1cba0:	ldr	r9, [sp, #20]
   1cba4:	cmp	r8, r7
   1cba8:	movgt	r8, r7
   1cbac:	cmp	r8, #1
   1cbb0:	blt	1cc88 <__assert_fail@plt+0xafdc>
   1cbb4:	mov	r6, #0
   1cbb8:	bl	11a60 <__ctype_toupper_loc@plt>
   1cbbc:	ldr	r3, [sp, #28]
   1cbc0:	mov	r1, #0
   1cbc4:	add	r2, r3, r6
   1cbc8:	cmp	r4, #0
   1cbcc:	ldrb	r2, [r2, r1]
   1cbd0:	beq	1cbfc <__assert_fail@plt+0xaf50>
   1cbd4:	b	1cbf8 <__assert_fail@plt+0xaf4c>
   1cbd8:	ldr	r3, [sp, #32]
   1cbdc:	ldr	r6, [sp, #56]	; 0x38
   1cbe0:	ldr	r4, [sp, #96]	; 0x60
   1cbe4:	mov	r1, r2
   1cbe8:	add	r2, r3, r6
   1cbec:	cmp	r4, #0
   1cbf0:	ldrb	r2, [r2, r1]
   1cbf4:	beq	1cbfc <__assert_fail@plt+0xaf50>
   1cbf8:	ldrb	r2, [r4, r2]
   1cbfc:	ldr	r3, [r0]
   1cc00:	ldr	r2, [r3, r2, lsl #2]
   1cc04:	ldr	r3, [sp, #36]	; 0x24
   1cc08:	strb	r2, [r3, r1]
   1cc0c:	add	r2, r1, #1
   1cc10:	cmp	r2, r8
   1cc14:	blt	1cbd8 <__assert_fail@plt+0xaf2c>
   1cc18:	add	r0, r1, #1
   1cc1c:	b	1cc8c <__assert_fail@plt+0xafe0>
   1cc20:	ldr	r9, [sp, #20]
   1cc24:	cmp	r4, #0
   1cc28:	beq	1cf3c <__assert_fail@plt+0xb290>
   1cc2c:	cmp	r8, r7
   1cc30:	movgt	r8, r7
   1cc34:	cmp	r8, #1
   1cc38:	blt	1cc88 <__assert_fail@plt+0xafdc>
   1cc3c:	ldrb	r0, [r3]
   1cc40:	cmp	r8, #1
   1cc44:	ldrb	r0, [r4, r0]
   1cc48:	strb	r0, [r6]
   1cc4c:	mov	r0, #1
   1cc50:	beq	1cc8c <__assert_fail@plt+0xafe0>
   1cc54:	mov	r0, #1
   1cc58:	ldr	r1, [sp, #32]
   1cc5c:	ldr	r3, [sp, #56]	; 0x38
   1cc60:	ldr	r7, [sp, #96]	; 0x60
   1cc64:	ldr	r2, [sp, #36]	; 0x24
   1cc68:	add	r1, r1, r3
   1cc6c:	ldrb	r1, [r1, r0]
   1cc70:	ldrb	r1, [r7, r1]
   1cc74:	strb	r1, [r2, r0]
   1cc78:	add	r0, r0, #1
   1cc7c:	cmp	r0, r8
   1cc80:	blt	1cc58 <__assert_fail@plt+0xafac>
   1cc84:	b	1cc8c <__assert_fail@plt+0xafe0>
   1cc88:	mov	r0, #0
   1cc8c:	str	r0, [sp, #64]	; 0x40
   1cc90:	str	r0, [sp, #60]	; 0x3c
   1cc94:	mov	r5, #0
   1cc98:	ldr	r4, [sp, #24]
   1cc9c:	sub	r8, fp, #48	; 0x30
   1cca0:	add	r6, sp, #32
   1cca4:	str	r5, [fp, #-52]	; 0xffffffcc
   1cca8:	str	r5, [sl, #24]
   1ccac:	mov	r0, r8
   1ccb0:	mov	r1, r6
   1ccb4:	ldr	r7, [sl]
   1ccb8:	orr	r2, r4, #8388608	; 0x800000
   1ccbc:	str	r4, [r7, #128]	; 0x80
   1ccc0:	bl	22db8 <__assert_fail@plt+0x1110c>
   1ccc4:	ldr	r1, [sp, #72]	; 0x48
   1ccc8:	mov	r2, r8
   1cccc:	mov	r3, r4
   1ccd0:	str	r5, [sp]
   1ccd4:	add	r0, r1, r0
   1ccd8:	mov	r1, sl
   1ccdc:	str	r0, [sp, #72]	; 0x48
   1cce0:	sub	r0, fp, #52	; 0x34
   1cce4:	str	r0, [sp, #4]
   1cce8:	mov	r0, r6
   1ccec:	bl	22a30 <__assert_fail@plt+0x10d84>
   1ccf0:	mov	r4, r0
   1ccf4:	cmp	r0, #0
   1ccf8:	bne	1cd08 <__assert_fail@plt+0xb05c>
   1ccfc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1cd00:	cmp	r0, #0
   1cd04:	bne	1d090 <__assert_fail@plt+0xb3e4>
   1cd08:	ldr	r1, [r7, #64]	; 0x40
   1cd0c:	cmp	r1, #31
   1cd10:	beq	1d028 <__assert_fail@plt+0xb37c>
   1cd14:	ldr	r0, [r7, #56]	; 0x38
   1cd18:	add	r0, r0, r1, lsl #5
   1cd1c:	add	r2, r1, #1
   1cd20:	vmov.i32	q8, #0	; 0x00000000
   1cd24:	mov	r1, #0
   1cd28:	str	r2, [r7, #64]	; 0x40
   1cd2c:	mov	r2, #2
   1cd30:	add	r6, r0, #4
   1cd34:	str	r1, [r0, #20]
   1cd38:	str	r1, [r0, #24]
   1cd3c:	str	r2, [r0, #28]
   1cd40:	mov	r0, #28
   1cd44:	mov	r1, r6
   1cd48:	vst1.32	{d16-d17}, [r1], r0
   1cd4c:	mvn	r0, #0
   1cd50:	str	r0, [r1]
   1cd54:	cmp	r4, #0
   1cd58:	mov	r0, r6
   1cd5c:	beq	1cdb0 <__assert_fail@plt+0xb104>
   1cd60:	ldr	r1, [r7, #64]	; 0x40
   1cd64:	cmp	r1, #31
   1cd68:	beq	1d060 <__assert_fail@plt+0xb3b4>
   1cd6c:	ldr	r0, [r7, #56]	; 0x38
   1cd70:	add	r0, r0, r1, lsl #5
   1cd74:	add	r2, r1, #1
   1cd78:	mov	r1, #0
   1cd7c:	cmp	r6, #0
   1cd80:	mvn	r3, #0
   1cd84:	str	r2, [r7, #64]	; 0x40
   1cd88:	mov	r2, #16
   1cd8c:	str	r1, [r0, #4]!
   1cd90:	add	ip, r0, #20
   1cd94:	stmib	r0, {r4, r6}
   1cd98:	str	r1, [r0, #12]
   1cd9c:	str	r1, [r0, #16]
   1cda0:	stm	ip, {r1, r2, r3}
   1cda4:	str	r0, [r4]
   1cda8:	beq	1d088 <__assert_fail@plt+0xb3dc>
   1cdac:	str	r0, [r6]
   1cdb0:	cmp	r6, #0
   1cdb4:	cmpne	r0, #0
   1cdb8:	beq	1d088 <__assert_fail@plt+0xb3dc>
   1cdbc:	str	r0, [r9, #52]	; 0x34
   1cdc0:	ldr	r8, [sl]
   1cdc4:	ldr	r0, [r8, #4]
   1cdc8:	lsl	r0, r0, #2
   1cdcc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1cdd0:	str	r0, [r8, #12]
   1cdd4:	ldr	r0, [r8, #4]
   1cdd8:	lsl	r0, r0, #2
   1cddc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1cde0:	str	r0, [r8, #16]
   1cde4:	ldr	r0, [r8, #4]
   1cde8:	add	r0, r0, r0, lsl #1
   1cdec:	lsl	r0, r0, #2
   1cdf0:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1cdf4:	str	r0, [r8, #20]
   1cdf8:	ldr	r0, [r8, #4]
   1cdfc:	add	r0, r0, r0, lsl #1
   1ce00:	lsl	r0, r0, #2
   1ce04:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1ce08:	str	r0, [r8, #24]
   1ce0c:	ldr	r1, [r8, #12]
   1ce10:	cmp	r1, #0
   1ce14:	ldrne	r1, [r8, #16]
   1ce18:	cmpne	r1, #0
   1ce1c:	beq	1ce30 <__assert_fail@plt+0xb184>
   1ce20:	cmp	r0, #0
   1ce24:	ldrne	r0, [r8, #20]
   1ce28:	cmpne	r0, #0
   1ce2c:	bne	1ced8 <__assert_fail@plt+0xb22c>
   1ce30:	mov	r0, #12
   1ce34:	str	r0, [fp, #-52]	; 0xffffffcc
   1ce38:	ldr	r4, [sl]
   1ce3c:	ldr	r0, [r4, #56]	; 0x38
   1ce40:	cmp	r0, #0
   1ce44:	beq	1ce5c <__assert_fail@plt+0xb1b0>
   1ce48:	ldr	r5, [r0]
   1ce4c:	bl	1c224 <__assert_fail@plt+0xa578>
   1ce50:	cmp	r5, #0
   1ce54:	mov	r0, r5
   1ce58:	bne	1ce48 <__assert_fail@plt+0xb19c>
   1ce5c:	mov	r0, #31
   1ce60:	mov	r5, #0
   1ce64:	str	r0, [r4, #64]	; 0x40
   1ce68:	str	r5, [r4, #52]	; 0x34
   1ce6c:	str	r5, [r4, #56]	; 0x38
   1ce70:	ldr	r0, [r4, #16]
   1ce74:	bl	1c224 <__assert_fail@plt+0xa578>
   1ce78:	str	r5, [r4, #16]
   1ce7c:	ldr	r0, [sp, #40]	; 0x28
   1ce80:	bl	1c224 <__assert_fail@plt+0xa578>
   1ce84:	ldr	r0, [sp, #44]	; 0x2c
   1ce88:	bl	1c224 <__assert_fail@plt+0xa578>
   1ce8c:	ldrb	r0, [sp, #107]	; 0x6b
   1ce90:	cmp	r0, #0
   1ce94:	beq	1cea0 <__assert_fail@plt+0xb1f4>
   1ce98:	ldr	r0, [sp, #36]	; 0x24
   1ce9c:	bl	1c224 <__assert_fail@plt+0xa578>
   1cea0:	ldr	r0, [sp, #8]
   1cea4:	cmp	r0, #0
   1cea8:	beq	1ceb4 <__assert_fail@plt+0xb208>
   1ceac:	add	r0, r9, #136	; 0x88
   1ceb0:	bl	11874 <pthread_mutex_destroy@plt>
   1ceb4:	mov	r0, r9
   1ceb8:	bl	1ead4 <__assert_fail@plt+0xce28>
   1cebc:	mov	r0, #0
   1cec0:	str	r0, [sl]
   1cec4:	str	r0, [sl, #4]
   1cec8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1cecc:	mov	r0, r4
   1ced0:	sub	sp, fp, #28
   1ced4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ced8:	ldr	r0, [sl, #24]
   1cedc:	lsl	r0, r0, #2
   1cee0:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1cee4:	cmp	r0, #0
   1cee8:	str	r0, [r8, #132]	; 0x84
   1ceec:	beq	1d2a4 <__assert_fail@plt+0xb5f8>
   1cef0:	ldr	r1, [sl, #24]
   1cef4:	cmp	r1, #0
   1cef8:	beq	1d0d0 <__assert_fail@plt+0xb424>
   1cefc:	mov	r2, #0
   1cf00:	cmp	r1, #4
   1cf04:	bcc	1d0c0 <__assert_fail@plt+0xb414>
   1cf08:	bic	r2, r1, #3
   1cf0c:	mov	r3, #1
   1cf10:	add	r7, pc, #872	; 0x368
   1cf14:	sub	r6, r2, #4
   1cf18:	add	r3, r3, r6, lsr #2
   1cf1c:	cmp	r6, #12
   1cf20:	and	ip, r3, #3
   1cf24:	bcs	1cf48 <__assert_fail@plt+0xb29c>
   1cf28:	vld1.64	{d16-d17}, [r7 :128]
   1cf2c:	mov	r7, #0
   1cf30:	cmp	ip, #0
   1cf34:	bne	1cfb8 <__assert_fail@plt+0xb30c>
   1cf38:	b	1d0c8 <__assert_fail@plt+0xb41c>
   1cf3c:	str	r8, [sp, #64]	; 0x40
   1cf40:	str	r8, [sp, #60]	; 0x3c
   1cf44:	b	1cc94 <__assert_fail@plt+0xafe8>
   1cf48:	sub	r6, r3, ip
   1cf4c:	add	r3, pc, #812	; 0x32c
   1cf50:	vmov.i32	q9, #12	; 0x0000000c
   1cf54:	vmov.i32	q10, #8	; 0x00000008
   1cf58:	vmov.i32	q11, #4	; 0x00000004
   1cf5c:	vmov.i32	q12, #16	; 0x00000010
   1cf60:	mov	r7, #0
   1cf64:	mov	lr, #64	; 0x40
   1cf68:	mov	r4, r0
   1cf6c:	vld1.64	{d16-d17}, [r3 :128]
   1cf70:	mov	r3, r0
   1cf74:	vadd.i32	q13, q8, q9
   1cf78:	add	r5, r3, #48	; 0x30
   1cf7c:	vadd.i32	q14, q8, q10
   1cf80:	vadd.i32	q15, q8, q11
   1cf84:	subs	r6, r6, #4
   1cf88:	add	r7, r7, #16
   1cf8c:	vst1.32	{d26-d27}, [r5]
   1cf90:	vst1.32	{d16-d17}, [r4], lr
   1cf94:	vadd.i32	q8, q8, q12
   1cf98:	add	r5, r3, #32
   1cf9c:	add	r3, r3, #16
   1cfa0:	vst1.32	{d28-d29}, [r5]
   1cfa4:	vst1.32	{d30-d31}, [r3]
   1cfa8:	mov	r3, r4
   1cfac:	bne	1cf74 <__assert_fail@plt+0xb2c8>
   1cfb0:	cmp	ip, #0
   1cfb4:	beq	1d0c8 <__assert_fail@plt+0xb41c>
   1cfb8:	vmov.i32	q9, #4	; 0x00000004
   1cfbc:	add	r3, r0, r7, lsl #2
   1cfc0:	rsb	r7, ip, #0
   1cfc4:	vadd.i32	q10, q8, q9
   1cfc8:	vst1.32	{d16-d17}, [r3]!
   1cfcc:	adds	r7, r7, #1
   1cfd0:	vorr	q8, q10, q10
   1cfd4:	bcc	1cfc4 <__assert_fail@plt+0xb318>
   1cfd8:	b	1d0c8 <__assert_fail@plt+0xb41c>
   1cfdc:	mov	r6, r0
   1cfe0:	b	1cfe8 <__assert_fail@plt+0xb33c>
   1cfe4:	mov	r6, #12
   1cfe8:	ldr	r9, [sp, #20]
   1cfec:	str	r6, [fp, #-52]	; 0xffffffcc
   1cff0:	ldr	r4, [sl]
   1cff4:	ldr	r0, [r4, #56]	; 0x38
   1cff8:	cmp	r0, #0
   1cffc:	bne	1ce48 <__assert_fail@plt+0xb19c>
   1d000:	b	1ce5c <__assert_fail@plt+0xb1b0>
   1d004:	mov	r0, r5
   1d008:	mov	r1, #160	; 0xa0
   1d00c:	mov	r4, #160	; 0xa0
   1d010:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1d014:	cmp	r0, #0
   1d018:	beq	1d050 <__assert_fail@plt+0xb3a4>
   1d01c:	mov	r5, r0
   1d020:	stm	sl, {r0, r4}
   1d024:	b	1c4ec <__assert_fail@plt+0xa840>
   1d028:	mov	r0, #996	; 0x3e4
   1d02c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1d030:	cmp	r0, #0
   1d034:	beq	1d0ac <__assert_fail@plt+0xb400>
   1d038:	ldr	r1, [r7, #56]	; 0x38
   1d03c:	str	r1, [r0]
   1d040:	mov	r1, #0
   1d044:	str	r1, [r7, #64]	; 0x40
   1d048:	str	r0, [r7, #56]	; 0x38
   1d04c:	b	1cd18 <__assert_fail@plt+0xb06c>
   1d050:	mov	r4, #12
   1d054:	mov	r0, r4
   1d058:	sub	sp, fp, #28
   1d05c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d060:	mov	r0, #996	; 0x3e4
   1d064:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1d068:	cmp	r0, #0
   1d06c:	beq	1d088 <__assert_fail@plt+0xb3dc>
   1d070:	ldr	r1, [r7, #56]	; 0x38
   1d074:	str	r1, [r0]
   1d078:	mov	r1, #0
   1d07c:	str	r1, [r7, #64]	; 0x40
   1d080:	str	r0, [r7, #56]	; 0x38
   1d084:	b	1cd70 <__assert_fail@plt+0xb0c4>
   1d088:	mov	r0, #12
   1d08c:	str	r0, [fp, #-52]	; 0xffffffcc
   1d090:	mov	r0, #0
   1d094:	str	r0, [r9, #52]	; 0x34
   1d098:	ldr	r4, [sl]
   1d09c:	ldr	r0, [r4, #56]	; 0x38
   1d0a0:	cmp	r0, #0
   1d0a4:	bne	1ce48 <__assert_fail@plt+0xb19c>
   1d0a8:	b	1ce5c <__assert_fail@plt+0xb1b0>
   1d0ac:	mov	r6, #0
   1d0b0:	cmp	r4, #0
   1d0b4:	mov	r0, r6
   1d0b8:	bne	1cd60 <__assert_fail@plt+0xb0b4>
   1d0bc:	b	1cdb0 <__assert_fail@plt+0xb104>
   1d0c0:	str	r2, [r0, r2, lsl #2]
   1d0c4:	add	r2, r2, #1
   1d0c8:	cmp	r1, r2
   1d0cc:	bne	1d0c0 <__assert_fail@plt+0xb414>
   1d0d0:	ldr	r2, [r8, #52]	; 0x34
   1d0d4:	ldrb	r1, [r2, #24]
   1d0d8:	cmp	r1, #17
   1d0dc:	beq	1d108 <__assert_fail@plt+0xb45c>
   1d0e0:	cmp	r1, #4
   1d0e4:	bne	1d158 <__assert_fail@plt+0xb4ac>
   1d0e8:	ldr	r1, [r2, #20]
   1d0ec:	mov	r3, #1
   1d0f0:	ldr	r0, [r0, r1, lsl #2]
   1d0f4:	str	r0, [r2, #20]
   1d0f8:	ldr	r1, [r8, #80]	; 0x50
   1d0fc:	orr	r0, r1, r3, lsl r0
   1d100:	str	r0, [r8, #80]	; 0x50
   1d104:	b	1d158 <__assert_fail@plt+0xb4ac>
   1d108:	ldr	r1, [r2, #4]
   1d10c:	cmp	r1, #0
   1d110:	beq	1d158 <__assert_fail@plt+0xb4ac>
   1d114:	ldrb	r3, [r1, #24]
   1d118:	cmp	r3, #17
   1d11c:	bne	1d158 <__assert_fail@plt+0xb4ac>
   1d120:	ldr	r3, [r1, #4]
   1d124:	ldr	r1, [r1, #20]
   1d128:	cmp	r3, #0
   1d12c:	str	r3, [r2, #4]
   1d130:	strne	r2, [r3]
   1d134:	cmp	r1, #31
   1d138:	ldr	r3, [r2, #20]
   1d13c:	ldr	r3, [r0, r3, lsl #2]
   1d140:	str	r3, [r0, r1, lsl #2]
   1d144:	bgt	1d158 <__assert_fail@plt+0xb4ac>
   1d148:	ldr	r0, [r8, #80]	; 0x50
   1d14c:	mov	r3, #1
   1d150:	bic	r0, r0, r3, lsl r1
   1d154:	b	1d100 <__assert_fail@plt+0xb454>
   1d158:	mov	r0, #1
   1d15c:	ldr	r7, [r2, #4]
   1d160:	cmp	r7, #0
   1d164:	bne	1d194 <__assert_fail@plt+0xb4e8>
   1d168:	mov	r3, #0
   1d16c:	ldr	r7, [r2, #8]
   1d170:	mov	r1, r2
   1d174:	cmp	r7, r3
   1d178:	cmpne	r7, #0
   1d17c:	bne	1d194 <__assert_fail@plt+0xb4e8>
   1d180:	ldr	r2, [r1]
   1d184:	mov	r3, r1
   1d188:	cmp	r2, #0
   1d18c:	bne	1d16c <__assert_fail@plt+0xb4c0>
   1d190:	b	1d244 <__assert_fail@plt+0xb598>
   1d194:	ldrb	r1, [r7, #24]
   1d198:	cmp	r1, #17
   1d19c:	beq	1d1e8 <__assert_fail@plt+0xb53c>
   1d1a0:	cmp	r1, #4
   1d1a4:	mov	r2, r7
   1d1a8:	bne	1d15c <__assert_fail@plt+0xb4b0>
   1d1ac:	ldr	r1, [r8, #132]	; 0x84
   1d1b0:	mov	r2, r7
   1d1b4:	cmp	r1, #0
   1d1b8:	beq	1d15c <__assert_fail@plt+0xb4b0>
   1d1bc:	ldr	r2, [r7, #20]
   1d1c0:	ldr	r1, [r1, r2, lsl #2]
   1d1c4:	str	r1, [r7, #20]
   1d1c8:	ldr	r2, [r8, #80]	; 0x50
   1d1cc:	orr	r1, r2, r0, lsl r1
   1d1d0:	str	r1, [r8, #80]	; 0x50
   1d1d4:	mov	r2, r7
   1d1d8:	ldr	r7, [r2, #4]
   1d1dc:	cmp	r7, #0
   1d1e0:	bne	1d194 <__assert_fail@plt+0xb4e8>
   1d1e4:	b	1d168 <__assert_fail@plt+0xb4bc>
   1d1e8:	ldr	r3, [r7, #4]
   1d1ec:	mov	r2, r7
   1d1f0:	cmp	r3, #0
   1d1f4:	beq	1d15c <__assert_fail@plt+0xb4b0>
   1d1f8:	ldrb	r1, [r3, #24]
   1d1fc:	mov	r2, r7
   1d200:	cmp	r1, #17
   1d204:	bne	1d15c <__assert_fail@plt+0xb4b0>
   1d208:	ldr	r1, [r3, #4]
   1d20c:	ldr	r3, [r3, #20]
   1d210:	cmp	r1, #0
   1d214:	str	r1, [r7, #4]
   1d218:	strne	r7, [r1]
   1d21c:	cmp	r3, #31
   1d220:	ldr	r1, [r7, #20]
   1d224:	ldr	r2, [r8, #132]	; 0x84
   1d228:	ldr	r1, [r2, r1, lsl #2]
   1d22c:	str	r1, [r2, r3, lsl #2]
   1d230:	mov	r2, r7
   1d234:	bgt	1d15c <__assert_fail@plt+0xb4b0>
   1d238:	ldr	r1, [r8, #80]	; 0x50
   1d23c:	bic	r1, r1, r0, lsl r3
   1d240:	b	1d1d0 <__assert_fail@plt+0xb524>
   1d244:	ldr	r1, [sl, #24]
   1d248:	cmp	r1, #0
   1d24c:	beq	1d274 <__assert_fail@plt+0xb5c8>
   1d250:	ldr	r0, [r8, #132]	; 0x84
   1d254:	mov	r2, #0
   1d258:	ldr	r3, [r0, r2, lsl #2]
   1d25c:	cmp	r2, r3
   1d260:	bne	1d290 <__assert_fail@plt+0xb5e4>
   1d264:	add	r2, r2, #1
   1d268:	cmp	r1, r2
   1d26c:	bne	1d258 <__assert_fail@plt+0xb5ac>
   1d270:	b	1d298 <__assert_fail@plt+0xb5ec>
   1d274:	ldr	r0, [r8, #132]	; 0x84
   1d278:	b	1d298 <__assert_fail@plt+0xb5ec>
   1d27c:	nop	{0}
   1d280:	andeq	r0, r0, r0
   1d284:	andeq	r0, r0, r1
   1d288:	andeq	r0, r0, r2
   1d28c:	andeq	r0, r0, r3
   1d290:	cmp	r1, r2
   1d294:	bne	1d2a4 <__assert_fail@plt+0xb5f8>
   1d298:	bl	1c224 <__assert_fail@plt+0xa578>
   1d29c:	mov	r0, #0
   1d2a0:	str	r0, [r8, #132]	; 0x84
   1d2a4:	ldr	r0, [r8, #52]	; 0x34
   1d2a8:	str	r8, [sp, #24]
   1d2ac:	mov	r7, #0
   1d2b0:	sub	r8, fp, #48	; 0x30
   1d2b4:	mov	r4, r0
   1d2b8:	ldr	r0, [r0, #4]
   1d2bc:	cmp	r0, #0
   1d2c0:	bne	1d2b4 <__assert_fail@plt+0xb608>
   1d2c4:	ldr	r0, [r4, #8]
   1d2c8:	cmp	r0, #0
   1d2cc:	bne	1d2b4 <__assert_fail@plt+0xb608>
   1d2d0:	mov	r3, #0
   1d2d4:	cmp	r3, #0
   1d2d8:	str	r7, [fp, #-48]	; 0xffffffd0
   1d2dc:	beq	1d308 <__assert_fail@plt+0xb65c>
   1d2e0:	ldrb	r0, [r3, #24]
   1d2e4:	cmp	r0, #17
   1d2e8:	bne	1d308 <__assert_fail@plt+0xb65c>
   1d2ec:	ldrb	r2, [sl, #28]
   1d2f0:	ldr	r1, [sl]
   1d2f4:	mov	r0, r8
   1d2f8:	bl	275b0 <__assert_fail@plt+0x15904>
   1d2fc:	cmp	r0, #0
   1d300:	str	r0, [r4, #4]
   1d304:	strne	r4, [r0]
   1d308:	ldr	r3, [r4, #8]
   1d30c:	cmp	r3, #0
   1d310:	beq	1d33c <__assert_fail@plt+0xb690>
   1d314:	ldrb	r0, [r3, #24]
   1d318:	cmp	r0, #17
   1d31c:	bne	1d33c <__assert_fail@plt+0xb690>
   1d320:	ldrb	r2, [sl, #28]
   1d324:	ldr	r1, [sl]
   1d328:	mov	r0, r8
   1d32c:	bl	275b0 <__assert_fail@plt+0x15904>
   1d330:	cmp	r0, #0
   1d334:	str	r0, [r4, #8]
   1d338:	strne	r4, [r0]
   1d33c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d340:	cmp	r0, #0
   1d344:	bne	1ce34 <__assert_fail@plt+0xb188>
   1d348:	ldr	r1, [r4]
   1d34c:	cmp	r1, #0
   1d350:	beq	1d37c <__assert_fail@plt+0xb6d0>
   1d354:	ldr	r0, [r1, #8]
   1d358:	cmp	r0, r4
   1d35c:	cmpne	r0, #0
   1d360:	bne	1d2b4 <__assert_fail@plt+0xb608>
   1d364:	ldr	r3, [r1, #4]
   1d368:	mov	r4, r1
   1d36c:	cmp	r3, #0
   1d370:	str	r7, [fp, #-48]	; 0xffffffd0
   1d374:	bne	1d2e0 <__assert_fail@plt+0xb634>
   1d378:	b	1d308 <__assert_fail@plt+0xb65c>
   1d37c:	ldr	r8, [sp, #24]
   1d380:	ldr	r0, [r8, #52]	; 0x34
   1d384:	mov	r4, r0
   1d388:	ldr	r0, [r0, #4]
   1d38c:	cmp	r0, #0
   1d390:	bne	1d384 <__assert_fail@plt+0xb6d8>
   1d394:	ldr	r0, [r4, #8]
   1d398:	cmp	r0, #0
   1d39c:	bne	1d384 <__assert_fail@plt+0xb6d8>
   1d3a0:	ldr	r2, [r4, #24]
   1d3a4:	uxtb	r0, r2
   1d3a8:	cmp	r0, #16
   1d3ac:	bne	1d3f0 <__assert_fail@plt+0xb744>
   1d3b0:	ldr	r0, [r4, #4]
   1d3b4:	ldr	r1, [r0, #12]
   1d3b8:	str	r1, [r4, #12]
   1d3bc:	ldr	r0, [r0, #28]
   1d3c0:	str	r0, [r4, #28]
   1d3c4:	ldr	r1, [r4]
   1d3c8:	cmp	r1, #0
   1d3cc:	beq	1d43c <__assert_fail@plt+0xb790>
   1d3d0:	ldr	r0, [r1, #8]
   1d3d4:	cmp	r0, r4
   1d3d8:	mov	r4, r1
   1d3dc:	beq	1d3a0 <__assert_fail@plt+0xb6f4>
   1d3e0:	cmp	r0, #0
   1d3e4:	mov	r4, r1
   1d3e8:	beq	1d3a0 <__assert_fail@plt+0xb6f4>
   1d3ec:	b	1d384 <__assert_fail@plt+0xb6d8>
   1d3f0:	str	r4, [r4, #12]
   1d3f4:	mov	r0, r8
   1d3f8:	ldr	r1, [r4, #20]
   1d3fc:	bl	27898 <__assert_fail@plt+0x15bec>
   1d400:	cmn	r0, #1
   1d404:	str	r0, [r4, #28]
   1d408:	beq	1ce30 <__assert_fail@plt+0xb184>
   1d40c:	ldrb	r1, [r4, #24]
   1d410:	cmp	r1, #12
   1d414:	bne	1d430 <__assert_fail@plt+0xb784>
   1d418:	ldr	r1, [r8]
   1d41c:	ldr	r2, [r4, #20]
   1d420:	add	r0, r1, r0, lsl #3
   1d424:	ldr	r1, [r0, #4]
   1d428:	bfi	r1, r2, #8, #10
   1d42c:	str	r1, [r0, #4]
   1d430:	ldr	r1, [r4]
   1d434:	cmp	r1, #0
   1d438:	bne	1d3d0 <__assert_fail@plt+0xb724>
   1d43c:	ldr	r4, [r8, #52]	; 0x34
   1d440:	ldrb	r0, [r4, #24]
   1d444:	cmp	r0, #16
   1d448:	beq	1d46c <__assert_fail@plt+0xb7c0>
   1d44c:	cmp	r0, #11
   1d450:	bne	1d47c <__assert_fail@plt+0xb7d0>
   1d454:	ldr	r0, [r4, #4]
   1d458:	str	r4, [r0, #16]
   1d45c:	mov	r1, r4
   1d460:	cmp	r0, #0
   1d464:	bne	1d4c0 <__assert_fail@plt+0xb814>
   1d468:	b	1d524 <__assert_fail@plt+0xb878>
   1d46c:	ldmib	r4, {r0, r1}
   1d470:	ldr	r2, [r1, #12]
   1d474:	str	r2, [r0, #16]
   1d478:	b	1d498 <__assert_fail@plt+0xb7ec>
   1d47c:	ldr	r0, [r4, #4]
   1d480:	cmp	r0, #0
   1d484:	ldrne	r1, [r4, #16]
   1d488:	strne	r1, [r0, #16]
   1d48c:	ldr	r1, [r4, #8]
   1d490:	cmp	r1, #0
   1d494:	beq	1d4a0 <__assert_fail@plt+0xb7f4>
   1d498:	ldr	r2, [r4, #16]
   1d49c:	str	r2, [r1, #16]
   1d4a0:	mov	r1, r4
   1d4a4:	cmp	r0, #0
   1d4a8:	bne	1d4c0 <__assert_fail@plt+0xb814>
   1d4ac:	b	1d524 <__assert_fail@plt+0xb878>
   1d4b0:	ldr	r0, [r1, #4]
   1d4b4:	str	r1, [r0, #16]
   1d4b8:	cmp	r0, #0
   1d4bc:	beq	1d524 <__assert_fail@plt+0xb878>
   1d4c0:	mov	r1, r0
   1d4c4:	ldrb	r0, [r0, #24]
   1d4c8:	cmp	r0, #16
   1d4cc:	beq	1d508 <__assert_fail@plt+0xb85c>
   1d4d0:	cmp	r0, #11
   1d4d4:	beq	1d4b0 <__assert_fail@plt+0xb804>
   1d4d8:	ldr	r0, [r1, #4]
   1d4dc:	cmp	r0, #0
   1d4e0:	ldrne	r2, [r1, #16]
   1d4e4:	strne	r2, [r0, #16]
   1d4e8:	ldr	r2, [r1, #8]
   1d4ec:	cmp	r2, #0
   1d4f0:	beq	1d4b8 <__assert_fail@plt+0xb80c>
   1d4f4:	ldr	r3, [r1, #16]
   1d4f8:	str	r3, [r2, #16]
   1d4fc:	cmp	r0, #0
   1d500:	bne	1d4c0 <__assert_fail@plt+0xb814>
   1d504:	b	1d524 <__assert_fail@plt+0xb878>
   1d508:	ldmib	r1, {r0, r2}
   1d50c:	ldr	r3, [r2, #12]
   1d510:	str	r3, [r0, #16]
   1d514:	ldr	r3, [r1, #16]
   1d518:	str	r3, [r2, #16]
   1d51c:	cmp	r0, #0
   1d520:	bne	1d4c0 <__assert_fail@plt+0xb814>
   1d524:	mov	r3, #0
   1d528:	ldr	r0, [r1, #8]
   1d52c:	mov	r2, r1
   1d530:	cmp	r0, r3
   1d534:	cmpne	r0, #0
   1d538:	bne	1d4c0 <__assert_fail@plt+0xb814>
   1d53c:	ldr	r1, [r2]
   1d540:	mov	r3, r2
   1d544:	cmp	r1, #0
   1d548:	bne	1d528 <__assert_fail@plt+0xb87c>
   1d54c:	mov	r0, r8
   1d550:	mov	r1, r4
   1d554:	bl	27414 <__assert_fail@plt+0x15768>
   1d558:	cmp	r0, #0
   1d55c:	beq	1d57c <__assert_fail@plt+0xb8d0>
   1d560:	b	1ce34 <__assert_fail@plt+0xb188>
   1d564:	mov	r0, r8
   1d568:	mov	r1, r7
   1d56c:	bl	27414 <__assert_fail@plt+0x15768>
   1d570:	cmp	r0, #0
   1d574:	mov	r4, r7
   1d578:	bne	1ce34 <__assert_fail@plt+0xb188>
   1d57c:	ldr	r7, [r4, #4]
   1d580:	cmp	r7, #0
   1d584:	bne	1d564 <__assert_fail@plt+0xb8b8>
   1d588:	mov	r1, #0
   1d58c:	ldr	r7, [r4, #8]
   1d590:	mov	r0, r4
   1d594:	cmp	r7, r1
   1d598:	cmpne	r7, #0
   1d59c:	bne	1d564 <__assert_fail@plt+0xb8b8>
   1d5a0:	ldr	r4, [r0]
   1d5a4:	mov	r1, r0
   1d5a8:	cmp	r4, #0
   1d5ac:	bne	1d58c <__assert_fail@plt+0xb8e0>
   1d5b0:	mov	r5, #0
   1d5b4:	sub	r4, fp, #48	; 0x30
   1d5b8:	mov	r7, #0
   1d5bc:	b	1d5ec <__assert_fail@plt+0xb940>
   1d5c0:	mov	r1, r5
   1d5c4:	ldr	r2, [r8, #8]
   1d5c8:	add	r0, r7, #1
   1d5cc:	subs	r3, r0, r2
   1d5d0:	mov	r7, r3
   1d5d4:	movwne	r3, #1
   1d5d8:	movne	r7, r0
   1d5dc:	tst	r1, #1
   1d5e0:	and	r5, r1, r3
   1d5e4:	cmpeq	r0, r2
   1d5e8:	beq	1d648 <__assert_fail@plt+0xb99c>
   1d5ec:	ldr	r0, [r8, #24]
   1d5f0:	add	r6, r7, r7, lsl #1
   1d5f4:	add	r0, r0, r6, lsl #2
   1d5f8:	ldr	r0, [r0, #4]
   1d5fc:	cmp	r0, #0
   1d600:	bne	1d5c0 <__assert_fail@plt+0xb914>
   1d604:	mov	r0, r4
   1d608:	mov	r1, r8
   1d60c:	mov	r2, r7
   1d610:	mov	r3, #1
   1d614:	bl	27a70 <__assert_fail@plt+0x15dc4>
   1d618:	cmp	r0, #0
   1d61c:	bne	1ce34 <__assert_fail@plt+0xb188>
   1d620:	ldr	r0, [r8, #24]
   1d624:	mov	r1, r5
   1d628:	add	r0, r0, r6, lsl #2
   1d62c:	ldr	r0, [r0, #4]
   1d630:	cmp	r0, #0
   1d634:	bne	1d5c4 <__assert_fail@plt+0xb918>
   1d638:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d63c:	bl	1c224 <__assert_fail@plt+0xa578>
   1d640:	mov	r1, #1
   1d644:	b	1d5c4 <__assert_fail@plt+0xb918>
   1d648:	ldrb	r1, [sl, #28]
   1d64c:	tst	r1, #16
   1d650:	bne	1d66c <__assert_fail@plt+0xb9c0>
   1d654:	ldr	r1, [sl, #24]
   1d658:	cmp	r1, #0
   1d65c:	beq	1d66c <__assert_fail@plt+0xb9c0>
   1d660:	ldrb	r1, [r8, #88]	; 0x58
   1d664:	tst	r1, #1
   1d668:	bne	1d678 <__assert_fail@plt+0xb9cc>
   1d66c:	ldr	r1, [r8, #76]	; 0x4c
   1d670:	cmp	r1, #0
   1d674:	beq	1d7bc <__assert_fail@plt+0xbb10>
   1d678:	add	r0, r0, r0, lsl #1
   1d67c:	lsl	r0, r0, #2
   1d680:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1d684:	cmp	r0, #0
   1d688:	str	r0, [r8, #28]
   1d68c:	beq	1dc70 <__assert_fail@plt+0xbfc4>
   1d690:	ldr	r1, [r8, #8]
   1d694:	cmp	r1, #0
   1d698:	beq	1d7bc <__assert_fail@plt+0xbb10>
   1d69c:	mov	r1, #0
   1d6a0:	str	r1, [r0]
   1d6a4:	str	r1, [r0, #4]
   1d6a8:	str	r1, [r0, #8]
   1d6ac:	ldr	r0, [r8, #8]
   1d6b0:	cmp	r0, #2
   1d6b4:	bcc	1d6e4 <__assert_fail@plt+0xba38>
   1d6b8:	mov	r2, #1
   1d6bc:	mov	r3, #12
   1d6c0:	ldr	r0, [r8, #28]
   1d6c4:	add	r2, r2, #1
   1d6c8:	str	r1, [r0, r3]!
   1d6cc:	add	r3, r3, #12
   1d6d0:	str	r1, [r0, #4]
   1d6d4:	str	r1, [r0, #8]
   1d6d8:	ldr	r0, [r8, #8]
   1d6dc:	cmp	r2, r0
   1d6e0:	bcc	1d6c0 <__assert_fail@plt+0xba14>
   1d6e4:	cmp	r0, #0
   1d6e8:	beq	1d7bc <__assert_fail@plt+0xbb10>
   1d6ec:	ldr	ip, [r8, #24]
   1d6f0:	mov	r7, #0
   1d6f4:	str	sl, [sp, #16]
   1d6f8:	b	1d710 <__assert_fail@plt+0xba64>
   1d6fc:	ldr	r0, [r8, #8]
   1d700:	ldr	sl, [sp, #16]
   1d704:	add	r7, r7, #1
   1d708:	cmp	r7, r0
   1d70c:	bcs	1d7bc <__assert_fail@plt+0xbb10>
   1d710:	add	r9, r7, r7, lsl #1
   1d714:	add	r2, ip, r9, lsl #2
   1d718:	ldr	r3, [r2, #4]
   1d71c:	cmp	r3, #1
   1d720:	blt	1d704 <__assert_fail@plt+0xba58>
   1d724:	ldr	r1, [r2, #8]
   1d728:	mov	r6, #0
   1d72c:	str	r1, [sp, #28]
   1d730:	b	1d75c <__assert_fail@plt+0xbab0>
   1d734:	add	r0, r4, r0, lsl #2
   1d738:	ldr	r0, [r0, #8]
   1d73c:	add	r3, r2, #1
   1d740:	add	r6, r6, #1
   1d744:	str	r3, [sl]
   1d748:	str	r7, [r0, r2, lsl #2]
   1d74c:	add	r0, ip, r9, lsl #2
   1d750:	ldr	r0, [r0, #4]
   1d754:	cmp	r6, r0
   1d758:	bge	1d6fc <__assert_fail@plt+0xba50>
   1d75c:	ldr	r0, [r1, r6, lsl #2]
   1d760:	ldr	r4, [r8, #28]
   1d764:	add	r0, r0, r0, lsl #1
   1d768:	mov	r3, r4
   1d76c:	ldr	r5, [r3, r0, lsl #2]!
   1d770:	mov	sl, r3
   1d774:	ldr	r2, [sl, #4]!
   1d778:	cmp	r5, r2
   1d77c:	bne	1d734 <__assert_fail@plt+0xba88>
   1d780:	mov	r1, #2
   1d784:	add	r8, r4, r0, lsl #2
   1d788:	add	r1, r1, r5, lsl #1
   1d78c:	str	r1, [r3]
   1d790:	lsl	r1, r1, #2
   1d794:	ldr	r0, [r8, #8]!
   1d798:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1d79c:	cmp	r0, #0
   1d7a0:	beq	1dc6c <__assert_fail@plt+0xbfc0>
   1d7a4:	str	r0, [r8]
   1d7a8:	ldr	r8, [sp, #24]
   1d7ac:	ldr	r1, [sp, #28]
   1d7b0:	ldr	r2, [sl]
   1d7b4:	ldr	ip, [r8, #24]
   1d7b8:	b	1d73c <__assert_fail@plt+0xba90>
   1d7bc:	mov	r0, #0
   1d7c0:	str	r0, [fp, #-52]	; 0xffffffcc
   1d7c4:	ldr	r0, [sp, #12]
   1d7c8:	cmp	r0, #0
   1d7cc:	bne	1d988 <__assert_fail@plt+0xbcdc>
   1d7d0:	ldr	r0, [sp, #20]
   1d7d4:	ldrb	r2, [r0, #88]	; 0x58
   1d7d8:	ands	r0, r2, #4
   1d7dc:	beq	1d988 <__assert_fail@plt+0xbcdc>
   1d7e0:	ldr	r0, [sl, #20]
   1d7e4:	cmp	r0, #0
   1d7e8:	bne	1d988 <__assert_fail@plt+0xbcdc>
   1d7ec:	ldr	r0, [sp, #20]
   1d7f0:	mov	r9, #0
   1d7f4:	ldr	r7, [r0, #8]
   1d7f8:	cmp	r7, #0
   1d7fc:	beq	1d81c <__assert_fail@plt+0xbb70>
   1d800:	ldr	r3, [r0]
   1d804:	mov	r8, #0
   1d808:	mov	ip, #1
   1d80c:	mov	lr, #139	; 0x8b
   1d810:	mov	r6, #0
   1d814:	mov	r4, #0
   1d818:	b	1d870 <__assert_fail@plt+0xbbc4>
   1d81c:	mov	r8, #0
   1d820:	ldr	r3, [sp, #20]
   1d824:	mov	r0, #1
   1d828:	and	r1, r2, #249	; 0xf9
   1d82c:	str	r0, [r3, #92]	; 0x5c
   1d830:	ldr	r0, [r3, #76]	; 0x4c
   1d834:	cmp	r0, #0
   1d838:	movwgt	r9, #1
   1d83c:	orr	r0, r8, r9
   1d840:	and	r0, r0, #1
   1d844:	orr	r0, r1, r0, lsl #1
   1d848:	strb	r0, [r3, #88]	; 0x58
   1d84c:	b	1d988 <__assert_fail@plt+0xbcdc>
   1d850:	ldrsb	r0, [r5]
   1d854:	cmp	r0, #0
   1d858:	mov	r0, #0
   1d85c:	movwmi	r0, #1
   1d860:	orr	r6, r6, r0
   1d864:	add	r4, r4, #1
   1d868:	cmp	r7, r4
   1d86c:	beq	1d920 <__assert_fail@plt+0xbc74>
   1d870:	add	r5, r3, r4, lsl #3
   1d874:	ldrb	r1, [r5, #4]
   1d878:	sub	r1, r1, #1
   1d87c:	cmp	r1, #11
   1d880:	bhi	1dcc0 <__assert_fail@plt+0xc014>
   1d884:	add	r0, pc, #0
   1d888:	ldr	pc, [r0, r1, lsl #2]
   1d88c:	andeq	sp, r1, r0, asr r8
   1d890:	andeq	sp, r1, r4, ror #16
   1d894:			; <UNDEFINED> instruction: 0x0001d8bc
   1d898:	andeq	sp, r1, r4, ror #16
   1d89c:	andeq	sp, r1, r0, lsl r9
   1d8a0:	andeq	sp, r1, r8, lsl #19
   1d8a4:	andeq	sp, r1, r0, asr #25
   1d8a8:	andeq	sp, r1, r4, ror #16
   1d8ac:	andeq	sp, r1, r4, ror #16
   1d8b0:	andeq	sp, r1, r4, ror #16
   1d8b4:	andeq	sp, r1, r4, ror #16
   1d8b8:	strdeq	sp, [r1], -r0
   1d8bc:	ldr	r5, [r3, r4, lsl #3]
   1d8c0:	ldr	r0, [r5, #16]
   1d8c4:	cmp	r0, #0
   1d8c8:	bne	1d988 <__assert_fail@plt+0xbcdc>
   1d8cc:	ldr	r0, [r5, #20]
   1d8d0:	cmp	r0, #0
   1d8d4:	ldreq	r0, [r5, #24]
   1d8d8:	cmpeq	r0, #0
   1d8dc:	bne	1d988 <__assert_fail@plt+0xbcdc>
   1d8e0:	ldr	r0, [r5, #28]
   1d8e4:	cmp	r0, #0
   1d8e8:	beq	1d864 <__assert_fail@plt+0xbbb8>
   1d8ec:	b	1d988 <__assert_fail@plt+0xbcdc>
   1d8f0:	ldr	r0, [r3, r4, lsl #3]
   1d8f4:	sub	r0, r0, #16
   1d8f8:	ror	r1, r0, #4
   1d8fc:	cmp	r1, #7
   1d900:	bhi	1d988 <__assert_fail@plt+0xbcdc>
   1d904:	tst	lr, ip, lsl r1
   1d908:	bne	1d864 <__assert_fail@plt+0xbbb8>
   1d90c:	b	1d988 <__assert_fail@plt+0xbcdc>
   1d910:	mov	r8, #1
   1d914:	add	r4, r4, #1
   1d918:	cmp	r7, r4
   1d91c:	bne	1d870 <__assert_fail@plt+0xbbc4>
   1d920:	orr	r0, r6, r8
   1d924:	tst	r0, #1
   1d928:	beq	1d820 <__assert_fail@plt+0xbb74>
   1d92c:	mov	r2, #0
   1d930:	mov	r7, #7
   1d934:	add	r3, r3, r2, lsl #3
   1d938:	ldr	r6, [r3, #4]
   1d93c:	uxtb	r1, r6
   1d940:	cmp	r1, #5
   1d944:	beq	1d964 <__assert_fail@plt+0xbcb8>
   1d948:	cmp	r1, #1
   1d94c:	bne	1d96c <__assert_fail@plt+0xbcc0>
   1d950:	ldrsb	r0, [r3]
   1d954:	cmn	r0, #1
   1d958:	bicle	r0, r6, #2097152	; 0x200000
   1d95c:	strle	r0, [r3, #4]
   1d960:	b	1d96c <__assert_fail@plt+0xbcc0>
   1d964:	bfi	r6, r7, #0, #8
   1d968:	str	r6, [r3, #4]
   1d96c:	ldr	r1, [sp, #20]
   1d970:	add	r2, r2, #1
   1d974:	ldr	r0, [r1, #8]
   1d978:	cmp	r2, r0
   1d97c:	bcs	1dc84 <__assert_fail@plt+0xbfd8>
   1d980:	ldr	r3, [r1]
   1d984:	b	1d934 <__assert_fail@plt+0xbc88>
   1d988:	ldr	r8, [sp, #20]
   1d98c:	ldr	r1, [r8, #52]	; 0x34
   1d990:	ldr	r0, [r8, #24]
   1d994:	ldr	r1, [r1, #12]
   1d998:	ldr	r1, [r1, #28]
   1d99c:	str	r1, [r8, #72]	; 0x48
   1d9a0:	add	r1, r1, r1, lsl #1
   1d9a4:	add	r5, r0, r1, lsl #2
   1d9a8:	mov	r4, r5
   1d9ac:	ldr	r7, [r4, #4]!
   1d9b0:	str	r7, [fp, #-44]	; 0xffffffd4
   1d9b4:	ldr	r0, [r4]
   1d9b8:	cmp	r0, #1
   1d9bc:	blt	1db14 <__assert_fail@plt+0xbe68>
   1d9c0:	lsl	r0, r7, #2
   1d9c4:	str	r7, [fp, #-48]	; 0xffffffd0
   1d9c8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1d9cc:	cmp	r0, #0
   1d9d0:	str	r0, [fp, #-40]	; 0xffffffd8
   1d9d4:	beq	1dca8 <__assert_fail@plt+0xbffc>
   1d9d8:	mov	r6, r0
   1d9dc:	ldr	r0, [r4]
   1d9e0:	ldr	r1, [r5, #8]
   1d9e4:	lsl	r2, r0, #2
   1d9e8:	mov	r0, r6
   1d9ec:	bl	118ec <memcpy@plt>
   1d9f0:	mov	r0, #0
   1d9f4:	cmp	r7, #1
   1d9f8:	str	r0, [fp, #-32]	; 0xffffffe0
   1d9fc:	blt	1db28 <__assert_fail@plt+0xbe7c>
   1da00:	ldr	r0, [sp, #20]
   1da04:	ldr	r0, [r0, #76]	; 0x4c
   1da08:	cmp	r0, #1
   1da0c:	blt	1db28 <__assert_fail@plt+0xbe7c>
   1da10:	mov	r0, #0
   1da14:	sub	r8, fp, #48	; 0x30
   1da18:	mov	r9, #1
   1da1c:	ldr	r2, [sp, #20]
   1da20:	ldr	r1, [r6, r0, lsl #2]
   1da24:	ldr	r2, [r2]
   1da28:	add	r3, r2, r1, lsl #3
   1da2c:	ldrb	r3, [r3, #4]
   1da30:	cmp	r3, #4
   1da34:	bne	1db00 <__assert_fail@plt+0xbe54>
   1da38:	mov	r3, #0
   1da3c:	cmp	r7, #1
   1da40:	bge	1da54 <__assert_fail@plt+0xbda8>
   1da44:	b	1da78 <__assert_fail@plt+0xbdcc>
   1da48:	add	r3, r3, #1
   1da4c:	cmp	r7, r3
   1da50:	beq	1db00 <__assert_fail@plt+0xbe54>
   1da54:	ldr	r5, [r6, r3, lsl #2]
   1da58:	add	r4, r2, r5, lsl #3
   1da5c:	ldrb	r4, [r4, #4]
   1da60:	cmp	r4, #9
   1da64:	bne	1da48 <__assert_fail@plt+0xbd9c>
   1da68:	ldr	r4, [r2, r1, lsl #3]
   1da6c:	ldr	r5, [r2, r5, lsl #3]
   1da70:	cmp	r5, r4
   1da74:	bne	1da48 <__assert_fail@plt+0xbd9c>
   1da78:	cmp	r3, r7
   1da7c:	beq	1db00 <__assert_fail@plt+0xbe54>
   1da80:	ldr	r2, [sp, #20]
   1da84:	add	r1, r1, r1, lsl #1
   1da88:	cmp	r7, #1
   1da8c:	ldr	r2, [r2, #20]
   1da90:	add	r1, r2, r1, lsl #2
   1da94:	ldr	r1, [r1, #8]
   1da98:	ldr	ip, [r1]
   1da9c:	blt	1dad8 <__assert_fail@plt+0xbe2c>
   1daa0:	mov	r2, #0
   1daa4:	subs	r3, r7, #1
   1daa8:	beq	1dacc <__assert_fail@plt+0xbe20>
   1daac:	add	r5, r2, r3
   1dab0:	lsr	r4, r5, #1
   1dab4:	ldr	r1, [r6, r4, lsl #2]
   1dab8:	cmp	r1, ip
   1dabc:	addlt	r2, r9, r5, lsr #1
   1dac0:	movge	r3, r4
   1dac4:	cmp	r2, r3
   1dac8:	bcc	1daac <__assert_fail@plt+0xbe00>
   1dacc:	ldr	r1, [r6, r2, lsl #2]
   1dad0:	cmp	r1, ip
   1dad4:	beq	1db00 <__assert_fail@plt+0xbe54>
   1dad8:	ldr	r0, [sp, #20]
   1dadc:	add	r1, ip, ip, lsl #1
   1dae0:	ldr	r0, [r0, #24]
   1dae4:	add	r1, r0, r1, lsl #2
   1dae8:	mov	r0, r8
   1daec:	bl	28128 <__assert_fail@plt+0x1647c>
   1daf0:	cmp	r0, #0
   1daf4:	bne	1dc7c <__assert_fail@plt+0xbfd0>
   1daf8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   1dafc:	mov	r0, #0
   1db00:	add	r0, r0, #1
   1db04:	cmp	r0, r7
   1db08:	bge	1db28 <__assert_fail@plt+0xbe7c>
   1db0c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1db10:	b	1da1c <__assert_fail@plt+0xbd70>
   1db14:	mov	r0, #0
   1db18:	str	r0, [fp, #-44]	; 0xffffffd4
   1db1c:	str	r0, [fp, #-48]	; 0xffffffd0
   1db20:	str	r0, [fp, #-40]	; 0xffffffd8
   1db24:	str	r0, [fp, #-32]	; 0xffffffe0
   1db28:	ldr	r8, [sp, #20]
   1db2c:	sub	r0, fp, #32
   1db30:	sub	r2, fp, #48	; 0x30
   1db34:	mov	r3, #0
   1db38:	mov	r1, r8
   1db3c:	bl	28448 <__assert_fail@plt+0x1679c>
   1db40:	cmp	r0, #0
   1db44:	str	r0, [r8, #36]	; 0x24
   1db48:	beq	1dbc8 <__assert_fail@plt+0xbf1c>
   1db4c:	ldrsb	r1, [r0, #52]	; 0x34
   1db50:	cmn	r1, #1
   1db54:	ble	1db68 <__assert_fail@plt+0xbebc>
   1db58:	str	r0, [r8, #40]	; 0x28
   1db5c:	str	r0, [r8, #44]	; 0x2c
   1db60:	str	r0, [r8, #48]	; 0x30
   1db64:	b	1dbdc <__assert_fail@plt+0xbf30>
   1db68:	sub	r4, fp, #32
   1db6c:	sub	r6, fp, #48	; 0x30
   1db70:	mov	r1, r8
   1db74:	mov	r3, #1
   1db78:	mov	r0, r4
   1db7c:	mov	r2, r6
   1db80:	bl	28448 <__assert_fail@plt+0x1679c>
   1db84:	str	r0, [r8, #40]	; 0x28
   1db88:	mov	r0, r4
   1db8c:	mov	r1, r8
   1db90:	mov	r2, r6
   1db94:	mov	r3, #2
   1db98:	bl	28448 <__assert_fail@plt+0x1679c>
   1db9c:	str	r0, [r8, #44]	; 0x2c
   1dba0:	mov	r0, r4
   1dba4:	mov	r1, r8
   1dba8:	mov	r2, r6
   1dbac:	mov	r3, #6
   1dbb0:	bl	28448 <__assert_fail@plt+0x1679c>
   1dbb4:	str	r0, [r8, #48]	; 0x30
   1dbb8:	ldr	r1, [r8, #40]	; 0x28
   1dbbc:	cmp	r1, #0
   1dbc0:	cmpne	r0, #0
   1dbc4:	bne	1dbd0 <__assert_fail@plt+0xbf24>
   1dbc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1dbcc:	b	1dbe8 <__assert_fail@plt+0xbf3c>
   1dbd0:	ldr	r0, [r8, #44]	; 0x2c
   1dbd4:	cmp	r0, #0
   1dbd8:	beq	1dbc8 <__assert_fail@plt+0xbf1c>
   1dbdc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1dbe0:	bl	1c224 <__assert_fail@plt+0xa578>
   1dbe4:	mov	r0, #0
   1dbe8:	str	r0, [fp, #-52]	; 0xffffffcc
   1dbec:	ldr	r5, [sl]
   1dbf0:	ldr	r0, [r5, #56]	; 0x38
   1dbf4:	cmp	r0, #0
   1dbf8:	beq	1dc10 <__assert_fail@plt+0xbf64>
   1dbfc:	ldr	r4, [r0]
   1dc00:	bl	1c224 <__assert_fail@plt+0xa578>
   1dc04:	cmp	r4, #0
   1dc08:	mov	r0, r4
   1dc0c:	bne	1dbfc <__assert_fail@plt+0xbf50>
   1dc10:	mov	r0, #31
   1dc14:	mov	r4, #0
   1dc18:	str	r0, [r5, #64]	; 0x40
   1dc1c:	str	r4, [r5, #52]	; 0x34
   1dc20:	str	r4, [r5, #56]	; 0x38
   1dc24:	ldr	r0, [r5, #16]
   1dc28:	bl	1c224 <__assert_fail@plt+0xa578>
   1dc2c:	str	r4, [r5, #16]
   1dc30:	ldr	r0, [sp, #40]	; 0x28
   1dc34:	bl	1c224 <__assert_fail@plt+0xa578>
   1dc38:	ldr	r0, [sp, #44]	; 0x2c
   1dc3c:	bl	1c224 <__assert_fail@plt+0xa578>
   1dc40:	ldrb	r0, [sp, #107]	; 0x6b
   1dc44:	cmp	r0, #0
   1dc48:	beq	1dc54 <__assert_fail@plt+0xbfa8>
   1dc4c:	ldr	r0, [sp, #36]	; 0x24
   1dc50:	bl	1c224 <__assert_fail@plt+0xa578>
   1dc54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1dc58:	cmp	r0, #0
   1dc5c:	bne	1dc8c <__assert_fail@plt+0xbfe0>
   1dc60:	mov	r0, r4
   1dc64:	sub	sp, fp, #28
   1dc68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc6c:	ldr	sl, [sp, #16]
   1dc70:	mov	r0, #12
   1dc74:	ldr	r9, [sp, #20]
   1dc78:	b	1ce34 <__assert_fail@plt+0xb188>
   1dc7c:	ldr	r8, [sp, #20]
   1dc80:	b	1dbe8 <__assert_fail@plt+0xbf3c>
   1dc84:	ldrb	r2, [r1, #88]	; 0x58
   1dc88:	b	1d820 <__assert_fail@plt+0xbb74>
   1dc8c:	ldr	r0, [sp, #8]
   1dc90:	cmp	r0, #0
   1dc94:	beq	1dca0 <__assert_fail@plt+0xbff4>
   1dc98:	add	r0, r8, #136	; 0x88
   1dc9c:	bl	11874 <pthread_mutex_destroy@plt>
   1dca0:	mov	r0, r8
   1dca4:	b	1ceb8 <__assert_fail@plt+0xb20c>
   1dca8:	mov	r0, #0
   1dcac:	str	r0, [fp, #-48]	; 0xffffffd0
   1dcb0:	str	r0, [fp, #-44]	; 0xffffffd4
   1dcb4:	mov	r0, #12
   1dcb8:	str	r0, [fp, #-32]	; 0xffffffe0
   1dcbc:	b	1dbe8 <__assert_fail@plt+0xbf3c>
   1dcc0:	bl	11c70 <abort@plt>
   1dcc4:	movw	r2, #25548	; 0x63cc
   1dcc8:	movt	r2, #4
   1dccc:	ldr	r1, [r2]
   1dcd0:	str	r0, [r2]
   1dcd4:	mov	r0, r1
   1dcd8:	bx	lr
   1dcdc:	push	{r4, r5, r6, sl, fp, lr}
   1dce0:	add	fp, sp, #16
   1dce4:	ldr	r5, [r0, #16]
   1dce8:	ldr	r6, [r0]
   1dcec:	mov	r4, r0
   1dcf0:	mov	r1, #0
   1dcf4:	mov	r2, #256	; 0x100
   1dcf8:	mov	r0, r5
   1dcfc:	bl	11b2c <memset@plt>
   1dd00:	ldr	r1, [r6, #36]	; 0x24
   1dd04:	mov	r0, r4
   1dd08:	mov	r2, r5
   1dd0c:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   1dd10:	ldr	r0, [r6, #36]	; 0x24
   1dd14:	ldr	r1, [r6, #40]	; 0x28
   1dd18:	cmp	r0, r1
   1dd1c:	beq	1dd30 <__assert_fail@plt+0xc084>
   1dd20:	mov	r0, r4
   1dd24:	mov	r2, r5
   1dd28:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   1dd2c:	ldr	r0, [r6, #36]	; 0x24
   1dd30:	ldr	r1, [r6, #44]	; 0x2c
   1dd34:	cmp	r0, r1
   1dd38:	beq	1dd4c <__assert_fail@plt+0xc0a0>
   1dd3c:	mov	r0, r4
   1dd40:	mov	r2, r5
   1dd44:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   1dd48:	ldr	r0, [r6, #36]	; 0x24
   1dd4c:	ldr	r1, [r6, #48]	; 0x30
   1dd50:	cmp	r0, r1
   1dd54:	movne	r0, r4
   1dd58:	movne	r2, r5
   1dd5c:	blne	1dd74 <__assert_fail@plt+0xc0c8>
   1dd60:	ldrb	r0, [r4, #28]
   1dd64:	orr	r0, r0, #8
   1dd68:	strb	r0, [r4, #28]
   1dd6c:	mov	r0, #0
   1dd70:	pop	{r4, r5, r6, sl, fp, pc}
   1dd74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd78:	add	fp, sp, #28
   1dd7c:	sub	sp, sp, #348	; 0x15c
   1dd80:	ldr	r3, [r0]
   1dd84:	mov	r8, r0
   1dd88:	mov	sl, r2
   1dd8c:	mov	r2, #0
   1dd90:	str	r2, [sp, #40]	; 0x28
   1dd94:	ldr	r0, [r3, #92]	; 0x5c
   1dd98:	cmp	r0, #1
   1dd9c:	bne	1ddac <__assert_fail@plt+0xc100>
   1dda0:	ldrb	r0, [r8, #14]
   1dda4:	ubfx	r0, r0, #6, #1
   1dda8:	str	r0, [sp, #40]	; 0x28
   1ddac:	ldr	r0, [r1, #8]
   1ddb0:	cmp	r0, #1
   1ddb4:	blt	1e85c <__assert_fail@plt+0xcbb0>
   1ddb8:	mvn	r0, #5
   1ddbc:	mov	r7, #0
   1ddc0:	mov	lr, #1
   1ddc4:	mov	r2, #0
   1ddc8:	str	r8, [sp, #28]
   1ddcc:	str	sl, [sp, #68]	; 0x44
   1ddd0:	str	r1, [sp, #48]	; 0x30
   1ddd4:	str	r3, [sp, #64]	; 0x40
   1ddd8:	sub	r0, r0, sl
   1dddc:	str	r0, [sp, #24]
   1dde0:	add	r0, sl, #7
   1dde4:	str	r0, [sp, #20]
   1dde8:	add	r0, sl, #5
   1ddec:	str	r0, [sp, #16]
   1ddf0:	add	r0, sl, #4
   1ddf4:	str	r0, [sp, #12]
   1ddf8:	add	r0, sl, #3
   1ddfc:	str	r0, [sp, #8]
   1de00:	add	r0, sp, #72	; 0x48
   1de04:	add	r0, r0, #1
   1de08:	str	r0, [sp, #4]
   1de0c:	b	1de30 <__assert_fail@plt+0xc184>
   1de10:	mov	lr, #1
   1de14:	ldr	r1, [sp, #48]	; 0x30
   1de18:	ldr	r2, [sp, #52]	; 0x34
   1de1c:	ldr	r3, [sp, #64]	; 0x40
   1de20:	ldr	r0, [r1, #8]
   1de24:	add	r2, r2, #1
   1de28:	cmp	r2, r0
   1de2c:	bge	1e85c <__assert_fail@plt+0xcbb0>
   1de30:	ldr	r0, [r1, #12]
   1de34:	str	r2, [sp, #52]	; 0x34
   1de38:	ldr	r6, [r0, r2, lsl #2]
   1de3c:	ldr	r2, [r3]
   1de40:	add	r0, r2, r6, lsl #3
   1de44:	ldrb	r4, [r0, #4]
   1de48:	sub	r0, r4, #1
   1de4c:	cmp	r0, #6
   1de50:	bhi	1de14 <__assert_fail@plt+0xc168>
   1de54:	add	r1, pc, #0
   1de58:	ldr	pc, [r1, r0, lsl #2]
   1de5c:	andeq	sp, r1, r8, ror lr
   1de60:	andeq	lr, r1, r8, lsr r8
   1de64:	andeq	sp, r1, r0, lsl #31
   1de68:	andeq	sp, r1, r4, lsl lr
   1de6c:	andeq	lr, r1, r8, lsr r8
   1de70:	andeq	lr, r1, r8, lsr r0
   1de74:	andeq	lr, r1, r8, lsr r8
   1de78:	ldrb	r4, [r2, r6, lsl #3]
   1de7c:	ldr	r0, [sp, #40]	; 0x28
   1de80:	cmp	r0, #0
   1de84:	strb	lr, [sl, r4]
   1de88:	beq	1dea0 <__assert_fail@plt+0xc1f4>
   1de8c:	bl	11a54 <__ctype_tolower_loc@plt>
   1de90:	ldr	r0, [r0]
   1de94:	mov	lr, #1
   1de98:	ldr	r0, [r0, r4, lsl #2]
   1de9c:	strb	lr, [sl, r0]
   1dea0:	ldrb	r0, [r8, #14]
   1dea4:	tst	r0, #64	; 0x40
   1dea8:	beq	1de14 <__assert_fail@plt+0xc168>
   1deac:	ldr	r0, [sp, #64]	; 0x40
   1deb0:	ldr	r0, [r0, #92]	; 0x5c
   1deb4:	cmp	r0, #2
   1deb8:	blt	1de14 <__assert_fail@plt+0xc168>
   1debc:	ldr	ip, [sp, #64]	; 0x40
   1dec0:	add	r1, r6, #1
   1dec4:	movw	r4, #1
   1dec8:	mov	r9, #1
   1decc:	add	r5, sp, #72	; 0x48
   1ded0:	movt	r4, #32
   1ded4:	ldr	r0, [ip]
   1ded8:	ldrb	r0, [r0, r6, lsl #3]
   1dedc:	strb	r0, [sp, #72]	; 0x48
   1dee0:	ldr	r0, [ip, #8]
   1dee4:	cmp	r1, r0
   1dee8:	ldr	r0, [sp, #4]
   1deec:	bcs	1df30 <__assert_fail@plt+0xc284>
   1def0:	ldr	r0, [sp, #4]
   1def4:	ldr	r1, [ip]
   1def8:	add	r3, r4, #254	; 0xfe
   1defc:	add	r1, r1, r6, lsl #3
   1df00:	ldr	r2, [r1, #12]
   1df04:	and	r2, r2, r3
   1df08:	cmp	r2, r4
   1df0c:	bne	1df30 <__assert_fail@plt+0xc284>
   1df10:	ldrb	r1, [r1, #8]
   1df14:	add	r3, r6, #2
   1df18:	strb	r1, [r0], #1
   1df1c:	add	r1, r6, #1
   1df20:	ldr	r2, [ip, #8]
   1df24:	mov	r6, r1
   1df28:	cmp	r3, r2
   1df2c:	bcc	1def4 <__assert_fail@plt+0xc248>
   1df30:	sub	r4, r0, r5
   1df34:	sub	r0, fp, #36	; 0x24
   1df38:	mov	r1, r5
   1df3c:	sub	r3, fp, #48	; 0x30
   1df40:	str	r7, [fp, #-44]	; 0xffffffd4
   1df44:	str	r7, [fp, #-48]	; 0xffffffd0
   1df48:	mov	r2, r4
   1df4c:	bl	1c324 <__assert_fail@plt+0xa678>
   1df50:	cmp	r0, r4
   1df54:	bne	1de10 <__assert_fail@plt+0xc164>
   1df58:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1df5c:	bl	11910 <towlower@plt>
   1df60:	mov	r1, r0
   1df64:	mov	r0, r5
   1df68:	sub	r2, fp, #48	; 0x30
   1df6c:	bl	11844 <wcrtomb@plt>
   1df70:	cmn	r0, #1
   1df74:	ldrbne	r0, [sp, #72]	; 0x48
   1df78:	strbne	r9, [sl, r0]
   1df7c:	b	1de10 <__assert_fail@plt+0xc164>
   1df80:	ldr	r0, [sp, #40]	; 0x28
   1df84:	cmp	r0, #0
   1df88:	beq	1e21c <__assert_fail@plt+0xc570>
   1df8c:	ldr	r0, [r2, r6, lsl #3]
   1df90:	ldr	r1, [sp, #16]
   1df94:	ldr	r2, [sp, #12]
   1df98:	ldr	r7, [sp, #8]
   1df9c:	mov	lr, #0
   1dfa0:	mov	r3, #4
   1dfa4:	str	r6, [sp, #44]	; 0x2c
   1dfa8:	ldr	r0, [r0]
   1dfac:	str	r0, [sp, #60]	; 0x3c
   1dfb0:	ldr	r0, [sp, #20]
   1dfb4:	b	1dfe0 <__assert_fail@plt+0xc334>
   1dfb8:	ldr	r1, [sp, #68]	; 0x44
   1dfbc:	strb	r2, [r1, r0]
   1dfc0:	add	lr, r8, #1
   1dfc4:	add	r0, r6, #1
   1dfc8:	add	r1, r5, #1
   1dfcc:	add	r2, r9, #1
   1dfd0:	add	r7, sl, #1
   1dfd4:	add	r3, r4, #4
   1dfd8:	cmp	lr, #32
   1dfdc:	beq	1e3c4 <__assert_fail@plt+0xc718>
   1dfe0:	mov	r6, r0
   1dfe4:	ldr	r0, [sp, #60]	; 0x3c
   1dfe8:	mov	r9, r2
   1dfec:	mov	r2, #1
   1dff0:	mov	r8, lr
   1dff4:	mov	r4, r3
   1dff8:	mov	sl, r7
   1dffc:	mov	r5, r1
   1e000:	tst	r0, r2, lsl lr
   1e004:	beq	1dfc0 <__assert_fail@plt+0xc314>
   1e008:	ldr	r0, [sp, #68]	; 0x44
   1e00c:	strb	r2, [r0, r8]
   1e010:	add	r0, r8, #128	; 0x80
   1e014:	lsr	r0, r0, #7
   1e018:	cmp	r0, #2
   1e01c:	mov	r0, r8
   1e020:	bhi	1dfb8 <__assert_fail@plt+0xc30c>
   1e024:	bl	11a54 <__ctype_tolower_loc@plt>
   1e028:	ldr	r0, [r0]
   1e02c:	mov	r2, #1
   1e030:	ldr	r0, [r0, r8, lsl #2]
   1e034:	b	1dfb8 <__assert_fail@plt+0xc30c>
   1e038:	ldr	r0, [sp, #64]	; 0x40
   1e03c:	ldr	r4, [r2, r6, lsl #3]
   1e040:	ldr	r0, [r0, #92]	; 0x5c
   1e044:	cmp	r0, #2
   1e048:	blt	1e0c0 <__assert_fail@plt+0xc414>
   1e04c:	ldr	r0, [r4, #36]	; 0x24
   1e050:	cmp	r0, #0
   1e054:	bne	1e070 <__assert_fail@plt+0xc3c4>
   1e058:	ldrb	r0, [r4, #16]
   1e05c:	tst	r0, #1
   1e060:	bne	1e070 <__assert_fail@plt+0xc3c4>
   1e064:	ldr	r0, [r4, #32]
   1e068:	cmp	r0, #0
   1e06c:	beq	1e0c0 <__assert_fail@plt+0xc414>
   1e070:	add	r4, sp, #72	; 0x48
   1e074:	sub	r5, fp, #48	; 0x30
   1e078:	strb	r7, [fp, #-48]	; 0xffffffd0
   1e07c:	mov	r0, #0
   1e080:	mov	r1, r5
   1e084:	mov	r2, #1
   1e088:	mov	r3, r4
   1e08c:	str	r7, [sp, #76]	; 0x4c
   1e090:	str	r7, [sp, #72]	; 0x48
   1e094:	bl	1c324 <__assert_fail@plt+0xa678>
   1e098:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1e09c:	cmn	r0, #2
   1e0a0:	mov	lr, #1
   1e0a4:	add	r0, r1, #1
   1e0a8:	strbeq	lr, [sl, r1]
   1e0ac:	uxtb	r1, r0
   1e0b0:	strb	r0, [fp, #-48]	; 0xffffffd0
   1e0b4:	cmp	r1, r0
   1e0b8:	beq	1e07c <__assert_fail@plt+0xc3d0>
   1e0bc:	b	1de14 <__assert_fail@plt+0xc168>
   1e0c0:	ldr	r0, [r4, #20]
   1e0c4:	cmp	r0, #1
   1e0c8:	blt	1de14 <__assert_fail@plt+0xc168>
   1e0cc:	ldr	r0, [sp, #40]	; 0x28
   1e0d0:	mov	r5, #0
   1e0d4:	cmp	r0, #0
   1e0d8:	bne	1e0f4 <__assert_fail@plt+0xc448>
   1e0dc:	b	1e19c <__assert_fail@plt+0xc4f0>
   1e0e0:	ldr	r0, [r4, #20]
   1e0e4:	add	r5, r5, #1
   1e0e8:	mov	r7, #0
   1e0ec:	cmp	r5, r0
   1e0f0:	bge	1de14 <__assert_fail@plt+0xc168>
   1e0f4:	str	r7, [fp, #-44]	; 0xffffffd4
   1e0f8:	str	r7, [fp, #-48]	; 0xffffffd0
   1e0fc:	sub	r9, fp, #48	; 0x30
   1e100:	add	r7, sp, #72	; 0x48
   1e104:	ldr	r0, [r4]
   1e108:	mov	r2, r9
   1e10c:	ldr	r1, [r0, r5, lsl #2]
   1e110:	mov	r0, r7
   1e114:	bl	11844 <wcrtomb@plt>
   1e118:	mov	lr, #1
   1e11c:	cmn	r0, #1
   1e120:	beq	1e140 <__assert_fail@plt+0xc494>
   1e124:	ldrb	r6, [sp, #72]	; 0x48
   1e128:	strb	lr, [sl, r6]
   1e12c:	bl	11a54 <__ctype_tolower_loc@plt>
   1e130:	ldr	r0, [r0]
   1e134:	mov	lr, #1
   1e138:	ldr	r0, [r0, r6, lsl #2]
   1e13c:	strb	lr, [sl, r0]
   1e140:	ldrb	r0, [r8, #14]
   1e144:	tst	r0, #64	; 0x40
   1e148:	beq	1e0e0 <__assert_fail@plt+0xc434>
   1e14c:	ldr	r0, [sp, #64]	; 0x40
   1e150:	ldr	r0, [r0, #92]	; 0x5c
   1e154:	cmp	r0, #2
   1e158:	blt	1e0e0 <__assert_fail@plt+0xc434>
   1e15c:	ldr	r0, [r4]
   1e160:	ldr	r0, [r0, r5, lsl #2]
   1e164:	bl	11910 <towlower@plt>
   1e168:	mov	r1, r0
   1e16c:	mov	r0, r7
   1e170:	mov	r2, r9
   1e174:	bl	11844 <wcrtomb@plt>
   1e178:	cmn	r0, #1
   1e17c:	mov	lr, #1
   1e180:	ldrbne	r0, [sp, #72]	; 0x48
   1e184:	strbne	lr, [sl, r0]
   1e188:	b	1e0e0 <__assert_fail@plt+0xc434>
   1e18c:	ldr	r0, [r4, #20]
   1e190:	add	r5, r5, #1
   1e194:	cmp	r5, r0
   1e198:	bge	1de14 <__assert_fail@plt+0xc168>
   1e19c:	str	r7, [fp, #-44]	; 0xffffffd4
   1e1a0:	str	r7, [fp, #-48]	; 0xffffffd0
   1e1a4:	sub	r9, fp, #48	; 0x30
   1e1a8:	add	r6, sp, #72	; 0x48
   1e1ac:	ldr	r0, [r4]
   1e1b0:	mov	r2, r9
   1e1b4:	ldr	r1, [r0, r5, lsl #2]
   1e1b8:	mov	r0, r6
   1e1bc:	bl	11844 <wcrtomb@plt>
   1e1c0:	cmn	r0, #1
   1e1c4:	mov	lr, #1
   1e1c8:	ldrbne	r0, [sp, #72]	; 0x48
   1e1cc:	strbne	lr, [sl, r0]
   1e1d0:	ldrb	r0, [r8, #14]
   1e1d4:	tst	r0, #64	; 0x40
   1e1d8:	beq	1e18c <__assert_fail@plt+0xc4e0>
   1e1dc:	ldr	r0, [sp, #64]	; 0x40
   1e1e0:	ldr	r0, [r0, #92]	; 0x5c
   1e1e4:	cmp	r0, #2
   1e1e8:	blt	1e18c <__assert_fail@plt+0xc4e0>
   1e1ec:	ldr	r0, [r4]
   1e1f0:	ldr	r0, [r0, r5, lsl #2]
   1e1f4:	bl	11910 <towlower@plt>
   1e1f8:	mov	r1, r0
   1e1fc:	mov	r0, r6
   1e200:	mov	r2, r9
   1e204:	bl	11844 <wcrtomb@plt>
   1e208:	cmn	r0, #1
   1e20c:	mov	lr, #1
   1e210:	ldrbne	r0, [sp, #72]	; 0x48
   1e214:	strbne	lr, [sl, r0]
   1e218:	b	1e18c <__assert_fail@plt+0xc4e0>
   1e21c:	mov	r0, #0
   1e220:	mov	r1, #31
   1e224:	ldr	r2, [r2, r6, lsl #3]
   1e228:	ldr	r2, [r2, r0]
   1e22c:	tst	r2, #1
   1e230:	addne	r3, sl, r1
   1e234:	strbne	lr, [r3, #-31]	; 0xffffffe1
   1e238:	tst	r2, #2
   1e23c:	addne	r3, sl, r0, lsl #3
   1e240:	strbne	lr, [r3, #1]
   1e244:	tst	r2, #4
   1e248:	addne	r3, sl, r0, lsl #3
   1e24c:	strbne	lr, [r3, #2]
   1e250:	tst	r2, #8
   1e254:	addne	r3, sl, r0, lsl #3
   1e258:	strbne	lr, [r3, #3]
   1e25c:	tst	r2, #16
   1e260:	addne	r3, sl, r0, lsl #3
   1e264:	strbne	lr, [r3, #4]
   1e268:	tst	r2, #32
   1e26c:	addne	r3, sl, r0, lsl #3
   1e270:	strbne	lr, [r3, #5]
   1e274:	tst	r2, #64	; 0x40
   1e278:	addne	r3, sl, r0, lsl #3
   1e27c:	strbne	lr, [r3, #6]
   1e280:	tst	r2, #128	; 0x80
   1e284:	addne	r3, sl, r0, lsl #3
   1e288:	strbne	lr, [r3, #7]
   1e28c:	tst	r2, #256	; 0x100
   1e290:	addne	r3, sl, r0, lsl #3
   1e294:	strbne	lr, [r3, #8]
   1e298:	tst	r2, #512	; 0x200
   1e29c:	addne	r3, sl, r0, lsl #3
   1e2a0:	strbne	lr, [r3, #9]
   1e2a4:	tst	r2, #1024	; 0x400
   1e2a8:	addne	r3, sl, r0, lsl #3
   1e2ac:	strbne	lr, [r3, #10]
   1e2b0:	tst	r2, #2048	; 0x800
   1e2b4:	addne	r3, sl, r0, lsl #3
   1e2b8:	strbne	lr, [r3, #11]
   1e2bc:	tst	r2, #4096	; 0x1000
   1e2c0:	addne	r3, sl, r0, lsl #3
   1e2c4:	strbne	lr, [r3, #12]
   1e2c8:	tst	r2, #8192	; 0x2000
   1e2cc:	addne	r3, sl, r0, lsl #3
   1e2d0:	strbne	lr, [r3, #13]
   1e2d4:	tst	r2, #16384	; 0x4000
   1e2d8:	addne	r3, sl, r0, lsl #3
   1e2dc:	strbne	lr, [r3, #14]
   1e2e0:	tst	r2, #32768	; 0x8000
   1e2e4:	addne	r3, sl, r0, lsl #3
   1e2e8:	strbne	lr, [r3, #15]
   1e2ec:	tst	r2, #65536	; 0x10000
   1e2f0:	addne	r3, sl, r0, lsl #3
   1e2f4:	strbne	lr, [r3, #16]
   1e2f8:	tst	r2, #131072	; 0x20000
   1e2fc:	addne	r3, sl, r0, lsl #3
   1e300:	strbne	lr, [r3, #17]
   1e304:	tst	r2, #262144	; 0x40000
   1e308:	addne	r3, sl, r0, lsl #3
   1e30c:	strbne	lr, [r3, #18]
   1e310:	tst	r2, #524288	; 0x80000
   1e314:	addne	r3, sl, r0, lsl #3
   1e318:	strbne	lr, [r3, #19]
   1e31c:	tst	r2, #1048576	; 0x100000
   1e320:	addne	r3, sl, r0, lsl #3
   1e324:	strbne	lr, [r3, #20]
   1e328:	tst	r2, #2097152	; 0x200000
   1e32c:	addne	r3, sl, r0, lsl #3
   1e330:	strbne	lr, [r3, #21]
   1e334:	tst	r2, #4194304	; 0x400000
   1e338:	addne	r3, sl, r0, lsl #3
   1e33c:	strbne	lr, [r3, #22]
   1e340:	tst	r2, #8388608	; 0x800000
   1e344:	addne	r3, sl, r0, lsl #3
   1e348:	strbne	lr, [r3, #23]
   1e34c:	tst	r2, #16777216	; 0x1000000
   1e350:	addne	r3, sl, r0, lsl #3
   1e354:	strbne	lr, [r3, #24]
   1e358:	tst	r2, #33554432	; 0x2000000
   1e35c:	addne	r3, sl, r0, lsl #3
   1e360:	strbne	lr, [r3, #25]
   1e364:	tst	r2, #67108864	; 0x4000000
   1e368:	addne	r3, sl, r0, lsl #3
   1e36c:	strbne	lr, [r3, #26]
   1e370:	tst	r2, #134217728	; 0x8000000
   1e374:	addne	r3, sl, r0, lsl #3
   1e378:	strbne	lr, [r3, #27]
   1e37c:	tst	r2, #268435456	; 0x10000000
   1e380:	addne	r3, sl, r0, lsl #3
   1e384:	strbne	lr, [r3, #28]
   1e388:	tst	r2, #536870912	; 0x20000000
   1e38c:	addne	r3, sl, r0, lsl #3
   1e390:	strbne	lr, [r3, #29]
   1e394:	tst	r2, #1073741824	; 0x40000000
   1e398:	addne	r3, sl, r0, lsl #3
   1e39c:	strbne	lr, [r3, #30]
   1e3a0:	cmn	r2, #1
   1e3a4:	strble	lr, [sl, r1]
   1e3a8:	cmp	r0, #28
   1e3ac:	beq	1de14 <__assert_fail@plt+0xc168>
   1e3b0:	ldr	r2, [sp, #64]	; 0x40
   1e3b4:	add	r1, r1, #32
   1e3b8:	add	r0, r0, #4
   1e3bc:	ldr	r2, [r2]
   1e3c0:	b	1e224 <__assert_fail@plt+0xc578>
   1e3c4:	ldr	r0, [sp, #68]	; 0x44
   1e3c8:	ldr	r1, [sp, #44]	; 0x2c
   1e3cc:	mov	ip, r5
   1e3d0:	mov	r5, r8
   1e3d4:	str	r8, [sp, #36]	; 0x24
   1e3d8:	add	r3, r0, lr
   1e3dc:	ldr	r0, [sp, #64]	; 0x40
   1e3e0:	ldr	r0, [r0]
   1e3e4:	ldr	r0, [r0, r1, lsl #3]
   1e3e8:	mov	r1, ip
   1e3ec:	ldr	r0, [r0, #4]
   1e3f0:	str	r0, [sp, #60]	; 0x3c
   1e3f4:	mov	r0, #0
   1e3f8:	b	1e460 <__assert_fail@plt+0xc7b4>
   1e3fc:	mov	r9, r7
   1e400:	str	sl, [sp, #56]	; 0x38
   1e404:	mov	r6, ip
   1e408:	mov	sl, lr
   1e40c:	mov	r7, r3
   1e410:	bl	11a54 <__ctype_tolower_loc@plt>
   1e414:	ldr	r0, [r0]
   1e418:	mov	lr, sl
   1e41c:	ldr	sl, [sp, #56]	; 0x38
   1e420:	ldr	r1, [sp, #68]	; 0x44
   1e424:	mov	r3, r7
   1e428:	mov	r7, r9
   1e42c:	mov	ip, r6
   1e430:	mov	r2, #1
   1e434:	ldr	r0, [r0, r4]
   1e438:	strb	r2, [r1, r0]
   1e43c:	add	r0, r8, #1
   1e440:	mov	r2, sl
   1e444:	add	r6, ip, #1
   1e448:	add	r1, r7, #1
   1e44c:	add	r9, r5, #1
   1e450:	add	sl, sl, #1
   1e454:	add	r4, r4, #4
   1e458:	cmp	r0, #32
   1e45c:	beq	1e4a8 <__assert_fail@plt+0xc7fc>
   1e460:	mov	r7, r1
   1e464:	ldr	r1, [sp, #60]	; 0x3c
   1e468:	mov	r8, r0
   1e46c:	mov	r0, #1
   1e470:	mov	r5, r9
   1e474:	mov	ip, r6
   1e478:	tst	r1, r0, lsl r8
   1e47c:	beq	1e43c <__assert_fail@plt+0xc790>
   1e480:	strb	r0, [r3, r8]
   1e484:	add	r0, lr, r8
   1e488:	add	r0, r0, #128	; 0x80
   1e48c:	lsr	r0, r0, #7
   1e490:	cmp	r0, #2
   1e494:	bls	1e3fc <__assert_fail@plt+0xc750>
   1e498:	ldr	r1, [sp, #68]	; 0x44
   1e49c:	add	r0, lr, r8
   1e4a0:	mov	r2, #1
   1e4a4:	b	1e438 <__assert_fail@plt+0xc78c>
   1e4a8:	add	r9, lr, r0
   1e4ac:	ldr	r0, [sp, #64]	; 0x40
   1e4b0:	ldr	r1, [sp, #44]	; 0x2c
   1e4b4:	mov	lr, #1
   1e4b8:	mov	r6, r2
   1e4bc:	str	r8, [sp, #60]	; 0x3c
   1e4c0:	ldr	r0, [r0]
   1e4c4:	ldr	r0, [r0, r1, lsl #3]
   1e4c8:	ldr	sl, [r0, #8]
   1e4cc:	mov	r0, #0
   1e4d0:	b	1e4fc <__assert_fail@plt+0xc850>
   1e4d4:	ldr	r7, [sp, #68]	; 0x44
   1e4d8:	strb	lr, [r7, r0]
   1e4dc:	add	r0, r1, #1
   1e4e0:	add	ip, r2, #1
   1e4e4:	add	r7, r3, #1
   1e4e8:	add	r5, r4, #1
   1e4ec:	add	r6, r8, #1
   1e4f0:	add	r9, r9, #1
   1e4f4:	cmp	r0, #32
   1e4f8:	beq	1e568 <__assert_fail@plt+0xc8bc>
   1e4fc:	tst	sl, lr, lsl r0
   1e500:	mov	r1, r0
   1e504:	mov	r8, r6
   1e508:	mov	r4, r5
   1e50c:	mov	r3, r7
   1e510:	mov	r2, ip
   1e514:	beq	1e4dc <__assert_fail@plt+0xc830>
   1e518:	ldr	r0, [sp, #68]	; 0x44
   1e51c:	strb	lr, [r0, r9]
   1e520:	add	r0, r9, #128	; 0x80
   1e524:	lsr	r0, r0, #7
   1e528:	cmp	r0, #2
   1e52c:	mov	r0, r9
   1e530:	bhi	1e4d4 <__assert_fail@plt+0xc828>
   1e534:	mov	r6, sl
   1e538:	mov	r7, r1
   1e53c:	mov	r5, r2
   1e540:	mov	sl, r3
   1e544:	bl	11a54 <__ctype_tolower_loc@plt>
   1e548:	ldr	r0, [r0]
   1e54c:	mov	r3, sl
   1e550:	mov	sl, r6
   1e554:	mov	r2, r5
   1e558:	mov	r1, r7
   1e55c:	mov	lr, #1
   1e560:	ldr	r0, [r0, r9, lsl #2]
   1e564:	b	1e4d4 <__assert_fail@plt+0xc828>
   1e568:	ldr	r0, [sp, #64]	; 0x40
   1e56c:	str	r1, [sp, #56]	; 0x38
   1e570:	ldr	r1, [sp, #44]	; 0x2c
   1e574:	ldr	r0, [r0]
   1e578:	ldr	r0, [r0, r1, lsl #3]
   1e57c:	ldr	r5, [r0, #12]
   1e580:	mov	r0, #0
   1e584:	b	1e5b4 <__assert_fail@plt+0xc908>
   1e588:	ldr	r1, [sp, #68]	; 0x44
   1e58c:	strb	lr, [r1, r0]
   1e590:	mov	r1, r4
   1e594:	add	r0, r1, #1
   1e598:	add	r2, sl, #1
   1e59c:	add	r3, r7, #1
   1e5a0:	add	r4, r6, #1
   1e5a4:	add	r8, r8, #1
   1e5a8:	add	r9, r9, #1
   1e5ac:	cmp	r0, #32
   1e5b0:	beq	1e5fc <__assert_fail@plt+0xc950>
   1e5b4:	tst	r5, lr, lsl r0
   1e5b8:	mov	r1, r0
   1e5bc:	mov	r6, r4
   1e5c0:	mov	r7, r3
   1e5c4:	mov	sl, r2
   1e5c8:	beq	1e594 <__assert_fail@plt+0xc8e8>
   1e5cc:	add	r0, r9, #128	; 0x80
   1e5d0:	mov	r4, r1
   1e5d4:	strb	lr, [r8]
   1e5d8:	lsr	r0, r0, #7
   1e5dc:	cmp	r0, #2
   1e5e0:	mov	r0, r9
   1e5e4:	bhi	1e588 <__assert_fail@plt+0xc8dc>
   1e5e8:	bl	11a54 <__ctype_tolower_loc@plt>
   1e5ec:	ldr	r0, [r0]
   1e5f0:	mov	lr, #1
   1e5f4:	ldr	r0, [r0, r9, lsl #2]
   1e5f8:	b	1e588 <__assert_fail@plt+0xc8dc>
   1e5fc:	ldr	r0, [sp, #64]	; 0x40
   1e600:	str	r1, [sp, #32]
   1e604:	ldr	r1, [sp, #44]	; 0x2c
   1e608:	ldr	r0, [r0]
   1e60c:	ldr	r0, [r0, r1, lsl #3]
   1e610:	ldr	r2, [r0, #16]
   1e614:	mov	r0, #0
   1e618:	b	1e640 <__assert_fail@plt+0xc994>
   1e61c:	ldr	r1, [sp, #68]	; 0x44
   1e620:	strb	lr, [r1, r0]
   1e624:	add	r0, r8, #1
   1e628:	add	sl, r5, #1
   1e62c:	add	r7, r4, #1
   1e630:	add	r6, r6, #1
   1e634:	add	r9, r9, #1
   1e638:	cmp	r0, #32
   1e63c:	beq	1e688 <__assert_fail@plt+0xc9dc>
   1e640:	tst	r2, lr, lsl r0
   1e644:	mov	r8, r0
   1e648:	mov	r4, r7
   1e64c:	mov	r5, sl
   1e650:	beq	1e624 <__assert_fail@plt+0xc978>
   1e654:	add	r0, r9, #128	; 0x80
   1e658:	strb	lr, [r6]
   1e65c:	lsr	r0, r0, #7
   1e660:	cmp	r0, #2
   1e664:	mov	r0, r9
   1e668:	bhi	1e61c <__assert_fail@plt+0xc970>
   1e66c:	mov	r7, r2
   1e670:	bl	11a54 <__ctype_tolower_loc@plt>
   1e674:	ldr	r0, [r0]
   1e678:	mov	r2, r7
   1e67c:	mov	lr, #1
   1e680:	ldr	r0, [r0, r9, lsl #2]
   1e684:	b	1e61c <__assert_fail@plt+0xc970>
   1e688:	ldr	r0, [sp, #64]	; 0x40
   1e68c:	ldr	r1, [sp, #44]	; 0x2c
   1e690:	ldr	r0, [r0]
   1e694:	ldr	r0, [r0, r1, lsl #3]
   1e698:	ldr	sl, [r0, #20]
   1e69c:	mov	r0, #0
   1e6a0:	tst	sl, lr, lsl r0
   1e6a4:	mov	r7, r0
   1e6a8:	mov	r6, r5
   1e6ac:	bne	1e6e4 <__assert_fail@plt+0xca38>
   1e6b0:	b	1e6bc <__assert_fail@plt+0xca10>
   1e6b4:	ldr	r1, [sp, #68]	; 0x44
   1e6b8:	strb	lr, [r1, r0]
   1e6bc:	add	r0, r7, #1
   1e6c0:	add	r5, r6, #1
   1e6c4:	add	r4, r4, #1
   1e6c8:	add	r9, r9, #1
   1e6cc:	cmp	r0, #32
   1e6d0:	beq	1e710 <__assert_fail@plt+0xca64>
   1e6d4:	tst	sl, lr, lsl r0
   1e6d8:	mov	r7, r0
   1e6dc:	mov	r6, r5
   1e6e0:	beq	1e6bc <__assert_fail@plt+0xca10>
   1e6e4:	add	r0, r9, #128	; 0x80
   1e6e8:	strb	lr, [r4]
   1e6ec:	lsr	r0, r0, #7
   1e6f0:	cmp	r0, #2
   1e6f4:	mov	r0, r9
   1e6f8:	bhi	1e6b4 <__assert_fail@plt+0xca08>
   1e6fc:	bl	11a54 <__ctype_tolower_loc@plt>
   1e700:	ldr	r0, [r0]
   1e704:	mov	lr, #1
   1e708:	ldr	r0, [r0, r9, lsl #2]
   1e70c:	b	1e6b4 <__assert_fail@plt+0xca08>
   1e710:	ldr	r0, [sp, #24]
   1e714:	ldr	r1, [sp, #36]	; 0x24
   1e718:	ldr	sl, [sp, #68]	; 0x44
   1e71c:	sub	r0, r0, r1
   1e720:	ldr	r1, [sp, #60]	; 0x3c
   1e724:	sub	r0, r0, r1
   1e728:	ldr	r1, [sp, #56]	; 0x38
   1e72c:	sub	r0, r0, r1
   1e730:	ldr	r1, [sp, #32]
   1e734:	sub	r0, r0, r1
   1e738:	ldr	r1, [sp, #44]	; 0x2c
   1e73c:	sub	r0, r0, r8
   1e740:	sub	r5, r0, r7
   1e744:	ldr	r0, [sp, #64]	; 0x40
   1e748:	mov	r7, #0
   1e74c:	ldr	r0, [r0]
   1e750:	ldr	r0, [r0, r1, lsl #3]
   1e754:	ldr	r8, [r0, #24]
   1e758:	tst	r8, lr, lsl r7
   1e75c:	mov	r4, r6
   1e760:	bne	1e790 <__assert_fail@plt+0xcae4>
   1e764:	b	1e76c <__assert_fail@plt+0xcac0>
   1e768:	strb	lr, [sl, r0]
   1e76c:	add	r7, r7, #1
   1e770:	add	r6, r4, #1
   1e774:	sub	r5, r5, #1
   1e778:	add	r9, r9, #1
   1e77c:	cmp	r7, #32
   1e780:	beq	1e7c0 <__assert_fail@plt+0xcb14>
   1e784:	tst	r8, lr, lsl r7
   1e788:	mov	r4, r6
   1e78c:	beq	1e76c <__assert_fail@plt+0xcac0>
   1e790:	mov	r0, #0
   1e794:	strb	lr, [r0, -r5]
   1e798:	add	r0, r9, #128	; 0x80
   1e79c:	lsr	r0, r0, #7
   1e7a0:	cmp	r0, #2
   1e7a4:	mov	r0, r9
   1e7a8:	bhi	1e768 <__assert_fail@plt+0xcabc>
   1e7ac:	bl	11a54 <__ctype_tolower_loc@plt>
   1e7b0:	ldr	r0, [r0]
   1e7b4:	mov	lr, #1
   1e7b8:	ldr	r0, [r0, r9, lsl #2]
   1e7bc:	b	1e768 <__assert_fail@plt+0xcabc>
   1e7c0:	ldr	r0, [sp, #64]	; 0x40
   1e7c4:	ldr	r1, [sp, #44]	; 0x2c
   1e7c8:	ldr	r8, [sp, #28]
   1e7cc:	mov	r6, #0
   1e7d0:	mov	r7, #0
   1e7d4:	ldr	r0, [r0]
   1e7d8:	ldr	r0, [r0, r1, lsl #3]
   1e7dc:	ldr	r5, [r0, #28]
   1e7e0:	tst	r5, lr, lsl r6
   1e7e4:	bne	1e80c <__assert_fail@plt+0xcb60>
   1e7e8:	b	1e7f0 <__assert_fail@plt+0xcb44>
   1e7ec:	strb	lr, [sl, r0]
   1e7f0:	add	r6, r6, #1
   1e7f4:	add	r4, r4, #1
   1e7f8:	add	r9, r9, #1
   1e7fc:	cmp	r6, #32
   1e800:	beq	1de14 <__assert_fail@plt+0xc168>
   1e804:	tst	r5, lr, lsl r6
   1e808:	beq	1e7f0 <__assert_fail@plt+0xcb44>
   1e80c:	add	r0, r9, #128	; 0x80
   1e810:	strb	lr, [r4]
   1e814:	lsr	r0, r0, #7
   1e818:	cmp	r0, #2
   1e81c:	mov	r0, r9
   1e820:	bhi	1e7ec <__assert_fail@plt+0xcb40>
   1e824:	bl	11a54 <__ctype_tolower_loc@plt>
   1e828:	ldr	r0, [r0]
   1e82c:	mov	lr, #1
   1e830:	ldr	r0, [r0, r9, lsl #2]
   1e834:	b	1e7ec <__assert_fail@plt+0xcb40>
   1e838:	mov	r0, sl
   1e83c:	mov	r1, #1
   1e840:	mov	r2, #256	; 0x100
   1e844:	bl	11b2c <memset@plt>
   1e848:	cmp	r4, #2
   1e84c:	bne	1e85c <__assert_fail@plt+0xcbb0>
   1e850:	ldrb	r0, [r8, #28]
   1e854:	orr	r0, r0, #1
   1e858:	strb	r0, [r8, #28]
   1e85c:	sub	sp, fp, #28
   1e860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e864:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e868:	add	fp, sp, #24
   1e86c:	mov	r4, r0
   1e870:	mov	r0, #0
   1e874:	mov	r6, r2
   1e878:	mov	r5, r1
   1e87c:	str	r0, [r4]
   1e880:	str	r0, [r4, #4]
   1e884:	str	r0, [r4, #8]
   1e888:	mov	r0, #256	; 0x100
   1e88c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1e890:	cmp	r0, #0
   1e894:	str	r0, [r4, #16]
   1e898:	beq	1e9c8 <__assert_fail@plt+0xcd1c>
   1e89c:	movw	r0, #45820	; 0xb2fc
   1e8a0:	tst	r6, #1
   1e8a4:	and	r1, r6, #2
   1e8a8:	movt	r0, #3
   1e8ac:	movweq	r0, #710	; 0x2c6
   1e8b0:	movteq	r0, #257	; 0x101
   1e8b4:	tst	r6, #4
   1e8b8:	orr	r7, r0, r1, lsl #21
   1e8bc:	bne	1e8d0 <__assert_fail@plt+0xcc24>
   1e8c0:	ldrb	r0, [r4, #28]
   1e8c4:	and	r0, r0, #127	; 0x7f
   1e8c8:	strb	r0, [r4, #28]
   1e8cc:	b	1e8f0 <__assert_fail@plt+0xcc44>
   1e8d0:	ldrb	r0, [r4, #28]
   1e8d4:	mvn	r1, #127	; 0x7f
   1e8d8:	orr	r0, r0, r1
   1e8dc:	movw	r1, #45758	; 0xb2be
   1e8e0:	movt	r1, #323	; 0x143
   1e8e4:	strb	r0, [r4, #28]
   1e8e8:	and	r1, r7, r1
   1e8ec:	orr	r7, r1, #256	; 0x100
   1e8f0:	and	r1, r6, #8
   1e8f4:	and	r0, r0, #239	; 0xef
   1e8f8:	mov	r8, #0
   1e8fc:	orr	r0, r0, r1, lsl #1
   1e900:	str	r8, [r4, #20]
   1e904:	strb	r0, [r4, #28]
   1e908:	mov	r0, r5
   1e90c:	bl	11ac0 <strlen@plt>
   1e910:	mov	r2, r0
   1e914:	mov	r0, r4
   1e918:	mov	r1, r5
   1e91c:	mov	r3, r7
   1e920:	bl	1c4a0 <__assert_fail@plt+0xa7f4>
   1e924:	cmp	r0, #16
   1e928:	mov	r5, r0
   1e92c:	movweq	r5, #8
   1e930:	cmp	r5, #0
   1e934:	bne	1e9d4 <__assert_fail@plt+0xcd28>
   1e938:	ldr	r5, [r4, #16]
   1e93c:	ldr	r6, [r4]
   1e940:	mov	r1, #0
   1e944:	mov	r2, #256	; 0x100
   1e948:	mov	r0, r5
   1e94c:	bl	11b2c <memset@plt>
   1e950:	ldr	r1, [r6, #36]	; 0x24
   1e954:	mov	r0, r4
   1e958:	mov	r2, r5
   1e95c:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   1e960:	ldr	r0, [r6, #36]	; 0x24
   1e964:	ldr	r1, [r6, #40]	; 0x28
   1e968:	cmp	r0, r1
   1e96c:	beq	1e980 <__assert_fail@plt+0xccd4>
   1e970:	mov	r0, r4
   1e974:	mov	r2, r5
   1e978:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   1e97c:	ldr	r0, [r6, #36]	; 0x24
   1e980:	ldr	r1, [r6, #44]	; 0x2c
   1e984:	cmp	r0, r1
   1e988:	beq	1e99c <__assert_fail@plt+0xccf0>
   1e98c:	mov	r0, r4
   1e990:	mov	r2, r5
   1e994:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   1e998:	ldr	r0, [r6, #36]	; 0x24
   1e99c:	ldr	r1, [r6, #48]	; 0x30
   1e9a0:	cmp	r0, r1
   1e9a4:	movne	r0, r4
   1e9a8:	movne	r2, r5
   1e9ac:	blne	1dd74 <__assert_fail@plt+0xc0c8>
   1e9b0:	ldrb	r0, [r4, #28]
   1e9b4:	mov	r5, #0
   1e9b8:	orr	r0, r0, #8
   1e9bc:	strb	r0, [r4, #28]
   1e9c0:	mov	r0, r5
   1e9c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e9c8:	mov	r5, #12
   1e9cc:	mov	r0, r5
   1e9d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e9d4:	ldr	r0, [r4, #16]
   1e9d8:	bl	1c224 <__assert_fail@plt+0xa578>
   1e9dc:	mov	r0, r5
   1e9e0:	str	r8, [r4, #16]
   1e9e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e9e8:	push	{r4, r5, r6, r7, fp, lr}
   1e9ec:	add	fp, sp, #16
   1e9f0:	cmp	r0, #17
   1e9f4:	bcs	1ea68 <__assert_fail@plt+0xcdbc>
   1e9f8:	movw	r1, #20080	; 0x4e70
   1e9fc:	mov	r4, r2
   1ea00:	mov	r2, #5
   1ea04:	mov	r5, r3
   1ea08:	movt	r1, #3
   1ea0c:	ldr	r0, [r1, r0, lsl #2]
   1ea10:	movw	r1, #19696	; 0x4cf0
   1ea14:	movt	r1, #3
   1ea18:	add	r1, r1, r0
   1ea1c:	mov	r0, #0
   1ea20:	bl	11934 <dcgettext@plt>
   1ea24:	mov	r6, r0
   1ea28:	bl	11ac0 <strlen@plt>
   1ea2c:	add	r7, r0, #1
   1ea30:	cmp	r5, #0
   1ea34:	beq	1ea50 <__assert_fail@plt+0xcda4>
   1ea38:	cmp	r7, r5
   1ea3c:	mov	r2, r7
   1ea40:	bhi	1ea58 <__assert_fail@plt+0xcdac>
   1ea44:	mov	r0, r4
   1ea48:	mov	r1, r6
   1ea4c:	bl	118ec <memcpy@plt>
   1ea50:	mov	r0, r7
   1ea54:	pop	{r4, r5, r6, r7, fp, pc}
   1ea58:	sub	r2, r5, #1
   1ea5c:	mov	r0, #0
   1ea60:	strb	r0, [r4, r2]
   1ea64:	b	1ea44 <__assert_fail@plt+0xcd98>
   1ea68:	bl	11c70 <abort@plt>
   1ea6c:	push	{r4, r5, fp, lr}
   1ea70:	add	fp, sp, #8
   1ea74:	ldr	r5, [r0]
   1ea78:	mov	r4, r0
   1ea7c:	cmp	r5, #0
   1ea80:	beq	1eaac <__assert_fail@plt+0xce00>
   1ea84:	movw	r0, #0
   1ea88:	movw	r1, #0
   1ea8c:	movt	r0, #0
   1ea90:	movt	r1, #0
   1ea94:	orrs	r0, r1, r0
   1ea98:	beq	1eaa4 <__assert_fail@plt+0xcdf8>
   1ea9c:	add	r0, r5, #136	; 0x88
   1eaa0:	bl	11874 <pthread_mutex_destroy@plt>
   1eaa4:	mov	r0, r5
   1eaa8:	bl	1ead4 <__assert_fail@plt+0xce28>
   1eaac:	mov	r5, #0
   1eab0:	str	r5, [r4]
   1eab4:	str	r5, [r4, #4]
   1eab8:	ldr	r0, [r4, #16]
   1eabc:	bl	1c224 <__assert_fail@plt+0xa578>
   1eac0:	str	r5, [r4, #16]
   1eac4:	ldr	r0, [r4, #20]
   1eac8:	bl	1c224 <__assert_fail@plt+0xa578>
   1eacc:	str	r5, [r4, #20]
   1ead0:	pop	{r4, r5, fp, pc}
   1ead4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ead8:	add	fp, sp, #24
   1eadc:	mov	r8, r0
   1eae0:	ldr	r0, [r0]
   1eae4:	cmp	r0, #0
   1eae8:	beq	1eb6c <__assert_fail@plt+0xcec0>
   1eaec:	ldr	r1, [r8, #8]
   1eaf0:	cmp	r1, #0
   1eaf4:	beq	1eb6c <__assert_fail@plt+0xcec0>
   1eaf8:	movw	r7, #255	; 0xff
   1eafc:	mov	r6, #0
   1eb00:	movt	r7, #4
   1eb04:	add	r1, r0, r6, lsl #3
   1eb08:	ldr	r1, [r1, #4]
   1eb0c:	and	r1, r1, r7
   1eb10:	cmp	r1, #3
   1eb14:	beq	1eb48 <__assert_fail@plt+0xce9c>
   1eb18:	cmp	r1, #6
   1eb1c:	bne	1eb54 <__assert_fail@plt+0xcea8>
   1eb20:	ldr	r5, [r0, r6, lsl #3]
   1eb24:	ldr	r0, [r5]
   1eb28:	bl	1c224 <__assert_fail@plt+0xa578>
   1eb2c:	ldr	r0, [r5, #4]
   1eb30:	bl	1c224 <__assert_fail@plt+0xa578>
   1eb34:	ldr	r0, [r5, #8]
   1eb38:	bl	1c224 <__assert_fail@plt+0xa578>
   1eb3c:	ldr	r0, [r5, #12]
   1eb40:	bl	1c224 <__assert_fail@plt+0xa578>
   1eb44:	b	1eb4c <__assert_fail@plt+0xcea0>
   1eb48:	ldr	r5, [r0, r6, lsl #3]
   1eb4c:	mov	r0, r5
   1eb50:	bl	1c224 <__assert_fail@plt+0xa578>
   1eb54:	ldr	r0, [r8, #8]
   1eb58:	add	r6, r6, #1
   1eb5c:	cmp	r6, r0
   1eb60:	bcs	1eb6c <__assert_fail@plt+0xcec0>
   1eb64:	ldr	r0, [r8]
   1eb68:	b	1eb04 <__assert_fail@plt+0xce58>
   1eb6c:	ldr	r0, [r8, #12]
   1eb70:	bl	1c224 <__assert_fail@plt+0xa578>
   1eb74:	ldr	r0, [r8, #8]
   1eb78:	cmp	r0, #0
   1eb7c:	beq	1ebec <__assert_fail@plt+0xcf40>
   1eb80:	mov	r5, #0
   1eb84:	mov	r6, #8
   1eb88:	ldr	r0, [r8, #24]
   1eb8c:	cmp	r0, #0
   1eb90:	bne	1ebb8 <__assert_fail@plt+0xcf0c>
   1eb94:	b	1ebc0 <__assert_fail@plt+0xcf14>
   1eb98:	ldr	r0, [r8, #8]
   1eb9c:	add	r5, r5, #1
   1eba0:	add	r6, r6, #12
   1eba4:	cmp	r5, r0
   1eba8:	bcs	1ebec <__assert_fail@plt+0xcf40>
   1ebac:	ldr	r0, [r8, #24]
   1ebb0:	cmp	r0, #0
   1ebb4:	beq	1ebc0 <__assert_fail@plt+0xcf14>
   1ebb8:	ldr	r0, [r0, r6]
   1ebbc:	bl	1c224 <__assert_fail@plt+0xa578>
   1ebc0:	ldr	r0, [r8, #28]
   1ebc4:	cmp	r0, #0
   1ebc8:	beq	1ebd4 <__assert_fail@plt+0xcf28>
   1ebcc:	ldr	r0, [r0, r6]
   1ebd0:	bl	1c224 <__assert_fail@plt+0xa578>
   1ebd4:	ldr	r0, [r8, #20]
   1ebd8:	cmp	r0, #0
   1ebdc:	beq	1eb98 <__assert_fail@plt+0xceec>
   1ebe0:	ldr	r0, [r0, r6]
   1ebe4:	bl	1c224 <__assert_fail@plt+0xa578>
   1ebe8:	b	1eb98 <__assert_fail@plt+0xceec>
   1ebec:	ldr	r0, [r8, #20]
   1ebf0:	bl	1c224 <__assert_fail@plt+0xa578>
   1ebf4:	ldr	r0, [r8, #24]
   1ebf8:	bl	1c224 <__assert_fail@plt+0xa578>
   1ebfc:	ldr	r0, [r8, #28]
   1ec00:	bl	1c224 <__assert_fail@plt+0xa578>
   1ec04:	ldr	r0, [r8]
   1ec08:	bl	1c224 <__assert_fail@plt+0xa578>
   1ec0c:	ldr	r5, [r8, #32]
   1ec10:	cmp	r5, #0
   1ec14:	beq	1ec74 <__assert_fail@plt+0xcfc8>
   1ec18:	mov	r6, #0
   1ec1c:	add	r0, r6, r6, lsl #1
   1ec20:	ldr	r0, [r5, r0, lsl #2]!
   1ec24:	add	r7, r5, #8
   1ec28:	cmp	r0, #1
   1ec2c:	blt	1ec50 <__assert_fail@plt+0xcfa4>
   1ec30:	mov	r4, #0
   1ec34:	ldr	r0, [r7]
   1ec38:	ldr	r0, [r0, r4, lsl #2]
   1ec3c:	bl	21ea0 <__assert_fail@plt+0x101f4>
   1ec40:	ldr	r0, [r5]
   1ec44:	add	r4, r4, #1
   1ec48:	cmp	r4, r0
   1ec4c:	blt	1ec34 <__assert_fail@plt+0xcf88>
   1ec50:	ldr	r0, [r7]
   1ec54:	bl	1c224 <__assert_fail@plt+0xa578>
   1ec58:	ldr	r0, [r8, #68]	; 0x44
   1ec5c:	cmp	r6, r0
   1ec60:	bcs	1ec70 <__assert_fail@plt+0xcfc4>
   1ec64:	ldr	r5, [r8, #32]
   1ec68:	add	r6, r6, #1
   1ec6c:	b	1ec1c <__assert_fail@plt+0xcf70>
   1ec70:	ldr	r5, [r8, #32]
   1ec74:	mov	r0, r5
   1ec78:	bl	1c224 <__assert_fail@plt+0xa578>
   1ec7c:	ldr	r0, [r8, #60]	; 0x3c
   1ec80:	movw	r1, #20148	; 0x4eb4
   1ec84:	movt	r1, #3
   1ec88:	cmp	r0, r1
   1ec8c:	beq	1ec94 <__assert_fail@plt+0xcfe8>
   1ec90:	bl	1c224 <__assert_fail@plt+0xa578>
   1ec94:	ldr	r0, [r8, #132]	; 0x84
   1ec98:	bl	1c224 <__assert_fail@plt+0xa578>
   1ec9c:	mov	r0, r8
   1eca0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1eca4:	b	1c224 <__assert_fail@plt+0xa578>
   1eca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecac:	add	fp, sp, #28
   1ecb0:	sub	sp, sp, #28
   1ecb4:	ldr	sl, [fp, #8]
   1ecb8:	mov	r7, #2
   1ecbc:	cmp	sl, #7
   1ecc0:	bhi	1ed94 <__assert_fail@plt+0xd0e8>
   1ecc4:	mov	r5, r0
   1ecc8:	ldr	r0, [r0]
   1eccc:	mov	r6, r3
   1ecd0:	mov	r9, r2
   1ecd4:	mov	r4, r1
   1ecd8:	tst	sl, #4
   1ecdc:	str	r0, [sp, #24]
   1ece0:	bne	1ecf8 <__assert_fail@plt+0xd04c>
   1ece4:	mov	r0, r4
   1ece8:	bl	11ac0 <strlen@plt>
   1ecec:	mov	r7, r0
   1ecf0:	mov	r8, #0
   1ecf4:	b	1ed00 <__assert_fail@plt+0xd054>
   1ecf8:	ldr	r8, [r6]
   1ecfc:	ldr	r7, [r6, #4]
   1ed00:	movw	r0, #0
   1ed04:	movw	r1, #0
   1ed08:	movt	r0, #0
   1ed0c:	movt	r1, #0
   1ed10:	orrs	r0, r1, r0
   1ed14:	str	r0, [sp, #20]
   1ed18:	beq	1ed28 <__assert_fail@plt+0xd07c>
   1ed1c:	ldr	r0, [sp, #24]
   1ed20:	add	r0, r0, #136	; 0x88
   1ed24:	bl	118bc <pthread_mutex_lock@plt>
   1ed28:	ldrb	r0, [r5, #28]
   1ed2c:	tst	r0, #16
   1ed30:	bne	1ed44 <__assert_fail@plt+0xd098>
   1ed34:	str	r7, [sp]
   1ed38:	stmib	sp, {r7, r9}
   1ed3c:	str	r6, [sp, #12]
   1ed40:	b	1ed58 <__assert_fail@plt+0xd0ac>
   1ed44:	mov	r0, #0
   1ed48:	str	r7, [sp]
   1ed4c:	str	r7, [sp, #4]
   1ed50:	str	r0, [sp, #8]
   1ed54:	str	r0, [sp, #12]
   1ed58:	mov	r0, r5
   1ed5c:	mov	r1, r4
   1ed60:	mov	r2, r7
   1ed64:	mov	r3, r8
   1ed68:	str	sl, [sp, #16]
   1ed6c:	bl	1eda0 <__assert_fail@plt+0xd0f4>
   1ed70:	mov	r7, r0
   1ed74:	ldr	r0, [sp, #20]
   1ed78:	cmp	r0, #0
   1ed7c:	beq	1ed8c <__assert_fail@plt+0xd0e0>
   1ed80:	ldr	r0, [sp, #24]
   1ed84:	add	r0, r0, #136	; 0x88
   1ed88:	bl	11808 <pthread_mutex_unlock@plt>
   1ed8c:	cmp	r7, #0
   1ed90:	movwne	r7, #1
   1ed94:	mov	r0, r7
   1ed98:	sub	sp, fp, #28
   1ed9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eda0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eda4:	add	fp, sp, #28
   1eda8:	sub	sp, sp, #412	; 0x19c
   1edac:	ldr	r7, [r0]
   1edb0:	str	r2, [sp, #76]	; 0x4c
   1edb4:	str	r1, [sp, #100]	; 0x64
   1edb8:	mov	r4, r0
   1edbc:	add	r0, sp, #104	; 0x68
   1edc0:	mov	r1, #0
   1edc4:	mov	r2, #136	; 0x88
   1edc8:	mov	r6, r3
   1edcc:	mov	r9, #0
   1edd0:	bl	11b2c <memset@plt>
   1edd4:	str	r7, [sp, #188]	; 0xbc
   1edd8:	ldr	r0, [fp, #16]
   1eddc:	ldr	sl, [fp, #8]
   1ede0:	mov	r5, #0
   1ede4:	ldr	r1, [r4, #16]
   1ede8:	cmp	r1, #0
   1edec:	beq	1ee08 <__assert_fail@plt+0xd15c>
   1edf0:	ldrb	r2, [r4, #28]
   1edf4:	and	r2, r2, #9
   1edf8:	cmp	r2, #8
   1edfc:	movne	r1, #0
   1ee00:	subs	r5, r6, sl
   1ee04:	movne	r5, r1
   1ee08:	ldr	r2, [r4, #24]
   1ee0c:	ldr	r1, [r4, #8]
   1ee10:	mov	r8, #1
   1ee14:	mvn	r3, r2
   1ee18:	cmp	r2, r0
   1ee1c:	addcc	r9, r3, r0
   1ee20:	cmp	r1, #0
   1ee24:	beq	21418 <__assert_fail@plt+0xf76c>
   1ee28:	ldr	r1, [r7, #36]	; 0x24
   1ee2c:	cmp	r1, #0
   1ee30:	ldrne	r2, [r7, #40]	; 0x28
   1ee34:	cmpne	r2, #0
   1ee38:	beq	21418 <__assert_fail@plt+0xf76c>
   1ee3c:	ldr	r3, [r7, #44]	; 0x2c
   1ee40:	cmp	r3, #0
   1ee44:	strne	r7, [sp, #96]	; 0x60
   1ee48:	ldrne	r7, [r7, #48]	; 0x30
   1ee4c:	cmpne	r7, #0
   1ee50:	beq	21418 <__assert_fail@plt+0xf76c>
   1ee54:	ldr	r1, [r1, #8]
   1ee58:	ldr	ip, [r4, #20]
   1ee5c:	cmp	r1, #0
   1ee60:	beq	1ee6c <__assert_fail@plt+0xd1c0>
   1ee64:	ldr	lr, [sp, #96]	; 0x60
   1ee68:	b	1ee7c <__assert_fail@plt+0xd1d0>
   1ee6c:	ldr	r1, [r2, #8]
   1ee70:	ldr	lr, [sp, #96]	; 0x60
   1ee74:	cmp	r1, #0
   1ee78:	beq	20530 <__assert_fail@plt+0xe884>
   1ee7c:	str	sl, [sp, #80]	; 0x50
   1ee80:	subs	r0, r0, r9
   1ee84:	str	r9, [sp, #32]
   1ee88:	str	r0, [sp, #92]	; 0x5c
   1ee8c:	mov	r0, #1
   1ee90:	str	r0, [sp, #56]	; 0x38
   1ee94:	bne	1eea8 <__assert_fail@plt+0xd1fc>
   1ee98:	ldr	r0, [lr, #76]	; 0x4c
   1ee9c:	cmp	r0, #0
   1eea0:	movwne	r0, #1
   1eea4:	str	r0, [sp, #56]	; 0x38
   1eea8:	ldr	r0, [r4, #12]
   1eeac:	ldr	r2, [lr, #92]	; 0x5c
   1eeb0:	ldr	r3, [sp, #100]	; 0x64
   1eeb4:	ldr	r1, [lr, #8]
   1eeb8:	str	ip, [sp, #168]	; 0xa8
   1eebc:	mov	r7, r4
   1eec0:	str	r3, [sp, #104]	; 0x68
   1eec4:	str	r2, [sp, #184]	; 0xb8
   1eec8:	ubfx	r3, r0, #22, #1
   1eecc:	ldr	r4, [sp, #76]	; 0x4c
   1eed0:	and	r0, r0, #4194304	; 0x400000
   1eed4:	add	r9, r1, #1
   1eed8:	orrs	sl, ip, r0
   1eedc:	strb	r3, [sp, #176]	; 0xb0
   1eee0:	mov	r3, lr
   1eee4:	add	r3, sp, #104	; 0x68
   1eee8:	movwne	sl, #1
   1eeec:	add	r3, r3, #44	; 0x2c
   1eef0:	cmp	r2, r9
   1eef4:	strb	sl, [sp, #179]	; 0xb3
   1eef8:	movgt	r9, r2
   1eefc:	vdup.32	q8, r4
   1ef00:	ldrb	r0, [lr, #88]	; 0x58
   1ef04:	vst1.32	{d16-d17}, [r3]
   1ef08:	ubfx	r3, r0, #3, #1
   1ef0c:	strb	r3, [sp, #178]	; 0xb2
   1ef10:	ubfx	r0, r0, #2, #1
   1ef14:	str	r7, [sp, #64]	; 0x40
   1ef18:	str	r5, [sp, #88]	; 0x58
   1ef1c:	str	ip, [sp, #84]	; 0x54
   1ef20:	strb	r0, [sp, #177]	; 0xb1
   1ef24:	add	r0, r4, #1
   1ef28:	cmp	r0, r9
   1ef2c:	movlt	r9, r0
   1ef30:	cmp	r2, #2
   1ef34:	blt	1ef68 <__assert_fail@plt+0xd2bc>
   1ef38:	mov	r8, #12
   1ef3c:	cmn	r9, #-1073741823	; 0xc0000001
   1ef40:	bhi	213c4 <__assert_fail@plt+0xf718>
   1ef44:	lsl	r1, r9, #2
   1ef48:	mov	r0, #0
   1ef4c:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1ef50:	ldr	ip, [sp, #84]	; 0x54
   1ef54:	ldr	r5, [sp, #88]	; 0x58
   1ef58:	cmp	r0, #0
   1ef5c:	beq	213c4 <__assert_fail@plt+0xf718>
   1ef60:	ldr	r7, [sp, #64]	; 0x40
   1ef64:	str	r0, [sp, #112]	; 0x70
   1ef68:	ldr	r4, [sp, #96]	; 0x60
   1ef6c:	mov	r8, #1
   1ef70:	cmp	sl, #0
   1ef74:	beq	1ef9c <__assert_fail@plt+0xd2f0>
   1ef78:	mov	r0, #0
   1ef7c:	mov	r1, r9
   1ef80:	mov	r8, #0
   1ef84:	bl	1c388 <__assert_fail@plt+0xa6dc>
   1ef88:	cmp	r0, #0
   1ef8c:	beq	2142c <__assert_fail@plt+0xf780>
   1ef90:	ldr	r5, [sp, #88]	; 0x58
   1ef94:	ldr	ip, [sp, #84]	; 0x54
   1ef98:	str	r0, [sp, #108]	; 0x6c
   1ef9c:	add	r1, r4, #96	; 0x60
   1efa0:	str	r9, [sp, #140]	; 0x8c
   1efa4:	ldr	r0, [fp, #12]
   1efa8:	cmp	r8, #0
   1efac:	str	r1, [sp, #172]	; 0xac
   1efb0:	ldrb	r1, [r4, #88]	; 0x58
   1efb4:	ubfx	r1, r1, #4, #1
   1efb8:	strb	r1, [sp, #182]	; 0xb6
   1efbc:	mov	r1, #0
   1efc0:	beq	1efdc <__assert_fail@plt+0xd330>
   1efc4:	ldr	r1, [sp, #100]	; 0x64
   1efc8:	str	r1, [sp, #108]	; 0x6c
   1efcc:	ldr	r1, [r4, #92]	; 0x5c
   1efd0:	cmp	r1, #1
   1efd4:	ldr	r1, [sp, #76]	; 0x4c
   1efd8:	movwgt	r1, #0
   1efdc:	str	r0, [sp, #160]	; 0xa0
   1efe0:	str	r1, [sp, #136]	; 0x88
   1efe4:	str	r1, [sp, #132]	; 0x84
   1efe8:	str	r0, [sp, #156]	; 0x9c
   1efec:	ldrb	r0, [r7, #28]
   1eff0:	lsr	r0, r0, #7
   1eff4:	strb	r0, [sp, #181]	; 0xb5
   1eff8:	mvn	r0, #0
   1effc:	ldr	sl, [r4, #76]	; 0x4c
   1f000:	str	r0, [sp, #196]	; 0xc4
   1f004:	ldr	r0, [fp, #24]
   1f008:	lsl	r4, sl, #1
   1f00c:	cmp	sl, #1
   1f010:	str	r0, [sp, #192]	; 0xc0
   1f014:	blt	1f064 <__assert_fail@plt+0xd3b8>
   1f018:	movw	r0, #43690	; 0xaaaa
   1f01c:	mov	r8, #12
   1f020:	movt	r0, #2730	; 0xaaa
   1f024:	cmp	r4, r0
   1f028:	bhi	213c4 <__assert_fail@plt+0xf718>
   1f02c:	add	r0, sl, sl, lsl #1
   1f030:	lsl	r0, r0, #4
   1f034:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1f038:	mov	r5, r0
   1f03c:	str	r0, [sp, #220]	; 0xdc
   1f040:	lsl	r0, sl, #3
   1f044:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1f048:	cmp	r0, #0
   1f04c:	str	r0, [sp, #236]	; 0xec
   1f050:	beq	213c4 <__assert_fail@plt+0xf718>
   1f054:	cmp	r5, #0
   1f058:	ldr	r5, [sp, #88]	; 0x58
   1f05c:	ldr	ip, [sp, #84]	; 0x54
   1f060:	beq	213c4 <__assert_fail@plt+0xf718>
   1f064:	mov	r0, #1
   1f068:	str	r4, [sp, #232]	; 0xe8
   1f06c:	str	r0, [sp, #224]	; 0xe0
   1f070:	ldr	r0, [sp, #92]	; 0x5c
   1f074:	str	r4, [sp, #216]	; 0xd8
   1f078:	cmp	r0, #1
   1f07c:	bhi	1f090 <__assert_fail@plt+0xd3e4>
   1f080:	ldr	r0, [sp, #96]	; 0x60
   1f084:	ldrb	r0, [r0, #88]	; 0x58
   1f088:	tst	r0, #2
   1f08c:	beq	1f0bc <__assert_fail@plt+0xd410>
   1f090:	mov	r8, #12
   1f094:	cmn	r9, #-1073741822	; 0xc0000002
   1f098:	bhi	213c4 <__assert_fail@plt+0xf718>
   1f09c:	mov	r0, #4
   1f0a0:	add	r0, r0, r9, lsl #2
   1f0a4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1f0a8:	ldr	ip, [sp, #84]	; 0x54
   1f0ac:	ldr	r5, [sp, #88]	; 0x58
   1f0b0:	cmp	r0, #0
   1f0b4:	str	r0, [sp, #204]	; 0xcc
   1f0b8:	beq	213c4 <__assert_fail@plt+0xf718>
   1f0bc:	ldr	r1, [fp, #24]
   1f0c0:	ldr	r2, [sp, #80]	; 0x50
   1f0c4:	str	r6, [fp, #-200]	; 0xffffff38
   1f0c8:	mov	r0, #4
   1f0cc:	mov	r9, #1
   1f0d0:	mov	sl, #1
   1f0d4:	mov	r4, r6
   1f0d8:	tst	r1, #1
   1f0dc:	mov	r1, #4
   1f0e0:	mov	r7, r2
   1f0e4:	movweq	r1, #6
   1f0e8:	cmp	r2, r6
   1f0ec:	str	r1, [sp, #164]	; 0xa4
   1f0f0:	ldr	r1, [sp, #96]	; 0x60
   1f0f4:	mvnlt	sl, #0
   1f0f8:	movlt	r7, r6
   1f0fc:	movlt	r4, r2
   1f100:	cmp	r5, #0
   1f104:	ldr	r1, [r1, #92]	; 0x5c
   1f108:	str	r1, [sp, #60]	; 0x3c
   1f10c:	beq	1f150 <__assert_fail@plt+0xd4a4>
   1f110:	cmp	r1, #1
   1f114:	beq	1f134 <__assert_fail@plt+0xd488>
   1f118:	ldr	r0, [sp, #64]	; 0x40
   1f11c:	ldr	r0, [r0, #12]
   1f120:	and	r0, r0, #4194304	; 0x400000
   1f124:	orr	r0, ip, r0
   1f128:	clz	r0, r0
   1f12c:	lsr	r0, r0, #5
   1f130:	lsl	r0, r0, #2
   1f134:	cmp	ip, #0
   1f138:	mov	r1, ip
   1f13c:	movwne	r1, #1
   1f140:	cmp	r2, r6
   1f144:	orrge	r1, r1, #2
   1f148:	orr	r0, r1, r0
   1f14c:	b	1f154 <__assert_fail@plt+0xd4a8>
   1f150:	mov	r0, #8
   1f154:	add	r1, sp, #104	; 0x68
   1f158:	cmp	r2, r6
   1f15c:	sub	r0, r0, #4
   1f160:	str	sl, [sp, #68]	; 0x44
   1f164:	str	r7, [sp, #52]	; 0x34
   1f168:	str	r4, [sp, #48]	; 0x30
   1f16c:	add	r1, r1, #32
   1f170:	str	r0, [sp, #80]	; 0x50
   1f174:	str	r1, [sp, #24]
   1f178:	sub	r1, fp, #200	; 0xc8
   1f17c:	movwlt	r1, #0
   1f180:	cmp	r1, #0
   1f184:	str	r1, [sp, #40]	; 0x28
   1f188:	movwne	r1, #1
   1f18c:	str	r1, [sp, #44]	; 0x2c
   1f190:	sub	r1, fp, #192	; 0xc0
   1f194:	add	r1, r1, #16
   1f198:	str	r1, [sp, #36]	; 0x24
   1f19c:	ldr	r1, [sp, #80]	; 0x50
   1f1a0:	cmp	r1, #4
   1f1a4:	bhi	1f218 <__assert_fail@plt+0xd56c>
   1f1a8:	add	r0, pc, #0
   1f1ac:	ldr	pc, [r0, r1, lsl #2]
   1f1b0:	andeq	pc, r1, r4, asr #3
   1f1b4:	andeq	pc, r1, r4, asr #3
   1f1b8:			; <UNDEFINED> instruction: 0x0001f2b4
   1f1bc:	andeq	pc, r1, r4, ror #5
   1f1c0:	andeq	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
   1f1c4:	mov	r8, #1
   1f1c8:	cmp	r6, r4
   1f1cc:	blt	213c4 <__assert_fail@plt+0xf718>
   1f1d0:	cmp	ip, #0
   1f1d4:	beq	1fe60 <__assert_fail@plt+0xe1b4>
   1f1d8:	ldr	r1, [sp, #76]	; 0x4c
   1f1dc:	mov	r0, #0
   1f1e0:	cmp	r6, r1
   1f1e4:	bge	1f1f0 <__assert_fail@plt+0xd544>
   1f1e8:	ldr	r0, [sp, #100]	; 0x64
   1f1ec:	ldrb	r0, [r0, r6]
   1f1f0:	ldrb	r0, [ip, r0]
   1f1f4:	ldrb	r0, [r5, r0]
   1f1f8:	cmp	r0, #0
   1f1fc:	bne	1f31c <__assert_fail@plt+0xd670>
   1f200:	sub	r0, r6, #1
   1f204:	cmp	r6, r4
   1f208:	mov	r6, r0
   1f20c:	str	r0, [fp, #-200]	; 0xffffff38
   1f210:	bgt	1f1dc <__assert_fail@plt+0xd530>
   1f214:	b	213c4 <__assert_fail@plt+0xf718>
   1f218:	ldr	r0, [sp, #128]	; 0x80
   1f21c:	ldr	r2, [sp, #136]	; 0x88
   1f220:	sub	r1, r6, r0
   1f224:	cmp	r1, r2
   1f228:	bcs	1f270 <__assert_fail@plt+0xd5c4>
   1f22c:	ldr	r3, [sp, #132]	; 0x84
   1f230:	mov	r2, #0
   1f234:	cmp	r1, r3
   1f238:	bcs	1f244 <__assert_fail@plt+0xd598>
   1f23c:	ldr	r2, [sp, #108]	; 0x6c
   1f240:	ldrb	r2, [r2, r1]
   1f244:	ldrb	r1, [r5, r2]
   1f248:	cmp	r1, #0
   1f24c:	bne	1f31c <__assert_fail@plt+0xd670>
   1f250:	add	r6, r6, sl
   1f254:	mov	r8, #1
   1f258:	cmp	r6, r4
   1f25c:	str	r6, [fp, #-200]	; 0xffffff38
   1f260:	blt	213c4 <__assert_fail@plt+0xf718>
   1f264:	cmp	r6, r7
   1f268:	ble	1f21c <__assert_fail@plt+0xd570>
   1f26c:	b	213c4 <__assert_fail@plt+0xf718>
   1f270:	ldr	r2, [fp, #24]
   1f274:	add	r0, sp, #104	; 0x68
   1f278:	mov	r1, r6
   1f27c:	bl	28fec <__assert_fail@plt+0x17340>
   1f280:	cmp	r0, #0
   1f284:	bne	214c4 <__assert_fail@plt+0xf818>
   1f288:	ldr	r0, [sp, #128]	; 0x80
   1f28c:	ldr	r6, [fp, #-200]	; 0xffffff38
   1f290:	ldr	r5, [sp, #88]	; 0x58
   1f294:	ldr	r7, [sp, #52]	; 0x34
   1f298:	ldr	r4, [sp, #48]	; 0x30
   1f29c:	sub	r1, r6, r0
   1f2a0:	ldr	r3, [sp, #132]	; 0x84
   1f2a4:	mov	r2, #0
   1f2a8:	cmp	r1, r3
   1f2ac:	bcc	1f23c <__assert_fail@plt+0xd590>
   1f2b0:	b	1f244 <__assert_fail@plt+0xd598>
   1f2b4:	ldr	r1, [sp, #100]	; 0x64
   1f2b8:	cmp	r6, r7
   1f2bc:	bge	1f314 <__assert_fail@plt+0xd668>
   1f2c0:	ldrb	r0, [r1, r6]
   1f2c4:	ldrb	r0, [r5, r0]
   1f2c8:	cmp	r0, #0
   1f2cc:	bne	1f314 <__assert_fail@plt+0xd668>
   1f2d0:	add	r6, r6, #1
   1f2d4:	cmp	r6, r7
   1f2d8:	str	r6, [fp, #-200]	; 0xffffff38
   1f2dc:	blt	1f2c0 <__assert_fail@plt+0xd614>
   1f2e0:	b	1f314 <__assert_fail@plt+0xd668>
   1f2e4:	cmp	r6, r7
   1f2e8:	bge	1f314 <__assert_fail@plt+0xd668>
   1f2ec:	ldr	r1, [sp, #100]	; 0x64
   1f2f0:	ldrb	r0, [r1, r6]
   1f2f4:	ldrb	r0, [ip, r0]
   1f2f8:	ldrb	r0, [r5, r0]
   1f2fc:	cmp	r0, #0
   1f300:	bne	1f314 <__assert_fail@plt+0xd668>
   1f304:	add	r6, r6, #1
   1f308:	cmp	r6, r7
   1f30c:	str	r6, [fp, #-200]	; 0xffffff38
   1f310:	blt	1f2f0 <__assert_fail@plt+0xd644>
   1f314:	cmp	r6, r7
   1f318:	beq	20234 <__assert_fail@plt+0xe588>
   1f31c:	ldr	r2, [fp, #24]
   1f320:	add	r0, sp, #104	; 0x68
   1f324:	mov	r1, r6
   1f328:	bl	28fec <__assert_fail@plt+0x17340>
   1f32c:	cmp	r0, #0
   1f330:	bne	214c4 <__assert_fail@plt+0xf818>
   1f334:	ldr	r0, [sp, #60]	; 0x3c
   1f338:	cmp	r0, #1
   1f33c:	ldrne	r0, [sp, #132]	; 0x84
   1f340:	cmpne	r0, #0
   1f344:	bne	1fdcc <__assert_fail@plt+0xe120>
   1f348:	mov	r0, #0
   1f34c:	str	r0, [sp, #212]	; 0xd4
   1f350:	str	r0, [sp, #224]	; 0xe0
   1f354:	str	r0, [sp, #208]	; 0xd0
   1f358:	str	r0, [fp, #-196]	; 0xffffff3c
   1f35c:	ldr	r4, [sp, #188]	; 0xbc
   1f360:	ldr	ip, [sp, #144]	; 0x90
   1f364:	ldr	r6, [r4, #36]	; 0x24
   1f368:	ldrsb	r0, [r6, #52]	; 0x34
   1f36c:	cmn	r0, #1
   1f370:	ble	1fde0 <__assert_fail@plt+0xe134>
   1f374:	ldr	r7, [sp, #44]	; 0x2c
   1f378:	cmp	r6, #0
   1f37c:	beq	2142c <__assert_fail@plt+0xf780>
   1f380:	ldr	r0, [sp, #204]	; 0xcc
   1f384:	mov	r8, r7
   1f388:	cmp	r0, #0
   1f38c:	beq	1f3a4 <__assert_fail@plt+0xd6f8>
   1f390:	str	r6, [r0, ip, lsl #2]
   1f394:	mov	r8, r7
   1f398:	ldr	r0, [r4, #76]	; 0x4c
   1f39c:	cmp	r0, #0
   1f3a0:	bne	20114 <__assert_fail@plt+0xe468>
   1f3a4:	ldrb	r0, [r6, #52]	; 0x34
   1f3a8:	tst	r0, #16
   1f3ac:	bne	200ec <__assert_fail@plt+0xe440>
   1f3b0:	mov	r0, #0
   1f3b4:	mvn	r4, #0
   1f3b8:	str	r0, [sp, #72]	; 0x48
   1f3bc:	ldr	r0, [sp, #144]	; 0x90
   1f3c0:	ldr	r1, [sp, #160]	; 0xa0
   1f3c4:	cmp	r1, r0
   1f3c8:	ble	1fb98 <__assert_fail@plt+0xdeec>
   1f3cc:	ldr	sl, [sp, #40]	; 0x28
   1f3d0:	b	1f3e4 <__assert_fail@plt+0xd738>
   1f3d4:	ldr	r0, [sp, #144]	; 0x90
   1f3d8:	ldr	r1, [sp, #160]	; 0xa0
   1f3dc:	cmp	r1, r0
   1f3e0:	ble	1fb9c <__assert_fail@plt+0xdef0>
   1f3e4:	ldr	r2, [sp, #140]	; 0x8c
   1f3e8:	ldr	r1, [sp, #152]	; 0x98
   1f3ec:	add	r7, r0, #1
   1f3f0:	mov	r5, r6
   1f3f4:	cmp	r7, r2
   1f3f8:	blt	1f404 <__assert_fail@plt+0xd758>
   1f3fc:	cmp	r2, r1
   1f400:	blt	1fa2c <__assert_fail@plt+0xdd80>
   1f404:	ldr	r2, [sp, #132]	; 0x84
   1f408:	cmp	r7, r2
   1f40c:	blt	1f418 <__assert_fail@plt+0xd76c>
   1f410:	cmp	r2, r1
   1f414:	blt	1fa2c <__assert_fail@plt+0xdd80>
   1f418:	ldrb	r0, [r5, #52]	; 0x34
   1f41c:	tst	r0, #32
   1f420:	bne	1f5dc <__assert_fail@plt+0xd930>
   1f424:	ldr	r1, [sp, #144]	; 0x90
   1f428:	ldr	r0, [sp, #108]	; 0x6c
   1f42c:	add	r2, r1, #1
   1f430:	str	r2, [sp, #144]	; 0x90
   1f434:	ldrb	r6, [r0, r1]
   1f438:	ldr	r0, [r5, #44]	; 0x2c
   1f43c:	cmp	r0, #0
   1f440:	bne	1f480 <__assert_fail@plt+0xd7d4>
   1f444:	ldr	r2, [r5, #48]	; 0x30
   1f448:	cmp	r2, #0
   1f44c:	bne	1fa50 <__assert_fail@plt+0xdda4>
   1f450:	ldr	r0, [sp, #188]	; 0xbc
   1f454:	mov	r1, r5
   1f458:	mov	r9, r8
   1f45c:	mov	r8, ip
   1f460:	bl	2cd00 <__assert_fail@plt+0x1b054>
   1f464:	mov	ip, r8
   1f468:	mov	r8, r9
   1f46c:	mov	r9, #1
   1f470:	cmp	r0, #0
   1f474:	bne	1f438 <__assert_fail@plt+0xd78c>
   1f478:	mov	r0, #12
   1f47c:	b	1fb18 <__assert_fail@plt+0xde6c>
   1f480:	ldr	r6, [r0, r6, lsl #2]
   1f484:	ldr	r0, [sp, #204]	; 0xcc
   1f488:	cmp	r0, #0
   1f48c:	beq	1f4ac <__assert_fail@plt+0xd800>
   1f490:	mov	r2, r6
   1f494:	sub	r0, fp, #196	; 0xc4
   1f498:	add	r1, sp, #104	; 0x68
   1f49c:	mov	r6, ip
   1f4a0:	bl	2aa58 <__assert_fail@plt+0x18dac>
   1f4a4:	mov	ip, r6
   1f4a8:	mov	r6, r0
   1f4ac:	cmp	r6, #0
   1f4b0:	beq	1f524 <__assert_fail@plt+0xd878>
   1f4b4:	sub	r0, r5, r6
   1f4b8:	clz	r0, r0
   1f4bc:	lsr	r0, r0, #5
   1f4c0:	ands	r8, r8, r0
   1f4c4:	ldrb	r0, [r6, #52]	; 0x34
   1f4c8:	moveq	r7, ip
   1f4cc:	mov	ip, r7
   1f4d0:	tst	r0, #16
   1f4d4:	beq	1f3d4 <__assert_fail@plt+0xd728>
   1f4d8:	sxtb	r0, r0
   1f4dc:	cmn	r0, #1
   1f4e0:	bgt	1f504 <__assert_fail@plt+0xd858>
   1f4e4:	ldr	r2, [sp, #144]	; 0x90
   1f4e8:	add	r0, sp, #104	; 0x68
   1f4ec:	mov	r1, r6
   1f4f0:	mov	r5, ip
   1f4f4:	bl	29a4c <__assert_fail@plt+0x17da0>
   1f4f8:	mov	ip, r5
   1f4fc:	cmp	r0, #0
   1f500:	beq	1f3d4 <__assert_fail@plt+0xd728>
   1f504:	ldr	r0, [sp, #56]	; 0x38
   1f508:	ldr	r4, [sp, #144]	; 0x90
   1f50c:	cmp	r0, #0
   1f510:	beq	1fbac <__assert_fail@plt+0xdf00>
   1f514:	mov	sl, #0
   1f518:	mov	r0, #1
   1f51c:	str	r0, [sp, #72]	; 0x48
   1f520:	b	1f3d4 <__assert_fail@plt+0xd728>
   1f524:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1f528:	cmp	r0, #0
   1f52c:	bne	2142c <__assert_fail@plt+0xf780>
   1f530:	ldr	r0, [sp, #72]	; 0x48
   1f534:	ldr	r1, [sp, #56]	; 0x38
   1f538:	cmp	r0, #0
   1f53c:	mvn	r1, r1
   1f540:	movwne	r0, #1
   1f544:	tst	r1, r0
   1f548:	bne	1fb9c <__assert_fail@plt+0xdef0>
   1f54c:	ldr	r0, [sp, #204]	; 0xcc
   1f550:	cmp	r0, #0
   1f554:	beq	1fb9c <__assert_fail@plt+0xdef0>
   1f558:	ldr	r2, [sp, #144]	; 0x90
   1f55c:	ldr	r1, [sp, #208]	; 0xd0
   1f560:	add	r0, r0, #4
   1f564:	cmp	r2, r1
   1f568:	bge	1fb9c <__assert_fail@plt+0xdef0>
   1f56c:	add	r3, r2, #1
   1f570:	str	r3, [sp, #144]	; 0x90
   1f574:	ldr	r2, [r0, r2, lsl #2]
   1f578:	cmp	r2, #0
   1f57c:	mov	r2, r3
   1f580:	beq	1f564 <__assert_fail@plt+0xd8b8>
   1f584:	sub	r0, fp, #196	; 0xc4
   1f588:	add	r1, sp, #104	; 0x68
   1f58c:	mov	r2, #0
   1f590:	mov	r9, r8
   1f594:	mov	r8, ip
   1f598:	bl	2aa58 <__assert_fail@plt+0x18dac>
   1f59c:	cmp	r0, #0
   1f5a0:	mov	r6, r0
   1f5a4:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   1f5a8:	cmpeq	r0, #0
   1f5ac:	bne	1f5c4 <__assert_fail@plt+0xd918>
   1f5b0:	ldr	r0, [sp, #204]	; 0xcc
   1f5b4:	mov	ip, r8
   1f5b8:	mov	r8, r9
   1f5bc:	mov	r9, #1
   1f5c0:	b	1f558 <__assert_fail@plt+0xd8ac>
   1f5c4:	mov	ip, r8
   1f5c8:	mov	r8, r9
   1f5cc:	cmp	r6, #0
   1f5d0:	mov	r9, #1
   1f5d4:	bne	1f4b4 <__assert_fail@plt+0xd808>
   1f5d8:	b	1fb9c <__assert_fail@plt+0xdef0>
   1f5dc:	ldr	r0, [r5, #8]
   1f5e0:	cmp	r0, #1
   1f5e4:	blt	1fa9c <__assert_fail@plt+0xddf0>
   1f5e8:	ldr	lr, [sp, #188]	; 0xbc
   1f5ec:	mov	r3, #0
   1f5f0:	str	ip, [sp, #8]
   1f5f4:	str	lr, [sp, #16]
   1f5f8:	b	1f60c <__assert_fail@plt+0xd960>
   1f5fc:	ldr	r0, [r5, #8]
   1f600:	add	r3, r3, #1
   1f604:	cmp	r3, r0
   1f608:	bge	1fa9c <__assert_fail@plt+0xddf0>
   1f60c:	ldr	r0, [r5, #12]
   1f610:	ldr	r2, [r0, r3, lsl #2]
   1f614:	ldr	r0, [lr]
   1f618:	add	r0, r0, r2, lsl #3
   1f61c:	mov	r1, r2
   1f620:	str	r2, [sp, #28]
   1f624:	ldr	r1, [r0, #4]
   1f628:	tst	r1, #1048576	; 0x100000
   1f62c:	beq	1f5fc <__assert_fail@plt+0xd950>
   1f630:	movw	r0, #65280	; 0xff00
   1f634:	str	r3, [sp, #20]
   1f638:	movt	r0, #3
   1f63c:	tst	r1, r0
   1f640:	beq	1f754 <__assert_fail@plt+0xdaa8>
   1f644:	ldr	r0, [sp, #144]	; 0x90
   1f648:	str	r1, [sp, #12]
   1f64c:	cmn	r0, #1
   1f650:	ble	1f68c <__assert_fail@plt+0xd9e0>
   1f654:	ldr	r1, [sp, #152]	; 0x98
   1f658:	cmp	r1, r0
   1f65c:	beq	1f970 <__assert_fail@plt+0xdcc4>
   1f660:	ldr	r1, [sp, #184]	; 0xb8
   1f664:	cmp	r1, #2
   1f668:	blt	1f694 <__assert_fail@plt+0xd9e8>
   1f66c:	ldr	r1, [sp, #112]	; 0x70
   1f670:	ldr	r3, [sp, #20]
   1f674:	ldr	r6, [r1, r0, lsl #2]
   1f678:	cmn	r6, #1
   1f67c:	bne	1f6d0 <__assert_fail@plt+0xda24>
   1f680:	sub	r0, r0, #1
   1f684:	cmn	r0, #1
   1f688:	bne	1f674 <__assert_fail@plt+0xd9c8>
   1f68c:	ldr	r1, [sp, #164]	; 0xa4
   1f690:	b	1f6f8 <__assert_fail@plt+0xda4c>
   1f694:	ldr	r1, [sp, #108]	; 0x6c
   1f698:	ldr	r2, [sp, #172]	; 0xac
   1f69c:	ldrb	r0, [r1, r0]
   1f6a0:	ubfx	r1, r0, #5, #3
   1f6a4:	and	r6, r0, #31
   1f6a8:	ldr	r3, [r2, r1, lsl #2]
   1f6ac:	mov	r1, #1
   1f6b0:	mov	r2, #0
   1f6b4:	tst	r3, r1, lsl r6
   1f6b8:	ldr	r3, [sp, #20]
   1f6bc:	bne	1f714 <__assert_fail@plt+0xda68>
   1f6c0:	mov	r1, #0
   1f6c4:	cmp	r0, #10
   1f6c8:	beq	1f6e8 <__assert_fail@plt+0xda3c>
   1f6cc:	b	1f6f8 <__assert_fail@plt+0xda4c>
   1f6d0:	ldrb	r0, [sp, #182]	; 0xb6
   1f6d4:	cmp	r0, #0
   1f6d8:	bne	1f9a0 <__assert_fail@plt+0xdcf4>
   1f6dc:	mov	r1, #0
   1f6e0:	cmp	r6, #10
   1f6e4:	bne	1f6f8 <__assert_fail@plt+0xda4c>
   1f6e8:	ldrb	r0, [sp, #181]	; 0xb5
   1f6ec:	cmp	r0, #0
   1f6f0:	movwne	r0, #1
   1f6f4:	lsl	r1, r0, #1
   1f6f8:	ldr	r6, [sp, #12]
   1f6fc:	and	r0, r1, #1
   1f700:	eor	r2, r0, #1
   1f704:	tst	r6, #1024	; 0x400
   1f708:	beq	1f714 <__assert_fail@plt+0xda68>
   1f70c:	cmp	r0, #0
   1f710:	beq	1f5fc <__assert_fail@plt+0xd950>
   1f714:	ldr	r0, [lr]
   1f718:	ldr	r6, [sp, #28]
   1f71c:	cmp	r2, #0
   1f720:	add	r0, r0, r6, lsl #3
   1f724:	ldr	r0, [r0, #4]
   1f728:	bne	1f734 <__assert_fail@plt+0xda88>
   1f72c:	ands	r2, r0, #2048	; 0x800
   1f730:	bne	1f5fc <__assert_fail@plt+0xd950>
   1f734:	tst	r1, #2
   1f738:	bne	1f744 <__assert_fail@plt+0xda98>
   1f73c:	ands	r2, r0, #8192	; 0x2000
   1f740:	bne	1f5fc <__assert_fail@plt+0xd950>
   1f744:	tst	r1, #8
   1f748:	bne	1f754 <__assert_fail@plt+0xdaa8>
   1f74c:	ands	r0, r0, #32768	; 0x8000
   1f750:	bne	1f5fc <__assert_fail@plt+0xd950>
   1f754:	ldr	r3, [sp, #144]	; 0x90
   1f758:	ldr	r1, [sp, #28]
   1f75c:	mov	r0, lr
   1f760:	add	r2, sp, #104	; 0x68
   1f764:	bl	2c744 <__assert_fail@plt+0x1aa98>
   1f768:	ldr	r3, [sp, #20]
   1f76c:	ldr	lr, [sp, #16]
   1f770:	ldr	ip, [sp, #8]
   1f774:	cmp	r0, #0
   1f778:	beq	1f5fc <__assert_fail@plt+0xd950>
   1f77c:	ldr	r1, [sp, #224]	; 0xe0
   1f780:	cmp	r1, r0
   1f784:	movlt	r1, r0
   1f788:	str	r1, [sp, #224]	; 0xe0
   1f78c:	ldr	r3, [sp, #144]	; 0x90
   1f790:	ldr	r2, [sp, #140]	; 0x8c
   1f794:	ldr	r1, [sp, #152]	; 0x98
   1f798:	ldr	r6, [sp, #208]	; 0xd0
   1f79c:	add	r3, r3, r0
   1f7a0:	cmp	r2, r3
   1f7a4:	str	r3, [sp, #12]
   1f7a8:	cmple	r2, r1
   1f7ac:	blt	1f7c0 <__assert_fail@plt+0xdb14>
   1f7b0:	ldr	r0, [sp, #132]	; 0x84
   1f7b4:	cmp	r0, r3
   1f7b8:	cmple	r0, r1
   1f7bc:	bge	1f7dc <__assert_fail@plt+0xdb30>
   1f7c0:	add	r1, r3, #1
   1f7c4:	add	r0, sp, #104	; 0x68
   1f7c8:	bl	2a854 <__assert_fail@plt+0x18ba8>
   1f7cc:	ldr	r3, [sp, #12]
   1f7d0:	ldr	lr, [sp, #16]
   1f7d4:	cmp	r0, #0
   1f7d8:	bne	1fb10 <__assert_fail@plt+0xde64>
   1f7dc:	cmp	r3, r6
   1f7e0:	ble	1f80c <__assert_fail@plt+0xdb60>
   1f7e4:	sub	r0, r3, r6
   1f7e8:	mov	r1, #0
   1f7ec:	lsl	r2, r0, #2
   1f7f0:	ldr	r0, [sp, #204]	; 0xcc
   1f7f4:	add	r0, r0, r6, lsl #2
   1f7f8:	add	r0, r0, #4
   1f7fc:	bl	11b2c <memset@plt>
   1f800:	ldr	r3, [sp, #12]
   1f804:	ldr	lr, [sp, #16]
   1f808:	str	r3, [sp, #208]	; 0xd0
   1f80c:	mov	r0, #0
   1f810:	ldr	r2, [sp, #28]
   1f814:	str	r0, [fp, #-48]	; 0xffffffd0
   1f818:	ldr	r0, [sp, #204]	; 0xcc
   1f81c:	ldr	r1, [lr, #24]
   1f820:	ldr	r6, [r0, r3, lsl #2]
   1f824:	ldr	r0, [lr, #12]
   1f828:	ldr	r0, [r0, r2, lsl #2]
   1f82c:	cmp	r6, #0
   1f830:	add	r0, r0, r0, lsl #1
   1f834:	add	r2, r1, r0, lsl #2
   1f838:	beq	1f85c <__assert_fail@plt+0xdbb0>
   1f83c:	ldr	r1, [r6, #40]	; 0x28
   1f840:	sub	r0, fp, #192	; 0xc0
   1f844:	bl	2ac98 <__assert_fail@plt+0x18fec>
   1f848:	ldr	r3, [sp, #12]
   1f84c:	cmp	r0, #0
   1f850:	str	r0, [fp, #-48]	; 0xffffffd0
   1f854:	beq	1f86c <__assert_fail@plt+0xdbc0>
   1f858:	b	1fb30 <__assert_fail@plt+0xde84>
   1f85c:	vldr	d16, [r2]
   1f860:	ldr	r0, [r2, #8]
   1f864:	str	r0, [fp, #-184]	; 0xffffff48
   1f868:	vstr	d16, [fp, #-192]	; 0xffffff40
   1f86c:	cmp	r3, #0
   1f870:	str	r6, [sp, #4]
   1f874:	ble	1f984 <__assert_fail@plt+0xdcd8>
   1f878:	ldr	r1, [sp, #152]	; 0x98
   1f87c:	sub	r0, r3, #1
   1f880:	cmp	r1, r0
   1f884:	ldr	r1, [sp, #16]
   1f888:	beq	1f990 <__assert_fail@plt+0xdce4>
   1f88c:	ldr	r2, [sp, #184]	; 0xb8
   1f890:	cmp	r2, #2
   1f894:	blt	1f8bc <__assert_fail@plt+0xdc10>
   1f898:	ldr	r2, [sp, #112]	; 0x70
   1f89c:	ldr	r6, [r2, r0, lsl #2]
   1f8a0:	cmn	r6, #1
   1f8a4:	bne	1f8ec <__assert_fail@plt+0xdc40>
   1f8a8:	sub	r0, r0, #1
   1f8ac:	cmn	r0, #1
   1f8b0:	bne	1f89c <__assert_fail@plt+0xdbf0>
   1f8b4:	ldr	r3, [sp, #164]	; 0xa4
   1f8b8:	b	1f914 <__assert_fail@plt+0xdc68>
   1f8bc:	ldr	r3, [sp, #108]	; 0x6c
   1f8c0:	ldr	r2, [sp, #172]	; 0xac
   1f8c4:	ldrb	r0, [r3, r0]
   1f8c8:	ubfx	r3, r0, #5, #3
   1f8cc:	ldr	r6, [r2, r3, lsl #2]
   1f8d0:	and	r2, r0, #31
   1f8d4:	mov	r3, #1
   1f8d8:	tst	r6, r3, lsl r2
   1f8dc:	moveq	r3, #0
   1f8e0:	cmpeq	r0, #10
   1f8e4:	bne	1f914 <__assert_fail@plt+0xdc68>
   1f8e8:	b	1f904 <__assert_fail@plt+0xdc58>
   1f8ec:	ldrb	r0, [sp, #182]	; 0xb6
   1f8f0:	cmp	r0, #0
   1f8f4:	bne	1f9e0 <__assert_fail@plt+0xdd34>
   1f8f8:	mov	r3, #0
   1f8fc:	cmp	r6, #10
   1f900:	bne	1f914 <__assert_fail@plt+0xdc68>
   1f904:	ldrb	r0, [sp, #181]	; 0xb5
   1f908:	cmp	r0, #0
   1f90c:	movwne	r0, #1
   1f910:	lsl	r3, r0, #1
   1f914:	sub	r0, fp, #48	; 0x30
   1f918:	sub	r2, fp, #192	; 0xc0
   1f91c:	bl	28448 <__assert_fail@plt+0x1679c>
   1f920:	ldr	r1, [sp, #204]	; 0xcc
   1f924:	ldr	r2, [sp, #12]
   1f928:	str	r0, [r1, r2, lsl #2]
   1f92c:	ldr	r0, [sp, #4]
   1f930:	cmp	r0, #0
   1f934:	beq	1f944 <__assert_fail@plt+0xdc98>
   1f938:	ldr	r0, [fp, #-184]	; 0xffffff48
   1f93c:	bl	1c224 <__assert_fail@plt+0xa578>
   1f940:	ldr	r2, [sp, #12]
   1f944:	ldr	r0, [sp, #204]	; 0xcc
   1f948:	ldr	ip, [sp, #8]
   1f94c:	ldr	lr, [sp, #16]
   1f950:	ldr	r3, [sp, #20]
   1f954:	ldr	r0, [r0, r2, lsl #2]
   1f958:	cmp	r0, #0
   1f95c:	bne	1f5fc <__assert_fail@plt+0xd950>
   1f960:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f964:	cmp	r0, #0
   1f968:	beq	1f5fc <__assert_fail@plt+0xd950>
   1f96c:	b	1fb18 <__assert_fail@plt+0xde6c>
   1f970:	ldr	r0, [sp, #192]	; 0xc0
   1f974:	ldr	r3, [sp, #20]
   1f978:	and	r0, r0, #2
   1f97c:	eor	r1, r0, #10
   1f980:	b	1f6f8 <__assert_fail@plt+0xda4c>
   1f984:	ldr	r3, [sp, #164]	; 0xa4
   1f988:	ldr	r1, [sp, #16]
   1f98c:	b	1f914 <__assert_fail@plt+0xdc68>
   1f990:	ldr	r0, [sp, #192]	; 0xc0
   1f994:	and	r0, r0, #2
   1f998:	eor	r3, r0, #10
   1f99c:	b	1f914 <__assert_fail@plt+0xdc68>
   1f9a0:	mov	r0, r6
   1f9a4:	str	r8, [sp, #4]
   1f9a8:	mov	r8, ip
   1f9ac:	bl	11afc <iswalnum@plt>
   1f9b0:	mov	r1, #1
   1f9b4:	mov	r2, #0
   1f9b8:	cmp	r6, #95	; 0x5f
   1f9bc:	beq	1fa08 <__assert_fail@plt+0xdd5c>
   1f9c0:	mov	ip, r8
   1f9c4:	ldr	r8, [sp, #4]
   1f9c8:	ldr	lr, [sp, #16]
   1f9cc:	ldr	r3, [sp, #20]
   1f9d0:	cmp	r0, #0
   1f9d4:	mov	r9, #1
   1f9d8:	beq	1f6dc <__assert_fail@plt+0xda30>
   1f9dc:	b	1f714 <__assert_fail@plt+0xda68>
   1f9e0:	mov	r0, r6
   1f9e4:	bl	11afc <iswalnum@plt>
   1f9e8:	mov	r3, #1
   1f9ec:	cmp	r6, #95	; 0x5f
   1f9f0:	beq	1fa20 <__assert_fail@plt+0xdd74>
   1f9f4:	ldr	r1, [sp, #16]
   1f9f8:	cmp	r0, #0
   1f9fc:	mov	r9, #1
   1fa00:	beq	1f8f8 <__assert_fail@plt+0xdc4c>
   1fa04:	b	1f914 <__assert_fail@plt+0xdc68>
   1fa08:	mov	ip, r8
   1fa0c:	ldr	r8, [sp, #4]
   1fa10:	ldr	lr, [sp, #16]
   1fa14:	ldr	r3, [sp, #20]
   1fa18:	mov	r9, #1
   1fa1c:	b	1f714 <__assert_fail@plt+0xda68>
   1fa20:	ldr	r1, [sp, #16]
   1fa24:	mov	r9, #1
   1fa28:	b	1f914 <__assert_fail@plt+0xdc68>
   1fa2c:	add	r1, r0, #2
   1fa30:	add	r0, sp, #104	; 0x68
   1fa34:	mov	r6, ip
   1fa38:	bl	2a854 <__assert_fail@plt+0x18ba8>
   1fa3c:	mov	ip, r6
   1fa40:	cmp	r0, #0
   1fa44:	str	r0, [fp, #-196]	; 0xffffff3c
   1fa48:	beq	1f418 <__assert_fail@plt+0xd76c>
   1fa4c:	b	2142c <__assert_fail@plt+0xf780>
   1fa50:	ldr	r0, [sp, #144]	; 0x90
   1fa54:	cmp	r0, #0
   1fa58:	ble	1fa94 <__assert_fail@plt+0xdde8>
   1fa5c:	ldr	r1, [sp, #152]	; 0x98
   1fa60:	sub	r3, r0, #1
   1fa64:	cmp	r1, r3
   1fa68:	beq	1fb38 <__assert_fail@plt+0xde8c>
   1fa6c:	ldr	r1, [sp, #184]	; 0xb8
   1fa70:	cmp	r1, #2
   1fa74:	blt	1faa8 <__assert_fail@plt+0xddfc>
   1fa78:	ldr	r1, [sp, #112]	; 0x70
   1fa7c:	ldr	r0, [r1, r3, lsl #2]
   1fa80:	cmn	r0, #1
   1fa84:	bne	1fad0 <__assert_fail@plt+0xde24>
   1fa88:	sub	r3, r3, #1
   1fa8c:	cmn	r3, #1
   1fa90:	bne	1fa7c <__assert_fail@plt+0xddd0>
   1fa94:	ldr	r1, [sp, #164]	; 0xa4
   1fa98:	b	1faf8 <__assert_fail@plt+0xde4c>
   1fa9c:	mov	r0, #0
   1faa0:	str	r0, [fp, #-196]	; 0xffffff3c
   1faa4:	b	1f424 <__assert_fail@plt+0xd778>
   1faa8:	ldr	r1, [sp, #108]	; 0x6c
   1faac:	ldr	lr, [sp, #172]	; 0xac
   1fab0:	ldrb	r0, [r1, r3]
   1fab4:	ubfx	r1, r0, #5, #3
   1fab8:	and	r3, r0, #31
   1fabc:	ldr	lr, [lr, r1, lsl #2]
   1fac0:	mov	r1, #1
   1fac4:	tst	lr, r1, lsl r3
   1fac8:	bne	1faf8 <__assert_fail@plt+0xde4c>
   1facc:	b	1fadc <__assert_fail@plt+0xde30>
   1fad0:	ldrb	r1, [sp, #182]	; 0xb6
   1fad4:	cmp	r1, #0
   1fad8:	bne	1fb40 <__assert_fail@plt+0xde94>
   1fadc:	mov	r1, #0
   1fae0:	cmp	r0, #10
   1fae4:	bne	1faf8 <__assert_fail@plt+0xde4c>
   1fae8:	ldrb	r0, [sp, #181]	; 0xb5
   1faec:	cmp	r0, #0
   1faf0:	movwne	r0, #1
   1faf4:	lsl	r1, r0, #1
   1faf8:	bfi	r6, r1, #8, #1
   1fafc:	ldr	r6, [r2, r6, lsl #2]
   1fb00:	ldr	r0, [sp, #204]	; 0xcc
   1fb04:	cmp	r0, #0
   1fb08:	bne	1f490 <__assert_fail@plt+0xd7e4>
   1fb0c:	b	1f4ac <__assert_fail@plt+0xd800>
   1fb10:	ldr	ip, [sp, #8]
   1fb14:	str	r0, [fp, #-48]	; 0xffffffd0
   1fb18:	mov	r6, #0
   1fb1c:	str	r0, [fp, #-196]	; 0xffffff3c
   1fb20:	ldr	r0, [sp, #204]	; 0xcc
   1fb24:	cmp	r0, #0
   1fb28:	bne	1f490 <__assert_fail@plt+0xd7e4>
   1fb2c:	b	1f4ac <__assert_fail@plt+0xd800>
   1fb30:	ldr	ip, [sp, #8]
   1fb34:	b	1fb18 <__assert_fail@plt+0xde6c>
   1fb38:	mov	r1, #10
   1fb3c:	b	1faf8 <__assert_fail@plt+0xde4c>
   1fb40:	str	r8, [sp, #4]
   1fb44:	str	r2, [sp, #28]
   1fb48:	mov	r8, ip
   1fb4c:	mov	r9, r0
   1fb50:	bl	11afc <iswalnum@plt>
   1fb54:	mov	r1, #1
   1fb58:	cmp	r9, #95	; 0x5f
   1fb5c:	beq	1fb84 <__assert_fail@plt+0xded8>
   1fb60:	mov	ip, r8
   1fb64:	ldr	r8, [sp, #4]
   1fb68:	ldr	r2, [sp, #28]
   1fb6c:	mov	r3, r9
   1fb70:	cmp	r0, #0
   1fb74:	mov	r9, #1
   1fb78:	mov	r0, r3
   1fb7c:	beq	1fadc <__assert_fail@plt+0xde30>
   1fb80:	b	1faf8 <__assert_fail@plt+0xde4c>
   1fb84:	mov	ip, r8
   1fb88:	ldr	r8, [sp, #4]
   1fb8c:	ldr	r2, [sp, #28]
   1fb90:	mov	r9, #1
   1fb94:	b	1faf8 <__assert_fail@plt+0xde4c>
   1fb98:	ldr	sl, [sp, #40]	; 0x28
   1fb9c:	cmp	sl, #0
   1fba0:	ldrne	r0, [sl]
   1fba4:	addne	r0, r0, ip
   1fba8:	strne	r0, [sl]
   1fbac:	ldr	sl, [sp, #68]	; 0x44
   1fbb0:	cmn	r4, #1
   1fbb4:	beq	20000 <__assert_fail@plt+0xe354>
   1fbb8:	cmn	r4, #2
   1fbbc:	beq	2142c <__assert_fail@plt+0xf780>
   1fbc0:	ldr	sl, [sp, #64]	; 0x40
   1fbc4:	str	r4, [sp, #196]	; 0xc4
   1fbc8:	ldr	r1, [sp, #92]	; 0x5c
   1fbcc:	ldr	r9, [sp, #96]	; 0x60
   1fbd0:	ldrb	r0, [sl, #28]
   1fbd4:	cmp	r1, #2
   1fbd8:	bcc	1fbe4 <__assert_fail@plt+0xdf38>
   1fbdc:	ands	r1, r0, #16
   1fbe0:	beq	1fbf0 <__assert_fail@plt+0xdf44>
   1fbe4:	ldr	r1, [r9, #76]	; 0x4c
   1fbe8:	cmp	r1, #0
   1fbec:	beq	1fc0c <__assert_fail@plt+0xdf60>
   1fbf0:	ldr	r0, [sp, #204]	; 0xcc
   1fbf4:	mov	r2, r4
   1fbf8:	ldr	r1, [r0, r4, lsl #2]
   1fbfc:	add	r0, sp, #104	; 0x68
   1fc00:	bl	29a4c <__assert_fail@plt+0x17da0>
   1fc04:	str	r0, [sp, #200]	; 0xc8
   1fc08:	ldrb	r0, [sl, #28]
   1fc0c:	ldr	r1, [sp, #92]	; 0x5c
   1fc10:	cmp	r1, #2
   1fc14:	bcc	1fc2c <__assert_fail@plt+0xdf80>
   1fc18:	ands	r0, r0, #16
   1fc1c:	bne	1fc2c <__assert_fail@plt+0xdf80>
   1fc20:	ldrb	r0, [r9, #88]	; 0x58
   1fc24:	tst	r0, #1
   1fc28:	bne	1fc38 <__assert_fail@plt+0xdf8c>
   1fc2c:	ldr	r0, [r9, #76]	; 0x4c
   1fc30:	cmp	r0, #0
   1fc34:	beq	2038c <__assert_fail@plt+0xe6e0>
   1fc38:	ldr	r9, [sp, #196]	; 0xc4
   1fc3c:	cmn	r9, #-1073741823	; 0xc0000001
   1fc40:	bcs	2142c <__assert_fail@plt+0xf780>
   1fc44:	ldr	r0, [sp, #188]	; 0xbc
   1fc48:	ldr	r5, [sp, #200]	; 0xc8
   1fc4c:	str	r0, [sp, #72]	; 0x48
   1fc50:	mov	r0, #4
   1fc54:	add	r4, r0, r9, lsl #2
   1fc58:	mov	r0, r4
   1fc5c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1fc60:	mov	r6, r0
   1fc64:	cmp	r0, #0
   1fc68:	beq	214ec <__assert_fail@plt+0xf840>
   1fc6c:	ldr	r0, [sp, #72]	; 0x48
   1fc70:	ldr	r0, [r0, #76]	; 0x4c
   1fc74:	cmp	r0, #0
   1fc78:	beq	1fe9c <__assert_fail@plt+0xe1f0>
   1fc7c:	mov	r0, r4
   1fc80:	bl	1c2f4 <__assert_fail@plt+0xa648>
   1fc84:	cmp	r0, #0
   1fc88:	beq	214ec <__assert_fail@plt+0xf840>
   1fc8c:	add	r7, r9, #1
   1fc90:	mov	r1, #0
   1fc94:	mov	r4, r0
   1fc98:	lsl	r2, r7, #2
   1fc9c:	bl	11b2c <memset@plt>
   1fca0:	ldr	r0, [sp, #36]	; 0x24
   1fca4:	mov	r1, #0
   1fca8:	str	r9, [fp, #-180]	; 0xffffff4c
   1fcac:	str	r5, [fp, #-184]	; 0xffffff48
   1fcb0:	str	r4, [fp, #-188]	; 0xffffff44
   1fcb4:	str	r6, [fp, #-192]	; 0xffffff40
   1fcb8:	str	r4, [sp, #28]
   1fcbc:	str	r1, [r0]
   1fcc0:	str	r1, [r0, #4]
   1fcc4:	str	r1, [r0, #8]
   1fcc8:	add	r0, sp, #104	; 0x68
   1fccc:	sub	r1, fp, #192	; 0xc0
   1fcd0:	bl	2ea20 <__assert_fail@plt+0x1cd74>
   1fcd4:	mov	r8, r0
   1fcd8:	mov	r0, #0
   1fcdc:	bl	1c224 <__assert_fail@plt+0xa578>
   1fce0:	cmp	r8, #0
   1fce4:	bne	202ec <__assert_fail@plt+0xe640>
   1fce8:	ldr	r0, [r6]
   1fcec:	sub	r4, fp, #48	; 0x30
   1fcf0:	cmp	r0, #0
   1fcf4:	beq	1fef4 <__assert_fail@plt+0xe248>
   1fcf8:	ldr	sl, [sp, #64]	; 0x40
   1fcfc:	mov	r1, #0
   1fd00:	cmp	r9, #0
   1fd04:	mov	r8, #0
   1fd08:	str	r5, [sp, #16]
   1fd0c:	str	r6, [sp, #20]
   1fd10:	str	r1, [sp, #12]
   1fd14:	bmi	1fdb0 <__assert_fail@plt+0xe104>
   1fd18:	ldr	r1, [sp, #20]
   1fd1c:	sub	r6, r7, #1
   1fd20:	ldr	r7, [sp, #28]
   1fd24:	add	r5, r1, #4
   1fd28:	ldr	r2, [r7]
   1fd2c:	cmp	r0, #0
   1fd30:	bne	1fd50 <__assert_fail@plt+0xe0a4>
   1fd34:	b	1fda0 <__assert_fail@plt+0xe0f4>
   1fd38:	ldr	r0, [r5], #4
   1fd3c:	add	r7, r7, #4
   1fd40:	sub	r6, r6, #1
   1fd44:	ldr	r2, [r7]
   1fd48:	cmp	r0, #0
   1fd4c:	beq	1fda0 <__assert_fail@plt+0xe0f4>
   1fd50:	cmp	r2, #0
   1fd54:	beq	1fda4 <__assert_fail@plt+0xe0f8>
   1fd58:	add	r1, r0, #4
   1fd5c:	add	r2, r2, #4
   1fd60:	mov	r0, r4
   1fd64:	bl	2ac98 <__assert_fail@plt+0x18fec>
   1fd68:	cmp	r0, #0
   1fd6c:	str	r0, [fp, #-196]	; 0xffffff3c
   1fd70:	bne	200e4 <__assert_fail@plt+0xe438>
   1fd74:	ldr	r1, [sp, #72]	; 0x48
   1fd78:	sub	r0, fp, #196	; 0xc4
   1fd7c:	mov	r2, r4
   1fd80:	bl	2c414 <__assert_fail@plt+0x1a768>
   1fd84:	str	r0, [r5, #-4]
   1fd88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fd8c:	bl	1c224 <__assert_fail@plt+0xa578>
   1fd90:	ldr	r8, [fp, #-196]	; 0xffffff3c
   1fd94:	cmp	r8, #0
   1fd98:	beq	1fda4 <__assert_fail@plt+0xe0f8>
   1fd9c:	b	1fdb0 <__assert_fail@plt+0xe104>
   1fda0:	str	r2, [r5, #-4]
   1fda4:	cmp	r6, #0
   1fda8:	bne	1fd38 <__assert_fail@plt+0xe08c>
   1fdac:	mov	r8, #0
   1fdb0:	ldr	r0, [sp, #28]
   1fdb4:	bl	1c224 <__assert_fail@plt+0xa578>
   1fdb8:	ldr	r6, [sp, #20]
   1fdbc:	ldr	r5, [sp, #16]
   1fdc0:	cmp	r8, #0
   1fdc4:	beq	20364 <__assert_fail@plt+0xe6b8>
   1fdc8:	b	2032c <__assert_fail@plt+0xe680>
   1fdcc:	ldr	r0, [sp, #112]	; 0x70
   1fdd0:	ldr	r0, [r0]
   1fdd4:	cmn	r0, #1
   1fdd8:	bne	1f348 <__assert_fail@plt+0xd69c>
   1fddc:	b	20008 <__assert_fail@plt+0xe35c>
   1fde0:	cmp	ip, #0
   1fde4:	ble	20264 <__assert_fail@plt+0xe5b8>
   1fde8:	ldr	r1, [sp, #152]	; 0x98
   1fdec:	ldr	r7, [sp, #44]	; 0x2c
   1fdf0:	sub	r0, ip, #1
   1fdf4:	cmp	r1, r0
   1fdf8:	beq	20278 <__assert_fail@plt+0xe5cc>
   1fdfc:	ldr	r1, [sp, #184]	; 0xb8
   1fe00:	cmp	r1, #2
   1fe04:	blt	1fe34 <__assert_fail@plt+0xe188>
   1fe08:	ldr	r1, [sp, #112]	; 0x70
   1fe0c:	ldr	r5, [r1, r0, lsl #2]
   1fe10:	cmn	r5, #1
   1fe14:	bne	2003c <__assert_fail@plt+0xe390>
   1fe18:	sub	r0, r0, #1
   1fe1c:	cmn	r0, #1
   1fe20:	bne	1fe0c <__assert_fail@plt+0xe160>
   1fe24:	ldr	r3, [sp, #164]	; 0xa4
   1fe28:	tst	r3, #1
   1fe2c:	beq	20068 <__assert_fail@plt+0xe3bc>
   1fe30:	b	2028c <__assert_fail@plt+0xe5e0>
   1fe34:	ldr	r1, [sp, #108]	; 0x6c
   1fe38:	ldr	r2, [sp, #172]	; 0xac
   1fe3c:	ldrb	r0, [r1, r0]
   1fe40:	ubfx	r1, r0, #5, #3
   1fe44:	ldr	r1, [r2, r1, lsl #2]
   1fe48:	and	r2, r0, #31
   1fe4c:	tst	r1, r9, lsl r2
   1fe50:	bne	2028c <__assert_fail@plt+0xe5e0>
   1fe54:	cmp	r0, #10
   1fe58:	beq	20050 <__assert_fail@plt+0xe3a4>
   1fe5c:	b	20290 <__assert_fail@plt+0xe5e4>
   1fe60:	ldr	r1, [sp, #76]	; 0x4c
   1fe64:	mov	r0, #0
   1fe68:	cmp	r6, r1
   1fe6c:	bge	1fe78 <__assert_fail@plt+0xe1cc>
   1fe70:	ldr	r0, [sp, #100]	; 0x64
   1fe74:	ldrb	r0, [r0, r6]
   1fe78:	ldrb	r0, [r5, r0]
   1fe7c:	cmp	r0, #0
   1fe80:	bne	1f31c <__assert_fail@plt+0xd670>
   1fe84:	sub	r0, r6, #1
   1fe88:	cmp	r6, r4
   1fe8c:	mov	r6, r0
   1fe90:	str	r0, [fp, #-200]	; 0xffffff38
   1fe94:	bgt	1fe64 <__assert_fail@plt+0xe1b8>
   1fe98:	b	213c4 <__assert_fail@plt+0xf718>
   1fe9c:	ldr	r0, [sp, #36]	; 0x24
   1fea0:	mov	r1, #0
   1fea4:	str	r9, [fp, #-180]	; 0xffffff4c
   1fea8:	str	r5, [fp, #-184]	; 0xffffff48
   1feac:	str	r1, [fp, #-188]	; 0xffffff44
   1feb0:	str	r6, [fp, #-192]	; 0xffffff40
   1feb4:	str	r1, [r0]
   1feb8:	str	r1, [r0, #4]
   1febc:	str	r1, [r0, #8]
   1fec0:	add	r0, sp, #104	; 0x68
   1fec4:	sub	r1, fp, #192	; 0xc0
   1fec8:	bl	2ea20 <__assert_fail@plt+0x1cd74>
   1fecc:	mov	r8, r0
   1fed0:	mov	r0, #0
   1fed4:	bl	1c224 <__assert_fail@plt+0xa578>
   1fed8:	cmp	r8, #0
   1fedc:	bne	202f4 <__assert_fail@plt+0xe648>
   1fee0:	ldr	r0, [r6]
   1fee4:	mov	r8, #0
   1fee8:	cmp	r0, #0
   1feec:	beq	1ffe8 <__assert_fail@plt+0xe33c>
   1fef0:	b	20364 <__assert_fail@plt+0xe6b8>
   1fef4:	ldr	r8, [sp, #28]
   1fef8:	ldr	r1, [r8]
   1fefc:	cmp	r1, #0
   1ff00:	bne	200dc <__assert_fail@plt+0xe430>
   1ff04:	cmp	r9, #1
   1ff08:	blt	1ffe8 <__assert_fail@plt+0xe33c>
   1ff0c:	ldr	r0, [sp, #204]	; 0xcc
   1ff10:	lsl	r4, r9, #2
   1ff14:	add	sl, r9, #1
   1ff18:	sub	r0, r0, #4
   1ff1c:	ldr	r1, [r0, r4]
   1ff20:	cmp	r1, #0
   1ff24:	bne	1ff44 <__assert_fail@plt+0xe298>
   1ff28:	sub	sl, sl, #1
   1ff2c:	sub	r4, r4, #4
   1ff30:	cmp	sl, #2
   1ff34:	blt	1ffe8 <__assert_fail@plt+0xe33c>
   1ff38:	ldr	r1, [r0, r4]
   1ff3c:	cmp	r1, #0
   1ff40:	beq	1ff28 <__assert_fail@plt+0xe27c>
   1ff44:	ldrb	r2, [r1, #52]	; 0x34
   1ff48:	tst	r2, #16
   1ff4c:	beq	1ff28 <__assert_fail@plt+0xe27c>
   1ff50:	sub	r9, sl, #2
   1ff54:	add	r5, sp, #104	; 0x68
   1ff58:	mov	r0, r5
   1ff5c:	mov	r2, r9
   1ff60:	bl	29a4c <__assert_fail@plt+0x17da0>
   1ff64:	mov	r5, r0
   1ff68:	mov	r0, r8
   1ff6c:	mov	r1, #0
   1ff70:	mov	r2, r4
   1ff74:	bl	11b2c <memset@plt>
   1ff78:	ldr	r0, [sp, #36]	; 0x24
   1ff7c:	mov	r1, #0
   1ff80:	str	r9, [fp, #-180]	; 0xffffff4c
   1ff84:	str	r5, [fp, #-184]	; 0xffffff48
   1ff88:	str	r8, [fp, #-188]	; 0xffffff44
   1ff8c:	str	r6, [fp, #-192]	; 0xffffff40
   1ff90:	mov	r7, r5
   1ff94:	str	r1, [r0]
   1ff98:	str	r1, [r0, #4]
   1ff9c:	str	r1, [r0, #8]
   1ffa0:	add	r0, sp, #104	; 0x68
   1ffa4:	sub	r1, fp, #192	; 0xc0
   1ffa8:	bl	2ea20 <__assert_fail@plt+0x1cd74>
   1ffac:	mov	r8, r0
   1ffb0:	mov	r0, #0
   1ffb4:	bl	1c224 <__assert_fail@plt+0xa578>
   1ffb8:	cmp	r8, #0
   1ffbc:	bne	20320 <__assert_fail@plt+0xe674>
   1ffc0:	ldr	r0, [r6]
   1ffc4:	sub	r1, sl, #1
   1ffc8:	mov	r5, r7
   1ffcc:	sub	r4, fp, #48	; 0x30
   1ffd0:	mov	r7, r1
   1ffd4:	cmp	r0, #0
   1ffd8:	beq	1fef4 <__assert_fail@plt+0xe248>
   1ffdc:	sub	r9, sl, #2
   1ffe0:	sub	r7, sl, #1
   1ffe4:	b	1fcf8 <__assert_fail@plt+0xe04c>
   1ffe8:	mov	r0, r6
   1ffec:	bl	1c224 <__assert_fail@plt+0xa578>
   1fff0:	mov	r0, r8
   1fff4:	bl	1c224 <__assert_fail@plt+0xa578>
   1fff8:	ldr	sl, [sp, #68]	; 0x44
   1fffc:	mov	r9, #1
   20000:	add	r0, sp, #104	; 0x68
   20004:	bl	29bf4 <__assert_fail@plt+0x17f48>
   20008:	ldr	r0, [fp, #-200]	; 0xffffff38
   2000c:	ldr	r4, [sp, #48]	; 0x30
   20010:	ldr	r7, [sp, #52]	; 0x34
   20014:	mov	r8, #1
   20018:	add	r6, r0, sl
   2001c:	cmp	r6, r4
   20020:	str	r6, [fp, #-200]	; 0xffffff38
   20024:	blt	213c4 <__assert_fail@plt+0xf718>
   20028:	ldr	r5, [sp, #88]	; 0x58
   2002c:	ldr	ip, [sp, #84]	; 0x54
   20030:	cmp	r7, r6
   20034:	bge	1f19c <__assert_fail@plt+0xd4f0>
   20038:	b	213c4 <__assert_fail@plt+0xf718>
   2003c:	ldrb	r0, [sp, #182]	; 0xb6
   20040:	cmp	r0, #0
   20044:	bne	202fc <__assert_fail@plt+0xe650>
   20048:	cmp	r5, #10
   2004c:	bne	20290 <__assert_fail@plt+0xe5e4>
   20050:	ldrb	r0, [sp, #181]	; 0xb5
   20054:	cmp	r0, #0
   20058:	movwne	r0, #1
   2005c:	lsl	r3, r0, #1
   20060:	tst	r3, #1
   20064:	bne	2028c <__assert_fail@plt+0xe5e0>
   20068:	cmp	r3, #0
   2006c:	beq	20290 <__assert_fail@plt+0xe5e4>
   20070:	ands	r1, r3, #2
   20074:	and	r0, r3, #4
   20078:	cmpne	r0, #0
   2007c:	bne	200bc <__assert_fail@plt+0xe410>
   20080:	cmp	r1, #0
   20084:	bne	200cc <__assert_fail@plt+0xe420>
   20088:	ldr	r6, [r4, #36]	; 0x24
   2008c:	cmp	r0, #0
   20090:	beq	20290 <__assert_fail@plt+0xe5e4>
   20094:	ldr	r2, [r6, #40]	; 0x28
   20098:	sub	r0, fp, #196	; 0xc4
   2009c:	mov	r1, r4
   200a0:	mov	r5, ip
   200a4:	bl	28448 <__assert_fail@plt+0x1679c>
   200a8:	mov	ip, r5
   200ac:	mov	r6, r0
   200b0:	cmp	r6, #0
   200b4:	bne	1f380 <__assert_fail@plt+0xd6d4>
   200b8:	b	2142c <__assert_fail@plt+0xf780>
   200bc:	ldr	r6, [r4, #48]	; 0x30
   200c0:	cmp	r6, #0
   200c4:	bne	1f380 <__assert_fail@plt+0xd6d4>
   200c8:	b	2142c <__assert_fail@plt+0xf780>
   200cc:	ldr	r6, [r4, #44]	; 0x2c
   200d0:	cmp	r6, #0
   200d4:	bne	1f380 <__assert_fail@plt+0xd6d4>
   200d8:	b	2142c <__assert_fail@plt+0xf780>
   200dc:	mov	r2, r7
   200e0:	b	1fcf8 <__assert_fail@plt+0xe04c>
   200e4:	mov	r8, r0
   200e8:	b	1fdb0 <__assert_fail@plt+0xe104>
   200ec:	sxtb	r0, r0
   200f0:	cmn	r0, #1
   200f4:	ble	2029c <__assert_fail@plt+0xe5f0>
   200f8:	mov	r0, #1
   200fc:	mov	r4, ip
   20100:	str	r0, [sp, #72]	; 0x48
   20104:	ldr	r0, [sp, #56]	; 0x38
   20108:	cmp	r0, #0
   2010c:	bne	1f3bc <__assert_fail@plt+0xd710>
   20110:	b	202dc <__assert_fail@plt+0xe630>
   20114:	ldr	r0, [r6, #8]
   20118:	cmp	r0, #1
   2011c:	blt	201f0 <__assert_fail@plt+0xe544>
   20120:	ldr	r4, [sp, #188]	; 0xbc
   20124:	mov	r5, #0
   20128:	str	ip, [sp, #8]
   2012c:	b	2015c <__assert_fail@plt+0xe4b0>
   20130:	add	r1, r1, #1
   20134:	str	r7, [r0, #4]
   20138:	ldr	ip, [sp, #8]
   2013c:	mov	r9, #1
   20140:	str	r1, [sp, #228]	; 0xe4
   20144:	mov	r1, #0
   20148:	str	r1, [r0]
   2014c:	ldr	r0, [r6, #8]
   20150:	add	r5, r5, #1
   20154:	cmp	r5, r0
   20158:	bge	201f0 <__assert_fail@plt+0xe544>
   2015c:	ldr	r1, [r6, #12]
   20160:	ldr	r7, [r1, r5, lsl #2]
   20164:	ldr	r1, [r4]
   20168:	add	r2, r1, r7, lsl #3
   2016c:	ldrb	r2, [r2, #4]
   20170:	cmp	r2, #8
   20174:	bne	20150 <__assert_fail@plt+0xe4a4>
   20178:	ldr	r1, [r1, r7, lsl #3]
   2017c:	cmp	r1, #31
   20180:	bgt	20150 <__assert_fail@plt+0xe4a4>
   20184:	ldr	r2, [r4, #80]	; 0x50
   20188:	tst	r2, r9, lsl r1
   2018c:	beq	20150 <__assert_fail@plt+0xe4a4>
   20190:	ldr	r0, [sp, #228]	; 0xe4
   20194:	ldr	r9, [sp, #232]	; 0xe8
   20198:	cmp	r0, r9
   2019c:	beq	201cc <__assert_fail@plt+0xe520>
   201a0:	mov	r0, #1
   201a4:	mov	r1, #24
   201a8:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   201ac:	ldr	r1, [sp, #228]	; 0xe4
   201b0:	ldr	r2, [sp, #236]	; 0xec
   201b4:	str	r0, [r2, r1, lsl #2]
   201b8:	ldr	r0, [sp, #236]	; 0xec
   201bc:	ldr	r0, [r0, r1, lsl #2]
   201c0:	cmp	r0, #0
   201c4:	bne	20130 <__assert_fail@plt+0xe484>
   201c8:	b	2035c <__assert_fail@plt+0xe6b0>
   201cc:	ldr	r0, [sp, #236]	; 0xec
   201d0:	lsl	r1, r9, #3
   201d4:	bl	1c388 <__assert_fail@plt+0xa6dc>
   201d8:	cmp	r0, #0
   201dc:	beq	2035c <__assert_fail@plt+0xe6b0>
   201e0:	str	r0, [sp, #236]	; 0xec
   201e4:	lsl	r0, r9, #1
   201e8:	str	r0, [sp, #232]	; 0xe8
   201ec:	b	201a0 <__assert_fail@plt+0xe4f4>
   201f0:	mov	r8, #0
   201f4:	str	r8, [fp, #-196]	; 0xffffff3c
   201f8:	ldrb	r0, [r6, #52]	; 0x34
   201fc:	tst	r0, #64	; 0x40
   20200:	beq	1f3a4 <__assert_fail@plt+0xd6f8>
   20204:	add	r1, r6, #4
   20208:	add	r0, sp, #104	; 0x68
   2020c:	mov	r4, ip
   20210:	bl	29e80 <__assert_fail@plt+0x181d4>
   20214:	mov	ip, r4
   20218:	cmp	r0, #0
   2021c:	str	r0, [fp, #-196]	; 0xffffff3c
   20220:	beq	1f3a4 <__assert_fail@plt+0xd6f8>
   20224:	mov	r4, r0
   20228:	cmn	r4, #1
   2022c:	bne	1fbb8 <__assert_fail@plt+0xdf0c>
   20230:	b	20000 <__assert_fail@plt+0xe354>
   20234:	ldr	r1, [sp, #76]	; 0x4c
   20238:	mov	r0, #0
   2023c:	mov	r6, r7
   20240:	cmp	r7, r1
   20244:	ldr	r1, [sp, #100]	; 0x64
   20248:	ldrblt	r0, [r1, r7]
   2024c:	cmp	ip, #0
   20250:	ldrbne	r0, [ip, r0]
   20254:	ldrb	r0, [r5, r0]
   20258:	cmp	r0, #0
   2025c:	bne	1f31c <__assert_fail@plt+0xd670>
   20260:	b	2162c <__assert_fail@plt+0xf980>
   20264:	ldr	r3, [sp, #164]	; 0xa4
   20268:	ldr	r7, [sp, #44]	; 0x2c
   2026c:	tst	r3, #1
   20270:	beq	20068 <__assert_fail@plt+0xe3bc>
   20274:	b	2028c <__assert_fail@plt+0xe5e0>
   20278:	ldr	r0, [sp, #192]	; 0xc0
   2027c:	and	r0, r0, #2
   20280:	eor	r3, r0, #10
   20284:	tst	r3, #1
   20288:	beq	20068 <__assert_fail@plt+0xe3bc>
   2028c:	ldr	r6, [r4, #40]	; 0x28
   20290:	cmp	r6, #0
   20294:	bne	1f380 <__assert_fail@plt+0xd6d4>
   20298:	b	2142c <__assert_fail@plt+0xf780>
   2029c:	add	r0, sp, #104	; 0x68
   202a0:	mov	r1, r6
   202a4:	mov	r2, ip
   202a8:	mov	r4, ip
   202ac:	bl	29a4c <__assert_fail@plt+0x17da0>
   202b0:	clz	r1, r0
   202b4:	cmp	r0, #0
   202b8:	mov	ip, r4
   202bc:	lsr	r2, r1, #5
   202c0:	ldr	r1, [sp, #56]	; 0x38
   202c4:	movwne	r0, #1
   202c8:	mvneq	r4, #0
   202cc:	str	r0, [sp, #72]	; 0x48
   202d0:	orr	r1, r1, r2
   202d4:	cmp	r1, #0
   202d8:	bne	1f3bc <__assert_fail@plt+0xd710>
   202dc:	mov	r4, ip
   202e0:	cmn	r4, #1
   202e4:	bne	1fbb8 <__assert_fail@plt+0xdf0c>
   202e8:	b	20000 <__assert_fail@plt+0xe354>
   202ec:	ldr	r0, [sp, #28]
   202f0:	b	20328 <__assert_fail@plt+0xe67c>
   202f4:	mov	r0, #0
   202f8:	b	20328 <__assert_fail@plt+0xe67c>
   202fc:	mov	r0, r5
   20300:	mov	r8, ip
   20304:	bl	11afc <iswalnum@plt>
   20308:	mov	ip, r8
   2030c:	cmp	r5, #95	; 0x5f
   20310:	beq	2028c <__assert_fail@plt+0xe5e0>
   20314:	cmp	r0, #0
   20318:	beq	20048 <__assert_fail@plt+0xe39c>
   2031c:	b	2028c <__assert_fail@plt+0xe5e0>
   20320:	ldr	r0, [sp, #28]
   20324:	ldr	sl, [sp, #64]	; 0x40
   20328:	str	r0, [sp, #12]
   2032c:	mov	r0, r6
   20330:	bl	1c224 <__assert_fail@plt+0xa578>
   20334:	ldr	r0, [sp, #12]
   20338:	bl	1c224 <__assert_fail@plt+0xa578>
   2033c:	ldr	r9, [sp, #96]	; 0x60
   20340:	cmp	r8, #0
   20344:	beq	2038c <__assert_fail@plt+0xe6e0>
   20348:	ldr	sl, [sp, #68]	; 0x44
   2034c:	cmp	r8, #1
   20350:	mov	r9, #1
   20354:	beq	20000 <__assert_fail@plt+0xe354>
   20358:	b	213c4 <__assert_fail@plt+0xf718>
   2035c:	mov	r4, #12
   20360:	b	1fbc0 <__assert_fail@plt+0xdf14>
   20364:	ldr	r0, [sp, #204]	; 0xcc
   20368:	bl	1c224 <__assert_fail@plt+0xa578>
   2036c:	mov	r0, #0
   20370:	str	r5, [sp, #200]	; 0xc8
   20374:	str	r6, [sp, #204]	; 0xcc
   20378:	str	r9, [sp, #196]	; 0xc4
   2037c:	bl	1c224 <__assert_fail@plt+0xa578>
   20380:	mov	r0, #0
   20384:	bl	1c224 <__assert_fail@plt+0xa578>
   20388:	ldr	r9, [sp, #96]	; 0x60
   2038c:	ldr	r0, [sp, #92]	; 0x5c
   20390:	cmp	r0, #0
   20394:	beq	213c0 <__assert_fail@plt+0xf714>
   20398:	ldr	r0, [sp, #92]	; 0x5c
   2039c:	ldr	r1, [fp, #16]
   203a0:	ldr	r8, [fp, #20]
   203a4:	cmp	r0, #1
   203a8:	beq	203c8 <__assert_fail@plt+0xe71c>
   203ac:	ldr	r0, [sp, #32]
   203b0:	mvn	r0, r0
   203b4:	add	r0, r0, r1
   203b8:	mov	r1, #255	; 0xff
   203bc:	lsl	r2, r0, #3
   203c0:	add	r0, r8, #8
   203c4:	bl	11b2c <memset@plt>
   203c8:	mov	r0, #0
   203cc:	ldr	r1, [sp, #196]	; 0xc4
   203d0:	stm	r8, {r0, r1}
   203d4:	ldr	r0, [sp, #92]	; 0x5c
   203d8:	cmp	r0, #2
   203dc:	bcc	212c0 <__assert_fail@plt+0xf614>
   203e0:	ldrb	r0, [sl, #28]
   203e4:	ands	r0, r0, #16
   203e8:	bne	212c0 <__assert_fail@plt+0xf614>
   203ec:	ldrb	r1, [r9, #88]	; 0x58
   203f0:	sub	r5, fp, #48	; 0x30
   203f4:	mov	r0, #0
   203f8:	tst	r1, #1
   203fc:	mov	r1, #0
   20400:	beq	20414 <__assert_fail@plt+0xe768>
   20404:	ldr	r2, [r9, #76]	; 0x4c
   20408:	mov	r1, #0
   2040c:	cmp	r2, #0
   20410:	movwgt	r1, #1
   20414:	movw	r2, #20184	; 0x4ed8
   20418:	ldr	r7, [sl]
   2041c:	cmp	r1, #0
   20420:	mov	r6, #0
   20424:	movt	r2, #3
   20428:	vldr	d16, [r2]
   2042c:	ldr	r2, [r2, #8]
   20430:	str	r2, [fp, #-40]	; 0xffffffd8
   20434:	sub	r2, fp, #192	; 0xc0
   20438:	add	r4, r2, #12
   2043c:	mov	r2, #16
   20440:	vstr	d16, [fp, #-48]	; 0xffffffd0
   20444:	str	r4, [fp, #-184]	; 0xffffff48
   20448:	str	r2, [fp, #-188]	; 0xffffff44
   2044c:	str	r0, [fp, #-192]	; 0xffffff40
   20450:	beq	20470 <__assert_fail@plt+0xe7c4>
   20454:	mov	r0, #48	; 0x30
   20458:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2045c:	cmp	r0, #0
   20460:	str	r0, [fp, #-40]	; 0xffffffd8
   20464:	beq	2142c <__assert_fail@plt+0xf780>
   20468:	ldr	r0, [fp, #-192]	; 0xffffff40
   2046c:	mov	r6, r5
   20470:	ldr	r5, [sp, #92]	; 0x5c
   20474:	ldr	sl, [r7, #72]	; 0x48
   20478:	str	r4, [sp, #88]	; 0x58
   2047c:	cmp	r0, r5
   20480:	bcs	20568 <__assert_fail@plt+0xe8bc>
   20484:	sub	r0, fp, #192	; 0xc0
   20488:	mov	r1, r5
   2048c:	mov	r2, r4
   20490:	mov	r3, #8
   20494:	bl	32c2c <__assert_fail@plt+0x20f80>
   20498:	cmp	r0, #0
   2049c:	bne	2056c <__assert_fail@plt+0xe8c0>
   204a0:	ldr	r1, [sp, #88]	; 0x58
   204a4:	ldr	r0, [fp, #-184]	; 0xffffff48
   204a8:	mov	r4, r6
   204ac:	mov	r5, r1
   204b0:	cmp	r0, r1
   204b4:	beq	204bc <__assert_fail@plt+0xe810>
   204b8:	bl	1c224 <__assert_fail@plt+0xa578>
   204bc:	mov	r0, #16
   204c0:	str	r5, [fp, #-184]	; 0xffffff48
   204c4:	mov	r8, #12
   204c8:	cmp	r4, #0
   204cc:	str	r0, [fp, #-188]	; 0xffffff44
   204d0:	mov	r0, #0
   204d4:	str	r0, [fp, #-192]	; 0xffffff40
   204d8:	beq	213c4 <__assert_fail@plt+0xf718>
   204dc:	ldr	r1, [r4]
   204e0:	mov	r0, r4
   204e4:	ldr	r0, [r4, #8]
   204e8:	cmp	r1, #1
   204ec:	blt	214bc <__assert_fail@plt+0xf810>
   204f0:	mov	r5, #0
   204f4:	mov	r6, #0
   204f8:	add	r0, r0, r5
   204fc:	ldr	r0, [r0, #20]
   20500:	bl	1c224 <__assert_fail@plt+0xa578>
   20504:	ldr	r0, [r4, #8]
   20508:	add	r0, r0, r5
   2050c:	ldr	r0, [r0, #8]
   20510:	bl	1c224 <__assert_fail@plt+0xa578>
   20514:	ldr	r1, [r4]
   20518:	ldr	r0, [r4, #8]
   2051c:	add	r6, r6, #1
   20520:	add	r5, r5, #24
   20524:	cmp	r6, r1
   20528:	blt	204f8 <__assert_fail@plt+0xe84c>
   2052c:	b	214bc <__assert_fail@plt+0xf810>
   20530:	ldr	r1, [r3, #8]
   20534:	cmp	r1, #0
   20538:	beq	20548 <__assert_fail@plt+0xe89c>
   2053c:	ldrsb	r1, [r4, #28]
   20540:	cmp	r1, #0
   20544:	bmi	1ee7c <__assert_fail@plt+0xd1d0>
   20548:	mov	r1, #0
   2054c:	cmp	r6, #0
   20550:	str	r1, [sp, #80]	; 0x50
   20554:	beq	21424 <__assert_fail@plt+0xf778>
   20558:	cmp	sl, #0
   2055c:	mov	r6, #0
   20560:	bne	21418 <__assert_fail@plt+0xf76c>
   20564:	b	1ee80 <__assert_fail@plt+0xd1d4>
   20568:	str	r5, [fp, #-192]	; 0xffffff40
   2056c:	ldr	r0, [fp, #-184]	; 0xffffff48
   20570:	lsl	r2, r5, #3
   20574:	mov	r1, r8
   20578:	str	r2, [sp, #76]	; 0x4c
   2057c:	str	r0, [sp, #84]	; 0x54
   20580:	bl	118ec <memcpy@plt>
   20584:	ldr	r4, [r8]
   20588:	ldr	r0, [r8, #4]
   2058c:	mov	ip, #0
   20590:	cmp	r4, r0
   20594:	ble	20620 <__assert_fail@plt+0xe974>
   20598:	mov	r0, ip
   2059c:	bl	1c224 <__assert_fail@plt+0xa578>
   205a0:	ldr	r0, [fp, #-184]	; 0xffffff48
   205a4:	ldr	r4, [sp, #88]	; 0x58
   205a8:	cmp	r0, r4
   205ac:	beq	205b4 <__assert_fail@plt+0xe908>
   205b0:	bl	1c224 <__assert_fail@plt+0xa578>
   205b4:	mov	r0, #16
   205b8:	str	r4, [fp, #-184]	; 0xffffff48
   205bc:	cmp	r6, #0
   205c0:	str	r0, [fp, #-188]	; 0xffffff44
   205c4:	mov	r0, #0
   205c8:	str	r0, [fp, #-192]	; 0xffffff40
   205cc:	beq	212c0 <__assert_fail@plt+0xf614>
   205d0:	ldr	r1, [r6]
   205d4:	ldr	r0, [r6, #8]
   205d8:	cmp	r1, #1
   205dc:	blt	212b8 <__assert_fail@plt+0xf60c>
   205e0:	mov	r4, #0
   205e4:	mov	r5, #0
   205e8:	add	r0, r0, r4
   205ec:	ldr	r0, [r0, #20]
   205f0:	bl	1c224 <__assert_fail@plt+0xa578>
   205f4:	ldr	r0, [r6, #8]
   205f8:	add	r0, r0, r4
   205fc:	ldr	r0, [r0, #8]
   20600:	bl	1c224 <__assert_fail@plt+0xa578>
   20604:	ldr	r1, [r6]
   20608:	ldr	r0, [r6, #8]
   2060c:	add	r5, r5, #1
   20610:	add	r4, r4, #24
   20614:	cmp	r5, r1
   20618:	blt	205e8 <__assert_fail@plt+0xe93c>
   2061c:	b	212b8 <__assert_fail@plt+0xf60c>
   20620:	add	r0, r8, #4
   20624:	mov	lr, #1
   20628:	mov	r5, #0
   2062c:	mov	ip, #0
   20630:	mov	r3, #0
   20634:	str	r7, [sp, #60]	; 0x3c
   20638:	str	r6, [sp, #68]	; 0x44
   2063c:	str	r0, [sp, #64]	; 0x40
   20640:	ldr	r0, [sp, #92]	; 0x5c
   20644:	lsl	r0, r0, #4
   20648:	str	r0, [sp, #44]	; 0x2c
   2064c:	mov	r0, #0
   20650:	str	r0, [sp, #72]	; 0x48
   20654:	ldr	r0, [r7]
   20658:	add	r1, r0, sl, lsl #3
   2065c:	ldr	r1, [r1, #4]
   20660:	uxtb	r2, r1
   20664:	cmp	r2, #9
   20668:	beq	2069c <__assert_fail@plt+0xe9f0>
   2066c:	cmp	r2, #8
   20670:	bne	20718 <__assert_fail@plt+0xea6c>
   20674:	ldr	r0, [r0, sl, lsl #3]
   20678:	ldr	r1, [sp, #92]	; 0x5c
   2067c:	add	r0, r0, #1
   20680:	cmp	r0, r1
   20684:	bge	20718 <__assert_fail@plt+0xea6c>
   20688:	mov	r1, r8
   2068c:	str	r4, [r1, r0, lsl #3]!
   20690:	mvn	r0, #0
   20694:	str	r0, [r1, #4]
   20698:	b	20718 <__assert_fail@plt+0xea6c>
   2069c:	ldr	r0, [r0, sl, lsl #3]
   206a0:	ldr	r2, [sp, #92]	; 0x5c
   206a4:	add	r0, r0, #1
   206a8:	cmp	r0, r2
   206ac:	bge	20718 <__assert_fail@plt+0xea6c>
   206b0:	ldr	r2, [r8, r0, lsl #3]
   206b4:	cmp	r2, r4
   206b8:	bge	206d0 <__assert_fail@plt+0xea24>
   206bc:	add	r0, r8, r0, lsl #3
   206c0:	mov	r1, r8
   206c4:	str	r4, [r0, #4]
   206c8:	ldr	r0, [sp, #84]	; 0x54
   206cc:	b	206f0 <__assert_fail@plt+0xea44>
   206d0:	tst	r1, #524288	; 0x80000
   206d4:	beq	20710 <__assert_fail@plt+0xea64>
   206d8:	ldr	r1, [sp, #84]	; 0x54
   206dc:	ldr	r1, [r1, r0, lsl #3]
   206e0:	cmn	r1, #1
   206e4:	beq	20710 <__assert_fail@plt+0xea64>
   206e8:	ldr	r1, [sp, #84]	; 0x54
   206ec:	mov	r0, r8
   206f0:	ldr	r2, [sp, #76]	; 0x4c
   206f4:	mov	r7, ip
   206f8:	str	r3, [sp, #48]	; 0x30
   206fc:	bl	118ec <memcpy@plt>
   20700:	ldr	r3, [sp, #48]	; 0x30
   20704:	mov	ip, r7
   20708:	mov	lr, #1
   2070c:	b	20718 <__assert_fail@plt+0xea6c>
   20710:	add	r0, r8, r0, lsl #3
   20714:	str	r4, [r0, #4]
   20718:	ldr	r0, [r8, #4]
   2071c:	cmp	r4, r0
   20720:	ldreq	r0, [sp, #200]	; 0xc8
   20724:	cmpeq	sl, r0
   20728:	beq	20784 <__assert_fail@plt+0xead8>
   2072c:	cmp	r6, #0
   20730:	beq	2085c <__assert_fail@plt+0xebb0>
   20734:	cmp	r3, #1
   20738:	blt	2085c <__assert_fail@plt+0xebb0>
   2073c:	str	ip, [sp, #52]	; 0x34
   20740:	mov	ip, r3
   20744:	mov	r0, #0
   20748:	subs	r1, r3, #1
   2074c:	beq	20770 <__assert_fail@plt+0xeac4>
   20750:	add	r2, r0, r1
   20754:	lsr	r3, r2, #1
   20758:	ldr	r7, [r5, r3, lsl #2]
   2075c:	cmp	r7, sl
   20760:	addlt	r0, lr, r2, lsr #1
   20764:	movge	r1, r3
   20768:	cmp	r0, r1
   2076c:	bcc	20750 <__assert_fail@plt+0xeaa4>
   20770:	ldr	r0, [r5, r0, lsl #2]
   20774:	mov	r3, ip
   20778:	ldr	ip, [sp, #52]	; 0x34
   2077c:	cmp	r0, sl
   20780:	bne	2085c <__assert_fail@plt+0xebb0>
   20784:	ldr	r4, [sp, #88]	; 0x58
   20788:	cmp	r6, #0
   2078c:	beq	21238 <__assert_fail@plt+0xf58c>
   20790:	ldr	r0, [sp, #92]	; 0x5c
   20794:	ldr	r1, [sp, #64]	; 0x40
   20798:	ldr	r2, [r1, #-4]
   2079c:	cmp	r2, #0
   207a0:	bpl	207bc <__assert_fail@plt+0xeb10>
   207a4:	subs	r0, r0, #1
   207a8:	add	r1, r1, #8
   207ac:	beq	21238 <__assert_fail@plt+0xf58c>
   207b0:	ldr	r2, [r1, #-4]
   207b4:	cmp	r2, #0
   207b8:	bmi	207a4 <__assert_fail@plt+0xeaf8>
   207bc:	ldr	r2, [r1]
   207c0:	cmn	r2, #1
   207c4:	bne	207a4 <__assert_fail@plt+0xeaf8>
   207c8:	ldr	r0, [r6]
   207cc:	cmp	r0, #0
   207d0:	beq	21238 <__assert_fail@plt+0xf58c>
   207d4:	sub	r1, r0, #1
   207d8:	ldr	r7, [sp, #76]	; 0x4c
   207dc:	mov	r0, r8
   207e0:	mov	r8, ip
   207e4:	str	r1, [r6]
   207e8:	add	sl, r1, r1, lsl #1
   207ec:	ldr	r4, [r6, #8]
   207f0:	mov	r2, r7
   207f4:	ldr	r1, [r4, sl, lsl #3]!
   207f8:	str	r1, [sp, #100]	; 0x64
   207fc:	ldr	r1, [r4, #8]
   20800:	bl	118ec <memcpy@plt>
   20804:	ldr	r0, [r4, #8]
   20808:	ldr	r1, [sp, #92]	; 0x5c
   2080c:	mov	r2, r7
   20810:	add	r1, r0, r1, lsl #3
   20814:	ldr	r0, [sp, #84]	; 0x54
   20818:	bl	118ec <memcpy@plt>
   2081c:	mov	r0, r8
   20820:	bl	1c224 <__assert_fail@plt+0xa578>
   20824:	ldr	r0, [r6, #8]
   20828:	add	r0, r0, sl, lsl #3
   2082c:	ldr	r0, [r0, #8]
   20830:	bl	1c224 <__assert_fail@plt+0xa578>
   20834:	ldr	r0, [r6, #8]
   20838:	mov	lr, #1
   2083c:	add	r0, r0, sl, lsl #3
   20840:	ldr	ip, [r0, #20]
   20844:	ldr	r1, [r0, #12]
   20848:	ldr	sl, [r0, #4]
   2084c:	ldr	r3, [r0, #16]
   20850:	mov	r5, ip
   20854:	str	r1, [sp, #72]	; 0x48
   20858:	b	20860 <__assert_fail@plt+0xebb4>
   2085c:	str	r4, [sp, #100]	; 0x64
   20860:	ldr	r4, [sp, #188]	; 0xbc
   20864:	ldr	r0, [r4]
   20868:	add	r1, r0, sl, lsl #3
   2086c:	ldr	r1, [r1, #4]
   20870:	tst	r1, #8
   20874:	bne	20948 <__assert_fail@plt+0xec9c>
   20878:	tst	r1, #1048576	; 0x100000
   2087c:	bne	209d8 <__assert_fail@plt+0xed2c>
   20880:	uxtb	r1, r1
   20884:	cmp	r1, #4
   20888:	bne	20a04 <__assert_fail@plt+0xed58>
   2088c:	ldr	r0, [r0, sl, lsl #3]
   20890:	ldr	r2, [sp, #92]	; 0x5c
   20894:	str	r5, [sp, #56]	; 0x38
   20898:	mov	r7, #0
   2089c:	mov	r5, r2
   208a0:	add	r0, r0, #1
   208a4:	cmp	r0, r2
   208a8:	bge	208bc <__assert_fail@plt+0xec10>
   208ac:	ldr	r1, [fp, #20]
   208b0:	ldr	r2, [r1, r0, lsl #3]!
   208b4:	ldr	r1, [r1, #4]
   208b8:	sub	r7, r1, r2
   208bc:	ldr	r8, [sp, #100]	; 0x64
   208c0:	cmp	r6, #0
   208c4:	beq	20cc8 <__assert_fail@plt+0xf01c>
   208c8:	cmp	r0, r5
   208cc:	bge	2092c <__assert_fail@plt+0xec80>
   208d0:	ldr	r2, [fp, #20]
   208d4:	ldr	r1, [r2, r0, lsl #3]
   208d8:	cmn	r1, #1
   208dc:	beq	2092c <__assert_fail@plt+0xec80>
   208e0:	add	r0, r2, r0, lsl #3
   208e4:	ldr	r0, [r0, #4]
   208e8:	cmn	r0, #1
   208ec:	beq	2092c <__assert_fail@plt+0xec80>
   208f0:	cmp	r7, #0
   208f4:	beq	20d40 <__assert_fail@plt+0xf094>
   208f8:	ldr	r0, [sp, #132]	; 0x84
   208fc:	sub	r0, r0, r8
   20900:	cmp	r0, r7
   20904:	blt	2092c <__assert_fail@plt+0xec80>
   20908:	ldr	r2, [sp, #108]	; 0x6c
   2090c:	str	ip, [sp, #52]	; 0x34
   20910:	add	r0, r2, r1
   20914:	add	r1, r2, r8
   20918:	mov	r2, r7
   2091c:	bl	11aa8 <bcmp@plt>
   20920:	cmp	r0, #0
   20924:	beq	20efc <__assert_fail@plt+0xf250>
   20928:	ldr	ip, [sp, #52]	; 0x34
   2092c:	mov	sl, r5
   20930:	ldr	r5, [sp, #56]	; 0x38
   20934:	ldr	r4, [sp, #88]	; 0x58
   20938:	ldr	r0, [r6]
   2093c:	cmp	r0, #0
   20940:	bne	20f38 <__assert_fail@plt+0xf28c>
   20944:	b	21434 <__assert_fail@plt+0xf788>
   20948:	ldr	r0, [sp, #204]	; 0xcc
   2094c:	ldr	r1, [sp, #100]	; 0x64
   20950:	ldr	r8, [r4, #20]
   20954:	cmp	r3, #1
   20958:	ldr	r7, [r0, r1, lsl #2]
   2095c:	blt	209b0 <__assert_fail@plt+0xed04>
   20960:	mov	r4, r3
   20964:	mov	r0, #0
   20968:	subs	r1, r3, #1
   2096c:	str	r7, [sp, #80]	; 0x50
   20970:	beq	20994 <__assert_fail@plt+0xece8>
   20974:	add	r2, r0, r1
   20978:	lsr	r3, r2, #1
   2097c:	ldr	r7, [r5, r3, lsl #2]
   20980:	cmp	r7, sl
   20984:	addlt	r0, lr, r2, lsr #1
   20988:	movge	r1, r3
   2098c:	cmp	r0, r1
   20990:	bcc	20974 <__assert_fail@plt+0xecc8>
   20994:	ldr	r0, [r5, r0, lsl #2]
   20998:	ldr	r7, [sp, #80]	; 0x50
   2099c:	mov	r3, r4
   209a0:	cmp	r0, sl
   209a4:	bne	209b0 <__assert_fail@plt+0xed04>
   209a8:	str	r5, [sp, #56]	; 0x38
   209ac:	b	20af8 <__assert_fail@plt+0xee4c>
   209b0:	ldr	r0, [sp, #72]	; 0x48
   209b4:	cmp	r0, #0
   209b8:	beq	20acc <__assert_fail@plt+0xee20>
   209bc:	cmp	r3, #0
   209c0:	str	r5, [sp, #56]	; 0x38
   209c4:	bne	20fd8 <__assert_fail@plt+0xf32c>
   209c8:	mov	r0, r5
   209cc:	str	sl, [r5]
   209d0:	mov	r3, #1
   209d4:	b	20af8 <__assert_fail@plt+0xee4c>
   209d8:	ldr	r3, [sp, #100]	; 0x64
   209dc:	mov	r0, r4
   209e0:	mov	r1, sl
   209e4:	add	r2, sp, #104	; 0x68
   209e8:	mov	r8, ip
   209ec:	bl	2c744 <__assert_fail@plt+0x1aa98>
   209f0:	mov	lr, #1
   209f4:	mov	r1, r0
   209f8:	cmp	r1, #0
   209fc:	mov	ip, r8
   20a00:	bne	20a30 <__assert_fail@plt+0xed84>
   20a04:	ldr	r0, [r4]
   20a08:	ldr	r2, [sp, #100]	; 0x64
   20a0c:	mov	r6, ip
   20a10:	add	r1, r0, sl, lsl #3
   20a14:	add	r0, sp, #104	; 0x68
   20a18:	bl	2cad0 <__assert_fail@plt+0x1ae24>
   20a1c:	mov	ip, r6
   20a20:	mov	lr, #1
   20a24:	mov	r1, #1
   20a28:	cmp	r0, #0
   20a2c:	beq	20b18 <__assert_fail@plt+0xee6c>
   20a30:	ldr	r0, [r4, #12]
   20a34:	ldr	r2, [sp, #100]	; 0x64
   20a38:	ldr	r6, [sp, #68]	; 0x44
   20a3c:	ldr	r7, [r0, sl, lsl #2]
   20a40:	add	r2, r1, r2
   20a44:	cmp	r6, #0
   20a48:	beq	20bc0 <__assert_fail@plt+0xef14>
   20a4c:	ldr	r0, [sp, #196]	; 0xc4
   20a50:	ldr	r4, [sp, #88]	; 0x58
   20a54:	cmp	r2, r0
   20a58:	bgt	20f28 <__assert_fail@plt+0xf27c>
   20a5c:	ldr	r0, [sp, #204]	; 0xcc
   20a60:	ldr	r0, [r0, r2, lsl #2]
   20a64:	cmp	r0, #0
   20a68:	beq	20f28 <__assert_fail@plt+0xf27c>
   20a6c:	ldr	r1, [r0, #8]
   20a70:	cmp	r1, #1
   20a74:	blt	20f28 <__assert_fail@plt+0xf27c>
   20a78:	ldr	r0, [r0, #12]
   20a7c:	str	r2, [sp, #100]	; 0x64
   20a80:	mov	r8, r5
   20a84:	subs	r1, r1, #1
   20a88:	mov	r2, #0
   20a8c:	beq	20ab4 <__assert_fail@plt+0xee08>
   20a90:	mov	r2, #0
   20a94:	add	r3, r2, r1
   20a98:	lsr	r6, r3, #1
   20a9c:	ldr	r5, [r0, r6, lsl #2]
   20aa0:	cmp	r5, r7
   20aa4:	addlt	r2, lr, r3, lsr #1
   20aa8:	movge	r1, r6
   20aac:	cmp	r2, r1
   20ab0:	bcc	20a94 <__assert_fail@plt+0xede8>
   20ab4:	ldr	r0, [r0, r2, lsl #2]
   20ab8:	mov	r3, #0
   20abc:	mov	r5, r8
   20ac0:	cmp	r0, r7
   20ac4:	bne	20b18 <__assert_fail@plt+0xee6c>
   20ac8:	b	20cac <__assert_fail@plt+0xf000>
   20acc:	mov	r0, #4
   20ad0:	bl	1c2f4 <__assert_fail@plt+0xa648>
   20ad4:	cmp	r0, #0
   20ad8:	beq	21634 <__assert_fail@plt+0xf988>
   20adc:	mov	ip, r0
   20ae0:	str	sl, [r0]
   20ae4:	mov	r0, #1
   20ae8:	mov	r3, #1
   20aec:	mov	lr, #1
   20af0:	str	r0, [sp, #72]	; 0x48
   20af4:	str	ip, [sp, #56]	; 0x38
   20af8:	add	r0, sl, sl, lsl #1
   20afc:	add	r1, r8, r0, lsl #2
   20b00:	ldr	sl, [r1, #4]
   20b04:	cmp	sl, #1
   20b08:	ldrge	r2, [r7, #8]
   20b0c:	subsge	r2, r2, #1
   20b10:	bge	20b3c <__assert_fail@plt+0xee90>
   20b14:	ldr	r5, [sp, #56]	; 0x38
   20b18:	ldr	r6, [sp, #68]	; 0x44
   20b1c:	cmp	r6, #0
   20b20:	beq	214cc <__assert_fail@plt+0xf820>
   20b24:	ldr	sl, [sp, #92]	; 0x5c
   20b28:	ldr	r4, [sp, #88]	; 0x58
   20b2c:	ldr	r0, [r6]
   20b30:	cmp	r0, #0
   20b34:	bne	20f38 <__assert_fail@plt+0xf28c>
   20b38:	b	21434 <__assert_fail@plt+0xf788>
   20b3c:	str	r3, [sp, #48]	; 0x30
   20b40:	ldr	r1, [r1, #8]
   20b44:	ldr	r3, [r7, #12]
   20b48:	cmp	r2, #0
   20b4c:	beq	20bec <__assert_fail@plt+0xef40>
   20b50:	mov	r5, #0
   20b54:	mvn	lr, #0
   20b58:	str	ip, [sp, #52]	; 0x34
   20b5c:	str	r2, [sp, #80]	; 0x50
   20b60:	b	20b74 <__assert_fail@plt+0xeec8>
   20b64:	ldr	r2, [sp, #80]	; 0x50
   20b68:	add	r5, r5, #1
   20b6c:	cmp	r5, sl
   20b70:	beq	20bdc <__assert_fail@plt+0xef30>
   20b74:	ldr	r4, [r1, r5, lsl #2]
   20b78:	mov	r7, #0
   20b7c:	mov	ip, #1
   20b80:	add	r6, r7, r2
   20b84:	lsr	r0, r6, #1
   20b88:	ldr	r9, [r3, r0, lsl #2]
   20b8c:	cmp	r9, r4
   20b90:	addlt	r7, ip, r6, lsr #1
   20b94:	movge	r2, r0
   20b98:	cmp	r7, r2
   20b9c:	bcc	20b80 <__assert_fail@plt+0xeed4>
   20ba0:	ldr	r0, [r3, r7, lsl #2]
   20ba4:	cmp	r0, r4
   20ba8:	bne	20b64 <__assert_fail@plt+0xeeb8>
   20bac:	cmn	lr, #1
   20bb0:	mov	r7, lr
   20bb4:	mov	lr, r4
   20bb8:	beq	20b64 <__assert_fail@plt+0xeeb8>
   20bbc:	b	20c30 <__assert_fail@plt+0xef84>
   20bc0:	str	r2, [sp, #100]	; 0x64
   20bc4:	mov	r3, #0
   20bc8:	cmn	r7, #1
   20bcc:	bgt	20cb4 <__assert_fail@plt+0xf008>
   20bd0:	cmn	r7, #2
   20bd4:	bne	20b18 <__assert_fail@plt+0xee6c>
   20bd8:	b	21594 <__assert_fail@plt+0xf8e8>
   20bdc:	ldr	ip, [sp, #52]	; 0x34
   20be0:	mov	r7, lr
   20be4:	mov	lr, #1
   20be8:	b	20ca4 <__assert_fail@plt+0xeff8>
   20bec:	ldr	r4, [r3]
   20bf0:	mvn	r7, #0
   20bf4:	ldr	r2, [r1]
   20bf8:	cmp	r4, r2
   20bfc:	beq	20c20 <__assert_fail@plt+0xef74>
   20c00:	mov	r2, r7
   20c04:	add	r1, r1, #4
   20c08:	subs	sl, sl, #1
   20c0c:	mov	r7, r2
   20c10:	beq	20ca0 <__assert_fail@plt+0xeff4>
   20c14:	ldr	r2, [r1]
   20c18:	cmp	r4, r2
   20c1c:	bne	20c00 <__assert_fail@plt+0xef54>
   20c20:	cmn	r7, #1
   20c24:	mov	r2, r4
   20c28:	beq	20c04 <__assert_fail@plt+0xef58>
   20c2c:	str	ip, [sp, #52]	; 0x34
   20c30:	ldr	r3, [sp, #48]	; 0x30
   20c34:	ldr	sl, [sp, #68]	; 0x44
   20c38:	ldr	ip, [sp, #52]	; 0x34
   20c3c:	ldr	r8, [sp, #56]	; 0x38
   20c40:	mov	lr, #1
   20c44:	cmp	r3, #1
   20c48:	blt	20cf4 <__assert_fail@plt+0xf048>
   20c4c:	mov	r0, #0
   20c50:	mov	r5, r8
   20c54:	subs	r1, r3, #1
   20c58:	beq	20c7c <__assert_fail@plt+0xefd0>
   20c5c:	add	r2, r0, r1
   20c60:	lsr	r3, r2, #1
   20c64:	ldr	r6, [r5, r3, lsl #2]
   20c68:	cmp	r6, r7
   20c6c:	addlt	r0, lr, r2, lsr #1
   20c70:	movge	r1, r3
   20c74:	cmp	r0, r1
   20c78:	bcc	20c5c <__assert_fail@plt+0xefb0>
   20c7c:	ldr	r0, [r5, r0, lsl #2]
   20c80:	ldr	r3, [sp, #48]	; 0x30
   20c84:	cmp	r0, r7
   20c88:	bne	20cf4 <__assert_fail@plt+0xf048>
   20c8c:	mov	r7, r4
   20c90:	mov	r5, r8
   20c94:	cmn	r7, #1
   20c98:	bgt	20cb4 <__assert_fail@plt+0xf008>
   20c9c:	b	20bd0 <__assert_fail@plt+0xef24>
   20ca0:	mov	r7, r2
   20ca4:	ldr	r5, [sp, #56]	; 0x38
   20ca8:	ldr	r3, [sp, #48]	; 0x30
   20cac:	cmn	r7, #1
   20cb0:	ble	20bd0 <__assert_fail@plt+0xef24>
   20cb4:	ldr	r8, [fp, #20]
   20cb8:	ldr	r6, [sp, #68]	; 0x44
   20cbc:	ldr	r4, [sp, #100]	; 0x64
   20cc0:	mov	sl, r7
   20cc4:	b	20fc0 <__assert_fail@plt+0xf314>
   20cc8:	cmp	r7, #0
   20ccc:	beq	20d40 <__assert_fail@plt+0xf094>
   20cd0:	ldr	r0, [r4, #12]
   20cd4:	add	r8, r7, r8
   20cd8:	ldr	r5, [sp, #56]	; 0x38
   20cdc:	mov	r3, #0
   20ce0:	str	r8, [sp, #100]	; 0x64
   20ce4:	ldr	r7, [r0, sl, lsl #2]
   20ce8:	cmn	r7, #1
   20cec:	bgt	20cb4 <__assert_fail@plt+0xf008>
   20cf0:	b	20bd0 <__assert_fail@plt+0xef24>
   20cf4:	cmp	sl, #0
   20cf8:	beq	20d68 <__assert_fail@plt+0xf0bc>
   20cfc:	ldr	r6, [sl]
   20d00:	ldr	r0, [sl, #4]
   20d04:	add	r1, r6, #1
   20d08:	cmp	r1, r0
   20d0c:	str	r1, [sl]
   20d10:	bne	20d78 <__assert_fail@plt+0xf0cc>
   20d14:	ldr	r0, [sl, #8]
   20d18:	add	r1, r1, r1, lsl #1
   20d1c:	lsl	r1, r1, #4
   20d20:	bl	1c388 <__assert_fail@plt+0xa6dc>
   20d24:	cmp	r0, #0
   20d28:	beq	21590 <__assert_fail@plt+0xf8e4>
   20d2c:	str	r0, [sl, #8]
   20d30:	ldr	r1, [sl, #4]
   20d34:	lsl	r1, r1, #1
   20d38:	str	r1, [sl, #4]
   20d3c:	b	20d7c <__assert_fail@plt+0xf0d0>
   20d40:	ldr	r0, [sp, #72]	; 0x48
   20d44:	str	r7, [sp, #80]	; 0x50
   20d48:	cmp	r0, #0
   20d4c:	beq	20e4c <__assert_fail@plt+0xf1a0>
   20d50:	cmp	r3, #0
   20d54:	bne	2111c <__assert_fail@plt+0xf470>
   20d58:	ldr	r5, [sp, #56]	; 0x38
   20d5c:	mov	r2, #1
   20d60:	str	sl, [r5]
   20d64:	b	20e78 <__assert_fail@plt+0xf1cc>
   20d68:	mov	r5, r8
   20d6c:	cmn	r7, #1
   20d70:	bgt	20cb4 <__assert_fail@plt+0xf008>
   20d74:	b	20bd0 <__assert_fail@plt+0xef24>
   20d78:	ldr	r0, [sl, #8]
   20d7c:	ldr	r1, [sp, #100]	; 0x64
   20d80:	add	r6, r6, r6, lsl #1
   20d84:	str	r1, [r0, r6, lsl #3]!
   20d88:	str	r4, [r0, #4]
   20d8c:	ldr	r0, [sp, #44]	; 0x2c
   20d90:	bl	1c2f4 <__assert_fail@plt+0xa648>
   20d94:	ldr	r1, [sl, #8]
   20d98:	cmp	r0, #0
   20d9c:	add	r4, r1, r6, lsl #3
   20da0:	str	r0, [r4, #8]!
   20da4:	beq	21588 <__assert_fail@plt+0xf8dc>
   20da8:	ldr	r9, [sp, #76]	; 0x4c
   20dac:	ldr	r1, [fp, #20]
   20db0:	mov	r2, r9
   20db4:	bl	118ec <memcpy@plt>
   20db8:	ldr	r0, [r4]
   20dbc:	ldr	r1, [sp, #92]	; 0x5c
   20dc0:	mov	r2, r9
   20dc4:	add	r0, r0, r1, lsl #3
   20dc8:	ldr	r1, [sp, #84]	; 0x54
   20dcc:	bl	118ec <memcpy@plt>
   20dd0:	ldr	r0, [sl, #8]
   20dd4:	ldr	r3, [sp, #48]	; 0x30
   20dd8:	add	r5, r0, r6, lsl #3
   20ddc:	cmp	r3, #1
   20de0:	mov	r6, r5
   20de4:	str	r3, [r6, #16]!
   20de8:	sub	sl, r6, #4
   20dec:	blt	20e24 <__assert_fail@plt+0xf178>
   20df0:	lsl	r4, r3, #2
   20df4:	str	r3, [sl]
   20df8:	mov	r0, r4
   20dfc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   20e00:	cmp	r0, #0
   20e04:	str	r0, [r5, #20]
   20e08:	beq	2163c <__assert_fail@plt+0xf990>
   20e0c:	ldr	r5, [sp, #52]	; 0x34
   20e10:	mov	r2, r4
   20e14:	mov	r1, r5
   20e18:	bl	118ec <memcpy@plt>
   20e1c:	mov	ip, r5
   20e20:	b	20be4 <__assert_fail@plt+0xef38>
   20e24:	ldr	ip, [sp, #52]	; 0x34
   20e28:	ldr	r5, [sp, #56]	; 0x38
   20e2c:	mov	r0, #0
   20e30:	mov	lr, #1
   20e34:	str	r0, [sl]
   20e38:	str	r0, [sl, #4]
   20e3c:	str	r0, [sl, #8]
   20e40:	cmn	r7, #1
   20e44:	bgt	20cb4 <__assert_fail@plt+0xf008>
   20e48:	b	20bd0 <__assert_fail@plt+0xef24>
   20e4c:	mov	r0, #4
   20e50:	bl	1c2f4 <__assert_fail@plt+0xa648>
   20e54:	cmp	r0, #0
   20e58:	beq	21634 <__assert_fail@plt+0xf988>
   20e5c:	mov	ip, r0
   20e60:	str	sl, [r0]
   20e64:	mov	r0, #1
   20e68:	mov	r2, #1
   20e6c:	mov	lr, #1
   20e70:	str	r0, [sp, #72]	; 0x48
   20e74:	mov	r5, ip
   20e78:	ldr	r0, [sp, #204]	; 0xcc
   20e7c:	ldr	r0, [r0, r8, lsl #2]
   20e80:	ldr	r1, [r0, #8]
   20e84:	cmp	r1, #1
   20e88:	blt	20a04 <__assert_fail@plt+0xed58>
   20e8c:	mov	r9, r2
   20e90:	ldr	r2, [r4, #20]
   20e94:	add	r3, sl, sl, lsl #1
   20e98:	mov	r8, ip
   20e9c:	ldr	ip, [r0, #12]
   20ea0:	add	r2, r2, r3, lsl #2
   20ea4:	ldr	r2, [r2, #8]
   20ea8:	ldr	r7, [r2]
   20eac:	subs	r2, r1, #1
   20eb0:	mov	r1, #0
   20eb4:	beq	20ed8 <__assert_fail@plt+0xf22c>
   20eb8:	add	r3, r1, r2
   20ebc:	lsr	r6, r3, #1
   20ec0:	ldr	r0, [ip, r6, lsl #2]
   20ec4:	cmp	r0, r7
   20ec8:	addlt	r1, lr, r3, lsr #1
   20ecc:	movge	r2, r6
   20ed0:	cmp	r1, r2
   20ed4:	bcc	20eb8 <__assert_fail@plt+0xf20c>
   20ed8:	ldr	r0, [ip, r1, lsl #2]
   20edc:	ldr	r1, [sp, #80]	; 0x50
   20ee0:	cmp	r0, r7
   20ee4:	bne	209f8 <__assert_fail@plt+0xed4c>
   20ee8:	mov	ip, r8
   20eec:	mov	r3, r9
   20ef0:	cmn	r7, #1
   20ef4:	bgt	20cb4 <__assert_fail@plt+0xf008>
   20ef8:	b	20bd0 <__assert_fail@plt+0xef24>
   20efc:	ldr	r0, [r4, #12]
   20f00:	add	r8, r7, r8
   20f04:	ldr	ip, [sp, #52]	; 0x34
   20f08:	ldr	r5, [sp, #56]	; 0x38
   20f0c:	mov	lr, #1
   20f10:	mov	r2, r8
   20f14:	ldr	r7, [r0, sl, lsl #2]
   20f18:	ldr	r0, [sp, #196]	; 0xc4
   20f1c:	ldr	r4, [sp, #88]	; 0x58
   20f20:	cmp	r2, r0
   20f24:	ble	20a5c <__assert_fail@plt+0xedb0>
   20f28:	ldr	sl, [sp, #92]	; 0x5c
   20f2c:	ldr	r0, [r6]
   20f30:	cmp	r0, #0
   20f34:	beq	21434 <__assert_fail@plt+0xf788>
   20f38:	sub	r0, r0, #1
   20f3c:	ldr	r7, [sp, #76]	; 0x4c
   20f40:	ldr	r8, [fp, #20]
   20f44:	mov	r9, ip
   20f48:	str	r0, [r6]
   20f4c:	add	r5, r0, r0, lsl #1
   20f50:	ldr	r4, [r6, #8]
   20f54:	mov	r2, r7
   20f58:	ldr	r0, [r4, r5, lsl #3]!
   20f5c:	ldr	r1, [r4, #8]
   20f60:	str	r0, [sp, #100]	; 0x64
   20f64:	mov	r0, r8
   20f68:	bl	118ec <memcpy@plt>
   20f6c:	ldr	r0, [r4, #8]
   20f70:	mov	r2, r7
   20f74:	add	r1, r0, sl, lsl #3
   20f78:	ldr	r0, [sp, #84]	; 0x54
   20f7c:	bl	118ec <memcpy@plt>
   20f80:	ldr	r4, [sp, #100]	; 0x64
   20f84:	mov	r0, r9
   20f88:	bl	1c224 <__assert_fail@plt+0xa578>
   20f8c:	ldr	r0, [r6, #8]
   20f90:	add	r0, r0, r5, lsl #3
   20f94:	ldr	r0, [r0, #8]
   20f98:	bl	1c224 <__assert_fail@plt+0xa578>
   20f9c:	ldr	r0, [r6, #8]
   20fa0:	mov	lr, #1
   20fa4:	add	r0, r0, r5, lsl #3
   20fa8:	ldr	ip, [r0, #20]
   20fac:	ldr	r1, [r0, #12]
   20fb0:	ldr	sl, [r0, #4]
   20fb4:	ldr	r3, [r0, #16]
   20fb8:	mov	r5, ip
   20fbc:	str	r1, [sp, #72]	; 0x48
   20fc0:	ldr	r0, [r8, #4]
   20fc4:	ldr	r9, [sp, #96]	; 0x60
   20fc8:	ldr	r7, [sp, #60]	; 0x3c
   20fcc:	cmp	r4, r0
   20fd0:	ble	20654 <__assert_fail@plt+0xe9a8>
   20fd4:	b	20598 <__assert_fail@plt+0xe8ec>
   20fd8:	ldr	r0, [sp, #72]	; 0x48
   20fdc:	str	r8, [sp, #52]	; 0x34
   20fe0:	mov	r4, ip
   20fe4:	mov	r8, r3
   20fe8:	str	r7, [sp, #80]	; 0x50
   20fec:	cmp	r0, r3
   20ff0:	bne	21024 <__assert_fail@plt+0xf378>
   20ff4:	ldr	r0, [sp, #72]	; 0x48
   20ff8:	lsl	r1, r0, #3
   20ffc:	mov	r0, r4
   21000:	bl	1c388 <__assert_fail@plt+0xa6dc>
   21004:	ldr	r5, [sp, #56]	; 0x38
   21008:	cmp	r0, #0
   2100c:	beq	21594 <__assert_fail@plt+0xf8e8>
   21010:	ldr	r1, [sp, #72]	; 0x48
   21014:	mov	r4, r0
   21018:	str	r0, [sp, #56]	; 0x38
   2101c:	lsl	r1, r1, #1
   21020:	str	r1, [sp, #72]	; 0x48
   21024:	ldr	r0, [sp, #56]	; 0x38
   21028:	ldr	r0, [r0]
   2102c:	cmp	r0, sl
   21030:	ble	210c0 <__assert_fail@plt+0xf414>
   21034:	mov	ip, r8
   21038:	cmp	r8, #1
   2103c:	blt	210f8 <__assert_fail@plt+0xf44c>
   21040:	mov	r0, r8
   21044:	ands	r1, r8, #3
   21048:	sub	r2, r8, #1
   2104c:	beq	2107c <__assert_fail@plt+0xf3d0>
   21050:	ldr	r0, [sp, #56]	; 0x38
   21054:	mov	r3, r8
   21058:	add	r7, r0, r8, lsl #2
   2105c:	mov	r0, r8
   21060:	mov	r3, r7
   21064:	ldr	r6, [r3, #-4]!
   21068:	subs	r1, r1, #1
   2106c:	sub	r0, r0, #1
   21070:	str	r6, [r7]
   21074:	mov	r7, r3
   21078:	bne	21064 <__assert_fail@plt+0xf3b8>
   2107c:	mov	ip, #0
   21080:	cmp	r2, #3
   21084:	bcc	210f8 <__assert_fail@plt+0xf44c>
   21088:	ldr	r1, [sp, #56]	; 0x38
   2108c:	add	r2, r1, r0, lsl #2
   21090:	sub	r2, r2, #8
   21094:	ldr	r6, [r2]
   21098:	ldr	r1, [r2, #4]
   2109c:	ldmdb	r2, {r3, r7}
   210a0:	sub	r0, r0, #4
   210a4:	cmp	r0, #0
   210a8:	stmda	r2, {r3, r7}
   210ac:	str	r6, [r2, #4]
   210b0:	str	r1, [r2, #8]
   210b4:	sub	r2, r2, #16
   210b8:	bgt	21094 <__assert_fail@plt+0xf3e8>
   210bc:	b	210f8 <__assert_fail@plt+0xf44c>
   210c0:	ldr	r0, [sp, #56]	; 0x38
   210c4:	mov	ip, r8
   210c8:	add	r0, r0, r8, lsl #2
   210cc:	ldr	r2, [r0, #-4]
   210d0:	cmp	r2, sl
   210d4:	ble	210f8 <__assert_fail@plt+0xf44c>
   210d8:	sub	r1, r8, #2
   210dc:	str	r2, [r0]
   210e0:	sub	r1, r1, #1
   210e4:	ldr	r2, [r0, #-8]
   210e8:	sub	r0, r0, #4
   210ec:	cmp	r2, sl
   210f0:	bgt	210dc <__assert_fail@plt+0xf430>
   210f4:	add	ip, r1, #2
   210f8:	ldr	r0, [sp, #56]	; 0x38
   210fc:	mov	r3, r8
   21100:	add	r3, r8, #1
   21104:	ldr	r7, [sp, #80]	; 0x50
   21108:	ldr	r8, [sp, #52]	; 0x34
   2110c:	mov	lr, #1
   21110:	str	sl, [r0, ip, lsl #2]
   21114:	mov	ip, r4
   21118:	b	20af8 <__assert_fail@plt+0xee4c>
   2111c:	ldr	r0, [sp, #72]	; 0x48
   21120:	ldr	r5, [sp, #56]	; 0x38
   21124:	mov	r8, ip
   21128:	mov	r9, r3
   2112c:	cmp	r0, r3
   21130:	bne	21160 <__assert_fail@plt+0xf4b4>
   21134:	ldr	r0, [sp, #72]	; 0x48
   21138:	lsl	r1, r0, #3
   2113c:	mov	r0, r8
   21140:	bl	1c388 <__assert_fail@plt+0xa6dc>
   21144:	cmp	r0, #0
   21148:	beq	21594 <__assert_fail@plt+0xf8e8>
   2114c:	ldr	r1, [sp, #72]	; 0x48
   21150:	mov	r8, r0
   21154:	mov	r5, r0
   21158:	lsl	r1, r1, #1
   2115c:	str	r1, [sp, #72]	; 0x48
   21160:	ldr	r0, [r5]
   21164:	mov	ip, r9
   21168:	cmp	r0, sl
   2116c:	ble	211ec <__assert_fail@plt+0xf540>
   21170:	cmp	r9, #1
   21174:	blt	2121c <__assert_fail@plt+0xf570>
   21178:	mov	r0, r9
   2117c:	ands	r1, r9, #3
   21180:	sub	r2, r9, #1
   21184:	beq	211ac <__assert_fail@plt+0xf500>
   21188:	add	r7, r5, r9, lsl #2
   2118c:	mov	r0, r9
   21190:	mov	r3, r7
   21194:	ldr	r6, [r3, #-4]!
   21198:	subs	r1, r1, #1
   2119c:	sub	r0, r0, #1
   211a0:	str	r6, [r7]
   211a4:	mov	r7, r3
   211a8:	bne	21194 <__assert_fail@plt+0xf4e8>
   211ac:	mov	ip, #0
   211b0:	cmp	r2, #3
   211b4:	bcc	2121c <__assert_fail@plt+0xf570>
   211b8:	add	r2, r5, r0, lsl #2
   211bc:	sub	r2, r2, #8
   211c0:	ldr	r6, [r2]
   211c4:	ldr	r1, [r2, #4]
   211c8:	ldmdb	r2, {r3, r7}
   211cc:	sub	r0, r0, #4
   211d0:	cmp	r0, #0
   211d4:	stmda	r2, {r3, r7}
   211d8:	str	r6, [r2, #4]
   211dc:	str	r1, [r2, #8]
   211e0:	sub	r2, r2, #16
   211e4:	bgt	211c0 <__assert_fail@plt+0xf514>
   211e8:	b	2121c <__assert_fail@plt+0xf570>
   211ec:	add	r0, r5, r9, lsl #2
   211f0:	ldr	r2, [r0, #-4]
   211f4:	cmp	r2, sl
   211f8:	ble	2121c <__assert_fail@plt+0xf570>
   211fc:	sub	r1, r9, #2
   21200:	str	r2, [r0]
   21204:	sub	r1, r1, #1
   21208:	ldr	r2, [r0, #-8]
   2120c:	sub	r0, r0, #4
   21210:	cmp	r2, sl
   21214:	bgt	21200 <__assert_fail@plt+0xf554>
   21218:	add	ip, r1, #2
   2121c:	str	sl, [r5, ip, lsl #2]
   21220:	mov	ip, r8
   21224:	ldr	r8, [sp, #100]	; 0x64
   21228:	mov	r2, r9
   2122c:	add	r2, r9, #1
   21230:	mov	lr, #1
   21234:	b	20e78 <__assert_fail@plt+0xf1cc>
   21238:	mov	r0, ip
   2123c:	bl	1c224 <__assert_fail@plt+0xa578>
   21240:	ldr	r0, [fp, #-184]	; 0xffffff48
   21244:	cmp	r0, r4
   21248:	beq	21250 <__assert_fail@plt+0xf5a4>
   2124c:	bl	1c224 <__assert_fail@plt+0xa578>
   21250:	mov	r0, #16
   21254:	str	r4, [fp, #-184]	; 0xffffff48
   21258:	cmp	r6, #0
   2125c:	str	r0, [fp, #-188]	; 0xffffff44
   21260:	mov	r0, #0
   21264:	str	r0, [fp, #-192]	; 0xffffff40
   21268:	beq	212c0 <__assert_fail@plt+0xf614>
   2126c:	ldr	r1, [r6]
   21270:	ldr	r0, [r6, #8]
   21274:	cmp	r1, #1
   21278:	blt	212b8 <__assert_fail@plt+0xf60c>
   2127c:	mov	r4, #0
   21280:	mov	r5, #0
   21284:	add	r0, r0, r4
   21288:	ldr	r0, [r0, #20]
   2128c:	bl	1c224 <__assert_fail@plt+0xa578>
   21290:	ldr	r0, [r6, #8]
   21294:	add	r0, r0, r4
   21298:	ldr	r0, [r0, #8]
   2129c:	bl	1c224 <__assert_fail@plt+0xa578>
   212a0:	ldr	r1, [r6]
   212a4:	ldr	r0, [r6, #8]
   212a8:	add	r5, r5, #1
   212ac:	add	r4, r4, #24
   212b0:	cmp	r5, r1
   212b4:	blt	21284 <__assert_fail@plt+0xf5d8>
   212b8:	bl	1c224 <__assert_fail@plt+0xa578>
   212bc:	ldr	r8, [fp, #20]
   212c0:	ldrb	r0, [sp, #180]	; 0xb4
   212c4:	cmp	r0, #0
   212c8:	bne	21504 <__assert_fail@plt+0xf858>
   212cc:	ldr	r1, [fp, #-200]	; 0xffffff38
   212d0:	ldr	r2, [sp, #92]	; 0x5c
   212d4:	ldr	r5, [sp, #32]
   212d8:	add	r0, r8, #4
   212dc:	ldr	r3, [r0, #-4]
   212e0:	cmn	r3, #1
   212e4:	bne	21300 <__assert_fail@plt+0xf654>
   212e8:	add	r0, r0, #8
   212ec:	subs	r2, r2, #1
   212f0:	beq	21320 <__assert_fail@plt+0xf674>
   212f4:	ldr	r3, [r0, #-4]
   212f8:	cmn	r3, #1
   212fc:	beq	212e8 <__assert_fail@plt+0xf63c>
   21300:	add	r3, r3, r1
   21304:	str	r3, [r0, #-4]
   21308:	ldr	r3, [r0]
   2130c:	add	r3, r3, r1
   21310:	str	r3, [r0]
   21314:	add	r0, r0, #8
   21318:	subs	r2, r2, #1
   2131c:	bne	212f4 <__assert_fail@plt+0xf648>
   21320:	cmp	r5, #1
   21324:	blt	2133c <__assert_fail@plt+0xf690>
   21328:	ldr	r0, [sp, #92]	; 0x5c
   2132c:	lsl	r2, r5, #3
   21330:	mov	r1, #255	; 0xff
   21334:	add	r0, r8, r0, lsl #3
   21338:	bl	11b2c <memset@plt>
   2133c:	ldr	r0, [r9, #132]	; 0x84
   21340:	mov	r8, #0
   21344:	cmp	r0, #0
   21348:	beq	213c4 <__assert_fail@plt+0xf718>
   2134c:	ldr	r1, [sp, #92]	; 0x5c
   21350:	cmp	r1, #2
   21354:	bcc	213c4 <__assert_fail@plt+0xf718>
   21358:	ldr	r1, [sp, #32]
   2135c:	ldr	r2, [fp, #16]
   21360:	ldr	r6, [fp, #20]
   21364:	mvn	r1, r1
   21368:	add	r1, r1, r2
   2136c:	mov	r2, #0
   21370:	ldr	r3, [r0, r2, lsl #2]
   21374:	cmp	r2, r3
   21378:	bne	21394 <__assert_fail@plt+0xf6e8>
   2137c:	add	r2, r2, #1
   21380:	cmp	r1, r2
   21384:	beq	213c0 <__assert_fail@plt+0xf714>
   21388:	ldr	r3, [r0, r2, lsl #2]
   2138c:	cmp	r2, r3
   21390:	beq	2137c <__assert_fail@plt+0xf6d0>
   21394:	add	r3, r6, r3, lsl #3
   21398:	add	r7, r6, r2, lsl #3
   2139c:	ldr	r3, [r3, #8]
   213a0:	str	r3, [r7, #8]
   213a4:	ldr	r3, [r0, r2, lsl #2]
   213a8:	add	r3, r6, r3, lsl #3
   213ac:	ldr	r3, [r3, #12]
   213b0:	str	r3, [r7, #12]
   213b4:	add	r2, r2, #1
   213b8:	cmp	r1, r2
   213bc:	bne	21388 <__assert_fail@plt+0xf6dc>
   213c0:	mov	r8, #0
   213c4:	ldr	r0, [sp, #204]	; 0xcc
   213c8:	bl	1c224 <__assert_fail@plt+0xa578>
   213cc:	ldr	r0, [sp, #96]	; 0x60
   213d0:	ldr	r0, [r0, #76]	; 0x4c
   213d4:	cmp	r0, #0
   213d8:	beq	213f4 <__assert_fail@plt+0xf748>
   213dc:	add	r0, sp, #104	; 0x68
   213e0:	bl	29bf4 <__assert_fail@plt+0x17f48>
   213e4:	ldr	r0, [sp, #236]	; 0xec
   213e8:	bl	1c224 <__assert_fail@plt+0xa578>
   213ec:	ldr	r0, [sp, #220]	; 0xdc
   213f0:	bl	1c224 <__assert_fail@plt+0xa578>
   213f4:	ldr	r0, [sp, #112]	; 0x70
   213f8:	bl	1c224 <__assert_fail@plt+0xa578>
   213fc:	ldr	r0, [sp, #116]	; 0x74
   21400:	bl	1c224 <__assert_fail@plt+0xa578>
   21404:	ldrb	r0, [sp, #179]	; 0xb3
   21408:	cmp	r0, #0
   2140c:	beq	21418 <__assert_fail@plt+0xf76c>
   21410:	ldr	r0, [sp, #108]	; 0x6c
   21414:	bl	1c224 <__assert_fail@plt+0xa578>
   21418:	mov	r0, r8
   2141c:	sub	sp, fp, #28
   21420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21424:	mov	r6, #0
   21428:	b	1ee80 <__assert_fail@plt+0xd1d4>
   2142c:	mov	r8, #12
   21430:	b	213c4 <__assert_fail@plt+0xf718>
   21434:	mov	r0, r5
   21438:	mov	r5, #0
   2143c:	bl	1c224 <__assert_fail@plt+0xa578>
   21440:	ldr	r0, [fp, #-184]	; 0xffffff48
   21444:	cmp	r0, r4
   21448:	beq	21450 <__assert_fail@plt+0xf7a4>
   2144c:	bl	1c224 <__assert_fail@plt+0xa578>
   21450:	mov	r0, #16
   21454:	str	r4, [fp, #-184]	; 0xffffff48
   21458:	mov	r8, #1
   2145c:	cmp	r5, #0
   21460:	str	r0, [fp, #-188]	; 0xffffff44
   21464:	mov	r0, #0
   21468:	str	r0, [fp, #-192]	; 0xffffff40
   2146c:	bne	213c4 <__assert_fail@plt+0xf718>
   21470:	ldr	r1, [r6]
   21474:	ldr	r0, [r6, #8]
   21478:	cmp	r1, #1
   2147c:	blt	214bc <__assert_fail@plt+0xf810>
   21480:	mov	r5, #0
   21484:	mov	r4, #0
   21488:	add	r0, r0, r5
   2148c:	ldr	r0, [r0, #20]
   21490:	bl	1c224 <__assert_fail@plt+0xa578>
   21494:	ldr	r0, [r6, #8]
   21498:	add	r0, r0, r5
   2149c:	ldr	r0, [r0, #8]
   214a0:	bl	1c224 <__assert_fail@plt+0xa578>
   214a4:	ldr	r1, [r6]
   214a8:	ldr	r0, [r6, #8]
   214ac:	add	r4, r4, #1
   214b0:	add	r5, r5, #24
   214b4:	cmp	r4, r1
   214b8:	blt	21488 <__assert_fail@plt+0xf7dc>
   214bc:	bl	1c224 <__assert_fail@plt+0xa578>
   214c0:	b	213c4 <__assert_fail@plt+0xf718>
   214c4:	mov	r8, r0
   214c8:	b	213c4 <__assert_fail@plt+0xf718>
   214cc:	ldr	r4, [sp, #88]	; 0x58
   214d0:	mov	r0, r5
   214d4:	mov	r5, #1
   214d8:	bl	1c224 <__assert_fail@plt+0xa578>
   214dc:	ldr	r0, [fp, #-184]	; 0xffffff48
   214e0:	cmp	r0, r4
   214e4:	bne	2144c <__assert_fail@plt+0xf7a0>
   214e8:	b	21450 <__assert_fail@plt+0xf7a4>
   214ec:	mov	r0, r6
   214f0:	bl	1c224 <__assert_fail@plt+0xa578>
   214f4:	mov	r0, #0
   214f8:	bl	1c224 <__assert_fail@plt+0xa578>
   214fc:	mov	r8, #12
   21500:	b	213c4 <__assert_fail@plt+0xf718>
   21504:	ldr	r1, [sp, #92]	; 0x5c
   21508:	ldr	r5, [sp, #32]
   2150c:	add	r0, r8, #4
   21510:	ldr	r2, [r0, #-4]
   21514:	cmn	r2, #1
   21518:	bne	21534 <__assert_fail@plt+0xf888>
   2151c:	add	r0, r0, #8
   21520:	subs	r1, r1, #1
   21524:	beq	21320 <__assert_fail@plt+0xf674>
   21528:	ldr	r2, [r0, #-4]
   2152c:	cmn	r2, #1
   21530:	beq	2151c <__assert_fail@plt+0xf870>
   21534:	ldr	r3, [sp, #132]	; 0x84
   21538:	ldr	r7, [sp, #24]
   2153c:	ldr	ip, [sp, #116]	; 0x74
   21540:	cmp	r2, r3
   21544:	mov	r6, r7
   21548:	addne	r6, ip, r2, lsl #2
   2154c:	ldr	r2, [r6]
   21550:	str	r2, [r0, #-4]
   21554:	ldr	r6, [r0]
   21558:	cmp	r6, r3
   2155c:	addne	r7, ip, r6, lsl #2
   21560:	ldr	r3, [r7]
   21564:	ldr	r7, [fp, #-200]	; 0xffffff38
   21568:	add	r3, r3, r7
   2156c:	add	r2, r2, r7
   21570:	str	r3, [r0]
   21574:	str	r2, [r0, #-4]
   21578:	add	r0, r0, #8
   2157c:	subs	r1, r1, #1
   21580:	bne	21528 <__assert_fail@plt+0xf87c>
   21584:	b	21320 <__assert_fail@plt+0xf674>
   21588:	ldr	r5, [sp, #56]	; 0x38
   2158c:	b	21594 <__assert_fail@plt+0xf8e8>
   21590:	mov	r5, r8
   21594:	mov	r0, r5
   21598:	bl	1c224 <__assert_fail@plt+0xa578>
   2159c:	ldr	r0, [fp, #-184]	; 0xffffff48
   215a0:	ldr	r4, [sp, #88]	; 0x58
   215a4:	cmp	r0, r4
   215a8:	beq	215b0 <__assert_fail@plt+0xf904>
   215ac:	bl	1c224 <__assert_fail@plt+0xa578>
   215b0:	mov	r0, #16
   215b4:	str	r4, [fp, #-184]	; 0xffffff48
   215b8:	mov	r8, #12
   215bc:	str	r0, [fp, #-188]	; 0xffffff44
   215c0:	mov	r0, #0
   215c4:	str	r0, [fp, #-192]	; 0xffffff40
   215c8:	ldr	r0, [sp, #68]	; 0x44
   215cc:	cmp	r0, #0
   215d0:	beq	213c4 <__assert_fail@plt+0xf718>
   215d4:	ldr	r0, [sp, #68]	; 0x44
   215d8:	ldr	r1, [r0]
   215dc:	mov	r4, r0
   215e0:	ldr	r0, [r0, #8]
   215e4:	cmp	r1, #1
   215e8:	blt	214bc <__assert_fail@plt+0xf810>
   215ec:	mov	r5, #0
   215f0:	mov	r6, #0
   215f4:	add	r0, r0, r5
   215f8:	ldr	r0, [r0, #20]
   215fc:	bl	1c224 <__assert_fail@plt+0xa578>
   21600:	ldr	r0, [r4, #8]
   21604:	add	r0, r0, r5
   21608:	ldr	r0, [r0, #8]
   2160c:	bl	1c224 <__assert_fail@plt+0xa578>
   21610:	ldr	r1, [r4]
   21614:	ldr	r0, [r4, #8]
   21618:	add	r6, r6, #1
   2161c:	add	r5, r5, #24
   21620:	cmp	r6, r1
   21624:	blt	215f4 <__assert_fail@plt+0xf948>
   21628:	b	214bc <__assert_fail@plt+0xf810>
   2162c:	mov	r8, #1
   21630:	b	213c4 <__assert_fail@plt+0xf718>
   21634:	mov	r5, #0
   21638:	b	21594 <__assert_fail@plt+0xf8e8>
   2163c:	ldr	r5, [sp, #56]	; 0x38
   21640:	mov	r0, #0
   21644:	str	r0, [r6]
   21648:	str	r0, [sl]
   2164c:	b	21594 <__assert_fail@plt+0xf8e8>
   21650:	push	{fp, lr}
   21654:	mov	fp, sp
   21658:	sub	sp, sp, #16
   2165c:	mov	ip, #1
   21660:	str	r2, [sp, #4]
   21664:	str	ip, [sp, #12]
   21668:	mov	ip, #0
   2166c:	str	ip, [sp]
   21670:	ldr	ip, [fp, #8]
   21674:	str	ip, [sp, #8]
   21678:	bl	21684 <__assert_fail@plt+0xf9d8>
   2167c:	mov	sp, fp
   21680:	pop	{fp, pc}
   21684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21688:	add	fp, sp, #28
   2168c:	sub	sp, sp, #60	; 0x3c
   21690:	mvn	r4, #0
   21694:	cmp	r3, #0
   21698:	bmi	218bc <__assert_fail@plt+0xfc10>
   2169c:	mov	r6, r3
   216a0:	mov	r7, r2
   216a4:	cmp	r3, r2
   216a8:	bgt	218bc <__assert_fail@plt+0xfc10>
   216ac:	mov	r5, r0
   216b0:	ldr	r0, [fp, #8]
   216b4:	str	r1, [sp, #44]	; 0x2c
   216b8:	movw	r1, #0
   216bc:	mov	r8, r7
   216c0:	ldr	r4, [r5]
   216c4:	movt	r1, #0
   216c8:	add	r0, r0, r6
   216cc:	cmp	r0, r7
   216d0:	bicle	r8, r0, r0, asr #31
   216d4:	movw	r0, #0
   216d8:	movt	r0, #0
   216dc:	orrs	r9, r1, r0
   216e0:	beq	216ec <__assert_fail@plt+0xfa40>
   216e4:	add	r0, r4, #136	; 0x88
   216e8:	bl	118bc <pthread_mutex_lock@plt>
   216ec:	ldrb	r0, [r5, #28]
   216f0:	ldr	r2, [fp, #16]
   216f4:	cmp	r8, r6
   216f8:	ubfx	r1, r0, #5, #2
   216fc:	str	r4, [sp, #36]	; 0x24
   21700:	str	r6, [fp, #-36]	; 0xffffffdc
   21704:	str	r1, [sp, #40]	; 0x28
   21708:	ble	217a8 <__assert_fail@plt+0xfafc>
   2170c:	tst	r0, #8
   21710:	bne	217a8 <__assert_fail@plt+0xfafc>
   21714:	ldr	r6, [r5, #16]
   21718:	cmp	r6, #0
   2171c:	beq	217a8 <__assert_fail@plt+0xfafc>
   21720:	ldr	r4, [r5]
   21724:	mov	sl, r2
   21728:	mov	r0, r6
   2172c:	mov	r1, #0
   21730:	mov	r2, #256	; 0x100
   21734:	bl	11b2c <memset@plt>
   21738:	ldr	r1, [r4, #36]	; 0x24
   2173c:	mov	r0, r5
   21740:	mov	r2, r6
   21744:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   21748:	ldr	r0, [r4, #36]	; 0x24
   2174c:	ldr	r1, [r4, #40]	; 0x28
   21750:	cmp	r0, r1
   21754:	beq	21768 <__assert_fail@plt+0xfabc>
   21758:	mov	r0, r5
   2175c:	mov	r2, r6
   21760:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   21764:	ldr	r0, [r4, #36]	; 0x24
   21768:	ldr	r1, [r4, #44]	; 0x2c
   2176c:	cmp	r0, r1
   21770:	beq	21784 <__assert_fail@plt+0xfad8>
   21774:	mov	r0, r5
   21778:	mov	r2, r6
   2177c:	bl	1dd74 <__assert_fail@plt+0xc0c8>
   21780:	ldr	r0, [r4, #36]	; 0x24
   21784:	ldr	r1, [r4, #48]	; 0x30
   21788:	cmp	r0, r1
   2178c:	movne	r0, r5
   21790:	movne	r2, r6
   21794:	blne	1dd74 <__assert_fail@plt+0xc0c8>
   21798:	ldrb	r0, [r5, #28]
   2179c:	mov	r2, sl
   217a0:	orr	r0, r0, #8
   217a4:	strb	r0, [r5, #28]
   217a8:	str	r9, [fp, #-40]	; 0xffffffd8
   217ac:	mov	sl, #1
   217b0:	mov	r9, #0
   217b4:	cmp	r2, #0
   217b8:	str	r5, [fp, #-32]	; 0xffffffe0
   217bc:	beq	21810 <__assert_fail@plt+0xfb64>
   217c0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   217c4:	ands	r1, r0, #16
   217c8:	bne	21848 <__assert_fail@plt+0xfb9c>
   217cc:	and	r0, r0, #6
   217d0:	cmp	r0, #4
   217d4:	bne	21838 <__assert_fail@plt+0xfb8c>
   217d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   217dc:	ldr	sl, [r2]
   217e0:	ldr	r0, [r0, #24]
   217e4:	cmp	sl, r0
   217e8:	bhi	21840 <__assert_fail@plt+0xfb94>
   217ec:	cmp	sl, #1
   217f0:	bge	21844 <__assert_fail@plt+0xfb98>
   217f4:	mov	sl, #1
   217f8:	mov	r9, #0
   217fc:	lsl	r0, sl, #3
   21800:	bl	1c2f4 <__assert_fail@plt+0xa648>
   21804:	cmp	r0, #0
   21808:	bne	21858 <__assert_fail@plt+0xfbac>
   2180c:	b	21824 <__assert_fail@plt+0xfb78>
   21810:	ldr	r4, [fp, #-36]	; 0xffffffdc
   21814:	lsl	r0, sl, #3
   21818:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2181c:	cmp	r0, #0
   21820:	bne	21858 <__assert_fail@plt+0xfbac>
   21824:	ldr	r5, [fp, #-40]	; 0xffffffd8
   21828:	mvn	r4, #1
   2182c:	cmp	r5, #0
   21830:	bne	218b0 <__assert_fail@plt+0xfc04>
   21834:	b	218bc <__assert_fail@plt+0xfc10>
   21838:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2183c:	ldr	r0, [r0, #24]
   21840:	add	sl, r0, #1
   21844:	mov	r9, r2
   21848:	lsl	r0, sl, #3
   2184c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   21850:	cmp	r0, #0
   21854:	beq	21824 <__assert_fail@plt+0xfb78>
   21858:	mov	r6, r0
   2185c:	ldr	r0, [fp, #12]
   21860:	str	r8, [sp]
   21864:	ldr	r1, [sp, #44]	; 0x2c
   21868:	mov	r2, r7
   2186c:	mov	r3, r4
   21870:	stmib	sp, {r0, sl}
   21874:	ldr	r0, [sp, #40]	; 0x28
   21878:	str	r6, [sp, #12]
   2187c:	str	r0, [sp, #16]
   21880:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21884:	bl	1eda0 <__assert_fail@plt+0xd0f4>
   21888:	cmp	r0, #0
   2188c:	beq	218c8 <__assert_fail@plt+0xfc1c>
   21890:	cmp	r0, #1
   21894:	mvn	r4, #1
   21898:	mvneq	r4, #0
   2189c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   218a0:	mov	r0, r6
   218a4:	bl	1c224 <__assert_fail@plt+0xa578>
   218a8:	cmp	r5, #0
   218ac:	beq	218bc <__assert_fail@plt+0xfc10>
   218b0:	ldr	r0, [sp, #36]	; 0x24
   218b4:	add	r0, r0, #136	; 0x88
   218b8:	bl	11808 <pthread_mutex_unlock@plt>
   218bc:	mov	r0, r4
   218c0:	sub	sp, fp, #28
   218c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218c8:	cmp	r9, #0
   218cc:	beq	21bb0 <__assert_fail@plt+0xff04>
   218d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   218d4:	add	r8, sl, #1
   218d8:	ldrb	r0, [r0, #28]
   218dc:	ubfx	r0, r0, #1, #2
   218e0:	cmp	r0, #1
   218e4:	beq	21934 <__assert_fail@plt+0xfc88>
   218e8:	cmp	r0, #0
   218ec:	bne	21960 <__assert_fail@plt+0xfcb4>
   218f0:	lsl	r5, r8, #2
   218f4:	mov	r0, r5
   218f8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   218fc:	mov	r7, #0
   21900:	cmp	r0, #0
   21904:	str	r0, [r9, #4]
   21908:	beq	21b94 <__assert_fail@plt+0xfee8>
   2190c:	mov	r0, r5
   21910:	bl	1c2f4 <__assert_fail@plt+0xa648>
   21914:	cmp	r0, #0
   21918:	str	r0, [r9, #8]
   2191c:	beq	21c30 <__assert_fail@plt+0xff84>
   21920:	str	r8, [r9]
   21924:	mov	lr, #1
   21928:	cmp	sl, #1
   2192c:	bge	21970 <__assert_fail@plt+0xfcc4>
   21930:	b	21950 <__assert_fail@plt+0xfca4>
   21934:	ldr	r0, [r9]
   21938:	mov	lr, #1
   2193c:	cmp	r8, r0
   21940:	bhi	21bd8 <__assert_fail@plt+0xff2c>
   21944:	mov	r8, r0
   21948:	cmp	sl, #1
   2194c:	bge	21970 <__assert_fail@plt+0xfcc4>
   21950:	mov	sl, #0
   21954:	cmp	sl, r8
   21958:	bcc	21b70 <__assert_fail@plt+0xfec4>
   2195c:	b	21b90 <__assert_fail@plt+0xfee4>
   21960:	ldr	r8, [r9]
   21964:	mov	lr, #2
   21968:	cmp	sl, #1
   2196c:	blt	21950 <__assert_fail@plt+0xfca4>
   21970:	ldr	r5, [r9, #4]
   21974:	ldr	r4, [r9, #8]
   21978:	mov	r2, #0
   2197c:	cmp	sl, #3
   21980:	str	r6, [sp, #44]	; 0x2c
   21984:	bhi	21a18 <__assert_fail@plt+0xfd6c>
   21988:	tst	sl, #1
   2198c:	mov	r3, r2
   21990:	beq	219ac <__assert_fail@plt+0xfd00>
   21994:	ldr	r0, [sp, #44]	; 0x2c
   21998:	orr	r3, r2, #1
   2199c:	ldr	r1, [r0, r2, lsl #3]!
   219a0:	str	r1, [r5, r2, lsl #2]
   219a4:	ldr	r0, [r0, #4]
   219a8:	str	r0, [r4, r2, lsl #2]
   219ac:	orr	r0, r2, #1
   219b0:	cmp	sl, r0
   219b4:	beq	21b5c <__assert_fail@plt+0xfeb0>
   219b8:	ldr	r7, [sp, #44]	; 0x2c
   219bc:	add	r2, r3, #1
   219c0:	sub	r0, sl, r3
   219c4:	mov	r6, #0
   219c8:	add	r1, r5, r2, lsl #2
   219cc:	add	r2, r4, r2, lsl #2
   219d0:	add	ip, r7, r3, lsl #3
   219d4:	add	r7, ip, #12
   219d8:	ldr	r4, [r7, #-12]
   219dc:	add	r5, r1, r6
   219e0:	subs	r0, r0, #2
   219e4:	str	r4, [r5, #-4]
   219e8:	add	r4, ip, r6, lsl #1
   219ec:	add	r5, r2, r6
   219f0:	ldr	r3, [r4, #4]
   219f4:	str	r3, [r5, #-4]
   219f8:	ldr	r3, [r4, #8]
   219fc:	str	r3, [r1, r6]
   21a00:	ldr	r3, [r7]
   21a04:	add	r7, r7, #16
   21a08:	str	r3, [r2, r6]
   21a0c:	add	r6, r6, #8
   21a10:	bne	219d8 <__assert_fail@plt+0xfd2c>
   21a14:	b	21b5c <__assert_fail@plt+0xfeb0>
   21a18:	ldr	r0, [sp, #44]	; 0x2c
   21a1c:	str	lr, [sp, #40]	; 0x28
   21a20:	add	lr, r4, sl, lsl #2
   21a24:	add	r6, r5, sl, lsl #2
   21a28:	mov	r8, #0
   21a2c:	mov	r1, #0
   21a30:	mov	r3, #0
   21a34:	mov	r2, #0
   21a38:	add	r7, r0, sl, lsl #3
   21a3c:	cmp	r0, lr
   21a40:	movwcc	r8, #1
   21a44:	cmp	r7, r4
   21a48:	movwhi	r1, #1
   21a4c:	cmp	r0, r6
   21a50:	mov	r0, #0
   21a54:	movwcc	r3, #1
   21a58:	cmp	r7, r5
   21a5c:	mov	r7, #0
   21a60:	movwhi	r7, #1
   21a64:	cmp	r4, r6
   21a68:	mov	r6, #0
   21a6c:	movwcc	r6, #1
   21a70:	cmp	r5, lr
   21a74:	movwcc	r0, #1
   21a78:	tst	r0, r6
   21a7c:	bne	21b08 <__assert_fail@plt+0xfe5c>
   21a80:	ands	r0, r7, r3
   21a84:	bne	21b08 <__assert_fail@plt+0xfe5c>
   21a88:	ldr	lr, [sp, #40]	; 0x28
   21a8c:	ands	r0, r1, r8
   21a90:	bne	21988 <__assert_fail@plt+0xfcdc>
   21a94:	bic	r0, sl, #3
   21a98:	mov	r1, #1
   21a9c:	str	r4, [sp, #32]
   21aa0:	str	r0, [sp, #28]
   21aa4:	subs	r0, r0, #4
   21aa8:	add	r0, r1, r0, lsr #2
   21aac:	and	r1, r0, #1
   21ab0:	str	r1, [sp, #24]
   21ab4:	beq	21b1c <__assert_fail@plt+0xfe70>
   21ab8:	ldr	r6, [sp, #44]	; 0x2c
   21abc:	sub	r7, r0, r1
   21ac0:	mov	r8, r4
   21ac4:	mov	r3, #0
   21ac8:	mov	r1, #32
   21acc:	mov	r4, #64	; 0x40
   21ad0:	mov	lr, r5
   21ad4:	add	ip, r6, #32
   21ad8:	vld2.32	{d16-d19}, [r6], r4
   21adc:	add	r2, lr, #16
   21ae0:	add	r0, r8, #16
   21ae4:	subs	r7, r7, #2
   21ae8:	add	r3, r3, #8
   21aec:	vst1.32	{d16-d17}, [lr], r1
   21af0:	vst1.32	{d18-d19}, [r8], r1
   21af4:	vld2.32	{d16-d19}, [ip]
   21af8:	vst1.32	{d16-d17}, [r2]
   21afc:	vst1.32	{d18-d19}, [r0]
   21b00:	bne	21ad4 <__assert_fail@plt+0xfe28>
   21b04:	b	21b20 <__assert_fail@plt+0xfe74>
   21b08:	ldr	lr, [sp, #40]	; 0x28
   21b0c:	tst	sl, #1
   21b10:	mov	r3, r2
   21b14:	bne	21994 <__assert_fail@plt+0xfce8>
   21b18:	b	219ac <__assert_fail@plt+0xfd00>
   21b1c:	mov	r3, #0
   21b20:	ldr	r0, [sp, #24]
   21b24:	ldr	lr, [sp, #40]	; 0x28
   21b28:	ldr	r4, [sp, #32]
   21b2c:	cmp	r0, #0
   21b30:	beq	21b50 <__assert_fail@plt+0xfea4>
   21b34:	ldr	r0, [sp, #44]	; 0x2c
   21b38:	add	r0, r0, r3, lsl #3
   21b3c:	vld2.32	{d16-d19}, [r0]
   21b40:	add	r0, r5, r3, lsl #2
   21b44:	vst1.32	{d16-d17}, [r0]
   21b48:	add	r0, r4, r3, lsl #2
   21b4c:	vst1.32	{d18-d19}, [r0]
   21b50:	ldr	r2, [sp, #28]
   21b54:	cmp	sl, r2
   21b58:	bne	21988 <__assert_fail@plt+0xfcdc>
   21b5c:	ldr	r8, [r9]
   21b60:	ldr	r4, [fp, #-36]	; 0xffffffdc
   21b64:	ldr	r6, [sp, #44]	; 0x2c
   21b68:	cmp	sl, r8
   21b6c:	bcs	21b90 <__assert_fail@plt+0xfee4>
   21b70:	ldmib	r9, {r0, r1}
   21b74:	mvn	r2, #0
   21b78:	str	r2, [r1, sl, lsl #2]
   21b7c:	str	r2, [r0, sl, lsl #2]
   21b80:	add	sl, sl, #1
   21b84:	ldr	r3, [r9]
   21b88:	cmp	sl, r3
   21b8c:	bcc	21b78 <__assert_fail@plt+0xfecc>
   21b90:	mov	r7, lr
   21b94:	ldr	r1, [fp, #-32]	; 0xffffffe0
   21b98:	cmp	r7, #0
   21b9c:	ldrb	r0, [r1, #28]
   21ba0:	and	r0, r0, #249	; 0xf9
   21ba4:	orr	r0, r0, r7, lsl #1
   21ba8:	strb	r0, [r1, #28]
   21bac:	beq	21bd0 <__assert_fail@plt+0xff24>
   21bb0:	ldr	r0, [fp, #20]
   21bb4:	cmp	r0, #0
   21bb8:	beq	21bc8 <__assert_fail@plt+0xff1c>
   21bbc:	ldr	r0, [r6, #4]
   21bc0:	sub	r4, r0, r4
   21bc4:	b	2189c <__assert_fail@plt+0xfbf0>
   21bc8:	ldr	r4, [r6]
   21bcc:	b	2189c <__assert_fail@plt+0xfbf0>
   21bd0:	mvn	r4, #1
   21bd4:	b	2189c <__assert_fail@plt+0xfbf0>
   21bd8:	ldr	r0, [r9, #4]
   21bdc:	lsl	r1, r8, #2
   21be0:	str	r6, [sp, #44]	; 0x2c
   21be4:	mov	r6, r1
   21be8:	bl	1c388 <__assert_fail@plt+0xa6dc>
   21bec:	mov	r7, #0
   21bf0:	cmp	r0, #0
   21bf4:	beq	21c3c <__assert_fail@plt+0xff90>
   21bf8:	mov	r5, r0
   21bfc:	ldr	r0, [r9, #8]
   21c00:	mov	r1, r6
   21c04:	bl	1c388 <__assert_fail@plt+0xa6dc>
   21c08:	cmp	r0, #0
   21c0c:	beq	21c44 <__assert_fail@plt+0xff98>
   21c10:	ldr	r6, [sp, #44]	; 0x2c
   21c14:	str	r8, [r9]
   21c18:	str	r5, [r9, #4]
   21c1c:	str	r0, [r9, #8]
   21c20:	mov	lr, #1
   21c24:	cmp	sl, #1
   21c28:	bge	21970 <__assert_fail@plt+0xfcc4>
   21c2c:	b	21950 <__assert_fail@plt+0xfca4>
   21c30:	ldr	r0, [r9, #4]
   21c34:	bl	1c224 <__assert_fail@plt+0xa578>
   21c38:	b	21b94 <__assert_fail@plt+0xfee8>
   21c3c:	ldr	r6, [sp, #44]	; 0x2c
   21c40:	b	21b94 <__assert_fail@plt+0xfee8>
   21c44:	mov	r0, r5
   21c48:	bl	1c224 <__assert_fail@plt+0xa578>
   21c4c:	ldr	r6, [sp, #44]	; 0x2c
   21c50:	b	21b94 <__assert_fail@plt+0xfee8>
   21c54:	push	{fp, lr}
   21c58:	mov	fp, sp
   21c5c:	sub	sp, sp, #16
   21c60:	mov	ip, #0
   21c64:	str	r2, [sp, #4]
   21c68:	str	ip, [sp, #12]
   21c6c:	ldr	ip, [fp, #12]
   21c70:	str	ip, [sp, #8]
   21c74:	ldr	ip, [fp, #8]
   21c78:	str	ip, [sp]
   21c7c:	bl	21684 <__assert_fail@plt+0xf9d8>
   21c80:	mov	sp, fp
   21c84:	pop	{fp, pc}
   21c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c8c:	add	fp, sp, #28
   21c90:	sub	sp, sp, #20
   21c94:	ldr	r4, [fp, #8]
   21c98:	mov	r8, r1
   21c9c:	mov	r1, r0
   21ca0:	mov	r6, r2
   21ca4:	orr	r0, r4, r2
   21ca8:	ldr	r2, [fp, #20]
   21cac:	orrs	r0, r0, r2
   21cb0:	bmi	21d70 <__assert_fail@plt+0x100c4>
   21cb4:	adds	sl, r6, r4
   21cb8:	bvs	21d70 <__assert_fail@plt+0x100c4>
   21cbc:	mov	r5, #0
   21cc0:	cmp	r4, #1
   21cc4:	blt	21d1c <__assert_fail@plt+0x10070>
   21cc8:	mov	r9, r3
   21ccc:	cmp	r6, #1
   21cd0:	blt	21d24 <__assert_fail@plt+0x10078>
   21cd4:	mov	r0, sl
   21cd8:	mov	r5, r1
   21cdc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   21ce0:	cmp	r0, #0
   21ce4:	beq	21d70 <__assert_fail@plt+0x100c4>
   21ce8:	mov	r1, r8
   21cec:	mov	r2, r6
   21cf0:	mov	r7, r0
   21cf4:	bl	118ec <memcpy@plt>
   21cf8:	add	r0, r7, r6
   21cfc:	mov	r1, r9
   21d00:	mov	r2, r4
   21d04:	bl	118ec <memcpy@plt>
   21d08:	ldr	r2, [fp, #20]
   21d0c:	mov	r1, r5
   21d10:	mov	r4, r7
   21d14:	mov	r5, #0
   21d18:	b	21d2c <__assert_fail@plt+0x10080>
   21d1c:	mov	r7, r8
   21d20:	b	21d28 <__assert_fail@plt+0x1007c>
   21d24:	mov	r7, r9
   21d28:	mov	r4, #0
   21d2c:	ldr	r0, [fp, #16]
   21d30:	ldr	r3, [fp, #12]
   21d34:	mov	r6, #1
   21d38:	str	r2, [sp, #4]
   21d3c:	mov	r2, sl
   21d40:	str	r5, [sp]
   21d44:	str	r6, [sp, #12]
   21d48:	str	r0, [sp, #8]
   21d4c:	mov	r0, r1
   21d50:	mov	r1, r7
   21d54:	bl	21684 <__assert_fail@plt+0xf9d8>
   21d58:	mov	r5, r0
   21d5c:	mov	r0, r4
   21d60:	bl	1c224 <__assert_fail@plt+0xa578>
   21d64:	mov	r0, r5
   21d68:	sub	sp, fp, #28
   21d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d70:	mvn	r0, #1
   21d74:	sub	sp, fp, #28
   21d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d80:	add	fp, sp, #28
   21d84:	sub	sp, sp, #20
   21d88:	ldr	r4, [fp, #8]
   21d8c:	mov	r8, r1
   21d90:	mov	r1, r0
   21d94:	mov	r6, r2
   21d98:	orr	r0, r4, r2
   21d9c:	ldr	r2, [fp, #24]
   21da0:	orrs	r0, r0, r2
   21da4:	bmi	21e64 <__assert_fail@plt+0x101b8>
   21da8:	adds	sl, r6, r4
   21dac:	bvs	21e64 <__assert_fail@plt+0x101b8>
   21db0:	mov	r5, #0
   21db4:	cmp	r4, #1
   21db8:	blt	21e10 <__assert_fail@plt+0x10164>
   21dbc:	mov	r9, r3
   21dc0:	cmp	r6, #1
   21dc4:	blt	21e18 <__assert_fail@plt+0x1016c>
   21dc8:	mov	r0, sl
   21dcc:	mov	r5, r1
   21dd0:	bl	1c2f4 <__assert_fail@plt+0xa648>
   21dd4:	cmp	r0, #0
   21dd8:	beq	21e64 <__assert_fail@plt+0x101b8>
   21ddc:	mov	r1, r8
   21de0:	mov	r2, r6
   21de4:	mov	r7, r0
   21de8:	bl	118ec <memcpy@plt>
   21dec:	add	r0, r7, r6
   21df0:	mov	r1, r9
   21df4:	mov	r2, r4
   21df8:	bl	118ec <memcpy@plt>
   21dfc:	ldr	r2, [fp, #24]
   21e00:	mov	r1, r5
   21e04:	mov	r4, r7
   21e08:	mov	r5, #0
   21e0c:	b	21e20 <__assert_fail@plt+0x10174>
   21e10:	mov	r7, r8
   21e14:	b	21e1c <__assert_fail@plt+0x10170>
   21e18:	mov	r7, r9
   21e1c:	mov	r4, #0
   21e20:	ldr	r0, [fp, #20]
   21e24:	ldr	r6, [fp, #16]
   21e28:	ldr	r3, [fp, #12]
   21e2c:	str	r2, [sp, #4]
   21e30:	mov	r2, sl
   21e34:	str	r5, [sp, #12]
   21e38:	str	r0, [sp, #8]
   21e3c:	mov	r0, r1
   21e40:	mov	r1, r7
   21e44:	str	r6, [sp]
   21e48:	bl	21684 <__assert_fail@plt+0xf9d8>
   21e4c:	mov	r5, r0
   21e50:	mov	r0, r4
   21e54:	bl	1c224 <__assert_fail@plt+0xa578>
   21e58:	mov	r0, r5
   21e5c:	sub	sp, fp, #28
   21e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e64:	mvn	r0, #1
   21e68:	sub	sp, fp, #28
   21e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e70:	ldrb	ip, [r0, #28]
   21e74:	cmp	r2, #0
   21e78:	bic	ip, ip, #6
   21e7c:	orrne	ip, ip, #2
   21e80:	strb	ip, [r0, #28]
   21e84:	ldr	r0, [sp]
   21e88:	moveq	r0, r2
   21e8c:	cmp	r2, #0
   21e90:	moveq	r3, r2
   21e94:	stm	r1, {r2, r3}
   21e98:	str	r0, [r1, #8]
   21e9c:	bx	lr
   21ea0:	push	{r4, sl, fp, lr}
   21ea4:	add	fp, sp, #8
   21ea8:	mov	r4, r0
   21eac:	ldr	r0, [r0, #24]
   21eb0:	bl	1c224 <__assert_fail@plt+0xa578>
   21eb4:	ldr	r0, [r4, #36]	; 0x24
   21eb8:	bl	1c224 <__assert_fail@plt+0xa578>
   21ebc:	ldr	r0, [r4, #40]	; 0x28
   21ec0:	add	r1, r4, #4
   21ec4:	cmp	r0, r1
   21ec8:	beq	21edc <__assert_fail@plt+0x10230>
   21ecc:	ldr	r0, [r0, #8]
   21ed0:	bl	1c224 <__assert_fail@plt+0xa578>
   21ed4:	ldr	r0, [r4, #40]	; 0x28
   21ed8:	bl	1c224 <__assert_fail@plt+0xa578>
   21edc:	ldr	r0, [r4, #12]
   21ee0:	bl	1c224 <__assert_fail@plt+0xa578>
   21ee4:	ldr	r0, [r4, #48]	; 0x30
   21ee8:	bl	1c224 <__assert_fail@plt+0xa578>
   21eec:	ldr	r0, [r4, #44]	; 0x2c
   21ef0:	bl	1c224 <__assert_fail@plt+0xa578>
   21ef4:	mov	r0, r4
   21ef8:	pop	{r4, sl, fp, lr}
   21efc:	b	1c224 <__assert_fail@plt+0xa578>
   21f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f04:	add	fp, sp, #28
   21f08:	sub	sp, sp, #108	; 0x6c
   21f0c:	mov	r3, r0
   21f10:	ldrb	r0, [r0, #74]	; 0x4a
   21f14:	ldr	r9, [r3, #36]	; 0x24
   21f18:	ldr	r1, [r3, #48]	; 0x30
   21f1c:	ldr	r8, [r3, #28]
   21f20:	str	r3, [sp, #20]
   21f24:	cmp	r9, r1
   21f28:	movgt	r9, r1
   21f2c:	cmp	r0, #0
   21f30:	bne	21f4c <__assert_fail@plt+0x102a0>
   21f34:	ldr	r0, [r3, #64]	; 0x40
   21f38:	cmp	r0, #0
   21f3c:	bne	21f4c <__assert_fail@plt+0x102a0>
   21f40:	ldrb	r0, [r3, #76]	; 0x4c
   21f44:	cmp	r0, #0
   21f48:	beq	21f54 <__assert_fail@plt+0x102a8>
   21f4c:	ldr	r7, [r3, #32]
   21f50:	b	22190 <__assert_fail@plt+0x104e4>
   21f54:	cmp	r9, r8
   21f58:	ble	22168 <__assert_fail@plt+0x104bc>
   21f5c:	add	r5, r3, #16
   21f60:	add	sl, sp, #32
   21f64:	str	r9, [sp, #16]
   21f68:	b	21f88 <__assert_fail@plt+0x102dc>
   21f6c:	mov	r8, r9
   21f70:	ldr	r9, [sp, #16]
   21f74:	mov	r3, sl
   21f78:	add	sl, sp, #32
   21f7c:	cmp	r9, r8
   21f80:	mov	r7, r8
   21f84:	ble	22560 <__assert_fail@plt+0x108b4>
   21f88:	ldr	r6, [r3, #24]
   21f8c:	ldr	r4, [r3]
   21f90:	add	r0, r6, r8
   21f94:	ldrb	r7, [r4, r0]
   21f98:	tst	r7, #128	; 0x80
   21f9c:	bne	21ff4 <__assert_fail@plt+0x10348>
   21fa0:	mov	r0, r5
   21fa4:	bl	1191c <mbsinit@plt>
   21fa8:	cmp	r0, #0
   21fac:	beq	21ff4 <__assert_fail@plt+0x10348>
   21fb0:	mov	r0, r7
   21fb4:	bl	11c4c <towupper@plt>
   21fb8:	cmp	r0, #128	; 0x80
   21fbc:	bcs	21fe8 <__assert_fail@plt+0x1033c>
   21fc0:	ldr	r3, [sp, #20]
   21fc4:	ldr	r1, [r3, #4]
   21fc8:	strb	r0, [r1, r8]
   21fcc:	ldr	r1, [r3, #8]
   21fd0:	str	r0, [r1, r8, lsl #2]
   21fd4:	add	r8, r8, #1
   21fd8:	cmp	r9, r8
   21fdc:	mov	r7, r8
   21fe0:	bgt	21f88 <__assert_fail@plt+0x102dc>
   21fe4:	b	22560 <__assert_fail@plt+0x108b4>
   21fe8:	ldr	r0, [sp, #20]
   21fec:	ldr	r4, [r0]
   21ff0:	ldr	r6, [r0, #24]
   21ff4:	ldm	r5, {r0, r1}
   21ff8:	str	r1, [fp, #-36]	; 0xffffffdc
   21ffc:	sub	r2, r9, r8
   22000:	mov	r3, r5
   22004:	str	r0, [fp, #-40]	; 0xffffffd8
   22008:	add	r0, r4, r6
   2200c:	add	r1, r0, r8
   22010:	add	r0, sp, #28
   22014:	bl	1c324 <__assert_fail@plt+0xa678>
   22018:	sub	r4, r0, #1
   2201c:	mov	r6, r0
   22020:	cmn	r4, #4
   22024:	bhi	22110 <__assert_fail@plt+0x10464>
   22028:	ldr	r0, [sp, #28]
   2202c:	bl	11c4c <towupper@plt>
   22030:	mov	r7, r0
   22034:	ldr	r0, [sp, #28]
   22038:	cmp	r7, r0
   2203c:	bne	22060 <__assert_fail@plt+0x103b4>
   22040:	ldr	sl, [sp, #20]
   22044:	ldr	r1, [sl]
   22048:	ldr	r2, [sl, #24]
   2204c:	ldr	r0, [sl, #4]
   22050:	add	r1, r1, r2
   22054:	add	r0, r0, r8
   22058:	add	r1, r1, r8
   2205c:	b	22088 <__assert_fail@plt+0x103dc>
   22060:	mov	r0, sl
   22064:	mov	r1, r7
   22068:	sub	r2, fp, #40	; 0x28
   2206c:	bl	11844 <wcrtomb@plt>
   22070:	cmp	r6, r0
   22074:	bne	22170 <__assert_fail@plt+0x104c4>
   22078:	mov	r1, sl
   2207c:	ldr	sl, [sp, #20]
   22080:	ldr	r0, [sl, #4]
   22084:	add	r0, r0, r8
   22088:	mov	r2, r6
   2208c:	bl	118ec <memcpy@plt>
   22090:	ldr	r0, [sl, #8]
   22094:	add	r9, r8, #1
   22098:	str	r7, [r0, r8, lsl #2]
   2209c:	add	r7, r6, r8
   220a0:	cmp	r9, r7
   220a4:	bge	21f6c <__assert_fail@plt+0x102c0>
   220a8:	add	r0, r0, r8, lsl #2
   220ac:	mvn	r1, #3
   220b0:	add	r2, r1, r6, lsl #2
   220b4:	mov	r1, #255	; 0xff
   220b8:	add	r0, r0, #4
   220bc:	bl	11b2c <memset@plt>
   220c0:	sub	r0, r6, #2
   220c4:	ands	r1, r4, #7
   220c8:	add	sl, sp, #32
   220cc:	beq	220dc <__assert_fail@plt+0x10430>
   220d0:	subs	r1, r1, #1
   220d4:	add	r9, r9, #1
   220d8:	bne	220d0 <__assert_fail@plt+0x10424>
   220dc:	ldr	r3, [sp, #20]
   220e0:	cmp	r0, #7
   220e4:	bcc	220f8 <__assert_fail@plt+0x1044c>
   220e8:	add	r0, r6, r8
   220ec:	sub	r0, r0, r9
   220f0:	subs	r0, r0, #8
   220f4:	bne	220f0 <__assert_fail@plt+0x10444>
   220f8:	ldr	r9, [sp, #16]
   220fc:	mov	r8, r7
   22100:	cmp	r9, r8
   22104:	mov	r7, r8
   22108:	bgt	21f88 <__assert_fail@plt+0x102dc>
   2210c:	b	22560 <__assert_fail@plt+0x108b4>
   22110:	ldr	r3, [sp, #20]
   22114:	add	r0, r6, #1
   22118:	cmp	r0, #2
   2211c:	bcc	22130 <__assert_fail@plt+0x10484>
   22120:	ldr	r0, [r3, #36]	; 0x24
   22124:	ldr	r1, [r3, #48]	; 0x30
   22128:	cmp	r0, r1
   2212c:	blt	2217c <__assert_fail@plt+0x104d0>
   22130:	ldr	r0, [r3, #4]
   22134:	cmn	r6, #1
   22138:	strb	r7, [r0, r8]
   2213c:	ldr	r0, [r3, #8]
   22140:	str	r7, [r0, r8, lsl #2]
   22144:	add	r8, r8, #1
   22148:	bne	21f7c <__assert_fail@plt+0x102d0>
   2214c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22150:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22154:	stm	r5, {r0, r1}
   22158:	cmp	r9, r8
   2215c:	mov	r7, r8
   22160:	bgt	21f88 <__assert_fail@plt+0x102dc>
   22164:	b	22560 <__assert_fail@plt+0x108b4>
   22168:	mov	r7, r8
   2216c:	b	22560 <__assert_fail@plt+0x108b4>
   22170:	ldr	r3, [sp, #20]
   22174:	mov	r7, r8
   22178:	b	22198 <__assert_fail@plt+0x104ec>
   2217c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22180:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22184:	mov	r7, r8
   22188:	stm	r5, {r0, r1}
   2218c:	b	22560 <__assert_fail@plt+0x108b4>
   22190:	cmp	r8, r9
   22194:	bge	22560 <__assert_fail@plt+0x108b4>
   22198:	mov	r4, r3
   2219c:	mov	sl, r9
   221a0:	sub	r2, r9, r8
   221a4:	ldr	r0, [r4, #16]!
   221a8:	ldr	r1, [r4, #4]
   221ac:	str	r0, [fp, #-40]	; 0xffffffd8
   221b0:	str	r1, [fp, #-36]	; 0xffffffdc
   221b4:	ldr	r0, [r4, #48]	; 0x30
   221b8:	cmp	r0, #0
   221bc:	bne	222dc <__assert_fail@plt+0x10630>
   221c0:	ldr	r0, [r3]
   221c4:	ldr	r1, [r3, #24]
   221c8:	mov	r9, r7
   221cc:	add	r0, r0, r1
   221d0:	add	r7, r0, r7
   221d4:	add	r0, sp, #24
   221d8:	mov	r1, r7
   221dc:	mov	r3, r4
   221e0:	bl	1c324 <__assert_fail@plt+0xa678>
   221e4:	mov	r5, r0
   221e8:	sub	r0, r0, #1
   221ec:	cmn	r0, #4
   221f0:	str	r0, [sp, #16]
   221f4:	bhi	22330 <__assert_fail@plt+0x10684>
   221f8:	ldr	r0, [sp, #24]
   221fc:	bl	11c4c <towupper@plt>
   22200:	mov	r6, r0
   22204:	ldr	r0, [sp, #24]
   22208:	cmp	r6, r0
   2220c:	bne	2221c <__assert_fail@plt+0x10570>
   22210:	ldr	r4, [sp, #20]
   22214:	mov	r1, r7
   22218:	b	2223c <__assert_fail@plt+0x10590>
   2221c:	add	r0, sp, #32
   22220:	sub	r2, fp, #40	; 0x28
   22224:	mov	r1, r6
   22228:	bl	11844 <wcrtomb@plt>
   2222c:	cmp	r0, r5
   22230:	bne	223b0 <__assert_fail@plt+0x10704>
   22234:	ldr	r4, [sp, #20]
   22238:	add	r1, sp, #32
   2223c:	ldr	r0, [r4, #4]
   22240:	add	r0, r0, r8
   22244:	mov	r2, r5
   22248:	bl	118ec <memcpy@plt>
   2224c:	ldrb	r0, [r4, #76]	; 0x4c
   22250:	mov	r7, r9
   22254:	mov	r9, sl
   22258:	mov	r3, r4
   2225c:	cmp	r0, #0
   22260:	bne	22464 <__assert_fail@plt+0x107b8>
   22264:	ldr	r0, [r3, #8]
   22268:	add	r4, r5, r8
   2226c:	add	r7, r5, r7
   22270:	str	r6, [r0, r8, lsl #2]
   22274:	add	r6, r8, #1
   22278:	cmp	r6, r4
   2227c:	bge	222d4 <__assert_fail@plt+0x10628>
   22280:	mvn	r1, #3
   22284:	add	r0, r0, r6, lsl #2
   22288:	add	r2, r1, r5, lsl #2
   2228c:	mov	r1, #255	; 0xff
   22290:	bl	11b2c <memset@plt>
   22294:	ldr	r1, [sp, #16]
   22298:	sub	r0, r5, #2
   2229c:	ands	r1, r1, #7
   222a0:	beq	222b0 <__assert_fail@plt+0x10604>
   222a4:	subs	r1, r1, #1
   222a8:	add	r6, r6, #1
   222ac:	bne	222a4 <__assert_fail@plt+0x105f8>
   222b0:	ldr	r3, [sp, #20]
   222b4:	cmp	r0, #7
   222b8:	bcc	222cc <__assert_fail@plt+0x10620>
   222bc:	add	r0, r5, r8
   222c0:	sub	r0, r0, r6
   222c4:	subs	r0, r0, #8
   222c8:	bne	222c4 <__assert_fail@plt+0x10618>
   222cc:	mov	r8, r4
   222d0:	b	22190 <__assert_fail@plt+0x104e4>
   222d4:	mov	r8, r6
   222d8:	b	22190 <__assert_fail@plt+0x104e4>
   222dc:	cmp	r2, #1
   222e0:	mov	r9, r7
   222e4:	add	r7, sp, #32
   222e8:	ldrge	r1, [r3, #80]	; 0x50
   222ec:	cmpge	r1, #1
   222f0:	blt	221d4 <__assert_fail@plt+0x10528>
   222f4:	ldr	r7, [r3, #24]
   222f8:	ldr	r6, [r3]
   222fc:	add	r7, r9, r7
   22300:	add	r3, r6, r7
   22304:	mov	r6, #0
   22308:	add	r7, sp, #32
   2230c:	ldrb	r5, [r3, r6]
   22310:	ldrb	r5, [r0, r5]
   22314:	strb	r5, [r7, r6]
   22318:	add	r6, r6, #1
   2231c:	cmp	r6, r2
   22320:	bge	221d4 <__assert_fail@plt+0x10528>
   22324:	cmp	r6, r1
   22328:	blt	2230c <__assert_fail@plt+0x10660>
   2232c:	b	221d4 <__assert_fail@plt+0x10528>
   22330:	ldr	r3, [sp, #20]
   22334:	add	r0, r5, #1
   22338:	cmp	r0, #2
   2233c:	bcc	22350 <__assert_fail@plt+0x106a4>
   22340:	ldr	r0, [r3, #36]	; 0x24
   22344:	ldr	r1, [r3, #48]	; 0x30
   22348:	cmp	r0, r1
   2234c:	blt	22550 <__assert_fail@plt+0x108a4>
   22350:	ldr	r2, [r3, #24]
   22354:	ldr	r0, [r3]
   22358:	ldr	r1, [r3, #64]	; 0x40
   2235c:	mov	r7, r9
   22360:	add	r2, r2, r9
   22364:	cmp	r1, #0
   22368:	ldrb	r0, [r0, r2]
   2236c:	bne	227e4 <__assert_fail@plt+0x10b38>
   22370:	ldr	r1, [r3, #4]
   22374:	mov	r9, sl
   22378:	strb	r0, [r1, r8]
   2237c:	ldrb	r1, [r3, #76]	; 0x4c
   22380:	cmp	r1, #0
   22384:	bne	227ec <__assert_fail@plt+0x10b40>
   22388:	ldr	r1, [r3, #8]
   2238c:	add	r7, r7, #1
   22390:	cmn	r5, #1
   22394:	str	r0, [r1, r8, lsl #2]
   22398:	add	r8, r8, #1
   2239c:	bne	22190 <__assert_fail@plt+0x104e4>
   223a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   223a4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   223a8:	stm	r4, {r0, r1}
   223ac:	b	22190 <__assert_fail@plt+0x104e4>
   223b0:	ldr	r3, [sp, #20]
   223b4:	mov	r2, r0
   223b8:	cmn	r0, #1
   223bc:	beq	224e0 <__assert_fail@plt+0x10834>
   223c0:	ldr	r1, [r3, #36]	; 0x24
   223c4:	add	r0, r2, r8
   223c8:	cmp	r0, r1
   223cc:	bhi	22550 <__assert_fail@plt+0x108a4>
   223d0:	str	r0, [sp, #12]
   223d4:	ldr	r0, [r3, #12]
   223d8:	mov	r7, r9
   223dc:	cmp	r0, #0
   223e0:	bne	22404 <__assert_fail@plt+0x10758>
   223e4:	lsl	r0, r1, #2
   223e8:	mov	r4, r2
   223ec:	bl	1c2f4 <__assert_fail@plt+0xa648>
   223f0:	ldr	r3, [sp, #20]
   223f4:	mov	r2, r4
   223f8:	cmp	r0, #0
   223fc:	str	r0, [r3, #12]
   22400:	beq	227d8 <__assert_fail@plt+0x10b2c>
   22404:	ldrb	r1, [r3, #76]	; 0x4c
   22408:	ldr	r9, [sp, #16]
   2240c:	cmp	r1, #0
   22410:	bne	22630 <__assert_fail@plt+0x10984>
   22414:	cmp	r8, #0
   22418:	beq	22628 <__assert_fail@plt+0x1097c>
   2241c:	mov	r1, #0
   22420:	cmp	r8, #4
   22424:	bcc	22618 <__assert_fail@plt+0x1096c>
   22428:	bic	r1, r8, #3
   2242c:	stmib	sp, {r2, r7}
   22430:	mov	r2, #1
   22434:	add	r3, pc, #964	; 0x3c4
   22438:	sub	r7, r1, #4
   2243c:	add	r2, r2, r7, lsr #2
   22440:	cmp	r7, #12
   22444:	and	r4, r2, #3
   22448:	bcs	22574 <__assert_fail@plt+0x108c8>
   2244c:	vld1.64	{d16-d17}, [r3 :128]
   22450:	mov	sl, r4
   22454:	mov	r3, #0
   22458:	cmp	sl, #0
   2245c:	bne	225e8 <__assert_fail@plt+0x1093c>
   22460:	b	22608 <__assert_fail@plt+0x1095c>
   22464:	ldr	lr, [r3, #12]
   22468:	mov	r1, #0
   2246c:	cmp	r5, #4
   22470:	bcc	2252c <__assert_fail@plt+0x10880>
   22474:	vdup.32	q8, r7
   22478:	bic	r1, r5, #3
   2247c:	mov	r3, #1
   22480:	mov	r9, r7
   22484:	subs	r2, r1, #4
   22488:	add	r2, r3, r2, lsr #2
   2248c:	add	r3, pc, #876	; 0x36c
   22490:	and	ip, r2, #1
   22494:	beq	224f8 <__assert_fail@plt+0x1084c>
   22498:	sub	r4, r2, ip
   2249c:	add	r2, pc, #860	; 0x35c
   224a0:	vmov.i32	q10, #4	; 0x00000004
   224a4:	vmov.i32	q11, #8	; 0x00000008
   224a8:	add	r7, lr, r8, lsl #2
   224ac:	mov	r3, #0
   224b0:	vld1.64	{d18-d19}, [r2 :128]
   224b4:	mov	r2, #32
   224b8:	vadd.i32	q12, q9, q8
   224bc:	vadd.i32	q9, q9, q11
   224c0:	add	r0, r7, #16
   224c4:	subs	r4, r4, #2
   224c8:	add	r3, r3, #8
   224cc:	vadd.i32	q13, q12, q10
   224d0:	vst1.32	{d24-d25}, [r7], r2
   224d4:	vst1.32	{d26-d27}, [r0]
   224d8:	bne	224b8 <__assert_fail@plt+0x1080c>
   224dc:	b	22500 <__assert_fail@plt+0x10854>
   224e0:	ldr	r0, [r3, #4]
   224e4:	mov	r1, r7
   224e8:	mov	r2, r5
   224ec:	mov	r4, r3
   224f0:	add	r0, r0, r8
   224f4:	b	22248 <__assert_fail@plt+0x1059c>
   224f8:	vld1.64	{d18-d19}, [r3 :128]
   224fc:	mov	r3, #0
   22500:	cmp	ip, #0
   22504:	beq	22518 <__assert_fail@plt+0x1086c>
   22508:	add	r0, r3, r8
   2250c:	vadd.i32	q8, q9, q8
   22510:	add	r0, lr, r0, lsl #2
   22514:	vst1.32	{d16-d17}, [r0]
   22518:	ldr	r3, [sp, #20]
   2251c:	mov	r7, r9
   22520:	cmp	r5, r1
   22524:	mov	r9, sl
   22528:	beq	22264 <__assert_fail@plt+0x105b8>
   2252c:	add	r0, r8, r1
   22530:	add	r2, r7, r1
   22534:	sub	r4, r5, r1
   22538:	add	r0, lr, r0, lsl #2
   2253c:	str	r2, [r0], #4
   22540:	add	r2, r2, #1
   22544:	subs	r4, r4, #1
   22548:	bne	2253c <__assert_fail@plt+0x10890>
   2254c:	b	22264 <__assert_fail@plt+0x105b8>
   22550:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22554:	mov	r7, r9
   22558:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2255c:	stm	r4, {r0, r1}
   22560:	str	r8, [r3, #28]
   22564:	str	r7, [r3, #32]
   22568:	mov	r0, #0
   2256c:	sub	sp, fp, #28
   22570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22574:	mov	sl, r4
   22578:	sub	r4, r2, r4
   2257c:	add	r2, pc, #636	; 0x27c
   22580:	vmov.i32	q9, #12	; 0x0000000c
   22584:	vmov.i32	q10, #8	; 0x00000008
   22588:	vmov.i32	q11, #4	; 0x00000004
   2258c:	vmov.i32	q12, #16	; 0x00000010
   22590:	mov	r3, #0
   22594:	mov	lr, #64	; 0x40
   22598:	mov	r7, r0
   2259c:	vld1.64	{d16-d17}, [r2 :128]
   225a0:	mov	r2, r0
   225a4:	vadd.i32	q13, q8, q9
   225a8:	add	ip, r2, #48	; 0x30
   225ac:	vadd.i32	q14, q8, q10
   225b0:	vadd.i32	q15, q8, q11
   225b4:	subs	r4, r4, #4
   225b8:	add	r3, r3, #16
   225bc:	vst1.32	{d26-d27}, [ip]
   225c0:	vst1.32	{d16-d17}, [r7], lr
   225c4:	vadd.i32	q8, q8, q12
   225c8:	add	ip, r2, #32
   225cc:	add	r2, r2, #16
   225d0:	vst1.32	{d28-d29}, [ip]
   225d4:	vst1.32	{d30-d31}, [r2]
   225d8:	mov	r2, r7
   225dc:	bne	225a4 <__assert_fail@plt+0x108f8>
   225e0:	cmp	sl, #0
   225e4:	beq	22608 <__assert_fail@plt+0x1095c>
   225e8:	vmov.i32	q9, #4	; 0x00000004
   225ec:	add	r2, r0, r3, lsl #2
   225f0:	rsb	r3, sl, #0
   225f4:	vadd.i32	q10, q8, q9
   225f8:	vst1.32	{d16-d17}, [r2]!
   225fc:	adds	r3, r3, #1
   22600:	vorr	q8, q10, q10
   22604:	bcc	225f4 <__assert_fail@plt+0x10948>
   22608:	ldr	r3, [sp, #20]
   2260c:	ldmib	sp, {r2, r7}
   22610:	cmp	r8, r1
   22614:	beq	22628 <__assert_fail@plt+0x1097c>
   22618:	str	r1, [r0, r1, lsl #2]
   2261c:	add	r1, r1, #1
   22620:	cmp	r8, r1
   22624:	bne	22618 <__assert_fail@plt+0x1096c>
   22628:	mov	r0, #1
   2262c:	strb	r0, [r3, #76]	; 0x4c
   22630:	ldr	r0, [r3, #4]
   22634:	add	r1, sp, #32
   22638:	mov	r4, r3
   2263c:	mov	sl, r2
   22640:	add	r0, r0, r8
   22644:	bl	118ec <memcpy@plt>
   22648:	ldr	r0, [r4, #8]
   2264c:	cmp	sl, #2
   22650:	str	r6, [r0, r8, lsl #2]
   22654:	mov	r6, r7
   22658:	ldr	r1, [r4, #12]
   2265c:	str	r7, [r1, r8, lsl #2]
   22660:	bcc	22790 <__assert_fail@plt+0x10ae4>
   22664:	sub	lr, sl, #1
   22668:	mov	ip, r6
   2266c:	mov	r2, #1
   22670:	cmp	lr, #4
   22674:	bcc	226f8 <__assert_fail@plt+0x10a4c>
   22678:	add	r7, sl, r8
   2267c:	add	r4, r8, #1
   22680:	str	ip, [sp, #8]
   22684:	add	r6, r0, r4, lsl #2
   22688:	add	r3, r0, r7, lsl #2
   2268c:	add	r4, r1, r4, lsl #2
   22690:	cmp	r4, r3
   22694:	addcc	r3, r1, r7, lsl #2
   22698:	cmpcc	r6, r3
   2269c:	bcc	226f8 <__assert_fail@plt+0x10a4c>
   226a0:	add	r2, pc, #360	; 0x168
   226a4:	ldr	r3, [sp, #8]
   226a8:	vdup.32	q9, r9
   226ac:	vdup.32	q10, r5
   226b0:	vmov.i32	q12, #4	; 0x00000004
   226b4:	vmov.i8	q13, #255	; 0xff
   226b8:	vld1.64	{d22-d23}, [r2 :128]
   226bc:	vdup.32	q8, r3
   226c0:	bic	r3, lr, #3
   226c4:	orr	r2, r3, #1
   226c8:	mov	r7, r3
   226cc:	vcgt.u32	q14, q10, q11
   226d0:	subs	r7, r7, #4
   226d4:	vbsl	q14, q11, q9
   226d8:	vadd.i32	q11, q11, q12
   226dc:	vadd.i32	q14, q14, q8
   226e0:	vst1.32	{d28-d29}, [r4]!
   226e4:	vst1.32	{d26-d27}, [r6]!
   226e8:	bne	226cc <__assert_fail@plt+0x10a20>
   226ec:	cmp	lr, r3
   226f0:	mov	r6, ip
   226f4:	beq	22790 <__assert_fail@plt+0x10ae4>
   226f8:	tst	sl, #1
   226fc:	mov	r3, r2
   22700:	bne	22728 <__assert_fail@plt+0x10a7c>
   22704:	cmp	r2, r5
   22708:	mov	r3, r9
   2270c:	add	r7, r2, r8
   22710:	movcc	r3, r2
   22714:	add	r3, r3, ip
   22718:	str	r3, [r1, r7, lsl #2]
   2271c:	mvn	r3, #0
   22720:	str	r3, [r0, r7, lsl #2]
   22724:	add	r3, r2, #1
   22728:	add	r2, r2, #1
   2272c:	mov	r6, ip
   22730:	cmp	sl, r2
   22734:	beq	22790 <__assert_fail@plt+0x10ae4>
   22738:	add	r2, r8, r3
   2273c:	add	r2, r2, #1
   22740:	add	r1, r1, r2, lsl #2
   22744:	add	r0, r0, r2, lsl #2
   22748:	mvn	r2, #0
   2274c:	cmp	r3, r5
   22750:	mov	r7, r9
   22754:	movcc	r7, r3
   22758:	add	r7, r7, r6
   2275c:	str	r7, [r1, #-4]
   22760:	add	r7, r3, #1
   22764:	add	r3, r3, #2
   22768:	str	r2, [r0, #-4]
   2276c:	cmp	r7, r5
   22770:	movcs	r7, r9
   22774:	cmp	r3, sl
   22778:	add	r7, r7, r6
   2277c:	str	r7, [r1]
   22780:	str	r2, [r0]
   22784:	add	r1, r1, #8
   22788:	add	r0, r0, #8
   2278c:	bne	2274c <__assert_fail@plt+0x10aa0>
   22790:	ldr	r3, [sp, #20]
   22794:	sub	r1, sl, r5
   22798:	mov	r7, r6
   2279c:	ldr	r0, [r3, #48]	; 0x30
   227a0:	ldr	r2, [r3, #52]	; 0x34
   227a4:	add	r0, r0, r1
   227a8:	cmp	r2, r6
   227ac:	str	r0, [r3, #48]	; 0x30
   227b0:	ble	227c0 <__assert_fail@plt+0x10b14>
   227b4:	ldr	r2, [r3, #56]	; 0x38
   227b8:	add	r1, r2, r1
   227bc:	str	r1, [r3, #56]	; 0x38
   227c0:	ldr	r9, [r3, #36]	; 0x24
   227c4:	ldr	r8, [sp, #12]
   227c8:	add	r7, r5, r7
   227cc:	cmp	r9, r0
   227d0:	movgt	r9, r0
   227d4:	b	22190 <__assert_fail@plt+0x104e4>
   227d8:	mov	r0, #12
   227dc:	sub	sp, fp, #28
   227e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227e4:	ldrb	r0, [r1, r0]
   227e8:	b	22370 <__assert_fail@plt+0x106c4>
   227ec:	ldr	r1, [r3, #12]
   227f0:	str	r7, [r1, r8, lsl #2]
   227f4:	b	22388 <__assert_fail@plt+0x106dc>
   227f8:	nop	{0}
   227fc:	nop	{0}
   22800:	andeq	r0, r0, r0
   22804:	andeq	r0, r0, r1
   22808:	andeq	r0, r0, r2
   2280c:	andeq	r0, r0, r3
   22810:	andeq	r0, r0, r1
   22814:	andeq	r0, r0, r2
   22818:	andeq	r0, r0, r3
   2281c:	andeq	r0, r0, r4
   22820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22824:	add	fp, sp, #28
   22828:	sub	sp, sp, #68	; 0x44
   2282c:	mov	r4, r0
   22830:	ldr	r8, [r0, #28]
   22834:	ldr	r5, [r0, #36]	; 0x24
   22838:	ldr	r0, [r0, #48]	; 0x30
   2283c:	cmp	r5, r0
   22840:	movgt	r5, r0
   22844:	cmp	r5, r8
   22848:	ble	22a20 <__assert_fail@plt+0x10d74>
   2284c:	add	r9, r4, #16
   22850:	mov	r0, sp
   22854:	ldr	r3, [r4, #64]	; 0x40
   22858:	ldm	r9, {r6, sl}
   2285c:	sub	r2, r5, r8
   22860:	cmp	r3, #0
   22864:	bne	22964 <__assert_fail@plt+0x10cb8>
   22868:	ldr	r3, [r4]
   2286c:	ldr	r1, [r4, #24]
   22870:	add	r1, r3, r1
   22874:	add	r1, r1, r8
   22878:	mov	r3, r9
   2287c:	bl	1c324 <__assert_fail@plt+0xa678>
   22880:	mov	r7, r0
   22884:	add	r0, r0, #1
   22888:	cmp	r0, #2
   2288c:	bcc	228a8 <__assert_fail@plt+0x10bfc>
   22890:	cmn	r7, #2
   22894:	bne	228d4 <__assert_fail@plt+0x10c28>
   22898:	ldr	r0, [r4, #36]	; 0x24
   2289c:	ldr	r1, [r4, #48]	; 0x30
   228a0:	cmp	r0, r1
   228a4:	blt	22a1c <__assert_fail@plt+0x10d70>
   228a8:	ldr	r1, [r4, #24]
   228ac:	ldr	r0, [r4]
   228b0:	add	r1, r1, r8
   228b4:	ldrb	r0, [r0, r1]
   228b8:	str	r0, [sp]
   228bc:	ldr	r1, [r4, #64]	; 0x40
   228c0:	cmp	r1, #0
   228c4:	bne	22a10 <__assert_fail@plt+0x10d64>
   228c8:	mov	r7, #1
   228cc:	stm	r9, {r6, sl}
   228d0:	b	228d8 <__assert_fail@plt+0x10c2c>
   228d4:	ldr	r0, [sp]
   228d8:	ldr	r1, [r4, #8]
   228dc:	add	sl, r7, r8
   228e0:	add	r6, r8, #1
   228e4:	cmp	r6, sl
   228e8:	str	r0, [r1, r8, lsl #2]
   228ec:	bge	22950 <__assert_fail@plt+0x10ca4>
   228f0:	mvn	r0, #3
   228f4:	add	r2, r0, r7, lsl #2
   228f8:	add	r0, r1, r8, lsl #2
   228fc:	mov	r1, #255	; 0xff
   22900:	add	r0, r0, #4
   22904:	bl	11b2c <memset@plt>
   22908:	sub	r1, r7, #1
   2290c:	sub	r0, r7, #2
   22910:	ands	r1, r1, #7
   22914:	beq	22924 <__assert_fail@plt+0x10c78>
   22918:	subs	r1, r1, #1
   2291c:	add	r6, r6, #1
   22920:	bne	22918 <__assert_fail@plt+0x10c6c>
   22924:	cmp	r0, #7
   22928:	bcc	2293c <__assert_fail@plt+0x10c90>
   2292c:	add	r0, r7, r8
   22930:	sub	r0, r0, r6
   22934:	subs	r0, r0, #8
   22938:	bne	22934 <__assert_fail@plt+0x10c88>
   2293c:	mov	r8, sl
   22940:	mov	r0, sp
   22944:	cmp	r5, r8
   22948:	bgt	22854 <__assert_fail@plt+0x10ba8>
   2294c:	b	22a20 <__assert_fail@plt+0x10d74>
   22950:	mov	r8, r6
   22954:	mov	r0, sp
   22958:	cmp	r5, r8
   2295c:	bgt	22854 <__assert_fail@plt+0x10ba8>
   22960:	b	22a20 <__assert_fail@plt+0x10d74>
   22964:	cmp	r2, #1
   22968:	add	r1, sp, #4
   2296c:	blt	22878 <__assert_fail@plt+0x10bcc>
   22970:	ldr	r1, [r4, #80]	; 0x50
   22974:	cmp	r1, #1
   22978:	add	r1, sp, #4
   2297c:	blt	22878 <__assert_fail@plt+0x10bcc>
   22980:	ldr	r7, [r4, #24]
   22984:	ldm	r4, {r1, ip}
   22988:	cmp	r2, #2
   2298c:	add	r7, r8, r7
   22990:	ldrb	r1, [r1, r7]
   22994:	ldrb	r1, [r3, r1]
   22998:	strb	r1, [ip, r8]
   2299c:	strb	r1, [sp, #4]
   229a0:	add	r1, sp, #4
   229a4:	blt	22878 <__assert_fail@plt+0x10bcc>
   229a8:	ldr	r1, [r4, #80]	; 0x50
   229ac:	cmp	r1, #2
   229b0:	add	r1, sp, #4
   229b4:	blt	22878 <__assert_fail@plt+0x10bcc>
   229b8:	mov	lr, r0
   229bc:	mov	r0, #1
   229c0:	ldr	r7, [r4, #24]
   229c4:	ldm	r4, {r1, ip}
   229c8:	ldr	r3, [r4, #64]	; 0x40
   229cc:	add	r1, r1, r7
   229d0:	add	r1, r1, r8
   229d4:	ldrb	r1, [r1, r0]
   229d8:	ldrb	r1, [r3, r1]
   229dc:	add	r3, ip, r8
   229e0:	strb	r1, [r3, r0]
   229e4:	add	r3, sp, #4
   229e8:	strb	r1, [r3, r0]
   229ec:	add	r0, r0, #1
   229f0:	cmp	r0, r2
   229f4:	bge	22a04 <__assert_fail@plt+0x10d58>
   229f8:	ldr	r1, [r4, #80]	; 0x50
   229fc:	cmp	r0, r1
   22a00:	blt	229c0 <__assert_fail@plt+0x10d14>
   22a04:	add	r1, sp, #4
   22a08:	mov	r0, lr
   22a0c:	b	22878 <__assert_fail@plt+0x10bcc>
   22a10:	ldrb	r0, [r1, r0]
   22a14:	str	r0, [sp]
   22a18:	b	228c8 <__assert_fail@plt+0x10c1c>
   22a1c:	stm	r9, {r6, sl}
   22a20:	str	r8, [r4, #28]
   22a24:	str	r8, [r4, #32]
   22a28:	sub	sp, fp, #28
   22a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a34:	add	fp, sp, #28
   22a38:	sub	sp, sp, #28
   22a3c:	ldr	r8, [r1]
   22a40:	mov	r7, r0
   22a44:	ldr	r6, [fp, #12]
   22a48:	mov	r5, r2
   22a4c:	str	r1, [sp, #20]
   22a50:	str	r3, [sp, #24]
   22a54:	ldr	r0, [r8, #84]	; 0x54
   22a58:	str	r6, [sp, #4]
   22a5c:	str	r0, [sp, #16]
   22a60:	ldr	r0, [fp, #8]
   22a64:	str	r0, [sp]
   22a68:	mov	r0, r7
   22a6c:	bl	2360c <__assert_fail@plt+0x11960>
   22a70:	mov	r4, r0
   22a74:	cmp	r0, #0
   22a78:	bne	22a88 <__assert_fail@plt+0x10ddc>
   22a7c:	ldr	r0, [r6]
   22a80:	cmp	r0, #0
   22a84:	bne	22dac <__assert_fail@plt+0x11100>
   22a88:	ldrb	r0, [r5, #4]
   22a8c:	cmp	r0, #10
   22a90:	bne	22bdc <__assert_fail@plt+0x10f30>
   22a94:	ldr	r0, [sp, #24]
   22a98:	mov	r9, #0
   22a9c:	orr	sl, r0, #8388608	; 0x800000
   22aa0:	ldr	r0, [fp, #8]
   22aa4:	str	sl, [sp, #12]
   22aa8:	cmp	r0, #0
   22aac:	beq	22c10 <__assert_fail@plt+0x10f64>
   22ab0:	mov	r0, r5
   22ab4:	mov	r1, r7
   22ab8:	mov	r2, sl
   22abc:	bl	22db8 <__assert_fail@plt+0x1110c>
   22ac0:	ldr	r1, [r7, #40]	; 0x28
   22ac4:	mov	r6, #0
   22ac8:	add	r0, r1, r0
   22acc:	str	r0, [r7, #40]	; 0x28
   22ad0:	ldrb	r0, [r5, #4]
   22ad4:	orr	r1, r0, #8
   22ad8:	cmp	r1, #10
   22adc:	bne	22b40 <__assert_fail@plt+0x10e94>
   22ae0:	ldr	r1, [r8, #64]	; 0x40
   22ae4:	cmp	r1, #31
   22ae8:	beq	22bb4 <__assert_fail@plt+0x10f08>
   22aec:	ldr	r0, [r8, #56]	; 0x38
   22af0:	add	r0, r0, r1, lsl #5
   22af4:	add	r2, r1, #1
   22af8:	mov	r1, #10
   22afc:	cmp	r4, #0
   22b00:	str	r2, [r8, #64]	; 0x40
   22b04:	str	r9, [r0, #4]!
   22b08:	stmib	r0, {r4, r6, r9}
   22b0c:	str	r9, [r0, #16]
   22b10:	str	r9, [r0, #20]
   22b14:	str	r1, [r0, #24]
   22b18:	mvn	r1, #0
   22b1c:	str	r1, [r0, #28]
   22b20:	strne	r0, [r4]
   22b24:	cmp	r6, #0
   22b28:	mov	r4, r0
   22b2c:	strne	r0, [r6]
   22b30:	ldrb	r1, [r5, #4]
   22b34:	cmp	r1, #10
   22b38:	beq	22ab0 <__assert_fail@plt+0x10e04>
   22b3c:	b	22cf4 <__assert_fail@plt+0x11048>
   22b40:	cmp	r0, #9
   22b44:	mov	r6, #0
   22b48:	beq	22ae0 <__assert_fail@plt+0x10e34>
   22b4c:	ldr	r0, [sp, #16]
   22b50:	ldr	sl, [r8, #84]	; 0x54
   22b54:	ldr	r1, [sp, #20]
   22b58:	ldr	r3, [sp, #24]
   22b5c:	mov	r2, r5
   22b60:	str	r0, [r8, #84]	; 0x54
   22b64:	ldr	r0, [fp, #8]
   22b68:	str	r0, [sp]
   22b6c:	ldr	r0, [fp, #12]
   22b70:	str	r0, [sp, #4]
   22b74:	mov	r0, r7
   22b78:	bl	2360c <__assert_fail@plt+0x11960>
   22b7c:	mov	r6, r0
   22b80:	cmp	r0, #0
   22b84:	bne	22b98 <__assert_fail@plt+0x10eec>
   22b88:	ldr	r0, [fp, #12]
   22b8c:	ldr	r0, [r0]
   22b90:	cmp	r0, #0
   22b94:	bne	22cfc <__assert_fail@plt+0x11050>
   22b98:	ldr	r0, [r8, #84]	; 0x54
   22b9c:	orr	r0, r0, sl
   22ba0:	ldr	sl, [sp, #12]
   22ba4:	str	r0, [r8, #84]	; 0x54
   22ba8:	ldr	r1, [r8, #64]	; 0x40
   22bac:	cmp	r1, #31
   22bb0:	bne	22aec <__assert_fail@plt+0x10e40>
   22bb4:	mov	r0, #996	; 0x3e4
   22bb8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   22bbc:	cmp	r0, #0
   22bc0:	beq	22da0 <__assert_fail@plt+0x110f4>
   22bc4:	ldr	r1, [r8, #56]	; 0x38
   22bc8:	str	r1, [r0]
   22bcc:	mov	r1, #0
   22bd0:	str	r1, [r8, #64]	; 0x40
   22bd4:	str	r0, [r8, #56]	; 0x38
   22bd8:	b	22af0 <__assert_fail@plt+0x10e44>
   22bdc:	mov	r0, r4
   22be0:	sub	sp, fp, #28
   22be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22be8:	mov	r0, #996	; 0x3e4
   22bec:	bl	1c2f4 <__assert_fail@plt+0xa648>
   22bf0:	cmp	r0, #0
   22bf4:	beq	22da0 <__assert_fail@plt+0x110f4>
   22bf8:	ldr	r1, [r8, #56]	; 0x38
   22bfc:	str	r1, [r0]
   22c00:	mov	r1, #0
   22c04:	str	r1, [r8, #64]	; 0x40
   22c08:	str	r0, [r8, #56]	; 0x38
   22c0c:	b	22ca8 <__assert_fail@plt+0x10ffc>
   22c10:	mov	r0, r5
   22c14:	mov	r1, r7
   22c18:	mov	r2, sl
   22c1c:	bl	22db8 <__assert_fail@plt+0x1110c>
   22c20:	ldr	r1, [r7, #40]	; 0x28
   22c24:	mov	r6, #0
   22c28:	add	r0, r1, r0
   22c2c:	str	r0, [r7, #40]	; 0x28
   22c30:	ldrb	r0, [r5, #4]
   22c34:	orr	r0, r0, #8
   22c38:	cmp	r0, #10
   22c3c:	beq	22c98 <__assert_fail@plt+0x10fec>
   22c40:	ldr	r0, [sp, #16]
   22c44:	ldr	sl, [r8, #84]	; 0x54
   22c48:	ldr	r1, [sp, #20]
   22c4c:	ldr	r3, [sp, #24]
   22c50:	mov	r2, r5
   22c54:	str	r0, [r8, #84]	; 0x54
   22c58:	ldr	r0, [fp, #12]
   22c5c:	str	r9, [sp]
   22c60:	str	r0, [sp, #4]
   22c64:	mov	r0, r7
   22c68:	bl	2360c <__assert_fail@plt+0x11960>
   22c6c:	mov	r6, r0
   22c70:	cmp	r0, #0
   22c74:	bne	22c88 <__assert_fail@plt+0x10fdc>
   22c78:	ldr	r0, [fp, #12]
   22c7c:	ldr	r0, [r0]
   22c80:	cmp	r0, #0
   22c84:	bne	22cfc <__assert_fail@plt+0x11050>
   22c88:	ldr	r0, [r8, #84]	; 0x54
   22c8c:	orr	r0, r0, sl
   22c90:	ldr	sl, [sp, #12]
   22c94:	str	r0, [r8, #84]	; 0x54
   22c98:	ldr	r1, [r8, #64]	; 0x40
   22c9c:	cmp	r1, #31
   22ca0:	beq	22be8 <__assert_fail@plt+0x10f3c>
   22ca4:	ldr	r0, [r8, #56]	; 0x38
   22ca8:	add	r0, r0, r1, lsl #5
   22cac:	add	r2, r1, #1
   22cb0:	mov	r1, #10
   22cb4:	cmp	r4, #0
   22cb8:	str	r2, [r8, #64]	; 0x40
   22cbc:	str	r9, [r0, #4]!
   22cc0:	stmib	r0, {r4, r6, r9}
   22cc4:	str	r9, [r0, #16]
   22cc8:	str	r9, [r0, #20]
   22ccc:	str	r1, [r0, #24]
   22cd0:	mvn	r1, #0
   22cd4:	str	r1, [r0, #28]
   22cd8:	strne	r0, [r4]
   22cdc:	cmp	r6, #0
   22ce0:	mov	r4, r0
   22ce4:	strne	r0, [r6]
   22ce8:	ldrb	r1, [r5, #4]
   22cec:	cmp	r1, #10
   22cf0:	beq	22c10 <__assert_fail@plt+0x10f64>
   22cf4:	sub	sp, fp, #28
   22cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cfc:	cmp	r4, #0
   22d00:	beq	22dac <__assert_fail@plt+0x11100>
   22d04:	movw	r5, #255	; 0xff
   22d08:	movt	r5, #4
   22d0c:	mov	r6, r4
   22d10:	ldr	r4, [r4, #4]
   22d14:	cmp	r4, #0
   22d18:	bne	22d0c <__assert_fail@plt+0x11060>
   22d1c:	ldr	r4, [r6, #8]
   22d20:	cmp	r4, #0
   22d24:	bne	22d0c <__assert_fail@plt+0x11060>
   22d28:	ldr	r0, [r6, #24]
   22d2c:	and	r0, r0, r5
   22d30:	cmp	r0, #3
   22d34:	beq	22d68 <__assert_fail@plt+0x110bc>
   22d38:	cmp	r0, #6
   22d3c:	bne	22d74 <__assert_fail@plt+0x110c8>
   22d40:	ldr	r4, [r6, #20]
   22d44:	ldr	r0, [r4]
   22d48:	bl	1c224 <__assert_fail@plt+0xa578>
   22d4c:	ldr	r0, [r4, #4]
   22d50:	bl	1c224 <__assert_fail@plt+0xa578>
   22d54:	ldr	r0, [r4, #8]
   22d58:	bl	1c224 <__assert_fail@plt+0xa578>
   22d5c:	ldr	r0, [r4, #12]
   22d60:	bl	1c224 <__assert_fail@plt+0xa578>
   22d64:	b	22d6c <__assert_fail@plt+0x110c0>
   22d68:	ldr	r4, [r6, #20]
   22d6c:	mov	r0, r4
   22d70:	bl	1c224 <__assert_fail@plt+0xa578>
   22d74:	ldr	r0, [r6]
   22d78:	cmp	r0, #0
   22d7c:	beq	22dac <__assert_fail@plt+0x11100>
   22d80:	ldr	r4, [r0, #8]
   22d84:	cmp	r4, r6
   22d88:	mov	r6, r0
   22d8c:	beq	22d28 <__assert_fail@plt+0x1107c>
   22d90:	cmp	r4, #0
   22d94:	mov	r6, r0
   22d98:	beq	22d28 <__assert_fail@plt+0x1107c>
   22d9c:	b	22d0c <__assert_fail@plt+0x11060>
   22da0:	ldr	r1, [fp, #12]
   22da4:	mov	r0, #12
   22da8:	str	r0, [r1]
   22dac:	mov	r0, #0
   22db0:	sub	sp, fp, #28
   22db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22db8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22dbc:	add	fp, sp, #24
   22dc0:	sub	sp, sp, #8
   22dc4:	mov	r9, r0
   22dc8:	mov	r7, r1
   22dcc:	ldr	r0, [r1, #40]	; 0x28
   22dd0:	ldr	r1, [r1, #56]	; 0x38
   22dd4:	cmp	r1, r0
   22dd8:	ble	22ec0 <__assert_fail@plt+0x11214>
   22ddc:	ldr	r1, [r7, #4]
   22de0:	mov	r5, r9
   22de4:	mov	r8, r2
   22de8:	ldrb	r6, [r1, r0]
   22dec:	strb	r6, [r5], #4
   22df0:	ldr	r0, [r5]
   22df4:	bic	r1, r0, #6291456	; 0x600000
   22df8:	str	r1, [r5]
   22dfc:	ldr	r3, [r7, #80]	; 0x50
   22e00:	cmp	r3, #2
   22e04:	blt	22e28 <__assert_fail@plt+0x1117c>
   22e08:	ldr	r2, [r7, #28]
   22e0c:	ldr	r1, [r7, #40]	; 0x28
   22e10:	cmp	r1, r2
   22e14:	beq	22e28 <__assert_fail@plt+0x1117c>
   22e18:	ldr	r2, [r7, #8]
   22e1c:	ldr	r1, [r2, r1, lsl #2]
   22e20:	cmn	r1, #1
   22e24:	beq	23304 <__assert_fail@plt+0x11658>
   22e28:	movw	r1, #65280	; 0xff00
   22e2c:	cmp	r6, #92	; 0x5c
   22e30:	movt	r1, #65439	; 0xff9f
   22e34:	bne	22ed8 <__assert_fail@plt+0x1122c>
   22e38:	ldr	r6, [r7, #40]	; 0x28
   22e3c:	ldr	r4, [r7, #48]	; 0x30
   22e40:	add	r2, r6, #1
   22e44:	cmp	r2, r4
   22e48:	bge	22f2c <__assert_fail@plt+0x11280>
   22e4c:	ldrb	r4, [r7, #75]	; 0x4b
   22e50:	cmp	r4, #0
   22e54:	bne	23598 <__assert_fail@plt+0x118ec>
   22e58:	ldr	r3, [r7, #4]
   22e5c:	ldrb	r6, [r3, r2]
   22e60:	and	r0, r0, r1
   22e64:	strb	r6, [r9]
   22e68:	orr	r4, r0, #1
   22e6c:	str	r4, [r9, #4]
   22e70:	ldr	r0, [r7, #80]	; 0x50
   22e74:	cmp	r0, #2
   22e78:	blt	23150 <__assert_fail@plt+0x114a4>
   22e7c:	ldr	r0, [r7, #8]
   22e80:	ldr	r1, [r7, #40]	; 0x28
   22e84:	add	r0, r0, r1, lsl #2
   22e88:	ldr	r4, [r0, #4]
   22e8c:	mov	r0, r4
   22e90:	bl	11afc <iswalnum@plt>
   22e94:	sub	r1, r4, #95	; 0x5f
   22e98:	cmp	r0, #0
   22e9c:	clz	r1, r1
   22ea0:	movwne	r0, #1
   22ea4:	lsr	r1, r1, #5
   22ea8:	orr	r0, r1, r0
   22eac:	ldr	r1, [r5]
   22eb0:	bic	r1, r1, #4194304	; 0x400000
   22eb4:	orr	r0, r1, r0, lsl #22
   22eb8:	uxtb	r1, r6
   22ebc:	b	23174 <__assert_fail@plt+0x114c8>
   22ec0:	mov	r0, #2
   22ec4:	mov	r4, #0
   22ec8:	strb	r0, [r9, #4]
   22ecc:	mov	r0, r4
   22ed0:	sub	sp, fp, #24
   22ed4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22ed8:	and	r0, r0, r1
   22edc:	orr	r4, r0, #1
   22ee0:	str	r4, [r5]
   22ee4:	ldr	r0, [r7, #80]	; 0x50
   22ee8:	cmp	r0, #2
   22eec:	blt	22f38 <__assert_fail@plt+0x1128c>
   22ef0:	ldr	r0, [r7, #8]
   22ef4:	ldr	r1, [r7, #40]	; 0x28
   22ef8:	ldr	r4, [r0, r1, lsl #2]
   22efc:	mov	r0, r4
   22f00:	bl	11afc <iswalnum@plt>
   22f04:	sub	r1, r4, #95	; 0x5f
   22f08:	cmp	r0, #0
   22f0c:	clz	r1, r1
   22f10:	movwne	r0, #1
   22f14:	lsr	r1, r1, #5
   22f18:	orr	r0, r1, r0
   22f1c:	ldr	r1, [r5]
   22f20:	bic	r1, r1, #4194304	; 0x400000
   22f24:	orr	r0, r1, r0, lsl #22
   22f28:	b	22f58 <__assert_fail@plt+0x112ac>
   22f2c:	and	r0, r0, r1
   22f30:	orr	r0, r0, #36	; 0x24
   22f34:	b	23318 <__assert_fail@plt+0x1166c>
   22f38:	bl	11a84 <__ctype_b_loc@plt>
   22f3c:	ldr	r0, [r0]
   22f40:	cmp	r6, #95	; 0x5f
   22f44:	add	r0, r0, r6, lsl #1
   22f48:	ldrh	r0, [r0]
   22f4c:	ubfx	r0, r0, #3, #1
   22f50:	movweq	r0, #1
   22f54:	orr	r0, r4, r0, lsl #22
   22f58:	sub	r1, r6, #10
   22f5c:	mov	r4, #1
   22f60:	str	r0, [r5]
   22f64:	cmp	r1, #115	; 0x73
   22f68:	bhi	2358c <__assert_fail@plt+0x118e0>
   22f6c:	add	r2, pc, #0
   22f70:	ldr	pc, [r2, r1, lsl #2]
   22f74:	andeq	r3, r2, r4, asr #2
   22f78:	andeq	r3, r2, ip, lsl #11
   22f7c:	andeq	r3, r2, ip, lsl #11
   22f80:	andeq	r3, r2, ip, lsl #11
   22f84:	andeq	r3, r2, ip, lsl #11
   22f88:	andeq	r3, r2, ip, lsl #11
   22f8c:	andeq	r3, r2, ip, lsl #11
   22f90:	andeq	r3, r2, ip, lsl #11
   22f94:	andeq	r3, r2, ip, lsl #11
   22f98:	andeq	r3, r2, ip, lsl #11
   22f9c:	andeq	r3, r2, ip, lsl #11
   22fa0:	andeq	r3, r2, ip, lsl #11
   22fa4:	andeq	r3, r2, ip, lsl #11
   22fa8:	andeq	r3, r2, ip, lsl #11
   22fac:	andeq	r3, r2, ip, lsl #11
   22fb0:	andeq	r3, r2, ip, lsl #11
   22fb4:	andeq	r3, r2, ip, lsl #11
   22fb8:	andeq	r3, r2, ip, lsl #11
   22fbc:	andeq	r3, r2, ip, lsl #11
   22fc0:	andeq	r3, r2, ip, lsl #11
   22fc4:	andeq	r3, r2, ip, lsl #11
   22fc8:	andeq	r3, r2, ip, lsl #11
   22fcc:	andeq	r3, r2, ip, lsl #11
   22fd0:	andeq	r3, r2, ip, lsl #11
   22fd4:	andeq	r3, r2, ip, lsl #11
   22fd8:	andeq	r3, r2, ip, lsl #11
   22fdc:	andeq	r3, r2, ip, lsr #6
   22fe0:	andeq	r3, r2, ip, lsl #11
   22fe4:	andeq	r3, r2, ip, lsl #11
   22fe8:	andeq	r3, r2, ip, lsl #11
   22fec:	andeq	r3, r2, r4, lsl #7
   22ff0:	muleq	r2, r0, r3
   22ff4:	muleq	r2, ip, r3
   22ff8:	andeq	r3, r2, r4, lsr #7
   22ffc:	andeq	r3, r2, ip, lsl #11
   23000:	andeq	r3, r2, ip, lsl #11
   23004:			; <UNDEFINED> instruction: 0x000233b4
   23008:	andeq	r3, r2, ip, lsl #11
   2300c:	andeq	r3, r2, ip, lsl #11
   23010:	andeq	r3, r2, ip, lsl #11
   23014:	andeq	r3, r2, ip, lsl #11
   23018:	andeq	r3, r2, ip, lsl #11
   2301c:	andeq	r3, r2, ip, lsl #11
   23020:	andeq	r3, r2, ip, lsl #11
   23024:	andeq	r3, r2, ip, lsl #11
   23028:	andeq	r3, r2, ip, lsl #11
   2302c:	andeq	r3, r2, ip, lsl #11
   23030:	andeq	r3, r2, ip, lsl #11
   23034:	andeq	r3, r2, ip, lsl #11
   23038:	andeq	r3, r2, ip, lsl #11
   2303c:	andeq	r3, r2, ip, lsl #11
   23040:	andeq	r3, r2, ip, lsl #11
   23044:	andeq	r3, r2, ip, lsl #11
   23048:			; <UNDEFINED> instruction: 0x000233bc
   2304c:	andeq	r3, r2, ip, lsl #11
   23050:	andeq	r3, r2, ip, lsl #11
   23054:	andeq	r3, r2, ip, lsl #11
   23058:	andeq	r3, r2, ip, lsl #11
   2305c:	andeq	r3, r2, ip, lsl #11
   23060:	andeq	r3, r2, ip, lsl #11
   23064:	andeq	r3, r2, ip, lsl #11
   23068:	andeq	r3, r2, ip, lsl #11
   2306c:	andeq	r3, r2, ip, lsl #11
   23070:	andeq	r3, r2, ip, lsl #11
   23074:	andeq	r3, r2, ip, lsl #11
   23078:	andeq	r3, r2, ip, lsl #11
   2307c:	andeq	r3, r2, ip, lsl #11
   23080:	andeq	r3, r2, ip, lsl #11
   23084:	andeq	r3, r2, ip, lsl #11
   23088:	andeq	r3, r2, ip, lsl #11
   2308c:	andeq	r3, r2, ip, lsl #11
   23090:	andeq	r3, r2, ip, lsl #11
   23094:	andeq	r3, r2, ip, lsl #11
   23098:	andeq	r3, r2, ip, lsl #11
   2309c:	andeq	r3, r2, ip, lsl #11
   230a0:	andeq	r3, r2, ip, lsl #11
   230a4:	andeq	r3, r2, ip, lsl #11
   230a8:	andeq	r3, r2, ip, lsl #11
   230ac:	andeq	r3, r2, ip, lsl #11
   230b0:	andeq	r3, r2, ip, lsl #11
   230b4:	andeq	r3, r2, ip, lsl #11
   230b8:	andeq	r3, r2, ip, asr #7
   230bc:	andeq	r3, r2, ip, lsl #11
   230c0:	andeq	r3, r2, ip, lsl #11
   230c4:	ldrdeq	r3, [r2], -r4
   230c8:	andeq	r3, r2, ip, lsl #11
   230cc:	andeq	r3, r2, ip, lsl #11
   230d0:	andeq	r3, r2, ip, lsl #11
   230d4:	andeq	r3, r2, ip, lsl #11
   230d8:	andeq	r3, r2, ip, lsl #11
   230dc:	andeq	r3, r2, ip, lsl #11
   230e0:	andeq	r3, r2, ip, lsl #11
   230e4:	andeq	r3, r2, ip, lsl #11
   230e8:	andeq	r3, r2, ip, lsl #11
   230ec:	andeq	r3, r2, ip, lsl #11
   230f0:	andeq	r3, r2, ip, lsl #11
   230f4:	andeq	r3, r2, ip, lsl #11
   230f8:	andeq	r3, r2, ip, lsl #11
   230fc:	andeq	r3, r2, ip, lsl #11
   23100:	andeq	r3, r2, ip, lsl #11
   23104:	andeq	r3, r2, ip, lsl #11
   23108:	andeq	r3, r2, ip, lsl #11
   2310c:	andeq	r3, r2, ip, lsl #11
   23110:	andeq	r3, r2, ip, lsl #11
   23114:	andeq	r3, r2, ip, lsl #11
   23118:	andeq	r3, r2, ip, lsl #11
   2311c:	andeq	r3, r2, ip, lsl #11
   23120:	andeq	r3, r2, ip, lsl #11
   23124:	andeq	r3, r2, ip, lsl #11
   23128:	andeq	r3, r2, ip, lsl #11
   2312c:	andeq	r3, r2, ip, lsl #11
   23130:	andeq	r3, r2, ip, lsl #11
   23134:	andeq	r3, r2, ip, lsl #11
   23138:	andeq	r3, r2, r4, lsl #8
   2313c:	andeq	r3, r2, r4, lsl r4
   23140:	andeq	r3, r2, r8, lsr #8
   23144:	tst	r8, #2048	; 0x800
   23148:	bne	23420 <__assert_fail@plt+0x11774>
   2314c:	b	2358c <__assert_fail@plt+0x118e0>
   23150:	bl	11a84 <__ctype_b_loc@plt>
   23154:	ldr	r0, [r0]
   23158:	uxtb	r1, r6
   2315c:	cmp	r1, #95	; 0x5f
   23160:	add	r0, r0, r1, lsl #1
   23164:	ldrh	r0, [r0]
   23168:	ubfx	r0, r0, #3, #1
   2316c:	movweq	r0, #1
   23170:	orr	r0, r4, r0, lsl #22
   23174:	mvn	r2, #38	; 0x26
   23178:	mov	r4, #2
   2317c:	str	r0, [r5]
   23180:	uxtab	r2, r2, r6
   23184:	cmp	r2, #86	; 0x56
   23188:	bhi	2358c <__assert_fail@plt+0x118e0>
   2318c:	add	r3, pc, #0
   23190:	ldr	pc, [r3, r2, lsl #2]
   23194:	andeq	r3, r2, r4, ror #8
   23198:	andeq	r3, r2, r4, ror r4
   2319c:	andeq	r3, r2, r4, lsl #9
   231a0:	andeq	r3, r2, ip, lsl #11
   231a4:	muleq	r2, r4, r4
   231a8:	andeq	r3, r2, ip, lsl #11
   231ac:	andeq	r3, r2, ip, lsl #11
   231b0:	andeq	r3, r2, ip, lsl #11
   231b4:	andeq	r3, r2, ip, lsl #11
   231b8:	andeq	r3, r2, ip, lsl #11
   231bc:	strdeq	r3, [r2], -r0
   231c0:	strdeq	r3, [r2], -r0
   231c4:	strdeq	r3, [r2], -r0
   231c8:	strdeq	r3, [r2], -r0
   231cc:	strdeq	r3, [r2], -r0
   231d0:	strdeq	r3, [r2], -r0
   231d4:	strdeq	r3, [r2], -r0
   231d8:	strdeq	r3, [r2], -r0
   231dc:	strdeq	r3, [r2], -r0
   231e0:	andeq	r3, r2, ip, lsl #11
   231e4:	andeq	r3, r2, ip, lsl #11
   231e8:	andeq	r3, r2, ip, lsr #9
   231ec:	andeq	r3, r2, ip, lsl #11
   231f0:			; <UNDEFINED> instruction: 0x000234bc
   231f4:	andeq	r3, r2, ip, asr #9
   231f8:	andeq	r3, r2, ip, lsl #11
   231fc:	andeq	r3, r2, ip, lsl #11
   23200:	andeq	r3, r2, r4, ror #9
   23204:	andeq	r3, r2, ip, lsl #11
   23208:	andeq	r3, r2, ip, lsl #11
   2320c:	andeq	r3, r2, ip, lsl #11
   23210:	andeq	r3, r2, ip, lsl #11
   23214:	andeq	r3, r2, ip, lsl #11
   23218:	andeq	r3, r2, ip, lsl #11
   2321c:	andeq	r3, r2, ip, lsl #11
   23220:	andeq	r3, r2, ip, lsl #11
   23224:	andeq	r3, r2, ip, lsl #11
   23228:	andeq	r3, r2, ip, lsl #11
   2322c:	andeq	r3, r2, ip, lsl #11
   23230:	andeq	r3, r2, ip, lsl #11
   23234:	andeq	r3, r2, ip, lsl #11
   23238:	andeq	r3, r2, ip, lsl #11
   2323c:	andeq	r3, r2, ip, lsl #11
   23240:	andeq	r3, r2, ip, lsl #11
   23244:	strdeq	r3, [r2], -r4
   23248:	andeq	r3, r2, ip, lsl #11
   2324c:	andeq	r3, r2, ip, lsl #11
   23250:	andeq	r3, r2, ip, lsl #11
   23254:	andeq	r3, r2, r4, lsl #10
   23258:	andeq	r3, r2, ip, lsl #11
   2325c:	andeq	r3, r2, ip, lsl #11
   23260:	andeq	r3, r2, ip, lsl #11
   23264:	andeq	r3, r2, ip, lsl #11
   23268:	andeq	r3, r2, ip, lsl #11
   2326c:	andeq	r3, r2, ip, lsl #11
   23270:	andeq	r3, r2, ip, lsl #11
   23274:	andeq	r3, r2, ip, lsl #11
   23278:	andeq	r3, r2, r4, lsl r5
   2327c:	andeq	r3, r2, ip, lsl #11
   23280:	andeq	r3, r2, r4, lsr #10
   23284:	andeq	r3, r2, ip, lsl #11
   23288:	andeq	r3, r2, ip, lsl #11
   2328c:	andeq	r3, r2, ip, lsl #11
   23290:	andeq	r3, r2, ip, lsl #11
   23294:	andeq	r3, r2, ip, lsl #11
   23298:	andeq	r3, r2, ip, lsl #11
   2329c:	andeq	r3, r2, ip, lsl #11
   232a0:	andeq	r3, r2, ip, lsl #11
   232a4:	andeq	r3, r2, ip, lsl #11
   232a8:	andeq	r3, r2, ip, lsl #11
   232ac:	andeq	r3, r2, ip, lsl #11
   232b0:	andeq	r3, r2, ip, lsl #11
   232b4:	andeq	r3, r2, ip, lsl #11
   232b8:	andeq	r3, r2, ip, lsl #11
   232bc:	andeq	r3, r2, ip, lsl #11
   232c0:	andeq	r3, r2, ip, lsl #11
   232c4:	andeq	r3, r2, r4, lsr r5
   232c8:	andeq	r3, r2, ip, lsl #11
   232cc:	andeq	r3, r2, ip, lsl #11
   232d0:	andeq	r3, r2, ip, lsl #11
   232d4:	andeq	r3, r2, r4, asr #10
   232d8:	andeq	r3, r2, ip, lsl #11
   232dc:	andeq	r3, r2, ip, lsl #11
   232e0:	andeq	r3, r2, ip, lsl #11
   232e4:	andeq	r3, r2, r4, asr r5
   232e8:	andeq	r3, r2, r8, ror #10
   232ec:	andeq	r3, r2, r4, ror r5
   232f0:	tst	r8, #16384	; 0x4000
   232f4:	bne	2358c <__assert_fail@plt+0x118e0>
   232f8:	sub	r1, r1, #49	; 0x31
   232fc:	mov	r2, #4
   23300:	b	233ec <__assert_fail@plt+0x11740>
   23304:	movw	r1, #65280	; 0xff00
   23308:	movt	r1, #65439	; 0xff9f
   2330c:	and	r0, r0, r1
   23310:	orr	r0, r0, #1
   23314:	orr	r0, r0, #2097152	; 0x200000
   23318:	str	r0, [r5]
   2331c:	mov	r4, #1
   23320:	mov	r0, r4
   23324:	sub	sp, fp, #24
   23328:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2332c:	tst	r8, #8
   23330:	bne	2337c <__assert_fail@plt+0x116d0>
   23334:	ldr	r1, [r7, #40]	; 0x28
   23338:	ldr	r2, [r7, #48]	; 0x30
   2333c:	add	r1, r1, #1
   23340:	cmp	r1, r2
   23344:	beq	2337c <__assert_fail@plt+0x116d0>
   23348:	str	r1, [r7, #40]	; 0x28
   2334c:	mov	r0, sp
   23350:	mov	r1, r7
   23354:	mov	r2, r8
   23358:	bl	22db8 <__assert_fail@plt+0x1110c>
   2335c:	ldr	r0, [r7, #40]	; 0x28
   23360:	sub	r0, r0, #1
   23364:	str	r0, [r7, #40]	; 0x28
   23368:	ldrb	r0, [sp, #4]
   2336c:	sub	r0, r0, #9
   23370:	cmp	r0, #1
   23374:	bhi	2358c <__assert_fail@plt+0x118e0>
   23378:	ldr	r0, [r5]
   2337c:	mov	r1, #32
   23380:	b	233e8 <__assert_fail@plt+0x1173c>
   23384:	tst	r8, #8192	; 0x2000
   23388:	bne	2347c <__assert_fail@plt+0x117d0>
   2338c:	b	2358c <__assert_fail@plt+0x118e0>
   23390:	tst	r8, #8192	; 0x2000
   23394:	bne	2348c <__assert_fail@plt+0x117e0>
   23398:	b	2358c <__assert_fail@plt+0x118e0>
   2339c:	mov	r1, #11
   233a0:	b	23584 <__assert_fail@plt+0x118d8>
   233a4:	movw	r1, #1026	; 0x402
   233a8:	tst	r8, r1
   233ac:	bne	2358c <__assert_fail@plt+0x118e0>
   233b0:	b	234a4 <__assert_fail@plt+0x117f8>
   233b4:	mov	r1, #5
   233b8:	b	23584 <__assert_fail@plt+0x118d8>
   233bc:	movw	r1, #1026	; 0x402
   233c0:	tst	r8, r1
   233c4:	bne	2358c <__assert_fail@plt+0x118e0>
   233c8:	b	234dc <__assert_fail@plt+0x11830>
   233cc:	mov	r1, #20
   233d0:	b	23584 <__assert_fail@plt+0x118d8>
   233d4:	movw	r1, #8
   233d8:	movt	r1, #128	; 0x80
   233dc:	tst	r8, r1
   233e0:	beq	23438 <__assert_fail@plt+0x1178c>
   233e4:	mov	r1, #16
   233e8:	mov	r2, #12
   233ec:	bfi	r0, r2, #0, #8
   233f0:	str	r1, [r9]
   233f4:	str	r0, [r9, #4]
   233f8:	mov	r0, r4
   233fc:	sub	sp, fp, #24
   23400:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23404:	and	r1, r8, #4608	; 0x1200
   23408:	cmp	r1, #4608	; 0x1200
   2340c:	beq	23560 <__assert_fail@plt+0x118b4>
   23410:	b	2358c <__assert_fail@plt+0x118e0>
   23414:	and	r1, r8, #33792	; 0x8400
   23418:	cmp	r1, #32768	; 0x8000
   2341c:	bne	2358c <__assert_fail@plt+0x118e0>
   23420:	mov	r1, #10
   23424:	b	23584 <__assert_fail@plt+0x118d8>
   23428:	and	r1, r8, #4608	; 0x1200
   2342c:	cmp	r1, #4608	; 0x1200
   23430:	beq	23580 <__assert_fail@plt+0x118d4>
   23434:	b	2358c <__assert_fail@plt+0x118e0>
   23438:	ldr	r1, [r7, #40]	; 0x28
   2343c:	cmp	r1, #0
   23440:	beq	233e4 <__assert_fail@plt+0x11738>
   23444:	tst	r8, #2048	; 0x800
   23448:	beq	2358c <__assert_fail@plt+0x118e0>
   2344c:	ldr	r2, [r7, #4]
   23450:	add	r1, r1, r2
   23454:	ldrb	r1, [r1, #-1]
   23458:	cmp	r1, #10
   2345c:	beq	233e4 <__assert_fail@plt+0x11738>
   23460:	b	2358c <__assert_fail@plt+0x118e0>
   23464:	tst	r8, #524288	; 0x80000
   23468:	bne	2358c <__assert_fail@plt+0x118e0>
   2346c:	mov	r1, #128	; 0x80
   23470:	b	233e8 <__assert_fail@plt+0x1173c>
   23474:	tst	r8, #8192	; 0x2000
   23478:	bne	2358c <__assert_fail@plt+0x118e0>
   2347c:	mov	r1, #8
   23480:	b	23584 <__assert_fail@plt+0x118d8>
   23484:	tst	r8, #8192	; 0x2000
   23488:	bne	2358c <__assert_fail@plt+0x118e0>
   2348c:	mov	r1, #9
   23490:	b	23584 <__assert_fail@plt+0x118d8>
   23494:	movw	r1, #1026	; 0x402
   23498:	and	r1, r8, r1
   2349c:	cmp	r1, #2
   234a0:	bne	2358c <__assert_fail@plt+0x118e0>
   234a4:	mov	r1, #18
   234a8:	b	23584 <__assert_fail@plt+0x118d8>
   234ac:	tst	r8, #524288	; 0x80000
   234b0:	bne	2358c <__assert_fail@plt+0x118e0>
   234b4:	mov	r1, #6
   234b8:	b	233e8 <__assert_fail@plt+0x1173c>
   234bc:	tst	r8, #524288	; 0x80000
   234c0:	bne	2358c <__assert_fail@plt+0x118e0>
   234c4:	mov	r1, #9
   234c8:	b	233e8 <__assert_fail@plt+0x1173c>
   234cc:	movw	r1, #1026	; 0x402
   234d0:	and	r1, r8, r1
   234d4:	cmp	r1, #2
   234d8:	bne	2358c <__assert_fail@plt+0x118e0>
   234dc:	mov	r1, #19
   234e0:	b	23584 <__assert_fail@plt+0x118d8>
   234e4:	tst	r8, #524288	; 0x80000
   234e8:	bne	2358c <__assert_fail@plt+0x118e0>
   234ec:	mov	r1, #512	; 0x200
   234f0:	b	233e8 <__assert_fail@plt+0x1173c>
   234f4:	tst	r8, #524288	; 0x80000
   234f8:	bne	2358c <__assert_fail@plt+0x118e0>
   234fc:	mov	r1, #35	; 0x23
   23500:	b	23584 <__assert_fail@plt+0x118d8>
   23504:	tst	r8, #524288	; 0x80000
   23508:	bne	2358c <__assert_fail@plt+0x118e0>
   2350c:	mov	r1, #33	; 0x21
   23510:	b	23584 <__assert_fail@plt+0x118d8>
   23514:	tst	r8, #524288	; 0x80000
   23518:	bne	2358c <__assert_fail@plt+0x118e0>
   2351c:	mov	r1, #64	; 0x40
   23520:	b	233e8 <__assert_fail@plt+0x1173c>
   23524:	tst	r8, #524288	; 0x80000
   23528:	bne	2358c <__assert_fail@plt+0x118e0>
   2352c:	mov	r1, #256	; 0x100
   23530:	b	233e8 <__assert_fail@plt+0x1173c>
   23534:	tst	r8, #524288	; 0x80000
   23538:	bne	2358c <__assert_fail@plt+0x118e0>
   2353c:	mov	r1, #34	; 0x22
   23540:	b	23584 <__assert_fail@plt+0x118d8>
   23544:	tst	r8, #524288	; 0x80000
   23548:	bne	2358c <__assert_fail@plt+0x118e0>
   2354c:	mov	r1, #32
   23550:	b	23584 <__assert_fail@plt+0x118d8>
   23554:	and	r1, r8, #4608	; 0x1200
   23558:	cmp	r1, #512	; 0x200
   2355c:	bne	2358c <__assert_fail@plt+0x118e0>
   23560:	mov	r1, #23
   23564:	b	23584 <__assert_fail@plt+0x118d8>
   23568:	tst	r8, #33792	; 0x8400
   2356c:	bne	2358c <__assert_fail@plt+0x118e0>
   23570:	b	23420 <__assert_fail@plt+0x11774>
   23574:	and	r1, r8, #4608	; 0x1200
   23578:	cmp	r1, #512	; 0x200
   2357c:	bne	2358c <__assert_fail@plt+0x118e0>
   23580:	mov	r1, #24
   23584:	bfi	r0, r1, #0, #8
   23588:	str	r0, [r5]
   2358c:	mov	r0, r4
   23590:	sub	sp, fp, #24
   23594:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23598:	cmp	r3, #2
   2359c:	blt	235cc <__assert_fail@plt+0x11920>
   235a0:	ldr	r3, [r7, #8]
   235a4:	ldr	r4, [r3, r2, lsl #2]
   235a8:	cmn	r4, #1
   235ac:	beq	22e58 <__assert_fail@plt+0x111ac>
   235b0:	ldr	r4, [r7, #28]
   235b4:	add	r6, r6, #2
   235b8:	cmp	r4, r6
   235bc:	beq	235cc <__assert_fail@plt+0x11920>
   235c0:	ldr	r3, [r3, r6, lsl #2]
   235c4:	cmn	r3, #1
   235c8:	beq	22e58 <__assert_fail@plt+0x111ac>
   235cc:	ldrb	r3, [r7, #76]	; 0x4c
   235d0:	mov	r6, r2
   235d4:	cmp	r3, #0
   235d8:	beq	235e4 <__assert_fail@plt+0x11938>
   235dc:	ldr	r6, [r7, #12]
   235e0:	ldr	r6, [r6, r2, lsl #2]
   235e4:	ldr	r4, [r7, #24]
   235e8:	ldr	ip, [r7]
   235ec:	cmp	r3, #0
   235f0:	add	r6, r4, r6
   235f4:	add	r6, ip, r6
   235f8:	ldrsb	r6, [r6]
   235fc:	beq	22e60 <__assert_fail@plt+0x111b4>
   23600:	cmn	r6, #1
   23604:	ble	22e58 <__assert_fail@plt+0x111ac>
   23608:	b	22e60 <__assert_fail@plt+0x111b4>
   2360c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23610:	add	fp, sp, #28
   23614:	sub	sp, sp, #12
   23618:	mov	r4, r1
   2361c:	ldr	r8, [r1]
   23620:	ldr	r1, [fp, #8]
   23624:	ldr	r5, [fp, #12]
   23628:	mov	r7, r2
   2362c:	str	r0, [sp, #8]
   23630:	mov	sl, r3
   23634:	mov	r9, r1
   23638:	str	r1, [sp]
   2363c:	mov	r1, r4
   23640:	str	r5, [sp, #4]
   23644:	bl	23a70 <__assert_fail@plt+0x11dc4>
   23648:	mov	r3, r5
   2364c:	mov	r5, r0
   23650:	mov	r0, #0
   23654:	cmp	r5, #0
   23658:	bne	23668 <__assert_fail@plt+0x119bc>
   2365c:	ldr	r1, [r3]
   23660:	cmp	r1, #0
   23664:	bne	2386c <__assert_fail@plt+0x11bc0>
   23668:	cmp	r9, #0
   2366c:	beq	23760 <__assert_fail@plt+0x11ab4>
   23670:	ldrb	r0, [r7, #4]
   23674:	orr	r1, r0, #8
   23678:	cmp	r1, #10
   2367c:	cmpne	r0, #9
   23680:	beq	23868 <__assert_fail@plt+0x11bbc>
   23684:	ldr	r0, [sp, #8]
   23688:	str	r3, [sp, #4]
   2368c:	mov	r1, r4
   23690:	mov	r2, r7
   23694:	mov	r3, sl
   23698:	str	r9, [sp]
   2369c:	bl	23a70 <__assert_fail@plt+0x11dc4>
   236a0:	ldr	r3, [fp, #12]
   236a4:	cmp	r5, #0
   236a8:	mov	r2, r5
   236ac:	mov	r6, r0
   236b0:	movwne	r2, #1
   236b4:	cmp	r0, #0
   236b8:	bne	236c8 <__assert_fail@plt+0x11a1c>
   236bc:	ldr	r1, [r3]
   236c0:	cmp	r1, #0
   236c4:	bne	23874 <__assert_fail@plt+0x11bc8>
   236c8:	cmp	r5, #0
   236cc:	cmpne	r6, #0
   236d0:	bne	236e0 <__assert_fail@plt+0x11a34>
   236d4:	cmp	r5, #0
   236d8:	moveq	r5, r6
   236dc:	b	23670 <__assert_fail@plt+0x119c4>
   236e0:	ldr	r1, [r8, #64]	; 0x40
   236e4:	cmp	r1, #31
   236e8:	beq	23734 <__assert_fail@plt+0x11a88>
   236ec:	ldr	r0, [r8, #56]	; 0x38
   236f0:	add	r0, r0, r1, lsl #5
   236f4:	add	r2, r1, #1
   236f8:	mov	r1, #0
   236fc:	str	r2, [r8, #64]	; 0x40
   23700:	str	r1, [r0, #4]!
   23704:	stmib	r0, {r5, r6}
   23708:	str	r1, [r0, #12]
   2370c:	str	r1, [r0, #16]
   23710:	str	r1, [r0, #20]
   23714:	mov	r1, #16
   23718:	str	r1, [r0, #24]
   2371c:	mvn	r1, #0
   23720:	str	r1, [r0, #28]
   23724:	str	r0, [r5]
   23728:	str	r0, [r6]
   2372c:	mov	r5, r0
   23730:	b	23670 <__assert_fail@plt+0x119c4>
   23734:	mov	r0, #996	; 0x3e4
   23738:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2373c:	cmp	r0, #0
   23740:	beq	23920 <__assert_fail@plt+0x11c74>
   23744:	ldr	r1, [r8, #56]	; 0x38
   23748:	ldr	r3, [fp, #12]
   2374c:	str	r1, [r0]
   23750:	mov	r1, #0
   23754:	str	r1, [r8, #64]	; 0x40
   23758:	str	r0, [r8, #56]	; 0x38
   2375c:	b	236f0 <__assert_fail@plt+0x11a44>
   23760:	mov	r9, #0
   23764:	ldrb	r0, [r7, #4]
   23768:	orr	r0, r0, #8
   2376c:	cmp	r0, #10
   23770:	bne	23790 <__assert_fail@plt+0x11ae4>
   23774:	b	23868 <__assert_fail@plt+0x11bbc>
   23778:	cmp	r5, #0
   2377c:	moveq	r5, r6
   23780:	ldrb	r0, [r7, #4]
   23784:	orr	r0, r0, #8
   23788:	cmp	r0, #10
   2378c:	beq	23868 <__assert_fail@plt+0x11bbc>
   23790:	ldr	r0, [sp, #8]
   23794:	str	r3, [sp, #4]
   23798:	mov	r1, r4
   2379c:	mov	r2, r7
   237a0:	mov	r3, sl
   237a4:	str	r9, [sp]
   237a8:	bl	23a70 <__assert_fail@plt+0x11dc4>
   237ac:	ldr	r3, [fp, #12]
   237b0:	cmp	r5, #0
   237b4:	mov	r2, r5
   237b8:	mov	r6, r0
   237bc:	movwne	r2, #1
   237c0:	cmp	r0, #0
   237c4:	bne	237d4 <__assert_fail@plt+0x11b28>
   237c8:	ldr	r1, [r3]
   237cc:	cmp	r1, #0
   237d0:	bne	23874 <__assert_fail@plt+0x11bc8>
   237d4:	cmp	r5, #0
   237d8:	cmpne	r6, #0
   237dc:	beq	23778 <__assert_fail@plt+0x11acc>
   237e0:	ldr	r1, [r8, #64]	; 0x40
   237e4:	cmp	r1, #31
   237e8:	beq	2383c <__assert_fail@plt+0x11b90>
   237ec:	ldr	r0, [r8, #56]	; 0x38
   237f0:	add	r0, r0, r1, lsl #5
   237f4:	add	r2, r1, #1
   237f8:	mov	r1, #16
   237fc:	str	r2, [r8, #64]	; 0x40
   23800:	str	r9, [r0, #4]!
   23804:	stmib	r0, {r5, r6, r9}
   23808:	str	r9, [r0, #16]
   2380c:	str	r9, [r0, #20]
   23810:	str	r1, [r0, #24]
   23814:	mvn	r1, #0
   23818:	str	r1, [r0, #28]
   2381c:	str	r0, [r5]
   23820:	str	r0, [r6]
   23824:	mov	r5, r0
   23828:	ldrb	r0, [r7, #4]
   2382c:	orr	r0, r0, #8
   23830:	cmp	r0, #10
   23834:	bne	23790 <__assert_fail@plt+0x11ae4>
   23838:	b	23868 <__assert_fail@plt+0x11bbc>
   2383c:	mov	r0, #996	; 0x3e4
   23840:	bl	1c2f4 <__assert_fail@plt+0xa648>
   23844:	cmp	r0, #0
   23848:	beq	23920 <__assert_fail@plt+0x11c74>
   2384c:	ldr	r1, [r8, #56]	; 0x38
   23850:	ldr	r3, [fp, #12]
   23854:	str	r1, [r0]
   23858:	mov	r1, #0
   2385c:	str	r1, [r8, #64]	; 0x40
   23860:	str	r0, [r8, #56]	; 0x38
   23864:	b	237f0 <__assert_fail@plt+0x11b44>
   23868:	mov	r0, r5
   2386c:	sub	sp, fp, #28
   23870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23874:	mov	r0, #0
   23878:	cmp	r2, #0
   2387c:	beq	2386c <__assert_fail@plt+0x11bc0>
   23880:	movw	r6, #255	; 0xff
   23884:	movt	r6, #4
   23888:	mov	r7, r5
   2388c:	ldr	r5, [r5, #4]
   23890:	cmp	r5, #0
   23894:	bne	23888 <__assert_fail@plt+0x11bdc>
   23898:	ldr	r5, [r7, #8]
   2389c:	cmp	r5, #0
   238a0:	bne	23888 <__assert_fail@plt+0x11bdc>
   238a4:	ldr	r1, [r7, #24]
   238a8:	and	r1, r1, r6
   238ac:	cmp	r1, #3
   238b0:	beq	238e4 <__assert_fail@plt+0x11c38>
   238b4:	cmp	r1, #6
   238b8:	bne	238f4 <__assert_fail@plt+0x11c48>
   238bc:	ldr	r4, [r7, #20]
   238c0:	ldr	r0, [r4]
   238c4:	bl	1c224 <__assert_fail@plt+0xa578>
   238c8:	ldr	r0, [r4, #4]
   238cc:	bl	1c224 <__assert_fail@plt+0xa578>
   238d0:	ldr	r0, [r4, #8]
   238d4:	bl	1c224 <__assert_fail@plt+0xa578>
   238d8:	ldr	r0, [r4, #12]
   238dc:	bl	1c224 <__assert_fail@plt+0xa578>
   238e0:	b	238e8 <__assert_fail@plt+0x11c3c>
   238e4:	ldr	r4, [r7, #20]
   238e8:	mov	r0, r4
   238ec:	bl	1c224 <__assert_fail@plt+0xa578>
   238f0:	mov	r0, #0
   238f4:	ldr	r1, [r7]
   238f8:	cmp	r1, #0
   238fc:	beq	2386c <__assert_fail@plt+0x11bc0>
   23900:	ldr	r5, [r1, #8]
   23904:	cmp	r5, r7
   23908:	mov	r7, r1
   2390c:	beq	238a4 <__assert_fail@plt+0x11bf8>
   23910:	cmp	r5, #0
   23914:	mov	r7, r1
   23918:	beq	238a4 <__assert_fail@plt+0x11bf8>
   2391c:	b	23888 <__assert_fail@plt+0x11bdc>
   23920:	ldr	r1, [fp, #12]
   23924:	movw	r8, #255	; 0xff
   23928:	movt	r8, #4
   2392c:	mov	r7, r6
   23930:	ldr	r6, [r6, #4]
   23934:	cmp	r6, #0
   23938:	bne	2392c <__assert_fail@plt+0x11c80>
   2393c:	ldr	r6, [r7, #8]
   23940:	cmp	r6, #0
   23944:	bne	2392c <__assert_fail@plt+0x11c80>
   23948:	ldr	r0, [r7, #24]
   2394c:	and	r0, r0, r8
   23950:	cmp	r0, #3
   23954:	beq	23988 <__assert_fail@plt+0x11cdc>
   23958:	cmp	r0, #6
   2395c:	bne	23998 <__assert_fail@plt+0x11cec>
   23960:	ldr	r4, [r7, #20]
   23964:	ldr	r0, [r4]
   23968:	bl	1c224 <__assert_fail@plt+0xa578>
   2396c:	ldr	r0, [r4, #4]
   23970:	bl	1c224 <__assert_fail@plt+0xa578>
   23974:	ldr	r0, [r4, #8]
   23978:	bl	1c224 <__assert_fail@plt+0xa578>
   2397c:	ldr	r0, [r4, #12]
   23980:	bl	1c224 <__assert_fail@plt+0xa578>
   23984:	b	2398c <__assert_fail@plt+0x11ce0>
   23988:	ldr	r4, [r7, #20]
   2398c:	mov	r0, r4
   23990:	bl	1c224 <__assert_fail@plt+0xa578>
   23994:	ldr	r1, [fp, #12]
   23998:	ldr	r0, [r7]
   2399c:	cmp	r0, #0
   239a0:	beq	239c4 <__assert_fail@plt+0x11d18>
   239a4:	ldr	r6, [r0, #8]
   239a8:	cmp	r6, r7
   239ac:	mov	r7, r0
   239b0:	beq	23948 <__assert_fail@plt+0x11c9c>
   239b4:	cmp	r6, #0
   239b8:	mov	r7, r0
   239bc:	beq	23948 <__assert_fail@plt+0x11c9c>
   239c0:	b	2392c <__assert_fail@plt+0x11c80>
   239c4:	mov	r6, r5
   239c8:	ldr	r5, [r5, #4]
   239cc:	cmp	r5, #0
   239d0:	bne	239c4 <__assert_fail@plt+0x11d18>
   239d4:	ldr	r5, [r6, #8]
   239d8:	cmp	r5, #0
   239dc:	bne	239c4 <__assert_fail@plt+0x11d18>
   239e0:	ldr	r0, [r6, #24]
   239e4:	and	r0, r0, r8
   239e8:	cmp	r0, #3
   239ec:	beq	23a20 <__assert_fail@plt+0x11d74>
   239f0:	cmp	r0, #6
   239f4:	bne	23a30 <__assert_fail@plt+0x11d84>
   239f8:	ldr	r4, [r6, #20]
   239fc:	ldr	r0, [r4]
   23a00:	bl	1c224 <__assert_fail@plt+0xa578>
   23a04:	ldr	r0, [r4, #4]
   23a08:	bl	1c224 <__assert_fail@plt+0xa578>
   23a0c:	ldr	r0, [r4, #8]
   23a10:	bl	1c224 <__assert_fail@plt+0xa578>
   23a14:	ldr	r0, [r4, #12]
   23a18:	bl	1c224 <__assert_fail@plt+0xa578>
   23a1c:	b	23a24 <__assert_fail@plt+0x11d78>
   23a20:	ldr	r4, [r6, #20]
   23a24:	mov	r0, r4
   23a28:	bl	1c224 <__assert_fail@plt+0xa578>
   23a2c:	ldr	r1, [fp, #12]
   23a30:	ldr	r0, [r6]
   23a34:	cmp	r0, #0
   23a38:	beq	23a5c <__assert_fail@plt+0x11db0>
   23a3c:	ldr	r5, [r0, #8]
   23a40:	cmp	r5, r6
   23a44:	mov	r6, r0
   23a48:	beq	239e0 <__assert_fail@plt+0x11d34>
   23a4c:	cmp	r5, #0
   23a50:	mov	r6, r0
   23a54:	beq	239e0 <__assert_fail@plt+0x11d34>
   23a58:	b	239c4 <__assert_fail@plt+0x11d18>
   23a5c:	mov	r0, #12
   23a60:	str	r0, [r1]
   23a64:	mov	r0, #0
   23a68:	sub	sp, fp, #28
   23a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a74:	add	fp, sp, #28
   23a78:	sub	sp, sp, #156	; 0x9c
   23a7c:	mov	r5, r0
   23a80:	mov	lr, r2
   23a84:	ldr	r0, [r2, #4]
   23a88:	ldr	r2, [fp, #12]
   23a8c:	mov	r7, r1
   23a90:	mvn	r1, #0
   23a94:	mov	r9, #0
   23a98:	mov	ip, r3
   23a9c:	ldr	sl, [r7]
   23aa0:	str	r2, [sp, #20]
   23aa4:	uxtab	r1, r1, r0
   23aa8:	ldr	r6, [fp, #8]
   23aac:	add	r2, pc, #12
   23ab0:	str	r5, [sp, #28]
   23ab4:	str	r3, [sp, #48]	; 0x30
   23ab8:	str	lr, [sp, #44]	; 0x2c
   23abc:	ldr	pc, [r2, r1, lsl #2]
   23ac0:	ldrdeq	r3, [r2], -r8
   23ac4:	andeq	r5, r2, r8, lsr #22
   23ac8:			; <UNDEFINED> instruction: 0x000261bc
   23acc:	andeq	r3, r2, r0, lsr #31
   23ad0:	andeq	r4, r2, r0, lsr #32
   23ad4:			; <UNDEFINED> instruction: 0x000261bc
   23ad8:			; <UNDEFINED> instruction: 0x000261bc
   23adc:	andeq	r4, r2, r8, lsl #1
   23ae0:	andeq	r3, r2, r0, ror fp
   23ae4:	andeq	r5, r2, r8, lsr #22
   23ae8:	andeq	r3, r2, r0, ror #22
   23aec:	andeq	r3, r2, r4, ror #24
   23af0:			; <UNDEFINED> instruction: 0x000261bc
   23af4:			; <UNDEFINED> instruction: 0x000261bc
   23af8:			; <UNDEFINED> instruction: 0x000261bc
   23afc:			; <UNDEFINED> instruction: 0x000261bc
   23b00:			; <UNDEFINED> instruction: 0x000261bc
   23b04:	andeq	r3, r2, r0, ror #22
   23b08:	andeq	r3, r2, r0, ror #22
   23b0c:	andeq	r3, r2, r4, ror #26
   23b10:			; <UNDEFINED> instruction: 0x000261bc
   23b14:			; <UNDEFINED> instruction: 0x000261bc
   23b18:	andeq	r4, r2, ip, lsl #2
   23b1c:	andeq	r3, r2, r0, lsl #23
   23b20:			; <UNDEFINED> instruction: 0x000261bc
   23b24:			; <UNDEFINED> instruction: 0x000261bc
   23b28:			; <UNDEFINED> instruction: 0x000261bc
   23b2c:			; <UNDEFINED> instruction: 0x000261bc
   23b30:			; <UNDEFINED> instruction: 0x000261bc
   23b34:			; <UNDEFINED> instruction: 0x000261bc
   23b38:			; <UNDEFINED> instruction: 0x000261bc
   23b3c:	ldrdeq	r3, [r2], -ip
   23b40:	ldrdeq	r3, [r2], -ip
   23b44:	strdeq	r3, [r2], -ip
   23b48:	strdeq	r3, [r2], -ip
   23b4c:	andeq	r4, r2, ip, lsl r1
   23b50:	andeq	r0, r0, r0
   23b54:	mvnseq	r0, #0
   23b58:			; <UNDEFINED> instruction: 0x87fffffe
   23b5c:			; <UNDEFINED> instruction: 0x07fffffe
   23b60:	tst	ip, #32
   23b64:	bne	24114 <__assert_fail@plt+0x12468>
   23b68:	tst	ip, #16
   23b6c:	bne	2412c <__assert_fail@plt+0x12480>
   23b70:	tst	ip, #131072	; 0x20000
   23b74:	uxtbeq	r1, r0
   23b78:	cmpeq	r1, #9
   23b7c:	beq	2416c <__assert_fail@plt+0x124c0>
   23b80:	mov	r1, #1
   23b84:	bfi	r0, r1, #0, #8
   23b88:	str	r0, [lr, #4]
   23b8c:	ldr	r1, [sl, #64]	; 0x40
   23b90:	cmp	r1, #31
   23b94:	beq	25ce4 <__assert_fail@plt+0x14038>
   23b98:	ldr	r0, [sl, #56]	; 0x38
   23b9c:	add	r7, r0, r1, lsl #5
   23ba0:	add	r2, r1, #1
   23ba4:	mov	r0, #0
   23ba8:	mvn	r3, #0
   23bac:	str	r2, [sl, #64]	; 0x40
   23bb0:	str	r0, [r7, #4]!
   23bb4:	str	r0, [r7, #8]
   23bb8:	str	r0, [r7, #4]
   23bbc:	ldm	lr, {r1, r2}
   23bc0:	str	r3, [r7, #28]
   23bc4:	str	r0, [r7, #16]
   23bc8:	str	r0, [r7, #12]
   23bcc:	bic	r0, r2, #786432	; 0xc0000
   23bd0:	str	r1, [r7, #20]
   23bd4:	str	r0, [r7, #24]
   23bd8:	b	24bc8 <__assert_fail@plt+0x12f1c>
   23bdc:	mvn	r2, #32
   23be0:	ldr	r1, [r5, #64]	; 0x40
   23be4:	movw	r3, #20204	; 0x4eec
   23be8:	uxtab	r0, r2, r0
   23bec:	movw	r2, #20198	; 0x4ee6
   23bf0:	movt	r3, #3
   23bf4:	movt	r2, #3
   23bf8:	b	23c18 <__assert_fail@plt+0x11f6c>
   23bfc:	mvn	r2, #34	; 0x22
   23c00:	ldr	r1, [r5, #64]	; 0x40
   23c04:	movw	r3, #16911	; 0x420f
   23c08:	uxtab	r0, r2, r0
   23c0c:	movw	r2, #20206	; 0x4eee
   23c10:	movt	r3, #3
   23c14:	movt	r2, #3
   23c18:	clz	r0, r0
   23c1c:	lsr	r0, r0, #5
   23c20:	str	r0, [sp]
   23c24:	ldr	r4, [sp, #20]
   23c28:	str	r4, [sp, #4]
   23c2c:	mov	r0, sl
   23c30:	bl	261bc <__assert_fail@plt+0x14510>
   23c34:	mov	r7, r0
   23c38:	cmp	r0, #0
   23c3c:	bne	23c58 <__assert_fail@plt+0x11fac>
   23c40:	ldr	r0, [r4]
   23c44:	cmp	r0, #0
   23c48:	ldr	ip, [sp, #48]	; 0x30
   23c4c:	ldr	lr, [sp, #44]	; 0x2c
   23c50:	beq	24bc8 <__assert_fail@plt+0x12f1c>
   23c54:	b	25b28 <__assert_fail@plt+0x13e7c>
   23c58:	ldr	ip, [sp, #48]	; 0x30
   23c5c:	ldr	lr, [sp, #44]	; 0x2c
   23c60:	b	24bc8 <__assert_fail@plt+0x12f1c>
   23c64:	ldr	r0, [lr]
   23c68:	movw	r1, #783	; 0x30f
   23c6c:	tst	r0, r1
   23c70:	beq	23cb8 <__assert_fail@plt+0x1200c>
   23c74:	ldrb	r0, [sl, #88]	; 0x58
   23c78:	tst	r0, #16
   23c7c:	bne	23cb4 <__assert_fail@plt+0x12008>
   23c80:	orr	r1, r0, #16
   23c84:	tst	r0, #8
   23c88:	strb	r1, [sl, #88]	; 0x58
   23c8c:	bne	25f84 <__assert_fail@plt+0x142d8>
   23c90:	sub	r1, pc, #328	; 0x148
   23c94:	tst	r0, #4
   23c98:	vld1.64	{d16-d17}, [r1 :128]
   23c9c:	add	r1, sl, #96	; 0x60
   23ca0:	vst1.32	{d16-d17}, [r1]
   23ca4:	beq	25f90 <__assert_fail@plt+0x142e4>
   23ca8:	vmov.i32	q8, #0	; 0x00000000
   23cac:	add	r0, sl, #112	; 0x70
   23cb0:	vst1.32	{d16-d17}, [r0]
   23cb4:	ldr	r0, [lr]
   23cb8:	cmp	r0, #512	; 0x200
   23cbc:	beq	249b4 <__assert_fail@plt+0x12d08>
   23cc0:	cmp	r0, #256	; 0x100
   23cc4:	bne	24acc <__assert_fail@plt+0x12e20>
   23cc8:	mov	r0, #6
   23ccc:	str	r0, [lr]
   23cd0:	ldr	r1, [sl, #64]	; 0x40
   23cd4:	cmp	r1, #31
   23cd8:	beq	25ee4 <__assert_fail@plt+0x14238>
   23cdc:	ldr	r0, [sl, #56]	; 0x38
   23ce0:	add	r4, r0, r1, lsl #5
   23ce4:	add	r2, r1, #1
   23ce8:	mov	r0, #0
   23cec:	mvn	r3, #0
   23cf0:	str	r2, [sl, #64]	; 0x40
   23cf4:	str	r0, [r4, #4]!
   23cf8:	str	r0, [r4, #8]
   23cfc:	str	r0, [r4, #4]
   23d00:	ldm	lr, {r1, r2}
   23d04:	str	r3, [r4, #28]
   23d08:	str	r0, [r4, #16]
   23d0c:	str	r0, [r4, #12]
   23d10:	bic	r0, r2, #786432	; 0xc0000
   23d14:	str	r1, [r4, #20]
   23d18:	str	r0, [r4, #24]
   23d1c:	mov	r0, #9
   23d20:	str	r0, [lr]
   23d24:	ldr	r1, [sl, #64]	; 0x40
   23d28:	cmp	r1, #31
   23d2c:	bne	24a1c <__assert_fail@plt+0x12d70>
   23d30:	mov	r0, #996	; 0x3e4
   23d34:	bl	1c2f4 <__assert_fail@plt+0xa648>
   23d38:	cmp	r0, #0
   23d3c:	beq	26020 <__assert_fail@plt+0x14374>
   23d40:	ldr	r1, [sl, #56]	; 0x38
   23d44:	ldr	ip, [sp, #48]	; 0x30
   23d48:	ldr	lr, [sp, #44]	; 0x2c
   23d4c:	mov	r9, #0
   23d50:	str	r1, [r0]
   23d54:	mov	r1, #0
   23d58:	str	r1, [sl, #64]	; 0x40
   23d5c:	str	r0, [sl, #56]	; 0x38
   23d60:	b	24a20 <__assert_fail@plt+0x12d74>
   23d64:	mov	r9, #0
   23d68:	mov	r0, #32
   23d6c:	mov	r1, #1
   23d70:	str	r9, [fp, #-32]	; 0xffffffe0
   23d74:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   23d78:	mov	r8, r0
   23d7c:	mov	r0, #40	; 0x28
   23d80:	mov	r1, #1
   23d84:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   23d88:	mov	r7, r0
   23d8c:	cmp	r8, #0
   23d90:	cmpne	r7, #0
   23d94:	beq	25d44 <__assert_fail@plt+0x14098>
   23d98:	ldr	r6, [sp, #44]	; 0x2c
   23d9c:	ldr	r4, [sp, #48]	; 0x30
   23da0:	mov	r1, r5
   23da4:	mov	r0, r6
   23da8:	mov	r2, r4
   23dac:	bl	265b0 <__assert_fail@plt+0x14904>
   23db0:	mov	r3, r0
   23db4:	ldr	r0, [r6, #4]
   23db8:	str	r7, [sp, #60]	; 0x3c
   23dbc:	uxtb	r1, r0
   23dc0:	cmp	r1, #25
   23dc4:	beq	24174 <__assert_fail@plt+0x124c8>
   23dc8:	cmp	r1, #2
   23dcc:	beq	25d30 <__assert_fail@plt+0x14084>
   23dd0:	mov	r1, #0
   23dd4:	b	241cc <__assert_fail@plt+0x12520>
   23dd8:	ldr	r1, [sl, #64]	; 0x40
   23ddc:	cmp	r1, #31
   23de0:	beq	25d58 <__assert_fail@plt+0x140ac>
   23de4:	ldr	r0, [sl, #56]	; 0x38
   23de8:	add	r4, r0, r1, lsl #5
   23dec:	add	r2, r1, #1
   23df0:	mov	r0, #0
   23df4:	mvn	r3, #0
   23df8:	str	r2, [sl, #64]	; 0x40
   23dfc:	str	r0, [r4, #4]!
   23e00:	str	r0, [r4, #8]
   23e04:	str	r0, [r4, #4]
   23e08:	ldm	lr, {r1, r2}
   23e0c:	str	r3, [r4, #28]
   23e10:	str	r0, [r4, #16]
   23e14:	str	r0, [r4, #12]
   23e18:	bic	r0, r2, #786432	; 0xc0000
   23e1c:	str	r1, [r4, #20]
   23e20:	str	r0, [r4, #24]
   23e24:	ldr	r0, [sl, #92]	; 0x5c
   23e28:	cmp	r0, #2
   23e2c:	blt	24124 <__assert_fail@plt+0x12478>
   23e30:	ldr	r0, [r5, #40]	; 0x28
   23e34:	ldr	r1, [r5, #56]	; 0x38
   23e38:	cmp	r1, r0
   23e3c:	ble	24124 <__assert_fail@plt+0x12478>
   23e40:	mov	r8, #0
   23e44:	mvn	r9, #0
   23e48:	ldr	r1, [r5, #28]
   23e4c:	cmp	r0, r1
   23e50:	beq	24124 <__assert_fail@plt+0x12478>
   23e54:	ldr	r1, [r5, #8]
   23e58:	ldr	r0, [r1, r0, lsl #2]
   23e5c:	cmn	r0, #1
   23e60:	bne	24124 <__assert_fail@plt+0x12478>
   23e64:	mov	r0, lr
   23e68:	mov	r1, r5
   23e6c:	mov	r2, ip
   23e70:	bl	22db8 <__assert_fail@plt+0x1110c>
   23e74:	ldr	r1, [r5, #40]	; 0x28
   23e78:	add	r0, r1, r0
   23e7c:	str	r0, [r5, #40]	; 0x28
   23e80:	ldr	r1, [sl, #64]	; 0x40
   23e84:	cmp	r1, #31
   23e88:	beq	23f30 <__assert_fail@plt+0x12284>
   23e8c:	ldr	r0, [sl, #56]	; 0x38
   23e90:	add	r6, r0, r1, lsl #5
   23e94:	ldr	lr, [sp, #44]	; 0x2c
   23e98:	add	r2, r1, #1
   23e9c:	ldr	ip, [sp, #48]	; 0x30
   23ea0:	str	r2, [sl, #64]	; 0x40
   23ea4:	str	r8, [r6, #4]!
   23ea8:	str	r8, [r6, #8]
   23eac:	str	r8, [r6, #4]
   23eb0:	ldm	lr, {r0, r1}
   23eb4:	str	r9, [r6, #28]
   23eb8:	str	r8, [r6, #16]
   23ebc:	str	r8, [r6, #12]
   23ec0:	str	r0, [r6, #20]
   23ec4:	bic	r0, r1, #786432	; 0xc0000
   23ec8:	str	r0, [r6, #24]
   23ecc:	ldr	r1, [sl, #64]	; 0x40
   23ed0:	cmp	r1, #31
   23ed4:	beq	23f70 <__assert_fail@plt+0x122c4>
   23ed8:	ldr	r0, [sl, #56]	; 0x38
   23edc:	add	r7, r0, r1, lsl #5
   23ee0:	add	r2, r1, #1
   23ee4:	mov	r0, #16
   23ee8:	cmp	r6, #0
   23eec:	str	r2, [sl, #64]	; 0x40
   23ef0:	str	r8, [r7, #4]!
   23ef4:	stmib	r7, {r4, r6, r8}
   23ef8:	str	r8, [r7, #16]
   23efc:	str	r8, [r7, #20]
   23f00:	str	r0, [r7, #24]
   23f04:	str	r9, [r7, #28]
   23f08:	str	r7, [r4]
   23f0c:	beq	25f7c <__assert_fail@plt+0x142d0>
   23f10:	ldr	r5, [sp, #28]
   23f14:	str	r7, [r6]
   23f18:	mov	r4, r7
   23f1c:	ldr	r0, [r5, #40]	; 0x28
   23f20:	ldr	r1, [r5, #56]	; 0x38
   23f24:	cmp	r1, r0
   23f28:	bgt	23e48 <__assert_fail@plt+0x1219c>
   23f2c:	b	24bc8 <__assert_fail@plt+0x12f1c>
   23f30:	mov	r0, #996	; 0x3e4
   23f34:	bl	1c2f4 <__assert_fail@plt+0xa648>
   23f38:	cmp	r0, #0
   23f3c:	beq	23f58 <__assert_fail@plt+0x122ac>
   23f40:	ldr	r1, [sl, #56]	; 0x38
   23f44:	str	r1, [r0]
   23f48:	mov	r1, #0
   23f4c:	str	r1, [sl, #64]	; 0x40
   23f50:	str	r0, [sl, #56]	; 0x38
   23f54:	b	23e90 <__assert_fail@plt+0x121e4>
   23f58:	ldr	ip, [sp, #48]	; 0x30
   23f5c:	ldr	lr, [sp, #44]	; 0x2c
   23f60:	mov	r6, #0
   23f64:	ldr	r1, [sl, #64]	; 0x40
   23f68:	cmp	r1, #31
   23f6c:	bne	23ed8 <__assert_fail@plt+0x1222c>
   23f70:	mov	r0, #996	; 0x3e4
   23f74:	bl	1c2f4 <__assert_fail@plt+0xa648>
   23f78:	ldr	lr, [sp, #44]	; 0x2c
   23f7c:	ldr	ip, [sp, #48]	; 0x30
   23f80:	cmp	r0, #0
   23f84:	beq	25f7c <__assert_fail@plt+0x142d0>
   23f88:	ldr	r1, [sl, #56]	; 0x38
   23f8c:	str	r1, [r0]
   23f90:	mov	r1, #0
   23f94:	str	r1, [sl, #64]	; 0x40
   23f98:	str	r0, [sl, #56]	; 0x38
   23f9c:	b	23edc <__assert_fail@plt+0x12230>
   23fa0:	ldr	r0, [lr]
   23fa4:	ldr	r2, [sl, #84]	; 0x54
   23fa8:	mov	r1, #1
   23fac:	tst	r2, r1, lsl r0
   23fb0:	beq	25d8c <__assert_fail@plt+0x140e0>
   23fb4:	lsl	r0, r1, r0
   23fb8:	ldr	r1, [sl, #64]	; 0x40
   23fbc:	ldr	r2, [sl, #80]	; 0x50
   23fc0:	orr	r0, r2, r0
   23fc4:	cmp	r1, #31
   23fc8:	str	r0, [sl, #80]	; 0x50
   23fcc:	beq	25dc8 <__assert_fail@plt+0x1411c>
   23fd0:	ldr	r0, [sl, #56]	; 0x38
   23fd4:	add	r7, r0, r1, lsl #5
   23fd8:	add	r2, r1, #1
   23fdc:	mov	r0, #0
   23fe0:	mvn	r3, #0
   23fe4:	str	r2, [sl, #64]	; 0x40
   23fe8:	str	r0, [r7, #4]!
   23fec:	str	r0, [r7, #8]
   23ff0:	str	r0, [r7, #4]
   23ff4:	ldm	lr, {r1, r2}
   23ff8:	str	r3, [r7, #28]
   23ffc:	str	r0, [r7, #16]
   24000:	str	r0, [r7, #12]
   24004:	bic	r0, r2, #786432	; 0xc0000
   24008:	str	r1, [r7, #20]
   2400c:	str	r0, [r7, #24]
   24010:	ldr	r0, [sl, #76]	; 0x4c
   24014:	add	r0, r0, #1
   24018:	str	r0, [sl, #76]	; 0x4c
   2401c:	b	24078 <__assert_fail@plt+0x123cc>
   24020:	ldr	r1, [sl, #64]	; 0x40
   24024:	cmp	r1, #31
   24028:	beq	25d94 <__assert_fail@plt+0x140e8>
   2402c:	ldr	r0, [sl, #56]	; 0x38
   24030:	add	r7, r0, r1, lsl #5
   24034:	add	r2, r1, #1
   24038:	mov	r0, #0
   2403c:	mvn	r3, #0
   24040:	str	r2, [sl, #64]	; 0x40
   24044:	str	r0, [r7, #4]!
   24048:	str	r0, [r7, #8]
   2404c:	str	r0, [r7, #4]
   24050:	ldm	lr, {r1, r2}
   24054:	str	r3, [r7, #28]
   24058:	str	r0, [r7, #16]
   2405c:	str	r0, [r7, #12]
   24060:	bic	r0, r2, #786432	; 0xc0000
   24064:	str	r1, [r7, #20]
   24068:	str	r0, [r7, #24]
   2406c:	ldr	r0, [sl, #92]	; 0x5c
   24070:	cmp	r0, #2
   24074:	blt	24bc8 <__assert_fail@plt+0x12f1c>
   24078:	ldrb	r0, [sl, #88]	; 0x58
   2407c:	orr	r0, r0, #2
   24080:	strb	r0, [sl, #88]	; 0x58
   24084:	b	24bc8 <__assert_fail@plt+0x12f1c>
   24088:	ldr	r4, [r7, #24]
   2408c:	orr	r2, ip, #8388608	; 0x800000
   24090:	mov	r1, r5
   24094:	add	r0, r4, #1
   24098:	str	r0, [r7, #24]
   2409c:	mov	r0, lr
   240a0:	bl	22db8 <__assert_fail@plt+0x1110c>
   240a4:	ldr	r1, [r5, #40]	; 0x28
   240a8:	ldr	lr, [sp, #44]	; 0x2c
   240ac:	mov	r9, #0
   240b0:	add	r0, r1, r0
   240b4:	str	r0, [r5, #40]	; 0x28
   240b8:	ldrb	r0, [lr, #4]
   240bc:	cmp	r0, #9
   240c0:	beq	24b58 <__assert_fail@plt+0x12eac>
   240c4:	add	r0, r6, #1
   240c8:	mov	r1, r7
   240cc:	mov	r2, lr
   240d0:	mov	r7, lr
   240d4:	str	r0, [sp]
   240d8:	mov	r0, r5
   240dc:	ldr	r6, [sp, #20]
   240e0:	str	r6, [sp, #4]
   240e4:	ldr	r3, [sp, #48]	; 0x30
   240e8:	bl	22a30 <__assert_fail@plt+0x10d84>
   240ec:	mov	r9, r0
   240f0:	ldr	r0, [r6]
   240f4:	cmp	r0, #0
   240f8:	beq	24b48 <__assert_fail@plt+0x12e9c>
   240fc:	mov	r9, #0
   24100:	mov	r0, r9
   24104:	sub	sp, fp, #28
   24108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2410c:	tst	ip, #16777216	; 0x1000000
   24110:	beq	23b60 <__assert_fail@plt+0x11eb4>
   24114:	mov	r0, #13
   24118:	b	24ab8 <__assert_fail@plt+0x12e0c>
   2411c:	mov	r0, #5
   24120:	b	24ab8 <__assert_fail@plt+0x12e0c>
   24124:	mov	r7, r4
   24128:	b	24bc8 <__assert_fail@plt+0x12f1c>
   2412c:	mov	r0, lr
   24130:	mov	r1, r5
   24134:	mov	r2, ip
   24138:	mov	r4, ip
   2413c:	mov	r6, lr
   24140:	bl	22db8 <__assert_fail@plt+0x1110c>
   24144:	ldr	r1, [r5, #40]	; 0x28
   24148:	mov	r2, r6
   2414c:	mov	r3, r4
   24150:	add	r0, r1, r0
   24154:	mov	r1, r7
   24158:	str	r0, [r5, #40]	; 0x28
   2415c:	mov	r0, r5
   24160:	sub	sp, fp, #28
   24164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24168:	b	23a70 <__assert_fail@plt+0x11dc4>
   2416c:	mov	r0, #16
   24170:	b	24ab8 <__assert_fail@plt+0x12e0c>
   24174:	ldrb	r0, [r7, #16]
   24178:	tst	r4, #256	; 0x100
   2417c:	orr	r0, r0, #1
   24180:	strb	r0, [r7, #16]
   24184:	beq	24194 <__assert_fail@plt+0x124e8>
   24188:	ldr	r0, [r8]
   2418c:	orr	r0, r0, #1024	; 0x400
   24190:	str	r0, [r8]
   24194:	ldr	r0, [r5, #40]	; 0x28
   24198:	mov	r1, r5
   2419c:	mov	r2, r4
   241a0:	add	r0, r0, r3
   241a4:	str	r0, [r5, #40]	; 0x28
   241a8:	mov	r0, r6
   241ac:	bl	265b0 <__assert_fail@plt+0x14904>
   241b0:	ldr	r6, [sp, #44]	; 0x2c
   241b4:	mov	r3, r0
   241b8:	ldr	r0, [r6, #4]
   241bc:	uxtb	r1, r0
   241c0:	cmp	r1, #2
   241c4:	beq	25d30 <__assert_fail@plt+0x14084>
   241c8:	mov	r1, #1
   241cc:	str	r1, [sp, #56]	; 0x38
   241d0:	uxtb	r1, r0
   241d4:	mov	r2, r6
   241d8:	ldr	r7, [sp, #48]	; 0x30
   241dc:	cmp	r1, #21
   241e0:	moveq	r1, #1
   241e4:	bfieq	r0, r1, #0, #8
   241e8:	mov	r1, r5
   241ec:	streq	r0, [r6, #4]
   241f0:	sub	r0, fp, #80	; 0x50
   241f4:	str	r0, [fp, #-36]	; 0xffffffdc
   241f8:	mov	r0, #3
   241fc:	str	r0, [fp, #-40]	; 0xffffffd8
   24200:	mov	r0, #1
   24204:	str	r7, [sp]
   24208:	str	r0, [sp, #4]
   2420c:	sub	r0, fp, #40	; 0x28
   24210:	bl	26758 <__assert_fail@plt+0x14aac>
   24214:	cmp	r0, #0
   24218:	bne	25d18 <__assert_fail@plt+0x1406c>
   2421c:	and	r0, r7, #65536	; 0x10000
   24220:	mov	r2, r7
   24224:	str	r0, [sp, #40]	; 0x28
   24228:	mov	r0, #0
   2422c:	str	r0, [sp, #36]	; 0x24
   24230:	mov	r0, #0
   24234:	str	r0, [sp, #32]
   24238:	ldr	r4, [sp, #44]	; 0x2c
   2423c:	ldr	r7, [sp, #60]	; 0x3c
   24240:	mov	r0, r4
   24244:	mov	r1, r5
   24248:	bl	265b0 <__assert_fail@plt+0x14904>
   2424c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   24250:	mov	r9, r0
   24254:	cmp	r6, #2
   24258:	beq	24480 <__assert_fail@plt+0x127d4>
   2425c:	cmp	r6, #4
   24260:	bne	242a4 <__assert_fail@plt+0x125f8>
   24264:	ldr	r5, [sp, #28]
   24268:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2426c:	mov	r2, r7
   24270:	sub	r3, fp, #32
   24274:	ldr	r0, [r5, #64]	; 0x40
   24278:	str	r1, [sp]
   2427c:	ldr	r1, [sp, #48]	; 0x30
   24280:	str	r1, [sp, #4]
   24284:	mov	r1, r8
   24288:	bl	26a64 <__assert_fail@plt+0x14db8>
   2428c:	ldr	r1, [sp, #20]
   24290:	ldr	lr, [sp, #44]	; 0x2c
   24294:	cmp	r0, #0
   24298:	str	r0, [r1]
   2429c:	beq	244c8 <__assert_fail@plt+0x1281c>
   242a0:	b	25c90 <__assert_fail@plt+0x13fe4>
   242a4:	ldr	r0, [sp, #44]	; 0x2c
   242a8:	ldr	r2, [sp, #48]	; 0x30
   242ac:	mov	r4, r9
   242b0:	mov	r9, #7
   242b4:	str	sl, [sp, #52]	; 0x34
   242b8:	ldrb	r0, [r0, #4]
   242bc:	cmp	r0, #22
   242c0:	beq	242d0 <__assert_fail@plt+0x12624>
   242c4:	cmp	r0, #2
   242c8:	bne	24428 <__assert_fail@plt+0x1277c>
   242cc:	b	25c7c <__assert_fail@plt+0x13fd0>
   242d0:	ldr	r7, [sp, #28]
   242d4:	mov	r5, r4
   242d8:	ldr	r0, [r7, #40]	; 0x28
   242dc:	mov	r1, r7
   242e0:	add	r0, r0, r4
   242e4:	str	r0, [r7, #40]	; 0x28
   242e8:	add	r0, sp, #64	; 0x40
   242ec:	bl	265b0 <__assert_fail@plt+0x14904>
   242f0:	mov	r3, r0
   242f4:	ldrb	r0, [sp, #68]	; 0x44
   242f8:	cmp	r0, #21
   242fc:	beq	24410 <__assert_fail@plt+0x12764>
   24300:	ldr	r4, [sp, #48]	; 0x30
   24304:	cmp	r0, #2
   24308:	beq	25c7c <__assert_fail@plt+0x13fd0>
   2430c:	mov	r0, #3
   24310:	str	r8, [sp, #24]
   24314:	add	r2, sp, #64	; 0x40
   24318:	str	r0, [fp, #-48]	; 0xffffffd0
   2431c:	add	r0, sp, #72	; 0x48
   24320:	str	r0, [fp, #-44]	; 0xffffffd4
   24324:	mov	r0, #1
   24328:	str	r4, [sp]
   2432c:	str	r0, [sp, #4]
   24330:	sub	r0, fp, #48	; 0x30
   24334:	ldr	r7, [sp, #28]
   24338:	mov	r1, r7
   2433c:	bl	26758 <__assert_fail@plt+0x14aac>
   24340:	cmp	r0, #0
   24344:	bne	26118 <__assert_fail@plt+0x1446c>
   24348:	ldr	r0, [sp, #44]	; 0x2c
   2434c:	mov	r1, r7
   24350:	mov	r2, r4
   24354:	bl	265b0 <__assert_fail@plt+0x14904>
   24358:	ldr	r8, [fp, #-48]	; 0xffffffd0
   2435c:	mov	r9, #11
   24360:	str	r0, [sp, #16]
   24364:	cmp	r8, #2
   24368:	beq	25c78 <__assert_fail@plt+0x13fcc>
   2436c:	cmp	r8, #4
   24370:	beq	25c78 <__assert_fail@plt+0x13fcc>
   24374:	cmp	r6, #3
   24378:	bne	2438c <__assert_fail@plt+0x126e0>
   2437c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24380:	bl	11ac0 <strlen@plt>
   24384:	cmp	r0, #1
   24388:	bhi	26124 <__assert_fail@plt+0x14478>
   2438c:	cmp	r8, #3
   24390:	bne	243a4 <__assert_fail@plt+0x126f8>
   24394:	ldr	r0, [fp, #-44]	; 0xffffffd4
   24398:	bl	11ac0 <strlen@plt>
   2439c:	cmp	r0, #1
   243a0:	bhi	26124 <__assert_fail@plt+0x14478>
   243a4:	ldr	lr, [sp, #44]	; 0x2c
   243a8:	cmp	r6, #3
   243ac:	beq	24578 <__assert_fail@plt+0x128cc>
   243b0:	cmp	r6, #0
   243b4:	mov	r7, #0
   243b8:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   243bc:	cmp	r8, #3
   243c0:	beq	24588 <__assert_fail@plt+0x128dc>
   243c4:	cmp	r8, #0
   243c8:	mov	sl, #0
   243cc:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   243d0:	cmp	r6, #3
   243d4:	cmpne	r6, #0
   243d8:	bne	2459c <__assert_fail@plt+0x128f0>
   243dc:	ldr	r0, [sp, #52]	; 0x34
   243e0:	ldr	r0, [r0, #92]	; 0x5c
   243e4:	cmp	r0, #2
   243e8:	blt	245a0 <__assert_fail@plt+0x128f4>
   243ec:	mov	r0, r7
   243f0:	bl	11b38 <btowc@plt>
   243f4:	ldr	lr, [sp, #44]	; 0x2c
   243f8:	mov	r7, r0
   243fc:	cmp	r8, #3
   24400:	cmpne	r8, #0
   24404:	beq	245ac <__assert_fail@plt+0x12900>
   24408:	ldr	sl, [fp, #-44]	; 0xffffffd4
   2440c:	b	245cc <__assert_fail@plt+0x12920>
   24410:	ldr	r0, [r7, #40]	; 0x28
   24414:	mov	r1, #1
   24418:	sub	r0, r0, r5
   2441c:	str	r0, [r7, #40]	; 0x28
   24420:	ldr	r0, [sp, #44]	; 0x2c
   24424:	strb	r1, [r0, #4]
   24428:	add	r0, pc, #12
   2442c:	ldr	sl, [sp, #52]	; 0x34
   24430:	ldr	r7, [sp, #60]	; 0x3c
   24434:	mov	r9, r4
   24438:	ldr	pc, [r0, r6, lsl #2]
   2443c:	andeq	r4, r2, ip, asr #8
   24440:	andeq	r4, r2, r4, lsr #10
   24444:	andeq	r4, r2, r0, lsl #9
   24448:	andeq	r4, r2, r0, ror #10
   2444c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   24450:	mov	r3, #1
   24454:	ubfx	r1, r0, #5, #3
   24458:	and	r0, r0, #31
   2445c:	ldr	r5, [sp, #28]
   24460:	ldr	lr, [sp, #44]	; 0x2c
   24464:	ldr	r2, [r8, r1, lsl #2]
   24468:	orr	r0, r2, r3, lsl r0
   2446c:	str	r0, [r8, r1, lsl #2]
   24470:	ldrb	r0, [lr, #4]
   24474:	cmp	r0, #21
   24478:	bne	244d4 <__assert_fail@plt+0x12828>
   2447c:	b	24750 <__assert_fail@plt+0x12aa4>
   24480:	ldr	r7, [fp, #-36]	; 0xffffffdc
   24484:	mov	r0, r7
   24488:	bl	11ac0 <strlen@plt>
   2448c:	cmp	r0, #1
   24490:	bne	25e8c <__assert_fail@plt+0x141e0>
   24494:	ldrb	r0, [r7]
   24498:	mov	r3, #1
   2449c:	ubfx	r1, r0, #5, #3
   244a0:	and	r0, r0, #31
   244a4:	ldr	r2, [r8, r1, lsl #2]
   244a8:	orr	r0, r2, r3, lsl r0
   244ac:	str	r0, [r8, r1, lsl #2]
   244b0:	mov	r1, #0
   244b4:	ldr	r0, [sp, #20]
   244b8:	ldr	r5, [sp, #28]
   244bc:	ldr	lr, [sp, #44]	; 0x2c
   244c0:	ldr	r7, [sp, #60]	; 0x3c
   244c4:	str	r1, [r0]
   244c8:	ldrb	r0, [lr, #4]
   244cc:	cmp	r0, #21
   244d0:	beq	24750 <__assert_fail@plt+0x12aa4>
   244d4:	cmp	r0, #2
   244d8:	ldr	r0, [sp, #48]	; 0x30
   244dc:	beq	25d24 <__assert_fail@plt+0x14078>
   244e0:	sub	r1, fp, #80	; 0x50
   244e4:	mov	r2, lr
   244e8:	mov	r3, r9
   244ec:	mov	r4, lr
   244f0:	str	r1, [fp, #-36]	; 0xffffffdc
   244f4:	mov	r1, #3
   244f8:	str	r1, [fp, #-40]	; 0xffffffd8
   244fc:	str	r0, [sp]
   24500:	mov	r0, #0
   24504:	mov	r1, r5
   24508:	str	r0, [sp, #4]
   2450c:	sub	r0, fp, #40	; 0x28
   24510:	bl	26758 <__assert_fail@plt+0x14aac>
   24514:	ldr	r2, [sp, #48]	; 0x30
   24518:	cmp	r0, #0
   2451c:	beq	24240 <__assert_fail@plt+0x12594>
   24520:	b	25d18 <__assert_fail@plt+0x1406c>
   24524:	ldr	r1, [r7, #20]
   24528:	ldr	r0, [sp, #36]	; 0x24
   2452c:	cmp	r0, r1
   24530:	beq	246b4 <__assert_fail@plt+0x12a08>
   24534:	ldr	r0, [r7]
   24538:	ldr	r5, [sp, #28]
   2453c:	ldr	lr, [sp, #44]	; 0x2c
   24540:	ldr	r3, [fp, #-36]	; 0xffffffdc
   24544:	add	r2, r1, #1
   24548:	str	r2, [r7, #20]
   2454c:	str	r3, [r0, r1, lsl #2]
   24550:	ldrb	r0, [lr, #4]
   24554:	cmp	r0, #21
   24558:	bne	244d4 <__assert_fail@plt+0x12828>
   2455c:	b	24750 <__assert_fail@plt+0x12aa4>
   24560:	ldr	r7, [fp, #-36]	; 0xffffffdc
   24564:	mov	r0, r7
   24568:	bl	11ac0 <strlen@plt>
   2456c:	cmp	r0, #1
   24570:	beq	24494 <__assert_fail@plt+0x127e8>
   24574:	b	25e90 <__assert_fail@plt+0x141e4>
   24578:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2457c:	ldrb	r7, [r0]
   24580:	cmp	r8, #3
   24584:	bne	243c4 <__assert_fail@plt+0x12718>
   24588:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2458c:	ldrb	sl, [r0]
   24590:	cmp	r6, #3
   24594:	cmpne	r6, #0
   24598:	beq	243dc <__assert_fail@plt+0x12730>
   2459c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   245a0:	cmp	r8, #3
   245a4:	cmpne	r8, #0
   245a8:	bne	24408 <__assert_fail@plt+0x1275c>
   245ac:	ldr	r0, [sp, #52]	; 0x34
   245b0:	ldr	r0, [r0, #92]	; 0x5c
   245b4:	cmp	r0, #2
   245b8:	blt	245cc <__assert_fail@plt+0x12920>
   245bc:	mov	r0, sl
   245c0:	bl	11b38 <btowc@plt>
   245c4:	ldr	lr, [sp, #44]	; 0x2c
   245c8:	mov	sl, r0
   245cc:	ldr	r8, [sp, #24]
   245d0:	cmn	r7, #1
   245d4:	mov	r9, #3
   245d8:	cmnne	sl, #1
   245dc:	beq	25c7c <__assert_fail@plt+0x13fd0>
   245e0:	ldr	r0, [sp, #40]	; 0x28
   245e4:	cmp	r0, #0
   245e8:	beq	245f8 <__assert_fail@plt+0x1294c>
   245ec:	cmp	r7, sl
   245f0:	mov	r9, #11
   245f4:	bhi	25c7c <__assert_fail@plt+0x13fd0>
   245f8:	ldr	r0, [sp, #52]	; 0x34
   245fc:	ldr	r0, [r0, #92]	; 0x5c
   24600:	cmp	r0, #2
   24604:	blt	2463c <__assert_fail@plt+0x12990>
   24608:	ldr	r4, [sp, #60]	; 0x3c
   2460c:	ldr	r1, [sp, #32]
   24610:	ldr	r5, [sp, #28]
   24614:	ldr	r0, [r4, #32]
   24618:	cmp	r1, r0
   2461c:	beq	246f4 <__assert_fail@plt+0x12a48>
   24620:	ldmib	r4, {r6, r9}
   24624:	str	r7, [r6, r0, lsl #2]
   24628:	ldr	r0, [r4, #32]
   2462c:	add	r1, r0, #1
   24630:	str	r1, [r4, #32]
   24634:	str	sl, [r9, r0, lsl #2]
   24638:	b	24640 <__assert_fail@plt+0x12994>
   2463c:	ldr	r5, [sp, #28]
   24640:	ldr	r9, [sp, #16]
   24644:	mov	r0, #0
   24648:	cmp	r7, r0
   2464c:	cmpls	r0, sl
   24650:	bls	2466c <__assert_fail@plt+0x129c0>
   24654:	add	r0, r0, #1
   24658:	cmp	r0, #256	; 0x100
   2465c:	beq	24690 <__assert_fail@plt+0x129e4>
   24660:	cmp	r7, r0
   24664:	cmpls	r0, sl
   24668:	bhi	24654 <__assert_fail@plt+0x129a8>
   2466c:	ubfx	r1, r0, #5, #3
   24670:	and	r3, r0, #31
   24674:	mov	r4, #1
   24678:	ldr	r2, [r8, r1, lsl #2]
   2467c:	orr	r2, r2, r4, lsl r3
   24680:	str	r2, [r8, r1, lsl #2]
   24684:	add	r0, r0, #1
   24688:	cmp	r0, #256	; 0x100
   2468c:	bne	24660 <__assert_fail@plt+0x129b4>
   24690:	ldr	r0, [sp, #20]
   24694:	ldr	sl, [sp, #52]	; 0x34
   24698:	ldr	r7, [sp, #60]	; 0x3c
   2469c:	mov	r1, #0
   246a0:	str	r1, [r0]
   246a4:	ldrb	r0, [lr, #4]
   246a8:	cmp	r0, #21
   246ac:	bne	244d4 <__assert_fail@plt+0x12828>
   246b0:	b	24750 <__assert_fail@plt+0x12aa4>
   246b4:	ldr	r1, [sp, #36]	; 0x24
   246b8:	mov	r0, #1
   246bc:	orr	r1, r0, r1, lsl #1
   246c0:	ldr	r0, [r7]
   246c4:	str	r1, [sp, #36]	; 0x24
   246c8:	lsl	r1, r1, #2
   246cc:	bl	1c388 <__assert_fail@plt+0xa6dc>
   246d0:	cmp	r0, #0
   246d4:	beq	26188 <__assert_fail@plt+0x144dc>
   246d8:	ldr	r7, [sp, #60]	; 0x3c
   246dc:	ldr	r5, [sp, #28]
   246e0:	ldr	lr, [sp, #44]	; 0x2c
   246e4:	mov	r9, r4
   246e8:	str	r0, [r7]
   246ec:	ldr	r1, [r7, #20]
   246f0:	b	24540 <__assert_fail@plt+0x12894>
   246f4:	ldr	r1, [sp, #32]
   246f8:	mov	r0, #1
   246fc:	orr	r1, r0, r1, lsl #1
   24700:	ldr	r0, [r4, #4]
   24704:	lsl	r9, r1, #2
   24708:	str	r1, [sp, #32]
   2470c:	mov	r1, r9
   24710:	bl	1c388 <__assert_fail@plt+0xa6dc>
   24714:	mov	r6, r0
   24718:	ldr	r0, [r4, #8]
   2471c:	mov	r1, r9
   24720:	bl	1c388 <__assert_fail@plt+0xa6dc>
   24724:	mov	r9, r0
   24728:	cmp	r6, #0
   2472c:	cmpne	r9, #0
   24730:	beq	261a0 <__assert_fail@plt+0x144f4>
   24734:	ldr	r4, [sp, #60]	; 0x3c
   24738:	stmib	r4, {r6, r9}
   2473c:	ldr	r0, [r4, #32]
   24740:	ldr	r5, [sp, #28]
   24744:	ldr	lr, [sp, #44]	; 0x2c
   24748:	ldr	r8, [sp, #24]
   2474c:	b	24624 <__assert_fail@plt+0x12978>
   24750:	ldr	r0, [r5, #40]	; 0x28
   24754:	ldr	ip, [sp, #48]	; 0x30
   24758:	add	r0, r0, r9
   2475c:	str	r0, [r5, #40]	; 0x28
   24760:	ldr	r0, [sp, #56]	; 0x38
   24764:	cmp	r0, #0
   24768:	beq	247a4 <__assert_fail@plt+0x12af8>
   2476c:	vld1.32	{d16-d17}, [r8]
   24770:	mov	r0, r8
   24774:	vmvn	q8, q8
   24778:	vst1.32	{d16-d17}, [r0]!
   2477c:	vld1.32	{d16-d17}, [r0]
   24780:	vmvn	q8, q8
   24784:	vst1.32	{d16-d17}, [r0]
   24788:	ldr	r0, [sl, #92]	; 0x5c
   2478c:	cmp	r0, #2
   24790:	bge	247b0 <__assert_fail@plt+0x12b04>
   24794:	ldr	r1, [r7, #20]
   24798:	cmp	r1, #0
   2479c:	bne	24860 <__assert_fail@plt+0x12bb4>
   247a0:	b	2483c <__assert_fail@plt+0x12b90>
   247a4:	ldr	r0, [sl, #92]	; 0x5c
   247a8:	cmp	r0, #2
   247ac:	blt	24794 <__assert_fail@plt+0x12ae8>
   247b0:	ldr	r6, [sl, #60]	; 0x3c
   247b4:	ldm	r8, {r1, r2, r3, r7}
   247b8:	ldr	r5, [r6]
   247bc:	and	r1, r1, r5
   247c0:	ldr	r5, [sp, #28]
   247c4:	str	r1, [r8]
   247c8:	ldr	r1, [r6, #4]
   247cc:	and	r1, r2, r1
   247d0:	str	r1, [r8, #4]
   247d4:	ldr	r1, [r6, #8]
   247d8:	and	r1, r3, r1
   247dc:	str	r1, [r8, #8]
   247e0:	ldr	r1, [r6, #12]
   247e4:	and	r1, r7, r1
   247e8:	ldr	r7, [sp, #60]	; 0x3c
   247ec:	str	r1, [r8, #12]
   247f0:	ldr	r1, [r8, #16]
   247f4:	ldr	r2, [r6, #16]
   247f8:	and	r1, r1, r2
   247fc:	str	r1, [r8, #16]
   24800:	ldr	r1, [r6, #20]
   24804:	ldr	r2, [r8, #20]
   24808:	and	r1, r2, r1
   2480c:	str	r1, [r8, #20]
   24810:	ldr	r1, [r6, #24]
   24814:	ldr	r2, [r8, #24]
   24818:	and	r1, r2, r1
   2481c:	str	r1, [r8, #24]
   24820:	ldr	r1, [r6, #28]
   24824:	ldr	r2, [r8, #28]
   24828:	and	r1, r2, r1
   2482c:	str	r1, [r8, #28]
   24830:	ldr	r1, [r7, #20]
   24834:	cmp	r1, #0
   24838:	bne	24860 <__assert_fail@plt+0x12bb4>
   2483c:	ldr	r1, [r7, #24]
   24840:	cmp	r1, #0
   24844:	bne	24860 <__assert_fail@plt+0x12bb4>
   24848:	ldr	r1, [r7, #28]
   2484c:	cmp	r1, #0
   24850:	bne	24860 <__assert_fail@plt+0x12bb4>
   24854:	ldr	r1, [r7, #32]
   24858:	cmp	r1, #0
   2485c:	beq	25bd8 <__assert_fail@plt+0x13f2c>
   24860:	ldrb	r0, [sl, #88]	; 0x58
   24864:	orr	r0, r0, #2
   24868:	strb	r0, [sl, #88]	; 0x58
   2486c:	ldr	r1, [sl, #64]	; 0x40
   24870:	cmp	r1, #31
   24874:	beq	25dfc <__assert_fail@plt+0x14150>
   24878:	ldr	r0, [sl, #56]	; 0x38
   2487c:	add	r0, r0, r1, lsl #5
   24880:	add	r2, r1, #1
   24884:	vmov.i32	q8, #0	; 0x00000000
   24888:	mov	r1, #6
   2488c:	str	r2, [sl, #64]	; 0x40
   24890:	mov	r2, #0
   24894:	add	r4, r0, #4
   24898:	str	r2, [r0, #20]
   2489c:	str	r7, [r0, #24]
   248a0:	str	r1, [r0, #28]
   248a4:	mov	r0, #28
   248a8:	mov	r1, r4
   248ac:	vst1.32	{d16-d17}, [r1], r0
   248b0:	mvn	r0, #0
   248b4:	str	r0, [r1]
   248b8:	ldr	r0, [r8]
   248bc:	cmp	r0, #0
   248c0:	bne	24918 <__assert_fail@plt+0x12c6c>
   248c4:	ldr	r0, [r8, #4]
   248c8:	cmp	r0, #0
   248cc:	bne	24918 <__assert_fail@plt+0x12c6c>
   248d0:	ldr	r0, [r8, #8]
   248d4:	cmp	r0, #0
   248d8:	bne	24918 <__assert_fail@plt+0x12c6c>
   248dc:	ldr	r0, [r8, #12]
   248e0:	cmp	r0, #0
   248e4:	bne	24918 <__assert_fail@plt+0x12c6c>
   248e8:	ldr	r0, [r8, #16]
   248ec:	cmp	r0, #0
   248f0:	bne	24918 <__assert_fail@plt+0x12c6c>
   248f4:	ldr	r0, [r8, #20]
   248f8:	cmp	r0, #0
   248fc:	bne	24918 <__assert_fail@plt+0x12c6c>
   24900:	ldr	r0, [r8, #24]
   24904:	cmp	r0, #0
   24908:	bne	24918 <__assert_fail@plt+0x12c6c>
   2490c:	ldr	r0, [r8, #28]
   24910:	cmp	r0, #0
   24914:	beq	25e98 <__assert_fail@plt+0x141ec>
   24918:	ldr	r1, [sl, #64]	; 0x40
   2491c:	cmp	r1, #31
   24920:	beq	25e2c <__assert_fail@plt+0x14180>
   24924:	ldr	r0, [sl, #56]	; 0x38
   24928:	add	r0, r0, r1, lsl #5
   2492c:	add	r2, r1, #1
   24930:	vmov.i32	q8, #0	; 0x00000000
   24934:	mov	r1, #3
   24938:	str	r2, [sl, #64]	; 0x40
   2493c:	mov	r2, #0
   24940:	add	r6, r0, #4
   24944:	str	r2, [r0, #20]
   24948:	str	r8, [r0, #24]
   2494c:	str	r1, [r0, #28]
   24950:	mov	r0, #28
   24954:	mov	r1, r6
   24958:	vst1.32	{d16-d17}, [r1], r0
   2495c:	mvn	r0, #0
   24960:	str	r0, [r1]
   24964:	ldr	r1, [sl, #64]	; 0x40
   24968:	cmp	r1, #31
   2496c:	beq	25e5c <__assert_fail@plt+0x141b0>
   24970:	ldr	r0, [sl, #56]	; 0x38
   24974:	add	r7, r0, r1, lsl #5
   24978:	add	r2, r1, #1
   2497c:	mov	r0, #0
   24980:	mov	r1, #10
   24984:	str	r2, [sl, #64]	; 0x40
   24988:	mvn	r2, #0
   2498c:	str	r0, [r7, #4]!
   24990:	add	r3, r7, #20
   24994:	str	r6, [r7, #4]
   24998:	str	r4, [r7, #8]
   2499c:	str	r0, [r7, #12]
   249a0:	str	r0, [r7, #16]
   249a4:	stm	r3, {r0, r1, r2}
   249a8:	str	r7, [r6]
   249ac:	str	r7, [r4]
   249b0:	b	24bc8 <__assert_fail@plt+0x12f1c>
   249b4:	mov	r0, #5
   249b8:	str	r0, [lr]
   249bc:	ldr	r1, [sl, #64]	; 0x40
   249c0:	cmp	r1, #31
   249c4:	beq	25f18 <__assert_fail@plt+0x1426c>
   249c8:	ldr	r0, [sl, #56]	; 0x38
   249cc:	add	r4, r0, r1, lsl #5
   249d0:	add	r2, r1, #1
   249d4:	mov	r0, #0
   249d8:	mvn	r3, #0
   249dc:	str	r2, [sl, #64]	; 0x40
   249e0:	str	r0, [r4, #4]!
   249e4:	str	r0, [r4, #8]
   249e8:	str	r0, [r4, #4]
   249ec:	ldm	lr, {r1, r2}
   249f0:	str	r3, [r4, #28]
   249f4:	str	r0, [r4, #16]
   249f8:	str	r0, [r4, #12]
   249fc:	bic	r0, r2, #786432	; 0xc0000
   24a00:	str	r1, [r4, #20]
   24a04:	str	r0, [r4, #24]
   24a08:	mov	r0, #10
   24a0c:	str	r0, [lr]
   24a10:	ldr	r1, [sl, #64]	; 0x40
   24a14:	cmp	r1, #31
   24a18:	beq	23d30 <__assert_fail@plt+0x12084>
   24a1c:	ldr	r0, [sl, #56]	; 0x38
   24a20:	add	r5, r0, r1, lsl #5
   24a24:	add	r2, r1, #1
   24a28:	mov	r0, #0
   24a2c:	mvn	r3, #0
   24a30:	str	r2, [sl, #64]	; 0x40
   24a34:	str	r0, [r5, #4]!
   24a38:	str	r0, [r5, #8]
   24a3c:	str	r0, [r5, #4]
   24a40:	ldm	lr, {r1, r2}
   24a44:	str	r3, [r5, #28]
   24a48:	str	r0, [r5, #16]
   24a4c:	str	r0, [r5, #12]
   24a50:	bic	r0, r2, #786432	; 0xc0000
   24a54:	str	r1, [r5, #20]
   24a58:	str	r0, [r5, #24]
   24a5c:	ldr	r1, [sl, #64]	; 0x40
   24a60:	cmp	r1, #31
   24a64:	beq	2603c <__assert_fail@plt+0x14390>
   24a68:	ldr	r0, [sl, #56]	; 0x38
   24a6c:	add	r6, r0, r1, lsl #5
   24a70:	add	r2, r1, #1
   24a74:	mov	r0, #0
   24a78:	cmp	r4, #0
   24a7c:	mov	r1, #10
   24a80:	str	r2, [sl, #64]	; 0x40
   24a84:	mvn	r2, #0
   24a88:	str	r0, [r6, #4]!
   24a8c:	add	r3, r6, #20
   24a90:	stmib	r6, {r4, r5}
   24a94:	str	r0, [r6, #12]
   24a98:	str	r0, [r6, #16]
   24a9c:	stm	r3, {r0, r1, r2}
   24aa0:	strne	r6, [r4]
   24aa4:	cmp	r5, #0
   24aa8:	strne	r6, [r5]
   24aac:	cmpne	r4, #0
   24ab0:	bne	24b18 <__assert_fail@plt+0x12e6c>
   24ab4:	mov	r0, #12
   24ab8:	ldr	r1, [sp, #20]
   24abc:	str	r0, [r1]
   24ac0:	mov	r0, r9
   24ac4:	sub	sp, fp, #28
   24ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24acc:	ldr	r1, [sl, #64]	; 0x40
   24ad0:	cmp	r1, #31
   24ad4:	beq	25f4c <__assert_fail@plt+0x142a0>
   24ad8:	ldr	r0, [sl, #56]	; 0x38
   24adc:	add	r6, r0, r1, lsl #5
   24ae0:	add	r2, r1, #1
   24ae4:	mov	r0, #0
   24ae8:	mvn	r3, #0
   24aec:	str	r2, [sl, #64]	; 0x40
   24af0:	str	r0, [r6, #4]!
   24af4:	str	r0, [r6, #8]
   24af8:	str	r0, [r6, #4]
   24afc:	ldm	lr, {r1, r2}
   24b00:	str	r3, [r6, #28]
   24b04:	str	r0, [r6, #16]
   24b08:	str	r0, [r6, #12]
   24b0c:	bic	r0, r2, #786432	; 0xc0000
   24b10:	str	r1, [r6, #20]
   24b14:	str	r0, [r6, #24]
   24b18:	ldr	r4, [sp, #28]
   24b1c:	mov	r0, lr
   24b20:	mov	r2, ip
   24b24:	mov	r1, r4
   24b28:	bl	22db8 <__assert_fail@plt+0x1110c>
   24b2c:	ldr	r1, [r4, #40]	; 0x28
   24b30:	mov	r9, r6
   24b34:	add	r0, r1, r0
   24b38:	str	r0, [r4, #40]	; 0x28
   24b3c:	mov	r0, r9
   24b40:	sub	sp, fp, #28
   24b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b48:	ldrb	r0, [r7, #4]
   24b4c:	cmp	r0, #9
   24b50:	bne	2606c <__assert_fail@plt+0x143c0>
   24b54:	mov	lr, r7
   24b58:	cmp	r4, #8
   24b5c:	bhi	24b70 <__assert_fail@plt+0x12ec4>
   24b60:	ldr	r0, [sl, #84]	; 0x54
   24b64:	mov	r1, #1
   24b68:	orr	r0, r0, r1, lsl r4
   24b6c:	str	r0, [sl, #84]	; 0x54
   24b70:	ldr	r1, [sl, #64]	; 0x40
   24b74:	ldr	ip, [sp, #48]	; 0x30
   24b78:	cmp	r1, #31
   24b7c:	beq	25eb0 <__assert_fail@plt+0x14204>
   24b80:	ldr	r0, [sl, #56]	; 0x38
   24b84:	add	r0, r0, r1, lsl #5
   24b88:	add	r2, r1, #1
   24b8c:	mov	r1, #0
   24b90:	cmp	r9, #0
   24b94:	mvn	r3, #0
   24b98:	str	r2, [sl, #64]	; 0x40
   24b9c:	mov	r2, #17
   24ba0:	mov	r7, r0
   24ba4:	str	r1, [r7, #4]!
   24ba8:	add	r6, r7, #20
   24bac:	str	r9, [r7, #4]
   24bb0:	str	r1, [r7, #8]
   24bb4:	str	r1, [r7, #12]
   24bb8:	str	r1, [r7, #16]
   24bbc:	stm	r6, {r1, r2, r3}
   24bc0:	strne	r7, [r9]
   24bc4:	str	r4, [r0, #24]
   24bc8:	mov	r0, lr
   24bcc:	mov	r1, r5
   24bd0:	mov	r2, ip
   24bd4:	bl	22db8 <__assert_fail@plt+0x1110c>
   24bd8:	ldr	r1, [r5, #40]	; 0x28
   24bdc:	ldr	ip, [sp, #48]	; 0x30
   24be0:	ldr	lr, [sp, #44]	; 0x2c
   24be4:	mov	r4, #0
   24be8:	add	r0, r1, r0
   24bec:	str	r0, [r5, #40]	; 0x28
   24bf0:	and	r0, ip, #16777216	; 0x1000000
   24bf4:	str	r0, [sp, #32]
   24bf8:	and	r0, ip, #2097152	; 0x200000
   24bfc:	str	r0, [sp, #16]
   24c00:	add	r0, sl, #56	; 0x38
   24c04:	str	r0, [sp, #60]	; 0x3c
   24c08:	add	r0, sl, #64	; 0x40
   24c0c:	str	r0, [sp, #24]
   24c10:	ldrb	r0, [lr, #4]
   24c14:	mov	r9, r7
   24c18:	cmp	r0, #23
   24c1c:	bls	24c44 <__assert_fail@plt+0x12f98>
   24c20:	b	25b28 <__assert_fail@plt+0x13e7c>
   24c24:	ldrb	r1, [lr, #4]
   24c28:	cmp	r1, #23
   24c2c:	cmpne	r1, #11
   24c30:	beq	25a74 <__assert_fail@plt+0x13dc8>
   24c34:	ldrb	r0, [lr, #4]
   24c38:	mov	r9, r7
   24c3c:	cmp	r0, #23
   24c40:	bhi	25b28 <__assert_fail@plt+0x13e7c>
   24c44:	movw	r2, #2048	; 0x800
   24c48:	mov	r1, #1
   24c4c:	movt	r2, #140	; 0x8c
   24c50:	tst	r2, r1, lsl r0
   24c54:	beq	25b28 <__assert_fail@plt+0x13e7c>
   24c58:	cmp	r0, #23
   24c5c:	str	r9, [sp, #40]	; 0x28
   24c60:	bne	24d10 <__assert_fail@plt+0x13064>
   24c64:	ldr	r9, [r5, #40]	; 0x28
   24c68:	ldm	lr, {r7, sl}
   24c6c:	mov	r6, r5
   24c70:	mvn	r2, #0
   24c74:	mov	r8, r2
   24c78:	mov	r0, lr
   24c7c:	mov	r1, r6
   24c80:	mov	r2, ip
   24c84:	mov	r5, r6
   24c88:	bl	22db8 <__assert_fail@plt+0x1110c>
   24c8c:	ldr	r1, [r6, #40]	; 0x28
   24c90:	ldr	lr, [sp, #44]	; 0x2c
   24c94:	add	r0, r1, r0
   24c98:	str	r0, [r6, #40]	; 0x28
   24c9c:	ldrb	r0, [lr, #4]
   24ca0:	ldrb	r1, [lr]
   24ca4:	cmp	r0, #24
   24ca8:	beq	24d2c <__assert_fail@plt+0x13080>
   24cac:	cmp	r0, #2
   24cb0:	beq	25388 <__assert_fail@plt+0x136dc>
   24cb4:	cmp	r1, #44	; 0x2c
   24cb8:	beq	24d2c <__assert_fail@plt+0x13080>
   24cbc:	ldr	ip, [sp, #48]	; 0x30
   24cc0:	mvn	r2, #1
   24cc4:	cmp	r1, #48	; 0x30
   24cc8:	bcc	24c74 <__assert_fail@plt+0x12fc8>
   24ccc:	cmp	r0, #1
   24cd0:	bne	24c74 <__assert_fail@plt+0x12fc8>
   24cd4:	cmn	r8, #2
   24cd8:	beq	24c74 <__assert_fail@plt+0x12fc8>
   24cdc:	cmp	r1, #57	; 0x39
   24ce0:	bhi	24c74 <__assert_fail@plt+0x12fc8>
   24ce4:	cmn	r8, #1
   24ce8:	beq	24d08 <__assert_fail@plt+0x1305c>
   24cec:	add	r0, r8, r8, lsl #2
   24cf0:	add	r0, r1, r0, lsl #1
   24cf4:	movw	r1, #32816	; 0x8030
   24cf8:	cmp	r0, r1
   24cfc:	movge	r0, r1
   24d00:	sub	r2, r0, #48	; 0x30
   24d04:	b	24c74 <__assert_fail@plt+0x12fc8>
   24d08:	sub	r2, r1, #48	; 0x30
   24d0c:	b	24c74 <__assert_fail@plt+0x12fc8>
   24d10:	cmp	r0, #19
   24d14:	sub	r0, r0, #18
   24d18:	mvn	sl, #0
   24d1c:	clz	r0, r0
   24d20:	movweq	sl, #1
   24d24:	lsr	r8, r0, #5
   24d28:	b	24ee0 <__assert_fail@plt+0x13234>
   24d2c:	cmn	r8, #1
   24d30:	bne	24d74 <__assert_fail@plt+0x130c8>
   24d34:	ldr	ip, [sp, #48]	; 0x30
   24d38:	cmp	r1, #44	; 0x2c
   24d3c:	moveq	r8, #0
   24d40:	cmpeq	r0, #1
   24d44:	beq	24dd0 <__assert_fail@plt+0x13124>
   24d48:	ldr	r0, [sp, #20]
   24d4c:	mov	r1, #10
   24d50:	str	r1, [r0]
   24d54:	ldr	r9, [sp, #40]	; 0x28
   24d58:	mov	r7, #0
   24d5c:	mov	r5, r6
   24d60:	clz	r0, r7
   24d64:	cmp	r7, #0
   24d68:	lsr	r0, r0, #5
   24d6c:	beq	25a54 <__assert_fail@plt+0x13da8>
   24d70:	b	25a64 <__assert_fail@plt+0x13db8>
   24d74:	ldr	ip, [sp, #48]	; 0x30
   24d78:	cmn	r8, #2
   24d7c:	beq	24d94 <__assert_fail@plt+0x130e8>
   24d80:	cmp	r0, #24
   24d84:	beq	24e8c <__assert_fail@plt+0x131e0>
   24d88:	cmp	r0, #1
   24d8c:	cmpeq	r1, #44	; 0x2c
   24d90:	beq	24dd0 <__assert_fail@plt+0x13124>
   24d94:	ldr	r1, [sp, #16]
   24d98:	cmp	r1, #0
   24d9c:	beq	25398 <__assert_fail@plt+0x136ec>
   24da0:	mov	r0, #1
   24da4:	str	r9, [r6, #40]	; 0x28
   24da8:	mov	r5, r6
   24dac:	bfi	sl, r0, #0, #8
   24db0:	stm	lr, {r7, sl}
   24db4:	ldr	r9, [sp, #40]	; 0x28
   24db8:	mov	r7, r9
   24dbc:	clz	r0, r7
   24dc0:	cmp	r7, #0
   24dc4:	lsr	r0, r0, #5
   24dc8:	beq	25a54 <__assert_fail@plt+0x13da8>
   24dcc:	b	25a64 <__assert_fail@plt+0x13db8>
   24dd0:	mvn	r2, #0
   24dd4:	str	r9, [sp, #56]	; 0x38
   24dd8:	mov	r9, r2
   24ddc:	mov	r0, lr
   24de0:	mov	r1, r6
   24de4:	mov	r2, ip
   24de8:	mov	r5, r6
   24dec:	bl	22db8 <__assert_fail@plt+0x1110c>
   24df0:	ldr	r1, [r6, #40]	; 0x28
   24df4:	ldr	lr, [sp, #44]	; 0x2c
   24df8:	add	r0, r1, r0
   24dfc:	str	r0, [r6, #40]	; 0x28
   24e00:	ldrb	r0, [lr, #4]
   24e04:	cmp	r0, #24
   24e08:	beq	24e74 <__assert_fail@plt+0x131c8>
   24e0c:	cmp	r0, #2
   24e10:	beq	257f4 <__assert_fail@plt+0x13b48>
   24e14:	ldrb	r1, [lr]
   24e18:	ldr	ip, [sp, #48]	; 0x30
   24e1c:	cmp	r1, #44	; 0x2c
   24e20:	beq	24e78 <__assert_fail@plt+0x131cc>
   24e24:	mvn	r2, #1
   24e28:	cmp	r1, #48	; 0x30
   24e2c:	bcc	24dd8 <__assert_fail@plt+0x1312c>
   24e30:	cmp	r0, #1
   24e34:	bne	24dd8 <__assert_fail@plt+0x1312c>
   24e38:	cmn	r9, #2
   24e3c:	beq	24dd8 <__assert_fail@plt+0x1312c>
   24e40:	cmp	r1, #57	; 0x39
   24e44:	bhi	24dd8 <__assert_fail@plt+0x1312c>
   24e48:	cmn	r9, #1
   24e4c:	beq	24e6c <__assert_fail@plt+0x131c0>
   24e50:	add	r0, r9, r9, lsl #2
   24e54:	add	r0, r1, r0, lsl #1
   24e58:	movw	r1, #32816	; 0x8030
   24e5c:	cmp	r0, r1
   24e60:	movge	r0, r1
   24e64:	sub	r2, r0, #48	; 0x30
   24e68:	b	24dd8 <__assert_fail@plt+0x1312c>
   24e6c:	sub	r2, r1, #48	; 0x30
   24e70:	b	24dd8 <__assert_fail@plt+0x1312c>
   24e74:	ldr	ip, [sp, #48]	; 0x30
   24e78:	mov	r2, r9
   24e7c:	ldr	r9, [sp, #56]	; 0x38
   24e80:	cmn	r2, #2
   24e84:	bne	24e98 <__assert_fail@plt+0x131ec>
   24e88:	b	24d94 <__assert_fail@plt+0x130e8>
   24e8c:	mov	r2, r8
   24e90:	cmn	r2, #2
   24e94:	beq	24d94 <__assert_fail@plt+0x130e8>
   24e98:	ldr	r9, [sp, #40]	; 0x28
   24e9c:	cmp	r8, r2
   24ea0:	mov	r1, #0
   24ea4:	mov	r5, r6
   24ea8:	movwle	r1, #1
   24eac:	cmp	r0, #24
   24eb0:	bne	257b4 <__assert_fail@plt+0x13b08>
   24eb4:	add	r0, r2, #1
   24eb8:	mov	sl, r2
   24ebc:	clz	r0, r0
   24ec0:	lsr	r0, r0, #5
   24ec4:	orrs	r0, r1, r0
   24ec8:	beq	257b4 <__assert_fail@plt+0x13b08>
   24ecc:	cmn	sl, #1
   24ed0:	mov	r0, sl
   24ed4:	moveq	r0, r8
   24ed8:	cmp	r0, #32768	; 0x8000
   24edc:	bge	25984 <__assert_fail@plt+0x13cd8>
   24ee0:	mov	r0, lr
   24ee4:	mov	r1, r5
   24ee8:	mov	r2, ip
   24eec:	bl	22db8 <__assert_fail@plt+0x1110c>
   24ef0:	ldr	r1, [r5, #40]	; 0x28
   24ef4:	mov	r7, #0
   24ef8:	cmp	r9, #0
   24efc:	add	r0, r1, r0
   24f00:	str	r0, [r5, #40]	; 0x28
   24f04:	beq	253b0 <__assert_fail@plt+0x13704>
   24f08:	ldr	ip, [sp, #48]	; 0x30
   24f0c:	orrs	r0, sl, r8
   24f10:	beq	253cc <__assert_fail@plt+0x13720>
   24f14:	mov	r0, #0
   24f18:	cmp	r8, #1
   24f1c:	mov	r7, r9
   24f20:	str	r0, [sp, #36]	; 0x24
   24f24:	ldr	lr, [sp, #44]	; 0x2c
   24f28:	ldr	r5, [sp, #24]
   24f2c:	bge	25490 <__assert_fail@plt+0x137e4>
   24f30:	ldrb	r0, [r7, #24]
   24f34:	cmp	r0, #17
   24f38:	bne	24fac <__assert_fail@plt+0x13300>
   24f3c:	ldr	r0, [r7, #20]
   24f40:	mov	r2, r7
   24f44:	mov	r1, r2
   24f48:	ldr	r2, [r2, #4]
   24f4c:	cmp	r2, #0
   24f50:	bne	24f44 <__assert_fail@plt+0x13298>
   24f54:	ldr	r2, [r1, #8]
   24f58:	cmp	r2, #0
   24f5c:	bne	24f44 <__assert_fail@plt+0x13298>
   24f60:	ldr	r2, [r1, #24]
   24f64:	uxtb	r3, r2
   24f68:	cmp	r3, #17
   24f6c:	bne	24f80 <__assert_fail@plt+0x132d4>
   24f70:	ldr	r3, [r1, #20]
   24f74:	cmp	r3, r0
   24f78:	orreq	r2, r2, #524288	; 0x80000
   24f7c:	streq	r2, [r1, #24]
   24f80:	ldr	r3, [r1]
   24f84:	cmp	r3, #0
   24f88:	beq	24fac <__assert_fail@plt+0x13300>
   24f8c:	ldr	r2, [r3, #8]
   24f90:	cmp	r2, r1
   24f94:	mov	r1, r3
   24f98:	beq	24f60 <__assert_fail@plt+0x132b4>
   24f9c:	cmp	r2, #0
   24fa0:	mov	r1, r3
   24fa4:	beq	24f60 <__assert_fail@plt+0x132b4>
   24fa8:	b	24f44 <__assert_fail@plt+0x13298>
   24fac:	ldr	r1, [r5]
   24fb0:	cmn	sl, #1
   24fb4:	mov	r6, #10
   24fb8:	movweq	r6, #11
   24fbc:	cmp	r1, #31
   24fc0:	beq	25758 <__assert_fail@plt+0x13aac>
   24fc4:	ldr	r0, [sp, #60]	; 0x3c
   24fc8:	ldr	r0, [r0]
   24fcc:	add	r9, r0, r1, lsl #5
   24fd0:	add	r2, r1, #1
   24fd4:	mvn	r0, #0
   24fd8:	str	r2, [r5]
   24fdc:	str	r4, [r9, #4]!
   24fe0:	str	r7, [r9, #4]
   24fe4:	str	r4, [r9, #8]
   24fe8:	str	r4, [r9, #12]
   24fec:	str	r4, [r9, #16]
   24ff0:	str	r4, [r9, #20]
   24ff4:	str	r6, [r9, #24]
   24ff8:	str	r0, [r9, #28]
   24ffc:	add	r0, r8, #2
   25000:	str	r9, [r7]
   25004:	cmp	r0, sl
   25008:	bgt	25308 <__assert_fail@plt+0x1365c>
   2500c:	str	sl, [sp, #52]	; 0x34
   25010:	mov	sl, r9
   25014:	ldr	r1, [r5]
   25018:	str	r0, [sp, #56]	; 0x38
   2501c:	cmp	r1, #31
   25020:	beq	25240 <__assert_fail@plt+0x13594>
   25024:	ldr	r0, [sp, #60]	; 0x3c
   25028:	ldr	r0, [r0]
   2502c:	add	r8, r0, r1, lsl #5
   25030:	add	r3, r1, #1
   25034:	add	r2, r7, #20
   25038:	sub	r6, fp, #80	; 0x50
   2503c:	str	r3, [r5]
   25040:	str	r4, [r8, #4]!
   25044:	str	r4, [r8, #8]
   25048:	str	r4, [r8, #4]
   2504c:	ldm	r2, {r0, r1}
   25050:	mvn	r2, #0
   25054:	str	r2, [r8, #28]
   25058:	str	r4, [r8, #16]
   2505c:	str	r4, [r8, #12]
   25060:	str	r0, [r8, #20]
   25064:	bic	r0, r1, #786432	; 0xc0000
   25068:	str	r0, [r8, #24]
   2506c:	mov	r0, r8
   25070:	str	r8, [fp, #-80]	; 0xffffffb0
   25074:	str	r9, [r0]
   25078:	ldr	r0, [r6]
   2507c:	ldr	r1, [r0, #24]
   25080:	orr	r1, r1, #262144	; 0x40000
   25084:	str	r1, [r0, #24]
   25088:	ldr	r0, [r7, #4]
   2508c:	ldr	r9, [r6]
   25090:	cmp	r0, #0
   25094:	beq	250f8 <__assert_fail@plt+0x1344c>
   25098:	add	r6, r9, #4
   2509c:	mov	r7, r0
   250a0:	ldr	r1, [r5]
   250a4:	cmp	r1, #31
   250a8:	beq	25138 <__assert_fail@plt+0x1348c>
   250ac:	ldr	r0, [sp, #60]	; 0x3c
   250b0:	ldr	r0, [r0]
   250b4:	add	r0, r0, r1, lsl #5
   250b8:	add	r3, r1, #1
   250bc:	add	r2, r7, #20
   250c0:	str	r3, [r5]
   250c4:	mvn	r3, #0
   250c8:	str	r4, [r0, #4]!
   250cc:	str	r4, [r0, #8]
   250d0:	str	r4, [r0, #4]
   250d4:	ldm	r2, {r1, r2}
   250d8:	str	r3, [r0, #28]
   250dc:	str	r4, [r0, #16]
   250e0:	str	r4, [r0, #12]
   250e4:	str	r1, [r0, #20]
   250e8:	bic	r1, r2, #786432	; 0xc0000
   250ec:	str	r1, [r0, #24]
   250f0:	str	r0, [r6]
   250f4:	b	25074 <__assert_fail@plt+0x133c8>
   250f8:	mov	r1, #0
   250fc:	mov	r0, r7
   25100:	ldr	r7, [r7, #8]
   25104:	cmp	r7, r1
   25108:	cmpne	r7, #0
   2510c:	bne	25128 <__assert_fail@plt+0x1347c>
   25110:	ldr	r7, [r0]
   25114:	ldr	r9, [r9]
   25118:	mov	r1, r0
   2511c:	cmp	r7, #0
   25120:	bne	250fc <__assert_fail@plt+0x13450>
   25124:	b	2516c <__assert_fail@plt+0x134c0>
   25128:	add	r6, r9, #8
   2512c:	ldr	r1, [r5]
   25130:	cmp	r1, #31
   25134:	bne	250ac <__assert_fail@plt+0x13400>
   25138:	mov	r0, #996	; 0x3e4
   2513c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25140:	cmp	r0, #0
   25144:	beq	252b4 <__assert_fail@plt+0x13608>
   25148:	ldr	r2, [sp, #60]	; 0x3c
   2514c:	ldr	ip, [sp, #48]	; 0x30
   25150:	ldr	lr, [sp, #44]	; 0x2c
   25154:	ldr	r1, [r2]
   25158:	str	r1, [r0]
   2515c:	mov	r1, #0
   25160:	str	r0, [r2]
   25164:	str	r1, [r5]
   25168:	b	250b4 <__assert_fail@plt+0x13408>
   2516c:	mov	r7, r8
   25170:	ldr	r1, [r5]
   25174:	cmp	r1, #31
   25178:	beq	252d0 <__assert_fail@plt+0x13624>
   2517c:	ldr	r0, [sp, #60]	; 0x3c
   25180:	ldr	r0, [r0]
   25184:	add	r6, r0, r1, lsl #5
   25188:	add	r2, r1, #1
   2518c:	mov	r0, #16
   25190:	cmp	r7, #0
   25194:	str	r2, [r5]
   25198:	str	r4, [r6, #4]!
   2519c:	str	sl, [r6, #4]
   251a0:	str	r7, [r6, #8]
   251a4:	str	r4, [r6, #12]
   251a8:	str	r4, [r6, #16]
   251ac:	str	r4, [r6, #20]
   251b0:	str	r0, [r6, #24]
   251b4:	mvn	r0, #0
   251b8:	str	r0, [r6, #28]
   251bc:	str	r6, [sl]
   251c0:	beq	25a2c <__assert_fail@plt+0x13d80>
   251c4:	str	r6, [r7]
   251c8:	ldr	r1, [r5]
   251cc:	cmp	r1, #31
   251d0:	beq	25274 <__assert_fail@plt+0x135c8>
   251d4:	ldr	r0, [sp, #60]	; 0x3c
   251d8:	ldr	r0, [r0]
   251dc:	add	sl, r0, r1, lsl #5
   251e0:	add	r2, r1, #1
   251e4:	mov	r0, #10
   251e8:	ldr	r1, [sp, #56]	; 0x38
   251ec:	str	r2, [r5]
   251f0:	str	r4, [sl, #4]!
   251f4:	str	r6, [sl, #4]
   251f8:	str	r4, [sl, #8]
   251fc:	str	r4, [sl, #12]
   25200:	str	r4, [sl, #16]
   25204:	str	r4, [sl, #20]
   25208:	str	r0, [sl, #24]
   2520c:	mvn	r0, #0
   25210:	str	r0, [sl, #28]
   25214:	ldr	r0, [sp, #52]	; 0x34
   25218:	str	sl, [r6]
   2521c:	cmp	r1, r0
   25220:	bge	25304 <__assert_fail@plt+0x13658>
   25224:	ldr	r9, [r7]
   25228:	mov	r0, r1
   2522c:	add	r0, r1, #1
   25230:	ldr	r1, [r5]
   25234:	str	r0, [sp, #56]	; 0x38
   25238:	cmp	r1, #31
   2523c:	bne	25024 <__assert_fail@plt+0x13378>
   25240:	mov	r0, #996	; 0x3e4
   25244:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25248:	cmp	r0, #0
   2524c:	beq	252a8 <__assert_fail@plt+0x135fc>
   25250:	ldr	r2, [sp, #60]	; 0x3c
   25254:	ldr	ip, [sp, #48]	; 0x30
   25258:	ldr	lr, [sp, #44]	; 0x2c
   2525c:	ldr	r1, [r2]
   25260:	str	r1, [r0]
   25264:	mov	r1, #0
   25268:	str	r0, [r2]
   2526c:	str	r1, [r5]
   25270:	b	2502c <__assert_fail@plt+0x13380>
   25274:	mov	r0, #996	; 0x3e4
   25278:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2527c:	ldr	lr, [sp, #44]	; 0x2c
   25280:	ldr	ip, [sp, #48]	; 0x30
   25284:	cmp	r0, #0
   25288:	beq	25a2c <__assert_fail@plt+0x13d80>
   2528c:	ldr	r2, [sp, #60]	; 0x3c
   25290:	ldr	r1, [r2]
   25294:	str	r1, [r0]
   25298:	mov	r1, #0
   2529c:	str	r0, [r2]
   252a0:	str	r1, [r5]
   252a4:	b	251dc <__assert_fail@plt+0x13530>
   252a8:	mov	r7, #0
   252ac:	str	r7, [fp, #-80]	; 0xffffffb0
   252b0:	b	252bc <__assert_fail@plt+0x13610>
   252b4:	mov	r7, #0
   252b8:	str	r7, [r6]
   252bc:	ldr	ip, [sp, #48]	; 0x30
   252c0:	ldr	lr, [sp, #44]	; 0x2c
   252c4:	ldr	r1, [r5]
   252c8:	cmp	r1, #31
   252cc:	bne	2517c <__assert_fail@plt+0x134d0>
   252d0:	mov	r0, #996	; 0x3e4
   252d4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   252d8:	ldr	lr, [sp, #44]	; 0x2c
   252dc:	ldr	ip, [sp, #48]	; 0x30
   252e0:	cmp	r0, #0
   252e4:	beq	25a2c <__assert_fail@plt+0x13d80>
   252e8:	ldr	r2, [sp, #60]	; 0x3c
   252ec:	ldr	r1, [r2]
   252f0:	str	r1, [r0]
   252f4:	mov	r1, #0
   252f8:	str	r0, [r2]
   252fc:	str	r1, [r5]
   25300:	b	25184 <__assert_fail@plt+0x134d8>
   25304:	mov	r9, sl
   25308:	ldr	r6, [sp, #36]	; 0x24
   2530c:	ldr	r8, [sp, #28]
   25310:	cmp	r6, #0
   25314:	beq	2536c <__assert_fail@plt+0x136c0>
   25318:	ldr	r1, [r5]
   2531c:	cmp	r1, #31
   25320:	beq	257c0 <__assert_fail@plt+0x13b14>
   25324:	ldr	r0, [sp, #60]	; 0x3c
   25328:	ldr	r0, [r0]
   2532c:	add	r7, r0, r1, lsl #5
   25330:	add	r2, r1, #1
   25334:	mov	r0, #0
   25338:	mov	r1, #16
   2533c:	str	r2, [r5]
   25340:	str	r0, [r7, #4]!
   25344:	stmib	r7, {r6, r9}
   25348:	str	r0, [r7, #12]
   2534c:	str	r0, [r7, #16]
   25350:	str	r0, [r7, #20]
   25354:	str	r1, [r7, #24]
   25358:	mvn	r1, #0
   2535c:	str	r1, [r7, #28]
   25360:	str	r7, [r6]
   25364:	str	r7, [r9]
   25368:	b	25374 <__assert_fail@plt+0x136c8>
   2536c:	mov	r0, #0
   25370:	mov	r7, r9
   25374:	mov	r5, r8
   25378:	ldr	r1, [sp, #32]
   2537c:	cmp	r1, #0
   25380:	beq	24c34 <__assert_fail@plt+0x12f88>
   25384:	b	24c24 <__assert_fail@plt+0x12f78>
   25388:	ldr	ip, [sp, #48]	; 0x30
   2538c:	ldr	r1, [sp, #16]
   25390:	cmp	r1, #0
   25394:	bne	24da0 <__assert_fail@plt+0x130f4>
   25398:	ldr	r1, [sp, #20]
   2539c:	cmp	r0, #2
   253a0:	mov	r0, #10
   253a4:	movweq	r0, #9
   253a8:	str	r0, [r1]
   253ac:	b	24d54 <__assert_fail@plt+0x130a8>
   253b0:	ldr	ip, [sp, #48]	; 0x30
   253b4:	ldr	lr, [sp, #44]	; 0x2c
   253b8:	clz	r0, r7
   253bc:	cmp	r7, #0
   253c0:	lsr	r0, r0, #5
   253c4:	beq	25a54 <__assert_fail@plt+0x13da8>
   253c8:	b	25a64 <__assert_fail@plt+0x13db8>
   253cc:	ldr	lr, [sp, #44]	; 0x2c
   253d0:	mov	r0, r9
   253d4:	mov	r6, r0
   253d8:	ldr	r0, [r0, #4]
   253dc:	cmp	r0, #0
   253e0:	bne	253d4 <__assert_fail@plt+0x13728>
   253e4:	ldr	r0, [r6, #8]
   253e8:	cmp	r0, #0
   253ec:	bne	253d4 <__assert_fail@plt+0x13728>
   253f0:	ldr	r0, [r6, #24]
   253f4:	movw	r1, #255	; 0xff
   253f8:	movt	r1, #4
   253fc:	and	r0, r0, r1
   25400:	cmp	r0, #3
   25404:	beq	25438 <__assert_fail@plt+0x1378c>
   25408:	cmp	r0, #6
   2540c:	bne	2544c <__assert_fail@plt+0x137a0>
   25410:	ldr	r5, [r6, #20]
   25414:	ldr	r0, [r5]
   25418:	bl	1c224 <__assert_fail@plt+0xa578>
   2541c:	ldr	r0, [r5, #4]
   25420:	bl	1c224 <__assert_fail@plt+0xa578>
   25424:	ldr	r0, [r5, #8]
   25428:	bl	1c224 <__assert_fail@plt+0xa578>
   2542c:	ldr	r0, [r5, #12]
   25430:	bl	1c224 <__assert_fail@plt+0xa578>
   25434:	b	2543c <__assert_fail@plt+0x13790>
   25438:	ldr	r5, [r6, #20]
   2543c:	mov	r0, r5
   25440:	bl	1c224 <__assert_fail@plt+0xa578>
   25444:	ldr	ip, [sp, #48]	; 0x30
   25448:	ldr	lr, [sp, #44]	; 0x2c
   2544c:	ldr	r1, [r6]
   25450:	cmp	r1, #0
   25454:	beq	25478 <__assert_fail@plt+0x137cc>
   25458:	ldr	r0, [r1, #8]
   2545c:	cmp	r0, r6
   25460:	mov	r6, r1
   25464:	beq	253f0 <__assert_fail@plt+0x13744>
   25468:	cmp	r0, #0
   2546c:	mov	r6, r1
   25470:	beq	253f0 <__assert_fail@plt+0x13744>
   25474:	b	253d4 <__assert_fail@plt+0x13728>
   25478:	ldr	r5, [sp, #28]
   2547c:	clz	r0, r7
   25480:	cmp	r7, #0
   25484:	lsr	r0, r0, #5
   25488:	beq	25a54 <__assert_fail@plt+0x13da8>
   2548c:	b	25a64 <__assert_fail@plt+0x13db8>
   25490:	mov	r3, r9
   25494:	str	sl, [sp, #52]	; 0x34
   25498:	str	r9, [sp, #36]	; 0x24
   2549c:	beq	2578c <__assert_fail@plt+0x13ae0>
   254a0:	ldr	sl, [sp, #40]	; 0x28
   254a4:	ldr	r0, [sl]
   254a8:	mov	r3, sl
   254ac:	str	r0, [sp, #36]	; 0x24
   254b0:	mov	r0, #2
   254b4:	ldr	r1, [r5]
   254b8:	str	r0, [sp, #56]	; 0x38
   254bc:	cmp	r1, #31
   254c0:	beq	2569c <__assert_fail@plt+0x139f0>
   254c4:	ldr	r0, [sp, #60]	; 0x3c
   254c8:	ldr	r0, [r0]
   254cc:	add	r6, r0, r1, lsl #5
   254d0:	add	r2, r3, #20
   254d4:	mov	r9, r3
   254d8:	add	r3, r1, #1
   254dc:	sub	r7, fp, #80	; 0x50
   254e0:	str	r3, [r5]
   254e4:	str	r4, [r6, #4]!
   254e8:	str	r4, [r6, #8]
   254ec:	str	r4, [r6, #4]
   254f0:	ldm	r2, {r0, r1}
   254f4:	mvn	r2, #0
   254f8:	str	r2, [r6, #28]
   254fc:	str	r4, [r6, #16]
   25500:	str	r4, [r6, #12]
   25504:	str	r0, [r6, #20]
   25508:	bic	r0, r1, #786432	; 0xc0000
   2550c:	str	r0, [r6, #24]
   25510:	mov	r0, r6
   25514:	str	r6, [fp, #-80]	; 0xffffffb0
   25518:	ldr	r1, [sp, #36]	; 0x24
   2551c:	str	r1, [r0]
   25520:	ldr	r0, [r7]
   25524:	ldr	r1, [r0, #24]
   25528:	orr	r1, r1, #262144	; 0x40000
   2552c:	str	r1, [r0, #24]
   25530:	ldr	r0, [r9, #4]
   25534:	ldr	r1, [r7]
   25538:	cmp	r0, #0
   2553c:	str	r1, [sp, #36]	; 0x24
   25540:	beq	255a4 <__assert_fail@plt+0x138f8>
   25544:	add	r7, r1, #4
   25548:	mov	r9, r0
   2554c:	ldr	r1, [r5]
   25550:	cmp	r1, #31
   25554:	beq	255f0 <__assert_fail@plt+0x13944>
   25558:	ldr	r0, [sp, #60]	; 0x3c
   2555c:	ldr	r0, [r0]
   25560:	add	r0, r0, r1, lsl #5
   25564:	add	r3, r1, #1
   25568:	add	r2, r9, #20
   2556c:	str	r3, [r5]
   25570:	mvn	r3, #0
   25574:	str	r4, [r0, #4]!
   25578:	str	r4, [r0, #8]
   2557c:	str	r4, [r0, #4]
   25580:	ldm	r2, {r1, r2}
   25584:	str	r3, [r0, #28]
   25588:	str	r4, [r0, #16]
   2558c:	str	r4, [r0, #12]
   25590:	str	r1, [r0, #20]
   25594:	bic	r1, r2, #786432	; 0xc0000
   25598:	str	r1, [r0, #24]
   2559c:	str	r0, [r7]
   255a0:	b	25518 <__assert_fail@plt+0x1386c>
   255a4:	mov	r1, #0
   255a8:	mov	r0, r9
   255ac:	ldr	r9, [r9, #8]
   255b0:	cmp	r9, r1
   255b4:	cmpne	r9, #0
   255b8:	bne	255dc <__assert_fail@plt+0x13930>
   255bc:	ldr	r1, [sp, #36]	; 0x24
   255c0:	ldr	r9, [r0]
   255c4:	ldr	r1, [r1]
   255c8:	cmp	r9, #0
   255cc:	str	r1, [sp, #36]	; 0x24
   255d0:	mov	r1, r0
   255d4:	bne	255a8 <__assert_fail@plt+0x138fc>
   255d8:	b	25624 <__assert_fail@plt+0x13978>
   255dc:	ldr	r0, [sp, #36]	; 0x24
   255e0:	add	r7, r0, #8
   255e4:	ldr	r1, [r5]
   255e8:	cmp	r1, #31
   255ec:	bne	25558 <__assert_fail@plt+0x138ac>
   255f0:	mov	r0, #996	; 0x3e4
   255f4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   255f8:	cmp	r0, #0
   255fc:	beq	25738 <__assert_fail@plt+0x13a8c>
   25600:	ldr	r2, [sp, #60]	; 0x3c
   25604:	ldr	ip, [sp, #48]	; 0x30
   25608:	ldr	lr, [sp, #44]	; 0x2c
   2560c:	ldr	r1, [r2]
   25610:	str	r1, [r0]
   25614:	mov	r1, #0
   25618:	str	r0, [r2]
   2561c:	str	r1, [r5]
   25620:	b	25560 <__assert_fail@plt+0x138b4>
   25624:	mov	r3, r6
   25628:	ldr	r1, [r5]
   2562c:	cmp	r1, #31
   25630:	beq	256fc <__assert_fail@plt+0x13a50>
   25634:	ldr	r0, [sp, #60]	; 0x3c
   25638:	ldr	r0, [r0]
   2563c:	add	r2, r1, #1
   25640:	add	r1, r0, r1, lsl #5
   25644:	mov	r0, #16
   25648:	cmp	r3, #0
   2564c:	str	r2, [r5]
   25650:	str	r4, [r1, #4]!
   25654:	str	sl, [r1, #4]
   25658:	str	r3, [r1, #8]
   2565c:	str	r4, [r1, #12]
   25660:	str	r4, [r1, #16]
   25664:	str	r4, [r1, #20]
   25668:	str	r0, [r1, #24]
   2566c:	mvn	r0, #0
   25670:	str	r1, [sp, #36]	; 0x24
   25674:	str	r0, [r1, #28]
   25678:	str	r1, [sl]
   2567c:	beq	25a2c <__assert_fail@plt+0x13d80>
   25680:	ldr	r1, [sp, #56]	; 0x38
   25684:	ldr	sl, [sp, #36]	; 0x24
   25688:	add	r0, r1, #1
   2568c:	cmp	r1, r8
   25690:	str	sl, [r3]
   25694:	bne	254b4 <__assert_fail@plt+0x13808>
   25698:	b	2578c <__assert_fail@plt+0x13ae0>
   2569c:	mov	r0, #996	; 0x3e4
   256a0:	mov	r6, r3
   256a4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   256a8:	cmp	r0, #0
   256ac:	beq	256dc <__assert_fail@plt+0x13a30>
   256b0:	ldr	r2, [sp, #60]	; 0x3c
   256b4:	ldr	r5, [sp, #24]
   256b8:	ldr	ip, [sp, #48]	; 0x30
   256bc:	ldr	lr, [sp, #44]	; 0x2c
   256c0:	mov	r3, r6
   256c4:	ldr	r1, [r2]
   256c8:	str	r1, [r0]
   256cc:	mov	r1, #0
   256d0:	str	r0, [r2]
   256d4:	str	r1, [r5]
   256d8:	b	254cc <__assert_fail@plt+0x13820>
   256dc:	ldr	ip, [sp, #48]	; 0x30
   256e0:	ldr	lr, [sp, #44]	; 0x2c
   256e4:	ldr	r5, [sp, #24]
   256e8:	mov	r3, #0
   256ec:	str	r3, [fp, #-80]	; 0xffffffb0
   256f0:	ldr	r1, [r5]
   256f4:	cmp	r1, #31
   256f8:	bne	25634 <__assert_fail@plt+0x13988>
   256fc:	mov	r0, #996	; 0x3e4
   25700:	mov	r6, r3
   25704:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25708:	ldr	lr, [sp, #44]	; 0x2c
   2570c:	ldr	ip, [sp, #48]	; 0x30
   25710:	cmp	r0, #0
   25714:	beq	25a2c <__assert_fail@plt+0x13d80>
   25718:	ldr	r2, [sp, #60]	; 0x3c
   2571c:	mov	r3, r6
   25720:	ldr	r1, [r2]
   25724:	str	r1, [r0]
   25728:	mov	r1, #0
   2572c:	str	r0, [r2]
   25730:	str	r1, [r5]
   25734:	b	2563c <__assert_fail@plt+0x13990>
   25738:	ldr	ip, [sp, #48]	; 0x30
   2573c:	ldr	lr, [sp, #44]	; 0x2c
   25740:	mov	r3, #0
   25744:	str	r3, [r7]
   25748:	ldr	r1, [r5]
   2574c:	cmp	r1, #31
   25750:	bne	25634 <__assert_fail@plt+0x13988>
   25754:	b	256fc <__assert_fail@plt+0x13a50>
   25758:	mov	r0, #996	; 0x3e4
   2575c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25760:	ldr	lr, [sp, #44]	; 0x2c
   25764:	ldr	ip, [sp, #48]	; 0x30
   25768:	cmp	r0, #0
   2576c:	beq	25a2c <__assert_fail@plt+0x13d80>
   25770:	ldr	r2, [sp, #60]	; 0x3c
   25774:	ldr	r1, [r2]
   25778:	str	r1, [r0]
   2577c:	mov	r1, #0
   25780:	str	r0, [r2]
   25784:	str	r1, [r5]
   25788:	b	24fcc <__assert_fail@plt+0x13320>
   2578c:	ldr	sl, [sp, #52]	; 0x34
   25790:	mov	r0, #0
   25794:	cmp	r8, sl
   25798:	bne	2580c <__assert_fail@plt+0x13b60>
   2579c:	ldr	r7, [sp, #36]	; 0x24
   257a0:	ldr	r5, [sp, #28]
   257a4:	ldr	r1, [sp, #32]
   257a8:	cmp	r1, #0
   257ac:	beq	24c34 <__assert_fail@plt+0x12f88>
   257b0:	b	24c24 <__assert_fail@plt+0x12f78>
   257b4:	ldr	r0, [sp, #20]
   257b8:	mov	r1, #10
   257bc:	b	2598c <__assert_fail@plt+0x13ce0>
   257c0:	mov	r0, #996	; 0x3e4
   257c4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   257c8:	cmp	r0, #0
   257cc:	beq	259a8 <__assert_fail@plt+0x13cfc>
   257d0:	ldr	r2, [sp, #60]	; 0x3c
   257d4:	ldr	ip, [sp, #48]	; 0x30
   257d8:	ldr	lr, [sp, #44]	; 0x2c
   257dc:	ldr	r1, [r2]
   257e0:	str	r1, [r0]
   257e4:	mov	r1, #0
   257e8:	str	r0, [r2]
   257ec:	str	r1, [r5]
   257f0:	b	2532c <__assert_fail@plt+0x13680>
   257f4:	ldr	ip, [sp, #48]	; 0x30
   257f8:	ldr	r9, [sp, #56]	; 0x38
   257fc:	ldr	r1, [sp, #16]
   25800:	cmp	r1, #0
   25804:	bne	24da0 <__assert_fail@plt+0x130f4>
   25808:	b	25398 <__assert_fail@plt+0x136ec>
   2580c:	mov	r6, r3
   25810:	ldr	r1, [r5]
   25814:	ldr	r9, [r6], #20
   25818:	cmp	r1, #31
   2581c:	beq	259d0 <__assert_fail@plt+0x13d24>
   25820:	ldr	r0, [sp, #60]	; 0x3c
   25824:	ldr	r0, [r0]
   25828:	add	r7, r0, r1, lsl #5
   2582c:	add	r2, r1, #1
   25830:	str	r2, [r5]
   25834:	mvn	r2, #0
   25838:	str	r4, [r7, #4]!
   2583c:	str	r4, [r7, #8]
   25840:	str	r4, [r7, #4]
   25844:	ldm	r6, {r0, r1}
   25848:	str	r2, [r7, #28]
   2584c:	str	r4, [r7, #16]
   25850:	str	r4, [r7, #12]
   25854:	sub	r6, fp, #80	; 0x50
   25858:	str	r0, [r7, #20]
   2585c:	bic	r0, r1, #786432	; 0xc0000
   25860:	str	r0, [r7, #24]
   25864:	mov	r0, r7
   25868:	str	r7, [fp, #-80]	; 0xffffffb0
   2586c:	str	r9, [r0]
   25870:	ldr	r0, [r6]
   25874:	ldr	r1, [r0, #24]
   25878:	orr	r1, r1, #262144	; 0x40000
   2587c:	str	r1, [r0, #24]
   25880:	ldr	r0, [r3, #4]
   25884:	ldr	r9, [r6]
   25888:	cmp	r0, #0
   2588c:	beq	258fc <__assert_fail@plt+0x13c50>
   25890:	add	r2, r9, #4
   25894:	mov	r6, r0
   25898:	ldr	r1, [r5]
   2589c:	str	r2, [sp, #56]	; 0x38
   258a0:	cmp	r1, #31
   258a4:	beq	25940 <__assert_fail@plt+0x13c94>
   258a8:	ldr	r0, [sp, #60]	; 0x3c
   258ac:	ldr	r0, [r0]
   258b0:	add	r0, r0, r1, lsl #5
   258b4:	add	r3, r1, #1
   258b8:	add	r2, r6, #20
   258bc:	str	r3, [r5]
   258c0:	mvn	r3, #0
   258c4:	str	r4, [r0, #4]!
   258c8:	str	r4, [r0, #8]
   258cc:	str	r4, [r0, #4]
   258d0:	ldm	r2, {r1, r2}
   258d4:	str	r3, [r0, #28]
   258d8:	mov	r3, r6
   258dc:	ldr	r6, [sp, #56]	; 0x38
   258e0:	str	r4, [r0, #16]
   258e4:	str	r4, [r0, #12]
   258e8:	str	r1, [r0, #20]
   258ec:	bic	r1, r2, #786432	; 0xc0000
   258f0:	str	r1, [r0, #24]
   258f4:	str	r0, [r6]
   258f8:	b	2586c <__assert_fail@plt+0x13bc0>
   258fc:	mov	r1, #0
   25900:	ldr	r6, [r3, #8]
   25904:	mov	r0, r3
   25908:	cmp	r6, r1
   2590c:	cmpne	r6, #0
   25910:	bne	2592c <__assert_fail@plt+0x13c80>
   25914:	ldr	r3, [r0]
   25918:	ldr	r9, [r9]
   2591c:	mov	r1, r0
   25920:	cmp	r3, #0
   25924:	bne	25900 <__assert_fail@plt+0x13c54>
   25928:	b	24f30 <__assert_fail@plt+0x13284>
   2592c:	add	r2, r9, #8
   25930:	ldr	r1, [r5]
   25934:	str	r2, [sp, #56]	; 0x38
   25938:	cmp	r1, #31
   2593c:	bne	258a8 <__assert_fail@plt+0x13bfc>
   25940:	mov	r0, #996	; 0x3e4
   25944:	str	r6, [sp, #12]
   25948:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2594c:	cmp	r0, #0
   25950:	beq	25a1c <__assert_fail@plt+0x13d70>
   25954:	ldr	r2, [sp, #60]	; 0x3c
   25958:	ldr	r5, [sp, #24]
   2595c:	ldr	ip, [sp, #48]	; 0x30
   25960:	ldr	lr, [sp, #44]	; 0x2c
   25964:	ldr	sl, [sp, #52]	; 0x34
   25968:	ldr	r6, [sp, #12]
   2596c:	ldr	r1, [r2]
   25970:	str	r1, [r0]
   25974:	mov	r1, #0
   25978:	str	r0, [r2]
   2597c:	str	r1, [r5]
   25980:	b	258b0 <__assert_fail@plt+0x13c04>
   25984:	ldr	r0, [sp, #20]
   25988:	mov	r1, #15
   2598c:	str	r1, [r0]
   25990:	mov	r7, #0
   25994:	clz	r0, r7
   25998:	cmp	r7, #0
   2599c:	lsr	r0, r0, #5
   259a0:	beq	25a54 <__assert_fail@plt+0x13da8>
   259a4:	b	25a64 <__assert_fail@plt+0x13db8>
   259a8:	ldr	ip, [sp, #48]	; 0x30
   259ac:	ldr	lr, [sp, #44]	; 0x2c
   259b0:	ldr	r9, [sp, #40]	; 0x28
   259b4:	mov	r7, #0
   259b8:	mov	r5, r8
   259bc:	clz	r0, r7
   259c0:	cmp	r7, #0
   259c4:	lsr	r0, r0, #5
   259c8:	beq	25a54 <__assert_fail@plt+0x13da8>
   259cc:	b	25a64 <__assert_fail@plt+0x13db8>
   259d0:	mov	r0, #996	; 0x3e4
   259d4:	mov	r7, r3
   259d8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   259dc:	cmp	r0, #0
   259e0:	beq	25a14 <__assert_fail@plt+0x13d68>
   259e4:	ldr	r2, [sp, #60]	; 0x3c
   259e8:	ldr	r5, [sp, #24]
   259ec:	ldr	ip, [sp, #48]	; 0x30
   259f0:	ldr	lr, [sp, #44]	; 0x2c
   259f4:	ldr	sl, [sp, #52]	; 0x34
   259f8:	mov	r3, r7
   259fc:	ldr	r1, [r2]
   25a00:	str	r1, [r0]
   25a04:	mov	r1, #0
   25a08:	str	r0, [r2]
   25a0c:	str	r1, [r5]
   25a10:	b	25828 <__assert_fail@plt+0x13b7c>
   25a14:	str	r4, [fp, #-80]	; 0xffffffb0
   25a18:	b	25a24 <__assert_fail@plt+0x13d78>
   25a1c:	ldr	r0, [sp, #56]	; 0x38
   25a20:	str	r4, [r0]
   25a24:	ldr	ip, [sp, #48]	; 0x30
   25a28:	ldr	lr, [sp, #44]	; 0x2c
   25a2c:	ldr	r0, [sp, #20]
   25a30:	ldr	r5, [sp, #28]
   25a34:	ldr	r9, [sp, #40]	; 0x28
   25a38:	mov	r1, #12
   25a3c:	mov	r7, #0
   25a40:	str	r1, [r0]
   25a44:	clz	r0, r7
   25a48:	cmp	r7, #0
   25a4c:	lsr	r0, r0, #5
   25a50:	bne	25a64 <__assert_fail@plt+0x13db8>
   25a54:	ldr	r1, [sp, #20]
   25a58:	ldr	r1, [r1]
   25a5c:	cmp	r1, #0
   25a60:	bne	25b34 <__assert_fail@plt+0x13e88>
   25a64:	ldr	r1, [sp, #32]
   25a68:	cmp	r1, #0
   25a6c:	beq	24c34 <__assert_fail@plt+0x12f88>
   25a70:	b	24c24 <__assert_fail@plt+0x12f78>
   25a74:	movw	r6, #255	; 0xff
   25a78:	cmp	r0, #0
   25a7c:	movt	r6, #4
   25a80:	bne	25b18 <__assert_fail@plt+0x13e6c>
   25a84:	mov	r5, r7
   25a88:	ldr	r7, [r7, #4]
   25a8c:	cmp	r7, #0
   25a90:	bne	25a84 <__assert_fail@plt+0x13dd8>
   25a94:	ldr	r7, [r5, #8]
   25a98:	cmp	r7, #0
   25a9c:	bne	25a84 <__assert_fail@plt+0x13dd8>
   25aa0:	ldr	r0, [r5, #24]
   25aa4:	and	r0, r0, r6
   25aa8:	cmp	r0, #3
   25aac:	beq	25ae0 <__assert_fail@plt+0x13e34>
   25ab0:	cmp	r0, #6
   25ab4:	bne	25aec <__assert_fail@plt+0x13e40>
   25ab8:	ldr	r4, [r5, #20]
   25abc:	ldr	r0, [r4]
   25ac0:	bl	1c224 <__assert_fail@plt+0xa578>
   25ac4:	ldr	r0, [r4, #4]
   25ac8:	bl	1c224 <__assert_fail@plt+0xa578>
   25acc:	ldr	r0, [r4, #8]
   25ad0:	bl	1c224 <__assert_fail@plt+0xa578>
   25ad4:	ldr	r0, [r4, #12]
   25ad8:	bl	1c224 <__assert_fail@plt+0xa578>
   25adc:	b	25ae4 <__assert_fail@plt+0x13e38>
   25ae0:	ldr	r4, [r5, #20]
   25ae4:	mov	r0, r4
   25ae8:	bl	1c224 <__assert_fail@plt+0xa578>
   25aec:	ldr	r0, [r5]
   25af0:	cmp	r0, #0
   25af4:	beq	25b18 <__assert_fail@plt+0x13e6c>
   25af8:	ldr	r7, [r0, #8]
   25afc:	cmp	r7, r5
   25b00:	mov	r5, r0
   25b04:	beq	25aa0 <__assert_fail@plt+0x13df4>
   25b08:	cmp	r7, #0
   25b0c:	mov	r5, r0
   25b10:	beq	25aa0 <__assert_fail@plt+0x13df4>
   25b14:	b	25a84 <__assert_fail@plt+0x13dd8>
   25b18:	mov	r0, #13
   25b1c:	ldr	r1, [sp, #20]
   25b20:	mov	r9, #0
   25b24:	str	r0, [r1]
   25b28:	mov	r0, r9
   25b2c:	sub	sp, fp, #28
   25b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b34:	cmp	r9, #0
   25b38:	beq	240fc <__assert_fail@plt+0x12450>
   25b3c:	movw	r6, #255	; 0xff
   25b40:	movt	r6, #4
   25b44:	mov	r5, r9
   25b48:	ldr	r9, [r9, #4]
   25b4c:	cmp	r9, #0
   25b50:	bne	25b44 <__assert_fail@plt+0x13e98>
   25b54:	ldr	r9, [r5, #8]
   25b58:	cmp	r9, #0
   25b5c:	bne	25b44 <__assert_fail@plt+0x13e98>
   25b60:	ldr	r0, [r5, #24]
   25b64:	and	r0, r0, r6
   25b68:	cmp	r0, #3
   25b6c:	beq	25ba0 <__assert_fail@plt+0x13ef4>
   25b70:	cmp	r0, #6
   25b74:	bne	25bac <__assert_fail@plt+0x13f00>
   25b78:	ldr	r4, [r5, #20]
   25b7c:	ldr	r0, [r4]
   25b80:	bl	1c224 <__assert_fail@plt+0xa578>
   25b84:	ldr	r0, [r4, #4]
   25b88:	bl	1c224 <__assert_fail@plt+0xa578>
   25b8c:	ldr	r0, [r4, #8]
   25b90:	bl	1c224 <__assert_fail@plt+0xa578>
   25b94:	ldr	r0, [r4, #12]
   25b98:	bl	1c224 <__assert_fail@plt+0xa578>
   25b9c:	b	25ba4 <__assert_fail@plt+0x13ef8>
   25ba0:	ldr	r4, [r5, #20]
   25ba4:	mov	r0, r4
   25ba8:	bl	1c224 <__assert_fail@plt+0xa578>
   25bac:	ldr	r0, [r5]
   25bb0:	cmp	r0, #0
   25bb4:	beq	240fc <__assert_fail@plt+0x12450>
   25bb8:	ldr	r9, [r0, #8]
   25bbc:	cmp	r9, r5
   25bc0:	mov	r5, r0
   25bc4:	beq	25b60 <__assert_fail@plt+0x13eb4>
   25bc8:	cmp	r9, #0
   25bcc:	mov	r5, r0
   25bd0:	beq	25b60 <__assert_fail@plt+0x13eb4>
   25bd4:	b	25b44 <__assert_fail@plt+0x13e98>
   25bd8:	cmp	r0, #2
   25bdc:	blt	25bf8 <__assert_fail@plt+0x13f4c>
   25be0:	ldr	r0, [r7, #36]	; 0x24
   25be4:	cmp	r0, #0
   25be8:	bne	24860 <__assert_fail@plt+0x12bb4>
   25bec:	ldrb	r0, [r7, #16]
   25bf0:	tst	r0, #1
   25bf4:	bne	24860 <__assert_fail@plt+0x12bb4>
   25bf8:	ldr	r0, [r7]
   25bfc:	bl	1c224 <__assert_fail@plt+0xa578>
   25c00:	ldr	r0, [r7, #4]
   25c04:	bl	1c224 <__assert_fail@plt+0xa578>
   25c08:	ldr	r0, [r7, #8]
   25c0c:	bl	1c224 <__assert_fail@plt+0xa578>
   25c10:	ldr	r0, [r7, #12]
   25c14:	bl	1c224 <__assert_fail@plt+0xa578>
   25c18:	mov	r0, r7
   25c1c:	bl	1c224 <__assert_fail@plt+0xa578>
   25c20:	ldr	r1, [sl, #64]	; 0x40
   25c24:	cmp	r1, #31
   25c28:	beq	26160 <__assert_fail@plt+0x144b4>
   25c2c:	ldr	r0, [sl, #56]	; 0x38
   25c30:	add	r0, r0, r1, lsl #5
   25c34:	add	r2, r1, #1
   25c38:	vmov.i32	q8, #0	; 0x00000000
   25c3c:	ldr	ip, [sp, #48]	; 0x30
   25c40:	ldr	lr, [sp, #44]	; 0x2c
   25c44:	mov	r1, #3
   25c48:	str	r2, [sl, #64]	; 0x40
   25c4c:	mov	r2, #0
   25c50:	add	r7, r0, #4
   25c54:	str	r2, [r0, #20]
   25c58:	str	r8, [r0, #24]
   25c5c:	str	r1, [r0, #28]
   25c60:	mov	r0, #28
   25c64:	mov	r1, r7
   25c68:	vst1.32	{d16-d17}, [r1], r0
   25c6c:	mvn	r0, #0
   25c70:	str	r0, [r1]
   25c74:	b	24bc8 <__assert_fail@plt+0x12f1c>
   25c78:	ldr	r8, [sp, #24]
   25c7c:	ldr	r0, [sp, #20]
   25c80:	ldr	r5, [sp, #28]
   25c84:	ldr	sl, [sp, #52]	; 0x34
   25c88:	ldr	r7, [sp, #60]	; 0x3c
   25c8c:	str	r9, [r0]
   25c90:	ldr	r4, [sp, #20]
   25c94:	mov	r0, r8
   25c98:	bl	1c224 <__assert_fail@plt+0xa578>
   25c9c:	ldr	r0, [r7]
   25ca0:	bl	1c224 <__assert_fail@plt+0xa578>
   25ca4:	ldr	r0, [r7, #4]
   25ca8:	bl	1c224 <__assert_fail@plt+0xa578>
   25cac:	ldr	r0, [r7, #8]
   25cb0:	bl	1c224 <__assert_fail@plt+0xa578>
   25cb4:	ldr	r0, [r7, #12]
   25cb8:	bl	1c224 <__assert_fail@plt+0xa578>
   25cbc:	mov	r0, r7
   25cc0:	bl	1c224 <__assert_fail@plt+0xa578>
   25cc4:	ldr	r0, [r4]
   25cc8:	mov	r7, #0
   25ccc:	mov	r9, #0
   25cd0:	cmp	r0, #0
   25cd4:	ldr	ip, [sp, #48]	; 0x30
   25cd8:	ldr	lr, [sp, #44]	; 0x2c
   25cdc:	beq	24bc8 <__assert_fail@plt+0x12f1c>
   25ce0:	b	25b28 <__assert_fail@plt+0x13e7c>
   25ce4:	mov	r0, #996	; 0x3e4
   25ce8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25cec:	cmp	r0, #0
   25cf0:	beq	25f7c <__assert_fail@plt+0x142d0>
   25cf4:	ldr	r1, [sl, #56]	; 0x38
   25cf8:	ldr	r5, [sp, #28]
   25cfc:	ldr	ip, [sp, #48]	; 0x30
   25d00:	ldr	lr, [sp, #44]	; 0x2c
   25d04:	str	r1, [r0]
   25d08:	mov	r1, #0
   25d0c:	str	r1, [sl, #64]	; 0x40
   25d10:	str	r0, [sl, #56]	; 0x38
   25d14:	b	23b9c <__assert_fail@plt+0x11ef0>
   25d18:	mov	r9, r0
   25d1c:	str	sl, [sp, #52]	; 0x34
   25d20:	b	25c7c <__assert_fail@plt+0x13fd0>
   25d24:	mov	r9, #7
   25d28:	str	sl, [sp, #52]	; 0x34
   25d2c:	b	25c7c <__assert_fail@plt+0x13fd0>
   25d30:	ldr	r4, [sp, #20]
   25d34:	ldr	r7, [sp, #60]	; 0x3c
   25d38:	mov	r0, #2
   25d3c:	str	r0, [r4]
   25d40:	b	25c94 <__assert_fail@plt+0x13fe8>
   25d44:	mov	r0, r8
   25d48:	bl	1c224 <__assert_fail@plt+0xa578>
   25d4c:	mov	r0, r7
   25d50:	bl	1c224 <__assert_fail@plt+0xa578>
   25d54:	b	24ab4 <__assert_fail@plt+0x12e08>
   25d58:	mov	r0, #996	; 0x3e4
   25d5c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25d60:	cmp	r0, #0
   25d64:	beq	25f7c <__assert_fail@plt+0x142d0>
   25d68:	ldr	r1, [sl, #56]	; 0x38
   25d6c:	ldr	r5, [sp, #28]
   25d70:	ldr	ip, [sp, #48]	; 0x30
   25d74:	ldr	lr, [sp, #44]	; 0x2c
   25d78:	str	r1, [r0]
   25d7c:	mov	r1, #0
   25d80:	str	r1, [sl, #64]	; 0x40
   25d84:	str	r0, [sl, #56]	; 0x38
   25d88:	b	23de8 <__assert_fail@plt+0x1213c>
   25d8c:	mov	r0, #6
   25d90:	b	24ab8 <__assert_fail@plt+0x12e0c>
   25d94:	mov	r0, #996	; 0x3e4
   25d98:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25d9c:	cmp	r0, #0
   25da0:	beq	25f7c <__assert_fail@plt+0x142d0>
   25da4:	ldr	r1, [sl, #56]	; 0x38
   25da8:	ldr	r5, [sp, #28]
   25dac:	ldr	ip, [sp, #48]	; 0x30
   25db0:	ldr	lr, [sp, #44]	; 0x2c
   25db4:	str	r1, [r0]
   25db8:	mov	r1, #0
   25dbc:	str	r1, [sl, #64]	; 0x40
   25dc0:	str	r0, [sl, #56]	; 0x38
   25dc4:	b	24030 <__assert_fail@plt+0x12384>
   25dc8:	mov	r0, #996	; 0x3e4
   25dcc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25dd0:	cmp	r0, #0
   25dd4:	beq	25f7c <__assert_fail@plt+0x142d0>
   25dd8:	ldr	r1, [sl, #56]	; 0x38
   25ddc:	ldr	r5, [sp, #28]
   25de0:	ldr	ip, [sp, #48]	; 0x30
   25de4:	ldr	lr, [sp, #44]	; 0x2c
   25de8:	str	r1, [r0]
   25dec:	mov	r1, #0
   25df0:	str	r1, [sl, #64]	; 0x40
   25df4:	str	r0, [sl, #56]	; 0x38
   25df8:	b	23fd4 <__assert_fail@plt+0x12328>
   25dfc:	mov	r0, #996	; 0x3e4
   25e00:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25e04:	cmp	r0, #0
   25e08:	beq	26190 <__assert_fail@plt+0x144e4>
   25e0c:	ldr	r1, [sl, #56]	; 0x38
   25e10:	ldr	ip, [sp, #48]	; 0x30
   25e14:	ldr	lr, [sp, #44]	; 0x2c
   25e18:	str	r1, [r0]
   25e1c:	mov	r1, #0
   25e20:	str	r1, [sl, #64]	; 0x40
   25e24:	str	r0, [sl, #56]	; 0x38
   25e28:	b	2487c <__assert_fail@plt+0x12bd0>
   25e2c:	mov	r0, #996	; 0x3e4
   25e30:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25e34:	cmp	r0, #0
   25e38:	beq	26190 <__assert_fail@plt+0x144e4>
   25e3c:	ldr	r1, [sl, #56]	; 0x38
   25e40:	ldr	ip, [sp, #48]	; 0x30
   25e44:	ldr	lr, [sp, #44]	; 0x2c
   25e48:	str	r1, [r0]
   25e4c:	mov	r1, #0
   25e50:	str	r1, [sl, #64]	; 0x40
   25e54:	str	r0, [sl, #56]	; 0x38
   25e58:	b	24928 <__assert_fail@plt+0x12c7c>
   25e5c:	mov	r0, #996	; 0x3e4
   25e60:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25e64:	cmp	r0, #0
   25e68:	beq	26190 <__assert_fail@plt+0x144e4>
   25e6c:	ldr	r1, [sl, #56]	; 0x38
   25e70:	ldr	ip, [sp, #48]	; 0x30
   25e74:	ldr	lr, [sp, #44]	; 0x2c
   25e78:	str	r1, [r0]
   25e7c:	mov	r1, #0
   25e80:	str	r1, [sl, #64]	; 0x40
   25e84:	str	r0, [sl, #56]	; 0x38
   25e88:	b	24974 <__assert_fail@plt+0x12cc8>
   25e8c:	str	sl, [sp, #52]	; 0x34
   25e90:	mov	r9, #3
   25e94:	b	25c7c <__assert_fail@plt+0x13fd0>
   25e98:	mov	r0, r8
   25e9c:	bl	1c224 <__assert_fail@plt+0xa578>
   25ea0:	ldr	lr, [sp, #44]	; 0x2c
   25ea4:	ldr	ip, [sp, #48]	; 0x30
   25ea8:	mov	r7, r4
   25eac:	b	24bc8 <__assert_fail@plt+0x12f1c>
   25eb0:	mov	r0, #996	; 0x3e4
   25eb4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25eb8:	cmp	r0, #0
   25ebc:	beq	25f7c <__assert_fail@plt+0x142d0>
   25ec0:	ldr	r1, [sl, #56]	; 0x38
   25ec4:	ldr	r5, [sp, #28]
   25ec8:	ldr	ip, [sp, #48]	; 0x30
   25ecc:	ldr	lr, [sp, #44]	; 0x2c
   25ed0:	str	r1, [r0]
   25ed4:	mov	r1, #0
   25ed8:	str	r1, [sl, #64]	; 0x40
   25edc:	str	r0, [sl, #56]	; 0x38
   25ee0:	b	24b84 <__assert_fail@plt+0x12ed8>
   25ee4:	mov	r0, #996	; 0x3e4
   25ee8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25eec:	cmp	r0, #0
   25ef0:	beq	2612c <__assert_fail@plt+0x14480>
   25ef4:	ldr	r1, [sl, #56]	; 0x38
   25ef8:	ldr	ip, [sp, #48]	; 0x30
   25efc:	ldr	lr, [sp, #44]	; 0x2c
   25f00:	mov	r9, #0
   25f04:	str	r1, [r0]
   25f08:	mov	r1, #0
   25f0c:	str	r1, [sl, #64]	; 0x40
   25f10:	str	r0, [sl, #56]	; 0x38
   25f14:	b	23ce0 <__assert_fail@plt+0x12034>
   25f18:	mov	r0, #996	; 0x3e4
   25f1c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25f20:	cmp	r0, #0
   25f24:	beq	26138 <__assert_fail@plt+0x1448c>
   25f28:	ldr	r1, [sl, #56]	; 0x38
   25f2c:	ldr	ip, [sp, #48]	; 0x30
   25f30:	ldr	lr, [sp, #44]	; 0x2c
   25f34:	mov	r9, #0
   25f38:	str	r1, [r0]
   25f3c:	mov	r1, #0
   25f40:	str	r1, [sl, #64]	; 0x40
   25f44:	str	r0, [sl, #56]	; 0x38
   25f48:	b	249cc <__assert_fail@plt+0x12d20>
   25f4c:	mov	r0, #996	; 0x3e4
   25f50:	bl	1c2f4 <__assert_fail@plt+0xa648>
   25f54:	cmp	r0, #0
   25f58:	beq	25f7c <__assert_fail@plt+0x142d0>
   25f5c:	ldr	r1, [sl, #56]	; 0x38
   25f60:	ldr	ip, [sp, #48]	; 0x30
   25f64:	ldr	lr, [sp, #44]	; 0x2c
   25f68:	str	r1, [r0]
   25f6c:	mov	r1, #0
   25f70:	str	r1, [sl, #64]	; 0x40
   25f74:	str	r0, [sl, #56]	; 0x38
   25f78:	b	24adc <__assert_fail@plt+0x12e30>
   25f7c:	mov	r0, #12
   25f80:	b	25b1c <__assert_fail@plt+0x13e70>
   25f84:	mov	r4, #0
   25f88:	mov	r5, #0
   25f8c:	b	25f98 <__assert_fail@plt+0x142ec>
   25f90:	mov	r5, #4
   25f94:	mov	r4, #128	; 0x80
   25f98:	bl	11a84 <__ctype_b_loc@plt>
   25f9c:	ldr	r0, [r0]
   25fa0:	ldr	ip, [sp, #48]	; 0x30
   25fa4:	ldr	lr, [sp, #44]	; 0x2c
   25fa8:	mov	r1, #1
   25fac:	mov	r9, #0
   25fb0:	add	r7, r0, r4, lsl #1
   25fb4:	b	25fcc <__assert_fail@plt+0x14320>
   25fb8:	add	r5, r5, #1
   25fbc:	add	r7, r7, #64	; 0x40
   25fc0:	add	r4, r4, #32
   25fc4:	cmp	r5, #8
   25fc8:	beq	23cb4 <__assert_fail@plt+0x12008>
   25fcc:	add	r0, sl, r5, lsl #2
   25fd0:	mov	r3, #0
   25fd4:	add	r2, r0, #96	; 0x60
   25fd8:	mov	r0, r7
   25fdc:	add	r6, r4, r3
   25fe0:	cmp	r6, #95	; 0x5f
   25fe4:	bne	26010 <__assert_fail@plt+0x14364>
   25fe8:	ldr	r6, [r2]
   25fec:	orr	r6, r6, r1, lsl r3
   25ff0:	str	r6, [r2]
   25ff4:	add	r3, r3, #1
   25ff8:	add	r0, r0, #2
   25ffc:	cmp	r3, #32
   26000:	beq	25fb8 <__assert_fail@plt+0x1430c>
   26004:	add	r6, r4, r3
   26008:	cmp	r6, #95	; 0x5f
   2600c:	beq	25fe8 <__assert_fail@plt+0x1433c>
   26010:	ldrh	r6, [r0]
   26014:	ands	r6, r6, #8
   26018:	beq	25ff4 <__assert_fail@plt+0x14348>
   2601c:	b	25fe8 <__assert_fail@plt+0x1433c>
   26020:	ldr	ip, [sp, #48]	; 0x30
   26024:	ldr	lr, [sp, #44]	; 0x2c
   26028:	mov	r5, #0
   2602c:	mov	r9, #0
   26030:	ldr	r1, [sl, #64]	; 0x40
   26034:	cmp	r1, #31
   26038:	bne	24a68 <__assert_fail@plt+0x12dbc>
   2603c:	mov	r0, #996	; 0x3e4
   26040:	bl	1c2f4 <__assert_fail@plt+0xa648>
   26044:	ldr	lr, [sp, #44]	; 0x2c
   26048:	ldr	ip, [sp, #48]	; 0x30
   2604c:	cmp	r0, #0
   26050:	beq	24ab4 <__assert_fail@plt+0x12e08>
   26054:	ldr	r1, [sl, #56]	; 0x38
   26058:	str	r1, [r0]
   2605c:	mov	r1, #0
   26060:	str	r1, [sl, #64]	; 0x40
   26064:	str	r0, [sl, #56]	; 0x38
   26068:	b	24a6c <__assert_fail@plt+0x12dc0>
   2606c:	cmp	r9, #0
   26070:	beq	26110 <__assert_fail@plt+0x14464>
   26074:	movw	r5, #255	; 0xff
   26078:	movt	r5, #4
   2607c:	mov	r6, r9
   26080:	ldr	r9, [r9, #4]
   26084:	cmp	r9, #0
   26088:	bne	2607c <__assert_fail@plt+0x143d0>
   2608c:	ldr	r9, [r6, #8]
   26090:	cmp	r9, #0
   26094:	bne	2607c <__assert_fail@plt+0x143d0>
   26098:	ldr	r0, [r6, #24]
   2609c:	and	r0, r0, r5
   260a0:	cmp	r0, #3
   260a4:	beq	260d8 <__assert_fail@plt+0x1442c>
   260a8:	cmp	r0, #6
   260ac:	bne	260e4 <__assert_fail@plt+0x14438>
   260b0:	ldr	r4, [r6, #20]
   260b4:	ldr	r0, [r4]
   260b8:	bl	1c224 <__assert_fail@plt+0xa578>
   260bc:	ldr	r0, [r4, #4]
   260c0:	bl	1c224 <__assert_fail@plt+0xa578>
   260c4:	ldr	r0, [r4, #8]
   260c8:	bl	1c224 <__assert_fail@plt+0xa578>
   260cc:	ldr	r0, [r4, #12]
   260d0:	bl	1c224 <__assert_fail@plt+0xa578>
   260d4:	b	260dc <__assert_fail@plt+0x14430>
   260d8:	ldr	r4, [r6, #20]
   260dc:	mov	r0, r4
   260e0:	bl	1c224 <__assert_fail@plt+0xa578>
   260e4:	ldr	r0, [r6]
   260e8:	cmp	r0, #0
   260ec:	beq	26110 <__assert_fail@plt+0x14464>
   260f0:	ldr	r9, [r0, #8]
   260f4:	cmp	r9, r6
   260f8:	mov	r6, r0
   260fc:	beq	26098 <__assert_fail@plt+0x143ec>
   26100:	cmp	r9, #0
   26104:	mov	r6, r0
   26108:	beq	26098 <__assert_fail@plt+0x143ec>
   2610c:	b	2607c <__assert_fail@plt+0x143d0>
   26110:	mov	r0, #8
   26114:	b	25b1c <__assert_fail@plt+0x13e70>
   26118:	ldr	r8, [sp, #24]
   2611c:	mov	r9, r0
   26120:	b	25c7c <__assert_fail@plt+0x13fd0>
   26124:	ldr	r8, [sp, #24]
   26128:	b	25e90 <__assert_fail@plt+0x141e4>
   2612c:	mov	r4, #0
   26130:	mov	r0, #9
   26134:	b	26140 <__assert_fail@plt+0x14494>
   26138:	mov	r4, #0
   2613c:	mov	r0, #10
   26140:	ldr	ip, [sp, #48]	; 0x30
   26144:	ldr	lr, [sp, #44]	; 0x2c
   26148:	mov	r9, #0
   2614c:	str	r0, [lr]
   26150:	ldr	r1, [sl, #64]	; 0x40
   26154:	cmp	r1, #31
   26158:	bne	24a1c <__assert_fail@plt+0x12d70>
   2615c:	b	23d30 <__assert_fail@plt+0x12084>
   26160:	mov	r0, #996	; 0x3e4
   26164:	bl	1c2f4 <__assert_fail@plt+0xa648>
   26168:	cmp	r0, #0
   2616c:	beq	26190 <__assert_fail@plt+0x144e4>
   26170:	ldr	r1, [sl, #56]	; 0x38
   26174:	str	r1, [r0]
   26178:	mov	r1, #0
   2617c:	str	r1, [sl, #64]	; 0x40
   26180:	str	r0, [sl, #56]	; 0x38
   26184:	b	25c30 <__assert_fail@plt+0x13f84>
   26188:	ldr	r5, [sp, #28]
   2618c:	ldr	r7, [sp, #60]	; 0x3c
   26190:	ldr	r4, [sp, #20]
   26194:	mov	r0, #12
   26198:	str	r0, [r4]
   2619c:	b	25c94 <__assert_fail@plt+0x13fe8>
   261a0:	mov	r0, r6
   261a4:	bl	1c224 <__assert_fail@plt+0xa578>
   261a8:	mov	r0, r9
   261ac:	bl	1c224 <__assert_fail@plt+0xa578>
   261b0:	ldr	r8, [sp, #24]
   261b4:	mov	r9, #12
   261b8:	b	25c7c <__assert_fail@plt+0x13fd0>
   261bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261c0:	add	fp, sp, #28
   261c4:	sub	sp, sp, #12
   261c8:	mov	r9, r1
   261cc:	mov	r6, r0
   261d0:	mov	r4, #0
   261d4:	mov	r0, #32
   261d8:	mov	r1, #1
   261dc:	mov	sl, r3
   261e0:	mov	r5, r2
   261e4:	str	r4, [sp, #8]
   261e8:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   261ec:	ldr	r1, [fp, #12]
   261f0:	cmp	r0, #0
   261f4:	beq	26574 <__assert_fail@plt+0x148c8>
   261f8:	mov	r7, r0
   261fc:	mov	r0, #40	; 0x28
   26200:	mov	r1, #1
   26204:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   26208:	cmp	r0, #0
   2620c:	beq	264ac <__assert_fail@plt+0x14800>
   26210:	mov	r8, r0
   26214:	ldrb	r0, [r0, #16]
   26218:	ldr	r1, [fp, #8]
   2621c:	mov	r4, #0
   26220:	add	r3, sp, #8
   26224:	str	r5, [sp]
   26228:	mov	r2, r8
   2622c:	str	r4, [sp, #4]
   26230:	and	r0, r0, #254	; 0xfe
   26234:	orr	r0, r0, r1
   26238:	mov	r1, r7
   2623c:	strb	r0, [r8, #16]
   26240:	mov	r0, r9
   26244:	bl	26a64 <__assert_fail@plt+0x14db8>
   26248:	cmp	r0, #0
   2624c:	bne	264d0 <__assert_fail@plt+0x14824>
   26250:	ldrb	r0, [sl]
   26254:	cmp	r0, #0
   26258:	beq	26284 <__assert_fail@plt+0x145d8>
   2625c:	add	r1, sl, #1
   26260:	mov	r2, #1
   26264:	ubfx	r3, r0, #5, #3
   26268:	and	r0, r0, #31
   2626c:	ldr	r5, [r7, r3, lsl #2]
   26270:	orr	r0, r5, r2, lsl r0
   26274:	str	r0, [r7, r3, lsl #2]
   26278:	ldrb	r0, [r1], #1
   2627c:	cmp	r0, #0
   26280:	bne	26264 <__assert_fail@plt+0x145b8>
   26284:	ldr	r0, [fp, #8]
   26288:	cmp	r0, #0
   2628c:	beq	263bc <__assert_fail@plt+0x14710>
   26290:	vld1.32	{d16-d17}, [r7]
   26294:	mov	r0, r7
   26298:	vmvn	q8, q8
   2629c:	vst1.32	{d16-d17}, [r0]!
   262a0:	vld1.32	{d16-d17}, [r0]
   262a4:	vmvn	q8, q8
   262a8:	vst1.32	{d16-d17}, [r0]
   262ac:	ldr	r0, [r6, #92]	; 0x5c
   262b0:	cmp	r0, #2
   262b4:	bge	263c8 <__assert_fail@plt+0x1471c>
   262b8:	ldr	r1, [r6, #64]	; 0x40
   262bc:	cmp	r1, #31
   262c0:	beq	2644c <__assert_fail@plt+0x147a0>
   262c4:	ldr	r0, [r6, #56]	; 0x38
   262c8:	add	r0, r0, r1, lsl #5
   262cc:	add	r2, r1, #1
   262d0:	vmov.i32	q8, #0	; 0x00000000
   262d4:	mov	r1, #3
   262d8:	str	r2, [r6, #64]	; 0x40
   262dc:	mov	r2, #0
   262e0:	add	r5, r0, #4
   262e4:	str	r2, [r0, #20]
   262e8:	str	r7, [r0, #24]
   262ec:	str	r1, [r0, #28]
   262f0:	mov	r0, #28
   262f4:	mov	r1, r5
   262f8:	vst1.32	{d16-d17}, [r1], r0
   262fc:	mvn	r0, #0
   26300:	str	r0, [r1]
   26304:	ldr	r0, [r6, #92]	; 0x5c
   26308:	cmp	r0, #2
   2630c:	blt	26474 <__assert_fail@plt+0x147c8>
   26310:	ldrb	r0, [r6, #88]	; 0x58
   26314:	orr	r0, r0, #2
   26318:	strb	r0, [r6, #88]	; 0x58
   2631c:	ldr	r1, [r6, #64]	; 0x40
   26320:	cmp	r1, #31
   26324:	beq	26518 <__assert_fail@plt+0x1486c>
   26328:	ldr	r0, [r6, #56]	; 0x38
   2632c:	add	r0, r0, r1, lsl #5
   26330:	vmov.i32	q8, #0	; 0x00000000
   26334:	add	r2, r1, #1
   26338:	mov	r1, #6
   2633c:	mov	r4, #0
   26340:	str	r2, [r6, #64]	; 0x40
   26344:	add	r7, r0, #4
   26348:	str	r4, [r0, #20]
   2634c:	str	r8, [r0, #24]
   26350:	str	r1, [r0, #28]
   26354:	mov	r0, #28
   26358:	mov	r1, r7
   2635c:	vst1.32	{d16-d17}, [r1], r0
   26360:	mvn	r0, #0
   26364:	str	r0, [r1]
   26368:	ldr	r1, [r6, #64]	; 0x40
   2636c:	cmp	r1, #31
   26370:	beq	26588 <__assert_fail@plt+0x148dc>
   26374:	ldr	r0, [r6, #56]	; 0x38
   26378:	add	r4, r0, r1, lsl #5
   2637c:	add	r2, r1, #1
   26380:	mov	r0, #0
   26384:	mov	r1, #10
   26388:	str	r2, [r6, #64]	; 0x40
   2638c:	mvn	r2, #0
   26390:	str	r0, [r4, #4]!
   26394:	add	r3, r4, #20
   26398:	stmib	r4, {r5, r7}
   2639c:	str	r0, [r4, #12]
   263a0:	str	r0, [r4, #16]
   263a4:	stm	r3, {r0, r1, r2}
   263a8:	str	r4, [r5]
   263ac:	str	r4, [r7]
   263b0:	mov	r0, r4
   263b4:	sub	sp, fp, #28
   263b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263bc:	ldr	r0, [r6, #92]	; 0x5c
   263c0:	cmp	r0, #2
   263c4:	blt	262b8 <__assert_fail@plt+0x1460c>
   263c8:	ldr	r5, [r6, #60]	; 0x3c
   263cc:	ldm	r7, {r0, r1, r2, ip}
   263d0:	ldr	r3, [r5]
   263d4:	and	r0, r0, r3
   263d8:	str	r0, [r7]
   263dc:	ldr	r0, [r5, #4]
   263e0:	and	r0, r1, r0
   263e4:	str	r0, [r7, #4]
   263e8:	ldr	r0, [r5, #8]
   263ec:	and	r0, r2, r0
   263f0:	str	r0, [r7, #8]
   263f4:	ldr	r0, [r5, #12]
   263f8:	and	r0, ip, r0
   263fc:	str	r0, [r7, #12]
   26400:	ldr	r0, [r7, #16]
   26404:	ldr	r1, [r5, #16]
   26408:	and	r0, r0, r1
   2640c:	str	r0, [r7, #16]
   26410:	ldr	r0, [r5, #20]
   26414:	ldr	r1, [r7, #20]
   26418:	and	r0, r1, r0
   2641c:	str	r0, [r7, #20]
   26420:	ldr	r0, [r5, #24]
   26424:	ldr	r1, [r7, #24]
   26428:	and	r0, r1, r0
   2642c:	str	r0, [r7, #24]
   26430:	ldr	r0, [r5, #28]
   26434:	ldr	r1, [r7, #28]
   26438:	and	r0, r1, r0
   2643c:	str	r0, [r7, #28]
   26440:	ldr	r1, [r6, #64]	; 0x40
   26444:	cmp	r1, #31
   26448:	bne	262c4 <__assert_fail@plt+0x14618>
   2644c:	mov	r0, #996	; 0x3e4
   26450:	bl	1c2f4 <__assert_fail@plt+0xa648>
   26454:	cmp	r0, #0
   26458:	beq	26540 <__assert_fail@plt+0x14894>
   2645c:	ldr	r1, [r6, #56]	; 0x38
   26460:	str	r1, [r0]
   26464:	mov	r1, #0
   26468:	str	r1, [r6, #64]	; 0x40
   2646c:	str	r0, [r6, #56]	; 0x38
   26470:	b	262c8 <__assert_fail@plt+0x1461c>
   26474:	ldr	r0, [r8]
   26478:	bl	1c224 <__assert_fail@plt+0xa578>
   2647c:	ldr	r0, [r8, #4]
   26480:	bl	1c224 <__assert_fail@plt+0xa578>
   26484:	ldr	r0, [r8, #8]
   26488:	bl	1c224 <__assert_fail@plt+0xa578>
   2648c:	ldr	r0, [r8, #12]
   26490:	bl	1c224 <__assert_fail@plt+0xa578>
   26494:	mov	r0, r8
   26498:	bl	1c224 <__assert_fail@plt+0xa578>
   2649c:	mov	r4, r5
   264a0:	mov	r0, r4
   264a4:	sub	sp, fp, #28
   264a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264ac:	mov	r0, r7
   264b0:	bl	1c224 <__assert_fail@plt+0xa578>
   264b4:	ldr	r1, [fp, #12]
   264b8:	mov	r0, #12
   264bc:	mov	r4, #0
   264c0:	str	r0, [r1]
   264c4:	mov	r0, r4
   264c8:	sub	sp, fp, #28
   264cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264d0:	mov	r5, r0
   264d4:	mov	r0, r7
   264d8:	bl	1c224 <__assert_fail@plt+0xa578>
   264dc:	ldr	r0, [r8]
   264e0:	bl	1c224 <__assert_fail@plt+0xa578>
   264e4:	ldr	r0, [r8, #4]
   264e8:	bl	1c224 <__assert_fail@plt+0xa578>
   264ec:	ldr	r0, [r8, #8]
   264f0:	bl	1c224 <__assert_fail@plt+0xa578>
   264f4:	ldr	r0, [r8, #12]
   264f8:	bl	1c224 <__assert_fail@plt+0xa578>
   264fc:	mov	r0, r8
   26500:	bl	1c224 <__assert_fail@plt+0xa578>
   26504:	ldr	r0, [fp, #12]
   26508:	str	r5, [r0]
   2650c:	mov	r0, r4
   26510:	sub	sp, fp, #28
   26514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26518:	mov	r0, #996	; 0x3e4
   2651c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   26520:	cmp	r0, #0
   26524:	beq	26540 <__assert_fail@plt+0x14894>
   26528:	ldr	r1, [r6, #56]	; 0x38
   2652c:	str	r1, [r0]
   26530:	mov	r1, #0
   26534:	str	r1, [r6, #64]	; 0x40
   26538:	str	r0, [r6, #56]	; 0x38
   2653c:	b	2632c <__assert_fail@plt+0x14680>
   26540:	mov	r0, r7
   26544:	bl	1c224 <__assert_fail@plt+0xa578>
   26548:	ldr	r0, [r8]
   2654c:	bl	1c224 <__assert_fail@plt+0xa578>
   26550:	ldr	r0, [r8, #4]
   26554:	bl	1c224 <__assert_fail@plt+0xa578>
   26558:	ldr	r0, [r8, #8]
   2655c:	bl	1c224 <__assert_fail@plt+0xa578>
   26560:	ldr	r0, [r8, #12]
   26564:	bl	1c224 <__assert_fail@plt+0xa578>
   26568:	mov	r0, r8
   2656c:	bl	1c224 <__assert_fail@plt+0xa578>
   26570:	ldr	r1, [fp, #12]
   26574:	mov	r0, #12
   26578:	str	r0, [r1]
   2657c:	mov	r0, r4
   26580:	sub	sp, fp, #28
   26584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26588:	mov	r0, #996	; 0x3e4
   2658c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   26590:	cmp	r0, #0
   26594:	beq	264a0 <__assert_fail@plt+0x147f4>
   26598:	ldr	r1, [r6, #56]	; 0x38
   2659c:	str	r1, [r0]
   265a0:	mov	r1, #0
   265a4:	str	r1, [r6, #64]	; 0x40
   265a8:	str	r0, [r6, #56]	; 0x38
   265ac:	b	26378 <__assert_fail@plt+0x146cc>
   265b0:	push	{fp, lr}
   265b4:	mov	fp, sp
   265b8:	ldr	ip, [r1, #40]	; 0x28
   265bc:	ldr	r3, [r1, #56]	; 0x38
   265c0:	cmp	r3, ip
   265c4:	ble	26644 <__assert_fail@plt+0x14998>
   265c8:	ldr	r3, [r1, #4]
   265cc:	ldrb	lr, [r3, ip]
   265d0:	strb	lr, [r0]
   265d4:	ldr	r3, [r1, #80]	; 0x50
   265d8:	cmp	r3, #2
   265dc:	blt	26600 <__assert_fail@plt+0x14954>
   265e0:	ldr	r3, [r1, #28]
   265e4:	ldr	ip, [r1, #40]	; 0x28
   265e8:	cmp	ip, r3
   265ec:	beq	26600 <__assert_fail@plt+0x14954>
   265f0:	ldr	r3, [r1, #8]
   265f4:	ldr	r3, [r3, ip, lsl #2]
   265f8:	cmn	r3, #1
   265fc:	beq	26718 <__assert_fail@plt+0x14a6c>
   26600:	tst	r2, #1
   26604:	beq	26658 <__assert_fail@plt+0x149ac>
   26608:	cmp	lr, #92	; 0x5c
   2660c:	bne	26658 <__assert_fail@plt+0x149ac>
   26610:	ldr	r2, [r1, #40]	; 0x28
   26614:	ldr	r3, [r1, #48]	; 0x30
   26618:	add	r2, r2, #1
   2661c:	cmp	r2, r3
   26620:	bge	26718 <__assert_fail@plt+0x14a6c>
   26624:	str	r2, [r1, #40]	; 0x28
   26628:	ldr	r1, [r1, #4]
   2662c:	ldrb	r2, [r1, r2]
   26630:	mov	r1, #1
   26634:	strb	r1, [r0, #4]
   26638:	strb	r2, [r0]
   2663c:	mov	r0, r1
   26640:	pop	{fp, pc}
   26644:	mov	r1, #2
   26648:	strb	r1, [r0, #4]
   2664c:	mov	r1, #0
   26650:	mov	r0, r1
   26654:	pop	{fp, pc}
   26658:	cmp	lr, #92	; 0x5c
   2665c:	bgt	266bc <__assert_fail@plt+0x14a10>
   26660:	cmp	lr, #45	; 0x2d
   26664:	beq	266e0 <__assert_fail@plt+0x14a34>
   26668:	cmp	lr, #91	; 0x5b
   2666c:	bne	26718 <__assert_fail@plt+0x14a6c>
   26670:	ldr	r3, [r1, #40]	; 0x28
   26674:	ldr	ip, [r1, #48]	; 0x30
   26678:	add	r3, r3, #1
   2667c:	cmp	r3, ip
   26680:	bge	26708 <__assert_fail@plt+0x14a5c>
   26684:	ldr	r1, [r1, #4]
   26688:	ldrb	r1, [r1, r3]
   2668c:	cmp	r1, #61	; 0x3d
   26690:	strb	r1, [r0]
   26694:	beq	26728 <__assert_fail@plt+0x14a7c>
   26698:	cmp	r1, #58	; 0x3a
   2669c:	beq	2673c <__assert_fail@plt+0x14a90>
   266a0:	cmp	r1, #46	; 0x2e
   266a4:	bne	26710 <__assert_fail@plt+0x14a64>
   266a8:	mov	r1, #26
   266ac:	strb	r1, [r0, #4]
   266b0:	mov	r1, #2
   266b4:	mov	r0, r1
   266b8:	pop	{fp, pc}
   266bc:	cmp	lr, #93	; 0x5d
   266c0:	beq	266f4 <__assert_fail@plt+0x14a48>
   266c4:	cmp	lr, #94	; 0x5e
   266c8:	bne	26718 <__assert_fail@plt+0x14a6c>
   266cc:	mov	r1, #25
   266d0:	strb	r1, [r0, #4]
   266d4:	mov	r1, #1
   266d8:	mov	r0, r1
   266dc:	pop	{fp, pc}
   266e0:	mov	r1, #22
   266e4:	strb	r1, [r0, #4]
   266e8:	mov	r1, #1
   266ec:	mov	r0, r1
   266f0:	pop	{fp, pc}
   266f4:	mov	r1, #21
   266f8:	strb	r1, [r0, #4]
   266fc:	mov	r1, #1
   26700:	mov	r0, r1
   26704:	pop	{fp, pc}
   26708:	mov	r1, #0
   2670c:	strb	r1, [r0]
   26710:	mov	r1, #91	; 0x5b
   26714:	strb	r1, [r0]
   26718:	mov	r1, #1
   2671c:	strb	r1, [r0, #4]
   26720:	mov	r0, r1
   26724:	pop	{fp, pc}
   26728:	mov	r1, #28
   2672c:	strb	r1, [r0, #4]
   26730:	mov	r1, #2
   26734:	mov	r0, r1
   26738:	pop	{fp, pc}
   2673c:	tst	r2, #4
   26740:	beq	26710 <__assert_fail@plt+0x14a64>
   26744:	mov	r1, #30
   26748:	strb	r1, [r0, #4]
   2674c:	mov	r1, #2
   26750:	mov	r0, r1
   26754:	pop	{fp, pc}
   26758:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2675c:	add	fp, sp, #24
   26760:	sub	sp, sp, #8
   26764:	mov	r5, r2
   26768:	ldr	r2, [r1, #80]	; 0x50
   2676c:	mov	r9, r0
   26770:	ldr	r0, [r1, #40]	; 0x28
   26774:	cmp	r2, #1
   26778:	beq	267f0 <__assert_fail@plt+0x14b44>
   2677c:	ldr	r2, [r1, #28]
   26780:	add	r6, r0, #1
   26784:	cmp	r6, r2
   26788:	bge	267f0 <__assert_fail@plt+0x14b44>
   2678c:	ldr	lr, [r1, #8]
   26790:	sub	r4, r0, r2
   26794:	sub	ip, r2, r0
   26798:	mvn	r2, #0
   2679c:	add	r6, lr, r0, lsl #2
   267a0:	ldr	r7, [r6, -r2, lsl #2]
   267a4:	cmn	r7, #1
   267a8:	bne	267bc <__assert_fail@plt+0x14b10>
   267ac:	sub	r2, r2, #1
   267b0:	cmp	r4, r2
   267b4:	bne	267a0 <__assert_fail@plt+0x14af4>
   267b8:	b	267c8 <__assert_fail@plt+0x14b1c>
   267bc:	rsb	ip, r2, #0
   267c0:	cmp	ip, #2
   267c4:	bcc	267f0 <__assert_fail@plt+0x14b44>
   267c8:	mov	r2, #1
   267cc:	str	r2, [r9]
   267d0:	ldr	r0, [lr, r0, lsl #2]
   267d4:	str	r0, [r9, #4]
   267d8:	ldr	r0, [r1, #40]	; 0x28
   267dc:	add	r0, r0, ip
   267e0:	str	r0, [r1, #40]	; 0x28
   267e4:	mov	r0, #0
   267e8:	sub	sp, fp, #24
   267ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   267f0:	add	r2, r0, r3
   267f4:	str	r2, [r1, #40]	; 0x28
   267f8:	ldrb	r6, [r5, #4]
   267fc:	sub	r0, r6, #22
   26800:	cmp	r0, #8
   26804:	bhi	26a4c <__assert_fail@plt+0x14da0>
   26808:	add	r3, pc, #0
   2680c:	ldr	pc, [r3, r0, lsl #2]
   26810:	andeq	r6, r2, r4, lsr #20
   26814:	andeq	r6, r2, ip, asr #20
   26818:	andeq	r6, r2, ip, asr #20
   2681c:	andeq	r6, r2, ip, asr #20
   26820:	andeq	r6, r2, r4, lsr r8
   26824:	andeq	r6, r2, ip, asr #20
   26828:	andeq	r6, r2, r4, lsr r8
   2682c:	andeq	r6, r2, ip, asr #20
   26830:	andeq	r6, r2, r4, lsr r8
   26834:	ldr	r3, [r1, #56]	; 0x38
   26838:	mov	r0, #7
   2683c:	cmp	r3, r2
   26840:	ble	26a5c <__assert_fail@plt+0x14db0>
   26844:	ldrb	r3, [r5]
   26848:	mov	r2, #0
   2684c:	uxtb	r7, r6
   26850:	cmp	r7, #30
   26854:	bne	26864 <__assert_fail@plt+0x14bb8>
   26858:	ldrb	r7, [r1, #75]	; 0x4b
   2685c:	cmp	r7, #0
   26860:	bne	268c8 <__assert_fail@plt+0x14c1c>
   26864:	ldr	r4, [r1, #40]	; 0x28
   26868:	ldr	r7, [r1, #4]
   2686c:	add	r6, r4, #1
   26870:	str	r6, [r1, #40]	; 0x28
   26874:	ldrb	r4, [r7, r4]
   26878:	ldr	r7, [r1, #56]	; 0x38
   2687c:	cmp	r7, r6
   26880:	ble	26a5c <__assert_fail@plt+0x14db0>
   26884:	uxtb	r7, r4
   26888:	cmp	r7, r3
   2688c:	bne	268a0 <__assert_fail@plt+0x14bf4>
   26890:	ldr	r7, [r1, #4]
   26894:	ldrb	r7, [r7, r6]
   26898:	cmp	r7, #93	; 0x5d
   2689c:	beq	269c4 <__assert_fail@plt+0x14d18>
   268a0:	ldr	r7, [r9, #4]
   268a4:	strb	r4, [r7, r2]
   268a8:	add	r2, r2, #1
   268ac:	cmp	r2, #32
   268b0:	beq	26a5c <__assert_fail@plt+0x14db0>
   268b4:	ldrb	r6, [r5, #4]
   268b8:	uxtb	r7, r6
   268bc:	cmp	r7, #30
   268c0:	beq	26858 <__assert_fail@plt+0x14bac>
   268c4:	b	26864 <__assert_fail@plt+0x14bb8>
   268c8:	ldrb	r7, [r1, #76]	; 0x4c
   268cc:	cmp	r7, #0
   268d0:	beq	26978 <__assert_fail@plt+0x14ccc>
   268d4:	ldr	lr, [r1, #28]
   268d8:	ldr	ip, [r1, #40]	; 0x28
   268dc:	cmp	lr, ip
   268e0:	beq	268f4 <__assert_fail@plt+0x14c48>
   268e4:	ldr	r4, [r1, #8]
   268e8:	ldr	r4, [r4, ip, lsl #2]
   268ec:	cmn	r4, #1
   268f0:	beq	269a4 <__assert_fail@plt+0x14cf8>
   268f4:	ldr	r6, [r1, #12]
   268f8:	ldr	r7, [r1, #24]
   268fc:	ldr	r4, [r1]
   26900:	ldr	r6, [r6, ip, lsl #2]
   26904:	add	r6, r7, r6
   26908:	add	r4, r4, r6
   2690c:	ldrsb	r4, [r4]
   26910:	cmn	r4, #1
   26914:	ble	269a4 <__assert_fail@plt+0x14cf8>
   26918:	ldr	r7, [r1, #80]	; 0x50
   2691c:	mov	r6, #1
   26920:	cmp	r7, #1
   26924:	beq	26960 <__assert_fail@plt+0x14cb4>
   26928:	add	r7, ip, #1
   2692c:	cmp	r7, lr
   26930:	bge	26960 <__assert_fail@plt+0x14cb4>
   26934:	ldr	r6, [r1, #8]
   26938:	sub	lr, lr, ip
   2693c:	add	r8, r6, ip, lsl #2
   26940:	mov	r6, #1
   26944:	ldr	r7, [r8, r6, lsl #2]
   26948:	cmn	r7, #1
   2694c:	bne	26960 <__assert_fail@plt+0x14cb4>
   26950:	add	r6, r6, #1
   26954:	cmp	lr, r6
   26958:	bne	26944 <__assert_fail@plt+0x14c98>
   2695c:	mov	r6, lr
   26960:	add	r6, r6, ip
   26964:	str	r6, [r1, #40]	; 0x28
   26968:	ldr	r7, [r1, #56]	; 0x38
   2696c:	cmp	r7, r6
   26970:	bgt	26884 <__assert_fail@plt+0x14bd8>
   26974:	b	26a5c <__assert_fail@plt+0x14db0>
   26978:	ldr	r7, [r1, #40]	; 0x28
   2697c:	ldr	r4, [r1, #24]
   26980:	ldr	ip, [r1]
   26984:	add	r6, r7, #1
   26988:	add	r7, r7, r4
   2698c:	str	r6, [r1, #40]	; 0x28
   26990:	ldrb	r4, [ip, r7]
   26994:	ldr	r7, [r1, #56]	; 0x38
   26998:	cmp	r7, r6
   2699c:	bgt	26884 <__assert_fail@plt+0x14bd8>
   269a0:	b	26a5c <__assert_fail@plt+0x14db0>
   269a4:	add	r6, ip, #1
   269a8:	str	r6, [r1, #40]	; 0x28
   269ac:	ldr	r7, [r1, #4]
   269b0:	ldrb	r4, [r7, ip]
   269b4:	ldr	r7, [r1, #56]	; 0x38
   269b8:	cmp	r7, r6
   269bc:	bgt	26884 <__assert_fail@plt+0x14bd8>
   269c0:	b	26a5c <__assert_fail@plt+0x14db0>
   269c4:	add	r0, r6, #1
   269c8:	str	r0, [r1, #40]	; 0x28
   269cc:	mov	r0, #0
   269d0:	ldr	r1, [r9, #4]
   269d4:	strb	r0, [r1, r2]
   269d8:	ldrb	r1, [r5, #4]
   269dc:	cmp	r1, #30
   269e0:	beq	26a04 <__assert_fail@plt+0x14d58>
   269e4:	cmp	r1, #28
   269e8:	beq	26a14 <__assert_fail@plt+0x14d68>
   269ec:	cmp	r1, #26
   269f0:	bne	26a5c <__assert_fail@plt+0x14db0>
   269f4:	mov	r1, #3
   269f8:	str	r1, [r9]
   269fc:	sub	sp, fp, #24
   26a00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26a04:	mov	r1, #4
   26a08:	str	r1, [r9]
   26a0c:	sub	sp, fp, #24
   26a10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26a14:	mov	r1, #2
   26a18:	str	r1, [r9]
   26a1c:	sub	sp, fp, #24
   26a20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26a24:	ldr	r0, [fp, #12]
   26a28:	cmp	r0, #0
   26a2c:	bne	26a4c <__assert_fail@plt+0x14da0>
   26a30:	ldr	r2, [fp, #8]
   26a34:	mov	r0, sp
   26a38:	bl	265b0 <__assert_fail@plt+0x14904>
   26a3c:	ldrb	r1, [sp, #4]
   26a40:	mov	r0, #11
   26a44:	cmp	r1, #21
   26a48:	bne	26a5c <__assert_fail@plt+0x14db0>
   26a4c:	mov	r0, #0
   26a50:	str	r0, [r9]
   26a54:	ldrb	r1, [r5]
   26a58:	strb	r1, [r9, #4]
   26a5c:	sub	sp, fp, #24
   26a60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26a64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26a68:	add	fp, sp, #24
   26a6c:	mov	r8, r0
   26a70:	ldrb	r0, [fp, #14]
   26a74:	ldr	r6, [fp, #8]
   26a78:	mov	r5, r3
   26a7c:	mov	r7, r2
   26a80:	mov	r4, r1
   26a84:	tst	r0, #64	; 0x40
   26a88:	beq	26ac4 <__assert_fail@plt+0x14e18>
   26a8c:	movw	r1, #20212	; 0x4ef4
   26a90:	mov	r0, r6
   26a94:	movt	r1, #3
   26a98:	bl	1185c <strcmp@plt>
   26a9c:	cmp	r0, #0
   26aa0:	beq	26abc <__assert_fail@plt+0x14e10>
   26aa4:	movw	r1, #20218	; 0x4efa
   26aa8:	mov	r0, r6
   26aac:	movt	r1, #3
   26ab0:	bl	1185c <strcmp@plt>
   26ab4:	cmp	r0, #0
   26ab8:	bne	26ac4 <__assert_fail@plt+0x14e18>
   26abc:	movw	r6, #20224	; 0x4f00
   26ac0:	movt	r6, #3
   26ac4:	ldr	r0, [r5]
   26ac8:	ldr	r1, [r7, #36]	; 0x24
   26acc:	cmp	r0, r1
   26ad0:	beq	27098 <__assert_fail@plt+0x153ec>
   26ad4:	mov	r0, r6
   26ad8:	bl	1182c <wctype@plt>
   26adc:	ldr	r2, [r7, #36]	; 0x24
   26ae0:	ldr	r1, [r7, #12]
   26ae4:	add	r3, r2, #1
   26ae8:	str	r3, [r7, #36]	; 0x24
   26aec:	str	r0, [r1, r2, lsl #2]
   26af0:	movw	r1, #20198	; 0x4ee6
   26af4:	mov	r0, r6
   26af8:	movt	r1, #3
   26afc:	bl	1185c <strcmp@plt>
   26b00:	cmp	r0, #0
   26b04:	beq	26c34 <__assert_fail@plt+0x14f88>
   26b08:	movw	r1, #20230	; 0x4f06
   26b0c:	mov	r0, r6
   26b10:	movt	r1, #3
   26b14:	bl	1185c <strcmp@plt>
   26b18:	cmp	r0, #0
   26b1c:	beq	26ca0 <__assert_fail@plt+0x14ff4>
   26b20:	movw	r1, #20218	; 0x4efa
   26b24:	mov	r0, r6
   26b28:	movt	r1, #3
   26b2c:	bl	1185c <strcmp@plt>
   26b30:	cmp	r0, #0
   26b34:	beq	26d0c <__assert_fail@plt+0x15060>
   26b38:	movw	r1, #20206	; 0x4eee
   26b3c:	mov	r0, r6
   26b40:	movt	r1, #3
   26b44:	bl	1185c <strcmp@plt>
   26b48:	cmp	r0, #0
   26b4c:	beq	26d78 <__assert_fail@plt+0x150cc>
   26b50:	movw	r1, #20224	; 0x4f00
   26b54:	mov	r0, r6
   26b58:	movt	r1, #3
   26b5c:	bl	1185c <strcmp@plt>
   26b60:	cmp	r0, #0
   26b64:	beq	26e1c <__assert_fail@plt+0x15170>
   26b68:	movw	r1, #20255	; 0x4f1f
   26b6c:	mov	r0, r6
   26b70:	movt	r1, #3
   26b74:	bl	1185c <strcmp@plt>
   26b78:	cmp	r0, #0
   26b7c:	beq	26e88 <__assert_fail@plt+0x151dc>
   26b80:	movw	r1, #14323	; 0x37f3
   26b84:	mov	r0, r6
   26b88:	movt	r1, #3
   26b8c:	bl	1185c <strcmp@plt>
   26b90:	cmp	r0, #0
   26b94:	beq	26ef4 <__assert_fail@plt+0x15248>
   26b98:	movw	r1, #20212	; 0x4ef4
   26b9c:	mov	r0, r6
   26ba0:	movt	r1, #3
   26ba4:	bl	1185c <strcmp@plt>
   26ba8:	cmp	r0, #0
   26bac:	beq	26f48 <__assert_fail@plt+0x1529c>
   26bb0:	movw	r1, #20236	; 0x4f0c
   26bb4:	mov	r0, r6
   26bb8:	movt	r1, #3
   26bbc:	bl	1185c <strcmp@plt>
   26bc0:	cmp	r0, #0
   26bc4:	beq	26f9c <__assert_fail@plt+0x152f0>
   26bc8:	movw	r1, #20242	; 0x4f12
   26bcc:	mov	r0, r6
   26bd0:	movt	r1, #3
   26bd4:	bl	1185c <strcmp@plt>
   26bd8:	cmp	r0, #0
   26bdc:	beq	26ff0 <__assert_fail@plt+0x15344>
   26be0:	movw	r1, #20248	; 0x4f18
   26be4:	mov	r0, r6
   26be8:	movt	r1, #3
   26bec:	bl	1185c <strcmp@plt>
   26bf0:	cmp	r0, #0
   26bf4:	beq	27044 <__assert_fail@plt+0x15398>
   26bf8:	movw	r1, #20254	; 0x4f1e
   26bfc:	mov	r0, r6
   26c00:	movt	r1, #3
   26c04:	bl	1185c <strcmp@plt>
   26c08:	mov	r1, r0
   26c0c:	mov	r0, #4
   26c10:	cmp	r1, #0
   26c14:	bne	27408 <__assert_fail@plt+0x1575c>
   26c18:	bl	11a84 <__ctype_b_loc@plt>
   26c1c:	ldr	r1, [r0]
   26c20:	mov	r2, #0
   26c24:	mov	r3, #1
   26c28:	cmp	r8, #0
   26c2c:	beq	26df8 <__assert_fail@plt+0x1514c>
   26c30:	b	27340 <__assert_fail@plt+0x15694>
   26c34:	bl	11a84 <__ctype_b_loc@plt>
   26c38:	ldr	r1, [r0]
   26c3c:	cmp	r8, #0
   26c40:	bne	27138 <__assert_fail@plt+0x1548c>
   26c44:	mov	r0, #0
   26c48:	mov	r2, #1
   26c4c:	ldrb	r3, [r1]
   26c50:	tst	r3, #8
   26c54:	bne	26c74 <__assert_fail@plt+0x14fc8>
   26c58:	add	r0, r0, #1
   26c5c:	add	r1, r1, #2
   26c60:	cmp	r0, #256	; 0x100
   26c64:	beq	26c98 <__assert_fail@plt+0x14fec>
   26c68:	ldrb	r3, [r1]
   26c6c:	tst	r3, #8
   26c70:	beq	26c58 <__assert_fail@plt+0x14fac>
   26c74:	ubfx	r3, r0, #5, #3
   26c78:	and	r6, r0, #31
   26c7c:	ldr	r7, [r4, r3, lsl #2]
   26c80:	orr	r7, r7, r2, lsl r6
   26c84:	str	r7, [r4, r3, lsl #2]
   26c88:	add	r0, r0, #1
   26c8c:	add	r1, r1, #2
   26c90:	cmp	r0, #256	; 0x100
   26c94:	bne	26c68 <__assert_fail@plt+0x14fbc>
   26c98:	mov	r0, #0
   26c9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26ca0:	bl	11a84 <__ctype_b_loc@plt>
   26ca4:	ldr	r1, [r0]
   26ca8:	cmp	r8, #0
   26cac:	bne	271c4 <__assert_fail@plt+0x15518>
   26cb0:	mov	r0, #0
   26cb4:	mov	r2, #1
   26cb8:	ldrb	r3, [r1]
   26cbc:	tst	r3, #2
   26cc0:	bne	26ce0 <__assert_fail@plt+0x15034>
   26cc4:	add	r0, r0, #1
   26cc8:	add	r1, r1, #2
   26ccc:	cmp	r0, #256	; 0x100
   26cd0:	beq	26d04 <__assert_fail@plt+0x15058>
   26cd4:	ldrb	r3, [r1]
   26cd8:	tst	r3, #2
   26cdc:	beq	26cc4 <__assert_fail@plt+0x15018>
   26ce0:	ubfx	r3, r0, #5, #3
   26ce4:	and	r6, r0, #31
   26ce8:	ldr	r7, [r4, r3, lsl #2]
   26cec:	orr	r7, r7, r2, lsl r6
   26cf0:	str	r7, [r4, r3, lsl #2]
   26cf4:	add	r0, r0, #1
   26cf8:	add	r1, r1, #2
   26cfc:	cmp	r0, #256	; 0x100
   26d00:	bne	26cd4 <__assert_fail@plt+0x15028>
   26d04:	mov	r0, #0
   26d08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26d0c:	bl	11a84 <__ctype_b_loc@plt>
   26d10:	ldr	r1, [r0]
   26d14:	cmp	r8, #0
   26d18:	bne	27250 <__assert_fail@plt+0x155a4>
   26d1c:	mov	r0, #0
   26d20:	mov	r2, #1
   26d24:	ldrb	r3, [r1, #1]
   26d28:	tst	r3, #2
   26d2c:	bne	26d4c <__assert_fail@plt+0x150a0>
   26d30:	add	r0, r0, #1
   26d34:	add	r1, r1, #2
   26d38:	cmp	r0, #256	; 0x100
   26d3c:	beq	26d70 <__assert_fail@plt+0x150c4>
   26d40:	ldrb	r3, [r1, #1]
   26d44:	tst	r3, #2
   26d48:	beq	26d30 <__assert_fail@plt+0x15084>
   26d4c:	ubfx	r3, r0, #5, #3
   26d50:	and	r6, r0, #31
   26d54:	ldr	r7, [r4, r3, lsl #2]
   26d58:	orr	r7, r7, r2, lsl r6
   26d5c:	str	r7, [r4, r3, lsl #2]
   26d60:	add	r0, r0, #1
   26d64:	add	r1, r1, #2
   26d68:	cmp	r0, #256	; 0x100
   26d6c:	bne	26d40 <__assert_fail@plt+0x15094>
   26d70:	mov	r0, #0
   26d74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26d78:	bl	11a84 <__ctype_b_loc@plt>
   26d7c:	ldr	r1, [r0]
   26d80:	cmp	r8, #0
   26d84:	bne	272dc <__assert_fail@plt+0x15630>
   26d88:	mov	r0, #0
   26d8c:	mov	r2, #1
   26d90:	ldrb	r3, [r1, #1]
   26d94:	tst	r3, #32
   26d98:	bne	26db8 <__assert_fail@plt+0x1510c>
   26d9c:	add	r0, r0, #1
   26da0:	add	r1, r1, #2
   26da4:	cmp	r0, #256	; 0x100
   26da8:	beq	26ddc <__assert_fail@plt+0x15130>
   26dac:	ldrb	r3, [r1, #1]
   26db0:	tst	r3, #32
   26db4:	beq	26d9c <__assert_fail@plt+0x150f0>
   26db8:	ubfx	r3, r0, #5, #3
   26dbc:	and	r6, r0, #31
   26dc0:	ldr	r7, [r4, r3, lsl #2]
   26dc4:	orr	r7, r7, r2, lsl r6
   26dc8:	str	r7, [r4, r3, lsl #2]
   26dcc:	add	r0, r0, #1
   26dd0:	add	r1, r1, #2
   26dd4:	cmp	r0, #256	; 0x100
   26dd8:	bne	26dac <__assert_fail@plt+0x15100>
   26ddc:	mov	r0, #0
   26de0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26de4:	add	r2, r2, #1
   26de8:	add	r1, r1, #2
   26dec:	mov	r0, #0
   26df0:	cmp	r2, #256	; 0x100
   26df4:	beq	27408 <__assert_fail@plt+0x1575c>
   26df8:	ldrb	r0, [r1, #1]
   26dfc:	tst	r0, #16
   26e00:	beq	26de4 <__assert_fail@plt+0x15138>
   26e04:	ubfx	r0, r2, #5, #3
   26e08:	and	r6, r2, #31
   26e0c:	ldr	r7, [r4, r0, lsl #2]
   26e10:	orr	r7, r7, r3, lsl r6
   26e14:	str	r7, [r4, r0, lsl #2]
   26e18:	b	26de4 <__assert_fail@plt+0x15138>
   26e1c:	bl	11a84 <__ctype_b_loc@plt>
   26e20:	ldr	r1, [r0]
   26e24:	cmp	r8, #0
   26e28:	bne	27368 <__assert_fail@plt+0x156bc>
   26e2c:	mov	r0, #0
   26e30:	mov	r2, #1
   26e34:	ldrb	r3, [r1, #1]
   26e38:	tst	r3, #4
   26e3c:	bne	26e5c <__assert_fail@plt+0x151b0>
   26e40:	add	r0, r0, #1
   26e44:	add	r1, r1, #2
   26e48:	cmp	r0, #256	; 0x100
   26e4c:	beq	26e80 <__assert_fail@plt+0x151d4>
   26e50:	ldrb	r3, [r1, #1]
   26e54:	tst	r3, #4
   26e58:	beq	26e40 <__assert_fail@plt+0x15194>
   26e5c:	ubfx	r3, r0, #5, #3
   26e60:	and	r6, r0, #31
   26e64:	ldr	r7, [r4, r3, lsl #2]
   26e68:	orr	r7, r7, r2, lsl r6
   26e6c:	str	r7, [r4, r3, lsl #2]
   26e70:	add	r0, r0, #1
   26e74:	add	r1, r1, #2
   26e78:	cmp	r0, #256	; 0x100
   26e7c:	bne	26e50 <__assert_fail@plt+0x151a4>
   26e80:	mov	r0, #0
   26e84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26e88:	bl	11a84 <__ctype_b_loc@plt>
   26e8c:	ldr	r1, [r0]
   26e90:	cmp	r8, #0
   26e94:	bne	273b8 <__assert_fail@plt+0x1570c>
   26e98:	mov	r0, #0
   26e9c:	mov	r2, #1
   26ea0:	ldrb	r3, [r1, #1]
   26ea4:	tst	r3, #8
   26ea8:	bne	26ec8 <__assert_fail@plt+0x1521c>
   26eac:	add	r0, r0, #1
   26eb0:	add	r1, r1, #2
   26eb4:	cmp	r0, #256	; 0x100
   26eb8:	beq	26eec <__assert_fail@plt+0x15240>
   26ebc:	ldrb	r3, [r1, #1]
   26ec0:	tst	r3, #8
   26ec4:	beq	26eac <__assert_fail@plt+0x15200>
   26ec8:	ubfx	r3, r0, #5, #3
   26ecc:	and	r6, r0, #31
   26ed0:	ldr	r7, [r4, r3, lsl #2]
   26ed4:	orr	r7, r7, r2, lsl r6
   26ed8:	str	r7, [r4, r3, lsl #2]
   26edc:	add	r0, r0, #1
   26ee0:	add	r1, r1, #2
   26ee4:	cmp	r0, #256	; 0x100
   26ee8:	bne	26ebc <__assert_fail@plt+0x15210>
   26eec:	mov	r0, #0
   26ef0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26ef4:	bl	11a84 <__ctype_b_loc@plt>
   26ef8:	ldr	r1, [r0]
   26efc:	mov	r2, #0
   26f00:	mov	r3, #1
   26f04:	cmp	r8, #0
   26f08:	beq	26f24 <__assert_fail@plt+0x15278>
   26f0c:	b	270d4 <__assert_fail@plt+0x15428>
   26f10:	add	r2, r2, #1
   26f14:	add	r1, r1, #2
   26f18:	mov	r0, #0
   26f1c:	cmp	r2, #256	; 0x100
   26f20:	beq	27408 <__assert_fail@plt+0x1575c>
   26f24:	ldrb	r0, [r1, #1]
   26f28:	tst	r0, #64	; 0x40
   26f2c:	beq	26f10 <__assert_fail@plt+0x15264>
   26f30:	ubfx	r0, r2, #5, #3
   26f34:	and	r6, r2, #31
   26f38:	ldr	r7, [r4, r0, lsl #2]
   26f3c:	orr	r7, r7, r3, lsl r6
   26f40:	str	r7, [r4, r0, lsl #2]
   26f44:	b	26f10 <__assert_fail@plt+0x15264>
   26f48:	bl	11a84 <__ctype_b_loc@plt>
   26f4c:	ldr	r1, [r0]
   26f50:	mov	r2, #0
   26f54:	mov	r3, #1
   26f58:	cmp	r8, #0
   26f5c:	beq	26f78 <__assert_fail@plt+0x152cc>
   26f60:	b	27110 <__assert_fail@plt+0x15464>
   26f64:	add	r2, r2, #1
   26f68:	add	r1, r1, #2
   26f6c:	mov	r0, #0
   26f70:	cmp	r2, #256	; 0x100
   26f74:	beq	27408 <__assert_fail@plt+0x1575c>
   26f78:	ldrb	r0, [r1, #1]
   26f7c:	tst	r0, #1
   26f80:	beq	26f64 <__assert_fail@plt+0x152b8>
   26f84:	ubfx	r0, r2, #5, #3
   26f88:	and	r6, r2, #31
   26f8c:	ldr	r7, [r4, r0, lsl #2]
   26f90:	orr	r7, r7, r3, lsl r6
   26f94:	str	r7, [r4, r0, lsl #2]
   26f98:	b	26f64 <__assert_fail@plt+0x152b8>
   26f9c:	bl	11a84 <__ctype_b_loc@plt>
   26fa0:	ldr	r1, [r0]
   26fa4:	mov	r2, #0
   26fa8:	mov	r3, #1
   26fac:	cmp	r8, #0
   26fb0:	beq	26fcc <__assert_fail@plt+0x15320>
   26fb4:	b	2719c <__assert_fail@plt+0x154f0>
   26fb8:	add	r2, r2, #1
   26fbc:	add	r1, r1, #2
   26fc0:	mov	r0, #0
   26fc4:	cmp	r2, #256	; 0x100
   26fc8:	beq	27408 <__assert_fail@plt+0x1575c>
   26fcc:	ldrb	r0, [r1]
   26fd0:	tst	r0, #1
   26fd4:	beq	26fb8 <__assert_fail@plt+0x1530c>
   26fd8:	ubfx	r0, r2, #5, #3
   26fdc:	and	r6, r2, #31
   26fe0:	ldr	r7, [r4, r0, lsl #2]
   26fe4:	orr	r7, r7, r3, lsl r6
   26fe8:	str	r7, [r4, r0, lsl #2]
   26fec:	b	26fb8 <__assert_fail@plt+0x1530c>
   26ff0:	bl	11a84 <__ctype_b_loc@plt>
   26ff4:	ldr	r1, [r0]
   26ff8:	mov	r2, #0
   26ffc:	mov	r3, #1
   27000:	cmp	r8, #0
   27004:	beq	27020 <__assert_fail@plt+0x15374>
   27008:	b	27228 <__assert_fail@plt+0x1557c>
   2700c:	add	r2, r2, #1
   27010:	add	r1, r1, #2
   27014:	mov	r0, #0
   27018:	cmp	r2, #256	; 0x100
   2701c:	beq	27408 <__assert_fail@plt+0x1575c>
   27020:	ldrsh	r0, [r1]
   27024:	cmn	r0, #1
   27028:	bgt	2700c <__assert_fail@plt+0x15360>
   2702c:	ubfx	r0, r2, #5, #3
   27030:	and	r6, r2, #31
   27034:	ldr	r7, [r4, r0, lsl #2]
   27038:	orr	r7, r7, r3, lsl r6
   2703c:	str	r7, [r4, r0, lsl #2]
   27040:	b	2700c <__assert_fail@plt+0x15360>
   27044:	bl	11a84 <__ctype_b_loc@plt>
   27048:	ldr	r1, [r0]
   2704c:	mov	r2, #0
   27050:	mov	r3, #1
   27054:	cmp	r8, #0
   27058:	beq	27074 <__assert_fail@plt+0x153c8>
   2705c:	b	272b4 <__assert_fail@plt+0x15608>
   27060:	add	r2, r2, #1
   27064:	add	r1, r1, #2
   27068:	mov	r0, #0
   2706c:	cmp	r2, #256	; 0x100
   27070:	beq	27408 <__assert_fail@plt+0x1575c>
   27074:	ldrb	r0, [r1]
   27078:	tst	r0, #4
   2707c:	beq	27060 <__assert_fail@plt+0x153b4>
   27080:	ubfx	r0, r2, #5, #3
   27084:	and	r6, r2, #31
   27088:	ldr	r7, [r4, r0, lsl #2]
   2708c:	orr	r7, r7, r3, lsl r6
   27090:	str	r7, [r4, r0, lsl #2]
   27094:	b	27060 <__assert_fail@plt+0x153b4>
   27098:	mov	r1, #1
   2709c:	orr	r9, r1, r0, lsl #1
   270a0:	ldr	r0, [r7, #12]
   270a4:	lsl	r1, r9, #2
   270a8:	bl	1c388 <__assert_fail@plt+0xa6dc>
   270ac:	cmp	r0, #0
   270b0:	beq	2740c <__assert_fail@plt+0x15760>
   270b4:	str	r0, [r7, #12]
   270b8:	str	r9, [r5]
   270bc:	b	26ad4 <__assert_fail@plt+0x14e28>
   270c0:	add	r2, r2, #1
   270c4:	add	r1, r1, #2
   270c8:	mov	r0, #0
   270cc:	cmp	r2, #256	; 0x100
   270d0:	beq	27408 <__assert_fail@plt+0x1575c>
   270d4:	ldrb	r0, [r1, #1]
   270d8:	tst	r0, #64	; 0x40
   270dc:	beq	270c0 <__assert_fail@plt+0x15414>
   270e0:	ldrb	r0, [r8, r2]
   270e4:	ubfx	r7, r0, #5, #3
   270e8:	and	r0, r0, #31
   270ec:	ldr	r6, [r4, r7, lsl #2]
   270f0:	orr	r0, r6, r3, lsl r0
   270f4:	str	r0, [r4, r7, lsl #2]
   270f8:	b	270c0 <__assert_fail@plt+0x15414>
   270fc:	add	r2, r2, #1
   27100:	add	r1, r1, #2
   27104:	mov	r0, #0
   27108:	cmp	r2, #256	; 0x100
   2710c:	beq	27408 <__assert_fail@plt+0x1575c>
   27110:	ldrb	r0, [r1, #1]
   27114:	tst	r0, #1
   27118:	beq	270fc <__assert_fail@plt+0x15450>
   2711c:	ldrb	r0, [r8, r2]
   27120:	ubfx	r7, r0, #5, #3
   27124:	and	r0, r0, #31
   27128:	ldr	r6, [r4, r7, lsl #2]
   2712c:	orr	r0, r6, r3, lsl r0
   27130:	str	r0, [r4, r7, lsl #2]
   27134:	b	270fc <__assert_fail@plt+0x15450>
   27138:	mov	r2, #0
   2713c:	mov	r3, #1
   27140:	ldrb	r0, [r1]
   27144:	tst	r0, #8
   27148:	bne	2716c <__assert_fail@plt+0x154c0>
   2714c:	add	r2, r2, #1
   27150:	add	r1, r1, #2
   27154:	mov	r0, #0
   27158:	cmp	r2, #256	; 0x100
   2715c:	beq	27408 <__assert_fail@plt+0x1575c>
   27160:	ldrb	r0, [r1]
   27164:	tst	r0, #8
   27168:	beq	2714c <__assert_fail@plt+0x154a0>
   2716c:	ldrb	r0, [r8, r2]
   27170:	ubfx	r7, r0, #5, #3
   27174:	and	r0, r0, #31
   27178:	ldr	r6, [r4, r7, lsl #2]
   2717c:	orr	r0, r6, r3, lsl r0
   27180:	str	r0, [r4, r7, lsl #2]
   27184:	b	2714c <__assert_fail@plt+0x154a0>
   27188:	add	r2, r2, #1
   2718c:	add	r1, r1, #2
   27190:	mov	r0, #0
   27194:	cmp	r2, #256	; 0x100
   27198:	beq	27408 <__assert_fail@plt+0x1575c>
   2719c:	ldrb	r0, [r1]
   271a0:	tst	r0, #1
   271a4:	beq	27188 <__assert_fail@plt+0x154dc>
   271a8:	ldrb	r0, [r8, r2]
   271ac:	ubfx	r7, r0, #5, #3
   271b0:	and	r0, r0, #31
   271b4:	ldr	r6, [r4, r7, lsl #2]
   271b8:	orr	r0, r6, r3, lsl r0
   271bc:	str	r0, [r4, r7, lsl #2]
   271c0:	b	27188 <__assert_fail@plt+0x154dc>
   271c4:	mov	r2, #0
   271c8:	mov	r3, #1
   271cc:	ldrb	r0, [r1]
   271d0:	tst	r0, #2
   271d4:	bne	271f8 <__assert_fail@plt+0x1554c>
   271d8:	add	r2, r2, #1
   271dc:	add	r1, r1, #2
   271e0:	mov	r0, #0
   271e4:	cmp	r2, #256	; 0x100
   271e8:	beq	27408 <__assert_fail@plt+0x1575c>
   271ec:	ldrb	r0, [r1]
   271f0:	tst	r0, #2
   271f4:	beq	271d8 <__assert_fail@plt+0x1552c>
   271f8:	ldrb	r0, [r8, r2]
   271fc:	ubfx	r7, r0, #5, #3
   27200:	and	r0, r0, #31
   27204:	ldr	r6, [r4, r7, lsl #2]
   27208:	orr	r0, r6, r3, lsl r0
   2720c:	str	r0, [r4, r7, lsl #2]
   27210:	b	271d8 <__assert_fail@plt+0x1552c>
   27214:	add	r2, r2, #1
   27218:	add	r1, r1, #2
   2721c:	mov	r0, #0
   27220:	cmp	r2, #256	; 0x100
   27224:	beq	27408 <__assert_fail@plt+0x1575c>
   27228:	ldrsh	r0, [r1]
   2722c:	cmn	r0, #1
   27230:	bgt	27214 <__assert_fail@plt+0x15568>
   27234:	ldrb	r0, [r8, r2]
   27238:	ubfx	r7, r0, #5, #3
   2723c:	and	r0, r0, #31
   27240:	ldr	r6, [r4, r7, lsl #2]
   27244:	orr	r0, r6, r3, lsl r0
   27248:	str	r0, [r4, r7, lsl #2]
   2724c:	b	27214 <__assert_fail@plt+0x15568>
   27250:	mov	r2, #0
   27254:	mov	r3, #1
   27258:	ldrb	r0, [r1, #1]
   2725c:	tst	r0, #2
   27260:	bne	27284 <__assert_fail@plt+0x155d8>
   27264:	add	r2, r2, #1
   27268:	add	r1, r1, #2
   2726c:	mov	r0, #0
   27270:	cmp	r2, #256	; 0x100
   27274:	beq	27408 <__assert_fail@plt+0x1575c>
   27278:	ldrb	r0, [r1, #1]
   2727c:	tst	r0, #2
   27280:	beq	27264 <__assert_fail@plt+0x155b8>
   27284:	ldrb	r0, [r8, r2]
   27288:	ubfx	r7, r0, #5, #3
   2728c:	and	r0, r0, #31
   27290:	ldr	r6, [r4, r7, lsl #2]
   27294:	orr	r0, r6, r3, lsl r0
   27298:	str	r0, [r4, r7, lsl #2]
   2729c:	b	27264 <__assert_fail@plt+0x155b8>
   272a0:	add	r2, r2, #1
   272a4:	add	r1, r1, #2
   272a8:	mov	r0, #0
   272ac:	cmp	r2, #256	; 0x100
   272b0:	beq	27408 <__assert_fail@plt+0x1575c>
   272b4:	ldrb	r0, [r1]
   272b8:	tst	r0, #4
   272bc:	beq	272a0 <__assert_fail@plt+0x155f4>
   272c0:	ldrb	r0, [r8, r2]
   272c4:	ubfx	r7, r0, #5, #3
   272c8:	and	r0, r0, #31
   272cc:	ldr	r6, [r4, r7, lsl #2]
   272d0:	orr	r0, r6, r3, lsl r0
   272d4:	str	r0, [r4, r7, lsl #2]
   272d8:	b	272a0 <__assert_fail@plt+0x155f4>
   272dc:	mov	r2, #0
   272e0:	mov	r3, #1
   272e4:	ldrb	r0, [r1, #1]
   272e8:	tst	r0, #32
   272ec:	bne	27310 <__assert_fail@plt+0x15664>
   272f0:	add	r2, r2, #1
   272f4:	add	r1, r1, #2
   272f8:	mov	r0, #0
   272fc:	cmp	r2, #256	; 0x100
   27300:	beq	27408 <__assert_fail@plt+0x1575c>
   27304:	ldrb	r0, [r1, #1]
   27308:	tst	r0, #32
   2730c:	beq	272f0 <__assert_fail@plt+0x15644>
   27310:	ldrb	r0, [r8, r2]
   27314:	ubfx	r7, r0, #5, #3
   27318:	and	r0, r0, #31
   2731c:	ldr	r6, [r4, r7, lsl #2]
   27320:	orr	r0, r6, r3, lsl r0
   27324:	str	r0, [r4, r7, lsl #2]
   27328:	b	272f0 <__assert_fail@plt+0x15644>
   2732c:	add	r2, r2, #1
   27330:	add	r1, r1, #2
   27334:	mov	r0, #0
   27338:	cmp	r2, #256	; 0x100
   2733c:	beq	27408 <__assert_fail@plt+0x1575c>
   27340:	ldrb	r0, [r1, #1]
   27344:	tst	r0, #16
   27348:	beq	2732c <__assert_fail@plt+0x15680>
   2734c:	ldrb	r0, [r8, r2]
   27350:	ubfx	r7, r0, #5, #3
   27354:	and	r0, r0, #31
   27358:	ldr	r6, [r4, r7, lsl #2]
   2735c:	orr	r0, r6, r3, lsl r0
   27360:	str	r0, [r4, r7, lsl #2]
   27364:	b	2732c <__assert_fail@plt+0x15680>
   27368:	mov	r2, #0
   2736c:	mov	r3, #1
   27370:	ldrb	r0, [r1, #1]
   27374:	tst	r0, #4
   27378:	bne	2739c <__assert_fail@plt+0x156f0>
   2737c:	add	r2, r2, #1
   27380:	add	r1, r1, #2
   27384:	mov	r0, #0
   27388:	cmp	r2, #256	; 0x100
   2738c:	beq	27408 <__assert_fail@plt+0x1575c>
   27390:	ldrb	r0, [r1, #1]
   27394:	tst	r0, #4
   27398:	beq	2737c <__assert_fail@plt+0x156d0>
   2739c:	ldrb	r0, [r8, r2]
   273a0:	ubfx	r7, r0, #5, #3
   273a4:	and	r0, r0, #31
   273a8:	ldr	r6, [r4, r7, lsl #2]
   273ac:	orr	r0, r6, r3, lsl r0
   273b0:	str	r0, [r4, r7, lsl #2]
   273b4:	b	2737c <__assert_fail@plt+0x156d0>
   273b8:	mov	r2, #0
   273bc:	mov	r3, #1
   273c0:	ldrb	r0, [r1, #1]
   273c4:	tst	r0, #8
   273c8:	bne	273ec <__assert_fail@plt+0x15740>
   273cc:	add	r2, r2, #1
   273d0:	add	r1, r1, #2
   273d4:	mov	r0, #0
   273d8:	cmp	r2, #256	; 0x100
   273dc:	beq	27408 <__assert_fail@plt+0x1575c>
   273e0:	ldrb	r0, [r1, #1]
   273e4:	tst	r0, #8
   273e8:	beq	273cc <__assert_fail@plt+0x15720>
   273ec:	ldrb	r0, [r8, r2]
   273f0:	ubfx	r7, r0, #5, #3
   273f4:	and	r0, r0, #31
   273f8:	ldr	r6, [r4, r7, lsl #2]
   273fc:	orr	r0, r6, r3, lsl r0
   27400:	str	r0, [r4, r7, lsl #2]
   27404:	b	273cc <__assert_fail@plt+0x15720>
   27408:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2740c:	mov	r0, #12
   27410:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27414:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   27418:	add	fp, sp, #24
   2741c:	ldr	r3, [r1, #24]
   27420:	mvn	r7, #1
   27424:	ldr	r2, [r1, #28]
   27428:	mov	r4, #0
   2742c:	uxtab	r3, r7, r3
   27430:	cmp	r3, #14
   27434:	bhi	27558 <__assert_fail@plt+0x158ac>
   27438:	add	r7, pc, #0
   2743c:	ldr	pc, [r7, r3, lsl #2]
   27440:	andeq	r7, r2, ip, lsl #11
   27444:	andeq	r7, r2, r8, asr r5
   27448:	andeq	r7, r2, r0, ror r5
   2744c:	andeq	r7, r2, r8, asr r5
   27450:	andeq	r7, r2, r8, asr r5
   27454:	andeq	r7, r2, r8, asr r5
   27458:	andeq	r7, r2, ip, ror r4
   2745c:	andeq	r7, r2, ip, ror r4
   27460:	ldrdeq	r7, [r2], -r0
   27464:	ldrdeq	r7, [r2], -r0
   27468:	andeq	r7, r2, ip, ror r4
   2746c:	andeq	r7, r2, r8, asr r5
   27470:	andeq	r7, r2, r8, asr r5
   27474:	andeq	r7, r2, r8, asr r5
   27478:	andeq	r7, r2, ip, lsl #11
   2747c:	ldr	r1, [r1, #16]
   27480:	ldr	r5, [r1, #28]
   27484:	ldr	r6, [r0, #20]
   27488:	add	r0, r2, r2, lsl #1
   2748c:	mov	r1, #1
   27490:	str	r1, [r6, r0, lsl #2]!
   27494:	mov	r0, #4
   27498:	mov	r7, r6
   2749c:	str	r1, [r7, #4]!
   274a0:	bl	1c2f4 <__assert_fail@plt+0xa648>
   274a4:	cmp	r0, #0
   274a8:	str	r0, [r6, #8]
   274ac:	strne	r5, [r0]
   274b0:	movne	r0, r4
   274b4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   274b8:	mov	r0, #0
   274bc:	str	r0, [r7]
   274c0:	str	r0, [r6]
   274c4:	mov	r4, #12
   274c8:	mov	r0, r4
   274cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   274d0:	ldrb	r3, [r0, #88]	; 0x58
   274d4:	add	r6, r1, #16
   274d8:	add	r5, r2, r2, lsl #1
   274dc:	orr	r3, r3, #1
   274e0:	strb	r3, [r0, #88]	; 0x58
   274e4:	mov	r3, r6
   274e8:	ldr	r7, [r1, #4]
   274ec:	ldr	r1, [r1, #8]
   274f0:	cmp	r1, #0
   274f4:	addne	r3, r1, #12
   274f8:	cmp	r7, #0
   274fc:	ldr	r1, [r3]
   27500:	addne	r6, r7, #12
   27504:	ldr	r8, [r1, #28]
   27508:	ldr	r1, [r6]
   2750c:	ldr	r6, [r0, #20]
   27510:	mov	r0, #2
   27514:	ldr	r9, [r1, #28]
   27518:	mov	r7, r6
   2751c:	str	r0, [r7, r5, lsl #2]!
   27520:	mov	r0, #8
   27524:	bl	1c2f4 <__assert_fail@plt+0xa648>
   27528:	cmp	r0, #0
   2752c:	str	r0, [r7, #8]
   27530:	beq	274c4 <__assert_fail@plt+0x15818>
   27534:	add	r1, r6, r5, lsl #2
   27538:	cmp	r9, r8
   2753c:	add	r1, r1, #4
   27540:	bne	27594 <__assert_fail@plt+0x158e8>
   27544:	mov	r2, #1
   27548:	str	r2, [r1]
   2754c:	str	r9, [r0]
   27550:	mov	r0, r4
   27554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27558:	ldr	r1, [r1, #16]
   2755c:	ldr	r0, [r0, #12]
   27560:	ldr	r1, [r1, #28]
   27564:	str	r1, [r0, r2, lsl #2]
   27568:	mov	r0, r4
   2756c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27570:	ldr	r7, [r1, #16]
   27574:	ldr	r3, [r0, #12]
   27578:	ldr	r5, [r7, #28]
   2757c:	str	r5, [r3, r2, lsl #2]
   27580:	ldrb	r1, [r1, #24]
   27584:	cmp	r1, #4
   27588:	beq	27484 <__assert_fail@plt+0x157d8>
   2758c:	mov	r0, r4
   27590:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27594:	mov	r2, #2
   27598:	str	r2, [r1]
   2759c:	stmcs	r0, {r8, r9}
   275a0:	strcc	r9, [r0]
   275a4:	strcc	r8, [r0, #4]
   275a8:	mov	r0, r4
   275ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   275b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275b4:	add	fp, sp, #28
   275b8:	sub	sp, sp, #4
   275bc:	ldr	r6, [r3, #4]
   275c0:	tst	r2, #16
   275c4:	mov	r9, r3
   275c8:	mov	r7, r1
   275cc:	mov	r8, r0
   275d0:	cmpne	r6, #0
   275d4:	bne	2778c <__assert_fail@plt+0x15ae0>
   275d8:	ldr	r1, [r7, #64]	; 0x40
   275dc:	cmp	r1, #31
   275e0:	beq	277b4 <__assert_fail@plt+0x15b08>
   275e4:	ldr	r0, [r7, #56]	; 0x38
   275e8:	add	r0, r0, r1, lsl #5
   275ec:	add	r2, r1, #1
   275f0:	vmov.i32	q8, #0	; 0x00000000
   275f4:	mov	r1, #0
   275f8:	str	r2, [r7, #64]	; 0x40
   275fc:	mov	r2, #8
   27600:	add	sl, r0, #4
   27604:	str	r1, [r0, #20]
   27608:	str	r1, [r0, #24]
   2760c:	str	r2, [r0, #28]
   27610:	mov	r0, #28
   27614:	mov	r1, sl
   27618:	vst1.32	{d16-d17}, [r1], r0
   2761c:	mvn	r0, #0
   27620:	str	r0, [r1]
   27624:	ldr	r1, [r7, #64]	; 0x40
   27628:	cmp	r1, #31
   2762c:	beq	27814 <__assert_fail@plt+0x15b68>
   27630:	ldr	r0, [r7, #56]	; 0x38
   27634:	add	r0, r0, r1, lsl #5
   27638:	add	r2, r1, #1
   2763c:	vmov.i32	q8, #0	; 0x00000000
   27640:	mov	r1, #0
   27644:	str	r2, [r7, #64]	; 0x40
   27648:	mov	r2, #9
   2764c:	add	r5, r0, #4
   27650:	str	r1, [r0, #20]
   27654:	str	r1, [r0, #24]
   27658:	str	r2, [r0, #28]
   2765c:	mov	r0, #28
   27660:	mov	r1, r5
   27664:	vst1.32	{d16-d17}, [r1], r0
   27668:	mvn	r0, #0
   2766c:	str	r0, [r1]
   27670:	cmp	r6, #0
   27674:	mov	r4, r5
   27678:	beq	276cc <__assert_fail@plt+0x15a20>
   2767c:	ldr	r1, [r7, #64]	; 0x40
   27680:	cmp	r1, #31
   27684:	beq	277dc <__assert_fail@plt+0x15b30>
   27688:	ldr	r0, [r7, #56]	; 0x38
   2768c:	add	r4, r0, r1, lsl #5
   27690:	add	r2, r1, #1
   27694:	mov	r0, #0
   27698:	cmp	r5, #0
   2769c:	mov	r1, #16
   276a0:	str	r2, [r7, #64]	; 0x40
   276a4:	mvn	r2, #0
   276a8:	str	r0, [r4, #4]!
   276ac:	add	r3, r4, #20
   276b0:	str	r6, [r4, #4]
   276b4:	str	r5, [r4, #8]
   276b8:	str	r0, [r4, #12]
   276bc:	str	r0, [r4, #16]
   276c0:	stm	r3, {r0, r1, r2}
   276c4:	str	r4, [r6]
   276c8:	strne	r4, [r5]
   276cc:	ldr	r1, [r7, #64]	; 0x40
   276d0:	cmp	r1, #31
   276d4:	beq	27860 <__assert_fail@plt+0x15bb4>
   276d8:	ldr	r0, [r7, #56]	; 0x38
   276dc:	add	r6, r0, r1, lsl #5
   276e0:	add	r2, r1, #1
   276e4:	mov	r0, #0
   276e8:	cmp	sl, #0
   276ec:	mov	r1, #16
   276f0:	str	r2, [r7, #64]	; 0x40
   276f4:	mvn	r2, #0
   276f8:	str	r0, [r6, #4]!
   276fc:	add	r3, r6, #20
   27700:	str	sl, [r6, #4]
   27704:	str	r4, [r6, #8]
   27708:	str	r0, [r6, #12]
   2770c:	str	r0, [r6, #16]
   27710:	stm	r3, {r0, r1, r2}
   27714:	strne	r6, [sl]
   27718:	cmp	r4, #0
   2771c:	strne	r6, [r4]
   27720:	cmp	r5, #0
   27724:	beq	27734 <__assert_fail@plt+0x15a88>
   27728:	cmp	sl, #0
   2772c:	cmpne	r4, #0
   27730:	bne	2774c <__assert_fail@plt+0x15aa0>
   27734:	mov	r0, #12
   27738:	mov	r6, #0
   2773c:	str	r0, [r8]
   27740:	mov	r0, r6
   27744:	sub	sp, fp, #28
   27748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2774c:	cmp	r6, #0
   27750:	beq	27734 <__assert_fail@plt+0x15a88>
   27754:	ldr	r0, [r9, #20]
   27758:	str	r0, [r5, #20]
   2775c:	str	r0, [sl, #20]
   27760:	ldr	r1, [r9, #24]
   27764:	ldr	r0, [r5, #24]
   27768:	lsr	r1, r1, #19
   2776c:	bfi	r0, r1, #19, #1
   27770:	str	r0, [r5, #24]
   27774:	ldr	r0, [sl, #24]
   27778:	bfi	r0, r1, #19, #1
   2777c:	str	r0, [sl, #24]
   27780:	mov	r0, r6
   27784:	sub	sp, fp, #28
   27788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2778c:	ldr	r0, [r9, #20]
   27790:	cmp	r0, #31
   27794:	bgt	277a8 <__assert_fail@plt+0x15afc>
   27798:	ldr	r1, [r7, #80]	; 0x50
   2779c:	mov	r2, #1
   277a0:	tst	r1, r2, lsl r0
   277a4:	bne	275d8 <__assert_fail@plt+0x1592c>
   277a8:	mov	r0, r6
   277ac:	sub	sp, fp, #28
   277b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   277b4:	mov	r0, #996	; 0x3e4
   277b8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   277bc:	cmp	r0, #0
   277c0:	beq	27804 <__assert_fail@plt+0x15b58>
   277c4:	ldr	r1, [r7, #56]	; 0x38
   277c8:	str	r1, [r0]
   277cc:	mov	r1, #0
   277d0:	str	r1, [r7, #64]	; 0x40
   277d4:	str	r0, [r7, #56]	; 0x38
   277d8:	b	275e8 <__assert_fail@plt+0x1593c>
   277dc:	mov	r0, #996	; 0x3e4
   277e0:	bl	1c2f4 <__assert_fail@plt+0xa648>
   277e4:	cmp	r0, #0
   277e8:	beq	27850 <__assert_fail@plt+0x15ba4>
   277ec:	ldr	r1, [r7, #56]	; 0x38
   277f0:	str	r1, [r0]
   277f4:	mov	r1, #0
   277f8:	str	r1, [r7, #64]	; 0x40
   277fc:	str	r0, [r7, #56]	; 0x38
   27800:	b	2768c <__assert_fail@plt+0x159e0>
   27804:	mov	sl, #0
   27808:	ldr	r1, [r7, #64]	; 0x40
   2780c:	cmp	r1, #31
   27810:	bne	27630 <__assert_fail@plt+0x15984>
   27814:	mov	r0, #996	; 0x3e4
   27818:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2781c:	cmp	r0, #0
   27820:	beq	2783c <__assert_fail@plt+0x15b90>
   27824:	ldr	r1, [r7, #56]	; 0x38
   27828:	str	r1, [r0]
   2782c:	mov	r1, #0
   27830:	str	r1, [r7, #64]	; 0x40
   27834:	str	r0, [r7, #56]	; 0x38
   27838:	b	27634 <__assert_fail@plt+0x15988>
   2783c:	mov	r5, #0
   27840:	cmp	r6, #0
   27844:	mov	r4, r5
   27848:	bne	2767c <__assert_fail@plt+0x159d0>
   2784c:	b	276cc <__assert_fail@plt+0x15a20>
   27850:	mov	r4, #0
   27854:	ldr	r1, [r7, #64]	; 0x40
   27858:	cmp	r1, #31
   2785c:	bne	276d8 <__assert_fail@plt+0x15a2c>
   27860:	mov	r0, #996	; 0x3e4
   27864:	bl	1c2f4 <__assert_fail@plt+0xa648>
   27868:	cmp	r0, #0
   2786c:	beq	27888 <__assert_fail@plt+0x15bdc>
   27870:	ldr	r1, [r7, #56]	; 0x38
   27874:	str	r1, [r0]
   27878:	mov	r1, #0
   2787c:	str	r1, [r7, #64]	; 0x40
   27880:	str	r0, [r7, #56]	; 0x38
   27884:	b	276dc <__assert_fail@plt+0x15a30>
   27888:	mov	r6, #0
   2788c:	cmp	r5, #0
   27890:	bne	27728 <__assert_fail@plt+0x15a7c>
   27894:	b	27734 <__assert_fail@plt+0x15a88>
   27898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2789c:	add	fp, sp, #28
   278a0:	sub	sp, sp, #12
   278a4:	mov	r4, r0
   278a8:	ldr	r7, [r0, #4]
   278ac:	ldr	r0, [r0, #8]
   278b0:	mov	r5, r2
   278b4:	mov	r9, r1
   278b8:	cmp	r0, r7
   278bc:	bcs	27988 <__assert_fail@plt+0x15cdc>
   278c0:	ldr	r1, [r4]
   278c4:	str	r9, [r1, r0, lsl #3]!
   278c8:	str	r5, [r1, #4]
   278cc:	ldr	r0, [r4]
   278d0:	ldr	r1, [r4, #8]
   278d4:	add	r0, r0, r1, lsl #3
   278d8:	ldr	r1, [r0, #4]
   278dc:	bfc	r1, #8, #10
   278e0:	str	r1, [r0, #4]
   278e4:	uxtb	r1, r5
   278e8:	cmp	r1, #5
   278ec:	bne	27900 <__assert_fail@plt+0x15c54>
   278f0:	ldr	r2, [r4, #92]	; 0x5c
   278f4:	mov	r0, #1048576	; 0x100000
   278f8:	cmp	r2, #1
   278fc:	bgt	27910 <__assert_fail@plt+0x15c64>
   27900:	sub	r0, r1, #6
   27904:	clz	r0, r0
   27908:	lsr	r0, r0, #5
   2790c:	lsl	r0, r0, #20
   27910:	ldr	r1, [r4]
   27914:	ldr	r2, [r4, #8]
   27918:	add	r1, r1, r2, lsl #3
   2791c:	ldr	r2, [r1, #4]
   27920:	bic	r2, r2, #1048576	; 0x100000
   27924:	orr	r0, r2, r0
   27928:	mvn	r2, #0
   2792c:	str	r0, [r1, #4]
   27930:	ldr	r0, [r4, #8]
   27934:	ldr	r1, [r4, #12]
   27938:	str	r2, [r1, r0, lsl #2]
   2793c:	mov	r2, #0
   27940:	ldr	r0, [r4, #8]
   27944:	ldr	r1, [r4, #20]
   27948:	add	r0, r0, r0, lsl #1
   2794c:	str	r2, [r1, r0, lsl #2]!
   27950:	str	r2, [r1, #4]
   27954:	str	r2, [r1, #8]
   27958:	ldr	r0, [r4, #8]
   2795c:	ldr	r1, [r4, #24]
   27960:	add	r0, r0, r0, lsl #1
   27964:	str	r2, [r1, r0, lsl #2]!
   27968:	str	r2, [r1, #4]
   2796c:	str	r2, [r1, #8]
   27970:	ldr	r6, [r4, #8]
   27974:	add	r0, r6, #1
   27978:	str	r0, [r4, #8]
   2797c:	mov	r0, r6
   27980:	sub	sp, fp, #28
   27984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27988:	movw	r0, #21845	; 0x5555
   2798c:	lsl	r1, r7, #1
   27990:	mvn	r6, #0
   27994:	movt	r0, #5461	; 0x1555
   27998:	cmp	r1, r0
   2799c:	bhi	2797c <__assert_fail@plt+0x15cd0>
   279a0:	ldr	r0, [r4]
   279a4:	str	r1, [sp, #8]
   279a8:	lsl	r1, r7, #4
   279ac:	bl	1c388 <__assert_fail@plt+0xa6dc>
   279b0:	cmp	r0, #0
   279b4:	beq	2797c <__assert_fail@plt+0x15cd0>
   279b8:	str	r0, [r4]
   279bc:	lsl	r8, r7, #3
   279c0:	ldr	r0, [r4, #12]
   279c4:	mov	r1, r8
   279c8:	bl	1c388 <__assert_fail@plt+0xa6dc>
   279cc:	str	r0, [sp, #4]
   279d0:	ldr	r0, [r4, #16]
   279d4:	mov	r1, r8
   279d8:	bl	1c388 <__assert_fail@plt+0xa6dc>
   279dc:	mov	r2, r0
   279e0:	add	r1, r7, r7, lsl #1
   279e4:	ldr	r0, [r4, #20]
   279e8:	mov	r7, r2
   279ec:	lsl	r8, r1, #3
   279f0:	mov	r1, r8
   279f4:	bl	1c388 <__assert_fail@plt+0xa6dc>
   279f8:	mov	sl, r0
   279fc:	ldr	r0, [r4, #24]
   27a00:	mov	r1, r8
   27a04:	bl	1c388 <__assert_fail@plt+0xa6dc>
   27a08:	mov	r8, r0
   27a0c:	ldr	r0, [sp, #4]
   27a10:	cmp	r0, #0
   27a14:	beq	27a24 <__assert_fail@plt+0x15d78>
   27a18:	cmp	r7, #0
   27a1c:	cmpne	sl, #0
   27a20:	bne	27a4c <__assert_fail@plt+0x15da0>
   27a24:	bl	1c224 <__assert_fail@plt+0xa578>
   27a28:	mov	r0, r7
   27a2c:	bl	1c224 <__assert_fail@plt+0xa578>
   27a30:	mov	r0, sl
   27a34:	bl	1c224 <__assert_fail@plt+0xa578>
   27a38:	mov	r0, r8
   27a3c:	bl	1c224 <__assert_fail@plt+0xa578>
   27a40:	mov	r0, r6
   27a44:	sub	sp, fp, #28
   27a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a4c:	cmp	r8, #0
   27a50:	beq	27a24 <__assert_fail@plt+0x15d78>
   27a54:	add	r1, r4, #12
   27a58:	stm	r1, {r0, r7, sl}
   27a5c:	str	r8, [r4, #24]
   27a60:	ldr	r0, [sp, #8]
   27a64:	str	r0, [r4, #4]
   27a68:	ldr	r0, [r4, #8]
   27a6c:	b	278c0 <__assert_fail@plt+0x15c14>
   27a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a74:	add	fp, sp, #28
   27a78:	sub	sp, sp, #44	; 0x2c
   27a7c:	mov	r8, r0
   27a80:	ldr	r0, [r1, #20]
   27a84:	add	r4, r2, r2, lsl #1
   27a88:	mov	r5, r1
   27a8c:	mov	r1, #0
   27a90:	mov	r9, r3
   27a94:	mov	r6, r2
   27a98:	add	r0, r0, r4, lsl #2
   27a9c:	ldr	r0, [r0, #4]
   27aa0:	str	r1, [sp, #36]	; 0x24
   27aa4:	add	r0, r0, #1
   27aa8:	str	r0, [sp, #32]
   27aac:	lsl	r0, r0, #2
   27ab0:	bl	1c2f4 <__assert_fail@plt+0xa648>
   27ab4:	cmp	r0, #0
   27ab8:	str	r0, [sp, #40]	; 0x28
   27abc:	beq	27c8c <__assert_fail@plt+0x15fe0>
   27ac0:	mov	r1, #1
   27ac4:	str	r6, [r0]
   27ac8:	str	r1, [sp, #36]	; 0x24
   27acc:	mvn	r1, #0
   27ad0:	ldr	r0, [r5, #24]
   27ad4:	add	r0, r0, r4, lsl #2
   27ad8:	str	r1, [r0, #4]
   27adc:	ldr	r2, [r5]
   27ae0:	add	r0, r2, r6, lsl #3
   27ae4:	ldr	r0, [r0, #4]
   27ae8:	ubfx	r1, r0, #8, #10
   27aec:	cmp	r1, #0
   27af0:	beq	27b4c <__assert_fail@plt+0x15ea0>
   27af4:	ldr	r3, [r5, #20]
   27af8:	add	r3, r3, r4, lsl #2
   27afc:	ldr	r7, [r3, #4]
   27b00:	cmp	r7, #0
   27b04:	beq	27b4c <__assert_fail@plt+0x15ea0>
   27b08:	ldr	r3, [r3, #8]
   27b0c:	ldr	r3, [r3]
   27b10:	add	r2, r2, r3, lsl #3
   27b14:	ldrb	r2, [r2, #6]
   27b18:	tst	r2, #4
   27b1c:	bne	27b4c <__assert_fail@plt+0x15ea0>
   27b20:	str	r1, [sp]
   27b24:	mov	r0, r5
   27b28:	mov	r1, r6
   27b2c:	mov	r2, r6
   27b30:	mov	r3, r6
   27b34:	bl	27c98 <__assert_fail@plt+0x15fec>
   27b38:	cmp	r0, #0
   27b3c:	bne	27c84 <__assert_fail@plt+0x15fd8>
   27b40:	ldr	r0, [r5]
   27b44:	add	r0, r0, r6, lsl #3
   27b48:	ldr	r0, [r0, #4]
   27b4c:	tst	r0, #8
   27b50:	beq	27c58 <__assert_fail@plt+0x15fac>
   27b54:	ldr	r0, [r5, #20]
   27b58:	add	r1, r0, r4, lsl #2
   27b5c:	ldr	r1, [r1, #4]
   27b60:	cmp	r1, #1
   27b64:	blt	27c58 <__assert_fail@plt+0x15fac>
   27b68:	str	r8, [sp, #12]
   27b6c:	mov	r8, #0
   27b70:	add	r7, sp, #16
   27b74:	add	sl, sp, #32
   27b78:	mov	r6, #0
   27b7c:	str	r9, [sp, #8]
   27b80:	b	27ba0 <__assert_fail@plt+0x15ef4>
   27b84:	mov	r8, #1
   27b88:	ldr	r0, [r5, #20]
   27b8c:	add	r6, r6, #1
   27b90:	add	r1, r0, r4, lsl #2
   27b94:	ldr	r1, [r1, #4]
   27b98:	cmp	r6, r1
   27b9c:	bge	27c2c <__assert_fail@plt+0x15f80>
   27ba0:	add	r0, r0, r4, lsl #2
   27ba4:	ldr	r0, [r0, #8]
   27ba8:	ldr	r2, [r0, r6, lsl #2]
   27bac:	ldr	r0, [r5, #24]
   27bb0:	add	r9, r2, r2, lsl #1
   27bb4:	add	r0, r0, r9, lsl #2
   27bb8:	ldr	r1, [r0, #4]
   27bbc:	cmn	r1, #1
   27bc0:	beq	27b84 <__assert_fail@plt+0x15ed8>
   27bc4:	cmp	r1, #0
   27bc8:	bne	27be8 <__assert_fail@plt+0x15f3c>
   27bcc:	mov	r0, r7
   27bd0:	mov	r1, r5
   27bd4:	mov	r3, #0
   27bd8:	bl	27a70 <__assert_fail@plt+0x15dc4>
   27bdc:	cmp	r0, #0
   27be0:	beq	27bf8 <__assert_fail@plt+0x15f4c>
   27be4:	b	27c84 <__assert_fail@plt+0x15fd8>
   27be8:	vldr	d16, [r0]
   27bec:	ldr	r0, [r0, #8]
   27bf0:	str	r0, [sp, #24]
   27bf4:	vstr	d16, [sp, #16]
   27bf8:	mov	r0, sl
   27bfc:	mov	r1, r7
   27c00:	bl	28128 <__assert_fail@plt+0x1647c>
   27c04:	cmp	r0, #0
   27c08:	bne	27c84 <__assert_fail@plt+0x15fd8>
   27c0c:	ldr	r0, [r5, #24]
   27c10:	add	r0, r0, r9, lsl #2
   27c14:	ldr	r0, [r0, #4]
   27c18:	cmp	r0, #0
   27c1c:	bne	27b88 <__assert_fail@plt+0x15edc>
   27c20:	ldr	r0, [sp, #24]
   27c24:	bl	1c224 <__assert_fail@plt+0xa578>
   27c28:	b	27b84 <__assert_fail@plt+0x15ed8>
   27c2c:	tst	r8, #1
   27c30:	ldr	r8, [sp, #12]
   27c34:	ldr	r0, [sp, #8]
   27c38:	beq	27c58 <__assert_fail@plt+0x15fac>
   27c3c:	cmp	r0, #0
   27c40:	bne	27c58 <__assert_fail@plt+0x15fac>
   27c44:	ldr	r0, [r5, #24]
   27c48:	mov	r1, #0
   27c4c:	add	r0, r0, r4, lsl #2
   27c50:	str	r1, [r0, #4]
   27c54:	b	27c70 <__assert_fail@plt+0x15fc4>
   27c58:	ldr	r0, [r5, #24]
   27c5c:	vldr	d16, [sp, #32]
   27c60:	ldr	r1, [sp, #40]	; 0x28
   27c64:	add	r0, r0, r4, lsl #2
   27c68:	str	r1, [r0, #8]
   27c6c:	vstr	d16, [r0]
   27c70:	ldr	r0, [sp, #40]	; 0x28
   27c74:	vldr	d16, [sp, #32]
   27c78:	str	r0, [r8, #8]
   27c7c:	mov	r0, #0
   27c80:	vstr	d16, [r8]
   27c84:	sub	sp, fp, #28
   27c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c8c:	mov	r0, #12
   27c90:	sub	sp, fp, #28
   27c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c9c:	add	fp, sp, #28
   27ca0:	sub	sp, sp, #20
   27ca4:	mov	r9, r0
   27ca8:	ldr	r0, [fp, #8]
   27cac:	mov	r8, r2
   27cb0:	mov	r5, r1
   27cb4:	str	r3, [sp, #8]
   27cb8:	str	r0, [sp, #12]
   27cbc:	ldr	r1, [sp, #12]
   27cc0:	movw	r0, #65280	; 0xff00
   27cc4:	movt	r0, #3
   27cc8:	and	r0, r0, r1, lsl #8
   27ccc:	str	r0, [sp, #16]
   27cd0:	ldr	r2, [r9]
   27cd4:	add	r3, r2, r5, lsl #3
   27cd8:	ldrb	r0, [r3, #4]!
   27cdc:	cmp	r0, #4
   27ce0:	bne	27db8 <__assert_fail@plt+0x1610c>
   27ce4:	ldr	r0, [r9, #12]
   27ce8:	ldr	r1, [r9, #20]
   27cec:	add	r7, r8, r8, lsl #1
   27cf0:	ldr	r6, [r0, r5, lsl #2]
   27cf4:	add	r0, r1, r7, lsl #2
   27cf8:	mov	r1, #0
   27cfc:	str	r1, [r0, #4]
   27d00:	mov	r0, r9
   27d04:	ldr	r1, [r2, r6, lsl #3]!
   27d08:	ldr	r2, [r2, #4]
   27d0c:	bl	27898 <__assert_fail@plt+0x15bec>
   27d10:	cmn	r0, #1
   27d14:	beq	28118 <__assert_fail@plt+0x1646c>
   27d18:	mov	r4, r0
   27d1c:	ldr	r0, [r9]
   27d20:	movw	r2, #255	; 0xff
   27d24:	movt	r2, #65532	; 0xfffc
   27d28:	add	r0, r0, r4, lsl #3
   27d2c:	ldr	r1, [r0, #4]
   27d30:	and	r1, r1, r2
   27d34:	ldr	r2, [sp, #16]
   27d38:	orr	r1, r1, r2
   27d3c:	movw	r2, #65280	; 0xff00
   27d40:	str	r1, [r0, #4]
   27d44:	movt	r2, #3
   27d48:	ldr	r0, [r9]
   27d4c:	add	r1, r0, r6, lsl #3
   27d50:	add	r0, r0, r4, lsl #3
   27d54:	ldr	r1, [r1, #4]
   27d58:	and	r1, r1, r2
   27d5c:	ldr	r2, [r0, #4]
   27d60:	orr	r1, r1, r2
   27d64:	str	r1, [r0, #4]
   27d68:	ldr	r0, [r9]
   27d6c:	add	r0, r0, r4, lsl #3
   27d70:	ldr	r1, [r0, #4]
   27d74:	orr	r1, r1, #262144	; 0x40000
   27d78:	str	r1, [r0, #4]
   27d7c:	ldr	r0, [r9, #16]
   27d80:	str	r6, [r0, r4, lsl #2]
   27d84:	ldr	r0, [r9, #12]
   27d88:	ldr	r1, [r0, r5, lsl #2]
   27d8c:	str	r1, [r0, r8, lsl #2]
   27d90:	mov	r1, r4
   27d94:	ldr	r0, [r9, #20]
   27d98:	add	r0, r0, r7, lsl #2
   27d9c:	bl	282c8 <__assert_fail@plt+0x1661c>
   27da0:	cmp	r0, #0
   27da4:	mov	r5, r6
   27da8:	mov	r8, r4
   27dac:	mov	r7, #12
   27db0:	bne	27cd0 <__assert_fail@plt+0x16024>
   27db4:	b	280e8 <__assert_fail@plt+0x1643c>
   27db8:	ldr	r0, [r9, #20]
   27dbc:	add	ip, r5, r5, lsl #1
   27dc0:	add	r7, r0, ip, lsl #2
   27dc4:	ldr	r1, [r7, #4]
   27dc8:	cmp	r1, #0
   27dcc:	beq	280cc <__assert_fail@plt+0x16420>
   27dd0:	ldr	r7, [r7, #8]
   27dd4:	add	r4, r8, r8, lsl #1
   27dd8:	cmp	r1, #1
   27ddc:	add	r0, r0, r4, lsl #2
   27de0:	ldr	sl, [r7]
   27de4:	mov	r7, #0
   27de8:	str	r7, [r0, #4]
   27dec:	beq	27ff4 <__assert_fail@plt+0x16348>
   27df0:	ldr	r1, [r9, #8]
   27df4:	mov	r8, r4
   27df8:	ldr	r4, [sp, #12]
   27dfc:	sub	r3, r1, #1
   27e00:	cmp	r3, #1
   27e04:	blt	27e54 <__assert_fail@plt+0x161a8>
   27e08:	add	r3, r2, r3, lsl #3
   27e0c:	ldr	r7, [r3, #4]
   27e10:	ands	r3, r7, #262144	; 0x40000
   27e14:	beq	27e54 <__assert_fail@plt+0x161a8>
   27e18:	ldr	r6, [r9, #16]
   27e1c:	sub	r3, r2, #12
   27e20:	sub	r6, r6, #4
   27e24:	ldr	r5, [r6, r1, lsl #2]
   27e28:	cmp	r5, sl
   27e2c:	ubfxeq	r7, r7, #8, #10
   27e30:	cmpeq	r7, r4
   27e34:	beq	27fd8 <__assert_fail@plt+0x1632c>
   27e38:	sub	r7, r1, #2
   27e3c:	cmp	r7, #1
   27e40:	blt	27e54 <__assert_fail@plt+0x161a8>
   27e44:	ldr	r7, [r3, r1, lsl #3]
   27e48:	sub	r1, r1, #1
   27e4c:	ands	r5, r7, #262144	; 0x40000
   27e50:	bne	27e24 <__assert_fail@plt+0x16178>
   27e54:	ldr	r1, [r2, sl, lsl #3]!
   27e58:	mov	r0, r9
   27e5c:	mov	r5, ip
   27e60:	ldr	r2, [r2, #4]
   27e64:	bl	27898 <__assert_fail@plt+0x15bec>
   27e68:	mov	r7, #12
   27e6c:	cmn	r0, #1
   27e70:	beq	280e8 <__assert_fail@plt+0x1643c>
   27e74:	mov	r6, r0
   27e78:	ldr	r0, [r9]
   27e7c:	movw	r2, #255	; 0xff
   27e80:	mov	r4, r8
   27e84:	movt	r2, #65532	; 0xfffc
   27e88:	add	r0, r0, r6, lsl #3
   27e8c:	ldr	r1, [r0, #4]
   27e90:	and	r1, r1, r2
   27e94:	ldr	r2, [sp, #16]
   27e98:	orr	r1, r1, r2
   27e9c:	movw	r2, #65280	; 0xff00
   27ea0:	str	r1, [r0, #4]
   27ea4:	movt	r2, #3
   27ea8:	ldr	r0, [r9]
   27eac:	add	r1, r0, sl, lsl #3
   27eb0:	add	r0, r0, r6, lsl #3
   27eb4:	ldr	r1, [r1, #4]
   27eb8:	and	r1, r1, r2
   27ebc:	ldr	r2, [r0, #4]
   27ec0:	orr	r1, r1, r2
   27ec4:	str	r1, [r0, #4]
   27ec8:	ldr	r0, [r9]
   27ecc:	add	r0, r0, r6, lsl #3
   27ed0:	ldr	r1, [r0, #4]
   27ed4:	orr	r1, r1, #262144	; 0x40000
   27ed8:	str	r1, [r0, #4]
   27edc:	mov	r1, r6
   27ee0:	ldr	r0, [r9, #16]
   27ee4:	str	sl, [r0, r6, lsl #2]
   27ee8:	ldr	r0, [r9, #20]
   27eec:	add	r0, r0, r8, lsl #2
   27ef0:	bl	282c8 <__assert_fail@plt+0x1661c>
   27ef4:	cmp	r0, #0
   27ef8:	beq	280e8 <__assert_fail@plt+0x1643c>
   27efc:	ldr	r0, [sp, #12]
   27f00:	ldr	r3, [sp, #8]
   27f04:	mov	r1, sl
   27f08:	mov	r2, r6
   27f0c:	str	r0, [sp]
   27f10:	mov	r0, r9
   27f14:	bl	27c98 <__assert_fail@plt+0x15fec>
   27f18:	cmp	r0, #0
   27f1c:	bne	280e4 <__assert_fail@plt+0x16438>
   27f20:	ldr	r1, [r9, #20]
   27f24:	ldr	r0, [r9]
   27f28:	add	r1, r1, r5, lsl #2
   27f2c:	ldr	r1, [r1, #8]
   27f30:	ldr	r5, [r1, #4]
   27f34:	ldr	r1, [r0, r5, lsl #3]!
   27f38:	ldr	r2, [r0, #4]
   27f3c:	mov	r0, r9
   27f40:	bl	27898 <__assert_fail@plt+0x15bec>
   27f44:	mov	r7, #12
   27f48:	cmn	r0, #1
   27f4c:	beq	280e8 <__assert_fail@plt+0x1643c>
   27f50:	mov	r8, r0
   27f54:	ldr	r0, [r9]
   27f58:	movw	r2, #255	; 0xff
   27f5c:	movt	r2, #65532	; 0xfffc
   27f60:	add	r0, r0, r8, lsl #3
   27f64:	ldr	r1, [r0, #4]
   27f68:	and	r1, r1, r2
   27f6c:	ldr	r2, [sp, #16]
   27f70:	orr	r1, r1, r2
   27f74:	movw	r2, #65280	; 0xff00
   27f78:	str	r1, [r0, #4]
   27f7c:	movt	r2, #3
   27f80:	ldr	r0, [r9]
   27f84:	add	r1, r0, r5, lsl #3
   27f88:	add	r0, r0, r8, lsl #3
   27f8c:	ldr	r1, [r1, #4]
   27f90:	and	r1, r1, r2
   27f94:	ldr	r2, [r0, #4]
   27f98:	orr	r1, r1, r2
   27f9c:	str	r1, [r0, #4]
   27fa0:	ldr	r0, [r9]
   27fa4:	add	r0, r0, r8, lsl #3
   27fa8:	ldr	r1, [r0, #4]
   27fac:	orr	r1, r1, #262144	; 0x40000
   27fb0:	str	r1, [r0, #4]
   27fb4:	mov	r1, r8
   27fb8:	ldr	r0, [r9, #16]
   27fbc:	str	r5, [r0, r8, lsl #2]
   27fc0:	ldr	r0, [r9, #20]
   27fc4:	add	r0, r0, r4, lsl #2
   27fc8:	bl	282c8 <__assert_fail@plt+0x1661c>
   27fcc:	cmp	r0, #0
   27fd0:	bne	27cd0 <__assert_fail@plt+0x16024>
   27fd4:	b	280e8 <__assert_fail@plt+0x1643c>
   27fd8:	sub	r1, r1, #1
   27fdc:	mov	r5, ip
   27fe0:	bl	282c8 <__assert_fail@plt+0x1661c>
   27fe4:	cmp	r0, #0
   27fe8:	mov	r4, r8
   27fec:	bne	27f20 <__assert_fail@plt+0x16274>
   27ff0:	b	28118 <__assert_fail@plt+0x1646c>
   27ff4:	ldr	r1, [sp, #8]
   27ff8:	cmp	r5, r1
   27ffc:	bne	28008 <__assert_fail@plt+0x1635c>
   28000:	cmp	r8, r5
   28004:	bne	280f4 <__assert_fail@plt+0x16448>
   28008:	ldr	r1, [r2, sl, lsl #3]!
   2800c:	ldr	r6, [r3]
   28010:	mov	r0, r9
   28014:	ldr	r2, [r2, #4]
   28018:	bl	27898 <__assert_fail@plt+0x15bec>
   2801c:	mov	r8, r0
   28020:	ubfx	r0, r6, #8, #10
   28024:	mov	r7, #12
   28028:	cmn	r8, #1
   2802c:	beq	280e8 <__assert_fail@plt+0x1643c>
   28030:	ldr	r1, [sp, #12]
   28034:	movw	r7, #255	; 0xff
   28038:	movt	r7, #65532	; 0xfffc
   2803c:	orr	r1, r0, r1
   28040:	movw	r0, #65280	; 0xff00
   28044:	movt	r0, #3
   28048:	str	r1, [sp, #12]
   2804c:	mov	r3, r0
   28050:	and	r0, r0, r1, lsl #8
   28054:	ldr	r1, [r9]
   28058:	add	r1, r1, r8, lsl #3
   2805c:	ldr	r2, [r1, #4]
   28060:	and	r2, r2, r7
   28064:	mov	r7, #12
   28068:	orr	r0, r2, r0
   2806c:	str	r0, [r1, #4]
   28070:	ldr	r0, [r9]
   28074:	add	r1, r0, sl, lsl #3
   28078:	add	r0, r0, r8, lsl #3
   2807c:	ldr	r1, [r1, #4]
   28080:	ldr	r2, [r0, #4]
   28084:	and	r1, r1, r3
   28088:	orr	r1, r1, r2
   2808c:	str	r1, [r0, #4]
   28090:	ldr	r0, [r9]
   28094:	add	r0, r0, r8, lsl #3
   28098:	ldr	r1, [r0, #4]
   2809c:	orr	r1, r1, #262144	; 0x40000
   280a0:	str	r1, [r0, #4]
   280a4:	mov	r1, r8
   280a8:	ldr	r0, [r9, #16]
   280ac:	str	sl, [r0, r8, lsl #2]
   280b0:	ldr	r0, [r9, #20]
   280b4:	add	r0, r0, r4, lsl #2
   280b8:	bl	282c8 <__assert_fail@plt+0x1661c>
   280bc:	cmp	r0, #0
   280c0:	mov	r5, sl
   280c4:	bne	27cbc <__assert_fail@plt+0x16010>
   280c8:	b	280e8 <__assert_fail@plt+0x1643c>
   280cc:	ldr	r0, [r9, #12]
   280d0:	ldr	r1, [r0, r5, lsl #2]
   280d4:	str	r1, [r0, r8, lsl #2]
   280d8:	mov	r0, #0
   280dc:	sub	sp, fp, #28
   280e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280e4:	mov	r7, r0
   280e8:	mov	r0, r7
   280ec:	sub	sp, fp, #28
   280f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280f4:	mov	r1, sl
   280f8:	bl	282c8 <__assert_fail@plt+0x1661c>
   280fc:	mov	r1, r0
   28100:	mov	r7, #12
   28104:	mov	r0, #0
   28108:	cmp	r1, #0
   2810c:	moveq	r0, r7
   28110:	sub	sp, fp, #28
   28114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28118:	mov	r7, #12
   2811c:	mov	r0, r7
   28120:	sub	sp, fp, #28
   28124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28128:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2812c:	add	fp, sp, #24
   28130:	mov	r8, #0
   28134:	cmp	r1, #0
   28138:	beq	2829c <__assert_fail@plt+0x165f0>
   2813c:	mov	r6, r1
   28140:	ldr	r1, [r1, #4]
   28144:	cmp	r1, #0
   28148:	beq	2829c <__assert_fail@plt+0x165f0>
   2814c:	mov	r9, r0
   28150:	ldr	r2, [r0]
   28154:	ldr	r0, [r0, #4]
   28158:	add	r3, r0, r1, lsl #1
   2815c:	cmp	r2, r3
   28160:	bge	2818c <__assert_fail@plt+0x164e0>
   28164:	ldr	r0, [r9, #8]
   28168:	add	r7, r2, r1
   2816c:	lsl	r1, r7, #3
   28170:	bl	1c388 <__assert_fail@plt+0xa6dc>
   28174:	cmp	r0, #0
   28178:	beq	282bc <__assert_fail@plt+0x16610>
   2817c:	str	r0, [r9, #8]
   28180:	lsl	r0, r7, #1
   28184:	str	r0, [r9]
   28188:	ldr	r0, [r9, #4]
   2818c:	cmp	r0, #0
   28190:	beq	282a4 <__assert_fail@plt+0x165f8>
   28194:	ldr	r2, [r6, #4]
   28198:	sub	r1, r0, #1
   2819c:	add	r7, r0, r2, lsl #1
   281a0:	sub	r0, r2, #1
   281a4:	orrs	r2, r0, r1
   281a8:	bmi	28204 <__assert_fail@plt+0x16558>
   281ac:	ldr	r2, [r6, #8]
   281b0:	ldr	r3, [r9, #8]
   281b4:	ldr	r4, [r2, r0, lsl #2]
   281b8:	ldr	r5, [r3, r1, lsl #2]
   281bc:	cmp	r5, r4
   281c0:	beq	281f0 <__assert_fail@plt+0x16544>
   281c4:	sublt	r7, r7, #1
   281c8:	subge	r1, r1, #1
   281cc:	sublt	r0, r0, #1
   281d0:	strlt	r4, [r3, r7, lsl #2]
   281d4:	orr	r5, r0, r1
   281d8:	cmn	r5, #1
   281dc:	ble	28204 <__assert_fail@plt+0x16558>
   281e0:	ldr	r4, [r2, r0, lsl #2]
   281e4:	ldr	r5, [r3, r1, lsl #2]
   281e8:	cmp	r5, r4
   281ec:	bne	281c4 <__assert_fail@plt+0x16518>
   281f0:	sub	r1, r1, #1
   281f4:	sub	r0, r0, #1
   281f8:	orr	r5, r0, r1
   281fc:	cmn	r5, #1
   28200:	bgt	281e0 <__assert_fail@plt+0x16534>
   28204:	cmp	r0, #0
   28208:	bmi	28228 <__assert_fail@plt+0x1657c>
   2820c:	add	r2, r0, #1
   28210:	ldr	r0, [r9, #8]
   28214:	ldr	r1, [r6, #8]
   28218:	sub	r7, r7, r2
   2821c:	lsl	r2, r2, #2
   28220:	add	r0, r0, r7, lsl #2
   28224:	bl	118ec <memcpy@plt>
   28228:	ldr	r0, [r9, #4]
   2822c:	ldr	r2, [r6, #4]
   28230:	sub	r1, r0, #1
   28234:	add	r3, r1, r2, lsl #1
   28238:	sub	r2, r3, r7
   2823c:	adds	r2, r2, #1
   28240:	bcs	2829c <__assert_fail@plt+0x165f0>
   28244:	add	r0, r2, r0
   28248:	str	r0, [r9, #4]
   2824c:	ldr	r0, [r9, #8]
   28250:	ldr	r6, [r0, r1, lsl #2]
   28254:	ldr	r5, [r0, r3, lsl #2]
   28258:	cmp	r5, r6
   2825c:	ble	28278 <__assert_fail@plt+0x165cc>
   28260:	add	r6, r2, r1
   28264:	subs	r2, r2, #1
   28268:	sub	r3, r3, #1
   2826c:	str	r5, [r0, r6, lsl #2]
   28270:	bne	28250 <__assert_fail@plt+0x165a4>
   28274:	b	2829c <__assert_fail@plt+0x165f0>
   28278:	add	r5, r2, r1
   2827c:	cmp	r1, #0
   28280:	str	r6, [r0, r5, lsl #2]
   28284:	sub	r6, r1, #1
   28288:	mov	r1, r6
   2828c:	bgt	28250 <__assert_fail@plt+0x165a4>
   28290:	add	r1, r0, r7, lsl #2
   28294:	lsl	r2, r2, #2
   28298:	bl	118ec <memcpy@plt>
   2829c:	mov	r0, r8
   282a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   282a4:	ldr	r0, [r6, #4]
   282a8:	str	r0, [r9, #4]
   282ac:	ldr	r0, [r9, #8]
   282b0:	ldr	r2, [r6, #4]
   282b4:	ldr	r1, [r6, #8]
   282b8:	b	28294 <__assert_fail@plt+0x165e8>
   282bc:	mov	r8, #12
   282c0:	mov	r0, r8
   282c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   282c8:	push	{r4, r5, r6, sl, fp, lr}
   282cc:	add	fp, sp, #16
   282d0:	ldr	r2, [r0]
   282d4:	mov	r5, r1
   282d8:	mov	r4, r0
   282dc:	cmp	r2, #0
   282e0:	beq	28310 <__assert_fail@plt+0x16664>
   282e4:	ldr	r1, [r4, #4]
   282e8:	cmp	r1, #0
   282ec:	bne	2834c <__assert_fail@plt+0x166a0>
   282f0:	ldr	r0, [r4, #8]
   282f4:	str	r5, [r0]
   282f8:	ldr	r0, [r4, #4]
   282fc:	mov	r6, #1
   28300:	add	r0, r0, #1
   28304:	str	r0, [r4, #4]
   28308:	mov	r0, r6
   2830c:	pop	{r4, r5, r6, sl, fp, pc}
   28310:	mov	r6, #1
   28314:	mov	r0, #4
   28318:	str	r6, [r4]
   2831c:	str	r6, [r4, #4]
   28320:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28324:	cmp	r0, #0
   28328:	str	r0, [r4, #8]
   2832c:	strne	r5, [r0]
   28330:	movne	r0, r6
   28334:	popne	{r4, r5, r6, sl, fp, pc}
   28338:	mov	r6, #0
   2833c:	mov	r0, r6
   28340:	str	r6, [r4]
   28344:	str	r6, [r4, #4]
   28348:	pop	{r4, r5, r6, sl, fp, pc}
   2834c:	cmp	r2, r1
   28350:	bne	28388 <__assert_fail@plt+0x166dc>
   28354:	lsl	r0, r2, #1
   28358:	lsl	r1, r2, #3
   2835c:	str	r0, [r4]
   28360:	ldr	r0, [r4, #8]
   28364:	bl	1c388 <__assert_fail@plt+0xa6dc>
   28368:	cmp	r0, #0
   2836c:	beq	2843c <__assert_fail@plt+0x16790>
   28370:	str	r0, [r4, #8]
   28374:	ldr	r1, [r4, #4]
   28378:	ldr	r2, [r0]
   2837c:	cmp	r2, r5
   28380:	bgt	28398 <__assert_fail@plt+0x166ec>
   28384:	b	28404 <__assert_fail@plt+0x16758>
   28388:	ldr	r0, [r4, #8]
   2838c:	ldr	r2, [r0]
   28390:	cmp	r2, r5
   28394:	ble	28404 <__assert_fail@plt+0x16758>
   28398:	cmp	r1, #1
   2839c:	blt	28434 <__assert_fail@plt+0x16788>
   283a0:	ands	r3, r1, #3
   283a4:	sub	ip, r1, #1
   283a8:	beq	283cc <__assert_fail@plt+0x16720>
   283ac:	add	lr, r0, r1, lsl #2
   283b0:	mov	r6, lr
   283b4:	ldr	r2, [r6, #-4]!
   283b8:	subs	r3, r3, #1
   283bc:	sub	r1, r1, #1
   283c0:	str	r2, [lr]
   283c4:	mov	lr, r6
   283c8:	bne	283b4 <__assert_fail@plt+0x16708>
   283cc:	cmp	ip, #3
   283d0:	bcc	283fc <__assert_fail@plt+0x16750>
   283d4:	add	r2, r0, r1, lsl #2
   283d8:	sub	r2, r2, #8
   283dc:	sub	lr, r2, #8
   283e0:	sub	r1, r1, #4
   283e4:	sub	sl, r2, #4
   283e8:	sub	r2, r2, #16
   283ec:	ldm	lr, {r3, r6, ip, lr}
   283f0:	cmp	r1, #0
   283f4:	stm	sl, {r3, r6, ip, lr}
   283f8:	bgt	283dc <__assert_fail@plt+0x16730>
   283fc:	mov	r1, #0
   28400:	b	28434 <__assert_fail@plt+0x16788>
   28404:	add	r2, r0, r1, lsl #2
   28408:	ldr	r3, [r2, #-4]
   2840c:	cmp	r3, r5
   28410:	ble	28434 <__assert_fail@plt+0x16788>
   28414:	sub	r1, r1, #2
   28418:	str	r3, [r2]
   2841c:	sub	r1, r1, #1
   28420:	ldr	r3, [r2, #-8]
   28424:	sub	r2, r2, #4
   28428:	cmp	r3, r5
   2842c:	bgt	28418 <__assert_fail@plt+0x1676c>
   28430:	add	r1, r1, #2
   28434:	str	r5, [r0, r1, lsl #2]
   28438:	b	282f8 <__assert_fail@plt+0x1664c>
   2843c:	mov	r6, #0
   28440:	mov	r0, r6
   28444:	pop	{r4, r5, r6, sl, fp, pc}
   28448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2844c:	add	fp, sp, #28
   28450:	sub	sp, sp, #28
   28454:	ldr	sl, [r2, #4]
   28458:	cmp	sl, #0
   2845c:	beq	28680 <__assert_fail@plt+0x169d4>
   28460:	mov	r9, r3
   28464:	add	r7, sl, r3
   28468:	cmp	sl, #1
   2846c:	str	r1, [sp, #16]
   28470:	str	r2, [sp, #20]
   28474:	str	r0, [sp]
   28478:	blt	28560 <__assert_fail@plt+0x168b4>
   2847c:	ldr	ip, [r2, #8]
   28480:	mov	r8, #0
   28484:	cmp	sl, #4
   28488:	bcc	28548 <__assert_fail@plt+0x1689c>
   2848c:	mov	r3, #0
   28490:	bic	r8, sl, #3
   28494:	mov	r1, #1
   28498:	vdup.32	q8, r3
   2849c:	sub	r4, r8, #4
   284a0:	add	r1, r1, r4, lsr #2
   284a4:	cmp	r4, #12
   284a8:	and	lr, r1, #3
   284ac:	vmov.32	d16[0], r7
   284b0:	bcc	28504 <__assert_fail@plt+0x16858>
   284b4:	sub	r6, r1, lr
   284b8:	mov	r3, #0
   284bc:	mov	r4, #64	; 0x40
   284c0:	mov	r7, ip
   284c4:	mov	r1, ip
   284c8:	vld1.32	{d18-d19}, [r1], r4
   284cc:	add	r5, r7, #16
   284d0:	add	r2, r7, #32
   284d4:	subs	r6, r6, #4
   284d8:	add	r3, r3, #16
   284dc:	vld1.32	{d20-d21}, [r5]
   284e0:	vadd.i32	q8, q9, q8
   284e4:	vld1.32	{d18-d19}, [r2]
   284e8:	add	r2, r7, #48	; 0x30
   284ec:	mov	r7, r1
   284f0:	vadd.i32	q8, q10, q8
   284f4:	vld1.32	{d20-d21}, [r2]
   284f8:	vadd.i32	q8, q9, q8
   284fc:	vadd.i32	q8, q10, q8
   28500:	bne	284c8 <__assert_fail@plt+0x1681c>
   28504:	cmp	lr, #0
   28508:	beq	28524 <__assert_fail@plt+0x16878>
   2850c:	add	r1, ip, r3, lsl #2
   28510:	rsb	r3, lr, #0
   28514:	vld1.32	{d18-d19}, [r1]!
   28518:	adds	r3, r3, #1
   2851c:	vadd.i32	q8, q9, q8
   28520:	bcc	28514 <__assert_fail@plt+0x16868>
   28524:	vext.8	q9, q8, q8, #8
   28528:	ldr	r1, [sp, #16]
   2852c:	ldr	r2, [sp, #20]
   28530:	cmp	sl, r8
   28534:	vadd.i32	q8, q8, q9
   28538:	vdup.32	q9, d16[1]
   2853c:	vadd.i32	q8, q8, q9
   28540:	vmov.32	r7, d16[0]
   28544:	beq	28560 <__assert_fail@plt+0x168b4>
   28548:	add	r0, ip, r8, lsl #2
   2854c:	sub	r6, sl, r8
   28550:	ldr	r3, [r0], #4
   28554:	subs	r6, r6, #1
   28558:	add	r7, r3, r7
   2855c:	bne	28550 <__assert_fail@plt+0x168a4>
   28560:	ldr	r0, [r1, #32]
   28564:	ldr	r1, [r1, #68]	; 0x44
   28568:	and	r1, r1, r7
   2856c:	add	r3, r1, r1, lsl #1
   28570:	ldr	r1, [r0, r3, lsl #2]
   28574:	cmp	r1, #1
   28578:	blt	28618 <__assert_fail@plt+0x1696c>
   2857c:	cmp	r2, #0
   28580:	beq	28618 <__assert_fail@plt+0x1696c>
   28584:	add	r0, r0, r3, lsl #2
   28588:	sub	ip, sl, #1
   2858c:	mov	r6, #0
   28590:	ldr	lr, [r0, #8]
   28594:	ldr	r8, [lr, r6, lsl #2]
   28598:	ldr	r3, [r8]
   2859c:	cmp	r3, r7
   285a0:	beq	285c0 <__assert_fail@plt+0x16914>
   285a4:	add	r6, r6, #1
   285a8:	cmp	r6, r1
   285ac:	bge	28618 <__assert_fail@plt+0x1696c>
   285b0:	ldr	r8, [lr, r6, lsl #2]
   285b4:	ldr	r3, [r8]
   285b8:	cmp	r3, r7
   285bc:	bne	285a4 <__assert_fail@plt+0x168f8>
   285c0:	ldrb	r3, [r8, #52]	; 0x34
   285c4:	and	r3, r3, #15
   285c8:	cmp	r3, r9
   285cc:	bne	285a4 <__assert_fail@plt+0x168f8>
   285d0:	ldr	r4, [r8, #40]	; 0x28
   285d4:	cmp	r4, #0
   285d8:	beq	285a4 <__assert_fail@plt+0x168f8>
   285dc:	ldr	r3, [r4, #4]
   285e0:	cmp	r3, sl
   285e4:	bne	285a4 <__assert_fail@plt+0x168f8>
   285e8:	mov	r3, ip
   285ec:	add	r5, r3, #1
   285f0:	cmp	r5, #1
   285f4:	blt	28e54 <__assert_fail@plt+0x171a8>
   285f8:	ldr	r5, [r2, #8]
   285fc:	ldr	r0, [r4, #8]
   28600:	ldr	r5, [r5, r3, lsl #2]
   28604:	ldr	r0, [r0, r3, lsl #2]
   28608:	sub	r3, r3, #1
   2860c:	cmp	r0, r5
   28610:	beq	285ec <__assert_fail@plt+0x16940>
   28614:	b	285a4 <__assert_fail@plt+0x168f8>
   28618:	mov	r0, #56	; 0x38
   2861c:	mov	r1, #1
   28620:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   28624:	cmp	r0, #0
   28628:	beq	28e74 <__assert_fail@plt+0x171c8>
   2862c:	ldr	ip, [sp, #20]
   28630:	mov	r8, r0
   28634:	add	r6, r0, #4
   28638:	ldr	r3, [ip, #4]
   2863c:	cmp	r3, #1
   28640:	str	r3, [r0, #8]
   28644:	blt	28694 <__assert_fail@plt+0x169e8>
   28648:	lsl	r0, r3, #2
   2864c:	str	r3, [r8, #4]
   28650:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28654:	cmp	r0, #0
   28658:	str	r0, [r8, #12]
   2865c:	beq	28e90 <__assert_fail@plt+0x171e4>
   28660:	ldr	r4, [sp, #20]
   28664:	ldr	r5, [r4, #4]
   28668:	ldr	r1, [r4, #8]
   2866c:	lsl	r2, r5, #2
   28670:	bl	118ec <memcpy@plt>
   28674:	mov	r3, r5
   28678:	mov	ip, r4
   2867c:	b	286a4 <__assert_fail@plt+0x169f8>
   28680:	mov	r8, #0
   28684:	str	r8, [r0]
   28688:	mov	r0, r8
   2868c:	sub	sp, fp, #28
   28690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28694:	mov	r0, #0
   28698:	str	r0, [r6]
   2869c:	str	r0, [r6, #4]
   286a0:	str	r0, [r6, #8]
   286a4:	mov	sl, r8
   286a8:	and	r1, r9, #15
   286ac:	cmp	r3, #1
   286b0:	str	r6, [sp, #24]
   286b4:	ldrb	r0, [sl, #52]!	; 0x34
   286b8:	str	r6, [sl, #-12]
   286bc:	and	r0, r0, #240	; 0xf0
   286c0:	orr	r0, r0, r1
   286c4:	strb	r0, [sl]
   286c8:	ldr	r0, [sp, #16]
   286cc:	blt	28e40 <__assert_fail@plt+0x17194>
   286d0:	and	r1, r9, #4
   286d4:	tst	r9, #1
   286d8:	str	sl, [sp, #8]
   286dc:	str	r1, [sp, #12]
   286e0:	and	r1, r9, #2
   286e4:	bne	288c4 <__assert_fail@plt+0x16c18>
   286e8:	movw	r9, #65280	; 0xff00
   286ec:	mov	r6, #0
   286f0:	mov	lr, #0
   286f4:	cmp	r1, #0
   286f8:	movt	r9, #3
   286fc:	add	r5, r9, #255	; 0xff
   28700:	bne	28aa0 <__assert_fail@plt+0x16df4>
   28704:	str	r5, [sp, #4]
   28708:	b	28720 <__assert_fail@plt+0x16a74>
   2870c:	mov	r3, r5
   28710:	ldr	r5, [sp, #4]
   28714:	add	r6, r6, #1
   28718:	cmp	r6, r3
   2871c:	bge	28e40 <__assert_fail@plt+0x17194>
   28720:	ldr	r1, [ip, #8]
   28724:	ldr	r2, [r0]
   28728:	ldr	r1, [r1, r6, lsl #2]
   2872c:	add	r1, r2, r1, lsl #3
   28730:	ldr	r4, [r1, #4]
   28734:	and	r1, r4, r5
   28738:	cmp	r1, #1
   2873c:	beq	28714 <__assert_fail@plt+0x16a68>
   28740:	mov	r5, r3
   28744:	ldrb	r3, [sl]
   28748:	mov	r2, #32
   2874c:	and	r1, r4, r9
   28750:	and	r2, r2, r4, lsr #15
   28754:	orr	r2, r3, r2
   28758:	uxtb	r3, r4
   2875c:	strb	r2, [sl]
   28760:	cmp	r3, #4
   28764:	beq	28778 <__assert_fail@plt+0x16acc>
   28768:	cmp	r3, #2
   2876c:	bne	28784 <__assert_fail@plt+0x16ad8>
   28770:	mov	r3, #16
   28774:	b	2877c <__assert_fail@plt+0x16ad0>
   28778:	mov	r3, #64	; 0x40
   2877c:	orr	r2, r2, r3
   28780:	strb	r2, [sl]
   28784:	cmp	r1, #0
   28788:	beq	2870c <__assert_fail@plt+0x16a60>
   2878c:	ldr	r1, [r8, #40]	; 0x28
   28790:	ldr	r2, [sp, #24]
   28794:	mov	r3, r5
   28798:	cmp	r1, r2
   2879c:	beq	287c4 <__assert_fail@plt+0x16b18>
   287a0:	ldr	r5, [sp, #4]
   287a4:	tst	r4, #4352	; 0x1100
   287a8:	bne	28868 <__assert_fail@plt+0x16bbc>
   287ac:	ldr	r1, [sp, #12]
   287b0:	cmp	r1, #0
   287b4:	bne	28714 <__assert_fail@plt+0x16a68>
   287b8:	ands	r1, r4, #16384	; 0x4000
   287bc:	bne	28868 <__assert_fail@plt+0x16bbc>
   287c0:	b	28714 <__assert_fail@plt+0x16a68>
   287c4:	mov	r0, #12
   287c8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   287cc:	cmp	r0, #0
   287d0:	beq	28e6c <__assert_fail@plt+0x171c0>
   287d4:	ldr	ip, [sp, #20]
   287d8:	str	r0, [r8, #40]	; 0x28
   287dc:	mov	sl, r0
   287e0:	mov	r5, r0
   287e4:	ldr	r3, [ip, #4]
   287e8:	str	r3, [sl, #4]!
   287ec:	cmp	r3, #0
   287f0:	ble	28834 <__assert_fail@plt+0x16b88>
   287f4:	lsl	r0, r3, #2
   287f8:	str	r3, [r5]
   287fc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28800:	cmp	r0, #0
   28804:	str	r0, [r5, #8]
   28808:	beq	28e60 <__assert_fail@plt+0x171b4>
   2880c:	ldr	r5, [sp, #20]
   28810:	ldr	r9, [r5, #4]
   28814:	ldr	r1, [r5, #8]
   28818:	lsl	r2, r9, #2
   2881c:	bl	118ec <memcpy@plt>
   28820:	mov	r3, r9
   28824:	movw	r9, #65280	; 0xff00
   28828:	mov	ip, r5
   2882c:	movt	r9, #3
   28830:	b	28844 <__assert_fail@plt+0x16b98>
   28834:	mov	r0, #0
   28838:	str	r0, [r5]
   2883c:	str	r0, [r5, #4]
   28840:	str	r0, [r5, #8]
   28844:	ldr	sl, [sp, #8]
   28848:	mov	lr, #0
   2884c:	ldrb	r0, [sl]
   28850:	orr	r0, r0, #128	; 0x80
   28854:	strb	r0, [sl]
   28858:	ldr	r0, [sp, #16]
   2885c:	ldr	r5, [sp, #4]
   28860:	tst	r4, #4352	; 0x1100
   28864:	beq	287ac <__assert_fail@plt+0x16b00>
   28868:	subs	r1, r6, lr
   2886c:	bmi	28888 <__assert_fail@plt+0x16bdc>
   28870:	ldr	r2, [r8, #8]
   28874:	cmp	r2, r1
   28878:	subgt	r2, r2, #1
   2887c:	strgt	r2, [r8, #8]
   28880:	cmpgt	r2, r1
   28884:	bgt	2889c <__assert_fail@plt+0x16bf0>
   28888:	add	lr, lr, #1
   2888c:	add	r6, r6, #1
   28890:	cmp	r6, r3
   28894:	blt	28720 <__assert_fail@plt+0x16a74>
   28898:	b	28e40 <__assert_fail@plt+0x17194>
   2889c:	ldr	r2, [r8, #12]
   288a0:	add	r3, r2, r1, lsl #2
   288a4:	ldr	r3, [r3, #4]
   288a8:	str	r3, [r2, r1, lsl #2]
   288ac:	add	r1, r1, #1
   288b0:	ldr	r3, [r8, #8]
   288b4:	cmp	r1, r3
   288b8:	blt	288a0 <__assert_fail@plt+0x16bf4>
   288bc:	ldr	r3, [ip, #4]
   288c0:	b	28888 <__assert_fail@plt+0x16bdc>
   288c4:	cmp	r1, #0
   288c8:	bne	28c60 <__assert_fail@plt+0x16fb4>
   288cc:	movw	r9, #65280	; 0xff00
   288d0:	mov	r6, #0
   288d4:	mov	lr, #0
   288d8:	movt	r9, #3
   288dc:	add	r5, r9, #255	; 0xff
   288e0:	str	r5, [sp, #4]
   288e4:	b	288fc <__assert_fail@plt+0x16c50>
   288e8:	mov	r3, r5
   288ec:	ldr	r5, [sp, #4]
   288f0:	add	r6, r6, #1
   288f4:	cmp	r6, r3
   288f8:	bge	28e40 <__assert_fail@plt+0x17194>
   288fc:	ldr	r1, [ip, #8]
   28900:	ldr	r2, [r0]
   28904:	ldr	r1, [r1, r6, lsl #2]
   28908:	add	r1, r2, r1, lsl #3
   2890c:	ldr	r4, [r1, #4]
   28910:	and	r1, r4, r5
   28914:	cmp	r1, #1
   28918:	beq	288f0 <__assert_fail@plt+0x16c44>
   2891c:	mov	r5, r3
   28920:	ldrb	r3, [sl]
   28924:	mov	r2, #32
   28928:	and	r1, r4, r9
   2892c:	and	r2, r2, r4, lsr #15
   28930:	orr	r2, r3, r2
   28934:	uxtb	r3, r4
   28938:	strb	r2, [sl]
   2893c:	cmp	r3, #4
   28940:	beq	28954 <__assert_fail@plt+0x16ca8>
   28944:	cmp	r3, #2
   28948:	bne	28960 <__assert_fail@plt+0x16cb4>
   2894c:	mov	r3, #16
   28950:	b	28958 <__assert_fail@plt+0x16cac>
   28954:	mov	r3, #64	; 0x40
   28958:	orr	r2, r2, r3
   2895c:	strb	r2, [sl]
   28960:	cmp	r1, #0
   28964:	beq	288e8 <__assert_fail@plt+0x16c3c>
   28968:	ldr	r1, [r8, #40]	; 0x28
   2896c:	ldr	r2, [sp, #24]
   28970:	mov	r3, r5
   28974:	cmp	r1, r2
   28978:	beq	289a0 <__assert_fail@plt+0x16cf4>
   2897c:	ldr	r5, [sp, #4]
   28980:	tst	r4, #4608	; 0x1200
   28984:	bne	28a44 <__assert_fail@plt+0x16d98>
   28988:	ldr	r1, [sp, #12]
   2898c:	cmp	r1, #0
   28990:	bne	288f0 <__assert_fail@plt+0x16c44>
   28994:	ands	r1, r4, #16384	; 0x4000
   28998:	bne	28a44 <__assert_fail@plt+0x16d98>
   2899c:	b	288f0 <__assert_fail@plt+0x16c44>
   289a0:	mov	r0, #12
   289a4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   289a8:	cmp	r0, #0
   289ac:	beq	28e6c <__assert_fail@plt+0x171c0>
   289b0:	ldr	ip, [sp, #20]
   289b4:	str	r0, [r8, #40]	; 0x28
   289b8:	mov	sl, r0
   289bc:	mov	r5, r0
   289c0:	ldr	r3, [ip, #4]
   289c4:	str	r3, [sl, #4]!
   289c8:	cmp	r3, #0
   289cc:	ble	28a10 <__assert_fail@plt+0x16d64>
   289d0:	lsl	r0, r3, #2
   289d4:	str	r3, [r5]
   289d8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   289dc:	cmp	r0, #0
   289e0:	str	r0, [r5, #8]
   289e4:	beq	28e60 <__assert_fail@plt+0x171b4>
   289e8:	ldr	r5, [sp, #20]
   289ec:	ldr	r9, [r5, #4]
   289f0:	ldr	r1, [r5, #8]
   289f4:	lsl	r2, r9, #2
   289f8:	bl	118ec <memcpy@plt>
   289fc:	mov	r3, r9
   28a00:	movw	r9, #65280	; 0xff00
   28a04:	mov	ip, r5
   28a08:	movt	r9, #3
   28a0c:	b	28a20 <__assert_fail@plt+0x16d74>
   28a10:	mov	r0, #0
   28a14:	str	r0, [r5]
   28a18:	str	r0, [r5, #4]
   28a1c:	str	r0, [r5, #8]
   28a20:	ldr	sl, [sp, #8]
   28a24:	mov	lr, #0
   28a28:	ldrb	r0, [sl]
   28a2c:	orr	r0, r0, #128	; 0x80
   28a30:	strb	r0, [sl]
   28a34:	ldr	r0, [sp, #16]
   28a38:	ldr	r5, [sp, #4]
   28a3c:	tst	r4, #4608	; 0x1200
   28a40:	beq	28988 <__assert_fail@plt+0x16cdc>
   28a44:	subs	r1, r6, lr
   28a48:	bmi	28a64 <__assert_fail@plt+0x16db8>
   28a4c:	ldr	r2, [r8, #8]
   28a50:	cmp	r2, r1
   28a54:	subgt	r2, r2, #1
   28a58:	strgt	r2, [r8, #8]
   28a5c:	cmpgt	r2, r1
   28a60:	bgt	28a78 <__assert_fail@plt+0x16dcc>
   28a64:	add	lr, lr, #1
   28a68:	add	r6, r6, #1
   28a6c:	cmp	r6, r3
   28a70:	blt	288fc <__assert_fail@plt+0x16c50>
   28a74:	b	28e40 <__assert_fail@plt+0x17194>
   28a78:	ldr	r2, [r8, #12]
   28a7c:	add	r3, r2, r1, lsl #2
   28a80:	ldr	r3, [r3, #4]
   28a84:	str	r3, [r2, r1, lsl #2]
   28a88:	add	r1, r1, #1
   28a8c:	ldr	r3, [r8, #8]
   28a90:	cmp	r1, r3
   28a94:	blt	28a7c <__assert_fail@plt+0x16dd0>
   28a98:	ldr	r3, [ip, #4]
   28a9c:	b	28a64 <__assert_fail@plt+0x16db8>
   28aa0:	str	r5, [sp, #4]
   28aa4:	b	28abc <__assert_fail@plt+0x16e10>
   28aa8:	mov	r3, r5
   28aac:	ldr	r5, [sp, #4]
   28ab0:	add	r6, r6, #1
   28ab4:	cmp	r6, r3
   28ab8:	bge	28e40 <__assert_fail@plt+0x17194>
   28abc:	ldr	r1, [ip, #8]
   28ac0:	ldr	r2, [r0]
   28ac4:	ldr	r1, [r1, r6, lsl #2]
   28ac8:	add	r1, r2, r1, lsl #3
   28acc:	ldr	r4, [r1, #4]
   28ad0:	and	r1, r4, r5
   28ad4:	cmp	r1, #1
   28ad8:	beq	28ab0 <__assert_fail@plt+0x16e04>
   28adc:	mov	r5, r3
   28ae0:	ldrb	r3, [sl]
   28ae4:	mov	r2, #32
   28ae8:	and	r1, r4, r9
   28aec:	and	r2, r2, r4, lsr #15
   28af0:	orr	r2, r3, r2
   28af4:	uxtb	r3, r4
   28af8:	strb	r2, [sl]
   28afc:	cmp	r3, #4
   28b00:	beq	28b14 <__assert_fail@plt+0x16e68>
   28b04:	cmp	r3, #2
   28b08:	bne	28b20 <__assert_fail@plt+0x16e74>
   28b0c:	mov	r3, #16
   28b10:	b	28b18 <__assert_fail@plt+0x16e6c>
   28b14:	mov	r3, #64	; 0x40
   28b18:	orr	r2, r2, r3
   28b1c:	strb	r2, [sl]
   28b20:	cmp	r1, #0
   28b24:	beq	28aa8 <__assert_fail@plt+0x16dfc>
   28b28:	ldr	r1, [r8, #40]	; 0x28
   28b2c:	ldr	r2, [sp, #24]
   28b30:	mov	r3, r5
   28b34:	cmp	r1, r2
   28b38:	beq	28b60 <__assert_fail@plt+0x16eb4>
   28b3c:	ldr	r5, [sp, #4]
   28b40:	tst	r4, #256	; 0x100
   28b44:	bne	28c04 <__assert_fail@plt+0x16f58>
   28b48:	ldr	r1, [sp, #12]
   28b4c:	cmp	r1, #0
   28b50:	bne	28ab0 <__assert_fail@plt+0x16e04>
   28b54:	ands	r1, r4, #16384	; 0x4000
   28b58:	bne	28c04 <__assert_fail@plt+0x16f58>
   28b5c:	b	28ab0 <__assert_fail@plt+0x16e04>
   28b60:	mov	r0, #12
   28b64:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28b68:	cmp	r0, #0
   28b6c:	beq	28e6c <__assert_fail@plt+0x171c0>
   28b70:	ldr	ip, [sp, #20]
   28b74:	str	r0, [r8, #40]	; 0x28
   28b78:	mov	sl, r0
   28b7c:	mov	r5, r0
   28b80:	ldr	r3, [ip, #4]
   28b84:	str	r3, [sl, #4]!
   28b88:	cmp	r3, #0
   28b8c:	ble	28bd0 <__assert_fail@plt+0x16f24>
   28b90:	lsl	r0, r3, #2
   28b94:	str	r3, [r5]
   28b98:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28b9c:	cmp	r0, #0
   28ba0:	str	r0, [r5, #8]
   28ba4:	beq	28e60 <__assert_fail@plt+0x171b4>
   28ba8:	ldr	r5, [sp, #20]
   28bac:	ldr	r9, [r5, #4]
   28bb0:	ldr	r1, [r5, #8]
   28bb4:	lsl	r2, r9, #2
   28bb8:	bl	118ec <memcpy@plt>
   28bbc:	mov	r3, r9
   28bc0:	movw	r9, #65280	; 0xff00
   28bc4:	mov	ip, r5
   28bc8:	movt	r9, #3
   28bcc:	b	28be0 <__assert_fail@plt+0x16f34>
   28bd0:	mov	r0, #0
   28bd4:	str	r0, [r5]
   28bd8:	str	r0, [r5, #4]
   28bdc:	str	r0, [r5, #8]
   28be0:	ldr	sl, [sp, #8]
   28be4:	mov	lr, #0
   28be8:	ldrb	r0, [sl]
   28bec:	orr	r0, r0, #128	; 0x80
   28bf0:	strb	r0, [sl]
   28bf4:	ldr	r0, [sp, #16]
   28bf8:	ldr	r5, [sp, #4]
   28bfc:	tst	r4, #256	; 0x100
   28c00:	beq	28b48 <__assert_fail@plt+0x16e9c>
   28c04:	subs	r1, r6, lr
   28c08:	bmi	28c24 <__assert_fail@plt+0x16f78>
   28c0c:	ldr	r2, [r8, #8]
   28c10:	cmp	r2, r1
   28c14:	subgt	r2, r2, #1
   28c18:	strgt	r2, [r8, #8]
   28c1c:	cmpgt	r2, r1
   28c20:	bgt	28c38 <__assert_fail@plt+0x16f8c>
   28c24:	add	lr, lr, #1
   28c28:	add	r6, r6, #1
   28c2c:	cmp	r6, r3
   28c30:	blt	28abc <__assert_fail@plt+0x16e10>
   28c34:	b	28e40 <__assert_fail@plt+0x17194>
   28c38:	ldr	r2, [r8, #12]
   28c3c:	add	r3, r2, r1, lsl #2
   28c40:	ldr	r3, [r3, #4]
   28c44:	str	r3, [r2, r1, lsl #2]
   28c48:	add	r1, r1, #1
   28c4c:	ldr	r3, [r8, #8]
   28c50:	cmp	r1, r3
   28c54:	blt	28c3c <__assert_fail@plt+0x16f90>
   28c58:	ldr	r3, [ip, #4]
   28c5c:	b	28c24 <__assert_fail@plt+0x16f78>
   28c60:	movw	lr, #65280	; 0xff00
   28c64:	mov	r9, #0
   28c68:	mov	r4, #0
   28c6c:	movt	lr, #3
   28c70:	add	r5, lr, #255	; 0xff
   28c74:	str	r5, [sp, #4]
   28c78:	b	28c90 <__assert_fail@plt+0x16fe4>
   28c7c:	mov	r3, r5
   28c80:	ldr	r5, [sp, #4]
   28c84:	add	r9, r9, #1
   28c88:	cmp	r9, r3
   28c8c:	bge	28e40 <__assert_fail@plt+0x17194>
   28c90:	ldr	r1, [ip, #8]
   28c94:	ldr	r2, [r0]
   28c98:	ldr	r1, [r1, r9, lsl #2]
   28c9c:	add	r1, r2, r1, lsl #3
   28ca0:	ldr	r6, [r1, #4]
   28ca4:	and	r1, r6, r5
   28ca8:	cmp	r1, #1
   28cac:	beq	28c84 <__assert_fail@plt+0x16fd8>
   28cb0:	mov	r5, r3
   28cb4:	ldrb	r3, [sl]
   28cb8:	mov	r2, #32
   28cbc:	and	r1, r6, lr
   28cc0:	and	r2, r2, r6, lsr #15
   28cc4:	orr	r2, r3, r2
   28cc8:	uxtb	r3, r6
   28ccc:	strb	r2, [sl]
   28cd0:	cmp	r3, #2
   28cd4:	beq	28ce8 <__assert_fail@plt+0x1703c>
   28cd8:	cmp	r3, #4
   28cdc:	bne	28cf4 <__assert_fail@plt+0x17048>
   28ce0:	mov	r3, #64	; 0x40
   28ce4:	b	28cec <__assert_fail@plt+0x17040>
   28ce8:	mov	r3, #16
   28cec:	orr	r2, r2, r3
   28cf0:	strb	r2, [sl]
   28cf4:	cmp	r1, #0
   28cf8:	beq	28c7c <__assert_fail@plt+0x16fd0>
   28cfc:	ldr	r1, [r8, #40]	; 0x28
   28d00:	ldr	r2, [sp, #24]
   28d04:	mov	r3, r5
   28d08:	cmp	r1, r2
   28d0c:	beq	28d34 <__assert_fail@plt+0x17088>
   28d10:	ldr	r5, [sp, #4]
   28d14:	tst	r6, #512	; 0x200
   28d18:	bne	28dd8 <__assert_fail@plt+0x1712c>
   28d1c:	ldr	r1, [sp, #12]
   28d20:	cmp	r1, #0
   28d24:	bne	28c84 <__assert_fail@plt+0x16fd8>
   28d28:	ands	r1, r6, #16384	; 0x4000
   28d2c:	bne	28dd8 <__assert_fail@plt+0x1712c>
   28d30:	b	28c84 <__assert_fail@plt+0x16fd8>
   28d34:	mov	r0, #12
   28d38:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28d3c:	cmp	r0, #0
   28d40:	beq	28e6c <__assert_fail@plt+0x171c0>
   28d44:	ldr	ip, [sp, #20]
   28d48:	str	r0, [r8, #40]	; 0x28
   28d4c:	mov	sl, r0
   28d50:	mov	r5, r0
   28d54:	ldr	r3, [ip, #4]
   28d58:	str	r3, [sl, #4]!
   28d5c:	cmp	r3, #1
   28d60:	blt	28d9c <__assert_fail@plt+0x170f0>
   28d64:	lsl	r0, r3, #2
   28d68:	str	r3, [r5]
   28d6c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28d70:	cmp	r0, #0
   28d74:	str	r0, [r5, #8]
   28d78:	beq	28e60 <__assert_fail@plt+0x171b4>
   28d7c:	ldr	r4, [sp, #20]
   28d80:	ldr	r5, [r4, #4]
   28d84:	ldr	r1, [r4, #8]
   28d88:	lsl	r2, r5, #2
   28d8c:	bl	118ec <memcpy@plt>
   28d90:	mov	r3, r5
   28d94:	mov	ip, r4
   28d98:	b	28dac <__assert_fail@plt+0x17100>
   28d9c:	mov	r0, #0
   28da0:	str	r0, [r5]
   28da4:	str	r0, [r5, #4]
   28da8:	str	r0, [r5, #8]
   28dac:	ldr	sl, [sp, #8]
   28db0:	movw	lr, #65280	; 0xff00
   28db4:	mov	r4, #0
   28db8:	movt	lr, #3
   28dbc:	ldrb	r0, [sl]
   28dc0:	orr	r0, r0, #128	; 0x80
   28dc4:	strb	r0, [sl]
   28dc8:	ldr	r0, [sp, #16]
   28dcc:	ldr	r5, [sp, #4]
   28dd0:	tst	r6, #512	; 0x200
   28dd4:	beq	28d1c <__assert_fail@plt+0x17070>
   28dd8:	subs	r1, r9, r4
   28ddc:	bmi	28df8 <__assert_fail@plt+0x1714c>
   28de0:	ldr	r2, [r8, #8]
   28de4:	cmp	r2, r1
   28de8:	subgt	r2, r2, #1
   28dec:	strgt	r2, [r8, #8]
   28df0:	cmpgt	r2, r1
   28df4:	bgt	28e0c <__assert_fail@plt+0x17160>
   28df8:	add	r4, r4, #1
   28dfc:	add	r9, r9, #1
   28e00:	cmp	r9, r3
   28e04:	blt	28c90 <__assert_fail@plt+0x16fe4>
   28e08:	b	28e40 <__assert_fail@plt+0x17194>
   28e0c:	ldr	r2, [r8, #12]
   28e10:	add	r3, r2, r1, lsl #2
   28e14:	ldr	r3, [r3, #4]
   28e18:	str	r3, [r2, r1, lsl #2]
   28e1c:	add	r1, r1, #1
   28e20:	ldr	r3, [r8, #8]
   28e24:	cmp	r1, r3
   28e28:	blt	28e10 <__assert_fail@plt+0x17164>
   28e2c:	ldr	r3, [ip, #4]
   28e30:	add	r4, r4, #1
   28e34:	add	r9, r9, #1
   28e38:	cmp	r9, r3
   28e3c:	blt	28c90 <__assert_fail@plt+0x16fe4>
   28e40:	mov	r1, r8
   28e44:	mov	r2, r7
   28e48:	bl	28ea8 <__assert_fail@plt+0x171fc>
   28e4c:	cmp	r0, #0
   28e50:	bne	28e6c <__assert_fail@plt+0x171c0>
   28e54:	mov	r0, r8
   28e58:	sub	sp, fp, #28
   28e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e60:	mov	r0, #0
   28e64:	str	r0, [sl]
   28e68:	str	r0, [r5]
   28e6c:	mov	r0, r8
   28e70:	bl	21ea0 <__assert_fail@plt+0x101f4>
   28e74:	ldr	r1, [sp]
   28e78:	mov	r0, #12
   28e7c:	mov	r8, #0
   28e80:	str	r0, [r1]
   28e84:	mov	r0, r8
   28e88:	sub	sp, fp, #28
   28e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e90:	mov	r0, #0
   28e94:	str	r0, [r8, #4]
   28e98:	str	r0, [r8, #8]
   28e9c:	mov	r0, r8
   28ea0:	bl	1c224 <__assert_fail@plt+0xa578>
   28ea4:	b	28e74 <__assert_fail@plt+0x171c8>
   28ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28eac:	add	fp, sp, #28
   28eb0:	sub	sp, sp, #4
   28eb4:	str	r2, [r1]
   28eb8:	mov	r4, r1
   28ebc:	mov	r7, r0
   28ec0:	mov	r0, #0
   28ec4:	mov	r9, r2
   28ec8:	ldr	r1, [r1, #8]
   28ecc:	str	r1, [r4, #16]
   28ed0:	str	r0, [r4, #20]
   28ed4:	lsl	r0, r1, #2
   28ed8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   28edc:	mov	r8, #12
   28ee0:	cmp	r0, #0
   28ee4:	str	r0, [r4, #24]
   28ee8:	beq	28fb0 <__assert_fail@plt+0x17304>
   28eec:	ldr	r1, [r4, #8]
   28ef0:	cmp	r1, #1
   28ef4:	blt	28f70 <__assert_fail@plt+0x172c4>
   28ef8:	mov	r5, #0
   28efc:	mov	sl, #2
   28f00:	b	28f20 <__assert_fail@plt+0x17274>
   28f04:	add	r2, r1, #1
   28f08:	str	r2, [r4, #20]
   28f0c:	str	r6, [r0, r1, lsl #2]
   28f10:	ldr	r1, [r4, #8]
   28f14:	add	r5, r5, #1
   28f18:	cmp	r5, r1
   28f1c:	bge	28f70 <__assert_fail@plt+0x172c4>
   28f20:	ldr	r2, [r4, #12]
   28f24:	ldr	r6, [r2, r5, lsl #2]
   28f28:	ldr	r2, [r7]
   28f2c:	add	r2, r2, r6, lsl #3
   28f30:	ldrb	r2, [r2, #4]
   28f34:	tst	r2, #8
   28f38:	bne	28f14 <__assert_fail@plt+0x17268>
   28f3c:	ldr	r2, [r4, #16]
   28f40:	ldr	r1, [r4, #20]
   28f44:	cmp	r2, r1
   28f48:	bne	28f04 <__assert_fail@plt+0x17258>
   28f4c:	add	r1, sl, r2, lsl #1
   28f50:	str	r1, [r4, #16]
   28f54:	lsl	r1, r1, #2
   28f58:	bl	1c388 <__assert_fail@plt+0xa6dc>
   28f5c:	cmp	r0, #0
   28f60:	beq	28fb0 <__assert_fail@plt+0x17304>
   28f64:	str	r0, [r4, #24]
   28f68:	ldr	r1, [r4, #20]
   28f6c:	b	28f04 <__assert_fail@plt+0x17258>
   28f70:	ldr	r1, [r7, #68]	; 0x44
   28f74:	ldr	r0, [r7, #32]
   28f78:	and	r1, r1, r9
   28f7c:	mov	r5, r0
   28f80:	add	r2, r1, r1, lsl #1
   28f84:	ldr	r1, [r5, r2, lsl #2]!
   28f88:	mov	r6, r5
   28f8c:	ldr	r3, [r6, #4]!
   28f90:	cmp	r3, r1
   28f94:	ble	28fbc <__assert_fail@plt+0x17310>
   28f98:	add	r0, r0, r2, lsl #2
   28f9c:	ldr	r0, [r0, #8]
   28fa0:	add	r2, r1, #1
   28fa4:	mov	r8, #0
   28fa8:	str	r2, [r5]
   28fac:	str	r4, [r0, r1, lsl #2]
   28fb0:	mov	r0, r8
   28fb4:	sub	sp, fp, #28
   28fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fbc:	add	r7, r0, r2, lsl #2
   28fc0:	mov	r2, #2
   28fc4:	add	r9, r2, r1, lsl #1
   28fc8:	ldr	r0, [r7, #8]!
   28fcc:	lsl	r1, r9, #2
   28fd0:	bl	1c388 <__assert_fail@plt+0xa6dc>
   28fd4:	cmp	r0, #0
   28fd8:	beq	28fb0 <__assert_fail@plt+0x17304>
   28fdc:	str	r0, [r7]
   28fe0:	str	r9, [r6]
   28fe4:	ldr	r1, [r5]
   28fe8:	b	28fa0 <__assert_fail@plt+0x172f4>
   28fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ff0:	add	fp, sp, #28
   28ff4:	sub	sp, sp, #36	; 0x24
   28ff8:	mov	r4, r0
   28ffc:	ldr	r0, [r0, #24]
   29000:	mov	r6, r2
   29004:	mov	r9, r1
   29008:	cmp	r0, r1
   2900c:	ble	29224 <__assert_fail@plt+0x17578>
   29010:	ldr	r0, [r4, #80]	; 0x50
   29014:	mov	r1, #4
   29018:	cmp	r0, #2
   2901c:	movge	r0, #0
   29020:	strge	r0, [r4, #16]
   29024:	strge	r0, [r4, #20]
   29028:	mov	r0, #0
   2902c:	tst	r6, #1
   29030:	strb	r0, [r4, #76]	; 0x4c
   29034:	str	r0, [r4, #24]
   29038:	str	r0, [r4, #28]
   2903c:	str	r0, [r4, #32]
   29040:	movweq	r1, #6
   29044:	ldr	r2, [r4, #44]	; 0x2c
   29048:	ldr	r3, [r4, #52]	; 0x34
   2904c:	str	r2, [r4, #48]	; 0x30
   29050:	str	r3, [r4, #56]	; 0x38
   29054:	str	r1, [r4, #60]	; 0x3c
   29058:	ldrb	r1, [r4, #75]	; 0x4b
   2905c:	cmp	r1, #0
   29060:	bne	2906c <__assert_fail@plt+0x173c0>
   29064:	ldr	r1, [r4]
   29068:	str	r1, [r4, #4]
   2906c:	mov	r5, r9
   29070:	cmp	r5, #0
   29074:	beq	291a0 <__assert_fail@plt+0x174f4>
   29078:	ldr	r1, [r4, #32]
   2907c:	cmp	r5, r1
   29080:	bge	29234 <__assert_fail@plt+0x17588>
   29084:	ldrb	r0, [r4, #76]	; 0x4c
   29088:	cmp	r0, #0
   2908c:	bne	293e8 <__assert_fail@plt+0x1773c>
   29090:	cmp	r5, #0
   29094:	ble	290d0 <__assert_fail@plt+0x17424>
   29098:	ldr	r1, [r4, #48]	; 0x30
   2909c:	sub	r0, r5, #1
   290a0:	cmp	r1, r0
   290a4:	beq	294b0 <__assert_fail@plt+0x17804>
   290a8:	ldr	r1, [r4, #80]	; 0x50
   290ac:	cmp	r1, #2
   290b0:	blt	290e8 <__assert_fail@plt+0x1743c>
   290b4:	ldr	r1, [r4, #8]
   290b8:	ldr	r6, [r1, r0, lsl #2]
   290bc:	cmn	r6, #1
   290c0:	bne	29118 <__assert_fail@plt+0x1746c>
   290c4:	sub	r0, r0, #1
   290c8:	cmn	r0, #1
   290cc:	bne	290b8 <__assert_fail@plt+0x1740c>
   290d0:	ldr	r1, [r4, #60]	; 0x3c
   290d4:	str	r1, [r4, #60]	; 0x3c
   290d8:	ldr	r0, [r4, #80]	; 0x50
   290dc:	cmp	r0, #2
   290e0:	bge	29150 <__assert_fail@plt+0x174a4>
   290e4:	b	29168 <__assert_fail@plt+0x174bc>
   290e8:	ldr	r1, [r4, #4]
   290ec:	ldr	r2, [r4, #68]	; 0x44
   290f0:	ldrb	r0, [r1, r0]
   290f4:	ubfx	r1, r0, #5, #3
   290f8:	and	r3, r0, #31
   290fc:	ldr	r2, [r2, r1, lsl #2]
   29100:	mov	r1, #1
   29104:	tst	r2, r1, lsl r3
   29108:	moveq	r1, #0
   2910c:	cmpeq	r0, #10
   29110:	bne	29140 <__assert_fail@plt+0x17494>
   29114:	b	29130 <__assert_fail@plt+0x17484>
   29118:	ldrb	r0, [r4, #78]	; 0x4e
   2911c:	cmp	r0, #0
   29120:	bne	2967c <__assert_fail@plt+0x179d0>
   29124:	mov	r1, #0
   29128:	cmp	r6, #10
   2912c:	bne	29140 <__assert_fail@plt+0x17494>
   29130:	ldrb	r0, [r4, #77]	; 0x4d
   29134:	cmp	r0, #0
   29138:	movwne	r0, #1
   2913c:	lsl	r1, r0, #1
   29140:	str	r1, [r4, #60]	; 0x3c
   29144:	ldr	r0, [r4, #80]	; 0x50
   29148:	cmp	r0, #2
   2914c:	blt	29168 <__assert_fail@plt+0x174bc>
   29150:	ldr	r2, [r4, #28]
   29154:	ldr	r0, [r4, #8]
   29158:	sub	r2, r2, r5
   2915c:	add	r1, r0, r5, lsl #2
   29160:	lsl	r2, r2, #2
   29164:	bl	118a4 <memmove@plt>
   29168:	ldrb	r0, [r4, #75]	; 0x4b
   2916c:	cmp	r0, #0
   29170:	bne	29498 <__assert_fail@plt+0x177ec>
   29174:	ldr	r0, [r4, #28]
   29178:	ldr	r1, [r4, #32]
   2917c:	sub	r0, r0, r5
   29180:	sub	r1, r1, r5
   29184:	str	r0, [r4, #28]
   29188:	str	r1, [r4, #32]
   2918c:	ldrb	r0, [r4, #75]	; 0x4b
   29190:	cmp	r0, #0
   29194:	ldreq	r0, [r4, #4]
   29198:	addeq	r0, r0, r5
   2919c:	streq	r0, [r4, #4]
   291a0:	str	r9, [r4, #24]
   291a4:	ldr	r0, [r4, #48]	; 0x30
   291a8:	ldr	r3, [r4, #80]	; 0x50
   291ac:	ldr	r1, [r4, #56]	; 0x38
   291b0:	sub	r2, r0, r5
   291b4:	cmp	r3, #2
   291b8:	sub	r0, r1, r5
   291bc:	str	r2, [r4, #48]	; 0x30
   291c0:	str	r0, [r4, #56]	; 0x38
   291c4:	blt	291ec <__assert_fail@plt+0x17540>
   291c8:	ldrb	r0, [r4, #72]	; 0x48
   291cc:	cmp	r0, #0
   291d0:	beq	2920c <__assert_fail@plt+0x17560>
   291d4:	mov	r0, r4
   291d8:	bl	21f00 <__assert_fail@plt+0x10254>
   291dc:	cmp	r0, #0
   291e0:	beq	29214 <__assert_fail@plt+0x17568>
   291e4:	sub	sp, fp, #28
   291e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   291ec:	ldrb	r0, [r4, #75]	; 0x4b
   291f0:	cmp	r0, #0
   291f4:	bne	294cc <__assert_fail@plt+0x17820>
   291f8:	str	r2, [r4, #28]
   291fc:	mov	r0, #0
   29200:	str	r0, [r4, #40]	; 0x28
   29204:	sub	sp, fp, #28
   29208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2920c:	mov	r0, r4
   29210:	bl	22820 <__assert_fail@plt+0x10b74>
   29214:	mov	r0, #0
   29218:	str	r0, [r4, #40]	; 0x28
   2921c:	sub	sp, fp, #28
   29220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29224:	sub	r5, r9, r0
   29228:	cmp	r5, #0
   2922c:	bne	29078 <__assert_fail@plt+0x173cc>
   29230:	b	291a0 <__assert_fail@plt+0x174f4>
   29234:	ldrb	r2, [r4, #76]	; 0x4c
   29238:	ldr	lr, [r4, #28]
   2923c:	cmp	r2, #0
   29240:	bne	2981c <__assert_fail@plt+0x17b70>
   29244:	mov	r2, #0
   29248:	str	r2, [r4, #28]
   2924c:	ldr	r3, [r4, #80]	; 0x50
   29250:	cmp	r3, #2
   29254:	blt	2953c <__assert_fail@plt+0x17890>
   29258:	ldrb	r2, [r4, #73]	; 0x49
   2925c:	cmp	r2, #0
   29260:	beq	2931c <__assert_fail@plt+0x17670>
   29264:	ldr	r7, [r4]
   29268:	sub	r3, r5, r3
   2926c:	add	ip, r7, r0
   29270:	add	r3, ip, r3
   29274:	add	r8, ip, r5
   29278:	cmp	r3, r7
   2927c:	movcc	r3, r7
   29280:	mov	r7, r8
   29284:	sub	r7, r7, #1
   29288:	cmp	r7, r3
   2928c:	bcc	2931c <__assert_fail@plt+0x17670>
   29290:	ldrb	r2, [r7]
   29294:	and	r2, r2, #192	; 0xc0
   29298:	cmp	r2, #128	; 0x80
   2929c:	beq	29284 <__assert_fail@plt+0x175d8>
   292a0:	ldr	r0, [r4, #48]	; 0x30
   292a4:	mov	sl, lr
   292a8:	mov	r1, r7
   292ac:	add	r0, ip, r0
   292b0:	sub	r2, r0, r7
   292b4:	ldr	r0, [r4, #64]	; 0x40
   292b8:	cmp	r0, #0
   292bc:	bne	299e8 <__assert_fail@plt+0x17d3c>
   292c0:	mov	r0, #0
   292c4:	add	r3, sp, #24
   292c8:	str	r0, [sp, #28]
   292cc:	str	r0, [sp, #24]
   292d0:	add	r0, sp, #20
   292d4:	bl	1c324 <__assert_fail@plt+0xa678>
   292d8:	sub	r1, r8, r7
   292dc:	mvn	r7, #0
   292e0:	cmp	r0, r1
   292e4:	bcc	29308 <__assert_fail@plt+0x1765c>
   292e8:	cmn	r0, #3
   292ec:	bhi	29308 <__assert_fail@plt+0x1765c>
   292f0:	mov	r2, #0
   292f4:	sub	r0, r0, r1
   292f8:	str	r2, [r4, #16]
   292fc:	str	r2, [r4, #20]
   29300:	str	r0, [r4, #28]
   29304:	ldr	r7, [sp, #20]
   29308:	cmn	r7, #1
   2930c:	bne	293cc <__assert_fail@plt+0x17720>
   29310:	ldr	r0, [r4, #24]
   29314:	ldr	r1, [r4, #32]
   29318:	mov	lr, sl
   2931c:	add	r8, r1, r0
   29320:	cmp	r8, r9
   29324:	bge	2969c <__assert_fail@plt+0x179f0>
   29328:	add	sl, r4, #16
   2932c:	str	lr, [sp]
   29330:	ldr	r0, [r4]
   29334:	ldr	r2, [r4, #44]	; 0x2c
   29338:	mov	r3, sl
   2933c:	add	r1, r0, r8
   29340:	ldr	r0, [sl]
   29344:	sub	r7, r2, r8
   29348:	mov	r2, r7
   2934c:	str	r0, [sp, #8]
   29350:	ldr	r0, [sl, #4]
   29354:	str	r0, [sp, #4]
   29358:	add	r0, sp, #24
   2935c:	bl	1c324 <__assert_fail@plt+0xa678>
   29360:	sub	r1, r0, #1
   29364:	cmn	r1, #3
   29368:	bcs	29380 <__assert_fail@plt+0x176d4>
   2936c:	ldr	r7, [sp, #24]
   29370:	add	r8, r0, r8
   29374:	cmp	r8, r9
   29378:	blt	29330 <__assert_fail@plt+0x17684>
   2937c:	b	293b8 <__assert_fail@plt+0x1770c>
   29380:	ldr	r3, [sp, #4]
   29384:	ldr	r2, [sp, #8]
   29388:	cmp	r7, #0
   2938c:	mov	r1, #0
   29390:	cmpne	r0, #0
   29394:	beq	293a0 <__assert_fail@plt+0x176f4>
   29398:	ldr	r0, [r4]
   2939c:	ldrb	r1, [r0, r8]
   293a0:	stm	sl, {r2, r3}
   293a4:	mov	r0, #1
   293a8:	mov	r7, r1
   293ac:	add	r8, r0, r8
   293b0:	cmp	r8, r9
   293b4:	blt	29330 <__assert_fail@plt+0x17684>
   293b8:	ldr	lr, [sp]
   293bc:	sub	r0, r8, r9
   293c0:	cmn	r7, #1
   293c4:	str	r0, [r4, #28]
   293c8:	beq	296a4 <__assert_fail@plt+0x179f8>
   293cc:	ldrb	r0, [r4, #78]	; 0x4e
   293d0:	cmp	r0, #0
   293d4:	bne	299b8 <__assert_fail@plt+0x17d0c>
   293d8:	mov	r1, #0
   293dc:	cmp	r7, #10
   293e0:	beq	297f0 <__assert_fail@plt+0x17b44>
   293e4:	b	29800 <__assert_fail@plt+0x17b54>
   293e8:	ldr	ip, [r4, #12]
   293ec:	ldr	r0, [r4, #28]
   293f0:	mov	r2, #0
   293f4:	b	29404 <__assert_fail@plt+0x17758>
   293f8:	cmp	r2, r3
   293fc:	mov	r0, r3
   29400:	bge	29430 <__assert_fail@plt+0x17784>
   29404:	add	r1, r2, r0
   29408:	add	r1, r1, r1, lsr #31
   2940c:	asr	r1, r1, #1
   29410:	ldr	r7, [ip, r1, lsl #2]
   29414:	mov	r3, r1
   29418:	cmp	r7, r5
   2941c:	bgt	293f8 <__assert_fail@plt+0x1774c>
   29420:	bge	29430 <__assert_fail@plt+0x17784>
   29424:	add	r2, r1, #1
   29428:	mov	r3, r0
   2942c:	b	293f8 <__assert_fail@plt+0x1774c>
   29430:	cmp	r7, r5
   29434:	mov	r0, #0
   29438:	movwlt	r0, #1
   2943c:	add	r7, r1, r0
   29440:	cmp	r7, #0
   29444:	ble	29480 <__assert_fail@plt+0x177d4>
   29448:	ldr	r1, [r4, #48]	; 0x30
   2944c:	sub	r0, r7, #1
   29450:	cmp	r1, r0
   29454:	beq	29844 <__assert_fail@plt+0x17b98>
   29458:	ldr	r1, [r4, #80]	; 0x50
   2945c:	cmp	r1, #2
   29460:	blt	29588 <__assert_fail@plt+0x178dc>
   29464:	ldr	r1, [r4, #8]
   29468:	ldr	r6, [r1, r0, lsl #2]
   2946c:	cmn	r6, #1
   29470:	bne	295b8 <__assert_fail@plt+0x1790c>
   29474:	sub	r0, r0, #1
   29478:	cmn	r0, #1
   2947c:	bne	29468 <__assert_fail@plt+0x177bc>
   29480:	ldr	r1, [r4, #60]	; 0x3c
   29484:	str	r1, [r4, #60]	; 0x3c
   29488:	cmp	r7, r5
   2948c:	ldr	r2, [r4, #28]
   29490:	beq	295f0 <__assert_fail@plt+0x17944>
   29494:	b	2985c <__assert_fail@plt+0x17bb0>
   29498:	ldr	r2, [r4, #28]
   2949c:	ldr	r0, [r4, #4]
   294a0:	add	r1, r0, r5
   294a4:	sub	r2, r2, r5
   294a8:	bl	118a4 <memmove@plt>
   294ac:	b	29174 <__assert_fail@plt+0x174c8>
   294b0:	and	r0, r6, #2
   294b4:	eor	r1, r0, #10
   294b8:	str	r1, [r4, #60]	; 0x3c
   294bc:	ldr	r0, [r4, #80]	; 0x50
   294c0:	cmp	r0, #2
   294c4:	bge	29150 <__assert_fail@plt+0x174a4>
   294c8:	b	29168 <__assert_fail@plt+0x174bc>
   294cc:	ldrb	r0, [r4, #72]	; 0x48
   294d0:	cmp	r0, #0
   294d4:	beq	296ec <__assert_fail@plt+0x17a40>
   294d8:	ldr	r6, [r4, #36]	; 0x24
   294dc:	ldr	r5, [r4, #28]
   294e0:	cmp	r6, r2
   294e4:	movgt	r6, r2
   294e8:	cmp	r5, r6
   294ec:	bge	29778 <__assert_fail@plt+0x17acc>
   294f0:	bl	11a60 <__ctype_toupper_loc@plt>
   294f4:	ldr	r1, [r4]
   294f8:	ldr	r2, [r4, #64]	; 0x40
   294fc:	add	r1, r1, r9
   29500:	cmp	r2, #0
   29504:	ldrb	r1, [r1, r5]
   29508:	bne	29534 <__assert_fail@plt+0x17888>
   2950c:	ldr	r2, [r0]
   29510:	ldr	r1, [r2, r1, lsl #2]
   29514:	ldr	r2, [r4, #4]
   29518:	strb	r1, [r2, r5]
   2951c:	add	r1, r5, #1
   29520:	cmp	r1, r6
   29524:	bge	29774 <__assert_fail@plt+0x17ac8>
   29528:	ldr	r9, [r4, #24]
   2952c:	mov	r5, r1
   29530:	b	294f4 <__assert_fail@plt+0x17848>
   29534:	ldrb	r1, [r2, r1]
   29538:	b	2950c <__assert_fail@plt+0x17860>
   2953c:	ldr	r3, [r4]
   29540:	add	r0, r5, r0
   29544:	ldr	r1, [r4, #64]	; 0x40
   29548:	add	r0, r0, r3
   2954c:	cmp	r1, #0
   29550:	ldrb	r0, [r0, #-1]
   29554:	str	r2, [r4, #32]
   29558:	ldrbne	r0, [r1, r0]
   2955c:	ldr	r1, [r4, #68]	; 0x44
   29560:	ubfx	r2, r0, #5, #3
   29564:	and	r3, r0, #31
   29568:	ldr	r2, [r1, r2, lsl #2]
   2956c:	mov	r1, #1
   29570:	tst	r2, r1, lsl r3
   29574:	moveq	r1, #0
   29578:	cmpeq	r0, #10
   2957c:	beq	297c4 <__assert_fail@plt+0x17b18>
   29580:	str	r1, [r4, #60]	; 0x3c
   29584:	b	2918c <__assert_fail@plt+0x174e0>
   29588:	ldr	r1, [r4, #4]
   2958c:	ldr	r2, [r4, #68]	; 0x44
   29590:	ldrb	r0, [r1, r0]
   29594:	ubfx	r1, r0, #5, #3
   29598:	and	r3, r0, #31
   2959c:	ldr	r2, [r2, r1, lsl #2]
   295a0:	mov	r1, #1
   295a4:	tst	r2, r1, lsl r3
   295a8:	moveq	r1, #0
   295ac:	cmpeq	r0, #10
   295b0:	bne	295e0 <__assert_fail@plt+0x17934>
   295b4:	b	295d0 <__assert_fail@plt+0x17924>
   295b8:	ldrb	r0, [r4, #78]	; 0x4e
   295bc:	cmp	r0, #0
   295c0:	bne	29998 <__assert_fail@plt+0x17cec>
   295c4:	mov	r1, #0
   295c8:	cmp	r6, #10
   295cc:	bne	295e0 <__assert_fail@plt+0x17934>
   295d0:	ldrb	r0, [r4, #77]	; 0x4d
   295d4:	cmp	r0, #0
   295d8:	movwne	r0, #1
   295dc:	lsl	r1, r0, #1
   295e0:	str	r1, [r4, #60]	; 0x3c
   295e4:	cmp	r7, r5
   295e8:	ldr	r2, [r4, #28]
   295ec:	bne	2985c <__assert_fail@plt+0x17bb0>
   295f0:	cmp	r2, r5
   295f4:	ble	2985c <__assert_fail@plt+0x17bb0>
   295f8:	ldr	r0, [r4, #12]
   295fc:	ldr	r0, [r0, r5, lsl #2]
   29600:	cmp	r0, r5
   29604:	bne	2985c <__assert_fail@plt+0x17bb0>
   29608:	ldr	r0, [r4, #8]
   2960c:	sub	r2, r2, r5
   29610:	lsl	r2, r2, #2
   29614:	add	r1, r0, r5, lsl #2
   29618:	bl	118a4 <memmove@plt>
   2961c:	ldr	r2, [r4, #28]
   29620:	ldr	r0, [r4, #4]
   29624:	add	r1, r0, r5
   29628:	sub	r2, r2, r5
   2962c:	bl	118a4 <memmove@plt>
   29630:	ldr	r0, [r4, #28]
   29634:	ldr	r1, [r4, #32]
   29638:	sub	r0, r0, r5
   2963c:	sub	r1, r1, r5
   29640:	cmp	r0, #1
   29644:	str	r0, [r4, #28]
   29648:	str	r1, [r4, #32]
   2964c:	blt	2918c <__assert_fail@plt+0x174e0>
   29650:	ldr	r0, [r4, #12]
   29654:	mov	r2, #0
   29658:	add	r1, r0, r5, lsl #2
   2965c:	ldr	r3, [r1, r2, lsl #2]
   29660:	sub	r3, r3, r5
   29664:	str	r3, [r0, r2, lsl #2]
   29668:	add	r2, r2, #1
   2966c:	ldr	r3, [r4, #28]
   29670:	cmp	r2, r3
   29674:	blt	2965c <__assert_fail@plt+0x179b0>
   29678:	b	2918c <__assert_fail@plt+0x174e0>
   2967c:	mov	r0, r6
   29680:	bl	11afc <iswalnum@plt>
   29684:	mov	r1, #1
   29688:	cmp	r6, #95	; 0x5f
   2968c:	beq	29140 <__assert_fail@plt+0x17494>
   29690:	cmp	r0, #0
   29694:	beq	29124 <__assert_fail@plt+0x17478>
   29698:	b	29140 <__assert_fail@plt+0x17494>
   2969c:	sub	r0, r8, r9
   296a0:	str	r0, [r4, #28]
   296a4:	cmp	lr, #0
   296a8:	ble	296e4 <__assert_fail@plt+0x17a38>
   296ac:	ldr	r1, [r4, #48]	; 0x30
   296b0:	sub	r0, lr, #1
   296b4:	cmp	r1, r0
   296b8:	beq	2998c <__assert_fail@plt+0x17ce0>
   296bc:	ldr	r1, [r4, #80]	; 0x50
   296c0:	cmp	r1, #2
   296c4:	blt	29790 <__assert_fail@plt+0x17ae4>
   296c8:	ldr	r1, [r4, #8]
   296cc:	ldr	r6, [r1, r0, lsl #2]
   296d0:	cmn	r6, #1
   296d4:	bne	297d8 <__assert_fail@plt+0x17b2c>
   296d8:	sub	r0, r0, #1
   296dc:	cmn	r0, #1
   296e0:	bne	296cc <__assert_fail@plt+0x17a20>
   296e4:	ldr	r1, [r4, #60]	; 0x3c
   296e8:	b	29800 <__assert_fail@plt+0x17b54>
   296ec:	ldr	r3, [r4, #64]	; 0x40
   296f0:	cmp	r3, #0
   296f4:	beq	29214 <__assert_fail@plt+0x17568>
   296f8:	ldr	r1, [r4, #36]	; 0x24
   296fc:	ldr	r0, [r4, #28]
   29700:	cmp	r1, r2
   29704:	movgt	r1, r2
   29708:	cmp	r0, r1
   2970c:	bge	2975c <__assert_fail@plt+0x17ab0>
   29710:	ldr	r7, [r4]
   29714:	add	r2, r0, r9
   29718:	ldr	r6, [r4, #4]
   2971c:	ldrb	r2, [r7, r2]
   29720:	ldrb	r2, [r3, r2]
   29724:	strb	r2, [r6, r0]
   29728:	add	r0, r0, #1
   2972c:	cmp	r0, r1
   29730:	bge	2975c <__assert_fail@plt+0x17ab0>
   29734:	ldr	r7, [r4, #24]
   29738:	ldm	r4, {r2, r3}
   2973c:	ldr	r6, [r4, #64]	; 0x40
   29740:	add	r2, r2, r7
   29744:	ldrb	r2, [r2, r0]
   29748:	ldrb	r2, [r6, r2]
   2974c:	strb	r2, [r3, r0]
   29750:	add	r0, r0, #1
   29754:	cmp	r0, r1
   29758:	blt	29734 <__assert_fail@plt+0x17a88>
   2975c:	str	r0, [r4, #28]
   29760:	str	r0, [r4, #32]
   29764:	mov	r0, #0
   29768:	str	r0, [r4, #40]	; 0x28
   2976c:	sub	sp, fp, #28
   29770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29774:	add	r5, r5, #1
   29778:	str	r5, [r4, #28]
   2977c:	str	r5, [r4, #32]
   29780:	mov	r0, #0
   29784:	str	r0, [r4, #40]	; 0x28
   29788:	sub	sp, fp, #28
   2978c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29790:	ldr	r1, [r4, #4]
   29794:	ldr	r2, [r4, #68]	; 0x44
   29798:	ldrb	r0, [r1, r0]
   2979c:	ubfx	r1, r0, #5, #3
   297a0:	and	r3, r0, #31
   297a4:	ldr	r2, [r2, r1, lsl #2]
   297a8:	mov	r1, #1
   297ac:	tst	r2, r1, lsl r3
   297b0:	bne	29800 <__assert_fail@plt+0x17b54>
   297b4:	mov	r1, #0
   297b8:	cmp	r0, #10
   297bc:	beq	297f0 <__assert_fail@plt+0x17b44>
   297c0:	b	29800 <__assert_fail@plt+0x17b54>
   297c4:	ldrb	r0, [r4, #77]	; 0x4d
   297c8:	cmp	r0, #0
   297cc:	movwne	r0, #1
   297d0:	lsl	r1, r0, #1
   297d4:	b	29580 <__assert_fail@plt+0x178d4>
   297d8:	ldrb	r0, [r4, #78]	; 0x4e
   297dc:	cmp	r0, #0
   297e0:	bne	29a24 <__assert_fail@plt+0x17d78>
   297e4:	mov	r1, #0
   297e8:	cmp	r6, #10
   297ec:	bne	29800 <__assert_fail@plt+0x17b54>
   297f0:	ldrb	r0, [r4, #77]	; 0x4d
   297f4:	cmp	r0, #0
   297f8:	movwne	r0, #1
   297fc:	lsl	r1, r0, #1
   29800:	str	r1, [r4, #60]	; 0x3c
   29804:	mov	r0, #0
   29808:	ldr	r2, [r4, #28]
   2980c:	cmp	r2, #0
   29810:	bne	29944 <__assert_fail@plt+0x17c98>
   29814:	str	r0, [r4, #32]
   29818:	b	2918c <__assert_fail@plt+0x174e0>
   2981c:	mov	r2, #0
   29820:	strb	r2, [r4, #76]	; 0x4c
   29824:	sub	r2, r5, r9
   29828:	ldr	r3, [r4, #44]	; 0x2c
   2982c:	ldr	r7, [r4, #52]	; 0x34
   29830:	add	r3, r2, r3
   29834:	add	r2, r2, r7
   29838:	str	r3, [r4, #48]	; 0x30
   2983c:	str	r2, [r4, #56]	; 0x38
   29840:	b	29244 <__assert_fail@plt+0x17598>
   29844:	and	r0, r6, #2
   29848:	eor	r1, r0, #10
   2984c:	str	r1, [r4, #60]	; 0x3c
   29850:	cmp	r7, r5
   29854:	ldr	r2, [r4, #28]
   29858:	beq	295f0 <__assert_fail@plt+0x17944>
   2985c:	mov	r0, #0
   29860:	strb	r0, [r4, #76]	; 0x4c
   29864:	sub	r0, r5, r9
   29868:	ldr	r1, [r4, #44]	; 0x2c
   2986c:	ldr	r3, [r4, #52]	; 0x34
   29870:	add	r1, r0, r1
   29874:	add	r0, r0, r3
   29878:	str	r1, [r4, #48]	; 0x30
   2987c:	sub	r1, r7, #1
   29880:	str	r0, [r4, #56]	; 0x38
   29884:	add	r0, r1, #1
   29888:	cmp	r0, #1
   2988c:	blt	298a4 <__assert_fail@plt+0x17bf8>
   29890:	ldr	r3, [r4, #12]
   29894:	ldr	r3, [r3, r1, lsl #2]
   29898:	sub	r1, r1, #1
   2989c:	cmp	r3, r5
   298a0:	beq	29884 <__assert_fail@plt+0x17bd8>
   298a4:	cmp	r0, r2
   298a8:	bge	298cc <__assert_fail@plt+0x17c20>
   298ac:	ldr	r1, [r4, #8]
   298b0:	ldr	r3, [r1, r0, lsl #2]
   298b4:	cmn	r3, #1
   298b8:	bne	298cc <__assert_fail@plt+0x17c20>
   298bc:	add	r0, r0, #1
   298c0:	cmp	r2, r0
   298c4:	bne	298b0 <__assert_fail@plt+0x17c04>
   298c8:	b	298d4 <__assert_fail@plt+0x17c28>
   298cc:	cmp	r0, r2
   298d0:	bne	298e4 <__assert_fail@plt+0x17c38>
   298d4:	mov	r0, #0
   298d8:	str	r0, [r4, #28]
   298dc:	str	r0, [r4, #32]
   298e0:	b	2918c <__assert_fail@plt+0x174e0>
   298e4:	ldr	r1, [r4, #12]
   298e8:	ldr	r0, [r1, r0, lsl #2]
   298ec:	subs	r2, r0, r5
   298f0:	str	r2, [r4, #28]
   298f4:	beq	29938 <__assert_fail@plt+0x17c8c>
   298f8:	cmp	r2, #1
   298fc:	blt	29920 <__assert_fail@plt+0x17c74>
   29900:	ldr	r0, [r4, #8]
   29904:	mov	r1, #0
   29908:	mvn	r3, #0
   2990c:	str	r3, [r0, r1, lsl #2]
   29910:	add	r1, r1, #1
   29914:	ldr	r2, [r4, #28]
   29918:	cmp	r1, r2
   2991c:	blt	2990c <__assert_fail@plt+0x17c60>
   29920:	ldr	r0, [r4, #4]
   29924:	mov	r1, #255	; 0xff
   29928:	bl	11b2c <memset@plt>
   2992c:	ldr	r0, [r4, #28]
   29930:	str	r0, [r4, #32]
   29934:	b	2918c <__assert_fail@plt+0x174e0>
   29938:	mov	r0, #0
   2993c:	str	r0, [r4, #32]
   29940:	b	2918c <__assert_fail@plt+0x174e0>
   29944:	cmp	r2, #1
   29948:	blt	2996c <__assert_fail@plt+0x17cc0>
   2994c:	ldr	r0, [r4, #8]
   29950:	mov	r1, #0
   29954:	mvn	r3, #0
   29958:	str	r3, [r0, r1, lsl #2]
   2995c:	add	r1, r1, #1
   29960:	ldr	r2, [r4, #28]
   29964:	cmp	r1, r2
   29968:	blt	29958 <__assert_fail@plt+0x17cac>
   2996c:	ldrb	r0, [r4, #75]	; 0x4b
   29970:	cmp	r0, #0
   29974:	beq	299dc <__assert_fail@plt+0x17d30>
   29978:	ldr	r0, [r4, #4]
   2997c:	mov	r1, #255	; 0xff
   29980:	bl	11b2c <memset@plt>
   29984:	ldr	r0, [r4, #28]
   29988:	b	29814 <__assert_fail@plt+0x17b68>
   2998c:	and	r0, r6, #2
   29990:	eor	r1, r0, #10
   29994:	b	29800 <__assert_fail@plt+0x17b54>
   29998:	mov	r0, r6
   2999c:	bl	11afc <iswalnum@plt>
   299a0:	mov	r1, #1
   299a4:	cmp	r6, #95	; 0x5f
   299a8:	beq	295e0 <__assert_fail@plt+0x17934>
   299ac:	cmp	r0, #0
   299b0:	beq	295c4 <__assert_fail@plt+0x17918>
   299b4:	b	295e0 <__assert_fail@plt+0x17934>
   299b8:	mov	r0, r7
   299bc:	bl	11afc <iswalnum@plt>
   299c0:	mov	r1, #1
   299c4:	cmp	r7, #95	; 0x5f
   299c8:	beq	29800 <__assert_fail@plt+0x17b54>
   299cc:	cmp	r0, #0
   299d0:	mov	r2, r7
   299d4:	beq	293d8 <__assert_fail@plt+0x1772c>
   299d8:	b	29800 <__assert_fail@plt+0x17b54>
   299dc:	mov	r0, r2
   299e0:	str	r2, [r4, #32]
   299e4:	b	2918c <__assert_fail@plt+0x174e0>
   299e8:	cmp	r2, #1
   299ec:	blt	29a44 <__assert_fail@plt+0x17d98>
   299f0:	cmp	r2, #6
   299f4:	mov	r1, r2
   299f8:	movge	r1, #6
   299fc:	sub	ip, r1, #1
   29a00:	add	r1, sp, #14
   29a04:	ldrb	r3, [r7, ip]
   29a08:	cmp	ip, #0
   29a0c:	ldrb	r3, [r0, r3]
   29a10:	strb	r3, [r1, ip]
   29a14:	sub	r3, ip, #1
   29a18:	mov	ip, r3
   29a1c:	bgt	29a04 <__assert_fail@plt+0x17d58>
   29a20:	b	292c0 <__assert_fail@plt+0x17614>
   29a24:	mov	r0, r6
   29a28:	bl	11afc <iswalnum@plt>
   29a2c:	mov	r1, #1
   29a30:	cmp	r6, #95	; 0x5f
   29a34:	beq	29800 <__assert_fail@plt+0x17b54>
   29a38:	cmp	r0, #0
   29a3c:	beq	297e4 <__assert_fail@plt+0x17b38>
   29a40:	b	29800 <__assert_fail@plt+0x17b54>
   29a44:	add	r1, sp, #14
   29a48:	b	292c0 <__assert_fail@plt+0x17614>
   29a4c:	push	{r4, r5, r6, sl, fp, lr}
   29a50:	add	fp, sp, #16
   29a54:	mov	r3, r2
   29a58:	ldr	r2, [r0, #88]	; 0x58
   29a5c:	mov	r5, r1
   29a60:	mov	r4, r0
   29a64:	mov	r1, r3
   29a68:	bl	29ca4 <__assert_fail@plt+0x17ff8>
   29a6c:	ldr	r1, [r5, #8]
   29a70:	cmp	r1, #1
   29a74:	blt	29bec <__assert_fail@plt+0x17f40>
   29a78:	ldr	r3, [r5, #12]
   29a7c:	ldr	r5, [r4, #84]	; 0x54
   29a80:	movw	lr, #65280	; 0xff00
   29a84:	and	ip, r0, #8
   29a88:	and	r2, r0, #2
   29a8c:	tst	r0, #1
   29a90:	movt	lr, #3
   29a94:	ldr	r5, [r5]
   29a98:	bne	29af4 <__assert_fail@plt+0x17e48>
   29a9c:	cmp	r2, #0
   29aa0:	bne	29b4c <__assert_fail@plt+0x17ea0>
   29aa4:	mov	r2, #0
   29aa8:	b	29ab8 <__assert_fail@plt+0x17e0c>
   29aac:	add	r2, r2, #1
   29ab0:	cmp	r2, r1
   29ab4:	bge	29bec <__assert_fail@plt+0x17f40>
   29ab8:	ldr	r0, [r3, r2, lsl #2]
   29abc:	add	r4, r5, r0, lsl #3
   29ac0:	ldr	r4, [r4, #4]
   29ac4:	uxtb	r6, r4
   29ac8:	cmp	r6, #2
   29acc:	bne	29aac <__assert_fail@plt+0x17e00>
   29ad0:	tst	r4, lr
   29ad4:	beq	29bf0 <__assert_fail@plt+0x17f44>
   29ad8:	tst	r4, #9216	; 0x2400
   29adc:	bne	29aac <__assert_fail@plt+0x17e00>
   29ae0:	cmp	ip, #0
   29ae4:	bne	29bf0 <__assert_fail@plt+0x17f44>
   29ae8:	ands	r4, r4, #32768	; 0x8000
   29aec:	bne	29aac <__assert_fail@plt+0x17e00>
   29af0:	b	29bf0 <__assert_fail@plt+0x17f44>
   29af4:	cmp	r2, #0
   29af8:	bne	29b9c <__assert_fail@plt+0x17ef0>
   29afc:	mov	r2, #0
   29b00:	b	29b10 <__assert_fail@plt+0x17e64>
   29b04:	add	r2, r2, #1
   29b08:	cmp	r2, r1
   29b0c:	bge	29bec <__assert_fail@plt+0x17f40>
   29b10:	ldr	r0, [r3, r2, lsl #2]
   29b14:	add	r4, r5, r0, lsl #3
   29b18:	ldr	r4, [r4, #4]
   29b1c:	uxtb	r6, r4
   29b20:	cmp	r6, #2
   29b24:	bne	29b04 <__assert_fail@plt+0x17e58>
   29b28:	tst	r4, lr
   29b2c:	beq	29bf0 <__assert_fail@plt+0x17f44>
   29b30:	tst	r4, #10240	; 0x2800
   29b34:	bne	29b04 <__assert_fail@plt+0x17e58>
   29b38:	cmp	ip, #0
   29b3c:	bne	29bf0 <__assert_fail@plt+0x17f44>
   29b40:	ands	r4, r4, #32768	; 0x8000
   29b44:	bne	29b04 <__assert_fail@plt+0x17e58>
   29b48:	b	29bf0 <__assert_fail@plt+0x17f44>
   29b4c:	mov	r2, #0
   29b50:	b	29b60 <__assert_fail@plt+0x17eb4>
   29b54:	add	r2, r2, #1
   29b58:	cmp	r2, r1
   29b5c:	bge	29bec <__assert_fail@plt+0x17f40>
   29b60:	ldr	r0, [r3, r2, lsl #2]
   29b64:	add	r4, r5, r0, lsl #3
   29b68:	ldr	r4, [r4, #4]
   29b6c:	uxtb	r6, r4
   29b70:	cmp	r6, #2
   29b74:	bne	29b54 <__assert_fail@plt+0x17ea8>
   29b78:	tst	r4, lr
   29b7c:	beq	29bf0 <__assert_fail@plt+0x17f44>
   29b80:	tst	r4, #1024	; 0x400
   29b84:	bne	29b54 <__assert_fail@plt+0x17ea8>
   29b88:	cmp	ip, #0
   29b8c:	bne	29bf0 <__assert_fail@plt+0x17f44>
   29b90:	ands	r4, r4, #32768	; 0x8000
   29b94:	bne	29b54 <__assert_fail@plt+0x17ea8>
   29b98:	b	29bf0 <__assert_fail@plt+0x17f44>
   29b9c:	mov	r2, #0
   29ba0:	b	29bb0 <__assert_fail@plt+0x17f04>
   29ba4:	add	r2, r2, #1
   29ba8:	cmp	r2, r1
   29bac:	bge	29bec <__assert_fail@plt+0x17f40>
   29bb0:	ldr	r0, [r3, r2, lsl #2]
   29bb4:	add	r4, r5, r0, lsl #3
   29bb8:	ldr	r4, [r4, #4]
   29bbc:	uxtb	r6, r4
   29bc0:	cmp	r6, #2
   29bc4:	bne	29ba4 <__assert_fail@plt+0x17ef8>
   29bc8:	tst	r4, lr
   29bcc:	beq	29bf0 <__assert_fail@plt+0x17f44>
   29bd0:	tst	r4, #2048	; 0x800
   29bd4:	bne	29ba4 <__assert_fail@plt+0x17ef8>
   29bd8:	cmp	ip, #0
   29bdc:	bne	29bf0 <__assert_fail@plt+0x17f44>
   29be0:	ands	r4, r4, #32768	; 0x8000
   29be4:	bne	29ba4 <__assert_fail@plt+0x17ef8>
   29be8:	b	29bf0 <__assert_fail@plt+0x17f44>
   29bec:	mov	r0, #0
   29bf0:	pop	{r4, r5, r6, sl, fp, pc}
   29bf4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29bf8:	add	fp, sp, #24
   29bfc:	mov	r8, r0
   29c00:	ldr	r0, [r0, #124]	; 0x7c
   29c04:	cmp	r0, #1
   29c08:	blt	29c94 <__assert_fail@plt+0x17fe8>
   29c0c:	mov	r7, #0
   29c10:	b	29c2c <__assert_fail@plt+0x17f80>
   29c14:	mov	r0, r5
   29c18:	bl	1c224 <__assert_fail@plt+0xa578>
   29c1c:	ldr	r0, [r8, #124]	; 0x7c
   29c20:	add	r7, r7, #1
   29c24:	cmp	r7, r0
   29c28:	bge	29c94 <__assert_fail@plt+0x17fe8>
   29c2c:	ldr	r0, [r8, #132]	; 0x84
   29c30:	ldr	r5, [r0, r7, lsl #2]
   29c34:	ldr	r0, [r5, #16]
   29c38:	cmp	r0, #1
   29c3c:	blt	29c6c <__assert_fail@plt+0x17fc0>
   29c40:	mov	r4, #0
   29c44:	ldr	r0, [r5, #20]
   29c48:	ldr	r6, [r0, r4, lsl #2]
   29c4c:	ldr	r0, [r6, #16]
   29c50:	bl	1c224 <__assert_fail@plt+0xa578>
   29c54:	mov	r0, r6
   29c58:	bl	1c224 <__assert_fail@plt+0xa578>
   29c5c:	ldr	r0, [r5, #16]
   29c60:	add	r4, r4, #1
   29c64:	cmp	r4, r0
   29c68:	blt	29c44 <__assert_fail@plt+0x17f98>
   29c6c:	ldr	r0, [r5, #20]
   29c70:	bl	1c224 <__assert_fail@plt+0xa578>
   29c74:	ldr	r0, [r5, #8]
   29c78:	cmp	r0, #0
   29c7c:	beq	29c14 <__assert_fail@plt+0x17f68>
   29c80:	ldr	r0, [r0, #8]
   29c84:	bl	1c224 <__assert_fail@plt+0xa578>
   29c88:	ldr	r0, [r5, #8]
   29c8c:	bl	1c224 <__assert_fail@plt+0xa578>
   29c90:	b	29c14 <__assert_fail@plt+0x17f68>
   29c94:	mov	r0, #0
   29c98:	str	r0, [r8, #108]	; 0x6c
   29c9c:	str	r0, [r8, #124]	; 0x7c
   29ca0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29ca4:	push	{r4, r5, fp, lr}
   29ca8:	add	fp, sp, #8
   29cac:	mov	r4, r0
   29cb0:	cmn	r1, #1
   29cb4:	ble	29cec <__assert_fail@plt+0x18040>
   29cb8:	ldr	r0, [r4, #48]	; 0x30
   29cbc:	cmp	r0, r1
   29cc0:	beq	29d50 <__assert_fail@plt+0x180a4>
   29cc4:	ldr	r0, [r4, #80]	; 0x50
   29cc8:	cmp	r0, #2
   29ccc:	blt	29cf4 <__assert_fail@plt+0x18048>
   29cd0:	ldr	r0, [r4, #8]
   29cd4:	ldr	r5, [r0, r1, lsl #2]
   29cd8:	cmn	r5, #1
   29cdc:	bne	29d24 <__assert_fail@plt+0x18078>
   29ce0:	sub	r1, r1, #1
   29ce4:	cmn	r1, #1
   29ce8:	bne	29cd4 <__assert_fail@plt+0x18028>
   29cec:	ldr	r0, [r4, #60]	; 0x3c
   29cf0:	pop	{r4, r5, fp, pc}
   29cf4:	ldr	r0, [r4, #4]
   29cf8:	ldr	r2, [r4, #68]	; 0x44
   29cfc:	ldrb	r1, [r0, r1]
   29d00:	ubfx	r0, r1, #5, #3
   29d04:	and	r3, r1, #31
   29d08:	ldr	r2, [r2, r0, lsl #2]
   29d0c:	mov	r0, #1
   29d10:	tst	r2, r0, lsl r3
   29d14:	moveq	r0, #0
   29d18:	cmpeq	r1, #10
   29d1c:	bne	29d4c <__assert_fail@plt+0x180a0>
   29d20:	b	29d3c <__assert_fail@plt+0x18090>
   29d24:	ldrb	r0, [r4, #78]	; 0x4e
   29d28:	cmp	r0, #0
   29d2c:	bne	29d5c <__assert_fail@plt+0x180b0>
   29d30:	mov	r0, #0
   29d34:	cmp	r5, #10
   29d38:	popne	{r4, r5, fp, pc}
   29d3c:	ldrb	r0, [r4, #77]	; 0x4d
   29d40:	cmp	r0, #0
   29d44:	movwne	r0, #1
   29d48:	lsl	r0, r0, #1
   29d4c:	pop	{r4, r5, fp, pc}
   29d50:	and	r0, r2, #2
   29d54:	eor	r0, r0, #10
   29d58:	pop	{r4, r5, fp, pc}
   29d5c:	mov	r0, r5
   29d60:	bl	11afc <iswalnum@plt>
   29d64:	mov	r1, r0
   29d68:	mov	r0, #1
   29d6c:	cmp	r5, #95	; 0x5f
   29d70:	beq	29d4c <__assert_fail@plt+0x180a0>
   29d74:	cmp	r1, #0
   29d78:	beq	29d30 <__assert_fail@plt+0x18084>
   29d7c:	b	29d4c <__assert_fail@plt+0x180a0>
   29d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d84:	add	fp, sp, #28
   29d88:	sub	sp, sp, #4
   29d8c:	mov	sl, r0
   29d90:	ldr	r0, [r1, #4]
   29d94:	cmp	r0, #1
   29d98:	blt	29e68 <__assert_fail@plt+0x181bc>
   29d9c:	ldr	r7, [sl, #84]	; 0x54
   29da0:	mov	r8, r2
   29da4:	mov	r5, r1
   29da8:	mov	r4, #0
   29dac:	b	29dbc <__assert_fail@plt+0x18110>
   29db0:	add	r4, r4, #1
   29db4:	cmp	r4, r0
   29db8:	bge	29e68 <__assert_fail@plt+0x181bc>
   29dbc:	ldr	r1, [r5, #8]
   29dc0:	ldr	r6, [r1, r4, lsl #2]
   29dc4:	ldr	r1, [r7]
   29dc8:	add	r2, r1, r6, lsl #3
   29dcc:	ldrb	r2, [r2, #4]
   29dd0:	cmp	r2, #8
   29dd4:	bne	29db0 <__assert_fail@plt+0x18104>
   29dd8:	ldr	r1, [r1, r6, lsl #3]
   29ddc:	cmp	r1, #31
   29de0:	bgt	29db0 <__assert_fail@plt+0x18104>
   29de4:	ldr	r2, [r7, #80]	; 0x50
   29de8:	mov	r3, #1
   29dec:	tst	r2, r3, lsl r1
   29df0:	beq	29db0 <__assert_fail@plt+0x18104>
   29df4:	ldr	r0, [sl, #124]	; 0x7c
   29df8:	ldr	r9, [sl, #128]	; 0x80
   29dfc:	cmp	r0, r9
   29e00:	beq	29e44 <__assert_fail@plt+0x18198>
   29e04:	mov	r0, #1
   29e08:	mov	r1, #24
   29e0c:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   29e10:	ldr	r1, [sl, #124]	; 0x7c
   29e14:	ldr	r2, [sl, #132]	; 0x84
   29e18:	str	r0, [r2, r1, lsl #2]
   29e1c:	ldr	r0, [sl, #132]	; 0x84
   29e20:	ldr	r0, [r0, r1, lsl #2]
   29e24:	cmp	r0, #0
   29e28:	beq	29e74 <__assert_fail@plt+0x181c8>
   29e2c:	add	r1, r1, #1
   29e30:	str	r6, [r0, #4]
   29e34:	str	r1, [sl, #124]	; 0x7c
   29e38:	str	r8, [r0]
   29e3c:	ldr	r0, [r5, #4]
   29e40:	b	29db0 <__assert_fail@plt+0x18104>
   29e44:	ldr	r0, [sl, #132]	; 0x84
   29e48:	lsl	r1, r9, #3
   29e4c:	bl	1c388 <__assert_fail@plt+0xa6dc>
   29e50:	cmp	r0, #0
   29e54:	beq	29e74 <__assert_fail@plt+0x181c8>
   29e58:	lsl	r1, r9, #1
   29e5c:	str	r1, [sl, #128]	; 0x80
   29e60:	str	r0, [sl, #132]	; 0x84
   29e64:	b	29e04 <__assert_fail@plt+0x18158>
   29e68:	mov	r0, #0
   29e6c:	sub	sp, fp, #28
   29e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e74:	mov	r0, #12
   29e78:	sub	sp, fp, #28
   29e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e84:	add	fp, sp, #28
   29e88:	sub	sp, sp, #76	; 0x4c
   29e8c:	mov	ip, r0
   29e90:	ldr	r0, [r1, #4]
   29e94:	cmp	r0, #1
   29e98:	blt	2a808 <__assert_fail@plt+0x18b5c>
   29e9c:	ldr	r2, [ip, #84]	; 0x54
   29ea0:	ldr	r0, [ip, #40]	; 0x28
   29ea4:	mov	r3, #0
   29ea8:	str	ip, [sp, #44]	; 0x2c
   29eac:	str	r1, [sp, #12]
   29eb0:	str	r0, [sp, #52]	; 0x34
   29eb4:	str	r2, [sp, #24]
   29eb8:	b	29ed8 <__assert_fail@plt+0x1822c>
   29ebc:	ldr	r1, [sp, #12]
   29ec0:	ldr	r3, [sp, #16]
   29ec4:	ldr	r2, [sp, #24]
   29ec8:	ldr	r0, [r1, #4]
   29ecc:	add	r3, r3, #1
   29ed0:	cmp	r3, r0
   29ed4:	bge	2a808 <__assert_fail@plt+0x18b5c>
   29ed8:	ldr	r0, [r1, #8]
   29edc:	str	r3, [sp, #16]
   29ee0:	ldr	r3, [r0, r3, lsl #2]
   29ee4:	ldr	r0, [r2]
   29ee8:	add	r4, r0, r3, lsl #3
   29eec:	mov	r1, r3
   29ef0:	str	r3, [sp, #48]	; 0x30
   29ef4:	ldr	r5, [r4, #4]!
   29ef8:	uxtb	r0, r5
   29efc:	cmp	r0, #4
   29f00:	bne	29ebc <__assert_fail@plt+0x18210>
   29f04:	movw	r0, #65280	; 0xff00
   29f08:	movt	r0, #3
   29f0c:	tst	r5, r0
   29f10:	beq	2a020 <__assert_fail@plt+0x18374>
   29f14:	ldr	r1, [sp, #52]	; 0x34
   29f18:	cmn	r1, #1
   29f1c:	ble	29f58 <__assert_fail@plt+0x182ac>
   29f20:	ldr	r0, [ip, #48]	; 0x30
   29f24:	cmp	r0, r1
   29f28:	beq	2a7ac <__assert_fail@plt+0x18b00>
   29f2c:	ldr	r0, [ip, #80]	; 0x50
   29f30:	cmp	r0, #2
   29f34:	blt	29f78 <__assert_fail@plt+0x182cc>
   29f38:	ldr	r0, [ip, #8]
   29f3c:	ldr	r1, [sp, #52]	; 0x34
   29f40:	ldr	r6, [r0, r1, lsl #2]
   29f44:	cmn	r6, #1
   29f48:	bne	29fb4 <__assert_fail@plt+0x18308>
   29f4c:	sub	r1, r1, #1
   29f50:	cmn	r1, #1
   29f54:	bne	29f40 <__assert_fail@plt+0x18294>
   29f58:	ldr	r1, [ip, #60]	; 0x3c
   29f5c:	and	r0, r1, #1
   29f60:	tst	r5, #1024	; 0x400
   29f64:	eor	r2, r0, #1
   29f68:	beq	29fec <__assert_fail@plt+0x18340>
   29f6c:	cmp	r0, #0
   29f70:	beq	29ebc <__assert_fail@plt+0x18210>
   29f74:	b	29fec <__assert_fail@plt+0x18340>
   29f78:	ldr	r0, [ip, #4]
   29f7c:	ldr	r2, [sp, #52]	; 0x34
   29f80:	ldr	r1, [ip, #68]	; 0x44
   29f84:	ldrb	r0, [r0, r2]
   29f88:	ubfx	r2, r0, #5, #3
   29f8c:	and	r7, r0, #31
   29f90:	ldr	r3, [r1, r2, lsl #2]
   29f94:	mov	r1, #1
   29f98:	mov	r2, #0
   29f9c:	tst	r3, r1, lsl r7
   29fa0:	bne	29fec <__assert_fail@plt+0x18340>
   29fa4:	mov	r1, #0
   29fa8:	cmp	r0, #10
   29fac:	beq	29fcc <__assert_fail@plt+0x18320>
   29fb0:	b	29fdc <__assert_fail@plt+0x18330>
   29fb4:	ldrb	r0, [ip, #78]	; 0x4e
   29fb8:	cmp	r0, #0
   29fbc:	bne	2a7cc <__assert_fail@plt+0x18b20>
   29fc0:	mov	r1, #0
   29fc4:	cmp	r6, #10
   29fc8:	bne	29fdc <__assert_fail@plt+0x18330>
   29fcc:	ldrb	r0, [ip, #77]	; 0x4d
   29fd0:	cmp	r0, #0
   29fd4:	movwne	r0, #1
   29fd8:	lsl	r1, r0, #1
   29fdc:	and	r0, r1, #1
   29fe0:	tst	r5, #1024	; 0x400
   29fe4:	eor	r2, r0, #1
   29fe8:	bne	29f6c <__assert_fail@plt+0x182c0>
   29fec:	ldr	r0, [r4]
   29ff0:	cmp	r2, #0
   29ff4:	bne	2a000 <__assert_fail@plt+0x18354>
   29ff8:	ands	r2, r0, #2048	; 0x800
   29ffc:	bne	29ebc <__assert_fail@plt+0x18210>
   2a000:	tst	r1, #2
   2a004:	bne	2a010 <__assert_fail@plt+0x18364>
   2a008:	ands	r2, r0, #8192	; 0x2000
   2a00c:	bne	29ebc <__assert_fail@plt+0x18210>
   2a010:	tst	r1, #8
   2a014:	bne	2a020 <__assert_fail@plt+0x18374>
   2a018:	ands	r0, r0, #32768	; 0x8000
   2a01c:	bne	29ebc <__assert_fail@plt+0x18210>
   2a020:	ldr	r2, [ip, #108]	; 0x6c
   2a024:	ldr	r0, [ip, #84]	; 0x54
   2a028:	ldr	r9, [ip, #4]
   2a02c:	cmp	r2, #1
   2a030:	str	r0, [sp, #36]	; 0x24
   2a034:	str	r2, [sp, #20]
   2a038:	blt	2a0cc <__assert_fail@plt+0x18420>
   2a03c:	ldr	r4, [sp, #52]	; 0x34
   2a040:	ldr	r1, [ip, #116]	; 0x74
   2a044:	mov	r0, #0
   2a048:	mov	r5, #1
   2a04c:	mov	lr, r4
   2a050:	add	r3, r2, r0
   2a054:	add	r3, r3, r3, lsr #31
   2a058:	asr	r7, r3, #1
   2a05c:	add	r6, r7, r7, lsl #1
   2a060:	add	r6, r1, r6, lsl #3
   2a064:	ldr	r6, [r6, #4]
   2a068:	cmp	r6, lr
   2a06c:	addlt	r0, r5, r3, asr #1
   2a070:	movge	r2, r7
   2a074:	cmp	r0, r2
   2a078:	blt	2a050 <__assert_fail@plt+0x183a4>
   2a07c:	ldr	r1, [sp, #20]
   2a080:	cmp	r0, r1
   2a084:	bge	2a0e4 <__assert_fail@plt+0x18438>
   2a088:	cmn	r0, #1
   2a08c:	beq	2a0e4 <__assert_fail@plt+0x18438>
   2a090:	ldr	r1, [ip, #116]	; 0x74
   2a094:	add	r0, r0, r0, lsl #1
   2a098:	add	r0, r1, r0, lsl #3
   2a09c:	ldr	r1, [r0, #4]
   2a0a0:	cmp	r1, lr
   2a0a4:	bne	2a0e4 <__assert_fail@plt+0x18438>
   2a0a8:	ldr	r1, [r0]
   2a0ac:	ldr	r2, [sp, #48]	; 0x30
   2a0b0:	cmp	r1, r2
   2a0b4:	beq	2a4ec <__assert_fail@plt+0x18840>
   2a0b8:	ldrb	r1, [r0, #20]
   2a0bc:	add	r0, r0, #24
   2a0c0:	cmp	r1, #0
   2a0c4:	bne	2a0a8 <__assert_fail@plt+0x183fc>
   2a0c8:	b	2a0e4 <__assert_fail@plt+0x18438>
   2a0cc:	ldr	r4, [sp, #52]	; 0x34
   2a0d0:	mov	r0, #0
   2a0d4:	mov	lr, r4
   2a0d8:	ldr	r1, [sp, #20]
   2a0dc:	cmp	r0, r1
   2a0e0:	blt	2a088 <__assert_fail@plt+0x183dc>
   2a0e4:	ldr	r0, [ip, #124]	; 0x7c
   2a0e8:	cmp	r0, #1
   2a0ec:	ldr	r0, [sp, #20]
   2a0f0:	blt	2a4f0 <__assert_fail@plt+0x18844>
   2a0f4:	ldr	r0, [sp, #36]	; 0x24
   2a0f8:	ldr	r1, [sp, #48]	; 0x30
   2a0fc:	mov	r3, #0
   2a100:	ldr	r0, [r0]
   2a104:	ldr	r2, [r0, r1, lsl #3]
   2a108:	str	r2, [sp, #32]
   2a10c:	ldr	r1, [ip, #132]	; 0x84
   2a110:	str	r3, [sp, #28]
   2a114:	ldr	r6, [r1, r3, lsl #2]
   2a118:	ldr	r1, [r6, #4]
   2a11c:	ldr	r0, [r0, r1, lsl #3]
   2a120:	cmp	r0, r2
   2a124:	bne	2a4c0 <__assert_fail@plt+0x18814>
   2a128:	ldr	r0, [r6, #16]
   2a12c:	ldr	r1, [r6]
   2a130:	mov	r8, #0
   2a134:	mov	r7, lr
   2a138:	str	r6, [sp, #40]	; 0x28
   2a13c:	cmp	r0, #1
   2a140:	blt	2a278 <__assert_fail@plt+0x185cc>
   2a144:	mov	r5, r1
   2a148:	ldr	r1, [r6, #20]
   2a14c:	ldr	r4, [r1, r8, lsl #2]
   2a150:	ldr	r1, [r4, #4]
   2a154:	sub	sl, r1, r5
   2a158:	str	r1, [fp, #-48]	; 0xffffffd0
   2a15c:	cmp	sl, #1
   2a160:	blt	2a194 <__assert_fail@plt+0x184e8>
   2a164:	ldr	r1, [ip, #28]
   2a168:	add	r3, sl, r7
   2a16c:	cmp	r3, r1
   2a170:	bgt	2a1e8 <__assert_fail@plt+0x1853c>
   2a174:	add	r0, r9, r7
   2a178:	add	r1, r9, r5
   2a17c:	mov	r2, sl
   2a180:	bl	11aa8 <bcmp@plt>
   2a184:	ldr	ip, [sp, #44]	; 0x2c
   2a188:	ldr	lr, [sp, #52]	; 0x34
   2a18c:	cmp	r0, #0
   2a190:	bne	2a270 <__assert_fail@plt+0x185c4>
   2a194:	ldr	r3, [sp, #48]	; 0x30
   2a198:	mov	r2, r4
   2a19c:	mov	r0, ip
   2a1a0:	mov	r1, r6
   2a1a4:	str	lr, [sp]
   2a1a8:	mov	r4, ip
   2a1ac:	bl	2af28 <__assert_fail@plt+0x1927c>
   2a1b0:	cmp	r0, #1
   2a1b4:	bhi	2a81c <__assert_fail@plt+0x18b70>
   2a1b8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2a1bc:	ldr	r0, [r6, #16]
   2a1c0:	ldr	r9, [r4, #4]
   2a1c4:	mov	ip, r4
   2a1c8:	ldr	r4, [sp, #52]	; 0x34
   2a1cc:	add	r8, r8, #1
   2a1d0:	add	r7, sl, r7
   2a1d4:	cmp	r8, r0
   2a1d8:	mov	r5, r1
   2a1dc:	mov	lr, r4
   2a1e0:	blt	2a148 <__assert_fail@plt+0x1849c>
   2a1e4:	b	2a278 <__assert_fail@plt+0x185cc>
   2a1e8:	ldr	r2, [ip, #48]	; 0x30
   2a1ec:	cmp	r3, r2
   2a1f0:	bgt	2a4b4 <__assert_fail@plt+0x18808>
   2a1f4:	ldr	r0, [ip, #36]	; 0x24
   2a1f8:	ldr	r6, [ip, #104]	; 0x68
   2a1fc:	cmp	r0, r3
   2a200:	cmple	r0, r2
   2a204:	blt	2a214 <__assert_fail@plt+0x18568>
   2a208:	cmp	r1, r3
   2a20c:	cmple	r1, r2
   2a210:	bge	2a234 <__assert_fail@plt+0x18588>
   2a214:	add	r1, r3, #1
   2a218:	mov	r0, ip
   2a21c:	mov	r9, r3
   2a220:	bl	2a854 <__assert_fail@plt+0x18ba8>
   2a224:	ldr	ip, [sp, #44]	; 0x2c
   2a228:	mov	r3, r9
   2a22c:	cmp	r0, #0
   2a230:	bne	2a81c <__assert_fail@plt+0x18b70>
   2a234:	cmp	r3, r6
   2a238:	ble	2a264 <__assert_fail@plt+0x185b8>
   2a23c:	sub	r0, r3, r6
   2a240:	mov	r1, #0
   2a244:	lsl	r2, r0, #2
   2a248:	ldr	r0, [ip, #100]	; 0x64
   2a24c:	add	r0, r0, r6, lsl #2
   2a250:	mov	r6, r3
   2a254:	add	r0, r0, #4
   2a258:	bl	11b2c <memset@plt>
   2a25c:	ldr	ip, [sp, #44]	; 0x2c
   2a260:	str	r6, [ip, #104]	; 0x68
   2a264:	ldr	r9, [ip, #4]
   2a268:	ldr	r6, [sp, #40]	; 0x28
   2a26c:	b	2a174 <__assert_fail@plt+0x184c8>
   2a270:	ldr	r0, [r6, #16]
   2a274:	mov	r1, r5
   2a278:	cmp	r8, r0
   2a27c:	blt	2a4c0 <__assert_fail@plt+0x18814>
   2a280:	cmp	r8, #0
   2a284:	addne	r1, r1, #1
   2a288:	cmp	r1, lr
   2a28c:	ble	2a2a8 <__assert_fail@plt+0x185fc>
   2a290:	b	2a4c0 <__assert_fail@plt+0x18814>
   2a294:	ldr	r6, [sp, #40]	; 0x28
   2a298:	add	r1, sl, #1
   2a29c:	cmp	sl, lr
   2a2a0:	mov	r9, r8
   2a2a4:	bge	2a4c0 <__assert_fail@plt+0x18814>
   2a2a8:	ldr	r0, [r6]
   2a2ac:	mov	sl, r1
   2a2b0:	cmp	r1, r0
   2a2b4:	ble	2a2e0 <__assert_fail@plt+0x18634>
   2a2b8:	ldr	r0, [ip, #28]
   2a2bc:	cmp	r7, r0
   2a2c0:	bge	2a444 <__assert_fail@plt+0x18798>
   2a2c4:	add	r5, r7, #1
   2a2c8:	add	r1, sl, r9
   2a2cc:	ldrb	r0, [r9, r7]
   2a2d0:	ldrb	r1, [r1, #-1]
   2a2d4:	cmp	r0, r1
   2a2d8:	beq	2a2e4 <__assert_fail@plt+0x18638>
   2a2dc:	b	2a4c0 <__assert_fail@plt+0x18814>
   2a2e0:	mov	r5, r7
   2a2e4:	ldr	r0, [ip, #100]	; 0x64
   2a2e8:	mov	r8, r9
   2a2ec:	mov	r7, r5
   2a2f0:	ldr	r2, [r0, sl, lsl #2]
   2a2f4:	cmp	r2, #0
   2a2f8:	beq	2a294 <__assert_fail@plt+0x185e8>
   2a2fc:	ldr	r0, [r2, #8]
   2a300:	cmp	r0, #1
   2a304:	blt	2a294 <__assert_fail@plt+0x185e8>
   2a308:	ldr	r1, [sp, #36]	; 0x24
   2a30c:	ldr	r2, [r2, #12]
   2a310:	ldr	r4, [sp, #32]
   2a314:	ldr	r1, [r1]
   2a318:	b	2a328 <__assert_fail@plt+0x1867c>
   2a31c:	add	r2, r2, #4
   2a320:	subs	r0, r0, #1
   2a324:	beq	2a294 <__assert_fail@plt+0x185e8>
   2a328:	ldr	r5, [r2]
   2a32c:	add	r3, r1, r5, lsl #3
   2a330:	ldrb	r3, [r3, #4]
   2a334:	cmp	r3, #9
   2a338:	bne	2a31c <__assert_fail@plt+0x18670>
   2a33c:	ldr	r3, [r1, r5, lsl #3]
   2a340:	cmp	r3, r4
   2a344:	bne	2a31c <__assert_fail@plt+0x18670>
   2a348:	cmn	r5, #1
   2a34c:	beq	2a294 <__assert_fail@plt+0x185e8>
   2a350:	ldr	r1, [r6, #8]
   2a354:	mov	r4, lr
   2a358:	str	r7, [fp, #-48]	; 0xffffffd0
   2a35c:	cmp	r1, #0
   2a360:	bne	2a390 <__assert_fail@plt+0x186e4>
   2a364:	ldr	r0, [r6]
   2a368:	mov	r9, #12
   2a36c:	sub	r0, sl, r0
   2a370:	add	r1, r0, #1
   2a374:	mov	r0, #12
   2a378:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   2a37c:	ldr	ip, [sp, #44]	; 0x2c
   2a380:	mov	r1, r0
   2a384:	cmp	r0, #0
   2a388:	str	r0, [r6, #8]
   2a38c:	beq	2a80c <__assert_fail@plt+0x18b60>
   2a390:	ldr	r3, [r6]
   2a394:	ldr	r2, [r6, #4]
   2a398:	mov	r0, #9
   2a39c:	stm	sp, {r5, sl}
   2a3a0:	str	r0, [sp, #8]
   2a3a4:	mov	r0, ip
   2a3a8:	bl	2b100 <__assert_fail@plt+0x19454>
   2a3ac:	ldr	ip, [sp, #44]	; 0x2c
   2a3b0:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2a3b4:	cmp	r0, #1
   2a3b8:	mov	lr, r4
   2a3bc:	beq	2a294 <__assert_fail@plt+0x185e8>
   2a3c0:	mov	r9, r0
   2a3c4:	cmp	r0, #0
   2a3c8:	bne	2a80c <__assert_fail@plt+0x18b60>
   2a3cc:	ldr	r7, [sp, #40]	; 0x28
   2a3d0:	ldr	r1, [r7, #12]
   2a3d4:	ldr	r0, [r7, #16]
   2a3d8:	cmp	r0, r1
   2a3dc:	beq	2a48c <__assert_fail@plt+0x187e0>
   2a3e0:	mov	r0, #1
   2a3e4:	mov	r1, #20
   2a3e8:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   2a3ec:	cmp	r0, #0
   2a3f0:	beq	2a83c <__assert_fail@plt+0x18b90>
   2a3f4:	mov	r2, r0
   2a3f8:	ldr	r0, [r7, #16]
   2a3fc:	ldr	r1, [r7, #20]
   2a400:	ldr	r3, [sp, #48]	; 0x30
   2a404:	str	r2, [r1, r0, lsl #2]
   2a408:	stm	r2, {r5, sl}
   2a40c:	ldr	r5, [sp, #44]	; 0x2c
   2a410:	add	r0, r0, #1
   2a414:	mov	r1, r7
   2a418:	str	r0, [r7, #16]
   2a41c:	str	r4, [sp]
   2a420:	mov	r0, r5
   2a424:	bl	2af28 <__assert_fail@plt+0x1927c>
   2a428:	cmp	r0, #1
   2a42c:	bhi	2a81c <__assert_fail@plt+0x18b70>
   2a430:	ldr	r8, [r5, #4]
   2a434:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2a438:	mov	ip, r5
   2a43c:	mov	lr, r4
   2a440:	b	2a294 <__assert_fail@plt+0x185e8>
   2a444:	ldr	r0, [ip, #48]	; 0x30
   2a448:	cmp	r7, r0
   2a44c:	bge	2a4c0 <__assert_fail@plt+0x18814>
   2a450:	add	r5, r7, #1
   2a454:	mov	r0, ip
   2a458:	mov	r8, r7
   2a45c:	mov	r4, ip
   2a460:	mov	r1, r5
   2a464:	bl	2a854 <__assert_fail@plt+0x18ba8>
   2a468:	cmp	r0, #0
   2a46c:	bne	2a81c <__assert_fail@plt+0x18b70>
   2a470:	ldr	r9, [r4, #4]
   2a474:	mov	ip, r4
   2a478:	ldr	r4, [sp, #52]	; 0x34
   2a47c:	ldr	r6, [sp, #40]	; 0x28
   2a480:	mov	r7, r8
   2a484:	mov	lr, r4
   2a488:	b	2a2c8 <__assert_fail@plt+0x1861c>
   2a48c:	mov	r1, #1
   2a490:	orr	r6, r1, r0, lsl #1
   2a494:	ldr	r0, [r7, #20]
   2a498:	lsl	r1, r6, #2
   2a49c:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2a4a0:	cmp	r0, #0
   2a4a4:	beq	2a83c <__assert_fail@plt+0x18b90>
   2a4a8:	str	r6, [r7, #12]
   2a4ac:	str	r0, [r7, #20]
   2a4b0:	b	2a3e0 <__assert_fail@plt+0x18734>
   2a4b4:	mov	r1, r5
   2a4b8:	cmp	r8, r0
   2a4bc:	bge	2a280 <__assert_fail@plt+0x185d4>
   2a4c0:	ldr	r3, [sp, #28]
   2a4c4:	ldr	r0, [ip, #124]	; 0x7c
   2a4c8:	add	r3, r3, #1
   2a4cc:	cmp	r3, r0
   2a4d0:	bge	2a4e4 <__assert_fail@plt+0x18838>
   2a4d4:	ldr	r0, [sp, #36]	; 0x24
   2a4d8:	ldr	r2, [sp, #32]
   2a4dc:	ldr	r0, [r0]
   2a4e0:	b	2a10c <__assert_fail@plt+0x18460>
   2a4e4:	ldr	r0, [ip, #108]	; 0x6c
   2a4e8:	b	2a4f0 <__assert_fail@plt+0x18844>
   2a4ec:	ldr	r0, [sp, #20]
   2a4f0:	ldr	r7, [sp, #20]
   2a4f4:	mov	r1, #0
   2a4f8:	str	r1, [fp, #-32]	; 0xffffffe0
   2a4fc:	cmp	r7, r0
   2a500:	blt	2a518 <__assert_fail@plt+0x1886c>
   2a504:	b	29ebc <__assert_fail@plt+0x18210>
   2a508:	ldr	r0, [ip, #108]	; 0x6c
   2a50c:	add	r7, r7, #1
   2a510:	cmp	r7, r0
   2a514:	bge	29ebc <__assert_fail@plt+0x18210>
   2a518:	ldr	r0, [ip, #116]	; 0x74
   2a51c:	add	r1, r7, r7, lsl #1
   2a520:	ldr	r3, [sp, #48]	; 0x30
   2a524:	ldr	r2, [r0, r1, lsl #3]
   2a528:	cmp	r2, r3
   2a52c:	bne	2a508 <__assert_fail@plt+0x1885c>
   2a530:	add	r0, r0, r1, lsl #3
   2a534:	ldr	r2, [sp, #52]	; 0x34
   2a538:	ldr	r1, [r0, #4]
   2a53c:	cmp	r1, r2
   2a540:	bne	2a508 <__assert_fail@plt+0x1885c>
   2a544:	str	r7, [sp, #20]
   2a548:	ldr	r4, [r0, #8]
   2a54c:	ldr	r7, [r0, #12]
   2a550:	ldr	r0, [sp, #24]
   2a554:	ldr	r8, [r0, #24]
   2a558:	cmp	r7, r4
   2a55c:	bne	2a578 <__assert_fail@plt+0x188cc>
   2a560:	ldr	r1, [sp, #48]	; 0x30
   2a564:	ldr	r0, [r0, #20]
   2a568:	add	r1, r1, r1, lsl #1
   2a56c:	add	r0, r0, r1, lsl #2
   2a570:	ldr	r0, [r0, #8]
   2a574:	b	2a584 <__assert_fail@plt+0x188d8>
   2a578:	ldr	r0, [r0, #12]
   2a57c:	ldr	r1, [sp, #48]	; 0x30
   2a580:	add	r0, r0, r1, lsl #2
   2a584:	ldr	r9, [r0]
   2a588:	ldr	r0, [sp, #52]	; 0x34
   2a58c:	add	r0, r7, r0
   2a590:	sub	r5, r0, r4
   2a594:	cmp	r5, #0
   2a598:	ble	2a5d4 <__assert_fail@plt+0x18928>
   2a59c:	ldr	r1, [ip, #48]	; 0x30
   2a5a0:	sub	r0, r5, #1
   2a5a4:	cmp	r1, r0
   2a5a8:	beq	2a770 <__assert_fail@plt+0x18ac4>
   2a5ac:	ldr	r1, [ip, #80]	; 0x50
   2a5b0:	cmp	r1, #2
   2a5b4:	blt	2a5dc <__assert_fail@plt+0x18930>
   2a5b8:	ldr	r1, [ip, #8]
   2a5bc:	ldr	r6, [r1, r0, lsl #2]
   2a5c0:	cmn	r6, #1
   2a5c4:	bne	2a60c <__assert_fail@plt+0x18960>
   2a5c8:	sub	r0, r0, #1
   2a5cc:	cmn	r0, #1
   2a5d0:	bne	2a5bc <__assert_fail@plt+0x18910>
   2a5d4:	ldr	sl, [ip, #60]	; 0x3c
   2a5d8:	b	2a634 <__assert_fail@plt+0x18988>
   2a5dc:	ldr	r1, [ip, #4]
   2a5e0:	ldr	r2, [ip, #68]	; 0x44
   2a5e4:	mov	sl, #1
   2a5e8:	ldrb	r0, [r1, r0]
   2a5ec:	ubfx	r1, r0, #5, #3
   2a5f0:	ldr	r1, [r2, r1, lsl #2]
   2a5f4:	and	r2, r0, #31
   2a5f8:	tst	r1, sl, lsl r2
   2a5fc:	moveq	sl, #0
   2a600:	cmpeq	r0, #10
   2a604:	bne	2a634 <__assert_fail@plt+0x18988>
   2a608:	b	2a624 <__assert_fail@plt+0x18978>
   2a60c:	ldrb	r0, [ip, #78]	; 0x4e
   2a610:	cmp	r0, #0
   2a614:	bne	2a780 <__assert_fail@plt+0x18ad4>
   2a618:	mov	sl, #0
   2a61c:	cmp	r6, #10
   2a620:	bne	2a634 <__assert_fail@plt+0x18988>
   2a624:	ldrb	r0, [ip, #77]	; 0x4d
   2a628:	cmp	r0, #0
   2a62c:	movwne	r0, #1
   2a630:	lsl	sl, r0, #1
   2a634:	ldr	r0, [ip, #100]	; 0x64
   2a638:	ldr	r2, [sp, #52]	; 0x34
   2a63c:	add	r1, r9, r9, lsl #1
   2a640:	ldr	r2, [r0, r2, lsl #2]
   2a644:	ldr	r0, [r0, r5, lsl #2]
   2a648:	cmp	r2, #0
   2a64c:	beq	2a658 <__assert_fail@plt+0x189ac>
   2a650:	ldr	r2, [r2, #8]
   2a654:	b	2a65c <__assert_fail@plt+0x189b0>
   2a658:	mov	r2, #0
   2a65c:	add	r8, r8, r1, lsl #2
   2a660:	sub	r6, fp, #44	; 0x2c
   2a664:	cmp	r0, #0
   2a668:	str	r2, [fp, #-48]	; 0xffffffd0
   2a66c:	beq	2a6d8 <__assert_fail@plt+0x18a2c>
   2a670:	ldr	r1, [r0, #40]	; 0x28
   2a674:	mov	r0, r6
   2a678:	mov	r2, r8
   2a67c:	bl	2ac98 <__assert_fail@plt+0x18fec>
   2a680:	cmp	r0, #0
   2a684:	str	r0, [fp, #-32]	; 0xffffffe0
   2a688:	bne	2a824 <__assert_fail@plt+0x18b78>
   2a68c:	ldr	r1, [sp, #24]
   2a690:	sub	r0, fp, #32
   2a694:	mov	r2, r6
   2a698:	mov	r3, sl
   2a69c:	bl	28448 <__assert_fail@plt+0x1679c>
   2a6a0:	ldr	r6, [sp, #44]	; 0x2c
   2a6a4:	ldr	r1, [r6, #100]	; 0x64
   2a6a8:	str	r0, [r1, r5, lsl #2]
   2a6ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2a6b0:	bl	1c224 <__assert_fail@plt+0xa578>
   2a6b4:	ldr	r0, [r6, #100]	; 0x64
   2a6b8:	mov	ip, r6
   2a6bc:	ldr	r1, [r0, r5, lsl #2]
   2a6c0:	cmp	r1, #0
   2a6c4:	bne	2a708 <__assert_fail@plt+0x18a5c>
   2a6c8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2a6cc:	cmp	r9, #0
   2a6d0:	beq	2a708 <__assert_fail@plt+0x18a5c>
   2a6d4:	b	2a810 <__assert_fail@plt+0x18b64>
   2a6d8:	ldr	r1, [sp, #24]
   2a6dc:	sub	r0, fp, #32
   2a6e0:	mov	r2, r8
   2a6e4:	mov	r3, sl
   2a6e8:	bl	28448 <__assert_fail@plt+0x1679c>
   2a6ec:	ldr	ip, [sp, #44]	; 0x2c
   2a6f0:	ldr	r1, [ip, #100]	; 0x64
   2a6f4:	str	r0, [r1, r5, lsl #2]
   2a6f8:	ldr	r0, [ip, #100]	; 0x64
   2a6fc:	ldr	r1, [r0, r5, lsl #2]
   2a700:	cmp	r1, #0
   2a704:	beq	2a6c8 <__assert_fail@plt+0x18a1c>
   2a708:	cmp	r7, r4
   2a70c:	ldr	r7, [sp, #20]
   2a710:	bne	2a508 <__assert_fail@plt+0x1885c>
   2a714:	ldr	r1, [sp, #52]	; 0x34
   2a718:	ldr	r0, [r0, r1, lsl #2]
   2a71c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2a720:	ldr	r0, [r0, #8]
   2a724:	cmp	r0, r1
   2a728:	ble	2a508 <__assert_fail@plt+0x1885c>
   2a72c:	ldr	r2, [sp, #52]	; 0x34
   2a730:	mov	r0, ip
   2a734:	mov	r1, r8
   2a738:	mov	r4, ip
   2a73c:	bl	29d80 <__assert_fail@plt+0x180d4>
   2a740:	cmp	r0, #0
   2a744:	str	r0, [fp, #-32]	; 0xffffffe0
   2a748:	bne	2a844 <__assert_fail@plt+0x18b98>
   2a74c:	mov	r0, r4
   2a750:	mov	r1, r8
   2a754:	bl	29e80 <__assert_fail@plt+0x181d4>
   2a758:	ldr	r7, [sp, #20]
   2a75c:	cmp	r0, #0
   2a760:	mov	ip, r4
   2a764:	str	r0, [fp, #-32]	; 0xffffffe0
   2a768:	beq	2a508 <__assert_fail@plt+0x1885c>
   2a76c:	b	2a844 <__assert_fail@plt+0x18b98>
   2a770:	ldr	r0, [ip, #88]	; 0x58
   2a774:	and	r0, r0, #2
   2a778:	eor	sl, r0, #10
   2a77c:	b	2a634 <__assert_fail@plt+0x18988>
   2a780:	mov	r0, r6
   2a784:	bl	11afc <iswalnum@plt>
   2a788:	mov	sl, #1
   2a78c:	cmp	r6, #95	; 0x5f
   2a790:	beq	2a7a4 <__assert_fail@plt+0x18af8>
   2a794:	ldr	ip, [sp, #44]	; 0x2c
   2a798:	cmp	r0, #0
   2a79c:	beq	2a618 <__assert_fail@plt+0x1896c>
   2a7a0:	b	2a634 <__assert_fail@plt+0x18988>
   2a7a4:	ldr	ip, [sp, #44]	; 0x2c
   2a7a8:	b	2a634 <__assert_fail@plt+0x18988>
   2a7ac:	ldr	r0, [ip, #88]	; 0x58
   2a7b0:	and	r0, r0, #2
   2a7b4:	eor	r1, r0, #10
   2a7b8:	and	r0, r1, #1
   2a7bc:	tst	r5, #1024	; 0x400
   2a7c0:	eor	r2, r0, #1
   2a7c4:	bne	29f6c <__assert_fail@plt+0x182c0>
   2a7c8:	b	29fec <__assert_fail@plt+0x18340>
   2a7cc:	mov	r0, r6
   2a7d0:	bl	11afc <iswalnum@plt>
   2a7d4:	mov	r1, #1
   2a7d8:	mov	r2, #0
   2a7dc:	cmp	r6, #95	; 0x5f
   2a7e0:	beq	2a7f4 <__assert_fail@plt+0x18b48>
   2a7e4:	ldr	ip, [sp, #44]	; 0x2c
   2a7e8:	cmp	r0, #0
   2a7ec:	beq	29fc0 <__assert_fail@plt+0x18314>
   2a7f0:	b	29fec <__assert_fail@plt+0x18340>
   2a7f4:	ldr	ip, [sp, #44]	; 0x2c
   2a7f8:	ldr	r0, [r4]
   2a7fc:	cmp	r2, #0
   2a800:	beq	29ff8 <__assert_fail@plt+0x1834c>
   2a804:	b	2a000 <__assert_fail@plt+0x18354>
   2a808:	mov	r9, #0
   2a80c:	str	r9, [fp, #-32]	; 0xffffffe0
   2a810:	mov	r0, r9
   2a814:	sub	sp, fp, #28
   2a818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a81c:	mov	r9, r0
   2a820:	b	2a80c <__assert_fail@plt+0x18b60>
   2a824:	mov	r9, r0
   2a828:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2a82c:	bl	1c224 <__assert_fail@plt+0xa578>
   2a830:	mov	r0, r9
   2a834:	sub	sp, fp, #28
   2a838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a83c:	mov	r9, #12
   2a840:	b	2a80c <__assert_fail@plt+0x18b60>
   2a844:	mov	r9, r0
   2a848:	mov	r0, r9
   2a84c:	sub	sp, fp, #28
   2a850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a854:	push	{r4, r5, r6, r7, fp, lr}
   2a858:	add	fp, sp, #16
   2a85c:	mov	r4, r0
   2a860:	ldr	r0, [r0, #36]	; 0x24
   2a864:	mov	r5, #12
   2a868:	cmn	r0, #-536870910	; 0xe0000002
   2a86c:	bhi	2aa50 <__assert_fail@plt+0x18da4>
   2a870:	ldr	r6, [r4, #48]	; 0x30
   2a874:	ldr	r2, [r4, #80]	; 0x50
   2a878:	cmp	r6, r0, lsl #1
   2a87c:	lslge	r6, r0, #1
   2a880:	cmp	r6, r1
   2a884:	movle	r6, r1
   2a888:	cmp	r2, #2
   2a88c:	blt	2a8d4 <__assert_fail@plt+0x18c28>
   2a890:	cmn	r6, #-1073741823	; 0xc0000001
   2a894:	bhi	2aa50 <__assert_fail@plt+0x18da4>
   2a898:	ldr	r0, [r4, #8]
   2a89c:	lsl	r7, r6, #2
   2a8a0:	mov	r1, r7
   2a8a4:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2a8a8:	cmp	r0, #0
   2a8ac:	beq	2aa50 <__assert_fail@plt+0x18da4>
   2a8b0:	str	r0, [r4, #8]
   2a8b4:	ldr	r0, [r4, #12]
   2a8b8:	cmp	r0, #0
   2a8bc:	beq	2a8d4 <__assert_fail@plt+0x18c28>
   2a8c0:	mov	r1, r7
   2a8c4:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2a8c8:	cmp	r0, #0
   2a8cc:	beq	2aa50 <__assert_fail@plt+0x18da4>
   2a8d0:	str	r0, [r4, #12]
   2a8d4:	ldrb	r0, [r4, #75]	; 0x4b
   2a8d8:	cmp	r0, #0
   2a8dc:	beq	2a8f8 <__assert_fail@plt+0x18c4c>
   2a8e0:	ldr	r0, [r4, #4]
   2a8e4:	mov	r1, r6
   2a8e8:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2a8ec:	cmp	r0, #0
   2a8f0:	beq	2aa50 <__assert_fail@plt+0x18da4>
   2a8f4:	str	r0, [r4, #4]
   2a8f8:	str	r6, [r4, #36]	; 0x24
   2a8fc:	ldr	r0, [r4, #100]	; 0x64
   2a900:	cmp	r0, #0
   2a904:	beq	2a920 <__assert_fail@plt+0x18c74>
   2a908:	mov	r1, #4
   2a90c:	add	r1, r1, r6, lsl #2
   2a910:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2a914:	cmp	r0, #0
   2a918:	beq	2aa50 <__assert_fail@plt+0x18da4>
   2a91c:	str	r0, [r4, #100]	; 0x64
   2a920:	ldrb	r1, [r4, #72]	; 0x48
   2a924:	ldr	r0, [r4, #80]	; 0x50
   2a928:	cmp	r1, #0
   2a92c:	beq	2a94c <__assert_fail@plt+0x18ca0>
   2a930:	cmp	r0, #2
   2a934:	blt	2a960 <__assert_fail@plt+0x18cb4>
   2a938:	mov	r0, r4
   2a93c:	bl	21f00 <__assert_fail@plt+0x10254>
   2a940:	cmp	r0, #0
   2a944:	beq	2aa4c <__assert_fail@plt+0x18da0>
   2a948:	pop	{r4, r5, r6, r7, fp, pc}
   2a94c:	cmp	r0, #2
   2a950:	blt	2a9d0 <__assert_fail@plt+0x18d24>
   2a954:	mov	r0, r4
   2a958:	bl	22820 <__assert_fail@plt+0x10b74>
   2a95c:	b	2aa4c <__assert_fail@plt+0x18da0>
   2a960:	ldr	r6, [r4, #36]	; 0x24
   2a964:	ldr	r0, [r4, #48]	; 0x30
   2a968:	ldr	r5, [r4, #28]
   2a96c:	cmp	r6, r0
   2a970:	movgt	r6, r0
   2a974:	cmp	r5, r6
   2a978:	bge	2a9c4 <__assert_fail@plt+0x18d18>
   2a97c:	bl	11a60 <__ctype_toupper_loc@plt>
   2a980:	ldr	r1, [r4]
   2a984:	ldr	r3, [r4, #24]
   2a988:	ldr	r2, [r4, #64]	; 0x40
   2a98c:	add	r1, r1, r3
   2a990:	cmp	r2, #0
   2a994:	ldrb	r1, [r1, r5]
   2a998:	bne	2a9bc <__assert_fail@plt+0x18d10>
   2a99c:	ldr	r2, [r0]
   2a9a0:	ldr	r1, [r2, r1, lsl #2]
   2a9a4:	ldr	r2, [r4, #4]
   2a9a8:	strb	r1, [r2, r5]
   2a9ac:	add	r5, r5, #1
   2a9b0:	cmp	r5, r6
   2a9b4:	blt	2a980 <__assert_fail@plt+0x18cd4>
   2a9b8:	b	2a9c4 <__assert_fail@plt+0x18d18>
   2a9bc:	ldrb	r1, [r2, r1]
   2a9c0:	b	2a99c <__assert_fail@plt+0x18cf0>
   2a9c4:	str	r5, [r4, #28]
   2a9c8:	str	r5, [r4, #32]
   2a9cc:	b	2aa4c <__assert_fail@plt+0x18da0>
   2a9d0:	ldr	r2, [r4, #64]	; 0x40
   2a9d4:	cmp	r2, #0
   2a9d8:	beq	2aa4c <__assert_fail@plt+0x18da0>
   2a9dc:	ldr	r1, [r4, #36]	; 0x24
   2a9e0:	ldr	r3, [r4, #48]	; 0x30
   2a9e4:	ldr	r0, [r4, #28]
   2a9e8:	cmp	r1, r3
   2a9ec:	movgt	r1, r3
   2a9f0:	cmp	r0, r1
   2a9f4:	bge	2aa44 <__assert_fail@plt+0x18d98>
   2a9f8:	ldr	r6, [r4, #24]
   2a9fc:	ldm	r4, {r3, r7}
   2aa00:	add	r6, r6, r0
   2aa04:	ldrb	r3, [r3, r6]
   2aa08:	ldrb	r2, [r2, r3]
   2aa0c:	strb	r2, [r7, r0]
   2aa10:	add	r0, r0, #1
   2aa14:	cmp	r0, r1
   2aa18:	bge	2aa44 <__assert_fail@plt+0x18d98>
   2aa1c:	ldr	r7, [r4, #24]
   2aa20:	ldm	r4, {r2, r3}
   2aa24:	ldr	r6, [r4, #64]	; 0x40
   2aa28:	add	r2, r2, r7
   2aa2c:	ldrb	r2, [r2, r0]
   2aa30:	ldrb	r2, [r6, r2]
   2aa34:	strb	r2, [r3, r0]
   2aa38:	add	r0, r0, #1
   2aa3c:	cmp	r0, r1
   2aa40:	blt	2aa1c <__assert_fail@plt+0x18d70>
   2aa44:	str	r0, [r4, #28]
   2aa48:	str	r0, [r4, #32]
   2aa4c:	mov	r5, #0
   2aa50:	mov	r0, r5
   2aa54:	pop	{r4, r5, r6, r7, fp, pc}
   2aa58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2aa5c:	add	fp, sp, #24
   2aa60:	sub	sp, sp, #16
   2aa64:	mov	r9, r0
   2aa68:	mov	r4, r1
   2aa6c:	ldr	r5, [r1, #40]	; 0x28
   2aa70:	ldr	r7, [r1, #84]	; 0x54
   2aa74:	ldr	r0, [r1, #100]	; 0x64
   2aa78:	ldr	r1, [r1, #104]	; 0x68
   2aa7c:	mov	r6, r2
   2aa80:	cmp	r5, r1
   2aa84:	ble	2aaa4 <__assert_fail@plt+0x18df8>
   2aa88:	str	r6, [r0, r5, lsl #2]
   2aa8c:	str	r5, [r4, #104]	; 0x68
   2aa90:	cmp	r6, #0
   2aa94:	ldrne	r0, [r7, #76]	; 0x4c
   2aa98:	cmpne	r0, #0
   2aa9c:	beq	2abf4 <__assert_fail@plt+0x18f48>
   2aaa0:	b	2ac00 <__assert_fail@plt+0x18f54>
   2aaa4:	ldr	r1, [r0, r5, lsl #2]
   2aaa8:	cmp	r1, #0
   2aaac:	beq	2ab24 <__assert_fail@plt+0x18e78>
   2aab0:	ldr	r2, [r1, #40]	; 0x28
   2aab4:	cmp	r6, #0
   2aab8:	beq	2ab6c <__assert_fail@plt+0x18ec0>
   2aabc:	ldr	r8, [r6, #40]	; 0x28
   2aac0:	mov	r0, sp
   2aac4:	mov	r1, r8
   2aac8:	bl	2ac98 <__assert_fail@plt+0x18fec>
   2aacc:	cmp	r0, #0
   2aad0:	str	r0, [r9]
   2aad4:	bne	2ac58 <__assert_fail@plt+0x18fac>
   2aad8:	ldr	r0, [r4, #40]	; 0x28
   2aadc:	cmp	r0, #0
   2aae0:	ble	2ab1c <__assert_fail@plt+0x18e70>
   2aae4:	ldr	r1, [r4, #48]	; 0x30
   2aae8:	sub	r0, r0, #1
   2aaec:	cmp	r1, r0
   2aaf0:	beq	2ac68 <__assert_fail@plt+0x18fbc>
   2aaf4:	ldr	r1, [r4, #80]	; 0x50
   2aaf8:	cmp	r1, #2
   2aafc:	blt	2ab3c <__assert_fail@plt+0x18e90>
   2ab00:	ldr	r1, [r4, #8]
   2ab04:	ldr	r6, [r1, r0, lsl #2]
   2ab08:	cmn	r6, #1
   2ab0c:	bne	2ab90 <__assert_fail@plt+0x18ee4>
   2ab10:	sub	r0, r0, #1
   2ab14:	cmn	r0, #1
   2ab18:	bne	2ab04 <__assert_fail@plt+0x18e58>
   2ab1c:	ldr	r3, [r4, #60]	; 0x3c
   2ab20:	b	2abb8 <__assert_fail@plt+0x18f0c>
   2ab24:	str	r6, [r0, r5, lsl #2]
   2ab28:	cmp	r6, #0
   2ab2c:	ldrne	r0, [r7, #76]	; 0x4c
   2ab30:	cmpne	r0, #0
   2ab34:	beq	2abf4 <__assert_fail@plt+0x18f48>
   2ab38:	b	2ac00 <__assert_fail@plt+0x18f54>
   2ab3c:	ldr	r1, [r4, #4]
   2ab40:	ldr	r2, [r4, #68]	; 0x44
   2ab44:	mov	r3, #1
   2ab48:	ldrb	r0, [r1, r0]
   2ab4c:	ubfx	r1, r0, #5, #3
   2ab50:	ldr	r1, [r2, r1, lsl #2]
   2ab54:	and	r2, r0, #31
   2ab58:	tst	r1, r3, lsl r2
   2ab5c:	moveq	r3, #0
   2ab60:	cmpeq	r0, #10
   2ab64:	bne	2abb8 <__assert_fail@plt+0x18f0c>
   2ab68:	b	2aba8 <__assert_fail@plt+0x18efc>
   2ab6c:	vldr	d16, [r2]
   2ab70:	ldr	r0, [r2, #8]
   2ab74:	mov	r8, #0
   2ab78:	str	r0, [sp, #8]
   2ab7c:	mov	r0, r5
   2ab80:	vstr	d16, [sp]
   2ab84:	cmp	r0, #0
   2ab88:	bgt	2aae4 <__assert_fail@plt+0x18e38>
   2ab8c:	b	2ab1c <__assert_fail@plt+0x18e70>
   2ab90:	ldrb	r0, [r4, #78]	; 0x4e
   2ab94:	cmp	r0, #0
   2ab98:	bne	2ac78 <__assert_fail@plt+0x18fcc>
   2ab9c:	mov	r3, #0
   2aba0:	cmp	r6, #10
   2aba4:	bne	2abb8 <__assert_fail@plt+0x18f0c>
   2aba8:	ldrb	r0, [r4, #77]	; 0x4d
   2abac:	cmp	r0, #0
   2abb0:	movwne	r0, #1
   2abb4:	lsl	r3, r0, #1
   2abb8:	mov	r2, sp
   2abbc:	mov	r0, r9
   2abc0:	mov	r1, r7
   2abc4:	bl	28448 <__assert_fail@plt+0x1679c>
   2abc8:	mov	r6, r0
   2abcc:	ldr	r0, [r4, #100]	; 0x64
   2abd0:	cmp	r8, #0
   2abd4:	str	r6, [r0, r5, lsl #2]
   2abd8:	beq	2abe4 <__assert_fail@plt+0x18f38>
   2abdc:	ldr	r0, [sp, #8]
   2abe0:	bl	1c224 <__assert_fail@plt+0xa578>
   2abe4:	cmp	r6, #0
   2abe8:	ldrne	r0, [r7, #76]	; 0x4c
   2abec:	cmpne	r0, #0
   2abf0:	bne	2ac00 <__assert_fail@plt+0x18f54>
   2abf4:	mov	r0, r6
   2abf8:	sub	sp, fp, #24
   2abfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ac00:	add	r7, r6, #4
   2ac04:	mov	r0, r4
   2ac08:	mov	r2, r5
   2ac0c:	mov	r1, r7
   2ac10:	bl	29d80 <__assert_fail@plt+0x180d4>
   2ac14:	cmp	r0, #0
   2ac18:	str	r0, [r9]
   2ac1c:	bne	2ac58 <__assert_fail@plt+0x18fac>
   2ac20:	ldrb	r0, [r6, #52]	; 0x34
   2ac24:	tst	r0, #64	; 0x40
   2ac28:	beq	2abf4 <__assert_fail@plt+0x18f48>
   2ac2c:	mov	r0, r4
   2ac30:	mov	r1, r7
   2ac34:	bl	29e80 <__assert_fail@plt+0x181d4>
   2ac38:	str	r0, [r9]
   2ac3c:	cmp	r0, #0
   2ac40:	mov	r6, #0
   2ac44:	ldreq	r0, [r4, #100]	; 0x64
   2ac48:	ldreq	r6, [r0, r5, lsl #2]
   2ac4c:	mov	r0, r6
   2ac50:	sub	sp, fp, #24
   2ac54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ac58:	mov	r6, #0
   2ac5c:	mov	r0, r6
   2ac60:	sub	sp, fp, #24
   2ac64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ac68:	ldr	r0, [r4, #88]	; 0x58
   2ac6c:	and	r0, r0, #2
   2ac70:	eor	r3, r0, #10
   2ac74:	b	2abb8 <__assert_fail@plt+0x18f0c>
   2ac78:	mov	r0, r6
   2ac7c:	bl	11afc <iswalnum@plt>
   2ac80:	mov	r3, #1
   2ac84:	cmp	r6, #95	; 0x5f
   2ac88:	beq	2abb8 <__assert_fail@plt+0x18f0c>
   2ac8c:	cmp	r0, #0
   2ac90:	beq	2ab9c <__assert_fail@plt+0x18ef0>
   2ac94:	b	2abb8 <__assert_fail@plt+0x18f0c>
   2ac98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac9c:	add	fp, sp, #28
   2aca0:	sub	sp, sp, #20
   2aca4:	mov	sl, r2
   2aca8:	cmp	r1, #0
   2acac:	str	r0, [sp, #16]
   2acb0:	beq	2ae24 <__assert_fail@plt+0x19178>
   2acb4:	ldr	r0, [r1, #4]
   2acb8:	mov	r8, r1
   2acbc:	cmp	sl, #0
   2acc0:	beq	2ade0 <__assert_fail@plt+0x19134>
   2acc4:	cmp	r0, #1
   2acc8:	blt	2ade0 <__assert_fail@plt+0x19134>
   2accc:	ldr	r1, [sl, #4]
   2acd0:	cmp	r1, #1
   2acd4:	blt	2ade0 <__assert_fail@plt+0x19134>
   2acd8:	ldr	r4, [sp, #16]
   2acdc:	add	r0, r1, r0
   2ace0:	str	r0, [r4]
   2ace4:	lsl	r0, r0, #2
   2ace8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2acec:	cmp	r0, #0
   2acf0:	str	r0, [r4, #8]
   2acf4:	beq	2af1c <__assert_fail@plt+0x19270>
   2acf8:	ldr	r9, [sl, #4]
   2acfc:	ldr	lr, [r8, #4]
   2ad00:	mov	r7, #0
   2ad04:	mov	r1, #0
   2ad08:	cmp	r9, #0
   2ad0c:	movwgt	r1, #1
   2ad10:	cmp	lr, #1
   2ad14:	blt	2aea0 <__assert_fail@plt+0x191f4>
   2ad18:	mov	r2, #0
   2ad1c:	mov	ip, #0
   2ad20:	str	r2, [sp, #8]
   2ad24:	mov	r2, #0
   2ad28:	str	r2, [sp, #12]
   2ad2c:	mov	r2, #0
   2ad30:	ldr	r4, [sp, #12]
   2ad34:	mov	r7, ip
   2ad38:	tst	r1, #1
   2ad3c:	beq	2aed0 <__assert_fail@plt+0x19224>
   2ad40:	ldr	r1, [sl, #8]
   2ad44:	ldr	r5, [r1, r7, lsl #2]
   2ad48:	ldr	r1, [r8, #8]
   2ad4c:	ldr	r3, [r1, r2, lsl #2]
   2ad50:	cmp	r3, r5
   2ad54:	ble	2ad7c <__assert_fail@plt+0x190d0>
   2ad58:	add	r7, r7, #1
   2ad5c:	str	r5, [r0, r4, lsl #2]
   2ad60:	mov	r1, #0
   2ad64:	add	r4, r4, #1
   2ad68:	cmp	r9, r7
   2ad6c:	movwgt	r1, #1
   2ad70:	cmp	lr, r2
   2ad74:	bgt	2ad38 <__assert_fail@plt+0x1908c>
   2ad78:	b	2aea4 <__assert_fail@plt+0x191f8>
   2ad7c:	str	r3, [r0, r4, lsl #2]
   2ad80:	ldr	r6, [sp, #8]
   2ad84:	add	r1, r7, #1
   2ad88:	mov	ip, r7
   2ad8c:	add	r2, r2, #1
   2ad90:	ldr	r9, [sl, #4]
   2ad94:	ldr	lr, [r8, #4]
   2ad98:	moveq	ip, r1
   2ad9c:	str	r1, [sp, #4]
   2ada0:	mov	r1, #0
   2ada4:	sub	r6, r6, #1
   2ada8:	cmp	r9, ip
   2adac:	str	r6, [sp, #8]
   2adb0:	add	r6, r4, #1
   2adb4:	movwgt	r1, #1
   2adb8:	cmp	lr, r2
   2adbc:	str	r6, [sp, #12]
   2adc0:	bgt	2ad30 <__assert_fail@plt+0x19084>
   2adc4:	ldr	r2, [sp, #4]
   2adc8:	cmp	r3, r5
   2adcc:	add	r4, r4, #1
   2add0:	moveq	r7, r2
   2add4:	cmp	r1, #0
   2add8:	bne	2aeac <__assert_fail@plt+0x19200>
   2addc:	b	2aef8 <__assert_fail@plt+0x1924c>
   2ade0:	cmp	r0, #1
   2ade4:	blt	2ae24 <__assert_fail@plt+0x19178>
   2ade8:	ldr	r1, [sp, #16]
   2adec:	str	r0, [r1, #4]
   2adf0:	ldr	r1, [r8, #4]
   2adf4:	cmp	r1, #1
   2adf8:	blt	2ae84 <__assert_fail@plt+0x191d8>
   2adfc:	ldr	r4, [sp, #16]
   2ae00:	str	r0, [r4]
   2ae04:	lsl	r0, r0, #2
   2ae08:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2ae0c:	cmp	r0, #0
   2ae10:	str	r0, [r4, #8]
   2ae14:	beq	2af0c <__assert_fail@plt+0x19260>
   2ae18:	ldr	r2, [r8, #4]
   2ae1c:	ldr	r1, [r8, #8]
   2ae20:	b	2ae70 <__assert_fail@plt+0x191c4>
   2ae24:	cmp	sl, #0
   2ae28:	beq	2ae84 <__assert_fail@plt+0x191d8>
   2ae2c:	ldr	r0, [sl, #4]
   2ae30:	cmp	r0, #1
   2ae34:	blt	2ae84 <__assert_fail@plt+0x191d8>
   2ae38:	ldr	r1, [sp, #16]
   2ae3c:	str	r0, [r1, #4]
   2ae40:	ldr	r1, [sl, #4]
   2ae44:	cmp	r1, #1
   2ae48:	blt	2ae84 <__assert_fail@plt+0x191d8>
   2ae4c:	ldr	r4, [sp, #16]
   2ae50:	str	r0, [r4]
   2ae54:	lsl	r0, r0, #2
   2ae58:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2ae5c:	cmp	r0, #0
   2ae60:	str	r0, [r4, #8]
   2ae64:	beq	2af0c <__assert_fail@plt+0x19260>
   2ae68:	ldr	r2, [sl, #4]
   2ae6c:	ldr	r1, [sl, #8]
   2ae70:	lsl	r2, r2, #2
   2ae74:	bl	118ec <memcpy@plt>
   2ae78:	mov	r0, #0
   2ae7c:	sub	sp, fp, #28
   2ae80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae84:	ldr	r1, [sp, #16]
   2ae88:	mov	r0, #0
   2ae8c:	str	r0, [r1]
   2ae90:	str	r0, [r1, #4]
   2ae94:	str	r0, [r1, #8]
   2ae98:	sub	sp, fp, #28
   2ae9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aea0:	mov	r4, #0
   2aea4:	cmp	r1, #0
   2aea8:	beq	2aef8 <__assert_fail@plt+0x1924c>
   2aeac:	ldr	r1, [sl, #8]
   2aeb0:	sub	r2, r9, r7
   2aeb4:	add	r0, r0, r4, lsl #2
   2aeb8:	lsl	r2, r2, #2
   2aebc:	add	r1, r1, r7, lsl #2
   2aec0:	bl	118ec <memcpy@plt>
   2aec4:	sub	r0, r4, r7
   2aec8:	add	r4, r0, r9
   2aecc:	b	2aef8 <__assert_fail@plt+0x1924c>
   2aed0:	ldr	r1, [r8, #8]
   2aed4:	add	r0, r0, r4, lsl #2
   2aed8:	add	r1, r1, r2, lsl #2
   2aedc:	sub	r2, lr, r2
   2aee0:	lsl	r2, r2, #2
   2aee4:	bl	118ec <memcpy@plt>
   2aee8:	ldr	r0, [r8, #4]
   2aeec:	ldr	r1, [sp, #8]
   2aef0:	add	r0, r0, r1
   2aef4:	add	r4, r0, r4
   2aef8:	ldr	r0, [sp, #16]
   2aefc:	str	r4, [r0, #4]
   2af00:	mov	r0, #0
   2af04:	sub	sp, fp, #28
   2af08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af0c:	ldr	r1, [sp, #16]
   2af10:	mov	r0, #0
   2af14:	str	r0, [r1]
   2af18:	str	r0, [r1, #4]
   2af1c:	mov	r0, #12
   2af20:	sub	sp, fp, #28
   2af24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af2c:	add	fp, sp, #28
   2af30:	sub	sp, sp, #12
   2af34:	mov	r6, r2
   2af38:	mov	r7, r3
   2af3c:	ldr	r2, [r2]
   2af40:	mov	r4, r0
   2af44:	mov	r0, #8
   2af48:	mov	r8, r1
   2af4c:	ldr	r9, [fp, #8]
   2af50:	ldr	r3, [r6, #4]
   2af54:	str	r0, [sp, #8]
   2af58:	add	r1, r6, #8
   2af5c:	mov	r0, r4
   2af60:	stm	sp, {r7, r9}
   2af64:	bl	2b100 <__assert_fail@plt+0x19454>
   2af68:	mov	r5, r0
   2af6c:	cmp	r0, #0
   2af70:	beq	2af80 <__assert_fail@plt+0x192d4>
   2af74:	mov	r0, r5
   2af78:	sub	sp, fp, #28
   2af7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af80:	ldr	r0, [r4, #108]	; 0x6c
   2af84:	ldr	r1, [r4, #112]	; 0x70
   2af88:	ldr	sl, [r6, #4]
   2af8c:	ldr	r5, [r8]
   2af90:	cmp	r0, r1
   2af94:	blt	2afe4 <__assert_fail@plt+0x19338>
   2af98:	ldr	r0, [r4, #116]	; 0x74
   2af9c:	add	r1, r1, r1, lsl #1
   2afa0:	lsl	r1, r1, #4
   2afa4:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2afa8:	cmp	r0, #0
   2afac:	beq	2b0e8 <__assert_fail@plt+0x1943c>
   2afb0:	str	r0, [r4, #116]	; 0x74
   2afb4:	ldr	r1, [r4, #108]	; 0x6c
   2afb8:	ldr	r2, [r4, #112]	; 0x70
   2afbc:	add	r1, r1, r1, lsl #1
   2afc0:	add	r0, r0, r1, lsl #3
   2afc4:	add	r1, r2, r2, lsl #1
   2afc8:	lsl	r2, r1, #3
   2afcc:	mov	r1, #0
   2afd0:	bl	11b2c <memset@plt>
   2afd4:	ldr	r1, [r4, #112]	; 0x70
   2afd8:	ldr	r0, [r4, #108]	; 0x6c
   2afdc:	lsl	r1, r1, #1
   2afe0:	str	r1, [r4, #112]	; 0x70
   2afe4:	ldr	r1, [r4, #116]	; 0x74
   2afe8:	cmp	r0, #1
   2afec:	blt	2b00c <__assert_fail@plt+0x19360>
   2aff0:	sub	r2, r0, #1
   2aff4:	add	r2, r2, r2, lsl #1
   2aff8:	add	r2, r1, r2, lsl #3
   2affc:	ldr	r3, [r2, #4]
   2b000:	cmp	r3, r9
   2b004:	moveq	r3, #1
   2b008:	strbeq	r3, [r2, #20]
   2b00c:	add	r2, r0, r0, lsl #1
   2b010:	cmp	sl, r5
   2b014:	mov	r3, #0
   2b018:	mov	ip, #0
   2b01c:	add	r0, r0, #1
   2b020:	mvneq	r3, #0
   2b024:	str	r7, [r1, r2, lsl #3]!
   2b028:	str	r9, [r1, #4]
   2b02c:	str	r5, [r1, #8]
   2b030:	str	sl, [r1, #12]
   2b034:	str	r3, [r1, #16]
   2b038:	str	r0, [r4, #108]	; 0x6c
   2b03c:	strb	ip, [r1, #20]
   2b040:	sub	r0, sl, r5
   2b044:	ldr	r1, [r4, #120]	; 0x78
   2b048:	cmp	r1, r0
   2b04c:	strlt	r0, [r4, #120]	; 0x78
   2b050:	ldr	r0, [r6, #4]
   2b054:	ldr	r1, [r8]
   2b058:	ldr	r7, [r4, #104]	; 0x68
   2b05c:	add	r0, r0, r9
   2b060:	sub	r6, r0, r1
   2b064:	ldr	r0, [r4, #36]	; 0x24
   2b068:	cmp	r0, r6
   2b06c:	bgt	2b07c <__assert_fail@plt+0x193d0>
   2b070:	ldr	r1, [r4, #48]	; 0x30
   2b074:	cmp	r0, r1
   2b078:	blt	2b094 <__assert_fail@plt+0x193e8>
   2b07c:	ldr	r0, [r4, #28]
   2b080:	cmp	r0, r6
   2b084:	bgt	2b0ac <__assert_fail@plt+0x19400>
   2b088:	ldr	r1, [r4, #48]	; 0x30
   2b08c:	cmp	r0, r1
   2b090:	bge	2b0ac <__assert_fail@plt+0x19400>
   2b094:	add	r1, r6, #1
   2b098:	mov	r0, r4
   2b09c:	bl	2a854 <__assert_fail@plt+0x18ba8>
   2b0a0:	mov	r5, r0
   2b0a4:	cmp	r0, #0
   2b0a8:	bne	2af74 <__assert_fail@plt+0x192c8>
   2b0ac:	mov	r5, #0
   2b0b0:	cmp	r6, r7
   2b0b4:	ble	2af74 <__assert_fail@plt+0x192c8>
   2b0b8:	sub	r0, r6, r7
   2b0bc:	mov	r1, #0
   2b0c0:	mov	r5, #0
   2b0c4:	lsl	r2, r0, #2
   2b0c8:	ldr	r0, [r4, #100]	; 0x64
   2b0cc:	add	r0, r0, r7, lsl #2
   2b0d0:	add	r0, r0, #4
   2b0d4:	bl	11b2c <memset@plt>
   2b0d8:	str	r6, [r4, #104]	; 0x68
   2b0dc:	mov	r0, r5
   2b0e0:	sub	sp, fp, #28
   2b0e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0e8:	ldr	r0, [r4, #116]	; 0x74
   2b0ec:	bl	1c224 <__assert_fail@plt+0xa578>
   2b0f0:	mov	r5, #12
   2b0f4:	mov	r0, r5
   2b0f8:	sub	sp, fp, #28
   2b0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b104:	add	fp, sp, #28
   2b108:	sub	sp, sp, #84	; 0x54
   2b10c:	ldr	r7, [r0, #84]	; 0x54
   2b110:	mov	ip, r1
   2b114:	mov	r1, #0
   2b118:	mov	lr, r2
   2b11c:	mov	r9, r3
   2b120:	str	r0, [sp, #44]	; 0x2c
   2b124:	str	r1, [fp, #-52]	; 0xffffffcc
   2b128:	ldr	r4, [ip, #4]
   2b12c:	ldr	r1, [r7]
   2b130:	str	r7, [sp, #24]
   2b134:	ldr	sl, [r1, r2, lsl #3]
   2b138:	ldr	r1, [r0, #120]	; 0x78
   2b13c:	ldr	r2, [fp, #12]
   2b140:	add	r2, r1, r2
   2b144:	cmp	r4, r2
   2b148:	str	sl, [sp, #20]
   2b14c:	ble	2bab8 <__assert_fail@plt+0x19e0c>
   2b150:	ldr	r2, [r0, #100]	; 0x64
   2b154:	ldr	r5, [ip]
   2b158:	ldr	r4, [r0, #40]	; 0x28
   2b15c:	ldr	r1, [r0, #88]	; 0x58
   2b160:	str	r2, [sp, #8]
   2b164:	ldr	r2, [ip, #8]
   2b168:	cmp	r5, #0
   2b16c:	str	r4, [sp, #12]
   2b170:	moveq	r5, r9
   2b174:	cmp	r5, #0
   2b178:	str	r2, [r0, #100]	; 0x64
   2b17c:	str	r5, [r0, #40]	; 0x28
   2b180:	ble	2bb28 <__assert_fail@plt+0x19e7c>
   2b184:	ldr	r2, [r0, #48]	; 0x30
   2b188:	sub	r3, r5, #1
   2b18c:	cmp	r2, r3
   2b190:	beq	2bb3c <__assert_fail@plt+0x19e90>
   2b194:	ldr	r1, [r0, #80]	; 0x50
   2b198:	cmp	r1, #2
   2b19c:	blt	2b210 <__assert_fail@plt+0x19564>
   2b1a0:	ldr	r1, [r0, #8]
   2b1a4:	ldr	r6, [r1, r3, lsl #2]
   2b1a8:	cmn	r6, #1
   2b1ac:	bne	2b240 <__assert_fail@plt+0x19594>
   2b1b0:	sub	r3, r3, #1
   2b1b4:	cmn	r3, #1
   2b1b8:	bne	2b1a4 <__assert_fail@plt+0x194f8>
   2b1bc:	ldr	r0, [sp, #44]	; 0x2c
   2b1c0:	ldr	r8, [r0, #60]	; 0x3c
   2b1c4:	cmp	r5, r9
   2b1c8:	str	ip, [sp, #16]
   2b1cc:	beq	2b27c <__assert_fail@plt+0x195d0>
   2b1d0:	ldr	r9, [sp, #44]	; 0x2c
   2b1d4:	ldr	r0, [r9, #100]	; 0x64
   2b1d8:	ldr	r6, [r0, r5, lsl #2]
   2b1dc:	cmp	r6, #0
   2b1e0:	beq	2b348 <__assert_fail@plt+0x1969c>
   2b1e4:	ldrb	r0, [r6, #52]	; 0x34
   2b1e8:	tst	r0, #64	; 0x40
   2b1ec:	bne	2b368 <__assert_fail@plt+0x196bc>
   2b1f0:	mov	r0, #0
   2b1f4:	str	r0, [sp, #52]	; 0x34
   2b1f8:	str	r0, [sp, #48]	; 0x30
   2b1fc:	str	r0, [sp, #56]	; 0x38
   2b200:	ldr	r4, [fp, #12]
   2b204:	cmp	r5, r4
   2b208:	blt	2b3c0 <__assert_fail@plt+0x19714>
   2b20c:	b	2b9a0 <__assert_fail@plt+0x19cf4>
   2b210:	ldr	r1, [r0, #4]
   2b214:	ldr	r2, [r0, #68]	; 0x44
   2b218:	mov	r8, #1
   2b21c:	ldrb	r0, [r1, r3]
   2b220:	ubfx	r1, r0, #5, #3
   2b224:	ldr	r1, [r2, r1, lsl #2]
   2b228:	and	r2, r0, #31
   2b22c:	tst	r1, r8, lsl r2
   2b230:	moveq	r8, #0
   2b234:	cmpeq	r0, #10
   2b238:	bne	2b270 <__assert_fail@plt+0x195c4>
   2b23c:	b	2b25c <__assert_fail@plt+0x195b0>
   2b240:	ldr	r0, [sp, #44]	; 0x2c
   2b244:	ldrb	r0, [r0, #78]	; 0x4e
   2b248:	cmp	r0, #0
   2b24c:	bne	2bb8c <__assert_fail@plt+0x19ee0>
   2b250:	mov	r8, #0
   2b254:	cmp	r6, #10
   2b258:	bne	2b270 <__assert_fail@plt+0x195c4>
   2b25c:	ldr	r0, [sp, #44]	; 0x2c
   2b260:	ldrb	r0, [r0, #77]	; 0x4d
   2b264:	cmp	r0, #0
   2b268:	movwne	r0, #1
   2b26c:	lsl	r8, r0, #1
   2b270:	cmp	r5, r9
   2b274:	str	ip, [sp, #16]
   2b278:	bne	2b1d0 <__assert_fail@plt+0x19524>
   2b27c:	mov	r0, #1
   2b280:	mov	r6, lr
   2b284:	str	r0, [sp, #52]	; 0x34
   2b288:	str	r0, [sp, #48]	; 0x30
   2b28c:	mov	r0, #4
   2b290:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2b294:	cmp	r0, #0
   2b298:	str	r0, [sp, #56]	; 0x38
   2b29c:	beq	2bb6c <__assert_fail@plt+0x19ec0>
   2b2a0:	ldr	r3, [fp, #16]
   2b2a4:	str	r6, [r0]
   2b2a8:	mov	r0, #0
   2b2ac:	add	r1, sp, #48	; 0x30
   2b2b0:	mov	r2, sl
   2b2b4:	str	r0, [fp, #-52]	; 0xffffffcc
   2b2b8:	mov	r0, r7
   2b2bc:	bl	2bbd4 <__assert_fail@plt+0x19f28>
   2b2c0:	cmp	r0, #0
   2b2c4:	str	r0, [fp, #-52]	; 0xffffffcc
   2b2c8:	bne	2bb54 <__assert_fail@plt+0x19ea8>
   2b2cc:	ldr	r0, [sp, #52]	; 0x34
   2b2d0:	ldr	r9, [sp, #44]	; 0x2c
   2b2d4:	cmp	r0, #0
   2b2d8:	beq	2b304 <__assert_fail@plt+0x19658>
   2b2dc:	ldr	r0, [fp, #16]
   2b2e0:	ldr	r3, [sp, #20]
   2b2e4:	add	r1, sp, #48	; 0x30
   2b2e8:	mov	r2, r5
   2b2ec:	str	r0, [sp]
   2b2f0:	mov	r0, r9
   2b2f4:	bl	2bd1c <__assert_fail@plt+0x1a070>
   2b2f8:	cmp	r0, #0
   2b2fc:	str	r0, [fp, #-52]	; 0xffffffcc
   2b300:	bne	2bb54 <__assert_fail@plt+0x19ea8>
   2b304:	ldr	r1, [sp, #24]
   2b308:	sub	r0, fp, #52	; 0x34
   2b30c:	add	r2, sp, #48	; 0x30
   2b310:	mov	r3, r8
   2b314:	bl	28448 <__assert_fail@plt+0x1679c>
   2b318:	mov	r6, r0
   2b31c:	cmp	r0, #0
   2b320:	bne	2b330 <__assert_fail@plt+0x19684>
   2b324:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2b328:	cmp	r0, #0
   2b32c:	bne	2ba8c <__assert_fail@plt+0x19de0>
   2b330:	ldr	r0, [r9, #100]	; 0x64
   2b334:	str	r6, [r0, r5, lsl #2]
   2b338:	ldr	r4, [fp, #12]
   2b33c:	cmp	r5, r4
   2b340:	blt	2b3c0 <__assert_fail@plt+0x19714>
   2b344:	b	2b9a0 <__assert_fail@plt+0x19cf4>
   2b348:	mov	r6, #0
   2b34c:	str	r6, [sp, #52]	; 0x34
   2b350:	str	r6, [sp, #48]	; 0x30
   2b354:	str	r6, [sp, #56]	; 0x38
   2b358:	ldr	r4, [fp, #12]
   2b35c:	cmp	r5, r4
   2b360:	blt	2b3c0 <__assert_fail@plt+0x19714>
   2b364:	b	2b9a0 <__assert_fail@plt+0x19cf4>
   2b368:	ldr	r0, [r6, #8]
   2b36c:	cmp	r0, #1
   2b370:	str	r0, [sp, #52]	; 0x34
   2b374:	blt	2ba50 <__assert_fail@plt+0x19da4>
   2b378:	str	r0, [sp, #48]	; 0x30
   2b37c:	lsl	r0, r0, #2
   2b380:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2b384:	cmp	r0, #0
   2b388:	str	r0, [sp, #56]	; 0x38
   2b38c:	beq	2bb6c <__assert_fail@plt+0x19ec0>
   2b390:	ldr	r2, [r6, #8]
   2b394:	ldr	r1, [r6, #12]
   2b398:	lsl	r2, r2, #2
   2b39c:	bl	118ec <memcpy@plt>
   2b3a0:	ldrb	r0, [r6, #52]	; 0x34
   2b3a4:	mov	r1, #0
   2b3a8:	str	r1, [fp, #-52]	; 0xffffffcc
   2b3ac:	tst	r0, #64	; 0x40
   2b3b0:	bne	2b2dc <__assert_fail@plt+0x19630>
   2b3b4:	ldr	r4, [fp, #12]
   2b3b8:	cmp	r5, r4
   2b3bc:	bge	2b9a0 <__assert_fail@plt+0x19cf4>
   2b3c0:	ldr	r7, [sp, #24]
   2b3c4:	ldr	sl, [sp, #20]
   2b3c8:	ldr	r4, [fp, #16]
   2b3cc:	add	r8, sp, #48	; 0x30
   2b3d0:	mov	r0, #0
   2b3d4:	str	r6, [sp, #40]	; 0x28
   2b3d8:	b	2b408 <__assert_fail@plt+0x1975c>
   2b3dc:	ldr	r1, [sp, #40]	; 0x28
   2b3e0:	ldr	r0, [r9, #100]	; 0x64
   2b3e4:	ldr	r5, [sp, #28]
   2b3e8:	str	r1, [r0, r5, lsl #2]
   2b3ec:	cmp	r1, #0
   2b3f0:	ldr	r1, [sp, #32]
   2b3f4:	mov	r0, #0
   2b3f8:	addeq	r0, r1, #1
   2b3fc:	ldr	r1, [fp, #12]
   2b400:	cmp	r5, r1
   2b404:	beq	2b99c <__assert_fail@plt+0x19cf0>
   2b408:	str	r0, [sp, #32]
   2b40c:	ldr	r0, [r9, #120]	; 0x78
   2b410:	ldr	r1, [sp, #32]
   2b414:	cmp	r1, r0
   2b418:	bgt	2b9a0 <__assert_fail@plt+0x19cf4>
   2b41c:	mov	r0, #0
   2b420:	add	r1, r5, #1
   2b424:	str	r0, [sp, #52]	; 0x34
   2b428:	str	r1, [sp, #28]
   2b42c:	ldr	r0, [r9, #100]	; 0x64
   2b430:	ldr	r0, [r0, r1, lsl #2]
   2b434:	cmp	r0, #0
   2b438:	beq	2b454 <__assert_fail@plt+0x197a8>
   2b43c:	add	r1, r0, #4
   2b440:	mov	r0, r8
   2b444:	bl	28128 <__assert_fail@plt+0x1647c>
   2b448:	cmp	r0, #0
   2b44c:	str	r0, [fp, #-52]	; 0xffffffcc
   2b450:	bne	2ba8c <__assert_fail@plt+0x19de0>
   2b454:	ldr	r1, [sp, #40]	; 0x28
   2b458:	cmp	r1, #0
   2b45c:	beq	2b854 <__assert_fail@plt+0x19ba8>
   2b460:	mov	r0, #0
   2b464:	ldr	r8, [r9, #84]	; 0x54
   2b468:	str	r0, [fp, #-32]	; 0xffffffe0
   2b46c:	str	r0, [fp, #-44]	; 0xffffffd4
   2b470:	str	r0, [fp, #-48]	; 0xffffffd0
   2b474:	str	r0, [fp, #-40]	; 0xffffffd8
   2b478:	ldr	r1, [r1, #20]
   2b47c:	cmp	r1, #1
   2b480:	blt	2b840 <__assert_fail@plt+0x19b94>
   2b484:	ldr	r7, [sp, #40]	; 0x28
   2b488:	mov	r4, #0
   2b48c:	b	2b4c0 <__assert_fail@plt+0x19814>
   2b490:	ldr	r1, [sp, #52]	; 0x34
   2b494:	cmp	r1, #0
   2b498:	bne	2b64c <__assert_fail@plt+0x199a0>
   2b49c:	ldr	r0, [sp, #56]	; 0x38
   2b4a0:	str	r6, [r0]
   2b4a4:	ldr	r0, [sp, #52]	; 0x34
   2b4a8:	add	r0, r0, #1
   2b4ac:	str	r0, [sp, #52]	; 0x34
   2b4b0:	ldr	r0, [r7, #20]
   2b4b4:	add	r4, r4, #1
   2b4b8:	cmp	r4, r0
   2b4bc:	bge	2b834 <__assert_fail@plt+0x19b88>
   2b4c0:	ldr	r0, [r7, #24]
   2b4c4:	ldr	sl, [r0, r4, lsl #2]
   2b4c8:	ldr	r0, [r8]
   2b4cc:	add	r1, r0, sl, lsl #3
   2b4d0:	ldrb	r1, [r1, #6]
   2b4d4:	tst	r1, #16
   2b4d8:	beq	2b5e8 <__assert_fail@plt+0x1993c>
   2b4dc:	mov	r0, r8
   2b4e0:	mov	r1, sl
   2b4e4:	mov	r2, r9
   2b4e8:	mov	r3, r5
   2b4ec:	bl	2c744 <__assert_fail@plt+0x1aa98>
   2b4f0:	mov	r9, r0
   2b4f4:	cmp	r0, #2
   2b4f8:	blt	2b5d4 <__assert_fail@plt+0x19928>
   2b4fc:	ldr	r0, [sp, #44]	; 0x2c
   2b500:	ldr	r1, [r8, #12]
   2b504:	add	r6, r9, r5
   2b508:	ldr	r0, [r0, #100]	; 0x64
   2b50c:	ldr	r1, [r1, sl, lsl #2]
   2b510:	ldr	r0, [r0, r6, lsl #2]
   2b514:	str	r1, [sp, #36]	; 0x24
   2b518:	mov	r1, #0
   2b51c:	str	r1, [fp, #-44]	; 0xffffffd4
   2b520:	cmp	r0, #0
   2b524:	beq	2b540 <__assert_fail@plt+0x19894>
   2b528:	add	r1, r0, #4
   2b52c:	sub	r0, fp, #48	; 0x30
   2b530:	bl	28128 <__assert_fail@plt+0x1647c>
   2b534:	cmp	r0, #0
   2b538:	str	r0, [fp, #-32]	; 0xffffffe0
   2b53c:	bne	2ba7c <__assert_fail@plt+0x19dd0>
   2b540:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2b544:	cmp	r2, #0
   2b548:	beq	2b574 <__assert_fail@plt+0x198c8>
   2b54c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2b550:	ldr	r7, [sp, #36]	; 0x24
   2b554:	cmp	r1, #0
   2b558:	bne	2b73c <__assert_fail@plt+0x19a90>
   2b55c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2b560:	str	r7, [r0]
   2b564:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2b568:	add	r0, r0, #1
   2b56c:	str	r0, [fp, #-44]	; 0xffffffd4
   2b570:	b	2b59c <__assert_fail@plt+0x198f0>
   2b574:	mov	r0, #1
   2b578:	str	r0, [fp, #-44]	; 0xffffffd4
   2b57c:	str	r0, [fp, #-48]	; 0xffffffd0
   2b580:	mov	r0, #4
   2b584:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2b588:	ldr	r1, [sp, #36]	; 0x24
   2b58c:	cmp	r0, #0
   2b590:	str	r0, [fp, #-40]	; 0xffffffd8
   2b594:	beq	2baa4 <__assert_fail@plt+0x19df8>
   2b598:	str	r1, [r0]
   2b59c:	sub	r0, fp, #32
   2b5a0:	mov	r1, r8
   2b5a4:	sub	r2, fp, #48	; 0x30
   2b5a8:	bl	2c414 <__assert_fail@plt+0x1a768>
   2b5ac:	ldr	r2, [sp, #44]	; 0x2c
   2b5b0:	ldr	r1, [r2, #100]	; 0x64
   2b5b4:	str	r0, [r1, r6, lsl #2]
   2b5b8:	ldr	r0, [r2, #100]	; 0x64
   2b5bc:	ldr	r0, [r0, r6, lsl #2]
   2b5c0:	cmp	r0, #0
   2b5c4:	bne	2b5d4 <__assert_fail@plt+0x19928>
   2b5c8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2b5cc:	cmp	r7, #0
   2b5d0:	bne	2ba80 <__assert_fail@plt+0x19dd4>
   2b5d4:	cmp	r9, #0
   2b5d8:	ldr	r9, [sp, #44]	; 0x2c
   2b5dc:	ldr	r7, [sp, #40]	; 0x28
   2b5e0:	bne	2b600 <__assert_fail@plt+0x19954>
   2b5e4:	ldr	r0, [r8]
   2b5e8:	add	r1, r0, sl, lsl #3
   2b5ec:	mov	r0, r9
   2b5f0:	mov	r2, r5
   2b5f4:	bl	2cad0 <__assert_fail@plt+0x1ae24>
   2b5f8:	cmp	r0, #0
   2b5fc:	beq	2b4b0 <__assert_fail@plt+0x19804>
   2b600:	ldr	r0, [r8, #12]
   2b604:	ldr	r2, [sp, #48]	; 0x30
   2b608:	ldr	r6, [r0, sl, lsl #2]
   2b60c:	cmp	r2, #0
   2b610:	bne	2b490 <__assert_fail@plt+0x197e4>
   2b614:	mov	r0, #1
   2b618:	str	r0, [sp, #52]	; 0x34
   2b61c:	str	r0, [sp, #48]	; 0x30
   2b620:	mov	r0, #4
   2b624:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2b628:	cmp	r0, #0
   2b62c:	str	r0, [sp, #56]	; 0x38
   2b630:	beq	2ba68 <__assert_fail@plt+0x19dbc>
   2b634:	str	r6, [r0]
   2b638:	ldr	r0, [r7, #20]
   2b63c:	add	r4, r4, #1
   2b640:	cmp	r4, r0
   2b644:	blt	2b4c0 <__assert_fail@plt+0x19814>
   2b648:	b	2b834 <__assert_fail@plt+0x19b88>
   2b64c:	cmp	r2, r1
   2b650:	bne	2b6b8 <__assert_fail@plt+0x19a0c>
   2b654:	lsl	r0, r2, #1
   2b658:	lsl	r1, r2, #3
   2b65c:	str	r0, [sp, #48]	; 0x30
   2b660:	ldr	r0, [sp, #56]	; 0x38
   2b664:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2b668:	cmp	r0, #0
   2b66c:	beq	2ba74 <__assert_fail@plt+0x19dc8>
   2b670:	str	r0, [sp, #56]	; 0x38
   2b674:	ldr	r1, [sp, #52]	; 0x34
   2b678:	ldr	r2, [r0]
   2b67c:	cmp	r2, r6
   2b680:	bgt	2b6c8 <__assert_fail@plt+0x19a1c>
   2b684:	add	r2, r0, r1, lsl #2
   2b688:	ldr	r3, [r2, #-4]
   2b68c:	cmp	r3, r6
   2b690:	ble	2b734 <__assert_fail@plt+0x19a88>
   2b694:	sub	r1, r1, #2
   2b698:	str	r3, [r2]
   2b69c:	sub	r1, r1, #1
   2b6a0:	ldr	r3, [r2, #-8]
   2b6a4:	sub	r2, r2, #4
   2b6a8:	cmp	r3, r6
   2b6ac:	bgt	2b698 <__assert_fail@plt+0x199ec>
   2b6b0:	add	r1, r1, #2
   2b6b4:	b	2b734 <__assert_fail@plt+0x19a88>
   2b6b8:	ldr	r0, [sp, #56]	; 0x38
   2b6bc:	ldr	r2, [r0]
   2b6c0:	cmp	r2, r6
   2b6c4:	ble	2b684 <__assert_fail@plt+0x199d8>
   2b6c8:	cmp	r1, #1
   2b6cc:	blt	2b734 <__assert_fail@plt+0x19a88>
   2b6d0:	ands	r7, r1, #3
   2b6d4:	sub	ip, r1, #1
   2b6d8:	beq	2b6fc <__assert_fail@plt+0x19a50>
   2b6dc:	add	lr, r0, r1, lsl #2
   2b6e0:	mov	r3, lr
   2b6e4:	ldr	r2, [r3, #-4]!
   2b6e8:	subs	r7, r7, #1
   2b6ec:	sub	r1, r1, #1
   2b6f0:	str	r2, [lr]
   2b6f4:	mov	lr, r3
   2b6f8:	bne	2b6e4 <__assert_fail@plt+0x19a38>
   2b6fc:	cmp	ip, #3
   2b700:	bcc	2b72c <__assert_fail@plt+0x19a80>
   2b704:	add	r2, r0, r1, lsl #2
   2b708:	sub	r2, r2, #8
   2b70c:	sub	lr, r2, #8
   2b710:	sub	r1, r1, #4
   2b714:	sub	sl, r2, #4
   2b718:	sub	r2, r2, #16
   2b71c:	ldm	lr, {r3, r7, ip, lr}
   2b720:	cmp	r1, #0
   2b724:	stm	sl, {r3, r7, ip, lr}
   2b728:	bgt	2b70c <__assert_fail@plt+0x19a60>
   2b72c:	ldr	r7, [sp, #40]	; 0x28
   2b730:	mov	r1, #0
   2b734:	str	r6, [r0, r1, lsl #2]
   2b738:	b	2b4a4 <__assert_fail@plt+0x197f8>
   2b73c:	cmp	r2, r1
   2b740:	bne	2b7a8 <__assert_fail@plt+0x19afc>
   2b744:	lsl	r0, r2, #1
   2b748:	lsl	r1, r2, #3
   2b74c:	str	r0, [fp, #-48]	; 0xffffffd0
   2b750:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2b754:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2b758:	cmp	r0, #0
   2b75c:	beq	2ba74 <__assert_fail@plt+0x19dc8>
   2b760:	str	r0, [fp, #-40]	; 0xffffffd8
   2b764:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2b768:	ldr	r2, [r0]
   2b76c:	cmp	r2, r7
   2b770:	bgt	2b7b8 <__assert_fail@plt+0x19b0c>
   2b774:	add	r2, r0, r1, lsl #2
   2b778:	ldr	r3, [r2, #-4]
   2b77c:	cmp	r3, r7
   2b780:	ble	2b82c <__assert_fail@plt+0x19b80>
   2b784:	sub	r1, r1, #2
   2b788:	str	r3, [r2]
   2b78c:	sub	r1, r1, #1
   2b790:	ldr	r3, [r2, #-8]
   2b794:	sub	r2, r2, #4
   2b798:	cmp	r3, r7
   2b79c:	bgt	2b788 <__assert_fail@plt+0x19adc>
   2b7a0:	add	r1, r1, #2
   2b7a4:	b	2b82c <__assert_fail@plt+0x19b80>
   2b7a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2b7ac:	ldr	r2, [r0]
   2b7b0:	cmp	r2, r7
   2b7b4:	ble	2b774 <__assert_fail@plt+0x19ac8>
   2b7b8:	cmp	r1, #1
   2b7bc:	blt	2b82c <__assert_fail@plt+0x19b80>
   2b7c0:	ands	r3, r1, #3
   2b7c4:	sub	ip, r1, #1
   2b7c8:	beq	2b7ec <__assert_fail@plt+0x19b40>
   2b7cc:	add	lr, r0, r1, lsl #2
   2b7d0:	mov	r7, lr
   2b7d4:	ldr	r2, [r7, #-4]!
   2b7d8:	subs	r3, r3, #1
   2b7dc:	sub	r1, r1, #1
   2b7e0:	str	r2, [lr]
   2b7e4:	mov	lr, r7
   2b7e8:	bne	2b7d4 <__assert_fail@plt+0x19b28>
   2b7ec:	cmp	ip, #3
   2b7f0:	bcc	2b824 <__assert_fail@plt+0x19b78>
   2b7f4:	add	r2, r0, r1, lsl #2
   2b7f8:	sub	r2, r2, #8
   2b7fc:	sub	lr, r2, #8
   2b800:	sub	r1, r1, #4
   2b804:	ldm	lr, {r3, r7, ip, lr}
   2b808:	cmp	r1, #0
   2b80c:	str	r3, [r2, #-4]
   2b810:	str	r7, [r2]
   2b814:	str	ip, [r2, #4]
   2b818:	str	lr, [r2, #8]
   2b81c:	sub	r2, r2, #16
   2b820:	bgt	2b7fc <__assert_fail@plt+0x19b50>
   2b824:	ldr	r7, [sp, #36]	; 0x24
   2b828:	mov	r1, #0
   2b82c:	str	r7, [r0, r1, lsl #2]
   2b830:	b	2b564 <__assert_fail@plt+0x198b8>
   2b834:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2b838:	ldr	r7, [sp, #24]
   2b83c:	ldr	sl, [sp, #20]
   2b840:	bl	1c224 <__assert_fail@plt+0xa578>
   2b844:	ldr	r4, [fp, #16]
   2b848:	mov	r0, #0
   2b84c:	add	r8, sp, #48	; 0x30
   2b850:	str	r0, [fp, #-52]	; 0xffffffcc
   2b854:	ldr	r0, [sp, #52]	; 0x34
   2b858:	cmp	r0, #0
   2b85c:	beq	2b8a4 <__assert_fail@plt+0x19bf8>
   2b860:	mov	r0, r7
   2b864:	mov	r1, r8
   2b868:	mov	r2, sl
   2b86c:	mov	r3, r4
   2b870:	bl	2bbd4 <__assert_fail@plt+0x19f28>
   2b874:	cmp	r0, #0
   2b878:	str	r0, [fp, #-52]	; 0xffffffcc
   2b87c:	bne	2ba8c <__assert_fail@plt+0x19de0>
   2b880:	ldr	r2, [sp, #28]
   2b884:	mov	r0, r9
   2b888:	mov	r1, r8
   2b88c:	mov	r3, sl
   2b890:	str	r4, [sp]
   2b894:	bl	2bd1c <__assert_fail@plt+0x1a070>
   2b898:	cmp	r0, #0
   2b89c:	str	r0, [fp, #-52]	; 0xffffffcc
   2b8a0:	bne	2ba8c <__assert_fail@plt+0x19de0>
   2b8a4:	cmn	r5, #1
   2b8a8:	ble	2b8e0 <__assert_fail@plt+0x19c34>
   2b8ac:	ldr	r0, [r9, #48]	; 0x30
   2b8b0:	cmp	r0, r5
   2b8b4:	beq	2b96c <__assert_fail@plt+0x19cc0>
   2b8b8:	ldr	r0, [r9, #80]	; 0x50
   2b8bc:	cmp	r0, #2
   2b8c0:	blt	2b8e8 <__assert_fail@plt+0x19c3c>
   2b8c4:	ldr	r0, [r9, #8]
   2b8c8:	ldr	r6, [r0, r5, lsl #2]
   2b8cc:	cmn	r6, #1
   2b8d0:	bne	2b918 <__assert_fail@plt+0x19c6c>
   2b8d4:	sub	r5, r5, #1
   2b8d8:	cmn	r5, #1
   2b8dc:	bne	2b8c8 <__assert_fail@plt+0x19c1c>
   2b8e0:	ldr	r3, [r9, #60]	; 0x3c
   2b8e4:	b	2b940 <__assert_fail@plt+0x19c94>
   2b8e8:	ldr	r0, [r9, #4]
   2b8ec:	ldr	r1, [r9, #68]	; 0x44
   2b8f0:	mov	r3, #1
   2b8f4:	ldrb	r0, [r0, r5]
   2b8f8:	ubfx	r2, r0, #5, #3
   2b8fc:	ldr	r1, [r1, r2, lsl #2]
   2b900:	and	r2, r0, #31
   2b904:	tst	r1, r3, lsl r2
   2b908:	moveq	r3, #0
   2b90c:	cmpeq	r0, #10
   2b910:	bne	2b940 <__assert_fail@plt+0x19c94>
   2b914:	b	2b930 <__assert_fail@plt+0x19c84>
   2b918:	ldrb	r0, [r9, #78]	; 0x4e
   2b91c:	cmp	r0, #0
   2b920:	bne	2b97c <__assert_fail@plt+0x19cd0>
   2b924:	mov	r3, #0
   2b928:	cmp	r6, #10
   2b92c:	bne	2b940 <__assert_fail@plt+0x19c94>
   2b930:	ldrb	r0, [r9, #77]	; 0x4d
   2b934:	cmp	r0, #0
   2b938:	movwne	r0, #1
   2b93c:	lsl	r3, r0, #1
   2b940:	sub	r0, fp, #52	; 0x34
   2b944:	mov	r1, r7
   2b948:	mov	r2, r8
   2b94c:	bl	28448 <__assert_fail@plt+0x1679c>
   2b950:	cmp	r0, #0
   2b954:	str	r0, [sp, #40]	; 0x28
   2b958:	bne	2b3dc <__assert_fail@plt+0x19730>
   2b95c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2b960:	cmp	r0, #0
   2b964:	beq	2b3dc <__assert_fail@plt+0x19730>
   2b968:	b	2ba8c <__assert_fail@plt+0x19de0>
   2b96c:	ldr	r0, [r9, #88]	; 0x58
   2b970:	and	r0, r0, #2
   2b974:	eor	r3, r0, #10
   2b978:	b	2b940 <__assert_fail@plt+0x19c94>
   2b97c:	mov	r0, r6
   2b980:	bl	11afc <iswalnum@plt>
   2b984:	mov	r3, #1
   2b988:	cmp	r6, #95	; 0x5f
   2b98c:	beq	2b940 <__assert_fail@plt+0x19c94>
   2b990:	cmp	r0, #0
   2b994:	beq	2b924 <__assert_fail@plt+0x19c78>
   2b998:	b	2b940 <__assert_fail@plt+0x19c94>
   2b99c:	ldr	r5, [fp, #12]
   2b9a0:	ldr	r0, [sp, #56]	; 0x38
   2b9a4:	bl	1c224 <__assert_fail@plt+0xa578>
   2b9a8:	ldr	r0, [r9, #100]	; 0x64
   2b9ac:	ldr	r1, [fp, #12]
   2b9b0:	mov	sl, #1
   2b9b4:	ldr	r1, [r0, r1, lsl #2]
   2b9b8:	ldr	r0, [sp, #16]
   2b9bc:	str	r5, [r0]
   2b9c0:	ldr	r0, [sp, #12]
   2b9c4:	cmp	r1, #0
   2b9c8:	addne	r1, r1, #4
   2b9cc:	str	r0, [r9, #40]	; 0x28
   2b9d0:	ldr	r0, [sp, #8]
   2b9d4:	str	r0, [r9, #100]	; 0x64
   2b9d8:	beq	2ba34 <__assert_fail@plt+0x19d88>
   2b9dc:	ldr	r2, [r1, #4]
   2b9e0:	cmp	r2, #1
   2b9e4:	blt	2ba40 <__assert_fail@plt+0x19d94>
   2b9e8:	ldr	r0, [fp, #8]
   2b9ec:	ldr	r1, [r1, #8]
   2b9f0:	subs	r2, r2, #1
   2b9f4:	mov	sl, #0
   2b9f8:	mov	r3, #0
   2b9fc:	beq	2ba28 <__assert_fail@plt+0x19d7c>
   2ba00:	mov	r3, #0
   2ba04:	mov	r7, #1
   2ba08:	add	r5, r3, r2
   2ba0c:	lsr	r4, r5, #1
   2ba10:	ldr	r6, [r1, r4, lsl #2]
   2ba14:	cmp	r6, r0
   2ba18:	addlt	r3, r7, r5, lsr #1
   2ba1c:	movge	r2, r4
   2ba20:	cmp	r3, r2
   2ba24:	bcc	2ba08 <__assert_fail@plt+0x19d5c>
   2ba28:	ldr	r1, [r1, r3, lsl #2]
   2ba2c:	cmp	r1, r0
   2ba30:	movne	sl, #1
   2ba34:	mov	r0, sl
   2ba38:	sub	sp, fp, #28
   2ba3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba40:	mov	sl, #1
   2ba44:	mov	r0, sl
   2ba48:	sub	sp, fp, #28
   2ba4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba50:	mov	r0, #0
   2ba54:	str	r0, [sp, #52]	; 0x34
   2ba58:	str	r0, [sp, #48]	; 0x30
   2ba5c:	str	r0, [sp, #56]	; 0x38
   2ba60:	str	r0, [fp, #-52]	; 0xffffffcc
   2ba64:	b	2b304 <__assert_fail@plt+0x19658>
   2ba68:	mov	r0, #0
   2ba6c:	str	r0, [sp, #48]	; 0x30
   2ba70:	str	r0, [sp, #52]	; 0x34
   2ba74:	mov	r7, #12
   2ba78:	b	2ba80 <__assert_fail@plt+0x19dd4>
   2ba7c:	mov	r7, r0
   2ba80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2ba84:	bl	1c224 <__assert_fail@plt+0xa578>
   2ba88:	str	r7, [fp, #-52]	; 0xffffffcc
   2ba8c:	ldr	r0, [sp, #56]	; 0x38
   2ba90:	bl	1c224 <__assert_fail@plt+0xa578>
   2ba94:	ldr	sl, [fp, #-52]	; 0xffffffcc
   2ba98:	mov	r0, sl
   2ba9c:	sub	sp, fp, #28
   2baa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2baa4:	mov	r0, #0
   2baa8:	mov	r7, #12
   2baac:	str	r0, [fp, #-48]	; 0xffffffd0
   2bab0:	str	r0, [fp, #-44]	; 0xffffffd4
   2bab4:	b	2ba84 <__assert_fail@plt+0x19dd8>
   2bab8:	mvn	r1, #-2147483648	; 0x80000000
   2babc:	mov	sl, #12
   2bac0:	sub	r1, r1, r4
   2bac4:	cmp	r1, r2
   2bac8:	ble	2ba34 <__assert_fail@plt+0x19d88>
   2bacc:	add	r8, r2, #1
   2bad0:	str	lr, [sp, #40]	; 0x28
   2bad4:	add	r5, r8, r4
   2bad8:	cmn	r5, #-1073741823	; 0xc0000001
   2badc:	bhi	2ba34 <__assert_fail@plt+0x19d88>
   2bae0:	ldr	r0, [ip, #8]
   2bae4:	lsl	r1, r5, #2
   2bae8:	mov	r6, ip
   2baec:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2baf0:	cmp	r0, #0
   2baf4:	beq	2ba34 <__assert_fail@plt+0x19d88>
   2baf8:	str	r5, [r6, #4]
   2bafc:	str	r0, [r6, #8]
   2bb00:	add	r0, r0, r4, lsl #2
   2bb04:	lsl	r2, r8, #2
   2bb08:	mov	r1, #0
   2bb0c:	bl	11b2c <memset@plt>
   2bb10:	ldr	r0, [sp, #44]	; 0x2c
   2bb14:	ldr	r7, [sp, #24]
   2bb18:	ldr	sl, [sp, #20]
   2bb1c:	ldr	lr, [sp, #40]	; 0x28
   2bb20:	mov	ip, r6
   2bb24:	b	2b150 <__assert_fail@plt+0x194a4>
   2bb28:	ldr	r8, [r0, #60]	; 0x3c
   2bb2c:	cmp	r5, r9
   2bb30:	str	ip, [sp, #16]
   2bb34:	beq	2b27c <__assert_fail@plt+0x195d0>
   2bb38:	b	2b1d0 <__assert_fail@plt+0x19524>
   2bb3c:	and	r0, r1, #2
   2bb40:	eor	r8, r0, #10
   2bb44:	cmp	r5, r9
   2bb48:	str	ip, [sp, #16]
   2bb4c:	beq	2b27c <__assert_fail@plt+0x195d0>
   2bb50:	b	2b1d0 <__assert_fail@plt+0x19524>
   2bb54:	mov	sl, r0
   2bb58:	ldr	r0, [sp, #56]	; 0x38
   2bb5c:	bl	1c224 <__assert_fail@plt+0xa578>
   2bb60:	mov	r0, sl
   2bb64:	sub	sp, fp, #28
   2bb68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb6c:	mov	r0, #0
   2bb70:	mov	sl, #12
   2bb74:	str	r0, [sp, #48]	; 0x30
   2bb78:	str	r0, [sp, #52]	; 0x34
   2bb7c:	str	sl, [fp, #-52]	; 0xffffffcc
   2bb80:	mov	r0, sl
   2bb84:	sub	sp, fp, #28
   2bb88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb8c:	mov	r0, r6
   2bb90:	str	lr, [sp, #40]	; 0x28
   2bb94:	mov	r4, ip
   2bb98:	bl	11afc <iswalnum@plt>
   2bb9c:	mov	r8, #1
   2bba0:	cmp	r6, #95	; 0x5f
   2bba4:	beq	2bbbc <__assert_fail@plt+0x19f10>
   2bba8:	ldr	lr, [sp, #40]	; 0x28
   2bbac:	cmp	r0, #0
   2bbb0:	mov	ip, r4
   2bbb4:	beq	2b250 <__assert_fail@plt+0x195a4>
   2bbb8:	b	2b270 <__assert_fail@plt+0x195c4>
   2bbbc:	ldr	lr, [sp, #40]	; 0x28
   2bbc0:	mov	ip, r4
   2bbc4:	cmp	r5, r9
   2bbc8:	str	ip, [sp, #16]
   2bbcc:	beq	2b27c <__assert_fail@plt+0x195d0>
   2bbd0:	b	2b1d0 <__assert_fail@plt+0x19524>
   2bbd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bbd8:	add	fp, sp, #28
   2bbdc:	sub	sp, sp, #20
   2bbe0:	str	r0, [sp, #4]
   2bbe4:	ldr	r0, [r1, #4]
   2bbe8:	mov	sl, r1
   2bbec:	mov	r1, #0
   2bbf0:	mov	r5, r3
   2bbf4:	mov	r8, r2
   2bbf8:	str	r1, [sp, #12]
   2bbfc:	str	r0, [sp, #8]
   2bc00:	lsl	r0, r0, #2
   2bc04:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2bc08:	cmp	r0, #0
   2bc0c:	str	r0, [sp, #16]
   2bc10:	beq	2bd0c <__assert_fail@plt+0x1a060>
   2bc14:	ldr	r0, [sl, #4]
   2bc18:	cmp	r0, #1
   2bc1c:	blt	2bccc <__assert_fail@plt+0x1a020>
   2bc20:	mov	r9, #0
   2bc24:	ldr	r0, [sl, #8]
   2bc28:	ldr	r1, [sp, #4]
   2bc2c:	ldr	r2, [r0, r9, lsl #2]
   2bc30:	ldr	r1, [r1, #24]
   2bc34:	add	r0, r2, r2, lsl #1
   2bc38:	add	r1, r1, r0, lsl #2
   2bc3c:	ldr	r0, [r1, #4]
   2bc40:	cmp	r0, #1
   2bc44:	blt	2bcac <__assert_fail@plt+0x1a000>
   2bc48:	ldr	r7, [sp, #4]
   2bc4c:	ldr	r3, [r1, #8]
   2bc50:	ldr	r7, [r7]
   2bc54:	b	2bc64 <__assert_fail@plt+0x19fb8>
   2bc58:	add	r3, r3, #4
   2bc5c:	subs	r0, r0, #1
   2bc60:	beq	2bcac <__assert_fail@plt+0x1a000>
   2bc64:	ldr	r6, [r3]
   2bc68:	add	r4, r7, r6, lsl #3
   2bc6c:	ldrb	r4, [r4, #4]
   2bc70:	cmp	r4, r5
   2bc74:	bne	2bc58 <__assert_fail@plt+0x19fac>
   2bc78:	ldr	r4, [r7, r6, lsl #3]
   2bc7c:	cmp	r4, r8
   2bc80:	bne	2bc58 <__assert_fail@plt+0x19fac>
   2bc84:	cmn	r6, #1
   2bc88:	beq	2bcac <__assert_fail@plt+0x1a000>
   2bc8c:	ldr	r0, [sp, #4]
   2bc90:	add	r1, sp, #8
   2bc94:	mov	r3, r8
   2bc98:	str	r5, [sp]
   2bc9c:	bl	2c2d0 <__assert_fail@plt+0x1a624>
   2bca0:	cmp	r0, #0
   2bca4:	beq	2bcbc <__assert_fail@plt+0x1a010>
   2bca8:	b	2bcf4 <__assert_fail@plt+0x1a048>
   2bcac:	add	r0, sp, #8
   2bcb0:	bl	28128 <__assert_fail@plt+0x1647c>
   2bcb4:	cmp	r0, #0
   2bcb8:	bne	2bcf4 <__assert_fail@plt+0x1a048>
   2bcbc:	ldr	r0, [sl, #4]
   2bcc0:	add	r9, r9, #1
   2bcc4:	cmp	r9, r0
   2bcc8:	blt	2bc24 <__assert_fail@plt+0x19f78>
   2bccc:	ldr	r0, [sl, #8]
   2bcd0:	bl	1c224 <__assert_fail@plt+0xa578>
   2bcd4:	vldr	d16, [sp, #8]
   2bcd8:	ldr	r0, [sp, #16]
   2bcdc:	mov	r7, #0
   2bce0:	str	r0, [sl, #8]
   2bce4:	vstr	d16, [sl]
   2bce8:	mov	r0, r7
   2bcec:	sub	sp, fp, #28
   2bcf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bcf4:	mov	r7, r0
   2bcf8:	ldr	r0, [sp, #16]
   2bcfc:	bl	1c224 <__assert_fail@plt+0xa578>
   2bd00:	mov	r0, r7
   2bd04:	sub	sp, fp, #28
   2bd08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd0c:	mov	r7, #12
   2bd10:	mov	r0, r7
   2bd14:	sub	sp, fp, #28
   2bd18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd20:	add	fp, sp, #28
   2bd24:	sub	sp, sp, #52	; 0x34
   2bd28:	ldr	ip, [r0, #108]	; 0x6c
   2bd2c:	mov	lr, r1
   2bd30:	ldr	r1, [r0, #84]	; 0x54
   2bd34:	str	r0, [sp, #24]
   2bd38:	mov	sl, r2
   2bd3c:	mov	r8, #0
   2bd40:	mov	r0, #0
   2bd44:	cmp	ip, #1
   2bd48:	str	r1, [sp, #28]
   2bd4c:	blt	2bd90 <__assert_fail@plt+0x1a0e4>
   2bd50:	ldr	r0, [sp, #24]
   2bd54:	mov	r7, #1
   2bd58:	mov	r1, ip
   2bd5c:	ldr	r2, [r0, #116]	; 0x74
   2bd60:	mov	r0, #0
   2bd64:	add	r6, r1, r0
   2bd68:	add	r6, r6, r6, lsr #31
   2bd6c:	asr	r4, r6, #1
   2bd70:	add	r5, r4, r4, lsl #1
   2bd74:	add	r5, r2, r5, lsl #3
   2bd78:	ldr	r5, [r5, #4]
   2bd7c:	cmp	r5, sl
   2bd80:	addlt	r0, r7, r6, asr #1
   2bd84:	movge	r1, r4
   2bd88:	cmp	r0, r1
   2bd8c:	blt	2bd64 <__assert_fail@plt+0x1a0b8>
   2bd90:	cmp	r0, ip
   2bd94:	bge	2c2b4 <__assert_fail@plt+0x1a608>
   2bd98:	cmn	r0, #1
   2bd9c:	beq	2c2b4 <__assert_fail@plt+0x1a608>
   2bda0:	ldr	r1, [sp, #24]
   2bda4:	add	r0, r0, r0, lsl #1
   2bda8:	str	r0, [sp, #8]
   2bdac:	ldr	r1, [r1, #116]	; 0x74
   2bdb0:	add	r0, r1, r0, lsl #3
   2bdb4:	ldr	r0, [r0, #4]
   2bdb8:	cmp	r0, sl
   2bdbc:	bne	2c2b4 <__assert_fail@plt+0x1a608>
   2bdc0:	str	r3, [sp, #12]
   2bdc4:	mov	r9, #1
   2bdc8:	str	lr, [sp, #16]
   2bdcc:	ldr	r0, [sp, #8]
   2bdd0:	add	r0, r1, r0, lsl #3
   2bdd4:	mov	r8, r0
   2bdd8:	ldr	r0, [lr, #4]
   2bddc:	cmp	r0, #1
   2bde0:	bge	2be94 <__assert_fail@plt+0x1a1e8>
   2bde4:	b	2be74 <__assert_fail@plt+0x1a1c8>
   2bde8:	mov	r0, #4
   2bdec:	str	r9, [sp, #36]	; 0x24
   2bdf0:	mov	r4, r1
   2bdf4:	str	r9, [sp, #32]
   2bdf8:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2bdfc:	cmp	r0, #0
   2be00:	str	r0, [sp, #40]	; 0x28
   2be04:	beq	2c128 <__assert_fail@plt+0x1a47c>
   2be08:	str	r4, [r0]
   2be0c:	mov	r0, #0
   2be10:	str	r0, [fp, #-32]	; 0xffffffe0
   2be14:	ldr	r1, [sp, #28]
   2be18:	sub	r0, fp, #32
   2be1c:	add	r2, sp, #32
   2be20:	bl	2c414 <__assert_fail@plt+0x1a768>
   2be24:	ldr	r4, [sp, #24]
   2be28:	ldr	r1, [r4, #100]	; 0x64
   2be2c:	str	r0, [r1, r7, lsl #2]
   2be30:	ldr	r0, [sp, #40]	; 0x28
   2be34:	bl	1c224 <__assert_fail@plt+0xa578>
   2be38:	ldr	r0, [r4, #100]	; 0x64
   2be3c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2be40:	ldr	r0, [r0, r7, lsl #2]
   2be44:	cmp	r1, #0
   2be48:	mov	r2, r1
   2be4c:	movwne	r2, #1
   2be50:	clz	r0, r0
   2be54:	lsr	r0, r0, #5
   2be58:	ands	r0, r0, r2
   2be5c:	ldreq	r1, [sp, #20]
   2be60:	str	r1, [sp, #20]
   2be64:	ldr	lr, [sp, #16]
   2be68:	cmp	r0, #0
   2be6c:	cmpne	r0, #4
   2be70:	bne	2c29c <__assert_fail@plt+0x1a5f0>
   2be74:	ldrb	r1, [r8, #20]
   2be78:	add	r0, r8, #24
   2be7c:	cmp	r1, #0
   2be80:	beq	2c2b0 <__assert_fail@plt+0x1a604>
   2be84:	mov	r8, r0
   2be88:	ldr	r0, [lr, #4]
   2be8c:	cmp	r0, #1
   2be90:	blt	2be74 <__assert_fail@plt+0x1a1c8>
   2be94:	subs	r6, r0, #1
   2be98:	ldr	r2, [r8]
   2be9c:	ldr	r0, [lr, #8]
   2bea0:	mov	r3, #0
   2bea4:	beq	2becc <__assert_fail@plt+0x1a220>
   2bea8:	mov	r1, r6
   2beac:	add	r7, r3, r1
   2beb0:	lsr	r5, r7, #1
   2beb4:	ldr	r4, [r0, r5, lsl #2]
   2beb8:	cmp	r4, r2
   2bebc:	addlt	r3, r9, r7, lsr #1
   2bec0:	movge	r1, r5
   2bec4:	cmp	r3, r1
   2bec8:	bcc	2beac <__assert_fail@plt+0x1a200>
   2becc:	ldr	r1, [r0, r3, lsl #2]
   2bed0:	cmp	r1, r2
   2bed4:	bne	2be74 <__assert_fail@plt+0x1a1c8>
   2bed8:	ldr	r3, [r8, #12]
   2bedc:	ldr	r1, [r8, #8]
   2bee0:	add	r3, r3, sl
   2bee4:	sub	r7, r3, r1
   2bee8:	cmp	r7, sl
   2beec:	bne	2bfe4 <__assert_fail@plt+0x1a338>
   2bef0:	ldr	r1, [sp, #28]
   2bef4:	add	r2, r2, r2, lsl #1
   2bef8:	cmp	r6, #0
   2befc:	ldr	r1, [r1, #20]
   2bf00:	add	r1, r1, r2, lsl #2
   2bf04:	mov	r2, #0
   2bf08:	ldr	r1, [r1, #8]
   2bf0c:	ldr	r4, [r1]
   2bf10:	beq	2bf34 <__assert_fail@plt+0x1a288>
   2bf14:	add	r1, r2, r6
   2bf18:	lsr	r3, r1, #1
   2bf1c:	ldr	r7, [r0, r3, lsl #2]
   2bf20:	cmp	r7, r4
   2bf24:	addlt	r2, r9, r1, lsr #1
   2bf28:	movge	r6, r3
   2bf2c:	cmp	r2, r6
   2bf30:	bcc	2bf14 <__assert_fail@plt+0x1a268>
   2bf34:	ldr	r1, [r0, r2, lsl #2]
   2bf38:	mov	r0, #4
   2bf3c:	cmp	r1, r4
   2bf40:	beq	2be68 <__assert_fail@plt+0x1a1bc>
   2bf44:	mov	r0, #4
   2bf48:	str	r9, [sp, #36]	; 0x24
   2bf4c:	str	r9, [sp, #32]
   2bf50:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2bf54:	cmp	r0, #0
   2bf58:	str	r0, [sp, #40]	; 0x28
   2bf5c:	beq	2c114 <__assert_fail@plt+0x1a468>
   2bf60:	mov	r6, #0
   2bf64:	str	r4, [r0]
   2bf68:	ldr	r0, [sp, #28]
   2bf6c:	ldr	r2, [sp, #12]
   2bf70:	ldr	r3, [fp, #8]
   2bf74:	add	r4, sp, #32
   2bf78:	str	r6, [fp, #-32]	; 0xffffffe0
   2bf7c:	mov	r1, r4
   2bf80:	bl	2bbd4 <__assert_fail@plt+0x19f28>
   2bf84:	ldr	r5, [sp, #16]
   2bf88:	mov	r7, r0
   2bf8c:	mov	r1, r4
   2bf90:	mov	r0, r5
   2bf94:	bl	28128 <__assert_fail@plt+0x1647c>
   2bf98:	mov	r4, r0
   2bf9c:	ldr	r0, [sp, #40]	; 0x28
   2bfa0:	bl	1c224 <__assert_fail@plt+0xa578>
   2bfa4:	orr	r0, r7, r6
   2bfa8:	mov	lr, r5
   2bfac:	orrs	r0, r0, r4
   2bfb0:	mov	r0, #2
   2bfb4:	beq	2be68 <__assert_fail@plt+0x1a1bc>
   2bfb8:	cmp	r7, #0
   2bfbc:	mov	r0, #1
   2bfc0:	movne	r4, r7
   2bfc4:	cmp	r6, #0
   2bfc8:	movne	r4, r6
   2bfcc:	str	r4, [fp, #-32]	; 0xffffffe0
   2bfd0:	str	r4, [sp, #20]
   2bfd4:	cmp	r0, #0
   2bfd8:	cmpne	r0, #4
   2bfdc:	beq	2be74 <__assert_fail@plt+0x1a1c8>
   2bfe0:	b	2c29c <__assert_fail@plt+0x1a5f0>
   2bfe4:	ldr	r0, [sp, #24]
   2bfe8:	ldr	r0, [r0, #100]	; 0x64
   2bfec:	ldr	r5, [r0, r7, lsl #2]
   2bff0:	ldr	r0, [sp, #28]
   2bff4:	ldr	r0, [r0, #12]
   2bff8:	cmp	r5, #0
   2bffc:	ldr	r1, [r0, r2, lsl #2]
   2c000:	beq	2bde8 <__assert_fail@plt+0x1a13c>
   2c004:	ldr	ip, [r5, #8]
   2c008:	cmp	ip, #0
   2c00c:	ble	2c0cc <__assert_fail@plt+0x1a420>
   2c010:	ldr	r0, [r5, #12]
   2c014:	subs	r3, ip, #1
   2c018:	mov	r2, #0
   2c01c:	str	r7, [sp, #4]
   2c020:	beq	2c044 <__assert_fail@plt+0x1a398>
   2c024:	add	r6, r2, r3
   2c028:	lsr	r7, r6, #1
   2c02c:	ldr	r4, [r0, r7, lsl #2]
   2c030:	cmp	r4, r1
   2c034:	addlt	r2, r9, r6, lsr #1
   2c038:	movge	r3, r7
   2c03c:	cmp	r2, r3
   2c040:	bcc	2c024 <__assert_fail@plt+0x1a378>
   2c044:	ldr	r2, [r0, r2, lsl #2]
   2c048:	mov	r0, #4
   2c04c:	cmp	r2, r1
   2c050:	beq	2be68 <__assert_fail@plt+0x1a1bc>
   2c054:	ldr	r7, [sp, #4]
   2c058:	mov	r4, r1
   2c05c:	cmp	ip, #1
   2c060:	str	ip, [sp, #36]	; 0x24
   2c064:	blt	2c0d4 <__assert_fail@plt+0x1a428>
   2c068:	lsl	r0, ip, #2
   2c06c:	str	ip, [sp, #32]
   2c070:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2c074:	cmp	r0, #0
   2c078:	str	r0, [sp, #40]	; 0x28
   2c07c:	beq	2c17c <__assert_fail@plt+0x1a4d0>
   2c080:	ldr	r2, [r5, #8]
   2c084:	ldr	r1, [r5, #12]
   2c088:	mov	r5, r0
   2c08c:	lsl	r2, r2, #2
   2c090:	bl	118ec <memcpy@plt>
   2c094:	ldr	r1, [sp, #32]
   2c098:	mov	r6, #0
   2c09c:	str	r6, [fp, #-32]	; 0xffffffe0
   2c0a0:	cmp	r1, #0
   2c0a4:	beq	2c0e8 <__assert_fail@plt+0x1a43c>
   2c0a8:	ldr	r0, [sp, #36]	; 0x24
   2c0ac:	cmp	r0, #0
   2c0b0:	bne	2c190 <__assert_fail@plt+0x1a4e4>
   2c0b4:	str	r4, [r5]
   2c0b8:	str	r9, [sp, #36]	; 0x24
   2c0bc:	mov	r6, #0
   2c0c0:	cmp	r6, #0
   2c0c4:	beq	2be14 <__assert_fail@plt+0x1a168>
   2c0c8:	b	2c154 <__assert_fail@plt+0x1a4a8>
   2c0cc:	mov	r4, r1
   2c0d0:	str	ip, [sp, #36]	; 0x24
   2c0d4:	mov	r6, #0
   2c0d8:	str	r6, [sp, #36]	; 0x24
   2c0dc:	str	r6, [sp, #32]
   2c0e0:	str	r6, [sp, #40]	; 0x28
   2c0e4:	str	r6, [fp, #-32]	; 0xffffffe0
   2c0e8:	mov	r0, #4
   2c0ec:	str	r9, [sp, #36]	; 0x24
   2c0f0:	str	r9, [sp, #32]
   2c0f4:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2c0f8:	cmp	r0, #0
   2c0fc:	str	r0, [sp, #40]	; 0x28
   2c100:	beq	2c148 <__assert_fail@plt+0x1a49c>
   2c104:	str	r4, [r0]
   2c108:	cmp	r6, #0
   2c10c:	beq	2be14 <__assert_fail@plt+0x1a168>
   2c110:	b	2c154 <__assert_fail@plt+0x1a4a8>
   2c114:	mov	r0, #0
   2c118:	mov	r6, #12
   2c11c:	str	r0, [sp, #32]
   2c120:	str	r0, [sp, #36]	; 0x24
   2c124:	b	2bf68 <__assert_fail@plt+0x1a2bc>
   2c128:	mov	r0, #0
   2c12c:	mov	r1, #12
   2c130:	str	r0, [sp, #32]
   2c134:	str	r0, [sp, #36]	; 0x24
   2c138:	mov	r0, #12
   2c13c:	str	r1, [fp, #-32]	; 0xffffffe0
   2c140:	str	r0, [sp, #20]
   2c144:	b	2c174 <__assert_fail@plt+0x1a4c8>
   2c148:	mov	r0, #0
   2c14c:	str	r0, [sp, #32]
   2c150:	str	r0, [sp, #36]	; 0x24
   2c154:	clz	r0, r6
   2c158:	lsr	r4, r0, #5
   2c15c:	ldr	r0, [sp, #40]	; 0x28
   2c160:	bl	1c224 <__assert_fail@plt+0xa578>
   2c164:	cmp	r4, #0
   2c168:	movwne	r6, #12
   2c16c:	str	r6, [sp, #20]
   2c170:	str	r6, [fp, #-32]	; 0xffffffe0
   2c174:	mov	r0, #1
   2c178:	b	2be64 <__assert_fail@plt+0x1a1b8>
   2c17c:	mov	r0, #0
   2c180:	mov	r6, #12
   2c184:	str	r0, [sp, #32]
   2c188:	str	r0, [sp, #36]	; 0x24
   2c18c:	b	2c0e4 <__assert_fail@plt+0x1a438>
   2c190:	cmp	r1, r0
   2c194:	bne	2c1c0 <__assert_fail@plt+0x1a514>
   2c198:	lsl	r0, r1, #1
   2c19c:	lsl	r1, r1, #3
   2c1a0:	str	r0, [sp, #32]
   2c1a4:	mov	r0, r5
   2c1a8:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2c1ac:	cmp	r0, #0
   2c1b0:	beq	2c294 <__assert_fail@plt+0x1a5e8>
   2c1b4:	str	r0, [sp, #40]	; 0x28
   2c1b8:	mov	r5, r0
   2c1bc:	ldr	r0, [sp, #36]	; 0x24
   2c1c0:	ldr	r1, [r5]
   2c1c4:	cmp	r1, r4
   2c1c8:	ble	2c23c <__assert_fail@plt+0x1a590>
   2c1cc:	cmp	r0, #1
   2c1d0:	blt	2c270 <__assert_fail@plt+0x1a5c4>
   2c1d4:	ands	r2, r0, #3
   2c1d8:	sub	r1, r0, #1
   2c1dc:	beq	2c200 <__assert_fail@plt+0x1a554>
   2c1e0:	add	r6, r5, r0, lsl #2
   2c1e4:	mov	r3, r6
   2c1e8:	ldr	r7, [r3, #-4]!
   2c1ec:	subs	r2, r2, #1
   2c1f0:	sub	r0, r0, #1
   2c1f4:	str	r7, [r6]
   2c1f8:	mov	r6, r3
   2c1fc:	bne	2c1e8 <__assert_fail@plt+0x1a53c>
   2c200:	cmp	r1, #3
   2c204:	bcc	2c234 <__assert_fail@plt+0x1a588>
   2c208:	add	r1, r5, r0, lsl #2
   2c20c:	sub	r1, r1, #8
   2c210:	ldr	r6, [r1, #4]
   2c214:	ldmda	r1, {r2, r3, r7}
   2c218:	sub	ip, r1, #4
   2c21c:	sub	r0, r0, #4
   2c220:	cmp	r0, #0
   2c224:	stm	ip, {r2, r3, r7}
   2c228:	str	r6, [r1, #8]
   2c22c:	sub	r1, r1, #16
   2c230:	bgt	2c210 <__assert_fail@plt+0x1a564>
   2c234:	mov	r0, #0
   2c238:	b	2c270 <__assert_fail@plt+0x1a5c4>
   2c23c:	add	r1, r5, r0, lsl #2
   2c240:	ldr	r2, [r1, #-4]
   2c244:	cmp	r2, r4
   2c248:	ble	2c270 <__assert_fail@plt+0x1a5c4>
   2c24c:	sub	r0, r0, #2
   2c250:	mov	r3, r4
   2c254:	str	r2, [r1]
   2c258:	sub	r0, r0, #1
   2c25c:	ldr	r2, [r1, #-8]
   2c260:	sub	r1, r1, #4
   2c264:	cmp	r2, r3
   2c268:	bgt	2c254 <__assert_fail@plt+0x1a5a8>
   2c26c:	add	r0, r0, #2
   2c270:	str	r4, [r5, r0, lsl #2]
   2c274:	ldr	r7, [sp, #4]
   2c278:	mov	r6, #0
   2c27c:	ldr	r0, [sp, #36]	; 0x24
   2c280:	add	r0, r0, #1
   2c284:	str	r0, [sp, #36]	; 0x24
   2c288:	cmp	r6, #0
   2c28c:	beq	2be14 <__assert_fail@plt+0x1a168>
   2c290:	b	2c154 <__assert_fail@plt+0x1a4a8>
   2c294:	mov	r6, #0
   2c298:	b	2c154 <__assert_fail@plt+0x1a4a8>
   2c29c:	cmp	r0, #2
   2c2a0:	bne	2c2c0 <__assert_fail@plt+0x1a614>
   2c2a4:	ldr	r0, [sp, #24]
   2c2a8:	ldr	r1, [r0, #116]	; 0x74
   2c2ac:	b	2bdcc <__assert_fail@plt+0x1a120>
   2c2b0:	mov	r8, #0
   2c2b4:	mov	r0, r8
   2c2b8:	sub	sp, fp, #28
   2c2bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2c0:	ldr	r8, [sp, #20]
   2c2c4:	mov	r0, r8
   2c2c8:	sub	sp, fp, #28
   2c2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2d4:	add	fp, sp, #28
   2c2d8:	sub	sp, sp, #4
   2c2dc:	ldr	r4, [fp, #8]
   2c2e0:	mov	r9, r3
   2c2e4:	mov	r7, r2
   2c2e8:	mov	r8, r1
   2c2ec:	mov	sl, r0
   2c2f0:	mov	r5, #1
   2c2f4:	ldr	r0, [r8, #4]
   2c2f8:	cmp	r0, #1
   2c2fc:	bge	2c324 <__assert_fail@plt+0x1a678>
   2c300:	b	2c368 <__assert_fail@plt+0x1a6bc>
   2c304:	cmp	r2, #0
   2c308:	beq	2c3fc <__assert_fail@plt+0x1a750>
   2c30c:	add	r0, r0, r7, lsl #2
   2c310:	ldr	r0, [r0, #8]
   2c314:	ldr	r7, [r0]
   2c318:	ldr	r0, [r8, #4]
   2c31c:	cmp	r0, #1
   2c320:	blt	2c368 <__assert_fail@plt+0x1a6bc>
   2c324:	subs	r2, r0, #1
   2c328:	ldr	r0, [r8, #8]
   2c32c:	mov	ip, r4
   2c330:	mov	r1, #0
   2c334:	beq	2c358 <__assert_fail@plt+0x1a6ac>
   2c338:	add	r3, r1, r2
   2c33c:	lsr	r6, r3, #1
   2c340:	ldr	r4, [r0, r6, lsl #2]
   2c344:	cmp	r4, r7
   2c348:	addlt	r1, r5, r3, lsr #1
   2c34c:	movge	r2, r6
   2c350:	cmp	r1, r2
   2c354:	bcc	2c338 <__assert_fail@plt+0x1a68c>
   2c358:	ldr	r0, [r0, r1, lsl #2]
   2c35c:	mov	r4, ip
   2c360:	cmp	r0, r7
   2c364:	beq	2c3fc <__assert_fail@plt+0x1a750>
   2c368:	ldr	r0, [sl]
   2c36c:	add	r1, r0, r7, lsl #3
   2c370:	ldrb	r1, [r1, #4]
   2c374:	cmp	r1, r4
   2c378:	bne	2c388 <__assert_fail@plt+0x1a6dc>
   2c37c:	ldr	r0, [r0, r7, lsl #3]
   2c380:	cmp	r0, r9
   2c384:	beq	2c3e0 <__assert_fail@plt+0x1a734>
   2c388:	mov	r0, r8
   2c38c:	mov	r1, r7
   2c390:	bl	282c8 <__assert_fail@plt+0x1661c>
   2c394:	cmp	r0, #0
   2c398:	beq	2c408 <__assert_fail@plt+0x1a75c>
   2c39c:	ldr	r0, [sl, #20]
   2c3a0:	add	r7, r7, r7, lsl #1
   2c3a4:	add	r1, r0, r7, lsl #2
   2c3a8:	ldr	r2, [r1, #4]
   2c3ac:	cmp	r2, #2
   2c3b0:	bne	2c304 <__assert_fail@plt+0x1a658>
   2c3b4:	ldr	r0, [r1, #8]
   2c3b8:	mov	r1, r8
   2c3bc:	mov	r3, r9
   2c3c0:	ldr	r2, [r0, #4]
   2c3c4:	mov	r0, sl
   2c3c8:	str	r4, [sp]
   2c3cc:	bl	2c2d0 <__assert_fail@plt+0x1a624>
   2c3d0:	cmp	r0, #0
   2c3d4:	bne	2c400 <__assert_fail@plt+0x1a754>
   2c3d8:	ldr	r0, [sl, #20]
   2c3dc:	b	2c30c <__assert_fail@plt+0x1a660>
   2c3e0:	cmp	r4, #9
   2c3e4:	bne	2c3fc <__assert_fail@plt+0x1a750>
   2c3e8:	mov	r0, r8
   2c3ec:	mov	r1, r7
   2c3f0:	bl	282c8 <__assert_fail@plt+0x1661c>
   2c3f4:	cmp	r0, #0
   2c3f8:	beq	2c408 <__assert_fail@plt+0x1a75c>
   2c3fc:	mov	r0, #0
   2c400:	sub	sp, fp, #28
   2c404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c408:	mov	r0, #12
   2c40c:	sub	sp, fp, #28
   2c410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c418:	add	fp, sp, #28
   2c41c:	sub	sp, sp, #4
   2c420:	ldr	r9, [r2, #4]
   2c424:	cmp	r9, #0
   2c428:	beq	2c6f4 <__assert_fail@plt+0x1aa48>
   2c42c:	mov	r6, r2
   2c430:	mov	r8, r1
   2c434:	cmp	r9, #1
   2c438:	mov	r7, r9
   2c43c:	blt	2c528 <__assert_fail@plt+0x1a87c>
   2c440:	ldr	ip, [r6, #8]
   2c444:	mov	sl, #0
   2c448:	cmp	r9, #4
   2c44c:	mov	r7, r9
   2c450:	bcc	2c510 <__assert_fail@plt+0x1a864>
   2c454:	mov	r3, #0
   2c458:	bic	sl, r9, #3
   2c45c:	mov	r1, #1
   2c460:	str	r8, [sp]
   2c464:	vdup.32	q8, r3
   2c468:	sub	r4, sl, #4
   2c46c:	add	r1, r1, r4, lsr #2
   2c470:	cmp	r4, #12
   2c474:	and	lr, r1, #3
   2c478:	vmov.32	d16[0], r9
   2c47c:	bcc	2c4d0 <__assert_fail@plt+0x1a824>
   2c480:	sub	r5, r1, lr
   2c484:	mov	r3, #0
   2c488:	mov	r4, #64	; 0x40
   2c48c:	mov	r7, ip
   2c490:	mov	r1, ip
   2c494:	vld1.32	{d18-d19}, [r1], r4
   2c498:	add	r8, r7, #16
   2c49c:	add	r2, r7, #32
   2c4a0:	subs	r5, r5, #4
   2c4a4:	add	r3, r3, #16
   2c4a8:	vld1.32	{d20-d21}, [r8]
   2c4ac:	vadd.i32	q8, q9, q8
   2c4b0:	vld1.32	{d18-d19}, [r2]
   2c4b4:	add	r2, r7, #48	; 0x30
   2c4b8:	mov	r7, r1
   2c4bc:	vadd.i32	q8, q10, q8
   2c4c0:	vld1.32	{d20-d21}, [r2]
   2c4c4:	vadd.i32	q8, q9, q8
   2c4c8:	vadd.i32	q8, q10, q8
   2c4cc:	bne	2c494 <__assert_fail@plt+0x1a7e8>
   2c4d0:	cmp	lr, #0
   2c4d4:	beq	2c4f0 <__assert_fail@plt+0x1a844>
   2c4d8:	add	r1, ip, r3, lsl #2
   2c4dc:	rsb	r3, lr, #0
   2c4e0:	vld1.32	{d18-d19}, [r1]!
   2c4e4:	adds	r3, r3, #1
   2c4e8:	vadd.i32	q8, q9, q8
   2c4ec:	bcc	2c4e0 <__assert_fail@plt+0x1a834>
   2c4f0:	vext.8	q9, q8, q8, #8
   2c4f4:	ldr	r8, [sp]
   2c4f8:	cmp	r9, sl
   2c4fc:	vadd.i32	q8, q8, q9
   2c500:	vdup.32	q9, d16[1]
   2c504:	vadd.i32	q8, q8, q9
   2c508:	vmov.32	r7, d16[0]
   2c50c:	beq	2c528 <__assert_fail@plt+0x1a87c>
   2c510:	add	r1, ip, sl, lsl #2
   2c514:	sub	r2, r9, sl
   2c518:	ldr	r3, [r1], #4
   2c51c:	subs	r2, r2, #1
   2c520:	add	r7, r3, r7
   2c524:	bne	2c518 <__assert_fail@plt+0x1a86c>
   2c528:	ldr	r1, [r8, #68]	; 0x44
   2c52c:	ldr	r2, [r8, #32]
   2c530:	str	r0, [sp]
   2c534:	and	r1, r1, r7
   2c538:	add	r3, r1, r1, lsl #1
   2c53c:	ldr	r1, [r2, r3, lsl #2]
   2c540:	cmp	r1, #1
   2c544:	blt	2c5c8 <__assert_fail@plt+0x1a91c>
   2c548:	cmp	r6, #0
   2c54c:	beq	2c5c8 <__assert_fail@plt+0x1a91c>
   2c550:	add	r2, r2, r3, lsl #2
   2c554:	sub	ip, r9, #1
   2c558:	mov	r5, #0
   2c55c:	ldr	lr, [r2, #8]
   2c560:	ldr	r4, [lr, r5, lsl #2]
   2c564:	ldr	r3, [r4]
   2c568:	cmp	r7, r3
   2c56c:	beq	2c58c <__assert_fail@plt+0x1a8e0>
   2c570:	add	r5, r5, #1
   2c574:	cmp	r5, r1
   2c578:	bge	2c5c8 <__assert_fail@plt+0x1a91c>
   2c57c:	ldr	r4, [lr, r5, lsl #2]
   2c580:	ldr	r3, [r4]
   2c584:	cmp	r7, r3
   2c588:	bne	2c570 <__assert_fail@plt+0x1a8c4>
   2c58c:	ldr	r3, [r4, #8]
   2c590:	cmp	r3, r9
   2c594:	bne	2c570 <__assert_fail@plt+0x1a8c4>
   2c598:	mov	r3, ip
   2c59c:	add	r0, r3, #1
   2c5a0:	cmp	r0, #1
   2c5a4:	blt	2c6e8 <__assert_fail@plt+0x1aa3c>
   2c5a8:	ldr	r0, [r6, #8]
   2c5ac:	ldr	r2, [r4, #12]
   2c5b0:	ldr	r0, [r0, r3, lsl #2]
   2c5b4:	ldr	r2, [r2, r3, lsl #2]
   2c5b8:	sub	r3, r3, #1
   2c5bc:	cmp	r2, r0
   2c5c0:	beq	2c59c <__assert_fail@plt+0x1a8f0>
   2c5c4:	b	2c570 <__assert_fail@plt+0x1a8c4>
   2c5c8:	mov	r0, #56	; 0x38
   2c5cc:	mov	r1, #1
   2c5d0:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   2c5d4:	cmp	r0, #0
   2c5d8:	beq	2c728 <__assert_fail@plt+0x1aa7c>
   2c5dc:	mov	r4, r0
   2c5e0:	ldr	r0, [r6, #4]
   2c5e4:	add	sl, r4, #4
   2c5e8:	cmp	r0, #1
   2c5ec:	str	r0, [r4, #8]
   2c5f0:	blt	2c6b8 <__assert_fail@plt+0x1aa0c>
   2c5f4:	str	r0, [r4, #4]
   2c5f8:	lsl	r0, r0, #2
   2c5fc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2c600:	cmp	r0, #0
   2c604:	str	r0, [r4, #12]
   2c608:	beq	2c714 <__assert_fail@plt+0x1aa68>
   2c60c:	ldmib	r6, {r5, r6}
   2c610:	mov	r1, r6
   2c614:	mov	r9, r8
   2c618:	lsl	r2, r5, #2
   2c61c:	bl	118ec <memcpy@plt>
   2c620:	cmp	r5, #1
   2c624:	str	sl, [r4, #40]	; 0x28
   2c628:	blt	2c6d0 <__assert_fail@plt+0x1aa24>
   2c62c:	movw	ip, #65280	; 0xff00
   2c630:	ldr	sl, [r9]
   2c634:	mov	lr, #32
   2c638:	movt	ip, #3
   2c63c:	add	r8, ip, #255	; 0xff
   2c640:	b	2c664 <__assert_fail@plt+0x1a9b8>
   2c644:	ldr	r0, [r1]
   2c648:	tst	r0, ip
   2c64c:	beq	2c658 <__assert_fail@plt+0x1a9ac>
   2c650:	orr	r0, r3, #128	; 0x80
   2c654:	strb	r0, [r4, #52]	; 0x34
   2c658:	add	r6, r6, #4
   2c65c:	subs	r5, r5, #1
   2c660:	beq	2c6d0 <__assert_fail@plt+0x1aa24>
   2c664:	ldr	r0, [r6]
   2c668:	add	r1, sl, r0, lsl #3
   2c66c:	ldr	r0, [r1, #4]!
   2c670:	and	r3, r0, r8
   2c674:	cmp	r3, #1
   2c678:	beq	2c658 <__assert_fail@plt+0x1a9ac>
   2c67c:	ldrb	r2, [r4, #52]	; 0x34
   2c680:	and	r3, lr, r0, lsr #15
   2c684:	uxtb	r0, r0
   2c688:	cmp	r0, #12
   2c68c:	orr	r3, r2, r3
   2c690:	strb	r3, [r4, #52]	; 0x34
   2c694:	beq	2c650 <__assert_fail@plt+0x1a9a4>
   2c698:	cmp	r0, #4
   2c69c:	beq	2c6b0 <__assert_fail@plt+0x1aa04>
   2c6a0:	cmp	r0, #2
   2c6a4:	bne	2c644 <__assert_fail@plt+0x1a998>
   2c6a8:	orr	r0, r3, #16
   2c6ac:	b	2c654 <__assert_fail@plt+0x1a9a8>
   2c6b0:	orr	r0, r3, #64	; 0x40
   2c6b4:	b	2c654 <__assert_fail@plt+0x1a9a8>
   2c6b8:	mov	r0, #0
   2c6bc:	mov	r9, r8
   2c6c0:	str	r0, [sl]
   2c6c4:	str	r0, [sl, #4]
   2c6c8:	str	r0, [sl, #8]
   2c6cc:	str	sl, [r4, #40]	; 0x28
   2c6d0:	mov	r0, r9
   2c6d4:	mov	r1, r4
   2c6d8:	mov	r2, r7
   2c6dc:	bl	28ea8 <__assert_fail@plt+0x171fc>
   2c6e0:	cmp	r0, #0
   2c6e4:	bne	2c708 <__assert_fail@plt+0x1aa5c>
   2c6e8:	mov	r0, r4
   2c6ec:	sub	sp, fp, #28
   2c6f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6f4:	mov	r4, #0
   2c6f8:	str	r4, [r0]
   2c6fc:	mov	r0, r4
   2c700:	sub	sp, fp, #28
   2c704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c708:	mov	r0, r4
   2c70c:	bl	21ea0 <__assert_fail@plt+0x101f4>
   2c710:	b	2c728 <__assert_fail@plt+0x1aa7c>
   2c714:	mov	r0, #0
   2c718:	str	r0, [r4, #4]
   2c71c:	str	r0, [r4, #8]
   2c720:	mov	r0, r4
   2c724:	bl	1c224 <__assert_fail@plt+0xa578>
   2c728:	ldr	r1, [sp]
   2c72c:	mov	r0, #12
   2c730:	mov	r4, #0
   2c734:	str	r0, [r1]
   2c738:	mov	r0, r4
   2c73c:	sub	sp, fp, #28
   2c740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c744:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2c748:	add	fp, sp, #24
   2c74c:	ldr	lr, [r0]
   2c750:	add	r7, lr, r1, lsl #3
   2c754:	ldrb	r9, [r7, #4]
   2c758:	cmp	r9, #7
   2c75c:	beq	2c95c <__assert_fail@plt+0x1acb0>
   2c760:	ldr	ip, [r2, #80]	; 0x50
   2c764:	mov	r6, #1
   2c768:	cmp	ip, #1
   2c76c:	beq	2c7ac <__assert_fail@plt+0x1ab00>
   2c770:	ldr	r5, [r2, #28]
   2c774:	add	r7, r3, #1
   2c778:	cmp	r7, r5
   2c77c:	bge	2c7ac <__assert_fail@plt+0x1ab00>
   2c780:	ldr	r6, [r2, #8]
   2c784:	sub	r5, r5, r3
   2c788:	add	r7, r6, r3, lsl #2
   2c78c:	mov	r6, #1
   2c790:	ldr	r4, [r7, r6, lsl #2]
   2c794:	cmn	r4, #1
   2c798:	bne	2c7ac <__assert_fail@plt+0x1ab00>
   2c79c:	add	r6, r6, #1
   2c7a0:	cmp	r5, r6
   2c7a4:	bne	2c790 <__assert_fail@plt+0x1aae4>
   2c7a8:	mov	r6, r5
   2c7ac:	mov	r8, #0
   2c7b0:	cmp	r9, #5
   2c7b4:	bne	2c7fc <__assert_fail@plt+0x1ab50>
   2c7b8:	cmp	r6, #2
   2c7bc:	blt	2c92c <__assert_fail@plt+0x1ac80>
   2c7c0:	ldr	r0, [r0, #128]	; 0x80
   2c7c4:	tst	r0, #64	; 0x40
   2c7c8:	bne	2c7dc <__assert_fail@plt+0x1ab30>
   2c7cc:	ldr	r1, [r2, #4]
   2c7d0:	ldrb	r1, [r1, r3]
   2c7d4:	cmp	r1, #10
   2c7d8:	beq	2c92c <__assert_fail@plt+0x1ac80>
   2c7dc:	tst	r0, #128	; 0x80
   2c7e0:	beq	2c928 <__assert_fail@plt+0x1ac7c>
   2c7e4:	ldr	r0, [r2, #4]
   2c7e8:	ldrb	r0, [r0, r3]
   2c7ec:	cmp	r0, #0
   2c7f0:	movne	r8, r6
   2c7f4:	mov	r0, r8
   2c7f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c7fc:	cmp	r9, #6
   2c800:	bne	2c92c <__assert_fail@plt+0x1ac80>
   2c804:	cmp	r6, #2
   2c808:	blt	2c92c <__assert_fail@plt+0x1ac80>
   2c80c:	ldr	r7, [lr, r1, lsl #3]
   2c810:	ldr	r0, [r7, #32]
   2c814:	cmp	r0, #0
   2c818:	bne	2c834 <__assert_fail@plt+0x1ab88>
   2c81c:	ldr	r1, [r7, #36]	; 0x24
   2c820:	cmp	r1, #0
   2c824:	bne	2c834 <__assert_fail@plt+0x1ab88>
   2c828:	ldr	r1, [r7, #20]
   2c82c:	cmp	r1, #0
   2c830:	beq	2c948 <__assert_fail@plt+0x1ac9c>
   2c834:	cmp	ip, #1
   2c838:	bne	2c854 <__assert_fail@plt+0x1aba8>
   2c83c:	ldr	r1, [r2, #4]
   2c840:	ldrb	r5, [r1, r3]
   2c844:	ldr	r1, [r7, #20]
   2c848:	cmp	r1, #1
   2c84c:	bge	2c868 <__assert_fail@plt+0x1abbc>
   2c850:	b	2c888 <__assert_fail@plt+0x1abdc>
   2c854:	ldr	r1, [r2, #8]
   2c858:	ldr	r5, [r1, r3, lsl #2]
   2c85c:	ldr	r1, [r7, #20]
   2c860:	cmp	r1, #1
   2c864:	blt	2c888 <__assert_fail@plt+0x1abdc>
   2c868:	ldr	r2, [r7]
   2c86c:	mov	r3, #0
   2c870:	ldr	r4, [r2, r3, lsl #2]
   2c874:	cmp	r5, r4
   2c878:	beq	2c908 <__assert_fail@plt+0x1ac5c>
   2c87c:	add	r3, r3, #1
   2c880:	cmp	r3, r1
   2c884:	blt	2c870 <__assert_fail@plt+0x1abc4>
   2c888:	ldr	r1, [r7, #36]	; 0x24
   2c88c:	cmp	r1, #1
   2c890:	blt	2c8c4 <__assert_fail@plt+0x1ac18>
   2c894:	mov	r4, #0
   2c898:	ldr	r0, [r7, #12]
   2c89c:	ldr	r1, [r0, r4, lsl #2]
   2c8a0:	mov	r0, r5
   2c8a4:	bl	11850 <iswctype@plt>
   2c8a8:	cmp	r0, #0
   2c8ac:	bne	2c908 <__assert_fail@plt+0x1ac5c>
   2c8b0:	ldr	r0, [r7, #36]	; 0x24
   2c8b4:	add	r4, r4, #1
   2c8b8:	cmp	r4, r0
   2c8bc:	blt	2c898 <__assert_fail@plt+0x1abec>
   2c8c0:	ldr	r0, [r7, #32]
   2c8c4:	cmp	r0, #1
   2c8c8:	blt	2c934 <__assert_fail@plt+0x1ac88>
   2c8cc:	ldr	r1, [r7, #4]
   2c8d0:	mov	r2, #0
   2c8d4:	ldr	r3, [r1, r2, lsl #2]
   2c8d8:	cmp	r3, r5
   2c8dc:	bls	2c8f8 <__assert_fail@plt+0x1ac4c>
   2c8e0:	add	r2, r2, #1
   2c8e4:	cmp	r2, r0
   2c8e8:	bge	2c934 <__assert_fail@plt+0x1ac88>
   2c8ec:	ldr	r3, [r1, r2, lsl #2]
   2c8f0:	cmp	r3, r5
   2c8f4:	bhi	2c8e0 <__assert_fail@plt+0x1ac34>
   2c8f8:	ldr	r3, [r7, #8]
   2c8fc:	ldr	r3, [r3, r2, lsl #2]
   2c900:	cmp	r5, r3
   2c904:	bhi	2c8e0 <__assert_fail@plt+0x1ac34>
   2c908:	mov	r0, r6
   2c90c:	ldrb	r1, [r7, #16]
   2c910:	tst	r1, #1
   2c914:	beq	2c944 <__assert_fail@plt+0x1ac98>
   2c918:	cmp	r0, #0
   2c91c:	bgt	2c92c <__assert_fail@plt+0x1ac80>
   2c920:	cmp	r6, #1
   2c924:	movle	r6, #1
   2c928:	mov	r8, r6
   2c92c:	mov	r0, r8
   2c930:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c934:	mov	r0, #0
   2c938:	ldrb	r1, [r7, #16]
   2c93c:	tst	r1, #1
   2c940:	bne	2c918 <__assert_fail@plt+0x1ac6c>
   2c944:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c948:	mov	r5, #0
   2c94c:	ldr	r1, [r7, #20]
   2c950:	cmp	r1, #1
   2c954:	bge	2c868 <__assert_fail@plt+0x1abbc>
   2c958:	b	2c888 <__assert_fail@plt+0x1abdc>
   2c95c:	ldr	r0, [r2, #4]
   2c960:	mov	r8, #0
   2c964:	ldrb	r6, [r0, r3]
   2c968:	cmp	r6, #194	; 0xc2
   2c96c:	bcc	2c92c <__assert_fail@plt+0x1ac80>
   2c970:	ldr	r2, [r2, #48]	; 0x30
   2c974:	add	r1, r3, #2
   2c978:	cmp	r1, r2
   2c97c:	bgt	2c92c <__assert_fail@plt+0x1ac80>
   2c980:	add	r1, r3, r0
   2c984:	cmp	r6, #223	; 0xdf
   2c988:	ldrb	r7, [r1, #1]
   2c98c:	bhi	2c9b4 <__assert_fail@plt+0x1ad08>
   2c990:	cmp	r7, #192	; 0xc0
   2c994:	mov	r0, #0
   2c998:	movwcc	r0, #1
   2c99c:	lsl	r8, r0, #1
   2c9a0:	sxtb	r0, r7
   2c9a4:	cmn	r0, #1
   2c9a8:	movwgt	r8, #0
   2c9ac:	mov	r0, r8
   2c9b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c9b4:	cmp	r6, #239	; 0xef
   2c9b8:	bhi	2c9d4 <__assert_fail@plt+0x1ad28>
   2c9bc:	mov	r0, #3
   2c9c0:	cmp	r6, #224	; 0xe0
   2c9c4:	bne	2ca30 <__assert_fail@plt+0x1ad84>
   2c9c8:	cmp	r7, #160	; 0xa0
   2c9cc:	bcc	2c92c <__assert_fail@plt+0x1ac80>
   2c9d0:	b	2ca30 <__assert_fail@plt+0x1ad84>
   2c9d4:	cmp	r6, #247	; 0xf7
   2c9d8:	bhi	2c9f4 <__assert_fail@plt+0x1ad48>
   2c9dc:	mov	r0, #4
   2c9e0:	cmp	r6, #240	; 0xf0
   2c9e4:	bne	2ca30 <__assert_fail@plt+0x1ad84>
   2c9e8:	cmp	r7, #144	; 0x90
   2c9ec:	bcc	2c92c <__assert_fail@plt+0x1ac80>
   2c9f0:	b	2ca30 <__assert_fail@plt+0x1ad84>
   2c9f4:	cmp	r6, #251	; 0xfb
   2c9f8:	bhi	2ca14 <__assert_fail@plt+0x1ad68>
   2c9fc:	mov	r0, #5
   2ca00:	cmp	r6, #248	; 0xf8
   2ca04:	bne	2ca30 <__assert_fail@plt+0x1ad84>
   2ca08:	cmp	r7, #136	; 0x88
   2ca0c:	bcc	2c92c <__assert_fail@plt+0x1ac80>
   2ca10:	b	2ca30 <__assert_fail@plt+0x1ad84>
   2ca14:	cmp	r6, #253	; 0xfd
   2ca18:	bhi	2c92c <__assert_fail@plt+0x1ac80>
   2ca1c:	mov	r0, #6
   2ca20:	cmp	r6, #252	; 0xfc
   2ca24:	bne	2ca30 <__assert_fail@plt+0x1ad84>
   2ca28:	cmp	r7, #132	; 0x84
   2ca2c:	bcc	2c92c <__assert_fail@plt+0x1ac80>
   2ca30:	add	r3, r0, r3
   2ca34:	cmp	r3, r2
   2ca38:	bgt	2c92c <__assert_fail@plt+0x1ac80>
   2ca3c:	ldrb	r2, [r1, #1]
   2ca40:	sxtb	r3, r2
   2ca44:	cmn	r3, #1
   2ca48:	bgt	2c92c <__assert_fail@plt+0x1ac80>
   2ca4c:	cmp	r2, #191	; 0xbf
   2ca50:	bhi	2c92c <__assert_fail@plt+0x1ac80>
   2ca54:	ldrb	r2, [r1, #2]
   2ca58:	sxtb	r3, r2
   2ca5c:	cmn	r3, #1
   2ca60:	bgt	2c92c <__assert_fail@plt+0x1ac80>
   2ca64:	cmp	r2, #191	; 0xbf
   2ca68:	bhi	2c92c <__assert_fail@plt+0x1ac80>
   2ca6c:	cmp	r0, #3
   2ca70:	beq	2c944 <__assert_fail@plt+0x1ac98>
   2ca74:	ldrb	r2, [r1, #3]
   2ca78:	sxtb	r3, r2
   2ca7c:	cmn	r3, #1
   2ca80:	bgt	2c92c <__assert_fail@plt+0x1ac80>
   2ca84:	cmp	r2, #191	; 0xbf
   2ca88:	bhi	2c92c <__assert_fail@plt+0x1ac80>
   2ca8c:	cmp	r0, #4
   2ca90:	beq	2c944 <__assert_fail@plt+0x1ac98>
   2ca94:	ldrb	r2, [r1, #4]
   2ca98:	sxtb	r3, r2
   2ca9c:	cmn	r3, #1
   2caa0:	bgt	2c92c <__assert_fail@plt+0x1ac80>
   2caa4:	cmp	r2, #191	; 0xbf
   2caa8:	bhi	2c92c <__assert_fail@plt+0x1ac80>
   2caac:	cmp	r0, #5
   2cab0:	beq	2c944 <__assert_fail@plt+0x1ac98>
   2cab4:	ldrsb	r1, [r1, #5]
   2cab8:	uxtb	r2, r1
   2cabc:	cmp	r2, #191	; 0xbf
   2cac0:	movwhi	r0, #0
   2cac4:	cmn	r1, #1
   2cac8:	movwgt	r0, #0
   2cacc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2cad0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2cad4:	add	fp, sp, #24
   2cad8:	ldr	r4, [r1, #4]
   2cadc:	mov	r6, r0
   2cae0:	mvn	r0, #0
   2cae4:	mov	r8, #0
   2cae8:	uxtab	r3, r0, r4
   2caec:	cmp	r3, #6
   2caf0:	bhi	2cc9c <__assert_fail@plt+0x1aff0>
   2caf4:	ldr	r0, [r6, #4]
   2caf8:	mov	r9, r1
   2cafc:	ldrb	r1, [r0, r2]
   2cb00:	add	r7, pc, #4
   2cb04:	sxtb	r0, r1
   2cb08:	ldr	pc, [r7, r3, lsl #2]
   2cb0c:	andeq	ip, r2, r8, lsr #22
   2cb10:	muleq	r2, ip, ip
   2cb14:	andeq	ip, r2, ip, lsr fp
   2cb18:	muleq	r2, ip, ip
   2cb1c:	andeq	ip, r2, r4, ror #22
   2cb20:	muleq	r2, ip, ip
   2cb24:	andeq	ip, r2, ip, asr fp
   2cb28:	ldrb	r3, [r9]
   2cb2c:	uxtb	r7, r0
   2cb30:	cmp	r3, r7
   2cb34:	beq	2cb84 <__assert_fail@plt+0x1aed8>
   2cb38:	b	2cc9c <__assert_fail@plt+0x1aff0>
   2cb3c:	ldr	r3, [r9]
   2cb40:	ubfx	r7, r1, #5, #3
   2cb44:	mov	r5, #1
   2cb48:	ldr	r3, [r3, r7, lsl #2]
   2cb4c:	and	r7, r1, #31
   2cb50:	tst	r3, r5, lsl r7
   2cb54:	bne	2cb84 <__assert_fail@plt+0x1aed8>
   2cb58:	b	2cc9c <__assert_fail@plt+0x1aff0>
   2cb5c:	cmp	r0, #0
   2cb60:	bmi	2cc9c <__assert_fail@plt+0x1aff0>
   2cb64:	cmp	r1, #0
   2cb68:	beq	2cc2c <__assert_fail@plt+0x1af80>
   2cb6c:	cmp	r1, #10
   2cb70:	bne	2cb84 <__assert_fail@plt+0x1aed8>
   2cb74:	ldr	r3, [r6, #84]	; 0x54
   2cb78:	ldrb	r3, [r3, #128]	; 0x80
   2cb7c:	tst	r3, #64	; 0x40
   2cb80:	beq	2cc9c <__assert_fail@plt+0x1aff0>
   2cb84:	movw	r3, #65280	; 0xff00
   2cb88:	movt	r3, #3
   2cb8c:	tst	r4, r3
   2cb90:	beq	2cbf0 <__assert_fail@plt+0x1af44>
   2cb94:	cmn	r2, #1
   2cb98:	ble	2cbd0 <__assert_fail@plt+0x1af24>
   2cb9c:	ldr	r3, [r6, #48]	; 0x30
   2cba0:	cmp	r3, r2
   2cba4:	beq	2ccbc <__assert_fail@plt+0x1b010>
   2cba8:	ldr	r3, [r6, #80]	; 0x50
   2cbac:	cmp	r3, #2
   2cbb0:	blt	2cbfc <__assert_fail@plt+0x1af50>
   2cbb4:	ldr	r0, [r6, #8]
   2cbb8:	ldr	r7, [r0, r2, lsl #2]
   2cbbc:	cmn	r7, #1
   2cbc0:	bne	2cc40 <__assert_fail@plt+0x1af94>
   2cbc4:	sub	r2, r2, #1
   2cbc8:	cmn	r2, #1
   2cbcc:	bne	2cbb8 <__assert_fail@plt+0x1af0c>
   2cbd0:	ldr	r1, [r6, #60]	; 0x3c
   2cbd4:	and	r0, r1, #1
   2cbd8:	tst	r4, #1024	; 0x400
   2cbdc:	eor	r2, r0, #1
   2cbe0:	beq	2cc78 <__assert_fail@plt+0x1afcc>
   2cbe4:	cmp	r0, #0
   2cbe8:	beq	2cc9c <__assert_fail@plt+0x1aff0>
   2cbec:	b	2cc78 <__assert_fail@plt+0x1afcc>
   2cbf0:	mov	r8, #1
   2cbf4:	mov	r0, r8
   2cbf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2cbfc:	ldr	r2, [r6, #68]	; 0x44
   2cc00:	ubfx	r3, r1, #5, #3
   2cc04:	and	r7, r1, #31
   2cc08:	mov	r1, #1
   2cc0c:	ldr	r3, [r2, r3, lsl #2]
   2cc10:	mov	r2, #0
   2cc14:	tst	r3, r1, lsl r7
   2cc18:	bne	2cc78 <__assert_fail@plt+0x1afcc>
   2cc1c:	mov	r1, #0
   2cc20:	cmp	r0, #10
   2cc24:	beq	2cc58 <__assert_fail@plt+0x1afac>
   2cc28:	b	2cc68 <__assert_fail@plt+0x1afbc>
   2cc2c:	ldr	r3, [r6, #84]	; 0x54
   2cc30:	ldrb	r3, [r3, #128]	; 0x80
   2cc34:	tst	r3, #128	; 0x80
   2cc38:	bne	2cc9c <__assert_fail@plt+0x1aff0>
   2cc3c:	b	2cb84 <__assert_fail@plt+0x1aed8>
   2cc40:	ldrb	r0, [r6, #78]	; 0x4e
   2cc44:	cmp	r0, #0
   2cc48:	bne	2ccdc <__assert_fail@plt+0x1b030>
   2cc4c:	mov	r1, #0
   2cc50:	cmp	r7, #10
   2cc54:	bne	2cc68 <__assert_fail@plt+0x1afbc>
   2cc58:	ldrb	r0, [r6, #77]	; 0x4d
   2cc5c:	cmp	r0, #0
   2cc60:	movwne	r0, #1
   2cc64:	lsl	r1, r0, #1
   2cc68:	and	r0, r1, #1
   2cc6c:	tst	r4, #1024	; 0x400
   2cc70:	eor	r2, r0, #1
   2cc74:	bne	2cbe4 <__assert_fail@plt+0x1af38>
   2cc78:	ldr	r0, [r9, #4]
   2cc7c:	cmp	r2, #0
   2cc80:	bne	2cc8c <__assert_fail@plt+0x1afe0>
   2cc84:	ands	r2, r0, #2048	; 0x800
   2cc88:	bne	2cc9c <__assert_fail@plt+0x1aff0>
   2cc8c:	tst	r1, #2
   2cc90:	bne	2cca4 <__assert_fail@plt+0x1aff8>
   2cc94:	ands	r2, r0, #8192	; 0x2000
   2cc98:	beq	2cca4 <__assert_fail@plt+0x1aff8>
   2cc9c:	mov	r0, r8
   2cca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2cca4:	uxth	r0, r0
   2cca8:	mov	r2, #1
   2ccac:	and	r1, r1, #8
   2ccb0:	eor	r0, r2, r0, lsr #15
   2ccb4:	orr	r0, r0, r1, lsr #3
   2ccb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ccbc:	ldr	r0, [r6, #88]	; 0x58
   2ccc0:	and	r0, r0, #2
   2ccc4:	eor	r1, r0, #10
   2ccc8:	and	r0, r1, #1
   2cccc:	tst	r4, #1024	; 0x400
   2ccd0:	eor	r2, r0, #1
   2ccd4:	bne	2cbe4 <__assert_fail@plt+0x1af38>
   2ccd8:	b	2cc78 <__assert_fail@plt+0x1afcc>
   2ccdc:	mov	r0, r7
   2cce0:	bl	11afc <iswalnum@plt>
   2cce4:	mov	r1, #1
   2cce8:	mov	r2, #0
   2ccec:	cmp	r7, #95	; 0x5f
   2ccf0:	beq	2cc78 <__assert_fail@plt+0x1afcc>
   2ccf4:	cmp	r0, #0
   2ccf8:	beq	2cc4c <__assert_fail@plt+0x1afa0>
   2ccfc:	b	2cc78 <__assert_fail@plt+0x1afcc>
   2cd00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd04:	add	fp, sp, #28
   2cd08:	sub	sp, sp, #4
   2cd0c:	vpush	{d8-d9}
   2cd10:	sub	sp, sp, #2272	; 0x8e0
   2cd14:	sub	sp, sp, #12288	; 0x3000
   2cd18:	sub	lr, fp, #1024	; 0x400
   2cd1c:	vmov.i32	q4, #0	; 0x00000000
   2cd20:	mov	r8, r0
   2cd24:	mov	r0, #0
   2cd28:	str	r1, [sp, #104]	; 0x68
   2cd2c:	sub	r3, lr, #56	; 0x38
   2cd30:	str	r0, [r1, #44]	; 0x2c
   2cd34:	str	r0, [r1, #48]	; 0x30
   2cd38:	mov	r0, r3
   2cd3c:	vst1.64	{d8-d9}, [r0]!
   2cd40:	vst1.64	{d8-d9}, [r0]
   2cd44:	ldr	r0, [r1, #8]
   2cd48:	cmp	r0, #0
   2cd4c:	ble	2e4a4 <__assert_fail@plt+0x1c7f8>
   2cd50:	add	r0, sp, #168	; 0xa8
   2cd54:	add	r2, r8, #96	; 0x60
   2cd58:	mov	r1, #0
   2cd5c:	str	r8, [sp, #96]	; 0x60
   2cd60:	add	r0, r0, #28
   2cd64:	str	r2, [sp]
   2cd68:	str	r0, [sp, #12]
   2cd6c:	add	r0, r2, #16
   2cd70:	str	r0, [sp, #4]
   2cd74:	add	r0, r3, #16
   2cd78:	str	r0, [sp, #8]
   2cd7c:	mov	r0, #0
   2cd80:	str	r0, [sp, #164]	; 0xa4
   2cd84:	b	2cdb4 <__assert_fail@plt+0x1b108>
   2cd88:	sub	lr, fp, #1024	; 0x400
   2cd8c:	sub	r0, lr, #56	; 0x38
   2cd90:	vst1.64	{d8-d9}, [r0]!
   2cd94:	vst1.64	{d8-d9}, [r0]
   2cd98:	ldr	r8, [sp, #96]	; 0x60
   2cd9c:	ldr	r1, [sp, #100]	; 0x64
   2cda0:	ldr	r0, [sp, #104]	; 0x68
   2cda4:	add	r1, r1, #1
   2cda8:	ldr	r0, [r0, #8]
   2cdac:	cmp	r1, r0
   2cdb0:	bge	2db18 <__assert_fail@plt+0x1be6c>
   2cdb4:	ldr	r0, [sp, #104]	; 0x68
   2cdb8:	ldr	r9, [r8]
   2cdbc:	str	r1, [sp, #100]	; 0x64
   2cdc0:	ldr	r0, [r0, #12]
   2cdc4:	ldr	ip, [r0, r1, lsl #2]
   2cdc8:	add	r0, r9, ip, lsl #3
   2cdcc:	ldr	r0, [r0, #4]
   2cdd0:	uxtb	r6, r0
   2cdd4:	cmp	r6, #1
   2cdd8:	bne	2cecc <__assert_fail@plt+0x1b220>
   2cddc:	ldrb	r1, [r9, ip, lsl #3]
   2cde0:	sub	lr, fp, #1024	; 0x400
   2cde4:	mov	r5, #1
   2cde8:	sub	r3, lr, #56	; 0x38
   2cdec:	add	lr, sp, #168	; 0xa8
   2cdf0:	mov	r7, r3
   2cdf4:	ubfx	r2, r1, #5, #3
   2cdf8:	and	r1, r1, #31
   2cdfc:	ldr	r3, [r3, r2, lsl #2]
   2ce00:	orr	r1, r3, r5, lsl r1
   2ce04:	str	r1, [r7, r2, lsl #2]
   2ce08:	movw	r1, #65280	; 0xff00
   2ce0c:	ldr	r7, [sp, #12]
   2ce10:	movt	r1, #3
   2ce14:	ands	r1, r0, r1
   2ce18:	beq	2d218 <__assert_fail@plt+0x1b56c>
   2ce1c:	tst	r0, #8192	; 0x2000
   2ce20:	beq	2ce4c <__assert_fail@plt+0x1b1a0>
   2ce24:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   2ce28:	sub	r2, fp, #1024	; 0x400
   2ce2c:	sub	r2, r2, #56	; 0x38
   2ce30:	vst1.64	{d8-d9}, [r2]!
   2ce34:	vst1.64	{d8-d9}, [r2]
   2ce38:	tst	r1, #1024	; 0x400
   2ce3c:	beq	2cd98 <__assert_fail@plt+0x1b0ec>
   2ce40:	ldr	r7, [sp, #12]
   2ce44:	mov	r1, #1024	; 0x400
   2ce48:	str	r1, [fp, #-1080]	; 0xfffffbc8
   2ce4c:	tst	r0, #32768	; 0x8000
   2ce50:	bne	2cd88 <__assert_fail@plt+0x1b0dc>
   2ce54:	tst	r0, #1024	; 0x400
   2ce58:	bne	2cfbc <__assert_fail@plt+0x1b310>
   2ce5c:	tst	r0, #2048	; 0x800
   2ce60:	beq	2d218 <__assert_fail@plt+0x1b56c>
   2ce64:	tst	r0, #4194304	; 0x400000
   2ce68:	beq	2ce74 <__assert_fail@plt+0x1b1c8>
   2ce6c:	cmp	r6, #1
   2ce70:	beq	2cd88 <__assert_fail@plt+0x1b0dc>
   2ce74:	ldr	r1, [sp, #96]	; 0x60
   2ce78:	ldr	r0, [r1, #92]	; 0x5c
   2ce7c:	cmp	r0, #1
   2ce80:	ble	2d1a0 <__assert_fail@plt+0x1b4f4>
   2ce84:	ldr	r0, [r1, #60]	; 0x3c
   2ce88:	ldr	r1, [sp]
   2ce8c:	vld1.32	{d16-d17}, [r1]
   2ce90:	vld1.32	{d18-d19}, [r0]!
   2ce94:	sub	r1, fp, #1024	; 0x400
   2ce98:	sub	r1, r1, #56	; 0x38
   2ce9c:	vld1.64	{d20-d21}, [r1]
   2cea0:	vand	q8, q9, q8
   2cea4:	vbic	q9, q10, q8
   2cea8:	vst1.64	{d18-d19}, [r1]
   2ceac:	ldr	r1, [sp, #4]
   2ceb0:	vld1.32	{d20-d21}, [r0]
   2ceb4:	ldr	r0, [sp, #8]
   2ceb8:	vld1.32	{d16-d17}, [r1]
   2cebc:	vld1.32	{d22-d23}, [r0]
   2cec0:	vand	q8, q10, q8
   2cec4:	vbic	q8, q11, q8
   2cec8:	b	2d1d0 <__assert_fail@plt+0x1b524>
   2cecc:	cmp	r6, #7
   2ced0:	add	lr, sp, #168	; 0xa8
   2ced4:	beq	2cf1c <__assert_fail@plt+0x1b270>
   2ced8:	cmp	r6, #5
   2cedc:	beq	2cf6c <__assert_fail@plt+0x1b2c0>
   2cee0:	cmp	r6, #3
   2cee4:	bne	2cfb4 <__assert_fail@plt+0x1b308>
   2cee8:	ldr	r1, [r9, ip, lsl #3]
   2ceec:	sub	r2, fp, #1024	; 0x400
   2cef0:	sub	r2, r2, #56	; 0x38
   2cef4:	vld1.64	{d16-d17}, [r2]
   2cef8:	vld1.32	{d18-d19}, [r1]!
   2cefc:	vorr	q8, q8, q9
   2cf00:	vst1.64	{d16-d17}, [r2]
   2cf04:	vld1.32	{d16-d17}, [r1]
   2cf08:	ldr	r1, [sp, #8]
   2cf0c:	vld1.32	{d18-d19}, [r1]
   2cf10:	vorr	q8, q9, q8
   2cf14:	vst1.32	{d16-d17}, [r1]
   2cf18:	b	2ce08 <__assert_fail@plt+0x1b15c>
   2cf1c:	mvn	r1, #0
   2cf20:	str	r1, [fp, #-1068]	; 0xfffffbd4
   2cf24:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2cf28:	str	r1, [fp, #-1076]	; 0xfffffbcc
   2cf2c:	str	r1, [fp, #-1080]	; 0xfffffbc8
   2cf30:	ldr	r1, [sp, #96]	; 0x60
   2cf34:	ldr	r2, [r1, #128]	; 0x80
   2cf38:	and	r1, r2, #128	; 0x80
   2cf3c:	ands	r2, r2, #64	; 0x40
   2cf40:	beq	2cf4c <__assert_fail@plt+0x1b2a0>
   2cf44:	cmp	r1, #0
   2cf48:	beq	2ce08 <__assert_fail@plt+0x1b15c>
   2cf4c:	cmp	r2, #0
   2cf50:	mvn	r2, #1
   2cf54:	movweq	r2, #64510	; 0xfbfe
   2cf58:	movteq	r2, #65535	; 0xffff
   2cf5c:	cmp	r1, #0
   2cf60:	mvneq	r2, #1024	; 0x400
   2cf64:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2cf68:	b	2ce08 <__assert_fail@plt+0x1b15c>
   2cf6c:	ldr	r3, [sp, #96]	; 0x60
   2cf70:	ldr	r1, [r3, #92]	; 0x5c
   2cf74:	cmp	r1, #2
   2cf78:	blt	2d074 <__assert_fail@plt+0x1b3c8>
   2cf7c:	ldr	r1, [r3, #60]	; 0x3c
   2cf80:	sub	r2, fp, #1024	; 0x400
   2cf84:	sub	r2, r2, #56	; 0x38
   2cf88:	vld1.64	{d16-d17}, [r2]
   2cf8c:	vld1.32	{d18-d19}, [r1]!
   2cf90:	vorr	q8, q8, q9
   2cf94:	vst1.64	{d16-d17}, [r2]
   2cf98:	vld1.32	{d18-d19}, [r1]
   2cf9c:	ldr	r1, [sp, #8]
   2cfa0:	vld1.32	{d20-d21}, [r1]
   2cfa4:	vorr	q9, q10, q9
   2cfa8:	vst1.32	{d18-d19}, [r1]
   2cfac:	vmov.32	r1, d16[0]
   2cfb0:	b	2d098 <__assert_fail@plt+0x1b3ec>
   2cfb4:	ldr	r8, [sp, #96]	; 0x60
   2cfb8:	b	2cda0 <__assert_fail@plt+0x1b0f4>
   2cfbc:	movw	r1, #255	; 0xff
   2cfc0:	movt	r1, #64	; 0x40
   2cfc4:	and	r1, r0, r1
   2cfc8:	cmp	r1, #1
   2cfcc:	beq	2cd88 <__assert_fail@plt+0x1b0dc>
   2cfd0:	ldr	r7, [sp, #96]	; 0x60
   2cfd4:	ldr	r1, [r7, #92]	; 0x5c
   2cfd8:	cmp	r1, #1
   2cfdc:	ble	2d0c4 <__assert_fail@plt+0x1b418>
   2cfe0:	ldr	r1, [r7, #60]	; 0x3c
   2cfe4:	ldr	r2, [sp]
   2cfe8:	vld1.32	{d16-d17}, [r2]
   2cfec:	vld1.32	{d18-d19}, [r1]!
   2cff0:	sub	r2, fp, #1024	; 0x400
   2cff4:	sub	r2, r2, #56	; 0x38
   2cff8:	vld1.64	{d20-d21}, [r2]
   2cffc:	vorn	q8, q8, q9
   2d000:	vand	q8, q10, q8
   2d004:	vst1.64	{d16-d17}, [r2]
   2d008:	vmov.32	r2, d16[1]
   2d00c:	vld1.32	{d18-d19}, [r1]
   2d010:	ldr	r1, [sp, #4]
   2d014:	vld1.32	{d20-d21}, [r1]
   2d018:	ldr	r1, [sp, #8]
   2d01c:	vld1.32	{d22-d23}, [r1]
   2d020:	vorn	q9, q10, q9
   2d024:	vand	q9, q11, q9
   2d028:	vst1.32	{d18-d19}, [r1]
   2d02c:	vmov.32	r1, d16[0]
   2d030:	orr	r1, r2, r1
   2d034:	vmov.32	r2, d17[0]
   2d038:	orr	r1, r1, r2
   2d03c:	vmov.32	r2, d17[1]
   2d040:	orr	r1, r1, r2
   2d044:	vmov.32	r2, d18[0]
   2d048:	orr	r1, r1, r2
   2d04c:	vmov.32	r2, d18[1]
   2d050:	orr	r1, r1, r2
   2d054:	vmov.32	r2, d19[0]
   2d058:	orr	r1, r1, r2
   2d05c:	vmov.32	r2, d19[1]
   2d060:	orr	r1, r1, r2
   2d064:	ldr	r7, [sp, #12]
   2d068:	cmp	r1, #0
   2d06c:	bne	2ce5c <__assert_fail@plt+0x1b1b0>
   2d070:	b	2cd98 <__assert_fail@plt+0x1b0ec>
   2d074:	mvn	r1, #0
   2d078:	str	r1, [fp, #-1052]	; 0xfffffbe4
   2d07c:	str	r1, [fp, #-1056]	; 0xfffffbe0
   2d080:	str	r1, [fp, #-1060]	; 0xfffffbdc
   2d084:	str	r1, [fp, #-1064]	; 0xfffffbd8
   2d088:	str	r1, [fp, #-1068]	; 0xfffffbd4
   2d08c:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2d090:	str	r1, [fp, #-1076]	; 0xfffffbcc
   2d094:	str	r1, [fp, #-1080]	; 0xfffffbc8
   2d098:	ldr	r2, [r3, #128]	; 0x80
   2d09c:	ands	r3, r2, #64	; 0x40
   2d0a0:	and	r2, r2, #128	; 0x80
   2d0a4:	biceq	r1, r1, #1024	; 0x400
   2d0a8:	beq	2d0b4 <__assert_fail@plt+0x1b408>
   2d0ac:	cmp	r2, #0
   2d0b0:	beq	2ce08 <__assert_fail@plt+0x1b15c>
   2d0b4:	cmp	r2, #0
   2d0b8:	bicne	r1, r1, #1
   2d0bc:	str	r1, [fp, #-1080]	; 0xfffffbc8
   2d0c0:	b	2ce08 <__assert_fail@plt+0x1b15c>
   2d0c4:	ldr	r1, [r7, #112]	; 0x70
   2d0c8:	add	sl, r7, #96	; 0x60
   2d0cc:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2d0d0:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2d0d4:	ldm	sl, {r2, r3, r8, sl}
   2d0d8:	str	ip, [sp, #28]
   2d0dc:	str	r9, [sp, #24]
   2d0e0:	ldr	r9, [sp, #24]
   2d0e4:	str	r1, [sp, #148]	; 0x94
   2d0e8:	ldr	r1, [r7, #116]	; 0x74
   2d0ec:	and	ip, r5, r3
   2d0f0:	and	lr, r4, r2
   2d0f4:	ldr	r2, [sp, #148]	; 0x94
   2d0f8:	str	r1, [sp, #152]	; 0x98
   2d0fc:	ldr	r1, [r7, #120]	; 0x78
   2d100:	str	r1, [sp, #156]	; 0x9c
   2d104:	ldr	r1, [r7, #124]	; 0x7c
   2d108:	ldr	r7, [fp, #-1072]	; 0xfffffbd0
   2d10c:	ldr	r3, [sp, #156]	; 0x9c
   2d110:	str	r1, [sp, #160]	; 0xa0
   2d114:	ldr	r1, [fp, #-1068]	; 0xfffffbd4
   2d118:	and	r8, r7, r8
   2d11c:	str	lr, [fp, #-1080]	; 0xfffffbc8
   2d120:	str	ip, [fp, #-1076]	; 0xfffffbcc
   2d124:	str	r8, [fp, #-1072]	; 0xfffffbd0
   2d128:	ldr	r7, [sp, #160]	; 0xa0
   2d12c:	and	r1, r1, sl
   2d130:	add	sl, sp, #168	; 0xa8
   2d134:	str	r1, [fp, #-1068]	; 0xfffffbd4
   2d138:	ldr	r5, [fp, #-1064]	; 0xfffffbd8
   2d13c:	and	r5, r5, r2
   2d140:	ldr	r2, [sp, #152]	; 0x98
   2d144:	str	r5, [fp, #-1064]	; 0xfffffbd8
   2d148:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2d14c:	and	r4, r4, r2
   2d150:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2d154:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   2d158:	and	r2, r2, r3
   2d15c:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2d160:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
   2d164:	and	r3, r3, r7
   2d168:	orr	r7, ip, lr
   2d16c:	ldr	ip, [sp, #28]
   2d170:	mov	lr, sl
   2d174:	orr	r7, r7, r8
   2d178:	str	r3, [fp, #-1052]	; 0xfffffbe4
   2d17c:	orr	r1, r7, r1
   2d180:	orr	r1, r1, r5
   2d184:	orr	r1, r1, r4
   2d188:	orr	r1, r1, r2
   2d18c:	orr	r1, r1, r3
   2d190:	ldr	r7, [sp, #12]
   2d194:	cmp	r1, #0
   2d198:	bne	2ce5c <__assert_fail@plt+0x1b1b0>
   2d19c:	b	2cd98 <__assert_fail@plt+0x1b0ec>
   2d1a0:	ldr	r0, [sp]
   2d1a4:	vld1.32	{d16-d17}, [r0]
   2d1a8:	sub	r0, fp, #1024	; 0x400
   2d1ac:	sub	r0, r0, #56	; 0x38
   2d1b0:	vld1.64	{d18-d19}, [r0]
   2d1b4:	vbic	q9, q9, q8
   2d1b8:	vst1.64	{d18-d19}, [r0]
   2d1bc:	ldr	r0, [sp, #4]
   2d1c0:	vld1.32	{d16-d17}, [r0]
   2d1c4:	ldr	r0, [sp, #8]
   2d1c8:	vld1.32	{d20-d21}, [r0]
   2d1cc:	vbic	q8, q10, q8
   2d1d0:	vst1.32	{d16-d17}, [r0]
   2d1d4:	vmov.32	r0, d18[0]
   2d1d8:	vmov.32	r1, d18[1]
   2d1dc:	ldr	r7, [sp, #12]
   2d1e0:	orr	r0, r1, r0
   2d1e4:	vmov.32	r1, d19[0]
   2d1e8:	orr	r0, r0, r1
   2d1ec:	vmov.32	r1, d19[1]
   2d1f0:	orr	r0, r0, r1
   2d1f4:	vmov.32	r1, d16[0]
   2d1f8:	orr	r0, r0, r1
   2d1fc:	vmov.32	r1, d16[1]
   2d200:	orr	r0, r0, r1
   2d204:	vmov.32	r1, d17[0]
   2d208:	orr	r0, r0, r1
   2d20c:	vmov.32	r1, d17[1]
   2d210:	orrs	r0, r0, r1
   2d214:	beq	2cd98 <__assert_fail@plt+0x1b0ec>
   2d218:	ldr	r0, [sp, #164]	; 0xa4
   2d21c:	cmp	r0, #1
   2d220:	blt	2d68c <__assert_fail@plt+0x1b9e0>
   2d224:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   2d228:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
   2d22c:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   2d230:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   2d234:	cmp	r6, #1
   2d238:	mov	r4, #0
   2d23c:	str	r0, [sp, #140]	; 0x8c
   2d240:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2d244:	str	r1, [sp, #120]	; 0x78
   2d248:	str	r2, [sp, #144]	; 0x90
   2d24c:	str	r3, [sp, #152]	; 0x98
   2d250:	str	r0, [sp, #160]	; 0xa0
   2d254:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   2d258:	str	r0, [sp, #156]	; 0x9c
   2d25c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   2d260:	str	r0, [sp, #132]	; 0x84
   2d264:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   2d268:	str	r0, [sp, #148]	; 0x94
   2d26c:	bne	2d6a8 <__assert_fail@plt+0x1b9fc>
   2d270:	ldr	r3, [sp, #148]	; 0x94
   2d274:	sub	r0, fp, #6144	; 0x1800
   2d278:	str	r7, [sp, #128]	; 0x80
   2d27c:	str	ip, [sp, #28]
   2d280:	str	r9, [sp, #24]
   2d284:	sub	r6, r0, #104	; 0x68
   2d288:	str	r6, [sp, #124]	; 0x7c
   2d28c:	b	2d2c0 <__assert_fail@plt+0x1b614>
   2d290:	mov	r8, ip
   2d294:	ldr	r0, [sp, #128]	; 0x80
   2d298:	add	r4, r4, #1
   2d29c:	mov	ip, r8
   2d2a0:	add	r0, r0, #32
   2d2a4:	str	r0, [sp, #128]	; 0x80
   2d2a8:	ldr	r0, [sp, #124]	; 0x7c
   2d2ac:	add	r0, r0, #12
   2d2b0:	str	r0, [sp, #124]	; 0x7c
   2d2b4:	ldr	r0, [sp, #164]	; 0xa4
   2d2b8:	cmp	r4, r0
   2d2bc:	bge	2d654 <__assert_fail@plt+0x1b9a8>
   2d2c0:	ldrb	r0, [r9, ip, lsl #3]
   2d2c4:	mov	r2, #1
   2d2c8:	ubfx	r1, r0, #5, #3
   2d2cc:	and	r0, r0, #31
   2d2d0:	add	r1, lr, r1, lsl #2
   2d2d4:	ldr	r1, [r1, r4, lsl #5]
   2d2d8:	tst	r1, r2, lsl r0
   2d2dc:	beq	2d290 <__assert_fail@plt+0x1b5e4>
   2d2e0:	add	r9, lr, r4, lsl #5
   2d2e4:	ldr	r2, [sp, #132]	; 0x84
   2d2e8:	str	r4, [sp, #136]	; 0x88
   2d2ec:	ldr	r4, [sp, #120]	; 0x78
   2d2f0:	ldr	sl, [sp, #156]	; 0x9c
   2d2f4:	str	r3, [sp, #148]	; 0x94
   2d2f8:	ldr	ip, [sp, #152]	; 0x98
   2d2fc:	ldr	r0, [r9, #8]
   2d300:	ldr	r6, [r9, #4]
   2d304:	ldr	r7, [r9, #12]
   2d308:	ldr	r5, [r9, #16]
   2d30c:	and	r1, r0, r2
   2d310:	str	r0, [sp, #88]	; 0x58
   2d314:	ldr	r0, [sp, #128]	; 0x80
   2d318:	str	r6, [sp, #108]	; 0x6c
   2d31c:	and	r6, r6, sl
   2d320:	str	r7, [sp, #112]	; 0x70
   2d324:	str	r5, [sp, #92]	; 0x5c
   2d328:	str	r1, [sp, #84]	; 0x54
   2d32c:	str	r6, [sp, #76]	; 0x4c
   2d330:	ldr	lr, [r0, #-28]	; 0xffffffe4
   2d334:	ldr	r8, [r0]
   2d338:	and	r0, lr, r4
   2d33c:	str	r8, [sp, #116]	; 0x74
   2d340:	str	r0, [sp, #80]	; 0x50
   2d344:	orr	r0, r6, r0
   2d348:	orr	r0, r0, r1
   2d34c:	and	r1, r7, r3
   2d350:	ldr	r7, [sp, #160]	; 0xa0
   2d354:	ldr	r3, [sp, #140]	; 0x8c
   2d358:	str	r1, [sp, #72]	; 0x48
   2d35c:	orr	r0, r0, r1
   2d360:	and	r1, r5, r7
   2d364:	str	r1, [sp, #68]	; 0x44
   2d368:	orr	r0, r0, r1
   2d36c:	ldr	r1, [r9, #20]
   2d370:	and	r6, r1, r3
   2d374:	ldr	r3, [r9, #24]
   2d378:	str	r6, [sp, #64]	; 0x40
   2d37c:	orr	r0, r0, r6
   2d380:	ldr	r6, [sp, #144]	; 0x90
   2d384:	and	r5, r3, ip
   2d388:	orr	r0, r0, r5
   2d38c:	and	r6, r8, r6
   2d390:	orrs	r0, r0, r6
   2d394:	beq	2d540 <__assert_fail@plt+0x1b894>
   2d398:	bic	r0, r4, lr
   2d39c:	ldr	ip, [sp, #88]	; 0x58
   2d3a0:	str	r5, [sp, #20]
   2d3a4:	ldr	r5, [sp, #148]	; 0x94
   2d3a8:	str	r6, [sp, #16]
   2d3ac:	ldr	r6, [sp, #92]	; 0x5c
   2d3b0:	ldr	r8, [sp, #140]	; 0x8c
   2d3b4:	bic	lr, lr, r4
   2d3b8:	ldr	r4, [sp, #148]	; 0x94
   2d3bc:	str	r0, [sp, #60]	; 0x3c
   2d3c0:	ldr	r0, [sp, #108]	; 0x6c
   2d3c4:	bic	r0, sl, r0
   2d3c8:	str	r0, [sp, #56]	; 0x38
   2d3cc:	bic	r0, r2, ip
   2d3d0:	bic	r2, ip, r2
   2d3d4:	str	r0, [sp, #52]	; 0x34
   2d3d8:	ldr	r0, [sp, #112]	; 0x70
   2d3dc:	str	r2, [sp, #156]	; 0x9c
   2d3e0:	bic	r0, r5, r0
   2d3e4:	ldr	r5, [sp, #144]	; 0x90
   2d3e8:	str	r0, [sp, #48]	; 0x30
   2d3ec:	bic	r0, r7, r6
   2d3f0:	str	r0, [sp, #44]	; 0x2c
   2d3f4:	bic	r0, r8, r1
   2d3f8:	bic	r1, r1, r8
   2d3fc:	str	r0, [sp, #40]	; 0x28
   2d400:	ldr	r0, [sp, #152]	; 0x98
   2d404:	bic	r0, r0, r3
   2d408:	str	r0, [sp, #36]	; 0x24
   2d40c:	ldr	r0, [sp, #116]	; 0x74
   2d410:	bic	r0, r5, r0
   2d414:	str	r0, [sp, #32]
   2d418:	ldr	r0, [sp, #108]	; 0x6c
   2d41c:	bic	sl, r0, sl
   2d420:	orr	r0, sl, lr
   2d424:	orr	r0, r0, r2
   2d428:	ldr	r2, [sp, #112]	; 0x70
   2d42c:	bic	ip, r2, r4
   2d430:	ldr	r4, [sp, #152]	; 0x98
   2d434:	bic	r2, r6, r7
   2d438:	orr	r0, r0, ip
   2d43c:	orr	r0, r0, r2
   2d440:	orr	r0, r0, r1
   2d444:	bic	r3, r3, r4
   2d448:	orr	r4, r0, r3
   2d44c:	ldr	r0, [sp, #116]	; 0x74
   2d450:	bic	r0, r0, r5
   2d454:	orrs	r4, r4, r0
   2d458:	beq	2d558 <__assert_fail@plt+0x1b8ac>
   2d45c:	ldr	r5, [sp, #164]	; 0xa4
   2d460:	ldr	r7, [sp, #156]	; 0x9c
   2d464:	mov	r6, sl
   2d468:	add	sl, sp, #168	; 0xa8
   2d46c:	add	r4, sl, r5, lsl #5
   2d470:	str	lr, [sl, r5, lsl #5]
   2d474:	sub	lr, fp, #6144	; 0x1800
   2d478:	str	r5, [sp, #164]	; 0xa4
   2d47c:	str	r6, [r4, #4]
   2d480:	str	r7, [r4, #8]
   2d484:	str	ip, [r4, #12]
   2d488:	str	r2, [r4, #16]
   2d48c:	str	r1, [r4, #20]
   2d490:	str	r3, [r4, #24]
   2d494:	str	r0, [r4, #28]
   2d498:	ldr	r0, [sp, #128]	; 0x80
   2d49c:	ldr	r1, [sp, #80]	; 0x50
   2d4a0:	ldr	r6, [sp, #124]	; 0x7c
   2d4a4:	mov	ip, r5
   2d4a8:	str	r1, [r0, #-28]	; 0xffffffe4
   2d4ac:	ldr	r1, [sp, #76]	; 0x4c
   2d4b0:	str	r1, [r9, #4]
   2d4b4:	ldr	r1, [sp, #84]	; 0x54
   2d4b8:	str	r1, [r9, #8]
   2d4bc:	ldr	r1, [sp, #72]	; 0x48
   2d4c0:	str	r1, [r9, #12]
   2d4c4:	ldr	r1, [sp, #68]	; 0x44
   2d4c8:	str	r1, [r9, #16]
   2d4cc:	ldr	r1, [sp, #64]	; 0x40
   2d4d0:	str	r1, [r9, #20]
   2d4d4:	ldr	r1, [sp, #20]
   2d4d8:	str	r1, [r9, #24]
   2d4dc:	ldr	r1, [sp, #16]
   2d4e0:	str	r1, [r0]
   2d4e4:	add	r0, r5, r5, lsl #1
   2d4e8:	sub	r1, lr, #104	; 0x68
   2d4ec:	add	r5, r1, r0, lsl #2
   2d4f0:	ldr	r0, [r6, #4]
   2d4f4:	mov	r4, r5
   2d4f8:	str	r0, [r4, #4]!
   2d4fc:	ldr	r8, [r6, #4]
   2d500:	cmp	r8, #0
   2d504:	ble	2d57c <__assert_fail@plt+0x1b8d0>
   2d508:	str	r0, [r5]
   2d50c:	lsl	r0, r0, #2
   2d510:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2d514:	ldr	r9, [sp, #44]	; 0x2c
   2d518:	ldr	r7, [sp, #40]	; 0x28
   2d51c:	ldr	sl, [sp, #32]
   2d520:	cmp	r0, #0
   2d524:	str	r0, [r5, #8]
   2d528:	beq	2e3e8 <__assert_fail@plt+0x1c73c>
   2d52c:	ldr	r1, [r6, #8]
   2d530:	lsl	r2, r8, #2
   2d534:	bl	118ec <memcpy@plt>
   2d538:	ldr	r4, [sp, #136]	; 0x88
   2d53c:	b	2d59c <__assert_fail@plt+0x1b8f0>
   2d540:	ldr	r4, [sp, #136]	; 0x88
   2d544:	ldr	r8, [sp, #28]
   2d548:	ldr	r9, [sp, #24]
   2d54c:	ldr	r3, [sp, #148]	; 0x94
   2d550:	add	lr, sp, #168	; 0xa8
   2d554:	b	2d294 <__assert_fail@plt+0x1b5e8>
   2d558:	add	sl, sp, #168	; 0xa8
   2d55c:	ldr	r4, [sp, #136]	; 0x88
   2d560:	ldr	r6, [sp, #124]	; 0x7c
   2d564:	ldr	r5, [sp, #48]	; 0x30
   2d568:	ldr	r9, [sp, #44]	; 0x2c
   2d56c:	ldr	r7, [sp, #40]	; 0x28
   2d570:	mov	r8, sl
   2d574:	ldr	sl, [sp, #32]
   2d578:	b	2d5b0 <__assert_fail@plt+0x1b904>
   2d57c:	mov	r0, #0
   2d580:	ldr	r4, [sp, #136]	; 0x88
   2d584:	ldr	r9, [sp, #44]	; 0x2c
   2d588:	ldr	r7, [sp, #40]	; 0x28
   2d58c:	ldr	sl, [sp, #32]
   2d590:	str	r0, [r5]
   2d594:	str	r0, [r5, #4]
   2d598:	str	r0, [r5, #8]
   2d59c:	ldr	r5, [sp, #48]	; 0x30
   2d5a0:	ldr	r0, [sp, #164]	; 0xa4
   2d5a4:	add	r8, sp, #168	; 0xa8
   2d5a8:	add	r0, r0, #1
   2d5ac:	str	r0, [sp, #164]	; 0xa4
   2d5b0:	ldr	r0, [sp, #104]	; 0x68
   2d5b4:	ldr	r1, [sp, #100]	; 0x64
   2d5b8:	ldr	r0, [r0, #12]
   2d5bc:	ldr	r1, [r0, r1, lsl #2]
   2d5c0:	mov	r0, r6
   2d5c4:	bl	282c8 <__assert_fail@plt+0x1661c>
   2d5c8:	cmp	r0, #0
   2d5cc:	beq	2e36c <__assert_fail@plt+0x1c6c0>
   2d5d0:	ldr	r1, [sp, #60]	; 0x3c
   2d5d4:	ldr	r2, [sp, #56]	; 0x38
   2d5d8:	ldr	r3, [sp, #52]	; 0x34
   2d5dc:	ldr	ip, [sp, #36]	; 0x24
   2d5e0:	mov	lr, r8
   2d5e4:	mov	r6, r9
   2d5e8:	str	r9, [sp, #160]	; 0xa0
   2d5ec:	ldr	r8, [sp, #28]
   2d5f0:	str	sl, [sp, #144]	; 0x90
   2d5f4:	str	r7, [sp, #140]	; 0x8c
   2d5f8:	orr	r0, r2, r1
   2d5fc:	str	ip, [sp, #152]	; 0x98
   2d600:	str	r2, [sp, #156]	; 0x9c
   2d604:	str	r1, [sp, #120]	; 0x78
   2d608:	orr	r0, r0, r3
   2d60c:	orr	r0, r0, r5
   2d610:	orr	r0, r0, r9
   2d614:	ldr	r9, [sp, #24]
   2d618:	orr	r0, r0, r7
   2d61c:	orr	r0, r0, ip
   2d620:	orrs	r0, r0, sl
   2d624:	mov	r0, r3
   2d628:	mov	r3, r5
   2d62c:	str	r0, [sp, #132]	; 0x84
   2d630:	bne	2d294 <__assert_fail@plt+0x1b5e8>
   2d634:	str	sl, [sp, #144]	; 0x90
   2d638:	str	ip, [sp, #152]	; 0x98
   2d63c:	str	r7, [sp, #140]	; 0x8c
   2d640:	str	r6, [sp, #160]	; 0xa0
   2d644:	mov	r3, r5
   2d648:	str	r0, [sp, #132]	; 0x84
   2d64c:	str	r2, [sp, #156]	; 0x9c
   2d650:	str	r1, [sp, #120]	; 0x78
   2d654:	ldr	r0, [sp, #144]	; 0x90
   2d658:	ldr	r8, [sp, #96]	; 0x60
   2d65c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2d660:	ldr	r0, [sp, #152]	; 0x98
   2d664:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2d668:	ldr	r0, [sp, #140]	; 0x8c
   2d66c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2d670:	ldr	r0, [sp, #160]	; 0xa0
   2d674:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2d678:	ldr	r0, [sp, #132]	; 0x84
   2d67c:	str	r3, [fp, #-1068]	; 0xfffffbd4
   2d680:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2d684:	ldr	r0, [sp, #156]	; 0x9c
   2d688:	b	2da78 <__assert_fail@plt+0x1bdcc>
   2d68c:	ldr	r8, [sp, #96]	; 0x60
   2d690:	mov	r4, #0
   2d694:	ldr	r0, [sp, #164]	; 0xa4
   2d698:	ldr	r1, [sp, #100]	; 0x64
   2d69c:	cmp	r4, r0
   2d6a0:	bne	2cda0 <__assert_fail@plt+0x1b0f4>
   2d6a4:	b	2da94 <__assert_fail@plt+0x1bde8>
   2d6a8:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   2d6ac:	sub	lr, fp, #6144	; 0x1800
   2d6b0:	ldr	ip, [sp, #164]	; 0xa4
   2d6b4:	ldr	sl, [sp, #132]	; 0x84
   2d6b8:	str	r0, [sp, #48]	; 0x30
   2d6bc:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   2d6c0:	str	r0, [sp, #44]	; 0x2c
   2d6c4:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   2d6c8:	str	r0, [sp, #40]	; 0x28
   2d6cc:	sub	r0, lr, #104	; 0x68
   2d6d0:	mov	lr, r1
   2d6d4:	str	r0, [sp, #128]	; 0x80
   2d6d8:	ldr	r0, [sp, #156]	; 0x9c
   2d6dc:	b	2d718 <__assert_fail@plt+0x1ba6c>
   2d6e0:	ldr	r4, [sp, #136]	; 0x88
   2d6e4:	ldr	ip, [sp, #164]	; 0xa4
   2d6e8:	ldr	r8, [sp, #96]	; 0x60
   2d6ec:	ldr	r0, [sp, #156]	; 0x9c
   2d6f0:	ldr	sl, [sp, #132]	; 0x84
   2d6f4:	ldr	lr, [sp, #124]	; 0x7c
   2d6f8:	ldr	r7, [sp, #116]	; 0x74
   2d6fc:	ldr	r1, [sp, #128]	; 0x80
   2d700:	add	r4, r4, #1
   2d704:	cmp	r4, ip
   2d708:	add	r7, r7, #32
   2d70c:	add	r1, r1, #12
   2d710:	str	r1, [sp, #128]	; 0x80
   2d714:	bge	2da40 <__assert_fail@plt+0x1bd94>
   2d718:	add	r1, sp, #168	; 0xa8
   2d71c:	str	r4, [sp, #136]	; 0x88
   2d720:	str	lr, [sp, #124]	; 0x7c
   2d724:	str	ip, [sp, #164]	; 0xa4
   2d728:	ldr	ip, [sp, #160]	; 0xa0
   2d72c:	str	sl, [sp, #132]	; 0x84
   2d730:	str	r7, [sp, #116]	; 0x74
   2d734:	ldr	r3, [r7]
   2d738:	str	r0, [sp, #156]	; 0x9c
   2d73c:	add	r8, r1, r4, lsl #5
   2d740:	ldr	r4, [r7, #-28]	; 0xffffffe4
   2d744:	ldr	r7, [sp, #140]	; 0x8c
   2d748:	ldr	r5, [r8, #4]
   2d74c:	ldr	r1, [r8, #8]
   2d750:	ldr	r2, [r8, #12]
   2d754:	ldr	r9, [r8, #16]
   2d758:	str	r4, [sp, #108]	; 0x6c
   2d75c:	and	r4, r4, lr
   2d760:	ldr	lr, [sp, #148]	; 0x94
   2d764:	str	r4, [sp, #72]	; 0x48
   2d768:	and	r6, r5, r0
   2d76c:	str	r1, [sp, #80]	; 0x50
   2d770:	and	r1, r1, sl
   2d774:	ldr	sl, [r8, #20]
   2d778:	str	r9, [sp, #84]	; 0x54
   2d77c:	str	r5, [sp, #112]	; 0x70
   2d780:	str	r2, [sp, #88]	; 0x58
   2d784:	orr	r0, r6, r4
   2d788:	str	r1, [sp, #76]	; 0x4c
   2d78c:	str	r6, [sp, #68]	; 0x44
   2d790:	ldr	r6, [sp, #152]	; 0x98
   2d794:	orr	r0, r0, r1
   2d798:	and	r1, r2, lr
   2d79c:	str	r1, [sp, #64]	; 0x40
   2d7a0:	orr	r0, r0, r1
   2d7a4:	and	r1, r9, ip
   2d7a8:	ldr	r9, [sp, #144]	; 0x90
   2d7ac:	and	r4, sl, r7
   2d7b0:	orr	r0, r0, r1
   2d7b4:	str	r1, [sp, #60]	; 0x3c
   2d7b8:	str	r4, [sp, #56]	; 0x38
   2d7bc:	orr	r0, r0, r4
   2d7c0:	ldr	r4, [r8, #24]
   2d7c4:	and	r5, r4, r6
   2d7c8:	str	r5, [sp, #52]	; 0x34
   2d7cc:	orr	r0, r0, r5
   2d7d0:	and	r5, r3, r9
   2d7d4:	orrs	r0, r0, r5
   2d7d8:	beq	2d6e0 <__assert_fail@plt+0x1ba34>
   2d7dc:	ldr	r0, [sp, #124]	; 0x7c
   2d7e0:	ldr	r1, [sp, #108]	; 0x6c
   2d7e4:	ldr	r2, [sp, #156]	; 0x9c
   2d7e8:	str	r5, [sp, #20]
   2d7ec:	ldr	r5, [sp, #132]	; 0x84
   2d7f0:	ldr	ip, [sp, #84]	; 0x54
   2d7f4:	str	r3, [sp, #92]	; 0x5c
   2d7f8:	ldr	r3, [sp, #108]	; 0x6c
   2d7fc:	bic	r0, r0, r1
   2d800:	ldr	r1, [sp, #88]	; 0x58
   2d804:	str	r0, [sp, #120]	; 0x78
   2d808:	ldr	r0, [sp, #112]	; 0x70
   2d80c:	bic	r0, r2, r0
   2d810:	ldr	r2, [sp, #80]	; 0x50
   2d814:	str	r0, [sp, #48]	; 0x30
   2d818:	bic	r0, r5, r2
   2d81c:	bic	r2, r2, r5
   2d820:	ldr	r5, [sp, #156]	; 0x9c
   2d824:	str	r0, [sp, #44]	; 0x2c
   2d828:	bic	r0, lr, r1
   2d82c:	str	r2, [sp, #156]	; 0x9c
   2d830:	str	r0, [sp, #40]	; 0x28
   2d834:	ldr	r0, [sp, #160]	; 0xa0
   2d838:	bic	r0, r0, ip
   2d83c:	str	r0, [sp, #32]
   2d840:	bic	r0, r7, sl
   2d844:	str	r0, [sp, #28]
   2d848:	bic	r0, r6, r4
   2d84c:	bic	r4, r4, r6
   2d850:	str	r0, [sp, #24]
   2d854:	ldr	r0, [sp, #92]	; 0x5c
   2d858:	bic	r0, r9, r0
   2d85c:	str	r0, [sp, #36]	; 0x24
   2d860:	ldr	r0, [sp, #124]	; 0x7c
   2d864:	bic	r0, r3, r0
   2d868:	ldr	r3, [sp, #112]	; 0x70
   2d86c:	bic	r3, r3, r5
   2d870:	orr	r5, r3, r0
   2d874:	str	r3, [sp, #132]	; 0x84
   2d878:	orr	r3, r5, r2
   2d87c:	bic	r5, r1, lr
   2d880:	ldr	r1, [sp, #160]	; 0xa0
   2d884:	orr	r2, r3, r5
   2d888:	bic	r3, ip, r1
   2d88c:	bic	r1, sl, r7
   2d890:	orr	r2, r2, r3
   2d894:	orr	r7, r2, r1
   2d898:	orr	r2, r7, r4
   2d89c:	ldr	r7, [sp, #92]	; 0x5c
   2d8a0:	bic	r7, r7, r9
   2d8a4:	orrs	r2, r2, r7
   2d8a8:	beq	2d978 <__assert_fail@plt+0x1bccc>
   2d8ac:	ldr	r2, [sp, #164]	; 0xa4
   2d8b0:	ldr	r6, [sp, #132]	; 0x84
   2d8b4:	add	sl, sp, #168	; 0xa8
   2d8b8:	sub	lr, fp, #6144	; 0x1800
   2d8bc:	str	r0, [sl, r2, lsl #5]
   2d8c0:	add	r0, sl, r2, lsl #5
   2d8c4:	str	r6, [r0, #4]
   2d8c8:	ldr	r6, [sp, #156]	; 0x9c
   2d8cc:	str	r6, [r0, #8]
   2d8d0:	str	r5, [r0, #12]
   2d8d4:	str	r3, [r0, #16]
   2d8d8:	add	r0, r0, #20
   2d8dc:	stm	r0, {r1, r4, r7}
   2d8e0:	ldr	r0, [sp, #116]	; 0x74
   2d8e4:	ldr	r1, [sp, #72]	; 0x48
   2d8e8:	ldr	r7, [sp, #128]	; 0x80
   2d8ec:	str	r1, [r0, #-28]	; 0xffffffe4
   2d8f0:	ldr	r1, [sp, #68]	; 0x44
   2d8f4:	str	r1, [r8, #4]
   2d8f8:	ldr	r1, [sp, #76]	; 0x4c
   2d8fc:	str	r1, [r8, #8]
   2d900:	ldr	r1, [sp, #64]	; 0x40
   2d904:	str	r1, [r8, #12]
   2d908:	ldr	r1, [sp, #60]	; 0x3c
   2d90c:	str	r1, [r8, #16]
   2d910:	ldr	r1, [sp, #56]	; 0x38
   2d914:	str	r1, [r8, #20]
   2d918:	ldr	r1, [sp, #52]	; 0x34
   2d91c:	str	r1, [r8, #24]
   2d920:	ldr	r1, [sp, #20]
   2d924:	str	r1, [r0]
   2d928:	add	r0, r2, r2, lsl #1
   2d92c:	sub	r1, lr, #104	; 0x68
   2d930:	add	r6, r1, r0, lsl #2
   2d934:	ldr	r0, [r7, #4]
   2d938:	mov	r4, r6
   2d93c:	str	r0, [r4, #4]!
   2d940:	ldr	r5, [r7, #4]
   2d944:	cmp	r5, #1
   2d948:	blt	2d990 <__assert_fail@plt+0x1bce4>
   2d94c:	str	r0, [r6]
   2d950:	lsl	r0, r0, #2
   2d954:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2d958:	ldr	r9, [sp, #36]	; 0x24
   2d95c:	cmp	r0, #0
   2d960:	str	r0, [r6, #8]
   2d964:	beq	2e3ac <__assert_fail@plt+0x1c700>
   2d968:	ldr	r1, [r7, #8]
   2d96c:	lsl	r2, r5, #2
   2d970:	bl	118ec <memcpy@plt>
   2d974:	b	2d9a4 <__assert_fail@plt+0x1bcf8>
   2d978:	ldr	r8, [sp, #96]	; 0x60
   2d97c:	ldr	r5, [sp, #100]	; 0x64
   2d980:	ldr	r4, [sp, #136]	; 0x88
   2d984:	ldr	r7, [sp, #128]	; 0x80
   2d988:	ldr	r9, [sp, #36]	; 0x24
   2d98c:	b	2d9bc <__assert_fail@plt+0x1bd10>
   2d990:	ldr	r9, [sp, #36]	; 0x24
   2d994:	mov	r0, #0
   2d998:	str	r0, [r6]
   2d99c:	str	r0, [r6, #4]
   2d9a0:	str	r0, [r6, #8]
   2d9a4:	ldr	r0, [sp, #164]	; 0xa4
   2d9a8:	ldr	r8, [sp, #96]	; 0x60
   2d9ac:	ldr	r5, [sp, #100]	; 0x64
   2d9b0:	ldr	r4, [sp, #136]	; 0x88
   2d9b4:	add	r0, r0, #1
   2d9b8:	str	r0, [sp, #164]	; 0xa4
   2d9bc:	ldr	r0, [sp, #104]	; 0x68
   2d9c0:	ldr	r0, [r0, #12]
   2d9c4:	ldr	r1, [r0, r5, lsl #2]
   2d9c8:	mov	r0, r7
   2d9cc:	bl	282c8 <__assert_fail@plt+0x1661c>
   2d9d0:	cmp	r0, #0
   2d9d4:	beq	2e330 <__assert_fail@plt+0x1c684>
   2d9d8:	ldr	lr, [sp, #120]	; 0x78
   2d9dc:	ldr	r2, [sp, #48]	; 0x30
   2d9e0:	ldr	sl, [sp, #44]	; 0x2c
   2d9e4:	ldr	r5, [sp, #40]	; 0x28
   2d9e8:	ldr	r7, [sp, #32]
   2d9ec:	ldr	r6, [sp, #28]
   2d9f0:	ldr	r1, [sp, #24]
   2d9f4:	ldr	ip, [sp, #164]	; 0xa4
   2d9f8:	str	r9, [sp, #144]	; 0x90
   2d9fc:	orr	r0, r2, lr
   2da00:	str	r1, [sp, #152]	; 0x98
   2da04:	str	r6, [sp, #140]	; 0x8c
   2da08:	str	r7, [sp, #160]	; 0xa0
   2da0c:	str	r5, [sp, #148]	; 0x94
   2da10:	orr	r0, r0, sl
   2da14:	orr	r0, r0, r5
   2da18:	orr	r0, r0, r7
   2da1c:	orr	r0, r0, r6
   2da20:	orr	r0, r0, r1
   2da24:	orrs	r0, r0, r9
   2da28:	mov	r0, r2
   2da2c:	bne	2d6f8 <__assert_fail@plt+0x1ba4c>
   2da30:	str	r9, [sp, #144]	; 0x90
   2da34:	str	r1, [sp, #152]	; 0x98
   2da38:	str	r6, [sp, #140]	; 0x8c
   2da3c:	str	r7, [sp, #160]	; 0xa0
   2da40:	ldr	r0, [sp, #144]	; 0x90
   2da44:	str	ip, [sp, #164]	; 0xa4
   2da48:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2da4c:	ldr	r0, [sp, #152]	; 0x98
   2da50:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2da54:	ldr	r0, [sp, #140]	; 0x8c
   2da58:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2da5c:	ldr	r0, [sp, #160]	; 0xa0
   2da60:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2da64:	ldr	r0, [sp, #40]	; 0x28
   2da68:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2da6c:	ldr	r0, [sp, #44]	; 0x2c
   2da70:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2da74:	ldr	r0, [sp, #48]	; 0x30
   2da78:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2da7c:	ldr	r0, [sp, #120]	; 0x78
   2da80:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2da84:	ldr	r0, [sp, #164]	; 0xa4
   2da88:	ldr	r1, [sp, #100]	; 0x64
   2da8c:	cmp	r4, r0
   2da90:	bne	2cda0 <__assert_fail@plt+0x1b0f4>
   2da94:	sub	lr, fp, #1024	; 0x400
   2da98:	sub	r7, lr, #56	; 0x38
   2da9c:	sub	lr, fp, #6144	; 0x1800
   2daa0:	mov	r0, r7
   2daa4:	mov	r8, r7
   2daa8:	sub	r2, lr, #104	; 0x68
   2daac:	vld1.32	{d16-d17}, [r0]!
   2dab0:	vld1.64	{d18-d19}, [r0]
   2dab4:	add	r0, sp, #168	; 0xa8
   2dab8:	add	r0, r0, r4, lsl #5
   2dabc:	vst1.32	{d16-d17}, [r0]!
   2dac0:	vst1.32	{d18-d19}, [r0]
   2dac4:	ldr	r0, [sp, #104]	; 0x68
   2dac8:	ldr	r0, [r0, #12]
   2dacc:	ldr	r7, [r0, r1, lsl #2]
   2dad0:	add	r0, r4, r4, lsl #1
   2dad4:	mov	r1, #1
   2dad8:	add	r5, r2, r0, lsl #2
   2dadc:	str	r1, [r2, r0, lsl #2]
   2dae0:	mov	r0, #4
   2dae4:	mov	r6, r5
   2dae8:	str	r1, [r6, #4]!
   2daec:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2daf0:	cmp	r0, #0
   2daf4:	str	r0, [r5, #8]
   2daf8:	beq	2e47c <__assert_fail@plt+0x1c7d0>
   2dafc:	str	r7, [r0]
   2db00:	mov	r0, r8
   2db04:	vst1.64	{d8-d9}, [r0]!
   2db08:	vst1.64	{d8-d9}, [r0]
   2db0c:	add	r0, r4, #1
   2db10:	str	r0, [sp, #164]	; 0xa4
   2db14:	b	2cd98 <__assert_fail@plt+0x1b0ec>
   2db18:	ldr	r0, [sp, #164]	; 0xa4
   2db1c:	cmp	r0, #0
   2db20:	ble	2e49c <__assert_fail@plt+0x1c7f0>
   2db24:	ldr	r0, [sp, #164]	; 0xa4
   2db28:	mov	r4, #0
   2db2c:	str	r4, [fp, #-3136]	; 0xfffff3c0
   2db30:	add	r0, r0, #1
   2db34:	str	r0, [fp, #-3140]	; 0xfffff3bc
   2db38:	lsl	r0, r0, #2
   2db3c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2db40:	cmp	r0, #0
   2db44:	str	r0, [fp, #-3132]	; 0xfffff3c4
   2db48:	moveq	r4, #12
   2db4c:	cmp	r0, #0
   2db50:	str	r4, [fp, #-56]	; 0xffffffc8
   2db54:	beq	2e4d0 <__assert_fail@plt+0x1c824>
   2db58:	vmov.i32	q8, #0	; 0x00000000
   2db5c:	sub	lr, fp, #3072	; 0xc00
   2db60:	mov	r1, #0
   2db64:	mov	r7, #0
   2db68:	mov	r2, #0
   2db6c:	mov	r6, #0
   2db70:	mov	r5, #0
   2db74:	mov	r9, #0
   2db78:	sub	r0, lr, #104	; 0x68
   2db7c:	sub	lr, fp, #3072	; 0xc00
   2db80:	vst1.64	{d16-d17}, [r0]!
   2db84:	vst1.64	{d16-d17}, [r0]
   2db88:	sub	r0, lr, #56	; 0x38
   2db8c:	str	r0, [sp, #128]	; 0x80
   2db90:	mov	r0, #0
   2db94:	str	r0, [sp, #148]	; 0x94
   2db98:	mov	r0, #0
   2db9c:	str	r0, [sp, #152]	; 0x98
   2dba0:	mov	r0, #0
   2dba4:	str	r0, [sp, #156]	; 0x9c
   2dba8:	mov	r0, #0
   2dbac:	str	r0, [sp, #160]	; 0xa0
   2dbb0:	mov	r0, #0
   2dbb4:	str	r0, [sp, #132]	; 0x84
   2dbb8:	b	2dc84 <__assert_fail@plt+0x1bfd8>
   2dbbc:	ldrsb	r0, [r7, #52]	; 0x34
   2dbc0:	cmn	r0, #1
   2dbc4:	ble	2dd5c <__assert_fail@plt+0x1c0b0>
   2dbc8:	sub	lr, fp, #3072	; 0xc00
   2dbcc:	sub	r0, lr, #56	; 0x38
   2dbd0:	sub	lr, fp, #2048	; 0x800
   2dbd4:	str	r7, [r0, r9, lsl #2]
   2dbd8:	sub	r0, lr, #56	; 0x38
   2dbdc:	str	r7, [r0, r9, lsl #2]
   2dbe0:	add	r0, sp, #168	; 0xa8
   2dbe4:	ldr	r3, [sp, #148]	; 0x94
   2dbe8:	ldr	sl, [sp, #164]	; 0xa4
   2dbec:	ldr	r8, [sp, #96]	; 0x60
   2dbf0:	mov	r2, r0
   2dbf4:	ldr	r0, [r0, r9, lsl #5]
   2dbf8:	orr	r5, r5, r0
   2dbfc:	add	r0, r2, r9, lsl #5
   2dc00:	add	r9, r9, #1
   2dc04:	mov	ip, r5
   2dc08:	cmp	r9, sl
   2dc0c:	ldr	r2, [r0, #4]
   2dc10:	ldr	lr, [r0, #8]
   2dc14:	ldr	r7, [r0, #12]
   2dc18:	ldr	r5, [r0, #16]
   2dc1c:	ldr	r4, [r0, #20]
   2dc20:	str	r2, [sp, #136]	; 0x88
   2dc24:	mov	r2, r6
   2dc28:	ldr	r6, [r0, #24]
   2dc2c:	ldr	r0, [r0, #28]
   2dc30:	orr	r3, r3, r0
   2dc34:	ldr	r0, [sp, #152]	; 0x98
   2dc38:	str	r3, [sp, #148]	; 0x94
   2dc3c:	orr	r0, r0, r6
   2dc40:	mov	r6, r2
   2dc44:	ldr	r2, [sp, #144]	; 0x90
   2dc48:	str	r0, [sp, #152]	; 0x98
   2dc4c:	ldr	r0, [sp, #156]	; 0x9c
   2dc50:	orr	r2, r2, lr
   2dc54:	orr	r0, r0, r4
   2dc58:	str	r0, [sp, #156]	; 0x9c
   2dc5c:	ldr	r0, [sp, #160]	; 0xa0
   2dc60:	orr	r0, r0, r5
   2dc64:	mov	r5, ip
   2dc68:	str	r0, [sp, #160]	; 0xa0
   2dc6c:	ldr	r0, [sp, #140]	; 0x8c
   2dc70:	orr	r0, r0, r7
   2dc74:	mov	r7, r0
   2dc78:	ldr	r0, [sp, #136]	; 0x88
   2dc7c:	orr	r6, r6, r0
   2dc80:	beq	2de24 <__assert_fail@plt+0x1c178>
   2dc84:	mov	r0, #0
   2dc88:	sub	lr, fp, #6144	; 0x1800
   2dc8c:	str	r2, [sp, #144]	; 0x90
   2dc90:	str	r7, [sp, #140]	; 0x8c
   2dc94:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2dc98:	add	r0, r9, r9, lsl #1
   2dc9c:	sub	r2, lr, #104	; 0x68
   2dca0:	add	r2, r2, r0, lsl #2
   2dca4:	mov	r7, r2
   2dca8:	ldr	r0, [r7, #4]!
   2dcac:	cmp	r0, #1
   2dcb0:	blt	2dd1c <__assert_fail@plt+0x1c070>
   2dcb4:	mov	r4, r9
   2dcb8:	add	sl, r2, #8
   2dcbc:	mov	r9, #0
   2dcc0:	b	2dcd8 <__assert_fail@plt+0x1c02c>
   2dcc4:	ldr	r0, [r7]
   2dcc8:	mov	r1, #0
   2dccc:	add	r9, r9, #1
   2dcd0:	cmp	r9, r0
   2dcd4:	bge	2dd14 <__assert_fail@plt+0x1c068>
   2dcd8:	ldr	r2, [sl]
   2dcdc:	ldr	r3, [r8, #12]
   2dce0:	ldr	r2, [r2, r9, lsl #2]
   2dce4:	ldr	r2, [r3, r2, lsl #2]
   2dce8:	cmn	r2, #1
   2dcec:	beq	2dccc <__assert_fail@plt+0x1c020>
   2dcf0:	ldr	r0, [r8, #24]
   2dcf4:	add	r1, r2, r2, lsl #1
   2dcf8:	sub	lr, fp, #3072	; 0xc00
   2dcfc:	add	r1, r0, r1, lsl #2
   2dd00:	sub	r0, lr, #68	; 0x44
   2dd04:	bl	28128 <__assert_fail@plt+0x1647c>
   2dd08:	cmp	r0, #0
   2dd0c:	beq	2dcc4 <__assert_fail@plt+0x1c018>
   2dd10:	b	2e2b8 <__assert_fail@plt+0x1c60c>
   2dd14:	mov	r9, r4
   2dd18:	str	r1, [fp, #-56]	; 0xffffffc8
   2dd1c:	sub	lr, fp, #3072	; 0xc00
   2dd20:	sub	r0, fp, #56	; 0x38
   2dd24:	mov	r1, r8
   2dd28:	mov	r3, #0
   2dd2c:	sub	r2, lr, #68	; 0x44
   2dd30:	bl	28448 <__assert_fail@plt+0x1679c>
   2dd34:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2dd38:	mov	r7, r0
   2dd3c:	sub	lr, fp, #1024	; 0x400
   2dd40:	sub	r0, lr, #56	; 0x38
   2dd44:	cmp	r7, #0
   2dd48:	str	r7, [r0, r9, lsl #2]
   2dd4c:	bne	2dbbc <__assert_fail@plt+0x1bf10>
   2dd50:	cmp	r1, #0
   2dd54:	beq	2dbbc <__assert_fail@plt+0x1bf10>
   2dd58:	b	2ddf0 <__assert_fail@plt+0x1c144>
   2dd5c:	sub	lr, fp, #3072	; 0xc00
   2dd60:	sub	r0, fp, #56	; 0x38
   2dd64:	mov	r1, r8
   2dd68:	mov	r3, #1
   2dd6c:	sub	r2, lr, #68	; 0x44
   2dd70:	bl	28448 <__assert_fail@plt+0x1679c>
   2dd74:	sub	lr, fp, #2048	; 0x800
   2dd78:	cmp	r0, #0
   2dd7c:	sub	r1, lr, #56	; 0x38
   2dd80:	str	r0, [r1, r9, lsl #2]
   2dd84:	bne	2dd94 <__assert_fail@plt+0x1c0e8>
   2dd88:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2dd8c:	cmp	r1, #0
   2dd90:	bne	2ddf0 <__assert_fail@plt+0x1c144>
   2dd94:	cmp	r7, r0
   2dd98:	beq	2ddb8 <__assert_fail@plt+0x1c10c>
   2dd9c:	ldr	r0, [r8, #92]	; 0x5c
   2dda0:	ldr	r1, [sp, #132]	; 0x84
   2dda4:	cmp	r0, #1
   2dda8:	mov	r0, #0
   2ddac:	movwgt	r0, #1
   2ddb0:	orr	r1, r1, r0
   2ddb4:	str	r1, [sp, #132]	; 0x84
   2ddb8:	sub	lr, fp, #3072	; 0xc00
   2ddbc:	sub	r0, fp, #56	; 0x38
   2ddc0:	mov	r1, r8
   2ddc4:	mov	r3, #2
   2ddc8:	sub	r2, lr, #68	; 0x44
   2ddcc:	bl	28448 <__assert_fail@plt+0x1679c>
   2ddd0:	sub	lr, fp, #3072	; 0xc00
   2ddd4:	cmp	r0, #0
   2ddd8:	sub	r1, lr, #56	; 0x38
   2dddc:	str	r0, [r1, r9, lsl #2]
   2dde0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2dde4:	bne	2dbe0 <__assert_fail@plt+0x1bf34>
   2dde8:	cmp	r1, #0
   2ddec:	beq	2dbe0 <__assert_fail@plt+0x1bf34>
   2ddf0:	ldr	r0, [sp, #148]	; 0x94
   2ddf4:	str	r0, [fp, #-3148]	; 0xfffff3b4
   2ddf8:	ldr	r0, [sp, #152]	; 0x98
   2ddfc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2de00:	ldr	r0, [sp, #156]	; 0x9c
   2de04:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2de08:	ldr	r0, [sp, #160]	; 0xa0
   2de0c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2de10:	ldr	r0, [sp, #140]	; 0x8c
   2de14:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2de18:	ldr	r0, [sp, #144]	; 0x90
   2de1c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2de20:	b	2e2ec <__assert_fail@plt+0x1c640>
   2de24:	ldr	r0, [sp, #148]	; 0x94
   2de28:	ldr	r8, [sp, #132]	; 0x84
   2de2c:	ldr	r4, [sp, #104]	; 0x68
   2de30:	str	r0, [fp, #-3148]	; 0xfffff3b4
   2de34:	ldr	r0, [sp, #152]	; 0x98
   2de38:	tst	r8, #1
   2de3c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2de40:	ldr	r0, [sp, #156]	; 0x9c
   2de44:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2de48:	ldr	r0, [sp, #160]	; 0xa0
   2de4c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2de50:	mov	r0, #4
   2de54:	str	r7, [fp, #-3164]	; 0xfffff3a4
   2de58:	str	r2, [fp, #-3168]	; 0xfffff3a0
   2de5c:	str	r6, [fp, #-3172]	; 0xfffff39c
   2de60:	str	r5, [fp, #-3176]	; 0xfffff398
   2de64:	bne	2e4dc <__assert_fail@plt+0x1c830>
   2de68:	mov	r1, #256	; 0x100
   2de6c:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   2de70:	cmp	r0, #0
   2de74:	str	r0, [r4, #44]	; 0x2c
   2de78:	beq	2e2f4 <__assert_fail@plt+0x1c648>
   2de7c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   2de80:	cmp	ip, #0
   2de84:	beq	2df04 <__assert_fail@plt+0x1c258>
   2de88:	mov	r2, #0
   2de8c:	mov	r3, #1
   2de90:	mov	r1, ip
   2de94:	mov	r7, #0
   2de98:	tst	r1, #1
   2de9c:	bne	2debc <__assert_fail@plt+0x1c210>
   2dea0:	lsr	r6, r1, #1
   2dea4:	cmp	r2, r1, lsr #1
   2dea8:	add	r7, r7, #1
   2deac:	lsl	r3, r3, #1
   2deb0:	mov	r1, r6
   2deb4:	bne	2de98 <__assert_fail@plt+0x1c1ec>
   2deb8:	b	2df04 <__assert_fail@plt+0x1c258>
   2debc:	mov	r6, #0
   2dec0:	add	r4, sp, #168	; 0xa8
   2dec4:	ldr	r5, [r4, r6, lsl #3]
   2dec8:	add	r6, r6, #4
   2decc:	tst	r5, r3
   2ded0:	beq	2dec4 <__assert_fail@plt+0x1c218>
   2ded4:	ldr	r5, [sp]
   2ded8:	sub	lr, fp, #2048	; 0x800
   2dedc:	ldr	r5, [r5]
   2dee0:	tst	r5, r3
   2dee4:	sub	r5, lr, #56	; 0x38
   2dee8:	sub	lr, fp, #1024	; 0x400
   2deec:	sub	r4, lr, #56	; 0x38
   2def0:	moveq	r5, r4
   2def4:	add	r6, r5, r6
   2def8:	ldr	r6, [r6, #-4]
   2defc:	str	r6, [r0, r7, lsl #2]
   2df00:	b	2dea0 <__assert_fail@plt+0x1c1f4>
   2df04:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   2df08:	cmp	r2, #0
   2df0c:	beq	2df8c <__assert_fail@plt+0x1c2e0>
   2df10:	add	r1, sp, #168	; 0xa8
   2df14:	mov	r7, #32
   2df18:	mov	r6, #1
   2df1c:	mov	r5, #0
   2df20:	add	lr, r1, #4
   2df24:	tst	r2, #1
   2df28:	bne	2df48 <__assert_fail@plt+0x1c29c>
   2df2c:	lsr	r1, r2, #1
   2df30:	cmp	r5, r2, lsr #1
   2df34:	add	r7, r7, #1
   2df38:	lsl	r6, r6, #1
   2df3c:	mov	r2, r1
   2df40:	bne	2df24 <__assert_fail@plt+0x1c278>
   2df44:	b	2df8c <__assert_fail@plt+0x1c2e0>
   2df48:	mov	r1, #0
   2df4c:	ldr	r4, [lr, r1, lsl #3]
   2df50:	add	r1, r1, #4
   2df54:	tst	r4, r6
   2df58:	beq	2df4c <__assert_fail@plt+0x1c2a0>
   2df5c:	ldr	r3, [sp, #96]	; 0x60
   2df60:	ldr	r4, [r3, #100]	; 0x64
   2df64:	sub	r3, fp, #2048	; 0x800
   2df68:	tst	r4, r6
   2df6c:	sub	r4, r3, #56	; 0x38
   2df70:	sub	r3, fp, #1024	; 0x400
   2df74:	sub	r3, r3, #56	; 0x38
   2df78:	moveq	r4, r3
   2df7c:	add	r1, r4, r1
   2df80:	ldr	r1, [r1, #-4]
   2df84:	str	r1, [r0, r7, lsl #2]
   2df88:	b	2df2c <__assert_fail@plt+0x1c280>
   2df8c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   2df90:	cmp	r2, #0
   2df94:	beq	2e014 <__assert_fail@plt+0x1c368>
   2df98:	add	r1, sp, #168	; 0xa8
   2df9c:	mov	r7, #64	; 0x40
   2dfa0:	mov	r6, #1
   2dfa4:	mov	r5, #0
   2dfa8:	add	lr, r1, #8
   2dfac:	tst	r2, #1
   2dfb0:	bne	2dfd0 <__assert_fail@plt+0x1c324>
   2dfb4:	lsr	r1, r2, #1
   2dfb8:	cmp	r5, r2, lsr #1
   2dfbc:	add	r7, r7, #1
   2dfc0:	lsl	r6, r6, #1
   2dfc4:	mov	r2, r1
   2dfc8:	bne	2dfac <__assert_fail@plt+0x1c300>
   2dfcc:	b	2e014 <__assert_fail@plt+0x1c368>
   2dfd0:	mov	r1, #0
   2dfd4:	ldr	r4, [lr, r1, lsl #3]
   2dfd8:	add	r1, r1, #4
   2dfdc:	tst	r4, r6
   2dfe0:	beq	2dfd4 <__assert_fail@plt+0x1c328>
   2dfe4:	ldr	r3, [sp, #96]	; 0x60
   2dfe8:	ldr	r4, [r3, #104]	; 0x68
   2dfec:	sub	r3, fp, #2048	; 0x800
   2dff0:	tst	r4, r6
   2dff4:	sub	r4, r3, #56	; 0x38
   2dff8:	sub	r3, fp, #1024	; 0x400
   2dffc:	sub	r3, r3, #56	; 0x38
   2e000:	moveq	r4, r3
   2e004:	add	r1, r4, r1
   2e008:	ldr	r1, [r1, #-4]
   2e00c:	str	r1, [r0, r7, lsl #2]
   2e010:	b	2dfb4 <__assert_fail@plt+0x1c308>
   2e014:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   2e018:	cmp	r2, #0
   2e01c:	beq	2e09c <__assert_fail@plt+0x1c3f0>
   2e020:	add	r1, sp, #168	; 0xa8
   2e024:	mov	r7, #96	; 0x60
   2e028:	mov	r6, #1
   2e02c:	mov	r5, #0
   2e030:	add	lr, r1, #12
   2e034:	tst	r2, #1
   2e038:	bne	2e058 <__assert_fail@plt+0x1c3ac>
   2e03c:	lsr	r1, r2, #1
   2e040:	cmp	r5, r2, lsr #1
   2e044:	add	r7, r7, #1
   2e048:	lsl	r6, r6, #1
   2e04c:	mov	r2, r1
   2e050:	bne	2e034 <__assert_fail@plt+0x1c388>
   2e054:	b	2e09c <__assert_fail@plt+0x1c3f0>
   2e058:	mov	r1, #0
   2e05c:	ldr	r4, [lr, r1, lsl #3]
   2e060:	add	r1, r1, #4
   2e064:	tst	r4, r6
   2e068:	beq	2e05c <__assert_fail@plt+0x1c3b0>
   2e06c:	ldr	r3, [sp, #96]	; 0x60
   2e070:	ldr	r4, [r3, #108]	; 0x6c
   2e074:	sub	r3, fp, #2048	; 0x800
   2e078:	tst	r4, r6
   2e07c:	sub	r4, r3, #56	; 0x38
   2e080:	sub	r3, fp, #1024	; 0x400
   2e084:	sub	r3, r3, #56	; 0x38
   2e088:	moveq	r4, r3
   2e08c:	add	r1, r4, r1
   2e090:	ldr	r1, [r1, #-4]
   2e094:	str	r1, [r0, r7, lsl #2]
   2e098:	b	2e03c <__assert_fail@plt+0x1c390>
   2e09c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   2e0a0:	cmp	r2, #0
   2e0a4:	beq	2e124 <__assert_fail@plt+0x1c478>
   2e0a8:	add	r1, sp, #168	; 0xa8
   2e0ac:	mov	r7, #128	; 0x80
   2e0b0:	mov	r6, #1
   2e0b4:	mov	r5, #0
   2e0b8:	add	lr, r1, #16
   2e0bc:	tst	r2, #1
   2e0c0:	bne	2e0e0 <__assert_fail@plt+0x1c434>
   2e0c4:	lsr	r1, r2, #1
   2e0c8:	cmp	r5, r2, lsr #1
   2e0cc:	add	r7, r7, #1
   2e0d0:	lsl	r6, r6, #1
   2e0d4:	mov	r2, r1
   2e0d8:	bne	2e0bc <__assert_fail@plt+0x1c410>
   2e0dc:	b	2e124 <__assert_fail@plt+0x1c478>
   2e0e0:	mov	r1, #0
   2e0e4:	ldr	r4, [lr, r1, lsl #3]
   2e0e8:	add	r1, r1, #4
   2e0ec:	tst	r4, r6
   2e0f0:	beq	2e0e4 <__assert_fail@plt+0x1c438>
   2e0f4:	ldr	r3, [sp, #4]
   2e0f8:	ldr	r4, [r3]
   2e0fc:	sub	r3, fp, #2048	; 0x800
   2e100:	tst	r4, r6
   2e104:	sub	r4, r3, #56	; 0x38
   2e108:	sub	r3, fp, #1024	; 0x400
   2e10c:	sub	r3, r3, #56	; 0x38
   2e110:	moveq	r4, r3
   2e114:	add	r1, r4, r1
   2e118:	ldr	r1, [r1, #-4]
   2e11c:	str	r1, [r0, r7, lsl #2]
   2e120:	b	2e0c4 <__assert_fail@plt+0x1c418>
   2e124:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   2e128:	cmp	r2, #0
   2e12c:	beq	2e1ac <__assert_fail@plt+0x1c500>
   2e130:	add	r1, sp, #168	; 0xa8
   2e134:	mov	r7, #160	; 0xa0
   2e138:	mov	r6, #1
   2e13c:	mov	r5, #0
   2e140:	add	lr, r1, #20
   2e144:	tst	r2, #1
   2e148:	bne	2e168 <__assert_fail@plt+0x1c4bc>
   2e14c:	lsr	r1, r2, #1
   2e150:	cmp	r5, r2, lsr #1
   2e154:	add	r7, r7, #1
   2e158:	lsl	r6, r6, #1
   2e15c:	mov	r2, r1
   2e160:	bne	2e144 <__assert_fail@plt+0x1c498>
   2e164:	b	2e1ac <__assert_fail@plt+0x1c500>
   2e168:	mov	r1, #0
   2e16c:	ldr	r4, [lr, r1, lsl #3]
   2e170:	add	r1, r1, #4
   2e174:	tst	r4, r6
   2e178:	beq	2e16c <__assert_fail@plt+0x1c4c0>
   2e17c:	ldr	r3, [sp, #96]	; 0x60
   2e180:	ldr	r4, [r3, #116]	; 0x74
   2e184:	sub	r3, fp, #2048	; 0x800
   2e188:	tst	r4, r6
   2e18c:	sub	r4, r3, #56	; 0x38
   2e190:	sub	r3, fp, #1024	; 0x400
   2e194:	sub	r3, r3, #56	; 0x38
   2e198:	moveq	r4, r3
   2e19c:	add	r1, r4, r1
   2e1a0:	ldr	r1, [r1, #-4]
   2e1a4:	str	r1, [r0, r7, lsl #2]
   2e1a8:	b	2e14c <__assert_fail@plt+0x1c4a0>
   2e1ac:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   2e1b0:	cmp	r2, #0
   2e1b4:	beq	2e234 <__assert_fail@plt+0x1c588>
   2e1b8:	add	r1, sp, #168	; 0xa8
   2e1bc:	mov	r7, #192	; 0xc0
   2e1c0:	mov	r6, #1
   2e1c4:	mov	r5, #0
   2e1c8:	add	lr, r1, #24
   2e1cc:	tst	r2, #1
   2e1d0:	bne	2e1f0 <__assert_fail@plt+0x1c544>
   2e1d4:	lsr	r1, r2, #1
   2e1d8:	cmp	r5, r2, lsr #1
   2e1dc:	add	r7, r7, #1
   2e1e0:	lsl	r6, r6, #1
   2e1e4:	mov	r2, r1
   2e1e8:	bne	2e1cc <__assert_fail@plt+0x1c520>
   2e1ec:	b	2e234 <__assert_fail@plt+0x1c588>
   2e1f0:	mov	r1, #0
   2e1f4:	ldr	r4, [lr, r1, lsl #3]
   2e1f8:	add	r1, r1, #4
   2e1fc:	tst	r4, r6
   2e200:	beq	2e1f4 <__assert_fail@plt+0x1c548>
   2e204:	ldr	r3, [sp, #96]	; 0x60
   2e208:	ldr	r4, [r3, #120]	; 0x78
   2e20c:	sub	r3, fp, #2048	; 0x800
   2e210:	tst	r4, r6
   2e214:	sub	r4, r3, #56	; 0x38
   2e218:	sub	r3, fp, #1024	; 0x400
   2e21c:	sub	r3, r3, #56	; 0x38
   2e220:	moveq	r4, r3
   2e224:	add	r1, r4, r1
   2e228:	ldr	r1, [r1, #-4]
   2e22c:	str	r1, [r0, r7, lsl #2]
   2e230:	b	2e1d4 <__assert_fail@plt+0x1c528>
   2e234:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   2e238:	cmp	r2, #0
   2e23c:	beq	2e994 <__assert_fail@plt+0x1cce8>
   2e240:	mov	r3, #224	; 0xe0
   2e244:	mov	r7, #1
   2e248:	mov	r6, #0
   2e24c:	tst	r2, #1
   2e250:	bne	2e270 <__assert_fail@plt+0x1c5c4>
   2e254:	lsr	r1, r2, #1
   2e258:	cmp	r6, r2, lsr #1
   2e25c:	add	r3, r3, #1
   2e260:	lsl	r7, r7, #1
   2e264:	mov	r2, r1
   2e268:	bne	2e24c <__assert_fail@plt+0x1c5a0>
   2e26c:	b	2e994 <__assert_fail@plt+0x1cce8>
   2e270:	ldr	r4, [sp, #12]
   2e274:	mov	r1, #0
   2e278:	ldr	r5, [r4, r1, lsl #3]
   2e27c:	add	r1, r1, #4
   2e280:	tst	r5, r7
   2e284:	beq	2e278 <__assert_fail@plt+0x1c5cc>
   2e288:	ldr	r5, [sp, #96]	; 0x60
   2e28c:	sub	lr, fp, #2048	; 0x800
   2e290:	ldr	r5, [r5, #124]	; 0x7c
   2e294:	tst	r5, r7
   2e298:	sub	r5, lr, #56	; 0x38
   2e29c:	sub	lr, fp, #1024	; 0x400
   2e2a0:	sub	r4, lr, #56	; 0x38
   2e2a4:	moveq	r5, r4
   2e2a8:	add	r1, r5, r1
   2e2ac:	ldr	r1, [r1, #-4]
   2e2b0:	str	r1, [r0, r3, lsl #2]
   2e2b4:	b	2e254 <__assert_fail@plt+0x1c5a8>
   2e2b8:	ldr	r1, [sp, #148]	; 0x94
   2e2bc:	str	r0, [fp, #-56]	; 0xffffffc8
   2e2c0:	str	r1, [fp, #-3148]	; 0xfffff3b4
   2e2c4:	ldr	r1, [sp, #152]	; 0x98
   2e2c8:	str	r1, [fp, #-3152]	; 0xfffff3b0
   2e2cc:	ldr	r1, [sp, #156]	; 0x9c
   2e2d0:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2e2d4:	ldr	r1, [sp, #160]	; 0xa0
   2e2d8:	str	r1, [fp, #-3160]	; 0xfffff3a8
   2e2dc:	ldr	r1, [sp, #140]	; 0x8c
   2e2e0:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2e2e4:	ldr	r1, [sp, #144]	; 0x90
   2e2e8:	str	r1, [fp, #-3168]	; 0xfffff3a0
   2e2ec:	str	r6, [fp, #-3172]	; 0xfffff39c
   2e2f0:	str	r5, [fp, #-3176]	; 0xfffff398
   2e2f4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2e2f8:	bl	1c224 <__assert_fail@plt+0xa578>
   2e2fc:	ldr	r0, [sp, #164]	; 0xa4
   2e300:	cmp	r0, #1
   2e304:	blt	2e468 <__assert_fail@plt+0x1c7bc>
   2e308:	sub	lr, fp, #6144	; 0x1800
   2e30c:	sub	r0, lr, #104	; 0x68
   2e310:	add	r4, r0, #8
   2e314:	ldr	r0, [r4], #12
   2e318:	bl	1c224 <__assert_fail@plt+0xa578>
   2e31c:	ldr	r0, [sp, #164]	; 0xa4
   2e320:	subs	r0, r0, #1
   2e324:	str	r0, [sp, #164]	; 0xa4
   2e328:	bne	2e314 <__assert_fail@plt+0x1c668>
   2e32c:	b	2e468 <__assert_fail@plt+0x1c7bc>
   2e330:	ldr	r0, [sp, #24]
   2e334:	str	r9, [fp, #-1052]	; 0xfffffbe4
   2e338:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2e33c:	ldr	r0, [sp, #28]
   2e340:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2e344:	ldr	r0, [sp, #32]
   2e348:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2e34c:	ldr	r0, [sp, #40]	; 0x28
   2e350:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2e354:	ldr	r0, [sp, #44]	; 0x2c
   2e358:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2e35c:	ldr	r0, [sp, #48]	; 0x30
   2e360:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2e364:	ldr	r0, [sp, #120]	; 0x78
   2e368:	b	2e398 <__assert_fail@plt+0x1c6ec>
   2e36c:	ldr	r0, [sp, #36]	; 0x24
   2e370:	str	sl, [fp, #-1052]	; 0xfffffbe4
   2e374:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2e378:	ldr	r0, [sp, #52]	; 0x34
   2e37c:	str	r7, [fp, #-1060]	; 0xfffffbdc
   2e380:	str	r9, [fp, #-1064]	; 0xfffffbd8
   2e384:	str	r5, [fp, #-1068]	; 0xfffffbd4
   2e388:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2e38c:	ldr	r0, [sp, #56]	; 0x38
   2e390:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2e394:	ldr	r0, [sp, #60]	; 0x3c
   2e398:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2e39c:	ldr	r0, [sp, #164]	; 0xa4
   2e3a0:	cmp	r0, #1
   2e3a4:	bge	2e444 <__assert_fail@plt+0x1c798>
   2e3a8:	b	2e468 <__assert_fail@plt+0x1c7bc>
   2e3ac:	ldr	r0, [sp, #24]
   2e3b0:	str	r9, [fp, #-1052]	; 0xfffffbe4
   2e3b4:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2e3b8:	ldr	r0, [sp, #28]
   2e3bc:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2e3c0:	ldr	r0, [sp, #32]
   2e3c4:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2e3c8:	ldr	r0, [sp, #40]	; 0x28
   2e3cc:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2e3d0:	ldr	r0, [sp, #44]	; 0x2c
   2e3d4:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2e3d8:	ldr	r0, [sp, #48]	; 0x30
   2e3dc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2e3e0:	ldr	r0, [sp, #120]	; 0x78
   2e3e4:	b	2e418 <__assert_fail@plt+0x1c76c>
   2e3e8:	ldr	r0, [sp, #36]	; 0x24
   2e3ec:	str	sl, [fp, #-1052]	; 0xfffffbe4
   2e3f0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2e3f4:	ldr	r0, [sp, #48]	; 0x30
   2e3f8:	str	r7, [fp, #-1060]	; 0xfffffbdc
   2e3fc:	str	r9, [fp, #-1064]	; 0xfffffbd8
   2e400:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2e404:	ldr	r0, [sp, #52]	; 0x34
   2e408:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2e40c:	ldr	r0, [sp, #56]	; 0x38
   2e410:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2e414:	ldr	r0, [sp, #60]	; 0x3c
   2e418:	ldr	r1, [sp, #164]	; 0xa4
   2e41c:	sub	lr, fp, #6144	; 0x1800
   2e420:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2e424:	mov	r0, #0
   2e428:	sub	r2, lr, #104	; 0x68
   2e42c:	str	r0, [r4]
   2e430:	add	r1, r1, r1, lsl #1
   2e434:	str	r0, [r2, r1, lsl #2]
   2e438:	ldr	r0, [sp, #164]	; 0xa4
   2e43c:	cmp	r0, #1
   2e440:	blt	2e468 <__assert_fail@plt+0x1c7bc>
   2e444:	sub	lr, fp, #6144	; 0x1800
   2e448:	sub	r0, lr, #104	; 0x68
   2e44c:	add	r4, r0, #8
   2e450:	ldr	r0, [r4], #12
   2e454:	bl	1c224 <__assert_fail@plt+0xa578>
   2e458:	ldr	r0, [sp, #164]	; 0xa4
   2e45c:	subs	r0, r0, #1
   2e460:	str	r0, [sp, #164]	; 0xa4
   2e464:	bne	2e450 <__assert_fail@plt+0x1c7a4>
   2e468:	mov	r0, #0
   2e46c:	sub	sp, fp, #48	; 0x30
   2e470:	vpop	{d8-d9}
   2e474:	add	sp, sp, #4
   2e478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e47c:	mov	r0, #0
   2e480:	str	r4, [sp, #164]	; 0xa4
   2e484:	str	r0, [r6]
   2e488:	str	r0, [r5]
   2e48c:	ldr	r0, [sp, #164]	; 0xa4
   2e490:	cmp	r0, #1
   2e494:	bge	2e444 <__assert_fail@plt+0x1c798>
   2e498:	b	2e468 <__assert_fail@plt+0x1c7bc>
   2e49c:	mov	r0, #0
   2e4a0:	bne	2e4c0 <__assert_fail@plt+0x1c814>
   2e4a4:	mov	r0, #4
   2e4a8:	mov	r1, #256	; 0x100
   2e4ac:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   2e4b0:	ldr	r1, [sp, #104]	; 0x68
   2e4b4:	cmp	r0, #0
   2e4b8:	str	r0, [r1, #44]	; 0x2c
   2e4bc:	movwne	r0, #1
   2e4c0:	sub	sp, fp, #48	; 0x30
   2e4c4:	vpop	{d8-d9}
   2e4c8:	add	sp, sp, #4
   2e4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e4d0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2e4d4:	bl	1c224 <__assert_fail@plt+0xa578>
   2e4d8:	b	2e308 <__assert_fail@plt+0x1c65c>
   2e4dc:	mov	r1, #512	; 0x200
   2e4e0:	bl	1bf94 <__assert_fail@plt+0xa2e8>
   2e4e4:	cmp	r0, #0
   2e4e8:	str	r0, [r4, #48]	; 0x30
   2e4ec:	beq	2e2f4 <__assert_fail@plt+0x1c648>
   2e4f0:	ldr	ip, [fp, #-3176]	; 0xfffff398
   2e4f4:	cmp	ip, #0
   2e4f8:	beq	2e584 <__assert_fail@plt+0x1c8d8>
   2e4fc:	sub	lr, fp, #1024	; 0x400
   2e500:	mov	r7, #0
   2e504:	mov	r6, #1
   2e508:	add	r4, sp, #168	; 0xa8
   2e50c:	mov	r5, ip
   2e510:	sub	r1, lr, #56	; 0x38
   2e514:	sub	lr, r1, #4
   2e518:	sub	r1, fp, #2048	; 0x800
   2e51c:	sub	r1, r1, #56	; 0x38
   2e520:	sub	r8, r1, #4
   2e524:	mov	r1, #0
   2e528:	tst	r5, #1
   2e52c:	bne	2e54c <__assert_fail@plt+0x1c8a0>
   2e530:	lsr	r2, r5, #1
   2e534:	cmp	r7, r5, lsr #1
   2e538:	add	r1, r1, #1
   2e53c:	lsl	r6, r6, #1
   2e540:	mov	r5, r2
   2e544:	bne	2e528 <__assert_fail@plt+0x1c87c>
   2e548:	b	2e584 <__assert_fail@plt+0x1c8d8>
   2e54c:	mov	r3, r4
   2e550:	mov	sl, lr
   2e554:	mov	r9, r8
   2e558:	ldr	r2, [r3], #32
   2e55c:	add	sl, sl, #4
   2e560:	add	r9, r9, #4
   2e564:	tst	r2, r6
   2e568:	beq	2e558 <__assert_fail@plt+0x1c8ac>
   2e56c:	ldr	r2, [sl]
   2e570:	mov	r3, r0
   2e574:	str	r2, [r3, r1, lsl #2]!
   2e578:	ldr	r2, [r9]
   2e57c:	str	r2, [r3, #1024]	; 0x400
   2e580:	b	2e530 <__assert_fail@plt+0x1c884>
   2e584:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   2e588:	cmp	r2, #0
   2e58c:	beq	2e618 <__assert_fail@plt+0x1c96c>
   2e590:	add	r1, sp, #168	; 0xa8
   2e594:	sub	lr, fp, #2048	; 0x800
   2e598:	mov	r5, #32
   2e59c:	mov	r3, #0
   2e5a0:	add	r4, r1, #4
   2e5a4:	sub	r1, lr, #56	; 0x38
   2e5a8:	sub	lr, r1, #4
   2e5ac:	sub	r1, fp, #1024	; 0x400
   2e5b0:	sub	r1, r1, #56	; 0x38
   2e5b4:	sub	r8, r1, #4
   2e5b8:	mov	r1, #1
   2e5bc:	tst	r2, #1
   2e5c0:	bne	2e5e0 <__assert_fail@plt+0x1c934>
   2e5c4:	lsr	r6, r2, #1
   2e5c8:	cmp	r3, r2, lsr #1
   2e5cc:	add	r5, r5, #1
   2e5d0:	lsl	r1, r1, #1
   2e5d4:	mov	r2, r6
   2e5d8:	bne	2e5bc <__assert_fail@plt+0x1c910>
   2e5dc:	b	2e618 <__assert_fail@plt+0x1c96c>
   2e5e0:	mov	r7, r4
   2e5e4:	mov	r9, lr
   2e5e8:	mov	sl, r8
   2e5ec:	ldr	r6, [r7], #32
   2e5f0:	add	r9, r9, #4
   2e5f4:	add	sl, sl, #4
   2e5f8:	tst	r6, r1
   2e5fc:	beq	2e5ec <__assert_fail@plt+0x1c940>
   2e600:	ldr	r6, [sl]
   2e604:	mov	r7, r0
   2e608:	str	r6, [r7, r5, lsl #2]!
   2e60c:	ldr	r6, [r9]
   2e610:	str	r6, [r7, #1024]	; 0x400
   2e614:	b	2e5c4 <__assert_fail@plt+0x1c918>
   2e618:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   2e61c:	cmp	r2, #0
   2e620:	beq	2e6ac <__assert_fail@plt+0x1ca00>
   2e624:	add	r1, sp, #168	; 0xa8
   2e628:	sub	lr, fp, #2048	; 0x800
   2e62c:	mov	r5, #64	; 0x40
   2e630:	mov	r3, #0
   2e634:	add	r4, r1, #8
   2e638:	sub	r1, lr, #56	; 0x38
   2e63c:	sub	lr, r1, #4
   2e640:	sub	r1, fp, #1024	; 0x400
   2e644:	sub	r1, r1, #56	; 0x38
   2e648:	sub	r8, r1, #4
   2e64c:	mov	r1, #1
   2e650:	tst	r2, #1
   2e654:	bne	2e674 <__assert_fail@plt+0x1c9c8>
   2e658:	lsr	r6, r2, #1
   2e65c:	cmp	r3, r2, lsr #1
   2e660:	add	r5, r5, #1
   2e664:	lsl	r1, r1, #1
   2e668:	mov	r2, r6
   2e66c:	bne	2e650 <__assert_fail@plt+0x1c9a4>
   2e670:	b	2e6ac <__assert_fail@plt+0x1ca00>
   2e674:	mov	r7, r4
   2e678:	mov	r9, lr
   2e67c:	mov	sl, r8
   2e680:	ldr	r6, [r7], #32
   2e684:	add	r9, r9, #4
   2e688:	add	sl, sl, #4
   2e68c:	tst	r6, r1
   2e690:	beq	2e680 <__assert_fail@plt+0x1c9d4>
   2e694:	ldr	r6, [sl]
   2e698:	mov	r7, r0
   2e69c:	str	r6, [r7, r5, lsl #2]!
   2e6a0:	ldr	r6, [r9]
   2e6a4:	str	r6, [r7, #1024]	; 0x400
   2e6a8:	b	2e658 <__assert_fail@plt+0x1c9ac>
   2e6ac:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   2e6b0:	cmp	r2, #0
   2e6b4:	beq	2e740 <__assert_fail@plt+0x1ca94>
   2e6b8:	add	r1, sp, #168	; 0xa8
   2e6bc:	sub	lr, fp, #2048	; 0x800
   2e6c0:	mov	r5, #96	; 0x60
   2e6c4:	mov	r3, #0
   2e6c8:	add	r4, r1, #12
   2e6cc:	sub	r1, lr, #56	; 0x38
   2e6d0:	sub	lr, r1, #4
   2e6d4:	sub	r1, fp, #1024	; 0x400
   2e6d8:	sub	r1, r1, #56	; 0x38
   2e6dc:	sub	r8, r1, #4
   2e6e0:	mov	r1, #1
   2e6e4:	tst	r2, #1
   2e6e8:	bne	2e708 <__assert_fail@plt+0x1ca5c>
   2e6ec:	lsr	r6, r2, #1
   2e6f0:	cmp	r3, r2, lsr #1
   2e6f4:	add	r5, r5, #1
   2e6f8:	lsl	r1, r1, #1
   2e6fc:	mov	r2, r6
   2e700:	bne	2e6e4 <__assert_fail@plt+0x1ca38>
   2e704:	b	2e740 <__assert_fail@plt+0x1ca94>
   2e708:	mov	r7, r4
   2e70c:	mov	r9, lr
   2e710:	mov	sl, r8
   2e714:	ldr	r6, [r7], #32
   2e718:	add	r9, r9, #4
   2e71c:	add	sl, sl, #4
   2e720:	tst	r6, r1
   2e724:	beq	2e714 <__assert_fail@plt+0x1ca68>
   2e728:	ldr	r6, [sl]
   2e72c:	mov	r7, r0
   2e730:	str	r6, [r7, r5, lsl #2]!
   2e734:	ldr	r6, [r9]
   2e738:	str	r6, [r7, #1024]	; 0x400
   2e73c:	b	2e6ec <__assert_fail@plt+0x1ca40>
   2e740:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   2e744:	cmp	r2, #0
   2e748:	beq	2e7d4 <__assert_fail@plt+0x1cb28>
   2e74c:	add	r1, sp, #168	; 0xa8
   2e750:	sub	lr, fp, #2048	; 0x800
   2e754:	mov	r5, #128	; 0x80
   2e758:	mov	r3, #0
   2e75c:	add	r4, r1, #16
   2e760:	sub	r1, lr, #56	; 0x38
   2e764:	sub	lr, r1, #4
   2e768:	sub	r1, fp, #1024	; 0x400
   2e76c:	sub	r1, r1, #56	; 0x38
   2e770:	sub	r8, r1, #4
   2e774:	mov	r1, #1
   2e778:	tst	r2, #1
   2e77c:	bne	2e79c <__assert_fail@plt+0x1caf0>
   2e780:	lsr	r6, r2, #1
   2e784:	cmp	r3, r2, lsr #1
   2e788:	add	r5, r5, #1
   2e78c:	lsl	r1, r1, #1
   2e790:	mov	r2, r6
   2e794:	bne	2e778 <__assert_fail@plt+0x1cacc>
   2e798:	b	2e7d4 <__assert_fail@plt+0x1cb28>
   2e79c:	mov	r7, r4
   2e7a0:	mov	r9, lr
   2e7a4:	mov	sl, r8
   2e7a8:	ldr	r6, [r7], #32
   2e7ac:	add	r9, r9, #4
   2e7b0:	add	sl, sl, #4
   2e7b4:	tst	r6, r1
   2e7b8:	beq	2e7a8 <__assert_fail@plt+0x1cafc>
   2e7bc:	ldr	r6, [sl]
   2e7c0:	mov	r7, r0
   2e7c4:	str	r6, [r7, r5, lsl #2]!
   2e7c8:	ldr	r6, [r9]
   2e7cc:	str	r6, [r7, #1024]	; 0x400
   2e7d0:	b	2e780 <__assert_fail@plt+0x1cad4>
   2e7d4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   2e7d8:	cmp	r2, #0
   2e7dc:	beq	2e868 <__assert_fail@plt+0x1cbbc>
   2e7e0:	add	r1, sp, #168	; 0xa8
   2e7e4:	sub	lr, fp, #2048	; 0x800
   2e7e8:	mov	r5, #160	; 0xa0
   2e7ec:	mov	r3, #0
   2e7f0:	add	r4, r1, #20
   2e7f4:	sub	r1, lr, #56	; 0x38
   2e7f8:	sub	lr, r1, #4
   2e7fc:	sub	r1, fp, #1024	; 0x400
   2e800:	sub	r1, r1, #56	; 0x38
   2e804:	sub	r8, r1, #4
   2e808:	mov	r1, #1
   2e80c:	tst	r2, #1
   2e810:	bne	2e830 <__assert_fail@plt+0x1cb84>
   2e814:	lsr	r6, r2, #1
   2e818:	cmp	r3, r2, lsr #1
   2e81c:	add	r5, r5, #1
   2e820:	lsl	r1, r1, #1
   2e824:	mov	r2, r6
   2e828:	bne	2e80c <__assert_fail@plt+0x1cb60>
   2e82c:	b	2e868 <__assert_fail@plt+0x1cbbc>
   2e830:	mov	r7, r4
   2e834:	mov	r9, lr
   2e838:	mov	sl, r8
   2e83c:	ldr	r6, [r7], #32
   2e840:	add	r9, r9, #4
   2e844:	add	sl, sl, #4
   2e848:	tst	r6, r1
   2e84c:	beq	2e83c <__assert_fail@plt+0x1cb90>
   2e850:	ldr	r6, [sl]
   2e854:	mov	r7, r0
   2e858:	str	r6, [r7, r5, lsl #2]!
   2e85c:	ldr	r6, [r9]
   2e860:	str	r6, [r7, #1024]	; 0x400
   2e864:	b	2e814 <__assert_fail@plt+0x1cb68>
   2e868:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   2e86c:	cmp	r2, #0
   2e870:	beq	2e8fc <__assert_fail@plt+0x1cc50>
   2e874:	add	r1, sp, #168	; 0xa8
   2e878:	sub	lr, fp, #2048	; 0x800
   2e87c:	mov	r5, #192	; 0xc0
   2e880:	mov	r3, #0
   2e884:	add	r4, r1, #24
   2e888:	sub	r1, lr, #56	; 0x38
   2e88c:	sub	lr, r1, #4
   2e890:	sub	r1, fp, #1024	; 0x400
   2e894:	sub	r1, r1, #56	; 0x38
   2e898:	sub	r8, r1, #4
   2e89c:	mov	r1, #1
   2e8a0:	tst	r2, #1
   2e8a4:	bne	2e8c4 <__assert_fail@plt+0x1cc18>
   2e8a8:	lsr	r6, r2, #1
   2e8ac:	cmp	r3, r2, lsr #1
   2e8b0:	add	r5, r5, #1
   2e8b4:	lsl	r1, r1, #1
   2e8b8:	mov	r2, r6
   2e8bc:	bne	2e8a0 <__assert_fail@plt+0x1cbf4>
   2e8c0:	b	2e8fc <__assert_fail@plt+0x1cc50>
   2e8c4:	mov	r7, r4
   2e8c8:	mov	r9, lr
   2e8cc:	mov	sl, r8
   2e8d0:	ldr	r6, [r7], #32
   2e8d4:	add	r9, r9, #4
   2e8d8:	add	sl, sl, #4
   2e8dc:	tst	r6, r1
   2e8e0:	beq	2e8d0 <__assert_fail@plt+0x1cc24>
   2e8e4:	ldr	r6, [sl]
   2e8e8:	mov	r7, r0
   2e8ec:	str	r6, [r7, r5, lsl #2]!
   2e8f0:	ldr	r6, [r9]
   2e8f4:	str	r6, [r7, #1024]	; 0x400
   2e8f8:	b	2e8a8 <__assert_fail@plt+0x1cbfc>
   2e8fc:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   2e900:	cmp	r2, #0
   2e904:	beq	2e990 <__assert_fail@plt+0x1cce4>
   2e908:	add	r1, sp, #168	; 0xa8
   2e90c:	sub	lr, fp, #2048	; 0x800
   2e910:	mov	r5, #224	; 0xe0
   2e914:	mov	r3, #0
   2e918:	add	r4, r1, #28
   2e91c:	sub	r1, lr, #56	; 0x38
   2e920:	sub	lr, r1, #4
   2e924:	sub	r1, fp, #1024	; 0x400
   2e928:	sub	r1, r1, #56	; 0x38
   2e92c:	sub	r8, r1, #4
   2e930:	mov	r1, #1
   2e934:	tst	r2, #1
   2e938:	bne	2e958 <__assert_fail@plt+0x1ccac>
   2e93c:	lsr	r6, r2, #1
   2e940:	cmp	r3, r2, lsr #1
   2e944:	add	r5, r5, #1
   2e948:	lsl	r1, r1, #1
   2e94c:	mov	r2, r6
   2e950:	bne	2e934 <__assert_fail@plt+0x1cc88>
   2e954:	b	2e990 <__assert_fail@plt+0x1cce4>
   2e958:	mov	r7, r4
   2e95c:	mov	r9, lr
   2e960:	mov	sl, r8
   2e964:	ldr	r6, [r7], #32
   2e968:	add	r9, r9, #4
   2e96c:	add	sl, sl, #4
   2e970:	tst	r6, r1
   2e974:	beq	2e964 <__assert_fail@plt+0x1ccb8>
   2e978:	ldr	r6, [sl]
   2e97c:	mov	r7, r0
   2e980:	str	r6, [r7, r5, lsl #2]!
   2e984:	ldr	r6, [r9]
   2e988:	str	r6, [r7, #1024]	; 0x400
   2e98c:	b	2e93c <__assert_fail@plt+0x1cc90>
   2e990:	ldr	r8, [sp, #132]	; 0x84
   2e994:	tst	ip, #1024	; 0x400
   2e998:	add	r3, sp, #168	; 0xa8
   2e99c:	beq	2e9e0 <__assert_fail@plt+0x1cd34>
   2e9a0:	ldr	r1, [sp, #164]	; 0xa4
   2e9a4:	ldrb	r2, [r3, #1]
   2e9a8:	tst	r2, #4
   2e9ac:	bne	2e9cc <__assert_fail@plt+0x1cd20>
   2e9b0:	ldr	r2, [sp, #128]	; 0x80
   2e9b4:	add	r3, r3, #32
   2e9b8:	subs	r1, r1, #1
   2e9bc:	add	r2, r2, #4
   2e9c0:	str	r2, [sp, #128]	; 0x80
   2e9c4:	bne	2e9a4 <__assert_fail@plt+0x1ccf8>
   2e9c8:	b	2e9e0 <__assert_fail@plt+0x1cd34>
   2e9cc:	ldr	r1, [sp, #128]	; 0x80
   2e9d0:	tst	r8, #1
   2e9d4:	ldr	r1, [r1]
   2e9d8:	str	r1, [r0, #40]	; 0x28
   2e9dc:	strne	r1, [r0, #1064]	; 0x428
   2e9e0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2e9e4:	bl	1c224 <__assert_fail@plt+0xa578>
   2e9e8:	sub	lr, fp, #6144	; 0x1800
   2e9ec:	sub	r0, lr, #104	; 0x68
   2e9f0:	add	r4, r0, #8
   2e9f4:	ldr	r0, [r4], #12
   2e9f8:	bl	1c224 <__assert_fail@plt+0xa578>
   2e9fc:	ldr	r0, [sp, #164]	; 0xa4
   2ea00:	subs	r0, r0, #1
   2ea04:	str	r0, [sp, #164]	; 0xa4
   2ea08:	bne	2e9f4 <__assert_fail@plt+0x1cd48>
   2ea0c:	mov	r0, #1
   2ea10:	sub	sp, fp, #48	; 0x30
   2ea14:	vpop	{d8-d9}
   2ea18:	add	sp, sp, #4
   2ea1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea24:	add	fp, sp, #28
   2ea28:	sub	sp, sp, #68	; 0x44
   2ea2c:	ldr	r4, [r1, #8]
   2ea30:	ldr	r6, [r1, #12]
   2ea34:	mov	r8, r0
   2ea38:	mov	r0, #1
   2ea3c:	mov	r5, r1
   2ea40:	str	r0, [fp, #-36]	; 0xffffffdc
   2ea44:	str	r0, [fp, #-40]	; 0xffffffd8
   2ea48:	mov	r0, #4
   2ea4c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2ea50:	cmp	r0, #0
   2ea54:	str	r0, [fp, #-32]	; 0xffffffe0
   2ea58:	beq	2f138 <__assert_fail@plt+0x1d48c>
   2ea5c:	str	r4, [r0]
   2ea60:	sub	r3, fp, #40	; 0x28
   2ea64:	mov	r0, r8
   2ea68:	mov	r1, r5
   2ea6c:	mov	r2, r6
   2ea70:	str	r5, [sp, #28]
   2ea74:	bl	2f15c <__assert_fail@plt+0x1d4b0>
   2ea78:	cmp	r0, #0
   2ea7c:	bne	2f130 <__assert_fail@plt+0x1d484>
   2ea80:	mov	r4, r6
   2ea84:	mov	r9, #1
   2ea88:	mov	r1, #0
   2ea8c:	str	r8, [sp, #48]	; 0x30
   2ea90:	cmp	r4, #1
   2ea94:	bge	2eac4 <__assert_fail@plt+0x1ce18>
   2ea98:	b	2f0f0 <__assert_fail@plt+0x1d444>
   2ea9c:	mov	r0, r8
   2eaa0:	mov	r1, lr
   2eaa4:	mov	r2, r4
   2eaa8:	sub	r3, fp, #40	; 0x28
   2eaac:	bl	2f15c <__assert_fail@plt+0x1d4b0>
   2eab0:	ldr	r1, [sp, #4]
   2eab4:	cmp	r0, #0
   2eab8:	bne	2f130 <__assert_fail@plt+0x1d484>
   2eabc:	cmp	r4, #1
   2eac0:	blt	2f0f0 <__assert_fail@plt+0x1d444>
   2eac4:	ldr	lr, [sp, #28]
   2eac8:	ldr	r0, [lr]
   2eacc:	ldr	r2, [r0, r4, lsl #2]
   2ead0:	cmp	r2, #0
   2ead4:	mov	r2, #0
   2ead8:	addeq	r2, r1, #1
   2eadc:	ldr	r1, [r8, #120]	; 0x78
   2eae0:	cmp	r2, r1
   2eae4:	bgt	2f0f8 <__assert_fail@plt+0x1d44c>
   2eae8:	mov	r0, #0
   2eaec:	str	r4, [sp, #36]	; 0x24
   2eaf0:	sub	r4, r4, #1
   2eaf4:	str	r2, [sp, #4]
   2eaf8:	str	r0, [fp, #-36]	; 0xffffffdc
   2eafc:	ldr	r0, [r8, #100]	; 0x64
   2eb00:	ldr	r1, [r0, r4, lsl #2]
   2eb04:	cmp	r1, #0
   2eb08:	beq	2ea9c <__assert_fail@plt+0x1cdf0>
   2eb0c:	ldr	r0, [r1, #20]
   2eb10:	cmp	r0, #1
   2eb14:	blt	2ea9c <__assert_fail@plt+0x1cdf0>
   2eb18:	ldr	r0, [r8, #84]	; 0x54
   2eb1c:	mov	r2, #0
   2eb20:	str	r4, [sp, #32]
   2eb24:	str	r1, [sp, #16]
   2eb28:	str	r0, [sp, #24]
   2eb2c:	b	2eb78 <__assert_fail@plt+0x1cecc>
   2eb30:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2eb34:	cmp	r2, #0
   2eb38:	beq	2edc0 <__assert_fail@plt+0x1d114>
   2eb3c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2eb40:	ldr	r6, [fp, #-44]	; 0xffffffd4
   2eb44:	cmp	r1, #0
   2eb48:	bne	2eff8 <__assert_fail@plt+0x1d34c>
   2eb4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2eb50:	str	r6, [r0]
   2eb54:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2eb58:	add	r0, r0, #1
   2eb5c:	str	r0, [fp, #-36]	; 0xffffffdc
   2eb60:	ldr	r1, [sp, #16]
   2eb64:	ldr	r2, [sp, #20]
   2eb68:	ldr	r0, [r1, #20]
   2eb6c:	add	r2, r2, #1
   2eb70:	cmp	r2, r0
   2eb74:	bge	2ea9c <__assert_fail@plt+0x1cdf0>
   2eb78:	ldr	r0, [r1, #24]
   2eb7c:	str	r2, [sp, #20]
   2eb80:	ldr	r2, [r0, r2, lsl #2]
   2eb84:	ldr	r0, [sp, #24]
   2eb88:	ldr	r0, [r0]
   2eb8c:	mov	r1, r2
   2eb90:	str	r2, [fp, #-44]	; 0xffffffd4
   2eb94:	add	r0, r0, r2, lsl #3
   2eb98:	ldrb	r0, [r0, #6]
   2eb9c:	tst	r0, #16
   2eba0:	bne	2ec40 <__assert_fail@plt+0x1cf94>
   2eba4:	ldr	r0, [sp, #24]
   2eba8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2ebac:	mov	r2, r4
   2ebb0:	ldr	r0, [r0]
   2ebb4:	add	r1, r0, r1, lsl #3
   2ebb8:	mov	r0, r8
   2ebbc:	bl	2cad0 <__assert_fail@plt+0x1ae24>
   2ebc0:	ldr	lr, [sp, #28]
   2ebc4:	cmp	r0, #0
   2ebc8:	beq	2eb60 <__assert_fail@plt+0x1ceb4>
   2ebcc:	ldr	r0, [lr]
   2ebd0:	ldr	r1, [sp, #36]	; 0x24
   2ebd4:	ldr	r0, [r0, r1, lsl #2]
   2ebd8:	cmp	r0, #0
   2ebdc:	beq	2eb60 <__assert_fail@plt+0x1ceb4>
   2ebe0:	ldr	r2, [r0, #8]
   2ebe4:	cmp	r2, #1
   2ebe8:	blt	2eb60 <__assert_fail@plt+0x1ceb4>
   2ebec:	ldr	r1, [sp, #24]
   2ebf0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2ebf4:	ldr	r0, [r0, #12]
   2ebf8:	ldr	r1, [r1, #12]
   2ebfc:	ldr	r1, [r1, r3, lsl #2]
   2ec00:	subs	r3, r2, #1
   2ec04:	mov	r2, #0
   2ec08:	beq	2ec2c <__assert_fail@plt+0x1cf80>
   2ec0c:	add	r7, r2, r3
   2ec10:	lsr	r6, r7, #1
   2ec14:	ldr	r5, [r0, r6, lsl #2]
   2ec18:	cmp	r5, r1
   2ec1c:	addlt	r2, r9, r7, lsr #1
   2ec20:	movge	r3, r6
   2ec24:	cmp	r2, r3
   2ec28:	bcc	2ec0c <__assert_fail@plt+0x1cf60>
   2ec2c:	ldr	r2, [r0, r2, lsl #2]
   2ec30:	mov	r0, #1
   2ec34:	cmp	r2, r1
   2ec38:	bne	2eb60 <__assert_fail@plt+0x1ceb4>
   2ec3c:	b	2ec9c <__assert_fail@plt+0x1cff0>
   2ec40:	ldr	r7, [r8, #84]	; 0x54
   2ec44:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2ec48:	mov	r5, r4
   2ec4c:	ldr	r4, [lr, #12]
   2ec50:	mov	r2, r8
   2ec54:	mov	r3, r5
   2ec58:	mov	r0, r7
   2ec5c:	bl	2c744 <__assert_fail@plt+0x1aa98>
   2ec60:	cmp	r0, #1
   2ec64:	blt	2ec8c <__assert_fail@plt+0x1cfe0>
   2ec68:	add	r1, r0, r5
   2ec6c:	cmp	r1, r4
   2ec70:	ble	2ed44 <__assert_fail@plt+0x1d098>
   2ec74:	ldr	lr, [sp, #28]
   2ec78:	ldr	r4, [sp, #32]
   2ec7c:	ldr	ip, [lr, #20]
   2ec80:	cmp	ip, #0
   2ec84:	bne	2eca8 <__assert_fail@plt+0x1cffc>
   2ec88:	b	2eb30 <__assert_fail@plt+0x1ce84>
   2ec8c:	ldr	lr, [sp, #28]
   2ec90:	cmp	r0, #0
   2ec94:	mov	r4, r5
   2ec98:	beq	2eba4 <__assert_fail@plt+0x1cef8>
   2ec9c:	ldr	ip, [lr, #20]
   2eca0:	cmp	ip, #0
   2eca4:	beq	2eb30 <__assert_fail@plt+0x1ce84>
   2eca8:	add	r0, r0, r4
   2ecac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2ecb0:	str	r0, [sp, #40]	; 0x28
   2ecb4:	ldr	r0, [sp, #24]
   2ecb8:	ldr	r0, [r0, #12]
   2ecbc:	ldr	r0, [r0, r1, lsl #2]
   2ecc0:	str	r0, [sp, #8]
   2ecc4:	ldr	r0, [r8, #108]	; 0x6c
   2ecc8:	cmp	r0, #1
   2eccc:	blt	2edec <__assert_fail@plt+0x1d140>
   2ecd0:	ldr	r2, [r8, #116]	; 0x74
   2ecd4:	ldr	r1, [sp, #40]	; 0x28
   2ecd8:	mov	sl, #0
   2ecdc:	mov	r3, r0
   2ece0:	add	r7, r3, sl
   2ece4:	add	r7, r7, r7, lsr #31
   2ece8:	asr	r6, r7, #1
   2ecec:	add	r5, r6, r6, lsl #1
   2ecf0:	add	r5, r2, r5, lsl #3
   2ecf4:	ldr	r5, [r5, #4]
   2ecf8:	cmp	r5, r1
   2ecfc:	addlt	sl, r9, r7, asr #1
   2ed00:	movge	r3, r6
   2ed04:	cmp	sl, r3
   2ed08:	blt	2ece0 <__assert_fail@plt+0x1d034>
   2ed0c:	cmp	sl, r0
   2ed10:	bge	2edfc <__assert_fail@plt+0x1d150>
   2ed14:	ldr	r2, [r8, #116]	; 0x74
   2ed18:	add	r3, sl, sl, lsl #1
   2ed1c:	add	r2, r2, r3, lsl #3
   2ed20:	ldr	r2, [r2, #4]
   2ed24:	cmp	r2, r1
   2ed28:	mvnne	sl, #0
   2ed2c:	cmp	r0, #1
   2ed30:	bge	2ee08 <__assert_fail@plt+0x1d15c>
   2ed34:	mov	r5, #0
   2ed38:	cmp	r5, r0
   2ed3c:	blt	2ee48 <__assert_fail@plt+0x1d19c>
   2ed40:	b	2ee6c <__assert_fail@plt+0x1d1c0>
   2ed44:	ldr	lr, [sp, #28]
   2ed48:	ldr	r4, [sp, #32]
   2ed4c:	ldr	r2, [lr]
   2ed50:	ldr	r2, [r2, r1, lsl #2]
   2ed54:	cmp	r2, #0
   2ed58:	beq	2eba4 <__assert_fail@plt+0x1cef8>
   2ed5c:	ldr	r3, [r2, #8]
   2ed60:	cmp	r3, #1
   2ed64:	blt	2eba4 <__assert_fail@plt+0x1cef8>
   2ed68:	ldr	r1, [r7, #12]
   2ed6c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   2ed70:	ldr	r2, [r2, #12]
   2ed74:	ldr	r1, [r1, r7, lsl #2]
   2ed78:	subs	r7, r3, #1
   2ed7c:	mov	r3, #0
   2ed80:	beq	2eda4 <__assert_fail@plt+0x1d0f8>
   2ed84:	add	r6, r3, r7
   2ed88:	lsr	r5, r6, #1
   2ed8c:	ldr	r4, [r2, r5, lsl #2]
   2ed90:	cmp	r4, r1
   2ed94:	addlt	r3, r9, r6, lsr #1
   2ed98:	movge	r7, r5
   2ed9c:	cmp	r3, r7
   2eda0:	bcc	2ed84 <__assert_fail@plt+0x1d0d8>
   2eda4:	ldr	r4, [sp, #32]
   2eda8:	cmp	r0, #0
   2edac:	beq	2eba4 <__assert_fail@plt+0x1cef8>
   2edb0:	ldr	r2, [r2, r3, lsl #2]
   2edb4:	cmp	r2, r1
   2edb8:	beq	2ec9c <__assert_fail@plt+0x1cff0>
   2edbc:	b	2eba4 <__assert_fail@plt+0x1cef8>
   2edc0:	mov	r0, #4
   2edc4:	str	r9, [fp, #-36]	; 0xffffffdc
   2edc8:	str	r9, [fp, #-40]	; 0xffffffd8
   2edcc:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2edd0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2edd4:	cmp	r0, #0
   2edd8:	str	r0, [fp, #-32]	; 0xffffffe0
   2eddc:	beq	2f11c <__assert_fail@plt+0x1d470>
   2ede0:	ldr	lr, [sp, #28]
   2ede4:	str	r1, [r0]
   2ede8:	b	2eb60 <__assert_fail@plt+0x1ceb4>
   2edec:	ldr	r1, [sp, #40]	; 0x28
   2edf0:	mov	sl, #0
   2edf4:	cmp	sl, r0
   2edf8:	blt	2ed14 <__assert_fail@plt+0x1d068>
   2edfc:	mvn	sl, #0
   2ee00:	cmp	r0, #1
   2ee04:	blt	2ed34 <__assert_fail@plt+0x1d088>
   2ee08:	ldr	r2, [r8, #116]	; 0x74
   2ee0c:	mov	r5, #0
   2ee10:	mov	r3, r0
   2ee14:	add	r7, r3, r5
   2ee18:	add	r7, r7, r7, lsr #31
   2ee1c:	asr	r6, r7, #1
   2ee20:	add	r1, r6, r6, lsl #1
   2ee24:	add	r1, r2, r1, lsl #3
   2ee28:	ldr	r1, [r1, #4]
   2ee2c:	cmp	r1, r4
   2ee30:	addlt	r5, r9, r7, asr #1
   2ee34:	movge	r3, r6
   2ee38:	cmp	r5, r3
   2ee3c:	blt	2ee14 <__assert_fail@plt+0x1d168>
   2ee40:	cmp	r5, r0
   2ee44:	bge	2ee6c <__assert_fail@plt+0x1d1c0>
   2ee48:	ldr	r0, [r8, #116]	; 0x74
   2ee4c:	add	r1, r5, r5, lsl #1
   2ee50:	add	r0, r0, r1, lsl #3
   2ee54:	ldr	r0, [r0, #4]
   2ee58:	cmp	r0, r4
   2ee5c:	mvnne	r5, #0
   2ee60:	cmp	ip, #1
   2ee64:	bge	2ee78 <__assert_fail@plt+0x1d1cc>
   2ee68:	b	2eb30 <__assert_fail@plt+0x1ce84>
   2ee6c:	mvn	r5, #0
   2ee70:	cmp	ip, #1
   2ee74:	blt	2eb30 <__assert_fail@plt+0x1ce84>
   2ee78:	ldr	ip, [r8, #84]	; 0x54
   2ee7c:	mov	r6, #0
   2ee80:	str	ip, [sp, #12]
   2ee84:	ldr	r0, [lr, #24]
   2ee88:	ldr	r3, [r8, #116]	; 0x74
   2ee8c:	ldr	r4, [ip]
   2ee90:	mvn	r8, #0
   2ee94:	ldr	r2, [r0, r6, lsl #2]
   2ee98:	mov	r0, r3
   2ee9c:	add	r1, r2, r2, lsl #1
   2eea0:	ldr	r7, [r0, r1, lsl #3]!
   2eea4:	ldr	r0, [r0, #8]
   2eea8:	ldr	r4, [r4, r7, lsl #3]
   2eeac:	ldr	r7, [sp, #40]	; 0x28
   2eeb0:	cmp	r0, r7
   2eeb4:	str	r4, [sp, #44]	; 0x2c
   2eeb8:	ble	2eed4 <__assert_fail@plt+0x1d228>
   2eebc:	mvn	r9, #0
   2eec0:	ldr	r1, [sp, #36]	; 0x24
   2eec4:	ldr	r4, [sp, #32]
   2eec8:	cmp	r0, r1
   2eecc:	blt	2ef58 <__assert_fail@plt+0x1d2ac>
   2eed0:	b	2efd4 <__assert_fail@plt+0x1d328>
   2eed4:	add	r1, r3, r1, lsl #3
   2eed8:	mov	r9, #1
   2eedc:	ldr	r1, [r1, #12]
   2eee0:	cmp	r1, r7
   2eee4:	blt	2ef48 <__assert_fail@plt+0x1d29c>
   2eee8:	sub	r1, r1, r7
   2eeec:	cmp	r0, r7
   2eef0:	mov	r7, #1
   2eef4:	clz	r1, r1
   2eef8:	lsr	r4, r1, #5
   2eefc:	lsl	r1, r4, #1
   2ef00:	orreq	r1, r7, r4, lsl #1
   2ef04:	cmp	r1, #0
   2ef08:	beq	2efb8 <__assert_fail@plt+0x1d30c>
   2ef0c:	ldr	r4, [sp, #48]	; 0x30
   2ef10:	ldr	r2, [sp, #44]	; 0x2c
   2ef14:	ldr	r3, [sp, #8]
   2ef18:	str	sl, [sp]
   2ef1c:	mov	r0, r4
   2ef20:	bl	30758 <__assert_fail@plt+0x1eaac>
   2ef24:	ldr	lr, [sp, #28]
   2ef28:	mov	r9, r0
   2ef2c:	ldr	r3, [r4, #116]	; 0x74
   2ef30:	ldr	ip, [sp, #12]
   2ef34:	ldr	r0, [lr, #24]
   2ef38:	ldr	r2, [r0, r6, lsl #2]
   2ef3c:	add	r0, r2, r2, lsl #1
   2ef40:	add	r0, r3, r0, lsl #3
   2ef44:	ldr	r0, [r0, #8]
   2ef48:	ldr	r1, [sp, #36]	; 0x24
   2ef4c:	ldr	r4, [sp, #32]
   2ef50:	cmp	r0, r1
   2ef54:	bge	2efd4 <__assert_fail@plt+0x1d328>
   2ef58:	add	r1, r2, r2, lsl #1
   2ef5c:	mov	r8, #1
   2ef60:	add	r1, r3, r1, lsl #3
   2ef64:	ldr	r1, [r1, #12]
   2ef68:	cmp	r1, r4
   2ef6c:	blt	2efd4 <__assert_fail@plt+0x1d328>
   2ef70:	sub	r1, r1, r4
   2ef74:	cmp	r0, r4
   2ef78:	mov	r0, #1
   2ef7c:	clz	r1, r1
   2ef80:	lsr	r2, r1, #5
   2ef84:	lsl	r1, r2, #1
   2ef88:	orreq	r1, r0, r2, lsl #1
   2ef8c:	cmp	r1, #0
   2ef90:	beq	2efd0 <__assert_fail@plt+0x1d324>
   2ef94:	ldr	r0, [sp, #48]	; 0x30
   2ef98:	ldr	r2, [sp, #44]	; 0x2c
   2ef9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2efa0:	str	r5, [sp]
   2efa4:	bl	30758 <__assert_fail@plt+0x1eaac>
   2efa8:	ldr	ip, [sp, #12]
   2efac:	ldr	lr, [sp, #28]
   2efb0:	mov	r8, r0
   2efb4:	b	2efd4 <__assert_fail@plt+0x1d328>
   2efb8:	mov	r9, #0
   2efbc:	ldr	r1, [sp, #36]	; 0x24
   2efc0:	ldr	r4, [sp, #32]
   2efc4:	cmp	r0, r1
   2efc8:	blt	2ef58 <__assert_fail@plt+0x1d2ac>
   2efcc:	b	2efd4 <__assert_fail@plt+0x1d328>
   2efd0:	mov	r8, #0
   2efd4:	cmp	r8, r9
   2efd8:	ldr	r8, [sp, #48]	; 0x30
   2efdc:	mov	r9, #1
   2efe0:	bne	2eb60 <__assert_fail@plt+0x1ceb4>
   2efe4:	ldr	r0, [lr, #20]
   2efe8:	add	r6, r6, #1
   2efec:	cmp	r6, r0
   2eff0:	blt	2ee84 <__assert_fail@plt+0x1d1d8>
   2eff4:	b	2eb30 <__assert_fail@plt+0x1ce84>
   2eff8:	cmp	r2, r1
   2effc:	bne	2f038 <__assert_fail@plt+0x1d38c>
   2f000:	lsl	r0, r2, #1
   2f004:	lsl	r1, r2, #3
   2f008:	str	r0, [fp, #-40]	; 0xffffffd8
   2f00c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f010:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2f014:	cmp	r0, #0
   2f018:	beq	2f154 <__assert_fail@plt+0x1d4a8>
   2f01c:	str	r0, [fp, #-32]	; 0xffffffe0
   2f020:	ldr	lr, [sp, #28]
   2f024:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2f028:	ldr	r2, [r0]
   2f02c:	cmp	r2, r6
   2f030:	bgt	2f048 <__assert_fail@plt+0x1d39c>
   2f034:	b	2f0b8 <__assert_fail@plt+0x1d40c>
   2f038:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f03c:	ldr	r2, [r0]
   2f040:	cmp	r2, r6
   2f044:	ble	2f0b8 <__assert_fail@plt+0x1d40c>
   2f048:	cmp	r1, #1
   2f04c:	blt	2f0e8 <__assert_fail@plt+0x1d43c>
   2f050:	ands	r3, r1, #3
   2f054:	sub	ip, r1, #1
   2f058:	beq	2f07c <__assert_fail@plt+0x1d3d0>
   2f05c:	add	r2, r0, r1, lsl #2
   2f060:	mov	r7, r2
   2f064:	ldr	r5, [r7, #-4]!
   2f068:	subs	r3, r3, #1
   2f06c:	sub	r1, r1, #1
   2f070:	str	r5, [r2]
   2f074:	mov	r2, r7
   2f078:	bne	2f064 <__assert_fail@plt+0x1d3b8>
   2f07c:	cmp	ip, #3
   2f080:	bcc	2f0b0 <__assert_fail@plt+0x1d404>
   2f084:	add	r2, r0, r1, lsl #2
   2f088:	sub	r2, r2, #8
   2f08c:	ldr	r5, [r2, #4]
   2f090:	ldmda	r2, {r3, r7, ip}
   2f094:	sub	sl, r2, #4
   2f098:	sub	r1, r1, #4
   2f09c:	cmp	r1, #0
   2f0a0:	stm	sl, {r3, r7, ip}
   2f0a4:	str	r5, [r2, #8]
   2f0a8:	sub	r2, r2, #16
   2f0ac:	bgt	2f08c <__assert_fail@plt+0x1d3e0>
   2f0b0:	mov	r1, #0
   2f0b4:	b	2f0e8 <__assert_fail@plt+0x1d43c>
   2f0b8:	add	r2, r0, r1, lsl #2
   2f0bc:	ldr	r3, [r2, #-4]
   2f0c0:	cmp	r3, r6
   2f0c4:	ble	2f0e8 <__assert_fail@plt+0x1d43c>
   2f0c8:	sub	r1, r1, #2
   2f0cc:	str	r3, [r2]
   2f0d0:	sub	r1, r1, #1
   2f0d4:	ldr	r3, [r2, #-8]
   2f0d8:	sub	r2, r2, #4
   2f0dc:	cmp	r3, r6
   2f0e0:	bgt	2f0cc <__assert_fail@plt+0x1d420>
   2f0e4:	add	r1, r1, #2
   2f0e8:	str	r6, [r0, r1, lsl #2]
   2f0ec:	b	2eb54 <__assert_fail@plt+0x1cea8>
   2f0f0:	mov	r7, #0
   2f0f4:	b	2f108 <__assert_fail@plt+0x1d45c>
   2f0f8:	lsl	r2, r4, #2
   2f0fc:	mov	r1, #0
   2f100:	mov	r7, #0
   2f104:	bl	11b2c <memset@plt>
   2f108:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f10c:	bl	1c224 <__assert_fail@plt+0xa578>
   2f110:	mov	r0, r7
   2f114:	sub	sp, fp, #28
   2f118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f11c:	mov	r0, #0
   2f120:	mov	r7, #12
   2f124:	str	r0, [fp, #-40]	; 0xffffffd8
   2f128:	str	r0, [fp, #-36]	; 0xffffffdc
   2f12c:	b	2f108 <__assert_fail@plt+0x1d45c>
   2f130:	mov	r7, r0
   2f134:	b	2f108 <__assert_fail@plt+0x1d45c>
   2f138:	mov	r0, #0
   2f13c:	mov	r7, #12
   2f140:	str	r0, [fp, #-40]	; 0xffffffd8
   2f144:	str	r0, [fp, #-36]	; 0xffffffdc
   2f148:	mov	r0, r7
   2f14c:	sub	sp, fp, #28
   2f150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f154:	mov	r7, #12
   2f158:	b	2f108 <__assert_fail@plt+0x1d45c>
   2f15c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f160:	add	fp, sp, #28
   2f164:	sub	sp, sp, #140	; 0x8c
   2f168:	mov	r5, r1
   2f16c:	ldr	r1, [r0, #84]	; 0x54
   2f170:	mov	ip, r2
   2f174:	mov	r2, #0
   2f178:	str	r0, [sp, #76]	; 0x4c
   2f17c:	str	r2, [fp, #-76]	; 0xffffffb4
   2f180:	str	ip, [sp, #80]	; 0x50
   2f184:	str	r5, [sp, #84]	; 0x54
   2f188:	str	r1, [fp, #-80]	; 0xffffffb0
   2f18c:	ldr	r1, [r0, #100]	; 0x64
   2f190:	ldr	r8, [r1, ip, lsl #2]
   2f194:	ldr	r1, [r3, #4]
   2f198:	cmp	r8, #0
   2f19c:	mov	r6, r8
   2f1a0:	addne	r6, r6, #4
   2f1a4:	cmp	r1, #0
   2f1a8:	str	r6, [sp, #68]	; 0x44
   2f1ac:	beq	2f590 <__assert_fail@plt+0x1d8e4>
   2f1b0:	mov	r9, r3
   2f1b4:	cmp	r8, #0
   2f1b8:	beq	2f5b0 <__assert_fail@plt+0x1d904>
   2f1bc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2f1c0:	mov	r0, #0
   2f1c4:	mov	r2, r9
   2f1c8:	str	r9, [sp, #60]	; 0x3c
   2f1cc:	str	r0, [fp, #-72]	; 0xffffffb8
   2f1d0:	sub	r0, fp, #72	; 0x48
   2f1d4:	bl	2c414 <__assert_fail@plt+0x1a768>
   2f1d8:	ldr	r9, [fp, #-72]	; 0xffffffb8
   2f1dc:	cmp	r9, #0
   2f1e0:	bne	30068 <__assert_fail@plt+0x1e3bc>
   2f1e4:	mov	r4, r0
   2f1e8:	mov	r5, r0
   2f1ec:	ldr	r0, [r4, #28]!
   2f1f0:	cmp	r0, #0
   2f1f4:	bne	2f28c <__assert_fail@plt+0x1d5e0>
   2f1f8:	ldr	r0, [sp, #60]	; 0x3c
   2f1fc:	mov	r1, #0
   2f200:	ldr	r0, [r0, #4]
   2f204:	str	r0, [r5, #28]
   2f208:	lsl	r0, r0, #2
   2f20c:	str	r1, [r5, #32]
   2f210:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2f214:	cmp	r0, #0
   2f218:	mov	r1, #12
   2f21c:	mov	r9, #12
   2f220:	str	r0, [r5, #36]	; 0x24
   2f224:	movne	r1, #0
   2f228:	cmp	r0, #0
   2f22c:	str	r1, [fp, #-72]	; 0xffffffb8
   2f230:	beq	30068 <__assert_fail@plt+0x1e3bc>
   2f234:	ldr	r0, [sp, #60]	; 0x3c
   2f238:	ldr	r0, [r0, #4]
   2f23c:	cmp	r0, #1
   2f240:	blt	2f28c <__assert_fail@plt+0x1d5e0>
   2f244:	ldr	r7, [sp, #60]	; 0x3c
   2f248:	mov	r5, #0
   2f24c:	ldr	r0, [r7, #8]
   2f250:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2f254:	ldr	r0, [r0, r5, lsl #2]
   2f258:	ldr	r1, [r1, #28]
   2f25c:	add	r0, r0, r0, lsl #1
   2f260:	add	r1, r1, r0, lsl #2
   2f264:	mov	r0, r4
   2f268:	bl	28128 <__assert_fail@plt+0x1647c>
   2f26c:	cmp	r0, #0
   2f270:	bne	30064 <__assert_fail@plt+0x1e3b8>
   2f274:	ldr	r0, [r7, #4]
   2f278:	add	r5, r5, #1
   2f27c:	cmp	r5, r0
   2f280:	blt	2f24c <__assert_fail@plt+0x1d5a0>
   2f284:	mov	r0, #0
   2f288:	str	r0, [fp, #-72]	; 0xffffffb8
   2f28c:	ldr	r0, [sp, #60]	; 0x3c
   2f290:	mov	r1, r6
   2f294:	mov	r2, r4
   2f298:	bl	300d8 <__assert_fail@plt+0x1e42c>
   2f29c:	cmp	r0, #0
   2f2a0:	str	r0, [fp, #-76]	; 0xffffffb4
   2f2a4:	bne	30090 <__assert_fail@plt+0x1e3e4>
   2f2a8:	ldr	r5, [sp, #84]	; 0x54
   2f2ac:	ldr	r9, [sp, #60]	; 0x3c
   2f2b0:	ldr	r0, [r5, #20]
   2f2b4:	cmp	r0, #0
   2f2b8:	beq	2f5b0 <__assert_fail@plt+0x1d904>
   2f2bc:	ldr	lr, [sp, #80]	; 0x50
   2f2c0:	cmp	r0, #1
   2f2c4:	str	r8, [sp, #56]	; 0x38
   2f2c8:	blt	2f5a4 <__assert_fail@plt+0x1d8f8>
   2f2cc:	ldr	r0, [sp, #76]	; 0x4c
   2f2d0:	mov	r1, #0
   2f2d4:	ldr	r0, [r0, #116]	; 0x74
   2f2d8:	str	r0, [sp, #64]	; 0x40
   2f2dc:	b	2f2f4 <__assert_fail@plt+0x1d648>
   2f2e0:	ldr	r1, [sp, #72]	; 0x48
   2f2e4:	ldr	r0, [r5, #20]
   2f2e8:	add	r1, r1, #1
   2f2ec:	cmp	r1, r0
   2f2f0:	bge	2f5a4 <__assert_fail@plt+0x1d8f8>
   2f2f4:	ldr	r0, [r5, #24]
   2f2f8:	str	r1, [sp, #72]	; 0x48
   2f2fc:	ldr	r0, [r0, r1, lsl #2]
   2f300:	ldr	r1, [sp, #64]	; 0x40
   2f304:	add	r0, r0, r0, lsl #1
   2f308:	add	r1, r1, r0, lsl #3
   2f30c:	ldr	r2, [r1, #8]
   2f310:	cmp	r2, lr
   2f314:	bge	2f2e0 <__assert_fail@plt+0x1d634>
   2f318:	ldr	r1, [r1, #4]
   2f31c:	cmp	r1, lr
   2f320:	blt	2f2e0 <__assert_fail@plt+0x1d634>
   2f324:	ldr	r1, [sp, #64]	; 0x40
   2f328:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2f32c:	ldr	r0, [r1, r0, lsl #3]!
   2f330:	ldr	r2, [r2]
   2f334:	ldr	r1, [r1, #12]
   2f338:	ldr	r6, [r2, r0, lsl #3]
   2f33c:	ldr	r0, [r9, #4]
   2f340:	cmp	r1, lr
   2f344:	bne	2f520 <__assert_fail@plt+0x1d874>
   2f348:	cmp	r0, #1
   2f34c:	blt	2f2e0 <__assert_fail@plt+0x1d634>
   2f350:	ldr	r3, [r9, #8]
   2f354:	mvn	r8, #0
   2f358:	mvn	r1, #0
   2f35c:	b	2f37c <__assert_fail@plt+0x1d6d0>
   2f360:	ldr	r4, [r2, r7, lsl #3]
   2f364:	cmp	r6, r4
   2f368:	moveq	r8, r7
   2f36c:	mov	r4, #1
   2f370:	add	r3, r3, #4
   2f374:	subs	r0, r0, #1
   2f378:	beq	2f3b4 <__assert_fail@plt+0x1d708>
   2f37c:	ldr	r7, [r3]
   2f380:	add	r4, r2, r7, lsl #3
   2f384:	ldrb	r4, [r4, #4]
   2f388:	cmp	r4, #9
   2f38c:	beq	2f360 <__assert_fail@plt+0x1d6b4>
   2f390:	cmp	r4, #8
   2f394:	bne	2f36c <__assert_fail@plt+0x1d6c0>
   2f398:	ldr	r4, [r2, r7, lsl #3]
   2f39c:	cmp	r6, r4
   2f3a0:	moveq	r1, r7
   2f3a4:	mov	r4, #1
   2f3a8:	add	r3, r3, #4
   2f3ac:	subs	r0, r0, #1
   2f3b0:	bne	2f37c <__assert_fail@plt+0x1d6d0>
   2f3b4:	ldr	r3, [sp, #68]	; 0x44
   2f3b8:	cmp	r1, #0
   2f3bc:	bmi	2f3d8 <__assert_fail@plt+0x1d72c>
   2f3c0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f3c4:	ldr	r2, [sp, #60]	; 0x3c
   2f3c8:	bl	302cc <__assert_fail@plt+0x1e620>
   2f3cc:	ldr	lr, [sp, #80]	; 0x50
   2f3d0:	cmp	r0, #0
   2f3d4:	bne	30018 <__assert_fail@plt+0x1e36c>
   2f3d8:	ldr	r9, [sp, #60]	; 0x3c
   2f3dc:	cmp	r8, #0
   2f3e0:	bmi	2f2e0 <__assert_fail@plt+0x1d634>
   2f3e4:	ldr	ip, [r9, #4]
   2f3e8:	cmp	ip, #1
   2f3ec:	blt	2f2e0 <__assert_fail@plt+0x1d634>
   2f3f0:	mov	sl, #0
   2f3f4:	b	2f42c <__assert_fail@plt+0x1d780>
   2f3f8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f3fc:	ldr	r3, [sp, #68]	; 0x44
   2f400:	mov	r2, r9
   2f404:	bl	302cc <__assert_fail@plt+0x1e620>
   2f408:	cmp	r0, #0
   2f40c:	bne	30018 <__assert_fail@plt+0x1e36c>
   2f410:	ldr	ip, [r9, #4]
   2f414:	ldr	lr, [sp, #80]	; 0x50
   2f418:	sub	sl, sl, #1
   2f41c:	mov	r1, r9
   2f420:	add	sl, sl, #1
   2f424:	cmp	sl, ip
   2f428:	bge	2f2e0 <__assert_fail@plt+0x1d634>
   2f42c:	ldr	r1, [r9, #8]
   2f430:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f434:	ldr	r1, [r1, sl, lsl #2]
   2f438:	ldr	r3, [r0, #28]
   2f43c:	add	r2, r1, r1, lsl #1
   2f440:	add	r3, r3, r2, lsl #2
   2f444:	ldr	r7, [r3, #4]
   2f448:	cmp	r7, #1
   2f44c:	blt	2f4ac <__assert_fail@plt+0x1d800>
   2f450:	ldr	r3, [r3, #8]
   2f454:	mov	lr, ip
   2f458:	subs	r6, r7, #1
   2f45c:	beq	2f490 <__assert_fail@plt+0x1d7e4>
   2f460:	mov	r7, #0
   2f464:	add	r4, r7, r6
   2f468:	mov	ip, #1
   2f46c:	lsr	r0, r4, #1
   2f470:	ldr	r5, [r3, r0, lsl #2]
   2f474:	cmp	r5, r8
   2f478:	addlt	r7, ip, r4, lsr #1
   2f47c:	movge	r6, r0
   2f480:	mov	r4, #1
   2f484:	cmp	r7, r6
   2f488:	bcc	2f464 <__assert_fail@plt+0x1d7b8>
   2f48c:	b	2f494 <__assert_fail@plt+0x1d7e8>
   2f490:	mov	r7, #0
   2f494:	ldr	r0, [r3, r7, lsl #2]
   2f498:	mov	ip, lr
   2f49c:	ldr	r5, [sp, #84]	; 0x54
   2f4a0:	ldr	lr, [sp, #80]	; 0x50
   2f4a4:	cmp	r0, r8
   2f4a8:	beq	2f420 <__assert_fail@plt+0x1d774>
   2f4ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f4b0:	ldr	r0, [r0, #24]
   2f4b4:	add	r2, r0, r2, lsl #2
   2f4b8:	ldr	r3, [r2, #4]
   2f4bc:	cmp	r3, #1
   2f4c0:	blt	2f3f8 <__assert_fail@plt+0x1d74c>
   2f4c4:	ldr	r2, [r2, #8]
   2f4c8:	subs	r7, r3, #1
   2f4cc:	beq	2f508 <__assert_fail@plt+0x1d85c>
   2f4d0:	mov	r3, #0
   2f4d4:	add	r0, r3, r7
   2f4d8:	lsr	r6, r0, #1
   2f4dc:	ldr	r5, [r2, r6, lsl #2]
   2f4e0:	cmp	r5, r8
   2f4e4:	addlt	r3, r4, r0, lsr #1
   2f4e8:	movge	r7, r6
   2f4ec:	cmp	r3, r7
   2f4f0:	bcc	2f4d4 <__assert_fail@plt+0x1d828>
   2f4f4:	ldr	r0, [r2, r3, lsl #2]
   2f4f8:	ldr	r5, [sp, #84]	; 0x54
   2f4fc:	cmp	r0, r8
   2f500:	bne	2f3f8 <__assert_fail@plt+0x1d74c>
   2f504:	b	2f420 <__assert_fail@plt+0x1d774>
   2f508:	mov	r3, #0
   2f50c:	ldr	r0, [r2, r3, lsl #2]
   2f510:	ldr	r5, [sp, #84]	; 0x54
   2f514:	cmp	r0, r8
   2f518:	beq	2f420 <__assert_fail@plt+0x1d774>
   2f51c:	b	2f3f8 <__assert_fail@plt+0x1d74c>
   2f520:	cmp	r0, #1
   2f524:	blt	2f2e0 <__assert_fail@plt+0x1d634>
   2f528:	mov	r7, #0
   2f52c:	ldr	r1, [r9, #8]
   2f530:	ldr	r1, [r1, r7, lsl #2]
   2f534:	add	r3, r2, r1, lsl #3
   2f538:	ldrb	r3, [r3, #4]
   2f53c:	orr	r3, r3, #1
   2f540:	cmp	r3, #9
   2f544:	bne	2f578 <__assert_fail@plt+0x1d8cc>
   2f548:	ldr	r2, [r2, r1, lsl #3]
   2f54c:	cmp	r6, r2
   2f550:	bne	2f578 <__assert_fail@plt+0x1d8cc>
   2f554:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f558:	ldr	r3, [sp, #68]	; 0x44
   2f55c:	mov	r2, r9
   2f560:	bl	302cc <__assert_fail@plt+0x1e620>
   2f564:	cmp	r0, #0
   2f568:	bne	30018 <__assert_fail@plt+0x1e36c>
   2f56c:	ldr	r0, [r9, #4]
   2f570:	ldr	lr, [sp, #80]	; 0x50
   2f574:	mov	r1, r9
   2f578:	add	r7, r7, #1
   2f57c:	cmp	r7, r0
   2f580:	bge	2f2e0 <__assert_fail@plt+0x1d634>
   2f584:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2f588:	ldr	r2, [r1]
   2f58c:	b	2f52c <__assert_fail@plt+0x1d880>
   2f590:	ldr	r1, [r5]
   2f594:	str	r2, [r1, ip, lsl #2]
   2f598:	cmp	r8, #0
   2f59c:	bne	2f5e4 <__assert_fail@plt+0x1d938>
   2f5a0:	b	30008 <__assert_fail@plt+0x1e35c>
   2f5a4:	ldr	r8, [sp, #56]	; 0x38
   2f5a8:	mov	r0, #0
   2f5ac:	str	r0, [fp, #-76]	; 0xffffffb4
   2f5b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2f5b4:	sub	r0, fp, #76	; 0x4c
   2f5b8:	mov	r2, r9
   2f5bc:	bl	2c414 <__assert_fail@plt+0x1a768>
   2f5c0:	ldr	r1, [r5]
   2f5c4:	ldr	ip, [sp, #80]	; 0x50
   2f5c8:	str	r0, [r1, ip, lsl #2]
   2f5cc:	ldr	r0, [sp, #76]	; 0x4c
   2f5d0:	ldr	r9, [fp, #-76]	; 0xffffffb4
   2f5d4:	cmp	r9, #0
   2f5d8:	bne	3000c <__assert_fail@plt+0x1e360>
   2f5dc:	cmp	r8, #0
   2f5e0:	beq	30008 <__assert_fail@plt+0x1e35c>
   2f5e4:	ldr	r1, [r0, #100]	; 0x64
   2f5e8:	ldr	r1, [r1, ip, lsl #2]
   2f5ec:	ldrb	r1, [r1, #52]	; 0x34
   2f5f0:	tst	r1, #64	; 0x40
   2f5f4:	beq	30008 <__assert_fail@plt+0x1e35c>
   2f5f8:	ldr	lr, [r0, #108]	; 0x6c
   2f5fc:	ldr	r8, [r0, #84]	; 0x54
   2f600:	cmp	lr, #1
   2f604:	blt	2fff4 <__assert_fail@plt+0x1e348>
   2f608:	ldr	r1, [r0, #116]	; 0x74
   2f60c:	mov	r4, #0
   2f610:	mov	r2, #1
   2f614:	mov	r3, lr
   2f618:	add	r7, r3, r4
   2f61c:	add	r7, r7, r7, lsr #31
   2f620:	asr	r6, r7, #1
   2f624:	add	r5, r6, r6, lsl #1
   2f628:	add	r5, r1, r5, lsl #3
   2f62c:	ldr	r5, [r5, #4]
   2f630:	cmp	r5, ip
   2f634:	addlt	r4, r2, r7, asr #1
   2f638:	movge	r3, r6
   2f63c:	cmp	r4, r3
   2f640:	blt	2f618 <__assert_fail@plt+0x1d96c>
   2f644:	cmp	r4, lr
   2f648:	bge	30000 <__assert_fail@plt+0x1e354>
   2f64c:	cmn	r4, #1
   2f650:	beq	30000 <__assert_fail@plt+0x1e354>
   2f654:	ldr	r0, [sp, #76]	; 0x4c
   2f658:	add	r1, r4, r4, lsl #1
   2f65c:	str	r1, [sp, #28]
   2f660:	ldr	r0, [r0, #116]	; 0x74
   2f664:	add	r0, r0, r1, lsl #3
   2f668:	ldr	r0, [r0, #4]
   2f66c:	cmp	r0, ip
   2f670:	bne	30000 <__assert_fail@plt+0x1e354>
   2f674:	ldr	r1, [sp, #68]	; 0x44
   2f678:	mov	r2, #0
   2f67c:	str	r2, [fp, #-72]	; 0xffffffb8
   2f680:	ldr	r0, [r1, #4]
   2f684:	cmp	r0, #0
   2f688:	ble	3002c <__assert_fail@plt+0x1e380>
   2f68c:	str	r4, [sp, #20]
   2f690:	add	r0, ip, #1
   2f694:	ldr	r4, [sp, #84]	; 0x54
   2f698:	mov	r9, #0
   2f69c:	str	r8, [sp, #36]	; 0x24
   2f6a0:	str	r0, [sp, #12]
   2f6a4:	sub	r0, fp, #72	; 0x48
   2f6a8:	add	r0, r0, #16
   2f6ac:	str	r0, [sp, #8]
   2f6b0:	mov	r0, #0
   2f6b4:	str	r0, [sp, #48]	; 0x30
   2f6b8:	b	2f6d0 <__assert_fail@plt+0x1da24>
   2f6bc:	ldr	r1, [sp, #68]	; 0x44
   2f6c0:	add	r9, r9, #1
   2f6c4:	ldr	r0, [r1, #4]
   2f6c8:	cmp	r9, r0
   2f6cc:	bge	30034 <__assert_fail@plt+0x1e388>
   2f6d0:	ldr	r0, [r1, #8]
   2f6d4:	ldr	r1, [r4, #8]
   2f6d8:	ldr	r3, [r0, r9, lsl #2]
   2f6dc:	ldr	r0, [r8]
   2f6e0:	add	r0, r0, r3, lsl #3
   2f6e4:	cmp	r3, r1
   2f6e8:	ldrb	r0, [r0, #4]
   2f6ec:	bne	2f708 <__assert_fail@plt+0x1da5c>
   2f6f0:	cmp	r0, #4
   2f6f4:	bne	2f6bc <__assert_fail@plt+0x1da10>
   2f6f8:	ldr	r0, [r4, #12]
   2f6fc:	cmp	r0, ip
   2f700:	bne	2f710 <__assert_fail@plt+0x1da64>
   2f704:	b	2f6bc <__assert_fail@plt+0x1da10>
   2f708:	cmp	r0, #4
   2f70c:	bne	2f6bc <__assert_fail@plt+0x1da10>
   2f710:	ldr	r0, [sp, #76]	; 0x4c
   2f714:	ldr	r1, [sp, #28]
   2f718:	ldr	r5, [sp, #20]
   2f71c:	str	r9, [sp, #40]	; 0x28
   2f720:	str	r3, [sp, #56]	; 0x38
   2f724:	ldr	r0, [r0, #116]	; 0x74
   2f728:	add	r7, r0, r1, lsl #3
   2f72c:	ldr	r0, [r7]
   2f730:	cmp	r0, r3
   2f734:	beq	2fe80 <__assert_fail@plt+0x1e1d4>
   2f738:	b	2ffd8 <__assert_fail@plt+0x1e32c>
   2f73c:	mov	r8, lr
   2f740:	ldr	r4, [sp, #84]	; 0x54
   2f744:	ldr	r3, [sp, #56]	; 0x38
   2f748:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2f74c:	ldr	lr, [sp, #64]	; 0x40
   2f750:	b	2ffd8 <__assert_fail@plt+0x1e32c>
   2f754:	mov	r9, #0
   2f758:	ldr	r3, [sp, #76]	; 0x4c
   2f75c:	cmp	r9, r0
   2f760:	blt	2ff6c <__assert_fail@plt+0x1e2c0>
   2f764:	mvn	r9, #0
   2f768:	cmp	r0, #1
   2f76c:	blt	2ff8c <__assert_fail@plt+0x1e2e0>
   2f770:	ldr	r1, [r3, #116]	; 0x74
   2f774:	ldr	lr, [sp, #64]	; 0x40
   2f778:	mov	r8, #0
   2f77c:	mov	r2, r0
   2f780:	add	r3, r2, r8
   2f784:	add	r3, r3, r3, lsr #31
   2f788:	asr	r6, r3, #1
   2f78c:	add	r5, r6, r6, lsl #1
   2f790:	add	r5, r1, r5, lsl #3
   2f794:	ldr	r5, [r5, #4]
   2f798:	cmp	r5, sl
   2f79c:	addlt	r8, r4, r3, asr #1
   2f7a0:	movge	r2, r6
   2f7a4:	cmp	r8, r2
   2f7a8:	blt	2f780 <__assert_fail@plt+0x1dad4>
   2f7ac:	ldr	r3, [sp, #76]	; 0x4c
   2f7b0:	cmp	r8, r0
   2f7b4:	bge	2ffa0 <__assert_fail@plt+0x1e2f4>
   2f7b8:	ldr	r0, [r3, #116]	; 0x74
   2f7bc:	add	r1, r8, r8, lsl #1
   2f7c0:	add	r0, r0, r1, lsl #3
   2f7c4:	ldr	r0, [r0, #4]
   2f7c8:	cmp	r0, sl
   2f7cc:	mvnne	r8, #0
   2f7d0:	ldr	r5, [sp, #84]	; 0x54
   2f7d4:	ldr	r4, [r5, #20]
   2f7d8:	cmp	r4, #1
   2f7dc:	blt	2f960 <__assert_fail@plt+0x1dcb4>
   2f7e0:	ldr	r0, [r3, #84]	; 0x54
   2f7e4:	mov	r6, #0
   2f7e8:	str	r0, [sp, #60]	; 0x3c
   2f7ec:	ldr	r0, [r5, #24]
   2f7f0:	ldr	r3, [r3, #116]	; 0x74
   2f7f4:	ldr	r4, [sp, #60]	; 0x3c
   2f7f8:	ldr	r2, [r0, r6, lsl #2]
   2f7fc:	mov	r0, r3
   2f800:	ldr	r4, [r4]
   2f804:	add	r1, r2, r2, lsl #1
   2f808:	ldr	r5, [r0, r1, lsl #3]!
   2f80c:	ldr	r0, [r0, #8]
   2f810:	ldr	r4, [r4, r5, lsl #3]
   2f814:	mvn	r5, #0
   2f818:	cmp	r0, ip
   2f81c:	str	r4, [sp, #72]	; 0x48
   2f820:	ble	2f834 <__assert_fail@plt+0x1db88>
   2f824:	mvn	r4, #0
   2f828:	cmp	r0, sl
   2f82c:	ble	2f8bc <__assert_fail@plt+0x1dc10>
   2f830:	b	2f918 <__assert_fail@plt+0x1dc6c>
   2f834:	add	r1, r3, r1, lsl #3
   2f838:	mov	r4, #1
   2f83c:	ldr	r1, [r1, #12]
   2f840:	cmp	r1, ip
   2f844:	blt	2f8b4 <__assert_fail@plt+0x1dc08>
   2f848:	sub	r1, r1, ip
   2f84c:	cmp	r0, ip
   2f850:	mov	lr, #1
   2f854:	clz	r1, r1
   2f858:	lsr	r4, r1, #5
   2f85c:	lsl	r1, r4, #1
   2f860:	orreq	r1, lr, r4, lsl #1
   2f864:	cmp	r1, #0
   2f868:	beq	2f8ac <__assert_fail@plt+0x1dc00>
   2f86c:	ldr	r0, [sp, #76]	; 0x4c
   2f870:	ldr	r2, [sp, #72]	; 0x48
   2f874:	ldr	r3, [sp, #56]	; 0x38
   2f878:	str	r9, [sp]
   2f87c:	bl	30758 <__assert_fail@plt+0x1eaac>
   2f880:	mov	r4, r0
   2f884:	ldr	r0, [sp, #84]	; 0x54
   2f888:	ldr	r1, [sp, #76]	; 0x4c
   2f88c:	ldr	ip, [sp, #80]	; 0x50
   2f890:	ldr	r0, [r0, #24]
   2f894:	ldr	r3, [r1, #116]	; 0x74
   2f898:	ldr	r2, [r0, r6, lsl #2]
   2f89c:	add	r0, r2, r2, lsl #1
   2f8a0:	add	r0, r3, r0, lsl #3
   2f8a4:	ldr	r0, [r0, #8]
   2f8a8:	b	2f8b0 <__assert_fail@plt+0x1dc04>
   2f8ac:	mov	r4, #0
   2f8b0:	ldr	lr, [sp, #64]	; 0x40
   2f8b4:	cmp	r0, sl
   2f8b8:	bgt	2f918 <__assert_fail@plt+0x1dc6c>
   2f8bc:	add	r1, r2, r2, lsl #1
   2f8c0:	mov	r5, #1
   2f8c4:	add	r1, r3, r1, lsl #3
   2f8c8:	ldr	r1, [r1, #12]
   2f8cc:	cmp	r1, sl
   2f8d0:	blt	2f918 <__assert_fail@plt+0x1dc6c>
   2f8d4:	sub	r1, r1, sl
   2f8d8:	cmp	r0, sl
   2f8dc:	mov	r0, #1
   2f8e0:	clz	r1, r1
   2f8e4:	lsr	r2, r1, #5
   2f8e8:	lsl	r1, r2, #1
   2f8ec:	orreq	r1, r0, r2, lsl #1
   2f8f0:	cmp	r1, #0
   2f8f4:	beq	2f93c <__assert_fail@plt+0x1dc90>
   2f8f8:	ldr	r0, [sp, #76]	; 0x4c
   2f8fc:	ldr	r2, [sp, #72]	; 0x48
   2f900:	ldr	r3, [sp, #52]	; 0x34
   2f904:	str	r8, [sp]
   2f908:	bl	30758 <__assert_fail@plt+0x1eaac>
   2f90c:	ldr	lr, [sp, #64]	; 0x40
   2f910:	ldr	ip, [sp, #80]	; 0x50
   2f914:	mov	r5, r0
   2f918:	cmp	r5, r4
   2f91c:	bne	2f948 <__assert_fail@plt+0x1dc9c>
   2f920:	ldr	r5, [sp, #84]	; 0x54
   2f924:	ldr	r3, [sp, #76]	; 0x4c
   2f928:	add	r6, r6, #1
   2f92c:	ldr	r4, [r5, #20]
   2f930:	cmp	r6, r4
   2f934:	blt	2f7ec <__assert_fail@plt+0x1db40>
   2f938:	b	2f960 <__assert_fail@plt+0x1dcb4>
   2f93c:	mov	r5, #0
   2f940:	cmp	r5, r4
   2f944:	beq	2f920 <__assert_fail@plt+0x1dc74>
   2f948:	ldr	r4, [sp, #84]	; 0x54
   2f94c:	ldr	r8, [sp, #36]	; 0x24
   2f950:	ldr	r9, [sp, #40]	; 0x28
   2f954:	ldr	r3, [sp, #56]	; 0x38
   2f958:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2f95c:	b	2ffd8 <__assert_fail@plt+0x1e32c>
   2f960:	ldr	r0, [sp, #48]	; 0x30
   2f964:	cmp	r0, #0
   2f968:	beq	2f9a8 <__assert_fail@plt+0x1dcfc>
   2f96c:	ldr	r0, [sp, #56]	; 0x38
   2f970:	str	ip, [fp, #-60]	; 0xffffffc4
   2f974:	ldr	r8, [sp, #36]	; 0x24
   2f978:	ldr	r9, [fp, #-80]	; 0xffffffb0
   2f97c:	str	r0, [fp, #-64]	; 0xffffffc0
   2f980:	ldr	r0, [sp, #24]
   2f984:	cmp	r0, #0
   2f988:	beq	2fb2c <__assert_fail@plt+0x1de80>
   2f98c:	ldr	r6, [sp, #44]	; 0x2c
   2f990:	cmp	r6, #0
   2f994:	bne	2fe60 <__assert_fail@plt+0x1e1b4>
   2f998:	mov	r6, #1
   2f99c:	str	r9, [lr]
   2f9a0:	str	lr, [sp, #32]
   2f9a4:	b	2fbb8 <__assert_fail@plt+0x1df0c>
   2f9a8:	mov	r0, r5
   2f9ac:	mov	r1, #12
   2f9b0:	ldr	r8, [sp, #36]	; 0x24
   2f9b4:	ldr	r9, [fp, #-80]	; 0xffffffb0
   2f9b8:	cmp	r4, #1
   2f9bc:	vld1.32	{d16-d17}, [r0], r1
   2f9c0:	sub	r1, fp, #72	; 0x48
   2f9c4:	vld1.32	{d18-d19}, [r0]
   2f9c8:	add	r0, r1, #12
   2f9cc:	vst1.32	{d18-d19}, [r0]
   2f9d0:	mov	r0, r1
   2f9d4:	mov	r1, #20
   2f9d8:	vst1.64	{d16-d17}, [r0], r1
   2f9dc:	str	r4, [r0]
   2f9e0:	blt	2fb0c <__assert_fail@plt+0x1de60>
   2f9e4:	lsl	r0, r4, #2
   2f9e8:	str	r4, [fp, #-56]	; 0xffffffc8
   2f9ec:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2f9f0:	cmp	r0, #0
   2f9f4:	str	r0, [fp, #-48]	; 0xffffffd0
   2f9f8:	beq	300a0 <__assert_fail@plt+0x1e3f4>
   2f9fc:	ldr	r2, [r5, #20]
   2fa00:	ldr	r1, [r5, #24]
   2fa04:	mov	r6, r0
   2fa08:	lsl	r2, r2, #2
   2fa0c:	bl	118ec <memcpy@plt>
   2fa10:	ldr	r0, [sp, #80]	; 0x50
   2fa14:	mov	r2, r6
   2fa18:	mov	r6, r4
   2fa1c:	mov	lr, r2
   2fa20:	str	r0, [fp, #-60]	; 0xffffffc4
   2fa24:	ldr	r0, [sp, #56]	; 0x38
   2fa28:	str	r0, [fp, #-64]	; 0xffffffc0
   2fa2c:	lsl	r0, r6, #1
   2fa30:	lsl	r1, r6, #3
   2fa34:	mov	r4, lr
   2fa38:	str	r0, [sp, #24]
   2fa3c:	str	r0, [fp, #-56]	; 0xffffffc8
   2fa40:	mov	r0, r2
   2fa44:	bl	1c388 <__assert_fail@plt+0xa6dc>
   2fa48:	cmp	r0, #0
   2fa4c:	beq	300c0 <__assert_fail@plt+0x1e414>
   2fa50:	ldr	ip, [sp, #80]	; 0x50
   2fa54:	mov	lr, r0
   2fa58:	mov	r2, r0
   2fa5c:	str	r0, [fp, #-48]	; 0xffffffd0
   2fa60:	str	r0, [sp, #16]
   2fa64:	ldr	r0, [lr]
   2fa68:	str	r2, [sp, #32]
   2fa6c:	cmp	r0, r9
   2fa70:	ble	2fb74 <__assert_fail@plt+0x1dec8>
   2fa74:	ldr	r3, [sp, #76]	; 0x4c
   2fa78:	cmp	r6, #1
   2fa7c:	mov	r1, r6
   2fa80:	blt	2fbac <__assert_fail@plt+0x1df00>
   2fa84:	mov	sl, r3
   2fa88:	ands	r1, r6, #3
   2fa8c:	sub	r2, r6, #1
   2fa90:	mov	r4, r6
   2fa94:	mov	r0, r6
   2fa98:	beq	2fac0 <__assert_fail@plt+0x1de14>
   2fa9c:	add	r7, lr, r4, lsl #2
   2faa0:	mov	r0, r4
   2faa4:	mov	r3, r7
   2faa8:	ldr	r6, [r3, #-4]!
   2faac:	subs	r1, r1, #1
   2fab0:	sub	r0, r0, #1
   2fab4:	str	r6, [r7]
   2fab8:	mov	r7, r3
   2fabc:	bne	2faa8 <__assert_fail@plt+0x1ddfc>
   2fac0:	mov	r1, #0
   2fac4:	cmp	r2, #3
   2fac8:	bcc	2fb00 <__assert_fail@plt+0x1de54>
   2facc:	add	r2, lr, r0, lsl #2
   2fad0:	sub	r2, r2, #8
   2fad4:	ldr	r6, [r2]
   2fad8:	ldr	r5, [r2, #4]
   2fadc:	ldmdb	r2, {r3, r7}
   2fae0:	sub	r0, r0, #4
   2fae4:	cmp	r0, #0
   2fae8:	stmda	r2, {r3, r7}
   2faec:	str	r6, [r2, #4]
   2faf0:	str	r5, [r2, #8]
   2faf4:	sub	r2, r2, #16
   2faf8:	bgt	2fad4 <__assert_fail@plt+0x1de28>
   2fafc:	ldr	r5, [sp, #84]	; 0x54
   2fb00:	mov	r6, r4
   2fb04:	mov	r3, sl
   2fb08:	b	2fbac <__assert_fail@plt+0x1df00>
   2fb0c:	ldr	r1, [sp, #8]
   2fb10:	mov	r0, #0
   2fb14:	str	r0, [r1]
   2fb18:	str	r0, [r1, #4]
   2fb1c:	str	r0, [r1, #8]
   2fb20:	ldr	r0, [sp, #56]	; 0x38
   2fb24:	str	ip, [fp, #-60]	; 0xffffffc4
   2fb28:	str	r0, [fp, #-64]	; 0xffffffc0
   2fb2c:	mov	r0, #1
   2fb30:	str	r0, [fp, #-52]	; 0xffffffcc
   2fb34:	str	r0, [fp, #-56]	; 0xffffffc8
   2fb38:	mov	r0, #4
   2fb3c:	bl	1c2f4 <__assert_fail@plt+0xa648>
   2fb40:	cmp	r0, #0
   2fb44:	str	r0, [fp, #-48]	; 0xffffffd0
   2fb48:	beq	300a0 <__assert_fail@plt+0x1e3f4>
   2fb4c:	ldr	ip, [sp, #80]	; 0x50
   2fb50:	ldr	r3, [sp, #76]	; 0x4c
   2fb54:	str	r9, [r0]
   2fb58:	str	r0, [sp, #16]
   2fb5c:	str	r0, [sp, #64]	; 0x40
   2fb60:	str	r0, [sp, #32]
   2fb64:	mov	r0, #1
   2fb68:	mov	r6, #1
   2fb6c:	str	r0, [sp, #24]
   2fb70:	b	2fbbc <__assert_fail@plt+0x1df10>
   2fb74:	add	r0, lr, r6, lsl #2
   2fb78:	ldr	r3, [sp, #76]	; 0x4c
   2fb7c:	mov	r1, r6
   2fb80:	ldr	r2, [r0, #-4]
   2fb84:	cmp	r2, r9
   2fb88:	ble	2fbac <__assert_fail@plt+0x1df00>
   2fb8c:	sub	r1, r6, #2
   2fb90:	str	r2, [r0]
   2fb94:	sub	r1, r1, #1
   2fb98:	ldr	r2, [r0, #-8]
   2fb9c:	sub	r0, r0, #4
   2fba0:	cmp	r2, r9
   2fba4:	bgt	2fb90 <__assert_fail@plt+0x1dee4>
   2fba8:	add	r1, r1, #2
   2fbac:	add	r6, r6, #1
   2fbb0:	str	r9, [lr, r1, lsl #2]
   2fbb4:	str	lr, [sp, #64]	; 0x40
   2fbb8:	str	r6, [fp, #-52]	; 0xffffffcc
   2fbbc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2fbc0:	sub	r1, fp, #72	; 0x48
   2fbc4:	ldr	sl, [r0, ip, lsl #2]
   2fbc8:	str	r0, [sp, #48]	; 0x30
   2fbcc:	mov	r0, r3
   2fbd0:	bl	2ea20 <__assert_fail@plt+0x1cd74>
   2fbd4:	cmp	r0, #0
   2fbd8:	bne	30078 <__assert_fail@plt+0x1e3cc>
   2fbdc:	ldr	r5, [r5, #4]
   2fbe0:	ldr	ip, [sp, #80]	; 0x50
   2fbe4:	ldr	lr, [sp, #64]	; 0x40
   2fbe8:	str	r6, [sp, #44]	; 0x2c
   2fbec:	cmp	r5, #0
   2fbf0:	beq	2fc98 <__assert_fail@plt+0x1dfec>
   2fbf4:	cmp	ip, #0
   2fbf8:	bmi	2fc94 <__assert_fail@plt+0x1dfe8>
   2fbfc:	ldr	r6, [sp, #48]	; 0x30
   2fc00:	ldr	r7, [sp, #12]
   2fc04:	ldr	r1, [r5]
   2fc08:	ldr	r0, [r6]
   2fc0c:	cmp	r1, #0
   2fc10:	bne	2fc38 <__assert_fail@plt+0x1df8c>
   2fc14:	str	r0, [r5]
   2fc18:	add	r5, r5, #4
   2fc1c:	add	r6, r6, #4
   2fc20:	subs	r7, r7, #1
   2fc24:	beq	2fc94 <__assert_fail@plt+0x1dfe8>
   2fc28:	ldr	r1, [r5]
   2fc2c:	ldr	r0, [r6]
   2fc30:	cmp	r1, #0
   2fc34:	beq	2fc14 <__assert_fail@plt+0x1df68>
   2fc38:	cmp	r0, #0
   2fc3c:	beq	2fc18 <__assert_fail@plt+0x1df6c>
   2fc40:	sub	r4, fp, #44	; 0x2c
   2fc44:	add	r2, r0, #4
   2fc48:	add	r1, r1, #4
   2fc4c:	mov	r0, r4
   2fc50:	bl	2ac98 <__assert_fail@plt+0x18fec>
   2fc54:	cmp	r0, #0
   2fc58:	str	r0, [fp, #-32]	; 0xffffffe0
   2fc5c:	bne	30078 <__assert_fail@plt+0x1e3cc>
   2fc60:	sub	r0, fp, #32
   2fc64:	mov	r1, r8
   2fc68:	mov	r2, r4
   2fc6c:	bl	2c414 <__assert_fail@plt+0x1a768>
   2fc70:	str	r0, [r5]
   2fc74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2fc78:	bl	1c224 <__assert_fail@plt+0xa578>
   2fc7c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2fc80:	ldr	ip, [sp, #80]	; 0x50
   2fc84:	ldr	lr, [sp, #64]	; 0x40
   2fc88:	cmp	r9, #0
   2fc8c:	beq	2fc18 <__assert_fail@plt+0x1df6c>
   2fc90:	b	30038 <__assert_fail@plt+0x1e38c>
   2fc94:	ldr	r6, [sp, #44]	; 0x2c
   2fc98:	ldr	r0, [sp, #48]	; 0x30
   2fc9c:	cmp	r6, #1
   2fca0:	str	sl, [r0, ip, lsl #2]
   2fca4:	blt	2fd38 <__assert_fail@plt+0x1e08c>
   2fca8:	ldr	r4, [sp, #84]	; 0x54
   2fcac:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2fcb0:	subs	sl, r6, #1
   2fcb4:	mov	r9, #20
   2fcb8:	mov	r1, #0
   2fcbc:	beq	2fce8 <__assert_fail@plt+0x1e03c>
   2fcc0:	mov	r2, sl
   2fcc4:	mov	r0, #1
   2fcc8:	add	r3, r1, r2
   2fccc:	lsr	r7, r3, #1
   2fcd0:	ldr	r6, [lr, r7, lsl #2]
   2fcd4:	cmp	r6, r5
   2fcd8:	addlt	r1, r0, r3, lsr #1
   2fcdc:	movge	r2, r7
   2fce0:	cmp	r1, r2
   2fce4:	bcc	2fcc8 <__assert_fail@plt+0x1e01c>
   2fce8:	ldr	r2, [lr, r1, lsl #2]
   2fcec:	mov	r3, #1
   2fcf0:	cmp	r2, r5
   2fcf4:	mov	r2, r1
   2fcf8:	mvnne	r2, #0
   2fcfc:	cmp	r2, #0
   2fd00:	bmi	2fd4c <__assert_fail@plt+0x1e0a0>
   2fd04:	ldr	r0, [sp, #44]	; 0x2c
   2fd08:	cmp	r0, r2
   2fd0c:	ble	2fd4c <__assert_fail@plt+0x1e0a0>
   2fd10:	cmp	sl, r2
   2fd14:	str	sl, [fp, #-52]	; 0xffffffcc
   2fd18:	ble	2fd58 <__assert_fail@plt+0x1e0ac>
   2fd1c:	mvn	r2, r1
   2fd20:	str	sl, [sp, #72]	; 0x48
   2fd24:	add	sl, r0, r2
   2fd28:	cmp	sl, #4
   2fd2c:	bcs	2fd68 <__assert_fail@plt+0x1e0bc>
   2fd30:	ldr	r9, [sp, #40]	; 0x28
   2fd34:	b	2fe1c <__assert_fail@plt+0x1e170>
   2fd38:	ldr	r4, [sp, #84]	; 0x54
   2fd3c:	ldr	r9, [sp, #40]	; 0x28
   2fd40:	ldr	r3, [sp, #56]	; 0x38
   2fd44:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2fd48:	b	2fe4c <__assert_fail@plt+0x1e1a0>
   2fd4c:	ldr	r0, [sp, #16]
   2fd50:	ldr	r9, [sp, #40]	; 0x28
   2fd54:	b	2fe44 <__assert_fail@plt+0x1e198>
   2fd58:	ldr	r0, [sp, #16]
   2fd5c:	ldr	r9, [sp, #40]	; 0x28
   2fd60:	str	sl, [sp, #44]	; 0x2c
   2fd64:	b	2fe44 <__assert_fail@plt+0x1e198>
   2fd68:	bic	lr, sl, #3
   2fd6c:	subs	r7, lr, #4
   2fd70:	add	r6, r3, r7, lsr #2
   2fd74:	and	ip, r6, #1
   2fd78:	beq	2fdbc <__assert_fail@plt+0x1e110>
   2fd7c:	ldr	r3, [sp, #64]	; 0x40
   2fd80:	sub	r2, ip, r6
   2fd84:	mov	r6, #0
   2fd88:	add	r3, r3, r1, lsl #2
   2fd8c:	add	r7, r3, #4
   2fd90:	mov	r4, r3
   2fd94:	adds	r2, r2, #2
   2fd98:	add	r6, r6, #8
   2fd9c:	vld1.32	{d16-d17}, [r7]
   2fda0:	vst1.32	{d16-d17}, [r4], r9
   2fda4:	vld1.32	{d16-d17}, [r4]
   2fda8:	add	r4, r3, #16
   2fdac:	add	r3, r3, #32
   2fdb0:	vst1.32	{d16-d17}, [r4]
   2fdb4:	bne	2fd8c <__assert_fail@plt+0x1e0e0>
   2fdb8:	b	2fdc0 <__assert_fail@plt+0x1e114>
   2fdbc:	mov	r6, #0
   2fdc0:	cmp	ip, #0
   2fdc4:	beq	2fde0 <__assert_fail@plt+0x1e134>
   2fdc8:	ldr	r7, [sp, #64]	; 0x40
   2fdcc:	add	r3, r1, r6
   2fdd0:	add	r3, r7, r3, lsl #2
   2fdd4:	add	r7, r3, #4
   2fdd8:	vld1.32	{d16-d17}, [r7]
   2fddc:	vst1.32	{d16-d17}, [r3]
   2fde0:	ldr	r4, [sp, #84]	; 0x54
   2fde4:	ldr	r9, [sp, #40]	; 0x28
   2fde8:	cmp	sl, lr
   2fdec:	bne	2fe0c <__assert_fail@plt+0x1e160>
   2fdf0:	ldr	r0, [sp, #16]
   2fdf4:	ldr	ip, [sp, #80]	; 0x50
   2fdf8:	ldr	lr, [sp, #64]	; 0x40
   2fdfc:	str	r0, [sp, #32]
   2fe00:	ldr	r0, [sp, #72]	; 0x48
   2fe04:	str	r0, [sp, #44]	; 0x2c
   2fe08:	b	2fe48 <__assert_fail@plt+0x1e19c>
   2fe0c:	add	r1, r1, lr
   2fe10:	ldr	ip, [sp, #80]	; 0x50
   2fe14:	ldr	lr, [sp, #64]	; 0x40
   2fe18:	ldr	r0, [sp, #44]	; 0x2c
   2fe1c:	ldr	r6, [sp, #72]	; 0x48
   2fe20:	sub	r2, r0, #1
   2fe24:	add	r3, lr, r1, lsl #2
   2fe28:	ldr	r3, [r3, #4]
   2fe2c:	str	r3, [lr, r1, lsl #2]
   2fe30:	add	r1, r1, #1
   2fe34:	cmp	r2, r1
   2fe38:	bne	2fe24 <__assert_fail@plt+0x1e178>
   2fe3c:	ldr	r0, [sp, #16]
   2fe40:	str	r6, [sp, #44]	; 0x2c
   2fe44:	str	r0, [sp, #32]
   2fe48:	ldr	r3, [sp, #56]	; 0x38
   2fe4c:	ldr	r0, [sp, #76]	; 0x4c
   2fe50:	add	r1, r5, r5, lsl #1
   2fe54:	ldr	r0, [r0, #116]	; 0x74
   2fe58:	add	r0, r0, r1, lsl #3
   2fe5c:	b	2ffdc <__assert_fail@plt+0x1e330>
   2fe60:	ldr	r0, [sp, #24]
   2fe64:	ldr	r2, [sp, #32]
   2fe68:	cmp	r0, r6
   2fe6c:	beq	2fa2c <__assert_fail@plt+0x1dd80>
   2fe70:	b	2fa64 <__assert_fail@plt+0x1ddb8>
   2fe74:	ldr	r0, [r7]
   2fe78:	cmp	r0, r3
   2fe7c:	bne	2ffd8 <__assert_fail@plt+0x1e32c>
   2fe80:	ldr	r0, [r7, #8]
   2fe84:	ldr	r1, [r7, #12]
   2fe88:	str	r5, [fp, #-80]	; 0xffffffb0
   2fe8c:	subs	r0, r1, r0
   2fe90:	add	sl, r0, ip
   2fe94:	beq	2ffb8 <__assert_fail@plt+0x1e30c>
   2fe98:	ldr	r0, [r8, #12]
   2fe9c:	add	r0, r0, r3, lsl #2
   2fea0:	ldr	r1, [r4, #12]
   2fea4:	cmp	sl, r1
   2fea8:	bgt	2ffd4 <__assert_fail@plt+0x1e328>
   2feac:	ldr	r1, [r4]
   2feb0:	ldr	r1, [r1, sl, lsl #2]
   2feb4:	cmp	r1, #0
   2feb8:	beq	2ffd4 <__assert_fail@plt+0x1e328>
   2febc:	ldr	r2, [r1, #8]
   2fec0:	cmp	r2, #1
   2fec4:	blt	2ffd4 <__assert_fail@plt+0x1e328>
   2fec8:	str	lr, [sp, #64]	; 0x40
   2fecc:	mov	lr, r8
   2fed0:	ldr	r8, [r0]
   2fed4:	ldr	r0, [r1, #12]
   2fed8:	subs	r2, r2, #1
   2fedc:	mov	r1, #0
   2fee0:	mov	r4, #1
   2fee4:	beq	2ff08 <__assert_fail@plt+0x1e25c>
   2fee8:	add	r3, r1, r2
   2feec:	lsr	r6, r3, #1
   2fef0:	ldr	r5, [r0, r6, lsl #2]
   2fef4:	cmp	r5, r8
   2fef8:	addlt	r1, r4, r3, lsr #1
   2fefc:	movge	r2, r6
   2ff00:	cmp	r1, r2
   2ff04:	bcc	2fee8 <__assert_fail@plt+0x1e23c>
   2ff08:	ldr	r0, [r0, r1, lsl #2]
   2ff0c:	cmp	r0, r8
   2ff10:	bne	2f73c <__assert_fail@plt+0x1da90>
   2ff14:	ldr	r1, [sp, #76]	; 0x4c
   2ff18:	str	r8, [sp, #52]	; 0x34
   2ff1c:	ldr	r0, [r1, #108]	; 0x6c
   2ff20:	cmp	r0, #1
   2ff24:	blt	2f754 <__assert_fail@plt+0x1daa8>
   2ff28:	ldr	r1, [r1, #116]	; 0x74
   2ff2c:	mov	r9, #0
   2ff30:	mov	r2, r0
   2ff34:	add	r3, r2, r9
   2ff38:	add	r3, r3, r3, lsr #31
   2ff3c:	asr	r6, r3, #1
   2ff40:	add	r5, r6, r6, lsl #1
   2ff44:	add	r5, r1, r5, lsl #3
   2ff48:	ldr	r5, [r5, #4]
   2ff4c:	cmp	r5, ip
   2ff50:	addlt	r9, r4, r3, asr #1
   2ff54:	movge	r2, r6
   2ff58:	cmp	r9, r2
   2ff5c:	blt	2ff34 <__assert_fail@plt+0x1e288>
   2ff60:	ldr	r3, [sp, #76]	; 0x4c
   2ff64:	cmp	r9, r0
   2ff68:	bge	2f764 <__assert_fail@plt+0x1dab8>
   2ff6c:	ldr	r1, [r3, #116]	; 0x74
   2ff70:	add	r2, r9, r9, lsl #1
   2ff74:	add	r1, r1, r2, lsl #3
   2ff78:	ldr	r1, [r1, #4]
   2ff7c:	cmp	r1, ip
   2ff80:	mvnne	r9, #0
   2ff84:	cmp	r0, #1
   2ff88:	bge	2f770 <__assert_fail@plt+0x1dac4>
   2ff8c:	ldr	lr, [sp, #64]	; 0x40
   2ff90:	mov	r8, #0
   2ff94:	ldr	r3, [sp, #76]	; 0x4c
   2ff98:	cmp	r8, r0
   2ff9c:	blt	2f7b8 <__assert_fail@plt+0x1db0c>
   2ffa0:	mvn	r8, #0
   2ffa4:	ldr	r5, [sp, #84]	; 0x54
   2ffa8:	ldr	r4, [r5, #20]
   2ffac:	cmp	r4, #1
   2ffb0:	bge	2f7e0 <__assert_fail@plt+0x1db34>
   2ffb4:	b	2f960 <__assert_fail@plt+0x1dcb4>
   2ffb8:	ldr	r0, [r8, #20]
   2ffbc:	add	r1, r3, r3, lsl #1
   2ffc0:	add	r0, r0, r1, lsl #2
   2ffc4:	ldr	r0, [r0, #8]
   2ffc8:	ldr	r1, [r4, #12]
   2ffcc:	cmp	sl, r1
   2ffd0:	ble	2feac <__assert_fail@plt+0x1e200>
   2ffd4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2ffd8:	mov	r0, r7
   2ffdc:	add	r7, r0, #24
   2ffe0:	ldrb	r0, [r0, #20]
   2ffe4:	add	r5, r5, #1
   2ffe8:	cmp	r0, #0
   2ffec:	bne	2fe74 <__assert_fail@plt+0x1e1c8>
   2fff0:	b	2f6bc <__assert_fail@plt+0x1da10>
   2fff4:	mov	r4, #0
   2fff8:	cmp	r4, lr
   2fffc:	blt	2f64c <__assert_fail@plt+0x1d9a0>
   30000:	mov	r0, #0
   30004:	str	r0, [fp, #-76]	; 0xffffffb4
   30008:	mov	r9, #0
   3000c:	mov	r0, r9
   30010:	sub	sp, fp, #28
   30014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30018:	mov	r9, r0
   3001c:	str	r0, [fp, #-76]	; 0xffffffb4
   30020:	mov	r0, r9
   30024:	sub	sp, fp, #28
   30028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3002c:	str	r2, [fp, #-76]	; 0xffffffb4
   30030:	b	30008 <__assert_fail@plt+0x1e35c>
   30034:	mov	r9, #0
   30038:	ldr	r0, [fp, #-72]	; 0xffffffb8
   3003c:	cmp	r0, #0
   30040:	beq	3004c <__assert_fail@plt+0x1e3a0>
   30044:	mov	r0, lr
   30048:	bl	1c224 <__assert_fail@plt+0xa578>
   3004c:	cmp	r9, #0
   30050:	str	r9, [fp, #-76]	; 0xffffffb4
   30054:	moveq	r9, #0
   30058:	mov	r0, r9
   3005c:	sub	sp, fp, #28
   30060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30064:	str	r0, [fp, #-72]	; 0xffffffb8
   30068:	str	r9, [fp, #-76]	; 0xffffffb4
   3006c:	mov	r0, r9
   30070:	sub	sp, fp, #28
   30074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30078:	ldr	lr, [sp, #64]	; 0x40
   3007c:	mov	r9, r0
   30080:	ldr	r0, [fp, #-72]	; 0xffffffb8
   30084:	cmp	r0, #0
   30088:	bne	30044 <__assert_fail@plt+0x1e398>
   3008c:	b	3004c <__assert_fail@plt+0x1e3a0>
   30090:	mov	r9, r0
   30094:	mov	r0, r9
   30098:	sub	sp, fp, #28
   3009c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   300a0:	mov	lr, #0
   300a4:	mov	r9, #12
   300a8:	str	lr, [fp, #-56]	; 0xffffffc8
   300ac:	str	lr, [fp, #-52]	; 0xffffffcc
   300b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   300b4:	cmp	r0, #0
   300b8:	bne	30044 <__assert_fail@plt+0x1e398>
   300bc:	b	3004c <__assert_fail@plt+0x1e3a0>
   300c0:	mov	r9, #12
   300c4:	mov	lr, r4
   300c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   300cc:	cmp	r0, #0
   300d0:	bne	30044 <__assert_fail@plt+0x1e398>
   300d4:	b	3004c <__assert_fail@plt+0x1e3a0>
   300d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   300dc:	add	fp, sp, #28
   300e0:	sub	sp, sp, #4
   300e4:	mov	r9, r0
   300e8:	ldr	r0, [r1, #4]
   300ec:	mov	r8, #0
   300f0:	cmp	r0, #0
   300f4:	beq	302b0 <__assert_fail@plt+0x1e604>
   300f8:	mov	r5, r2
   300fc:	ldr	r2, [r2, #4]
   30100:	cmp	r2, #0
   30104:	beq	302b0 <__assert_fail@plt+0x1e604>
   30108:	mov	sl, r1
   3010c:	ldr	r1, [r9, #4]
   30110:	ldr	r7, [r9]
   30114:	add	r3, r2, r0
   30118:	add	r6, r1, r3
   3011c:	cmp	r6, r7
   30120:	ble	30150 <__assert_fail@plt+0x1e4a4>
   30124:	ldr	r0, [r9, #8]
   30128:	add	r4, r7, r3
   3012c:	lsl	r1, r4, #2
   30130:	bl	1c388 <__assert_fail@plt+0xa6dc>
   30134:	cmp	r0, #0
   30138:	beq	302bc <__assert_fail@plt+0x1e610>
   3013c:	str	r4, [r9]
   30140:	str	r0, [r9, #8]
   30144:	ldr	r1, [r9, #4]
   30148:	ldr	r2, [r5, #4]
   3014c:	ldr	r0, [sl, #4]
   30150:	ldr	lr, [r5, #8]
   30154:	ldr	r4, [sl, #8]
   30158:	add	r3, r0, r1
   3015c:	sub	r7, r1, #1
   30160:	add	ip, r3, r2
   30164:	sub	r0, r0, #1
   30168:	sub	r3, r2, #1
   3016c:	ldr	r1, [lr, r3, lsl #2]
   30170:	ldr	r6, [r4, r0, lsl #2]
   30174:	cmp	r6, r1
   30178:	beq	301a4 <__assert_fail@plt+0x1e4f8>
   3017c:	blt	30194 <__assert_fail@plt+0x1e4e8>
   30180:	sub	r6, r0, #1
   30184:	cmp	r0, #0
   30188:	mov	r0, r6
   3018c:	bgt	30170 <__assert_fail@plt+0x1e4c4>
   30190:	b	30214 <__assert_fail@plt+0x1e568>
   30194:	cmp	r2, #2
   30198:	mov	r2, r3
   3019c:	bge	30168 <__assert_fail@plt+0x1e4bc>
   301a0:	b	30214 <__assert_fail@plt+0x1e568>
   301a4:	cmp	r7, #0
   301a8:	bmi	301f0 <__assert_fail@plt+0x1e544>
   301ac:	ldr	r8, [r9, #8]
   301b0:	mov	r1, r7
   301b4:	ldr	r7, [r8, r1, lsl #2]
   301b8:	cmp	r7, r6
   301bc:	ble	301d4 <__assert_fail@plt+0x1e528>
   301c0:	sub	r7, r1, #1
   301c4:	cmp	r1, #0
   301c8:	mov	r1, r7
   301cc:	bgt	301b4 <__assert_fail@plt+0x1e508>
   301d0:	b	301f0 <__assert_fail@plt+0x1e544>
   301d4:	mov	r7, r1
   301d8:	bne	301f0 <__assert_fail@plt+0x1e544>
   301dc:	mov	r7, r1
   301e0:	cmp	r0, #1
   301e4:	mov	r8, #0
   301e8:	bge	30208 <__assert_fail@plt+0x1e55c>
   301ec:	b	30214 <__assert_fail@plt+0x1e568>
   301f0:	ldr	r1, [r9, #8]
   301f4:	sub	ip, ip, #1
   301f8:	str	r6, [r1, ip, lsl #2]
   301fc:	cmp	r0, #1
   30200:	mov	r8, #0
   30204:	blt	30214 <__assert_fail@plt+0x1e568>
   30208:	cmp	r2, #2
   3020c:	mov	r2, r3
   30210:	bge	30164 <__assert_fail@plt+0x1e4b8>
   30214:	ldr	r2, [r9, #4]
   30218:	ldr	lr, [sl, #4]
   3021c:	ldr	r4, [r5, #4]
   30220:	ldr	r0, [r9, #8]
   30224:	subs	r1, r2, #1
   30228:	add	r3, r1, lr
   3022c:	add	r3, r3, r4
   30230:	sub	r7, r3, ip
   30234:	add	r6, r7, #1
   30238:	add	r5, r6, r2
   3023c:	str	r5, [r9, #4]
   30240:	blt	302a0 <__assert_fail@plt+0x1e5f4>
   30244:	cmp	r7, #0
   30248:	bmi	302a0 <__assert_fail@plt+0x1e5f4>
   3024c:	add	r2, r2, r4
   30250:	add	r2, r2, lr
   30254:	sub	r2, r2, ip
   30258:	add	r7, r0, r2, lsl #2
   3025c:	ldr	r2, [r0, r1, lsl #2]
   30260:	ldr	r5, [r0, r3, lsl #2]
   30264:	cmp	r5, r2
   30268:	bgt	30284 <__assert_fail@plt+0x1e5d8>
   3026c:	str	r2, [r7, r1, lsl #2]
   30270:	sub	r2, r1, #1
   30274:	cmp	r1, #0
   30278:	mov	r1, r2
   3027c:	bgt	3025c <__assert_fail@plt+0x1e5b0>
   30280:	b	302a0 <__assert_fail@plt+0x1e5f4>
   30284:	str	r5, [r7, r1, lsl #2]
   30288:	sub	r7, r7, #4
   3028c:	subs	r6, r6, #1
   30290:	sub	r3, r3, #1
   30294:	mov	r2, #0
   30298:	bne	3025c <__assert_fail@plt+0x1e5b0>
   3029c:	b	302a4 <__assert_fail@plt+0x1e5f8>
   302a0:	mov	r2, r6
   302a4:	add	r1, r0, ip, lsl #2
   302a8:	lsl	r2, r2, #2
   302ac:	bl	118ec <memcpy@plt>
   302b0:	mov	r0, r8
   302b4:	sub	sp, fp, #28
   302b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302bc:	mov	r8, #12
   302c0:	mov	r0, r8
   302c4:	sub	sp, fp, #28
   302c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   302d0:	add	fp, sp, #28
   302d4:	sub	sp, sp, #44	; 0x2c
   302d8:	mov	ip, r0
   302dc:	ldr	r0, [r0, #28]
   302e0:	str	r3, [sp, #4]
   302e4:	add	r3, r1, r1, lsl #1
   302e8:	mov	r4, #0
   302ec:	str	r4, [sp, #36]	; 0x24
   302f0:	str	r4, [sp, #32]
   302f4:	str	r4, [sp, #40]	; 0x28
   302f8:	add	r3, r0, r3, lsl #2
   302fc:	mov	r0, r3
   30300:	ldr	lr, [r0, #4]!
   30304:	str	r0, [sp, #24]
   30308:	cmp	lr, #1
   3030c:	blt	3064c <__assert_fail@plt+0x1e9a0>
   30310:	add	r4, r3, #8
   30314:	mov	r9, #0
   30318:	mov	sl, #1
   3031c:	str	r2, [sp, #28]
   30320:	str	r3, [sp]
   30324:	str	r1, [sp, #12]
   30328:	str	ip, [sp, #8]
   3032c:	str	r4, [sp, #20]
   30330:	ldr	r3, [r4]
   30334:	ldr	r0, [r3, r9, lsl #2]
   30338:	cmp	r0, r1
   3033c:	bne	3035c <__assert_fail@plt+0x1e6b0>
   30340:	add	r9, r9, #1
   30344:	cmp	r9, lr
   30348:	bge	3050c <__assert_fail@plt+0x1e860>
   3034c:	ldr	r3, [r4]
   30350:	ldr	r0, [r3, r9, lsl #2]
   30354:	cmp	r0, r1
   30358:	beq	30340 <__assert_fail@plt+0x1e694>
   3035c:	ldr	r2, [ip]
   30360:	add	r2, r2, r0, lsl #3
   30364:	ldrb	r2, [r2, #4]
   30368:	tst	r2, #8
   3036c:	beq	30340 <__assert_fail@plt+0x1e694>
   30370:	ldr	r2, [ip, #20]
   30374:	add	r0, r0, r0, lsl #1
   30378:	mvn	r8, #0
   3037c:	str	r0, [sp, #16]
   30380:	add	r0, r2, r0, lsl #2
   30384:	ldr	r7, [r0, #4]
   30388:	ldr	r0, [r0, #8]
   3038c:	cmp	r7, #2
   30390:	ldr	r5, [r0]
   30394:	ldrge	r8, [r0, #4]
   30398:	cmp	lr, #1
   3039c:	blt	303dc <__assert_fail@plt+0x1e730>
   303a0:	mov	r2, #0
   303a4:	subs	r7, lr, #1
   303a8:	beq	303cc <__assert_fail@plt+0x1e720>
   303ac:	add	r6, r2, r7
   303b0:	lsr	r4, r6, #1
   303b4:	ldr	r0, [r3, r4, lsl #2]
   303b8:	cmp	r0, r5
   303bc:	addlt	r2, sl, r6, lsr #1
   303c0:	movge	r7, r4
   303c4:	cmp	r2, r7
   303c8:	bcc	303ac <__assert_fail@plt+0x1e700>
   303cc:	ldr	r0, [r3, r2, lsl #2]
   303d0:	ldr	r4, [sp, #20]
   303d4:	cmp	r0, r5
   303d8:	beq	30438 <__assert_fail@plt+0x1e78c>
   303dc:	ldr	r0, [sp, #28]
   303e0:	ldr	r0, [r0, #4]
   303e4:	cmp	r0, #1
   303e8:	blt	30438 <__assert_fail@plt+0x1e78c>
   303ec:	subs	r7, r0, #1
   303f0:	ldr	r0, [sp, #28]
   303f4:	mov	r6, #0
   303f8:	ldr	r1, [r0, #8]
   303fc:	beq	30420 <__assert_fail@plt+0x1e774>
   30400:	add	r0, r6, r7
   30404:	lsr	r4, r0, #1
   30408:	ldr	ip, [r1, r4, lsl #2]
   3040c:	cmp	ip, r5
   30410:	addlt	r6, sl, r0, lsr #1
   30414:	movge	r7, r4
   30418:	cmp	r6, r7
   3041c:	bcc	30400 <__assert_fail@plt+0x1e754>
   30420:	ldr	r0, [r1, r6, lsl #2]
   30424:	ldr	r1, [sp, #12]
   30428:	ldr	ip, [sp, #8]
   3042c:	ldr	r4, [sp, #20]
   30430:	cmp	r0, r5
   30434:	beq	304d0 <__assert_fail@plt+0x1e824>
   30438:	cmp	r8, #1
   3043c:	blt	30340 <__assert_fail@plt+0x1e694>
   30440:	cmp	lr, #1
   30444:	blt	30480 <__assert_fail@plt+0x1e7d4>
   30448:	mov	r2, #0
   3044c:	subs	r7, lr, #1
   30450:	beq	30474 <__assert_fail@plt+0x1e7c8>
   30454:	add	r0, r2, r7
   30458:	lsr	r6, r0, #1
   3045c:	ldr	r5, [r3, r6, lsl #2]
   30460:	cmp	r5, r8
   30464:	addlt	r2, sl, r0, lsr #1
   30468:	movge	r7, r6
   3046c:	cmp	r2, r7
   30470:	bcc	30454 <__assert_fail@plt+0x1e7a8>
   30474:	ldr	r0, [r3, r2, lsl #2]
   30478:	cmp	r0, r8
   3047c:	beq	30340 <__assert_fail@plt+0x1e694>
   30480:	ldr	r2, [sp, #28]
   30484:	ldr	r0, [r2, #4]
   30488:	cmp	r0, #1
   3048c:	blt	30340 <__assert_fail@plt+0x1e694>
   30490:	ldr	r4, [r2, #8]
   30494:	subs	r7, r0, #1
   30498:	mov	r3, #0
   3049c:	beq	304c0 <__assert_fail@plt+0x1e814>
   304a0:	add	r0, r3, r7
   304a4:	lsr	r6, r0, #1
   304a8:	ldr	r5, [r4, r6, lsl #2]
   304ac:	cmp	r5, r8
   304b0:	addlt	r3, sl, r0, lsr #1
   304b4:	movge	r7, r6
   304b8:	cmp	r3, r7
   304bc:	bcc	304a0 <__assert_fail@plt+0x1e7f4>
   304c0:	ldr	r0, [r4, r3, lsl #2]
   304c4:	ldr	r4, [sp, #20]
   304c8:	cmp	r0, r8
   304cc:	bne	30340 <__assert_fail@plt+0x1e694>
   304d0:	ldr	r0, [ip, #28]
   304d4:	ldr	r1, [sp, #16]
   304d8:	add	r2, r0, r1, lsl #2
   304dc:	ldr	r1, [sp, #4]
   304e0:	add	r0, sp, #32
   304e4:	bl	300d8 <__assert_fail@plt+0x1e42c>
   304e8:	cmp	r0, #0
   304ec:	bne	3073c <__assert_fail@plt+0x1ea90>
   304f0:	ldr	r0, [sp, #24]
   304f4:	ldr	r1, [sp, #12]
   304f8:	ldr	ip, [sp, #8]
   304fc:	ldr	lr, [r0]
   30500:	add	r9, r9, #1
   30504:	cmp	r9, lr
   30508:	blt	3034c <__assert_fail@plt+0x1e6a0>
   3050c:	ldr	r2, [sp, #28]
   30510:	ldr	r0, [sp]
   30514:	cmp	lr, #0
   30518:	mov	r4, #0
   3051c:	ble	3064c <__assert_fail@plt+0x1e9a0>
   30520:	ldr	r1, [sp, #36]	; 0x24
   30524:	ldr	r9, [r0, #8]
   30528:	ldr	r0, [sp, #40]	; 0x28
   3052c:	subs	lr, r1, #1
   30530:	str	r9, [sp, #20]
   30534:	blt	30660 <__assert_fail@plt+0x1e9b4>
   30538:	mov	ip, #0
   3053c:	mov	r7, #1
   30540:	ldr	r6, [r9, ip, lsl #2]
   30544:	cmp	lr, #0
   30548:	mov	r1, #0
   3054c:	bne	30578 <__assert_fail@plt+0x1e8cc>
   30550:	b	305a0 <__assert_fail@plt+0x1e8f4>
   30554:	ldr	r1, [sp, #24]
   30558:	add	ip, ip, #1
   3055c:	ldr	r1, [r1]
   30560:	cmp	ip, r1
   30564:	bge	30728 <__assert_fail@plt+0x1ea7c>
   30568:	ldr	r6, [r9, ip, lsl #2]
   3056c:	cmp	lr, #0
   30570:	mov	r1, #0
   30574:	beq	305a0 <__assert_fail@plt+0x1e8f4>
   30578:	mov	r1, #0
   3057c:	mov	r2, lr
   30580:	add	r5, r1, r2
   30584:	lsr	r4, r5, #1
   30588:	ldr	r3, [r0, r4, lsl #2]
   3058c:	cmp	r3, r6
   30590:	addlt	r1, r7, r5, lsr #1
   30594:	movge	r2, r4
   30598:	cmp	r1, r2
   3059c:	bcc	30580 <__assert_fail@plt+0x1e8d4>
   305a0:	ldr	r1, [r0, r1, lsl #2]
   305a4:	cmp	r1, r6
   305a8:	ldr	r1, [sp, #28]
   305ac:	beq	30554 <__assert_fail@plt+0x1e8a8>
   305b0:	ldr	sl, [r1, #4]
   305b4:	cmp	sl, #1
   305b8:	blt	30554 <__assert_fail@plt+0x1e8a8>
   305bc:	ldr	r5, [r1, #8]
   305c0:	subs	r4, sl, #1
   305c4:	beq	305f4 <__assert_fail@plt+0x1e948>
   305c8:	mov	r1, #0
   305cc:	mov	r8, r4
   305d0:	add	r3, r1, r4
   305d4:	lsr	r2, r3, #1
   305d8:	ldr	r9, [r5, r2, lsl #2]
   305dc:	cmp	r9, r6
   305e0:	addlt	r1, r7, r3, lsr #1
   305e4:	movge	r4, r2
   305e8:	cmp	r1, r4
   305ec:	bcc	305d0 <__assert_fail@plt+0x1e924>
   305f0:	b	305fc <__assert_fail@plt+0x1e950>
   305f4:	mov	r8, r4
   305f8:	mov	r1, #0
   305fc:	ldr	r2, [r5, r1, lsl #2]
   30600:	ldr	r3, [sp, #28]
   30604:	ldr	r9, [sp, #20]
   30608:	mov	r4, r1
   3060c:	cmp	r2, r6
   30610:	mvnne	r4, #0
   30614:	cmp	r4, #0
   30618:	bmi	30554 <__assert_fail@plt+0x1e8a8>
   3061c:	cmp	sl, r4
   30620:	strgt	r8, [r3, #4]
   30624:	cmpgt	r8, r4
   30628:	ble	30554 <__assert_fail@plt+0x1e8a8>
   3062c:	add	r2, r5, r1, lsl #2
   30630:	ldr	r2, [r2, #4]
   30634:	str	r2, [r5, r1, lsl #2]
   30638:	add	r1, r1, #1
   3063c:	ldr	r2, [r3, #4]
   30640:	cmp	r1, r2
   30644:	blt	3062c <__assert_fail@plt+0x1e980>
   30648:	b	30554 <__assert_fail@plt+0x1e8a8>
   3064c:	ldr	r0, [sp, #40]	; 0x28
   30650:	bl	1c224 <__assert_fail@plt+0xa578>
   30654:	mov	r0, r4
   30658:	sub	sp, fp, #28
   3065c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30660:	ldr	r7, [r2, #4]
   30664:	mov	sl, #0
   30668:	mov	r9, #1
   3066c:	cmp	r7, #1
   30670:	bge	30698 <__assert_fail@plt+0x1e9ec>
   30674:	b	3067c <__assert_fail@plt+0x1e9d0>
   30678:	ldr	r2, [sp, #28]
   3067c:	ldr	r1, [sp, #24]
   30680:	add	sl, sl, #1
   30684:	ldr	r1, [r1]
   30688:	cmp	sl, r1
   3068c:	bge	30728 <__assert_fail@plt+0x1ea7c>
   30690:	cmp	r7, #1
   30694:	blt	3067c <__assert_fail@plt+0x1e9d0>
   30698:	ldr	r1, [sp, #20]
   3069c:	ldr	r6, [r2, #8]
   306a0:	subs	lr, r7, #1
   306a4:	mov	r5, #0
   306a8:	ldr	r1, [r1, sl, lsl #2]
   306ac:	beq	306d4 <__assert_fail@plt+0x1ea28>
   306b0:	mov	r4, lr
   306b4:	add	r3, r5, r4
   306b8:	lsr	r2, r3, #1
   306bc:	ldr	ip, [r6, r2, lsl #2]
   306c0:	cmp	ip, r1
   306c4:	addlt	r5, r9, r3, lsr #1
   306c8:	movge	r4, r2
   306cc:	cmp	r5, r4
   306d0:	bcc	306b4 <__assert_fail@plt+0x1ea08>
   306d4:	ldr	r2, [r6, r5, lsl #2]
   306d8:	cmp	r2, r1
   306dc:	mov	r1, r5
   306e0:	mvnne	r1, #0
   306e4:	cmp	r1, #0
   306e8:	bmi	30678 <__assert_fail@plt+0x1e9cc>
   306ec:	ldr	r2, [sp, #28]
   306f0:	cmp	r7, r1
   306f4:	ble	3067c <__assert_fail@plt+0x1e9d0>
   306f8:	cmp	lr, r1
   306fc:	mov	r7, lr
   30700:	str	lr, [r2, #4]
   30704:	ble	3067c <__assert_fail@plt+0x1e9d0>
   30708:	add	r1, r6, r5, lsl #2
   3070c:	ldr	r1, [r1, #4]
   30710:	str	r1, [r6, r5, lsl #2]
   30714:	add	r5, r5, #1
   30718:	ldr	r7, [r2, #4]
   3071c:	cmp	r5, r7
   30720:	blt	30708 <__assert_fail@plt+0x1ea5c>
   30724:	b	3067c <__assert_fail@plt+0x1e9d0>
   30728:	mov	r4, #0
   3072c:	bl	1c224 <__assert_fail@plt+0xa578>
   30730:	mov	r0, r4
   30734:	sub	sp, fp, #28
   30738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3073c:	mov	r1, r0
   30740:	ldr	r0, [sp, #40]	; 0x28
   30744:	mov	r4, r1
   30748:	bl	1c224 <__assert_fail@plt+0xa578>
   3074c:	mov	r0, r4
   30750:	sub	sp, fp, #28
   30754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3075c:	add	fp, sp, #28
   30760:	sub	sp, sp, #44	; 0x2c
   30764:	ldr	r4, [r0, #84]	; 0x54
   30768:	mov	r7, r0
   3076c:	str	r1, [fp, #-32]	; 0xffffffe0
   30770:	add	r1, r3, r3, lsl #1
   30774:	mov	r6, r2
   30778:	str	r3, [sp, #36]	; 0x24
   3077c:	ldr	r0, [r4, #24]
   30780:	add	r0, r0, r1, lsl #2
   30784:	mov	r2, r0
   30788:	ldr	r1, [r2, #4]!
   3078c:	str	r2, [sp, #28]
   30790:	cmp	r1, #1
   30794:	blt	30a60 <__assert_fail@plt+0x1edb4>
   30798:	mov	r1, #1
   3079c:	cmp	r6, #31
   307a0:	add	r0, r0, #8
   307a4:	mov	sl, #0
   307a8:	mvn	r2, r1, lsl r6
   307ac:	lsl	r1, r1, r6
   307b0:	str	r0, [sp, #32]
   307b4:	str	r2, [sp, #16]
   307b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   307bc:	str	r1, [sp, #24]
   307c0:	mov	r1, #0
   307c4:	movwgt	r1, #1
   307c8:	and	r3, r2, #2
   307cc:	and	r0, r2, #1
   307d0:	orr	r1, r1, r3, lsr #1
   307d4:	str	r3, [sp, #20]
   307d8:	str	r0, [sp, #8]
   307dc:	str	r1, [sp, #12]
   307e0:	b	307f8 <__assert_fail@plt+0x1eb4c>
   307e4:	ldr	r0, [sp, #28]
   307e8:	add	sl, sl, #1
   307ec:	ldr	r0, [r0]
   307f0:	cmp	sl, r0
   307f4:	bge	30a60 <__assert_fail@plt+0x1edb4>
   307f8:	ldr	r0, [sp, #32]
   307fc:	ldr	r0, [r0]
   30800:	ldr	r8, [r0, sl, lsl #2]
   30804:	ldr	r0, [r4]
   30808:	add	r1, r0, r8, lsl #3
   3080c:	ldrb	r1, [r1, #4]
   30810:	cmp	r1, #9
   30814:	beq	30860 <__assert_fail@plt+0x1ebb4>
   30818:	cmp	r1, #8
   3081c:	beq	3087c <__assert_fail@plt+0x1ebd0>
   30820:	cmp	r1, #4
   30824:	bne	307e4 <__assert_fail@plt+0x1eb38>
   30828:	ldr	r0, [fp, #8]
   3082c:	cmn	r0, #1
   30830:	beq	307e4 <__assert_fail@plt+0x1eb38>
   30834:	ldr	r1, [fp, #8]
   30838:	ldr	r0, [r7, #116]	; 0x74
   3083c:	cmp	r6, #31
   30840:	add	r1, r1, r1, lsl #1
   30844:	bgt	30938 <__assert_fail@plt+0x1ec8c>
   30848:	add	r0, r0, r1, lsl #3
   3084c:	add	r9, r0, #16
   30850:	ldr	r0, [r9, #-16]
   30854:	cmp	r0, r8
   30858:	bne	308b0 <__assert_fail@plt+0x1ec04>
   3085c:	b	308cc <__assert_fail@plt+0x1ec20>
   30860:	ldr	r1, [sp, #20]
   30864:	cmp	r1, #0
   30868:	beq	307e4 <__assert_fail@plt+0x1eb38>
   3086c:	ldr	r0, [r0, r8, lsl #3]
   30870:	cmp	r0, r6
   30874:	bne	307e4 <__assert_fail@plt+0x1eb38>
   30878:	b	30a80 <__assert_fail@plt+0x1edd4>
   3087c:	ldr	r1, [sp, #8]
   30880:	cmp	r1, #0
   30884:	beq	307e4 <__assert_fail@plt+0x1eb38>
   30888:	ldr	r0, [r0, r8, lsl #3]
   3088c:	cmp	r0, r6
   30890:	bne	307e4 <__assert_fail@plt+0x1eb38>
   30894:	b	30a8c <__assert_fail@plt+0x1ede0>
   30898:	cmn	r0, #1
   3089c:	beq	30a58 <__assert_fail@plt+0x1edac>
   308a0:	ldr	r0, [r9]
   308a4:	ldr	r1, [sp, #16]
   308a8:	and	r0, r0, r1
   308ac:	str	r0, [r9]
   308b0:	ldrb	r0, [r9, #4]
   308b4:	add	r9, r9, #24
   308b8:	cmp	r0, #0
   308bc:	beq	307e4 <__assert_fail@plt+0x1eb38>
   308c0:	ldr	r0, [r9, #-16]
   308c4:	cmp	r0, r8
   308c8:	bne	308b0 <__assert_fail@plt+0x1ec04>
   308cc:	ldr	r0, [r9]
   308d0:	ldr	r1, [sp, #24]
   308d4:	tst	r0, r1
   308d8:	beq	308b0 <__assert_fail@plt+0x1ec04>
   308dc:	ldr	r0, [r4, #20]
   308e0:	add	r1, r8, r8, lsl #1
   308e4:	add	r0, r0, r1, lsl #2
   308e8:	ldr	r0, [r0, #8]
   308ec:	ldr	r3, [r0]
   308f0:	ldr	r0, [sp, #36]	; 0x24
   308f4:	cmp	r3, r0
   308f8:	beq	30a70 <__assert_fail@plt+0x1edc4>
   308fc:	ldr	r0, [fp, #8]
   30900:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30904:	mov	r2, r6
   30908:	str	r0, [sp]
   3090c:	mov	r0, r7
   30910:	bl	30758 <__assert_fail@plt+0x1eaac>
   30914:	cmp	r0, #0
   30918:	bne	30898 <__assert_fail@plt+0x1ebec>
   3091c:	ldr	r0, [sp, #12]
   30920:	cmp	r0, #0
   30924:	beq	308a0 <__assert_fail@plt+0x1ebf4>
   30928:	ldr	r0, [sp, #20]
   3092c:	cmp	r0, #0
   30930:	beq	308b0 <__assert_fail@plt+0x1ec04>
   30934:	b	30a80 <__assert_fail@plt+0x1edd4>
   30938:	ldr	r2, [sp, #12]
   3093c:	cmp	r2, #0
   30940:	beq	309cc <__assert_fail@plt+0x1ed20>
   30944:	add	r5, r0, r1, lsl #3
   30948:	ldr	r0, [r5]
   3094c:	cmp	r0, r8
   30950:	bne	30964 <__assert_fail@plt+0x1ecb8>
   30954:	b	30980 <__assert_fail@plt+0x1ecd4>
   30958:	ldr	r0, [sp, #20]
   3095c:	cmp	r0, #0
   30960:	bne	30a80 <__assert_fail@plt+0x1edd4>
   30964:	ldrb	r0, [r5, #20]
   30968:	add	r5, r5, #24
   3096c:	cmp	r0, #0
   30970:	beq	307e4 <__assert_fail@plt+0x1eb38>
   30974:	ldr	r0, [r5]
   30978:	cmp	r0, r8
   3097c:	bne	30964 <__assert_fail@plt+0x1ecb8>
   30980:	ldr	r0, [r4, #20]
   30984:	add	r1, r8, r8, lsl #1
   30988:	add	r0, r0, r1, lsl #2
   3098c:	ldr	r0, [r0, #8]
   30990:	ldr	r3, [r0]
   30994:	ldr	r0, [sp, #36]	; 0x24
   30998:	cmp	r3, r0
   3099c:	beq	30a70 <__assert_fail@plt+0x1edc4>
   309a0:	ldr	r0, [fp, #8]
   309a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   309a8:	mov	r2, r6
   309ac:	str	r0, [sp]
   309b0:	mov	r0, r7
   309b4:	bl	30758 <__assert_fail@plt+0x1eaac>
   309b8:	cmp	r0, #0
   309bc:	beq	30958 <__assert_fail@plt+0x1ecac>
   309c0:	cmn	r0, #1
   309c4:	bne	30964 <__assert_fail@plt+0x1ecb8>
   309c8:	b	30a58 <__assert_fail@plt+0x1edac>
   309cc:	add	r0, r0, r1, lsl #3
   309d0:	add	r5, r0, #16
   309d4:	ldr	r0, [r5, #-16]
   309d8:	cmp	r0, r8
   309dc:	bne	309f4 <__assert_fail@plt+0x1ed48>
   309e0:	b	30a10 <__assert_fail@plt+0x1ed64>
   309e4:	ldr	r0, [r5]
   309e8:	ldr	r1, [sp, #16]
   309ec:	and	r0, r0, r1
   309f0:	str	r0, [r5]
   309f4:	ldrb	r0, [r5, #4]
   309f8:	add	r5, r5, #24
   309fc:	cmp	r0, #0
   30a00:	beq	307e4 <__assert_fail@plt+0x1eb38>
   30a04:	ldr	r0, [r5, #-16]
   30a08:	cmp	r0, r8
   30a0c:	bne	309f4 <__assert_fail@plt+0x1ed48>
   30a10:	ldr	r0, [r4, #20]
   30a14:	add	r1, r8, r8, lsl #1
   30a18:	add	r0, r0, r1, lsl #2
   30a1c:	ldr	r0, [r0, #8]
   30a20:	ldr	r3, [r0]
   30a24:	ldr	r0, [sp, #36]	; 0x24
   30a28:	cmp	r3, r0
   30a2c:	beq	30a70 <__assert_fail@plt+0x1edc4>
   30a30:	ldr	r0, [fp, #8]
   30a34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30a38:	mov	r2, r6
   30a3c:	str	r0, [sp]
   30a40:	mov	r0, r7
   30a44:	bl	30758 <__assert_fail@plt+0x1eaac>
   30a48:	cmp	r0, #0
   30a4c:	beq	309e4 <__assert_fail@plt+0x1ed38>
   30a50:	cmn	r0, #1
   30a54:	bne	309f4 <__assert_fail@plt+0x1ed48>
   30a58:	sub	sp, fp, #28
   30a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30a64:	ubfx	r0, r0, #1, #1
   30a68:	sub	sp, fp, #28
   30a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a70:	ldr	r0, [sp, #8]
   30a74:	rsb	r0, r0, #0
   30a78:	sub	sp, fp, #28
   30a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a80:	mov	r0, #0
   30a84:	sub	sp, fp, #28
   30a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a8c:	mvn	r0, #0
   30a90:	sub	sp, fp, #28
   30a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30a9c:	add	fp, sp, #28
   30aa0:	sub	sp, sp, #60	; 0x3c
   30aa4:	sub	sp, sp, #1024	; 0x400
   30aa8:	mov	sl, r0
   30aac:	ldrb	r0, [r0]
   30ab0:	mov	r5, r1
   30ab4:	cmp	r0, #0
   30ab8:	beq	30d90 <__assert_fail@plt+0x1f0e4>
   30abc:	add	r1, sp, #52	; 0x34
   30ac0:	mov	r9, #1
   30ac4:	mov	r4, #0
   30ac8:	str	r5, [sp, #48]	; 0x30
   30acc:	add	r8, r1, #16
   30ad0:	ldrb	r6, [r5, r4]
   30ad4:	cmp	r6, #0
   30ad8:	bne	30b14 <__assert_fail@plt+0x1ee68>
   30adc:	b	30b5c <__assert_fail@plt+0x1eeb0>
   30ae0:	sub	r0, r5, r6
   30ae4:	ldr	r5, [sp, #48]	; 0x30
   30ae8:	clz	r0, r0
   30aec:	lsr	r0, r0, #5
   30af0:	and	r9, r9, r0
   30af4:	add	r0, sl, r4
   30af8:	add	r4, r4, #1
   30afc:	ldrb	r0, [r0, #1]
   30b00:	cmp	r0, #0
   30b04:	beq	30b5c <__assert_fail@plt+0x1eeb0>
   30b08:	ldrb	r6, [r5, r4]
   30b0c:	cmp	r6, #0
   30b10:	beq	30b5c <__assert_fail@plt+0x1eeb0>
   30b14:	uxtb	r5, r0
   30b18:	bl	11a84 <__ctype_b_loc@plt>
   30b1c:	ldr	r7, [r0]
   30b20:	add	r0, r7, r5, lsl #1
   30b24:	ldrb	r0, [r0, #1]
   30b28:	tst	r0, #1
   30b2c:	beq	30b3c <__assert_fail@plt+0x1ee90>
   30b30:	bl	11a54 <__ctype_tolower_loc@plt>
   30b34:	ldr	r0, [r0]
   30b38:	ldr	r5, [r0, r5, lsl #2]
   30b3c:	add	r0, r7, r6, lsl #1
   30b40:	ldrb	r0, [r0, #1]
   30b44:	tst	r0, #1
   30b48:	beq	30ae0 <__assert_fail@plt+0x1ee34>
   30b4c:	bl	11a54 <__ctype_tolower_loc@plt>
   30b50:	ldr	r0, [r0]
   30b54:	ldr	r6, [r0, r6, lsl #2]
   30b58:	b	30ae0 <__assert_fail@plt+0x1ee34>
   30b5c:	add	r7, r5, r4
   30b60:	mov	r4, sl
   30b64:	ldrb	r0, [r7]
   30b68:	cmp	r0, #0
   30b6c:	movwne	r4, #0
   30b70:	tst	r9, #1
   30b74:	cmpeq	r0, #0
   30b78:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   30b7c:	sub	r4, r7, r5
   30b80:	add	r0, sl, #1
   30b84:	str	sl, [sp, #32]
   30b88:	cmp	r4, #31
   30b8c:	str	r0, [sp, #36]	; 0x24
   30b90:	str	r4, [sp, #44]	; 0x2c
   30b94:	bhi	30dac <__assert_fail@plt+0x1f100>
   30b98:	add	r2, sp, #52	; 0x34
   30b9c:	mov	r0, r5
   30ba0:	mov	r1, r4
   30ba4:	bl	31854 <__assert_fail@plt+0x1fba8>
   30ba8:	ldr	r8, [sp, #52]	; 0x34
   30bac:	mov	r6, r0
   30bb0:	mov	r0, r5
   30bb4:	mov	r2, r6
   30bb8:	add	r1, r5, r8
   30bbc:	bl	11b08 <strncasecmp@plt>
   30bc0:	cmp	r0, #0
   30bc4:	str	r6, [sp, #28]
   30bc8:	beq	31228 <__assert_fail@plt+0x1f57c>
   30bcc:	sub	r0, r4, r6
   30bd0:	mov	r1, #0
   30bd4:	mov	r2, #1
   30bd8:	mov	r5, r4
   30bdc:	cmp	r6, r0
   30be0:	movcs	r0, r6
   30be4:	add	r6, r0, #1
   30be8:	add	r0, sl, r4
   30bec:	mov	r4, #0
   30bf0:	str	r6, [sp, #52]	; 0x34
   30bf4:	bl	11b68 <memchr@plt>
   30bf8:	cmp	r5, #0
   30bfc:	beq	30da0 <__assert_fail@plt+0x1f0f4>
   30c00:	cmp	r0, #0
   30c04:	str	r6, [sp, #20]
   30c08:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   30c0c:	ldr	r4, [sp, #44]	; 0x2c
   30c10:	ldr	r0, [sp, #28]
   30c14:	cmp	r4, r0
   30c18:	bls	31640 <__assert_fail@plt+0x1f994>
   30c1c:	ldr	r1, [sp, #48]	; 0x30
   30c20:	mov	r2, r0
   30c24:	add	r8, r0, r1
   30c28:	ldr	r0, [sp, #32]
   30c2c:	sub	r9, r8, r7
   30c30:	add	r0, r2, r0
   30c34:	add	r0, r0, #1
   30c38:	str	r0, [sp, #16]
   30c3c:	sub	r0, r1, #1
   30c40:	str	r0, [sp, #48]	; 0x30
   30c44:	bl	11a84 <__ctype_b_loc@plt>
   30c48:	ldr	sl, [r0]
   30c4c:	mov	r0, #0
   30c50:	mov	r5, r4
   30c54:	str	r0, [sp, #40]	; 0x28
   30c58:	ldr	r0, [sp, #40]	; 0x28
   30c5c:	ldr	r1, [sp, #16]
   30c60:	mov	r4, #0
   30c64:	str	r5, [sp, #24]
   30c68:	add	r6, r1, r0
   30c6c:	ldrb	r5, [r8, -r4]
   30c70:	add	r0, sl, r5, lsl #1
   30c74:	ldrb	r0, [r0, #1]
   30c78:	tst	r0, #1
   30c7c:	beq	30c8c <__assert_fail@plt+0x1efe0>
   30c80:	bl	11a54 <__ctype_tolower_loc@plt>
   30c84:	ldr	r0, [r0]
   30c88:	ldr	r5, [r0, r5, lsl #2]
   30c8c:	ldrb	r7, [r6, -r4]
   30c90:	add	r0, sl, r7, lsl #1
   30c94:	ldrb	r0, [r0, #1]
   30c98:	tst	r0, #1
   30c9c:	beq	30cac <__assert_fail@plt+0x1f000>
   30ca0:	bl	11a54 <__ctype_tolower_loc@plt>
   30ca4:	ldr	r0, [r0]
   30ca8:	ldr	r7, [r0, r7, lsl #2]
   30cac:	cmp	r5, r7
   30cb0:	bne	30d40 <__assert_fail@plt+0x1f094>
   30cb4:	sub	r4, r4, #1
   30cb8:	cmp	r9, r4
   30cbc:	bne	30c6c <__assert_fail@plt+0x1efc0>
   30cc0:	ldr	r0, [sp, #32]
   30cc4:	ldr	r1, [sp, #40]	; 0x28
   30cc8:	ldr	r6, [sp, #28]
   30ccc:	add	r4, r0, r1
   30cd0:	cmp	r6, #0
   30cd4:	bne	30cf4 <__assert_fail@plt+0x1f048>
   30cd8:	b	31718 <__assert_fail@plt+0x1fa6c>
   30cdc:	cmp	r9, r5
   30ce0:	sub	r6, r6, #1
   30ce4:	mov	r9, r7
   30ce8:	bne	30d48 <__assert_fail@plt+0x1f09c>
   30cec:	cmp	r6, #0
   30cf0:	beq	31718 <__assert_fail@plt+0x1fa6c>
   30cf4:	ldr	r0, [sp, #48]	; 0x30
   30cf8:	mov	r7, r9
   30cfc:	ldrb	r9, [r0, r6]
   30d00:	add	r0, sl, r9, lsl #1
   30d04:	ldrb	r0, [r0, #1]
   30d08:	tst	r0, #1
   30d0c:	beq	30d1c <__assert_fail@plt+0x1f070>
   30d10:	bl	11a54 <__ctype_tolower_loc@plt>
   30d14:	ldr	r0, [r0]
   30d18:	ldr	r9, [r0, r9, lsl #2]
   30d1c:	ldrb	r5, [r4, r6]
   30d20:	add	r0, sl, r5, lsl #1
   30d24:	ldrb	r0, [r0, #1]
   30d28:	tst	r0, #1
   30d2c:	beq	30cdc <__assert_fail@plt+0x1f030>
   30d30:	bl	11a54 <__ctype_tolower_loc@plt>
   30d34:	ldr	r0, [r0]
   30d38:	ldr	r5, [r0, r5, lsl #2]
   30d3c:	b	30cdc <__assert_fail@plt+0x1f030>
   30d40:	rsb	r1, r4, #1
   30d44:	b	30d4c <__assert_fail@plt+0x1f0a0>
   30d48:	ldr	r1, [sp, #20]
   30d4c:	ldr	r2, [sp, #40]	; 0x28
   30d50:	ldr	r0, [sp, #36]	; 0x24
   30d54:	ldr	r3, [sp, #24]
   30d58:	mov	r4, #0
   30d5c:	add	r2, r1, r2
   30d60:	ldr	r1, [sp, #44]	; 0x2c
   30d64:	add	r0, r0, r3
   30d68:	str	r2, [sp, #40]	; 0x28
   30d6c:	add	r5, r2, r1
   30d70:	mov	r1, #0
   30d74:	sub	r2, r5, r3
   30d78:	bl	11b68 <memchr@plt>
   30d7c:	cmp	r0, #0
   30d80:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   30d84:	cmp	r5, #0
   30d88:	bne	30c58 <__assert_fail@plt+0x1efac>
   30d8c:	b	30da0 <__assert_fail@plt+0x1f0f4>
   30d90:	ldrb	r0, [r5]
   30d94:	cmp	r0, #0
   30d98:	movne	sl, #0
   30d9c:	mov	r4, sl
   30da0:	mov	r0, r4
   30da4:	sub	sp, fp, #28
   30da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30dac:	sub	r2, fp, #36	; 0x24
   30db0:	mov	r0, r5
   30db4:	mov	r1, r4
   30db8:	str	r7, [sp, #40]	; 0x28
   30dbc:	sub	r6, r4, #1
   30dc0:	bl	31854 <__assert_fail@plt+0x1fba8>
   30dc4:	vdup.32	q8, r4
   30dc8:	str	r0, [sp, #20]
   30dcc:	add	r1, sp, #52	; 0x34
   30dd0:	add	r0, r8, #16
   30dd4:	vst1.32	{d16-d17}, [r1]
   30dd8:	vst1.32	{d16-d17}, [r0]
   30ddc:	add	r0, r8, #32
   30de0:	vst1.32	{d16-d17}, [r0]
   30de4:	add	r0, r8, #48	; 0x30
   30de8:	vst1.32	{d16-d17}, [r0]
   30dec:	add	r0, r8, #64	; 0x40
   30df0:	vst1.32	{d16-d17}, [r0]
   30df4:	add	r0, r8, #80	; 0x50
   30df8:	vst1.32	{d16-d17}, [r0]
   30dfc:	add	r0, r8, #96	; 0x60
   30e00:	vst1.32	{d16-d17}, [r0]
   30e04:	add	r0, r8, #112	; 0x70
   30e08:	vst1.32	{d16-d17}, [r0]
   30e0c:	add	r0, r8, #128	; 0x80
   30e10:	vst1.32	{d16-d17}, [r0]
   30e14:	add	r0, r8, #144	; 0x90
   30e18:	vst1.32	{d16-d17}, [r0]
   30e1c:	add	r0, r8, #160	; 0xa0
   30e20:	vst1.32	{d16-d17}, [r0]
   30e24:	add	r0, r8, #176	; 0xb0
   30e28:	vst1.32	{d16-d17}, [r0]
   30e2c:	add	r0, r8, #192	; 0xc0
   30e30:	vst1.32	{d16-d17}, [r0]
   30e34:	add	r0, r8, #208	; 0xd0
   30e38:	vst1.32	{d16-d17}, [r0]
   30e3c:	add	r0, r8, #224	; 0xe0
   30e40:	vst1.32	{d16-d17}, [r0]
   30e44:	add	r0, r8, #240	; 0xf0
   30e48:	vst1.32	{d16-d17}, [r0]
   30e4c:	add	r0, r8, #256	; 0x100
   30e50:	vst1.32	{d16-d17}, [r0]
   30e54:	add	r0, r8, #272	; 0x110
   30e58:	vst1.32	{d16-d17}, [r0]
   30e5c:	add	r0, r8, #288	; 0x120
   30e60:	vst1.32	{d16-d17}, [r0]
   30e64:	add	r0, r8, #304	; 0x130
   30e68:	vst1.32	{d16-d17}, [r0]
   30e6c:	add	r0, r8, #320	; 0x140
   30e70:	vst1.32	{d16-d17}, [r0]
   30e74:	add	r0, r8, #336	; 0x150
   30e78:	vst1.32	{d16-d17}, [r0]
   30e7c:	add	r0, r8, #352	; 0x160
   30e80:	vst1.32	{d16-d17}, [r0]
   30e84:	add	r0, r8, #368	; 0x170
   30e88:	vst1.32	{d16-d17}, [r0]
   30e8c:	add	r0, r8, #384	; 0x180
   30e90:	vst1.32	{d16-d17}, [r0]
   30e94:	add	r0, r8, #400	; 0x190
   30e98:	vst1.32	{d16-d17}, [r0]
   30e9c:	add	r0, r8, #416	; 0x1a0
   30ea0:	vst1.32	{d16-d17}, [r0]
   30ea4:	add	r0, r8, #432	; 0x1b0
   30ea8:	vst1.32	{d16-d17}, [r0]
   30eac:	add	r0, r8, #448	; 0x1c0
   30eb0:	vst1.32	{d16-d17}, [r0]
   30eb4:	add	r0, r8, #464	; 0x1d0
   30eb8:	vst1.32	{d16-d17}, [r0]
   30ebc:	add	r0, r8, #480	; 0x1e0
   30ec0:	vst1.32	{d16-d17}, [r0]
   30ec4:	add	r0, r8, #496	; 0x1f0
   30ec8:	vst1.32	{d16-d17}, [r0]
   30ecc:	add	r0, r8, #512	; 0x200
   30ed0:	vst1.32	{d16-d17}, [r0]
   30ed4:	add	r0, r8, #528	; 0x210
   30ed8:	vst1.32	{d16-d17}, [r0]
   30edc:	add	r0, r8, #544	; 0x220
   30ee0:	vst1.32	{d16-d17}, [r0]
   30ee4:	add	r0, r8, #560	; 0x230
   30ee8:	vst1.32	{d16-d17}, [r0]
   30eec:	add	r0, r8, #576	; 0x240
   30ef0:	vst1.32	{d16-d17}, [r0]
   30ef4:	add	r0, r8, #592	; 0x250
   30ef8:	vst1.32	{d16-d17}, [r0]
   30efc:	add	r0, r8, #608	; 0x260
   30f00:	vst1.32	{d16-d17}, [r0]
   30f04:	add	r0, r8, #624	; 0x270
   30f08:	vst1.32	{d16-d17}, [r0]
   30f0c:	add	r0, r8, #640	; 0x280
   30f10:	vst1.32	{d16-d17}, [r0]
   30f14:	add	r0, r8, #656	; 0x290
   30f18:	vst1.32	{d16-d17}, [r0]
   30f1c:	add	r0, r8, #672	; 0x2a0
   30f20:	vst1.32	{d16-d17}, [r0]
   30f24:	add	r0, r8, #688	; 0x2b0
   30f28:	vst1.32	{d16-d17}, [r0]
   30f2c:	add	r0, r8, #704	; 0x2c0
   30f30:	vst1.32	{d16-d17}, [r0]
   30f34:	add	r0, r8, #720	; 0x2d0
   30f38:	vst1.32	{d16-d17}, [r0]
   30f3c:	add	r0, r8, #736	; 0x2e0
   30f40:	vst1.32	{d16-d17}, [r0]
   30f44:	add	r0, r8, #752	; 0x2f0
   30f48:	vst1.32	{d16-d17}, [r0]
   30f4c:	add	r0, r8, #768	; 0x300
   30f50:	vst1.32	{d16-d17}, [r0]
   30f54:	add	r0, r8, #784	; 0x310
   30f58:	vst1.32	{d16-d17}, [r0]
   30f5c:	add	r0, r8, #800	; 0x320
   30f60:	vst1.32	{d16-d17}, [r0]
   30f64:	add	r0, r8, #816	; 0x330
   30f68:	vst1.32	{d16-d17}, [r0]
   30f6c:	add	r0, r8, #832	; 0x340
   30f70:	vst1.32	{d16-d17}, [r0]
   30f74:	add	r0, r8, #848	; 0x350
   30f78:	vst1.32	{d16-d17}, [r0]
   30f7c:	add	r0, r8, #864	; 0x360
   30f80:	vst1.32	{d16-d17}, [r0]
   30f84:	add	r0, r8, #880	; 0x370
   30f88:	vst1.32	{d16-d17}, [r0]
   30f8c:	add	r0, r8, #896	; 0x380
   30f90:	vst1.32	{d16-d17}, [r0]
   30f94:	add	r0, r8, #912	; 0x390
   30f98:	vst1.32	{d16-d17}, [r0]
   30f9c:	add	r0, r8, #928	; 0x3a0
   30fa0:	vst1.32	{d16-d17}, [r0]
   30fa4:	add	r0, r8, #944	; 0x3b0
   30fa8:	vst1.32	{d16-d17}, [r0]
   30fac:	add	r0, r8, #960	; 0x3c0
   30fb0:	vst1.32	{d16-d17}, [r0]
   30fb4:	add	r0, r8, #976	; 0x3d0
   30fb8:	vst1.32	{d16-d17}, [r0]
   30fbc:	mov	r0, #992	; 0x3e0
   30fc0:	vst1.32	{d16-d17}, [r8], r0
   30fc4:	vst1.32	{d16-d17}, [r8]
   30fc8:	mov	r8, r1
   30fcc:	bl	11a84 <__ctype_b_loc@plt>
   30fd0:	ldr	r4, [r0]
   30fd4:	str	r6, [sp, #16]
   30fd8:	b	30ff0 <__assert_fail@plt+0x1f344>
   30fdc:	str	r6, [r8, r7, lsl #2]
   30fe0:	sub	r6, r6, #1
   30fe4:	add	r5, r5, #1
   30fe8:	cmn	r6, #1
   30fec:	beq	31014 <__assert_fail@plt+0x1f368>
   30ff0:	ldrb	r7, [r5]
   30ff4:	add	r0, r4, r7, lsl #1
   30ff8:	ldrb	r0, [r0, #1]
   30ffc:	tst	r0, #1
   31000:	beq	30fdc <__assert_fail@plt+0x1f330>
   31004:	bl	11a54 <__ctype_tolower_loc@plt>
   31008:	ldr	r0, [r0]
   3100c:	ldr	r7, [r0, r7, lsl #2]
   31010:	b	30fdc <__assert_fail@plt+0x1f330>
   31014:	ldr	r4, [sp, #20]
   31018:	ldr	r6, [fp, #-36]	; 0xffffffdc
   3101c:	ldr	r0, [sp, #48]	; 0x30
   31020:	add	r1, r0, r6
   31024:	mov	r2, r4
   31028:	bl	11b08 <strncasecmp@plt>
   3102c:	cmp	r0, #0
   31030:	beq	31404 <__assert_fail@plt+0x1f758>
   31034:	ldr	r5, [sp, #44]	; 0x2c
   31038:	mov	r1, #0
   3103c:	mov	r2, #1
   31040:	sub	r0, r5, r4
   31044:	cmp	r4, r0
   31048:	movcs	r0, r4
   3104c:	mov	r4, #0
   31050:	add	r0, r0, #1
   31054:	str	r0, [sp, #28]
   31058:	str	r0, [fp, #-36]	; 0xffffffdc
   3105c:	add	r0, sl, r5
   31060:	bl	11b68 <memchr@plt>
   31064:	cmp	r5, #0
   31068:	beq	30da0 <__assert_fail@plt+0x1f0f4>
   3106c:	ldr	r5, [sp, #48]	; 0x30
   31070:	ldr	r6, [sp, #16]
   31074:	cmp	r0, #0
   31078:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   3107c:	bl	11a84 <__ctype_b_loc@plt>
   31080:	ldr	r1, [sp, #20]
   31084:	ldr	r9, [r0]
   31088:	cmp	r1, r6
   3108c:	bcs	31730 <__assert_fail@plt+0x1fa84>
   31090:	ldr	r0, [sp, #32]
   31094:	add	r7, r1, r5
   31098:	ldr	r6, [sp, #44]	; 0x2c
   3109c:	mov	r8, #0
   310a0:	add	r0, r1, r0
   310a4:	add	r0, r0, #1
   310a8:	str	r0, [sp, #16]
   310ac:	ldr	r0, [sp, #40]	; 0x28
   310b0:	sub	r0, r7, r0
   310b4:	add	r0, r0, #1
   310b8:	str	r0, [sp, #40]	; 0x28
   310bc:	sub	r0, r5, #1
   310c0:	str	r0, [sp, #48]	; 0x30
   310c4:	ldr	r0, [sp, #32]
   310c8:	ldrb	r4, [r0, r6]
   310cc:	add	r0, r9, r4, lsl #1
   310d0:	ldrb	r0, [r0, #1]
   310d4:	tst	r0, #1
   310d8:	beq	310e8 <__assert_fail@plt+0x1f43c>
   310dc:	bl	11a54 <__ctype_tolower_loc@plt>
   310e0:	ldr	r0, [r0]
   310e4:	ldr	r4, [r0, r4, lsl #2]
   310e8:	add	r0, sp, #52	; 0x34
   310ec:	ldr	r1, [r0, r4, lsl #2]
   310f0:	cmp	r1, #0
   310f4:	bne	311ec <__assert_fail@plt+0x1f540>
   310f8:	ldr	r0, [sp, #16]
   310fc:	mov	r4, #0
   31100:	str	r6, [sp, #24]
   31104:	add	sl, r0, r8
   31108:	ldrb	r5, [r7, -r4]
   3110c:	add	r0, r9, r5, lsl #1
   31110:	ldrb	r0, [r0, #1]
   31114:	tst	r0, #1
   31118:	beq	31128 <__assert_fail@plt+0x1f47c>
   3111c:	bl	11a54 <__ctype_tolower_loc@plt>
   31120:	ldr	r0, [r0]
   31124:	ldr	r5, [r0, r5, lsl #2]
   31128:	ldrb	r6, [sl, -r4]
   3112c:	add	r0, r9, r6, lsl #1
   31130:	ldrb	r0, [r0, #1]
   31134:	tst	r0, #1
   31138:	beq	31148 <__assert_fail@plt+0x1f49c>
   3113c:	bl	11a54 <__ctype_tolower_loc@plt>
   31140:	ldr	r0, [r0]
   31144:	ldr	r6, [r0, r6, lsl #2]
   31148:	cmp	r5, r6
   3114c:	bne	311dc <__assert_fail@plt+0x1f530>
   31150:	ldr	r0, [sp, #40]	; 0x28
   31154:	sub	r4, r4, #1
   31158:	cmp	r0, r4
   3115c:	bne	31108 <__assert_fail@plt+0x1f45c>
   31160:	ldr	r0, [sp, #32]
   31164:	ldr	r5, [sp, #20]
   31168:	add	sl, r0, r8
   3116c:	cmp	r5, #0
   31170:	bne	31190 <__assert_fail@plt+0x1f4e4>
   31174:	b	31828 <__assert_fail@plt+0x1fb7c>
   31178:	cmp	r7, r6
   3117c:	sub	r5, r5, #1
   31180:	mov	r7, r4
   31184:	bne	311e4 <__assert_fail@plt+0x1f538>
   31188:	cmp	r5, #0
   3118c:	beq	31828 <__assert_fail@plt+0x1fb7c>
   31190:	ldr	r0, [sp, #48]	; 0x30
   31194:	mov	r4, r7
   31198:	ldrb	r7, [r0, r5]
   3119c:	add	r0, r9, r7, lsl #1
   311a0:	ldrb	r0, [r0, #1]
   311a4:	tst	r0, #1
   311a8:	beq	311b8 <__assert_fail@plt+0x1f50c>
   311ac:	bl	11a54 <__ctype_tolower_loc@plt>
   311b0:	ldr	r0, [r0]
   311b4:	ldr	r7, [r0, r7, lsl #2]
   311b8:	ldrb	r6, [sl, r5]
   311bc:	add	r0, r9, r6, lsl #1
   311c0:	ldrb	r0, [r0, #1]
   311c4:	tst	r0, #1
   311c8:	beq	31178 <__assert_fail@plt+0x1f4cc>
   311cc:	bl	11a54 <__ctype_tolower_loc@plt>
   311d0:	ldr	r0, [r0]
   311d4:	ldr	r6, [r0, r6, lsl #2]
   311d8:	b	31178 <__assert_fail@plt+0x1f4cc>
   311dc:	rsb	r1, r4, #1
   311e0:	b	311e8 <__assert_fail@plt+0x1f53c>
   311e4:	ldr	r1, [sp, #28]
   311e8:	ldr	r6, [sp, #24]
   311ec:	add	r8, r1, r8
   311f0:	ldr	r1, [sp, #44]	; 0x2c
   311f4:	ldr	r0, [sp, #36]	; 0x24
   311f8:	mov	r4, #0
   311fc:	add	r5, r8, r1
   31200:	add	r0, r0, r6
   31204:	mov	r1, #0
   31208:	sub	r2, r5, r6
   3120c:	bl	11b68 <memchr@plt>
   31210:	cmp	r0, #0
   31214:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   31218:	cmp	r5, #0
   3121c:	mov	r6, r5
   31220:	bne	310c4 <__assert_fail@plt+0x1f418>
   31224:	b	30da0 <__assert_fail@plt+0x1f0f4>
   31228:	add	r0, sl, r4
   3122c:	mov	r1, #0
   31230:	mov	r2, #1
   31234:	mov	r5, r4
   31238:	mov	r4, #0
   3123c:	bl	11b68 <memchr@plt>
   31240:	cmp	r5, #0
   31244:	beq	30da0 <__assert_fail@plt+0x1f0f4>
   31248:	cmp	r0, #0
   3124c:	str	r8, [sp, #20]
   31250:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   31254:	ldr	r0, [sp, #44]	; 0x2c
   31258:	ldr	r1, [sp, #20]
   3125c:	mov	r8, #0
   31260:	sub	r1, r0, r1
   31264:	mov	r5, r0
   31268:	str	r1, [sp, #16]
   3126c:	ldr	r1, [sp, #48]	; 0x30
   31270:	sub	sl, r1, #1
   31274:	ldr	r1, [sp, #28]
   31278:	rsb	r1, r1, #1
   3127c:	str	r1, [sp, #12]
   31280:	mov	r1, #0
   31284:	str	r1, [sp, #40]	; 0x28
   31288:	ldr	r4, [sp, #28]
   3128c:	ldr	r0, [sp, #44]	; 0x2c
   31290:	str	r5, [sp, #24]
   31294:	cmp	r4, r8
   31298:	movcc	r4, r8
   3129c:	cmp	r4, r0
   312a0:	bcs	31314 <__assert_fail@plt+0x1f668>
   312a4:	ldr	r0, [sp, #36]	; 0x24
   312a8:	ldr	r1, [sp, #40]	; 0x28
   312ac:	add	r9, r0, r1
   312b0:	bl	11a84 <__ctype_b_loc@plt>
   312b4:	ldr	r5, [r0]
   312b8:	ldr	r0, [sp, #48]	; 0x30
   312bc:	ldrb	r6, [r0, r4]
   312c0:	add	r0, r5, r6, lsl #1
   312c4:	ldrb	r0, [r0, #1]
   312c8:	tst	r0, #1
   312cc:	beq	312dc <__assert_fail@plt+0x1f630>
   312d0:	bl	11a54 <__ctype_tolower_loc@plt>
   312d4:	ldr	r0, [r0]
   312d8:	ldr	r6, [r0, r6, lsl #2]
   312dc:	ldrb	r7, [r9, r4]
   312e0:	add	r0, r5, r7, lsl #1
   312e4:	ldrb	r0, [r0, #1]
   312e8:	tst	r0, #1
   312ec:	beq	312fc <__assert_fail@plt+0x1f650>
   312f0:	bl	11a54 <__ctype_tolower_loc@plt>
   312f4:	ldr	r0, [r0]
   312f8:	ldr	r7, [r0, r7, lsl #2]
   312fc:	cmp	r6, r7
   31300:	bne	313b4 <__assert_fail@plt+0x1f708>
   31304:	ldr	r0, [sp, #44]	; 0x2c
   31308:	add	r4, r4, #1
   3130c:	cmp	r4, r0
   31310:	bcc	312b8 <__assert_fail@plt+0x1f60c>
   31314:	ldr	r0, [sp, #32]
   31318:	ldr	r1, [sp, #40]	; 0x28
   3131c:	add	r9, r0, r1
   31320:	ldr	r0, [sp, #28]
   31324:	mov	r5, r0
   31328:	cmp	r8, r0
   3132c:	bcc	3134c <__assert_fail@plt+0x1f6a0>
   31330:	b	31398 <__assert_fail@plt+0x1f6ec>
   31334:	sub	r0, r5, #1
   31338:	cmp	r6, r4
   3133c:	bne	31398 <__assert_fail@plt+0x1f6ec>
   31340:	mov	r5, r0
   31344:	cmp	r8, r0
   31348:	bcs	31398 <__assert_fail@plt+0x1f6ec>
   3134c:	bl	11a84 <__ctype_b_loc@plt>
   31350:	ldrb	r6, [sl, r5]
   31354:	ldr	r7, [r0]
   31358:	add	r0, r7, r6, lsl #1
   3135c:	ldrb	r0, [r0, #1]
   31360:	tst	r0, #1
   31364:	beq	31374 <__assert_fail@plt+0x1f6c8>
   31368:	bl	11a54 <__ctype_tolower_loc@plt>
   3136c:	ldr	r0, [r0]
   31370:	ldr	r6, [r0, r6, lsl #2]
   31374:	ldrb	r4, [r9, r5]
   31378:	add	r0, r7, r4, lsl #1
   3137c:	ldrb	r0, [r0, #1]
   31380:	tst	r0, #1
   31384:	beq	31334 <__assert_fail@plt+0x1f688>
   31388:	bl	11a54 <__ctype_tolower_loc@plt>
   3138c:	ldr	r0, [r0]
   31390:	ldr	r4, [r0, r4, lsl #2]
   31394:	b	31334 <__assert_fail@plt+0x1f688>
   31398:	add	r0, r8, #1
   3139c:	ldr	r8, [sp, #16]
   313a0:	ldr	r1, [sp, #20]
   313a4:	ldr	r2, [sp, #44]	; 0x2c
   313a8:	cmp	r5, r0
   313ac:	bcs	313c4 <__assert_fail@plt+0x1f718>
   313b0:	b	31718 <__assert_fail@plt+0x1fa6c>
   313b4:	ldr	r0, [sp, #12]
   313b8:	ldr	r2, [sp, #44]	; 0x2c
   313bc:	mov	r8, #0
   313c0:	add	r1, r0, r4
   313c4:	ldr	r3, [sp, #40]	; 0x28
   313c8:	ldr	r0, [sp, #36]	; 0x24
   313cc:	ldr	r7, [sp, #24]
   313d0:	mov	r4, #0
   313d4:	add	r3, r1, r3
   313d8:	add	r0, r0, r7
   313dc:	mov	r1, #0
   313e0:	add	r5, r3, r2
   313e4:	str	r3, [sp, #40]	; 0x28
   313e8:	sub	r2, r5, r7
   313ec:	bl	11b68 <memchr@plt>
   313f0:	cmp	r0, #0
   313f4:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   313f8:	cmp	r5, #0
   313fc:	bne	31288 <__assert_fail@plt+0x1f5dc>
   31400:	b	30da0 <__assert_fail@plt+0x1f0f4>
   31404:	ldr	r5, [sp, #44]	; 0x2c
   31408:	mov	r1, #0
   3140c:	mov	r2, #1
   31410:	mov	r4, #0
   31414:	add	r0, sl, r5
   31418:	bl	11b68 <memchr@plt>
   3141c:	cmp	r5, #0
   31420:	beq	30da0 <__assert_fail@plt+0x1f0f4>
   31424:	ldr	r5, [sp, #48]	; 0x30
   31428:	ldr	r7, [sp, #16]
   3142c:	cmp	r0, #0
   31430:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   31434:	sub	r0, r5, #1
   31438:	ldr	r4, [sp, #44]	; 0x2c
   3143c:	str	r0, [sp, #40]	; 0x28
   31440:	ldr	r0, [sp, #20]
   31444:	sub	r9, r4, r6
   31448:	rsb	r0, r0, #1
   3144c:	str	r0, [sp, #4]
   31450:	bl	11a84 <__ctype_b_loc@plt>
   31454:	ldr	sl, [r0]
   31458:	mov	r0, #0
   3145c:	mov	r1, r4
   31460:	mov	r8, #0
   31464:	str	r6, [sp, #12]
   31468:	str	r9, [sp, #8]
   3146c:	str	r0, [sp, #28]
   31470:	ldr	r0, [sp, #32]
   31474:	str	r1, [sp, #24]
   31478:	ldrb	r4, [r0, r1]
   3147c:	add	r0, sl, r4, lsl #1
   31480:	ldrb	r0, [r0, #1]
   31484:	tst	r0, #1
   31488:	beq	31498 <__assert_fail@plt+0x1f7ec>
   3148c:	bl	11a54 <__ctype_tolower_loc@plt>
   31490:	ldr	r0, [r0]
   31494:	ldr	r4, [r0, r4, lsl #2]
   31498:	add	r0, sp, #52	; 0x34
   3149c:	ldr	r0, [r0, r4, lsl #2]
   314a0:	cmp	r0, #0
   314a4:	beq	314c4 <__assert_fail@plt+0x1f818>
   314a8:	cmp	r0, r6
   314ac:	mov	r1, r0
   314b0:	movcc	r1, r9
   314b4:	cmp	r8, #0
   314b8:	mov	r8, #0
   314bc:	moveq	r1, r0
   314c0:	b	315f4 <__assert_fail@plt+0x1f948>
   314c4:	ldr	r4, [sp, #20]
   314c8:	cmp	r4, r8
   314cc:	movcc	r4, r8
   314d0:	cmp	r4, r7
   314d4:	bcs	3153c <__assert_fail@plt+0x1f890>
   314d8:	ldr	r0, [sp, #36]	; 0x24
   314dc:	ldr	r1, [sp, #28]
   314e0:	add	r9, r0, r1
   314e4:	ldrb	r6, [r5, r4]
   314e8:	add	r0, sl, r6, lsl #1
   314ec:	ldrb	r0, [r0, #1]
   314f0:	tst	r0, #1
   314f4:	beq	31504 <__assert_fail@plt+0x1f858>
   314f8:	bl	11a54 <__ctype_tolower_loc@plt>
   314fc:	ldr	r0, [r0]
   31500:	ldr	r6, [r0, r6, lsl #2]
   31504:	ldrb	r5, [r9, r4]
   31508:	add	r0, sl, r5, lsl #1
   3150c:	ldrb	r0, [r0, #1]
   31510:	tst	r0, #1
   31514:	beq	31524 <__assert_fail@plt+0x1f878>
   31518:	bl	11a54 <__ctype_tolower_loc@plt>
   3151c:	ldr	r0, [r0]
   31520:	ldr	r5, [r0, r5, lsl #2]
   31524:	cmp	r6, r5
   31528:	bne	315e0 <__assert_fail@plt+0x1f934>
   3152c:	ldr	r5, [sp, #48]	; 0x30
   31530:	add	r4, r4, #1
   31534:	cmp	r4, r7
   31538:	bcc	314e4 <__assert_fail@plt+0x1f838>
   3153c:	ldr	r0, [sp, #32]
   31540:	ldr	r1, [sp, #28]
   31544:	ldr	r9, [sp, #8]
   31548:	add	r4, r0, r1
   3154c:	ldr	r0, [sp, #20]
   31550:	mov	r7, r0
   31554:	cmp	r8, r0
   31558:	bcc	31578 <__assert_fail@plt+0x1f8cc>
   3155c:	b	315c0 <__assert_fail@plt+0x1f914>
   31560:	sub	r0, r7, #1
   31564:	cmp	r6, r5
   31568:	bne	315c0 <__assert_fail@plt+0x1f914>
   3156c:	mov	r7, r0
   31570:	cmp	r8, r0
   31574:	bcs	315c0 <__assert_fail@plt+0x1f914>
   31578:	ldr	r0, [sp, #40]	; 0x28
   3157c:	ldrb	r6, [r0, r7]
   31580:	add	r0, sl, r6, lsl #1
   31584:	ldrb	r0, [r0, #1]
   31588:	tst	r0, #1
   3158c:	beq	3159c <__assert_fail@plt+0x1f8f0>
   31590:	bl	11a54 <__ctype_tolower_loc@plt>
   31594:	ldr	r0, [r0]
   31598:	ldr	r6, [r0, r6, lsl #2]
   3159c:	ldrb	r5, [r4, r7]
   315a0:	add	r0, sl, r5, lsl #1
   315a4:	ldrb	r0, [r0, #1]
   315a8:	tst	r0, #1
   315ac:	beq	31560 <__assert_fail@plt+0x1f8b4>
   315b0:	bl	11a54 <__ctype_tolower_loc@plt>
   315b4:	ldr	r0, [r0]
   315b8:	ldr	r5, [r0, r5, lsl #2]
   315bc:	b	31560 <__assert_fail@plt+0x1f8b4>
   315c0:	add	r0, r8, #1
   315c4:	ldr	r6, [sp, #12]
   315c8:	mov	r8, r9
   315cc:	cmp	r7, r0
   315d0:	ldr	r7, [sp, #16]
   315d4:	mov	r1, r6
   315d8:	bcs	315f4 <__assert_fail@plt+0x1f948>
   315dc:	b	3183c <__assert_fail@plt+0x1fb90>
   315e0:	ldr	r0, [sp, #4]
   315e4:	ldr	r6, [sp, #12]
   315e8:	ldr	r9, [sp, #8]
   315ec:	mov	r8, #0
   315f0:	add	r1, r0, r4
   315f4:	ldr	r2, [sp, #28]
   315f8:	ldr	r0, [sp, #36]	; 0x24
   315fc:	ldr	r3, [sp, #24]
   31600:	mov	r4, #0
   31604:	add	r2, r1, r2
   31608:	ldr	r1, [sp, #44]	; 0x2c
   3160c:	add	r0, r0, r3
   31610:	str	r2, [sp, #28]
   31614:	add	r5, r2, r1
   31618:	mov	r1, #0
   3161c:	sub	r2, r5, r3
   31620:	bl	11b68 <memchr@plt>
   31624:	cmp	r0, #0
   31628:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   3162c:	cmp	r5, #0
   31630:	mov	r1, r5
   31634:	ldr	r5, [sp, #48]	; 0x30
   31638:	bne	31470 <__assert_fail@plt+0x1f7c4>
   3163c:	b	30da0 <__assert_fail@plt+0x1f0f4>
   31640:	ldr	r0, [sp, #48]	; 0x30
   31644:	mov	r8, r4
   31648:	sub	r9, r0, #1
   3164c:	mov	r0, #0
   31650:	str	r0, [sp, #40]	; 0x28
   31654:	ldr	r4, [sp, #28]
   31658:	ldr	sl, [sp, #32]
   3165c:	cmp	r4, #0
   31660:	bne	3167c <__assert_fail@plt+0x1f9d0>
   31664:	b	31718 <__assert_fail@plt+0x1fa6c>
   31668:	sub	r4, r4, #1
   3166c:	cmp	r6, r5
   31670:	bne	316c8 <__assert_fail@plt+0x1fa1c>
   31674:	cmp	r4, #0
   31678:	beq	31718 <__assert_fail@plt+0x1fa6c>
   3167c:	bl	11a84 <__ctype_b_loc@plt>
   31680:	ldrb	r6, [r9, r4]
   31684:	ldr	r7, [r0]
   31688:	add	r0, r7, r6, lsl #1
   3168c:	ldrb	r0, [r0, #1]
   31690:	tst	r0, #1
   31694:	beq	316a4 <__assert_fail@plt+0x1f9f8>
   31698:	bl	11a54 <__ctype_tolower_loc@plt>
   3169c:	ldr	r0, [r0]
   316a0:	ldr	r6, [r0, r6, lsl #2]
   316a4:	ldrb	r5, [sl, r4]
   316a8:	add	r0, r7, r5, lsl #1
   316ac:	ldrb	r0, [r0, #1]
   316b0:	tst	r0, #1
   316b4:	beq	31668 <__assert_fail@plt+0x1f9bc>
   316b8:	bl	11a54 <__ctype_tolower_loc@plt>
   316bc:	ldr	r0, [r0]
   316c0:	ldr	r5, [r0, r5, lsl #2]
   316c4:	b	31668 <__assert_fail@plt+0x1f9bc>
   316c8:	ldr	r6, [sp, #20]
   316cc:	ldr	r1, [sp, #40]	; 0x28
   316d0:	ldr	r0, [sp, #44]	; 0x2c
   316d4:	mov	r4, #0
   316d8:	add	r1, r1, r6
   316dc:	mov	r2, r6
   316e0:	add	r5, r1, r0
   316e4:	ldr	r0, [sp, #36]	; 0x24
   316e8:	str	r1, [sp, #40]	; 0x28
   316ec:	mov	r1, #0
   316f0:	add	r0, r0, r8
   316f4:	bl	11b68 <memchr@plt>
   316f8:	cmp	r5, #0
   316fc:	beq	30da0 <__assert_fail@plt+0x1f0f4>
   31700:	add	sl, sl, r6
   31704:	cmp	r0, #0
   31708:	mov	r8, r5
   3170c:	str	sl, [sp, #32]
   31710:	beq	31654 <__assert_fail@plt+0x1f9a8>
   31714:	b	30da0 <__assert_fail@plt+0x1f0f4>
   31718:	ldr	r0, [sp, #36]	; 0x24
   3171c:	ldr	r1, [sp, #40]	; 0x28
   31720:	add	r4, r0, r1
   31724:	mov	r0, r4
   31728:	sub	sp, fp, #28
   3172c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31730:	ldr	r6, [sp, #44]	; 0x2c
   31734:	sub	sl, r5, #1
   31738:	mov	r8, #0
   3173c:	ldr	r0, [sp, #32]
   31740:	ldrb	r4, [r0, r6]
   31744:	add	r0, r9, r4, lsl #1
   31748:	ldrb	r0, [r0, #1]
   3174c:	tst	r0, #1
   31750:	beq	31760 <__assert_fail@plt+0x1fab4>
   31754:	bl	11a54 <__ctype_tolower_loc@plt>
   31758:	ldr	r0, [r0]
   3175c:	ldr	r4, [r0, r4, lsl #2]
   31760:	add	r0, sp, #52	; 0x34
   31764:	ldr	r1, [r0, r4, lsl #2]
   31768:	cmp	r1, #0
   3176c:	bne	317ec <__assert_fail@plt+0x1fb40>
   31770:	ldr	r0, [sp, #32]
   31774:	ldr	r7, [sp, #20]
   31778:	str	r6, [sp, #48]	; 0x30
   3177c:	add	r4, r0, r8
   31780:	cmp	r7, #0
   31784:	bne	317a0 <__assert_fail@plt+0x1faf4>
   31788:	b	31828 <__assert_fail@plt+0x1fb7c>
   3178c:	sub	r7, r7, #1
   31790:	cmp	r5, r6
   31794:	bne	317e4 <__assert_fail@plt+0x1fb38>
   31798:	cmp	r7, #0
   3179c:	beq	31828 <__assert_fail@plt+0x1fb7c>
   317a0:	ldrb	r5, [sl, r7]
   317a4:	add	r0, r9, r5, lsl #1
   317a8:	ldrb	r0, [r0, #1]
   317ac:	tst	r0, #1
   317b0:	beq	317c0 <__assert_fail@plt+0x1fb14>
   317b4:	bl	11a54 <__ctype_tolower_loc@plt>
   317b8:	ldr	r0, [r0]
   317bc:	ldr	r5, [r0, r5, lsl #2]
   317c0:	ldrb	r6, [r4, r7]
   317c4:	add	r0, r9, r6, lsl #1
   317c8:	ldrb	r0, [r0, #1]
   317cc:	tst	r0, #1
   317d0:	beq	3178c <__assert_fail@plt+0x1fae0>
   317d4:	bl	11a54 <__ctype_tolower_loc@plt>
   317d8:	ldr	r0, [r0]
   317dc:	ldr	r6, [r0, r6, lsl #2]
   317e0:	b	3178c <__assert_fail@plt+0x1fae0>
   317e4:	ldr	r1, [sp, #28]
   317e8:	ldr	r6, [sp, #48]	; 0x30
   317ec:	add	r8, r1, r8
   317f0:	ldr	r1, [sp, #44]	; 0x2c
   317f4:	ldr	r0, [sp, #36]	; 0x24
   317f8:	mov	r4, #0
   317fc:	add	r5, r8, r1
   31800:	add	r0, r0, r6
   31804:	mov	r1, #0
   31808:	sub	r2, r5, r6
   3180c:	bl	11b68 <memchr@plt>
   31810:	cmp	r0, #0
   31814:	bne	30da0 <__assert_fail@plt+0x1f0f4>
   31818:	cmp	r5, #0
   3181c:	mov	r6, r5
   31820:	bne	3173c <__assert_fail@plt+0x1fa90>
   31824:	b	30da0 <__assert_fail@plt+0x1f0f4>
   31828:	ldr	r0, [sp, #36]	; 0x24
   3182c:	add	r4, r0, r8
   31830:	mov	r0, r4
   31834:	sub	sp, fp, #28
   31838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3183c:	ldr	r0, [sp, #36]	; 0x24
   31840:	ldr	r1, [sp, #28]
   31844:	add	r4, r0, r1
   31848:	mov	r0, r4
   3184c:	sub	sp, fp, #28
   31850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31858:	add	fp, sp, #28
   3185c:	sub	sp, sp, #20
   31860:	mov	r6, r1
   31864:	cmp	r1, #3
   31868:	str	r0, [sp, #16]
   3186c:	bcs	31884 <__assert_fail@plt+0x1fbd8>
   31870:	mov	r0, #1
   31874:	str	r0, [r2]
   31878:	sub	r0, r6, #1
   3187c:	sub	sp, fp, #28
   31880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31884:	str	r2, [sp]
   31888:	bl	11a84 <__ctype_b_loc@plt>
   3188c:	ldr	r2, [r0]
   31890:	mov	r0, #0
   31894:	mvn	r4, #0
   31898:	mov	r7, #1
   3189c:	mov	r5, #1
   318a0:	mov	r1, #1
   318a4:	str	r6, [sp, #12]
   318a8:	str	r2, [sp, #4]
   318ac:	b	318d0 <__assert_fail@plt+0x1fc24>
   318b0:	mov	r4, r9
   318b4:	sub	r1, r7, r9
   318b8:	mov	r5, #1
   318bc:	mov	r0, r7
   318c0:	ldr	r6, [sp, #12]
   318c4:	add	r7, r0, r5
   318c8:	cmp	r7, r6
   318cc:	bcs	31998 <__assert_fail@plt+0x1fcec>
   318d0:	mov	r6, r0
   318d4:	ldr	r0, [sp, #16]
   318d8:	str	r1, [sp, #8]
   318dc:	ldrb	r8, [r0, r7]
   318e0:	add	r0, r2, r8, lsl #1
   318e4:	ldrb	r0, [r0, #1]
   318e8:	tst	r0, #1
   318ec:	beq	31900 <__assert_fail@plt+0x1fc54>
   318f0:	bl	11a54 <__ctype_tolower_loc@plt>
   318f4:	ldr	r0, [r0]
   318f8:	ldr	r2, [sp, #4]
   318fc:	ldrb	r8, [r0, r8, lsl #2]
   31900:	ldr	r1, [sp, #16]
   31904:	add	r0, r4, r5
   31908:	mov	r9, r4
   3190c:	ldrb	sl, [r1, r0]
   31910:	add	r0, r2, sl, lsl #1
   31914:	ldrb	r0, [r0, #1]
   31918:	tst	r0, #1
   3191c:	beq	31930 <__assert_fail@plt+0x1fc84>
   31920:	bl	11a54 <__ctype_tolower_loc@plt>
   31924:	ldr	r0, [r0]
   31928:	ldr	r2, [sp, #4]
   3192c:	ldrb	sl, [r0, sl, lsl #2]
   31930:	cmp	r8, sl
   31934:	bcc	318b0 <__assert_fail@plt+0x1fc04>
   31938:	bne	31958 <__assert_fail@plt+0x1fcac>
   3193c:	ldr	r1, [sp, #8]
   31940:	cmp	r5, r1
   31944:	bne	3197c <__assert_fail@plt+0x1fcd0>
   31948:	add	r0, r6, r5
   3194c:	mov	r1, r5
   31950:	mov	r5, #1
   31954:	b	31984 <__assert_fail@plt+0x1fcd8>
   31958:	add	r0, r6, #1
   3195c:	mov	r1, #1
   31960:	mov	r5, #1
   31964:	mov	r4, r6
   31968:	ldr	r6, [sp, #12]
   3196c:	add	r7, r0, r5
   31970:	cmp	r7, r6
   31974:	bcc	318d0 <__assert_fail@plt+0x1fc24>
   31978:	b	31998 <__assert_fail@plt+0x1fcec>
   3197c:	add	r5, r5, #1
   31980:	mov	r0, r6
   31984:	ldr	r6, [sp, #12]
   31988:	mov	r4, r9
   3198c:	add	r7, r0, r5
   31990:	cmp	r7, r6
   31994:	bcc	318d0 <__assert_fail@plt+0x1fc24>
   31998:	ldr	r0, [sp]
   3199c:	cmp	r6, #2
   319a0:	str	r4, [sp, #4]
   319a4:	str	r1, [r0]
   319a8:	bcc	31ab8 <__assert_fail@plt+0x1fe0c>
   319ac:	bl	11a84 <__ctype_b_loc@plt>
   319b0:	ldr	r3, [r0]
   319b4:	mov	r0, #0
   319b8:	mvn	r5, #0
   319bc:	mov	r7, #1
   319c0:	mov	sl, #1
   319c4:	mov	r9, #1
   319c8:	str	r3, [sp, #8]
   319cc:	b	319f0 <__assert_fail@plt+0x1fd44>
   319d0:	mov	r5, r8
   319d4:	sub	r9, r7, r8
   319d8:	mov	sl, #1
   319dc:	mov	r0, r7
   319e0:	ldr	r1, [sp, #12]
   319e4:	add	r7, r0, sl
   319e8:	cmp	r7, r1
   319ec:	bcs	31ac0 <__assert_fail@plt+0x1fe14>
   319f0:	mov	r4, r0
   319f4:	ldr	r0, [sp, #16]
   319f8:	ldrb	r6, [r0, r7]
   319fc:	add	r0, r3, r6, lsl #1
   31a00:	ldrb	r0, [r0, #1]
   31a04:	tst	r0, #1
   31a08:	beq	31a1c <__assert_fail@plt+0x1fd70>
   31a0c:	bl	11a54 <__ctype_tolower_loc@plt>
   31a10:	ldr	r0, [r0]
   31a14:	ldr	r3, [sp, #8]
   31a18:	ldrb	r6, [r0, r6, lsl #2]
   31a1c:	ldr	r1, [sp, #16]
   31a20:	add	r0, r5, sl
   31a24:	mov	r8, r5
   31a28:	ldrb	r5, [r1, r0]
   31a2c:	add	r0, r3, r5, lsl #1
   31a30:	ldrb	r0, [r0, #1]
   31a34:	tst	r0, #1
   31a38:	beq	31a4c <__assert_fail@plt+0x1fda0>
   31a3c:	bl	11a54 <__ctype_tolower_loc@plt>
   31a40:	ldr	r0, [r0]
   31a44:	ldr	r3, [sp, #8]
   31a48:	ldrb	r5, [r0, r5, lsl #2]
   31a4c:	cmp	r5, r6
   31a50:	bcc	319d0 <__assert_fail@plt+0x1fd24>
   31a54:	cmp	r6, r5
   31a58:	bne	31a74 <__assert_fail@plt+0x1fdc8>
   31a5c:	cmp	sl, r9
   31a60:	bne	31a98 <__assert_fail@plt+0x1fdec>
   31a64:	add	r0, r4, sl
   31a68:	mov	r9, sl
   31a6c:	mov	sl, #1
   31a70:	b	31aa0 <__assert_fail@plt+0x1fdf4>
   31a74:	add	r0, r4, #1
   31a78:	mov	r9, #1
   31a7c:	mov	sl, #1
   31a80:	mov	r5, r4
   31a84:	ldr	r1, [sp, #12]
   31a88:	add	r7, r0, sl
   31a8c:	cmp	r7, r1
   31a90:	bcc	319f0 <__assert_fail@plt+0x1fd44>
   31a94:	b	31ac0 <__assert_fail@plt+0x1fe14>
   31a98:	add	sl, sl, #1
   31a9c:	mov	r0, r4
   31aa0:	ldr	r1, [sp, #12]
   31aa4:	mov	r5, r8
   31aa8:	add	r7, r0, sl
   31aac:	cmp	r7, r1
   31ab0:	bcc	319f0 <__assert_fail@plt+0x1fd44>
   31ab4:	b	31ac0 <__assert_fail@plt+0x1fe14>
   31ab8:	mvn	r5, #0
   31abc:	mov	r9, #1
   31ac0:	ldr	r0, [sp, #4]
   31ac4:	add	r1, r5, #1
   31ac8:	add	r0, r0, #1
   31acc:	cmp	r1, r0
   31ad0:	bcc	31ae0 <__assert_fail@plt+0x1fe34>
   31ad4:	ldr	r0, [sp]
   31ad8:	str	r9, [r0]
   31adc:	mov	r0, r1
   31ae0:	sub	sp, fp, #28
   31ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31aec:	add	fp, sp, #28
   31af0:	sub	sp, sp, #36	; 0x24
   31af4:	sub	sp, sp, #1024	; 0x400
   31af8:	mov	r8, r1
   31afc:	ldrb	r1, [r0]
   31b00:	mov	r4, r0
   31b04:	cmp	r1, #0
   31b08:	beq	31bc8 <__assert_fail@plt+0x1ff1c>
   31b0c:	add	r0, sp, #32
   31b10:	mov	r2, #0
   31b14:	add	sl, r0, #16
   31b18:	mov	r0, #1
   31b1c:	ldrb	r3, [r8, r2]
   31b20:	cmp	r3, #0
   31b24:	uxtbne	r1, r1
   31b28:	subne	r1, r1, r3
   31b2c:	clzne	r1, r1
   31b30:	lsrne	r1, r1, #5
   31b34:	andne	r0, r0, r1
   31b38:	addne	r1, r4, r2
   31b3c:	addne	r2, r2, #1
   31b40:	ldrbne	r1, [r1, #1]
   31b44:	cmpne	r1, #0
   31b48:	bne	31b1c <__assert_fail@plt+0x1fe70>
   31b4c:	add	r6, r8, r2
   31b50:	mov	r7, r4
   31b54:	ldrb	r1, [r6]
   31b58:	cmp	r1, #0
   31b5c:	movwne	r7, #0
   31b60:	tst	r0, #1
   31b64:	cmpeq	r1, #0
   31b68:	bne	31bd8 <__assert_fail@plt+0x1ff2c>
   31b6c:	ldrb	r1, [r8]
   31b70:	add	r0, r4, #1
   31b74:	sub	r5, r6, r8
   31b78:	bl	11acc <strchr@plt>
   31b7c:	mov	r7, r0
   31b80:	cmp	r5, #1
   31b84:	cmpne	r7, #0
   31b88:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   31b8c:	add	r0, r4, r5
   31b90:	sub	r9, r6, r5
   31b94:	str	r6, [sp, #20]
   31b98:	str	r5, [sp, #28]
   31b9c:	str	r7, [sp, #24]
   31ba0:	subs	r0, r0, r7
   31ba4:	movwcc	r0, #1
   31ba8:	cmp	r5, #31
   31bac:	bhi	31be4 <__assert_fail@plt+0x1ff38>
   31bb0:	mov	sl, r0
   31bb4:	cmp	r5, #3
   31bb8:	bcs	31d1c <__assert_fail@plt+0x20070>
   31bbc:	sub	r6, r5, #1
   31bc0:	mov	r5, #1
   31bc4:	b	323c8 <__assert_fail@plt+0x2071c>
   31bc8:	ldrb	r0, [r8]
   31bcc:	cmp	r0, #0
   31bd0:	movne	r4, #0
   31bd4:	mov	r7, r4
   31bd8:	mov	r0, r7
   31bdc:	sub	sp, fp, #28
   31be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31be4:	str	r0, [sp, #8]
   31be8:	rsb	r0, r5, #0
   31bec:	mvn	r1, #0
   31bf0:	mov	r2, #1
   31bf4:	mov	ip, #1
   31bf8:	mov	r3, #1
   31bfc:	str	r0, [sp, #4]
   31c00:	mov	r0, #0
   31c04:	b	31c20 <__assert_fail@plt+0x1ff74>
   31c08:	sub	ip, r2, r1
   31c0c:	mov	r3, #1
   31c10:	mov	r0, r2
   31c14:	add	r2, r3, r0
   31c18:	cmp	r2, r5
   31c1c:	bcs	31c78 <__assert_fail@plt+0x1ffcc>
   31c20:	add	r4, r1, r3
   31c24:	ldrb	r7, [r9, r2]
   31c28:	ldrb	r4, [r9, r4]
   31c2c:	cmp	r7, r4
   31c30:	bcc	31c08 <__assert_fail@plt+0x1ff5c>
   31c34:	bne	31c58 <__assert_fail@plt+0x1ffac>
   31c38:	cmp	r3, ip
   31c3c:	addne	r3, r3, #1
   31c40:	addeq	r0, r0, ip
   31c44:	moveq	r3, #1
   31c48:	add	r2, r3, r0
   31c4c:	cmp	r2, r5
   31c50:	bcc	31c20 <__assert_fail@plt+0x1ff74>
   31c54:	b	31c78 <__assert_fail@plt+0x1ffcc>
   31c58:	add	r2, r0, #1
   31c5c:	mov	r1, r0
   31c60:	mov	r3, #1
   31c64:	mov	ip, #1
   31c68:	mov	r0, r2
   31c6c:	add	r2, r3, r0
   31c70:	cmp	r2, r5
   31c74:	bcc	31c20 <__assert_fail@plt+0x1ff74>
   31c78:	cmp	r5, #2
   31c7c:	bcc	31e48 <__assert_fail@plt+0x2019c>
   31c80:	mvn	lr, #0
   31c84:	mov	r2, #0
   31c88:	mov	r3, #1
   31c8c:	mov	r5, #1
   31c90:	mov	r7, #1
   31c94:	b	31cb4 <__assert_fail@plt+0x20008>
   31c98:	sub	r5, r3, lr
   31c9c:	mov	r7, #1
   31ca0:	mov	r2, r3
   31ca4:	ldr	r0, [sp, #28]
   31ca8:	add	r3, r7, r2
   31cac:	cmp	r3, r0
   31cb0:	bcs	31e50 <__assert_fail@plt+0x201a4>
   31cb4:	add	r4, lr, r7
   31cb8:	ldrb	r0, [r9, r3]
   31cbc:	ldrb	r4, [r9, r4]
   31cc0:	cmp	r4, r0
   31cc4:	bcc	31c98 <__assert_fail@plt+0x1ffec>
   31cc8:	cmp	r0, r4
   31ccc:	bne	31cf4 <__assert_fail@plt+0x20048>
   31cd0:	cmp	r7, r5
   31cd4:	addne	r7, r7, #1
   31cd8:	addeq	r2, r2, r5
   31cdc:	moveq	r7, #1
   31ce0:	ldr	r0, [sp, #28]
   31ce4:	add	r3, r7, r2
   31ce8:	cmp	r3, r0
   31cec:	bcc	31cb4 <__assert_fail@plt+0x20008>
   31cf0:	b	31e50 <__assert_fail@plt+0x201a4>
   31cf4:	add	r0, r2, #1
   31cf8:	mov	lr, r2
   31cfc:	mov	r7, #1
   31d00:	mov	r5, #1
   31d04:	mov	r2, r0
   31d08:	ldr	r0, [sp, #28]
   31d0c:	add	r3, r7, r2
   31d10:	cmp	r3, r0
   31d14:	bcc	31cb4 <__assert_fail@plt+0x20008>
   31d18:	b	31e50 <__assert_fail@plt+0x201a4>
   31d1c:	mvn	r1, #0
   31d20:	mov	r0, #0
   31d24:	mov	r2, #1
   31d28:	mov	ip, #1
   31d2c:	mov	r3, #1
   31d30:	b	31d4c <__assert_fail@plt+0x200a0>
   31d34:	sub	ip, r2, r1
   31d38:	mov	r3, #1
   31d3c:	mov	r0, r2
   31d40:	add	r2, r3, r0
   31d44:	cmp	r2, r5
   31d48:	bcs	31da4 <__assert_fail@plt+0x200f8>
   31d4c:	add	r4, r1, r3
   31d50:	ldrb	r7, [r9, r2]
   31d54:	ldrb	r4, [r9, r4]
   31d58:	cmp	r7, r4
   31d5c:	bcc	31d34 <__assert_fail@plt+0x20088>
   31d60:	bne	31d84 <__assert_fail@plt+0x200d8>
   31d64:	cmp	r3, ip
   31d68:	addne	r3, r3, #1
   31d6c:	addeq	r0, r0, ip
   31d70:	moveq	r3, #1
   31d74:	add	r2, r3, r0
   31d78:	cmp	r2, r5
   31d7c:	bcc	31d4c <__assert_fail@plt+0x200a0>
   31d80:	b	31da4 <__assert_fail@plt+0x200f8>
   31d84:	add	r2, r0, #1
   31d88:	mov	r1, r0
   31d8c:	mov	r3, #1
   31d90:	mov	ip, #1
   31d94:	mov	r0, r2
   31d98:	add	r2, r3, r0
   31d9c:	cmp	r2, r5
   31da0:	bcc	31d4c <__assert_fail@plt+0x200a0>
   31da4:	cmp	r5, #2
   31da8:	bcc	323ac <__assert_fail@plt+0x20700>
   31dac:	mvn	lr, #0
   31db0:	mov	r2, #0
   31db4:	mov	r3, #1
   31db8:	mov	r5, #1
   31dbc:	mov	r7, #1
   31dc0:	b	31de0 <__assert_fail@plt+0x20134>
   31dc4:	sub	r5, r3, lr
   31dc8:	mov	r7, #1
   31dcc:	mov	r2, r3
   31dd0:	ldr	r0, [sp, #28]
   31dd4:	add	r3, r7, r2
   31dd8:	cmp	r3, r0
   31ddc:	bcs	323b4 <__assert_fail@plt+0x20708>
   31de0:	add	r4, lr, r7
   31de4:	ldrb	r0, [r9, r3]
   31de8:	ldrb	r4, [r9, r4]
   31dec:	cmp	r4, r0
   31df0:	bcc	31dc4 <__assert_fail@plt+0x20118>
   31df4:	cmp	r0, r4
   31df8:	bne	31e20 <__assert_fail@plt+0x20174>
   31dfc:	cmp	r7, r5
   31e00:	addne	r7, r7, #1
   31e04:	addeq	r2, r2, r5
   31e08:	moveq	r7, #1
   31e0c:	ldr	r0, [sp, #28]
   31e10:	add	r3, r7, r2
   31e14:	cmp	r3, r0
   31e18:	bcc	31de0 <__assert_fail@plt+0x20134>
   31e1c:	b	323b4 <__assert_fail@plt+0x20708>
   31e20:	add	r0, r2, #1
   31e24:	mov	lr, r2
   31e28:	mov	r7, #1
   31e2c:	mov	r5, #1
   31e30:	mov	r2, r0
   31e34:	ldr	r0, [sp, #28]
   31e38:	add	r3, r7, r2
   31e3c:	cmp	r3, r0
   31e40:	bcc	31de0 <__assert_fail@plt+0x20134>
   31e44:	b	323b4 <__assert_fail@plt+0x20708>
   31e48:	mov	r5, #1
   31e4c:	mvn	lr, #0
   31e50:	ldr	r2, [sp, #28]
   31e54:	add	r3, sp, #32
   31e58:	add	r0, sl, #976	; 0x3d0
   31e5c:	vdup.32	q8, r2
   31e60:	vst1.32	{d16-d17}, [r3]
   31e64:	vst1.32	{d16-d17}, [r0]
   31e68:	add	r0, sl, #960	; 0x3c0
   31e6c:	vst1.32	{d16-d17}, [r0]
   31e70:	add	r0, sl, #944	; 0x3b0
   31e74:	vst1.32	{d16-d17}, [r0]
   31e78:	add	r0, sl, #928	; 0x3a0
   31e7c:	vst1.32	{d16-d17}, [r0]
   31e80:	add	r0, sl, #912	; 0x390
   31e84:	vst1.32	{d16-d17}, [r0]
   31e88:	add	r0, sl, #896	; 0x380
   31e8c:	vst1.32	{d16-d17}, [r0]
   31e90:	add	r0, sl, #880	; 0x370
   31e94:	vst1.32	{d16-d17}, [r0]
   31e98:	add	r0, sl, #864	; 0x360
   31e9c:	vst1.32	{d16-d17}, [r0]
   31ea0:	add	r0, sl, #848	; 0x350
   31ea4:	vst1.32	{d16-d17}, [r0]
   31ea8:	add	r0, sl, #832	; 0x340
   31eac:	vst1.32	{d16-d17}, [r0]
   31eb0:	add	r0, sl, #816	; 0x330
   31eb4:	vst1.32	{d16-d17}, [r0]
   31eb8:	add	r0, sl, #800	; 0x320
   31ebc:	vst1.32	{d16-d17}, [r0]
   31ec0:	add	r0, sl, #784	; 0x310
   31ec4:	vst1.32	{d16-d17}, [r0]
   31ec8:	add	r0, sl, #768	; 0x300
   31ecc:	vst1.32	{d16-d17}, [r0]
   31ed0:	add	r0, sl, #752	; 0x2f0
   31ed4:	vst1.32	{d16-d17}, [r0]
   31ed8:	add	r0, sl, #736	; 0x2e0
   31edc:	vst1.32	{d16-d17}, [r0]
   31ee0:	add	r0, sl, #720	; 0x2d0
   31ee4:	vst1.32	{d16-d17}, [r0]
   31ee8:	add	r0, sl, #704	; 0x2c0
   31eec:	vst1.32	{d16-d17}, [r0]
   31ef0:	add	r0, sl, #688	; 0x2b0
   31ef4:	vst1.32	{d16-d17}, [r0]
   31ef8:	add	r0, sl, #672	; 0x2a0
   31efc:	vst1.32	{d16-d17}, [r0]
   31f00:	add	r0, sl, #656	; 0x290
   31f04:	vst1.32	{d16-d17}, [r0]
   31f08:	add	r0, sl, #640	; 0x280
   31f0c:	vst1.32	{d16-d17}, [r0]
   31f10:	add	r0, sl, #624	; 0x270
   31f14:	vst1.32	{d16-d17}, [r0]
   31f18:	add	r0, sl, #608	; 0x260
   31f1c:	vst1.32	{d16-d17}, [r0]
   31f20:	add	r0, sl, #592	; 0x250
   31f24:	vst1.32	{d16-d17}, [r0]
   31f28:	add	r0, sl, #576	; 0x240
   31f2c:	vst1.32	{d16-d17}, [r0]
   31f30:	add	r0, sl, #560	; 0x230
   31f34:	vst1.32	{d16-d17}, [r0]
   31f38:	add	r0, sl, #544	; 0x220
   31f3c:	vst1.32	{d16-d17}, [r0]
   31f40:	add	r0, sl, #528	; 0x210
   31f44:	vst1.32	{d16-d17}, [r0]
   31f48:	add	r0, sl, #512	; 0x200
   31f4c:	vst1.32	{d16-d17}, [r0]
   31f50:	add	r0, sl, #496	; 0x1f0
   31f54:	vst1.32	{d16-d17}, [r0]
   31f58:	add	r0, sl, #480	; 0x1e0
   31f5c:	vst1.32	{d16-d17}, [r0]
   31f60:	add	r0, sl, #464	; 0x1d0
   31f64:	vst1.32	{d16-d17}, [r0]
   31f68:	add	r0, sl, #448	; 0x1c0
   31f6c:	vst1.32	{d16-d17}, [r0]
   31f70:	add	r0, sl, #432	; 0x1b0
   31f74:	vst1.32	{d16-d17}, [r0]
   31f78:	add	r0, sl, #416	; 0x1a0
   31f7c:	vst1.32	{d16-d17}, [r0]
   31f80:	add	r0, sl, #400	; 0x190
   31f84:	vst1.32	{d16-d17}, [r0]
   31f88:	add	r0, sl, #384	; 0x180
   31f8c:	vst1.32	{d16-d17}, [r0]
   31f90:	add	r0, sl, #368	; 0x170
   31f94:	vst1.32	{d16-d17}, [r0]
   31f98:	add	r0, sl, #352	; 0x160
   31f9c:	vst1.32	{d16-d17}, [r0]
   31fa0:	add	r0, sl, #336	; 0x150
   31fa4:	vst1.32	{d16-d17}, [r0]
   31fa8:	add	r0, sl, #320	; 0x140
   31fac:	vst1.32	{d16-d17}, [r0]
   31fb0:	add	r0, sl, #304	; 0x130
   31fb4:	vst1.32	{d16-d17}, [r0]
   31fb8:	add	r0, sl, #288	; 0x120
   31fbc:	vst1.32	{d16-d17}, [r0]
   31fc0:	add	r0, sl, #272	; 0x110
   31fc4:	vst1.32	{d16-d17}, [r0]
   31fc8:	add	r0, sl, #256	; 0x100
   31fcc:	vst1.32	{d16-d17}, [r0]
   31fd0:	add	r0, sl, #240	; 0xf0
   31fd4:	vst1.32	{d16-d17}, [r0]
   31fd8:	add	r0, sl, #224	; 0xe0
   31fdc:	vst1.32	{d16-d17}, [r0]
   31fe0:	add	r0, sl, #208	; 0xd0
   31fe4:	vst1.32	{d16-d17}, [r0]
   31fe8:	add	r0, sl, #192	; 0xc0
   31fec:	vst1.32	{d16-d17}, [r0]
   31ff0:	add	r0, sl, #176	; 0xb0
   31ff4:	vst1.32	{d16-d17}, [r0]
   31ff8:	add	r0, sl, #160	; 0xa0
   31ffc:	vst1.32	{d16-d17}, [r0]
   32000:	add	r0, sl, #144	; 0x90
   32004:	vst1.32	{d16-d17}, [r0]
   32008:	add	r0, sl, #128	; 0x80
   3200c:	vst1.32	{d16-d17}, [r0]
   32010:	add	r0, sl, #112	; 0x70
   32014:	vst1.32	{d16-d17}, [r0]
   32018:	add	r0, sl, #96	; 0x60
   3201c:	vst1.32	{d16-d17}, [r0]
   32020:	add	r0, sl, #80	; 0x50
   32024:	vst1.32	{d16-d17}, [r0]
   32028:	add	r0, sl, #64	; 0x40
   3202c:	vst1.32	{d16-d17}, [r0]
   32030:	add	r0, sl, #48	; 0x30
   32034:	vst1.32	{d16-d17}, [r0]
   32038:	add	r0, sl, #32
   3203c:	vst1.32	{d16-d17}, [r0]
   32040:	add	r0, sl, #16
   32044:	vst1.32	{d16-d17}, [r0]
   32048:	mov	r0, #992	; 0x3e0
   3204c:	vst1.32	{d16-d17}, [sl], r0
   32050:	add	r0, r1, #1
   32054:	add	r1, lr, #1
   32058:	cmp	r1, r0
   3205c:	vst1.32	{d16-d17}, [sl]
   32060:	movcc	r5, ip
   32064:	movcc	r1, r0
   32068:	cmp	r2, #0
   3206c:	str	r1, [sp, #16]
   32070:	str	r5, [sp, #12]
   32074:	beq	320e8 <__assert_fail@plt+0x2043c>
   32078:	mov	r6, r3
   3207c:	ldr	r3, [sp, #20]
   32080:	mov	lr, r2
   32084:	and	r0, r2, #1
   32088:	mvn	r2, r8
   3208c:	mov	r1, #0
   32090:	cmn	r2, r3
   32094:	beq	320cc <__assert_fail@plt+0x20420>
   32098:	sub	r2, lr, r0
   3209c:	sub	r3, lr, #2
   320a0:	mov	r1, #0
   320a4:	mov	r5, r9
   320a8:	add	r4, r3, #1
   320ac:	ldrb	r7, [r5, r1]!
   320b0:	add	r1, r1, #2
   320b4:	cmp	r2, r1
   320b8:	str	r4, [r6, r7, lsl #2]
   320bc:	ldrb	r7, [r5, #1]
   320c0:	str	r3, [r6, r7, lsl #2]
   320c4:	sub	r3, r3, #2
   320c8:	bne	320a4 <__assert_fail@plt+0x203f8>
   320cc:	ldr	r5, [sp, #12]
   320d0:	cmp	r0, #0
   320d4:	beq	320e8 <__assert_fail@plt+0x2043c>
   320d8:	ldrb	r0, [r9, r1]
   320dc:	mvn	r1, r1
   320e0:	add	r1, lr, r1
   320e4:	str	r1, [r6, r0, lsl #2]
   320e8:	ldr	r6, [sp, #16]
   320ec:	add	r1, r9, r5
   320f0:	mov	r0, r9
   320f4:	mov	r2, r6
   320f8:	bl	11aa8 <bcmp@plt>
   320fc:	cmp	r0, #0
   32100:	beq	3224c <__assert_fail@plt+0x205a0>
   32104:	ldr	r0, [sp, #24]
   32108:	ldr	r1, [sp, #8]
   3210c:	ldr	r4, [sp, #28]
   32110:	mov	r7, #0
   32114:	add	r0, r0, r1
   32118:	sub	r2, r4, r1
   3211c:	mov	r1, #0
   32120:	bl	11b68 <memchr@plt>
   32124:	sub	r1, r4, r6
   32128:	cmp	r6, r1
   3212c:	movcs	r1, r6
   32130:	cmp	r4, #0
   32134:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32138:	cmp	r0, #0
   3213c:	str	r1, [sp, #12]
   32140:	bne	31bd8 <__assert_fail@plt+0x1ff2c>
   32144:	ldr	r2, [sp, #16]
   32148:	sub	r0, r4, #1
   3214c:	cmp	r2, r0
   32150:	bcs	32600 <__assert_fail@plt+0x20954>
   32154:	ldr	r0, [sp, #24]
   32158:	ldr	r1, [sp, #20]
   3215c:	mov	r5, #0
   32160:	add	r0, r0, r2
   32164:	str	r0, [sp, #8]
   32168:	ldr	r0, [sp, #4]
   3216c:	add	r0, r1, r0
   32170:	add	sl, r0, r2
   32174:	sub	r0, r8, r1
   32178:	mov	r1, r4
   3217c:	add	r0, r0, r2
   32180:	add	r6, r0, #1
   32184:	rsb	r0, r2, #1
   32188:	str	r0, [sp, #20]
   3218c:	ldr	r0, [sp, #24]
   32190:	add	r3, sp, #32
   32194:	add	r0, r1, r0
   32198:	ldrb	r2, [r0, #-1]
   3219c:	ldr	r2, [r3, r2, lsl #2]
   321a0:	cmp	r2, #0
   321a4:	beq	321b0 <__assert_fail@plt+0x20504>
   321a8:	add	r5, r2, r5
   321ac:	b	3221c <__assert_fail@plt+0x20570>
   321b0:	ldr	r2, [sp, #8]
   321b4:	mov	ip, r5
   321b8:	add	r3, r2, r5
   321bc:	mov	r2, #0
   321c0:	ldrb	r7, [r3, -r2]
   321c4:	ldrb	r5, [sl, -r2]
   321c8:	cmp	r5, r7
   321cc:	bne	32210 <__assert_fail@plt+0x20564>
   321d0:	sub	r2, r2, #1
   321d4:	cmp	r6, r2
   321d8:	bne	321c0 <__assert_fail@plt+0x20514>
   321dc:	ldr	r5, [sp, #24]
   321e0:	ldr	r3, [sp, #20]
   321e4:	add	r2, r5, ip
   321e8:	cmp	r3, #1
   321ec:	beq	32694 <__assert_fail@plt+0x209e8>
   321f0:	ldrb	r7, [r2, -r3]
   321f4:	ldrb	r5, [r9, -r3]
   321f8:	add	r3, r3, #1
   321fc:	cmp	r5, r7
   32200:	ldr	r5, [sp, #24]
   32204:	beq	321e8 <__assert_fail@plt+0x2053c>
   32208:	ldr	r2, [sp, #12]
   3220c:	b	32214 <__assert_fail@plt+0x20568>
   32210:	rsb	r2, r2, #0
   32214:	add	r2, ip, r2
   32218:	add	r5, r2, #1
   3221c:	add	r8, r5, r4
   32220:	mov	r7, #0
   32224:	sub	r2, r8, r1
   32228:	mov	r1, #0
   3222c:	bl	11b68 <memchr@plt>
   32230:	cmp	r8, #0
   32234:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32238:	ldr	r4, [sp, #28]
   3223c:	cmp	r0, #0
   32240:	mov	r1, r8
   32244:	beq	3218c <__assert_fail@plt+0x204e0>
   32248:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   3224c:	ldr	r0, [sp, #24]
   32250:	ldr	r1, [sp, #8]
   32254:	ldr	r4, [sp, #28]
   32258:	mov	r7, #0
   3225c:	add	r0, r0, r1
   32260:	sub	r2, r4, r1
   32264:	mov	r1, #0
   32268:	bl	11b68 <memchr@plt>
   3226c:	cmp	r4, #0
   32270:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32274:	cmp	r0, #0
   32278:	bne	31bd8 <__assert_fail@plt+0x1ff2c>
   3227c:	sub	r0, r4, r5
   32280:	mov	lr, r4
   32284:	sub	r8, r4, #1
   32288:	mov	r4, #0
   3228c:	mov	r6, #0
   32290:	str	r0, [sp, #20]
   32294:	ldr	r0, [sp, #16]
   32298:	mov	ip, lr
   3229c:	sub	r1, r0, #1
   322a0:	rsb	r0, r0, #1
   322a4:	str	r1, [sp, #8]
   322a8:	str	r0, [sp, #4]
   322ac:	ldr	r0, [sp, #24]
   322b0:	add	r1, sp, #32
   322b4:	add	r0, ip, r0
   322b8:	ldrb	r2, [r0, #-1]
   322bc:	ldr	r3, [r1, r2, lsl #2]
   322c0:	cmp	r3, #0
   322c4:	beq	322e8 <__assert_fail@plt+0x2063c>
   322c8:	ldr	r1, [sp, #20]
   322cc:	cmp	r3, r5
   322d0:	mov	r2, r3
   322d4:	movcc	r2, r1
   322d8:	cmp	r4, #0
   322dc:	mov	r4, #0
   322e0:	moveq	r2, r3
   322e4:	b	32378 <__assert_fail@plt+0x206cc>
   322e8:	ldr	r2, [sp, #16]
   322ec:	cmp	r2, r4
   322f0:	movcc	r2, r4
   322f4:	cmp	r2, r8
   322f8:	bcs	32320 <__assert_fail@plt+0x20674>
   322fc:	ldr	r1, [sp, #24]
   32300:	add	r3, r1, r6
   32304:	ldrb	r7, [r3, r2]
   32308:	ldrb	r5, [r9, r2]
   3230c:	cmp	r5, r7
   32310:	bne	32368 <__assert_fail@plt+0x206bc>
   32314:	add	r2, r2, #1
   32318:	cmp	r2, r8
   3231c:	bcc	32304 <__assert_fail@plt+0x20658>
   32320:	ldr	r1, [sp, #24]
   32324:	ldr	r2, [sp, #8]
   32328:	add	r7, r1, r6
   3232c:	add	r3, r2, #1
   32330:	cmp	r4, r3
   32334:	bcs	3234c <__assert_fail@plt+0x206a0>
   32338:	ldrb	r5, [r7, r2]
   3233c:	ldrb	r1, [r9, r2]
   32340:	sub	r2, r2, #1
   32344:	cmp	r1, r5
   32348:	beq	3232c <__assert_fail@plt+0x20680>
   3234c:	ldr	r5, [sp, #12]
   32350:	add	r1, r4, #1
   32354:	ldr	r4, [sp, #20]
   32358:	cmp	r3, r1
   3235c:	mov	r2, r5
   32360:	bcs	32378 <__assert_fail@plt+0x206cc>
   32364:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   32368:	ldr	r1, [sp, #4]
   3236c:	ldr	r5, [sp, #12]
   32370:	mov	r4, #0
   32374:	add	r2, r1, r2
   32378:	add	r6, r2, r6
   3237c:	mov	r1, #0
   32380:	mov	r7, #0
   32384:	add	sl, r6, lr
   32388:	sub	r2, sl, ip
   3238c:	bl	11b68 <memchr@plt>
   32390:	cmp	sl, #0
   32394:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32398:	ldr	lr, [sp, #28]
   3239c:	cmp	r0, #0
   323a0:	mov	ip, sl
   323a4:	beq	322ac <__assert_fail@plt+0x20600>
   323a8:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   323ac:	mov	r5, #1
   323b0:	mvn	lr, #0
   323b4:	add	r0, r1, #1
   323b8:	add	r6, lr, #1
   323bc:	cmp	r6, r0
   323c0:	movcc	r5, ip
   323c4:	movcc	r6, r0
   323c8:	add	r1, r9, r5
   323cc:	mov	r0, r9
   323d0:	mov	r2, r6
   323d4:	bl	11aa8 <bcmp@plt>
   323d8:	cmp	r0, #0
   323dc:	str	r6, [sp, #20]
   323e0:	beq	324e4 <__assert_fail@plt+0x20838>
   323e4:	ldr	r0, [sp, #24]
   323e8:	ldr	r5, [sp, #28]
   323ec:	mov	r1, #0
   323f0:	mov	r7, #0
   323f4:	add	r0, r0, sl
   323f8:	sub	r2, r5, sl
   323fc:	bl	11b68 <memchr@plt>
   32400:	sub	r4, r5, r6
   32404:	cmp	r6, r4
   32408:	movcc	r6, r4
   3240c:	cmp	r5, #0
   32410:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32414:	ldr	ip, [sp, #24]
   32418:	cmp	r0, #0
   3241c:	bne	31bd8 <__assert_fail@plt+0x1ff2c>
   32420:	ldr	r0, [sp, #20]
   32424:	mov	lr, r5
   32428:	cmp	r5, r0
   3242c:	bls	326a4 <__assert_fail@plt+0x209f8>
   32430:	add	r1, ip, r0
   32434:	add	sl, r0, r8
   32438:	rsb	r0, r0, #1
   3243c:	mov	r5, #0
   32440:	str	r6, [sp, #20]
   32444:	str	r1, [sp, #16]
   32448:	mov	r1, lr
   3244c:	str	r0, [sp, #12]
   32450:	ldr	r0, [sp, #16]
   32454:	mov	r2, #0
   32458:	add	r0, r0, r5
   3245c:	ldrb	r3, [r0, r2]
   32460:	ldrb	r7, [sl, r2]
   32464:	cmp	r7, r3
   32468:	bne	324a0 <__assert_fail@plt+0x207f4>
   3246c:	add	r2, r2, #1
   32470:	cmp	r4, r2
   32474:	bne	3245c <__assert_fail@plt+0x207b0>
   32478:	ldr	r2, [sp, #12]
   3247c:	add	r0, ip, r5
   32480:	cmp	r2, #1
   32484:	beq	32734 <__assert_fail@plt+0x20a88>
   32488:	ldrb	r3, [r0, -r2]
   3248c:	ldrb	r7, [r9, -r2]
   32490:	add	r2, r2, #1
   32494:	cmp	r7, r3
   32498:	beq	32480 <__assert_fail@plt+0x207d4>
   3249c:	mov	r2, r6
   324a0:	add	r2, r5, r2
   324a4:	add	r0, ip, r1
   324a8:	mov	r7, #0
   324ac:	add	r2, r2, #1
   324b0:	add	r8, r2, lr
   324b4:	mov	r5, r2
   324b8:	sub	r2, r8, r1
   324bc:	mov	r1, #0
   324c0:	bl	11b68 <memchr@plt>
   324c4:	cmp	r0, #0
   324c8:	bne	31bd8 <__assert_fail@plt+0x1ff2c>
   324cc:	add	lr, sp, #20
   324d0:	cmp	r8, #0
   324d4:	mov	r1, r8
   324d8:	ldm	lr, {r6, ip, lr}
   324dc:	bne	32450 <__assert_fail@plt+0x207a4>
   324e0:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   324e4:	ldr	r0, [sp, #24]
   324e8:	ldr	r4, [sp, #28]
   324ec:	mov	r1, #0
   324f0:	mov	r7, #0
   324f4:	add	r0, r0, sl
   324f8:	sub	r2, r4, sl
   324fc:	bl	11b68 <memchr@plt>
   32500:	cmp	r4, #0
   32504:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32508:	mov	r8, r5
   3250c:	ldr	r5, [sp, #24]
   32510:	cmp	r0, #0
   32514:	bne	31bd8 <__assert_fail@plt+0x1ff2c>
   32518:	sub	r0, r4, r8
   3251c:	mov	r1, r4
   32520:	mov	r6, #0
   32524:	mov	ip, r4
   32528:	mov	sl, #0
   3252c:	str	r0, [sp, #16]
   32530:	ldr	r0, [sp, #20]
   32534:	sub	r2, r0, #1
   32538:	rsb	r0, r0, #1
   3253c:	str	r2, [sp, #12]
   32540:	str	r0, [sp, #8]
   32544:	ldr	r0, [sp, #20]
   32548:	cmp	r0, r6
   3254c:	movcc	r0, r6
   32550:	cmp	r0, r1
   32554:	bcs	32578 <__assert_fail@plt+0x208cc>
   32558:	add	r2, r5, sl
   3255c:	ldrb	r3, [r2, r0]
   32560:	ldrb	r7, [r9, r0]
   32564:	cmp	r7, r3
   32568:	bne	325b8 <__assert_fail@plt+0x2090c>
   3256c:	add	r0, r0, #1
   32570:	cmp	r0, r1
   32574:	bcc	3255c <__assert_fail@plt+0x208b0>
   32578:	ldr	r0, [sp, #12]
   3257c:	add	r7, r5, sl
   32580:	add	r2, r0, #1
   32584:	cmp	r6, r2
   32588:	bcs	325a0 <__assert_fail@plt+0x208f4>
   3258c:	ldrb	r3, [r7, r0]
   32590:	ldrb	r4, [r9, r0]
   32594:	sub	r0, r0, #1
   32598:	cmp	r4, r3
   3259c:	beq	32580 <__assert_fail@plt+0x208d4>
   325a0:	add	r0, r6, #1
   325a4:	ldr	r6, [sp, #16]
   325a8:	cmp	r2, r0
   325ac:	mov	r2, r8
   325b0:	bcs	325c4 <__assert_fail@plt+0x20918>
   325b4:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   325b8:	ldr	r2, [sp, #8]
   325bc:	mov	r6, #0
   325c0:	add	r2, r2, r0
   325c4:	add	sl, r2, sl
   325c8:	add	r0, r5, ip
   325cc:	mov	r7, #0
   325d0:	add	r4, sl, r1
   325d4:	mov	r1, #0
   325d8:	sub	r2, r4, ip
   325dc:	bl	11b68 <memchr@plt>
   325e0:	cmp	r4, #0
   325e4:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   325e8:	ldr	r1, [sp, #28]
   325ec:	ldr	r5, [sp, #24]
   325f0:	cmp	r0, #0
   325f4:	mov	ip, r4
   325f8:	beq	32544 <__assert_fail@plt+0x20898>
   325fc:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   32600:	ldr	r0, [sp, #12]
   32604:	rsb	sl, r2, #1
   32608:	mov	r5, #0
   3260c:	mov	r1, r4
   32610:	add	r8, r0, #1
   32614:	mov	ip, r5
   32618:	ldr	r5, [sp, #24]
   3261c:	add	r3, sp, #32
   32620:	add	r0, r1, r5
   32624:	ldrb	r2, [r0, #-1]
   32628:	ldr	r2, [r3, r2, lsl #2]
   3262c:	cmp	r2, #0
   32630:	bne	3265c <__assert_fail@plt+0x209b0>
   32634:	add	r2, r5, ip
   32638:	mov	r3, sl
   3263c:	cmp	r3, #1
   32640:	beq	32694 <__assert_fail@plt+0x209e8>
   32644:	ldrb	r7, [r2, -r3]
   32648:	ldrb	r6, [r9, -r3]
   3264c:	add	r3, r3, #1
   32650:	cmp	r6, r7
   32654:	beq	3263c <__assert_fail@plt+0x20990>
   32658:	mov	r2, r8
   3265c:	mov	r5, ip
   32660:	add	r5, r2, ip
   32664:	mov	r7, #0
   32668:	add	r6, r5, r4
   3266c:	sub	r2, r6, r1
   32670:	mov	r1, #0
   32674:	bl	11b68 <memchr@plt>
   32678:	cmp	r6, #0
   3267c:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32680:	ldr	r4, [sp, #28]
   32684:	cmp	r0, #0
   32688:	mov	r1, r6
   3268c:	beq	32614 <__assert_fail@plt+0x20968>
   32690:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   32694:	add	r7, r5, ip
   32698:	mov	r0, r7
   3269c:	sub	sp, fp, #28
   326a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   326a4:	add	r1, r6, #1
   326a8:	rsb	r0, r0, #1
   326ac:	mov	r5, #0
   326b0:	mov	r4, ip
   326b4:	mov	sl, lr
   326b8:	mov	r7, #0
   326bc:	str	r1, [sp, #20]
   326c0:	mov	r1, r0
   326c4:	cmp	r1, #1
   326c8:	beq	32734 <__assert_fail@plt+0x20a88>
   326cc:	ldrb	r2, [r4, -r1]
   326d0:	ldrb	r3, [r9, -r1]
   326d4:	add	r1, r1, #1
   326d8:	cmp	r3, r2
   326dc:	beq	326c4 <__assert_fail@plt+0x20a18>
   326e0:	str	r0, [sp, #16]
   326e4:	ldr	r0, [sp, #20]
   326e8:	mov	r1, #0
   326ec:	add	r5, r0, r5
   326f0:	mov	r6, r5
   326f4:	add	r8, r5, lr
   326f8:	mov	r5, r0
   326fc:	add	r0, ip, sl
   32700:	mov	r2, r5
   32704:	bl	11b68 <memchr@plt>
   32708:	cmp	r8, #0
   3270c:	beq	31bd8 <__assert_fail@plt+0x1ff2c>
   32710:	cmp	r0, #0
   32714:	ldr	lr, [sp, #28]
   32718:	ldr	ip, [sp, #24]
   3271c:	ldr	r0, [sp, #16]
   32720:	add	r4, r4, r5
   32724:	mov	sl, r8
   32728:	mov	r5, r6
   3272c:	beq	326c0 <__assert_fail@plt+0x20a14>
   32730:	b	31bd8 <__assert_fail@plt+0x1ff2c>
   32734:	add	r7, ip, r5
   32738:	mov	r0, r7
   3273c:	sub	sp, fp, #28
   32740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32744:	push	{fp, lr}
   32748:	mov	fp, sp
   3274c:	movw	r0, #25008	; 0x61b0
   32750:	movt	r0, #4
   32754:	ldr	r0, [r0]
   32758:	bl	11a90 <exit@plt>
   3275c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32760:	add	fp, sp, #28
   32764:	sub	sp, sp, #12
   32768:	mov	r4, r3
   3276c:	mov	r9, r2
   32770:	mov	r7, r1
   32774:	mov	r8, r0
   32778:	bl	11ac0 <strlen@plt>
   3277c:	ldr	r6, [r7]
   32780:	cmp	r6, #0
   32784:	beq	32830 <__assert_fail@plt+0x20b84>
   32788:	mov	r5, r0
   3278c:	cmp	r9, #0
   32790:	beq	32840 <__assert_fail@plt+0x20b94>
   32794:	add	r0, r7, #4
   32798:	mvn	sl, #0
   3279c:	mov	r7, #0
   327a0:	str	r9, [sp]
   327a4:	str	r0, [sp, #8]
   327a8:	mov	r0, #0
   327ac:	str	r0, [sp, #4]
   327b0:	mov	r0, r9
   327b4:	b	327f8 <__assert_fail@plt+0x20b4c>
   327b8:	ldr	r0, [sp]
   327bc:	mov	r1, r9
   327c0:	mov	r2, r4
   327c4:	mla	r0, sl, r4, r0
   327c8:	bl	11aa8 <bcmp@plt>
   327cc:	ldr	r1, [sp, #4]
   327d0:	cmp	r0, #0
   327d4:	movwne	r0, #1
   327d8:	orr	r1, r1, r0
   327dc:	str	r1, [sp, #4]
   327e0:	ldr	r0, [sp, #8]
   327e4:	add	r9, r9, r4
   327e8:	ldr	r6, [r0, r7, lsl #2]
   327ec:	add	r7, r7, #1
   327f0:	cmp	r6, #0
   327f4:	beq	328b4 <__assert_fail@plt+0x20c08>
   327f8:	mov	r0, r6
   327fc:	mov	r1, r8
   32800:	mov	r2, r5
   32804:	bl	11c64 <strncmp@plt>
   32808:	cmp	r0, #0
   3280c:	bne	327e0 <__assert_fail@plt+0x20b34>
   32810:	mov	r0, r6
   32814:	bl	11ac0 <strlen@plt>
   32818:	cmp	r0, r5
   3281c:	beq	32834 <__assert_fail@plt+0x20b88>
   32820:	cmn	sl, #1
   32824:	bne	327b8 <__assert_fail@plt+0x20b0c>
   32828:	mov	sl, r7
   3282c:	b	327e0 <__assert_fail@plt+0x20b34>
   32830:	mvn	r7, #0
   32834:	mov	r0, r7
   32838:	sub	sp, fp, #28
   3283c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32840:	add	r4, r7, #4
   32844:	mov	r0, #0
   32848:	mvn	r9, #0
   3284c:	mvn	sl, #0
   32850:	mov	r7, #0
   32854:	str	r0, [sp, #4]
   32858:	b	32888 <__assert_fail@plt+0x20bdc>
   3285c:	ldr	r1, [sp, #4]
   32860:	subs	r0, sl, r9
   32864:	movwne	r0, #1
   32868:	cmn	sl, #1
   3286c:	moveq	sl, r7
   32870:	orr	r1, r1, r0
   32874:	str	r1, [sp, #4]
   32878:	ldr	r6, [r4, r7, lsl #2]
   3287c:	add	r7, r7, #1
   32880:	cmp	r6, #0
   32884:	beq	328b4 <__assert_fail@plt+0x20c08>
   32888:	mov	r0, r6
   3288c:	mov	r1, r8
   32890:	mov	r2, r5
   32894:	bl	11c64 <strncmp@plt>
   32898:	cmp	r0, #0
   3289c:	bne	32878 <__assert_fail@plt+0x20bcc>
   328a0:	mov	r0, r6
   328a4:	bl	11ac0 <strlen@plt>
   328a8:	cmp	r0, r5
   328ac:	bne	3285c <__assert_fail@plt+0x20bb0>
   328b0:	b	32834 <__assert_fail@plt+0x20b88>
   328b4:	ldr	r0, [sp, #4]
   328b8:	tst	r0, #1
   328bc:	mvnne	sl, #1
   328c0:	mov	r0, sl
   328c4:	sub	sp, fp, #28
   328c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   328cc:	push	{r4, r5, r6, sl, fp, lr}
   328d0:	add	fp, sp, #16
   328d4:	sub	sp, sp, #8
   328d8:	mov	r5, r0
   328dc:	movw	r0, #20261	; 0x4f25
   328e0:	mov	r4, r1
   328e4:	movw	r1, #20288	; 0x4f40
   328e8:	cmn	r2, #1
   328ec:	mov	r2, #5
   328f0:	movt	r0, #3
   328f4:	movt	r1, #3
   328f8:	moveq	r1, r0
   328fc:	mov	r0, #0
   32900:	bl	11934 <dcgettext@plt>
   32904:	mov	r6, r0
   32908:	mov	r0, #0
   3290c:	mov	r1, #8
   32910:	mov	r2, r4
   32914:	bl	19f84 <__assert_fail@plt+0x82d8>
   32918:	mov	r4, r0
   3291c:	mov	r0, #1
   32920:	mov	r1, r5
   32924:	bl	1a544 <__assert_fail@plt+0x8898>
   32928:	str	r0, [sp]
   3292c:	mov	r0, #0
   32930:	mov	r1, #0
   32934:	mov	r2, r6
   32938:	mov	r3, r4
   3293c:	bl	119dc <error@plt>
   32940:	sub	sp, fp, #16
   32944:	pop	{r4, r5, r6, sl, fp, pc}
   32948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3294c:	add	fp, sp, #28
   32950:	sub	sp, sp, #4
   32954:	mov	sl, r1
   32958:	movw	r1, #20317	; 0x4f5d
   3295c:	mov	r4, r2
   32960:	mov	r7, r0
   32964:	mov	r0, #0
   32968:	mov	r2, #5
   3296c:	mov	r8, #0
   32970:	movt	r1, #3
   32974:	bl	11934 <dcgettext@plt>
   32978:	movw	r1, #25104	; 0x6210
   3297c:	movt	r1, #4
   32980:	ldr	r1, [r1]
   32984:	bl	11c58 <fputs@plt>
   32988:	ldr	r6, [r7]
   3298c:	cmp	r6, #0
   32990:	bne	329b0 <__assert_fail@plt+0x20d04>
   32994:	movw	r0, #25104	; 0x6210
   32998:	movt	r0, #4
   3299c:	ldr	r1, [r0]
   329a0:	mov	r0, #10
   329a4:	sub	sp, fp, #28
   329a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   329ac:	b	11c04 <putc@plt>
   329b0:	add	r0, r7, #4
   329b4:	mov	r9, #0
   329b8:	mov	r7, #0
   329bc:	str	r0, [sp]
   329c0:	mov	r5, #0
   329c4:	cmp	r9, #0
   329c8:	bne	32a1c <__assert_fail@plt+0x20d70>
   329cc:	movw	r0, #25104	; 0x6210
   329d0:	movt	r0, #4
   329d4:	ldr	r7, [r0]
   329d8:	mov	r0, r6
   329dc:	bl	1a554 <__assert_fail@plt+0x88a8>
   329e0:	movw	r1, #20338	; 0x4f72
   329e4:	mov	r2, r0
   329e8:	mov	r0, r7
   329ec:	movt	r1, #3
   329f0:	bl	11ad8 <fprintf@plt>
   329f4:	add	r7, sl, r5
   329f8:	ldr	r0, [sp]
   329fc:	add	r8, r8, r4
   32a00:	ldr	r6, [r0, -r9, lsl #2]
   32a04:	sub	r9, r9, #1
   32a08:	cmp	r6, #0
   32a0c:	beq	32994 <__assert_fail@plt+0x20ce8>
   32a10:	mov	r5, #0
   32a14:	cmp	r9, #0
   32a18:	beq	329cc <__assert_fail@plt+0x20d20>
   32a1c:	add	r1, sl, r8
   32a20:	mov	r0, r7
   32a24:	mov	r2, r4
   32a28:	bl	11aa8 <bcmp@plt>
   32a2c:	cmp	r0, #0
   32a30:	mov	r5, r8
   32a34:	bne	329cc <__assert_fail@plt+0x20d20>
   32a38:	movw	r0, #25104	; 0x6210
   32a3c:	movt	r0, #4
   32a40:	ldr	r5, [r0]
   32a44:	mov	r0, r6
   32a48:	bl	1a554 <__assert_fail@plt+0x88a8>
   32a4c:	movw	r1, #20346	; 0x4f7a
   32a50:	mov	r2, r0
   32a54:	mov	r0, r5
   32a58:	movt	r1, #3
   32a5c:	bl	11ad8 <fprintf@plt>
   32a60:	b	329f8 <__assert_fail@plt+0x20d4c>
   32a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32a68:	add	fp, sp, #28
   32a6c:	sub	sp, sp, #4
   32a70:	ldr	r8, [fp, #8]
   32a74:	mov	r7, r0
   32a78:	mov	r4, r3
   32a7c:	mov	r5, r2
   32a80:	mov	r6, r1
   32a84:	mov	r0, r1
   32a88:	mov	r1, r2
   32a8c:	mov	r2, r3
   32a90:	mov	r3, r8
   32a94:	bl	3275c <__assert_fail@plt+0x20ab0>
   32a98:	cmn	r0, #1
   32a9c:	ble	32aa8 <__assert_fail@plt+0x20dfc>
   32aa0:	sub	sp, fp, #28
   32aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32aa8:	movw	r0, #20261	; 0x4f25
   32aac:	ldr	sl, [fp, #12]
   32ab0:	movw	r1, #20288	; 0x4f40
   32ab4:	mov	r2, #5
   32ab8:	movt	r0, #3
   32abc:	movt	r1, #3
   32ac0:	moveq	r1, r0
   32ac4:	mov	r0, #0
   32ac8:	bl	11934 <dcgettext@plt>
   32acc:	mov	r9, r0
   32ad0:	mov	r0, #0
   32ad4:	mov	r1, #8
   32ad8:	mov	r2, r6
   32adc:	bl	19f84 <__assert_fail@plt+0x82d8>
   32ae0:	mov	r6, r0
   32ae4:	mov	r0, #1
   32ae8:	mov	r1, r7
   32aec:	bl	1a544 <__assert_fail@plt+0x8898>
   32af0:	str	r0, [sp]
   32af4:	mov	r0, #0
   32af8:	mov	r1, #0
   32afc:	mov	r2, r9
   32b00:	mov	r3, r6
   32b04:	bl	119dc <error@plt>
   32b08:	mov	r0, r5
   32b0c:	mov	r1, r4
   32b10:	mov	r2, r8
   32b14:	bl	32948 <__assert_fail@plt+0x20c9c>
   32b18:	blx	sl
   32b1c:	mvn	r0, #0
   32b20:	sub	sp, fp, #28
   32b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   32b2c:	add	fp, sp, #24
   32b30:	ldr	r6, [r1]
   32b34:	cmp	r6, #0
   32b38:	beq	32b9c <__assert_fail@plt+0x20ef0>
   32b3c:	mov	r8, r1
   32b40:	mov	r7, r2
   32b44:	mov	r1, r2
   32b48:	mov	r2, r3
   32b4c:	mov	r4, r3
   32b50:	mov	r9, r0
   32b54:	bl	11aa8 <bcmp@plt>
   32b58:	cmp	r0, #0
   32b5c:	beq	32b94 <__assert_fail@plt+0x20ee8>
   32b60:	add	r7, r7, r4
   32b64:	add	r5, r8, #4
   32b68:	ldr	r6, [r5]
   32b6c:	cmp	r6, #0
   32b70:	beq	32b9c <__assert_fail@plt+0x20ef0>
   32b74:	mov	r0, r9
   32b78:	mov	r1, r7
   32b7c:	mov	r2, r4
   32b80:	bl	11aa8 <bcmp@plt>
   32b84:	add	r7, r7, r4
   32b88:	add	r5, r5, #4
   32b8c:	cmp	r0, #0
   32b90:	bne	32b68 <__assert_fail@plt+0x20ebc>
   32b94:	mov	r0, r6
   32b98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   32b9c:	mov	r6, #0
   32ba0:	mov	r0, r6
   32ba4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   32ba8:	push	{r4, r5, r6, sl, fp, lr}
   32bac:	add	fp, sp, #16
   32bb0:	mov	r4, r0
   32bb4:	bl	119c4 <__fpending@plt>
   32bb8:	mov	r5, r0
   32bbc:	mov	r0, r4
   32bc0:	bl	118c8 <ferror@plt>
   32bc4:	mov	r6, r0
   32bc8:	mov	r0, r4
   32bcc:	bl	11b74 <fclose@plt>
   32bd0:	cmp	r6, #0
   32bd4:	beq	32bf8 <__assert_fail@plt+0x20f4c>
   32bd8:	mvn	r4, #0
   32bdc:	cmp	r0, #0
   32be0:	bne	32c24 <__assert_fail@plt+0x20f78>
   32be4:	bl	11af0 <__errno_location@plt>
   32be8:	mov	r1, #0
   32bec:	str	r1, [r0]
   32bf0:	mov	r0, r4
   32bf4:	pop	{r4, r5, r6, sl, fp, pc}
   32bf8:	cmp	r0, #0
   32bfc:	mov	r4, r0
   32c00:	mvnne	r4, #0
   32c04:	cmp	r5, #0
   32c08:	bne	32c24 <__assert_fail@plt+0x20f78>
   32c0c:	cmp	r0, #0
   32c10:	beq	32c24 <__assert_fail@plt+0x20f78>
   32c14:	bl	11af0 <__errno_location@plt>
   32c18:	ldr	r0, [r0]
   32c1c:	subs	r4, r0, #9
   32c20:	mvnne	r4, #0
   32c24:	mov	r0, r4
   32c28:	pop	{r4, r5, r6, sl, fp, pc}
   32c2c:	push	{r4, r5, r6, r7, fp, lr}
   32c30:	add	fp, sp, #16
   32c34:	mov	r4, r0
   32c38:	ldr	r0, [r0, #4]
   32c3c:	mov	r5, r1
   32c40:	cmp	r0, r1
   32c44:	bcs	32c78 <__assert_fail@plt+0x20fcc>
   32c48:	mov	r6, r3
   32c4c:	cmp	r3, #0
   32c50:	beq	32c84 <__assert_fail@plt+0x20fd8>
   32c54:	mvn	r0, #0
   32c58:	udiv	r0, r0, r6
   32c5c:	cmp	r0, r5
   32c60:	bcs	32c84 <__assert_fail@plt+0x20fd8>
   32c64:	bl	11af0 <__errno_location@plt>
   32c68:	mov	r1, #12
   32c6c:	str	r1, [r0]
   32c70:	mov	r0, #0
   32c74:	pop	{r4, r5, r6, r7, fp, pc}
   32c78:	mov	r0, #1
   32c7c:	str	r5, [r4]
   32c80:	pop	{r4, r5, r6, r7, fp, pc}
   32c84:	ldr	r0, [r4, #8]
   32c88:	mul	r1, r6, r5
   32c8c:	cmp	r0, r2
   32c90:	beq	32ca8 <__assert_fail@plt+0x20ffc>
   32c94:	bl	1c388 <__assert_fail@plt+0xa6dc>
   32c98:	mov	r7, r0
   32c9c:	cmp	r0, #0
   32ca0:	bne	32cd8 <__assert_fail@plt+0x2102c>
   32ca4:	b	32ce8 <__assert_fail@plt+0x2103c>
   32ca8:	mov	r0, r1
   32cac:	bl	1c2f4 <__assert_fail@plt+0xa648>
   32cb0:	cmp	r0, #0
   32cb4:	beq	32ce8 <__assert_fail@plt+0x2103c>
   32cb8:	ldr	r1, [r4, #8]
   32cbc:	mov	r7, r0
   32cc0:	cmp	r1, #0
   32cc4:	beq	32cd8 <__assert_fail@plt+0x2102c>
   32cc8:	ldr	r0, [r4]
   32ccc:	mul	r2, r0, r6
   32cd0:	mov	r0, r7
   32cd4:	bl	118ec <memcpy@plt>
   32cd8:	mov	r0, #1
   32cdc:	str	r5, [r4]
   32ce0:	stmib	r4, {r5, r7}
   32ce4:	pop	{r4, r5, r6, r7, fp, pc}
   32ce8:	mov	r0, #0
   32cec:	pop	{r4, r5, r6, r7, fp, pc}
   32cf0:	push	{r4, sl, fp, lr}
   32cf4:	add	fp, sp, #8
   32cf8:	sub	sp, sp, #264	; 0x108
   32cfc:	add	r1, sp, #7
   32d00:	movw	r2, #257	; 0x101
   32d04:	bl	32ee0 <__assert_fail@plt+0x21234>
   32d08:	mov	r4, #0
   32d0c:	cmp	r0, #0
   32d10:	bne	32d50 <__assert_fail@plt+0x210a4>
   32d14:	movw	r1, #20351	; 0x4f7f
   32d18:	add	r0, sp, #7
   32d1c:	mov	r2, #2
   32d20:	movt	r1, #3
   32d24:	bl	11aa8 <bcmp@plt>
   32d28:	cmp	r0, #0
   32d2c:	beq	32d50 <__assert_fail@plt+0x210a4>
   32d30:	movw	r1, #20353	; 0x4f81
   32d34:	add	r0, sp, #7
   32d38:	mov	r2, #6
   32d3c:	movt	r1, #3
   32d40:	bl	11aa8 <bcmp@plt>
   32d44:	cmp	r0, #0
   32d48:	mov	r4, r0
   32d4c:	movwne	r4, #1
   32d50:	mov	r0, r4
   32d54:	sub	sp, fp, #8
   32d58:	pop	{r4, sl, fp, pc}
   32d5c:	push	{fp, lr}
   32d60:	mov	fp, sp
   32d64:	mov	r0, #14
   32d68:	bl	11bbc <nl_langinfo@plt>
   32d6c:	movw	r1, #16911	; 0x420f
   32d70:	cmp	r0, #0
   32d74:	movt	r1, #3
   32d78:	movne	r1, r0
   32d7c:	movw	r0, #20359	; 0x4f87
   32d80:	ldrb	r2, [r1]
   32d84:	movt	r0, #3
   32d88:	cmp	r2, #0
   32d8c:	movne	r0, r1
   32d90:	pop	{fp, pc}
   32d94:	push	{r4, sl, fp, lr}
   32d98:	add	fp, sp, #8
   32d9c:	mov	r4, #0
   32da0:	adds	r0, r0, #16
   32da4:	adc	r1, r4, #0
   32da8:	rsb	r2, r1, #0
   32dac:	eors	r2, r2, r1
   32db0:	movwne	r2, #1
   32db4:	cmp	r0, #0
   32db8:	bmi	32dd8 <__assert_fail@plt+0x2112c>
   32dbc:	cmp	r2, #0
   32dc0:	asreq	r2, r0, #31
   32dc4:	eoreq	r3, r0, r0
   32dc8:	andeq	r2, r2, #1
   32dcc:	eoreq	r1, r1, r2
   32dd0:	orrseq	r1, r3, r1
   32dd4:	beq	32de0 <__assert_fail@plt+0x21134>
   32dd8:	mov	r0, r4
   32ddc:	pop	{r4, sl, fp, pc}
   32de0:	bl	11a18 <malloc@plt>
   32de4:	cmp	r0, #0
   32de8:	addne	r4, r0, #8
   32dec:	movne	r1, #8
   32df0:	bfine	r4, r1, #0, #4
   32df4:	subne	r0, r4, r0
   32df8:	strbne	r0, [r4, #-1]
   32dfc:	mov	r0, r4
   32e00:	pop	{r4, sl, fp, pc}
   32e04:	push	{fp, lr}
   32e08:	mov	fp, sp
   32e0c:	tst	r0, #7
   32e10:	bne	32e2c <__assert_fail@plt+0x21180>
   32e14:	tst	r0, #8
   32e18:	popeq	{fp, pc}
   32e1c:	ldrb	r1, [r0, #-1]
   32e20:	sub	r0, r0, r1
   32e24:	pop	{fp, lr}
   32e28:	b	1c224 <__assert_fail@plt+0xa578>
   32e2c:	bl	11c70 <abort@plt>
   32e30:	push	{r4, sl, fp, lr}
   32e34:	add	fp, sp, #8
   32e38:	mov	r4, r0
   32e3c:	bl	1188c <wcwidth@plt>
   32e40:	cmn	r0, #1
   32e44:	popgt	{r4, sl, fp, pc}
   32e48:	mov	r0, r4
   32e4c:	bl	11958 <iswcntrl@plt>
   32e50:	clz	r0, r0
   32e54:	lsr	r0, r0, #5
   32e58:	pop	{r4, sl, fp, pc}
   32e5c:	push	{r4, r5, r6, sl, fp, lr}
   32e60:	add	fp, sp, #16
   32e64:	mov	r4, r0
   32e68:	mov	r0, r1
   32e6c:	mov	r5, r1
   32e70:	ldr	r1, [r0], #16
   32e74:	cmp	r1, r0
   32e78:	beq	32e84 <__assert_fail@plt+0x211d8>
   32e7c:	mov	r6, r1
   32e80:	b	32e94 <__assert_fail@plt+0x211e8>
   32e84:	ldr	r2, [r5, #4]
   32e88:	add	r6, r4, #16
   32e8c:	mov	r0, r6
   32e90:	bl	118ec <memcpy@plt>
   32e94:	str	r6, [r4]
   32e98:	ldr	r0, [r5, #4]
   32e9c:	str	r0, [r4, #4]
   32ea0:	ldrb	r0, [r5, #8]
   32ea4:	strb	r0, [r4, #8]
   32ea8:	cmp	r0, #0
   32eac:	ldrne	r0, [r5, #12]
   32eb0:	strne	r0, [r4, #12]
   32eb4:	pop	{r4, r5, r6, sl, fp, pc}
   32eb8:	movw	r2, #20368	; 0x4f90
   32ebc:	ubfx	r1, r0, #5, #3
   32ec0:	and	r0, r0, #31
   32ec4:	movt	r2, #3
   32ec8:	ldr	r1, [r2, r1, lsl #2]
   32ecc:	mov	r2, #1
   32ed0:	and	r0, r1, r2, lsl r0
   32ed4:	cmp	r0, #0
   32ed8:	movwne	r0, #1
   32edc:	bx	lr
   32ee0:	push	{r4, r5, r6, r7, fp, lr}
   32ee4:	add	fp, sp, #16
   32ee8:	mov	r4, r1
   32eec:	mov	r1, #0
   32ef0:	mov	r6, r2
   32ef4:	bl	11ba4 <setlocale@plt>
   32ef8:	cmp	r0, #0
   32efc:	beq	32f2c <__assert_fail@plt+0x21280>
   32f00:	mov	r7, r0
   32f04:	bl	11ac0 <strlen@plt>
   32f08:	cmp	r0, r6
   32f0c:	bcs	32f48 <__assert_fail@plt+0x2129c>
   32f10:	add	r2, r0, #1
   32f14:	mov	r0, r4
   32f18:	mov	r1, r7
   32f1c:	bl	118ec <memcpy@plt>
   32f20:	mov	r5, #0
   32f24:	mov	r0, r5
   32f28:	pop	{r4, r5, r6, r7, fp, pc}
   32f2c:	mov	r5, #22
   32f30:	cmp	r6, #0
   32f34:	beq	32f70 <__assert_fail@plt+0x212c4>
   32f38:	mov	r0, #0
   32f3c:	strb	r0, [r4]
   32f40:	mov	r0, r5
   32f44:	pop	{r4, r5, r6, r7, fp, pc}
   32f48:	mov	r5, #34	; 0x22
   32f4c:	cmp	r6, #0
   32f50:	beq	32f70 <__assert_fail@plt+0x212c4>
   32f54:	sub	r6, r6, #1
   32f58:	mov	r0, r4
   32f5c:	mov	r1, r7
   32f60:	mov	r2, r6
   32f64:	bl	118ec <memcpy@plt>
   32f68:	mov	r0, #0
   32f6c:	strb	r0, [r4, r6]
   32f70:	mov	r0, r5
   32f74:	pop	{r4, r5, r6, r7, fp, pc}
   32f78:	mov	r1, #0
   32f7c:	b	11ba4 <setlocale@plt>
   32f80:	mov	r1, #0
   32f84:	mov	r2, #3
   32f88:	b	1bfe8 <__assert_fail@plt+0xa33c>
   32f8c:	eor	r1, r1, #-2147483648	; 0x80000000
   32f90:	b	32f98 <__assert_fail@plt+0x212ec>
   32f94:	eor	r3, r3, #-2147483648	; 0x80000000
   32f98:	push	{r4, r5, lr}
   32f9c:	lsl	r4, r1, #1
   32fa0:	lsl	r5, r3, #1
   32fa4:	teq	r4, r5
   32fa8:	teqeq	r0, r2
   32fac:	orrsne	ip, r4, r0
   32fb0:	orrsne	ip, r5, r2
   32fb4:	mvnsne	ip, r4, asr #21
   32fb8:	mvnsne	ip, r5, asr #21
   32fbc:	beq	331a8 <__assert_fail@plt+0x214fc>
   32fc0:	lsr	r4, r4, #21
   32fc4:	rsbs	r5, r4, r5, lsr #21
   32fc8:	rsblt	r5, r5, #0
   32fcc:	ble	32fec <__assert_fail@plt+0x21340>
   32fd0:	add	r4, r4, r5
   32fd4:	eor	r2, r0, r2
   32fd8:	eor	r3, r1, r3
   32fdc:	eor	r0, r2, r0
   32fe0:	eor	r1, r3, r1
   32fe4:	eor	r2, r0, r2
   32fe8:	eor	r3, r1, r3
   32fec:	cmp	r5, #54	; 0x36
   32ff0:	pophi	{r4, r5, pc}
   32ff4:	tst	r1, #-2147483648	; 0x80000000
   32ff8:	lsl	r1, r1, #12
   32ffc:	mov	ip, #1048576	; 0x100000
   33000:	orr	r1, ip, r1, lsr #12
   33004:	beq	33010 <__assert_fail@plt+0x21364>
   33008:	rsbs	r0, r0, #0
   3300c:	rsc	r1, r1, #0
   33010:	tst	r3, #-2147483648	; 0x80000000
   33014:	lsl	r3, r3, #12
   33018:	orr	r3, ip, r3, lsr #12
   3301c:	beq	33028 <__assert_fail@plt+0x2137c>
   33020:	rsbs	r2, r2, #0
   33024:	rsc	r3, r3, #0
   33028:	teq	r4, r5
   3302c:	beq	33190 <__assert_fail@plt+0x214e4>
   33030:	sub	r4, r4, #1
   33034:	rsbs	lr, r5, #32
   33038:	blt	33054 <__assert_fail@plt+0x213a8>
   3303c:	lsl	ip, r2, lr
   33040:	adds	r0, r0, r2, lsr r5
   33044:	adc	r1, r1, #0
   33048:	adds	r0, r0, r3, lsl lr
   3304c:	adcs	r1, r1, r3, asr r5
   33050:	b	33070 <__assert_fail@plt+0x213c4>
   33054:	sub	r5, r5, #32
   33058:	add	lr, lr, #32
   3305c:	cmp	r2, #1
   33060:	lsl	ip, r3, lr
   33064:	orrcs	ip, ip, #2
   33068:	adds	r0, r0, r3, asr r5
   3306c:	adcs	r1, r1, r3, asr #31
   33070:	and	r5, r1, #-2147483648	; 0x80000000
   33074:	bpl	33084 <__assert_fail@plt+0x213d8>
   33078:	rsbs	ip, ip, #0
   3307c:	rscs	r0, r0, #0
   33080:	rsc	r1, r1, #0
   33084:	cmp	r1, #1048576	; 0x100000
   33088:	bcc	330c8 <__assert_fail@plt+0x2141c>
   3308c:	cmp	r1, #2097152	; 0x200000
   33090:	bcc	330b0 <__assert_fail@plt+0x21404>
   33094:	lsrs	r1, r1, #1
   33098:	rrxs	r0, r0
   3309c:	rrx	ip, ip
   330a0:	add	r4, r4, #1
   330a4:	lsl	r2, r4, #21
   330a8:	cmn	r2, #4194304	; 0x400000
   330ac:	bcs	33208 <__assert_fail@plt+0x2155c>
   330b0:	cmp	ip, #-2147483648	; 0x80000000
   330b4:	lsrseq	ip, r0, #1
   330b8:	adcs	r0, r0, #0
   330bc:	adc	r1, r1, r4, lsl #20
   330c0:	orr	r1, r1, r5
   330c4:	pop	{r4, r5, pc}
   330c8:	lsls	ip, ip, #1
   330cc:	adcs	r0, r0, r0
   330d0:	adc	r1, r1, r1
   330d4:	tst	r1, #1048576	; 0x100000
   330d8:	sub	r4, r4, #1
   330dc:	bne	330b0 <__assert_fail@plt+0x21404>
   330e0:	teq	r1, #0
   330e4:	moveq	r1, r0
   330e8:	moveq	r0, #0
   330ec:	clz	r3, r1
   330f0:	addeq	r3, r3, #32
   330f4:	sub	r3, r3, #11
   330f8:	subs	r2, r3, #32
   330fc:	bge	33120 <__assert_fail@plt+0x21474>
   33100:	adds	r2, r2, #12
   33104:	ble	3311c <__assert_fail@plt+0x21470>
   33108:	add	ip, r2, #20
   3310c:	rsb	r2, r2, #12
   33110:	lsl	r0, r1, ip
   33114:	lsr	r1, r1, r2
   33118:	b	33130 <__assert_fail@plt+0x21484>
   3311c:	add	r2, r2, #20
   33120:	rsble	ip, r2, #32
   33124:	lsl	r1, r1, r2
   33128:	orrle	r1, r1, r0, lsr ip
   3312c:	lslle	r0, r0, r2
   33130:	subs	r4, r4, r3
   33134:	addge	r1, r1, r4, lsl #20
   33138:	orrge	r1, r1, r5
   3313c:	popge	{r4, r5, pc}
   33140:	mvn	r4, r4
   33144:	subs	r4, r4, #31
   33148:	bge	33184 <__assert_fail@plt+0x214d8>
   3314c:	adds	r4, r4, #12
   33150:	bgt	3316c <__assert_fail@plt+0x214c0>
   33154:	add	r4, r4, #20
   33158:	rsb	r2, r4, #32
   3315c:	lsr	r0, r0, r4
   33160:	orr	r0, r0, r1, lsl r2
   33164:	orr	r1, r5, r1, lsr r4
   33168:	pop	{r4, r5, pc}
   3316c:	rsb	r4, r4, #12
   33170:	rsb	r2, r4, #32
   33174:	lsr	r0, r0, r2
   33178:	orr	r0, r0, r1, lsl r4
   3317c:	mov	r1, r5
   33180:	pop	{r4, r5, pc}
   33184:	lsr	r0, r1, r4
   33188:	mov	r1, r5
   3318c:	pop	{r4, r5, pc}
   33190:	teq	r4, #0
   33194:	eor	r3, r3, #1048576	; 0x100000
   33198:	eoreq	r1, r1, #1048576	; 0x100000
   3319c:	addeq	r4, r4, #1
   331a0:	subne	r5, r5, #1
   331a4:	b	33030 <__assert_fail@plt+0x21384>
   331a8:	mvns	ip, r4, asr #21
   331ac:	mvnsne	ip, r5, asr #21
   331b0:	beq	33218 <__assert_fail@plt+0x2156c>
   331b4:	teq	r4, r5
   331b8:	teqeq	r0, r2
   331bc:	beq	331d0 <__assert_fail@plt+0x21524>
   331c0:	orrs	ip, r4, r0
   331c4:	moveq	r1, r3
   331c8:	moveq	r0, r2
   331cc:	pop	{r4, r5, pc}
   331d0:	teq	r1, r3
   331d4:	movne	r1, #0
   331d8:	movne	r0, #0
   331dc:	popne	{r4, r5, pc}
   331e0:	lsrs	ip, r4, #21
   331e4:	bne	331f8 <__assert_fail@plt+0x2154c>
   331e8:	lsls	r0, r0, #1
   331ec:	adcs	r1, r1, r1
   331f0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   331f4:	pop	{r4, r5, pc}
   331f8:	adds	r4, r4, #4194304	; 0x400000
   331fc:	addcc	r1, r1, #1048576	; 0x100000
   33200:	popcc	{r4, r5, pc}
   33204:	and	r5, r1, #-2147483648	; 0x80000000
   33208:	orr	r1, r5, #2130706432	; 0x7f000000
   3320c:	orr	r1, r1, #15728640	; 0xf00000
   33210:	mov	r0, #0
   33214:	pop	{r4, r5, pc}
   33218:	mvns	ip, r4, asr #21
   3321c:	movne	r1, r3
   33220:	movne	r0, r2
   33224:	mvnseq	ip, r5, asr #21
   33228:	movne	r3, r1
   3322c:	movne	r2, r0
   33230:	orrs	r4, r0, r1, lsl #12
   33234:	orrseq	r5, r2, r3, lsl #12
   33238:	teqeq	r1, r3
   3323c:	orrne	r1, r1, #524288	; 0x80000
   33240:	pop	{r4, r5, pc}
   33244:	teq	r0, #0
   33248:	moveq	r1, #0
   3324c:	bxeq	lr
   33250:	push	{r4, r5, lr}
   33254:	mov	r4, #1024	; 0x400
   33258:	add	r4, r4, #50	; 0x32
   3325c:	mov	r5, #0
   33260:	mov	r1, #0
   33264:	b	330e0 <__assert_fail@plt+0x21434>
   33268:	teq	r0, #0
   3326c:	moveq	r1, #0
   33270:	bxeq	lr
   33274:	push	{r4, r5, lr}
   33278:	mov	r4, #1024	; 0x400
   3327c:	add	r4, r4, #50	; 0x32
   33280:	ands	r5, r0, #-2147483648	; 0x80000000
   33284:	rsbmi	r0, r0, #0
   33288:	mov	r1, #0
   3328c:	b	330e0 <__assert_fail@plt+0x21434>
   33290:	lsls	r2, r0, #1
   33294:	asr	r1, r2, #3
   33298:	rrx	r1, r1
   3329c:	lsl	r0, r2, #28
   332a0:	andsne	r3, r2, #-16777216	; 0xff000000
   332a4:	teqne	r3, #-16777216	; 0xff000000
   332a8:	eorne	r1, r1, #939524096	; 0x38000000
   332ac:	bxne	lr
   332b0:	bics	r2, r2, #-16777216	; 0xff000000
   332b4:	bxeq	lr
   332b8:	teq	r3, #-16777216	; 0xff000000
   332bc:	orreq	r1, r1, #524288	; 0x80000
   332c0:	bxeq	lr
   332c4:	push	{r4, r5, lr}
   332c8:	mov	r4, #896	; 0x380
   332cc:	and	r5, r1, #-2147483648	; 0x80000000
   332d0:	bic	r1, r1, #-2147483648	; 0x80000000
   332d4:	b	330e0 <__assert_fail@plt+0x21434>
   332d8:	orrs	r2, r0, r1
   332dc:	bxeq	lr
   332e0:	push	{r4, r5, lr}
   332e4:	mov	r5, #0
   332e8:	b	33308 <__assert_fail@plt+0x2165c>
   332ec:	orrs	r2, r0, r1
   332f0:	bxeq	lr
   332f4:	push	{r4, r5, lr}
   332f8:	ands	r5, r1, #-2147483648	; 0x80000000
   332fc:	bpl	33308 <__assert_fail@plt+0x2165c>
   33300:	rsbs	r0, r0, #0
   33304:	rsc	r1, r1, #0
   33308:	mov	r4, #1024	; 0x400
   3330c:	add	r4, r4, #50	; 0x32
   33310:	lsrs	ip, r1, #22
   33314:	beq	33084 <__assert_fail@plt+0x213d8>
   33318:	mov	r2, #3
   3331c:	lsrs	ip, ip, #3
   33320:	addne	r2, r2, #3
   33324:	lsrs	ip, ip, #3
   33328:	addne	r2, r2, #3
   3332c:	add	r2, r2, ip, lsr #3
   33330:	rsb	r3, r2, #32
   33334:	lsl	ip, r0, r3
   33338:	lsr	r0, r0, r2
   3333c:	orr	r0, r0, r1, lsl r3
   33340:	lsr	r1, r1, r2
   33344:	add	r4, r4, r2
   33348:	b	33084 <__assert_fail@plt+0x213d8>
   3334c:	cmp	r3, #0
   33350:	cmpeq	r2, #0
   33354:	bne	3336c <__assert_fail@plt+0x216c0>
   33358:	cmp	r1, #0
   3335c:	cmpeq	r0, #0
   33360:	mvnne	r1, #0
   33364:	mvnne	r0, #0
   33368:	b	33388 <__assert_fail@plt+0x216dc>
   3336c:	sub	sp, sp, #8
   33370:	push	{sp, lr}
   33374:	bl	333d8 <__assert_fail@plt+0x2172c>
   33378:	ldr	lr, [sp, #4]
   3337c:	add	sp, sp, #8
   33380:	pop	{r2, r3}
   33384:	bx	lr
   33388:	push	{r1, lr}
   3338c:	mov	r0, #8
   33390:	bl	11838 <raise@plt>
   33394:	pop	{r1, pc}
   33398:	vmov	d6, r0, r1
   3339c:	vldr	d7, [pc, #36]	; 333c8 <__assert_fail@plt+0x2171c>
   333a0:	vldr	d5, [pc, #40]	; 333d0 <__assert_fail@plt+0x21724>
   333a4:	vmul.f64	d7, d6, d7
   333a8:	vcvt.u32.f64	s14, d7
   333ac:	vcvt.f64.u32	d4, s14
   333b0:	vmov	r1, s14
   333b4:	vmls.f64	d6, d4, d5
   333b8:	vcvt.u32.f64	s15, d6
   333bc:	vmov	r0, s15
   333c0:	bx	lr
   333c4:	nop			; (mov r0, r0)
   333c8:	andeq	r0, r0, r0
   333cc:	ldclcc	0, cr0, [r0]
   333d0:	andeq	r0, r0, r0
   333d4:	mvnsmi	r0, r0
   333d8:	cmp	r1, r3
   333dc:	cmpeq	r0, r2
   333e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   333e4:	mov	r4, r0
   333e8:	movcc	r0, #0
   333ec:	mov	r5, r1
   333f0:	ldr	lr, [sp, #36]	; 0x24
   333f4:	movcc	r1, r0
   333f8:	bcc	334f4 <__assert_fail@plt+0x21848>
   333fc:	cmp	r3, #0
   33400:	clzeq	ip, r2
   33404:	clzne	ip, r3
   33408:	addeq	ip, ip, #32
   3340c:	cmp	r5, #0
   33410:	clzeq	r1, r4
   33414:	addeq	r1, r1, #32
   33418:	clzne	r1, r5
   3341c:	sub	ip, ip, r1
   33420:	sub	sl, ip, #32
   33424:	lsl	r9, r3, ip
   33428:	rsb	fp, ip, #32
   3342c:	orr	r9, r9, r2, lsl sl
   33430:	orr	r9, r9, r2, lsr fp
   33434:	lsl	r8, r2, ip
   33438:	cmp	r5, r9
   3343c:	cmpeq	r4, r8
   33440:	movcc	r0, #0
   33444:	movcc	r1, r0
   33448:	bcc	33464 <__assert_fail@plt+0x217b8>
   3344c:	mov	r0, #1
   33450:	subs	r4, r4, r8
   33454:	lsl	r1, r0, sl
   33458:	orr	r1, r1, r0, lsr fp
   3345c:	lsl	r0, r0, ip
   33460:	sbc	r5, r5, r9
   33464:	cmp	ip, #0
   33468:	beq	334f4 <__assert_fail@plt+0x21848>
   3346c:	lsr	r6, r8, #1
   33470:	orr	r6, r6, r9, lsl #31
   33474:	lsr	r7, r9, #1
   33478:	mov	r2, ip
   3347c:	b	334a0 <__assert_fail@plt+0x217f4>
   33480:	subs	r3, r4, r6
   33484:	sbc	r8, r5, r7
   33488:	adds	r3, r3, r3
   3348c:	adc	r8, r8, r8
   33490:	adds	r4, r3, #1
   33494:	adc	r5, r8, #0
   33498:	subs	r2, r2, #1
   3349c:	beq	334bc <__assert_fail@plt+0x21810>
   334a0:	cmp	r5, r7
   334a4:	cmpeq	r4, r6
   334a8:	bcs	33480 <__assert_fail@plt+0x217d4>
   334ac:	adds	r4, r4, r4
   334b0:	adc	r5, r5, r5
   334b4:	subs	r2, r2, #1
   334b8:	bne	334a0 <__assert_fail@plt+0x217f4>
   334bc:	lsr	r3, r4, ip
   334c0:	orr	r3, r3, r5, lsl fp
   334c4:	lsr	r2, r5, ip
   334c8:	orr	r3, r3, r5, lsr sl
   334cc:	adds	r0, r0, r4
   334d0:	mov	r4, r3
   334d4:	lsl	r3, r2, ip
   334d8:	orr	r3, r3, r4, lsl sl
   334dc:	lsl	ip, r4, ip
   334e0:	orr	r3, r3, r4, lsr fp
   334e4:	adc	r1, r1, r5
   334e8:	subs	r0, r0, ip
   334ec:	mov	r5, r2
   334f0:	sbc	r1, r1, r3
   334f4:	cmp	lr, #0
   334f8:	strdne	r4, [lr]
   334fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33504:	mov	r7, r0
   33508:	ldr	r6, [pc, #72]	; 33558 <__assert_fail@plt+0x218ac>
   3350c:	ldr	r5, [pc, #72]	; 3355c <__assert_fail@plt+0x218b0>
   33510:	add	r6, pc, r6
   33514:	add	r5, pc, r5
   33518:	sub	r6, r6, r5
   3351c:	mov	r8, r1
   33520:	mov	r9, r2
   33524:	bl	117e8 <pthread_mutex_unlock@plt-0x20>
   33528:	asrs	r6, r6, #2
   3352c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33530:	mov	r4, #0
   33534:	add	r4, r4, #1
   33538:	ldr	r3, [r5], #4
   3353c:	mov	r2, r9
   33540:	mov	r1, r8
   33544:	mov	r0, r7
   33548:	blx	r3
   3354c:	cmp	r6, r4
   33550:	bne	33534 <__assert_fail@plt+0x21888>
   33554:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33558:	strdeq	r2, [r1], -r4
   3355c:	andeq	r2, r1, ip, ror #19
   33560:	bx	lr
   33564:	ldr	r3, [pc, #12]	; 33578 <__assert_fail@plt+0x218cc>
   33568:	mov	r1, #0
   3356c:	add	r3, pc, r3
   33570:	ldr	r2, [r3]
   33574:	b	11b14 <__cxa_atexit@plt>
   33578:	andeq	r2, r1, r0, lsr ip

Disassembly of section .fini:

0003357c <.fini>:
   3357c:	push	{r3, lr}
   33580:	pop	{r3, pc}
