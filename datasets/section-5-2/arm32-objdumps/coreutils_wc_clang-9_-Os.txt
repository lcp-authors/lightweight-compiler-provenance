
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

000112ac <.init>:
   112ac:	push	{r3, lr}
   112b0:	bl	1163c <__assert_fail@plt+0x4c>
   112b4:	pop	{r3, pc}

Disassembly of section .plt:

000112b8 <calloc@plt-0x14>:
   112b8:	push	{lr}		; (str lr, [sp, #-4]!)
   112bc:	ldr	lr, [pc, #4]	; 112c8 <calloc@plt-0x4>
   112c0:	add	lr, pc, lr
   112c4:	ldr	pc, [lr, #8]!
   112c8:	andeq	r6, r1, r8, lsr sp

000112cc <calloc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3384]!	; 0xd38

000112d8 <fputs_unlocked@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3376]!	; 0xd30

000112e4 <raise@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3368]!	; 0xd28

000112f0 <strcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3360]!	; 0xd20

000112fc <posix_fadvise64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3352]!	; 0xd18

00011308 <read@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3344]!	; 0xd10

00011314 <fflush@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3336]!	; 0xd08

00011320 <wcwidth@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3328]!	; 0xd00

0001132c <memmove@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3320]!	; 0xcf8

00011338 <free@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3312]!	; 0xcf0

00011344 <ferror@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3304]!	; 0xce8

00011350 <_exit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3296]!	; 0xce0

0001135c <memcpy@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3288]!	; 0xcd8

00011368 <mbsinit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3280]!	; 0xcd0

00011374 <dcgettext@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011380 <sysconf@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3264]!	; 0xcc0

0001138c <realloc@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #90112	; 0x16000
   11394:	ldr	pc, [ip, #3256]!	; 0xcb8

00011398 <textdomain@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #90112	; 0x16000
   113a0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113a4 <iswcntrl@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #90112	; 0x16000
   113ac:	ldr	pc, [ip, #3240]!	; 0xca8

000113b0 <rawmemchr@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #90112	; 0x16000
   113b8:	ldr	pc, [ip, #3232]!	; 0xca0

000113bc <iswprint@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #90112	; 0x16000
   113c4:	ldr	pc, [ip, #3224]!	; 0xc98

000113c8 <__fxstat64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #90112	; 0x16000
   113d0:	ldr	pc, [ip, #3216]!	; 0xc90

000113d4 <lseek64@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #90112	; 0x16000
   113dc:	ldr	pc, [ip, #3208]!	; 0xc88

000113e0 <__ctype_get_mb_cur_max@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #90112	; 0x16000
   113e8:	ldr	pc, [ip, #3200]!	; 0xc80

000113ec <__fpending@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #90112	; 0x16000
   113f4:	ldr	pc, [ip, #3192]!	; 0xc78

000113f8 <ferror_unlocked@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #90112	; 0x16000
   11400:	ldr	pc, [ip, #3184]!	; 0xc70

00011404 <mbrtowc@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #90112	; 0x16000
   1140c:	ldr	pc, [ip, #3176]!	; 0xc68

00011410 <error@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #90112	; 0x16000
   11418:	ldr	pc, [ip, #3168]!	; 0xc60

0001141c <open64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #90112	; 0x16000
   11424:	ldr	pc, [ip, #3160]!	; 0xc58

00011428 <getenv@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #90112	; 0x16000
   11430:	ldr	pc, [ip, #3152]!	; 0xc50

00011434 <sysinfo@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #90112	; 0x16000
   1143c:	ldr	pc, [ip, #3144]!	; 0xc48

00011440 <malloc@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #90112	; 0x16000
   11448:	ldr	pc, [ip, #3136]!	; 0xc40

0001144c <__libc_start_main@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #90112	; 0x16000
   11454:	ldr	pc, [ip, #3128]!	; 0xc38

00011458 <__freading@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #90112	; 0x16000
   11460:	ldr	pc, [ip, #3120]!	; 0xc30

00011464 <__gmon_start__@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #90112	; 0x16000
   1146c:	ldr	pc, [ip, #3112]!	; 0xc28

00011470 <getopt_long@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #90112	; 0x16000
   11478:	ldr	pc, [ip, #3104]!	; 0xc20

0001147c <__ctype_b_loc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #90112	; 0x16000
   11484:	ldr	pc, [ip, #3096]!	; 0xc18

00011488 <exit@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #90112	; 0x16000
   11490:	ldr	pc, [ip, #3088]!	; 0xc10

00011494 <feof@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #90112	; 0x16000
   1149c:	ldr	pc, [ip, #3080]!	; 0xc08

000114a0 <iswspace@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #90112	; 0x16000
   114a8:	ldr	pc, [ip, #3072]!	; 0xc00

000114ac <bcmp@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #90112	; 0x16000
   114b4:	ldr	pc, [ip, #3064]!	; 0xbf8

000114b8 <strlen@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #90112	; 0x16000
   114c0:	ldr	pc, [ip, #3056]!	; 0xbf0

000114c4 <strchr@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #90112	; 0x16000
   114cc:	ldr	pc, [ip, #3048]!	; 0xbe8

000114d0 <getpagesize@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #90112	; 0x16000
   114d8:	ldr	pc, [ip, #3040]!	; 0xbe0

000114dc <__errno_location@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #90112	; 0x16000
   114e4:	ldr	pc, [ip, #3032]!	; 0xbd8

000114e8 <__cxa_atexit@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #90112	; 0x16000
   114f0:	ldr	pc, [ip, #3024]!	; 0xbd0

000114f4 <setvbuf@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #90112	; 0x16000
   114fc:	ldr	pc, [ip, #3016]!	; 0xbc8

00011500 <memset@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #90112	; 0x16000
   11508:	ldr	pc, [ip, #3008]!	; 0xbc0

0001150c <btowc@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #90112	; 0x16000
   11514:	ldr	pc, [ip, #3000]!	; 0xbb8

00011518 <fgetc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #90112	; 0x16000
   11520:	ldr	pc, [ip, #2992]!	; 0xbb0

00011524 <__printf_chk@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #90112	; 0x16000
   1152c:	ldr	pc, [ip, #2984]!	; 0xba8

00011530 <fileno@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #90112	; 0x16000
   11538:	ldr	pc, [ip, #2976]!	; 0xba0

0001153c <__fprintf_chk@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #90112	; 0x16000
   11544:	ldr	pc, [ip, #2968]!	; 0xb98

00011548 <fclose@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #90112	; 0x16000
   11550:	ldr	pc, [ip, #2960]!	; 0xb90

00011554 <fseeko64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #90112	; 0x16000
   1155c:	ldr	pc, [ip, #2952]!	; 0xb88

00011560 <setlocale@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #90112	; 0x16000
   11568:	ldr	pc, [ip, #2944]!	; 0xb80

0001156c <strrchr@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #90112	; 0x16000
   11574:	ldr	pc, [ip, #2936]!	; 0xb78

00011578 <nl_langinfo@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #90112	; 0x16000
   11580:	ldr	pc, [ip, #2928]!	; 0xb70

00011584 <fopen64@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #90112	; 0x16000
   1158c:	ldr	pc, [ip, #2920]!	; 0xb68

00011590 <bindtextdomain@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #90112	; 0x16000
   11598:	ldr	pc, [ip, #2912]!	; 0xb60

0001159c <getdelim@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #90112	; 0x16000
   115a4:	ldr	pc, [ip, #2904]!	; 0xb58

000115a8 <__xstat64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #90112	; 0x16000
   115b0:	ldr	pc, [ip, #2896]!	; 0xb50

000115b4 <fputs@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #90112	; 0x16000
   115bc:	ldr	pc, [ip, #2888]!	; 0xb48

000115c0 <strncmp@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #90112	; 0x16000
   115c8:	ldr	pc, [ip, #2880]!	; 0xb40

000115cc <abort@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #90112	; 0x16000
   115d4:	ldr	pc, [ip, #2872]!	; 0xb38

000115d8 <close@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #90112	; 0x16000
   115e0:	ldr	pc, [ip, #2864]!	; 0xb30

000115e4 <putchar_unlocked@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #90112	; 0x16000
   115ec:	ldr	pc, [ip, #2856]!	; 0xb28

000115f0 <__assert_fail@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #90112	; 0x16000
   115f8:	ldr	pc, [ip, #2848]!	; 0xb20

Disassembly of section .text:

00011600 <_obstack_begin@@Base-0x4eac>:
   11600:	mov	fp, #0
   11604:	mov	lr, #0
   11608:	pop	{r1}		; (ldr r1, [sp], #4)
   1160c:	mov	r2, sp
   11610:	push	{r2}		; (str r2, [sp, #-4]!)
   11614:	push	{r0}		; (str r0, [sp, #-4]!)
   11618:	ldr	ip, [pc, #16]	; 11630 <__assert_fail@plt+0x40>
   1161c:	push	{ip}		; (str ip, [sp, #-4]!)
   11620:	ldr	r0, [pc, #12]	; 11634 <__assert_fail@plt+0x44>
   11624:	ldr	r3, [pc, #12]	; 11638 <__assert_fail@plt+0x48>
   11628:	bl	1144c <__libc_start_main@plt>
   1162c:	bl	115cc <abort@plt>
   11630:			; <UNDEFINED> instruction: 0x00016eb4
   11634:	andeq	r1, r1, r0, ror r9
   11638:	andeq	r6, r1, r4, asr lr
   1163c:	ldr	r3, [pc, #20]	; 11658 <__assert_fail@plt+0x68>
   11640:	ldr	r2, [pc, #20]	; 1165c <__assert_fail@plt+0x6c>
   11644:	add	r3, pc, r3
   11648:	ldr	r2, [r3, r2]
   1164c:	cmp	r2, #0
   11650:	bxeq	lr
   11654:	b	11464 <__gmon_start__@plt>
   11658:			; <UNDEFINED> instruction: 0x000169b4
   1165c:	andeq	r0, r0, ip, lsl r1
   11660:	ldr	r0, [pc, #24]	; 11680 <__assert_fail@plt+0x90>
   11664:	ldr	r3, [pc, #24]	; 11684 <__assert_fail@plt+0x94>
   11668:	cmp	r3, r0
   1166c:	bxeq	lr
   11670:	ldr	r3, [pc, #16]	; 11688 <__assert_fail@plt+0x98>
   11674:	cmp	r3, #0
   11678:	bxeq	lr
   1167c:	bx	r3
   11680:	andeq	r8, r2, r4, ror r1
   11684:	andeq	r8, r2, r4, ror r1
   11688:	andeq	r0, r0, r0
   1168c:	ldr	r0, [pc, #36]	; 116b8 <__assert_fail@plt+0xc8>
   11690:	ldr	r1, [pc, #36]	; 116bc <__assert_fail@plt+0xcc>
   11694:	sub	r1, r1, r0
   11698:	asr	r1, r1, #2
   1169c:	add	r1, r1, r1, lsr #31
   116a0:	asrs	r1, r1, #1
   116a4:	bxeq	lr
   116a8:	ldr	r3, [pc, #16]	; 116c0 <__assert_fail@plt+0xd0>
   116ac:	cmp	r3, #0
   116b0:	bxeq	lr
   116b4:	bx	r3
   116b8:	andeq	r8, r2, r4, ror r1
   116bc:	andeq	r8, r2, r4, ror r1
   116c0:	andeq	r0, r0, r0
   116c4:	push	{r4, lr}
   116c8:	ldr	r4, [pc, #24]	; 116e8 <__assert_fail@plt+0xf8>
   116cc:	ldrb	r3, [r4]
   116d0:	cmp	r3, #0
   116d4:	popne	{r4, pc}
   116d8:	bl	11660 <__assert_fail@plt+0x70>
   116dc:	mov	r3, #1
   116e0:	strb	r3, [r4]
   116e4:	pop	{r4, pc}
   116e8:	muleq	r2, ip, r1
   116ec:	b	1168c <__assert_fail@plt+0x9c>
   116f0:	push	{fp, lr}
   116f4:	mov	fp, sp
   116f8:	sub	sp, sp, #56	; 0x38
   116fc:	mov	r8, r0
   11700:	cmp	r0, #0
   11704:	bne	1192c <__assert_fail@plt+0x33c>
   11708:	movw	r1, #28451	; 0x6f23
   1170c:	mov	r0, #0
   11710:	mov	r2, #5
   11714:	movt	r1, #1
   11718:	bl	11374 <dcgettext@plt>
   1171c:	mov	r1, r0
   11720:	movw	r0, #33260	; 0x81ec
   11724:	movt	r0, #2
   11728:	ldr	r2, [r0]
   1172c:	mov	r0, #1
   11730:	mov	r3, r2
   11734:	bl	11524 <__printf_chk@plt>
   11738:	movw	r1, #28522	; 0x6f6a
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	11374 <dcgettext@plt>
   1174c:	movw	r9, #33172	; 0x8194
   11750:	movt	r9, #2
   11754:	ldr	r1, [r9]
   11758:	bl	112d8 <fputs_unlocked@plt>
   1175c:	movw	r1, #29831	; 0x7487
   11760:	mov	r0, #0
   11764:	mov	r2, #5
   11768:	movt	r1, #1
   1176c:	bl	11374 <dcgettext@plt>
   11770:	ldr	r1, [r9]
   11774:	bl	112d8 <fputs_unlocked@plt>
   11778:	movw	r1, #28716	; 0x702c
   1177c:	mov	r0, #0
   11780:	mov	r2, #5
   11784:	movt	r1, #1
   11788:	bl	11374 <dcgettext@plt>
   1178c:	ldr	r1, [r9]
   11790:	bl	112d8 <fputs_unlocked@plt>
   11794:	movw	r1, #29017	; 0x7159
   11798:	mov	r0, #0
   1179c:	mov	r2, #5
   117a0:	movt	r1, #1
   117a4:	bl	11374 <dcgettext@plt>
   117a8:	ldr	r1, [r9]
   117ac:	bl	112d8 <fputs_unlocked@plt>
   117b0:	movw	r1, #29318	; 0x7286
   117b4:	mov	r0, #0
   117b8:	mov	r2, #5
   117bc:	movt	r1, #1
   117c0:	bl	11374 <dcgettext@plt>
   117c4:	ldr	r1, [r9]
   117c8:	bl	112d8 <fputs_unlocked@plt>
   117cc:	movw	r1, #29363	; 0x72b3
   117d0:	mov	r0, #0
   117d4:	mov	r2, #5
   117d8:	movt	r1, #1
   117dc:	bl	11374 <dcgettext@plt>
   117e0:	ldr	r1, [r9]
   117e4:	bl	112d8 <fputs_unlocked@plt>
   117e8:	movw	r0, #30432	; 0x76e0
   117ec:	mov	r6, sp
   117f0:	movt	r0, #1
   117f4:	mov	r1, r6
   117f8:	ldm	r0!, {r2, r3, r4, r5}
   117fc:	stmia	r1!, {r2, r3, r4, r5}
   11800:	ldm	r0!, {r2, r3, r4, r5, r7}
   11804:	stmia	r1!, {r2, r3, r4, r5, r7}
   11808:	ldm	r0, {r2, r3, r4, r5, r7}
   1180c:	stm	r1, {r2, r3, r4, r5, r7}
   11810:	movw	r1, #29887	; 0x74bf
   11814:	movw	r5, #29417	; 0x72e9
   11818:	movt	r1, #1
   1181c:	movt	r5, #1
   11820:	mov	r0, r5
   11824:	bl	112f0 <strcmp@plt>
   11828:	cmp	r0, #0
   1182c:	ldrne	r1, [r6, #8]!
   11830:	cmpne	r1, #0
   11834:	bne	11820 <__assert_fail@plt+0x230>
   11838:	movw	r1, #29982	; 0x751e
   1183c:	ldr	r6, [r6, #4]
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	movt	r1, #1
   1184c:	bl	11374 <dcgettext@plt>
   11850:	movw	r2, #29466	; 0x731a
   11854:	movw	r3, #30005	; 0x7535
   11858:	mov	r1, r0
   1185c:	mov	r0, #1
   11860:	movt	r2, #1
   11864:	movt	r3, #1
   11868:	bl	11524 <__printf_chk@plt>
   1186c:	cmp	r6, #0
   11870:	mov	r0, #5
   11874:	mov	r1, #0
   11878:	moveq	r6, r5
   1187c:	bl	11560 <setlocale@plt>
   11880:	cmp	r0, #0
   11884:	beq	118bc <__assert_fail@plt+0x2cc>
   11888:	movw	r1, #30045	; 0x755d
   1188c:	mov	r2, #3
   11890:	movt	r1, #1
   11894:	bl	115c0 <strncmp@plt>
   11898:	cmp	r0, #0
   1189c:	beq	118bc <__assert_fail@plt+0x2cc>
   118a0:	movw	r1, #30049	; 0x7561
   118a4:	mov	r0, #0
   118a8:	mov	r2, #5
   118ac:	movt	r1, #1
   118b0:	bl	11374 <dcgettext@plt>
   118b4:	ldr	r1, [r9]
   118b8:	bl	112d8 <fputs_unlocked@plt>
   118bc:	movw	r1, #30120	; 0x75a8
   118c0:	mov	r0, #0
   118c4:	mov	r2, #5
   118c8:	movt	r1, #1
   118cc:	bl	11374 <dcgettext@plt>
   118d0:	movw	r2, #30005	; 0x7535
   118d4:	mov	r1, r0
   118d8:	mov	r0, #1
   118dc:	mov	r3, r5
   118e0:	movt	r2, #1
   118e4:	bl	11524 <__printf_chk@plt>
   118e8:	movw	r1, #30147	; 0x75c3
   118ec:	mov	r0, #0
   118f0:	mov	r2, #5
   118f4:	movt	r1, #1
   118f8:	bl	11374 <dcgettext@plt>
   118fc:	mov	r1, r0
   11900:	movw	r0, #29915	; 0x74db
   11904:	movw	r3, #30197	; 0x75f5
   11908:	cmp	r6, r5
   1190c:	mov	r2, r6
   11910:	movt	r0, #1
   11914:	movt	r3, #1
   11918:	moveq	r3, r0
   1191c:	mov	r0, #1
   11920:	bl	11524 <__printf_chk@plt>
   11924:	mov	r0, r8
   11928:	bl	11488 <exit@plt>
   1192c:	movw	r0, #33160	; 0x8188
   11930:	movw	r1, #28412	; 0x6efc
   11934:	mov	r2, #5
   11938:	movt	r0, #2
   1193c:	movt	r1, #1
   11940:	ldr	r5, [r0]
   11944:	mov	r0, #0
   11948:	bl	11374 <dcgettext@plt>
   1194c:	mov	r2, r0
   11950:	movw	r0, #33260	; 0x81ec
   11954:	mov	r1, #1
   11958:	movt	r0, #2
   1195c:	ldr	r3, [r0]
   11960:	mov	r0, r5
   11964:	bl	1153c <__fprintf_chk@plt>
   11968:	b	11924 <__assert_fail@plt+0x334>
   1196c:	nop	{0}
   11970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11974:	add	fp, sp, #28
   11978:	sub	sp, sp, #4
   1197c:	vpush	{d8-d10}
   11980:	sub	sp, sp, #312	; 0x138
   11984:	mov	r6, r0
   11988:	ldr	r0, [r1]
   1198c:	mov	r5, r1
   11990:	bl	13ac0 <__assert_fail@plt+0x24d0>
   11994:	movw	r1, #30197	; 0x75f5
   11998:	mov	r0, #6
   1199c:	movt	r1, #1
   119a0:	bl	11560 <setlocale@plt>
   119a4:	movw	r4, #29470	; 0x731e
   119a8:	movw	r1, #29420	; 0x72ec
   119ac:	movt	r4, #1
   119b0:	movt	r1, #1
   119b4:	mov	r0, r4
   119b8:	bl	11590 <bindtextdomain@plt>
   119bc:	mov	r0, r4
   119c0:	bl	11398 <textdomain@plt>
   119c4:	movw	r0, #13660	; 0x355c
   119c8:	movt	r0, #1
   119cc:	bl	16eb8 <_obstack_memory_used@@Base+0x6dc>
   119d0:	bl	114d0 <getpagesize@plt>
   119d4:	movw	r1, #33184	; 0x81a0
   119d8:	mov	r2, #1
   119dc:	mov	r3, #0
   119e0:	mov	r4, #0
   119e4:	movt	r1, #2
   119e8:	str	r0, [r1]
   119ec:	movw	r0, #33172	; 0x8194
   119f0:	mov	r1, #0
   119f4:	movt	r0, #2
   119f8:	ldr	r0, [r0]
   119fc:	bl	114f4 <setvbuf@plt>
   11a00:	movw	r0, #29444	; 0x7304
   11a04:	movt	r0, #1
   11a08:	bl	11428 <getenv@plt>
   11a0c:	movw	r1, #33200	; 0x81b0
   11a10:	movw	r8, #33189	; 0x81a5
   11a14:	movw	r9, #33191	; 0x81a7
   11a18:	cmp	r0, #0
   11a1c:	movw	sl, #29460	; 0x7314
   11a20:	movw	r7, #30272	; 0x7640
   11a24:	movt	r1, #2
   11a28:	movt	r8, #2
   11a2c:	movt	r9, #2
   11a30:	movwne	r0, #1
   11a34:	movt	sl, #1
   11a38:	movt	r7, #1
   11a3c:	str	r4, [r1]
   11a40:	str	r4, [r1, #4]
   11a44:	movw	r1, #33208	; 0x81b8
   11a48:	strb	r4, [r8]
   11a4c:	strb	r4, [r9]
   11a50:	movt	r1, #2
   11a54:	str	r4, [r1]
   11a58:	str	r4, [r1, #4]
   11a5c:	movw	r1, #33216	; 0x81c0
   11a60:	movt	r1, #2
   11a64:	str	r4, [r1]
   11a68:	str	r4, [r1, #4]
   11a6c:	movw	r1, #33224	; 0x81c8
   11a70:	movt	r1, #2
   11a74:	str	r4, [r1]
   11a78:	str	r4, [r1, #4]
   11a7c:	movw	r1, #33232	; 0x81d0
   11a80:	movt	r1, #2
   11a84:	str	r4, [r1]
   11a88:	str	r4, [r1, #4]
   11a8c:	movw	r1, #33190	; 0x81a6
   11a90:	movt	r1, #2
   11a94:	strb	r4, [r1]
   11a98:	movw	r1, #33192	; 0x81a8
   11a9c:	movt	r1, #2
   11aa0:	strb	r4, [r1]
   11aa4:	movw	r1, #33193	; 0x81a9
   11aa8:	movt	r1, #2
   11aac:	strb	r4, [r1]
   11ab0:	movw	r1, #33188	; 0x81a4
   11ab4:	movt	r1, #2
   11ab8:	strb	r0, [r1]
   11abc:	mov	r0, #0
   11ac0:	str	r0, [sp, #44]	; 0x2c
   11ac4:	mov	r0, r6
   11ac8:	mov	r1, r5
   11acc:	mov	r2, sl
   11ad0:	mov	r3, r7
   11ad4:	str	r4, [sp]
   11ad8:	bl	11470 <getopt_long@plt>
   11adc:	cmp	r0, #108	; 0x6c
   11ae0:	bgt	11b14 <__assert_fail@plt+0x524>
   11ae4:	cmp	r0, #75	; 0x4b
   11ae8:	ble	11b7c <__assert_fail@plt+0x58c>
   11aec:	cmp	r0, #76	; 0x4c
   11af0:	beq	11b4c <__assert_fail@plt+0x55c>
   11af4:	cmp	r0, #99	; 0x63
   11af8:	mov	r1, r8
   11afc:	beq	11b54 <__assert_fail@plt+0x564>
   11b00:	cmp	r0, #108	; 0x6c
   11b04:	bne	1249c <__assert_fail@plt+0xeac>
   11b08:	movw	r1, #33192	; 0x81a8
   11b0c:	movt	r1, #2
   11b10:	b	11b54 <__assert_fail@plt+0x564>
   11b14:	cmp	r0, #255	; 0xff
   11b18:	bgt	11b30 <__assert_fail@plt+0x540>
   11b1c:	cmp	r0, #109	; 0x6d
   11b20:	bne	11b3c <__assert_fail@plt+0x54c>
   11b24:	movw	r1, #33190	; 0x81a6
   11b28:	movt	r1, #2
   11b2c:	b	11b54 <__assert_fail@plt+0x564>
   11b30:	cmp	r0, #256	; 0x100
   11b34:	beq	11ac4 <__assert_fail@plt+0x4d4>
   11b38:	b	11b60 <__assert_fail@plt+0x570>
   11b3c:	cmp	r0, #119	; 0x77
   11b40:	bne	1249c <__assert_fail@plt+0xeac>
   11b44:	mov	r1, r9
   11b48:	b	11b54 <__assert_fail@plt+0x564>
   11b4c:	movw	r1, #33193	; 0x81a9
   11b50:	movt	r1, #2
   11b54:	mov	r0, #1
   11b58:	strb	r0, [r1]
   11b5c:	b	11ac4 <__assert_fail@plt+0x4d4>
   11b60:	movw	r1, #257	; 0x101
   11b64:	cmp	r0, r1
   11b68:	bne	1249c <__assert_fail@plt+0xeac>
   11b6c:	movw	r0, #33176	; 0x8198
   11b70:	movt	r0, #2
   11b74:	ldr	r0, [r0]
   11b78:	b	11ac0 <__assert_fail@plt+0x4d0>
   11b7c:	cmn	r0, #1
   11b80:	bne	12390 <__assert_fail@plt+0xda0>
   11b84:	movw	r4, #33192	; 0x81a8
   11b88:	movt	r4, #2
   11b8c:	ldrb	r0, [r4]
   11b90:	cmp	r0, #0
   11b94:	bne	11bf4 <__assert_fail@plt+0x604>
   11b98:	movw	r0, #33191	; 0x81a7
   11b9c:	movt	r0, #2
   11ba0:	ldrb	r1, [r0]
   11ba4:	cmp	r1, #0
   11ba8:	bne	11bf4 <__assert_fail@plt+0x604>
   11bac:	movw	r1, #33190	; 0x81a6
   11bb0:	movt	r1, #2
   11bb4:	ldrb	r1, [r1]
   11bb8:	cmp	r1, #0
   11bbc:	bne	11bf4 <__assert_fail@plt+0x604>
   11bc0:	movw	r1, #33189	; 0x81a5
   11bc4:	movt	r1, #2
   11bc8:	ldrb	r2, [r1]
   11bcc:	cmp	r2, #0
   11bd0:	bne	11bf4 <__assert_fail@plt+0x604>
   11bd4:	movw	r2, #33193	; 0x81a9
   11bd8:	movt	r2, #2
   11bdc:	ldrb	r2, [r2]
   11be0:	cmp	r2, #0
   11be4:	moveq	r2, #1
   11be8:	strbeq	r2, [r0]
   11bec:	strbeq	r2, [r1]
   11bf0:	strbeq	r2, [r4]
   11bf4:	movw	r7, #33152	; 0x8180
   11bf8:	ldr	r1, [sp, #44]	; 0x2c
   11bfc:	movt	r7, #2
   11c00:	ldr	r0, [r7]
   11c04:	cmp	r1, #0
   11c08:	beq	11c8c <__assert_fail@plt+0x69c>
   11c0c:	cmp	r0, r6
   11c10:	blt	12428 <__assert_fail@plt+0xe38>
   11c14:	ldr	r6, [sp, #44]	; 0x2c
   11c18:	movw	r1, #30626	; 0x77a2
   11c1c:	movt	r1, #1
   11c20:	mov	r0, r6
   11c24:	bl	112f0 <strcmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	beq	11cac <__assert_fail@plt+0x6bc>
   11c30:	movw	r1, #29647	; 0x73cf
   11c34:	mov	r0, r6
   11c38:	movt	r1, #1
   11c3c:	bl	11584 <fopen64@plt>
   11c40:	mov	r5, r0
   11c44:	cmp	r0, #0
   11c48:	bne	11cb8 <__assert_fail@plt+0x6c8>
   11c4c:	bl	114dc <__errno_location@plt>
   11c50:	movw	r1, #29576	; 0x7388
   11c54:	ldr	r4, [r0]
   11c58:	mov	r0, #0
   11c5c:	mov	r2, #5
   11c60:	movt	r1, #1
   11c64:	bl	11374 <dcgettext@plt>
   11c68:	mov	r5, r0
   11c6c:	mov	r0, #4
   11c70:	mov	r1, r6
   11c74:	bl	15174 <__assert_fail@plt+0x3b84>
   11c78:	mov	r3, r0
   11c7c:	mov	r0, #1
   11c80:	mov	r1, r4
   11c84:	mov	r2, r5
   11c88:	bl	11410 <error@plt>
   11c8c:	subs	r9, r6, r0
   11c90:	movw	r7, #33240	; 0x81d8
   11c94:	movt	r7, #2
   11c98:	addgt	r7, r5, r0, lsl #2
   11c9c:	movle	r9, #1
   11ca0:	mov	r0, r7
   11ca4:	bl	133d8 <__assert_fail@plt+0x1de8>
   11ca8:	b	11d30 <__assert_fail@plt+0x740>
   11cac:	movw	r0, #33168	; 0x8190
   11cb0:	movt	r0, #2
   11cb4:	ldr	r5, [r0]
   11cb8:	mov	r0, r5
   11cbc:	bl	11530 <fileno@plt>
   11cc0:	add	r1, sp, #56	; 0x38
   11cc4:	bl	16ee0 <_obstack_memory_used@@Base+0x704>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11d20 <__assert_fail@plt+0x730>
   11cd0:	ldr	r0, [sp, #72]	; 0x48
   11cd4:	and	r0, r0, #61440	; 0xf000
   11cd8:	cmp	r0, #32768	; 0x8000
   11cdc:	bne	11d20 <__assert_fail@plt+0x730>
   11ce0:	ldr	r0, [sp, #104]	; 0x68
   11ce4:	ldr	r1, [sp, #108]	; 0x6c
   11ce8:	bl	16c80 <_obstack_memory_used@@Base+0x4a4>
   11cec:	vldr	d9, [pc, #1004]	; 120e0 <__assert_fail@plt+0xaf0>
   11cf0:	vmov	d8, r0, r1
   11cf4:	bl	13a38 <__assert_fail@plt+0x2448>
   11cf8:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11cfc:	vmul.f64	d16, d0, d10
   11d00:	vcmpe.f64	d16, d9
   11d04:	vmrs	APSR_nzcv, fpscr
   11d08:	bgt	11d14 <__assert_fail@plt+0x724>
   11d0c:	bl	13a38 <__assert_fail@plt+0x2448>
   11d10:	vmul.f64	d9, d0, d10
   11d14:	vcmpe.f64	d9, d8
   11d18:	vmrs	APSR_nzcv, fpscr
   11d1c:	bge	12348 <__assert_fail@plt+0xd58>
   11d20:	mov	r0, r5
   11d24:	bl	13408 <__assert_fail@plt+0x1e18>
   11d28:	mov	r7, #0
   11d2c:	mov	r9, #0
   11d30:	mov	r1, #0
   11d34:	cmp	r0, #0
   11d38:	beq	12404 <__assert_fail@plt+0xe14>
   11d3c:	cmp	r9, #0
   11d40:	str	r1, [sp, #40]	; 0x28
   11d44:	str	r0, [sp, #48]	; 0x30
   11d48:	mov	r0, r9
   11d4c:	mov	r1, #112	; 0x70
   11d50:	movweq	r0, #1
   11d54:	bl	15f14 <__assert_fail@plt+0x4924>
   11d58:	cmp	r9, #0
   11d5c:	str	r0, [sp, #52]	; 0x34
   11d60:	beq	11db8 <__assert_fail@plt+0x7c8>
   11d64:	cmp	r9, #1
   11d68:	bne	11dc8 <__assert_fail@plt+0x7d8>
   11d6c:	movw	r1, #33191	; 0x81a7
   11d70:	ldrb	r0, [r4]
   11d74:	movt	r1, #2
   11d78:	ldrb	r1, [r1]
   11d7c:	add	r0, r1, r0
   11d80:	movw	r1, #33190	; 0x81a6
   11d84:	movt	r1, #2
   11d88:	ldrb	r1, [r1]
   11d8c:	add	r0, r0, r1
   11d90:	movw	r1, #33189	; 0x81a5
   11d94:	movt	r1, #2
   11d98:	ldrb	r1, [r1]
   11d9c:	add	r0, r0, r1
   11da0:	movw	r1, #33193	; 0x81a9
   11da4:	movt	r1, #2
   11da8:	ldrb	r1, [r1]
   11dac:	add	r0, r0, r1
   11db0:	cmp	r0, #1
   11db4:	bne	11dc8 <__assert_fail@plt+0x7d8>
   11db8:	ldr	r1, [sp, #52]	; 0x34
   11dbc:	mov	r0, #1
   11dc0:	str	r0, [r1]
   11dc4:	b	11e2c <__assert_fail@plt+0x83c>
   11dc8:	ldr	r0, [sp, #52]	; 0x34
   11dcc:	movw	r8, #30626	; 0x77a2
   11dd0:	mov	r5, r9
   11dd4:	movt	r8, #1
   11dd8:	add	r6, r0, #8
   11ddc:	ldr	r4, [r7]
   11de0:	cmp	r4, #0
   11de4:	beq	11e0c <__assert_fail@plt+0x81c>
   11de8:	mov	r0, r4
   11dec:	mov	r1, r8
   11df0:	bl	112f0 <strcmp@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11e0c <__assert_fail@plt+0x81c>
   11dfc:	mov	r0, r4
   11e00:	mov	r1, r6
   11e04:	bl	16ed0 <_obstack_memory_used@@Base+0x6f4>
   11e08:	b	11e18 <__assert_fail@plt+0x828>
   11e0c:	mov	r0, #0
   11e10:	mov	r1, r6
   11e14:	bl	16ee0 <_obstack_memory_used@@Base+0x704>
   11e18:	str	r0, [r6, #-8]
   11e1c:	add	r7, r7, #4
   11e20:	subs	r5, r5, #1
   11e24:	add	r6, r6, #112	; 0x70
   11e28:	bne	11ddc <__assert_fail@plt+0x7ec>
   11e2c:	mov	r4, #1
   11e30:	cmp	r9, #0
   11e34:	mov	r5, #1
   11e38:	beq	11ef0 <__assert_fail@plt+0x900>
   11e3c:	ldr	r0, [sp, #52]	; 0x34
   11e40:	mov	r5, #1
   11e44:	ldr	r2, [r0]
   11e48:	cmp	r2, #0
   11e4c:	bgt	11ef0 <__assert_fail@plt+0x900>
   11e50:	ldr	r1, [sp, #52]	; 0x34
   11e54:	sub	r0, r9, #1
   11e58:	mov	r7, #0
   11e5c:	mov	r8, #1
   11e60:	mov	r6, #0
   11e64:	add	r1, r1, #112	; 0x70
   11e68:	cmp	r2, #0
   11e6c:	bne	11e94 <__assert_fail@plt+0x8a4>
   11e70:	ldr	r2, [r1, #-88]	; 0xffffffa8
   11e74:	and	r2, r2, #61440	; 0xf000
   11e78:	cmp	r2, #32768	; 0x8000
   11e7c:	bne	11e90 <__assert_fail@plt+0x8a0>
   11e80:	ldrd	r2, [r1, #-56]	; 0xffffffc8
   11e84:	adds	r7, r2, r7
   11e88:	adc	r6, r3, r6
   11e8c:	b	11e94 <__assert_fail@plt+0x8a4>
   11e90:	mov	r8, #7
   11e94:	cmp	r0, #0
   11e98:	beq	11ea8 <__assert_fail@plt+0x8b8>
   11e9c:	ldr	r2, [r1], #112	; 0x70
   11ea0:	sub	r0, r0, #1
   11ea4:	b	11e68 <__assert_fail@plt+0x878>
   11ea8:	subs	r0, r7, #10
   11eac:	mov	r5, #1
   11eb0:	sbcs	r0, r6, #0
   11eb4:	bcc	11ee8 <__assert_fail@plt+0x8f8>
   11eb8:	mov	r5, #1
   11ebc:	mov	r0, r7
   11ec0:	mov	r1, r6
   11ec4:	mov	r2, #10
   11ec8:	mov	r3, #0
   11ecc:	bl	16ce0 <_obstack_memory_used@@Base+0x504>
   11ed0:	rsbs	r2, r7, #99	; 0x63
   11ed4:	add	r5, r5, #1
   11ed8:	mov	r7, r0
   11edc:	rscs	r2, r6, #0
   11ee0:	mov	r6, r1
   11ee4:	bcc	11ebc <__assert_fail@plt+0x8cc>
   11ee8:	cmp	r5, r8
   11eec:	movlt	r5, r8
   11ef0:	movw	r0, #33244	; 0x81dc
   11ef4:	add	r1, sp, #56	; 0x38
   11ef8:	movt	r0, #2
   11efc:	str	r5, [r0]
   11f00:	ldr	r5, [sp, #48]	; 0x30
   11f04:	mov	r0, r5
   11f08:	bl	13440 <__assert_fail@plt+0x1e50>
   11f0c:	ldr	r6, [sp, #44]	; 0x2c
   11f10:	cmp	r0, #0
   11f14:	beq	12190 <__assert_fail@plt+0xba0>
   11f18:	mov	sl, r0
   11f1c:	mov	r8, #1
   11f20:	mov	r7, #0
   11f24:	cmp	r6, #0
   11f28:	mov	r0, #0
   11f2c:	beq	11fa8 <__assert_fail@plt+0x9b8>
   11f30:	movw	r1, #30626	; 0x77a2
   11f34:	mov	r0, r6
   11f38:	movt	r1, #1
   11f3c:	bl	112f0 <strcmp@plt>
   11f40:	cmp	r0, #0
   11f44:	mov	r0, #0
   11f48:	bne	11fa8 <__assert_fail@plt+0x9b8>
   11f4c:	movw	r1, #30626	; 0x77a2
   11f50:	mov	r0, sl
   11f54:	movt	r1, #1
   11f58:	bl	112f0 <strcmp@plt>
   11f5c:	cmp	r0, #0
   11f60:	mov	r0, #0
   11f64:	bne	11fa8 <__assert_fail@plt+0x9b8>
   11f68:	movw	r1, #29721	; 0x7419
   11f6c:	mov	r0, #0
   11f70:	mov	r2, #5
   11f74:	movt	r1, #1
   11f78:	bl	11374 <dcgettext@plt>
   11f7c:	mov	r5, r0
   11f80:	mov	r0, #4
   11f84:	mov	r1, sl
   11f88:	bl	15174 <__assert_fail@plt+0x3b84>
   11f8c:	mov	r2, r5
   11f90:	ldr	r5, [sp, #48]	; 0x30
   11f94:	mov	r3, r0
   11f98:	mov	r0, #0
   11f9c:	mov	r1, #0
   11fa0:	bl	11410 <error@plt>
   11fa4:	mov	r0, #1
   11fa8:	ldrb	r1, [sl]
   11fac:	cmp	r1, #0
   11fb0:	beq	12074 <__assert_fail@plt+0xa84>
   11fb4:	mov	r4, #0
   11fb8:	cmp	r0, #0
   11fbc:	bne	12154 <__assert_fail@plt+0xb64>
   11fc0:	cmp	r9, #0
   11fc4:	ldr	r1, [sp, #52]	; 0x34
   11fc8:	mov	r0, r9
   11fcc:	movne	r0, r7
   11fd0:	rsb	r0, r0, r0, lsl #3
   11fd4:	add	r5, r1, r0, lsl #4
   11fd8:	movw	r1, #30626	; 0x77a2
   11fdc:	mov	r0, sl
   11fe0:	movt	r1, #1
   11fe4:	bl	112f0 <strcmp@plt>
   11fe8:	cmp	r0, #0
   11fec:	beq	1211c <__assert_fail@plt+0xb2c>
   11ff0:	mov	r0, sl
   11ff4:	mov	r1, #0
   11ff8:	bl	1141c <open64@plt>
   11ffc:	cmn	r0, #1
   12000:	beq	12038 <__assert_fail@plt+0xa48>
   12004:	mov	r6, r0
   12008:	mov	r0, #0
   1200c:	mov	r1, sl
   12010:	mov	r2, r5
   12014:	str	r0, [sp]
   12018:	str	r0, [sp, #4]
   1201c:	mov	r0, r6
   12020:	bl	126bc <__assert_fail@plt+0x10cc>
   12024:	mov	r5, r0
   12028:	mov	r0, r6
   1202c:	bl	115d8 <close@plt>
   12030:	cmp	r0, #0
   12034:	beq	1206c <__assert_fail@plt+0xa7c>
   12038:	bl	114dc <__errno_location@plt>
   1203c:	ldr	r6, [r0]
   12040:	mov	r0, #0
   12044:	mov	r1, #3
   12048:	mov	r2, sl
   1204c:	mov	r5, #0
   12050:	bl	15318 <__assert_fail@plt+0x3d28>
   12054:	movw	r2, #30524	; 0x773c
   12058:	mov	r3, r0
   1205c:	mov	r0, #0
   12060:	mov	r1, r6
   12064:	movt	r2, #1
   12068:	bl	11410 <error@plt>
   1206c:	ldr	r6, [sp, #44]	; 0x2c
   12070:	b	1214c <__assert_fail@plt+0xb5c>
   12074:	cmp	r6, #0
   12078:	beq	120e8 <__assert_fail@plt+0xaf8>
   1207c:	mov	r0, r5
   12080:	bl	134ec <__assert_fail@plt+0x1efc>
   12084:	mov	r5, r0
   12088:	mov	r0, #0
   1208c:	mov	r1, #3
   12090:	mov	r2, r6
   12094:	mov	r4, #0
   12098:	bl	15318 <__assert_fail@plt+0x3d28>
   1209c:	movw	r1, #29784	; 0x7458
   120a0:	mov	r6, r0
   120a4:	mov	r0, #0
   120a8:	mov	r2, #5
   120ac:	movt	r1, #1
   120b0:	bl	11374 <dcgettext@plt>
   120b4:	movw	r2, #29814	; 0x7476
   120b8:	str	r5, [sp]
   120bc:	mov	r3, r6
   120c0:	ldr	r5, [sp, #48]	; 0x30
   120c4:	ldr	r6, [sp, #44]	; 0x2c
   120c8:	str	r0, [sp, #4]
   120cc:	mov	r0, #0
   120d0:	mov	r1, #0
   120d4:	movt	r2, #1
   120d8:	b	12114 <__assert_fail@plt+0xb24>
   120dc:	nop	{0}
   120e0:	andeq	r0, r0, r0
   120e4:	cmnmi	r4, r0
   120e8:	movw	r1, #29784	; 0x7458
   120ec:	mov	r0, #0
   120f0:	mov	r2, #5
   120f4:	mov	r4, #0
   120f8:	movt	r1, #1
   120fc:	bl	11374 <dcgettext@plt>
   12100:	movw	r2, #30524	; 0x773c
   12104:	mov	r3, r0
   12108:	mov	r0, #0
   1210c:	mov	r1, #0
   12110:	movt	r2, #1
   12114:	bl	11410 <error@plt>
   12118:	b	12154 <__assert_fail@plt+0xb64>
   1211c:	movw	r0, #33248	; 0x81e0
   12120:	mov	r1, #1
   12124:	mov	r2, r5
   12128:	movt	r0, #2
   1212c:	strb	r1, [r0]
   12130:	mvn	r0, #0
   12134:	mov	r1, sl
   12138:	str	r0, [sp]
   1213c:	str	r0, [sp, #4]
   12140:	mov	r0, #0
   12144:	bl	126bc <__assert_fail@plt+0x10cc>
   12148:	mov	r5, r0
   1214c:	and	r4, r8, r5
   12150:	ldr	r5, [sp, #48]	; 0x30
   12154:	cmp	r9, #0
   12158:	bne	12168 <__assert_fail@plt+0xb78>
   1215c:	ldr	r0, [sp, #52]	; 0x34
   12160:	mov	r1, #1
   12164:	str	r1, [r0]
   12168:	mov	r0, r5
   1216c:	add	r1, sp, #56	; 0x38
   12170:	bl	13440 <__assert_fail@plt+0x1e50>
   12174:	cmp	r4, #0
   12178:	mov	sl, r0
   1217c:	add	r7, r7, #1
   12180:	movwne	r4, #1
   12184:	cmp	r0, #0
   12188:	mov	r8, r4
   1218c:	bne	11f24 <__assert_fail@plt+0x934>
   12190:	ldr	r0, [sp, #56]	; 0x38
   12194:	cmp	r0, #2
   12198:	beq	122f0 <__assert_fail@plt+0xd00>
   1219c:	cmp	r0, #4
   121a0:	bne	123fc <__assert_fail@plt+0xe0c>
   121a4:	bl	114dc <__errno_location@plt>
   121a8:	movw	r1, #29634	; 0x73c2
   121ac:	ldr	r6, [r0]
   121b0:	mov	r0, #0
   121b4:	mov	r2, #5
   121b8:	mov	r4, #0
   121bc:	movt	r1, #1
   121c0:	bl	11374 <dcgettext@plt>
   121c4:	ldr	r2, [sp, #44]	; 0x2c
   121c8:	mov	r5, r0
   121cc:	mov	r0, #0
   121d0:	mov	r1, #3
   121d4:	bl	15318 <__assert_fail@plt+0x3d28>
   121d8:	mov	r3, r0
   121dc:	mov	r0, #0
   121e0:	mov	r1, r6
   121e4:	mov	r2, r5
   121e8:	bl	11410 <error@plt>
   121ec:	ldr	r5, [sp, #48]	; 0x30
   121f0:	ldr	r6, [sp, #40]	; 0x28
   121f4:	cmp	r6, #0
   121f8:	beq	12204 <__assert_fail@plt+0xc14>
   121fc:	add	r0, sp, #164	; 0xa4
   12200:	bl	15678 <__assert_fail@plt+0x4088>
   12204:	mov	r0, r5
   12208:	bl	134ec <__assert_fail@plt+0x1efc>
   1220c:	cmp	r0, #2
   12210:	bcc	122a8 <__assert_fail@plt+0xcb8>
   12214:	movw	r0, #33224	; 0x81c8
   12218:	mov	r2, #5
   1221c:	movt	r0, #2
   12220:	ldr	r1, [r0]
   12224:	ldr	r0, [r0, #4]
   12228:	str	r0, [sp, #44]	; 0x2c
   1222c:	movw	r0, #33232	; 0x81d0
   12230:	str	r1, [sp, #40]	; 0x28
   12234:	movt	r0, #2
   12238:	ldr	r1, [r0]
   1223c:	ldr	r0, [r0, #4]
   12240:	str	r0, [sp, #36]	; 0x24
   12244:	movw	r0, #33216	; 0x81c0
   12248:	str	r1, [sp, #32]
   1224c:	movw	r1, #29825	; 0x7481
   12250:	movt	r0, #2
   12254:	movt	r1, #1
   12258:	ldm	r0, {r5, r7}
   1225c:	movw	r0, #33208	; 0x81b8
   12260:	movt	r0, #2
   12264:	ldm	r0, {r6, r9}
   12268:	movw	r0, #33200	; 0x81b0
   1226c:	movt	r0, #2
   12270:	ldm	r0, {r8, sl}
   12274:	mov	r0, #0
   12278:	bl	11374 <dcgettext@plt>
   1227c:	add	r3, sp, #32
   12280:	str	r0, [sp, #24]
   12284:	str	r5, [sp]
   12288:	ldr	r5, [sp, #48]	; 0x30
   1228c:	str	r7, [sp, #4]
   12290:	str	r6, [sp, #8]
   12294:	str	r9, [sp, #12]
   12298:	str	r8, [sp, #16]
   1229c:	str	sl, [sp, #20]
   122a0:	ldm	r3, {r0, r1, r2, r3}
   122a4:	bl	124f4 <__assert_fail@plt+0xf04>
   122a8:	mov	r0, r5
   122ac:	bl	13510 <__assert_fail@plt+0x1f20>
   122b0:	ldr	r0, [sp, #52]	; 0x34
   122b4:	bl	1377c <__assert_fail@plt+0x218c>
   122b8:	movw	r0, #33248	; 0x81e0
   122bc:	movt	r0, #2
   122c0:	ldrb	r0, [r0]
   122c4:	cmp	r0, #1
   122c8:	bne	122dc <__assert_fail@plt+0xcec>
   122cc:	mov	r0, #0
   122d0:	bl	115d8 <close@plt>
   122d4:	cmp	r0, #0
   122d8:	bne	124a4 <__assert_fail@plt+0xeb4>
   122dc:	eor	r0, r4, #1
   122e0:	sub	sp, fp, #56	; 0x38
   122e4:	vpop	{d8-d10}
   122e8:	add	sp, sp, #4
   122ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122f0:	cmp	r6, #0
   122f4:	bne	121f0 <__assert_fail@plt+0xc00>
   122f8:	ldr	r6, [sp, #40]	; 0x28
   122fc:	eors	r0, r4, #1
   12300:	bne	121f4 <__assert_fail@plt+0xc04>
   12304:	mov	r0, r5
   12308:	bl	134ec <__assert_fail@plt+0x1efc>
   1230c:	cmp	r0, #0
   12310:	bne	121f4 <__assert_fail@plt+0xc04>
   12314:	movw	r1, #33248	; 0x81e0
   12318:	ldr	r2, [sp, #52]	; 0x34
   1231c:	mov	r0, #1
   12320:	movt	r1, #2
   12324:	strb	r0, [r1]
   12328:	mvn	r0, #0
   1232c:	mov	r1, #0
   12330:	str	r0, [sp]
   12334:	str	r0, [sp, #4]
   12338:	mov	r0, #0
   1233c:	bl	126bc <__assert_fail@plt+0x10cc>
   12340:	and	r4, r4, r0
   12344:	b	121f4 <__assert_fail@plt+0xc04>
   12348:	add	r6, sp, #164	; 0xa4
   1234c:	mov	r0, r6
   12350:	bl	155f8 <__assert_fail@plt+0x4008>
   12354:	mov	r0, r5
   12358:	mov	r1, r6
   1235c:	bl	156ac <__assert_fail@plt+0x40bc>
   12360:	cmp	r0, #0
   12364:	beq	124bc <__assert_fail@plt+0xecc>
   12368:	mov	r0, r5
   1236c:	bl	13684 <__assert_fail@plt+0x2094>
   12370:	cmp	r0, #0
   12374:	bne	124bc <__assert_fail@plt+0xecc>
   12378:	ldr	r7, [sp, #168]	; 0xa8
   1237c:	ldr	r9, [sp, #164]	; 0xa4
   12380:	mov	r0, r7
   12384:	bl	133d8 <__assert_fail@plt+0x1de8>
   12388:	mov	r1, #1
   1238c:	b	11d34 <__assert_fail@plt+0x744>
   12390:	cmn	r0, #3
   12394:	bne	123ec <__assert_fail@plt+0xdfc>
   12398:	movw	r0, #33064	; 0x8128
   1239c:	movw	r2, #29491	; 0x7333
   123a0:	mov	r1, #0
   123a4:	movw	r7, #29480	; 0x7328
   123a8:	movt	r0, #2
   123ac:	movt	r2, #1
   123b0:	str	r1, [sp, #8]
   123b4:	movw	r1, #29417	; 0x72e9
   123b8:	movt	r7, #1
   123bc:	movt	r1, #1
   123c0:	ldr	r3, [r0]
   123c4:	movw	r0, #33172	; 0x8194
   123c8:	str	r2, [sp, #4]
   123cc:	movw	r2, #29466	; 0x731a
   123d0:	str	r7, [sp]
   123d4:	movt	r0, #2
   123d8:	movt	r2, #1
   123dc:	ldr	r0, [r0]
   123e0:	bl	15d3c <__assert_fail@plt+0x474c>
   123e4:	mov	r0, #0
   123e8:	bl	11488 <exit@plt>
   123ec:	cmn	r0, #2
   123f0:	bne	1249c <__assert_fail@plt+0xeac>
   123f4:	mov	r0, #0
   123f8:	bl	116f0 <__assert_fail@plt+0x100>
   123fc:	cmp	r0, #3
   12400:	bne	12408 <__assert_fail@plt+0xe18>
   12404:	bl	16270 <__assert_fail@plt+0x4c80>
   12408:	movw	r0, #29649	; 0x73d1
   1240c:	movw	r1, #29689	; 0x73f9
   12410:	movw	r3, #29698	; 0x7402
   12414:	movw	r2, #938	; 0x3aa
   12418:	movt	r0, #1
   1241c:	movt	r1, #1
   12420:	movt	r3, #1
   12424:	bl	115f0 <__assert_fail@plt>
   12428:	movw	r1, #29507	; 0x7343
   1242c:	mov	r0, #0
   12430:	mov	r2, #5
   12434:	movt	r1, #1
   12438:	bl	11374 <dcgettext@plt>
   1243c:	mov	r4, r0
   12440:	ldr	r0, [r7]
   12444:	ldr	r1, [r5, r0, lsl #2]
   12448:	mov	r0, #4
   1244c:	bl	15174 <__assert_fail@plt+0x3b84>
   12450:	mov	r3, r0
   12454:	mov	r0, #0
   12458:	mov	r1, #0
   1245c:	mov	r2, r4
   12460:	bl	11410 <error@plt>
   12464:	movw	r0, #33160	; 0x8188
   12468:	movw	r1, #29524	; 0x7354
   1246c:	mov	r2, #5
   12470:	movt	r0, #2
   12474:	movt	r1, #1
   12478:	ldr	r4, [r0]
   1247c:	mov	r0, #0
   12480:	bl	11374 <dcgettext@plt>
   12484:	movw	r2, #30816	; 0x7860
   12488:	mov	r3, r0
   1248c:	mov	r0, r4
   12490:	mov	r1, #1
   12494:	movt	r2, #1
   12498:	bl	1153c <__fprintf_chk@plt>
   1249c:	mov	r0, #1
   124a0:	bl	116f0 <__assert_fail@plt+0x100>
   124a4:	bl	114dc <__errno_location@plt>
   124a8:	ldr	r1, [r0]
   124ac:	movw	r2, #30626	; 0x77a2
   124b0:	mov	r0, #1
   124b4:	movt	r2, #1
   124b8:	bl	11410 <error@plt>
   124bc:	movw	r1, #29603	; 0x73a3
   124c0:	mov	r0, #0
   124c4:	mov	r2, #5
   124c8:	movt	r1, #1
   124cc:	bl	11374 <dcgettext@plt>
   124d0:	ldr	r1, [sp, #44]	; 0x2c
   124d4:	mov	r4, r0
   124d8:	mov	r0, #4
   124dc:	bl	15174 <__assert_fail@plt+0x3b84>
   124e0:	mov	r3, r0
   124e4:	mov	r0, #1
   124e8:	mov	r1, #0
   124ec:	mov	r2, r4
   124f0:	bl	11410 <error@plt>
   124f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   124f8:	add	fp, sp, #24
   124fc:	sub	sp, sp, #24
   12500:	mov	r7, r2
   12504:	movw	r2, #33192	; 0x81a8
   12508:	movw	r8, #30488	; 0x7718
   1250c:	movw	r9, #33244	; 0x81dc
   12510:	mov	r6, r3
   12514:	movt	r2, #2
   12518:	movt	r8, #1
   1251c:	movt	r9, #2
   12520:	ldrb	r2, [r2]
   12524:	cmp	r2, #1
   12528:	bne	12558 <__assert_fail@plt+0xf68>
   1252c:	ldr	r4, [r9]
   12530:	add	r2, sp, #3
   12534:	bl	13848 <__assert_fail@plt+0x2258>
   12538:	movw	r5, #30488	; 0x7718
   1253c:	mov	r3, r0
   12540:	mov	r0, #1
   12544:	mov	r2, r4
   12548:	movt	r5, #1
   1254c:	add	r1, r5, #1
   12550:	bl	11524 <__printf_chk@plt>
   12554:	b	1255c <__assert_fail@plt+0xf6c>
   12558:	add	r5, r8, #1
   1255c:	movw	r0, #33191	; 0x81a7
   12560:	movt	r0, #2
   12564:	ldrb	r0, [r0]
   12568:	cmp	r0, #1
   1256c:	bne	125a0 <__assert_fail@plt+0xfb0>
   12570:	ldr	r4, [r9]
   12574:	add	r2, sp, #3
   12578:	mov	r0, r7
   1257c:	mov	r1, r6
   12580:	bl	13848 <__assert_fail@plt+0x2258>
   12584:	mov	r3, r0
   12588:	mov	r0, #1
   1258c:	mov	r1, r5
   12590:	mov	r2, r4
   12594:	bl	11524 <__printf_chk@plt>
   12598:	movw	r5, #30488	; 0x7718
   1259c:	movt	r5, #1
   125a0:	movw	r0, #33190	; 0x81a6
   125a4:	movt	r0, #2
   125a8:	ldrb	r0, [r0]
   125ac:	cmp	r0, #1
   125b0:	bne	125e4 <__assert_fail@plt+0xff4>
   125b4:	ldr	r1, [fp, #12]
   125b8:	ldr	r0, [fp, #8]
   125bc:	ldr	r4, [r9]
   125c0:	add	r2, sp, #3
   125c4:	bl	13848 <__assert_fail@plt+0x2258>
   125c8:	mov	r3, r0
   125cc:	mov	r0, #1
   125d0:	mov	r1, r5
   125d4:	mov	r2, r4
   125d8:	bl	11524 <__printf_chk@plt>
   125dc:	movw	r5, #30488	; 0x7718
   125e0:	movt	r5, #1
   125e4:	movw	r0, #33189	; 0x81a5
   125e8:	movt	r0, #2
   125ec:	ldrb	r0, [r0]
   125f0:	cmp	r0, #1
   125f4:	bne	12624 <__assert_fail@plt+0x1034>
   125f8:	ldr	r1, [fp, #20]
   125fc:	ldr	r0, [fp, #16]
   12600:	ldr	r4, [r9]
   12604:	add	r2, sp, #3
   12608:	bl	13848 <__assert_fail@plt+0x2258>
   1260c:	mov	r3, r0
   12610:	mov	r0, #1
   12614:	mov	r1, r5
   12618:	mov	r2, r4
   1261c:	bl	11524 <__printf_chk@plt>
   12620:	b	12628 <__assert_fail@plt+0x1038>
   12624:	mov	r8, r5
   12628:	movw	r0, #33193	; 0x81a9
   1262c:	ldr	r5, [fp, #32]
   12630:	movt	r0, #2
   12634:	ldrb	r0, [r0]
   12638:	cmp	r0, #1
   1263c:	bne	12668 <__assert_fail@plt+0x1078>
   12640:	ldr	r1, [fp, #28]
   12644:	ldr	r0, [fp, #24]
   12648:	ldr	r4, [r9]
   1264c:	add	r2, sp, #3
   12650:	bl	13848 <__assert_fail@plt+0x2258>
   12654:	mov	r3, r0
   12658:	mov	r0, #1
   1265c:	mov	r1, r8
   12660:	mov	r2, r4
   12664:	bl	11524 <__printf_chk@plt>
   12668:	cmp	r5, #0
   1266c:	beq	126ac <__assert_fail@plt+0x10bc>
   12670:	mov	r0, r5
   12674:	mov	r1, #10
   12678:	bl	114c4 <strchr@plt>
   1267c:	cmp	r0, #0
   12680:	beq	12698 <__assert_fail@plt+0x10a8>
   12684:	mov	r0, #0
   12688:	mov	r1, #3
   1268c:	mov	r2, r5
   12690:	bl	15318 <__assert_fail@plt+0x3d28>
   12694:	mov	r5, r0
   12698:	movw	r1, #30523	; 0x773b
   1269c:	mov	r0, #1
   126a0:	mov	r2, r5
   126a4:	movt	r1, #1
   126a8:	bl	11524 <__printf_chk@plt>
   126ac:	mov	r0, #10
   126b0:	bl	115e4 <putchar_unlocked@plt>
   126b4:	sub	sp, fp, #24
   126b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   126bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c0:	add	fp, sp, #28
   126c4:	sub	sp, sp, #116	; 0x74
   126c8:	sub	sp, sp, #16384	; 0x4000
   126cc:	str	r0, [sp, #48]	; 0x30
   126d0:	mov	r9, r2
   126d4:	mov	r4, r1
   126d8:	cmp	r1, #0
   126dc:	mov	r0, r1
   126e0:	bne	126f8 <__assert_fail@plt+0x1108>
   126e4:	movw	r1, #30257	; 0x7631
   126e8:	mov	r0, #0
   126ec:	mov	r2, #5
   126f0:	movt	r1, #1
   126f4:	bl	11374 <dcgettext@plt>
   126f8:	str	r0, [sp, #32]
   126fc:	bl	113e0 <__ctype_get_mb_cur_max@plt>
   12700:	movw	r3, #33190	; 0x81a6
   12704:	cmp	r0, #1
   12708:	mov	r2, #0
   1270c:	movw	r7, #33192	; 0x81a8
   12710:	mov	r1, #0
   12714:	movt	r3, #2
   12718:	movwhi	r2, #1
   1271c:	cmp	r0, #2
   12720:	mov	r0, #0
   12724:	movt	r7, #2
   12728:	movwcc	r0, #1
   1272c:	ldrb	r3, [r3]
   12730:	and	r8, r2, r3
   12734:	movw	r2, #33189	; 0x81a5
   12738:	and	r0, r3, r0
   1273c:	movt	r2, #2
   12740:	ldrb	r2, [r2]
   12744:	orr	r0, r2, r0
   12748:	movw	r2, #33191	; 0x81a7
   1274c:	eor	r0, r0, #1
   12750:	movt	r2, #2
   12754:	orr	r6, r8, r0
   12758:	movw	r0, #33193	; 0x81a9
   1275c:	movt	r0, #2
   12760:	ldrb	r2, [r2]
   12764:	tst	r6, #1
   12768:	ldrb	r0, [r0]
   1276c:	orr	r5, r2, r0
   12770:	ldrbeq	r0, [r7]
   12774:	cmpeq	r0, #0
   12778:	beq	127a8 <__assert_fail@plt+0x11b8>
   1277c:	mov	r0, #2
   12780:	mov	r1, #0
   12784:	mov	r2, #0
   12788:	mov	r3, #0
   1278c:	str	r0, [sp, #8]
   12790:	ldr	r0, [sp, #48]	; 0x30
   12794:	str	r1, [sp]
   12798:	str	r1, [sp, #4]
   1279c:	bl	13644 <__assert_fail@plt+0x2054>
   127a0:	ldrb	r1, [r7]
   127a4:	b	127b0 <__assert_fail@plt+0x11c0>
   127a8:	tst	r5, #1
   127ac:	bne	1277c <__assert_fail@plt+0x118c>
   127b0:	orr	r0, r5, r1
   127b4:	str	r4, [sp, #40]	; 0x28
   127b8:	str	r8, [sp, #36]	; 0x24
   127bc:	orr	r0, r6, r0
   127c0:	tst	r0, #1
   127c4:	beq	12b9c <__assert_fail@plt+0x15ac>
   127c8:	orr	r0, r8, r5
   127cc:	tst	r0, #1
   127d0:	beq	12c04 <__assert_fail@plt+0x1614>
   127d4:	bl	113e0 <__ctype_get_mb_cur_max@plt>
   127d8:	cmp	r0, #1
   127dc:	bls	12d10 <__assert_fail@plt+0x1720>
   127e0:	mov	r0, #0
   127e4:	mov	r1, #0
   127e8:	mov	r8, #0
   127ec:	mov	r4, #0
   127f0:	mov	r7, #0
   127f4:	str	r0, [sp, #100]	; 0x64
   127f8:	str	r0, [sp, #96]	; 0x60
   127fc:	mov	r0, #0
   12800:	str	r1, [sp, #44]	; 0x2c
   12804:	str	r0, [sp, #52]	; 0x34
   12808:	mov	r0, #0
   1280c:	str	r0, [sp, #60]	; 0x3c
   12810:	mov	r0, #0
   12814:	str	r0, [sp, #56]	; 0x38
   12818:	mov	r0, #0
   1281c:	str	r0, [sp, #88]	; 0x58
   12820:	mov	r0, #0
   12824:	str	r0, [sp, #84]	; 0x54
   12828:	mov	r0, #0
   1282c:	str	r0, [sp, #76]	; 0x4c
   12830:	mov	r0, #0
   12834:	str	r0, [sp, #72]	; 0x48
   12838:	mov	r0, #0
   1283c:	str	r0, [sp, #80]	; 0x50
   12840:	mov	r0, #0
   12844:	str	r0, [sp, #68]	; 0x44
   12848:	mov	r0, #0
   1284c:	str	r0, [sp, #64]	; 0x40
   12850:	mov	r5, #0
   12854:	add	r0, sp, #104	; 0x68
   12858:	rsb	r2, r5, #16384	; 0x4000
   1285c:	add	r1, r0, r5
   12860:	ldr	r0, [sp, #48]	; 0x30
   12864:	bl	15920 <__assert_fail@plt+0x4330>
   12868:	cmp	r0, #0
   1286c:	beq	13094 <__assert_fail@plt+0x1aa4>
   12870:	cmn	r0, #1
   12874:	beq	130a0 <__assert_fail@plt+0x1ab0>
   12878:	ldr	r1, [sp, #44]	; 0x2c
   1287c:	add	r9, r0, r5
   12880:	add	sl, sp, #104	; 0x68
   12884:	adds	r1, r1, r0
   12888:	ldr	r0, [sp, #52]	; 0x34
   1288c:	str	r1, [sp, #44]	; 0x2c
   12890:	adc	r0, r0, #0
   12894:	str	r0, [sp, #52]	; 0x34
   12898:	tst	r7, #1
   1289c:	bne	128d8 <__assert_fail@plt+0x12e8>
   128a0:	ldrb	r0, [sl]
   128a4:	movw	r2, #30528	; 0x7740
   128a8:	mov	r3, #1
   128ac:	movt	r2, #1
   128b0:	ubfx	r1, r0, #5, #3
   128b4:	ldr	r1, [r2, r1, lsl #2]
   128b8:	and	r2, r0, #31
   128bc:	tst	r1, r3, lsl r2
   128c0:	beq	128d8 <__assert_fail@plt+0x12e8>
   128c4:	str	r0, [sp, #92]	; 0x5c
   128c8:	mov	r6, #1
   128cc:	mov	r7, #0
   128d0:	mov	r1, #0
   128d4:	b	12928 <__assert_fail@plt+0x1338>
   128d8:	ldr	r5, [sp, #96]	; 0x60
   128dc:	ldr	r7, [sp, #100]	; 0x64
   128e0:	add	r0, sp, #92	; 0x5c
   128e4:	mov	r1, sl
   128e8:	mov	r2, r9
   128ec:	add	r3, sp, #96	; 0x60
   128f0:	bl	13954 <__assert_fail@plt+0x2364>
   128f4:	cmn	r0, #1
   128f8:	beq	12978 <__assert_fail@plt+0x1388>
   128fc:	mov	r6, r0
   12900:	cmn	r0, #2
   12904:	beq	12b60 <__assert_fail@plt+0x1570>
   12908:	add	r0, sp, #96	; 0x60
   1290c:	bl	11368 <mbsinit@plt>
   12910:	clz	r0, r0
   12914:	cmp	r6, #0
   12918:	lsr	r7, r0, #5
   1291c:	beq	129a8 <__assert_fail@plt+0x13b8>
   12920:	ldr	r0, [sp, #92]	; 0x5c
   12924:	mov	r1, #1
   12928:	sub	r2, r0, #9
   1292c:	mov	r3, r4
   12930:	cmp	r2, #4
   12934:	bhi	12988 <__assert_fail@plt+0x1398>
   12938:	add	r0, pc, #0
   1293c:	ldr	pc, [r0, r2, lsl #2]
   12940:	andeq	r2, r1, r4, asr r9
   12944:			; <UNDEFINED> instruction: 0x000129b8
   12948:	andeq	r2, r1, r4, lsl #20
   1294c:	ldrdeq	r2, [r1], -r0
   12950:	ldrdeq	r2, [r1], -r0
   12954:	ldr	r1, [sp, #68]	; 0x44
   12958:	and	r0, r1, #7
   1295c:	subs	r0, r1, r0
   12960:	ldr	r1, [sp, #64]	; 0x40
   12964:	sbc	r1, r1, #0
   12968:	adds	r0, r0, #8
   1296c:	str	r0, [sp, #68]	; 0x44
   12970:	adc	r0, r1, #0
   12974:	b	12a00 <__assert_fail@plt+0x1410>
   12978:	sub	r9, r9, #1
   1297c:	add	sl, sl, #1
   12980:	mov	r7, #1
   12984:	b	12a50 <__assert_fail@plt+0x1460>
   12988:	cmp	r0, #32
   1298c:	bne	12a5c <__assert_fail@plt+0x146c>
   12990:	ldr	r0, [sp, #68]	; 0x44
   12994:	adds	r0, r0, #1
   12998:	str	r0, [sp, #68]	; 0x44
   1299c:	ldr	r0, [sp, #64]	; 0x40
   129a0:	adc	r0, r0, #0
   129a4:	b	12a00 <__assert_fail@plt+0x1410>
   129a8:	mov	r0, #0
   129ac:	mov	r6, #1
   129b0:	str	r0, [sp, #92]	; 0x5c
   129b4:	b	12a64 <__assert_fail@plt+0x1474>
   129b8:	ldr	r0, [sp, #60]	; 0x3c
   129bc:	adds	r0, r0, #1
   129c0:	str	r0, [sp, #60]	; 0x3c
   129c4:	ldr	r0, [sp, #56]	; 0x38
   129c8:	adc	r0, r0, #0
   129cc:	str	r0, [sp, #56]	; 0x38
   129d0:	ldr	r1, [sp, #68]	; 0x44
   129d4:	ldr	r2, [sp, #64]	; 0x40
   129d8:	subs	r0, r8, r1
   129dc:	sbcs	r0, r3, r2
   129e0:	mov	r0, #0
   129e4:	movwcc	r0, #1
   129e8:	cmp	r0, #0
   129ec:	mov	r0, #0
   129f0:	str	r0, [sp, #68]	; 0x44
   129f4:	movne	r3, r2
   129f8:	movne	r8, r1
   129fc:	mov	r0, #0
   12a00:	str	r0, [sp, #64]	; 0x40
   12a04:	ldr	r0, [sp, #80]	; 0x50
   12a08:	ldr	r1, [sp, #76]	; 0x4c
   12a0c:	mov	r4, r3
   12a10:	and	r0, r0, #1
   12a14:	adds	r1, r1, r0
   12a18:	ldr	r0, [sp, #72]	; 0x48
   12a1c:	str	r1, [sp, #76]	; 0x4c
   12a20:	adc	r0, r0, #0
   12a24:	str	r0, [sp, #72]	; 0x48
   12a28:	mov	r0, #0
   12a2c:	str	r0, [sp, #80]	; 0x50
   12a30:	ldr	r0, [sp, #88]	; 0x58
   12a34:	ldr	r1, [sp, #84]	; 0x54
   12a38:	sub	r9, r9, r6
   12a3c:	add	sl, sl, r6
   12a40:	adds	r0, r0, #1
   12a44:	adc	r1, r1, #0
   12a48:	str	r0, [sp, #88]	; 0x58
   12a4c:	str	r1, [sp, #84]	; 0x54
   12a50:	cmp	r9, #0
   12a54:	bne	12898 <__assert_fail@plt+0x12a8>
   12a58:	b	12850 <__assert_fail@plt+0x1260>
   12a5c:	cmp	r1, #0
   12a60:	beq	12af8 <__assert_fail@plt+0x1508>
   12a64:	bl	113bc <iswprint@plt>
   12a68:	cmp	r0, #0
   12a6c:	beq	12a30 <__assert_fail@plt+0x1440>
   12a70:	movw	r0, #33193	; 0x81a9
   12a74:	movt	r0, #2
   12a78:	ldrb	r0, [r0]
   12a7c:	cmp	r0, #1
   12a80:	bne	12aa8 <__assert_fail@plt+0x14b8>
   12a84:	ldr	r0, [sp, #92]	; 0x5c
   12a88:	bl	11320 <wcwidth@plt>
   12a8c:	ldr	r1, [sp, #68]	; 0x44
   12a90:	bic	r0, r0, r0, asr #31
   12a94:	adds	r1, r1, r0
   12a98:	ldr	r0, [sp, #64]	; 0x40
   12a9c:	str	r1, [sp, #68]	; 0x44
   12aa0:	adc	r0, r0, #0
   12aa4:	str	r0, [sp, #64]	; 0x40
   12aa8:	ldr	r0, [sp, #92]	; 0x5c
   12aac:	bl	114a0 <iswspace@plt>
   12ab0:	cmp	r0, #0
   12ab4:	beq	12ac0 <__assert_fail@plt+0x14d0>
   12ab8:	mov	r3, r4
   12abc:	b	12a04 <__assert_fail@plt+0x1414>
   12ac0:	movw	r0, #33188	; 0x81a4
   12ac4:	movt	r0, #2
   12ac8:	ldrb	r0, [r0]
   12acc:	cmp	r0, #0
   12ad0:	bne	12b58 <__assert_fail@plt+0x1568>
   12ad4:	ldr	r0, [sp, #92]	; 0x5c
   12ad8:	movw	r1, #8238	; 0x202e
   12adc:	cmp	r0, r1
   12ae0:	bgt	12b3c <__assert_fail@plt+0x154c>
   12ae4:	cmp	r0, #160	; 0xa0
   12ae8:	mov	r3, r4
   12aec:	beq	12a04 <__assert_fail@plt+0x1414>
   12af0:	movw	r1, #8199	; 0x2007
   12af4:	b	12b50 <__assert_fail@plt+0x1560>
   12af8:	bl	1147c <__ctype_b_loc@plt>
   12afc:	ldrb	r1, [sl]
   12b00:	ldr	r0, [r0]
   12b04:	add	r0, r0, r1, lsl #1
   12b08:	ldrh	r0, [r0]
   12b0c:	tst	r0, #16384	; 0x4000
   12b10:	beq	12a30 <__assert_fail@plt+0x1440>
   12b14:	ldr	r1, [sp, #68]	; 0x44
   12b18:	mov	r3, r4
   12b1c:	adds	r1, r1, #1
   12b20:	str	r1, [sp, #68]	; 0x44
   12b24:	ldr	r1, [sp, #64]	; 0x40
   12b28:	adc	r1, r1, #0
   12b2c:	tst	r0, #8192	; 0x2000
   12b30:	str	r1, [sp, #64]	; 0x40
   12b34:	bne	12a04 <__assert_fail@plt+0x1414>
   12b38:	b	12b58 <__assert_fail@plt+0x1568>
   12b3c:	movw	r1, #8239	; 0x202f
   12b40:	mov	r3, r4
   12b44:	cmp	r0, r1
   12b48:	beq	12a04 <__assert_fail@plt+0x1414>
   12b4c:	movw	r1, #8288	; 0x2060
   12b50:	cmp	r0, r1
   12b54:	beq	12a04 <__assert_fail@plt+0x1414>
   12b58:	mov	r0, #1
   12b5c:	b	12a2c <__assert_fail@plt+0x143c>
   12b60:	str	r5, [sp, #96]	; 0x60
   12b64:	str	r7, [sp, #100]	; 0x64
   12b68:	mov	r7, #1
   12b6c:	cmp	r9, #0
   12b70:	mov	r5, #0
   12b74:	beq	12854 <__assert_fail@plt+0x1264>
   12b78:	cmp	r9, #16384	; 0x4000
   12b7c:	add	r0, sp, #104	; 0x68
   12b80:	addeq	sl, sl, #1
   12b84:	movweq	r9, #16383	; 0x3fff
   12b88:	mov	r1, sl
   12b8c:	mov	r2, r9
   12b90:	bl	1132c <memmove@plt>
   12b94:	mov	r5, r9
   12b98:	b	12854 <__assert_fail@plt+0x1264>
   12b9c:	ldr	r0, [r9]
   12ba0:	cmp	r0, #1
   12ba4:	blt	12bb8 <__assert_fail@plt+0x15c8>
   12ba8:	ldr	r0, [sp, #48]	; 0x30
   12bac:	add	r1, r9, #8
   12bb0:	bl	16ee0 <_obstack_memory_used@@Base+0x704>
   12bb4:	str	r0, [r9]
   12bb8:	mov	r5, #0
   12bbc:	cmp	r0, #0
   12bc0:	mov	r7, #0
   12bc4:	mov	sl, #0
   12bc8:	bne	12fd0 <__assert_fail@plt+0x19e0>
   12bcc:	ldr	r0, [r9, #24]
   12bd0:	and	r0, r0, #53248	; 0xd000
   12bd4:	orr	r0, r0, #8192	; 0x2000
   12bd8:	cmp	r0, #40960	; 0xa000
   12bdc:	bne	12fc8 <__assert_fail@plt+0x19d8>
   12be0:	ldr	r0, [r9, #60]	; 0x3c
   12be4:	cmp	r0, #0
   12be8:	bmi	12fc8 <__assert_fail@plt+0x19d8>
   12bec:	ldr	r8, [fp, #12]
   12bf0:	ldr	r6, [r9, #56]	; 0x38
   12bf4:	cmn	r8, #1
   12bf8:	ble	132c4 <__assert_fail@plt+0x1cd4>
   12bfc:	ldr	r3, [fp, #8]
   12c00:	b	132e4 <__assert_fail@plt+0x1cf4>
   12c04:	mov	r0, #0
   12c08:	mov	r7, #0
   12c0c:	mov	r4, #0
   12c10:	mov	r9, #0
   12c14:	mov	sl, #0
   12c18:	str	r0, [sp, #52]	; 0x34
   12c1c:	ldr	r0, [sp, #48]	; 0x30
   12c20:	add	r1, sp, #104	; 0x68
   12c24:	mov	r2, #16384	; 0x4000
   12c28:	bl	15920 <__assert_fail@plt+0x4330>
   12c2c:	cmp	r0, #0
   12c30:	beq	12f4c <__assert_fail@plt+0x195c>
   12c34:	mov	r6, r0
   12c38:	cmn	r0, #1
   12c3c:	beq	12f58 <__assert_fail@plt+0x1968>
   12c40:	ldr	r0, [sp, #52]	; 0x34
   12c44:	adds	r7, r7, r6
   12c48:	mov	r8, r7
   12c4c:	adc	r0, r0, #0
   12c50:	tst	r4, #1
   12c54:	str	r0, [sp, #52]	; 0x34
   12c58:	beq	12cac <__assert_fail@plt+0x16bc>
   12c5c:	add	r0, sp, #104	; 0x68
   12c60:	mov	r1, #10
   12c64:	add	r4, r0, r6
   12c68:	strb	r1, [r4]
   12c6c:	mov	r1, #10
   12c70:	bl	113b0 <rawmemchr@plt>
   12c74:	cmp	r0, r4
   12c78:	mov	r5, r9
   12c7c:	mov	r7, sl
   12c80:	bcs	12cdc <__assert_fail@plt+0x16ec>
   12c84:	mov	r5, r9
   12c88:	mov	r7, sl
   12c8c:	adds	r5, r5, #1
   12c90:	add	r0, r0, #1
   12c94:	mov	r1, #10
   12c98:	adc	r7, r7, #0
   12c9c:	bl	113b0 <rawmemchr@plt>
   12ca0:	cmp	r0, r4
   12ca4:	bcc	12c8c <__assert_fail@plt+0x169c>
   12ca8:	b	12cdc <__assert_fail@plt+0x16ec>
   12cac:	mov	r0, r6
   12cb0:	mov	r5, r9
   12cb4:	mov	r7, sl
   12cb8:	add	r1, sp, #104	; 0x68
   12cbc:	ldrb	r4, [r1], #1
   12cc0:	adds	r2, r5, #1
   12cc4:	adc	r3, r7, #0
   12cc8:	cmp	r4, #10
   12ccc:	moveq	r5, r2
   12cd0:	moveq	r7, r3
   12cd4:	subs	r0, r0, #1
   12cd8:	bne	12cbc <__assert_fail@plt+0x16cc>
   12cdc:	movw	r2, #34953	; 0x8889
   12ce0:	subs	r0, r5, r9
   12ce4:	mov	r4, #0
   12ce8:	mov	r9, r5
   12cec:	movt	r2, #34952	; 0x8888
   12cf0:	sbc	r1, r7, sl
   12cf4:	mov	sl, r7
   12cf8:	mov	r7, r8
   12cfc:	umull	r2, r3, r6, r2
   12d00:	rsbs	r0, r0, r3, lsr #3
   12d04:	rscs	r0, r1, #0
   12d08:	movwcs	r4, #1
   12d0c:	b	12c1c <__assert_fail@plt+0x162c>
   12d10:	mov	r0, #0
   12d14:	mov	r7, #0
   12d18:	add	r8, sp, #104	; 0x68
   12d1c:	mov	r6, #0
   12d20:	mov	r4, #0
   12d24:	mov	sl, #0
   12d28:	mov	r9, #0
   12d2c:	str	r0, [sp, #52]	; 0x34
   12d30:	mov	r0, #0
   12d34:	str	r0, [sp, #60]	; 0x3c
   12d38:	mov	r0, #0
   12d3c:	str	r0, [sp, #56]	; 0x38
   12d40:	mov	r0, #0
   12d44:	str	r0, [sp, #88]	; 0x58
   12d48:	mov	r0, #0
   12d4c:	str	r0, [sp, #80]	; 0x50
   12d50:	mov	r0, #0
   12d54:	str	r0, [sp, #84]	; 0x54
   12d58:	ldr	r0, [sp, #48]	; 0x30
   12d5c:	mov	r1, r8
   12d60:	mov	r2, #16384	; 0x4000
   12d64:	bl	15920 <__assert_fail@plt+0x4330>
   12d68:	cmp	r0, #0
   12d6c:	beq	13138 <__assert_fail@plt+0x1b48>
   12d70:	cmn	r0, #1
   12d74:	beq	13144 <__assert_fail@plt+0x1b54>
   12d78:	str	r7, [sp, #44]	; 0x2c
   12d7c:	mov	ip, r6
   12d80:	ldr	r3, [sp, #88]	; 0x58
   12d84:	ldr	r6, [sp, #80]	; 0x50
   12d88:	ldr	r7, [sp, #84]	; 0x54
   12d8c:	mov	r5, r0
   12d90:	mov	r2, r4
   12d94:	str	r0, [sp, #76]	; 0x4c
   12d98:	ldrb	r4, [r8], #1
   12d9c:	sub	r0, r4, #9
   12da0:	cmp	r0, #4
   12da4:	bhi	12ddc <__assert_fail@plt+0x17ec>
   12da8:	add	r1, pc, #0
   12dac:	ldr	pc, [r1, r0, lsl #2]
   12db0:	andeq	r2, r1, r4, asr #27
   12db4:	strdeq	r2, [r1], -r0
   12db8:	andeq	r2, r1, ip, lsr #28
   12dbc:	andeq	r2, r1, r8, lsl #28
   12dc0:	andeq	r2, r1, r8, lsl #28
   12dc4:	and	r0, sl, #7
   12dc8:	subs	r0, sl, r0
   12dcc:	sbc	r1, r9, #0
   12dd0:	adds	sl, r0, #8
   12dd4:	adc	r9, r1, #0
   12dd8:	b	12e2c <__assert_fail@plt+0x183c>
   12ddc:	cmp	r4, #32
   12de0:	bne	12e48 <__assert_fail@plt+0x1858>
   12de4:	adds	sl, sl, #1
   12de8:	adc	r9, r9, #0
   12dec:	b	12e2c <__assert_fail@plt+0x183c>
   12df0:	ldr	r0, [sp, #60]	; 0x3c
   12df4:	adds	r0, r0, #1
   12df8:	str	r0, [sp, #60]	; 0x3c
   12dfc:	ldr	r0, [sp, #56]	; 0x38
   12e00:	adc	r0, r0, #0
   12e04:	str	r0, [sp, #56]	; 0x38
   12e08:	subs	r0, ip, sl
   12e0c:	sbcs	r0, r3, r9
   12e10:	mov	r0, #0
   12e14:	movwcc	r0, #1
   12e18:	cmp	r0, #0
   12e1c:	movne	r3, r9
   12e20:	movne	ip, sl
   12e24:	mov	sl, #0
   12e28:	mov	r9, #0
   12e2c:	and	r0, r2, #1
   12e30:	mov	r2, #0
   12e34:	adds	r6, r6, r0
   12e38:	adc	r7, r7, #0
   12e3c:	subs	r5, r5, #1
   12e40:	bne	12d98 <__assert_fail@plt+0x17a8>
   12e44:	b	12f18 <__assert_fail@plt+0x1928>
   12e48:	str	r2, [sp, #80]	; 0x50
   12e4c:	str	r3, [sp, #88]	; 0x58
   12e50:	str	ip, [sp, #84]	; 0x54
   12e54:	bl	1147c <__ctype_b_loc@plt>
   12e58:	ldr	r0, [r0]
   12e5c:	add	r0, r0, r4, lsl #1
   12e60:	ldrh	r0, [r0]
   12e64:	tst	r0, #16384	; 0x4000
   12e68:	bne	12e7c <__assert_fail@plt+0x188c>
   12e6c:	ldr	ip, [sp, #84]	; 0x54
   12e70:	ldr	r3, [sp, #88]	; 0x58
   12e74:	ldr	r2, [sp, #80]	; 0x50
   12e78:	b	12e3c <__assert_fail@plt+0x184c>
   12e7c:	adds	sl, sl, #1
   12e80:	adc	r9, r9, #0
   12e84:	tst	r0, #8192	; 0x2000
   12e88:	bne	12eb8 <__assert_fail@plt+0x18c8>
   12e8c:	mov	r0, r4
   12e90:	bl	1150c <btowc@plt>
   12e94:	movw	r1, #33188	; 0x81a4
   12e98:	movt	r1, #2
   12e9c:	ldrb	r1, [r1]
   12ea0:	cmp	r1, #0
   12ea4:	beq	12ec8 <__assert_fail@plt+0x18d8>
   12ea8:	ldr	ip, [sp, #84]	; 0x54
   12eac:	ldr	r3, [sp, #88]	; 0x58
   12eb0:	mov	r2, #1
   12eb4:	b	12e3c <__assert_fail@plt+0x184c>
   12eb8:	ldr	ip, [sp, #84]	; 0x54
   12ebc:	ldr	r3, [sp, #88]	; 0x58
   12ec0:	ldr	r2, [sp, #80]	; 0x50
   12ec4:	b	12e2c <__assert_fail@plt+0x183c>
   12ec8:	movw	r1, #8238	; 0x202e
   12ecc:	cmp	r0, r1
   12ed0:	bgt	12ef0 <__assert_fail@plt+0x1900>
   12ed4:	ldr	ip, [sp, #84]	; 0x54
   12ed8:	ldr	r3, [sp, #88]	; 0x58
   12edc:	ldr	r2, [sp, #80]	; 0x50
   12ee0:	cmp	r0, #160	; 0xa0
   12ee4:	beq	12e2c <__assert_fail@plt+0x183c>
   12ee8:	movw	r1, #8199	; 0x2007
   12eec:	b	12f0c <__assert_fail@plt+0x191c>
   12ef0:	ldr	ip, [sp, #84]	; 0x54
   12ef4:	ldr	r3, [sp, #88]	; 0x58
   12ef8:	ldr	r2, [sp, #80]	; 0x50
   12efc:	movw	r1, #8239	; 0x202f
   12f00:	cmp	r0, r1
   12f04:	beq	12e2c <__assert_fail@plt+0x183c>
   12f08:	movw	r1, #8288	; 0x2060
   12f0c:	cmp	r0, r1
   12f10:	beq	12e2c <__assert_fail@plt+0x183c>
   12f14:	b	12eb0 <__assert_fail@plt+0x18c0>
   12f18:	str	r7, [sp, #84]	; 0x54
   12f1c:	ldr	r7, [sp, #44]	; 0x2c
   12f20:	ldr	r0, [sp, #76]	; 0x4c
   12f24:	str	r6, [sp, #80]	; 0x50
   12f28:	mov	r4, r2
   12f2c:	mov	r6, ip
   12f30:	add	r8, sp, #104	; 0x68
   12f34:	str	r3, [sp, #88]	; 0x58
   12f38:	adds	r7, r7, r0
   12f3c:	ldr	r0, [sp, #52]	; 0x34
   12f40:	adc	r0, r0, #0
   12f44:	str	r0, [sp, #52]	; 0x34
   12f48:	b	12d58 <__assert_fail@plt+0x1768>
   12f4c:	mov	r0, #1
   12f50:	mov	ip, r9
   12f54:	b	12fa0 <__assert_fail@plt+0x19b0>
   12f58:	bl	114dc <__errno_location@plt>
   12f5c:	ldr	r2, [sp, #32]
   12f60:	ldr	r4, [r0]
   12f64:	mov	r0, #0
   12f68:	mov	r1, #3
   12f6c:	mov	r7, #0
   12f70:	bl	15318 <__assert_fail@plt+0x3d28>
   12f74:	movw	r2, #30524	; 0x773c
   12f78:	mov	r3, r0
   12f7c:	mov	r0, #0
   12f80:	mov	r1, r4
   12f84:	movt	r2, #1
   12f88:	bl	11410 <error@plt>
   12f8c:	mov	r0, #0
   12f90:	mov	ip, #0
   12f94:	mov	sl, #0
   12f98:	str	r0, [sp, #52]	; 0x34
   12f9c:	mov	r0, #0
   12fa0:	str	r0, [sp, #48]	; 0x30
   12fa4:	ldr	r4, [sp, #40]	; 0x28
   12fa8:	ldr	r6, [sp, #36]	; 0x24
   12fac:	mov	lr, #0
   12fb0:	mov	r8, #0
   12fb4:	mov	r5, #0
   12fb8:	mov	r9, #0
   12fbc:	mov	r2, #0
   12fc0:	mov	r3, #0
   12fc4:	b	131cc <__assert_fail@plt+0x1bdc>
   12fc8:	mov	r7, #0
   12fcc:	mov	sl, #0
   12fd0:	mov	r0, #2
   12fd4:	mov	r2, #0
   12fd8:	mov	r3, #0
   12fdc:	str	r5, [sp]
   12fe0:	str	r5, [sp, #4]
   12fe4:	str	r0, [sp, #8]
   12fe8:	ldr	r0, [sp, #48]	; 0x30
   12fec:	bl	13644 <__assert_fail@plt+0x2054>
   12ff0:	ldr	r6, [sp, #36]	; 0x24
   12ff4:	add	r4, sp, #104	; 0x68
   12ff8:	ldr	r0, [sp, #48]	; 0x30
   12ffc:	mov	r1, r4
   13000:	mov	r2, #16384	; 0x4000
   13004:	bl	15920 <__assert_fail@plt+0x4330>
   13008:	cmp	r0, #0
   1300c:	beq	13024 <__assert_fail@plt+0x1a34>
   13010:	cmn	r0, #1
   13014:	beq	13030 <__assert_fail@plt+0x1a40>
   13018:	adds	r7, r7, r0
   1301c:	adc	sl, sl, #0
   13020:	b	12ff8 <__assert_fail@plt+0x1a08>
   13024:	str	sl, [sp, #52]	; 0x34
   13028:	mov	r0, #1
   1302c:	b	13068 <__assert_fail@plt+0x1a78>
   13030:	str	sl, [sp, #52]	; 0x34
   13034:	bl	114dc <__errno_location@plt>
   13038:	ldr	r2, [sp, #32]
   1303c:	ldr	r4, [r0]
   13040:	mov	r0, #0
   13044:	mov	r1, #3
   13048:	bl	15318 <__assert_fail@plt+0x3d28>
   1304c:	movw	r2, #30524	; 0x773c
   13050:	mov	r3, r0
   13054:	mov	r0, #0
   13058:	mov	r1, r4
   1305c:	movt	r2, #1
   13060:	bl	11410 <error@plt>
   13064:	mov	r0, #0
   13068:	mov	ip, #0
   1306c:	mov	sl, #0
   13070:	mov	lr, #0
   13074:	mov	r8, #0
   13078:	mov	r5, #0
   1307c:	mov	r9, #0
   13080:	mov	r2, #0
   13084:	mov	r3, #0
   13088:	str	r0, [sp, #48]	; 0x30
   1308c:	ldr	r4, [sp, #40]	; 0x28
   13090:	b	131cc <__assert_fail@plt+0x1bdc>
   13094:	mov	r0, #1
   13098:	str	r0, [sp, #48]	; 0x30
   1309c:	b	130d8 <__assert_fail@plt+0x1ae8>
   130a0:	bl	114dc <__errno_location@plt>
   130a4:	ldr	r2, [sp, #32]
   130a8:	ldr	r6, [r0]
   130ac:	mov	r0, #0
   130b0:	mov	r1, #3
   130b4:	str	r0, [sp, #48]	; 0x30
   130b8:	mov	r0, #0
   130bc:	bl	15318 <__assert_fail@plt+0x3d28>
   130c0:	movw	r2, #30524	; 0x773c
   130c4:	mov	r3, r0
   130c8:	mov	r0, #0
   130cc:	mov	r1, r6
   130d0:	movt	r2, #1
   130d4:	bl	11410 <error@plt>
   130d8:	ldr	r7, [sp, #68]	; 0x44
   130dc:	ldr	r6, [sp, #64]	; 0x40
   130e0:	mov	r0, #0
   130e4:	mov	lr, r8
   130e8:	ldr	ip, [sp, #60]	; 0x3c
   130ec:	ldr	sl, [sp, #56]	; 0x38
   130f0:	ldr	r5, [sp, #88]	; 0x58
   130f4:	ldr	r9, [sp, #84]	; 0x54
   130f8:	subs	r1, r8, r7
   130fc:	mov	r8, r4
   13100:	sbcs	r1, r4, r6
   13104:	ldr	r1, [sp, #76]	; 0x4c
   13108:	ldr	r4, [sp, #40]	; 0x28
   1310c:	movwcc	r0, #1
   13110:	cmp	r0, #0
   13114:	ldr	r0, [sp, #80]	; 0x50
   13118:	movne	r8, r6
   1311c:	movne	lr, r7
   13120:	ldr	r7, [sp, #44]	; 0x2c
   13124:	ldr	r6, [sp, #36]	; 0x24
   13128:	and	r0, r0, #1
   1312c:	adds	r2, r1, r0
   13130:	ldr	r0, [sp, #72]	; 0x48
   13134:	b	131c8 <__assert_fail@plt+0x1bd8>
   13138:	mov	r0, #1
   1313c:	str	r0, [sp, #48]	; 0x30
   13140:	b	1317c <__assert_fail@plt+0x1b8c>
   13144:	bl	114dc <__errno_location@plt>
   13148:	ldr	r2, [sp, #32]
   1314c:	ldr	r5, [r0]
   13150:	mov	r0, #0
   13154:	mov	r1, #3
   13158:	str	r0, [sp, #48]	; 0x30
   1315c:	mov	r0, #0
   13160:	bl	15318 <__assert_fail@plt+0x3d28>
   13164:	movw	r2, #30524	; 0x773c
   13168:	mov	r3, r0
   1316c:	mov	r0, #0
   13170:	mov	r1, r5
   13174:	movt	r2, #1
   13178:	bl	11410 <error@plt>
   1317c:	ldr	r8, [sp, #88]	; 0x58
   13180:	subs	r0, r6, sl
   13184:	ldr	r1, [sp, #80]	; 0x50
   13188:	mov	lr, r6
   1318c:	ldr	r6, [sp, #36]	; 0x24
   13190:	ldr	ip, [sp, #60]	; 0x3c
   13194:	mov	r5, #0
   13198:	sbcs	r0, r8, r9
   1319c:	mov	r0, #0
   131a0:	movwcc	r0, #1
   131a4:	cmp	r0, #0
   131a8:	and	r0, r4, #1
   131ac:	ldr	r4, [sp, #40]	; 0x28
   131b0:	movne	r8, r9
   131b4:	movne	lr, sl
   131b8:	adds	r2, r1, r0
   131bc:	ldr	r0, [sp, #84]	; 0x54
   131c0:	ldr	sl, [sp, #56]	; 0x38
   131c4:	mov	r9, #0
   131c8:	adc	r3, r0, #0
   131cc:	movw	r0, #33190	; 0x81a6
   131d0:	movt	r0, #2
   131d4:	ldrb	r0, [r0]
   131d8:	eor	r1, r6, #1
   131dc:	ldr	r6, [sp, #52]	; 0x34
   131e0:	str	r3, [sp, #80]	; 0x50
   131e4:	str	lr, [sp, #84]	; 0x54
   131e8:	ands	r0, r0, r1
   131ec:	mov	r1, sl
   131f0:	movne	r9, r6
   131f4:	cmp	r0, #0
   131f8:	mov	r0, ip
   131fc:	movne	r5, r7
   13200:	stm	sp, {r5, r9}
   13204:	str	r5, [sp, #88]	; 0x58
   13208:	str	r4, [sp, #24]
   1320c:	str	r7, [sp, #8]
   13210:	str	r6, [sp, #12]
   13214:	str	lr, [sp, #16]
   13218:	str	r8, [sp, #20]
   1321c:	mov	r4, ip
   13220:	mov	r5, r2
   13224:	bl	124f4 <__assert_fail@plt+0xf04>
   13228:	movw	r0, #33232	; 0x81d0
   1322c:	ldr	r1, [sp, #80]	; 0x50
   13230:	movt	r0, #2
   13234:	ldrd	r2, [r0]
   13238:	adds	r2, r2, r4
   1323c:	adc	r3, r3, sl
   13240:	strd	r2, [r0]
   13244:	movw	r0, #33224	; 0x81c8
   13248:	movt	r0, #2
   1324c:	ldrd	r2, [r0]
   13250:	adds	r2, r2, r5
   13254:	adc	r3, r3, r1
   13258:	ldr	r1, [sp, #88]	; 0x58
   1325c:	strd	r2, [r0]
   13260:	movw	r0, #33216	; 0x81c0
   13264:	movt	r0, #2
   13268:	ldrd	r2, [r0]
   1326c:	adds	r1, r2, r1
   13270:	movw	r2, #33208	; 0x81b8
   13274:	movt	r2, #2
   13278:	str	r1, [r0]
   1327c:	adc	r1, r3, r9
   13280:	ldr	r9, [sp, #84]	; 0x54
   13284:	str	r1, [r0, #4]
   13288:	movw	r0, #33200	; 0x81b0
   1328c:	ldr	r1, [sp, #84]	; 0x54
   13290:	ldrd	r4, [r2]
   13294:	movt	r0, #2
   13298:	adds	r4, r4, r7
   1329c:	adc	r5, r5, r6
   132a0:	strd	r4, [r2]
   132a4:	ldrd	r2, [r0]
   132a8:	subs	r1, r2, r1
   132ac:	sbcs	r1, r3, r8
   132b0:	strcc	r9, [r0]
   132b4:	strcc	r8, [r0, #4]
   132b8:	ldr	r0, [sp, #48]	; 0x30
   132bc:	sub	sp, fp, #28
   132c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132c4:	mov	r0, #1
   132c8:	mov	r2, #0
   132cc:	mov	r3, #0
   132d0:	str	r0, [sp]
   132d4:	ldr	r0, [sp, #48]	; 0x30
   132d8:	bl	113d4 <lseek64@plt>
   132dc:	mov	r3, r0
   132e0:	mov	r8, r1
   132e4:	movw	r0, #33184	; 0x81a0
   132e8:	ldr	r4, [sp, #40]	; 0x28
   132ec:	movt	r0, #2
   132f0:	ldr	r0, [r0]
   132f4:	udiv	r1, r6, r0
   132f8:	mls	r0, r1, r0, r6
   132fc:	cmp	r0, #0
   13300:	beq	13354 <__assert_fail@plt+0x1d64>
   13304:	subs	r7, r6, r3
   13308:	ldr	r6, [sp, #36]	; 0x24
   1330c:	mov	r0, #0
   13310:	mov	lr, #0
   13314:	mov	r5, #0
   13318:	mov	r9, #0
   1331c:	mov	r2, #0
   13320:	mov	r3, #0
   13324:	mov	sl, #0
   13328:	mov	ip, #0
   1332c:	rscs	r1, r8, #0
   13330:	mov	r8, #0
   13334:	movwlt	r0, #1
   13338:	cmp	r0, #0
   1333c:	mov	r0, #1
   13340:	movwne	r1, #0
   13344:	movwne	r7, #0
   13348:	str	r0, [sp, #48]	; 0x30
   1334c:	str	r1, [sp, #52]	; 0x34
   13350:	b	131cc <__assert_fail@plt+0x1bdc>
   13354:	ldr	r0, [r9, #64]	; 0x40
   13358:	movw	r1, #513	; 0x201
   1335c:	movw	r2, #513	; 0x201
   13360:	mov	r7, #0
   13364:	mov	sl, #0
   13368:	cmp	r0, #536870913	; 0x20000001
   1336c:	addcc	r2, r0, #1
   13370:	cmp	r0, #0
   13374:	movle	r2, r1
   13378:	udiv	r0, r6, r2
   1337c:	mul	r4, r0, r2
   13380:	subs	r0, r3, r4
   13384:	sbcs	r0, r8, #0
   13388:	bcs	12fd0 <__assert_fail@plt+0x19e0>
   1338c:	mov	r0, #1
   13390:	mov	r7, r3
   13394:	mov	r2, r4
   13398:	mov	r3, #0
   1339c:	mvn	r9, #0
   133a0:	mov	r6, #0
   133a4:	str	r0, [sp]
   133a8:	ldr	r0, [sp, #48]	; 0x30
   133ac:	bl	113d4 <lseek64@plt>
   133b0:	subs	r0, r9, r0
   133b4:	sbcs	r0, r9, r1
   133b8:	movwlt	r6, #1
   133bc:	subs	r0, r4, r7
   133c0:	rsc	sl, r8, #0
   133c4:	cmp	r6, #0
   133c8:	moveq	r0, r6
   133cc:	moveq	sl, r6
   133d0:	mov	r7, r0
   133d4:	b	12fd0 <__assert_fail@plt+0x19e0>
   133d8:	push	{r4, sl, fp, lr}
   133dc:	add	fp, sp, #8
   133e0:	mov	r4, r0
   133e4:	mov	r0, #24
   133e8:	bl	16308 <__assert_fail@plt+0x4d18>
   133ec:	cmp	r0, #0
   133f0:	moveq	r0, #0
   133f4:	movne	r1, #0
   133f8:	strne	r4, [r0, #16]
   133fc:	strne	r4, [r0, #20]
   13400:	strne	r1, [r0]
   13404:	pop	{r4, sl, fp, pc}
   13408:	push	{r4, sl, fp, lr}
   1340c:	add	fp, sp, #8
   13410:	mov	r4, r0
   13414:	mov	r0, #24
   13418:	bl	16308 <__assert_fail@plt+0x4d18>
   1341c:	cmp	r0, #0
   13420:	beq	13438 <__assert_fail@plt+0x1e48>
   13424:	vmov.i32	q8, #0	; 0x00000000
   13428:	mov	r1, r0
   1342c:	str	r4, [r1], #4
   13430:	vst1.32	{d16-d17}, [r1]
   13434:	pop	{r4, sl, fp, pc}
   13438:	mov	r0, #0
   1343c:	pop	{r4, sl, fp, pc}
   13440:	push	{r4, r5, r6, sl, fp, lr}
   13444:	add	fp, sp, #16
   13448:	ldr	r3, [r0]
   1344c:	mov	r4, r1
   13450:	mov	r5, r0
   13454:	cmp	r3, #0
   13458:	beq	13490 <__assert_fail@plt+0x1ea0>
   1345c:	add	r0, r5, #8
   13460:	add	r1, r5, #12
   13464:	mov	r2, #0
   13468:	mov	r6, #0
   1346c:	bl	1159c <getdelim@plt>
   13470:	cmn	r0, #1
   13474:	ble	134bc <__assert_fail@plt+0x1ecc>
   13478:	mov	r0, #1
   1347c:	str	r0, [r4]
   13480:	ldmib	r5, {r0, r6}
   13484:	add	r0, r0, #1
   13488:	str	r0, [r5, #4]
   1348c:	b	134e4 <__assert_fail@plt+0x1ef4>
   13490:	ldr	r0, [r5, #20]
   13494:	ldr	r0, [r0]
   13498:	cmp	r0, #0
   1349c:	beq	134d8 <__assert_fail@plt+0x1ee8>
   134a0:	mov	r0, #1
   134a4:	str	r0, [r4]
   134a8:	ldr	r0, [r5, #20]
   134ac:	add	r1, r0, #4
   134b0:	str	r1, [r5, #20]
   134b4:	ldr	r6, [r0]
   134b8:	b	134e4 <__assert_fail@plt+0x1ef4>
   134bc:	ldr	r0, [r5]
   134c0:	bl	11494 <feof@plt>
   134c4:	cmp	r0, #0
   134c8:	mov	r1, #2
   134cc:	movweq	r1, #4
   134d0:	str	r1, [r4]
   134d4:	b	134e4 <__assert_fail@plt+0x1ef4>
   134d8:	mov	r0, #2
   134dc:	mov	r6, #0
   134e0:	str	r0, [r4]
   134e4:	mov	r0, r6
   134e8:	pop	{r4, r5, r6, sl, fp, pc}
   134ec:	ldr	r1, [r0]
   134f0:	cmp	r1, #0
   134f4:	ldrne	r0, [r0, #4]
   134f8:	bxne	lr
   134fc:	ldr	r1, [r0, #16]
   13500:	ldr	r0, [r0, #20]
   13504:	sub	r0, r0, r1
   13508:	asr	r0, r0, #2
   1350c:	bx	lr
   13510:	push	{r4, sl, fp, lr}
   13514:	add	fp, sp, #8
   13518:	mov	r4, r0
   1351c:	ldr	r0, [r0]
   13520:	cmp	r0, #0
   13524:	beq	13530 <__assert_fail@plt+0x1f40>
   13528:	ldr	r0, [r4, #8]
   1352c:	bl	1377c <__assert_fail@plt+0x218c>
   13530:	mov	r0, r4
   13534:	pop	{r4, sl, fp, lr}
   13538:	b	1377c <__assert_fail@plt+0x218c>
   1353c:	movw	r1, #33252	; 0x81e4
   13540:	movt	r1, #2
   13544:	str	r0, [r1]
   13548:	bx	lr
   1354c:	movw	r1, #33256	; 0x81e8
   13550:	movt	r1, #2
   13554:	strb	r0, [r1]
   13558:	bx	lr
   1355c:	push	{r4, r5, r6, sl, fp, lr}
   13560:	add	fp, sp, #16
   13564:	sub	sp, sp, #8
   13568:	movw	r0, #33172	; 0x8194
   1356c:	movt	r0, #2
   13570:	ldr	r0, [r0]
   13574:	bl	16388 <__assert_fail@plt+0x4d98>
   13578:	cmp	r0, #0
   1357c:	beq	135a4 <__assert_fail@plt+0x1fb4>
   13580:	movw	r0, #33256	; 0x81e8
   13584:	movt	r0, #2
   13588:	ldrb	r0, [r0]
   1358c:	cmp	r0, #0
   13590:	beq	135c4 <__assert_fail@plt+0x1fd4>
   13594:	bl	114dc <__errno_location@plt>
   13598:	ldr	r0, [r0]
   1359c:	cmp	r0, #32
   135a0:	bne	135c4 <__assert_fail@plt+0x1fd4>
   135a4:	movw	r0, #33160	; 0x8188
   135a8:	movt	r0, #2
   135ac:	ldr	r0, [r0]
   135b0:	bl	16388 <__assert_fail@plt+0x4d98>
   135b4:	cmp	r0, #0
   135b8:	subeq	sp, fp, #16
   135bc:	popeq	{r4, r5, r6, sl, fp, pc}
   135c0:	b	13634 <__assert_fail@plt+0x2044>
   135c4:	movw	r1, #30508	; 0x772c
   135c8:	mov	r0, #0
   135cc:	mov	r2, #5
   135d0:	movt	r1, #1
   135d4:	bl	11374 <dcgettext@plt>
   135d8:	mov	r4, r0
   135dc:	movw	r0, #33252	; 0x81e4
   135e0:	movt	r0, #2
   135e4:	ldr	r6, [r0]
   135e8:	bl	114dc <__errno_location@plt>
   135ec:	ldr	r5, [r0]
   135f0:	cmp	r6, #0
   135f4:	bne	13610 <__assert_fail@plt+0x2020>
   135f8:	movw	r2, #30524	; 0x773c
   135fc:	mov	r0, #0
   13600:	mov	r1, r5
   13604:	mov	r3, r4
   13608:	movt	r2, #1
   1360c:	b	13630 <__assert_fail@plt+0x2040>
   13610:	mov	r0, r6
   13614:	bl	1526c <__assert_fail@plt+0x3c7c>
   13618:	movw	r2, #30520	; 0x7738
   1361c:	mov	r3, r0
   13620:	str	r4, [sp]
   13624:	mov	r0, #0
   13628:	mov	r1, r5
   1362c:	movt	r2, #1
   13630:	bl	11410 <error@plt>
   13634:	movw	r0, #33068	; 0x812c
   13638:	movt	r0, #2
   1363c:	ldr	r0, [r0]
   13640:	bl	11350 <_exit@plt>
   13644:	b	112fc <posix_fadvise64@plt>
   13648:	cmp	r0, #0
   1364c:	bxeq	lr
   13650:	push	{r4, sl, fp, lr}
   13654:	add	fp, sp, #8
   13658:	sub	sp, sp, #16
   1365c:	mov	r4, r1
   13660:	bl	11530 <fileno@plt>
   13664:	mov	r1, #0
   13668:	mov	r2, #0
   1366c:	mov	r3, #0
   13670:	str	r1, [sp]
   13674:	stmib	sp, {r1, r4}
   13678:	bl	112fc <posix_fadvise64@plt>
   1367c:	sub	sp, fp, #8
   13680:	pop	{r4, sl, fp, pc}
   13684:	push	{r4, r5, r6, sl, fp, lr}
   13688:	add	fp, sp, #16
   1368c:	sub	sp, sp, #8
   13690:	mov	r4, r0
   13694:	bl	11530 <fileno@plt>
   13698:	cmn	r0, #1
   1369c:	ble	13710 <__assert_fail@plt+0x2120>
   136a0:	mov	r0, r4
   136a4:	bl	11458 <__freading@plt>
   136a8:	cmp	r0, #0
   136ac:	beq	136d8 <__assert_fail@plt+0x20e8>
   136b0:	mov	r0, r4
   136b4:	bl	11530 <fileno@plt>
   136b8:	mov	r1, #1
   136bc:	mov	r2, #0
   136c0:	mov	r3, #0
   136c4:	str	r1, [sp]
   136c8:	bl	113d4 <lseek64@plt>
   136cc:	and	r0, r0, r1
   136d0:	cmn	r0, #1
   136d4:	beq	13710 <__assert_fail@plt+0x2120>
   136d8:	mov	r0, r4
   136dc:	bl	13720 <__assert_fail@plt+0x2130>
   136e0:	cmp	r0, #0
   136e4:	beq	13710 <__assert_fail@plt+0x2120>
   136e8:	bl	114dc <__errno_location@plt>
   136ec:	ldr	r6, [r0]
   136f0:	mov	r5, r0
   136f4:	mov	r0, r4
   136f8:	bl	11548 <fclose@plt>
   136fc:	cmp	r6, #0
   13700:	strne	r6, [r5]
   13704:	mvnne	r0, #0
   13708:	sub	sp, fp, #16
   1370c:	pop	{r4, r5, r6, sl, fp, pc}
   13710:	mov	r0, r4
   13714:	sub	sp, fp, #16
   13718:	pop	{r4, r5, r6, sl, fp, lr}
   1371c:	b	11548 <fclose@plt>
   13720:	push	{r4, sl, fp, lr}
   13724:	add	fp, sp, #8
   13728:	sub	sp, sp, #8
   1372c:	mov	r4, r0
   13730:	cmp	r0, #0
   13734:	beq	1376c <__assert_fail@plt+0x217c>
   13738:	mov	r0, r4
   1373c:	bl	11458 <__freading@plt>
   13740:	cmp	r0, #0
   13744:	beq	1376c <__assert_fail@plt+0x217c>
   13748:	ldrb	r0, [r4, #1]
   1374c:	tst	r0, #1
   13750:	beq	1376c <__assert_fail@plt+0x217c>
   13754:	mov	r0, #1
   13758:	mov	r2, #0
   1375c:	mov	r3, #0
   13760:	str	r0, [sp]
   13764:	mov	r0, r4
   13768:	bl	137a4 <__assert_fail@plt+0x21b4>
   1376c:	mov	r0, r4
   13770:	sub	sp, fp, #8
   13774:	pop	{r4, sl, fp, lr}
   13778:	b	11314 <fflush@plt>
   1377c:	push	{r4, r5, r6, sl, fp, lr}
   13780:	add	fp, sp, #16
   13784:	mov	r4, r0
   13788:	bl	114dc <__errno_location@plt>
   1378c:	ldr	r6, [r0]
   13790:	mov	r5, r0
   13794:	mov	r0, r4
   13798:	bl	11338 <free@plt>
   1379c:	str	r6, [r5]
   137a0:	pop	{r4, r5, r6, sl, fp, pc}
   137a4:	push	{r4, r5, r6, r7, fp, lr}
   137a8:	add	fp, sp, #16
   137ac:	sub	sp, sp, #8
   137b0:	mov	r4, r0
   137b4:	ldr	r0, [r0, #4]
   137b8:	mov	r5, r3
   137bc:	mov	r6, r2
   137c0:	ldr	r1, [r4, #8]
   137c4:	cmp	r1, r0
   137c8:	bne	137e4 <__assert_fail@plt+0x21f4>
   137cc:	ldrd	r0, [r4, #16]
   137d0:	cmp	r1, r0
   137d4:	bne	137e4 <__assert_fail@plt+0x21f4>
   137d8:	ldr	r0, [r4, #36]	; 0x24
   137dc:	cmp	r0, #0
   137e0:	beq	137fc <__assert_fail@plt+0x220c>
   137e4:	mov	r0, r4
   137e8:	mov	r2, r6
   137ec:	mov	r3, r5
   137f0:	sub	sp, fp, #16
   137f4:	pop	{r4, r5, r6, r7, fp, lr}
   137f8:	b	11554 <fseeko64@plt>
   137fc:	ldr	r7, [fp, #8]
   13800:	mov	r0, r4
   13804:	bl	11530 <fileno@plt>
   13808:	mov	r2, r6
   1380c:	mov	r3, r5
   13810:	str	r7, [sp]
   13814:	bl	113d4 <lseek64@plt>
   13818:	and	r2, r0, r1
   1381c:	cmn	r2, #1
   13820:	beq	1383c <__assert_fail@plt+0x224c>
   13824:	strd	r0, [r4, #80]	; 0x50
   13828:	ldr	r0, [r4]
   1382c:	bic	r0, r0, #16
   13830:	str	r0, [r4]
   13834:	mov	r0, #0
   13838:	b	13840 <__assert_fail@plt+0x2250>
   1383c:	mvn	r0, #0
   13840:	sub	sp, fp, #16
   13844:	pop	{r4, r5, r6, r7, fp, pc}
   13848:	push	{r4, r5, r6, sl, fp, lr}
   1384c:	add	fp, sp, #16
   13850:	mov	r5, r0
   13854:	mov	r0, #0
   13858:	mov	r4, r1
   1385c:	add	r6, r2, #19
   13860:	strb	r0, [r2, #20]
   13864:	mov	r0, r5
   13868:	mov	r1, r4
   1386c:	mov	r2, #10
   13870:	mov	r3, #0
   13874:	bl	16ce0 <_obstack_memory_used@@Base+0x504>
   13878:	add	r2, r0, r0, lsl #2
   1387c:	sub	r2, r5, r2, lsl #1
   13880:	orr	r2, r2, #48	; 0x30
   13884:	strb	r2, [r6], #-1
   13888:	rsbs	r2, r5, #9
   1388c:	mov	r5, r0
   13890:	rscs	r2, r4, #0
   13894:	mov	r4, r1
   13898:	bcc	13864 <__assert_fail@plt+0x2274>
   1389c:	add	r0, r6, #1
   138a0:	pop	{r4, r5, r6, sl, fp, pc}
   138a4:	push	{r4, sl, fp, lr}
   138a8:	add	fp, sp, #8
   138ac:	mov	r4, r0
   138b0:	bl	11320 <wcwidth@plt>
   138b4:	cmn	r0, #1
   138b8:	popgt	{r4, sl, fp, pc}
   138bc:	mov	r0, r4
   138c0:	bl	113a4 <iswcntrl@plt>
   138c4:	clz	r0, r0
   138c8:	lsr	r0, r0, #5
   138cc:	pop	{r4, sl, fp, pc}
   138d0:	push	{r4, r5, r6, sl, fp, lr}
   138d4:	add	fp, sp, #16
   138d8:	mov	r4, r0
   138dc:	mov	r0, r1
   138e0:	mov	r5, r1
   138e4:	ldr	r1, [r0], #16
   138e8:	cmp	r1, r0
   138ec:	beq	138f8 <__assert_fail@plt+0x2308>
   138f0:	mov	r6, r1
   138f4:	b	13908 <__assert_fail@plt+0x2318>
   138f8:	ldr	r2, [r5, #4]
   138fc:	add	r6, r4, #16
   13900:	mov	r0, r6
   13904:	bl	1135c <memcpy@plt>
   13908:	str	r6, [r4]
   1390c:	ldr	r0, [r5, #4]
   13910:	str	r0, [r4, #4]
   13914:	ldrb	r0, [r5, #8]
   13918:	strb	r0, [r4, #8]
   1391c:	cmp	r0, #0
   13920:	ldrne	r0, [r5, #12]
   13924:	strne	r0, [r4, #12]
   13928:	pop	{r4, r5, r6, sl, fp, pc}
   1392c:	movw	r2, #30528	; 0x7740
   13930:	ubfx	r1, r0, #5, #3
   13934:	and	r0, r0, #31
   13938:	movt	r2, #1
   1393c:	ldr	r1, [r2, r1, lsl #2]
   13940:	mov	r2, #1
   13944:	and	r0, r1, r2, lsl r0
   13948:	cmp	r0, #0
   1394c:	movwne	r0, #1
   13950:	bx	lr
   13954:	push	{r4, r5, r6, r7, fp, lr}
   13958:	add	fp, sp, #16
   1395c:	sub	sp, sp, #8
   13960:	cmp	r0, #0
   13964:	add	r5, sp, #4
   13968:	mov	r7, r2
   1396c:	mov	r4, r1
   13970:	movne	r5, r0
   13974:	mov	r0, r5
   13978:	bl	11404 <mbrtowc@plt>
   1397c:	mov	r6, r0
   13980:	cmp	r7, #0
   13984:	beq	139ac <__assert_fail@plt+0x23bc>
   13988:	cmn	r6, #2
   1398c:	bcc	139ac <__assert_fail@plt+0x23bc>
   13990:	mov	r0, #0
   13994:	bl	16408 <__assert_fail@plt+0x4e18>
   13998:	cmp	r0, #0
   1399c:	bne	139ac <__assert_fail@plt+0x23bc>
   139a0:	ldrb	r0, [r4]
   139a4:	mov	r6, #1
   139a8:	str	r0, [r5]
   139ac:	mov	r0, r6
   139b0:	sub	sp, fp, #16
   139b4:	pop	{r4, r5, r6, r7, fp, pc}
   139b8:	push	{r4, sl, fp, lr}
   139bc:	add	fp, sp, #8
   139c0:	sub	sp, sp, #64	; 0x40
   139c4:	mov	r0, #85	; 0x55
   139c8:	bl	11380 <sysconf@plt>
   139cc:	mov	r4, r0
   139d0:	mov	r0, #30
   139d4:	bl	11380 <sysconf@plt>
   139d8:	orr	r1, r0, r4
   139dc:	cmn	r1, #1
   139e0:	ble	139fc <__assert_fail@plt+0x240c>
   139e4:	vmov	s0, r0
   139e8:	vcvt.f64.s32	d16, s0
   139ec:	vmov	s0, r4
   139f0:	vcvt.f64.s32	d17, s0
   139f4:	vmul.f64	d0, d17, d16
   139f8:	b	13a10 <__assert_fail@plt+0x2420>
   139fc:	mov	r0, sp
   13a00:	bl	11434 <sysinfo@plt>
   13a04:	cmp	r0, #0
   13a08:	beq	13a18 <__assert_fail@plt+0x2428>
   13a0c:	vldr	d0, [pc, #28]	; 13a30 <__assert_fail@plt+0x2440>
   13a10:	sub	sp, fp, #8
   13a14:	pop	{r4, sl, fp, pc}
   13a18:	vldr	s0, [sp, #16]
   13a1c:	vldr	s2, [sp, #52]	; 0x34
   13a20:	vcvt.f64.u32	d16, s2
   13a24:	vcvt.f64.u32	d17, s0
   13a28:	b	139f4 <__assert_fail@plt+0x2404>
   13a2c:	nop	{0}
   13a30:	andeq	r0, r0, r0
   13a34:	orrsmi	r0, r0, r0
   13a38:	push	{r4, sl, fp, lr}
   13a3c:	add	fp, sp, #8
   13a40:	sub	sp, sp, #64	; 0x40
   13a44:	mov	r0, #86	; 0x56
   13a48:	bl	11380 <sysconf@plt>
   13a4c:	mov	r4, r0
   13a50:	mov	r0, #30
   13a54:	bl	11380 <sysconf@plt>
   13a58:	orrs	r1, r0, r4
   13a5c:	bmi	13a78 <__assert_fail@plt+0x2488>
   13a60:	vmov	s0, r0
   13a64:	vcvt.f64.s32	d16, s0
   13a68:	vmov	s0, r4
   13a6c:	vcvt.f64.s32	d17, s0
   13a70:	vmul.f64	d0, d17, d16
   13a74:	b	13ab8 <__assert_fail@plt+0x24c8>
   13a78:	mov	r0, sp
   13a7c:	bl	11434 <sysinfo@plt>
   13a80:	cmp	r0, #0
   13a84:	beq	13a98 <__assert_fail@plt+0x24a8>
   13a88:	bl	139b8 <__assert_fail@plt+0x23c8>
   13a8c:	vmov.f64	d16, #80	; 0x3e800000  0.250
   13a90:	vmul.f64	d0, d0, d16
   13a94:	b	13ab8 <__assert_fail@plt+0x24c8>
   13a98:	vldr	s0, [sp, #20]
   13a9c:	vldr	s2, [sp, #28]
   13aa0:	vldr	s4, [sp, #52]	; 0x34
   13aa4:	vcvt.f64.u32	d16, s2
   13aa8:	vcvt.f64.u32	d17, s0
   13aac:	vcvt.f64.u32	d18, s4
   13ab0:	vadd.f64	d16, d17, d16
   13ab4:	vmul.f64	d0, d16, d18
   13ab8:	sub	sp, fp, #8
   13abc:	pop	{r4, sl, fp, pc}
   13ac0:	push	{r4, r5, fp, lr}
   13ac4:	add	fp, sp, #8
   13ac8:	cmp	r0, #0
   13acc:	beq	13b60 <__assert_fail@plt+0x2570>
   13ad0:	mov	r1, #47	; 0x2f
   13ad4:	mov	r4, r0
   13ad8:	bl	1156c <strrchr@plt>
   13adc:	cmp	r0, #0
   13ae0:	mov	r5, r4
   13ae4:	addne	r5, r0, #1
   13ae8:	sub	r0, r5, r4
   13aec:	cmp	r0, #7
   13af0:	blt	13b44 <__assert_fail@plt+0x2554>
   13af4:	movw	r1, #30616	; 0x7798
   13af8:	sub	r0, r5, #7
   13afc:	mov	r2, #7
   13b00:	movt	r1, #1
   13b04:	bl	115c0 <strncmp@plt>
   13b08:	cmp	r0, #0
   13b0c:	bne	13b44 <__assert_fail@plt+0x2554>
   13b10:	movw	r1, #30624	; 0x77a0
   13b14:	mov	r0, r5
   13b18:	mov	r2, #3
   13b1c:	movt	r1, #1
   13b20:	bl	115c0 <strncmp@plt>
   13b24:	cmp	r0, #0
   13b28:	beq	13b34 <__assert_fail@plt+0x2544>
   13b2c:	mov	r4, r5
   13b30:	b	13b44 <__assert_fail@plt+0x2554>
   13b34:	movw	r0, #33144	; 0x8178
   13b38:	add	r4, r5, #3
   13b3c:	movt	r0, #2
   13b40:	str	r4, [r0]
   13b44:	movw	r0, #33148	; 0x817c
   13b48:	movt	r0, #2
   13b4c:	str	r4, [r0]
   13b50:	movw	r0, #33260	; 0x81ec
   13b54:	movt	r0, #2
   13b58:	str	r4, [r0]
   13b5c:	pop	{r4, r5, fp, pc}
   13b60:	movw	r0, #33160	; 0x8188
   13b64:	movt	r0, #2
   13b68:	ldr	r1, [r0]
   13b6c:	movw	r0, #30560	; 0x7760
   13b70:	movt	r0, #1
   13b74:	bl	115b4 <fputs@plt>
   13b78:	bl	115cc <abort@plt>
   13b7c:	push	{r4, r5, r6, sl, fp, lr}
   13b80:	add	fp, sp, #16
   13b84:	mov	r4, r0
   13b88:	movw	r0, #33264	; 0x81f0
   13b8c:	movt	r0, #2
   13b90:	cmp	r4, #0
   13b94:	moveq	r4, r0
   13b98:	bl	114dc <__errno_location@plt>
   13b9c:	ldr	r6, [r0]
   13ba0:	mov	r5, r0
   13ba4:	mov	r0, r4
   13ba8:	mov	r1, #48	; 0x30
   13bac:	bl	16194 <__assert_fail@plt+0x4ba4>
   13bb0:	str	r6, [r5]
   13bb4:	pop	{r4, r5, r6, sl, fp, pc}
   13bb8:	movw	r1, #33264	; 0x81f0
   13bbc:	cmp	r0, #0
   13bc0:	movt	r1, #2
   13bc4:	movne	r1, r0
   13bc8:	ldr	r0, [r1]
   13bcc:	bx	lr
   13bd0:	movw	r2, #33264	; 0x81f0
   13bd4:	cmp	r0, #0
   13bd8:	movt	r2, #2
   13bdc:	movne	r2, r0
   13be0:	str	r1, [r2]
   13be4:	bx	lr
   13be8:	movw	r3, #33264	; 0x81f0
   13bec:	cmp	r0, #0
   13bf0:	and	r2, r2, #1
   13bf4:	movt	r3, #2
   13bf8:	movne	r3, r0
   13bfc:	ubfx	r0, r1, #5, #3
   13c00:	and	r1, r1, #31
   13c04:	add	ip, r3, r0, lsl #2
   13c08:	mov	r0, #1
   13c0c:	ldr	r3, [ip, #8]
   13c10:	and	r0, r0, r3, lsr r1
   13c14:	eor	r2, r0, r2
   13c18:	eor	r1, r3, r2, lsl r1
   13c1c:	str	r1, [ip, #8]
   13c20:	bx	lr
   13c24:	movw	r2, #33264	; 0x81f0
   13c28:	cmp	r0, #0
   13c2c:	movt	r2, #2
   13c30:	movne	r2, r0
   13c34:	ldr	r0, [r2, #4]
   13c38:	str	r1, [r2, #4]
   13c3c:	bx	lr
   13c40:	push	{fp, lr}
   13c44:	mov	fp, sp
   13c48:	movw	r3, #33264	; 0x81f0
   13c4c:	cmp	r0, #0
   13c50:	movt	r3, #2
   13c54:	movne	r3, r0
   13c58:	cmp	r1, #0
   13c5c:	mov	r0, #10
   13c60:	cmpne	r2, #0
   13c64:	str	r0, [r3]
   13c68:	bne	13c70 <__assert_fail@plt+0x2680>
   13c6c:	bl	115cc <abort@plt>
   13c70:	str	r1, [r3, #40]	; 0x28
   13c74:	str	r2, [r3, #44]	; 0x2c
   13c78:	pop	{fp, pc}
   13c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c80:	add	fp, sp, #28
   13c84:	sub	sp, sp, #20
   13c88:	mov	r7, r0
   13c8c:	ldr	r0, [fp, #8]
   13c90:	movw	r5, #33264	; 0x81f0
   13c94:	mov	r8, r3
   13c98:	mov	r9, r2
   13c9c:	mov	sl, r1
   13ca0:	movt	r5, #2
   13ca4:	cmp	r0, #0
   13ca8:	movne	r5, r0
   13cac:	bl	114dc <__errno_location@plt>
   13cb0:	ldr	r2, [r5, #40]	; 0x28
   13cb4:	ldr	r3, [r5, #44]	; 0x2c
   13cb8:	mov	r4, r0
   13cbc:	ldm	r5, {r0, r1}
   13cc0:	add	r5, r5, #8
   13cc4:	ldr	r6, [r4]
   13cc8:	stm	sp, {r0, r1, r5}
   13ccc:	mov	r0, r7
   13cd0:	mov	r1, sl
   13cd4:	str	r2, [sp, #12]
   13cd8:	str	r3, [sp, #16]
   13cdc:	mov	r2, r9
   13ce0:	mov	r3, r8
   13ce4:	bl	13cf4 <__assert_fail@plt+0x2704>
   13ce8:	str	r6, [r4]
   13cec:	sub	sp, fp, #28
   13cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cf8:	add	fp, sp, #28
   13cfc:	sub	sp, sp, #156	; 0x9c
   13d00:	mov	r5, r0
   13d04:	add	r0, r2, #1
   13d08:	mov	r6, r1
   13d0c:	mov	sl, r3
   13d10:	str	r2, [fp, #-80]	; 0xffffffb0
   13d14:	str	r0, [sp, #72]	; 0x48
   13d18:	ldr	r0, [fp, #12]
   13d1c:	and	r1, r0, #1
   13d20:	str	r1, [sp, #32]
   13d24:	and	r1, r0, #4
   13d28:	str	r1, [sp, #28]
   13d2c:	ubfx	r9, r0, #1, #1
   13d30:	bl	113e0 <__ctype_get_mb_cur_max@plt>
   13d34:	str	r0, [sp, #40]	; 0x28
   13d38:	ldr	r0, [fp, #24]
   13d3c:	ldr	r7, [fp, #8]
   13d40:	mov	r1, #0
   13d44:	mov	lr, #0
   13d48:	str	r5, [fp, #-84]	; 0xffffffac
   13d4c:	str	r1, [sp, #60]	; 0x3c
   13d50:	mov	r1, #1
   13d54:	str	r1, [fp, #-48]	; 0xffffffd0
   13d58:	str	r0, [sp, #80]	; 0x50
   13d5c:	ldr	r0, [fp, #20]
   13d60:	str	r0, [sp, #76]	; 0x4c
   13d64:	mov	r0, #0
   13d68:	str	r0, [sp, #56]	; 0x38
   13d6c:	mov	r0, #0
   13d70:	str	r0, [fp, #-88]	; 0xffffffa8
   13d74:	mov	r0, #0
   13d78:	str	r0, [fp, #-72]	; 0xffffffb8
   13d7c:	mov	r0, #0
   13d80:	cmp	r7, #10
   13d84:	bhi	14d60 <__assert_fail@plt+0x3770>
   13d88:	add	r1, pc, #24
   13d8c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13d90:	mov	ip, r6
   13d94:	mov	r8, #0
   13d98:	mov	r2, #1
   13d9c:	mov	r6, #0
   13da0:	mov	r3, sl
   13da4:	ldr	pc, [r1, r7, lsl #2]
   13da8:	muleq	r1, r4, lr
   13dac:	andeq	r3, r1, r8, ror #29
   13db0:	andeq	r3, r1, r8, lsr #29
   13db4:	andeq	r3, r1, ip, lsl #29
   13db8:	ldrdeq	r3, [r1], -ip
   13dbc:	andeq	r3, r1, r0, lsl pc
   13dc0:			; <UNDEFINED> instruction: 0x00013eb8
   13dc4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13dc8:	ldrdeq	r3, [r1], -r4
   13dcc:	ldrdeq	r3, [r1], -r4
   13dd0:	andeq	r3, r1, r4, lsl lr
   13dd4:	movw	r0, #30704	; 0x77f0
   13dd8:	mov	r1, r7
   13ddc:	mov	r6, r5
   13de0:	mov	r4, ip
   13de4:	mov	r5, lr
   13de8:	movt	r0, #1
   13dec:	bl	154c4 <__assert_fail@plt+0x3ed4>
   13df0:	str	r0, [sp, #76]	; 0x4c
   13df4:	movw	r0, #30706	; 0x77f2
   13df8:	mov	r1, r7
   13dfc:	movt	r0, #1
   13e00:	bl	154c4 <__assert_fail@plt+0x3ed4>
   13e04:	mov	lr, r5
   13e08:	mov	r5, r6
   13e0c:	mov	ip, r4
   13e10:	str	r0, [sp, #80]	; 0x50
   13e14:	mov	r8, #0
   13e18:	tst	r9, #1
   13e1c:	str	lr, [sp, #44]	; 0x2c
   13e20:	bne	13e58 <__assert_fail@plt+0x2868>
   13e24:	ldr	r0, [sp, #76]	; 0x4c
   13e28:	ldrb	r0, [r0]
   13e2c:	cmp	r0, #0
   13e30:	beq	13e58 <__assert_fail@plt+0x2868>
   13e34:	ldr	r1, [sp, #76]	; 0x4c
   13e38:	mov	r8, #0
   13e3c:	add	r1, r1, #1
   13e40:	cmp	r8, ip
   13e44:	strbcc	r0, [r5, r8]
   13e48:	ldrb	r0, [r1, r8]
   13e4c:	add	r8, r8, #1
   13e50:	cmp	r0, #0
   13e54:	bne	13e40 <__assert_fail@plt+0x2850>
   13e58:	ldr	r6, [sp, #80]	; 0x50
   13e5c:	mov	r4, ip
   13e60:	mov	r0, r6
   13e64:	bl	114b8 <strlen@plt>
   13e68:	mov	ip, r4
   13e6c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13e70:	ldr	lr, [sp, #44]	; 0x2c
   13e74:	str	r6, [fp, #-88]	; 0xffffffa8
   13e78:	str	r0, [fp, #-72]	; 0xffffffb8
   13e7c:	mov	r2, #1
   13e80:	mov	r6, r9
   13e84:	mov	r3, sl
   13e88:	b	13f94 <__assert_fail@plt+0x29a4>
   13e8c:	mov	r0, #1
   13e90:	b	13ee8 <__assert_fail@plt+0x28f8>
   13e94:	mov	r7, #0
   13e98:	mov	r8, #0
   13e9c:	mov	r2, r0
   13ea0:	mov	r6, #0
   13ea4:	b	13f94 <__assert_fail@plt+0x29a4>
   13ea8:	tst	r9, #1
   13eac:	bne	13ee8 <__assert_fail@plt+0x28f8>
   13eb0:	mov	r2, r0
   13eb4:	b	13f40 <__assert_fail@plt+0x2950>
   13eb8:	mov	r0, #1
   13ebc:	mov	r8, #0
   13ec0:	mov	r7, #5
   13ec4:	mov	r2, #1
   13ec8:	str	r0, [fp, #-72]	; 0xffffffb8
   13ecc:	movw	r0, #29687	; 0x73f7
   13ed0:	movt	r0, #1
   13ed4:	str	r0, [fp, #-88]	; 0xffffffa8
   13ed8:	b	13f08 <__assert_fail@plt+0x2918>
   13edc:	mov	r2, #1
   13ee0:	tst	r9, #1
   13ee4:	beq	13f40 <__assert_fail@plt+0x2950>
   13ee8:	mov	r1, #1
   13eec:	mov	r8, #0
   13ef0:	mov	r7, #2
   13ef4:	mov	r2, r0
   13ef8:	str	r1, [fp, #-72]	; 0xffffffb8
   13efc:	movw	r1, #30706	; 0x77f2
   13f00:	movt	r1, #1
   13f04:	str	r1, [fp, #-88]	; 0xffffffa8
   13f08:	mov	r6, #1
   13f0c:	b	13f94 <__assert_fail@plt+0x29a4>
   13f10:	tst	r9, #1
   13f14:	beq	13f64 <__assert_fail@plt+0x2974>
   13f18:	mov	r0, #1
   13f1c:	mov	r8, #0
   13f20:	mov	r2, #1
   13f24:	mov	r6, #1
   13f28:	mov	r7, #5
   13f2c:	str	r0, [fp, #-72]	; 0xffffffb8
   13f30:	movw	r0, #29687	; 0x73f7
   13f34:	movt	r0, #1
   13f38:	str	r0, [fp, #-88]	; 0xffffffa8
   13f3c:	b	13f94 <__assert_fail@plt+0x29a4>
   13f40:	cmp	ip, #0
   13f44:	mov	r8, #1
   13f48:	mov	r6, #0
   13f4c:	mov	r7, #2
   13f50:	movne	r0, #39	; 0x27
   13f54:	strbne	r0, [r5]
   13f58:	movw	r0, #30706	; 0x77f2
   13f5c:	movt	r0, #1
   13f60:	b	13f88 <__assert_fail@plt+0x2998>
   13f64:	cmp	ip, #0
   13f68:	mov	r8, #1
   13f6c:	mov	r2, #1
   13f70:	mov	r7, #5
   13f74:	mov	r6, #0
   13f78:	movne	r0, #34	; 0x22
   13f7c:	strbne	r0, [r5]
   13f80:	movw	r0, #29687	; 0x73f7
   13f84:	movt	r0, #1
   13f88:	str	r0, [fp, #-88]	; 0xffffffa8
   13f8c:	mov	r0, #1
   13f90:	str	r0, [fp, #-72]	; 0xffffffb8
   13f94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f98:	str	r7, [fp, #-68]	; 0xffffffbc
   13f9c:	str	r6, [fp, #-76]	; 0xffffffb4
   13fa0:	str	r2, [sp, #84]	; 0x54
   13fa4:	cmp	r0, #0
   13fa8:	movwne	r0, #1
   13fac:	and	r1, r0, r6
   13fb0:	and	r1, r2, r1
   13fb4:	str	r1, [sp, #48]	; 0x30
   13fb8:	sub	r1, r7, #2
   13fbc:	clz	r1, r1
   13fc0:	lsr	r1, r1, #5
   13fc4:	and	r1, r1, r6
   13fc8:	str	r1, [sp, #64]	; 0x40
   13fcc:	subs	r1, r7, #2
   13fd0:	eor	r7, r6, #1
   13fd4:	movwne	r1, #1
   13fd8:	str	r7, [sp, #92]	; 0x5c
   13fdc:	orr	r7, r1, r7
   13fe0:	and	r1, r1, r2
   13fe4:	and	r0, r0, r1
   13fe8:	str	r7, [sp, #68]	; 0x44
   13fec:	mov	r7, #0
   13ff0:	str	r0, [fp, #-60]	; 0xffffffc4
   13ff4:	orr	r0, r1, r6
   13ff8:	ldr	r1, [fp, #16]
   13ffc:	eor	r0, r0, #1
   14000:	clz	r1, r1
   14004:	lsr	r1, r1, #5
   14008:	orr	r0, r1, r0
   1400c:	str	r0, [fp, #-64]	; 0xffffffc0
   14010:	eor	r0, r2, #1
   14014:	str	r0, [sp, #52]	; 0x34
   14018:	cmn	r3, #1
   1401c:	beq	1402c <__assert_fail@plt+0x2a3c>
   14020:	cmp	r7, r3
   14024:	bne	14038 <__assert_fail@plt+0x2a48>
   14028:	b	14b94 <__assert_fail@plt+0x35a4>
   1402c:	ldrb	r0, [r4, r7]
   14030:	cmp	r0, #0
   14034:	beq	14b9c <__assert_fail@plt+0x35ac>
   14038:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1403c:	cmp	r0, #0
   14040:	beq	14088 <__assert_fail@plt+0x2a98>
   14044:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14048:	add	r5, r7, r0
   1404c:	cmp	r0, #2
   14050:	bcc	1409c <__assert_fail@plt+0x2aac>
   14054:	mov	r0, #0
   14058:	cmn	r3, #1
   1405c:	str	r0, [fp, #-56]	; 0xffffffc8
   14060:	bne	140a4 <__assert_fail@plt+0x2ab4>
   14064:	mov	r0, r4
   14068:	mov	r4, ip
   1406c:	mov	r6, lr
   14070:	bl	114b8 <strlen@plt>
   14074:	mov	ip, r4
   14078:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1407c:	mov	lr, r6
   14080:	mov	r3, r0
   14084:	b	140a4 <__assert_fail@plt+0x2ab4>
   14088:	mov	r0, #0
   1408c:	mov	sl, r3
   14090:	str	r0, [fp, #-56]	; 0xffffffc8
   14094:	mov	r0, #0
   14098:	b	14110 <__assert_fail@plt+0x2b20>
   1409c:	mov	r0, #0
   140a0:	str	r0, [fp, #-56]	; 0xffffffc8
   140a4:	cmp	r5, r3
   140a8:	bls	140bc <__assert_fail@plt+0x2acc>
   140ac:	ldr	r5, [fp, #-84]	; 0xffffffac
   140b0:	mov	r0, #0
   140b4:	mov	sl, r3
   140b8:	b	14110 <__assert_fail@plt+0x2b20>
   140bc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   140c0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   140c4:	add	r0, r4, r7
   140c8:	mov	r5, lr
   140cc:	mov	r6, ip
   140d0:	mov	sl, r3
   140d4:	bl	114ac <bcmp@plt>
   140d8:	ldr	r2, [sp, #92]	; 0x5c
   140dc:	cmp	r0, #0
   140e0:	ldr	r3, [fp, #-84]	; 0xffffffac
   140e4:	mov	r1, r0
   140e8:	movwne	r1, #1
   140ec:	orr	r1, r1, r2
   140f0:	tst	r1, #1
   140f4:	beq	14c20 <__assert_fail@plt+0x3630>
   140f8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   140fc:	clz	r0, r0
   14100:	mov	lr, r5
   14104:	mov	ip, r6
   14108:	mov	r5, r3
   1410c:	lsr	r0, r0, #5
   14110:	str	r0, [fp, #-52]	; 0xffffffcc
   14114:	ldrb	r6, [r4, r7]
   14118:	cmp	r6, #126	; 0x7e
   1411c:	bhi	14644 <__assert_fail@plt+0x3054>
   14120:	add	r3, pc, #16
   14124:	mov	r9, #1
   14128:	mov	r2, #110	; 0x6e
   1412c:	mov	r0, #97	; 0x61
   14130:	mov	r1, #0
   14134:	ldr	pc, [r3, r6, lsl #2]
   14138:	andeq	r4, r1, r8, lsr #9
   1413c:	andeq	r4, r1, r4, asr #12
   14140:	andeq	r4, r1, r4, asr #12
   14144:	andeq	r4, r1, r4, asr #12
   14148:	andeq	r4, r1, r4, asr #12
   1414c:	andeq	r4, r1, r4, asr #12
   14150:	andeq	r4, r1, r4, asr #12
   14154:	andeq	r4, r1, r4, asr #13
   14158:	andeq	r4, r1, r8, lsl #9
   1415c:	andeq	r4, r1, r0, lsl #9
   14160:	muleq	r1, r4, r4
   14164:	andeq	r4, r1, ip, lsr #11
   14168:	andeq	r4, r1, r8, ror r4
   1416c:	muleq	r1, r0, r4
   14170:	andeq	r4, r1, r4, asr #12
   14174:	andeq	r4, r1, r4, asr #12
   14178:	andeq	r4, r1, r4, asr #12
   1417c:	andeq	r4, r1, r4, asr #12
   14180:	andeq	r4, r1, r4, asr #12
   14184:	andeq	r4, r1, r4, asr #12
   14188:	andeq	r4, r1, r4, asr #12
   1418c:	andeq	r4, r1, r4, asr #12
   14190:	andeq	r4, r1, r4, asr #12
   14194:	andeq	r4, r1, r4, asr #12
   14198:	andeq	r4, r1, r4, asr #12
   1419c:	andeq	r4, r1, r4, asr #12
   141a0:	andeq	r4, r1, r4, asr #12
   141a4:	andeq	r4, r1, r4, asr #12
   141a8:	andeq	r4, r1, r4, asr #12
   141ac:	andeq	r4, r1, r4, asr #12
   141b0:	andeq	r4, r1, r4, asr #12
   141b4:	andeq	r4, r1, r4, asr #12
   141b8:	andeq	r4, r1, r8, lsr #8
   141bc:	andeq	r4, r1, ip, lsr #8
   141c0:	andeq	r4, r1, ip, lsr #8
   141c4:	andeq	r4, r1, r0, lsl r4
   141c8:	andeq	r4, r1, ip, lsr #8
   141cc:	andeq	r4, r1, r4, lsr r3
   141d0:	andeq	r4, r1, ip, lsr #8
   141d4:			; <UNDEFINED> instruction: 0x000145b4
   141d8:	andeq	r4, r1, ip, lsr #8
   141dc:	andeq	r4, r1, ip, lsr #8
   141e0:	andeq	r4, r1, ip, lsr #8
   141e4:	andeq	r4, r1, r4, lsr r3
   141e8:	andeq	r4, r1, r4, lsr r3
   141ec:	andeq	r4, r1, r4, lsr r3
   141f0:	andeq	r4, r1, r4, lsr r3
   141f4:	andeq	r4, r1, r4, lsr r3
   141f8:	andeq	r4, r1, r4, lsr r3
   141fc:	andeq	r4, r1, r4, lsr r3
   14200:	andeq	r4, r1, r4, lsr r3
   14204:	andeq	r4, r1, r4, lsr r3
   14208:	andeq	r4, r1, r4, lsr r3
   1420c:	andeq	r4, r1, r4, lsr r3
   14210:	andeq	r4, r1, r4, lsr r3
   14214:	andeq	r4, r1, r4, lsr r3
   14218:	andeq	r4, r1, r4, lsr r3
   1421c:	andeq	r4, r1, r4, lsr r3
   14220:	andeq	r4, r1, r4, lsr r3
   14224:	andeq	r4, r1, ip, lsr #8
   14228:	andeq	r4, r1, ip, lsr #8
   1422c:	andeq	r4, r1, ip, lsr #8
   14230:	andeq	r4, r1, ip, lsr #8
   14234:	andeq	r4, r1, r0, lsl #11
   14238:	andeq	r4, r1, r4, asr #12
   1423c:	andeq	r4, r1, r4, lsr r3
   14240:	andeq	r4, r1, r4, lsr r3
   14244:	andeq	r4, r1, r4, lsr r3
   14248:	andeq	r4, r1, r4, lsr r3
   1424c:	andeq	r4, r1, r4, lsr r3
   14250:	andeq	r4, r1, r4, lsr r3
   14254:	andeq	r4, r1, r4, lsr r3
   14258:	andeq	r4, r1, r4, lsr r3
   1425c:	andeq	r4, r1, r4, lsr r3
   14260:	andeq	r4, r1, r4, lsr r3
   14264:	andeq	r4, r1, r4, lsr r3
   14268:	andeq	r4, r1, r4, lsr r3
   1426c:	andeq	r4, r1, r4, lsr r3
   14270:	andeq	r4, r1, r4, lsr r3
   14274:	andeq	r4, r1, r4, lsr r3
   14278:	andeq	r4, r1, r4, lsr r3
   1427c:	andeq	r4, r1, r4, lsr r3
   14280:	andeq	r4, r1, r4, lsr r3
   14284:	andeq	r4, r1, r4, lsr r3
   14288:	andeq	r4, r1, r4, lsr r3
   1428c:	andeq	r4, r1, r4, lsr r3
   14290:	andeq	r4, r1, r4, lsr r3
   14294:	andeq	r4, r1, r4, lsr r3
   14298:	andeq	r4, r1, r4, lsr r3
   1429c:	andeq	r4, r1, r4, lsr r3
   142a0:	andeq	r4, r1, r4, lsr r3
   142a4:	andeq	r4, r1, ip, lsr #8
   142a8:	andeq	r4, r1, r4, asr r4
   142ac:	andeq	r4, r1, r4, lsr r3
   142b0:	andeq	r4, r1, ip, lsr #8
   142b4:	andeq	r4, r1, r4, lsr r3
   142b8:	andeq	r4, r1, ip, lsr #8
   142bc:	andeq	r4, r1, r4, lsr r3
   142c0:	andeq	r4, r1, r4, lsr r3
   142c4:	andeq	r4, r1, r4, lsr r3
   142c8:	andeq	r4, r1, r4, lsr r3
   142cc:	andeq	r4, r1, r4, lsr r3
   142d0:	andeq	r4, r1, r4, lsr r3
   142d4:	andeq	r4, r1, r4, lsr r3
   142d8:	andeq	r4, r1, r4, lsr r3
   142dc:	andeq	r4, r1, r4, lsr r3
   142e0:	andeq	r4, r1, r4, lsr r3
   142e4:	andeq	r4, r1, r4, lsr r3
   142e8:	andeq	r4, r1, r4, lsr r3
   142ec:	andeq	r4, r1, r4, lsr r3
   142f0:	andeq	r4, r1, r4, lsr r3
   142f4:	andeq	r4, r1, r4, lsr r3
   142f8:	andeq	r4, r1, r4, lsr r3
   142fc:	andeq	r4, r1, r4, lsr r3
   14300:	andeq	r4, r1, r4, lsr r3
   14304:	andeq	r4, r1, r4, lsr r3
   14308:	andeq	r4, r1, r4, lsr r3
   1430c:	andeq	r4, r1, r4, lsr r3
   14310:	andeq	r4, r1, r4, lsr r3
   14314:	andeq	r4, r1, r4, lsr r3
   14318:	andeq	r4, r1, r4, lsr r3
   1431c:	andeq	r4, r1, r4, lsr r3
   14320:	andeq	r4, r1, r4, lsr r3
   14324:	andeq	r4, r1, r8, ror #7
   14328:	andeq	r4, r1, ip, lsr #8
   1432c:	andeq	r4, r1, r8, ror #7
   14330:	andeq	r4, r1, r0, lsl r4
   14334:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14338:	tst	r0, #1
   1433c:	bne	14368 <__assert_fail@plt+0x2d78>
   14340:	ldr	r1, [fp, #16]
   14344:	ubfx	r0, r6, #5, #3
   14348:	mov	r2, #1
   1434c:	ldr	r0, [r1, r0, lsl #2]
   14350:	and	r1, r6, #31
   14354:	tst	r0, r2, lsl r1
   14358:	beq	14368 <__assert_fail@plt+0x2d78>
   1435c:	mov	r0, r6
   14360:	mov	r1, r9
   14364:	b	1437c <__assert_fail@plt+0x2d8c>
   14368:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1436c:	mov	r1, r9
   14370:	cmp	r0, #0
   14374:	mov	r0, r6
   14378:	beq	14ac8 <__assert_fail@plt+0x34d8>
   1437c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14380:	tst	r2, #1
   14384:	bne	14c64 <__assert_fail@plt+0x3674>
   14388:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1438c:	subs	r2, r2, #2
   14390:	movwne	r2, #1
   14394:	orr	r2, r2, lr
   14398:	tst	r2, #1
   1439c:	bne	143d4 <__assert_fail@plt+0x2de4>
   143a0:	cmp	r8, ip
   143a4:	mov	lr, #1
   143a8:	movcc	r2, #39	; 0x27
   143ac:	strbcc	r2, [r5, r8]
   143b0:	add	r2, r8, #1
   143b4:	cmp	r2, ip
   143b8:	movcc	r3, #36	; 0x24
   143bc:	strbcc	r3, [r5, r2]
   143c0:	add	r2, r8, #2
   143c4:	add	r8, r8, #3
   143c8:	cmp	r2, ip
   143cc:	movcc	r3, #39	; 0x27
   143d0:	strbcc	r3, [r5, r2]
   143d4:	cmp	r8, ip
   143d8:	movcc	r2, #92	; 0x5c
   143dc:	strbcc	r2, [r5, r8]
   143e0:	add	r8, r8, #1
   143e4:	b	14b08 <__assert_fail@plt+0x3518>
   143e8:	cmp	sl, #1
   143ec:	beq	14410 <__assert_fail@plt+0x2e20>
   143f0:	mov	r9, #0
   143f4:	cmn	sl, #1
   143f8:	bne	1441c <__assert_fail@plt+0x2e2c>
   143fc:	ldrb	r0, [r4, #1]
   14400:	cmp	r0, #0
   14404:	beq	14410 <__assert_fail@plt+0x2e20>
   14408:	mvn	sl, #0
   1440c:	b	1441c <__assert_fail@plt+0x2e2c>
   14410:	mov	r9, #0
   14414:	cmp	r7, #0
   14418:	beq	14428 <__assert_fail@plt+0x2e38>
   1441c:	mov	r0, #0
   14420:	str	r0, [fp, #-56]	; 0xffffffc8
   14424:	b	14334 <__assert_fail@plt+0x2d44>
   14428:	mov	r1, #1
   1442c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14430:	cmp	r0, #2
   14434:	bne	1444c <__assert_fail@plt+0x2e5c>
   14438:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1443c:	mov	r9, r1
   14440:	tst	r0, #1
   14444:	beq	14334 <__assert_fail@plt+0x2d44>
   14448:	b	14c64 <__assert_fail@plt+0x3674>
   1444c:	mov	r9, r1
   14450:	b	14334 <__assert_fail@plt+0x2d44>
   14454:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14458:	cmp	r0, #2
   1445c:	bne	146a0 <__assert_fail@plt+0x30b0>
   14460:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14464:	tst	r0, #1
   14468:	bne	14c64 <__assert_fail@plt+0x3674>
   1446c:	mov	r0, #0
   14470:	str	r0, [fp, #-56]	; 0xffffffc8
   14474:	b	146b8 <__assert_fail@plt+0x30c8>
   14478:	mov	r0, #102	; 0x66
   1447c:	b	146c4 <__assert_fail@plt+0x30d4>
   14480:	mov	r2, #116	; 0x74
   14484:	b	14494 <__assert_fail@plt+0x2ea4>
   14488:	mov	r0, #98	; 0x62
   1448c:	b	146c4 <__assert_fail@plt+0x30d4>
   14490:	mov	r2, #114	; 0x72
   14494:	ldr	r0, [sp, #68]	; 0x44
   14498:	tst	r0, #1
   1449c:	mov	r0, r2
   144a0:	bne	146c4 <__assert_fail@plt+0x30d4>
   144a4:	b	14c64 <__assert_fail@plt+0x3674>
   144a8:	ldr	r0, [sp, #84]	; 0x54
   144ac:	tst	r0, #1
   144b0:	beq	146e4 <__assert_fail@plt+0x30f4>
   144b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   144b8:	tst	r0, #1
   144bc:	bne	14d50 <__assert_fail@plt+0x3760>
   144c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144c4:	mov	r2, sl
   144c8:	subs	r0, r0, #2
   144cc:	movwne	r0, #1
   144d0:	orr	r0, r0, lr
   144d4:	tst	r0, #1
   144d8:	bne	14510 <__assert_fail@plt+0x2f20>
   144dc:	cmp	r8, ip
   144e0:	mov	lr, #1
   144e4:	movcc	r0, #39	; 0x27
   144e8:	strbcc	r0, [r5, r8]
   144ec:	add	r0, r8, #1
   144f0:	cmp	r0, ip
   144f4:	movcc	r1, #36	; 0x24
   144f8:	strbcc	r1, [r5, r0]
   144fc:	add	r0, r8, #2
   14500:	add	r8, r8, #3
   14504:	cmp	r0, ip
   14508:	movcc	r1, #39	; 0x27
   1450c:	strbcc	r1, [r5, r0]
   14510:	mov	r1, #1
   14514:	cmp	r8, ip
   14518:	mov	r9, #0
   1451c:	mov	r6, #48	; 0x30
   14520:	str	r1, [fp, #-56]	; 0xffffffc8
   14524:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14528:	movcc	r0, #92	; 0x5c
   1452c:	strbcc	r0, [r5, r8]
   14530:	add	r0, r8, #1
   14534:	cmp	r1, #2
   14538:	beq	14840 <__assert_fail@plt+0x3250>
   1453c:	add	r1, r7, #1
   14540:	cmp	r1, r2
   14544:	bcs	14840 <__assert_fail@plt+0x3250>
   14548:	ldrb	r1, [r4, r1]
   1454c:	sub	r1, r1, #48	; 0x30
   14550:	uxtb	r1, r1
   14554:	cmp	r1, #9
   14558:	bhi	14840 <__assert_fail@plt+0x3250>
   1455c:	cmp	r0, ip
   14560:	movcc	r1, #48	; 0x30
   14564:	strbcc	r1, [r5, r0]
   14568:	add	r0, r8, #2
   1456c:	add	r8, r8, #3
   14570:	cmp	r0, ip
   14574:	movcc	r1, #48	; 0x30
   14578:	strbcc	r1, [r5, r0]
   1457c:	b	14334 <__assert_fail@plt+0x2d44>
   14580:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14584:	mov	r6, #63	; 0x3f
   14588:	cmp	r0, #5
   1458c:	beq	14848 <__assert_fail@plt+0x3258>
   14590:	mov	r1, #0
   14594:	cmp	r0, #2
   14598:	str	r1, [fp, #-56]	; 0xffffffc8
   1459c:	bne	148fc <__assert_fail@plt+0x330c>
   145a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145a4:	mov	r9, #0
   145a8:	b	14440 <__assert_fail@plt+0x2e50>
   145ac:	mov	r0, #118	; 0x76
   145b0:	b	146c4 <__assert_fail@plt+0x30d4>
   145b4:	mov	r0, #1
   145b8:	mov	r6, #39	; 0x27
   145bc:	str	r0, [sp, #60]	; 0x3c
   145c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   145c4:	cmp	r0, #2
   145c8:	bne	1463c <__assert_fail@plt+0x304c>
   145cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145d0:	tst	r0, #1
   145d4:	bne	14c64 <__assert_fail@plt+0x3674>
   145d8:	ldr	r2, [sp, #56]	; 0x38
   145dc:	clz	r1, ip
   145e0:	mov	lr, #0
   145e4:	lsr	r1, r1, #5
   145e8:	cmp	r2, #0
   145ec:	mov	r0, r2
   145f0:	movwne	r0, #1
   145f4:	orrs	r0, r0, r1
   145f8:	moveq	r2, ip
   145fc:	moveq	ip, r0
   14600:	cmp	r8, ip
   14604:	str	r2, [sp, #56]	; 0x38
   14608:	movcc	r0, #39	; 0x27
   1460c:	strbcc	r0, [r5, r8]
   14610:	add	r0, r8, #1
   14614:	cmp	r0, ip
   14618:	movcc	r1, #92	; 0x5c
   1461c:	strbcc	r1, [r5, r0]
   14620:	add	r0, r8, #2
   14624:	add	r8, r8, #3
   14628:	cmp	r0, ip
   1462c:	movcc	r1, #39	; 0x27
   14630:	strbcc	r1, [r5, r0]
   14634:	mov	r0, #0
   14638:	str	r0, [fp, #-56]	; 0xffffffc8
   1463c:	mov	r9, #1
   14640:	b	14334 <__assert_fail@plt+0x2d44>
   14644:	ldr	r0, [sp, #40]	; 0x28
   14648:	str	lr, [sp, #44]	; 0x2c
   1464c:	str	ip, [sp, #88]	; 0x58
   14650:	cmp	r0, #1
   14654:	bne	14704 <__assert_fail@plt+0x3114>
   14658:	str	sl, [sp, #36]	; 0x24
   1465c:	bl	1147c <__ctype_b_loc@plt>
   14660:	ldr	r0, [r0]
   14664:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14668:	mov	r1, #1
   1466c:	add	r0, r0, r6, lsl #1
   14670:	ldrb	r0, [r0, #1]
   14674:	ubfx	r9, r0, #6, #1
   14678:	ldr	r0, [sp, #52]	; 0x34
   1467c:	ldr	lr, [sp, #44]	; 0x2c
   14680:	cmp	r1, #1
   14684:	orr	r3, r9, r0
   14688:	bhi	14904 <__assert_fail@plt+0x3314>
   1468c:	tst	r3, #1
   14690:	beq	14904 <__assert_fail@plt+0x3314>
   14694:	ldr	sl, [sp, #36]	; 0x24
   14698:	ldr	ip, [sp, #88]	; 0x58
   1469c:	b	14334 <__assert_fail@plt+0x2d44>
   146a0:	ldr	r1, [sp, #48]	; 0x30
   146a4:	mov	r0, #0
   146a8:	str	r0, [fp, #-56]	; 0xffffffc8
   146ac:	mov	r0, #92	; 0x5c
   146b0:	cmp	r1, #0
   146b4:	beq	146c4 <__assert_fail@plt+0x30d4>
   146b8:	mov	r6, #92	; 0x5c
   146bc:	mov	r9, #0
   146c0:	b	14ac8 <__assert_fail@plt+0x34d8>
   146c4:	mov	r1, #0
   146c8:	mov	r9, #0
   146cc:	str	r1, [fp, #-56]	; 0xffffffc8
   146d0:	ldr	r1, [sp, #84]	; 0x54
   146d4:	tst	r1, #1
   146d8:	mov	r1, #0
   146dc:	beq	14334 <__assert_fail@plt+0x2d44>
   146e0:	b	1437c <__assert_fail@plt+0x2d8c>
   146e4:	ldr	r0, [sp, #32]
   146e8:	mov	r6, #0
   146ec:	mov	r9, #0
   146f0:	cmp	r0, #0
   146f4:	mov	r0, #0
   146f8:	str	r0, [fp, #-56]	; 0xffffffc8
   146fc:	beq	14334 <__assert_fail@plt+0x2d44>
   14700:	b	14b20 <__assert_fail@plt+0x3530>
   14704:	mov	r0, #0
   14708:	cmn	sl, #1
   1470c:	sub	r3, fp, #40	; 0x28
   14710:	str	r0, [fp, #-36]	; 0xffffffdc
   14714:	str	r0, [fp, #-40]	; 0xffffffd8
   14718:	bne	14730 <__assert_fail@plt+0x3140>
   1471c:	mov	r0, r4
   14720:	bl	114b8 <strlen@plt>
   14724:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14728:	sub	r3, fp, #40	; 0x28
   1472c:	mov	sl, r0
   14730:	ldr	r0, [sp, #72]	; 0x48
   14734:	mov	r9, #1
   14738:	mov	r1, #0
   1473c:	str	sl, [sp, #36]	; 0x24
   14740:	add	r0, r0, r7
   14744:	str	r0, [sp, #20]
   14748:	add	r0, r1, r7
   1474c:	str	r1, [sp, #24]
   14750:	add	r1, r4, r0
   14754:	mov	r4, r0
   14758:	sub	r2, sl, r0
   1475c:	sub	r0, fp, #44	; 0x2c
   14760:	bl	13954 <__assert_fail@plt+0x2364>
   14764:	cmp	r0, #0
   14768:	beq	14b74 <__assert_fail@plt+0x3584>
   1476c:	cmn	r0, #1
   14770:	beq	14b2c <__assert_fail@plt+0x353c>
   14774:	ldr	r2, [sp, #36]	; 0x24
   14778:	cmn	r0, #2
   1477c:	beq	14b34 <__assert_fail@plt+0x3544>
   14780:	ldr	r2, [sp, #64]	; 0x40
   14784:	ldr	ip, [sp, #88]	; 0x58
   14788:	ldr	r4, [sp, #84]	; 0x54
   1478c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   14790:	cmp	r0, #2
   14794:	mov	r1, #0
   14798:	movwcc	r1, #1
   1479c:	eor	r2, r2, #1
   147a0:	orrs	r1, r2, r1
   147a4:	bne	147f4 <__assert_fail@plt+0x3204>
   147a8:	ldr	r1, [sp, #24]
   147ac:	ldr	r2, [sp, #20]
   147b0:	add	r1, r2, r1
   147b4:	sub	r2, r0, #1
   147b8:	ldrb	r3, [r1]
   147bc:	sub	r5, r3, #94	; 0x5e
   147c0:	cmp	r5, #30
   147c4:	bhi	147dc <__assert_fail@plt+0x31ec>
   147c8:	mov	r4, #1
   147cc:	mov	sl, #1073741829	; 0x40000005
   147d0:	tst	sl, r4, lsl r5
   147d4:	ldr	r4, [sp, #84]	; 0x54
   147d8:	bne	14c3c <__assert_fail@plt+0x364c>
   147dc:	sub	r3, r3, #91	; 0x5b
   147e0:	cmp	r3, #2
   147e4:	bcc	14c3c <__assert_fail@plt+0x364c>
   147e8:	add	r1, r1, #1
   147ec:	subs	r2, r2, #1
   147f0:	bne	147b8 <__assert_fail@plt+0x31c8>
   147f4:	ldr	r5, [sp, #24]
   147f8:	str	lr, [fp, #-48]	; 0xffffffd0
   147fc:	add	r5, r0, r5
   14800:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14804:	bl	113bc <iswprint@plt>
   14808:	cmp	r0, #0
   1480c:	sub	r4, fp, #40	; 0x28
   14810:	movwne	r0, #1
   14814:	and	r9, r9, r0
   14818:	mov	r0, r4
   1481c:	bl	11368 <mbsinit@plt>
   14820:	mov	r1, r5
   14824:	mov	r3, r4
   14828:	ldr	sl, [sp, #36]	; 0x24
   1482c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14830:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14834:	cmp	r0, #0
   14838:	beq	14748 <__assert_fail@plt+0x3158>
   1483c:	b	14678 <__assert_fail@plt+0x3088>
   14840:	mov	r8, r0
   14844:	b	14334 <__assert_fail@plt+0x2d44>
   14848:	mov	r0, #0
   1484c:	str	r0, [fp, #-56]	; 0xffffffc8
   14850:	ldr	r0, [sp, #28]
   14854:	cmp	r0, #0
   14858:	beq	148fc <__assert_fail@plt+0x330c>
   1485c:	add	r0, r7, #2
   14860:	mov	r1, sl
   14864:	cmp	r0, sl
   14868:	bcs	148fc <__assert_fail@plt+0x330c>
   1486c:	add	r1, r7, r4
   14870:	ldrb	r1, [r1, #1]
   14874:	cmp	r1, #63	; 0x3f
   14878:	bne	148fc <__assert_fail@plt+0x330c>
   1487c:	ldrb	r9, [r4, r0]
   14880:	sub	r2, r9, #33	; 0x21
   14884:	cmp	r2, #29
   14888:	bhi	148fc <__assert_fail@plt+0x330c>
   1488c:	mov	r1, r4
   14890:	movw	r4, #20929	; 0x51c1
   14894:	mov	r3, #1
   14898:	movt	r4, #14336	; 0x3800
   1489c:	tst	r4, r3, lsl r2
   148a0:	beq	14b88 <__assert_fail@plt+0x3598>
   148a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   148a8:	tst	r2, #1
   148ac:	bne	14d58 <__assert_fail@plt+0x3768>
   148b0:	cmp	r8, ip
   148b4:	mov	r4, r1
   148b8:	mov	r7, r0
   148bc:	mov	r6, r9
   148c0:	movcc	r2, #63	; 0x3f
   148c4:	strbcc	r2, [r5, r8]
   148c8:	add	r2, r8, #1
   148cc:	cmp	r2, ip
   148d0:	movcc	r3, #34	; 0x22
   148d4:	strbcc	r3, [r5, r2]
   148d8:	add	r2, r8, #2
   148dc:	cmp	r2, ip
   148e0:	movcc	r3, #34	; 0x22
   148e4:	strbcc	r3, [r5, r2]
   148e8:	add	r2, r8, #3
   148ec:	add	r8, r8, #4
   148f0:	cmp	r2, ip
   148f4:	movcc	r3, #63	; 0x3f
   148f8:	strbcc	r3, [r5, r2]
   148fc:	mov	r9, #0
   14900:	b	14334 <__assert_fail@plt+0x2d44>
   14904:	ldr	sl, [sp, #36]	; 0x24
   14908:	add	r0, r1, r7
   1490c:	mov	r2, #0
   14910:	str	r3, [sp, #24]
   14914:	str	r0, [fp, #-56]	; 0xffffffc8
   14918:	tst	r3, #1
   1491c:	beq	14948 <__assert_fail@plt+0x3358>
   14920:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14924:	tst	r0, #1
   14928:	beq	14a10 <__assert_fail@plt+0x3420>
   1492c:	ldr	r1, [sp, #88]	; 0x58
   14930:	mov	r0, r3
   14934:	cmp	r8, r1
   14938:	movcc	r1, #92	; 0x5c
   1493c:	strbcc	r1, [r5, r8]
   14940:	add	r8, r8, #1
   14944:	b	14a14 <__assert_fail@plt+0x3424>
   14948:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1494c:	tst	r1, #1
   14950:	bne	14c60 <__assert_fail@plt+0x3670>
   14954:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14958:	subs	r2, r1, #2
   1495c:	movwne	r2, #1
   14960:	orr	r2, r2, lr
   14964:	tst	r2, #1
   14968:	bne	149ac <__assert_fail@plt+0x33bc>
   1496c:	ldr	r1, [sp, #88]	; 0x58
   14970:	add	r2, r8, #1
   14974:	mov	lr, #1
   14978:	cmp	r8, r1
   1497c:	movcc	r1, #39	; 0x27
   14980:	strbcc	r1, [r5, r8]
   14984:	ldr	r1, [sp, #88]	; 0x58
   14988:	cmp	r2, r1
   1498c:	movcc	r1, #36	; 0x24
   14990:	strbcc	r1, [r5, r2]
   14994:	ldr	r1, [sp, #88]	; 0x58
   14998:	add	r2, r8, #2
   1499c:	add	r8, r8, #3
   149a0:	cmp	r2, r1
   149a4:	movcc	r1, #39	; 0x27
   149a8:	strbcc	r1, [r5, r2]
   149ac:	ldr	r1, [sp, #88]	; 0x58
   149b0:	add	r2, r8, #1
   149b4:	mov	r0, r3
   149b8:	cmp	r8, r1
   149bc:	movcc	r1, #92	; 0x5c
   149c0:	strbcc	r1, [r5, r8]
   149c4:	ldr	r1, [sp, #88]	; 0x58
   149c8:	cmp	r2, r1
   149cc:	bcs	149e0 <__assert_fail@plt+0x33f0>
   149d0:	uxtb	r3, r6
   149d4:	mov	r1, #48	; 0x30
   149d8:	orr	r3, r1, r3, lsr #6
   149dc:	strb	r3, [r5, r2]
   149e0:	ldr	r1, [sp, #88]	; 0x58
   149e4:	add	r2, r8, #2
   149e8:	add	r8, r8, #3
   149ec:	cmp	r2, r1
   149f0:	lsrcc	r3, r6, #3
   149f4:	movcc	r1, #6
   149f8:	bficc	r3, r1, #3, #29
   149fc:	mov	r1, #6
   14a00:	bfi	r6, r1, #3, #29
   14a04:	strbcc	r3, [r5, r2]
   14a08:	mov	r2, #1
   14a0c:	b	14a1c <__assert_fail@plt+0x342c>
   14a10:	mov	r0, r3
   14a14:	mov	r1, #0
   14a18:	str	r1, [fp, #-52]	; 0xffffffcc
   14a1c:	mov	ip, r2
   14a20:	and	r1, r2, #1
   14a24:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14a28:	add	r3, r7, #1
   14a2c:	cmp	r2, r3
   14a30:	bls	14ab8 <__assert_fail@plt+0x34c8>
   14a34:	cmp	r1, #0
   14a38:	mvn	r5, lr
   14a3c:	movwne	r1, #1
   14a40:	orr	r5, r5, r1
   14a44:	tst	r5, #1
   14a48:	bne	14a8c <__assert_fail@plt+0x349c>
   14a4c:	ldr	r1, [sp, #88]	; 0x58
   14a50:	ldr	r5, [fp, #-84]	; 0xffffffac
   14a54:	mov	r2, r4
   14a58:	ldr	r4, [sp, #88]	; 0x58
   14a5c:	ldr	r0, [sp, #24]
   14a60:	mov	lr, #0
   14a64:	cmp	r8, r1
   14a68:	movcc	r1, #39	; 0x27
   14a6c:	strbcc	r1, [r5, r8]
   14a70:	add	r1, r8, #1
   14a74:	add	r8, r8, #2
   14a78:	cmp	r1, r4
   14a7c:	movcc	r4, #39	; 0x27
   14a80:	strbcc	r4, [r5, r1]
   14a84:	mov	r4, r2
   14a88:	b	14a90 <__assert_fail@plt+0x34a0>
   14a8c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14a90:	ldr	r1, [sp, #88]	; 0x58
   14a94:	mov	r2, ip
   14a98:	cmp	r8, r1
   14a9c:	ldr	r1, [sp, #72]	; 0x48
   14aa0:	strbcc	r6, [r5, r8]
   14aa4:	add	r8, r8, #1
   14aa8:	ldrb	r6, [r1, r7]
   14aac:	mov	r7, r3
   14ab0:	mov	r3, r0
   14ab4:	b	14918 <__assert_fail@plt+0x3328>
   14ab8:	ldr	ip, [sp, #88]	; 0x58
   14abc:	cmp	r1, #0
   14ac0:	movwne	r1, #1
   14ac4:	str	r1, [fp, #-56]	; 0xffffffc8
   14ac8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14acc:	cmp	r0, #0
   14ad0:	bne	14b00 <__assert_fail@plt+0x3510>
   14ad4:	tst	lr, #1
   14ad8:	beq	14b00 <__assert_fail@plt+0x3510>
   14adc:	cmp	r8, ip
   14ae0:	mov	lr, #0
   14ae4:	movcc	r0, #39	; 0x27
   14ae8:	strbcc	r0, [r5, r8]
   14aec:	add	r0, r8, #1
   14af0:	add	r8, r8, #2
   14af4:	cmp	r0, ip
   14af8:	movcc	r1, #39	; 0x27
   14afc:	strbcc	r1, [r5, r0]
   14b00:	mov	r1, r9
   14b04:	mov	r0, r6
   14b08:	cmp	r8, ip
   14b0c:	strbcc	r0, [r5, r8]
   14b10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b14:	add	r8, r8, #1
   14b18:	and	r0, r0, r1
   14b1c:	str	r0, [fp, #-48]	; 0xffffffd0
   14b20:	mov	r3, sl
   14b24:	add	r7, r7, #1
   14b28:	b	14018 <__assert_fail@plt+0x2a28>
   14b2c:	mov	r9, #0
   14b30:	b	14b74 <__assert_fail@plt+0x3584>
   14b34:	mov	r9, #0
   14b38:	cmp	r2, r4
   14b3c:	bls	14b74 <__assert_fail@plt+0x3584>
   14b40:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b44:	ldr	r1, [sp, #24]
   14b48:	add	r0, r4, r7
   14b4c:	mov	r3, r1
   14b50:	ldrb	r1, [r0, r1]
   14b54:	cmp	r1, #0
   14b58:	beq	14b80 <__assert_fail@plt+0x3590>
   14b5c:	add	r3, r3, #1
   14b60:	add	r1, r7, r3
   14b64:	cmp	r1, r2
   14b68:	mov	r1, r3
   14b6c:	bcc	14b4c <__assert_fail@plt+0x355c>
   14b70:	b	14678 <__assert_fail@plt+0x3088>
   14b74:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b78:	ldr	r1, [sp, #24]
   14b7c:	b	14678 <__assert_fail@plt+0x3088>
   14b80:	mov	r1, r3
   14b84:	b	14678 <__assert_fail@plt+0x3088>
   14b88:	mov	r9, #0
   14b8c:	mov	r4, r1
   14b90:	b	14334 <__assert_fail@plt+0x2d44>
   14b94:	mov	sl, r7
   14b98:	b	14ba0 <__assert_fail@plt+0x35b0>
   14b9c:	mvn	sl, #0
   14ba0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14ba4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ba8:	eor	r0, r1, #2
   14bac:	orr	r0, r0, r8
   14bb0:	clz	r0, r0
   14bb4:	lsr	r0, r0, #5
   14bb8:	tst	r2, r0
   14bbc:	bne	14c64 <__assert_fail@plt+0x3674>
   14bc0:	subs	r0, r1, #2
   14bc4:	movwne	r0, #1
   14bc8:	orr	r0, r2, r0
   14bcc:	tst	r0, #1
   14bd0:	ldreq	r0, [sp, #60]	; 0x3c
   14bd4:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   14bd8:	eoreq	r0, r0, #1
   14bdc:	tsteq	r0, #1
   14be0:	bne	14cf8 <__assert_fail@plt+0x3708>
   14be4:	tst	r1, #1
   14be8:	bne	14cc4 <__assert_fail@plt+0x36d4>
   14bec:	ldr	r6, [sp, #56]	; 0x38
   14bf0:	mov	r9, #0
   14bf4:	cmp	r6, #0
   14bf8:	beq	14cf0 <__assert_fail@plt+0x3700>
   14bfc:	ldr	r0, [sp, #84]	; 0x54
   14c00:	mov	r1, #0
   14c04:	mov	r7, #2
   14c08:	cmp	ip, #0
   14c0c:	str	r1, [fp, #-48]	; 0xffffffd0
   14c10:	mov	r1, #0
   14c14:	str	r1, [fp, #-76]	; 0xffffffb4
   14c18:	beq	13d80 <__assert_fail@plt+0x2790>
   14c1c:	b	14cf8 <__assert_fail@plt+0x3708>
   14c20:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14c24:	ldr	r1, [fp, #12]
   14c28:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14c2c:	mov	r5, r3
   14c30:	mov	ip, r6
   14c34:	mov	r3, sl
   14c38:	b	14c88 <__assert_fail@plt+0x3698>
   14c3c:	tst	r4, #1
   14c40:	ldr	r5, [fp, #-84]	; 0xffffffac
   14c44:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14c48:	ldr	r1, [fp, #12]
   14c4c:	ldr	r3, [sp, #36]	; 0x24
   14c50:	mov	r0, #2
   14c54:	movwne	r0, #4
   14c58:	mov	r2, r0
   14c5c:	b	14c88 <__assert_fail@plt+0x3698>
   14c60:	ldr	ip, [sp, #88]	; 0x58
   14c64:	ldr	r1, [sp, #84]	; 0x54
   14c68:	mov	r0, #2
   14c6c:	tst	r1, #1
   14c70:	movwne	r0, #4
   14c74:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14c78:	ldr	r1, [fp, #12]
   14c7c:	mov	r3, sl
   14c80:	cmp	r2, #2
   14c84:	moveq	r2, r0
   14c88:	mov	r0, #0
   14c8c:	bic	r1, r1, #2
   14c90:	str	r2, [sp]
   14c94:	mov	r2, r4
   14c98:	str	r0, [sp, #8]
   14c9c:	ldr	r0, [sp, #76]	; 0x4c
   14ca0:	str	r1, [sp, #4]
   14ca4:	mov	r1, ip
   14ca8:	str	r0, [sp, #12]
   14cac:	ldr	r0, [sp, #80]	; 0x50
   14cb0:	str	r0, [sp, #16]
   14cb4:	mov	r0, r5
   14cb8:	bl	13cf4 <__assert_fail@plt+0x2704>
   14cbc:	mov	r8, r0
   14cc0:	b	14d44 <__assert_fail@plt+0x3754>
   14cc4:	mov	r0, #5
   14cc8:	ldr	r1, [sp, #56]	; 0x38
   14ccc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14cd0:	mov	r3, sl
   14cd4:	str	r0, [sp]
   14cd8:	ldr	r0, [fp, #12]
   14cdc:	str	r0, [sp, #4]
   14ce0:	ldr	r0, [fp, #16]
   14ce4:	str	r0, [sp, #8]
   14ce8:	ldr	r0, [sp, #76]	; 0x4c
   14cec:	b	14ca8 <__assert_fail@plt+0x36b8>
   14cf0:	mov	r0, #0
   14cf4:	str	r0, [fp, #-76]	; 0xffffffb4
   14cf8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14cfc:	cmp	r1, #0
   14d00:	beq	14d38 <__assert_fail@plt+0x3748>
   14d04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14d08:	tst	r0, #1
   14d0c:	bne	14d38 <__assert_fail@plt+0x3748>
   14d10:	ldrb	r0, [r1]
   14d14:	cmp	r0, #0
   14d18:	beq	14d38 <__assert_fail@plt+0x3748>
   14d1c:	add	r1, r1, #1
   14d20:	cmp	r8, ip
   14d24:	strbcc	r0, [r5, r8]
   14d28:	add	r8, r8, #1
   14d2c:	ldrb	r0, [r1], #1
   14d30:	cmp	r0, #0
   14d34:	bne	14d20 <__assert_fail@plt+0x3730>
   14d38:	cmp	r8, ip
   14d3c:	movcc	r0, #0
   14d40:	strbcc	r0, [r5, r8]
   14d44:	mov	r0, r8
   14d48:	sub	sp, fp, #28
   14d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d50:	mov	r0, #4
   14d54:	b	14c74 <__assert_fail@plt+0x3684>
   14d58:	mov	r4, r1
   14d5c:	b	14c64 <__assert_fail@plt+0x3674>
   14d60:	bl	115cc <abort@plt>
   14d64:	mov	r3, r2
   14d68:	mov	r2, #0
   14d6c:	b	14d70 <__assert_fail@plt+0x3780>
   14d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d74:	add	fp, sp, #28
   14d78:	sub	sp, sp, #36	; 0x24
   14d7c:	movw	r8, #33264	; 0x81f0
   14d80:	cmp	r3, #0
   14d84:	mov	r4, r2
   14d88:	str	r2, [sp, #24]
   14d8c:	mov	r5, r1
   14d90:	mov	r6, r0
   14d94:	str	r0, [sp, #20]
   14d98:	movt	r8, #2
   14d9c:	movne	r8, r3
   14da0:	bl	114dc <__errno_location@plt>
   14da4:	str	r0, [sp, #28]
   14da8:	ldr	r1, [r8, #40]	; 0x28
   14dac:	ldr	r2, [r8, #44]	; 0x2c
   14db0:	ldr	r7, [r0]
   14db4:	cmp	r4, #0
   14db8:	add	sl, r8, #8
   14dbc:	mov	r0, #0
   14dc0:	ldm	r8, {r3, r9}
   14dc4:	orreq	r9, r9, #1
   14dc8:	stm	sp, {r3, r9, sl}
   14dcc:	str	r1, [sp, #12]
   14dd0:	str	r2, [sp, #16]
   14dd4:	mov	r1, #0
   14dd8:	mov	r2, r6
   14ddc:	mov	r3, r5
   14de0:	str	r7, [sp, #32]
   14de4:	mov	r7, r5
   14de8:	bl	13cf4 <__assert_fail@plt+0x2704>
   14dec:	add	r4, r0, #1
   14df0:	mov	r5, r0
   14df4:	mov	r0, r4
   14df8:	bl	15e74 <__assert_fail@plt+0x4884>
   14dfc:	mov	r6, r0
   14e00:	ldr	r0, [r8]
   14e04:	ldr	r2, [r8, #44]	; 0x2c
   14e08:	ldr	r1, [r8, #40]	; 0x28
   14e0c:	mov	r3, r7
   14e10:	stm	sp, {r0, r9, sl}
   14e14:	str	r2, [sp, #16]
   14e18:	ldr	r2, [sp, #20]
   14e1c:	str	r1, [sp, #12]
   14e20:	mov	r0, r6
   14e24:	mov	r1, r4
   14e28:	bl	13cf4 <__assert_fail@plt+0x2704>
   14e2c:	ldr	r0, [sp, #24]
   14e30:	ldr	r1, [sp, #32]
   14e34:	ldr	r2, [sp, #28]
   14e38:	cmp	r0, #0
   14e3c:	str	r1, [r2]
   14e40:	strne	r5, [r0]
   14e44:	mov	r0, r6
   14e48:	sub	sp, fp, #28
   14e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14e54:	add	fp, sp, #24
   14e58:	movw	r5, #33076	; 0x8134
   14e5c:	movw	r8, #33072	; 0x8130
   14e60:	movt	r5, #2
   14e64:	movt	r8, #2
   14e68:	ldr	r0, [r5]
   14e6c:	ldr	r4, [r8]
   14e70:	cmp	r0, #2
   14e74:	blt	14ea0 <__assert_fail@plt+0x38b0>
   14e78:	add	r7, r4, #12
   14e7c:	mov	r6, #0
   14e80:	ldr	r0, [r7, r6, lsl #3]
   14e84:	bl	1377c <__assert_fail@plt+0x218c>
   14e88:	ldr	r1, [r5]
   14e8c:	add	r2, r6, #2
   14e90:	add	r0, r6, #1
   14e94:	mov	r6, r0
   14e98:	cmp	r2, r1
   14e9c:	blt	14e80 <__assert_fail@plt+0x3890>
   14ea0:	ldr	r0, [r4, #4]
   14ea4:	movw	r9, #33312	; 0x8220
   14ea8:	movw	r7, #33080	; 0x8138
   14eac:	movt	r9, #2
   14eb0:	movt	r7, #2
   14eb4:	cmp	r0, r9
   14eb8:	beq	14ec8 <__assert_fail@plt+0x38d8>
   14ebc:	bl	1377c <__assert_fail@plt+0x218c>
   14ec0:	mov	r0, #256	; 0x100
   14ec4:	stm	r7, {r0, r9}
   14ec8:	cmp	r4, r7
   14ecc:	beq	14edc <__assert_fail@plt+0x38ec>
   14ed0:	mov	r0, r4
   14ed4:	bl	1377c <__assert_fail@plt+0x218c>
   14ed8:	str	r7, [r8]
   14edc:	mov	r0, #1
   14ee0:	str	r0, [r5]
   14ee4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ee8:	movw	r3, #33264	; 0x81f0
   14eec:	mvn	r2, #0
   14ef0:	movt	r3, #2
   14ef4:	b	14ef8 <__assert_fail@plt+0x3908>
   14ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14efc:	add	fp, sp, #28
   14f00:	sub	sp, sp, #44	; 0x2c
   14f04:	mov	r7, r3
   14f08:	str	r2, [sp, #36]	; 0x24
   14f0c:	str	r1, [sp, #32]
   14f10:	mov	r5, r0
   14f14:	bl	114dc <__errno_location@plt>
   14f18:	cmp	r5, #0
   14f1c:	bmi	1508c <__assert_fail@plt+0x3a9c>
   14f20:	cmn	r5, #-2147483647	; 0x80000001
   14f24:	beq	1508c <__assert_fail@plt+0x3a9c>
   14f28:	movw	r8, #33076	; 0x8134
   14f2c:	movw	r4, #33072	; 0x8130
   14f30:	str	r0, [sp, #28]
   14f34:	ldr	r0, [r0]
   14f38:	movt	r8, #2
   14f3c:	movt	r4, #2
   14f40:	ldr	r1, [r8]
   14f44:	ldr	r6, [r4]
   14f48:	str	r0, [sp, #24]
   14f4c:	cmp	r1, r5
   14f50:	ble	14f5c <__assert_fail@plt+0x396c>
   14f54:	mov	sl, r6
   14f58:	b	14fc8 <__assert_fail@plt+0x39d8>
   14f5c:	movw	r9, #33080	; 0x8138
   14f60:	mov	r0, #8
   14f64:	str	r1, [fp, #-32]	; 0xffffffe0
   14f68:	sub	r1, r5, r1
   14f6c:	mvn	r3, #-2147483648	; 0x80000000
   14f70:	movt	r9, #2
   14f74:	str	r0, [sp]
   14f78:	add	r2, r1, #1
   14f7c:	sub	r1, fp, #32
   14f80:	subs	r0, r6, r9
   14f84:	movne	r0, r6
   14f88:	bl	15fa4 <__assert_fail@plt+0x49b4>
   14f8c:	mov	sl, r0
   14f90:	cmp	r6, r9
   14f94:	str	r0, [r4]
   14f98:	bne	14fa4 <__assert_fail@plt+0x39b4>
   14f9c:	ldrd	r0, [r9]
   14fa0:	stm	sl, {r0, r1}
   14fa4:	ldr	r1, [r8]
   14fa8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14fac:	add	r0, sl, r1, lsl #3
   14fb0:	sub	r1, r2, r1
   14fb4:	lsl	r2, r1, #3
   14fb8:	mov	r1, #0
   14fbc:	bl	11500 <memset@plt>
   14fc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14fc4:	str	r0, [r8]
   14fc8:	mov	r9, sl
   14fcc:	ldm	r7, {r0, r1}
   14fd0:	orr	r8, r1, #1
   14fd4:	add	r1, r7, #8
   14fd8:	ldr	r2, [r7, #40]	; 0x28
   14fdc:	ldr	r3, [r7, #44]	; 0x2c
   14fe0:	ldr	r6, [r9, r5, lsl #3]!
   14fe4:	str	r1, [sp, #20]
   14fe8:	ldr	r4, [r9, #4]!
   14fec:	stm	sp, {r0, r8}
   14ff0:	add	r0, sp, #8
   14ff4:	stm	r0, {r1, r2, r3}
   14ff8:	ldr	r2, [sp, #32]
   14ffc:	ldr	r3, [sp, #36]	; 0x24
   15000:	mov	r1, r6
   15004:	mov	r0, r4
   15008:	bl	13cf4 <__assert_fail@plt+0x2704>
   1500c:	cmp	r6, r0
   15010:	bhi	15074 <__assert_fail@plt+0x3a84>
   15014:	add	r6, r0, #1
   15018:	movw	r0, #33312	; 0x8220
   1501c:	movt	r0, #2
   15020:	str	r6, [sl, r5, lsl #3]
   15024:	cmp	r4, r0
   15028:	beq	15034 <__assert_fail@plt+0x3a44>
   1502c:	mov	r0, r4
   15030:	bl	1377c <__assert_fail@plt+0x218c>
   15034:	mov	r0, r6
   15038:	bl	15e74 <__assert_fail@plt+0x4884>
   1503c:	str	r0, [r9]
   15040:	mov	r4, r0
   15044:	add	r3, sp, #8
   15048:	ldr	r0, [r7]
   1504c:	ldr	r1, [r7, #40]	; 0x28
   15050:	ldr	r2, [r7, #44]	; 0x2c
   15054:	stm	sp, {r0, r8}
   15058:	ldr	r0, [sp, #20]
   1505c:	stm	r3, {r0, r1, r2}
   15060:	ldr	r2, [sp, #32]
   15064:	ldr	r3, [sp, #36]	; 0x24
   15068:	mov	r0, r4
   1506c:	mov	r1, r6
   15070:	bl	13cf4 <__assert_fail@plt+0x2704>
   15074:	ldr	r0, [sp, #28]
   15078:	ldr	r1, [sp, #24]
   1507c:	str	r1, [r0]
   15080:	mov	r0, r4
   15084:	sub	sp, fp, #28
   15088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1508c:	bl	115cc <abort@plt>
   15090:	movw	r3, #33264	; 0x81f0
   15094:	movt	r3, #2
   15098:	b	14ef8 <__assert_fail@plt+0x3908>
   1509c:	movw	r3, #33264	; 0x81f0
   150a0:	mov	r1, r0
   150a4:	mov	r0, #0
   150a8:	mvn	r2, #0
   150ac:	movt	r3, #2
   150b0:	b	14ef8 <__assert_fail@plt+0x3908>
   150b4:	movw	r3, #33264	; 0x81f0
   150b8:	mov	r2, r1
   150bc:	mov	r1, r0
   150c0:	mov	r0, #0
   150c4:	movt	r3, #2
   150c8:	b	14ef8 <__assert_fail@plt+0x3908>
   150cc:	push	{fp, lr}
   150d0:	mov	fp, sp
   150d4:	sub	sp, sp, #48	; 0x30
   150d8:	vmov.i32	q8, #0	; 0x00000000
   150dc:	mov	ip, #32
   150e0:	mov	r3, sp
   150e4:	mov	lr, r2
   150e8:	cmp	r1, #10
   150ec:	add	r2, r3, #16
   150f0:	vst1.64	{d16-d17}, [r3], ip
   150f4:	vst1.64	{d16-d17}, [r2]
   150f8:	vst1.64	{d16-d17}, [r3]
   150fc:	beq	1511c <__assert_fail@plt+0x3b2c>
   15100:	str	r1, [sp]
   15104:	mov	r3, sp
   15108:	mov	r1, lr
   1510c:	mvn	r2, #0
   15110:	bl	14ef8 <__assert_fail@plt+0x3908>
   15114:	mov	sp, fp
   15118:	pop	{fp, pc}
   1511c:	bl	115cc <abort@plt>
   15120:	push	{r4, sl, fp, lr}
   15124:	add	fp, sp, #8
   15128:	sub	sp, sp, #48	; 0x30
   1512c:	vmov.i32	q8, #0	; 0x00000000
   15130:	mov	ip, r3
   15134:	mov	r3, sp
   15138:	mov	lr, #32
   1513c:	cmp	r1, #10
   15140:	add	r4, r3, #16
   15144:	vst1.64	{d16-d17}, [r3], lr
   15148:	vst1.64	{d16-d17}, [r4]
   1514c:	vst1.64	{d16-d17}, [r3]
   15150:	beq	15170 <__assert_fail@plt+0x3b80>
   15154:	str	r1, [sp]
   15158:	mov	r1, r2
   1515c:	mov	r3, sp
   15160:	mov	r2, ip
   15164:	bl	14ef8 <__assert_fail@plt+0x3908>
   15168:	sub	sp, fp, #8
   1516c:	pop	{r4, sl, fp, pc}
   15170:	bl	115cc <abort@plt>
   15174:	mov	r2, r1
   15178:	mov	r1, r0
   1517c:	mov	r0, #0
   15180:	b	150cc <__assert_fail@plt+0x3adc>
   15184:	mov	r3, r2
   15188:	mov	r2, r1
   1518c:	mov	r1, r0
   15190:	mov	r0, #0
   15194:	b	15120 <__assert_fail@plt+0x3b30>
   15198:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1519c:	add	fp, sp, #24
   151a0:	sub	sp, sp, #48	; 0x30
   151a4:	movw	r8, #33264	; 0x81f0
   151a8:	mov	lr, r0
   151ac:	mov	r3, sp
   151b0:	mov	ip, r1
   151b4:	movt	r8, #2
   151b8:	mov	r1, r3
   151bc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   151c0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   151c4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   151c8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   151cc:	ubfx	r0, r2, #5, #3
   151d0:	and	r2, r2, #31
   151d4:	mov	r4, #1
   151d8:	add	r0, r3, r0, lsl #2
   151dc:	ldr	r1, [r0, #8]
   151e0:	bic	r4, r4, r1, lsr r2
   151e4:	eor	r1, r1, r4, lsl r2
   151e8:	mov	r2, ip
   151ec:	str	r1, [r0, #8]
   151f0:	mov	r0, #0
   151f4:	mov	r1, lr
   151f8:	bl	14ef8 <__assert_fail@plt+0x3908>
   151fc:	sub	sp, fp, #24
   15200:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15204:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15208:	add	fp, sp, #24
   1520c:	sub	sp, sp, #48	; 0x30
   15210:	movw	lr, #33264	; 0x81f0
   15214:	mov	ip, r0
   15218:	mov	r3, sp
   1521c:	movt	lr, #2
   15220:	mov	r2, r3
   15224:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   15228:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1522c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   15230:	stm	r2, {r0, r4, r5, r6, r7, r8}
   15234:	ubfx	r0, r1, #5, #3
   15238:	and	r1, r1, #31
   1523c:	mov	r7, #1
   15240:	add	r0, r3, r0, lsl #2
   15244:	ldr	r2, [r0, #8]
   15248:	bic	r7, r7, r2, lsr r1
   1524c:	eor	r1, r2, r7, lsl r1
   15250:	mvn	r2, #0
   15254:	str	r1, [r0, #8]
   15258:	mov	r0, #0
   1525c:	mov	r1, ip
   15260:	bl	14ef8 <__assert_fail@plt+0x3908>
   15264:	sub	sp, fp, #24
   15268:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1526c:	push	{r4, r5, r6, r7, fp, lr}
   15270:	add	fp, sp, #16
   15274:	sub	sp, sp, #48	; 0x30
   15278:	movw	lr, #33264	; 0x81f0
   1527c:	mov	ip, r0
   15280:	mov	r3, sp
   15284:	movt	lr, #2
   15288:	mov	r2, r3
   1528c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   15290:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15294:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   15298:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1529c:	mov	r1, ip
   152a0:	mvn	r2, #0
   152a4:	ldr	r0, [sp, #12]
   152a8:	orr	r0, r0, #67108864	; 0x4000000
   152ac:	str	r0, [sp, #12]
   152b0:	mov	r0, #0
   152b4:	bl	14ef8 <__assert_fail@plt+0x3908>
   152b8:	sub	sp, fp, #16
   152bc:	pop	{r4, r5, r6, r7, fp, pc}
   152c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152c4:	add	fp, sp, #24
   152c8:	sub	sp, sp, #48	; 0x30
   152cc:	movw	r8, #33264	; 0x81f0
   152d0:	mov	ip, r1
   152d4:	mov	lr, r0
   152d8:	mov	r3, sp
   152dc:	movt	r8, #2
   152e0:	mov	r2, r3
   152e4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   152e8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   152ec:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   152f0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   152f4:	mov	r1, lr
   152f8:	mov	r2, ip
   152fc:	ldr	r0, [sp, #12]
   15300:	orr	r0, r0, #67108864	; 0x4000000
   15304:	str	r0, [sp, #12]
   15308:	mov	r0, #0
   1530c:	bl	14ef8 <__assert_fail@plt+0x3908>
   15310:	sub	sp, fp, #24
   15314:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15318:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1531c:	add	fp, sp, #24
   15320:	sub	sp, sp, #96	; 0x60
   15324:	vmov.i32	q8, #0	; 0x00000000
   15328:	mov	lr, sp
   1532c:	mov	ip, r2
   15330:	cmp	r1, #10
   15334:	add	r3, lr, #16
   15338:	mov	r2, lr
   1533c:	vst1.64	{d16-d17}, [r3]
   15340:	mov	r3, #28
   15344:	vst1.64	{d16-d17}, [r2], r3
   15348:	vst1.32	{d16-d17}, [r2]
   1534c:	beq	1538c <__assert_fail@plt+0x3d9c>
   15350:	str	r1, [sp, #48]	; 0x30
   15354:	add	r3, sp, #48	; 0x30
   15358:	ldm	lr!, {r2, r4, r5, r6, r7}
   1535c:	add	r1, r3, #4
   15360:	stmia	r1!, {r2, r4, r5, r6, r7}
   15364:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   15368:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1536c:	mvn	r2, #0
   15370:	ldr	r1, [sp, #60]	; 0x3c
   15374:	orr	r1, r1, #67108864	; 0x4000000
   15378:	str	r1, [sp, #60]	; 0x3c
   1537c:	mov	r1, ip
   15380:	bl	14ef8 <__assert_fail@plt+0x3908>
   15384:	sub	sp, fp, #24
   15388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1538c:	bl	115cc <abort@plt>
   15390:	push	{fp, lr}
   15394:	mov	fp, sp
   15398:	sub	sp, sp, #8
   1539c:	mvn	ip, #0
   153a0:	str	ip, [sp]
   153a4:	bl	153b0 <__assert_fail@plt+0x3dc0>
   153a8:	mov	sp, fp
   153ac:	pop	{fp, pc}
   153b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   153b4:	add	fp, sp, #24
   153b8:	sub	sp, sp, #48	; 0x30
   153bc:	movw	ip, #33264	; 0x81f0
   153c0:	mov	lr, r3
   153c4:	mov	r3, sp
   153c8:	cmp	r1, #0
   153cc:	movt	ip, #2
   153d0:	cmpne	r2, #0
   153d4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   153d8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   153dc:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   153e0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   153e4:	mov	r3, #10
   153e8:	str	r3, [sp]
   153ec:	bne	153f4 <__assert_fail@plt+0x3e04>
   153f0:	bl	115cc <abort@plt>
   153f4:	ldr	ip, [fp, #8]
   153f8:	str	r2, [sp, #44]	; 0x2c
   153fc:	str	r1, [sp, #40]	; 0x28
   15400:	mov	r3, sp
   15404:	mov	r1, lr
   15408:	mov	r2, ip
   1540c:	bl	14ef8 <__assert_fail@plt+0x3908>
   15410:	sub	sp, fp, #24
   15414:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15418:	push	{fp, lr}
   1541c:	mov	fp, sp
   15420:	sub	sp, sp, #8
   15424:	mov	r3, r2
   15428:	mov	r2, r1
   1542c:	mov	r1, r0
   15430:	mvn	r0, #0
   15434:	str	r0, [sp]
   15438:	mov	r0, #0
   1543c:	bl	153b0 <__assert_fail@plt+0x3dc0>
   15440:	mov	sp, fp
   15444:	pop	{fp, pc}
   15448:	push	{fp, lr}
   1544c:	mov	fp, sp
   15450:	sub	sp, sp, #8
   15454:	mov	ip, r2
   15458:	mov	r2, r1
   1545c:	mov	r1, r0
   15460:	str	r3, [sp]
   15464:	mov	r0, #0
   15468:	mov	r3, ip
   1546c:	bl	153b0 <__assert_fail@plt+0x3dc0>
   15470:	mov	sp, fp
   15474:	pop	{fp, pc}
   15478:	movw	r3, #33088	; 0x8140
   1547c:	movt	r3, #2
   15480:	b	14ef8 <__assert_fail@plt+0x3908>
   15484:	movw	r3, #33088	; 0x8140
   15488:	mov	r2, r1
   1548c:	mov	r1, r0
   15490:	mov	r0, #0
   15494:	movt	r3, #2
   15498:	b	14ef8 <__assert_fail@plt+0x3908>
   1549c:	movw	r3, #33088	; 0x8140
   154a0:	mvn	r2, #0
   154a4:	movt	r3, #2
   154a8:	b	14ef8 <__assert_fail@plt+0x3908>
   154ac:	movw	r3, #33088	; 0x8140
   154b0:	mov	r1, r0
   154b4:	mov	r0, #0
   154b8:	mvn	r2, #0
   154bc:	movt	r3, #2
   154c0:	b	14ef8 <__assert_fail@plt+0x3908>
   154c4:	push	{r4, r5, fp, lr}
   154c8:	add	fp, sp, #8
   154cc:	mov	r5, r0
   154d0:	mov	r4, r1
   154d4:	mov	r0, #0
   154d8:	mov	r2, #5
   154dc:	mov	r1, r5
   154e0:	bl	11374 <dcgettext@plt>
   154e4:	cmp	r0, r5
   154e8:	popne	{r4, r5, fp, pc}
   154ec:	bl	16474 <__assert_fail@plt+0x4e84>
   154f0:	ldrb	r1, [r0]
   154f4:	and	r1, r1, #223	; 0xdf
   154f8:	cmp	r1, #71	; 0x47
   154fc:	beq	15564 <__assert_fail@plt+0x3f74>
   15500:	cmp	r1, #85	; 0x55
   15504:	bne	155bc <__assert_fail@plt+0x3fcc>
   15508:	ldrb	r1, [r0, #1]
   1550c:	and	r1, r1, #223	; 0xdf
   15510:	cmp	r1, #84	; 0x54
   15514:	bne	155bc <__assert_fail@plt+0x3fcc>
   15518:	ldrb	r1, [r0, #2]
   1551c:	and	r1, r1, #223	; 0xdf
   15520:	cmp	r1, #70	; 0x46
   15524:	bne	155bc <__assert_fail@plt+0x3fcc>
   15528:	ldrb	r1, [r0, #3]
   1552c:	cmp	r1, #45	; 0x2d
   15530:	bne	155bc <__assert_fail@plt+0x3fcc>
   15534:	ldrb	r1, [r0, #4]
   15538:	cmp	r1, #56	; 0x38
   1553c:	bne	155bc <__assert_fail@plt+0x3fcc>
   15540:	ldrb	r0, [r0, #5]
   15544:	cmp	r0, #0
   15548:	bne	155bc <__assert_fail@plt+0x3fcc>
   1554c:	ldrb	r1, [r5]
   15550:	movw	r2, #30708	; 0x77f4
   15554:	movw	r0, #30712	; 0x77f8
   15558:	movt	r2, #1
   1555c:	movt	r0, #1
   15560:	b	155ec <__assert_fail@plt+0x3ffc>
   15564:	ldrb	r1, [r0, #1]
   15568:	and	r1, r1, #223	; 0xdf
   1556c:	cmp	r1, #66	; 0x42
   15570:	bne	155bc <__assert_fail@plt+0x3fcc>
   15574:	ldrb	r1, [r0, #2]
   15578:	cmp	r1, #49	; 0x31
   1557c:	bne	155bc <__assert_fail@plt+0x3fcc>
   15580:	ldrb	r1, [r0, #3]
   15584:	cmp	r1, #56	; 0x38
   15588:	bne	155bc <__assert_fail@plt+0x3fcc>
   1558c:	ldrb	r1, [r0, #4]
   15590:	cmp	r1, #48	; 0x30
   15594:	bne	155bc <__assert_fail@plt+0x3fcc>
   15598:	ldrb	r1, [r0, #5]
   1559c:	cmp	r1, #51	; 0x33
   155a0:	bne	155bc <__assert_fail@plt+0x3fcc>
   155a4:	ldrb	r1, [r0, #6]
   155a8:	cmp	r1, #48	; 0x30
   155ac:	bne	155bc <__assert_fail@plt+0x3fcc>
   155b0:	ldrb	r0, [r0, #7]
   155b4:	cmp	r0, #0
   155b8:	beq	155d8 <__assert_fail@plt+0x3fe8>
   155bc:	movw	r1, #29687	; 0x73f7
   155c0:	movw	r0, #30706	; 0x77f2
   155c4:	cmp	r4, #9
   155c8:	movt	r1, #1
   155cc:	movt	r0, #1
   155d0:	moveq	r0, r1
   155d4:	pop	{r4, r5, fp, pc}
   155d8:	ldrb	r1, [r5]
   155dc:	movw	r2, #30716	; 0x77fc
   155e0:	movw	r0, #30720	; 0x7800
   155e4:	movt	r2, #1
   155e8:	movt	r0, #1
   155ec:	cmp	r1, #96	; 0x60
   155f0:	moveq	r0, r2
   155f4:	pop	{r4, r5, fp, pc}
   155f8:	push	{r4, r5, r6, sl, fp, lr}
   155fc:	add	fp, sp, #16
   15600:	sub	sp, sp, #8
   15604:	movw	r5, #25352	; 0x6308
   15608:	movw	r6, #14204	; 0x377c
   1560c:	mov	r4, r0
   15610:	mov	r0, #0
   15614:	mov	r1, #0
   15618:	mov	r2, #0
   1561c:	movt	r5, #1
   15620:	movt	r6, #1
   15624:	str	r0, [r4]
   15628:	str	r0, [r4, #4]
   1562c:	str	r0, [r4, #8]
   15630:	add	r0, r4, #12
   15634:	mov	r3, r5
   15638:	str	r6, [sp]
   1563c:	bl	164ac <_obstack_begin@@Base>
   15640:	add	r0, r4, #56	; 0x38
   15644:	mov	r1, #0
   15648:	mov	r2, #0
   1564c:	mov	r3, r5
   15650:	str	r6, [sp]
   15654:	bl	164ac <_obstack_begin@@Base>
   15658:	add	r0, r4, #100	; 0x64
   1565c:	mov	r1, #0
   15660:	mov	r2, #0
   15664:	mov	r3, r5
   15668:	str	r6, [sp]
   1566c:	bl	164ac <_obstack_begin@@Base>
   15670:	sub	sp, fp, #16
   15674:	pop	{r4, r5, r6, sl, fp, pc}
   15678:	push	{r4, sl, fp, lr}
   1567c:	add	fp, sp, #8
   15680:	mov	r4, r0
   15684:	add	r0, r0, #12
   15688:	mov	r1, #0
   1568c:	bl	16744 <_obstack_free@@Base>
   15690:	add	r0, r4, #56	; 0x38
   15694:	mov	r1, #0
   15698:	bl	16744 <_obstack_free@@Base>
   1569c:	add	r0, r4, #100	; 0x64
   156a0:	mov	r1, #0
   156a4:	pop	{r4, sl, fp, lr}
   156a8:	b	16744 <_obstack_free@@Base>
   156ac:	push	{r4, r5, r6, r7, fp, lr}
   156b0:	add	fp, sp, #16
   156b4:	mov	r5, r1
   156b8:	mov	r4, r0
   156bc:	bl	11518 <fgetc@plt>
   156c0:	cmn	r0, #1
   156c4:	beq	1571c <__assert_fail@plt+0x412c>
   156c8:	mov	r7, r0
   156cc:	add	r6, r5, #12
   156d0:	ldr	r0, [r5, #24]
   156d4:	ldr	r1, [r5, #28]
   156d8:	cmp	r1, r0
   156dc:	bne	156f0 <__assert_fail@plt+0x4100>
   156e0:	mov	r0, r6
   156e4:	mov	r1, #1
   156e8:	bl	165b8 <_obstack_newchunk@@Base>
   156ec:	ldr	r0, [r5, #24]
   156f0:	add	r1, r0, #1
   156f4:	cmp	r7, #0
   156f8:	str	r1, [r5, #24]
   156fc:	strb	r7, [r0]
   15700:	moveq	r0, r5
   15704:	bleq	15848 <__assert_fail@plt+0x4258>
   15708:	mov	r0, r4
   1570c:	bl	11518 <fgetc@plt>
   15710:	mov	r7, r0
   15714:	cmn	r0, #1
   15718:	bne	156d0 <__assert_fail@plt+0x40e0>
   1571c:	ldr	r1, [r5, #20]
   15720:	ldr	r0, [r5, #24]
   15724:	cmp	r0, r1
   15728:	beq	15760 <__assert_fail@plt+0x4170>
   1572c:	ldr	r1, [r5, #28]
   15730:	cmp	r1, r0
   15734:	bne	15748 <__assert_fail@plt+0x4158>
   15738:	add	r0, r5, #12
   1573c:	mov	r1, #1
   15740:	bl	165b8 <_obstack_newchunk@@Base>
   15744:	ldr	r0, [r5, #24]
   15748:	add	r1, r0, #1
   1574c:	str	r1, [r5, #24]
   15750:	mov	r1, #0
   15754:	strb	r1, [r0]
   15758:	mov	r0, r5
   1575c:	bl	15848 <__assert_fail@plt+0x4258>
   15760:	ldr	r0, [r5, #68]	; 0x44
   15764:	ldr	r1, [r5, #72]	; 0x48
   15768:	sub	r1, r1, r0
   1576c:	cmp	r1, #4
   15770:	bcs	15784 <__assert_fail@plt+0x4194>
   15774:	add	r0, r5, #56	; 0x38
   15778:	mov	r1, #4
   1577c:	bl	165b8 <_obstack_newchunk@@Base>
   15780:	ldr	r0, [r5, #68]	; 0x44
   15784:	mov	r1, #0
   15788:	str	r1, [r0]
   1578c:	ldr	r1, [r5, #68]	; 0x44
   15790:	ldr	r0, [r5, #64]	; 0x40
   15794:	add	r2, r1, #4
   15798:	cmp	r2, r0
   1579c:	str	r2, [r5, #68]	; 0x44
   157a0:	bne	157b0 <__assert_fail@plt+0x41c0>
   157a4:	ldrb	r1, [r5, #96]	; 0x60
   157a8:	orr	r1, r1, #2
   157ac:	strb	r1, [r5, #96]	; 0x60
   157b0:	ldr	r7, [r5, #80]	; 0x50
   157b4:	ldr	r3, [r5, #60]	; 0x3c
   157b8:	ldr	r1, [r5, #72]	; 0x48
   157bc:	add	r2, r7, r2
   157c0:	bic	r2, r2, r7
   157c4:	sub	r7, r2, r3
   157c8:	sub	r3, r1, r3
   157cc:	str	r2, [r5, #68]	; 0x44
   157d0:	cmp	r7, r3
   157d4:	movhi	r2, r1
   157d8:	strhi	r1, [r5, #68]	; 0x44
   157dc:	str	r0, [r5, #4]
   157e0:	str	r2, [r5, #64]	; 0x40
   157e4:	ldr	r0, [r5, #108]	; 0x6c
   157e8:	ldr	r2, [r5, #112]	; 0x70
   157ec:	cmp	r2, r0
   157f0:	bne	15800 <__assert_fail@plt+0x4210>
   157f4:	ldrb	r1, [r5, #140]	; 0x8c
   157f8:	orr	r1, r1, #2
   157fc:	strb	r1, [r5, #140]	; 0x8c
   15800:	ldr	r7, [r5, #124]	; 0x7c
   15804:	ldr	r3, [r5, #104]	; 0x68
   15808:	ldr	r1, [r5, #116]	; 0x74
   1580c:	add	r2, r7, r2
   15810:	bic	r2, r2, r7
   15814:	sub	r7, r2, r3
   15818:	sub	r3, r1, r3
   1581c:	str	r2, [r5, #112]	; 0x70
   15820:	cmp	r7, r3
   15824:	strhi	r1, [r5, #112]	; 0x70
   15828:	str	r0, [r5, #8]
   1582c:	movhi	r2, r1
   15830:	mov	r0, r4
   15834:	str	r2, [r5, #108]	; 0x6c
   15838:	bl	11344 <ferror@plt>
   1583c:	clz	r0, r0
   15840:	lsr	r0, r0, #5
   15844:	pop	{r4, r5, r6, r7, fp, pc}
   15848:	push	{r4, r5, r6, r7, fp, lr}
   1584c:	add	fp, sp, #16
   15850:	ldr	r5, [r0, #20]
   15854:	ldr	r6, [r0, #24]
   15858:	mov	r4, r0
   1585c:	cmp	r6, r5
   15860:	bne	15870 <__assert_fail@plt+0x4280>
   15864:	ldrb	r0, [r4, #52]	; 0x34
   15868:	orr	r0, r0, #2
   1586c:	strb	r0, [r4, #52]	; 0x34
   15870:	ldr	r1, [r4, #36]	; 0x24
   15874:	ldr	r2, [r4, #16]
   15878:	ldr	r0, [r4, #28]
   1587c:	mvn	r7, r5
   15880:	add	r3, r1, r6
   15884:	bic	r1, r3, r1
   15888:	sub	r3, r1, r2
   1588c:	sub	r2, r0, r2
   15890:	str	r1, [r4, #24]
   15894:	cmp	r3, r2
   15898:	movhi	r1, r0
   1589c:	strhi	r0, [r4, #24]
   158a0:	str	r1, [r4, #20]
   158a4:	ldr	r0, [r4, #68]	; 0x44
   158a8:	ldr	r1, [r4, #72]	; 0x48
   158ac:	sub	r1, r1, r0
   158b0:	cmp	r1, #4
   158b4:	bcs	158c8 <__assert_fail@plt+0x42d8>
   158b8:	add	r0, r4, #56	; 0x38
   158bc:	mov	r1, #4
   158c0:	bl	165b8 <_obstack_newchunk@@Base>
   158c4:	ldr	r0, [r4, #68]	; 0x44
   158c8:	str	r5, [r0]
   158cc:	add	r6, r6, r7
   158d0:	ldr	r1, [r4, #68]	; 0x44
   158d4:	ldr	r0, [r4, #112]	; 0x70
   158d8:	ldr	r2, [r4, #116]	; 0x74
   158dc:	add	r1, r1, #4
   158e0:	str	r1, [r4, #68]	; 0x44
   158e4:	sub	r1, r2, r0
   158e8:	cmp	r1, #4
   158ec:	bcs	15900 <__assert_fail@plt+0x4310>
   158f0:	add	r0, r4, #100	; 0x64
   158f4:	mov	r1, #4
   158f8:	bl	165b8 <_obstack_newchunk@@Base>
   158fc:	ldr	r0, [r4, #112]	; 0x70
   15900:	str	r6, [r0]
   15904:	ldr	r0, [r4]
   15908:	ldr	r1, [r4, #112]	; 0x70
   1590c:	add	r1, r1, #4
   15910:	add	r0, r0, #1
   15914:	str	r1, [r4, #112]	; 0x70
   15918:	str	r0, [r4]
   1591c:	pop	{r4, r5, r6, r7, fp, pc}
   15920:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15924:	add	fp, sp, #24
   15928:	movw	r8, #0
   1592c:	mov	r6, r2
   15930:	mov	r4, r1
   15934:	mov	r5, r0
   15938:	movt	r8, #32752	; 0x7ff0
   1593c:	mov	r0, r5
   15940:	mov	r1, r4
   15944:	mov	r2, r6
   15948:	bl	11308 <read@plt>
   1594c:	mov	r7, r0
   15950:	cmn	r0, #1
   15954:	bgt	1597c <__assert_fail@plt+0x438c>
   15958:	bl	114dc <__errno_location@plt>
   1595c:	ldr	r0, [r0]
   15960:	cmp	r0, #4
   15964:	beq	1593c <__assert_fail@plt+0x434c>
   15968:	cmp	r6, r8
   1596c:	bls	1597c <__assert_fail@plt+0x438c>
   15970:	cmp	r0, #22
   15974:	mov	r6, r8
   15978:	beq	1593c <__assert_fail@plt+0x434c>
   1597c:	mov	r0, r7
   15980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15984:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15988:	add	fp, sp, #24
   1598c:	sub	sp, sp, #32
   15990:	ldr	r6, [fp, #12]
   15994:	ldr	r7, [fp, #8]
   15998:	mov	r4, r2
   1599c:	mov	r8, r0
   159a0:	cmp	r1, #0
   159a4:	beq	159cc <__assert_fail@plt+0x43dc>
   159a8:	movw	r2, #30808	; 0x7858
   159ac:	mov	r5, r1
   159b0:	str	r3, [sp, #4]
   159b4:	str	r4, [sp]
   159b8:	mov	r0, r8
   159bc:	mov	r1, #1
   159c0:	movt	r2, #1
   159c4:	mov	r3, r5
   159c8:	b	159e4 <__assert_fail@plt+0x43f4>
   159cc:	movw	r2, #30820	; 0x7864
   159d0:	str	r3, [sp]
   159d4:	mov	r0, r8
   159d8:	mov	r1, #1
   159dc:	mov	r3, r4
   159e0:	movt	r2, #1
   159e4:	bl	1153c <__fprintf_chk@plt>
   159e8:	movw	r1, #30827	; 0x786b
   159ec:	mov	r0, #0
   159f0:	mov	r2, #5
   159f4:	movt	r1, #1
   159f8:	bl	11374 <dcgettext@plt>
   159fc:	movw	r2, #31545	; 0x7b39
   15a00:	mov	r3, r0
   15a04:	movw	r0, #2022	; 0x7e6
   15a08:	mov	r1, #1
   15a0c:	movt	r2, #1
   15a10:	str	r0, [sp]
   15a14:	mov	r0, r8
   15a18:	bl	1153c <__fprintf_chk@plt>
   15a1c:	movw	r4, #30196	; 0x75f4
   15a20:	mov	r1, r8
   15a24:	movt	r4, #1
   15a28:	mov	r0, r4
   15a2c:	bl	112d8 <fputs_unlocked@plt>
   15a30:	movw	r1, #30831	; 0x786f
   15a34:	mov	r0, #0
   15a38:	mov	r2, #5
   15a3c:	movt	r1, #1
   15a40:	bl	11374 <dcgettext@plt>
   15a44:	movw	r3, #31002	; 0x791a
   15a48:	mov	r2, r0
   15a4c:	mov	r0, r8
   15a50:	mov	r1, #1
   15a54:	movt	r3, #1
   15a58:	bl	1153c <__fprintf_chk@plt>
   15a5c:	mov	r0, r4
   15a60:	mov	r1, r8
   15a64:	bl	112d8 <fputs_unlocked@plt>
   15a68:	cmp	r6, #9
   15a6c:	bhi	15ad0 <__assert_fail@plt+0x44e0>
   15a70:	add	r0, pc, #0
   15a74:	ldr	pc, [r0, r6, lsl #2]
   15a78:	andeq	r5, r1, r8, lsr #25
   15a7c:	andeq	r5, r1, r0, lsr #21
   15a80:	ldrdeq	r5, [r1], -ip
   15a84:	andeq	r5, r1, r4, lsl #22
   15a88:	andeq	r5, r1, ip, lsr #22
   15a8c:	andeq	r5, r1, r4, asr fp
   15a90:	andeq	r5, r1, ip, ror fp
   15a94:			; <UNDEFINED> instruction: 0x00015bb4
   15a98:	andeq	r5, r1, r4, asr ip
   15a9c:	strdeq	r5, [r1], -ip
   15aa0:	movw	r1, #31036	; 0x793c
   15aa4:	mov	r0, #0
   15aa8:	mov	r2, #5
   15aac:	movt	r1, #1
   15ab0:	bl	11374 <dcgettext@plt>
   15ab4:	ldr	r3, [r7]
   15ab8:	mov	r2, r0
   15abc:	mov	r0, r8
   15ac0:	mov	r1, #1
   15ac4:	sub	sp, fp, #24
   15ac8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15acc:	b	1153c <__fprintf_chk@plt>
   15ad0:	movw	r1, #31355	; 0x7a7b
   15ad4:	movt	r1, #1
   15ad8:	b	15c04 <__assert_fail@plt+0x4614>
   15adc:	movw	r1, #31052	; 0x794c
   15ae0:	mov	r0, #0
   15ae4:	mov	r2, #5
   15ae8:	movt	r1, #1
   15aec:	bl	11374 <dcgettext@plt>
   15af0:	mov	r2, r0
   15af4:	ldr	r3, [r7]
   15af8:	ldr	r0, [r7, #4]
   15afc:	str	r0, [sp]
   15b00:	b	15bf0 <__assert_fail@plt+0x4600>
   15b04:	movw	r1, #31075	; 0x7963
   15b08:	mov	r0, #0
   15b0c:	mov	r2, #5
   15b10:	movt	r1, #1
   15b14:	bl	11374 <dcgettext@plt>
   15b18:	mov	r2, r0
   15b1c:	ldr	r3, [r7]
   15b20:	ldmib	r7, {r0, r1}
   15b24:	stm	sp, {r0, r1}
   15b28:	b	15bf0 <__assert_fail@plt+0x4600>
   15b2c:	movw	r1, #31103	; 0x797f
   15b30:	mov	r0, #0
   15b34:	mov	r2, #5
   15b38:	movt	r1, #1
   15b3c:	bl	11374 <dcgettext@plt>
   15b40:	ldr	r3, [r7]
   15b44:	mov	r2, r0
   15b48:	ldmib	r7, {r0, r1, r7}
   15b4c:	stm	sp, {r0, r1, r7}
   15b50:	b	15bf0 <__assert_fail@plt+0x4600>
   15b54:	movw	r1, #31135	; 0x799f
   15b58:	mov	r0, #0
   15b5c:	mov	r2, #5
   15b60:	movt	r1, #1
   15b64:	bl	11374 <dcgettext@plt>
   15b68:	ldr	r3, [r7]
   15b6c:	mov	r2, r0
   15b70:	ldmib	r7, {r0, r1, r6, r7}
   15b74:	stm	sp, {r0, r1, r6, r7}
   15b78:	b	15bf0 <__assert_fail@plt+0x4600>
   15b7c:	movw	r1, #31171	; 0x79c3
   15b80:	mov	r0, #0
   15b84:	mov	r2, #5
   15b88:	movt	r1, #1
   15b8c:	bl	11374 <dcgettext@plt>
   15b90:	mov	r2, r0
   15b94:	ldr	r3, [r7]
   15b98:	ldmib	r7, {r0, r1, r6}
   15b9c:	ldr	r5, [r7, #16]
   15ba0:	ldr	r7, [r7, #20]
   15ba4:	stm	sp, {r0, r1, r6}
   15ba8:	str	r5, [sp, #12]
   15bac:	str	r7, [sp, #16]
   15bb0:	b	15bf0 <__assert_fail@plt+0x4600>
   15bb4:	movw	r1, #31211	; 0x79eb
   15bb8:	mov	r0, #0
   15bbc:	mov	r2, #5
   15bc0:	movt	r1, #1
   15bc4:	bl	11374 <dcgettext@plt>
   15bc8:	mov	r2, r0
   15bcc:	ldr	r3, [r7]
   15bd0:	ldmib	r7, {r0, r1, r6}
   15bd4:	ldr	r5, [r7, #16]
   15bd8:	ldr	r4, [r7, #20]
   15bdc:	ldr	r7, [r7, #24]
   15be0:	stm	sp, {r0, r1, r6}
   15be4:	str	r5, [sp, #12]
   15be8:	str	r4, [sp, #16]
   15bec:	str	r7, [sp, #20]
   15bf0:	mov	r0, r8
   15bf4:	mov	r1, #1
   15bf8:	b	15ca4 <__assert_fail@plt+0x46b4>
   15bfc:	movw	r1, #31303	; 0x7a47
   15c00:	movt	r1, #1
   15c04:	mov	r0, #0
   15c08:	mov	r2, #5
   15c0c:	bl	11374 <dcgettext@plt>
   15c10:	mov	ip, r0
   15c14:	ldr	r3, [r7]
   15c18:	ldr	r0, [r7, #4]
   15c1c:	ldr	r1, [r7, #8]
   15c20:	ldr	r6, [r7, #12]
   15c24:	ldr	r5, [r7, #16]
   15c28:	ldr	r4, [r7, #20]
   15c2c:	ldr	r2, [r7, #24]
   15c30:	ldr	lr, [r7, #28]
   15c34:	ldr	r7, [r7, #32]
   15c38:	stm	sp, {r0, r1, r6}
   15c3c:	str	r5, [sp, #12]
   15c40:	str	r4, [sp, #16]
   15c44:	str	r2, [sp, #20]
   15c48:	str	lr, [sp, #24]
   15c4c:	str	r7, [sp, #28]
   15c50:	b	15c98 <__assert_fail@plt+0x46a8>
   15c54:	movw	r1, #31255	; 0x7a17
   15c58:	mov	r0, #0
   15c5c:	mov	r2, #5
   15c60:	movt	r1, #1
   15c64:	bl	11374 <dcgettext@plt>
   15c68:	mov	ip, r0
   15c6c:	ldr	r3, [r7]
   15c70:	ldmib	r7, {r0, r1, r6}
   15c74:	ldr	r5, [r7, #16]
   15c78:	ldr	r4, [r7, #20]
   15c7c:	ldr	r2, [r7, #24]
   15c80:	ldr	r7, [r7, #28]
   15c84:	stm	sp, {r0, r1, r6}
   15c88:	str	r5, [sp, #12]
   15c8c:	str	r4, [sp, #16]
   15c90:	str	r2, [sp, #20]
   15c94:	str	r7, [sp, #24]
   15c98:	mov	r0, r8
   15c9c:	mov	r1, #1
   15ca0:	mov	r2, ip
   15ca4:	bl	1153c <__fprintf_chk@plt>
   15ca8:	sub	sp, fp, #24
   15cac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cb0:	push	{r4, sl, fp, lr}
   15cb4:	add	fp, sp, #8
   15cb8:	sub	sp, sp, #8
   15cbc:	ldr	ip, [fp, #8]
   15cc0:	mov	lr, #0
   15cc4:	ldr	r4, [ip, lr, lsl #2]
   15cc8:	add	lr, lr, #1
   15ccc:	cmp	r4, #0
   15cd0:	bne	15cc4 <__assert_fail@plt+0x46d4>
   15cd4:	sub	r4, lr, #1
   15cd8:	str	ip, [sp]
   15cdc:	str	r4, [sp, #4]
   15ce0:	bl	15984 <__assert_fail@plt+0x4394>
   15ce4:	sub	sp, fp, #8
   15ce8:	pop	{r4, sl, fp, pc}
   15cec:	push	{r4, r5, fp, lr}
   15cf0:	add	fp, sp, #8
   15cf4:	sub	sp, sp, #48	; 0x30
   15cf8:	ldr	r4, [fp, #8]
   15cfc:	mov	ip, #0
   15d00:	add	lr, sp, #8
   15d04:	ldr	r5, [r4]
   15d08:	cmp	r5, #0
   15d0c:	str	r5, [lr, ip, lsl #2]
   15d10:	beq	15d28 <__assert_fail@plt+0x4738>
   15d14:	add	ip, ip, #1
   15d18:	add	r4, r4, #4
   15d1c:	cmp	ip, #10
   15d20:	bne	15d04 <__assert_fail@plt+0x4714>
   15d24:	mov	ip, #10
   15d28:	str	lr, [sp]
   15d2c:	str	ip, [sp, #4]
   15d30:	bl	15984 <__assert_fail@plt+0x4394>
   15d34:	sub	sp, fp, #8
   15d38:	pop	{r4, r5, fp, pc}
   15d3c:	push	{fp, lr}
   15d40:	mov	fp, sp
   15d44:	sub	sp, sp, #8
   15d48:	add	ip, fp, #8
   15d4c:	str	ip, [sp, #4]
   15d50:	str	ip, [sp]
   15d54:	bl	15cec <__assert_fail@plt+0x46fc>
   15d58:	mov	sp, fp
   15d5c:	pop	{fp, pc}
   15d60:	push	{fp, lr}
   15d64:	mov	fp, sp
   15d68:	movw	r0, #33172	; 0x8194
   15d6c:	movt	r0, #2
   15d70:	ldr	r1, [r0]
   15d74:	movw	r0, #30196	; 0x75f4
   15d78:	movt	r0, #1
   15d7c:	bl	112d8 <fputs_unlocked@plt>
   15d80:	movw	r1, #31415	; 0x7ab7
   15d84:	mov	r0, #0
   15d88:	mov	r2, #5
   15d8c:	movt	r1, #1
   15d90:	bl	11374 <dcgettext@plt>
   15d94:	movw	r2, #31435	; 0x7acb
   15d98:	mov	r1, r0
   15d9c:	mov	r0, #1
   15da0:	movt	r2, #1
   15da4:	bl	11524 <__printf_chk@plt>
   15da8:	movw	r1, #31457	; 0x7ae1
   15dac:	mov	r0, #0
   15db0:	mov	r2, #5
   15db4:	movt	r1, #1
   15db8:	bl	11374 <dcgettext@plt>
   15dbc:	movw	r2, #29466	; 0x731a
   15dc0:	movw	r3, #30005	; 0x7535
   15dc4:	mov	r1, r0
   15dc8:	mov	r0, #1
   15dcc:	movt	r2, #1
   15dd0:	movt	r3, #1
   15dd4:	bl	11524 <__printf_chk@plt>
   15dd8:	movw	r1, #31477	; 0x7af5
   15ddc:	mov	r0, #0
   15de0:	mov	r2, #5
   15de4:	movt	r1, #1
   15de8:	bl	11374 <dcgettext@plt>
   15dec:	movw	r2, #31516	; 0x7b1c
   15df0:	mov	r1, r0
   15df4:	mov	r0, #1
   15df8:	movt	r2, #1
   15dfc:	pop	{fp, lr}
   15e00:	b	11524 <__printf_chk@plt>
   15e04:	b	15e08 <__assert_fail@plt+0x4818>
   15e08:	push	{r4, r5, r6, sl, fp, lr}
   15e0c:	add	fp, sp, #16
   15e10:	mov	r4, r2
   15e14:	mov	r5, r1
   15e18:	mov	r6, r0
   15e1c:	bl	16850 <_obstack_memory_used@@Base+0x74>
   15e20:	cmp	r0, #0
   15e24:	popne	{r4, r5, r6, sl, fp, pc}
   15e28:	cmp	r6, #0
   15e2c:	beq	15e40 <__assert_fail@plt+0x4850>
   15e30:	cmp	r5, #0
   15e34:	cmpne	r4, #0
   15e38:	bne	15e40 <__assert_fail@plt+0x4850>
   15e3c:	pop	{r4, r5, r6, sl, fp, pc}
   15e40:	bl	16270 <__assert_fail@plt+0x4c80>
   15e44:	push	{fp, lr}
   15e48:	mov	fp, sp
   15e4c:	bl	16308 <__assert_fail@plt+0x4d18>
   15e50:	cmp	r0, #0
   15e54:	popne	{fp, pc}
   15e58:	bl	16270 <__assert_fail@plt+0x4c80>
   15e5c:	push	{fp, lr}
   15e60:	mov	fp, sp
   15e64:	bl	16308 <__assert_fail@plt+0x4d18>
   15e68:	cmp	r0, #0
   15e6c:	popne	{fp, pc}
   15e70:	bl	16270 <__assert_fail@plt+0x4c80>
   15e74:	push	{fp, lr}
   15e78:	mov	fp, sp
   15e7c:	bl	16308 <__assert_fail@plt+0x4d18>
   15e80:	cmp	r0, #0
   15e84:	popne	{fp, pc}
   15e88:	bl	16270 <__assert_fail@plt+0x4c80>
   15e8c:	push	{r4, r5, fp, lr}
   15e90:	add	fp, sp, #8
   15e94:	mov	r4, r1
   15e98:	mov	r5, r0
   15e9c:	bl	16338 <__assert_fail@plt+0x4d48>
   15ea0:	cmp	r0, #0
   15ea4:	popne	{r4, r5, fp, pc}
   15ea8:	cmp	r5, #0
   15eac:	beq	15ebc <__assert_fail@plt+0x48cc>
   15eb0:	cmp	r4, #0
   15eb4:	bne	15ebc <__assert_fail@plt+0x48cc>
   15eb8:	pop	{r4, r5, fp, pc}
   15ebc:	bl	16270 <__assert_fail@plt+0x4c80>
   15ec0:	push	{fp, lr}
   15ec4:	mov	fp, sp
   15ec8:	cmp	r1, #0
   15ecc:	orreq	r1, r1, #1
   15ed0:	bl	16338 <__assert_fail@plt+0x4d48>
   15ed4:	cmp	r0, #0
   15ed8:	popne	{fp, pc}
   15edc:	bl	16270 <__assert_fail@plt+0x4c80>
   15ee0:	push	{fp, lr}
   15ee4:	mov	fp, sp
   15ee8:	clz	r3, r2
   15eec:	lsr	ip, r3, #5
   15ef0:	clz	r3, r1
   15ef4:	lsr	r3, r3, #5
   15ef8:	orrs	r3, r3, ip
   15efc:	movwne	r1, #1
   15f00:	movwne	r2, #1
   15f04:	bl	16850 <_obstack_memory_used@@Base+0x74>
   15f08:	cmp	r0, #0
   15f0c:	popne	{fp, pc}
   15f10:	bl	16270 <__assert_fail@plt+0x4c80>
   15f14:	push	{fp, lr}
   15f18:	mov	fp, sp
   15f1c:	mov	r2, r1
   15f20:	mov	r1, r0
   15f24:	mov	r0, #0
   15f28:	bl	16850 <_obstack_memory_used@@Base+0x74>
   15f2c:	cmp	r0, #0
   15f30:	popne	{fp, pc}
   15f34:	bl	16270 <__assert_fail@plt+0x4c80>
   15f38:	mov	r2, r1
   15f3c:	mov	r1, r0
   15f40:	mov	r0, #0
   15f44:	b	15ee0 <__assert_fail@plt+0x48f0>
   15f48:	mov	r2, #1
   15f4c:	b	15f50 <__assert_fail@plt+0x4960>
   15f50:	push	{r4, r5, fp, lr}
   15f54:	add	fp, sp, #8
   15f58:	ldr	r5, [r1]
   15f5c:	mov	r4, r1
   15f60:	cmp	r0, #0
   15f64:	beq	15f7c <__assert_fail@plt+0x498c>
   15f68:	mov	r1, #1
   15f6c:	add	r1, r1, r5, lsr #1
   15f70:	adds	r5, r5, r1
   15f74:	bcc	15f94 <__assert_fail@plt+0x49a4>
   15f78:	bl	16270 <__assert_fail@plt+0x4c80>
   15f7c:	cmp	r5, #0
   15f80:	bne	15f94 <__assert_fail@plt+0x49a4>
   15f84:	mov	r1, #64	; 0x40
   15f88:	cmp	r2, #64	; 0x40
   15f8c:	udiv	r5, r1, r2
   15f90:	addhi	r5, r5, #1
   15f94:	mov	r1, r5
   15f98:	bl	15e08 <__assert_fail@plt+0x4818>
   15f9c:	str	r5, [r4]
   15fa0:	pop	{r4, r5, fp, pc}
   15fa4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fa8:	add	fp, sp, #24
   15fac:	ldr	r6, [r1]
   15fb0:	mov	r8, r1
   15fb4:	ldr	r4, [fp, #8]
   15fb8:	add	r1, r6, r6, asr #1
   15fbc:	cmp	r1, r6
   15fc0:	mvnvs	r1, #-2147483648	; 0x80000000
   15fc4:	cmp	r1, r3
   15fc8:	mov	r5, r1
   15fcc:	movgt	r5, r3
   15fd0:	cmn	r3, #1
   15fd4:	movle	r5, r1
   15fd8:	cmn	r4, #1
   15fdc:	ble	15ffc <__assert_fail@plt+0x4a0c>
   15fe0:	cmp	r4, #0
   15fe4:	beq	16050 <__assert_fail@plt+0x4a60>
   15fe8:	cmn	r5, #1
   15fec:	ble	16024 <__assert_fail@plt+0x4a34>
   15ff0:	mvn	r7, #-2147483648	; 0x80000000
   15ff4:	udiv	r1, r7, r4
   15ff8:	b	16018 <__assert_fail@plt+0x4a28>
   15ffc:	cmn	r5, #1
   16000:	ble	16040 <__assert_fail@plt+0x4a50>
   16004:	cmn	r4, #1
   16008:	beq	16050 <__assert_fail@plt+0x4a60>
   1600c:	mov	r1, #-2147483648	; 0x80000000
   16010:	mvn	r7, #-2147483648	; 0x80000000
   16014:	sdiv	r1, r1, r4
   16018:	cmp	r1, r5
   1601c:	bge	16050 <__assert_fail@plt+0x4a60>
   16020:	b	16060 <__assert_fail@plt+0x4a70>
   16024:	beq	16050 <__assert_fail@plt+0x4a60>
   16028:	mov	r1, #-2147483648	; 0x80000000
   1602c:	mvn	r7, #-2147483648	; 0x80000000
   16030:	sdiv	r1, r1, r5
   16034:	cmp	r1, r4
   16038:	bge	16050 <__assert_fail@plt+0x4a60>
   1603c:	b	16060 <__assert_fail@plt+0x4a70>
   16040:	mvn	r7, #-2147483648	; 0x80000000
   16044:	sdiv	r1, r7, r4
   16048:	cmp	r5, r1
   1604c:	blt	16060 <__assert_fail@plt+0x4a70>
   16050:	mul	r1, r5, r4
   16054:	mov	r7, #64	; 0x40
   16058:	cmp	r1, #63	; 0x3f
   1605c:	bgt	16068 <__assert_fail@plt+0x4a78>
   16060:	sdiv	r5, r7, r4
   16064:	mul	r1, r5, r4
   16068:	cmp	r0, #0
   1606c:	moveq	r7, #0
   16070:	streq	r7, [r8]
   16074:	sub	r7, r5, r6
   16078:	cmp	r7, r2
   1607c:	bge	16120 <__assert_fail@plt+0x4b30>
   16080:	add	r5, r6, r2
   16084:	mov	r2, #0
   16088:	mov	r1, #0
   1608c:	cmp	r5, r3
   16090:	movwgt	r2, #1
   16094:	cmn	r3, #1
   16098:	movwgt	r1, #1
   1609c:	cmp	r5, r6
   160a0:	bvs	16108 <__assert_fail@plt+0x4b18>
   160a4:	ands	r1, r1, r2
   160a8:	bne	16108 <__assert_fail@plt+0x4b18>
   160ac:	cmn	r4, #1
   160b0:	ble	160d0 <__assert_fail@plt+0x4ae0>
   160b4:	cmp	r4, #0
   160b8:	beq	1611c <__assert_fail@plt+0x4b2c>
   160bc:	cmn	r5, #1
   160c0:	ble	160f4 <__assert_fail@plt+0x4b04>
   160c4:	mvn	r1, #-2147483648	; 0x80000000
   160c8:	udiv	r1, r1, r4
   160cc:	b	160e8 <__assert_fail@plt+0x4af8>
   160d0:	cmn	r5, #1
   160d4:	ble	1610c <__assert_fail@plt+0x4b1c>
   160d8:	cmn	r4, #1
   160dc:	beq	1611c <__assert_fail@plt+0x4b2c>
   160e0:	mov	r1, #-2147483648	; 0x80000000
   160e4:	sdiv	r1, r1, r4
   160e8:	cmp	r1, r5
   160ec:	bge	1611c <__assert_fail@plt+0x4b2c>
   160f0:	b	16108 <__assert_fail@plt+0x4b18>
   160f4:	beq	1611c <__assert_fail@plt+0x4b2c>
   160f8:	mov	r1, #-2147483648	; 0x80000000
   160fc:	sdiv	r1, r1, r5
   16100:	cmp	r1, r4
   16104:	bge	1611c <__assert_fail@plt+0x4b2c>
   16108:	bl	16270 <__assert_fail@plt+0x4c80>
   1610c:	mvn	r1, #-2147483648	; 0x80000000
   16110:	sdiv	r1, r1, r4
   16114:	cmp	r5, r1
   16118:	blt	16108 <__assert_fail@plt+0x4b18>
   1611c:	mul	r1, r5, r4
   16120:	bl	15e8c <__assert_fail@plt+0x489c>
   16124:	str	r5, [r8]
   16128:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1612c:	push	{fp, lr}
   16130:	mov	fp, sp
   16134:	mov	r1, #1
   16138:	bl	162b4 <__assert_fail@plt+0x4cc4>
   1613c:	cmp	r0, #0
   16140:	popne	{fp, pc}
   16144:	bl	16270 <__assert_fail@plt+0x4c80>
   16148:	push	{fp, lr}
   1614c:	mov	fp, sp
   16150:	bl	162b4 <__assert_fail@plt+0x4cc4>
   16154:	cmp	r0, #0
   16158:	popne	{fp, pc}
   1615c:	bl	16270 <__assert_fail@plt+0x4c80>
   16160:	push	{fp, lr}
   16164:	mov	fp, sp
   16168:	mov	r1, #1
   1616c:	bl	162b4 <__assert_fail@plt+0x4cc4>
   16170:	cmp	r0, #0
   16174:	popne	{fp, pc}
   16178:	bl	16270 <__assert_fail@plt+0x4c80>
   1617c:	push	{fp, lr}
   16180:	mov	fp, sp
   16184:	bl	162b4 <__assert_fail@plt+0x4cc4>
   16188:	cmp	r0, #0
   1618c:	popne	{fp, pc}
   16190:	bl	16270 <__assert_fail@plt+0x4c80>
   16194:	push	{r4, r5, fp, lr}
   16198:	add	fp, sp, #8
   1619c:	mov	r5, r0
   161a0:	mov	r0, r1
   161a4:	mov	r4, r1
   161a8:	bl	16308 <__assert_fail@plt+0x4d18>
   161ac:	cmp	r0, #0
   161b0:	beq	161c4 <__assert_fail@plt+0x4bd4>
   161b4:	mov	r1, r5
   161b8:	mov	r2, r4
   161bc:	pop	{r4, r5, fp, lr}
   161c0:	b	1135c <memcpy@plt>
   161c4:	bl	16270 <__assert_fail@plt+0x4c80>
   161c8:	push	{r4, r5, fp, lr}
   161cc:	add	fp, sp, #8
   161d0:	mov	r5, r0
   161d4:	mov	r0, r1
   161d8:	mov	r4, r1
   161dc:	bl	16308 <__assert_fail@plt+0x4d18>
   161e0:	cmp	r0, #0
   161e4:	beq	161f8 <__assert_fail@plt+0x4c08>
   161e8:	mov	r1, r5
   161ec:	mov	r2, r4
   161f0:	pop	{r4, r5, fp, lr}
   161f4:	b	1135c <memcpy@plt>
   161f8:	bl	16270 <__assert_fail@plt+0x4c80>
   161fc:	push	{r4, r5, fp, lr}
   16200:	add	fp, sp, #8
   16204:	mov	r5, r0
   16208:	add	r0, r1, #1
   1620c:	mov	r4, r1
   16210:	bl	16308 <__assert_fail@plt+0x4d18>
   16214:	cmp	r0, #0
   16218:	beq	16234 <__assert_fail@plt+0x4c44>
   1621c:	mov	r1, #0
   16220:	mov	r2, r4
   16224:	strb	r1, [r0, r4]
   16228:	mov	r1, r5
   1622c:	pop	{r4, r5, fp, lr}
   16230:	b	1135c <memcpy@plt>
   16234:	bl	16270 <__assert_fail@plt+0x4c80>
   16238:	push	{r4, r5, fp, lr}
   1623c:	add	fp, sp, #8
   16240:	mov	r4, r0
   16244:	bl	114b8 <strlen@plt>
   16248:	add	r5, r0, #1
   1624c:	mov	r0, r5
   16250:	bl	16308 <__assert_fail@plt+0x4d18>
   16254:	cmp	r0, #0
   16258:	beq	1626c <__assert_fail@plt+0x4c7c>
   1625c:	mov	r1, r4
   16260:	mov	r2, r5
   16264:	pop	{r4, r5, fp, lr}
   16268:	b	1135c <memcpy@plt>
   1626c:	bl	16270 <__assert_fail@plt+0x4c80>
   16270:	push	{fp, lr}
   16274:	mov	fp, sp
   16278:	movw	r0, #33068	; 0x812c
   1627c:	movw	r1, #31592	; 0x7b68
   16280:	mov	r2, #5
   16284:	movt	r0, #2
   16288:	movt	r1, #1
   1628c:	ldr	r4, [r0]
   16290:	mov	r0, #0
   16294:	bl	11374 <dcgettext@plt>
   16298:	movw	r2, #30524	; 0x773c
   1629c:	mov	r3, r0
   162a0:	mov	r0, r4
   162a4:	mov	r1, #0
   162a8:	movt	r2, #1
   162ac:	bl	11410 <error@plt>
   162b0:	bl	115cc <abort@plt>
   162b4:	clz	r2, r1
   162b8:	clz	r3, r0
   162bc:	lsr	r2, r2, #5
   162c0:	lsr	r3, r3, #5
   162c4:	orrs	r2, r3, r2
   162c8:	movwne	r1, #1
   162cc:	movwne	r0, #1
   162d0:	cmp	r1, #0
   162d4:	beq	16304 <__assert_fail@plt+0x4d14>
   162d8:	mvn	r2, #-2147483648	; 0x80000000
   162dc:	udiv	r2, r2, r1
   162e0:	cmp	r2, r0
   162e4:	bcs	16304 <__assert_fail@plt+0x4d14>
   162e8:	push	{fp, lr}
   162ec:	mov	fp, sp
   162f0:	bl	114dc <__errno_location@plt>
   162f4:	mov	r1, #12
   162f8:	str	r1, [r0]
   162fc:	mov	r0, #0
   16300:	pop	{fp, pc}
   16304:	b	112cc <calloc@plt>
   16308:	cmp	r0, #0
   1630c:	movweq	r0, #1
   16310:	cmn	r0, #1
   16314:	ble	1631c <__assert_fail@plt+0x4d2c>
   16318:	b	11440 <malloc@plt>
   1631c:	push	{fp, lr}
   16320:	mov	fp, sp
   16324:	bl	114dc <__errno_location@plt>
   16328:	mov	r1, #12
   1632c:	str	r1, [r0]
   16330:	mov	r0, #0
   16334:	pop	{fp, pc}
   16338:	push	{fp, lr}
   1633c:	mov	fp, sp
   16340:	cmp	r0, #0
   16344:	beq	16360 <__assert_fail@plt+0x4d70>
   16348:	cmp	r1, #0
   1634c:	beq	1636c <__assert_fail@plt+0x4d7c>
   16350:	cmn	r1, #1
   16354:	ble	16374 <__assert_fail@plt+0x4d84>
   16358:	pop	{fp, lr}
   1635c:	b	1138c <realloc@plt>
   16360:	mov	r0, r1
   16364:	pop	{fp, lr}
   16368:	b	16308 <__assert_fail@plt+0x4d18>
   1636c:	bl	1377c <__assert_fail@plt+0x218c>
   16370:	b	16380 <__assert_fail@plt+0x4d90>
   16374:	bl	114dc <__errno_location@plt>
   16378:	mov	r1, #12
   1637c:	str	r1, [r0]
   16380:	mov	r0, #0
   16384:	pop	{fp, pc}
   16388:	push	{r4, r5, r6, sl, fp, lr}
   1638c:	add	fp, sp, #16
   16390:	mov	r4, r0
   16394:	bl	113ec <__fpending@plt>
   16398:	mov	r5, r0
   1639c:	mov	r0, r4
   163a0:	bl	113f8 <ferror_unlocked@plt>
   163a4:	mov	r6, r0
   163a8:	mov	r0, r4
   163ac:	bl	13684 <__assert_fail@plt+0x2094>
   163b0:	cmp	r6, #0
   163b4:	beq	163d4 <__assert_fail@plt+0x4de4>
   163b8:	mvn	r4, #0
   163bc:	cmp	r0, #0
   163c0:	bne	16400 <__assert_fail@plt+0x4e10>
   163c4:	bl	114dc <__errno_location@plt>
   163c8:	mov	r1, #0
   163cc:	str	r1, [r0]
   163d0:	b	16400 <__assert_fail@plt+0x4e10>
   163d4:	cmp	r0, #0
   163d8:	mov	r4, r0
   163dc:	mvnne	r4, #0
   163e0:	cmp	r5, #0
   163e4:	bne	16400 <__assert_fail@plt+0x4e10>
   163e8:	cmp	r0, #0
   163ec:	beq	16400 <__assert_fail@plt+0x4e10>
   163f0:	bl	114dc <__errno_location@plt>
   163f4:	ldr	r0, [r0]
   163f8:	subs	r4, r0, #9
   163fc:	mvnne	r4, #0
   16400:	mov	r0, r4
   16404:	pop	{r4, r5, r6, sl, fp, pc}
   16408:	push	{r4, sl, fp, lr}
   1640c:	add	fp, sp, #8
   16410:	sub	sp, sp, #264	; 0x108
   16414:	add	r1, sp, #7
   16418:	movw	r2, #257	; 0x101
   1641c:	bl	1688c <_obstack_memory_used@@Base+0xb0>
   16420:	mov	r4, #0
   16424:	cmp	r0, #0
   16428:	bne	16468 <__assert_fail@plt+0x4e78>
   1642c:	movw	r1, #31609	; 0x7b79
   16430:	add	r0, sp, #7
   16434:	mov	r2, #2
   16438:	movt	r1, #1
   1643c:	bl	114ac <bcmp@plt>
   16440:	cmp	r0, #0
   16444:	beq	16468 <__assert_fail@plt+0x4e78>
   16448:	movw	r1, #31611	; 0x7b7b
   1644c:	add	r0, sp, #7
   16450:	mov	r2, #6
   16454:	movt	r1, #1
   16458:	bl	114ac <bcmp@plt>
   1645c:	cmp	r0, #0
   16460:	mov	r4, r0
   16464:	movwne	r4, #1
   16468:	mov	r0, r4
   1646c:	sub	sp, fp, #8
   16470:	pop	{r4, sl, fp, pc}
   16474:	push	{fp, lr}
   16478:	mov	fp, sp
   1647c:	mov	r0, #14
   16480:	bl	11578 <nl_langinfo@plt>
   16484:	movw	r1, #30197	; 0x75f5
   16488:	cmp	r0, #0
   1648c:	movt	r1, #1
   16490:	movne	r1, r0
   16494:	movw	r0, #31617	; 0x7b81
   16498:	ldrb	r2, [r1]
   1649c:	movt	r0, #1
   164a0:	cmp	r2, #0
   164a4:	movne	r0, r1
   164a8:	pop	{fp, pc}

000164ac <_obstack_begin@@Base>:
   164ac:	push	{fp, lr}
   164b0:	mov	fp, sp
   164b4:	str	r3, [r0, #28]
   164b8:	ldr	r3, [fp, #8]
   164bc:	str	r3, [r0, #32]
   164c0:	ldrb	r3, [r0, #40]	; 0x28
   164c4:	and	r3, r3, #254	; 0xfe
   164c8:	strb	r3, [r0, #40]	; 0x28
   164cc:	bl	164d8 <_obstack_begin@@Base+0x2c>
   164d0:	mov	r0, #1
   164d4:	pop	{fp, pc}
   164d8:	push	{r4, r5, r6, sl, fp, lr}
   164dc:	add	fp, sp, #16
   164e0:	cmp	r1, #0
   164e4:	mov	r5, r2
   164e8:	mov	r4, r0
   164ec:	movweq	r1, #4072	; 0xfe8
   164f0:	cmp	r2, #0
   164f4:	movweq	r5, #8
   164f8:	str	r1, [r0]
   164fc:	sub	r6, r5, #1
   16500:	str	r6, [r0, #24]
   16504:	ldrb	r0, [r0, #40]	; 0x28
   16508:	tst	r0, #1
   1650c:	bne	16520 <_obstack_begin@@Base+0x74>
   16510:	ldr	r2, [r4, #28]
   16514:	mov	r0, r1
   16518:	blx	r2
   1651c:	b	1652c <_obstack_begin@@Base+0x80>
   16520:	ldr	r2, [r4, #28]
   16524:	ldr	r0, [r4, #36]	; 0x24
   16528:	blx	r2
   1652c:	cmp	r0, #0
   16530:	str	r0, [r4, #4]
   16534:	addne	r1, r0, r6
   16538:	rsbne	r2, r5, #0
   1653c:	addne	r1, r1, #8
   16540:	andne	r1, r1, r2
   16544:	strne	r1, [r4, #12]
   16548:	strne	r1, [r4, #8]
   1654c:	ldrne	r1, [r4]
   16550:	addne	r1, r0, r1
   16554:	strne	r1, [r0]
   16558:	strne	r1, [r4, #16]
   1655c:	movne	r1, #0
   16560:	strne	r1, [r0, #4]
   16564:	ldrbne	r0, [r4, #40]	; 0x28
   16568:	andne	r0, r0, #249	; 0xf9
   1656c:	strbne	r0, [r4, #40]	; 0x28
   16570:	popne	{r4, r5, r6, sl, fp, pc}
   16574:	movw	r0, #33136	; 0x8170
   16578:	movt	r0, #2
   1657c:	ldr	r0, [r0]
   16580:	blx	r0

00016584 <_obstack_begin_1@@Base>:
   16584:	push	{fp, lr}
   16588:	mov	fp, sp
   1658c:	str	r3, [r0, #28]
   16590:	ldr	r3, [fp, #12]
   16594:	str	r3, [r0, #36]	; 0x24
   16598:	ldr	r3, [fp, #8]
   1659c:	str	r3, [r0, #32]
   165a0:	ldrb	r3, [r0, #40]	; 0x28
   165a4:	orr	r3, r3, #1
   165a8:	strb	r3, [r0, #40]	; 0x28
   165ac:	bl	164d8 <_obstack_begin@@Base+0x2c>
   165b0:	mov	r0, #1
   165b4:	pop	{fp, pc}

000165b8 <_obstack_newchunk@@Base>:
   165b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165bc:	add	fp, sp, #28
   165c0:	sub	sp, sp, #4
   165c4:	mov	r4, r0
   165c8:	ldr	r2, [r0]
   165cc:	ldr	r0, [r0, #8]
   165d0:	ldr	r3, [r4, #12]
   165d4:	sub	r9, r3, r0
   165d8:	ldr	r0, [r4, #24]
   165dc:	mov	r3, #0
   165e0:	add	r1, r9, r1
   165e4:	adds	r6, r1, r0
   165e8:	adc	r0, r3, #0
   165ec:	mov	r3, #100	; 0x64
   165f0:	add	r3, r3, r9, lsr #3
   165f4:	adds	r7, r3, r6
   165f8:	movcs	r7, r6
   165fc:	cmp	r7, r2
   16600:	movcc	r7, r2
   16604:	cmp	r1, r9
   16608:	bcc	16700 <_obstack_newchunk@@Base+0x148>
   1660c:	cmp	r0, #0
   16610:	bne	16700 <_obstack_newchunk@@Base+0x148>
   16614:	ldrb	r0, [r4, #40]	; 0x28
   16618:	ldr	r8, [r4, #4]
   1661c:	tst	r0, #1
   16620:	bne	16634 <_obstack_newchunk@@Base+0x7c>
   16624:	ldr	r1, [r4, #28]
   16628:	mov	r0, r7
   1662c:	blx	r1
   16630:	b	16644 <_obstack_newchunk@@Base+0x8c>
   16634:	ldr	r2, [r4, #28]
   16638:	ldr	r0, [r4, #36]	; 0x24
   1663c:	mov	r1, r7
   16640:	blx	r2
   16644:	mov	r6, r0
   16648:	cmp	r0, #0
   1664c:	beq	16700 <_obstack_newchunk@@Base+0x148>
   16650:	add	r0, r6, r7
   16654:	str	r6, [r4, #4]
   16658:	str	r8, [r6, #4]
   1665c:	mov	r2, r9
   16660:	str	r0, [r4, #16]
   16664:	str	r0, [r6]
   16668:	ldr	r5, [r4, #24]
   1666c:	ldr	sl, [r4, #8]
   16670:	add	r0, r6, r5
   16674:	mov	r1, sl
   16678:	add	r0, r0, #8
   1667c:	bic	r7, r0, r5
   16680:	mov	r0, r7
   16684:	bl	1135c <memcpy@plt>
   16688:	ldrb	r0, [r4, #40]	; 0x28
   1668c:	tst	r0, #2
   16690:	bne	166e0 <_obstack_newchunk@@Base+0x128>
   16694:	add	r1, r8, r5
   16698:	mvn	r0, r5
   1669c:	add	r1, r1, #8
   166a0:	and	r0, r1, r0
   166a4:	cmp	sl, r0
   166a8:	bne	166e0 <_obstack_newchunk@@Base+0x128>
   166ac:	ldr	r0, [r8, #4]
   166b0:	str	r0, [r6, #4]
   166b4:	ldrb	r0, [r4, #40]	; 0x28
   166b8:	tst	r0, #1
   166bc:	bne	166d0 <_obstack_newchunk@@Base+0x118>
   166c0:	ldr	r1, [r4, #32]
   166c4:	mov	r0, r8
   166c8:	blx	r1
   166cc:	b	166e0 <_obstack_newchunk@@Base+0x128>
   166d0:	ldr	r2, [r4, #32]
   166d4:	ldr	r0, [r4, #36]	; 0x24
   166d8:	mov	r1, r8
   166dc:	blx	r2
   166e0:	add	r0, r7, r9
   166e4:	str	r7, [r4, #8]
   166e8:	str	r0, [r4, #12]
   166ec:	ldrb	r0, [r4, #40]	; 0x28
   166f0:	and	r0, r0, #253	; 0xfd
   166f4:	strb	r0, [r4, #40]	; 0x28
   166f8:	sub	sp, fp, #28
   166fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16700:	movw	r0, #33136	; 0x8170
   16704:	movt	r0, #2
   16708:	ldr	r0, [r0]
   1670c:	blx	r0

00016710 <_obstack_allocated_p@@Base>:
   16710:	ldr	r2, [r0, #4]
   16714:	mov	r0, #0
   16718:	cmp	r2, #0
   1671c:	bxeq	lr
   16720:	cmp	r2, r1
   16724:	bcs	16734 <_obstack_allocated_p@@Base+0x24>
   16728:	ldr	r3, [r2]
   1672c:	cmp	r3, r1
   16730:	bcs	1673c <_obstack_allocated_p@@Base+0x2c>
   16734:	ldr	r2, [r2, #4]
   16738:	b	16718 <_obstack_allocated_p@@Base+0x8>
   1673c:	mov	r0, #1
   16740:	bx	lr

00016744 <_obstack_free@@Base>:
   16744:	push	{r4, r5, r6, sl, fp, lr}
   16748:	add	fp, sp, #16
   1674c:	mov	r5, r1
   16750:	ldr	r1, [r0, #4]
   16754:	cmp	r1, #0
   16758:	beq	167b8 <_obstack_free@@Base+0x74>
   1675c:	mov	r4, r0
   16760:	cmp	r1, r5
   16764:	bcs	16774 <_obstack_free@@Base+0x30>
   16768:	ldr	r0, [r1]
   1676c:	cmp	r0, r5
   16770:	bcs	167c4 <_obstack_free@@Base+0x80>
   16774:	ldrb	r0, [r4, #40]	; 0x28
   16778:	ldr	r6, [r1, #4]
   1677c:	tst	r0, #1
   16780:	bne	16794 <_obstack_free@@Base+0x50>
   16784:	ldr	r2, [r4, #32]
   16788:	mov	r0, r1
   1678c:	blx	r2
   16790:	b	167a0 <_obstack_free@@Base+0x5c>
   16794:	ldr	r2, [r4, #32]
   16798:	ldr	r0, [r4, #36]	; 0x24
   1679c:	blx	r2
   167a0:	ldrb	r0, [r4, #40]	; 0x28
   167a4:	cmp	r6, #0
   167a8:	mov	r1, r6
   167ac:	orr	r0, r0, #2
   167b0:	strb	r0, [r4, #40]	; 0x28
   167b4:	bne	16760 <_obstack_free@@Base+0x1c>
   167b8:	cmp	r5, #0
   167bc:	popeq	{r4, r5, r6, sl, fp, pc}
   167c0:	bl	115cc <abort@plt>
   167c4:	str	r5, [r4, #8]
   167c8:	str	r5, [r4, #12]
   167cc:	ldr	r0, [r1]
   167d0:	str	r1, [r4, #4]
   167d4:	str	r0, [r4, #16]
   167d8:	pop	{r4, r5, r6, sl, fp, pc}

000167dc <_obstack_memory_used@@Base>:
   167dc:	ldr	r1, [r0, #4]
   167e0:	mov	r0, #0
   167e4:	cmp	r1, #0
   167e8:	bxeq	lr
   167ec:	ldr	r2, [r1]
   167f0:	sub	r0, r0, r1
   167f4:	ldr	r1, [r1, #4]
   167f8:	add	r0, r0, r2
   167fc:	b	167e4 <_obstack_memory_used@@Base+0x8>
   16800:	push	{fp, lr}
   16804:	mov	fp, sp
   16808:	movw	r0, #33160	; 0x8188
   1680c:	movw	r1, #31592	; 0x7b68
   16810:	mov	r2, #5
   16814:	movt	r0, #2
   16818:	movt	r1, #1
   1681c:	ldr	r4, [r0]
   16820:	mov	r0, #0
   16824:	bl	11374 <dcgettext@plt>
   16828:	movw	r2, #30816	; 0x7860
   1682c:	mov	r3, r0
   16830:	mov	r0, r4
   16834:	mov	r1, #1
   16838:	movt	r2, #1
   1683c:	bl	1153c <__fprintf_chk@plt>
   16840:	movw	r0, #33068	; 0x812c
   16844:	movt	r0, #2
   16848:	ldr	r0, [r0]
   1684c:	bl	11488 <exit@plt>
   16850:	cmp	r2, #0
   16854:	beq	16884 <_obstack_memory_used@@Base+0xa8>
   16858:	mvn	r3, #0
   1685c:	udiv	r3, r3, r2
   16860:	cmp	r3, r1
   16864:	bcs	16884 <_obstack_memory_used@@Base+0xa8>
   16868:	push	{fp, lr}
   1686c:	mov	fp, sp
   16870:	bl	114dc <__errno_location@plt>
   16874:	mov	r1, #12
   16878:	str	r1, [r0]
   1687c:	mov	r0, #0
   16880:	pop	{fp, pc}
   16884:	mul	r1, r2, r1
   16888:	b	16338 <__assert_fail@plt+0x4d48>
   1688c:	push	{r4, r5, r6, r7, fp, lr}
   16890:	add	fp, sp, #16
   16894:	mov	r4, r1
   16898:	mov	r1, #0
   1689c:	mov	r6, r2
   168a0:	bl	11560 <setlocale@plt>
   168a4:	cmp	r0, #0
   168a8:	beq	168d4 <_obstack_memory_used@@Base+0xf8>
   168ac:	mov	r7, r0
   168b0:	bl	114b8 <strlen@plt>
   168b4:	cmp	r0, r6
   168b8:	bcs	168e8 <_obstack_memory_used@@Base+0x10c>
   168bc:	add	r2, r0, #1
   168c0:	mov	r0, r4
   168c4:	mov	r1, r7
   168c8:	bl	1135c <memcpy@plt>
   168cc:	mov	r5, #0
   168d0:	b	16910 <_obstack_memory_used@@Base+0x134>
   168d4:	cmp	r6, #0
   168d8:	mov	r5, #22
   168dc:	movne	r0, #0
   168e0:	strbne	r0, [r4]
   168e4:	b	16910 <_obstack_memory_used@@Base+0x134>
   168e8:	mov	r5, #34	; 0x22
   168ec:	cmp	r6, #0
   168f0:	beq	16910 <_obstack_memory_used@@Base+0x134>
   168f4:	sub	r6, r6, #1
   168f8:	mov	r0, r4
   168fc:	mov	r1, r7
   16900:	mov	r2, r6
   16904:	bl	1135c <memcpy@plt>
   16908:	mov	r0, #0
   1690c:	strb	r0, [r4, r6]
   16910:	mov	r0, r5
   16914:	pop	{r4, r5, r6, r7, fp, pc}
   16918:	mov	r1, #0
   1691c:	b	11560 <setlocale@plt>
   16920:	eor	r1, r1, #-2147483648	; 0x80000000
   16924:	b	1692c <_obstack_memory_used@@Base+0x150>
   16928:	eor	r3, r3, #-2147483648	; 0x80000000
   1692c:	push	{r4, r5, lr}
   16930:	lsl	r4, r1, #1
   16934:	lsl	r5, r3, #1
   16938:	teq	r4, r5
   1693c:	teqeq	r0, r2
   16940:	orrsne	ip, r4, r0
   16944:	orrsne	ip, r5, r2
   16948:	mvnsne	ip, r4, asr #21
   1694c:	mvnsne	ip, r5, asr #21
   16950:	beq	16b3c <_obstack_memory_used@@Base+0x360>
   16954:	lsr	r4, r4, #21
   16958:	rsbs	r5, r4, r5, lsr #21
   1695c:	rsblt	r5, r5, #0
   16960:	ble	16980 <_obstack_memory_used@@Base+0x1a4>
   16964:	add	r4, r4, r5
   16968:	eor	r2, r0, r2
   1696c:	eor	r3, r1, r3
   16970:	eor	r0, r2, r0
   16974:	eor	r1, r3, r1
   16978:	eor	r2, r0, r2
   1697c:	eor	r3, r1, r3
   16980:	cmp	r5, #54	; 0x36
   16984:	pophi	{r4, r5, pc}
   16988:	tst	r1, #-2147483648	; 0x80000000
   1698c:	lsl	r1, r1, #12
   16990:	mov	ip, #1048576	; 0x100000
   16994:	orr	r1, ip, r1, lsr #12
   16998:	beq	169a4 <_obstack_memory_used@@Base+0x1c8>
   1699c:	rsbs	r0, r0, #0
   169a0:	rsc	r1, r1, #0
   169a4:	tst	r3, #-2147483648	; 0x80000000
   169a8:	lsl	r3, r3, #12
   169ac:	orr	r3, ip, r3, lsr #12
   169b0:	beq	169bc <_obstack_memory_used@@Base+0x1e0>
   169b4:	rsbs	r2, r2, #0
   169b8:	rsc	r3, r3, #0
   169bc:	teq	r4, r5
   169c0:	beq	16b24 <_obstack_memory_used@@Base+0x348>
   169c4:	sub	r4, r4, #1
   169c8:	rsbs	lr, r5, #32
   169cc:	blt	169e8 <_obstack_memory_used@@Base+0x20c>
   169d0:	lsl	ip, r2, lr
   169d4:	adds	r0, r0, r2, lsr r5
   169d8:	adc	r1, r1, #0
   169dc:	adds	r0, r0, r3, lsl lr
   169e0:	adcs	r1, r1, r3, asr r5
   169e4:	b	16a04 <_obstack_memory_used@@Base+0x228>
   169e8:	sub	r5, r5, #32
   169ec:	add	lr, lr, #32
   169f0:	cmp	r2, #1
   169f4:	lsl	ip, r3, lr
   169f8:	orrcs	ip, ip, #2
   169fc:	adds	r0, r0, r3, asr r5
   16a00:	adcs	r1, r1, r3, asr #31
   16a04:	and	r5, r1, #-2147483648	; 0x80000000
   16a08:	bpl	16a18 <_obstack_memory_used@@Base+0x23c>
   16a0c:	rsbs	ip, ip, #0
   16a10:	rscs	r0, r0, #0
   16a14:	rsc	r1, r1, #0
   16a18:	cmp	r1, #1048576	; 0x100000
   16a1c:	bcc	16a5c <_obstack_memory_used@@Base+0x280>
   16a20:	cmp	r1, #2097152	; 0x200000
   16a24:	bcc	16a44 <_obstack_memory_used@@Base+0x268>
   16a28:	lsrs	r1, r1, #1
   16a2c:	rrxs	r0, r0
   16a30:	rrx	ip, ip
   16a34:	add	r4, r4, #1
   16a38:	lsl	r2, r4, #21
   16a3c:	cmn	r2, #4194304	; 0x400000
   16a40:	bcs	16b9c <_obstack_memory_used@@Base+0x3c0>
   16a44:	cmp	ip, #-2147483648	; 0x80000000
   16a48:	lsrseq	ip, r0, #1
   16a4c:	adcs	r0, r0, #0
   16a50:	adc	r1, r1, r4, lsl #20
   16a54:	orr	r1, r1, r5
   16a58:	pop	{r4, r5, pc}
   16a5c:	lsls	ip, ip, #1
   16a60:	adcs	r0, r0, r0
   16a64:	adc	r1, r1, r1
   16a68:	tst	r1, #1048576	; 0x100000
   16a6c:	sub	r4, r4, #1
   16a70:	bne	16a44 <_obstack_memory_used@@Base+0x268>
   16a74:	teq	r1, #0
   16a78:	moveq	r1, r0
   16a7c:	moveq	r0, #0
   16a80:	clz	r3, r1
   16a84:	addeq	r3, r3, #32
   16a88:	sub	r3, r3, #11
   16a8c:	subs	r2, r3, #32
   16a90:	bge	16ab4 <_obstack_memory_used@@Base+0x2d8>
   16a94:	adds	r2, r2, #12
   16a98:	ble	16ab0 <_obstack_memory_used@@Base+0x2d4>
   16a9c:	add	ip, r2, #20
   16aa0:	rsb	r2, r2, #12
   16aa4:	lsl	r0, r1, ip
   16aa8:	lsr	r1, r1, r2
   16aac:	b	16ac4 <_obstack_memory_used@@Base+0x2e8>
   16ab0:	add	r2, r2, #20
   16ab4:	rsble	ip, r2, #32
   16ab8:	lsl	r1, r1, r2
   16abc:	orrle	r1, r1, r0, lsr ip
   16ac0:	lslle	r0, r0, r2
   16ac4:	subs	r4, r4, r3
   16ac8:	addge	r1, r1, r4, lsl #20
   16acc:	orrge	r1, r1, r5
   16ad0:	popge	{r4, r5, pc}
   16ad4:	mvn	r4, r4
   16ad8:	subs	r4, r4, #31
   16adc:	bge	16b18 <_obstack_memory_used@@Base+0x33c>
   16ae0:	adds	r4, r4, #12
   16ae4:	bgt	16b00 <_obstack_memory_used@@Base+0x324>
   16ae8:	add	r4, r4, #20
   16aec:	rsb	r2, r4, #32
   16af0:	lsr	r0, r0, r4
   16af4:	orr	r0, r0, r1, lsl r2
   16af8:	orr	r1, r5, r1, lsr r4
   16afc:	pop	{r4, r5, pc}
   16b00:	rsb	r4, r4, #12
   16b04:	rsb	r2, r4, #32
   16b08:	lsr	r0, r0, r2
   16b0c:	orr	r0, r0, r1, lsl r4
   16b10:	mov	r1, r5
   16b14:	pop	{r4, r5, pc}
   16b18:	lsr	r0, r1, r4
   16b1c:	mov	r1, r5
   16b20:	pop	{r4, r5, pc}
   16b24:	teq	r4, #0
   16b28:	eor	r3, r3, #1048576	; 0x100000
   16b2c:	eoreq	r1, r1, #1048576	; 0x100000
   16b30:	addeq	r4, r4, #1
   16b34:	subne	r5, r5, #1
   16b38:	b	169c4 <_obstack_memory_used@@Base+0x1e8>
   16b3c:	mvns	ip, r4, asr #21
   16b40:	mvnsne	ip, r5, asr #21
   16b44:	beq	16bac <_obstack_memory_used@@Base+0x3d0>
   16b48:	teq	r4, r5
   16b4c:	teqeq	r0, r2
   16b50:	beq	16b64 <_obstack_memory_used@@Base+0x388>
   16b54:	orrs	ip, r4, r0
   16b58:	moveq	r1, r3
   16b5c:	moveq	r0, r2
   16b60:	pop	{r4, r5, pc}
   16b64:	teq	r1, r3
   16b68:	movne	r1, #0
   16b6c:	movne	r0, #0
   16b70:	popne	{r4, r5, pc}
   16b74:	lsrs	ip, r4, #21
   16b78:	bne	16b8c <_obstack_memory_used@@Base+0x3b0>
   16b7c:	lsls	r0, r0, #1
   16b80:	adcs	r1, r1, r1
   16b84:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16b88:	pop	{r4, r5, pc}
   16b8c:	adds	r4, r4, #4194304	; 0x400000
   16b90:	addcc	r1, r1, #1048576	; 0x100000
   16b94:	popcc	{r4, r5, pc}
   16b98:	and	r5, r1, #-2147483648	; 0x80000000
   16b9c:	orr	r1, r5, #2130706432	; 0x7f000000
   16ba0:	orr	r1, r1, #15728640	; 0xf00000
   16ba4:	mov	r0, #0
   16ba8:	pop	{r4, r5, pc}
   16bac:	mvns	ip, r4, asr #21
   16bb0:	movne	r1, r3
   16bb4:	movne	r0, r2
   16bb8:	mvnseq	ip, r5, asr #21
   16bbc:	movne	r3, r1
   16bc0:	movne	r2, r0
   16bc4:	orrs	r4, r0, r1, lsl #12
   16bc8:	orrseq	r5, r2, r3, lsl #12
   16bcc:	teqeq	r1, r3
   16bd0:	orrne	r1, r1, #524288	; 0x80000
   16bd4:	pop	{r4, r5, pc}
   16bd8:	teq	r0, #0
   16bdc:	moveq	r1, #0
   16be0:	bxeq	lr
   16be4:	push	{r4, r5, lr}
   16be8:	mov	r4, #1024	; 0x400
   16bec:	add	r4, r4, #50	; 0x32
   16bf0:	mov	r5, #0
   16bf4:	mov	r1, #0
   16bf8:	b	16a74 <_obstack_memory_used@@Base+0x298>
   16bfc:	teq	r0, #0
   16c00:	moveq	r1, #0
   16c04:	bxeq	lr
   16c08:	push	{r4, r5, lr}
   16c0c:	mov	r4, #1024	; 0x400
   16c10:	add	r4, r4, #50	; 0x32
   16c14:	ands	r5, r0, #-2147483648	; 0x80000000
   16c18:	rsbmi	r0, r0, #0
   16c1c:	mov	r1, #0
   16c20:	b	16a74 <_obstack_memory_used@@Base+0x298>
   16c24:	lsls	r2, r0, #1
   16c28:	asr	r1, r2, #3
   16c2c:	rrx	r1, r1
   16c30:	lsl	r0, r2, #28
   16c34:	andsne	r3, r2, #-16777216	; 0xff000000
   16c38:	teqne	r3, #-16777216	; 0xff000000
   16c3c:	eorne	r1, r1, #939524096	; 0x38000000
   16c40:	bxne	lr
   16c44:	bics	r2, r2, #-16777216	; 0xff000000
   16c48:	bxeq	lr
   16c4c:	teq	r3, #-16777216	; 0xff000000
   16c50:	orreq	r1, r1, #524288	; 0x80000
   16c54:	bxeq	lr
   16c58:	push	{r4, r5, lr}
   16c5c:	mov	r4, #896	; 0x380
   16c60:	and	r5, r1, #-2147483648	; 0x80000000
   16c64:	bic	r1, r1, #-2147483648	; 0x80000000
   16c68:	b	16a74 <_obstack_memory_used@@Base+0x298>
   16c6c:	orrs	r2, r0, r1
   16c70:	bxeq	lr
   16c74:	push	{r4, r5, lr}
   16c78:	mov	r5, #0
   16c7c:	b	16c9c <_obstack_memory_used@@Base+0x4c0>
   16c80:	orrs	r2, r0, r1
   16c84:	bxeq	lr
   16c88:	push	{r4, r5, lr}
   16c8c:	ands	r5, r1, #-2147483648	; 0x80000000
   16c90:	bpl	16c9c <_obstack_memory_used@@Base+0x4c0>
   16c94:	rsbs	r0, r0, #0
   16c98:	rsc	r1, r1, #0
   16c9c:	mov	r4, #1024	; 0x400
   16ca0:	add	r4, r4, #50	; 0x32
   16ca4:	lsrs	ip, r1, #22
   16ca8:	beq	16a18 <_obstack_memory_used@@Base+0x23c>
   16cac:	mov	r2, #3
   16cb0:	lsrs	ip, ip, #3
   16cb4:	addne	r2, r2, #3
   16cb8:	lsrs	ip, ip, #3
   16cbc:	addne	r2, r2, #3
   16cc0:	add	r2, r2, ip, lsr #3
   16cc4:	rsb	r3, r2, #32
   16cc8:	lsl	ip, r0, r3
   16ccc:	lsr	r0, r0, r2
   16cd0:	orr	r0, r0, r1, lsl r3
   16cd4:	lsr	r1, r1, r2
   16cd8:	add	r4, r4, r2
   16cdc:	b	16a18 <_obstack_memory_used@@Base+0x23c>
   16ce0:	cmp	r3, #0
   16ce4:	cmpeq	r2, #0
   16ce8:	bne	16d00 <_obstack_memory_used@@Base+0x524>
   16cec:	cmp	r1, #0
   16cf0:	cmpeq	r0, #0
   16cf4:	mvnne	r1, #0
   16cf8:	mvnne	r0, #0
   16cfc:	b	16d1c <_obstack_memory_used@@Base+0x540>
   16d00:	sub	sp, sp, #8
   16d04:	push	{sp, lr}
   16d08:	bl	16d2c <_obstack_memory_used@@Base+0x550>
   16d0c:	ldr	lr, [sp, #4]
   16d10:	add	sp, sp, #8
   16d14:	pop	{r2, r3}
   16d18:	bx	lr
   16d1c:	push	{r1, lr}
   16d20:	mov	r0, #8
   16d24:	bl	112e4 <raise@plt>
   16d28:	pop	{r1, pc}
   16d2c:	cmp	r1, r3
   16d30:	cmpeq	r0, r2
   16d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d38:	mov	r4, r0
   16d3c:	movcc	r0, #0
   16d40:	mov	r5, r1
   16d44:	ldr	lr, [sp, #36]	; 0x24
   16d48:	movcc	r1, r0
   16d4c:	bcc	16e48 <_obstack_memory_used@@Base+0x66c>
   16d50:	cmp	r3, #0
   16d54:	clzeq	ip, r2
   16d58:	clzne	ip, r3
   16d5c:	addeq	ip, ip, #32
   16d60:	cmp	r5, #0
   16d64:	clzeq	r1, r4
   16d68:	addeq	r1, r1, #32
   16d6c:	clzne	r1, r5
   16d70:	sub	ip, ip, r1
   16d74:	sub	sl, ip, #32
   16d78:	lsl	r9, r3, ip
   16d7c:	rsb	fp, ip, #32
   16d80:	orr	r9, r9, r2, lsl sl
   16d84:	orr	r9, r9, r2, lsr fp
   16d88:	lsl	r8, r2, ip
   16d8c:	cmp	r5, r9
   16d90:	cmpeq	r4, r8
   16d94:	movcc	r0, #0
   16d98:	movcc	r1, r0
   16d9c:	bcc	16db8 <_obstack_memory_used@@Base+0x5dc>
   16da0:	mov	r0, #1
   16da4:	subs	r4, r4, r8
   16da8:	lsl	r1, r0, sl
   16dac:	orr	r1, r1, r0, lsr fp
   16db0:	lsl	r0, r0, ip
   16db4:	sbc	r5, r5, r9
   16db8:	cmp	ip, #0
   16dbc:	beq	16e48 <_obstack_memory_used@@Base+0x66c>
   16dc0:	lsr	r6, r8, #1
   16dc4:	orr	r6, r6, r9, lsl #31
   16dc8:	lsr	r7, r9, #1
   16dcc:	mov	r2, ip
   16dd0:	b	16df4 <_obstack_memory_used@@Base+0x618>
   16dd4:	subs	r3, r4, r6
   16dd8:	sbc	r8, r5, r7
   16ddc:	adds	r3, r3, r3
   16de0:	adc	r8, r8, r8
   16de4:	adds	r4, r3, #1
   16de8:	adc	r5, r8, #0
   16dec:	subs	r2, r2, #1
   16df0:	beq	16e10 <_obstack_memory_used@@Base+0x634>
   16df4:	cmp	r5, r7
   16df8:	cmpeq	r4, r6
   16dfc:	bcs	16dd4 <_obstack_memory_used@@Base+0x5f8>
   16e00:	adds	r4, r4, r4
   16e04:	adc	r5, r5, r5
   16e08:	subs	r2, r2, #1
   16e0c:	bne	16df4 <_obstack_memory_used@@Base+0x618>
   16e10:	lsr	r3, r4, ip
   16e14:	orr	r3, r3, r5, lsl fp
   16e18:	lsr	r2, r5, ip
   16e1c:	orr	r3, r3, r5, lsr sl
   16e20:	adds	r0, r0, r4
   16e24:	mov	r4, r3
   16e28:	lsl	r3, r2, ip
   16e2c:	orr	r3, r3, r4, lsl sl
   16e30:	lsl	ip, r4, ip
   16e34:	orr	r3, r3, r4, lsr fp
   16e38:	adc	r1, r1, r5
   16e3c:	subs	r0, r0, ip
   16e40:	mov	r5, r2
   16e44:	sbc	r1, r1, r3
   16e48:	cmp	lr, #0
   16e4c:	strdne	r4, [lr]
   16e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e58:	mov	r7, r0
   16e5c:	ldr	r6, [pc, #72]	; 16eac <_obstack_memory_used@@Base+0x6d0>
   16e60:	ldr	r5, [pc, #72]	; 16eb0 <_obstack_memory_used@@Base+0x6d4>
   16e64:	add	r6, pc, r6
   16e68:	add	r5, pc, r5
   16e6c:	sub	r6, r6, r5
   16e70:	mov	r8, r1
   16e74:	mov	r9, r2
   16e78:	bl	112ac <calloc@plt-0x20>
   16e7c:	asrs	r6, r6, #2
   16e80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e84:	mov	r4, #0
   16e88:	add	r4, r4, #1
   16e8c:	ldr	r3, [r5], #4
   16e90:	mov	r2, r9
   16e94:	mov	r1, r8
   16e98:	mov	r0, r7
   16e9c:	blx	r3
   16ea0:	cmp	r6, r4
   16ea4:	bne	16e88 <_obstack_memory_used@@Base+0x6ac>
   16ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16eac:	andeq	r1, r1, r0, lsr #1
   16eb0:	muleq	r1, r8, r0
   16eb4:	bx	lr
   16eb8:	ldr	r3, [pc, #12]	; 16ecc <_obstack_memory_used@@Base+0x6f0>
   16ebc:	mov	r1, #0
   16ec0:	add	r3, pc, r3
   16ec4:	ldr	r2, [r3]
   16ec8:	b	114e8 <__cxa_atexit@plt>
   16ecc:	andeq	r1, r1, ip, asr r2
   16ed0:	mov	r2, r1
   16ed4:	mov	r1, r0
   16ed8:	mov	r0, #3
   16edc:	b	115a8 <__xstat64@plt>
   16ee0:	mov	r2, r1
   16ee4:	mov	r1, r0
   16ee8:	mov	r0, #3
   16eec:	b	113c8 <__fxstat64@plt>

Disassembly of section .fini:

00016ef0 <.fini>:
   16ef0:	push	{r3, lr}
   16ef4:	pop	{r3, pc}
