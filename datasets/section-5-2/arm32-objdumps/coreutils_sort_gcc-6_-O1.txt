
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

000119d0 <.init>:
   119d0:	push	{r3, lr}
   119d4:	bl	11f94 <__assert_fail@plt+0x4c>
   119d8:	pop	{r3, pc}

Disassembly of section .plt:

000119dc <pthread_mutex_unlock@plt-0x14>:
   119dc:	push	{lr}		; (str lr, [sp, #-4]!)
   119e0:	ldr	lr, [pc, #4]	; 119ec <pthread_mutex_unlock@plt-0x4>
   119e4:	add	lr, pc, lr
   119e8:	ldr	pc, [lr, #8]!
   119ec:	andeq	r3, r2, r4, lsl r6

000119f0 <pthread_mutex_unlock@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #143360	; 0x23000
   119f8:	ldr	pc, [ip, #1556]!	; 0x614

000119fc <fdopen@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #143360	; 0x23000
   11a04:	ldr	pc, [ip, #1548]!	; 0x60c

00011a08 <calloc@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #143360	; 0x23000
   11a10:	ldr	pc, [ip, #1540]!	; 0x604

00011a14 <fputs_unlocked@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #143360	; 0x23000
   11a1c:	ldr	pc, [ip, #1532]!	; 0x5fc

00011a20 <raise@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #143360	; 0x23000
   11a28:	ldr	pc, [ip, #1524]!	; 0x5f4

00011a2c <strcmp@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #143360	; 0x23000
   11a34:	ldr	pc, [ip, #1516]!	; 0x5ec

00011a38 <strtol@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #143360	; 0x23000
   11a40:	ldr	pc, [ip, #1508]!	; 0x5e4

00011a44 <posix_fadvise64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #143360	; 0x23000
   11a4c:	ldr	pc, [ip, #1500]!	; 0x5dc

00011a50 <pause@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #143360	; 0x23000
   11a58:	ldr	pc, [ip, #1492]!	; 0x5d4

00011a5c <pthread_mutex_destroy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #143360	; 0x23000
   11a64:	ldr	pc, [ip, #1484]!	; 0x5cc

00011a68 <fflush@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #143360	; 0x23000
   11a70:	ldr	pc, [ip, #1476]!	; 0x5c4

00011a74 <wcwidth@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #143360	; 0x23000
   11a7c:	ldr	pc, [ip, #1468]!	; 0x5bc

00011a80 <memmove@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #143360	; 0x23000
   11a88:	ldr	pc, [ip, #1460]!	; 0x5b4

00011a8c <free@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #143360	; 0x23000
   11a94:	ldr	pc, [ip, #1452]!	; 0x5ac

00011a98 <pthread_mutex_lock@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #143360	; 0x23000
   11aa0:	ldr	pc, [ip, #1444]!	; 0x5a4

00011aa4 <nanosleep@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #143360	; 0x23000
   11aac:	ldr	pc, [ip, #1436]!	; 0x59c

00011ab0 <ferror@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #143360	; 0x23000
   11ab8:	ldr	pc, [ip, #1428]!	; 0x594

00011abc <_exit@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #143360	; 0x23000
   11ac4:	ldr	pc, [ip, #1420]!	; 0x58c

00011ac8 <memcpy@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #143360	; 0x23000
   11ad0:	ldr	pc, [ip, #1412]!	; 0x584

00011ad4 <execlp@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #143360	; 0x23000
   11adc:	ldr	pc, [ip, #1404]!	; 0x57c

00011ae0 <pthread_mutex_init@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #143360	; 0x23000
   11ae8:	ldr	pc, [ip, #1396]!	; 0x574

00011aec <__strtoull_internal@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #143360	; 0x23000
   11af4:	ldr	pc, [ip, #1388]!	; 0x56c

00011af8 <mbsinit@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #143360	; 0x23000
   11b00:	ldr	pc, [ip, #1380]!	; 0x564

00011b04 <signal@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #143360	; 0x23000
   11b0c:	ldr	pc, [ip, #1372]!	; 0x55c

00011b10 <__sched_cpucount@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #143360	; 0x23000
   11b18:	ldr	pc, [ip, #1364]!	; 0x554

00011b1c <strtold@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #143360	; 0x23000
   11b24:	ldr	pc, [ip, #1356]!	; 0x54c

00011b28 <ftruncate64@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #143360	; 0x23000
   11b30:	ldr	pc, [ip, #1348]!	; 0x544

00011b34 <fwrite_unlocked@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #143360	; 0x23000
   11b3c:	ldr	pc, [ip, #1340]!	; 0x53c

00011b40 <memcmp@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #143360	; 0x23000
   11b48:	ldr	pc, [ip, #1332]!	; 0x534

00011b4c <fputc_unlocked@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #143360	; 0x23000
   11b54:	ldr	pc, [ip, #1324]!	; 0x52c

00011b58 <dcgettext@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #143360	; 0x23000
   11b60:	ldr	pc, [ip, #1316]!	; 0x524

00011b64 <pthread_cond_init@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #143360	; 0x23000
   11b6c:	ldr	pc, [ip, #1308]!	; 0x51c

00011b70 <sysconf@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #143360	; 0x23000
   11b78:	ldr	pc, [ip, #1300]!	; 0x514

00011b7c <unlink@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #143360	; 0x23000
   11b84:	ldr	pc, [ip, #1292]!	; 0x50c

00011b88 <dup2@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #143360	; 0x23000
   11b90:	ldr	pc, [ip, #1284]!	; 0x504

00011b94 <getrlimit64@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #143360	; 0x23000
   11b9c:	ldr	pc, [ip, #1276]!	; 0x4fc

00011ba0 <realloc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #143360	; 0x23000
   11ba8:	ldr	pc, [ip, #1268]!	; 0x4f4

00011bac <sigismember@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #143360	; 0x23000
   11bb4:	ldr	pc, [ip, #1260]!	; 0x4ec

00011bb8 <textdomain@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #143360	; 0x23000
   11bc0:	ldr	pc, [ip, #1252]!	; 0x4e4

00011bc4 <iswcntrl@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #143360	; 0x23000
   11bcc:	ldr	pc, [ip, #1244]!	; 0x4dc

00011bd0 <pthread_cond_destroy@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #143360	; 0x23000
   11bd8:	ldr	pc, [ip, #1236]!	; 0x4d4

00011bdc <fflush_unlocked@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #143360	; 0x23000
   11be4:	ldr	pc, [ip, #1228]!	; 0x4cc

00011be8 <iswprint@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #143360	; 0x23000
   11bf0:	ldr	pc, [ip, #1220]!	; 0x4c4

00011bf4 <__fxstat64@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #143360	; 0x23000
   11bfc:	ldr	pc, [ip, #1212]!	; 0x4bc

00011c00 <sigaction@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #143360	; 0x23000
   11c08:	ldr	pc, [ip, #1204]!	; 0x4b4

00011c0c <mkostemp64@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #143360	; 0x23000
   11c14:	ldr	pc, [ip, #1196]!	; 0x4ac

00011c18 <fwrite@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #143360	; 0x23000
   11c20:	ldr	pc, [ip, #1188]!	; 0x4a4

00011c24 <lseek64@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #143360	; 0x23000
   11c2c:	ldr	pc, [ip, #1180]!	; 0x49c

00011c30 <__stpcpy_chk@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #143360	; 0x23000
   11c38:	ldr	pc, [ip, #1172]!	; 0x494

00011c3c <waitpid@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #143360	; 0x23000
   11c44:	ldr	pc, [ip, #1164]!	; 0x48c

00011c48 <__ctype_get_mb_cur_max@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #143360	; 0x23000
   11c50:	ldr	pc, [ip, #1156]!	; 0x484

00011c54 <strcpy@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #143360	; 0x23000
   11c5c:	ldr	pc, [ip, #1148]!	; 0x47c

00011c60 <pthread_sigmask@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #143360	; 0x23000
   11c68:	ldr	pc, [ip, #1140]!	; 0x474

00011c6c <pthread_create@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #143360	; 0x23000
   11c74:	ldr	pc, [ip, #1132]!	; 0x46c

00011c78 <__fpending@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #143360	; 0x23000
   11c80:	ldr	pc, [ip, #1124]!	; 0x464

00011c84 <mbrtowc@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #143360	; 0x23000
   11c8c:	ldr	pc, [ip, #1116]!	; 0x45c

00011c90 <error@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #143360	; 0x23000
   11c98:	ldr	pc, [ip, #1108]!	; 0x454

00011c9c <open64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #143360	; 0x23000
   11ca4:	ldr	pc, [ip, #1100]!	; 0x44c

00011ca8 <strcoll@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #143360	; 0x23000
   11cb0:	ldr	pc, [ip, #1092]!	; 0x444

00011cb4 <getenv@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #143360	; 0x23000
   11cbc:	ldr	pc, [ip, #1084]!	; 0x43c

00011cc0 <mkstemp64@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #143360	; 0x23000
   11cc8:	ldr	pc, [ip, #1076]!	; 0x434

00011ccc <sysinfo@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #143360	; 0x23000
   11cd4:	ldr	pc, [ip, #1068]!	; 0x42c

00011cd8 <malloc@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #143360	; 0x23000
   11ce0:	ldr	pc, [ip, #1060]!	; 0x424

00011ce4 <sigaddset@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #143360	; 0x23000
   11cec:	ldr	pc, [ip, #1052]!	; 0x41c

00011cf0 <__libc_start_main@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #143360	; 0x23000
   11cf8:	ldr	pc, [ip, #1044]!	; 0x414

00011cfc <__freading@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #143360	; 0x23000
   11d04:	ldr	pc, [ip, #1036]!	; 0x40c

00011d08 <__ctype_toupper_loc@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #143360	; 0x23000
   11d10:	ldr	pc, [ip, #1028]!	; 0x404

00011d14 <__gmon_start__@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #143360	; 0x23000
   11d1c:	ldr	pc, [ip, #1020]!	; 0x3fc

00011d20 <getopt_long@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #143360	; 0x23000
   11d28:	ldr	pc, [ip, #1012]!	; 0x3f4

00011d2c <__ctype_b_loc@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #143360	; 0x23000
   11d34:	ldr	pc, [ip, #1004]!	; 0x3ec

00011d38 <exit@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #143360	; 0x23000
   11d40:	ldr	pc, [ip, #996]!	; 0x3e4

00011d44 <strtoul@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #143360	; 0x23000
   11d4c:	ldr	pc, [ip, #988]!	; 0x3dc

00011d50 <strlen@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #143360	; 0x23000
   11d58:	ldr	pc, [ip, #980]!	; 0x3d4

00011d5c <strchr@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #143360	; 0x23000
   11d64:	ldr	pc, [ip, #972]!	; 0x3cc

00011d68 <strxfrm@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #143360	; 0x23000
   11d70:	ldr	pc, [ip, #964]!	; 0x3c4

00011d74 <__errno_location@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #143360	; 0x23000
   11d7c:	ldr	pc, [ip, #956]!	; 0x3bc

00011d80 <__cxa_atexit@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #143360	; 0x23000
   11d88:	ldr	pc, [ip, #948]!	; 0x3b4

00011d8c <setvbuf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #143360	; 0x23000
   11d94:	ldr	pc, [ip, #940]!	; 0x3ac

00011d98 <memset@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #143360	; 0x23000
   11da0:	ldr	pc, [ip, #932]!	; 0x3a4

00011da4 <fgetc@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #143360	; 0x23000
   11dac:	ldr	pc, [ip, #924]!	; 0x39c

00011db0 <__printf_chk@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #143360	; 0x23000
   11db8:	ldr	pc, [ip, #916]!	; 0x394

00011dbc <write@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #143360	; 0x23000
   11dc4:	ldr	pc, [ip, #908]!	; 0x38c

00011dc8 <fileno@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #143360	; 0x23000
   11dd0:	ldr	pc, [ip, #900]!	; 0x384

00011dd4 <__fprintf_chk@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #143360	; 0x23000
   11ddc:	ldr	pc, [ip, #892]!	; 0x37c

00011de0 <memchr@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #143360	; 0x23000
   11de8:	ldr	pc, [ip, #884]!	; 0x374

00011dec <fclose@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #143360	; 0x23000
   11df4:	ldr	pc, [ip, #876]!	; 0x36c

00011df8 <pipe@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #143360	; 0x23000
   11e00:	ldr	pc, [ip, #868]!	; 0x364

00011e04 <fseeko64@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #143360	; 0x23000
   11e0c:	ldr	pc, [ip, #860]!	; 0x35c

00011e10 <fcntl64@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #143360	; 0x23000
   11e18:	ldr	pc, [ip, #852]!	; 0x354

00011e1c <__overflow@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #143360	; 0x23000
   11e24:	ldr	pc, [ip, #844]!	; 0x34c

00011e28 <setlocale@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #143360	; 0x23000
   11e30:	ldr	pc, [ip, #836]!	; 0x344

00011e34 <sigemptyset@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #143360	; 0x23000
   11e3c:	ldr	pc, [ip, #828]!	; 0x33c

00011e40 <fork@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #143360	; 0x23000
   11e48:	ldr	pc, [ip, #820]!	; 0x334

00011e4c <__explicit_bzero_chk@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #143360	; 0x23000
   11e54:	ldr	pc, [ip, #812]!	; 0x32c

00011e58 <strrchr@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #143360	; 0x23000
   11e60:	ldr	pc, [ip, #804]!	; 0x324

00011e64 <pthread_join@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #143360	; 0x23000
   11e6c:	ldr	pc, [ip, #796]!	; 0x31c

00011e70 <nl_langinfo@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #143360	; 0x23000
   11e78:	ldr	pc, [ip, #788]!	; 0x314

00011e7c <localeconv@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #143360	; 0x23000
   11e84:	ldr	pc, [ip, #780]!	; 0x30c

00011e88 <clearerr_unlocked@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #143360	; 0x23000
   11e90:	ldr	pc, [ip, #772]!	; 0x304

00011e94 <fopen64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #143360	; 0x23000
   11e9c:	ldr	pc, [ip, #764]!	; 0x2fc

00011ea0 <qsort@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #143360	; 0x23000
   11ea8:	ldr	pc, [ip, #756]!	; 0x2f4

00011eac <pipe2@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #143360	; 0x23000
   11eb4:	ldr	pc, [ip, #748]!	; 0x2ec

00011eb8 <pthread_cond_wait@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #143360	; 0x23000
   11ec0:	ldr	pc, [ip, #740]!	; 0x2e4

00011ec4 <euidaccess@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #143360	; 0x23000
   11ecc:	ldr	pc, [ip, #732]!	; 0x2dc

00011ed0 <sched_getaffinity@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #143360	; 0x23000
   11ed8:	ldr	pc, [ip, #724]!	; 0x2d4

00011edc <bindtextdomain@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #143360	; 0x23000
   11ee4:	ldr	pc, [ip, #716]!	; 0x2cc

00011ee8 <fread_unlocked@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #143360	; 0x23000
   11ef0:	ldr	pc, [ip, #708]!	; 0x2c4

00011ef4 <getrandom@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #143360	; 0x23000
   11efc:	ldr	pc, [ip, #700]!	; 0x2bc

00011f00 <__xstat64@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #143360	; 0x23000
   11f08:	ldr	pc, [ip, #692]!	; 0x2b4

00011f0c <strncmp@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #143360	; 0x23000
   11f14:	ldr	pc, [ip, #684]!	; 0x2ac

00011f18 <pthread_cond_signal@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #143360	; 0x23000
   11f20:	ldr	pc, [ip, #676]!	; 0x2a4

00011f24 <abort@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #143360	; 0x23000
   11f2c:	ldr	pc, [ip, #668]!	; 0x29c

00011f30 <close@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #143360	; 0x23000
   11f38:	ldr	pc, [ip, #660]!	; 0x294

00011f3c <dcngettext@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #143360	; 0x23000
   11f44:	ldr	pc, [ip, #652]!	; 0x28c

00011f48 <__assert_fail@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #143360	; 0x23000
   11f50:	ldr	pc, [ip, #644]!	; 0x284

Disassembly of section .text:

00011f58 <_obstack_begin@@Base-0xf374>:
   11f58:	mov	fp, #0
   11f5c:	mov	lr, #0
   11f60:	pop	{r1}		; (ldr r1, [sp], #4)
   11f64:	mov	r2, sp
   11f68:	push	{r2}		; (str r2, [sp, #-4]!)
   11f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   11f70:	ldr	ip, [pc, #16]	; 11f88 <__assert_fail@plt+0x40>
   11f74:	push	{ip}		; (str ip, [sp, #-4]!)
   11f78:	ldr	r0, [pc, #12]	; 11f8c <__assert_fail@plt+0x44>
   11f7c:	ldr	r3, [pc, #12]	; 11f90 <__assert_fail@plt+0x48>
   11f80:	bl	11cf0 <__libc_start_main@plt>
   11f84:	bl	11f24 <abort@plt>
   11f88:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   11f8c:	andeq	r6, r1, r4, asr r8
   11f90:	andeq	r1, r2, r8, lsr pc
   11f94:	ldr	r3, [pc, #20]	; 11fb0 <__assert_fail@plt+0x68>
   11f98:	ldr	r2, [pc, #20]	; 11fb4 <__assert_fail@plt+0x6c>
   11f9c:	add	r3, pc, r3
   11fa0:	ldr	r2, [r3, r2]
   11fa4:	cmp	r2, #0
   11fa8:	bxeq	lr
   11fac:	b	11d14 <__gmon_start__@plt>
   11fb0:	andeq	r3, r2, ip, asr r0
   11fb4:	ldrdeq	r0, [r0], -r8
   11fb8:	ldr	r3, [pc, #28]	; 11fdc <__assert_fail@plt+0x94>
   11fbc:	ldr	r0, [pc, #28]	; 11fe0 <__assert_fail@plt+0x98>
   11fc0:	sub	r3, r3, r0
   11fc4:	cmp	r3, #6
   11fc8:	bxls	lr
   11fcc:	ldr	r3, [pc, #16]	; 11fe4 <__assert_fail@plt+0x9c>
   11fd0:	cmp	r3, #0
   11fd4:	bxeq	lr
   11fd8:	bx	r3
   11fdc:			; <UNDEFINED> instruction: 0x000352bb
   11fe0:			; <UNDEFINED> instruction: 0x000352b8
   11fe4:	andeq	r0, r0, r0
   11fe8:	ldr	r1, [pc, #36]	; 12014 <__assert_fail@plt+0xcc>
   11fec:	ldr	r0, [pc, #36]	; 12018 <__assert_fail@plt+0xd0>
   11ff0:	sub	r1, r1, r0
   11ff4:	asr	r1, r1, #2
   11ff8:	add	r1, r1, r1, lsr #31
   11ffc:	asrs	r1, r1, #1
   12000:	bxeq	lr
   12004:	ldr	r3, [pc, #16]	; 1201c <__assert_fail@plt+0xd4>
   12008:	cmp	r3, #0
   1200c:	bxeq	lr
   12010:	bx	r3
   12014:			; <UNDEFINED> instruction: 0x000352b8
   12018:			; <UNDEFINED> instruction: 0x000352b8
   1201c:	andeq	r0, r0, r0
   12020:	push	{r4, lr}
   12024:	ldr	r4, [pc, #24]	; 12044 <__assert_fail@plt+0xfc>
   12028:	ldrb	r3, [r4]
   1202c:	cmp	r3, #0
   12030:	popne	{r4, pc}
   12034:	bl	11fb8 <__assert_fail@plt+0x70>
   12038:	mov	r3, #1
   1203c:	strb	r3, [r4]
   12040:	pop	{r4, pc}
   12044:	ldrdeq	r5, [r3], -ip
   12048:	ldr	r0, [pc, #40]	; 12078 <__assert_fail@plt+0x130>
   1204c:	ldr	r3, [r0]
   12050:	cmp	r3, #0
   12054:	bne	1205c <__assert_fail@plt+0x114>
   12058:	b	11fe8 <__assert_fail@plt+0xa0>
   1205c:	ldr	r3, [pc, #24]	; 1207c <__assert_fail@plt+0x134>
   12060:	cmp	r3, #0
   12064:	beq	12058 <__assert_fail@plt+0x110>
   12068:	push	{r4, lr}
   1206c:	blx	r3
   12070:	pop	{r4, lr}
   12074:	b	11fe8 <__assert_fail@plt+0xa0>
   12078:	andeq	r4, r3, ip, lsl #30
   1207c:	andeq	r0, r0, r0
   12080:	push	{r4, lr}
   12084:	ldr	r0, [r0, #4]
   12088:	bl	21764 <_obstack_memory_used@@Base+0x280>
   1208c:	mov	r0, r1
   12090:	pop	{r4, pc}
   12094:	ldr	r0, [r0, #4]
   12098:	ldr	r3, [r1, #4]
   1209c:	cmp	r0, r3
   120a0:	movne	r0, #0
   120a4:	moveq	r0, #1
   120a8:	bx	lr
   120ac:	push	{r4, r5, r6, lr}
   120b0:	ldr	r3, [r0]
   120b4:	ldr	r4, [r0, #4]
   120b8:	sub	r4, r4, #1
   120bc:	add	r4, r3, r4
   120c0:	ldr	r2, [r1]
   120c4:	ldr	r5, [r1, #4]
   120c8:	ldr	r0, [pc, #372]	; 12244 <__assert_fail@plt+0x2fc>
   120cc:	ldr	lr, [r0]
   120d0:	cmp	lr, #256	; 0x100
   120d4:	beq	12148 <__assert_fail@plt+0x200>
   120d8:	cmp	r3, r4
   120dc:	bcs	12134 <__assert_fail@plt+0x1ec>
   120e0:	sub	r6, r2, #1
   120e4:	cmp	r2, #0
   120e8:	bne	12184 <__assert_fail@plt+0x23c>
   120ec:	ldrb	r2, [r1, #24]
   120f0:	cmp	r2, #0
   120f4:	beq	12134 <__assert_fail@plt+0x1ec>
   120f8:	ldrb	r2, [r3]
   120fc:	ldr	r1, [pc, #324]	; 12248 <__assert_fail@plt+0x300>
   12100:	ldrb	r2, [r1, r2]
   12104:	cmp	r2, #0
   12108:	beq	12134 <__assert_fail@plt+0x1ec>
   1210c:	add	r2, r3, #1
   12110:	mov	r0, r1
   12114:	mov	r3, r2
   12118:	cmp	r4, r2
   1211c:	bls	12134 <__assert_fail@plt+0x1ec>
   12120:	add	r2, r2, #1
   12124:	ldrb	r1, [r3]
   12128:	ldrb	r1, [r0, r1]
   1212c:	cmp	r1, #0
   12130:	bne	12114 <__assert_fail@plt+0x1cc>
   12134:	add	r3, r3, r5
   12138:	cmp	r4, r3
   1213c:	movcc	r0, r4
   12140:	movcs	r0, r3
   12144:	pop	{r4, r5, r6, pc}
   12148:	cmp	r3, r4
   1214c:	bcs	12134 <__assert_fail@plt+0x1ec>
   12150:	sub	r6, r2, #1
   12154:	cmp	r2, #0
   12158:	ldrne	r0, [pc, #232]	; 12248 <__assert_fail@plt+0x300>
   1215c:	bne	121d4 <__assert_fail@plt+0x28c>
   12160:	b	120ec <__assert_fail@plt+0x1a4>
   12164:	add	r3, r3, #1
   12168:	cmp	r4, r3
   1216c:	bls	12134 <__assert_fail@plt+0x1ec>
   12170:	sub	r6, r6, #1
   12174:	cmn	r6, #1
   12178:	beq	120ec <__assert_fail@plt+0x1a4>
   1217c:	cmp	r4, r3
   12180:	bls	12134 <__assert_fail@plt+0x1ec>
   12184:	ldrb	r2, [r3]
   12188:	cmp	lr, r2
   1218c:	beq	12164 <__assert_fail@plt+0x21c>
   12190:	add	r2, r3, #1
   12194:	mov	ip, r4
   12198:	mov	r3, r2
   1219c:	cmp	ip, r2
   121a0:	beq	12168 <__assert_fail@plt+0x220>
   121a4:	add	r2, r2, #1
   121a8:	ldrb	r0, [r3]
   121ac:	cmp	lr, r0
   121b0:	bne	12198 <__assert_fail@plt+0x250>
   121b4:	b	12164 <__assert_fail@plt+0x21c>
   121b8:	cmp	r4, r2
   121bc:	bls	12134 <__assert_fail@plt+0x1ec>
   121c0:	sub	r6, r6, #1
   121c4:	cmn	r6, #1
   121c8:	beq	120ec <__assert_fail@plt+0x1a4>
   121cc:	cmp	r4, r3
   121d0:	bls	12134 <__assert_fail@plt+0x1ec>
   121d4:	ldrb	r2, [r3]
   121d8:	ldrb	r2, [r0, r2]
   121dc:	cmp	r2, #0
   121e0:	beq	1221c <__assert_fail@plt+0x2d4>
   121e4:	add	r2, r3, #1
   121e8:	mov	lr, r4
   121ec:	mov	r3, r2
   121f0:	cmp	r2, lr
   121f4:	beq	121b8 <__assert_fail@plt+0x270>
   121f8:	add	r2, r2, #1
   121fc:	ldrb	ip, [r3]
   12200:	ldrb	ip, [r0, ip]
   12204:	cmp	ip, #0
   12208:	bne	121ec <__assert_fail@plt+0x2a4>
   1220c:	ldrb	r2, [r3]
   12210:	ldrb	r2, [r0, r2]
   12214:	cmp	r2, #0
   12218:	bne	121c0 <__assert_fail@plt+0x278>
   1221c:	add	r2, r3, #1
   12220:	mov	r3, r2
   12224:	cmp	r4, r2
   12228:	bls	12134 <__assert_fail@plt+0x1ec>
   1222c:	add	r2, r2, #1
   12230:	ldrb	ip, [r3]
   12234:	ldrb	ip, [r0, ip]
   12238:	cmp	ip, #0
   1223c:	beq	12220 <__assert_fail@plt+0x2d8>
   12240:	b	121c0 <__assert_fail@plt+0x278>
   12244:	andeq	r5, r3, r4, ror #3
   12248:	andeq	r5, r3, r0, ror #5
   1224c:	push	{r4, r5, r6, lr}
   12250:	ldr	r3, [r0]
   12254:	ldr	r4, [r0, #4]
   12258:	sub	r4, r4, #1
   1225c:	add	r4, r3, r4
   12260:	ldr	r2, [r1, #8]
   12264:	ldr	r5, [r1, #12]
   12268:	cmp	r5, #0
   1226c:	addeq	r2, r2, #1
   12270:	ldr	r0, [pc, #400]	; 12408 <__assert_fail@plt+0x4c0>
   12274:	ldr	lr, [r0]
   12278:	cmp	lr, #256	; 0x100
   1227c:	beq	12304 <__assert_fail@plt+0x3bc>
   12280:	cmp	r3, r4
   12284:	bcs	12294 <__assert_fail@plt+0x34c>
   12288:	sub	r6, r2, #1
   1228c:	cmp	r2, #0
   12290:	bne	12340 <__assert_fail@plt+0x3f8>
   12294:	cmp	r5, #0
   12298:	beq	122fc <__assert_fail@plt+0x3b4>
   1229c:	ldrb	r2, [r1, #25]
   122a0:	cmp	r2, #0
   122a4:	beq	122f0 <__assert_fail@plt+0x3a8>
   122a8:	cmp	r3, r4
   122ac:	bcs	122f0 <__assert_fail@plt+0x3a8>
   122b0:	ldrb	r2, [r3]
   122b4:	ldr	r1, [pc, #336]	; 1240c <__assert_fail@plt+0x4c4>
   122b8:	ldrb	r2, [r1, r2]
   122bc:	cmp	r2, #0
   122c0:	beq	122f0 <__assert_fail@plt+0x3a8>
   122c4:	add	r2, r3, #1
   122c8:	mov	r0, r4
   122cc:	mov	ip, r1
   122d0:	mov	r3, r2
   122d4:	cmp	r0, r2
   122d8:	beq	122f0 <__assert_fail@plt+0x3a8>
   122dc:	add	r2, r2, #1
   122e0:	ldrb	r1, [r3]
   122e4:	ldrb	r1, [ip, r1]
   122e8:	cmp	r1, #0
   122ec:	bne	122d0 <__assert_fail@plt+0x388>
   122f0:	add	r3, r3, r5
   122f4:	cmp	r4, r3
   122f8:	movcc	r3, r4
   122fc:	mov	r0, r3
   12300:	pop	{r4, r5, r6, pc}
   12304:	cmp	r3, r4
   12308:	bcs	12294 <__assert_fail@plt+0x34c>
   1230c:	sub	r6, r2, #1
   12310:	cmp	r2, #0
   12314:	ldrne	r0, [pc, #240]	; 1240c <__assert_fail@plt+0x4c4>
   12318:	bne	12398 <__assert_fail@plt+0x450>
   1231c:	b	12294 <__assert_fail@plt+0x34c>
   12320:	add	r3, r3, #1
   12324:	cmp	r4, r3
   12328:	bls	12294 <__assert_fail@plt+0x34c>
   1232c:	sub	r6, r6, #1
   12330:	cmn	r6, #1
   12334:	beq	12294 <__assert_fail@plt+0x34c>
   12338:	cmp	r4, r3
   1233c:	bls	12294 <__assert_fail@plt+0x34c>
   12340:	ldrb	r2, [r3]
   12344:	cmp	lr, r2
   12348:	beq	12370 <__assert_fail@plt+0x428>
   1234c:	add	r2, r3, #1
   12350:	mov	ip, r4
   12354:	mov	r3, r2
   12358:	cmp	r2, ip
   1235c:	beq	12324 <__assert_fail@plt+0x3dc>
   12360:	add	r2, r2, #1
   12364:	ldrb	r0, [r3]
   12368:	cmp	lr, r0
   1236c:	bne	12354 <__assert_fail@plt+0x40c>
   12370:	orrs	r2, r5, r6
   12374:	bne	12320 <__assert_fail@plt+0x3d8>
   12378:	b	1232c <__assert_fail@plt+0x3e4>
   1237c:	cmp	r4, r2
   12380:	bls	12294 <__assert_fail@plt+0x34c>
   12384:	sub	r6, r6, #1
   12388:	cmn	r6, #1
   1238c:	beq	12294 <__assert_fail@plt+0x34c>
   12390:	cmp	r4, r3
   12394:	bls	12294 <__assert_fail@plt+0x34c>
   12398:	ldrb	r2, [r3]
   1239c:	ldrb	r2, [r0, r2]
   123a0:	cmp	r2, #0
   123a4:	beq	123e0 <__assert_fail@plt+0x498>
   123a8:	add	r2, r3, #1
   123ac:	mov	lr, r4
   123b0:	mov	r3, r2
   123b4:	cmp	r2, lr
   123b8:	beq	1237c <__assert_fail@plt+0x434>
   123bc:	add	r2, r2, #1
   123c0:	ldrb	ip, [r3]
   123c4:	ldrb	ip, [r0, ip]
   123c8:	cmp	ip, #0
   123cc:	bne	123b0 <__assert_fail@plt+0x468>
   123d0:	ldrb	r2, [r3]
   123d4:	ldrb	r2, [r0, r2]
   123d8:	cmp	r2, #0
   123dc:	bne	12384 <__assert_fail@plt+0x43c>
   123e0:	add	r2, r3, #1
   123e4:	mov	r3, r2
   123e8:	cmp	r4, r2
   123ec:	bls	12294 <__assert_fail@plt+0x34c>
   123f0:	add	r2, r2, #1
   123f4:	ldrb	ip, [r3]
   123f8:	ldrb	ip, [r0, ip]
   123fc:	cmp	ip, #0
   12400:	beq	123e4 <__assert_fail@plt+0x49c>
   12404:	b	12384 <__assert_fail@plt+0x43c>
   12408:	andeq	r5, r3, r4, ror #3
   1240c:	andeq	r5, r3, r0, ror #5
   12410:	push	{r4, r5, r6, r7, lr}
   12414:	ldr	r3, [r0]
   12418:	ldr	r2, [pc, #168]	; 124c8 <__assert_fail@plt+0x580>
   1241c:	ldr	r5, [r2, #256]	; 0x100
   12420:	mov	r4, #0
   12424:	mov	r1, r4
   12428:	mov	r6, r4
   1242c:	mov	r7, #1
   12430:	b	12454 <__assert_fail@plt+0x50c>
   12434:	cmp	r1, r2
   12438:	movcc	r1, r2
   1243c:	ldrb	r2, [r3, #1]
   12440:	cmp	r2, r5
   12444:	addeq	ip, r3, #2
   12448:	moveq	r4, r7
   1244c:	movne	r4, r6
   12450:	mov	r3, ip
   12454:	add	ip, r3, #1
   12458:	ldrb	r2, [r3]
   1245c:	sub	lr, r2, #48	; 0x30
   12460:	cmp	lr, #9
   12464:	bls	12434 <__assert_fail@plt+0x4ec>
   12468:	cmp	r4, #0
   1246c:	subne	r3, r3, #1
   12470:	strne	r3, [r0]
   12474:	bne	12490 <__assert_fail@plt+0x548>
   12478:	ldr	lr, [pc, #72]	; 124c8 <__assert_fail@plt+0x580>
   1247c:	ldrb	lr, [lr, #260]	; 0x104
   12480:	cmp	lr, r2
   12484:	beq	12498 <__assert_fail@plt+0x550>
   12488:	sub	ip, ip, #1
   1248c:	str	ip, [r0]
   12490:	mov	r0, r1
   12494:	pop	{r4, r5, r6, r7, pc}
   12498:	add	ip, r3, #2
   1249c:	ldrb	r3, [r3, #1]
   124a0:	sub	r2, r3, #48	; 0x30
   124a4:	cmp	r2, #9
   124a8:	bhi	12488 <__assert_fail@plt+0x540>
   124ac:	cmp	r1, r3
   124b0:	movcc	r1, r3
   124b4:	ldrb	r3, [ip], #1
   124b8:	sub	r2, r3, #48	; 0x30
   124bc:	cmp	r2, #9
   124c0:	bls	124ac <__assert_fail@plt+0x564>
   124c4:	b	12488 <__assert_fail@plt+0x540>
   124c8:	andeq	r5, r3, r0, ror #5
   124cc:	push	{r4, lr}
   124d0:	sub	sp, sp, #8
   124d4:	ldrb	r4, [r0]
   124d8:	cmp	r4, #45	; 0x2d
   124dc:	movne	r3, r0
   124e0:	addeq	r3, r0, #1
   124e4:	add	r0, sp, #8
   124e8:	str	r3, [r0, #-4]!
   124ec:	bl	12410 <__assert_fail@plt+0x4c8>
   124f0:	cmp	r0, #48	; 0x30
   124f4:	movls	r0, #0
   124f8:	bls	12514 <__assert_fail@plt+0x5cc>
   124fc:	ldr	r3, [sp, #4]
   12500:	ldrb	r3, [r3]
   12504:	ldr	r2, [pc, #16]	; 1251c <__assert_fail@plt+0x5d4>
   12508:	ldrb	r0, [r2, r3]
   1250c:	cmp	r4, #45	; 0x2d
   12510:	rsbeq	r0, r0, #0
   12514:	add	sp, sp, #8
   12518:	pop	{r4, pc}
   1251c:	andeq	r1, r2, r0, asr #31
   12520:	push	{r4, r5, r6, r7, r8, lr}
   12524:	ldrb	r3, [r0]
   12528:	ldr	r2, [pc, #212]	; 12604 <__assert_fail@plt+0x6bc>
   1252c:	ldrb	r3, [r2, r3]
   12530:	cmp	r3, #0
   12534:	beq	12548 <__assert_fail@plt+0x600>
   12538:	ldrb	r3, [r0, #1]!
   1253c:	ldrb	r3, [r2, r3]
   12540:	cmp	r3, #0
   12544:	bne	12538 <__assert_fail@plt+0x5f0>
   12548:	mov	r7, #12
   1254c:	mov	r6, #0
   12550:	ldr	r8, [pc, #176]	; 12608 <__assert_fail@plt+0x6c0>
   12554:	ldr	r4, [pc, #168]	; 12604 <__assert_fail@plt+0x6bc>
   12558:	b	12584 <__assert_fail@plt+0x63c>
   1255c:	mov	r2, r0
   12560:	cmp	r1, #0
   12564:	strne	r2, [r1]
   12568:	ldr	r3, [pc, #152]	; 12608 <__assert_fail@plt+0x6c0>
   1256c:	add	r5, r3, r5, lsl #3
   12570:	ldr	r0, [r5, #8]
   12574:	pop	{r4, r5, r6, r7, r8, pc}
   12578:	add	r6, r5, #1
   1257c:	cmp	r6, r7
   12580:	bcs	125fc <__assert_fail@plt+0x6b4>
   12584:	add	r5, r6, r7
   12588:	lsr	r5, r5, #1
   1258c:	add	r3, r8, r5, lsl #3
   12590:	ldr	lr, [r3, #4]
   12594:	ldrb	r3, [lr]
   12598:	cmp	r3, #0
   1259c:	beq	1255c <__assert_fail@plt+0x614>
   125a0:	ldrb	r2, [r0]
   125a4:	add	r2, r4, r2
   125a8:	ldrb	r2, [r2, #264]	; 0x108
   125ac:	cmp	r3, r2
   125b0:	bhi	125ec <__assert_fail@plt+0x6a4>
   125b4:	addcs	ip, r0, #1
   125b8:	bcc	12578 <__assert_fail@plt+0x630>
   125bc:	mov	r2, ip
   125c0:	ldrb	r3, [lr, #1]!
   125c4:	cmp	r3, #0
   125c8:	beq	12560 <__assert_fail@plt+0x618>
   125cc:	add	ip, ip, #1
   125d0:	ldrb	r2, [r2]
   125d4:	add	r2, r4, r2
   125d8:	ldrb	r2, [r2, #264]	; 0x108
   125dc:	cmp	r3, r2
   125e0:	bhi	125f4 <__assert_fail@plt+0x6ac>
   125e4:	bcs	125bc <__assert_fail@plt+0x674>
   125e8:	b	12578 <__assert_fail@plt+0x630>
   125ec:	mov	r7, r5
   125f0:	b	1257c <__assert_fail@plt+0x634>
   125f4:	mov	r7, r5
   125f8:	b	1257c <__assert_fail@plt+0x634>
   125fc:	mov	r0, #0
   12600:	pop	{r4, r5, r6, r7, r8, pc}
   12604:	andeq	r5, r3, r0, ror #5
   12608:	andeq	r5, r3, r4, ror #3
   1260c:	ldr	r3, [r0, #16]
   12610:	cmp	r3, #0
   12614:	movne	r0, #0
   12618:	beq	12624 <__assert_fail@plt+0x6dc>
   1261c:	and	r0, r0, #1
   12620:	bx	lr
   12624:	ldr	r3, [r0, #20]
   12628:	cmp	r3, #0
   1262c:	movne	r0, #0
   12630:	bne	1261c <__assert_fail@plt+0x6d4>
   12634:	ldrb	r3, [r0, #24]
   12638:	cmp	r3, #0
   1263c:	movne	r0, #0
   12640:	bne	1261c <__assert_fail@plt+0x6d4>
   12644:	ldrb	r3, [r0, #25]
   12648:	cmp	r3, #0
   1264c:	movne	r0, #0
   12650:	bne	1261c <__assert_fail@plt+0x6d4>
   12654:	ldrb	r3, [r0, #26]
   12658:	cmp	r3, #0
   1265c:	movne	r0, #0
   12660:	bne	1261c <__assert_fail@plt+0x6d4>
   12664:	ldrh	r3, [r0, #28]
   12668:	cmp	r3, #0
   1266c:	movne	r0, #0
   12670:	bne	1261c <__assert_fail@plt+0x6d4>
   12674:	ldrb	r3, [r0, #30]
   12678:	cmp	r3, #0
   1267c:	movne	r0, #0
   12680:	bne	1261c <__assert_fail@plt+0x6d4>
   12684:	ldrb	r3, [r0, #32]
   12688:	cmp	r3, #0
   1268c:	ldrbeq	r0, [r0, #27]
   12690:	eoreq	r0, r0, #1
   12694:	movne	r0, #0
   12698:	b	1261c <__assert_fail@plt+0x6d4>
   1269c:	ldrh	r3, [r0, #24]
   126a0:	cmp	r3, #0
   126a4:	movne	r3, #98	; 0x62
   126a8:	strbne	r3, [r1]
   126ac:	addne	r1, r1, #1
   126b0:	ldr	r2, [r0, #16]
   126b4:	ldr	r3, [pc, #212]	; 12790 <__assert_fail@plt+0x848>
   126b8:	cmp	r2, r3
   126bc:	moveq	r3, #100	; 0x64
   126c0:	strbeq	r3, [r1]
   126c4:	addeq	r1, r1, #1
   126c8:	ldr	r3, [r0, #20]
   126cc:	cmp	r3, #0
   126d0:	addne	r3, r1, #1
   126d4:	movne	r2, #102	; 0x66
   126d8:	strbne	r2, [r1]
   126dc:	moveq	r3, r1
   126e0:	ldrb	r2, [r0, #28]
   126e4:	cmp	r2, #0
   126e8:	movne	r2, #103	; 0x67
   126ec:	strbne	r2, [r3]
   126f0:	addne	r3, r3, #1
   126f4:	ldrb	r2, [r0, #29]
   126f8:	cmp	r2, #0
   126fc:	movne	r2, #104	; 0x68
   12700:	strbne	r2, [r3]
   12704:	addne	r3, r3, #1
   12708:	ldr	r1, [r0, #16]
   1270c:	ldr	r2, [pc, #128]	; 12794 <__assert_fail@plt+0x84c>
   12710:	cmp	r1, r2
   12714:	moveq	r2, #105	; 0x69
   12718:	strbeq	r2, [r3]
   1271c:	addeq	r3, r3, #1
   12720:	ldrb	r2, [r0, #30]
   12724:	cmp	r2, #0
   12728:	movne	r2, #77	; 0x4d
   1272c:	strbne	r2, [r3]
   12730:	addne	r3, r3, #1
   12734:	ldrb	r2, [r0, #26]
   12738:	cmp	r2, #0
   1273c:	movne	r2, #110	; 0x6e
   12740:	strbne	r2, [r3]
   12744:	addne	r3, r3, #1
   12748:	ldrb	r2, [r0, #27]
   1274c:	cmp	r2, #0
   12750:	movne	r2, #82	; 0x52
   12754:	strbne	r2, [r3]
   12758:	addne	r3, r3, #1
   1275c:	ldrb	r2, [r0, #31]
   12760:	cmp	r2, #0
   12764:	movne	r2, #114	; 0x72
   12768:	strbne	r2, [r3]
   1276c:	addne	r3, r3, #1
   12770:	ldrb	r2, [r0, #32]
   12774:	cmp	r2, #0
   12778:	movne	r2, #86	; 0x56
   1277c:	strbne	r2, [r3]
   12780:	addne	r3, r3, #1
   12784:	mov	r2, #0
   12788:	strb	r2, [r3]
   1278c:	bx	lr
   12790:	andeq	r5, r3, r8, ror #9
   12794:	andeq	r5, r3, r8, ror #11
   12798:	ldr	r3, [r0, #40]	; 0x28
   1279c:	ldr	r2, [r1, #40]	; 0x28
   127a0:	cmp	r3, r2
   127a4:	beq	127b8 <__assert_fail@plt+0x870>
   127a8:	cmp	r3, r2
   127ac:	movcs	r0, #0
   127b0:	movcc	r0, #1
   127b4:	bx	lr
   127b8:	ldr	r3, [r0, #20]
   127bc:	ldr	r0, [r0, #24]
   127c0:	add	r0, r3, r0
   127c4:	ldr	r3, [r1, #20]
   127c8:	ldr	r2, [r1, #24]
   127cc:	add	r3, r3, r2
   127d0:	cmp	r0, r3
   127d4:	movcs	r0, #0
   127d8:	movcc	r0, #1
   127dc:	bx	lr
   127e0:	ldrb	r3, [r0]
   127e4:	cmp	r3, #0
   127e8:	bxeq	lr
   127ec:	push	{r4, r5, r6, lr}
   127f0:	bic	r6, r2, #2
   127f4:	sub	r2, r2, #1
   127f8:	mov	ip, #1
   127fc:	ldr	lr, [pc, #300]	; 12930 <__assert_fail@plt+0x9e8>
   12800:	add	r5, lr, #520	; 0x208
   12804:	add	r4, lr, #264	; 0x108
   12808:	add	lr, lr, #776	; 0x308
   1280c:	b	1282c <__assert_fail@plt+0x8e4>
   12810:	cmp	r6, #0
   12814:	strbeq	ip, [r1, #24]
   12818:	cmp	r2, #1
   1281c:	strbls	ip, [r1, #25]
   12820:	ldrb	r3, [r0, #1]!
   12824:	cmp	r3, #0
   12828:	beq	1292c <__assert_fail@plt+0x9e4>
   1282c:	sub	r3, r3, #77	; 0x4d
   12830:	cmp	r3, #37	; 0x25
   12834:	ldrls	pc, [pc, r3, lsl #2]
   12838:	b	1292c <__assert_fail@plt+0x9e4>
   1283c:	andeq	r2, r1, r4, lsl #18
   12840:	andeq	r2, r1, ip, lsr #18
   12844:	andeq	r2, r1, ip, lsr #18
   12848:	andeq	r2, r1, ip, lsr #18
   1284c:	andeq	r2, r1, ip, lsr #18
   12850:	andeq	r2, r1, r4, lsl r9
   12854:	andeq	r2, r1, ip, lsr #18
   12858:	andeq	r2, r1, ip, lsr #18
   1285c:	andeq	r2, r1, ip, lsr #18
   12860:	andeq	r2, r1, r4, lsr #18
   12864:	andeq	r2, r1, ip, lsr #18
   12868:	andeq	r2, r1, ip, lsr #18
   1286c:	andeq	r2, r1, ip, lsr #18
   12870:	andeq	r2, r1, ip, lsr #18
   12874:	andeq	r2, r1, ip, lsr #18
   12878:	andeq	r2, r1, ip, lsr #18
   1287c:	andeq	r2, r1, ip, lsr #18
   12880:	andeq	r2, r1, ip, lsr #18
   12884:	andeq	r2, r1, ip, lsr #18
   12888:	andeq	r2, r1, ip, lsr #18
   1288c:	andeq	r2, r1, ip, lsr #18
   12890:	andeq	r2, r1, r0, lsl r8
   12894:	andeq	r2, r1, ip, lsr #18
   12898:	ldrdeq	r2, [r1], -r4
   1289c:	andeq	r2, r1, ip, lsr #18
   128a0:	ldrdeq	r2, [r1], -ip
   128a4:	andeq	r2, r1, r4, ror #17
   128a8:	andeq	r2, r1, ip, ror #17
   128ac:	strdeq	r2, [r1], -r4
   128b0:	andeq	r2, r1, ip, lsr #18
   128b4:	andeq	r2, r1, ip, lsr #18
   128b8:	andeq	r2, r1, ip, lsr #18
   128bc:	andeq	r2, r1, ip, lsr #18
   128c0:	andeq	r2, r1, ip, lsl #18
   128c4:	andeq	r2, r1, ip, lsr #18
   128c8:	andeq	r2, r1, ip, lsr #18
   128cc:	andeq	r2, r1, ip, lsr #18
   128d0:	andeq	r2, r1, ip, lsl r9
   128d4:	str	r5, [r1, #16]
   128d8:	b	12820 <__assert_fail@plt+0x8d8>
   128dc:	str	r4, [r1, #20]
   128e0:	b	12820 <__assert_fail@plt+0x8d8>
   128e4:	strb	ip, [r1, #28]
   128e8:	b	12820 <__assert_fail@plt+0x8d8>
   128ec:	strb	ip, [r1, #29]
   128f0:	b	12820 <__assert_fail@plt+0x8d8>
   128f4:	ldr	r3, [r1, #16]
   128f8:	cmp	r3, #0
   128fc:	streq	lr, [r1, #16]
   12900:	b	12820 <__assert_fail@plt+0x8d8>
   12904:	strb	ip, [r1, #30]
   12908:	b	12820 <__assert_fail@plt+0x8d8>
   1290c:	strb	ip, [r1, #26]
   12910:	b	12820 <__assert_fail@plt+0x8d8>
   12914:	strb	ip, [r1, #27]
   12918:	b	12820 <__assert_fail@plt+0x8d8>
   1291c:	strb	ip, [r1, #31]
   12920:	b	12820 <__assert_fail@plt+0x8d8>
   12924:	strb	ip, [r1, #32]
   12928:	b	12820 <__assert_fail@plt+0x8d8>
   1292c:	pop	{r4, r5, r6, pc}
   12930:	andeq	r5, r3, r0, ror #5
   12934:	push	{r4, lr}
   12938:	ldr	r1, [r1]
   1293c:	ldr	r0, [r0]
   12940:	bl	11a2c <strcmp@plt>
   12944:	pop	{r4, pc}
   12948:	push	{r4, lr}
   1294c:	mov	r4, r0
   12950:	mov	r2, #5
   12954:	ldr	r1, [pc, #24]	; 12974 <__assert_fail@plt+0xa2c>
   12958:	mov	r0, #0
   1295c:	bl	11b58 <dcgettext@plt>
   12960:	mov	r3, r4
   12964:	mov	r2, r0
   12968:	mov	r1, #0
   1296c:	mov	r0, #2
   12970:	bl	11c90 <error@plt>
   12974:	andeq	r2, r2, r0, lsl #7
   12978:	push	{lr}		; (str lr, [sp, #-4]!)
   1297c:	sub	sp, sp, #12
   12980:	mov	r6, r0
   12984:	mov	r5, r1
   12988:	mov	r2, #5
   1298c:	ldr	r1, [pc, #60]	; 129d0 <__assert_fail@plt+0xa88>
   12990:	mov	r0, #0
   12994:	bl	11b58 <dcgettext@plt>
   12998:	mov	r4, r0
   1299c:	mov	r2, #5
   129a0:	mov	r1, r5
   129a4:	mov	r0, #0
   129a8:	bl	11b58 <dcgettext@plt>
   129ac:	mov	r5, r0
   129b0:	mov	r0, r6
   129b4:	bl	1e568 <__assert_fail@plt+0xc620>
   129b8:	str	r0, [sp]
   129bc:	mov	r3, r5
   129c0:	mov	r2, r4
   129c4:	mov	r1, #0
   129c8:	mov	r0, #2
   129cc:	bl	11c90 <error@plt>
   129d0:	andeq	r2, r2, r0, lsr #7
   129d4:	push	{r4, lr}
   129d8:	mov	r4, r0
   129dc:	add	r2, r0, #4
   129e0:	ldr	r1, [pc, #20]	; 129fc <__assert_fail@plt+0xab4>
   129e4:	mov	r0, #0
   129e8:	bl	11c60 <pthread_sigmask@plt>
   129ec:	clz	r0, r0
   129f0:	lsr	r0, r0, #5
   129f4:	strb	r0, [r4]
   129f8:	pop	{r4, pc}
   129fc:	andeq	r5, r3, r8, ror #13
   12a00:	ldrb	r3, [r0]
   12a04:	cmp	r3, #0
   12a08:	bxeq	lr
   12a0c:	push	{r4, lr}
   12a10:	mov	r2, #0
   12a14:	add	r1, r0, #4
   12a18:	mov	r0, #2
   12a1c:	bl	11c60 <pthread_sigmask@plt>
   12a20:	pop	{r4, pc}
   12a24:	push	{r4, lr}
   12a28:	ldr	r3, [pc, #44]	; 12a5c <__assert_fail@plt+0xb14>
   12a2c:	ldr	r4, [r3, #1160]	; 0x488
   12a30:	cmp	r4, #0
   12a34:	beq	12a4c <__assert_fail@plt+0xb04>
   12a38:	add	r0, r4, #9
   12a3c:	bl	11b7c <unlink@plt>
   12a40:	ldr	r4, [r4]
   12a44:	cmp	r4, #0
   12a48:	bne	12a38 <__assert_fail@plt+0xaf0>
   12a4c:	mov	r2, #0
   12a50:	ldr	r3, [pc, #4]	; 12a5c <__assert_fail@plt+0xb14>
   12a54:	str	r2, [r3, #1160]	; 0x488
   12a58:	pop	{r4, pc}
   12a5c:	andeq	r5, r3, r0, ror #5
   12a60:	push	{lr}		; (str lr, [sp, #-4]!)
   12a64:	sub	sp, sp, #140	; 0x8c
   12a68:	ldr	r3, [pc, #40]	; 12a98 <__assert_fail@plt+0xb50>
   12a6c:	ldr	r3, [r3, #1160]	; 0x488
   12a70:	cmp	r3, #0
   12a74:	beq	12a8c <__assert_fail@plt+0xb44>
   12a78:	add	r0, sp, #4
   12a7c:	bl	129d4 <__assert_fail@plt+0xa8c>
   12a80:	bl	12a24 <__assert_fail@plt+0xadc>
   12a84:	add	r0, sp, #4
   12a88:	bl	12a00 <__assert_fail@plt+0xab8>
   12a8c:	bl	19a3c <__assert_fail@plt+0x7af4>
   12a90:	add	sp, sp, #140	; 0x8c
   12a94:	pop	{pc}		; (ldr pc, [sp], #4)
   12a98:	andeq	r5, r3, r0, ror #5
   12a9c:	push	{r4, lr}
   12aa0:	mov	r4, r0
   12aa4:	bl	12a24 <__assert_fail@plt+0xadc>
   12aa8:	mov	r1, #0
   12aac:	mov	r0, r4
   12ab0:	bl	11b04 <signal@plt>
   12ab4:	mov	r0, r4
   12ab8:	bl	11a20 <raise@plt>
   12abc:	pop	{r4, pc}
   12ac0:	push	{r4, lr}
   12ac4:	mov	r4, r0
   12ac8:	mov	r2, #40	; 0x28
   12acc:	mov	r1, #0
   12ad0:	bl	11d98 <memset@plt>
   12ad4:	mvn	r3, #0
   12ad8:	str	r3, [r4, #8]
   12adc:	mov	r0, r4
   12ae0:	pop	{r4, pc}
   12ae4:	push	{r4, r5, r6, lr}
   12ae8:	sub	sp, sp, #24
   12aec:	mov	r6, r0
   12af0:	mov	r5, r1
   12af4:	mov	r4, r2
   12af8:	ldr	r3, [pc, #176]	; 12bb0 <__assert_fail@plt+0xc68>
   12afc:	str	r3, [sp]
   12b00:	add	r3, sp, #8
   12b04:	mov	r2, #10
   12b08:	add	r1, sp, #20
   12b0c:	bl	20594 <__assert_fail@plt+0xe64c>
   12b10:	cmp	r0, #4
   12b14:	ldrls	pc, [pc, r0, lsl #2]
   12b18:	b	12b50 <__assert_fail@plt+0xc08>
   12b1c:	andeq	r2, r1, r0, lsr fp
   12b20:	andeq	r2, r1, r8, asr #22
   12b24:	andeq	r2, r1, r0, lsr fp
   12b28:	andeq	r2, r1, r8, asr #22
   12b2c:	andeq	r2, r1, ip, asr fp
   12b30:	ldrd	r2, [sp, #8]
   12b34:	str	r2, [r5]
   12b38:	mov	r1, #0
   12b3c:	cmp	r3, r1
   12b40:	cmpeq	r2, r2
   12b44:	beq	12b50 <__assert_fail@plt+0xc08>
   12b48:	mvn	r3, #0
   12b4c:	str	r3, [r5]
   12b50:	ldr	r0, [sp, #20]
   12b54:	add	sp, sp, #24
   12b58:	pop	{r4, r5, r6, pc}
   12b5c:	cmp	r4, #0
   12b60:	moveq	r0, r4
   12b64:	beq	12b54 <__assert_fail@plt+0xc0c>
   12b68:	mov	r2, #5
   12b6c:	ldr	r1, [pc, #64]	; 12bb4 <__assert_fail@plt+0xc6c>
   12b70:	mov	r0, #0
   12b74:	bl	11b58 <dcgettext@plt>
   12b78:	mov	r5, r0
   12b7c:	mov	r2, #5
   12b80:	mov	r1, r4
   12b84:	mov	r0, #0
   12b88:	bl	11b58 <dcgettext@plt>
   12b8c:	mov	r4, r0
   12b90:	mov	r0, r6
   12b94:	bl	1e568 <__assert_fail@plt+0xc620>
   12b98:	str	r0, [sp]
   12b9c:	mov	r3, r4
   12ba0:	mov	r2, r5
   12ba4:	mov	r1, #0
   12ba8:	mov	r0, #2
   12bac:	bl	11c90 <error@plt>
   12bb0:			; <UNDEFINED> instruction: 0x00022bb8
   12bb4:	andeq	r2, r2, r4, asr #7
   12bb8:	push	{lr}		; (str lr, [sp, #-4]!)
   12bbc:	sub	sp, sp, #12
   12bc0:	mov	r6, r0
   12bc4:	mov	r4, r1
   12bc8:	bl	11d74 <__errno_location@plt>
   12bcc:	ldr	r5, [r0]
   12bd0:	cmp	r4, #0
   12bd4:	beq	12c00 <__assert_fail@plt+0xcb8>
   12bd8:	mov	r2, r4
   12bdc:	mov	r1, #3
   12be0:	mov	r0, #0
   12be4:	bl	1e400 <__assert_fail@plt+0xc4b8>
   12be8:	str	r0, [sp]
   12bec:	mov	r3, r6
   12bf0:	ldr	r2, [pc, #32]	; 12c18 <__assert_fail@plt+0xcd0>
   12bf4:	mov	r1, r5
   12bf8:	mov	r0, #2
   12bfc:	bl	11c90 <error@plt>
   12c00:	mov	r2, #5
   12c04:	ldr	r1, [pc, #16]	; 12c1c <__assert_fail@plt+0xcd4>
   12c08:	mov	r0, #0
   12c0c:	bl	11b58 <dcgettext@plt>
   12c10:	mov	r4, r0
   12c14:	b	12bd8 <__assert_fail@plt+0xc90>
   12c18:	strdeq	r2, [r2], -r8
   12c1c:	andeq	r2, r2, r8, ror #7
   12c20:	push	{r4, lr}
   12c24:	ldr	r3, [pc, #80]	; 12c7c <__assert_fail@plt+0xd34>
   12c28:	ldr	r3, [r3, #1272]	; 0x4f8
   12c2c:	cmp	r3, #0
   12c30:	beq	12c4c <__assert_fail@plt+0xd04>
   12c34:	ldr	r3, [pc, #64]	; 12c7c <__assert_fail@plt+0xd34>
   12c38:	ldr	r3, [r3, #1272]	; 0x4f8
   12c3c:	cmp	r3, #0
   12c40:	ldr	r0, [pc, #56]	; 12c80 <__assert_fail@plt+0xd38>
   12c44:	movge	r0, #0
   12c48:	pop	{r4, pc}
   12c4c:	ldr	r2, [pc, #44]	; 12c80 <__assert_fail@plt+0xd38>
   12c50:	mov	r1, #1
   12c54:	mov	r0, #3
   12c58:	bl	11bf4 <__fxstat64@plt>
   12c5c:	cmp	r0, #0
   12c60:	mvneq	r2, #0
   12c64:	beq	12c70 <__assert_fail@plt+0xd28>
   12c68:	bl	11d74 <__errno_location@plt>
   12c6c:	ldr	r2, [r0]
   12c70:	ldr	r3, [pc, #4]	; 12c7c <__assert_fail@plt+0xd34>
   12c74:	str	r2, [r3, #1272]	; 0x4f8
   12c78:	b	12c34 <__assert_fail@plt+0xcec>
   12c7c:	andeq	r5, r3, r0, ror #5
   12c80:	andeq	r5, r3, r0, ror r7
   12c84:	push	{r4, r5, r6, lr}
   12c88:	mov	r4, r0
   12c8c:	ldrb	r3, [r1]
   12c90:	cmp	r3, #114	; 0x72
   12c94:	beq	12cd0 <__assert_fail@plt+0xd88>
   12c98:	cmp	r3, #119	; 0x77
   12c9c:	bne	12d8c <__assert_fail@plt+0xe44>
   12ca0:	cmp	r0, #0
   12ca4:	beq	12cc0 <__assert_fail@plt+0xd78>
   12ca8:	mov	r2, #0
   12cac:	mov	r3, #0
   12cb0:	mov	r0, #1
   12cb4:	bl	11b28 <ftruncate64@plt>
   12cb8:	cmp	r0, #0
   12cbc:	bne	12d30 <__assert_fail@plt+0xde8>
   12cc0:	ldr	r3, [pc, #216]	; 12da0 <__assert_fail@plt+0xe58>
   12cc4:	ldr	r4, [r3]
   12cc8:	mov	r0, r4
   12ccc:	pop	{r4, r5, r6, pc}
   12cd0:	mov	r5, r1
   12cd4:	ldr	r1, [pc, #200]	; 12da4 <__assert_fail@plt+0xe5c>
   12cd8:	bl	11a2c <strcmp@plt>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12d08 <__assert_fail@plt+0xdc0>
   12ce4:	mov	r2, #1
   12ce8:	ldr	r3, [pc, #184]	; 12da8 <__assert_fail@plt+0xe60>
   12cec:	strb	r2, [r3, #1276]	; 0x4fc
   12cf0:	ldr	r3, [pc, #180]	; 12dac <__assert_fail@plt+0xe64>
   12cf4:	ldr	r4, [r3]
   12cf8:	mov	r1, #2
   12cfc:	mov	r0, r4
   12d00:	bl	1a900 <__assert_fail@plt+0x89b8>
   12d04:	b	12cc8 <__assert_fail@plt+0xd80>
   12d08:	mov	r1, #524288	; 0x80000
   12d0c:	mov	r0, r4
   12d10:	bl	11c9c <open64@plt>
   12d14:	cmp	r0, #0
   12d18:	movlt	r4, #0
   12d1c:	blt	12cf8 <__assert_fail@plt+0xdb0>
   12d20:	mov	r1, r5
   12d24:	bl	119fc <fdopen@plt>
   12d28:	mov	r4, r0
   12d2c:	b	12cf8 <__assert_fail@plt+0xdb0>
   12d30:	bl	11d74 <__errno_location@plt>
   12d34:	ldr	r5, [r0]
   12d38:	bl	12c20 <__assert_fail@plt+0xcd8>
   12d3c:	cmp	r0, #0
   12d40:	beq	12d54 <__assert_fail@plt+0xe0c>
   12d44:	ldr	r3, [r0, #16]
   12d48:	and	r3, r3, #61440	; 0xf000
   12d4c:	cmp	r3, #32768	; 0x8000
   12d50:	bne	12cc0 <__assert_fail@plt+0xd78>
   12d54:	mov	r2, #5
   12d58:	ldr	r1, [pc, #80]	; 12db0 <__assert_fail@plt+0xe68>
   12d5c:	mov	r0, #0
   12d60:	bl	11b58 <dcgettext@plt>
   12d64:	mov	r6, r0
   12d68:	mov	r2, r4
   12d6c:	mov	r1, #3
   12d70:	mov	r0, #0
   12d74:	bl	1e400 <__assert_fail@plt+0xc4b8>
   12d78:	mov	r3, r0
   12d7c:	mov	r2, r6
   12d80:	mov	r1, r5
   12d84:	mov	r0, #2
   12d88:	bl	11c90 <error@plt>
   12d8c:	ldr	r3, [pc, #32]	; 12db4 <__assert_fail@plt+0xe6c>
   12d90:	ldr	r2, [pc, #32]	; 12db8 <__assert_fail@plt+0xe70>
   12d94:	ldr	r1, [pc, #32]	; 12dbc <__assert_fail@plt+0xe74>
   12d98:	ldr	r0, [pc, #32]	; 12dc0 <__assert_fail@plt+0xe78>
   12d9c:	bl	11f48 <__assert_fail@plt>
   12da0:	ldrdeq	r5, [r3], -r4
   12da4:	andeq	r2, r2, r0, lsl #8
   12da8:	andeq	r5, r3, r0, ror #5
   12dac:	ldrdeq	r5, [r3], -r0
   12db0:	andeq	r2, r2, r4, lsl #8
   12db4:	andeq	r2, r2, r0, asr #1
   12db8:	ldrdeq	r0, [r0], -r5
   12dbc:	andeq	r2, r2, ip, lsl r4
   12dc0:	andeq	r2, r2, r8, lsr #8
   12dc4:	push	{r4, lr}
   12dc8:	mov	r4, r0
   12dcc:	bl	12c84 <__assert_fail@plt+0xd3c>
   12dd0:	cmp	r0, #0
   12dd4:	popne	{r4, pc}
   12dd8:	mov	r2, #5
   12ddc:	ldr	r1, [pc, #12]	; 12df0 <__assert_fail@plt+0xea8>
   12de0:	mov	r0, #0
   12de4:	bl	11b58 <dcgettext@plt>
   12de8:	mov	r1, r4
   12dec:	bl	12bb8 <__assert_fail@plt+0xc70>
   12df0:	andeq	r2, r2, r4, asr r4
   12df4:	push	{r4, r5, r6, lr}
   12df8:	mov	r4, r0
   12dfc:	mov	r5, r1
   12e00:	bl	11dc8 <fileno@plt>
   12e04:	cmp	r0, #0
   12e08:	beq	12e3c <__assert_fail@plt+0xef4>
   12e0c:	cmp	r0, #1
   12e10:	beq	12e48 <__assert_fail@plt+0xf00>
   12e14:	mov	r0, r4
   12e18:	bl	1a934 <__assert_fail@plt+0x89ec>
   12e1c:	cmp	r0, #0
   12e20:	popeq	{r4, r5, r6, pc}
   12e24:	mov	r2, #5
   12e28:	ldr	r1, [pc, #64]	; 12e70 <__assert_fail@plt+0xf28>
   12e2c:	mov	r0, #0
   12e30:	bl	11b58 <dcgettext@plt>
   12e34:	mov	r1, r5
   12e38:	bl	12bb8 <__assert_fail@plt+0xc70>
   12e3c:	mov	r0, r4
   12e40:	bl	11e88 <clearerr_unlocked@plt>
   12e44:	pop	{r4, r5, r6, pc}
   12e48:	mov	r0, r4
   12e4c:	bl	11bdc <fflush_unlocked@plt>
   12e50:	cmp	r0, #0
   12e54:	popeq	{r4, r5, r6, pc}
   12e58:	mov	r2, #5
   12e5c:	ldr	r1, [pc, #16]	; 12e74 <__assert_fail@plt+0xf2c>
   12e60:	mov	r0, #0
   12e64:	bl	11b58 <dcgettext@plt>
   12e68:	mov	r1, r5
   12e6c:	bl	12bb8 <__assert_fail@plt+0xc70>
   12e70:	andeq	r2, r2, r0, ror r4
   12e74:	andeq	r2, r2, r0, ror #8
   12e78:	push	{r4, lr}
   12e7c:	mov	r1, #40	; 0x28
   12e80:	bl	20124 <__assert_fail@plt+0xe1dc>
   12e84:	ldr	r3, [pc, #52]	; 12ec0 <__assert_fail@plt+0xf78>
   12e88:	ldr	r2, [r3, #1280]	; 0x500
   12e8c:	cmp	r2, #0
   12e90:	bne	12ea0 <__assert_fail@plt+0xf58>
   12e94:	ldr	r2, [pc, #40]	; 12ec4 <__assert_fail@plt+0xf7c>
   12e98:	b	12eb0 <__assert_fail@plt+0xf68>
   12e9c:	mov	r2, r3
   12ea0:	ldr	r3, [r2, #36]	; 0x24
   12ea4:	cmp	r3, #0
   12ea8:	bne	12e9c <__assert_fail@plt+0xf54>
   12eac:	add	r2, r2, #36	; 0x24
   12eb0:	str	r0, [r2]
   12eb4:	mov	r3, #0
   12eb8:	str	r3, [r0, #36]	; 0x24
   12ebc:	pop	{r4, pc}
   12ec0:	andeq	r5, r3, r0, ror #5
   12ec4:	andeq	r5, r3, r0, ror #15
   12ec8:	push	{r4, r5, r6, lr}
   12ecc:	mov	r4, r0
   12ed0:	ldr	r3, [pc, #72]	; 12f20 <__assert_fail@plt+0xfd8>
   12ed4:	ldr	r2, [r3, #1284]	; 0x504
   12ed8:	ldr	r3, [r3, #1288]	; 0x508
   12edc:	cmp	r2, r3
   12ee0:	beq	12f00 <__assert_fail@plt+0xfb8>
   12ee4:	ldr	r3, [pc, #52]	; 12f20 <__assert_fail@plt+0xfd8>
   12ee8:	ldr	r1, [r3, #1292]	; 0x50c
   12eec:	ldr	r2, [r3, #1284]	; 0x504
   12ef0:	add	r0, r2, #1
   12ef4:	str	r0, [r3, #1284]	; 0x504
   12ef8:	str	r4, [r1, r2, lsl #2]
   12efc:	pop	{r4, r5, r6, pc}
   12f00:	ldr	r5, [pc, #24]	; 12f20 <__assert_fail@plt+0xfd8>
   12f04:	add	r1, r5, #1280	; 0x500
   12f08:	mov	r2, #4
   12f0c:	add	r1, r1, #8
   12f10:	ldr	r0, [r5, #1292]	; 0x50c
   12f14:	bl	1fd38 <__assert_fail@plt+0xddf0>
   12f18:	str	r0, [r5, #1292]	; 0x50c
   12f1c:	b	12ee4 <__assert_fail@plt+0xf9c>
   12f20:	andeq	r5, r3, r0, ror #5
   12f24:	push	{r4, r5, r6, r7, r8, lr}
   12f28:	mov	r5, r0
   12f2c:	mov	r7, r1
   12f30:	mov	r4, r2
   12f34:	add	r6, r1, #1
   12f38:	bic	r4, r4, #15
   12f3c:	add	r4, r4, #16
   12f40:	mov	r0, r4
   12f44:	bl	20a64 <__assert_fail@plt+0xeb1c>
   12f48:	str	r0, [r5]
   12f4c:	cmp	r0, #0
   12f50:	bne	12f64 <__assert_fail@plt+0x101c>
   12f54:	lsr	r4, r4, #1
   12f58:	cmp	r4, r6
   12f5c:	bhi	12f38 <__assert_fail@plt+0xff0>
   12f60:	bl	201b4 <__assert_fail@plt+0xe26c>
   12f64:	str	r7, [r5, #20]
   12f68:	str	r4, [r5, #12]
   12f6c:	mov	r3, #0
   12f70:	str	r3, [r5, #8]
   12f74:	str	r3, [r5, #16]
   12f78:	str	r3, [r5, #4]
   12f7c:	strb	r3, [r5, #24]
   12f80:	pop	{r4, r5, r6, r7, r8, pc}
   12f84:	push	{r4, r5, r6, lr}
   12f88:	mov	r4, r0
   12f8c:	mov	r5, r1
   12f90:	mov	r2, #0
   12f94:	sub	r1, r1, r0
   12f98:	bl	1c2e4 <__assert_fail@plt+0xa39c>
   12f9c:	cmp	r5, r4
   12fa0:	popls	{r4, r5, r6, pc}
   12fa4:	ldrb	r3, [r4], #1
   12fa8:	cmp	r3, #9
   12fac:	addeq	r0, r0, #1
   12fb0:	cmp	r5, r4
   12fb4:	bne	12fa4 <__assert_fail@plt+0x105c>
   12fb8:	pop	{r4, r5, r6, pc}
   12fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fc0:	sub	sp, sp, #12
   12fc4:	mov	r9, r0
   12fc8:	mov	r5, r1
   12fcc:	ldr	r0, [r0]
   12fd0:	ldr	r4, [r9, #4]
   12fd4:	add	r6, r0, r4
   12fd8:	subs	r7, r2, #0
   12fdc:	beq	13014 <__assert_fail@plt+0x10cc>
   12fe0:	ldr	r3, [pc, #932]	; 1338c <__assert_fail@plt+0x1444>
   12fe4:	ldrb	r3, [r3, #100]	; 0x64
   12fe8:	strb	r3, [r6, #-1]
   12fec:	mov	r3, r5
   12ff0:	mov	r2, r4
   12ff4:	mov	r1, #1
   12ff8:	bl	11b34 <fwrite_unlocked@plt>
   12ffc:	cmp	r4, r0
   13000:	moveq	r3, #0
   13004:	strbeq	r3, [r6, #-1]
   13008:	bne	13374 <__assert_fail@plt+0x142c>
   1300c:	add	sp, sp, #12
   13010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13014:	ldr	r3, [pc, #884]	; 13390 <__assert_fail@plt+0x1448>
   13018:	ldrb	r3, [r3, #1296]	; 0x510
   1301c:	cmp	r3, #0
   13020:	beq	12fe0 <__assert_fail@plt+0x1098>
   13024:	cmp	r0, r6
   13028:	movcc	r4, r0
   1302c:	bcc	13074 <__assert_fail@plt+0x112c>
   13030:	ldr	r3, [pc, #856]	; 13390 <__assert_fail@plt+0x1448>
   13034:	ldr	r6, [r3, #1280]	; 0x500
   13038:	mov	r8, r3
   1303c:	ldr	r5, [pc, #848]	; 13394 <__assert_fail@plt+0x144c>
   13040:	b	131f0 <__assert_fail@plt+0x12a8>
   13044:	mov	r0, r1
   13048:	ldr	r3, [r5, #20]
   1304c:	ldr	r2, [r5, #24]
   13050:	cmp	r3, r2
   13054:	addcc	r2, r3, #1
   13058:	strcc	r2, [r5, #20]
   1305c:	strbcc	r1, [r3]
   13060:	bcs	13090 <__assert_fail@plt+0x1148>
   13064:	cmn	r0, #1
   13068:	beq	1309c <__assert_fail@plt+0x1154>
   1306c:	cmp	r6, r4
   13070:	beq	13030 <__assert_fail@plt+0x10e8>
   13074:	ldrb	r1, [r4], #1
   13078:	cmp	r1, #9
   1307c:	moveq	r1, #62	; 0x3e
   13080:	beq	13044 <__assert_fail@plt+0x10fc>
   13084:	cmp	r6, r4
   13088:	moveq	r1, #10
   1308c:	b	13044 <__assert_fail@plt+0x10fc>
   13090:	mov	r0, r5
   13094:	bl	11e1c <__overflow@plt>
   13098:	b	13064 <__assert_fail@plt+0x111c>
   1309c:	mov	r2, #5
   130a0:	ldr	r1, [pc, #752]	; 13398 <__assert_fail@plt+0x1450>
   130a4:	mov	r0, #0
   130a8:	bl	11b58 <dcgettext@plt>
   130ac:	mov	r1, #0
   130b0:	bl	12bb8 <__assert_fail@plt+0xc70>
   130b4:	ldr	r3, [r6, #8]
   130b8:	cmn	r3, #1
   130bc:	moveq	r7, r4
   130c0:	beq	13240 <__assert_fail@plt+0x12f8>
   130c4:	mov	r7, r4
   130c8:	b	13230 <__assert_fail@plt+0x12e8>
   130cc:	mov	r1, sp
   130d0:	mov	r0, r7
   130d4:	bl	12520 <__assert_fail@plt+0x5d8>
   130d8:	strb	fp, [sl]
   130dc:	ldr	sl, [sp]
   130e0:	mov	r1, r7
   130e4:	mov	r0, r4
   130e8:	bl	12f84 <__assert_fail@plt+0x103c>
   130ec:	mov	r4, r0
   130f0:	mov	r1, sl
   130f4:	mov	r0, r7
   130f8:	bl	12f84 <__assert_fail@plt+0x103c>
   130fc:	mov	r7, r0
   13100:	mov	sl, #32
   13104:	b	13124 <__assert_fail@plt+0x11dc>
   13108:	mov	r1, sp
   1310c:	mov	r0, r7
   13110:	bl	11b1c <strtold@plt>
   13114:	b	130d8 <__assert_fail@plt+0x1190>
   13118:	mov	r7, r4
   1311c:	b	130e0 <__assert_fail@plt+0x1198>
   13120:	sub	r4, r4, #1
   13124:	cmp	r4, #0
   13128:	beq	13158 <__assert_fail@plt+0x1210>
   1312c:	ldr	r0, [r5]
   13130:	ldr	r3, [r0, #20]
   13134:	ldr	r2, [r0, #24]
   13138:	cmp	r3, r2
   1313c:	addcc	r2, r3, #1
   13140:	strcc	r2, [r0, #20]
   13144:	strbcc	sl, [r3]
   13148:	bcc	13120 <__assert_fail@plt+0x11d8>
   1314c:	mov	r1, sl
   13150:	bl	11e1c <__overflow@plt>
   13154:	b	13120 <__assert_fail@plt+0x11d8>
   13158:	cmp	r7, #0
   1315c:	movne	r4, #95	; 0x5f
   13160:	bne	1318c <__assert_fail@plt+0x1244>
   13164:	mov	r2, #5
   13168:	ldr	r1, [pc, #556]	; 1339c <__assert_fail@plt+0x1454>
   1316c:	mov	r0, #0
   13170:	bl	11b58 <dcgettext@plt>
   13174:	mov	r1, r0
   13178:	mov	r0, #1
   1317c:	bl	11db0 <__printf_chk@plt>
   13180:	b	131dc <__assert_fail@plt+0x1294>
   13184:	subs	r7, r7, #1
   13188:	beq	131b8 <__assert_fail@plt+0x1270>
   1318c:	ldr	r0, [r5]
   13190:	ldr	r3, [r0, #20]
   13194:	ldr	r2, [r0, #24]
   13198:	cmp	r3, r2
   1319c:	addcc	r2, r3, #1
   131a0:	strcc	r2, [r0, #20]
   131a4:	strbcc	r4, [r3]
   131a8:	bcc	13184 <__assert_fail@plt+0x123c>
   131ac:	mov	r1, r4
   131b0:	bl	11e1c <__overflow@plt>
   131b4:	b	13184 <__assert_fail@plt+0x123c>
   131b8:	ldr	r0, [r5]
   131bc:	ldr	r3, [r0, #20]
   131c0:	ldr	r2, [r0, #24]
   131c4:	cmp	r3, r2
   131c8:	addcc	r2, r3, #1
   131cc:	strcc	r2, [r0, #20]
   131d0:	movcc	r2, #10
   131d4:	strbcc	r2, [r3]
   131d8:	bcs	1334c <__assert_fail@plt+0x1404>
   131dc:	cmp	r6, #0
   131e0:	beq	1300c <__assert_fail@plt+0x10c4>
   131e4:	ldr	r6, [r6, #36]	; 0x24
   131e8:	cmp	r6, #0
   131ec:	beq	13358 <__assert_fail@plt+0x1410>
   131f0:	ldr	r4, [r9]
   131f4:	ldr	sl, [r9, #4]
   131f8:	sub	sl, sl, #1
   131fc:	add	sl, r4, sl
   13200:	cmp	r6, #0
   13204:	beq	13118 <__assert_fail@plt+0x11d0>
   13208:	ldr	fp, [r6]
   1320c:	cmn	fp, #1
   13210:	beq	130b4 <__assert_fail@plt+0x116c>
   13214:	mov	r1, r6
   13218:	mov	r0, r9
   1321c:	bl	120ac <__assert_fail@plt+0x164>
   13220:	mov	r7, r0
   13224:	ldr	r3, [r6, #8]
   13228:	cmn	r3, #1
   1322c:	beq	13258 <__assert_fail@plt+0x1310>
   13230:	mov	r1, r6
   13234:	mov	r0, r9
   13238:	bl	1224c <__assert_fail@plt+0x304>
   1323c:	mov	sl, r0
   13240:	cmn	fp, #1
   13244:	movne	fp, #0
   13248:	moveq	fp, #1
   1324c:	ldrb	r3, [r6, #24]
   13250:	tst	fp, r3
   13254:	bne	1327c <__assert_fail@plt+0x1334>
   13258:	ldrb	r3, [r6, #30]
   1325c:	cmp	r3, #0
   13260:	bne	1327c <__assert_fail@plt+0x1334>
   13264:	ldrb	r3, [r6, #26]
   13268:	cmp	r3, #0
   1326c:	bne	1327c <__assert_fail@plt+0x1334>
   13270:	ldrh	r3, [r6, #28]
   13274:	cmp	r3, #0
   13278:	beq	130e0 <__assert_fail@plt+0x1198>
   1327c:	ldrb	fp, [sl]
   13280:	mov	r3, #0
   13284:	strb	r3, [sl]
   13288:	ldrb	r3, [r7]
   1328c:	ldrb	r3, [r8, r3]
   13290:	cmp	r3, #0
   13294:	beq	132a8 <__assert_fail@plt+0x1360>
   13298:	ldrb	r3, [r7, #1]!
   1329c:	ldrb	r3, [r8, r3]
   132a0:	cmp	r3, #0
   132a4:	bne	13298 <__assert_fail@plt+0x1350>
   132a8:	str	r7, [sp]
   132ac:	cmp	r7, sl
   132b0:	strhi	sl, [sp]
   132b4:	bhi	130d8 <__assert_fail@plt+0x1190>
   132b8:	ldrb	r3, [r6, #30]
   132bc:	cmp	r3, #0
   132c0:	bne	130cc <__assert_fail@plt+0x1184>
   132c4:	ldrb	r3, [r6, #28]
   132c8:	cmp	r3, #0
   132cc:	bne	13108 <__assert_fail@plt+0x11c0>
   132d0:	ldrb	r2, [r6, #26]
   132d4:	cmp	r2, #0
   132d8:	bne	132ec <__assert_fail@plt+0x13a4>
   132dc:	ldrb	r2, [r6, #29]
   132e0:	cmp	r2, #0
   132e4:	streq	sl, [sp]
   132e8:	beq	130d8 <__assert_fail@plt+0x1190>
   132ec:	cmp	r7, sl
   132f0:	bcs	13304 <__assert_fail@plt+0x13bc>
   132f4:	ldrb	r3, [r7]
   132f8:	cmp	r3, #45	; 0x2d
   132fc:	movne	r3, #0
   13300:	moveq	r3, #1
   13304:	add	r3, r7, r3
   13308:	str	r3, [sp, #4]
   1330c:	add	r0, sp, #4
   13310:	bl	12410 <__assert_fail@plt+0x4c8>
   13314:	cmp	r0, #47	; 0x2f
   13318:	bls	130d8 <__assert_fail@plt+0x1190>
   1331c:	ldr	r3, [sp, #4]
   13320:	ldrb	r2, [r6, #29]
   13324:	cmp	r2, #0
   13328:	beq	13340 <__assert_fail@plt+0x13f8>
   1332c:	ldrb	r2, [r3]
   13330:	ldr	r1, [pc, #104]	; 133a0 <__assert_fail@plt+0x1458>
   13334:	ldrb	r2, [r1, r2]
   13338:	adds	r2, r2, #0
   1333c:	movne	r2, #1
   13340:	add	r3, r3, r2
   13344:	str	r3, [sp]
   13348:	b	130d8 <__assert_fail@plt+0x1190>
   1334c:	mov	r1, #10
   13350:	bl	11e1c <__overflow@plt>
   13354:	b	131dc <__assert_fail@plt+0x1294>
   13358:	ldrb	r3, [r8, #1297]	; 0x511
   1335c:	cmp	r3, #0
   13360:	bne	1300c <__assert_fail@plt+0x10c4>
   13364:	ldrb	r3, [r8, #1298]	; 0x512
   13368:	cmp	r3, #0
   1336c:	beq	131f0 <__assert_fail@plt+0x12a8>
   13370:	b	1300c <__assert_fail@plt+0x10c4>
   13374:	mov	r2, #5
   13378:	ldr	r1, [pc, #24]	; 13398 <__assert_fail@plt+0x1450>
   1337c:	mov	r0, #0
   13380:	bl	11b58 <dcgettext@plt>
   13384:	mov	r1, r7
   13388:	bl	12bb8 <__assert_fail@plt+0xc70>
   1338c:	andeq	r5, r3, r4, ror #3
   13390:	andeq	r5, r3, r0, ror #5
   13394:	ldrdeq	r5, [r3], -r4
   13398:	andeq	r2, r2, r0, lsl #9
   1339c:	muleq	r2, r0, r4
   133a0:	andeq	r1, r2, r0, asr #31
   133a4:	push	{r4, r5, r6, r7, r8, lr}
   133a8:	mov	r6, r0
   133ac:	mov	r5, r1
   133b0:	mov	r7, r2
   133b4:	bl	11d74 <__errno_location@plt>
   133b8:	mov	r4, r0
   133bc:	mov	r3, #0
   133c0:	str	r3, [r0]
   133c4:	mov	r2, r7
   133c8:	mov	r1, r5
   133cc:	mov	r0, r6
   133d0:	bl	11d68 <strxfrm@plt>
   133d4:	ldr	r4, [r4]
   133d8:	cmp	r4, #0
   133dc:	popeq	{r4, r5, r6, r7, r8, pc}
   133e0:	mov	r2, #5
   133e4:	ldr	r1, [pc, #108]	; 13458 <__assert_fail@plt+0x1510>
   133e8:	mov	r0, #0
   133ec:	bl	11b58 <dcgettext@plt>
   133f0:	mov	r2, r0
   133f4:	mov	r1, r4
   133f8:	mov	r0, #0
   133fc:	bl	11c90 <error@plt>
   13400:	mov	r2, #5
   13404:	ldr	r1, [pc, #80]	; 1345c <__assert_fail@plt+0x1514>
   13408:	mov	r0, #0
   1340c:	bl	11b58 <dcgettext@plt>
   13410:	mov	r2, r0
   13414:	mov	r1, #0
   13418:	mov	r0, r1
   1341c:	bl	11c90 <error@plt>
   13420:	mov	r2, #5
   13424:	ldr	r1, [pc, #52]	; 13460 <__assert_fail@plt+0x1518>
   13428:	mov	r0, #0
   1342c:	bl	11b58 <dcgettext@plt>
   13430:	mov	r4, r0
   13434:	mov	r2, r5
   13438:	mov	r1, #8
   1343c:	mov	r0, #0
   13440:	bl	1e2c8 <__assert_fail@plt+0xc380>
   13444:	mov	r3, r0
   13448:	mov	r2, r4
   1344c:	mov	r1, #0
   13450:	mov	r0, #2
   13454:	bl	11c90 <error@plt>
   13458:	andeq	r2, r2, r4, lsr #9
   1345c:	andeq	r2, r2, r4, asr #9
   13460:	strdeq	r2, [r2], -r0
   13464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13468:	sub	sp, sp, #44	; 0x2c
   1346c:	ldrb	r3, [r0, #24]
   13470:	str	r3, [sp, #24]
   13474:	cmp	r3, #0
   13478:	bne	13728 <__assert_fail@plt+0x17e0>
   1347c:	str	r2, [sp, #28]
   13480:	str	r1, [sp, #16]
   13484:	mov	r4, r0
   13488:	str	r0, [sp, #20]
   1348c:	ldr	r3, [pc, #680]	; 1373c <__assert_fail@plt+0x17f4>
   13490:	ldr	r7, [r3, #1280]	; 0x500
   13494:	ldr	r3, [pc, #676]	; 13740 <__assert_fail@plt+0x17f8>
   13498:	ldrb	r1, [r3, #100]	; 0x64
   1349c:	str	r1, [sp]
   134a0:	ldr	r1, [r0, #20]
   134a4:	str	r1, [sp, #4]
   134a8:	ldr	r8, [r3, #104]	; 0x68
   134ac:	ldr	r3, [r0, #4]
   134b0:	ldr	r2, [r0, #16]
   134b4:	cmp	r3, r2
   134b8:	beq	134dc <__assert_fail@plt+0x1594>
   134bc:	ldr	r0, [r0]
   134c0:	sub	r3, r3, r2
   134c4:	add	r1, r0, r3
   134c8:	bl	11a80 <memmove@plt>
   134cc:	ldr	r3, [r4, #16]
   134d0:	str	r3, [r4, #4]
   134d4:	mov	r3, #0
   134d8:	str	r3, [r4, #8]
   134dc:	sub	r8, r8, #18
   134e0:	ldr	r3, [sp, #4]
   134e4:	add	r3, r3, #1
   134e8:	str	r3, [sp, #8]
   134ec:	ldr	fp, [pc, #584]	; 1373c <__assert_fail@plt+0x17f4>
   134f0:	b	136c4 <__assert_fail@plt+0x177c>
   134f4:	mov	r2, #5
   134f8:	ldr	r1, [pc, #580]	; 13744 <__assert_fail@plt+0x17fc>
   134fc:	mov	r0, #0
   13500:	bl	11b58 <dcgettext@plt>
   13504:	ldr	r1, [sp, #28]
   13508:	bl	12bb8 <__assert_fail@plt+0xc70>
   1350c:	ldrb	r3, [r7, #24]
   13510:	cmp	r3, #0
   13514:	beq	13538 <__assert_fail@plt+0x15f0>
   13518:	ldrb	r3, [r6]
   1351c:	ldrb	r3, [fp, r3]
   13520:	cmp	r3, #0
   13524:	beq	13538 <__assert_fail@plt+0x15f0>
   13528:	ldrb	r3, [r6, #1]!
   1352c:	ldrb	r3, [fp, r3]
   13530:	cmp	r3, #0
   13534:	bne	13528 <__assert_fail@plt+0x15e0>
   13538:	str	r6, [r5, #8]
   1353c:	mov	r6, r4
   13540:	sub	r2, sl, r4
   13544:	ldr	r1, [sp]
   13548:	mov	r0, r4
   1354c:	bl	11de0 <memchr@plt>
   13550:	cmp	r0, #0
   13554:	beq	135c4 <__assert_fail@plt+0x167c>
   13558:	mov	r4, r0
   1355c:	mov	r3, #0
   13560:	strb	r3, [r4], #1
   13564:	str	r6, [r5, #-16]!
   13568:	sub	r3, r4, r6
   1356c:	str	r3, [r5, #4]
   13570:	cmp	r8, r3
   13574:	movcc	r8, r3
   13578:	ldr	r3, [sp, #4]
   1357c:	sub	r9, r9, r3
   13580:	cmp	r7, #0
   13584:	beq	1353c <__assert_fail@plt+0x15f4>
   13588:	ldr	r3, [r7, #8]
   1358c:	cmn	r3, #1
   13590:	beq	135a0 <__assert_fail@plt+0x1658>
   13594:	mov	r1, r7
   13598:	mov	r0, r5
   1359c:	bl	1224c <__assert_fail@plt+0x304>
   135a0:	str	r0, [r5, #12]
   135a4:	ldr	r3, [r7]
   135a8:	cmn	r3, #1
   135ac:	beq	1350c <__assert_fail@plt+0x15c4>
   135b0:	mov	r1, r7
   135b4:	mov	r0, r5
   135b8:	bl	120ac <__assert_fail@plt+0x164>
   135bc:	str	r0, [r5, #8]
   135c0:	b	1353c <__assert_fail@plt+0x15f4>
   135c4:	mov	r4, sl
   135c8:	ldr	r3, [sp, #20]
   135cc:	ldrb	r3, [r3, #24]
   135d0:	cmp	r3, #0
   135d4:	bne	13670 <__assert_fail@plt+0x1728>
   135d8:	ldr	r3, [sp, #8]
   135dc:	cmp	r9, r3
   135e0:	bls	1366c <__assert_fail@plt+0x1724>
   135e4:	ldr	r1, [sp, #8]
   135e8:	sub	r0, r9, #1
   135ec:	bl	21578 <_obstack_memory_used@@Base+0x94>
   135f0:	ldr	r3, [sp, #16]
   135f4:	str	r0, [sp, #12]
   135f8:	mov	r2, r0
   135fc:	mov	r1, #1
   13600:	mov	r0, r4
   13604:	bl	11ee8 <fread_unlocked@plt>
   13608:	add	sl, r4, r0
   1360c:	sub	r9, r9, r0
   13610:	ldr	r3, [sp, #12]
   13614:	cmp	r3, r0
   13618:	beq	13540 <__assert_fail@plt+0x15f8>
   1361c:	ldr	r3, [sp, #16]
   13620:	ldr	r3, [r3]
   13624:	tst	r3, #32
   13628:	bne	134f4 <__assert_fail@plt+0x15ac>
   1362c:	tst	r3, #16
   13630:	beq	13540 <__assert_fail@plt+0x15f8>
   13634:	ldr	r3, [sp, #20]
   13638:	mov	r2, #1
   1363c:	strb	r2, [r3, #24]
   13640:	ldr	r3, [r3]
   13644:	cmp	sl, r3
   13648:	beq	13730 <__assert_fail@plt+0x17e8>
   1364c:	cmp	r6, sl
   13650:	beq	13540 <__assert_fail@plt+0x15f8>
   13654:	ldrb	r3, [sl, #-1]
   13658:	ldr	r2, [sp]
   1365c:	cmp	r3, r2
   13660:	strbne	r2, [sl]
   13664:	addne	sl, sl, #1
   13668:	b	13540 <__assert_fail@plt+0x15f8>
   1366c:	mov	sl, r4
   13670:	ldr	ip, [sp, #20]
   13674:	ldr	r0, [ip]
   13678:	sub	r3, sl, r0
   1367c:	str	r3, [ip, #4]
   13680:	ldr	r1, [ip, #12]
   13684:	add	r3, r0, r1
   13688:	sub	r3, r3, r5
   1368c:	asr	r3, r3, #4
   13690:	str	r3, [ip, #8]
   13694:	cmp	r3, #0
   13698:	bne	13708 <__assert_fail@plt+0x17c0>
   1369c:	lsr	r1, r1, #4
   136a0:	str	r1, [sp, #36]	; 0x24
   136a4:	mov	r2, #16
   136a8:	add	r1, sp, #36	; 0x24
   136ac:	bl	1fd38 <__assert_fail@plt+0xddf0>
   136b0:	ldr	r2, [sp, #20]
   136b4:	str	r0, [r2]
   136b8:	ldr	r3, [sp, #36]	; 0x24
   136bc:	lsl	r3, r3, #4
   136c0:	str	r3, [r2, #12]
   136c4:	ldr	r2, [sp, #20]
   136c8:	ldr	r6, [r2]
   136cc:	ldr	r4, [r2, #4]
   136d0:	add	r4, r6, r4
   136d4:	ldr	r3, [r2, #12]
   136d8:	add	r3, r6, r3
   136dc:	ldr	r2, [r2, #8]
   136e0:	sub	r5, r3, r2, lsl #4
   136e4:	ldr	r1, [sp, #4]
   136e8:	mul	r9, r2, r1
   136ec:	sub	r3, r3, r9
   136f0:	sub	r9, r3, r4
   136f4:	cmp	r2, #0
   136f8:	ldrne	r6, [r5]
   136fc:	ldrne	r3, [r5, #4]
   13700:	addne	r6, r6, r3
   13704:	b	135d8 <__assert_fail@plt+0x1690>
   13708:	sub	r2, sl, r6
   1370c:	str	r2, [ip, #16]
   13710:	add	r8, r8, #18
   13714:	ldr	r3, [pc, #36]	; 13740 <__assert_fail@plt+0x17f8>
   13718:	str	r8, [r3, #104]	; 0x68
   1371c:	mov	r3, #1
   13720:	str	r3, [sp, #24]
   13724:	b	13730 <__assert_fail@plt+0x17e8>
   13728:	mov	r3, #0
   1372c:	str	r3, [sp, #24]
   13730:	ldr	r0, [sp, #24]
   13734:	add	sp, sp, #44	; 0x2c
   13738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1373c:	andeq	r5, r3, r0, ror #5
   13740:	andeq	r5, r3, r4, ror #3
   13744:	andeq	r2, r2, r0, lsl r5
   13748:	cmp	r0, r1
   1374c:	bxeq	lr
   13750:	push	{r4, lr}
   13754:	mov	r4, r0
   13758:	bl	11b88 <dup2@plt>
   1375c:	mov	r0, r4
   13760:	bl	11f30 <close@plt>
   13764:	pop	{r4, pc}
   13768:	push	{lr}		; (str lr, [sp, #-4]!)
   1376c:	sub	sp, sp, #20
   13770:	str	r0, [sp, #8]
   13774:	add	r1, sp, #4
   13778:	ldr	r3, [pc, #32]	; 137a0 <__assert_fail@plt+0x1858>
   1377c:	ldr	r0, [r3, #1300]	; 0x514
   13780:	bl	1beac <__assert_fail@plt+0x9f64>
   13784:	cmp	r0, #0
   13788:	movne	r3, #2
   1378c:	strbne	r3, [r0, #8]
   13790:	movne	r0, #1
   13794:	moveq	r0, #0
   13798:	add	sp, sp, #20
   1379c:	pop	{pc}		; (ldr pc, [sp], #4)
   137a0:	andeq	r5, r3, r0, ror #5
   137a4:	push	{r4, r5, lr}
   137a8:	sub	sp, sp, #12
   137ac:	subs	r4, r0, #0
   137b0:	movne	r0, r4
   137b4:	mvneq	r0, #0
   137b8:	clz	r2, r4
   137bc:	lsr	r2, r2, #5
   137c0:	add	r1, sp, #4
   137c4:	bl	11c3c <waitpid@plt>
   137c8:	subs	r5, r0, #0
   137cc:	blt	13814 <__assert_fail@plt+0x18cc>
   137d0:	cmp	r5, #0
   137d4:	ble	13808 <__assert_fail@plt+0x18c0>
   137d8:	cmp	r4, #0
   137dc:	ble	13854 <__assert_fail@plt+0x190c>
   137e0:	ldr	r3, [sp, #4]
   137e4:	tst	r3, #127	; 0x7f
   137e8:	bne	13868 <__assert_fail@plt+0x1920>
   137ec:	asr	r3, r3, #8
   137f0:	tst	r3, #255	; 0xff
   137f4:	bne	13868 <__assert_fail@plt+0x1920>
   137f8:	ldr	r2, [pc, #160]	; 138a0 <__assert_fail@plt+0x1958>
   137fc:	ldr	r3, [r2, #1308]	; 0x51c
   13800:	sub	r3, r3, #1
   13804:	str	r3, [r2, #1308]	; 0x51c
   13808:	mov	r0, r5
   1380c:	add	sp, sp, #12
   13810:	pop	{r4, r5, pc}
   13814:	bl	11d74 <__errno_location@plt>
   13818:	ldr	r4, [r0]
   1381c:	mov	r2, #5
   13820:	ldr	r1, [pc, #124]	; 138a4 <__assert_fail@plt+0x195c>
   13824:	mov	r0, #0
   13828:	bl	11b58 <dcgettext@plt>
   1382c:	mov	r5, r0
   13830:	ldr	r3, [pc, #104]	; 138a0 <__assert_fail@plt+0x1958>
   13834:	ldr	r1, [r3, #1304]	; 0x518
   13838:	mov	r0, #4
   1383c:	bl	1e334 <__assert_fail@plt+0xc3ec>
   13840:	mov	r3, r0
   13844:	mov	r2, r5
   13848:	mov	r1, r4
   1384c:	mov	r0, #2
   13850:	bl	11c90 <error@plt>
   13854:	mov	r0, r5
   13858:	bl	13768 <__assert_fail@plt+0x1820>
   1385c:	cmp	r0, #0
   13860:	bne	137e0 <__assert_fail@plt+0x1898>
   13864:	b	13808 <__assert_fail@plt+0x18c0>
   13868:	mov	r2, #5
   1386c:	ldr	r1, [pc, #52]	; 138a8 <__assert_fail@plt+0x1960>
   13870:	mov	r0, #0
   13874:	bl	11b58 <dcgettext@plt>
   13878:	mov	r4, r0
   1387c:	ldr	r3, [pc, #28]	; 138a0 <__assert_fail@plt+0x1958>
   13880:	ldr	r1, [r3, #1304]	; 0x518
   13884:	mov	r0, #4
   13888:	bl	1e334 <__assert_fail@plt+0xc3ec>
   1388c:	mov	r3, r0
   13890:	mov	r2, r4
   13894:	mov	r1, #0
   13898:	mov	r0, #2
   1389c:	bl	11c90 <error@plt>
   138a0:	andeq	r5, r3, r0, ror #5
   138a4:	andeq	r2, r2, ip, lsl r5
   138a8:	andeq	r2, r2, r0, lsr r5
   138ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   138b0:	sub	sp, sp, #140	; 0x8c
   138b4:	mov	r6, r0
   138b8:	ldr	r3, [pc, #232]	; 139a8 <__assert_fail@plt+0x1a60>
   138bc:	ldr	r3, [r3, #1160]	; 0x488
   138c0:	add	r2, r3, #9
   138c4:	cmp	r0, r2
   138c8:	bne	138dc <__assert_fail@plt+0x1994>
   138cc:	mov	r4, r3
   138d0:	ldr	r5, [pc, #212]	; 139ac <__assert_fail@plt+0x1a64>
   138d4:	b	138f0 <__assert_fail@plt+0x19a8>
   138d8:	mov	r3, r4
   138dc:	ldr	r4, [r3]
   138e0:	add	r2, r4, #9
   138e4:	cmp	r2, r6
   138e8:	bne	138d8 <__assert_fail@plt+0x1990>
   138ec:	mov	r5, r3
   138f0:	ldrb	r3, [r4, #8]
   138f4:	cmp	r3, #1
   138f8:	beq	1394c <__assert_fail@plt+0x1a04>
   138fc:	ldr	r7, [r4]
   13900:	add	r0, sp, #4
   13904:	bl	129d4 <__assert_fail@plt+0xa8c>
   13908:	mov	r0, r6
   1390c:	bl	11b7c <unlink@plt>
   13910:	mov	r8, r0
   13914:	bl	11d74 <__errno_location@plt>
   13918:	ldr	r9, [r0]
   1391c:	str	r7, [r5]
   13920:	add	r0, sp, #4
   13924:	bl	12a00 <__assert_fail@plt+0xab8>
   13928:	cmp	r8, #0
   1392c:	bne	1396c <__assert_fail@plt+0x1a24>
   13930:	cmp	r7, #0
   13934:	ldreq	r3, [pc, #116]	; 139b0 <__assert_fail@plt+0x1a68>
   13938:	streq	r5, [r3, #108]	; 0x6c
   1393c:	mov	r0, r4
   13940:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   13944:	add	sp, sp, #140	; 0x8c
   13948:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1394c:	ldr	r7, [r4, #4]
   13950:	mov	r0, r7
   13954:	bl	13768 <__assert_fail@plt+0x1820>
   13958:	cmp	r0, #0
   1395c:	beq	138fc <__assert_fail@plt+0x19b4>
   13960:	mov	r0, r7
   13964:	bl	137a4 <__assert_fail@plt+0x185c>
   13968:	b	138fc <__assert_fail@plt+0x19b4>
   1396c:	mov	r2, #5
   13970:	ldr	r1, [pc, #60]	; 139b4 <__assert_fail@plt+0x1a6c>
   13974:	mov	r0, #0
   13978:	bl	11b58 <dcgettext@plt>
   1397c:	mov	r8, r0
   13980:	mov	r2, r6
   13984:	mov	r1, #3
   13988:	mov	r0, #0
   1398c:	bl	1e400 <__assert_fail@plt+0xc4b8>
   13990:	mov	r3, r0
   13994:	mov	r2, r8
   13998:	mov	r1, r9
   1399c:	mov	r0, #0
   139a0:	bl	11c90 <error@plt>
   139a4:	b	13930 <__assert_fail@plt+0x19e8>
   139a8:	andeq	r5, r3, r0, ror #5
   139ac:	andeq	r5, r3, r8, ror #14
   139b0:	andeq	r5, r3, r4, ror #3
   139b4:	andeq	r2, r2, r0, asr r5
   139b8:	push	{r4, r5, r6, lr}
   139bc:	ldr	r4, [pc, #32]	; 139e4 <__assert_fail@plt+0x1a9c>
   139c0:	mov	r5, #0
   139c4:	ldr	r3, [r4, #1308]	; 0x51c
   139c8:	cmp	r3, #0
   139cc:	pople	{r4, r5, r6, pc}
   139d0:	mov	r0, r5
   139d4:	bl	137a4 <__assert_fail@plt+0x185c>
   139d8:	cmp	r0, #0
   139dc:	bne	139c4 <__assert_fail@plt+0x1a7c>
   139e0:	pop	{r4, r5, r6, pc}
   139e4:	andeq	r5, r3, r0, ror #5
   139e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139ec:	vpush	{d8}
   139f0:	sub	sp, sp, #140	; 0x8c
   139f4:	mov	r9, r0
   139f8:	mov	r4, r1
   139fc:	mov	r1, #524288	; 0x80000
   13a00:	bl	1c810 <__assert_fail@plt+0xa8c8>
   13a04:	cmp	r0, #0
   13a08:	blt	13b10 <__assert_fail@plt+0x1bc8>
   13a0c:	ldr	r3, [pc, #308]	; 13b48 <__assert_fail@plt+0x1c00>
   13a10:	ldr	r3, [r3, #112]	; 0x70
   13a14:	add	r3, r3, #1
   13a18:	ldr	r2, [pc, #300]	; 13b4c <__assert_fail@plt+0x1c04>
   13a1c:	ldr	r2, [r2, #1308]	; 0x51c
   13a20:	cmp	r3, r2
   13a24:	bcc	13a44 <__assert_fail@plt+0x1afc>
   13a28:	sub	r5, r4, #1
   13a2c:	cmp	r4, #0
   13a30:	beq	13b24 <__assert_fail@plt+0x1bdc>
   13a34:	vldr	d8, [pc, #260]	; 13b40 <__assert_fail@plt+0x1bf8>
   13a38:	ldr	r7, [pc, #268]	; 13b4c <__assert_fail@plt+0x1c04>
   13a3c:	mov	r8, #0
   13a40:	b	13a70 <__assert_fail@plt+0x1b28>
   13a44:	mvn	r0, #0
   13a48:	bl	137a4 <__assert_fail@plt+0x185c>
   13a4c:	bl	139b8 <__assert_fail@plt+0x1a70>
   13a50:	b	13a28 <__assert_fail@plt+0x1ae0>
   13a54:	vmov.f64	d0, d8
   13a58:	bl	20370 <__assert_fail@plt+0xe428>
   13a5c:	vadd.f64	d8, d8, d8
   13a60:	bl	139b8 <__assert_fail@plt+0x1a70>
   13a64:	sub	r5, r5, #1
   13a68:	cmn	r5, #1
   13a6c:	beq	13ac4 <__assert_fail@plt+0x1b7c>
   13a70:	add	r0, sp, #4
   13a74:	bl	129d4 <__assert_fail@plt+0xa8c>
   13a78:	ldr	fp, [r7, #1160]	; 0x488
   13a7c:	str	r8, [r7, #1160]	; 0x488
   13a80:	bl	11e40 <fork@plt>
   13a84:	mov	r6, r0
   13a88:	bl	11d74 <__errno_location@plt>
   13a8c:	mov	sl, r0
   13a90:	ldr	r4, [r0]
   13a94:	cmp	r6, #0
   13a98:	beq	13b18 <__assert_fail@plt+0x1bd0>
   13a9c:	str	fp, [r7, #1160]	; 0x488
   13aa0:	add	r0, sp, #4
   13aa4:	bl	12a00 <__assert_fail@plt+0xab8>
   13aa8:	str	r4, [sl]
   13aac:	subs	r4, r4, #11
   13ab0:	movne	r4, #1
   13ab4:	cmp	r6, #0
   13ab8:	orrge	r4, r4, #1
   13abc:	cmp	r4, #0
   13ac0:	beq	13a54 <__assert_fail@plt+0x1b0c>
   13ac4:	cmp	r6, #0
   13ac8:	blt	13aec <__assert_fail@plt+0x1ba4>
   13acc:	ldr	r2, [pc, #120]	; 13b4c <__assert_fail@plt+0x1c04>
   13ad0:	ldr	r3, [r2, #1308]	; 0x51c
   13ad4:	add	r3, r3, #1
   13ad8:	str	r3, [r2, #1308]	; 0x51c
   13adc:	mov	r0, r6
   13ae0:	add	sp, sp, #140	; 0x8c
   13ae4:	vpop	{d8}
   13ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aec:	bl	11d74 <__errno_location@plt>
   13af0:	mov	r4, r0
   13af4:	ldr	r5, [r0]
   13af8:	ldr	r0, [r9]
   13afc:	bl	11f30 <close@plt>
   13b00:	ldr	r0, [r9, #4]
   13b04:	bl	11f30 <close@plt>
   13b08:	str	r5, [r4]
   13b0c:	b	13adc <__assert_fail@plt+0x1b94>
   13b10:	mvn	r6, #0
   13b14:	b	13adc <__assert_fail@plt+0x1b94>
   13b18:	add	r0, sp, #4
   13b1c:	bl	12a00 <__assert_fail@plt+0xab8>
   13b20:	str	r4, [sl]
   13b24:	mov	r0, #0
   13b28:	bl	11f30 <close@plt>
   13b2c:	mov	r0, #1
   13b30:	bl	11f30 <close@plt>
   13b34:	mov	r6, #0
   13b38:	b	13adc <__assert_fail@plt+0x1b94>
   13b3c:	nop			; (mov r0, r0)
   13b40:	andeq	r0, r0, r0
   13b44:	svccc	0x00d00000
   13b48:	andeq	r5, r3, r4, ror #3
   13b4c:	andeq	r5, r3, r0, ror #5
   13b50:	push	{lr}		; (str lr, [sp, #-4]!)
   13b54:	sub	sp, sp, #20
   13b58:	mov	r5, r0
   13b5c:	mov	r4, r1
   13b60:	mov	r0, r1
   13b64:	bl	11d50 <strlen@plt>
   13b68:	mov	r2, r0
   13b6c:	mov	r1, r4
   13b70:	mov	r0, #2
   13b74:	bl	11dbc <write@plt>
   13b78:	cmp	r5, #0
   13b7c:	bne	13b98 <__assert_fail@plt+0x1c50>
   13b80:	mov	r2, #1
   13b84:	ldr	r1, [pc, #72]	; 13bd4 <__assert_fail@plt+0x1c8c>
   13b88:	mov	r0, #2
   13b8c:	bl	11dbc <write@plt>
   13b90:	mov	r0, #2
   13b94:	bl	11abc <_exit@plt>
   13b98:	add	r1, sp, #4
   13b9c:	mov	r0, r5
   13ba0:	bl	1c1a0 <__assert_fail@plt+0xa258>
   13ba4:	mov	r4, r0
   13ba8:	mov	r2, #8
   13bac:	ldr	r1, [pc, #36]	; 13bd8 <__assert_fail@plt+0x1c90>
   13bb0:	mov	r0, #2
   13bb4:	bl	11dbc <write@plt>
   13bb8:	mov	r0, r4
   13bbc:	bl	11d50 <strlen@plt>
   13bc0:	mov	r2, r0
   13bc4:	mov	r1, r4
   13bc8:	mov	r0, #2
   13bcc:	bl	11dbc <write@plt>
   13bd0:	b	13b80 <__assert_fail@plt+0x1c38>
   13bd4:	andeq	r2, r2, r4, lsr #23
   13bd8:	andeq	r2, r2, ip, ror #10
   13bdc:	push	{r4, lr}
   13be0:	sub	sp, sp, #8
   13be4:	mov	r4, r0
   13be8:	ldr	r3, [pc, #96]	; 13c50 <__assert_fail@plt+0x1d08>
   13bec:	ldr	r3, [r3, #1300]	; 0x514
   13bf0:	cmp	r3, #0
   13bf4:	beq	13c20 <__assert_fail@plt+0x1cd8>
   13bf8:	mov	r3, #1
   13bfc:	strb	r3, [r4, #8]
   13c00:	mov	r1, r4
   13c04:	ldr	r3, [pc, #68]	; 13c50 <__assert_fail@plt+0x1d08>
   13c08:	ldr	r0, [r3, #1300]	; 0x514
   13c0c:	bl	1be74 <__assert_fail@plt+0x9f2c>
   13c10:	cmp	r0, #0
   13c14:	beq	13c4c <__assert_fail@plt+0x1d04>
   13c18:	add	sp, sp, #8
   13c1c:	pop	{r4, pc}
   13c20:	mov	r1, #0
   13c24:	str	r1, [sp]
   13c28:	ldr	r3, [pc, #36]	; 13c54 <__assert_fail@plt+0x1d0c>
   13c2c:	ldr	r2, [pc, #36]	; 13c58 <__assert_fail@plt+0x1d10>
   13c30:	mov	r0, #47	; 0x2f
   13c34:	bl	1b928 <__assert_fail@plt+0x99e0>
   13c38:	ldr	r3, [pc, #16]	; 13c50 <__assert_fail@plt+0x1d08>
   13c3c:	str	r0, [r3, #1300]	; 0x514
   13c40:	cmp	r0, #0
   13c44:	bne	13bf8 <__assert_fail@plt+0x1cb0>
   13c48:	bl	201b4 <__assert_fail@plt+0xe26c>
   13c4c:	bl	201b4 <__assert_fail@plt+0xe26c>
   13c50:	andeq	r5, r3, r0, ror #5
   13c54:	muleq	r1, r4, r0
   13c58:	andeq	r2, r1, r0, lsl #1
   13c5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c60:	sub	sp, sp, #136	; 0x88
   13c64:	mov	r9, r0
   13c68:	mov	r8, r1
   13c6c:	ldr	r5, [pc, #512]	; 13e74 <__assert_fail@plt+0x1f2c>
   13c70:	ldr	r2, [r5, #1312]	; 0x520
   13c74:	ldr	r3, [r5, #1292]	; 0x50c
   13c78:	ldr	r7, [r3, r2, lsl #2]
   13c7c:	mov	r0, r7
   13c80:	bl	11d50 <strlen@plt>
   13c84:	mov	sl, r0
   13c88:	add	r0, r0, #24
   13c8c:	bic	r0, r0, #3
   13c90:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   13c94:	mov	r4, r0
   13c98:	add	r6, r0, #9
   13c9c:	mov	r2, sl
   13ca0:	mov	r1, r7
   13ca4:	mov	r0, r6
   13ca8:	bl	11ac8 <memcpy@plt>
   13cac:	add	ip, r6, sl
   13cb0:	ldr	r3, [pc, #448]	; 13e78 <__assert_fail@plt+0x1f30>
   13cb4:	ldm	r3!, {r0, r1, r2}
   13cb8:	str	r0, [r6, sl]
   13cbc:	str	r1, [ip, #4]
   13cc0:	str	r2, [ip, #8]
   13cc4:	mov	r3, #0
   13cc8:	str	r3, [r4]
   13ccc:	ldr	r3, [r5, #1312]	; 0x520
   13cd0:	add	r3, r3, #1
   13cd4:	str	r3, [r5, #1312]	; 0x520
   13cd8:	ldr	r2, [r5, #1284]	; 0x504
   13cdc:	cmp	r3, r2
   13ce0:	moveq	r2, #0
   13ce4:	moveq	r3, r5
   13ce8:	streq	r2, [r3, #1312]	; 0x520
   13cec:	add	r0, sp, #4
   13cf0:	bl	129d4 <__assert_fail@plt+0xa8c>
   13cf4:	mov	r1, #524288	; 0x80000
   13cf8:	mov	r0, r6
   13cfc:	bl	1f0b0 <__assert_fail@plt+0xd168>
   13d00:	subs	r5, r0, #0
   13d04:	blt	13e38 <__assert_fail@plt+0x1ef0>
   13d08:	ldr	r3, [pc, #364]	; 13e7c <__assert_fail@plt+0x1f34>
   13d0c:	ldr	r2, [r3, #108]	; 0x6c
   13d10:	str	r4, [r2]
   13d14:	str	r4, [r3, #108]	; 0x6c
   13d18:	bl	11d74 <__errno_location@plt>
   13d1c:	mov	r7, r0
   13d20:	ldr	r8, [r0]
   13d24:	add	r0, sp, #4
   13d28:	bl	12a00 <__assert_fail@plt+0xab8>
   13d2c:	str	r8, [r7]
   13d30:	cmp	r4, #0
   13d34:	beq	13d9c <__assert_fail@plt+0x1e54>
   13d38:	mov	r3, #0
   13d3c:	strb	r3, [r4, #8]
   13d40:	ldr	r3, [pc, #300]	; 13e74 <__assert_fail@plt+0x1f2c>
   13d44:	ldr	r3, [r3, #1304]	; 0x518
   13d48:	cmp	r3, #0
   13d4c:	beq	13d84 <__assert_fail@plt+0x1e3c>
   13d50:	mov	r1, #4
   13d54:	add	r0, sp, r1
   13d58:	bl	139e8 <__assert_fail@plt+0x1aa0>
   13d5c:	str	r0, [r4, #4]
   13d60:	cmp	r0, #0
   13d64:	ble	13ddc <__assert_fail@plt+0x1e94>
   13d68:	mov	r0, r5
   13d6c:	bl	11f30 <close@plt>
   13d70:	ldr	r0, [sp, #4]
   13d74:	bl	11f30 <close@plt>
   13d78:	ldr	r5, [sp, #8]
   13d7c:	mov	r0, r4
   13d80:	bl	13bdc <__assert_fail@plt+0x1c94>
   13d84:	ldr	r1, [pc, #244]	; 13e80 <__assert_fail@plt+0x1f38>
   13d88:	mov	r0, r5
   13d8c:	bl	119fc <fdopen@plt>
   13d90:	str	r0, [r9]
   13d94:	cmp	r0, #0
   13d98:	beq	13e24 <__assert_fail@plt+0x1edc>
   13d9c:	mov	r0, r4
   13da0:	add	sp, sp, #136	; 0x88
   13da4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13da8:	mov	r2, #5
   13dac:	ldr	r1, [pc, #208]	; 13e84 <__assert_fail@plt+0x1f3c>
   13db0:	mov	r0, #0
   13db4:	bl	11b58 <dcgettext@plt>
   13db8:	mov	r4, r0
   13dbc:	mov	r1, r7
   13dc0:	mov	r0, #4
   13dc4:	bl	1e334 <__assert_fail@plt+0xc3ec>
   13dc8:	mov	r3, r0
   13dcc:	mov	r2, r4
   13dd0:	mov	r1, r5
   13dd4:	mov	r0, #2
   13dd8:	bl	11c90 <error@plt>
   13ddc:	cmp	r0, #0
   13de0:	bne	13d84 <__assert_fail@plt+0x1e3c>
   13de4:	ldr	r0, [sp, #8]
   13de8:	bl	11f30 <close@plt>
   13dec:	mov	r1, #1
   13df0:	mov	r0, r5
   13df4:	bl	13748 <__assert_fail@plt+0x1800>
   13df8:	mov	r1, #0
   13dfc:	ldr	r0, [sp, #4]
   13e00:	bl	13748 <__assert_fail@plt+0x1800>
   13e04:	ldr	r3, [pc, #104]	; 13e74 <__assert_fail@plt+0x1f2c>
   13e08:	ldr	r0, [r3, #1304]	; 0x518
   13e0c:	mov	r2, #0
   13e10:	mov	r1, r0
   13e14:	bl	11ad4 <execlp@plt>
   13e18:	ldr	r1, [pc, #104]	; 13e88 <__assert_fail@plt+0x1f40>
   13e1c:	ldr	r0, [r7]
   13e20:	bl	13b50 <__assert_fail@plt+0x1c08>
   13e24:	mov	r2, #5
   13e28:	ldr	r1, [pc, #92]	; 13e8c <__assert_fail@plt+0x1f44>
   13e2c:	bl	11b58 <dcgettext@plt>
   13e30:	mov	r1, r6
   13e34:	bl	12bb8 <__assert_fail@plt+0xc70>
   13e38:	bl	11d74 <__errno_location@plt>
   13e3c:	mov	r6, r0
   13e40:	ldr	r5, [r0]
   13e44:	add	r0, sp, #4
   13e48:	bl	12a00 <__assert_fail@plt+0xab8>
   13e4c:	str	r5, [r6]
   13e50:	eor	r8, r8, #1
   13e54:	cmp	r5, #24
   13e58:	orrne	r8, r8, #1
   13e5c:	cmp	r8, #0
   13e60:	bne	13da8 <__assert_fail@plt+0x1e60>
   13e64:	mov	r0, r4
   13e68:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   13e6c:	mov	r4, #0
   13e70:	b	13d9c <__assert_fail@plt+0x1e54>
   13e74:	andeq	r5, r3, r0, ror #5
   13e78:	andeq	r2, r2, r4, ror #11
   13e7c:	andeq	r5, r3, r4, ror #3
   13e80:	andeq	r2, r2, r0, asr #11
   13e84:	andeq	r2, r2, r8, ror r5
   13e88:	muleq	r2, ip, r5
   13e8c:	andeq	r2, r2, r4, asr #11
   13e90:	push	{r4, r5, r6, r7, r8, r9, lr}
   13e94:	sub	sp, sp, #12
   13e98:	mov	r4, r1
   13e9c:	mov	r6, r3
   13ea0:	ldr	r7, [sp, #40]	; 0x28
   13ea4:	ldrb	r3, [sp, #44]	; 0x2c
   13ea8:	cmp	r3, #0
   13eac:	beq	13f28 <__assert_fail@plt+0x1fe0>
   13eb0:	ldr	r1, [r0, #20]
   13eb4:	lsr	r3, r1, #1
   13eb8:	sub	r1, r1, r3
   13ebc:	sub	r5, r2, r7, lsl #4
   13ec0:	sub	r8, r5, r3, lsl #4
   13ec4:	add	r2, r0, #8
   13ec8:	add	r9, r4, #72	; 0x48
   13ecc:	str	r5, [r4, #8]
   13ed0:	str	r5, [r4]
   13ed4:	str	r8, [r4, #12]
   13ed8:	str	r8, [r4, #4]
   13edc:	str	r2, [r4, #16]
   13ee0:	str	r3, [r4, #20]
   13ee4:	str	r1, [r4, #24]
   13ee8:	str	r0, [r4, #28]
   13eec:	ldr	r3, [r0, #40]	; 0x28
   13ef0:	add	r3, r3, #1
   13ef4:	str	r3, [r4, #40]	; 0x28
   13ef8:	mov	r1, #0
   13efc:	strb	r1, [r4, #44]	; 0x2c
   13f00:	add	r0, r4, #48	; 0x30
   13f04:	bl	11ae0 <pthread_mutex_init@plt>
   13f08:	cmp	r6, #1
   13f0c:	bhi	13f44 <__assert_fail@plt+0x1ffc>
   13f10:	mov	r3, #0
   13f14:	str	r3, [r4, #32]
   13f18:	str	r3, [r4, #36]	; 0x24
   13f1c:	mov	r0, r9
   13f20:	add	sp, sp, #12
   13f24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f28:	ldr	r1, [r0, #24]
   13f2c:	lsr	r3, r1, #1
   13f30:	sub	r1, r1, r3
   13f34:	sub	r5, r2, r7, lsl #4
   13f38:	sub	r8, r5, r3, lsl #4
   13f3c:	add	r2, r0, #12
   13f40:	b	13ec8 <__assert_fail@plt+0x1f80>
   13f44:	lsr	r3, r6, #1
   13f48:	sub	r6, r6, r3
   13f4c:	str	r9, [r4, #32]
   13f50:	mov	r2, #1
   13f54:	str	r2, [sp, #4]
   13f58:	str	r7, [sp]
   13f5c:	mov	r2, r5
   13f60:	mov	r1, r9
   13f64:	mov	r0, r4
   13f68:	bl	13e90 <__assert_fail@plt+0x1f48>
   13f6c:	mov	r1, r0
   13f70:	str	r0, [r4, #36]	; 0x24
   13f74:	mov	r3, #0
   13f78:	str	r3, [sp, #4]
   13f7c:	str	r7, [sp]
   13f80:	mov	r3, r6
   13f84:	mov	r2, r8
   13f88:	mov	r0, r4
   13f8c:	bl	13e90 <__assert_fail@plt+0x1f48>
   13f90:	mov	r9, r0
   13f94:	b	13f1c <__assert_fail@plt+0x1fd4>
   13f98:	push	{r4, r5, r6, lr}
   13f9c:	mov	r4, r0
   13fa0:	mov	r6, r1
   13fa4:	add	r5, r0, #4
   13fa8:	mov	r0, r5
   13fac:	bl	11a98 <pthread_mutex_lock@plt>
   13fb0:	mov	r1, r6
   13fb4:	ldr	r0, [r4], #32
   13fb8:	bl	1c040 <__assert_fail@plt+0xa0f8>
   13fbc:	mov	r3, #1
   13fc0:	strb	r3, [r6, #44]	; 0x2c
   13fc4:	mov	r0, r4
   13fc8:	bl	11f18 <pthread_cond_signal@plt>
   13fcc:	mov	r0, r5
   13fd0:	bl	119f0 <pthread_mutex_unlock@plt>
   13fd4:	pop	{r4, r5, r6, pc}
   13fd8:	ldrb	r3, [r1, #44]	; 0x2c
   13fdc:	cmp	r3, #0
   13fe0:	bxne	lr
   13fe4:	push	{r4, lr}
   13fe8:	ldr	r2, [r1, #4]
   13fec:	ldr	ip, [r1, #12]
   13ff0:	sub	r2, r2, ip
   13ff4:	add	r2, r2, #15
   13ff8:	ldr	ip, [r1]
   13ffc:	ldr	lr, [r1, #8]
   14000:	sub	ip, ip, lr
   14004:	add	ip, ip, #15
   14008:	cmp	ip, #30
   1400c:	bls	14034 <__assert_fail@plt+0x20ec>
   14010:	cmp	r2, #30
   14014:	ldrls	r3, [r1, #24]
   14018:	clzls	r3, r3
   1401c:	lsrls	r3, r3, #5
   14020:	movhi	r3, #1
   14024:	cmp	r3, #0
   14028:	popeq	{r4, pc}
   1402c:	bl	13f98 <__assert_fail@plt+0x2050>
   14030:	pop	{r4, pc}
   14034:	cmp	r2, #30
   14038:	ldrhi	r3, [r1, #20]
   1403c:	clzhi	r3, r3
   14040:	lsrhi	r3, r3, #5
   14044:	and	r3, r3, #1
   14048:	b	14024 <__assert_fail@plt+0x20dc>
   1404c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14050:	vpush	{d8}
   14054:	sub	sp, sp, #8384	; 0x20c0
   14058:	sub	sp, sp, #52	; 0x34
   1405c:	str	r0, [sp, #28]
   14060:	mov	r2, r1
   14064:	str	r1, [sp, #32]
   14068:	ldr	r3, [pc, #3404]	; 14dbc <__assert_fail@plt+0x2e74>
   1406c:	ldr	fp, [r3, #1280]	; 0x500
   14070:	ldr	r1, [r0, #8]
   14074:	ldr	r7, [r2, #8]
   14078:	ldr	r8, [r0, #12]
   1407c:	ldr	r5, [r2, #12]
   14080:	ldr	sl, [pc, #3380]	; 14dbc <__assert_fail@plt+0x2e74>
   14084:	add	r3, sp, #276	; 0x114
   14088:	str	r3, [sp, #68]	; 0x44
   1408c:	add	r3, sl, #1312	; 0x520
   14090:	add	r3, r3, #8
   14094:	str	r3, [sp, #72]	; 0x48
   14098:	mov	r4, r1
   1409c:	b	14278 <__assert_fail@plt+0x2330>
   140a0:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   140a4:	str	r0, [sp, #48]	; 0x30
   140a8:	str	r0, [sp, #16]
   140ac:	b	14328 <__assert_fail@plt+0x23e0>
   140b0:	add	r2, r3, #1
   140b4:	add	r3, r1, r3
   140b8:	cmp	r9, #0
   140bc:	ldrb	r0, [r4]
   140c0:	ldrbne	r0, [r9, r0]
   140c4:	strb	r0, [r3]
   140c8:	mov	r3, r2
   140cc:	add	r4, r4, #1
   140d0:	cmp	r8, r4
   140d4:	beq	140f4 <__assert_fail@plt+0x21ac>
   140d8:	cmp	r6, #0
   140dc:	beq	140b0 <__assert_fail@plt+0x2168>
   140e0:	ldrb	r2, [r4]
   140e4:	ldrb	r2, [r6, r2]
   140e8:	cmp	r2, #0
   140ec:	bne	140cc <__assert_fail@plt+0x2184>
   140f0:	b	140b0 <__assert_fail@plt+0x2168>
   140f4:	str	r3, [sp, #12]
   140f8:	mov	r3, #0
   140fc:	ldr	r2, [sp, #16]
   14100:	ldr	r1, [sp, #12]
   14104:	strb	r3, [r2, r1]
   14108:	ldr	r3, [sp, #8]
   1410c:	cmp	r3, #0
   14110:	beq	14168 <__assert_fail@plt+0x2220>
   14114:	mov	r3, #0
   14118:	ldr	r0, [sp, #4]
   1411c:	b	14148 <__assert_fail@plt+0x2200>
   14120:	add	r2, r3, #1
   14124:	add	r3, r0, r3
   14128:	cmp	r9, #0
   1412c:	ldrb	r1, [r7]
   14130:	ldrbne	r1, [r9, r1]
   14134:	strb	r1, [r3]
   14138:	mov	r3, r2
   1413c:	add	r7, r7, #1
   14140:	cmp	r7, r5
   14144:	beq	14164 <__assert_fail@plt+0x221c>
   14148:	cmp	r6, #0
   1414c:	beq	14120 <__assert_fail@plt+0x21d8>
   14150:	ldrb	r2, [r7]
   14154:	ldrb	r2, [r6, r2]
   14158:	cmp	r2, #0
   1415c:	bne	1413c <__assert_fail@plt+0x21f4>
   14160:	b	14120 <__assert_fail@plt+0x21d8>
   14164:	str	r3, [sp, #8]
   14168:	mov	r3, #0
   1416c:	ldr	r2, [sp, #4]
   14170:	ldr	r1, [sp, #8]
   14174:	strb	r3, [r2, r1]
   14178:	ldrb	r3, [fp, #26]
   1417c:	cmp	r3, #0
   14180:	beq	14384 <__assert_fail@plt+0x243c>
   14184:	ldr	r0, [sp, #16]
   14188:	ldrb	r3, [r0]
   1418c:	ldrb	r3, [sl, r3]
   14190:	cmp	r3, #0
   14194:	beq	14374 <__assert_fail@plt+0x242c>
   14198:	ldrb	r3, [r0, #1]!
   1419c:	ldrb	r3, [sl, r3]
   141a0:	cmp	r3, #0
   141a4:	bne	14198 <__assert_fail@plt+0x2250>
   141a8:	ldr	r1, [sp, #4]
   141ac:	ldrb	r3, [r1]
   141b0:	ldrb	r3, [sl, r3]
   141b4:	cmp	r3, #0
   141b8:	beq	1437c <__assert_fail@plt+0x2434>
   141bc:	ldrb	r3, [r1, #1]!
   141c0:	ldrb	r3, [sl, r3]
   141c4:	cmp	r3, #0
   141c8:	bne	141bc <__assert_fail@plt+0x2274>
   141cc:	ldr	r3, [sl, #256]	; 0x100
   141d0:	ldrb	r2, [sl, #260]	; 0x104
   141d4:	bl	1f0c8 <__assert_fail@plt+0xd180>
   141d8:	str	r0, [sp, #20]
   141dc:	ldr	r3, [sp, #24]
   141e0:	cmp	r3, #0
   141e4:	bne	148a0 <__assert_fail@plt+0x2958>
   141e8:	ldr	r3, [sp, #16]
   141ec:	ldr	r2, [sp, #12]
   141f0:	ldrb	r1, [sp, #36]	; 0x24
   141f4:	strb	r1, [r3, r2]
   141f8:	ldr	r3, [sp, #4]
   141fc:	ldr	r2, [sp, #8]
   14200:	ldrb	r1, [sp, #40]	; 0x28
   14204:	strb	r1, [r3, r2]
   14208:	ldr	r3, [sp, #20]
   1420c:	cmp	r3, #0
   14210:	bne	14bc0 <__assert_fail@plt+0x2c78>
   14214:	ldr	fp, [fp, #36]	; 0x24
   14218:	cmp	fp, #0
   1421c:	beq	14bd4 <__assert_fail@plt+0x2c8c>
   14220:	ldr	r3, [fp, #8]
   14224:	cmn	r3, #1
   14228:	beq	14ad8 <__assert_fail@plt+0x2b90>
   1422c:	mov	r1, fp
   14230:	ldr	r0, [sp, #28]
   14234:	bl	1224c <__assert_fail@plt+0x304>
   14238:	mov	r8, r0
   1423c:	mov	r1, fp
   14240:	ldr	r0, [sp, #32]
   14244:	bl	1224c <__assert_fail@plt+0x304>
   14248:	mov	r5, r0
   1424c:	ldr	r3, [fp]
   14250:	cmn	r3, #1
   14254:	beq	14b04 <__assert_fail@plt+0x2bbc>
   14258:	mov	r1, fp
   1425c:	ldr	r0, [sp, #28]
   14260:	bl	120ac <__assert_fail@plt+0x164>
   14264:	mov	r4, r0
   14268:	mov	r1, fp
   1426c:	ldr	r0, [sp, #32]
   14270:	bl	120ac <__assert_fail@plt+0x164>
   14274:	mov	r7, r0
   14278:	ldr	r9, [fp, #20]
   1427c:	ldr	r6, [fp, #16]
   14280:	cmp	r4, r8
   14284:	movcs	r8, r4
   14288:	cmp	r7, r5
   1428c:	movcs	r5, r7
   14290:	sub	r3, r8, r4
   14294:	str	r3, [sp, #12]
   14298:	sub	r3, r5, r7
   1429c:	str	r3, [sp, #8]
   142a0:	ldrb	r3, [sl, #1316]	; 0x524
   142a4:	cmp	r3, #0
   142a8:	bne	142e8 <__assert_fail@plt+0x23a0>
   142ac:	ldrb	r3, [fp, #26]
   142b0:	cmp	r3, #0
   142b4:	bne	142e8 <__assert_fail@plt+0x23a0>
   142b8:	ldrh	r3, [fp, #28]
   142bc:	cmp	r3, #0
   142c0:	bne	142e8 <__assert_fail@plt+0x23a0>
   142c4:	ldrb	r3, [fp, #30]
   142c8:	cmp	r3, #0
   142cc:	bne	142e8 <__assert_fail@plt+0x23a0>
   142d0:	ldrb	r3, [fp, #27]
   142d4:	cmp	r3, #0
   142d8:	bne	142e8 <__assert_fail@plt+0x23a0>
   142dc:	ldrb	r3, [fp, #32]
   142e0:	cmp	r3, #0
   142e4:	beq	148ac <__assert_fail@plt+0x2964>
   142e8:	cmp	r9, #0
   142ec:	cmpeq	r6, #0
   142f0:	movne	r3, #1
   142f4:	moveq	r3, #0
   142f8:	str	r3, [sp, #24]
   142fc:	beq	1434c <__assert_fail@plt+0x2404>
   14300:	ldr	r3, [sp, #12]
   14304:	ldr	r2, [sp, #8]
   14308:	add	r0, r3, r2
   1430c:	add	r0, r0, #2
   14310:	cmp	r0, #4000	; 0xfa0
   14314:	bhi	140a0 <__assert_fail@plt+0x2158>
   14318:	mov	r3, #0
   1431c:	str	r3, [sp, #48]	; 0x30
   14320:	add	r3, sp, #432	; 0x1b0
   14324:	str	r3, [sp, #16]
   14328:	ldr	r2, [sp, #12]
   1432c:	add	r3, r2, #1
   14330:	ldr	r1, [sp, #16]
   14334:	add	r3, r1, r3
   14338:	str	r3, [sp, #4]
   1433c:	cmp	r2, #0
   14340:	beq	140f8 <__assert_fail@plt+0x21b0>
   14344:	mov	r3, #0
   14348:	b	140d8 <__assert_fail@plt+0x2190>
   1434c:	ldrb	r3, [r8]
   14350:	str	r3, [sp, #36]	; 0x24
   14354:	mov	r3, #0
   14358:	strb	r3, [r8]
   1435c:	ldrb	r2, [r5]
   14360:	str	r2, [sp, #40]	; 0x28
   14364:	strb	r3, [r5]
   14368:	str	r7, [sp, #4]
   1436c:	str	r4, [sp, #16]
   14370:	b	14178 <__assert_fail@plt+0x2230>
   14374:	ldr	r0, [sp, #16]
   14378:	b	141a8 <__assert_fail@plt+0x2260>
   1437c:	ldr	r1, [sp, #4]
   14380:	b	141cc <__assert_fail@plt+0x2284>
   14384:	ldrb	r3, [fp, #28]
   14388:	cmp	r3, #0
   1438c:	bne	14420 <__assert_fail@plt+0x24d8>
   14390:	ldrb	r3, [fp, #29]
   14394:	cmp	r3, #0
   14398:	beq	14550 <__assert_fail@plt+0x2608>
   1439c:	ldr	r4, [sp, #16]
   143a0:	ldrb	r3, [r4]
   143a4:	ldrb	r3, [sl, r3]
   143a8:	cmp	r3, #0
   143ac:	beq	14540 <__assert_fail@plt+0x25f8>
   143b0:	ldrb	r3, [r4, #1]!
   143b4:	ldrb	r3, [sl, r3]
   143b8:	cmp	r3, #0
   143bc:	bne	143b0 <__assert_fail@plt+0x2468>
   143c0:	ldr	r5, [sp, #4]
   143c4:	ldrb	r3, [r5]
   143c8:	ldrb	r3, [sl, r3]
   143cc:	cmp	r3, #0
   143d0:	beq	14548 <__assert_fail@plt+0x2600>
   143d4:	ldrb	r3, [r5, #1]!
   143d8:	ldrb	r3, [sl, r3]
   143dc:	cmp	r3, #0
   143e0:	bne	143d4 <__assert_fail@plt+0x248c>
   143e4:	mov	r0, r4
   143e8:	bl	124cc <__assert_fail@plt+0x584>
   143ec:	mov	r6, r0
   143f0:	mov	r0, r5
   143f4:	bl	124cc <__assert_fail@plt+0x584>
   143f8:	subs	r3, r6, r0
   143fc:	str	r3, [sp, #20]
   14400:	bne	141dc <__assert_fail@plt+0x2294>
   14404:	ldr	r3, [sl, #256]	; 0x100
   14408:	ldrb	r2, [sl, #260]	; 0x104
   1440c:	mov	r1, r5
   14410:	mov	r0, r4
   14414:	bl	1f0c8 <__assert_fail@plt+0xd180>
   14418:	str	r0, [sp, #20]
   1441c:	b	141dc <__assert_fail@plt+0x2294>
   14420:	add	r1, sp, #84	; 0x54
   14424:	ldr	r4, [sp, #16]
   14428:	mov	r0, r4
   1442c:	bl	11b1c <strtold@plt>
   14430:	vmov.f64	d8, d0
   14434:	add	r1, sp, #88	; 0x58
   14438:	ldr	r0, [sp, #4]
   1443c:	bl	11b1c <strtold@plt>
   14440:	ldr	r3, [sp, #84]	; 0x54
   14444:	cmp	r4, r3
   14448:	beq	14504 <__assert_fail@plt+0x25bc>
   1444c:	ldr	r3, [sp, #88]	; 0x58
   14450:	ldr	r2, [sp, #4]
   14454:	cmp	r2, r3
   14458:	beq	1451c <__assert_fail@plt+0x25d4>
   1445c:	vcmpe.f64	d8, d0
   14460:	vmrs	APSR_nzcv, fpscr
   14464:	bmi	14528 <__assert_fail@plt+0x25e0>
   14468:	movgt	r3, #1
   1446c:	strgt	r3, [sp, #20]
   14470:	bgt	141dc <__assert_fail@plt+0x2294>
   14474:	vcmp.f64	d8, d0
   14478:	vmrs	APSR_nzcv, fpscr
   1447c:	moveq	r3, #0
   14480:	streq	r3, [sp, #20]
   14484:	beq	141dc <__assert_fail@plt+0x2294>
   14488:	vcmp.f64	d0, d0
   1448c:	vmrs	APSR_nzcv, fpscr
   14490:	beq	14534 <__assert_fail@plt+0x25ec>
   14494:	vcmp.f64	d8, d8
   14498:	vmrs	APSR_nzcv, fpscr
   1449c:	moveq	r3, #1
   144a0:	streq	r3, [sp, #20]
   144a4:	beq	141dc <__assert_fail@plt+0x2294>
   144a8:	mov	r4, #0
   144ac:	str	r4, [sp, #120]	; 0x78
   144b0:	str	r4, [sp, #124]	; 0x7c
   144b4:	mov	r1, r4
   144b8:	ldr	r0, [sp, #16]
   144bc:	bl	11b1c <strtold@plt>
   144c0:	vstr	d0, [sp, #120]	; 0x78
   144c4:	add	r5, sp, #4416	; 0x1140
   144c8:	add	r5, r5, #16
   144cc:	str	r4, [r5]
   144d0:	add	r3, sp, #4416	; 0x1140
   144d4:	add	r3, r3, #20
   144d8:	str	r4, [r3]
   144dc:	mov	r1, r4
   144e0:	ldr	r0, [sp, #4]
   144e4:	bl	11b1c <strtold@plt>
   144e8:	vstr	d0, [r5]
   144ec:	mov	r2, #8
   144f0:	mov	r1, r5
   144f4:	add	r0, sp, #120	; 0x78
   144f8:	bl	11b40 <memcmp@plt>
   144fc:	str	r0, [sp, #20]
   14500:	b	141dc <__assert_fail@plt+0x2294>
   14504:	ldr	r6, [sp, #88]	; 0x58
   14508:	ldr	r3, [sp, #4]
   1450c:	subs	r3, r6, r3
   14510:	mvnne	r3, #0
   14514:	str	r3, [sp, #20]
   14518:	b	141dc <__assert_fail@plt+0x2294>
   1451c:	mov	r3, #1
   14520:	str	r3, [sp, #20]
   14524:	b	141dc <__assert_fail@plt+0x2294>
   14528:	mvn	r3, #0
   1452c:	str	r3, [sp, #20]
   14530:	b	141dc <__assert_fail@plt+0x2294>
   14534:	mvn	r3, #0
   14538:	str	r3, [sp, #20]
   1453c:	b	141dc <__assert_fail@plt+0x2294>
   14540:	ldr	r4, [sp, #16]
   14544:	b	143c0 <__assert_fail@plt+0x2478>
   14548:	ldr	r5, [sp, #4]
   1454c:	b	143e4 <__assert_fail@plt+0x249c>
   14550:	ldrb	r3, [fp, #30]
   14554:	cmp	r3, #0
   14558:	bne	14588 <__assert_fail@plt+0x2640>
   1455c:	ldrb	r3, [fp, #27]
   14560:	cmp	r3, #0
   14564:	bne	145b0 <__assert_fail@plt+0x2668>
   14568:	ldrb	r3, [fp, #32]
   1456c:	cmp	r3, #0
   14570:	beq	1484c <__assert_fail@plt+0x2904>
   14574:	ldr	r1, [sp, #4]
   14578:	ldr	r0, [sp, #16]
   1457c:	bl	1ab68 <__assert_fail@plt+0x8c20>
   14580:	str	r0, [sp, #20]
   14584:	b	141dc <__assert_fail@plt+0x2294>
   14588:	mov	r1, #0
   1458c:	ldr	r0, [sp, #16]
   14590:	bl	12520 <__assert_fail@plt+0x5d8>
   14594:	mov	r6, r0
   14598:	mov	r1, #0
   1459c:	ldr	r0, [sp, #4]
   145a0:	bl	12520 <__assert_fail@plt+0x5d8>
   145a4:	sub	r3, r6, r0
   145a8:	str	r3, [sp, #20]
   145ac:	b	141dc <__assert_fail@plt+0x2294>
   145b0:	mov	r4, #156	; 0x9c
   145b4:	mov	r2, r4
   145b8:	ldr	r1, [sp, #72]	; 0x48
   145bc:	ldr	r5, [sp, #68]	; 0x44
   145c0:	mov	r0, r5
   145c4:	bl	11ac8 <memcpy@plt>
   145c8:	mov	r2, r4
   145cc:	mov	r1, r5
   145d0:	add	r0, sp, #120	; 0x78
   145d4:	bl	11ac8 <memcpy@plt>
   145d8:	ldrb	r3, [sl, #1316]	; 0x524
   145dc:	cmp	r3, #0
   145e0:	beq	14cc0 <__assert_fail@plt+0x2d78>
   145e4:	ldr	r7, [sp, #16]
   145e8:	ldr	r2, [sp, #12]
   145ec:	add	r9, r7, r2
   145f0:	ldr	r8, [sp, #4]
   145f4:	ldr	r1, [sp, #8]
   145f8:	add	r4, r8, r1
   145fc:	add	r3, r2, r1
   14600:	add	r3, r3, r3, lsl #1
   14604:	add	r3, r3, #2
   14608:	str	r3, [sp, #56]	; 0x38
   1460c:	mov	r3, #0
   14610:	str	r3, [sp, #52]	; 0x34
   14614:	mov	r5, #4000	; 0xfa0
   14618:	add	r2, sp, #4416	; 0x1140
   1461c:	add	r2, r2, #16
   14620:	str	r2, [sp, #44]	; 0x2c
   14624:	str	r3, [sp, #20]
   14628:	add	r3, sp, #120	; 0x78
   1462c:	str	r3, [sp, #64]	; 0x40
   14630:	str	fp, [sp, #76]	; 0x4c
   14634:	b	147a4 <__assert_fail@plt+0x285c>
   14638:	add	r5, r5, r5, lsl #1
   1463c:	lsr	r5, r5, #1
   14640:	cmp	r3, r5
   14644:	movcs	r5, r3
   14648:	ldr	r0, [sp, #52]	; 0x34
   1464c:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   14650:	mov	r0, r5
   14654:	bl	20a64 <__assert_fail@plt+0xeb1c>
   14658:	subs	r3, r0, #0
   1465c:	str	r3, [sp, #52]	; 0x34
   14660:	moveq	r5, #4000	; 0xfa0
   14664:	addeq	r3, sp, #4416	; 0x1140
   14668:	addeq	r3, r3, #16
   1466c:	ldrne	r3, [sp, #52]	; 0x34
   14670:	str	r3, [sp, #44]	; 0x2c
   14674:	b	147b0 <__assert_fail@plt+0x2868>
   14678:	mov	r2, r5
   1467c:	mov	r1, r7
   14680:	ldr	r0, [sp, #44]	; 0x2c
   14684:	bl	133a4 <__assert_fail@plt+0x145c>
   14688:	add	r6, r0, #1
   1468c:	cmp	r4, r8
   14690:	bls	14bf0 <__assert_fail@plt+0x2ca8>
   14694:	cmp	r5, r6
   14698:	movcc	r0, #0
   1469c:	movcc	r2, r0
   146a0:	bcs	147fc <__assert_fail@plt+0x28b4>
   146a4:	mov	r1, r8
   146a8:	bl	133a4 <__assert_fail@plt+0x145c>
   146ac:	add	fp, r0, #1
   146b0:	cmp	r5, r6
   146b4:	bcs	147c8 <__assert_fail@plt+0x2880>
   146b8:	add	r5, r6, fp
   146bc:	ldr	r3, [pc, #1788]	; 14dc0 <__assert_fail@plt+0x2e78>
   146c0:	cmp	r5, r3
   146c4:	bhi	146d0 <__assert_fail@plt+0x2788>
   146c8:	add	r5, r5, r5, lsl #1
   146cc:	lsr	r5, r5, #1
   146d0:	ldr	r0, [sp, #52]	; 0x34
   146d4:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   146d8:	mov	r0, r5
   146dc:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   146e0:	str	r0, [sp, #52]	; 0x34
   146e4:	cmp	r9, r7
   146e8:	bhi	14c24 <__assert_fail@plt+0x2cdc>
   146ec:	cmp	r4, r8
   146f0:	bhi	14818 <__assert_fail@plt+0x28d0>
   146f4:	cmp	r9, r7
   146f8:	bhi	14da0 <__assert_fail@plt+0x2e58>
   146fc:	ldr	r3, [sp, #52]	; 0x34
   14700:	str	r3, [sp, #44]	; 0x2c
   14704:	cmp	r4, r8
   14708:	bls	14c38 <__assert_fail@plt+0x2cf0>
   1470c:	mov	r0, r8
   14710:	bl	11d50 <strlen@plt>
   14714:	add	r0, r0, #1
   14718:	add	r8, r8, r0
   1471c:	cmp	r9, r7
   14720:	cmpls	r4, r8
   14724:	bls	14840 <__assert_fail@plt+0x28f8>
   14728:	ldr	r2, [sp, #64]	; 0x40
   1472c:	mov	r1, r6
   14730:	ldr	r0, [sp, #44]	; 0x2c
   14734:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   14738:	ldr	r3, [sp, #44]	; 0x2c
   1473c:	add	r2, r3, r6
   14740:	mov	ip, r2
   14744:	add	r2, sp, #276	; 0x114
   14748:	mov	r1, fp
   1474c:	str	ip, [sp, #60]	; 0x3c
   14750:	mov	r0, ip
   14754:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   14758:	ldr	r2, [sp, #20]
   1475c:	cmp	r2, #0
   14760:	bne	147a4 <__assert_fail@plt+0x285c>
   14764:	cmp	r6, fp
   14768:	movcc	r2, r6
   1476c:	movcs	r2, fp
   14770:	ldr	r1, [sp, #60]	; 0x3c
   14774:	ldr	r0, [sp, #44]	; 0x2c
   14778:	bl	11b40 <memcmp@plt>
   1477c:	subs	r3, r0, #0
   14780:	str	r3, [sp, #20]
   14784:	bne	147a4 <__assert_fail@plt+0x285c>
   14788:	cmp	r6, fp
   1478c:	movhi	r2, #1
   14790:	movls	r2, #0
   14794:	movcc	r3, #1
   14798:	movcs	r3, #0
   1479c:	sub	r3, r2, r3
   147a0:	str	r3, [sp, #20]
   147a4:	ldr	r3, [sp, #56]	; 0x38
   147a8:	cmp	r3, r5
   147ac:	bhi	14638 <__assert_fail@plt+0x26f0>
   147b0:	cmp	r9, r7
   147b4:	bhi	14678 <__assert_fail@plt+0x2730>
   147b8:	cmp	r4, r8
   147bc:	bhi	147f8 <__assert_fail@plt+0x28b0>
   147c0:	mov	r6, #0
   147c4:	mov	fp, r6
   147c8:	add	r3, fp, r6
   147cc:	cmp	r5, r3
   147d0:	bcc	146b8 <__assert_fail@plt+0x2770>
   147d4:	cmp	r9, r7
   147d8:	bls	14704 <__assert_fail@plt+0x27bc>
   147dc:	mov	r0, r7
   147e0:	bl	11d50 <strlen@plt>
   147e4:	add	r0, r0, #1
   147e8:	add	r7, r7, r0
   147ec:	cmp	r4, r8
   147f0:	bls	1471c <__assert_fail@plt+0x27d4>
   147f4:	b	1470c <__assert_fail@plt+0x27c4>
   147f8:	mov	r6, #0
   147fc:	ldr	r3, [sp, #44]	; 0x2c
   14800:	add	r0, r3, r6
   14804:	sub	r2, r5, r6
   14808:	b	146a4 <__assert_fail@plt+0x275c>
   1480c:	mov	r5, r6
   14810:	mov	fp, #0
   14814:	b	146c8 <__assert_fail@plt+0x2780>
   14818:	mov	r2, fp
   1481c:	mov	r1, r8
   14820:	ldr	r3, [sp, #52]	; 0x34
   14824:	add	r0, r3, r6
   14828:	bl	11d68 <strxfrm@plt>
   1482c:	cmp	r9, r7
   14830:	bhi	14d84 <__assert_fail@plt+0x2e3c>
   14834:	ldr	r3, [sp, #52]	; 0x34
   14838:	str	r3, [sp, #44]	; 0x2c
   1483c:	b	14704 <__assert_fail@plt+0x27bc>
   14840:	mov	r8, fp
   14844:	ldr	fp, [sp, #76]	; 0x4c
   14848:	b	14c40 <__assert_fail@plt+0x2cf8>
   1484c:	ldr	r3, [sp, #12]
   14850:	cmp	r3, #0
   14854:	bne	1486c <__assert_fail@plt+0x2924>
   14858:	ldr	r3, [sp, #8]
   1485c:	adds	r3, r3, #0
   14860:	mvnne	r3, #0
   14864:	str	r3, [sp, #20]
   14868:	b	141dc <__assert_fail@plt+0x2294>
   1486c:	ldr	r3, [sp, #8]
   14870:	cmp	r3, #0
   14874:	moveq	r3, #1
   14878:	streq	r3, [sp, #20]
   1487c:	beq	141dc <__assert_fail@plt+0x2294>
   14880:	add	r3, r3, #1
   14884:	ldr	r2, [sp, #4]
   14888:	ldr	r1, [sp, #12]
   1488c:	add	r1, r1, #1
   14890:	ldr	r0, [sp, #16]
   14894:	bl	20318 <__assert_fail@plt+0xe3d0>
   14898:	str	r0, [sp, #20]
   1489c:	b	141dc <__assert_fail@plt+0x2294>
   148a0:	ldr	r0, [sp, #48]	; 0x30
   148a4:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   148a8:	b	14208 <__assert_fail@plt+0x22c0>
   148ac:	cmp	r6, #0
   148b0:	beq	14a30 <__assert_fail@plt+0x2ae8>
   148b4:	cmp	r9, #0
   148b8:	bne	148fc <__assert_fail@plt+0x29b4>
   148bc:	b	149b0 <__assert_fail@plt+0x2a68>
   148c0:	cmp	r5, r7
   148c4:	movhi	r3, #0
   148c8:	movls	r3, #1
   148cc:	cmp	r0, r8
   148d0:	orrcs	r3, r3, #1
   148d4:	cmp	r3, #0
   148d8:	bne	1495c <__assert_fail@plt+0x2a14>
   148dc:	ldrb	r3, [r0]
   148e0:	ldrb	r3, [r9, r3]
   148e4:	ldrb	r2, [r7]
   148e8:	ldrb	r2, [r9, r2]
   148ec:	subs	r3, r3, r2
   148f0:	bne	14bbc <__assert_fail@plt+0x2c74>
   148f4:	add	r7, r7, #1
   148f8:	add	r4, r4, #1
   148fc:	mov	r0, r4
   14900:	cmp	r4, r8
   14904:	bcs	14918 <__assert_fail@plt+0x29d0>
   14908:	ldrb	r3, [r4]
   1490c:	ldrb	r3, [r6, r3]
   14910:	cmp	r3, #0
   14914:	bne	148f8 <__assert_fail@plt+0x29b0>
   14918:	cmp	r7, r5
   1491c:	bcs	1495c <__assert_fail@plt+0x2a14>
   14920:	ldrb	r3, [r7]
   14924:	ldrb	r3, [r6, r3]
   14928:	cmp	r3, #0
   1492c:	beq	148c0 <__assert_fail@plt+0x2978>
   14930:	add	r3, r7, #1
   14934:	mov	r1, r5
   14938:	mov	r7, r3
   1493c:	cmp	r1, r3
   14940:	beq	148c0 <__assert_fail@plt+0x2978>
   14944:	add	r3, r3, #1
   14948:	ldrb	r2, [r7]
   1494c:	ldrb	r2, [r6, r2]
   14950:	cmp	r2, #0
   14954:	bne	14938 <__assert_fail@plt+0x29f0>
   14958:	b	148c0 <__assert_fail@plt+0x2978>
   1495c:	cmp	r5, r7
   14960:	movls	r5, #0
   14964:	movhi	r5, #1
   14968:	cmp	r0, r8
   1496c:	rsbcs	r5, r5, #0
   14970:	rsbcc	r5, r5, #1
   14974:	str	r5, [sp, #20]
   14978:	b	14208 <__assert_fail@plt+0x22c0>
   1497c:	cmp	r5, r7
   14980:	movhi	r3, #0
   14984:	movls	r3, #1
   14988:	cmp	r0, r8
   1498c:	orrcs	r3, r3, #1
   14990:	cmp	r3, #0
   14994:	bne	14a10 <__assert_fail@plt+0x2ac8>
   14998:	ldrb	r3, [r0]
   1499c:	ldrb	r2, [r7]
   149a0:	subs	r3, r3, r2
   149a4:	bne	14be8 <__assert_fail@plt+0x2ca0>
   149a8:	add	r7, r7, #1
   149ac:	add	r4, r4, #1
   149b0:	mov	r0, r4
   149b4:	cmp	r4, r8
   149b8:	bcs	149cc <__assert_fail@plt+0x2a84>
   149bc:	ldrb	r3, [r4]
   149c0:	ldrb	r3, [r6, r3]
   149c4:	cmp	r3, #0
   149c8:	bne	149ac <__assert_fail@plt+0x2a64>
   149cc:	cmp	r7, r5
   149d0:	bcs	14a10 <__assert_fail@plt+0x2ac8>
   149d4:	ldrb	r3, [r7]
   149d8:	ldrb	r3, [r6, r3]
   149dc:	cmp	r3, #0
   149e0:	beq	1497c <__assert_fail@plt+0x2a34>
   149e4:	add	r3, r7, #1
   149e8:	mov	r1, r5
   149ec:	mov	r7, r3
   149f0:	cmp	r1, r3
   149f4:	beq	1497c <__assert_fail@plt+0x2a34>
   149f8:	add	r3, r3, #1
   149fc:	ldrb	r2, [r7]
   14a00:	ldrb	r2, [r6, r2]
   14a04:	cmp	r2, #0
   14a08:	bne	149ec <__assert_fail@plt+0x2aa4>
   14a0c:	b	1497c <__assert_fail@plt+0x2a34>
   14a10:	cmp	r5, r7
   14a14:	movls	r5, #0
   14a18:	movhi	r5, #1
   14a1c:	cmp	r0, r8
   14a20:	rsbcs	r5, r5, #0
   14a24:	rsbcc	r5, r5, #1
   14a28:	str	r5, [sp, #20]
   14a2c:	b	14208 <__assert_fail@plt+0x22c0>
   14a30:	ldr	r3, [sp, #12]
   14a34:	cmp	r3, #0
   14a38:	bne	14a50 <__assert_fail@plt+0x2b08>
   14a3c:	ldr	r3, [sp, #8]
   14a40:	adds	r3, r3, #0
   14a44:	mvnne	r3, #0
   14a48:	str	r3, [sp, #20]
   14a4c:	b	14208 <__assert_fail@plt+0x22c0>
   14a50:	ldr	r3, [sp, #8]
   14a54:	cmp	r3, #0
   14a58:	beq	14ba4 <__assert_fail@plt+0x2c5c>
   14a5c:	cmp	r9, #0
   14a60:	beq	14a90 <__assert_fail@plt+0x2b48>
   14a64:	cmp	r4, r8
   14a68:	cmpcc	r7, r5
   14a6c:	bcs	14ab8 <__assert_fail@plt+0x2b70>
   14a70:	ldrb	r3, [r4], #1
   14a74:	ldrb	r3, [r9, r3]
   14a78:	ldrb	r2, [r7], #1
   14a7c:	ldrb	r2, [r9, r2]
   14a80:	subs	r3, r3, r2
   14a84:	beq	14a64 <__assert_fail@plt+0x2b1c>
   14a88:	str	r3, [sp, #20]
   14a8c:	b	14bc0 <__assert_fail@plt+0x2c78>
   14a90:	ldr	r3, [sp, #12]
   14a94:	ldr	r2, [sp, #8]
   14a98:	cmp	r3, r2
   14a9c:	movcc	r2, r3
   14aa0:	mov	r1, r7
   14aa4:	mov	r0, r4
   14aa8:	bl	11b40 <memcmp@plt>
   14aac:	subs	r3, r0, #0
   14ab0:	str	r3, [sp, #20]
   14ab4:	bne	14bc0 <__assert_fail@plt+0x2c78>
   14ab8:	ldr	r3, [sp, #12]
   14abc:	ldr	r2, [sp, #8]
   14ac0:	cmp	r3, r2
   14ac4:	bcc	14bb0 <__assert_fail@plt+0x2c68>
   14ac8:	subs	r3, r3, r2
   14acc:	movne	r3, #1
   14ad0:	str	r3, [sp, #20]
   14ad4:	b	14208 <__assert_fail@plt+0x22c0>
   14ad8:	ldr	r2, [sp, #28]
   14adc:	ldr	r8, [r2, #4]
   14ae0:	sub	r3, r8, #1
   14ae4:	ldr	r8, [r2]
   14ae8:	add	r8, r8, r3
   14aec:	ldr	r2, [sp, #32]
   14af0:	ldr	r5, [r2, #4]
   14af4:	sub	r3, r5, #1
   14af8:	ldr	r5, [r2]
   14afc:	add	r5, r5, r3
   14b00:	b	1424c <__assert_fail@plt+0x2304>
   14b04:	ldr	r3, [sp, #28]
   14b08:	ldr	r4, [r3]
   14b0c:	ldr	r3, [sp, #32]
   14b10:	ldr	r7, [r3]
   14b14:	ldrb	r3, [fp, #24]
   14b18:	cmp	r3, #0
   14b1c:	beq	14278 <__assert_fail@plt+0x2330>
   14b20:	cmp	r8, r4
   14b24:	bls	14b60 <__assert_fail@plt+0x2c18>
   14b28:	ldrb	r3, [r4]
   14b2c:	ldrb	r3, [sl, r3]
   14b30:	cmp	r3, #0
   14b34:	beq	14b60 <__assert_fail@plt+0x2c18>
   14b38:	add	r3, r4, #1
   14b3c:	mov	r1, r8
   14b40:	mov	r4, r3
   14b44:	cmp	r3, r1
   14b48:	beq	14b60 <__assert_fail@plt+0x2c18>
   14b4c:	add	r3, r3, #1
   14b50:	ldrb	r2, [r4]
   14b54:	ldrb	r2, [sl, r2]
   14b58:	cmp	r2, #0
   14b5c:	bne	14b40 <__assert_fail@plt+0x2bf8>
   14b60:	cmp	r5, r7
   14b64:	bls	14278 <__assert_fail@plt+0x2330>
   14b68:	ldrb	r3, [r7]
   14b6c:	ldrb	r3, [sl, r3]
   14b70:	cmp	r3, #0
   14b74:	beq	14278 <__assert_fail@plt+0x2330>
   14b78:	add	r3, r7, #1
   14b7c:	mov	r1, r5
   14b80:	mov	r7, r3
   14b84:	cmp	r1, r3
   14b88:	beq	14278 <__assert_fail@plt+0x2330>
   14b8c:	add	r3, r3, #1
   14b90:	ldrb	r2, [r7]
   14b94:	ldrb	r2, [sl, r2]
   14b98:	cmp	r2, #0
   14b9c:	bne	14b80 <__assert_fail@plt+0x2c38>
   14ba0:	b	14278 <__assert_fail@plt+0x2330>
   14ba4:	mov	r3, #1
   14ba8:	str	r3, [sp, #20]
   14bac:	b	14bc0 <__assert_fail@plt+0x2c78>
   14bb0:	mvn	r3, #0
   14bb4:	str	r3, [sp, #20]
   14bb8:	b	14bc0 <__assert_fail@plt+0x2c78>
   14bbc:	str	r3, [sp, #20]
   14bc0:	ldrb	r3, [fp, #31]
   14bc4:	cmp	r3, #0
   14bc8:	ldrne	r3, [sp, #20]
   14bcc:	rsbne	r3, r3, #0
   14bd0:	strne	r3, [sp, #20]
   14bd4:	ldr	r0, [sp, #20]
   14bd8:	add	sp, sp, #8384	; 0x20c0
   14bdc:	add	sp, sp, #52	; 0x34
   14be0:	vpop	{d8}
   14be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14be8:	str	r3, [sp, #20]
   14bec:	b	14bc0 <__assert_fail@plt+0x2c78>
   14bf0:	cmp	r5, r6
   14bf4:	movcs	fp, #0
   14bf8:	bcs	147dc <__assert_fail@plt+0x2894>
   14bfc:	ldr	r3, [pc, #444]	; 14dc0 <__assert_fail@plt+0x2e78>
   14c00:	cmp	r6, r3
   14c04:	bls	1480c <__assert_fail@plt+0x28c4>
   14c08:	ldr	r0, [sp, #52]	; 0x34
   14c0c:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   14c10:	mov	r0, r6
   14c14:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   14c18:	str	r0, [sp, #52]	; 0x34
   14c1c:	mov	r5, r6
   14c20:	mov	fp, #0
   14c24:	mov	r2, r6
   14c28:	mov	r1, r7
   14c2c:	ldr	r0, [sp, #52]	; 0x34
   14c30:	bl	11d68 <strxfrm@plt>
   14c34:	b	146ec <__assert_fail@plt+0x27a4>
   14c38:	mov	r8, fp
   14c3c:	ldr	fp, [sp, #76]	; 0x4c
   14c40:	ldr	r3, [sp, #44]	; 0x2c
   14c44:	add	r7, r3, r6
   14c48:	add	r2, sp, #120	; 0x78
   14c4c:	mov	r1, r6
   14c50:	mov	r0, r3
   14c54:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   14c58:	add	r1, sp, #88	; 0x58
   14c5c:	add	r0, sp, #120	; 0x78
   14c60:	bl	1a65c <__assert_fail@plt+0x8714>
   14c64:	add	r5, sp, #276	; 0x114
   14c68:	mov	r2, r5
   14c6c:	mov	r1, r8
   14c70:	mov	r0, r7
   14c74:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   14c78:	add	r4, sp, #104	; 0x68
   14c7c:	mov	r1, r4
   14c80:	mov	r0, r5
   14c84:	bl	1a65c <__assert_fail@plt+0x8714>
   14c88:	mov	r2, #16
   14c8c:	mov	r1, r4
   14c90:	add	r0, sp, #88	; 0x58
   14c94:	bl	11b40 <memcmp@plt>
   14c98:	cmp	r0, #0
   14c9c:	strne	r0, [sp, #20]
   14ca0:	bne	14cb4 <__assert_fail@plt+0x2d6c>
   14ca4:	ldr	r3, [sp, #20]
   14ca8:	cmp	r3, #0
   14cac:	ldreq	r0, [sp, #44]	; 0x2c
   14cb0:	beq	14d40 <__assert_fail@plt+0x2df8>
   14cb4:	ldr	r0, [sp, #52]	; 0x34
   14cb8:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   14cbc:	b	141dc <__assert_fail@plt+0x2294>
   14cc0:	add	r2, sp, #120	; 0x78
   14cc4:	ldr	r1, [sp, #12]
   14cc8:	ldr	r0, [sp, #16]
   14ccc:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   14cd0:	add	r1, sp, #88	; 0x58
   14cd4:	add	r0, sp, #120	; 0x78
   14cd8:	bl	1a65c <__assert_fail@plt+0x8714>
   14cdc:	add	r5, sp, #276	; 0x114
   14ce0:	mov	r2, r5
   14ce4:	ldr	r1, [sp, #8]
   14ce8:	ldr	r0, [sp, #4]
   14cec:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   14cf0:	add	r4, sp, #104	; 0x68
   14cf4:	mov	r1, r4
   14cf8:	mov	r0, r5
   14cfc:	bl	1a65c <__assert_fail@plt+0x8714>
   14d00:	mov	r2, #16
   14d04:	mov	r1, r4
   14d08:	add	r0, sp, #88	; 0x58
   14d0c:	bl	11b40 <memcmp@plt>
   14d10:	subs	r3, r0, #0
   14d14:	str	r3, [sp, #20]
   14d18:	movne	r3, #0
   14d1c:	strne	r3, [sp, #52]	; 0x34
   14d20:	bne	14cb4 <__assert_fail@plt+0x2d6c>
   14d24:	ldr	r3, [sp, #8]
   14d28:	mov	r8, r3
   14d2c:	ldr	r7, [sp, #4]
   14d30:	ldr	r6, [sp, #12]
   14d34:	ldr	r0, [sp, #16]
   14d38:	mov	r3, #0
   14d3c:	str	r3, [sp, #52]	; 0x34
   14d40:	cmp	r6, r8
   14d44:	movcc	r2, r6
   14d48:	movcs	r2, r8
   14d4c:	mov	r1, r7
   14d50:	bl	11b40 <memcmp@plt>
   14d54:	subs	r3, r0, #0
   14d58:	str	r3, [sp, #20]
   14d5c:	bne	14cb4 <__assert_fail@plt+0x2d6c>
   14d60:	mov	r3, r8
   14d64:	cmp	r6, r8
   14d68:	movhi	r3, #1
   14d6c:	movls	r3, #0
   14d70:	movcc	r6, #1
   14d74:	movcs	r6, #0
   14d78:	sub	r3, r3, r6
   14d7c:	str	r3, [sp, #20]
   14d80:	b	14cb4 <__assert_fail@plt+0x2d6c>
   14d84:	mov	r0, r7
   14d88:	bl	11d50 <strlen@plt>
   14d8c:	add	r0, r0, #1
   14d90:	add	r7, r7, r0
   14d94:	ldr	r3, [sp, #52]	; 0x34
   14d98:	str	r3, [sp, #44]	; 0x2c
   14d9c:	b	1470c <__assert_fail@plt+0x27c4>
   14da0:	mov	r0, r7
   14da4:	bl	11d50 <strlen@plt>
   14da8:	add	r0, r0, #1
   14dac:	add	r7, r7, r0
   14db0:	ldr	r3, [sp, #52]	; 0x34
   14db4:	str	r3, [sp, #44]	; 0x2c
   14db8:	b	1471c <__assert_fail@plt+0x27d4>
   14dbc:	andeq	r5, r3, r0, ror #5
   14dc0:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14dc4:	push	{r4, r5, r6, r7, r8, lr}
   14dc8:	mov	r4, r0
   14dcc:	mov	r5, r1
   14dd0:	ldr	r3, [pc, #200]	; 14ea0 <__assert_fail@plt+0x2f58>
   14dd4:	ldr	r3, [r3, #1280]	; 0x500
   14dd8:	cmp	r3, #0
   14ddc:	beq	14e0c <__assert_fail@plt+0x2ec4>
   14de0:	bl	1404c <__assert_fail@plt+0x2104>
   14de4:	cmp	r0, #0
   14de8:	popne	{r4, r5, r6, r7, r8, pc}
   14dec:	ldr	r3, [pc, #172]	; 14ea0 <__assert_fail@plt+0x2f58>
   14df0:	ldrb	r3, [r3, #1297]	; 0x511
   14df4:	cmp	r3, #0
   14df8:	popne	{r4, r5, r6, r7, r8, pc}
   14dfc:	ldr	r3, [pc, #156]	; 14ea0 <__assert_fail@plt+0x2f58>
   14e00:	ldrb	r3, [r3, #1298]	; 0x512
   14e04:	cmp	r3, #0
   14e08:	popne	{r4, r5, r6, r7, r8, pc}
   14e0c:	ldr	r1, [r4, #4]
   14e10:	ldr	r3, [r5, #4]
   14e14:	sub	r6, r3, #1
   14e18:	subs	r7, r1, #1
   14e1c:	bne	14e3c <__assert_fail@plt+0x2ef4>
   14e20:	adds	r0, r6, #0
   14e24:	mvnne	r0, #0
   14e28:	ldr	r3, [pc, #112]	; 14ea0 <__assert_fail@plt+0x2f58>
   14e2c:	ldrb	r3, [r3, #1476]	; 0x5c4
   14e30:	cmp	r3, #0
   14e34:	rsbne	r0, r0, #0
   14e38:	pop	{r4, r5, r6, r7, r8, pc}
   14e3c:	cmp	r6, #0
   14e40:	moveq	r0, #1
   14e44:	beq	14e28 <__assert_fail@plt+0x2ee0>
   14e48:	ldr	r2, [pc, #80]	; 14ea0 <__assert_fail@plt+0x2f58>
   14e4c:	ldrb	r2, [r2, #1316]	; 0x524
   14e50:	cmp	r2, #0
   14e54:	bne	14e90 <__assert_fail@plt+0x2f48>
   14e58:	cmp	r7, r6
   14e5c:	movcc	r2, r7
   14e60:	movcs	r2, r6
   14e64:	ldr	r1, [r5]
   14e68:	ldr	r0, [r4]
   14e6c:	bl	11b40 <memcmp@plt>
   14e70:	cmp	r0, #0
   14e74:	bne	14e28 <__assert_fail@plt+0x2ee0>
   14e78:	cmp	r7, r6
   14e7c:	mvncc	r0, #0
   14e80:	bcc	14e28 <__assert_fail@plt+0x2ee0>
   14e84:	subs	r0, r7, r6
   14e88:	movne	r0, #1
   14e8c:	b	14e28 <__assert_fail@plt+0x2ee0>
   14e90:	ldr	r2, [r5]
   14e94:	ldr	r0, [r4]
   14e98:	bl	20318 <__assert_fail@plt+0xe3d0>
   14e9c:	b	14e28 <__assert_fail@plt+0x2ee0>
   14ea0:	andeq	r5, r3, r0, ror #5
   14ea4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ea8:	mov	r9, r0
   14eac:	mov	r4, r2
   14eb0:	mov	r6, r3
   14eb4:	cmp	r1, #2
   14eb8:	beq	14f10 <__assert_fail@plt+0x2fc8>
   14ebc:	lsr	r8, r1, #1
   14ec0:	sub	r7, r1, r8
   14ec4:	lsl	r5, r8, #4
   14ec8:	rsb	r5, r5, #0
   14ecc:	add	r0, r0, r5
   14ed0:	cmp	r3, #0
   14ed4:	beq	15024 <__assert_fail@plt+0x30dc>
   14ed8:	mov	r3, #1
   14edc:	add	r2, r2, r5
   14ee0:	mov	r1, r7
   14ee4:	bl	14ea4 <__assert_fail@plt+0x2f5c>
   14ee8:	cmp	r8, #1
   14eec:	movls	r6, r9
   14ef0:	bls	15054 <__assert_fail@plt+0x310c>
   14ef4:	eor	r3, r6, #1
   14ef8:	mov	r2, r4
   14efc:	mov	r1, r8
   14f00:	mov	r0, r9
   14f04:	bl	14ea4 <__assert_fail@plt+0x2f5c>
   14f08:	mov	r6, r9
   14f0c:	b	15054 <__assert_fail@plt+0x310c>
   14f10:	sub	r1, r0, #32
   14f14:	sub	r0, r0, #16
   14f18:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   14f1c:	cmp	r6, #0
   14f20:	bne	14f54 <__assert_fail@plt+0x300c>
   14f24:	cmp	r0, #0
   14f28:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f2c:	sub	ip, r4, #16
   14f30:	sub	lr, r9, #16
   14f34:	ldm	lr, {r0, r1, r2, r3}
   14f38:	stm	ip, {r0, r1, r2, r3}
   14f3c:	sub	r4, r9, #32
   14f40:	ldm	r4, {r0, r1, r2, r3}
   14f44:	stm	lr, {r0, r1, r2, r3}
   14f48:	ldm	ip, {r0, r1, r2, r3}
   14f4c:	stm	r4, {r0, r1, r2, r3}
   14f50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f54:	cmp	r0, #0
   14f58:	movle	ip, #0
   14f5c:	movgt	ip, #1
   14f60:	mvn	r3, ip
   14f64:	add	r3, r9, r3, lsl #4
   14f68:	ldm	r3, {r0, r1, r2, r3}
   14f6c:	stmdb	r4, {r0, r1, r2, r3}
   14f70:	sub	r0, ip, #2
   14f74:	sub	ip, r4, #32
   14f78:	add	r4, r9, r0, lsl #4
   14f7c:	ldm	r4, {r0, r1, r2, r3}
   14f80:	stm	ip, {r0, r1, r2, r3}
   14f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f88:	ldmdb	r9, {r0, r1, r2, r3}
   14f8c:	stmdb	r4, {r0, r1, r2, r3}
   14f90:	mov	r6, r4
   14f94:	mov	r4, r9
   14f98:	b	15054 <__assert_fail@plt+0x310c>
   14f9c:	mov	r5, r9
   14fa0:	sub	r4, r4, #16
   14fa4:	sub	sl, r6, #16
   14fa8:	sub	r9, r5, #16
   14fac:	mov	r1, r9
   14fb0:	mov	r0, sl
   14fb4:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   14fb8:	cmp	r0, #0
   14fbc:	ble	1500c <__assert_fail@plt+0x30c4>
   14fc0:	mov	ip, r4
   14fc4:	ldmdb	r5, {r0, r1, r2, r3}
   14fc8:	stm	r4, {r0, r1, r2, r3}
   14fcc:	subs	r7, r7, #1
   14fd0:	bne	14f9c <__assert_fail@plt+0x3054>
   14fd4:	sub	lr, r8, #1
   14fd8:	rsb	r4, r8, r8, lsl #28
   14fdc:	lsl	r4, r4, #4
   14fe0:	add	r6, r6, r4
   14fe4:	add	r4, ip, r4
   14fe8:	lsl	r3, lr, #4
   14fec:	add	ip, r4, r3
   14ff0:	add	r3, r6, r3
   14ff4:	ldm	r3, {r0, r1, r2, r3}
   14ff8:	stm	ip, {r0, r1, r2, r3}
   14ffc:	sub	lr, lr, #1
   15000:	cmn	lr, #1
   15004:	bne	14fe8 <__assert_fail@plt+0x30a0>
   15008:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1500c:	ldmdb	r6, {r0, r1, r2, r3}
   15010:	stm	r4, {r0, r1, r2, r3}
   15014:	subs	r8, r8, #1
   15018:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1501c:	mov	r6, sl
   15020:	b	14fa0 <__assert_fail@plt+0x3058>
   15024:	mov	r3, #0
   15028:	mov	r1, r7
   1502c:	bl	14ea4 <__assert_fail@plt+0x2f5c>
   15030:	cmp	r8, #1
   15034:	bls	14f88 <__assert_fail@plt+0x3040>
   15038:	eor	r3, r6, #1
   1503c:	mov	r2, r4
   15040:	mov	r1, r8
   15044:	mov	r0, r9
   15048:	bl	14ea4 <__assert_fail@plt+0x2f5c>
   1504c:	mov	r6, r4
   15050:	mov	r4, r9
   15054:	add	r5, r4, r5
   15058:	sub	r4, r4, #16
   1505c:	b	14fa4 <__assert_fail@plt+0x305c>
   15060:	push	{r4, r5, r6, lr}
   15064:	mov	r4, r0
   15068:	mov	r5, r1
   1506c:	mov	r6, r2
   15070:	ldr	r3, [pc, #72]	; 150c0 <__assert_fail@plt+0x3178>
   15074:	ldrb	r3, [r3, #1297]	; 0x511
   15078:	cmp	r3, #0
   1507c:	beq	150ac <__assert_fail@plt+0x3164>
   15080:	ldr	r3, [pc, #56]	; 150c0 <__assert_fail@plt+0x3178>
   15084:	ldr	r3, [r3, #1480]	; 0x5c8
   15088:	cmp	r3, #0
   1508c:	beq	150a0 <__assert_fail@plt+0x3158>
   15090:	ldr	r1, [pc, #44]	; 150c4 <__assert_fail@plt+0x317c>
   15094:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   15098:	cmp	r0, #0
   1509c:	popeq	{r4, r5, r6, pc}
   150a0:	ldr	ip, [pc, #28]	; 150c4 <__assert_fail@plt+0x317c>
   150a4:	ldm	r4, {r0, r1, r2, r3}
   150a8:	stm	ip, {r0, r1, r2, r3}
   150ac:	mov	r2, r6
   150b0:	mov	r1, r5
   150b4:	mov	r0, r4
   150b8:	bl	12fbc <__assert_fail@plt+0x1074>
   150bc:	pop	{r4, r5, r6, pc}
   150c0:	andeq	r5, r3, r0, ror #5
   150c4:	andeq	r5, r3, r8, lsr #17
   150c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150cc:	sub	sp, sp, #68	; 0x44
   150d0:	mov	r6, r0
   150d4:	mov	r4, r1
   150d8:	mov	r1, r2
   150dc:	str	r2, [sp, #28]
   150e0:	mov	r5, r3
   150e4:	ldr	r8, [sp, #104]	; 0x68
   150e8:	ldr	r3, [r3, #20]
   150ec:	ldr	r2, [r5, #24]
   150f0:	add	r3, r3, r2
   150f4:	lsr	r7, r4, #1
   150f8:	str	r0, [sp, #32]
   150fc:	str	r7, [sp, #36]	; 0x24
   15100:	str	r1, [sp, #40]	; 0x28
   15104:	ldr	r2, [r5, #32]
   15108:	str	r2, [sp, #44]	; 0x2c
   1510c:	str	r8, [sp, #48]	; 0x30
   15110:	ldr	r2, [sp, #108]	; 0x6c
   15114:	str	r2, [sp, #52]	; 0x34
   15118:	ldr	r2, [sp, #112]	; 0x70
   1511c:	str	r2, [sp, #56]	; 0x38
   15120:	cmp	r3, #131072	; 0x20000
   15124:	cmpcs	r4, #1
   15128:	bhi	151b8 <__assert_fail@plt+0x3270>
   1512c:	ldr	r4, [r5, #20]
   15130:	ldr	r7, [r5, #24]
   15134:	ldr	r3, [sp, #28]
   15138:	sub	r9, r6, r3, lsl #4
   1513c:	cmp	r7, #1
   15140:	bls	1515c <__assert_fail@plt+0x3214>
   15144:	lsr	r2, r4, #1
   15148:	mov	r3, #0
   1514c:	sub	r2, r9, r2, lsl #4
   15150:	mov	r1, r7
   15154:	sub	r0, r6, r4, lsl #4
   15158:	bl	14ea4 <__assert_fail@plt+0x2f5c>
   1515c:	cmp	r4, #1
   15160:	bls	15178 <__assert_fail@plt+0x3230>
   15164:	mov	r3, #0
   15168:	mov	r2, r9
   1516c:	mov	r1, r4
   15170:	mov	r0, r6
   15174:	bl	14ea4 <__assert_fail@plt+0x2f5c>
   15178:	str	r6, [r5]
   1517c:	lsl	r3, r4, #4
   15180:	rsb	r3, r3, #0
   15184:	add	r2, r6, r3
   15188:	str	r2, [r5, #4]
   1518c:	str	r2, [r5, #8]
   15190:	sub	r3, r3, r7, lsl #4
   15194:	add	r3, r6, r3
   15198:	str	r3, [r5, #12]
   1519c:	mov	r1, r5
   151a0:	mov	r0, r8
   151a4:	bl	13f98 <__assert_fail@plt+0x2050>
   151a8:	add	r9, r8, #4
   151ac:	add	r3, r8, #32
   151b0:	str	r3, [sp, #20]
   151b4:	b	15570 <__assert_fail@plt+0x3628>
   151b8:	add	r3, sp, #32
   151bc:	ldr	r2, [pc, #1000]	; 155ac <__assert_fail@plt+0x3664>
   151c0:	mov	r1, #0
   151c4:	add	r0, sp, #60	; 0x3c
   151c8:	bl	11c6c <pthread_create@plt>
   151cc:	cmp	r0, #0
   151d0:	bne	1512c <__assert_fail@plt+0x31e4>
   151d4:	ldr	r3, [r5, #36]	; 0x24
   151d8:	ldr	r0, [r5, #20]
   151dc:	ldr	r2, [sp, #112]	; 0x70
   151e0:	str	r2, [sp, #8]
   151e4:	ldr	r2, [sp, #108]	; 0x6c
   151e8:	str	r2, [sp, #4]
   151ec:	str	r8, [sp]
   151f0:	ldr	r2, [sp, #28]
   151f4:	sub	r1, r4, r7
   151f8:	sub	r0, r6, r0, lsl #4
   151fc:	bl	150c8 <__assert_fail@plt+0x3180>
   15200:	mov	r1, #0
   15204:	ldr	r0, [sp, #60]	; 0x3c
   15208:	bl	11e64 <pthread_join@plt>
   1520c:	b	15308 <__assert_fail@plt+0x33c0>
   15210:	mov	r1, r9
   15214:	ldr	r0, [sp, #20]
   15218:	bl	11eb8 <pthread_cond_wait@plt>
   1521c:	ldr	r0, [r8]
   15220:	bl	1c0e0 <__assert_fail@plt+0xa198>
   15224:	cmp	r0, #0
   15228:	beq	15210 <__assert_fail@plt+0x32c8>
   1522c:	mov	r4, r0
   15230:	mov	r0, r9
   15234:	bl	119f0 <pthread_mutex_unlock@plt>
   15238:	add	r3, r4, #48	; 0x30
   1523c:	str	r3, [sp, #24]
   15240:	mov	r0, r3
   15244:	bl	11a98 <pthread_mutex_lock@plt>
   15248:	mov	r3, #0
   1524c:	strb	r3, [r4, #44]	; 0x2c
   15250:	ldr	r2, [r4, #40]	; 0x28
   15254:	cmp	r2, #0
   15258:	beq	152f4 <__assert_fail@plt+0x33ac>
   1525c:	ldr	fp, [r4]
   15260:	ldr	sl, [r4, #4]
   15264:	add	r3, r2, #1
   15268:	lsl	r3, r3, #1
   1526c:	ldr	r1, [sp, #28]
   15270:	lsr	r3, r1, r3
   15274:	add	r3, r3, #1
   15278:	cmp	r2, #1
   1527c:	bls	15424 <__assert_fail@plt+0x34dc>
   15280:	ldr	r2, [r4, #16]
   15284:	ldr	r6, [r2]
   15288:	mov	r5, r6
   1528c:	ldr	r0, [r4]
   15290:	ldr	lr, [r4, #8]
   15294:	cmp	r0, lr
   15298:	beq	1557c <__assert_fail@plt+0x3634>
   1529c:	ldr	r1, [r4, #4]
   152a0:	ldr	r2, [r4, #12]
   152a4:	cmp	r1, r2
   152a8:	beq	15314 <__assert_fail@plt+0x33cc>
   152ac:	sub	r7, r3, #1
   152b0:	cmp	r3, #0
   152b4:	beq	15310 <__assert_fail@plt+0x33c8>
   152b8:	sub	r1, r1, #16
   152bc:	sub	r0, r0, #16
   152c0:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   152c4:	cmp	r0, #0
   152c8:	ldrle	r3, [r4]
   152cc:	suble	r3, r3, #16
   152d0:	strle	r3, [r4]
   152d4:	ldrgt	r3, [r4, #4]
   152d8:	subgt	r3, r3, #16
   152dc:	strgt	r3, [r4, #4]
   152e0:	ldm	r3, {r0, r1, r2, r3}
   152e4:	stmdb	r5, {r0, r1, r2, r3}
   152e8:	sub	r6, r6, #16
   152ec:	mov	r3, r7
   152f0:	b	15288 <__assert_fail@plt+0x3340>
   152f4:	ldr	r0, [sp, #24]
   152f8:	bl	119f0 <pthread_mutex_unlock@plt>
   152fc:	mov	r1, r4
   15300:	mov	r0, r8
   15304:	bl	13f98 <__assert_fail@plt+0x2050>
   15308:	add	sp, sp, #68	; 0x44
   1530c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15310:	mov	r3, r7
   15314:	ldr	r2, [r4, #4]
   15318:	sub	ip, sl, r2
   1531c:	ldr	r1, [r4, #24]
   15320:	cmp	r1, ip, asr #4
   15324:	beq	153a0 <__assert_fail@plt+0x3458>
   15328:	sub	r0, fp, r0
   1532c:	ldr	r1, [r4, #20]
   15330:	cmp	r1, r0, asr #4
   15334:	beq	153dc <__assert_fail@plt+0x3494>
   15338:	ldr	r3, [r4, #16]
   1533c:	str	r5, [r3]
   15340:	ldr	r3, [r4, #4]
   15344:	sub	r3, sl, r3
   15348:	ldr	r2, [r4]
   1534c:	sub	r2, fp, r2
   15350:	ldr	fp, [r4, #20]
   15354:	sub	fp, fp, r2, asr #4
   15358:	str	fp, [r4, #20]
   1535c:	ldr	sl, [r4, #24]
   15360:	sub	sl, sl, r3, asr #4
   15364:	str	sl, [r4, #24]
   15368:	mov	r1, r4
   1536c:	mov	r0, r8
   15370:	bl	13fd8 <__assert_fail@plt+0x2090>
   15374:	ldr	r3, [r4, #40]	; 0x28
   15378:	cmp	r3, #1
   1537c:	bhi	15544 <__assert_fail@plt+0x35fc>
   15380:	ldr	r3, [r4, #20]
   15384:	ldr	r2, [r4, #24]
   15388:	cmn	r3, r2
   1538c:	bne	15568 <__assert_fail@plt+0x3620>
   15390:	ldr	r1, [r4, #28]
   15394:	mov	r0, r8
   15398:	bl	13f98 <__assert_fail@plt+0x2050>
   1539c:	b	15568 <__assert_fail@plt+0x3620>
   153a0:	sub	r6, r3, #1
   153a4:	cmp	r3, #0
   153a8:	beq	15338 <__assert_fail@plt+0x33f0>
   153ac:	sub	ip, r0, #16
   153b0:	sub	r5, r5, #16
   153b4:	str	ip, [r4]
   153b8:	ldm	ip, {r0, r1, r2, r3}
   153bc:	stm	r5, {r0, r1, r2, r3}
   153c0:	cmp	lr, ip
   153c4:	beq	15338 <__assert_fail@plt+0x33f0>
   153c8:	sub	r6, r6, #1
   153cc:	sub	ip, ip, #16
   153d0:	cmn	r6, #1
   153d4:	bne	153b0 <__assert_fail@plt+0x3468>
   153d8:	b	15338 <__assert_fail@plt+0x33f0>
   153dc:	ldr	r6, [r4, #12]
   153e0:	cmp	r6, r2
   153e4:	beq	15338 <__assert_fail@plt+0x33f0>
   153e8:	sub	lr, r3, #1
   153ec:	cmp	r3, #0
   153f0:	beq	15338 <__assert_fail@plt+0x33f0>
   153f4:	sub	ip, r2, #16
   153f8:	sub	r5, r5, #16
   153fc:	str	ip, [r4, #4]
   15400:	ldm	ip, {r0, r1, r2, r3}
   15404:	stm	r5, {r0, r1, r2, r3}
   15408:	cmp	ip, r6
   1540c:	beq	15338 <__assert_fail@plt+0x33f0>
   15410:	sub	lr, lr, #1
   15414:	sub	ip, ip, #16
   15418:	cmn	lr, #1
   1541c:	bne	153f8 <__assert_fail@plt+0x34b0>
   15420:	b	15338 <__assert_fail@plt+0x33f0>
   15424:	ldr	r0, [r4]
   15428:	ldr	r2, [r4, #8]
   1542c:	cmp	r0, r2
   15430:	beq	15594 <__assert_fail@plt+0x364c>
   15434:	ldr	r1, [r4, #4]
   15438:	ldr	r2, [r4, #12]
   1543c:	cmp	r1, r2
   15440:	beq	15490 <__assert_fail@plt+0x3548>
   15444:	sub	r5, r3, #1
   15448:	cmp	r3, #0
   1544c:	beq	1548c <__assert_fail@plt+0x3544>
   15450:	sub	r1, r1, #16
   15454:	sub	r0, r0, #16
   15458:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   1545c:	cmp	r0, #0
   15460:	ldrle	r0, [r4]
   15464:	suble	r0, r0, #16
   15468:	strle	r0, [r4]
   1546c:	ldrgt	r0, [r4, #4]
   15470:	subgt	r0, r0, #16
   15474:	strgt	r0, [r4, #4]
   15478:	ldr	r2, [sp, #112]	; 0x70
   1547c:	ldr	r1, [sp, #108]	; 0x6c
   15480:	bl	15060 <__assert_fail@plt+0x3118>
   15484:	mov	r3, r5
   15488:	b	15424 <__assert_fail@plt+0x34dc>
   1548c:	mov	r3, r5
   15490:	ldr	r2, [r4, #4]
   15494:	sub	ip, sl, r2
   15498:	ldr	r1, [r4, #24]
   1549c:	cmp	r1, ip, asr #4
   154a0:	beq	15504 <__assert_fail@plt+0x35bc>
   154a4:	sub	r0, fp, r0
   154a8:	ldr	r1, [r4, #20]
   154ac:	cmp	r1, r0, asr #4
   154b0:	bne	15340 <__assert_fail@plt+0x33f8>
   154b4:	ldr	r1, [r4, #12]
   154b8:	cmp	r1, r2
   154bc:	beq	15340 <__assert_fail@plt+0x33f8>
   154c0:	sub	r5, r3, #1
   154c4:	cmp	r3, #0
   154c8:	beq	15340 <__assert_fail@plt+0x33f8>
   154cc:	mov	r0, r2
   154d0:	sub	r0, r0, #16
   154d4:	str	r0, [r4, #4]
   154d8:	ldr	r2, [sp, #112]	; 0x70
   154dc:	ldr	r1, [sp, #108]	; 0x6c
   154e0:	bl	15060 <__assert_fail@plt+0x3118>
   154e4:	ldr	r0, [r4, #4]
   154e8:	ldr	r3, [r4, #12]
   154ec:	cmp	r0, r3
   154f0:	beq	15340 <__assert_fail@plt+0x33f8>
   154f4:	sub	r5, r5, #1
   154f8:	cmn	r5, #1
   154fc:	bne	154d0 <__assert_fail@plt+0x3588>
   15500:	b	15340 <__assert_fail@plt+0x33f8>
   15504:	sub	r5, r3, #1
   15508:	cmp	r3, #0
   1550c:	beq	15340 <__assert_fail@plt+0x33f8>
   15510:	sub	r0, r0, #16
   15514:	str	r0, [r4]
   15518:	ldr	r2, [sp, #112]	; 0x70
   1551c:	ldr	r1, [sp, #108]	; 0x6c
   15520:	bl	15060 <__assert_fail@plt+0x3118>
   15524:	ldr	r0, [r4]
   15528:	ldr	r3, [r4, #8]
   1552c:	cmp	r0, r3
   15530:	beq	15340 <__assert_fail@plt+0x33f8>
   15534:	sub	r5, r5, #1
   15538:	cmn	r5, #1
   1553c:	bne	15510 <__assert_fail@plt+0x35c8>
   15540:	b	15340 <__assert_fail@plt+0x33f8>
   15544:	ldr	r0, [r4, #28]
   15548:	add	r0, r0, #48	; 0x30
   1554c:	bl	11a98 <pthread_mutex_lock@plt>
   15550:	ldr	r1, [r4, #28]
   15554:	mov	r0, r8
   15558:	bl	13fd8 <__assert_fail@plt+0x2090>
   1555c:	ldr	r0, [r4, #28]
   15560:	add	r0, r0, #48	; 0x30
   15564:	bl	119f0 <pthread_mutex_unlock@plt>
   15568:	ldr	r0, [sp, #24]
   1556c:	bl	119f0 <pthread_mutex_unlock@plt>
   15570:	mov	r0, r9
   15574:	bl	11a98 <pthread_mutex_lock@plt>
   15578:	b	1521c <__assert_fail@plt+0x32d4>
   1557c:	ldr	r2, [r4, #4]
   15580:	sub	ip, sl, r2
   15584:	ldr	r1, [r4, #24]
   15588:	cmp	r1, ip, asr #4
   1558c:	bne	15328 <__assert_fail@plt+0x33e0>
   15590:	b	15338 <__assert_fail@plt+0x33f0>
   15594:	ldr	r2, [r4, #4]
   15598:	sub	ip, sl, r2
   1559c:	ldr	r1, [r4, #24]
   155a0:	cmp	r1, ip, asr #4
   155a4:	bne	154a4 <__assert_fail@plt+0x355c>
   155a8:	b	15340 <__assert_fail@plt+0x33f8>
   155ac:			; <UNDEFINED> instruction: 0x000155b0
   155b0:	push	{lr}		; (str lr, [sp, #-4]!)
   155b4:	sub	sp, sp, #20
   155b8:	ldr	r3, [r0, #12]
   155bc:	ldr	r2, [r0, #8]
   155c0:	ldr	r1, [r0, #4]
   155c4:	ldr	ip, [r0]
   155c8:	ldr	lr, [r0, #24]
   155cc:	str	lr, [sp, #8]
   155d0:	ldr	lr, [r0, #20]
   155d4:	str	lr, [sp, #4]
   155d8:	ldr	r0, [r0, #16]
   155dc:	str	r0, [sp]
   155e0:	mov	r0, ip
   155e4:	bl	150c8 <__assert_fail@plt+0x3180>
   155e8:	mov	r0, #0
   155ec:	add	sp, sp, #20
   155f0:	pop	{pc}		; (ldr pc, [sp], #4)
   155f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f8:	sub	sp, sp, #60	; 0x3c
   155fc:	str	r0, [sp, #12]
   15600:	str	r1, [sp, #20]
   15604:	mov	r8, r2
   15608:	str	r3, [sp, #24]
   1560c:	mov	r1, #28
   15610:	mov	r0, r2
   15614:	bl	1fd08 <__assert_fail@plt+0xddc0>
   15618:	str	r0, [sp, #4]
   1561c:	mov	r1, #4
   15620:	mov	r0, r8
   15624:	bl	1fd08 <__assert_fail@plt+0xddc0>
   15628:	mov	fp, r0
   1562c:	mov	r1, #4
   15630:	mov	r0, r8
   15634:	bl	1fd08 <__assert_fail@plt+0xddc0>
   15638:	str	r0, [sp, #8]
   1563c:	mov	r1, #4
   15640:	mov	r0, r8
   15644:	bl	1fd08 <__assert_fail@plt+0xddc0>
   15648:	mov	r4, r0
   1564c:	ldr	r3, [pc, #1552]	; 15c64 <__assert_fail@plt+0x3d1c>
   15650:	ldr	r3, [r3, #1280]	; 0x500
   15654:	str	r3, [sp, #36]	; 0x24
   15658:	mov	r3, #0
   1565c:	str	r3, [sp, #40]	; 0x28
   15660:	cmp	r8, r3
   15664:	streq	r8, [sp]
   15668:	beq	15824 <__assert_fail@plt+0x38dc>
   1566c:	mov	r7, #0
   15670:	str	r0, [sp]
   15674:	b	156e0 <__assert_fail@plt+0x3798>
   15678:	ldr	r3, [sp, #12]
   1567c:	ldr	r1, [r3, r7, lsl #3]
   15680:	ldr	r3, [sp, #100]	; 0x64
   15684:	ldr	r0, [r3, r7, lsl #2]
   15688:	bl	12df4 <__assert_fail@plt+0xeac>
   1568c:	ldr	r3, [sp, #20]
   15690:	cmp	r3, r7
   15694:	bhi	157b4 <__assert_fail@plt+0x386c>
   15698:	ldr	r3, [sp, #4]
   1569c:	ldr	r0, [r3, sl, lsl #2]
   156a0:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   156a4:	sub	r2, r8, #1
   156a8:	cmp	r2, r7
   156ac:	bls	157cc <__assert_fail@plt+0x3884>
   156b0:	sub	r8, r8, #-1073741823	; 0xc0000001
   156b4:	ldr	r3, [sp, #100]	; 0x64
   156b8:	add	r8, r3, r8, lsl #2
   156bc:	add	r3, r5, #8
   156c0:	ldm	r3, {r0, r1}
   156c4:	stm	r5, {r0, r1}
   156c8:	ldr	r1, [r4, #4]
   156cc:	str	r1, [r4], #4
   156d0:	mov	r5, r3
   156d4:	cmp	r4, r8
   156d8:	bne	156bc <__assert_fail@plt+0x3774>
   156dc:	mov	r8, r2
   156e0:	lsl	r9, r7, #3
   156e4:	sub	sl, r9, r7
   156e8:	ldr	r3, [sp, #4]
   156ec:	add	r6, r3, sl, lsl #2
   156f0:	mov	r1, r8
   156f4:	ldr	r2, [pc, #1384]	; 15c64 <__assert_fail@plt+0x3d1c>
   156f8:	ldr	r0, [r2, #1496]	; 0x5d8
   156fc:	bl	21578 <_obstack_memory_used@@Base+0x94>
   15700:	ldr	r2, [pc, #1376]	; 15c68 <__assert_fail@plt+0x3d20>
   15704:	ldr	r2, [r2, #104]	; 0x68
   15708:	cmp	r0, r2
   1570c:	movcs	r2, r0
   15710:	mov	r1, #16
   15714:	mov	r0, r6
   15718:	bl	12f24 <__assert_fail@plt+0xfdc>
   1571c:	ldr	r2, [sp, #100]	; 0x64
   15720:	add	r4, r2, r7, lsl #2
   15724:	ldr	r3, [sp, #12]
   15728:	add	r5, r3, r9
   1572c:	ldr	r2, [r3, r7, lsl #3]
   15730:	ldr	r1, [sp, #100]	; 0x64
   15734:	ldr	r1, [r1, r7, lsl #2]
   15738:	mov	r0, r6
   1573c:	bl	13464 <__assert_fail@plt+0x151c>
   15740:	cmp	r0, #0
   15744:	beq	15678 <__assert_fail@plt+0x3730>
   15748:	ldr	r3, [sp, #4]
   1574c:	ldr	r3, [r3, sl, lsl #2]
   15750:	ldr	r2, [r6, #12]
   15754:	add	r3, r3, r2
   15758:	sub	r2, r3, #16
   1575c:	str	r2, [fp, r7, lsl #2]
   15760:	ldr	r2, [r6, #8]
   15764:	sub	r3, r3, r2, lsl #4
   15768:	ldr	r2, [sp, #8]
   1576c:	str	r3, [r2, r7, lsl #2]
   15770:	add	r7, r7, #1
   15774:	cmp	r7, r8
   15778:	bcc	156e0 <__assert_fail@plt+0x3798>
   1577c:	ldr	r4, [sp]
   15780:	cmp	r8, #0
   15784:	beq	15c28 <__assert_fail@plt+0x3ce0>
   15788:	sub	r3, r4, #4
   1578c:	mov	r2, #0
   15790:	str	r2, [r3, #4]!
   15794:	add	r2, r2, #1
   15798:	cmp	r2, r8
   1579c:	bne	15790 <__assert_fail@plt+0x3848>
   157a0:	str	r2, [sp]
   157a4:	cmp	r2, #1
   157a8:	bls	15824 <__assert_fail@plt+0x38dc>
   157ac:	mov	r5, #1
   157b0:	b	157e8 <__assert_fail@plt+0x38a0>
   157b4:	sub	r3, r3, #1
   157b8:	str	r3, [sp, #20]
   157bc:	ldr	r3, [sp, #12]
   157c0:	ldr	r0, [r3, r9]
   157c4:	bl	138ac <__assert_fail@plt+0x1964>
   157c8:	b	15698 <__assert_fail@plt+0x3750>
   157cc:	ldr	r4, [sp]
   157d0:	mov	r8, r2
   157d4:	b	15780 <__assert_fail@plt+0x3838>
   157d8:	add	r5, r5, #1
   157dc:	ldr	r3, [sp]
   157e0:	cmp	r3, r5
   157e4:	bls	15824 <__assert_fail@plt+0x38dc>
   157e8:	sub	r7, r5, #-1073741823	; 0xc0000001
   157ec:	lsl	r6, r5, #2
   157f0:	ldr	r2, [r4, r6]
   157f4:	ldr	r3, [r4, r7, lsl #2]
   157f8:	ldr	r1, [fp, r2, lsl #2]
   157fc:	ldr	r0, [fp, r3, lsl #2]
   15800:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   15804:	cmp	r0, #0
   15808:	ble	157d8 <__assert_fail@plt+0x3890>
   1580c:	ldr	r3, [r4, r7, lsl #2]
   15810:	ldr	r2, [r4, r6]
   15814:	str	r2, [r4, r7, lsl #2]
   15818:	str	r3, [r4, r6]
   1581c:	mov	r5, #1
   15820:	b	157e8 <__assert_fail@plt+0x38a0>
   15824:	ldr	r3, [sp]
   15828:	cmp	r3, #0
   1582c:	beq	15c28 <__assert_fail@plt+0x3ce0>
   15830:	mov	r3, #0
   15834:	str	r3, [sp, #32]
   15838:	str	r3, [sp, #16]
   1583c:	b	15b70 <__assert_fail@plt+0x3c28>
   15840:	ldr	r2, [sp, #96]	; 0x60
   15844:	ldr	r1, [sp, #24]
   15848:	add	r0, sp, #40	; 0x28
   1584c:	bl	12fbc <__assert_fail@plt+0x1074>
   15850:	ldr	r6, [r5, #4]
   15854:	ldr	r3, [sp, #32]
   15858:	cmp	r6, r3
   1585c:	bhi	158b8 <__assert_fail@plt+0x3970>
   15860:	ldr	r2, [r5, #4]
   15864:	str	r2, [sp, #44]	; 0x2c
   15868:	ldr	r1, [r5]
   1586c:	ldr	r0, [sp, #40]	; 0x28
   15870:	bl	11ac8 <memcpy@plt>
   15874:	ldr	r3, [sp, #36]	; 0x24
   15878:	cmp	r3, #0
   1587c:	beq	1591c <__assert_fail@plt+0x39d4>
   15880:	ldr	r2, [sp, #40]	; 0x28
   15884:	ldr	r3, [r5, #8]
   15888:	ldr	r1, [r5]
   1588c:	sub	r3, r3, r1
   15890:	add	r3, r2, r3
   15894:	str	r3, [sp, #48]	; 0x30
   15898:	ldr	r3, [r5, #12]
   1589c:	ldr	r1, [r5]
   158a0:	sub	r3, r3, r1
   158a4:	add	r2, r2, r3
   158a8:	str	r2, [sp, #52]	; 0x34
   158ac:	add	r3, sp, #40	; 0x28
   158b0:	str	r3, [sp, #16]
   158b4:	b	15ba8 <__assert_fail@plt+0x3c60>
   158b8:	ldr	r3, [sp, #32]
   158bc:	cmp	r3, #0
   158c0:	beq	158ec <__assert_fail@plt+0x39a4>
   158c4:	lsl	r3, r3, #1
   158c8:	cmp	r6, r3
   158cc:	movls	r6, r3
   158d0:	bls	158ec <__assert_fail@plt+0x39a4>
   158d4:	cmp	r3, #0
   158d8:	beq	158ec <__assert_fail@plt+0x39a4>
   158dc:	lsl	r3, r3, #1
   158e0:	cmp	r6, r3
   158e4:	bhi	158d4 <__assert_fail@plt+0x398c>
   158e8:	mov	r6, r3
   158ec:	ldr	r0, [sp, #40]	; 0x28
   158f0:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   158f4:	mov	r0, r6
   158f8:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   158fc:	str	r0, [sp, #40]	; 0x28
   15900:	str	r6, [sp, #32]
   15904:	b	15860 <__assert_fail@plt+0x3918>
   15908:	ldr	r2, [sp, #96]	; 0x60
   1590c:	ldr	r1, [sp, #24]
   15910:	mov	r0, r5
   15914:	bl	12fbc <__assert_fail@plt+0x1074>
   15918:	b	15ba8 <__assert_fail@plt+0x3c60>
   1591c:	add	r3, sp, #40	; 0x28
   15920:	str	r3, [sp, #16]
   15924:	b	15ba8 <__assert_fail@plt+0x3c60>
   15928:	rsb	r0, r3, r3, lsl #3
   1592c:	ldr	r2, [sp, #12]
   15930:	ldr	r2, [r2, r3, lsl #3]
   15934:	ldr	r1, [sp, #100]	; 0x64
   15938:	ldr	r1, [r1, r3, lsl #2]
   1593c:	ldr	r3, [sp, #4]
   15940:	add	r0, r3, r0, lsl #2
   15944:	bl	13464 <__assert_fail@plt+0x151c>
   15948:	cmp	r0, #0
   1594c:	bne	15aa0 <__assert_fail@plt+0x3b58>
   15950:	ldr	r3, [sp]
   15954:	cmp	r3, #1
   15958:	bls	15988 <__assert_fail@plt+0x3a40>
   1595c:	add	r3, r4, #4
   15960:	ldr	r2, [sp]
   15964:	add	r0, r4, r2, lsl #2
   15968:	ldr	r2, [r3]
   1596c:	ldr	r1, [r4]
   15970:	cmp	r2, r1
   15974:	subhi	r2, r2, #1
   15978:	strhi	r2, [r3]
   1597c:	add	r3, r3, #4
   15980:	cmp	r3, r0
   15984:	bne	15968 <__assert_fail@plt+0x3a20>
   15988:	ldr	r3, [sp]
   1598c:	sub	r3, r3, #1
   15990:	str	r3, [sp, #28]
   15994:	ldr	r3, [r4]
   15998:	ldr	r2, [sp, #12]
   1599c:	ldr	r1, [r2, r3, lsl #3]
   159a0:	ldr	r2, [sp, #100]	; 0x64
   159a4:	ldr	r0, [r2, r3, lsl #2]
   159a8:	bl	12df4 <__assert_fail@plt+0xeac>
   159ac:	ldr	r3, [r4]
   159b0:	ldr	r2, [sp, #20]
   159b4:	cmp	r3, r2
   159b8:	bcc	15ad8 <__assert_fail@plt+0x3b90>
   159bc:	ldr	r3, [r4]
   159c0:	rsb	r3, r3, r3, lsl #3
   159c4:	ldr	r5, [sp, #4]
   159c8:	ldr	r0, [r5, r3, lsl #2]
   159cc:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   159d0:	ldr	r2, [r4]
   159d4:	ldr	r3, [sp, #28]
   159d8:	cmp	r3, r2
   159dc:	bls	15a68 <__assert_fail@plt+0x3b20>
   159e0:	lsl	r8, r2, #2
   159e4:	ldr	r3, [sp, #100]	; 0x64
   159e8:	add	r6, r3, r8
   159ec:	lsl	r1, r2, #3
   159f0:	ldr	r3, [sp, #12]
   159f4:	add	r3, r3, r1
   159f8:	sub	r2, r1, r2
   159fc:	add	r5, r5, r2, lsl #2
   15a00:	add	r9, fp, r8
   15a04:	ldr	r2, [sp, #8]
   15a08:	add	r8, r2, r8
   15a0c:	ldr	r2, [sp]
   15a10:	sub	sl, r2, #-1073741823	; 0xc0000001
   15a14:	ldr	r2, [sp, #100]	; 0x64
   15a18:	add	sl, r2, sl, lsl #2
   15a1c:	ldr	r2, [r6, #4]
   15a20:	str	r2, [r6], #4
   15a24:	add	r7, r3, #8
   15a28:	ldm	r7, {r0, r1}
   15a2c:	stm	r3, {r0, r1}
   15a30:	mov	ip, r5
   15a34:	add	lr, r5, #28
   15a38:	ldm	lr!, {r0, r1, r2, r3}
   15a3c:	stmia	ip!, {r0, r1, r2, r3}
   15a40:	ldm	lr, {r0, r1, r2}
   15a44:	stm	ip, {r0, r1, r2}
   15a48:	ldr	r3, [r9, #4]
   15a4c:	str	r3, [r9], #4
   15a50:	ldr	r3, [r8, #4]
   15a54:	str	r3, [r8], #4
   15a58:	mov	r3, r7
   15a5c:	add	r5, r5, #28
   15a60:	cmp	r6, sl
   15a64:	bne	15a1c <__assert_fail@plt+0x3ad4>
   15a68:	ldr	r3, [sp, #28]
   15a6c:	cmp	r3, #0
   15a70:	beq	15bf0 <__assert_fail@plt+0x3ca8>
   15a74:	mov	r3, r4
   15a78:	ldr	r2, [sp]
   15a7c:	sub	r1, r2, #-1073741823	; 0xc0000001
   15a80:	add	r1, r4, r1, lsl #2
   15a84:	ldr	r2, [r3, #4]
   15a88:	str	r2, [r3], #4
   15a8c:	cmp	r1, r3
   15a90:	bne	15a84 <__assert_fail@plt+0x3b3c>
   15a94:	ldr	r3, [sp, #28]
   15a98:	str	r3, [sp]
   15a9c:	b	15b70 <__assert_fail@plt+0x3c28>
   15aa0:	ldr	r2, [r4]
   15aa4:	rsb	r3, r2, r2, lsl #3
   15aa8:	ldr	r0, [sp, #4]
   15aac:	add	r1, r0, r3, lsl #2
   15ab0:	ldr	r3, [r0, r3, lsl #2]
   15ab4:	ldr	r0, [r1, #12]
   15ab8:	add	r3, r3, r0
   15abc:	sub	r0, r3, #16
   15ac0:	str	r0, [fp, r2, lsl #2]
   15ac4:	ldr	r1, [r1, #8]
   15ac8:	sub	r3, r3, r1, lsl #4
   15acc:	ldr	r1, [sp, #8]
   15ad0:	str	r3, [r1, r2, lsl #2]
   15ad4:	b	15bc4 <__assert_fail@plt+0x3c7c>
   15ad8:	sub	r2, r2, #1
   15adc:	str	r2, [sp, #20]
   15ae0:	ldr	r2, [sp, #12]
   15ae4:	ldr	r0, [r2, r3, lsl #3]
   15ae8:	bl	138ac <__assert_fail@plt+0x1964>
   15aec:	b	159bc <__assert_fail@plt+0x3a74>
   15af0:	add	r6, r5, #1
   15af4:	add	r5, r6, r7
   15af8:	lsr	r5, r5, #1
   15afc:	cmp	r6, r7
   15b00:	bcs	15b3c <__assert_fail@plt+0x3bf4>
   15b04:	lsl	r8, r5, #2
   15b08:	ldr	r3, [r4, r5, lsl #2]
   15b0c:	ldr	r1, [fp, r3, lsl #2]
   15b10:	ldr	r0, [r9]
   15b14:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   15b18:	cmp	r0, #0
   15b1c:	movlt	r7, r5
   15b20:	blt	15af4 <__assert_fail@plt+0x3bac>
   15b24:	bne	15af0 <__assert_fail@plt+0x3ba8>
   15b28:	ldr	r3, [r4, r8]
   15b2c:	cmp	sl, r3
   15b30:	movcc	r7, r5
   15b34:	bcc	15af4 <__assert_fail@plt+0x3bac>
   15b38:	b	15af0 <__assert_fail@plt+0x3ba8>
   15b3c:	subs	r1, r6, #1
   15b40:	beq	15b60 <__assert_fail@plt+0x3c18>
   15b44:	mov	r3, r4
   15b48:	sub	r6, r6, #-1073741823	; 0xc0000001
   15b4c:	add	r6, r4, r6, lsl #2
   15b50:	ldr	r2, [r3, #4]
   15b54:	str	r2, [r3], #4
   15b58:	cmp	r6, r3
   15b5c:	bne	15b50 <__assert_fail@plt+0x3c08>
   15b60:	str	sl, [r4, r1, lsl #2]
   15b64:	ldr	r3, [sp]
   15b68:	cmp	r3, #0
   15b6c:	beq	15bf0 <__assert_fail@plt+0x3ca8>
   15b70:	ldr	r3, [r4]
   15b74:	ldr	r5, [fp, r3, lsl #2]
   15b78:	ldr	r3, [pc, #228]	; 15c64 <__assert_fail@plt+0x3d1c>
   15b7c:	ldrb	r3, [r3, #1297]	; 0x511
   15b80:	cmp	r3, #0
   15b84:	beq	15908 <__assert_fail@plt+0x39c0>
   15b88:	ldr	r3, [sp, #16]
   15b8c:	cmp	r3, #0
   15b90:	beq	15850 <__assert_fail@plt+0x3908>
   15b94:	mov	r1, r5
   15b98:	mov	r0, r3
   15b9c:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   15ba0:	cmp	r0, #0
   15ba4:	bne	15840 <__assert_fail@plt+0x38f8>
   15ba8:	ldr	r3, [r4]
   15bac:	ldr	r2, [sp, #8]
   15bb0:	ldr	r2, [r2, r3, lsl #2]
   15bb4:	cmp	r5, r2
   15bb8:	bls	15928 <__assert_fail@plt+0x39e0>
   15bbc:	sub	r5, r5, #16
   15bc0:	str	r5, [fp, r3, lsl #2]
   15bc4:	ldr	sl, [r4]
   15bc8:	ldr	r3, [sp]
   15bcc:	cmp	r3, #1
   15bd0:	bls	15be8 <__assert_fail@plt+0x3ca0>
   15bd4:	add	r9, fp, sl, lsl #2
   15bd8:	mov	r7, r3
   15bdc:	mov	r5, #1
   15be0:	mov	r6, r5
   15be4:	b	15b04 <__assert_fail@plt+0x3bbc>
   15be8:	mov	r1, #0
   15bec:	b	15b60 <__assert_fail@plt+0x3c18>
   15bf0:	ldr	r3, [pc, #108]	; 15c64 <__assert_fail@plt+0x3d1c>
   15bf4:	ldrb	r3, [r3, #1297]	; 0x511
   15bf8:	ldr	r2, [sp, #16]
   15bfc:	cmp	r2, #0
   15c00:	moveq	r3, #0
   15c04:	andne	r3, r3, #1
   15c08:	cmp	r3, #0
   15c0c:	beq	15c28 <__assert_fail@plt+0x3ce0>
   15c10:	ldr	r2, [sp, #96]	; 0x60
   15c14:	ldr	r1, [sp, #24]
   15c18:	add	r0, sp, #40	; 0x28
   15c1c:	bl	12fbc <__assert_fail@plt+0x1074>
   15c20:	ldr	r0, [sp, #40]	; 0x28
   15c24:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   15c28:	ldr	r1, [sp, #96]	; 0x60
   15c2c:	ldr	r0, [sp, #24]
   15c30:	bl	12df4 <__assert_fail@plt+0xeac>
   15c34:	ldr	r0, [sp, #100]	; 0x64
   15c38:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   15c3c:	ldr	r0, [sp, #4]
   15c40:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   15c44:	mov	r0, r4
   15c48:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   15c4c:	ldr	r0, [sp, #8]
   15c50:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   15c54:	mov	r0, fp
   15c58:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   15c5c:	add	sp, sp, #60	; 0x3c
   15c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c64:	andeq	r5, r3, r0, ror #5
   15c68:	andeq	r5, r3, r4, ror #3
   15c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c70:	sub	sp, sp, #20
   15c74:	mov	fp, r0
   15c78:	mov	r6, r1
   15c7c:	mov	r4, r2
   15c80:	mov	r1, #4
   15c84:	mov	r0, r6
   15c88:	bl	1fd08 <__assert_fail@plt+0xddc0>
   15c8c:	str	r0, [r4]
   15c90:	cmp	r6, #0
   15c94:	beq	15e58 <__assert_fail@plt+0x3f10>
   15c98:	mov	r7, fp
   15c9c:	sub	r8, r0, #4
   15ca0:	mov	r4, #0
   15ca4:	b	15db0 <__assert_fail@plt+0x3e68>
   15ca8:	ldr	r9, [sl, #4]
   15cac:	mov	r0, r9
   15cb0:	bl	13768 <__assert_fail@plt+0x1820>
   15cb4:	cmp	r0, #0
   15cb8:	beq	15dd4 <__assert_fail@plt+0x3e8c>
   15cbc:	mov	r0, r9
   15cc0:	bl	137a4 <__assert_fail@plt+0x185c>
   15cc4:	b	15dd4 <__assert_fail@plt+0x3e8c>
   15cc8:	bl	11d74 <__errno_location@plt>
   15ccc:	mov	sl, r0
   15cd0:	ldr	r3, [r0]
   15cd4:	cmp	r3, #24
   15cd8:	bne	15cf4 <__assert_fail@plt+0x3dac>
   15cdc:	mov	r0, r9
   15ce0:	bl	11f30 <close@plt>
   15ce4:	mov	r3, #24
   15ce8:	str	r3, [sl]
   15cec:	mov	r9, #0
   15cf0:	b	15d90 <__assert_fail@plt+0x3e48>
   15cf4:	mov	r5, r3
   15cf8:	mov	r2, #5
   15cfc:	ldr	r1, [pc, #356]	; 15e68 <__assert_fail@plt+0x3f20>
   15d00:	mov	r0, #0
   15d04:	bl	11b58 <dcgettext@plt>
   15d08:	mov	r4, r0
   15d0c:	ldr	r3, [pc, #344]	; 15e6c <__assert_fail@plt+0x3f24>
   15d10:	ldr	r1, [r3, #1304]	; 0x518
   15d14:	mov	r0, #4
   15d18:	bl	1e334 <__assert_fail@plt+0xc3ec>
   15d1c:	mov	r3, r0
   15d20:	mov	r2, r4
   15d24:	mov	r1, r5
   15d28:	mov	r0, #2
   15d2c:	bl	11c90 <error@plt>
   15d30:	ldr	r0, [sp, #8]
   15d34:	bl	11f30 <close@plt>
   15d38:	mov	r1, #0
   15d3c:	mov	r0, r9
   15d40:	bl	13748 <__assert_fail@plt+0x1800>
   15d44:	mov	r1, #1
   15d48:	ldr	r0, [sp, #12]
   15d4c:	bl	13748 <__assert_fail@plt+0x1800>
   15d50:	ldr	r3, [pc, #276]	; 15e6c <__assert_fail@plt+0x3f24>
   15d54:	ldr	r0, [r3, #1304]	; 0x518
   15d58:	mov	r3, #0
   15d5c:	ldr	r2, [pc, #268]	; 15e70 <__assert_fail@plt+0x3f28>
   15d60:	mov	r1, r0
   15d64:	bl	11ad4 <execlp@plt>
   15d68:	bl	11d74 <__errno_location@plt>
   15d6c:	ldr	r1, [pc, #256]	; 15e74 <__assert_fail@plt+0x3f2c>
   15d70:	ldr	r0, [r0]
   15d74:	bl	13b50 <__assert_fail@plt+0x1c08>
   15d78:	mov	r9, #0
   15d7c:	b	15d90 <__assert_fail@plt+0x3e48>
   15d80:	ldr	r1, [pc, #240]	; 15e78 <__assert_fail@plt+0x3f30>
   15d84:	ldr	r0, [fp, r5, lsl #3]
   15d88:	bl	12c84 <__assert_fail@plt+0xd3c>
   15d8c:	mov	r9, r0
   15d90:	str	r9, [r8, #4]!
   15d94:	cmp	r9, #0
   15d98:	beq	15e5c <__assert_fail@plt+0x3f14>
   15d9c:	add	r4, r4, #1
   15da0:	mov	r5, r4
   15da4:	add	r7, r7, #8
   15da8:	cmp	r4, r6
   15dac:	beq	15e5c <__assert_fail@plt+0x3f14>
   15db0:	mov	r5, r4
   15db4:	ldr	sl, [r7, #4]
   15db8:	cmp	sl, #0
   15dbc:	beq	15d80 <__assert_fail@plt+0x3e38>
   15dc0:	ldrb	r3, [sl, #8]
   15dc4:	cmp	r3, #0
   15dc8:	beq	15d80 <__assert_fail@plt+0x3e38>
   15dcc:	cmp	r3, #1
   15dd0:	beq	15ca8 <__assert_fail@plt+0x3d60>
   15dd4:	mov	r1, #0
   15dd8:	add	r0, sl, #9
   15ddc:	bl	11c9c <open64@plt>
   15de0:	subs	r9, r0, #0
   15de4:	blt	15d78 <__assert_fail@plt+0x3e30>
   15de8:	mov	r1, #9
   15dec:	add	r0, sp, #8
   15df0:	bl	139e8 <__assert_fail@plt+0x1aa0>
   15df4:	cmn	r0, #1
   15df8:	beq	15cc8 <__assert_fail@plt+0x3d80>
   15dfc:	cmp	r0, #0
   15e00:	beq	15d30 <__assert_fail@plt+0x3de8>
   15e04:	str	r0, [sl, #4]
   15e08:	mov	r0, sl
   15e0c:	bl	13bdc <__assert_fail@plt+0x1c94>
   15e10:	mov	r0, r9
   15e14:	bl	11f30 <close@plt>
   15e18:	ldr	r0, [sp, #12]
   15e1c:	bl	11f30 <close@plt>
   15e20:	ldr	r1, [pc, #80]	; 15e78 <__assert_fail@plt+0x3f30>
   15e24:	ldr	r0, [sp, #8]
   15e28:	bl	119fc <fdopen@plt>
   15e2c:	subs	r9, r0, #0
   15e30:	bne	15d90 <__assert_fail@plt+0x3e48>
   15e34:	bl	11d74 <__errno_location@plt>
   15e38:	mov	sl, r0
   15e3c:	ldr	r3, [r0]
   15e40:	str	r3, [sp, #4]
   15e44:	ldr	r0, [sp, #8]
   15e48:	bl	11f30 <close@plt>
   15e4c:	ldr	r3, [sp, #4]
   15e50:	str	r3, [sl]
   15e54:	b	15d90 <__assert_fail@plt+0x3e48>
   15e58:	mov	r5, r6
   15e5c:	mov	r0, r5
   15e60:	add	sp, sp, #20
   15e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e68:	strdeq	r2, [r2], -r0
   15e6c:	andeq	r5, r3, r0, ror #5
   15e70:	andeq	r2, r2, r4, lsl r6
   15e74:	andeq	r2, r2, r8, lsl r6
   15e78:	andeq	r2, r2, r4, asr #12
   15e7c:	push	{r4, r5, r6, r7, r8, lr}
   15e80:	sub	sp, sp, #16
   15e84:	mov	r6, r0
   15e88:	mov	r7, r1
   15e8c:	mov	r4, r2
   15e90:	mov	r8, r3
   15e94:	add	r2, sp, #12
   15e98:	mov	r1, r4
   15e9c:	bl	15c6c <__assert_fail@plt+0x3d24>
   15ea0:	mov	r5, r0
   15ea4:	cmp	r4, r0
   15ea8:	movls	r4, #0
   15eac:	movhi	r4, #1
   15eb0:	cmp	r0, #1
   15eb4:	movhi	r4, #0
   15eb8:	cmp	r4, #0
   15ebc:	bne	15ef0 <__assert_fail@plt+0x3fa8>
   15ec0:	ldr	r3, [sp, #12]
   15ec4:	str	r3, [sp, #4]
   15ec8:	ldr	r3, [sp, #40]	; 0x28
   15ecc:	str	r3, [sp]
   15ed0:	mov	r3, r8
   15ed4:	mov	r2, r0
   15ed8:	mov	r1, r7
   15edc:	mov	r0, r6
   15ee0:	bl	155f4 <__assert_fail@plt+0x36ac>
   15ee4:	mov	r0, r5
   15ee8:	add	sp, sp, #16
   15eec:	pop	{r4, r5, r6, r7, r8, pc}
   15ef0:	mov	r2, #5
   15ef4:	ldr	r1, [pc, #12]	; 15f08 <__assert_fail@plt+0x3fc0>
   15ef8:	mov	r0, #0
   15efc:	bl	11b58 <dcgettext@plt>
   15f00:	ldr	r1, [r6, r5, lsl #3]
   15f04:	bl	12bb8 <__assert_fail@plt+0xc70>
   15f08:	andeq	r2, r2, r4, asr r4
   15f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f10:	sub	sp, sp, #132	; 0x84
   15f14:	mov	r4, r0
   15f18:	mov	r5, r1
   15f1c:	mov	fp, r2
   15f20:	str	r3, [sp, #12]
   15f24:	ldr	r3, [pc, #1028]	; 16330 <__assert_fail@plt+0x43e8>
   15f28:	ldr	r3, [r3, #112]	; 0x70
   15f2c:	cmp	r2, r3
   15f30:	ldrhi	sl, [pc, #1016]	; 16330 <__assert_fail@plt+0x43e8>
   15f34:	strhi	r2, [sp, #8]
   15f38:	bhi	15f88 <__assert_fail@plt+0x4040>
   15f3c:	b	16088 <__assert_fail@plt+0x4140>
   15f40:	ldr	fp, [sp, #8]
   15f44:	mov	r7, #0
   15f48:	mov	r6, r7
   15f4c:	b	1600c <__assert_fail@plt+0x40c4>
   15f50:	ldr	r8, [sp, #8]
   15f54:	sub	r2, r8, r6
   15f58:	lsl	r2, r2, #3
   15f5c:	add	r1, r4, r6, lsl #3
   15f60:	add	r0, r4, r7, lsl #3
   15f64:	bl	11a80 <memmove@plt>
   15f68:	add	r5, r5, r7
   15f6c:	sub	r6, r7, r6
   15f70:	add	r3, r8, r6
   15f74:	mov	r2, r3
   15f78:	str	r3, [sp, #8]
   15f7c:	ldr	r3, [sl, #112]	; 0x70
   15f80:	cmp	r3, r2
   15f84:	bcs	16084 <__assert_fail@plt+0x413c>
   15f88:	ldr	r9, [sl, #112]	; 0x70
   15f8c:	ldr	r3, [sp, #8]
   15f90:	cmp	r9, r3
   15f94:	bhi	15f40 <__assert_fail@plt+0x3ff8>
   15f98:	mov	r8, r4
   15f9c:	mov	r7, #0
   15fa0:	mov	r6, r7
   15fa4:	mov	r1, #0
   15fa8:	add	r0, sp, #24
   15fac:	bl	13c5c <__assert_fail@plt+0x1d14>
   15fb0:	mov	r9, r0
   15fb4:	ldr	r1, [sl, #112]	; 0x70
   15fb8:	add	fp, r0, #9
   15fbc:	str	fp, [sp]
   15fc0:	ldr	r3, [sp, #24]
   15fc4:	mov	r2, r1
   15fc8:	cmp	r1, r5
   15fcc:	movcs	r1, r5
   15fd0:	add	r0, r4, r6, lsl #3
   15fd4:	bl	15e7c <__assert_fail@plt+0x3f34>
   15fd8:	cmp	r0, r5
   15fdc:	subls	r5, r5, r0
   15fe0:	subhi	r5, r5, r5
   15fe4:	str	fp, [r4, r7, lsl #3]
   15fe8:	str	r9, [r8, #4]
   15fec:	add	r6, r6, r0
   15ff0:	add	r7, r7, #1
   15ff4:	ldr	r3, [sp, #8]
   15ff8:	sub	fp, r3, r6
   15ffc:	ldr	r9, [sl, #112]	; 0x70
   16000:	add	r8, r8, #8
   16004:	cmp	fp, r9
   16008:	bcs	15fa4 <__assert_fail@plt+0x405c>
   1600c:	mov	r1, r9
   16010:	mov	r0, r7
   16014:	bl	21764 <_obstack_memory_used@@Base+0x280>
   16018:	sub	r1, r9, r1
   1601c:	cmp	r1, fp
   16020:	bcs	15f50 <__assert_fail@plt+0x4008>
   16024:	add	r8, fp, #1
   16028:	sub	r8, r8, r1
   1602c:	mov	r1, #0
   16030:	add	r0, sp, #24
   16034:	bl	13c5c <__assert_fail@plt+0x1d14>
   16038:	mov	fp, r0
   1603c:	add	r9, r0, #9
   16040:	str	r9, [sp]
   16044:	ldr	r3, [sp, #24]
   16048:	mov	r2, r8
   1604c:	cmp	r8, r5
   16050:	movcc	r1, r8
   16054:	movcs	r1, r5
   16058:	add	r0, r4, r6, lsl #3
   1605c:	bl	15e7c <__assert_fail@plt+0x3f34>
   16060:	cmp	r0, r5
   16064:	subls	r5, r5, r0
   16068:	subhi	r5, r5, r5
   1606c:	add	r3, r4, r7, lsl #3
   16070:	str	r9, [r4, r7, lsl #3]
   16074:	str	fp, [r3, #4]
   16078:	add	r7, r7, #1
   1607c:	add	r6, r6, r0
   16080:	b	15f50 <__assert_fail@plt+0x4008>
   16084:	mov	fp, r2
   16088:	cmp	r5, fp
   1608c:	bcs	161bc <__assert_fail@plt+0x4274>
   16090:	add	r9, r4, r5, lsl #3
   16094:	mov	r8, r5
   16098:	mov	r7, #0
   1609c:	mov	r6, r5
   160a0:	b	160e8 <__assert_fail@plt+0x41a0>
   160a4:	add	r2, sp, #24
   160a8:	ldr	r1, [r4, r8, lsl #3]
   160ac:	mov	r0, #3
   160b0:	bl	11f00 <__xstat64@plt>
   160b4:	cmp	r0, #0
   160b8:	bne	160d8 <__assert_fail@plt+0x4190>
   160bc:	b	1615c <__assert_fail@plt+0x4214>
   160c0:	cmp	r7, #0
   160c4:	beq	16188 <__assert_fail@plt+0x4240>
   160c8:	add	r3, r7, #9
   160cc:	str	r3, [r4, r8, lsl #3]
   160d0:	ldr	r3, [sp, #8]
   160d4:	str	r7, [r3, #4]
   160d8:	add	r8, r8, #1
   160dc:	add	r9, r9, #8
   160e0:	cmp	r8, fp
   160e4:	beq	161b8 <__assert_fail@plt+0x4270>
   160e8:	str	r9, [sp, #8]
   160ec:	ldr	r5, [r4, r8, lsl #3]
   160f0:	ldr	r1, [pc, #572]	; 16334 <__assert_fail@plt+0x43ec>
   160f4:	mov	r0, r5
   160f8:	bl	11a2c <strcmp@plt>
   160fc:	mov	sl, r0
   16100:	ldr	r3, [sp, #12]
   16104:	cmp	r3, #0
   16108:	beq	16130 <__assert_fail@plt+0x41e8>
   1610c:	mov	r1, r5
   16110:	mov	r0, r3
   16114:	bl	11a2c <strcmp@plt>
   16118:	adds	r3, sl, #0
   1611c:	movne	r3, #1
   16120:	cmp	r0, #0
   16124:	movne	r3, #0
   16128:	cmp	r3, #0
   1612c:	bne	160c0 <__assert_fail@plt+0x4178>
   16130:	bl	12c20 <__assert_fail@plt+0xcd8>
   16134:	subs	r5, r0, #0
   16138:	beq	161c8 <__assert_fail@plt+0x4280>
   1613c:	cmp	sl, #0
   16140:	bne	160a4 <__assert_fail@plt+0x415c>
   16144:	add	r2, sp, #24
   16148:	mov	r1, #0
   1614c:	mov	r0, #3
   16150:	bl	11bf4 <__fxstat64@plt>
   16154:	cmp	r0, #0
   16158:	bne	160d8 <__assert_fail@plt+0x4190>
   1615c:	ldrd	r2, [r5, #96]	; 0x60
   16160:	ldrd	r0, [sp, #120]	; 0x78
   16164:	cmp	r1, r3
   16168:	cmpeq	r0, r2
   1616c:	bne	160d8 <__assert_fail@plt+0x4190>
   16170:	ldrd	r0, [r5]
   16174:	ldrd	r2, [sp, #24]
   16178:	cmp	r3, r1
   1617c:	cmpeq	r2, r0
   16180:	bne	160d8 <__assert_fail@plt+0x4190>
   16184:	b	160c0 <__assert_fail@plt+0x4178>
   16188:	mov	r1, #0
   1618c:	add	r0, sp, #20
   16190:	bl	13c5c <__assert_fail@plt+0x1d14>
   16194:	mov	r7, r0
   16198:	add	r3, r0, #9
   1619c:	str	r3, [sp]
   161a0:	ldr	r3, [sp, #20]
   161a4:	mov	r2, #1
   161a8:	mov	r1, #0
   161ac:	ldr	r0, [sp, #8]
   161b0:	bl	15e7c <__assert_fail@plt+0x3f34>
   161b4:	b	160c8 <__assert_fail@plt+0x4180>
   161b8:	mov	r5, r6
   161bc:	add	r3, r4, #8
   161c0:	str	r3, [sp, #8]
   161c4:	b	162b0 <__assert_fail@plt+0x4368>
   161c8:	mov	r5, r6
   161cc:	b	161bc <__assert_fail@plt+0x4274>
   161d0:	ldr	r1, [pc, #352]	; 16338 <__assert_fail@plt+0x43f0>
   161d4:	ldr	r0, [sp, #12]
   161d8:	bl	12c84 <__assert_fail@plt+0xd3c>
   161dc:	cmp	r0, #0
   161e0:	bne	162ec <__assert_fail@plt+0x43a4>
   161e4:	bl	11d74 <__errno_location@plt>
   161e8:	ldr	r2, [r0]
   161ec:	cmp	fp, #2
   161f0:	movhi	r3, #0
   161f4:	movls	r3, #1
   161f8:	cmp	r2, #24
   161fc:	orrne	r3, r3, #1
   16200:	cmp	r3, #0
   16204:	bne	16318 <__assert_fail@plt+0x43d0>
   16208:	sub	r8, r6, #-536870911	; 0xe0000001
   1620c:	add	r8, r4, r8, lsl #3
   16210:	sub	r7, r6, #-1073741823	; 0xc0000001
   16214:	lsl	r7, r7, #2
   16218:	sub	r6, r6, #1
   1621c:	mov	sl, r8
   16220:	ldr	r1, [r4, r6, lsl #3]
   16224:	ldr	r3, [sp, #20]
   16228:	ldr	r0, [r3, r7]
   1622c:	bl	12df4 <__assert_fail@plt+0xeac>
   16230:	cmp	r6, #2
   16234:	movls	r1, #0
   16238:	movhi	r1, #1
   1623c:	add	r0, sp, #24
   16240:	bl	13c5c <__assert_fail@plt+0x1d14>
   16244:	sub	r8, r8, #8
   16248:	sub	r7, r7, #4
   1624c:	cmp	r0, #0
   16250:	beq	16218 <__assert_fail@plt+0x42d0>
   16254:	mov	r9, r0
   16258:	cmp	r5, r6
   1625c:	movcc	r7, r5
   16260:	movcs	r7, r6
   16264:	add	r8, r0, #9
   16268:	ldr	r3, [sp, #20]
   1626c:	str	r3, [sp, #4]
   16270:	str	r8, [sp]
   16274:	ldr	r3, [sp, #24]
   16278:	mov	r2, r6
   1627c:	mov	r1, r7
   16280:	mov	r0, r4
   16284:	bl	155f4 <__assert_fail@plt+0x36ac>
   16288:	str	r8, [r4]
   1628c:	str	r9, [r4, #4]
   16290:	sub	fp, fp, r6
   16294:	lsl	r2, fp, #3
   16298:	mov	r1, sl
   1629c:	ldr	r0, [sp, #8]
   162a0:	bl	11a80 <memmove@plt>
   162a4:	rsb	r7, r7, #1
   162a8:	add	r5, r5, r7
   162ac:	add	fp, fp, #1
   162b0:	add	r2, sp, #20
   162b4:	mov	r1, fp
   162b8:	mov	r0, r4
   162bc:	bl	15c6c <__assert_fail@plt+0x3d24>
   162c0:	mov	r6, r0
   162c4:	cmp	fp, r0
   162c8:	beq	161d0 <__assert_fail@plt+0x4288>
   162cc:	cmp	r0, #2
   162d0:	bhi	16208 <__assert_fail@plt+0x42c0>
   162d4:	mov	r2, #5
   162d8:	ldr	r1, [pc, #92]	; 1633c <__assert_fail@plt+0x43f4>
   162dc:	mov	r0, #0
   162e0:	bl	11b58 <dcgettext@plt>
   162e4:	ldr	r1, [r4, r6, lsl #3]
   162e8:	bl	12bb8 <__assert_fail@plt+0xc70>
   162ec:	mov	r3, r0
   162f0:	ldr	r2, [sp, #20]
   162f4:	str	r2, [sp, #4]
   162f8:	ldr	r2, [sp, #12]
   162fc:	str	r2, [sp]
   16300:	mov	r2, fp
   16304:	mov	r1, r5
   16308:	mov	r0, r4
   1630c:	bl	155f4 <__assert_fail@plt+0x36ac>
   16310:	add	sp, sp, #132	; 0x84
   16314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16318:	mov	r2, #5
   1631c:	ldr	r1, [pc, #24]	; 1633c <__assert_fail@plt+0x43f4>
   16320:	mov	r0, #0
   16324:	bl	11b58 <dcgettext@plt>
   16328:	ldr	r1, [sp, #12]
   1632c:	bl	12bb8 <__assert_fail@plt+0xc70>
   16330:	andeq	r5, r3, r4, ror #3
   16334:	andeq	r2, r2, r0, lsl #8
   16338:	andeq	r2, r2, r0, asr #11
   1633c:	andeq	r2, r2, r4, asr r4
   16340:	push	{lr}		; (str lr, [sp, #-4]!)
   16344:	sub	sp, sp, #60	; 0x3c
   16348:	subs	r6, r0, #0
   1634c:	beq	16388 <__assert_fail@plt+0x4440>
   16350:	ldr	r3, [pc, #1124]	; 167bc <__assert_fail@plt+0x4874>
   16354:	ldr	r4, [r3]
   16358:	mov	r2, #5
   1635c:	ldr	r1, [pc, #1116]	; 167c0 <__assert_fail@plt+0x4878>
   16360:	mov	r0, #0
   16364:	bl	11b58 <dcgettext@plt>
   16368:	ldr	r3, [pc, #1108]	; 167c4 <__assert_fail@plt+0x487c>
   1636c:	ldr	r3, [r3]
   16370:	mov	r2, r0
   16374:	mov	r1, #1
   16378:	mov	r0, r4
   1637c:	bl	11dd4 <__fprintf_chk@plt>
   16380:	mov	r0, r6
   16384:	bl	11d38 <exit@plt>
   16388:	mov	r2, #5
   1638c:	ldr	r1, [pc, #1076]	; 167c8 <__assert_fail@plt+0x4880>
   16390:	mov	r0, #0
   16394:	bl	11b58 <dcgettext@plt>
   16398:	ldr	r3, [pc, #1060]	; 167c4 <__assert_fail@plt+0x487c>
   1639c:	ldr	r2, [r3]
   163a0:	mov	r3, r2
   163a4:	mov	r1, r0
   163a8:	mov	r0, #1
   163ac:	bl	11db0 <__printf_chk@plt>
   163b0:	mov	r2, #5
   163b4:	ldr	r1, [pc, #1040]	; 167cc <__assert_fail@plt+0x4884>
   163b8:	mov	r0, #0
   163bc:	bl	11b58 <dcgettext@plt>
   163c0:	ldr	r4, [pc, #1032]	; 167d0 <__assert_fail@plt+0x4888>
   163c4:	ldr	r1, [r4]
   163c8:	bl	11a14 <fputs_unlocked@plt>
   163cc:	mov	r2, #5
   163d0:	ldr	r1, [pc, #1020]	; 167d4 <__assert_fail@plt+0x488c>
   163d4:	mov	r0, #0
   163d8:	bl	11b58 <dcgettext@plt>
   163dc:	ldr	r1, [r4]
   163e0:	bl	11a14 <fputs_unlocked@plt>
   163e4:	mov	r2, #5
   163e8:	ldr	r1, [pc, #1000]	; 167d8 <__assert_fail@plt+0x4890>
   163ec:	mov	r0, #0
   163f0:	bl	11b58 <dcgettext@plt>
   163f4:	ldr	r1, [r4]
   163f8:	bl	11a14 <fputs_unlocked@plt>
   163fc:	mov	r2, #5
   16400:	ldr	r1, [pc, #980]	; 167dc <__assert_fail@plt+0x4894>
   16404:	mov	r0, #0
   16408:	bl	11b58 <dcgettext@plt>
   1640c:	ldr	r1, [r4]
   16410:	bl	11a14 <fputs_unlocked@plt>
   16414:	mov	r2, #5
   16418:	ldr	r1, [pc, #960]	; 167e0 <__assert_fail@plt+0x4898>
   1641c:	mov	r0, #0
   16420:	bl	11b58 <dcgettext@plt>
   16424:	ldr	r1, [r4]
   16428:	bl	11a14 <fputs_unlocked@plt>
   1642c:	mov	r2, #5
   16430:	ldr	r1, [pc, #940]	; 167e4 <__assert_fail@plt+0x489c>
   16434:	mov	r0, #0
   16438:	bl	11b58 <dcgettext@plt>
   1643c:	ldr	r1, [r4]
   16440:	bl	11a14 <fputs_unlocked@plt>
   16444:	mov	r2, #5
   16448:	ldr	r1, [pc, #920]	; 167e8 <__assert_fail@plt+0x48a0>
   1644c:	mov	r0, #0
   16450:	bl	11b58 <dcgettext@plt>
   16454:	ldr	r1, [r4]
   16458:	bl	11a14 <fputs_unlocked@plt>
   1645c:	mov	r2, #5
   16460:	ldr	r1, [pc, #900]	; 167ec <__assert_fail@plt+0x48a4>
   16464:	mov	r0, #0
   16468:	bl	11b58 <dcgettext@plt>
   1646c:	ldr	r1, [r4]
   16470:	bl	11a14 <fputs_unlocked@plt>
   16474:	mov	r2, #5
   16478:	ldr	r1, [pc, #880]	; 167f0 <__assert_fail@plt+0x48a8>
   1647c:	mov	r0, #0
   16480:	bl	11b58 <dcgettext@plt>
   16484:	ldr	r1, [r4]
   16488:	bl	11a14 <fputs_unlocked@plt>
   1648c:	mov	r2, #5
   16490:	ldr	r1, [pc, #860]	; 167f4 <__assert_fail@plt+0x48ac>
   16494:	mov	r0, #0
   16498:	bl	11b58 <dcgettext@plt>
   1649c:	ldr	r1, [r4]
   164a0:	bl	11a14 <fputs_unlocked@plt>
   164a4:	mov	r2, #5
   164a8:	ldr	r1, [pc, #840]	; 167f8 <__assert_fail@plt+0x48b0>
   164ac:	mov	r0, #0
   164b0:	bl	11b58 <dcgettext@plt>
   164b4:	ldr	r1, [r4]
   164b8:	bl	11a14 <fputs_unlocked@plt>
   164bc:	mov	r2, #5
   164c0:	ldr	r1, [pc, #820]	; 167fc <__assert_fail@plt+0x48b4>
   164c4:	mov	r0, #0
   164c8:	bl	11b58 <dcgettext@plt>
   164cc:	ldr	r1, [r4]
   164d0:	bl	11a14 <fputs_unlocked@plt>
   164d4:	mov	r2, #5
   164d8:	ldr	r1, [pc, #800]	; 16800 <__assert_fail@plt+0x48b8>
   164dc:	mov	r0, #0
   164e0:	bl	11b58 <dcgettext@plt>
   164e4:	ldr	r1, [r4]
   164e8:	bl	11a14 <fputs_unlocked@plt>
   164ec:	mov	r2, #5
   164f0:	ldr	r1, [pc, #780]	; 16804 <__assert_fail@plt+0x48bc>
   164f4:	mov	r0, #0
   164f8:	bl	11b58 <dcgettext@plt>
   164fc:	ldr	r1, [r4]
   16500:	bl	11a14 <fputs_unlocked@plt>
   16504:	mov	r2, #5
   16508:	ldr	r1, [pc, #760]	; 16808 <__assert_fail@plt+0x48c0>
   1650c:	mov	r0, #0
   16510:	bl	11b58 <dcgettext@plt>
   16514:	ldr	r1, [r4]
   16518:	bl	11a14 <fputs_unlocked@plt>
   1651c:	mov	r2, #5
   16520:	ldr	r1, [pc, #740]	; 1680c <__assert_fail@plt+0x48c4>
   16524:	mov	r0, #0
   16528:	bl	11b58 <dcgettext@plt>
   1652c:	ldr	r2, [pc, #732]	; 16810 <__assert_fail@plt+0x48c8>
   16530:	mov	r1, r0
   16534:	mov	r0, #1
   16538:	bl	11db0 <__printf_chk@plt>
   1653c:	mov	r2, #5
   16540:	ldr	r1, [pc, #716]	; 16814 <__assert_fail@plt+0x48cc>
   16544:	mov	r0, #0
   16548:	bl	11b58 <dcgettext@plt>
   1654c:	ldr	r1, [r4]
   16550:	bl	11a14 <fputs_unlocked@plt>
   16554:	mov	r2, #5
   16558:	ldr	r1, [pc, #696]	; 16818 <__assert_fail@plt+0x48d0>
   1655c:	mov	r0, #0
   16560:	bl	11b58 <dcgettext@plt>
   16564:	ldr	r1, [r4]
   16568:	bl	11a14 <fputs_unlocked@plt>
   1656c:	mov	r2, #5
   16570:	ldr	r1, [pc, #676]	; 1681c <__assert_fail@plt+0x48d4>
   16574:	mov	r0, #0
   16578:	bl	11b58 <dcgettext@plt>
   1657c:	ldr	r1, [r4]
   16580:	bl	11a14 <fputs_unlocked@plt>
   16584:	mov	r2, #5
   16588:	ldr	r1, [pc, #656]	; 16820 <__assert_fail@plt+0x48d8>
   1658c:	mov	r0, #0
   16590:	bl	11b58 <dcgettext@plt>
   16594:	ldr	r1, [r4]
   16598:	bl	11a14 <fputs_unlocked@plt>
   1659c:	mov	r2, #5
   165a0:	ldr	r1, [pc, #636]	; 16824 <__assert_fail@plt+0x48dc>
   165a4:	mov	r0, #0
   165a8:	bl	11b58 <dcgettext@plt>
   165ac:	ldr	r1, [r4]
   165b0:	bl	11a14 <fputs_unlocked@plt>
   165b4:	mov	ip, sp
   165b8:	ldr	lr, [pc, #616]	; 16828 <__assert_fail@plt+0x48e0>
   165bc:	ldm	lr!, {r0, r1, r2, r3}
   165c0:	stmia	ip!, {r0, r1, r2, r3}
   165c4:	ldm	lr!, {r0, r1, r2, r3}
   165c8:	stmia	ip!, {r0, r1, r2, r3}
   165cc:	ldm	lr!, {r0, r1, r2, r3}
   165d0:	stmia	ip!, {r0, r1, r2, r3}
   165d4:	ldm	lr, {r0, r1}
   165d8:	stm	ip, {r0, r1}
   165dc:	ldr	r1, [sp]
   165e0:	cmp	r1, #0
   165e4:	moveq	r4, sp
   165e8:	beq	16610 <__assert_fail@plt+0x46c8>
   165ec:	mov	r4, sp
   165f0:	ldr	r5, [pc, #564]	; 1682c <__assert_fail@plt+0x48e4>
   165f4:	mov	r0, r5
   165f8:	bl	11a2c <strcmp@plt>
   165fc:	cmp	r0, #0
   16600:	beq	16610 <__assert_fail@plt+0x46c8>
   16604:	ldr	r1, [r4, #8]!
   16608:	cmp	r1, #0
   1660c:	bne	165f4 <__assert_fail@plt+0x46ac>
   16610:	ldr	r4, [r4, #4]
   16614:	cmp	r4, #0
   16618:	beq	1672c <__assert_fail@plt+0x47e4>
   1661c:	mov	r2, #5
   16620:	ldr	r1, [pc, #520]	; 16830 <__assert_fail@plt+0x48e8>
   16624:	mov	r0, #0
   16628:	bl	11b58 <dcgettext@plt>
   1662c:	ldr	r3, [pc, #512]	; 16834 <__assert_fail@plt+0x48ec>
   16630:	ldr	r2, [pc, #512]	; 16838 <__assert_fail@plt+0x48f0>
   16634:	mov	r1, r0
   16638:	mov	r0, #1
   1663c:	bl	11db0 <__printf_chk@plt>
   16640:	mov	r1, #0
   16644:	mov	r0, #5
   16648:	bl	11e28 <setlocale@plt>
   1664c:	cmp	r0, #0
   16650:	beq	16668 <__assert_fail@plt+0x4720>
   16654:	mov	r2, #3
   16658:	ldr	r1, [pc, #476]	; 1683c <__assert_fail@plt+0x48f4>
   1665c:	bl	11f0c <strncmp@plt>
   16660:	cmp	r0, #0
   16664:	bne	166c8 <__assert_fail@plt+0x4780>
   16668:	mov	r2, #5
   1666c:	ldr	r1, [pc, #460]	; 16840 <__assert_fail@plt+0x48f8>
   16670:	mov	r0, #0
   16674:	bl	11b58 <dcgettext@plt>
   16678:	ldr	r5, [pc, #428]	; 1682c <__assert_fail@plt+0x48e4>
   1667c:	mov	r3, r5
   16680:	ldr	r2, [pc, #428]	; 16834 <__assert_fail@plt+0x48ec>
   16684:	mov	r1, r0
   16688:	mov	r0, #1
   1668c:	bl	11db0 <__printf_chk@plt>
   16690:	mov	r2, #5
   16694:	ldr	r1, [pc, #424]	; 16844 <__assert_fail@plt+0x48fc>
   16698:	mov	r0, #0
   1669c:	bl	11b58 <dcgettext@plt>
   166a0:	mov	r1, r0
   166a4:	ldr	r2, [pc, #412]	; 16848 <__assert_fail@plt+0x4900>
   166a8:	ldr	r3, [pc, #412]	; 1684c <__assert_fail@plt+0x4904>
   166ac:	cmp	r4, r5
   166b0:	movne	r3, r2
   166b4:	mov	r2, r4
   166b8:	mov	r0, #1
   166bc:	bl	11db0 <__printf_chk@plt>
   166c0:	b	16380 <__assert_fail@plt+0x4438>
   166c4:	ldr	r4, [pc, #352]	; 1682c <__assert_fail@plt+0x48e4>
   166c8:	mov	r2, #5
   166cc:	ldr	r1, [pc, #380]	; 16850 <__assert_fail@plt+0x4908>
   166d0:	mov	r0, #0
   166d4:	bl	11b58 <dcgettext@plt>
   166d8:	ldr	r3, [pc, #240]	; 167d0 <__assert_fail@plt+0x4888>
   166dc:	ldr	r1, [r3]
   166e0:	bl	11a14 <fputs_unlocked@plt>
   166e4:	b	16668 <__assert_fail@plt+0x4720>
   166e8:	mov	r2, #5
   166ec:	ldr	r1, [pc, #332]	; 16840 <__assert_fail@plt+0x48f8>
   166f0:	mov	r0, #0
   166f4:	bl	11b58 <dcgettext@plt>
   166f8:	ldr	r4, [pc, #300]	; 1682c <__assert_fail@plt+0x48e4>
   166fc:	mov	r3, r4
   16700:	ldr	r2, [pc, #300]	; 16834 <__assert_fail@plt+0x48ec>
   16704:	mov	r1, r0
   16708:	mov	r0, #1
   1670c:	bl	11db0 <__printf_chk@plt>
   16710:	mov	r2, #5
   16714:	ldr	r1, [pc, #296]	; 16844 <__assert_fail@plt+0x48fc>
   16718:	mov	r0, #0
   1671c:	bl	11b58 <dcgettext@plt>
   16720:	mov	r1, r0
   16724:	ldr	r3, [pc, #288]	; 1684c <__assert_fail@plt+0x4904>
   16728:	b	166b4 <__assert_fail@plt+0x476c>
   1672c:	mov	r2, #5
   16730:	ldr	r1, [pc, #248]	; 16830 <__assert_fail@plt+0x48e8>
   16734:	mov	r0, #0
   16738:	bl	11b58 <dcgettext@plt>
   1673c:	ldr	r3, [pc, #240]	; 16834 <__assert_fail@plt+0x48ec>
   16740:	ldr	r2, [pc, #240]	; 16838 <__assert_fail@plt+0x48f0>
   16744:	mov	r1, r0
   16748:	mov	r0, #1
   1674c:	bl	11db0 <__printf_chk@plt>
   16750:	mov	r1, #0
   16754:	mov	r0, #5
   16758:	bl	11e28 <setlocale@plt>
   1675c:	cmp	r0, #0
   16760:	beq	166e8 <__assert_fail@plt+0x47a0>
   16764:	mov	r2, #3
   16768:	ldr	r1, [pc, #204]	; 1683c <__assert_fail@plt+0x48f4>
   1676c:	bl	11f0c <strncmp@plt>
   16770:	cmp	r0, #0
   16774:	bne	166c4 <__assert_fail@plt+0x477c>
   16778:	mov	r2, #5
   1677c:	ldr	r1, [pc, #188]	; 16840 <__assert_fail@plt+0x48f8>
   16780:	mov	r0, #0
   16784:	bl	11b58 <dcgettext@plt>
   16788:	ldr	r4, [pc, #156]	; 1682c <__assert_fail@plt+0x48e4>
   1678c:	mov	r3, r4
   16790:	ldr	r2, [pc, #156]	; 16834 <__assert_fail@plt+0x48ec>
   16794:	mov	r1, r0
   16798:	mov	r0, #1
   1679c:	bl	11db0 <__printf_chk@plt>
   167a0:	mov	r2, #5
   167a4:	ldr	r1, [pc, #152]	; 16844 <__assert_fail@plt+0x48fc>
   167a8:	mov	r0, #0
   167ac:	bl	11b58 <dcgettext@plt>
   167b0:	mov	r1, r0
   167b4:	ldr	r3, [pc, #144]	; 1684c <__assert_fail@plt+0x4904>
   167b8:	b	166b4 <__assert_fail@plt+0x476c>
   167bc:	andeq	r5, r3, r8, asr #5
   167c0:	andeq	r2, r2, r8, asr #12
   167c4:	ldrdeq	r5, [r3], -r0
   167c8:	andeq	r2, r2, r0, ror r6
   167cc:			; <UNDEFINED> instruction: 0x000226b8
   167d0:	ldrdeq	r5, [r3], -r4
   167d4:	strdeq	r2, [r2], -r8
   167d8:	andeq	r2, r2, r0, lsr r7
   167dc:	andeq	r2, r2, ip, ror r7
   167e0:	muleq	r2, r0, r7
   167e4:	andeq	r2, r2, ip, asr r8
   167e8:	andeq	r2, r2, r0, lsr r9
   167ec:	andeq	r2, r2, ip, ror r9
   167f0:	muleq	r2, r0, sl
   167f4:	andeq	r2, r2, r8, lsr #23
   167f8:			; <UNDEFINED> instruction: 0x00022bbc
   167fc:	andeq	r2, r2, r4, lsr ip
   16800:	andeq	r2, r2, ip, asr #26
   16804:	andeq	r2, r2, r8, lsr #29
   16808:	andeq	r2, r2, r8, lsr pc
   1680c:	andeq	r3, r2, r0, lsl r0
   16810:	ldrdeq	r3, [r2], -r8
   16814:	andeq	r3, r2, r0, ror #3
   16818:	andeq	r3, r2, r0, lsr #4
   1681c:	andeq	r3, r2, r0, asr r2
   16820:	andeq	r3, r2, r8, lsl #5
   16824:	andeq	r3, r2, r4, ror #9
   16828:	andeq	r2, r2, ip, asr #1
   1682c:	andeq	r3, r2, r4, lsl #30
   16830:	andeq	r3, r2, ip, asr #11
   16834:	andeq	r3, r2, r4, ror #11
   16838:	andeq	r3, r2, ip, lsl #12
   1683c:	andeq	r3, r2, ip, lsl r6
   16840:	andeq	r3, r2, r8, ror #12
   16844:	andeq	r3, r2, r4, lsl #13
   16848:			; <UNDEFINED> instruction: 0x00022bb8
   1684c:	ldrdeq	r3, [r2], -ip
   16850:	andeq	r3, r2, r0, lsr #12
   16854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16858:	vpush	{d8-d10}
   1685c:	sub	sp, sp, #572	; 0x23c
   16860:	str	r0, [sp, #16]
   16864:	mov	fp, r1
   16868:	ldr	r0, [pc, #952]	; 16c28 <__assert_fail@plt+0x4ce0>
   1686c:	bl	11cb4 <getenv@plt>
   16870:	str	r0, [sp, #56]	; 0x38
   16874:	adds	r3, r0, #0
   16878:	movne	r3, #1
   1687c:	str	r3, [sp, #28]
   16880:	bl	1c9b4 <__assert_fail@plt+0xaa6c>
   16884:	sub	r3, r0, #199680	; 0x30c00
   16888:	sub	r3, r3, #432	; 0x1b0
   1688c:	cmp	r3, #696	; 0x2b8
   16890:	movls	r3, #0
   16894:	movhi	r3, #1
   16898:	str	r3, [sp, #32]
   1689c:	ldr	r0, [fp]
   168a0:	bl	1ca18 <__assert_fail@plt+0xaad0>
   168a4:	ldr	r1, [pc, #1068]	; 16cd8 <__assert_fail@plt+0x4d90>
   168a8:	mov	r0, #6
   168ac:	bl	11e28 <setlocale@plt>
   168b0:	str	r0, [sp, #60]	; 0x3c
   168b4:	ldr	r4, [pc, #880]	; 16c2c <__assert_fail@plt+0x4ce4>
   168b8:	ldr	r1, [pc, #880]	; 16c30 <__assert_fail@plt+0x4ce8>
   168bc:	mov	r0, r4
   168c0:	bl	11edc <bindtextdomain@plt>
   168c4:	mov	r0, r4
   168c8:	bl	11bb8 <textdomain@plt>
   168cc:	mov	r5, #2
   168d0:	ldr	r3, [pc, #860]	; 16c34 <__assert_fail@plt+0x4cec>
   168d4:	str	r5, [r3]
   168d8:	mov	r0, #3
   168dc:	bl	1afd4 <__assert_fail@plt+0x908c>
   168e0:	ldr	r4, [pc, #1020]	; 16ce4 <__assert_fail@plt+0x4d9c>
   168e4:	strb	r0, [r4, #1316]	; 0x524
   168e8:	mov	r0, r5
   168ec:	bl	1afd4 <__assert_fail@plt+0x908c>
   168f0:	str	r0, [sp, #24]
   168f4:	strb	r0, [r4, #1500]	; 0x5dc
   168f8:	bl	11e7c <localeconv@plt>
   168fc:	ldr	r2, [r0]
   16900:	ldrb	r3, [r2]
   16904:	strb	r3, [r4, #260]	; 0x104
   16908:	cmp	r3, #0
   1690c:	beq	1691c <__assert_fail@plt+0x49d4>
   16910:	ldrb	r3, [r2, #1]
   16914:	cmp	r3, #0
   16918:	beq	16928 <__assert_fail@plt+0x49e0>
   1691c:	mov	r2, #46	; 0x2e
   16920:	ldr	r3, [pc, #956]	; 16ce4 <__assert_fail@plt+0x4d9c>
   16924:	strb	r2, [r3, #260]	; 0x104
   16928:	ldr	r2, [r0, #4]
   1692c:	ldrb	r3, [r2]
   16930:	ldr	r1, [pc, #940]	; 16ce4 <__assert_fail@plt+0x4d9c>
   16934:	str	r3, [r1, #256]	; 0x100
   16938:	cmp	r3, #0
   1693c:	beq	16954 <__assert_fail@plt+0x4a0c>
   16940:	ldrb	r3, [r2, #1]
   16944:	cmp	r3, #0
   16948:	beq	16960 <__assert_fail@plt+0x4a18>
   1694c:	mov	r2, #1
   16950:	strb	r2, [r1, #1501]	; 0x5dd
   16954:	mov	r2, #256	; 0x100
   16958:	ldr	r3, [pc, #900]	; 16ce4 <__assert_fail@plt+0x4d9c>
   1695c:	str	r2, [r3, #256]	; 0x100
   16960:	ldr	r5, [pc, #892]	; 16ce4 <__assert_fail@plt+0x4d9c>
   16964:	mov	r4, #0
   16968:	strb	r4, [r5, #1276]	; 0x4fc
   1696c:	bl	11d2c <__ctype_b_loc@plt>
   16970:	mov	r6, r0
   16974:	sub	r9, r5, #1
   16978:	add	r8, r5, #776	; 0x308
   1697c:	sub	r8, r8, #1
   16980:	add	r7, r5, #264	; 0x108
   16984:	sub	r7, r7, #1
   16988:	add	r5, r5, #520	; 0x208
   1698c:	sub	r5, r5, #1
   16990:	ldr	sl, [pc, #672]	; 16c38 <__assert_fail@plt+0x4cf0>
   16994:	b	169a8 <__assert_fail@plt+0x4a60>
   16998:	strb	r3, [r7, #1]!
   1699c:	add	r4, r4, #1
   169a0:	cmp	r4, #256	; 0x100
   169a4:	beq	16a2c <__assert_fail@plt+0x4ae4>
   169a8:	ldr	ip, [r6]
   169ac:	uxtb	r3, r4
   169b0:	lsl	r0, r3, #1
   169b4:	cmp	r3, #10
   169b8:	movne	r3, #0
   169bc:	moveq	r3, #1
   169c0:	ldrh	r2, [ip, r0]
   169c4:	and	r2, r2, #1
   169c8:	orr	r2, r3, r2
   169cc:	strb	r2, [r9, #1]!
   169d0:	lsl	r1, r4, #1
   169d4:	ldrh	r2, [ip, r1]
   169d8:	lsr	r2, r2, #14
   169dc:	eor	r2, r2, #1
   169e0:	and	r2, r2, #1
   169e4:	strb	r2, [r8, #1]!
   169e8:	ldr	r2, [r6]
   169ec:	ldrh	r1, [r2, r1]
   169f0:	tst	r1, #8
   169f4:	ldrheq	r2, [r2, r0]
   169f8:	andeq	r2, r2, #1
   169fc:	orreq	r3, r3, r2
   16a00:	eoreq	r3, r3, #1
   16a04:	movne	r3, #0
   16a08:	strb	r3, [r5, #1]!
   16a0c:	add	r3, r4, #128	; 0x80
   16a10:	cmp	r3, sl
   16a14:	movhi	r3, r4
   16a18:	bhi	16998 <__assert_fail@plt+0x4a50>
   16a1c:	bl	11d08 <__ctype_toupper_loc@plt>
   16a20:	ldr	r3, [r0]
   16a24:	ldr	r3, [r3, r4, lsl #2]
   16a28:	b	16998 <__assert_fail@plt+0x4a50>
   16a2c:	ldr	r3, [sp, #24]
   16a30:	cmp	r3, #0
   16a34:	beq	16aec <__assert_fail@plt+0x4ba4>
   16a38:	ldr	r7, [pc, #508]	; 16c3c <__assert_fail@plt+0x4cf4>
   16a3c:	mov	r9, #0
   16a40:	ldr	r8, [pc, #668]	; 16ce4 <__assert_fail@plt+0x4d9c>
   16a44:	ldr	sl, [pc, #500]	; 16c40 <__assert_fail@plt+0x4cf8>
   16a48:	b	16a5c <__assert_fail@plt+0x4b14>
   16a4c:	strb	r9, [r0, r4]
   16a50:	add	r7, r7, #1
   16a54:	cmp	r7, sl
   16a58:	beq	16ad8 <__assert_fail@plt+0x4b90>
   16a5c:	mov	r0, r7
   16a60:	bl	11e70 <nl_langinfo@plt>
   16a64:	mov	r5, r0
   16a68:	bl	11d50 <strlen@plt>
   16a6c:	mov	r4, r0
   16a70:	add	r0, r0, #1
   16a74:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   16a78:	ldr	r3, [pc, #452]	; 16c44 <__assert_fail@plt+0x4cfc>
   16a7c:	add	r3, r3, r7, lsl #3
   16a80:	sub	r3, r3, #1048576	; 0x100000
   16a84:	str	r0, [r3, #-112]	; 0xffffff90
   16a88:	sub	r2, r7, #131072	; 0x20000
   16a8c:	sub	r2, r2, #13
   16a90:	str	r2, [r3, #-108]	; 0xffffff94
   16a94:	cmp	r4, #0
   16a98:	beq	16a4c <__assert_fail@plt+0x4b04>
   16a9c:	ldr	ip, [r6]
   16aa0:	mov	r2, r5
   16aa4:	add	r5, r5, r4
   16aa8:	mov	r4, r9
   16aac:	ldrb	r3, [r2], #1
   16ab0:	lsl	r1, r3, #1
   16ab4:	ldrh	r1, [ip, r1]
   16ab8:	tst	r1, #1
   16abc:	addeq	r3, r8, r3
   16ac0:	ldrbeq	r3, [r3, #264]	; 0x108
   16ac4:	strbeq	r3, [r0, r4]
   16ac8:	addeq	r4, r4, #1
   16acc:	cmp	r2, r5
   16ad0:	bne	16aac <__assert_fail@plt+0x4b64>
   16ad4:	b	16a4c <__assert_fail@plt+0x4b04>
   16ad8:	ldr	r3, [pc, #360]	; 16c48 <__assert_fail@plt+0x4d00>
   16adc:	mov	r2, #8
   16ae0:	mov	r1, #12
   16ae4:	ldr	r0, [pc, #344]	; 16c44 <__assert_fail@plt+0x4cfc>
   16ae8:	bl	11ea0 <qsort@plt>
   16aec:	ldr	r0, [pc, #344]	; 16c4c <__assert_fail@plt+0x4d04>
   16af0:	bl	11e34 <sigemptyset@plt>
   16af4:	ldr	r8, [pc, #432]	; 16cac <__assert_fail@plt+0x4d64>
   16af8:	add	r5, r8, #320	; 0x140
   16afc:	add	r8, r8, #364	; 0x16c
   16b00:	mov	r4, r5
   16b04:	mov	r9, #0
   16b08:	ldr	sl, [pc, #316]	; 16c4c <__assert_fail@plt+0x4d04>
   16b0c:	b	16b18 <__assert_fail@plt+0x4bd0>
   16b10:	cmp	r8, r4
   16b14:	beq	16b48 <__assert_fail@plt+0x4c00>
   16b18:	ldr	r7, [r4, #4]!
   16b1c:	add	r2, sp, #184	; 0xb8
   16b20:	mov	r1, r9
   16b24:	mov	r0, r7
   16b28:	bl	11c00 <sigaction@plt>
   16b2c:	ldr	r3, [sp, #184]	; 0xb8
   16b30:	cmp	r3, #1
   16b34:	beq	16b10 <__assert_fail@plt+0x4bc8>
   16b38:	mov	r1, r7
   16b3c:	mov	r0, sl
   16b40:	bl	11ce4 <sigaddset@plt>
   16b44:	b	16b10 <__assert_fail@plt+0x4bc8>
   16b48:	ldr	r3, [pc, #256]	; 16c50 <__assert_fail@plt+0x4d08>
   16b4c:	str	r3, [sp, #184]	; 0xb8
   16b50:	mov	r2, #128	; 0x80
   16b54:	ldr	r1, [pc, #240]	; 16c4c <__assert_fail@plt+0x4d04>
   16b58:	add	r0, sp, #188	; 0xbc
   16b5c:	bl	11ac8 <memcpy@plt>
   16b60:	mov	r3, #0
   16b64:	str	r3, [sp, #316]	; 0x13c
   16b68:	ldr	r8, [pc, #220]	; 16c4c <__assert_fail@plt+0x4d04>
   16b6c:	mov	r9, r3
   16b70:	b	16b7c <__assert_fail@plt+0x4c34>
   16b74:	cmp	r5, r4
   16b78:	beq	16ba8 <__assert_fail@plt+0x4c60>
   16b7c:	ldr	r7, [r5, #4]!
   16b80:	mov	r1, r7
   16b84:	mov	r0, r8
   16b88:	bl	11bac <sigismember@plt>
   16b8c:	cmp	r0, #0
   16b90:	beq	16b74 <__assert_fail@plt+0x4c2c>
   16b94:	mov	r2, r9
   16b98:	add	r1, sp, #184	; 0xb8
   16b9c:	mov	r0, r7
   16ba0:	bl	11c00 <sigaction@plt>
   16ba4:	b	16b74 <__assert_fail@plt+0x4c2c>
   16ba8:	mov	r1, #0
   16bac:	mov	r0, #17
   16bb0:	bl	11b04 <signal@plt>
   16bb4:	ldr	r0, [pc, #152]	; 16c54 <__assert_fail@plt+0x4d0c>
   16bb8:	bl	21f9c <_obstack_memory_used@@Base+0xab8>
   16bbc:	add	r0, sp, #468	; 0x1d4
   16bc0:	bl	12ac0 <__assert_fail@plt+0xb78>
   16bc4:	mvn	r3, #0
   16bc8:	str	r3, [sp, #468]	; 0x1d4
   16bcc:	mov	r1, #4
   16bd0:	ldr	r0, [sp, #16]
   16bd4:	bl	1fd08 <__assert_fail@plt+0xddc0>
   16bd8:	str	r0, [sp, #24]
   16bdc:	mov	r7, #0
   16be0:	str	r7, [sp, #36]	; 0x24
   16be4:	str	r7, [sp, #40]	; 0x28
   16be8:	mov	r4, r7
   16bec:	str	r7, [sp, #52]	; 0x34
   16bf0:	str	r7, [sp, #48]	; 0x30
   16bf4:	str	r7, [sp, #44]	; 0x2c
   16bf8:	mov	r9, r7
   16bfc:	ldr	r5, [pc, #84]	; 16c58 <__assert_fail@plt+0x4d10>
   16c00:	ldr	sl, [pc, #164]	; 16cac <__assert_fail@plt+0x4d64>
   16c04:	vldr	d9, [pc, #12]	; 16c18 <__assert_fail@plt+0x4cd0>
   16c08:	vldr	d8, [pc, #16]	; 16c20 <__assert_fail@plt+0x4cd8>
   16c0c:	add	r3, sl, #940	; 0x3ac
   16c10:	str	r3, [sp, #72]	; 0x48
   16c14:	b	16d44 <__assert_fail@plt+0x4dfc>
   16c18:	andeq	r0, r0, r0
   16c1c:	subsmi	r0, r9, r0
   16c20:	andeq	r0, r0, r0
   16c24:	mvnsmi	r0, #0
   16c28:	andeq	r3, r2, r4, asr #13
   16c2c:	andeq	r3, r2, r0, lsl r6
   16c30:	ldrdeq	r3, [r2], -r4
   16c34:	andeq	r5, r3, r0, ror r2
   16c38:	andeq	r0, r0, pc, ror r1
   16c3c:	andeq	r0, r2, lr
   16c40:	andeq	r0, r2, sl, lsl r0
   16c44:	andeq	r5, r3, r8, ror #3
   16c48:	andeq	r2, r1, r4, lsr r9
   16c4c:	andeq	r5, r3, r8, ror #13
   16c50:	muleq	r1, ip, sl
   16c54:	andeq	r2, r1, r0, ror #20
   16c58:	andeq	r5, r3, r0, asr #5
   16c5c:	andeq	r0, r0, sl, lsl #2
   16c60:	andeq	r3, r2, ip, ror #13
   16c64:	andeq	r2, r2, r0, asr #6
   16c68:	andeq	r1, r0, r1, ror #2
   16c6c:	andeq	r2, r2, ip, lsl r4
   16c70:	andeq	r3, r2, r4, lsl #18
   16c74:	andeq	r3, r2, r4, asr #14
   16c78:	andeq	r5, r3, ip, ror #4
   16c7c:	andeq	r3, r2, ip, asr #14
   16c80:	andeq	r3, r2, r4, asr r7
   16c84:	andeq	r3, r2, r8, asr r7
   16c88:	andeq	r3, r2, r0, lsl #15
   16c8c:			; <UNDEFINED> instruction: 0x000237b8
   16c90:	ldrdeq	r3, [r2], -r4
   16c94:	andeq	r3, r2, r0, lsr #15
   16c98:	andeq	r3, r2, r8, lsl #14
   16c9c:	andeq	r3, r2, r4, lsr #14
   16ca0:	andeq	r3, r2, ip, lsr #16
   16ca4:	andeq	r3, r2, r8, asr #16
   16ca8:	strdeq	r3, [r2], -r0
   16cac:	andeq	r1, r2, r0, asr #31
   16cb0:	andeq	r3, r2, ip, lsl #16
   16cb4:	andeq	r3, r2, r8, lsr #16
   16cb8:	andeq	r3, r2, r8, ror r8
   16cbc:	muleq	r2, r8, r8
   16cc0:			; <UNDEFINED> instruction: 0x000238bc
   16cc4:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   16cc8:	ldrdeq	r3, [r2], -r8
   16ccc:	andeq	r3, r2, ip, asr #17
   16cd0:	ldrdeq	r3, [r2], -ip
   16cd4:	strdeq	r3, [r2], -r4
   16cd8:			; <UNDEFINED> instruction: 0x00022bb8
   16cdc:	andeq	r2, r2, r0, lsr r1
   16ce0:	andeq	r3, r2, r8, lsl #18
   16ce4:	andeq	r5, r3, r0, ror #5
   16ce8:	ldrdeq	r5, [r3], -r8
   16cec:	andeq	r5, r3, r4, ror #3
   16cf0:	andeq	r3, r2, ip, lsr #18
   16cf4:	andeq	r3, r2, r8, lsr r9
   16cf8:	andeq	r5, r3, r8, ror #4
   16cfc:	andeq	r3, r2, ip, lsl #12
   16d00:	andeq	r3, r2, r4, lsl #30
   16d04:	ldrdeq	r5, [r3], -r4
   16d08:	andeq	r3, r2, r8, asr #18
   16d0c:	andeq	r5, r3, r8, asr #5
   16d10:	andeq	r3, r2, ip, asr r9
   16d14:	andeq	r4, r2, ip, ror #5
   16d18:	andeq	r2, r2, r4, asr #12
   16d1c:	ldr	r3, [r5]
   16d20:	ldr	r2, [sp, #16]
   16d24:	cmp	r2, r3
   16d28:	ble	17c60 <__assert_fail@plt+0x5d18>
   16d2c:	add	r2, r3, #1
   16d30:	str	r2, [r5]
   16d34:	ldr	r3, [fp, r3, lsl #2]
   16d38:	ldr	r2, [sp, #24]
   16d3c:	str	r3, [r2, r4, lsl #2]
   16d40:	add	r4, r4, #1
   16d44:	mvn	r3, #0
   16d48:	str	r3, [sp, #96]	; 0x60
   16d4c:	cmp	r7, r3
   16d50:	beq	16d1c <__assert_fail@plt+0x4dd4>
   16d54:	ldr	r3, [sp, #28]
   16d58:	cmp	r4, #0
   16d5c:	moveq	r3, #0
   16d60:	andne	r3, r3, #1
   16d64:	cmp	r3, #0
   16d68:	beq	16dcc <__assert_fail@plt+0x4e84>
   16d6c:	ldr	r3, [sp, #32]
   16d70:	eor	r3, r3, #1
   16d74:	cmp	r9, #0
   16d78:	orrne	r3, r3, #1
   16d7c:	cmp	r3, #0
   16d80:	bne	16d1c <__assert_fail@plt+0x4dd4>
   16d84:	ldr	r3, [r5]
   16d88:	ldr	r2, [sp, #16]
   16d8c:	cmp	r2, r3
   16d90:	beq	17c60 <__assert_fail@plt+0x5d18>
   16d94:	ldr	r2, [fp, r3, lsl #2]
   16d98:	ldrb	r1, [r2]
   16d9c:	cmp	r1, #45	; 0x2d
   16da0:	bne	16d1c <__assert_fail@plt+0x4dd4>
   16da4:	ldrb	r1, [r2, #1]
   16da8:	cmp	r1, #111	; 0x6f
   16dac:	bne	16d1c <__assert_fail@plt+0x4dd4>
   16db0:	ldrb	r2, [r2, #2]
   16db4:	cmp	r2, #0
   16db8:	bne	16dcc <__assert_fail@plt+0x4e84>
   16dbc:	add	r3, r3, #1
   16dc0:	ldr	r2, [sp, #16]
   16dc4:	cmp	r2, r3
   16dc8:	beq	16d1c <__assert_fail@plt+0x4dd4>
   16dcc:	add	r3, sp, #96	; 0x60
   16dd0:	str	r3, [sp]
   16dd4:	add	r3, sl, #368	; 0x170
   16dd8:	add	r2, sl, #864	; 0x360
   16ddc:	mov	r1, fp
   16de0:	ldr	r0, [sp, #16]
   16de4:	bl	11d20 <getopt_long@plt>
   16de8:	mov	r7, r0
   16dec:	cmn	r0, #1
   16df0:	beq	16d1c <__assert_fail@plt+0x4dd4>
   16df4:	add	r3, r0, #3
   16df8:	ldr	r2, [pc, #-420]	; 16c5c <__assert_fail@plt+0x4d14>
   16dfc:	cmp	r3, r2
   16e00:	ldrls	pc, [pc, r3, lsl #2]
   16e04:	b	17c4c <__assert_fail@plt+0x5d04>
   16e08:	andeq	r7, r1, r0, lsl ip
   16e0c:	andeq	r7, r1, r8, lsl #24
   16e10:	andeq	r7, r1, ip, asr #24
   16e14:	andeq	r7, r1, ip, asr #24
   16e18:	andeq	r7, r1, r4, lsr r2
   16e1c:	andeq	r7, r1, ip, asr #24
   16e20:	andeq	r7, r1, ip, asr #24
   16e24:	andeq	r7, r1, ip, asr #24
   16e28:	andeq	r7, r1, ip, asr #24
   16e2c:	andeq	r7, r1, ip, asr #24
   16e30:	andeq	r7, r1, ip, asr #24
   16e34:	andeq	r7, r1, ip, asr #24
   16e38:	andeq	r7, r1, ip, asr #24
   16e3c:	andeq	r7, r1, ip, asr #24
   16e40:	andeq	r7, r1, ip, asr #24
   16e44:	andeq	r7, r1, ip, asr #24
   16e48:	andeq	r7, r1, ip, asr #24
   16e4c:	andeq	r7, r1, ip, asr #24
   16e50:	andeq	r7, r1, ip, asr #24
   16e54:	andeq	r7, r1, ip, asr #24
   16e58:	andeq	r7, r1, ip, asr #24
   16e5c:	andeq	r7, r1, ip, asr #24
   16e60:	andeq	r7, r1, ip, asr #24
   16e64:	andeq	r7, r1, ip, asr #24
   16e68:	andeq	r7, r1, ip, asr #24
   16e6c:	andeq	r7, r1, ip, asr #24
   16e70:	andeq	r7, r1, ip, asr #24
   16e74:	andeq	r7, r1, ip, asr #24
   16e78:	andeq	r7, r1, ip, asr #24
   16e7c:	andeq	r7, r1, ip, asr #24
   16e80:	andeq	r7, r1, ip, asr #24
   16e84:	andeq	r7, r1, ip, asr #24
   16e88:	andeq	r7, r1, ip, asr #24
   16e8c:	andeq	r7, r1, ip, asr #24
   16e90:	andeq	r7, r1, ip, asr #24
   16e94:	andeq	r7, r1, ip, asr #24
   16e98:	andeq	r7, r1, ip, asr #24
   16e9c:	andeq	r7, r1, ip, asr #24
   16ea0:	andeq	r7, r1, ip, asr #24
   16ea4:	andeq	r7, r1, ip, asr #24
   16ea8:	andeq	r7, r1, ip, asr #24
   16eac:	andeq	r7, r1, ip, asr #24
   16eb0:	andeq	r7, r1, ip, asr #24
   16eb4:	andeq	r7, r1, ip, asr #24
   16eb8:	andeq	r7, r1, ip, asr #24
   16ebc:	andeq	r7, r1, ip, asr #24
   16ec0:	andeq	r7, r1, ip, asr #24
   16ec4:	andeq	r7, r1, ip, asr #24
   16ec8:	andeq	r7, r1, ip, asr #24
   16ecc:	andeq	r7, r1, ip, asr #24
   16ed0:	andeq	r7, r1, ip, asr #24
   16ed4:	andeq	r7, r1, ip, asr #24
   16ed8:	andeq	r7, r1, ip, asr #24
   16edc:	andeq	r7, r1, ip, asr #24
   16ee0:	andeq	r7, r1, ip, asr #24
   16ee4:	andeq	r7, r1, ip, asr #24
   16ee8:	andeq	r7, r1, ip, asr #24
   16eec:	andeq	r7, r1, ip, asr #24
   16ef0:	andeq	r7, r1, ip, asr #24
   16ef4:	andeq	r7, r1, ip, asr #24
   16ef8:	andeq	r7, r1, ip, asr #24
   16efc:	andeq	r7, r1, ip, asr #24
   16f00:	andeq	r7, r1, ip, asr #24
   16f04:	andeq	r7, r1, ip, asr #24
   16f08:	andeq	r7, r1, ip, asr #24
   16f0c:	andeq	r7, r1, ip, asr #24
   16f10:	andeq	r7, r1, ip, asr #24
   16f14:	andeq	r7, r1, ip, asr #24
   16f18:	andeq	r7, r1, ip, asr #24
   16f1c:	andeq	r7, r1, ip, asr #24
   16f20:			; <UNDEFINED> instruction: 0x000174b8
   16f24:	andeq	r7, r1, ip, asr #24
   16f28:	andeq	r7, r1, ip, asr #24
   16f2c:	andeq	r7, r1, ip, asr #24
   16f30:	andeq	r7, r1, ip, asr #24
   16f34:	andeq	r7, r1, ip, asr #24
   16f38:	andeq	r7, r1, ip, asr #24
   16f3c:	andeq	r7, r1, ip, asr #24
   16f40:	andeq	r7, r1, ip, asr #24
   16f44:	andeq	r7, r1, ip, asr #24
   16f48:	andeq	r7, r1, r4, asr r4
   16f4c:	andeq	r7, r1, ip, asr #24
   16f50:	andeq	r7, r1, ip, asr #24
   16f54:	andeq	r7, r1, ip, asr #24
   16f58:	andeq	r7, r1, ip, asr #24
   16f5c:	andeq	r7, r1, r4, asr r4
   16f60:	strdeq	r7, [r1], -ip
   16f64:	andeq	r7, r1, ip, ror #21
   16f68:	andeq	r7, r1, ip, asr #24
   16f6c:	andeq	r7, r1, r4, asr r4
   16f70:	andeq	r7, r1, ip, asr #24
   16f74:	andeq	r7, r1, ip, asr #24
   16f78:	andeq	r7, r1, ip, asr #24
   16f7c:	andeq	r7, r1, ip, asr #24
   16f80:	andeq	r7, r1, ip, asr #24
   16f84:	andeq	r7, r1, ip, asr #24
   16f88:	andeq	r7, r1, ip, asr #24
   16f8c:	andeq	r7, r1, ip, asr #24
   16f90:	andeq	r7, r1, ip, asr #24
   16f94:	andeq	r7, r1, ip, asr #24
   16f98:	andeq	r7, r1, ip, asr #24
   16f9c:	andeq	r7, r1, r4, asr r4
   16fa0:			; <UNDEFINED> instruction: 0x000174b8
   16fa4:	andeq	r7, r1, r4, asr r4
   16fa8:	andeq	r7, r1, ip, asr #24
   16fac:	andeq	r7, r1, r4, asr r4
   16fb0:	andeq	r7, r1, r4, asr r4
   16fb4:	andeq	r7, r1, r4, asr r4
   16fb8:	andeq	r7, r1, r4, asr r4
   16fbc:	andeq	r7, r1, ip, asr #24
   16fc0:	andeq	r7, r1, r0, asr r5
   16fc4:	andeq	r7, r1, ip, asr #24
   16fc8:	andeq	r7, r1, r4, asr ip
   16fcc:	andeq	r7, r1, r4, asr r4
   16fd0:	andeq	r7, r1, ip, asr #16
   16fd4:	andeq	r7, r1, ip, asr #24
   16fd8:	andeq	r7, r1, ip, asr #24
   16fdc:	andeq	r7, r1, r4, asr r4
   16fe0:	andeq	r7, r1, ip, ror #17
   16fe4:	andeq	r7, r1, r0, lsr #20
   16fe8:	andeq	r7, r1, r8, lsr #23
   16fec:	andeq	r7, r1, ip, asr #24
   16ff0:	andeq	r7, r1, ip, asr #24
   16ff4:	andeq	r7, r1, ip, asr #24
   16ff8:			; <UNDEFINED> instruction: 0x00017bb8
   16ffc:	strdeq	r7, [r1], -r8
   17000:	andeq	r7, r1, ip, asr #24
   17004:	andeq	r7, r1, ip, asr #24
   17008:	andeq	r7, r1, ip, asr #24
   1700c:	andeq	r7, r1, ip, asr #24
   17010:	andeq	r7, r1, ip, asr #24
   17014:	andeq	r7, r1, ip, asr #24
   17018:	andeq	r7, r1, ip, asr #24
   1701c:	andeq	r7, r1, ip, asr #24
   17020:	andeq	r7, r1, ip, asr #24
   17024:	andeq	r7, r1, ip, asr #24
   17028:	andeq	r7, r1, ip, asr #24
   1702c:	andeq	r7, r1, ip, asr #24
   17030:	andeq	r7, r1, ip, asr #24
   17034:	andeq	r7, r1, ip, asr #24
   17038:	andeq	r7, r1, ip, asr #24
   1703c:	andeq	r7, r1, ip, asr #24
   17040:	andeq	r7, r1, ip, asr #24
   17044:	andeq	r7, r1, ip, asr #24
   17048:	andeq	r7, r1, ip, asr #24
   1704c:	andeq	r7, r1, ip, asr #24
   17050:	andeq	r7, r1, ip, asr #24
   17054:	andeq	r7, r1, ip, asr #24
   17058:	andeq	r7, r1, ip, asr #24
   1705c:	andeq	r7, r1, ip, asr #24
   17060:	andeq	r7, r1, ip, asr #24
   17064:	andeq	r7, r1, ip, asr #24
   17068:	andeq	r7, r1, ip, asr #24
   1706c:	andeq	r7, r1, ip, asr #24
   17070:	andeq	r7, r1, ip, asr #24
   17074:	andeq	r7, r1, ip, asr #24
   17078:	andeq	r7, r1, ip, asr #24
   1707c:	andeq	r7, r1, ip, asr #24
   17080:	andeq	r7, r1, ip, asr #24
   17084:	andeq	r7, r1, ip, asr #24
   17088:	andeq	r7, r1, ip, asr #24
   1708c:	andeq	r7, r1, ip, asr #24
   17090:	andeq	r7, r1, ip, asr #24
   17094:	andeq	r7, r1, ip, asr #24
   17098:	andeq	r7, r1, ip, asr #24
   1709c:	andeq	r7, r1, ip, asr #24
   170a0:	andeq	r7, r1, ip, asr #24
   170a4:	andeq	r7, r1, ip, asr #24
   170a8:	andeq	r7, r1, ip, asr #24
   170ac:	andeq	r7, r1, ip, asr #24
   170b0:	andeq	r7, r1, ip, asr #24
   170b4:	andeq	r7, r1, ip, asr #24
   170b8:	andeq	r7, r1, ip, asr #24
   170bc:	andeq	r7, r1, ip, asr #24
   170c0:	andeq	r7, r1, ip, asr #24
   170c4:	andeq	r7, r1, ip, asr #24
   170c8:	andeq	r7, r1, ip, asr #24
   170cc:	andeq	r7, r1, ip, asr #24
   170d0:	andeq	r7, r1, ip, asr #24
   170d4:	andeq	r7, r1, ip, asr #24
   170d8:	andeq	r7, r1, ip, asr #24
   170dc:	andeq	r7, r1, ip, asr #24
   170e0:	andeq	r7, r1, ip, asr #24
   170e4:	andeq	r7, r1, ip, asr #24
   170e8:	andeq	r7, r1, ip, asr #24
   170ec:	andeq	r7, r1, ip, asr #24
   170f0:	andeq	r7, r1, ip, asr #24
   170f4:	andeq	r7, r1, ip, asr #24
   170f8:	andeq	r7, r1, ip, asr #24
   170fc:	andeq	r7, r1, ip, asr #24
   17100:	andeq	r7, r1, ip, asr #24
   17104:	andeq	r7, r1, ip, asr #24
   17108:	andeq	r7, r1, ip, asr #24
   1710c:	andeq	r7, r1, ip, asr #24
   17110:	andeq	r7, r1, ip, asr #24
   17114:	andeq	r7, r1, ip, asr #24
   17118:	andeq	r7, r1, ip, asr #24
   1711c:	andeq	r7, r1, ip, asr #24
   17120:	andeq	r7, r1, ip, asr #24
   17124:	andeq	r7, r1, ip, asr #24
   17128:	andeq	r7, r1, ip, asr #24
   1712c:	andeq	r7, r1, ip, asr #24
   17130:	andeq	r7, r1, ip, asr #24
   17134:	andeq	r7, r1, ip, asr #24
   17138:	andeq	r7, r1, ip, asr #24
   1713c:	andeq	r7, r1, ip, asr #24
   17140:	andeq	r7, r1, ip, asr #24
   17144:	andeq	r7, r1, ip, asr #24
   17148:	andeq	r7, r1, ip, asr #24
   1714c:	andeq	r7, r1, ip, asr #24
   17150:	andeq	r7, r1, ip, asr #24
   17154:	andeq	r7, r1, ip, asr #24
   17158:	andeq	r7, r1, ip, asr #24
   1715c:	andeq	r7, r1, ip, asr #24
   17160:	andeq	r7, r1, ip, asr #24
   17164:	andeq	r7, r1, ip, asr #24
   17168:	andeq	r7, r1, ip, asr #24
   1716c:	andeq	r7, r1, ip, asr #24
   17170:	andeq	r7, r1, ip, asr #24
   17174:	andeq	r7, r1, ip, asr #24
   17178:	andeq	r7, r1, ip, asr #24
   1717c:	andeq	r7, r1, ip, asr #24
   17180:	andeq	r7, r1, ip, asr #24
   17184:	andeq	r7, r1, ip, asr #24
   17188:	andeq	r7, r1, ip, asr #24
   1718c:	andeq	r7, r1, ip, asr #24
   17190:	andeq	r7, r1, ip, asr #24
   17194:	andeq	r7, r1, ip, asr #24
   17198:	andeq	r7, r1, ip, asr #24
   1719c:	andeq	r7, r1, ip, asr #24
   171a0:	andeq	r7, r1, ip, asr #24
   171a4:	andeq	r7, r1, ip, asr #24
   171a8:	andeq	r7, r1, ip, asr #24
   171ac:	andeq	r7, r1, ip, asr #24
   171b0:	andeq	r7, r1, ip, asr #24
   171b4:	andeq	r7, r1, ip, asr #24
   171b8:	andeq	r7, r1, ip, asr #24
   171bc:	andeq	r7, r1, ip, asr #24
   171c0:	andeq	r7, r1, ip, asr #24
   171c4:	andeq	r7, r1, ip, asr #24
   171c8:	andeq	r7, r1, ip, asr #24
   171cc:	andeq	r7, r1, ip, asr #24
   171d0:	andeq	r7, r1, ip, asr #24
   171d4:	andeq	r7, r1, ip, asr #24
   171d8:	andeq	r7, r1, ip, asr #24
   171dc:	andeq	r7, r1, ip, asr #24
   171e0:	andeq	r7, r1, ip, asr #24
   171e4:	andeq	r7, r1, ip, asr #24
   171e8:	andeq	r7, r1, ip, asr #24
   171ec:	andeq	r7, r1, ip, asr #24
   171f0:	andeq	r7, r1, ip, asr #24
   171f4:	andeq	r7, r1, ip, asr #24
   171f8:	andeq	r7, r1, ip, asr #24
   171fc:	andeq	r7, r1, ip, asr #24
   17200:	andeq	r7, r1, ip, asr #24
   17204:	andeq	r7, r1, ip, asr #24
   17208:	andeq	r7, r1, ip, asr #24
   1720c:	andeq	r7, r1, ip, asr #24
   17210:	andeq	r7, r1, ip, asr #24
   17214:	andeq	r7, r1, r4, ror r4
   17218:	ldrdeq	r7, [r1], -r8
   1721c:	andeq	r7, r1, r0, lsr r5
   17220:	andeq	r7, r1, r0, asr #10
   17224:	andeq	r7, r1, r4, lsr #13
   17228:	muleq	r1, ip, r8
   1722c:	andeq	r7, r1, ip, lsl r4
   17230:	strdeq	r7, [r1], -ip
   17234:	ldr	r3, [pc, #-1364]	; 16ce8 <__assert_fail@plt+0x4da0>
   17238:	ldr	r3, [r3]
   1723c:	ldrb	r3, [r3]
   17240:	cmp	r3, #43	; 0x2b
   17244:	beq	17260 <__assert_fail@plt+0x5318>
   17248:	ldr	r3, [pc, #-1384]	; 16ce8 <__assert_fail@plt+0x4da0>
   1724c:	ldr	r3, [r3]
   17250:	ldr	r2, [sp, #24]
   17254:	str	r3, [r2, r4, lsl #2]
   17258:	add	r4, r4, #1
   1725c:	b	16d44 <__assert_fail@plt+0x4dfc>
   17260:	ldr	r3, [r5]
   17264:	ldr	r2, [sp, #16]
   17268:	cmp	r2, r3
   1726c:	moveq	r3, #0
   17270:	beq	17288 <__assert_fail@plt+0x5340>
   17274:	ldr	r3, [fp, r3, lsl #2]
   17278:	ldrb	r2, [r3]
   1727c:	cmp	r2, #45	; 0x2d
   17280:	movne	r3, #0
   17284:	beq	17354 <__assert_fail@plt+0x540c>
   17288:	str	r3, [sp, #76]	; 0x4c
   1728c:	ldr	r2, [sp, #56]	; 0x38
   17290:	cmp	r2, #0
   17294:	movne	r3, #0
   17298:	andeq	r3, r3, #1
   1729c:	ldr	r2, [sp, #32]
   172a0:	orrs	r3, r2, r3
   172a4:	str	r3, [sp, #32]
   172a8:	beq	17248 <__assert_fail@plt+0x5300>
   172ac:	add	r0, sp, #508	; 0x1fc
   172b0:	bl	12ac0 <__assert_fail@plt+0xb78>
   172b4:	mov	r8, r0
   172b8:	ldr	r3, [pc, #-1496]	; 16ce8 <__assert_fail@plt+0x4da0>
   172bc:	ldr	r0, [r3]
   172c0:	mov	r2, #0
   172c4:	mov	r1, r8
   172c8:	add	r0, r0, #1
   172cc:	bl	12ae4 <__assert_fail@plt+0xb9c>
   172d0:	cmp	r0, #0
   172d4:	beq	1960c <__assert_fail@plt+0x76c4>
   172d8:	ldrb	r3, [r0]
   172dc:	cmp	r3, #46	; 0x2e
   172e0:	beq	1736c <__assert_fail@plt+0x5424>
   172e4:	ldr	r3, [r8]
   172e8:	cmp	r3, #0
   172ec:	beq	17388 <__assert_fail@plt+0x5440>
   172f0:	mov	r2, #0
   172f4:	mov	r1, r8
   172f8:	bl	127e0 <__assert_fail@plt+0x898>
   172fc:	ldrb	r3, [r0]
   17300:	cmp	r3, #0
   17304:	bne	17248 <__assert_fail@plt+0x5300>
   17308:	ldr	r3, [sp, #76]	; 0x4c
   1730c:	cmp	r3, #0
   17310:	beq	17400 <__assert_fail@plt+0x54b8>
   17314:	ldr	r3, [r5]
   17318:	add	r2, r3, #1
   1731c:	str	r2, [r5]
   17320:	ldr	r3, [fp, r3, lsl #2]
   17324:	str	r3, [sp, #76]	; 0x4c
   17328:	ldr	r2, [pc, #-1744]	; 16c60 <__assert_fail@plt+0x4d18>
   1732c:	add	r1, r8, #8
   17330:	add	r0, r3, #1
   17334:	bl	12ae4 <__assert_fail@plt+0xb9c>
   17338:	cmp	r0, #0
   1733c:	bne	173a4 <__assert_fail@plt+0x545c>
   17340:	ldr	r3, [pc, #-1764]	; 16c64 <__assert_fail@plt+0x4d1c>
   17344:	ldr	r2, [pc, #-1764]	; 16c68 <__assert_fail@plt+0x4d20>
   17348:	ldr	r1, [pc, #-1764]	; 16c6c <__assert_fail@plt+0x4d24>
   1734c:	ldr	r0, [pc, #-1764]	; 16c70 <__assert_fail@plt+0x4d28>
   17350:	bl	11f48 <__assert_fail@plt>
   17354:	ldrb	r3, [r3, #1]
   17358:	sub	r3, r3, #48	; 0x30
   1735c:	cmp	r3, #9
   17360:	movhi	r3, #0
   17364:	movls	r3, #1
   17368:	b	17288 <__assert_fail@plt+0x5340>
   1736c:	mov	r2, #0
   17370:	add	r1, r8, #4
   17374:	add	r0, r0, #1
   17378:	bl	12ae4 <__assert_fail@plt+0xb9c>
   1737c:	ldr	r3, [r8]
   17380:	cmp	r3, #0
   17384:	bne	17398 <__assert_fail@plt+0x5450>
   17388:	ldr	r3, [r8, #4]
   1738c:	cmp	r3, #0
   17390:	mvneq	r3, #0
   17394:	streq	r3, [r8]
   17398:	cmp	r0, #0
   1739c:	beq	17248 <__assert_fail@plt+0x5300>
   173a0:	b	172f0 <__assert_fail@plt+0x53a8>
   173a4:	ldrb	r3, [r0]
   173a8:	cmp	r3, #46	; 0x2e
   173ac:	bne	173c0 <__assert_fail@plt+0x5478>
   173b0:	ldr	r2, [pc, #-1824]	; 16c98 <__assert_fail@plt+0x4d50>
   173b4:	add	r1, r8, #12
   173b8:	add	r0, r0, #1
   173bc:	bl	12ae4 <__assert_fail@plt+0xb9c>
   173c0:	ldr	r3, [r8, #12]
   173c4:	cmp	r3, #0
   173c8:	bne	173dc <__assert_fail@plt+0x5494>
   173cc:	ldr	r3, [r8, #8]
   173d0:	cmp	r3, #0
   173d4:	subne	r3, r3, #1
   173d8:	strne	r3, [r8, #8]
   173dc:	mov	r2, #1
   173e0:	mov	r1, r8
   173e4:	bl	127e0 <__assert_fail@plt+0x898>
   173e8:	ldrb	r3, [r0]
   173ec:	cmp	r3, #0
   173f0:	beq	17400 <__assert_fail@plt+0x54b8>
   173f4:	ldr	r1, [pc, #-1888]	; 16c9c <__assert_fail@plt+0x4d54>
   173f8:	ldr	r0, [sp, #76]	; 0x4c
   173fc:	bl	12978 <__assert_fail@plt+0xa30>
   17400:	mov	r3, #1
   17404:	strb	r3, [r8, #33]	; 0x21
   17408:	mov	r0, r8
   1740c:	bl	12e78 <__assert_fail@plt+0xf30>
   17410:	cmp	r8, #0
   17414:	bne	16d44 <__assert_fail@plt+0x4dfc>
   17418:	b	17248 <__assert_fail@plt+0x5300>
   1741c:	mov	r3, #1
   17420:	str	r3, [sp, #8]
   17424:	ldr	r2, [pc, #-1972]	; 16c78 <__assert_fail@plt+0x4d30>
   17428:	ldr	r2, [r2]
   1742c:	str	r2, [sp, #4]
   17430:	str	r3, [sp]
   17434:	add	r3, sl, #904	; 0x388
   17438:	add	r2, sl, #912	; 0x390
   1743c:	ldr	r1, [pc, #-1884]	; 16ce8 <__assert_fail@plt+0x4da0>
   17440:	ldr	r1, [r1]
   17444:	ldr	r0, [pc, #-2008]	; 16c74 <__assert_fail@plt+0x4d2c>
   17448:	bl	19948 <__assert_fail@plt+0x7a00>
   1744c:	add	r0, sl, r0
   17450:	ldrb	r7, [r0, #904]	; 0x388
   17454:	strb	r7, [sp, #184]	; 0xb8
   17458:	mov	r3, #0
   1745c:	strb	r3, [sp, #185]	; 0xb9
   17460:	mov	r2, #2
   17464:	add	r1, sp, #468	; 0x1d4
   17468:	add	r0, sp, #184	; 0xb8
   1746c:	bl	127e0 <__assert_fail@plt+0x898>
   17470:	b	16d44 <__assert_fail@plt+0x4dfc>
   17474:	ldr	r3, [pc, #-1940]	; 16ce8 <__assert_fail@plt+0x4da0>
   17478:	ldr	r1, [r3]
   1747c:	cmp	r1, #0
   17480:	moveq	r7, #99	; 0x63
   17484:	beq	174b8 <__assert_fail@plt+0x5570>
   17488:	mov	r3, #1
   1748c:	str	r3, [sp, #8]
   17490:	ldr	r2, [pc, #-2080]	; 16c78 <__assert_fail@plt+0x4d30>
   17494:	ldr	r2, [r2]
   17498:	str	r2, [sp, #4]
   1749c:	str	r3, [sp]
   174a0:	ldr	r3, [sp, #72]	; 0x48
   174a4:	add	r2, sl, #944	; 0x3b0
   174a8:	ldr	r0, [pc, #-2100]	; 16c7c <__assert_fail@plt+0x4d34>
   174ac:	bl	19948 <__assert_fail@plt+0x7a00>
   174b0:	add	r0, sl, r0
   174b4:	ldrb	r7, [r0, #940]	; 0x3ac
   174b8:	cmp	r9, #0
   174bc:	beq	174c8 <__assert_fail@plt+0x5580>
   174c0:	cmp	r7, r9
   174c4:	bne	174d0 <__assert_fail@plt+0x5588>
   174c8:	uxtb	r9, r7
   174cc:	b	16d44 <__assert_fail@plt+0x4dfc>
   174d0:	ldr	r0, [pc, #-2136]	; 16c80 <__assert_fail@plt+0x4d38>
   174d4:	bl	12948 <__assert_fail@plt+0xa00>
   174d8:	ldr	r3, [pc, #-2044]	; 16ce4 <__assert_fail@plt+0x4d9c>
   174dc:	ldr	r0, [r3, #1304]	; 0x518
   174e0:	cmp	r0, #0
   174e4:	beq	174fc <__assert_fail@plt+0x55b4>
   174e8:	ldr	r3, [pc, #-2056]	; 16ce8 <__assert_fail@plt+0x4da0>
   174ec:	ldr	r1, [r3]
   174f0:	bl	11a2c <strcmp@plt>
   174f4:	cmp	r0, #0
   174f8:	bne	17510 <__assert_fail@plt+0x55c8>
   174fc:	ldr	r3, [pc, #-2076]	; 16ce8 <__assert_fail@plt+0x4da0>
   17500:	ldr	r2, [r3]
   17504:	ldr	r3, [pc, #-2088]	; 16ce4 <__assert_fail@plt+0x4d9c>
   17508:	str	r2, [r3, #1304]	; 0x518
   1750c:	b	16d44 <__assert_fail@plt+0x4dfc>
   17510:	mov	r2, #5
   17514:	ldr	r1, [pc, #-2200]	; 16c84 <__assert_fail@plt+0x4d3c>
   17518:	mov	r0, #0
   1751c:	bl	11b58 <dcgettext@plt>
   17520:	mov	r2, r0
   17524:	mov	r1, #0
   17528:	mov	r0, #2
   1752c:	bl	11c90 <error@plt>
   17530:	mov	r2, #1
   17534:	ldr	r3, [pc, #-2136]	; 16ce4 <__assert_fail@plt+0x4d9c>
   17538:	strb	r2, [r3, #1296]	; 0x510
   1753c:	b	16d44 <__assert_fail@plt+0x4dfc>
   17540:	ldr	r3, [pc, #-2144]	; 16ce8 <__assert_fail@plt+0x4da0>
   17544:	ldr	r3, [r3]
   17548:	str	r3, [sp, #40]	; 0x28
   1754c:	b	16d44 <__assert_fail@plt+0x4dfc>
   17550:	add	r0, sp, #508	; 0x1fc
   17554:	bl	12ac0 <__assert_fail@plt+0xb78>
   17558:	mov	r8, r0
   1755c:	ldr	r2, [pc, #-2268]	; 16c88 <__assert_fail@plt+0x4d40>
   17560:	mov	r1, r0
   17564:	ldr	r3, [pc, #-2180]	; 16ce8 <__assert_fail@plt+0x4da0>
   17568:	ldr	r0, [r3]
   1756c:	bl	12ae4 <__assert_fail@plt+0xb9c>
   17570:	ldr	r3, [r8]
   17574:	sub	r2, r3, #1
   17578:	str	r2, [r8]
   1757c:	cmp	r3, #0
   17580:	beq	175ec <__assert_fail@plt+0x56a4>
   17584:	ldrb	r3, [r0]
   17588:	cmp	r3, #46	; 0x2e
   1758c:	beq	175fc <__assert_fail@plt+0x56b4>
   17590:	ldr	r3, [r8]
   17594:	cmp	r3, #0
   17598:	bne	175ac <__assert_fail@plt+0x5664>
   1759c:	ldr	r3, [r8, #4]
   175a0:	cmp	r3, #0
   175a4:	mvneq	r3, #0
   175a8:	streq	r3, [r8]
   175ac:	mov	r2, #0
   175b0:	mov	r1, r8
   175b4:	bl	127e0 <__assert_fail@plt+0x898>
   175b8:	ldrb	r3, [r0]
   175bc:	cmp	r3, #44	; 0x2c
   175c0:	beq	17630 <__assert_fail@plt+0x56e8>
   175c4:	mvn	r3, #0
   175c8:	str	r3, [r8, #8]
   175cc:	mov	r3, #0
   175d0:	str	r3, [r8, #12]
   175d4:	ldrb	r3, [r0]
   175d8:	cmp	r3, #0
   175dc:	bne	17694 <__assert_fail@plt+0x574c>
   175e0:	mov	r0, r8
   175e4:	bl	12e78 <__assert_fail@plt+0xf30>
   175e8:	b	16d44 <__assert_fail@plt+0x4dfc>
   175ec:	ldr	r1, [pc, #-2400]	; 16c94 <__assert_fail@plt+0x4d4c>
   175f0:	ldr	r3, [pc, #-2320]	; 16ce8 <__assert_fail@plt+0x4da0>
   175f4:	ldr	r0, [r3]
   175f8:	bl	12978 <__assert_fail@plt+0xa30>
   175fc:	ldr	r2, [pc, #-2412]	; 16c98 <__assert_fail@plt+0x4d50>
   17600:	add	r1, r8, #4
   17604:	add	r0, r0, #1
   17608:	bl	12ae4 <__assert_fail@plt+0xb9c>
   1760c:	ldr	r3, [r8, #4]
   17610:	sub	r2, r3, #1
   17614:	str	r2, [r8, #4]
   17618:	cmp	r3, #0
   1761c:	bne	17590 <__assert_fail@plt+0x5648>
   17620:	ldr	r1, [pc, #-2460]	; 16c8c <__assert_fail@plt+0x4d44>
   17624:	ldr	r3, [pc, #-2372]	; 16ce8 <__assert_fail@plt+0x4da0>
   17628:	ldr	r0, [r3]
   1762c:	bl	12978 <__assert_fail@plt+0xa30>
   17630:	ldr	r2, [pc, #-2472]	; 16c90 <__assert_fail@plt+0x4d48>
   17634:	add	r1, r8, #8
   17638:	add	r0, r0, #1
   1763c:	bl	12ae4 <__assert_fail@plt+0xb9c>
   17640:	ldr	r3, [r8, #8]
   17644:	sub	r2, r3, #1
   17648:	str	r2, [r8, #8]
   1764c:	cmp	r3, #0
   17650:	beq	17670 <__assert_fail@plt+0x5728>
   17654:	ldrb	r3, [r0]
   17658:	cmp	r3, #46	; 0x2e
   1765c:	beq	17680 <__assert_fail@plt+0x5738>
   17660:	mov	r2, #1
   17664:	mov	r1, r8
   17668:	bl	127e0 <__assert_fail@plt+0x898>
   1766c:	b	175d4 <__assert_fail@plt+0x568c>
   17670:	ldr	r1, [pc, #-2532]	; 16c94 <__assert_fail@plt+0x4d4c>
   17674:	ldr	r3, [pc, #-2452]	; 16ce8 <__assert_fail@plt+0x4da0>
   17678:	ldr	r0, [r3]
   1767c:	bl	12978 <__assert_fail@plt+0xa30>
   17680:	ldr	r2, [pc, #-2544]	; 16c98 <__assert_fail@plt+0x4d50>
   17684:	add	r1, r8, #12
   17688:	add	r0, r0, #1
   1768c:	bl	12ae4 <__assert_fail@plt+0xb9c>
   17690:	b	17660 <__assert_fail@plt+0x5718>
   17694:	ldr	r1, [pc, #-2560]	; 16c9c <__assert_fail@plt+0x4d54>
   17698:	ldr	r3, [pc, #-2488]	; 16ce8 <__assert_fail@plt+0x4da0>
   1769c:	ldr	r0, [r3]
   176a0:	bl	12978 <__assert_fail@plt+0xa30>
   176a4:	ldr	r8, [sp, #96]	; 0x60
   176a8:	ldr	r3, [pc, #-2504]	; 16ce8 <__assert_fail@plt+0x4da0>
   176ac:	ldr	r3, [r3]
   176b0:	mov	r0, r3
   176b4:	str	r3, [sp, #76]	; 0x4c
   176b8:	ldr	r3, [pc, #-2536]	; 16cd8 <__assert_fail@plt+0x4d90>
   176bc:	str	r3, [sp]
   176c0:	add	r3, sp, #120	; 0x78
   176c4:	mov	r2, #10
   176c8:	mov	r1, #0
   176cc:	bl	20594 <__assert_fail@plt+0xe64c>
   176d0:	str	r0, [sp, #88]	; 0x58
   176d4:	add	r1, sp, #184	; 0xb8
   176d8:	mov	r0, #7
   176dc:	bl	11b94 <getrlimit64@plt>
   176e0:	cmp	r0, #0
   176e4:	ldreq	ip, [sp, #184]	; 0xb8
   176e8:	subeq	ip, ip, #3
   176ec:	movne	ip, #17
   176f0:	ldr	r3, [sp, #88]	; 0x58
   176f4:	cmp	r3, #0
   176f8:	bne	17820 <__assert_fail@plt+0x58d8>
   176fc:	ldrd	r2, [sp, #120]	; 0x78
   17700:	ldr	r1, [pc, #-2588]	; 16cec <__assert_fail@plt+0x4da4>
   17704:	str	r2, [r1, #112]	; 0x70
   17708:	mov	r1, #0
   1770c:	cmp	r3, r1
   17710:	cmpeq	r2, r2
   17714:	beq	17794 <__assert_fail@plt+0x584c>
   17718:	mov	r6, ip
   1771c:	mov	r2, #5
   17720:	ldr	r1, [pc, #-2696]	; 16ca0 <__assert_fail@plt+0x4d58>
   17724:	mov	r0, #0
   17728:	bl	11b58 <dcgettext@plt>
   1772c:	mov	r5, r0
   17730:	ldr	r3, [pc, #-2700]	; 16cac <__assert_fail@plt+0x4d64>
   17734:	add	r8, r3, r8, lsl #4
   17738:	ldr	r4, [r8, #368]	; 0x170
   1773c:	ldr	r0, [sp, #76]	; 0x4c
   17740:	bl	1e568 <__assert_fail@plt+0xc620>
   17744:	str	r0, [sp]
   17748:	mov	r3, r4
   1774c:	mov	r2, r5
   17750:	mov	r1, #0
   17754:	mov	r0, r1
   17758:	bl	11c90 <error@plt>
   1775c:	mov	r2, #5
   17760:	ldr	r1, [pc, #-2756]	; 16ca4 <__assert_fail@plt+0x4d5c>
   17764:	mov	r0, #0
   17768:	bl	11b58 <dcgettext@plt>
   1776c:	mov	r5, r0
   17770:	add	r1, sp, #152	; 0x98
   17774:	mov	r0, r6
   17778:	bl	1c23c <__assert_fail@plt+0xa2f4>
   1777c:	str	r0, [sp]
   17780:	mov	r3, r4
   17784:	mov	r2, r5
   17788:	mov	r1, #0
   1778c:	mov	r0, #2
   17790:	bl	11c90 <error@plt>
   17794:	cmp	r2, #1
   17798:	bls	177ac <__assert_fail@plt+0x5864>
   1779c:	cmp	r2, ip
   177a0:	bls	16d44 <__assert_fail@plt+0x4dfc>
   177a4:	mov	r6, ip
   177a8:	b	1771c <__assert_fail@plt+0x57d4>
   177ac:	mov	r2, #5
   177b0:	ldr	r1, [pc, #-2832]	; 16ca8 <__assert_fail@plt+0x4d60>
   177b4:	mov	r0, #0
   177b8:	bl	11b58 <dcgettext@plt>
   177bc:	mov	r5, r0
   177c0:	ldr	r3, [pc, #-2844]	; 16cac <__assert_fail@plt+0x4d64>
   177c4:	add	r8, r3, r8, lsl #4
   177c8:	ldr	r4, [r8, #368]	; 0x170
   177cc:	ldr	r0, [sp, #76]	; 0x4c
   177d0:	bl	1e568 <__assert_fail@plt+0xc620>
   177d4:	str	r0, [sp]
   177d8:	mov	r3, r4
   177dc:	mov	r2, r5
   177e0:	mov	r1, #0
   177e4:	mov	r0, r1
   177e8:	bl	11c90 <error@plt>
   177ec:	mov	r2, #5
   177f0:	ldr	r1, [pc, #-2888]	; 16cb0 <__assert_fail@plt+0x4d68>
   177f4:	mov	r0, #0
   177f8:	bl	11b58 <dcgettext@plt>
   177fc:	mov	r5, r0
   17800:	ldr	r0, [pc, #-2900]	; 16cb4 <__assert_fail@plt+0x4d6c>
   17804:	bl	1e568 <__assert_fail@plt+0xc620>
   17808:	str	r0, [sp]
   1780c:	mov	r3, r4
   17810:	mov	r2, r5
   17814:	mov	r1, #0
   17818:	mov	r0, #2
   1781c:	bl	11c90 <error@plt>
   17820:	mov	r6, ip
   17824:	ldr	r3, [sp, #88]	; 0x58
   17828:	cmp	r3, #1
   1782c:	beq	1771c <__assert_fail@plt+0x57d4>
   17830:	ldr	r3, [sp, #76]	; 0x4c
   17834:	str	r3, [sp]
   17838:	ldr	r3, [pc, #-2916]	; 16cdc <__assert_fail@plt+0x4d94>
   1783c:	mov	r2, #4
   17840:	mov	r1, r8
   17844:	ldr	r0, [sp, #88]	; 0x58
   17848:	bl	203f8 <__assert_fail@plt+0xe4b0>
   1784c:	ldr	r0, [sp, #36]	; 0x24
   17850:	cmp	r0, #0
   17854:	beq	1786c <__assert_fail@plt+0x5924>
   17858:	ldr	r3, [pc, #-2936]	; 16ce8 <__assert_fail@plt+0x4da0>
   1785c:	ldr	r1, [r3]
   17860:	bl	11a2c <strcmp@plt>
   17864:	cmp	r0, #0
   17868:	bne	1787c <__assert_fail@plt+0x5934>
   1786c:	ldr	r3, [pc, #-2956]	; 16ce8 <__assert_fail@plt+0x4da0>
   17870:	ldr	r3, [r3]
   17874:	str	r3, [sp, #36]	; 0x24
   17878:	b	16d44 <__assert_fail@plt+0x4dfc>
   1787c:	mov	r2, #5
   17880:	ldr	r1, [pc, #-3024]	; 16cb8 <__assert_fail@plt+0x4d70>
   17884:	mov	r0, #0
   17888:	bl	11b58 <dcgettext@plt>
   1788c:	mov	r2, r0
   17890:	mov	r1, #0
   17894:	mov	r0, #2
   17898:	bl	11c90 <error@plt>
   1789c:	ldr	r0, [sp, #48]	; 0x30
   178a0:	cmp	r0, #0
   178a4:	beq	178bc <__assert_fail@plt+0x5974>
   178a8:	ldr	r3, [pc, #-3016]	; 16ce8 <__assert_fail@plt+0x4da0>
   178ac:	ldr	r1, [r3]
   178b0:	bl	11a2c <strcmp@plt>
   178b4:	cmp	r0, #0
   178b8:	bne	178cc <__assert_fail@plt+0x5984>
   178bc:	ldr	r3, [pc, #-3036]	; 16ce8 <__assert_fail@plt+0x4da0>
   178c0:	ldr	r3, [r3]
   178c4:	str	r3, [sp, #48]	; 0x30
   178c8:	b	16d44 <__assert_fail@plt+0x4dfc>
   178cc:	mov	r2, #5
   178d0:	ldr	r1, [pc, #-3100]	; 16cbc <__assert_fail@plt+0x4d74>
   178d4:	mov	r0, #0
   178d8:	bl	11b58 <dcgettext@plt>
   178dc:	mov	r2, r0
   178e0:	mov	r1, #0
   178e4:	mov	r0, #2
   178e8:	bl	11c90 <error@plt>
   178ec:	mov	r2, #1
   178f0:	ldr	r3, [pc, #-3092]	; 16ce4 <__assert_fail@plt+0x4d9c>
   178f4:	strb	r2, [r3, #1298]	; 0x512
   178f8:	b	16d44 <__assert_fail@plt+0x4dfc>
   178fc:	ldr	r3, [sp, #96]	; 0x60
   17900:	str	r3, [sp, #76]	; 0x4c
   17904:	ldr	r3, [pc, #-3108]	; 16ce8 <__assert_fail@plt+0x4da0>
   17908:	ldr	r8, [r3]
   1790c:	ldr	r3, [pc, #-3156]	; 16cc0 <__assert_fail@plt+0x4d78>
   17910:	str	r3, [sp]
   17914:	add	r3, sp, #184	; 0xb8
   17918:	mov	r2, #10
   1791c:	add	r1, sp, #152	; 0x98
   17920:	mov	r0, r8
   17924:	bl	20594 <__assert_fail@plt+0xe64c>
   17928:	cmp	r0, #0
   1792c:	bne	19578 <__assert_fail@plt+0x7630>
   17930:	ldr	r3, [sp, #152]	; 0x98
   17934:	ldrb	r3, [r3, #-1]
   17938:	sub	r3, r3, #48	; 0x30
   1793c:	cmp	r3, #9
   17940:	bhi	17970 <__assert_fail@plt+0x5a28>
   17944:	ldrd	r2, [sp, #184]	; 0xb8
   17948:	mvn	r0, #0
   1794c:	ldr	r1, [pc, #-3216]	; 16cc4 <__assert_fail@plt+0x4d7c>
   17950:	cmp	r3, r1
   17954:	cmpeq	r2, r0
   17958:	bhi	17a00 <__assert_fail@plt+0x5ab8>
   1795c:	lsl	r3, r3, #10
   17960:	orr	r3, r3, r2, lsr #22
   17964:	lsl	r2, r2, #10
   17968:	str	r2, [sp, #184]	; 0xb8
   1796c:	str	r3, [sp, #188]	; 0xbc
   17970:	ldrd	r2, [sp, #184]	; 0xb8
   17974:	ldr	r1, [pc, #-3224]	; 16ce4 <__assert_fail@plt+0x4d9c>
   17978:	ldr	r0, [r1, #1496]	; 0x5d8
   1797c:	mov	r1, #0
   17980:	cmp	r1, r3
   17984:	cmpeq	r0, r2
   17988:	bhi	16d44 <__assert_fail@plt+0x4dfc>
   1798c:	ldr	r1, [pc, #-3248]	; 16ce4 <__assert_fail@plt+0x4d9c>
   17990:	str	r2, [r1, #1496]	; 0x5d8
   17994:	mov	r1, #0
   17998:	cmp	r1, r3
   1799c:	cmpeq	r2, r2
   179a0:	bne	17a18 <__assert_fail@plt+0x5ad0>
   179a4:	ldr	r3, [pc, #-3264]	; 16cec <__assert_fail@plt+0x4da4>
   179a8:	ldr	r1, [r3, #112]	; 0x70
   179ac:	mov	r3, #18
   179b0:	mul	r3, r3, r1
   179b4:	cmp	r3, r2
   179b8:	movcc	r3, r2
   179bc:	ldr	r2, [pc, #-3296]	; 16ce4 <__assert_fail@plt+0x4d9c>
   179c0:	str	r3, [r2, #1496]	; 0x5d8
   179c4:	b	16d44 <__assert_fail@plt+0x4dfc>
   179c8:	bl	1c6e8 <__assert_fail@plt+0xa7a0>
   179cc:	vmov.f64	d10, d0
   179d0:	ldrd	r0, [sp, #184]	; 0xb8
   179d4:	bl	21d08 <_obstack_memory_used@@Base+0x824>
   179d8:	vmov	d7, r0, r1
   179dc:	vmul.f64	d10, d7, d10
   179e0:	vdiv.f64	d7, d10, d9
   179e4:	vcmpe.f64	d7, d8
   179e8:	vmrs	APSR_nzcv, fpscr
   179ec:	bpl	195b8 <__assert_fail@plt+0x7670>
   179f0:	vmov	r0, r1, d7
   179f4:	bl	21dc8 <_obstack_memory_used@@Base+0x8e4>
   179f8:	strd	r0, [sp, #184]	; 0xb8
   179fc:	b	17970 <__assert_fail@plt+0x5a28>
   17a00:	mov	r0, #1
   17a04:	str	r8, [sp]
   17a08:	ldr	r3, [pc, #-3380]	; 16cdc <__assert_fail@plt+0x4d94>
   17a0c:	mov	r2, #83	; 0x53
   17a10:	ldr	r1, [sp, #76]	; 0x4c
   17a14:	bl	203f8 <__assert_fail@plt+0xe4b0>
   17a18:	mov	r0, #1
   17a1c:	b	17a04 <__assert_fail@plt+0x5abc>
   17a20:	ldr	r3, [pc, #-3392]	; 16ce8 <__assert_fail@plt+0x4da0>
   17a24:	ldr	r0, [r3]
   17a28:	ldrb	r3, [r0]
   17a2c:	cmp	r3, #0
   17a30:	beq	17a78 <__assert_fail@plt+0x5b30>
   17a34:	ldrb	r2, [r0, #1]
   17a38:	cmp	r2, #0
   17a3c:	beq	17a54 <__assert_fail@plt+0x5b0c>
   17a40:	ldr	r1, [pc, #-3456]	; 16cc8 <__assert_fail@plt+0x4d80>
   17a44:	bl	11a2c <strcmp@plt>
   17a48:	cmp	r0, #0
   17a4c:	bne	17a98 <__assert_fail@plt+0x5b50>
   17a50:	mov	r3, #0
   17a54:	ldr	r2, [pc, #-3440]	; 16cec <__assert_fail@plt+0x4da4>
   17a58:	ldr	r2, [r2]
   17a5c:	cmp	r2, #256	; 0x100
   17a60:	beq	17a6c <__assert_fail@plt+0x5b24>
   17a64:	cmp	r2, r3
   17a68:	bne	17acc <__assert_fail@plt+0x5b84>
   17a6c:	ldr	r2, [pc, #-3464]	; 16cec <__assert_fail@plt+0x4da4>
   17a70:	str	r3, [r2]
   17a74:	b	16d44 <__assert_fail@plt+0x4dfc>
   17a78:	mov	r2, #5
   17a7c:	ldr	r1, [pc, #-3512]	; 16ccc <__assert_fail@plt+0x4d84>
   17a80:	mov	r0, #0
   17a84:	bl	11b58 <dcgettext@plt>
   17a88:	mov	r2, r0
   17a8c:	mov	r1, #0
   17a90:	mov	r0, #2
   17a94:	bl	11c90 <error@plt>
   17a98:	mov	r2, #5
   17a9c:	ldr	r1, [pc, #-3540]	; 16cd0 <__assert_fail@plt+0x4d88>
   17aa0:	mov	r0, #0
   17aa4:	bl	11b58 <dcgettext@plt>
   17aa8:	mov	r4, r0
   17aac:	ldr	r3, [pc, #-3532]	; 16ce8 <__assert_fail@plt+0x4da0>
   17ab0:	ldr	r0, [r3]
   17ab4:	bl	1e568 <__assert_fail@plt+0xc620>
   17ab8:	mov	r3, r0
   17abc:	mov	r2, r4
   17ac0:	mov	r1, #0
   17ac4:	mov	r0, #2
   17ac8:	bl	11c90 <error@plt>
   17acc:	mov	r2, #5
   17ad0:	ldr	r1, [pc, #-3588]	; 16cd4 <__assert_fail@plt+0x4d8c>
   17ad4:	mov	r0, #0
   17ad8:	bl	11b58 <dcgettext@plt>
   17adc:	mov	r2, r0
   17ae0:	mov	r1, #0
   17ae4:	mov	r0, #2
   17ae8:	bl	11c90 <error@plt>
   17aec:	ldr	r3, [pc, #-3596]	; 16ce8 <__assert_fail@plt+0x4da0>
   17af0:	ldr	r0, [r3]
   17af4:	bl	12ec8 <__assert_fail@plt+0xf80>
   17af8:	b	16d44 <__assert_fail@plt+0x4dfc>
   17afc:	ldr	r3, [sp, #96]	; 0x60
   17b00:	str	r3, [sp, #52]	; 0x34
   17b04:	ldr	r3, [pc, #-3620]	; 16ce8 <__assert_fail@plt+0x4da0>
   17b08:	ldr	r8, [r3]
   17b0c:	ldr	r3, [pc, #-3644]	; 16cd8 <__assert_fail@plt+0x4d90>
   17b10:	str	r3, [sp]
   17b14:	add	r3, sp, #184	; 0xb8
   17b18:	mov	r2, #10
   17b1c:	mov	r1, #0
   17b20:	mov	r0, r8
   17b24:	bl	20594 <__assert_fail@plt+0xe64c>
   17b28:	cmp	r0, #1
   17b2c:	beq	17b9c <__assert_fail@plt+0x5c54>
   17b30:	cmp	r0, #0
   17b34:	bne	17b60 <__assert_fail@plt+0x5c18>
   17b38:	ldrd	r2, [sp, #184]	; 0xb8
   17b3c:	mvn	r0, #0
   17b40:	mov	r1, #0
   17b44:	cmp	r3, r1
   17b48:	cmpeq	r2, r0
   17b4c:	bhi	17b94 <__assert_fail@plt+0x5c4c>
   17b50:	orrs	r1, r2, r3
   17b54:	beq	17b74 <__assert_fail@plt+0x5c2c>
   17b58:	str	r2, [sp, #52]	; 0x34
   17b5c:	b	16d44 <__assert_fail@plt+0x4dfc>
   17b60:	str	r8, [sp]
   17b64:	ldr	r3, [pc, #-3728]	; 16cdc <__assert_fail@plt+0x4d94>
   17b68:	mov	r2, #7
   17b6c:	ldr	r1, [sp, #52]	; 0x34
   17b70:	bl	203f8 <__assert_fail@plt+0xe4b0>
   17b74:	mov	r2, #5
   17b78:	ldr	r1, [pc, #-3744]	; 16ce0 <__assert_fail@plt+0x4d98>
   17b7c:	mov	r0, #0
   17b80:	bl	11b58 <dcgettext@plt>
   17b84:	mov	r2, r0
   17b88:	mov	r1, #0
   17b8c:	mov	r0, #2
   17b90:	bl	11c90 <error@plt>
   17b94:	mvn	r2, #0
   17b98:	b	17b58 <__assert_fail@plt+0x5c10>
   17b9c:	mvn	r3, #0
   17ba0:	str	r3, [sp, #52]	; 0x34
   17ba4:	b	16d44 <__assert_fail@plt+0x4dfc>
   17ba8:	mov	r2, #1
   17bac:	ldr	r3, [pc, #-3792]	; 16ce4 <__assert_fail@plt+0x4d9c>
   17bb0:	strb	r2, [r3, #1297]	; 0x511
   17bb4:	b	16d44 <__assert_fail@plt+0x4dfc>
   17bb8:	ldr	r2, [r5]
   17bbc:	sub	r3, r2, #-1073741823	; 0xc0000001
   17bc0:	ldr	r3, [fp, r3, lsl #2]
   17bc4:	ldr	r1, [pc, #-3812]	; 16ce8 <__assert_fail@plt+0x4da0>
   17bc8:	ldr	r1, [r1]
   17bcc:	cmp	r3, r1
   17bd0:	bne	16d44 <__assert_fail@plt+0x4dfc>
   17bd4:	sub	r3, r3, #1
   17bd8:	ldrb	r1, [r3, #1]!
   17bdc:	sub	r0, r1, #48	; 0x30
   17be0:	cmp	r0, #9
   17be4:	bls	17bd8 <__assert_fail@plt+0x5c90>
   17be8:	cmp	r1, #0
   17bec:	subne	r2, r2, #1
   17bf0:	str	r2, [r5]
   17bf4:	b	16d44 <__assert_fail@plt+0x4dfc>
   17bf8:	mov	r2, #0
   17bfc:	ldr	r3, [pc, #-3864]	; 16cec <__assert_fail@plt+0x4da4>
   17c00:	strb	r2, [r3, #100]	; 0x64
   17c04:	b	16d44 <__assert_fail@plt+0x4dfc>
   17c08:	mov	r0, #0
   17c0c:	bl	16340 <__assert_fail@plt+0x43f8>
   17c10:	mov	r4, #0
   17c14:	str	r4, [sp, #8]
   17c18:	ldr	r3, [pc, #-3888]	; 16cf0 <__assert_fail@plt+0x4da8>
   17c1c:	str	r3, [sp, #4]
   17c20:	ldr	r3, [pc, #-3892]	; 16cf4 <__assert_fail@plt+0x4dac>
   17c24:	str	r3, [sp]
   17c28:	ldr	r3, [pc, #-3896]	; 16cf8 <__assert_fail@plt+0x4db0>
   17c2c:	ldr	r3, [r3]
   17c30:	ldr	r2, [pc, #-3900]	; 16cfc <__assert_fail@plt+0x4db4>
   17c34:	ldr	r1, [pc, #-3900]	; 16d00 <__assert_fail@plt+0x4db8>
   17c38:	ldr	r0, [pc, #-3900]	; 16d04 <__assert_fail@plt+0x4dbc>
   17c3c:	ldr	r0, [r0]
   17c40:	bl	1fb44 <__assert_fail@plt+0xdbfc>
   17c44:	mov	r0, r4
   17c48:	bl	11d38 <exit@plt>
   17c4c:	mov	r0, #2
   17c50:	bl	16340 <__assert_fail@plt+0x43f8>
   17c54:	mov	r3, #1
   17c58:	str	r3, [sp, #44]	; 0x2c
   17c5c:	b	16d44 <__assert_fail@plt+0x4dfc>
   17c60:	ldr	r3, [sp, #40]	; 0x28
   17c64:	cmp	r3, #0
   17c68:	beq	17e20 <__assert_fail@plt+0x5ed8>
   17c6c:	cmp	r4, #0
   17c70:	beq	17ce0 <__assert_fail@plt+0x5d98>
   17c74:	mov	r2, #5
   17c78:	ldr	r1, [pc, #-3960]	; 16d08 <__assert_fail@plt+0x4dc0>
   17c7c:	mov	r0, #0
   17c80:	bl	11b58 <dcgettext@plt>
   17c84:	mov	r4, r0
   17c88:	ldr	r3, [sp, #24]
   17c8c:	ldr	r1, [r3]
   17c90:	mov	r0, #4
   17c94:	bl	1e334 <__assert_fail@plt+0xc3ec>
   17c98:	mov	r3, r0
   17c9c:	mov	r2, r4
   17ca0:	mov	r1, #0
   17ca4:	mov	r0, r1
   17ca8:	bl	11c90 <error@plt>
   17cac:	ldr	r3, [pc, #-4008]	; 16d0c <__assert_fail@plt+0x4dc4>
   17cb0:	ldr	r4, [r3]
   17cb4:	mov	r2, #5
   17cb8:	ldr	r1, [pc, #-4016]	; 16d10 <__assert_fail@plt+0x4dc8>
   17cbc:	mov	r0, #0
   17cc0:	bl	11b58 <dcgettext@plt>
   17cc4:	mov	r3, r0
   17cc8:	ldr	r2, [pc, #-4028]	; 16d14 <__assert_fail@plt+0x4dcc>
   17ccc:	mov	r1, #1
   17cd0:	mov	r0, r4
   17cd4:	bl	11dd4 <__fprintf_chk@plt>
   17cd8:	mov	r0, #2
   17cdc:	bl	16340 <__assert_fail@plt+0x43f8>
   17ce0:	ldr	r1, [pc, #-4048]	; 16d18 <__assert_fail@plt+0x4dd0>
   17ce4:	ldr	r7, [sp, #40]	; 0x28
   17ce8:	mov	r0, r7
   17cec:	bl	12dc4 <__assert_fail@plt+0xe7c>
   17cf0:	mov	r5, r0
   17cf4:	add	r0, sp, #324	; 0x144
   17cf8:	bl	1edb0 <__assert_fail@plt+0xce68>
   17cfc:	add	r1, sp, #324	; 0x144
   17d00:	mov	r0, r5
   17d04:	bl	1ee5c <__assert_fail@plt+0xcf14>
   17d08:	cmp	r0, #0
   17d0c:	bne	17d40 <__assert_fail@plt+0x5df8>
   17d10:	mov	r2, #5
   17d14:	ldr	r1, [pc, #3996]	; 18cb8 <__assert_fail@plt+0x6d70>
   17d18:	bl	11b58 <dcgettext@plt>
   17d1c:	mov	r4, r0
   17d20:	mov	r1, r7
   17d24:	mov	r0, #4
   17d28:	bl	1e334 <__assert_fail@plt+0xc3ec>
   17d2c:	mov	r3, r0
   17d30:	mov	r2, r4
   17d34:	mov	r1, #0
   17d38:	mov	r0, #2
   17d3c:	bl	11c90 <error@plt>
   17d40:	ldr	r1, [sp, #40]	; 0x28
   17d44:	mov	r0, r5
   17d48:	bl	12df4 <__assert_fail@plt+0xeac>
   17d4c:	ldr	r3, [sp, #324]	; 0x144
   17d50:	cmp	r3, #0
   17d54:	beq	17e38 <__assert_fail@plt+0x5ef0>
   17d58:	ldr	r0, [sp, #24]
   17d5c:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   17d60:	ldr	r3, [sp, #328]	; 0x148
   17d64:	str	r3, [sp, #24]
   17d68:	ldr	r8, [sp, #324]	; 0x144
   17d6c:	mov	r5, r3
   17d70:	ldr	fp, [pc, #3908]	; 18cbc <__assert_fail@plt+0x6d74>
   17d74:	cmp	r4, r8
   17d78:	beq	17e1c <__assert_fail@plt+0x5ed4>
   17d7c:	mov	sl, r5
   17d80:	ldr	r7, [r5], #4
   17d84:	mov	r1, fp
   17d88:	mov	r0, r7
   17d8c:	bl	11a2c <strcmp@plt>
   17d90:	cmp	r0, #0
   17d94:	beq	17dac <__assert_fail@plt+0x5e64>
   17d98:	ldrb	r3, [r7]
   17d9c:	cmp	r3, #0
   17da0:	beq	17ddc <__assert_fail@plt+0x5e94>
   17da4:	add	r4, r4, #1
   17da8:	b	17d74 <__assert_fail@plt+0x5e2c>
   17dac:	mov	r2, #5
   17db0:	ldr	r1, [pc, #3848]	; 18cc0 <__assert_fail@plt+0x6d78>
   17db4:	bl	11b58 <dcgettext@plt>
   17db8:	mov	r4, r0
   17dbc:	ldr	r1, [sl]
   17dc0:	mov	r0, #4
   17dc4:	bl	1e334 <__assert_fail@plt+0xc3ec>
   17dc8:	mov	r3, r0
   17dcc:	mov	r2, r4
   17dd0:	mov	r1, #0
   17dd4:	mov	r0, #2
   17dd8:	bl	11c90 <error@plt>
   17ddc:	mov	r2, #5
   17de0:	ldr	r1, [pc, #3804]	; 18cc4 <__assert_fail@plt+0x6d7c>
   17de4:	mov	r0, #0
   17de8:	bl	11b58 <dcgettext@plt>
   17dec:	mov	r5, r0
   17df0:	ldr	r2, [sp, #40]	; 0x28
   17df4:	mov	r1, #3
   17df8:	mov	r0, #0
   17dfc:	bl	1e400 <__assert_fail@plt+0xc4b8>
   17e00:	add	r4, r4, #1
   17e04:	str	r4, [sp]
   17e08:	mov	r3, r0
   17e0c:	mov	r2, r5
   17e10:	mov	r1, #0
   17e14:	mov	r0, #2
   17e18:	bl	11c90 <error@plt>
   17e1c:	mov	r4, r8
   17e20:	ldr	r3, [pc, #3744]	; 18cc8 <__assert_fail@plt+0x6d80>
   17e24:	ldr	r5, [r3, #1280]	; 0x500
   17e28:	cmp	r5, #0
   17e2c:	beq	195c0 <__assert_fail@plt+0x7678>
   17e30:	mov	r8, #0
   17e34:	b	17e80 <__assert_fail@plt+0x5f38>
   17e38:	mov	r2, #5
   17e3c:	ldr	r1, [pc, #3720]	; 18ccc <__assert_fail@plt+0x6d84>
   17e40:	mov	r0, #0
   17e44:	bl	11b58 <dcgettext@plt>
   17e48:	mov	r4, r0
   17e4c:	ldr	r1, [sp, #40]	; 0x28
   17e50:	mov	r0, #4
   17e54:	bl	1e334 <__assert_fail@plt+0xc3ec>
   17e58:	mov	r3, r0
   17e5c:	mov	r2, r4
   17e60:	mov	r1, #0
   17e64:	mov	r0, #2
   17e68:	bl	11c90 <error@plt>
   17e6c:	ldrb	r3, [r5, #27]
   17e70:	orr	r8, r8, r3
   17e74:	ldr	r5, [r5, #36]	; 0x24
   17e78:	cmp	r5, #0
   17e7c:	beq	1961c <__assert_fail@plt+0x76d4>
   17e80:	mov	r0, r5
   17e84:	bl	1260c <__assert_fail@plt+0x6c4>
   17e88:	cmp	r0, #0
   17e8c:	beq	17e6c <__assert_fail@plt+0x5f24>
   17e90:	ldrb	r3, [r5, #31]
   17e94:	cmp	r3, #0
   17e98:	bne	17e6c <__assert_fail@plt+0x5f24>
   17e9c:	ldr	r3, [sp, #484]	; 0x1e4
   17ea0:	str	r3, [r5, #16]
   17ea4:	ldr	r3, [sp, #488]	; 0x1e8
   17ea8:	str	r3, [r5, #20]
   17eac:	ldrb	r3, [sp, #492]	; 0x1ec
   17eb0:	strb	r3, [r5, #24]
   17eb4:	ldrb	r3, [sp, #493]	; 0x1ed
   17eb8:	strb	r3, [r5, #25]
   17ebc:	ldrb	r3, [sp, #498]	; 0x1f2
   17ec0:	strb	r3, [r5, #30]
   17ec4:	ldrb	r3, [sp, #494]	; 0x1ee
   17ec8:	strb	r3, [r5, #26]
   17ecc:	ldrb	r3, [sp, #496]	; 0x1f0
   17ed0:	strb	r3, [r5, #28]
   17ed4:	ldrb	r3, [sp, #497]	; 0x1f1
   17ed8:	strb	r3, [r5, #29]
   17edc:	ldrb	r3, [sp, #500]	; 0x1f4
   17ee0:	strb	r3, [r5, #32]
   17ee4:	ldrb	r3, [sp, #495]	; 0x1ef
   17ee8:	strb	r3, [r5, #27]
   17eec:	ldrb	r3, [sp, #499]	; 0x1f3
   17ef0:	strb	r3, [r5, #31]
   17ef4:	b	17e6c <__assert_fail@plt+0x5f24>
   17ef8:	add	r0, sp, #468	; 0x1d4
   17efc:	bl	12e78 <__assert_fail@plt+0xf30>
   17f00:	ldrb	r8, [sp, #495]	; 0x1ef
   17f04:	ldr	r3, [pc, #3516]	; 18cc8 <__assert_fail@plt+0x6d80>
   17f08:	ldr	r0, [r3, #1280]	; 0x500
   17f0c:	cmp	r0, #0
   17f10:	beq	17fac <__assert_fail@plt+0x6064>
   17f14:	mov	r3, #1
   17f18:	str	r3, [sp, #40]	; 0x28
   17f1c:	b	1962c <__assert_fail@plt+0x76e4>
   17f20:	ldrb	r3, [r0, #26]
   17f24:	ldrb	r2, [r0, #28]
   17f28:	add	r3, r3, r2
   17f2c:	ldrb	r2, [r0, #29]
   17f30:	add	r3, r3, r2
   17f34:	ldrb	r2, [r0, #30]
   17f38:	add	r3, r3, r2
   17f3c:	ldrb	r2, [r0, #32]
   17f40:	ldrb	r1, [r0, #27]
   17f44:	orr	r2, r2, r1
   17f48:	ldr	r1, [r0, #16]
   17f4c:	cmp	r1, #0
   17f50:	orrne	r2, r2, #1
   17f54:	add	r3, r3, r2
   17f58:	cmp	r3, #1
   17f5c:	bgt	1966c <__assert_fail@plt+0x7724>
   17f60:	ldr	r0, [r0, #36]	; 0x24
   17f64:	cmp	r0, #0
   17f68:	bne	17f20 <__assert_fail@plt+0x5fd8>
   17f6c:	ldr	r3, [pc, #3412]	; 18cc8 <__assert_fail@plt+0x6d80>
   17f70:	ldrb	r3, [r3, #1296]	; 0x510
   17f74:	cmp	r3, #0
   17f78:	beq	188d4 <__assert_fail@plt+0x698c>
   17f7c:	ldr	r3, [sp, #36]	; 0x24
   17f80:	cmp	r3, #0
   17f84:	cmpeq	r9, #0
   17f88:	movne	r3, #1
   17f8c:	moveq	r3, #0
   17f90:	str	r3, [sp, #28]
   17f94:	beq	17fb8 <__assert_fail@plt+0x6070>
   17f98:	cmp	r9, #0
   17f9c:	moveq	r9, #111	; 0x6f
   17fa0:	ldr	r0, [pc, #3368]	; 18cd0 <__assert_fail@plt+0x6d88>
   17fa4:	strb	r9, [r0, #116]!	; 0x74
   17fa8:	bl	12948 <__assert_fail@plt+0xa00>
   17fac:	mov	r3, #1
   17fb0:	str	r3, [sp, #40]	; 0x28
   17fb4:	b	17f6c <__assert_fail@plt+0x6024>
   17fb8:	ldr	r3, [sp, #60]	; 0x3c
   17fbc:	cmp	r3, #0
   17fc0:	beq	18078 <__assert_fail@plt+0x6130>
   17fc4:	ldr	r1, [pc, #3336]	; 18cd4 <__assert_fail@plt+0x6d8c>
   17fc8:	mov	r0, #3
   17fcc:	bl	11e28 <setlocale@plt>
   17fd0:	cmp	r0, #0
   17fd4:	beq	18078 <__assert_fail@plt+0x6130>
   17fd8:	ldr	r3, [pc, #3304]	; 18cc8 <__assert_fail@plt+0x6d80>
   17fdc:	ldrb	r3, [r3, #1316]	; 0x524
   17fe0:	cmp	r3, #0
   17fe4:	beq	180a0 <__assert_fail@plt+0x6158>
   17fe8:	mov	r2, #5
   17fec:	ldr	r1, [pc, #3300]	; 18cd8 <__assert_fail@plt+0x6d90>
   17ff0:	mov	r0, #0
   17ff4:	bl	11b58 <dcgettext@plt>
   17ff8:	mov	r5, r0
   17ffc:	mov	r1, #0
   18000:	mov	r0, #3
   18004:	bl	11e28 <setlocale@plt>
   18008:	bl	1e568 <__assert_fail@plt+0xc620>
   1800c:	mov	r3, r0
   18010:	mov	r2, r5
   18014:	mov	r1, #0
   18018:	mov	r0, r1
   1801c:	bl	11c90 <error@plt>
   18020:	add	ip, sp, #184	; 0xb8
   18024:	add	lr, sp, #468	; 0x1d4
   18028:	ldm	lr!, {r0, r1, r2, r3}
   1802c:	stmia	ip!, {r0, r1, r2, r3}
   18030:	ldm	lr!, {r0, r1, r2, r3}
   18034:	stmia	ip!, {r0, r1, r2, r3}
   18038:	ldm	lr, {r0, r1}
   1803c:	stm	ip, {r0, r1}
   18040:	ldr	r3, [pc, #3200]	; 18cc8 <__assert_fail@plt+0x6d80>
   18044:	ldr	sl, [r3, #1280]	; 0x500
   18048:	ldr	r3, [sp, #28]
   1804c:	str	r3, [sp, #56]	; 0x38
   18050:	str	r3, [sp, #16]
   18054:	str	r3, [sp, #72]	; 0x48
   18058:	str	r3, [sp, #60]	; 0x3c
   1805c:	mov	r3, #1
   18060:	str	r3, [sp, #32]
   18064:	add	r3, sp, #121	; 0x79
   18068:	str	r3, [sp, #88]	; 0x58
   1806c:	add	r3, sp, #155	; 0x9b
   18070:	str	r3, [sp, #92]	; 0x5c
   18074:	b	18234 <__assert_fail@plt+0x62ec>
   18078:	mov	r2, #5
   1807c:	ldr	r1, [pc, #3160]	; 18cdc <__assert_fail@plt+0x6d94>
   18080:	mov	r0, #0
   18084:	bl	11b58 <dcgettext@plt>
   18088:	mov	r3, r0
   1808c:	ldr	r2, [pc, #3148]	; 18ce0 <__assert_fail@plt+0x6d98>
   18090:	mov	r1, #0
   18094:	mov	r0, r1
   18098:	bl	11c90 <error@plt>
   1809c:	b	17fd8 <__assert_fail@plt+0x6090>
   180a0:	mov	r2, #5
   180a4:	ldr	r1, [pc, #3128]	; 18ce4 <__assert_fail@plt+0x6d9c>
   180a8:	mov	r0, #0
   180ac:	bl	11b58 <dcgettext@plt>
   180b0:	mov	r3, r0
   180b4:	ldr	r2, [pc, #3108]	; 18ce0 <__assert_fail@plt+0x6d98>
   180b8:	mov	r1, #0
   180bc:	mov	r0, r1
   180c0:	bl	11c90 <error@plt>
   180c4:	b	18020 <__assert_fail@plt+0x60d8>
   180c8:	ldrb	r3, [sl, #28]
   180cc:	ldr	r2, [sp, #60]	; 0x3c
   180d0:	cmp	r3, #0
   180d4:	moveq	r2, #1
   180d8:	str	r2, [sp, #60]	; 0x3c
   180dc:	ldr	r2, [sp, #72]	; 0x48
   180e0:	cmp	r3, #0
   180e4:	movne	r2, r3
   180e8:	str	r2, [sp, #72]	; 0x48
   180ec:	b	18254 <__assert_fail@plt+0x630c>
   180f0:	mov	r2, #5
   180f4:	ldr	r1, [pc, #3052]	; 18ce8 <__assert_fail@plt+0x6da0>
   180f8:	mov	r0, #0
   180fc:	bl	11b58 <dcgettext@plt>
   18100:	ldr	r3, [sp, #32]
   18104:	mov	r2, r0
   18108:	mov	r1, #0
   1810c:	mov	r0, r1
   18110:	bl	11c90 <error@plt>
   18114:	ldr	r3, [sp, #40]	; 0x28
   18118:	cmp	r3, #0
   1811c:	bne	18138 <__assert_fail@plt+0x61f0>
   18120:	ldrb	r3, [sl, #26]
   18124:	cmp	r3, #0
   18128:	bne	18468 <__assert_fail@plt+0x6520>
   1812c:	ldrh	r3, [sl, #28]
   18130:	cmp	r3, #0
   18134:	bne	18468 <__assert_fail@plt+0x6520>
   18138:	ldr	r3, [sp, #200]	; 0xc8
   1813c:	cmp	r3, #0
   18140:	beq	18154 <__assert_fail@plt+0x620c>
   18144:	ldr	r2, [sl, #16]
   18148:	cmp	r3, r2
   1814c:	moveq	r3, #0
   18150:	streq	r3, [sp, #200]	; 0xc8
   18154:	ldr	r3, [sp, #204]	; 0xcc
   18158:	cmp	r3, #0
   1815c:	beq	18170 <__assert_fail@plt+0x6228>
   18160:	ldr	r2, [sl, #20]
   18164:	cmp	r3, r2
   18168:	moveq	r3, #0
   1816c:	streq	r3, [sp, #204]	; 0xcc
   18170:	ldrb	r3, [sl, #24]
   18174:	eor	r3, r3, #1
   18178:	ldrb	r2, [sp, #208]	; 0xd0
   1817c:	and	r3, r3, r2
   18180:	strb	r3, [sp, #208]	; 0xd0
   18184:	ldrb	r3, [sl, #25]
   18188:	eor	r3, r3, #1
   1818c:	ldrb	r2, [sp, #209]	; 0xd1
   18190:	and	r3, r3, r2
   18194:	strb	r3, [sp, #209]	; 0xd1
   18198:	ldrb	r3, [sl, #30]
   1819c:	eor	r3, r3, #1
   181a0:	ldrb	r2, [sp, #214]	; 0xd6
   181a4:	and	r3, r3, r2
   181a8:	strb	r3, [sp, #214]	; 0xd6
   181ac:	ldrb	r3, [sl, #26]
   181b0:	eor	r3, r3, #1
   181b4:	ldrb	r2, [sp, #210]	; 0xd2
   181b8:	and	r3, r3, r2
   181bc:	strb	r3, [sp, #210]	; 0xd2
   181c0:	ldrb	r3, [sl, #28]
   181c4:	eor	r3, r3, #1
   181c8:	ldrb	r2, [sp, #212]	; 0xd4
   181cc:	and	r3, r3, r2
   181d0:	strb	r3, [sp, #212]	; 0xd4
   181d4:	ldrb	r3, [sl, #29]
   181d8:	eor	r3, r3, #1
   181dc:	ldrb	r2, [sp, #213]	; 0xd5
   181e0:	and	r3, r3, r2
   181e4:	strb	r3, [sp, #213]	; 0xd5
   181e8:	ldrb	r3, [sl, #27]
   181ec:	eor	r3, r3, #1
   181f0:	ldrb	r2, [sp, #211]	; 0xd3
   181f4:	and	r3, r3, r2
   181f8:	strb	r3, [sp, #211]	; 0xd3
   181fc:	ldrb	r3, [sl, #32]
   18200:	eor	r3, r3, #1
   18204:	ldrb	r2, [sp, #216]	; 0xd8
   18208:	and	r3, r3, r2
   1820c:	strb	r3, [sp, #216]	; 0xd8
   18210:	ldrb	r3, [sl, #31]
   18214:	eor	r3, r3, #1
   18218:	ldrb	r2, [sp, #215]	; 0xd7
   1821c:	and	r3, r3, r2
   18220:	strb	r3, [sp, #215]	; 0xd7
   18224:	ldr	sl, [sl, #36]	; 0x24
   18228:	ldr	r3, [sp, #32]
   1822c:	add	r3, r3, #1
   18230:	str	r3, [sp, #32]
   18234:	cmp	sl, #0
   18238:	beq	184e8 <__assert_fail@plt+0x65a0>
   1823c:	ldrb	r3, [sl, #26]
   18240:	cmp	r3, #0
   18244:	bne	180c8 <__assert_fail@plt+0x6180>
   18248:	ldrh	r3, [sl, #28]
   1824c:	cmp	r3, #0
   18250:	bne	180c8 <__assert_fail@plt+0x6180>
   18254:	ldrb	r3, [sl, #33]	; 0x21
   18258:	cmp	r3, #0
   1825c:	beq	18390 <__assert_fail@plt+0x6448>
   18260:	ldr	r7, [sl]
   18264:	ldr	fp, [sl, #8]
   18268:	cmn	r7, #1
   1826c:	moveq	r7, #0
   18270:	mov	r3, #43	; 0x2b
   18274:	strh	r3, [sp, #120]	; 0x78
   18278:	add	r2, sp, #96	; 0x60
   1827c:	mov	r0, r7
   18280:	mov	r1, #0
   18284:	bl	1c27c <__assert_fail@plt+0xa334>
   18288:	mov	r2, #25
   1828c:	mov	r1, r0
   18290:	ldr	r0, [sp, #88]	; 0x58
   18294:	bl	11c30 <__stpcpy_chk@plt>
   18298:	mov	r5, r0
   1829c:	ldr	r3, [pc, #2632]	; 18cec <__assert_fail@plt+0x6da4>
   182a0:	str	r3, [sp, #152]	; 0x98
   182a4:	add	r2, sp, #96	; 0x60
   182a8:	add	r0, r7, #1
   182ac:	mov	r1, #0
   182b0:	bl	1c27c <__assert_fail@plt+0xa334>
   182b4:	mov	r2, #24
   182b8:	mov	r1, r0
   182bc:	ldr	r0, [sp, #92]	; 0x5c
   182c0:	bl	11c30 <__stpcpy_chk@plt>
   182c4:	str	r0, [sp, #76]	; 0x4c
   182c8:	ldr	r3, [sl, #8]
   182cc:	cmn	r3, #1
   182d0:	beq	18348 <__assert_fail@plt+0x6400>
   182d4:	ldr	r3, [pc, #2580]	; 18cf0 <__assert_fail@plt+0x6da8>
   182d8:	ldrh	r2, [r3]
   182dc:	ldrb	r3, [r3, #2]
   182e0:	strh	r2, [r5]
   182e4:	strb	r3, [r5, #2]!
   182e8:	add	fp, fp, #1
   182ec:	mov	r7, #0
   182f0:	add	r2, sp, #96	; 0x60
   182f4:	mov	r0, fp
   182f8:	mov	r1, r7
   182fc:	bl	1c27c <__assert_fail@plt+0xa334>
   18300:	mov	r1, r0
   18304:	mov	r0, r5
   18308:	bl	11c54 <strcpy@plt>
   1830c:	ldr	r3, [pc, #2528]	; 18cf4 <__assert_fail@plt+0x6dac>
   18310:	ldrh	r3, [r3]
   18314:	ldr	r5, [sp, #76]	; 0x4c
   18318:	strh	r3, [r5], #1
   1831c:	ldr	r0, [sl, #12]
   18320:	cmn	r0, #1
   18324:	movne	r0, #0
   18328:	moveq	r0, #1
   1832c:	add	r2, sp, #96	; 0x60
   18330:	add	r0, r0, fp
   18334:	mov	r1, r7
   18338:	bl	1c27c <__assert_fail@plt+0xa334>
   1833c:	mov	r1, r0
   18340:	mov	r0, r5
   18344:	bl	11c54 <strcpy@plt>
   18348:	mov	r2, #5
   1834c:	ldr	r1, [pc, #2468]	; 18cf8 <__assert_fail@plt+0x6db0>
   18350:	mov	r0, #0
   18354:	bl	11b58 <dcgettext@plt>
   18358:	mov	r5, r0
   1835c:	add	r1, sp, #120	; 0x78
   18360:	mov	r0, #0
   18364:	bl	1e558 <__assert_fail@plt+0xc610>
   18368:	mov	r7, r0
   1836c:	add	r1, sp, #152	; 0x98
   18370:	mov	r0, #1
   18374:	bl	1e558 <__assert_fail@plt+0xc610>
   18378:	str	r0, [sp]
   1837c:	mov	r3, r7
   18380:	mov	r2, r5
   18384:	mov	r1, #0
   18388:	mov	r0, r1
   1838c:	bl	11c90 <error@plt>
   18390:	ldr	r3, [sl]
   18394:	cmn	r3, #1
   18398:	ldreq	r3, [sp, #28]
   1839c:	beq	183d8 <__assert_fail@plt+0x6490>
   183a0:	ldr	r2, [sl, #8]
   183a4:	cmp	r3, r2
   183a8:	ldrls	r3, [sp, #28]
   183ac:	bls	183d8 <__assert_fail@plt+0x6490>
   183b0:	mov	r2, #5
   183b4:	ldr	r1, [pc, #2368]	; 18cfc <__assert_fail@plt+0x6db4>
   183b8:	mov	r0, #0
   183bc:	bl	11b58 <dcgettext@plt>
   183c0:	ldr	r3, [sp, #32]
   183c4:	mov	r2, r0
   183c8:	mov	r1, #0
   183cc:	mov	r0, r1
   183d0:	bl	11c90 <error@plt>
   183d4:	mov	r3, #1
   183d8:	ldrb	r2, [sl, #26]
   183dc:	cmp	r2, #0
   183e0:	bne	183f4 <__assert_fail@plt+0x64ac>
   183e4:	ldrh	r2, [sl, #28]
   183e8:	cmp	r2, #0
   183ec:	ldrbeq	r2, [sl, #30]
   183f0:	movne	r2, #1
   183f4:	ldr	r1, [sl, #8]
   183f8:	cmp	r1, #0
   183fc:	bne	1840c <__assert_fail@plt+0x64c4>
   18400:	ldr	r1, [sl, #12]
   18404:	cmp	r1, #0
   18408:	bne	18114 <__assert_fail@plt+0x61cc>
   1840c:	ldr	r1, [sp, #40]	; 0x28
   18410:	orr	r3, r3, r1
   18414:	tst	r3, #255	; 0xff
   18418:	bne	18114 <__assert_fail@plt+0x61cc>
   1841c:	ldr	r3, [pc, #2220]	; 18cd0 <__assert_fail@plt+0x6d88>
   18420:	ldr	r3, [r3]
   18424:	cmp	r3, #256	; 0x100
   18428:	bne	18114 <__assert_fail@plt+0x61cc>
   1842c:	ldrb	r3, [sl, #24]
   18430:	cmp	r3, #0
   18434:	bne	1844c <__assert_fail@plt+0x6504>
   18438:	cmp	r2, #0
   1843c:	beq	180f0 <__assert_fail@plt+0x61a8>
   18440:	ldr	r3, [sl, #4]
   18444:	cmp	r3, #0
   18448:	bne	180f0 <__assert_fail@plt+0x61a8>
   1844c:	ldrb	r3, [sl, #25]
   18450:	cmp	r3, #0
   18454:	bne	18114 <__assert_fail@plt+0x61cc>
   18458:	ldr	r3, [sl, #12]
   1845c:	cmp	r3, #0
   18460:	beq	18114 <__assert_fail@plt+0x61cc>
   18464:	b	180f0 <__assert_fail@plt+0x61a8>
   18468:	ldr	r2, [sl]
   1846c:	ldr	r5, [sl, #8]
   18470:	add	r5, r5, #1
   18474:	adds	r3, r2, #1
   18478:	addeq	r3, r2, #2
   1847c:	cmp	r5, r3
   18480:	movls	r3, #0
   18484:	movhi	r3, #1
   18488:	cmp	r5, #0
   1848c:	movne	r5, r3
   18490:	orreq	r5, r3, #1
   18494:	cmp	r5, #0
   18498:	beq	18138 <__assert_fail@plt+0x61f0>
   1849c:	mov	r2, #5
   184a0:	ldr	r1, [pc, #2136]	; 18d00 <__assert_fail@plt+0x6db8>
   184a4:	mov	r0, #0
   184a8:	bl	11b58 <dcgettext@plt>
   184ac:	ldr	r3, [sp, #32]
   184b0:	mov	r2, r0
   184b4:	mov	r1, #0
   184b8:	mov	r0, r1
   184bc:	bl	11c90 <error@plt>
   184c0:	ldrb	r3, [sl, #28]
   184c4:	ldr	r2, [sp, #16]
   184c8:	cmp	r3, #0
   184cc:	moveq	r2, r5
   184d0:	str	r2, [sp, #16]
   184d4:	ldr	r2, [sp, #56]	; 0x38
   184d8:	cmp	r3, #0
   184dc:	movne	r2, r3
   184e0:	str	r2, [sp, #56]	; 0x38
   184e4:	b	18138 <__assert_fail@plt+0x61f0>
   184e8:	ldr	r3, [sp, #16]
   184ec:	cmp	r3, #0
   184f0:	beq	18624 <__assert_fail@plt+0x66dc>
   184f4:	ldr	r3, [pc, #2004]	; 18cd0 <__assert_fail@plt+0x6d88>
   184f8:	ldr	r3, [r3]
   184fc:	cmp	r3, #256	; 0x100
   18500:	beq	185b0 <__assert_fail@plt+0x6668>
   18504:	ldr	r2, [pc, #1980]	; 18cc8 <__assert_fail@plt+0x6d80>
   18508:	ldr	r2, [r2, #256]	; 0x100
   1850c:	cmp	r2, r3
   18510:	movne	r3, #0
   18514:	moveq	r3, #1
   18518:	str	r3, [sp, #28]
   1851c:	ldr	r3, [sp, #28]
   18520:	cmp	r3, #0
   18524:	bne	185dc <__assert_fail@plt+0x6694>
   18528:	ldr	r3, [sp, #28]
   1852c:	str	r3, [sp, #16]
   18530:	ldr	r3, [pc, #1944]	; 18cd0 <__assert_fail@plt+0x6d88>
   18534:	ldr	r5, [r3]
   18538:	cmp	r5, #256	; 0x100
   1853c:	beq	186d0 <__assert_fail@plt+0x6788>
   18540:	ldr	r3, [pc, #1920]	; 18cc8 <__assert_fail@plt+0x6d80>
   18544:	ldrb	r3, [r3, #260]	; 0x104
   18548:	cmp	r5, r3
   1854c:	beq	186fc <__assert_fail@plt+0x67b4>
   18550:	cmp	r5, #45	; 0x2d
   18554:	beq	187a8 <__assert_fail@plt+0x6860>
   18558:	ldr	r3, [sp, #56]	; 0x38
   1855c:	cmp	r5, #43	; 0x2b
   18560:	movne	r3, #0
   18564:	andeq	r3, r3, #1
   18568:	cmp	r3, #0
   1856c:	beq	1863c <__assert_fail@plt+0x66f4>
   18570:	mov	r2, #5
   18574:	ldr	r1, [pc, #1928]	; 18d04 <__assert_fail@plt+0x6dbc>
   18578:	mov	r0, #0
   1857c:	bl	11b58 <dcgettext@plt>
   18580:	mov	r6, r0
   18584:	strb	r5, [sp, #552]	; 0x228
   18588:	mov	r5, #0
   1858c:	strb	r5, [sp, #553]	; 0x229
   18590:	add	r0, sp, #552	; 0x228
   18594:	bl	1e568 <__assert_fail@plt+0xc620>
   18598:	mov	r3, r0
   1859c:	mov	r2, r6
   185a0:	mov	r1, r5
   185a4:	mov	r0, r5
   185a8:	bl	11c90 <error@plt>
   185ac:	b	1863c <__assert_fail@plt+0x66f4>
   185b0:	ldr	r3, [pc, #1808]	; 18cc8 <__assert_fail@plt+0x6d80>
   185b4:	ldr	r3, [r3, #256]	; 0x100
   185b8:	cmp	r3, #256	; 0x100
   185bc:	beq	18528 <__assert_fail@plt+0x65e0>
   185c0:	uxtb	r3, r3
   185c4:	ldr	r2, [r6]
   185c8:	lsl	r3, r3, #1
   185cc:	ldrh	r3, [r2, r3]
   185d0:	and	r3, r3, #1
   185d4:	str	r3, [sp, #28]
   185d8:	b	1851c <__assert_fail@plt+0x65d4>
   185dc:	mov	r2, #5
   185e0:	ldr	r1, [pc, #1824]	; 18d08 <__assert_fail@plt+0x6dc0>
   185e4:	mov	r0, #0
   185e8:	bl	11b58 <dcgettext@plt>
   185ec:	mov	r7, r0
   185f0:	ldr	r3, [pc, #1744]	; 18cc8 <__assert_fail@plt+0x6d80>
   185f4:	ldr	r3, [r3, #256]	; 0x100
   185f8:	strb	r3, [sp, #564]	; 0x234
   185fc:	mov	r5, #0
   18600:	strb	r5, [sp, #565]	; 0x235
   18604:	add	r0, sp, #564	; 0x234
   18608:	bl	1e568 <__assert_fail@plt+0xc620>
   1860c:	mov	r3, r0
   18610:	mov	r2, r7
   18614:	mov	r1, r5
   18618:	mov	r0, r5
   1861c:	bl	11c90 <error@plt>
   18620:	b	18528 <__assert_fail@plt+0x65e0>
   18624:	ldr	r3, [sp, #16]
   18628:	ldr	r2, [sp, #56]	; 0x38
   1862c:	orr	r3, r3, r2
   18630:	ands	r3, r3, #255	; 0xff
   18634:	streq	r3, [sp, #16]
   18638:	bne	18530 <__assert_fail@plt+0x65e8>
   1863c:	ldr	r3, [sp, #60]	; 0x3c
   18640:	ldr	r2, [sp, #72]	; 0x48
   18644:	orr	r3, r3, r2
   18648:	eor	r3, r3, #1
   1864c:	ldr	r2, [sp, #16]
   18650:	orr	r3, r2, r3
   18654:	tst	r3, #255	; 0xff
   18658:	bne	18740 <__assert_fail@plt+0x67f8>
   1865c:	mov	r2, #5
   18660:	ldr	r1, [pc, #1700]	; 18d0c <__assert_fail@plt+0x6dc4>
   18664:	mov	r0, #0
   18668:	bl	11b58 <dcgettext@plt>
   1866c:	mov	r7, r0
   18670:	ldr	r3, [pc, #1616]	; 18cc8 <__assert_fail@plt+0x6d80>
   18674:	ldrb	r5, [r3, #260]	; 0x104
   18678:	ldr	r3, [pc, #1616]	; 18cd0 <__assert_fail@plt+0x6d88>
   1867c:	ldr	r3, [r3]
   18680:	cmp	r5, r3
   18684:	ldreq	r6, [pc, #1608]	; 18cd4 <__assert_fail@plt+0x6d8c>
   18688:	beq	186a0 <__assert_fail@plt+0x6758>
   1868c:	mov	r2, #5
   18690:	ldr	r1, [pc, #1656]	; 18d10 <__assert_fail@plt+0x6dc8>
   18694:	mov	r0, #0
   18698:	bl	11b58 <dcgettext@plt>
   1869c:	mov	r6, r0
   186a0:	strb	r5, [sp, #548]	; 0x224
   186a4:	mov	r5, #0
   186a8:	strb	r5, [sp, #549]	; 0x225
   186ac:	add	r0, sp, #548	; 0x224
   186b0:	bl	1e568 <__assert_fail@plt+0xc620>
   186b4:	str	r0, [sp]
   186b8:	mov	r3, r6
   186bc:	mov	r2, r7
   186c0:	mov	r1, r5
   186c4:	mov	r0, r5
   186c8:	bl	11c90 <error@plt>
   186cc:	b	18740 <__assert_fail@plt+0x67f8>
   186d0:	ldr	r3, [pc, #1520]	; 18cc8 <__assert_fail@plt+0x6d80>
   186d4:	ldr	r3, [r3, #256]	; 0x100
   186d8:	cmp	r3, #256	; 0x100
   186dc:	beq	18558 <__assert_fail@plt+0x6610>
   186e0:	ldr	r3, [pc, #1504]	; 18cc8 <__assert_fail@plt+0x6d80>
   186e4:	ldrb	r3, [r3, #260]	; 0x104
   186e8:	ldr	r2, [r6]
   186ec:	lsl	r3, r3, #1
   186f0:	ldrh	r3, [r2, r3]
   186f4:	tst	r3, #1
   186f8:	beq	1863c <__assert_fail@plt+0x66f4>
   186fc:	mov	r2, #5
   18700:	ldr	r1, [pc, #1548]	; 18d14 <__assert_fail@plt+0x6dcc>
   18704:	mov	r0, #0
   18708:	bl	11b58 <dcgettext@plt>
   1870c:	mov	r6, r0
   18710:	ldr	r3, [pc, #1456]	; 18cc8 <__assert_fail@plt+0x6d80>
   18714:	ldrb	r3, [r3, #260]	; 0x104
   18718:	strb	r3, [sp, #560]	; 0x230
   1871c:	mov	r5, #0
   18720:	strb	r5, [sp, #561]	; 0x231
   18724:	add	r0, sp, #560	; 0x230
   18728:	bl	1e568 <__assert_fail@plt+0xc620>
   1872c:	mov	r3, r0
   18730:	mov	r2, r6
   18734:	mov	r1, r5
   18738:	mov	r0, r5
   1873c:	bl	11c90 <error@plt>
   18740:	ldr	r3, [sp, #60]	; 0x3c
   18744:	cmp	r3, #0
   18748:	beq	1875c <__assert_fail@plt+0x6814>
   1874c:	ldr	r3, [pc, #1396]	; 18cc8 <__assert_fail@plt+0x6d80>
   18750:	ldrb	r3, [r3, #1501]	; 0x5dd
   18754:	cmp	r3, #0
   18758:	bne	187ec <__assert_fail@plt+0x68a4>
   1875c:	add	r0, sp, #184	; 0xb8
   18760:	bl	1260c <__assert_fail@plt+0x6c4>
   18764:	cmp	r0, #0
   18768:	beq	18810 <__assert_fail@plt+0x68c8>
   1876c:	ldrb	r3, [sp, #215]	; 0xd7
   18770:	cmp	r3, #0
   18774:	beq	188d4 <__assert_fail@plt+0x698c>
   18778:	ldr	r3, [pc, #1352]	; 18cc8 <__assert_fail@plt+0x6d80>
   1877c:	ldrb	r5, [r3, #1298]	; 0x512
   18780:	cmp	r5, #0
   18784:	bne	195f8 <__assert_fail@plt+0x76b0>
   18788:	ldrb	r5, [r3, #1297]	; 0x511
   1878c:	cmp	r5, #0
   18790:	beq	18894 <__assert_fail@plt+0x694c>
   18794:	ldr	r3, [pc, #1324]	; 18cc8 <__assert_fail@plt+0x6d80>
   18798:	ldr	r3, [r3, #1280]	; 0x500
   1879c:	cmp	r3, #0
   187a0:	bne	18834 <__assert_fail@plt+0x68ec>
   187a4:	b	18884 <__assert_fail@plt+0x693c>
   187a8:	mov	r2, #5
   187ac:	ldr	r1, [pc, #1380]	; 18d18 <__assert_fail@plt+0x6dd0>
   187b0:	mov	r0, #0
   187b4:	bl	11b58 <dcgettext@plt>
   187b8:	mov	r6, r0
   187bc:	mov	r3, #45	; 0x2d
   187c0:	strb	r3, [sp, #556]	; 0x22c
   187c4:	mov	r5, #0
   187c8:	strb	r5, [sp, #557]	; 0x22d
   187cc:	add	r0, sp, #556	; 0x22c
   187d0:	bl	1e568 <__assert_fail@plt+0xc620>
   187d4:	mov	r3, r0
   187d8:	mov	r2, r6
   187dc:	mov	r1, r5
   187e0:	mov	r0, r5
   187e4:	bl	11c90 <error@plt>
   187e8:	b	1863c <__assert_fail@plt+0x66f4>
   187ec:	mov	r2, #5
   187f0:	ldr	r1, [pc, #1316]	; 18d1c <__assert_fail@plt+0x6dd4>
   187f4:	mov	r0, #0
   187f8:	bl	11b58 <dcgettext@plt>
   187fc:	mov	r2, r0
   18800:	mov	r1, #0
   18804:	mov	r0, r1
   18808:	bl	11c90 <error@plt>
   1880c:	b	1875c <__assert_fail@plt+0x6814>
   18810:	ldrb	r5, [sp, #215]	; 0xd7
   18814:	ldr	r3, [pc, #1196]	; 18cc8 <__assert_fail@plt+0x6d80>
   18818:	ldrb	r3, [r3, #1298]	; 0x512
   1881c:	cmp	r3, #0
   18820:	bne	18834 <__assert_fail@plt+0x68ec>
   18824:	ldr	r3, [pc, #1180]	; 18cc8 <__assert_fail@plt+0x6d80>
   18828:	ldrb	r3, [r3, #1297]	; 0x511
   1882c:	cmp	r3, #0
   18830:	strbeq	r3, [sp, #215]	; 0xd7
   18834:	add	r1, sp, #152	; 0x98
   18838:	add	r0, sp, #184	; 0xb8
   1883c:	bl	1269c <__assert_fail@plt+0x754>
   18840:	add	r0, sp, #152	; 0x98
   18844:	bl	11d50 <strlen@plt>
   18848:	mov	r3, #5
   1884c:	str	r3, [sp]
   18850:	mov	r3, r0
   18854:	ldr	r2, [pc, #1220]	; 18d20 <__assert_fail@plt+0x6dd8>
   18858:	ldr	r1, [pc, #1220]	; 18d24 <__assert_fail@plt+0x6ddc>
   1885c:	mov	r0, #0
   18860:	bl	11f3c <dcngettext@plt>
   18864:	add	r3, sp, #152	; 0x98
   18868:	mov	r2, r0
   1886c:	mov	r1, #0
   18870:	mov	r0, r1
   18874:	bl	11c90 <error@plt>
   18878:	strb	r5, [sp, #215]	; 0xd7
   1887c:	cmp	r5, #0
   18880:	beq	188d4 <__assert_fail@plt+0x698c>
   18884:	ldr	r3, [pc, #1084]	; 18cc8 <__assert_fail@plt+0x6d80>
   18888:	ldrb	r3, [r3, #1298]	; 0x512
   1888c:	cmp	r3, #0
   18890:	bne	188d4 <__assert_fail@plt+0x698c>
   18894:	ldr	r3, [pc, #1068]	; 18cc8 <__assert_fail@plt+0x6d80>
   18898:	ldrb	r3, [r3, #1297]	; 0x511
   1889c:	cmp	r3, #0
   188a0:	bne	188d4 <__assert_fail@plt+0x698c>
   188a4:	ldr	r3, [pc, #1052]	; 18cc8 <__assert_fail@plt+0x6d80>
   188a8:	ldr	r3, [r3, #1280]	; 0x500
   188ac:	cmp	r3, #0
   188b0:	beq	188d4 <__assert_fail@plt+0x698c>
   188b4:	mov	r2, #5
   188b8:	ldr	r1, [pc, #1128]	; 18d28 <__assert_fail@plt+0x6de0>
   188bc:	mov	r0, #0
   188c0:	bl	11b58 <dcgettext@plt>
   188c4:	mov	r2, r0
   188c8:	mov	r1, #0
   188cc:	mov	r0, r1
   188d0:	bl	11c90 <error@plt>
   188d4:	ldrb	r2, [sp, #499]	; 0x1f3
   188d8:	ldr	r3, [pc, #1000]	; 18cc8 <__assert_fail@plt+0x6d80>
   188dc:	strb	r2, [r3, #1476]	; 0x5c4
   188e0:	cmp	r8, #0
   188e4:	bne	1897c <__assert_fail@plt+0x6a34>
   188e8:	ldr	r3, [pc, #984]	; 18cc8 <__assert_fail@plt+0x6d80>
   188ec:	ldr	r3, [r3, #1284]	; 0x504
   188f0:	cmp	r3, #0
   188f4:	beq	18a0c <__assert_fail@plt+0x6ac4>
   188f8:	cmp	r4, #0
   188fc:	beq	18a28 <__assert_fail@plt+0x6ae0>
   18900:	ldr	r3, [pc, #960]	; 18cc8 <__assert_fail@plt+0x6d80>
   18904:	ldr	r2, [r3, #1496]	; 0x5d8
   18908:	cmp	r2, #0
   1890c:	beq	18930 <__assert_fail@plt+0x69e8>
   18910:	ldr	r3, [pc, #952]	; 18cd0 <__assert_fail@plt+0x6d88>
   18914:	ldr	r1, [r3, #112]	; 0x70
   18918:	mov	r3, #18
   1891c:	mul	r3, r3, r1
   18920:	cmp	r3, r2
   18924:	movcc	r3, r2
   18928:	ldr	r2, [pc, #920]	; 18cc8 <__assert_fail@plt+0x6d80>
   1892c:	str	r3, [r2, #1496]	; 0x5d8
   18930:	cmp	r9, #0
   18934:	beq	18a4c <__assert_fail@plt+0x6b04>
   18938:	cmp	r4, #1
   1893c:	bls	18a68 <__assert_fail@plt+0x6b20>
   18940:	mov	r2, #5
   18944:	ldr	r1, [pc, #992]	; 18d2c <__assert_fail@plt+0x6de4>
   18948:	mov	r0, #0
   1894c:	bl	11b58 <dcgettext@plt>
   18950:	mov	r4, r0
   18954:	ldr	r3, [sp, #24]
   18958:	ldr	r1, [r3, #4]
   1895c:	mov	r0, #4
   18960:	bl	1e334 <__assert_fail@plt+0xc3ec>
   18964:	str	r9, [sp]
   18968:	mov	r3, r0
   1896c:	mov	r2, r4
   18970:	mov	r1, #0
   18974:	mov	r0, #2
   18978:	bl	11c90 <error@plt>
   1897c:	mov	r1, #16
   18980:	ldr	r0, [sp, #48]	; 0x30
   18984:	bl	1e620 <__assert_fail@plt+0xc6d8>
   18988:	subs	r5, r0, #0
   1898c:	beq	189d0 <__assert_fail@plt+0x6a88>
   18990:	mov	r2, #16
   18994:	add	r1, sp, #184	; 0xb8
   18998:	mov	r0, r5
   1899c:	bl	1e76c <__assert_fail@plt+0xc824>
   189a0:	mov	r0, r5
   189a4:	bl	1e8a4 <__assert_fail@plt+0xc95c>
   189a8:	cmp	r0, #0
   189ac:	bne	189f4 <__assert_fail@plt+0x6aac>
   189b0:	ldr	r5, [pc, #888]	; 18d30 <__assert_fail@plt+0x6de8>
   189b4:	mov	r0, r5
   189b8:	bl	19b30 <__assert_fail@plt+0x7be8>
   189bc:	mov	r2, r5
   189c0:	mov	r1, #16
   189c4:	add	r0, sp, #184	; 0xb8
   189c8:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   189cc:	b	188e8 <__assert_fail@plt+0x69a0>
   189d0:	mov	r2, #5
   189d4:	ldr	r1, [pc, #904]	; 18d64 <__assert_fail@plt+0x6e1c>
   189d8:	bl	11b58 <dcgettext@plt>
   189dc:	ldr	r1, [pc, #848]	; 18d34 <__assert_fail@plt+0x6dec>
   189e0:	ldr	r3, [sp, #48]	; 0x30
   189e4:	cmp	r3, #0
   189e8:	moveq	r3, r1
   189ec:	mov	r1, r3
   189f0:	bl	12bb8 <__assert_fail@plt+0xc70>
   189f4:	mov	r2, #5
   189f8:	ldr	r1, [pc, #824]	; 18d38 <__assert_fail@plt+0x6df0>
   189fc:	mov	r0, #0
   18a00:	bl	11b58 <dcgettext@plt>
   18a04:	ldr	r1, [sp, #48]	; 0x30
   18a08:	bl	12bb8 <__assert_fail@plt+0xc70>
   18a0c:	ldr	r0, [pc, #808]	; 18d3c <__assert_fail@plt+0x6df4>
   18a10:	bl	11cb4 <getenv@plt>
   18a14:	ldr	r3, [pc, #804]	; 18d40 <__assert_fail@plt+0x6df8>
   18a18:	cmp	r0, #0
   18a1c:	moveq	r0, r3
   18a20:	bl	12ec8 <__assert_fail@plt+0xf80>
   18a24:	b	188f8 <__assert_fail@plt+0x69b0>
   18a28:	ldr	r0, [sp, #24]
   18a2c:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   18a30:	mov	r0, #4
   18a34:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   18a38:	str	r0, [sp, #24]
   18a3c:	ldr	r3, [pc, #632]	; 18cbc <__assert_fail@plt+0x6d74>
   18a40:	str	r3, [r0]
   18a44:	mov	r4, #1
   18a48:	b	18900 <__assert_fail@plt+0x69b8>
   18a4c:	ldr	r3, [sp, #24]
   18a50:	str	r3, [sp, #56]	; 0x38
   18a54:	mov	r5, r3
   18a58:	mov	sl, #0
   18a5c:	ldr	r8, [pc, #600]	; 18cbc <__assert_fail@plt+0x6d74>
   18a60:	mov	r9, #4
   18a64:	b	18d70 <__assert_fail@plt+0x6e28>
   18a68:	ldr	r3, [sp, #36]	; 0x24
   18a6c:	cmp	r3, #0
   18a70:	beq	18a80 <__assert_fail@plt+0x6b38>
   18a74:	ldr	r0, [pc, #596]	; 18cd0 <__assert_fail@plt+0x6d88>
   18a78:	strb	r9, [r0, #128]!	; 0x80
   18a7c:	bl	12948 <__assert_fail@plt+0xa00>
   18a80:	ldr	r3, [sp, #24]
   18a84:	ldr	r8, [r3]
   18a88:	ldr	r1, [pc, #692]	; 18d44 <__assert_fail@plt+0x6dfc>
   18a8c:	mov	r0, r8
   18a90:	bl	12dc4 <__assert_fail@plt+0xe7c>
   18a94:	str	r0, [sp, #16]
   18a98:	ldr	r3, [pc, #552]	; 18cc8 <__assert_fail@plt+0x6d80>
   18a9c:	ldr	r2, [r3, #1280]	; 0x500
   18aa0:	str	r2, [sp, #24]
   18aa4:	ldrb	r2, [r3, #1297]	; 0x511
   18aa8:	eor	fp, r2, #1
   18aac:	ldr	r2, [r3, #1496]	; 0x5d8
   18ab0:	ldr	r3, [pc, #536]	; 18cd0 <__assert_fail@plt+0x6d88>
   18ab4:	ldr	r3, [r3, #104]	; 0x68
   18ab8:	cmp	r2, r3
   18abc:	movcc	r2, r3
   18ac0:	mov	r1, #16
   18ac4:	add	r0, sp, #184	; 0xb8
   18ac8:	bl	12f24 <__assert_fail@plt+0xfdc>
   18acc:	mov	r5, #0
   18ad0:	str	r5, [sp, #120]	; 0x78
   18ad4:	mov	r6, #0
   18ad8:	mov	r7, #0
   18adc:	mov	r2, r8
   18ae0:	ldr	r1, [sp, #16]
   18ae4:	add	r0, sp, #184	; 0xb8
   18ae8:	bl	13464 <__assert_fail@plt+0x151c>
   18aec:	cmp	r0, #0
   18af0:	beq	18cb0 <__assert_fail@plt+0x6d68>
   18af4:	ldr	r3, [sp, #196]	; 0xc4
   18af8:	ldr	r4, [sp, #184]	; 0xb8
   18afc:	add	r4, r4, r3
   18b00:	ldr	sl, [sp, #192]	; 0xc0
   18b04:	sub	sl, r4, sl, lsl #4
   18b08:	cmp	r5, #0
   18b0c:	bne	18b18 <__assert_fail@plt+0x6bd0>
   18b10:	mov	r1, r4
   18b14:	b	18c0c <__assert_fail@plt+0x6cc4>
   18b18:	sub	r1, r4, #16
   18b1c:	add	r0, sp, #120	; 0x78
   18b20:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   18b24:	cmp	fp, r0
   18b28:	bgt	18b10 <__assert_fail@plt+0x6bc8>
   18b2c:	cmp	r9, #99	; 0x63
   18b30:	movne	r4, #0
   18b34:	bne	18bd0 <__assert_fail@plt+0x6c88>
   18b38:	sub	r4, r4, #16
   18b3c:	ldr	r2, [sp, #196]	; 0xc4
   18b40:	ldr	r3, [sp, #184]	; 0xb8
   18b44:	add	r3, r3, r2
   18b48:	sub	r3, r3, r4
   18b4c:	asr	r3, r3, #4
   18b50:	adds	r6, r6, r3
   18b54:	adc	r7, r7, r3, asr #31
   18b58:	ldr	r5, [pc, #488]	; 18d48 <__assert_fail@plt+0x6e00>
   18b5c:	ldr	r9, [r5]
   18b60:	mov	r2, #5
   18b64:	ldr	r1, [pc, #480]	; 18d4c <__assert_fail@plt+0x6e04>
   18b68:	mov	r0, #0
   18b6c:	bl	11b58 <dcgettext@plt>
   18b70:	mov	fp, r0
   18b74:	ldr	r3, [pc, #468]	; 18d50 <__assert_fail@plt+0x6e08>
   18b78:	ldr	sl, [r3]
   18b7c:	add	r2, sp, #152	; 0x98
   18b80:	mov	r0, r6
   18b84:	mov	r1, r7
   18b88:	bl	1c27c <__assert_fail@plt+0xa334>
   18b8c:	str	r0, [sp, #4]
   18b90:	str	r8, [sp]
   18b94:	mov	r3, sl
   18b98:	mov	r2, fp
   18b9c:	mov	r1, #1
   18ba0:	mov	r0, r9
   18ba4:	bl	11dd4 <__fprintf_chk@plt>
   18ba8:	ldr	r5, [r5]
   18bac:	mov	r2, #5
   18bb0:	ldr	r1, [pc, #412]	; 18d54 <__assert_fail@plt+0x6e0c>
   18bb4:	mov	r0, #0
   18bb8:	bl	11b58 <dcgettext@plt>
   18bbc:	mov	r2, r0
   18bc0:	mov	r1, r5
   18bc4:	mov	r0, r4
   18bc8:	bl	12fbc <__assert_fail@plt+0x1074>
   18bcc:	mov	r4, #0
   18bd0:	mov	r1, r8
   18bd4:	ldr	r0, [sp, #16]
   18bd8:	bl	12df4 <__assert_fail@plt+0xeac>
   18bdc:	ldr	r0, [sp, #184]	; 0xb8
   18be0:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   18be4:	ldr	r0, [sp, #120]	; 0x78
   18be8:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   18bec:	eor	r0, r4, #1
   18bf0:	bl	11d38 <exit@plt>
   18bf4:	sub	r1, r1, #32
   18bf8:	mov	r0, r4
   18bfc:	bl	14dc4 <__assert_fail@plt+0x2e7c>
   18c00:	mov	r1, r4
   18c04:	cmp	fp, r0
   18c08:	ble	18b2c <__assert_fail@plt+0x6be4>
   18c0c:	sub	r4, r1, #16
   18c10:	cmp	sl, r4
   18c14:	bcc	18bf4 <__assert_fail@plt+0x6cac>
   18c18:	ldr	r3, [sp, #192]	; 0xc0
   18c1c:	adds	r6, r6, r3
   18c20:	adc	r7, r7, #0
   18c24:	ldr	sl, [r4, #4]
   18c28:	cmp	r5, sl
   18c2c:	bcs	18c5c <__assert_fail@plt+0x6d14>
   18c30:	lsls	r5, r5, #1
   18c34:	beq	18c44 <__assert_fail@plt+0x6cfc>
   18c38:	cmp	sl, r5
   18c3c:	bhi	18c30 <__assert_fail@plt+0x6ce8>
   18c40:	mov	sl, r5
   18c44:	ldr	r0, [sp, #120]	; 0x78
   18c48:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   18c4c:	mov	r0, sl
   18c50:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   18c54:	str	r0, [sp, #120]	; 0x78
   18c58:	mov	r5, sl
   18c5c:	ldr	r2, [r4, #4]
   18c60:	ldr	r1, [r4]
   18c64:	ldr	r0, [sp, #120]	; 0x78
   18c68:	bl	11ac8 <memcpy@plt>
   18c6c:	ldr	r3, [r4, #4]
   18c70:	str	r3, [sp, #124]	; 0x7c
   18c74:	ldr	r3, [sp, #24]
   18c78:	cmp	r3, #0
   18c7c:	beq	18adc <__assert_fail@plt+0x6b94>
   18c80:	ldr	r2, [sp, #120]	; 0x78
   18c84:	ldr	r3, [r4, #8]
   18c88:	ldr	r1, [r4]
   18c8c:	sub	r3, r3, r1
   18c90:	add	r3, r2, r3
   18c94:	str	r3, [sp, #128]	; 0x80
   18c98:	ldr	r3, [r4, #12]
   18c9c:	ldr	r1, [r4]
   18ca0:	sub	r3, r3, r1
   18ca4:	add	r2, r2, r3
   18ca8:	str	r2, [sp, #132]	; 0x84
   18cac:	b	18adc <__assert_fail@plt+0x6b94>
   18cb0:	mov	r4, #1
   18cb4:	b	18bd0 <__assert_fail@plt+0x6c88>
   18cb8:	muleq	r2, r0, r9
   18cbc:	andeq	r2, r2, r0, lsl #8
   18cc0:			; <UNDEFINED> instruction: 0x000239b0
   18cc4:	strdeq	r3, [r2], -r0
   18cc8:	andeq	r5, r3, r0, ror #5
   18ccc:	andeq	r3, r2, r8, lsl sl
   18cd0:	andeq	r5, r3, r4, ror #3
   18cd4:			; <UNDEFINED> instruction: 0x00022bb8
   18cd8:	andeq	r3, r2, r4, asr #20
   18cdc:	andeq	r3, r2, ip, lsr #20
   18ce0:	andeq	r2, r2, r8, ror #10
   18ce4:	andeq	r3, r2, r4, ror sl
   18ce8:	andeq	r3, r2, r4, ror #21
   18cec:	eoreq	r6, r0, sp, lsr #22
   18cf0:	andeq	r3, r2, ip, lsr #21
   18cf4:			; <UNDEFINED> instruction: 0x00023ab0
   18cf8:			; <UNDEFINED> instruction: 0x00023ab4
   18cfc:	andeq	r3, r2, r8, lsr #27
   18d00:	andeq	r3, r2, ip, lsr #22
   18d04:	andeq	r3, r2, r4, lsl ip
   18d08:	andeq	r3, r2, ip, asr fp
   18d0c:	andeq	r3, r2, ip, asr #24
   18d10:	andeq	r3, r2, r0, lsl #25
   18d14:	muleq	r2, ip, fp
   18d18:	ldrdeq	r3, [r2], -r8
   18d1c:	andeq	r3, r2, r8, lsl #25
   18d20:	ldrdeq	r3, [r2], -r0
   18d24:	andeq	r3, r2, ip, ror #25
   18d28:	andeq	r3, r2, r4, lsl #26
   18d2c:	andeq	r3, r2, r0, asr #26
   18d30:	andeq	r5, r3, r8, lsl #16
   18d34:			; <UNDEFINED> instruction: 0x000236b8
   18d38:	andeq	r2, r2, r0, ror r4
   18d3c:	andeq	r3, r2, r8, lsr sp
   18d40:	ldrdeq	r3, [r2], -r8
   18d44:	andeq	r2, r2, r4, asr #12
   18d48:	andeq	r5, r3, r8, asr #5
   18d4c:	andeq	r3, r2, r8, ror #26
   18d50:	ldrdeq	r5, [r3], -r0
   18d54:	andeq	r3, r2, r0, lsl #27
   18d58:	muleq	r2, r0, sp
   18d5c:			; <UNDEFINED> instruction: 0x000001b6
   18d60:	andeq	r0, r8, r1, asr #32
   18d64:	andeq	r2, r2, r4, asr r4
   18d68:	biceq	r1, r7, r1, ror ip
   18d6c:	add	sl, sl, #1
   18d70:	cmp	r4, sl
   18d74:	beq	18dc0 <__assert_fail@plt+0x6e78>
   18d78:	mov	r7, r5
   18d7c:	ldr	r6, [r5], #4
   18d80:	mov	r1, r8
   18d84:	mov	r0, r6
   18d88:	bl	11a2c <strcmp@plt>
   18d8c:	cmp	r0, #0
   18d90:	beq	18d6c <__assert_fail@plt+0x6e24>
   18d94:	mov	r1, r9
   18d98:	mov	r0, r6
   18d9c:	bl	11ec4 <euidaccess@plt>
   18da0:	cmp	r0, #0
   18da4:	beq	18d6c <__assert_fail@plt+0x6e24>
   18da8:	mov	r2, #5
   18dac:	ldr	r1, [pc, #-92]	; 18d58 <__assert_fail@plt+0x6e10>
   18db0:	mov	r0, #0
   18db4:	bl	11b58 <dcgettext@plt>
   18db8:	ldr	r1, [r7]
   18dbc:	bl	12bb8 <__assert_fail@plt+0xc70>
   18dc0:	ldr	r3, [sp, #36]	; 0x24
   18dc4:	cmp	r3, #0
   18dc8:	beq	18dec <__assert_fail@plt+0x6ea4>
   18dcc:	ldr	r2, [pc, #-120]	; 18d5c <__assert_fail@plt+0x6e14>
   18dd0:	ldr	r1, [pc, #-120]	; 18d60 <__assert_fail@plt+0x6e18>
   18dd4:	mov	r0, r3
   18dd8:	bl	11c9c <open64@plt>
   18ddc:	cmp	r0, #0
   18de0:	blt	18e24 <__assert_fail@plt+0x6edc>
   18de4:	mov	r1, #1
   18de8:	bl	13748 <__assert_fail@plt+0x1800>
   18dec:	ldr	r3, [sp, #44]	; 0x2c
   18df0:	cmp	r3, #0
   18df4:	beq	18e50 <__assert_fail@plt+0x6f08>
   18df8:	mov	r1, #8
   18dfc:	mov	r0, sl
   18e00:	bl	200dc <__assert_fail@plt+0xe194>
   18e04:	mov	r3, #0
   18e08:	ldr	r1, [sp, #24]
   18e0c:	cmp	r3, sl
   18e10:	beq	18e3c <__assert_fail@plt+0x6ef4>
   18e14:	ldr	r2, [r1, r3, lsl #2]
   18e18:	str	r2, [r0, r3, lsl #3]
   18e1c:	add	r3, r3, #1
   18e20:	b	18e0c <__assert_fail@plt+0x6ec4>
   18e24:	mov	r2, #5
   18e28:	ldr	r1, [pc, #-204]	; 18d64 <__assert_fail@plt+0x6e1c>
   18e2c:	mov	r0, #0
   18e30:	bl	11b58 <dcgettext@plt>
   18e34:	ldr	r1, [sp, #36]	; 0x24
   18e38:	bl	12bb8 <__assert_fail@plt+0xc70>
   18e3c:	ldr	r3, [sp, #36]	; 0x24
   18e40:	mov	r2, sl
   18e44:	mov	r1, #0
   18e48:	bl	15f0c <__assert_fail@plt+0x3fc4>
   18e4c:	b	19534 <__assert_fail@plt+0x75ec>
   18e50:	ldr	r3, [sp, #52]	; 0x34
   18e54:	cmp	r3, #0
   18e58:	beq	18eb0 <__assert_fail@plt+0x6f68>
   18e5c:	ldr	r3, [pc, #-252]	; 18d68 <__assert_fail@plt+0x6e20>
   18e60:	ldr	r2, [sp, #52]	; 0x34
   18e64:	cmp	r2, r3
   18e68:	movcc	r3, r2
   18e6c:	mov	r1, r3
   18e70:	str	r3, [sp, #24]
   18e74:	mov	r3, #0
   18e78:	str	r3, [sp, #164]	; 0xa4
   18e7c:	lsl	r2, r1, #1
   18e80:	mov	r0, r2
   18e84:	str	r2, [sp, #52]	; 0x34
   18e88:	mov	r2, #144	; 0x90
   18e8c:	mul	r2, r2, r1
   18e90:	str	r2, [sp, #76]	; 0x4c
   18e94:	sub	r2, r0, #1
   18e98:	str	r2, [sp, #60]	; 0x3c
   18e9c:	str	r3, [sp, #40]	; 0x28
   18ea0:	vldr	d10, [pc, #560]	; 190d8 <__assert_fail@plt+0x7190>
   18ea4:	vldr	d9, [pc, #564]	; 190e0 <__assert_fail@plt+0x7198>
   18ea8:	mov	r8, sl
   18eac:	b	19330 <__assert_fail@plt+0x73e8>
   18eb0:	mov	r0, #2
   18eb4:	bl	1c61c <__assert_fail@plt+0xa6d4>
   18eb8:	cmp	r0, #8
   18ebc:	movcc	r3, r0
   18ec0:	movcs	r3, #8
   18ec4:	str	r3, [sp, #52]	; 0x34
   18ec8:	b	18e5c <__assert_fail@plt+0x6f14>
   18ecc:	mov	r3, #24
   18ed0:	str	r3, [sp, #48]	; 0x30
   18ed4:	b	19390 <__assert_fail@plt+0x7448>
   18ed8:	add	r2, sp, #184	; 0xb8
   18edc:	mov	r1, r4
   18ee0:	mov	r0, #3
   18ee4:	bl	11f00 <__xstat64@plt>
   18ee8:	adds	r0, r0, #0
   18eec:	movne	r0, #1
   18ef0:	b	193d8 <__assert_fail@plt+0x7490>
   18ef4:	mov	r2, #5
   18ef8:	ldr	r1, [pc, #488]	; 190e8 <__assert_fail@plt+0x71a0>
   18efc:	mov	r0, #0
   18f00:	bl	11b58 <dcgettext@plt>
   18f04:	ldr	r3, [sp, #72]	; 0x48
   18f08:	ldr	r1, [r3, fp, lsl #2]
   18f0c:	bl	12bb8 <__assert_fail@plt+0xc70>
   18f10:	ldrd	r2, [sp, #232]	; 0xe8
   18f14:	strd	r2, [sp, #16]
   18f18:	ldr	r3, [r5, #1504]	; 0x5e0
   18f1c:	cmp	r3, #0
   18f20:	bne	19418 <__assert_fail@plt+0x74d0>
   18f24:	ldr	r3, [r5, #1496]	; 0x5d8
   18f28:	str	r3, [r5, #1504]	; 0x5e0
   18f2c:	cmp	r3, #0
   18f30:	bne	19418 <__assert_fail@plt+0x74d0>
   18f34:	b	18f74 <__assert_fail@plt+0x702c>
   18f38:	strd	r6, [sp, #80]	; 0x50
   18f3c:	mov	sl, r3
   18f40:	mov	r2, sl
   18f44:	ldr	r1, [sp, #48]	; 0x30
   18f48:	add	r0, sp, #152	; 0x98
   18f4c:	bl	12f24 <__assert_fail@plt+0xfdc>
   18f50:	mov	r3, #0
   18f54:	strb	r3, [sp, #176]	; 0xb0
   18f58:	sub	r8, r8, #1
   18f5c:	ldr	fp, [sp, #40]	; 0x28
   18f60:	b	19254 <__assert_fail@plt+0x730c>
   18f64:	mov	r3, #131072	; 0x20000
   18f68:	str	r3, [sp, #16]
   18f6c:	mov	r3, #0
   18f70:	str	r3, [sp, #20]
   18f74:	add	r1, sp, #120	; 0x78
   18f78:	mov	r0, #2
   18f7c:	bl	11b94 <getrlimit64@plt>
   18f80:	cmp	r0, #0
   18f84:	mvnne	r4, #0
   18f88:	bne	18fa8 <__assert_fail@plt+0x7060>
   18f8c:	ldrd	r2, [sp, #120]	; 0x78
   18f90:	mvn	r0, #1
   18f94:	mov	r1, #0
   18f98:	cmp	r3, r1
   18f9c:	cmpeq	r2, r0
   18fa0:	movls	r4, r2
   18fa4:	mvnhi	r4, #0
   18fa8:	add	r1, sp, #120	; 0x78
   18fac:	mov	r0, #9
   18fb0:	bl	11b94 <getrlimit64@plt>
   18fb4:	cmp	r0, #0
   18fb8:	bne	18fd0 <__assert_fail@plt+0x7088>
   18fbc:	ldrd	r2, [sp, #120]	; 0x78
   18fc0:	mov	r1, #0
   18fc4:	cmp	r3, r1
   18fc8:	cmpeq	r2, r4
   18fcc:	movcc	r4, r2
   18fd0:	lsr	r4, r4, #1
   18fd4:	add	r1, sp, #120	; 0x78
   18fd8:	mov	r0, #5
   18fdc:	bl	11b94 <getrlimit64@plt>
   18fe0:	cmp	r0, #0
   18fe4:	bne	19048 <__assert_fail@plt+0x7100>
   18fe8:	ldr	r3, [sp, #124]	; 0x7c
   18fec:	ldr	r2, [sp, #120]	; 0x78
   18ff0:	lsr	r6, r2, #4
   18ff4:	orr	r6, r6, r3, lsl #28
   18ff8:	lsr	r7, r3, #4
   18ffc:	adds	r2, r6, r6
   19000:	adc	r3, r7, r7
   19004:	adds	r2, r2, r6
   19008:	adc	r3, r3, r7
   1900c:	lsl	r1, r3, #2
   19010:	orr	r1, r1, r2, lsr #30
   19014:	str	r1, [sp, #68]	; 0x44
   19018:	lsl	r1, r2, #2
   1901c:	str	r1, [sp, #64]	; 0x40
   19020:	ldrd	r0, [sp, #64]	; 0x40
   19024:	adds	r0, r0, r2
   19028:	adc	r1, r1, r3
   1902c:	mov	r2, r0
   19030:	mov	r3, r1
   19034:	mov	r1, #0
   19038:	cmp	r3, r1
   1903c:	cmpeq	r2, r4
   19040:	movcc	r4, #15
   19044:	mulcc	r4, r4, r6
   19048:	bl	1c770 <__assert_fail@plt+0xa828>
   1904c:	vmov.f64	d8, d0
   19050:	bl	1c6e8 <__assert_fail@plt+0xa7a0>
   19054:	vmul.f64	d7, d0, d10
   19058:	vcmpe.f64	d8, d7
   1905c:	vmrs	APSR_nzcv, fpscr
   19060:	vmovle.f64	d8, d7
   19064:	vmul.f64	d0, d0, d9
   19068:	vmov	s15, r4
   1906c:	vcvt.f64.u32	d6, s15
   19070:	vcmpe.f64	d0, d6
   19074:	vmrs	APSR_nzcv, fpscr
   19078:	vcvtmi.u32.f64	s15, d0
   1907c:	vmovmi	r4, s15
   19080:	vmov	s15, r4
   19084:	vcvt.f64.u32	d7, s15
   19088:	vcmpe.f64	d7, d8
   1908c:	vmrs	APSR_nzcv, fpscr
   19090:	vcvtgt.u32.f64	s15, d8
   19094:	vmovgt	r4, s15
   19098:	mov	r3, #18
   1909c:	ldr	r2, [r9, #112]	; 0x70
   190a0:	mul	r3, r3, r2
   190a4:	cmp	r3, r4
   190a8:	movcs	r4, r3
   190ac:	str	r4, [r5, #1504]	; 0x5e0
   190b0:	b	19418 <__assert_fail@plt+0x74d0>
   190b4:	strd	r6, [sp, #80]	; 0x50
   190b8:	ldr	r3, [pc, #72]	; 19108 <__assert_fail@plt+0x71c0>
   190bc:	ldr	r3, [r3, #1504]	; 0x5e0
   190c0:	b	18f3c <__assert_fail@plt+0x6ff4>
   190c4:	strd	r6, [sp, #80]	; 0x50
   190c8:	b	18f40 <__assert_fail@plt+0x6ff8>
   190cc:	str	fp, [sp, #40]	; 0x28
   190d0:	str	r0, [sp, #168]	; 0xa8
   190d4:	b	19324 <__assert_fail@plt+0x73dc>
   190d8:	andeq	r0, r0, r0
   190dc:	svccc	0x00c00000
   190e0:	andeq	r0, r0, r0
   190e4:	svccc	0x00e80000
   190e8:	muleq	r2, ip, sp
   190ec:	muleq	r1, r8, r7
   190f0:	andeq	r2, r2, r0, asr #11
   190f4:	andeq	r2, r2, r4, asr #12
   190f8:	andeq	r5, r3, r4, ror #3
   190fc:	ldrdeq	r5, [r3], -r0
   19100:	andeq	r2, r2, r0, ror r4
   19104:	andeq	r2, r2, r0, lsl #8
   19108:	andeq	r5, r3, r0, ror #5
   1910c:	add	fp, fp, #1
   19110:	mov	r1, #0
   19114:	add	r0, sp, #120	; 0x78
   19118:	bl	13c5c <__assert_fail@plt+0x1d14>
   1911c:	add	r7, r0, #9
   19120:	ldr	r6, [sp, #44]	; 0x2c
   19124:	ldr	r3, [sp, #160]	; 0xa0
   19128:	cmp	r3, #1
   1912c:	bls	19308 <__assert_fail@plt+0x73c0>
   19130:	ldr	r1, [sp, #52]	; 0x34
   19134:	ldr	r0, [pc, #-80]	; 190ec <__assert_fail@plt+0x71a4>
   19138:	bl	1bfc8 <__assert_fail@plt+0xa080>
   1913c:	add	r9, sp, #568	; 0x238
   19140:	str	r0, [r9, #-384]!	; 0xfffffe80
   19144:	mov	r1, #0
   19148:	add	r0, sp, #188	; 0xbc
   1914c:	bl	11ae0 <pthread_mutex_init@plt>
   19150:	mov	r1, #0
   19154:	add	r0, sp, #216	; 0xd8
   19158:	bl	11b64 <pthread_cond_init@plt>
   1915c:	ldr	sl, [sp, #160]	; 0xa0
   19160:	ldr	r0, [sp, #76]	; 0x4c
   19164:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   19168:	mov	r4, r0
   1916c:	mov	r5, #0
   19170:	str	r5, [r0, #12]
   19174:	str	r5, [r0, #8]
   19178:	str	r5, [r0, #4]
   1917c:	str	r5, [r0]
   19180:	str	r5, [r0, #16]
   19184:	str	sl, [r0, #24]
   19188:	str	sl, [r0, #20]
   1918c:	str	r5, [r0, #28]
   19190:	str	r5, [r0, #40]	; 0x28
   19194:	strb	r5, [r0, #44]	; 0x2c
   19198:	mov	r1, r5
   1919c:	add	r0, r0, #48	; 0x30
   191a0:	bl	11ae0 <pthread_mutex_init@plt>
   191a4:	add	r3, r4, #72	; 0x48
   191a8:	mov	ip, r3
   191ac:	str	r5, [sp, #4]
   191b0:	str	sl, [sp]
   191b4:	ldr	r3, [sp, #24]
   191b8:	ldr	sl, [sp, #16]
   191bc:	mov	r2, sl
   191c0:	mov	r5, ip
   191c4:	mov	r1, ip
   191c8:	mov	r0, r4
   191cc:	bl	13e90 <__assert_fail@plt+0x1f48>
   191d0:	str	r7, [sp, #8]
   191d4:	ldr	r3, [sp, #120]	; 0x78
   191d8:	str	r3, [sp, #4]
   191dc:	str	r9, [sp]
   191e0:	mov	r3, r5
   191e4:	ldr	r2, [sp, #160]	; 0xa0
   191e8:	ldr	r1, [sp, #24]
   191ec:	mov	r0, sl
   191f0:	bl	150c8 <__assert_fail@plt+0x3180>
   191f4:	ldr	r3, [sp, #52]	; 0x34
   191f8:	cmp	r3, #0
   191fc:	beq	19220 <__assert_fail@plt+0x72d8>
   19200:	add	r9, r4, #48	; 0x30
   19204:	ldr	r5, [sp, #60]	; 0x3c
   19208:	mov	r0, r9
   1920c:	bl	11a5c <pthread_mutex_destroy@plt>
   19210:	sub	r5, r5, #1
   19214:	add	r9, r9, #72	; 0x48
   19218:	cmn	r5, #1
   1921c:	bne	19208 <__assert_fail@plt+0x72c0>
   19220:	mov	r0, r4
   19224:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   19228:	ldr	r0, [sp, #184]	; 0xb8
   1922c:	bl	1c024 <__assert_fail@plt+0xa0dc>
   19230:	add	r0, sp, #216	; 0xd8
   19234:	bl	11bd0 <pthread_cond_destroy@plt>
   19238:	add	r0, sp, #188	; 0xbc
   1923c:	bl	11a5c <pthread_mutex_destroy@plt>
   19240:	mov	r1, r7
   19244:	ldr	r0, [sp, #120]	; 0x78
   19248:	bl	12df4 <__assert_fail@plt+0xeac>
   1924c:	cmp	r6, #0
   19250:	bne	194a8 <__assert_fail@plt+0x7560>
   19254:	ldr	r2, [sp, #32]
   19258:	ldr	r1, [sp, #28]
   1925c:	add	r0, sp, #152	; 0x98
   19260:	bl	13464 <__assert_fail@plt+0x151c>
   19264:	cmp	r0, #0
   19268:	beq	19320 <__assert_fail@plt+0x73d8>
   1926c:	ldrb	r6, [sp, #176]	; 0xb0
   19270:	cmp	r8, #0
   19274:	moveq	r3, #0
   19278:	andne	r3, r6, #1
   1927c:	cmp	r3, #0
   19280:	beq	192ac <__assert_fail@plt+0x7364>
   19284:	ldr	r0, [sp, #156]	; 0x9c
   19288:	ldr	ip, [sp, #48]	; 0x30
   1928c:	add	r2, ip, #1
   19290:	ldr	r3, [sp, #164]	; 0xa4
   19294:	sub	r3, r3, r0
   19298:	ldr	r1, [sp, #160]	; 0xa0
   1929c:	mul	r1, r1, ip
   192a0:	sub	r3, r3, r1
   192a4:	cmp	r2, r3
   192a8:	bcc	190cc <__assert_fail@plt+0x7184>
   192ac:	mov	r3, #0
   192b0:	ldr	r2, [pc, #-432]	; 19108 <__assert_fail@plt+0x71c0>
   192b4:	str	r3, [r2, #1480]	; 0x5c8
   192b8:	ldr	r3, [sp, #164]	; 0xa4
   192bc:	ldr	r2, [sp, #152]	; 0x98
   192c0:	add	r3, r2, r3
   192c4:	str	r3, [sp, #16]
   192c8:	cmp	r6, #0
   192cc:	beq	1910c <__assert_fail@plt+0x71c4>
   192d0:	orrs	r3, r8, fp
   192d4:	bne	1910c <__assert_fail@plt+0x71c4>
   192d8:	ldr	r3, [sp, #168]	; 0xa8
   192dc:	cmp	r3, #0
   192e0:	bne	1910c <__assert_fail@plt+0x71c4>
   192e4:	ldr	r1, [sp, #32]
   192e8:	ldr	r0, [sp, #28]
   192ec:	bl	12df4 <__assert_fail@plt+0xeac>
   192f0:	ldr	r1, [pc, #-520]	; 190f0 <__assert_fail@plt+0x71a8>
   192f4:	ldr	r7, [sp, #36]	; 0x24
   192f8:	mov	r0, r7
   192fc:	bl	12dc4 <__assert_fail@plt+0xe7c>
   19300:	str	r0, [sp, #120]	; 0x78
   19304:	b	19124 <__assert_fail@plt+0x71dc>
   19308:	mov	r2, r7
   1930c:	ldr	r1, [sp, #120]	; 0x78
   19310:	ldr	r3, [sp, #16]
   19314:	sub	r0, r3, #16
   19318:	bl	15060 <__assert_fail@plt+0x3118>
   1931c:	b	19240 <__assert_fail@plt+0x72f8>
   19320:	str	fp, [sp, #40]	; 0x28
   19324:	ldr	r1, [sp, #32]
   19328:	ldr	r0, [sp, #28]
   1932c:	bl	12df4 <__assert_fail@plt+0xeac>
   19330:	ldr	r3, [sp, #56]	; 0x38
   19334:	str	r3, [sp, #72]	; 0x48
   19338:	cmp	r8, #0
   1933c:	beq	194bc <__assert_fail@plt+0x7574>
   19340:	ldr	r3, [sp, #56]	; 0x38
   19344:	ldr	r2, [r3], #4
   19348:	str	r2, [sp, #32]
   1934c:	str	r3, [sp, #56]	; 0x38
   19350:	ldr	r1, [pc, #-612]	; 190f4 <__assert_fail@plt+0x71ac>
   19354:	mov	r0, r2
   19358:	bl	12dc4 <__assert_fail@plt+0xe7c>
   1935c:	str	r0, [sp, #28]
   19360:	ldr	r3, [sp, #24]
   19364:	cmp	r3, #1
   19368:	bls	18ecc <__assert_fail@plt+0x6f84>
   1936c:	mov	r3, #1
   19370:	mov	r2, r3
   19374:	lsl	r2, r2, #1
   19378:	add	r3, r3, #1
   1937c:	ldr	r1, [sp, #24]
   19380:	cmp	r1, r2
   19384:	bhi	19374 <__assert_fail@plt+0x742c>
   19388:	lsl	r3, r3, #4
   1938c:	str	r3, [sp, #48]	; 0x30
   19390:	ldr	fp, [sp, #164]	; 0xa4
   19394:	cmp	fp, #0
   19398:	bne	18f50 <__assert_fail@plt+0x7008>
   1939c:	ldr	r3, [sp, #48]	; 0x30
   193a0:	add	r2, r3, #1
   193a4:	str	r2, [sp, #88]	; 0x58
   193a8:	add	sl, r3, #2
   193ac:	ldr	r9, [pc, #-700]	; 190f8 <__assert_fail@plt+0x71b0>
   193b0:	ldrd	r6, [sp, #80]	; 0x50
   193b4:	ldr	r0, [sp, #28]
   193b8:	bl	11dc8 <fileno@plt>
   193bc:	add	r2, sp, #184	; 0xb8
   193c0:	mov	r1, r0
   193c4:	mov	r0, #3
   193c8:	bl	11bf4 <__fxstat64@plt>
   193cc:	adds	r0, r0, #0
   193d0:	movne	r0, #1
   193d4:	ldr	r5, [pc, #-724]	; 19108 <__assert_fail@plt+0x71c0>
   193d8:	cmp	r0, #0
   193dc:	bne	18ef4 <__assert_fail@plt+0x6fac>
   193e0:	ldr	r3, [sp, #200]	; 0xc8
   193e4:	and	r3, r3, #61440	; 0xf000
   193e8:	cmp	r3, #32768	; 0x8000
   193ec:	beq	18f10 <__assert_fail@plt+0x6fc8>
   193f0:	ldr	r3, [r5, #1496]	; 0x5d8
   193f4:	cmp	r3, #0
   193f8:	bne	18f38 <__assert_fail@plt+0x6ff0>
   193fc:	ldr	r3, [r5, #1504]	; 0x5e0
   19400:	cmp	r3, #0
   19404:	beq	18f64 <__assert_fail@plt+0x701c>
   19408:	mov	r3, #131072	; 0x20000
   1940c:	str	r3, [sp, #16]
   19410:	mov	r3, #0
   19414:	str	r3, [sp, #20]
   19418:	ldr	r1, [sp, #16]
   1941c:	ldr	r3, [sp, #88]	; 0x58
   19420:	mul	r4, r1, r3
   19424:	add	r4, r4, #1
   19428:	mov	r1, r3
   1942c:	mov	r0, r4
   19430:	bl	21578 <_obstack_memory_used@@Base+0x94>
   19434:	mov	r1, #0
   19438:	ldrd	r2, [sp, #16]
   1943c:	cmp	r1, r3
   19440:	cmpeq	r0, r2
   19444:	bne	190b4 <__assert_fail@plt+0x716c>
   19448:	ldr	r3, [r5, #1504]	; 0x5e0
   1944c:	sub	r3, r3, sl
   19450:	cmp	r4, r3
   19454:	bcs	190b4 <__assert_fail@plt+0x716c>
   19458:	add	sl, sl, r4
   1945c:	add	fp, fp, #1
   19460:	cmp	r8, fp
   19464:	beq	190c4 <__assert_fail@plt+0x717c>
   19468:	cmp	fp, #0
   1946c:	beq	193b4 <__assert_fail@plt+0x746c>
   19470:	ldr	r3, [sp, #72]	; 0x48
   19474:	ldr	r4, [r3, fp, lsl #2]
   19478:	ldr	r1, [pc, #-892]	; 19104 <__assert_fail@plt+0x71bc>
   1947c:	mov	r0, r4
   19480:	bl	11a2c <strcmp@plt>
   19484:	cmp	r0, #0
   19488:	bne	18ed8 <__assert_fail@plt+0x6f90>
   1948c:	add	r2, sp, #184	; 0xb8
   19490:	mov	r1, #0
   19494:	mov	r0, #3
   19498:	bl	11bf4 <__fxstat64@plt>
   1949c:	adds	r0, r0, #0
   194a0:	movne	r0, #1
   194a4:	b	193d8 <__assert_fail@plt+0x7490>
   194a8:	ldr	r0, [sp, #152]	; 0x98
   194ac:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   194b0:	ldr	r5, [pc, #-944]	; 19108 <__assert_fail@plt+0x71c0>
   194b4:	mvn	r4, #0
   194b8:	b	19528 <__assert_fail@plt+0x75e0>
   194bc:	ldr	r0, [sp, #152]	; 0x98
   194c0:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   194c4:	ldr	r3, [pc, #-964]	; 19108 <__assert_fail@plt+0x71c0>
   194c8:	ldr	r4, [r3, #1160]	; 0x488
   194cc:	mov	r1, #8
   194d0:	ldr	r0, [sp, #40]	; 0x28
   194d4:	bl	1fd08 <__assert_fail@plt+0xddc0>
   194d8:	mov	r5, r0
   194dc:	mov	r3, r0
   194e0:	add	r3, r3, #8
   194e4:	cmp	r4, #0
   194e8:	beq	19500 <__assert_fail@plt+0x75b8>
   194ec:	add	r2, r4, #9
   194f0:	str	r2, [r3, #-8]
   194f4:	str	r4, [r3, #-4]
   194f8:	ldr	r4, [r4]
   194fc:	b	194e0 <__assert_fail@plt+0x7598>
   19500:	ldr	r3, [sp, #36]	; 0x24
   19504:	ldr	r1, [sp, #40]	; 0x28
   19508:	mov	r2, r1
   1950c:	mov	r0, r5
   19510:	bl	15f0c <__assert_fail@plt+0x3fc4>
   19514:	mov	r0, r5
   19518:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1951c:	b	194b0 <__assert_fail@plt+0x7568>
   19520:	mov	r0, r4
   19524:	bl	137a4 <__assert_fail@plt+0x185c>
   19528:	ldr	r3, [r5, #1308]	; 0x51c
   1952c:	cmp	r3, #0
   19530:	bgt	19520 <__assert_fail@plt+0x75d8>
   19534:	ldr	r3, [pc, #-1076]	; 19108 <__assert_fail@plt+0x71c0>
   19538:	ldrb	r3, [r3, #1276]	; 0x4fc
   1953c:	cmp	r3, #0
   19540:	beq	19558 <__assert_fail@plt+0x7610>
   19544:	ldr	r3, [pc, #-1104]	; 190fc <__assert_fail@plt+0x71b4>
   19548:	ldr	r0, [r3]
   1954c:	bl	1a934 <__assert_fail@plt+0x89ec>
   19550:	cmn	r0, #1
   19554:	beq	19560 <__assert_fail@plt+0x7618>
   19558:	mov	r0, #0
   1955c:	bl	11d38 <exit@plt>
   19560:	mov	r2, #5
   19564:	ldr	r1, [pc, #-1132]	; 19100 <__assert_fail@plt+0x71b8>
   19568:	mov	r0, #0
   1956c:	bl	11b58 <dcgettext@plt>
   19570:	ldr	r1, [pc, #-1140]	; 19104 <__assert_fail@plt+0x71bc>
   19574:	bl	12bb8 <__assert_fail@plt+0xc70>
   19578:	cmp	r0, #2
   1957c:	bne	17a04 <__assert_fail@plt+0x5abc>
   19580:	ldr	r3, [sp, #152]	; 0x98
   19584:	ldrb	r2, [r3, #-1]
   19588:	sub	r2, r2, #48	; 0x30
   1958c:	cmp	r2, #9
   19590:	bhi	17a04 <__assert_fail@plt+0x5abc>
   19594:	ldrb	r2, [r3, #1]
   19598:	cmp	r2, #0
   1959c:	bne	17a04 <__assert_fail@plt+0x5abc>
   195a0:	ldrb	r3, [r3]
   195a4:	cmp	r3, #37	; 0x25
   195a8:	beq	179c8 <__assert_fail@plt+0x5a80>
   195ac:	cmp	r3, #98	; 0x62
   195b0:	beq	17970 <__assert_fail@plt+0x5a28>
   195b4:	b	17a04 <__assert_fail@plt+0x5abc>
   195b8:	mov	r0, #1
   195bc:	b	17a04 <__assert_fail@plt+0x5abc>
   195c0:	add	r0, sp, #468	; 0x1d4
   195c4:	bl	1260c <__assert_fail@plt+0x6c4>
   195c8:	cmp	r0, #0
   195cc:	beq	17ef8 <__assert_fail@plt+0x5fb0>
   195d0:	ldr	r3, [pc, #-1232]	; 19108 <__assert_fail@plt+0x71c0>
   195d4:	ldrb	r3, [r3, #1296]	; 0x510
   195d8:	cmp	r3, #0
   195dc:	movne	r8, #0
   195e0:	strne	r8, [sp, #40]	; 0x28
   195e4:	bne	17f7c <__assert_fail@plt+0x6034>
   195e8:	ldrb	r2, [sp, #499]	; 0x1f3
   195ec:	ldr	r3, [pc, #-1260]	; 19108 <__assert_fail@plt+0x71c0>
   195f0:	strb	r2, [r3, #1476]	; 0x5c4
   195f4:	b	188e8 <__assert_fail@plt+0x69a0>
   195f8:	ldr	r3, [pc, #-1272]	; 19108 <__assert_fail@plt+0x71c0>
   195fc:	ldr	r3, [r3, #1280]	; 0x500
   19600:	cmp	r3, #0
   19604:	bne	18834 <__assert_fail@plt+0x68ec>
   19608:	b	18884 <__assert_fail@plt+0x693c>
   1960c:	ldr	r3, [r8]
   19610:	cmp	r3, #0
   19614:	beq	17388 <__assert_fail@plt+0x5440>
   19618:	b	17248 <__assert_fail@plt+0x5300>
   1961c:	ldr	r3, [pc, #-1308]	; 19108 <__assert_fail@plt+0x71c0>
   19620:	ldr	r0, [r3, #1280]	; 0x500
   19624:	mov	r3, #0
   19628:	str	r3, [sp, #40]	; 0x28
   1962c:	ldrb	r3, [r0, #28]
   19630:	ldrb	r2, [r0, #26]
   19634:	add	r3, r3, r2
   19638:	ldrb	r2, [r0, #29]
   1963c:	add	r3, r3, r2
   19640:	ldrb	r2, [r0, #30]
   19644:	add	r2, r3, r2
   19648:	ldrb	r3, [r0, #32]
   1964c:	ldrb	r1, [r0, #27]
   19650:	orr	r3, r3, r1
   19654:	ldr	r1, [r0, #16]
   19658:	cmp	r1, #0
   1965c:	orrne	r3, r3, #1
   19660:	add	r3, r2, r3
   19664:	cmp	r3, #1
   19668:	ble	17f60 <__assert_fail@plt+0x6018>
   1966c:	mov	r3, #0
   19670:	strb	r3, [r0, #31]
   19674:	strb	r3, [r0, #25]
   19678:	strb	r3, [r0, #24]
   1967c:	add	r1, sp, #184	; 0xb8
   19680:	bl	1269c <__assert_fail@plt+0x754>
   19684:	add	r0, sp, #184	; 0xb8
   19688:	bl	12948 <__assert_fail@plt+0xa00>
   1968c:	push	{r4, lr}
   19690:	mov	r0, #1
   19694:	bl	16340 <__assert_fail@plt+0x43f8>
   19698:	pop	{r4, pc}
   1969c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196a0:	sub	sp, sp, #12
   196a4:	str	r0, [sp, #4]
   196a8:	mov	r6, r1
   196ac:	mov	fp, r2
   196b0:	mov	r8, r3
   196b4:	bl	11d50 <strlen@plt>
   196b8:	str	r0, [sp]
   196bc:	ldr	r4, [r6]
   196c0:	cmp	r4, #0
   196c4:	beq	1976c <__assert_fail@plt+0x7824>
   196c8:	mov	r5, fp
   196cc:	mov	sl, #0
   196d0:	mvn	r9, #0
   196d4:	mov	r7, sl
   196d8:	b	196f8 <__assert_fail@plt+0x77b0>
   196dc:	mov	r9, r7
   196e0:	b	19760 <__assert_fail@plt+0x7818>
   196e4:	add	r7, r7, #1
   196e8:	ldr	r4, [r6, #4]!
   196ec:	add	r5, r5, r8
   196f0:	cmp	r4, #0
   196f4:	beq	19758 <__assert_fail@plt+0x7810>
   196f8:	ldr	r2, [sp]
   196fc:	ldr	r1, [sp, #4]
   19700:	mov	r0, r4
   19704:	bl	11f0c <strncmp@plt>
   19708:	cmp	r0, #0
   1970c:	bne	196e4 <__assert_fail@plt+0x779c>
   19710:	mov	r0, r4
   19714:	bl	11d50 <strlen@plt>
   19718:	ldr	r3, [sp]
   1971c:	cmp	r3, r0
   19720:	beq	196dc <__assert_fail@plt+0x7794>
   19724:	cmn	r9, #1
   19728:	moveq	r9, r7
   1972c:	beq	196e4 <__assert_fail@plt+0x779c>
   19730:	cmp	fp, #0
   19734:	moveq	sl, #1
   19738:	beq	196e4 <__assert_fail@plt+0x779c>
   1973c:	mov	r2, r8
   19740:	mov	r1, r5
   19744:	mla	r0, r8, r9, fp
   19748:	bl	11b40 <memcmp@plt>
   1974c:	cmp	r0, #0
   19750:	movne	sl, #1
   19754:	b	196e4 <__assert_fail@plt+0x779c>
   19758:	cmp	sl, #0
   1975c:	mvnne	r9, #1
   19760:	mov	r0, r9
   19764:	add	sp, sp, #12
   19768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1976c:	mvn	r9, #0
   19770:	b	19760 <__assert_fail@plt+0x7818>
   19774:	push	{r4, r5, r6, lr}
   19778:	mov	r6, r0
   1977c:	ldr	r0, [r1]
   19780:	cmp	r0, #0
   19784:	beq	197c0 <__assert_fail@plt+0x7878>
   19788:	mov	r4, r1
   1978c:	mov	r5, #0
   19790:	mov	r1, r6
   19794:	bl	11a2c <strcmp@plt>
   19798:	cmp	r0, #0
   1979c:	beq	197b8 <__assert_fail@plt+0x7870>
   197a0:	add	r5, r5, #1
   197a4:	ldr	r0, [r4, #4]!
   197a8:	cmp	r0, #0
   197ac:	bne	19790 <__assert_fail@plt+0x7848>
   197b0:	mvn	r0, #0
   197b4:	pop	{r4, r5, r6, pc}
   197b8:	mov	r0, r5
   197bc:	pop	{r4, r5, r6, pc}
   197c0:	mvn	r0, #0
   197c4:	pop	{r4, r5, r6, pc}
   197c8:	push	{r4, r5, r6, lr}
   197cc:	sub	sp, sp, #8
   197d0:	mov	r5, r0
   197d4:	mov	r4, r1
   197d8:	cmn	r2, #1
   197dc:	mov	r2, #5
   197e0:	ldreq	r1, [pc, #76]	; 19834 <__assert_fail@plt+0x78ec>
   197e4:	ldrne	r1, [pc, #76]	; 19838 <__assert_fail@plt+0x78f0>
   197e8:	mov	r0, #0
   197ec:	bl	11b58 <dcgettext@plt>
   197f0:	mov	r6, r0
   197f4:	mov	r2, r4
   197f8:	mov	r1, #8
   197fc:	mov	r0, #0
   19800:	bl	1e2c8 <__assert_fail@plt+0xc380>
   19804:	mov	r4, r0
   19808:	mov	r1, r5
   1980c:	mov	r0, #1
   19810:	bl	1e558 <__assert_fail@plt+0xc610>
   19814:	str	r0, [sp]
   19818:	mov	r3, r4
   1981c:	mov	r2, r6
   19820:	mov	r1, #0
   19824:	mov	r0, r1
   19828:	bl	11c90 <error@plt>
   1982c:	add	sp, sp, #8
   19830:	pop	{r4, r5, r6, pc}
   19834:	andeq	r4, r2, r8, lsr r0
   19838:	andeq	r4, r2, r4, asr r0
   1983c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19840:	mov	r7, r0
   19844:	mov	r4, r1
   19848:	mov	r8, r2
   1984c:	mov	r2, #5
   19850:	ldr	r1, [pc, #224]	; 19938 <__assert_fail@plt+0x79f0>
   19854:	mov	r0, #0
   19858:	bl	11b58 <dcgettext@plt>
   1985c:	ldr	r3, [pc, #216]	; 1993c <__assert_fail@plt+0x79f4>
   19860:	ldr	r1, [r3]
   19864:	bl	11a14 <fputs_unlocked@plt>
   19868:	ldr	r5, [r7]
   1986c:	cmp	r5, #0
   19870:	beq	19900 <__assert_fail@plt+0x79b8>
   19874:	mov	r9, #0
   19878:	mov	r6, r9
   1987c:	ldr	sl, [pc, #184]	; 1993c <__assert_fail@plt+0x79f4>
   19880:	b	198bc <__assert_fail@plt+0x7974>
   19884:	ldr	r9, [sl]
   19888:	mov	r0, r5
   1988c:	bl	1e568 <__assert_fail@plt+0xc620>
   19890:	mov	r3, r0
   19894:	ldr	r2, [pc, #164]	; 19940 <__assert_fail@plt+0x79f8>
   19898:	mov	r1, #1
   1989c:	mov	r0, r9
   198a0:	bl	11dd4 <__fprintf_chk@plt>
   198a4:	mov	r9, r4
   198a8:	add	r6, r6, #1
   198ac:	ldr	r5, [r7, #4]!
   198b0:	add	r4, r4, r8
   198b4:	cmp	r5, #0
   198b8:	beq	19900 <__assert_fail@plt+0x79b8>
   198bc:	cmp	r6, #0
   198c0:	beq	19884 <__assert_fail@plt+0x793c>
   198c4:	mov	r2, r8
   198c8:	mov	r1, r4
   198cc:	mov	r0, r9
   198d0:	bl	11b40 <memcmp@plt>
   198d4:	cmp	r0, #0
   198d8:	bne	19884 <__assert_fail@plt+0x793c>
   198dc:	ldr	fp, [sl]
   198e0:	mov	r0, r5
   198e4:	bl	1e568 <__assert_fail@plt+0xc620>
   198e8:	mov	r3, r0
   198ec:	ldr	r2, [pc, #80]	; 19944 <__assert_fail@plt+0x79fc>
   198f0:	mov	r1, #1
   198f4:	mov	r0, fp
   198f8:	bl	11dd4 <__fprintf_chk@plt>
   198fc:	b	198a8 <__assert_fail@plt+0x7960>
   19900:	ldr	r3, [pc, #52]	; 1993c <__assert_fail@plt+0x79f4>
   19904:	ldr	r0, [r3]
   19908:	ldr	r3, [r0, #20]
   1990c:	ldr	r2, [r0, #24]
   19910:	cmp	r3, r2
   19914:	bcs	1992c <__assert_fail@plt+0x79e4>
   19918:	add	r2, r3, #1
   1991c:	str	r2, [r0, #20]
   19920:	mov	r2, #10
   19924:	strb	r2, [r3]
   19928:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1992c:	mov	r1, #10
   19930:	bl	11e1c <__overflow@plt>
   19934:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19938:	andeq	r4, r2, r4, ror r0
   1993c:	andeq	r5, r3, r8, asr #5
   19940:	andeq	r4, r2, ip, lsl #1
   19944:	muleq	r2, r4, r0
   19948:	push	{r4, r5, r6, r7, r8, lr}
   1994c:	mov	r7, r0
   19950:	mov	r5, r1
   19954:	mov	r4, r2
   19958:	mov	r6, r3
   1995c:	ldrb	r3, [sp, #32]
   19960:	cmp	r3, #0
   19964:	beq	199b4 <__assert_fail@plt+0x7a6c>
   19968:	ldr	r3, [sp, #24]
   1996c:	mov	r2, r6
   19970:	mov	r1, r4
   19974:	mov	r0, r5
   19978:	bl	1969c <__assert_fail@plt+0x7754>
   1997c:	cmp	r0, #0
   19980:	popge	{r4, r5, r6, r7, r8, pc}
   19984:	mov	r2, r0
   19988:	mov	r1, r5
   1998c:	mov	r0, r7
   19990:	bl	197c8 <__assert_fail@plt+0x7880>
   19994:	ldr	r2, [sp, #24]
   19998:	mov	r1, r6
   1999c:	mov	r0, r4
   199a0:	bl	1983c <__assert_fail@plt+0x78f4>
   199a4:	ldr	r3, [sp, #28]
   199a8:	blx	r3
   199ac:	mvn	r0, #0
   199b0:	pop	{r4, r5, r6, r7, r8, pc}
   199b4:	mov	r1, r2
   199b8:	mov	r0, r5
   199bc:	bl	19774 <__assert_fail@plt+0x782c>
   199c0:	b	1997c <__assert_fail@plt+0x7a34>
   199c4:	push	{r4, r5, r6, r7, r8, lr}
   199c8:	ldr	r6, [r1]
   199cc:	cmp	r6, #0
   199d0:	beq	19a14 <__assert_fail@plt+0x7acc>
   199d4:	mov	r7, r3
   199d8:	mov	r8, r0
   199dc:	mov	r4, r2
   199e0:	mov	r5, r1
   199e4:	mov	r2, r7
   199e8:	mov	r1, r4
   199ec:	mov	r0, r8
   199f0:	bl	11b40 <memcmp@plt>
   199f4:	cmp	r0, #0
   199f8:	beq	19a0c <__assert_fail@plt+0x7ac4>
   199fc:	ldr	r6, [r5, #4]!
   19a00:	add	r4, r4, r7
   19a04:	cmp	r6, #0
   19a08:	bne	199e4 <__assert_fail@plt+0x7a9c>
   19a0c:	mov	r0, r6
   19a10:	pop	{r4, r5, r6, r7, r8, pc}
   19a14:	mov	r6, #0
   19a18:	b	19a0c <__assert_fail@plt+0x7ac4>
   19a1c:	ldr	r3, [pc, #4]	; 19a28 <__assert_fail@plt+0x7ae0>
   19a20:	str	r0, [r3]
   19a24:	bx	lr
   19a28:	andeq	r5, r3, r4, asr #17
   19a2c:	ldr	r3, [pc, #4]	; 19a38 <__assert_fail@plt+0x7af0>
   19a30:	strb	r0, [r3, #4]
   19a34:	bx	lr
   19a38:	andeq	r5, r3, r4, asr #17
   19a3c:	push	{r4, r5, r6, lr}
   19a40:	sub	sp, sp, #8
   19a44:	ldr	r3, [pc, #200]	; 19b14 <__assert_fail@plt+0x7bcc>
   19a48:	ldr	r0, [r3]
   19a4c:	bl	20ae4 <__assert_fail@plt+0xeb9c>
   19a50:	cmp	r0, #0
   19a54:	beq	19a78 <__assert_fail@plt+0x7b30>
   19a58:	ldr	r3, [pc, #184]	; 19b18 <__assert_fail@plt+0x7bd0>
   19a5c:	ldrb	r3, [r3, #4]
   19a60:	cmp	r3, #0
   19a64:	beq	19a94 <__assert_fail@plt+0x7b4c>
   19a68:	bl	11d74 <__errno_location@plt>
   19a6c:	ldr	r3, [r0]
   19a70:	cmp	r3, #32
   19a74:	bne	19a94 <__assert_fail@plt+0x7b4c>
   19a78:	ldr	r3, [pc, #156]	; 19b1c <__assert_fail@plt+0x7bd4>
   19a7c:	ldr	r0, [r3]
   19a80:	bl	20ae4 <__assert_fail@plt+0xeb9c>
   19a84:	cmp	r0, #0
   19a88:	bne	19b08 <__assert_fail@plt+0x7bc0>
   19a8c:	add	sp, sp, #8
   19a90:	pop	{r4, r5, r6, pc}
   19a94:	mov	r2, #5
   19a98:	ldr	r1, [pc, #128]	; 19b20 <__assert_fail@plt+0x7bd8>
   19a9c:	mov	r0, #0
   19aa0:	bl	11b58 <dcgettext@plt>
   19aa4:	mov	r4, r0
   19aa8:	ldr	r3, [pc, #104]	; 19b18 <__assert_fail@plt+0x7bd0>
   19aac:	ldr	r5, [r3]
   19ab0:	cmp	r5, #0
   19ab4:	beq	19aec <__assert_fail@plt+0x7ba4>
   19ab8:	bl	11d74 <__errno_location@plt>
   19abc:	ldr	r6, [r0]
   19ac0:	mov	r0, r5
   19ac4:	bl	1e3e0 <__assert_fail@plt+0xc498>
   19ac8:	str	r4, [sp]
   19acc:	mov	r3, r0
   19ad0:	ldr	r2, [pc, #76]	; 19b24 <__assert_fail@plt+0x7bdc>
   19ad4:	mov	r1, r6
   19ad8:	mov	r0, #0
   19adc:	bl	11c90 <error@plt>
   19ae0:	ldr	r3, [pc, #64]	; 19b28 <__assert_fail@plt+0x7be0>
   19ae4:	ldr	r0, [r3]
   19ae8:	bl	11abc <_exit@plt>
   19aec:	bl	11d74 <__errno_location@plt>
   19af0:	mov	r3, r4
   19af4:	ldr	r2, [pc, #48]	; 19b2c <__assert_fail@plt+0x7be4>
   19af8:	ldr	r1, [r0]
   19afc:	mov	r0, #0
   19b00:	bl	11c90 <error@plt>
   19b04:	b	19ae0 <__assert_fail@plt+0x7b98>
   19b08:	ldr	r3, [pc, #24]	; 19b28 <__assert_fail@plt+0x7be0>
   19b0c:	ldr	r0, [r3]
   19b10:	bl	11abc <_exit@plt>
   19b14:	ldrdeq	r5, [r3], -r4
   19b18:	andeq	r5, r3, r4, asr #17
   19b1c:	andeq	r5, r3, r8, asr #5
   19b20:	muleq	r2, ip, r0
   19b24:	strdeq	r2, [r2], -r8
   19b28:	andeq	r5, r3, r0, ror r2
   19b2c:	andeq	r2, r2, r8, ror #10
   19b30:	ldr	r3, [pc, #44]	; 19b64 <__assert_fail@plt+0x7c1c>
   19b34:	str	r3, [r0]
   19b38:	ldr	r3, [pc, #40]	; 19b68 <__assert_fail@plt+0x7c20>
   19b3c:	str	r3, [r0, #4]
   19b40:	ldr	r3, [pc, #36]	; 19b6c <__assert_fail@plt+0x7c24>
   19b44:	str	r3, [r0, #8]
   19b48:	ldr	r3, [pc, #32]	; 19b70 <__assert_fail@plt+0x7c28>
   19b4c:	str	r3, [r0, #12]
   19b50:	mov	r3, #0
   19b54:	str	r3, [r0, #20]
   19b58:	str	r3, [r0, #16]
   19b5c:	str	r3, [r0, #24]
   19b60:	bx	lr
   19b64:	strbvs	r2, [r5, -r1, lsl #6]
   19b68:	svc	0x00cdab89
   19b6c:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   19b70:	eorsne	r5, r2, r6, ror r4
   19b74:	ldr	r3, [r0]
   19b78:	str	r3, [r1]
   19b7c:	ldr	r3, [r0, #4]
   19b80:	str	r3, [r1, #4]
   19b84:	ldr	r3, [r0, #8]
   19b88:	str	r3, [r1, #8]
   19b8c:	ldr	r3, [r0, #12]
   19b90:	str	r3, [r1, #12]
   19b94:	mov	r0, r1
   19b98:	bx	lr
   19b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ba0:	sub	sp, sp, #76	; 0x4c
   19ba4:	mov	ip, r2
   19ba8:	str	r2, [sp, #68]	; 0x44
   19bac:	bic	r3, r1, #3
   19bb0:	add	r3, r0, r3
   19bb4:	mov	lr, r3
   19bb8:	str	r3, [sp, #64]	; 0x40
   19bbc:	ldr	r2, [r2]
   19bc0:	str	r2, [sp, #48]	; 0x30
   19bc4:	ldr	r7, [ip, #4]
   19bc8:	ldr	r5, [ip, #8]
   19bcc:	ldr	r2, [ip, #12]
   19bd0:	str	r2, [sp, #12]
   19bd4:	ldr	r3, [ip, #16]
   19bd8:	add	r3, r1, r3
   19bdc:	str	r3, [ip, #16]
   19be0:	ldr	r2, [ip, #20]
   19be4:	cmp	r1, r3
   19be8:	movls	r3, r2
   19bec:	addhi	r3, r2, #1
   19bf0:	str	r3, [ip, #20]
   19bf4:	cmp	r0, lr
   19bf8:	bcs	1a554 <__assert_fail@plt+0x860c>
   19bfc:	mov	lr, r0
   19c00:	str	r7, [sp, #16]
   19c04:	str	r5, [sp, #20]
   19c08:	ldr	r3, [lr]
   19c0c:	mov	fp, r3
   19c10:	ldr	r3, [sp, #48]	; 0x30
   19c14:	add	r3, r3, #-687865856	; 0xd7000000
   19c18:	add	r3, r3, #6946816	; 0x6a0000
   19c1c:	add	r3, r3, #41984	; 0xa400
   19c20:	add	r3, r3, #120	; 0x78
   19c24:	add	r2, r3, fp
   19c28:	ldr	r0, [sp, #20]
   19c2c:	mov	r3, r0
   19c30:	ldr	r1, [sp, #12]
   19c34:	eor	r3, r3, r1
   19c38:	ldr	r5, [sp, #16]
   19c3c:	and	r3, r3, r5
   19c40:	eor	r3, r3, r1
   19c44:	add	r3, r3, r2
   19c48:	add	r3, r5, r3, ror #25
   19c4c:	ldr	r2, [lr, #4]
   19c50:	add	r1, r1, #-402653184	; 0xe8000000
   19c54:	add	r1, r1, #13041664	; 0xc70000
   19c58:	add	r1, r1, #46848	; 0xb700
   19c5c:	add	r1, r1, #86	; 0x56
   19c60:	str	r2, [sp, #24]
   19c64:	add	r2, r1, r2
   19c68:	mov	r1, r0
   19c6c:	eor	r1, r1, r5
   19c70:	and	r1, r1, r3
   19c74:	eor	r1, r1, r0
   19c78:	add	r1, r1, r2
   19c7c:	add	r1, r3, r1, ror #20
   19c80:	ldr	r4, [lr, #8]
   19c84:	mov	r7, r4
   19c88:	add	r0, r0, #603979776	; 0x24000000
   19c8c:	add	r0, r0, #2113536	; 0x204000
   19c90:	add	r0, r0, #12480	; 0x30c0
   19c94:	add	r0, r0, #27
   19c98:	add	ip, r0, r4
   19c9c:	eor	r0, r3, r5
   19ca0:	and	r0, r0, r1
   19ca4:	eor	r0, r0, r5
   19ca8:	add	r0, r0, ip
   19cac:	add	r0, r1, r0, ror #15
   19cb0:	ldr	r4, [lr, #12]
   19cb4:	mov	r8, r4
   19cb8:	ldr	ip, [pc, #2232]	; 1a578 <__assert_fail@plt+0x8630>
   19cbc:	add	ip, r5, ip
   19cc0:	add	ip, ip, r4
   19cc4:	eor	r2, r3, r1
   19cc8:	and	r2, r2, r0
   19ccc:	eor	r2, r2, r3
   19cd0:	add	r2, r2, ip
   19cd4:	add	r2, r0, r2, ror #10
   19cd8:	ldr	r4, [lr, #16]
   19cdc:	ldr	ip, [pc, #2200]	; 1a57c <__assert_fail@plt+0x8634>
   19ce0:	str	r4, [sp, #28]
   19ce4:	add	ip, r4, ip
   19ce8:	add	ip, ip, r3
   19cec:	eor	r3, r1, r0
   19cf0:	and	r3, r3, r2
   19cf4:	eor	r3, r3, r1
   19cf8:	add	r3, r3, ip
   19cfc:	add	r3, r2, r3, ror #25
   19d00:	ldr	r5, [lr, #20]
   19d04:	mov	r6, r5
   19d08:	ldr	ip, [pc, #2160]	; 1a580 <__assert_fail@plt+0x8638>
   19d0c:	add	ip, r5, ip
   19d10:	add	r1, ip, r1
   19d14:	eor	ip, r0, r2
   19d18:	and	ip, ip, r3
   19d1c:	eor	ip, ip, r0
   19d20:	add	r1, ip, r1
   19d24:	add	r1, r3, r1, ror #20
   19d28:	ldr	r5, [lr, #24]
   19d2c:	ldr	ip, [pc, #2128]	; 1a584 <__assert_fail@plt+0x863c>
   19d30:	add	ip, r5, ip
   19d34:	add	r0, ip, r0
   19d38:	eor	ip, r2, r3
   19d3c:	and	ip, ip, r1
   19d40:	eor	ip, ip, r2
   19d44:	add	ip, ip, r0
   19d48:	add	ip, r1, ip, ror #15
   19d4c:	ldr	r9, [lr, #28]
   19d50:	str	r9, [sp, #32]
   19d54:	ldr	r0, [pc, #2092]	; 1a588 <__assert_fail@plt+0x8640>
   19d58:	add	r0, r9, r0
   19d5c:	add	r2, r0, r2
   19d60:	eor	r0, r3, r1
   19d64:	and	r0, r0, ip
   19d68:	eor	r0, r0, r3
   19d6c:	add	r2, r0, r2
   19d70:	add	r2, ip, r2, ror #10
   19d74:	ldr	r9, [lr, #32]
   19d78:	str	r9, [sp, #36]	; 0x24
   19d7c:	ldr	r0, [pc, #2056]	; 1a58c <__assert_fail@plt+0x8644>
   19d80:	add	r0, r9, r0
   19d84:	add	r3, r0, r3
   19d88:	eor	r0, r1, ip
   19d8c:	and	r0, r0, r2
   19d90:	eor	r0, r0, r1
   19d94:	add	r3, r0, r3
   19d98:	add	r3, r2, r3, ror #25
   19d9c:	ldr	r4, [lr, #36]	; 0x24
   19da0:	ldr	r0, [pc, #2024]	; 1a590 <__assert_fail@plt+0x8648>
   19da4:	str	r4, [sp, #40]	; 0x28
   19da8:	add	r0, r4, r0
   19dac:	add	r0, r0, r1
   19db0:	eor	r1, ip, r2
   19db4:	and	r1, r1, r3
   19db8:	eor	r1, r1, ip
   19dbc:	add	r1, r1, r0
   19dc0:	add	r1, r3, r1, ror #20
   19dc4:	ldr	r4, [lr, #40]	; 0x28
   19dc8:	str	r4, [sp, #44]	; 0x2c
   19dcc:	sub	r0, r4, #41984	; 0xa400
   19dd0:	sub	r0, r0, #79	; 0x4f
   19dd4:	add	ip, r0, ip
   19dd8:	eor	r0, r2, r3
   19ddc:	and	r0, r0, r1
   19de0:	eor	r0, r0, r2
   19de4:	add	r0, r0, ip
   19de8:	add	r0, r1, r0, ror #15
   19dec:	ldr	ip, [lr, #44]	; 0x2c
   19df0:	mov	sl, ip
   19df4:	add	ip, ip, #-1996488704	; 0x89000000
   19df8:	add	ip, ip, #6029312	; 0x5c0000
   19dfc:	add	ip, ip, #55040	; 0xd700
   19e00:	add	ip, ip, #190	; 0xbe
   19e04:	add	r2, ip, r2
   19e08:	eor	ip, r3, r1
   19e0c:	and	ip, ip, r0
   19e10:	eor	ip, ip, r3
   19e14:	add	r2, ip, r2
   19e18:	add	r2, r0, r2, ror #10
   19e1c:	ldr	r9, [lr, #48]	; 0x30
   19e20:	ldr	ip, [pc, #1900]	; 1a594 <__assert_fail@plt+0x864c>
   19e24:	add	ip, r9, ip
   19e28:	add	r3, ip, r3
   19e2c:	eor	ip, r1, r0
   19e30:	and	ip, ip, r2
   19e34:	eor	ip, ip, r1
   19e38:	add	r3, ip, r3
   19e3c:	add	r3, r2, r3, ror #25
   19e40:	ldr	ip, [lr, #52]	; 0x34
   19e44:	str	ip, [sp, #4]
   19e48:	ldr	ip, [pc, #1864]	; 1a598 <__assert_fail@plt+0x8650>
   19e4c:	ldr	r4, [sp, #4]
   19e50:	add	ip, r4, ip
   19e54:	add	ip, ip, r1
   19e58:	eor	r1, r0, r2
   19e5c:	and	r1, r1, r3
   19e60:	eor	r1, r1, r0
   19e64:	add	r1, r1, ip
   19e68:	add	r1, r3, r1, ror #20
   19e6c:	ldr	ip, [lr, #56]	; 0x38
   19e70:	str	ip, [sp, #8]
   19e74:	add	ip, ip, #-1509949440	; 0xa6000000
   19e78:	add	ip, ip, #7929856	; 0x790000
   19e7c:	add	ip, ip, #17152	; 0x4300
   19e80:	add	ip, ip, #142	; 0x8e
   19e84:	add	r0, ip, r0
   19e88:	eor	ip, r2, r3
   19e8c:	and	ip, ip, r1
   19e90:	eor	ip, ip, r2
   19e94:	add	r0, ip, r0
   19e98:	add	r0, r1, r0, ror #15
   19e9c:	ldr	r4, [lr, #60]	; 0x3c
   19ea0:	ldr	ip, [pc, #1780]	; 1a59c <__assert_fail@plt+0x8654>
   19ea4:	add	ip, r4, ip
   19ea8:	add	ip, ip, r2
   19eac:	eor	r2, r3, r1
   19eb0:	and	r2, r2, r0
   19eb4:	eor	r2, r2, r3
   19eb8:	add	r2, r2, ip
   19ebc:	add	lr, lr, #64	; 0x40
   19ec0:	add	r2, r0, r2, ror #10
   19ec4:	ldr	ip, [sp, #24]
   19ec8:	add	ip, ip, #-167772160	; 0xf6000000
   19ecc:	add	ip, ip, #1966080	; 0x1e0000
   19ed0:	add	ip, ip, #9536	; 0x2540
   19ed4:	add	ip, ip, #34	; 0x22
   19ed8:	add	r3, ip, r3
   19edc:	eor	ip, r0, r2
   19ee0:	and	ip, ip, r1
   19ee4:	eor	ip, ip, r0
   19ee8:	add	r3, ip, r3
   19eec:	add	r3, r2, r3, ror #27
   19ef0:	ldr	ip, [pc, #1704]	; 1a5a0 <__assert_fail@plt+0x8658>
   19ef4:	add	ip, r5, ip
   19ef8:	add	ip, ip, r1
   19efc:	eor	r1, r2, r3
   19f00:	and	r1, r1, r0
   19f04:	eor	r1, r1, r2
   19f08:	add	r1, r1, ip
   19f0c:	add	r1, r3, r1, ror #23
   19f10:	ldr	ip, [pc, #1676]	; 1a5a4 <__assert_fail@plt+0x865c>
   19f14:	add	ip, sl, ip
   19f18:	add	ip, ip, r0
   19f1c:	eor	r0, r3, r1
   19f20:	and	r0, r0, r2
   19f24:	eor	r0, r0, r3
   19f28:	add	r0, r0, ip
   19f2c:	add	r0, r1, r0, ror #18
   19f30:	ldr	ip, [pc, #1648]	; 1a5a8 <__assert_fail@plt+0x8660>
   19f34:	str	fp, [sp, #52]	; 0x34
   19f38:	add	ip, fp, ip
   19f3c:	add	ip, ip, r2
   19f40:	eor	r2, r1, r0
   19f44:	and	r2, r2, r3
   19f48:	eor	r2, r2, r1
   19f4c:	add	r2, r2, ip
   19f50:	add	r2, r0, r2, ror #12
   19f54:	ldr	ip, [pc, #1616]	; 1a5ac <__assert_fail@plt+0x8664>
   19f58:	add	ip, r6, ip
   19f5c:	add	ip, ip, r3
   19f60:	eor	r3, r0, r2
   19f64:	and	r3, r3, r1
   19f68:	eor	r3, r3, r0
   19f6c:	add	r3, r3, ip
   19f70:	add	r3, r2, r3, ror #27
   19f74:	ldr	ip, [pc, #1588]	; 1a5b0 <__assert_fail@plt+0x8668>
   19f78:	ldr	fp, [sp, #44]	; 0x2c
   19f7c:	add	ip, fp, ip
   19f80:	add	ip, ip, r1
   19f84:	eor	r1, r2, r3
   19f88:	and	r1, r1, r0
   19f8c:	eor	r1, r1, r2
   19f90:	add	r1, r1, ip
   19f94:	add	r1, r3, r1, ror #23
   19f98:	ldr	ip, [pc, #1556]	; 1a5b4 <__assert_fail@plt+0x866c>
   19f9c:	add	ip, r4, ip
   19fa0:	add	ip, ip, r0
   19fa4:	eor	r0, r3, r1
   19fa8:	and	r0, r0, r2
   19fac:	eor	r0, r0, r3
   19fb0:	add	r0, r0, ip
   19fb4:	add	r0, r1, r0, ror #18
   19fb8:	ldr	ip, [pc, #1528]	; 1a5b8 <__assert_fail@plt+0x8670>
   19fbc:	ldr	fp, [sp, #28]
   19fc0:	add	ip, fp, ip
   19fc4:	add	ip, ip, r2
   19fc8:	eor	r2, r1, r0
   19fcc:	and	r2, r2, r3
   19fd0:	eor	r2, r2, r1
   19fd4:	add	r2, r2, ip
   19fd8:	add	r2, r0, r2, ror #12
   19fdc:	ldr	ip, [pc, #1496]	; 1a5bc <__assert_fail@plt+0x8674>
   19fe0:	ldr	fp, [sp, #40]	; 0x28
   19fe4:	add	ip, fp, ip
   19fe8:	add	ip, ip, r3
   19fec:	eor	r3, r0, r2
   19ff0:	and	r3, r3, r1
   19ff4:	eor	r3, r3, r0
   19ff8:	add	r3, r3, ip
   19ffc:	add	r3, r2, r3, ror #27
   1a000:	ldr	ip, [pc, #1464]	; 1a5c0 <__assert_fail@plt+0x8678>
   1a004:	ldr	fp, [sp, #8]
   1a008:	add	ip, fp, ip
   1a00c:	add	ip, ip, r1
   1a010:	eor	r1, r2, r3
   1a014:	and	r1, r1, r0
   1a018:	eor	r1, r1, r2
   1a01c:	add	r1, r1, ip
   1a020:	add	r1, r3, r1, ror #23
   1a024:	ldr	ip, [pc, #1432]	; 1a5c4 <__assert_fail@plt+0x867c>
   1a028:	add	ip, r8, ip
   1a02c:	add	r0, ip, r0
   1a030:	eor	ip, r3, r1
   1a034:	and	ip, ip, r2
   1a038:	eor	ip, ip, r3
   1a03c:	add	r0, ip, r0
   1a040:	add	r0, r1, r0, ror #18
   1a044:	ldr	ip, [pc, #1404]	; 1a5c8 <__assert_fail@plt+0x8680>
   1a048:	ldr	fp, [sp, #36]	; 0x24
   1a04c:	add	ip, fp, ip
   1a050:	add	r2, ip, r2
   1a054:	eor	ip, r1, r0
   1a058:	and	ip, ip, r3
   1a05c:	eor	ip, ip, r1
   1a060:	add	r2, ip, r2
   1a064:	add	r2, r0, r2, ror #12
   1a068:	ldr	ip, [pc, #1372]	; 1a5cc <__assert_fail@plt+0x8684>
   1a06c:	ldr	fp, [sp, #4]
   1a070:	add	ip, fp, ip
   1a074:	add	r3, ip, r3
   1a078:	eor	ip, r0, r2
   1a07c:	and	ip, ip, r1
   1a080:	eor	ip, ip, r0
   1a084:	add	r3, ip, r3
   1a088:	add	r3, r2, r3, ror #27
   1a08c:	ldr	ip, [pc, #1340]	; 1a5d0 <__assert_fail@plt+0x8688>
   1a090:	add	ip, r7, ip
   1a094:	add	r1, ip, r1
   1a098:	eor	ip, r2, r3
   1a09c:	and	ip, ip, r0
   1a0a0:	eor	ip, ip, r2
   1a0a4:	add	r1, ip, r1
   1a0a8:	add	r1, r3, r1, ror #23
   1a0ac:	ldr	ip, [pc, #1312]	; 1a5d4 <__assert_fail@plt+0x868c>
   1a0b0:	ldr	fp, [sp, #32]
   1a0b4:	add	ip, fp, ip
   1a0b8:	add	r0, ip, r0
   1a0bc:	eor	ip, r3, r1
   1a0c0:	and	ip, ip, r2
   1a0c4:	eor	ip, ip, r3
   1a0c8:	add	ip, ip, r0
   1a0cc:	add	ip, r1, ip, ror #18
   1a0d0:	eor	r0, r1, ip
   1a0d4:	ldr	fp, [pc, #1276]	; 1a5d8 <__assert_fail@plt+0x8690>
   1a0d8:	add	fp, r9, fp
   1a0dc:	add	fp, fp, r2
   1a0e0:	and	r2, r3, r0
   1a0e4:	eor	r2, r2, r1
   1a0e8:	add	r2, r2, fp
   1a0ec:	add	r2, ip, r2, ror #12
   1a0f0:	ldr	fp, [pc, #1252]	; 1a5dc <__assert_fail@plt+0x8694>
   1a0f4:	add	fp, r6, fp
   1a0f8:	add	r3, fp, r3
   1a0fc:	eor	r0, r0, r2
   1a100:	add	r3, r0, r3
   1a104:	add	r3, r2, r3, ror #28
   1a108:	ldr	r0, [pc, #1232]	; 1a5e0 <__assert_fail@plt+0x8698>
   1a10c:	ldr	fp, [sp, #36]	; 0x24
   1a110:	add	r0, fp, r0
   1a114:	add	r0, r0, r1
   1a118:	eor	r1, ip, r2
   1a11c:	eor	r1, r1, r3
   1a120:	add	r1, r1, r0
   1a124:	add	r1, r3, r1, ror #21
   1a128:	ldr	r0, [pc, #1204]	; 1a5e4 <__assert_fail@plt+0x869c>
   1a12c:	str	sl, [sp, #60]	; 0x3c
   1a130:	add	r0, sl, r0
   1a134:	add	r0, r0, ip
   1a138:	eor	ip, r2, r3
   1a13c:	eor	ip, ip, r1
   1a140:	add	ip, ip, r0
   1a144:	add	ip, r1, ip, ror #16
   1a148:	ldr	r0, [pc, #1176]	; 1a5e8 <__assert_fail@plt+0x86a0>
   1a14c:	ldr	sl, [sp, #8]
   1a150:	add	r0, sl, r0
   1a154:	add	r2, r0, r2
   1a158:	eor	r0, r3, r1
   1a15c:	eor	r0, r0, ip
   1a160:	add	r2, r0, r2
   1a164:	add	r2, ip, r2, ror #9
   1a168:	ldr	r0, [pc, #1148]	; 1a5ec <__assert_fail@plt+0x86a4>
   1a16c:	ldr	fp, [sp, #24]
   1a170:	add	r0, fp, r0
   1a174:	add	r0, r0, r3
   1a178:	eor	r3, r1, ip
   1a17c:	eor	r3, r3, r2
   1a180:	add	r3, r3, r0
   1a184:	add	r3, r2, r3, ror #28
   1a188:	ldr	r0, [pc, #1120]	; 1a5f0 <__assert_fail@plt+0x86a8>
   1a18c:	ldr	fp, [sp, #28]
   1a190:	add	r0, fp, r0
   1a194:	add	r0, r0, r1
   1a198:	eor	r1, ip, r2
   1a19c:	eor	r1, r1, r3
   1a1a0:	add	r1, r1, r0
   1a1a4:	add	r1, r3, r1, ror #21
   1a1a8:	ldr	r0, [pc, #1092]	; 1a5f4 <__assert_fail@plt+0x86ac>
   1a1ac:	ldr	sl, [sp, #32]
   1a1b0:	add	r0, sl, r0
   1a1b4:	add	ip, r0, ip
   1a1b8:	eor	r0, r2, r3
   1a1bc:	eor	r0, r0, r1
   1a1c0:	add	ip, r0, ip
   1a1c4:	add	ip, r1, ip, ror #16
   1a1c8:	ldr	r0, [pc, #1064]	; 1a5f8 <__assert_fail@plt+0x86b0>
   1a1cc:	ldr	sl, [sp, #44]	; 0x2c
   1a1d0:	add	r0, sl, r0
   1a1d4:	add	r2, r0, r2
   1a1d8:	eor	r0, r3, r1
   1a1dc:	eor	r0, r0, ip
   1a1e0:	add	r0, r0, r2
   1a1e4:	add	r0, ip, r0, ror #9
   1a1e8:	ldr	r2, [pc, #1036]	; 1a5fc <__assert_fail@plt+0x86b4>
   1a1ec:	ldr	sl, [sp, #4]
   1a1f0:	add	r2, sl, r2
   1a1f4:	add	r2, r2, r3
   1a1f8:	eor	r3, r1, ip
   1a1fc:	eor	r3, r3, r0
   1a200:	add	r3, r3, r2
   1a204:	add	r3, r0, r3, ror #28
   1a208:	ldr	r2, [pc, #1008]	; 1a600 <__assert_fail@plt+0x86b8>
   1a20c:	ldr	fp, [sp, #52]	; 0x34
   1a210:	add	r2, fp, r2
   1a214:	add	r1, r2, r1
   1a218:	eor	r2, ip, r0
   1a21c:	eor	r2, r2, r3
   1a220:	add	r2, r2, r1
   1a224:	add	r2, r3, r2, ror #21
   1a228:	ldr	r1, [pc, #980]	; 1a604 <__assert_fail@plt+0x86bc>
   1a22c:	str	r8, [sp, #52]	; 0x34
   1a230:	add	r1, r8, r1
   1a234:	add	ip, r1, ip
   1a238:	eor	r1, r0, r3
   1a23c:	eor	r1, r1, r2
   1a240:	add	r1, r1, ip
   1a244:	add	r1, r2, r1, ror #16
   1a248:	ldr	ip, [pc, #952]	; 1a608 <__assert_fail@plt+0x86c0>
   1a24c:	str	r5, [sp, #56]	; 0x38
   1a250:	add	ip, r5, ip
   1a254:	add	ip, ip, r0
   1a258:	eor	r0, r3, r2
   1a25c:	eor	r0, r0, r1
   1a260:	add	r0, r0, ip
   1a264:	add	r0, r1, r0, ror #9
   1a268:	ldr	ip, [pc, #924]	; 1a60c <__assert_fail@plt+0x86c4>
   1a26c:	ldr	r8, [sp, #40]	; 0x28
   1a270:	add	ip, r8, ip
   1a274:	add	ip, ip, r3
   1a278:	eor	r3, r2, r1
   1a27c:	eor	r3, r3, r0
   1a280:	add	r3, r3, ip
   1a284:	add	r3, r0, r3, ror #28
   1a288:	ldr	ip, [pc, #896]	; 1a610 <__assert_fail@plt+0x86c8>
   1a28c:	mov	r8, r9
   1a290:	add	ip, r9, ip
   1a294:	add	r2, ip, r2
   1a298:	eor	ip, r1, r0
   1a29c:	eor	ip, ip, r3
   1a2a0:	add	r2, ip, r2
   1a2a4:	add	r2, r3, r2, ror #21
   1a2a8:	ldr	ip, [pc, #868]	; 1a614 <__assert_fail@plt+0x86cc>
   1a2ac:	mov	r5, r4
   1a2b0:	add	ip, r4, ip
   1a2b4:	add	ip, ip, r1
   1a2b8:	eor	r1, r0, r3
   1a2bc:	eor	r1, r1, r2
   1a2c0:	add	r1, r1, ip
   1a2c4:	add	r1, r2, r1, ror #16
   1a2c8:	ldr	ip, [pc, #840]	; 1a618 <__assert_fail@plt+0x86d0>
   1a2cc:	add	ip, r7, ip
   1a2d0:	add	ip, ip, r0
   1a2d4:	eor	r0, r3, r2
   1a2d8:	eor	r0, r0, r1
   1a2dc:	add	r0, r0, ip
   1a2e0:	add	r0, r1, r0, ror #9
   1a2e4:	ldr	ip, [pc, #816]	; 1a61c <__assert_fail@plt+0x86d4>
   1a2e8:	add	ip, fp, ip
   1a2ec:	add	r3, ip, r3
   1a2f0:	mvn	ip, r2
   1a2f4:	orr	ip, ip, r0
   1a2f8:	eor	ip, ip, r1
   1a2fc:	add	r3, ip, r3
   1a300:	add	r3, r0, r3, ror #26
   1a304:	ldr	ip, [pc, #788]	; 1a620 <__assert_fail@plt+0x86d8>
   1a308:	ldr	r9, [sp, #32]
   1a30c:	add	ip, r9, ip
   1a310:	add	r2, ip, r2
   1a314:	mvn	sl, r1
   1a318:	orr	sl, sl, r3
   1a31c:	eor	sl, sl, r0
   1a320:	add	r2, sl, r2
   1a324:	add	r2, r3, r2, ror #22
   1a328:	ldr	ip, [pc, #756]	; 1a624 <__assert_fail@plt+0x86dc>
   1a32c:	ldr	r4, [sp, #8]
   1a330:	add	ip, r4, ip
   1a334:	add	r1, ip, r1
   1a338:	mvn	r9, r0
   1a33c:	orr	r9, r9, r2
   1a340:	eor	r9, r9, r3
   1a344:	add	r1, r9, r1
   1a348:	add	r1, r2, r1, ror #17
   1a34c:	ldr	ip, [pc, #724]	; 1a628 <__assert_fail@plt+0x86e0>
   1a350:	add	ip, r6, ip
   1a354:	add	r0, ip, r0
   1a358:	mvn	r9, r3
   1a35c:	orr	r9, r9, r1
   1a360:	eor	r9, r9, r2
   1a364:	add	r0, r9, r0
   1a368:	add	r0, r1, r0, ror #11
   1a36c:	ldr	ip, [pc, #696]	; 1a62c <__assert_fail@plt+0x86e4>
   1a370:	add	ip, r8, ip
   1a374:	add	r3, ip, r3
   1a378:	mvn	r8, r2
   1a37c:	orr	r8, r8, r0
   1a380:	eor	r8, r8, r1
   1a384:	add	r3, r8, r3
   1a388:	add	r3, r0, r3, ror #26
   1a38c:	ldr	ip, [pc, #668]	; 1a630 <__assert_fail@plt+0x86e8>
   1a390:	ldr	r8, [sp, #52]	; 0x34
   1a394:	add	ip, r8, ip
   1a398:	add	r2, ip, r2
   1a39c:	mvn	r8, r1
   1a3a0:	orr	r8, r8, r3
   1a3a4:	eor	r8, r8, r0
   1a3a8:	add	r2, r8, r2
   1a3ac:	add	r2, r3, r2, ror #22
   1a3b0:	ldr	ip, [pc, #636]	; 1a634 <__assert_fail@plt+0x86ec>
   1a3b4:	ldr	r4, [sp, #44]	; 0x2c
   1a3b8:	add	ip, r4, ip
   1a3bc:	add	r1, ip, r1
   1a3c0:	mvn	r6, r0
   1a3c4:	orr	r6, r6, r2
   1a3c8:	eor	r6, r6, r3
   1a3cc:	add	r1, r6, r1
   1a3d0:	add	r1, r2, r1, ror #17
   1a3d4:	ldr	ip, [pc, #604]	; 1a638 <__assert_fail@plt+0x86f0>
   1a3d8:	ldr	fp, [sp, #24]
   1a3dc:	add	ip, fp, ip
   1a3e0:	add	r0, ip, r0
   1a3e4:	mvn	r6, r3
   1a3e8:	orr	r6, r6, r1
   1a3ec:	eor	r6, r6, r2
   1a3f0:	add	r0, r6, r0
   1a3f4:	add	r0, r1, r0, ror #11
   1a3f8:	ldr	ip, [pc, #572]	; 1a63c <__assert_fail@plt+0x86f4>
   1a3fc:	ldr	r9, [sp, #36]	; 0x24
   1a400:	add	ip, r9, ip
   1a404:	add	r3, ip, r3
   1a408:	mvn	r6, r2
   1a40c:	orr	r6, r6, r0
   1a410:	eor	r6, r6, r1
   1a414:	add	r3, r6, r3
   1a418:	add	r3, r0, r3, ror #26
   1a41c:	ldr	ip, [pc, #540]	; 1a640 <__assert_fail@plt+0x86f8>
   1a420:	add	ip, r5, ip
   1a424:	add	r2, ip, r2
   1a428:	mvn	r5, r1
   1a42c:	orr	r5, r5, r3
   1a430:	eor	r5, r5, r0
   1a434:	add	r2, r5, r2
   1a438:	add	r2, r3, r2, ror #22
   1a43c:	ldr	ip, [pc, #512]	; 1a644 <__assert_fail@plt+0x86fc>
   1a440:	ldr	r5, [sp, #56]	; 0x38
   1a444:	add	ip, r5, ip
   1a448:	add	r1, ip, r1
   1a44c:	mvn	r5, r0
   1a450:	orr	r5, r5, r2
   1a454:	eor	r5, r5, r3
   1a458:	add	r1, r5, r1
   1a45c:	add	r1, r2, r1, ror #17
   1a460:	ldr	ip, [pc, #480]	; 1a648 <__assert_fail@plt+0x8700>
   1a464:	ldr	r4, [sp, #4]
   1a468:	add	ip, r4, ip
   1a46c:	add	r0, ip, r0
   1a470:	mvn	r4, r3
   1a474:	orr	r4, r4, r1
   1a478:	eor	r4, r4, r2
   1a47c:	add	r0, r4, r0
   1a480:	add	r0, r1, r0, ror #11
   1a484:	ldr	ip, [pc, #448]	; 1a64c <__assert_fail@plt+0x8704>
   1a488:	ldr	fp, [sp, #28]
   1a48c:	add	ip, fp, ip
   1a490:	add	ip, ip, r3
   1a494:	mvn	r3, r2
   1a498:	orr	r3, r3, r0
   1a49c:	eor	r3, r3, r1
   1a4a0:	add	r3, r3, ip
   1a4a4:	add	r3, r0, r3, ror #26
   1a4a8:	ldr	ip, [pc, #416]	; 1a650 <__assert_fail@plt+0x8708>
   1a4ac:	ldr	sl, [sp, #60]	; 0x3c
   1a4b0:	add	ip, sl, ip
   1a4b4:	add	ip, ip, r2
   1a4b8:	mvn	r2, r1
   1a4bc:	orr	r2, r2, r3
   1a4c0:	eor	r2, r2, r0
   1a4c4:	add	r2, r2, ip
   1a4c8:	add	r2, r3, r2, ror #22
   1a4cc:	ldr	ip, [pc, #384]	; 1a654 <__assert_fail@plt+0x870c>
   1a4d0:	add	ip, r7, ip
   1a4d4:	add	ip, ip, r1
   1a4d8:	mvn	r1, r0
   1a4dc:	orr	r1, r1, r2
   1a4e0:	eor	r1, r1, r3
   1a4e4:	add	r1, r1, ip
   1a4e8:	add	r1, r2, r1, ror #17
   1a4ec:	ldr	ip, [pc, #356]	; 1a658 <__assert_fail@plt+0x8710>
   1a4f0:	ldr	r8, [sp, #40]	; 0x28
   1a4f4:	add	ip, r8, ip
   1a4f8:	add	ip, ip, r0
   1a4fc:	mvn	r0, r3
   1a500:	orr	r0, r0, r1
   1a504:	eor	r0, r0, r2
   1a508:	add	r0, r0, ip
   1a50c:	add	r0, r1, r0, ror #11
   1a510:	ldr	ip, [sp, #48]	; 0x30
   1a514:	add	r3, ip, r3
   1a518:	str	r3, [sp, #48]	; 0x30
   1a51c:	ldr	r3, [sp, #16]
   1a520:	add	r3, r3, r0
   1a524:	str	r3, [sp, #16]
   1a528:	ldr	r0, [sp, #20]
   1a52c:	add	r3, r0, r1
   1a530:	str	r3, [sp, #20]
   1a534:	ldr	r1, [sp, #12]
   1a538:	add	r3, r1, r2
   1a53c:	str	r3, [sp, #12]
   1a540:	ldr	r3, [sp, #64]	; 0x40
   1a544:	cmp	r3, lr
   1a548:	bhi	19c08 <__assert_fail@plt+0x7cc0>
   1a54c:	ldr	r7, [sp, #16]
   1a550:	ldr	r5, [sp, #20]
   1a554:	ldr	r3, [sp, #68]	; 0x44
   1a558:	ldr	r2, [sp, #48]	; 0x30
   1a55c:	str	r2, [r3]
   1a560:	str	r7, [r3, #4]
   1a564:	str	r5, [r3, #8]
   1a568:	ldr	r2, [sp, #12]
   1a56c:	str	r2, [r3, #12]
   1a570:	add	sp, sp, #76	; 0x4c
   1a574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a578:			; <UNDEFINED> instruction: 0xc1bdceee
   1a57c:			; <UNDEFINED> instruction: 0xf57c0faf
   1a580:	strmi	ip, [r7, sl, lsr #12]
   1a584:	ldmdage	r0!, {r0, r1, r4, r9, sl, lr}
   1a588:	stc2l	5, cr9, [r6, #-4]
   1a58c:	stmibvs	r0, {r3, r4, r6, r7, fp, ip, pc}
   1a590:	blhi	1158454 <optarg@@GLIBC_2.4+0x112317c>
   1a594:	blvs	fe41ea24 <optarg@@GLIBC_2.4+0xfe3e974c>
   1a598:	ldc2	1, cr7, [r8, #588]	; 0x24c
   1a59c:	ldmibmi	r4!, {r0, r5, fp}
   1a5a0:	subgt	fp, r0, r0, asr #6
   1a5a4:			; <UNDEFINED> instruction: 0x265e5a51
   1a5a8:	ldmib	r6!, {r1, r3, r5, r7, r8, r9, sl, lr, pc}
   1a5ac:			; <UNDEFINED> instruction: 0xd62f105d
   1a5b0:	subeq	r1, r4, #1392508928	; 0x53000000
   1a5b4:	stmiale	r1!, {r0, r7, r9, sl, sp, lr, pc}
   1a5b8:	ldrb	pc, [r3, r8, asr #23]	; <UNPREDICTABLE>
   1a5bc:	mvncs	ip, r6, ror #27
   1a5c0:	teqgt	r7, #56098816	; 0x3580000
   1a5c4:			; <UNDEFINED> instruction: 0xf4d50d87
   1a5c8:	ldrbmi	r1, [sl, #-1261]	; 0xfffffb13
   1a5cc:	stmibge	r3!, {r0, r2, r8, fp, sp, lr, pc}^
   1a5d0:	stc2l	3, cr10, [pc], #992	; 1a9b8 <__assert_fail@plt+0x8a70>
   1a5d4:			; <UNDEFINED> instruction: 0x676f02d9
   1a5d8:	stchi	12, cr4, [sl, #-552]!	; 0xfffffdd8
   1a5dc:			; <UNDEFINED> instruction: 0xfffa3942
   1a5e0:	ldrbhi	pc, [r1, -r1, lsl #13]!	; <UNPREDICTABLE>
   1a5e4:	ldfvss	f6, [sp, #136]	; 0x88
   1a5e8:	vcmla.f16	d19, d5, d12, #270
   1a5ec:	ldrtge	lr, [lr], #2628	; 0xa44
   1a5f0:	blmi	ff7ce49c <optarg@@GLIBC_2.4+0xff7991c4>
   1a5f4:			; <UNDEFINED> instruction: 0xf6bb4b60
   1a5f8:	mrclt	12, 5, fp, cr15, cr0, {3}
   1a5fc:	ldmcs	fp, {r1, r2, r6, r7, r9, sl, fp, ip, sp, lr}
   1a600:	b	fe8645f0 <optarg@@GLIBC_2.4+0xfe82f318>
   1a604:	strbtle	r3, [pc], #133	; 1a60c <__assert_fail@plt+0x86c4>
   1a608:	streq	r1, [r8], #3333	; 0xd05
   1a60c:	ldmible	r4, {r0, r3, r4, r5, ip, lr, pc}^
   1a610:	ldrb	r9, [fp], r5, ror #19
   1a614:	svcne	0x00a27cf8
   1a618:	strtgt	r5, [ip], #1637	; 0x665
   1a61c:	vld1.16	{d2-d5}, [r9], r4
   1a620:	msrmi	CPSR_fx, #604	; 0x25c
   1a624:	blge	fe5234c8 <optarg@@GLIBC_2.4+0xfe4ee1f0>
   1a628:	ldc2	0, cr10, [r3], {57}	; 0x39
   1a62c:	ldrbvs	r5, [fp, #-2499]	; 0xfffff63d
   1a630:	svchi	0x000ccc92
   1a634:			; <UNDEFINED> instruction: 0xffeff47d
   1a638:	strhi	r5, [r4, #3537]	; 0xdd1
   1a63c:	svcvs	0x00a87e4f
   1a640:	cdp2	6, 2, cr14, cr12, cr0, {7}
   1a644:	movwge	r4, #4884	; 0x1314
   1a648:	adfmi<illegal precision>p	f1, f0, f1
   1a64c:			; <UNDEFINED> instruction: 0xf7537e82
   1a650:	lfmlt	f7, 1, [sl, #-212]!	; 0xffffff2c
   1a654:	bcs	ff60f148 <optarg@@GLIBC_2.4+0xff5d9e70>
   1a658:	bl	fe1cf4a4 <optarg@@GLIBC_2.4+0xfe19a1cc>
   1a65c:	push	{r4, r5, r6, r7, r8, lr}
   1a660:	mov	r4, r0
   1a664:	mov	r6, r1
   1a668:	ldr	r0, [r0, #24]
   1a66c:	cmp	r0, #55	; 0x37
   1a670:	movls	r5, #16
   1a674:	movhi	r5, #32
   1a678:	ldr	r3, [r4, #16]
   1a67c:	add	r3, r0, r3
   1a680:	str	r3, [r4, #16]
   1a684:	cmp	r0, r3
   1a688:	ldrhi	r2, [r4, #20]
   1a68c:	addhi	r2, r2, #1
   1a690:	strhi	r2, [r4, #20]
   1a694:	add	r2, r4, r5, lsl #2
   1a698:	lsl	r1, r3, #3
   1a69c:	str	r1, [r2, #20]
   1a6a0:	ldr	r1, [r4, #20]
   1a6a4:	lsr	r3, r3, #29
   1a6a8:	orr	r3, r3, r1, lsl #3
   1a6ac:	str	r3, [r2, #24]
   1a6b0:	add	r7, r4, #28
   1a6b4:	sub	r5, r5, #-1073741822	; 0xc0000002
   1a6b8:	lsl	r5, r5, #2
   1a6bc:	sub	r2, r5, r0
   1a6c0:	ldr	r1, [pc, #36]	; 1a6ec <__assert_fail@plt+0x87a4>
   1a6c4:	add	r0, r7, r0
   1a6c8:	bl	11ac8 <memcpy@plt>
   1a6cc:	mov	r2, r4
   1a6d0:	add	r1, r5, #8
   1a6d4:	mov	r0, r7
   1a6d8:	bl	19b9c <__assert_fail@plt+0x7c54>
   1a6dc:	mov	r1, r6
   1a6e0:	mov	r0, r4
   1a6e4:	bl	19b74 <__assert_fail@plt+0x7c2c>
   1a6e8:	pop	{r4, r5, r6, r7, r8, pc}
   1a6ec:	andeq	r4, r2, r8, lsr #1
   1a6f0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6f4:	mov	r8, r0
   1a6f8:	mov	r5, r1
   1a6fc:	mov	r6, r2
   1a700:	ldr	r4, [r2, #24]
   1a704:	cmp	r4, #0
   1a708:	bne	1a7e0 <__assert_fail@plt+0x8898>
   1a70c:	cmp	r5, #63	; 0x3f
   1a710:	bls	1a7ac <__assert_fail@plt+0x8864>
   1a714:	tst	r8, #3
   1a718:	beq	1a854 <__assert_fail@plt+0x890c>
   1a71c:	cmp	r5, #64	; 0x40
   1a720:	bls	1a7ac <__assert_fail@plt+0x8864>
   1a724:	mov	r9, r5
   1a728:	mov	r4, r8
   1a72c:	add	r7, r6, #28
   1a730:	mov	sl, #64	; 0x40
   1a734:	mov	r3, r4
   1a738:	mov	r2, r7
   1a73c:	add	r1, r4, #64	; 0x40
   1a740:	ldr	fp, [r3]
   1a744:	ldr	lr, [r3, #4]
   1a748:	ldr	ip, [r3, #8]
   1a74c:	ldr	r0, [r3, #12]
   1a750:	str	fp, [r2]
   1a754:	str	lr, [r2, #4]
   1a758:	str	ip, [r2, #8]
   1a75c:	str	r0, [r2, #12]
   1a760:	add	r3, r3, #16
   1a764:	add	r2, r2, #16
   1a768:	cmp	r3, r1
   1a76c:	bne	1a740 <__assert_fail@plt+0x87f8>
   1a770:	mov	r2, r6
   1a774:	mov	r1, sl
   1a778:	mov	r0, r7
   1a77c:	bl	19b9c <__assert_fail@plt+0x7c54>
   1a780:	add	r4, r4, #64	; 0x40
   1a784:	sub	r9, r9, #64	; 0x40
   1a788:	cmp	r9, #64	; 0x40
   1a78c:	bhi	1a734 <__assert_fail@plt+0x87ec>
   1a790:	sub	r3, r5, #65	; 0x41
   1a794:	bic	r2, r3, #63	; 0x3f
   1a798:	add	r2, r2, #64	; 0x40
   1a79c:	add	r8, r8, r2
   1a7a0:	sub	r5, r5, #64	; 0x40
   1a7a4:	bic	r3, r3, #63	; 0x3f
   1a7a8:	sub	r5, r5, r3
   1a7ac:	cmp	r5, #0
   1a7b0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7b4:	ldr	r4, [r6, #24]
   1a7b8:	add	r7, r6, #28
   1a7bc:	mov	r2, r5
   1a7c0:	mov	r1, r8
   1a7c4:	add	r0, r7, r4
   1a7c8:	bl	11ac8 <memcpy@plt>
   1a7cc:	add	r5, r5, r4
   1a7d0:	cmp	r5, #63	; 0x3f
   1a7d4:	bhi	1a874 <__assert_fail@plt+0x892c>
   1a7d8:	str	r5, [r6, #24]
   1a7dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7e0:	rsb	r7, r4, #128	; 0x80
   1a7e4:	cmp	r7, r1
   1a7e8:	movcs	r7, r1
   1a7ec:	add	r9, r2, #28
   1a7f0:	mov	r2, r7
   1a7f4:	mov	r1, r0
   1a7f8:	add	r0, r9, r4
   1a7fc:	bl	11ac8 <memcpy@plt>
   1a800:	ldr	r1, [r6, #24]
   1a804:	add	r1, r7, r1
   1a808:	str	r1, [r6, #24]
   1a80c:	cmp	r1, #64	; 0x40
   1a810:	bhi	1a820 <__assert_fail@plt+0x88d8>
   1a814:	add	r8, r8, r7
   1a818:	sub	r5, r5, r7
   1a81c:	b	1a70c <__assert_fail@plt+0x87c4>
   1a820:	mov	r2, r6
   1a824:	bic	r1, r1, #63	; 0x3f
   1a828:	mov	r0, r9
   1a82c:	bl	19b9c <__assert_fail@plt+0x7c54>
   1a830:	ldr	r2, [r6, #24]
   1a834:	and	r2, r2, #63	; 0x3f
   1a838:	str	r2, [r6, #24]
   1a83c:	add	r1, r4, r7
   1a840:	bic	r1, r1, #63	; 0x3f
   1a844:	add	r1, r9, r1
   1a848:	mov	r0, r9
   1a84c:	bl	11ac8 <memcpy@plt>
   1a850:	b	1a814 <__assert_fail@plt+0x88cc>
   1a854:	bic	r4, r5, #63	; 0x3f
   1a858:	mov	r2, r6
   1a85c:	mov	r1, r4
   1a860:	mov	r0, r8
   1a864:	bl	19b9c <__assert_fail@plt+0x7c54>
   1a868:	add	r8, r8, r4
   1a86c:	and	r5, r5, #63	; 0x3f
   1a870:	b	1a7ac <__assert_fail@plt+0x8864>
   1a874:	mov	r2, r6
   1a878:	mov	r1, #64	; 0x40
   1a87c:	mov	r0, r7
   1a880:	bl	19b9c <__assert_fail@plt+0x7c54>
   1a884:	sub	r5, r5, #64	; 0x40
   1a888:	mov	r2, r5
   1a88c:	add	r1, r6, #92	; 0x5c
   1a890:	mov	r0, r7
   1a894:	bl	11ac8 <memcpy@plt>
   1a898:	b	1a7d8 <__assert_fail@plt+0x8890>
   1a89c:	push	{r4, r5, r6, lr}
   1a8a0:	sub	sp, sp, #160	; 0xa0
   1a8a4:	mov	r5, r0
   1a8a8:	mov	r6, r1
   1a8ac:	mov	r4, r2
   1a8b0:	add	r0, sp, #4
   1a8b4:	bl	19b30 <__assert_fail@plt+0x7be8>
   1a8b8:	add	r2, sp, #4
   1a8bc:	mov	r1, r6
   1a8c0:	mov	r0, r5
   1a8c4:	bl	1a6f0 <__assert_fail@plt+0x87a8>
   1a8c8:	mov	r1, r4
   1a8cc:	add	r0, sp, #4
   1a8d0:	bl	1a65c <__assert_fail@plt+0x8714>
   1a8d4:	add	sp, sp, #160	; 0xa0
   1a8d8:	pop	{r4, r5, r6, pc}
   1a8dc:	push	{r4, r5, lr}
   1a8e0:	sub	sp, sp, #20
   1a8e4:	ldr	r1, [sp, #40]	; 0x28
   1a8e8:	str	r1, [sp, #8]
   1a8ec:	ldrd	r4, [sp, #32]
   1a8f0:	strd	r4, [sp]
   1a8f4:	bl	11a44 <posix_fadvise64@plt>
   1a8f8:	add	sp, sp, #20
   1a8fc:	pop	{r4, r5, pc}
   1a900:	cmp	r0, #0
   1a904:	bxeq	lr
   1a908:	push	{r4, lr}
   1a90c:	sub	sp, sp, #16
   1a910:	mov	r4, r1
   1a914:	bl	11dc8 <fileno@plt>
   1a918:	str	r4, [sp, #8]
   1a91c:	mov	r2, #0
   1a920:	mov	r3, #0
   1a924:	strd	r2, [sp]
   1a928:	bl	11a44 <posix_fadvise64@plt>
   1a92c:	add	sp, sp, #16
   1a930:	pop	{r4, pc}
   1a934:	push	{r4, r5, r6, lr}
   1a938:	sub	sp, sp, #8
   1a93c:	mov	r4, r0
   1a940:	bl	11dc8 <fileno@plt>
   1a944:	cmp	r0, #0
   1a948:	blt	1a9c0 <__assert_fail@plt+0x8a78>
   1a94c:	mov	r0, r4
   1a950:	bl	11cfc <__freading@plt>
   1a954:	cmp	r0, #0
   1a958:	beq	1a98c <__assert_fail@plt+0x8a44>
   1a95c:	mov	r0, r4
   1a960:	bl	11dc8 <fileno@plt>
   1a964:	mov	r3, #1
   1a968:	str	r3, [sp]
   1a96c:	mov	r2, #0
   1a970:	mov	r3, #0
   1a974:	bl	11c24 <lseek64@plt>
   1a978:	mvn	r2, #0
   1a97c:	mvn	r3, #0
   1a980:	cmp	r1, r3
   1a984:	cmpeq	r0, r2
   1a988:	beq	1a9cc <__assert_fail@plt+0x8a84>
   1a98c:	mov	r0, r4
   1a990:	bl	1a9dc <__assert_fail@plt+0x8a94>
   1a994:	cmp	r0, #0
   1a998:	beq	1a9cc <__assert_fail@plt+0x8a84>
   1a99c:	bl	11d74 <__errno_location@plt>
   1a9a0:	mov	r5, r0
   1a9a4:	ldr	r6, [r0]
   1a9a8:	mov	r0, r4
   1a9ac:	bl	11dec <fclose@plt>
   1a9b0:	cmp	r6, #0
   1a9b4:	strne	r6, [r5]
   1a9b8:	mvnne	r0, #0
   1a9bc:	b	1a9d4 <__assert_fail@plt+0x8a8c>
   1a9c0:	mov	r0, r4
   1a9c4:	bl	11dec <fclose@plt>
   1a9c8:	b	1a9d4 <__assert_fail@plt+0x8a8c>
   1a9cc:	mov	r0, r4
   1a9d0:	bl	11dec <fclose@plt>
   1a9d4:	add	sp, sp, #8
   1a9d8:	pop	{r4, r5, r6, pc}
   1a9dc:	push	{r4, lr}
   1a9e0:	sub	sp, sp, #8
   1a9e4:	subs	r4, r0, #0
   1a9e8:	beq	1a9fc <__assert_fail@plt+0x8ab4>
   1a9ec:	mov	r0, r4
   1a9f0:	bl	11cfc <__freading@plt>
   1a9f4:	cmp	r0, #0
   1a9f8:	bne	1aa0c <__assert_fail@plt+0x8ac4>
   1a9fc:	mov	r0, r4
   1aa00:	bl	11a68 <fflush@plt>
   1aa04:	add	sp, sp, #8
   1aa08:	pop	{r4, pc}
   1aa0c:	ldr	r3, [r4]
   1aa10:	tst	r3, #256	; 0x100
   1aa14:	bne	1aa24 <__assert_fail@plt+0x8adc>
   1aa18:	mov	r0, r4
   1aa1c:	bl	11a68 <fflush@plt>
   1aa20:	b	1aa04 <__assert_fail@plt+0x8abc>
   1aa24:	mov	r3, #1
   1aa28:	str	r3, [sp]
   1aa2c:	mov	r2, #0
   1aa30:	mov	r3, #0
   1aa34:	mov	r0, r4
   1aa38:	bl	1af2c <__assert_fail@plt+0x8fe4>
   1aa3c:	b	1aa18 <__assert_fail@plt+0x8ad0>
   1aa40:	ldr	r2, [r0]
   1aa44:	ldrb	r3, [r2]
   1aa48:	cmp	r3, #0
   1aa4c:	beq	1ab14 <__assert_fail@plt+0x8bcc>
   1aa50:	push	{r4, r5, lr}
   1aa54:	mov	ip, r0
   1aa58:	mov	r1, #0
   1aa5c:	mov	r0, r1
   1aa60:	mov	r5, #1
   1aa64:	mov	lr, r1
   1aa68:	b	1aa90 <__assert_fail@plt+0x8b48>
   1aa6c:	cmp	r3, #126	; 0x7e
   1aa70:	moveq	r1, lr
   1aa74:	movne	r1, lr
   1aa78:	movne	r0, lr
   1aa7c:	add	r2, r2, #1
   1aa80:	str	r2, [ip]
   1aa84:	ldrb	r3, [r2]
   1aa88:	cmp	r3, #0
   1aa8c:	beq	1ab10 <__assert_fail@plt+0x8bc8>
   1aa90:	cmp	r1, #0
   1aa94:	beq	1aabc <__assert_fail@plt+0x8b74>
   1aa98:	cmp	r3, #65	; 0x41
   1aa9c:	bcc	1aa6c <__assert_fail@plt+0x8b24>
   1aaa0:	cmp	r3, #90	; 0x5a
   1aaa4:	bls	1aab4 <__assert_fail@plt+0x8b6c>
   1aaa8:	sub	r1, r3, #97	; 0x61
   1aaac:	cmp	r1, #25
   1aab0:	bhi	1aa6c <__assert_fail@plt+0x8b24>
   1aab4:	mov	r1, lr
   1aab8:	b	1aa7c <__assert_fail@plt+0x8b34>
   1aabc:	cmp	r3, #46	; 0x2e
   1aac0:	beq	1aaec <__assert_fail@plt+0x8ba4>
   1aac4:	cmp	r3, #90	; 0x5a
   1aac8:	bhi	1ab00 <__assert_fail@plt+0x8bb8>
   1aacc:	cmp	r3, #65	; 0x41
   1aad0:	bcs	1aa7c <__assert_fail@plt+0x8b34>
   1aad4:	sub	r4, r3, #48	; 0x30
   1aad8:	cmp	r4, #9
   1aadc:	bls	1aa7c <__assert_fail@plt+0x8b34>
   1aae0:	cmp	r3, #126	; 0x7e
   1aae4:	movne	r0, #0
   1aae8:	b	1aa7c <__assert_fail@plt+0x8b34>
   1aaec:	cmp	r0, #0
   1aaf0:	moveq	r0, r2
   1aaf4:	moveq	r1, r5
   1aaf8:	movne	r1, r5
   1aafc:	b	1aa7c <__assert_fail@plt+0x8b34>
   1ab00:	sub	r4, r3, #97	; 0x61
   1ab04:	cmp	r4, #25
   1ab08:	bhi	1aae0 <__assert_fail@plt+0x8b98>
   1ab0c:	b	1aa7c <__assert_fail@plt+0x8b34>
   1ab10:	pop	{r4, r5, pc}
   1ab14:	mov	r0, #0
   1ab18:	bx	lr
   1ab1c:	mov	r3, r0
   1ab20:	sub	r2, r0, #48	; 0x30
   1ab24:	cmp	r2, #9
   1ab28:	bls	1ab58 <__assert_fail@plt+0x8c10>
   1ab2c:	cmp	r0, #65	; 0x41
   1ab30:	bcc	1ab48 <__assert_fail@plt+0x8c00>
   1ab34:	cmp	r0, #90	; 0x5a
   1ab38:	bxls	lr
   1ab3c:	sub	r2, r0, #97	; 0x61
   1ab40:	cmp	r2, #25
   1ab44:	bxls	lr
   1ab48:	cmp	r3, #126	; 0x7e
   1ab4c:	beq	1ab60 <__assert_fail@plt+0x8c18>
   1ab50:	add	r0, r3, #256	; 0x100
   1ab54:	bx	lr
   1ab58:	mov	r0, #0
   1ab5c:	bx	lr
   1ab60:	mvn	r0, #0
   1ab64:	bx	lr
   1ab68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab6c:	sub	sp, sp, #28
   1ab70:	mov	r6, r0
   1ab74:	str	r0, [sp, #4]
   1ab78:	mov	r7, r1
   1ab7c:	mov	r8, r1
   1ab80:	bl	11a2c <strcmp@plt>
   1ab84:	subs	fp, r0, #0
   1ab88:	beq	1adb4 <__assert_fail@plt+0x8e6c>
   1ab8c:	ldrb	r4, [r6]
   1ab90:	cmp	r4, #0
   1ab94:	beq	1ae84 <__assert_fail@plt+0x8f3c>
   1ab98:	ldrb	r5, [r7]
   1ab9c:	cmp	r5, #0
   1aba0:	moveq	fp, #1
   1aba4:	beq	1adb4 <__assert_fail@plt+0x8e6c>
   1aba8:	mov	r1, r6
   1abac:	ldr	r0, [pc, #792]	; 1aecc <__assert_fail@plt+0x8f84>
   1abb0:	bl	11a2c <strcmp@plt>
   1abb4:	cmp	r0, #0
   1abb8:	beq	1ae8c <__assert_fail@plt+0x8f44>
   1abbc:	mov	r1, r7
   1abc0:	ldr	r0, [pc, #772]	; 1aecc <__assert_fail@plt+0x8f84>
   1abc4:	bl	11a2c <strcmp@plt>
   1abc8:	cmp	r0, #0
   1abcc:	moveq	fp, #1
   1abd0:	beq	1adb4 <__assert_fail@plt+0x8e6c>
   1abd4:	mov	r1, r6
   1abd8:	ldr	r0, [pc, #752]	; 1aed0 <__assert_fail@plt+0x8f88>
   1abdc:	bl	11a2c <strcmp@plt>
   1abe0:	cmp	r0, #0
   1abe4:	beq	1ae94 <__assert_fail@plt+0x8f4c>
   1abe8:	mov	r1, r7
   1abec:	ldr	r0, [pc, #732]	; 1aed0 <__assert_fail@plt+0x8f88>
   1abf0:	bl	11a2c <strcmp@plt>
   1abf4:	cmp	r0, #0
   1abf8:	moveq	fp, #1
   1abfc:	beq	1adb4 <__assert_fail@plt+0x8e6c>
   1ac00:	cmp	r4, #46	; 0x2e
   1ac04:	movne	r3, #0
   1ac08:	moveq	r3, #1
   1ac0c:	cmp	r5, #46	; 0x2e
   1ac10:	moveq	r2, #0
   1ac14:	andne	r2, r3, #1
   1ac18:	cmp	r2, #0
   1ac1c:	bne	1ae9c <__assert_fail@plt+0x8f54>
   1ac20:	cmp	r5, #46	; 0x2e
   1ac24:	movne	r5, #0
   1ac28:	moveq	r5, #1
   1ac2c:	cmp	r4, #46	; 0x2e
   1ac30:	moveq	r4, #0
   1ac34:	andne	r4, r5, #1
   1ac38:	cmp	r4, #0
   1ac3c:	movne	fp, #1
   1ac40:	bne	1adb4 <__assert_fail@plt+0x8e6c>
   1ac44:	tst	r5, r3
   1ac48:	bne	1ace8 <__assert_fail@plt+0x8da0>
   1ac4c:	ldr	r3, [sp, #4]
   1ac50:	str	r3, [sp, #20]
   1ac54:	str	r8, [sp, #16]
   1ac58:	add	r0, sp, #20
   1ac5c:	bl	1aa40 <__assert_fail@plt+0x8af8>
   1ac60:	mov	r4, r0
   1ac64:	add	r0, sp, #16
   1ac68:	bl	1aa40 <__assert_fail@plt+0x8af8>
   1ac6c:	cmp	r4, #0
   1ac70:	ldreq	sl, [sp, #20]
   1ac74:	movne	sl, r4
   1ac78:	ldr	r3, [sp, #4]
   1ac7c:	mov	r6, r3
   1ac80:	sub	sl, sl, r3
   1ac84:	cmp	r0, #0
   1ac88:	ldreq	r9, [sp, #16]
   1ac8c:	movne	r9, r0
   1ac90:	sub	r9, r9, r8
   1ac94:	cmp	r0, #0
   1ac98:	cmpeq	r4, #0
   1ac9c:	movne	r4, #1
   1aca0:	moveq	r4, #0
   1aca4:	cmp	sl, r9
   1aca8:	movne	r4, #0
   1acac:	andeq	r4, r4, #1
   1acb0:	cmp	r4, #0
   1acb4:	bne	1ad00 <__assert_fail@plt+0x8db8>
   1acb8:	mov	r4, #0
   1acbc:	mov	r7, r4
   1acc0:	str	r4, [sp, #12]
   1acc4:	str	fp, [sp, #8]
   1acc8:	mov	fp, r8
   1accc:	cmp	r9, r4
   1acd0:	cmpls	sl, r7
   1acd4:	bls	1aec4 <__assert_fail@plt+0x8f7c>
   1acd8:	add	r6, fp, r4
   1acdc:	ldr	r3, [sp, #4]
   1ace0:	add	r5, r3, r7
   1ace4:	b	1ad5c <__assert_fail@plt+0x8e14>
   1ace8:	ldr	r3, [sp, #4]
   1acec:	add	r3, r3, #1
   1acf0:	str	r3, [sp, #4]
   1acf4:	add	r3, r7, #1
   1acf8:	mov	r8, r3
   1acfc:	b	1ac4c <__assert_fail@plt+0x8d04>
   1ad00:	mov	r2, sl
   1ad04:	mov	r1, r8
   1ad08:	ldr	r0, [sp, #4]
   1ad0c:	bl	11f0c <strncmp@plt>
   1ad10:	cmp	r0, #0
   1ad14:	ldreq	sl, [sp, #20]
   1ad18:	subeq	sl, sl, r6
   1ad1c:	ldreq	r9, [sp, #16]
   1ad20:	subeq	r9, r9, r8
   1ad24:	b	1acb8 <__assert_fail@plt+0x8d70>
   1ad28:	ldrb	r0, [r5]
   1ad2c:	bl	1ab1c <__assert_fail@plt+0x8bd4>
   1ad30:	mov	r8, r0
   1ad34:	cmp	r9, r4
   1ad38:	beq	1ad9c <__assert_fail@plt+0x8e54>
   1ad3c:	ldrb	r0, [r6]
   1ad40:	bl	1ab1c <__assert_fail@plt+0x8bd4>
   1ad44:	cmp	r0, r8
   1ad48:	bne	1ada4 <__assert_fail@plt+0x8e5c>
   1ad4c:	add	r7, r7, #1
   1ad50:	add	r4, r4, #1
   1ad54:	add	r6, r6, #1
   1ad58:	add	r5, r5, #1
   1ad5c:	cmp	sl, r7
   1ad60:	bls	1ad74 <__assert_fail@plt+0x8e2c>
   1ad64:	ldrb	r3, [r5]
   1ad68:	sub	r3, r3, #48	; 0x30
   1ad6c:	cmp	r3, #9
   1ad70:	bhi	1ad28 <__assert_fail@plt+0x8de0>
   1ad74:	cmp	r9, r4
   1ad78:	bls	1adc0 <__assert_fail@plt+0x8e78>
   1ad7c:	ldrb	r3, [r6]
   1ad80:	sub	r3, r3, #48	; 0x30
   1ad84:	cmp	r3, #9
   1ad88:	bls	1adc0 <__assert_fail@plt+0x8e78>
   1ad8c:	cmp	sl, r7
   1ad90:	bne	1aeb4 <__assert_fail@plt+0x8f6c>
   1ad94:	ldr	r8, [sp, #12]
   1ad98:	b	1ad3c <__assert_fail@plt+0x8df4>
   1ad9c:	ldr	r0, [sp, #12]
   1ada0:	b	1ad44 <__assert_fail@plt+0x8dfc>
   1ada4:	ldr	fp, [sp, #8]
   1ada8:	sub	r8, r8, r0
   1adac:	cmp	r8, #0
   1adb0:	movne	fp, r8
   1adb4:	mov	r0, fp
   1adb8:	add	sp, sp, #28
   1adbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adc0:	ldr	r3, [sp, #4]
   1adc4:	add	r2, r3, r7
   1adc8:	ldrb	r3, [r3, r7]
   1adcc:	cmp	r3, #48	; 0x30
   1add0:	movne	r3, r7
   1add4:	bne	1adec <__assert_fail@plt+0x8ea4>
   1add8:	mov	r3, r7
   1addc:	add	r3, r3, #1
   1ade0:	ldrb	r1, [r2, #1]!
   1ade4:	cmp	r1, #48	; 0x30
   1ade8:	beq	1addc <__assert_fail@plt+0x8e94>
   1adec:	add	r2, fp, r4
   1adf0:	ldrb	r1, [fp, r4]
   1adf4:	cmp	r1, #48	; 0x30
   1adf8:	bne	1ae0c <__assert_fail@plt+0x8ec4>
   1adfc:	add	r4, r4, #1
   1ae00:	ldrb	r1, [r2, #1]!
   1ae04:	cmp	r1, #48	; 0x30
   1ae08:	beq	1adfc <__assert_fail@plt+0x8eb4>
   1ae0c:	ldr	r2, [sp, #4]
   1ae10:	add	r1, r2, r3
   1ae14:	add	ip, fp, r4
   1ae18:	mov	r7, r3
   1ae1c:	mov	r0, #0
   1ae20:	sub	r3, r4, r3
   1ae24:	add	r4, r3, r7
   1ae28:	ldrb	r2, [r1], #1
   1ae2c:	sub	lr, r2, #48	; 0x30
   1ae30:	cmp	lr, #9
   1ae34:	bhi	1ae48 <__assert_fail@plt+0x8f00>
   1ae38:	ldrb	lr, [ip], #1
   1ae3c:	sub	r5, lr, #48	; 0x30
   1ae40:	cmp	r5, #9
   1ae44:	bls	1ae74 <__assert_fail@plt+0x8f2c>
   1ae48:	sub	r2, r2, #48	; 0x30
   1ae4c:	cmp	r2, #9
   1ae50:	bls	1aea4 <__assert_fail@plt+0x8f5c>
   1ae54:	ldrb	r3, [fp, r4]
   1ae58:	sub	r3, r3, #48	; 0x30
   1ae5c:	cmp	r3, #9
   1ae60:	bls	1aeac <__assert_fail@plt+0x8f64>
   1ae64:	cmp	r0, #0
   1ae68:	beq	1accc <__assert_fail@plt+0x8d84>
   1ae6c:	mov	fp, r0
   1ae70:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1ae74:	cmp	r0, #0
   1ae78:	subeq	r0, r2, lr
   1ae7c:	add	r7, r7, #1
   1ae80:	b	1ae24 <__assert_fail@plt+0x8edc>
   1ae84:	mvn	fp, #0
   1ae88:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1ae8c:	mvn	fp, #0
   1ae90:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1ae94:	mvn	fp, #0
   1ae98:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1ae9c:	mvn	fp, #0
   1aea0:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1aea4:	mov	fp, #1
   1aea8:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1aeac:	mvn	fp, #0
   1aeb0:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1aeb4:	ldrb	r0, [r5]
   1aeb8:	bl	1ab1c <__assert_fail@plt+0x8bd4>
   1aebc:	mov	r8, r0
   1aec0:	b	1ad3c <__assert_fail@plt+0x8df4>
   1aec4:	ldr	fp, [sp, #8]
   1aec8:	b	1adb4 <__assert_fail@plt+0x8e6c>
   1aecc:	andeq	r4, r2, r8, ror #1
   1aed0:	andeq	r4, r2, ip, ror #1
   1aed4:	push	{r4, r5, lr}
   1aed8:	sub	sp, sp, #12
   1aedc:	mov	r5, r0
   1aee0:	bl	11d74 <__errno_location@plt>
   1aee4:	mov	r4, r0
   1aee8:	ldr	r3, [r0]
   1aeec:	str	r3, [sp]
   1aef0:	str	r3, [sp, #4]
   1aef4:	mov	r3, #0
   1aef8:	str	r3, [r0]
   1aefc:	mov	r0, r5
   1af00:	bl	11a8c <free@plt>
   1af04:	ldr	r3, [r4]
   1af08:	cmp	r3, #0
   1af0c:	moveq	r3, #4
   1af10:	movne	r3, #0
   1af14:	add	r2, sp, #8
   1af18:	add	r3, r2, r3
   1af1c:	ldr	r3, [r3, #-8]
   1af20:	str	r3, [r4]
   1af24:	add	sp, sp, #12
   1af28:	pop	{r4, r5, pc}
   1af2c:	push	{r4, r5, r6, r7, lr}
   1af30:	sub	sp, sp, #12
   1af34:	mov	r4, r0
   1af38:	mov	r6, r2
   1af3c:	mov	r7, r3
   1af40:	ldr	r5, [sp, #32]
   1af44:	ldr	r2, [r0, #8]
   1af48:	ldr	r3, [r0, #4]
   1af4c:	cmp	r2, r3
   1af50:	beq	1af70 <__assert_fail@plt+0x9028>
   1af54:	str	r5, [sp]
   1af58:	mov	r2, r6
   1af5c:	mov	r3, r7
   1af60:	mov	r0, r4
   1af64:	bl	11e04 <fseeko64@plt>
   1af68:	add	sp, sp, #12
   1af6c:	pop	{r4, r5, r6, r7, pc}
   1af70:	ldr	r2, [r0, #20]
   1af74:	ldr	r3, [r0, #16]
   1af78:	cmp	r2, r3
   1af7c:	bne	1af54 <__assert_fail@plt+0x900c>
   1af80:	ldr	r3, [r0, #36]	; 0x24
   1af84:	cmp	r3, #0
   1af88:	bne	1af54 <__assert_fail@plt+0x900c>
   1af8c:	bl	11dc8 <fileno@plt>
   1af90:	str	r5, [sp]
   1af94:	mov	r2, r6
   1af98:	mov	r3, r7
   1af9c:	bl	11c24 <lseek64@plt>
   1afa0:	mvn	r2, #0
   1afa4:	mvn	r3, #0
   1afa8:	cmp	r1, r3
   1afac:	cmpeq	r0, r2
   1afb0:	beq	1afcc <__assert_fail@plt+0x9084>
   1afb4:	ldr	r3, [r4]
   1afb8:	bic	r3, r3, #16
   1afbc:	str	r3, [r4]
   1afc0:	strd	r0, [r4, #80]	; 0x50
   1afc4:	mov	r0, #0
   1afc8:	b	1af68 <__assert_fail@plt+0x9020>
   1afcc:	mvn	r0, #0
   1afd0:	b	1af68 <__assert_fail@plt+0x9020>
   1afd4:	push	{lr}		; (str lr, [sp, #-4]!)
   1afd8:	sub	sp, sp, #268	; 0x10c
   1afdc:	ldr	r2, [pc, #68]	; 1b028 <__assert_fail@plt+0x90e0>
   1afe0:	add	r1, sp, #4
   1afe4:	bl	1eff8 <__assert_fail@plt+0xd0b0>
   1afe8:	cmp	r0, #0
   1afec:	movne	r0, #0
   1aff0:	bne	1b020 <__assert_fail@plt+0x90d8>
   1aff4:	ldr	r1, [pc, #48]	; 1b02c <__assert_fail@plt+0x90e4>
   1aff8:	add	r0, sp, #4
   1affc:	bl	11a2c <strcmp@plt>
   1b000:	cmp	r0, #0
   1b004:	moveq	r0, #0
   1b008:	beq	1b020 <__assert_fail@plt+0x90d8>
   1b00c:	ldr	r1, [pc, #28]	; 1b030 <__assert_fail@plt+0x90e8>
   1b010:	add	r0, sp, #4
   1b014:	bl	11a2c <strcmp@plt>
   1b018:	adds	r0, r0, #0
   1b01c:	movne	r0, #1
   1b020:	add	sp, sp, #268	; 0x10c
   1b024:	pop	{pc}		; (ldr pc, [sp], #4)
   1b028:	andeq	r0, r0, r1, lsl #2
   1b02c:	strdeq	r4, [r2], -r0
   1b030:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1b034:	andeq	r0, r0, r0
   1b038:	push	{r4, lr}
   1b03c:	ror	r0, r0, #3
   1b040:	bl	21764 <_obstack_memory_used@@Base+0x280>
   1b044:	mov	r0, r1
   1b048:	pop	{r4, pc}
   1b04c:	cmp	r1, r0
   1b050:	movne	r0, #0
   1b054:	moveq	r0, #1
   1b058:	bx	lr
   1b05c:	ldr	r3, [r0, #20]
   1b060:	ldr	r2, [pc, #176]	; 1b118 <__assert_fail@plt+0x91d0>
   1b064:	cmp	r3, r2
   1b068:	beq	1b100 <__assert_fail@plt+0x91b8>
   1b06c:	vldr	s15, [r3, #8]
   1b070:	vldr	s14, [pc, #144]	; 1b108 <__assert_fail@plt+0x91c0>
   1b074:	vcmpe.f32	s15, s14
   1b078:	vmrs	APSR_nzcv, fpscr
   1b07c:	ble	1b0dc <__assert_fail@plt+0x9194>
   1b080:	vldr	s14, [pc, #132]	; 1b10c <__assert_fail@plt+0x91c4>
   1b084:	vcmpe.f32	s15, s14
   1b088:	vmrs	APSR_nzcv, fpscr
   1b08c:	bpl	1b0dc <__assert_fail@plt+0x9194>
   1b090:	vldr	s13, [r3, #12]
   1b094:	vldr	s14, [pc, #116]	; 1b110 <__assert_fail@plt+0x91c8>
   1b098:	vcmpe.f32	s13, s14
   1b09c:	vmrs	APSR_nzcv, fpscr
   1b0a0:	ble	1b0dc <__assert_fail@plt+0x9194>
   1b0a4:	vldr	s14, [r3]
   1b0a8:	vcmpe.f32	s14, #0.0
   1b0ac:	vmrs	APSR_nzcv, fpscr
   1b0b0:	blt	1b0dc <__assert_fail@plt+0x9194>
   1b0b4:	vldr	s13, [pc, #76]	; 1b108 <__assert_fail@plt+0x91c0>
   1b0b8:	vadd.f32	s14, s14, s13
   1b0bc:	vldr	s13, [r3, #4]
   1b0c0:	vcmpe.f32	s14, s13
   1b0c4:	vmrs	APSR_nzcv, fpscr
   1b0c8:	bpl	1b0dc <__assert_fail@plt+0x9194>
   1b0cc:	vldr	s12, [pc, #64]	; 1b114 <__assert_fail@plt+0x91cc>
   1b0d0:	vcmpe.f32	s13, s12
   1b0d4:	vmrs	APSR_nzcv, fpscr
   1b0d8:	bls	1b0ec <__assert_fail@plt+0x91a4>
   1b0dc:	ldr	r3, [pc, #52]	; 1b118 <__assert_fail@plt+0x91d0>
   1b0e0:	str	r3, [r0, #20]
   1b0e4:	mov	r0, #0
   1b0e8:	bx	lr
   1b0ec:	vcmpe.f32	s15, s14
   1b0f0:	vmrs	APSR_nzcv, fpscr
   1b0f4:	ble	1b0dc <__assert_fail@plt+0x9194>
   1b0f8:	mov	r0, #1
   1b0fc:	bx	lr
   1b100:	mov	r0, #1
   1b104:	bx	lr
   1b108:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b10c:	svccc	0x00666666
   1b110:	svccc	0x008ccccd
   1b114:	svccc	0x00800000
   1b118:	strdeq	r4, [r2], -ip
   1b11c:	push	{r4, lr}
   1b120:	mov	r4, r0
   1b124:	mov	r0, r1
   1b128:	ldr	r3, [r4, #24]
   1b12c:	ldr	r1, [r4, #8]
   1b130:	blx	r3
   1b134:	ldr	r3, [r4, #8]
   1b138:	cmp	r0, r3
   1b13c:	bcs	1b14c <__assert_fail@plt+0x9204>
   1b140:	ldr	r3, [r4]
   1b144:	add	r0, r3, r0, lsl #3
   1b148:	pop	{r4, pc}
   1b14c:	bl	11f24 <abort@plt>
   1b150:	push	{r4, r5, r6, r7, r8, lr}
   1b154:	ldrb	r3, [r1, #16]
   1b158:	cmp	r3, #0
   1b15c:	bne	1b18c <__assert_fail@plt+0x9244>
   1b160:	vmov	s15, r0
   1b164:	vcvt.f32.u32	s13, s15
   1b168:	vldr	s14, [r1, #8]
   1b16c:	vdiv.f32	s15, s13, s14
   1b170:	vldr	s14, [pc, #204]	; 1b244 <__assert_fail@plt+0x92fc>
   1b174:	vcmpe.f32	s15, s14
   1b178:	vmrs	APSR_nzcv, fpscr
   1b17c:	movge	r7, #0
   1b180:	bge	1b1c4 <__assert_fail@plt+0x927c>
   1b184:	vcvt.u32.f32	s15, s15
   1b188:	vmov	r0, s15
   1b18c:	cmp	r0, #10
   1b190:	movcc	r0, #10
   1b194:	orr	r7, r0, #1
   1b198:	cmn	r7, #1
   1b19c:	ldrne	r8, [pc, #164]	; 1b248 <__assert_fail@plt+0x9300>
   1b1a0:	bne	1b1f0 <__assert_fail@plt+0x92a8>
   1b1a4:	lsr	r3, r7, #30
   1b1a8:	lsl	r2, r7, #2
   1b1ac:	adds	r3, r3, #0
   1b1b0:	movne	r3, #1
   1b1b4:	cmp	r2, #0
   1b1b8:	movlt	r3, #1
   1b1bc:	cmp	r3, #0
   1b1c0:	movne	r7, #0
   1b1c4:	mov	r0, r7
   1b1c8:	pop	{r4, r5, r6, r7, r8, pc}
   1b1cc:	mov	r4, #3
   1b1d0:	mov	r1, r4
   1b1d4:	mov	r0, r7
   1b1d8:	bl	21764 <_obstack_memory_used@@Base+0x280>
   1b1dc:	cmp	r1, #0
   1b1e0:	bne	1b1a4 <__assert_fail@plt+0x925c>
   1b1e4:	add	r7, r7, #2
   1b1e8:	cmn	r7, #1
   1b1ec:	beq	1b1a4 <__assert_fail@plt+0x925c>
   1b1f0:	cmp	r7, #9
   1b1f4:	bls	1b1cc <__assert_fail@plt+0x9284>
   1b1f8:	umull	r2, r3, r8, r7
   1b1fc:	lsr	r3, r3, #1
   1b200:	add	r3, r3, r3, lsl #1
   1b204:	cmp	r7, r3
   1b208:	beq	1b1e4 <__assert_fail@plt+0x929c>
   1b20c:	mov	r6, #16
   1b210:	mov	r5, #9
   1b214:	mov	r4, #3
   1b218:	add	r5, r5, r6
   1b21c:	add	r4, r4, #2
   1b220:	cmp	r5, r7
   1b224:	bcs	1b1d0 <__assert_fail@plt+0x9288>
   1b228:	add	r6, r6, #8
   1b22c:	mov	r1, r4
   1b230:	mov	r0, r7
   1b234:	bl	21764 <_obstack_memory_used@@Base+0x280>
   1b238:	cmp	r1, #0
   1b23c:	bne	1b218 <__assert_fail@plt+0x92d0>
   1b240:	b	1b1e4 <__assert_fail@plt+0x929c>
   1b244:	svcmi	0x00800000
   1b248:	bge	feac5cfc <optarg@@GLIBC_2.4+0xfea90a24>
   1b24c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b250:	ldr	r7, [r1]
   1b254:	ldr	r3, [r1, #4]
   1b258:	cmp	r7, r3
   1b25c:	bcs	1b390 <__assert_fail@plt+0x9448>
   1b260:	mov	fp, r2
   1b264:	mov	sl, r1
   1b268:	mov	r6, r0
   1b26c:	add	r7, r7, #8
   1b270:	mov	r9, #0
   1b274:	b	1b2dc <__assert_fail@plt+0x9394>
   1b278:	str	r5, [r0]
   1b27c:	ldr	r2, [r6, #12]
   1b280:	add	r2, r2, #1
   1b284:	str	r2, [r6, #12]
   1b288:	str	r9, [r4]
   1b28c:	ldr	r2, [r6, #36]	; 0x24
   1b290:	str	r2, [r4, #4]
   1b294:	str	r4, [r6, #36]	; 0x24
   1b298:	b	1b324 <__assert_fail@plt+0x93dc>
   1b29c:	mov	r0, #8
   1b2a0:	bl	20a64 <__assert_fail@plt+0xeb1c>
   1b2a4:	cmp	r0, #0
   1b2a8:	beq	1b398 <__assert_fail@plt+0x9450>
   1b2ac:	str	r4, [r0]
   1b2b0:	ldr	r3, [r5, #4]
   1b2b4:	str	r3, [r0, #4]
   1b2b8:	str	r0, [r5, #4]
   1b2bc:	str	r9, [r8, #-8]
   1b2c0:	ldr	r3, [sl, #12]
   1b2c4:	sub	r3, r3, #1
   1b2c8:	str	r3, [sl, #12]
   1b2cc:	add	r7, r7, #8
   1b2d0:	ldr	r3, [sl, #4]
   1b2d4:	cmp	r3, r8
   1b2d8:	bls	1b388 <__assert_fail@plt+0x9440>
   1b2dc:	mov	r8, r7
   1b2e0:	ldr	r3, [r7, #-8]
   1b2e4:	cmp	r3, #0
   1b2e8:	beq	1b2cc <__assert_fail@plt+0x9384>
   1b2ec:	ldr	r4, [r7, #-4]
   1b2f0:	cmp	r4, #0
   1b2f4:	beq	1b330 <__assert_fail@plt+0x93e8>
   1b2f8:	ldr	r5, [r4]
   1b2fc:	mov	r1, r5
   1b300:	mov	r0, r6
   1b304:	bl	1b11c <__assert_fail@plt+0x91d4>
   1b308:	ldr	r3, [r4, #4]
   1b30c:	ldr	r2, [r0]
   1b310:	cmp	r2, #0
   1b314:	beq	1b278 <__assert_fail@plt+0x9330>
   1b318:	ldr	r2, [r0, #4]
   1b31c:	str	r2, [r4, #4]
   1b320:	str	r4, [r0, #4]
   1b324:	mov	r4, r3
   1b328:	cmp	r3, #0
   1b32c:	bne	1b2f8 <__assert_fail@plt+0x93b0>
   1b330:	ldr	r4, [r8, #-8]
   1b334:	str	r9, [r8, #-4]
   1b338:	cmp	fp, #0
   1b33c:	bne	1b2cc <__assert_fail@plt+0x9384>
   1b340:	mov	r1, r4
   1b344:	mov	r0, r6
   1b348:	bl	1b11c <__assert_fail@plt+0x91d4>
   1b34c:	mov	r5, r0
   1b350:	ldr	r3, [r0]
   1b354:	cmp	r3, #0
   1b358:	beq	1b374 <__assert_fail@plt+0x942c>
   1b35c:	ldr	r0, [r6, #36]	; 0x24
   1b360:	cmp	r0, #0
   1b364:	beq	1b29c <__assert_fail@plt+0x9354>
   1b368:	ldr	r3, [r0, #4]
   1b36c:	str	r3, [r6, #36]	; 0x24
   1b370:	b	1b2ac <__assert_fail@plt+0x9364>
   1b374:	str	r4, [r0]
   1b378:	ldr	r3, [r6, #12]
   1b37c:	add	r3, r3, #1
   1b380:	str	r3, [r6, #12]
   1b384:	b	1b2bc <__assert_fail@plt+0x9374>
   1b388:	mov	r0, #1
   1b38c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b390:	mov	r0, #1
   1b394:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b398:	mov	r0, fp
   1b39c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3a0:	push	{r4, r5, r6, r7, r8, lr}
   1b3a4:	mov	r6, r0
   1b3a8:	mov	r5, r1
   1b3ac:	mov	r8, r2
   1b3b0:	mov	r7, r3
   1b3b4:	bl	1b11c <__assert_fail@plt+0x91d4>
   1b3b8:	str	r0, [r8]
   1b3bc:	ldr	r3, [r0]
   1b3c0:	cmp	r3, #0
   1b3c4:	beq	1b49c <__assert_fail@plt+0x9554>
   1b3c8:	mov	r4, r0
   1b3cc:	cmp	r5, r3
   1b3d0:	beq	1b464 <__assert_fail@plt+0x951c>
   1b3d4:	ldr	r2, [r6, #28]
   1b3d8:	mov	r1, r3
   1b3dc:	mov	r0, r5
   1b3e0:	blx	r2
   1b3e4:	cmp	r0, #0
   1b3e8:	bne	1b464 <__assert_fail@plt+0x951c>
   1b3ec:	ldr	r3, [r4, #4]
   1b3f0:	cmp	r3, #0
   1b3f4:	beq	1b4a4 <__assert_fail@plt+0x955c>
   1b3f8:	ldr	r1, [r3]
   1b3fc:	cmp	r5, r1
   1b400:	beq	1b434 <__assert_fail@plt+0x94ec>
   1b404:	ldr	r3, [r6, #28]
   1b408:	mov	r0, r5
   1b40c:	blx	r3
   1b410:	cmp	r0, #0
   1b414:	bne	1b434 <__assert_fail@plt+0x94ec>
   1b418:	ldr	r4, [r4, #4]
   1b41c:	ldr	r3, [r4, #4]
   1b420:	cmp	r3, #0
   1b424:	beq	1b49c <__assert_fail@plt+0x9554>
   1b428:	ldr	r1, [r3]
   1b42c:	cmp	r5, r1
   1b430:	bne	1b404 <__assert_fail@plt+0x94bc>
   1b434:	ldr	r2, [r4, #4]
   1b438:	ldr	r3, [r2]
   1b43c:	cmp	r7, #0
   1b440:	beq	1b49c <__assert_fail@plt+0x9554>
   1b444:	ldr	r1, [r2, #4]
   1b448:	str	r1, [r4, #4]
   1b44c:	mov	r1, #0
   1b450:	str	r1, [r2]
   1b454:	ldr	r1, [r6, #36]	; 0x24
   1b458:	str	r1, [r2, #4]
   1b45c:	str	r2, [r6, #36]	; 0x24
   1b460:	b	1b49c <__assert_fail@plt+0x9554>
   1b464:	ldr	r3, [r4]
   1b468:	cmp	r7, #0
   1b46c:	beq	1b49c <__assert_fail@plt+0x9554>
   1b470:	ldr	r2, [r4, #4]
   1b474:	cmp	r2, #0
   1b478:	ldmne	r2, {r0, r1}
   1b47c:	stmne	r4, {r0, r1}
   1b480:	movne	r1, #0
   1b484:	strne	r1, [r2]
   1b488:	ldrne	r1, [r6, #36]	; 0x24
   1b48c:	strne	r1, [r2, #4]
   1b490:	strne	r2, [r6, #36]	; 0x24
   1b494:	moveq	r2, #0
   1b498:	streq	r2, [r4]
   1b49c:	mov	r0, r3
   1b4a0:	pop	{r4, r5, r6, r7, r8, pc}
   1b4a4:	mov	r3, #0
   1b4a8:	b	1b49c <__assert_fail@plt+0x9554>
   1b4ac:	ldr	r0, [r0, #8]
   1b4b0:	bx	lr
   1b4b4:	ldr	r0, [r0, #12]
   1b4b8:	bx	lr
   1b4bc:	ldr	r0, [r0, #16]
   1b4c0:	bx	lr
   1b4c4:	ldr	r1, [r0]
   1b4c8:	ldr	ip, [r0, #4]
   1b4cc:	cmp	r1, ip
   1b4d0:	bcs	1b528 <__assert_fail@plt+0x95e0>
   1b4d4:	mov	r0, #0
   1b4d8:	b	1b4f4 <__assert_fail@plt+0x95ac>
   1b4dc:	mov	r2, #1
   1b4e0:	cmp	r0, r2
   1b4e4:	movcc	r0, r2
   1b4e8:	add	r1, r1, #8
   1b4ec:	cmp	r1, ip
   1b4f0:	bcs	1b524 <__assert_fail@plt+0x95dc>
   1b4f4:	ldr	r3, [r1]
   1b4f8:	cmp	r3, #0
   1b4fc:	beq	1b4e8 <__assert_fail@plt+0x95a0>
   1b500:	ldr	r3, [r1, #4]
   1b504:	cmp	r3, #0
   1b508:	beq	1b4dc <__assert_fail@plt+0x9594>
   1b50c:	mov	r2, #1
   1b510:	add	r2, r2, #1
   1b514:	ldr	r3, [r3, #4]
   1b518:	cmp	r3, #0
   1b51c:	bne	1b510 <__assert_fail@plt+0x95c8>
   1b520:	b	1b4e0 <__assert_fail@plt+0x9598>
   1b524:	bx	lr
   1b528:	mov	r0, #0
   1b52c:	bx	lr
   1b530:	push	{lr}		; (str lr, [sp, #-4]!)
   1b534:	ldr	r1, [r0]
   1b538:	ldr	lr, [r0, #4]
   1b53c:	cmp	r1, lr
   1b540:	bcs	1b590 <__assert_fail@plt+0x9648>
   1b544:	mov	r2, #0
   1b548:	mov	ip, r2
   1b54c:	b	1b55c <__assert_fail@plt+0x9614>
   1b550:	add	r1, r1, #8
   1b554:	cmp	r1, lr
   1b558:	bcs	1b598 <__assert_fail@plt+0x9650>
   1b55c:	ldr	r3, [r1]
   1b560:	cmp	r3, #0
   1b564:	beq	1b550 <__assert_fail@plt+0x9608>
   1b568:	add	ip, ip, #1
   1b56c:	add	r2, r2, #1
   1b570:	ldr	r3, [r1, #4]
   1b574:	cmp	r3, #0
   1b578:	beq	1b550 <__assert_fail@plt+0x9608>
   1b57c:	add	r2, r2, #1
   1b580:	ldr	r3, [r3, #4]
   1b584:	cmp	r3, #0
   1b588:	bne	1b57c <__assert_fail@plt+0x9634>
   1b58c:	b	1b550 <__assert_fail@plt+0x9608>
   1b590:	mov	r2, #0
   1b594:	mov	ip, r2
   1b598:	ldr	r3, [r0, #12]
   1b59c:	cmp	r3, ip
   1b5a0:	beq	1b5ac <__assert_fail@plt+0x9664>
   1b5a4:	mov	r0, #0
   1b5a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5ac:	ldr	r0, [r0, #16]
   1b5b0:	cmp	r0, r2
   1b5b4:	movne	r0, #0
   1b5b8:	moveq	r0, #1
   1b5bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5c0:	push	{r4, r5, r6, r7, r8, lr}
   1b5c4:	sub	sp, sp, #8
   1b5c8:	mov	r6, r0
   1b5cc:	mov	r4, r1
   1b5d0:	ldr	r5, [r0, #8]
   1b5d4:	ldr	r7, [r0, #12]
   1b5d8:	bl	1b4c4 <__assert_fail@plt+0x957c>
   1b5dc:	mov	r8, r0
   1b5e0:	ldr	r3, [r6, #16]
   1b5e4:	ldr	r2, [pc, #116]	; 1b660 <__assert_fail@plt+0x9718>
   1b5e8:	mov	r1, #1
   1b5ec:	mov	r0, r4
   1b5f0:	bl	11dd4 <__fprintf_chk@plt>
   1b5f4:	mov	r3, r5
   1b5f8:	ldr	r2, [pc, #100]	; 1b664 <__assert_fail@plt+0x971c>
   1b5fc:	mov	r1, #1
   1b600:	mov	r0, r4
   1b604:	bl	11dd4 <__fprintf_chk@plt>
   1b608:	vmov	s15, r7
   1b60c:	vcvt.f64.u32	d6, s15
   1b610:	vldr	d7, [pc, #64]	; 1b658 <__assert_fail@plt+0x9710>
   1b614:	vmul.f64	d6, d6, d7
   1b618:	vmov	s15, r5
   1b61c:	vcvt.f64.u32	d7, s15
   1b620:	vdiv.f64	d5, d6, d7
   1b624:	vstr	d5, [sp]
   1b628:	mov	r3, r7
   1b62c:	ldr	r2, [pc, #52]	; 1b668 <__assert_fail@plt+0x9720>
   1b630:	mov	r1, #1
   1b634:	mov	r0, r4
   1b638:	bl	11dd4 <__fprintf_chk@plt>
   1b63c:	mov	r3, r8
   1b640:	ldr	r2, [pc, #36]	; 1b66c <__assert_fail@plt+0x9724>
   1b644:	mov	r1, #1
   1b648:	mov	r0, r4
   1b64c:	bl	11dd4 <__fprintf_chk@plt>
   1b650:	add	sp, sp, #8
   1b654:	pop	{r4, r5, r6, r7, r8, pc}
   1b658:	andeq	r0, r0, r0
   1b65c:	subsmi	r0, r9, r0
   1b660:	andeq	r4, r2, r0, lsl r1
   1b664:	andeq	r4, r2, r8, lsr #2
   1b668:	andeq	r4, r2, r0, asr #2
   1b66c:	andeq	r4, r2, r4, ror #2
   1b670:	push	{r4, r5, r6, lr}
   1b674:	mov	r6, r0
   1b678:	mov	r5, r1
   1b67c:	bl	1b11c <__assert_fail@plt+0x91d4>
   1b680:	ldr	r1, [r0]
   1b684:	cmp	r1, #0
   1b688:	beq	1b6dc <__assert_fail@plt+0x9794>
   1b68c:	mov	r4, r0
   1b690:	cmp	r0, #0
   1b694:	beq	1b6e4 <__assert_fail@plt+0x979c>
   1b698:	cmp	r5, r1
   1b69c:	beq	1b6cc <__assert_fail@plt+0x9784>
   1b6a0:	ldr	r3, [r6, #28]
   1b6a4:	mov	r0, r5
   1b6a8:	blx	r3
   1b6ac:	cmp	r0, #0
   1b6b0:	bne	1b6cc <__assert_fail@plt+0x9784>
   1b6b4:	ldr	r4, [r4, #4]
   1b6b8:	cmp	r4, #0
   1b6bc:	beq	1b6d4 <__assert_fail@plt+0x978c>
   1b6c0:	ldr	r1, [r4]
   1b6c4:	cmp	r5, r1
   1b6c8:	bne	1b6a0 <__assert_fail@plt+0x9758>
   1b6cc:	ldr	r0, [r4]
   1b6d0:	pop	{r4, r5, r6, pc}
   1b6d4:	mov	r0, #0
   1b6d8:	pop	{r4, r5, r6, pc}
   1b6dc:	mov	r0, #0
   1b6e0:	pop	{r4, r5, r6, pc}
   1b6e4:	mov	r0, #0
   1b6e8:	pop	{r4, r5, r6, pc}
   1b6ec:	ldr	r3, [r0, #16]
   1b6f0:	cmp	r3, #0
   1b6f4:	beq	1b738 <__assert_fail@plt+0x97f0>
   1b6f8:	ldr	r3, [r0]
   1b6fc:	ldr	r2, [r0, #4]
   1b700:	cmp	r3, r2
   1b704:	bcs	1b730 <__assert_fail@plt+0x97e8>
   1b708:	ldr	r0, [r3]
   1b70c:	cmp	r0, #0
   1b710:	bne	1b72c <__assert_fail@plt+0x97e4>
   1b714:	add	r3, r3, #8
   1b718:	cmp	r3, r2
   1b71c:	bcs	1b730 <__assert_fail@plt+0x97e8>
   1b720:	ldr	r0, [r3]
   1b724:	cmp	r0, #0
   1b728:	beq	1b714 <__assert_fail@plt+0x97cc>
   1b72c:	bx	lr
   1b730:	push	{r4, lr}
   1b734:	bl	11f24 <abort@plt>
   1b738:	mov	r0, #0
   1b73c:	b	1b72c <__assert_fail@plt+0x97e4>
   1b740:	push	{r4, r5, r6, lr}
   1b744:	mov	r5, r0
   1b748:	mov	r4, r1
   1b74c:	bl	1b11c <__assert_fail@plt+0x91d4>
   1b750:	mov	r2, r0
   1b754:	mov	r3, r0
   1b758:	ldr	r1, [r3]
   1b75c:	cmp	r4, r1
   1b760:	beq	1b774 <__assert_fail@plt+0x982c>
   1b764:	ldr	r3, [r3, #4]
   1b768:	cmp	r3, #0
   1b76c:	bne	1b758 <__assert_fail@plt+0x9810>
   1b770:	b	1b780 <__assert_fail@plt+0x9838>
   1b774:	ldr	r3, [r3, #4]
   1b778:	cmp	r3, #0
   1b77c:	bne	1b7a0 <__assert_fail@plt+0x9858>
   1b780:	ldr	r3, [r5, #4]
   1b784:	add	r2, r2, #8
   1b788:	cmp	r2, r3
   1b78c:	bcs	1b7a8 <__assert_fail@plt+0x9860>
   1b790:	ldr	r0, [r2]
   1b794:	cmp	r0, #0
   1b798:	beq	1b784 <__assert_fail@plt+0x983c>
   1b79c:	pop	{r4, r5, r6, pc}
   1b7a0:	ldr	r0, [r3]
   1b7a4:	pop	{r4, r5, r6, pc}
   1b7a8:	mov	r0, #0
   1b7ac:	pop	{r4, r5, r6, pc}
   1b7b0:	push	{r4, r5, lr}
   1b7b4:	ldr	r4, [r0]
   1b7b8:	ldr	r3, [r0, #4]
   1b7bc:	cmp	r4, r3
   1b7c0:	bcs	1b82c <__assert_fail@plt+0x98e4>
   1b7c4:	mov	r5, r0
   1b7c8:	mov	r0, #0
   1b7cc:	b	1b7e0 <__assert_fail@plt+0x9898>
   1b7d0:	add	r4, r4, #8
   1b7d4:	ldr	r3, [r5, #4]
   1b7d8:	cmp	r3, r4
   1b7dc:	bls	1b828 <__assert_fail@plt+0x98e0>
   1b7e0:	ldr	r3, [r4]
   1b7e4:	cmp	r3, #0
   1b7e8:	beq	1b7d0 <__assert_fail@plt+0x9888>
   1b7ec:	cmp	r4, #0
   1b7f0:	beq	1b7d0 <__assert_fail@plt+0x9888>
   1b7f4:	cmp	r2, r0
   1b7f8:	popls	{r4, r5, pc}
   1b7fc:	add	ip, r1, r0, lsl #2
   1b800:	mov	r3, r4
   1b804:	add	r0, r0, #1
   1b808:	ldr	lr, [r3]
   1b80c:	str	lr, [ip], #4
   1b810:	ldr	r3, [r3, #4]
   1b814:	cmp	r3, #0
   1b818:	beq	1b7d0 <__assert_fail@plt+0x9888>
   1b81c:	cmp	r2, r0
   1b820:	bne	1b804 <__assert_fail@plt+0x98bc>
   1b824:	pop	{r4, r5, pc}
   1b828:	pop	{r4, r5, pc}
   1b82c:	mov	r0, #0
   1b830:	pop	{r4, r5, pc}
   1b834:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b838:	ldr	r8, [r0]
   1b83c:	ldr	r3, [r0, #4]
   1b840:	cmp	r8, r3
   1b844:	bcs	1b8ac <__assert_fail@plt+0x9964>
   1b848:	mov	r7, r2
   1b84c:	mov	r6, r1
   1b850:	mov	r9, r0
   1b854:	mov	r5, #0
   1b858:	b	1b86c <__assert_fail@plt+0x9924>
   1b85c:	add	r8, r8, #8
   1b860:	ldr	r3, [r9, #4]
   1b864:	cmp	r3, r8
   1b868:	bls	1b8b0 <__assert_fail@plt+0x9968>
   1b86c:	ldr	r3, [r8]
   1b870:	cmp	r3, #0
   1b874:	beq	1b85c <__assert_fail@plt+0x9914>
   1b878:	cmp	r8, #0
   1b87c:	beq	1b85c <__assert_fail@plt+0x9914>
   1b880:	mov	r4, r8
   1b884:	mov	r1, r7
   1b888:	ldr	r0, [r4]
   1b88c:	blx	r6
   1b890:	cmp	r0, #0
   1b894:	beq	1b8b0 <__assert_fail@plt+0x9968>
   1b898:	add	r5, r5, #1
   1b89c:	ldr	r4, [r4, #4]
   1b8a0:	cmp	r4, #0
   1b8a4:	bne	1b884 <__assert_fail@plt+0x993c>
   1b8a8:	b	1b85c <__assert_fail@plt+0x9914>
   1b8ac:	mov	r5, #0
   1b8b0:	mov	r0, r5
   1b8b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b8b8:	ldrb	r3, [r0]
   1b8bc:	cmp	r3, #0
   1b8c0:	beq	1b8f8 <__assert_fail@plt+0x99b0>
   1b8c4:	push	{r4, r5, r6, lr}
   1b8c8:	mov	r4, r0
   1b8cc:	mov	r5, r1
   1b8d0:	mov	r1, #0
   1b8d4:	rsb	r0, r1, r1, lsl #5
   1b8d8:	mov	r1, r5
   1b8dc:	add	r0, r0, r3
   1b8e0:	bl	21764 <_obstack_memory_used@@Base+0x280>
   1b8e4:	ldrb	r3, [r4, #1]!
   1b8e8:	cmp	r3, #0
   1b8ec:	bne	1b8d4 <__assert_fail@plt+0x998c>
   1b8f0:	mov	r0, r1
   1b8f4:	pop	{r4, r5, r6, pc}
   1b8f8:	mov	r1, #0
   1b8fc:	mov	r0, r1
   1b900:	bx	lr
   1b904:	push	{lr}		; (str lr, [sp, #-4]!)
   1b908:	mov	ip, r0
   1b90c:	ldr	lr, [pc, #16]	; 1b924 <__assert_fail@plt+0x99dc>
   1b910:	ldm	lr!, {r0, r1, r2, r3}
   1b914:	stmia	ip!, {r0, r1, r2, r3}
   1b918:	ldr	r3, [lr]
   1b91c:	str	r3, [ip]
   1b920:	pop	{pc}		; (ldr pc, [sp], #4)
   1b924:	strdeq	r4, [r2], -ip
   1b928:	push	{r4, r5, r6, r7, r8, lr}
   1b92c:	mov	r8, r0
   1b930:	mov	r5, r1
   1b934:	subs	r7, r2, #0
   1b938:	ldr	r2, [pc, #180]	; 1b9f4 <__assert_fail@plt+0x9aac>
   1b93c:	cmp	r7, #0
   1b940:	moveq	r7, r2
   1b944:	subs	r6, r3, #0
   1b948:	ldr	r3, [pc, #168]	; 1b9f8 <__assert_fail@plt+0x9ab0>
   1b94c:	cmp	r6, #0
   1b950:	moveq	r6, r3
   1b954:	mov	r0, #40	; 0x28
   1b958:	bl	20a64 <__assert_fail@plt+0xeb1c>
   1b95c:	subs	r4, r0, #0
   1b960:	beq	1b9dc <__assert_fail@plt+0x9a94>
   1b964:	ldr	r3, [pc, #144]	; 1b9fc <__assert_fail@plt+0x9ab4>
   1b968:	cmp	r5, #0
   1b96c:	moveq	r5, r3
   1b970:	str	r5, [r4, #20]
   1b974:	mov	r0, r4
   1b978:	bl	1b05c <__assert_fail@plt+0x9114>
   1b97c:	cmp	r0, #0
   1b980:	beq	1b9e4 <__assert_fail@plt+0x9a9c>
   1b984:	mov	r1, r5
   1b988:	mov	r0, r8
   1b98c:	bl	1b150 <__assert_fail@plt+0x9208>
   1b990:	str	r0, [r4, #8]
   1b994:	cmp	r0, #0
   1b998:	beq	1b9e4 <__assert_fail@plt+0x9a9c>
   1b99c:	mov	r1, #8
   1b9a0:	bl	20a14 <__assert_fail@plt+0xeacc>
   1b9a4:	str	r0, [r4]
   1b9a8:	cmp	r0, #0
   1b9ac:	beq	1b9e4 <__assert_fail@plt+0x9a9c>
   1b9b0:	ldr	r3, [r4, #8]
   1b9b4:	add	r0, r0, r3, lsl #3
   1b9b8:	str	r0, [r4, #4]
   1b9bc:	mov	r3, #0
   1b9c0:	str	r3, [r4, #12]
   1b9c4:	str	r3, [r4, #16]
   1b9c8:	str	r7, [r4, #24]
   1b9cc:	str	r6, [r4, #28]
   1b9d0:	ldr	r2, [sp, #24]
   1b9d4:	str	r2, [r4, #32]
   1b9d8:	str	r3, [r4, #36]	; 0x24
   1b9dc:	mov	r0, r4
   1b9e0:	pop	{r4, r5, r6, r7, r8, pc}
   1b9e4:	mov	r0, r4
   1b9e8:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1b9ec:	mov	r4, #0
   1b9f0:	b	1b9dc <__assert_fail@plt+0x9a94>
   1b9f4:	andeq	fp, r1, r8, lsr r0
   1b9f8:	andeq	fp, r1, ip, asr #32
   1b9fc:	strdeq	r4, [r2], -ip
   1ba00:	push	{r4, r5, r6, r7, r8, lr}
   1ba04:	mov	r5, r0
   1ba08:	ldr	r7, [r0]
   1ba0c:	ldr	r3, [r0, #4]
   1ba10:	cmp	r7, r3
   1ba14:	bcs	1baa8 <__assert_fail@plt+0x9b60>
   1ba18:	add	r7, r7, #8
   1ba1c:	mov	r6, #0
   1ba20:	b	1ba88 <__assert_fail@plt+0x9b40>
   1ba24:	str	r6, [r4]
   1ba28:	ldr	r3, [r4, #4]
   1ba2c:	ldr	r2, [r5, #36]	; 0x24
   1ba30:	str	r2, [r4, #4]
   1ba34:	str	r4, [r5, #36]	; 0x24
   1ba38:	mov	r4, r3
   1ba3c:	cmp	r3, #0
   1ba40:	beq	1ba5c <__assert_fail@plt+0x9b14>
   1ba44:	ldr	r3, [r5, #32]
   1ba48:	cmp	r3, #0
   1ba4c:	beq	1ba24 <__assert_fail@plt+0x9adc>
   1ba50:	ldr	r0, [r4]
   1ba54:	blx	r3
   1ba58:	b	1ba24 <__assert_fail@plt+0x9adc>
   1ba5c:	ldr	r3, [r5, #32]
   1ba60:	cmp	r3, #0
   1ba64:	beq	1ba70 <__assert_fail@plt+0x9b28>
   1ba68:	ldr	r0, [r8, #-8]
   1ba6c:	blx	r3
   1ba70:	str	r6, [r8, #-8]
   1ba74:	str	r6, [r8, #-4]
   1ba78:	add	r7, r7, #8
   1ba7c:	ldr	r3, [r5, #4]
   1ba80:	cmp	r3, r8
   1ba84:	bls	1baa8 <__assert_fail@plt+0x9b60>
   1ba88:	mov	r8, r7
   1ba8c:	ldr	r3, [r7, #-8]
   1ba90:	cmp	r3, #0
   1ba94:	beq	1ba78 <__assert_fail@plt+0x9b30>
   1ba98:	ldr	r4, [r7, #-4]
   1ba9c:	cmp	r4, #0
   1baa0:	bne	1ba44 <__assert_fail@plt+0x9afc>
   1baa4:	b	1ba5c <__assert_fail@plt+0x9b14>
   1baa8:	mov	r3, #0
   1baac:	str	r3, [r5, #12]
   1bab0:	str	r3, [r5, #16]
   1bab4:	pop	{r4, r5, r6, r7, r8, pc}
   1bab8:	push	{r4, r5, r6, lr}
   1babc:	mov	r5, r0
   1bac0:	ldr	r3, [r0, #32]
   1bac4:	cmp	r3, #0
   1bac8:	beq	1bb30 <__assert_fail@plt+0x9be8>
   1bacc:	ldr	r3, [r0, #16]
   1bad0:	cmp	r3, #0
   1bad4:	beq	1bb30 <__assert_fail@plt+0x9be8>
   1bad8:	ldr	r6, [r0]
   1badc:	ldr	r3, [r0, #4]
   1bae0:	cmp	r6, r3
   1bae4:	bcc	1bafc <__assert_fail@plt+0x9bb4>
   1bae8:	b	1bb70 <__assert_fail@plt+0x9c28>
   1baec:	add	r6, r6, #8
   1baf0:	ldr	r3, [r5, #4]
   1baf4:	cmp	r3, r6
   1baf8:	bls	1bb30 <__assert_fail@plt+0x9be8>
   1bafc:	ldr	r3, [r6]
   1bb00:	cmp	r3, #0
   1bb04:	beq	1baec <__assert_fail@plt+0x9ba4>
   1bb08:	cmp	r6, #0
   1bb0c:	beq	1baec <__assert_fail@plt+0x9ba4>
   1bb10:	mov	r4, r6
   1bb14:	ldr	r3, [r5, #32]
   1bb18:	ldr	r0, [r4]
   1bb1c:	blx	r3
   1bb20:	ldr	r4, [r4, #4]
   1bb24:	cmp	r4, #0
   1bb28:	bne	1bb14 <__assert_fail@plt+0x9bcc>
   1bb2c:	b	1baec <__assert_fail@plt+0x9ba4>
   1bb30:	ldr	r6, [r5]
   1bb34:	ldr	r3, [r5, #4]
   1bb38:	cmp	r6, r3
   1bb3c:	bcs	1bb70 <__assert_fail@plt+0x9c28>
   1bb40:	ldr	r0, [r6, #4]
   1bb44:	cmp	r0, #0
   1bb48:	beq	1bb60 <__assert_fail@plt+0x9c18>
   1bb4c:	ldr	r4, [r0, #4]
   1bb50:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1bb54:	mov	r0, r4
   1bb58:	cmp	r4, #0
   1bb5c:	bne	1bb4c <__assert_fail@plt+0x9c04>
   1bb60:	add	r6, r6, #8
   1bb64:	ldr	r3, [r5, #4]
   1bb68:	cmp	r3, r6
   1bb6c:	bhi	1bb40 <__assert_fail@plt+0x9bf8>
   1bb70:	ldr	r0, [r5, #36]	; 0x24
   1bb74:	cmp	r0, #0
   1bb78:	beq	1bb90 <__assert_fail@plt+0x9c48>
   1bb7c:	ldr	r4, [r0, #4]
   1bb80:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1bb84:	mov	r0, r4
   1bb88:	cmp	r4, #0
   1bb8c:	bne	1bb7c <__assert_fail@plt+0x9c34>
   1bb90:	ldr	r0, [r5]
   1bb94:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1bb98:	mov	r0, r5
   1bb9c:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1bba0:	pop	{r4, r5, r6, pc}
   1bba4:	push	{r4, r5, lr}
   1bba8:	sub	sp, sp, #44	; 0x2c
   1bbac:	mov	r4, r0
   1bbb0:	mov	r0, r1
   1bbb4:	ldr	r1, [r4, #20]
   1bbb8:	bl	1b150 <__assert_fail@plt+0x9208>
   1bbbc:	subs	r5, r0, #0
   1bbc0:	beq	1bcb8 <__assert_fail@plt+0x9d70>
   1bbc4:	ldr	r3, [r4, #8]
   1bbc8:	cmp	r5, r3
   1bbcc:	beq	1bcc8 <__assert_fail@plt+0x9d80>
   1bbd0:	mov	r1, #8
   1bbd4:	mov	r0, r5
   1bbd8:	bl	20a14 <__assert_fail@plt+0xeacc>
   1bbdc:	str	r0, [sp]
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bcd0 <__assert_fail@plt+0x9d88>
   1bbe8:	str	r5, [sp, #8]
   1bbec:	add	r0, r0, r5, lsl #3
   1bbf0:	str	r0, [sp, #4]
   1bbf4:	mov	r2, #0
   1bbf8:	str	r2, [sp, #12]
   1bbfc:	str	r2, [sp, #16]
   1bc00:	ldr	r3, [r4, #20]
   1bc04:	str	r3, [sp, #20]
   1bc08:	ldr	r3, [r4, #24]
   1bc0c:	str	r3, [sp, #24]
   1bc10:	ldr	r3, [r4, #28]
   1bc14:	str	r3, [sp, #28]
   1bc18:	ldr	r3, [r4, #32]
   1bc1c:	str	r3, [sp, #32]
   1bc20:	ldr	r3, [r4, #36]	; 0x24
   1bc24:	str	r3, [sp, #36]	; 0x24
   1bc28:	mov	r1, r4
   1bc2c:	mov	r0, sp
   1bc30:	bl	1b24c <__assert_fail@plt+0x9304>
   1bc34:	subs	r5, r0, #0
   1bc38:	bne	1bc80 <__assert_fail@plt+0x9d38>
   1bc3c:	ldr	r3, [sp, #36]	; 0x24
   1bc40:	str	r3, [r4, #36]	; 0x24
   1bc44:	mov	r2, #1
   1bc48:	mov	r1, sp
   1bc4c:	mov	r0, r4
   1bc50:	bl	1b24c <__assert_fail@plt+0x9304>
   1bc54:	cmp	r0, #0
   1bc58:	beq	1bcb4 <__assert_fail@plt+0x9d6c>
   1bc5c:	mov	r2, #0
   1bc60:	mov	r1, sp
   1bc64:	mov	r0, r4
   1bc68:	bl	1b24c <__assert_fail@plt+0x9304>
   1bc6c:	cmp	r0, #0
   1bc70:	beq	1bcb4 <__assert_fail@plt+0x9d6c>
   1bc74:	ldr	r0, [sp]
   1bc78:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1bc7c:	b	1bcbc <__assert_fail@plt+0x9d74>
   1bc80:	ldr	r0, [r4]
   1bc84:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1bc88:	ldr	r3, [sp]
   1bc8c:	str	r3, [r4]
   1bc90:	ldr	r3, [sp, #4]
   1bc94:	str	r3, [r4, #4]
   1bc98:	ldr	r3, [sp, #8]
   1bc9c:	str	r3, [r4, #8]
   1bca0:	ldr	r3, [sp, #12]
   1bca4:	str	r3, [r4, #12]
   1bca8:	ldr	r3, [sp, #36]	; 0x24
   1bcac:	str	r3, [r4, #36]	; 0x24
   1bcb0:	b	1bcbc <__assert_fail@plt+0x9d74>
   1bcb4:	bl	11f24 <abort@plt>
   1bcb8:	mov	r5, #0
   1bcbc:	mov	r0, r5
   1bcc0:	add	sp, sp, #44	; 0x2c
   1bcc4:	pop	{r4, r5, pc}
   1bcc8:	mov	r5, #1
   1bccc:	b	1bcbc <__assert_fail@plt+0x9d74>
   1bcd0:	mov	r5, #0
   1bcd4:	b	1bcbc <__assert_fail@plt+0x9d74>
   1bcd8:	push	{r4, r5, r6, lr}
   1bcdc:	sub	sp, sp, #8
   1bce0:	subs	r6, r1, #0
   1bce4:	beq	1bd20 <__assert_fail@plt+0x9dd8>
   1bce8:	mov	r4, r0
   1bcec:	mov	r5, r2
   1bcf0:	mov	r3, #0
   1bcf4:	add	r2, sp, #4
   1bcf8:	mov	r1, r6
   1bcfc:	bl	1b3a0 <__assert_fail@plt+0x9458>
   1bd00:	cmp	r0, #0
   1bd04:	beq	1bd24 <__assert_fail@plt+0x9ddc>
   1bd08:	cmp	r5, #0
   1bd0c:	moveq	r0, #0
   1bd10:	strne	r0, [r5]
   1bd14:	movne	r0, #0
   1bd18:	add	sp, sp, #8
   1bd1c:	pop	{r4, r5, r6, pc}
   1bd20:	bl	11f24 <abort@plt>
   1bd24:	vldr	s15, [r4, #12]
   1bd28:	vcvt.f32.u32	s14, s15
   1bd2c:	ldr	r3, [r4, #20]
   1bd30:	vldr	s15, [r4, #8]
   1bd34:	vcvt.f32.u32	s15, s15
   1bd38:	vldr	s13, [r3, #8]
   1bd3c:	vmul.f32	s15, s15, s13
   1bd40:	vcmpe.f32	s14, s15
   1bd44:	vmrs	APSR_nzcv, fpscr
   1bd48:	bgt	1bd98 <__assert_fail@plt+0x9e50>
   1bd4c:	ldr	r3, [sp, #4]
   1bd50:	ldr	r2, [r3]
   1bd54:	cmp	r2, #0
   1bd58:	beq	1be3c <__assert_fail@plt+0x9ef4>
   1bd5c:	ldr	r0, [r4, #36]	; 0x24
   1bd60:	cmp	r0, #0
   1bd64:	beq	1be24 <__assert_fail@plt+0x9edc>
   1bd68:	ldr	r3, [r0, #4]
   1bd6c:	str	r3, [r4, #36]	; 0x24
   1bd70:	str	r6, [r0]
   1bd74:	ldr	r3, [sp, #4]
   1bd78:	ldr	r2, [r3, #4]
   1bd7c:	str	r2, [r0, #4]
   1bd80:	str	r0, [r3, #4]
   1bd84:	ldr	r3, [r4, #16]
   1bd88:	add	r3, r3, #1
   1bd8c:	str	r3, [r4, #16]
   1bd90:	mov	r0, #1
   1bd94:	b	1bd18 <__assert_fail@plt+0x9dd0>
   1bd98:	mov	r0, r4
   1bd9c:	bl	1b05c <__assert_fail@plt+0x9114>
   1bda0:	ldr	r3, [r4, #20]
   1bda4:	vldr	s13, [r3, #8]
   1bda8:	vldr	s15, [r4, #8]
   1bdac:	vcvt.f32.u32	s15, s15
   1bdb0:	vldr	s14, [r4, #12]
   1bdb4:	vcvt.f32.u32	s14, s14
   1bdb8:	vmul.f32	s12, s13, s15
   1bdbc:	vcmpe.f32	s14, s12
   1bdc0:	vmrs	APSR_nzcv, fpscr
   1bdc4:	ble	1bd4c <__assert_fail@plt+0x9e04>
   1bdc8:	ldrb	r2, [r3, #16]
   1bdcc:	cmp	r2, #0
   1bdd0:	vldr	s14, [r3, #12]
   1bdd4:	vmul.f32	s15, s15, s14
   1bdd8:	vmuleq.f32	s15, s15, s13
   1bddc:	vldr	s14, [pc, #140]	; 1be70 <__assert_fail@plt+0x9f28>
   1bde0:	vcmpe.f32	s15, s14
   1bde4:	vmrs	APSR_nzcv, fpscr
   1bde8:	bge	1be60 <__assert_fail@plt+0x9f18>
   1bdec:	vcvt.u32.f32	s15, s15
   1bdf0:	vmov	r1, s15
   1bdf4:	mov	r0, r4
   1bdf8:	bl	1bba4 <__assert_fail@plt+0x9c5c>
   1bdfc:	cmp	r0, #0
   1be00:	beq	1be68 <__assert_fail@plt+0x9f20>
   1be04:	mov	r3, #0
   1be08:	add	r2, sp, #4
   1be0c:	mov	r1, r6
   1be10:	mov	r0, r4
   1be14:	bl	1b3a0 <__assert_fail@plt+0x9458>
   1be18:	cmp	r0, #0
   1be1c:	beq	1bd4c <__assert_fail@plt+0x9e04>
   1be20:	bl	11f24 <abort@plt>
   1be24:	mov	r0, #8
   1be28:	bl	20a64 <__assert_fail@plt+0xeb1c>
   1be2c:	cmp	r0, #0
   1be30:	bne	1bd70 <__assert_fail@plt+0x9e28>
   1be34:	mvn	r0, #0
   1be38:	b	1bd18 <__assert_fail@plt+0x9dd0>
   1be3c:	str	r6, [r3]
   1be40:	ldr	r3, [r4, #16]
   1be44:	add	r3, r3, #1
   1be48:	str	r3, [r4, #16]
   1be4c:	ldr	r3, [r4, #12]
   1be50:	add	r3, r3, #1
   1be54:	str	r3, [r4, #12]
   1be58:	mov	r0, #1
   1be5c:	b	1bd18 <__assert_fail@plt+0x9dd0>
   1be60:	mvn	r0, #0
   1be64:	b	1bd18 <__assert_fail@plt+0x9dd0>
   1be68:	mvn	r0, #0
   1be6c:	b	1bd18 <__assert_fail@plt+0x9dd0>
   1be70:	svcmi	0x00800000
   1be74:	push	{r4, lr}
   1be78:	sub	sp, sp, #8
   1be7c:	mov	r4, r1
   1be80:	add	r2, sp, #4
   1be84:	bl	1bcd8 <__assert_fail@plt+0x9d90>
   1be88:	cmn	r0, #1
   1be8c:	beq	1bea4 <__assert_fail@plt+0x9f5c>
   1be90:	cmp	r0, #0
   1be94:	movne	r0, r4
   1be98:	ldreq	r0, [sp, #4]
   1be9c:	add	sp, sp, #8
   1bea0:	pop	{r4, pc}
   1bea4:	mov	r0, #0
   1bea8:	b	1be9c <__assert_fail@plt+0x9f54>
   1beac:	push	{r4, r5, r6, lr}
   1beb0:	sub	sp, sp, #8
   1beb4:	mov	r4, r0
   1beb8:	mov	r3, #1
   1bebc:	add	r2, sp, #4
   1bec0:	bl	1b3a0 <__assert_fail@plt+0x9458>
   1bec4:	subs	r5, r0, #0
   1bec8:	beq	1bee8 <__assert_fail@plt+0x9fa0>
   1becc:	ldr	r3, [r4, #16]
   1bed0:	sub	r3, r3, #1
   1bed4:	str	r3, [r4, #16]
   1bed8:	ldr	r3, [sp, #4]
   1bedc:	ldr	r3, [r3]
   1bee0:	cmp	r3, #0
   1bee4:	beq	1bef4 <__assert_fail@plt+0x9fac>
   1bee8:	mov	r0, r5
   1beec:	add	sp, sp, #8
   1bef0:	pop	{r4, r5, r6, pc}
   1bef4:	ldr	r3, [r4, #12]
   1bef8:	sub	r3, r3, #1
   1befc:	str	r3, [r4, #12]
   1bf00:	vmov	s15, r3
   1bf04:	vcvt.f32.u32	s15, s15
   1bf08:	ldr	r3, [r4, #20]
   1bf0c:	vldr	s14, [r4, #8]
   1bf10:	vcvt.f32.u32	s14, s14
   1bf14:	vldr	s13, [r3]
   1bf18:	vmul.f32	s14, s14, s13
   1bf1c:	vcmpe.f32	s15, s14
   1bf20:	vmrs	APSR_nzcv, fpscr
   1bf24:	bpl	1bee8 <__assert_fail@plt+0x9fa0>
   1bf28:	mov	r0, r4
   1bf2c:	bl	1b05c <__assert_fail@plt+0x9114>
   1bf30:	ldr	r3, [r4, #20]
   1bf34:	vldr	s15, [r4, #8]
   1bf38:	vcvt.f32.u32	s15, s15
   1bf3c:	vldr	s14, [r4, #12]
   1bf40:	vcvt.f32.u32	s13, s14
   1bf44:	vldr	s14, [r3]
   1bf48:	vmul.f32	s14, s15, s14
   1bf4c:	vcmpe.f32	s13, s14
   1bf50:	vmrs	APSR_nzcv, fpscr
   1bf54:	bpl	1bee8 <__assert_fail@plt+0x9fa0>
   1bf58:	ldrb	r2, [r3, #16]
   1bf5c:	cmp	r2, #0
   1bf60:	vldr	s14, [r3, #4]
   1bf64:	vmuleq.f32	s15, s15, s14
   1bf68:	vldreq	s14, [r3, #8]
   1bf6c:	vmul.f32	s15, s15, s14
   1bf70:	vcvt.u32.f32	s15, s15
   1bf74:	vmov	r1, s15
   1bf78:	mov	r0, r4
   1bf7c:	bl	1bba4 <__assert_fail@plt+0x9c5c>
   1bf80:	cmp	r0, #0
   1bf84:	bne	1bee8 <__assert_fail@plt+0x9fa0>
   1bf88:	ldr	r0, [r4, #36]	; 0x24
   1bf8c:	cmp	r0, #0
   1bf90:	beq	1bfa8 <__assert_fail@plt+0xa060>
   1bf94:	ldr	r6, [r0, #4]
   1bf98:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1bf9c:	mov	r0, r6
   1bfa0:	cmp	r6, #0
   1bfa4:	bne	1bf94 <__assert_fail@plt+0xa04c>
   1bfa8:	mov	r3, #0
   1bfac:	str	r3, [r4, #36]	; 0x24
   1bfb0:	b	1bee8 <__assert_fail@plt+0x9fa0>
   1bfb4:	push	{r4, lr}
   1bfb8:	bl	1beac <__assert_fail@plt+0x9f64>
   1bfbc:	pop	{r4, pc}
   1bfc0:	mov	r0, #0
   1bfc4:	bx	lr
   1bfc8:	push	{r4, r5, r6, lr}
   1bfcc:	mov	r6, r0
   1bfd0:	mov	r5, r1
   1bfd4:	mov	r0, #16
   1bfd8:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   1bfdc:	mov	r4, r0
   1bfe0:	cmp	r5, #0
   1bfe4:	moveq	r5, #1
   1bfe8:	mov	r1, #4
   1bfec:	mov	r0, r5
   1bff0:	bl	1fd08 <__assert_fail@plt+0xddc0>
   1bff4:	str	r0, [r4]
   1bff8:	mov	r3, #0
   1bffc:	str	r3, [r0]
   1c000:	str	r5, [r4, #4]
   1c004:	str	r3, [r4, #8]
   1c008:	ldr	r3, [pc, #16]	; 1c020 <__assert_fail@plt+0xa0d8>
   1c00c:	cmp	r6, #0
   1c010:	moveq	r6, r3
   1c014:	str	r6, [r4, #12]
   1c018:	mov	r0, r4
   1c01c:	pop	{r4, r5, r6, pc}
   1c020:	andeq	fp, r1, r0, asr #31
   1c024:	push	{r4, lr}
   1c028:	mov	r4, r0
   1c02c:	ldr	r0, [r0]
   1c030:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1c034:	mov	r0, r4
   1c038:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1c03c:	pop	{r4, pc}
   1c040:	push	{r4, r5, r6, r7, r8, lr}
   1c044:	mov	r4, r0
   1c048:	mov	r5, r1
   1c04c:	ldr	r3, [r0, #4]
   1c050:	sub	r3, r3, #1
   1c054:	ldr	r2, [r0, #8]
   1c058:	cmp	r3, r2
   1c05c:	bls	1c0c8 <__assert_fail@plt+0xa180>
   1c060:	ldr	r2, [r4]
   1c064:	ldr	r3, [r4, #8]
   1c068:	add	r3, r3, #1
   1c06c:	str	r3, [r4, #8]
   1c070:	str	r5, [r2, r3, lsl #2]
   1c074:	ldr	r6, [r4]
   1c078:	ldr	r5, [r4, #8]
   1c07c:	ldr	r8, [r4, #12]
   1c080:	ldr	r7, [r6, r5, lsl #2]
   1c084:	cmp	r5, #1
   1c088:	beq	1c0bc <__assert_fail@plt+0xa174>
   1c08c:	lsr	r4, r5, #1
   1c090:	mov	r1, r7
   1c094:	ldr	r0, [r6, r4, lsl #2]
   1c098:	blx	r8
   1c09c:	cmp	r0, #0
   1c0a0:	bgt	1c0bc <__assert_fail@plt+0xa174>
   1c0a4:	ldr	r3, [r6, r4, lsl #2]
   1c0a8:	str	r3, [r6, r5, lsl #2]
   1c0ac:	mov	r5, r4
   1c0b0:	cmp	r4, #1
   1c0b4:	bne	1c08c <__assert_fail@plt+0xa144>
   1c0b8:	mov	r5, r4
   1c0bc:	str	r7, [r6, r5, lsl #2]
   1c0c0:	mov	r0, #0
   1c0c4:	pop	{r4, r5, r6, r7, r8, pc}
   1c0c8:	mov	r2, #4
   1c0cc:	add	r1, r0, r2
   1c0d0:	ldr	r0, [r0]
   1c0d4:	bl	1fd38 <__assert_fail@plt+0xddf0>
   1c0d8:	str	r0, [r4]
   1c0dc:	b	1c060 <__assert_fail@plt+0xa118>
   1c0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0e4:	sub	sp, sp, #12
   1c0e8:	ldr	r3, [r0, #8]
   1c0ec:	cmp	r3, #0
   1c0f0:	beq	1c194 <__assert_fail@plt+0xa24c>
   1c0f4:	ldr	r2, [r0]
   1c0f8:	ldr	r1, [r2, #4]
   1c0fc:	str	r1, [sp, #4]
   1c100:	sub	r1, r3, #1
   1c104:	str	r1, [r0, #8]
   1c108:	ldr	r3, [r2, r3, lsl #2]
   1c10c:	str	r3, [r2, #4]
   1c110:	ldr	r5, [r0]
   1c114:	ldr	r8, [r0, #8]
   1c118:	ldr	r7, [r0, #12]
   1c11c:	ldr	r9, [r5, #4]
   1c120:	lsrs	sl, r8, #1
   1c124:	beq	1c180 <__assert_fail@plt+0xa238>
   1c128:	mov	r6, #1
   1c12c:	b	1c158 <__assert_fail@plt+0xa210>
   1c130:	mov	r1, r9
   1c134:	ldr	r0, [r5, r4, lsl #2]
   1c138:	blx	r7
   1c13c:	cmp	r0, #0
   1c140:	ble	1c184 <__assert_fail@plt+0xa23c>
   1c144:	ldr	r3, [r5, r4, lsl #2]
   1c148:	str	r3, [r5, r6, lsl #2]
   1c14c:	mov	r6, r4
   1c150:	cmp	r4, sl
   1c154:	bhi	1c184 <__assert_fail@plt+0xa23c>
   1c158:	lsl	r4, r6, #1
   1c15c:	cmp	r8, r4
   1c160:	bls	1c130 <__assert_fail@plt+0xa1e8>
   1c164:	add	fp, r4, #1
   1c168:	ldr	r1, [r5, fp, lsl #2]
   1c16c:	ldr	r0, [r5, r4, lsl #2]
   1c170:	blx	r7
   1c174:	cmp	r0, #0
   1c178:	movlt	r4, fp
   1c17c:	b	1c130 <__assert_fail@plt+0xa1e8>
   1c180:	mov	r6, #1
   1c184:	str	r9, [r5, r6, lsl #2]
   1c188:	ldr	r0, [sp, #4]
   1c18c:	add	sp, sp, #12
   1c190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c194:	mov	r3, #0
   1c198:	str	r3, [sp, #4]
   1c19c:	b	1c188 <__assert_fail@plt+0xa240>
   1c1a0:	add	r2, r1, #11
   1c1a4:	mov	r3, #0
   1c1a8:	strb	r3, [r1, #11]
   1c1ac:	cmp	r0, #0
   1c1b0:	blt	1c1e8 <__assert_fail@plt+0xa2a0>
   1c1b4:	ldr	ip, [pc, #124]	; 1c238 <__assert_fail@plt+0xa2f0>
   1c1b8:	smull	r3, r1, ip, r0
   1c1bc:	asr	r3, r0, #31
   1c1c0:	rsb	r3, r3, r1, asr #2
   1c1c4:	add	r1, r3, r3, lsl #2
   1c1c8:	sub	r0, r0, r1, lsl #1
   1c1cc:	add	r0, r0, #48	; 0x30
   1c1d0:	strb	r0, [r2, #-1]!
   1c1d4:	mov	r0, r3
   1c1d8:	cmp	r3, #0
   1c1dc:	bne	1c1b8 <__assert_fail@plt+0xa270>
   1c1e0:	mov	r0, r2
   1c1e4:	bx	lr
   1c1e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1c1ec:	ldr	lr, [pc, #68]	; 1c238 <__assert_fail@plt+0xa2f0>
   1c1f0:	b	1c1f8 <__assert_fail@plt+0xa2b0>
   1c1f4:	mov	r2, r1
   1c1f8:	sub	r1, r2, #1
   1c1fc:	smull	r3, ip, lr, r0
   1c200:	asr	r3, r0, #31
   1c204:	rsb	r3, r3, ip, asr #2
   1c208:	add	ip, r3, r3, lsl #2
   1c20c:	sub	r0, r0, ip, lsl #1
   1c210:	rsb	r0, r0, #48	; 0x30
   1c214:	strb	r0, [r2, #-1]
   1c218:	mov	r0, r3
   1c21c:	cmp	r3, #0
   1c220:	bne	1c1f4 <__assert_fail@plt+0xa2ac>
   1c224:	sub	r2, r2, #2
   1c228:	mov	r3, #45	; 0x2d
   1c22c:	strb	r3, [r1, #-1]
   1c230:	mov	r0, r2
   1c234:	pop	{pc}		; (ldr pc, [sp], #4)
   1c238:	strbtvs	r6, [r6], -r7, ror #12
   1c23c:	mov	r3, r0
   1c240:	add	r0, r1, #10
   1c244:	mov	r2, #0
   1c248:	strb	r2, [r1, #10]
   1c24c:	ldr	ip, [pc, #36]	; 1c278 <__assert_fail@plt+0xa330>
   1c250:	umull	r1, r2, ip, r3
   1c254:	lsr	r2, r2, #3
   1c258:	add	r1, r2, r2, lsl #2
   1c25c:	sub	r3, r3, r1, lsl #1
   1c260:	add	r3, r3, #48	; 0x30
   1c264:	strb	r3, [r0, #-1]!
   1c268:	mov	r3, r2
   1c26c:	cmp	r2, #0
   1c270:	bne	1c250 <__assert_fail@plt+0xa308>
   1c274:	bx	lr
   1c278:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c27c:	push	{r4, r5, r6, r8, r9, lr}
   1c280:	mov	r4, r0
   1c284:	mov	r5, r1
   1c288:	add	r6, r2, #20
   1c28c:	mov	r3, #0
   1c290:	strb	r3, [r2, #20]
   1c294:	mov	r8, #10
   1c298:	mov	r9, #0
   1c29c:	mov	r2, r8
   1c2a0:	mov	r3, r9
   1c2a4:	mov	r0, r4
   1c2a8:	mov	r1, r5
   1c2ac:	bl	21d7c <_obstack_memory_used@@Base+0x898>
   1c2b0:	add	r2, r2, #48	; 0x30
   1c2b4:	strb	r2, [r6, #-1]!
   1c2b8:	mov	r2, r8
   1c2bc:	mov	r3, r9
   1c2c0:	mov	r0, r4
   1c2c4:	mov	r1, r5
   1c2c8:	bl	21d7c <_obstack_memory_used@@Base+0x898>
   1c2cc:	mov	r4, r0
   1c2d0:	mov	r5, r1
   1c2d4:	orrs	r3, r4, r5
   1c2d8:	bne	1c29c <__assert_fail@plt+0xa354>
   1c2dc:	mov	r0, r6
   1c2e0:	pop	{r4, r5, r6, r8, r9, pc}
   1c2e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2e8:	sub	sp, sp, #28
   1c2ec:	mov	r5, r0
   1c2f0:	mov	r4, r2
   1c2f4:	add	r8, r0, r1
   1c2f8:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1c2fc:	cmp	r0, #1
   1c300:	bls	1c328 <__assert_fail@plt+0xa3e0>
   1c304:	cmp	r5, r8
   1c308:	bcs	1c4c4 <__assert_fail@plt+0xa57c>
   1c30c:	mov	r6, #0
   1c310:	mov	fp, r6
   1c314:	and	sl, r4, #2
   1c318:	mvn	r9, #-2147483648	; 0x80000000
   1c31c:	and	r3, r4, #1
   1c320:	str	r3, [sp, #4]
   1c324:	b	1c374 <__assert_fail@plt+0xa42c>
   1c328:	cmp	r5, r8
   1c32c:	movcs	r6, #0
   1c330:	bcs	1c46c <__assert_fail@plt+0xa524>
   1c334:	bl	11d2c <__ctype_b_loc@plt>
   1c338:	ldr	r1, [r0]
   1c33c:	mov	r6, #0
   1c340:	and	r2, r4, #2
   1c344:	b	1c484 <__assert_fail@plt+0xa53c>
   1c348:	cmp	r3, #65	; 0x41
   1c34c:	bcc	1c394 <__assert_fail@plt+0xa44c>
   1c350:	cmp	r3, #95	; 0x5f
   1c354:	bls	1c364 <__assert_fail@plt+0xa41c>
   1c358:	sub	r3, r3, #97	; 0x61
   1c35c:	cmp	r3, #29
   1c360:	bhi	1c394 <__assert_fail@plt+0xa44c>
   1c364:	add	r5, r5, #1
   1c368:	add	r6, r6, #1
   1c36c:	cmp	r8, r5
   1c370:	bls	1c46c <__assert_fail@plt+0xa524>
   1c374:	ldrb	r3, [r5]
   1c378:	cmp	r3, #63	; 0x3f
   1c37c:	bhi	1c348 <__assert_fail@plt+0xa400>
   1c380:	cmp	r3, #37	; 0x25
   1c384:	bcs	1c364 <__assert_fail@plt+0xa41c>
   1c388:	sub	r3, r3, #32
   1c38c:	cmp	r3, #3
   1c390:	bls	1c364 <__assert_fail@plt+0xa41c>
   1c394:	add	r7, sp, #24
   1c398:	str	fp, [r7, #-8]!
   1c39c:	str	fp, [sp, #20]
   1c3a0:	b	1c40c <__assert_fail@plt+0xa4c4>
   1c3a4:	ldr	r3, [sp, #4]
   1c3a8:	cmp	r3, #0
   1c3ac:	bne	1c460 <__assert_fail@plt+0xa518>
   1c3b0:	add	r5, r5, #1
   1c3b4:	add	r6, r6, #1
   1c3b8:	b	1c36c <__assert_fail@plt+0xa424>
   1c3bc:	ldr	r3, [sp, #4]
   1c3c0:	cmp	r3, #0
   1c3c4:	bne	1c460 <__assert_fail@plt+0xa518>
   1c3c8:	add	r6, r6, #1
   1c3cc:	mov	r5, r8
   1c3d0:	b	1c36c <__assert_fail@plt+0xa424>
   1c3d4:	cmp	sl, #0
   1c3d8:	bne	1c460 <__assert_fail@plt+0xa518>
   1c3dc:	ldr	r0, [sp, #12]
   1c3e0:	bl	11bc4 <iswcntrl@plt>
   1c3e4:	cmp	r0, #0
   1c3e8:	bne	1c3f8 <__assert_fail@plt+0xa4b0>
   1c3ec:	cmn	r6, #-2147483647	; 0x80000001
   1c3f0:	beq	1c468 <__assert_fail@plt+0xa520>
   1c3f4:	add	r6, r6, #1
   1c3f8:	add	r5, r5, r4
   1c3fc:	mov	r0, r7
   1c400:	bl	11af8 <mbsinit@plt>
   1c404:	cmp	r0, #0
   1c408:	bne	1c36c <__assert_fail@plt+0xa424>
   1c40c:	mov	r3, r7
   1c410:	sub	r2, r8, r5
   1c414:	mov	r1, r5
   1c418:	add	r0, sp, #12
   1c41c:	bl	20fd4 <__assert_fail@plt+0xf08c>
   1c420:	mov	r4, r0
   1c424:	cmn	r0, #1
   1c428:	beq	1c3a4 <__assert_fail@plt+0xa45c>
   1c42c:	cmn	r0, #2
   1c430:	beq	1c3bc <__assert_fail@plt+0xa474>
   1c434:	cmp	r0, #0
   1c438:	moveq	r4, #1
   1c43c:	ldr	r0, [sp, #12]
   1c440:	bl	11a74 <wcwidth@plt>
   1c444:	cmp	r0, #0
   1c448:	blt	1c3d4 <__assert_fail@plt+0xa48c>
   1c44c:	sub	r3, r9, r6
   1c450:	cmp	r0, r3
   1c454:	bgt	1c468 <__assert_fail@plt+0xa520>
   1c458:	add	r6, r6, r0
   1c45c:	b	1c3f8 <__assert_fail@plt+0xa4b0>
   1c460:	mvn	r6, #0
   1c464:	b	1c46c <__assert_fail@plt+0xa524>
   1c468:	mvn	r6, #-2147483648	; 0x80000000
   1c46c:	mov	r0, r6
   1c470:	add	sp, sp, #28
   1c474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c478:	add	r6, r6, #1
   1c47c:	cmp	r8, r5
   1c480:	beq	1c46c <__assert_fail@plt+0xa524>
   1c484:	ldrb	r3, [r5], #1
   1c488:	lsl	r3, r3, #1
   1c48c:	ldrh	r3, [r1, r3]
   1c490:	tst	r3, #16384	; 0x4000
   1c494:	beq	1c4a4 <__assert_fail@plt+0xa55c>
   1c498:	cmn	r6, #-2147483647	; 0x80000001
   1c49c:	bne	1c478 <__assert_fail@plt+0xa530>
   1c4a0:	b	1c46c <__assert_fail@plt+0xa524>
   1c4a4:	cmp	r2, #0
   1c4a8:	bne	1c4cc <__assert_fail@plt+0xa584>
   1c4ac:	tst	r3, #2
   1c4b0:	bne	1c47c <__assert_fail@plt+0xa534>
   1c4b4:	cmn	r6, #-2147483647	; 0x80000001
   1c4b8:	beq	1c46c <__assert_fail@plt+0xa524>
   1c4bc:	add	r6, r6, #1
   1c4c0:	b	1c47c <__assert_fail@plt+0xa534>
   1c4c4:	mov	r6, #0
   1c4c8:	b	1c46c <__assert_fail@plt+0xa524>
   1c4cc:	mvn	r6, #0
   1c4d0:	b	1c46c <__assert_fail@plt+0xa524>
   1c4d4:	push	{r4, r5, r6, lr}
   1c4d8:	mov	r4, r0
   1c4dc:	mov	r5, r1
   1c4e0:	bl	11d50 <strlen@plt>
   1c4e4:	mov	r2, r5
   1c4e8:	mov	r1, r0
   1c4ec:	mov	r0, r4
   1c4f0:	bl	1c2e4 <__assert_fail@plt+0xa39c>
   1c4f4:	pop	{r4, r5, r6, pc}
   1c4f8:	cmp	r0, #0
   1c4fc:	beq	1c5c0 <__assert_fail@plt+0xa678>
   1c500:	ldrb	r3, [r0]
   1c504:	cmp	r3, #0
   1c508:	bne	1c520 <__assert_fail@plt+0xa5d8>
   1c50c:	mov	r0, #0
   1c510:	bx	lr
   1c514:	ldrb	r3, [r0, #1]!
   1c518:	cmp	r3, #0
   1c51c:	beq	1c5c8 <__assert_fail@plt+0xa680>
   1c520:	cmp	r3, #9
   1c524:	bcc	1c538 <__assert_fail@plt+0xa5f0>
   1c528:	cmp	r3, #13
   1c52c:	bls	1c514 <__assert_fail@plt+0xa5cc>
   1c530:	cmp	r3, #32
   1c534:	beq	1c514 <__assert_fail@plt+0xa5cc>
   1c538:	sub	r3, r3, #48	; 0x30
   1c53c:	cmp	r3, #9
   1c540:	bhi	1c5d0 <__assert_fail@plt+0xa688>
   1c544:	push	{lr}		; (str lr, [sp, #-4]!)
   1c548:	sub	sp, sp, #12
   1c54c:	add	r1, sp, #8
   1c550:	mov	r3, #0
   1c554:	str	r3, [r1, #-4]!
   1c558:	mov	r2, #10
   1c55c:	bl	11d44 <strtoul@plt>
   1c560:	ldr	r2, [sp, #4]
   1c564:	cmp	r2, #0
   1c568:	beq	1c5b4 <__assert_fail@plt+0xa66c>
   1c56c:	ldrb	r3, [r2]
   1c570:	cmp	r3, #0
   1c574:	bne	1c590 <__assert_fail@plt+0xa648>
   1c578:	b	1c5b8 <__assert_fail@plt+0xa670>
   1c57c:	add	r2, r2, #1
   1c580:	str	r2, [sp, #4]
   1c584:	ldrb	r3, [r2]
   1c588:	cmp	r3, #0
   1c58c:	beq	1c5b8 <__assert_fail@plt+0xa670>
   1c590:	cmp	r3, #9
   1c594:	bcc	1c5a8 <__assert_fail@plt+0xa660>
   1c598:	cmp	r3, #13
   1c59c:	bls	1c57c <__assert_fail@plt+0xa634>
   1c5a0:	cmp	r3, #32
   1c5a4:	beq	1c57c <__assert_fail@plt+0xa634>
   1c5a8:	cmp	r3, #0
   1c5ac:	cmpne	r3, #44	; 0x2c
   1c5b0:	beq	1c5b8 <__assert_fail@plt+0xa670>
   1c5b4:	mov	r0, #0
   1c5b8:	add	sp, sp, #12
   1c5bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5c0:	mov	r0, #0
   1c5c4:	bx	lr
   1c5c8:	mov	r0, #0
   1c5cc:	bx	lr
   1c5d0:	mov	r0, #0
   1c5d4:	bx	lr
   1c5d8:	push	{lr}		; (str lr, [sp, #-4]!)
   1c5dc:	sub	sp, sp, #132	; 0x84
   1c5e0:	mov	r2, sp
   1c5e4:	mov	r1, #128	; 0x80
   1c5e8:	mov	r0, #0
   1c5ec:	bl	11ed0 <sched_getaffinity@plt>
   1c5f0:	cmp	r0, #0
   1c5f4:	beq	1c604 <__assert_fail@plt+0xa6bc>
   1c5f8:	mov	r0, #0
   1c5fc:	add	sp, sp, #132	; 0x84
   1c600:	pop	{pc}		; (ldr pc, [sp], #4)
   1c604:	mov	r1, sp
   1c608:	mov	r0, #128	; 0x80
   1c60c:	bl	11b10 <__sched_cpucount@plt>
   1c610:	cmp	r0, #0
   1c614:	beq	1c5f8 <__assert_fail@plt+0xa6b0>
   1c618:	b	1c5fc <__assert_fail@plt+0xa6b4>
   1c61c:	push	{r4, r5, r6, lr}
   1c620:	cmp	r0, #2
   1c624:	beq	1c664 <__assert_fail@plt+0xa71c>
   1c628:	cmp	r0, #1
   1c62c:	beq	1c6c4 <__assert_fail@plt+0xa77c>
   1c630:	mov	r0, #83	; 0x53
   1c634:	bl	11b70 <sysconf@plt>
   1c638:	mov	r4, r0
   1c63c:	sub	r3, r0, #1
   1c640:	cmp	r3, #1
   1c644:	bls	1c6cc <__assert_fail@plt+0xa784>
   1c648:	cmp	r4, #0
   1c64c:	movle	r4, #1
   1c650:	mvn	r5, #0
   1c654:	cmp	r4, r5
   1c658:	movcc	r0, r4
   1c65c:	movcs	r0, r5
   1c660:	pop	{r4, r5, r6, pc}
   1c664:	ldr	r0, [pc, #112]	; 1c6dc <__assert_fail@plt+0xa794>
   1c668:	bl	11cb4 <getenv@plt>
   1c66c:	bl	1c4f8 <__assert_fail@plt+0xa5b0>
   1c670:	mov	r4, r0
   1c674:	ldr	r0, [pc, #100]	; 1c6e0 <__assert_fail@plt+0xa798>
   1c678:	bl	11cb4 <getenv@plt>
   1c67c:	bl	1c4f8 <__assert_fail@plt+0xa5b0>
   1c680:	subs	r5, r0, #0
   1c684:	mvneq	r5, #0
   1c688:	cmp	r4, #0
   1c68c:	bne	1c6b4 <__assert_fail@plt+0xa76c>
   1c690:	bl	1c5d8 <__assert_fail@plt+0xa690>
   1c694:	subs	r4, r0, #0
   1c698:	bne	1c654 <__assert_fail@plt+0xa70c>
   1c69c:	mov	r0, #84	; 0x54
   1c6a0:	bl	11b70 <sysconf@plt>
   1c6a4:	cmp	r0, #1
   1c6a8:	movge	r4, r0
   1c6ac:	movlt	r4, #1
   1c6b0:	b	1c654 <__assert_fail@plt+0xa70c>
   1c6b4:	cmp	r5, r4
   1c6b8:	movcc	r0, r5
   1c6bc:	movcs	r0, r4
   1c6c0:	pop	{r4, r5, r6, pc}
   1c6c4:	mvn	r5, #0
   1c6c8:	b	1c690 <__assert_fail@plt+0xa748>
   1c6cc:	bl	1c5d8 <__assert_fail@plt+0xa690>
   1c6d0:	cmp	r4, r0
   1c6d4:	movcc	r4, r0
   1c6d8:	b	1c648 <__assert_fail@plt+0xa700>
   1c6dc:	andeq	r4, r2, ip, ror r1
   1c6e0:	andeq	r4, r2, ip, lsl #3
   1c6e4:	andeq	r0, r0, r0
   1c6e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1c6ec:	vpush	{d8}
   1c6f0:	sub	sp, sp, #68	; 0x44
   1c6f4:	mov	r0, #85	; 0x55
   1c6f8:	bl	11b70 <sysconf@plt>
   1c6fc:	vmov	s15, r0
   1c700:	vcvt.f64.s32	d8, s15
   1c704:	mov	r0, #30
   1c708:	bl	11b70 <sysconf@plt>
   1c70c:	vcmpe.f64	d8, #0.0
   1c710:	vmrs	APSR_nzcv, fpscr
   1c714:	blt	1c73c <__assert_fail@plt+0xa7f4>
   1c718:	vmov	s15, r0
   1c71c:	vcvt.f64.s32	d0, s15
   1c720:	vcmpe.f64	d0, #0.0
   1c724:	vmrs	APSR_nzcv, fpscr
   1c728:	vmulge.f64	d0, d8, d0
   1c72c:	blt	1c73c <__assert_fail@plt+0xa7f4>
   1c730:	add	sp, sp, #68	; 0x44
   1c734:	vpop	{d8}
   1c738:	pop	{pc}		; (ldr pc, [sp], #4)
   1c73c:	mov	r0, sp
   1c740:	bl	11ccc <sysinfo@plt>
   1c744:	cmp	r0, #0
   1c748:	vldreq	s15, [sp, #16]
   1c74c:	vcvteq.f64.u32	d0, s15
   1c750:	vldreq	s15, [sp, #52]	; 0x34
   1c754:	vcvteq.f64.u32	d8, s15
   1c758:	vmuleq.f64	d0, d0, d8
   1c75c:	vldrne	d0, [pc, #4]	; 1c768 <__assert_fail@plt+0xa820>
   1c760:	b	1c730 <__assert_fail@plt+0xa7e8>
   1c764:	nop			; (mov r0, r0)
   1c768:	andeq	r0, r0, r0
   1c76c:	orrsmi	r0, r0, r0
   1c770:	push	{lr}		; (str lr, [sp, #-4]!)
   1c774:	vpush	{d8}
   1c778:	sub	sp, sp, #68	; 0x44
   1c77c:	mov	r0, #86	; 0x56
   1c780:	bl	11b70 <sysconf@plt>
   1c784:	vmov	s15, r0
   1c788:	vcvt.f64.s32	d8, s15
   1c78c:	mov	r0, #30
   1c790:	bl	11b70 <sysconf@plt>
   1c794:	vcmpe.f64	d8, #0.0
   1c798:	vmrs	APSR_nzcv, fpscr
   1c79c:	blt	1c7c4 <__assert_fail@plt+0xa87c>
   1c7a0:	vmov	s15, r0
   1c7a4:	vcvt.f64.s32	d0, s15
   1c7a8:	vcmpe.f64	d0, #0.0
   1c7ac:	vmrs	APSR_nzcv, fpscr
   1c7b0:	vmulge.f64	d0, d8, d0
   1c7b4:	blt	1c7c4 <__assert_fail@plt+0xa87c>
   1c7b8:	add	sp, sp, #68	; 0x44
   1c7bc:	vpop	{d8}
   1c7c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7c4:	mov	r0, sp
   1c7c8:	bl	11ccc <sysinfo@plt>
   1c7cc:	cmp	r0, #0
   1c7d0:	bne	1c7f8 <__assert_fail@plt+0xa8b0>
   1c7d4:	vldr	s15, [sp, #20]
   1c7d8:	vcvt.f64.u32	d0, s15
   1c7dc:	vldr	s15, [sp, #28]
   1c7e0:	vcvt.f64.u32	d8, s15
   1c7e4:	vadd.f64	d0, d0, d8
   1c7e8:	vldr	s15, [sp, #52]	; 0x34
   1c7ec:	vcvt.f64.u32	d8, s15
   1c7f0:	vmul.f64	d0, d0, d8
   1c7f4:	b	1c7b8 <__assert_fail@plt+0xa870>
   1c7f8:	bl	1c6e8 <__assert_fail@plt+0xa7a0>
   1c7fc:	vldr	d8, [pc, #4]	; 1c808 <__assert_fail@plt+0xa8c0>
   1c800:	vmul.f64	d0, d0, d8
   1c804:	b	1c7b8 <__assert_fail@plt+0xa870>
   1c808:	andeq	r0, r0, r0
   1c80c:	svccc	0x00d00000
   1c810:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c814:	mov	r4, r0
   1c818:	mov	r5, r1
   1c81c:	ldr	r8, [r0]
   1c820:	ldr	r7, [r0, #4]
   1c824:	ldr	r3, [pc, #388]	; 1c9b0 <__assert_fail@plt+0xaa68>
   1c828:	ldr	r3, [r3]
   1c82c:	cmp	r3, #0
   1c830:	blt	1c870 <__assert_fail@plt+0xa928>
   1c834:	bl	11eac <pipe2@plt>
   1c838:	subs	r9, r0, #0
   1c83c:	blt	1c854 <__assert_fail@plt+0xa90c>
   1c840:	mov	r2, #1
   1c844:	ldr	r3, [pc, #356]	; 1c9b0 <__assert_fail@plt+0xaa68>
   1c848:	str	r2, [r3]
   1c84c:	mov	r0, r9
   1c850:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c854:	bl	11d74 <__errno_location@plt>
   1c858:	ldr	r3, [r0]
   1c85c:	cmp	r3, #38	; 0x26
   1c860:	bne	1c840 <__assert_fail@plt+0xa8f8>
   1c864:	mvn	r2, #0
   1c868:	ldr	r3, [pc, #320]	; 1c9b0 <__assert_fail@plt+0xaa68>
   1c86c:	str	r2, [r3]
   1c870:	bic	r3, r5, #524288	; 0x80000
   1c874:	bics	r6, r3, #2048	; 0x800
   1c878:	bne	1c930 <__assert_fail@plt+0xa9e8>
   1c87c:	mov	r0, r4
   1c880:	bl	11df8 <pipe@plt>
   1c884:	cmp	r0, #0
   1c888:	blt	1c9a8 <__assert_fail@plt+0xaa60>
   1c88c:	tst	r5, #2048	; 0x800
   1c890:	bne	1c944 <__assert_fail@plt+0xa9fc>
   1c894:	ands	r9, r5, #524288	; 0x80000
   1c898:	beq	1c84c <__assert_fail@plt+0xa904>
   1c89c:	mov	r2, #0
   1c8a0:	mov	r1, #1
   1c8a4:	ldr	r0, [r4, #4]
   1c8a8:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c8ac:	cmp	r0, #0
   1c8b0:	blt	1c900 <__assert_fail@plt+0xa9b8>
   1c8b4:	orr	r2, r0, #1
   1c8b8:	mov	r1, #2
   1c8bc:	ldr	r0, [r4, #4]
   1c8c0:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c8c4:	cmn	r0, #1
   1c8c8:	beq	1c900 <__assert_fail@plt+0xa9b8>
   1c8cc:	mov	r2, #0
   1c8d0:	mov	r1, #1
   1c8d4:	ldr	r0, [r4]
   1c8d8:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c8dc:	cmp	r0, #0
   1c8e0:	blt	1c900 <__assert_fail@plt+0xa9b8>
   1c8e4:	orr	r2, r0, #1
   1c8e8:	mov	r1, #2
   1c8ec:	ldr	r0, [r4]
   1c8f0:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c8f4:	cmn	r0, #1
   1c8f8:	movne	r9, r6
   1c8fc:	bne	1c84c <__assert_fail@plt+0xa904>
   1c900:	bl	11d74 <__errno_location@plt>
   1c904:	mov	r5, r0
   1c908:	ldr	r6, [r0]
   1c90c:	ldr	r0, [r4]
   1c910:	bl	11f30 <close@plt>
   1c914:	ldr	r0, [r4, #4]
   1c918:	bl	11f30 <close@plt>
   1c91c:	str	r8, [r4]
   1c920:	str	r7, [r4, #4]
   1c924:	str	r6, [r5]
   1c928:	mvn	r9, #0
   1c92c:	b	1c84c <__assert_fail@plt+0xa904>
   1c930:	bl	11d74 <__errno_location@plt>
   1c934:	mov	r3, #22
   1c938:	str	r3, [r0]
   1c93c:	mvn	r9, #0
   1c940:	b	1c84c <__assert_fail@plt+0xa904>
   1c944:	mov	r2, #0
   1c948:	mov	r1, #3
   1c94c:	ldr	r0, [r4, #4]
   1c950:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c954:	subs	r2, r0, #0
   1c958:	blt	1c900 <__assert_fail@plt+0xa9b8>
   1c95c:	orr	r2, r2, #2048	; 0x800
   1c960:	mov	r1, #4
   1c964:	ldr	r0, [r4, #4]
   1c968:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c96c:	cmn	r0, #1
   1c970:	beq	1c900 <__assert_fail@plt+0xa9b8>
   1c974:	mov	r2, #0
   1c978:	mov	r1, #3
   1c97c:	ldr	r0, [r4]
   1c980:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c984:	cmp	r0, #0
   1c988:	blt	1c900 <__assert_fail@plt+0xa9b8>
   1c98c:	orr	r2, r0, #2048	; 0x800
   1c990:	mov	r1, #4
   1c994:	ldr	r0, [r4]
   1c998:	bl	20c44 <__assert_fail@plt+0xecfc>
   1c99c:	cmn	r0, #1
   1c9a0:	bne	1c894 <__assert_fail@plt+0xa94c>
   1c9a4:	b	1c900 <__assert_fail@plt+0xa9b8>
   1c9a8:	mvn	r9, #0
   1c9ac:	b	1c84c <__assert_fail@plt+0xa904>
   1c9b0:	andeq	r5, r3, ip, asr #17
   1c9b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c9b8:	sub	sp, sp, #12
   1c9bc:	ldr	r0, [pc, #76]	; 1ca10 <__assert_fail@plt+0xaac8>
   1c9c0:	bl	11cb4 <getenv@plt>
   1c9c4:	cmp	r0, #0
   1c9c8:	beq	1ca08 <__assert_fail@plt+0xaac0>
   1c9cc:	ldrb	r3, [r0]
   1c9d0:	cmp	r3, #0
   1c9d4:	ldreq	r0, [pc, #56]	; 1ca14 <__assert_fail@plt+0xaacc>
   1c9d8:	bne	1c9e4 <__assert_fail@plt+0xaa9c>
   1c9dc:	add	sp, sp, #12
   1c9e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9e4:	mov	r2, #10
   1c9e8:	add	r1, sp, #4
   1c9ec:	bl	11a38 <strtol@plt>
   1c9f0:	ldr	r3, [sp, #4]
   1c9f4:	ldrb	r2, [r3]
   1c9f8:	ldr	r3, [pc, #20]	; 1ca14 <__assert_fail@plt+0xaacc>
   1c9fc:	cmp	r2, #0
   1ca00:	movne	r0, r3
   1ca04:	b	1c9dc <__assert_fail@plt+0xaa94>
   1ca08:	ldr	r0, [pc, #4]	; 1ca14 <__assert_fail@plt+0xaacc>
   1ca0c:	b	1c9dc <__assert_fail@plt+0xaa94>
   1ca10:	andeq	r4, r2, r0, lsr #3
   1ca14:	andeq	r1, r3, r9, rrx
   1ca18:	push	{r4, r5, r6, lr}
   1ca1c:	subs	r4, r0, #0
   1ca20:	beq	1ca98 <__assert_fail@plt+0xab50>
   1ca24:	mov	r1, #47	; 0x2f
   1ca28:	mov	r0, r4
   1ca2c:	bl	11e58 <strrchr@plt>
   1ca30:	cmp	r0, #0
   1ca34:	addne	r5, r0, #1
   1ca38:	moveq	r5, r4
   1ca3c:	sub	r3, r5, r4
   1ca40:	cmp	r3, #6
   1ca44:	ble	1ca84 <__assert_fail@plt+0xab3c>
   1ca48:	mov	r2, #7
   1ca4c:	ldr	r1, [pc, #96]	; 1cab4 <__assert_fail@plt+0xab6c>
   1ca50:	sub	r0, r5, #7
   1ca54:	bl	11f0c <strncmp@plt>
   1ca58:	cmp	r0, #0
   1ca5c:	bne	1ca84 <__assert_fail@plt+0xab3c>
   1ca60:	mov	r2, #3
   1ca64:	ldr	r1, [pc, #76]	; 1cab8 <__assert_fail@plt+0xab70>
   1ca68:	mov	r0, r5
   1ca6c:	bl	11f0c <strncmp@plt>
   1ca70:	cmp	r0, #0
   1ca74:	addeq	r4, r5, #3
   1ca78:	ldreq	r3, [pc, #60]	; 1cabc <__assert_fail@plt+0xab74>
   1ca7c:	streq	r4, [r3]
   1ca80:	movne	r4, r5
   1ca84:	ldr	r3, [pc, #52]	; 1cac0 <__assert_fail@plt+0xab78>
   1ca88:	str	r4, [r3]
   1ca8c:	ldr	r3, [pc, #48]	; 1cac4 <__assert_fail@plt+0xab7c>
   1ca90:	str	r4, [r3]
   1ca94:	pop	{r4, r5, r6, pc}
   1ca98:	ldr	r3, [pc, #40]	; 1cac8 <__assert_fail@plt+0xab80>
   1ca9c:	ldr	r3, [r3]
   1caa0:	mov	r2, #55	; 0x37
   1caa4:	mov	r1, #1
   1caa8:	ldr	r0, [pc, #28]	; 1cacc <__assert_fail@plt+0xab84>
   1caac:	bl	11c18 <fwrite@plt>
   1cab0:	bl	11f24 <abort@plt>
   1cab4:	andeq	r4, r2, r8, ror #3
   1cab8:	strdeq	r4, [r2], -r0
   1cabc:			; <UNDEFINED> instruction: 0x000352b8
   1cac0:	ldrdeq	r5, [r3], -r0
   1cac4:			; <UNDEFINED> instruction: 0x000352bc
   1cac8:	andeq	r5, r3, r8, asr #5
   1cacc:			; <UNDEFINED> instruction: 0x000241b0
   1cad0:	push	{r4, r5, r6, lr}
   1cad4:	mov	r5, r0
   1cad8:	mov	r4, r1
   1cadc:	mov	r2, #48	; 0x30
   1cae0:	mov	r1, #0
   1cae4:	bl	11d98 <memset@plt>
   1cae8:	cmp	r4, #10
   1caec:	beq	1cafc <__assert_fail@plt+0xabb4>
   1caf0:	str	r4, [r5]
   1caf4:	mov	r0, r5
   1caf8:	pop	{r4, r5, r6, pc}
   1cafc:	bl	11f24 <abort@plt>
   1cb00:	push	{r4, r5, r6, lr}
   1cb04:	mov	r4, r0
   1cb08:	mov	r5, r1
   1cb0c:	mov	r2, #5
   1cb10:	mov	r1, r0
   1cb14:	mov	r0, #0
   1cb18:	bl	11b58 <dcgettext@plt>
   1cb1c:	cmp	r4, r0
   1cb20:	popne	{r4, r5, r6, pc}
   1cb24:	bl	20fa0 <__assert_fail@plt+0xf058>
   1cb28:	ldrb	r3, [r0]
   1cb2c:	bic	r3, r3, #32
   1cb30:	cmp	r3, #85	; 0x55
   1cb34:	beq	1cbb0 <__assert_fail@plt+0xac68>
   1cb38:	cmp	r3, #71	; 0x47
   1cb3c:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb40:	ldrb	r3, [r0, #1]
   1cb44:	bic	r3, r3, #32
   1cb48:	cmp	r3, #66	; 0x42
   1cb4c:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb50:	ldrb	r3, [r0, #2]
   1cb54:	cmp	r3, #49	; 0x31
   1cb58:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb5c:	ldrb	r3, [r0, #3]
   1cb60:	cmp	r3, #56	; 0x38
   1cb64:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb68:	ldrb	r3, [r0, #4]
   1cb6c:	cmp	r3, #48	; 0x30
   1cb70:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb74:	ldrb	r3, [r0, #5]
   1cb78:	cmp	r3, #51	; 0x33
   1cb7c:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb80:	ldrb	r3, [r0, #6]
   1cb84:	cmp	r3, #48	; 0x30
   1cb88:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb8c:	ldrb	r3, [r0, #7]
   1cb90:	cmp	r3, #0
   1cb94:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cb98:	ldrb	r2, [r4]
   1cb9c:	ldr	r3, [pc, #124]	; 1cc20 <__assert_fail@plt+0xacd8>
   1cba0:	ldr	r0, [pc, #124]	; 1cc24 <__assert_fail@plt+0xacdc>
   1cba4:	cmp	r2, #96	; 0x60
   1cba8:	movne	r0, r3
   1cbac:	pop	{r4, r5, r6, pc}
   1cbb0:	ldrb	r3, [r0, #1]
   1cbb4:	bic	r3, r3, #32
   1cbb8:	cmp	r3, #84	; 0x54
   1cbbc:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cbc0:	ldrb	r3, [r0, #2]
   1cbc4:	bic	r3, r3, #32
   1cbc8:	cmp	r3, #70	; 0x46
   1cbcc:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cbd0:	ldrb	r3, [r0, #3]
   1cbd4:	cmp	r3, #45	; 0x2d
   1cbd8:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cbdc:	ldrb	r3, [r0, #4]
   1cbe0:	cmp	r3, #56	; 0x38
   1cbe4:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cbe8:	ldrb	r3, [r0, #5]
   1cbec:	cmp	r3, #0
   1cbf0:	bne	1cc0c <__assert_fail@plt+0xacc4>
   1cbf4:	ldrb	r2, [r4]
   1cbf8:	ldr	r3, [pc, #40]	; 1cc28 <__assert_fail@plt+0xace0>
   1cbfc:	ldr	r0, [pc, #40]	; 1cc2c <__assert_fail@plt+0xace4>
   1cc00:	cmp	r2, #96	; 0x60
   1cc04:	movne	r0, r3
   1cc08:	pop	{r4, r5, r6, pc}
   1cc0c:	ldr	r3, [pc, #28]	; 1cc30 <__assert_fail@plt+0xace8>
   1cc10:	ldr	r0, [pc, #28]	; 1cc34 <__assert_fail@plt+0xacec>
   1cc14:	cmp	r5, #9
   1cc18:	movne	r0, r3
   1cc1c:	pop	{r4, r5, r6, pc}
   1cc20:	andeq	r4, r2, ip, asr #4
   1cc24:	andeq	r4, r2, r8, asr r2
   1cc28:	andeq	r4, r2, r8, asr #4
   1cc2c:	andeq	r4, r2, ip, asr r2
   1cc30:	andeq	r4, r2, r0, asr r2
   1cc34:	andeq	r4, r2, r4, asr r2
   1cc38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc3c:	sub	sp, sp, #116	; 0x74
   1cc40:	str	r0, [sp, #36]	; 0x24
   1cc44:	mov	sl, r1
   1cc48:	str	r2, [sp, #52]	; 0x34
   1cc4c:	str	r3, [sp, #28]
   1cc50:	ldr	r8, [sp, #152]	; 0x98
   1cc54:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1cc58:	str	r0, [sp, #84]	; 0x54
   1cc5c:	ldr	r3, [sp, #156]	; 0x9c
   1cc60:	lsr	r3, r3, #1
   1cc64:	and	r3, r3, #1
   1cc68:	str	r3, [sp, #32]
   1cc6c:	mov	r3, #1
   1cc70:	str	r3, [sp, #40]	; 0x28
   1cc74:	mov	r3, #0
   1cc78:	str	r3, [sp, #80]	; 0x50
   1cc7c:	str	r3, [sp, #44]	; 0x2c
   1cc80:	str	r3, [sp, #48]	; 0x30
   1cc84:	str	r3, [sp, #60]	; 0x3c
   1cc88:	str	r3, [sp, #72]	; 0x48
   1cc8c:	str	r3, [sp, #76]	; 0x4c
   1cc90:	mov	r7, sl
   1cc94:	mov	sl, r8
   1cc98:	cmp	sl, #10
   1cc9c:	ldrls	pc, [pc, sl, lsl #2]
   1cca0:	b	1ce58 <__assert_fail@plt+0xaf10>
   1cca4:	andeq	ip, r1, r8, lsl #26
   1cca8:	ldrdeq	ip, [r1], -r8
   1ccac:	andeq	ip, r1, r4, lsr lr
   1ccb0:	ldrdeq	ip, [r1], -r0
   1ccb4:	andeq	ip, r1, r8, ror #27
   1ccb8:	andeq	ip, r1, r8, lsl sp
   1ccbc:	andeq	sp, r1, r4, lsl #27
   1ccc0:	andeq	ip, r1, ip, asr lr
   1ccc4:	andeq	ip, r1, r4, asr sp
   1ccc8:	andeq	ip, r1, r4, asr sp
   1cccc:	andeq	ip, r1, r4, asr sp
   1ccd0:	mov	r3, #1
   1ccd4:	str	r3, [sp, #48]	; 0x30
   1ccd8:	mov	r3, #1
   1ccdc:	str	r3, [sp, #32]
   1cce0:	str	r3, [sp, #60]	; 0x3c
   1cce4:	ldr	r3, [pc, #4068]	; 1dcd0 <__assert_fail@plt+0xbd88>
   1cce8:	str	r3, [sp, #72]	; 0x48
   1ccec:	mov	fp, #0
   1ccf0:	mov	sl, #2
   1ccf4:	mov	r6, #0
   1ccf8:	ldr	r3, [sp, #48]	; 0x30
   1ccfc:	eor	r3, r3, #1
   1cd00:	str	r3, [sp, #68]	; 0x44
   1cd04:	b	1d5ec <__assert_fail@plt+0xb6a4>
   1cd08:	mov	r3, #0
   1cd0c:	str	r3, [sp, #32]
   1cd10:	mov	fp, r3
   1cd14:	b	1ccf4 <__assert_fail@plt+0xadac>
   1cd18:	ldr	r3, [sp, #32]
   1cd1c:	cmp	r3, #0
   1cd20:	bne	1ce74 <__assert_fail@plt+0xaf2c>
   1cd24:	cmp	r7, #0
   1cd28:	beq	1ce94 <__assert_fail@plt+0xaf4c>
   1cd2c:	ldr	r3, [sp, #36]	; 0x24
   1cd30:	mov	r2, #34	; 0x22
   1cd34:	strb	r2, [r3]
   1cd38:	mov	r3, #1
   1cd3c:	str	r3, [sp, #48]	; 0x30
   1cd40:	str	r3, [sp, #60]	; 0x3c
   1cd44:	ldr	r3, [pc, #3980]	; 1dcd8 <__assert_fail@plt+0xbd90>
   1cd48:	str	r3, [sp, #72]	; 0x48
   1cd4c:	mov	fp, #1
   1cd50:	b	1ccf4 <__assert_fail@plt+0xadac>
   1cd54:	cmp	sl, #10
   1cd58:	beq	1cd7c <__assert_fail@plt+0xae34>
   1cd5c:	mov	r1, sl
   1cd60:	ldr	r0, [pc, #3948]	; 1dcd4 <__assert_fail@plt+0xbd8c>
   1cd64:	bl	1cb00 <__assert_fail@plt+0xabb8>
   1cd68:	str	r0, [sp, #164]	; 0xa4
   1cd6c:	mov	r1, sl
   1cd70:	ldr	r0, [pc, #3928]	; 1dcd0 <__assert_fail@plt+0xbd88>
   1cd74:	bl	1cb00 <__assert_fail@plt+0xabb8>
   1cd78:	str	r0, [sp, #168]	; 0xa8
   1cd7c:	ldr	r3, [sp, #32]
   1cd80:	cmp	r3, #0
   1cd84:	movne	fp, #0
   1cd88:	bne	1cdc0 <__assert_fail@plt+0xae78>
   1cd8c:	ldr	r3, [sp, #164]	; 0xa4
   1cd90:	ldrb	r3, [r3]
   1cd94:	cmp	r3, #0
   1cd98:	beq	1cde0 <__assert_fail@plt+0xae98>
   1cd9c:	ldr	r2, [sp, #164]	; 0xa4
   1cda0:	mov	fp, #0
   1cda4:	ldr	r1, [sp, #36]	; 0x24
   1cda8:	cmp	r7, fp
   1cdac:	strbhi	r3, [r1, fp]
   1cdb0:	add	fp, fp, #1
   1cdb4:	ldrb	r3, [r2, #1]!
   1cdb8:	cmp	r3, #0
   1cdbc:	bne	1cda8 <__assert_fail@plt+0xae60>
   1cdc0:	ldr	r0, [sp, #168]	; 0xa8
   1cdc4:	bl	11d50 <strlen@plt>
   1cdc8:	str	r0, [sp, #60]	; 0x3c
   1cdcc:	ldr	r3, [sp, #168]	; 0xa8
   1cdd0:	str	r3, [sp, #72]	; 0x48
   1cdd4:	mov	r3, #1
   1cdd8:	str	r3, [sp, #48]	; 0x30
   1cddc:	b	1ccf4 <__assert_fail@plt+0xadac>
   1cde0:	mov	fp, #0
   1cde4:	b	1cdc0 <__assert_fail@plt+0xae78>
   1cde8:	ldr	r3, [sp, #32]
   1cdec:	cmp	r3, #0
   1cdf0:	bne	1ceb0 <__assert_fail@plt+0xaf68>
   1cdf4:	mov	r3, #1
   1cdf8:	str	r3, [sp, #48]	; 0x30
   1cdfc:	cmp	r7, #0
   1ce00:	beq	1cecc <__assert_fail@plt+0xaf84>
   1ce04:	ldr	r3, [sp, #36]	; 0x24
   1ce08:	mov	r2, #39	; 0x27
   1ce0c:	strb	r2, [r3]
   1ce10:	mov	r3, #0
   1ce14:	str	r3, [sp, #32]
   1ce18:	mov	r3, #1
   1ce1c:	str	r3, [sp, #60]	; 0x3c
   1ce20:	ldr	r3, [pc, #3752]	; 1dcd0 <__assert_fail@plt+0xbd88>
   1ce24:	str	r3, [sp, #72]	; 0x48
   1ce28:	mov	fp, #1
   1ce2c:	mov	sl, #2
   1ce30:	b	1ccf4 <__assert_fail@plt+0xadac>
   1ce34:	ldr	r3, [sp, #32]
   1ce38:	cmp	r3, #0
   1ce3c:	beq	1cdfc <__assert_fail@plt+0xaeb4>
   1ce40:	mov	r3, #1
   1ce44:	str	r3, [sp, #60]	; 0x3c
   1ce48:	ldr	r3, [pc, #3712]	; 1dcd0 <__assert_fail@plt+0xbd88>
   1ce4c:	str	r3, [sp, #72]	; 0x48
   1ce50:	mov	fp, #0
   1ce54:	b	1ccf4 <__assert_fail@plt+0xadac>
   1ce58:	bl	11f24 <abort@plt>
   1ce5c:	mov	r3, #0
   1ce60:	str	r3, [sp, #32]
   1ce64:	mov	r3, #1
   1ce68:	str	r3, [sp, #48]	; 0x30
   1ce6c:	mov	fp, #0
   1ce70:	b	1ccf4 <__assert_fail@plt+0xadac>
   1ce74:	ldr	r3, [sp, #32]
   1ce78:	str	r3, [sp, #48]	; 0x30
   1ce7c:	mov	r3, #1
   1ce80:	str	r3, [sp, #60]	; 0x3c
   1ce84:	ldr	r3, [pc, #3660]	; 1dcd8 <__assert_fail@plt+0xbd90>
   1ce88:	str	r3, [sp, #72]	; 0x48
   1ce8c:	mov	fp, #0
   1ce90:	b	1ccf4 <__assert_fail@plt+0xadac>
   1ce94:	mov	r3, #1
   1ce98:	str	r3, [sp, #48]	; 0x30
   1ce9c:	str	r3, [sp, #60]	; 0x3c
   1cea0:	ldr	r3, [pc, #3632]	; 1dcd8 <__assert_fail@plt+0xbd90>
   1cea4:	str	r3, [sp, #72]	; 0x48
   1cea8:	mov	fp, #1
   1ceac:	b	1ccf4 <__assert_fail@plt+0xadac>
   1ceb0:	mov	r3, #1
   1ceb4:	str	r3, [sp, #60]	; 0x3c
   1ceb8:	ldr	r3, [pc, #3600]	; 1dcd0 <__assert_fail@plt+0xbd88>
   1cebc:	str	r3, [sp, #72]	; 0x48
   1cec0:	mov	fp, #0
   1cec4:	mov	sl, #2
   1cec8:	b	1ccf4 <__assert_fail@plt+0xadac>
   1cecc:	mov	r3, #0
   1ced0:	str	r3, [sp, #32]
   1ced4:	mov	r3, #1
   1ced8:	str	r3, [sp, #60]	; 0x3c
   1cedc:	ldr	r3, [pc, #3564]	; 1dcd0 <__assert_fail@plt+0xbd88>
   1cee0:	str	r3, [sp, #72]	; 0x48
   1cee4:	mov	fp, #1
   1cee8:	mov	sl, #2
   1ceec:	b	1ccf4 <__assert_fail@plt+0xadac>
   1cef0:	mov	r3, #0
   1cef4:	str	r3, [sp, #56]	; 0x38
   1cef8:	ldr	r3, [sp, #52]	; 0x34
   1cefc:	add	r2, r3, r6
   1cf00:	str	r2, [sp, #64]	; 0x40
   1cf04:	ldrb	r4, [r3, r6]
   1cf08:	cmp	r4, #126	; 0x7e
   1cf0c:	ldrls	pc, [pc, r4, lsl #2]
   1cf10:	b	1d74c <__assert_fail@plt+0xb804>
   1cf14:	andeq	sp, r1, ip, lsr #2
   1cf18:	andeq	sp, r1, ip, asr #14
   1cf1c:	andeq	sp, r1, ip, asr #14
   1cf20:	andeq	sp, r1, ip, asr #14
   1cf24:	andeq	sp, r1, ip, asr #14
   1cf28:	andeq	sp, r1, ip, asr #14
   1cf2c:	andeq	sp, r1, ip, asr #14
   1cf30:	andeq	sp, r1, r8, lsl #9
   1cf34:	andeq	sp, r1, r4, lsr #2
   1cf38:	andeq	sp, r1, r0, asr #8
   1cf3c:	andeq	sp, r1, r8, lsr r4
   1cf40:	andeq	sp, r1, r8, lsr #7
   1cf44:	andeq	sp, r1, r0, lsr #7
   1cf48:	andeq	sp, r1, ip, lsl r1
   1cf4c:	andeq	sp, r1, ip, asr #14
   1cf50:	andeq	sp, r1, ip, asr #14
   1cf54:	andeq	sp, r1, ip, asr #14
   1cf58:	andeq	sp, r1, ip, asr #14
   1cf5c:	andeq	sp, r1, ip, asr #14
   1cf60:	andeq	sp, r1, ip, asr #14
   1cf64:	andeq	sp, r1, ip, asr #14
   1cf68:	andeq	sp, r1, ip, asr #14
   1cf6c:	andeq	sp, r1, ip, asr #14
   1cf70:	andeq	sp, r1, ip, asr #14
   1cf74:	andeq	sp, r1, ip, asr #14
   1cf78:	andeq	sp, r1, ip, asr #14
   1cf7c:	andeq	sp, r1, ip, asr #14
   1cf80:	andeq	sp, r1, ip, asr #14
   1cf84:	andeq	sp, r1, ip, asr #14
   1cf88:	andeq	sp, r1, ip, asr #14
   1cf8c:	andeq	sp, r1, ip, asr #14
   1cf90:	andeq	sp, r1, ip, asr #14
   1cf94:	ldrdeq	sp, [r1], -ip
   1cf98:	ldrdeq	sp, [r1], -r8
   1cf9c:	ldrdeq	sp, [r1], -r8
   1cfa0:			; <UNDEFINED> instruction: 0x0001d4b0
   1cfa4:	ldrdeq	sp, [r1], -r8
   1cfa8:	andeq	sp, r1, r0, lsr #22
   1cfac:	ldrdeq	sp, [r1], -r8
   1cfb0:			; <UNDEFINED> instruction: 0x0001d6b0
   1cfb4:	ldrdeq	sp, [r1], -r8
   1cfb8:	ldrdeq	sp, [r1], -r8
   1cfbc:	ldrdeq	sp, [r1], -r8
   1cfc0:	andeq	sp, r1, r0, lsr #22
   1cfc4:	andeq	sp, r1, r0, lsr #22
   1cfc8:	andeq	sp, r1, r0, lsr #22
   1cfcc:	andeq	sp, r1, r0, lsr #22
   1cfd0:	andeq	sp, r1, r0, lsr #22
   1cfd4:	andeq	sp, r1, r0, lsr #22
   1cfd8:	andeq	sp, r1, r0, lsr #22
   1cfdc:	andeq	sp, r1, r0, lsr #22
   1cfe0:	andeq	sp, r1, r0, lsr #22
   1cfe4:	andeq	sp, r1, r0, lsr #22
   1cfe8:	andeq	sp, r1, r0, lsr #22
   1cfec:	andeq	sp, r1, r0, lsr #22
   1cff0:	andeq	sp, r1, r0, lsr #22
   1cff4:	andeq	sp, r1, r0, lsr #22
   1cff8:	andeq	sp, r1, r0, lsr #22
   1cffc:	andeq	sp, r1, r0, lsr #22
   1d000:	ldrdeq	sp, [r1], -r8
   1d004:	ldrdeq	sp, [r1], -r8
   1d008:	ldrdeq	sp, [r1], -r8
   1d00c:	ldrdeq	sp, [r1], -r8
   1d010:	andeq	sp, r1, r4, lsr r2
   1d014:	andeq	sp, r1, ip, asr #14
   1d018:	andeq	sp, r1, r0, lsr #22
   1d01c:	andeq	sp, r1, r0, lsr #22
   1d020:	andeq	sp, r1, r0, lsr #22
   1d024:	andeq	sp, r1, r0, lsr #22
   1d028:	andeq	sp, r1, r0, lsr #22
   1d02c:	andeq	sp, r1, r0, lsr #22
   1d030:	andeq	sp, r1, r0, lsr #22
   1d034:	andeq	sp, r1, r0, lsr #22
   1d038:	andeq	sp, r1, r0, lsr #22
   1d03c:	andeq	sp, r1, r0, lsr #22
   1d040:	andeq	sp, r1, r0, lsr #22
   1d044:	andeq	sp, r1, r0, lsr #22
   1d048:	andeq	sp, r1, r0, lsr #22
   1d04c:	andeq	sp, r1, r0, lsr #22
   1d050:	andeq	sp, r1, r0, lsr #22
   1d054:	andeq	sp, r1, r0, lsr #22
   1d058:	andeq	sp, r1, r0, lsr #22
   1d05c:	andeq	sp, r1, r0, lsr #22
   1d060:	andeq	sp, r1, r0, lsr #22
   1d064:	andeq	sp, r1, r0, lsr #22
   1d068:	andeq	sp, r1, r0, lsr #22
   1d06c:	andeq	sp, r1, r0, lsr #22
   1d070:	andeq	sp, r1, r0, lsr #22
   1d074:	andeq	sp, r1, r0, lsr #22
   1d078:	andeq	sp, r1, r0, lsr #22
   1d07c:	andeq	sp, r1, r0, lsr #22
   1d080:	ldrdeq	sp, [r1], -r8
   1d084:			; <UNDEFINED> instruction: 0x0001d3b0
   1d088:	andeq	sp, r1, r0, lsr #22
   1d08c:	ldrdeq	sp, [r1], -r8
   1d090:	andeq	sp, r1, r0, lsr #22
   1d094:	ldrdeq	sp, [r1], -r8
   1d098:	andeq	sp, r1, r0, lsr #22
   1d09c:	andeq	sp, r1, r0, lsr #22
   1d0a0:	andeq	sp, r1, r0, lsr #22
   1d0a4:	andeq	sp, r1, r0, lsr #22
   1d0a8:	andeq	sp, r1, r0, lsr #22
   1d0ac:	andeq	sp, r1, r0, lsr #22
   1d0b0:	andeq	sp, r1, r0, lsr #22
   1d0b4:	andeq	sp, r1, r0, lsr #22
   1d0b8:	andeq	sp, r1, r0, lsr #22
   1d0bc:	andeq	sp, r1, r0, lsr #22
   1d0c0:	andeq	sp, r1, r0, lsr #22
   1d0c4:	andeq	sp, r1, r0, lsr #22
   1d0c8:	andeq	sp, r1, r0, lsr #22
   1d0cc:	andeq	sp, r1, r0, lsr #22
   1d0d0:	andeq	sp, r1, r0, lsr #22
   1d0d4:	andeq	sp, r1, r0, lsr #22
   1d0d8:	andeq	sp, r1, r0, lsr #22
   1d0dc:	andeq	sp, r1, r0, lsr #22
   1d0e0:	andeq	sp, r1, r0, lsr #22
   1d0e4:	andeq	sp, r1, r0, lsr #22
   1d0e8:	andeq	sp, r1, r0, lsr #22
   1d0ec:	andeq	sp, r1, r0, lsr #22
   1d0f0:	andeq	sp, r1, r0, lsr #22
   1d0f4:	andeq	sp, r1, r0, lsr #22
   1d0f8:	andeq	sp, r1, r0, lsr #22
   1d0fc:	andeq	sp, r1, r0, lsr #22
   1d100:	muleq	r1, r0, r4
   1d104:	ldrdeq	sp, [r1], -r8
   1d108:	muleq	r1, r0, r4
   1d10c:			; <UNDEFINED> instruction: 0x0001d4b0
   1d110:	mov	r3, #0
   1d114:	str	r3, [sp, #56]	; 0x38
   1d118:	b	1cef8 <__assert_fail@plt+0xafb0>
   1d11c:	mov	r3, #114	; 0x72
   1d120:	b	1d444 <__assert_fail@plt+0xb4fc>
   1d124:	mov	r3, #98	; 0x62
   1d128:	b	1d45c <__assert_fail@plt+0xb514>
   1d12c:	ldr	r3, [sp, #48]	; 0x30
   1d130:	cmp	r3, #0
   1d134:	beq	1d21c <__assert_fail@plt+0xb2d4>
   1d138:	ldr	r3, [sp, #32]
   1d13c:	cmp	r3, #0
   1d140:	bne	1dca4 <__assert_fail@plt+0xbd5c>
   1d144:	ldr	r3, [sp, #44]	; 0x2c
   1d148:	eor	r3, r3, #1
   1d14c:	cmp	sl, #2
   1d150:	movne	r3, #0
   1d154:	andeq	r3, r3, #1
   1d158:	cmp	r3, #0
   1d15c:	moveq	r2, fp
   1d160:	beq	1d1a4 <__assert_fail@plt+0xb25c>
   1d164:	cmp	r7, fp
   1d168:	ldrhi	r2, [sp, #36]	; 0x24
   1d16c:	movhi	r1, #39	; 0x27
   1d170:	strbhi	r1, [r2, fp]
   1d174:	add	r2, fp, #1
   1d178:	cmp	r7, r2
   1d17c:	ldrhi	r1, [sp, #36]	; 0x24
   1d180:	movhi	r0, #36	; 0x24
   1d184:	strbhi	r0, [r1, r2]
   1d188:	add	r2, fp, #2
   1d18c:	cmp	r7, r2
   1d190:	ldrhi	r1, [sp, #36]	; 0x24
   1d194:	movhi	r0, #39	; 0x27
   1d198:	strbhi	r0, [r1, r2]
   1d19c:	add	r2, fp, #3
   1d1a0:	str	r3, [sp, #44]	; 0x2c
   1d1a4:	cmp	r7, r2
   1d1a8:	ldrhi	r3, [sp, #36]	; 0x24
   1d1ac:	movhi	r1, #92	; 0x5c
   1d1b0:	strbhi	r1, [r3, r2]
   1d1b4:	add	fp, r2, #1
   1d1b8:	cmp	r5, #0
   1d1bc:	beq	1db28 <__assert_fail@plt+0xbbe0>
   1d1c0:	add	r3, r6, #1
   1d1c4:	ldr	r1, [sp, #28]
   1d1c8:	cmp	r1, r3
   1d1cc:	bls	1db38 <__assert_fail@plt+0xbbf0>
   1d1d0:	ldr	r1, [sp, #52]	; 0x34
   1d1d4:	ldrb	r3, [r1, r3]
   1d1d8:	sub	r3, r3, #48	; 0x30
   1d1dc:	uxtb	r3, r3
   1d1e0:	cmp	r3, #9
   1d1e4:	bhi	1db44 <__assert_fail@plt+0xbbfc>
   1d1e8:	cmp	r7, fp
   1d1ec:	movhi	r3, #48	; 0x30
   1d1f0:	ldrhi	r1, [sp, #36]	; 0x24
   1d1f4:	strbhi	r3, [r1, fp]
   1d1f8:	add	r3, r2, #2
   1d1fc:	cmp	r7, r3
   1d200:	movhi	r1, #48	; 0x30
   1d204:	ldrhi	r0, [sp, #36]	; 0x24
   1d208:	strbhi	r1, [r0, r3]
   1d20c:	add	fp, r2, #3
   1d210:	ldr	r8, [sp, #32]
   1d214:	mov	r4, #48	; 0x30
   1d218:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1d21c:	ldr	r3, [sp, #156]	; 0x9c
   1d220:	tst	r3, #1
   1d224:	bne	1d5e8 <__assert_fail@plt+0xb6a0>
   1d228:	ldr	r5, [sp, #48]	; 0x30
   1d22c:	mov	r8, r5
   1d230:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1d234:	cmp	sl, #2
   1d238:	beq	1d250 <__assert_fail@plt+0xb308>
   1d23c:	cmp	sl, #5
   1d240:	beq	1d268 <__assert_fail@plt+0xb320>
   1d244:	mov	r8, #0
   1d248:	mov	r5, r8
   1d24c:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1d250:	ldr	r3, [sp, #32]
   1d254:	cmp	r3, #0
   1d258:	bne	1dcb8 <__assert_fail@plt+0xbd70>
   1d25c:	mov	r8, r3
   1d260:	mov	r5, r3
   1d264:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1d268:	ldr	r3, [sp, #156]	; 0x9c
   1d26c:	tst	r3, #4
   1d270:	beq	1db50 <__assert_fail@plt+0xbc08>
   1d274:	add	r3, r6, #2
   1d278:	ldr	r2, [sp, #28]
   1d27c:	cmp	r2, r3
   1d280:	bls	1db5c <__assert_fail@plt+0xbc14>
   1d284:	ldr	r2, [sp, #52]	; 0x34
   1d288:	add	r2, r2, r6
   1d28c:	ldrb	r2, [r2, #1]
   1d290:	cmp	r2, #63	; 0x3f
   1d294:	movne	r8, #0
   1d298:	movne	r5, r8
   1d29c:	bne	1d4f4 <__assert_fail@plt+0xb5ac>
   1d2a0:	ldr	r2, [sp, #52]	; 0x34
   1d2a4:	ldrb	r2, [r2, r3]
   1d2a8:	sub	r1, r2, #33	; 0x21
   1d2ac:	cmp	r1, #29
   1d2b0:	ldrls	pc, [pc, r1, lsl #2]
   1d2b4:	b	1db68 <__assert_fail@plt+0xbc20>
   1d2b8:	andeq	sp, r1, r0, lsr r3
   1d2bc:	andeq	sp, r1, r8, ror #22
   1d2c0:	andeq	sp, r1, r8, ror #22
   1d2c4:	andeq	sp, r1, r8, ror #22
   1d2c8:	andeq	sp, r1, r8, ror #22
   1d2cc:	andeq	sp, r1, r8, ror #22
   1d2d0:	andeq	sp, r1, r0, lsr r3
   1d2d4:	andeq	sp, r1, r0, lsr r3
   1d2d8:	andeq	sp, r1, r0, lsr r3
   1d2dc:	andeq	sp, r1, r8, ror #22
   1d2e0:	andeq	sp, r1, r8, ror #22
   1d2e4:	andeq	sp, r1, r8, ror #22
   1d2e8:	andeq	sp, r1, r0, lsr r3
   1d2ec:	andeq	sp, r1, r8, ror #22
   1d2f0:	andeq	sp, r1, r0, lsr r3
   1d2f4:	andeq	sp, r1, r8, ror #22
   1d2f8:	andeq	sp, r1, r8, ror #22
   1d2fc:	andeq	sp, r1, r8, ror #22
   1d300:	andeq	sp, r1, r8, ror #22
   1d304:	andeq	sp, r1, r8, ror #22
   1d308:	andeq	sp, r1, r8, ror #22
   1d30c:	andeq	sp, r1, r8, ror #22
   1d310:	andeq	sp, r1, r8, ror #22
   1d314:	andeq	sp, r1, r8, ror #22
   1d318:	andeq	sp, r1, r8, ror #22
   1d31c:	andeq	sp, r1, r8, ror #22
   1d320:	andeq	sp, r1, r8, ror #22
   1d324:	andeq	sp, r1, r0, lsr r3
   1d328:	andeq	sp, r1, r0, lsr r3
   1d32c:	andeq	sp, r1, r0, lsr r3
   1d330:	ldr	r1, [sp, #32]
   1d334:	cmp	r1, #0
   1d338:	bne	1dd78 <__assert_fail@plt+0xbe30>
   1d33c:	cmp	r7, fp
   1d340:	movhi	r1, #63	; 0x3f
   1d344:	ldrhi	r0, [sp, #36]	; 0x24
   1d348:	strbhi	r1, [r0, fp]
   1d34c:	add	r1, fp, #1
   1d350:	cmp	r7, r1
   1d354:	ldrhi	r0, [sp, #36]	; 0x24
   1d358:	movhi	ip, #34	; 0x22
   1d35c:	strbhi	ip, [r0, r1]
   1d360:	add	r1, fp, #2
   1d364:	cmp	r7, r1
   1d368:	ldrhi	r0, [sp, #36]	; 0x24
   1d36c:	movhi	ip, #34	; 0x22
   1d370:	strbhi	ip, [r0, r1]
   1d374:	add	r1, fp, #3
   1d378:	cmp	r7, r1
   1d37c:	movhi	r0, #63	; 0x3f
   1d380:	ldrhi	ip, [sp, #36]	; 0x24
   1d384:	strbhi	r0, [ip, r1]
   1d388:	add	fp, fp, #4
   1d38c:	ldr	r5, [sp, #32]
   1d390:	mov	r8, r5
   1d394:	mov	r4, r2
   1d398:	mov	r6, r3
   1d39c:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1d3a0:	mov	r3, #102	; 0x66
   1d3a4:	b	1d45c <__assert_fail@plt+0xb514>
   1d3a8:	mov	r3, #118	; 0x76
   1d3ac:	b	1d45c <__assert_fail@plt+0xb514>
   1d3b0:	cmp	sl, #2
   1d3b4:	beq	1d420 <__assert_fail@plt+0xb4d8>
   1d3b8:	ldr	r3, [sp, #48]	; 0x30
   1d3bc:	ldr	r2, [sp, #32]
   1d3c0:	and	r3, r3, r2
   1d3c4:	tst	r9, r3
   1d3c8:	moveq	r3, r4
   1d3cc:	beq	1d45c <__assert_fail@plt+0xb514>
   1d3d0:	mov	r8, #0
   1d3d4:	mov	r5, r8
   1d3d8:	eor	r5, r5, #1
   1d3dc:	ldr	r3, [sp, #44]	; 0x2c
   1d3e0:	and	r5, r5, r3
   1d3e4:	tst	r5, #255	; 0xff
   1d3e8:	beq	1d5c8 <__assert_fail@plt+0xb680>
   1d3ec:	cmp	r7, fp
   1d3f0:	ldrhi	r3, [sp, #36]	; 0x24
   1d3f4:	movhi	r2, #39	; 0x27
   1d3f8:	strbhi	r2, [r3, fp]
   1d3fc:	add	r3, fp, #1
   1d400:	cmp	r7, r3
   1d404:	ldrhi	r2, [sp, #36]	; 0x24
   1d408:	movhi	r1, #39	; 0x27
   1d40c:	strbhi	r1, [r2, r3]
   1d410:	add	fp, fp, #2
   1d414:	mov	r3, #0
   1d418:	str	r3, [sp, #44]	; 0x2c
   1d41c:	b	1d5c8 <__assert_fail@plt+0xb680>
   1d420:	ldr	r3, [sp, #32]
   1d424:	cmp	r3, #0
   1d428:	bne	1dcc4 <__assert_fail@plt+0xbd7c>
   1d42c:	mov	r8, r3
   1d430:	mov	r5, r3
   1d434:	b	1d3d8 <__assert_fail@plt+0xb490>
   1d438:	mov	r3, #110	; 0x6e
   1d43c:	b	1d444 <__assert_fail@plt+0xb4fc>
   1d440:	mov	r3, #116	; 0x74
   1d444:	ldr	r2, [sp, #32]
   1d448:	cmp	sl, #2
   1d44c:	movne	r2, #0
   1d450:	andeq	r2, r2, #1
   1d454:	cmp	r2, #0
   1d458:	bne	1d47c <__assert_fail@plt+0xb534>
   1d45c:	ldr	r2, [sp, #48]	; 0x30
   1d460:	cmp	r2, #0
   1d464:	moveq	r8, r2
   1d468:	moveq	r5, r2
   1d46c:	beq	1d4f4 <__assert_fail@plt+0xb5ac>
   1d470:	mov	r4, r3
   1d474:	mov	r8, #0
   1d478:	b	1d54c <__assert_fail@plt+0xb604>
   1d47c:	mov	r8, sl
   1d480:	mov	sl, r7
   1d484:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1d488:	mov	r3, #97	; 0x61
   1d48c:	b	1d45c <__assert_fail@plt+0xb514>
   1d490:	ldr	r3, [sp, #28]
   1d494:	cmn	r3, #1
   1d498:	beq	1d4c4 <__assert_fail@plt+0xb57c>
   1d49c:	ldr	r3, [sp, #28]
   1d4a0:	subs	r3, r3, #1
   1d4a4:	movne	r3, #1
   1d4a8:	cmp	r3, #0
   1d4ac:	bne	1db74 <__assert_fail@plt+0xbc2c>
   1d4b0:	cmp	r6, #0
   1d4b4:	beq	1d4dc <__assert_fail@plt+0xb594>
   1d4b8:	mov	r8, #0
   1d4bc:	mov	r5, r8
   1d4c0:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1d4c4:	ldr	r3, [sp, #52]	; 0x34
   1d4c8:	ldrb	r3, [r3, #1]
   1d4cc:	adds	r3, r3, #0
   1d4d0:	movne	r3, #1
   1d4d4:	b	1d4a8 <__assert_fail@plt+0xb560>
   1d4d8:	mov	r8, #0
   1d4dc:	ldr	r5, [sp, #32]
   1d4e0:	cmp	sl, #2
   1d4e4:	movne	r5, #0
   1d4e8:	andeq	r5, r5, #1
   1d4ec:	cmp	r5, #0
   1d4f0:	bne	1d6a4 <__assert_fail@plt+0xb75c>
   1d4f4:	ldr	r3, [sp, #68]	; 0x44
   1d4f8:	cmp	sl, #2
   1d4fc:	orreq	r3, r3, #1
   1d500:	eor	r3, r3, #1
   1d504:	ldr	r2, [sp, #32]
   1d508:	orr	r3, r2, r3
   1d50c:	tst	r3, #255	; 0xff
   1d510:	beq	1d540 <__assert_fail@plt+0xb5f8>
   1d514:	ldr	r3, [sp, #160]	; 0xa0
   1d518:	cmp	r3, #0
   1d51c:	beq	1d540 <__assert_fail@plt+0xb5f8>
   1d520:	lsr	r2, r4, #5
   1d524:	uxtb	r2, r2
   1d528:	and	r3, r4, #31
   1d52c:	ldr	r1, [sp, #160]	; 0xa0
   1d530:	ldr	r2, [r1, r2, lsl #2]
   1d534:	lsr	r3, r2, r3
   1d538:	tst	r3, #1
   1d53c:	bne	1d54c <__assert_fail@plt+0xb604>
   1d540:	ldr	r3, [sp, #56]	; 0x38
   1d544:	cmp	r3, #0
   1d548:	beq	1d3d8 <__assert_fail@plt+0xb490>
   1d54c:	ldr	r3, [sp, #32]
   1d550:	cmp	r3, #0
   1d554:	bne	1dd60 <__assert_fail@plt+0xbe18>
   1d558:	ldr	r3, [sp, #44]	; 0x2c
   1d55c:	eor	r3, r3, #1
   1d560:	cmp	sl, #2
   1d564:	movne	r3, #0
   1d568:	andeq	r3, r3, #1
   1d56c:	cmp	r3, #0
   1d570:	beq	1d5b4 <__assert_fail@plt+0xb66c>
   1d574:	cmp	r7, fp
   1d578:	ldrhi	r2, [sp, #36]	; 0x24
   1d57c:	movhi	r1, #39	; 0x27
   1d580:	strbhi	r1, [r2, fp]
   1d584:	add	r2, fp, #1
   1d588:	cmp	r7, r2
   1d58c:	ldrhi	r1, [sp, #36]	; 0x24
   1d590:	movhi	r0, #36	; 0x24
   1d594:	strbhi	r0, [r1, r2]
   1d598:	add	r2, fp, #2
   1d59c:	cmp	r7, r2
   1d5a0:	ldrhi	r1, [sp, #36]	; 0x24
   1d5a4:	movhi	r0, #39	; 0x27
   1d5a8:	strbhi	r0, [r1, r2]
   1d5ac:	add	fp, fp, #3
   1d5b0:	str	r3, [sp, #44]	; 0x2c
   1d5b4:	cmp	r7, fp
   1d5b8:	ldrhi	r3, [sp, #36]	; 0x24
   1d5bc:	movhi	r2, #92	; 0x5c
   1d5c0:	strbhi	r2, [r3, fp]
   1d5c4:	add	fp, fp, #1
   1d5c8:	cmp	fp, r7
   1d5cc:	ldrcc	r3, [sp, #36]	; 0x24
   1d5d0:	strbcc	r4, [r3, fp]
   1d5d4:	add	fp, fp, #1
   1d5d8:	ldr	r3, [sp, #40]	; 0x28
   1d5dc:	cmp	r8, #0
   1d5e0:	moveq	r3, #0
   1d5e4:	str	r3, [sp, #40]	; 0x28
   1d5e8:	add	r6, r6, #1
   1d5ec:	ldr	r3, [sp, #28]
   1d5f0:	cmn	r3, #1
   1d5f4:	beq	1db80 <__assert_fail@plt+0xbc38>
   1d5f8:	ldr	r3, [sp, #28]
   1d5fc:	subs	r8, r3, r6
   1d600:	movne	r8, #1
   1d604:	cmp	r8, #0
   1d608:	beq	1db94 <__assert_fail@plt+0xbc4c>
   1d60c:	ldr	r5, [sp, #48]	; 0x30
   1d610:	cmp	sl, #2
   1d614:	moveq	r5, #0
   1d618:	andne	r5, r5, #1
   1d61c:	ldr	r3, [sp, #60]	; 0x3c
   1d620:	adds	r9, r3, #0
   1d624:	movne	r9, #1
   1d628:	ands	r2, r5, r9
   1d62c:	str	r2, [sp, #56]	; 0x38
   1d630:	beq	1cef8 <__assert_fail@plt+0xafb0>
   1d634:	add	r4, r6, r3
   1d638:	ldr	r2, [sp, #28]
   1d63c:	cmp	r3, #1
   1d640:	movls	r3, #0
   1d644:	movhi	r3, #1
   1d648:	cmn	r2, #1
   1d64c:	movne	r3, #0
   1d650:	cmp	r3, #0
   1d654:	beq	1d664 <__assert_fail@plt+0xb71c>
   1d658:	ldr	r0, [sp, #52]	; 0x34
   1d65c:	bl	11d50 <strlen@plt>
   1d660:	str	r0, [sp, #28]
   1d664:	ldr	r3, [sp, #28]
   1d668:	cmp	r3, r4
   1d66c:	bcc	1cef0 <__assert_fail@plt+0xafa8>
   1d670:	ldr	r2, [sp, #60]	; 0x3c
   1d674:	ldr	r1, [sp, #72]	; 0x48
   1d678:	ldr	r3, [sp, #52]	; 0x34
   1d67c:	add	r0, r3, r6
   1d680:	bl	11b40 <memcmp@plt>
   1d684:	cmp	r0, #0
   1d688:	bne	1d110 <__assert_fail@plt+0xb1c8>
   1d68c:	ldr	r3, [sp, #32]
   1d690:	cmp	r3, #0
   1d694:	beq	1cef8 <__assert_fail@plt+0xafb0>
   1d698:	mov	r8, sl
   1d69c:	mov	sl, r7
   1d6a0:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1d6a4:	mov	r8, sl
   1d6a8:	mov	sl, r7
   1d6ac:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1d6b0:	cmp	sl, #2
   1d6b4:	strne	r8, [sp, #80]	; 0x50
   1d6b8:	movne	r5, #0
   1d6bc:	bne	1d4f4 <__assert_fail@plt+0xb5ac>
   1d6c0:	ldr	r3, [sp, #32]
   1d6c4:	cmp	r3, #0
   1d6c8:	bne	1dcdc <__assert_fail@plt+0xbd94>
   1d6cc:	ldr	r2, [sp, #76]	; 0x4c
   1d6d0:	adds	r3, r7, #0
   1d6d4:	movne	r3, #1
   1d6d8:	cmp	r2, #0
   1d6dc:	movne	r3, #0
   1d6e0:	cmp	r3, #0
   1d6e4:	movne	r3, #0
   1d6e8:	bne	1d718 <__assert_fail@plt+0xb7d0>
   1d6ec:	cmp	r7, fp
   1d6f0:	ldrhi	r3, [sp, #36]	; 0x24
   1d6f4:	movhi	r2, #39	; 0x27
   1d6f8:	strbhi	r2, [r3, fp]
   1d6fc:	add	r3, fp, #1
   1d700:	cmp	r7, r3
   1d704:	ldrhi	r2, [sp, #36]	; 0x24
   1d708:	movhi	r1, #92	; 0x5c
   1d70c:	strbhi	r1, [r2, r3]
   1d710:	mov	r3, r7
   1d714:	ldr	r7, [sp, #76]	; 0x4c
   1d718:	add	r2, fp, #2
   1d71c:	cmp	r2, r3
   1d720:	ldrcc	r1, [sp, #36]	; 0x24
   1d724:	movcc	r0, #39	; 0x27
   1d728:	strbcc	r0, [r1, r2]
   1d72c:	add	fp, fp, #3
   1d730:	ldr	r2, [sp, #32]
   1d734:	mov	r5, r2
   1d738:	str	r8, [sp, #80]	; 0x50
   1d73c:	str	r2, [sp, #44]	; 0x2c
   1d740:	str	r7, [sp, #76]	; 0x4c
   1d744:	mov	r7, r3
   1d748:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1d74c:	ldr	r5, [sp, #84]	; 0x54
   1d750:	cmp	r5, #1
   1d754:	beq	1d784 <__assert_fail@plt+0xb83c>
   1d758:	mov	r3, #0
   1d75c:	str	r3, [sp, #104]	; 0x68
   1d760:	str	r3, [sp, #108]	; 0x6c
   1d764:	ldr	r3, [sp, #28]
   1d768:	cmn	r3, #1
   1d76c:	beq	1d7b8 <__assert_fail@plt+0xb870>
   1d770:	mov	r3, #0
   1d774:	str	r4, [sp, #88]	; 0x58
   1d778:	str	fp, [sp, #92]	; 0x5c
   1d77c:	mov	fp, r3
   1d780:	b	1d8e0 <__assert_fail@plt+0xb998>
   1d784:	bl	11d2c <__ctype_b_loc@plt>
   1d788:	ldr	r2, [r0]
   1d78c:	lsl	r3, r4, #1
   1d790:	ldrh	r8, [r2, r3]
   1d794:	lsr	r8, r8, #14
   1d798:	and	r8, r8, #1
   1d79c:	mov	r2, r5
   1d7a0:	eor	r5, r8, #1
   1d7a4:	ldr	r3, [sp, #48]	; 0x30
   1d7a8:	and	r5, r5, r3
   1d7ac:	ands	r5, r5, #255	; 0xff
   1d7b0:	beq	1d4f4 <__assert_fail@plt+0xb5ac>
   1d7b4:	b	1d978 <__assert_fail@plt+0xba30>
   1d7b8:	ldr	r0, [sp, #52]	; 0x34
   1d7bc:	bl	11d50 <strlen@plt>
   1d7c0:	str	r0, [sp, #28]
   1d7c4:	b	1d770 <__assert_fail@plt+0xb828>
   1d7c8:	mov	r2, fp
   1d7cc:	mov	r1, r4
   1d7d0:	ldr	r4, [sp, #88]	; 0x58
   1d7d4:	ldr	fp, [sp, #92]	; 0x5c
   1d7d8:	ldr	r0, [sp, #28]
   1d7dc:	cmp	r0, r5
   1d7e0:	bls	1d9ac <__assert_fail@plt+0xba64>
   1d7e4:	ldrb	r3, [r1]
   1d7e8:	cmp	r3, #0
   1d7ec:	beq	1d9b4 <__assert_fail@plt+0xba6c>
   1d7f0:	mov	r3, r1
   1d7f4:	add	r2, r2, #1
   1d7f8:	add	r1, r6, r2
   1d7fc:	cmp	r0, r1
   1d800:	bls	1d9bc <__assert_fail@plt+0xba74>
   1d804:	ldrb	r1, [r3, #1]!
   1d808:	cmp	r1, #0
   1d80c:	bne	1d7f4 <__assert_fail@plt+0xb8ac>
   1d810:	mov	r8, #0
   1d814:	b	1d970 <__assert_fail@plt+0xba28>
   1d818:	cmp	r4, r5
   1d81c:	beq	1d8bc <__assert_fail@plt+0xb974>
   1d820:	ldrb	r3, [r4, #1]!
   1d824:	sub	r3, r3, #91	; 0x5b
   1d828:	cmp	r3, #33	; 0x21
   1d82c:	ldrls	pc, [pc, r3, lsl #2]
   1d830:	b	1d818 <__assert_fail@plt+0xb8d0>
   1d834:	andeq	sp, r1, r8, ror #25
   1d838:	andeq	sp, r1, r8, ror #25
   1d83c:	andeq	sp, r1, r8, lsl r8
   1d840:	andeq	sp, r1, r8, ror #25
   1d844:	andeq	sp, r1, r8, lsl r8
   1d848:	andeq	sp, r1, r8, ror #25
   1d84c:	andeq	sp, r1, r8, lsl r8
   1d850:	andeq	sp, r1, r8, lsl r8
   1d854:	andeq	sp, r1, r8, lsl r8
   1d858:	andeq	sp, r1, r8, lsl r8
   1d85c:	andeq	sp, r1, r8, lsl r8
   1d860:	andeq	sp, r1, r8, lsl r8
   1d864:	andeq	sp, r1, r8, lsl r8
   1d868:	andeq	sp, r1, r8, lsl r8
   1d86c:	andeq	sp, r1, r8, lsl r8
   1d870:	andeq	sp, r1, r8, lsl r8
   1d874:	andeq	sp, r1, r8, lsl r8
   1d878:	andeq	sp, r1, r8, lsl r8
   1d87c:	andeq	sp, r1, r8, lsl r8
   1d880:	andeq	sp, r1, r8, lsl r8
   1d884:	andeq	sp, r1, r8, lsl r8
   1d888:	andeq	sp, r1, r8, lsl r8
   1d88c:	andeq	sp, r1, r8, lsl r8
   1d890:	andeq	sp, r1, r8, lsl r8
   1d894:	andeq	sp, r1, r8, lsl r8
   1d898:	andeq	sp, r1, r8, lsl r8
   1d89c:	andeq	sp, r1, r8, lsl r8
   1d8a0:	andeq	sp, r1, r8, lsl r8
   1d8a4:	andeq	sp, r1, r8, lsl r8
   1d8a8:	andeq	sp, r1, r8, lsl r8
   1d8ac:	andeq	sp, r1, r8, lsl r8
   1d8b0:	andeq	sp, r1, r8, lsl r8
   1d8b4:	andeq	sp, r1, r8, lsl r8
   1d8b8:	andeq	sp, r1, r8, ror #25
   1d8bc:	ldr	r0, [sp, #100]	; 0x64
   1d8c0:	bl	11be8 <iswprint@plt>
   1d8c4:	cmp	r0, #0
   1d8c8:	moveq	r8, #0
   1d8cc:	add	fp, fp, r9
   1d8d0:	add	r0, sp, #104	; 0x68
   1d8d4:	bl	11af8 <mbsinit@plt>
   1d8d8:	cmp	r0, #0
   1d8dc:	bne	1d950 <__assert_fail@plt+0xba08>
   1d8e0:	add	r5, r6, fp
   1d8e4:	ldr	r3, [sp, #52]	; 0x34
   1d8e8:	add	r4, r3, r5
   1d8ec:	add	r3, sp, #104	; 0x68
   1d8f0:	ldr	r2, [sp, #28]
   1d8f4:	sub	r2, r2, r5
   1d8f8:	mov	r1, r4
   1d8fc:	add	r0, sp, #100	; 0x64
   1d900:	bl	20fd4 <__assert_fail@plt+0xf08c>
   1d904:	subs	r9, r0, #0
   1d908:	beq	1d9c4 <__assert_fail@plt+0xba7c>
   1d90c:	cmn	r9, #1
   1d910:	beq	1d960 <__assert_fail@plt+0xba18>
   1d914:	cmn	r9, #2
   1d918:	beq	1d7c8 <__assert_fail@plt+0xb880>
   1d91c:	ldr	r3, [sp, #32]
   1d920:	cmp	sl, #2
   1d924:	movne	r3, #0
   1d928:	andeq	r3, r3, #1
   1d92c:	cmp	r3, #0
   1d930:	beq	1d8bc <__assert_fail@plt+0xb974>
   1d934:	cmp	r9, #1
   1d938:	bls	1d8bc <__assert_fail@plt+0xb974>
   1d93c:	sub	r3, r9, #1
   1d940:	add	r5, r3, r5
   1d944:	ldr	r3, [sp, #52]	; 0x34
   1d948:	add	r5, r3, r5
   1d94c:	b	1d820 <__assert_fail@plt+0xb8d8>
   1d950:	ldr	r4, [sp, #88]	; 0x58
   1d954:	mov	r2, fp
   1d958:	ldr	fp, [sp, #92]	; 0x5c
   1d95c:	b	1d970 <__assert_fail@plt+0xba28>
   1d960:	ldr	r4, [sp, #88]	; 0x58
   1d964:	mov	r2, fp
   1d968:	ldr	fp, [sp, #92]	; 0x5c
   1d96c:	mov	r8, #0
   1d970:	cmp	r2, #1
   1d974:	bls	1d7a0 <__assert_fail@plt+0xb858>
   1d978:	add	r1, r6, r2
   1d97c:	ldr	ip, [sp, #64]	; 0x40
   1d980:	mov	r5, #0
   1d984:	eor	r3, r8, #1
   1d988:	ldr	r2, [sp, #48]	; 0x30
   1d98c:	and	r3, r3, r2
   1d990:	uxtb	r3, r3
   1d994:	ldr	r9, [sp, #32]
   1d998:	ldr	lr, [sp, #44]	; 0x2c
   1d99c:	ldr	r2, [sp, #56]	; 0x38
   1d9a0:	str	r8, [sp, #56]	; 0x38
   1d9a4:	ldr	r0, [sp, #36]	; 0x24
   1d9a8:	b	1da44 <__assert_fail@plt+0xbafc>
   1d9ac:	mov	r8, #0
   1d9b0:	b	1d970 <__assert_fail@plt+0xba28>
   1d9b4:	mov	r8, #0
   1d9b8:	b	1d970 <__assert_fail@plt+0xba28>
   1d9bc:	mov	r8, #0
   1d9c0:	b	1d970 <__assert_fail@plt+0xba28>
   1d9c4:	ldr	r4, [sp, #88]	; 0x58
   1d9c8:	mov	r2, fp
   1d9cc:	ldr	fp, [sp, #92]	; 0x5c
   1d9d0:	b	1d970 <__assert_fail@plt+0xba28>
   1d9d4:	cmp	r2, #0
   1d9d8:	beq	1d9ec <__assert_fail@plt+0xbaa4>
   1d9dc:	cmp	r7, fp
   1d9e0:	movhi	r2, #92	; 0x5c
   1d9e4:	strbhi	r2, [r0, fp]
   1d9e8:	add	fp, fp, #1
   1d9ec:	add	r8, r6, #1
   1d9f0:	cmp	r1, r8
   1d9f4:	bls	1dafc <__assert_fail@plt+0xbbb4>
   1d9f8:	eor	r2, r5, #1
   1d9fc:	and	r2, r2, lr
   1da00:	ands	r2, r2, #255	; 0xff
   1da04:	beq	1db18 <__assert_fail@plt+0xbbd0>
   1da08:	cmp	r7, fp
   1da0c:	movhi	r2, #39	; 0x27
   1da10:	strbhi	r2, [r0, fp]
   1da14:	add	r2, fp, #1
   1da18:	cmp	r7, r2
   1da1c:	movhi	lr, #39	; 0x27
   1da20:	strbhi	lr, [r0, r2]
   1da24:	add	fp, fp, #2
   1da28:	mov	r6, r8
   1da2c:	mov	r2, r3
   1da30:	mov	lr, r3
   1da34:	cmp	r7, fp
   1da38:	strbhi	r4, [r0, fp]
   1da3c:	add	fp, fp, #1
   1da40:	ldrb	r4, [ip, #1]!
   1da44:	cmp	r3, #0
   1da48:	beq	1d9d4 <__assert_fail@plt+0xba8c>
   1da4c:	cmp	r9, #0
   1da50:	bne	1dd54 <__assert_fail@plt+0xbe0c>
   1da54:	eor	r5, lr, #1
   1da58:	cmp	sl, #2
   1da5c:	movne	r5, #0
   1da60:	andeq	r5, r5, #1
   1da64:	cmp	r5, #0
   1da68:	beq	1daa0 <__assert_fail@plt+0xbb58>
   1da6c:	cmp	r7, fp
   1da70:	movhi	lr, #39	; 0x27
   1da74:	strbhi	lr, [r0, fp]
   1da78:	add	lr, fp, #1
   1da7c:	cmp	r7, lr
   1da80:	movhi	r8, #36	; 0x24
   1da84:	strbhi	r8, [r0, lr]
   1da88:	add	lr, fp, #2
   1da8c:	cmp	r7, lr
   1da90:	movhi	r8, #39	; 0x27
   1da94:	strbhi	r8, [r0, lr]
   1da98:	add	fp, fp, #3
   1da9c:	mov	lr, r5
   1daa0:	cmp	r7, fp
   1daa4:	movhi	r5, #92	; 0x5c
   1daa8:	strbhi	r5, [r0, fp]
   1daac:	add	r5, fp, #1
   1dab0:	cmp	r7, r5
   1dab4:	lsrhi	r8, r4, #6
   1dab8:	addhi	r8, r8, #48	; 0x30
   1dabc:	strbhi	r8, [r0, r5]
   1dac0:	add	r8, fp, #2
   1dac4:	cmp	r7, r8
   1dac8:	lsrhi	r5, r4, #3
   1dacc:	andhi	r5, r5, #7
   1dad0:	addhi	r5, r5, #48	; 0x30
   1dad4:	strbhi	r5, [r0, r8]
   1dad8:	add	fp, fp, #3
   1dadc:	and	r4, r4, #7
   1dae0:	add	r4, r4, #48	; 0x30
   1dae4:	add	r5, r6, #1
   1dae8:	cmp	r1, r5
   1daec:	bls	1db08 <__assert_fail@plt+0xbbc0>
   1daf0:	mov	r6, r5
   1daf4:	mov	r5, r3
   1daf8:	b	1da34 <__assert_fail@plt+0xbaec>
   1dafc:	str	lr, [sp, #44]	; 0x2c
   1db00:	ldr	r8, [sp, #56]	; 0x38
   1db04:	b	1d3d8 <__assert_fail@plt+0xb490>
   1db08:	str	lr, [sp, #44]	; 0x2c
   1db0c:	ldr	r8, [sp, #56]	; 0x38
   1db10:	mov	r5, r3
   1db14:	b	1d3d8 <__assert_fail@plt+0xb490>
   1db18:	mov	r6, r8
   1db1c:	b	1da34 <__assert_fail@plt+0xbaec>
   1db20:	mov	r5, #0
   1db24:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db28:	mov	r8, r5
   1db2c:	ldr	r5, [sp, #48]	; 0x30
   1db30:	mov	r4, #48	; 0x30
   1db34:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db38:	ldr	r8, [sp, #32]
   1db3c:	mov	r4, #48	; 0x30
   1db40:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db44:	ldr	r8, [sp, #32]
   1db48:	mov	r4, #48	; 0x30
   1db4c:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db50:	mov	r8, #0
   1db54:	mov	r5, r8
   1db58:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db5c:	mov	r8, #0
   1db60:	mov	r5, r8
   1db64:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db68:	mov	r8, #0
   1db6c:	mov	r5, r8
   1db70:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db74:	mov	r8, #0
   1db78:	mov	r5, r8
   1db7c:	b	1d4f4 <__assert_fail@plt+0xb5ac>
   1db80:	ldr	r3, [sp, #52]	; 0x34
   1db84:	ldrb	r8, [r3, r6]
   1db88:	adds	r8, r8, #0
   1db8c:	movne	r8, #1
   1db90:	b	1d604 <__assert_fail@plt+0xb6bc>
   1db94:	cmp	sl, #2
   1db98:	movne	r3, #0
   1db9c:	moveq	r3, #1
   1dba0:	ldr	r1, [sp, #32]
   1dba4:	mov	r2, r1
   1dba8:	and	r2, r2, r3
   1dbac:	cmp	fp, #0
   1dbb0:	movne	r2, #0
   1dbb4:	andeq	r2, r2, #1
   1dbb8:	cmp	r2, #0
   1dbbc:	bne	1dd6c <__assert_fail@plt+0xbe24>
   1dbc0:	eor	r2, r1, #1
   1dbc4:	and	r3, r3, r2
   1dbc8:	ldr	r1, [sp, #80]	; 0x50
   1dbcc:	tst	r1, r3
   1dbd0:	beq	1dc48 <__assert_fail@plt+0xbd00>
   1dbd4:	ldr	r3, [sp, #40]	; 0x28
   1dbd8:	cmp	r3, #0
   1dbdc:	bne	1dc04 <__assert_fail@plt+0xbcbc>
   1dbe0:	ldr	r1, [sp, #76]	; 0x4c
   1dbe4:	clz	r3, r7
   1dbe8:	lsr	r3, r3, #5
   1dbec:	cmp	r1, #0
   1dbf0:	moveq	r3, #0
   1dbf4:	cmp	r3, #0
   1dbf8:	beq	1dc48 <__assert_fail@plt+0xbd00>
   1dbfc:	ldr	r7, [sp, #76]	; 0x4c
   1dc00:	b	1cc98 <__assert_fail@plt+0xad50>
   1dc04:	ldr	r3, [sp, #168]	; 0xa8
   1dc08:	str	r3, [sp, #16]
   1dc0c:	ldr	r3, [sp, #164]	; 0xa4
   1dc10:	str	r3, [sp, #12]
   1dc14:	ldr	r3, [sp, #160]	; 0xa0
   1dc18:	str	r3, [sp, #8]
   1dc1c:	ldr	r3, [sp, #156]	; 0x9c
   1dc20:	str	r3, [sp, #4]
   1dc24:	mov	r3, #5
   1dc28:	str	r3, [sp]
   1dc2c:	ldr	r3, [sp, #28]
   1dc30:	ldr	r2, [sp, #52]	; 0x34
   1dc34:	ldr	r1, [sp, #76]	; 0x4c
   1dc38:	ldr	r0, [sp, #36]	; 0x24
   1dc3c:	bl	1cc38 <__assert_fail@plt+0xacf0>
   1dc40:	mov	fp, r0
   1dc44:	b	1dd48 <__assert_fail@plt+0xbe00>
   1dc48:	mov	sl, r7
   1dc4c:	ldr	r3, [sp, #72]	; 0x48
   1dc50:	cmp	r3, #0
   1dc54:	moveq	r2, #0
   1dc58:	andne	r2, r2, #1
   1dc5c:	cmp	r2, #0
   1dc60:	beq	1dc90 <__assert_fail@plt+0xbd48>
   1dc64:	mov	r2, r3
   1dc68:	ldrb	r3, [r3]
   1dc6c:	cmp	r3, #0
   1dc70:	beq	1dc90 <__assert_fail@plt+0xbd48>
   1dc74:	ldr	r1, [sp, #36]	; 0x24
   1dc78:	cmp	sl, fp
   1dc7c:	strbhi	r3, [r1, fp]
   1dc80:	add	fp, fp, #1
   1dc84:	ldrb	r3, [r2, #1]!
   1dc88:	cmp	r3, #0
   1dc8c:	bne	1dc78 <__assert_fail@plt+0xbd30>
   1dc90:	cmp	sl, fp
   1dc94:	movhi	r3, #0
   1dc98:	ldrhi	r2, [sp, #36]	; 0x24
   1dc9c:	strbhi	r3, [r2, fp]
   1dca0:	b	1dd48 <__assert_fail@plt+0xbe00>
   1dca4:	mov	r8, sl
   1dca8:	mov	sl, r7
   1dcac:	ldr	r3, [sp, #32]
   1dcb0:	str	r3, [sp, #48]	; 0x30
   1dcb4:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1dcb8:	mov	r8, sl
   1dcbc:	mov	sl, r7
   1dcc0:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1dcc4:	mov	r8, sl
   1dcc8:	mov	sl, r7
   1dccc:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1dcd0:	andeq	r4, r2, r0, asr r2
   1dcd4:	andeq	r4, r2, r0, ror #4
   1dcd8:	andeq	r4, r2, r4, asr r2
   1dcdc:	mov	r8, sl
   1dce0:	mov	sl, r7
   1dce4:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1dce8:	mov	r8, sl
   1dcec:	mov	sl, r7
   1dcf0:	ldr	r3, [sp, #48]	; 0x30
   1dcf4:	cmp	r8, #2
   1dcf8:	movne	r3, #0
   1dcfc:	andeq	r3, r3, #1
   1dd00:	cmp	r3, #0
   1dd04:	movne	r8, #4
   1dd08:	ldr	r3, [sp, #168]	; 0xa8
   1dd0c:	str	r3, [sp, #16]
   1dd10:	ldr	r3, [sp, #164]	; 0xa4
   1dd14:	str	r3, [sp, #12]
   1dd18:	mov	r3, #0
   1dd1c:	str	r3, [sp, #8]
   1dd20:	ldr	r3, [sp, #156]	; 0x9c
   1dd24:	bic	r3, r3, #2
   1dd28:	str	r3, [sp, #4]
   1dd2c:	str	r8, [sp]
   1dd30:	ldr	r3, [sp, #28]
   1dd34:	ldr	r2, [sp, #52]	; 0x34
   1dd38:	mov	r1, sl
   1dd3c:	ldr	r0, [sp, #36]	; 0x24
   1dd40:	bl	1cc38 <__assert_fail@plt+0xacf0>
   1dd44:	mov	fp, r0
   1dd48:	mov	r0, fp
   1dd4c:	add	sp, sp, #116	; 0x74
   1dd50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd54:	mov	r8, sl
   1dd58:	mov	sl, r7
   1dd5c:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1dd60:	mov	r8, sl
   1dd64:	mov	sl, r7
   1dd68:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1dd6c:	mov	r8, sl
   1dd70:	mov	sl, r7
   1dd74:	b	1dcf0 <__assert_fail@plt+0xbda8>
   1dd78:	mov	r8, sl
   1dd7c:	mov	sl, r7
   1dd80:	b	1dd08 <__assert_fail@plt+0xbdc0>
   1dd84:	mov	r3, #1
   1dd88:	str	r3, [sp, #32]
   1dd8c:	str	r3, [sp, #48]	; 0x30
   1dd90:	str	r3, [sp, #60]	; 0x3c
   1dd94:	ldr	r3, [pc, #-196]	; 1dcd8 <__assert_fail@plt+0xbd90>
   1dd98:	str	r3, [sp, #72]	; 0x48
   1dd9c:	mov	fp, #0
   1dda0:	mov	sl, #5
   1dda4:	b	1ccf4 <__assert_fail@plt+0xadac>
   1dda8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddac:	sub	sp, sp, #52	; 0x34
   1ddb0:	mov	r5, r0
   1ddb4:	str	r1, [sp, #24]
   1ddb8:	str	r2, [sp, #28]
   1ddbc:	mov	r4, r3
   1ddc0:	bl	11d74 <__errno_location@plt>
   1ddc4:	str	r0, [sp, #32]
   1ddc8:	ldr	r3, [r0]
   1ddcc:	str	r3, [sp, #36]	; 0x24
   1ddd0:	ldr	r3, [pc, #396]	; 1df64 <__assert_fail@plt+0xc01c>
   1ddd4:	ldr	r6, [r3]
   1ddd8:	cmn	r5, #-2147483647	; 0x80000001
   1dddc:	movne	r3, #0
   1dde0:	moveq	r3, #1
   1dde4:	orrs	r3, r3, r5, lsr #31
   1dde8:	bne	1df28 <__assert_fail@plt+0xbfe0>
   1ddec:	ldr	r3, [pc, #368]	; 1df64 <__assert_fail@plt+0xc01c>
   1ddf0:	ldr	r2, [r3, #4]
   1ddf4:	cmp	r5, r2
   1ddf8:	blt	1de60 <__assert_fail@plt+0xbf18>
   1ddfc:	str	r2, [sp, #44]	; 0x2c
   1de00:	add	r3, r3, #8
   1de04:	cmp	r6, r3
   1de08:	beq	1df2c <__assert_fail@plt+0xbfe4>
   1de0c:	sub	r2, r5, r2
   1de10:	mov	r3, #8
   1de14:	str	r3, [sp]
   1de18:	mvn	r3, #-2147483648	; 0x80000000
   1de1c:	add	r2, r2, #1
   1de20:	add	r1, sp, #44	; 0x2c
   1de24:	mov	r0, r6
   1de28:	bl	1fdbc <__assert_fail@plt+0xde74>
   1de2c:	mov	r6, r0
   1de30:	ldr	r3, [pc, #300]	; 1df64 <__assert_fail@plt+0xc01c>
   1de34:	str	r0, [r3]
   1de38:	ldr	r7, [pc, #292]	; 1df64 <__assert_fail@plt+0xc01c>
   1de3c:	ldr	r0, [r7, #4]
   1de40:	ldr	r2, [sp, #44]	; 0x2c
   1de44:	sub	r2, r2, r0
   1de48:	lsl	r2, r2, #3
   1de4c:	mov	r1, #0
   1de50:	add	r0, r6, r0, lsl #3
   1de54:	bl	11d98 <memset@plt>
   1de58:	ldr	r3, [sp, #44]	; 0x2c
   1de5c:	str	r3, [r7, #4]
   1de60:	add	fp, r6, r5, lsl #3
   1de64:	ldr	r8, [r6, r5, lsl #3]
   1de68:	ldr	r7, [fp, #4]
   1de6c:	ldr	r9, [r4, #4]
   1de70:	orr	r9, r9, #1
   1de74:	add	sl, r4, #8
   1de78:	ldr	r3, [r4, #44]	; 0x2c
   1de7c:	str	r3, [sp, #16]
   1de80:	ldr	r3, [r4, #40]	; 0x28
   1de84:	str	r3, [sp, #12]
   1de88:	str	sl, [sp, #8]
   1de8c:	str	r9, [sp, #4]
   1de90:	ldr	r3, [r4]
   1de94:	str	r3, [sp]
   1de98:	ldr	r3, [sp, #28]
   1de9c:	ldr	r2, [sp, #24]
   1dea0:	mov	r1, r8
   1dea4:	mov	r0, r7
   1dea8:	bl	1cc38 <__assert_fail@plt+0xacf0>
   1deac:	cmp	r8, r0
   1deb0:	bhi	1df10 <__assert_fail@plt+0xbfc8>
   1deb4:	add	r8, r0, #1
   1deb8:	str	r8, [r6, r5, lsl #3]
   1debc:	ldr	r3, [pc, #164]	; 1df68 <__assert_fail@plt+0xc020>
   1dec0:	cmp	r7, r3
   1dec4:	beq	1ded0 <__assert_fail@plt+0xbf88>
   1dec8:	mov	r0, r7
   1decc:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1ded0:	mov	r0, r8
   1ded4:	bl	1fc38 <__assert_fail@plt+0xdcf0>
   1ded8:	mov	r7, r0
   1dedc:	str	r0, [fp, #4]
   1dee0:	ldr	r3, [r4, #44]	; 0x2c
   1dee4:	str	r3, [sp, #16]
   1dee8:	ldr	r3, [r4, #40]	; 0x28
   1deec:	str	r3, [sp, #12]
   1def0:	str	sl, [sp, #8]
   1def4:	str	r9, [sp, #4]
   1def8:	ldr	r3, [r4]
   1defc:	str	r3, [sp]
   1df00:	ldr	r3, [sp, #28]
   1df04:	ldr	r2, [sp, #24]
   1df08:	mov	r1, r8
   1df0c:	bl	1cc38 <__assert_fail@plt+0xacf0>
   1df10:	ldr	r3, [sp, #32]
   1df14:	ldr	r2, [sp, #36]	; 0x24
   1df18:	str	r2, [r3]
   1df1c:	mov	r0, r7
   1df20:	add	sp, sp, #52	; 0x34
   1df24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df28:	bl	11f24 <abort@plt>
   1df2c:	sub	r2, r5, r2
   1df30:	mov	r3, #8
   1df34:	str	r3, [sp]
   1df38:	mvn	r3, #-2147483648	; 0x80000000
   1df3c:	add	r2, r2, #1
   1df40:	add	r1, sp, #44	; 0x2c
   1df44:	mov	r0, #0
   1df48:	bl	1fdbc <__assert_fail@plt+0xde74>
   1df4c:	mov	r6, r0
   1df50:	ldr	r3, [pc, #12]	; 1df64 <__assert_fail@plt+0xc01c>
   1df54:	str	r0, [r3], #8
   1df58:	ldm	r3, {r0, r1}
   1df5c:	stm	r6, {r0, r1}
   1df60:	b	1de38 <__assert_fail@plt+0xbef0>
   1df64:	andeq	r5, r3, r4, ror r2
   1df68:	ldrdeq	r5, [r3], -r4
   1df6c:	push	{r4, r5, r6, lr}
   1df70:	mov	r4, r0
   1df74:	bl	11d74 <__errno_location@plt>
   1df78:	mov	r5, r0
   1df7c:	ldr	r6, [r0]
   1df80:	cmp	r4, #0
   1df84:	ldr	r3, [pc, #20]	; 1dfa0 <__assert_fail@plt+0xc058>
   1df88:	moveq	r4, r3
   1df8c:	mov	r1, #48	; 0x30
   1df90:	mov	r0, r4
   1df94:	bl	20124 <__assert_fail@plt+0xe1dc>
   1df98:	str	r6, [r5]
   1df9c:	pop	{r4, r5, r6, pc}
   1dfa0:	ldrdeq	r5, [r3], -r4
   1dfa4:	subs	r3, r0, #0
   1dfa8:	ldr	r2, [pc, #8]	; 1dfb8 <__assert_fail@plt+0xc070>
   1dfac:	moveq	r3, r2
   1dfb0:	ldr	r0, [r3]
   1dfb4:	bx	lr
   1dfb8:	ldrdeq	r5, [r3], -r4
   1dfbc:	subs	r3, r0, #0
   1dfc0:	ldr	r2, [pc, #8]	; 1dfd0 <__assert_fail@plt+0xc088>
   1dfc4:	moveq	r3, r2
   1dfc8:	str	r1, [r3]
   1dfcc:	bx	lr
   1dfd0:	ldrdeq	r5, [r3], -r4
   1dfd4:	push	{lr}		; (str lr, [sp, #-4]!)
   1dfd8:	subs	r3, r0, #0
   1dfdc:	ldr	r0, [pc, #44]	; 1e010 <__assert_fail@plt+0xc0c8>
   1dfe0:	moveq	r3, r0
   1dfe4:	add	r3, r3, #8
   1dfe8:	lsr	lr, r1, #5
   1dfec:	and	r1, r1, #31
   1dff0:	ldr	ip, [r3, lr, lsl #2]
   1dff4:	lsr	r0, ip, r1
   1dff8:	eor	r2, r2, r0
   1dffc:	and	r2, r2, #1
   1e000:	eor	r1, ip, r2, lsl r1
   1e004:	str	r1, [r3, lr, lsl #2]
   1e008:	and	r0, r0, #1
   1e00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e010:	ldrdeq	r5, [r3], -r4
   1e014:	subs	r3, r0, #0
   1e018:	ldr	r2, [pc, #12]	; 1e02c <__assert_fail@plt+0xc0e4>
   1e01c:	moveq	r3, r2
   1e020:	ldr	r0, [r3, #4]
   1e024:	str	r1, [r3, #4]
   1e028:	bx	lr
   1e02c:	ldrdeq	r5, [r3], -r4
   1e030:	subs	r3, r0, #0
   1e034:	ldr	r0, [pc, #40]	; 1e064 <__assert_fail@plt+0xc11c>
   1e038:	moveq	r3, r0
   1e03c:	mov	r0, #10
   1e040:	str	r0, [r3]
   1e044:	cmp	r2, #0
   1e048:	cmpne	r1, #0
   1e04c:	beq	1e05c <__assert_fail@plt+0xc114>
   1e050:	str	r1, [r3, #40]	; 0x28
   1e054:	str	r2, [r3, #44]	; 0x2c
   1e058:	bx	lr
   1e05c:	push	{r4, lr}
   1e060:	bl	11f24 <abort@plt>
   1e064:	ldrdeq	r5, [r3], -r4
   1e068:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e06c:	sub	sp, sp, #24
   1e070:	mov	r7, r0
   1e074:	mov	r8, r1
   1e078:	mov	r9, r2
   1e07c:	mov	sl, r3
   1e080:	ldr	r4, [sp, #56]	; 0x38
   1e084:	cmp	r4, #0
   1e088:	ldr	r3, [pc, #84]	; 1e0e4 <__assert_fail@plt+0xc19c>
   1e08c:	moveq	r4, r3
   1e090:	bl	11d74 <__errno_location@plt>
   1e094:	mov	r5, r0
   1e098:	ldr	r6, [r0]
   1e09c:	ldr	r3, [r4, #44]	; 0x2c
   1e0a0:	str	r3, [sp, #16]
   1e0a4:	ldr	r3, [r4, #40]	; 0x28
   1e0a8:	str	r3, [sp, #12]
   1e0ac:	add	r3, r4, #8
   1e0b0:	str	r3, [sp, #8]
   1e0b4:	ldr	r3, [r4, #4]
   1e0b8:	str	r3, [sp, #4]
   1e0bc:	ldr	r3, [r4]
   1e0c0:	str	r3, [sp]
   1e0c4:	mov	r3, sl
   1e0c8:	mov	r2, r9
   1e0cc:	mov	r1, r8
   1e0d0:	mov	r0, r7
   1e0d4:	bl	1cc38 <__assert_fail@plt+0xacf0>
   1e0d8:	str	r6, [r5]
   1e0dc:	add	sp, sp, #24
   1e0e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e0e4:	ldrdeq	r5, [r3], -r4
   1e0e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0ec:	sub	sp, sp, #44	; 0x2c
   1e0f0:	str	r0, [sp, #28]
   1e0f4:	str	r1, [sp, #32]
   1e0f8:	mov	r6, r2
   1e0fc:	subs	r4, r3, #0
   1e100:	ldr	r3, [pc, #172]	; 1e1b4 <__assert_fail@plt+0xc26c>
   1e104:	moveq	r4, r3
   1e108:	bl	11d74 <__errno_location@plt>
   1e10c:	mov	r7, r0
   1e110:	ldr	fp, [r0]
   1e114:	ldr	r5, [r4, #4]
   1e118:	cmp	r6, #0
   1e11c:	orreq	r5, r5, #1
   1e120:	add	r9, r4, #8
   1e124:	ldr	r3, [r4, #44]	; 0x2c
   1e128:	str	r3, [sp, #16]
   1e12c:	ldr	r3, [r4, #40]	; 0x28
   1e130:	str	r3, [sp, #12]
   1e134:	str	r9, [sp, #8]
   1e138:	str	r5, [sp, #4]
   1e13c:	ldr	r3, [r4]
   1e140:	str	r3, [sp]
   1e144:	ldr	r3, [sp, #32]
   1e148:	ldr	r2, [sp, #28]
   1e14c:	mov	r1, #0
   1e150:	mov	r0, r1
   1e154:	bl	1cc38 <__assert_fail@plt+0xacf0>
   1e158:	mov	sl, r0
   1e15c:	add	r8, r0, #1
   1e160:	mov	r0, r8
   1e164:	bl	1fc38 <__assert_fail@plt+0xdcf0>
   1e168:	str	r0, [sp, #36]	; 0x24
   1e16c:	ldr	r3, [r4, #44]	; 0x2c
   1e170:	str	r3, [sp, #16]
   1e174:	ldr	r3, [r4, #40]	; 0x28
   1e178:	str	r3, [sp, #12]
   1e17c:	str	r9, [sp, #8]
   1e180:	str	r5, [sp, #4]
   1e184:	ldr	r3, [r4]
   1e188:	str	r3, [sp]
   1e18c:	ldr	r3, [sp, #32]
   1e190:	ldr	r2, [sp, #28]
   1e194:	mov	r1, r8
   1e198:	bl	1cc38 <__assert_fail@plt+0xacf0>
   1e19c:	str	fp, [r7]
   1e1a0:	cmp	r6, #0
   1e1a4:	strne	sl, [r6]
   1e1a8:	ldr	r0, [sp, #36]	; 0x24
   1e1ac:	add	sp, sp, #44	; 0x2c
   1e1b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1b4:	ldrdeq	r5, [r3], -r4
   1e1b8:	push	{r4, lr}
   1e1bc:	mov	r3, r2
   1e1c0:	mov	r2, #0
   1e1c4:	bl	1e0e8 <__assert_fail@plt+0xc1a0>
   1e1c8:	pop	{r4, pc}
   1e1cc:	push	{r4, r5, r6, r7, r8, lr}
   1e1d0:	ldr	r3, [pc, #140]	; 1e264 <__assert_fail@plt+0xc31c>
   1e1d4:	ldr	r7, [r3]
   1e1d8:	ldr	r3, [r3, #4]
   1e1dc:	cmp	r3, #1
   1e1e0:	ble	1e20c <__assert_fail@plt+0xc2c4>
   1e1e4:	mov	r5, r7
   1e1e8:	mov	r4, #1
   1e1ec:	ldr	r6, [pc, #112]	; 1e264 <__assert_fail@plt+0xc31c>
   1e1f0:	ldr	r0, [r5, #12]
   1e1f4:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1e1f8:	add	r4, r4, #1
   1e1fc:	add	r5, r5, #8
   1e200:	ldr	r3, [r6, #4]
   1e204:	cmp	r3, r4
   1e208:	bgt	1e1f0 <__assert_fail@plt+0xc2a8>
   1e20c:	ldr	r0, [r7, #4]
   1e210:	ldr	r3, [pc, #80]	; 1e268 <__assert_fail@plt+0xc320>
   1e214:	cmp	r0, r3
   1e218:	beq	1e234 <__assert_fail@plt+0xc2ec>
   1e21c:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1e220:	ldr	r3, [pc, #60]	; 1e264 <__assert_fail@plt+0xc31c>
   1e224:	mov	r2, #256	; 0x100
   1e228:	str	r2, [r3, #8]
   1e22c:	ldr	r2, [pc, #52]	; 1e268 <__assert_fail@plt+0xc320>
   1e230:	str	r2, [r3, #12]
   1e234:	ldr	r3, [pc, #48]	; 1e26c <__assert_fail@plt+0xc324>
   1e238:	cmp	r7, r3
   1e23c:	beq	1e254 <__assert_fail@plt+0xc30c>
   1e240:	mov	r0, r7
   1e244:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1e248:	ldr	r3, [pc, #20]	; 1e264 <__assert_fail@plt+0xc31c>
   1e24c:	add	r2, r3, #8
   1e250:	str	r2, [r3]
   1e254:	mov	r2, #1
   1e258:	ldr	r3, [pc, #4]	; 1e264 <__assert_fail@plt+0xc31c>
   1e25c:	str	r2, [r3, #4]
   1e260:	pop	{r4, r5, r6, r7, r8, pc}
   1e264:	andeq	r5, r3, r4, ror r2
   1e268:	ldrdeq	r5, [r3], -r4
   1e26c:	andeq	r5, r3, ip, ror r2
   1e270:	push	{r4, lr}
   1e274:	ldr	r3, [pc, #8]	; 1e284 <__assert_fail@plt+0xc33c>
   1e278:	mvn	r2, #0
   1e27c:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e280:	pop	{r4, pc}
   1e284:	ldrdeq	r5, [r3], -r4
   1e288:	push	{r4, lr}
   1e28c:	ldr	r3, [pc, #4]	; 1e298 <__assert_fail@plt+0xc350>
   1e290:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e294:	pop	{r4, pc}
   1e298:	ldrdeq	r5, [r3], -r4
   1e29c:	push	{r4, lr}
   1e2a0:	mov	r1, r0
   1e2a4:	mov	r0, #0
   1e2a8:	bl	1e270 <__assert_fail@plt+0xc328>
   1e2ac:	pop	{r4, pc}
   1e2b0:	push	{r4, lr}
   1e2b4:	mov	r2, r1
   1e2b8:	mov	r1, r0
   1e2bc:	mov	r0, #0
   1e2c0:	bl	1e288 <__assert_fail@plt+0xc340>
   1e2c4:	pop	{r4, pc}
   1e2c8:	push	{r4, r5, lr}
   1e2cc:	sub	sp, sp, #52	; 0x34
   1e2d0:	mov	r4, r0
   1e2d4:	mov	r5, r2
   1e2d8:	mov	r0, sp
   1e2dc:	bl	1cad0 <__assert_fail@plt+0xab88>
   1e2e0:	mov	r3, sp
   1e2e4:	mvn	r2, #0
   1e2e8:	mov	r1, r5
   1e2ec:	mov	r0, r4
   1e2f0:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e2f4:	add	sp, sp, #52	; 0x34
   1e2f8:	pop	{r4, r5, pc}
   1e2fc:	push	{r4, r5, r6, lr}
   1e300:	sub	sp, sp, #48	; 0x30
   1e304:	mov	r4, r0
   1e308:	mov	r5, r2
   1e30c:	mov	r6, r3
   1e310:	mov	r0, sp
   1e314:	bl	1cad0 <__assert_fail@plt+0xab88>
   1e318:	mov	r3, sp
   1e31c:	mov	r2, r6
   1e320:	mov	r1, r5
   1e324:	mov	r0, r4
   1e328:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e32c:	add	sp, sp, #48	; 0x30
   1e330:	pop	{r4, r5, r6, pc}
   1e334:	push	{r4, lr}
   1e338:	mov	r2, r1
   1e33c:	mov	r1, r0
   1e340:	mov	r0, #0
   1e344:	bl	1e2c8 <__assert_fail@plt+0xc380>
   1e348:	pop	{r4, pc}
   1e34c:	push	{r4, lr}
   1e350:	mov	r3, r2
   1e354:	mov	r2, r1
   1e358:	mov	r1, r0
   1e35c:	mov	r0, #0
   1e360:	bl	1e2fc <__assert_fail@plt+0xc3b4>
   1e364:	pop	{r4, pc}
   1e368:	push	{r4, r5, r6, lr}
   1e36c:	sub	sp, sp, #48	; 0x30
   1e370:	mov	r4, r0
   1e374:	mov	r5, r1
   1e378:	mov	r6, r2
   1e37c:	mov	ip, sp
   1e380:	ldr	lr, [pc, #64]	; 1e3c8 <__assert_fail@plt+0xc480>
   1e384:	ldm	lr!, {r0, r1, r2, r3}
   1e388:	stmia	ip!, {r0, r1, r2, r3}
   1e38c:	ldm	lr!, {r0, r1, r2, r3}
   1e390:	stmia	ip!, {r0, r1, r2, r3}
   1e394:	ldm	lr, {r0, r1, r2, r3}
   1e398:	stm	ip, {r0, r1, r2, r3}
   1e39c:	mov	r2, #1
   1e3a0:	mov	r1, r6
   1e3a4:	mov	r0, sp
   1e3a8:	bl	1dfd4 <__assert_fail@plt+0xc08c>
   1e3ac:	mov	r3, sp
   1e3b0:	mov	r2, r5
   1e3b4:	mov	r1, r4
   1e3b8:	mov	r0, #0
   1e3bc:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e3c0:	add	sp, sp, #48	; 0x30
   1e3c4:	pop	{r4, r5, r6, pc}
   1e3c8:	ldrdeq	r5, [r3], -r4
   1e3cc:	push	{r4, lr}
   1e3d0:	mov	r2, r1
   1e3d4:	mvn	r1, #0
   1e3d8:	bl	1e368 <__assert_fail@plt+0xc420>
   1e3dc:	pop	{r4, pc}
   1e3e0:	push	{r4, lr}
   1e3e4:	mov	r1, #58	; 0x3a
   1e3e8:	bl	1e3cc <__assert_fail@plt+0xc484>
   1e3ec:	pop	{r4, pc}
   1e3f0:	push	{r4, lr}
   1e3f4:	mov	r2, #58	; 0x3a
   1e3f8:	bl	1e368 <__assert_fail@plt+0xc420>
   1e3fc:	pop	{r4, pc}
   1e400:	push	{r4, r5, lr}
   1e404:	sub	sp, sp, #100	; 0x64
   1e408:	mov	r4, r0
   1e40c:	mov	r5, r2
   1e410:	mov	r0, sp
   1e414:	bl	1cad0 <__assert_fail@plt+0xab88>
   1e418:	add	lr, sp, #48	; 0x30
   1e41c:	mov	ip, sp
   1e420:	ldm	ip!, {r0, r1, r2, r3}
   1e424:	stmia	lr!, {r0, r1, r2, r3}
   1e428:	ldm	ip!, {r0, r1, r2, r3}
   1e42c:	stmia	lr!, {r0, r1, r2, r3}
   1e430:	ldm	ip, {r0, r1, r2, r3}
   1e434:	stm	lr, {r0, r1, r2, r3}
   1e438:	mov	r2, #1
   1e43c:	mov	r1, #58	; 0x3a
   1e440:	add	r0, sp, #48	; 0x30
   1e444:	bl	1dfd4 <__assert_fail@plt+0xc08c>
   1e448:	add	r3, sp, #48	; 0x30
   1e44c:	mvn	r2, #0
   1e450:	mov	r1, r5
   1e454:	mov	r0, r4
   1e458:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e45c:	add	sp, sp, #100	; 0x64
   1e460:	pop	{r4, r5, pc}
   1e464:	push	{r4, r5, r6, r7, lr}
   1e468:	sub	sp, sp, #52	; 0x34
   1e46c:	mov	r4, r0
   1e470:	mov	r6, r1
   1e474:	mov	r7, r2
   1e478:	mov	r5, r3
   1e47c:	mov	ip, sp
   1e480:	ldr	lr, [pc, #64]	; 1e4c8 <__assert_fail@plt+0xc580>
   1e484:	ldm	lr!, {r0, r1, r2, r3}
   1e488:	stmia	ip!, {r0, r1, r2, r3}
   1e48c:	ldm	lr!, {r0, r1, r2, r3}
   1e490:	stmia	ip!, {r0, r1, r2, r3}
   1e494:	ldm	lr, {r0, r1, r2, r3}
   1e498:	stm	ip, {r0, r1, r2, r3}
   1e49c:	mov	r2, r7
   1e4a0:	mov	r1, r6
   1e4a4:	mov	r0, sp
   1e4a8:	bl	1e030 <__assert_fail@plt+0xc0e8>
   1e4ac:	mov	r3, sp
   1e4b0:	ldr	r2, [sp, #72]	; 0x48
   1e4b4:	mov	r1, r5
   1e4b8:	mov	r0, r4
   1e4bc:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e4c0:	add	sp, sp, #52	; 0x34
   1e4c4:	pop	{r4, r5, r6, r7, pc}
   1e4c8:	ldrdeq	r5, [r3], -r4
   1e4cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1e4d0:	sub	sp, sp, #12
   1e4d4:	mvn	ip, #0
   1e4d8:	str	ip, [sp]
   1e4dc:	bl	1e464 <__assert_fail@plt+0xc51c>
   1e4e0:	add	sp, sp, #12
   1e4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4e8:	push	{r4, lr}
   1e4ec:	mov	r3, r2
   1e4f0:	mov	r2, r1
   1e4f4:	mov	r1, r0
   1e4f8:	mov	r0, #0
   1e4fc:	bl	1e4cc <__assert_fail@plt+0xc584>
   1e500:	pop	{r4, pc}
   1e504:	push	{lr}		; (str lr, [sp, #-4]!)
   1e508:	sub	sp, sp, #12
   1e50c:	str	r3, [sp]
   1e510:	mov	r3, r2
   1e514:	mov	r2, r1
   1e518:	mov	r1, r0
   1e51c:	mov	r0, #0
   1e520:	bl	1e464 <__assert_fail@plt+0xc51c>
   1e524:	add	sp, sp, #12
   1e528:	pop	{pc}		; (ldr pc, [sp], #4)
   1e52c:	push	{r4, lr}
   1e530:	ldr	r3, [pc, #4]	; 1e53c <__assert_fail@plt+0xc5f4>
   1e534:	bl	1dda8 <__assert_fail@plt+0xbe60>
   1e538:	pop	{r4, pc}
   1e53c:	andeq	r5, r3, r4, lsl #5
   1e540:	push	{r4, lr}
   1e544:	mov	r2, r1
   1e548:	mov	r1, r0
   1e54c:	mov	r0, #0
   1e550:	bl	1e52c <__assert_fail@plt+0xc5e4>
   1e554:	pop	{r4, pc}
   1e558:	push	{r4, lr}
   1e55c:	mvn	r2, #0
   1e560:	bl	1e52c <__assert_fail@plt+0xc5e4>
   1e564:	pop	{r4, pc}
   1e568:	push	{r4, lr}
   1e56c:	mov	r1, r0
   1e570:	mov	r0, #0
   1e574:	bl	1e558 <__assert_fail@plt+0xc610>
   1e578:	pop	{r4, pc}
   1e57c:	push	{r7, lr}
   1e580:	subs	r5, r0, #0
   1e584:	beq	1e5d0 <__assert_fail@plt+0xc688>
   1e588:	ldr	r3, [pc, #68]	; 1e5d4 <__assert_fail@plt+0xc68c>
   1e58c:	ldr	r6, [r3]
   1e590:	bl	11d74 <__errno_location@plt>
   1e594:	ldr	r4, [r0]
   1e598:	cmp	r4, #0
   1e59c:	mov	r2, #5
   1e5a0:	ldreq	r1, [pc, #48]	; 1e5d8 <__assert_fail@plt+0xc690>
   1e5a4:	ldrne	r1, [pc, #48]	; 1e5dc <__assert_fail@plt+0xc694>
   1e5a8:	mov	r0, #0
   1e5ac:	bl	11b58 <dcgettext@plt>
   1e5b0:	mov	r7, r0
   1e5b4:	mov	r0, r5
   1e5b8:	bl	1e568 <__assert_fail@plt+0xc620>
   1e5bc:	mov	r3, r0
   1e5c0:	mov	r2, r7
   1e5c4:	mov	r1, r4
   1e5c8:	mov	r0, r6
   1e5cc:	bl	11c90 <error@plt>
   1e5d0:	bl	11f24 <abort@plt>
   1e5d4:	andeq	r5, r3, r0, ror r2
   1e5d8:	andeq	r4, r2, r0, asr #5
   1e5dc:	ldrdeq	r4, [r2], -r0
   1e5e0:	push	{r4, r5, r6, lr}
   1e5e4:	mov	r4, r0
   1e5e8:	ldr	r5, [r0]
   1e5ec:	mvn	r2, #0
   1e5f0:	ldr	r1, [pc, #36]	; 1e61c <__assert_fail@plt+0xc6d4>
   1e5f4:	bl	11e4c <__explicit_bzero_chk@plt>
   1e5f8:	mov	r0, r4
   1e5fc:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   1e600:	cmp	r5, #0
   1e604:	beq	1e614 <__assert_fail@plt+0xc6cc>
   1e608:	mov	r0, r5
   1e60c:	bl	1a934 <__assert_fail@plt+0x89ec>
   1e610:	pop	{r4, r5, r6, pc}
   1e614:	mov	r0, #0
   1e618:	pop	{r4, r5, r6, pc}
   1e61c:	andeq	r0, r0, ip, lsl r8
   1e620:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e624:	subs	r5, r1, #0
   1e628:	beq	1e688 <__assert_fail@plt+0xc740>
   1e62c:	mov	r4, r0
   1e630:	cmp	r0, #0
   1e634:	beq	1e700 <__assert_fail@plt+0xc7b8>
   1e638:	ldr	r1, [pc, #272]	; 1e750 <__assert_fail@plt+0xc808>
   1e63c:	bl	20f04 <__assert_fail@plt+0xefbc>
   1e640:	subs	r7, r0, #0
   1e644:	beq	1e6f8 <__assert_fail@plt+0xc7b0>
   1e648:	ldr	r0, [pc, #260]	; 1e754 <__assert_fail@plt+0xc80c>
   1e64c:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   1e650:	mov	r6, r0
   1e654:	str	r7, [r0]
   1e658:	ldr	r3, [pc, #248]	; 1e758 <__assert_fail@plt+0xc810>
   1e65c:	str	r3, [r0, #4]
   1e660:	str	r4, [r0, #8]
   1e664:	cmp	r5, #2048	; 0x800
   1e668:	movcc	r3, r5
   1e66c:	movcs	r3, #2048	; 0x800
   1e670:	mov	r2, #0
   1e674:	add	r1, r0, #12
   1e678:	mov	r0, r7
   1e67c:	bl	11d8c <setvbuf@plt>
   1e680:	mov	r0, r6
   1e684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e688:	ldr	r0, [pc, #196]	; 1e754 <__assert_fail@plt+0xc80c>
   1e68c:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   1e690:	mov	r6, r0
   1e694:	mov	r3, #0
   1e698:	str	r3, [r0]
   1e69c:	ldr	r2, [pc, #180]	; 1e758 <__assert_fail@plt+0xc810>
   1e6a0:	str	r2, [r0, #4]
   1e6a4:	str	r3, [r0, #8]
   1e6a8:	b	1e680 <__assert_fail@plt+0xc738>
   1e6ac:	cmp	r4, r5
   1e6b0:	bcs	1e744 <__assert_fail@plt+0xc7fc>
   1e6b4:	mov	r2, r7
   1e6b8:	sub	r1, r5, r4
   1e6bc:	mov	r0, r4
   1e6c0:	bl	11ef4 <getrandom@plt>
   1e6c4:	cmp	r0, #0
   1e6c8:	addge	r4, r4, r0
   1e6cc:	bge	1e6ac <__assert_fail@plt+0xc764>
   1e6d0:	bl	11d74 <__errno_location@plt>
   1e6d4:	mov	r8, r0
   1e6d8:	ldr	sl, [r0]
   1e6dc:	cmp	sl, #4
   1e6e0:	beq	1e6ac <__assert_fail@plt+0xc764>
   1e6e4:	mov	r0, r6
   1e6e8:	bl	1e5e0 <__assert_fail@plt+0xc698>
   1e6ec:	str	sl, [r8]
   1e6f0:	mov	r6, #0
   1e6f4:	b	1e680 <__assert_fail@plt+0xc738>
   1e6f8:	mov	r6, #0
   1e6fc:	b	1e680 <__assert_fail@plt+0xc738>
   1e700:	ldr	r0, [pc, #76]	; 1e754 <__assert_fail@plt+0xc80c>
   1e704:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   1e708:	mov	r6, r0
   1e70c:	mov	r3, #0
   1e710:	str	r3, [r0]
   1e714:	ldr	r2, [pc, #60]	; 1e758 <__assert_fail@plt+0xc810>
   1e718:	str	r2, [r0, #4]
   1e71c:	str	r3, [r0, #8]
   1e720:	str	r3, [r0, #12]
   1e724:	add	r9, r0, #16
   1e728:	cmp	r5, #1024	; 0x400
   1e72c:	addls	r5, r9, r5
   1e730:	addhi	r5, r9, #1024	; 0x400
   1e734:	cmp	r9, r5
   1e738:	movcc	r4, r9
   1e73c:	movcc	r7, #0
   1e740:	bcc	1e6b4 <__assert_fail@plt+0xc76c>
   1e744:	mov	r0, r9
   1e748:	bl	1eadc <__assert_fail@plt+0xcb94>
   1e74c:	b	1e680 <__assert_fail@plt+0xc738>
   1e750:	andeq	r4, r2, r0, ror #5
   1e754:	andeq	r0, r0, ip, lsl r8
   1e758:	andeq	lr, r1, ip, ror r5
   1e75c:	str	r1, [r0, #4]
   1e760:	bx	lr
   1e764:	str	r1, [r0, #8]
   1e768:	bx	lr
   1e76c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e770:	mov	r6, r0
   1e774:	mov	r5, r1
   1e778:	mov	r4, r2
   1e77c:	ldr	r3, [r0]
   1e780:	cmp	r3, #0
   1e784:	beq	1e7e0 <__assert_fail@plt+0xc898>
   1e788:	mov	r8, #1
   1e78c:	ldr	r3, [r6]
   1e790:	mov	r2, r4
   1e794:	mov	r1, r8
   1e798:	mov	r0, r5
   1e79c:	bl	11ee8 <fread_unlocked@plt>
   1e7a0:	mov	r7, r0
   1e7a4:	bl	11d74 <__errno_location@plt>
   1e7a8:	ldr	r3, [r0]
   1e7ac:	add	r5, r5, r7
   1e7b0:	subs	r4, r4, r7
   1e7b4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7b8:	ldr	r2, [r6]
   1e7bc:	ldr	r2, [r2]
   1e7c0:	and	r2, r2, #32
   1e7c4:	cmp	r2, #0
   1e7c8:	moveq	r3, #0
   1e7cc:	str	r3, [r0]
   1e7d0:	ldr	r3, [r6, #4]
   1e7d4:	ldr	r0, [r6, #8]
   1e7d8:	blx	r3
   1e7dc:	b	1e78c <__assert_fail@plt+0xc844>
   1e7e0:	ldr	fp, [r0, #12]
   1e7e4:	cmp	r2, fp
   1e7e8:	bls	1e808 <__assert_fail@plt+0xc8c0>
   1e7ec:	add	r9, r0, #12
   1e7f0:	add	r9, r9, #1040	; 0x410
   1e7f4:	ldr	r8, [pc, #164]	; 1e8a0 <__assert_fail@plt+0xc958>
   1e7f8:	add	r7, r0, #16
   1e7fc:	mov	sl, #1024	; 0x400
   1e800:	b	1e850 <__assert_fail@plt+0xc908>
   1e804:	mov	fp, #1024	; 0x400
   1e808:	add	r1, r6, #12
   1e80c:	sub	r1, r1, fp
   1e810:	mov	r2, r4
   1e814:	add	r1, r1, #2064	; 0x810
   1e818:	mov	r0, r5
   1e81c:	bl	11ac8 <memcpy@plt>
   1e820:	sub	r4, fp, r4
   1e824:	str	r4, [r6, #12]
   1e828:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e82c:	mov	r3, #0
   1e830:	str	r3, [r6, #12]
   1e834:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e838:	mov	r1, r9
   1e83c:	mov	r0, r7
   1e840:	bl	1e8b0 <__assert_fail@plt+0xc968>
   1e844:	mov	fp, sl
   1e848:	cmp	r4, #1024	; 0x400
   1e84c:	bls	1e804 <__assert_fail@plt+0xc8bc>
   1e850:	rsb	r1, fp, #1024	; 0x400
   1e854:	mov	r2, fp
   1e858:	add	r1, r9, r1
   1e85c:	mov	r0, r5
   1e860:	bl	11ac8 <memcpy@plt>
   1e864:	add	r5, r5, fp
   1e868:	sub	r4, r4, fp
   1e86c:	tst	r5, #3
   1e870:	bne	1e838 <__assert_fail@plt+0xc8f0>
   1e874:	cmp	r4, r8
   1e878:	bls	1e838 <__assert_fail@plt+0xc8f0>
   1e87c:	mov	r1, r5
   1e880:	mov	r0, r7
   1e884:	bl	1e8b0 <__assert_fail@plt+0xc968>
   1e888:	add	r5, r5, #1024	; 0x400
   1e88c:	subs	r4, r4, #1024	; 0x400
   1e890:	beq	1e82c <__assert_fail@plt+0xc8e4>
   1e894:	cmp	r4, r8
   1e898:	bhi	1e87c <__assert_fail@plt+0xc934>
   1e89c:	b	1e838 <__assert_fail@plt+0xc8f0>
   1e8a0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e8a4:	push	{r4, lr}
   1e8a8:	bl	1e5e0 <__assert_fail@plt+0xc698>
   1e8ac:	pop	{r4, pc}
   1e8b0:	push	{r4, r5, r6, r7, r8, lr}
   1e8b4:	ldr	r3, [r0, #1024]	; 0x400
   1e8b8:	ldr	r4, [r0, #1028]	; 0x404
   1e8bc:	ldr	r2, [r0, #1032]	; 0x408
   1e8c0:	add	r2, r2, #1
   1e8c4:	str	r2, [r0, #1032]	; 0x408
   1e8c8:	add	r4, r4, r2
   1e8cc:	mov	ip, r0
   1e8d0:	add	r1, r1, #16
   1e8d4:	add	lr, r0, #16
   1e8d8:	add	r7, r0, #512	; 0x200
   1e8dc:	eor	r3, r3, r3, lsl #13
   1e8e0:	mov	r2, lr
   1e8e4:	ldr	r5, [lr, #496]	; 0x1f0
   1e8e8:	add	r3, r3, r5
   1e8ec:	ldr	r5, [lr, #-16]
   1e8f0:	and	r6, r5, #1020	; 0x3fc
   1e8f4:	ldr	r6, [ip, r6]
   1e8f8:	add	r6, r3, r6
   1e8fc:	add	r4, r6, r4
   1e900:	str	r4, [lr, #-16]
   1e904:	lsr	r4, r4, #8
   1e908:	and	r4, r4, #1020	; 0x3fc
   1e90c:	ldr	r8, [ip, r4]
   1e910:	add	r8, r5, r8
   1e914:	str	r8, [r1, #-16]
   1e918:	eor	r3, r3, r3, lsr #6
   1e91c:	ldr	r4, [lr, #500]	; 0x1f4
   1e920:	add	r3, r3, r4
   1e924:	ldr	r4, [lr, #-12]
   1e928:	and	r5, r4, #1020	; 0x3fc
   1e92c:	ldr	r5, [ip, r5]
   1e930:	add	r5, r3, r5
   1e934:	add	r5, r5, r8
   1e938:	str	r5, [lr, #-12]
   1e93c:	lsr	r5, r5, #8
   1e940:	and	r5, r5, #1020	; 0x3fc
   1e944:	ldr	r8, [ip, r5]
   1e948:	add	r8, r4, r8
   1e94c:	str	r8, [r1, #-12]
   1e950:	eor	r3, r3, r3, lsl #2
   1e954:	ldr	r4, [lr, #504]	; 0x1f8
   1e958:	add	r3, r3, r4
   1e95c:	ldr	r5, [lr, #-8]
   1e960:	and	r4, r5, #1020	; 0x3fc
   1e964:	ldr	r4, [ip, r4]
   1e968:	add	r4, r3, r4
   1e96c:	add	r4, r4, r8
   1e970:	str	r4, [lr, #-8]
   1e974:	lsr	r4, r4, #8
   1e978:	and	r4, r4, #1020	; 0x3fc
   1e97c:	ldr	r8, [ip, r4]
   1e980:	add	r8, r5, r8
   1e984:	str	r8, [r1, #-8]
   1e988:	eor	r3, r3, r3, lsr #16
   1e98c:	ldr	r4, [lr, #508]	; 0x1fc
   1e990:	add	r3, r3, r4
   1e994:	ldr	r4, [lr, #-4]
   1e998:	and	r5, r4, #1020	; 0x3fc
   1e99c:	ldr	r5, [ip, r5]
   1e9a0:	add	r5, r3, r5
   1e9a4:	add	r5, r5, r8
   1e9a8:	str	r5, [lr, #-4]
   1e9ac:	lsr	r5, r5, #8
   1e9b0:	and	r5, r5, #1020	; 0x3fc
   1e9b4:	ldr	r5, [ip, r5]
   1e9b8:	add	r4, r4, r5
   1e9bc:	str	r4, [r1, #-4]
   1e9c0:	add	r1, r1, #16
   1e9c4:	add	lr, lr, #16
   1e9c8:	cmp	r2, r7
   1e9cc:	bcc	1e8dc <__assert_fail@plt+0xc994>
   1e9d0:	mov	lr, r1
   1e9d4:	add	r2, r2, #16
   1e9d8:	add	r6, r0, #1024	; 0x400
   1e9dc:	eor	r3, r3, r3, lsl #13
   1e9e0:	mov	r5, r2
   1e9e4:	ldr	r1, [r2, #-528]	; 0xfffffdf0
   1e9e8:	add	r3, r3, r1
   1e9ec:	ldr	r1, [r2, #-16]
   1e9f0:	and	r7, r1, #1020	; 0x3fc
   1e9f4:	ldr	r7, [ip, r7]
   1e9f8:	add	r7, r3, r7
   1e9fc:	add	r4, r7, r4
   1ea00:	str	r4, [r2, #-16]
   1ea04:	lsr	r4, r4, #8
   1ea08:	and	r4, r4, #1020	; 0x3fc
   1ea0c:	ldr	r7, [ip, r4]
   1ea10:	add	r7, r1, r7
   1ea14:	str	r7, [lr, #-16]
   1ea18:	eor	r3, r3, r3, lsr #6
   1ea1c:	ldr	r1, [r2, #-524]	; 0xfffffdf4
   1ea20:	add	r3, r3, r1
   1ea24:	ldr	r4, [r2, #-12]
   1ea28:	and	r1, r4, #1020	; 0x3fc
   1ea2c:	ldr	r1, [ip, r1]
   1ea30:	add	r1, r3, r1
   1ea34:	add	r1, r1, r7
   1ea38:	str	r1, [r2, #-12]
   1ea3c:	lsr	r1, r1, #8
   1ea40:	and	r1, r1, #1020	; 0x3fc
   1ea44:	ldr	r8, [ip, r1]
   1ea48:	add	r8, r4, r8
   1ea4c:	str	r8, [lr, #-12]
   1ea50:	eor	r3, r3, r3, lsl #2
   1ea54:	ldr	r1, [r2, #-520]	; 0xfffffdf8
   1ea58:	add	r3, r3, r1
   1ea5c:	ldr	r1, [r2, #-8]
   1ea60:	and	r4, r1, #1020	; 0x3fc
   1ea64:	ldr	r4, [ip, r4]
   1ea68:	add	r4, r3, r4
   1ea6c:	add	r4, r4, r8
   1ea70:	str	r4, [r2, #-8]
   1ea74:	lsr	r4, r4, #8
   1ea78:	and	r4, r4, #1020	; 0x3fc
   1ea7c:	ldr	r7, [ip, r4]
   1ea80:	add	r7, r1, r7
   1ea84:	str	r7, [lr, #-8]
   1ea88:	eor	r3, r3, r3, lsr #16
   1ea8c:	ldr	r1, [r2, #-516]	; 0xfffffdfc
   1ea90:	add	r3, r3, r1
   1ea94:	ldr	r4, [r2, #-4]
   1ea98:	and	r1, r4, #1020	; 0x3fc
   1ea9c:	ldr	r1, [ip, r1]
   1eaa0:	add	r1, r3, r1
   1eaa4:	add	r1, r1, r7
   1eaa8:	str	r1, [r2, #-4]
   1eaac:	lsr	r1, r1, #8
   1eab0:	and	r1, r1, #1020	; 0x3fc
   1eab4:	ldr	r1, [ip, r1]
   1eab8:	add	r4, r4, r1
   1eabc:	str	r4, [lr, #-4]
   1eac0:	add	lr, lr, #16
   1eac4:	cmp	r2, r6
   1eac8:	add	r2, r2, #16
   1eacc:	bcc	1e9dc <__assert_fail@plt+0xca94>
   1ead0:	str	r3, [r0, #1024]	; 0x400
   1ead4:	str	r4, [r0, #1028]	; 0x404
   1ead8:	pop	{r4, r5, r6, r7, r8, pc}
   1eadc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eae0:	mov	r1, r0
   1eae4:	add	r9, r0, #1024	; 0x400
   1eae8:	mov	r2, r0
   1eaec:	ldr	r6, [pc, #452]	; 1ecb8 <__assert_fail@plt+0xcd70>
   1eaf0:	ldr	r5, [pc, #452]	; 1ecbc <__assert_fail@plt+0xcd74>
   1eaf4:	ldr	r4, [pc, #452]	; 1ecc0 <__assert_fail@plt+0xcd78>
   1eaf8:	ldr	lr, [pc, #452]	; 1ecc4 <__assert_fail@plt+0xcd7c>
   1eafc:	ldr	ip, [pc, #452]	; 1ecc8 <__assert_fail@plt+0xcd80>
   1eb00:	ldr	r8, [pc, #452]	; 1eccc <__assert_fail@plt+0xcd84>
   1eb04:	ldr	r7, [pc, #452]	; 1ecd0 <__assert_fail@plt+0xcd88>
   1eb08:	ldr	r3, [pc, #452]	; 1ecd4 <__assert_fail@plt+0xcd8c>
   1eb0c:	ldr	sl, [r2]
   1eb10:	add	r3, r3, sl
   1eb14:	ldr	sl, [r2, #4]
   1eb18:	add	r7, r7, sl
   1eb1c:	ldr	sl, [r2, #8]
   1eb20:	add	r8, r8, sl
   1eb24:	eor	r3, r3, r7, lsl #11
   1eb28:	ldr	sl, [r2, #12]
   1eb2c:	add	sl, r3, sl
   1eb30:	add	ip, sl, ip
   1eb34:	add	r7, r7, r8
   1eb38:	eor	r7, r7, r8, lsr #2
   1eb3c:	ldr	sl, [r2, #16]
   1eb40:	add	sl, r7, sl
   1eb44:	add	lr, sl, lr
   1eb48:	add	r8, r8, ip
   1eb4c:	eor	r8, r8, ip, lsl #8
   1eb50:	ldr	sl, [r2, #20]
   1eb54:	add	sl, r8, sl
   1eb58:	add	r4, sl, r4
   1eb5c:	add	ip, ip, lr
   1eb60:	eor	ip, ip, lr, lsr #16
   1eb64:	ldr	sl, [r2, #24]
   1eb68:	add	sl, ip, sl
   1eb6c:	add	r5, sl, r5
   1eb70:	add	lr, lr, r4
   1eb74:	eor	lr, lr, r4, lsl #10
   1eb78:	ldr	sl, [r2, #28]
   1eb7c:	add	sl, lr, sl
   1eb80:	add	r6, sl, r6
   1eb84:	add	r4, r4, r5
   1eb88:	eor	r4, r4, r5, lsr #4
   1eb8c:	add	r3, r3, r4
   1eb90:	add	r5, r5, r6
   1eb94:	eor	r5, r5, r6, lsl #8
   1eb98:	add	r7, r7, r5
   1eb9c:	add	r6, r6, r3
   1eba0:	eor	r6, r6, r3, lsr #9
   1eba4:	add	r8, r8, r6
   1eba8:	add	r3, r3, r7
   1ebac:	str	r3, [r2]
   1ebb0:	str	r7, [r2, #4]
   1ebb4:	str	r8, [r2, #8]
   1ebb8:	str	ip, [r2, #12]
   1ebbc:	str	lr, [r2, #16]
   1ebc0:	str	r4, [r2, #20]
   1ebc4:	str	r5, [r2, #24]
   1ebc8:	str	r6, [r2, #28]
   1ebcc:	add	r2, r2, #32
   1ebd0:	cmp	r2, r9
   1ebd4:	bne	1eb0c <__assert_fail@plt+0xcbc4>
   1ebd8:	ldr	r9, [r1]
   1ebdc:	add	r3, r3, r9
   1ebe0:	ldr	r9, [r1, #4]
   1ebe4:	add	r7, r7, r9
   1ebe8:	ldr	r9, [r1, #8]
   1ebec:	add	r8, r8, r9
   1ebf0:	eor	r3, r3, r7, lsl #11
   1ebf4:	ldr	r9, [r1, #12]
   1ebf8:	add	r9, r3, r9
   1ebfc:	add	ip, r9, ip
   1ec00:	add	r7, r7, r8
   1ec04:	eor	r7, r7, r8, lsr #2
   1ec08:	ldr	r9, [r1, #16]
   1ec0c:	add	r9, r7, r9
   1ec10:	add	lr, r9, lr
   1ec14:	add	r8, r8, ip
   1ec18:	eor	r8, r8, ip, lsl #8
   1ec1c:	ldr	r9, [r1, #20]
   1ec20:	add	r9, r8, r9
   1ec24:	add	r4, r9, r4
   1ec28:	add	ip, ip, lr
   1ec2c:	eor	ip, ip, lr, lsr #16
   1ec30:	ldr	r9, [r1, #24]
   1ec34:	add	r9, ip, r9
   1ec38:	add	r5, r9, r5
   1ec3c:	add	lr, lr, r4
   1ec40:	eor	lr, lr, r4, lsl #10
   1ec44:	ldr	r9, [r1, #28]
   1ec48:	add	r9, lr, r9
   1ec4c:	add	r6, r9, r6
   1ec50:	add	r4, r4, r5
   1ec54:	eor	r4, r4, r5, lsr #4
   1ec58:	add	r3, r3, r4
   1ec5c:	add	r5, r5, r6
   1ec60:	eor	r5, r5, r6, lsl #8
   1ec64:	add	r7, r7, r5
   1ec68:	add	r6, r6, r3
   1ec6c:	eor	r6, r6, r3, lsr #9
   1ec70:	add	r8, r8, r6
   1ec74:	add	r3, r3, r7
   1ec78:	str	r3, [r1]
   1ec7c:	str	r7, [r1, #4]
   1ec80:	str	r8, [r1, #8]
   1ec84:	str	ip, [r1, #12]
   1ec88:	str	lr, [r1, #16]
   1ec8c:	str	r4, [r1, #20]
   1ec90:	str	r5, [r1, #24]
   1ec94:	str	r6, [r1, #28]
   1ec98:	add	r1, r1, #32
   1ec9c:	cmp	r2, r1
   1eca0:	bne	1ebd8 <__assert_fail@plt+0xcc90>
   1eca4:	mov	r3, #0
   1eca8:	str	r3, [r0, #1032]	; 0x408
   1ecac:	str	r3, [r0, #1028]	; 0x404
   1ecb0:	str	r3, [r0, #1024]	; 0x400
   1ecb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ecb8:	rsbcc	r9, r0, r9, lsl r1
   1ecbc:	strbtgt	lr, [pc], #2587	; 1ecc4 <__assert_fail@plt+0xcd7c>
   1ecc0:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   1ecc4:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   1ecc8:	svceq	0x00421ad8
   1eccc:	tstgt	r6, #1200	; 0x4b0
   1ecd0:	ldrbls	r0, [r9, #89]	; 0x59
   1ecd4:	cmnne	r7, #360	; 0x168
   1ecd8:	push	{r4, r5, r6, lr}
   1ecdc:	mov	r4, r0
   1ece0:	ldr	r3, [r0, #24]
   1ece4:	ldr	r6, [r0, #20]
   1ece8:	sub	r5, r3, r6
   1ecec:	sub	r5, r5, #1
   1ecf0:	cmp	r3, r6
   1ecf4:	ldrbeq	r2, [r0, #52]	; 0x34
   1ecf8:	orreq	r2, r2, #2
   1ecfc:	strbeq	r2, [r0, #52]	; 0x34
   1ed00:	ldr	r2, [r0, #36]	; 0x24
   1ed04:	add	r3, r3, r2
   1ed08:	bic	r3, r3, r2
   1ed0c:	str	r3, [r0, #24]
   1ed10:	ldr	r2, [r0, #16]
   1ed14:	ldr	r1, [r0, #28]
   1ed18:	sub	r3, r3, r2
   1ed1c:	sub	r2, r1, r2
   1ed20:	cmp	r3, r2
   1ed24:	strhi	r1, [r0, #24]
   1ed28:	ldr	r3, [r0, #24]
   1ed2c:	str	r3, [r0, #20]
   1ed30:	ldr	r3, [r0, #72]	; 0x48
   1ed34:	ldr	r2, [r0, #68]	; 0x44
   1ed38:	sub	r3, r3, r2
   1ed3c:	cmp	r3, #3
   1ed40:	bls	1ed90 <__assert_fail@plt+0xce48>
   1ed44:	ldr	r3, [r4, #68]	; 0x44
   1ed48:	str	r6, [r3]
   1ed4c:	ldr	r3, [r4, #68]	; 0x44
   1ed50:	add	r3, r3, #4
   1ed54:	str	r3, [r4, #68]	; 0x44
   1ed58:	ldr	r3, [r4, #116]	; 0x74
   1ed5c:	ldr	r2, [r4, #112]	; 0x70
   1ed60:	sub	r3, r3, r2
   1ed64:	cmp	r3, #3
   1ed68:	bls	1eda0 <__assert_fail@plt+0xce58>
   1ed6c:	ldr	r3, [r4, #112]	; 0x70
   1ed70:	str	r5, [r3]
   1ed74:	ldr	r3, [r4, #112]	; 0x70
   1ed78:	add	r3, r3, #4
   1ed7c:	str	r3, [r4, #112]	; 0x70
   1ed80:	ldr	r3, [r4]
   1ed84:	add	r3, r3, #1
   1ed88:	str	r3, [r4]
   1ed8c:	pop	{r4, r5, r6, pc}
   1ed90:	mov	r1, #4
   1ed94:	add	r0, r0, #56	; 0x38
   1ed98:	bl	2131c <_obstack_newchunk@@Base>
   1ed9c:	b	1ed44 <__assert_fail@plt+0xcdfc>
   1eda0:	mov	r1, #4
   1eda4:	add	r0, r4, #100	; 0x64
   1eda8:	bl	2131c <_obstack_newchunk@@Base>
   1edac:	b	1ed6c <__assert_fail@plt+0xce24>
   1edb0:	push	{r4, r5, r6, r7, lr}
   1edb4:	sub	sp, sp, #12
   1edb8:	mov	r5, r0
   1edbc:	mov	r4, #0
   1edc0:	str	r4, [r0]
   1edc4:	str	r4, [r0, #4]
   1edc8:	str	r4, [r0, #8]
   1edcc:	ldr	r6, [pc, #80]	; 1ee24 <__assert_fail@plt+0xcedc>
   1edd0:	ldr	r7, [pc, #80]	; 1ee28 <__assert_fail@plt+0xcee0>
   1edd4:	str	r7, [sp]
   1edd8:	mov	r3, r6
   1eddc:	mov	r2, r4
   1ede0:	mov	r1, r4
   1ede4:	add	r0, r0, #12
   1ede8:	bl	212cc <_obstack_begin@@Base>
   1edec:	str	r7, [sp]
   1edf0:	mov	r3, r6
   1edf4:	mov	r2, r4
   1edf8:	mov	r1, r4
   1edfc:	add	r0, r5, #56	; 0x38
   1ee00:	bl	212cc <_obstack_begin@@Base>
   1ee04:	str	r7, [sp]
   1ee08:	mov	r3, r6
   1ee0c:	mov	r2, r4
   1ee10:	mov	r1, r4
   1ee14:	add	r0, r5, #100	; 0x64
   1ee18:	bl	212cc <_obstack_begin@@Base>
   1ee1c:	add	sp, sp, #12
   1ee20:	pop	{r4, r5, r6, r7, pc}
   1ee24:	andeq	r0, r2, r4, ror #20
   1ee28:	ldrdeq	sl, [r1], -r4
   1ee2c:	push	{r4, lr}
   1ee30:	mov	r4, r0
   1ee34:	mov	r1, #0
   1ee38:	add	r0, r0, #12
   1ee3c:	bl	21468 <_obstack_free@@Base>
   1ee40:	mov	r1, #0
   1ee44:	add	r0, r4, #56	; 0x38
   1ee48:	bl	21468 <_obstack_free@@Base>
   1ee4c:	mov	r1, #0
   1ee50:	add	r0, r4, #100	; 0x64
   1ee54:	bl	21468 <_obstack_free@@Base>
   1ee58:	pop	{r4, pc}
   1ee5c:	push	{r4, r5, r6, r7, r8, lr}
   1ee60:	mov	r6, r0
   1ee64:	mov	r4, r1
   1ee68:	add	r8, r1, #12
   1ee6c:	mov	r7, #1
   1ee70:	b	1efa8 <__assert_fail@plt+0xd060>
   1ee74:	ldr	r3, [r4, #24]
   1ee78:	ldr	r2, [r4, #20]
   1ee7c:	cmp	r2, r3
   1ee80:	beq	1eeac <__assert_fail@plt+0xcf64>
   1ee84:	ldr	r2, [r4, #28]
   1ee88:	cmp	r2, r3
   1ee8c:	beq	1ef80 <__assert_fail@plt+0xd038>
   1ee90:	ldr	r3, [r4, #24]
   1ee94:	add	r2, r3, #1
   1ee98:	str	r2, [r4, #24]
   1ee9c:	mov	r2, #0
   1eea0:	strb	r2, [r3]
   1eea4:	mov	r0, r4
   1eea8:	bl	1ecd8 <__assert_fail@plt+0xcd90>
   1eeac:	ldr	r3, [r4, #72]	; 0x48
   1eeb0:	ldr	r2, [r4, #68]	; 0x44
   1eeb4:	sub	r3, r3, r2
   1eeb8:	cmp	r3, #3
   1eebc:	bls	1efe8 <__assert_fail@plt+0xd0a0>
   1eec0:	ldr	r3, [r4, #68]	; 0x44
   1eec4:	mov	r2, #0
   1eec8:	str	r2, [r3]
   1eecc:	ldr	r3, [r4, #68]	; 0x44
   1eed0:	add	r3, r3, #4
   1eed4:	str	r3, [r4, #68]	; 0x44
   1eed8:	ldr	r1, [r4, #64]	; 0x40
   1eedc:	cmp	r3, r1
   1eee0:	ldrbeq	r2, [r4, #96]	; 0x60
   1eee4:	orreq	r2, r2, #2
   1eee8:	strbeq	r2, [r4, #96]	; 0x60
   1eeec:	ldr	r2, [r4, #80]	; 0x50
   1eef0:	add	r3, r3, r2
   1eef4:	bic	r3, r3, r2
   1eef8:	str	r3, [r4, #68]	; 0x44
   1eefc:	ldr	r2, [r4, #60]	; 0x3c
   1ef00:	ldr	r0, [r4, #72]	; 0x48
   1ef04:	sub	r3, r3, r2
   1ef08:	sub	r2, r0, r2
   1ef0c:	cmp	r3, r2
   1ef10:	strhi	r0, [r4, #68]	; 0x44
   1ef14:	ldr	r3, [r4, #68]	; 0x44
   1ef18:	str	r3, [r4, #64]	; 0x40
   1ef1c:	str	r1, [r4, #4]
   1ef20:	ldr	r1, [r4, #108]	; 0x6c
   1ef24:	ldr	r3, [r4, #112]	; 0x70
   1ef28:	cmp	r1, r3
   1ef2c:	ldrbeq	r2, [r4, #140]	; 0x8c
   1ef30:	orreq	r2, r2, #2
   1ef34:	strbeq	r2, [r4, #140]	; 0x8c
   1ef38:	ldr	r2, [r4, #124]	; 0x7c
   1ef3c:	add	r3, r3, r2
   1ef40:	bic	r3, r3, r2
   1ef44:	str	r3, [r4, #112]	; 0x70
   1ef48:	ldr	r2, [r4, #104]	; 0x68
   1ef4c:	ldr	r0, [r4, #116]	; 0x74
   1ef50:	sub	r3, r3, r2
   1ef54:	sub	r2, r0, r2
   1ef58:	cmp	r3, r2
   1ef5c:	strhi	r0, [r4, #112]	; 0x70
   1ef60:	ldr	r3, [r4, #112]	; 0x70
   1ef64:	str	r3, [r4, #108]	; 0x6c
   1ef68:	str	r1, [r4, #8]
   1ef6c:	mov	r0, r6
   1ef70:	bl	11ab0 <ferror@plt>
   1ef74:	clz	r0, r0
   1ef78:	lsr	r0, r0, #5
   1ef7c:	pop	{r4, r5, r6, r7, r8, pc}
   1ef80:	mov	r1, #1
   1ef84:	add	r0, r4, #12
   1ef88:	bl	2131c <_obstack_newchunk@@Base>
   1ef8c:	b	1ee90 <__assert_fail@plt+0xcf48>
   1ef90:	ldr	r3, [r4, #24]
   1ef94:	add	r2, r3, #1
   1ef98:	str	r2, [r4, #24]
   1ef9c:	strb	r5, [r3]
   1efa0:	cmp	r5, #0
   1efa4:	beq	1efdc <__assert_fail@plt+0xd094>
   1efa8:	mov	r0, r6
   1efac:	bl	11da4 <fgetc@plt>
   1efb0:	mov	r5, r0
   1efb4:	cmn	r0, #1
   1efb8:	beq	1ee74 <__assert_fail@plt+0xcf2c>
   1efbc:	ldr	r2, [r4, #28]
   1efc0:	ldr	r3, [r4, #24]
   1efc4:	cmp	r2, r3
   1efc8:	bne	1ef90 <__assert_fail@plt+0xd048>
   1efcc:	mov	r1, r7
   1efd0:	mov	r0, r8
   1efd4:	bl	2131c <_obstack_newchunk@@Base>
   1efd8:	b	1ef90 <__assert_fail@plt+0xd048>
   1efdc:	mov	r0, r4
   1efe0:	bl	1ecd8 <__assert_fail@plt+0xcd90>
   1efe4:	b	1efa8 <__assert_fail@plt+0xd060>
   1efe8:	mov	r1, #4
   1efec:	add	r0, r4, #56	; 0x38
   1eff0:	bl	2131c <_obstack_newchunk@@Base>
   1eff4:	b	1eec0 <__assert_fail@plt+0xcf78>
   1eff8:	push	{r4, r5, r6, lr}
   1effc:	mov	r6, r1
   1f000:	mov	r4, r2
   1f004:	mov	r1, #0
   1f008:	bl	11e28 <setlocale@plt>
   1f00c:	subs	r5, r0, #0
   1f010:	beq	1f034 <__assert_fail@plt+0xd0ec>
   1f014:	mov	r0, r5
   1f018:	bl	11d50 <strlen@plt>
   1f01c:	cmp	r4, r0
   1f020:	bhi	1f04c <__assert_fail@plt+0xd104>
   1f024:	cmp	r4, #0
   1f028:	bne	1f064 <__assert_fail@plt+0xd11c>
   1f02c:	mov	r0, #34	; 0x22
   1f030:	pop	{r4, r5, r6, pc}
   1f034:	cmp	r4, #0
   1f038:	beq	1f088 <__assert_fail@plt+0xd140>
   1f03c:	mov	r3, #0
   1f040:	strb	r3, [r6]
   1f044:	mov	r0, #22
   1f048:	pop	{r4, r5, r6, pc}
   1f04c:	add	r2, r0, #1
   1f050:	mov	r1, r5
   1f054:	mov	r0, r6
   1f058:	bl	11ac8 <memcpy@plt>
   1f05c:	mov	r0, #0
   1f060:	pop	{r4, r5, r6, pc}
   1f064:	sub	r4, r4, #1
   1f068:	mov	r2, r4
   1f06c:	mov	r1, r5
   1f070:	mov	r0, r6
   1f074:	bl	11ac8 <memcpy@plt>
   1f078:	mov	r3, #0
   1f07c:	strb	r3, [r6, r4]
   1f080:	mov	r0, #34	; 0x22
   1f084:	pop	{r4, r5, r6, pc}
   1f088:	mov	r0, #22
   1f08c:	pop	{r4, r5, r6, pc}
   1f090:	push	{r4, lr}
   1f094:	mov	r1, #0
   1f098:	bl	11e28 <setlocale@plt>
   1f09c:	pop	{r4, pc}
   1f0a0:	push	{r4, lr}
   1f0a4:	bl	11cc0 <mkstemp64@plt>
   1f0a8:	bl	1f64c <__assert_fail@plt+0xd704>
   1f0ac:	pop	{r4, pc}
   1f0b0:	push	{r4, lr}
   1f0b4:	mov	r4, r1
   1f0b8:	bl	11c0c <mkostemp64@plt>
   1f0bc:	mov	r1, r4
   1f0c0:	bl	20e9c <__assert_fail@plt+0xef54>
   1f0c4:	pop	{r4, pc}
   1f0c8:	push	{r4, r5, lr}
   1f0cc:	ldrb	ip, [r0]
   1f0d0:	ldrb	lr, [r1]
   1f0d4:	cmp	ip, #45	; 0x2d
   1f0d8:	beq	1f118 <__assert_fail@plt+0xd1d0>
   1f0dc:	cmp	lr, #45	; 0x2d
   1f0e0:	bne	1f3ec <__assert_fail@plt+0xd4a4>
   1f0e4:	ldrb	lr, [r1, #1]!
   1f0e8:	cmp	lr, #48	; 0x30
   1f0ec:	beq	1f0e4 <__assert_fail@plt+0xd19c>
   1f0f0:	mov	r4, lr
   1f0f4:	cmp	r3, lr
   1f0f8:	beq	1f0e4 <__assert_fail@plt+0xd19c>
   1f0fc:	cmp	r2, lr
   1f100:	beq	1f398 <__assert_fail@plt+0xd450>
   1f104:	sub	lr, lr, #48	; 0x30
   1f108:	cmp	lr, #9
   1f10c:	bhi	1f3ac <__assert_fail@plt+0xd464>
   1f110:	mov	r4, #1
   1f114:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f118:	ldrb	ip, [r0, #1]!
   1f11c:	cmp	ip, #48	; 0x30
   1f120:	beq	1f118 <__assert_fail@plt+0xd1d0>
   1f124:	mov	r4, ip
   1f128:	cmp	r3, ip
   1f12c:	beq	1f118 <__assert_fail@plt+0xd1d0>
   1f130:	cmp	lr, #45	; 0x2d
   1f134:	beq	1f1a4 <__assert_fail@plt+0xd25c>
   1f138:	cmp	r2, ip
   1f13c:	beq	1f154 <__assert_fail@plt+0xd20c>
   1f140:	sub	ip, ip, #48	; 0x30
   1f144:	cmp	ip, #9
   1f148:	bhi	1f168 <__assert_fail@plt+0xd220>
   1f14c:	mvn	r4, #0
   1f150:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f154:	ldrb	ip, [r0, #1]!
   1f158:	cmp	ip, #48	; 0x30
   1f15c:	beq	1f154 <__assert_fail@plt+0xd20c>
   1f160:	b	1f140 <__assert_fail@plt+0xd1f8>
   1f164:	ldrb	lr, [r1, #1]!
   1f168:	cmp	lr, #48	; 0x30
   1f16c:	beq	1f164 <__assert_fail@plt+0xd21c>
   1f170:	cmp	r3, lr
   1f174:	beq	1f164 <__assert_fail@plt+0xd21c>
   1f178:	cmp	r2, lr
   1f17c:	beq	1f194 <__assert_fail@plt+0xd24c>
   1f180:	sub	lr, lr, #48	; 0x30
   1f184:	cmp	lr, #9
   1f188:	movhi	r4, #0
   1f18c:	mvnls	r4, #0
   1f190:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f194:	ldrb	lr, [r1, #1]!
   1f198:	cmp	lr, #48	; 0x30
   1f19c:	beq	1f194 <__assert_fail@plt+0xd24c>
   1f1a0:	b	1f180 <__assert_fail@plt+0xd238>
   1f1a4:	ldrb	lr, [r1, #1]!
   1f1a8:	cmp	lr, #48	; 0x30
   1f1ac:	beq	1f1a4 <__assert_fail@plt+0xd25c>
   1f1b0:	cmp	r3, lr
   1f1b4:	beq	1f1a4 <__assert_fail@plt+0xd25c>
   1f1b8:	cmp	ip, lr
   1f1bc:	bne	1f204 <__assert_fail@plt+0xd2bc>
   1f1c0:	sub	r4, ip, #48	; 0x30
   1f1c4:	cmp	r4, #9
   1f1c8:	bhi	1f63c <__assert_fail@plt+0xd6f4>
   1f1cc:	ldrb	ip, [r0, #1]!
   1f1d0:	cmp	r3, ip
   1f1d4:	beq	1f1cc <__assert_fail@plt+0xd284>
   1f1d8:	ldrb	lr, [r1, #1]!
   1f1dc:	cmp	r3, lr
   1f1e0:	beq	1f1d8 <__assert_fail@plt+0xd290>
   1f1e4:	cmp	ip, lr
   1f1e8:	bne	1f204 <__assert_fail@plt+0xd2bc>
   1f1ec:	sub	r4, ip, #48	; 0x30
   1f1f0:	cmp	r4, #9
   1f1f4:	bls	1f1cc <__assert_fail@plt+0xd284>
   1f1f8:	mov	r4, ip
   1f1fc:	mov	ip, lr
   1f200:	mov	lr, r4
   1f204:	mov	r4, ip
   1f208:	cmp	r2, ip
   1f20c:	beq	1f288 <__assert_fail@plt+0xd340>
   1f210:	cmp	r2, lr
   1f214:	beq	1f2bc <__assert_fail@plt+0xd374>
   1f218:	sub	r4, lr, r4
   1f21c:	sub	ip, ip, #48	; 0x30
   1f220:	cmp	ip, #9
   1f224:	bhi	1f384 <__assert_fail@plt+0xd43c>
   1f228:	mov	ip, #0
   1f22c:	ldrb	r2, [r0, #1]!
   1f230:	cmp	r3, r2
   1f234:	beq	1f22c <__assert_fail@plt+0xd2e4>
   1f238:	add	ip, ip, #1
   1f23c:	sub	r2, r2, #48	; 0x30
   1f240:	cmp	r2, #9
   1f244:	bls	1f22c <__assert_fail@plt+0xd2e4>
   1f248:	sub	lr, lr, #48	; 0x30
   1f24c:	cmp	lr, #9
   1f250:	bhi	1f614 <__assert_fail@plt+0xd6cc>
   1f254:	mov	r0, #0
   1f258:	ldrb	r2, [r1, #1]!
   1f25c:	cmp	r3, r2
   1f260:	beq	1f258 <__assert_fail@plt+0xd310>
   1f264:	add	r0, r0, #1
   1f268:	sub	r2, r2, #48	; 0x30
   1f26c:	cmp	r2, #9
   1f270:	bls	1f258 <__assert_fail@plt+0xd310>
   1f274:	cmp	r0, ip
   1f278:	beq	1f38c <__assert_fail@plt+0xd444>
   1f27c:	movhi	r4, #1
   1f280:	mvnls	r4, #0
   1f284:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f288:	sub	r5, lr, #48	; 0x30
   1f28c:	cmp	r5, #9
   1f290:	bls	1f210 <__assert_fail@plt+0xd2c8>
   1f294:	uxtb	r2, r2
   1f298:	ldrb	r3, [r1]
   1f29c:	cmp	r3, r2
   1f2a0:	beq	1f2d0 <__assert_fail@plt+0xd388>
   1f2a4:	ldrb	r3, [r0]
   1f2a8:	cmp	r3, r2
   1f2ac:	addeq	r0, r0, #1
   1f2b0:	beq	1f358 <__assert_fail@plt+0xd410>
   1f2b4:	mov	r4, #0
   1f2b8:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f2bc:	sub	ip, ip, #48	; 0x30
   1f2c0:	cmp	ip, #9
   1f2c4:	subls	r4, r2, r4
   1f2c8:	bls	1f228 <__assert_fail@plt+0xd2e0>
   1f2cc:	b	1f294 <__assert_fail@plt+0xd34c>
   1f2d0:	ldrb	r3, [r0]
   1f2d4:	cmp	r3, r2
   1f2d8:	addne	r1, r1, #1
   1f2dc:	beq	1f318 <__assert_fail@plt+0xd3d0>
   1f2e0:	ldrb	r3, [r1]
   1f2e4:	cmp	r3, #48	; 0x30
   1f2e8:	bne	1f2f8 <__assert_fail@plt+0xd3b0>
   1f2ec:	ldrb	r3, [r1, #1]!
   1f2f0:	cmp	r3, #48	; 0x30
   1f2f4:	beq	1f2ec <__assert_fail@plt+0xd3a4>
   1f2f8:	sub	r3, r3, #48	; 0x30
   1f2fc:	cmp	r3, #9
   1f300:	movhi	r4, #0
   1f304:	movls	r4, #1
   1f308:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f30c:	sub	r4, r4, #48	; 0x30
   1f310:	cmp	r4, #9
   1f314:	bhi	1f60c <__assert_fail@plt+0xd6c4>
   1f318:	ldrb	r4, [r1, #1]!
   1f31c:	ldrb	r3, [r0, #1]!
   1f320:	cmp	r4, r3
   1f324:	beq	1f30c <__assert_fail@plt+0xd3c4>
   1f328:	sub	r2, r4, #48	; 0x30
   1f32c:	cmp	r2, #9
   1f330:	bhi	1f348 <__assert_fail@plt+0xd400>
   1f334:	sub	r2, r3, #48	; 0x30
   1f338:	cmp	r2, #9
   1f33c:	subls	r4, r4, r3
   1f340:	bhi	1f2e0 <__assert_fail@plt+0xd398>
   1f344:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f348:	sub	r3, r3, #48	; 0x30
   1f34c:	cmp	r3, #9
   1f350:	movhi	r4, #0
   1f354:	bhi	1f4e8 <__assert_fail@plt+0xd5a0>
   1f358:	ldrb	r3, [r0]
   1f35c:	cmp	r3, #48	; 0x30
   1f360:	bne	1f370 <__assert_fail@plt+0xd428>
   1f364:	ldrb	r3, [r0, #1]!
   1f368:	cmp	r3, #48	; 0x30
   1f36c:	beq	1f364 <__assert_fail@plt+0xd41c>
   1f370:	sub	r3, r3, #48	; 0x30
   1f374:	cmp	r3, #9
   1f378:	movhi	r4, #0
   1f37c:	mvnls	r4, #0
   1f380:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f384:	mov	ip, #0
   1f388:	b	1f248 <__assert_fail@plt+0xd300>
   1f38c:	cmp	r0, #0
   1f390:	moveq	r4, #0
   1f394:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f398:	ldrb	lr, [r1, #1]!
   1f39c:	cmp	lr, #48	; 0x30
   1f3a0:	beq	1f398 <__assert_fail@plt+0xd450>
   1f3a4:	b	1f104 <__assert_fail@plt+0xd1bc>
   1f3a8:	ldrb	ip, [r0, #1]!
   1f3ac:	cmp	ip, #48	; 0x30
   1f3b0:	beq	1f3a8 <__assert_fail@plt+0xd460>
   1f3b4:	cmp	r3, ip
   1f3b8:	beq	1f3a8 <__assert_fail@plt+0xd460>
   1f3bc:	cmp	r2, ip
   1f3c0:	beq	1f3d8 <__assert_fail@plt+0xd490>
   1f3c4:	sub	ip, ip, #48	; 0x30
   1f3c8:	cmp	ip, #9
   1f3cc:	movhi	r4, #0
   1f3d0:	movls	r4, #1
   1f3d4:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f3d8:	ldrb	ip, [r0, #1]!
   1f3dc:	cmp	ip, #48	; 0x30
   1f3e0:	beq	1f3d8 <__assert_fail@plt+0xd490>
   1f3e4:	b	1f3c4 <__assert_fail@plt+0xd47c>
   1f3e8:	ldrb	ip, [r0, #1]!
   1f3ec:	cmp	ip, #48	; 0x30
   1f3f0:	beq	1f3e8 <__assert_fail@plt+0xd4a0>
   1f3f4:	mov	r4, ip
   1f3f8:	cmp	r3, ip
   1f3fc:	beq	1f3e8 <__assert_fail@plt+0xd4a0>
   1f400:	b	1f408 <__assert_fail@plt+0xd4c0>
   1f404:	ldrb	lr, [r1, #1]!
   1f408:	cmp	lr, #48	; 0x30
   1f40c:	beq	1f404 <__assert_fail@plt+0xd4bc>
   1f410:	cmp	r3, lr
   1f414:	beq	1f404 <__assert_fail@plt+0xd4bc>
   1f418:	cmp	ip, lr
   1f41c:	bne	1f464 <__assert_fail@plt+0xd51c>
   1f420:	sub	r5, ip, #48	; 0x30
   1f424:	cmp	r5, #9
   1f428:	bhi	1f620 <__assert_fail@plt+0xd6d8>
   1f42c:	ldrb	ip, [r0, #1]!
   1f430:	cmp	r3, ip
   1f434:	beq	1f42c <__assert_fail@plt+0xd4e4>
   1f438:	ldrb	lr, [r1, #1]!
   1f43c:	cmp	r3, lr
   1f440:	beq	1f438 <__assert_fail@plt+0xd4f0>
   1f444:	cmp	ip, lr
   1f448:	bne	1f464 <__assert_fail@plt+0xd51c>
   1f44c:	sub	r5, ip, #48	; 0x30
   1f450:	cmp	r5, #9
   1f454:	bls	1f42c <__assert_fail@plt+0xd4e4>
   1f458:	mov	r4, ip
   1f45c:	mov	ip, lr
   1f460:	mov	lr, r4
   1f464:	mov	r4, ip
   1f468:	cmp	r2, ip
   1f46c:	beq	1f4f0 <__assert_fail@plt+0xd5a8>
   1f470:	mov	r5, lr
   1f474:	cmp	r2, lr
   1f478:	beq	1f504 <__assert_fail@plt+0xd5bc>
   1f47c:	sub	r4, r4, r5
   1f480:	sub	ip, ip, #48	; 0x30
   1f484:	cmp	ip, #9
   1f488:	bhi	1f5f8 <__assert_fail@plt+0xd6b0>
   1f48c:	mov	ip, #0
   1f490:	ldrb	r2, [r0, #1]!
   1f494:	cmp	r3, r2
   1f498:	beq	1f490 <__assert_fail@plt+0xd548>
   1f49c:	add	ip, ip, #1
   1f4a0:	sub	r2, r2, #48	; 0x30
   1f4a4:	cmp	r2, #9
   1f4a8:	bls	1f490 <__assert_fail@plt+0xd548>
   1f4ac:	sub	lr, lr, #48	; 0x30
   1f4b0:	cmp	lr, #9
   1f4b4:	bhi	1f630 <__assert_fail@plt+0xd6e8>
   1f4b8:	mov	r0, #0
   1f4bc:	ldrb	r2, [r1, #1]!
   1f4c0:	cmp	r3, r2
   1f4c4:	beq	1f4bc <__assert_fail@plt+0xd574>
   1f4c8:	add	r0, r0, #1
   1f4cc:	sub	r2, r2, #48	; 0x30
   1f4d0:	cmp	r2, #9
   1f4d4:	bls	1f4bc <__assert_fail@plt+0xd574>
   1f4d8:	cmp	r0, ip
   1f4dc:	beq	1f600 <__assert_fail@plt+0xd6b8>
   1f4e0:	mvnhi	r4, #0
   1f4e4:	movls	r4, #1
   1f4e8:	mov	r0, r4
   1f4ec:	pop	{r4, r5, pc}
   1f4f0:	sub	r4, lr, #48	; 0x30
   1f4f4:	cmp	r4, #9
   1f4f8:	bhi	1f514 <__assert_fail@plt+0xd5cc>
   1f4fc:	mov	r4, r2
   1f500:	b	1f470 <__assert_fail@plt+0xd528>
   1f504:	sub	ip, ip, #48	; 0x30
   1f508:	cmp	ip, #9
   1f50c:	subls	r4, r4, r2
   1f510:	bls	1f48c <__assert_fail@plt+0xd544>
   1f514:	uxtb	r2, r2
   1f518:	ldrb	r3, [r0]
   1f51c:	cmp	r3, r2
   1f520:	beq	1f53c <__assert_fail@plt+0xd5f4>
   1f524:	ldrb	r3, [r1]
   1f528:	cmp	r3, r2
   1f52c:	addeq	r1, r1, #1
   1f530:	beq	1f5cc <__assert_fail@plt+0xd684>
   1f534:	mov	r4, #0
   1f538:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f53c:	ldrb	r3, [r1]
   1f540:	cmp	r3, r2
   1f544:	addne	r0, r0, #1
   1f548:	beq	1f578 <__assert_fail@plt+0xd630>
   1f54c:	ldrb	r3, [r0]
   1f550:	cmp	r3, #48	; 0x30
   1f554:	bne	1f564 <__assert_fail@plt+0xd61c>
   1f558:	ldrb	r3, [r0, #1]!
   1f55c:	cmp	r3, #48	; 0x30
   1f560:	beq	1f558 <__assert_fail@plt+0xd610>
   1f564:	sub	r3, r3, #48	; 0x30
   1f568:	cmp	r3, #9
   1f56c:	movhi	r4, #0
   1f570:	movls	r4, #1
   1f574:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f578:	ldrb	r4, [r0, #1]!
   1f57c:	ldrb	r3, [r1, #1]!
   1f580:	cmp	r4, r3
   1f584:	bne	1f59c <__assert_fail@plt+0xd654>
   1f588:	sub	r4, r4, #48	; 0x30
   1f58c:	cmp	r4, #9
   1f590:	bls	1f578 <__assert_fail@plt+0xd630>
   1f594:	mov	r4, #0
   1f598:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f59c:	sub	r2, r4, #48	; 0x30
   1f5a0:	cmp	r2, #9
   1f5a4:	bhi	1f5bc <__assert_fail@plt+0xd674>
   1f5a8:	sub	r2, r3, #48	; 0x30
   1f5ac:	cmp	r2, #9
   1f5b0:	subls	r4, r4, r3
   1f5b4:	bhi	1f54c <__assert_fail@plt+0xd604>
   1f5b8:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f5bc:	sub	r3, r3, #48	; 0x30
   1f5c0:	cmp	r3, #9
   1f5c4:	movhi	r4, #0
   1f5c8:	bhi	1f4e8 <__assert_fail@plt+0xd5a0>
   1f5cc:	ldrb	r3, [r1]
   1f5d0:	cmp	r3, #48	; 0x30
   1f5d4:	bne	1f5e4 <__assert_fail@plt+0xd69c>
   1f5d8:	ldrb	r3, [r1, #1]!
   1f5dc:	cmp	r3, #48	; 0x30
   1f5e0:	beq	1f5d8 <__assert_fail@plt+0xd690>
   1f5e4:	sub	r3, r3, #48	; 0x30
   1f5e8:	cmp	r3, #9
   1f5ec:	movhi	r4, #0
   1f5f0:	mvnls	r4, #0
   1f5f4:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f5f8:	mov	ip, #0
   1f5fc:	b	1f4ac <__assert_fail@plt+0xd564>
   1f600:	cmp	r0, #0
   1f604:	moveq	r4, #0
   1f608:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f60c:	mov	r4, #0
   1f610:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f614:	adds	r4, ip, #0
   1f618:	mvnne	r4, #0
   1f61c:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f620:	cmp	r2, r4
   1f624:	movne	r5, lr
   1f628:	bne	1f47c <__assert_fail@plt+0xd534>
   1f62c:	b	1f514 <__assert_fail@plt+0xd5cc>
   1f630:	adds	r4, ip, #0
   1f634:	movne	r4, #1
   1f638:	b	1f4e8 <__assert_fail@plt+0xd5a0>
   1f63c:	mov	r4, ip
   1f640:	cmp	r2, ip
   1f644:	bne	1f210 <__assert_fail@plt+0xd2c8>
   1f648:	b	1f294 <__assert_fail@plt+0xd34c>
   1f64c:	push	{r4, r5, r6, r7, r8, lr}
   1f650:	mov	r4, r0
   1f654:	cmp	r0, #2
   1f658:	bls	1f664 <__assert_fail@plt+0xd71c>
   1f65c:	mov	r0, r4
   1f660:	pop	{r4, r5, r6, r7, r8, pc}
   1f664:	bl	21564 <_obstack_memory_used@@Base+0x80>
   1f668:	mov	r6, r0
   1f66c:	bl	11d74 <__errno_location@plt>
   1f670:	mov	r5, r0
   1f674:	ldr	r7, [r0]
   1f678:	mov	r0, r4
   1f67c:	bl	11f30 <close@plt>
   1f680:	str	r7, [r5]
   1f684:	mov	r4, r6
   1f688:	b	1f65c <__assert_fail@plt+0xd714>
   1f68c:	push	{r4, r5, r6, lr}
   1f690:	sub	sp, sp, #32
   1f694:	mov	r4, r0
   1f698:	ldr	r5, [sp, #48]	; 0x30
   1f69c:	ldr	r6, [sp, #52]	; 0x34
   1f6a0:	cmp	r1, #0
   1f6a4:	beq	1f75c <__assert_fail@plt+0xd814>
   1f6a8:	str	r3, [sp, #4]
   1f6ac:	str	r2, [sp]
   1f6b0:	mov	r3, r1
   1f6b4:	ldr	r2, [pc, #940]	; 1fa68 <__assert_fail@plt+0xdb20>
   1f6b8:	mov	r1, #1
   1f6bc:	bl	11dd4 <__fprintf_chk@plt>
   1f6c0:	mov	r2, #5
   1f6c4:	ldr	r1, [pc, #928]	; 1fa6c <__assert_fail@plt+0xdb24>
   1f6c8:	mov	r0, #0
   1f6cc:	bl	11b58 <dcgettext@plt>
   1f6d0:	ldr	r3, [pc, #920]	; 1fa70 <__assert_fail@plt+0xdb28>
   1f6d4:	str	r3, [sp]
   1f6d8:	mov	r3, r0
   1f6dc:	ldr	r2, [pc, #912]	; 1fa74 <__assert_fail@plt+0xdb2c>
   1f6e0:	mov	r1, #1
   1f6e4:	mov	r0, r4
   1f6e8:	bl	11dd4 <__fprintf_chk@plt>
   1f6ec:	mov	r1, r4
   1f6f0:	mov	r0, #10
   1f6f4:	bl	11b4c <fputc_unlocked@plt>
   1f6f8:	mov	r2, #5
   1f6fc:	ldr	r1, [pc, #884]	; 1fa78 <__assert_fail@plt+0xdb30>
   1f700:	mov	r0, #0
   1f704:	bl	11b58 <dcgettext@plt>
   1f708:	ldr	r3, [pc, #876]	; 1fa7c <__assert_fail@plt+0xdb34>
   1f70c:	mov	r2, r0
   1f710:	mov	r1, #1
   1f714:	mov	r0, r4
   1f718:	bl	11dd4 <__fprintf_chk@plt>
   1f71c:	mov	r1, r4
   1f720:	mov	r0, #10
   1f724:	bl	11b4c <fputc_unlocked@plt>
   1f728:	cmp	r6, #9
   1f72c:	ldrls	pc, [pc, r6, lsl #2]
   1f730:	b	1fa00 <__assert_fail@plt+0xdab8>
   1f734:	muleq	r1, r8, r7
   1f738:	andeq	pc, r1, r4, ror r7	; <UNPREDICTABLE>
   1f73c:	andeq	pc, r1, r0, lsr #15
   1f740:	ldrdeq	pc, [r1], -r0
   1f744:	andeq	pc, r1, r8, lsl #16
   1f748:	andeq	pc, r1, r8, asr #16
   1f74c:	muleq	r1, r0, r8
   1f750:	andeq	pc, r1, r0, ror #17
   1f754:	andeq	pc, r1, r8, lsr r9	; <UNPREDICTABLE>
   1f758:	muleq	r1, r8, r9
   1f75c:	str	r3, [sp]
   1f760:	mov	r3, r2
   1f764:	ldr	r2, [pc, #788]	; 1fa80 <__assert_fail@plt+0xdb38>
   1f768:	mov	r1, #1
   1f76c:	bl	11dd4 <__fprintf_chk@plt>
   1f770:	b	1f6c0 <__assert_fail@plt+0xd778>
   1f774:	mov	r2, #5
   1f778:	ldr	r1, [pc, #772]	; 1fa84 <__assert_fail@plt+0xdb3c>
   1f77c:	mov	r0, #0
   1f780:	bl	11b58 <dcgettext@plt>
   1f784:	ldr	r3, [r5]
   1f788:	mov	r2, r0
   1f78c:	mov	r1, #1
   1f790:	mov	r0, r4
   1f794:	bl	11dd4 <__fprintf_chk@plt>
   1f798:	add	sp, sp, #32
   1f79c:	pop	{r4, r5, r6, pc}
   1f7a0:	mov	r2, #5
   1f7a4:	ldr	r1, [pc, #732]	; 1fa88 <__assert_fail@plt+0xdb40>
   1f7a8:	mov	r0, #0
   1f7ac:	bl	11b58 <dcgettext@plt>
   1f7b0:	ldr	r3, [r5]
   1f7b4:	ldr	r2, [r5, #4]
   1f7b8:	str	r2, [sp]
   1f7bc:	mov	r2, r0
   1f7c0:	mov	r1, #1
   1f7c4:	mov	r0, r4
   1f7c8:	bl	11dd4 <__fprintf_chk@plt>
   1f7cc:	b	1f798 <__assert_fail@plt+0xd850>
   1f7d0:	mov	r2, #5
   1f7d4:	ldr	r1, [pc, #688]	; 1fa8c <__assert_fail@plt+0xdb44>
   1f7d8:	mov	r0, #0
   1f7dc:	bl	11b58 <dcgettext@plt>
   1f7e0:	ldr	r3, [r5]
   1f7e4:	ldr	r2, [r5, #8]
   1f7e8:	str	r2, [sp, #4]
   1f7ec:	ldr	r2, [r5, #4]
   1f7f0:	str	r2, [sp]
   1f7f4:	mov	r2, r0
   1f7f8:	mov	r1, #1
   1f7fc:	mov	r0, r4
   1f800:	bl	11dd4 <__fprintf_chk@plt>
   1f804:	b	1f798 <__assert_fail@plt+0xd850>
   1f808:	mov	r2, #5
   1f80c:	ldr	r1, [pc, #636]	; 1fa90 <__assert_fail@plt+0xdb48>
   1f810:	mov	r0, #0
   1f814:	bl	11b58 <dcgettext@plt>
   1f818:	ldr	r3, [r5]
   1f81c:	ldr	r2, [r5, #12]
   1f820:	str	r2, [sp, #8]
   1f824:	ldr	r2, [r5, #8]
   1f828:	str	r2, [sp, #4]
   1f82c:	ldr	r2, [r5, #4]
   1f830:	str	r2, [sp]
   1f834:	mov	r2, r0
   1f838:	mov	r1, #1
   1f83c:	mov	r0, r4
   1f840:	bl	11dd4 <__fprintf_chk@plt>
   1f844:	b	1f798 <__assert_fail@plt+0xd850>
   1f848:	mov	r2, #5
   1f84c:	ldr	r1, [pc, #576]	; 1fa94 <__assert_fail@plt+0xdb4c>
   1f850:	mov	r0, #0
   1f854:	bl	11b58 <dcgettext@plt>
   1f858:	ldr	r3, [r5]
   1f85c:	ldr	r2, [r5, #16]
   1f860:	str	r2, [sp, #12]
   1f864:	ldr	r2, [r5, #12]
   1f868:	str	r2, [sp, #8]
   1f86c:	ldr	r2, [r5, #8]
   1f870:	str	r2, [sp, #4]
   1f874:	ldr	r2, [r5, #4]
   1f878:	str	r2, [sp]
   1f87c:	mov	r2, r0
   1f880:	mov	r1, #1
   1f884:	mov	r0, r4
   1f888:	bl	11dd4 <__fprintf_chk@plt>
   1f88c:	b	1f798 <__assert_fail@plt+0xd850>
   1f890:	mov	r2, #5
   1f894:	ldr	r1, [pc, #508]	; 1fa98 <__assert_fail@plt+0xdb50>
   1f898:	mov	r0, #0
   1f89c:	bl	11b58 <dcgettext@plt>
   1f8a0:	ldr	r3, [r5]
   1f8a4:	ldr	r2, [r5, #20]
   1f8a8:	str	r2, [sp, #16]
   1f8ac:	ldr	r2, [r5, #16]
   1f8b0:	str	r2, [sp, #12]
   1f8b4:	ldr	r2, [r5, #12]
   1f8b8:	str	r2, [sp, #8]
   1f8bc:	ldr	r2, [r5, #8]
   1f8c0:	str	r2, [sp, #4]
   1f8c4:	ldr	r2, [r5, #4]
   1f8c8:	str	r2, [sp]
   1f8cc:	mov	r2, r0
   1f8d0:	mov	r1, #1
   1f8d4:	mov	r0, r4
   1f8d8:	bl	11dd4 <__fprintf_chk@plt>
   1f8dc:	b	1f798 <__assert_fail@plt+0xd850>
   1f8e0:	mov	r2, #5
   1f8e4:	ldr	r1, [pc, #432]	; 1fa9c <__assert_fail@plt+0xdb54>
   1f8e8:	mov	r0, #0
   1f8ec:	bl	11b58 <dcgettext@plt>
   1f8f0:	ldr	r3, [r5]
   1f8f4:	ldr	r2, [r5, #24]
   1f8f8:	str	r2, [sp, #20]
   1f8fc:	ldr	r2, [r5, #20]
   1f900:	str	r2, [sp, #16]
   1f904:	ldr	r2, [r5, #16]
   1f908:	str	r2, [sp, #12]
   1f90c:	ldr	r2, [r5, #12]
   1f910:	str	r2, [sp, #8]
   1f914:	ldr	r2, [r5, #8]
   1f918:	str	r2, [sp, #4]
   1f91c:	ldr	r2, [r5, #4]
   1f920:	str	r2, [sp]
   1f924:	mov	r2, r0
   1f928:	mov	r1, #1
   1f92c:	mov	r0, r4
   1f930:	bl	11dd4 <__fprintf_chk@plt>
   1f934:	b	1f798 <__assert_fail@plt+0xd850>
   1f938:	mov	r2, #5
   1f93c:	ldr	r1, [pc, #348]	; 1faa0 <__assert_fail@plt+0xdb58>
   1f940:	mov	r0, #0
   1f944:	bl	11b58 <dcgettext@plt>
   1f948:	ldr	r3, [r5]
   1f94c:	ldr	r2, [r5, #28]
   1f950:	str	r2, [sp, #24]
   1f954:	ldr	r2, [r5, #24]
   1f958:	str	r2, [sp, #20]
   1f95c:	ldr	r2, [r5, #20]
   1f960:	str	r2, [sp, #16]
   1f964:	ldr	r2, [r5, #16]
   1f968:	str	r2, [sp, #12]
   1f96c:	ldr	r2, [r5, #12]
   1f970:	str	r2, [sp, #8]
   1f974:	ldr	r2, [r5, #8]
   1f978:	str	r2, [sp, #4]
   1f97c:	ldr	r2, [r5, #4]
   1f980:	str	r2, [sp]
   1f984:	mov	r2, r0
   1f988:	mov	r1, #1
   1f98c:	mov	r0, r4
   1f990:	bl	11dd4 <__fprintf_chk@plt>
   1f994:	b	1f798 <__assert_fail@plt+0xd850>
   1f998:	mov	r2, #5
   1f99c:	ldr	r1, [pc, #256]	; 1faa4 <__assert_fail@plt+0xdb5c>
   1f9a0:	mov	r0, #0
   1f9a4:	bl	11b58 <dcgettext@plt>
   1f9a8:	ldr	r3, [r5]
   1f9ac:	ldr	r2, [r5, #32]
   1f9b0:	str	r2, [sp, #28]
   1f9b4:	ldr	r2, [r5, #28]
   1f9b8:	str	r2, [sp, #24]
   1f9bc:	ldr	r2, [r5, #24]
   1f9c0:	str	r2, [sp, #20]
   1f9c4:	ldr	r2, [r5, #20]
   1f9c8:	str	r2, [sp, #16]
   1f9cc:	ldr	r2, [r5, #16]
   1f9d0:	str	r2, [sp, #12]
   1f9d4:	ldr	r2, [r5, #12]
   1f9d8:	str	r2, [sp, #8]
   1f9dc:	ldr	r2, [r5, #8]
   1f9e0:	str	r2, [sp, #4]
   1f9e4:	ldr	r2, [r5, #4]
   1f9e8:	str	r2, [sp]
   1f9ec:	mov	r2, r0
   1f9f0:	mov	r1, #1
   1f9f4:	mov	r0, r4
   1f9f8:	bl	11dd4 <__fprintf_chk@plt>
   1f9fc:	b	1f798 <__assert_fail@plt+0xd850>
   1fa00:	mov	r2, #5
   1fa04:	ldr	r1, [pc, #156]	; 1faa8 <__assert_fail@plt+0xdb60>
   1fa08:	mov	r0, #0
   1fa0c:	bl	11b58 <dcgettext@plt>
   1fa10:	ldr	r3, [r5]
   1fa14:	ldr	r2, [r5, #32]
   1fa18:	str	r2, [sp, #28]
   1fa1c:	ldr	r2, [r5, #28]
   1fa20:	str	r2, [sp, #24]
   1fa24:	ldr	r2, [r5, #24]
   1fa28:	str	r2, [sp, #20]
   1fa2c:	ldr	r2, [r5, #20]
   1fa30:	str	r2, [sp, #16]
   1fa34:	ldr	r2, [r5, #16]
   1fa38:	str	r2, [sp, #12]
   1fa3c:	ldr	r2, [r5, #12]
   1fa40:	str	r2, [sp, #8]
   1fa44:	ldr	r2, [r5, #8]
   1fa48:	str	r2, [sp, #4]
   1fa4c:	ldr	r2, [r5, #4]
   1fa50:	str	r2, [sp]
   1fa54:	mov	r2, r0
   1fa58:	mov	r1, #1
   1fa5c:	mov	r0, r4
   1fa60:	bl	11dd4 <__fprintf_chk@plt>
   1fa64:	b	1f798 <__assert_fail@plt+0xd850>
   1fa68:	andeq	r4, r2, r4, ror #5
   1fa6c:	strdeq	r4, [r2], -r8
   1fa70:	andeq	r0, r0, r6, ror #15
   1fa74:	ldrdeq	r4, [r2], -r0
   1fa78:	strdeq	r4, [r2], -ip
   1fa7c:	andeq	r4, r2, r8, lsr #7
   1fa80:	strdeq	r4, [r2], -r0
   1fa84:	andeq	r4, r2, ip, asr #7
   1fa88:	ldrdeq	r4, [r2], -ip
   1fa8c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1fa90:	andeq	r4, r2, r0, lsl r4
   1fa94:	andeq	r4, r2, r0, lsr r4
   1fa98:	andeq	r4, r2, r4, asr r4
   1fa9c:	andeq	r4, r2, ip, ror r4
   1faa0:	andeq	r4, r2, r8, lsr #9
   1faa4:	ldrdeq	r4, [r2], -r8
   1faa8:	andeq	r4, r2, ip, lsl #10
   1faac:	push	{r4, r5, lr}
   1fab0:	sub	sp, sp, #12
   1fab4:	ldr	r5, [sp, #24]
   1fab8:	ldr	ip, [r5]
   1fabc:	cmp	ip, #0
   1fac0:	beq	1faf0 <__assert_fail@plt+0xdba8>
   1fac4:	mov	lr, r5
   1fac8:	mov	ip, #0
   1facc:	add	ip, ip, #1
   1fad0:	ldr	r4, [lr, #4]!
   1fad4:	cmp	r4, #0
   1fad8:	bne	1facc <__assert_fail@plt+0xdb84>
   1fadc:	str	ip, [sp, #4]
   1fae0:	str	r5, [sp]
   1fae4:	bl	1f68c <__assert_fail@plt+0xd744>
   1fae8:	add	sp, sp, #12
   1faec:	pop	{r4, r5, pc}
   1faf0:	mov	ip, #0
   1faf4:	b	1fadc <__assert_fail@plt+0xdb94>
   1faf8:	push	{r4, r5, lr}
   1fafc:	sub	sp, sp, #52	; 0x34
   1fb00:	ldr	r4, [sp, #64]	; 0x40
   1fb04:	sub	r4, r4, #4
   1fb08:	add	r5, sp, #4
   1fb0c:	mov	ip, #0
   1fb10:	ldr	lr, [r4, #4]!
   1fb14:	str	lr, [r5, #4]!
   1fb18:	cmp	lr, #0
   1fb1c:	beq	1fb2c <__assert_fail@plt+0xdbe4>
   1fb20:	add	ip, ip, #1
   1fb24:	cmp	ip, #10
   1fb28:	bne	1fb10 <__assert_fail@plt+0xdbc8>
   1fb2c:	str	ip, [sp, #4]
   1fb30:	add	ip, sp, #8
   1fb34:	str	ip, [sp]
   1fb38:	bl	1f68c <__assert_fail@plt+0xd744>
   1fb3c:	add	sp, sp, #52	; 0x34
   1fb40:	pop	{r4, r5, pc}
   1fb44:	push	{r3}		; (str r3, [sp, #-4]!)
   1fb48:	push	{lr}		; (str lr, [sp, #-4]!)
   1fb4c:	sub	sp, sp, #16
   1fb50:	add	r3, sp, #24
   1fb54:	str	r3, [sp, #12]
   1fb58:	str	r3, [sp]
   1fb5c:	ldr	r3, [sp, #20]
   1fb60:	bl	1faf8 <__assert_fail@plt+0xdbb0>
   1fb64:	add	sp, sp, #16
   1fb68:	pop	{lr}		; (ldr lr, [sp], #4)
   1fb6c:	add	sp, sp, #4
   1fb70:	bx	lr
   1fb74:	push	{r4, lr}
   1fb78:	ldr	r3, [pc, #112]	; 1fbf0 <__assert_fail@plt+0xdca8>
   1fb7c:	ldr	r1, [r3]
   1fb80:	mov	r0, #10
   1fb84:	bl	11b4c <fputc_unlocked@plt>
   1fb88:	mov	r2, #5
   1fb8c:	ldr	r1, [pc, #96]	; 1fbf4 <__assert_fail@plt+0xdcac>
   1fb90:	mov	r0, #0
   1fb94:	bl	11b58 <dcgettext@plt>
   1fb98:	ldr	r2, [pc, #88]	; 1fbf8 <__assert_fail@plt+0xdcb0>
   1fb9c:	mov	r1, r0
   1fba0:	mov	r0, #1
   1fba4:	bl	11db0 <__printf_chk@plt>
   1fba8:	mov	r2, #5
   1fbac:	ldr	r1, [pc, #72]	; 1fbfc <__assert_fail@plt+0xdcb4>
   1fbb0:	mov	r0, #0
   1fbb4:	bl	11b58 <dcgettext@plt>
   1fbb8:	ldr	r3, [pc, #64]	; 1fc00 <__assert_fail@plt+0xdcb8>
   1fbbc:	ldr	r2, [pc, #64]	; 1fc04 <__assert_fail@plt+0xdcbc>
   1fbc0:	mov	r1, r0
   1fbc4:	mov	r0, #1
   1fbc8:	bl	11db0 <__printf_chk@plt>
   1fbcc:	mov	r2, #5
   1fbd0:	ldr	r1, [pc, #48]	; 1fc08 <__assert_fail@plt+0xdcc0>
   1fbd4:	mov	r0, #0
   1fbd8:	bl	11b58 <dcgettext@plt>
   1fbdc:	ldr	r2, [pc, #40]	; 1fc0c <__assert_fail@plt+0xdcc4>
   1fbe0:	mov	r1, r0
   1fbe4:	mov	r0, #1
   1fbe8:	bl	11db0 <__printf_chk@plt>
   1fbec:	pop	{r4, pc}
   1fbf0:	ldrdeq	r5, [r3], -r4
   1fbf4:	andeq	r4, r2, r8, asr #10
   1fbf8:	andeq	r4, r2, ip, asr r5
   1fbfc:	andeq	r4, r2, r4, ror r5
   1fc00:	andeq	r3, r2, r4, ror #11
   1fc04:	andeq	r3, r2, ip, lsl #12
   1fc08:	andeq	r4, r2, r8, lsl #11
   1fc0c:			; <UNDEFINED> instruction: 0x000245b0
   1fc10:	push	{r4, lr}
   1fc14:	bl	20a64 <__assert_fail@plt+0xeb1c>
   1fc18:	cmp	r0, #0
   1fc1c:	popne	{r4, pc}
   1fc20:	bl	201b4 <__assert_fail@plt+0xe26c>
   1fc24:	push	{r4, lr}
   1fc28:	bl	20a64 <__assert_fail@plt+0xeb1c>
   1fc2c:	cmp	r0, #0
   1fc30:	popne	{r4, pc}
   1fc34:	bl	201b4 <__assert_fail@plt+0xe26c>
   1fc38:	push	{r4, lr}
   1fc3c:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   1fc40:	pop	{r4, pc}
   1fc44:	push	{r4, r5, r6, lr}
   1fc48:	mov	r5, r0
   1fc4c:	mov	r4, r1
   1fc50:	bl	20a94 <__assert_fail@plt+0xeb4c>
   1fc54:	cmp	r0, #0
   1fc58:	popne	{r4, r5, r6, pc}
   1fc5c:	adds	r4, r4, #0
   1fc60:	movne	r4, #1
   1fc64:	cmp	r5, #0
   1fc68:	orreq	r4, r4, #1
   1fc6c:	cmp	r4, #0
   1fc70:	popeq	{r4, r5, r6, pc}
   1fc74:	bl	201b4 <__assert_fail@plt+0xe26c>
   1fc78:	push	{r4, lr}
   1fc7c:	cmp	r1, #0
   1fc80:	orreq	r1, r1, #1
   1fc84:	bl	20a94 <__assert_fail@plt+0xeb4c>
   1fc88:	cmp	r0, #0
   1fc8c:	popne	{r4, pc}
   1fc90:	bl	201b4 <__assert_fail@plt+0xe26c>
   1fc94:	push	{r4, r5, r6, lr}
   1fc98:	mov	r6, r0
   1fc9c:	mov	r5, r1
   1fca0:	mov	r4, r2
   1fca4:	bl	21518 <_obstack_memory_used@@Base+0x34>
   1fca8:	cmp	r0, #0
   1fcac:	popne	{r4, r5, r6, pc}
   1fcb0:	cmp	r6, #0
   1fcb4:	beq	1fcc4 <__assert_fail@plt+0xdd7c>
   1fcb8:	cmp	r5, #0
   1fcbc:	cmpne	r4, #0
   1fcc0:	popeq	{r4, r5, r6, pc}
   1fcc4:	bl	201b4 <__assert_fail@plt+0xe26c>
   1fcc8:	push	{r4, lr}
   1fccc:	bl	1fc94 <__assert_fail@plt+0xdd4c>
   1fcd0:	pop	{r4, pc}
   1fcd4:	push	{r4, lr}
   1fcd8:	mov	ip, r1
   1fcdc:	mov	r3, r2
   1fce0:	cmp	r2, #0
   1fce4:	cmpne	r1, #0
   1fce8:	moveq	r3, #1
   1fcec:	moveq	ip, r3
   1fcf0:	mov	r2, r3
   1fcf4:	mov	r1, ip
   1fcf8:	bl	21518 <_obstack_memory_used@@Base+0x34>
   1fcfc:	cmp	r0, #0
   1fd00:	popne	{r4, pc}
   1fd04:	bl	201b4 <__assert_fail@plt+0xe26c>
   1fd08:	push	{r4, lr}
   1fd0c:	mov	r2, r1
   1fd10:	mov	r1, r0
   1fd14:	mov	r0, #0
   1fd18:	bl	1fc94 <__assert_fail@plt+0xdd4c>
   1fd1c:	pop	{r4, pc}
   1fd20:	push	{r4, lr}
   1fd24:	mov	r2, r1
   1fd28:	mov	r1, r0
   1fd2c:	mov	r0, #0
   1fd30:	bl	1fcd4 <__assert_fail@plt+0xdd8c>
   1fd34:	pop	{r4, pc}
   1fd38:	push	{r4, r5, r6, r7, r8, lr}
   1fd3c:	mov	r5, r1
   1fd40:	mov	r6, r2
   1fd44:	ldr	r4, [r1]
   1fd48:	subs	r7, r0, #0
   1fd4c:	beq	1fd68 <__assert_fail@plt+0xde20>
   1fd50:	lsr	r2, r4, #1
   1fd54:	add	r3, r2, #1
   1fd58:	mvn	r3, r3
   1fd5c:	cmp	r4, r3
   1fd60:	bls	1fd8c <__assert_fail@plt+0xde44>
   1fd64:	bl	201b4 <__assert_fail@plt+0xe26c>
   1fd68:	cmp	r4, #0
   1fd6c:	bne	1fd94 <__assert_fail@plt+0xde4c>
   1fd70:	mov	r1, r2
   1fd74:	mov	r0, #64	; 0x40
   1fd78:	bl	21578 <_obstack_memory_used@@Base+0x94>
   1fd7c:	cmp	r0, #0
   1fd80:	movne	r4, r0
   1fd84:	addeq	r4, r0, #1
   1fd88:	b	1fd94 <__assert_fail@plt+0xde4c>
   1fd8c:	add	r4, r4, #1
   1fd90:	add	r4, r4, r2
   1fd94:	mov	r2, r6
   1fd98:	mov	r1, r4
   1fd9c:	mov	r0, r7
   1fda0:	bl	1fc94 <__assert_fail@plt+0xdd4c>
   1fda4:	str	r4, [r5]
   1fda8:	pop	{r4, r5, r6, r7, r8, pc}
   1fdac:	push	{r4, lr}
   1fdb0:	mov	r2, #1
   1fdb4:	bl	1fd38 <__assert_fail@plt+0xddf0>
   1fdb8:	pop	{r4, pc}
   1fdbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdc0:	sub	sp, sp, #12
   1fdc4:	mov	fp, r0
   1fdc8:	mov	sl, r1
   1fdcc:	mov	r9, r2
   1fdd0:	mov	r7, r3
   1fdd4:	ldr	r6, [sp, #48]	; 0x30
   1fdd8:	ldr	r5, [r1]
   1fddc:	asrs	r4, r5, #1
   1fde0:	bmi	1ff3c <__assert_fail@plt+0xdff4>
   1fde4:	cmp	r5, #0
   1fde8:	blt	1ff50 <__assert_fail@plt+0xe008>
   1fdec:	mvn	r3, #-2147483648	; 0x80000000
   1fdf0:	sub	r3, r3, r4
   1fdf4:	cmp	r5, r3
   1fdf8:	movle	r3, #0
   1fdfc:	movgt	r3, #1
   1fe00:	cmp	r3, #0
   1fe04:	addeq	r4, r4, r5
   1fe08:	mvnne	r4, #-2147483648	; 0x80000000
   1fe0c:	mvn	r8, r7
   1fe10:	lsr	r8, r8, #31
   1fe14:	cmp	r7, r4
   1fe18:	movge	r3, #0
   1fe1c:	andlt	r3, r8, #1
   1fe20:	cmp	r3, #0
   1fe24:	movne	r4, r7
   1fe28:	cmp	r6, #0
   1fe2c:	blt	1ff64 <__assert_fail@plt+0xe01c>
   1fe30:	cmp	r6, #0
   1fe34:	beq	20010 <__assert_fail@plt+0xe0c8>
   1fe38:	cmp	r4, #0
   1fe3c:	blt	1ffc0 <__assert_fail@plt+0xe078>
   1fe40:	mov	r1, r6
   1fe44:	mvn	r0, #-2147483648	; 0x80000000
   1fe48:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   1fe4c:	cmp	r0, r4
   1fe50:	movge	r0, #0
   1fe54:	movlt	r0, #1
   1fe58:	cmp	r0, #0
   1fe5c:	mvnne	r3, #-2147483648	; 0x80000000
   1fe60:	strne	r3, [sp, #4]
   1fe64:	beq	1fff8 <__assert_fail@plt+0xe0b0>
   1fe68:	mov	r1, r6
   1fe6c:	ldr	r0, [sp, #4]
   1fe70:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   1fe74:	mov	r4, r0
   1fe78:	mov	r1, r6
   1fe7c:	ldr	r0, [sp, #4]
   1fe80:	bl	219a4 <_obstack_memory_used@@Base+0x4c0>
   1fe84:	ldr	r3, [sp, #4]
   1fe88:	sub	r1, r3, r1
   1fe8c:	cmp	fp, #0
   1fe90:	moveq	r3, #0
   1fe94:	streq	r3, [sl]
   1fe98:	sub	r3, r4, r5
   1fe9c:	cmp	r3, r9
   1fea0:	bge	1ff28 <__assert_fail@plt+0xdfe0>
   1fea4:	cmp	r9, #0
   1fea8:	blt	2001c <__assert_fail@plt+0xe0d4>
   1feac:	cmp	r5, #0
   1feb0:	blt	20030 <__assert_fail@plt+0xe0e8>
   1feb4:	mvn	r3, #-2147483648	; 0x80000000
   1feb8:	sub	r3, r3, r9
   1febc:	cmp	r5, r3
   1fec0:	movle	r3, #0
   1fec4:	movgt	r3, #1
   1fec8:	cmp	r3, #0
   1fecc:	bne	200d8 <__assert_fail@plt+0xe190>
   1fed0:	add	r5, r5, r9
   1fed4:	mov	r4, r5
   1fed8:	cmp	r7, r5
   1fedc:	movge	r7, #0
   1fee0:	andlt	r7, r8, #1
   1fee4:	cmp	r7, #0
   1fee8:	bne	200d8 <__assert_fail@plt+0xe190>
   1feec:	cmp	r6, #0
   1fef0:	blt	20044 <__assert_fail@plt+0xe0fc>
   1fef4:	cmp	r6, #0
   1fef8:	beq	1ff24 <__assert_fail@plt+0xdfdc>
   1fefc:	cmp	r5, #0
   1ff00:	blt	200a0 <__assert_fail@plt+0xe158>
   1ff04:	mov	r1, r6
   1ff08:	mvn	r0, #-2147483648	; 0x80000000
   1ff0c:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   1ff10:	cmp	r5, r0
   1ff14:	movle	r0, #0
   1ff18:	movgt	r0, #1
   1ff1c:	cmp	r0, #0
   1ff20:	bne	200d8 <__assert_fail@plt+0xe190>
   1ff24:	mul	r1, r5, r6
   1ff28:	mov	r0, fp
   1ff2c:	bl	1fc44 <__assert_fail@plt+0xdcfc>
   1ff30:	str	r4, [sl]
   1ff34:	add	sp, sp, #12
   1ff38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff3c:	rsb	r3, r4, #-2147483648	; 0x80000000
   1ff40:	cmp	r5, r3
   1ff44:	movge	r3, #0
   1ff48:	movlt	r3, #1
   1ff4c:	b	1fe00 <__assert_fail@plt+0xdeb8>
   1ff50:	rsb	r3, r5, #-2147483648	; 0x80000000
   1ff54:	cmp	r4, r3
   1ff58:	movge	r3, #0
   1ff5c:	movlt	r3, #1
   1ff60:	b	1fe00 <__assert_fail@plt+0xdeb8>
   1ff64:	cmp	r4, #0
   1ff68:	blt	1ff90 <__assert_fail@plt+0xe048>
   1ff6c:	cmn	r6, #1
   1ff70:	beq	1ffac <__assert_fail@plt+0xe064>
   1ff74:	mov	r1, r6
   1ff78:	mov	r0, #-2147483648	; 0x80000000
   1ff7c:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   1ff80:	cmp	r0, r4
   1ff84:	movge	r0, #0
   1ff88:	movlt	r0, #1
   1ff8c:	b	1fe58 <__assert_fail@plt+0xdf10>
   1ff90:	mov	r1, r6
   1ff94:	mvn	r0, #-2147483648	; 0x80000000
   1ff98:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   1ff9c:	cmp	r0, r4
   1ffa0:	movle	r0, #0
   1ffa4:	movgt	r0, #1
   1ffa8:	b	1fe58 <__assert_fail@plt+0xdf10>
   1ffac:	add	r0, r4, #-2147483648	; 0x80000000
   1ffb0:	cmp	r0, #0
   1ffb4:	movle	r0, #0
   1ffb8:	movgt	r0, #1
   1ffbc:	b	1fe58 <__assert_fail@plt+0xdf10>
   1ffc0:	cmn	r4, #1
   1ffc4:	beq	1ffe4 <__assert_fail@plt+0xe09c>
   1ffc8:	mov	r1, r4
   1ffcc:	mov	r0, #-2147483648	; 0x80000000
   1ffd0:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   1ffd4:	cmp	r6, r0
   1ffd8:	movle	r0, #0
   1ffdc:	movgt	r0, #1
   1ffe0:	b	1fe58 <__assert_fail@plt+0xdf10>
   1ffe4:	add	r0, r6, #-2147483648	; 0x80000000
   1ffe8:	cmp	r0, #0
   1ffec:	movle	r0, #0
   1fff0:	movgt	r0, #1
   1fff4:	b	1fe58 <__assert_fail@plt+0xdf10>
   1fff8:	mul	r1, r6, r4
   1fffc:	cmp	r1, #63	; 0x3f
   20000:	movle	r3, #64	; 0x40
   20004:	strle	r3, [sp, #4]
   20008:	bgt	1fe8c <__assert_fail@plt+0xdf44>
   2000c:	b	1fe68 <__assert_fail@plt+0xdf20>
   20010:	mov	r3, #64	; 0x40
   20014:	str	r3, [sp, #4]
   20018:	b	1fe68 <__assert_fail@plt+0xdf20>
   2001c:	rsb	r3, r9, #-2147483648	; 0x80000000
   20020:	cmp	r5, r3
   20024:	movge	r3, #0
   20028:	movlt	r3, #1
   2002c:	b	1fec8 <__assert_fail@plt+0xdf80>
   20030:	rsb	r3, r5, #-2147483648	; 0x80000000
   20034:	cmp	r9, r3
   20038:	movge	r3, #0
   2003c:	movlt	r3, #1
   20040:	b	1fec8 <__assert_fail@plt+0xdf80>
   20044:	cmp	r5, #0
   20048:	blt	20070 <__assert_fail@plt+0xe128>
   2004c:	cmn	r6, #1
   20050:	beq	2008c <__assert_fail@plt+0xe144>
   20054:	mov	r1, r6
   20058:	mov	r0, #-2147483648	; 0x80000000
   2005c:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   20060:	cmp	r5, r0
   20064:	movle	r0, #0
   20068:	movgt	r0, #1
   2006c:	b	1ff1c <__assert_fail@plt+0xdfd4>
   20070:	mov	r1, r6
   20074:	mvn	r0, #-2147483648	; 0x80000000
   20078:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   2007c:	cmp	r5, r0
   20080:	movge	r0, #0
   20084:	movlt	r0, #1
   20088:	b	1ff1c <__assert_fail@plt+0xdfd4>
   2008c:	add	r0, r5, #-2147483648	; 0x80000000
   20090:	cmp	r0, #0
   20094:	movle	r0, #0
   20098:	movgt	r0, #1
   2009c:	b	1ff1c <__assert_fail@plt+0xdfd4>
   200a0:	cmn	r5, #1
   200a4:	beq	200c4 <__assert_fail@plt+0xe17c>
   200a8:	mov	r1, r5
   200ac:	mov	r0, #-2147483648	; 0x80000000
   200b0:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   200b4:	cmp	r6, r0
   200b8:	movle	r0, #0
   200bc:	movgt	r0, #1
   200c0:	b	1ff1c <__assert_fail@plt+0xdfd4>
   200c4:	add	r0, r6, #-2147483648	; 0x80000000
   200c8:	cmp	r0, #0
   200cc:	movle	r0, #0
   200d0:	movgt	r0, #1
   200d4:	b	1ff1c <__assert_fail@plt+0xdfd4>
   200d8:	bl	201b4 <__assert_fail@plt+0xe26c>
   200dc:	push	{r4, lr}
   200e0:	bl	20a14 <__assert_fail@plt+0xeacc>
   200e4:	cmp	r0, #0
   200e8:	popne	{r4, pc}
   200ec:	bl	201b4 <__assert_fail@plt+0xe26c>
   200f0:	push	{r4, lr}
   200f4:	mov	r1, #1
   200f8:	bl	200dc <__assert_fail@plt+0xe194>
   200fc:	pop	{r4, pc}
   20100:	push	{r4, lr}
   20104:	bl	20a14 <__assert_fail@plt+0xeacc>
   20108:	cmp	r0, #0
   2010c:	popne	{r4, pc}
   20110:	bl	201b4 <__assert_fail@plt+0xe26c>
   20114:	push	{r4, lr}
   20118:	mov	r1, #1
   2011c:	bl	20100 <__assert_fail@plt+0xe1b8>
   20120:	pop	{r4, pc}
   20124:	push	{r4, r5, r6, lr}
   20128:	mov	r5, r0
   2012c:	mov	r4, r1
   20130:	mov	r0, r1
   20134:	bl	1fc10 <__assert_fail@plt+0xdcc8>
   20138:	mov	r2, r4
   2013c:	mov	r1, r5
   20140:	bl	11ac8 <memcpy@plt>
   20144:	pop	{r4, r5, r6, pc}
   20148:	push	{r4, r5, r6, lr}
   2014c:	mov	r5, r0
   20150:	mov	r4, r1
   20154:	mov	r0, r1
   20158:	bl	1fc24 <__assert_fail@plt+0xdcdc>
   2015c:	mov	r2, r4
   20160:	mov	r1, r5
   20164:	bl	11ac8 <memcpy@plt>
   20168:	pop	{r4, r5, r6, pc}
   2016c:	push	{r4, r5, r6, lr}
   20170:	mov	r5, r0
   20174:	mov	r4, r1
   20178:	add	r0, r1, #1
   2017c:	bl	1fc24 <__assert_fail@plt+0xdcdc>
   20180:	mov	r2, #0
   20184:	strb	r2, [r0, r4]
   20188:	mov	r2, r4
   2018c:	mov	r1, r5
   20190:	bl	11ac8 <memcpy@plt>
   20194:	pop	{r4, r5, r6, pc}
   20198:	push	{r4, lr}
   2019c:	mov	r4, r0
   201a0:	bl	11d50 <strlen@plt>
   201a4:	add	r1, r0, #1
   201a8:	mov	r0, r4
   201ac:	bl	20124 <__assert_fail@plt+0xe1dc>
   201b0:	pop	{r4, pc}
   201b4:	push	{r4, lr}
   201b8:	ldr	r3, [pc, #40]	; 201e8 <__assert_fail@plt+0xe2a0>
   201bc:	ldr	r4, [r3]
   201c0:	mov	r2, #5
   201c4:	ldr	r1, [pc, #32]	; 201ec <__assert_fail@plt+0xe2a4>
   201c8:	mov	r0, #0
   201cc:	bl	11b58 <dcgettext@plt>
   201d0:	mov	r3, r0
   201d4:	ldr	r2, [pc, #20]	; 201f0 <__assert_fail@plt+0xe2a8>
   201d8:	mov	r1, #0
   201dc:	mov	r0, r4
   201e0:	bl	11c90 <error@plt>
   201e4:	bl	11f24 <abort@plt>
   201e8:	andeq	r5, r3, r0, ror r2
   201ec:	andeq	r4, r2, r0, lsl #12
   201f0:	andeq	r2, r2, r8, ror #10
   201f4:	push	{r4, r5, r6, r7, r8, lr}
   201f8:	sub	sp, sp, #8
   201fc:	mov	r4, r0
   20200:	mov	r6, r1
   20204:	mov	r8, r2
   20208:	mov	r7, r3
   2020c:	mov	r2, #5
   20210:	ldr	r1, [pc, #156]	; 202b4 <__assert_fail@plt+0xe36c>
   20214:	mov	r0, #0
   20218:	bl	11b58 <dcgettext@plt>
   2021c:	mov	r2, r0
   20220:	mov	r1, r4
   20224:	mov	r0, #0
   20228:	bl	11c90 <error@plt>
   2022c:	mov	r2, #5
   20230:	ldr	r1, [pc, #128]	; 202b8 <__assert_fail@plt+0xe370>
   20234:	mov	r0, #0
   20238:	bl	11b58 <dcgettext@plt>
   2023c:	mov	r2, r0
   20240:	mov	r1, #0
   20244:	mov	r0, r1
   20248:	bl	11c90 <error@plt>
   2024c:	ldr	r3, [pc, #104]	; 202bc <__assert_fail@plt+0xe374>
   20250:	ldr	r4, [r3]
   20254:	mov	r2, #5
   20258:	ldr	r1, [pc, #96]	; 202c0 <__assert_fail@plt+0xe378>
   2025c:	mov	r0, #0
   20260:	bl	11b58 <dcgettext@plt>
   20264:	mov	r5, r0
   20268:	mov	r3, r8
   2026c:	mov	r2, r6
   20270:	mov	r1, #8
   20274:	mov	r0, #0
   20278:	bl	1e2fc <__assert_fail@plt+0xc3b4>
   2027c:	mov	r6, r0
   20280:	ldr	r3, [sp, #32]
   20284:	mov	r2, r7
   20288:	mov	r1, #8
   2028c:	mov	r0, #1
   20290:	bl	1e2fc <__assert_fail@plt+0xc3b4>
   20294:	str	r0, [sp]
   20298:	mov	r3, r6
   2029c:	mov	r2, r5
   202a0:	mov	r1, #0
   202a4:	mov	r0, r4
   202a8:	bl	11c90 <error@plt>
   202ac:	add	sp, sp, #8
   202b0:	pop	{r4, r5, r6, r7, r8, pc}
   202b4:	andeq	r4, r2, r4, lsl r6
   202b8:	andeq	r4, r2, r0, lsr r6
   202bc:	andeq	r5, r3, r0, ror r2
   202c0:	andeq	r4, r2, ip, asr r6
   202c4:	push	{r4, r5, r6, r7, r8, lr}
   202c8:	sub	sp, sp, #8
   202cc:	mov	r5, r0
   202d0:	mov	r6, r1
   202d4:	mov	r7, r2
   202d8:	mov	r8, r3
   202dc:	bl	210b0 <__assert_fail@plt+0xf168>
   202e0:	mov	r4, r0
   202e4:	bl	11d74 <__errno_location@plt>
   202e8:	ldr	r0, [r0]
   202ec:	cmp	r0, #0
   202f0:	bne	20300 <__assert_fail@plt+0xe3b8>
   202f4:	mov	r0, r4
   202f8:	add	sp, sp, #8
   202fc:	pop	{r4, r5, r6, r7, r8, pc}
   20300:	str	r8, [sp]
   20304:	mov	r3, r7
   20308:	mov	r2, r6
   2030c:	mov	r1, r5
   20310:	bl	201f4 <__assert_fail@plt+0xe2ac>
   20314:	b	202f4 <__assert_fail@plt+0xe3ac>
   20318:	push	{r4, r5, r6, r7, r8, lr}
   2031c:	sub	sp, sp, #8
   20320:	mov	r6, r0
   20324:	mov	r7, r1
   20328:	mov	r8, r2
   2032c:	mov	r4, r3
   20330:	bl	2112c <__assert_fail@plt+0xf1e4>
   20334:	mov	r5, r0
   20338:	bl	11d74 <__errno_location@plt>
   2033c:	ldr	r0, [r0]
   20340:	cmp	r0, #0
   20344:	bne	20354 <__assert_fail@plt+0xe40c>
   20348:	mov	r0, r5
   2034c:	add	sp, sp, #8
   20350:	pop	{r4, r5, r6, r7, r8, pc}
   20354:	sub	r4, r4, #1
   20358:	str	r4, [sp]
   2035c:	mov	r3, r8
   20360:	sub	r2, r7, #1
   20364:	mov	r1, r6
   20368:	bl	201f4 <__assert_fail@plt+0xe2ac>
   2036c:	b	20348 <__assert_fail@plt+0xe400>
   20370:	push	{r4, r5, lr}
   20374:	vpush	{d8}
   20378:	sub	sp, sp, #12
   2037c:	vmov.f64	d8, d0
   20380:	vldr	d7, [pc, #104]	; 203f0 <__assert_fail@plt+0xe4a8>
   20384:	vcmpe.f64	d0, d7
   20388:	vmrs	APSR_nzcv, fpscr
   2038c:	blt	203a4 <__assert_fail@plt+0xe45c>
   20390:	bl	11a50 <pause@plt>
   20394:	bl	11d74 <__errno_location@plt>
   20398:	ldr	r3, [r0]
   2039c:	cmp	r3, #4
   203a0:	beq	20390 <__assert_fail@plt+0xe448>
   203a4:	vmov.f64	d0, d8
   203a8:	mov	r0, sp
   203ac:	bl	20b60 <__assert_fail@plt+0xec18>
   203b0:	bl	11d74 <__errno_location@plt>
   203b4:	mov	r4, r0
   203b8:	mov	r5, #0
   203bc:	str	r5, [r4]
   203c0:	mov	r1, sp
   203c4:	mov	r0, sp
   203c8:	bl	11aa4 <nanosleep@plt>
   203cc:	cmp	r0, #0
   203d0:	beq	203e4 <__assert_fail@plt+0xe49c>
   203d4:	ldr	r3, [r4]
   203d8:	bics	r3, r3, #4
   203dc:	beq	203bc <__assert_fail@plt+0xe474>
   203e0:	mvn	r0, #0
   203e4:	add	sp, sp, #12
   203e8:	vpop	{d8}
   203ec:	pop	{r4, r5, pc}
   203f0:	andeq	r0, r0, r0
   203f4:	mvnmi	r0, r0
   203f8:	push	{lr}		; (str lr, [sp, #-4]!)
   203fc:	sub	sp, sp, #20
   20400:	ldr	ip, [pc, #144]	; 20498 <__assert_fail@plt+0xe550>
   20404:	ldr	r5, [ip]
   20408:	sub	r0, r0, #1
   2040c:	cmp	r0, #3
   20410:	ldrls	pc, [pc, r0, lsl #2]
   20414:	b	20430 <__assert_fail@plt+0xe4e8>
   20418:	andeq	r0, r2, r4, lsr r4
   2041c:	andeq	r0, r2, r8, lsr #8
   20420:	andeq	r0, r2, r8, lsr #8
   20424:	andeq	r0, r2, ip, lsr r4
   20428:	ldr	r0, [pc, #108]	; 2049c <__assert_fail@plt+0xe554>
   2042c:	b	20440 <__assert_fail@plt+0xe4f8>
   20430:	bl	11f24 <abort@plt>
   20434:	ldr	r0, [pc, #100]	; 204a0 <__assert_fail@plt+0xe558>
   20438:	b	20440 <__assert_fail@plt+0xe4f8>
   2043c:	ldr	r0, [pc, #96]	; 204a4 <__assert_fail@plt+0xe55c>
   20440:	cmp	r1, #0
   20444:	ldrlt	r4, [pc, #92]	; 204a8 <__assert_fail@plt+0xe560>
   20448:	sublt	r4, r4, r1
   2044c:	strblt	r2, [sp, #12]
   20450:	movlt	r3, #0
   20454:	strblt	r3, [sp, #13]
   20458:	addlt	r6, sp, #12
   2045c:	ldrge	r6, [r3, r1, lsl #4]
   20460:	ldrge	r4, [pc, #64]	; 204a8 <__assert_fail@plt+0xe560>
   20464:	mov	r2, #5
   20468:	mov	r1, r0
   2046c:	mov	r0, #0
   20470:	bl	11b58 <dcgettext@plt>
   20474:	ldr	r3, [sp, #24]
   20478:	str	r3, [sp, #4]
   2047c:	str	r6, [sp]
   20480:	mov	r3, r4
   20484:	mov	r2, r0
   20488:	mov	r1, #0
   2048c:	mov	r0, r5
   20490:	bl	11c90 <error@plt>
   20494:	bl	11f24 <abort@plt>
   20498:	andeq	r5, r3, r0, ror r2
   2049c:	andeq	r4, r2, r0, lsr #13
   204a0:	andeq	r4, r2, r8, asr #13
   204a4:	andeq	r4, r2, r4, lsl #13
   204a8:	andeq	r4, r2, r8, ror #13
   204ac:	push	{r4, r5, r6, lr}
   204b0:	mov	r5, r0
   204b4:	subs	r4, r1, #0
   204b8:	blt	2050c <__assert_fail@plt+0xe5c4>
   204bc:	cmp	r4, #0
   204c0:	moveq	r3, #0
   204c4:	beq	204f0 <__assert_fail@plt+0xe5a8>
   204c8:	mov	r2, r4
   204cc:	asr	r3, r4, #31
   204d0:	mvn	r0, #0
   204d4:	mvn	r1, #0
   204d8:	bl	21d7c <_obstack_memory_used@@Base+0x898>
   204dc:	ldrd	r2, [r5]
   204e0:	cmp	r1, r3
   204e4:	cmpeq	r0, r2
   204e8:	movcc	r3, #1
   204ec:	movcs	r3, #0
   204f0:	cmp	r3, #0
   204f4:	beq	2052c <__assert_fail@plt+0xe5e4>
   204f8:	mvn	r2, #0
   204fc:	mvn	r3, #0
   20500:	strd	r2, [r5]
   20504:	mov	r0, #1
   20508:	pop	{r4, r5, r6, pc}
   2050c:	mov	r1, r4
   20510:	mov	r0, #0
   20514:	bl	21784 <_obstack_memory_used@@Base+0x2a0>
   20518:	ldrd	r2, [r5]
   2051c:	orrs	r3, r2, r3
   20520:	movne	r3, #1
   20524:	moveq	r3, #0
   20528:	b	204f0 <__assert_fail@plt+0xe5a8>
   2052c:	asr	r3, r4, #31
   20530:	ldr	r1, [r5, #4]
   20534:	ldr	r2, [r5]
   20538:	mul	r3, r3, r2
   2053c:	mla	r1, r4, r1, r3
   20540:	umull	r2, r3, r2, r4
   20544:	add	r3, r1, r3
   20548:	strd	r2, [r5]
   2054c:	mov	r0, #0
   20550:	pop	{r4, r5, r6, pc}
   20554:	push	{r4, r5, r6, r7, r8, lr}
   20558:	subs	r4, r2, #0
   2055c:	beq	2058c <__assert_fail@plt+0xe644>
   20560:	mov	r7, r1
   20564:	mov	r6, r0
   20568:	mov	r5, #0
   2056c:	mov	r1, r7
   20570:	mov	r0, r6
   20574:	bl	204ac <__assert_fail@plt+0xe564>
   20578:	orr	r5, r5, r0
   2057c:	subs	r4, r4, #1
   20580:	bne	2056c <__assert_fail@plt+0xe624>
   20584:	mov	r0, r5
   20588:	pop	{r4, r5, r6, r7, r8, pc}
   2058c:	mov	r5, #0
   20590:	b	20584 <__assert_fail@plt+0xe63c>
   20594:	push	{r4, r5, r6, r7, r8, r9, lr}
   20598:	sub	sp, sp, #20
   2059c:	cmp	r2, #36	; 0x24
   205a0:	bhi	205e0 <__assert_fail@plt+0xe698>
   205a4:	mov	r5, r0
   205a8:	mov	r6, r1
   205ac:	mov	r7, r2
   205b0:	mov	r9, r3
   205b4:	cmp	r1, #0
   205b8:	addeq	r6, sp, #12
   205bc:	bl	11d74 <__errno_location@plt>
   205c0:	mov	r8, r0
   205c4:	mov	r3, #0
   205c8:	str	r3, [r0]
   205cc:	ldrb	r4, [r5]
   205d0:	bl	11d2c <__ctype_b_loc@plt>
   205d4:	ldr	r1, [r0]
   205d8:	mov	r2, r5
   205dc:	b	205f8 <__assert_fail@plt+0xe6b0>
   205e0:	ldr	r3, [pc, #1056]	; 20a08 <__assert_fail@plt+0xeac0>
   205e4:	mov	r2, #85	; 0x55
   205e8:	ldr	r1, [pc, #1052]	; 20a0c <__assert_fail@plt+0xeac4>
   205ec:	ldr	r0, [pc, #1052]	; 20a10 <__assert_fail@plt+0xeac8>
   205f0:	bl	11f48 <__assert_fail@plt>
   205f4:	ldrb	r4, [r2, #1]!
   205f8:	lsl	r3, r4, #1
   205fc:	ldrh	r3, [r1, r3]
   20600:	tst	r3, #8192	; 0x2000
   20604:	bne	205f4 <__assert_fail@plt+0xe6ac>
   20608:	cmp	r4, #45	; 0x2d
   2060c:	moveq	r4, #4
   20610:	bne	20620 <__assert_fail@plt+0xe6d8>
   20614:	mov	r0, r4
   20618:	add	sp, sp, #20
   2061c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20620:	mov	r3, #0
   20624:	mov	r2, r7
   20628:	mov	r1, r6
   2062c:	mov	r0, r5
   20630:	bl	11aec <__strtoull_internal@plt>
   20634:	strd	r0, [sp]
   20638:	ldr	r7, [r6]
   2063c:	cmp	r5, r7
   20640:	beq	20664 <__assert_fail@plt+0xe71c>
   20644:	ldr	r3, [r8]
   20648:	cmp	r3, #0
   2064c:	beq	206ac <__assert_fail@plt+0xe764>
   20650:	cmp	r3, #34	; 0x22
   20654:	moveq	r4, #1
   20658:	beq	206b0 <__assert_fail@plt+0xe768>
   2065c:	mov	r4, #4
   20660:	b	20614 <__assert_fail@plt+0xe6cc>
   20664:	ldr	r3, [sp, #48]	; 0x30
   20668:	cmp	r3, #0
   2066c:	moveq	r4, #4
   20670:	beq	20614 <__assert_fail@plt+0xe6cc>
   20674:	ldrb	r1, [r7]
   20678:	cmp	r1, #0
   2067c:	moveq	r4, #4
   20680:	beq	20614 <__assert_fail@plt+0xe6cc>
   20684:	mov	r0, r3
   20688:	bl	11d5c <strchr@plt>
   2068c:	cmp	r0, #0
   20690:	moveq	r4, #4
   20694:	beq	20614 <__assert_fail@plt+0xe6cc>
   20698:	mov	r2, #1
   2069c:	mov	r3, #0
   206a0:	strd	r2, [sp]
   206a4:	mov	r4, #0
   206a8:	b	206bc <__assert_fail@plt+0xe774>
   206ac:	mov	r4, #0
   206b0:	ldr	r3, [sp, #48]	; 0x30
   206b4:	cmp	r3, #0
   206b8:	beq	207ac <__assert_fail@plt+0xe864>
   206bc:	ldrb	r5, [r7]
   206c0:	cmp	r5, #0
   206c4:	beq	20944 <__assert_fail@plt+0xe9fc>
   206c8:	mov	r1, r5
   206cc:	ldr	r0, [sp, #48]	; 0x30
   206d0:	bl	11d5c <strchr@plt>
   206d4:	cmp	r0, #0
   206d8:	beq	207b4 <__assert_fail@plt+0xe86c>
   206dc:	sub	r3, r5, #69	; 0x45
   206e0:	cmp	r3, #47	; 0x2f
   206e4:	ldrls	pc, [pc, r3, lsl #2]
   206e8:	b	20820 <__assert_fail@plt+0xe8d8>
   206ec:	andeq	r0, r2, r4, asr #15
   206f0:	andeq	r0, r2, r0, lsr #16
   206f4:	andeq	r0, r2, r4, asr #15
   206f8:	andeq	r0, r2, r0, lsr #16
   206fc:	andeq	r0, r2, r0, lsr #16
   20700:	andeq	r0, r2, r0, lsr #16
   20704:	andeq	r0, r2, r4, asr #15
   20708:	andeq	r0, r2, r0, lsr #16
   2070c:	andeq	r0, r2, r4, asr #15
   20710:	andeq	r0, r2, r0, lsr #16
   20714:	andeq	r0, r2, r0, lsr #16
   20718:	andeq	r0, r2, r4, asr #15
   2071c:	andeq	r0, r2, r0, lsr #16
   20720:	andeq	r0, r2, r0, lsr #16
   20724:	andeq	r0, r2, r0, lsr #16
   20728:	andeq	r0, r2, r4, asr #15
   2072c:	andeq	r0, r2, r0, lsr #16
   20730:	andeq	r0, r2, r0, lsr #16
   20734:	andeq	r0, r2, r0, lsr #16
   20738:	andeq	r0, r2, r0, lsr #16
   2073c:	andeq	r0, r2, r4, asr #15
   20740:	andeq	r0, r2, r4, asr #15
   20744:	andeq	r0, r2, r0, lsr #16
   20748:	andeq	r0, r2, r0, lsr #16
   2074c:	andeq	r0, r2, r0, lsr #16
   20750:	andeq	r0, r2, r0, lsr #16
   20754:	andeq	r0, r2, r0, lsr #16
   20758:	andeq	r0, r2, r0, lsr #16
   2075c:	andeq	r0, r2, r0, lsr #16
   20760:	andeq	r0, r2, r0, lsr #16
   20764:	andeq	r0, r2, r0, lsr #16
   20768:	andeq	r0, r2, r0, lsr #16
   2076c:	andeq	r0, r2, r0, lsr #16
   20770:	andeq	r0, r2, r0, lsr #16
   20774:	andeq	r0, r2, r4, asr #15
   20778:	andeq	r0, r2, r0, lsr #16
   2077c:	andeq	r0, r2, r0, lsr #16
   20780:	andeq	r0, r2, r0, lsr #16
   20784:	andeq	r0, r2, r4, asr #15
   20788:	andeq	r0, r2, r0, lsr #16
   2078c:	andeq	r0, r2, r4, asr #15
   20790:	andeq	r0, r2, r0, lsr #16
   20794:	andeq	r0, r2, r0, lsr #16
   20798:	andeq	r0, r2, r0, lsr #16
   2079c:	andeq	r0, r2, r0, lsr #16
   207a0:	andeq	r0, r2, r0, lsr #16
   207a4:	andeq	r0, r2, r0, lsr #16
   207a8:	andeq	r0, r2, r4, asr #15
   207ac:	strd	r0, [r9]
   207b0:	b	20614 <__assert_fail@plt+0xe6cc>
   207b4:	ldrd	r2, [sp]
   207b8:	strd	r2, [r9]
   207bc:	orr	r4, r4, #2
   207c0:	b	20614 <__assert_fail@plt+0xe6cc>
   207c4:	mov	r1, #48	; 0x30
   207c8:	ldr	r0, [sp, #48]	; 0x30
   207cc:	bl	11d5c <strchr@plt>
   207d0:	cmp	r0, #0
   207d4:	beq	20910 <__assert_fail@plt+0xe9c8>
   207d8:	ldrb	r3, [r7, #1]
   207dc:	cmp	r3, #68	; 0x44
   207e0:	beq	207fc <__assert_fail@plt+0xe8b4>
   207e4:	cmp	r3, #105	; 0x69
   207e8:	beq	20808 <__assert_fail@plt+0xe8c0>
   207ec:	cmp	r3, #66	; 0x42
   207f0:	movne	r7, #1
   207f4:	movne	r1, #1024	; 0x400
   207f8:	bne	20828 <__assert_fail@plt+0xe8e0>
   207fc:	mov	r7, #2
   20800:	mov	r1, #1000	; 0x3e8
   20804:	b	20828 <__assert_fail@plt+0xe8e0>
   20808:	ldrb	r7, [r7, #2]
   2080c:	cmp	r7, #66	; 0x42
   20810:	movne	r7, #1
   20814:	moveq	r7, #3
   20818:	mov	r1, #1024	; 0x400
   2081c:	b	20828 <__assert_fail@plt+0xe8e0>
   20820:	mov	r7, #1
   20824:	mov	r1, #1024	; 0x400
   20828:	sub	r5, r5, #66	; 0x42
   2082c:	cmp	r5, #53	; 0x35
   20830:	ldrls	pc, [pc, r5, lsl #2]
   20834:	b	209f0 <__assert_fail@plt+0xeaa8>
   20838:	andeq	r0, r2, r0, asr r9
   2083c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20840:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20844:	andeq	r0, r2, r0, ror #18
   20848:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2084c:	andeq	r0, r2, r0, ror r9
   20850:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20854:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20858:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2085c:	andeq	r0, r2, r0, lsl #19
   20860:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20864:	muleq	r2, r0, r9
   20868:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2086c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20870:	andeq	r0, r2, r0, lsr #19
   20874:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20878:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2087c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20880:			; <UNDEFINED> instruction: 0x000209b0
   20884:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20888:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2088c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20890:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20894:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20898:	andeq	r0, r2, r0, ror #19
   2089c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208a0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208a4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208a8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208ac:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208b0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208b4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208b8:	andeq	r0, r2, ip, lsl r9
   208bc:	andeq	r0, r2, r0, lsl #20
   208c0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208c4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208c8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208cc:	andeq	r0, r2, r0, ror r9
   208d0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208d4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208d8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208dc:	andeq	r0, r2, r0, lsl #19
   208e0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208e4:	muleq	r2, r0, r9
   208e8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208ec:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208f0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208f4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208f8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208fc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20900:			; <UNDEFINED> instruction: 0x000209b0
   20904:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20908:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2090c:	andeq	r0, r2, r0, asr #19
   20910:	mov	r7, #1
   20914:	mov	r1, #1024	; 0x400
   20918:	b	20828 <__assert_fail@plt+0xe8e0>
   2091c:	mov	r1, #512	; 0x200
   20920:	mov	r0, sp
   20924:	bl	204ac <__assert_fail@plt+0xe564>
   20928:	orr	r4, r4, r0
   2092c:	ldr	r3, [r6]
   20930:	add	r2, r3, r7
   20934:	str	r2, [r6]
   20938:	ldrb	r3, [r3, r7]
   2093c:	cmp	r3, #0
   20940:	orrne	r4, r4, #2
   20944:	ldrd	r2, [sp]
   20948:	strd	r2, [r9]
   2094c:	b	20614 <__assert_fail@plt+0xe6cc>
   20950:	mov	r1, #1024	; 0x400
   20954:	mov	r0, sp
   20958:	bl	204ac <__assert_fail@plt+0xe564>
   2095c:	b	20928 <__assert_fail@plt+0xe9e0>
   20960:	mov	r2, #6
   20964:	mov	r0, sp
   20968:	bl	20554 <__assert_fail@plt+0xe60c>
   2096c:	b	20928 <__assert_fail@plt+0xe9e0>
   20970:	mov	r2, #3
   20974:	mov	r0, sp
   20978:	bl	20554 <__assert_fail@plt+0xe60c>
   2097c:	b	20928 <__assert_fail@plt+0xe9e0>
   20980:	mov	r2, #1
   20984:	mov	r0, sp
   20988:	bl	20554 <__assert_fail@plt+0xe60c>
   2098c:	b	20928 <__assert_fail@plt+0xe9e0>
   20990:	mov	r2, #2
   20994:	mov	r0, sp
   20998:	bl	20554 <__assert_fail@plt+0xe60c>
   2099c:	b	20928 <__assert_fail@plt+0xe9e0>
   209a0:	mov	r2, #5
   209a4:	mov	r0, sp
   209a8:	bl	20554 <__assert_fail@plt+0xe60c>
   209ac:	b	20928 <__assert_fail@plt+0xe9e0>
   209b0:	mov	r2, #4
   209b4:	mov	r0, sp
   209b8:	bl	20554 <__assert_fail@plt+0xe60c>
   209bc:	b	20928 <__assert_fail@plt+0xe9e0>
   209c0:	mov	r1, #2
   209c4:	mov	r0, sp
   209c8:	bl	204ac <__assert_fail@plt+0xe564>
   209cc:	b	20928 <__assert_fail@plt+0xe9e0>
   209d0:	mov	r2, #8
   209d4:	mov	r0, sp
   209d8:	bl	20554 <__assert_fail@plt+0xe60c>
   209dc:	b	20928 <__assert_fail@plt+0xe9e0>
   209e0:	mov	r2, #7
   209e4:	mov	r0, sp
   209e8:	bl	20554 <__assert_fail@plt+0xe60c>
   209ec:	b	20928 <__assert_fail@plt+0xe9e0>
   209f0:	ldrd	r2, [sp]
   209f4:	strd	r2, [r9]
   209f8:	orr	r4, r4, #2
   209fc:	b	20614 <__assert_fail@plt+0xe6cc>
   20a00:	mov	r0, #0
   20a04:	b	20928 <__assert_fail@plt+0xe9e0>
   20a08:	andeq	r4, r2, ip, ror #13
   20a0c:	strdeq	r4, [r2], -r8
   20a10:	andeq	r4, r2, r8, lsl #14
   20a14:	push	{r4, lr}
   20a18:	mov	r2, r0
   20a1c:	mov	r3, r1
   20a20:	cmp	r1, #0
   20a24:	cmpne	r0, #0
   20a28:	moveq	r3, #1
   20a2c:	moveq	r2, r3
   20a30:	umull	r0, r1, r2, r3
   20a34:	cmp	r0, #0
   20a38:	cmpge	r1, #0
   20a3c:	bne	20a50 <__assert_fail@plt+0xeb08>
   20a40:	mov	r1, r3
   20a44:	mov	r0, r2
   20a48:	bl	11a08 <calloc@plt>
   20a4c:	pop	{r4, pc}
   20a50:	bl	11d74 <__errno_location@plt>
   20a54:	mov	r3, #12
   20a58:	str	r3, [r0]
   20a5c:	mov	r0, #0
   20a60:	pop	{r4, pc}
   20a64:	push	{r4, lr}
   20a68:	cmp	r0, #0
   20a6c:	moveq	r0, #1
   20a70:	cmp	r0, #0
   20a74:	blt	20a80 <__assert_fail@plt+0xeb38>
   20a78:	bl	11cd8 <malloc@plt>
   20a7c:	pop	{r4, pc}
   20a80:	bl	11d74 <__errno_location@plt>
   20a84:	mov	r3, #12
   20a88:	str	r3, [r0]
   20a8c:	mov	r0, #0
   20a90:	pop	{r4, pc}
   20a94:	push	{r4, lr}
   20a98:	cmp	r0, #0
   20a9c:	beq	20ab8 <__assert_fail@plt+0xeb70>
   20aa0:	cmp	r1, #0
   20aa4:	beq	20ac4 <__assert_fail@plt+0xeb7c>
   20aa8:	cmp	r1, #0
   20aac:	blt	20ad0 <__assert_fail@plt+0xeb88>
   20ab0:	bl	11ba0 <realloc@plt>
   20ab4:	pop	{r4, pc}
   20ab8:	mov	r0, r1
   20abc:	bl	20a64 <__assert_fail@plt+0xeb1c>
   20ac0:	pop	{r4, pc}
   20ac4:	bl	1aed4 <__assert_fail@plt+0x8f8c>
   20ac8:	mov	r0, #0
   20acc:	pop	{r4, pc}
   20ad0:	bl	11d74 <__errno_location@plt>
   20ad4:	mov	r3, #12
   20ad8:	str	r3, [r0]
   20adc:	mov	r0, #0
   20ae0:	pop	{r4, pc}
   20ae4:	push	{r4, r5, r6, lr}
   20ae8:	mov	r5, r0
   20aec:	bl	11c78 <__fpending@plt>
   20af0:	mov	r6, r0
   20af4:	ldr	r4, [r5]
   20af8:	and	r4, r4, #32
   20afc:	mov	r0, r5
   20b00:	bl	1a934 <__assert_fail@plt+0x89ec>
   20b04:	cmp	r4, #0
   20b08:	bne	20b30 <__assert_fail@plt+0xebe8>
   20b0c:	cmp	r0, #0
   20b10:	popeq	{r4, r5, r6, pc}
   20b14:	cmp	r6, #0
   20b18:	bne	20b4c <__assert_fail@plt+0xec04>
   20b1c:	bl	11d74 <__errno_location@plt>
   20b20:	ldr	r0, [r0]
   20b24:	subs	r0, r0, #9
   20b28:	mvnne	r0, #0
   20b2c:	pop	{r4, r5, r6, pc}
   20b30:	cmp	r0, #0
   20b34:	bne	20b54 <__assert_fail@plt+0xec0c>
   20b38:	bl	11d74 <__errno_location@plt>
   20b3c:	mov	r3, #0
   20b40:	str	r3, [r0]
   20b44:	mvn	r0, #0
   20b48:	pop	{r4, r5, r6, pc}
   20b4c:	mvn	r0, #0
   20b50:	pop	{r4, r5, r6, pc}
   20b54:	mvn	r0, #0
   20b58:	pop	{r4, r5, r6, pc}
   20b5c:	andeq	r0, r0, r0
   20b60:	vldr	d7, [pc, #184]	; 20c20 <__assert_fail@plt+0xecd8>
   20b64:	vcmpe.f64	d0, d7
   20b68:	vmrs	APSR_nzcv, fpscr
   20b6c:	ble	20bf4 <__assert_fail@plt+0xecac>
   20b70:	vldr	d7, [pc, #176]	; 20c28 <__assert_fail@plt+0xece0>
   20b74:	vcmpe.f64	d0, d7
   20b78:	vmrs	APSR_nzcv, fpscr
   20b7c:	bpl	20c08 <__assert_fail@plt+0xecc0>
   20b80:	vcvt.s32.f64	s14, d0
   20b84:	vcvt.f64.s32	d6, s14
   20b88:	vsub.f64	d0, d0, d6
   20b8c:	vldr	d6, [pc, #156]	; 20c30 <__assert_fail@plt+0xece8>
   20b90:	vmul.f64	d0, d0, d6
   20b94:	vcvt.s32.f64	s15, d0
   20b98:	vcvt.f64.s32	d6, s15
   20b9c:	vcmpe.f64	d0, d6
   20ba0:	vmrs	APSR_nzcv, fpscr
   20ba4:	movgt	r3, #1
   20ba8:	movle	r3, #0
   20bac:	vmov	r2, s15
   20bb0:	add	r3, r2, r3
   20bb4:	ldr	ip, [pc, #124]	; 20c38 <__assert_fail@plt+0xecf0>
   20bb8:	smull	r2, ip, ip, r3
   20bbc:	asr	r1, r3, #31
   20bc0:	rsb	ip, r1, ip, asr #28
   20bc4:	vmov	r2, s14
   20bc8:	add	r2, ip, r2
   20bcc:	ldr	r1, [pc, #104]	; 20c3c <__assert_fail@plt+0xecf4>
   20bd0:	mul	r1, r1, ip
   20bd4:	subs	r3, r3, r1
   20bd8:	submi	r2, r2, #1
   20bdc:	addmi	r3, r3, #998244352	; 0x3b800000
   20be0:	addmi	r3, r3, #1753088	; 0x1ac000
   20be4:	addmi	r3, r3, #2560	; 0xa00
   20be8:	str	r2, [r0]
   20bec:	str	r3, [r0, #4]
   20bf0:	bx	lr
   20bf4:	mov	r3, #-2147483648	; 0x80000000
   20bf8:	str	r3, [r0]
   20bfc:	mov	r3, #0
   20c00:	str	r3, [r0, #4]
   20c04:	bx	lr
   20c08:	mvn	r3, #-2147483648	; 0x80000000
   20c0c:	str	r3, [r0]
   20c10:	ldr	r3, [pc, #40]	; 20c40 <__assert_fail@plt+0xecf8>
   20c14:	str	r3, [r0, #4]
   20c18:	bx	lr
   20c1c:	nop			; (mov r0, r0)
   20c20:	andeq	r0, r0, r0
   20c24:	mvngt	r0, r0
   20c28:	andeq	r0, r0, r0
   20c2c:	mvnmi	r0, r0
   20c30:	andeq	r0, r0, r0
   20c34:	bicmi	ip, sp, r5, ror #26
   20c38:	ldrtmi	r2, [r8], #4001	; 0xfa1
   20c3c:	blcc	fe6d3444 <optarg@@GLIBC_2.4+0xfe69e16c>
   20c40:	blcc	fe6d3444 <optarg@@GLIBC_2.4+0xfe69e16c>
   20c44:	push	{r1, r2, r3}
   20c48:	push	{r4, r5, r6, lr}
   20c4c:	sub	sp, sp, #12
   20c50:	mov	r5, r0
   20c54:	ldr	r1, [sp, #28]
   20c58:	add	r3, sp, #32
   20c5c:	str	r3, [sp, #4]
   20c60:	cmp	r1, #0
   20c64:	beq	20cac <__assert_fail@plt+0xed64>
   20c68:	ldr	r3, [pc, #540]	; 20e8c <__assert_fail@plt+0xef44>
   20c6c:	cmp	r1, r3
   20c70:	beq	20cdc <__assert_fail@plt+0xed94>
   20c74:	cmp	r1, #11
   20c78:	beq	20e7c <__assert_fail@plt+0xef34>
   20c7c:	bgt	20e08 <__assert_fail@plt+0xeec0>
   20c80:	cmp	r1, #3
   20c84:	beq	20e7c <__assert_fail@plt+0xef34>
   20c88:	ble	20dc8 <__assert_fail@plt+0xee80>
   20c8c:	cmp	r1, #8
   20c90:	beq	20de8 <__assert_fail@plt+0xeea0>
   20c94:	ble	20de0 <__assert_fail@plt+0xee98>
   20c98:	cmp	r1, #9
   20c9c:	beq	20e7c <__assert_fail@plt+0xef34>
   20ca0:	cmp	r1, #10
   20ca4:	bne	20e40 <__assert_fail@plt+0xeef8>
   20ca8:	b	20de8 <__assert_fail@plt+0xeea0>
   20cac:	ldr	r3, [sp, #4]
   20cb0:	add	r2, r3, #4
   20cb4:	str	r2, [sp, #4]
   20cb8:	ldr	r2, [r3]
   20cbc:	mov	r1, #0
   20cc0:	bl	11e10 <fcntl64@plt>
   20cc4:	mov	r4, r0
   20cc8:	mov	r0, r4
   20ccc:	add	sp, sp, #12
   20cd0:	pop	{r4, r5, r6, lr}
   20cd4:	add	sp, sp, #12
   20cd8:	bx	lr
   20cdc:	ldr	r3, [sp, #4]
   20ce0:	add	r2, r3, #4
   20ce4:	str	r2, [sp, #4]
   20ce8:	ldr	r6, [r3]
   20cec:	ldr	r3, [pc, #412]	; 20e90 <__assert_fail@plt+0xef48>
   20cf0:	ldr	r3, [r3]
   20cf4:	cmp	r3, #0
   20cf8:	blt	20d58 <__assert_fail@plt+0xee10>
   20cfc:	mov	r2, r6
   20d00:	ldr	r1, [pc, #388]	; 20e8c <__assert_fail@plt+0xef44>
   20d04:	bl	11e10 <fcntl64@plt>
   20d08:	subs	r4, r0, #0
   20d0c:	blt	20d20 <__assert_fail@plt+0xedd8>
   20d10:	mov	r2, #1
   20d14:	ldr	r3, [pc, #372]	; 20e90 <__assert_fail@plt+0xef48>
   20d18:	str	r2, [r3]
   20d1c:	b	20cc8 <__assert_fail@plt+0xed80>
   20d20:	bl	11d74 <__errno_location@plt>
   20d24:	ldr	r3, [r0]
   20d28:	cmp	r3, #22
   20d2c:	bne	20d10 <__assert_fail@plt+0xedc8>
   20d30:	mov	r2, r6
   20d34:	mov	r1, #0
   20d38:	mov	r0, r5
   20d3c:	bl	11e10 <fcntl64@plt>
   20d40:	subs	r4, r0, #0
   20d44:	blt	20cc8 <__assert_fail@plt+0xed80>
   20d48:	mvn	r2, #0
   20d4c:	ldr	r3, [pc, #316]	; 20e90 <__assert_fail@plt+0xef48>
   20d50:	str	r2, [r3]
   20d54:	b	20d7c <__assert_fail@plt+0xee34>
   20d58:	mov	r2, r6
   20d5c:	mov	r1, #0
   20d60:	bl	11e10 <fcntl64@plt>
   20d64:	subs	r4, r0, #0
   20d68:	blt	20cc8 <__assert_fail@plt+0xed80>
   20d6c:	ldr	r3, [pc, #284]	; 20e90 <__assert_fail@plt+0xef48>
   20d70:	ldr	r3, [r3]
   20d74:	cmn	r3, #1
   20d78:	bne	20cc8 <__assert_fail@plt+0xed80>
   20d7c:	mov	r1, #1
   20d80:	mov	r0, r4
   20d84:	bl	11e10 <fcntl64@plt>
   20d88:	subs	r2, r0, #0
   20d8c:	blt	20da8 <__assert_fail@plt+0xee60>
   20d90:	orr	r2, r2, #1
   20d94:	mov	r1, #2
   20d98:	mov	r0, r4
   20d9c:	bl	11e10 <fcntl64@plt>
   20da0:	cmn	r0, #1
   20da4:	bne	20cc8 <__assert_fail@plt+0xed80>
   20da8:	bl	11d74 <__errno_location@plt>
   20dac:	mov	r5, r0
   20db0:	ldr	r6, [r0]
   20db4:	mov	r0, r4
   20db8:	bl	11f30 <close@plt>
   20dbc:	str	r6, [r5]
   20dc0:	mvn	r4, #0
   20dc4:	b	20cc8 <__assert_fail@plt+0xed80>
   20dc8:	cmp	r1, #1
   20dcc:	beq	20e7c <__assert_fail@plt+0xef34>
   20dd0:	bgt	20de8 <__assert_fail@plt+0xeea0>
   20dd4:	cmp	r1, #0
   20dd8:	bne	20e40 <__assert_fail@plt+0xeef8>
   20ddc:	b	20de8 <__assert_fail@plt+0xeea0>
   20de0:	cmp	r1, #4
   20de4:	bne	20e40 <__assert_fail@plt+0xeef8>
   20de8:	ldr	r3, [sp, #4]
   20dec:	add	r2, r3, #4
   20df0:	str	r2, [sp, #4]
   20df4:	ldr	r2, [r3]
   20df8:	mov	r0, r5
   20dfc:	bl	11e10 <fcntl64@plt>
   20e00:	mov	r4, r0
   20e04:	b	20cc8 <__assert_fail@plt+0xed80>
   20e08:	ldr	r3, [pc, #132]	; 20e94 <__assert_fail@plt+0xef4c>
   20e0c:	cmp	r1, r3
   20e10:	bgt	20e60 <__assert_fail@plt+0xef18>
   20e14:	sub	r3, r3, #1
   20e18:	cmp	r1, r3
   20e1c:	bge	20de8 <__assert_fail@plt+0xeea0>
   20e20:	sub	r3, r3, #5
   20e24:	cmp	r1, r3
   20e28:	beq	20e7c <__assert_fail@plt+0xef34>
   20e2c:	add	r3, r3, #1
   20e30:	cmp	r1, r3
   20e34:	beq	20de8 <__assert_fail@plt+0xeea0>
   20e38:	cmp	r1, #1024	; 0x400
   20e3c:	beq	20de8 <__assert_fail@plt+0xeea0>
   20e40:	ldr	r3, [sp, #4]
   20e44:	add	r2, r3, #4
   20e48:	str	r2, [sp, #4]
   20e4c:	ldr	r2, [r3]
   20e50:	mov	r0, r5
   20e54:	bl	11e10 <fcntl64@plt>
   20e58:	mov	r4, r0
   20e5c:	b	20cc8 <__assert_fail@plt+0xed80>
   20e60:	ldr	r3, [pc, #48]	; 20e98 <__assert_fail@plt+0xef50>
   20e64:	cmp	r1, r3
   20e68:	beq	20de8 <__assert_fail@plt+0xeea0>
   20e6c:	blt	20e7c <__assert_fail@plt+0xef34>
   20e70:	add	r3, r3, #1
   20e74:	cmp	r1, r3
   20e78:	bne	20e40 <__assert_fail@plt+0xeef8>
   20e7c:	mov	r0, r5
   20e80:	bl	11e10 <fcntl64@plt>
   20e84:	mov	r4, r0
   20e88:	b	20cc8 <__assert_fail@plt+0xed80>
   20e8c:	andeq	r0, r0, r6, lsl #8
   20e90:	andeq	r5, r3, r4, lsl #20
   20e94:	andeq	r0, r0, r7, lsl #8
   20e98:	andeq	r0, r0, r9, lsl #8
   20e9c:	push	{r4, r5, r6, r7, r8, lr}
   20ea0:	mov	r4, r0
   20ea4:	cmp	r0, #2
   20ea8:	bls	20eb4 <__assert_fail@plt+0xef6c>
   20eac:	mov	r0, r4
   20eb0:	pop	{r4, r5, r6, r7, r8, pc}
   20eb4:	bl	20edc <__assert_fail@plt+0xef94>
   20eb8:	mov	r6, r0
   20ebc:	bl	11d74 <__errno_location@plt>
   20ec0:	mov	r5, r0
   20ec4:	ldr	r7, [r0]
   20ec8:	mov	r0, r4
   20ecc:	bl	11f30 <close@plt>
   20ed0:	str	r7, [r5]
   20ed4:	mov	r4, r6
   20ed8:	b	20eac <__assert_fail@plt+0xef64>
   20edc:	push	{r4, lr}
   20ee0:	and	r1, r1, #524288	; 0x80000
   20ee4:	mov	r2, #3
   20ee8:	ldr	r3, [pc, #16]	; 20f00 <__assert_fail@plt+0xefb8>
   20eec:	cmp	r1, #0
   20ef0:	movne	r1, r3
   20ef4:	moveq	r1, #0
   20ef8:	bl	20c44 <__assert_fail@plt+0xecfc>
   20efc:	pop	{r4, pc}
   20f00:	andeq	r0, r0, r6, lsl #8
   20f04:	push	{r4, r5, r6, lr}
   20f08:	mov	r5, r1
   20f0c:	bl	11e94 <fopen64@plt>
   20f10:	subs	r4, r0, #0
   20f14:	beq	20f28 <__assert_fail@plt+0xefe0>
   20f18:	mov	r0, r4
   20f1c:	bl	11dc8 <fileno@plt>
   20f20:	cmp	r0, #2
   20f24:	bls	20f30 <__assert_fail@plt+0xefe8>
   20f28:	mov	r0, r4
   20f2c:	pop	{r4, r5, r6, pc}
   20f30:	bl	21564 <_obstack_memory_used@@Base+0x80>
   20f34:	subs	r6, r0, #0
   20f38:	blt	20f80 <__assert_fail@plt+0xf038>
   20f3c:	mov	r0, r4
   20f40:	bl	1a934 <__assert_fail@plt+0x89ec>
   20f44:	cmp	r0, #0
   20f48:	bne	20f60 <__assert_fail@plt+0xf018>
   20f4c:	mov	r1, r5
   20f50:	mov	r0, r6
   20f54:	bl	119fc <fdopen@plt>
   20f58:	subs	r4, r0, #0
   20f5c:	bne	20f28 <__assert_fail@plt+0xefe0>
   20f60:	bl	11d74 <__errno_location@plt>
   20f64:	mov	r4, r0
   20f68:	ldr	r5, [r0]
   20f6c:	mov	r0, r6
   20f70:	bl	11f30 <close@plt>
   20f74:	str	r5, [r4]
   20f78:	mov	r4, #0
   20f7c:	b	20f28 <__assert_fail@plt+0xefe0>
   20f80:	bl	11d74 <__errno_location@plt>
   20f84:	mov	r5, r0
   20f88:	ldr	r6, [r0]
   20f8c:	mov	r0, r4
   20f90:	bl	1a934 <__assert_fail@plt+0x89ec>
   20f94:	str	r6, [r5]
   20f98:	mov	r4, #0
   20f9c:	b	20f28 <__assert_fail@plt+0xefe0>
   20fa0:	push	{r4, lr}
   20fa4:	mov	r0, #14
   20fa8:	bl	11e70 <nl_langinfo@plt>
   20fac:	cmp	r0, #0
   20fb0:	beq	20fc8 <__assert_fail@plt+0xf080>
   20fb4:	ldrb	r2, [r0]
   20fb8:	ldr	r3, [pc, #16]	; 20fd0 <__assert_fail@plt+0xf088>
   20fbc:	cmp	r2, #0
   20fc0:	moveq	r0, r3
   20fc4:	pop	{r4, pc}
   20fc8:	ldr	r0, [pc]	; 20fd0 <__assert_fail@plt+0xf088>
   20fcc:	pop	{r4, pc}
   20fd0:	andeq	r4, r2, r0, lsr r7
   20fd4:	push	{r4, r5, r6, r7, lr}
   20fd8:	sub	sp, sp, #12
   20fdc:	mov	r7, r1
   20fe0:	mov	r5, r2
   20fe4:	subs	r6, r0, #0
   20fe8:	addeq	r6, sp, #4
   20fec:	mov	r0, r6
   20ff0:	bl	11c84 <mbrtowc@plt>
   20ff4:	mov	r4, r0
   20ff8:	cmp	r5, #0
   20ffc:	cmnne	r0, #3
   21000:	bhi	21010 <__assert_fail@plt+0xf0c8>
   21004:	mov	r0, r4
   21008:	add	sp, sp, #12
   2100c:	pop	{r4, r5, r6, r7, pc}
   21010:	mov	r0, #0
   21014:	bl	1afd4 <__assert_fail@plt+0x908c>
   21018:	cmp	r0, #0
   2101c:	ldrbeq	r3, [r7]
   21020:	streq	r3, [r6]
   21024:	moveq	r4, #1
   21028:	b	21004 <__assert_fail@plt+0xf0bc>
   2102c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21030:	mov	r5, r0
   21034:	mov	r7, r1
   21038:	mov	r4, r2
   2103c:	mov	r8, r3
   21040:	bl	11d74 <__errno_location@plt>
   21044:	mov	sl, r0
   21048:	mov	r9, #0
   2104c:	str	r9, [sl]
   21050:	mov	r1, r4
   21054:	mov	r0, r5
   21058:	bl	11ca8 <strcoll@plt>
   2105c:	cmp	r0, #0
   21060:	bne	210ac <__assert_fail@plt+0xf164>
   21064:	mov	r0, r5
   21068:	bl	11d50 <strlen@plt>
   2106c:	add	r6, r0, #1
   21070:	mov	r0, r4
   21074:	bl	11d50 <strlen@plt>
   21078:	add	r0, r0, #1
   2107c:	add	r5, r5, r6
   21080:	add	r4, r4, r0
   21084:	sub	r8, r8, r0
   21088:	subs	r7, r7, r6
   2108c:	beq	210a0 <__assert_fail@plt+0xf158>
   21090:	cmp	r8, #0
   21094:	bne	2104c <__assert_fail@plt+0xf104>
   21098:	mov	r0, #1
   2109c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   210a0:	adds	r0, r8, #0
   210a4:	mvnne	r0, #0
   210a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   210ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   210b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   210b4:	mov	r7, r0
   210b8:	mov	r4, r1
   210bc:	mov	r6, r2
   210c0:	mov	r5, r3
   210c4:	cmp	r1, r3
   210c8:	beq	21108 <__assert_fail@plt+0xf1c0>
   210cc:	ldrb	sl, [r7, r4]
   210d0:	ldrb	r9, [r6, r5]
   210d4:	mov	r3, #0
   210d8:	strb	r3, [r7, r4]
   210dc:	strb	r3, [r6, r5]
   210e0:	add	r3, r5, #1
   210e4:	mov	r2, r6
   210e8:	add	r1, r4, #1
   210ec:	mov	r0, r7
   210f0:	bl	2102c <__assert_fail@plt+0xf0e4>
   210f4:	mov	r8, r0
   210f8:	strb	sl, [r7, r4]
   210fc:	strb	r9, [r6, r5]
   21100:	mov	r0, r8
   21104:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21108:	mov	r2, r1
   2110c:	mov	r1, r6
   21110:	bl	11b40 <memcmp@plt>
   21114:	subs	r8, r0, #0
   21118:	bne	210cc <__assert_fail@plt+0xf184>
   2111c:	bl	11d74 <__errno_location@plt>
   21120:	mov	r3, #0
   21124:	str	r3, [r0]
   21128:	b	21100 <__assert_fail@plt+0xf1b8>
   2112c:	push	{r4, r5, r6, r7, r8, lr}
   21130:	mov	r7, r0
   21134:	mov	r4, r1
   21138:	mov	r8, r2
   2113c:	mov	r5, r3
   21140:	cmp	r1, r3
   21144:	beq	21168 <__assert_fail@plt+0xf220>
   21148:	mov	r3, r5
   2114c:	mov	r2, r8
   21150:	mov	r1, r4
   21154:	mov	r0, r7
   21158:	bl	2102c <__assert_fail@plt+0xf0e4>
   2115c:	mov	r6, r0
   21160:	mov	r0, r6
   21164:	pop	{r4, r5, r6, r7, r8, pc}
   21168:	mov	r2, r1
   2116c:	mov	r1, r8
   21170:	bl	11b40 <memcmp@plt>
   21174:	subs	r6, r0, #0
   21178:	bne	21148 <__assert_fail@plt+0xf200>
   2117c:	bl	11d74 <__errno_location@plt>
   21180:	mov	r3, #0
   21184:	str	r3, [r0]
   21188:	b	21160 <__assert_fail@plt+0xf218>
   2118c:	push	{r4, lr}
   21190:	ldrb	r3, [r0, #40]	; 0x28
   21194:	tst	r3, #1
   21198:	bne	211ac <__assert_fail@plt+0xf264>
   2119c:	ldr	r3, [r0, #28]
   211a0:	mov	r0, r1
   211a4:	blx	r3
   211a8:	pop	{r4, pc}
   211ac:	ldr	r3, [r0, #28]
   211b0:	ldr	r0, [r0, #36]	; 0x24
   211b4:	blx	r3
   211b8:	pop	{r4, pc}
   211bc:	push	{r4, lr}
   211c0:	ldrb	r3, [r0, #40]	; 0x28
   211c4:	tst	r3, #1
   211c8:	bne	211dc <__assert_fail@plt+0xf294>
   211cc:	ldr	r3, [r0, #32]
   211d0:	mov	r0, r1
   211d4:	blx	r3
   211d8:	pop	{r4, pc}
   211dc:	ldr	r3, [r0, #32]
   211e0:	ldr	r0, [r0, #36]	; 0x24
   211e4:	blx	r3
   211e8:	pop	{r4, pc}
   211ec:	push	{r4, r5, r6, lr}
   211f0:	mov	r4, r0
   211f4:	subs	r5, r2, #0
   211f8:	cmp	r2, #0
   211fc:	moveq	r5, #8
   21200:	ldr	r3, [pc, #112]	; 21278 <__assert_fail@plt+0xf330>
   21204:	cmp	r1, #0
   21208:	moveq	r1, r3
   2120c:	str	r1, [r0]
   21210:	sub	r6, r5, #1
   21214:	str	r6, [r0, #24]
   21218:	bl	2118c <__assert_fail@plt+0xf244>
   2121c:	str	r0, [r4, #4]
   21220:	cmp	r0, #0
   21224:	beq	2126c <__assert_fail@plt+0xf324>
   21228:	add	r3, r0, #8
   2122c:	add	r3, r3, r6
   21230:	rsb	r5, r5, #0
   21234:	and	r5, r5, r3
   21238:	str	r5, [r4, #8]
   2123c:	str	r5, [r4, #12]
   21240:	ldr	r3, [r4]
   21244:	add	r3, r0, r3
   21248:	str	r3, [r0]
   2124c:	str	r3, [r4, #16]
   21250:	mov	r3, #0
   21254:	str	r3, [r0, #4]
   21258:	ldrb	r3, [r4, #40]	; 0x28
   2125c:	and	r3, r3, #249	; 0xf9
   21260:	strb	r3, [r4, #40]	; 0x28
   21264:	mov	r0, #1
   21268:	pop	{r4, r5, r6, pc}
   2126c:	ldr	r3, [pc, #8]	; 2127c <__assert_fail@plt+0xf334>
   21270:	ldr	r3, [r3]
   21274:	blx	r3
   21278:	andeq	r0, r0, r8, ror #31
   2127c:			; <UNDEFINED> instruction: 0x000352b4
   21280:	push	{r4, lr}
   21284:	ldr	r3, [pc, #48]	; 212bc <__assert_fail@plt+0xf374>
   21288:	ldr	r4, [r3]
   2128c:	mov	r2, #5
   21290:	ldr	r1, [pc, #40]	; 212c0 <__assert_fail@plt+0xf378>
   21294:	mov	r0, #0
   21298:	bl	11b58 <dcgettext@plt>
   2129c:	mov	r3, r0
   212a0:	ldr	r2, [pc, #28]	; 212c4 <__assert_fail@plt+0xf37c>
   212a4:	mov	r1, #1
   212a8:	mov	r0, r4
   212ac:	bl	11dd4 <__fprintf_chk@plt>
   212b0:	ldr	r3, [pc, #16]	; 212c8 <__assert_fail@plt+0xf380>
   212b4:	ldr	r0, [r3]
   212b8:	bl	11d38 <exit@plt>
   212bc:	andeq	r5, r3, r8, asr #5
   212c0:	andeq	r4, r2, r0, lsl #12
   212c4:	andeq	r4, r2, ip, ror #5
   212c8:	andeq	r5, r3, r0, ror r2

000212cc <_obstack_begin@@Base>:
   212cc:	push	{r4, lr}
   212d0:	str	r3, [r0, #28]
   212d4:	ldr	r3, [sp, #8]
   212d8:	str	r3, [r0, #32]
   212dc:	ldrb	r3, [r0, #40]	; 0x28
   212e0:	bic	r3, r3, #1
   212e4:	strb	r3, [r0, #40]	; 0x28
   212e8:	bl	211ec <__assert_fail@plt+0xf2a4>
   212ec:	pop	{r4, pc}

000212f0 <_obstack_begin_1@@Base>:
   212f0:	push	{r4, lr}
   212f4:	str	r3, [r0, #28]
   212f8:	ldr	r3, [sp, #8]
   212fc:	str	r3, [r0, #32]
   21300:	ldr	r3, [sp, #12]
   21304:	str	r3, [r0, #36]	; 0x24
   21308:	ldrb	r3, [r0, #40]	; 0x28
   2130c:	orr	r3, r3, #1
   21310:	strb	r3, [r0, #40]	; 0x28
   21314:	bl	211ec <__assert_fail@plt+0xf2a4>
   21318:	pop	{r4, pc}

0002131c <_obstack_newchunk@@Base>:
   2131c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21320:	ldr	r5, [r0, #12]
   21324:	ldr	r3, [r0, #8]
   21328:	sub	r7, r5, r3
   2132c:	add	r1, r7, r1
   21330:	ldr	r3, [r0, #24]
   21334:	adds	r3, r1, r3
   21338:	movcc	r2, #1
   2133c:	movcs	r2, #0
   21340:	cmp	r7, r1
   21344:	movhi	r1, #0
   21348:	andls	r1, r2, #1
   2134c:	cmp	r1, #0
   21350:	bne	21360 <_obstack_newchunk@@Base+0x44>
   21354:	ldr	r3, [pc, #204]	; 21428 <_obstack_newchunk@@Base+0x10c>
   21358:	ldr	r3, [r3]
   2135c:	blx	r3
   21360:	mov	r4, r0
   21364:	ldr	r8, [r0, #4]
   21368:	add	r1, r3, r7, lsr #3
   2136c:	add	r1, r1, #100	; 0x64
   21370:	ldr	r6, [r0]
   21374:	cmp	r3, r6
   21378:	movcc	r3, r6
   2137c:	cmp	r3, r1
   21380:	movcs	r6, r3
   21384:	movcc	r6, r1
   21388:	mov	r1, r6
   2138c:	bl	2118c <__assert_fail@plt+0xf244>
   21390:	subs	r9, r0, #0
   21394:	beq	21354 <_obstack_newchunk@@Base+0x38>
   21398:	str	r9, [r4, #4]
   2139c:	str	r8, [r9, #4]
   213a0:	add	r1, r9, r6
   213a4:	str	r1, [r4, #16]
   213a8:	mov	r5, r9
   213ac:	str	r1, [r5], #8
   213b0:	ldr	r3, [r4, #24]
   213b4:	add	r5, r5, r3
   213b8:	bic	r5, r5, r3
   213bc:	mov	r2, r7
   213c0:	ldr	r1, [r4, #8]
   213c4:	mov	r0, r5
   213c8:	bl	11ac8 <memcpy@plt>
   213cc:	ldrb	r3, [r4, #40]	; 0x28
   213d0:	tst	r3, #2
   213d4:	bne	213f4 <_obstack_newchunk@@Base+0xd8>
   213d8:	ldr	r2, [r4, #24]
   213dc:	add	r3, r8, #8
   213e0:	add	r3, r3, r2
   213e4:	bic	r3, r3, r2
   213e8:	ldr	r2, [r4, #8]
   213ec:	cmp	r2, r3
   213f0:	beq	21410 <_obstack_newchunk@@Base+0xf4>
   213f4:	str	r5, [r4, #8]
   213f8:	add	r5, r5, r7
   213fc:	str	r5, [r4, #12]
   21400:	ldrb	r3, [r4, #40]	; 0x28
   21404:	bic	r3, r3, #2
   21408:	strb	r3, [r4, #40]	; 0x28
   2140c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21410:	ldr	r3, [r8, #4]
   21414:	str	r3, [r9, #4]
   21418:	mov	r1, r8
   2141c:	mov	r0, r4
   21420:	bl	211bc <__assert_fail@plt+0xf274>
   21424:	b	213f4 <_obstack_newchunk@@Base+0xd8>
   21428:			; <UNDEFINED> instruction: 0x000352b4

0002142c <_obstack_allocated_p@@Base>:
   2142c:	ldr	r0, [r0, #4]
   21430:	cmp	r0, #0
   21434:	bne	21448 <_obstack_allocated_p@@Base+0x1c>
   21438:	b	2145c <_obstack_allocated_p@@Base+0x30>
   2143c:	ldr	r0, [r0, #4]
   21440:	cmp	r0, #0
   21444:	beq	2145c <_obstack_allocated_p@@Base+0x30>
   21448:	cmp	r1, r0
   2144c:	bls	2143c <_obstack_allocated_p@@Base+0x10>
   21450:	ldr	r3, [r0]
   21454:	cmp	r1, r3
   21458:	bhi	2143c <_obstack_allocated_p@@Base+0x10>
   2145c:	adds	r0, r0, #0
   21460:	movne	r0, #1
   21464:	bx	lr

00021468 <_obstack_free@@Base>:
   21468:	push	{r4, r5, r6, lr}
   2146c:	mov	r4, r0
   21470:	mov	r6, r1
   21474:	ldr	r1, [r0, #4]
   21478:	cmp	r1, #0
   2147c:	bne	214b0 <_obstack_free@@Base+0x48>
   21480:	cmp	r6, #0
   21484:	popeq	{r4, r5, r6, pc}
   21488:	bl	11f24 <abort@plt>
   2148c:	ldr	r5, [r1, #4]
   21490:	mov	r0, r4
   21494:	bl	211bc <__assert_fail@plt+0xf274>
   21498:	ldrb	r3, [r4, #40]	; 0x28
   2149c:	orr	r3, r3, #2
   214a0:	strb	r3, [r4, #40]	; 0x28
   214a4:	mov	r1, r5
   214a8:	cmp	r5, #0
   214ac:	beq	21480 <_obstack_free@@Base+0x18>
   214b0:	cmp	r6, r1
   214b4:	bls	2148c <_obstack_free@@Base+0x24>
   214b8:	ldr	r3, [r1]
   214bc:	cmp	r6, r3
   214c0:	bhi	2148c <_obstack_free@@Base+0x24>
   214c4:	cmp	r1, #0
   214c8:	beq	21480 <_obstack_free@@Base+0x18>
   214cc:	str	r6, [r4, #12]
   214d0:	str	r6, [r4, #8]
   214d4:	ldr	r3, [r1]
   214d8:	str	r3, [r4, #16]
   214dc:	str	r1, [r4, #4]
   214e0:	pop	{r4, r5, r6, pc}

000214e4 <_obstack_memory_used@@Base>:
   214e4:	ldr	r3, [r0, #4]
   214e8:	cmp	r3, #0
   214ec:	beq	21510 <_obstack_memory_used@@Base+0x2c>
   214f0:	mov	r0, #0
   214f4:	ldr	r2, [r3]
   214f8:	sub	r2, r2, r3
   214fc:	add	r0, r0, r2
   21500:	ldr	r3, [r3, #4]
   21504:	cmp	r3, #0
   21508:	bne	214f4 <_obstack_memory_used@@Base+0x10>
   2150c:	bx	lr
   21510:	mov	r0, #0
   21514:	bx	lr
   21518:	push	{r4, r5, r6, lr}
   2151c:	mov	r6, r0
   21520:	mov	r5, r1
   21524:	subs	r4, r2, #0
   21528:	beq	21554 <_obstack_memory_used@@Base+0x70>
   2152c:	mov	r1, r4
   21530:	mvn	r0, #0
   21534:	bl	21578 <_obstack_memory_used@@Base+0x94>
   21538:	cmp	r0, r5
   2153c:	bcs	21554 <_obstack_memory_used@@Base+0x70>
   21540:	bl	11d74 <__errno_location@plt>
   21544:	mov	r3, #12
   21548:	str	r3, [r0]
   2154c:	mov	r0, #0
   21550:	pop	{r4, r5, r6, pc}
   21554:	mul	r1, r5, r4
   21558:	mov	r0, r6
   2155c:	bl	20a94 <__assert_fail@plt+0xeb4c>
   21560:	pop	{r4, r5, r6, pc}
   21564:	push	{r4, lr}
   21568:	mov	r2, #3
   2156c:	mov	r1, #0
   21570:	bl	20c44 <__assert_fail@plt+0xecfc>
   21574:	pop	{r4, pc}
   21578:	subs	r2, r1, #1
   2157c:	bxeq	lr
   21580:	bcc	21758 <_obstack_memory_used@@Base+0x274>
   21584:	cmp	r0, r1
   21588:	bls	2173c <_obstack_memory_used@@Base+0x258>
   2158c:	tst	r1, r2
   21590:	beq	21748 <_obstack_memory_used@@Base+0x264>
   21594:	clz	r3, r0
   21598:	clz	r2, r1
   2159c:	sub	r3, r2, r3
   215a0:	rsbs	r3, r3, #31
   215a4:	addne	r3, r3, r3, lsl #1
   215a8:	mov	r2, #0
   215ac:	addne	pc, pc, r3, lsl #2
   215b0:	nop			; (mov r0, r0)
   215b4:	cmp	r0, r1, lsl #31
   215b8:	adc	r2, r2, r2
   215bc:	subcs	r0, r0, r1, lsl #31
   215c0:	cmp	r0, r1, lsl #30
   215c4:	adc	r2, r2, r2
   215c8:	subcs	r0, r0, r1, lsl #30
   215cc:	cmp	r0, r1, lsl #29
   215d0:	adc	r2, r2, r2
   215d4:	subcs	r0, r0, r1, lsl #29
   215d8:	cmp	r0, r1, lsl #28
   215dc:	adc	r2, r2, r2
   215e0:	subcs	r0, r0, r1, lsl #28
   215e4:	cmp	r0, r1, lsl #27
   215e8:	adc	r2, r2, r2
   215ec:	subcs	r0, r0, r1, lsl #27
   215f0:	cmp	r0, r1, lsl #26
   215f4:	adc	r2, r2, r2
   215f8:	subcs	r0, r0, r1, lsl #26
   215fc:	cmp	r0, r1, lsl #25
   21600:	adc	r2, r2, r2
   21604:	subcs	r0, r0, r1, lsl #25
   21608:	cmp	r0, r1, lsl #24
   2160c:	adc	r2, r2, r2
   21610:	subcs	r0, r0, r1, lsl #24
   21614:	cmp	r0, r1, lsl #23
   21618:	adc	r2, r2, r2
   2161c:	subcs	r0, r0, r1, lsl #23
   21620:	cmp	r0, r1, lsl #22
   21624:	adc	r2, r2, r2
   21628:	subcs	r0, r0, r1, lsl #22
   2162c:	cmp	r0, r1, lsl #21
   21630:	adc	r2, r2, r2
   21634:	subcs	r0, r0, r1, lsl #21
   21638:	cmp	r0, r1, lsl #20
   2163c:	adc	r2, r2, r2
   21640:	subcs	r0, r0, r1, lsl #20
   21644:	cmp	r0, r1, lsl #19
   21648:	adc	r2, r2, r2
   2164c:	subcs	r0, r0, r1, lsl #19
   21650:	cmp	r0, r1, lsl #18
   21654:	adc	r2, r2, r2
   21658:	subcs	r0, r0, r1, lsl #18
   2165c:	cmp	r0, r1, lsl #17
   21660:	adc	r2, r2, r2
   21664:	subcs	r0, r0, r1, lsl #17
   21668:	cmp	r0, r1, lsl #16
   2166c:	adc	r2, r2, r2
   21670:	subcs	r0, r0, r1, lsl #16
   21674:	cmp	r0, r1, lsl #15
   21678:	adc	r2, r2, r2
   2167c:	subcs	r0, r0, r1, lsl #15
   21680:	cmp	r0, r1, lsl #14
   21684:	adc	r2, r2, r2
   21688:	subcs	r0, r0, r1, lsl #14
   2168c:	cmp	r0, r1, lsl #13
   21690:	adc	r2, r2, r2
   21694:	subcs	r0, r0, r1, lsl #13
   21698:	cmp	r0, r1, lsl #12
   2169c:	adc	r2, r2, r2
   216a0:	subcs	r0, r0, r1, lsl #12
   216a4:	cmp	r0, r1, lsl #11
   216a8:	adc	r2, r2, r2
   216ac:	subcs	r0, r0, r1, lsl #11
   216b0:	cmp	r0, r1, lsl #10
   216b4:	adc	r2, r2, r2
   216b8:	subcs	r0, r0, r1, lsl #10
   216bc:	cmp	r0, r1, lsl #9
   216c0:	adc	r2, r2, r2
   216c4:	subcs	r0, r0, r1, lsl #9
   216c8:	cmp	r0, r1, lsl #8
   216cc:	adc	r2, r2, r2
   216d0:	subcs	r0, r0, r1, lsl #8
   216d4:	cmp	r0, r1, lsl #7
   216d8:	adc	r2, r2, r2
   216dc:	subcs	r0, r0, r1, lsl #7
   216e0:	cmp	r0, r1, lsl #6
   216e4:	adc	r2, r2, r2
   216e8:	subcs	r0, r0, r1, lsl #6
   216ec:	cmp	r0, r1, lsl #5
   216f0:	adc	r2, r2, r2
   216f4:	subcs	r0, r0, r1, lsl #5
   216f8:	cmp	r0, r1, lsl #4
   216fc:	adc	r2, r2, r2
   21700:	subcs	r0, r0, r1, lsl #4
   21704:	cmp	r0, r1, lsl #3
   21708:	adc	r2, r2, r2
   2170c:	subcs	r0, r0, r1, lsl #3
   21710:	cmp	r0, r1, lsl #2
   21714:	adc	r2, r2, r2
   21718:	subcs	r0, r0, r1, lsl #2
   2171c:	cmp	r0, r1, lsl #1
   21720:	adc	r2, r2, r2
   21724:	subcs	r0, r0, r1, lsl #1
   21728:	cmp	r0, r1
   2172c:	adc	r2, r2, r2
   21730:	subcs	r0, r0, r1
   21734:	mov	r0, r2
   21738:	bx	lr
   2173c:	moveq	r0, #1
   21740:	movne	r0, #0
   21744:	bx	lr
   21748:	clz	r2, r1
   2174c:	rsb	r2, r2, #31
   21750:	lsr	r0, r0, r2
   21754:	bx	lr
   21758:	cmp	r0, #0
   2175c:	mvnne	r0, #0
   21760:	b	21db8 <_obstack_memory_used@@Base+0x8d4>
   21764:	cmp	r1, #0
   21768:	beq	21758 <_obstack_memory_used@@Base+0x274>
   2176c:	push	{r0, r1, lr}
   21770:	bl	21578 <_obstack_memory_used@@Base+0x94>
   21774:	pop	{r1, r2, lr}
   21778:	mul	r3, r2, r0
   2177c:	sub	r1, r1, r3
   21780:	bx	lr
   21784:	cmp	r1, #0
   21788:	beq	21994 <_obstack_memory_used@@Base+0x4b0>
   2178c:	eor	ip, r0, r1
   21790:	rsbmi	r1, r1, #0
   21794:	subs	r2, r1, #1
   21798:	beq	21960 <_obstack_memory_used@@Base+0x47c>
   2179c:	movs	r3, r0
   217a0:	rsbmi	r3, r0, #0
   217a4:	cmp	r3, r1
   217a8:	bls	2196c <_obstack_memory_used@@Base+0x488>
   217ac:	tst	r1, r2
   217b0:	beq	2197c <_obstack_memory_used@@Base+0x498>
   217b4:	clz	r2, r3
   217b8:	clz	r0, r1
   217bc:	sub	r2, r0, r2
   217c0:	rsbs	r2, r2, #31
   217c4:	addne	r2, r2, r2, lsl #1
   217c8:	mov	r0, #0
   217cc:	addne	pc, pc, r2, lsl #2
   217d0:	nop			; (mov r0, r0)
   217d4:	cmp	r3, r1, lsl #31
   217d8:	adc	r0, r0, r0
   217dc:	subcs	r3, r3, r1, lsl #31
   217e0:	cmp	r3, r1, lsl #30
   217e4:	adc	r0, r0, r0
   217e8:	subcs	r3, r3, r1, lsl #30
   217ec:	cmp	r3, r1, lsl #29
   217f0:	adc	r0, r0, r0
   217f4:	subcs	r3, r3, r1, lsl #29
   217f8:	cmp	r3, r1, lsl #28
   217fc:	adc	r0, r0, r0
   21800:	subcs	r3, r3, r1, lsl #28
   21804:	cmp	r3, r1, lsl #27
   21808:	adc	r0, r0, r0
   2180c:	subcs	r3, r3, r1, lsl #27
   21810:	cmp	r3, r1, lsl #26
   21814:	adc	r0, r0, r0
   21818:	subcs	r3, r3, r1, lsl #26
   2181c:	cmp	r3, r1, lsl #25
   21820:	adc	r0, r0, r0
   21824:	subcs	r3, r3, r1, lsl #25
   21828:	cmp	r3, r1, lsl #24
   2182c:	adc	r0, r0, r0
   21830:	subcs	r3, r3, r1, lsl #24
   21834:	cmp	r3, r1, lsl #23
   21838:	adc	r0, r0, r0
   2183c:	subcs	r3, r3, r1, lsl #23
   21840:	cmp	r3, r1, lsl #22
   21844:	adc	r0, r0, r0
   21848:	subcs	r3, r3, r1, lsl #22
   2184c:	cmp	r3, r1, lsl #21
   21850:	adc	r0, r0, r0
   21854:	subcs	r3, r3, r1, lsl #21
   21858:	cmp	r3, r1, lsl #20
   2185c:	adc	r0, r0, r0
   21860:	subcs	r3, r3, r1, lsl #20
   21864:	cmp	r3, r1, lsl #19
   21868:	adc	r0, r0, r0
   2186c:	subcs	r3, r3, r1, lsl #19
   21870:	cmp	r3, r1, lsl #18
   21874:	adc	r0, r0, r0
   21878:	subcs	r3, r3, r1, lsl #18
   2187c:	cmp	r3, r1, lsl #17
   21880:	adc	r0, r0, r0
   21884:	subcs	r3, r3, r1, lsl #17
   21888:	cmp	r3, r1, lsl #16
   2188c:	adc	r0, r0, r0
   21890:	subcs	r3, r3, r1, lsl #16
   21894:	cmp	r3, r1, lsl #15
   21898:	adc	r0, r0, r0
   2189c:	subcs	r3, r3, r1, lsl #15
   218a0:	cmp	r3, r1, lsl #14
   218a4:	adc	r0, r0, r0
   218a8:	subcs	r3, r3, r1, lsl #14
   218ac:	cmp	r3, r1, lsl #13
   218b0:	adc	r0, r0, r0
   218b4:	subcs	r3, r3, r1, lsl #13
   218b8:	cmp	r3, r1, lsl #12
   218bc:	adc	r0, r0, r0
   218c0:	subcs	r3, r3, r1, lsl #12
   218c4:	cmp	r3, r1, lsl #11
   218c8:	adc	r0, r0, r0
   218cc:	subcs	r3, r3, r1, lsl #11
   218d0:	cmp	r3, r1, lsl #10
   218d4:	adc	r0, r0, r0
   218d8:	subcs	r3, r3, r1, lsl #10
   218dc:	cmp	r3, r1, lsl #9
   218e0:	adc	r0, r0, r0
   218e4:	subcs	r3, r3, r1, lsl #9
   218e8:	cmp	r3, r1, lsl #8
   218ec:	adc	r0, r0, r0
   218f0:	subcs	r3, r3, r1, lsl #8
   218f4:	cmp	r3, r1, lsl #7
   218f8:	adc	r0, r0, r0
   218fc:	subcs	r3, r3, r1, lsl #7
   21900:	cmp	r3, r1, lsl #6
   21904:	adc	r0, r0, r0
   21908:	subcs	r3, r3, r1, lsl #6
   2190c:	cmp	r3, r1, lsl #5
   21910:	adc	r0, r0, r0
   21914:	subcs	r3, r3, r1, lsl #5
   21918:	cmp	r3, r1, lsl #4
   2191c:	adc	r0, r0, r0
   21920:	subcs	r3, r3, r1, lsl #4
   21924:	cmp	r3, r1, lsl #3
   21928:	adc	r0, r0, r0
   2192c:	subcs	r3, r3, r1, lsl #3
   21930:	cmp	r3, r1, lsl #2
   21934:	adc	r0, r0, r0
   21938:	subcs	r3, r3, r1, lsl #2
   2193c:	cmp	r3, r1, lsl #1
   21940:	adc	r0, r0, r0
   21944:	subcs	r3, r3, r1, lsl #1
   21948:	cmp	r3, r1
   2194c:	adc	r0, r0, r0
   21950:	subcs	r3, r3, r1
   21954:	cmp	ip, #0
   21958:	rsbmi	r0, r0, #0
   2195c:	bx	lr
   21960:	teq	ip, r0
   21964:	rsbmi	r0, r0, #0
   21968:	bx	lr
   2196c:	movcc	r0, #0
   21970:	asreq	r0, ip, #31
   21974:	orreq	r0, r0, #1
   21978:	bx	lr
   2197c:	clz	r2, r1
   21980:	rsb	r2, r2, #31
   21984:	cmp	ip, #0
   21988:	lsr	r0, r3, r2
   2198c:	rsbmi	r0, r0, #0
   21990:	bx	lr
   21994:	cmp	r0, #0
   21998:	mvngt	r0, #-2147483648	; 0x80000000
   2199c:	movlt	r0, #-2147483648	; 0x80000000
   219a0:	b	21db8 <_obstack_memory_used@@Base+0x8d4>
   219a4:	cmp	r1, #0
   219a8:	beq	21994 <_obstack_memory_used@@Base+0x4b0>
   219ac:	push	{r0, r1, lr}
   219b0:	bl	2178c <_obstack_memory_used@@Base+0x2a8>
   219b4:	pop	{r1, r2, lr}
   219b8:	mul	r3, r2, r0
   219bc:	sub	r1, r1, r3
   219c0:	bx	lr
   219c4:	eor	r1, r1, #-2147483648	; 0x80000000
   219c8:	b	219d0 <_obstack_memory_used@@Base+0x4ec>
   219cc:	eor	r3, r3, #-2147483648	; 0x80000000
   219d0:	push	{r4, r5, lr}
   219d4:	lsl	r4, r1, #1
   219d8:	lsl	r5, r3, #1
   219dc:	teq	r4, r5
   219e0:	teqeq	r0, r2
   219e4:	orrsne	ip, r4, r0
   219e8:	orrsne	ip, r5, r2
   219ec:	mvnsne	ip, r4, asr #21
   219f0:	mvnsne	ip, r5, asr #21
   219f4:	beq	21be0 <_obstack_memory_used@@Base+0x6fc>
   219f8:	lsr	r4, r4, #21
   219fc:	rsbs	r5, r4, r5, lsr #21
   21a00:	rsblt	r5, r5, #0
   21a04:	ble	21a24 <_obstack_memory_used@@Base+0x540>
   21a08:	add	r4, r4, r5
   21a0c:	eor	r2, r0, r2
   21a10:	eor	r3, r1, r3
   21a14:	eor	r0, r2, r0
   21a18:	eor	r1, r3, r1
   21a1c:	eor	r2, r0, r2
   21a20:	eor	r3, r1, r3
   21a24:	cmp	r5, #54	; 0x36
   21a28:	pophi	{r4, r5, pc}
   21a2c:	tst	r1, #-2147483648	; 0x80000000
   21a30:	lsl	r1, r1, #12
   21a34:	mov	ip, #1048576	; 0x100000
   21a38:	orr	r1, ip, r1, lsr #12
   21a3c:	beq	21a48 <_obstack_memory_used@@Base+0x564>
   21a40:	rsbs	r0, r0, #0
   21a44:	rsc	r1, r1, #0
   21a48:	tst	r3, #-2147483648	; 0x80000000
   21a4c:	lsl	r3, r3, #12
   21a50:	orr	r3, ip, r3, lsr #12
   21a54:	beq	21a60 <_obstack_memory_used@@Base+0x57c>
   21a58:	rsbs	r2, r2, #0
   21a5c:	rsc	r3, r3, #0
   21a60:	teq	r4, r5
   21a64:	beq	21bc8 <_obstack_memory_used@@Base+0x6e4>
   21a68:	sub	r4, r4, #1
   21a6c:	rsbs	lr, r5, #32
   21a70:	blt	21a8c <_obstack_memory_used@@Base+0x5a8>
   21a74:	lsl	ip, r2, lr
   21a78:	adds	r0, r0, r2, lsr r5
   21a7c:	adc	r1, r1, #0
   21a80:	adds	r0, r0, r3, lsl lr
   21a84:	adcs	r1, r1, r3, asr r5
   21a88:	b	21aa8 <_obstack_memory_used@@Base+0x5c4>
   21a8c:	sub	r5, r5, #32
   21a90:	add	lr, lr, #32
   21a94:	cmp	r2, #1
   21a98:	lsl	ip, r3, lr
   21a9c:	orrcs	ip, ip, #2
   21aa0:	adds	r0, r0, r3, asr r5
   21aa4:	adcs	r1, r1, r3, asr #31
   21aa8:	and	r5, r1, #-2147483648	; 0x80000000
   21aac:	bpl	21abc <_obstack_memory_used@@Base+0x5d8>
   21ab0:	rsbs	ip, ip, #0
   21ab4:	rscs	r0, r0, #0
   21ab8:	rsc	r1, r1, #0
   21abc:	cmp	r1, #1048576	; 0x100000
   21ac0:	bcc	21b00 <_obstack_memory_used@@Base+0x61c>
   21ac4:	cmp	r1, #2097152	; 0x200000
   21ac8:	bcc	21ae8 <_obstack_memory_used@@Base+0x604>
   21acc:	lsrs	r1, r1, #1
   21ad0:	rrxs	r0, r0
   21ad4:	rrx	ip, ip
   21ad8:	add	r4, r4, #1
   21adc:	lsl	r2, r4, #21
   21ae0:	cmn	r2, #4194304	; 0x400000
   21ae4:	bcs	21c40 <_obstack_memory_used@@Base+0x75c>
   21ae8:	cmp	ip, #-2147483648	; 0x80000000
   21aec:	lsrseq	ip, r0, #1
   21af0:	adcs	r0, r0, #0
   21af4:	adc	r1, r1, r4, lsl #20
   21af8:	orr	r1, r1, r5
   21afc:	pop	{r4, r5, pc}
   21b00:	lsls	ip, ip, #1
   21b04:	adcs	r0, r0, r0
   21b08:	adc	r1, r1, r1
   21b0c:	tst	r1, #1048576	; 0x100000
   21b10:	sub	r4, r4, #1
   21b14:	bne	21ae8 <_obstack_memory_used@@Base+0x604>
   21b18:	teq	r1, #0
   21b1c:	moveq	r1, r0
   21b20:	moveq	r0, #0
   21b24:	clz	r3, r1
   21b28:	addeq	r3, r3, #32
   21b2c:	sub	r3, r3, #11
   21b30:	subs	r2, r3, #32
   21b34:	bge	21b58 <_obstack_memory_used@@Base+0x674>
   21b38:	adds	r2, r2, #12
   21b3c:	ble	21b54 <_obstack_memory_used@@Base+0x670>
   21b40:	add	ip, r2, #20
   21b44:	rsb	r2, r2, #12
   21b48:	lsl	r0, r1, ip
   21b4c:	lsr	r1, r1, r2
   21b50:	b	21b68 <_obstack_memory_used@@Base+0x684>
   21b54:	add	r2, r2, #20
   21b58:	rsble	ip, r2, #32
   21b5c:	lsl	r1, r1, r2
   21b60:	orrle	r1, r1, r0, lsr ip
   21b64:	lslle	r0, r0, r2
   21b68:	subs	r4, r4, r3
   21b6c:	addge	r1, r1, r4, lsl #20
   21b70:	orrge	r1, r1, r5
   21b74:	popge	{r4, r5, pc}
   21b78:	mvn	r4, r4
   21b7c:	subs	r4, r4, #31
   21b80:	bge	21bbc <_obstack_memory_used@@Base+0x6d8>
   21b84:	adds	r4, r4, #12
   21b88:	bgt	21ba4 <_obstack_memory_used@@Base+0x6c0>
   21b8c:	add	r4, r4, #20
   21b90:	rsb	r2, r4, #32
   21b94:	lsr	r0, r0, r4
   21b98:	orr	r0, r0, r1, lsl r2
   21b9c:	orr	r1, r5, r1, lsr r4
   21ba0:	pop	{r4, r5, pc}
   21ba4:	rsb	r4, r4, #12
   21ba8:	rsb	r2, r4, #32
   21bac:	lsr	r0, r0, r2
   21bb0:	orr	r0, r0, r1, lsl r4
   21bb4:	mov	r1, r5
   21bb8:	pop	{r4, r5, pc}
   21bbc:	lsr	r0, r1, r4
   21bc0:	mov	r1, r5
   21bc4:	pop	{r4, r5, pc}
   21bc8:	teq	r4, #0
   21bcc:	eor	r3, r3, #1048576	; 0x100000
   21bd0:	eoreq	r1, r1, #1048576	; 0x100000
   21bd4:	addeq	r4, r4, #1
   21bd8:	subne	r5, r5, #1
   21bdc:	b	21a68 <_obstack_memory_used@@Base+0x584>
   21be0:	mvns	ip, r4, asr #21
   21be4:	mvnsne	ip, r5, asr #21
   21be8:	beq	21c50 <_obstack_memory_used@@Base+0x76c>
   21bec:	teq	r4, r5
   21bf0:	teqeq	r0, r2
   21bf4:	beq	21c08 <_obstack_memory_used@@Base+0x724>
   21bf8:	orrs	ip, r4, r0
   21bfc:	moveq	r1, r3
   21c00:	moveq	r0, r2
   21c04:	pop	{r4, r5, pc}
   21c08:	teq	r1, r3
   21c0c:	movne	r1, #0
   21c10:	movne	r0, #0
   21c14:	popne	{r4, r5, pc}
   21c18:	lsrs	ip, r4, #21
   21c1c:	bne	21c30 <_obstack_memory_used@@Base+0x74c>
   21c20:	lsls	r0, r0, #1
   21c24:	adcs	r1, r1, r1
   21c28:	orrcs	r1, r1, #-2147483648	; 0x80000000
   21c2c:	pop	{r4, r5, pc}
   21c30:	adds	r4, r4, #4194304	; 0x400000
   21c34:	addcc	r1, r1, #1048576	; 0x100000
   21c38:	popcc	{r4, r5, pc}
   21c3c:	and	r5, r1, #-2147483648	; 0x80000000
   21c40:	orr	r1, r5, #2130706432	; 0x7f000000
   21c44:	orr	r1, r1, #15728640	; 0xf00000
   21c48:	mov	r0, #0
   21c4c:	pop	{r4, r5, pc}
   21c50:	mvns	ip, r4, asr #21
   21c54:	movne	r1, r3
   21c58:	movne	r0, r2
   21c5c:	mvnseq	ip, r5, asr #21
   21c60:	movne	r3, r1
   21c64:	movne	r2, r0
   21c68:	orrs	r4, r0, r1, lsl #12
   21c6c:	orrseq	r5, r2, r3, lsl #12
   21c70:	teqeq	r1, r3
   21c74:	orrne	r1, r1, #524288	; 0x80000
   21c78:	pop	{r4, r5, pc}
   21c7c:	teq	r0, #0
   21c80:	moveq	r1, #0
   21c84:	bxeq	lr
   21c88:	push	{r4, r5, lr}
   21c8c:	mov	r4, #1024	; 0x400
   21c90:	add	r4, r4, #50	; 0x32
   21c94:	mov	r5, #0
   21c98:	mov	r1, #0
   21c9c:	b	21b18 <_obstack_memory_used@@Base+0x634>
   21ca0:	teq	r0, #0
   21ca4:	moveq	r1, #0
   21ca8:	bxeq	lr
   21cac:	push	{r4, r5, lr}
   21cb0:	mov	r4, #1024	; 0x400
   21cb4:	add	r4, r4, #50	; 0x32
   21cb8:	ands	r5, r0, #-2147483648	; 0x80000000
   21cbc:	rsbmi	r0, r0, #0
   21cc0:	mov	r1, #0
   21cc4:	b	21b18 <_obstack_memory_used@@Base+0x634>
   21cc8:	lsls	r2, r0, #1
   21ccc:	asr	r1, r2, #3
   21cd0:	rrx	r1, r1
   21cd4:	lsl	r0, r2, #28
   21cd8:	andsne	r3, r2, #-16777216	; 0xff000000
   21cdc:	teqne	r3, #-16777216	; 0xff000000
   21ce0:	eorne	r1, r1, #939524096	; 0x38000000
   21ce4:	bxne	lr
   21ce8:	teq	r2, #0
   21cec:	teqne	r3, #-16777216	; 0xff000000
   21cf0:	bxeq	lr
   21cf4:	push	{r4, r5, lr}
   21cf8:	mov	r4, #896	; 0x380
   21cfc:	and	r5, r1, #-2147483648	; 0x80000000
   21d00:	bic	r1, r1, #-2147483648	; 0x80000000
   21d04:	b	21b18 <_obstack_memory_used@@Base+0x634>
   21d08:	orrs	r2, r0, r1
   21d0c:	bxeq	lr
   21d10:	push	{r4, r5, lr}
   21d14:	mov	r5, #0
   21d18:	b	21d38 <_obstack_memory_used@@Base+0x854>
   21d1c:	orrs	r2, r0, r1
   21d20:	bxeq	lr
   21d24:	push	{r4, r5, lr}
   21d28:	ands	r5, r1, #-2147483648	; 0x80000000
   21d2c:	bpl	21d38 <_obstack_memory_used@@Base+0x854>
   21d30:	rsbs	r0, r0, #0
   21d34:	rsc	r1, r1, #0
   21d38:	mov	r4, #1024	; 0x400
   21d3c:	add	r4, r4, #50	; 0x32
   21d40:	lsrs	ip, r1, #22
   21d44:	beq	21abc <_obstack_memory_used@@Base+0x5d8>
   21d48:	mov	r2, #3
   21d4c:	lsrs	ip, ip, #3
   21d50:	addne	r2, r2, #3
   21d54:	lsrs	ip, ip, #3
   21d58:	addne	r2, r2, #3
   21d5c:	add	r2, r2, ip, lsr #3
   21d60:	rsb	r3, r2, #32
   21d64:	lsl	ip, r0, r3
   21d68:	lsr	r0, r0, r2
   21d6c:	orr	r0, r0, r1, lsl r3
   21d70:	lsr	r1, r1, r2
   21d74:	add	r4, r4, r2
   21d78:	b	21abc <_obstack_memory_used@@Base+0x5d8>
   21d7c:	cmp	r3, #0
   21d80:	cmpeq	r2, #0
   21d84:	bne	21d9c <_obstack_memory_used@@Base+0x8b8>
   21d88:	cmp	r1, #0
   21d8c:	cmpeq	r0, #0
   21d90:	mvnne	r1, #0
   21d94:	mvnne	r0, #0
   21d98:	b	21db8 <_obstack_memory_used@@Base+0x8d4>
   21d9c:	sub	sp, sp, #8
   21da0:	push	{sp, lr}
   21da4:	bl	21e10 <_obstack_memory_used@@Base+0x92c>
   21da8:	ldr	lr, [sp, #4]
   21dac:	add	sp, sp, #8
   21db0:	pop	{r2, r3}
   21db4:	bx	lr
   21db8:	push	{r1, lr}
   21dbc:	mov	r0, #8
   21dc0:	bl	11a20 <raise@plt>
   21dc4:	pop	{r1, pc}
   21dc8:	vmov	d7, r0, r1
   21dcc:	vldr	d6, [pc, #44]	; 21e00 <_obstack_memory_used@@Base+0x91c>
   21dd0:	vldr	d5, [pc, #48]	; 21e08 <_obstack_memory_used@@Base+0x924>
   21dd4:	mov	r0, #0
   21dd8:	vmul.f64	d6, d7, d6
   21ddc:	vcvt.u32.f64	s12, d6
   21de0:	vcvt.f64.u32	d4, s12
   21de4:	vmov	r1, s12
   21de8:	vmls.f64	d7, d4, d5
   21dec:	vcvt.u32.f64	s14, d7
   21df0:	vmov	r3, s14
   21df4:	orr	r0, r0, r3
   21df8:	bx	lr
   21dfc:	nop			; (mov r0, r0)
   21e00:	andeq	r0, r0, r0
   21e04:	ldclcc	0, cr0, [r0]
   21e08:	andeq	r0, r0, r0
   21e0c:	mvnsmi	r0, r0
   21e10:	cmp	r1, r3
   21e14:	push	{r4, r5, r6, r7, r8, r9, lr}
   21e18:	cmpeq	r0, r2
   21e1c:	mov	r4, r0
   21e20:	mov	r5, r1
   21e24:	ldr	r9, [sp, #28]
   21e28:	movcc	r0, #0
   21e2c:	movcc	r1, #0
   21e30:	bcc	21f28 <_obstack_memory_used@@Base+0xa44>
   21e34:	cmp	r3, #0
   21e38:	clzeq	ip, r2
   21e3c:	clzne	ip, r3
   21e40:	addeq	ip, ip, #32
   21e44:	cmp	r5, #0
   21e48:	clzeq	r1, r4
   21e4c:	addeq	r1, r1, #32
   21e50:	clzne	r1, r5
   21e54:	sub	ip, ip, r1
   21e58:	sub	lr, ip, #32
   21e5c:	lsl	r7, r3, ip
   21e60:	rsb	r8, ip, #32
   21e64:	orr	r7, r7, r2, lsl lr
   21e68:	orr	r7, r7, r2, lsr r8
   21e6c:	lsl	r6, r2, ip
   21e70:	cmp	r5, r7
   21e74:	cmpeq	r4, r6
   21e78:	movcc	r0, #0
   21e7c:	movcc	r1, #0
   21e80:	bcc	21e9c <_obstack_memory_used@@Base+0x9b8>
   21e84:	mov	r3, #1
   21e88:	subs	r4, r4, r6
   21e8c:	lsl	r1, r3, lr
   21e90:	lsl	r0, r3, ip
   21e94:	orr	r1, r1, r3, lsr r8
   21e98:	sbc	r5, r5, r7
   21e9c:	cmp	ip, #0
   21ea0:	beq	21f28 <_obstack_memory_used@@Base+0xa44>
   21ea4:	lsrs	r3, r7, #1
   21ea8:	rrx	r2, r6
   21eac:	mov	r6, ip
   21eb0:	b	21ed4 <_obstack_memory_used@@Base+0x9f0>
   21eb4:	subs	r4, r4, r2
   21eb8:	sbc	r5, r5, r3
   21ebc:	adds	r4, r4, r4
   21ec0:	adc	r5, r5, r5
   21ec4:	adds	r4, r4, #1
   21ec8:	adc	r5, r5, #0
   21ecc:	subs	r6, r6, #1
   21ed0:	beq	21ef0 <_obstack_memory_used@@Base+0xa0c>
   21ed4:	cmp	r5, r3
   21ed8:	cmpeq	r4, r2
   21edc:	bcs	21eb4 <_obstack_memory_used@@Base+0x9d0>
   21ee0:	adds	r4, r4, r4
   21ee4:	adc	r5, r5, r5
   21ee8:	subs	r6, r6, #1
   21eec:	bne	21ed4 <_obstack_memory_used@@Base+0x9f0>
   21ef0:	lsr	r6, r4, ip
   21ef4:	lsr	r7, r5, ip
   21ef8:	orr	r6, r6, r5, lsl r8
   21efc:	adds	r2, r0, r4
   21f00:	orr	r6, r6, r5, lsr lr
   21f04:	adc	r3, r1, r5
   21f08:	lsl	r1, r7, ip
   21f0c:	orr	r1, r1, r6, lsl lr
   21f10:	lsl	r0, r6, ip
   21f14:	orr	r1, r1, r6, lsr r8
   21f18:	subs	r0, r2, r0
   21f1c:	mov	r4, r6
   21f20:	mov	r5, r7
   21f24:	sbc	r1, r3, r1
   21f28:	cmp	r9, #0
   21f2c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   21f30:	strd	r4, [r9]
   21f34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21f3c:	mov	r7, r0
   21f40:	ldr	r6, [pc, #72]	; 21f90 <_obstack_memory_used@@Base+0xaac>
   21f44:	ldr	r5, [pc, #72]	; 21f94 <_obstack_memory_used@@Base+0xab0>
   21f48:	add	r6, pc, r6
   21f4c:	add	r5, pc, r5
   21f50:	sub	r6, r6, r5
   21f54:	mov	r8, r1
   21f58:	mov	r9, r2
   21f5c:	bl	119d0 <pthread_mutex_unlock@plt-0x20>
   21f60:	asrs	r6, r6, #2
   21f64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f68:	mov	r4, #0
   21f6c:	add	r4, r4, #1
   21f70:	ldr	r3, [r5], #4
   21f74:	mov	r2, r9
   21f78:	mov	r1, r8
   21f7c:	mov	r0, r7
   21f80:	blx	r3
   21f84:	cmp	r6, r4
   21f88:	bne	21f6c <_obstack_memory_used@@Base+0xa88>
   21f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f90:			; <UNDEFINED> instruction: 0x00012fb8
   21f94:			; <UNDEFINED> instruction: 0x00012fb0
   21f98:	bx	lr
   21f9c:	ldr	r3, [pc, #12]	; 21fb0 <_obstack_memory_used@@Base+0xacc>
   21fa0:	mov	r1, #0
   21fa4:	add	r3, pc, r3
   21fa8:	ldr	r2, [r3]
   21fac:	b	11d80 <__cxa_atexit@plt>
   21fb0:	andeq	r3, r1, r4, lsr r2

Disassembly of section .fini:

00021fb4 <.fini>:
   21fb4:	push	{r3, lr}
   21fb8:	pop	{r3, pc}
