
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010bf0 <.init>:
   10bf0:	push	{r3, lr}
   10bf4:	bl	10e50 <__assert_fail@plt+0x48>
   10bf8:	pop	{r3, pc}

Disassembly of section .plt:

00010bfc <calloc@plt-0x14>:
   10bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   10c00:	ldr	lr, [pc, #4]	; 10c0c <calloc@plt-0x4>
   10c04:	add	lr, pc, lr
   10c08:	ldr	pc, [lr, #8]!
   10c0c:	strdeq	r5, [r1], -r4

00010c10 <calloc@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #86016	; 0x15000
   10c18:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c1c <fputs_unlocked@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #86016	; 0x15000
   10c24:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c28 <strcmp@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #86016	; 0x15000
   10c30:	ldr	pc, [ip, #996]!	; 0x3e4

00010c34 <fflush@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #86016	; 0x15000
   10c3c:	ldr	pc, [ip, #988]!	; 0x3dc

00010c40 <free@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #86016	; 0x15000
   10c48:	ldr	pc, [ip, #980]!	; 0x3d4

00010c4c <_exit@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #972]!	; 0x3cc

00010c58 <memcpy@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #964]!	; 0x3c4

00010c64 <mbsinit@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #956]!	; 0x3bc

00010c70 <memcmp@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #948]!	; 0x3b4

00010c7c <dcgettext@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #940]!	; 0x3ac

00010c88 <realloc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #932]!	; 0x3a4

00010c94 <textdomain@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #924]!	; 0x39c

00010ca0 <iswprint@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #916]!	; 0x394

00010cac <fwrite@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #908]!	; 0x38c

00010cb8 <lseek64@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #900]!	; 0x384

00010cc4 <__ctype_get_mb_cur_max@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #892]!	; 0x37c

00010cd0 <__fpending@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #884]!	; 0x374

00010cdc <mbrtowc@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #876]!	; 0x36c

00010ce8 <error@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #868]!	; 0x364

00010cf4 <getenv@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #860]!	; 0x35c

00010d00 <malloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #852]!	; 0x354

00010d0c <__libc_start_main@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #844]!	; 0x34c

00010d18 <__freading@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #836]!	; 0x344

00010d24 <__gmon_start__@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #828]!	; 0x33c

00010d30 <__ctype_b_loc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #820]!	; 0x334

00010d3c <exit@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #812]!	; 0x32c

00010d48 <strlen@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #804]!	; 0x324

00010d54 <__errno_location@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #796]!	; 0x31c

00010d60 <__cxa_atexit@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #788]!	; 0x314

00010d6c <memset@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #780]!	; 0x30c

00010d78 <__printf_chk@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #772]!	; 0x304

00010d84 <fileno@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d90 <__fprintf_chk@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #756]!	; 0x2f4

00010d9c <fclose@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #748]!	; 0x2ec

00010da8 <fseeko64@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #740]!	; 0x2e4

00010db4 <__overflow@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #732]!	; 0x2dc

00010dc0 <setlocale@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #724]!	; 0x2d4

00010dcc <strrchr@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #716]!	; 0x2cc

00010dd8 <nl_langinfo@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #708]!	; 0x2c4

00010de4 <bindtextdomain@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #700]!	; 0x2bc

00010df0 <strncmp@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dfc <abort@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #684]!	; 0x2ac

00010e08 <__assert_fail@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #676]!	; 0x2a4

Disassembly of section .text:

00010e14 <.text>:
   10e14:	mov	fp, #0
   10e18:	mov	lr, #0
   10e1c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e20:	mov	r2, sp
   10e24:	push	{r2}		; (str r2, [sp, #-4]!)
   10e28:	push	{r0}		; (str r0, [sp, #-4]!)
   10e2c:	ldr	ip, [pc, #16]	; 10e44 <__assert_fail@plt+0x3c>
   10e30:	push	{ip}		; (str ip, [sp, #-4]!)
   10e34:	ldr	r0, [pc, #12]	; 10e48 <__assert_fail@plt+0x40>
   10e38:	ldr	r3, [pc, #12]	; 10e4c <__assert_fail@plt+0x44>
   10e3c:	bl	10d0c <__libc_start_main@plt>
   10e40:	bl	10dfc <abort@plt>
   10e44:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10e48:	strdeq	r1, [r1], -r4
   10e4c:	muleq	r1, r4, r9
   10e50:	ldr	r3, [pc, #20]	; 10e6c <__assert_fail@plt+0x64>
   10e54:	ldr	r2, [pc, #20]	; 10e70 <__assert_fail@plt+0x68>
   10e58:	add	r3, pc, r3
   10e5c:	ldr	r2, [r3, r2]
   10e60:	cmp	r2, #0
   10e64:	bxeq	lr
   10e68:	b	10d24 <__gmon_start__@plt>
   10e6c:	andeq	r5, r1, r0, lsr #3
   10e70:	strheq	r0, [r0], -r8
   10e74:	ldr	r0, [pc, #24]	; 10e94 <__assert_fail@plt+0x8c>
   10e78:	ldr	r3, [pc, #24]	; 10e98 <__assert_fail@plt+0x90>
   10e7c:	cmp	r3, r0
   10e80:	bxeq	lr
   10e84:	ldr	r3, [pc, #16]	; 10e9c <__assert_fail@plt+0x94>
   10e88:	cmp	r3, #0
   10e8c:	bxeq	lr
   10e90:	bx	r3
   10e94:	andeq	r6, r2, r0, lsl r1
   10e98:	andeq	r6, r2, r0, lsl r1
   10e9c:	andeq	r0, r0, r0
   10ea0:	ldr	r0, [pc, #36]	; 10ecc <__assert_fail@plt+0xc4>
   10ea4:	ldr	r1, [pc, #36]	; 10ed0 <__assert_fail@plt+0xc8>
   10ea8:	sub	r1, r1, r0
   10eac:	asr	r1, r1, #2
   10eb0:	add	r1, r1, r1, lsr #31
   10eb4:	asrs	r1, r1, #1
   10eb8:	bxeq	lr
   10ebc:	ldr	r3, [pc, #16]	; 10ed4 <__assert_fail@plt+0xcc>
   10ec0:	cmp	r3, #0
   10ec4:	bxeq	lr
   10ec8:	bx	r3
   10ecc:	andeq	r6, r2, r0, lsl r1
   10ed0:	andeq	r6, r2, r0, lsl r1
   10ed4:	andeq	r0, r0, r0
   10ed8:	push	{r4, lr}
   10edc:	ldr	r4, [pc, #24]	; 10efc <__assert_fail@plt+0xf4>
   10ee0:	ldrb	r3, [r4]
   10ee4:	cmp	r3, #0
   10ee8:	popne	{r4, pc}
   10eec:	bl	10e74 <__assert_fail@plt+0x6c>
   10ef0:	mov	r3, #1
   10ef4:	strb	r3, [r4]
   10ef8:	pop	{r4, pc}
   10efc:	andeq	r6, r2, r0, lsr #2
   10f00:	b	10ea0 <__assert_fail@plt+0x98>
   10f04:	push	{fp, lr}
   10f08:	mov	fp, sp
   10f0c:	cmp	r0, #0
   10f10:	bne	11060 <__assert_fail@plt+0x258>
   10f14:	movw	r1, #19022	; 0x4a4e
   10f18:	mov	r0, #0
   10f1c:	mov	r2, #5
   10f20:	movt	r1, #1
   10f24:	bl	10c7c <dcgettext@plt>
   10f28:	mov	r1, r0
   10f2c:	movw	r0, #24876	; 0x612c
   10f30:	movt	r0, #2
   10f34:	ldr	r2, [r0]
   10f38:	mov	r0, #1
   10f3c:	mov	r3, r2
   10f40:	bl	10d78 <__printf_chk@plt>
   10f44:	movw	r1, #19085	; 0x4a8d
   10f48:	mov	r0, #0
   10f4c:	mov	r2, #5
   10f50:	movt	r1, #1
   10f54:	bl	10c7c <dcgettext@plt>
   10f58:	movw	r4, #24860	; 0x611c
   10f5c:	movt	r4, #2
   10f60:	ldr	r1, [r4]
   10f64:	bl	10c1c <fputs_unlocked@plt>
   10f68:	movw	r1, #19178	; 0x4aea
   10f6c:	mov	r0, #0
   10f70:	mov	r2, #5
   10f74:	movt	r1, #1
   10f78:	bl	10c7c <dcgettext@plt>
   10f7c:	ldr	r1, [r4]
   10f80:	bl	10c1c <fputs_unlocked@plt>
   10f84:	movw	r1, #19310	; 0x4b6e
   10f88:	mov	r0, #0
   10f8c:	mov	r2, #5
   10f90:	movt	r1, #1
   10f94:	bl	10c7c <dcgettext@plt>
   10f98:	ldr	r1, [r4]
   10f9c:	bl	10c1c <fputs_unlocked@plt>
   10fa0:	movw	r1, #19355	; 0x4b9b
   10fa4:	mov	r0, #0
   10fa8:	mov	r2, #5
   10fac:	movt	r1, #1
   10fb0:	bl	10c7c <dcgettext@plt>
   10fb4:	ldr	r1, [r4]
   10fb8:	bl	10c1c <fputs_unlocked@plt>
   10fbc:	movw	r1, #19409	; 0x4bd1
   10fc0:	mov	r0, #0
   10fc4:	mov	r2, #5
   10fc8:	movt	r1, #1
   10fcc:	bl	10c7c <dcgettext@plt>
   10fd0:	ldr	r1, [r4]
   10fd4:	bl	10c1c <fputs_unlocked@plt>
   10fd8:	movw	r1, #19472	; 0x4c10
   10fdc:	mov	r0, #0
   10fe0:	mov	r2, #5
   10fe4:	movt	r1, #1
   10fe8:	bl	10c7c <dcgettext@plt>
   10fec:	ldr	r1, [r4]
   10ff0:	bl	10c1c <fputs_unlocked@plt>
   10ff4:	movw	r1, #19701	; 0x4cf5
   10ff8:	mov	r0, #0
   10ffc:	mov	r2, #5
   11000:	movt	r1, #1
   11004:	bl	10c7c <dcgettext@plt>
   11008:	ldr	r1, [r4]
   1100c:	bl	10c1c <fputs_unlocked@plt>
   11010:	movw	r1, #19811	; 0x4d63
   11014:	mov	r0, #0
   11018:	mov	r2, #5
   1101c:	movt	r1, #1
   11020:	bl	10c7c <dcgettext@plt>
   11024:	movw	r2, #20002	; 0x4e22
   11028:	mov	r1, r0
   1102c:	mov	r0, #1
   11030:	movt	r2, #1
   11034:	bl	10d78 <__printf_chk@plt>
   11038:	movw	r1, #20007	; 0x4e27
   1103c:	mov	r0, #0
   11040:	mov	r2, #5
   11044:	movt	r1, #1
   11048:	bl	10c7c <dcgettext@plt>
   1104c:	ldr	r1, [r4]
   11050:	bl	10c1c <fputs_unlocked@plt>
   11054:	bl	11080 <__assert_fail@plt+0x278>
   11058:	mov	r0, #0
   1105c:	bl	10d3c <exit@plt>
   11060:	movw	r0, #18972	; 0x4a1c
   11064:	movw	r1, #18995	; 0x4a33
   11068:	movw	r3, #19006	; 0x4a3e
   1106c:	mov	r2, #40	; 0x28
   11070:	movt	r0, #1
   11074:	movt	r1, #1
   11078:	movt	r3, #1
   1107c:	bl	10e08 <__assert_fail@plt>
   11080:	push	{r4, r5, fp, lr}
   11084:	add	fp, sp, #8
   11088:	sub	sp, sp, #56	; 0x38
   1108c:	movw	r0, #20520	; 0x5028
   11090:	mov	r2, #48	; 0x30
   11094:	mov	r5, sp
   11098:	movw	r4, #20002	; 0x4e22
   1109c:	movt	r0, #1
   110a0:	movt	r4, #1
   110a4:	add	r1, r0, #32
   110a8:	add	r3, r0, #16
   110ac:	vld1.64	{d18-d19}, [r0], r2
   110b0:	vld1.64	{d16-d17}, [r1]
   110b4:	vld1.64	{d20-d21}, [r3]
   110b8:	add	r1, r5, #32
   110bc:	vldr	d22, [r0]
   110c0:	add	r0, r5, #16
   110c4:	vst1.64	{d16-d17}, [r1]
   110c8:	movw	r1, #20207	; 0x4eef
   110cc:	vst1.64	{d20-d21}, [r0]
   110d0:	mov	r0, r5
   110d4:	vst1.64	{d18-d19}, [r0], r2
   110d8:	movt	r1, #1
   110dc:	vstr	d22, [r0]
   110e0:	mov	r0, r4
   110e4:	bl	10c28 <strcmp@plt>
   110e8:	cmp	r0, #0
   110ec:	ldrne	r1, [r5, #8]!
   110f0:	cmpne	r1, #0
   110f4:	bne	110e0 <__assert_fail@plt+0x2d8>
   110f8:	ldr	r5, [r5, #4]
   110fc:	movw	r1, #20302	; 0x4f4e
   11100:	mov	r0, #0
   11104:	mov	r2, #5
   11108:	movt	r1, #1
   1110c:	bl	10c7c <dcgettext@plt>
   11110:	movw	r2, #20172	; 0x4ecc
   11114:	movw	r3, #20325	; 0x4f65
   11118:	mov	r1, r0
   1111c:	mov	r0, #1
   11120:	movt	r2, #1
   11124:	movt	r3, #1
   11128:	bl	10d78 <__printf_chk@plt>
   1112c:	cmp	r5, #0
   11130:	mov	r0, #5
   11134:	mov	r1, #0
   11138:	moveq	r5, r4
   1113c:	bl	10dc0 <setlocale@plt>
   11140:	cmp	r0, #0
   11144:	beq	11184 <__assert_fail@plt+0x37c>
   11148:	movw	r1, #20365	; 0x4f8d
   1114c:	mov	r2, #3
   11150:	movt	r1, #1
   11154:	bl	10df0 <strncmp@plt>
   11158:	cmp	r0, #0
   1115c:	beq	11184 <__assert_fail@plt+0x37c>
   11160:	movw	r1, #20369	; 0x4f91
   11164:	mov	r0, #0
   11168:	mov	r2, #5
   1116c:	movt	r1, #1
   11170:	bl	10c7c <dcgettext@plt>
   11174:	movw	r1, #24860	; 0x611c
   11178:	movt	r1, #2
   1117c:	ldr	r1, [r1]
   11180:	bl	10c1c <fputs_unlocked@plt>
   11184:	movw	r1, #20440	; 0x4fd8
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	movt	r1, #1
   11194:	bl	10c7c <dcgettext@plt>
   11198:	movw	r2, #20325	; 0x4f65
   1119c:	mov	r1, r0
   111a0:	mov	r0, #1
   111a4:	mov	r3, r4
   111a8:	movt	r2, #1
   111ac:	bl	10d78 <__printf_chk@plt>
   111b0:	movw	r1, #20467	; 0x4ff3
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10c7c <dcgettext@plt>
   111c4:	movw	r3, #19471	; 0x4c0f
   111c8:	mov	r1, r0
   111cc:	movw	r0, #20235	; 0x4f0b
   111d0:	cmp	r5, r4
   111d4:	mov	r2, r5
   111d8:	movt	r0, #1
   111dc:	movt	r3, #1
   111e0:	moveq	r3, r0
   111e4:	mov	r0, #1
   111e8:	bl	10d78 <__printf_chk@plt>
   111ec:	sub	sp, fp, #8
   111f0:	pop	{r4, r5, fp, pc}
   111f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f8:	add	fp, sp, #28
   111fc:	sub	sp, sp, #20
   11200:	mov	r6, r0
   11204:	movw	r0, #20112	; 0x4e90
   11208:	mov	r4, r1
   1120c:	movt	r0, #1
   11210:	bl	10cf4 <getenv@plt>
   11214:	mov	r8, r0
   11218:	cmp	r0, #0
   1121c:	beq	11248 <__assert_fail@plt+0x440>
   11220:	mov	r5, #0
   11224:	cmp	r6, #2
   11228:	blt	1124c <__assert_fail@plt+0x444>
   1122c:	ldr	r0, [r4, #4]
   11230:	movw	r1, #20128	; 0x4ea0
   11234:	movt	r1, #1
   11238:	bl	10c28 <strcmp@plt>
   1123c:	clz	r0, r0
   11240:	lsr	r5, r0, #5
   11244:	b	1124c <__assert_fail@plt+0x444>
   11248:	mov	r5, #1
   1124c:	ldr	r0, [r4], #4
   11250:	bl	11ad0 <__assert_fail@plt+0xcc8>
   11254:	movw	r1, #19471	; 0x4c0f
   11258:	mov	r0, #6
   1125c:	movt	r1, #1
   11260:	bl	10dc0 <setlocale@plt>
   11264:	movw	r7, #20176	; 0x4ed0
   11268:	movw	r1, #20131	; 0x4ea3
   1126c:	movt	r7, #1
   11270:	movt	r1, #1
   11274:	mov	r0, r7
   11278:	bl	10de4 <bindtextdomain@plt>
   1127c:	mov	r0, r7
   11280:	bl	10c94 <textdomain@plt>
   11284:	movw	r0, #6632	; 0x19e8
   11288:	movt	r0, #1
   1128c:	bl	149f8 <__assert_fail@plt+0x3bf0>
   11290:	cmp	r6, #2
   11294:	bne	112d4 <__assert_fail@plt+0x4cc>
   11298:	cmp	r5, #0
   1129c:	beq	112d4 <__assert_fail@plt+0x4cc>
   112a0:	ldr	r7, [r4]
   112a4:	movw	r1, #20155	; 0x4ebb
   112a8:	movt	r1, #1
   112ac:	mov	r0, r7
   112b0:	bl	10c28 <strcmp@plt>
   112b4:	cmp	r0, #0
   112b8:	beq	119c0 <__assert_fail@plt+0xbb8>
   112bc:	movw	r1, #20162	; 0x4ec2
   112c0:	mov	r0, r7
   112c4:	movt	r1, #1
   112c8:	bl	10c28 <strcmp@plt>
   112cc:	cmp	r0, #0
   112d0:	beq	1195c <__assert_fail@plt+0xb54>
   112d4:	cmp	r6, #2
   112d8:	mov	r0, #0
   112dc:	eor	r2, r5, #1
   112e0:	mov	r1, #0
   112e4:	movwlt	r0, #1
   112e8:	orrs	r0, r0, r2
   112ec:	sub	r2, r6, #1
   112f0:	bne	113b8 <__assert_fail@plt+0x5b0>
   112f4:	mov	r1, #0
   112f8:	mov	r0, #1
   112fc:	mov	r6, r2
   11300:	ldr	r2, [r4]
   11304:	ldrb	r3, [r2]
   11308:	cmp	r3, #45	; 0x2d
   1130c:	bne	113c4 <__assert_fail@plt+0x5bc>
   11310:	add	r3, r2, #1
   11314:	mov	r7, #0
   11318:	b	11320 <__assert_fail@plt+0x518>
   1131c:	sub	r7, r7, #1
   11320:	ldrb	r5, [r3, -r7]
   11324:	cmp	r5, #100	; 0x64
   11328:	ble	1133c <__assert_fail@plt+0x534>
   1132c:	cmp	r5, #110	; 0x6e
   11330:	cmpne	r5, #101	; 0x65
   11334:	beq	1131c <__assert_fail@plt+0x514>
   11338:	b	113c4 <__assert_fail@plt+0x5bc>
   1133c:	cmp	r5, #69	; 0x45
   11340:	beq	1131c <__assert_fail@plt+0x514>
   11344:	cmp	r5, #0
   11348:	bne	113c4 <__assert_fail@plt+0x5bc>
   1134c:	cmp	r7, #0
   11350:	beq	113c4 <__assert_fail@plt+0x5bc>
   11354:	ldrb	r3, [r3]
   11358:	cmp	r3, #0
   1135c:	beq	1139c <__assert_fail@plt+0x594>
   11360:	add	r2, r2, #2
   11364:	uxtb	r3, r3
   11368:	cmp	r3, #69	; 0x45
   1136c:	beq	1138c <__assert_fail@plt+0x584>
   11370:	cmp	r3, #110	; 0x6e
   11374:	beq	11384 <__assert_fail@plt+0x57c>
   11378:	cmp	r3, #101	; 0x65
   1137c:	moveq	r1, #1
   11380:	b	11390 <__assert_fail@plt+0x588>
   11384:	mov	r0, #0
   11388:	b	11390 <__assert_fail@plt+0x588>
   1138c:	mov	r1, #0
   11390:	ldrb	r3, [r2], #1
   11394:	cmp	r3, #0
   11398:	bne	11364 <__assert_fail@plt+0x55c>
   1139c:	add	r4, r4, #4
   113a0:	sub	r2, r6, #1
   113a4:	cmp	r6, #2
   113a8:	bge	112fc <__assert_fail@plt+0x4f4>
   113ac:	and	r1, r1, #1
   113b0:	and	r0, r0, #1
   113b4:	b	113bc <__assert_fail@plt+0x5b4>
   113b8:	mov	r0, #1
   113bc:	mov	r6, r2
   113c0:	b	113cc <__assert_fail@plt+0x5c4>
   113c4:	and	r0, r0, #1
   113c8:	and	r1, r1, #1
   113cc:	str	r0, [sp, #16]
   113d0:	cmp	r8, #0
   113d4:	cmpeq	r1, #0
   113d8:	beq	118b8 <__assert_fail@plt+0xab0>
   113dc:	cmp	r6, #1
   113e0:	blt	11920 <__assert_fail@plt+0xb18>
   113e4:	movw	r5, #24860	; 0x611c
   113e8:	mov	ip, #92	; 0x5c
   113ec:	mov	lr, #32
   113f0:	movt	r5, #2
   113f4:	b	11404 <__assert_fail@plt+0x5fc>
   113f8:	add	r2, r1, #1
   113fc:	str	r2, [r0, #20]
   11400:	strb	lr, [r1]
   11404:	ldr	r9, [r4]
   11408:	b	1141c <__assert_fail@plt+0x614>
   1140c:	add	r2, r1, #1
   11410:	mov	r9, r7
   11414:	str	r2, [r0, #20]
   11418:	strb	r8, [r1]
   1141c:	mov	r7, r9
   11420:	ldrb	r8, [r7], #1
   11424:	cmp	r8, #92	; 0x5c
   11428:	beq	11438 <__assert_fail@plt+0x630>
   1142c:	cmp	r8, #0
   11430:	bne	115b8 <__assert_fail@plt+0x7b0>
   11434:	b	11880 <__assert_fail@plt+0xa78>
   11438:	ldrb	r8, [r7]
   1143c:	cmp	r8, #0
   11440:	beq	115b4 <__assert_fail@plt+0x7ac>
   11444:	sub	r0, r8, #48	; 0x30
   11448:	add	r7, r9, #2
   1144c:	cmp	r0, #72	; 0x48
   11450:	bhi	11660 <__assert_fail@plt+0x858>
   11454:	add	r1, pc, #0
   11458:	ldr	pc, [r1, r0, lsl #2]
   1145c:	andeq	r1, r1, ip, lsl #12
   11460:	andeq	r1, r1, r0, lsl #11
   11464:	andeq	r1, r1, r0, lsl #11
   11468:	andeq	r1, r1, r0, lsl #11
   1146c:	andeq	r1, r1, r0, lsl #11
   11470:	andeq	r1, r1, r0, lsl #11
   11474:	andeq	r1, r1, r0, lsl #11
   11478:	andeq	r1, r1, r0, lsl #11
   1147c:	andeq	r1, r1, r0, ror #12
   11480:	andeq	r1, r1, r0, ror #12
   11484:	andeq	r1, r1, r0, ror #12
   11488:	andeq	r1, r1, r0, ror #12
   1148c:	andeq	r1, r1, r0, ror #12
   11490:	andeq	r1, r1, r0, ror #12
   11494:	andeq	r1, r1, r0, ror #12
   11498:	andeq	r1, r1, r0, ror #12
   1149c:	andeq	r1, r1, r0, ror #12
   114a0:	andeq	r1, r1, r0, ror #12
   114a4:	andeq	r1, r1, r0, ror #12
   114a8:	andeq	r1, r1, r0, ror #12
   114ac:	andeq	r1, r1, r0, ror #12
   114b0:	andeq	r1, r1, r0, ror #12
   114b4:	andeq	r1, r1, r0, ror #12
   114b8:	andeq	r1, r1, r0, ror #12
   114bc:	andeq	r1, r1, r0, ror #12
   114c0:	andeq	r1, r1, r0, ror #12
   114c4:	andeq	r1, r1, r0, ror #12
   114c8:	andeq	r1, r1, r0, ror #12
   114cc:	andeq	r1, r1, r0, ror #12
   114d0:	andeq	r1, r1, r0, ror #12
   114d4:	andeq	r1, r1, r0, ror #12
   114d8:	andeq	r1, r1, r0, ror #12
   114dc:	andeq	r1, r1, r0, ror #12
   114e0:	andeq	r1, r1, r0, ror #12
   114e4:	andeq	r1, r1, r0, ror #12
   114e8:	andeq	r1, r1, r0, ror #12
   114ec:	andeq	r1, r1, r0, ror #12
   114f0:	andeq	r1, r1, r0, ror #12
   114f4:	andeq	r1, r1, r0, ror #12
   114f8:	andeq	r1, r1, r0, ror #12
   114fc:	andeq	r1, r1, r0, ror #12
   11500:	andeq	r1, r1, r0, ror #12
   11504:	andeq	r1, r1, r0, ror #12
   11508:	andeq	r1, r1, r0, ror #12
   1150c:			; <UNDEFINED> instruction: 0x000115b8
   11510:	andeq	r1, r1, r0, ror #12
   11514:	andeq	r1, r1, r0, ror #12
   11518:	andeq	r1, r1, r0, ror #12
   1151c:	andeq	r1, r1, r0, ror #12
   11520:	andeq	r1, r1, r4, lsr r6
   11524:	strdeq	r1, [r1], -ip
   11528:	andeq	r1, r1, r8, lsr #19
   1152c:	andeq	r1, r1, r0, ror #12
   11530:	strdeq	r1, [r1], -r4
   11534:	andeq	r1, r1, ip, ror #11
   11538:	andeq	r1, r1, r0, ror #12
   1153c:	andeq	r1, r1, r0, ror #12
   11540:	andeq	r1, r1, r0, ror #12
   11544:	andeq	r1, r1, r0, ror #12
   11548:	andeq	r1, r1, r0, ror #12
   1154c:	andeq	r1, r1, r0, ror #12
   11550:	andeq	r1, r1, r0, ror #12
   11554:	andeq	r1, r1, r4, ror #11
   11558:	andeq	r1, r1, r0, ror #12
   1155c:	andeq	r1, r1, r0, ror #12
   11560:	andeq	r1, r1, r0, ror #12
   11564:	andeq	r1, r1, r4, lsl #13
   11568:	andeq	r1, r1, r0, ror #12
   1156c:	andeq	r1, r1, ip, lsr #12
   11570:	andeq	r1, r1, r0, ror #12
   11574:	andeq	r1, r1, r4, lsl #12
   11578:	andeq	r1, r1, r0, ror #12
   1157c:	andeq	r1, r1, ip, lsr r6
   11580:	ldrb	r0, [r7]
   11584:	sub	r8, r8, #48	; 0x30
   11588:	and	r1, r0, #248	; 0xf8
   1158c:	cmp	r1, #48	; 0x30
   11590:	addeq	r0, r0, r8, lsl #3
   11594:	subeq	r8, r0, #48	; 0x30
   11598:	ldrbeq	r0, [r7, #1]!
   1159c:	and	r1, r0, #248	; 0xf8
   115a0:	cmp	r1, #48	; 0x30
   115a4:	addeq	r0, r0, r8, lsl #3
   115a8:	addeq	r7, r7, #1
   115ac:	subeq	r8, r0, #48	; 0x30
   115b0:	b	115b8 <__assert_fail@plt+0x7b0>
   115b4:	mov	r8, #92	; 0x5c
   115b8:	ldr	r0, [r5]
   115bc:	ldr	r1, [r0, #20]
   115c0:	ldr	r2, [r0, #24]
   115c4:	cmp	r1, r2
   115c8:	bcc	1140c <__assert_fail@plt+0x604>
   115cc:	uxtb	r1, r8
   115d0:	bl	10db4 <__overflow@plt>
   115d4:	mov	lr, #32
   115d8:	mov	ip, #92	; 0x5c
   115dc:	mov	r9, r7
   115e0:	b	1141c <__assert_fail@plt+0x614>
   115e4:	mov	r8, #10
   115e8:	b	115b8 <__assert_fail@plt+0x7b0>
   115ec:	mov	r8, #12
   115f0:	b	115b8 <__assert_fail@plt+0x7b0>
   115f4:	mov	r8, #27
   115f8:	b	115b8 <__assert_fail@plt+0x7b0>
   115fc:	mov	r8, #8
   11600:	b	115b8 <__assert_fail@plt+0x7b0>
   11604:	mov	r8, #11
   11608:	b	115b8 <__assert_fail@plt+0x7b0>
   1160c:	ldrb	r0, [r7]
   11610:	mov	r8, #0
   11614:	and	r1, r0, #248	; 0xf8
   11618:	cmp	r1, #48	; 0x30
   1161c:	bne	115b8 <__assert_fail@plt+0x7b0>
   11620:	add	r7, r9, #3
   11624:	mov	r8, r0
   11628:	b	11580 <__assert_fail@plt+0x778>
   1162c:	mov	r8, #9
   11630:	b	115b8 <__assert_fail@plt+0x7b0>
   11634:	mov	r8, #7
   11638:	b	115b8 <__assert_fail@plt+0x7b0>
   1163c:	ldrb	sl, [r7]
   11640:	bl	10d30 <__ctype_b_loc@plt>
   11644:	ldr	r0, [r0]
   11648:	mov	lr, #32
   1164c:	mov	ip, #92	; 0x5c
   11650:	add	r1, r0, sl, lsl #1
   11654:	ldrb	r1, [r1, #1]
   11658:	tst	r1, #16
   1165c:	bne	1168c <__assert_fail@plt+0x884>
   11660:	ldr	r0, [r5]
   11664:	ldr	r1, [r0, #20]
   11668:	ldr	r2, [r0, #24]
   1166c:	cmp	r1, r2
   11670:	bcs	1186c <__assert_fail@plt+0xa64>
   11674:	add	r2, r1, #1
   11678:	str	r2, [r0, #20]
   1167c:	strb	ip, [r1]
   11680:	b	115b8 <__assert_fail@plt+0x7b0>
   11684:	mov	r8, #13
   11688:	b	115b8 <__assert_fail@plt+0x7b0>
   1168c:	sub	r1, sl, #65	; 0x41
   11690:	add	r7, r9, #3
   11694:	cmp	r1, #37	; 0x25
   11698:	bhi	11768 <__assert_fail@plt+0x960>
   1169c:	add	r2, pc, #4
   116a0:	mov	r8, #10
   116a4:	ldr	pc, [r2, r1, lsl #2]
   116a8:	andeq	r1, r1, ip, ror #14
   116ac:	andeq	r1, r1, r0, asr #14
   116b0:	andeq	r1, r1, r0, asr r7
   116b4:	andeq	r1, r1, r8, asr r7
   116b8:	andeq	r1, r1, r0, ror #14
   116bc:	andeq	r1, r1, r8, asr #14
   116c0:	andeq	r1, r1, r8, ror #14
   116c4:	andeq	r1, r1, r8, ror #14
   116c8:	andeq	r1, r1, r8, ror #14
   116cc:	andeq	r1, r1, r8, ror #14
   116d0:	andeq	r1, r1, r8, ror #14
   116d4:	andeq	r1, r1, r8, ror #14
   116d8:	andeq	r1, r1, r8, ror #14
   116dc:	andeq	r1, r1, r8, ror #14
   116e0:	andeq	r1, r1, r8, ror #14
   116e4:	andeq	r1, r1, r8, ror #14
   116e8:	andeq	r1, r1, r8, ror #14
   116ec:	andeq	r1, r1, r8, ror #14
   116f0:	andeq	r1, r1, r8, ror #14
   116f4:	andeq	r1, r1, r8, ror #14
   116f8:	andeq	r1, r1, r8, ror #14
   116fc:	andeq	r1, r1, r8, ror #14
   11700:	andeq	r1, r1, r8, ror #14
   11704:	andeq	r1, r1, r8, ror #14
   11708:	andeq	r1, r1, r8, ror #14
   1170c:	andeq	r1, r1, r8, ror #14
   11710:	andeq	r1, r1, r8, ror #14
   11714:	andeq	r1, r1, r8, ror #14
   11718:	andeq	r1, r1, r8, ror #14
   1171c:	andeq	r1, r1, r8, ror #14
   11720:	andeq	r1, r1, r8, ror #14
   11724:	andeq	r1, r1, r8, ror #14
   11728:	andeq	r1, r1, ip, ror #14
   1172c:	andeq	r1, r1, r0, asr #14
   11730:	andeq	r1, r1, r0, asr r7
   11734:	andeq	r1, r1, r8, asr r7
   11738:	andeq	r1, r1, r0, ror #14
   1173c:	andeq	r1, r1, r8, asr #14
   11740:	mov	r8, #11
   11744:	b	1176c <__assert_fail@plt+0x964>
   11748:	mov	r8, #15
   1174c:	b	1176c <__assert_fail@plt+0x964>
   11750:	mov	r8, #12
   11754:	b	1176c <__assert_fail@plt+0x964>
   11758:	mov	r8, #13
   1175c:	b	1176c <__assert_fail@plt+0x964>
   11760:	mov	r8, #14
   11764:	b	1176c <__assert_fail@plt+0x964>
   11768:	sub	r8, sl, #48	; 0x30
   1176c:	ldrb	r2, [r7]
   11770:	add	r0, r0, r2, lsl #1
   11774:	ldrb	r0, [r0, #1]
   11778:	tst	r0, #16
   1177c:	beq	115b8 <__assert_fail@plt+0x7b0>
   11780:	sub	r3, r2, #65	; 0x41
   11784:	lsl	r0, r8, #4
   11788:	cmp	r3, #37	; 0x25
   1178c:	bhi	1185c <__assert_fail@plt+0xa54>
   11790:	add	r7, pc, #4
   11794:	mov	r1, #10
   11798:	ldr	pc, [r7, r3, lsl #2]
   1179c:	andeq	r1, r1, r0, ror #16
   117a0:	andeq	r1, r1, r4, lsr r8
   117a4:	andeq	r1, r1, r4, asr #16
   117a8:	andeq	r1, r1, ip, asr #16
   117ac:	andeq	r1, r1, r4, asr r8
   117b0:	andeq	r1, r1, ip, lsr r8
   117b4:	andeq	r1, r1, ip, asr r8
   117b8:	andeq	r1, r1, ip, asr r8
   117bc:	andeq	r1, r1, ip, asr r8
   117c0:	andeq	r1, r1, ip, asr r8
   117c4:	andeq	r1, r1, ip, asr r8
   117c8:	andeq	r1, r1, ip, asr r8
   117cc:	andeq	r1, r1, ip, asr r8
   117d0:	andeq	r1, r1, ip, asr r8
   117d4:	andeq	r1, r1, ip, asr r8
   117d8:	andeq	r1, r1, ip, asr r8
   117dc:	andeq	r1, r1, ip, asr r8
   117e0:	andeq	r1, r1, ip, asr r8
   117e4:	andeq	r1, r1, ip, asr r8
   117e8:	andeq	r1, r1, ip, asr r8
   117ec:	andeq	r1, r1, ip, asr r8
   117f0:	andeq	r1, r1, ip, asr r8
   117f4:	andeq	r1, r1, ip, asr r8
   117f8:	andeq	r1, r1, ip, asr r8
   117fc:	andeq	r1, r1, ip, asr r8
   11800:	andeq	r1, r1, ip, asr r8
   11804:	andeq	r1, r1, ip, asr r8
   11808:	andeq	r1, r1, ip, asr r8
   1180c:	andeq	r1, r1, ip, asr r8
   11810:	andeq	r1, r1, ip, asr r8
   11814:	andeq	r1, r1, ip, asr r8
   11818:	andeq	r1, r1, ip, asr r8
   1181c:	andeq	r1, r1, r0, ror #16
   11820:	andeq	r1, r1, r4, lsr r8
   11824:	andeq	r1, r1, r4, asr #16
   11828:	andeq	r1, r1, ip, asr #16
   1182c:	andeq	r1, r1, r4, asr r8
   11830:	andeq	r1, r1, ip, lsr r8
   11834:	mov	r1, #11
   11838:	b	11860 <__assert_fail@plt+0xa58>
   1183c:	mov	r1, #15
   11840:	b	11860 <__assert_fail@plt+0xa58>
   11844:	mov	r1, #12
   11848:	b	11860 <__assert_fail@plt+0xa58>
   1184c:	mov	r1, #13
   11850:	b	11860 <__assert_fail@plt+0xa58>
   11854:	mov	r1, #14
   11858:	b	11860 <__assert_fail@plt+0xa58>
   1185c:	sub	r1, r2, #48	; 0x30
   11860:	add	r7, r9, #4
   11864:	add	r8, r1, r0
   11868:	b	115b8 <__assert_fail@plt+0x7b0>
   1186c:	mov	r1, #92	; 0x5c
   11870:	bl	10db4 <__overflow@plt>
   11874:	mov	lr, #32
   11878:	mov	ip, #92	; 0x5c
   1187c:	b	115b8 <__assert_fail@plt+0x7b0>
   11880:	cmp	r6, #2
   11884:	blt	11920 <__assert_fail@plt+0xb18>
   11888:	ldr	r0, [r5]
   1188c:	add	r4, r4, #4
   11890:	sub	r6, r6, #1
   11894:	ldr	r1, [r0, #20]
   11898:	ldr	r2, [r0, #24]
   1189c:	cmp	r1, r2
   118a0:	bcc	113f8 <__assert_fail@plt+0x5f0>
   118a4:	mov	r1, #32
   118a8:	bl	10db4 <__overflow@plt>
   118ac:	mov	lr, #32
   118b0:	mov	ip, #92	; 0x5c
   118b4:	b	11404 <__assert_fail@plt+0x5fc>
   118b8:	cmp	r6, #1
   118bc:	blt	11920 <__assert_fail@plt+0xb18>
   118c0:	add	r5, r6, #1
   118c4:	movw	r6, #24860	; 0x611c
   118c8:	mov	r7, #32
   118cc:	movt	r6, #2
   118d0:	ldr	r1, [r6]
   118d4:	ldr	r0, [r4], #4
   118d8:	bl	10c1c <fputs_unlocked@plt>
   118dc:	cmp	r5, #2
   118e0:	beq	11920 <__assert_fail@plt+0xb18>
   118e4:	ldr	r0, [r6]
   118e8:	ldr	r1, [r0, #20]
   118ec:	ldr	r2, [r0, #24]
   118f0:	cmp	r1, r2
   118f4:	bcs	11914 <__assert_fail@plt+0xb0c>
   118f8:	add	r2, r1, #1
   118fc:	str	r2, [r0, #20]
   11900:	strb	r7, [r1]
   11904:	sub	r5, r5, #1
   11908:	cmp	r5, #1
   1190c:	bgt	118d0 <__assert_fail@plt+0xac8>
   11910:	b	11920 <__assert_fail@plt+0xb18>
   11914:	mov	r1, #32
   11918:	bl	10db4 <__overflow@plt>
   1191c:	b	11904 <__assert_fail@plt+0xafc>
   11920:	ldr	r0, [sp, #16]
   11924:	cmp	r0, #0
   11928:	beq	119a8 <__assert_fail@plt+0xba0>
   1192c:	movw	r0, #24860	; 0x611c
   11930:	movt	r0, #2
   11934:	ldr	r0, [r0]
   11938:	ldr	r1, [r0, #20]
   1193c:	ldr	r2, [r0, #24]
   11940:	cmp	r1, r2
   11944:	bcs	119b4 <__assert_fail@plt+0xbac>
   11948:	add	r2, r1, #1
   1194c:	str	r2, [r0, #20]
   11950:	mov	r0, #10
   11954:	strb	r0, [r1]
   11958:	b	119a8 <__assert_fail@plt+0xba0>
   1195c:	movw	r0, #24776	; 0x60c8
   11960:	movw	r2, #20196	; 0x4ee4
   11964:	mov	r1, #0
   11968:	movw	r7, #20186	; 0x4eda
   1196c:	movt	r0, #2
   11970:	movt	r2, #1
   11974:	str	r1, [sp, #8]
   11978:	movw	r1, #20002	; 0x4e22
   1197c:	movt	r7, #1
   11980:	ldr	r3, [r0]
   11984:	movw	r0, #24860	; 0x611c
   11988:	str	r2, [sp, #4]
   1198c:	movw	r2, #20172	; 0x4ecc
   11990:	movt	r1, #1
   11994:	str	r7, [sp]
   11998:	movt	r0, #2
   1199c:	movt	r2, #1
   119a0:	ldr	r0, [r0]
   119a4:	bl	13cc0 <__assert_fail@plt+0x2eb8>
   119a8:	mov	r0, #0
   119ac:	sub	sp, fp, #28
   119b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b4:	mov	r1, #10
   119b8:	bl	10db4 <__overflow@plt>
   119bc:	b	119a8 <__assert_fail@plt+0xba0>
   119c0:	mov	r0, #0
   119c4:	bl	10f04 <__assert_fail@plt+0xfc>
   119c8:	movw	r1, #24868	; 0x6124
   119cc:	movt	r1, #2
   119d0:	str	r0, [r1]
   119d4:	bx	lr
   119d8:	movw	r1, #24872	; 0x6128
   119dc:	movt	r1, #2
   119e0:	strb	r0, [r1]
   119e4:	bx	lr
   119e8:	push	{r4, r5, r6, sl, fp, lr}
   119ec:	add	fp, sp, #16
   119f0:	sub	sp, sp, #8
   119f4:	movw	r0, #24860	; 0x611c
   119f8:	movt	r0, #2
   119fc:	ldr	r0, [r0]
   11a00:	bl	14570 <__assert_fail@plt+0x3768>
   11a04:	cmp	r0, #0
   11a08:	beq	11a30 <__assert_fail@plt+0xc28>
   11a0c:	movw	r0, #24872	; 0x6128
   11a10:	movt	r0, #2
   11a14:	ldrb	r0, [r0]
   11a18:	cmp	r0, #0
   11a1c:	beq	11a50 <__assert_fail@plt+0xc48>
   11a20:	bl	10d54 <__errno_location@plt>
   11a24:	ldr	r0, [r0]
   11a28:	cmp	r0, #32
   11a2c:	bne	11a50 <__assert_fail@plt+0xc48>
   11a30:	movw	r0, #24856	; 0x6118
   11a34:	movt	r0, #2
   11a38:	ldr	r0, [r0]
   11a3c:	bl	14570 <__assert_fail@plt+0x3768>
   11a40:	cmp	r0, #0
   11a44:	subeq	sp, fp, #16
   11a48:	popeq	{r4, r5, r6, sl, fp, pc}
   11a4c:	b	11ac0 <__assert_fail@plt+0xcb8>
   11a50:	movw	r1, #20591	; 0x506f
   11a54:	mov	r0, #0
   11a58:	mov	r2, #5
   11a5c:	movt	r1, #1
   11a60:	bl	10c7c <dcgettext@plt>
   11a64:	mov	r4, r0
   11a68:	movw	r0, #24868	; 0x6124
   11a6c:	movt	r0, #2
   11a70:	ldr	r6, [r0]
   11a74:	bl	10d54 <__errno_location@plt>
   11a78:	ldr	r5, [r0]
   11a7c:	cmp	r6, #0
   11a80:	bne	11a9c <__assert_fail@plt+0xc94>
   11a84:	movw	r2, #20607	; 0x507f
   11a88:	mov	r0, #0
   11a8c:	mov	r1, r5
   11a90:	mov	r3, r4
   11a94:	movt	r2, #1
   11a98:	b	11abc <__assert_fail@plt+0xcb4>
   11a9c:	mov	r0, r6
   11aa0:	bl	1337c <__assert_fail@plt+0x2574>
   11aa4:	movw	r2, #20603	; 0x507b
   11aa8:	mov	r3, r0
   11aac:	str	r4, [sp]
   11ab0:	mov	r0, #0
   11ab4:	mov	r1, r5
   11ab8:	movt	r2, #1
   11abc:	bl	10ce8 <error@plt>
   11ac0:	movw	r0, #24780	; 0x60cc
   11ac4:	movt	r0, #2
   11ac8:	ldr	r0, [r0]
   11acc:	bl	10c4c <_exit@plt>
   11ad0:	push	{r4, r5, fp, lr}
   11ad4:	add	fp, sp, #8
   11ad8:	cmp	r0, #0
   11adc:	beq	11b70 <__assert_fail@plt+0xd68>
   11ae0:	mov	r1, #47	; 0x2f
   11ae4:	mov	r4, r0
   11ae8:	bl	10dcc <strrchr@plt>
   11aec:	cmp	r0, #0
   11af0:	mov	r5, r4
   11af4:	addne	r5, r0, #1
   11af8:	sub	r0, r5, r4
   11afc:	cmp	r0, #7
   11b00:	blt	11b54 <__assert_fail@plt+0xd4c>
   11b04:	movw	r1, #20666	; 0x50ba
   11b08:	sub	r0, r5, #7
   11b0c:	mov	r2, #7
   11b10:	movt	r1, #1
   11b14:	bl	10df0 <strncmp@plt>
   11b18:	cmp	r0, #0
   11b1c:	bne	11b54 <__assert_fail@plt+0xd4c>
   11b20:	movw	r1, #20674	; 0x50c2
   11b24:	mov	r0, r5
   11b28:	mov	r2, #3
   11b2c:	movt	r1, #1
   11b30:	bl	10df0 <strncmp@plt>
   11b34:	cmp	r0, #0
   11b38:	beq	11b44 <__assert_fail@plt+0xd3c>
   11b3c:	mov	r4, r5
   11b40:	b	11b54 <__assert_fail@plt+0xd4c>
   11b44:	movw	r0, #24848	; 0x6110
   11b48:	add	r4, r5, #3
   11b4c:	movt	r0, #2
   11b50:	str	r4, [r0]
   11b54:	movw	r0, #24852	; 0x6114
   11b58:	movt	r0, #2
   11b5c:	str	r4, [r0]
   11b60:	movw	r0, #24876	; 0x612c
   11b64:	movt	r0, #2
   11b68:	str	r4, [r0]
   11b6c:	pop	{r4, r5, fp, pc}
   11b70:	movw	r0, #24856	; 0x6118
   11b74:	mov	r1, #55	; 0x37
   11b78:	mov	r2, #1
   11b7c:	movt	r0, #2
   11b80:	ldr	r3, [r0]
   11b84:	movw	r0, #20610	; 0x5082
   11b88:	movt	r0, #1
   11b8c:	bl	10cac <fwrite@plt>
   11b90:	bl	10dfc <abort@plt>
   11b94:	push	{r4, r5, r6, sl, fp, lr}
   11b98:	add	fp, sp, #16
   11b9c:	mov	r4, r0
   11ba0:	movw	r0, #24880	; 0x6130
   11ba4:	movt	r0, #2
   11ba8:	cmp	r4, #0
   11bac:	moveq	r4, r0
   11bb0:	bl	10d54 <__errno_location@plt>
   11bb4:	ldr	r6, [r0]
   11bb8:	mov	r5, r0
   11bbc:	mov	r0, r4
   11bc0:	mov	r1, #48	; 0x30
   11bc4:	bl	14354 <__assert_fail@plt+0x354c>
   11bc8:	str	r6, [r5]
   11bcc:	pop	{r4, r5, r6, sl, fp, pc}
   11bd0:	movw	r1, #24880	; 0x6130
   11bd4:	cmp	r0, #0
   11bd8:	movt	r1, #2
   11bdc:	movne	r1, r0
   11be0:	ldr	r0, [r1]
   11be4:	bx	lr
   11be8:	movw	r2, #24880	; 0x6130
   11bec:	cmp	r0, #0
   11bf0:	movt	r2, #2
   11bf4:	movne	r2, r0
   11bf8:	str	r1, [r2]
   11bfc:	bx	lr
   11c00:	movw	r3, #24880	; 0x6130
   11c04:	cmp	r0, #0
   11c08:	movt	r3, #2
   11c0c:	movne	r3, r0
   11c10:	ubfx	r0, r1, #5, #3
   11c14:	and	r1, r1, #31
   11c18:	add	r0, r3, r0, lsl #2
   11c1c:	ldr	r3, [r0, #8]
   11c20:	eor	r2, r2, r3, lsr r1
   11c24:	and	r2, r2, #1
   11c28:	eor	r2, r3, r2, lsl r1
   11c2c:	str	r2, [r0, #8]
   11c30:	mov	r0, #1
   11c34:	and	r0, r0, r3, lsr r1
   11c38:	bx	lr
   11c3c:	movw	r2, #24880	; 0x6130
   11c40:	cmp	r0, #0
   11c44:	movt	r2, #2
   11c48:	movne	r2, r0
   11c4c:	ldr	r0, [r2, #4]
   11c50:	str	r1, [r2, #4]
   11c54:	bx	lr
   11c58:	movw	r3, #24880	; 0x6130
   11c5c:	cmp	r0, #0
   11c60:	movt	r3, #2
   11c64:	movne	r3, r0
   11c68:	cmp	r1, #0
   11c6c:	mov	r0, #10
   11c70:	cmpne	r2, #0
   11c74:	str	r0, [r3]
   11c78:	bne	11c88 <__assert_fail@plt+0xe80>
   11c7c:	push	{fp, lr}
   11c80:	mov	fp, sp
   11c84:	bl	10dfc <abort@plt>
   11c88:	str	r1, [r3, #40]	; 0x28
   11c8c:	str	r2, [r3, #44]	; 0x2c
   11c90:	bx	lr
   11c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c98:	add	fp, sp, #28
   11c9c:	sub	sp, sp, #20
   11ca0:	mov	r7, r0
   11ca4:	ldr	r0, [fp, #8]
   11ca8:	movw	r5, #24880	; 0x6130
   11cac:	mov	r8, r3
   11cb0:	mov	r9, r2
   11cb4:	mov	sl, r1
   11cb8:	movt	r5, #2
   11cbc:	cmp	r0, #0
   11cc0:	movne	r5, r0
   11cc4:	bl	10d54 <__errno_location@plt>
   11cc8:	mov	r4, r0
   11ccc:	ldm	r5, {r0, r1}
   11cd0:	ldr	r2, [r5, #40]	; 0x28
   11cd4:	ldr	r3, [r5, #44]	; 0x2c
   11cd8:	add	r5, r5, #8
   11cdc:	ldr	r6, [r4]
   11ce0:	stm	sp, {r0, r1, r5}
   11ce4:	str	r2, [sp, #12]
   11ce8:	str	r3, [sp, #16]
   11cec:	mov	r0, r7
   11cf0:	mov	r1, sl
   11cf4:	mov	r2, r9
   11cf8:	mov	r3, r8
   11cfc:	bl	11d0c <__assert_fail@plt+0xf04>
   11d00:	str	r6, [r4]
   11d04:	sub	sp, fp, #28
   11d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d10:	add	fp, sp, #28
   11d14:	sub	sp, sp, #156	; 0x9c
   11d18:	str	r0, [sp, #80]	; 0x50
   11d1c:	ldr	r0, [fp, #12]
   11d20:	mov	r6, r1
   11d24:	mov	r9, r3
   11d28:	str	r2, [fp, #-84]	; 0xffffffac
   11d2c:	and	r1, r0, #4
   11d30:	str	r1, [sp, #32]
   11d34:	and	r1, r0, #1
   11d38:	str	r1, [sp, #36]	; 0x24
   11d3c:	ubfx	r4, r0, #1, #1
   11d40:	bl	10cc4 <__ctype_get_mb_cur_max@plt>
   11d44:	str	r0, [sp, #40]	; 0x28
   11d48:	ldr	r0, [fp, #24]
   11d4c:	ldr	r7, [fp, #8]
   11d50:	mov	r1, #0
   11d54:	mov	r5, #1
   11d58:	str	r1, [fp, #-56]	; 0xffffffc8
   11d5c:	mov	r1, #0
   11d60:	str	r1, [sp, #60]	; 0x3c
   11d64:	str	r0, [sp, #76]	; 0x4c
   11d68:	ldr	r0, [fp, #20]
   11d6c:	str	r0, [sp, #72]	; 0x48
   11d70:	mov	r0, #0
   11d74:	str	r0, [sp, #56]	; 0x38
   11d78:	mov	r0, #0
   11d7c:	str	r0, [sp, #92]	; 0x5c
   11d80:	mov	r0, #0
   11d84:	str	r0, [fp, #-76]	; 0xffffffb4
   11d88:	mov	r0, #0
   11d8c:	cmp	r7, #10
   11d90:	bhi	12d10 <__assert_fail@plt+0x1f08>
   11d94:	add	r1, pc, #28
   11d98:	mov	sl, r6
   11d9c:	ldr	r6, [sp, #80]	; 0x50
   11da0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11da4:	mov	r8, #0
   11da8:	mov	r2, #1
   11dac:	mov	r3, #0
   11db0:	mov	lr, r9
   11db4:	ldr	pc, [r1, r7, lsl #2]
   11db8:	muleq	r1, ip, lr
   11dbc:	andeq	r1, r1, r8, asr #29
   11dc0:	andeq	r1, r1, ip, lsl #29
   11dc4:	andeq	r1, r1, r4, lsl #29
   11dc8:			; <UNDEFINED> instruction: 0x00011ebc
   11dcc:	andeq	r1, r1, r0, lsl pc
   11dd0:	andeq	r1, r1, ip, lsr #29
   11dd4:	andeq	r1, r1, ip, ror #30
   11dd8:	andeq	r1, r1, r4, ror #27
   11ddc:	andeq	r1, r1, r4, ror #27
   11de0:	andeq	r1, r1, ip, lsl #28
   11de4:	movw	r0, #20756	; 0x5114
   11de8:	mov	r1, r7
   11dec:	movt	r0, #1
   11df0:	bl	1371c <__assert_fail@plt+0x2914>
   11df4:	str	r0, [sp, #72]	; 0x48
   11df8:	movw	r0, #20758	; 0x5116
   11dfc:	mov	r1, r7
   11e00:	movt	r0, #1
   11e04:	bl	1371c <__assert_fail@plt+0x2914>
   11e08:	str	r0, [sp, #76]	; 0x4c
   11e0c:	str	r5, [fp, #-48]	; 0xffffffd0
   11e10:	mov	r8, #0
   11e14:	mov	r5, r7
   11e18:	tst	r4, #1
   11e1c:	bne	11e54 <__assert_fail@plt+0x104c>
   11e20:	ldr	r0, [sp, #72]	; 0x48
   11e24:	ldrb	r0, [r0]
   11e28:	cmp	r0, #0
   11e2c:	beq	11e54 <__assert_fail@plt+0x104c>
   11e30:	ldr	r1, [sp, #72]	; 0x48
   11e34:	mov	r8, #0
   11e38:	add	r1, r1, #1
   11e3c:	cmp	r8, sl
   11e40:	strbcc	r0, [r6, r8]
   11e44:	ldrb	r0, [r1, r8]
   11e48:	add	r8, r8, #1
   11e4c:	cmp	r0, #0
   11e50:	bne	11e3c <__assert_fail@plt+0x1034>
   11e54:	ldr	r7, [sp, #76]	; 0x4c
   11e58:	mov	r0, r7
   11e5c:	bl	10d48 <strlen@plt>
   11e60:	str	r7, [sp, #92]	; 0x5c
   11e64:	mov	r7, r5
   11e68:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e6c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11e70:	str	r0, [fp, #-76]	; 0xffffffb4
   11e74:	mov	r2, #1
   11e78:	mov	r3, r4
   11e7c:	mov	lr, r9
   11e80:	b	11f6c <__assert_fail@plt+0x1164>
   11e84:	mov	r0, #1
   11e88:	b	11ec8 <__assert_fail@plt+0x10c0>
   11e8c:	tst	r4, #1
   11e90:	bne	11ec8 <__assert_fail@plt+0x10c0>
   11e94:	mov	r2, r0
   11e98:	b	11ef0 <__assert_fail@plt+0x10e8>
   11e9c:	mov	r7, #0
   11ea0:	mov	r8, #0
   11ea4:	mov	r2, r0
   11ea8:	b	11f68 <__assert_fail@plt+0x1160>
   11eac:	mov	r0, #1
   11eb0:	mov	r8, #0
   11eb4:	mov	r7, #5
   11eb8:	b	11f24 <__assert_fail@plt+0x111c>
   11ebc:	mov	r2, #1
   11ec0:	tst	r4, #1
   11ec4:	beq	11ef0 <__assert_fail@plt+0x10e8>
   11ec8:	mov	r1, #1
   11ecc:	mov	r8, #0
   11ed0:	mov	r7, #2
   11ed4:	mov	r2, r0
   11ed8:	mov	r3, #1
   11edc:	str	r1, [fp, #-76]	; 0xffffffb4
   11ee0:	movw	r1, #20758	; 0x5116
   11ee4:	movt	r1, #1
   11ee8:	str	r1, [sp, #92]	; 0x5c
   11eec:	b	11f6c <__assert_fail@plt+0x1164>
   11ef0:	cmp	sl, #0
   11ef4:	mov	r8, #1
   11ef8:	mov	r7, #2
   11efc:	movne	r0, #39	; 0x27
   11f00:	strbne	r0, [r6]
   11f04:	movw	r0, #20758	; 0x5116
   11f08:	movt	r0, #1
   11f0c:	b	11f5c <__assert_fail@plt+0x1154>
   11f10:	mov	r7, #5
   11f14:	tst	r4, #1
   11f18:	beq	11f40 <__assert_fail@plt+0x1138>
   11f1c:	mov	r0, #1
   11f20:	mov	r8, #0
   11f24:	str	r0, [fp, #-76]	; 0xffffffb4
   11f28:	movw	r0, #20754	; 0x5112
   11f2c:	mov	r2, #1
   11f30:	mov	r3, #1
   11f34:	movt	r0, #1
   11f38:	str	r0, [sp, #92]	; 0x5c
   11f3c:	b	11f6c <__assert_fail@plt+0x1164>
   11f40:	cmp	sl, #0
   11f44:	mov	r8, #1
   11f48:	mov	r2, #1
   11f4c:	movne	r0, #34	; 0x22
   11f50:	strbne	r0, [r6]
   11f54:	movw	r0, #20754	; 0x5112
   11f58:	movt	r0, #1
   11f5c:	str	r0, [sp, #92]	; 0x5c
   11f60:	mov	r0, #1
   11f64:	str	r0, [fp, #-76]	; 0xffffffb4
   11f68:	mov	r3, #0
   11f6c:	ldr	r0, [fp, #16]
   11f70:	str	r3, [fp, #-72]	; 0xffffffb8
   11f74:	str	r7, [fp, #-64]	; 0xffffffc0
   11f78:	str	r2, [sp, #84]	; 0x54
   11f7c:	cmp	r0, #0
   11f80:	movwne	r0, #1
   11f84:	and	r0, r0, r3
   11f88:	str	r0, [fp, #-88]	; 0xffffffa8
   11f8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11f90:	cmp	r0, #0
   11f94:	movwne	r0, #1
   11f98:	subs	r4, r7, #2
   11f9c:	mov	r7, #0
   11fa0:	and	r1, r0, r3
   11fa4:	str	r4, [fp, #-80]	; 0xffffffb0
   11fa8:	and	r1, r2, r1
   11fac:	str	r1, [sp, #48]	; 0x30
   11fb0:	clz	r1, r4
   11fb4:	lsr	r1, r1, #5
   11fb8:	and	r1, r1, r3
   11fbc:	eor	r3, r3, #1
   11fc0:	str	r1, [sp, #64]	; 0x40
   11fc4:	mov	r1, r4
   11fc8:	str	r3, [sp, #88]	; 0x58
   11fcc:	movwne	r1, #1
   11fd0:	orr	r3, r1, r3
   11fd4:	and	r1, r1, r2
   11fd8:	and	r0, r0, r1
   11fdc:	str	r3, [sp, #68]	; 0x44
   11fe0:	str	r1, [fp, #-68]	; 0xffffffbc
   11fe4:	str	r0, [fp, #-60]	; 0xffffffc4
   11fe8:	eor	r0, r2, #1
   11fec:	str	r0, [sp, #52]	; 0x34
   11ff0:	cmn	lr, #1
   11ff4:	beq	12004 <__assert_fail@plt+0x11fc>
   11ff8:	cmp	r7, lr
   11ffc:	bne	12010 <__assert_fail@plt+0x1208>
   12000:	b	12b38 <__assert_fail@plt+0x1d30>
   12004:	ldrb	r0, [ip, r7]
   12008:	cmp	r0, #0
   1200c:	beq	12b40 <__assert_fail@plt+0x1d38>
   12010:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12014:	mov	r9, #0
   12018:	str	r5, [fp, #-48]	; 0xffffffd0
   1201c:	cmp	r0, #0
   12020:	beq	12054 <__assert_fail@plt+0x124c>
   12024:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12028:	add	r4, r7, r0
   1202c:	cmp	r0, #2
   12030:	bcc	1204c <__assert_fail@plt+0x1244>
   12034:	cmn	lr, #1
   12038:	bne	1204c <__assert_fail@plt+0x1244>
   1203c:	mov	r0, ip
   12040:	bl	10d48 <strlen@plt>
   12044:	ldr	ip, [fp, #-84]	; 0xffffffac
   12048:	mov	lr, r0
   1204c:	cmp	r4, lr
   12050:	bls	1205c <__assert_fail@plt+0x1254>
   12054:	mov	r0, #0
   12058:	b	1209c <__assert_fail@plt+0x1294>
   1205c:	ldr	r1, [sp, #92]	; 0x5c
   12060:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12064:	add	r0, ip, r7
   12068:	mov	r4, lr
   1206c:	bl	10c70 <memcmp@plt>
   12070:	ldr	r2, [sp, #88]	; 0x58
   12074:	cmp	r0, #0
   12078:	mov	r1, r0
   1207c:	movwne	r1, #1
   12080:	orr	r1, r1, r2
   12084:	tst	r1, #1
   12088:	beq	12bd0 <__assert_fail@plt+0x1dc8>
   1208c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12090:	clz	r0, r0
   12094:	mov	lr, r4
   12098:	lsr	r0, r0, #5
   1209c:	str	r0, [fp, #-52]	; 0xffffffcc
   120a0:	ldrb	r5, [ip, r7]
   120a4:	cmp	r5, #126	; 0x7e
   120a8:	bhi	12460 <__assert_fail@plt+0x1658>
   120ac:	add	r3, pc, #16
   120b0:	mov	r4, #1
   120b4:	mov	r2, #110	; 0x6e
   120b8:	mov	r0, #97	; 0x61
   120bc:	mov	r1, #0
   120c0:	ldr	pc, [r3, r5, lsl #2]
   120c4:	andeq	r2, r1, ip, asr r3
   120c8:	andeq	r2, r1, r0, ror #8
   120cc:	andeq	r2, r1, r0, ror #8
   120d0:	andeq	r2, r1, r0, ror #8
   120d4:	andeq	r2, r1, r0, ror #8
   120d8:	andeq	r2, r1, r0, ror #8
   120dc:	andeq	r2, r1, r0, ror #8
   120e0:	andeq	r2, r1, r4, lsl r5
   120e4:	andeq	r2, r1, ip, lsr r3
   120e8:	andeq	r2, r1, r4, lsr r3
   120ec:	andeq	r2, r1, r8, asr #6
   120f0:	andeq	r2, r1, r8, asr #7
   120f4:	andeq	r2, r1, ip, lsr #6
   120f8:	andeq	r2, r1, r4, asr #6
   120fc:	andeq	r2, r1, r0, ror #8
   12100:	andeq	r2, r1, r0, ror #8
   12104:	andeq	r2, r1, r0, ror #8
   12108:	andeq	r2, r1, r0, ror #8
   1210c:	andeq	r2, r1, r0, ror #8
   12110:	andeq	r2, r1, r0, ror #8
   12114:	andeq	r2, r1, r0, ror #8
   12118:	andeq	r2, r1, r0, ror #8
   1211c:	andeq	r2, r1, r0, ror #8
   12120:	andeq	r2, r1, r0, ror #8
   12124:	andeq	r2, r1, r0, ror #8
   12128:	andeq	r2, r1, r0, ror #8
   1212c:	andeq	r2, r1, r0, ror #8
   12130:	andeq	r2, r1, r0, ror #8
   12134:	andeq	r2, r1, r0, ror #8
   12138:	andeq	r2, r1, r0, ror #8
   1213c:	andeq	r2, r1, r0, ror #8
   12140:	andeq	r2, r1, r0, ror #8
   12144:	andeq	r2, r1, ip, asr #9
   12148:	ldrdeq	r2, [r1], -r0
   1214c:	ldrdeq	r2, [r1], -r0
   12150:	ldrdeq	r2, [r1], -r4
   12154:	ldrdeq	r2, [r1], -r0
   12158:	andeq	r2, r1, r0, asr #5
   1215c:	ldrdeq	r2, [r1], -r0
   12160:	ldrdeq	r2, [r1], -r0
   12164:	ldrdeq	r2, [r1], -r0
   12168:	ldrdeq	r2, [r1], -r0
   1216c:	ldrdeq	r2, [r1], -r0
   12170:	andeq	r2, r1, r0, asr #5
   12174:	andeq	r2, r1, r0, asr #5
   12178:	andeq	r2, r1, r0, asr #5
   1217c:	andeq	r2, r1, r0, asr #5
   12180:	andeq	r2, r1, r0, asr #5
   12184:	andeq	r2, r1, r0, asr #5
   12188:	andeq	r2, r1, r0, asr #5
   1218c:	andeq	r2, r1, r0, asr #5
   12190:	andeq	r2, r1, r0, asr #5
   12194:	andeq	r2, r1, r0, asr #5
   12198:	andeq	r2, r1, r0, asr #5
   1219c:	andeq	r2, r1, r0, asr #5
   121a0:	andeq	r2, r1, r0, asr #5
   121a4:	andeq	r2, r1, r0, asr #5
   121a8:	andeq	r2, r1, r0, asr #5
   121ac:	andeq	r2, r1, r0, asr #5
   121b0:	ldrdeq	r2, [r1], -r0
   121b4:	ldrdeq	r2, [r1], -r0
   121b8:	ldrdeq	r2, [r1], -r0
   121bc:	ldrdeq	r2, [r1], -r0
   121c0:	muleq	r1, ip, r3
   121c4:	andeq	r2, r1, r0, ror #8
   121c8:	andeq	r2, r1, r0, asr #5
   121cc:	andeq	r2, r1, r0, asr #5
   121d0:	andeq	r2, r1, r0, asr #5
   121d4:	andeq	r2, r1, r0, asr #5
   121d8:	andeq	r2, r1, r0, asr #5
   121dc:	andeq	r2, r1, r0, asr #5
   121e0:	andeq	r2, r1, r0, asr #5
   121e4:	andeq	r2, r1, r0, asr #5
   121e8:	andeq	r2, r1, r0, asr #5
   121ec:	andeq	r2, r1, r0, asr #5
   121f0:	andeq	r2, r1, r0, asr #5
   121f4:	andeq	r2, r1, r0, asr #5
   121f8:	andeq	r2, r1, r0, asr #5
   121fc:	andeq	r2, r1, r0, asr #5
   12200:	andeq	r2, r1, r0, asr #5
   12204:	andeq	r2, r1, r0, asr #5
   12208:	andeq	r2, r1, r0, asr #5
   1220c:	andeq	r2, r1, r0, asr #5
   12210:	andeq	r2, r1, r0, asr #5
   12214:	andeq	r2, r1, r0, asr #5
   12218:	andeq	r2, r1, r0, asr #5
   1221c:	andeq	r2, r1, r0, asr #5
   12220:	andeq	r2, r1, r0, asr #5
   12224:	andeq	r2, r1, r0, asr #5
   12228:	andeq	r2, r1, r0, asr #5
   1222c:	andeq	r2, r1, r0, asr #5
   12230:	ldrdeq	r2, [r1], -r0
   12234:	andeq	r2, r1, r8, lsl #6
   12238:	andeq	r2, r1, r0, asr #5
   1223c:	ldrdeq	r2, [r1], -r0
   12240:	andeq	r2, r1, r0, asr #5
   12244:	ldrdeq	r2, [r1], -r0
   12248:	andeq	r2, r1, r0, asr #5
   1224c:	andeq	r2, r1, r0, asr #5
   12250:	andeq	r2, r1, r0, asr #5
   12254:	andeq	r2, r1, r0, asr #5
   12258:	andeq	r2, r1, r0, asr #5
   1225c:	andeq	r2, r1, r0, asr #5
   12260:	andeq	r2, r1, r0, asr #5
   12264:	andeq	r2, r1, r0, asr #5
   12268:	andeq	r2, r1, r0, asr #5
   1226c:	andeq	r2, r1, r0, asr #5
   12270:	andeq	r2, r1, r0, asr #5
   12274:	andeq	r2, r1, r0, asr #5
   12278:	andeq	r2, r1, r0, asr #5
   1227c:	andeq	r2, r1, r0, asr #5
   12280:	andeq	r2, r1, r0, asr #5
   12284:	andeq	r2, r1, r0, asr #5
   12288:	andeq	r2, r1, r0, asr #5
   1228c:	andeq	r2, r1, r0, asr #5
   12290:	andeq	r2, r1, r0, asr #5
   12294:	andeq	r2, r1, r0, asr #5
   12298:	andeq	r2, r1, r0, asr #5
   1229c:	andeq	r2, r1, r0, asr #5
   122a0:	andeq	r2, r1, r0, asr #5
   122a4:	andeq	r2, r1, r0, asr #5
   122a8:	andeq	r2, r1, r0, asr #5
   122ac:	andeq	r2, r1, r0, asr #5
   122b0:	andeq	r2, r1, r8, ror #5
   122b4:	ldrdeq	r2, [r1], -r0
   122b8:	andeq	r2, r1, r8, ror #5
   122bc:	ldrdeq	r2, [r1], -r4
   122c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122c4:	cmp	r0, #0
   122c8:	beq	12528 <__assert_fail@plt+0x1720>
   122cc:	ldr	r0, [fp, #16]
   122d0:	b	1252c <__assert_fail@plt+0x1724>
   122d4:	mov	r4, #0
   122d8:	cmp	r7, #0
   122dc:	beq	124cc <__assert_fail@plt+0x16c4>
   122e0:	mov	r9, #0
   122e4:	b	122c0 <__assert_fail@plt+0x14b8>
   122e8:	mov	r4, #0
   122ec:	cmn	lr, #1
   122f0:	beq	124b0 <__assert_fail@plt+0x16a8>
   122f4:	cmp	r7, #0
   122f8:	bne	122e0 <__assert_fail@plt+0x14d8>
   122fc:	cmp	lr, #1
   12300:	beq	124cc <__assert_fail@plt+0x16c4>
   12304:	b	122e0 <__assert_fail@plt+0x14d8>
   12308:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1230c:	cmp	r0, #2
   12310:	bne	124f0 <__assert_fail@plt+0x16e8>
   12314:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12318:	tst	r0, #1
   1231c:	bne	12bec <__assert_fail@plt+0x1de4>
   12320:	mov	r9, #0
   12324:	mov	r0, #92	; 0x5c
   12328:	b	12504 <__assert_fail@plt+0x16fc>
   1232c:	mov	r0, #102	; 0x66
   12330:	b	12514 <__assert_fail@plt+0x170c>
   12334:	mov	r2, #116	; 0x74
   12338:	b	12348 <__assert_fail@plt+0x1540>
   1233c:	mov	r0, #98	; 0x62
   12340:	b	12514 <__assert_fail@plt+0x170c>
   12344:	mov	r2, #114	; 0x72
   12348:	ldr	r0, [sp, #68]	; 0x44
   1234c:	tst	r0, #1
   12350:	mov	r0, r2
   12354:	bne	12514 <__assert_fail@plt+0x170c>
   12358:	b	12bec <__assert_fail@plt+0x1de4>
   1235c:	ldr	r0, [sp, #84]	; 0x54
   12360:	tst	r0, #1
   12364:	beq	12604 <__assert_fail@plt+0x17fc>
   12368:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1236c:	tst	r0, #1
   12370:	bne	12cfc <__assert_fail@plt+0x1ef4>
   12374:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12378:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1237c:	cmp	r0, #2
   12380:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12384:	movwne	r0, #1
   12388:	orr	r0, r0, r2
   1238c:	tst	r0, #1
   12390:	beq	129d4 <__assert_fail@plt+0x1bcc>
   12394:	mov	r0, r8
   12398:	b	12a08 <__assert_fail@plt+0x1c00>
   1239c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   123a0:	mov	r9, #0
   123a4:	mov	r5, #63	; 0x3f
   123a8:	cmp	r0, #5
   123ac:	beq	127b8 <__assert_fail@plt+0x19b0>
   123b0:	cmp	r0, #2
   123b4:	bne	1285c <__assert_fail@plt+0x1a54>
   123b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   123bc:	tst	r0, #1
   123c0:	beq	12860 <__assert_fail@plt+0x1a58>
   123c4:	b	12bec <__assert_fail@plt+0x1de4>
   123c8:	mov	r0, #118	; 0x76
   123cc:	b	12514 <__assert_fail@plt+0x170c>
   123d0:	mov	r0, #1
   123d4:	mov	r5, #39	; 0x27
   123d8:	str	r0, [sp, #60]	; 0x3c
   123dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   123e0:	cmp	r0, #2
   123e4:	bne	12458 <__assert_fail@plt+0x1650>
   123e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   123ec:	tst	r0, #1
   123f0:	bne	12bec <__assert_fail@plt+0x1de4>
   123f4:	ldr	r2, [sp, #56]	; 0x38
   123f8:	clz	r1, sl
   123fc:	mov	r9, #0
   12400:	lsr	r1, r1, #5
   12404:	cmp	r2, #0
   12408:	mov	r0, r2
   1240c:	movwne	r0, #1
   12410:	orrs	r0, r0, r1
   12414:	moveq	r2, sl
   12418:	moveq	sl, r0
   1241c:	cmp	r8, sl
   12420:	str	r2, [sp, #56]	; 0x38
   12424:	movcc	r0, #39	; 0x27
   12428:	strbcc	r0, [r6, r8]
   1242c:	add	r0, r8, #1
   12430:	cmp	r0, sl
   12434:	movcc	r1, #92	; 0x5c
   12438:	strbcc	r1, [r6, r0]
   1243c:	add	r0, r8, #2
   12440:	add	r8, r8, #3
   12444:	cmp	r0, sl
   12448:	movcc	r1, #39	; 0x27
   1244c:	strbcc	r1, [r6, r0]
   12450:	mov	r0, #0
   12454:	str	r0, [fp, #-56]	; 0xffffffc8
   12458:	mov	r4, #1
   1245c:	b	122c0 <__assert_fail@plt+0x14b8>
   12460:	ldr	r0, [sp, #40]	; 0x28
   12464:	cmp	r0, #1
   12468:	bne	12630 <__assert_fail@plt+0x1828>
   1246c:	str	lr, [sp, #28]
   12470:	bl	10d30 <__ctype_b_loc@plt>
   12474:	ldr	r0, [r0]
   12478:	ldr	ip, [fp, #-84]	; 0xffffffac
   1247c:	mov	r1, #1
   12480:	add	r0, r0, r5, lsl #1
   12484:	ldrb	r0, [r0, #1]
   12488:	ubfx	r4, r0, #6, #1
   1248c:	ldr	r0, [sp, #52]	; 0x34
   12490:	mov	r2, r1
   12494:	cmp	r1, #1
   12498:	orr	r0, r4, r0
   1249c:	bhi	12868 <__assert_fail@plt+0x1a60>
   124a0:	tst	r0, #1
   124a4:	beq	12868 <__assert_fail@plt+0x1a60>
   124a8:	ldr	lr, [sp, #28]
   124ac:	b	122c0 <__assert_fail@plt+0x14b8>
   124b0:	cmp	r7, #0
   124b4:	ldrbeq	r0, [ip, #1]
   124b8:	cmpeq	r0, #0
   124bc:	beq	124cc <__assert_fail@plt+0x16c4>
   124c0:	mvn	lr, #0
   124c4:	mov	r9, #0
   124c8:	b	122c0 <__assert_fail@plt+0x14b8>
   124cc:	mov	r1, #1
   124d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   124d4:	cmp	r0, #2
   124d8:	bne	124e8 <__assert_fail@plt+0x16e0>
   124dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   124e0:	tst	r0, #1
   124e4:	bne	12bec <__assert_fail@plt+0x1de4>
   124e8:	mov	r4, r1
   124ec:	b	122c0 <__assert_fail@plt+0x14b8>
   124f0:	ldr	r1, [sp, #48]	; 0x30
   124f4:	mov	r9, #0
   124f8:	mov	r0, #92	; 0x5c
   124fc:	cmp	r1, #0
   12500:	beq	12514 <__assert_fail@plt+0x170c>
   12504:	mov	r4, #0
   12508:	cmp	r9, #0
   1250c:	beq	12aa0 <__assert_fail@plt+0x1c98>
   12510:	b	12adc <__assert_fail@plt+0x1cd4>
   12514:	ldr	r1, [sp, #84]	; 0x54
   12518:	mov	r4, #0
   1251c:	mov	r9, #0
   12520:	tst	r1, #1
   12524:	bne	12564 <__assert_fail@plt+0x175c>
   12528:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1252c:	cmp	r0, #0
   12530:	mov	r0, r5
   12534:	beq	12558 <__assert_fail@plt+0x1750>
   12538:	ldr	r1, [fp, #16]
   1253c:	ubfx	r0, r5, #5, #3
   12540:	mov	r2, #1
   12544:	ldr	r0, [r1, r0, lsl #2]
   12548:	and	r1, r5, #31
   1254c:	tst	r0, r2, lsl r1
   12550:	mov	r0, r5
   12554:	bne	12564 <__assert_fail@plt+0x175c>
   12558:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1255c:	cmp	r1, #0
   12560:	beq	12a98 <__assert_fail@plt+0x1c90>
   12564:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12568:	tst	r1, #1
   1256c:	bne	12bc4 <__assert_fail@plt+0x1dbc>
   12570:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12574:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12578:	cmp	r1, #2
   1257c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12580:	movwne	r1, #1
   12584:	orr	r1, r1, r2
   12588:	tst	r1, #1
   1258c:	beq	12598 <__assert_fail@plt+0x1790>
   12590:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12594:	b	125d4 <__assert_fail@plt+0x17cc>
   12598:	cmp	r8, sl
   1259c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   125a0:	movcc	r1, #39	; 0x27
   125a4:	strbcc	r1, [r6, r8]
   125a8:	add	r1, r8, #1
   125ac:	cmp	r1, sl
   125b0:	movcc	r2, #36	; 0x24
   125b4:	strbcc	r2, [r6, r1]
   125b8:	add	r1, r8, #2
   125bc:	add	r8, r8, #3
   125c0:	cmp	r1, sl
   125c4:	movcc	r2, #39	; 0x27
   125c8:	strbcc	r2, [r6, r1]
   125cc:	mov	r1, #1
   125d0:	str	r1, [fp, #-56]	; 0xffffffc8
   125d4:	cmp	r8, sl
   125d8:	movcc	r1, #92	; 0x5c
   125dc:	strbcc	r1, [r6, r8]
   125e0:	add	r8, r8, #1
   125e4:	cmp	r8, sl
   125e8:	and	r5, r5, r4
   125ec:	add	r7, r7, #1
   125f0:	strbcc	r0, [r6, r8]
   125f4:	add	r8, r8, #1
   125f8:	cmn	lr, #1
   125fc:	bne	11ff8 <__assert_fail@plt+0x11f0>
   12600:	b	12004 <__assert_fail@plt+0x11fc>
   12604:	ldr	r0, [sp, #36]	; 0x24
   12608:	mov	r4, #0
   1260c:	mov	r9, #0
   12610:	mov	r5, #0
   12614:	cmp	r0, #0
   12618:	beq	12528 <__assert_fail@plt+0x1720>
   1261c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12620:	add	r7, r7, #1
   12624:	cmn	lr, #1
   12628:	bne	11ff8 <__assert_fail@plt+0x11f0>
   1262c:	b	12004 <__assert_fail@plt+0x11fc>
   12630:	mov	r0, #0
   12634:	cmn	lr, #1
   12638:	str	r0, [fp, #-36]	; 0xffffffdc
   1263c:	str	r0, [fp, #-40]	; 0xffffffd8
   12640:	bne	12654 <__assert_fail@plt+0x184c>
   12644:	mov	r0, ip
   12648:	bl	10d48 <strlen@plt>
   1264c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12650:	mov	lr, r0
   12654:	add	r0, ip, r7
   12658:	mov	r4, #1
   1265c:	mov	r6, #0
   12660:	str	lr, [sp, #28]
   12664:	str	r0, [sp, #24]
   12668:	sub	r0, fp, #40	; 0x28
   1266c:	mov	r3, r0
   12670:	str	r6, [sp, #44]	; 0x2c
   12674:	add	r6, r6, r7
   12678:	sub	r0, fp, #44	; 0x2c
   1267c:	add	r1, ip, r6
   12680:	sub	r2, lr, r6
   12684:	bl	147f0 <__assert_fail@plt+0x39e8>
   12688:	cmp	r0, #0
   1268c:	beq	12b24 <__assert_fail@plt+0x1d1c>
   12690:	cmn	r0, #1
   12694:	beq	12ae4 <__assert_fail@plt+0x1cdc>
   12698:	ldr	lr, [sp, #28]
   1269c:	cmn	r0, #2
   126a0:	beq	12aec <__assert_fail@plt+0x1ce4>
   126a4:	ldr	r2, [sp, #64]	; 0x40
   126a8:	cmp	r0, #2
   126ac:	mov	r1, #0
   126b0:	movwcc	r1, #1
   126b4:	eor	r2, r2, #1
   126b8:	orrs	r1, r2, r1
   126bc:	bne	1277c <__assert_fail@plt+0x1974>
   126c0:	ldr	r1, [sp, #44]	; 0x2c
   126c4:	ldr	r2, [sp, #24]
   126c8:	add	r1, r2, r1
   126cc:	mov	r2, #1
   126d0:	ldrb	r3, [r1, r2]
   126d4:	sub	r3, r3, #91	; 0x5b
   126d8:	cmp	r3, #33	; 0x21
   126dc:	bhi	12770 <__assert_fail@plt+0x1968>
   126e0:	add	r6, pc, #0
   126e4:	ldr	pc, [r6, r3, lsl #2]
   126e8:	andeq	r2, r1, r4, ror #23
   126ec:	andeq	r2, r1, r4, ror #23
   126f0:	andeq	r2, r1, r0, ror r7
   126f4:	andeq	r2, r1, r4, ror #23
   126f8:	andeq	r2, r1, r0, ror r7
   126fc:	andeq	r2, r1, r4, ror #23
   12700:	andeq	r2, r1, r0, ror r7
   12704:	andeq	r2, r1, r0, ror r7
   12708:	andeq	r2, r1, r0, ror r7
   1270c:	andeq	r2, r1, r0, ror r7
   12710:	andeq	r2, r1, r0, ror r7
   12714:	andeq	r2, r1, r0, ror r7
   12718:	andeq	r2, r1, r0, ror r7
   1271c:	andeq	r2, r1, r0, ror r7
   12720:	andeq	r2, r1, r0, ror r7
   12724:	andeq	r2, r1, r0, ror r7
   12728:	andeq	r2, r1, r0, ror r7
   1272c:	andeq	r2, r1, r0, ror r7
   12730:	andeq	r2, r1, r0, ror r7
   12734:	andeq	r2, r1, r0, ror r7
   12738:	andeq	r2, r1, r0, ror r7
   1273c:	andeq	r2, r1, r0, ror r7
   12740:	andeq	r2, r1, r0, ror r7
   12744:	andeq	r2, r1, r0, ror r7
   12748:	andeq	r2, r1, r0, ror r7
   1274c:	andeq	r2, r1, r0, ror r7
   12750:	andeq	r2, r1, r0, ror r7
   12754:	andeq	r2, r1, r0, ror r7
   12758:	andeq	r2, r1, r0, ror r7
   1275c:	andeq	r2, r1, r0, ror r7
   12760:	andeq	r2, r1, r0, ror r7
   12764:	andeq	r2, r1, r0, ror r7
   12768:	andeq	r2, r1, r0, ror r7
   1276c:	andeq	r2, r1, r4, ror #23
   12770:	add	r2, r2, #1
   12774:	cmp	r2, r0
   12778:	bcc	126d0 <__assert_fail@plt+0x18c8>
   1277c:	ldr	r6, [sp, #44]	; 0x2c
   12780:	add	r6, r0, r6
   12784:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12788:	bl	10ca0 <iswprint@plt>
   1278c:	cmp	r0, #0
   12790:	movwne	r0, #1
   12794:	and	r4, r4, r0
   12798:	sub	r0, fp, #40	; 0x28
   1279c:	bl	10c64 <mbsinit@plt>
   127a0:	ldr	lr, [sp, #28]
   127a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   127a8:	sub	r3, fp, #40	; 0x28
   127ac:	cmp	r0, #0
   127b0:	beq	12670 <__assert_fail@plt+0x1868>
   127b4:	b	12b2c <__assert_fail@plt+0x1d24>
   127b8:	ldr	r0, [sp, #32]
   127bc:	cmp	r0, #0
   127c0:	beq	1285c <__assert_fail@plt+0x1a54>
   127c4:	add	r0, r7, #2
   127c8:	cmp	r0, lr
   127cc:	bcs	1285c <__assert_fail@plt+0x1a54>
   127d0:	add	r1, ip, r7
   127d4:	ldrb	r1, [r1, #1]
   127d8:	cmp	r1, #63	; 0x3f
   127dc:	bne	1285c <__assert_fail@plt+0x1a54>
   127e0:	ldrb	r5, [ip, r0]
   127e4:	sub	r1, r5, #33	; 0x21
   127e8:	cmp	r1, #29
   127ec:	bhi	1285c <__assert_fail@plt+0x1a54>
   127f0:	movw	r3, #20929	; 0x51c1
   127f4:	mov	r2, #1
   127f8:	movt	r3, #14336	; 0x3800
   127fc:	tst	r3, r2, lsl r1
   12800:	beq	1285c <__assert_fail@plt+0x1a54>
   12804:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12808:	tst	r1, #1
   1280c:	bne	12d04 <__assert_fail@plt+0x1efc>
   12810:	cmp	r8, sl
   12814:	mov	r7, r0
   12818:	mov	r4, #0
   1281c:	movcc	r1, #63	; 0x3f
   12820:	strbcc	r1, [r6, r8]
   12824:	add	r1, r8, #1
   12828:	cmp	r1, sl
   1282c:	movcc	r2, #34	; 0x22
   12830:	strbcc	r2, [r6, r1]
   12834:	add	r1, r8, #2
   12838:	cmp	r1, sl
   1283c:	movcc	r2, #34	; 0x22
   12840:	strbcc	r2, [r6, r1]
   12844:	add	r1, r8, #3
   12848:	add	r8, r8, #4
   1284c:	cmp	r1, sl
   12850:	movcc	r2, #63	; 0x3f
   12854:	strbcc	r2, [r6, r1]
   12858:	b	122c0 <__assert_fail@plt+0x14b8>
   1285c:	mov	r5, #63	; 0x3f
   12860:	mov	r4, #0
   12864:	b	122c0 <__assert_fail@plt+0x14b8>
   12868:	add	r1, r2, r7
   1286c:	ldr	lr, [sp, #28]
   12870:	mov	r3, #0
   12874:	str	r1, [sp, #44]	; 0x2c
   12878:	add	r1, r7, #1
   1287c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12880:	tst	r0, #1
   12884:	bne	12958 <__assert_fail@plt+0x1b50>
   12888:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1288c:	tst	r2, #1
   12890:	bne	12c4c <__assert_fail@plt+0x1e44>
   12894:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12898:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1289c:	cmp	r7, #2
   128a0:	movwne	r3, #1
   128a4:	orr	r3, r3, r2
   128a8:	tst	r3, #1
   128ac:	bne	128e8 <__assert_fail@plt+0x1ae0>
   128b0:	cmp	r8, sl
   128b4:	add	r3, r8, #1
   128b8:	movcc	r2, #39	; 0x27
   128bc:	strbcc	r2, [r6, r8]
   128c0:	cmp	r3, sl
   128c4:	movcc	r2, #36	; 0x24
   128c8:	strbcc	r2, [r6, r3]
   128cc:	add	r3, r8, #2
   128d0:	add	r8, r8, #3
   128d4:	cmp	r3, sl
   128d8:	movcc	r2, #39	; 0x27
   128dc:	strbcc	r2, [r6, r3]
   128e0:	mov	r2, #1
   128e4:	str	r2, [fp, #-56]	; 0xffffffc8
   128e8:	cmp	r8, sl
   128ec:	movcc	r3, #92	; 0x5c
   128f0:	strbcc	r3, [r6, r8]
   128f4:	add	r3, r8, #1
   128f8:	cmp	r3, sl
   128fc:	andcc	r7, r5, #192	; 0xc0
   12900:	movcc	r2, #48	; 0x30
   12904:	orrcc	r7, r2, r7, lsr #6
   12908:	strbcc	r7, [r6, r3]
   1290c:	add	r3, r8, #2
   12910:	add	r8, r8, #3
   12914:	cmp	r3, sl
   12918:	lsrcc	r7, r5, #3
   1291c:	movcc	r2, #6
   12920:	bficc	r7, r2, #3, #29
   12924:	mov	r2, #6
   12928:	strbcc	r7, [r6, r3]
   1292c:	bfi	r5, r2, #3, #29
   12930:	mov	r3, #1
   12934:	b	1297c <__assert_fail@plt+0x1b74>
   12938:	cmp	r8, sl
   1293c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12940:	strbcc	r5, [r6, r8]
   12944:	add	r8, r8, #1
   12948:	ldrb	r5, [ip, r1]
   1294c:	add	r1, r1, #1
   12950:	tst	r0, #1
   12954:	beq	12888 <__assert_fail@plt+0x1a80>
   12958:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1295c:	tst	r2, #1
   12960:	beq	12974 <__assert_fail@plt+0x1b6c>
   12964:	cmp	r8, sl
   12968:	movcc	r7, #92	; 0x5c
   1296c:	strbcc	r7, [r6, r8]
   12970:	add	r8, r8, #1
   12974:	mov	r2, #0
   12978:	str	r2, [fp, #-52]	; 0xffffffcc
   1297c:	ldr	r2, [sp, #44]	; 0x2c
   12980:	and	r9, r3, #1
   12984:	cmp	r2, r1
   12988:	bls	12a88 <__assert_fail@plt+0x1c80>
   1298c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12990:	cmp	r9, #0
   12994:	movwne	r9, #1
   12998:	mvn	r7, r2
   1299c:	orr	r7, r7, r9
   129a0:	tst	r7, #1
   129a4:	bne	12938 <__assert_fail@plt+0x1b30>
   129a8:	cmp	r8, sl
   129ac:	movcc	r7, #39	; 0x27
   129b0:	strbcc	r7, [r6, r8]
   129b4:	add	r7, r8, #1
   129b8:	add	r8, r8, #2
   129bc:	cmp	r7, sl
   129c0:	movcc	r2, #39	; 0x27
   129c4:	strbcc	r2, [r6, r7]
   129c8:	mov	r2, #0
   129cc:	str	r2, [fp, #-56]	; 0xffffffc8
   129d0:	b	12938 <__assert_fail@plt+0x1b30>
   129d4:	cmp	r8, sl
   129d8:	mov	r2, #1
   129dc:	movcc	r0, #39	; 0x27
   129e0:	strbcc	r0, [r6, r8]
   129e4:	add	r0, r8, #1
   129e8:	cmp	r0, sl
   129ec:	movcc	r1, #36	; 0x24
   129f0:	strbcc	r1, [r6, r0]
   129f4:	add	r0, r8, #2
   129f8:	cmp	r0, sl
   129fc:	movcc	r1, #39	; 0x27
   12a00:	strbcc	r1, [r6, r0]
   12a04:	add	r0, r8, #3
   12a08:	cmp	r0, sl
   12a0c:	add	r8, r0, #1
   12a10:	str	r2, [fp, #-56]	; 0xffffffc8
   12a14:	movcc	r1, #92	; 0x5c
   12a18:	strbcc	r1, [r6, r0]
   12a1c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12a20:	cmp	r1, #2
   12a24:	beq	12a78 <__assert_fail@plt+0x1c70>
   12a28:	add	r1, r7, #1
   12a2c:	mov	r4, #0
   12a30:	mov	r9, #1
   12a34:	mov	r5, #48	; 0x30
   12a38:	cmp	r1, lr
   12a3c:	bcs	122c0 <__assert_fail@plt+0x14b8>
   12a40:	ldrb	r1, [ip, r1]
   12a44:	sub	r1, r1, #48	; 0x30
   12a48:	uxtb	r1, r1
   12a4c:	cmp	r1, #9
   12a50:	bhi	122c0 <__assert_fail@plt+0x14b8>
   12a54:	cmp	r8, sl
   12a58:	movcc	r1, #48	; 0x30
   12a5c:	strbcc	r1, [r6, r8]
   12a60:	add	r1, r0, #2
   12a64:	add	r8, r0, #3
   12a68:	cmp	r1, sl
   12a6c:	movcc	r2, #48	; 0x30
   12a70:	strbcc	r2, [r6, r1]
   12a74:	b	122c0 <__assert_fail@plt+0x14b8>
   12a78:	mov	r0, #48	; 0x30
   12a7c:	mov	r9, #1
   12a80:	mov	r4, #0
   12a84:	b	12558 <__assert_fail@plt+0x1750>
   12a88:	cmp	r9, #0
   12a8c:	sub	r7, r1, #1
   12a90:	mov	r0, r5
   12a94:	movwne	r9, #1
   12a98:	cmp	r9, #0
   12a9c:	bne	12adc <__assert_fail@plt+0x1cd4>
   12aa0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12aa4:	tst	r1, #1
   12aa8:	beq	12adc <__assert_fail@plt+0x1cd4>
   12aac:	cmp	r8, sl
   12ab0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ab4:	movcc	r1, #39	; 0x27
   12ab8:	strbcc	r1, [r6, r8]
   12abc:	add	r1, r8, #1
   12ac0:	add	r8, r8, #2
   12ac4:	cmp	r1, sl
   12ac8:	movcc	r2, #39	; 0x27
   12acc:	strbcc	r2, [r6, r1]
   12ad0:	mov	r1, #0
   12ad4:	str	r1, [fp, #-56]	; 0xffffffc8
   12ad8:	b	125e4 <__assert_fail@plt+0x17dc>
   12adc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ae0:	b	125e4 <__assert_fail@plt+0x17dc>
   12ae4:	mov	r4, #0
   12ae8:	b	12b24 <__assert_fail@plt+0x1d1c>
   12aec:	mov	r4, #0
   12af0:	cmp	lr, r6
   12af4:	bls	12b24 <__assert_fail@plt+0x1d1c>
   12af8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12afc:	ldr	r6, [sp, #44]	; 0x2c
   12b00:	ldr	r0, [sp, #24]
   12b04:	ldrb	r0, [r0, r6]
   12b08:	cmp	r0, #0
   12b0c:	beq	12b2c <__assert_fail@plt+0x1d24>
   12b10:	add	r6, r6, #1
   12b14:	add	r0, r7, r6
   12b18:	cmp	r0, lr
   12b1c:	bcc	12b00 <__assert_fail@plt+0x1cf8>
   12b20:	b	12b2c <__assert_fail@plt+0x1d24>
   12b24:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b28:	ldr	r6, [sp, #44]	; 0x2c
   12b2c:	mov	r1, r6
   12b30:	ldr	r6, [sp, #80]	; 0x50
   12b34:	b	1248c <__assert_fail@plt+0x1684>
   12b38:	mov	lr, r7
   12b3c:	b	12b44 <__assert_fail@plt+0x1d3c>
   12b40:	mvn	lr, #0
   12b44:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12b48:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b4c:	eor	r0, r7, #2
   12b50:	orr	r0, r0, r8
   12b54:	clz	r0, r0
   12b58:	lsr	r0, r0, #5
   12b5c:	tst	r1, r0
   12b60:	bne	12bec <__assert_fail@plt+0x1de4>
   12b64:	mov	r0, r1
   12b68:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12b6c:	cmp	r7, #2
   12b70:	movwne	r1, #1
   12b74:	orr	r0, r0, r1
   12b78:	tst	r0, #1
   12b7c:	ldreq	r0, [sp, #60]	; 0x3c
   12b80:	eoreq	r0, r0, #1
   12b84:	tsteq	r0, #1
   12b88:	bne	12c98 <__assert_fail@plt+0x1e90>
   12b8c:	mov	r9, lr
   12b90:	tst	r5, #1
   12b94:	bne	12c54 <__assert_fail@plt+0x1e4c>
   12b98:	ldr	r6, [sp, #56]	; 0x38
   12b9c:	mov	r4, #0
   12ba0:	cmp	r6, #0
   12ba4:	beq	12c90 <__assert_fail@plt+0x1e88>
   12ba8:	ldr	r0, [sp, #84]	; 0x54
   12bac:	mov	r1, #0
   12bb0:	cmp	sl, #0
   12bb4:	mov	r5, #0
   12bb8:	str	r1, [fp, #-72]	; 0xffffffb8
   12bbc:	beq	11d8c <__assert_fail@plt+0xf84>
   12bc0:	b	12c98 <__assert_fail@plt+0x1e90>
   12bc4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12bc8:	ldr	r2, [sp, #84]	; 0x54
   12bcc:	b	12bf4 <__assert_fail@plt+0x1dec>
   12bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12bd4:	mov	r2, #1
   12bd8:	mov	lr, r4
   12bdc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12be0:	b	12bf4 <__assert_fail@plt+0x1dec>
   12be4:	ldr	r6, [sp, #80]	; 0x50
   12be8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12bec:	ldr	r2, [sp, #84]	; 0x54
   12bf0:	mov	r7, #2
   12bf4:	mov	r0, #0
   12bf8:	ldr	r1, [fp, #12]
   12bfc:	tst	r2, #1
   12c00:	mov	r2, r7
   12c04:	mov	r3, lr
   12c08:	str	r0, [sp, #8]
   12c0c:	ldr	r0, [sp, #72]	; 0x48
   12c10:	movwne	r2, #4
   12c14:	cmp	r7, #2
   12c18:	movne	r2, r7
   12c1c:	str	r2, [sp]
   12c20:	mov	r2, ip
   12c24:	bic	r1, r1, #2
   12c28:	str	r0, [sp, #12]
   12c2c:	ldr	r0, [sp, #76]	; 0x4c
   12c30:	str	r1, [sp, #4]
   12c34:	mov	r1, sl
   12c38:	str	r0, [sp, #16]
   12c3c:	mov	r0, r6
   12c40:	bl	11d0c <__assert_fail@plt+0xf04>
   12c44:	mov	r8, r0
   12c48:	b	12cf0 <__assert_fail@plt+0x1ee8>
   12c4c:	ldr	r2, [sp, #84]	; 0x54
   12c50:	b	12bf4 <__assert_fail@plt+0x1dec>
   12c54:	mov	r0, #5
   12c58:	ldr	r1, [sp, #56]	; 0x38
   12c5c:	ldr	r2, [fp, #-84]	; 0xffffffac
   12c60:	mov	r3, r9
   12c64:	str	r0, [sp]
   12c68:	ldr	r0, [fp, #12]
   12c6c:	str	r0, [sp, #4]
   12c70:	ldr	r0, [fp, #16]
   12c74:	str	r0, [sp, #8]
   12c78:	ldr	r0, [sp, #72]	; 0x48
   12c7c:	str	r0, [sp, #12]
   12c80:	ldr	r0, [sp, #76]	; 0x4c
   12c84:	str	r0, [sp, #16]
   12c88:	ldr	r0, [sp, #80]	; 0x50
   12c8c:	b	12c40 <__assert_fail@plt+0x1e38>
   12c90:	mov	r0, #0
   12c94:	str	r0, [fp, #-72]	; 0xffffffb8
   12c98:	ldr	r1, [sp, #92]	; 0x5c
   12c9c:	cmp	r1, #0
   12ca0:	beq	12ce0 <__assert_fail@plt+0x1ed8>
   12ca4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ca8:	ldr	r2, [sp, #80]	; 0x50
   12cac:	tst	r0, #1
   12cb0:	bne	12ce4 <__assert_fail@plt+0x1edc>
   12cb4:	ldrb	r0, [r1]
   12cb8:	cmp	r0, #0
   12cbc:	beq	12ce4 <__assert_fail@plt+0x1edc>
   12cc0:	add	r1, r1, #1
   12cc4:	cmp	r8, sl
   12cc8:	strbcc	r0, [r2, r8]
   12ccc:	add	r8, r8, #1
   12cd0:	ldrb	r0, [r1], #1
   12cd4:	cmp	r0, #0
   12cd8:	bne	12cc4 <__assert_fail@plt+0x1ebc>
   12cdc:	b	12ce4 <__assert_fail@plt+0x1edc>
   12ce0:	ldr	r2, [sp, #80]	; 0x50
   12ce4:	cmp	r8, sl
   12ce8:	movcc	r0, #0
   12cec:	strbcc	r0, [r2, r8]
   12cf0:	mov	r0, r8
   12cf4:	sub	sp, fp, #28
   12cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cfc:	mov	r2, #1
   12d00:	b	12bdc <__assert_fail@plt+0x1dd4>
   12d04:	ldr	r2, [sp, #84]	; 0x54
   12d08:	mov	r7, #5
   12d0c:	b	12bf4 <__assert_fail@plt+0x1dec>
   12d10:	bl	10dfc <abort@plt>
   12d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d18:	add	fp, sp, #28
   12d1c:	sub	sp, sp, #28
   12d20:	movw	r5, #24880	; 0x6130
   12d24:	cmp	r2, #0
   12d28:	mov	r4, r1
   12d2c:	mov	r7, r0
   12d30:	str	r0, [sp, #20]
   12d34:	movt	r5, #2
   12d38:	movne	r5, r2
   12d3c:	bl	10d54 <__errno_location@plt>
   12d40:	mov	sl, r0
   12d44:	ldm	r5, {r0, r1}
   12d48:	ldr	r2, [r5, #40]	; 0x28
   12d4c:	ldr	r3, [r5, #44]	; 0x2c
   12d50:	add	r9, r5, #8
   12d54:	ldr	r6, [sl]
   12d58:	orr	r8, r1, #1
   12d5c:	mov	r1, #0
   12d60:	str	r6, [sp, #24]
   12d64:	stm	sp, {r0, r8, r9}
   12d68:	str	r2, [sp, #12]
   12d6c:	str	r3, [sp, #16]
   12d70:	mov	r0, #0
   12d74:	mov	r2, r7
   12d78:	mov	r3, r4
   12d7c:	mov	r6, r4
   12d80:	bl	11d0c <__assert_fail@plt+0xf04>
   12d84:	add	r7, r0, #1
   12d88:	mov	r0, r7
   12d8c:	bl	13f24 <__assert_fail@plt+0x311c>
   12d90:	mov	r4, r0
   12d94:	ldr	r0, [r5]
   12d98:	ldr	r2, [r5, #44]	; 0x2c
   12d9c:	ldr	r1, [r5, #40]	; 0x28
   12da0:	mov	r3, r6
   12da4:	stm	sp, {r0, r8, r9}
   12da8:	str	r2, [sp, #16]
   12dac:	str	r1, [sp, #12]
   12db0:	mov	r0, r4
   12db4:	mov	r1, r7
   12db8:	ldr	r2, [sp, #20]
   12dbc:	bl	11d0c <__assert_fail@plt+0xf04>
   12dc0:	ldr	r0, [sp, #24]
   12dc4:	str	r0, [sl]
   12dc8:	mov	r0, r4
   12dcc:	sub	sp, fp, #28
   12dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dd8:	add	fp, sp, #28
   12ddc:	sub	sp, sp, #36	; 0x24
   12de0:	movw	r8, #24880	; 0x6130
   12de4:	cmp	r3, #0
   12de8:	mov	r4, r2
   12dec:	str	r2, [sp, #24]
   12df0:	mov	r5, r1
   12df4:	mov	r6, r0
   12df8:	str	r0, [sp, #20]
   12dfc:	movt	r8, #2
   12e00:	movne	r8, r3
   12e04:	bl	10d54 <__errno_location@plt>
   12e08:	str	r0, [sp, #28]
   12e0c:	cmp	r4, #0
   12e10:	add	sl, r8, #8
   12e14:	ldm	r8, {r3, r9}
   12e18:	ldr	r7, [r0]
   12e1c:	ldr	r1, [r8, #40]	; 0x28
   12e20:	ldr	r2, [r8, #44]	; 0x2c
   12e24:	mov	r0, #0
   12e28:	orreq	r9, r9, #1
   12e2c:	str	r7, [sp, #32]
   12e30:	mov	r7, r5
   12e34:	stm	sp, {r3, r9, sl}
   12e38:	str	r1, [sp, #12]
   12e3c:	str	r2, [sp, #16]
   12e40:	mov	r1, #0
   12e44:	mov	r2, r6
   12e48:	mov	r3, r5
   12e4c:	bl	11d0c <__assert_fail@plt+0xf04>
   12e50:	add	r4, r0, #1
   12e54:	mov	r5, r0
   12e58:	mov	r0, r4
   12e5c:	bl	13f24 <__assert_fail@plt+0x311c>
   12e60:	mov	r6, r0
   12e64:	ldr	r0, [r8]
   12e68:	ldr	r2, [r8, #44]	; 0x2c
   12e6c:	ldr	r1, [r8, #40]	; 0x28
   12e70:	mov	r3, r7
   12e74:	stm	sp, {r0, r9, sl}
   12e78:	str	r2, [sp, #16]
   12e7c:	str	r1, [sp, #12]
   12e80:	mov	r0, r6
   12e84:	mov	r1, r4
   12e88:	ldr	r2, [sp, #20]
   12e8c:	bl	11d0c <__assert_fail@plt+0xf04>
   12e90:	ldr	r0, [sp, #24]
   12e94:	ldr	r1, [sp, #32]
   12e98:	ldr	r2, [sp, #28]
   12e9c:	cmp	r0, #0
   12ea0:	str	r1, [r2]
   12ea4:	strne	r5, [r0]
   12ea8:	mov	r0, r6
   12eac:	sub	sp, fp, #28
   12eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12eb8:	add	fp, sp, #24
   12ebc:	movw	r5, #24788	; 0x60d4
   12ec0:	movw	r8, #24784	; 0x60d0
   12ec4:	movt	r5, #2
   12ec8:	movt	r8, #2
   12ecc:	ldr	r0, [r5]
   12ed0:	ldr	r4, [r8]
   12ed4:	cmp	r0, #2
   12ed8:	blt	12f04 <__assert_fail@plt+0x20fc>
   12edc:	add	r7, r4, #12
   12ee0:	mov	r6, #0
   12ee4:	ldr	r0, [r7, r6, lsl #3]
   12ee8:	bl	146ec <__assert_fail@plt+0x38e4>
   12eec:	ldr	r1, [r5]
   12ef0:	add	r2, r6, #2
   12ef4:	add	r0, r6, #1
   12ef8:	mov	r6, r0
   12efc:	cmp	r2, r1
   12f00:	blt	12ee4 <__assert_fail@plt+0x20dc>
   12f04:	ldr	r0, [r4, #4]
   12f08:	movw	r7, #24928	; 0x6160
   12f0c:	movt	r7, #2
   12f10:	cmp	r0, r7
   12f14:	beq	12f2c <__assert_fail@plt+0x2124>
   12f18:	bl	146ec <__assert_fail@plt+0x38e4>
   12f1c:	movw	r0, #24792	; 0x60d8
   12f20:	mov	r6, #256	; 0x100
   12f24:	movt	r0, #2
   12f28:	strd	r6, [r0]
   12f2c:	movw	r6, #24792	; 0x60d8
   12f30:	movt	r6, #2
   12f34:	cmp	r4, r6
   12f38:	beq	12f48 <__assert_fail@plt+0x2140>
   12f3c:	mov	r0, r4
   12f40:	bl	146ec <__assert_fail@plt+0x38e4>
   12f44:	str	r6, [r8]
   12f48:	mov	r0, #1
   12f4c:	str	r0, [r5]
   12f50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f54:	movw	r3, #24880	; 0x6130
   12f58:	mvn	r2, #0
   12f5c:	movt	r3, #2
   12f60:	b	12f64 <__assert_fail@plt+0x215c>
   12f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f68:	add	fp, sp, #28
   12f6c:	sub	sp, sp, #44	; 0x2c
   12f70:	mov	r7, r3
   12f74:	str	r2, [sp, #36]	; 0x24
   12f78:	str	r1, [sp, #32]
   12f7c:	mov	r5, r0
   12f80:	bl	10d54 <__errno_location@plt>
   12f84:	cmp	r5, #0
   12f88:	blt	130f4 <__assert_fail@plt+0x22ec>
   12f8c:	cmn	r5, #-2147483647	; 0x80000001
   12f90:	beq	130f4 <__assert_fail@plt+0x22ec>
   12f94:	movw	r8, #24788	; 0x60d4
   12f98:	movw	r4, #24784	; 0x60d0
   12f9c:	str	r0, [sp, #28]
   12fa0:	ldr	r0, [r0]
   12fa4:	movt	r8, #2
   12fa8:	movt	r4, #2
   12fac:	ldr	r1, [r8]
   12fb0:	ldr	r6, [r4]
   12fb4:	str	r0, [sp, #24]
   12fb8:	cmp	r1, r5
   12fbc:	ble	12fc8 <__assert_fail@plt+0x21c0>
   12fc0:	mov	sl, r6
   12fc4:	b	13030 <__assert_fail@plt+0x2228>
   12fc8:	movw	r9, #24792	; 0x60d8
   12fcc:	mov	r0, #8
   12fd0:	add	r2, r5, #1
   12fd4:	str	r1, [fp, #-32]	; 0xffffffe0
   12fd8:	mvn	r3, #-2147483648	; 0x80000000
   12fdc:	movt	r9, #2
   12fe0:	str	r0, [sp]
   12fe4:	sub	r2, r2, r1
   12fe8:	sub	r1, fp, #32
   12fec:	subs	r0, r6, r9
   12ff0:	movne	r0, r6
   12ff4:	bl	14124 <__assert_fail@plt+0x331c>
   12ff8:	cmp	r6, r9
   12ffc:	mov	sl, r0
   13000:	str	r0, [r4]
   13004:	ldrdeq	r0, [r9]
   13008:	stmeq	sl, {r0, r1}
   1300c:	ldr	r1, [r8]
   13010:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13014:	add	r0, sl, r1, lsl #3
   13018:	sub	r1, r2, r1
   1301c:	lsl	r2, r1, #3
   13020:	mov	r1, #0
   13024:	bl	10d6c <memset@plt>
   13028:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1302c:	str	r0, [r8]
   13030:	mov	r9, sl
   13034:	ldr	r6, [r9, r5, lsl #3]!
   13038:	ldr	r4, [r9, #4]!
   1303c:	ldm	r7, {r0, r1}
   13040:	ldr	r2, [r7, #40]	; 0x28
   13044:	ldr	r3, [r7, #44]	; 0x2c
   13048:	orr	r8, r1, #1
   1304c:	add	r1, r7, #8
   13050:	stm	sp, {r0, r8}
   13054:	add	r0, sp, #8
   13058:	str	r1, [sp, #20]
   1305c:	stm	r0, {r1, r2, r3}
   13060:	mov	r0, r4
   13064:	mov	r1, r6
   13068:	ldr	r2, [sp, #32]
   1306c:	ldr	r3, [sp, #36]	; 0x24
   13070:	bl	11d0c <__assert_fail@plt+0xf04>
   13074:	cmp	r6, r0
   13078:	bhi	130dc <__assert_fail@plt+0x22d4>
   1307c:	add	r6, r0, #1
   13080:	movw	r0, #24928	; 0x6160
   13084:	movt	r0, #2
   13088:	str	r6, [sl, r5, lsl #3]
   1308c:	cmp	r4, r0
   13090:	beq	1309c <__assert_fail@plt+0x2294>
   13094:	mov	r0, r4
   13098:	bl	146ec <__assert_fail@plt+0x38e4>
   1309c:	mov	r0, r6
   130a0:	bl	13f24 <__assert_fail@plt+0x311c>
   130a4:	str	r0, [r9]
   130a8:	mov	r4, r0
   130ac:	add	r3, sp, #8
   130b0:	ldr	r0, [r7]
   130b4:	ldr	r1, [r7, #40]	; 0x28
   130b8:	ldr	r2, [r7, #44]	; 0x2c
   130bc:	stm	sp, {r0, r8}
   130c0:	ldr	r0, [sp, #20]
   130c4:	stm	r3, {r0, r1, r2}
   130c8:	mov	r0, r4
   130cc:	mov	r1, r6
   130d0:	ldr	r2, [sp, #32]
   130d4:	ldr	r3, [sp, #36]	; 0x24
   130d8:	bl	11d0c <__assert_fail@plt+0xf04>
   130dc:	ldr	r0, [sp, #28]
   130e0:	ldr	r1, [sp, #24]
   130e4:	str	r1, [r0]
   130e8:	mov	r0, r4
   130ec:	sub	sp, fp, #28
   130f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130f4:	bl	10dfc <abort@plt>
   130f8:	movw	r3, #24880	; 0x6130
   130fc:	movt	r3, #2
   13100:	b	12f64 <__assert_fail@plt+0x215c>
   13104:	movw	r3, #24880	; 0x6130
   13108:	mov	r1, r0
   1310c:	mov	r0, #0
   13110:	mvn	r2, #0
   13114:	movt	r3, #2
   13118:	b	12f64 <__assert_fail@plt+0x215c>
   1311c:	movw	r3, #24880	; 0x6130
   13120:	mov	r2, r1
   13124:	mov	r1, r0
   13128:	mov	r0, #0
   1312c:	movt	r3, #2
   13130:	b	12f64 <__assert_fail@plt+0x215c>
   13134:	push	{fp, lr}
   13138:	mov	fp, sp
   1313c:	sub	sp, sp, #48	; 0x30
   13140:	vmov.i32	q8, #0	; 0x00000000
   13144:	mov	ip, #32
   13148:	mov	r3, sp
   1314c:	mov	lr, r2
   13150:	cmp	r1, #10
   13154:	add	r2, r3, #16
   13158:	vst1.64	{d16-d17}, [r3], ip
   1315c:	vst1.64	{d16-d17}, [r3]
   13160:	vst1.64	{d16-d17}, [r2]
   13164:	beq	13184 <__assert_fail@plt+0x237c>
   13168:	str	r1, [sp]
   1316c:	mov	r3, sp
   13170:	mov	r1, lr
   13174:	mvn	r2, #0
   13178:	bl	12f64 <__assert_fail@plt+0x215c>
   1317c:	mov	sp, fp
   13180:	pop	{fp, pc}
   13184:	bl	10dfc <abort@plt>
   13188:	push	{r4, sl, fp, lr}
   1318c:	add	fp, sp, #8
   13190:	sub	sp, sp, #48	; 0x30
   13194:	mov	ip, r3
   13198:	mov	r3, sp
   1319c:	vmov.i32	q8, #0	; 0x00000000
   131a0:	mov	lr, #32
   131a4:	cmp	r1, #10
   131a8:	add	r4, r3, #16
   131ac:	vst1.64	{d16-d17}, [r3], lr
   131b0:	vst1.64	{d16-d17}, [r3]
   131b4:	vst1.64	{d16-d17}, [r4]
   131b8:	beq	131d8 <__assert_fail@plt+0x23d0>
   131bc:	str	r1, [sp]
   131c0:	mov	r1, r2
   131c4:	mov	r3, sp
   131c8:	mov	r2, ip
   131cc:	bl	12f64 <__assert_fail@plt+0x215c>
   131d0:	sub	sp, fp, #8
   131d4:	pop	{r4, sl, fp, pc}
   131d8:	bl	10dfc <abort@plt>
   131dc:	push	{fp, lr}
   131e0:	mov	fp, sp
   131e4:	sub	sp, sp, #48	; 0x30
   131e8:	mov	r3, sp
   131ec:	vmov.i32	q8, #0	; 0x00000000
   131f0:	mov	ip, #32
   131f4:	cmp	r0, #10
   131f8:	add	r2, r3, #16
   131fc:	vst1.64	{d16-d17}, [r3], ip
   13200:	vst1.64	{d16-d17}, [r3]
   13204:	vst1.64	{d16-d17}, [r2]
   13208:	beq	13228 <__assert_fail@plt+0x2420>
   1320c:	str	r0, [sp]
   13210:	mov	r3, sp
   13214:	mov	r0, #0
   13218:	mvn	r2, #0
   1321c:	bl	12f64 <__assert_fail@plt+0x215c>
   13220:	mov	sp, fp
   13224:	pop	{fp, pc}
   13228:	bl	10dfc <abort@plt>
   1322c:	push	{fp, lr}
   13230:	mov	fp, sp
   13234:	sub	sp, sp, #48	; 0x30
   13238:	mov	r3, sp
   1323c:	vmov.i32	q8, #0	; 0x00000000
   13240:	mov	ip, #32
   13244:	cmp	r0, #10
   13248:	add	lr, r3, #16
   1324c:	vst1.64	{d16-d17}, [r3], ip
   13250:	vst1.64	{d16-d17}, [r3]
   13254:	vst1.64	{d16-d17}, [lr]
   13258:	beq	13274 <__assert_fail@plt+0x246c>
   1325c:	str	r0, [sp]
   13260:	mov	r3, sp
   13264:	mov	r0, #0
   13268:	bl	12f64 <__assert_fail@plt+0x215c>
   1326c:	mov	sp, fp
   13270:	pop	{fp, pc}
   13274:	bl	10dfc <abort@plt>
   13278:	push	{r4, sl, fp, lr}
   1327c:	add	fp, sp, #8
   13280:	sub	sp, sp, #48	; 0x30
   13284:	mov	lr, r0
   13288:	movw	r0, #24880	; 0x6130
   1328c:	mov	r3, #32
   13290:	mov	ip, r1
   13294:	mov	r4, #1
   13298:	movt	r0, #2
   1329c:	add	r1, r0, #16
   132a0:	vld1.64	{d16-d17}, [r0], r3
   132a4:	mov	r3, sp
   132a8:	vld1.64	{d18-d19}, [r1]
   132ac:	add	r1, r3, #16
   132b0:	vld1.64	{d20-d21}, [r0]
   132b4:	add	r0, r3, #32
   132b8:	vst1.64	{d18-d19}, [r1]
   132bc:	mov	r1, r3
   132c0:	vst1.64	{d20-d21}, [r0]
   132c4:	mov	r0, #28
   132c8:	and	r0, r0, r2, lsr #3
   132cc:	and	r2, r2, #31
   132d0:	vst1.64	{d16-d17}, [r1], r0
   132d4:	ldr	r0, [r1, #8]
   132d8:	bic	r4, r4, r0, lsr r2
   132dc:	eor	r0, r0, r4, lsl r2
   132e0:	mov	r2, ip
   132e4:	str	r0, [r1, #8]
   132e8:	mov	r0, #0
   132ec:	mov	r1, lr
   132f0:	bl	12f64 <__assert_fail@plt+0x215c>
   132f4:	sub	sp, fp, #8
   132f8:	pop	{r4, sl, fp, pc}
   132fc:	push	{fp, lr}
   13300:	mov	fp, sp
   13304:	sub	sp, sp, #48	; 0x30
   13308:	mov	ip, r0
   1330c:	movw	r0, #24880	; 0x6130
   13310:	mov	r3, #32
   13314:	movt	r0, #2
   13318:	add	r2, r0, #16
   1331c:	vld1.64	{d16-d17}, [r0], r3
   13320:	mov	r3, sp
   13324:	vld1.64	{d18-d19}, [r2]
   13328:	add	r2, r3, #16
   1332c:	vld1.64	{d20-d21}, [r0]
   13330:	add	r0, r3, #32
   13334:	vst1.64	{d18-d19}, [r2]
   13338:	mov	r2, r3
   1333c:	vst1.64	{d20-d21}, [r0]
   13340:	mov	r0, #28
   13344:	and	r0, r0, r1, lsr #3
   13348:	and	r1, r1, #31
   1334c:	vst1.64	{d16-d17}, [r2], r0
   13350:	mov	r0, #1
   13354:	ldr	lr, [r2, #8]
   13358:	bic	r0, r0, lr, lsr r1
   1335c:	eor	r0, lr, r0, lsl r1
   13360:	mov	r1, ip
   13364:	str	r0, [r2, #8]
   13368:	mov	r0, #0
   1336c:	mvn	r2, #0
   13370:	bl	12f64 <__assert_fail@plt+0x215c>
   13374:	mov	sp, fp
   13378:	pop	{fp, pc}
   1337c:	push	{fp, lr}
   13380:	mov	fp, sp
   13384:	sub	sp, sp, #48	; 0x30
   13388:	movw	r2, #24880	; 0x6130
   1338c:	mov	r3, #32
   13390:	mov	r1, r0
   13394:	movt	r2, #2
   13398:	add	r0, r2, #16
   1339c:	vld1.64	{d16-d17}, [r2], r3
   133a0:	mov	r3, sp
   133a4:	vld1.64	{d18-d19}, [r0]
   133a8:	add	r0, r3, #16
   133ac:	vld1.64	{d20-d21}, [r2]
   133b0:	mov	r2, r3
   133b4:	vst1.64	{d18-d19}, [r0]
   133b8:	add	r0, r3, #32
   133bc:	vst1.64	{d20-d21}, [r0]
   133c0:	mov	r0, #12
   133c4:	vst1.64	{d16-d17}, [r2], r0
   133c8:	ldr	r0, [r2]
   133cc:	orr	r0, r0, #67108864	; 0x4000000
   133d0:	str	r0, [r2]
   133d4:	mov	r0, #0
   133d8:	mvn	r2, #0
   133dc:	bl	12f64 <__assert_fail@plt+0x215c>
   133e0:	mov	sp, fp
   133e4:	pop	{fp, pc}
   133e8:	push	{fp, lr}
   133ec:	mov	fp, sp
   133f0:	sub	sp, sp, #48	; 0x30
   133f4:	mov	ip, r1
   133f8:	mov	r1, r0
   133fc:	movw	r0, #24880	; 0x6130
   13400:	mov	r3, #32
   13404:	movt	r0, #2
   13408:	add	r2, r0, #16
   1340c:	vld1.64	{d16-d17}, [r0], r3
   13410:	mov	r3, sp
   13414:	vld1.64	{d18-d19}, [r2]
   13418:	add	r2, r3, #16
   1341c:	vld1.64	{d20-d21}, [r0]
   13420:	add	r0, r3, #32
   13424:	vst1.64	{d18-d19}, [r2]
   13428:	mov	r2, r3
   1342c:	vst1.64	{d20-d21}, [r0]
   13430:	mov	r0, #12
   13434:	vst1.64	{d16-d17}, [r2], r0
   13438:	ldr	r0, [r2]
   1343c:	orr	r0, r0, #67108864	; 0x4000000
   13440:	str	r0, [r2]
   13444:	mov	r0, #0
   13448:	mov	r2, ip
   1344c:	bl	12f64 <__assert_fail@plt+0x215c>
   13450:	mov	sp, fp
   13454:	pop	{fp, pc}
   13458:	push	{r4, sl, fp, lr}
   1345c:	add	fp, sp, #8
   13460:	sub	sp, sp, #96	; 0x60
   13464:	mov	ip, r2
   13468:	mov	r2, sp
   1346c:	vmov.i32	q8, #0	; 0x00000000
   13470:	mov	r4, #28
   13474:	cmp	r1, #10
   13478:	mov	r3, r2
   1347c:	add	lr, r2, #16
   13480:	vst1.64	{d16-d17}, [r3], r4
   13484:	vst1.64	{d16-d17}, [lr]
   13488:	vst1.32	{d16-d17}, [r3]
   1348c:	beq	134dc <__assert_fail@plt+0x26d4>
   13490:	vld1.64	{d16-d17}, [r2], r4
   13494:	vld1.64	{d18-d19}, [lr]
   13498:	add	r3, sp, #48	; 0x30
   1349c:	add	r4, r3, #4
   134a0:	vld1.32	{d20-d21}, [r2]
   134a4:	add	r2, r3, #20
   134a8:	vst1.32	{d16-d17}, [r4]
   134ac:	vst1.32	{d18-d19}, [r2]
   134b0:	add	r2, r3, #32
   134b4:	vst1.32	{d20-d21}, [r2]
   134b8:	str	r1, [sp, #48]	; 0x30
   134bc:	mvn	r2, #0
   134c0:	ldr	r1, [sp, #60]	; 0x3c
   134c4:	orr	r1, r1, #67108864	; 0x4000000
   134c8:	str	r1, [sp, #60]	; 0x3c
   134cc:	mov	r1, ip
   134d0:	bl	12f64 <__assert_fail@plt+0x215c>
   134d4:	sub	sp, fp, #8
   134d8:	pop	{r4, sl, fp, pc}
   134dc:	bl	10dfc <abort@plt>
   134e0:	push	{r4, r5, fp, lr}
   134e4:	add	fp, sp, #8
   134e8:	sub	sp, sp, #48	; 0x30
   134ec:	mov	ip, r3
   134f0:	movw	r3, #24880	; 0x6130
   134f4:	mov	lr, #32
   134f8:	cmp	r1, #0
   134fc:	mov	r5, sp
   13500:	movt	r3, #2
   13504:	cmpne	r2, #0
   13508:	add	r4, r3, #16
   1350c:	vld1.64	{d16-d17}, [r3], lr
   13510:	vld1.64	{d18-d19}, [r4]
   13514:	add	r4, r5, #16
   13518:	vld1.64	{d20-d21}, [r3]
   1351c:	vst1.64	{d16-d17}, [r5], lr
   13520:	mov	r3, #10
   13524:	vst1.64	{d18-d19}, [r4]
   13528:	vst1.64	{d20-d21}, [r5]
   1352c:	str	r3, [sp]
   13530:	bne	13538 <__assert_fail@plt+0x2730>
   13534:	bl	10dfc <abort@plt>
   13538:	str	r2, [sp, #44]	; 0x2c
   1353c:	str	r1, [sp, #40]	; 0x28
   13540:	mov	r3, sp
   13544:	mov	r1, ip
   13548:	mvn	r2, #0
   1354c:	bl	12f64 <__assert_fail@plt+0x215c>
   13550:	sub	sp, fp, #8
   13554:	pop	{r4, r5, fp, pc}
   13558:	push	{r4, r5, fp, lr}
   1355c:	add	fp, sp, #8
   13560:	sub	sp, sp, #48	; 0x30
   13564:	mov	lr, r3
   13568:	movw	r3, #24880	; 0x6130
   1356c:	mov	ip, #32
   13570:	cmp	r1, #0
   13574:	mov	r5, sp
   13578:	movt	r3, #2
   1357c:	cmpne	r2, #0
   13580:	add	r4, r3, #16
   13584:	vld1.64	{d16-d17}, [r3], ip
   13588:	vld1.64	{d18-d19}, [r4]
   1358c:	add	r4, r5, #16
   13590:	vld1.64	{d20-d21}, [r3]
   13594:	vst1.64	{d16-d17}, [r5], ip
   13598:	mov	r3, #10
   1359c:	vst1.64	{d18-d19}, [r4]
   135a0:	vst1.64	{d20-d21}, [r5]
   135a4:	str	r3, [sp]
   135a8:	bne	135b0 <__assert_fail@plt+0x27a8>
   135ac:	bl	10dfc <abort@plt>
   135b0:	ldr	ip, [fp, #8]
   135b4:	str	r2, [sp, #44]	; 0x2c
   135b8:	str	r1, [sp, #40]	; 0x28
   135bc:	mov	r3, sp
   135c0:	mov	r1, lr
   135c4:	mov	r2, ip
   135c8:	bl	12f64 <__assert_fail@plt+0x215c>
   135cc:	sub	sp, fp, #8
   135d0:	pop	{r4, r5, fp, pc}
   135d4:	push	{r4, sl, fp, lr}
   135d8:	add	fp, sp, #8
   135dc:	sub	sp, sp, #48	; 0x30
   135e0:	mov	ip, r2
   135e4:	movw	r2, #24880	; 0x6130
   135e8:	mov	lr, #32
   135ec:	cmp	r0, #0
   135f0:	mov	r4, sp
   135f4:	movt	r2, #2
   135f8:	cmpne	r1, #0
   135fc:	add	r3, r2, #16
   13600:	vld1.64	{d16-d17}, [r2], lr
   13604:	vld1.64	{d18-d19}, [r3]
   13608:	add	r3, r4, #16
   1360c:	vld1.64	{d20-d21}, [r2]
   13610:	vst1.64	{d16-d17}, [r4], lr
   13614:	mov	r2, #10
   13618:	vst1.64	{d18-d19}, [r3]
   1361c:	vst1.64	{d20-d21}, [r4]
   13620:	str	r2, [sp]
   13624:	bne	1362c <__assert_fail@plt+0x2824>
   13628:	bl	10dfc <abort@plt>
   1362c:	str	r1, [sp, #44]	; 0x2c
   13630:	str	r0, [sp, #40]	; 0x28
   13634:	mov	r3, sp
   13638:	mov	r0, #0
   1363c:	mov	r1, ip
   13640:	mvn	r2, #0
   13644:	bl	12f64 <__assert_fail@plt+0x215c>
   13648:	sub	sp, fp, #8
   1364c:	pop	{r4, sl, fp, pc}
   13650:	push	{r4, r5, fp, lr}
   13654:	add	fp, sp, #8
   13658:	sub	sp, sp, #48	; 0x30
   1365c:	mov	lr, r2
   13660:	movw	r2, #24880	; 0x6130
   13664:	mov	ip, r3
   13668:	mov	r3, #32
   1366c:	cmp	r0, #0
   13670:	mov	r5, sp
   13674:	movt	r2, #2
   13678:	cmpne	r1, #0
   1367c:	add	r4, r2, #16
   13680:	vld1.64	{d16-d17}, [r2], r3
   13684:	vld1.64	{d18-d19}, [r4]
   13688:	add	r4, r5, #16
   1368c:	vld1.64	{d20-d21}, [r2]
   13690:	vst1.64	{d16-d17}, [r5], r3
   13694:	mov	r2, #10
   13698:	vst1.64	{d18-d19}, [r4]
   1369c:	vst1.64	{d20-d21}, [r5]
   136a0:	str	r2, [sp]
   136a4:	bne	136ac <__assert_fail@plt+0x28a4>
   136a8:	bl	10dfc <abort@plt>
   136ac:	str	r1, [sp, #44]	; 0x2c
   136b0:	str	r0, [sp, #40]	; 0x28
   136b4:	mov	r3, sp
   136b8:	mov	r0, #0
   136bc:	mov	r1, lr
   136c0:	mov	r2, ip
   136c4:	bl	12f64 <__assert_fail@plt+0x215c>
   136c8:	sub	sp, fp, #8
   136cc:	pop	{r4, r5, fp, pc}
   136d0:	movw	r3, #24800	; 0x60e0
   136d4:	movt	r3, #2
   136d8:	b	12f64 <__assert_fail@plt+0x215c>
   136dc:	movw	r3, #24800	; 0x60e0
   136e0:	mov	r2, r1
   136e4:	mov	r1, r0
   136e8:	mov	r0, #0
   136ec:	movt	r3, #2
   136f0:	b	12f64 <__assert_fail@plt+0x215c>
   136f4:	movw	r3, #24800	; 0x60e0
   136f8:	mvn	r2, #0
   136fc:	movt	r3, #2
   13700:	b	12f64 <__assert_fail@plt+0x215c>
   13704:	movw	r3, #24800	; 0x60e0
   13708:	mov	r1, r0
   1370c:	mov	r0, #0
   13710:	mvn	r2, #0
   13714:	movt	r3, #2
   13718:	b	12f64 <__assert_fail@plt+0x215c>
   1371c:	push	{r4, r5, fp, lr}
   13720:	add	fp, sp, #8
   13724:	mov	r5, r0
   13728:	mov	r4, r1
   1372c:	mov	r0, #0
   13730:	mov	r2, #5
   13734:	mov	r1, r5
   13738:	bl	10c7c <dcgettext@plt>
   1373c:	cmp	r0, r5
   13740:	popne	{r4, r5, fp, pc}
   13744:	bl	147b8 <__assert_fail@plt+0x39b0>
   13748:	ldrb	r1, [r0]
   1374c:	and	r1, r1, #223	; 0xdf
   13750:	cmp	r1, #71	; 0x47
   13754:	beq	137bc <__assert_fail@plt+0x29b4>
   13758:	cmp	r1, #85	; 0x55
   1375c:	bne	137e0 <__assert_fail@plt+0x29d8>
   13760:	ldrb	r1, [r0, #1]
   13764:	and	r1, r1, #223	; 0xdf
   13768:	cmp	r1, #84	; 0x54
   1376c:	bne	137e0 <__assert_fail@plt+0x29d8>
   13770:	ldrb	r1, [r0, #2]
   13774:	and	r1, r1, #223	; 0xdf
   13778:	cmp	r1, #70	; 0x46
   1377c:	ldrbeq	r1, [r0, #3]
   13780:	cmpeq	r1, #45	; 0x2d
   13784:	bne	137e0 <__assert_fail@plt+0x29d8>
   13788:	ldrb	r1, [r0, #4]
   1378c:	cmp	r1, #56	; 0x38
   13790:	ldrbeq	r0, [r0, #5]
   13794:	cmpeq	r0, #0
   13798:	bne	137e0 <__assert_fail@plt+0x29d8>
   1379c:	ldrb	r1, [r5]
   137a0:	movw	r2, #20760	; 0x5118
   137a4:	movw	r0, #20764	; 0x511c
   137a8:	movt	r2, #1
   137ac:	movt	r0, #1
   137b0:	cmp	r1, #96	; 0x60
   137b4:	moveq	r0, r2
   137b8:	pop	{r4, r5, fp, pc}
   137bc:	ldrb	r1, [r0, #1]
   137c0:	and	r1, r1, #223	; 0xdf
   137c4:	cmp	r1, #66	; 0x42
   137c8:	bne	137e0 <__assert_fail@plt+0x29d8>
   137cc:	ldrb	r1, [r0, #2]
   137d0:	cmp	r1, #49	; 0x31
   137d4:	ldrbeq	r1, [r0, #3]
   137d8:	cmpeq	r1, #56	; 0x38
   137dc:	beq	137fc <__assert_fail@plt+0x29f4>
   137e0:	movw	r1, #20754	; 0x5112
   137e4:	movw	r0, #20758	; 0x5116
   137e8:	cmp	r4, #9
   137ec:	movt	r1, #1
   137f0:	movt	r0, #1
   137f4:	moveq	r0, r1
   137f8:	pop	{r4, r5, fp, pc}
   137fc:	ldrb	r1, [r0, #4]
   13800:	cmp	r1, #48	; 0x30
   13804:	ldrbeq	r1, [r0, #5]
   13808:	cmpeq	r1, #51	; 0x33
   1380c:	bne	137e0 <__assert_fail@plt+0x29d8>
   13810:	ldrb	r1, [r0, #6]
   13814:	cmp	r1, #48	; 0x30
   13818:	ldrbeq	r0, [r0, #7]
   1381c:	cmpeq	r0, #0
   13820:	bne	137e0 <__assert_fail@plt+0x29d8>
   13824:	ldrb	r1, [r5]
   13828:	movw	r2, #20768	; 0x5120
   1382c:	movw	r0, #20772	; 0x5124
   13830:	movt	r2, #1
   13834:	movt	r0, #1
   13838:	b	137b0 <__assert_fail@plt+0x29a8>
   1383c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13840:	add	fp, sp, #24
   13844:	sub	sp, sp, #32
   13848:	ldr	r6, [fp, #12]
   1384c:	ldr	r7, [fp, #8]
   13850:	mov	r4, r2
   13854:	mov	r8, r0
   13858:	cmp	r1, #0
   1385c:	beq	13884 <__assert_fail@plt+0x2a7c>
   13860:	movw	r2, #20860	; 0x517c
   13864:	mov	r5, r1
   13868:	str	r3, [sp, #4]
   1386c:	str	r4, [sp]
   13870:	mov	r0, r8
   13874:	mov	r1, #1
   13878:	movt	r2, #1
   1387c:	mov	r3, r5
   13880:	b	1389c <__assert_fail@plt+0x2a94>
   13884:	movw	r2, #20872	; 0x5188
   13888:	str	r3, [sp]
   1388c:	mov	r0, r8
   13890:	mov	r1, #1
   13894:	mov	r3, r4
   13898:	movt	r2, #1
   1389c:	bl	10d90 <__fprintf_chk@plt>
   138a0:	movw	r1, #20879	; 0x518f
   138a4:	mov	r0, #0
   138a8:	mov	r2, #5
   138ac:	movt	r1, #1
   138b0:	bl	10c7c <dcgettext@plt>
   138b4:	movw	r2, #21597	; 0x545d
   138b8:	mov	r3, r0
   138bc:	movw	r0, #2022	; 0x7e6
   138c0:	mov	r1, #1
   138c4:	str	r0, [sp]
   138c8:	movt	r2, #1
   138cc:	mov	r0, r8
   138d0:	bl	10d90 <__fprintf_chk@plt>
   138d4:	movw	r4, #19470	; 0x4c0e
   138d8:	mov	r1, r8
   138dc:	movt	r4, #1
   138e0:	mov	r0, r4
   138e4:	bl	10c1c <fputs_unlocked@plt>
   138e8:	movw	r1, #20883	; 0x5193
   138ec:	mov	r0, #0
   138f0:	mov	r2, #5
   138f4:	movt	r1, #1
   138f8:	bl	10c7c <dcgettext@plt>
   138fc:	movw	r3, #21054	; 0x523e
   13900:	mov	r2, r0
   13904:	mov	r0, r8
   13908:	mov	r1, #1
   1390c:	movt	r3, #1
   13910:	bl	10d90 <__fprintf_chk@plt>
   13914:	mov	r0, r4
   13918:	mov	r1, r8
   1391c:	bl	10c1c <fputs_unlocked@plt>
   13920:	cmp	r6, #9
   13924:	bhi	13960 <__assert_fail@plt+0x2b58>
   13928:	add	r0, pc, #0
   1392c:	ldr	pc, [r0, r6, lsl #2]
   13930:	andeq	r3, r1, r8, asr r9
   13934:	andeq	r3, r1, ip, ror #18
   13938:	muleq	r1, ip, r9
   1393c:	andeq	r3, r1, r4, asr #19
   13940:	andeq	r3, r1, ip, ror #19
   13944:	andeq	r3, r1, r4, lsl sl
   13948:	andeq	r3, r1, ip, lsr sl
   1394c:	andeq	r3, r1, r4, ror sl
   13950:	andeq	r3, r1, r4, lsl fp
   13954:			; <UNDEFINED> instruction: 0x00013abc
   13958:	sub	sp, fp, #24
   1395c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13960:	movw	r1, #21407	; 0x539f
   13964:	movt	r1, #1
   13968:	b	13ac4 <__assert_fail@plt+0x2cbc>
   1396c:	movw	r1, #21088	; 0x5260
   13970:	mov	r0, #0
   13974:	mov	r2, #5
   13978:	movt	r1, #1
   1397c:	bl	10c7c <dcgettext@plt>
   13980:	ldr	r3, [r7]
   13984:	mov	r2, r0
   13988:	mov	r0, r8
   1398c:	mov	r1, #1
   13990:	sub	sp, fp, #24
   13994:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13998:	b	10d90 <__fprintf_chk@plt>
   1399c:	movw	r1, #21104	; 0x5270
   139a0:	mov	r0, #0
   139a4:	mov	r2, #5
   139a8:	movt	r1, #1
   139ac:	bl	10c7c <dcgettext@plt>
   139b0:	mov	r2, r0
   139b4:	ldr	r3, [r7]
   139b8:	ldr	r0, [r7, #4]
   139bc:	str	r0, [sp]
   139c0:	b	13ab0 <__assert_fail@plt+0x2ca8>
   139c4:	movw	r1, #21127	; 0x5287
   139c8:	mov	r0, #0
   139cc:	mov	r2, #5
   139d0:	movt	r1, #1
   139d4:	bl	10c7c <dcgettext@plt>
   139d8:	ldr	r3, [r7]
   139dc:	mov	r2, r0
   139e0:	ldmib	r7, {r0, r1}
   139e4:	stm	sp, {r0, r1}
   139e8:	b	13ab0 <__assert_fail@plt+0x2ca8>
   139ec:	movw	r1, #21155	; 0x52a3
   139f0:	mov	r0, #0
   139f4:	mov	r2, #5
   139f8:	movt	r1, #1
   139fc:	bl	10c7c <dcgettext@plt>
   13a00:	ldr	r3, [r7]
   13a04:	mov	r2, r0
   13a08:	ldmib	r7, {r0, r1, r7}
   13a0c:	stm	sp, {r0, r1, r7}
   13a10:	b	13ab0 <__assert_fail@plt+0x2ca8>
   13a14:	movw	r1, #21187	; 0x52c3
   13a18:	mov	r0, #0
   13a1c:	mov	r2, #5
   13a20:	movt	r1, #1
   13a24:	bl	10c7c <dcgettext@plt>
   13a28:	ldr	r3, [r7]
   13a2c:	mov	r2, r0
   13a30:	ldmib	r7, {r0, r1, r6, r7}
   13a34:	stm	sp, {r0, r1, r6, r7}
   13a38:	b	13ab0 <__assert_fail@plt+0x2ca8>
   13a3c:	movw	r1, #21223	; 0x52e7
   13a40:	mov	r0, #0
   13a44:	mov	r2, #5
   13a48:	movt	r1, #1
   13a4c:	bl	10c7c <dcgettext@plt>
   13a50:	ldr	r3, [r7]
   13a54:	mov	r2, r0
   13a58:	ldmib	r7, {r0, r1, r6}
   13a5c:	ldr	r5, [r7, #16]
   13a60:	ldr	r7, [r7, #20]
   13a64:	stm	sp, {r0, r1, r6}
   13a68:	str	r5, [sp, #12]
   13a6c:	str	r7, [sp, #16]
   13a70:	b	13ab0 <__assert_fail@plt+0x2ca8>
   13a74:	movw	r1, #21263	; 0x530f
   13a78:	mov	r0, #0
   13a7c:	mov	r2, #5
   13a80:	movt	r1, #1
   13a84:	bl	10c7c <dcgettext@plt>
   13a88:	ldr	r3, [r7]
   13a8c:	mov	r2, r0
   13a90:	ldmib	r7, {r0, r1, r6}
   13a94:	ldr	r5, [r7, #16]
   13a98:	ldr	r4, [r7, #20]
   13a9c:	ldr	r7, [r7, #24]
   13aa0:	stm	sp, {r0, r1, r6}
   13aa4:	str	r5, [sp, #12]
   13aa8:	str	r4, [sp, #16]
   13aac:	str	r7, [sp, #20]
   13ab0:	mov	r0, r8
   13ab4:	mov	r1, #1
   13ab8:	b	13b64 <__assert_fail@plt+0x2d5c>
   13abc:	movw	r1, #21355	; 0x536b
   13ac0:	movt	r1, #1
   13ac4:	mov	r0, #0
   13ac8:	mov	r2, #5
   13acc:	bl	10c7c <dcgettext@plt>
   13ad0:	mov	ip, r0
   13ad4:	ldr	r3, [r7]
   13ad8:	ldr	r0, [r7, #4]
   13adc:	ldr	r1, [r7, #8]
   13ae0:	ldr	r6, [r7, #12]
   13ae4:	ldr	r5, [r7, #16]
   13ae8:	ldr	r4, [r7, #20]
   13aec:	ldr	r2, [r7, #24]
   13af0:	ldr	lr, [r7, #28]
   13af4:	ldr	r7, [r7, #32]
   13af8:	stm	sp, {r0, r1, r6}
   13afc:	str	r5, [sp, #12]
   13b00:	str	r4, [sp, #16]
   13b04:	str	r2, [sp, #20]
   13b08:	str	lr, [sp, #24]
   13b0c:	str	r7, [sp, #28]
   13b10:	b	13b58 <__assert_fail@plt+0x2d50>
   13b14:	movw	r1, #21307	; 0x533b
   13b18:	mov	r0, #0
   13b1c:	mov	r2, #5
   13b20:	movt	r1, #1
   13b24:	bl	10c7c <dcgettext@plt>
   13b28:	mov	ip, r0
   13b2c:	ldr	r3, [r7]
   13b30:	ldmib	r7, {r0, r1, r6}
   13b34:	ldr	r5, [r7, #16]
   13b38:	ldr	r4, [r7, #20]
   13b3c:	ldr	r2, [r7, #24]
   13b40:	ldr	r7, [r7, #28]
   13b44:	stm	sp, {r0, r1, r6}
   13b48:	str	r5, [sp, #12]
   13b4c:	str	r4, [sp, #16]
   13b50:	str	r2, [sp, #20]
   13b54:	str	r7, [sp, #24]
   13b58:	mov	r0, r8
   13b5c:	mov	r1, #1
   13b60:	mov	r2, ip
   13b64:	bl	10d90 <__fprintf_chk@plt>
   13b68:	sub	sp, fp, #24
   13b6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b70:	push	{r4, sl, fp, lr}
   13b74:	add	fp, sp, #8
   13b78:	sub	sp, sp, #8
   13b7c:	ldr	ip, [fp, #8]
   13b80:	mov	lr, #0
   13b84:	ldr	r4, [ip, lr, lsl #2]
   13b88:	add	lr, lr, #1
   13b8c:	cmp	r4, #0
   13b90:	bne	13b84 <__assert_fail@plt+0x2d7c>
   13b94:	sub	r4, lr, #1
   13b98:	str	ip, [sp]
   13b9c:	str	r4, [sp, #4]
   13ba0:	bl	1383c <__assert_fail@plt+0x2a34>
   13ba4:	sub	sp, fp, #8
   13ba8:	pop	{r4, sl, fp, pc}
   13bac:	push	{fp, lr}
   13bb0:	mov	fp, sp
   13bb4:	sub	sp, sp, #48	; 0x30
   13bb8:	ldr	ip, [fp, #8]
   13bbc:	ldr	lr, [ip]
   13bc0:	cmp	lr, #0
   13bc4:	str	lr, [sp, #8]
   13bc8:	beq	13c64 <__assert_fail@plt+0x2e5c>
   13bcc:	ldr	lr, [ip, #4]
   13bd0:	cmp	lr, #0
   13bd4:	str	lr, [sp, #12]
   13bd8:	beq	13c6c <__assert_fail@plt+0x2e64>
   13bdc:	ldr	lr, [ip, #8]
   13be0:	cmp	lr, #0
   13be4:	str	lr, [sp, #16]
   13be8:	beq	13c74 <__assert_fail@plt+0x2e6c>
   13bec:	ldr	lr, [ip, #12]
   13bf0:	cmp	lr, #0
   13bf4:	str	lr, [sp, #20]
   13bf8:	beq	13c7c <__assert_fail@plt+0x2e74>
   13bfc:	ldr	lr, [ip, #16]
   13c00:	cmp	lr, #0
   13c04:	str	lr, [sp, #24]
   13c08:	beq	13c84 <__assert_fail@plt+0x2e7c>
   13c0c:	ldr	lr, [ip, #20]
   13c10:	cmp	lr, #0
   13c14:	str	lr, [sp, #28]
   13c18:	beq	13c8c <__assert_fail@plt+0x2e84>
   13c1c:	ldr	lr, [ip, #24]
   13c20:	cmp	lr, #0
   13c24:	str	lr, [sp, #32]
   13c28:	beq	13c94 <__assert_fail@plt+0x2e8c>
   13c2c:	ldr	lr, [ip, #28]
   13c30:	cmp	lr, #0
   13c34:	str	lr, [sp, #36]	; 0x24
   13c38:	beq	13c9c <__assert_fail@plt+0x2e94>
   13c3c:	ldr	lr, [ip, #32]
   13c40:	cmp	lr, #0
   13c44:	str	lr, [sp, #40]	; 0x28
   13c48:	beq	13ca4 <__assert_fail@plt+0x2e9c>
   13c4c:	ldr	lr, [ip, #36]	; 0x24
   13c50:	mov	ip, #10
   13c54:	cmp	lr, #0
   13c58:	str	lr, [sp, #44]	; 0x2c
   13c5c:	movweq	ip, #9
   13c60:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c64:	mov	ip, #0
   13c68:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c6c:	mov	ip, #1
   13c70:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c74:	mov	ip, #2
   13c78:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c7c:	mov	ip, #3
   13c80:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c84:	mov	ip, #4
   13c88:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c8c:	mov	ip, #5
   13c90:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c94:	mov	ip, #6
   13c98:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13c9c:	mov	ip, #7
   13ca0:	b	13ca8 <__assert_fail@plt+0x2ea0>
   13ca4:	mov	ip, #8
   13ca8:	add	lr, sp, #8
   13cac:	str	ip, [sp, #4]
   13cb0:	str	lr, [sp]
   13cb4:	bl	1383c <__assert_fail@plt+0x2a34>
   13cb8:	mov	sp, fp
   13cbc:	pop	{fp, pc}
   13cc0:	push	{fp, lr}
   13cc4:	mov	fp, sp
   13cc8:	sub	sp, sp, #56	; 0x38
   13ccc:	add	ip, fp, #8
   13cd0:	str	ip, [sp, #12]
   13cd4:	ldr	lr, [fp, #8]
   13cd8:	cmp	lr, #0
   13cdc:	str	lr, [sp, #16]
   13ce0:	beq	13d7c <__assert_fail@plt+0x2f74>
   13ce4:	ldr	lr, [ip, #4]
   13ce8:	cmp	lr, #0
   13cec:	str	lr, [sp, #20]
   13cf0:	beq	13d84 <__assert_fail@plt+0x2f7c>
   13cf4:	ldr	lr, [ip, #8]
   13cf8:	cmp	lr, #0
   13cfc:	str	lr, [sp, #24]
   13d00:	beq	13d8c <__assert_fail@plt+0x2f84>
   13d04:	ldr	lr, [ip, #12]
   13d08:	cmp	lr, #0
   13d0c:	str	lr, [sp, #28]
   13d10:	beq	13d94 <__assert_fail@plt+0x2f8c>
   13d14:	ldr	lr, [ip, #16]
   13d18:	cmp	lr, #0
   13d1c:	str	lr, [sp, #32]
   13d20:	beq	13d9c <__assert_fail@plt+0x2f94>
   13d24:	ldr	lr, [ip, #20]
   13d28:	cmp	lr, #0
   13d2c:	str	lr, [sp, #36]	; 0x24
   13d30:	beq	13da4 <__assert_fail@plt+0x2f9c>
   13d34:	ldr	lr, [ip, #24]
   13d38:	cmp	lr, #0
   13d3c:	str	lr, [sp, #40]	; 0x28
   13d40:	beq	13dac <__assert_fail@plt+0x2fa4>
   13d44:	ldr	lr, [ip, #28]
   13d48:	cmp	lr, #0
   13d4c:	str	lr, [sp, #44]	; 0x2c
   13d50:	beq	13db4 <__assert_fail@plt+0x2fac>
   13d54:	ldr	lr, [ip, #32]
   13d58:	cmp	lr, #0
   13d5c:	str	lr, [sp, #48]	; 0x30
   13d60:	beq	13dbc <__assert_fail@plt+0x2fb4>
   13d64:	ldr	lr, [ip, #36]	; 0x24
   13d68:	mov	ip, #10
   13d6c:	cmp	lr, #0
   13d70:	str	lr, [sp, #52]	; 0x34
   13d74:	movweq	ip, #9
   13d78:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13d7c:	mov	ip, #0
   13d80:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13d84:	mov	ip, #1
   13d88:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13d8c:	mov	ip, #2
   13d90:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13d94:	mov	ip, #3
   13d98:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13d9c:	mov	ip, #4
   13da0:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13da4:	mov	ip, #5
   13da8:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13dac:	mov	ip, #6
   13db0:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13db4:	mov	ip, #7
   13db8:	b	13dc0 <__assert_fail@plt+0x2fb8>
   13dbc:	mov	ip, #8
   13dc0:	add	lr, sp, #16
   13dc4:	str	ip, [sp, #4]
   13dc8:	str	lr, [sp]
   13dcc:	bl	1383c <__assert_fail@plt+0x2a34>
   13dd0:	mov	sp, fp
   13dd4:	pop	{fp, pc}
   13dd8:	push	{fp, lr}
   13ddc:	mov	fp, sp
   13de0:	movw	r0, #24860	; 0x611c
   13de4:	movt	r0, #2
   13de8:	ldr	r1, [r0]
   13dec:	movw	r0, #19470	; 0x4c0e
   13df0:	movt	r0, #1
   13df4:	bl	10c1c <fputs_unlocked@plt>
   13df8:	movw	r1, #21467	; 0x53db
   13dfc:	mov	r0, #0
   13e00:	mov	r2, #5
   13e04:	movt	r1, #1
   13e08:	bl	10c7c <dcgettext@plt>
   13e0c:	movw	r2, #21487	; 0x53ef
   13e10:	mov	r1, r0
   13e14:	mov	r0, #1
   13e18:	movt	r2, #1
   13e1c:	bl	10d78 <__printf_chk@plt>
   13e20:	movw	r1, #21509	; 0x5405
   13e24:	mov	r0, #0
   13e28:	mov	r2, #5
   13e2c:	movt	r1, #1
   13e30:	bl	10c7c <dcgettext@plt>
   13e34:	movw	r2, #20172	; 0x4ecc
   13e38:	movw	r3, #20325	; 0x4f65
   13e3c:	mov	r1, r0
   13e40:	mov	r0, #1
   13e44:	movt	r2, #1
   13e48:	movt	r3, #1
   13e4c:	bl	10d78 <__printf_chk@plt>
   13e50:	movw	r1, #21529	; 0x5419
   13e54:	mov	r0, #0
   13e58:	mov	r2, #5
   13e5c:	movt	r1, #1
   13e60:	bl	10c7c <dcgettext@plt>
   13e64:	movw	r2, #21568	; 0x5440
   13e68:	mov	r1, r0
   13e6c:	mov	r0, #1
   13e70:	movt	r2, #1
   13e74:	pop	{fp, lr}
   13e78:	b	10d78 <__printf_chk@plt>
   13e7c:	push	{r4, r5, r6, sl, fp, lr}
   13e80:	add	fp, sp, #16
   13e84:	mov	r4, r2
   13e88:	mov	r5, r1
   13e8c:	mov	r6, r0
   13e90:	bl	14850 <__assert_fail@plt+0x3a48>
   13e94:	cmp	r0, #0
   13e98:	popne	{r4, r5, r6, sl, fp, pc}
   13e9c:	cmp	r6, #0
   13ea0:	beq	13eb4 <__assert_fail@plt+0x30ac>
   13ea4:	cmp	r5, #0
   13ea8:	cmpne	r4, #0
   13eac:	bne	13eb4 <__assert_fail@plt+0x30ac>
   13eb0:	pop	{r4, r5, r6, sl, fp, pc}
   13eb4:	bl	14454 <__assert_fail@plt+0x364c>
   13eb8:	push	{r4, r5, r6, sl, fp, lr}
   13ebc:	add	fp, sp, #16
   13ec0:	mov	r4, r2
   13ec4:	mov	r5, r1
   13ec8:	mov	r6, r0
   13ecc:	bl	14850 <__assert_fail@plt+0x3a48>
   13ed0:	cmp	r0, #0
   13ed4:	popne	{r4, r5, r6, sl, fp, pc}
   13ed8:	cmp	r6, #0
   13edc:	beq	13ef0 <__assert_fail@plt+0x30e8>
   13ee0:	cmp	r5, #0
   13ee4:	cmpne	r4, #0
   13ee8:	bne	13ef0 <__assert_fail@plt+0x30e8>
   13eec:	pop	{r4, r5, r6, sl, fp, pc}
   13ef0:	bl	14454 <__assert_fail@plt+0x364c>
   13ef4:	push	{fp, lr}
   13ef8:	mov	fp, sp
   13efc:	bl	144ec <__assert_fail@plt+0x36e4>
   13f00:	cmp	r0, #0
   13f04:	popne	{fp, pc}
   13f08:	bl	14454 <__assert_fail@plt+0x364c>
   13f0c:	push	{fp, lr}
   13f10:	mov	fp, sp
   13f14:	bl	144ec <__assert_fail@plt+0x36e4>
   13f18:	cmp	r0, #0
   13f1c:	popne	{fp, pc}
   13f20:	bl	14454 <__assert_fail@plt+0x364c>
   13f24:	push	{fp, lr}
   13f28:	mov	fp, sp
   13f2c:	bl	144ec <__assert_fail@plt+0x36e4>
   13f30:	cmp	r0, #0
   13f34:	popne	{fp, pc}
   13f38:	bl	14454 <__assert_fail@plt+0x364c>
   13f3c:	push	{r4, r5, fp, lr}
   13f40:	add	fp, sp, #8
   13f44:	mov	r4, r1
   13f48:	mov	r5, r0
   13f4c:	bl	1451c <__assert_fail@plt+0x3714>
   13f50:	cmp	r0, #0
   13f54:	popne	{r4, r5, fp, pc}
   13f58:	cmp	r5, #0
   13f5c:	beq	13f6c <__assert_fail@plt+0x3164>
   13f60:	cmp	r4, #0
   13f64:	bne	13f6c <__assert_fail@plt+0x3164>
   13f68:	pop	{r4, r5, fp, pc}
   13f6c:	bl	14454 <__assert_fail@plt+0x364c>
   13f70:	push	{fp, lr}
   13f74:	mov	fp, sp
   13f78:	cmp	r1, #0
   13f7c:	orreq	r1, r1, #1
   13f80:	bl	1451c <__assert_fail@plt+0x3714>
   13f84:	cmp	r0, #0
   13f88:	popne	{fp, pc}
   13f8c:	bl	14454 <__assert_fail@plt+0x364c>
   13f90:	push	{fp, lr}
   13f94:	mov	fp, sp
   13f98:	clz	r3, r2
   13f9c:	lsr	ip, r3, #5
   13fa0:	clz	r3, r1
   13fa4:	lsr	r3, r3, #5
   13fa8:	orrs	r3, r3, ip
   13fac:	movwne	r1, #1
   13fb0:	movwne	r2, #1
   13fb4:	bl	14850 <__assert_fail@plt+0x3a48>
   13fb8:	cmp	r0, #0
   13fbc:	popne	{fp, pc}
   13fc0:	bl	14454 <__assert_fail@plt+0x364c>
   13fc4:	push	{fp, lr}
   13fc8:	mov	fp, sp
   13fcc:	mov	r2, r1
   13fd0:	mov	r1, r0
   13fd4:	mov	r0, #0
   13fd8:	bl	14850 <__assert_fail@plt+0x3a48>
   13fdc:	cmp	r0, #0
   13fe0:	popne	{fp, pc}
   13fe4:	bl	14454 <__assert_fail@plt+0x364c>
   13fe8:	push	{fp, lr}
   13fec:	mov	fp, sp
   13ff0:	mov	r2, r1
   13ff4:	mov	r1, r0
   13ff8:	clz	r0, r2
   13ffc:	clz	r3, r1
   14000:	lsr	r0, r0, #5
   14004:	lsr	r3, r3, #5
   14008:	orrs	r0, r3, r0
   1400c:	movwne	r1, #1
   14010:	movwne	r2, #1
   14014:	mov	r0, #0
   14018:	bl	14850 <__assert_fail@plt+0x3a48>
   1401c:	cmp	r0, #0
   14020:	popne	{fp, pc}
   14024:	bl	14454 <__assert_fail@plt+0x364c>
   14028:	push	{r4, r5, r6, sl, fp, lr}
   1402c:	add	fp, sp, #16
   14030:	ldr	r5, [r1]
   14034:	mov	r4, r1
   14038:	mov	r6, r0
   1403c:	cmp	r0, #0
   14040:	beq	14058 <__assert_fail@plt+0x3250>
   14044:	mov	r0, #1
   14048:	add	r0, r0, r5, lsr #1
   1404c:	adds	r5, r5, r0
   14050:	bcc	14060 <__assert_fail@plt+0x3258>
   14054:	b	1409c <__assert_fail@plt+0x3294>
   14058:	cmp	r5, #0
   1405c:	movweq	r5, #64	; 0x40
   14060:	mov	r0, r6
   14064:	mov	r1, r5
   14068:	mov	r2, #1
   1406c:	bl	14850 <__assert_fail@plt+0x3a48>
   14070:	cmp	r5, #0
   14074:	mov	r1, r5
   14078:	movwne	r1, #1
   1407c:	cmp	r0, #0
   14080:	bne	14094 <__assert_fail@plt+0x328c>
   14084:	clz	r2, r6
   14088:	lsr	r2, r2, #5
   1408c:	orrs	r1, r2, r1
   14090:	bne	1409c <__assert_fail@plt+0x3294>
   14094:	str	r5, [r4]
   14098:	pop	{r4, r5, r6, sl, fp, pc}
   1409c:	bl	14454 <__assert_fail@plt+0x364c>
   140a0:	push	{r4, r5, r6, r7, fp, lr}
   140a4:	add	fp, sp, #16
   140a8:	ldr	r5, [r1]
   140ac:	mov	r6, r2
   140b0:	mov	r4, r1
   140b4:	mov	r7, r0
   140b8:	cmp	r0, #0
   140bc:	beq	140d4 <__assert_fail@plt+0x32cc>
   140c0:	mov	r0, #1
   140c4:	add	r0, r0, r5, lsr #1
   140c8:	adds	r5, r5, r0
   140cc:	bcc	140ec <__assert_fail@plt+0x32e4>
   140d0:	b	14120 <__assert_fail@plt+0x3318>
   140d4:	cmp	r5, #0
   140d8:	bne	140ec <__assert_fail@plt+0x32e4>
   140dc:	mov	r0, #64	; 0x40
   140e0:	cmp	r6, #64	; 0x40
   140e4:	udiv	r5, r0, r6
   140e8:	addhi	r5, r5, #1
   140ec:	mov	r0, r7
   140f0:	mov	r1, r5
   140f4:	mov	r2, r6
   140f8:	bl	14850 <__assert_fail@plt+0x3a48>
   140fc:	cmp	r0, #0
   14100:	bne	14118 <__assert_fail@plt+0x3310>
   14104:	cmp	r7, #0
   14108:	beq	14120 <__assert_fail@plt+0x3318>
   1410c:	cmp	r6, #0
   14110:	cmpne	r5, #0
   14114:	bne	14120 <__assert_fail@plt+0x3318>
   14118:	str	r5, [r4]
   1411c:	pop	{r4, r5, r6, r7, fp, pc}
   14120:	bl	14454 <__assert_fail@plt+0x364c>
   14124:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14128:	add	fp, sp, #24
   1412c:	mov	r8, r1
   14130:	ldr	r1, [r1]
   14134:	mov	r5, r0
   14138:	add	r0, r1, r1, asr #1
   1413c:	cmp	r0, r1
   14140:	mvnvs	r0, #-2147483648	; 0x80000000
   14144:	cmp	r0, r3
   14148:	mov	r7, r0
   1414c:	movgt	r7, r3
   14150:	cmn	r3, #1
   14154:	movle	r7, r0
   14158:	ldr	r0, [fp, #8]
   1415c:	cmn	r0, #1
   14160:	ble	14188 <__assert_fail@plt+0x3380>
   14164:	cmp	r0, #0
   14168:	beq	141dc <__assert_fail@plt+0x33d4>
   1416c:	cmn	r7, #1
   14170:	ble	141b0 <__assert_fail@plt+0x33a8>
   14174:	mvn	r4, #-2147483648	; 0x80000000
   14178:	udiv	r6, r4, r0
   1417c:	cmp	r6, r7
   14180:	bge	141dc <__assert_fail@plt+0x33d4>
   14184:	b	141ec <__assert_fail@plt+0x33e4>
   14188:	cmn	r7, #1
   1418c:	ble	141cc <__assert_fail@plt+0x33c4>
   14190:	cmn	r0, #1
   14194:	beq	141dc <__assert_fail@plt+0x33d4>
   14198:	mov	r6, #-2147483648	; 0x80000000
   1419c:	mvn	r4, #-2147483648	; 0x80000000
   141a0:	sdiv	r6, r6, r0
   141a4:	cmp	r6, r7
   141a8:	bge	141dc <__assert_fail@plt+0x33d4>
   141ac:	b	141ec <__assert_fail@plt+0x33e4>
   141b0:	beq	141dc <__assert_fail@plt+0x33d4>
   141b4:	mov	r6, #-2147483648	; 0x80000000
   141b8:	mvn	r4, #-2147483648	; 0x80000000
   141bc:	sdiv	r6, r6, r7
   141c0:	cmp	r6, r0
   141c4:	bge	141dc <__assert_fail@plt+0x33d4>
   141c8:	b	141ec <__assert_fail@plt+0x33e4>
   141cc:	mvn	r4, #-2147483648	; 0x80000000
   141d0:	sdiv	r6, r4, r0
   141d4:	cmp	r7, r6
   141d8:	blt	141ec <__assert_fail@plt+0x33e4>
   141dc:	mul	r6, r7, r0
   141e0:	mov	r4, #64	; 0x40
   141e4:	cmp	r6, #63	; 0x3f
   141e8:	bgt	141f4 <__assert_fail@plt+0x33ec>
   141ec:	sdiv	r7, r4, r0
   141f0:	mul	r6, r7, r0
   141f4:	cmp	r5, #0
   141f8:	moveq	r4, #0
   141fc:	streq	r4, [r8]
   14200:	sub	r4, r7, r1
   14204:	cmp	r4, r2
   14208:	bge	142b4 <__assert_fail@plt+0x34ac>
   1420c:	add	r7, r1, r2
   14210:	mov	r6, #0
   14214:	mov	r2, #0
   14218:	cmp	r7, r3
   1421c:	movwgt	r6, #1
   14220:	cmn	r3, #1
   14224:	movwgt	r2, #1
   14228:	cmp	r7, r1
   1422c:	bvs	142e8 <__assert_fail@plt+0x34e0>
   14230:	ands	r1, r2, r6
   14234:	bne	142e8 <__assert_fail@plt+0x34e0>
   14238:	cmn	r0, #1
   1423c:	ble	14264 <__assert_fail@plt+0x345c>
   14240:	cmp	r0, #0
   14244:	beq	142b0 <__assert_fail@plt+0x34a8>
   14248:	cmn	r7, #1
   1424c:	ble	14288 <__assert_fail@plt+0x3480>
   14250:	mvn	r1, #-2147483648	; 0x80000000
   14254:	udiv	r1, r1, r0
   14258:	cmp	r1, r7
   1425c:	bge	142b0 <__assert_fail@plt+0x34a8>
   14260:	b	142e8 <__assert_fail@plt+0x34e0>
   14264:	cmn	r7, #1
   14268:	ble	142a0 <__assert_fail@plt+0x3498>
   1426c:	cmn	r0, #1
   14270:	beq	142b0 <__assert_fail@plt+0x34a8>
   14274:	mov	r1, #-2147483648	; 0x80000000
   14278:	sdiv	r1, r1, r0
   1427c:	cmp	r1, r7
   14280:	bge	142b0 <__assert_fail@plt+0x34a8>
   14284:	b	142e8 <__assert_fail@plt+0x34e0>
   14288:	beq	142b0 <__assert_fail@plt+0x34a8>
   1428c:	mov	r1, #-2147483648	; 0x80000000
   14290:	sdiv	r1, r1, r7
   14294:	cmp	r1, r0
   14298:	bge	142b0 <__assert_fail@plt+0x34a8>
   1429c:	b	142e8 <__assert_fail@plt+0x34e0>
   142a0:	mvn	r1, #-2147483648	; 0x80000000
   142a4:	sdiv	r1, r1, r0
   142a8:	cmp	r7, r1
   142ac:	blt	142e8 <__assert_fail@plt+0x34e0>
   142b0:	mul	r6, r7, r0
   142b4:	mov	r0, r5
   142b8:	mov	r1, r6
   142bc:	bl	1451c <__assert_fail@plt+0x3714>
   142c0:	cmp	r6, #0
   142c4:	movwne	r6, #1
   142c8:	cmp	r0, #0
   142cc:	bne	142e0 <__assert_fail@plt+0x34d8>
   142d0:	clz	r1, r5
   142d4:	lsr	r1, r1, #5
   142d8:	orrs	r1, r1, r6
   142dc:	bne	142e8 <__assert_fail@plt+0x34e0>
   142e0:	str	r7, [r8]
   142e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142e8:	bl	14454 <__assert_fail@plt+0x364c>
   142ec:	push	{fp, lr}
   142f0:	mov	fp, sp
   142f4:	mov	r1, #1
   142f8:	bl	14498 <__assert_fail@plt+0x3690>
   142fc:	cmp	r0, #0
   14300:	popne	{fp, pc}
   14304:	bl	14454 <__assert_fail@plt+0x364c>
   14308:	push	{fp, lr}
   1430c:	mov	fp, sp
   14310:	bl	14498 <__assert_fail@plt+0x3690>
   14314:	cmp	r0, #0
   14318:	popne	{fp, pc}
   1431c:	bl	14454 <__assert_fail@plt+0x364c>
   14320:	push	{fp, lr}
   14324:	mov	fp, sp
   14328:	mov	r1, #1
   1432c:	bl	14498 <__assert_fail@plt+0x3690>
   14330:	cmp	r0, #0
   14334:	popne	{fp, pc}
   14338:	bl	14454 <__assert_fail@plt+0x364c>
   1433c:	push	{fp, lr}
   14340:	mov	fp, sp
   14344:	bl	14498 <__assert_fail@plt+0x3690>
   14348:	cmp	r0, #0
   1434c:	popne	{fp, pc}
   14350:	bl	14454 <__assert_fail@plt+0x364c>
   14354:	push	{r4, r5, r6, sl, fp, lr}
   14358:	add	fp, sp, #16
   1435c:	mov	r5, r0
   14360:	mov	r0, r1
   14364:	mov	r4, r1
   14368:	bl	144ec <__assert_fail@plt+0x36e4>
   1436c:	cmp	r0, #0
   14370:	beq	1438c <__assert_fail@plt+0x3584>
   14374:	mov	r1, r5
   14378:	mov	r2, r4
   1437c:	mov	r6, r0
   14380:	bl	10c58 <memcpy@plt>
   14384:	mov	r0, r6
   14388:	pop	{r4, r5, r6, sl, fp, pc}
   1438c:	bl	14454 <__assert_fail@plt+0x364c>
   14390:	push	{r4, r5, r6, sl, fp, lr}
   14394:	add	fp, sp, #16
   14398:	mov	r5, r0
   1439c:	mov	r0, r1
   143a0:	mov	r4, r1
   143a4:	bl	144ec <__assert_fail@plt+0x36e4>
   143a8:	cmp	r0, #0
   143ac:	beq	143c8 <__assert_fail@plt+0x35c0>
   143b0:	mov	r1, r5
   143b4:	mov	r2, r4
   143b8:	mov	r6, r0
   143bc:	bl	10c58 <memcpy@plt>
   143c0:	mov	r0, r6
   143c4:	pop	{r4, r5, r6, sl, fp, pc}
   143c8:	bl	14454 <__assert_fail@plt+0x364c>
   143cc:	push	{r4, r5, r6, sl, fp, lr}
   143d0:	add	fp, sp, #16
   143d4:	mov	r5, r0
   143d8:	add	r0, r1, #1
   143dc:	mov	r4, r1
   143e0:	bl	144ec <__assert_fail@plt+0x36e4>
   143e4:	cmp	r0, #0
   143e8:	beq	14410 <__assert_fail@plt+0x3608>
   143ec:	mov	r6, r0
   143f0:	mov	r0, #0
   143f4:	mov	r1, r5
   143f8:	mov	r2, r4
   143fc:	strb	r0, [r6, r4]
   14400:	mov	r0, r6
   14404:	bl	10c58 <memcpy@plt>
   14408:	mov	r0, r6
   1440c:	pop	{r4, r5, r6, sl, fp, pc}
   14410:	bl	14454 <__assert_fail@plt+0x364c>
   14414:	push	{r4, r5, r6, sl, fp, lr}
   14418:	add	fp, sp, #16
   1441c:	mov	r4, r0
   14420:	bl	10d48 <strlen@plt>
   14424:	add	r5, r0, #1
   14428:	mov	r0, r5
   1442c:	bl	144ec <__assert_fail@plt+0x36e4>
   14430:	cmp	r0, #0
   14434:	beq	14450 <__assert_fail@plt+0x3648>
   14438:	mov	r1, r4
   1443c:	mov	r2, r5
   14440:	mov	r6, r0
   14444:	bl	10c58 <memcpy@plt>
   14448:	mov	r0, r6
   1444c:	pop	{r4, r5, r6, sl, fp, pc}
   14450:	bl	14454 <__assert_fail@plt+0x364c>
   14454:	push	{fp, lr}
   14458:	mov	fp, sp
   1445c:	movw	r0, #24780	; 0x60cc
   14460:	movw	r1, #21644	; 0x548c
   14464:	mov	r2, #5
   14468:	movt	r0, #2
   1446c:	movt	r1, #1
   14470:	ldr	r4, [r0]
   14474:	mov	r0, #0
   14478:	bl	10c7c <dcgettext@plt>
   1447c:	movw	r2, #20607	; 0x507f
   14480:	mov	r3, r0
   14484:	mov	r0, r4
   14488:	mov	r1, #0
   1448c:	movt	r2, #1
   14490:	bl	10ce8 <error@plt>
   14494:	bl	10dfc <abort@plt>
   14498:	clz	r2, r1
   1449c:	clz	r3, r0
   144a0:	lsr	r2, r2, #5
   144a4:	lsr	r3, r3, #5
   144a8:	orrs	r2, r3, r2
   144ac:	movwne	r1, #1
   144b0:	movwne	r0, #1
   144b4:	cmp	r1, #0
   144b8:	beq	144e8 <__assert_fail@plt+0x36e0>
   144bc:	mvn	r2, #-2147483648	; 0x80000000
   144c0:	udiv	r2, r2, r1
   144c4:	cmp	r2, r0
   144c8:	bcs	144e8 <__assert_fail@plt+0x36e0>
   144cc:	push	{fp, lr}
   144d0:	mov	fp, sp
   144d4:	bl	10d54 <__errno_location@plt>
   144d8:	mov	r1, #12
   144dc:	str	r1, [r0]
   144e0:	mov	r0, #0
   144e4:	pop	{fp, pc}
   144e8:	b	10c10 <calloc@plt>
   144ec:	cmp	r0, #0
   144f0:	movweq	r0, #1
   144f4:	cmn	r0, #1
   144f8:	ble	14500 <__assert_fail@plt+0x36f8>
   144fc:	b	10d00 <malloc@plt>
   14500:	push	{fp, lr}
   14504:	mov	fp, sp
   14508:	bl	10d54 <__errno_location@plt>
   1450c:	mov	r1, #12
   14510:	str	r1, [r0]
   14514:	mov	r0, #0
   14518:	pop	{fp, pc}
   1451c:	push	{fp, lr}
   14520:	mov	fp, sp
   14524:	cmp	r0, #0
   14528:	beq	14544 <__assert_fail@plt+0x373c>
   1452c:	cmp	r1, #0
   14530:	beq	14550 <__assert_fail@plt+0x3748>
   14534:	cmn	r1, #1
   14538:	ble	1455c <__assert_fail@plt+0x3754>
   1453c:	pop	{fp, lr}
   14540:	b	10c88 <realloc@plt>
   14544:	mov	r0, r1
   14548:	pop	{fp, lr}
   1454c:	b	144ec <__assert_fail@plt+0x36e4>
   14550:	bl	146ec <__assert_fail@plt+0x38e4>
   14554:	mov	r0, #0
   14558:	pop	{fp, pc}
   1455c:	bl	10d54 <__errno_location@plt>
   14560:	mov	r1, #12
   14564:	str	r1, [r0]
   14568:	mov	r0, #0
   1456c:	pop	{fp, pc}
   14570:	push	{r4, r5, r6, sl, fp, lr}
   14574:	add	fp, sp, #16
   14578:	mov	r4, r0
   1457c:	bl	10cd0 <__fpending@plt>
   14580:	ldr	r6, [r4]
   14584:	mov	r5, r0
   14588:	mov	r0, r4
   1458c:	bl	145f4 <__assert_fail@plt+0x37ec>
   14590:	tst	r6, #32
   14594:	bne	145cc <__assert_fail@plt+0x37c4>
   14598:	cmp	r0, #0
   1459c:	mov	r4, r0
   145a0:	mvnne	r4, #0
   145a4:	cmp	r5, #0
   145a8:	bne	145d8 <__assert_fail@plt+0x37d0>
   145ac:	cmp	r0, #0
   145b0:	beq	145d8 <__assert_fail@plt+0x37d0>
   145b4:	bl	10d54 <__errno_location@plt>
   145b8:	ldr	r0, [r0]
   145bc:	subs	r4, r0, #9
   145c0:	mvnne	r4, #0
   145c4:	mov	r0, r4
   145c8:	pop	{r4, r5, r6, sl, fp, pc}
   145cc:	mvn	r4, #0
   145d0:	cmp	r0, #0
   145d4:	beq	145e0 <__assert_fail@plt+0x37d8>
   145d8:	mov	r0, r4
   145dc:	pop	{r4, r5, r6, sl, fp, pc}
   145e0:	bl	10d54 <__errno_location@plt>
   145e4:	mov	r1, #0
   145e8:	str	r1, [r0]
   145ec:	mov	r0, r4
   145f0:	pop	{r4, r5, r6, sl, fp, pc}
   145f4:	push	{r4, r5, r6, sl, fp, lr}
   145f8:	add	fp, sp, #16
   145fc:	sub	sp, sp, #8
   14600:	mov	r4, r0
   14604:	bl	10d84 <fileno@plt>
   14608:	cmn	r0, #1
   1460c:	ble	14680 <__assert_fail@plt+0x3878>
   14610:	mov	r0, r4
   14614:	bl	10d18 <__freading@plt>
   14618:	cmp	r0, #0
   1461c:	beq	14648 <__assert_fail@plt+0x3840>
   14620:	mov	r0, r4
   14624:	bl	10d84 <fileno@plt>
   14628:	mov	r1, #1
   1462c:	mov	r2, #0
   14630:	mov	r3, #0
   14634:	str	r1, [sp]
   14638:	bl	10cb8 <lseek64@plt>
   1463c:	and	r0, r0, r1
   14640:	cmn	r0, #1
   14644:	beq	14680 <__assert_fail@plt+0x3878>
   14648:	mov	r0, r4
   1464c:	bl	14690 <__assert_fail@plt+0x3888>
   14650:	cmp	r0, #0
   14654:	beq	14680 <__assert_fail@plt+0x3878>
   14658:	bl	10d54 <__errno_location@plt>
   1465c:	ldr	r6, [r0]
   14660:	mov	r5, r0
   14664:	mov	r0, r4
   14668:	bl	10d9c <fclose@plt>
   1466c:	cmp	r6, #0
   14670:	strne	r6, [r5]
   14674:	mvnne	r0, #0
   14678:	sub	sp, fp, #16
   1467c:	pop	{r4, r5, r6, sl, fp, pc}
   14680:	mov	r0, r4
   14684:	sub	sp, fp, #16
   14688:	pop	{r4, r5, r6, sl, fp, lr}
   1468c:	b	10d9c <fclose@plt>
   14690:	push	{r4, sl, fp, lr}
   14694:	add	fp, sp, #8
   14698:	sub	sp, sp, #8
   1469c:	mov	r4, r0
   146a0:	cmp	r0, #0
   146a4:	beq	146c0 <__assert_fail@plt+0x38b8>
   146a8:	mov	r0, r4
   146ac:	bl	10d18 <__freading@plt>
   146b0:	cmp	r0, #0
   146b4:	ldrbne	r0, [r4, #1]
   146b8:	tstne	r0, #1
   146bc:	bne	146d0 <__assert_fail@plt+0x38c8>
   146c0:	mov	r0, r4
   146c4:	sub	sp, fp, #8
   146c8:	pop	{r4, sl, fp, lr}
   146cc:	b	10c34 <fflush@plt>
   146d0:	mov	r0, #1
   146d4:	mov	r2, #0
   146d8:	mov	r3, #0
   146dc:	str	r0, [sp]
   146e0:	mov	r0, r4
   146e4:	bl	14714 <__assert_fail@plt+0x390c>
   146e8:	b	146c0 <__assert_fail@plt+0x38b8>
   146ec:	push	{r4, r5, r6, sl, fp, lr}
   146f0:	add	fp, sp, #16
   146f4:	mov	r4, r0
   146f8:	bl	10d54 <__errno_location@plt>
   146fc:	ldr	r6, [r0]
   14700:	mov	r5, r0
   14704:	mov	r0, r4
   14708:	bl	10c40 <free@plt>
   1470c:	str	r6, [r5]
   14710:	pop	{r4, r5, r6, sl, fp, pc}
   14714:	push	{r4, r5, r6, r7, fp, lr}
   14718:	add	fp, sp, #16
   1471c:	sub	sp, sp, #8
   14720:	mov	r4, r0
   14724:	ldr	r0, [r0, #4]
   14728:	mov	r5, r3
   1472c:	mov	r6, r2
   14730:	ldr	r1, [r4, #8]
   14734:	cmp	r1, r0
   14738:	bne	14754 <__assert_fail@plt+0x394c>
   1473c:	ldrd	r0, [r4, #16]
   14740:	cmp	r1, r0
   14744:	bne	14754 <__assert_fail@plt+0x394c>
   14748:	ldr	r0, [r4, #36]	; 0x24
   1474c:	cmp	r0, #0
   14750:	beq	1476c <__assert_fail@plt+0x3964>
   14754:	mov	r0, r4
   14758:	mov	r2, r6
   1475c:	mov	r3, r5
   14760:	sub	sp, fp, #16
   14764:	pop	{r4, r5, r6, r7, fp, lr}
   14768:	b	10da8 <fseeko64@plt>
   1476c:	ldr	r7, [fp, #8]
   14770:	mov	r0, r4
   14774:	bl	10d84 <fileno@plt>
   14778:	mov	r2, r6
   1477c:	mov	r3, r5
   14780:	str	r7, [sp]
   14784:	bl	10cb8 <lseek64@plt>
   14788:	and	r2, r0, r1
   1478c:	cmn	r2, #1
   14790:	mvneq	r0, #0
   14794:	subeq	sp, fp, #16
   14798:	popeq	{r4, r5, r6, r7, fp, pc}
   1479c:	strd	r0, [r4, #80]	; 0x50
   147a0:	ldr	r0, [r4]
   147a4:	bic	r0, r0, #16
   147a8:	str	r0, [r4]
   147ac:	mov	r0, #0
   147b0:	sub	sp, fp, #16
   147b4:	pop	{r4, r5, r6, r7, fp, pc}
   147b8:	push	{fp, lr}
   147bc:	mov	fp, sp
   147c0:	mov	r0, #14
   147c4:	bl	10dd8 <nl_langinfo@plt>
   147c8:	movw	r1, #19471	; 0x4c0f
   147cc:	cmp	r0, #0
   147d0:	movt	r1, #1
   147d4:	movne	r1, r0
   147d8:	movw	r0, #21661	; 0x549d
   147dc:	ldrb	r2, [r1]
   147e0:	movt	r0, #1
   147e4:	cmp	r2, #0
   147e8:	movne	r0, r1
   147ec:	pop	{fp, pc}
   147f0:	push	{r4, r5, r6, r7, fp, lr}
   147f4:	add	fp, sp, #16
   147f8:	sub	sp, sp, #8
   147fc:	add	r5, sp, #4
   14800:	cmp	r0, #0
   14804:	mov	r7, r2
   14808:	mov	r4, r1
   1480c:	movne	r5, r0
   14810:	mov	r0, r5
   14814:	bl	10cdc <mbrtowc@plt>
   14818:	mov	r6, r0
   1481c:	cmp	r7, #0
   14820:	beq	14844 <__assert_fail@plt+0x3a3c>
   14824:	cmn	r6, #2
   14828:	bcc	14844 <__assert_fail@plt+0x3a3c>
   1482c:	mov	r0, #0
   14830:	bl	1488c <__assert_fail@plt+0x3a84>
   14834:	cmp	r0, #0
   14838:	ldrbeq	r0, [r4]
   1483c:	moveq	r6, #1
   14840:	streq	r0, [r5]
   14844:	mov	r0, r6
   14848:	sub	sp, fp, #16
   1484c:	pop	{r4, r5, r6, r7, fp, pc}
   14850:	cmp	r2, #0
   14854:	beq	14884 <__assert_fail@plt+0x3a7c>
   14858:	mvn	r3, #0
   1485c:	udiv	r3, r3, r2
   14860:	cmp	r3, r1
   14864:	bcs	14884 <__assert_fail@plt+0x3a7c>
   14868:	push	{fp, lr}
   1486c:	mov	fp, sp
   14870:	bl	10d54 <__errno_location@plt>
   14874:	mov	r1, #12
   14878:	str	r1, [r0]
   1487c:	mov	r0, #0
   14880:	pop	{fp, pc}
   14884:	mul	r1, r2, r1
   14888:	b	1451c <__assert_fail@plt+0x3714>
   1488c:	push	{r4, sl, fp, lr}
   14890:	add	fp, sp, #8
   14894:	sub	sp, sp, #264	; 0x108
   14898:	add	r1, sp, #7
   1489c:	movw	r2, #257	; 0x101
   148a0:	bl	148f0 <__assert_fail@plt+0x3ae8>
   148a4:	mov	r4, #0
   148a8:	cmp	r0, #0
   148ac:	bne	148e4 <__assert_fail@plt+0x3adc>
   148b0:	movw	r1, #21667	; 0x54a3
   148b4:	add	r0, sp, #7
   148b8:	movt	r1, #1
   148bc:	bl	10c28 <strcmp@plt>
   148c0:	cmp	r0, #0
   148c4:	beq	148e4 <__assert_fail@plt+0x3adc>
   148c8:	movw	r1, #21669	; 0x54a5
   148cc:	add	r0, sp, #7
   148d0:	movt	r1, #1
   148d4:	bl	10c28 <strcmp@plt>
   148d8:	mov	r4, r0
   148dc:	cmp	r0, #0
   148e0:	movwne	r4, #1
   148e4:	mov	r0, r4
   148e8:	sub	sp, fp, #8
   148ec:	pop	{r4, sl, fp, pc}
   148f0:	push	{r4, r5, r6, r7, fp, lr}
   148f4:	add	fp, sp, #16
   148f8:	mov	r4, r1
   148fc:	mov	r1, #0
   14900:	mov	r6, r2
   14904:	bl	10dc0 <setlocale@plt>
   14908:	cmp	r0, #0
   1490c:	beq	1493c <__assert_fail@plt+0x3b34>
   14910:	mov	r7, r0
   14914:	bl	10d48 <strlen@plt>
   14918:	cmp	r0, r6
   1491c:	bcs	1495c <__assert_fail@plt+0x3b54>
   14920:	add	r2, r0, #1
   14924:	mov	r0, r4
   14928:	mov	r1, r7
   1492c:	bl	10c58 <memcpy@plt>
   14930:	mov	r5, #0
   14934:	mov	r0, r5
   14938:	pop	{r4, r5, r6, r7, fp, pc}
   1493c:	cmp	r6, #0
   14940:	mov	r5, #22
   14944:	movne	r0, #0
   14948:	strbne	r0, [r4]
   1494c:	movne	r0, r5
   14950:	popne	{r4, r5, r6, r7, fp, pc}
   14954:	mov	r0, r5
   14958:	pop	{r4, r5, r6, r7, fp, pc}
   1495c:	mov	r5, #34	; 0x22
   14960:	cmp	r6, #0
   14964:	beq	14984 <__assert_fail@plt+0x3b7c>
   14968:	sub	r6, r6, #1
   1496c:	mov	r0, r4
   14970:	mov	r1, r7
   14974:	mov	r2, r6
   14978:	bl	10c58 <memcpy@plt>
   1497c:	mov	r0, #0
   14980:	strb	r0, [r4, r6]
   14984:	mov	r0, r5
   14988:	pop	{r4, r5, r6, r7, fp, pc}
   1498c:	mov	r1, #0
   14990:	b	10dc0 <setlocale@plt>
   14994:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14998:	mov	r7, r0
   1499c:	ldr	r6, [pc, #72]	; 149ec <__assert_fail@plt+0x3be4>
   149a0:	ldr	r5, [pc, #72]	; 149f0 <__assert_fail@plt+0x3be8>
   149a4:	add	r6, pc, r6
   149a8:	add	r5, pc, r5
   149ac:	sub	r6, r6, r5
   149b0:	mov	r8, r1
   149b4:	mov	r9, r2
   149b8:	bl	10bf0 <calloc@plt-0x20>
   149bc:	asrs	r6, r6, #2
   149c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   149c4:	mov	r4, #0
   149c8:	add	r4, r4, #1
   149cc:	ldr	r3, [r5], #4
   149d0:	mov	r2, r9
   149d4:	mov	r1, r8
   149d8:	mov	r0, r7
   149dc:	blx	r3
   149e0:	cmp	r6, r4
   149e4:	bne	149c8 <__assert_fail@plt+0x3bc0>
   149e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149ec:	andeq	r1, r1, r0, ror #10
   149f0:	andeq	r1, r1, r8, asr r5
   149f4:	bx	lr
   149f8:	ldr	r3, [pc, #12]	; 14a0c <__assert_fail@plt+0x3c04>
   149fc:	mov	r1, #0
   14a00:	add	r3, pc, r3
   14a04:	ldr	r2, [r3]
   14a08:	b	10d60 <__cxa_atexit@plt>
   14a0c:			; <UNDEFINED> instruction: 0x000116bc

Disassembly of section .fini:

00014a10 <.fini>:
   14a10:	push	{r3, lr}
   14a14:	pop	{r3, pc}
