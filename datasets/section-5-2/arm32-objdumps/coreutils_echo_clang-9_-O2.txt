
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010bec <.init>:
   10bec:	push	{r3, lr}
   10bf0:	bl	10e4c <__assert_fail@plt+0x48>
   10bf4:	pop	{r3, pc}

Disassembly of section .plt:

00010bf8 <calloc@plt-0x14>:
   10bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bfc:	ldr	lr, [pc, #4]	; 10c08 <calloc@plt-0x4>
   10c00:	add	lr, pc, lr
   10c04:	ldr	pc, [lr, #8]!
   10c08:	strdeq	r5, [r1], -r8

00010c0c <calloc@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #86016	; 0x15000
   10c14:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c18 <fputs_unlocked@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #86016	; 0x15000
   10c20:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c24 <strcmp@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #86016	; 0x15000
   10c2c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c30 <fflush@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #86016	; 0x15000
   10c38:	ldr	pc, [ip, #992]!	; 0x3e0

00010c3c <free@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #86016	; 0x15000
   10c44:	ldr	pc, [ip, #984]!	; 0x3d8

00010c48 <_exit@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #86016	; 0x15000
   10c50:	ldr	pc, [ip, #976]!	; 0x3d0

00010c54 <memcpy@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #86016	; 0x15000
   10c5c:	ldr	pc, [ip, #968]!	; 0x3c8

00010c60 <mbsinit@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #86016	; 0x15000
   10c68:	ldr	pc, [ip, #960]!	; 0x3c0

00010c6c <dcgettext@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #86016	; 0x15000
   10c74:	ldr	pc, [ip, #952]!	; 0x3b8

00010c78 <realloc@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #86016	; 0x15000
   10c80:	ldr	pc, [ip, #944]!	; 0x3b0

00010c84 <textdomain@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #86016	; 0x15000
   10c8c:	ldr	pc, [ip, #936]!	; 0x3a8

00010c90 <iswprint@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #86016	; 0x15000
   10c98:	ldr	pc, [ip, #928]!	; 0x3a0

00010c9c <fwrite@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #86016	; 0x15000
   10ca4:	ldr	pc, [ip, #920]!	; 0x398

00010ca8 <lseek64@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #86016	; 0x15000
   10cb0:	ldr	pc, [ip, #912]!	; 0x390

00010cb4 <__ctype_get_mb_cur_max@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #904]!	; 0x388

00010cc0 <__fpending@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #896]!	; 0x380

00010ccc <mbrtowc@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #888]!	; 0x378

00010cd8 <error@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #880]!	; 0x370

00010ce4 <getenv@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #872]!	; 0x368

00010cf0 <malloc@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #864]!	; 0x360

00010cfc <__libc_start_main@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #856]!	; 0x358

00010d08 <__freading@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #848]!	; 0x350

00010d14 <__gmon_start__@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #840]!	; 0x348

00010d20 <__ctype_b_loc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #832]!	; 0x340

00010d2c <exit@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #824]!	; 0x338

00010d38 <bcmp@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #816]!	; 0x330

00010d44 <strlen@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #808]!	; 0x328

00010d50 <__errno_location@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #800]!	; 0x320

00010d5c <__cxa_atexit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #792]!	; 0x318

00010d68 <memset@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #784]!	; 0x310

00010d74 <__printf_chk@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #776]!	; 0x308

00010d80 <fileno@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #768]!	; 0x300

00010d8c <__fprintf_chk@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #760]!	; 0x2f8

00010d98 <fclose@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #752]!	; 0x2f0

00010da4 <fseeko64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #744]!	; 0x2e8

00010db0 <__overflow@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #736]!	; 0x2e0

00010dbc <setlocale@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #728]!	; 0x2d8

00010dc8 <strrchr@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #720]!	; 0x2d0

00010dd4 <nl_langinfo@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #712]!	; 0x2c8

00010de0 <bindtextdomain@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dec <strncmp@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #696]!	; 0x2b8

00010df8 <abort@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #688]!	; 0x2b0

00010e04 <__assert_fail@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #680]!	; 0x2a8

Disassembly of section .text:

00010e10 <.text>:
   10e10:	mov	fp, #0
   10e14:	mov	lr, #0
   10e18:	pop	{r1}		; (ldr r1, [sp], #4)
   10e1c:	mov	r2, sp
   10e20:	push	{r2}		; (str r2, [sp, #-4]!)
   10e24:	push	{r0}		; (str r0, [sp, #-4]!)
   10e28:	ldr	ip, [pc, #16]	; 10e40 <__assert_fail@plt+0x3c>
   10e2c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e30:	ldr	r0, [pc, #12]	; 10e44 <__assert_fail@plt+0x40>
   10e34:	ldr	r3, [pc, #12]	; 10e48 <__assert_fail@plt+0x44>
   10e38:	bl	10cfc <__libc_start_main@plt>
   10e3c:	bl	10df8 <abort@plt>
   10e40:	andeq	r4, r1, r0, lsr #20
   10e44:	strdeq	r1, [r1], -r4
   10e48:	andeq	r4, r1, r0, asr #19
   10e4c:	ldr	r3, [pc, #20]	; 10e68 <__assert_fail@plt+0x64>
   10e50:	ldr	r2, [pc, #20]	; 10e6c <__assert_fail@plt+0x68>
   10e54:	add	r3, pc, r3
   10e58:	ldr	r2, [r3, r2]
   10e5c:	cmp	r2, #0
   10e60:	bxeq	lr
   10e64:	b	10d14 <__gmon_start__@plt>
   10e68:	andeq	r5, r1, r4, lsr #3
   10e6c:	strheq	r0, [r0], -r8
   10e70:	ldr	r0, [pc, #24]	; 10e90 <__assert_fail@plt+0x8c>
   10e74:	ldr	r3, [pc, #24]	; 10e94 <__assert_fail@plt+0x90>
   10e78:	cmp	r3, r0
   10e7c:	bxeq	lr
   10e80:	ldr	r3, [pc, #16]	; 10e98 <__assert_fail@plt+0x94>
   10e84:	cmp	r3, #0
   10e88:	bxeq	lr
   10e8c:	bx	r3
   10e90:	andeq	r6, r2, r0, lsl r1
   10e94:	andeq	r6, r2, r0, lsl r1
   10e98:	andeq	r0, r0, r0
   10e9c:	ldr	r0, [pc, #36]	; 10ec8 <__assert_fail@plt+0xc4>
   10ea0:	ldr	r1, [pc, #36]	; 10ecc <__assert_fail@plt+0xc8>
   10ea4:	sub	r1, r1, r0
   10ea8:	asr	r1, r1, #2
   10eac:	add	r1, r1, r1, lsr #31
   10eb0:	asrs	r1, r1, #1
   10eb4:	bxeq	lr
   10eb8:	ldr	r3, [pc, #16]	; 10ed0 <__assert_fail@plt+0xcc>
   10ebc:	cmp	r3, #0
   10ec0:	bxeq	lr
   10ec4:	bx	r3
   10ec8:	andeq	r6, r2, r0, lsl r1
   10ecc:	andeq	r6, r2, r0, lsl r1
   10ed0:	andeq	r0, r0, r0
   10ed4:	push	{r4, lr}
   10ed8:	ldr	r4, [pc, #24]	; 10ef8 <__assert_fail@plt+0xf4>
   10edc:	ldrb	r3, [r4]
   10ee0:	cmp	r3, #0
   10ee4:	popne	{r4, pc}
   10ee8:	bl	10e70 <__assert_fail@plt+0x6c>
   10eec:	mov	r3, #1
   10ef0:	strb	r3, [r4]
   10ef4:	pop	{r4, pc}
   10ef8:	andeq	r6, r2, r0, lsr #2
   10efc:	b	10e9c <__assert_fail@plt+0x98>
   10f00:	push	{fp, lr}
   10f04:	mov	fp, sp
   10f08:	cmp	r0, #0
   10f0c:	bne	1105c <__assert_fail@plt+0x258>
   10f10:	movw	r1, #19070	; 0x4a7e
   10f14:	mov	r0, #0
   10f18:	mov	r2, #5
   10f1c:	movt	r1, #1
   10f20:	bl	10c6c <dcgettext@plt>
   10f24:	mov	r1, r0
   10f28:	movw	r0, #24876	; 0x612c
   10f2c:	movt	r0, #2
   10f30:	ldr	r2, [r0]
   10f34:	mov	r0, #1
   10f38:	mov	r3, r2
   10f3c:	bl	10d74 <__printf_chk@plt>
   10f40:	movw	r1, #19133	; 0x4abd
   10f44:	mov	r0, #0
   10f48:	mov	r2, #5
   10f4c:	movt	r1, #1
   10f50:	bl	10c6c <dcgettext@plt>
   10f54:	movw	r4, #24860	; 0x611c
   10f58:	movt	r4, #2
   10f5c:	ldr	r1, [r4]
   10f60:	bl	10c18 <fputs_unlocked@plt>
   10f64:	movw	r1, #19226	; 0x4b1a
   10f68:	mov	r0, #0
   10f6c:	mov	r2, #5
   10f70:	movt	r1, #1
   10f74:	bl	10c6c <dcgettext@plt>
   10f78:	ldr	r1, [r4]
   10f7c:	bl	10c18 <fputs_unlocked@plt>
   10f80:	movw	r1, #19358	; 0x4b9e
   10f84:	mov	r0, #0
   10f88:	mov	r2, #5
   10f8c:	movt	r1, #1
   10f90:	bl	10c6c <dcgettext@plt>
   10f94:	ldr	r1, [r4]
   10f98:	bl	10c18 <fputs_unlocked@plt>
   10f9c:	movw	r1, #19403	; 0x4bcb
   10fa0:	mov	r0, #0
   10fa4:	mov	r2, #5
   10fa8:	movt	r1, #1
   10fac:	bl	10c6c <dcgettext@plt>
   10fb0:	ldr	r1, [r4]
   10fb4:	bl	10c18 <fputs_unlocked@plt>
   10fb8:	movw	r1, #19457	; 0x4c01
   10fbc:	mov	r0, #0
   10fc0:	mov	r2, #5
   10fc4:	movt	r1, #1
   10fc8:	bl	10c6c <dcgettext@plt>
   10fcc:	ldr	r1, [r4]
   10fd0:	bl	10c18 <fputs_unlocked@plt>
   10fd4:	movw	r1, #19520	; 0x4c40
   10fd8:	mov	r0, #0
   10fdc:	mov	r2, #5
   10fe0:	movt	r1, #1
   10fe4:	bl	10c6c <dcgettext@plt>
   10fe8:	ldr	r1, [r4]
   10fec:	bl	10c18 <fputs_unlocked@plt>
   10ff0:	movw	r1, #19749	; 0x4d25
   10ff4:	mov	r0, #0
   10ff8:	mov	r2, #5
   10ffc:	movt	r1, #1
   11000:	bl	10c6c <dcgettext@plt>
   11004:	ldr	r1, [r4]
   11008:	bl	10c18 <fputs_unlocked@plt>
   1100c:	movw	r1, #19859	; 0x4d93
   11010:	mov	r0, #0
   11014:	mov	r2, #5
   11018:	movt	r1, #1
   1101c:	bl	10c6c <dcgettext@plt>
   11020:	movw	r2, #20050	; 0x4e52
   11024:	mov	r1, r0
   11028:	mov	r0, #1
   1102c:	movt	r2, #1
   11030:	bl	10d74 <__printf_chk@plt>
   11034:	movw	r1, #20055	; 0x4e57
   11038:	mov	r0, #0
   1103c:	mov	r2, #5
   11040:	movt	r1, #1
   11044:	bl	10c6c <dcgettext@plt>
   11048:	ldr	r1, [r4]
   1104c:	bl	10c18 <fputs_unlocked@plt>
   11050:	bl	1107c <__assert_fail@plt+0x278>
   11054:	mov	r0, #0
   11058:	bl	10d2c <exit@plt>
   1105c:	movw	r0, #19020	; 0x4a4c
   11060:	movw	r1, #19043	; 0x4a63
   11064:	movw	r3, #19054	; 0x4a6e
   11068:	mov	r2, #40	; 0x28
   1106c:	movt	r0, #1
   11070:	movt	r1, #1
   11074:	movt	r3, #1
   11078:	bl	10e04 <__assert_fail@plt>
   1107c:	push	{r4, r5, r6, sl, fp, lr}
   11080:	add	fp, sp, #16
   11084:	sub	sp, sp, #56	; 0x38
   11088:	movw	r0, #20568	; 0x5058
   1108c:	mov	r2, #48	; 0x30
   11090:	mov	r5, sp
   11094:	movw	r4, #20050	; 0x4e52
   11098:	movt	r0, #1
   1109c:	movt	r4, #1
   110a0:	add	r1, r0, #32
   110a4:	add	r3, r0, #16
   110a8:	vld1.64	{d18-d19}, [r0], r2
   110ac:	vld1.64	{d16-d17}, [r1]
   110b0:	vld1.64	{d20-d21}, [r3]
   110b4:	vldr	d22, [r0]
   110b8:	add	r1, r5, #32
   110bc:	add	r0, r5, #16
   110c0:	vst1.64	{d16-d17}, [r1]
   110c4:	movw	r1, #20255	; 0x4f1f
   110c8:	vst1.64	{d20-d21}, [r0]
   110cc:	mov	r0, r5
   110d0:	movt	r1, #1
   110d4:	vst1.64	{d18-d19}, [r0], r2
   110d8:	vstr	d22, [r0]
   110dc:	mov	r0, r4
   110e0:	bl	10c24 <strcmp@plt>
   110e4:	cmp	r0, #0
   110e8:	ldrne	r1, [r5, #8]!
   110ec:	cmpne	r1, #0
   110f0:	bne	110dc <__assert_fail@plt+0x2d8>
   110f4:	movw	r1, #20350	; 0x4f7e
   110f8:	ldr	r5, [r5, #4]
   110fc:	mov	r0, #0
   11100:	mov	r2, #5
   11104:	movt	r1, #1
   11108:	bl	10c6c <dcgettext@plt>
   1110c:	movw	r2, #20220	; 0x4efc
   11110:	movw	r3, #20373	; 0x4f95
   11114:	mov	r1, r0
   11118:	mov	r0, #1
   1111c:	movt	r2, #1
   11120:	movt	r3, #1
   11124:	bl	10d74 <__printf_chk@plt>
   11128:	cmp	r5, #0
   1112c:	mov	r0, #5
   11130:	mov	r1, #0
   11134:	moveq	r5, r4
   11138:	bl	10dbc <setlocale@plt>
   1113c:	cmp	r0, #0
   11140:	beq	11180 <__assert_fail@plt+0x37c>
   11144:	movw	r1, #20413	; 0x4fbd
   11148:	mov	r2, #3
   1114c:	movt	r1, #1
   11150:	bl	10dec <strncmp@plt>
   11154:	cmp	r0, #0
   11158:	beq	11180 <__assert_fail@plt+0x37c>
   1115c:	movw	r1, #20417	; 0x4fc1
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10c6c <dcgettext@plt>
   11170:	movw	r1, #24860	; 0x611c
   11174:	movt	r1, #2
   11178:	ldr	r1, [r1]
   1117c:	bl	10c18 <fputs_unlocked@plt>
   11180:	movw	r1, #20488	; 0x5008
   11184:	mov	r0, #0
   11188:	mov	r2, #5
   1118c:	movt	r1, #1
   11190:	bl	10c6c <dcgettext@plt>
   11194:	movw	r2, #20373	; 0x4f95
   11198:	mov	r1, r0
   1119c:	mov	r0, #1
   111a0:	mov	r3, r4
   111a4:	movt	r2, #1
   111a8:	bl	10d74 <__printf_chk@plt>
   111ac:	movw	r0, #20283	; 0x4f3b
   111b0:	movw	r1, #20515	; 0x5023
   111b4:	movw	r6, #19519	; 0x4c3f
   111b8:	cmp	r5, r4
   111bc:	mov	r2, #5
   111c0:	movt	r0, #1
   111c4:	movt	r1, #1
   111c8:	movt	r6, #1
   111cc:	moveq	r6, r0
   111d0:	mov	r0, #0
   111d4:	bl	10c6c <dcgettext@plt>
   111d8:	mov	r1, r0
   111dc:	mov	r0, #1
   111e0:	mov	r2, r5
   111e4:	mov	r3, r6
   111e8:	sub	sp, fp, #16
   111ec:	pop	{r4, r5, r6, sl, fp, lr}
   111f0:	b	10d74 <__printf_chk@plt>
   111f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f8:	add	fp, sp, #28
   111fc:	sub	sp, sp, #20
   11200:	mov	r6, r0
   11204:	movw	r0, #20160	; 0x4ec0
   11208:	mov	r5, r1
   1120c:	movt	r0, #1
   11210:	bl	10ce4 <getenv@plt>
   11214:	mov	r8, r0
   11218:	cmp	r0, #0
   1121c:	beq	11248 <__assert_fail@plt+0x444>
   11220:	mov	r4, #0
   11224:	cmp	r6, #2
   11228:	blt	1124c <__assert_fail@plt+0x448>
   1122c:	ldr	r0, [r5, #4]
   11230:	movw	r1, #20176	; 0x4ed0
   11234:	movt	r1, #1
   11238:	bl	10c24 <strcmp@plt>
   1123c:	clz	r0, r0
   11240:	lsr	r4, r0, #5
   11244:	b	1124c <__assert_fail@plt+0x448>
   11248:	mov	r4, #1
   1124c:	ldr	r0, [r5]
   11250:	bl	11ae0 <__assert_fail@plt+0xcdc>
   11254:	movw	r1, #19519	; 0x4c3f
   11258:	mov	r0, #6
   1125c:	movt	r1, #1
   11260:	bl	10dbc <setlocale@plt>
   11264:	movw	r7, #20224	; 0x4f00
   11268:	movw	r1, #20179	; 0x4ed3
   1126c:	movt	r7, #1
   11270:	movt	r1, #1
   11274:	mov	r0, r7
   11278:	bl	10de0 <bindtextdomain@plt>
   1127c:	mov	r0, r7
   11280:	bl	10c84 <textdomain@plt>
   11284:	movw	r0, #6648	; 0x19f8
   11288:	movt	r0, #1
   1128c:	bl	14a24 <__assert_fail@plt+0x3c20>
   11290:	cmp	r6, #2
   11294:	bne	112d4 <__assert_fail@plt+0x4d0>
   11298:	cmp	r4, #0
   1129c:	beq	112d4 <__assert_fail@plt+0x4d0>
   112a0:	ldr	r7, [r5, #4]
   112a4:	movw	r1, #20203	; 0x4eeb
   112a8:	movt	r1, #1
   112ac:	mov	r0, r7
   112b0:	bl	10c24 <strcmp@plt>
   112b4:	cmp	r0, #0
   112b8:	beq	119d0 <__assert_fail@plt+0xbcc>
   112bc:	movw	r1, #20210	; 0x4ef2
   112c0:	mov	r0, r7
   112c4:	movt	r1, #1
   112c8:	bl	10c24 <strcmp@plt>
   112cc:	cmp	r0, #0
   112d0:	beq	1196c <__assert_fail@plt+0xb68>
   112d4:	sub	r6, r6, #1
   112d8:	mov	r0, #0
   112dc:	eor	r2, r4, #1
   112e0:	mov	r1, #0
   112e4:	add	r5, r5, #4
   112e8:	mov	r3, #1
   112ec:	cmp	r6, #1
   112f0:	movwlt	r0, #1
   112f4:	orrs	r0, r2, r0
   112f8:	bne	113c8 <__assert_fail@plt+0x5c4>
   112fc:	ldr	r2, [r5]
   11300:	ldrb	r0, [r2]
   11304:	cmp	r0, #45	; 0x2d
   11308:	bne	113c8 <__assert_fail@plt+0x5c4>
   1130c:	mov	r1, #0
   11310:	mov	r0, #1
   11314:	add	r3, r2, #1
   11318:	mov	r7, #0
   1131c:	b	11330 <__assert_fail@plt+0x52c>
   11320:	cmp	r4, #110	; 0x6e
   11324:	cmpne	r4, #101	; 0x65
   11328:	bne	113c0 <__assert_fail@plt+0x5bc>
   1132c:	sub	r7, r7, #1
   11330:	ldrb	r4, [r3, -r7]
   11334:	cmp	r4, #100	; 0x64
   11338:	bgt	11320 <__assert_fail@plt+0x51c>
   1133c:	cmp	r4, #69	; 0x45
   11340:	beq	1132c <__assert_fail@plt+0x528>
   11344:	cmp	r4, #0
   11348:	bne	113c0 <__assert_fail@plt+0x5bc>
   1134c:	cmp	r7, #0
   11350:	beq	113c0 <__assert_fail@plt+0x5bc>
   11354:	ldrb	r3, [r3]
   11358:	cmp	r3, #0
   1135c:	beq	113a0 <__assert_fail@plt+0x59c>
   11360:	add	r2, r2, #2
   11364:	b	11378 <__assert_fail@plt+0x574>
   11368:	mov	r0, #0
   1136c:	ldrb	r3, [r2], #1
   11370:	cmp	r3, #0
   11374:	beq	113a0 <__assert_fail@plt+0x59c>
   11378:	uxtb	r3, r3
   1137c:	cmp	r3, #69	; 0x45
   11380:	beq	11398 <__assert_fail@plt+0x594>
   11384:	cmp	r3, #110	; 0x6e
   11388:	beq	11368 <__assert_fail@plt+0x564>
   1138c:	cmp	r3, #101	; 0x65
   11390:	moveq	r1, #1
   11394:	b	1136c <__assert_fail@plt+0x568>
   11398:	mov	r1, #0
   1139c:	b	1136c <__assert_fail@plt+0x568>
   113a0:	sub	r6, r6, #1
   113a4:	add	r5, r5, #4
   113a8:	cmp	r6, #0
   113ac:	ble	113c0 <__assert_fail@plt+0x5bc>
   113b0:	ldr	r2, [r5]
   113b4:	ldrb	r3, [r2]
   113b8:	cmp	r3, #45	; 0x2d
   113bc:	beq	11314 <__assert_fail@plt+0x510>
   113c0:	and	r1, r1, #1
   113c4:	and	r3, r0, #1
   113c8:	cmp	r8, #0
   113cc:	str	r3, [sp, #16]
   113d0:	cmpeq	r1, #0
   113d4:	beq	118b8 <__assert_fail@plt+0xab4>
   113d8:	cmp	r6, #1
   113dc:	blt	11930 <__assert_fail@plt+0xb2c>
   113e0:	movw	r4, #24860	; 0x611c
   113e4:	mov	ip, #92	; 0x5c
   113e8:	mov	lr, #32
   113ec:	movt	r4, #2
   113f0:	ldr	r9, [r5]
   113f4:	mov	r7, r9
   113f8:	ldrb	r8, [r7], #1
   113fc:	cmp	r8, #92	; 0x5c
   11400:	beq	11410 <__assert_fail@plt+0x60c>
   11404:	cmp	r8, #0
   11408:	bne	11594 <__assert_fail@plt+0x790>
   1140c:	b	11870 <__assert_fail@plt+0xa6c>
   11410:	ldrb	r8, [r7]
   11414:	cmp	r8, #0
   11418:	beq	11590 <__assert_fail@plt+0x78c>
   1141c:	sub	r0, r8, #48	; 0x30
   11420:	add	r7, r9, #2
   11424:	cmp	r0, #72	; 0x48
   11428:	bhi	11638 <__assert_fail@plt+0x834>
   1142c:	add	r1, pc, #0
   11430:	ldr	pc, [r1, r0, lsl #2]
   11434:	andeq	r1, r1, r4, ror #11
   11438:	andeq	r1, r1, r8, asr r5
   1143c:	andeq	r1, r1, r8, asr r5
   11440:	andeq	r1, r1, r8, asr r5
   11444:	andeq	r1, r1, r8, asr r5
   11448:	andeq	r1, r1, r8, asr r5
   1144c:	andeq	r1, r1, r8, asr r5
   11450:	andeq	r1, r1, r8, asr r5
   11454:	andeq	r1, r1, r8, lsr r6
   11458:	andeq	r1, r1, r8, lsr r6
   1145c:	andeq	r1, r1, r8, lsr r6
   11460:	andeq	r1, r1, r8, lsr r6
   11464:	andeq	r1, r1, r8, lsr r6
   11468:	andeq	r1, r1, r8, lsr r6
   1146c:	andeq	r1, r1, r8, lsr r6
   11470:	andeq	r1, r1, r8, lsr r6
   11474:	andeq	r1, r1, r8, lsr r6
   11478:	andeq	r1, r1, r8, lsr r6
   1147c:	andeq	r1, r1, r8, lsr r6
   11480:	andeq	r1, r1, r8, lsr r6
   11484:	andeq	r1, r1, r8, lsr r6
   11488:	andeq	r1, r1, r8, lsr r6
   1148c:	andeq	r1, r1, r8, lsr r6
   11490:	andeq	r1, r1, r8, lsr r6
   11494:	andeq	r1, r1, r8, lsr r6
   11498:	andeq	r1, r1, r8, lsr r6
   1149c:	andeq	r1, r1, r8, lsr r6
   114a0:	andeq	r1, r1, r8, lsr r6
   114a4:	andeq	r1, r1, r8, lsr r6
   114a8:	andeq	r1, r1, r8, lsr r6
   114ac:	andeq	r1, r1, r8, lsr r6
   114b0:	andeq	r1, r1, r8, lsr r6
   114b4:	andeq	r1, r1, r8, lsr r6
   114b8:	andeq	r1, r1, r8, lsr r6
   114bc:	andeq	r1, r1, r8, lsr r6
   114c0:	andeq	r1, r1, r8, lsr r6
   114c4:	andeq	r1, r1, r8, lsr r6
   114c8:	andeq	r1, r1, r8, lsr r6
   114cc:	andeq	r1, r1, r8, lsr r6
   114d0:	andeq	r1, r1, r8, lsr r6
   114d4:	andeq	r1, r1, r8, lsr r6
   114d8:	andeq	r1, r1, r8, lsr r6
   114dc:	andeq	r1, r1, r8, lsr r6
   114e0:	andeq	r1, r1, r8, lsr r6
   114e4:	muleq	r1, r4, r5
   114e8:	andeq	r1, r1, r8, lsr r6
   114ec:	andeq	r1, r1, r8, lsr r6
   114f0:	andeq	r1, r1, r8, lsr r6
   114f4:	andeq	r1, r1, r8, lsr r6
   114f8:	andeq	r1, r1, ip, lsl #12
   114fc:	ldrdeq	r1, [r1], -r4
   11500:			; <UNDEFINED> instruction: 0x000119b8
   11504:	andeq	r1, r1, r8, lsr r6
   11508:	andeq	r1, r1, ip, asr #11
   1150c:	andeq	r1, r1, r4, asr #11
   11510:	andeq	r1, r1, r8, lsr r6
   11514:	andeq	r1, r1, r8, lsr r6
   11518:	andeq	r1, r1, r8, lsr r6
   1151c:	andeq	r1, r1, r8, lsr r6
   11520:	andeq	r1, r1, r8, lsr r6
   11524:	andeq	r1, r1, r8, lsr r6
   11528:	andeq	r1, r1, r8, lsr r6
   1152c:			; <UNDEFINED> instruction: 0x000115bc
   11530:	andeq	r1, r1, r8, lsr r6
   11534:	andeq	r1, r1, r8, lsr r6
   11538:	andeq	r1, r1, r8, lsr r6
   1153c:	andeq	r1, r1, ip, asr r6
   11540:	andeq	r1, r1, r8, lsr r6
   11544:	andeq	r1, r1, r4, lsl #12
   11548:	andeq	r1, r1, r8, lsr r6
   1154c:	ldrdeq	r1, [r1], -ip
   11550:	andeq	r1, r1, r8, lsr r6
   11554:	andeq	r1, r1, r4, lsl r6
   11558:	ldrb	r0, [r7]
   1155c:	sub	r8, r8, #48	; 0x30
   11560:	and	r1, r0, #248	; 0xf8
   11564:	cmp	r1, #48	; 0x30
   11568:	bne	11578 <__assert_fail@plt+0x774>
   1156c:	add	r0, r0, r8, lsl #3
   11570:	sub	r8, r0, #48	; 0x30
   11574:	ldrb	r0, [r7, #1]!
   11578:	and	r1, r0, #248	; 0xf8
   1157c:	cmp	r1, #48	; 0x30
   11580:	addeq	r0, r0, r8, lsl #3
   11584:	addeq	r7, r7, #1
   11588:	subeq	r8, r0, #48	; 0x30
   1158c:	b	11594 <__assert_fail@plt+0x790>
   11590:	mov	r8, #92	; 0x5c
   11594:	ldr	r0, [r4]
   11598:	ldr	r1, [r0, #20]
   1159c:	ldr	r2, [r0, #24]
   115a0:	cmp	r1, r2
   115a4:	bcs	11834 <__assert_fail@plt+0xa30>
   115a8:	add	r2, r1, #1
   115ac:	mov	r9, r7
   115b0:	str	r2, [r0, #20]
   115b4:	strb	r8, [r1]
   115b8:	b	113f4 <__assert_fail@plt+0x5f0>
   115bc:	mov	r8, #10
   115c0:	b	11594 <__assert_fail@plt+0x790>
   115c4:	mov	r8, #12
   115c8:	b	11594 <__assert_fail@plt+0x790>
   115cc:	mov	r8, #27
   115d0:	b	11594 <__assert_fail@plt+0x790>
   115d4:	mov	r8, #8
   115d8:	b	11594 <__assert_fail@plt+0x790>
   115dc:	mov	r8, #11
   115e0:	b	11594 <__assert_fail@plt+0x790>
   115e4:	ldrb	r0, [r7]
   115e8:	mov	r8, #0
   115ec:	and	r1, r0, #248	; 0xf8
   115f0:	cmp	r1, #48	; 0x30
   115f4:	bne	11594 <__assert_fail@plt+0x790>
   115f8:	add	r7, r9, #3
   115fc:	mov	r8, r0
   11600:	b	11558 <__assert_fail@plt+0x754>
   11604:	mov	r8, #9
   11608:	b	11594 <__assert_fail@plt+0x790>
   1160c:	mov	r8, #7
   11610:	b	11594 <__assert_fail@plt+0x790>
   11614:	ldrb	sl, [r7]
   11618:	bl	10d20 <__ctype_b_loc@plt>
   1161c:	ldr	r0, [r0]
   11620:	mov	lr, #32
   11624:	mov	ip, #92	; 0x5c
   11628:	add	r1, r0, sl, lsl #1
   1162c:	ldrb	r1, [r1, #1]
   11630:	tst	r1, #16
   11634:	bne	11664 <__assert_fail@plt+0x860>
   11638:	ldr	r0, [r4]
   1163c:	ldr	r1, [r0, #20]
   11640:	ldr	r2, [r0, #24]
   11644:	cmp	r1, r2
   11648:	bcs	1185c <__assert_fail@plt+0xa58>
   1164c:	add	r2, r1, #1
   11650:	str	r2, [r0, #20]
   11654:	strb	ip, [r1]
   11658:	b	11594 <__assert_fail@plt+0x790>
   1165c:	mov	r8, #13
   11660:	b	11594 <__assert_fail@plt+0x790>
   11664:	sub	r1, sl, #65	; 0x41
   11668:	add	r7, r9, #3
   1166c:	cmp	r1, #37	; 0x25
   11670:	bhi	11740 <__assert_fail@plt+0x93c>
   11674:	add	r2, pc, #4
   11678:	mov	r8, #10
   1167c:	ldr	pc, [r2, r1, lsl #2]
   11680:	andeq	r1, r1, r4, asr #14
   11684:	andeq	r1, r1, r8, lsl r7
   11688:	andeq	r1, r1, r8, lsr #14
   1168c:	andeq	r1, r1, r0, lsr r7
   11690:	andeq	r1, r1, r8, lsr r7
   11694:	andeq	r1, r1, r0, lsr #14
   11698:	andeq	r1, r1, r0, asr #14
   1169c:	andeq	r1, r1, r0, asr #14
   116a0:	andeq	r1, r1, r0, asr #14
   116a4:	andeq	r1, r1, r0, asr #14
   116a8:	andeq	r1, r1, r0, asr #14
   116ac:	andeq	r1, r1, r0, asr #14
   116b0:	andeq	r1, r1, r0, asr #14
   116b4:	andeq	r1, r1, r0, asr #14
   116b8:	andeq	r1, r1, r0, asr #14
   116bc:	andeq	r1, r1, r0, asr #14
   116c0:	andeq	r1, r1, r0, asr #14
   116c4:	andeq	r1, r1, r0, asr #14
   116c8:	andeq	r1, r1, r0, asr #14
   116cc:	andeq	r1, r1, r0, asr #14
   116d0:	andeq	r1, r1, r0, asr #14
   116d4:	andeq	r1, r1, r0, asr #14
   116d8:	andeq	r1, r1, r0, asr #14
   116dc:	andeq	r1, r1, r0, asr #14
   116e0:	andeq	r1, r1, r0, asr #14
   116e4:	andeq	r1, r1, r0, asr #14
   116e8:	andeq	r1, r1, r0, asr #14
   116ec:	andeq	r1, r1, r0, asr #14
   116f0:	andeq	r1, r1, r0, asr #14
   116f4:	andeq	r1, r1, r0, asr #14
   116f8:	andeq	r1, r1, r0, asr #14
   116fc:	andeq	r1, r1, r0, asr #14
   11700:	andeq	r1, r1, r4, asr #14
   11704:	andeq	r1, r1, r8, lsl r7
   11708:	andeq	r1, r1, r8, lsr #14
   1170c:	andeq	r1, r1, r0, lsr r7
   11710:	andeq	r1, r1, r8, lsr r7
   11714:	andeq	r1, r1, r0, lsr #14
   11718:	mov	r8, #11
   1171c:	b	11744 <__assert_fail@plt+0x940>
   11720:	mov	r8, #15
   11724:	b	11744 <__assert_fail@plt+0x940>
   11728:	mov	r8, #12
   1172c:	b	11744 <__assert_fail@plt+0x940>
   11730:	mov	r8, #13
   11734:	b	11744 <__assert_fail@plt+0x940>
   11738:	mov	r8, #14
   1173c:	b	11744 <__assert_fail@plt+0x940>
   11740:	sub	r8, sl, #48	; 0x30
   11744:	ldrb	r2, [r7]
   11748:	add	r0, r0, r2, lsl #1
   1174c:	ldrb	r0, [r0, #1]
   11750:	tst	r0, #16
   11754:	beq	11594 <__assert_fail@plt+0x790>
   11758:	sub	r3, r2, #65	; 0x41
   1175c:	lsl	r0, r8, #4
   11760:	cmp	r3, #37	; 0x25
   11764:	bhi	1184c <__assert_fail@plt+0xa48>
   11768:	add	r7, pc, #4
   1176c:	mov	r1, #10
   11770:	ldr	pc, [r7, r3, lsl #2]
   11774:	andeq	r1, r1, r0, asr r8
   11778:	andeq	r1, r1, ip, lsl #16
   1177c:	andeq	r1, r1, ip, lsl r8
   11780:	andeq	r1, r1, r4, lsr #16
   11784:	andeq	r1, r1, ip, lsr #16
   11788:	andeq	r1, r1, r4, lsl r8
   1178c:	andeq	r1, r1, ip, asr #16
   11790:	andeq	r1, r1, ip, asr #16
   11794:	andeq	r1, r1, ip, asr #16
   11798:	andeq	r1, r1, ip, asr #16
   1179c:	andeq	r1, r1, ip, asr #16
   117a0:	andeq	r1, r1, ip, asr #16
   117a4:	andeq	r1, r1, ip, asr #16
   117a8:	andeq	r1, r1, ip, asr #16
   117ac:	andeq	r1, r1, ip, asr #16
   117b0:	andeq	r1, r1, ip, asr #16
   117b4:	andeq	r1, r1, ip, asr #16
   117b8:	andeq	r1, r1, ip, asr #16
   117bc:	andeq	r1, r1, ip, asr #16
   117c0:	andeq	r1, r1, ip, asr #16
   117c4:	andeq	r1, r1, ip, asr #16
   117c8:	andeq	r1, r1, ip, asr #16
   117cc:	andeq	r1, r1, ip, asr #16
   117d0:	andeq	r1, r1, ip, asr #16
   117d4:	andeq	r1, r1, ip, asr #16
   117d8:	andeq	r1, r1, ip, asr #16
   117dc:	andeq	r1, r1, ip, asr #16
   117e0:	andeq	r1, r1, ip, asr #16
   117e4:	andeq	r1, r1, ip, asr #16
   117e8:	andeq	r1, r1, ip, asr #16
   117ec:	andeq	r1, r1, ip, asr #16
   117f0:	andeq	r1, r1, ip, asr #16
   117f4:	andeq	r1, r1, r0, asr r8
   117f8:	andeq	r1, r1, ip, lsl #16
   117fc:	andeq	r1, r1, ip, lsl r8
   11800:	andeq	r1, r1, r4, lsr #16
   11804:	andeq	r1, r1, ip, lsr #16
   11808:	andeq	r1, r1, r4, lsl r8
   1180c:	mov	r1, #11
   11810:	b	11850 <__assert_fail@plt+0xa4c>
   11814:	mov	r1, #15
   11818:	b	11850 <__assert_fail@plt+0xa4c>
   1181c:	mov	r1, #12
   11820:	b	11850 <__assert_fail@plt+0xa4c>
   11824:	mov	r1, #13
   11828:	b	11850 <__assert_fail@plt+0xa4c>
   1182c:	mov	r1, #14
   11830:	b	11850 <__assert_fail@plt+0xa4c>
   11834:	uxtb	r1, r8
   11838:	bl	10db0 <__overflow@plt>
   1183c:	mov	lr, #32
   11840:	mov	ip, #92	; 0x5c
   11844:	mov	r9, r7
   11848:	b	113f4 <__assert_fail@plt+0x5f0>
   1184c:	sub	r1, r2, #48	; 0x30
   11850:	add	r7, r9, #4
   11854:	add	r8, r1, r0
   11858:	b	11594 <__assert_fail@plt+0x790>
   1185c:	mov	r1, #92	; 0x5c
   11860:	bl	10db0 <__overflow@plt>
   11864:	mov	lr, #32
   11868:	mov	ip, #92	; 0x5c
   1186c:	b	11594 <__assert_fail@plt+0x790>
   11870:	sub	r6, r6, #1
   11874:	cmp	r6, #1
   11878:	blt	11930 <__assert_fail@plt+0xb2c>
   1187c:	ldr	r0, [r4]
   11880:	add	r5, r5, #4
   11884:	ldr	r1, [r0, #20]
   11888:	ldr	r2, [r0, #24]
   1188c:	cmp	r1, r2
   11890:	bcs	118a4 <__assert_fail@plt+0xaa0>
   11894:	add	r2, r1, #1
   11898:	str	r2, [r0, #20]
   1189c:	strb	lr, [r1]
   118a0:	b	113f0 <__assert_fail@plt+0x5ec>
   118a4:	mov	r1, #32
   118a8:	bl	10db0 <__overflow@plt>
   118ac:	mov	lr, #32
   118b0:	mov	ip, #92	; 0x5c
   118b4:	b	113f0 <__assert_fail@plt+0x5ec>
   118b8:	cmp	r6, #1
   118bc:	blt	11930 <__assert_fail@plt+0xb2c>
   118c0:	movw	r4, #24860	; 0x611c
   118c4:	ldr	r0, [r5]
   118c8:	movt	r4, #2
   118cc:	ldr	r1, [r4]
   118d0:	bl	10c18 <fputs_unlocked@plt>
   118d4:	sub	r6, r6, #1
   118d8:	cmp	r6, #1
   118dc:	blt	11930 <__assert_fail@plt+0xb2c>
   118e0:	add	r5, r5, #4
   118e4:	mov	r7, #32
   118e8:	ldr	r0, [r4]
   118ec:	ldr	r1, [r0, #20]
   118f0:	ldr	r2, [r0, #24]
   118f4:	cmp	r1, r2
   118f8:	bcs	11924 <__assert_fail@plt+0xb20>
   118fc:	add	r2, r1, #1
   11900:	str	r2, [r0, #20]
   11904:	strb	r7, [r1]
   11908:	ldr	r1, [r4]
   1190c:	ldr	r0, [r5], #4
   11910:	bl	10c18 <fputs_unlocked@plt>
   11914:	sub	r6, r6, #1
   11918:	cmp	r6, #0
   1191c:	bgt	118e8 <__assert_fail@plt+0xae4>
   11920:	b	11930 <__assert_fail@plt+0xb2c>
   11924:	mov	r1, #32
   11928:	bl	10db0 <__overflow@plt>
   1192c:	b	11908 <__assert_fail@plt+0xb04>
   11930:	ldr	r0, [sp, #16]
   11934:	cmp	r0, #0
   11938:	beq	119b8 <__assert_fail@plt+0xbb4>
   1193c:	movw	r0, #24860	; 0x611c
   11940:	movt	r0, #2
   11944:	ldr	r0, [r0]
   11948:	ldr	r1, [r0, #20]
   1194c:	ldr	r2, [r0, #24]
   11950:	cmp	r1, r2
   11954:	bcs	119c4 <__assert_fail@plt+0xbc0>
   11958:	add	r2, r1, #1
   1195c:	str	r2, [r0, #20]
   11960:	mov	r0, #10
   11964:	strb	r0, [r1]
   11968:	b	119b8 <__assert_fail@plt+0xbb4>
   1196c:	movw	r0, #24776	; 0x60c8
   11970:	movw	r2, #20244	; 0x4f14
   11974:	mov	r1, #0
   11978:	movw	r7, #20234	; 0x4f0a
   1197c:	movt	r0, #2
   11980:	movt	r2, #1
   11984:	str	r1, [sp, #8]
   11988:	movw	r1, #20050	; 0x4e52
   1198c:	movt	r7, #1
   11990:	movt	r1, #1
   11994:	ldr	r3, [r0]
   11998:	movw	r0, #24860	; 0x611c
   1199c:	str	r2, [sp, #4]
   119a0:	movw	r2, #20220	; 0x4efc
   119a4:	str	r7, [sp]
   119a8:	movt	r0, #2
   119ac:	movt	r2, #1
   119b0:	ldr	r0, [r0]
   119b4:	bl	13d04 <__assert_fail@plt+0x2f00>
   119b8:	mov	r0, #0
   119bc:	sub	sp, fp, #28
   119c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119c4:	mov	r1, #10
   119c8:	bl	10db0 <__overflow@plt>
   119cc:	b	119b8 <__assert_fail@plt+0xbb4>
   119d0:	mov	r0, #0
   119d4:	bl	10f00 <__assert_fail@plt+0xfc>
   119d8:	movw	r1, #24868	; 0x6124
   119dc:	movt	r1, #2
   119e0:	str	r0, [r1]
   119e4:	bx	lr
   119e8:	movw	r1, #24872	; 0x6128
   119ec:	movt	r1, #2
   119f0:	strb	r0, [r1]
   119f4:	bx	lr
   119f8:	push	{r4, r5, r6, sl, fp, lr}
   119fc:	add	fp, sp, #16
   11a00:	sub	sp, sp, #8
   11a04:	movw	r0, #24860	; 0x611c
   11a08:	movt	r0, #2
   11a0c:	ldr	r0, [r0]
   11a10:	bl	14590 <__assert_fail@plt+0x378c>
   11a14:	cmp	r0, #0
   11a18:	beq	11a40 <__assert_fail@plt+0xc3c>
   11a1c:	movw	r0, #24872	; 0x6128
   11a20:	movt	r0, #2
   11a24:	ldrb	r0, [r0]
   11a28:	cmp	r0, #0
   11a2c:	beq	11a60 <__assert_fail@plt+0xc5c>
   11a30:	bl	10d50 <__errno_location@plt>
   11a34:	ldr	r0, [r0]
   11a38:	cmp	r0, #32
   11a3c:	bne	11a60 <__assert_fail@plt+0xc5c>
   11a40:	movw	r0, #24856	; 0x6118
   11a44:	movt	r0, #2
   11a48:	ldr	r0, [r0]
   11a4c:	bl	14590 <__assert_fail@plt+0x378c>
   11a50:	cmp	r0, #0
   11a54:	subeq	sp, fp, #16
   11a58:	popeq	{r4, r5, r6, sl, fp, pc}
   11a5c:	b	11ad0 <__assert_fail@plt+0xccc>
   11a60:	movw	r1, #20639	; 0x509f
   11a64:	mov	r0, #0
   11a68:	mov	r2, #5
   11a6c:	movt	r1, #1
   11a70:	bl	10c6c <dcgettext@plt>
   11a74:	mov	r4, r0
   11a78:	movw	r0, #24868	; 0x6124
   11a7c:	movt	r0, #2
   11a80:	ldr	r6, [r0]
   11a84:	bl	10d50 <__errno_location@plt>
   11a88:	ldr	r5, [r0]
   11a8c:	cmp	r6, #0
   11a90:	bne	11aac <__assert_fail@plt+0xca8>
   11a94:	movw	r2, #20655	; 0x50af
   11a98:	mov	r0, #0
   11a9c:	mov	r1, r5
   11aa0:	mov	r3, r4
   11aa4:	movt	r2, #1
   11aa8:	b	11acc <__assert_fail@plt+0xcc8>
   11aac:	mov	r0, r6
   11ab0:	bl	133ac <__assert_fail@plt+0x25a8>
   11ab4:	movw	r2, #20651	; 0x50ab
   11ab8:	mov	r3, r0
   11abc:	str	r4, [sp]
   11ac0:	mov	r0, #0
   11ac4:	mov	r1, r5
   11ac8:	movt	r2, #1
   11acc:	bl	10cd8 <error@plt>
   11ad0:	movw	r0, #24780	; 0x60cc
   11ad4:	movt	r0, #2
   11ad8:	ldr	r0, [r0]
   11adc:	bl	10c48 <_exit@plt>
   11ae0:	push	{r4, r5, fp, lr}
   11ae4:	add	fp, sp, #8
   11ae8:	cmp	r0, #0
   11aec:	beq	11b80 <__assert_fail@plt+0xd7c>
   11af0:	mov	r1, #47	; 0x2f
   11af4:	mov	r4, r0
   11af8:	bl	10dc8 <strrchr@plt>
   11afc:	cmp	r0, #0
   11b00:	mov	r5, r4
   11b04:	addne	r5, r0, #1
   11b08:	sub	r0, r5, r4
   11b0c:	cmp	r0, #7
   11b10:	blt	11b64 <__assert_fail@plt+0xd60>
   11b14:	movw	r1, #20714	; 0x50ea
   11b18:	sub	r0, r5, #7
   11b1c:	mov	r2, #7
   11b20:	movt	r1, #1
   11b24:	bl	10dec <strncmp@plt>
   11b28:	cmp	r0, #0
   11b2c:	bne	11b64 <__assert_fail@plt+0xd60>
   11b30:	movw	r1, #20722	; 0x50f2
   11b34:	mov	r0, r5
   11b38:	mov	r2, #3
   11b3c:	movt	r1, #1
   11b40:	bl	10dec <strncmp@plt>
   11b44:	cmp	r0, #0
   11b48:	beq	11b54 <__assert_fail@plt+0xd50>
   11b4c:	mov	r4, r5
   11b50:	b	11b64 <__assert_fail@plt+0xd60>
   11b54:	movw	r0, #24848	; 0x6110
   11b58:	add	r4, r5, #3
   11b5c:	movt	r0, #2
   11b60:	str	r4, [r0]
   11b64:	movw	r0, #24852	; 0x6114
   11b68:	movt	r0, #2
   11b6c:	str	r4, [r0]
   11b70:	movw	r0, #24876	; 0x612c
   11b74:	movt	r0, #2
   11b78:	str	r4, [r0]
   11b7c:	pop	{r4, r5, fp, pc}
   11b80:	movw	r0, #24856	; 0x6118
   11b84:	mov	r1, #55	; 0x37
   11b88:	mov	r2, #1
   11b8c:	movt	r0, #2
   11b90:	ldr	r3, [r0]
   11b94:	movw	r0, #20658	; 0x50b2
   11b98:	movt	r0, #1
   11b9c:	bl	10c9c <fwrite@plt>
   11ba0:	bl	10df8 <abort@plt>
   11ba4:	push	{r4, r5, r6, sl, fp, lr}
   11ba8:	add	fp, sp, #16
   11bac:	mov	r4, r0
   11bb0:	movw	r0, #24880	; 0x6130
   11bb4:	movt	r0, #2
   11bb8:	cmp	r4, #0
   11bbc:	moveq	r4, r0
   11bc0:	bl	10d50 <__errno_location@plt>
   11bc4:	ldr	r6, [r0]
   11bc8:	mov	r5, r0
   11bcc:	mov	r0, r4
   11bd0:	mov	r1, #48	; 0x30
   11bd4:	bl	14398 <__assert_fail@plt+0x3594>
   11bd8:	str	r6, [r5]
   11bdc:	pop	{r4, r5, r6, sl, fp, pc}
   11be0:	movw	r1, #24880	; 0x6130
   11be4:	cmp	r0, #0
   11be8:	movt	r1, #2
   11bec:	movne	r1, r0
   11bf0:	ldr	r0, [r1]
   11bf4:	bx	lr
   11bf8:	movw	r2, #24880	; 0x6130
   11bfc:	cmp	r0, #0
   11c00:	movt	r2, #2
   11c04:	movne	r2, r0
   11c08:	str	r1, [r2]
   11c0c:	bx	lr
   11c10:	movw	r3, #24880	; 0x6130
   11c14:	cmp	r0, #0
   11c18:	and	r2, r2, #1
   11c1c:	movt	r3, #2
   11c20:	movne	r3, r0
   11c24:	ubfx	r0, r1, #5, #3
   11c28:	and	r1, r1, #31
   11c2c:	add	ip, r3, r0, lsl #2
   11c30:	mov	r0, #1
   11c34:	ldr	r3, [ip, #8]
   11c38:	and	r0, r0, r3, lsr r1
   11c3c:	eor	r2, r0, r2
   11c40:	eor	r1, r3, r2, lsl r1
   11c44:	str	r1, [ip, #8]
   11c48:	bx	lr
   11c4c:	movw	r2, #24880	; 0x6130
   11c50:	cmp	r0, #0
   11c54:	movt	r2, #2
   11c58:	movne	r2, r0
   11c5c:	ldr	r0, [r2, #4]
   11c60:	str	r1, [r2, #4]
   11c64:	bx	lr
   11c68:	push	{fp, lr}
   11c6c:	mov	fp, sp
   11c70:	movw	r3, #24880	; 0x6130
   11c74:	cmp	r0, #0
   11c78:	movt	r3, #2
   11c7c:	movne	r3, r0
   11c80:	cmp	r1, #0
   11c84:	mov	r0, #10
   11c88:	cmpne	r2, #0
   11c8c:	str	r0, [r3]
   11c90:	bne	11c98 <__assert_fail@plt+0xe94>
   11c94:	bl	10df8 <abort@plt>
   11c98:	str	r1, [r3, #40]	; 0x28
   11c9c:	str	r2, [r3, #44]	; 0x2c
   11ca0:	pop	{fp, pc}
   11ca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ca8:	add	fp, sp, #28
   11cac:	sub	sp, sp, #20
   11cb0:	mov	r7, r0
   11cb4:	ldr	r0, [fp, #8]
   11cb8:	movw	r5, #24880	; 0x6130
   11cbc:	mov	r8, r3
   11cc0:	mov	r9, r2
   11cc4:	mov	sl, r1
   11cc8:	movt	r5, #2
   11ccc:	cmp	r0, #0
   11cd0:	movne	r5, r0
   11cd4:	bl	10d50 <__errno_location@plt>
   11cd8:	ldr	r2, [r5, #40]	; 0x28
   11cdc:	ldr	r3, [r5, #44]	; 0x2c
   11ce0:	mov	r4, r0
   11ce4:	ldm	r5, {r0, r1}
   11ce8:	add	r5, r5, #8
   11cec:	ldr	r6, [r4]
   11cf0:	stm	sp, {r0, r1, r5}
   11cf4:	mov	r0, r7
   11cf8:	mov	r1, sl
   11cfc:	str	r2, [sp, #12]
   11d00:	str	r3, [sp, #16]
   11d04:	mov	r2, r9
   11d08:	mov	r3, r8
   11d0c:	bl	11d1c <__assert_fail@plt+0xf18>
   11d10:	str	r6, [r4]
   11d14:	sub	sp, fp, #28
   11d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d20:	add	fp, sp, #28
   11d24:	sub	sp, sp, #156	; 0x9c
   11d28:	mov	r5, r0
   11d2c:	add	r0, r2, #1
   11d30:	mov	r6, r1
   11d34:	mov	sl, r3
   11d38:	str	r2, [fp, #-80]	; 0xffffffb0
   11d3c:	str	r0, [sp, #72]	; 0x48
   11d40:	ldr	r0, [fp, #12]
   11d44:	and	r1, r0, #1
   11d48:	str	r1, [sp, #36]	; 0x24
   11d4c:	and	r1, r0, #4
   11d50:	str	r1, [sp, #32]
   11d54:	ubfx	r9, r0, #1, #1
   11d58:	bl	10cb4 <__ctype_get_mb_cur_max@plt>
   11d5c:	str	r0, [sp, #40]	; 0x28
   11d60:	ldr	r0, [fp, #24]
   11d64:	ldr	r7, [fp, #8]
   11d68:	mov	r1, #0
   11d6c:	str	r5, [fp, #-84]	; 0xffffffac
   11d70:	str	r1, [fp, #-56]	; 0xffffffc8
   11d74:	mov	r1, #0
   11d78:	str	r1, [sp, #60]	; 0x3c
   11d7c:	mov	r1, #1
   11d80:	str	r1, [fp, #-48]	; 0xffffffd0
   11d84:	str	r0, [sp, #80]	; 0x50
   11d88:	ldr	r0, [fp, #20]
   11d8c:	str	r0, [sp, #76]	; 0x4c
   11d90:	mov	r0, #0
   11d94:	str	r0, [sp, #56]	; 0x38
   11d98:	mov	r0, #0
   11d9c:	str	r0, [fp, #-88]	; 0xffffffa8
   11da0:	mov	r0, #0
   11da4:	str	r0, [fp, #-72]	; 0xffffffb8
   11da8:	mov	r0, #0
   11dac:	cmp	r7, #10
   11db0:	bhi	12d44 <__assert_fail@plt+0x1f40>
   11db4:	add	r1, pc, #24
   11db8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11dbc:	mov	r4, r6
   11dc0:	mov	r8, #0
   11dc4:	mov	r2, #1
   11dc8:	mov	r3, #0
   11dcc:	mov	lr, sl
   11dd0:	ldr	pc, [r1, r7, lsl #2]
   11dd4:	muleq	r1, r8, lr
   11dd8:	andeq	r1, r1, ip, ror #29
   11ddc:	andeq	r1, r1, ip, lsr #29
   11de0:	muleq	r1, r0, lr
   11de4:	andeq	r1, r1, r0, ror #29
   11de8:	andeq	r1, r1, r4, lsl pc
   11dec:			; <UNDEFINED> instruction: 0x00011ebc
   11df0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11df4:	andeq	r1, r1, r0, lsl #28
   11df8:	andeq	r1, r1, r0, lsl #28
   11dfc:	andeq	r1, r1, r8, lsr #28
   11e00:	movw	r0, #20804	; 0x5144
   11e04:	mov	r1, r7
   11e08:	movt	r0, #1
   11e0c:	bl	1374c <__assert_fail@plt+0x2948>
   11e10:	str	r0, [sp, #76]	; 0x4c
   11e14:	movw	r0, #20806	; 0x5146
   11e18:	mov	r1, r7
   11e1c:	movt	r0, #1
   11e20:	bl	1374c <__assert_fail@plt+0x2948>
   11e24:	str	r0, [sp, #80]	; 0x50
   11e28:	mov	r8, #0
   11e2c:	tst	r9, #1
   11e30:	bne	11e68 <__assert_fail@plt+0x1064>
   11e34:	ldr	r0, [sp, #76]	; 0x4c
   11e38:	ldrb	r0, [r0]
   11e3c:	cmp	r0, #0
   11e40:	beq	11e68 <__assert_fail@plt+0x1064>
   11e44:	ldr	r1, [sp, #76]	; 0x4c
   11e48:	mov	r8, #0
   11e4c:	add	r1, r1, #1
   11e50:	cmp	r8, r4
   11e54:	strbcc	r0, [r5, r8]
   11e58:	ldrb	r0, [r1, r8]
   11e5c:	add	r8, r8, #1
   11e60:	cmp	r0, #0
   11e64:	bne	11e50 <__assert_fail@plt+0x104c>
   11e68:	ldr	r6, [sp, #80]	; 0x50
   11e6c:	mov	r0, r6
   11e70:	bl	10d44 <strlen@plt>
   11e74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11e78:	str	r0, [fp, #-72]	; 0xffffffb8
   11e7c:	str	r6, [fp, #-88]	; 0xffffffa8
   11e80:	mov	r2, #1
   11e84:	mov	r3, r9
   11e88:	mov	lr, sl
   11e8c:	b	11f98 <__assert_fail@plt+0x1194>
   11e90:	mov	r0, #1
   11e94:	b	11eec <__assert_fail@plt+0x10e8>
   11e98:	mov	r7, #0
   11e9c:	mov	r8, #0
   11ea0:	mov	r2, r0
   11ea4:	mov	r3, #0
   11ea8:	b	11f98 <__assert_fail@plt+0x1194>
   11eac:	tst	r9, #1
   11eb0:	bne	11eec <__assert_fail@plt+0x10e8>
   11eb4:	mov	r2, r0
   11eb8:	b	11f44 <__assert_fail@plt+0x1140>
   11ebc:	mov	r0, #1
   11ec0:	mov	r8, #0
   11ec4:	mov	r7, #5
   11ec8:	mov	r2, #1
   11ecc:	str	r0, [fp, #-72]	; 0xffffffb8
   11ed0:	movw	r0, #20802	; 0x5142
   11ed4:	movt	r0, #1
   11ed8:	str	r0, [fp, #-88]	; 0xffffffa8
   11edc:	b	11f0c <__assert_fail@plt+0x1108>
   11ee0:	mov	r2, #1
   11ee4:	tst	r9, #1
   11ee8:	beq	11f44 <__assert_fail@plt+0x1140>
   11eec:	mov	r1, #1
   11ef0:	mov	r8, #0
   11ef4:	mov	r7, #2
   11ef8:	mov	r2, r0
   11efc:	str	r1, [fp, #-72]	; 0xffffffb8
   11f00:	movw	r1, #20806	; 0x5146
   11f04:	movt	r1, #1
   11f08:	str	r1, [fp, #-88]	; 0xffffffa8
   11f0c:	mov	r3, #1
   11f10:	b	11f98 <__assert_fail@plt+0x1194>
   11f14:	tst	r9, #1
   11f18:	beq	11f68 <__assert_fail@plt+0x1164>
   11f1c:	mov	r0, #1
   11f20:	mov	r8, #0
   11f24:	mov	r2, #1
   11f28:	mov	r3, #1
   11f2c:	mov	r7, #5
   11f30:	str	r0, [fp, #-72]	; 0xffffffb8
   11f34:	movw	r0, #20802	; 0x5142
   11f38:	movt	r0, #1
   11f3c:	str	r0, [fp, #-88]	; 0xffffffa8
   11f40:	b	11f98 <__assert_fail@plt+0x1194>
   11f44:	cmp	r4, #0
   11f48:	mov	r8, #1
   11f4c:	mov	r3, #0
   11f50:	mov	r7, #2
   11f54:	movne	r0, #39	; 0x27
   11f58:	strbne	r0, [r5]
   11f5c:	movw	r0, #20806	; 0x5146
   11f60:	movt	r0, #1
   11f64:	b	11f8c <__assert_fail@plt+0x1188>
   11f68:	cmp	r4, #0
   11f6c:	mov	r8, #1
   11f70:	mov	r2, #1
   11f74:	mov	r7, #5
   11f78:	mov	r3, #0
   11f7c:	movne	r0, #34	; 0x22
   11f80:	strbne	r0, [r5]
   11f84:	movw	r0, #20802	; 0x5142
   11f88:	movt	r0, #1
   11f8c:	str	r0, [fp, #-88]	; 0xffffffa8
   11f90:	mov	r0, #1
   11f94:	str	r0, [fp, #-72]	; 0xffffffb8
   11f98:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11f9c:	eor	r6, r3, #1
   11fa0:	str	r7, [fp, #-68]	; 0xffffffbc
   11fa4:	str	r3, [fp, #-76]	; 0xffffffb4
   11fa8:	str	r2, [sp, #84]	; 0x54
   11fac:	str	r6, [sp, #92]	; 0x5c
   11fb0:	cmp	r0, #0
   11fb4:	movwne	r0, #1
   11fb8:	and	r1, r0, r3
   11fbc:	and	r1, r2, r1
   11fc0:	str	r1, [sp, #48]	; 0x30
   11fc4:	sub	r1, r7, #2
   11fc8:	clz	r1, r1
   11fcc:	lsr	r1, r1, #5
   11fd0:	and	r1, r1, r3
   11fd4:	str	r1, [sp, #64]	; 0x40
   11fd8:	subs	r1, r7, #2
   11fdc:	mov	r7, #0
   11fe0:	movwne	r1, #1
   11fe4:	orr	r6, r1, r6
   11fe8:	and	r1, r1, r2
   11fec:	and	r0, r0, r1
   11ff0:	str	r6, [sp, #68]	; 0x44
   11ff4:	str	r0, [fp, #-60]	; 0xffffffc4
   11ff8:	orr	r0, r1, r3
   11ffc:	ldr	r1, [fp, #16]
   12000:	eor	r0, r0, #1
   12004:	clz	r1, r1
   12008:	lsr	r1, r1, #5
   1200c:	orr	r0, r1, r0
   12010:	str	r0, [fp, #-64]	; 0xffffffc0
   12014:	eor	r0, r2, #1
   12018:	str	r0, [sp, #52]	; 0x34
   1201c:	cmn	lr, #1
   12020:	beq	12030 <__assert_fail@plt+0x122c>
   12024:	cmp	r7, lr
   12028:	bne	1203c <__assert_fail@plt+0x1238>
   1202c:	b	12b84 <__assert_fail@plt+0x1d80>
   12030:	ldrb	r0, [ip, r7]
   12034:	cmp	r0, #0
   12038:	beq	12b8c <__assert_fail@plt+0x1d88>
   1203c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12040:	mov	sl, #0
   12044:	cmp	r0, #0
   12048:	beq	12080 <__assert_fail@plt+0x127c>
   1204c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12050:	add	r5, r7, r0
   12054:	cmp	r0, #2
   12058:	bcc	12074 <__assert_fail@plt+0x1270>
   1205c:	cmn	lr, #1
   12060:	bne	12074 <__assert_fail@plt+0x1270>
   12064:	mov	r0, ip
   12068:	bl	10d44 <strlen@plt>
   1206c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12070:	mov	lr, r0
   12074:	cmp	r5, lr
   12078:	bls	12088 <__assert_fail@plt+0x1284>
   1207c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12080:	mov	r0, #0
   12084:	b	120d4 <__assert_fail@plt+0x12d0>
   12088:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1208c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12090:	add	r0, ip, r7
   12094:	mov	r6, r4
   12098:	mov	r4, lr
   1209c:	bl	10d38 <bcmp@plt>
   120a0:	ldr	r2, [sp, #92]	; 0x5c
   120a4:	cmp	r0, #0
   120a8:	ldr	r5, [fp, #-84]	; 0xffffffac
   120ac:	mov	r1, r0
   120b0:	movwne	r1, #1
   120b4:	orr	r1, r1, r2
   120b8:	tst	r1, #1
   120bc:	beq	12c14 <__assert_fail@plt+0x1e10>
   120c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   120c4:	clz	r0, r0
   120c8:	mov	lr, r4
   120cc:	mov	r4, r6
   120d0:	lsr	r0, r0, #5
   120d4:	str	r0, [fp, #-52]	; 0xffffffcc
   120d8:	ldrb	r6, [ip, r7]
   120dc:	cmp	r6, #126	; 0x7e
   120e0:	bhi	12610 <__assert_fail@plt+0x180c>
   120e4:	add	r3, pc, #16
   120e8:	mov	r9, #1
   120ec:	mov	r2, #110	; 0x6e
   120f0:	mov	r0, #97	; 0x61
   120f4:	mov	r1, #0
   120f8:	ldr	pc, [r3, r6, lsl #2]
   120fc:	andeq	r2, r1, r0, ror r4
   12100:	andeq	r2, r1, r0, lsl r6
   12104:	andeq	r2, r1, r0, lsl r6
   12108:	andeq	r2, r1, r0, lsl r6
   1210c:	andeq	r2, r1, r0, lsl r6
   12110:	andeq	r2, r1, r0, lsl r6
   12114:	andeq	r2, r1, r0, lsl r6
   12118:	andeq	r2, r1, ip, ror #13
   1211c:	andeq	r2, r1, r0, asr r4
   12120:	andeq	r2, r1, r8, asr #8
   12124:	andeq	r2, r1, ip, asr r4
   12128:	andeq	r2, r1, r8, ror r5
   1212c:	andeq	r2, r1, r0, asr #8
   12130:	andeq	r2, r1, r8, asr r4
   12134:	andeq	r2, r1, r0, lsl r6
   12138:	andeq	r2, r1, r0, lsl r6
   1213c:	andeq	r2, r1, r0, lsl r6
   12140:	andeq	r2, r1, r0, lsl r6
   12144:	andeq	r2, r1, r0, lsl r6
   12148:	andeq	r2, r1, r0, lsl r6
   1214c:	andeq	r2, r1, r0, lsl r6
   12150:	andeq	r2, r1, r0, lsl r6
   12154:	andeq	r2, r1, r0, lsl r6
   12158:	andeq	r2, r1, r0, lsl r6
   1215c:	andeq	r2, r1, r0, lsl r6
   12160:	andeq	r2, r1, r0, lsl r6
   12164:	andeq	r2, r1, r0, lsl r6
   12168:	andeq	r2, r1, r0, lsl r6
   1216c:	andeq	r2, r1, r0, lsl r6
   12170:	andeq	r2, r1, r0, lsl r6
   12174:	andeq	r2, r1, r0, lsl r6
   12178:	andeq	r2, r1, r0, lsl r6
   1217c:	strdeq	r2, [r1], -r4
   12180:	strdeq	r2, [r1], -r8
   12184:	strdeq	r2, [r1], -r8
   12188:	andeq	r2, r1, r0, ror #7
   1218c:	strdeq	r2, [r1], -r8
   12190:	strdeq	r2, [r1], -r8
   12194:	strdeq	r2, [r1], -r8
   12198:	andeq	r2, r1, r0, lsl #11
   1219c:	strdeq	r2, [r1], -r8
   121a0:	strdeq	r2, [r1], -r8
   121a4:	strdeq	r2, [r1], -r8
   121a8:	strdeq	r2, [r1], -r8
   121ac:	strdeq	r2, [r1], -r8
   121b0:	strdeq	r2, [r1], -r8
   121b4:	strdeq	r2, [r1], -r8
   121b8:	strdeq	r2, [r1], -r8
   121bc:	strdeq	r2, [r1], -r8
   121c0:	strdeq	r2, [r1], -r8
   121c4:	strdeq	r2, [r1], -r8
   121c8:	strdeq	r2, [r1], -r8
   121cc:	strdeq	r2, [r1], -r8
   121d0:	strdeq	r2, [r1], -r8
   121d4:	strdeq	r2, [r1], -r8
   121d8:	strdeq	r2, [r1], -r8
   121dc:	strdeq	r2, [r1], -r8
   121e0:	strdeq	r2, [r1], -r8
   121e4:	strdeq	r2, [r1], -r8
   121e8:	strdeq	r2, [r1], -r8
   121ec:	strdeq	r2, [r1], -r8
   121f0:	strdeq	r2, [r1], -r8
   121f4:	strdeq	r2, [r1], -r8
   121f8:	andeq	r2, r1, r8, asr #10
   121fc:	andeq	r2, r1, r0, lsl r6
   12200:	strdeq	r2, [r1], -r8
   12204:	strdeq	r2, [r1], -r8
   12208:	strdeq	r2, [r1], -r8
   1220c:	strdeq	r2, [r1], -r8
   12210:	strdeq	r2, [r1], -r8
   12214:	strdeq	r2, [r1], -r8
   12218:	strdeq	r2, [r1], -r8
   1221c:	strdeq	r2, [r1], -r8
   12220:	strdeq	r2, [r1], -r8
   12224:	strdeq	r2, [r1], -r8
   12228:	strdeq	r2, [r1], -r8
   1222c:	strdeq	r2, [r1], -r8
   12230:	strdeq	r2, [r1], -r8
   12234:	strdeq	r2, [r1], -r8
   12238:	strdeq	r2, [r1], -r8
   1223c:	strdeq	r2, [r1], -r8
   12240:	strdeq	r2, [r1], -r8
   12244:	strdeq	r2, [r1], -r8
   12248:	strdeq	r2, [r1], -r8
   1224c:	strdeq	r2, [r1], -r8
   12250:	strdeq	r2, [r1], -r8
   12254:	strdeq	r2, [r1], -r8
   12258:	strdeq	r2, [r1], -r8
   1225c:	strdeq	r2, [r1], -r8
   12260:	strdeq	r2, [r1], -r8
   12264:	strdeq	r2, [r1], -r8
   12268:	strdeq	r2, [r1], -r8
   1226c:	andeq	r2, r1, r0, lsr #8
   12270:	strdeq	r2, [r1], -r8
   12274:	strdeq	r2, [r1], -r8
   12278:	strdeq	r2, [r1], -r8
   1227c:	strdeq	r2, [r1], -r8
   12280:	strdeq	r2, [r1], -r8
   12284:	strdeq	r2, [r1], -r8
   12288:	strdeq	r2, [r1], -r8
   1228c:	strdeq	r2, [r1], -r8
   12290:	strdeq	r2, [r1], -r8
   12294:	strdeq	r2, [r1], -r8
   12298:	strdeq	r2, [r1], -r8
   1229c:	strdeq	r2, [r1], -r8
   122a0:	strdeq	r2, [r1], -r8
   122a4:	strdeq	r2, [r1], -r8
   122a8:	strdeq	r2, [r1], -r8
   122ac:	strdeq	r2, [r1], -r8
   122b0:	strdeq	r2, [r1], -r8
   122b4:	strdeq	r2, [r1], -r8
   122b8:	strdeq	r2, [r1], -r8
   122bc:	strdeq	r2, [r1], -r8
   122c0:	strdeq	r2, [r1], -r8
   122c4:	strdeq	r2, [r1], -r8
   122c8:	strdeq	r2, [r1], -r8
   122cc:	strdeq	r2, [r1], -r8
   122d0:	strdeq	r2, [r1], -r8
   122d4:	strdeq	r2, [r1], -r8
   122d8:	strdeq	r2, [r1], -r8
   122dc:	strdeq	r2, [r1], -r8
   122e0:	strdeq	r2, [r1], -r8
   122e4:	strdeq	r2, [r1], -r8
   122e8:			; <UNDEFINED> instruction: 0x000123b4
   122ec:	strdeq	r2, [r1], -r8
   122f0:			; <UNDEFINED> instruction: 0x000123b4
   122f4:	andeq	r2, r1, r0, ror #7
   122f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122fc:	tst	r0, #1
   12300:	bne	1232c <__assert_fail@plt+0x1528>
   12304:	ldr	r1, [fp, #16]
   12308:	ubfx	r0, r6, #5, #3
   1230c:	mov	r2, #1
   12310:	ldr	r0, [r1, r0, lsl #2]
   12314:	and	r1, r6, #31
   12318:	tst	r0, r2, lsl r1
   1231c:	beq	1232c <__assert_fail@plt+0x1528>
   12320:	mov	r0, r6
   12324:	mov	r1, r9
   12328:	b	12340 <__assert_fail@plt+0x153c>
   1232c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12330:	mov	r1, r9
   12334:	cmp	r0, #0
   12338:	mov	r0, r6
   1233c:	beq	12680 <__assert_fail@plt+0x187c>
   12340:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12344:	tst	r2, #1
   12348:	bne	12c50 <__assert_fail@plt+0x1e4c>
   1234c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12350:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12354:	subs	r2, r2, #2
   12358:	movwne	r2, #1
   1235c:	orr	r2, r2, r3
   12360:	tst	r2, #1
   12364:	bne	123a0 <__assert_fail@plt+0x159c>
   12368:	cmp	r8, r4
   1236c:	movcc	r2, #39	; 0x27
   12370:	strbcc	r2, [r5, r8]
   12374:	add	r2, r8, #1
   12378:	cmp	r2, r4
   1237c:	movcc	r3, #36	; 0x24
   12380:	strbcc	r3, [r5, r2]
   12384:	add	r2, r8, #2
   12388:	add	r8, r8, #3
   1238c:	cmp	r2, r4
   12390:	movcc	r3, #39	; 0x27
   12394:	strbcc	r3, [r5, r2]
   12398:	mov	r2, #1
   1239c:	str	r2, [fp, #-56]	; 0xffffffc8
   123a0:	cmp	r8, r4
   123a4:	movcc	r2, #92	; 0x5c
   123a8:	strbcc	r2, [r5, r8]
   123ac:	add	r8, r8, #1
   123b0:	b	126c4 <__assert_fail@plt+0x18c0>
   123b4:	cmp	lr, #1
   123b8:	beq	123e0 <__assert_fail@plt+0x15dc>
   123bc:	mov	r9, #0
   123c0:	cmn	lr, #1
   123c4:	bne	123ec <__assert_fail@plt+0x15e8>
   123c8:	ldrb	r0, [ip, #1]
   123cc:	cmp	r0, #0
   123d0:	beq	123e0 <__assert_fail@plt+0x15dc>
   123d4:	mvn	lr, #0
   123d8:	mov	sl, #0
   123dc:	b	122f8 <__assert_fail@plt+0x14f4>
   123e0:	mov	r9, #0
   123e4:	cmp	r7, #0
   123e8:	beq	123f4 <__assert_fail@plt+0x15f0>
   123ec:	mov	sl, #0
   123f0:	b	122f8 <__assert_fail@plt+0x14f4>
   123f4:	mov	r1, #1
   123f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   123fc:	cmp	r0, #2
   12400:	bne	12418 <__assert_fail@plt+0x1614>
   12404:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12408:	mov	r9, r1
   1240c:	tst	r0, #1
   12410:	beq	122f8 <__assert_fail@plt+0x14f4>
   12414:	b	12c50 <__assert_fail@plt+0x1e4c>
   12418:	mov	r9, r1
   1241c:	b	122f8 <__assert_fail@plt+0x14f4>
   12420:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12424:	cmp	r0, #2
   12428:	bne	12664 <__assert_fail@plt+0x1860>
   1242c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12430:	tst	r0, #1
   12434:	bne	12c50 <__assert_fail@plt+0x1e4c>
   12438:	mov	sl, #0
   1243c:	b	12678 <__assert_fail@plt+0x1874>
   12440:	mov	r0, #102	; 0x66
   12444:	b	126ec <__assert_fail@plt+0x18e8>
   12448:	mov	r2, #116	; 0x74
   1244c:	b	1245c <__assert_fail@plt+0x1658>
   12450:	mov	r0, #98	; 0x62
   12454:	b	126ec <__assert_fail@plt+0x18e8>
   12458:	mov	r2, #114	; 0x72
   1245c:	ldr	r0, [sp, #68]	; 0x44
   12460:	tst	r0, #1
   12464:	mov	r0, r2
   12468:	bne	126ec <__assert_fail@plt+0x18e8>
   1246c:	b	12c50 <__assert_fail@plt+0x1e4c>
   12470:	ldr	r0, [sp, #84]	; 0x54
   12474:	tst	r0, #1
   12478:	beq	12708 <__assert_fail@plt+0x1904>
   1247c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12480:	tst	r0, #1
   12484:	bne	12d3c <__assert_fail@plt+0x1f38>
   12488:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1248c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12490:	subs	r0, r0, #2
   12494:	movwne	r0, #1
   12498:	orr	r0, r0, r1
   1249c:	tst	r0, #1
   124a0:	bne	124dc <__assert_fail@plt+0x16d8>
   124a4:	cmp	r8, r4
   124a8:	movcc	r0, #39	; 0x27
   124ac:	strbcc	r0, [r5, r8]
   124b0:	add	r0, r8, #1
   124b4:	cmp	r0, r4
   124b8:	movcc	r1, #36	; 0x24
   124bc:	strbcc	r1, [r5, r0]
   124c0:	add	r0, r8, #2
   124c4:	add	r8, r8, #3
   124c8:	cmp	r0, r4
   124cc:	movcc	r1, #39	; 0x27
   124d0:	strbcc	r1, [r5, r0]
   124d4:	mov	r0, #1
   124d8:	str	r0, [fp, #-56]	; 0xffffffc8
   124dc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   124e0:	cmp	r8, r4
   124e4:	mov	r9, #0
   124e8:	mov	sl, #1
   124ec:	mov	r6, #48	; 0x30
   124f0:	movcc	r0, #92	; 0x5c
   124f4:	strbcc	r0, [r5, r8]
   124f8:	add	r0, r8, #1
   124fc:	cmp	r1, #2
   12500:	beq	128d0 <__assert_fail@plt+0x1acc>
   12504:	add	r1, r7, #1
   12508:	cmp	r1, lr
   1250c:	bcs	128d0 <__assert_fail@plt+0x1acc>
   12510:	ldrb	r1, [ip, r1]
   12514:	sub	r1, r1, #48	; 0x30
   12518:	uxtb	r1, r1
   1251c:	cmp	r1, #9
   12520:	bhi	128d0 <__assert_fail@plt+0x1acc>
   12524:	cmp	r0, r4
   12528:	movcc	r1, #48	; 0x30
   1252c:	strbcc	r1, [r5, r0]
   12530:	add	r0, r8, #2
   12534:	add	r8, r8, #3
   12538:	cmp	r0, r4
   1253c:	movcc	r1, #48	; 0x30
   12540:	strbcc	r1, [r5, r0]
   12544:	b	122f8 <__assert_fail@plt+0x14f4>
   12548:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1254c:	mov	sl, #0
   12550:	mov	r6, #63	; 0x3f
   12554:	cmp	r0, #5
   12558:	beq	128d8 <__assert_fail@plt+0x1ad4>
   1255c:	cmp	r0, #2
   12560:	bne	12980 <__assert_fail@plt+0x1b7c>
   12564:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12568:	mov	r9, #0
   1256c:	tst	r0, #1
   12570:	beq	122f8 <__assert_fail@plt+0x14f4>
   12574:	b	12c50 <__assert_fail@plt+0x1e4c>
   12578:	mov	r0, #118	; 0x76
   1257c:	b	126ec <__assert_fail@plt+0x18e8>
   12580:	mov	r0, #1
   12584:	mov	r6, #39	; 0x27
   12588:	str	r0, [sp, #60]	; 0x3c
   1258c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12590:	cmp	r0, #2
   12594:	bne	12724 <__assert_fail@plt+0x1920>
   12598:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1259c:	tst	r0, #1
   125a0:	bne	12c50 <__assert_fail@plt+0x1e4c>
   125a4:	ldr	r2, [sp, #56]	; 0x38
   125a8:	clz	r1, r4
   125ac:	mov	sl, #0
   125b0:	mov	r9, #1
   125b4:	lsr	r1, r1, #5
   125b8:	cmp	r2, #0
   125bc:	mov	r0, r2
   125c0:	movwne	r0, #1
   125c4:	orrs	r0, r0, r1
   125c8:	moveq	r2, r4
   125cc:	moveq	r4, r0
   125d0:	cmp	r8, r4
   125d4:	str	r2, [sp, #56]	; 0x38
   125d8:	movcc	r0, #39	; 0x27
   125dc:	strbcc	r0, [r5, r8]
   125e0:	add	r0, r8, #1
   125e4:	cmp	r0, r4
   125e8:	movcc	r1, #92	; 0x5c
   125ec:	strbcc	r1, [r5, r0]
   125f0:	add	r0, r8, #2
   125f4:	add	r8, r8, #3
   125f8:	cmp	r0, r4
   125fc:	movcc	r1, #39	; 0x27
   12600:	strbcc	r1, [r5, r0]
   12604:	mov	r0, #0
   12608:	str	r0, [fp, #-56]	; 0xffffffc8
   1260c:	b	122f8 <__assert_fail@plt+0x14f4>
   12610:	ldr	r0, [sp, #40]	; 0x28
   12614:	str	r4, [sp, #88]	; 0x58
   12618:	cmp	r0, #1
   1261c:	bne	1272c <__assert_fail@plt+0x1928>
   12620:	str	lr, [sp, #28]
   12624:	bl	10d20 <__ctype_b_loc@plt>
   12628:	ldr	r0, [r0]
   1262c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12630:	mov	r2, #1
   12634:	add	r0, r0, r6, lsl #1
   12638:	ldrb	r0, [r0, #1]
   1263c:	ubfx	r9, r0, #6, #1
   12640:	ldr	r0, [sp, #52]	; 0x34
   12644:	cmp	r2, #1
   12648:	orr	r0, r9, r0
   1264c:	bhi	12988 <__assert_fail@plt+0x1b84>
   12650:	tst	r0, #1
   12654:	beq	12988 <__assert_fail@plt+0x1b84>
   12658:	ldr	lr, [sp, #28]
   1265c:	ldr	r4, [sp, #88]	; 0x58
   12660:	b	122f8 <__assert_fail@plt+0x14f4>
   12664:	ldr	r1, [sp, #48]	; 0x30
   12668:	mov	sl, #0
   1266c:	mov	r0, #92	; 0x5c
   12670:	cmp	r1, #0
   12674:	beq	126ec <__assert_fail@plt+0x18e8>
   12678:	mov	r6, #92	; 0x5c
   1267c:	mov	r9, #0
   12680:	cmp	sl, #0
   12684:	bne	126bc <__assert_fail@plt+0x18b8>
   12688:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1268c:	tst	r0, #1
   12690:	beq	126bc <__assert_fail@plt+0x18b8>
   12694:	cmp	r8, r4
   12698:	movcc	r0, #39	; 0x27
   1269c:	strbcc	r0, [r5, r8]
   126a0:	add	r0, r8, #1
   126a4:	add	r8, r8, #2
   126a8:	cmp	r0, r4
   126ac:	movcc	r1, #39	; 0x27
   126b0:	strbcc	r1, [r5, r0]
   126b4:	mov	r0, #0
   126b8:	str	r0, [fp, #-56]	; 0xffffffc8
   126bc:	mov	r1, r9
   126c0:	mov	r0, r6
   126c4:	cmp	r8, r4
   126c8:	strbcc	r0, [r5, r8]
   126cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   126d0:	add	r8, r8, #1
   126d4:	and	r0, r0, r1
   126d8:	str	r0, [fp, #-48]	; 0xffffffd0
   126dc:	add	r7, r7, #1
   126e0:	cmn	lr, #1
   126e4:	bne	12024 <__assert_fail@plt+0x1220>
   126e8:	b	12030 <__assert_fail@plt+0x122c>
   126ec:	ldr	r1, [sp, #84]	; 0x54
   126f0:	mov	sl, #0
   126f4:	mov	r9, #0
   126f8:	tst	r1, #1
   126fc:	mov	r1, #0
   12700:	beq	122f8 <__assert_fail@plt+0x14f4>
   12704:	b	12340 <__assert_fail@plt+0x153c>
   12708:	ldr	r0, [sp, #36]	; 0x24
   1270c:	mov	r6, #0
   12710:	mov	sl, #0
   12714:	mov	r9, #0
   12718:	cmp	r0, #0
   1271c:	beq	122f8 <__assert_fail@plt+0x14f4>
   12720:	b	126dc <__assert_fail@plt+0x18d8>
   12724:	mov	r9, #1
   12728:	b	122f8 <__assert_fail@plt+0x14f4>
   1272c:	mov	r0, #0
   12730:	cmn	lr, #1
   12734:	sub	r4, fp, #40	; 0x28
   12738:	str	r0, [fp, #-36]	; 0xffffffdc
   1273c:	str	r0, [fp, #-40]	; 0xffffffd8
   12740:	bne	12754 <__assert_fail@plt+0x1950>
   12744:	mov	r0, ip
   12748:	bl	10d44 <strlen@plt>
   1274c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12750:	mov	lr, r0
   12754:	ldr	r0, [sp, #72]	; 0x48
   12758:	mov	r9, #1
   1275c:	mov	r2, #0
   12760:	str	lr, [sp, #28]
   12764:	add	r0, r0, r7
   12768:	str	r0, [sp, #20]
   1276c:	b	127b0 <__assert_fail@plt+0x19ac>
   12770:	ldr	r5, [sp, #44]	; 0x2c
   12774:	add	r5, r0, r5
   12778:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1277c:	bl	10c90 <iswprint@plt>
   12780:	cmp	r0, #0
   12784:	sub	r4, fp, #40	; 0x28
   12788:	movwne	r0, #1
   1278c:	and	r9, r9, r0
   12790:	mov	r0, r4
   12794:	bl	10c60 <mbsinit@plt>
   12798:	mov	r2, r5
   1279c:	ldr	lr, [sp, #28]
   127a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   127a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   127a8:	cmp	r0, #0
   127ac:	bne	12640 <__assert_fail@plt+0x183c>
   127b0:	add	r0, r2, r7
   127b4:	str	r2, [sp, #44]	; 0x2c
   127b8:	mov	r3, r4
   127bc:	add	r1, ip, r0
   127c0:	str	r0, [sp, #24]
   127c4:	sub	r2, lr, r0
   127c8:	sub	r0, fp, #44	; 0x2c
   127cc:	bl	14814 <__assert_fail@plt+0x3a10>
   127d0:	cmp	r0, #0
   127d4:	beq	12b78 <__assert_fail@plt+0x1d74>
   127d8:	cmn	r0, #1
   127dc:	beq	12b34 <__assert_fail@plt+0x1d30>
   127e0:	ldr	lr, [sp, #28]
   127e4:	cmn	r0, #2
   127e8:	beq	12b3c <__assert_fail@plt+0x1d38>
   127ec:	ldr	r2, [sp, #64]	; 0x40
   127f0:	ldr	r4, [sp, #88]	; 0x58
   127f4:	ldr	ip, [sp, #84]	; 0x54
   127f8:	cmp	r0, #2
   127fc:	mov	r1, #0
   12800:	movwcc	r1, #1
   12804:	eor	r2, r2, #1
   12808:	orrs	r1, r2, r1
   1280c:	bne	12770 <__assert_fail@plt+0x196c>
   12810:	ldr	r1, [sp, #44]	; 0x2c
   12814:	ldr	r2, [sp, #20]
   12818:	add	r1, r2, r1
   1281c:	sub	r2, r0, #1
   12820:	b	12830 <__assert_fail@plt+0x1a2c>
   12824:	add	r1, r1, #1
   12828:	subs	r2, r2, #1
   1282c:	beq	12770 <__assert_fail@plt+0x196c>
   12830:	ldrb	r3, [r1]
   12834:	sub	r3, r3, #91	; 0x5b
   12838:	cmp	r3, #33	; 0x21
   1283c:	bhi	12824 <__assert_fail@plt+0x1a20>
   12840:	add	r5, pc, #0
   12844:	ldr	pc, [r5, r3, lsl #2]
   12848:	andeq	r2, r1, ip, lsr #24
   1284c:	andeq	r2, r1, ip, lsr #24
   12850:	andeq	r2, r1, r4, lsr #16
   12854:	andeq	r2, r1, ip, lsr #24
   12858:	andeq	r2, r1, r4, lsr #16
   1285c:	andeq	r2, r1, ip, lsr #24
   12860:	andeq	r2, r1, r4, lsr #16
   12864:	andeq	r2, r1, r4, lsr #16
   12868:	andeq	r2, r1, r4, lsr #16
   1286c:	andeq	r2, r1, r4, lsr #16
   12870:	andeq	r2, r1, r4, lsr #16
   12874:	andeq	r2, r1, r4, lsr #16
   12878:	andeq	r2, r1, r4, lsr #16
   1287c:	andeq	r2, r1, r4, lsr #16
   12880:	andeq	r2, r1, r4, lsr #16
   12884:	andeq	r2, r1, r4, lsr #16
   12888:	andeq	r2, r1, r4, lsr #16
   1288c:	andeq	r2, r1, r4, lsr #16
   12890:	andeq	r2, r1, r4, lsr #16
   12894:	andeq	r2, r1, r4, lsr #16
   12898:	andeq	r2, r1, r4, lsr #16
   1289c:	andeq	r2, r1, r4, lsr #16
   128a0:	andeq	r2, r1, r4, lsr #16
   128a4:	andeq	r2, r1, r4, lsr #16
   128a8:	andeq	r2, r1, r4, lsr #16
   128ac:	andeq	r2, r1, r4, lsr #16
   128b0:	andeq	r2, r1, r4, lsr #16
   128b4:	andeq	r2, r1, r4, lsr #16
   128b8:	andeq	r2, r1, r4, lsr #16
   128bc:	andeq	r2, r1, r4, lsr #16
   128c0:	andeq	r2, r1, r4, lsr #16
   128c4:	andeq	r2, r1, r4, lsr #16
   128c8:	andeq	r2, r1, r4, lsr #16
   128cc:	andeq	r2, r1, ip, lsr #24
   128d0:	mov	r8, r0
   128d4:	b	122f8 <__assert_fail@plt+0x14f4>
   128d8:	ldr	r0, [sp, #32]
   128dc:	cmp	r0, #0
   128e0:	beq	12980 <__assert_fail@plt+0x1b7c>
   128e4:	add	r0, r7, #2
   128e8:	cmp	r0, lr
   128ec:	bcs	12980 <__assert_fail@plt+0x1b7c>
   128f0:	add	r1, r7, ip
   128f4:	ldrb	r1, [r1, #1]
   128f8:	cmp	r1, #63	; 0x3f
   128fc:	bne	12980 <__assert_fail@plt+0x1b7c>
   12900:	ldrb	r9, [ip, r0]
   12904:	sub	r2, r9, #33	; 0x21
   12908:	cmp	r2, #29
   1290c:	bhi	12980 <__assert_fail@plt+0x1b7c>
   12910:	movw	r1, #20929	; 0x51c1
   12914:	mov	r3, #1
   12918:	movt	r1, #14336	; 0x3800
   1291c:	tst	r1, r3, lsl r2
   12920:	beq	12980 <__assert_fail@plt+0x1b7c>
   12924:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12928:	tst	r1, #1
   1292c:	bne	12c50 <__assert_fail@plt+0x1e4c>
   12930:	cmp	r8, r4
   12934:	add	r2, r8, #1
   12938:	mov	r6, r9
   1293c:	mov	r7, r0
   12940:	mov	r9, #0
   12944:	movcc	r1, #63	; 0x3f
   12948:	strbcc	r1, [r5, r8]
   1294c:	cmp	r2, r4
   12950:	movcc	r1, #34	; 0x22
   12954:	strbcc	r1, [r5, r2]
   12958:	add	r2, r8, #2
   1295c:	cmp	r2, r4
   12960:	movcc	r1, #34	; 0x22
   12964:	strbcc	r1, [r5, r2]
   12968:	add	r2, r8, #3
   1296c:	add	r8, r8, #4
   12970:	cmp	r2, r4
   12974:	movcc	r1, #63	; 0x3f
   12978:	strbcc	r1, [r5, r2]
   1297c:	b	122f8 <__assert_fail@plt+0x14f4>
   12980:	mov	r9, #0
   12984:	b	122f8 <__assert_fail@plt+0x14f4>
   12988:	ldr	lr, [sp, #28]
   1298c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   12990:	add	r1, r2, r7
   12994:	mov	r2, #0
   12998:	str	r1, [sp, #44]	; 0x2c
   1299c:	tst	r0, #1
   129a0:	bne	12abc <__assert_fail@plt+0x1cb8>
   129a4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   129a8:	tst	r1, #1
   129ac:	bne	12c4c <__assert_fail@plt+0x1e48>
   129b0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   129b4:	subs	r2, r1, #2
   129b8:	movwne	r2, #1
   129bc:	orr	r2, r2, r4
   129c0:	tst	r2, #1
   129c4:	bne	12a08 <__assert_fail@plt+0x1c04>
   129c8:	ldr	r1, [sp, #88]	; 0x58
   129cc:	add	r2, r8, #1
   129d0:	mov	r4, #1
   129d4:	cmp	r8, r1
   129d8:	movcc	r1, #39	; 0x27
   129dc:	strbcc	r1, [r5, r8]
   129e0:	ldr	r1, [sp, #88]	; 0x58
   129e4:	cmp	r2, r1
   129e8:	movcc	r1, #36	; 0x24
   129ec:	strbcc	r1, [r5, r2]
   129f0:	ldr	r1, [sp, #88]	; 0x58
   129f4:	add	r2, r8, #2
   129f8:	add	r8, r8, #3
   129fc:	cmp	r2, r1
   12a00:	movcc	r1, #39	; 0x27
   12a04:	strbcc	r1, [r5, r2]
   12a08:	ldr	r1, [sp, #88]	; 0x58
   12a0c:	add	r2, r8, #1
   12a10:	cmp	r8, r1
   12a14:	movcc	r1, #92	; 0x5c
   12a18:	strbcc	r1, [r5, r8]
   12a1c:	ldr	r1, [sp, #88]	; 0x58
   12a20:	cmp	r2, r1
   12a24:	bcs	12a38 <__assert_fail@plt+0x1c34>
   12a28:	uxtb	r3, r6
   12a2c:	mov	r1, #48	; 0x30
   12a30:	orr	r3, r1, r3, lsr #6
   12a34:	strb	r3, [r5, r2]
   12a38:	ldr	r1, [sp, #88]	; 0x58
   12a3c:	add	r2, r8, #2
   12a40:	add	r8, r8, #3
   12a44:	cmp	r2, r1
   12a48:	lsrcc	r3, r6, #3
   12a4c:	movcc	r1, #6
   12a50:	bficc	r3, r1, #3, #29
   12a54:	mov	r1, #6
   12a58:	bfi	r6, r1, #3, #29
   12a5c:	strbcc	r3, [r5, r2]
   12a60:	mov	r2, #1
   12a64:	b	12ae4 <__assert_fail@plt+0x1ce0>
   12a68:	ldr	r1, [sp, #88]	; 0x58
   12a6c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12a70:	ldr	r4, [sp, #88]	; 0x58
   12a74:	cmp	r8, r1
   12a78:	movcc	r1, #39	; 0x27
   12a7c:	strbcc	r1, [r5, r8]
   12a80:	add	r1, r8, #1
   12a84:	add	r8, r8, #2
   12a88:	cmp	r1, r4
   12a8c:	movcc	r4, #39	; 0x27
   12a90:	strbcc	r4, [r5, r1]
   12a94:	mov	r4, #0
   12a98:	ldr	r1, [sp, #88]	; 0x58
   12a9c:	cmp	r8, r1
   12aa0:	ldr	r1, [sp, #72]	; 0x48
   12aa4:	strbcc	r6, [r5, r8]
   12aa8:	add	r8, r8, #1
   12aac:	ldrb	r6, [r1, r7]
   12ab0:	mov	r7, r3
   12ab4:	tst	r0, #1
   12ab8:	beq	129a4 <__assert_fail@plt+0x1ba0>
   12abc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ac0:	tst	r1, #1
   12ac4:	beq	12adc <__assert_fail@plt+0x1cd8>
   12ac8:	ldr	r1, [sp, #88]	; 0x58
   12acc:	cmp	r8, r1
   12ad0:	movcc	r1, #92	; 0x5c
   12ad4:	strbcc	r1, [r5, r8]
   12ad8:	add	r8, r8, #1
   12adc:	mov	r1, #0
   12ae0:	str	r1, [fp, #-52]	; 0xffffffcc
   12ae4:	ldr	r1, [sp, #44]	; 0x2c
   12ae8:	add	r3, r7, #1
   12aec:	and	sl, r2, #1
   12af0:	cmp	r1, r3
   12af4:	bls	12b18 <__assert_fail@plt+0x1d14>
   12af8:	cmp	sl, #0
   12afc:	mvn	r5, r4
   12b00:	movwne	sl, #1
   12b04:	orr	r5, r5, sl
   12b08:	tst	r5, #1
   12b0c:	beq	12a68 <__assert_fail@plt+0x1c64>
   12b10:	ldr	r5, [fp, #-84]	; 0xffffffac
   12b14:	b	12a98 <__assert_fail@plt+0x1c94>
   12b18:	str	r4, [fp, #-56]	; 0xffffffc8
   12b1c:	ldr	r4, [sp, #88]	; 0x58
   12b20:	cmp	sl, #0
   12b24:	movwne	sl, #1
   12b28:	cmp	sl, #0
   12b2c:	beq	12688 <__assert_fail@plt+0x1884>
   12b30:	b	126bc <__assert_fail@plt+0x18b8>
   12b34:	mov	r9, #0
   12b38:	b	12b78 <__assert_fail@plt+0x1d74>
   12b3c:	ldr	r0, [sp, #24]
   12b40:	mov	r9, #0
   12b44:	cmp	lr, r0
   12b48:	bls	12b78 <__assert_fail@plt+0x1d74>
   12b4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b50:	ldr	r2, [sp, #44]	; 0x2c
   12b54:	add	r0, ip, r7
   12b58:	ldrb	r1, [r0, r2]
   12b5c:	cmp	r1, #0
   12b60:	beq	12640 <__assert_fail@plt+0x183c>
   12b64:	add	r2, r2, #1
   12b68:	add	r1, r7, r2
   12b6c:	cmp	r1, lr
   12b70:	bcc	12b58 <__assert_fail@plt+0x1d54>
   12b74:	b	12640 <__assert_fail@plt+0x183c>
   12b78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b7c:	ldr	r2, [sp, #44]	; 0x2c
   12b80:	b	12640 <__assert_fail@plt+0x183c>
   12b84:	mov	lr, r7
   12b88:	b	12b90 <__assert_fail@plt+0x1d8c>
   12b8c:	mvn	lr, #0
   12b90:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12b94:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12b98:	eor	r0, r1, #2
   12b9c:	orr	r0, r0, r8
   12ba0:	clz	r0, r0
   12ba4:	lsr	r0, r0, #5
   12ba8:	tst	r2, r0
   12bac:	bne	12c50 <__assert_fail@plt+0x1e4c>
   12bb0:	subs	r0, r1, #2
   12bb4:	movwne	r0, #1
   12bb8:	orr	r0, r2, r0
   12bbc:	tst	r0, #1
   12bc0:	ldreq	r0, [sp, #60]	; 0x3c
   12bc4:	eoreq	r0, r0, #1
   12bc8:	tsteq	r0, #1
   12bcc:	bne	12ce4 <__assert_fail@plt+0x1ee0>
   12bd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12bd4:	mov	sl, lr
   12bd8:	tst	r0, #1
   12bdc:	bne	12cb0 <__assert_fail@plt+0x1eac>
   12be0:	ldr	r6, [sp, #56]	; 0x38
   12be4:	mov	r9, #0
   12be8:	cmp	r6, #0
   12bec:	beq	12cdc <__assert_fail@plt+0x1ed8>
   12bf0:	ldr	r0, [sp, #84]	; 0x54
   12bf4:	mov	r1, #0
   12bf8:	mov	r7, #2
   12bfc:	cmp	r4, #0
   12c00:	str	r1, [fp, #-48]	; 0xffffffd0
   12c04:	mov	r1, #0
   12c08:	str	r1, [fp, #-76]	; 0xffffffb4
   12c0c:	beq	11dac <__assert_fail@plt+0xfa8>
   12c10:	b	12ce4 <__assert_fail@plt+0x1ee0>
   12c14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12c18:	ldr	r1, [fp, #12]
   12c1c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12c20:	mov	lr, r4
   12c24:	mov	r4, r6
   12c28:	b	12c70 <__assert_fail@plt+0x1e6c>
   12c2c:	tst	ip, #1
   12c30:	ldr	r5, [fp, #-84]	; 0xffffffac
   12c34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12c38:	ldr	r1, [fp, #12]
   12c3c:	mov	r0, #2
   12c40:	movwne	r0, #4
   12c44:	mov	r2, r0
   12c48:	b	12c70 <__assert_fail@plt+0x1e6c>
   12c4c:	ldr	r4, [sp, #88]	; 0x58
   12c50:	ldr	r1, [sp, #84]	; 0x54
   12c54:	mov	r0, #2
   12c58:	tst	r1, #1
   12c5c:	movwne	r0, #4
   12c60:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12c64:	ldr	r1, [fp, #12]
   12c68:	cmp	r2, #2
   12c6c:	moveq	r2, r0
   12c70:	mov	r0, #0
   12c74:	bic	r1, r1, #2
   12c78:	str	r2, [sp]
   12c7c:	mov	r2, ip
   12c80:	mov	r3, lr
   12c84:	str	r0, [sp, #8]
   12c88:	ldr	r0, [sp, #76]	; 0x4c
   12c8c:	str	r1, [sp, #4]
   12c90:	mov	r1, r4
   12c94:	str	r0, [sp, #12]
   12c98:	ldr	r0, [sp, #80]	; 0x50
   12c9c:	str	r0, [sp, #16]
   12ca0:	mov	r0, r5
   12ca4:	bl	11d1c <__assert_fail@plt+0xf18>
   12ca8:	mov	r8, r0
   12cac:	b	12d30 <__assert_fail@plt+0x1f2c>
   12cb0:	mov	r0, #5
   12cb4:	ldr	r1, [sp, #56]	; 0x38
   12cb8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12cbc:	mov	r3, sl
   12cc0:	str	r0, [sp]
   12cc4:	ldr	r0, [fp, #12]
   12cc8:	str	r0, [sp, #4]
   12ccc:	ldr	r0, [fp, #16]
   12cd0:	str	r0, [sp, #8]
   12cd4:	ldr	r0, [sp, #76]	; 0x4c
   12cd8:	b	12c94 <__assert_fail@plt+0x1e90>
   12cdc:	mov	r0, #0
   12ce0:	str	r0, [fp, #-76]	; 0xffffffb4
   12ce4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12ce8:	cmp	r1, #0
   12cec:	beq	12d24 <__assert_fail@plt+0x1f20>
   12cf0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cf4:	tst	r0, #1
   12cf8:	bne	12d24 <__assert_fail@plt+0x1f20>
   12cfc:	ldrb	r0, [r1]
   12d00:	cmp	r0, #0
   12d04:	beq	12d24 <__assert_fail@plt+0x1f20>
   12d08:	add	r1, r1, #1
   12d0c:	cmp	r8, r4
   12d10:	strbcc	r0, [r5, r8]
   12d14:	add	r8, r8, #1
   12d18:	ldrb	r0, [r1], #1
   12d1c:	cmp	r0, #0
   12d20:	bne	12d0c <__assert_fail@plt+0x1f08>
   12d24:	cmp	r8, r4
   12d28:	movcc	r0, #0
   12d2c:	strbcc	r0, [r5, r8]
   12d30:	mov	r0, r8
   12d34:	sub	sp, fp, #28
   12d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d3c:	mov	r0, #4
   12d40:	b	12c60 <__assert_fail@plt+0x1e5c>
   12d44:	bl	10df8 <abort@plt>
   12d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d4c:	add	fp, sp, #28
   12d50:	sub	sp, sp, #28
   12d54:	movw	r5, #24880	; 0x6130
   12d58:	cmp	r2, #0
   12d5c:	mov	r4, r1
   12d60:	mov	r7, r0
   12d64:	str	r0, [sp, #20]
   12d68:	movt	r5, #2
   12d6c:	movne	r5, r2
   12d70:	bl	10d50 <__errno_location@plt>
   12d74:	mov	sl, r0
   12d78:	ldr	r2, [r5, #40]	; 0x28
   12d7c:	ldr	r3, [r5, #44]	; 0x2c
   12d80:	ldm	r5, {r0, r1}
   12d84:	orr	r8, r1, #1
   12d88:	add	r9, r5, #8
   12d8c:	mov	r1, #0
   12d90:	ldr	r6, [sl]
   12d94:	stm	sp, {r0, r8, r9}
   12d98:	mov	r0, #0
   12d9c:	str	r2, [sp, #12]
   12da0:	str	r3, [sp, #16]
   12da4:	mov	r2, r7
   12da8:	mov	r3, r4
   12dac:	str	r6, [sp, #24]
   12db0:	mov	r6, r4
   12db4:	bl	11d1c <__assert_fail@plt+0xf18>
   12db8:	add	r7, r0, #1
   12dbc:	mov	r0, r7
   12dc0:	bl	13f68 <__assert_fail@plt+0x3164>
   12dc4:	mov	r4, r0
   12dc8:	ldr	r0, [r5]
   12dcc:	ldr	r2, [r5, #44]	; 0x2c
   12dd0:	ldr	r1, [r5, #40]	; 0x28
   12dd4:	mov	r3, r6
   12dd8:	stm	sp, {r0, r8, r9}
   12ddc:	str	r2, [sp, #16]
   12de0:	ldr	r2, [sp, #20]
   12de4:	str	r1, [sp, #12]
   12de8:	mov	r0, r4
   12dec:	mov	r1, r7
   12df0:	bl	11d1c <__assert_fail@plt+0xf18>
   12df4:	ldr	r0, [sp, #24]
   12df8:	str	r0, [sl]
   12dfc:	mov	r0, r4
   12e00:	sub	sp, fp, #28
   12e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e0c:	add	fp, sp, #28
   12e10:	sub	sp, sp, #36	; 0x24
   12e14:	movw	r8, #24880	; 0x6130
   12e18:	cmp	r3, #0
   12e1c:	mov	r4, r2
   12e20:	str	r2, [sp, #24]
   12e24:	mov	r5, r1
   12e28:	mov	r6, r0
   12e2c:	str	r0, [sp, #20]
   12e30:	movt	r8, #2
   12e34:	movne	r8, r3
   12e38:	bl	10d50 <__errno_location@plt>
   12e3c:	str	r0, [sp, #28]
   12e40:	ldr	r1, [r8, #40]	; 0x28
   12e44:	ldr	r2, [r8, #44]	; 0x2c
   12e48:	ldr	r7, [r0]
   12e4c:	cmp	r4, #0
   12e50:	add	sl, r8, #8
   12e54:	mov	r0, #0
   12e58:	ldm	r8, {r3, r9}
   12e5c:	orreq	r9, r9, #1
   12e60:	stm	sp, {r3, r9, sl}
   12e64:	str	r1, [sp, #12]
   12e68:	str	r2, [sp, #16]
   12e6c:	mov	r1, #0
   12e70:	mov	r2, r6
   12e74:	mov	r3, r5
   12e78:	str	r7, [sp, #32]
   12e7c:	mov	r7, r5
   12e80:	bl	11d1c <__assert_fail@plt+0xf18>
   12e84:	add	r4, r0, #1
   12e88:	mov	r5, r0
   12e8c:	mov	r0, r4
   12e90:	bl	13f68 <__assert_fail@plt+0x3164>
   12e94:	mov	r6, r0
   12e98:	ldr	r0, [r8]
   12e9c:	ldr	r2, [r8, #44]	; 0x2c
   12ea0:	ldr	r1, [r8, #40]	; 0x28
   12ea4:	mov	r3, r7
   12ea8:	stm	sp, {r0, r9, sl}
   12eac:	str	r2, [sp, #16]
   12eb0:	ldr	r2, [sp, #20]
   12eb4:	str	r1, [sp, #12]
   12eb8:	mov	r0, r6
   12ebc:	mov	r1, r4
   12ec0:	bl	11d1c <__assert_fail@plt+0xf18>
   12ec4:	ldr	r0, [sp, #24]
   12ec8:	ldr	r1, [sp, #32]
   12ecc:	ldr	r2, [sp, #28]
   12ed0:	cmp	r0, #0
   12ed4:	str	r1, [r2]
   12ed8:	strne	r5, [r0]
   12edc:	mov	r0, r6
   12ee0:	sub	sp, fp, #28
   12ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12eec:	add	fp, sp, #24
   12ef0:	movw	r5, #24788	; 0x60d4
   12ef4:	movw	r8, #24784	; 0x60d0
   12ef8:	movt	r5, #2
   12efc:	movt	r8, #2
   12f00:	ldr	r0, [r5]
   12f04:	ldr	r4, [r8]
   12f08:	cmp	r0, #2
   12f0c:	blt	12f38 <__assert_fail@plt+0x2134>
   12f10:	add	r7, r4, #12
   12f14:	mov	r6, #0
   12f18:	ldr	r0, [r7, r6, lsl #3]
   12f1c:	bl	1470c <__assert_fail@plt+0x3908>
   12f20:	ldr	r1, [r5]
   12f24:	add	r2, r6, #2
   12f28:	add	r0, r6, #1
   12f2c:	mov	r6, r0
   12f30:	cmp	r2, r1
   12f34:	blt	12f18 <__assert_fail@plt+0x2114>
   12f38:	ldr	r0, [r4, #4]
   12f3c:	movw	r9, #24928	; 0x6160
   12f40:	movw	r7, #24792	; 0x60d8
   12f44:	movt	r9, #2
   12f48:	movt	r7, #2
   12f4c:	cmp	r0, r9
   12f50:	beq	12f60 <__assert_fail@plt+0x215c>
   12f54:	bl	1470c <__assert_fail@plt+0x3908>
   12f58:	mov	r0, #256	; 0x100
   12f5c:	stm	r7, {r0, r9}
   12f60:	cmp	r4, r7
   12f64:	beq	12f74 <__assert_fail@plt+0x2170>
   12f68:	mov	r0, r4
   12f6c:	bl	1470c <__assert_fail@plt+0x3908>
   12f70:	str	r7, [r8]
   12f74:	mov	r0, #1
   12f78:	str	r0, [r5]
   12f7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f80:	movw	r3, #24880	; 0x6130
   12f84:	mvn	r2, #0
   12f88:	movt	r3, #2
   12f8c:	b	12f90 <__assert_fail@plt+0x218c>
   12f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f94:	add	fp, sp, #28
   12f98:	sub	sp, sp, #44	; 0x2c
   12f9c:	mov	r7, r3
   12fa0:	str	r2, [sp, #36]	; 0x24
   12fa4:	str	r1, [sp, #32]
   12fa8:	mov	r5, r0
   12fac:	bl	10d50 <__errno_location@plt>
   12fb0:	cmp	r5, #0
   12fb4:	bmi	13124 <__assert_fail@plt+0x2320>
   12fb8:	cmn	r5, #-2147483647	; 0x80000001
   12fbc:	beq	13124 <__assert_fail@plt+0x2320>
   12fc0:	movw	r8, #24788	; 0x60d4
   12fc4:	movw	r4, #24784	; 0x60d0
   12fc8:	str	r0, [sp, #28]
   12fcc:	ldr	r0, [r0]
   12fd0:	movt	r8, #2
   12fd4:	movt	r4, #2
   12fd8:	ldr	r1, [r8]
   12fdc:	ldr	r6, [r4]
   12fe0:	str	r0, [sp, #24]
   12fe4:	cmp	r1, r5
   12fe8:	ble	12ff4 <__assert_fail@plt+0x21f0>
   12fec:	mov	sl, r6
   12ff0:	b	13060 <__assert_fail@plt+0x225c>
   12ff4:	movw	r9, #24792	; 0x60d8
   12ff8:	mov	r0, #8
   12ffc:	str	r1, [fp, #-32]	; 0xffffffe0
   13000:	sub	r1, r5, r1
   13004:	mvn	r3, #-2147483648	; 0x80000000
   13008:	movt	r9, #2
   1300c:	str	r0, [sp]
   13010:	add	r2, r1, #1
   13014:	sub	r1, fp, #32
   13018:	subs	r0, r6, r9
   1301c:	movne	r0, r6
   13020:	bl	14168 <__assert_fail@plt+0x3364>
   13024:	mov	sl, r0
   13028:	cmp	r6, r9
   1302c:	str	r0, [r4]
   13030:	bne	1303c <__assert_fail@plt+0x2238>
   13034:	ldrd	r0, [r9]
   13038:	stm	sl, {r0, r1}
   1303c:	ldr	r1, [r8]
   13040:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13044:	add	r0, sl, r1, lsl #3
   13048:	sub	r1, r2, r1
   1304c:	lsl	r2, r1, #3
   13050:	mov	r1, #0
   13054:	bl	10d68 <memset@plt>
   13058:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1305c:	str	r0, [r8]
   13060:	mov	r9, sl
   13064:	ldm	r7, {r0, r1}
   13068:	orr	r8, r1, #1
   1306c:	add	r1, r7, #8
   13070:	ldr	r2, [r7, #40]	; 0x28
   13074:	ldr	r3, [r7, #44]	; 0x2c
   13078:	ldr	r6, [r9, r5, lsl #3]!
   1307c:	str	r1, [sp, #20]
   13080:	ldr	r4, [r9, #4]!
   13084:	stm	sp, {r0, r8}
   13088:	add	r0, sp, #8
   1308c:	stm	r0, {r1, r2, r3}
   13090:	ldr	r2, [sp, #32]
   13094:	ldr	r3, [sp, #36]	; 0x24
   13098:	mov	r1, r6
   1309c:	mov	r0, r4
   130a0:	bl	11d1c <__assert_fail@plt+0xf18>
   130a4:	cmp	r6, r0
   130a8:	bhi	1310c <__assert_fail@plt+0x2308>
   130ac:	add	r6, r0, #1
   130b0:	movw	r0, #24928	; 0x6160
   130b4:	movt	r0, #2
   130b8:	str	r6, [sl, r5, lsl #3]
   130bc:	cmp	r4, r0
   130c0:	beq	130cc <__assert_fail@plt+0x22c8>
   130c4:	mov	r0, r4
   130c8:	bl	1470c <__assert_fail@plt+0x3908>
   130cc:	mov	r0, r6
   130d0:	bl	13f68 <__assert_fail@plt+0x3164>
   130d4:	str	r0, [r9]
   130d8:	mov	r4, r0
   130dc:	add	r3, sp, #8
   130e0:	ldr	r0, [r7]
   130e4:	ldr	r1, [r7, #40]	; 0x28
   130e8:	ldr	r2, [r7, #44]	; 0x2c
   130ec:	stm	sp, {r0, r8}
   130f0:	ldr	r0, [sp, #20]
   130f4:	stm	r3, {r0, r1, r2}
   130f8:	ldr	r2, [sp, #32]
   130fc:	ldr	r3, [sp, #36]	; 0x24
   13100:	mov	r0, r4
   13104:	mov	r1, r6
   13108:	bl	11d1c <__assert_fail@plt+0xf18>
   1310c:	ldr	r0, [sp, #28]
   13110:	ldr	r1, [sp, #24]
   13114:	str	r1, [r0]
   13118:	mov	r0, r4
   1311c:	sub	sp, fp, #28
   13120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13124:	bl	10df8 <abort@plt>
   13128:	movw	r3, #24880	; 0x6130
   1312c:	movt	r3, #2
   13130:	b	12f90 <__assert_fail@plt+0x218c>
   13134:	movw	r3, #24880	; 0x6130
   13138:	mov	r1, r0
   1313c:	mov	r0, #0
   13140:	mvn	r2, #0
   13144:	movt	r3, #2
   13148:	b	12f90 <__assert_fail@plt+0x218c>
   1314c:	movw	r3, #24880	; 0x6130
   13150:	mov	r2, r1
   13154:	mov	r1, r0
   13158:	mov	r0, #0
   1315c:	movt	r3, #2
   13160:	b	12f90 <__assert_fail@plt+0x218c>
   13164:	push	{fp, lr}
   13168:	mov	fp, sp
   1316c:	sub	sp, sp, #48	; 0x30
   13170:	vmov.i32	q8, #0	; 0x00000000
   13174:	mov	ip, #32
   13178:	mov	r3, sp
   1317c:	mov	lr, r2
   13180:	cmp	r1, #10
   13184:	add	r2, r3, #16
   13188:	vst1.64	{d16-d17}, [r3], ip
   1318c:	vst1.64	{d16-d17}, [r2]
   13190:	vst1.64	{d16-d17}, [r3]
   13194:	beq	131b4 <__assert_fail@plt+0x23b0>
   13198:	str	r1, [sp]
   1319c:	mov	r3, sp
   131a0:	mov	r1, lr
   131a4:	mvn	r2, #0
   131a8:	bl	12f90 <__assert_fail@plt+0x218c>
   131ac:	mov	sp, fp
   131b0:	pop	{fp, pc}
   131b4:	bl	10df8 <abort@plt>
   131b8:	push	{r4, sl, fp, lr}
   131bc:	add	fp, sp, #8
   131c0:	sub	sp, sp, #48	; 0x30
   131c4:	vmov.i32	q8, #0	; 0x00000000
   131c8:	mov	ip, r3
   131cc:	mov	r3, sp
   131d0:	mov	lr, #32
   131d4:	cmp	r1, #10
   131d8:	add	r4, r3, #16
   131dc:	vst1.64	{d16-d17}, [r3], lr
   131e0:	vst1.64	{d16-d17}, [r4]
   131e4:	vst1.64	{d16-d17}, [r3]
   131e8:	beq	13208 <__assert_fail@plt+0x2404>
   131ec:	str	r1, [sp]
   131f0:	mov	r1, r2
   131f4:	mov	r3, sp
   131f8:	mov	r2, ip
   131fc:	bl	12f90 <__assert_fail@plt+0x218c>
   13200:	sub	sp, fp, #8
   13204:	pop	{r4, sl, fp, pc}
   13208:	bl	10df8 <abort@plt>
   1320c:	push	{fp, lr}
   13210:	mov	fp, sp
   13214:	sub	sp, sp, #48	; 0x30
   13218:	vmov.i32	q8, #0	; 0x00000000
   1321c:	mov	r3, sp
   13220:	mov	ip, #32
   13224:	cmp	r0, #10
   13228:	add	r2, r3, #16
   1322c:	vst1.64	{d16-d17}, [r3], ip
   13230:	vst1.64	{d16-d17}, [r2]
   13234:	vst1.64	{d16-d17}, [r3]
   13238:	beq	13258 <__assert_fail@plt+0x2454>
   1323c:	str	r0, [sp]
   13240:	mov	r3, sp
   13244:	mov	r0, #0
   13248:	mvn	r2, #0
   1324c:	bl	12f90 <__assert_fail@plt+0x218c>
   13250:	mov	sp, fp
   13254:	pop	{fp, pc}
   13258:	bl	10df8 <abort@plt>
   1325c:	push	{fp, lr}
   13260:	mov	fp, sp
   13264:	sub	sp, sp, #48	; 0x30
   13268:	vmov.i32	q8, #0	; 0x00000000
   1326c:	mov	r3, sp
   13270:	mov	ip, #32
   13274:	cmp	r0, #10
   13278:	add	lr, r3, #16
   1327c:	vst1.64	{d16-d17}, [r3], ip
   13280:	vst1.64	{d16-d17}, [lr]
   13284:	vst1.64	{d16-d17}, [r3]
   13288:	beq	132a4 <__assert_fail@plt+0x24a0>
   1328c:	str	r0, [sp]
   13290:	mov	r3, sp
   13294:	mov	r0, #0
   13298:	bl	12f90 <__assert_fail@plt+0x218c>
   1329c:	mov	sp, fp
   132a0:	pop	{fp, pc}
   132a4:	bl	10df8 <abort@plt>
   132a8:	push	{r4, sl, fp, lr}
   132ac:	add	fp, sp, #8
   132b0:	sub	sp, sp, #48	; 0x30
   132b4:	mov	lr, r0
   132b8:	movw	r0, #24880	; 0x6130
   132bc:	mov	ip, r1
   132c0:	mov	r1, #32
   132c4:	mov	r4, #1
   132c8:	movt	r0, #2
   132cc:	add	r3, r0, #16
   132d0:	vld1.64	{d16-d17}, [r0], r1
   132d4:	vld1.64	{d20-d21}, [r0]
   132d8:	vld1.64	{d18-d19}, [r3]
   132dc:	mov	r3, sp
   132e0:	add	r0, r3, #32
   132e4:	add	r1, r3, #16
   132e8:	vst1.64	{d20-d21}, [r0]
   132ec:	mov	r0, #28
   132f0:	vst1.64	{d18-d19}, [r1]
   132f4:	mov	r1, r3
   132f8:	and	r0, r0, r2, lsr #3
   132fc:	and	r2, r2, #31
   13300:	vst1.64	{d16-d17}, [r1], r0
   13304:	ldr	r0, [r1, #8]
   13308:	bic	r4, r4, r0, lsr r2
   1330c:	eor	r0, r0, r4, lsl r2
   13310:	mov	r2, ip
   13314:	str	r0, [r1, #8]
   13318:	mov	r0, #0
   1331c:	mov	r1, lr
   13320:	bl	12f90 <__assert_fail@plt+0x218c>
   13324:	sub	sp, fp, #8
   13328:	pop	{r4, sl, fp, pc}
   1332c:	push	{fp, lr}
   13330:	mov	fp, sp
   13334:	sub	sp, sp, #48	; 0x30
   13338:	mov	ip, r0
   1333c:	movw	r0, #24880	; 0x6130
   13340:	mov	r2, #32
   13344:	movt	r0, #2
   13348:	add	r3, r0, #16
   1334c:	vld1.64	{d16-d17}, [r0], r2
   13350:	vld1.64	{d20-d21}, [r0]
   13354:	vld1.64	{d18-d19}, [r3]
   13358:	mov	r3, sp
   1335c:	add	r0, r3, #32
   13360:	add	r2, r3, #16
   13364:	vst1.64	{d20-d21}, [r0]
   13368:	mov	r0, #28
   1336c:	vst1.64	{d18-d19}, [r2]
   13370:	mov	r2, r3
   13374:	and	r0, r0, r1, lsr #3
   13378:	and	r1, r1, #31
   1337c:	vst1.64	{d16-d17}, [r2], r0
   13380:	mov	r0, #1
   13384:	ldr	lr, [r2, #8]
   13388:	bic	r0, r0, lr, lsr r1
   1338c:	eor	r0, lr, r0, lsl r1
   13390:	mov	r1, ip
   13394:	str	r0, [r2, #8]
   13398:	mov	r0, #0
   1339c:	mvn	r2, #0
   133a0:	bl	12f90 <__assert_fail@plt+0x218c>
   133a4:	mov	sp, fp
   133a8:	pop	{fp, pc}
   133ac:	push	{fp, lr}
   133b0:	mov	fp, sp
   133b4:	sub	sp, sp, #48	; 0x30
   133b8:	mov	r1, r0
   133bc:	movw	r0, #24880	; 0x6130
   133c0:	mov	r3, #32
   133c4:	movt	r0, #2
   133c8:	add	r2, r0, #16
   133cc:	vld1.64	{d16-d17}, [r0], r3
   133d0:	mov	r3, sp
   133d4:	vld1.64	{d18-d19}, [r2]
   133d8:	vld1.64	{d20-d21}, [r0]
   133dc:	add	r2, r3, #16
   133e0:	add	r0, r3, #32
   133e4:	vst1.64	{d18-d19}, [r2]
   133e8:	vst1.64	{d20-d21}, [r0]
   133ec:	mov	r0, #12
   133f0:	mov	r2, r3
   133f4:	vst1.64	{d16-d17}, [r2], r0
   133f8:	ldr	r0, [r2]
   133fc:	orr	r0, r0, #67108864	; 0x4000000
   13400:	str	r0, [r2]
   13404:	mov	r0, #0
   13408:	mvn	r2, #0
   1340c:	bl	12f90 <__assert_fail@plt+0x218c>
   13410:	mov	sp, fp
   13414:	pop	{fp, pc}
   13418:	push	{fp, lr}
   1341c:	mov	fp, sp
   13420:	sub	sp, sp, #48	; 0x30
   13424:	mov	ip, r1
   13428:	mov	r1, r0
   1342c:	movw	r0, #24880	; 0x6130
   13430:	mov	r2, #32
   13434:	movt	r0, #2
   13438:	add	r3, r0, #16
   1343c:	vld1.64	{d16-d17}, [r0], r2
   13440:	vld1.64	{d18-d19}, [r3]
   13444:	vld1.64	{d20-d21}, [r0]
   13448:	mov	r3, sp
   1344c:	add	r2, r3, #16
   13450:	add	r0, r3, #32
   13454:	vst1.64	{d18-d19}, [r2]
   13458:	vst1.64	{d20-d21}, [r0]
   1345c:	mov	r0, #12
   13460:	mov	r2, r3
   13464:	vst1.64	{d16-d17}, [r2], r0
   13468:	ldr	r0, [r2]
   1346c:	orr	r0, r0, #67108864	; 0x4000000
   13470:	str	r0, [r2]
   13474:	mov	r0, #0
   13478:	mov	r2, ip
   1347c:	bl	12f90 <__assert_fail@plt+0x218c>
   13480:	mov	sp, fp
   13484:	pop	{fp, pc}
   13488:	push	{r4, sl, fp, lr}
   1348c:	add	fp, sp, #8
   13490:	sub	sp, sp, #96	; 0x60
   13494:	vmov.i32	q8, #0	; 0x00000000
   13498:	mov	ip, r2
   1349c:	mov	r2, sp
   134a0:	mov	r4, #28
   134a4:	cmp	r1, #10
   134a8:	mov	r3, r2
   134ac:	add	lr, r2, #16
   134b0:	vst1.64	{d16-d17}, [r3], r4
   134b4:	vst1.64	{d16-d17}, [lr]
   134b8:	vst1.32	{d16-d17}, [r3]
   134bc:	beq	1350c <__assert_fail@plt+0x2708>
   134c0:	vld1.64	{d16-d17}, [r2], r4
   134c4:	vld1.64	{d18-d19}, [lr]
   134c8:	add	r3, sp, #48	; 0x30
   134cc:	vld1.32	{d20-d21}, [r2]
   134d0:	add	r2, r3, #20
   134d4:	add	r4, r3, #4
   134d8:	vst1.32	{d18-d19}, [r2]
   134dc:	add	r2, r3, #32
   134e0:	vst1.32	{d16-d17}, [r4]
   134e4:	vst1.32	{d20-d21}, [r2]
   134e8:	str	r1, [sp, #48]	; 0x30
   134ec:	mvn	r2, #0
   134f0:	ldr	r1, [sp, #60]	; 0x3c
   134f4:	orr	r1, r1, #67108864	; 0x4000000
   134f8:	str	r1, [sp, #60]	; 0x3c
   134fc:	mov	r1, ip
   13500:	bl	12f90 <__assert_fail@plt+0x218c>
   13504:	sub	sp, fp, #8
   13508:	pop	{r4, sl, fp, pc}
   1350c:	bl	10df8 <abort@plt>
   13510:	push	{r4, r5, r6, sl, fp, lr}
   13514:	add	fp, sp, #16
   13518:	sub	sp, sp, #48	; 0x30
   1351c:	mov	ip, r3
   13520:	movw	r3, #24880	; 0x6130
   13524:	mov	r6, #32
   13528:	cmp	r1, #0
   1352c:	mov	r4, sp
   13530:	movt	r3, #2
   13534:	cmpne	r2, #0
   13538:	add	r5, r4, #16
   1353c:	add	lr, r3, #16
   13540:	vld1.64	{d16-d17}, [r3], r6
   13544:	vld1.64	{d18-d19}, [lr]
   13548:	vld1.64	{d20-d21}, [r3]
   1354c:	mov	r3, #10
   13550:	vst1.64	{d16-d17}, [r4], r6
   13554:	vst1.64	{d18-d19}, [r5]
   13558:	vst1.64	{d20-d21}, [r4]
   1355c:	str	r3, [sp]
   13560:	bne	13568 <__assert_fail@plt+0x2764>
   13564:	bl	10df8 <abort@plt>
   13568:	str	r2, [sp, #44]	; 0x2c
   1356c:	str	r1, [sp, #40]	; 0x28
   13570:	mov	r3, sp
   13574:	mov	r1, ip
   13578:	mvn	r2, #0
   1357c:	bl	12f90 <__assert_fail@plt+0x218c>
   13580:	sub	sp, fp, #16
   13584:	pop	{r4, r5, r6, sl, fp, pc}
   13588:	push	{r4, r5, r6, sl, fp, lr}
   1358c:	add	fp, sp, #16
   13590:	sub	sp, sp, #48	; 0x30
   13594:	mov	lr, r3
   13598:	movw	r3, #24880	; 0x6130
   1359c:	mov	r6, #32
   135a0:	cmp	r1, #0
   135a4:	mov	r4, sp
   135a8:	movt	r3, #2
   135ac:	cmpne	r2, #0
   135b0:	add	r5, r4, #16
   135b4:	add	ip, r3, #16
   135b8:	vld1.64	{d16-d17}, [r3], r6
   135bc:	vld1.64	{d18-d19}, [ip]
   135c0:	vld1.64	{d20-d21}, [r3]
   135c4:	mov	r3, #10
   135c8:	vst1.64	{d16-d17}, [r4], r6
   135cc:	vst1.64	{d18-d19}, [r5]
   135d0:	vst1.64	{d20-d21}, [r4]
   135d4:	str	r3, [sp]
   135d8:	bne	135e0 <__assert_fail@plt+0x27dc>
   135dc:	bl	10df8 <abort@plt>
   135e0:	ldr	ip, [fp, #8]
   135e4:	str	r2, [sp, #44]	; 0x2c
   135e8:	str	r1, [sp, #40]	; 0x28
   135ec:	mov	r3, sp
   135f0:	mov	r1, lr
   135f4:	mov	r2, ip
   135f8:	bl	12f90 <__assert_fail@plt+0x218c>
   135fc:	sub	sp, fp, #16
   13600:	pop	{r4, r5, r6, sl, fp, pc}
   13604:	push	{r4, sl, fp, lr}
   13608:	add	fp, sp, #8
   1360c:	sub	sp, sp, #48	; 0x30
   13610:	movw	r3, #24880	; 0x6130
   13614:	mov	lr, #32
   13618:	mov	ip, r2
   1361c:	cmp	r0, #0
   13620:	movt	r3, #2
   13624:	cmpne	r1, #0
   13628:	add	r2, r3, #16
   1362c:	vld1.64	{d16-d17}, [r3], lr
   13630:	vld1.64	{d20-d21}, [r3]
   13634:	vld1.64	{d18-d19}, [r2]
   13638:	mov	r2, sp
   1363c:	add	r4, r2, #16
   13640:	vst1.64	{d16-d17}, [r2], lr
   13644:	vst1.64	{d20-d21}, [r2]
   13648:	mov	r2, #10
   1364c:	vst1.64	{d18-d19}, [r4]
   13650:	str	r2, [sp]
   13654:	bne	1365c <__assert_fail@plt+0x2858>
   13658:	bl	10df8 <abort@plt>
   1365c:	str	r1, [sp, #44]	; 0x2c
   13660:	str	r0, [sp, #40]	; 0x28
   13664:	mov	r3, sp
   13668:	mov	r0, #0
   1366c:	mov	r1, ip
   13670:	mvn	r2, #0
   13674:	bl	12f90 <__assert_fail@plt+0x218c>
   13678:	sub	sp, fp, #8
   1367c:	pop	{r4, sl, fp, pc}
   13680:	push	{r4, r5, fp, lr}
   13684:	add	fp, sp, #8
   13688:	sub	sp, sp, #48	; 0x30
   1368c:	mov	ip, r3
   13690:	movw	r3, #24880	; 0x6130
   13694:	mov	r4, #32
   13698:	mov	lr, r2
   1369c:	cmp	r0, #0
   136a0:	movt	r3, #2
   136a4:	cmpne	r1, #0
   136a8:	add	r2, r3, #16
   136ac:	vld1.64	{d16-d17}, [r3], r4
   136b0:	vld1.64	{d20-d21}, [r3]
   136b4:	vld1.64	{d18-d19}, [r2]
   136b8:	mov	r2, sp
   136bc:	add	r5, r2, #16
   136c0:	vst1.64	{d16-d17}, [r2], r4
   136c4:	vst1.64	{d20-d21}, [r2]
   136c8:	mov	r2, #10
   136cc:	vst1.64	{d18-d19}, [r5]
   136d0:	str	r2, [sp]
   136d4:	bne	136dc <__assert_fail@plt+0x28d8>
   136d8:	bl	10df8 <abort@plt>
   136dc:	str	r1, [sp, #44]	; 0x2c
   136e0:	str	r0, [sp, #40]	; 0x28
   136e4:	mov	r3, sp
   136e8:	mov	r0, #0
   136ec:	mov	r1, lr
   136f0:	mov	r2, ip
   136f4:	bl	12f90 <__assert_fail@plt+0x218c>
   136f8:	sub	sp, fp, #8
   136fc:	pop	{r4, r5, fp, pc}
   13700:	movw	r3, #24800	; 0x60e0
   13704:	movt	r3, #2
   13708:	b	12f90 <__assert_fail@plt+0x218c>
   1370c:	movw	r3, #24800	; 0x60e0
   13710:	mov	r2, r1
   13714:	mov	r1, r0
   13718:	mov	r0, #0
   1371c:	movt	r3, #2
   13720:	b	12f90 <__assert_fail@plt+0x218c>
   13724:	movw	r3, #24800	; 0x60e0
   13728:	mvn	r2, #0
   1372c:	movt	r3, #2
   13730:	b	12f90 <__assert_fail@plt+0x218c>
   13734:	movw	r3, #24800	; 0x60e0
   13738:	mov	r1, r0
   1373c:	mov	r0, #0
   13740:	mvn	r2, #0
   13744:	movt	r3, #2
   13748:	b	12f90 <__assert_fail@plt+0x218c>
   1374c:	push	{r4, r5, fp, lr}
   13750:	add	fp, sp, #8
   13754:	mov	r5, r0
   13758:	mov	r4, r1
   1375c:	mov	r0, #0
   13760:	mov	r2, #5
   13764:	mov	r1, r5
   13768:	bl	10c6c <dcgettext@plt>
   1376c:	cmp	r0, r5
   13770:	popne	{r4, r5, fp, pc}
   13774:	bl	147dc <__assert_fail@plt+0x39d8>
   13778:	ldrb	r1, [r0]
   1377c:	and	r1, r1, #223	; 0xdf
   13780:	cmp	r1, #71	; 0x47
   13784:	beq	137ec <__assert_fail@plt+0x29e8>
   13788:	cmp	r1, #85	; 0x55
   1378c:	bne	13844 <__assert_fail@plt+0x2a40>
   13790:	ldrb	r1, [r0, #1]
   13794:	and	r1, r1, #223	; 0xdf
   13798:	cmp	r1, #84	; 0x54
   1379c:	bne	13844 <__assert_fail@plt+0x2a40>
   137a0:	ldrb	r1, [r0, #2]
   137a4:	and	r1, r1, #223	; 0xdf
   137a8:	cmp	r1, #70	; 0x46
   137ac:	bne	13844 <__assert_fail@plt+0x2a40>
   137b0:	ldrb	r1, [r0, #3]
   137b4:	cmp	r1, #45	; 0x2d
   137b8:	bne	13844 <__assert_fail@plt+0x2a40>
   137bc:	ldrb	r1, [r0, #4]
   137c0:	cmp	r1, #56	; 0x38
   137c4:	bne	13844 <__assert_fail@plt+0x2a40>
   137c8:	ldrb	r0, [r0, #5]
   137cc:	cmp	r0, #0
   137d0:	bne	13844 <__assert_fail@plt+0x2a40>
   137d4:	ldrb	r1, [r5]
   137d8:	movw	r2, #20808	; 0x5148
   137dc:	movw	r0, #20812	; 0x514c
   137e0:	movt	r2, #1
   137e4:	movt	r0, #1
   137e8:	b	13874 <__assert_fail@plt+0x2a70>
   137ec:	ldrb	r1, [r0, #1]
   137f0:	and	r1, r1, #223	; 0xdf
   137f4:	cmp	r1, #66	; 0x42
   137f8:	bne	13844 <__assert_fail@plt+0x2a40>
   137fc:	ldrb	r1, [r0, #2]
   13800:	cmp	r1, #49	; 0x31
   13804:	bne	13844 <__assert_fail@plt+0x2a40>
   13808:	ldrb	r1, [r0, #3]
   1380c:	cmp	r1, #56	; 0x38
   13810:	bne	13844 <__assert_fail@plt+0x2a40>
   13814:	ldrb	r1, [r0, #4]
   13818:	cmp	r1, #48	; 0x30
   1381c:	bne	13844 <__assert_fail@plt+0x2a40>
   13820:	ldrb	r1, [r0, #5]
   13824:	cmp	r1, #51	; 0x33
   13828:	bne	13844 <__assert_fail@plt+0x2a40>
   1382c:	ldrb	r1, [r0, #6]
   13830:	cmp	r1, #48	; 0x30
   13834:	bne	13844 <__assert_fail@plt+0x2a40>
   13838:	ldrb	r0, [r0, #7]
   1383c:	cmp	r0, #0
   13840:	beq	13860 <__assert_fail@plt+0x2a5c>
   13844:	movw	r1, #20802	; 0x5142
   13848:	movw	r0, #20806	; 0x5146
   1384c:	cmp	r4, #9
   13850:	movt	r1, #1
   13854:	movt	r0, #1
   13858:	moveq	r0, r1
   1385c:	pop	{r4, r5, fp, pc}
   13860:	ldrb	r1, [r5]
   13864:	movw	r2, #20816	; 0x5150
   13868:	movw	r0, #20820	; 0x5154
   1386c:	movt	r2, #1
   13870:	movt	r0, #1
   13874:	cmp	r1, #96	; 0x60
   13878:	moveq	r0, r2
   1387c:	pop	{r4, r5, fp, pc}
   13880:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13884:	add	fp, sp, #24
   13888:	sub	sp, sp, #32
   1388c:	ldr	r6, [fp, #12]
   13890:	ldr	r7, [fp, #8]
   13894:	mov	r4, r2
   13898:	mov	r8, r0
   1389c:	cmp	r1, #0
   138a0:	beq	138c8 <__assert_fail@plt+0x2ac4>
   138a4:	movw	r2, #20908	; 0x51ac
   138a8:	mov	r5, r1
   138ac:	str	r3, [sp, #4]
   138b0:	str	r4, [sp]
   138b4:	mov	r0, r8
   138b8:	mov	r1, #1
   138bc:	movt	r2, #1
   138c0:	mov	r3, r5
   138c4:	b	138e0 <__assert_fail@plt+0x2adc>
   138c8:	movw	r2, #20920	; 0x51b8
   138cc:	str	r3, [sp]
   138d0:	mov	r0, r8
   138d4:	mov	r1, #1
   138d8:	mov	r3, r4
   138dc:	movt	r2, #1
   138e0:	bl	10d8c <__fprintf_chk@plt>
   138e4:	movw	r1, #20927	; 0x51bf
   138e8:	mov	r0, #0
   138ec:	mov	r2, #5
   138f0:	movt	r1, #1
   138f4:	bl	10c6c <dcgettext@plt>
   138f8:	movw	r2, #21645	; 0x548d
   138fc:	mov	r3, r0
   13900:	movw	r0, #2022	; 0x7e6
   13904:	mov	r1, #1
   13908:	movt	r2, #1
   1390c:	str	r0, [sp]
   13910:	mov	r0, r8
   13914:	bl	10d8c <__fprintf_chk@plt>
   13918:	movw	r4, #19518	; 0x4c3e
   1391c:	mov	r1, r8
   13920:	movt	r4, #1
   13924:	mov	r0, r4
   13928:	bl	10c18 <fputs_unlocked@plt>
   1392c:	movw	r1, #20931	; 0x51c3
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	movt	r1, #1
   1393c:	bl	10c6c <dcgettext@plt>
   13940:	movw	r3, #21102	; 0x526e
   13944:	mov	r2, r0
   13948:	mov	r0, r8
   1394c:	mov	r1, #1
   13950:	movt	r3, #1
   13954:	bl	10d8c <__fprintf_chk@plt>
   13958:	mov	r0, r4
   1395c:	mov	r1, r8
   13960:	bl	10c18 <fputs_unlocked@plt>
   13964:	cmp	r6, #9
   13968:	bhi	139a4 <__assert_fail@plt+0x2ba0>
   1396c:	add	r0, pc, #0
   13970:	ldr	pc, [r0, r6, lsl #2]
   13974:	muleq	r1, ip, r9
   13978:			; <UNDEFINED> instruction: 0x000139b0
   1397c:	andeq	r3, r1, r0, ror #19
   13980:	andeq	r3, r1, r8, lsl #20
   13984:	andeq	r3, r1, r0, lsr sl
   13988:	andeq	r3, r1, r8, asr sl
   1398c:	andeq	r3, r1, r0, lsl #21
   13990:			; <UNDEFINED> instruction: 0x00013ab8
   13994:	andeq	r3, r1, r8, asr fp
   13998:	andeq	r3, r1, r0, lsl #22
   1399c:	sub	sp, fp, #24
   139a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139a4:	movw	r1, #21455	; 0x53cf
   139a8:	movt	r1, #1
   139ac:	b	13b08 <__assert_fail@plt+0x2d04>
   139b0:	movw	r1, #21136	; 0x5290
   139b4:	mov	r0, #0
   139b8:	mov	r2, #5
   139bc:	movt	r1, #1
   139c0:	bl	10c6c <dcgettext@plt>
   139c4:	ldr	r3, [r7]
   139c8:	mov	r2, r0
   139cc:	mov	r0, r8
   139d0:	mov	r1, #1
   139d4:	sub	sp, fp, #24
   139d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   139dc:	b	10d8c <__fprintf_chk@plt>
   139e0:	movw	r1, #21152	; 0x52a0
   139e4:	mov	r0, #0
   139e8:	mov	r2, #5
   139ec:	movt	r1, #1
   139f0:	bl	10c6c <dcgettext@plt>
   139f4:	mov	r2, r0
   139f8:	ldr	r3, [r7]
   139fc:	ldr	r0, [r7, #4]
   13a00:	str	r0, [sp]
   13a04:	b	13af4 <__assert_fail@plt+0x2cf0>
   13a08:	movw	r1, #21175	; 0x52b7
   13a0c:	mov	r0, #0
   13a10:	mov	r2, #5
   13a14:	movt	r1, #1
   13a18:	bl	10c6c <dcgettext@plt>
   13a1c:	mov	r2, r0
   13a20:	ldr	r3, [r7]
   13a24:	ldmib	r7, {r0, r1}
   13a28:	stm	sp, {r0, r1}
   13a2c:	b	13af4 <__assert_fail@plt+0x2cf0>
   13a30:	movw	r1, #21203	; 0x52d3
   13a34:	mov	r0, #0
   13a38:	mov	r2, #5
   13a3c:	movt	r1, #1
   13a40:	bl	10c6c <dcgettext@plt>
   13a44:	ldr	r3, [r7]
   13a48:	mov	r2, r0
   13a4c:	ldmib	r7, {r0, r1, r7}
   13a50:	stm	sp, {r0, r1, r7}
   13a54:	b	13af4 <__assert_fail@plt+0x2cf0>
   13a58:	movw	r1, #21235	; 0x52f3
   13a5c:	mov	r0, #0
   13a60:	mov	r2, #5
   13a64:	movt	r1, #1
   13a68:	bl	10c6c <dcgettext@plt>
   13a6c:	ldr	r3, [r7]
   13a70:	mov	r2, r0
   13a74:	ldmib	r7, {r0, r1, r6, r7}
   13a78:	stm	sp, {r0, r1, r6, r7}
   13a7c:	b	13af4 <__assert_fail@plt+0x2cf0>
   13a80:	movw	r1, #21271	; 0x5317
   13a84:	mov	r0, #0
   13a88:	mov	r2, #5
   13a8c:	movt	r1, #1
   13a90:	bl	10c6c <dcgettext@plt>
   13a94:	mov	r2, r0
   13a98:	ldr	r3, [r7]
   13a9c:	ldmib	r7, {r0, r1, r6}
   13aa0:	ldr	r5, [r7, #16]
   13aa4:	ldr	r7, [r7, #20]
   13aa8:	stm	sp, {r0, r1, r6}
   13aac:	str	r5, [sp, #12]
   13ab0:	str	r7, [sp, #16]
   13ab4:	b	13af4 <__assert_fail@plt+0x2cf0>
   13ab8:	movw	r1, #21311	; 0x533f
   13abc:	mov	r0, #0
   13ac0:	mov	r2, #5
   13ac4:	movt	r1, #1
   13ac8:	bl	10c6c <dcgettext@plt>
   13acc:	mov	r2, r0
   13ad0:	ldr	r3, [r7]
   13ad4:	ldmib	r7, {r0, r1, r6}
   13ad8:	ldr	r5, [r7, #16]
   13adc:	ldr	r4, [r7, #20]
   13ae0:	ldr	r7, [r7, #24]
   13ae4:	stm	sp, {r0, r1, r6}
   13ae8:	str	r5, [sp, #12]
   13aec:	str	r4, [sp, #16]
   13af0:	str	r7, [sp, #20]
   13af4:	mov	r0, r8
   13af8:	mov	r1, #1
   13afc:	b	13ba8 <__assert_fail@plt+0x2da4>
   13b00:	movw	r1, #21403	; 0x539b
   13b04:	movt	r1, #1
   13b08:	mov	r0, #0
   13b0c:	mov	r2, #5
   13b10:	bl	10c6c <dcgettext@plt>
   13b14:	mov	ip, r0
   13b18:	ldr	r3, [r7]
   13b1c:	ldr	r0, [r7, #4]
   13b20:	ldr	r1, [r7, #8]
   13b24:	ldr	r6, [r7, #12]
   13b28:	ldr	r5, [r7, #16]
   13b2c:	ldr	r4, [r7, #20]
   13b30:	ldr	r2, [r7, #24]
   13b34:	ldr	lr, [r7, #28]
   13b38:	ldr	r7, [r7, #32]
   13b3c:	stm	sp, {r0, r1, r6}
   13b40:	str	r5, [sp, #12]
   13b44:	str	r4, [sp, #16]
   13b48:	str	r2, [sp, #20]
   13b4c:	str	lr, [sp, #24]
   13b50:	str	r7, [sp, #28]
   13b54:	b	13b9c <__assert_fail@plt+0x2d98>
   13b58:	movw	r1, #21355	; 0x536b
   13b5c:	mov	r0, #0
   13b60:	mov	r2, #5
   13b64:	movt	r1, #1
   13b68:	bl	10c6c <dcgettext@plt>
   13b6c:	mov	ip, r0
   13b70:	ldr	r3, [r7]
   13b74:	ldmib	r7, {r0, r1, r6}
   13b78:	ldr	r5, [r7, #16]
   13b7c:	ldr	r4, [r7, #20]
   13b80:	ldr	r2, [r7, #24]
   13b84:	ldr	r7, [r7, #28]
   13b88:	stm	sp, {r0, r1, r6}
   13b8c:	str	r5, [sp, #12]
   13b90:	str	r4, [sp, #16]
   13b94:	str	r2, [sp, #20]
   13b98:	str	r7, [sp, #24]
   13b9c:	mov	r0, r8
   13ba0:	mov	r1, #1
   13ba4:	mov	r2, ip
   13ba8:	bl	10d8c <__fprintf_chk@plt>
   13bac:	sub	sp, fp, #24
   13bb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bb4:	push	{r4, sl, fp, lr}
   13bb8:	add	fp, sp, #8
   13bbc:	sub	sp, sp, #8
   13bc0:	ldr	ip, [fp, #8]
   13bc4:	mov	lr, #0
   13bc8:	ldr	r4, [ip, lr, lsl #2]
   13bcc:	add	lr, lr, #1
   13bd0:	cmp	r4, #0
   13bd4:	bne	13bc8 <__assert_fail@plt+0x2dc4>
   13bd8:	sub	r4, lr, #1
   13bdc:	str	ip, [sp]
   13be0:	str	r4, [sp, #4]
   13be4:	bl	13880 <__assert_fail@plt+0x2a7c>
   13be8:	sub	sp, fp, #8
   13bec:	pop	{r4, sl, fp, pc}
   13bf0:	push	{fp, lr}
   13bf4:	mov	fp, sp
   13bf8:	sub	sp, sp, #48	; 0x30
   13bfc:	ldr	ip, [fp, #8]
   13c00:	ldr	lr, [ip]
   13c04:	cmp	lr, #0
   13c08:	str	lr, [sp, #8]
   13c0c:	beq	13ca8 <__assert_fail@plt+0x2ea4>
   13c10:	ldr	lr, [ip, #4]
   13c14:	cmp	lr, #0
   13c18:	str	lr, [sp, #12]
   13c1c:	beq	13cb0 <__assert_fail@plt+0x2eac>
   13c20:	ldr	lr, [ip, #8]
   13c24:	cmp	lr, #0
   13c28:	str	lr, [sp, #16]
   13c2c:	beq	13cb8 <__assert_fail@plt+0x2eb4>
   13c30:	ldr	lr, [ip, #12]
   13c34:	cmp	lr, #0
   13c38:	str	lr, [sp, #20]
   13c3c:	beq	13cc0 <__assert_fail@plt+0x2ebc>
   13c40:	ldr	lr, [ip, #16]
   13c44:	cmp	lr, #0
   13c48:	str	lr, [sp, #24]
   13c4c:	beq	13cc8 <__assert_fail@plt+0x2ec4>
   13c50:	ldr	lr, [ip, #20]
   13c54:	cmp	lr, #0
   13c58:	str	lr, [sp, #28]
   13c5c:	beq	13cd0 <__assert_fail@plt+0x2ecc>
   13c60:	ldr	lr, [ip, #24]
   13c64:	cmp	lr, #0
   13c68:	str	lr, [sp, #32]
   13c6c:	beq	13cd8 <__assert_fail@plt+0x2ed4>
   13c70:	ldr	lr, [ip, #28]
   13c74:	cmp	lr, #0
   13c78:	str	lr, [sp, #36]	; 0x24
   13c7c:	beq	13ce0 <__assert_fail@plt+0x2edc>
   13c80:	ldr	lr, [ip, #32]
   13c84:	cmp	lr, #0
   13c88:	str	lr, [sp, #40]	; 0x28
   13c8c:	beq	13ce8 <__assert_fail@plt+0x2ee4>
   13c90:	ldr	lr, [ip, #36]	; 0x24
   13c94:	mov	ip, #10
   13c98:	cmp	lr, #0
   13c9c:	str	lr, [sp, #44]	; 0x2c
   13ca0:	movweq	ip, #9
   13ca4:	b	13cec <__assert_fail@plt+0x2ee8>
   13ca8:	mov	ip, #0
   13cac:	b	13cec <__assert_fail@plt+0x2ee8>
   13cb0:	mov	ip, #1
   13cb4:	b	13cec <__assert_fail@plt+0x2ee8>
   13cb8:	mov	ip, #2
   13cbc:	b	13cec <__assert_fail@plt+0x2ee8>
   13cc0:	mov	ip, #3
   13cc4:	b	13cec <__assert_fail@plt+0x2ee8>
   13cc8:	mov	ip, #4
   13ccc:	b	13cec <__assert_fail@plt+0x2ee8>
   13cd0:	mov	ip, #5
   13cd4:	b	13cec <__assert_fail@plt+0x2ee8>
   13cd8:	mov	ip, #6
   13cdc:	b	13cec <__assert_fail@plt+0x2ee8>
   13ce0:	mov	ip, #7
   13ce4:	b	13cec <__assert_fail@plt+0x2ee8>
   13ce8:	mov	ip, #8
   13cec:	add	lr, sp, #8
   13cf0:	str	ip, [sp, #4]
   13cf4:	str	lr, [sp]
   13cf8:	bl	13880 <__assert_fail@plt+0x2a7c>
   13cfc:	mov	sp, fp
   13d00:	pop	{fp, pc}
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	sub	sp, sp, #56	; 0x38
   13d10:	add	ip, fp, #8
   13d14:	str	ip, [sp, #12]
   13d18:	ldr	lr, [fp, #8]
   13d1c:	cmp	lr, #0
   13d20:	str	lr, [sp, #16]
   13d24:	beq	13dc0 <__assert_fail@plt+0x2fbc>
   13d28:	ldr	lr, [ip, #4]
   13d2c:	cmp	lr, #0
   13d30:	str	lr, [sp, #20]
   13d34:	beq	13dc8 <__assert_fail@plt+0x2fc4>
   13d38:	ldr	lr, [ip, #8]
   13d3c:	cmp	lr, #0
   13d40:	str	lr, [sp, #24]
   13d44:	beq	13dd0 <__assert_fail@plt+0x2fcc>
   13d48:	ldr	lr, [ip, #12]
   13d4c:	cmp	lr, #0
   13d50:	str	lr, [sp, #28]
   13d54:	beq	13dd8 <__assert_fail@plt+0x2fd4>
   13d58:	ldr	lr, [ip, #16]
   13d5c:	cmp	lr, #0
   13d60:	str	lr, [sp, #32]
   13d64:	beq	13de0 <__assert_fail@plt+0x2fdc>
   13d68:	ldr	lr, [ip, #20]
   13d6c:	cmp	lr, #0
   13d70:	str	lr, [sp, #36]	; 0x24
   13d74:	beq	13de8 <__assert_fail@plt+0x2fe4>
   13d78:	ldr	lr, [ip, #24]
   13d7c:	cmp	lr, #0
   13d80:	str	lr, [sp, #40]	; 0x28
   13d84:	beq	13df0 <__assert_fail@plt+0x2fec>
   13d88:	ldr	lr, [ip, #28]
   13d8c:	cmp	lr, #0
   13d90:	str	lr, [sp, #44]	; 0x2c
   13d94:	beq	13df8 <__assert_fail@plt+0x2ff4>
   13d98:	ldr	lr, [ip, #32]
   13d9c:	cmp	lr, #0
   13da0:	str	lr, [sp, #48]	; 0x30
   13da4:	beq	13e00 <__assert_fail@plt+0x2ffc>
   13da8:	ldr	lr, [ip, #36]	; 0x24
   13dac:	mov	ip, #10
   13db0:	cmp	lr, #0
   13db4:	str	lr, [sp, #52]	; 0x34
   13db8:	movweq	ip, #9
   13dbc:	b	13e04 <__assert_fail@plt+0x3000>
   13dc0:	mov	ip, #0
   13dc4:	b	13e04 <__assert_fail@plt+0x3000>
   13dc8:	mov	ip, #1
   13dcc:	b	13e04 <__assert_fail@plt+0x3000>
   13dd0:	mov	ip, #2
   13dd4:	b	13e04 <__assert_fail@plt+0x3000>
   13dd8:	mov	ip, #3
   13ddc:	b	13e04 <__assert_fail@plt+0x3000>
   13de0:	mov	ip, #4
   13de4:	b	13e04 <__assert_fail@plt+0x3000>
   13de8:	mov	ip, #5
   13dec:	b	13e04 <__assert_fail@plt+0x3000>
   13df0:	mov	ip, #6
   13df4:	b	13e04 <__assert_fail@plt+0x3000>
   13df8:	mov	ip, #7
   13dfc:	b	13e04 <__assert_fail@plt+0x3000>
   13e00:	mov	ip, #8
   13e04:	add	lr, sp, #16
   13e08:	str	ip, [sp, #4]
   13e0c:	str	lr, [sp]
   13e10:	bl	13880 <__assert_fail@plt+0x2a7c>
   13e14:	mov	sp, fp
   13e18:	pop	{fp, pc}
   13e1c:	push	{fp, lr}
   13e20:	mov	fp, sp
   13e24:	movw	r0, #24860	; 0x611c
   13e28:	movt	r0, #2
   13e2c:	ldr	r1, [r0]
   13e30:	movw	r0, #19518	; 0x4c3e
   13e34:	movt	r0, #1
   13e38:	bl	10c18 <fputs_unlocked@plt>
   13e3c:	movw	r1, #21515	; 0x540b
   13e40:	mov	r0, #0
   13e44:	mov	r2, #5
   13e48:	movt	r1, #1
   13e4c:	bl	10c6c <dcgettext@plt>
   13e50:	movw	r2, #21535	; 0x541f
   13e54:	mov	r1, r0
   13e58:	mov	r0, #1
   13e5c:	movt	r2, #1
   13e60:	bl	10d74 <__printf_chk@plt>
   13e64:	movw	r1, #21557	; 0x5435
   13e68:	mov	r0, #0
   13e6c:	mov	r2, #5
   13e70:	movt	r1, #1
   13e74:	bl	10c6c <dcgettext@plt>
   13e78:	movw	r2, #20220	; 0x4efc
   13e7c:	movw	r3, #20373	; 0x4f95
   13e80:	mov	r1, r0
   13e84:	mov	r0, #1
   13e88:	movt	r2, #1
   13e8c:	movt	r3, #1
   13e90:	bl	10d74 <__printf_chk@plt>
   13e94:	movw	r1, #21577	; 0x5449
   13e98:	mov	r0, #0
   13e9c:	mov	r2, #5
   13ea0:	movt	r1, #1
   13ea4:	bl	10c6c <dcgettext@plt>
   13ea8:	movw	r2, #21616	; 0x5470
   13eac:	mov	r1, r0
   13eb0:	mov	r0, #1
   13eb4:	movt	r2, #1
   13eb8:	pop	{fp, lr}
   13ebc:	b	10d74 <__printf_chk@plt>
   13ec0:	push	{r4, r5, r6, sl, fp, lr}
   13ec4:	add	fp, sp, #16
   13ec8:	mov	r4, r2
   13ecc:	mov	r5, r1
   13ed0:	mov	r6, r0
   13ed4:	bl	14878 <__assert_fail@plt+0x3a74>
   13ed8:	cmp	r0, #0
   13edc:	popne	{r4, r5, r6, sl, fp, pc}
   13ee0:	cmp	r6, #0
   13ee4:	beq	13ef8 <__assert_fail@plt+0x30f4>
   13ee8:	cmp	r5, #0
   13eec:	cmpne	r4, #0
   13ef0:	bne	13ef8 <__assert_fail@plt+0x30f4>
   13ef4:	pop	{r4, r5, r6, sl, fp, pc}
   13ef8:	bl	14474 <__assert_fail@plt+0x3670>
   13efc:	push	{r4, r5, r6, sl, fp, lr}
   13f00:	add	fp, sp, #16
   13f04:	mov	r4, r2
   13f08:	mov	r5, r1
   13f0c:	mov	r6, r0
   13f10:	bl	14878 <__assert_fail@plt+0x3a74>
   13f14:	cmp	r0, #0
   13f18:	popne	{r4, r5, r6, sl, fp, pc}
   13f1c:	cmp	r6, #0
   13f20:	beq	13f34 <__assert_fail@plt+0x3130>
   13f24:	cmp	r5, #0
   13f28:	cmpne	r4, #0
   13f2c:	bne	13f34 <__assert_fail@plt+0x3130>
   13f30:	pop	{r4, r5, r6, sl, fp, pc}
   13f34:	bl	14474 <__assert_fail@plt+0x3670>
   13f38:	push	{fp, lr}
   13f3c:	mov	fp, sp
   13f40:	bl	1450c <__assert_fail@plt+0x3708>
   13f44:	cmp	r0, #0
   13f48:	popne	{fp, pc}
   13f4c:	bl	14474 <__assert_fail@plt+0x3670>
   13f50:	push	{fp, lr}
   13f54:	mov	fp, sp
   13f58:	bl	1450c <__assert_fail@plt+0x3708>
   13f5c:	cmp	r0, #0
   13f60:	popne	{fp, pc}
   13f64:	bl	14474 <__assert_fail@plt+0x3670>
   13f68:	push	{fp, lr}
   13f6c:	mov	fp, sp
   13f70:	bl	1450c <__assert_fail@plt+0x3708>
   13f74:	cmp	r0, #0
   13f78:	popne	{fp, pc}
   13f7c:	bl	14474 <__assert_fail@plt+0x3670>
   13f80:	push	{r4, r5, fp, lr}
   13f84:	add	fp, sp, #8
   13f88:	mov	r4, r1
   13f8c:	mov	r5, r0
   13f90:	bl	1453c <__assert_fail@plt+0x3738>
   13f94:	cmp	r0, #0
   13f98:	popne	{r4, r5, fp, pc}
   13f9c:	cmp	r5, #0
   13fa0:	beq	13fb0 <__assert_fail@plt+0x31ac>
   13fa4:	cmp	r4, #0
   13fa8:	bne	13fb0 <__assert_fail@plt+0x31ac>
   13fac:	pop	{r4, r5, fp, pc}
   13fb0:	bl	14474 <__assert_fail@plt+0x3670>
   13fb4:	push	{fp, lr}
   13fb8:	mov	fp, sp
   13fbc:	cmp	r1, #0
   13fc0:	orreq	r1, r1, #1
   13fc4:	bl	1453c <__assert_fail@plt+0x3738>
   13fc8:	cmp	r0, #0
   13fcc:	popne	{fp, pc}
   13fd0:	bl	14474 <__assert_fail@plt+0x3670>
   13fd4:	push	{fp, lr}
   13fd8:	mov	fp, sp
   13fdc:	clz	r3, r2
   13fe0:	lsr	ip, r3, #5
   13fe4:	clz	r3, r1
   13fe8:	lsr	r3, r3, #5
   13fec:	orrs	r3, r3, ip
   13ff0:	movwne	r1, #1
   13ff4:	movwne	r2, #1
   13ff8:	bl	14878 <__assert_fail@plt+0x3a74>
   13ffc:	cmp	r0, #0
   14000:	popne	{fp, pc}
   14004:	bl	14474 <__assert_fail@plt+0x3670>
   14008:	push	{fp, lr}
   1400c:	mov	fp, sp
   14010:	mov	r2, r1
   14014:	mov	r1, r0
   14018:	mov	r0, #0
   1401c:	bl	14878 <__assert_fail@plt+0x3a74>
   14020:	cmp	r0, #0
   14024:	popne	{fp, pc}
   14028:	bl	14474 <__assert_fail@plt+0x3670>
   1402c:	push	{fp, lr}
   14030:	mov	fp, sp
   14034:	mov	r2, r1
   14038:	mov	r1, r0
   1403c:	clz	r0, r2
   14040:	clz	r3, r1
   14044:	lsr	r0, r0, #5
   14048:	lsr	r3, r3, #5
   1404c:	orrs	r0, r3, r0
   14050:	mov	r0, #0
   14054:	movwne	r1, #1
   14058:	movwne	r2, #1
   1405c:	bl	14878 <__assert_fail@plt+0x3a74>
   14060:	cmp	r0, #0
   14064:	popne	{fp, pc}
   14068:	bl	14474 <__assert_fail@plt+0x3670>
   1406c:	push	{r4, r5, r6, sl, fp, lr}
   14070:	add	fp, sp, #16
   14074:	ldr	r5, [r1]
   14078:	mov	r4, r1
   1407c:	mov	r6, r0
   14080:	cmp	r0, #0
   14084:	beq	1409c <__assert_fail@plt+0x3298>
   14088:	mov	r0, #1
   1408c:	add	r0, r0, r5, lsr #1
   14090:	adds	r5, r5, r0
   14094:	bcc	140a4 <__assert_fail@plt+0x32a0>
   14098:	b	140e0 <__assert_fail@plt+0x32dc>
   1409c:	cmp	r5, #0
   140a0:	movweq	r5, #64	; 0x40
   140a4:	mov	r0, r6
   140a8:	mov	r1, r5
   140ac:	mov	r2, #1
   140b0:	bl	14878 <__assert_fail@plt+0x3a74>
   140b4:	cmp	r5, #0
   140b8:	mov	r1, r5
   140bc:	movwne	r1, #1
   140c0:	cmp	r0, #0
   140c4:	bne	140d8 <__assert_fail@plt+0x32d4>
   140c8:	clz	r2, r6
   140cc:	lsr	r2, r2, #5
   140d0:	orrs	r1, r2, r1
   140d4:	bne	140e0 <__assert_fail@plt+0x32dc>
   140d8:	str	r5, [r4]
   140dc:	pop	{r4, r5, r6, sl, fp, pc}
   140e0:	bl	14474 <__assert_fail@plt+0x3670>
   140e4:	push	{r4, r5, r6, r7, fp, lr}
   140e8:	add	fp, sp, #16
   140ec:	ldr	r5, [r1]
   140f0:	mov	r6, r2
   140f4:	mov	r4, r1
   140f8:	mov	r7, r0
   140fc:	cmp	r0, #0
   14100:	beq	14118 <__assert_fail@plt+0x3314>
   14104:	mov	r0, #1
   14108:	add	r0, r0, r5, lsr #1
   1410c:	adds	r5, r5, r0
   14110:	bcc	14130 <__assert_fail@plt+0x332c>
   14114:	b	14164 <__assert_fail@plt+0x3360>
   14118:	cmp	r5, #0
   1411c:	bne	14130 <__assert_fail@plt+0x332c>
   14120:	mov	r0, #64	; 0x40
   14124:	cmp	r6, #64	; 0x40
   14128:	udiv	r5, r0, r6
   1412c:	addhi	r5, r5, #1
   14130:	mov	r0, r7
   14134:	mov	r1, r5
   14138:	mov	r2, r6
   1413c:	bl	14878 <__assert_fail@plt+0x3a74>
   14140:	cmp	r0, #0
   14144:	bne	1415c <__assert_fail@plt+0x3358>
   14148:	cmp	r7, #0
   1414c:	beq	14164 <__assert_fail@plt+0x3360>
   14150:	cmp	r6, #0
   14154:	cmpne	r5, #0
   14158:	bne	14164 <__assert_fail@plt+0x3360>
   1415c:	str	r5, [r4]
   14160:	pop	{r4, r5, r6, r7, fp, pc}
   14164:	bl	14474 <__assert_fail@plt+0x3670>
   14168:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1416c:	add	fp, sp, #24
   14170:	mov	r8, r1
   14174:	ldr	r1, [r1]
   14178:	mov	r5, r0
   1417c:	add	r0, r1, r1, asr #1
   14180:	cmp	r0, r1
   14184:	mvnvs	r0, #-2147483648	; 0x80000000
   14188:	cmp	r0, r3
   1418c:	mov	r7, r0
   14190:	movgt	r7, r3
   14194:	cmn	r3, #1
   14198:	movle	r7, r0
   1419c:	ldr	r0, [fp, #8]
   141a0:	cmn	r0, #1
   141a4:	ble	141cc <__assert_fail@plt+0x33c8>
   141a8:	cmp	r0, #0
   141ac:	beq	14220 <__assert_fail@plt+0x341c>
   141b0:	cmn	r7, #1
   141b4:	ble	141f4 <__assert_fail@plt+0x33f0>
   141b8:	mvn	r4, #-2147483648	; 0x80000000
   141bc:	udiv	r6, r4, r0
   141c0:	cmp	r6, r7
   141c4:	bge	14220 <__assert_fail@plt+0x341c>
   141c8:	b	14230 <__assert_fail@plt+0x342c>
   141cc:	cmn	r7, #1
   141d0:	ble	14210 <__assert_fail@plt+0x340c>
   141d4:	cmn	r0, #1
   141d8:	beq	14220 <__assert_fail@plt+0x341c>
   141dc:	mov	r6, #-2147483648	; 0x80000000
   141e0:	mvn	r4, #-2147483648	; 0x80000000
   141e4:	sdiv	r6, r6, r0
   141e8:	cmp	r6, r7
   141ec:	bge	14220 <__assert_fail@plt+0x341c>
   141f0:	b	14230 <__assert_fail@plt+0x342c>
   141f4:	beq	14220 <__assert_fail@plt+0x341c>
   141f8:	mov	r6, #-2147483648	; 0x80000000
   141fc:	mvn	r4, #-2147483648	; 0x80000000
   14200:	sdiv	r6, r6, r7
   14204:	cmp	r6, r0
   14208:	bge	14220 <__assert_fail@plt+0x341c>
   1420c:	b	14230 <__assert_fail@plt+0x342c>
   14210:	mvn	r4, #-2147483648	; 0x80000000
   14214:	sdiv	r6, r4, r0
   14218:	cmp	r7, r6
   1421c:	blt	14230 <__assert_fail@plt+0x342c>
   14220:	mul	r6, r7, r0
   14224:	mov	r4, #64	; 0x40
   14228:	cmp	r6, #63	; 0x3f
   1422c:	bgt	14238 <__assert_fail@plt+0x3434>
   14230:	sdiv	r7, r4, r0
   14234:	mul	r6, r7, r0
   14238:	cmp	r5, #0
   1423c:	moveq	r4, #0
   14240:	streq	r4, [r8]
   14244:	sub	r4, r7, r1
   14248:	cmp	r4, r2
   1424c:	bge	142f8 <__assert_fail@plt+0x34f4>
   14250:	add	r7, r1, r2
   14254:	mov	r6, #0
   14258:	mov	r2, #0
   1425c:	cmp	r7, r3
   14260:	movwgt	r6, #1
   14264:	cmn	r3, #1
   14268:	movwgt	r2, #1
   1426c:	cmp	r7, r1
   14270:	bvs	1432c <__assert_fail@plt+0x3528>
   14274:	ands	r1, r2, r6
   14278:	bne	1432c <__assert_fail@plt+0x3528>
   1427c:	cmn	r0, #1
   14280:	ble	142a8 <__assert_fail@plt+0x34a4>
   14284:	cmp	r0, #0
   14288:	beq	142f4 <__assert_fail@plt+0x34f0>
   1428c:	cmn	r7, #1
   14290:	ble	142cc <__assert_fail@plt+0x34c8>
   14294:	mvn	r1, #-2147483648	; 0x80000000
   14298:	udiv	r1, r1, r0
   1429c:	cmp	r1, r7
   142a0:	bge	142f4 <__assert_fail@plt+0x34f0>
   142a4:	b	1432c <__assert_fail@plt+0x3528>
   142a8:	cmn	r7, #1
   142ac:	ble	142e4 <__assert_fail@plt+0x34e0>
   142b0:	cmn	r0, #1
   142b4:	beq	142f4 <__assert_fail@plt+0x34f0>
   142b8:	mov	r1, #-2147483648	; 0x80000000
   142bc:	sdiv	r1, r1, r0
   142c0:	cmp	r1, r7
   142c4:	bge	142f4 <__assert_fail@plt+0x34f0>
   142c8:	b	1432c <__assert_fail@plt+0x3528>
   142cc:	beq	142f4 <__assert_fail@plt+0x34f0>
   142d0:	mov	r1, #-2147483648	; 0x80000000
   142d4:	sdiv	r1, r1, r7
   142d8:	cmp	r1, r0
   142dc:	bge	142f4 <__assert_fail@plt+0x34f0>
   142e0:	b	1432c <__assert_fail@plt+0x3528>
   142e4:	mvn	r1, #-2147483648	; 0x80000000
   142e8:	sdiv	r1, r1, r0
   142ec:	cmp	r7, r1
   142f0:	blt	1432c <__assert_fail@plt+0x3528>
   142f4:	mul	r6, r7, r0
   142f8:	mov	r0, r5
   142fc:	mov	r1, r6
   14300:	bl	1453c <__assert_fail@plt+0x3738>
   14304:	cmp	r6, #0
   14308:	movwne	r6, #1
   1430c:	cmp	r0, #0
   14310:	bne	14324 <__assert_fail@plt+0x3520>
   14314:	clz	r1, r5
   14318:	lsr	r1, r1, #5
   1431c:	orrs	r1, r1, r6
   14320:	bne	1432c <__assert_fail@plt+0x3528>
   14324:	str	r7, [r8]
   14328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1432c:	bl	14474 <__assert_fail@plt+0x3670>
   14330:	push	{fp, lr}
   14334:	mov	fp, sp
   14338:	mov	r1, #1
   1433c:	bl	144b8 <__assert_fail@plt+0x36b4>
   14340:	cmp	r0, #0
   14344:	popne	{fp, pc}
   14348:	bl	14474 <__assert_fail@plt+0x3670>
   1434c:	push	{fp, lr}
   14350:	mov	fp, sp
   14354:	bl	144b8 <__assert_fail@plt+0x36b4>
   14358:	cmp	r0, #0
   1435c:	popne	{fp, pc}
   14360:	bl	14474 <__assert_fail@plt+0x3670>
   14364:	push	{fp, lr}
   14368:	mov	fp, sp
   1436c:	mov	r1, #1
   14370:	bl	144b8 <__assert_fail@plt+0x36b4>
   14374:	cmp	r0, #0
   14378:	popne	{fp, pc}
   1437c:	bl	14474 <__assert_fail@plt+0x3670>
   14380:	push	{fp, lr}
   14384:	mov	fp, sp
   14388:	bl	144b8 <__assert_fail@plt+0x36b4>
   1438c:	cmp	r0, #0
   14390:	popne	{fp, pc}
   14394:	bl	14474 <__assert_fail@plt+0x3670>
   14398:	push	{r4, r5, fp, lr}
   1439c:	add	fp, sp, #8
   143a0:	mov	r5, r0
   143a4:	mov	r0, r1
   143a8:	mov	r4, r1
   143ac:	bl	1450c <__assert_fail@plt+0x3708>
   143b0:	cmp	r0, #0
   143b4:	beq	143c8 <__assert_fail@plt+0x35c4>
   143b8:	mov	r1, r5
   143bc:	mov	r2, r4
   143c0:	pop	{r4, r5, fp, lr}
   143c4:	b	10c54 <memcpy@plt>
   143c8:	bl	14474 <__assert_fail@plt+0x3670>
   143cc:	push	{r4, r5, fp, lr}
   143d0:	add	fp, sp, #8
   143d4:	mov	r5, r0
   143d8:	mov	r0, r1
   143dc:	mov	r4, r1
   143e0:	bl	1450c <__assert_fail@plt+0x3708>
   143e4:	cmp	r0, #0
   143e8:	beq	143fc <__assert_fail@plt+0x35f8>
   143ec:	mov	r1, r5
   143f0:	mov	r2, r4
   143f4:	pop	{r4, r5, fp, lr}
   143f8:	b	10c54 <memcpy@plt>
   143fc:	bl	14474 <__assert_fail@plt+0x3670>
   14400:	push	{r4, r5, fp, lr}
   14404:	add	fp, sp, #8
   14408:	mov	r5, r0
   1440c:	add	r0, r1, #1
   14410:	mov	r4, r1
   14414:	bl	1450c <__assert_fail@plt+0x3708>
   14418:	cmp	r0, #0
   1441c:	beq	14438 <__assert_fail@plt+0x3634>
   14420:	mov	r1, #0
   14424:	mov	r2, r4
   14428:	strb	r1, [r0, r4]
   1442c:	mov	r1, r5
   14430:	pop	{r4, r5, fp, lr}
   14434:	b	10c54 <memcpy@plt>
   14438:	bl	14474 <__assert_fail@plt+0x3670>
   1443c:	push	{r4, r5, fp, lr}
   14440:	add	fp, sp, #8
   14444:	mov	r4, r0
   14448:	bl	10d44 <strlen@plt>
   1444c:	add	r5, r0, #1
   14450:	mov	r0, r5
   14454:	bl	1450c <__assert_fail@plt+0x3708>
   14458:	cmp	r0, #0
   1445c:	beq	14470 <__assert_fail@plt+0x366c>
   14460:	mov	r1, r4
   14464:	mov	r2, r5
   14468:	pop	{r4, r5, fp, lr}
   1446c:	b	10c54 <memcpy@plt>
   14470:	bl	14474 <__assert_fail@plt+0x3670>
   14474:	push	{fp, lr}
   14478:	mov	fp, sp
   1447c:	movw	r0, #24780	; 0x60cc
   14480:	movw	r1, #21692	; 0x54bc
   14484:	mov	r2, #5
   14488:	movt	r0, #2
   1448c:	movt	r1, #1
   14490:	ldr	r4, [r0]
   14494:	mov	r0, #0
   14498:	bl	10c6c <dcgettext@plt>
   1449c:	movw	r2, #20655	; 0x50af
   144a0:	mov	r3, r0
   144a4:	mov	r0, r4
   144a8:	mov	r1, #0
   144ac:	movt	r2, #1
   144b0:	bl	10cd8 <error@plt>
   144b4:	bl	10df8 <abort@plt>
   144b8:	clz	r2, r1
   144bc:	clz	r3, r0
   144c0:	lsr	r2, r2, #5
   144c4:	lsr	r3, r3, #5
   144c8:	orrs	r2, r3, r2
   144cc:	movwne	r1, #1
   144d0:	movwne	r0, #1
   144d4:	cmp	r1, #0
   144d8:	beq	14508 <__assert_fail@plt+0x3704>
   144dc:	mvn	r2, #-2147483648	; 0x80000000
   144e0:	udiv	r2, r2, r1
   144e4:	cmp	r2, r0
   144e8:	bcs	14508 <__assert_fail@plt+0x3704>
   144ec:	push	{fp, lr}
   144f0:	mov	fp, sp
   144f4:	bl	10d50 <__errno_location@plt>
   144f8:	mov	r1, #12
   144fc:	str	r1, [r0]
   14500:	mov	r0, #0
   14504:	pop	{fp, pc}
   14508:	b	10c0c <calloc@plt>
   1450c:	cmp	r0, #0
   14510:	movweq	r0, #1
   14514:	cmn	r0, #1
   14518:	ble	14520 <__assert_fail@plt+0x371c>
   1451c:	b	10cf0 <malloc@plt>
   14520:	push	{fp, lr}
   14524:	mov	fp, sp
   14528:	bl	10d50 <__errno_location@plt>
   1452c:	mov	r1, #12
   14530:	str	r1, [r0]
   14534:	mov	r0, #0
   14538:	pop	{fp, pc}
   1453c:	push	{fp, lr}
   14540:	mov	fp, sp
   14544:	cmp	r0, #0
   14548:	beq	14564 <__assert_fail@plt+0x3760>
   1454c:	cmp	r1, #0
   14550:	beq	14570 <__assert_fail@plt+0x376c>
   14554:	cmn	r1, #1
   14558:	ble	1457c <__assert_fail@plt+0x3778>
   1455c:	pop	{fp, lr}
   14560:	b	10c78 <realloc@plt>
   14564:	mov	r0, r1
   14568:	pop	{fp, lr}
   1456c:	b	1450c <__assert_fail@plt+0x3708>
   14570:	bl	1470c <__assert_fail@plt+0x3908>
   14574:	mov	r0, #0
   14578:	pop	{fp, pc}
   1457c:	bl	10d50 <__errno_location@plt>
   14580:	mov	r1, #12
   14584:	str	r1, [r0]
   14588:	mov	r0, #0
   1458c:	pop	{fp, pc}
   14590:	push	{r4, r5, r6, sl, fp, lr}
   14594:	add	fp, sp, #16
   14598:	mov	r4, r0
   1459c:	bl	10cc0 <__fpending@plt>
   145a0:	ldr	r6, [r4]
   145a4:	mov	r5, r0
   145a8:	mov	r0, r4
   145ac:	bl	14614 <__assert_fail@plt+0x3810>
   145b0:	tst	r6, #32
   145b4:	bne	145ec <__assert_fail@plt+0x37e8>
   145b8:	cmp	r0, #0
   145bc:	mov	r4, r0
   145c0:	mvnne	r4, #0
   145c4:	cmp	r5, #0
   145c8:	bne	145f8 <__assert_fail@plt+0x37f4>
   145cc:	cmp	r0, #0
   145d0:	beq	145f8 <__assert_fail@plt+0x37f4>
   145d4:	bl	10d50 <__errno_location@plt>
   145d8:	ldr	r0, [r0]
   145dc:	subs	r4, r0, #9
   145e0:	mvnne	r4, #0
   145e4:	mov	r0, r4
   145e8:	pop	{r4, r5, r6, sl, fp, pc}
   145ec:	mvn	r4, #0
   145f0:	cmp	r0, #0
   145f4:	beq	14600 <__assert_fail@plt+0x37fc>
   145f8:	mov	r0, r4
   145fc:	pop	{r4, r5, r6, sl, fp, pc}
   14600:	bl	10d50 <__errno_location@plt>
   14604:	mov	r1, #0
   14608:	str	r1, [r0]
   1460c:	mov	r0, r4
   14610:	pop	{r4, r5, r6, sl, fp, pc}
   14614:	push	{r4, r5, r6, sl, fp, lr}
   14618:	add	fp, sp, #16
   1461c:	sub	sp, sp, #8
   14620:	mov	r4, r0
   14624:	bl	10d80 <fileno@plt>
   14628:	cmn	r0, #1
   1462c:	ble	146a0 <__assert_fail@plt+0x389c>
   14630:	mov	r0, r4
   14634:	bl	10d08 <__freading@plt>
   14638:	cmp	r0, #0
   1463c:	beq	14668 <__assert_fail@plt+0x3864>
   14640:	mov	r0, r4
   14644:	bl	10d80 <fileno@plt>
   14648:	mov	r1, #1
   1464c:	mov	r2, #0
   14650:	mov	r3, #0
   14654:	str	r1, [sp]
   14658:	bl	10ca8 <lseek64@plt>
   1465c:	and	r0, r0, r1
   14660:	cmn	r0, #1
   14664:	beq	146a0 <__assert_fail@plt+0x389c>
   14668:	mov	r0, r4
   1466c:	bl	146b0 <__assert_fail@plt+0x38ac>
   14670:	cmp	r0, #0
   14674:	beq	146a0 <__assert_fail@plt+0x389c>
   14678:	bl	10d50 <__errno_location@plt>
   1467c:	ldr	r6, [r0]
   14680:	mov	r5, r0
   14684:	mov	r0, r4
   14688:	bl	10d98 <fclose@plt>
   1468c:	cmp	r6, #0
   14690:	strne	r6, [r5]
   14694:	mvnne	r0, #0
   14698:	sub	sp, fp, #16
   1469c:	pop	{r4, r5, r6, sl, fp, pc}
   146a0:	mov	r0, r4
   146a4:	sub	sp, fp, #16
   146a8:	pop	{r4, r5, r6, sl, fp, lr}
   146ac:	b	10d98 <fclose@plt>
   146b0:	push	{r4, sl, fp, lr}
   146b4:	add	fp, sp, #8
   146b8:	sub	sp, sp, #8
   146bc:	mov	r4, r0
   146c0:	cmp	r0, #0
   146c4:	beq	146fc <__assert_fail@plt+0x38f8>
   146c8:	mov	r0, r4
   146cc:	bl	10d08 <__freading@plt>
   146d0:	cmp	r0, #0
   146d4:	beq	146fc <__assert_fail@plt+0x38f8>
   146d8:	ldrb	r0, [r4, #1]
   146dc:	tst	r0, #1
   146e0:	beq	146fc <__assert_fail@plt+0x38f8>
   146e4:	mov	r0, #1
   146e8:	mov	r2, #0
   146ec:	mov	r3, #0
   146f0:	str	r0, [sp]
   146f4:	mov	r0, r4
   146f8:	bl	14734 <__assert_fail@plt+0x3930>
   146fc:	mov	r0, r4
   14700:	sub	sp, fp, #8
   14704:	pop	{r4, sl, fp, lr}
   14708:	b	10c30 <fflush@plt>
   1470c:	push	{r4, r5, r6, sl, fp, lr}
   14710:	add	fp, sp, #16
   14714:	mov	r4, r0
   14718:	bl	10d50 <__errno_location@plt>
   1471c:	ldr	r6, [r0]
   14720:	mov	r5, r0
   14724:	mov	r0, r4
   14728:	bl	10c3c <free@plt>
   1472c:	str	r6, [r5]
   14730:	pop	{r4, r5, r6, sl, fp, pc}
   14734:	push	{r4, r5, r6, r7, fp, lr}
   14738:	add	fp, sp, #16
   1473c:	sub	sp, sp, #8
   14740:	mov	r4, r0
   14744:	ldr	r0, [r0, #4]
   14748:	mov	r5, r3
   1474c:	mov	r6, r2
   14750:	ldr	r1, [r4, #8]
   14754:	cmp	r1, r0
   14758:	bne	14774 <__assert_fail@plt+0x3970>
   1475c:	ldrd	r0, [r4, #16]
   14760:	cmp	r1, r0
   14764:	bne	14774 <__assert_fail@plt+0x3970>
   14768:	ldr	r0, [r4, #36]	; 0x24
   1476c:	cmp	r0, #0
   14770:	beq	1478c <__assert_fail@plt+0x3988>
   14774:	mov	r0, r4
   14778:	mov	r2, r6
   1477c:	mov	r3, r5
   14780:	sub	sp, fp, #16
   14784:	pop	{r4, r5, r6, r7, fp, lr}
   14788:	b	10da4 <fseeko64@plt>
   1478c:	ldr	r7, [fp, #8]
   14790:	mov	r0, r4
   14794:	bl	10d80 <fileno@plt>
   14798:	mov	r2, r6
   1479c:	mov	r3, r5
   147a0:	str	r7, [sp]
   147a4:	bl	10ca8 <lseek64@plt>
   147a8:	and	r2, r0, r1
   147ac:	cmn	r2, #1
   147b0:	beq	147d0 <__assert_fail@plt+0x39cc>
   147b4:	strd	r0, [r4, #80]	; 0x50
   147b8:	ldr	r0, [r4]
   147bc:	bic	r0, r0, #16
   147c0:	str	r0, [r4]
   147c4:	mov	r0, #0
   147c8:	sub	sp, fp, #16
   147cc:	pop	{r4, r5, r6, r7, fp, pc}
   147d0:	mvn	r0, #0
   147d4:	sub	sp, fp, #16
   147d8:	pop	{r4, r5, r6, r7, fp, pc}
   147dc:	push	{fp, lr}
   147e0:	mov	fp, sp
   147e4:	mov	r0, #14
   147e8:	bl	10dd4 <nl_langinfo@plt>
   147ec:	movw	r1, #19519	; 0x4c3f
   147f0:	cmp	r0, #0
   147f4:	movt	r1, #1
   147f8:	movne	r1, r0
   147fc:	movw	r0, #21709	; 0x54cd
   14800:	ldrb	r2, [r1]
   14804:	movt	r0, #1
   14808:	cmp	r2, #0
   1480c:	movne	r0, r1
   14810:	pop	{fp, pc}
   14814:	push	{r4, r5, r6, r7, fp, lr}
   14818:	add	fp, sp, #16
   1481c:	sub	sp, sp, #8
   14820:	cmp	r0, #0
   14824:	add	r5, sp, #4
   14828:	mov	r7, r2
   1482c:	mov	r4, r1
   14830:	movne	r5, r0
   14834:	mov	r0, r5
   14838:	bl	10ccc <mbrtowc@plt>
   1483c:	mov	r6, r0
   14840:	cmp	r7, #0
   14844:	beq	1486c <__assert_fail@plt+0x3a68>
   14848:	cmn	r6, #2
   1484c:	bcc	1486c <__assert_fail@plt+0x3a68>
   14850:	mov	r0, #0
   14854:	bl	148b4 <__assert_fail@plt+0x3ab0>
   14858:	cmp	r0, #0
   1485c:	bne	1486c <__assert_fail@plt+0x3a68>
   14860:	ldrb	r0, [r4]
   14864:	mov	r6, #1
   14868:	str	r0, [r5]
   1486c:	mov	r0, r6
   14870:	sub	sp, fp, #16
   14874:	pop	{r4, r5, r6, r7, fp, pc}
   14878:	cmp	r2, #0
   1487c:	beq	148ac <__assert_fail@plt+0x3aa8>
   14880:	mvn	r3, #0
   14884:	udiv	r3, r3, r2
   14888:	cmp	r3, r1
   1488c:	bcs	148ac <__assert_fail@plt+0x3aa8>
   14890:	push	{fp, lr}
   14894:	mov	fp, sp
   14898:	bl	10d50 <__errno_location@plt>
   1489c:	mov	r1, #12
   148a0:	str	r1, [r0]
   148a4:	mov	r0, #0
   148a8:	pop	{fp, pc}
   148ac:	mul	r1, r2, r1
   148b0:	b	1453c <__assert_fail@plt+0x3738>
   148b4:	push	{r4, sl, fp, lr}
   148b8:	add	fp, sp, #8
   148bc:	sub	sp, sp, #264	; 0x108
   148c0:	add	r1, sp, #7
   148c4:	movw	r2, #257	; 0x101
   148c8:	bl	14920 <__assert_fail@plt+0x3b1c>
   148cc:	mov	r4, #0
   148d0:	cmp	r0, #0
   148d4:	bne	14914 <__assert_fail@plt+0x3b10>
   148d8:	movw	r1, #21715	; 0x54d3
   148dc:	add	r0, sp, #7
   148e0:	mov	r2, #2
   148e4:	movt	r1, #1
   148e8:	bl	10d38 <bcmp@plt>
   148ec:	cmp	r0, #0
   148f0:	beq	14914 <__assert_fail@plt+0x3b10>
   148f4:	movw	r1, #21717	; 0x54d5
   148f8:	add	r0, sp, #7
   148fc:	mov	r2, #6
   14900:	movt	r1, #1
   14904:	bl	10d38 <bcmp@plt>
   14908:	cmp	r0, #0
   1490c:	mov	r4, r0
   14910:	movwne	r4, #1
   14914:	mov	r0, r4
   14918:	sub	sp, fp, #8
   1491c:	pop	{r4, sl, fp, pc}
   14920:	push	{r4, r5, r6, r7, fp, lr}
   14924:	add	fp, sp, #16
   14928:	mov	r4, r1
   1492c:	mov	r1, #0
   14930:	mov	r6, r2
   14934:	bl	10dbc <setlocale@plt>
   14938:	cmp	r0, #0
   1493c:	beq	1496c <__assert_fail@plt+0x3b68>
   14940:	mov	r7, r0
   14944:	bl	10d44 <strlen@plt>
   14948:	cmp	r0, r6
   1494c:	bcs	14988 <__assert_fail@plt+0x3b84>
   14950:	add	r2, r0, #1
   14954:	mov	r0, r4
   14958:	mov	r1, r7
   1495c:	bl	10c54 <memcpy@plt>
   14960:	mov	r5, #0
   14964:	mov	r0, r5
   14968:	pop	{r4, r5, r6, r7, fp, pc}
   1496c:	mov	r5, #22
   14970:	cmp	r6, #0
   14974:	beq	149b0 <__assert_fail@plt+0x3bac>
   14978:	mov	r0, #0
   1497c:	strb	r0, [r4]
   14980:	mov	r0, r5
   14984:	pop	{r4, r5, r6, r7, fp, pc}
   14988:	mov	r5, #34	; 0x22
   1498c:	cmp	r6, #0
   14990:	beq	149b0 <__assert_fail@plt+0x3bac>
   14994:	sub	r6, r6, #1
   14998:	mov	r0, r4
   1499c:	mov	r1, r7
   149a0:	mov	r2, r6
   149a4:	bl	10c54 <memcpy@plt>
   149a8:	mov	r0, #0
   149ac:	strb	r0, [r4, r6]
   149b0:	mov	r0, r5
   149b4:	pop	{r4, r5, r6, r7, fp, pc}
   149b8:	mov	r1, #0
   149bc:	b	10dbc <setlocale@plt>
   149c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149c4:	mov	r7, r0
   149c8:	ldr	r6, [pc, #72]	; 14a18 <__assert_fail@plt+0x3c14>
   149cc:	ldr	r5, [pc, #72]	; 14a1c <__assert_fail@plt+0x3c18>
   149d0:	add	r6, pc, r6
   149d4:	add	r5, pc, r5
   149d8:	sub	r6, r6, r5
   149dc:	mov	r8, r1
   149e0:	mov	r9, r2
   149e4:	bl	10bec <calloc@plt-0x20>
   149e8:	asrs	r6, r6, #2
   149ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   149f0:	mov	r4, #0
   149f4:	add	r4, r4, #1
   149f8:	ldr	r3, [r5], #4
   149fc:	mov	r2, r9
   14a00:	mov	r1, r8
   14a04:	mov	r0, r7
   14a08:	blx	r3
   14a0c:	cmp	r6, r4
   14a10:	bne	149f4 <__assert_fail@plt+0x3bf0>
   14a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a18:	andeq	r1, r1, r4, lsr r5
   14a1c:	andeq	r1, r1, ip, lsr #10
   14a20:	bx	lr
   14a24:	ldr	r3, [pc, #12]	; 14a38 <__assert_fail@plt+0x3c34>
   14a28:	mov	r1, #0
   14a2c:	add	r3, pc, r3
   14a30:	ldr	r2, [r3]
   14a34:	b	10d5c <__cxa_atexit@plt>
   14a38:	muleq	r1, r0, r6

Disassembly of section .fini:

00014a3c <.fini>:
   14a3c:	push	{r3, lr}
   14a40:	pop	{r3, pc}
