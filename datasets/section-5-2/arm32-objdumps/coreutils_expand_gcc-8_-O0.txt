
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c44 <.init>:
   10c44:	push	{r3, lr}
   10c48:	bl	10f04 <__assert_fail@plt+0x48>
   10c4c:	pop	{r3, pc}

Disassembly of section .plt:

00010c50 <calloc@plt-0x14>:
   10c50:	push	{lr}		; (str lr, [sp, #-4]!)
   10c54:	ldr	lr, [pc, #4]	; 10c60 <calloc@plt-0x4>
   10c58:	add	lr, pc, lr
   10c5c:	ldr	pc, [lr, #8]!
   10c60:	andeq	r8, r1, r0, lsr #7

00010c64 <calloc@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c70 <fputs_unlocked@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #920]!	; 0x398

00010c7c <raise@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #912]!	; 0x390

00010c88 <strcmp@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #904]!	; 0x388

00010c94 <posix_fadvise64@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #896]!	; 0x380

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #888]!	; 0x378

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #880]!	; 0x370

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #872]!	; 0x368

00010cc4 <_exit@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #864]!	; 0x360

00010cd0 <memcpy@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #856]!	; 0x358

00010cdc <mbsinit@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #848]!	; 0x350

00010ce8 <memcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #840]!	; 0x348

00010cf4 <fputc_unlocked@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #832]!	; 0x340

00010d00 <getc_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #824]!	; 0x338

00010d0c <realloc@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #816]!	; 0x330

00010d18 <textdomain@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #808]!	; 0x328

00010d24 <iswprint@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #800]!	; 0x320

00010d30 <fwrite@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #792]!	; 0x318

00010d3c <lseek64@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #784]!	; 0x310

00010d48 <__ctype_get_mb_cur_max@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #776]!	; 0x308

00010d54 <__fpending@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #768]!	; 0x300

00010d60 <ferror_unlocked@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #760]!	; 0x2f8

00010d6c <mbrtowc@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #752]!	; 0x2f0

00010d78 <error@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #744]!	; 0x2e8

00010d84 <malloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d90 <__libc_start_main@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #728]!	; 0x2d8

00010d9c <__freading@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #720]!	; 0x2d0

00010da8 <__gmon_start__@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #712]!	; 0x2c8

00010db4 <getopt_long@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dc0 <__ctype_b_loc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dcc <exit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd8 <gettext@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #680]!	; 0x2a8

00010de4 <strlen@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #672]!	; 0x2a0

00010df0 <fprintf@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #664]!	; 0x298

00010dfc <__errno_location@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #656]!	; 0x290

00010e08 <__cxa_atexit@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #648]!	; 0x288

00010e14 <memset@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #640]!	; 0x280

00010e20 <fileno@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #632]!	; 0x278

00010e2c <fclose@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #624]!	; 0x270

00010e38 <fseeko64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #616]!	; 0x268

00010e44 <setlocale@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #608]!	; 0x260

00010e50 <strrchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #600]!	; 0x258

00010e5c <nl_langinfo@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #592]!	; 0x250

00010e68 <clearerr_unlocked@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #584]!	; 0x248

00010e74 <fopen64@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #576]!	; 0x240

00010e80 <bindtextdomain@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #568]!	; 0x238

00010e8c <strncmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #560]!	; 0x230

00010e98 <abort@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #552]!	; 0x228

00010ea4 <putchar_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #544]!	; 0x220

00010eb0 <strspn@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #536]!	; 0x218

00010ebc <__assert_fail@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #528]!	; 0x210

Disassembly of section .text:

00010ec8 <.text>:
   10ec8:	mov	fp, #0
   10ecc:	mov	lr, #0
   10ed0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ed4:	mov	r2, sp
   10ed8:	push	{r2}		; (str r2, [sp, #-4]!)
   10edc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee0:	ldr	ip, [pc, #16]	; 10ef8 <__assert_fail@plt+0x3c>
   10ee4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ee8:	ldr	r0, [pc, #12]	; 10efc <__assert_fail@plt+0x40>
   10eec:	ldr	r3, [pc, #12]	; 10f00 <__assert_fail@plt+0x44>
   10ef0:	bl	10d90 <__libc_start_main@plt>
   10ef4:	bl	10e98 <abort@plt>
   10ef8:	andeq	r7, r1, ip, lsr r9
   10efc:	andeq	r1, r1, r4, asr r6
   10f00:	ldrdeq	r7, [r1], -ip
   10f04:	ldr	r3, [pc, #20]	; 10f20 <__assert_fail@plt+0x64>
   10f08:	ldr	r2, [pc, #20]	; 10f24 <__assert_fail@plt+0x68>
   10f0c:	add	r3, pc, r3
   10f10:	ldr	r2, [r3, r2]
   10f14:	cmp	r2, #0
   10f18:	bxeq	lr
   10f1c:	b	10da8 <__gmon_start__@plt>
   10f20:	andeq	r8, r1, ip, ror #1
   10f24:	ldrdeq	r0, [r0], -r8
   10f28:	ldr	r0, [pc, #24]	; 10f48 <__assert_fail@plt+0x8c>
   10f2c:	ldr	r3, [pc, #24]	; 10f4c <__assert_fail@plt+0x90>
   10f30:	cmp	r3, r0
   10f34:	bxeq	lr
   10f38:	ldr	r3, [pc, #16]	; 10f50 <__assert_fail@plt+0x94>
   10f3c:	cmp	r3, #0
   10f40:	bxeq	lr
   10f44:	bx	r3
   10f48:	andeq	r9, r2, r4, lsr r1
   10f4c:	andeq	r9, r2, r4, lsr r1
   10f50:	andeq	r0, r0, r0
   10f54:	ldr	r0, [pc, #36]	; 10f80 <__assert_fail@plt+0xc4>
   10f58:	ldr	r1, [pc, #36]	; 10f84 <__assert_fail@plt+0xc8>
   10f5c:	sub	r1, r1, r0
   10f60:	asr	r1, r1, #2
   10f64:	add	r1, r1, r1, lsr #31
   10f68:	asrs	r1, r1, #1
   10f6c:	bxeq	lr
   10f70:	ldr	r3, [pc, #16]	; 10f88 <__assert_fail@plt+0xcc>
   10f74:	cmp	r3, #0
   10f78:	bxeq	lr
   10f7c:	bx	r3
   10f80:	andeq	r9, r2, r4, lsr r1
   10f84:	andeq	r9, r2, r4, lsr r1
   10f88:	andeq	r0, r0, r0
   10f8c:	push	{r4, lr}
   10f90:	ldr	r4, [pc, #24]	; 10fb0 <__assert_fail@plt+0xf4>
   10f94:	ldrb	r3, [r4]
   10f98:	cmp	r3, #0
   10f9c:	popne	{r4, pc}
   10fa0:	bl	10f28 <__assert_fail@plt+0x6c>
   10fa4:	mov	r3, #1
   10fa8:	strb	r3, [r4]
   10fac:	pop	{r4, pc}
   10fb0:	andeq	r9, r2, ip, asr r1
   10fb4:	b	10f54 <__assert_fail@plt+0x98>
   10fb8:	str	fp, [sp, #-8]!
   10fbc:	str	lr, [sp, #4]
   10fc0:	add	fp, sp, #4
   10fc4:	movw	r0, #31076	; 0x7964
   10fc8:	movt	r0, #1
   10fcc:	bl	10dd8 <gettext@plt>
   10fd0:	mov	r2, r0
   10fd4:	movw	r3, #37204	; 0x9154
   10fd8:	movt	r3, #2
   10fdc:	ldr	r3, [r3]
   10fe0:	mov	r1, r3
   10fe4:	mov	r0, r2
   10fe8:	bl	10c70 <fputs_unlocked@plt>
   10fec:	nop	{0}
   10ff0:	sub	sp, fp, #4
   10ff4:	ldr	fp, [sp]
   10ff8:	add	sp, sp, #4
   10ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   11000:	str	fp, [sp, #-8]!
   11004:	str	lr, [sp, #4]
   11008:	add	fp, sp, #4
   1100c:	movw	r0, #31132	; 0x799c
   11010:	movt	r0, #1
   11014:	bl	10dd8 <gettext@plt>
   11018:	mov	r2, r0
   1101c:	movw	r3, #37204	; 0x9154
   11020:	movt	r3, #2
   11024:	ldr	r3, [r3]
   11028:	mov	r1, r3
   1102c:	mov	r0, r2
   11030:	bl	10c70 <fputs_unlocked@plt>
   11034:	nop	{0}
   11038:	sub	sp, fp, #4
   1103c:	ldr	fp, [sp]
   11040:	add	sp, sp, #4
   11044:	pop	{pc}		; (ldr pc, [sp], #4)
   11048:	str	fp, [sp, #-8]!
   1104c:	str	lr, [sp, #4]
   11050:	add	fp, sp, #4
   11054:	sub	sp, sp, #80	; 0x50
   11058:	str	r0, [fp, #-80]	; 0xffffffb0
   1105c:	movw	r2, #31580	; 0x7b5c
   11060:	movt	r2, #1
   11064:	sub	r3, fp, #72	; 0x48
   11068:	ldrd	r0, [r2]
   1106c:	strd	r0, [r3]
   11070:	ldrd	r0, [r2, #8]
   11074:	strd	r0, [r3, #8]
   11078:	ldrd	r0, [r2, #16]
   1107c:	strd	r0, [r3, #16]
   11080:	ldrd	r0, [r2, #24]
   11084:	strd	r0, [r3, #24]
   11088:	ldrd	r0, [r2, #32]
   1108c:	strd	r0, [r3, #32]
   11090:	ldrd	r0, [r2, #40]	; 0x28
   11094:	strd	r0, [r3, #40]	; 0x28
   11098:	ldrd	r0, [r2, #48]	; 0x30
   1109c:	strd	r0, [r3, #48]	; 0x30
   110a0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   110a4:	str	r3, [fp, #-8]
   110a8:	sub	r3, fp, #72	; 0x48
   110ac:	str	r3, [fp, #-12]
   110b0:	b	110c0 <__assert_fail@plt+0x204>
   110b4:	ldr	r3, [fp, #-12]
   110b8:	add	r3, r3, #8
   110bc:	str	r3, [fp, #-12]
   110c0:	ldr	r3, [fp, #-12]
   110c4:	ldr	r3, [r3]
   110c8:	cmp	r3, #0
   110cc:	beq	110f0 <__assert_fail@plt+0x234>
   110d0:	ldr	r3, [fp, #-12]
   110d4:	ldr	r3, [r3]
   110d8:	mov	r1, r3
   110dc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   110e0:	bl	10c88 <strcmp@plt>
   110e4:	mov	r3, r0
   110e8:	cmp	r3, #0
   110ec:	bne	110b4 <__assert_fail@plt+0x1f8>
   110f0:	ldr	r3, [fp, #-12]
   110f4:	ldr	r3, [r3, #4]
   110f8:	cmp	r3, #0
   110fc:	beq	1110c <__assert_fail@plt+0x250>
   11100:	ldr	r3, [fp, #-12]
   11104:	ldr	r3, [r3, #4]
   11108:	str	r3, [fp, #-8]
   1110c:	movw	r0, #31208	; 0x79e8
   11110:	movt	r0, #1
   11114:	bl	10dd8 <gettext@plt>
   11118:	mov	r3, r0
   1111c:	movw	r2, #31232	; 0x7a00
   11120:	movt	r2, #1
   11124:	movw	r1, #31272	; 0x7a28
   11128:	movt	r1, #1
   1112c:	mov	r0, r3
   11130:	bl	10ca0 <printf@plt>
   11134:	mov	r1, #0
   11138:	mov	r0, #5
   1113c:	bl	10e44 <setlocale@plt>
   11140:	str	r0, [fp, #-16]
   11144:	ldr	r3, [fp, #-16]
   11148:	cmp	r3, #0
   1114c:	beq	11198 <__assert_fail@plt+0x2dc>
   11150:	mov	r2, #3
   11154:	movw	r1, #31288	; 0x7a38
   11158:	movt	r1, #1
   1115c:	ldr	r0, [fp, #-16]
   11160:	bl	10e8c <strncmp@plt>
   11164:	mov	r3, r0
   11168:	cmp	r3, #0
   1116c:	beq	11198 <__assert_fail@plt+0x2dc>
   11170:	movw	r0, #31292	; 0x7a3c
   11174:	movt	r0, #1
   11178:	bl	10dd8 <gettext@plt>
   1117c:	mov	r2, r0
   11180:	movw	r3, #37204	; 0x9154
   11184:	movt	r3, #2
   11188:	ldr	r3, [r3]
   1118c:	mov	r1, r3
   11190:	mov	r0, r2
   11194:	bl	10c70 <fputs_unlocked@plt>
   11198:	movw	r0, #31364	; 0x7a84
   1119c:	movt	r0, #1
   111a0:	bl	10dd8 <gettext@plt>
   111a4:	mov	r3, r0
   111a8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   111ac:	movw	r1, #31232	; 0x7a00
   111b0:	movt	r1, #1
   111b4:	mov	r0, r3
   111b8:	bl	10ca0 <printf@plt>
   111bc:	movw	r0, #31392	; 0x7aa0
   111c0:	movt	r0, #1
   111c4:	bl	10dd8 <gettext@plt>
   111c8:	ldr	r2, [fp, #-8]
   111cc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   111d0:	cmp	r2, r3
   111d4:	bne	111e4 <__assert_fail@plt+0x328>
   111d8:	movw	r3, #31444	; 0x7ad4
   111dc:	movt	r3, #1
   111e0:	b	111ec <__assert_fail@plt+0x330>
   111e4:	movw	r3, #31456	; 0x7ae0
   111e8:	movt	r3, #1
   111ec:	mov	r2, r3
   111f0:	ldr	r1, [fp, #-8]
   111f4:	bl	10ca0 <printf@plt>
   111f8:	nop	{0}
   111fc:	sub	sp, fp, #4
   11200:	ldr	fp, [sp]
   11204:	add	sp, sp, #4
   11208:	pop	{pc}		; (ldr pc, [sp], #4)
   1120c:	str	r4, [sp, #-12]!
   11210:	str	fp, [sp, #4]
   11214:	str	lr, [sp, #8]
   11218:	add	fp, sp, #8
   1121c:	sub	sp, sp, #12
   11220:	str	r0, [fp, #-16]
   11224:	ldr	r3, [fp, #-16]
   11228:	cmp	r3, #0
   1122c:	beq	11268 <__assert_fail@plt+0x3ac>
   11230:	movw	r3, #37192	; 0x9148
   11234:	movt	r3, #2
   11238:	ldr	r4, [r3]
   1123c:	movw	r0, #31784	; 0x7c28
   11240:	movt	r0, #1
   11244:	bl	10dd8 <gettext@plt>
   11248:	mov	r1, r0
   1124c:	movw	r3, #37288	; 0x91a8
   11250:	movt	r3, #2
   11254:	ldr	r3, [r3]
   11258:	mov	r2, r3
   1125c:	mov	r0, r4
   11260:	bl	10df0 <fprintf@plt>
   11264:	b	11348 <__assert_fail@plt+0x48c>
   11268:	movw	r0, #31824	; 0x7c50
   1126c:	movt	r0, #1
   11270:	bl	10dd8 <gettext@plt>
   11274:	mov	r2, r0
   11278:	movw	r3, #37288	; 0x91a8
   1127c:	movt	r3, #2
   11280:	ldr	r3, [r3]
   11284:	mov	r1, r3
   11288:	mov	r0, r2
   1128c:	bl	10ca0 <printf@plt>
   11290:	movw	r0, #31860	; 0x7c74
   11294:	movt	r0, #1
   11298:	bl	10dd8 <gettext@plt>
   1129c:	mov	r2, r0
   112a0:	movw	r3, #37204	; 0x9154
   112a4:	movt	r3, #2
   112a8:	ldr	r3, [r3]
   112ac:	mov	r1, r3
   112b0:	mov	r0, r2
   112b4:	bl	10c70 <fputs_unlocked@plt>
   112b8:	bl	10fb8 <__assert_fail@plt+0xfc>
   112bc:	bl	11000 <__assert_fail@plt+0x144>
   112c0:	movw	r0, #31928	; 0x7cb8
   112c4:	movt	r0, #1
   112c8:	bl	10dd8 <gettext@plt>
   112cc:	mov	r2, r0
   112d0:	movw	r3, #37204	; 0x9154
   112d4:	movt	r3, #2
   112d8:	ldr	r3, [r3]
   112dc:	mov	r1, r3
   112e0:	mov	r0, r2
   112e4:	bl	10c70 <fputs_unlocked@plt>
   112e8:	bl	1284c <__assert_fail@plt+0x1990>
   112ec:	movw	r0, #32040	; 0x7d28
   112f0:	movt	r0, #1
   112f4:	bl	10dd8 <gettext@plt>
   112f8:	mov	r2, r0
   112fc:	movw	r3, #37204	; 0x9154
   11300:	movt	r3, #2
   11304:	ldr	r3, [r3]
   11308:	mov	r1, r3
   1130c:	mov	r0, r2
   11310:	bl	10c70 <fputs_unlocked@plt>
   11314:	movw	r0, #32088	; 0x7d58
   11318:	movt	r0, #1
   1131c:	bl	10dd8 <gettext@plt>
   11320:	mov	r2, r0
   11324:	movw	r3, #37204	; 0x9154
   11328:	movt	r3, #2
   1132c:	ldr	r3, [r3]
   11330:	mov	r1, r3
   11334:	mov	r0, r2
   11338:	bl	10c70 <fputs_unlocked@plt>
   1133c:	movw	r0, #32144	; 0x7d90
   11340:	movt	r0, #1
   11344:	bl	11048 <__assert_fail@plt+0x18c>
   11348:	ldr	r0, [fp, #-16]
   1134c:	bl	10dcc <exit@plt>
   11350:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11354:	strd	r6, [sp, #8]
   11358:	strd	r8, [sp, #16]
   1135c:	strd	sl, [sp, #24]
   11360:	str	lr, [sp, #32]
   11364:	add	fp, sp, #32
   11368:	sub	sp, sp, #52	; 0x34
   1136c:	mov	r0, #0
   11370:	bl	12594 <__assert_fail@plt+0x16d8>
   11374:	str	r0, [fp, #-40]	; 0xffffffd8
   11378:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1137c:	cmp	r3, #0
   11380:	beq	1162c <__assert_fail@plt+0x770>
   11384:	mov	r3, #1
   11388:	strb	r3, [fp, #-45]	; 0xffffffd3
   1138c:	mov	r2, #0
   11390:	mov	r3, #0
   11394:	strd	r2, [fp, #-60]	; 0xffffffc4
   11398:	mov	r3, #0
   1139c:	str	r3, [fp, #-72]	; 0xffffffb8
   113a0:	b	113a8 <__assert_fail@plt+0x4ec>
   113a4:	nop	{0}
   113a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   113ac:	bl	10d00 <getc_unlocked@plt>
   113b0:	str	r0, [fp, #-44]	; 0xffffffd4
   113b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   113b8:	cmp	r3, #0
   113bc:	bge	113d8 <__assert_fail@plt+0x51c>
   113c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   113c4:	bl	12594 <__assert_fail@plt+0x16d8>
   113c8:	str	r0, [fp, #-40]	; 0xffffffd8
   113cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   113d0:	cmp	r3, #0
   113d4:	bne	113a4 <__assert_fail@plt+0x4e8>
   113d8:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   113dc:	cmp	r3, #0
   113e0:	beq	115d0 <__assert_fail@plt+0x714>
   113e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   113e8:	cmp	r3, #9
   113ec:	bne	114c4 <__assert_fail@plt+0x608>
   113f0:	sub	r3, fp, #73	; 0x49
   113f4:	sub	r2, fp, #72	; 0x48
   113f8:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   113fc:	bl	12304 <__assert_fail@plt+0x1448>
   11400:	strd	r0, [fp, #-68]	; 0xffffffbc
   11404:	ldrb	r3, [fp, #-73]	; 0xffffffb7
   11408:	cmp	r3, #0
   1140c:	beq	11420 <__assert_fail@plt+0x564>
   11410:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11414:	adds	r4, r2, #1
   11418:	adc	r5, r3, #0
   1141c:	strd	r4, [fp, #-68]	; 0xffffffbc
   11420:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11424:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11428:	cmp	r1, r3
   1142c:	cmpeq	r0, r2
   11430:	bcs	11494 <__assert_fail@plt+0x5d8>
   11434:	movw	r0, #32152	; 0x7d98
   11438:	movt	r0, #1
   1143c:	bl	10dd8 <gettext@plt>
   11440:	mov	r3, r0
   11444:	mov	r2, r3
   11448:	mov	r1, #0
   1144c:	mov	r0, #1
   11450:	bl	10d78 <error@plt>
   11454:	mov	r0, #32
   11458:	bl	10ea4 <putchar_unlocked@plt>
   1145c:	mov	r3, r0
   11460:	cmp	r3, #0
   11464:	bge	11494 <__assert_fail@plt+0x5d8>
   11468:	bl	10dfc <__errno_location@plt>
   1146c:	mov	r3, r0
   11470:	ldr	r4, [r3]
   11474:	movw	r0, #32176	; 0x7db0
   11478:	movt	r0, #1
   1147c:	bl	10dd8 <gettext@plt>
   11480:	mov	r3, r0
   11484:	mov	r2, r3
   11488:	mov	r1, r4
   1148c:	mov	r0, #1
   11490:	bl	10d78 <error@plt>
   11494:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11498:	adds	r6, r2, #1
   1149c:	adc	r7, r3, #0
   114a0:	strd	r6, [fp, #-60]	; 0xffffffc4
   114a4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   114a8:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   114ac:	cmp	r1, r3
   114b0:	cmpeq	r0, r2
   114b4:	bcc	11454 <__assert_fail@plt+0x598>
   114b8:	mov	r3, #32
   114bc:	str	r3, [fp, #-44]	; 0xffffffd4
   114c0:	b	11570 <__assert_fail@plt+0x6b4>
   114c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   114c8:	cmp	r3, #8
   114cc:	bne	11528 <__assert_fail@plt+0x66c>
   114d0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   114d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   114d8:	orr	r3, r2, r3
   114dc:	cmp	r3, #0
   114e0:	movne	r3, #1
   114e4:	moveq	r3, #0
   114e8:	uxtb	r3, r3
   114ec:	uxtb	r2, r3
   114f0:	mov	r3, #0
   114f4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   114f8:	subs	r8, r0, r2
   114fc:	sbc	r9, r1, r3
   11500:	strd	r8, [fp, #-60]	; 0xffffffc4
   11504:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11508:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1150c:	cmp	r2, #0
   11510:	movne	r2, #1
   11514:	moveq	r2, #0
   11518:	uxtb	r2, r2
   1151c:	sub	r3, r3, r2
   11520:	str	r3, [fp, #-72]	; 0xffffffb8
   11524:	b	11570 <__assert_fail@plt+0x6b4>
   11528:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1152c:	adds	r1, r2, #1
   11530:	str	r1, [fp, #-84]	; 0xffffffac
   11534:	adc	r3, r3, #0
   11538:	str	r3, [fp, #-80]	; 0xffffffb0
   1153c:	ldrd	r2, [fp, #-84]	; 0xffffffac
   11540:	strd	r2, [fp, #-60]	; 0xffffffc4
   11544:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11548:	orrs	r3, r2, r3
   1154c:	bne	11570 <__assert_fail@plt+0x6b4>
   11550:	movw	r0, #32152	; 0x7d98
   11554:	movt	r0, #1
   11558:	bl	10dd8 <gettext@plt>
   1155c:	mov	r3, r0
   11560:	mov	r2, r3
   11564:	mov	r1, #0
   11568:	mov	r0, #1
   1156c:	bl	10d78 <error@plt>
   11570:	ldrb	sl, [fp, #-45]	; 0xffffffd3
   11574:	movw	r3, #37216	; 0x9160
   11578:	movt	r3, #2
   1157c:	ldrb	r3, [r3]
   11580:	cmp	r3, #0
   11584:	bne	115b0 <__assert_fail@plt+0x6f4>
   11588:	bl	10dc0 <__ctype_b_loc@plt>
   1158c:	mov	r3, r0
   11590:	ldr	r2, [r3]
   11594:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11598:	lsl	r3, r3, #1
   1159c:	add	r3, r2, r3
   115a0:	ldrh	r3, [r3]
   115a4:	and	r3, r3, #1
   115a8:	cmp	r3, #0
   115ac:	beq	115b8 <__assert_fail@plt+0x6fc>
   115b0:	mov	r3, #1
   115b4:	b	115bc <__assert_fail@plt+0x700>
   115b8:	mov	r3, #0
   115bc:	and	r3, r3, sl
   115c0:	cmp	r3, #0
   115c4:	movne	r3, #1
   115c8:	moveq	r3, #0
   115cc:	strb	r3, [fp, #-45]	; 0xffffffd3
   115d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115d4:	cmp	r3, #0
   115d8:	blt	11634 <__assert_fail@plt+0x778>
   115dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   115e0:	bl	10ea4 <putchar_unlocked@plt>
   115e4:	mov	r3, r0
   115e8:	cmp	r3, #0
   115ec:	bge	1161c <__assert_fail@plt+0x760>
   115f0:	bl	10dfc <__errno_location@plt>
   115f4:	mov	r3, r0
   115f8:	ldr	r4, [r3]
   115fc:	movw	r0, #32176	; 0x7db0
   11600:	movt	r0, #1
   11604:	bl	10dd8 <gettext@plt>
   11608:	mov	r3, r0
   1160c:	mov	r2, r3
   11610:	mov	r1, r4
   11614:	mov	r0, #1
   11618:	bl	10d78 <error@plt>
   1161c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11620:	cmp	r3, #10
   11624:	bne	113a8 <__assert_fail@plt+0x4ec>
   11628:	b	11384 <__assert_fail@plt+0x4c8>
   1162c:	nop	{0}
   11630:	b	11638 <__assert_fail@plt+0x77c>
   11634:	nop	{0}
   11638:	sub	sp, fp, #32
   1163c:	ldrd	r4, [sp]
   11640:	ldrd	r6, [sp, #8]
   11644:	ldrd	r8, [sp, #16]
   11648:	ldrd	sl, [sp, #24]
   1164c:	add	sp, sp, #32
   11650:	pop	{pc}		; (ldr pc, [sp], #4)
   11654:	str	fp, [sp, #-8]!
   11658:	str	lr, [sp, #4]
   1165c:	add	fp, sp, #4
   11660:	sub	sp, sp, #24
   11664:	str	r0, [fp, #-16]
   11668:	str	r1, [fp, #-20]	; 0xffffffec
   1166c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11670:	ldr	r3, [r3]
   11674:	mov	r0, r3
   11678:	bl	12e7c <__assert_fail@plt+0x1fc0>
   1167c:	movw	r1, #31456	; 0x7ae0
   11680:	movt	r1, #1
   11684:	mov	r0, #6
   11688:	bl	10e44 <setlocale@plt>
   1168c:	movw	r1, #32188	; 0x7dbc
   11690:	movt	r1, #1
   11694:	movw	r0, #31480	; 0x7af8
   11698:	movt	r0, #1
   1169c:	bl	10e80 <bindtextdomain@plt>
   116a0:	movw	r0, #31480	; 0x7af8
   116a4:	movt	r0, #1
   116a8:	bl	10d18 <textdomain@plt>
   116ac:	movw	r0, #10528	; 0x2920
   116b0:	movt	r0, #1
   116b4:	bl	17940 <__assert_fail@plt+0x6a84>
   116b8:	movw	r3, #37216	; 0x9160
   116bc:	movt	r3, #2
   116c0:	mov	r2, #1
   116c4:	strb	r2, [r3]
   116c8:	b	117f8 <__assert_fail@plt+0x93c>
   116cc:	ldr	r3, [fp, #-8]
   116d0:	cmp	r3, #57	; 0x39
   116d4:	bgt	11700 <__assert_fail@plt+0x844>
   116d8:	ldr	r3, [fp, #-8]
   116dc:	cmp	r3, #48	; 0x30
   116e0:	bge	11748 <__assert_fail@plt+0x88c>
   116e4:	ldr	r3, [fp, #-8]
   116e8:	cmn	r3, #3
   116ec:	beq	117a4 <__assert_fail@plt+0x8e8>
   116f0:	ldr	r3, [fp, #-8]
   116f4:	cmn	r3, #2
   116f8:	beq	1179c <__assert_fail@plt+0x8e0>
   116fc:	b	117f0 <__assert_fail@plt+0x934>
   11700:	ldr	r3, [fp, #-8]
   11704:	cmp	r3, #105	; 0x69
   11708:	beq	1171c <__assert_fail@plt+0x860>
   1170c:	ldr	r3, [fp, #-8]
   11710:	cmp	r3, #116	; 0x74
   11714:	beq	11730 <__assert_fail@plt+0x874>
   11718:	b	117f0 <__assert_fail@plt+0x934>
   1171c:	movw	r3, #37216	; 0x9160
   11720:	movt	r3, #2
   11724:	mov	r2, #0
   11728:	strb	r2, [r3]
   1172c:	b	117f8 <__assert_fail@plt+0x93c>
   11730:	movw	r3, #37208	; 0x9158
   11734:	movt	r3, #2
   11738:	ldr	r3, [r3]
   1173c:	mov	r0, r3
   11740:	bl	11b64 <__assert_fail@plt+0xca8>
   11744:	b	117f8 <__assert_fail@plt+0x93c>
   11748:	movw	r3, #37208	; 0x9158
   1174c:	movt	r3, #2
   11750:	ldr	r3, [r3]
   11754:	cmp	r3, #0
   11758:	beq	11778 <__assert_fail@plt+0x8bc>
   1175c:	movw	r3, #37208	; 0x9158
   11760:	movt	r3, #2
   11764:	ldr	r3, [r3]
   11768:	sub	r3, r3, #1
   1176c:	mov	r0, r3
   11770:	bl	11b64 <__assert_fail@plt+0xca8>
   11774:	b	117f8 <__assert_fail@plt+0x93c>
   11778:	ldr	r3, [fp, #-8]
   1177c:	uxtb	r3, r3
   11780:	strb	r3, [fp, #-12]
   11784:	mov	r3, #0
   11788:	strb	r3, [fp, #-11]
   1178c:	sub	r3, fp, #12
   11790:	mov	r0, r3
   11794:	bl	11b64 <__assert_fail@plt+0xca8>
   11798:	b	117f8 <__assert_fail@plt+0x93c>
   1179c:	mov	r0, #0
   117a0:	bl	1120c <__assert_fail@plt+0x350>
   117a4:	movw	r3, #37204	; 0x9154
   117a8:	movt	r3, #2
   117ac:	ldr	r0, [r3]
   117b0:	movw	r3, #37100	; 0x90ec
   117b4:	movt	r3, #2
   117b8:	ldr	r2, [r3]
   117bc:	mov	r3, #0
   117c0:	str	r3, [sp, #4]
   117c4:	movw	r3, #32212	; 0x7dd4
   117c8:	movt	r3, #1
   117cc:	str	r3, [sp]
   117d0:	mov	r3, r2
   117d4:	movw	r2, #31272	; 0x7a28
   117d8:	movt	r2, #1
   117dc:	movw	r1, #32144	; 0x7d90
   117e0:	movt	r1, #1
   117e4:	bl	15ee4 <__assert_fail@plt+0x5028>
   117e8:	mov	r0, #0
   117ec:	bl	10dcc <exit@plt>
   117f0:	mov	r0, #1
   117f4:	bl	1120c <__assert_fail@plt+0x350>
   117f8:	mov	r3, #0
   117fc:	str	r3, [sp]
   11800:	movw	r3, #31704	; 0x7bd8
   11804:	movt	r3, #1
   11808:	movw	r2, #31636	; 0x7b94
   1180c:	movt	r2, #1
   11810:	ldr	r1, [fp, #-20]	; 0xffffffec
   11814:	ldr	r0, [fp, #-16]
   11818:	bl	10db4 <getopt_long@plt>
   1181c:	str	r0, [fp, #-8]
   11820:	ldr	r3, [fp, #-8]
   11824:	cmn	r3, #1
   11828:	bne	116cc <__assert_fail@plt+0x810>
   1182c:	bl	121c0 <__assert_fail@plt+0x1304>
   11830:	movw	r3, #37184	; 0x9140
   11834:	movt	r3, #2
   11838:	ldr	r3, [r3]
   1183c:	ldr	r2, [fp, #-16]
   11840:	cmp	r2, r3
   11844:	ble	11864 <__assert_fail@plt+0x9a8>
   11848:	movw	r3, #37184	; 0x9140
   1184c:	movt	r3, #2
   11850:	ldr	r3, [r3]
   11854:	lsl	r3, r3, #2
   11858:	ldr	r2, [fp, #-20]	; 0xffffffec
   1185c:	add	r3, r2, r3
   11860:	b	11868 <__assert_fail@plt+0x9ac>
   11864:	mov	r3, #0
   11868:	mov	r0, r3
   1186c:	bl	12530 <__assert_fail@plt+0x1674>
   11870:	bl	11350 <__assert_fail@plt+0x494>
   11874:	bl	127d8 <__assert_fail@plt+0x191c>
   11878:	movw	r3, #37224	; 0x9168
   1187c:	movt	r3, #2
   11880:	ldr	r3, [r3]
   11884:	mov	r0, r3
   11888:	sub	sp, fp, #4
   1188c:	ldr	fp, [sp]
   11890:	add	sp, sp, #4
   11894:	pop	{pc}		; (ldr pc, [sp], #4)
   11898:	push	{fp}		; (str fp, [sp, #-4]!)
   1189c:	add	fp, sp, #0
   118a0:	sub	sp, sp, #12
   118a4:	mov	r3, r0
   118a8:	strb	r3, [fp, #-5]
   118ac:	ldrb	r3, [fp, #-5]
   118b0:	mov	r0, r3
   118b4:	add	sp, fp, #0
   118b8:	pop	{fp}		; (ldr fp, [sp], #4)
   118bc:	bx	lr
   118c0:	strd	r4, [sp, #-16]!
   118c4:	str	fp, [sp, #8]
   118c8:	str	lr, [sp, #12]
   118cc:	add	fp, sp, #12
   118d0:	sub	sp, sp, #24
   118d4:	strd	r0, [fp, #-36]	; 0xffffffdc
   118d8:	movw	r1, #37264	; 0x9190
   118dc:	movt	r1, #2
   118e0:	ldr	r1, [r1]
   118e4:	cmp	r1, #0
   118e8:	beq	11918 <__assert_fail@plt+0xa5c>
   118ec:	movw	r1, #37256	; 0x9188
   118f0:	movt	r1, #2
   118f4:	ldr	r0, [r1]
   118f8:	movw	r1, #37264	; 0x9190
   118fc:	movt	r1, #2
   11900:	ldr	r1, [r1]
   11904:	sub	r1, r1, #-536870911	; 0xe0000001
   11908:	lsl	r1, r1, #3
   1190c:	add	r1, r0, r1
   11910:	ldrd	r0, [r1]
   11914:	b	11920 <__assert_fail@plt+0xa64>
   11918:	mov	r0, #0
   1191c:	mov	r1, #0
   11920:	strd	r0, [fp, #-20]	; 0xffffffec
   11924:	ldrd	r4, [fp, #-20]	; 0xffffffec
   11928:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   1192c:	cmp	r5, r1
   11930:	cmpeq	r4, r0
   11934:	bhi	1194c <__assert_fail@plt+0xa90>
   11938:	ldrd	r4, [fp, #-36]	; 0xffffffdc
   1193c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11940:	subs	r2, r4, r0
   11944:	sbc	r3, r5, r1
   11948:	b	11954 <__assert_fail@plt+0xa98>
   1194c:	mov	r2, #0
   11950:	mov	r3, #0
   11954:	strd	r2, [fp, #-28]	; 0xffffffe4
   11958:	movw	r3, #37264	; 0x9190
   1195c:	movt	r3, #2
   11960:	ldr	r2, [r3]
   11964:	movw	r3, #37260	; 0x918c
   11968:	movt	r3, #2
   1196c:	ldr	r3, [r3]
   11970:	cmp	r2, r3
   11974:	bne	119a8 <__assert_fail@plt+0xaec>
   11978:	movw	r3, #37256	; 0x9188
   1197c:	movt	r3, #2
   11980:	ldr	r3, [r3]
   11984:	mov	r2, #8
   11988:	movw	r1, #37260	; 0x918c
   1198c:	movt	r1, #2
   11990:	mov	r0, r3
   11994:	bl	16354 <__assert_fail@plt+0x5498>
   11998:	mov	r2, r0
   1199c:	movw	r3, #37256	; 0x9188
   119a0:	movt	r3, #2
   119a4:	str	r2, [r3]
   119a8:	movw	r3, #37256	; 0x9188
   119ac:	movt	r3, #2
   119b0:	ldr	r1, [r3]
   119b4:	movw	r3, #37264	; 0x9190
   119b8:	movt	r3, #2
   119bc:	ldr	r2, [r3]
   119c0:	add	r0, r2, #1
   119c4:	movw	r3, #37264	; 0x9190
   119c8:	movt	r3, #2
   119cc:	str	r0, [r3]
   119d0:	lsl	r3, r2, #3
   119d4:	add	r1, r1, r3
   119d8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   119dc:	strd	r2, [r1]
   119e0:	movw	r3, #37220	; 0x9164
   119e4:	movt	r3, #2
   119e8:	ldr	r3, [r3]
   119ec:	mov	r2, r3
   119f0:	mov	r3, #0
   119f4:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   119f8:	cmp	r1, r3
   119fc:	cmpeq	r0, r2
   11a00:	bls	11a4c <__assert_fail@plt+0xb90>
   11a04:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11a08:	mvn	r0, #0
   11a0c:	mov	r1, #0
   11a10:	cmp	r3, r1
   11a14:	cmpeq	r2, r0
   11a18:	bls	11a3c <__assert_fail@plt+0xb80>
   11a1c:	movw	r0, #32232	; 0x7de8
   11a20:	movt	r0, #1
   11a24:	bl	10dd8 <gettext@plt>
   11a28:	mov	r3, r0
   11a2c:	mov	r2, r3
   11a30:	mov	r1, #0
   11a34:	mov	r0, #1
   11a38:	bl	10d78 <error@plt>
   11a3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11a40:	movw	r3, #37220	; 0x9164
   11a44:	movt	r3, #2
   11a48:	str	r2, [r3]
   11a4c:	nop	{0}
   11a50:	sub	sp, fp, #12
   11a54:	ldrd	r4, [sp]
   11a58:	ldr	fp, [sp, #8]
   11a5c:	add	sp, sp, #12
   11a60:	pop	{pc}		; (ldr pc, [sp], #4)
   11a64:	str	fp, [sp, #-8]!
   11a68:	str	lr, [sp, #4]
   11a6c:	add	fp, sp, #4
   11a70:	sub	sp, sp, #16
   11a74:	strd	r0, [fp, #-20]	; 0xffffffec
   11a78:	mov	r3, #1
   11a7c:	strb	r3, [fp, #-5]
   11a80:	movw	r3, #37240	; 0x9178
   11a84:	movt	r3, #2
   11a88:	ldrd	r2, [r3]
   11a8c:	orrs	r3, r2, r3
   11a90:	beq	11abc <__assert_fail@plt+0xc00>
   11a94:	movw	r0, #32256	; 0x7e00
   11a98:	movt	r0, #1
   11a9c:	bl	10dd8 <gettext@plt>
   11aa0:	mov	r3, r0
   11aa4:	mov	r2, r3
   11aa8:	mov	r1, #0
   11aac:	mov	r0, #0
   11ab0:	bl	10d78 <error@plt>
   11ab4:	mov	r3, #0
   11ab8:	strb	r3, [fp, #-5]
   11abc:	movw	r3, #37240	; 0x9178
   11ac0:	movt	r3, #2
   11ac4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11ac8:	strd	r0, [r3]
   11acc:	ldrb	r3, [fp, #-5]
   11ad0:	mov	r0, r3
   11ad4:	sub	sp, fp, #4
   11ad8:	ldr	fp, [sp]
   11adc:	add	sp, sp, #4
   11ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ae4:	str	fp, [sp, #-8]!
   11ae8:	str	lr, [sp, #4]
   11aec:	add	fp, sp, #4
   11af0:	sub	sp, sp, #16
   11af4:	strd	r0, [fp, #-20]	; 0xffffffec
   11af8:	mov	r3, #1
   11afc:	strb	r3, [fp, #-5]
   11b00:	movw	r3, #37248	; 0x9180
   11b04:	movt	r3, #2
   11b08:	ldrd	r2, [r3]
   11b0c:	orrs	r3, r2, r3
   11b10:	beq	11b3c <__assert_fail@plt+0xc80>
   11b14:	movw	r0, #32304	; 0x7e30
   11b18:	movt	r0, #1
   11b1c:	bl	10dd8 <gettext@plt>
   11b20:	mov	r3, r0
   11b24:	mov	r2, r3
   11b28:	mov	r1, #0
   11b2c:	mov	r0, #0
   11b30:	bl	10d78 <error@plt>
   11b34:	mov	r3, #0
   11b38:	strb	r3, [fp, #-5]
   11b3c:	movw	r3, #37248	; 0x9180
   11b40:	movt	r3, #2
   11b44:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11b48:	strd	r0, [r3]
   11b4c:	ldrb	r3, [fp, #-5]
   11b50:	mov	r0, r3
   11b54:	sub	sp, fp, #4
   11b58:	ldr	fp, [sp]
   11b5c:	add	sp, sp, #4
   11b60:	pop	{pc}		; (ldr pc, [sp], #4)
   11b64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11b68:	strd	r6, [sp, #8]
   11b6c:	strd	r8, [sp, #16]
   11b70:	str	fp, [sp, #24]
   11b74:	str	lr, [sp, #28]
   11b78:	add	fp, sp, #28
   11b7c:	sub	sp, sp, #56	; 0x38
   11b80:	str	r0, [fp, #-64]	; 0xffffffc0
   11b84:	mov	r3, #0
   11b88:	strb	r3, [fp, #-29]	; 0xffffffe3
   11b8c:	mov	r2, #0
   11b90:	mov	r3, #0
   11b94:	strd	r2, [fp, #-60]	; 0xffffffc4
   11b98:	mov	r3, #0
   11b9c:	strb	r3, [fp, #-30]	; 0xffffffe2
   11ba0:	mov	r3, #0
   11ba4:	strb	r3, [fp, #-31]	; 0xffffffe1
   11ba8:	mov	r3, #0
   11bac:	str	r3, [fp, #-36]	; 0xffffffdc
   11bb0:	mov	r3, #1
   11bb4:	strb	r3, [fp, #-37]	; 0xffffffdb
   11bb8:	b	11f84 <__assert_fail@plt+0x10c8>
   11bbc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11bc0:	ldrb	r3, [r3]
   11bc4:	cmp	r3, #44	; 0x2c
   11bc8:	beq	11c04 <__assert_fail@plt+0xd48>
   11bcc:	bl	10dc0 <__ctype_b_loc@plt>
   11bd0:	mov	r3, r0
   11bd4:	ldr	r4, [r3]
   11bd8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11bdc:	ldrb	r3, [r3]
   11be0:	mov	r0, r3
   11be4:	bl	11898 <__assert_fail@plt+0x9dc>
   11be8:	mov	r3, r0
   11bec:	lsl	r3, r3, #1
   11bf0:	add	r3, r4, r3
   11bf4:	ldrh	r3, [r3]
   11bf8:	and	r3, r3, #1
   11bfc:	cmp	r3, #0
   11c00:	beq	11ca4 <__assert_fail@plt+0xde8>
   11c04:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11c08:	cmp	r3, #0
   11c0c:	beq	11c98 <__assert_fail@plt+0xddc>
   11c10:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   11c14:	cmp	r3, #0
   11c18:	beq	11c4c <__assert_fail@plt+0xd90>
   11c1c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11c20:	mov	r0, r2
   11c24:	mov	r1, r3
   11c28:	bl	11a64 <__assert_fail@plt+0xba8>
   11c2c:	mov	r3, r0
   11c30:	eor	r3, r3, #1
   11c34:	uxtb	r3, r3
   11c38:	cmp	r3, #0
   11c3c:	beq	11c98 <__assert_fail@plt+0xddc>
   11c40:	mov	r3, #0
   11c44:	strb	r3, [fp, #-37]	; 0xffffffdb
   11c48:	b	11f94 <__assert_fail@plt+0x10d8>
   11c4c:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   11c50:	cmp	r3, #0
   11c54:	beq	11c88 <__assert_fail@plt+0xdcc>
   11c58:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11c5c:	mov	r0, r2
   11c60:	mov	r1, r3
   11c64:	bl	11ae4 <__assert_fail@plt+0xc28>
   11c68:	mov	r3, r0
   11c6c:	eor	r3, r3, #1
   11c70:	uxtb	r3, r3
   11c74:	cmp	r3, #0
   11c78:	beq	11c98 <__assert_fail@plt+0xddc>
   11c7c:	mov	r3, #0
   11c80:	strb	r3, [fp, #-37]	; 0xffffffdb
   11c84:	b	11f94 <__assert_fail@plt+0x10d8>
   11c88:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11c8c:	mov	r0, r2
   11c90:	mov	r1, r3
   11c94:	bl	118c0 <__assert_fail@plt+0xa04>
   11c98:	mov	r3, #0
   11c9c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11ca0:	b	11f78 <__assert_fail@plt+0x10bc>
   11ca4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11ca8:	ldrb	r3, [r3]
   11cac:	cmp	r3, #47	; 0x2f
   11cb0:	bne	11d08 <__assert_fail@plt+0xe4c>
   11cb4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11cb8:	cmp	r3, #0
   11cbc:	beq	11cf4 <__assert_fail@plt+0xe38>
   11cc0:	movw	r0, #32352	; 0x7e60
   11cc4:	movt	r0, #1
   11cc8:	bl	10dd8 <gettext@plt>
   11ccc:	mov	r4, r0
   11cd0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11cd4:	bl	157dc <__assert_fail@plt+0x4920>
   11cd8:	mov	r3, r0
   11cdc:	mov	r2, r4
   11ce0:	mov	r1, #0
   11ce4:	mov	r0, #0
   11ce8:	bl	10d78 <error@plt>
   11cec:	mov	r3, #0
   11cf0:	strb	r3, [fp, #-37]	; 0xffffffdb
   11cf4:	mov	r3, #1
   11cf8:	strb	r3, [fp, #-30]	; 0xffffffe2
   11cfc:	mov	r3, #0
   11d00:	strb	r3, [fp, #-31]	; 0xffffffe1
   11d04:	b	11f78 <__assert_fail@plt+0x10bc>
   11d08:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11d0c:	ldrb	r3, [r3]
   11d10:	cmp	r3, #43	; 0x2b
   11d14:	bne	11d6c <__assert_fail@plt+0xeb0>
   11d18:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11d1c:	cmp	r3, #0
   11d20:	beq	11d58 <__assert_fail@plt+0xe9c>
   11d24:	movw	r0, #32396	; 0x7e8c
   11d28:	movt	r0, #1
   11d2c:	bl	10dd8 <gettext@plt>
   11d30:	mov	r4, r0
   11d34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11d38:	bl	157dc <__assert_fail@plt+0x4920>
   11d3c:	mov	r3, r0
   11d40:	mov	r2, r4
   11d44:	mov	r1, #0
   11d48:	mov	r0, #0
   11d4c:	bl	10d78 <error@plt>
   11d50:	mov	r3, #0
   11d54:	strb	r3, [fp, #-37]	; 0xffffffdb
   11d58:	mov	r3, #1
   11d5c:	strb	r3, [fp, #-31]	; 0xffffffe1
   11d60:	mov	r3, #0
   11d64:	strb	r3, [fp, #-30]	; 0xffffffe2
   11d68:	b	11f78 <__assert_fail@plt+0x10bc>
   11d6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11d70:	ldrb	r3, [r3]
   11d74:	sub	r3, r3, #48	; 0x30
   11d78:	cmp	r3, #9
   11d7c:	bhi	11f40 <__assert_fail@plt+0x1084>
   11d80:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11d84:	eor	r3, r3, #1
   11d88:	uxtb	r3, r3
   11d8c:	cmp	r3, #0
   11d90:	beq	11db0 <__assert_fail@plt+0xef4>
   11d94:	mov	r2, #0
   11d98:	mov	r3, #0
   11d9c:	strd	r2, [fp, #-60]	; 0xffffffc4
   11da0:	mov	r3, #1
   11da4:	strb	r3, [fp, #-29]	; 0xffffffe3
   11da8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11dac:	str	r3, [fp, #-36]	; 0xffffffdc
   11db0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11db4:	add	r1, pc, #700	; 0x2bc
   11db8:	ldrd	r0, [r1]
   11dbc:	cmp	r3, r1
   11dc0:	cmpeq	r2, r0
   11dc4:	bhi	11eb4 <__assert_fail@plt+0xff8>
   11dc8:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   11dcc:	mov	r2, r4
   11dd0:	mov	r3, r5
   11dd4:	mov	r0, #0
   11dd8:	mov	r1, #0
   11ddc:	lsl	r1, r3, #2
   11de0:	orr	r1, r1, r2, lsr #30
   11de4:	lsl	r0, r2, #2
   11de8:	mov	r2, r0
   11dec:	mov	r3, r1
   11df0:	adds	r2, r2, r4
   11df4:	adc	r3, r3, r5
   11df8:	adds	r1, r2, r2
   11dfc:	str	r1, [fp, #-76]	; 0xffffffb4
   11e00:	adc	r3, r3, r3
   11e04:	str	r3, [fp, #-72]	; 0xffffffb8
   11e08:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   11e0c:	mov	r0, r2
   11e10:	mov	r1, r3
   11e14:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11e18:	ldrb	r3, [r3]
   11e1c:	sub	r3, r3, #48	; 0x30
   11e20:	mov	r2, r3
   11e24:	asr	r3, r2, #31
   11e28:	adds	r6, r0, r2
   11e2c:	adc	r7, r1, r3
   11e30:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11e34:	cmp	r7, r3
   11e38:	cmpeq	r6, r2
   11e3c:	bcc	11eb4 <__assert_fail@plt+0xff8>
   11e40:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   11e44:	mov	r2, r4
   11e48:	mov	r3, r5
   11e4c:	mov	r0, #0
   11e50:	mov	r1, #0
   11e54:	lsl	r1, r3, #2
   11e58:	orr	r1, r1, r2, lsr #30
   11e5c:	lsl	r0, r2, #2
   11e60:	mov	r2, r0
   11e64:	mov	r3, r1
   11e68:	adds	r2, r2, r4
   11e6c:	adc	r3, r3, r5
   11e70:	adds	r1, r2, r2
   11e74:	str	r1, [fp, #-84]	; 0xffffffac
   11e78:	adc	r3, r3, r3
   11e7c:	str	r3, [fp, #-80]	; 0xffffffb0
   11e80:	ldrd	r2, [fp, #-84]	; 0xffffffac
   11e84:	mov	r0, r2
   11e88:	mov	r1, r3
   11e8c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11e90:	ldrb	r3, [r3]
   11e94:	sub	r3, r3, #48	; 0x30
   11e98:	mov	r2, r3
   11e9c:	asr	r3, r2, #31
   11ea0:	adds	r8, r0, r2
   11ea4:	adc	r9, r1, r3
   11ea8:	strd	r8, [fp, #-60]	; 0xffffffc4
   11eac:	mov	r3, #0
   11eb0:	b	11eb8 <__assert_fail@plt+0xffc>
   11eb4:	mov	r3, #1
   11eb8:	cmp	r3, #0
   11ebc:	beq	11f78 <__assert_fail@plt+0x10bc>
   11ec0:	movw	r1, #32440	; 0x7eb8
   11ec4:	movt	r1, #1
   11ec8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11ecc:	bl	10eb0 <strspn@plt>
   11ed0:	str	r0, [fp, #-44]	; 0xffffffd4
   11ed4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ed8:	mov	r1, r3
   11edc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11ee0:	bl	16820 <__assert_fail@plt+0x5964>
   11ee4:	mov	r3, r0
   11ee8:	str	r3, [fp, #-48]	; 0xffffffd0
   11eec:	movw	r0, #32452	; 0x7ec4
   11ef0:	movt	r0, #1
   11ef4:	bl	10dd8 <gettext@plt>
   11ef8:	mov	r4, r0
   11efc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11f00:	bl	157dc <__assert_fail@plt+0x4920>
   11f04:	mov	r3, r0
   11f08:	mov	r2, r4
   11f0c:	mov	r1, #0
   11f10:	mov	r0, #0
   11f14:	bl	10d78 <error@plt>
   11f18:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11f1c:	bl	12ce8 <__assert_fail@plt+0x1e2c>
   11f20:	mov	r3, #0
   11f24:	strb	r3, [fp, #-37]	; 0xffffffdb
   11f28:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f2c:	sub	r3, r3, #1
   11f30:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11f34:	add	r3, r2, r3
   11f38:	str	r3, [fp, #-64]	; 0xffffffc0
   11f3c:	b	11f78 <__assert_fail@plt+0x10bc>
   11f40:	movw	r0, #32480	; 0x7ee0
   11f44:	movt	r0, #1
   11f48:	bl	10dd8 <gettext@plt>
   11f4c:	mov	r4, r0
   11f50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11f54:	bl	157dc <__assert_fail@plt+0x4920>
   11f58:	mov	r3, r0
   11f5c:	mov	r2, r4
   11f60:	mov	r1, #0
   11f64:	mov	r0, #0
   11f68:	bl	10d78 <error@plt>
   11f6c:	mov	r3, #0
   11f70:	strb	r3, [fp, #-37]	; 0xffffffdb
   11f74:	b	11f94 <__assert_fail@plt+0x10d8>
   11f78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11f7c:	add	r3, r3, #1
   11f80:	str	r3, [fp, #-64]	; 0xffffffc0
   11f84:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11f88:	ldrb	r3, [r3]
   11f8c:	cmp	r3, #0
   11f90:	bne	11bbc <__assert_fail@plt+0xd00>
   11f94:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11f98:	cmp	r3, #0
   11f9c:	beq	1203c <__assert_fail@plt+0x1180>
   11fa0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11fa4:	cmp	r3, #0
   11fa8:	beq	1203c <__assert_fail@plt+0x1180>
   11fac:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   11fb0:	cmp	r3, #0
   11fb4:	beq	11fec <__assert_fail@plt+0x1130>
   11fb8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11fbc:	mov	r0, r2
   11fc0:	mov	r1, r3
   11fc4:	bl	11a64 <__assert_fail@plt+0xba8>
   11fc8:	mov	r3, r0
   11fcc:	mov	r2, r3
   11fd0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11fd4:	and	r3, r3, r2
   11fd8:	cmp	r3, #0
   11fdc:	movne	r3, #1
   11fe0:	moveq	r3, #0
   11fe4:	strb	r3, [fp, #-37]	; 0xffffffdb
   11fe8:	b	1203c <__assert_fail@plt+0x1180>
   11fec:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   11ff0:	cmp	r3, #0
   11ff4:	beq	1202c <__assert_fail@plt+0x1170>
   11ff8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11ffc:	mov	r0, r2
   12000:	mov	r1, r3
   12004:	bl	11ae4 <__assert_fail@plt+0xc28>
   12008:	mov	r3, r0
   1200c:	mov	r2, r3
   12010:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12014:	and	r3, r3, r2
   12018:	cmp	r3, #0
   1201c:	movne	r3, #1
   12020:	moveq	r3, #0
   12024:	strb	r3, [fp, #-37]	; 0xffffffdb
   12028:	b	1203c <__assert_fail@plt+0x1180>
   1202c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12030:	mov	r0, r2
   12034:	mov	r1, r3
   12038:	bl	118c0 <__assert_fail@plt+0xa04>
   1203c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12040:	eor	r3, r3, #1
   12044:	uxtb	r3, r3
   12048:	cmp	r3, #0
   1204c:	beq	12058 <__assert_fail@plt+0x119c>
   12050:	mov	r0, #1
   12054:	bl	10dcc <exit@plt>
   12058:	nop	{0}
   1205c:	sub	sp, fp, #28
   12060:	ldrd	r4, [sp]
   12064:	ldrd	r6, [sp, #8]
   12068:	ldrd	r8, [sp, #16]
   1206c:	ldr	fp, [sp, #24]
   12070:	add	sp, sp, #28
   12074:	pop	{pc}		; (ldr pc, [sp], #4)
   12078:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1207c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12080:	str	fp, [sp, #-8]!
   12084:	str	lr, [sp, #4]
   12088:	add	fp, sp, #4
   1208c:	sub	sp, sp, #24
   12090:	str	r0, [fp, #-24]	; 0xffffffe8
   12094:	str	r1, [fp, #-28]	; 0xffffffe4
   12098:	mov	r2, #0
   1209c:	mov	r3, #0
   120a0:	strd	r2, [fp, #-12]
   120a4:	mov	r3, #0
   120a8:	str	r3, [fp, #-16]
   120ac:	b	12154 <__assert_fail@plt+0x1298>
   120b0:	ldr	r3, [fp, #-16]
   120b4:	lsl	r3, r3, #3
   120b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   120bc:	add	r3, r2, r3
   120c0:	ldrd	r2, [r3]
   120c4:	orrs	r3, r2, r3
   120c8:	bne	120ec <__assert_fail@plt+0x1230>
   120cc:	movw	r0, #32524	; 0x7f0c
   120d0:	movt	r0, #1
   120d4:	bl	10dd8 <gettext@plt>
   120d8:	mov	r3, r0
   120dc:	mov	r2, r3
   120e0:	mov	r1, #0
   120e4:	mov	r0, #1
   120e8:	bl	10d78 <error@plt>
   120ec:	ldr	r3, [fp, #-16]
   120f0:	lsl	r3, r3, #3
   120f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   120f8:	add	r3, r2, r3
   120fc:	ldrd	r2, [r3]
   12100:	ldrd	r0, [fp, #-12]
   12104:	cmp	r1, r3
   12108:	cmpeq	r0, r2
   1210c:	bcc	12130 <__assert_fail@plt+0x1274>
   12110:	movw	r0, #32548	; 0x7f24
   12114:	movt	r0, #1
   12118:	bl	10dd8 <gettext@plt>
   1211c:	mov	r3, r0
   12120:	mov	r2, r3
   12124:	mov	r1, #0
   12128:	mov	r0, #1
   1212c:	bl	10d78 <error@plt>
   12130:	ldr	r3, [fp, #-16]
   12134:	lsl	r3, r3, #3
   12138:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1213c:	add	r3, r2, r3
   12140:	ldrd	r2, [r3]
   12144:	strd	r2, [fp, #-12]
   12148:	ldr	r3, [fp, #-16]
   1214c:	add	r3, r3, #1
   12150:	str	r3, [fp, #-16]
   12154:	ldr	r2, [fp, #-16]
   12158:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1215c:	cmp	r2, r3
   12160:	bcc	120b0 <__assert_fail@plt+0x11f4>
   12164:	movw	r3, #37248	; 0x9180
   12168:	movt	r3, #2
   1216c:	ldrd	r2, [r3]
   12170:	orrs	r3, r2, r3
   12174:	beq	121ac <__assert_fail@plt+0x12f0>
   12178:	movw	r3, #37240	; 0x9178
   1217c:	movt	r3, #2
   12180:	ldrd	r2, [r3]
   12184:	orrs	r3, r2, r3
   12188:	beq	121ac <__assert_fail@plt+0x12f0>
   1218c:	movw	r0, #32576	; 0x7f40
   12190:	movt	r0, #1
   12194:	bl	10dd8 <gettext@plt>
   12198:	mov	r3, r0
   1219c:	mov	r2, r3
   121a0:	mov	r1, #0
   121a4:	mov	r0, #1
   121a8:	bl	10d78 <error@plt>
   121ac:	nop	{0}
   121b0:	sub	sp, fp, #4
   121b4:	ldr	fp, [sp]
   121b8:	add	sp, sp, #4
   121bc:	pop	{pc}		; (ldr pc, [sp], #4)
   121c0:	str	fp, [sp, #-8]!
   121c4:	str	lr, [sp, #4]
   121c8:	add	fp, sp, #4
   121cc:	movw	r3, #37256	; 0x9188
   121d0:	movt	r3, #2
   121d4:	ldr	r2, [r3]
   121d8:	movw	r3, #37264	; 0x9190
   121dc:	movt	r3, #2
   121e0:	ldr	r3, [r3]
   121e4:	mov	r1, r3
   121e8:	mov	r0, r2
   121ec:	bl	12080 <__assert_fail@plt+0x11c4>
   121f0:	movw	r3, #37264	; 0x9190
   121f4:	movt	r3, #2
   121f8:	ldr	r3, [r3]
   121fc:	cmp	r3, #0
   12200:	bne	12280 <__assert_fail@plt+0x13c4>
   12204:	movw	r3, #37240	; 0x9178
   12208:	movt	r3, #2
   1220c:	ldrd	r2, [r3]
   12210:	orrs	r3, r2, r3
   12214:	bne	12244 <__assert_fail@plt+0x1388>
   12218:	movw	r3, #37248	; 0x9180
   1221c:	movt	r3, #2
   12220:	ldrd	r2, [r3]
   12224:	orrs	r3, r2, r3
   12228:	beq	1223c <__assert_fail@plt+0x1380>
   1222c:	movw	r3, #37248	; 0x9180
   12230:	movt	r3, #2
   12234:	ldrd	r2, [r3]
   12238:	b	12250 <__assert_fail@plt+0x1394>
   1223c:	mov	r2, #8
   12240:	b	12250 <__assert_fail@plt+0x1394>
   12244:	movw	r3, #37240	; 0x9178
   12248:	movt	r3, #2
   1224c:	ldrd	r2, [r3]
   12250:	movw	r3, #37220	; 0x9164
   12254:	movt	r3, #2
   12258:	str	r2, [r3]
   1225c:	movw	r3, #37220	; 0x9164
   12260:	movt	r3, #2
   12264:	ldr	r3, [r3]
   12268:	mov	r0, r3
   1226c:	mov	r1, #0
   12270:	movw	r3, #37232	; 0x9170
   12274:	movt	r3, #2
   12278:	strd	r0, [r3]
   1227c:	b	122f0 <__assert_fail@plt+0x1434>
   12280:	movw	r3, #37264	; 0x9190
   12284:	movt	r3, #2
   12288:	ldr	r3, [r3]
   1228c:	cmp	r3, #1
   12290:	bne	122dc <__assert_fail@plt+0x1420>
   12294:	movw	r3, #37240	; 0x9178
   12298:	movt	r3, #2
   1229c:	ldrd	r2, [r3]
   122a0:	orrs	r3, r2, r3
   122a4:	bne	122dc <__assert_fail@plt+0x1420>
   122a8:	movw	r3, #37248	; 0x9180
   122ac:	movt	r3, #2
   122b0:	ldrd	r2, [r3]
   122b4:	orrs	r3, r2, r3
   122b8:	bne	122dc <__assert_fail@plt+0x1420>
   122bc:	movw	r3, #37256	; 0x9188
   122c0:	movt	r3, #2
   122c4:	ldr	r3, [r3]
   122c8:	ldrd	r0, [r3]
   122cc:	movw	r3, #37232	; 0x9170
   122d0:	movt	r3, #2
   122d4:	strd	r0, [r3]
   122d8:	b	122f0 <__assert_fail@plt+0x1434>
   122dc:	movw	r3, #37232	; 0x9170
   122e0:	movt	r3, #2
   122e4:	mov	r0, #0
   122e8:	mov	r1, #0
   122ec:	strd	r0, [r3]
   122f0:	nop	{0}
   122f4:	sub	sp, fp, #4
   122f8:	ldr	fp, [sp]
   122fc:	add	sp, sp, #4
   12300:	pop	{pc}		; (ldr pc, [sp], #4)
   12304:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12308:	strd	r6, [sp, #8]
   1230c:	strd	r8, [sp, #16]
   12310:	str	fp, [sp, #24]
   12314:	str	lr, [sp, #28]
   12318:	add	fp, sp, #28
   1231c:	sub	sp, sp, #56	; 0x38
   12320:	strd	r0, [fp, #-52]	; 0xffffffcc
   12324:	str	r2, [fp, #-56]	; 0xffffffc8
   12328:	str	r3, [fp, #-60]	; 0xffffffc4
   1232c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12330:	mov	r2, #0
   12334:	strb	r2, [r3]
   12338:	movw	r3, #37232	; 0x9170
   1233c:	movt	r3, #2
   12340:	ldrd	r2, [r3]
   12344:	orrs	r3, r2, r3
   12348:	beq	123e8 <__assert_fail@plt+0x152c>
   1234c:	movw	r3, #37232	; 0x9170
   12350:	movt	r3, #2
   12354:	ldrd	r6, [r3]
   12358:	movw	r3, #37232	; 0x9170
   1235c:	movt	r3, #2
   12360:	ldrd	r2, [r3]
   12364:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12368:	bl	17768 <__assert_fail@plt+0x68ac>
   1236c:	subs	r1, r6, r2
   12370:	str	r1, [fp, #-68]	; 0xffffffbc
   12374:	sbc	r3, r7, r3
   12378:	str	r3, [fp, #-64]	; 0xffffffc0
   1237c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12380:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   12384:	mov	ip, r0
   12388:	adds	r4, ip, r2
   1238c:	adc	r5, r1, r3
   12390:	b	12504 <__assert_fail@plt+0x1648>
   12394:	movw	r3, #37256	; 0x9188
   12398:	movt	r3, #2
   1239c:	ldr	r2, [r3]
   123a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   123a4:	ldr	r3, [r3]
   123a8:	lsl	r3, r3, #3
   123ac:	add	r3, r2, r3
   123b0:	ldrd	r2, [r3]
   123b4:	strd	r2, [fp, #-36]	; 0xffffffdc
   123b8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   123bc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   123c0:	cmp	r1, r3
   123c4:	cmpeq	r0, r2
   123c8:	bcs	123d4 <__assert_fail@plt+0x1518>
   123cc:	ldrd	r4, [fp, #-36]	; 0xffffffdc
   123d0:	b	12504 <__assert_fail@plt+0x1648>
   123d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   123d8:	ldr	r3, [r3]
   123dc:	add	r2, r3, #1
   123e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   123e4:	str	r2, [r3]
   123e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   123ec:	ldr	r2, [r3]
   123f0:	movw	r3, #37264	; 0x9190
   123f4:	movt	r3, #2
   123f8:	ldr	r3, [r3]
   123fc:	cmp	r2, r3
   12400:	bcc	12394 <__assert_fail@plt+0x14d8>
   12404:	movw	r3, #37240	; 0x9178
   12408:	movt	r3, #2
   1240c:	ldrd	r2, [r3]
   12410:	orrs	r3, r2, r3
   12414:	beq	12460 <__assert_fail@plt+0x15a4>
   12418:	movw	r3, #37240	; 0x9178
   1241c:	movt	r3, #2
   12420:	ldrd	r6, [r3]
   12424:	movw	r3, #37240	; 0x9178
   12428:	movt	r3, #2
   1242c:	ldrd	r2, [r3]
   12430:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12434:	bl	17768 <__assert_fail@plt+0x68ac>
   12438:	subs	r1, r6, r2
   1243c:	str	r1, [fp, #-76]	; 0xffffffb4
   12440:	sbc	r3, r7, r3
   12444:	str	r3, [fp, #-72]	; 0xffffffb8
   12448:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1244c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12450:	mov	ip, r0
   12454:	adds	r4, ip, r2
   12458:	adc	r5, r1, r3
   1245c:	b	12504 <__assert_fail@plt+0x1648>
   12460:	movw	r3, #37248	; 0x9180
   12464:	movt	r3, #2
   12468:	ldrd	r2, [r3]
   1246c:	orrs	r3, r2, r3
   12470:	beq	124f0 <__assert_fail@plt+0x1634>
   12474:	movw	r3, #37256	; 0x9188
   12478:	movt	r3, #2
   1247c:	ldr	r2, [r3]
   12480:	movw	r3, #37264	; 0x9190
   12484:	movt	r3, #2
   12488:	ldr	r3, [r3]
   1248c:	sub	r3, r3, #-536870911	; 0xe0000001
   12490:	lsl	r3, r3, #3
   12494:	add	r3, r2, r3
   12498:	ldrd	r2, [r3]
   1249c:	strd	r2, [fp, #-44]	; 0xffffffd4
   124a0:	movw	r3, #37248	; 0x9180
   124a4:	movt	r3, #2
   124a8:	ldrd	r6, [r3]
   124ac:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   124b0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   124b4:	subs	ip, r0, r2
   124b8:	str	ip, [fp, #-84]	; 0xffffffac
   124bc:	sbc	r3, r1, r3
   124c0:	str	r3, [fp, #-80]	; 0xffffffb0
   124c4:	movw	r3, #37248	; 0x9180
   124c8:	movt	r3, #2
   124cc:	ldrd	r2, [r3]
   124d0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   124d4:	bl	17768 <__assert_fail@plt+0x68ac>
   124d8:	subs	r8, r6, r2
   124dc:	sbc	r9, r7, r3
   124e0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   124e4:	adds	r4, r8, r2
   124e8:	adc	r5, r9, r3
   124ec:	b	12504 <__assert_fail@plt+0x1648>
   124f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   124f4:	mov	r2, #1
   124f8:	strb	r2, [r3]
   124fc:	mov	r4, #0
   12500:	mov	r5, #0
   12504:	mov	r2, r4
   12508:	mov	r3, r5
   1250c:	mov	r0, r2
   12510:	mov	r1, r3
   12514:	sub	sp, fp, #28
   12518:	ldrd	r4, [sp]
   1251c:	ldrd	r6, [sp, #8]
   12520:	ldrd	r8, [sp, #16]
   12524:	ldr	fp, [sp, #24]
   12528:	add	sp, sp, #28
   1252c:	pop	{pc}		; (ldr pc, [sp], #4)
   12530:	push	{fp}		; (str fp, [sp, #-4]!)
   12534:	add	fp, sp, #0
   12538:	sub	sp, sp, #12
   1253c:	str	r0, [fp, #-8]
   12540:	movw	r3, #37272	; 0x9198
   12544:	movt	r3, #2
   12548:	mov	r2, #0
   1254c:	strb	r2, [r3]
   12550:	ldr	r3, [fp, #-8]
   12554:	cmp	r3, #0
   12558:	bne	12574 <__assert_fail@plt+0x16b8>
   1255c:	movw	r3, #37268	; 0x9194
   12560:	movt	r3, #2
   12564:	movw	r2, #37092	; 0x90e4
   12568:	movt	r2, #2
   1256c:	str	r2, [r3]
   12570:	b	12584 <__assert_fail@plt+0x16c8>
   12574:	movw	r3, #37268	; 0x9194
   12578:	movt	r3, #2
   1257c:	ldr	r2, [fp, #-8]
   12580:	str	r2, [r3]
   12584:	nop	{0}
   12588:	add	sp, fp, #0
   1258c:	pop	{fp}		; (ldr fp, [sp], #4)
   12590:	bx	lr
   12594:	str	r4, [sp, #-12]!
   12598:	str	fp, [sp, #4]
   1259c:	str	lr, [sp, #8]
   125a0:	add	fp, sp, #8
   125a4:	sub	sp, sp, #20
   125a8:	str	r0, [fp, #-24]	; 0xffffffe8
   125ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125b0:	cmp	r3, #0
   125b4:	beq	1278c <__assert_fail@plt+0x18d0>
   125b8:	movw	r3, #37276	; 0x919c
   125bc:	movt	r3, #2
   125c0:	ldr	r3, [r3]
   125c4:	cmp	r3, #0
   125c8:	bne	125ec <__assert_fail@plt+0x1730>
   125cc:	movw	r3, #33096	; 0x8148
   125d0:	movt	r3, #1
   125d4:	mov	r2, #340	; 0x154
   125d8:	movw	r1, #32624	; 0x7f70
   125dc:	movt	r1, #1
   125e0:	movw	r0, #32644	; 0x7f84
   125e4:	movt	r0, #1
   125e8:	bl	10ebc <__assert_fail@plt>
   125ec:	bl	10dfc <__errno_location@plt>
   125f0:	mov	r3, r0
   125f4:	ldr	r3, [r3]
   125f8:	str	r3, [fp, #-16]
   125fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12600:	bl	10d60 <ferror_unlocked@plt>
   12604:	mov	r3, r0
   12608:	cmp	r3, #0
   1260c:	bne	12618 <__assert_fail@plt+0x175c>
   12610:	mov	r3, #0
   12614:	str	r3, [fp, #-16]
   12618:	movw	r3, #37276	; 0x919c
   1261c:	movt	r3, #2
   12620:	ldr	r3, [r3]
   12624:	movw	r1, #32228	; 0x7de4
   12628:	movt	r1, #1
   1262c:	mov	r0, r3
   12630:	bl	10c88 <strcmp@plt>
   12634:	mov	r3, r0
   12638:	cmp	r3, #0
   1263c:	bne	1264c <__assert_fail@plt+0x1790>
   12640:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12644:	bl	10e68 <clearerr_unlocked@plt>
   12648:	b	12670 <__assert_fail@plt+0x17b4>
   1264c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12650:	bl	12b24 <__assert_fail@plt+0x1c68>
   12654:	mov	r3, r0
   12658:	cmp	r3, #0
   1265c:	beq	12670 <__assert_fail@plt+0x17b4>
   12660:	bl	10dfc <__errno_location@plt>
   12664:	mov	r3, r0
   12668:	ldr	r3, [r3]
   1266c:	str	r3, [fp, #-16]
   12670:	ldr	r3, [fp, #-16]
   12674:	cmp	r3, #0
   12678:	beq	1278c <__assert_fail@plt+0x18d0>
   1267c:	movw	r3, #37276	; 0x919c
   12680:	movt	r3, #2
   12684:	ldr	r3, [r3]
   12688:	mov	r2, r3
   1268c:	mov	r1, #3
   12690:	mov	r0, #0
   12694:	bl	154e0 <__assert_fail@plt+0x4624>
   12698:	mov	r3, r0
   1269c:	movw	r2, #32656	; 0x7f90
   126a0:	movt	r2, #1
   126a4:	ldr	r1, [fp, #-16]
   126a8:	mov	r0, #0
   126ac:	bl	10d78 <error@plt>
   126b0:	movw	r3, #37224	; 0x9168
   126b4:	movt	r3, #2
   126b8:	mov	r2, #1
   126bc:	str	r2, [r3]
   126c0:	b	1278c <__assert_fail@plt+0x18d0>
   126c4:	movw	r1, #32228	; 0x7de4
   126c8:	movt	r1, #1
   126cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   126d0:	bl	10c88 <strcmp@plt>
   126d4:	mov	r3, r0
   126d8:	cmp	r3, #0
   126dc:	bne	12704 <__assert_fail@plt+0x1848>
   126e0:	movw	r3, #37272	; 0x9198
   126e4:	movt	r3, #2
   126e8:	mov	r2, #1
   126ec:	strb	r2, [r3]
   126f0:	movw	r3, #37200	; 0x9150
   126f4:	movt	r3, #2
   126f8:	ldr	r3, [r3]
   126fc:	str	r3, [fp, #-24]	; 0xffffffe8
   12700:	b	12718 <__assert_fail@plt+0x185c>
   12704:	movw	r1, #32660	; 0x7f94
   12708:	movt	r1, #1
   1270c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12710:	bl	10e74 <fopen64@plt>
   12714:	str	r0, [fp, #-24]	; 0xffffffe8
   12718:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1271c:	cmp	r3, #0
   12720:	beq	12748 <__assert_fail@plt+0x188c>
   12724:	movw	r3, #37276	; 0x919c
   12728:	movt	r3, #2
   1272c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12730:	str	r2, [r3]
   12734:	mov	r1, #2
   12738:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1273c:	bl	12abc <__assert_fail@plt+0x1c00>
   12740:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12744:	b	127c0 <__assert_fail@plt+0x1904>
   12748:	bl	10dfc <__errno_location@plt>
   1274c:	mov	r3, r0
   12750:	ldr	r4, [r3]
   12754:	ldr	r2, [fp, #-20]	; 0xffffffec
   12758:	mov	r1, #3
   1275c:	mov	r0, #0
   12760:	bl	154e0 <__assert_fail@plt+0x4624>
   12764:	mov	r3, r0
   12768:	movw	r2, #32656	; 0x7f90
   1276c:	movt	r2, #1
   12770:	mov	r1, r4
   12774:	mov	r0, #0
   12778:	bl	10d78 <error@plt>
   1277c:	movw	r3, #37224	; 0x9168
   12780:	movt	r3, #2
   12784:	mov	r2, #1
   12788:	str	r2, [r3]
   1278c:	movw	r3, #37268	; 0x9194
   12790:	movt	r3, #2
   12794:	ldr	r2, [r3]
   12798:	add	r1, r2, #4
   1279c:	movw	r3, #37268	; 0x9194
   127a0:	movt	r3, #2
   127a4:	str	r1, [r3]
   127a8:	ldr	r3, [r2]
   127ac:	str	r3, [fp, #-20]	; 0xffffffec
   127b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   127b4:	cmp	r3, #0
   127b8:	bne	126c4 <__assert_fail@plt+0x1808>
   127bc:	mov	r3, #0
   127c0:	mov	r0, r3
   127c4:	sub	sp, fp, #8
   127c8:	ldr	r4, [sp]
   127cc:	ldr	fp, [sp, #4]
   127d0:	add	sp, sp, #8
   127d4:	pop	{pc}		; (ldr pc, [sp], #4)
   127d8:	str	fp, [sp, #-8]!
   127dc:	str	lr, [sp, #4]
   127e0:	add	fp, sp, #4
   127e4:	movw	r3, #37272	; 0x9198
   127e8:	movt	r3, #2
   127ec:	ldrb	r3, [r3]
   127f0:	cmp	r3, #0
   127f4:	beq	12838 <__assert_fail@plt+0x197c>
   127f8:	movw	r3, #37200	; 0x9150
   127fc:	movt	r3, #2
   12800:	ldr	r3, [r3]
   12804:	mov	r0, r3
   12808:	bl	12b24 <__assert_fail@plt+0x1c68>
   1280c:	mov	r3, r0
   12810:	cmp	r3, #0
   12814:	beq	12838 <__assert_fail@plt+0x197c>
   12818:	bl	10dfc <__errno_location@plt>
   1281c:	mov	r3, r0
   12820:	ldr	r3, [r3]
   12824:	movw	r2, #32228	; 0x7de4
   12828:	movt	r2, #1
   1282c:	mov	r1, r3
   12830:	mov	r0, #1
   12834:	bl	10d78 <error@plt>
   12838:	nop	{0}
   1283c:	sub	sp, fp, #4
   12840:	ldr	fp, [sp]
   12844:	add	sp, sp, #4
   12848:	pop	{pc}		; (ldr pc, [sp], #4)
   1284c:	str	fp, [sp, #-8]!
   12850:	str	lr, [sp, #4]
   12854:	add	fp, sp, #4
   12858:	movw	r0, #32664	; 0x7f98
   1285c:	movt	r0, #1
   12860:	bl	10dd8 <gettext@plt>
   12864:	mov	r2, r0
   12868:	movw	r3, #37204	; 0x9154
   1286c:	movt	r3, #2
   12870:	ldr	r3, [r3]
   12874:	mov	r1, r3
   12878:	mov	r0, r2
   1287c:	bl	10c70 <fputs_unlocked@plt>
   12880:	movw	r0, #32728	; 0x7fd8
   12884:	movt	r0, #1
   12888:	bl	10dd8 <gettext@plt>
   1288c:	mov	r2, r0
   12890:	movw	r3, #37204	; 0x9154
   12894:	movt	r3, #2
   12898:	ldr	r3, [r3]
   1289c:	mov	r1, r3
   128a0:	mov	r0, r2
   128a4:	bl	10c70 <fputs_unlocked@plt>
   128a8:	nop	{0}
   128ac:	sub	sp, fp, #4
   128b0:	ldr	fp, [sp]
   128b4:	add	sp, sp, #4
   128b8:	pop	{pc}		; (ldr pc, [sp], #4)
   128bc:	push	{fp}		; (str fp, [sp, #-4]!)
   128c0:	add	fp, sp, #0
   128c4:	sub	sp, sp, #12
   128c8:	str	r0, [fp, #-8]
   128cc:	movw	r3, #37280	; 0x91a0
   128d0:	movt	r3, #2
   128d4:	ldr	r2, [fp, #-8]
   128d8:	str	r2, [r3]
   128dc:	nop	{0}
   128e0:	add	sp, fp, #0
   128e4:	pop	{fp}		; (ldr fp, [sp], #4)
   128e8:	bx	lr
   128ec:	push	{fp}		; (str fp, [sp, #-4]!)
   128f0:	add	fp, sp, #0
   128f4:	sub	sp, sp, #12
   128f8:	mov	r3, r0
   128fc:	strb	r3, [fp, #-5]
   12900:	movw	r3, #37284	; 0x91a4
   12904:	movt	r3, #2
   12908:	ldrb	r2, [fp, #-5]
   1290c:	strb	r2, [r3]
   12910:	nop	{0}
   12914:	add	sp, fp, #0
   12918:	pop	{fp}		; (ldr fp, [sp], #4)
   1291c:	bx	lr
   12920:	str	r4, [sp, #-12]!
   12924:	str	fp, [sp, #4]
   12928:	str	lr, [sp, #8]
   1292c:	add	fp, sp, #8
   12930:	sub	sp, sp, #20
   12934:	movw	r3, #37204	; 0x9154
   12938:	movt	r3, #2
   1293c:	ldr	r3, [r3]
   12940:	mov	r0, r3
   12944:	bl	16be0 <__assert_fail@plt+0x5d24>
   12948:	mov	r3, r0
   1294c:	cmp	r3, #0
   12950:	beq	12a24 <__assert_fail@plt+0x1b68>
   12954:	movw	r3, #37284	; 0x91a4
   12958:	movt	r3, #2
   1295c:	ldrb	r3, [r3]
   12960:	eor	r3, r3, #1
   12964:	uxtb	r3, r3
   12968:	cmp	r3, #0
   1296c:	bne	12984 <__assert_fail@plt+0x1ac8>
   12970:	bl	10dfc <__errno_location@plt>
   12974:	mov	r3, r0
   12978:	ldr	r3, [r3]
   1297c:	cmp	r3, #32
   12980:	beq	12a24 <__assert_fail@plt+0x1b68>
   12984:	movw	r0, #33124	; 0x8164
   12988:	movt	r0, #1
   1298c:	bl	10dd8 <gettext@plt>
   12990:	str	r0, [fp, #-16]
   12994:	movw	r3, #37280	; 0x91a0
   12998:	movt	r3, #2
   1299c:	ldr	r3, [r3]
   129a0:	cmp	r3, #0
   129a4:	beq	129f0 <__assert_fail@plt+0x1b34>
   129a8:	bl	10dfc <__errno_location@plt>
   129ac:	mov	r3, r0
   129b0:	ldr	r4, [r3]
   129b4:	movw	r3, #37280	; 0x91a0
   129b8:	movt	r3, #2
   129bc:	ldr	r3, [r3]
   129c0:	mov	r0, r3
   129c4:	bl	15468 <__assert_fail@plt+0x45ac>
   129c8:	mov	r2, r0
   129cc:	ldr	r3, [fp, #-16]
   129d0:	str	r3, [sp]
   129d4:	mov	r3, r2
   129d8:	movw	r2, #33136	; 0x8170
   129dc:	movt	r2, #1
   129e0:	mov	r1, r4
   129e4:	mov	r0, #0
   129e8:	bl	10d78 <error@plt>
   129ec:	b	12a10 <__assert_fail@plt+0x1b54>
   129f0:	bl	10dfc <__errno_location@plt>
   129f4:	mov	r3, r0
   129f8:	ldr	r1, [r3]
   129fc:	ldr	r3, [fp, #-16]
   12a00:	movw	r2, #33144	; 0x8178
   12a04:	movt	r2, #1
   12a08:	mov	r0, #0
   12a0c:	bl	10d78 <error@plt>
   12a10:	movw	r3, #37104	; 0x90f0
   12a14:	movt	r3, #2
   12a18:	ldr	r3, [r3]
   12a1c:	mov	r0, r3
   12a20:	bl	10cc4 <_exit@plt>
   12a24:	movw	r3, #37192	; 0x9148
   12a28:	movt	r3, #2
   12a2c:	ldr	r3, [r3]
   12a30:	mov	r0, r3
   12a34:	bl	16be0 <__assert_fail@plt+0x5d24>
   12a38:	mov	r3, r0
   12a3c:	cmp	r3, #0
   12a40:	beq	12a58 <__assert_fail@plt+0x1b9c>
   12a44:	movw	r3, #37104	; 0x90f0
   12a48:	movt	r3, #2
   12a4c:	ldr	r3, [r3]
   12a50:	mov	r0, r3
   12a54:	bl	10cc4 <_exit@plt>
   12a58:	nop	{0}
   12a5c:	sub	sp, fp, #8
   12a60:	ldr	r4, [sp]
   12a64:	ldr	fp, [sp, #4]
   12a68:	add	sp, sp, #8
   12a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a70:	str	fp, [sp, #-8]!
   12a74:	str	lr, [sp, #4]
   12a78:	add	fp, sp, #4
   12a7c:	sub	sp, sp, #40	; 0x28
   12a80:	str	r0, [fp, #-16]
   12a84:	strd	r2, [fp, #-28]	; 0xffffffe4
   12a88:	ldr	r3, [fp, #12]
   12a8c:	str	r3, [sp, #8]
   12a90:	ldrd	r2, [fp, #4]
   12a94:	strd	r2, [sp]
   12a98:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12a9c:	ldr	r0, [fp, #-16]
   12aa0:	bl	10c94 <posix_fadvise64@plt>
   12aa4:	str	r0, [fp, #-8]
   12aa8:	nop	{0}
   12aac:	sub	sp, fp, #4
   12ab0:	ldr	fp, [sp]
   12ab4:	add	sp, sp, #4
   12ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   12abc:	str	fp, [sp, #-8]!
   12ac0:	str	lr, [sp, #4]
   12ac4:	add	fp, sp, #4
   12ac8:	sub	sp, sp, #24
   12acc:	str	r0, [fp, #-8]
   12ad0:	str	r1, [fp, #-12]
   12ad4:	ldr	r3, [fp, #-8]
   12ad8:	cmp	r3, #0
   12adc:	beq	12b10 <__assert_fail@plt+0x1c54>
   12ae0:	ldr	r0, [fp, #-8]
   12ae4:	bl	10e20 <fileno@plt>
   12ae8:	mov	r1, r0
   12aec:	ldr	r3, [fp, #-12]
   12af0:	str	r3, [sp, #8]
   12af4:	mov	r2, #0
   12af8:	mov	r3, #0
   12afc:	strd	r2, [sp]
   12b00:	mov	r2, #0
   12b04:	mov	r3, #0
   12b08:	mov	r0, r1
   12b0c:	bl	12a70 <__assert_fail@plt+0x1bb4>
   12b10:	nop	{0}
   12b14:	sub	sp, fp, #4
   12b18:	ldr	fp, [sp]
   12b1c:	add	sp, sp, #4
   12b20:	pop	{pc}		; (ldr pc, [sp], #4)
   12b24:	str	fp, [sp, #-8]!
   12b28:	str	lr, [sp, #4]
   12b2c:	add	fp, sp, #4
   12b30:	sub	sp, sp, #32
   12b34:	str	r0, [fp, #-24]	; 0xffffffe8
   12b38:	mov	r3, #0
   12b3c:	str	r3, [fp, #-8]
   12b40:	mov	r3, #0
   12b44:	str	r3, [fp, #-12]
   12b48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b4c:	bl	10e20 <fileno@plt>
   12b50:	str	r0, [fp, #-16]
   12b54:	ldr	r3, [fp, #-16]
   12b58:	cmp	r3, #0
   12b5c:	bge	12b70 <__assert_fail@plt+0x1cb4>
   12b60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b64:	bl	10e2c <fclose@plt>
   12b68:	mov	r3, r0
   12b6c:	b	12c14 <__assert_fail@plt+0x1d58>
   12b70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b74:	bl	10d9c <__freading@plt>
   12b78:	mov	r3, r0
   12b7c:	cmp	r3, #0
   12b80:	beq	12bbc <__assert_fail@plt+0x1d00>
   12b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b88:	bl	10e20 <fileno@plt>
   12b8c:	mov	r1, r0
   12b90:	mov	r3, #1
   12b94:	str	r3, [sp]
   12b98:	mov	r2, #0
   12b9c:	mov	r3, #0
   12ba0:	mov	r0, r1
   12ba4:	bl	10d3c <lseek64@plt>
   12ba8:	mvn	r2, #0
   12bac:	mvn	r3, #0
   12bb0:	cmp	r1, r3
   12bb4:	cmpeq	r0, r2
   12bb8:	beq	12be0 <__assert_fail@plt+0x1d24>
   12bbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12bc0:	bl	12c7c <__assert_fail@plt+0x1dc0>
   12bc4:	mov	r3, r0
   12bc8:	cmp	r3, #0
   12bcc:	beq	12be0 <__assert_fail@plt+0x1d24>
   12bd0:	bl	10dfc <__errno_location@plt>
   12bd4:	mov	r3, r0
   12bd8:	ldr	r3, [r3]
   12bdc:	str	r3, [fp, #-8]
   12be0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12be4:	bl	10e2c <fclose@plt>
   12be8:	str	r0, [fp, #-12]
   12bec:	ldr	r3, [fp, #-8]
   12bf0:	cmp	r3, #0
   12bf4:	beq	12c10 <__assert_fail@plt+0x1d54>
   12bf8:	bl	10dfc <__errno_location@plt>
   12bfc:	mov	r2, r0
   12c00:	ldr	r3, [fp, #-8]
   12c04:	str	r3, [r2]
   12c08:	mvn	r3, #0
   12c0c:	str	r3, [fp, #-12]
   12c10:	ldr	r3, [fp, #-12]
   12c14:	mov	r0, r3
   12c18:	sub	sp, fp, #4
   12c1c:	ldr	fp, [sp]
   12c20:	add	sp, sp, #4
   12c24:	pop	{pc}		; (ldr pc, [sp], #4)
   12c28:	str	fp, [sp, #-8]!
   12c2c:	str	lr, [sp, #4]
   12c30:	add	fp, sp, #4
   12c34:	sub	sp, sp, #16
   12c38:	str	r0, [fp, #-8]
   12c3c:	ldr	r3, [fp, #-8]
   12c40:	ldr	r3, [r3]
   12c44:	and	r3, r3, #256	; 0x100
   12c48:	cmp	r3, #0
   12c4c:	beq	12c68 <__assert_fail@plt+0x1dac>
   12c50:	mov	r3, #1
   12c54:	str	r3, [sp]
   12c58:	mov	r2, #0
   12c5c:	mov	r3, #0
   12c60:	ldr	r0, [fp, #-8]
   12c64:	bl	12d8c <__assert_fail@plt+0x1ed0>
   12c68:	nop	{0}
   12c6c:	sub	sp, fp, #4
   12c70:	ldr	fp, [sp]
   12c74:	add	sp, sp, #4
   12c78:	pop	{pc}		; (ldr pc, [sp], #4)
   12c7c:	str	fp, [sp, #-8]!
   12c80:	str	lr, [sp, #4]
   12c84:	add	fp, sp, #4
   12c88:	sub	sp, sp, #8
   12c8c:	str	r0, [fp, #-8]
   12c90:	ldr	r3, [fp, #-8]
   12c94:	cmp	r3, #0
   12c98:	beq	12cb0 <__assert_fail@plt+0x1df4>
   12c9c:	ldr	r0, [fp, #-8]
   12ca0:	bl	10d9c <__freading@plt>
   12ca4:	mov	r3, r0
   12ca8:	cmp	r3, #0
   12cac:	bne	12cc0 <__assert_fail@plt+0x1e04>
   12cb0:	ldr	r0, [fp, #-8]
   12cb4:	bl	10cac <fflush@plt>
   12cb8:	mov	r3, r0
   12cbc:	b	12cd4 <__assert_fail@plt+0x1e18>
   12cc0:	ldr	r0, [fp, #-8]
   12cc4:	bl	12c28 <__assert_fail@plt+0x1d6c>
   12cc8:	ldr	r0, [fp, #-8]
   12ccc:	bl	10cac <fflush@plt>
   12cd0:	mov	r3, r0
   12cd4:	mov	r0, r3
   12cd8:	sub	sp, fp, #4
   12cdc:	ldr	fp, [sp]
   12ce0:	add	sp, sp, #4
   12ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ce8:	str	r4, [sp, #-12]!
   12cec:	str	fp, [sp, #4]
   12cf0:	str	lr, [sp, #8]
   12cf4:	add	fp, sp, #8
   12cf8:	sub	sp, sp, #20
   12cfc:	str	r0, [fp, #-24]	; 0xffffffe8
   12d00:	bl	10dfc <__errno_location@plt>
   12d04:	mov	r3, r0
   12d08:	ldr	r3, [r3]
   12d0c:	str	r3, [fp, #-20]	; 0xffffffec
   12d10:	bl	10dfc <__errno_location@plt>
   12d14:	mov	r3, r0
   12d18:	ldr	r3, [r3]
   12d1c:	str	r3, [fp, #-16]
   12d20:	bl	10dfc <__errno_location@plt>
   12d24:	mov	r2, r0
   12d28:	mov	r3, #0
   12d2c:	str	r3, [r2]
   12d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12d34:	bl	10cb8 <free@plt>
   12d38:	bl	10dfc <__errno_location@plt>
   12d3c:	mov	r3, r0
   12d40:	ldr	r3, [r3]
   12d44:	cmp	r3, #0
   12d48:	moveq	r3, #1
   12d4c:	movne	r3, #0
   12d50:	uxtb	r3, r3
   12d54:	mov	r4, r3
   12d58:	bl	10dfc <__errno_location@plt>
   12d5c:	mov	r2, r0
   12d60:	lsl	r3, r4, #2
   12d64:	sub	r1, fp, #12
   12d68:	add	r3, r1, r3
   12d6c:	ldr	r3, [r3, #-8]
   12d70:	str	r3, [r2]
   12d74:	nop	{0}
   12d78:	sub	sp, fp, #8
   12d7c:	ldr	r4, [sp]
   12d80:	ldr	fp, [sp, #4]
   12d84:	add	sp, sp, #8
   12d88:	pop	{pc}		; (ldr pc, [sp], #4)
   12d8c:	str	fp, [sp, #-8]!
   12d90:	str	lr, [sp, #4]
   12d94:	add	fp, sp, #4
   12d98:	sub	sp, sp, #32
   12d9c:	str	r0, [fp, #-16]
   12da0:	strd	r2, [fp, #-28]	; 0xffffffe4
   12da4:	ldr	r3, [fp, #-16]
   12da8:	ldr	r2, [r3, #8]
   12dac:	ldr	r3, [fp, #-16]
   12db0:	ldr	r3, [r3, #4]
   12db4:	cmp	r2, r3
   12db8:	bne	12e50 <__assert_fail@plt+0x1f94>
   12dbc:	ldr	r3, [fp, #-16]
   12dc0:	ldr	r2, [r3, #20]
   12dc4:	ldr	r3, [fp, #-16]
   12dc8:	ldr	r3, [r3, #16]
   12dcc:	cmp	r2, r3
   12dd0:	bne	12e50 <__assert_fail@plt+0x1f94>
   12dd4:	ldr	r3, [fp, #-16]
   12dd8:	ldr	r3, [r3, #36]	; 0x24
   12ddc:	cmp	r3, #0
   12de0:	bne	12e50 <__assert_fail@plt+0x1f94>
   12de4:	ldr	r0, [fp, #-16]
   12de8:	bl	10e20 <fileno@plt>
   12dec:	mov	r1, r0
   12df0:	ldr	r3, [fp, #4]
   12df4:	str	r3, [sp]
   12df8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12dfc:	mov	r0, r1
   12e00:	bl	10d3c <lseek64@plt>
   12e04:	strd	r0, [fp, #-12]
   12e08:	ldrd	r2, [fp, #-12]
   12e0c:	mvn	r0, #0
   12e10:	mvn	r1, #0
   12e14:	cmp	r3, r1
   12e18:	cmpeq	r2, r0
   12e1c:	bne	12e28 <__assert_fail@plt+0x1f6c>
   12e20:	mvn	r3, #0
   12e24:	b	12e68 <__assert_fail@plt+0x1fac>
   12e28:	ldr	r3, [fp, #-16]
   12e2c:	ldr	r3, [r3]
   12e30:	bic	r2, r3, #16
   12e34:	ldr	r3, [fp, #-16]
   12e38:	str	r2, [r3]
   12e3c:	ldr	r1, [fp, #-16]
   12e40:	ldrd	r2, [fp, #-12]
   12e44:	strd	r2, [r1, #80]	; 0x50
   12e48:	mov	r3, #0
   12e4c:	b	12e68 <__assert_fail@plt+0x1fac>
   12e50:	ldr	r3, [fp, #4]
   12e54:	str	r3, [sp]
   12e58:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12e5c:	ldr	r0, [fp, #-16]
   12e60:	bl	10e38 <fseeko64@plt>
   12e64:	mov	r3, r0
   12e68:	mov	r0, r3
   12e6c:	sub	sp, fp, #4
   12e70:	ldr	fp, [sp]
   12e74:	add	sp, sp, #4
   12e78:	pop	{pc}		; (ldr pc, [sp], #4)
   12e7c:	str	fp, [sp, #-8]!
   12e80:	str	lr, [sp, #4]
   12e84:	add	fp, sp, #4
   12e88:	sub	sp, sp, #16
   12e8c:	str	r0, [fp, #-16]
   12e90:	ldr	r3, [fp, #-16]
   12e94:	cmp	r3, #0
   12e98:	bne	12ec0 <__assert_fail@plt+0x2004>
   12e9c:	movw	r3, #37192	; 0x9148
   12ea0:	movt	r3, #2
   12ea4:	ldr	r3, [r3]
   12ea8:	mov	r2, #55	; 0x37
   12eac:	mov	r1, #1
   12eb0:	movw	r0, #33148	; 0x817c
   12eb4:	movt	r0, #1
   12eb8:	bl	10d30 <fwrite@plt>
   12ebc:	bl	10e98 <abort@plt>
   12ec0:	mov	r1, #47	; 0x2f
   12ec4:	ldr	r0, [fp, #-16]
   12ec8:	bl	10e50 <strrchr@plt>
   12ecc:	str	r0, [fp, #-8]
   12ed0:	ldr	r3, [fp, #-8]
   12ed4:	cmp	r3, #0
   12ed8:	beq	12ee8 <__assert_fail@plt+0x202c>
   12edc:	ldr	r3, [fp, #-8]
   12ee0:	add	r3, r3, #1
   12ee4:	b	12eec <__assert_fail@plt+0x2030>
   12ee8:	ldr	r3, [fp, #-16]
   12eec:	str	r3, [fp, #-12]
   12ef0:	ldr	r2, [fp, #-12]
   12ef4:	ldr	r3, [fp, #-16]
   12ef8:	sub	r3, r2, r3
   12efc:	cmp	r3, #6
   12f00:	ble	12f70 <__assert_fail@plt+0x20b4>
   12f04:	ldr	r3, [fp, #-12]
   12f08:	sub	r3, r3, #7
   12f0c:	mov	r2, #7
   12f10:	movw	r1, #33204	; 0x81b4
   12f14:	movt	r1, #1
   12f18:	mov	r0, r3
   12f1c:	bl	10e8c <strncmp@plt>
   12f20:	mov	r3, r0
   12f24:	cmp	r3, #0
   12f28:	bne	12f70 <__assert_fail@plt+0x20b4>
   12f2c:	ldr	r3, [fp, #-12]
   12f30:	str	r3, [fp, #-16]
   12f34:	mov	r2, #3
   12f38:	movw	r1, #33212	; 0x81bc
   12f3c:	movt	r1, #1
   12f40:	ldr	r0, [fp, #-12]
   12f44:	bl	10e8c <strncmp@plt>
   12f48:	mov	r3, r0
   12f4c:	cmp	r3, #0
   12f50:	bne	12f70 <__assert_fail@plt+0x20b4>
   12f54:	ldr	r3, [fp, #-12]
   12f58:	add	r3, r3, #3
   12f5c:	str	r3, [fp, #-16]
   12f60:	movw	r3, #37176	; 0x9138
   12f64:	movt	r3, #2
   12f68:	ldr	r2, [fp, #-16]
   12f6c:	str	r2, [r3]
   12f70:	movw	r3, #37288	; 0x91a8
   12f74:	movt	r3, #2
   12f78:	ldr	r2, [fp, #-16]
   12f7c:	str	r2, [r3]
   12f80:	movw	r3, #37180	; 0x913c
   12f84:	movt	r3, #2
   12f88:	ldr	r2, [fp, #-16]
   12f8c:	str	r2, [r3]
   12f90:	nop	{0}
   12f94:	sub	sp, fp, #4
   12f98:	ldr	fp, [sp]
   12f9c:	add	sp, sp, #4
   12fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fa4:	str	fp, [sp, #-8]!
   12fa8:	str	lr, [sp, #4]
   12fac:	add	fp, sp, #4
   12fb0:	sub	sp, sp, #16
   12fb4:	str	r0, [fp, #-16]
   12fb8:	bl	10dfc <__errno_location@plt>
   12fbc:	mov	r3, r0
   12fc0:	ldr	r3, [r3]
   12fc4:	str	r3, [fp, #-8]
   12fc8:	ldr	r3, [fp, #-16]
   12fcc:	cmp	r3, #0
   12fd0:	beq	12fdc <__assert_fail@plt+0x2120>
   12fd4:	ldr	r3, [fp, #-16]
   12fd8:	b	12fe4 <__assert_fail@plt+0x2128>
   12fdc:	movw	r3, #37292	; 0x91ac
   12fe0:	movt	r3, #2
   12fe4:	mov	r1, #48	; 0x30
   12fe8:	mov	r0, r3
   12fec:	bl	16784 <__assert_fail@plt+0x58c8>
   12ff0:	mov	r3, r0
   12ff4:	str	r3, [fp, #-12]
   12ff8:	bl	10dfc <__errno_location@plt>
   12ffc:	mov	r2, r0
   13000:	ldr	r3, [fp, #-8]
   13004:	str	r3, [r2]
   13008:	ldr	r3, [fp, #-12]
   1300c:	mov	r0, r3
   13010:	sub	sp, fp, #4
   13014:	ldr	fp, [sp]
   13018:	add	sp, sp, #4
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	push	{fp}		; (str fp, [sp, #-4]!)
   13024:	add	fp, sp, #0
   13028:	sub	sp, sp, #12
   1302c:	str	r0, [fp, #-8]
   13030:	ldr	r3, [fp, #-8]
   13034:	cmp	r3, #0
   13038:	beq	13044 <__assert_fail@plt+0x2188>
   1303c:	ldr	r3, [fp, #-8]
   13040:	b	1304c <__assert_fail@plt+0x2190>
   13044:	movw	r3, #37292	; 0x91ac
   13048:	movt	r3, #2
   1304c:	ldr	r3, [r3]
   13050:	mov	r0, r3
   13054:	add	sp, fp, #0
   13058:	pop	{fp}		; (ldr fp, [sp], #4)
   1305c:	bx	lr
   13060:	push	{fp}		; (str fp, [sp, #-4]!)
   13064:	add	fp, sp, #0
   13068:	sub	sp, sp, #12
   1306c:	str	r0, [fp, #-8]
   13070:	str	r1, [fp, #-12]
   13074:	ldr	r3, [fp, #-8]
   13078:	cmp	r3, #0
   1307c:	beq	13088 <__assert_fail@plt+0x21cc>
   13080:	ldr	r3, [fp, #-8]
   13084:	b	13090 <__assert_fail@plt+0x21d4>
   13088:	movw	r3, #37292	; 0x91ac
   1308c:	movt	r3, #2
   13090:	ldr	r2, [fp, #-12]
   13094:	str	r2, [r3]
   13098:	nop	{0}
   1309c:	add	sp, fp, #0
   130a0:	pop	{fp}		; (ldr fp, [sp], #4)
   130a4:	bx	lr
   130a8:	push	{fp}		; (str fp, [sp, #-4]!)
   130ac:	add	fp, sp, #0
   130b0:	sub	sp, sp, #36	; 0x24
   130b4:	str	r0, [fp, #-24]	; 0xffffffe8
   130b8:	mov	r3, r1
   130bc:	str	r2, [fp, #-32]	; 0xffffffe0
   130c0:	strb	r3, [fp, #-25]	; 0xffffffe7
   130c4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   130c8:	strb	r3, [fp, #-5]
   130cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130d0:	cmp	r3, #0
   130d4:	beq	130e0 <__assert_fail@plt+0x2224>
   130d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130dc:	b	130e8 <__assert_fail@plt+0x222c>
   130e0:	movw	r3, #37292	; 0x91ac
   130e4:	movt	r3, #2
   130e8:	add	r2, r3, #8
   130ec:	ldrb	r3, [fp, #-5]
   130f0:	lsr	r3, r3, #5
   130f4:	uxtb	r3, r3
   130f8:	lsl	r3, r3, #2
   130fc:	add	r3, r2, r3
   13100:	str	r3, [fp, #-12]
   13104:	ldrb	r3, [fp, #-5]
   13108:	and	r3, r3, #31
   1310c:	str	r3, [fp, #-16]
   13110:	ldr	r3, [fp, #-12]
   13114:	ldr	r2, [r3]
   13118:	ldr	r3, [fp, #-16]
   1311c:	lsr	r3, r2, r3
   13120:	and	r3, r3, #1
   13124:	str	r3, [fp, #-20]	; 0xffffffec
   13128:	ldr	r3, [fp, #-12]
   1312c:	ldr	r3, [r3]
   13130:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13134:	and	r1, r2, #1
   13138:	ldr	r2, [fp, #-20]	; 0xffffffec
   1313c:	eor	r1, r1, r2
   13140:	ldr	r2, [fp, #-16]
   13144:	lsl	r2, r1, r2
   13148:	eor	r2, r2, r3
   1314c:	ldr	r3, [fp, #-12]
   13150:	str	r2, [r3]
   13154:	ldr	r3, [fp, #-20]	; 0xffffffec
   13158:	mov	r0, r3
   1315c:	add	sp, fp, #0
   13160:	pop	{fp}		; (ldr fp, [sp], #4)
   13164:	bx	lr
   13168:	push	{fp}		; (str fp, [sp, #-4]!)
   1316c:	add	fp, sp, #0
   13170:	sub	sp, sp, #20
   13174:	str	r0, [fp, #-16]
   13178:	str	r1, [fp, #-20]	; 0xffffffec
   1317c:	ldr	r3, [fp, #-16]
   13180:	cmp	r3, #0
   13184:	bne	13194 <__assert_fail@plt+0x22d8>
   13188:	movw	r3, #37292	; 0x91ac
   1318c:	movt	r3, #2
   13190:	str	r3, [fp, #-16]
   13194:	ldr	r3, [fp, #-16]
   13198:	ldr	r3, [r3, #4]
   1319c:	str	r3, [fp, #-8]
   131a0:	ldr	r3, [fp, #-16]
   131a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   131a8:	str	r2, [r3, #4]
   131ac:	ldr	r3, [fp, #-8]
   131b0:	mov	r0, r3
   131b4:	add	sp, fp, #0
   131b8:	pop	{fp}		; (ldr fp, [sp], #4)
   131bc:	bx	lr
   131c0:	str	fp, [sp, #-8]!
   131c4:	str	lr, [sp, #4]
   131c8:	add	fp, sp, #4
   131cc:	sub	sp, sp, #16
   131d0:	str	r0, [fp, #-8]
   131d4:	str	r1, [fp, #-12]
   131d8:	str	r2, [fp, #-16]
   131dc:	ldr	r3, [fp, #-8]
   131e0:	cmp	r3, #0
   131e4:	bne	131f4 <__assert_fail@plt+0x2338>
   131e8:	movw	r3, #37292	; 0x91ac
   131ec:	movt	r3, #2
   131f0:	str	r3, [fp, #-8]
   131f4:	ldr	r3, [fp, #-8]
   131f8:	mov	r2, #10
   131fc:	str	r2, [r3]
   13200:	ldr	r3, [fp, #-12]
   13204:	cmp	r3, #0
   13208:	beq	13218 <__assert_fail@plt+0x235c>
   1320c:	ldr	r3, [fp, #-16]
   13210:	cmp	r3, #0
   13214:	bne	1321c <__assert_fail@plt+0x2360>
   13218:	bl	10e98 <abort@plt>
   1321c:	ldr	r3, [fp, #-8]
   13220:	ldr	r2, [fp, #-12]
   13224:	str	r2, [r3, #40]	; 0x28
   13228:	ldr	r3, [fp, #-8]
   1322c:	ldr	r2, [fp, #-16]
   13230:	str	r2, [r3, #44]	; 0x2c
   13234:	nop	{0}
   13238:	sub	sp, fp, #4
   1323c:	ldr	fp, [sp]
   13240:	add	sp, sp, #4
   13244:	pop	{pc}		; (ldr pc, [sp], #4)
   13248:	str	fp, [sp, #-8]!
   1324c:	str	lr, [sp, #4]
   13250:	add	fp, sp, #4
   13254:	sub	sp, sp, #56	; 0x38
   13258:	str	r0, [fp, #-56]	; 0xffffffc8
   1325c:	str	r1, [fp, #-60]	; 0xffffffc4
   13260:	sub	r1, fp, #52	; 0x34
   13264:	mov	r2, #0
   13268:	mov	r3, #0
   1326c:	strd	r2, [r1]
   13270:	strd	r2, [r1, #8]
   13274:	strd	r2, [r1, #16]
   13278:	strd	r2, [r1, #24]
   1327c:	strd	r2, [r1, #32]
   13280:	strd	r2, [r1, #40]	; 0x28
   13284:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13288:	cmp	r3, #10
   1328c:	bne	13294 <__assert_fail@plt+0x23d8>
   13290:	bl	10e98 <abort@plt>
   13294:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13298:	str	r3, [fp, #-52]	; 0xffffffcc
   1329c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   132a0:	mov	r2, r3
   132a4:	sub	r3, fp, #52	; 0x34
   132a8:	ldrd	r0, [r3]
   132ac:	strd	r0, [r2]
   132b0:	ldrd	r0, [r3, #8]
   132b4:	strd	r0, [r2, #8]
   132b8:	ldrd	r0, [r3, #16]
   132bc:	strd	r0, [r2, #16]
   132c0:	ldrd	r0, [r3, #24]
   132c4:	strd	r0, [r2, #24]
   132c8:	ldrd	r0, [r3, #32]
   132cc:	strd	r0, [r2, #32]
   132d0:	ldrd	r0, [r3, #40]	; 0x28
   132d4:	strd	r0, [r2, #40]	; 0x28
   132d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   132dc:	sub	sp, fp, #4
   132e0:	ldr	fp, [sp]
   132e4:	add	sp, sp, #4
   132e8:	pop	{pc}		; (ldr pc, [sp], #4)
   132ec:	str	fp, [sp, #-8]!
   132f0:	str	lr, [sp, #4]
   132f4:	add	fp, sp, #4
   132f8:	sub	sp, sp, #16
   132fc:	str	r0, [fp, #-16]
   13300:	str	r1, [fp, #-20]	; 0xffffffec
   13304:	ldr	r0, [fp, #-16]
   13308:	bl	10dd8 <gettext@plt>
   1330c:	str	r0, [fp, #-8]
   13310:	ldr	r2, [fp, #-8]
   13314:	ldr	r3, [fp, #-16]
   13318:	cmp	r2, r3
   1331c:	beq	13328 <__assert_fail@plt+0x246c>
   13320:	ldr	r3, [fp, #-8]
   13324:	b	133d8 <__assert_fail@plt+0x251c>
   13328:	bl	16e40 <__assert_fail@plt+0x5f84>
   1332c:	str	r0, [fp, #-12]
   13330:	movw	r1, #33404	; 0x827c
   13334:	movt	r1, #1
   13338:	ldr	r0, [fp, #-12]
   1333c:	bl	16b34 <__assert_fail@plt+0x5c78>
   13340:	mov	r3, r0
   13344:	cmp	r3, #0
   13348:	bne	13374 <__assert_fail@plt+0x24b8>
   1334c:	ldr	r3, [fp, #-16]
   13350:	ldrb	r3, [r3]
   13354:	cmp	r3, #96	; 0x60
   13358:	bne	13368 <__assert_fail@plt+0x24ac>
   1335c:	movw	r3, #33412	; 0x8284
   13360:	movt	r3, #1
   13364:	b	133d8 <__assert_fail@plt+0x251c>
   13368:	movw	r3, #33416	; 0x8288
   1336c:	movt	r3, #1
   13370:	b	133d8 <__assert_fail@plt+0x251c>
   13374:	movw	r1, #33420	; 0x828c
   13378:	movt	r1, #1
   1337c:	ldr	r0, [fp, #-12]
   13380:	bl	16b34 <__assert_fail@plt+0x5c78>
   13384:	mov	r3, r0
   13388:	cmp	r3, #0
   1338c:	bne	133b8 <__assert_fail@plt+0x24fc>
   13390:	ldr	r3, [fp, #-16]
   13394:	ldrb	r3, [r3]
   13398:	cmp	r3, #96	; 0x60
   1339c:	bne	133ac <__assert_fail@plt+0x24f0>
   133a0:	movw	r3, #33428	; 0x8294
   133a4:	movt	r3, #1
   133a8:	b	133d8 <__assert_fail@plt+0x251c>
   133ac:	movw	r3, #33432	; 0x8298
   133b0:	movt	r3, #1
   133b4:	b	133d8 <__assert_fail@plt+0x251c>
   133b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133bc:	cmp	r3, #9
   133c0:	bne	133d0 <__assert_fail@plt+0x2514>
   133c4:	movw	r3, #33436	; 0x829c
   133c8:	movt	r3, #1
   133cc:	b	133d8 <__assert_fail@plt+0x251c>
   133d0:	movw	r3, #33440	; 0x82a0
   133d4:	movt	r3, #1
   133d8:	mov	r0, r3
   133dc:	sub	sp, fp, #4
   133e0:	ldr	fp, [sp]
   133e4:	add	sp, sp, #4
   133e8:	pop	{pc}		; (ldr pc, [sp], #4)
   133ec:	str	r4, [sp, #-12]!
   133f0:	str	fp, [sp, #4]
   133f4:	str	lr, [sp, #8]
   133f8:	add	fp, sp, #8
   133fc:	sub	sp, sp, #116	; 0x74
   13400:	str	r0, [fp, #-88]	; 0xffffffa8
   13404:	str	r1, [fp, #-92]	; 0xffffffa4
   13408:	str	r2, [fp, #-96]	; 0xffffffa0
   1340c:	str	r3, [fp, #-100]	; 0xffffff9c
   13410:	mov	r3, #0
   13414:	str	r3, [fp, #-20]	; 0xffffffec
   13418:	mov	r3, #0
   1341c:	str	r3, [fp, #-24]	; 0xffffffe8
   13420:	mov	r3, #0
   13424:	str	r3, [fp, #-28]	; 0xffffffe4
   13428:	mov	r3, #0
   1342c:	str	r3, [fp, #-32]	; 0xffffffe0
   13430:	mov	r3, #0
   13434:	strb	r3, [fp, #-33]	; 0xffffffdf
   13438:	bl	10d48 <__ctype_get_mb_cur_max@plt>
   1343c:	mov	r3, r0
   13440:	cmp	r3, #1
   13444:	moveq	r3, #1
   13448:	movne	r3, #0
   1344c:	strb	r3, [fp, #-57]	; 0xffffffc7
   13450:	ldr	r3, [fp, #8]
   13454:	and	r3, r3, #2
   13458:	cmp	r3, #0
   1345c:	movne	r3, #1
   13460:	moveq	r3, #0
   13464:	strb	r3, [fp, #-34]	; 0xffffffde
   13468:	mov	r3, #0
   1346c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13470:	mov	r3, #0
   13474:	strb	r3, [fp, #-36]	; 0xffffffdc
   13478:	mov	r3, #1
   1347c:	strb	r3, [fp, #-37]	; 0xffffffdb
   13480:	ldr	r3, [fp, #4]
   13484:	cmp	r3, #10
   13488:	ldrls	pc, [pc, r3, lsl #2]
   1348c:	b	136a4 <__assert_fail@plt+0x27e8>
   13490:	muleq	r1, r8, r6
   13494:	andeq	r3, r1, r0, lsl r6
   13498:	andeq	r3, r1, r4, lsr r6
   1349c:	andeq	r3, r1, r8, lsl #12
   134a0:	andeq	r3, r1, r8, lsl r6
   134a4:	andeq	r3, r1, ip, asr #9
   134a8:			; <UNDEFINED> instruction: 0x000134bc
   134ac:	andeq	r3, r1, r0, lsr r5
   134b0:	andeq	r3, r1, r4, asr #10
   134b4:	andeq	r3, r1, r4, asr #10
   134b8:	andeq	r3, r1, r4, asr #10
   134bc:	mov	r3, #5
   134c0:	str	r3, [fp, #4]
   134c4:	mov	r3, #1
   134c8:	strb	r3, [fp, #-34]	; 0xffffffde
   134cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   134d0:	eor	r3, r3, #1
   134d4:	uxtb	r3, r3
   134d8:	cmp	r3, #0
   134dc:	beq	13510 <__assert_fail@plt+0x2654>
   134e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   134e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134e8:	cmp	r2, r3
   134ec:	bcs	13504 <__assert_fail@plt+0x2648>
   134f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134f8:	add	r3, r2, r3
   134fc:	mov	r2, #34	; 0x22
   13500:	strb	r2, [r3]
   13504:	ldr	r3, [fp, #-20]	; 0xffffffec
   13508:	add	r3, r3, #1
   1350c:	str	r3, [fp, #-20]	; 0xffffffec
   13510:	mov	r3, #1
   13514:	strb	r3, [fp, #-33]	; 0xffffffdf
   13518:	movw	r3, #33436	; 0x829c
   1351c:	movt	r3, #1
   13520:	str	r3, [fp, #-28]	; 0xffffffe4
   13524:	mov	r3, #1
   13528:	str	r3, [fp, #-32]	; 0xffffffe0
   1352c:	b	136a8 <__assert_fail@plt+0x27ec>
   13530:	mov	r3, #1
   13534:	strb	r3, [fp, #-33]	; 0xffffffdf
   13538:	mov	r3, #0
   1353c:	strb	r3, [fp, #-34]	; 0xffffffde
   13540:	b	136a8 <__assert_fail@plt+0x27ec>
   13544:	ldr	r3, [fp, #4]
   13548:	cmp	r3, #10
   1354c:	beq	13578 <__assert_fail@plt+0x26bc>
   13550:	ldr	r1, [fp, #4]
   13554:	movw	r0, #33444	; 0x82a4
   13558:	movt	r0, #1
   1355c:	bl	132ec <__assert_fail@plt+0x2430>
   13560:	str	r0, [fp, #16]
   13564:	ldr	r1, [fp, #4]
   13568:	movw	r0, #33440	; 0x82a0
   1356c:	movt	r0, #1
   13570:	bl	132ec <__assert_fail@plt+0x2430>
   13574:	str	r0, [fp, #20]
   13578:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1357c:	eor	r3, r3, #1
   13580:	uxtb	r3, r3
   13584:	cmp	r3, #0
   13588:	beq	135e8 <__assert_fail@plt+0x272c>
   1358c:	ldr	r3, [fp, #16]
   13590:	str	r3, [fp, #-28]	; 0xffffffe4
   13594:	b	135d8 <__assert_fail@plt+0x271c>
   13598:	ldr	r2, [fp, #-20]	; 0xffffffec
   1359c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135a0:	cmp	r2, r3
   135a4:	bcs	135c0 <__assert_fail@plt+0x2704>
   135a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   135b0:	add	r3, r2, r3
   135b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   135b8:	ldrb	r2, [r2]
   135bc:	strb	r2, [r3]
   135c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135c4:	add	r3, r3, #1
   135c8:	str	r3, [fp, #-20]	; 0xffffffec
   135cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135d0:	add	r3, r3, #1
   135d4:	str	r3, [fp, #-28]	; 0xffffffe4
   135d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135dc:	ldrb	r3, [r3]
   135e0:	cmp	r3, #0
   135e4:	bne	13598 <__assert_fail@plt+0x26dc>
   135e8:	mov	r3, #1
   135ec:	strb	r3, [fp, #-33]	; 0xffffffdf
   135f0:	ldr	r3, [fp, #20]
   135f4:	str	r3, [fp, #-28]	; 0xffffffe4
   135f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   135fc:	bl	10de4 <strlen@plt>
   13600:	str	r0, [fp, #-32]	; 0xffffffe0
   13604:	b	136a8 <__assert_fail@plt+0x27ec>
   13608:	mov	r3, #1
   1360c:	strb	r3, [fp, #-33]	; 0xffffffdf
   13610:	mov	r3, #1
   13614:	strb	r3, [fp, #-34]	; 0xffffffde
   13618:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1361c:	eor	r3, r3, #1
   13620:	uxtb	r3, r3
   13624:	cmp	r3, #0
   13628:	beq	13634 <__assert_fail@plt+0x2778>
   1362c:	mov	r3, #1
   13630:	strb	r3, [fp, #-33]	; 0xffffffdf
   13634:	mov	r3, #2
   13638:	str	r3, [fp, #4]
   1363c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13640:	eor	r3, r3, #1
   13644:	uxtb	r3, r3
   13648:	cmp	r3, #0
   1364c:	beq	13680 <__assert_fail@plt+0x27c4>
   13650:	ldr	r2, [fp, #-20]	; 0xffffffec
   13654:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13658:	cmp	r2, r3
   1365c:	bcs	13674 <__assert_fail@plt+0x27b8>
   13660:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13664:	ldr	r3, [fp, #-20]	; 0xffffffec
   13668:	add	r3, r2, r3
   1366c:	mov	r2, #39	; 0x27
   13670:	strb	r2, [r3]
   13674:	ldr	r3, [fp, #-20]	; 0xffffffec
   13678:	add	r3, r3, #1
   1367c:	str	r3, [fp, #-20]	; 0xffffffec
   13680:	movw	r3, #33440	; 0x82a0
   13684:	movt	r3, #1
   13688:	str	r3, [fp, #-28]	; 0xffffffe4
   1368c:	mov	r3, #1
   13690:	str	r3, [fp, #-32]	; 0xffffffe0
   13694:	b	136a8 <__assert_fail@plt+0x27ec>
   13698:	mov	r3, #0
   1369c:	strb	r3, [fp, #-34]	; 0xffffffde
   136a0:	b	136a8 <__assert_fail@plt+0x27ec>
   136a4:	bl	10e98 <abort@plt>
   136a8:	mov	r3, #0
   136ac:	str	r3, [fp, #-16]
   136b0:	b	1484c <__assert_fail@plt+0x3990>
   136b4:	mov	r3, #0
   136b8:	strb	r3, [fp, #-40]	; 0xffffffd8
   136bc:	mov	r3, #0
   136c0:	strb	r3, [fp, #-41]	; 0xffffffd7
   136c4:	mov	r3, #0
   136c8:	strb	r3, [fp, #-42]	; 0xffffffd6
   136cc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   136d0:	cmp	r3, #0
   136d4:	beq	13770 <__assert_fail@plt+0x28b4>
   136d8:	ldr	r3, [fp, #4]
   136dc:	cmp	r3, #2
   136e0:	beq	13770 <__assert_fail@plt+0x28b4>
   136e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136e8:	cmp	r3, #0
   136ec:	beq	13770 <__assert_fail@plt+0x28b4>
   136f0:	ldr	r2, [fp, #-16]
   136f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136f8:	add	r4, r2, r3
   136fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13700:	cmn	r3, #1
   13704:	bne	13728 <__assert_fail@plt+0x286c>
   13708:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1370c:	cmp	r3, #1
   13710:	bls	13728 <__assert_fail@plt+0x286c>
   13714:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13718:	bl	10de4 <strlen@plt>
   1371c:	str	r0, [fp, #-100]	; 0xffffff9c
   13720:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13724:	b	1372c <__assert_fail@plt+0x2870>
   13728:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1372c:	cmp	r3, r4
   13730:	bcc	13770 <__assert_fail@plt+0x28b4>
   13734:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13738:	ldr	r3, [fp, #-16]
   1373c:	add	r3, r2, r3
   13740:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13744:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13748:	mov	r0, r3
   1374c:	bl	10ce8 <memcmp@plt>
   13750:	mov	r3, r0
   13754:	cmp	r3, #0
   13758:	bne	13770 <__assert_fail@plt+0x28b4>
   1375c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13760:	cmp	r3, #0
   13764:	bne	14a08 <__assert_fail@plt+0x3b4c>
   13768:	mov	r3, #1
   1376c:	strb	r3, [fp, #-40]	; 0xffffffd8
   13770:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13774:	ldr	r3, [fp, #-16]
   13778:	add	r3, r2, r3
   1377c:	ldrb	r3, [r3]
   13780:	strb	r3, [fp, #-38]	; 0xffffffda
   13784:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13788:	cmp	r3, #126	; 0x7e
   1378c:	ldrls	pc, [pc, r3, lsl #2]
   13790:	b	13fc8 <__assert_fail@plt+0x310c>
   13794:	muleq	r1, r0, r9
   13798:	andeq	r3, r1, r8, asr #31
   1379c:	andeq	r3, r1, r8, asr #31
   137a0:	andeq	r3, r1, r8, asr #31
   137a4:	andeq	r3, r1, r8, asr #31
   137a8:	andeq	r3, r1, r8, asr #31
   137ac:	andeq	r3, r1, r8, asr #31
   137b0:	andeq	r3, r1, r4, lsl #27
   137b4:	muleq	r1, r0, sp
   137b8:	andeq	r3, r1, r0, asr #27
   137bc:	andeq	r3, r1, r8, lsr #27
   137c0:	andeq	r3, r1, ip, asr #27
   137c4:	muleq	r1, ip, sp
   137c8:			; <UNDEFINED> instruction: 0x00013db4
   137cc:	andeq	r3, r1, r8, asr #31
   137d0:	andeq	r3, r1, r8, asr #31
   137d4:	andeq	r3, r1, r8, asr #31
   137d8:	andeq	r3, r1, r8, asr #31
   137dc:	andeq	r3, r1, r8, asr #31
   137e0:	andeq	r3, r1, r8, asr #31
   137e4:	andeq	r3, r1, r8, asr #31
   137e8:	andeq	r3, r1, r8, asr #31
   137ec:	andeq	r3, r1, r8, asr #31
   137f0:	andeq	r3, r1, r8, asr #31
   137f4:	andeq	r3, r1, r8, asr #31
   137f8:	andeq	r3, r1, r8, asr #31
   137fc:	andeq	r3, r1, r8, asr #31
   13800:	andeq	r3, r1, r8, asr #31
   13804:	andeq	r3, r1, r8, asr #31
   13808:	andeq	r3, r1, r8, asr #31
   1380c:	andeq	r3, r1, r8, asr #31
   13810:	andeq	r3, r1, r8, asr #31
   13814:	andeq	r3, r1, ip, lsr #29
   13818:			; <UNDEFINED> instruction: 0x00013eb4
   1381c:			; <UNDEFINED> instruction: 0x00013eb4
   13820:	andeq	r3, r1, r0, lsr #29
   13824:			; <UNDEFINED> instruction: 0x00013eb4
   13828:			; <UNDEFINED> instruction: 0x00013fbc
   1382c:			; <UNDEFINED> instruction: 0x00013eb4
   13830:	ldrdeq	r3, [r1], -r0
   13834:			; <UNDEFINED> instruction: 0x00013eb4
   13838:			; <UNDEFINED> instruction: 0x00013eb4
   1383c:			; <UNDEFINED> instruction: 0x00013eb4
   13840:			; <UNDEFINED> instruction: 0x00013fbc
   13844:			; <UNDEFINED> instruction: 0x00013fbc
   13848:			; <UNDEFINED> instruction: 0x00013fbc
   1384c:			; <UNDEFINED> instruction: 0x00013fbc
   13850:			; <UNDEFINED> instruction: 0x00013fbc
   13854:			; <UNDEFINED> instruction: 0x00013fbc
   13858:			; <UNDEFINED> instruction: 0x00013fbc
   1385c:			; <UNDEFINED> instruction: 0x00013fbc
   13860:			; <UNDEFINED> instruction: 0x00013fbc
   13864:			; <UNDEFINED> instruction: 0x00013fbc
   13868:			; <UNDEFINED> instruction: 0x00013fbc
   1386c:			; <UNDEFINED> instruction: 0x00013fbc
   13870:			; <UNDEFINED> instruction: 0x00013fbc
   13874:			; <UNDEFINED> instruction: 0x00013fbc
   13878:			; <UNDEFINED> instruction: 0x00013fbc
   1387c:			; <UNDEFINED> instruction: 0x00013fbc
   13880:			; <UNDEFINED> instruction: 0x00013eb4
   13884:			; <UNDEFINED> instruction: 0x00013eb4
   13888:			; <UNDEFINED> instruction: 0x00013eb4
   1388c:			; <UNDEFINED> instruction: 0x00013eb4
   13890:	andeq	r3, r1, r0, ror fp
   13894:	andeq	r3, r1, r8, asr #31
   13898:			; <UNDEFINED> instruction: 0x00013fbc
   1389c:			; <UNDEFINED> instruction: 0x00013fbc
   138a0:			; <UNDEFINED> instruction: 0x00013fbc
   138a4:			; <UNDEFINED> instruction: 0x00013fbc
   138a8:			; <UNDEFINED> instruction: 0x00013fbc
   138ac:			; <UNDEFINED> instruction: 0x00013fbc
   138b0:			; <UNDEFINED> instruction: 0x00013fbc
   138b4:			; <UNDEFINED> instruction: 0x00013fbc
   138b8:			; <UNDEFINED> instruction: 0x00013fbc
   138bc:			; <UNDEFINED> instruction: 0x00013fbc
   138c0:			; <UNDEFINED> instruction: 0x00013fbc
   138c4:			; <UNDEFINED> instruction: 0x00013fbc
   138c8:			; <UNDEFINED> instruction: 0x00013fbc
   138cc:			; <UNDEFINED> instruction: 0x00013fbc
   138d0:			; <UNDEFINED> instruction: 0x00013fbc
   138d4:			; <UNDEFINED> instruction: 0x00013fbc
   138d8:			; <UNDEFINED> instruction: 0x00013fbc
   138dc:			; <UNDEFINED> instruction: 0x00013fbc
   138e0:			; <UNDEFINED> instruction: 0x00013fbc
   138e4:			; <UNDEFINED> instruction: 0x00013fbc
   138e8:			; <UNDEFINED> instruction: 0x00013fbc
   138ec:			; <UNDEFINED> instruction: 0x00013fbc
   138f0:			; <UNDEFINED> instruction: 0x00013fbc
   138f4:			; <UNDEFINED> instruction: 0x00013fbc
   138f8:			; <UNDEFINED> instruction: 0x00013fbc
   138fc:			; <UNDEFINED> instruction: 0x00013fbc
   13900:			; <UNDEFINED> instruction: 0x00013eb4
   13904:	ldrdeq	r3, [r1], -r8
   13908:			; <UNDEFINED> instruction: 0x00013fbc
   1390c:			; <UNDEFINED> instruction: 0x00013eb4
   13910:			; <UNDEFINED> instruction: 0x00013fbc
   13914:			; <UNDEFINED> instruction: 0x00013eb4
   13918:			; <UNDEFINED> instruction: 0x00013fbc
   1391c:			; <UNDEFINED> instruction: 0x00013fbc
   13920:			; <UNDEFINED> instruction: 0x00013fbc
   13924:			; <UNDEFINED> instruction: 0x00013fbc
   13928:			; <UNDEFINED> instruction: 0x00013fbc
   1392c:			; <UNDEFINED> instruction: 0x00013fbc
   13930:			; <UNDEFINED> instruction: 0x00013fbc
   13934:			; <UNDEFINED> instruction: 0x00013fbc
   13938:			; <UNDEFINED> instruction: 0x00013fbc
   1393c:			; <UNDEFINED> instruction: 0x00013fbc
   13940:			; <UNDEFINED> instruction: 0x00013fbc
   13944:			; <UNDEFINED> instruction: 0x00013fbc
   13948:			; <UNDEFINED> instruction: 0x00013fbc
   1394c:			; <UNDEFINED> instruction: 0x00013fbc
   13950:			; <UNDEFINED> instruction: 0x00013fbc
   13954:			; <UNDEFINED> instruction: 0x00013fbc
   13958:			; <UNDEFINED> instruction: 0x00013fbc
   1395c:			; <UNDEFINED> instruction: 0x00013fbc
   13960:			; <UNDEFINED> instruction: 0x00013fbc
   13964:			; <UNDEFINED> instruction: 0x00013fbc
   13968:			; <UNDEFINED> instruction: 0x00013fbc
   1396c:			; <UNDEFINED> instruction: 0x00013fbc
   13970:			; <UNDEFINED> instruction: 0x00013fbc
   13974:			; <UNDEFINED> instruction: 0x00013fbc
   13978:			; <UNDEFINED> instruction: 0x00013fbc
   1397c:			; <UNDEFINED> instruction: 0x00013fbc
   13980:	andeq	r3, r1, r8, asr lr
   13984:			; <UNDEFINED> instruction: 0x00013eb4
   13988:	andeq	r3, r1, r8, asr lr
   1398c:	andeq	r3, r1, r0, lsr #29
   13990:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13994:	cmp	r3, #0
   13998:	beq	13b5c <__assert_fail@plt+0x2ca0>
   1399c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   139a0:	cmp	r3, #0
   139a4:	bne	14a10 <__assert_fail@plt+0x3b54>
   139a8:	mov	r3, #1
   139ac:	strb	r3, [fp, #-41]	; 0xffffffd7
   139b0:	ldr	r3, [fp, #4]
   139b4:	cmp	r3, #2
   139b8:	bne	13a68 <__assert_fail@plt+0x2bac>
   139bc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   139c0:	eor	r3, r3, #1
   139c4:	uxtb	r3, r3
   139c8:	cmp	r3, #0
   139cc:	beq	13a68 <__assert_fail@plt+0x2bac>
   139d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   139d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139d8:	cmp	r2, r3
   139dc:	bcs	139f4 <__assert_fail@plt+0x2b38>
   139e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139e8:	add	r3, r2, r3
   139ec:	mov	r2, #39	; 0x27
   139f0:	strb	r2, [r3]
   139f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139f8:	add	r3, r3, #1
   139fc:	str	r3, [fp, #-20]	; 0xffffffec
   13a00:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a08:	cmp	r2, r3
   13a0c:	bcs	13a24 <__assert_fail@plt+0x2b68>
   13a10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a18:	add	r3, r2, r3
   13a1c:	mov	r2, #36	; 0x24
   13a20:	strb	r2, [r3]
   13a24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a28:	add	r3, r3, #1
   13a2c:	str	r3, [fp, #-20]	; 0xffffffec
   13a30:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a38:	cmp	r2, r3
   13a3c:	bcs	13a54 <__assert_fail@plt+0x2b98>
   13a40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a48:	add	r3, r2, r3
   13a4c:	mov	r2, #39	; 0x27
   13a50:	strb	r2, [r3]
   13a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a58:	add	r3, r3, #1
   13a5c:	str	r3, [fp, #-20]	; 0xffffffec
   13a60:	mov	r3, #1
   13a64:	strb	r3, [fp, #-35]	; 0xffffffdd
   13a68:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a70:	cmp	r2, r3
   13a74:	bcs	13a8c <__assert_fail@plt+0x2bd0>
   13a78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a80:	add	r3, r2, r3
   13a84:	mov	r2, #92	; 0x5c
   13a88:	strb	r2, [r3]
   13a8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a90:	add	r3, r3, #1
   13a94:	str	r3, [fp, #-20]	; 0xffffffec
   13a98:	ldr	r3, [fp, #4]
   13a9c:	cmp	r3, #2
   13aa0:	beq	13b50 <__assert_fail@plt+0x2c94>
   13aa4:	ldr	r3, [fp, #-16]
   13aa8:	add	r3, r3, #1
   13aac:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13ab0:	cmp	r2, r3
   13ab4:	bls	13b50 <__assert_fail@plt+0x2c94>
   13ab8:	ldr	r3, [fp, #-16]
   13abc:	add	r3, r3, #1
   13ac0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13ac4:	add	r3, r2, r3
   13ac8:	ldrb	r3, [r3]
   13acc:	cmp	r3, #47	; 0x2f
   13ad0:	bls	13b50 <__assert_fail@plt+0x2c94>
   13ad4:	ldr	r3, [fp, #-16]
   13ad8:	add	r3, r3, #1
   13adc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13ae0:	add	r3, r2, r3
   13ae4:	ldrb	r3, [r3]
   13ae8:	cmp	r3, #57	; 0x39
   13aec:	bhi	13b50 <__assert_fail@plt+0x2c94>
   13af0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13af4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13af8:	cmp	r2, r3
   13afc:	bcs	13b14 <__assert_fail@plt+0x2c58>
   13b00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b08:	add	r3, r2, r3
   13b0c:	mov	r2, #48	; 0x30
   13b10:	strb	r2, [r3]
   13b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b18:	add	r3, r3, #1
   13b1c:	str	r3, [fp, #-20]	; 0xffffffec
   13b20:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b28:	cmp	r2, r3
   13b2c:	bcs	13b44 <__assert_fail@plt+0x2c88>
   13b30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b38:	add	r3, r2, r3
   13b3c:	mov	r2, #48	; 0x30
   13b40:	strb	r2, [r3]
   13b44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b48:	add	r3, r3, #1
   13b4c:	str	r3, [fp, #-20]	; 0xffffffec
   13b50:	mov	r3, #48	; 0x30
   13b54:	strb	r3, [fp, #-38]	; 0xffffffda
   13b58:	b	14598 <__assert_fail@plt+0x36dc>
   13b5c:	ldr	r3, [fp, #8]
   13b60:	and	r3, r3, #1
   13b64:	cmp	r3, #0
   13b68:	beq	14598 <__assert_fail@plt+0x36dc>
   13b6c:	b	14840 <__assert_fail@plt+0x3984>
   13b70:	ldr	r3, [fp, #4]
   13b74:	cmp	r3, #2
   13b78:	beq	13b8c <__assert_fail@plt+0x2cd0>
   13b7c:	ldr	r3, [fp, #4]
   13b80:	cmp	r3, #5
   13b84:	beq	13b9c <__assert_fail@plt+0x2ce0>
   13b88:	b	13d80 <__assert_fail@plt+0x2ec4>
   13b8c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b90:	cmp	r3, #0
   13b94:	beq	13d74 <__assert_fail@plt+0x2eb8>
   13b98:	b	14a44 <__assert_fail@plt+0x3b88>
   13b9c:	ldr	r3, [fp, #8]
   13ba0:	and	r3, r3, #4
   13ba4:	cmp	r3, #0
   13ba8:	beq	13d7c <__assert_fail@plt+0x2ec0>
   13bac:	ldr	r3, [fp, #-16]
   13bb0:	add	r3, r3, #2
   13bb4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13bb8:	cmp	r2, r3
   13bbc:	bls	13d7c <__assert_fail@plt+0x2ec0>
   13bc0:	ldr	r3, [fp, #-16]
   13bc4:	add	r3, r3, #1
   13bc8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13bcc:	add	r3, r2, r3
   13bd0:	ldrb	r3, [r3]
   13bd4:	cmp	r3, #63	; 0x3f
   13bd8:	bne	13d7c <__assert_fail@plt+0x2ec0>
   13bdc:	ldr	r3, [fp, #-16]
   13be0:	add	r3, r3, #2
   13be4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13be8:	add	r3, r2, r3
   13bec:	ldrb	r3, [r3]
   13bf0:	sub	r3, r3, #33	; 0x21
   13bf4:	cmp	r3, #29
   13bf8:	ldrls	pc, [pc, r3, lsl #2]
   13bfc:	b	13d6c <__assert_fail@plt+0x2eb0>
   13c00:	andeq	r3, r1, r8, ror ip
   13c04:	andeq	r3, r1, ip, ror #26
   13c08:	andeq	r3, r1, ip, ror #26
   13c0c:	andeq	r3, r1, ip, ror #26
   13c10:	andeq	r3, r1, ip, ror #26
   13c14:	andeq	r3, r1, ip, ror #26
   13c18:	andeq	r3, r1, r8, ror ip
   13c1c:	andeq	r3, r1, r8, ror ip
   13c20:	andeq	r3, r1, r8, ror ip
   13c24:	andeq	r3, r1, ip, ror #26
   13c28:	andeq	r3, r1, ip, ror #26
   13c2c:	andeq	r3, r1, ip, ror #26
   13c30:	andeq	r3, r1, r8, ror ip
   13c34:	andeq	r3, r1, ip, ror #26
   13c38:	andeq	r3, r1, r8, ror ip
   13c3c:	andeq	r3, r1, ip, ror #26
   13c40:	andeq	r3, r1, ip, ror #26
   13c44:	andeq	r3, r1, ip, ror #26
   13c48:	andeq	r3, r1, ip, ror #26
   13c4c:	andeq	r3, r1, ip, ror #26
   13c50:	andeq	r3, r1, ip, ror #26
   13c54:	andeq	r3, r1, ip, ror #26
   13c58:	andeq	r3, r1, ip, ror #26
   13c5c:	andeq	r3, r1, ip, ror #26
   13c60:	andeq	r3, r1, ip, ror #26
   13c64:	andeq	r3, r1, ip, ror #26
   13c68:	andeq	r3, r1, ip, ror #26
   13c6c:	andeq	r3, r1, r8, ror ip
   13c70:	andeq	r3, r1, r8, ror ip
   13c74:	andeq	r3, r1, r8, ror ip
   13c78:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13c7c:	cmp	r3, #0
   13c80:	bne	14a18 <__assert_fail@plt+0x3b5c>
   13c84:	ldr	r3, [fp, #-16]
   13c88:	add	r3, r3, #2
   13c8c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13c90:	add	r3, r2, r3
   13c94:	ldrb	r3, [r3]
   13c98:	strb	r3, [fp, #-38]	; 0xffffffda
   13c9c:	ldr	r3, [fp, #-16]
   13ca0:	add	r3, r3, #2
   13ca4:	str	r3, [fp, #-16]
   13ca8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13cb0:	cmp	r2, r3
   13cb4:	bcs	13ccc <__assert_fail@plt+0x2e10>
   13cb8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cc0:	add	r3, r2, r3
   13cc4:	mov	r2, #63	; 0x3f
   13cc8:	strb	r2, [r3]
   13ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cd0:	add	r3, r3, #1
   13cd4:	str	r3, [fp, #-20]	; 0xffffffec
   13cd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cdc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ce0:	cmp	r2, r3
   13ce4:	bcs	13cfc <__assert_fail@plt+0x2e40>
   13ce8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cf0:	add	r3, r2, r3
   13cf4:	mov	r2, #34	; 0x22
   13cf8:	strb	r2, [r3]
   13cfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d00:	add	r3, r3, #1
   13d04:	str	r3, [fp, #-20]	; 0xffffffec
   13d08:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d10:	cmp	r2, r3
   13d14:	bcs	13d2c <__assert_fail@plt+0x2e70>
   13d18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d20:	add	r3, r2, r3
   13d24:	mov	r2, #34	; 0x22
   13d28:	strb	r2, [r3]
   13d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d30:	add	r3, r3, #1
   13d34:	str	r3, [fp, #-20]	; 0xffffffec
   13d38:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d40:	cmp	r2, r3
   13d44:	bcs	13d5c <__assert_fail@plt+0x2ea0>
   13d48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d50:	add	r3, r2, r3
   13d54:	mov	r2, #63	; 0x3f
   13d58:	strb	r2, [r3]
   13d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d60:	add	r3, r3, #1
   13d64:	str	r3, [fp, #-20]	; 0xffffffec
   13d68:	b	13d70 <__assert_fail@plt+0x2eb4>
   13d6c:	nop	{0}
   13d70:	b	13d7c <__assert_fail@plt+0x2ec0>
   13d74:	nop	{0}
   13d78:	b	145cc <__assert_fail@plt+0x3710>
   13d7c:	nop	{0}
   13d80:	b	145cc <__assert_fail@plt+0x3710>
   13d84:	mov	r3, #97	; 0x61
   13d88:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d8c:	b	13e40 <__assert_fail@plt+0x2f84>
   13d90:	mov	r3, #98	; 0x62
   13d94:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d98:	b	13e40 <__assert_fail@plt+0x2f84>
   13d9c:	mov	r3, #102	; 0x66
   13da0:	strb	r3, [fp, #-39]	; 0xffffffd9
   13da4:	b	13e40 <__assert_fail@plt+0x2f84>
   13da8:	mov	r3, #110	; 0x6e
   13dac:	strb	r3, [fp, #-39]	; 0xffffffd9
   13db0:	b	13e24 <__assert_fail@plt+0x2f68>
   13db4:	mov	r3, #114	; 0x72
   13db8:	strb	r3, [fp, #-39]	; 0xffffffd9
   13dbc:	b	13e24 <__assert_fail@plt+0x2f68>
   13dc0:	mov	r3, #116	; 0x74
   13dc4:	strb	r3, [fp, #-39]	; 0xffffffd9
   13dc8:	b	13e24 <__assert_fail@plt+0x2f68>
   13dcc:	mov	r3, #118	; 0x76
   13dd0:	strb	r3, [fp, #-39]	; 0xffffffd9
   13dd4:	b	13e40 <__assert_fail@plt+0x2f84>
   13dd8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ddc:	strb	r3, [fp, #-39]	; 0xffffffd9
   13de0:	ldr	r3, [fp, #4]
   13de4:	cmp	r3, #2
   13de8:	bne	13dfc <__assert_fail@plt+0x2f40>
   13dec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13df0:	cmp	r3, #0
   13df4:	beq	14758 <__assert_fail@plt+0x389c>
   13df8:	b	14a44 <__assert_fail@plt+0x3b88>
   13dfc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13e00:	cmp	r3, #0
   13e04:	beq	13e20 <__assert_fail@plt+0x2f64>
   13e08:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e0c:	cmp	r3, #0
   13e10:	beq	13e20 <__assert_fail@plt+0x2f64>
   13e14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13e18:	cmp	r3, #0
   13e1c:	bne	14760 <__assert_fail@plt+0x38a4>
   13e20:	nop	{0}
   13e24:	ldr	r3, [fp, #4]
   13e28:	cmp	r3, #2
   13e2c:	bne	13e3c <__assert_fail@plt+0x2f80>
   13e30:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e34:	cmp	r3, #0
   13e38:	bne	14a20 <__assert_fail@plt+0x3b64>
   13e3c:	nop	{0}
   13e40:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13e44:	cmp	r3, #0
   13e48:	beq	145a0 <__assert_fail@plt+0x36e4>
   13e4c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13e50:	strb	r3, [fp, #-38]	; 0xffffffda
   13e54:	b	14658 <__assert_fail@plt+0x379c>
   13e58:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13e5c:	cmn	r3, #1
   13e60:	bne	13e84 <__assert_fail@plt+0x2fc8>
   13e64:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13e68:	add	r3, r3, #1
   13e6c:	ldrb	r3, [r3]
   13e70:	cmp	r3, #0
   13e74:	movne	r3, #1
   13e78:	moveq	r3, #0
   13e7c:	uxtb	r3, r3
   13e80:	b	13e98 <__assert_fail@plt+0x2fdc>
   13e84:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13e88:	cmp	r3, #1
   13e8c:	movne	r3, #1
   13e90:	moveq	r3, #0
   13e94:	uxtb	r3, r3
   13e98:	cmp	r3, #0
   13e9c:	bne	145a8 <__assert_fail@plt+0x36ec>
   13ea0:	ldr	r3, [fp, #-16]
   13ea4:	cmp	r3, #0
   13ea8:	bne	145b0 <__assert_fail@plt+0x36f4>
   13eac:	mov	r3, #1
   13eb0:	strb	r3, [fp, #-42]	; 0xffffffd6
   13eb4:	ldr	r3, [fp, #4]
   13eb8:	cmp	r3, #2
   13ebc:	bne	145b8 <__assert_fail@plt+0x36fc>
   13ec0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ec4:	cmp	r3, #0
   13ec8:	beq	145b8 <__assert_fail@plt+0x36fc>
   13ecc:	b	14a44 <__assert_fail@plt+0x3b88>
   13ed0:	mov	r3, #1
   13ed4:	strb	r3, [fp, #-36]	; 0xffffffdc
   13ed8:	mov	r3, #1
   13edc:	strb	r3, [fp, #-42]	; 0xffffffd6
   13ee0:	ldr	r3, [fp, #4]
   13ee4:	cmp	r3, #2
   13ee8:	bne	145c0 <__assert_fail@plt+0x3704>
   13eec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ef0:	cmp	r3, #0
   13ef4:	bne	14a28 <__assert_fail@plt+0x3b6c>
   13ef8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13efc:	cmp	r3, #0
   13f00:	beq	13f20 <__assert_fail@plt+0x3064>
   13f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f08:	cmp	r3, #0
   13f0c:	bne	13f20 <__assert_fail@plt+0x3064>
   13f10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f14:	str	r3, [fp, #-24]	; 0xffffffe8
   13f18:	mov	r3, #0
   13f1c:	str	r3, [fp, #-92]	; 0xffffffa4
   13f20:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f28:	cmp	r2, r3
   13f2c:	bcs	13f44 <__assert_fail@plt+0x3088>
   13f30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f38:	add	r3, r2, r3
   13f3c:	mov	r2, #39	; 0x27
   13f40:	strb	r2, [r3]
   13f44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f48:	add	r3, r3, #1
   13f4c:	str	r3, [fp, #-20]	; 0xffffffec
   13f50:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f54:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f58:	cmp	r2, r3
   13f5c:	bcs	13f74 <__assert_fail@plt+0x30b8>
   13f60:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f68:	add	r3, r2, r3
   13f6c:	mov	r2, #92	; 0x5c
   13f70:	strb	r2, [r3]
   13f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f78:	add	r3, r3, #1
   13f7c:	str	r3, [fp, #-20]	; 0xffffffec
   13f80:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f88:	cmp	r2, r3
   13f8c:	bcs	13fa4 <__assert_fail@plt+0x30e8>
   13f90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f98:	add	r3, r2, r3
   13f9c:	mov	r2, #39	; 0x27
   13fa0:	strb	r2, [r3]
   13fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fa8:	add	r3, r3, #1
   13fac:	str	r3, [fp, #-20]	; 0xffffffec
   13fb0:	mov	r3, #0
   13fb4:	strb	r3, [fp, #-35]	; 0xffffffdd
   13fb8:	b	145c0 <__assert_fail@plt+0x3704>
   13fbc:	mov	r3, #1
   13fc0:	strb	r3, [fp, #-42]	; 0xffffffd6
   13fc4:	b	145cc <__assert_fail@plt+0x3710>
   13fc8:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13fcc:	cmp	r3, #0
   13fd0:	beq	14010 <__assert_fail@plt+0x3154>
   13fd4:	mov	r3, #1
   13fd8:	str	r3, [fp, #-48]	; 0xffffffd0
   13fdc:	bl	10dc0 <__ctype_b_loc@plt>
   13fe0:	mov	r3, r0
   13fe4:	ldr	r2, [r3]
   13fe8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13fec:	lsl	r3, r3, #1
   13ff0:	add	r3, r2, r3
   13ff4:	ldrh	r3, [r3]
   13ff8:	and	r3, r3, #16384	; 0x4000
   13ffc:	cmp	r3, #0
   14000:	movne	r3, #1
   14004:	moveq	r3, #0
   14008:	strb	r3, [fp, #-49]	; 0xffffffcf
   1400c:	b	1425c <__assert_fail@plt+0x33a0>
   14010:	sub	r3, fp, #76	; 0x4c
   14014:	mov	r2, #8
   14018:	mov	r1, #0
   1401c:	mov	r0, r3
   14020:	bl	10e14 <memset@plt>
   14024:	mov	r3, #0
   14028:	str	r3, [fp, #-48]	; 0xffffffd0
   1402c:	mov	r3, #1
   14030:	strb	r3, [fp, #-49]	; 0xffffffcf
   14034:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14038:	cmn	r3, #1
   1403c:	bne	1404c <__assert_fail@plt+0x3190>
   14040:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14044:	bl	10de4 <strlen@plt>
   14048:	str	r0, [fp, #-100]	; 0xffffff9c
   1404c:	ldr	r2, [fp, #-16]
   14050:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14054:	add	r3, r2, r3
   14058:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1405c:	add	r1, r2, r3
   14060:	ldr	r2, [fp, #-16]
   14064:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14068:	add	r3, r2, r3
   1406c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14070:	sub	r2, r2, r3
   14074:	sub	r3, fp, #76	; 0x4c
   14078:	sub	r0, fp, #80	; 0x50
   1407c:	bl	16ea8 <__assert_fail@plt+0x5fec>
   14080:	str	r0, [fp, #-64]	; 0xffffffc0
   14084:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14088:	cmp	r3, #0
   1408c:	beq	14250 <__assert_fail@plt+0x3394>
   14090:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14094:	cmn	r3, #1
   14098:	bne	140a8 <__assert_fail@plt+0x31ec>
   1409c:	mov	r3, #0
   140a0:	strb	r3, [fp, #-49]	; 0xffffffcf
   140a4:	b	1425c <__assert_fail@plt+0x33a0>
   140a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   140ac:	cmn	r3, #2
   140b0:	bne	14108 <__assert_fail@plt+0x324c>
   140b4:	mov	r3, #0
   140b8:	strb	r3, [fp, #-49]	; 0xffffffcf
   140bc:	b	140cc <__assert_fail@plt+0x3210>
   140c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   140c4:	add	r3, r3, #1
   140c8:	str	r3, [fp, #-48]	; 0xffffffd0
   140cc:	ldr	r2, [fp, #-16]
   140d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   140d4:	add	r3, r2, r3
   140d8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   140dc:	cmp	r2, r3
   140e0:	bls	14258 <__assert_fail@plt+0x339c>
   140e4:	ldr	r2, [fp, #-16]
   140e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   140ec:	add	r3, r2, r3
   140f0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   140f4:	add	r3, r2, r3
   140f8:	ldrb	r3, [r3]
   140fc:	cmp	r3, #0
   14100:	bne	140c0 <__assert_fail@plt+0x3204>
   14104:	b	14258 <__assert_fail@plt+0x339c>
   14108:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1410c:	cmp	r3, #0
   14110:	beq	14204 <__assert_fail@plt+0x3348>
   14114:	ldr	r3, [fp, #4]
   14118:	cmp	r3, #2
   1411c:	bne	14204 <__assert_fail@plt+0x3348>
   14120:	mov	r3, #1
   14124:	str	r3, [fp, #-56]	; 0xffffffc8
   14128:	b	141f4 <__assert_fail@plt+0x3338>
   1412c:	ldr	r2, [fp, #-16]
   14130:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14134:	add	r2, r2, r3
   14138:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1413c:	add	r3, r2, r3
   14140:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14144:	add	r3, r2, r3
   14148:	ldrb	r3, [r3]
   1414c:	sub	r3, r3, #91	; 0x5b
   14150:	cmp	r3, #33	; 0x21
   14154:	ldrls	pc, [pc, r3, lsl #2]
   14158:	b	141e4 <__assert_fail@plt+0x3328>
   1415c:	andeq	r4, r1, r4, asr #20
   14160:	andeq	r4, r1, r4, asr #20
   14164:	andeq	r4, r1, r4, ror #3
   14168:	andeq	r4, r1, r4, asr #20
   1416c:	andeq	r4, r1, r4, ror #3
   14170:	andeq	r4, r1, r4, asr #20
   14174:	andeq	r4, r1, r4, ror #3
   14178:	andeq	r4, r1, r4, ror #3
   1417c:	andeq	r4, r1, r4, ror #3
   14180:	andeq	r4, r1, r4, ror #3
   14184:	andeq	r4, r1, r4, ror #3
   14188:	andeq	r4, r1, r4, ror #3
   1418c:	andeq	r4, r1, r4, ror #3
   14190:	andeq	r4, r1, r4, ror #3
   14194:	andeq	r4, r1, r4, ror #3
   14198:	andeq	r4, r1, r4, ror #3
   1419c:	andeq	r4, r1, r4, ror #3
   141a0:	andeq	r4, r1, r4, ror #3
   141a4:	andeq	r4, r1, r4, ror #3
   141a8:	andeq	r4, r1, r4, ror #3
   141ac:	andeq	r4, r1, r4, ror #3
   141b0:	andeq	r4, r1, r4, ror #3
   141b4:	andeq	r4, r1, r4, ror #3
   141b8:	andeq	r4, r1, r4, ror #3
   141bc:	andeq	r4, r1, r4, ror #3
   141c0:	andeq	r4, r1, r4, ror #3
   141c4:	andeq	r4, r1, r4, ror #3
   141c8:	andeq	r4, r1, r4, ror #3
   141cc:	andeq	r4, r1, r4, ror #3
   141d0:	andeq	r4, r1, r4, ror #3
   141d4:	andeq	r4, r1, r4, ror #3
   141d8:	andeq	r4, r1, r4, ror #3
   141dc:	andeq	r4, r1, r4, ror #3
   141e0:	andeq	r4, r1, r4, asr #20
   141e4:	nop	{0}
   141e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   141ec:	add	r3, r3, #1
   141f0:	str	r3, [fp, #-56]	; 0xffffffc8
   141f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   141f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   141fc:	cmp	r2, r3
   14200:	bcc	1412c <__assert_fail@plt+0x3270>
   14204:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14208:	mov	r0, r3
   1420c:	bl	10d24 <iswprint@plt>
   14210:	mov	r3, r0
   14214:	cmp	r3, #0
   14218:	bne	14224 <__assert_fail@plt+0x3368>
   1421c:	mov	r3, #0
   14220:	strb	r3, [fp, #-49]	; 0xffffffcf
   14224:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14228:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1422c:	add	r3, r2, r3
   14230:	str	r3, [fp, #-48]	; 0xffffffd0
   14234:	sub	r3, fp, #76	; 0x4c
   14238:	mov	r0, r3
   1423c:	bl	10cdc <mbsinit@plt>
   14240:	mov	r3, r0
   14244:	cmp	r3, #0
   14248:	beq	1404c <__assert_fail@plt+0x3190>
   1424c:	b	1425c <__assert_fail@plt+0x33a0>
   14250:	nop	{0}
   14254:	b	1425c <__assert_fail@plt+0x33a0>
   14258:	nop	{0}
   1425c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14260:	strb	r3, [fp, #-42]	; 0xffffffd6
   14264:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14268:	cmp	r3, #1
   1426c:	bhi	14290 <__assert_fail@plt+0x33d4>
   14270:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14274:	cmp	r3, #0
   14278:	beq	145c8 <__assert_fail@plt+0x370c>
   1427c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14280:	eor	r3, r3, #1
   14284:	uxtb	r3, r3
   14288:	cmp	r3, #0
   1428c:	beq	145c8 <__assert_fail@plt+0x370c>
   14290:	ldr	r2, [fp, #-16]
   14294:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14298:	add	r3, r2, r3
   1429c:	str	r3, [fp, #-68]	; 0xffffffbc
   142a0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   142a4:	cmp	r3, #0
   142a8:	beq	1445c <__assert_fail@plt+0x35a0>
   142ac:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   142b0:	eor	r3, r3, #1
   142b4:	uxtb	r3, r3
   142b8:	cmp	r3, #0
   142bc:	beq	1445c <__assert_fail@plt+0x35a0>
   142c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   142c4:	cmp	r3, #0
   142c8:	bne	14a30 <__assert_fail@plt+0x3b74>
   142cc:	mov	r3, #1
   142d0:	strb	r3, [fp, #-41]	; 0xffffffd7
   142d4:	ldr	r3, [fp, #4]
   142d8:	cmp	r3, #2
   142dc:	bne	1438c <__assert_fail@plt+0x34d0>
   142e0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   142e4:	eor	r3, r3, #1
   142e8:	uxtb	r3, r3
   142ec:	cmp	r3, #0
   142f0:	beq	1438c <__assert_fail@plt+0x34d0>
   142f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   142f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142fc:	cmp	r2, r3
   14300:	bcs	14318 <__assert_fail@plt+0x345c>
   14304:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1430c:	add	r3, r2, r3
   14310:	mov	r2, #39	; 0x27
   14314:	strb	r2, [r3]
   14318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1431c:	add	r3, r3, #1
   14320:	str	r3, [fp, #-20]	; 0xffffffec
   14324:	ldr	r2, [fp, #-20]	; 0xffffffec
   14328:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1432c:	cmp	r2, r3
   14330:	bcs	14348 <__assert_fail@plt+0x348c>
   14334:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1433c:	add	r3, r2, r3
   14340:	mov	r2, #36	; 0x24
   14344:	strb	r2, [r3]
   14348:	ldr	r3, [fp, #-20]	; 0xffffffec
   1434c:	add	r3, r3, #1
   14350:	str	r3, [fp, #-20]	; 0xffffffec
   14354:	ldr	r2, [fp, #-20]	; 0xffffffec
   14358:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1435c:	cmp	r2, r3
   14360:	bcs	14378 <__assert_fail@plt+0x34bc>
   14364:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14368:	ldr	r3, [fp, #-20]	; 0xffffffec
   1436c:	add	r3, r2, r3
   14370:	mov	r2, #39	; 0x27
   14374:	strb	r2, [r3]
   14378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1437c:	add	r3, r3, #1
   14380:	str	r3, [fp, #-20]	; 0xffffffec
   14384:	mov	r3, #1
   14388:	strb	r3, [fp, #-35]	; 0xffffffdd
   1438c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14390:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14394:	cmp	r2, r3
   14398:	bcs	143b0 <__assert_fail@plt+0x34f4>
   1439c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   143a4:	add	r3, r2, r3
   143a8:	mov	r2, #92	; 0x5c
   143ac:	strb	r2, [r3]
   143b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   143b4:	add	r3, r3, #1
   143b8:	str	r3, [fp, #-20]	; 0xffffffec
   143bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   143c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143c4:	cmp	r2, r3
   143c8:	bcs	143f0 <__assert_fail@plt+0x3534>
   143cc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   143d0:	lsr	r3, r3, #6
   143d4:	uxtb	r2, r3
   143d8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   143dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   143e0:	add	r3, r1, r3
   143e4:	add	r2, r2, #48	; 0x30
   143e8:	uxtb	r2, r2
   143ec:	strb	r2, [r3]
   143f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   143f4:	add	r3, r3, #1
   143f8:	str	r3, [fp, #-20]	; 0xffffffec
   143fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14400:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14404:	cmp	r2, r3
   14408:	bcs	14438 <__assert_fail@plt+0x357c>
   1440c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14410:	lsr	r3, r3, #3
   14414:	uxtb	r3, r3
   14418:	and	r3, r3, #7
   1441c:	uxtb	r2, r3
   14420:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14424:	ldr	r3, [fp, #-20]	; 0xffffffec
   14428:	add	r3, r1, r3
   1442c:	add	r2, r2, #48	; 0x30
   14430:	uxtb	r2, r2
   14434:	strb	r2, [r3]
   14438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1443c:	add	r3, r3, #1
   14440:	str	r3, [fp, #-20]	; 0xffffffec
   14444:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14448:	and	r3, r3, #7
   1444c:	uxtb	r3, r3
   14450:	add	r3, r3, #48	; 0x30
   14454:	strb	r3, [fp, #-38]	; 0xffffffda
   14458:	b	144a0 <__assert_fail@plt+0x35e4>
   1445c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14460:	cmp	r3, #0
   14464:	beq	144a0 <__assert_fail@plt+0x35e4>
   14468:	ldr	r2, [fp, #-20]	; 0xffffffec
   1446c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14470:	cmp	r2, r3
   14474:	bcs	1448c <__assert_fail@plt+0x35d0>
   14478:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1447c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14480:	add	r3, r2, r3
   14484:	mov	r2, #92	; 0x5c
   14488:	strb	r2, [r3]
   1448c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14490:	add	r3, r3, #1
   14494:	str	r3, [fp, #-20]	; 0xffffffec
   14498:	mov	r3, #0
   1449c:	strb	r3, [fp, #-40]	; 0xffffffd8
   144a0:	ldr	r3, [fp, #-16]
   144a4:	add	r3, r3, #1
   144a8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   144ac:	cmp	r2, r3
   144b0:	bls	14590 <__assert_fail@plt+0x36d4>
   144b4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   144b8:	cmp	r3, #0
   144bc:	beq	1453c <__assert_fail@plt+0x3680>
   144c0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   144c4:	eor	r3, r3, #1
   144c8:	uxtb	r3, r3
   144cc:	cmp	r3, #0
   144d0:	beq	1453c <__assert_fail@plt+0x3680>
   144d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   144d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144dc:	cmp	r2, r3
   144e0:	bcs	144f8 <__assert_fail@plt+0x363c>
   144e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   144ec:	add	r3, r2, r3
   144f0:	mov	r2, #39	; 0x27
   144f4:	strb	r2, [r3]
   144f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   144fc:	add	r3, r3, #1
   14500:	str	r3, [fp, #-20]	; 0xffffffec
   14504:	ldr	r2, [fp, #-20]	; 0xffffffec
   14508:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1450c:	cmp	r2, r3
   14510:	bcs	14528 <__assert_fail@plt+0x366c>
   14514:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14518:	ldr	r3, [fp, #-20]	; 0xffffffec
   1451c:	add	r3, r2, r3
   14520:	mov	r2, #39	; 0x27
   14524:	strb	r2, [r3]
   14528:	ldr	r3, [fp, #-20]	; 0xffffffec
   1452c:	add	r3, r3, #1
   14530:	str	r3, [fp, #-20]	; 0xffffffec
   14534:	mov	r3, #0
   14538:	strb	r3, [fp, #-35]	; 0xffffffdd
   1453c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14540:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14544:	cmp	r2, r3
   14548:	bcs	14560 <__assert_fail@plt+0x36a4>
   1454c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14550:	ldr	r3, [fp, #-20]	; 0xffffffec
   14554:	add	r3, r2, r3
   14558:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1455c:	strb	r2, [r3]
   14560:	ldr	r3, [fp, #-20]	; 0xffffffec
   14564:	add	r3, r3, #1
   14568:	str	r3, [fp, #-20]	; 0xffffffec
   1456c:	ldr	r3, [fp, #-16]
   14570:	add	r3, r3, #1
   14574:	str	r3, [fp, #-16]
   14578:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1457c:	ldr	r3, [fp, #-16]
   14580:	add	r3, r2, r3
   14584:	ldrb	r3, [r3]
   14588:	strb	r3, [fp, #-38]	; 0xffffffda
   1458c:	b	142a0 <__assert_fail@plt+0x33e4>
   14590:	nop	{0}
   14594:	b	1476c <__assert_fail@plt+0x38b0>
   14598:	nop	{0}
   1459c:	b	145cc <__assert_fail@plt+0x3710>
   145a0:	nop	{0}
   145a4:	b	145cc <__assert_fail@plt+0x3710>
   145a8:	nop	{0}
   145ac:	b	145cc <__assert_fail@plt+0x3710>
   145b0:	nop	{0}
   145b4:	b	145cc <__assert_fail@plt+0x3710>
   145b8:	nop	{0}
   145bc:	b	145cc <__assert_fail@plt+0x3710>
   145c0:	nop	{0}
   145c4:	b	145cc <__assert_fail@plt+0x3710>
   145c8:	nop	{0}
   145cc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   145d0:	eor	r3, r3, #1
   145d4:	uxtb	r3, r3
   145d8:	cmp	r3, #0
   145dc:	bne	145ec <__assert_fail@plt+0x3730>
   145e0:	ldr	r3, [fp, #4]
   145e4:	cmp	r3, #2
   145e8:	bne	14600 <__assert_fail@plt+0x3744>
   145ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   145f0:	eor	r3, r3, #1
   145f4:	uxtb	r3, r3
   145f8:	cmp	r3, #0
   145fc:	bne	14640 <__assert_fail@plt+0x3784>
   14600:	ldr	r3, [fp, #12]
   14604:	cmp	r3, #0
   14608:	beq	14640 <__assert_fail@plt+0x3784>
   1460c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14610:	lsr	r3, r3, #5
   14614:	uxtb	r3, r3
   14618:	lsl	r3, r3, #2
   1461c:	ldr	r2, [fp, #12]
   14620:	add	r3, r2, r3
   14624:	ldr	r2, [r3]
   14628:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1462c:	and	r3, r3, #31
   14630:	lsr	r3, r2, r3
   14634:	and	r3, r3, #1
   14638:	cmp	r3, #0
   1463c:	bne	14654 <__assert_fail@plt+0x3798>
   14640:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14644:	eor	r3, r3, #1
   14648:	uxtb	r3, r3
   1464c:	cmp	r3, #0
   14650:	bne	14768 <__assert_fail@plt+0x38ac>
   14654:	nop	{0}
   14658:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1465c:	cmp	r3, #0
   14660:	bne	14a38 <__assert_fail@plt+0x3b7c>
   14664:	mov	r3, #1
   14668:	strb	r3, [fp, #-41]	; 0xffffffd7
   1466c:	ldr	r3, [fp, #4]
   14670:	cmp	r3, #2
   14674:	bne	14724 <__assert_fail@plt+0x3868>
   14678:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1467c:	eor	r3, r3, #1
   14680:	uxtb	r3, r3
   14684:	cmp	r3, #0
   14688:	beq	14724 <__assert_fail@plt+0x3868>
   1468c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14690:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14694:	cmp	r2, r3
   14698:	bcs	146b0 <__assert_fail@plt+0x37f4>
   1469c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146a4:	add	r3, r2, r3
   146a8:	mov	r2, #39	; 0x27
   146ac:	strb	r2, [r3]
   146b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146b4:	add	r3, r3, #1
   146b8:	str	r3, [fp, #-20]	; 0xffffffec
   146bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   146c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146c4:	cmp	r2, r3
   146c8:	bcs	146e0 <__assert_fail@plt+0x3824>
   146cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146d4:	add	r3, r2, r3
   146d8:	mov	r2, #36	; 0x24
   146dc:	strb	r2, [r3]
   146e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146e4:	add	r3, r3, #1
   146e8:	str	r3, [fp, #-20]	; 0xffffffec
   146ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   146f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146f4:	cmp	r2, r3
   146f8:	bcs	14710 <__assert_fail@plt+0x3854>
   146fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14700:	ldr	r3, [fp, #-20]	; 0xffffffec
   14704:	add	r3, r2, r3
   14708:	mov	r2, #39	; 0x27
   1470c:	strb	r2, [r3]
   14710:	ldr	r3, [fp, #-20]	; 0xffffffec
   14714:	add	r3, r3, #1
   14718:	str	r3, [fp, #-20]	; 0xffffffec
   1471c:	mov	r3, #1
   14720:	strb	r3, [fp, #-35]	; 0xffffffdd
   14724:	ldr	r2, [fp, #-20]	; 0xffffffec
   14728:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1472c:	cmp	r2, r3
   14730:	bcs	14748 <__assert_fail@plt+0x388c>
   14734:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1473c:	add	r3, r2, r3
   14740:	mov	r2, #92	; 0x5c
   14744:	strb	r2, [r3]
   14748:	ldr	r3, [fp, #-20]	; 0xffffffec
   1474c:	add	r3, r3, #1
   14750:	str	r3, [fp, #-20]	; 0xffffffec
   14754:	b	1476c <__assert_fail@plt+0x38b0>
   14758:	nop	{0}
   1475c:	b	1476c <__assert_fail@plt+0x38b0>
   14760:	nop	{0}
   14764:	b	1476c <__assert_fail@plt+0x38b0>
   14768:	nop	{0}
   1476c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14770:	cmp	r3, #0
   14774:	beq	147f4 <__assert_fail@plt+0x3938>
   14778:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1477c:	eor	r3, r3, #1
   14780:	uxtb	r3, r3
   14784:	cmp	r3, #0
   14788:	beq	147f4 <__assert_fail@plt+0x3938>
   1478c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14790:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14794:	cmp	r2, r3
   14798:	bcs	147b0 <__assert_fail@plt+0x38f4>
   1479c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   147a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   147a4:	add	r3, r2, r3
   147a8:	mov	r2, #39	; 0x27
   147ac:	strb	r2, [r3]
   147b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   147b4:	add	r3, r3, #1
   147b8:	str	r3, [fp, #-20]	; 0xffffffec
   147bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   147c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147c4:	cmp	r2, r3
   147c8:	bcs	147e0 <__assert_fail@plt+0x3924>
   147cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   147d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   147d4:	add	r3, r2, r3
   147d8:	mov	r2, #39	; 0x27
   147dc:	strb	r2, [r3]
   147e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   147e4:	add	r3, r3, #1
   147e8:	str	r3, [fp, #-20]	; 0xffffffec
   147ec:	mov	r3, #0
   147f0:	strb	r3, [fp, #-35]	; 0xffffffdd
   147f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   147f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147fc:	cmp	r2, r3
   14800:	bcs	14818 <__assert_fail@plt+0x395c>
   14804:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1480c:	add	r3, r2, r3
   14810:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14814:	strb	r2, [r3]
   14818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1481c:	add	r3, r3, #1
   14820:	str	r3, [fp, #-20]	; 0xffffffec
   14824:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   14828:	eor	r3, r3, #1
   1482c:	uxtb	r3, r3
   14830:	cmp	r3, #0
   14834:	beq	14840 <__assert_fail@plt+0x3984>
   14838:	mov	r3, #0
   1483c:	strb	r3, [fp, #-37]	; 0xffffffdb
   14840:	ldr	r3, [fp, #-16]
   14844:	add	r3, r3, #1
   14848:	str	r3, [fp, #-16]
   1484c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14850:	cmn	r3, #1
   14854:	bne	1487c <__assert_fail@plt+0x39c0>
   14858:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1485c:	ldr	r3, [fp, #-16]
   14860:	add	r3, r2, r3
   14864:	ldrb	r3, [r3]
   14868:	cmp	r3, #0
   1486c:	movne	r3, #1
   14870:	moveq	r3, #0
   14874:	uxtb	r3, r3
   14878:	b	14894 <__assert_fail@plt+0x39d8>
   1487c:	ldr	r2, [fp, #-16]
   14880:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14884:	cmp	r2, r3
   14888:	movne	r3, #1
   1488c:	moveq	r3, #0
   14890:	uxtb	r3, r3
   14894:	cmp	r3, #0
   14898:	bne	136b4 <__assert_fail@plt+0x27f8>
   1489c:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a0:	cmp	r3, #0
   148a4:	bne	148c0 <__assert_fail@plt+0x3a04>
   148a8:	ldr	r3, [fp, #4]
   148ac:	cmp	r3, #2
   148b0:	bne	148c0 <__assert_fail@plt+0x3a04>
   148b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   148b8:	cmp	r3, #0
   148bc:	bne	14a40 <__assert_fail@plt+0x3b84>
   148c0:	ldr	r3, [fp, #4]
   148c4:	cmp	r3, #2
   148c8:	bne	14968 <__assert_fail@plt+0x3aac>
   148cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   148d0:	eor	r3, r3, #1
   148d4:	uxtb	r3, r3
   148d8:	cmp	r3, #0
   148dc:	beq	14968 <__assert_fail@plt+0x3aac>
   148e0:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   148e4:	cmp	r3, #0
   148e8:	beq	14968 <__assert_fail@plt+0x3aac>
   148ec:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   148f0:	cmp	r3, #0
   148f4:	beq	1493c <__assert_fail@plt+0x3a80>
   148f8:	ldr	r3, [fp, #20]
   148fc:	str	r3, [sp, #16]
   14900:	ldr	r3, [fp, #16]
   14904:	str	r3, [sp, #12]
   14908:	ldr	r3, [fp, #12]
   1490c:	str	r3, [sp, #8]
   14910:	ldr	r3, [fp, #8]
   14914:	str	r3, [sp, #4]
   14918:	mov	r3, #5
   1491c:	str	r3, [sp]
   14920:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14924:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14928:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1492c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14930:	bl	133ec <__assert_fail@plt+0x2530>
   14934:	mov	r3, r0
   14938:	b	14aa8 <__assert_fail@plt+0x3bec>
   1493c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14940:	cmp	r3, #0
   14944:	bne	14968 <__assert_fail@plt+0x3aac>
   14948:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1494c:	cmp	r3, #0
   14950:	beq	14968 <__assert_fail@plt+0x3aac>
   14954:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14958:	str	r3, [fp, #-92]	; 0xffffffa4
   1495c:	mov	r3, #0
   14960:	str	r3, [fp, #-20]	; 0xffffffec
   14964:	b	13480 <__assert_fail@plt+0x25c4>
   14968:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1496c:	cmp	r3, #0
   14970:	beq	149dc <__assert_fail@plt+0x3b20>
   14974:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14978:	eor	r3, r3, #1
   1497c:	uxtb	r3, r3
   14980:	cmp	r3, #0
   14984:	beq	149dc <__assert_fail@plt+0x3b20>
   14988:	b	149cc <__assert_fail@plt+0x3b10>
   1498c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14990:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14994:	cmp	r2, r3
   14998:	bcs	149b4 <__assert_fail@plt+0x3af8>
   1499c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   149a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149a4:	add	r3, r2, r3
   149a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   149ac:	ldrb	r2, [r2]
   149b0:	strb	r2, [r3]
   149b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   149b8:	add	r3, r3, #1
   149bc:	str	r3, [fp, #-20]	; 0xffffffec
   149c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149c4:	add	r3, r3, #1
   149c8:	str	r3, [fp, #-28]	; 0xffffffe4
   149cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149d0:	ldrb	r3, [r3]
   149d4:	cmp	r3, #0
   149d8:	bne	1498c <__assert_fail@plt+0x3ad0>
   149dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   149e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   149e4:	cmp	r2, r3
   149e8:	bcs	14a00 <__assert_fail@plt+0x3b44>
   149ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   149f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149f4:	add	r3, r2, r3
   149f8:	mov	r2, #0
   149fc:	strb	r2, [r3]
   14a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a04:	b	14aa8 <__assert_fail@plt+0x3bec>
   14a08:	nop	{0}
   14a0c:	b	14a44 <__assert_fail@plt+0x3b88>
   14a10:	nop	{0}
   14a14:	b	14a44 <__assert_fail@plt+0x3b88>
   14a18:	nop	{0}
   14a1c:	b	14a44 <__assert_fail@plt+0x3b88>
   14a20:	nop	{0}
   14a24:	b	14a44 <__assert_fail@plt+0x3b88>
   14a28:	nop	{0}
   14a2c:	b	14a44 <__assert_fail@plt+0x3b88>
   14a30:	nop	{0}
   14a34:	b	14a44 <__assert_fail@plt+0x3b88>
   14a38:	nop	{0}
   14a3c:	b	14a44 <__assert_fail@plt+0x3b88>
   14a40:	nop	{0}
   14a44:	ldr	r3, [fp, #4]
   14a48:	cmp	r3, #2
   14a4c:	bne	14a64 <__assert_fail@plt+0x3ba8>
   14a50:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14a54:	cmp	r3, #0
   14a58:	beq	14a64 <__assert_fail@plt+0x3ba8>
   14a5c:	mov	r3, #4
   14a60:	str	r3, [fp, #4]
   14a64:	ldr	r3, [fp, #8]
   14a68:	bic	r3, r3, #2
   14a6c:	ldr	r2, [fp, #20]
   14a70:	str	r2, [sp, #16]
   14a74:	ldr	r2, [fp, #16]
   14a78:	str	r2, [sp, #12]
   14a7c:	mov	r2, #0
   14a80:	str	r2, [sp, #8]
   14a84:	str	r3, [sp, #4]
   14a88:	ldr	r3, [fp, #4]
   14a8c:	str	r3, [sp]
   14a90:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14a94:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14a98:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14a9c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14aa0:	bl	133ec <__assert_fail@plt+0x2530>
   14aa4:	mov	r3, r0
   14aa8:	mov	r0, r3
   14aac:	sub	sp, fp, #8
   14ab0:	ldr	r4, [sp]
   14ab4:	ldr	fp, [sp, #4]
   14ab8:	add	sp, sp, #8
   14abc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac0:	str	fp, [sp, #-8]!
   14ac4:	str	lr, [sp, #4]
   14ac8:	add	fp, sp, #4
   14acc:	sub	sp, sp, #56	; 0x38
   14ad0:	str	r0, [fp, #-24]	; 0xffffffe8
   14ad4:	str	r1, [fp, #-28]	; 0xffffffe4
   14ad8:	str	r2, [fp, #-32]	; 0xffffffe0
   14adc:	str	r3, [fp, #-36]	; 0xffffffdc
   14ae0:	ldr	r3, [fp, #4]
   14ae4:	cmp	r3, #0
   14ae8:	beq	14af4 <__assert_fail@plt+0x3c38>
   14aec:	ldr	r3, [fp, #4]
   14af0:	b	14afc <__assert_fail@plt+0x3c40>
   14af4:	movw	r3, #37292	; 0x91ac
   14af8:	movt	r3, #2
   14afc:	str	r3, [fp, #-8]
   14b00:	bl	10dfc <__errno_location@plt>
   14b04:	mov	r3, r0
   14b08:	ldr	r3, [r3]
   14b0c:	str	r3, [fp, #-12]
   14b10:	ldr	r3, [fp, #-8]
   14b14:	ldr	r3, [r3]
   14b18:	ldr	r2, [fp, #-8]
   14b1c:	ldr	r2, [r2, #4]
   14b20:	ldr	r1, [fp, #-8]
   14b24:	add	r1, r1, #8
   14b28:	ldr	r0, [fp, #-8]
   14b2c:	ldr	r0, [r0, #40]	; 0x28
   14b30:	ldr	ip, [fp, #-8]
   14b34:	ldr	ip, [ip, #44]	; 0x2c
   14b38:	str	ip, [sp, #16]
   14b3c:	str	r0, [sp, #12]
   14b40:	str	r1, [sp, #8]
   14b44:	str	r2, [sp, #4]
   14b48:	str	r3, [sp]
   14b4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14b54:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14b58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14b5c:	bl	133ec <__assert_fail@plt+0x2530>
   14b60:	str	r0, [fp, #-16]
   14b64:	bl	10dfc <__errno_location@plt>
   14b68:	mov	r2, r0
   14b6c:	ldr	r3, [fp, #-12]
   14b70:	str	r3, [r2]
   14b74:	ldr	r3, [fp, #-16]
   14b78:	mov	r0, r3
   14b7c:	sub	sp, fp, #4
   14b80:	ldr	fp, [sp]
   14b84:	add	sp, sp, #4
   14b88:	pop	{pc}		; (ldr pc, [sp], #4)
   14b8c:	str	fp, [sp, #-8]!
   14b90:	str	lr, [sp, #4]
   14b94:	add	fp, sp, #4
   14b98:	sub	sp, sp, #16
   14b9c:	str	r0, [fp, #-8]
   14ba0:	str	r1, [fp, #-12]
   14ba4:	str	r2, [fp, #-16]
   14ba8:	ldr	r3, [fp, #-16]
   14bac:	mov	r2, #0
   14bb0:	ldr	r1, [fp, #-12]
   14bb4:	ldr	r0, [fp, #-8]
   14bb8:	bl	14bd4 <__assert_fail@plt+0x3d18>
   14bbc:	mov	r3, r0
   14bc0:	mov	r0, r3
   14bc4:	sub	sp, fp, #4
   14bc8:	ldr	fp, [sp]
   14bcc:	add	sp, sp, #4
   14bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd4:	str	fp, [sp, #-8]!
   14bd8:	str	lr, [sp, #4]
   14bdc:	add	fp, sp, #4
   14be0:	sub	sp, sp, #64	; 0x40
   14be4:	str	r0, [fp, #-32]	; 0xffffffe0
   14be8:	str	r1, [fp, #-36]	; 0xffffffdc
   14bec:	str	r2, [fp, #-40]	; 0xffffffd8
   14bf0:	str	r3, [fp, #-44]	; 0xffffffd4
   14bf4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14bf8:	cmp	r3, #0
   14bfc:	beq	14c08 <__assert_fail@plt+0x3d4c>
   14c00:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c04:	b	14c10 <__assert_fail@plt+0x3d54>
   14c08:	movw	r3, #37292	; 0x91ac
   14c0c:	movt	r3, #2
   14c10:	str	r3, [fp, #-8]
   14c14:	bl	10dfc <__errno_location@plt>
   14c18:	mov	r3, r0
   14c1c:	ldr	r3, [r3]
   14c20:	str	r3, [fp, #-12]
   14c24:	ldr	r3, [fp, #-8]
   14c28:	ldr	r3, [r3, #4]
   14c2c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14c30:	cmp	r2, #0
   14c34:	moveq	r2, #1
   14c38:	movne	r2, #0
   14c3c:	uxtb	r2, r2
   14c40:	orr	r3, r3, r2
   14c44:	str	r3, [fp, #-16]
   14c48:	ldr	r3, [fp, #-8]
   14c4c:	ldr	r3, [r3]
   14c50:	ldr	r2, [fp, #-8]
   14c54:	add	r2, r2, #8
   14c58:	ldr	r1, [fp, #-8]
   14c5c:	ldr	r1, [r1, #40]	; 0x28
   14c60:	ldr	r0, [fp, #-8]
   14c64:	ldr	r0, [r0, #44]	; 0x2c
   14c68:	str	r0, [sp, #16]
   14c6c:	str	r1, [sp, #12]
   14c70:	str	r2, [sp, #8]
   14c74:	ldr	r2, [fp, #-16]
   14c78:	str	r2, [sp, #4]
   14c7c:	str	r3, [sp]
   14c80:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14c84:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c88:	mov	r1, #0
   14c8c:	mov	r0, #0
   14c90:	bl	133ec <__assert_fail@plt+0x2530>
   14c94:	mov	r3, r0
   14c98:	add	r3, r3, #1
   14c9c:	str	r3, [fp, #-20]	; 0xffffffec
   14ca0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14ca4:	bl	160e4 <__assert_fail@plt+0x5228>
   14ca8:	mov	r3, r0
   14cac:	str	r3, [fp, #-24]	; 0xffffffe8
   14cb0:	ldr	r3, [fp, #-8]
   14cb4:	ldr	r3, [r3]
   14cb8:	ldr	r2, [fp, #-8]
   14cbc:	add	r2, r2, #8
   14cc0:	ldr	r1, [fp, #-8]
   14cc4:	ldr	r1, [r1, #40]	; 0x28
   14cc8:	ldr	r0, [fp, #-8]
   14ccc:	ldr	r0, [r0, #44]	; 0x2c
   14cd0:	str	r0, [sp, #16]
   14cd4:	str	r1, [sp, #12]
   14cd8:	str	r2, [sp, #8]
   14cdc:	ldr	r2, [fp, #-16]
   14ce0:	str	r2, [sp, #4]
   14ce4:	str	r3, [sp]
   14ce8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14cec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14cf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14cf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14cf8:	bl	133ec <__assert_fail@plt+0x2530>
   14cfc:	bl	10dfc <__errno_location@plt>
   14d00:	mov	r2, r0
   14d04:	ldr	r3, [fp, #-12]
   14d08:	str	r3, [r2]
   14d0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14d10:	cmp	r3, #0
   14d14:	beq	14d28 <__assert_fail@plt+0x3e6c>
   14d18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d1c:	sub	r2, r3, #1
   14d20:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14d24:	str	r2, [r3]
   14d28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d2c:	mov	r0, r3
   14d30:	sub	sp, fp, #4
   14d34:	ldr	fp, [sp]
   14d38:	add	sp, sp, #4
   14d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d40:	str	fp, [sp, #-8]!
   14d44:	str	lr, [sp, #4]
   14d48:	add	fp, sp, #4
   14d4c:	sub	sp, sp, #8
   14d50:	movw	r3, #37120	; 0x9100
   14d54:	movt	r3, #2
   14d58:	ldr	r3, [r3]
   14d5c:	str	r3, [fp, #-12]
   14d60:	mov	r3, #1
   14d64:	str	r3, [fp, #-8]
   14d68:	b	14d94 <__assert_fail@plt+0x3ed8>
   14d6c:	ldr	r3, [fp, #-8]
   14d70:	lsl	r3, r3, #3
   14d74:	ldr	r2, [fp, #-12]
   14d78:	add	r3, r2, r3
   14d7c:	ldr	r3, [r3, #4]
   14d80:	mov	r0, r3
   14d84:	bl	12ce8 <__assert_fail@plt+0x1e2c>
   14d88:	ldr	r3, [fp, #-8]
   14d8c:	add	r3, r3, #1
   14d90:	str	r3, [fp, #-8]
   14d94:	movw	r3, #37108	; 0x90f4
   14d98:	movt	r3, #2
   14d9c:	ldr	r3, [r3]
   14da0:	ldr	r2, [fp, #-8]
   14da4:	cmp	r2, r3
   14da8:	blt	14d6c <__assert_fail@plt+0x3eb0>
   14dac:	ldr	r3, [fp, #-12]
   14db0:	ldr	r2, [r3, #4]
   14db4:	movw	r3, #37340	; 0x91dc
   14db8:	movt	r3, #2
   14dbc:	cmp	r2, r3
   14dc0:	beq	14df8 <__assert_fail@plt+0x3f3c>
   14dc4:	ldr	r3, [fp, #-12]
   14dc8:	ldr	r3, [r3, #4]
   14dcc:	mov	r0, r3
   14dd0:	bl	12ce8 <__assert_fail@plt+0x1e2c>
   14dd4:	movw	r3, #37112	; 0x90f8
   14dd8:	movt	r3, #2
   14ddc:	mov	r2, #256	; 0x100
   14de0:	str	r2, [r3]
   14de4:	movw	r3, #37112	; 0x90f8
   14de8:	movt	r3, #2
   14dec:	movw	r2, #37340	; 0x91dc
   14df0:	movt	r2, #2
   14df4:	str	r2, [r3, #4]
   14df8:	ldr	r2, [fp, #-12]
   14dfc:	movw	r3, #37112	; 0x90f8
   14e00:	movt	r3, #2
   14e04:	cmp	r2, r3
   14e08:	beq	14e28 <__assert_fail@plt+0x3f6c>
   14e0c:	ldr	r0, [fp, #-12]
   14e10:	bl	12ce8 <__assert_fail@plt+0x1e2c>
   14e14:	movw	r3, #37120	; 0x9100
   14e18:	movt	r3, #2
   14e1c:	movw	r2, #37112	; 0x90f8
   14e20:	movt	r2, #2
   14e24:	str	r2, [r3]
   14e28:	movw	r3, #37108	; 0x90f4
   14e2c:	movt	r3, #2
   14e30:	mov	r2, #1
   14e34:	str	r2, [r3]
   14e38:	nop	{0}
   14e3c:	sub	sp, fp, #4
   14e40:	ldr	fp, [sp]
   14e44:	add	sp, sp, #4
   14e48:	pop	{pc}		; (ldr pc, [sp], #4)
   14e4c:	str	fp, [sp, #-8]!
   14e50:	str	lr, [sp, #4]
   14e54:	add	fp, sp, #4
   14e58:	sub	sp, sp, #80	; 0x50
   14e5c:	str	r0, [fp, #-48]	; 0xffffffd0
   14e60:	str	r1, [fp, #-52]	; 0xffffffcc
   14e64:	str	r2, [fp, #-56]	; 0xffffffc8
   14e68:	str	r3, [fp, #-60]	; 0xffffffc4
   14e6c:	bl	10dfc <__errno_location@plt>
   14e70:	mov	r3, r0
   14e74:	ldr	r3, [r3]
   14e78:	str	r3, [fp, #-16]
   14e7c:	movw	r3, #37120	; 0x9100
   14e80:	movt	r3, #2
   14e84:	ldr	r3, [r3]
   14e88:	str	r3, [fp, #-8]
   14e8c:	mvn	r3, #-2147483648	; 0x80000000
   14e90:	str	r3, [fp, #-20]	; 0xffffffec
   14e94:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14e98:	cmp	r3, #0
   14e9c:	blt	14eb0 <__assert_fail@plt+0x3ff4>
   14ea0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ea8:	cmp	r2, r3
   14eac:	blt	14eb4 <__assert_fail@plt+0x3ff8>
   14eb0:	bl	10e98 <abort@plt>
   14eb4:	movw	r3, #37108	; 0x90f4
   14eb8:	movt	r3, #2
   14ebc:	ldr	r3, [r3]
   14ec0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14ec4:	cmp	r2, r3
   14ec8:	blt	14fc0 <__assert_fail@plt+0x4104>
   14ecc:	ldr	r2, [fp, #-8]
   14ed0:	movw	r3, #37112	; 0x90f8
   14ed4:	movt	r3, #2
   14ed8:	cmp	r2, r3
   14edc:	moveq	r3, #1
   14ee0:	movne	r3, #0
   14ee4:	strb	r3, [fp, #-21]	; 0xffffffeb
   14ee8:	movw	r3, #37108	; 0x90f4
   14eec:	movt	r3, #2
   14ef0:	ldr	r3, [r3]
   14ef4:	str	r3, [fp, #-40]	; 0xffffffd8
   14ef8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14efc:	cmp	r3, #0
   14f00:	beq	14f0c <__assert_fail@plt+0x4050>
   14f04:	mov	r0, #0
   14f08:	b	14f10 <__assert_fail@plt+0x4054>
   14f0c:	ldr	r0, [fp, #-8]
   14f10:	movw	r3, #37108	; 0x90f4
   14f14:	movt	r3, #2
   14f18:	ldr	r3, [r3]
   14f1c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14f20:	sub	r3, r2, r3
   14f24:	add	r2, r3, #1
   14f28:	sub	r1, fp, #40	; 0x28
   14f2c:	mov	r3, #8
   14f30:	str	r3, [sp]
   14f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f38:	bl	16444 <__assert_fail@plt+0x5588>
   14f3c:	str	r0, [fp, #-8]
   14f40:	movw	r3, #37120	; 0x9100
   14f44:	movt	r3, #2
   14f48:	ldr	r2, [fp, #-8]
   14f4c:	str	r2, [r3]
   14f50:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14f54:	cmp	r3, #0
   14f58:	beq	14f74 <__assert_fail@plt+0x40b8>
   14f5c:	ldr	r2, [fp, #-8]
   14f60:	movw	r3, #37112	; 0x90f8
   14f64:	movt	r3, #2
   14f68:	mov	r1, r2
   14f6c:	ldrd	r2, [r3]
   14f70:	strd	r2, [r1]
   14f74:	movw	r3, #37108	; 0x90f4
   14f78:	movt	r3, #2
   14f7c:	ldr	r3, [r3]
   14f80:	lsl	r3, r3, #3
   14f84:	ldr	r2, [fp, #-8]
   14f88:	add	r0, r2, r3
   14f8c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14f90:	movw	r3, #37108	; 0x90f4
   14f94:	movt	r3, #2
   14f98:	ldr	r3, [r3]
   14f9c:	sub	r3, r2, r3
   14fa0:	lsl	r3, r3, #3
   14fa4:	mov	r2, r3
   14fa8:	mov	r1, #0
   14fac:	bl	10e14 <memset@plt>
   14fb0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14fb4:	movw	r3, #37108	; 0x90f4
   14fb8:	movt	r3, #2
   14fbc:	str	r2, [r3]
   14fc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14fc4:	lsl	r3, r3, #3
   14fc8:	ldr	r2, [fp, #-8]
   14fcc:	add	r3, r2, r3
   14fd0:	ldr	r3, [r3]
   14fd4:	str	r3, [fp, #-28]	; 0xffffffe4
   14fd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14fdc:	lsl	r3, r3, #3
   14fe0:	ldr	r2, [fp, #-8]
   14fe4:	add	r3, r2, r3
   14fe8:	ldr	r3, [r3, #4]
   14fec:	str	r3, [fp, #-12]
   14ff0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14ff4:	ldr	r3, [r3, #4]
   14ff8:	orr	r3, r3, #1
   14ffc:	str	r3, [fp, #-32]	; 0xffffffe0
   15000:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15004:	ldr	r3, [r3]
   15008:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1500c:	add	r2, r2, #8
   15010:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15014:	ldr	r1, [r1, #40]	; 0x28
   15018:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1501c:	ldr	r0, [r0, #44]	; 0x2c
   15020:	str	r0, [sp, #16]
   15024:	str	r1, [sp, #12]
   15028:	str	r2, [sp, #8]
   1502c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15030:	str	r2, [sp, #4]
   15034:	str	r3, [sp]
   15038:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1503c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15040:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15044:	ldr	r0, [fp, #-12]
   15048:	bl	133ec <__assert_fail@plt+0x2530>
   1504c:	str	r0, [fp, #-36]	; 0xffffffdc
   15050:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15054:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15058:	cmp	r2, r3
   1505c:	bhi	15114 <__assert_fail@plt+0x4258>
   15060:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15064:	add	r3, r3, #1
   15068:	str	r3, [fp, #-28]	; 0xffffffe4
   1506c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15070:	lsl	r3, r3, #3
   15074:	ldr	r2, [fp, #-8]
   15078:	add	r3, r2, r3
   1507c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15080:	str	r2, [r3]
   15084:	ldr	r2, [fp, #-12]
   15088:	movw	r3, #37340	; 0x91dc
   1508c:	movt	r3, #2
   15090:	cmp	r2, r3
   15094:	beq	150a0 <__assert_fail@plt+0x41e4>
   15098:	ldr	r0, [fp, #-12]
   1509c:	bl	12ce8 <__assert_fail@plt+0x1e2c>
   150a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   150a4:	bl	160e4 <__assert_fail@plt+0x5228>
   150a8:	mov	r3, r0
   150ac:	str	r3, [fp, #-12]
   150b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   150b4:	lsl	r3, r3, #3
   150b8:	ldr	r2, [fp, #-8]
   150bc:	add	r3, r2, r3
   150c0:	ldr	r2, [fp, #-12]
   150c4:	str	r2, [r3, #4]
   150c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   150cc:	ldr	r3, [r3]
   150d0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   150d4:	add	r2, r2, #8
   150d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   150dc:	ldr	r1, [r1, #40]	; 0x28
   150e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   150e4:	ldr	r0, [r0, #44]	; 0x2c
   150e8:	str	r0, [sp, #16]
   150ec:	str	r1, [sp, #12]
   150f0:	str	r2, [sp, #8]
   150f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   150f8:	str	r2, [sp, #4]
   150fc:	str	r3, [sp]
   15100:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15104:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15108:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1510c:	ldr	r0, [fp, #-12]
   15110:	bl	133ec <__assert_fail@plt+0x2530>
   15114:	bl	10dfc <__errno_location@plt>
   15118:	mov	r2, r0
   1511c:	ldr	r3, [fp, #-16]
   15120:	str	r3, [r2]
   15124:	ldr	r3, [fp, #-12]
   15128:	mov	r0, r3
   1512c:	sub	sp, fp, #4
   15130:	ldr	fp, [sp]
   15134:	add	sp, sp, #4
   15138:	pop	{pc}		; (ldr pc, [sp], #4)
   1513c:	str	fp, [sp, #-8]!
   15140:	str	lr, [sp, #4]
   15144:	add	fp, sp, #4
   15148:	sub	sp, sp, #8
   1514c:	str	r0, [fp, #-8]
   15150:	str	r1, [fp, #-12]
   15154:	movw	r3, #37292	; 0x91ac
   15158:	movt	r3, #2
   1515c:	mvn	r2, #0
   15160:	ldr	r1, [fp, #-12]
   15164:	ldr	r0, [fp, #-8]
   15168:	bl	14e4c <__assert_fail@plt+0x3f90>
   1516c:	mov	r3, r0
   15170:	mov	r0, r3
   15174:	sub	sp, fp, #4
   15178:	ldr	fp, [sp]
   1517c:	add	sp, sp, #4
   15180:	pop	{pc}		; (ldr pc, [sp], #4)
   15184:	str	fp, [sp, #-8]!
   15188:	str	lr, [sp, #4]
   1518c:	add	fp, sp, #4
   15190:	sub	sp, sp, #16
   15194:	str	r0, [fp, #-8]
   15198:	str	r1, [fp, #-12]
   1519c:	str	r2, [fp, #-16]
   151a0:	movw	r3, #37292	; 0x91ac
   151a4:	movt	r3, #2
   151a8:	ldr	r2, [fp, #-16]
   151ac:	ldr	r1, [fp, #-12]
   151b0:	ldr	r0, [fp, #-8]
   151b4:	bl	14e4c <__assert_fail@plt+0x3f90>
   151b8:	mov	r3, r0
   151bc:	mov	r0, r3
   151c0:	sub	sp, fp, #4
   151c4:	ldr	fp, [sp]
   151c8:	add	sp, sp, #4
   151cc:	pop	{pc}		; (ldr pc, [sp], #4)
   151d0:	str	fp, [sp, #-8]!
   151d4:	str	lr, [sp, #4]
   151d8:	add	fp, sp, #4
   151dc:	sub	sp, sp, #8
   151e0:	str	r0, [fp, #-8]
   151e4:	ldr	r1, [fp, #-8]
   151e8:	mov	r0, #0
   151ec:	bl	1513c <__assert_fail@plt+0x4280>
   151f0:	mov	r3, r0
   151f4:	mov	r0, r3
   151f8:	sub	sp, fp, #4
   151fc:	ldr	fp, [sp]
   15200:	add	sp, sp, #4
   15204:	pop	{pc}		; (ldr pc, [sp], #4)
   15208:	str	fp, [sp, #-8]!
   1520c:	str	lr, [sp, #4]
   15210:	add	fp, sp, #4
   15214:	sub	sp, sp, #8
   15218:	str	r0, [fp, #-8]
   1521c:	str	r1, [fp, #-12]
   15220:	ldr	r2, [fp, #-12]
   15224:	ldr	r1, [fp, #-8]
   15228:	mov	r0, #0
   1522c:	bl	15184 <__assert_fail@plt+0x42c8>
   15230:	mov	r3, r0
   15234:	mov	r0, r3
   15238:	sub	sp, fp, #4
   1523c:	ldr	fp, [sp]
   15240:	add	sp, sp, #4
   15244:	pop	{pc}		; (ldr pc, [sp], #4)
   15248:	str	fp, [sp, #-8]!
   1524c:	str	lr, [sp, #4]
   15250:	add	fp, sp, #4
   15254:	sub	sp, sp, #64	; 0x40
   15258:	str	r0, [fp, #-56]	; 0xffffffc8
   1525c:	str	r1, [fp, #-60]	; 0xffffffc4
   15260:	str	r2, [fp, #-64]	; 0xffffffc0
   15264:	sub	r3, fp, #52	; 0x34
   15268:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1526c:	mov	r0, r3
   15270:	bl	13248 <__assert_fail@plt+0x238c>
   15274:	sub	r3, fp, #52	; 0x34
   15278:	mvn	r2, #0
   1527c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15280:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15284:	bl	14e4c <__assert_fail@plt+0x3f90>
   15288:	mov	r3, r0
   1528c:	mov	r0, r3
   15290:	sub	sp, fp, #4
   15294:	ldr	fp, [sp]
   15298:	add	sp, sp, #4
   1529c:	pop	{pc}		; (ldr pc, [sp], #4)
   152a0:	str	fp, [sp, #-8]!
   152a4:	str	lr, [sp, #4]
   152a8:	add	fp, sp, #4
   152ac:	sub	sp, sp, #64	; 0x40
   152b0:	str	r0, [fp, #-56]	; 0xffffffc8
   152b4:	str	r1, [fp, #-60]	; 0xffffffc4
   152b8:	str	r2, [fp, #-64]	; 0xffffffc0
   152bc:	str	r3, [fp, #-68]	; 0xffffffbc
   152c0:	sub	r3, fp, #52	; 0x34
   152c4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   152c8:	mov	r0, r3
   152cc:	bl	13248 <__assert_fail@plt+0x238c>
   152d0:	sub	r3, fp, #52	; 0x34
   152d4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   152d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   152dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   152e0:	bl	14e4c <__assert_fail@plt+0x3f90>
   152e4:	mov	r3, r0
   152e8:	mov	r0, r3
   152ec:	sub	sp, fp, #4
   152f0:	ldr	fp, [sp]
   152f4:	add	sp, sp, #4
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	str	fp, [sp, #-8]!
   15300:	str	lr, [sp, #4]
   15304:	add	fp, sp, #4
   15308:	sub	sp, sp, #8
   1530c:	str	r0, [fp, #-8]
   15310:	str	r1, [fp, #-12]
   15314:	ldr	r2, [fp, #-12]
   15318:	ldr	r1, [fp, #-8]
   1531c:	mov	r0, #0
   15320:	bl	15248 <__assert_fail@plt+0x438c>
   15324:	mov	r3, r0
   15328:	mov	r0, r3
   1532c:	sub	sp, fp, #4
   15330:	ldr	fp, [sp]
   15334:	add	sp, sp, #4
   15338:	pop	{pc}		; (ldr pc, [sp], #4)
   1533c:	str	fp, [sp, #-8]!
   15340:	str	lr, [sp, #4]
   15344:	add	fp, sp, #4
   15348:	sub	sp, sp, #16
   1534c:	str	r0, [fp, #-8]
   15350:	str	r1, [fp, #-12]
   15354:	str	r2, [fp, #-16]
   15358:	ldr	r3, [fp, #-16]
   1535c:	ldr	r2, [fp, #-12]
   15360:	ldr	r1, [fp, #-8]
   15364:	mov	r0, #0
   15368:	bl	152a0 <__assert_fail@plt+0x43e4>
   1536c:	mov	r3, r0
   15370:	mov	r0, r3
   15374:	sub	sp, fp, #4
   15378:	ldr	fp, [sp]
   1537c:	add	sp, sp, #4
   15380:	pop	{pc}		; (ldr pc, [sp], #4)
   15384:	str	fp, [sp, #-8]!
   15388:	str	lr, [sp, #4]
   1538c:	add	fp, sp, #4
   15390:	sub	sp, sp, #64	; 0x40
   15394:	str	r0, [fp, #-56]	; 0xffffffc8
   15398:	str	r1, [fp, #-60]	; 0xffffffc4
   1539c:	mov	r3, r2
   153a0:	strb	r3, [fp, #-61]	; 0xffffffc3
   153a4:	movw	r2, #37292	; 0x91ac
   153a8:	movt	r2, #2
   153ac:	sub	r3, fp, #52	; 0x34
   153b0:	ldrd	r0, [r2]
   153b4:	strd	r0, [r3]
   153b8:	ldrd	r0, [r2, #8]
   153bc:	strd	r0, [r3, #8]
   153c0:	ldrd	r0, [r2, #16]
   153c4:	strd	r0, [r3, #16]
   153c8:	ldrd	r0, [r2, #24]
   153cc:	strd	r0, [r3, #24]
   153d0:	ldrd	r0, [r2, #32]
   153d4:	strd	r0, [r3, #32]
   153d8:	ldrd	r0, [r2, #40]	; 0x28
   153dc:	strd	r0, [r3, #40]	; 0x28
   153e0:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   153e4:	sub	r3, fp, #52	; 0x34
   153e8:	mov	r2, #1
   153ec:	mov	r0, r3
   153f0:	bl	130a8 <__assert_fail@plt+0x21ec>
   153f4:	sub	r3, fp, #52	; 0x34
   153f8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   153fc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15400:	mov	r0, #0
   15404:	bl	14e4c <__assert_fail@plt+0x3f90>
   15408:	mov	r3, r0
   1540c:	mov	r0, r3
   15410:	sub	sp, fp, #4
   15414:	ldr	fp, [sp]
   15418:	add	sp, sp, #4
   1541c:	pop	{pc}		; (ldr pc, [sp], #4)
   15420:	str	fp, [sp, #-8]!
   15424:	str	lr, [sp, #4]
   15428:	add	fp, sp, #4
   1542c:	sub	sp, sp, #8
   15430:	str	r0, [fp, #-8]
   15434:	mov	r3, r1
   15438:	strb	r3, [fp, #-9]
   1543c:	ldrb	r3, [fp, #-9]
   15440:	mov	r2, r3
   15444:	mvn	r1, #0
   15448:	ldr	r0, [fp, #-8]
   1544c:	bl	15384 <__assert_fail@plt+0x44c8>
   15450:	mov	r3, r0
   15454:	mov	r0, r3
   15458:	sub	sp, fp, #4
   1545c:	ldr	fp, [sp]
   15460:	add	sp, sp, #4
   15464:	pop	{pc}		; (ldr pc, [sp], #4)
   15468:	str	fp, [sp, #-8]!
   1546c:	str	lr, [sp, #4]
   15470:	add	fp, sp, #4
   15474:	sub	sp, sp, #8
   15478:	str	r0, [fp, #-8]
   1547c:	mov	r1, #58	; 0x3a
   15480:	ldr	r0, [fp, #-8]
   15484:	bl	15420 <__assert_fail@plt+0x4564>
   15488:	mov	r3, r0
   1548c:	mov	r0, r3
   15490:	sub	sp, fp, #4
   15494:	ldr	fp, [sp]
   15498:	add	sp, sp, #4
   1549c:	pop	{pc}		; (ldr pc, [sp], #4)
   154a0:	str	fp, [sp, #-8]!
   154a4:	str	lr, [sp, #4]
   154a8:	add	fp, sp, #4
   154ac:	sub	sp, sp, #8
   154b0:	str	r0, [fp, #-8]
   154b4:	str	r1, [fp, #-12]
   154b8:	mov	r2, #58	; 0x3a
   154bc:	ldr	r1, [fp, #-12]
   154c0:	ldr	r0, [fp, #-8]
   154c4:	bl	15384 <__assert_fail@plt+0x44c8>
   154c8:	mov	r3, r0
   154cc:	mov	r0, r3
   154d0:	sub	sp, fp, #4
   154d4:	ldr	fp, [sp]
   154d8:	add	sp, sp, #4
   154dc:	pop	{pc}		; (ldr pc, [sp], #4)
   154e0:	str	fp, [sp, #-8]!
   154e4:	str	lr, [sp, #4]
   154e8:	add	fp, sp, #4
   154ec:	sub	sp, sp, #112	; 0x70
   154f0:	str	r0, [fp, #-56]	; 0xffffffc8
   154f4:	str	r1, [fp, #-60]	; 0xffffffc4
   154f8:	str	r2, [fp, #-64]	; 0xffffffc0
   154fc:	sub	r3, fp, #116	; 0x74
   15500:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15504:	mov	r0, r3
   15508:	bl	13248 <__assert_fail@plt+0x238c>
   1550c:	sub	r3, fp, #52	; 0x34
   15510:	sub	r2, fp, #116	; 0x74
   15514:	ldrd	r0, [r2]
   15518:	strd	r0, [r3]
   1551c:	ldrd	r0, [r2, #8]
   15520:	strd	r0, [r3, #8]
   15524:	ldrd	r0, [r2, #16]
   15528:	strd	r0, [r3, #16]
   1552c:	ldrd	r0, [r2, #24]
   15530:	strd	r0, [r3, #24]
   15534:	ldrd	r0, [r2, #32]
   15538:	strd	r0, [r3, #32]
   1553c:	ldrd	r0, [r2, #40]	; 0x28
   15540:	strd	r0, [r3, #40]	; 0x28
   15544:	sub	r3, fp, #52	; 0x34
   15548:	mov	r2, #1
   1554c:	mov	r1, #58	; 0x3a
   15550:	mov	r0, r3
   15554:	bl	130a8 <__assert_fail@plt+0x21ec>
   15558:	sub	r3, fp, #52	; 0x34
   1555c:	mvn	r2, #0
   15560:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15564:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15568:	bl	14e4c <__assert_fail@plt+0x3f90>
   1556c:	mov	r3, r0
   15570:	mov	r0, r3
   15574:	sub	sp, fp, #4
   15578:	ldr	fp, [sp]
   1557c:	add	sp, sp, #4
   15580:	pop	{pc}		; (ldr pc, [sp], #4)
   15584:	str	fp, [sp, #-8]!
   15588:	str	lr, [sp, #4]
   1558c:	add	fp, sp, #4
   15590:	sub	sp, sp, #24
   15594:	str	r0, [fp, #-8]
   15598:	str	r1, [fp, #-12]
   1559c:	str	r2, [fp, #-16]
   155a0:	str	r3, [fp, #-20]	; 0xffffffec
   155a4:	mvn	r3, #0
   155a8:	str	r3, [sp]
   155ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   155b0:	ldr	r2, [fp, #-16]
   155b4:	ldr	r1, [fp, #-12]
   155b8:	ldr	r0, [fp, #-8]
   155bc:	bl	155d8 <__assert_fail@plt+0x471c>
   155c0:	mov	r3, r0
   155c4:	mov	r0, r3
   155c8:	sub	sp, fp, #4
   155cc:	ldr	fp, [sp]
   155d0:	add	sp, sp, #4
   155d4:	pop	{pc}		; (ldr pc, [sp], #4)
   155d8:	str	fp, [sp, #-8]!
   155dc:	str	lr, [sp, #4]
   155e0:	add	fp, sp, #4
   155e4:	sub	sp, sp, #64	; 0x40
   155e8:	str	r0, [fp, #-56]	; 0xffffffc8
   155ec:	str	r1, [fp, #-60]	; 0xffffffc4
   155f0:	str	r2, [fp, #-64]	; 0xffffffc0
   155f4:	str	r3, [fp, #-68]	; 0xffffffbc
   155f8:	movw	r2, #37292	; 0x91ac
   155fc:	movt	r2, #2
   15600:	sub	r3, fp, #52	; 0x34
   15604:	ldrd	r0, [r2]
   15608:	strd	r0, [r3]
   1560c:	ldrd	r0, [r2, #8]
   15610:	strd	r0, [r3, #8]
   15614:	ldrd	r0, [r2, #16]
   15618:	strd	r0, [r3, #16]
   1561c:	ldrd	r0, [r2, #24]
   15620:	strd	r0, [r3, #24]
   15624:	ldrd	r0, [r2, #32]
   15628:	strd	r0, [r3, #32]
   1562c:	ldrd	r0, [r2, #40]	; 0x28
   15630:	strd	r0, [r3, #40]	; 0x28
   15634:	sub	r3, fp, #52	; 0x34
   15638:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1563c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15640:	mov	r0, r3
   15644:	bl	131c0 <__assert_fail@plt+0x2304>
   15648:	sub	r3, fp, #52	; 0x34
   1564c:	ldr	r2, [fp, #4]
   15650:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15654:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15658:	bl	14e4c <__assert_fail@plt+0x3f90>
   1565c:	mov	r3, r0
   15660:	mov	r0, r3
   15664:	sub	sp, fp, #4
   15668:	ldr	fp, [sp]
   1566c:	add	sp, sp, #4
   15670:	pop	{pc}		; (ldr pc, [sp], #4)
   15674:	str	fp, [sp, #-8]!
   15678:	str	lr, [sp, #4]
   1567c:	add	fp, sp, #4
   15680:	sub	sp, sp, #16
   15684:	str	r0, [fp, #-8]
   15688:	str	r1, [fp, #-12]
   1568c:	str	r2, [fp, #-16]
   15690:	ldr	r3, [fp, #-16]
   15694:	ldr	r2, [fp, #-12]
   15698:	ldr	r1, [fp, #-8]
   1569c:	mov	r0, #0
   156a0:	bl	15584 <__assert_fail@plt+0x46c8>
   156a4:	mov	r3, r0
   156a8:	mov	r0, r3
   156ac:	sub	sp, fp, #4
   156b0:	ldr	fp, [sp]
   156b4:	add	sp, sp, #4
   156b8:	pop	{pc}		; (ldr pc, [sp], #4)
   156bc:	str	fp, [sp, #-8]!
   156c0:	str	lr, [sp, #4]
   156c4:	add	fp, sp, #4
   156c8:	sub	sp, sp, #24
   156cc:	str	r0, [fp, #-8]
   156d0:	str	r1, [fp, #-12]
   156d4:	str	r2, [fp, #-16]
   156d8:	str	r3, [fp, #-20]	; 0xffffffec
   156dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   156e0:	str	r3, [sp]
   156e4:	ldr	r3, [fp, #-16]
   156e8:	ldr	r2, [fp, #-12]
   156ec:	ldr	r1, [fp, #-8]
   156f0:	mov	r0, #0
   156f4:	bl	155d8 <__assert_fail@plt+0x471c>
   156f8:	mov	r3, r0
   156fc:	mov	r0, r3
   15700:	sub	sp, fp, #4
   15704:	ldr	fp, [sp]
   15708:	add	sp, sp, #4
   1570c:	pop	{pc}		; (ldr pc, [sp], #4)
   15710:	str	fp, [sp, #-8]!
   15714:	str	lr, [sp, #4]
   15718:	add	fp, sp, #4
   1571c:	sub	sp, sp, #16
   15720:	str	r0, [fp, #-8]
   15724:	str	r1, [fp, #-12]
   15728:	str	r2, [fp, #-16]
   1572c:	movw	r3, #37124	; 0x9104
   15730:	movt	r3, #2
   15734:	ldr	r2, [fp, #-16]
   15738:	ldr	r1, [fp, #-12]
   1573c:	ldr	r0, [fp, #-8]
   15740:	bl	14e4c <__assert_fail@plt+0x3f90>
   15744:	mov	r3, r0
   15748:	mov	r0, r3
   1574c:	sub	sp, fp, #4
   15750:	ldr	fp, [sp]
   15754:	add	sp, sp, #4
   15758:	pop	{pc}		; (ldr pc, [sp], #4)
   1575c:	str	fp, [sp, #-8]!
   15760:	str	lr, [sp, #4]
   15764:	add	fp, sp, #4
   15768:	sub	sp, sp, #8
   1576c:	str	r0, [fp, #-8]
   15770:	str	r1, [fp, #-12]
   15774:	ldr	r2, [fp, #-12]
   15778:	ldr	r1, [fp, #-8]
   1577c:	mov	r0, #0
   15780:	bl	15710 <__assert_fail@plt+0x4854>
   15784:	mov	r3, r0
   15788:	mov	r0, r3
   1578c:	sub	sp, fp, #4
   15790:	ldr	fp, [sp]
   15794:	add	sp, sp, #4
   15798:	pop	{pc}		; (ldr pc, [sp], #4)
   1579c:	str	fp, [sp, #-8]!
   157a0:	str	lr, [sp, #4]
   157a4:	add	fp, sp, #4
   157a8:	sub	sp, sp, #8
   157ac:	str	r0, [fp, #-8]
   157b0:	str	r1, [fp, #-12]
   157b4:	mvn	r2, #0
   157b8:	ldr	r1, [fp, #-12]
   157bc:	ldr	r0, [fp, #-8]
   157c0:	bl	15710 <__assert_fail@plt+0x4854>
   157c4:	mov	r3, r0
   157c8:	mov	r0, r3
   157cc:	sub	sp, fp, #4
   157d0:	ldr	fp, [sp]
   157d4:	add	sp, sp, #4
   157d8:	pop	{pc}		; (ldr pc, [sp], #4)
   157dc:	str	fp, [sp, #-8]!
   157e0:	str	lr, [sp, #4]
   157e4:	add	fp, sp, #4
   157e8:	sub	sp, sp, #8
   157ec:	str	r0, [fp, #-8]
   157f0:	ldr	r1, [fp, #-8]
   157f4:	mov	r0, #0
   157f8:	bl	1579c <__assert_fail@plt+0x48e0>
   157fc:	mov	r3, r0
   15800:	mov	r0, r3
   15804:	sub	sp, fp, #4
   15808:	ldr	fp, [sp]
   1580c:	add	sp, sp, #4
   15810:	pop	{pc}		; (ldr pc, [sp], #4)
   15814:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15818:	strd	r6, [sp, #8]
   1581c:	str	fp, [sp, #16]
   15820:	str	lr, [sp, #20]
   15824:	add	fp, sp, #20
   15828:	sub	sp, sp, #48	; 0x30
   1582c:	str	r0, [fp, #-24]	; 0xffffffe8
   15830:	str	r1, [fp, #-28]	; 0xffffffe4
   15834:	str	r2, [fp, #-32]	; 0xffffffe0
   15838:	str	r3, [fp, #-36]	; 0xffffffdc
   1583c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15840:	cmp	r3, #0
   15844:	beq	1586c <__assert_fail@plt+0x49b0>
   15848:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1584c:	str	r3, [sp]
   15850:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15854:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15858:	movw	r1, #33448	; 0x82a8
   1585c:	movt	r1, #1
   15860:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15864:	bl	10df0 <fprintf@plt>
   15868:	b	15884 <__assert_fail@plt+0x49c8>
   1586c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15870:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15874:	movw	r1, #33460	; 0x82b4
   15878:	movt	r1, #1
   1587c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15880:	bl	10df0 <fprintf@plt>
   15884:	movw	r0, #33468	; 0x82bc
   15888:	movt	r0, #1
   1588c:	bl	10dd8 <gettext@plt>
   15890:	mov	r2, r0
   15894:	movw	r3, #2022	; 0x7e6
   15898:	movw	r1, #34252	; 0x85cc
   1589c:	movt	r1, #1
   158a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158a4:	bl	10df0 <fprintf@plt>
   158a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   158ac:	mov	r0, #10
   158b0:	bl	10cf4 <fputc_unlocked@plt>
   158b4:	movw	r0, #33472	; 0x82c0
   158b8:	movt	r0, #1
   158bc:	bl	10dd8 <gettext@plt>
   158c0:	mov	r3, r0
   158c4:	movw	r2, #33644	; 0x836c
   158c8:	movt	r2, #1
   158cc:	mov	r1, r3
   158d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158d4:	bl	10df0 <fprintf@plt>
   158d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   158dc:	mov	r0, #10
   158e0:	bl	10cf4 <fputc_unlocked@plt>
   158e4:	ldr	r3, [fp, #8]
   158e8:	cmp	r3, #9
   158ec:	ldrls	pc, [pc, r3, lsl #2]
   158f0:	b	15cd0 <__assert_fail@plt+0x4e14>
   158f4:	andeq	r5, r1, ip, ror sp
   158f8:	andeq	r5, r1, ip, lsl r9
   158fc:	andeq	r5, r1, r4, asr #18
   15900:	andeq	r5, r1, r4, ror r9
   15904:			; <UNDEFINED> instruction: 0x000159b8
   15908:	andeq	r5, r1, r4, lsl sl
   1590c:	andeq	r5, r1, r0, lsl #21
   15910:	strdeq	r5, [r1], -ip
   15914:	andeq	r5, r1, r8, lsl #23
   15918:	andeq	r5, r1, r4, lsr #24
   1591c:	movw	r0, #33680	; 0x8390
   15920:	movt	r0, #1
   15924:	bl	10dd8 <gettext@plt>
   15928:	mov	r1, r0
   1592c:	ldr	r3, [fp, #4]
   15930:	ldr	r3, [r3]
   15934:	mov	r2, r3
   15938:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1593c:	bl	10df0 <fprintf@plt>
   15940:	b	15d80 <__assert_fail@plt+0x4ec4>
   15944:	movw	r0, #33696	; 0x83a0
   15948:	movt	r0, #1
   1594c:	bl	10dd8 <gettext@plt>
   15950:	mov	r1, r0
   15954:	ldr	r3, [fp, #4]
   15958:	ldr	r2, [r3]
   1595c:	ldr	r3, [fp, #4]
   15960:	add	r3, r3, #4
   15964:	ldr	r3, [r3]
   15968:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1596c:	bl	10df0 <fprintf@plt>
   15970:	b	15d80 <__assert_fail@plt+0x4ec4>
   15974:	movw	r0, #33720	; 0x83b8
   15978:	movt	r0, #1
   1597c:	bl	10dd8 <gettext@plt>
   15980:	ldr	r3, [fp, #4]
   15984:	ldr	r2, [r3]
   15988:	ldr	r3, [fp, #4]
   1598c:	add	r3, r3, #4
   15990:	ldr	r1, [r3]
   15994:	ldr	r3, [fp, #4]
   15998:	add	r3, r3, #8
   1599c:	ldr	r3, [r3]
   159a0:	str	r3, [sp]
   159a4:	mov	r3, r1
   159a8:	mov	r1, r0
   159ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159b0:	bl	10df0 <fprintf@plt>
   159b4:	b	15d80 <__assert_fail@plt+0x4ec4>
   159b8:	movw	r0, #33748	; 0x83d4
   159bc:	movt	r0, #1
   159c0:	bl	10dd8 <gettext@plt>
   159c4:	mov	ip, r0
   159c8:	ldr	r3, [fp, #4]
   159cc:	ldr	r1, [r3]
   159d0:	ldr	r3, [fp, #4]
   159d4:	add	r3, r3, #4
   159d8:	ldr	r0, [r3]
   159dc:	ldr	r3, [fp, #4]
   159e0:	add	r3, r3, #8
   159e4:	ldr	r3, [r3]
   159e8:	ldr	r2, [fp, #4]
   159ec:	add	r2, r2, #12
   159f0:	ldr	r2, [r2]
   159f4:	str	r2, [sp, #4]
   159f8:	str	r3, [sp]
   159fc:	mov	r3, r0
   15a00:	mov	r2, r1
   15a04:	mov	r1, ip
   15a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a0c:	bl	10df0 <fprintf@plt>
   15a10:	b	15d80 <__assert_fail@plt+0x4ec4>
   15a14:	movw	r0, #33780	; 0x83f4
   15a18:	movt	r0, #1
   15a1c:	bl	10dd8 <gettext@plt>
   15a20:	mov	lr, r0
   15a24:	ldr	r3, [fp, #4]
   15a28:	ldr	r0, [r3]
   15a2c:	ldr	r3, [fp, #4]
   15a30:	add	r3, r3, #4
   15a34:	ldr	ip, [r3]
   15a38:	ldr	r3, [fp, #4]
   15a3c:	add	r3, r3, #8
   15a40:	ldr	r3, [r3]
   15a44:	ldr	r2, [fp, #4]
   15a48:	add	r2, r2, #12
   15a4c:	ldr	r2, [r2]
   15a50:	ldr	r1, [fp, #4]
   15a54:	add	r1, r1, #16
   15a58:	ldr	r1, [r1]
   15a5c:	str	r1, [sp, #8]
   15a60:	str	r2, [sp, #4]
   15a64:	str	r3, [sp]
   15a68:	mov	r3, ip
   15a6c:	mov	r2, r0
   15a70:	mov	r1, lr
   15a74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a78:	bl	10df0 <fprintf@plt>
   15a7c:	b	15d80 <__assert_fail@plt+0x4ec4>
   15a80:	movw	r0, #33816	; 0x8418
   15a84:	movt	r0, #1
   15a88:	bl	10dd8 <gettext@plt>
   15a8c:	mov	r4, r0
   15a90:	ldr	r3, [fp, #4]
   15a94:	ldr	ip, [r3]
   15a98:	ldr	r3, [fp, #4]
   15a9c:	add	r3, r3, #4
   15aa0:	ldr	lr, [r3]
   15aa4:	ldr	r3, [fp, #4]
   15aa8:	add	r3, r3, #8
   15aac:	ldr	r3, [r3]
   15ab0:	ldr	r2, [fp, #4]
   15ab4:	add	r2, r2, #12
   15ab8:	ldr	r2, [r2]
   15abc:	ldr	r1, [fp, #4]
   15ac0:	add	r1, r1, #16
   15ac4:	ldr	r1, [r1]
   15ac8:	ldr	r0, [fp, #4]
   15acc:	add	r0, r0, #20
   15ad0:	ldr	r0, [r0]
   15ad4:	str	r0, [sp, #12]
   15ad8:	str	r1, [sp, #8]
   15adc:	str	r2, [sp, #4]
   15ae0:	str	r3, [sp]
   15ae4:	mov	r3, lr
   15ae8:	mov	r2, ip
   15aec:	mov	r1, r4
   15af0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15af4:	bl	10df0 <fprintf@plt>
   15af8:	b	15d80 <__assert_fail@plt+0x4ec4>
   15afc:	movw	r0, #33856	; 0x8440
   15b00:	movt	r0, #1
   15b04:	bl	10dd8 <gettext@plt>
   15b08:	mov	r5, r0
   15b0c:	ldr	r3, [fp, #4]
   15b10:	ldr	lr, [r3]
   15b14:	ldr	r3, [fp, #4]
   15b18:	add	r3, r3, #4
   15b1c:	ldr	r4, [r3]
   15b20:	ldr	r3, [fp, #4]
   15b24:	add	r3, r3, #8
   15b28:	ldr	r3, [r3]
   15b2c:	ldr	r2, [fp, #4]
   15b30:	add	r2, r2, #12
   15b34:	ldr	r2, [r2]
   15b38:	ldr	r1, [fp, #4]
   15b3c:	add	r1, r1, #16
   15b40:	ldr	r1, [r1]
   15b44:	ldr	r0, [fp, #4]
   15b48:	add	r0, r0, #20
   15b4c:	ldr	r0, [r0]
   15b50:	ldr	ip, [fp, #4]
   15b54:	add	ip, ip, #24
   15b58:	ldr	ip, [ip]
   15b5c:	str	ip, [sp, #16]
   15b60:	str	r0, [sp, #12]
   15b64:	str	r1, [sp, #8]
   15b68:	str	r2, [sp, #4]
   15b6c:	str	r3, [sp]
   15b70:	mov	r3, r4
   15b74:	mov	r2, lr
   15b78:	mov	r1, r5
   15b7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b80:	bl	10df0 <fprintf@plt>
   15b84:	b	15d80 <__assert_fail@plt+0x4ec4>
   15b88:	movw	r0, #33900	; 0x846c
   15b8c:	movt	r0, #1
   15b90:	bl	10dd8 <gettext@plt>
   15b94:	mov	r6, r0
   15b98:	ldr	r3, [fp, #4]
   15b9c:	ldr	r4, [r3]
   15ba0:	ldr	r3, [fp, #4]
   15ba4:	add	r3, r3, #4
   15ba8:	ldr	r5, [r3]
   15bac:	ldr	r3, [fp, #4]
   15bb0:	add	r3, r3, #8
   15bb4:	ldr	r3, [r3]
   15bb8:	ldr	r2, [fp, #4]
   15bbc:	add	r2, r2, #12
   15bc0:	ldr	r2, [r2]
   15bc4:	ldr	r1, [fp, #4]
   15bc8:	add	r1, r1, #16
   15bcc:	ldr	r1, [r1]
   15bd0:	ldr	r0, [fp, #4]
   15bd4:	add	r0, r0, #20
   15bd8:	ldr	r0, [r0]
   15bdc:	ldr	ip, [fp, #4]
   15be0:	add	ip, ip, #24
   15be4:	ldr	ip, [ip]
   15be8:	ldr	lr, [fp, #4]
   15bec:	add	lr, lr, #28
   15bf0:	ldr	lr, [lr]
   15bf4:	str	lr, [sp, #20]
   15bf8:	str	ip, [sp, #16]
   15bfc:	str	r0, [sp, #12]
   15c00:	str	r1, [sp, #8]
   15c04:	str	r2, [sp, #4]
   15c08:	str	r3, [sp]
   15c0c:	mov	r3, r5
   15c10:	mov	r2, r4
   15c14:	mov	r1, r6
   15c18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c1c:	bl	10df0 <fprintf@plt>
   15c20:	b	15d80 <__assert_fail@plt+0x4ec4>
   15c24:	movw	r0, #33948	; 0x849c
   15c28:	movt	r0, #1
   15c2c:	bl	10dd8 <gettext@plt>
   15c30:	mov	r7, r0
   15c34:	ldr	r3, [fp, #4]
   15c38:	ldr	r5, [r3]
   15c3c:	ldr	r3, [fp, #4]
   15c40:	add	r3, r3, #4
   15c44:	ldr	r6, [r3]
   15c48:	ldr	r3, [fp, #4]
   15c4c:	add	r3, r3, #8
   15c50:	ldr	r3, [r3]
   15c54:	ldr	r2, [fp, #4]
   15c58:	add	r2, r2, #12
   15c5c:	ldr	r2, [r2]
   15c60:	ldr	r1, [fp, #4]
   15c64:	add	r1, r1, #16
   15c68:	ldr	r1, [r1]
   15c6c:	ldr	r0, [fp, #4]
   15c70:	add	r0, r0, #20
   15c74:	ldr	r0, [r0]
   15c78:	ldr	ip, [fp, #4]
   15c7c:	add	ip, ip, #24
   15c80:	ldr	ip, [ip]
   15c84:	ldr	lr, [fp, #4]
   15c88:	add	lr, lr, #28
   15c8c:	ldr	lr, [lr]
   15c90:	ldr	r4, [fp, #4]
   15c94:	add	r4, r4, #32
   15c98:	ldr	r4, [r4]
   15c9c:	str	r4, [sp, #24]
   15ca0:	str	lr, [sp, #20]
   15ca4:	str	ip, [sp, #16]
   15ca8:	str	r0, [sp, #12]
   15cac:	str	r1, [sp, #8]
   15cb0:	str	r2, [sp, #4]
   15cb4:	str	r3, [sp]
   15cb8:	mov	r3, r6
   15cbc:	mov	r2, r5
   15cc0:	mov	r1, r7
   15cc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15cc8:	bl	10df0 <fprintf@plt>
   15ccc:	b	15d80 <__assert_fail@plt+0x4ec4>
   15cd0:	movw	r0, #34000	; 0x84d0
   15cd4:	movt	r0, #1
   15cd8:	bl	10dd8 <gettext@plt>
   15cdc:	mov	r7, r0
   15ce0:	ldr	r3, [fp, #4]
   15ce4:	ldr	r5, [r3]
   15ce8:	ldr	r3, [fp, #4]
   15cec:	add	r3, r3, #4
   15cf0:	ldr	r6, [r3]
   15cf4:	ldr	r3, [fp, #4]
   15cf8:	add	r3, r3, #8
   15cfc:	ldr	r3, [r3]
   15d00:	ldr	r2, [fp, #4]
   15d04:	add	r2, r2, #12
   15d08:	ldr	r2, [r2]
   15d0c:	ldr	r1, [fp, #4]
   15d10:	add	r1, r1, #16
   15d14:	ldr	r1, [r1]
   15d18:	ldr	r0, [fp, #4]
   15d1c:	add	r0, r0, #20
   15d20:	ldr	r0, [r0]
   15d24:	ldr	ip, [fp, #4]
   15d28:	add	ip, ip, #24
   15d2c:	ldr	ip, [ip]
   15d30:	ldr	lr, [fp, #4]
   15d34:	add	lr, lr, #28
   15d38:	ldr	lr, [lr]
   15d3c:	ldr	r4, [fp, #4]
   15d40:	add	r4, r4, #32
   15d44:	ldr	r4, [r4]
   15d48:	str	r4, [sp, #24]
   15d4c:	str	lr, [sp, #20]
   15d50:	str	ip, [sp, #16]
   15d54:	str	r0, [sp, #12]
   15d58:	str	r1, [sp, #8]
   15d5c:	str	r2, [sp, #4]
   15d60:	str	r3, [sp]
   15d64:	mov	r3, r6
   15d68:	mov	r2, r5
   15d6c:	mov	r1, r7
   15d70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d74:	bl	10df0 <fprintf@plt>
   15d78:	b	15d80 <__assert_fail@plt+0x4ec4>
   15d7c:	nop	{0}
   15d80:	nop	{0}
   15d84:	sub	sp, fp, #20
   15d88:	ldrd	r4, [sp]
   15d8c:	ldrd	r6, [sp, #8]
   15d90:	ldr	fp, [sp, #16]
   15d94:	add	sp, sp, #20
   15d98:	pop	{pc}		; (ldr pc, [sp], #4)
   15d9c:	str	fp, [sp, #-8]!
   15da0:	str	lr, [sp, #4]
   15da4:	add	fp, sp, #4
   15da8:	sub	sp, sp, #32
   15dac:	str	r0, [fp, #-16]
   15db0:	str	r1, [fp, #-20]	; 0xffffffec
   15db4:	str	r2, [fp, #-24]	; 0xffffffe8
   15db8:	str	r3, [fp, #-28]	; 0xffffffe4
   15dbc:	mov	r3, #0
   15dc0:	str	r3, [fp, #-8]
   15dc4:	b	15dd4 <__assert_fail@plt+0x4f18>
   15dc8:	ldr	r3, [fp, #-8]
   15dcc:	add	r3, r3, #1
   15dd0:	str	r3, [fp, #-8]
   15dd4:	ldr	r3, [fp, #-8]
   15dd8:	lsl	r3, r3, #2
   15ddc:	ldr	r2, [fp, #4]
   15de0:	add	r3, r2, r3
   15de4:	ldr	r3, [r3]
   15de8:	cmp	r3, #0
   15dec:	bne	15dc8 <__assert_fail@plt+0x4f0c>
   15df0:	ldr	r3, [fp, #-8]
   15df4:	str	r3, [sp, #4]
   15df8:	ldr	r3, [fp, #4]
   15dfc:	str	r3, [sp]
   15e00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e04:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15e08:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e0c:	ldr	r0, [fp, #-16]
   15e10:	bl	15814 <__assert_fail@plt+0x4958>
   15e14:	nop	{0}
   15e18:	sub	sp, fp, #4
   15e1c:	ldr	fp, [sp]
   15e20:	add	sp, sp, #4
   15e24:	pop	{pc}		; (ldr pc, [sp], #4)
   15e28:	str	fp, [sp, #-8]!
   15e2c:	str	lr, [sp, #4]
   15e30:	add	fp, sp, #4
   15e34:	sub	sp, sp, #72	; 0x48
   15e38:	str	r0, [fp, #-56]	; 0xffffffc8
   15e3c:	str	r1, [fp, #-60]	; 0xffffffc4
   15e40:	str	r2, [fp, #-64]	; 0xffffffc0
   15e44:	str	r3, [fp, #-68]	; 0xffffffbc
   15e48:	mov	r3, #0
   15e4c:	str	r3, [fp, #-8]
   15e50:	b	15e60 <__assert_fail@plt+0x4fa4>
   15e54:	ldr	r3, [fp, #-8]
   15e58:	add	r3, r3, #1
   15e5c:	str	r3, [fp, #-8]
   15e60:	ldr	r3, [fp, #-8]
   15e64:	cmp	r3, #9
   15e68:	bhi	15eac <__assert_fail@plt+0x4ff0>
   15e6c:	ldr	r3, [fp, #4]
   15e70:	add	r2, r3, #4
   15e74:	str	r2, [fp, #4]
   15e78:	ldr	r2, [r3]
   15e7c:	ldr	r3, [fp, #-8]
   15e80:	lsl	r3, r3, #2
   15e84:	sub	r1, fp, #4
   15e88:	add	r3, r1, r3
   15e8c:	str	r2, [r3, #-44]	; 0xffffffd4
   15e90:	ldr	r3, [fp, #-8]
   15e94:	lsl	r3, r3, #2
   15e98:	sub	r2, fp, #4
   15e9c:	add	r3, r2, r3
   15ea0:	ldr	r3, [r3, #-44]	; 0xffffffd4
   15ea4:	cmp	r3, #0
   15ea8:	bne	15e54 <__assert_fail@plt+0x4f98>
   15eac:	ldr	r3, [fp, #-8]
   15eb0:	str	r3, [sp, #4]
   15eb4:	sub	r3, fp, #48	; 0x30
   15eb8:	str	r3, [sp]
   15ebc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15ec0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15ec4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ec8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15ecc:	bl	15814 <__assert_fail@plt+0x4958>
   15ed0:	nop	{0}
   15ed4:	sub	sp, fp, #4
   15ed8:	ldr	fp, [sp]
   15edc:	add	sp, sp, #4
   15ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ee4:	push	{r3}		; (str r3, [sp, #-4]!)
   15ee8:	str	fp, [sp, #-8]!
   15eec:	str	lr, [sp, #4]
   15ef0:	add	fp, sp, #4
   15ef4:	sub	sp, sp, #36	; 0x24
   15ef8:	str	r0, [fp, #-20]	; 0xffffffec
   15efc:	str	r1, [fp, #-24]	; 0xffffffe8
   15f00:	str	r2, [fp, #-28]	; 0xffffffe4
   15f04:	add	r3, fp, #8
   15f08:	str	r3, [fp, #-12]
   15f0c:	ldr	r3, [fp, #-12]
   15f10:	str	r3, [sp]
   15f14:	ldr	r3, [fp, #4]
   15f18:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15f1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15f20:	ldr	r0, [fp, #-20]	; 0xffffffec
   15f24:	bl	15e28 <__assert_fail@plt+0x4f6c>
   15f28:	nop	{0}
   15f2c:	sub	sp, fp, #4
   15f30:	ldr	fp, [sp]
   15f34:	ldr	lr, [sp, #4]
   15f38:	add	sp, sp, #8
   15f3c:	add	sp, sp, #4
   15f40:	bx	lr
   15f44:	str	fp, [sp, #-8]!
   15f48:	str	lr, [sp, #4]
   15f4c:	add	fp, sp, #4
   15f50:	movw	r3, #37204	; 0x9154
   15f54:	movt	r3, #2
   15f58:	ldr	r3, [r3]
   15f5c:	mov	r1, r3
   15f60:	mov	r0, #10
   15f64:	bl	10cf4 <fputc_unlocked@plt>
   15f68:	movw	r0, #34060	; 0x850c
   15f6c:	movt	r0, #1
   15f70:	bl	10dd8 <gettext@plt>
   15f74:	mov	r3, r0
   15f78:	movw	r1, #34080	; 0x8520
   15f7c:	movt	r1, #1
   15f80:	mov	r0, r3
   15f84:	bl	10ca0 <printf@plt>
   15f88:	movw	r0, #34104	; 0x8538
   15f8c:	movt	r0, #1
   15f90:	bl	10dd8 <gettext@plt>
   15f94:	mov	r3, r0
   15f98:	movw	r2, #34124	; 0x854c
   15f9c:	movt	r2, #1
   15fa0:	movw	r1, #34164	; 0x8574
   15fa4:	movt	r1, #1
   15fa8:	mov	r0, r3
   15fac:	bl	10ca0 <printf@plt>
   15fb0:	movw	r0, #34180	; 0x8584
   15fb4:	movt	r0, #1
   15fb8:	bl	10dd8 <gettext@plt>
   15fbc:	mov	r3, r0
   15fc0:	movw	r1, #34220	; 0x85ac
   15fc4:	movt	r1, #1
   15fc8:	mov	r0, r3
   15fcc:	bl	10ca0 <printf@plt>
   15fd0:	nop	{0}
   15fd4:	sub	sp, fp, #4
   15fd8:	ldr	fp, [sp]
   15fdc:	add	sp, sp, #4
   15fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe4:	str	fp, [sp, #-8]!
   15fe8:	str	lr, [sp, #4]
   15fec:	add	fp, sp, #4
   15ff0:	sub	sp, sp, #16
   15ff4:	str	r0, [fp, #-8]
   15ff8:	str	r1, [fp, #-12]
   15ffc:	str	r2, [fp, #-16]
   16000:	ldr	r2, [fp, #-16]
   16004:	ldr	r1, [fp, #-12]
   16008:	ldr	r0, [fp, #-8]
   1600c:	bl	161c8 <__assert_fail@plt+0x530c>
   16010:	mov	r3, r0
   16014:	mov	r0, r3
   16018:	sub	sp, fp, #4
   1601c:	ldr	fp, [sp]
   16020:	add	sp, sp, #4
   16024:	pop	{pc}		; (ldr pc, [sp], #4)
   16028:	str	fp, [sp, #-8]!
   1602c:	str	lr, [sp, #4]
   16030:	add	fp, sp, #4
   16034:	sub	sp, sp, #8
   16038:	str	r0, [fp, #-8]
   1603c:	ldr	r3, [fp, #-8]
   16040:	cmp	r3, #0
   16044:	bne	1604c <__assert_fail@plt+0x5190>
   16048:	bl	168d8 <__assert_fail@plt+0x5a1c>
   1604c:	ldr	r3, [fp, #-8]
   16050:	mov	r0, r3
   16054:	sub	sp, fp, #4
   16058:	ldr	fp, [sp]
   1605c:	add	sp, sp, #4
   16060:	pop	{pc}		; (ldr pc, [sp], #4)
   16064:	str	fp, [sp, #-8]!
   16068:	str	lr, [sp, #4]
   1606c:	add	fp, sp, #4
   16070:	sub	sp, sp, #8
   16074:	str	r0, [fp, #-8]
   16078:	ldr	r0, [fp, #-8]
   1607c:	bl	169ec <__assert_fail@plt+0x5b30>
   16080:	mov	r3, r0
   16084:	mov	r0, r3
   16088:	bl	16028 <__assert_fail@plt+0x516c>
   1608c:	mov	r3, r0
   16090:	mov	r0, r3
   16094:	sub	sp, fp, #4
   16098:	ldr	fp, [sp]
   1609c:	add	sp, sp, #4
   160a0:	pop	{pc}		; (ldr pc, [sp], #4)
   160a4:	str	fp, [sp, #-8]!
   160a8:	str	lr, [sp, #4]
   160ac:	add	fp, sp, #4
   160b0:	sub	sp, sp, #8
   160b4:	str	r0, [fp, #-8]
   160b8:	ldr	r0, [fp, #-8]
   160bc:	bl	16cf8 <__assert_fail@plt+0x5e3c>
   160c0:	mov	r3, r0
   160c4:	mov	r0, r3
   160c8:	bl	16028 <__assert_fail@plt+0x516c>
   160cc:	mov	r3, r0
   160d0:	mov	r0, r3
   160d4:	sub	sp, fp, #4
   160d8:	ldr	fp, [sp]
   160dc:	add	sp, sp, #4
   160e0:	pop	{pc}		; (ldr pc, [sp], #4)
   160e4:	str	fp, [sp, #-8]!
   160e8:	str	lr, [sp, #4]
   160ec:	add	fp, sp, #4
   160f0:	sub	sp, sp, #8
   160f4:	str	r0, [fp, #-8]
   160f8:	ldr	r0, [fp, #-8]
   160fc:	bl	16064 <__assert_fail@plt+0x51a8>
   16100:	mov	r3, r0
   16104:	mov	r0, r3
   16108:	sub	sp, fp, #4
   1610c:	ldr	fp, [sp]
   16110:	add	sp, sp, #4
   16114:	pop	{pc}		; (ldr pc, [sp], #4)
   16118:	str	fp, [sp, #-8]!
   1611c:	str	lr, [sp, #4]
   16120:	add	fp, sp, #4
   16124:	sub	sp, sp, #16
   16128:	str	r0, [fp, #-16]
   1612c:	str	r1, [fp, #-20]	; 0xffffffec
   16130:	ldr	r1, [fp, #-20]	; 0xffffffec
   16134:	ldr	r0, [fp, #-16]
   16138:	bl	16a7c <__assert_fail@plt+0x5bc0>
   1613c:	str	r0, [fp, #-8]
   16140:	ldr	r3, [fp, #-8]
   16144:	cmp	r3, #0
   16148:	bne	16168 <__assert_fail@plt+0x52ac>
   1614c:	ldr	r3, [fp, #-16]
   16150:	cmp	r3, #0
   16154:	beq	16164 <__assert_fail@plt+0x52a8>
   16158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1615c:	cmp	r3, #0
   16160:	beq	16168 <__assert_fail@plt+0x52ac>
   16164:	bl	168d8 <__assert_fail@plt+0x5a1c>
   16168:	ldr	r3, [fp, #-8]
   1616c:	mov	r0, r3
   16170:	sub	sp, fp, #4
   16174:	ldr	fp, [sp]
   16178:	add	sp, sp, #4
   1617c:	pop	{pc}		; (ldr pc, [sp], #4)
   16180:	str	fp, [sp, #-8]!
   16184:	str	lr, [sp, #4]
   16188:	add	fp, sp, #4
   1618c:	sub	sp, sp, #8
   16190:	str	r0, [fp, #-8]
   16194:	str	r1, [fp, #-12]
   16198:	ldr	r1, [fp, #-12]
   1619c:	ldr	r0, [fp, #-8]
   161a0:	bl	16d30 <__assert_fail@plt+0x5e74>
   161a4:	mov	r3, r0
   161a8:	mov	r0, r3
   161ac:	bl	16028 <__assert_fail@plt+0x516c>
   161b0:	mov	r3, r0
   161b4:	mov	r0, r3
   161b8:	sub	sp, fp, #4
   161bc:	ldr	fp, [sp]
   161c0:	add	sp, sp, #4
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	str	fp, [sp, #-8]!
   161cc:	str	lr, [sp, #4]
   161d0:	add	fp, sp, #4
   161d4:	sub	sp, sp, #24
   161d8:	str	r0, [fp, #-16]
   161dc:	str	r1, [fp, #-20]	; 0xffffffec
   161e0:	str	r2, [fp, #-24]	; 0xffffffe8
   161e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   161e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   161ec:	ldr	r0, [fp, #-16]
   161f0:	bl	16f60 <__assert_fail@plt+0x60a4>
   161f4:	str	r0, [fp, #-8]
   161f8:	ldr	r3, [fp, #-8]
   161fc:	cmp	r3, #0
   16200:	bne	1622c <__assert_fail@plt+0x5370>
   16204:	ldr	r3, [fp, #-16]
   16208:	cmp	r3, #0
   1620c:	beq	16228 <__assert_fail@plt+0x536c>
   16210:	ldr	r3, [fp, #-20]	; 0xffffffec
   16214:	cmp	r3, #0
   16218:	beq	1622c <__assert_fail@plt+0x5370>
   1621c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16220:	cmp	r3, #0
   16224:	beq	1622c <__assert_fail@plt+0x5370>
   16228:	bl	168d8 <__assert_fail@plt+0x5a1c>
   1622c:	ldr	r3, [fp, #-8]
   16230:	mov	r0, r3
   16234:	sub	sp, fp, #4
   16238:	ldr	fp, [sp]
   1623c:	add	sp, sp, #4
   16240:	pop	{pc}		; (ldr pc, [sp], #4)
   16244:	str	fp, [sp, #-8]!
   16248:	str	lr, [sp, #4]
   1624c:	add	fp, sp, #4
   16250:	sub	sp, sp, #16
   16254:	str	r0, [fp, #-8]
   16258:	str	r1, [fp, #-12]
   1625c:	str	r2, [fp, #-16]
   16260:	ldr	r2, [fp, #-16]
   16264:	ldr	r1, [fp, #-12]
   16268:	ldr	r0, [fp, #-8]
   1626c:	bl	16dd0 <__assert_fail@plt+0x5f14>
   16270:	mov	r3, r0
   16274:	mov	r0, r3
   16278:	bl	16028 <__assert_fail@plt+0x516c>
   1627c:	mov	r3, r0
   16280:	mov	r0, r3
   16284:	sub	sp, fp, #4
   16288:	ldr	fp, [sp]
   1628c:	add	sp, sp, #4
   16290:	pop	{pc}		; (ldr pc, [sp], #4)
   16294:	str	fp, [sp, #-8]!
   16298:	str	lr, [sp, #4]
   1629c:	add	fp, sp, #4
   162a0:	sub	sp, sp, #8
   162a4:	str	r0, [fp, #-8]
   162a8:	str	r1, [fp, #-12]
   162ac:	ldr	r2, [fp, #-12]
   162b0:	ldr	r1, [fp, #-8]
   162b4:	mov	r0, #0
   162b8:	bl	161c8 <__assert_fail@plt+0x530c>
   162bc:	mov	r3, r0
   162c0:	mov	r0, r3
   162c4:	sub	sp, fp, #4
   162c8:	ldr	fp, [sp]
   162cc:	add	sp, sp, #4
   162d0:	pop	{pc}		; (ldr pc, [sp], #4)
   162d4:	str	fp, [sp, #-8]!
   162d8:	str	lr, [sp, #4]
   162dc:	add	fp, sp, #4
   162e0:	sub	sp, sp, #8
   162e4:	str	r0, [fp, #-8]
   162e8:	str	r1, [fp, #-12]
   162ec:	ldr	r2, [fp, #-12]
   162f0:	ldr	r1, [fp, #-8]
   162f4:	mov	r0, #0
   162f8:	bl	16244 <__assert_fail@plt+0x5388>
   162fc:	mov	r3, r0
   16300:	mov	r0, r3
   16304:	sub	sp, fp, #4
   16308:	ldr	fp, [sp]
   1630c:	add	sp, sp, #4
   16310:	pop	{pc}		; (ldr pc, [sp], #4)
   16314:	str	fp, [sp, #-8]!
   16318:	str	lr, [sp, #4]
   1631c:	add	fp, sp, #4
   16320:	sub	sp, sp, #8
   16324:	str	r0, [fp, #-8]
   16328:	str	r1, [fp, #-12]
   1632c:	mov	r2, #1
   16330:	ldr	r1, [fp, #-12]
   16334:	ldr	r0, [fp, #-8]
   16338:	bl	16354 <__assert_fail@plt+0x5498>
   1633c:	mov	r3, r0
   16340:	mov	r0, r3
   16344:	sub	sp, fp, #4
   16348:	ldr	fp, [sp]
   1634c:	add	sp, sp, #4
   16350:	pop	{pc}		; (ldr pc, [sp], #4)
   16354:	str	fp, [sp, #-8]!
   16358:	str	lr, [sp, #4]
   1635c:	add	fp, sp, #4
   16360:	sub	sp, sp, #24
   16364:	str	r0, [fp, #-16]
   16368:	str	r1, [fp, #-20]	; 0xffffffec
   1636c:	str	r2, [fp, #-24]	; 0xffffffe8
   16370:	ldr	r3, [fp, #-20]	; 0xffffffec
   16374:	ldr	r3, [r3]
   16378:	str	r3, [fp, #-8]
   1637c:	ldr	r3, [fp, #-16]
   16380:	cmp	r3, #0
   16384:	bne	163cc <__assert_fail@plt+0x5510>
   16388:	ldr	r3, [fp, #-8]
   1638c:	cmp	r3, #0
   16390:	bne	16408 <__assert_fail@plt+0x554c>
   16394:	mov	r2, #64	; 0x40
   16398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1639c:	udiv	r3, r2, r3
   163a0:	str	r3, [fp, #-8]
   163a4:	ldr	r3, [fp, #-8]
   163a8:	cmp	r3, #0
   163ac:	moveq	r3, #1
   163b0:	movne	r3, #0
   163b4:	uxtb	r3, r3
   163b8:	mov	r2, r3
   163bc:	ldr	r3, [fp, #-8]
   163c0:	add	r3, r2, r3
   163c4:	str	r3, [fp, #-8]
   163c8:	b	16408 <__assert_fail@plt+0x554c>
   163cc:	ldr	r2, [fp, #-8]
   163d0:	ldr	r3, [fp, #-8]
   163d4:	lsr	r3, r3, #1
   163d8:	add	r3, r3, #1
   163dc:	mov	r1, #0
   163e0:	adds	r3, r2, r3
   163e4:	bcc	163ec <__assert_fail@plt+0x5530>
   163e8:	mov	r1, #1
   163ec:	str	r3, [fp, #-8]
   163f0:	mov	r3, r1
   163f4:	and	r3, r3, #1
   163f8:	uxtb	r3, r3
   163fc:	cmp	r3, #0
   16400:	beq	16408 <__assert_fail@plt+0x554c>
   16404:	bl	168d8 <__assert_fail@plt+0x5a1c>
   16408:	ldr	r3, [fp, #-8]
   1640c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16410:	mov	r1, r3
   16414:	ldr	r0, [fp, #-16]
   16418:	bl	161c8 <__assert_fail@plt+0x530c>
   1641c:	str	r0, [fp, #-16]
   16420:	ldr	r2, [fp, #-8]
   16424:	ldr	r3, [fp, #-20]	; 0xffffffec
   16428:	str	r2, [r3]
   1642c:	ldr	r3, [fp, #-16]
   16430:	mov	r0, r3
   16434:	sub	sp, fp, #4
   16438:	ldr	fp, [sp]
   1643c:	add	sp, sp, #4
   16440:	pop	{pc}		; (ldr pc, [sp], #4)
   16444:	str	fp, [sp, #-8]!
   16448:	str	lr, [sp, #4]
   1644c:	add	fp, sp, #4
   16450:	sub	sp, sp, #32
   16454:	str	r0, [fp, #-24]	; 0xffffffe8
   16458:	str	r1, [fp, #-28]	; 0xffffffe4
   1645c:	str	r2, [fp, #-32]	; 0xffffffe0
   16460:	str	r3, [fp, #-36]	; 0xffffffdc
   16464:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16468:	ldr	r3, [r3]
   1646c:	str	r3, [fp, #-8]
   16470:	ldr	r3, [fp, #-8]
   16474:	asr	r3, r3, #1
   16478:	mov	r1, #0
   1647c:	ldr	r2, [fp, #-8]
   16480:	adds	r3, r2, r3
   16484:	bvc	1648c <__assert_fail@plt+0x55d0>
   16488:	mov	r1, #1
   1648c:	str	r3, [fp, #-16]
   16490:	mov	r3, r1
   16494:	and	r3, r3, #1
   16498:	uxtb	r3, r3
   1649c:	cmp	r3, #0
   164a0:	beq	164ac <__assert_fail@plt+0x55f0>
   164a4:	mvn	r3, #-2147483648	; 0x80000000
   164a8:	str	r3, [fp, #-16]
   164ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164b0:	cmp	r3, #0
   164b4:	blt	164d0 <__assert_fail@plt+0x5614>
   164b8:	ldr	r3, [fp, #-16]
   164bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   164c0:	cmp	r2, r3
   164c4:	bge	164d0 <__assert_fail@plt+0x5614>
   164c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164cc:	str	r3, [fp, #-16]
   164d0:	ldr	r2, [fp, #-16]
   164d4:	mov	lr, #0
   164d8:	ldr	r3, [fp, #4]
   164dc:	smull	r2, r3, r2, r3
   164e0:	mov	r0, #0
   164e4:	mov	r1, #0
   164e8:	mov	r0, r3
   164ec:	asr	r1, r3, #31
   164f0:	asr	ip, r2, #31
   164f4:	cmp	ip, r0
   164f8:	beq	16500 <__assert_fail@plt+0x5644>
   164fc:	mov	lr, #1
   16500:	mov	r3, r2
   16504:	str	r3, [fp, #-20]	; 0xffffffec
   16508:	mov	r3, lr
   1650c:	and	r3, r3, #1
   16510:	uxtb	r3, r3
   16514:	cmp	r3, #0
   16518:	beq	16524 <__assert_fail@plt+0x5668>
   1651c:	mvn	r3, #-2147483648	; 0x80000000
   16520:	b	1653c <__assert_fail@plt+0x5680>
   16524:	ldr	r3, [fp, #-20]	; 0xffffffec
   16528:	cmp	r3, #63	; 0x3f
   1652c:	bgt	16538 <__assert_fail@plt+0x567c>
   16530:	mov	r3, #64	; 0x40
   16534:	b	1653c <__assert_fail@plt+0x5680>
   16538:	mov	r3, #0
   1653c:	str	r3, [fp, #-12]
   16540:	ldr	r3, [fp, #-12]
   16544:	cmp	r3, #0
   16548:	beq	16580 <__assert_fail@plt+0x56c4>
   1654c:	ldr	r2, [fp, #-12]
   16550:	ldr	r3, [fp, #4]
   16554:	sdiv	r3, r2, r3
   16558:	str	r3, [fp, #-16]
   1655c:	ldr	r3, [fp, #-12]
   16560:	ldr	r2, [fp, #4]
   16564:	sdiv	r2, r3, r2
   16568:	ldr	r1, [fp, #4]
   1656c:	mul	r2, r1, r2
   16570:	sub	r3, r3, r2
   16574:	ldr	r2, [fp, #-12]
   16578:	sub	r3, r2, r3
   1657c:	str	r3, [fp, #-20]	; 0xffffffec
   16580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16584:	cmp	r3, #0
   16588:	bne	16598 <__assert_fail@plt+0x56dc>
   1658c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16590:	mov	r2, #0
   16594:	str	r2, [r3]
   16598:	ldr	r2, [fp, #-16]
   1659c:	ldr	r3, [fp, #-8]
   165a0:	sub	r3, r2, r3
   165a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   165a8:	cmp	r2, r3
   165ac:	ble	1664c <__assert_fail@plt+0x5790>
   165b0:	mov	r1, #0
   165b4:	ldr	r2, [fp, #-8]
   165b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   165bc:	adds	r3, r2, r3
   165c0:	bvc	165c8 <__assert_fail@plt+0x570c>
   165c4:	mov	r1, #1
   165c8:	str	r3, [fp, #-16]
   165cc:	mov	r3, r1
   165d0:	and	r3, r3, #1
   165d4:	uxtb	r3, r3
   165d8:	cmp	r3, #0
   165dc:	bne	16648 <__assert_fail@plt+0x578c>
   165e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   165e4:	cmp	r3, #0
   165e8:	blt	165fc <__assert_fail@plt+0x5740>
   165ec:	ldr	r3, [fp, #-16]
   165f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   165f4:	cmp	r2, r3
   165f8:	blt	16648 <__assert_fail@plt+0x578c>
   165fc:	ldr	r2, [fp, #-16]
   16600:	mov	lr, #0
   16604:	ldr	r3, [fp, #4]
   16608:	smull	r2, r3, r2, r3
   1660c:	mov	r0, #0
   16610:	mov	r1, #0
   16614:	mov	r0, r3
   16618:	asr	r1, r3, #31
   1661c:	asr	ip, r2, #31
   16620:	cmp	ip, r0
   16624:	beq	1662c <__assert_fail@plt+0x5770>
   16628:	mov	lr, #1
   1662c:	mov	r3, r2
   16630:	str	r3, [fp, #-20]	; 0xffffffec
   16634:	mov	r3, lr
   16638:	and	r3, r3, #1
   1663c:	uxtb	r3, r3
   16640:	cmp	r3, #0
   16644:	beq	1664c <__assert_fail@plt+0x5790>
   16648:	bl	168d8 <__assert_fail@plt+0x5a1c>
   1664c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16650:	mov	r1, r3
   16654:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16658:	bl	16118 <__assert_fail@plt+0x525c>
   1665c:	str	r0, [fp, #-24]	; 0xffffffe8
   16660:	ldr	r2, [fp, #-16]
   16664:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16668:	str	r2, [r3]
   1666c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16670:	mov	r0, r3
   16674:	sub	sp, fp, #4
   16678:	ldr	fp, [sp]
   1667c:	add	sp, sp, #4
   16680:	pop	{pc}		; (ldr pc, [sp], #4)
   16684:	str	fp, [sp, #-8]!
   16688:	str	lr, [sp, #4]
   1668c:	add	fp, sp, #4
   16690:	sub	sp, sp, #8
   16694:	str	r0, [fp, #-8]
   16698:	mov	r1, #1
   1669c:	ldr	r0, [fp, #-8]
   166a0:	bl	166f4 <__assert_fail@plt+0x5838>
   166a4:	mov	r3, r0
   166a8:	mov	r0, r3
   166ac:	sub	sp, fp, #4
   166b0:	ldr	fp, [sp]
   166b4:	add	sp, sp, #4
   166b8:	pop	{pc}		; (ldr pc, [sp], #4)
   166bc:	str	fp, [sp, #-8]!
   166c0:	str	lr, [sp, #4]
   166c4:	add	fp, sp, #4
   166c8:	sub	sp, sp, #8
   166cc:	str	r0, [fp, #-8]
   166d0:	mov	r1, #1
   166d4:	ldr	r0, [fp, #-8]
   166d8:	bl	1673c <__assert_fail@plt+0x5880>
   166dc:	mov	r3, r0
   166e0:	mov	r0, r3
   166e4:	sub	sp, fp, #4
   166e8:	ldr	fp, [sp]
   166ec:	add	sp, sp, #4
   166f0:	pop	{pc}		; (ldr pc, [sp], #4)
   166f4:	str	fp, [sp, #-8]!
   166f8:	str	lr, [sp, #4]
   166fc:	add	fp, sp, #4
   16700:	sub	sp, sp, #8
   16704:	str	r0, [fp, #-8]
   16708:	str	r1, [fp, #-12]
   1670c:	ldr	r1, [fp, #-12]
   16710:	ldr	r0, [fp, #-8]
   16714:	bl	1691c <__assert_fail@plt+0x5a60>
   16718:	mov	r3, r0
   1671c:	mov	r0, r3
   16720:	bl	16028 <__assert_fail@plt+0x516c>
   16724:	mov	r3, r0
   16728:	mov	r0, r3
   1672c:	sub	sp, fp, #4
   16730:	ldr	fp, [sp]
   16734:	add	sp, sp, #4
   16738:	pop	{pc}		; (ldr pc, [sp], #4)
   1673c:	str	fp, [sp, #-8]!
   16740:	str	lr, [sp, #4]
   16744:	add	fp, sp, #4
   16748:	sub	sp, sp, #8
   1674c:	str	r0, [fp, #-8]
   16750:	str	r1, [fp, #-12]
   16754:	ldr	r1, [fp, #-12]
   16758:	ldr	r0, [fp, #-8]
   1675c:	bl	16d8c <__assert_fail@plt+0x5ed0>
   16760:	mov	r3, r0
   16764:	mov	r0, r3
   16768:	bl	16028 <__assert_fail@plt+0x516c>
   1676c:	mov	r3, r0
   16770:	mov	r0, r3
   16774:	sub	sp, fp, #4
   16778:	ldr	fp, [sp]
   1677c:	add	sp, sp, #4
   16780:	pop	{pc}		; (ldr pc, [sp], #4)
   16784:	str	fp, [sp, #-8]!
   16788:	str	lr, [sp, #4]
   1678c:	add	fp, sp, #4
   16790:	sub	sp, sp, #8
   16794:	str	r0, [fp, #-8]
   16798:	str	r1, [fp, #-12]
   1679c:	ldr	r0, [fp, #-12]
   167a0:	bl	16064 <__assert_fail@plt+0x51a8>
   167a4:	mov	r3, r0
   167a8:	ldr	r2, [fp, #-12]
   167ac:	ldr	r1, [fp, #-8]
   167b0:	mov	r0, r3
   167b4:	bl	10cd0 <memcpy@plt>
   167b8:	mov	r3, r0
   167bc:	mov	r0, r3
   167c0:	sub	sp, fp, #4
   167c4:	ldr	fp, [sp]
   167c8:	add	sp, sp, #4
   167cc:	pop	{pc}		; (ldr pc, [sp], #4)
   167d0:	str	fp, [sp, #-8]!
   167d4:	str	lr, [sp, #4]
   167d8:	add	fp, sp, #4
   167dc:	sub	sp, sp, #8
   167e0:	str	r0, [fp, #-8]
   167e4:	str	r1, [fp, #-12]
   167e8:	ldr	r0, [fp, #-12]
   167ec:	bl	160a4 <__assert_fail@plt+0x51e8>
   167f0:	mov	r3, r0
   167f4:	mov	r0, r3
   167f8:	ldr	r3, [fp, #-12]
   167fc:	mov	r2, r3
   16800:	ldr	r1, [fp, #-8]
   16804:	bl	10cd0 <memcpy@plt>
   16808:	mov	r3, r0
   1680c:	mov	r0, r3
   16810:	sub	sp, fp, #4
   16814:	ldr	fp, [sp]
   16818:	add	sp, sp, #4
   1681c:	pop	{pc}		; (ldr pc, [sp], #4)
   16820:	str	fp, [sp, #-8]!
   16824:	str	lr, [sp, #4]
   16828:	add	fp, sp, #4
   1682c:	sub	sp, sp, #16
   16830:	str	r0, [fp, #-16]
   16834:	str	r1, [fp, #-20]	; 0xffffffec
   16838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1683c:	add	r3, r3, #1
   16840:	mov	r0, r3
   16844:	bl	160a4 <__assert_fail@plt+0x51e8>
   16848:	mov	r3, r0
   1684c:	str	r3, [fp, #-8]
   16850:	ldr	r3, [fp, #-20]	; 0xffffffec
   16854:	ldr	r2, [fp, #-8]
   16858:	add	r3, r2, r3
   1685c:	mov	r2, #0
   16860:	strb	r2, [r3]
   16864:	ldr	r3, [fp, #-20]	; 0xffffffec
   16868:	mov	r2, r3
   1686c:	ldr	r1, [fp, #-16]
   16870:	ldr	r0, [fp, #-8]
   16874:	bl	10cd0 <memcpy@plt>
   16878:	mov	r3, r0
   1687c:	mov	r0, r3
   16880:	sub	sp, fp, #4
   16884:	ldr	fp, [sp]
   16888:	add	sp, sp, #4
   1688c:	pop	{pc}		; (ldr pc, [sp], #4)
   16890:	str	fp, [sp, #-8]!
   16894:	str	lr, [sp, #4]
   16898:	add	fp, sp, #4
   1689c:	sub	sp, sp, #8
   168a0:	str	r0, [fp, #-8]
   168a4:	ldr	r0, [fp, #-8]
   168a8:	bl	10de4 <strlen@plt>
   168ac:	mov	r3, r0
   168b0:	add	r3, r3, #1
   168b4:	mov	r1, r3
   168b8:	ldr	r0, [fp, #-8]
   168bc:	bl	16784 <__assert_fail@plt+0x58c8>
   168c0:	mov	r3, r0
   168c4:	mov	r0, r3
   168c8:	sub	sp, fp, #4
   168cc:	ldr	fp, [sp]
   168d0:	add	sp, sp, #4
   168d4:	pop	{pc}		; (ldr pc, [sp], #4)
   168d8:	strd	r4, [sp, #-16]!
   168dc:	str	fp, [sp, #8]
   168e0:	str	lr, [sp, #12]
   168e4:	add	fp, sp, #12
   168e8:	movw	r3, #37104	; 0x90f0
   168ec:	movt	r3, #2
   168f0:	ldr	r4, [r3]
   168f4:	movw	r0, #34300	; 0x85fc
   168f8:	movt	r0, #1
   168fc:	bl	10dd8 <gettext@plt>
   16900:	mov	r3, r0
   16904:	movw	r2, #34320	; 0x8610
   16908:	movt	r2, #1
   1690c:	mov	r1, #0
   16910:	mov	r0, r4
   16914:	bl	10d78 <error@plt>
   16918:	bl	10e98 <abort@plt>
   1691c:	str	fp, [sp, #-8]!
   16920:	str	lr, [sp, #4]
   16924:	add	fp, sp, #4
   16928:	sub	sp, sp, #16
   1692c:	str	r0, [fp, #-16]
   16930:	str	r1, [fp, #-20]	; 0xffffffec
   16934:	ldr	r3, [fp, #-16]
   16938:	cmp	r3, #0
   1693c:	beq	1694c <__assert_fail@plt+0x5a90>
   16940:	ldr	r3, [fp, #-20]	; 0xffffffec
   16944:	cmp	r3, #0
   16948:	bne	1695c <__assert_fail@plt+0x5aa0>
   1694c:	mov	r3, #1
   16950:	str	r3, [fp, #-20]	; 0xffffffec
   16954:	ldr	r3, [fp, #-20]	; 0xffffffec
   16958:	str	r3, [fp, #-16]
   1695c:	mov	ip, #0
   16960:	ldr	r2, [fp, #-16]
   16964:	ldr	r3, [fp, #-20]	; 0xffffffec
   16968:	umull	r0, r1, r2, r3
   1696c:	mov	r2, #0
   16970:	mov	r3, #0
   16974:	mov	r2, r1
   16978:	mov	r3, #0
   1697c:	cmp	r2, #0
   16980:	beq	16988 <__assert_fail@plt+0x5acc>
   16984:	mov	ip, #1
   16988:	cmp	r0, #0
   1698c:	bge	16994 <__assert_fail@plt+0x5ad8>
   16990:	mov	ip, #1
   16994:	mov	r3, ip
   16998:	and	r3, r3, #1
   1699c:	uxtb	r3, r3
   169a0:	cmp	r3, #0
   169a4:	beq	169c0 <__assert_fail@plt+0x5b04>
   169a8:	bl	10dfc <__errno_location@plt>
   169ac:	mov	r2, r0
   169b0:	mov	r3, #12
   169b4:	str	r3, [r2]
   169b8:	mov	r3, #0
   169bc:	b	169d8 <__assert_fail@plt+0x5b1c>
   169c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   169c4:	ldr	r0, [fp, #-16]
   169c8:	bl	10c64 <calloc@plt>
   169cc:	mov	r3, r0
   169d0:	str	r3, [fp, #-8]
   169d4:	ldr	r3, [fp, #-8]
   169d8:	mov	r0, r3
   169dc:	sub	sp, fp, #4
   169e0:	ldr	fp, [sp]
   169e4:	add	sp, sp, #4
   169e8:	pop	{pc}		; (ldr pc, [sp], #4)
   169ec:	str	fp, [sp, #-8]!
   169f0:	str	lr, [sp, #4]
   169f4:	add	fp, sp, #4
   169f8:	sub	sp, sp, #16
   169fc:	str	r0, [fp, #-16]
   16a00:	ldr	r3, [fp, #-16]
   16a04:	cmp	r3, #0
   16a08:	bne	16a14 <__assert_fail@plt+0x5b58>
   16a0c:	mov	r3, #1
   16a10:	str	r3, [fp, #-16]
   16a14:	mov	r2, #0
   16a18:	ldr	r3, [fp, #-16]
   16a1c:	cmp	r3, #0
   16a20:	bge	16a28 <__assert_fail@plt+0x5b6c>
   16a24:	mov	r2, #1
   16a28:	mov	r3, r2
   16a2c:	and	r3, r3, #1
   16a30:	uxtb	r3, r3
   16a34:	cmp	r3, #0
   16a38:	beq	16a54 <__assert_fail@plt+0x5b98>
   16a3c:	bl	10dfc <__errno_location@plt>
   16a40:	mov	r2, r0
   16a44:	mov	r3, #12
   16a48:	str	r3, [r2]
   16a4c:	mov	r3, #0
   16a50:	b	16a68 <__assert_fail@plt+0x5bac>
   16a54:	ldr	r0, [fp, #-16]
   16a58:	bl	10d84 <malloc@plt>
   16a5c:	mov	r3, r0
   16a60:	str	r3, [fp, #-8]
   16a64:	ldr	r3, [fp, #-8]
   16a68:	mov	r0, r3
   16a6c:	sub	sp, fp, #4
   16a70:	ldr	fp, [sp]
   16a74:	add	sp, sp, #4
   16a78:	pop	{pc}		; (ldr pc, [sp], #4)
   16a7c:	str	fp, [sp, #-8]!
   16a80:	str	lr, [sp, #4]
   16a84:	add	fp, sp, #4
   16a88:	sub	sp, sp, #16
   16a8c:	str	r0, [fp, #-16]
   16a90:	str	r1, [fp, #-20]	; 0xffffffec
   16a94:	ldr	r3, [fp, #-16]
   16a98:	cmp	r3, #0
   16a9c:	bne	16ab0 <__assert_fail@plt+0x5bf4>
   16aa0:	ldr	r0, [fp, #-20]	; 0xffffffec
   16aa4:	bl	169ec <__assert_fail@plt+0x5b30>
   16aa8:	mov	r3, r0
   16aac:	b	16b20 <__assert_fail@plt+0x5c64>
   16ab0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ab4:	cmp	r3, #0
   16ab8:	bne	16acc <__assert_fail@plt+0x5c10>
   16abc:	ldr	r0, [fp, #-16]
   16ac0:	bl	12ce8 <__assert_fail@plt+0x1e2c>
   16ac4:	mov	r3, #0
   16ac8:	b	16b20 <__assert_fail@plt+0x5c64>
   16acc:	mov	r2, #0
   16ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ad4:	cmp	r3, #0
   16ad8:	bge	16ae0 <__assert_fail@plt+0x5c24>
   16adc:	mov	r2, #1
   16ae0:	mov	r3, r2
   16ae4:	and	r3, r3, #1
   16ae8:	uxtb	r3, r3
   16aec:	cmp	r3, #0
   16af0:	beq	16b0c <__assert_fail@plt+0x5c50>
   16af4:	bl	10dfc <__errno_location@plt>
   16af8:	mov	r2, r0
   16afc:	mov	r3, #12
   16b00:	str	r3, [r2]
   16b04:	mov	r3, #0
   16b08:	b	16b20 <__assert_fail@plt+0x5c64>
   16b0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16b10:	ldr	r0, [fp, #-16]
   16b14:	bl	10d0c <realloc@plt>
   16b18:	str	r0, [fp, #-8]
   16b1c:	ldr	r3, [fp, #-8]
   16b20:	mov	r0, r3
   16b24:	sub	sp, fp, #4
   16b28:	ldr	fp, [sp]
   16b2c:	add	sp, sp, #4
   16b30:	pop	{pc}		; (ldr pc, [sp], #4)
   16b34:	strd	r4, [sp, #-16]!
   16b38:	str	fp, [sp, #8]
   16b3c:	str	lr, [sp, #12]
   16b40:	add	fp, sp, #12
   16b44:	sub	sp, sp, #16
   16b48:	str	r0, [fp, #-24]	; 0xffffffe8
   16b4c:	str	r1, [fp, #-28]	; 0xffffffe4
   16b50:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16b54:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16b58:	cmp	r5, r4
   16b5c:	bne	16b68 <__assert_fail@plt+0x5cac>
   16b60:	mov	r3, #0
   16b64:	b	16bc8 <__assert_fail@plt+0x5d0c>
   16b68:	ldrb	r3, [r5]
   16b6c:	mov	r0, r3
   16b70:	bl	174ac <__assert_fail@plt+0x65f0>
   16b74:	mov	r3, r0
   16b78:	strb	r3, [fp, #-13]
   16b7c:	ldrb	r3, [r4]
   16b80:	mov	r0, r3
   16b84:	bl	174ac <__assert_fail@plt+0x65f0>
   16b88:	mov	r3, r0
   16b8c:	strb	r3, [fp, #-14]
   16b90:	ldrb	r3, [fp, #-13]
   16b94:	cmp	r3, #0
   16b98:	beq	16bb8 <__assert_fail@plt+0x5cfc>
   16b9c:	add	r5, r5, #1
   16ba0:	add	r4, r4, #1
   16ba4:	ldrb	r2, [fp, #-13]
   16ba8:	ldrb	r3, [fp, #-14]
   16bac:	cmp	r2, r3
   16bb0:	beq	16b68 <__assert_fail@plt+0x5cac>
   16bb4:	b	16bbc <__assert_fail@plt+0x5d00>
   16bb8:	nop	{0}
   16bbc:	ldrb	r2, [fp, #-13]
   16bc0:	ldrb	r3, [fp, #-14]
   16bc4:	sub	r3, r2, r3
   16bc8:	mov	r0, r3
   16bcc:	sub	sp, fp, #12
   16bd0:	ldrd	r4, [sp]
   16bd4:	ldr	fp, [sp, #8]
   16bd8:	add	sp, sp, #12
   16bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16be0:	str	fp, [sp, #-8]!
   16be4:	str	lr, [sp, #4]
   16be8:	add	fp, sp, #4
   16bec:	sub	sp, sp, #16
   16bf0:	str	r0, [fp, #-16]
   16bf4:	ldr	r0, [fp, #-16]
   16bf8:	bl	10d54 <__fpending@plt>
   16bfc:	mov	r3, r0
   16c00:	cmp	r3, #0
   16c04:	movne	r3, #1
   16c08:	moveq	r3, #0
   16c0c:	strb	r3, [fp, #-5]
   16c10:	ldr	r0, [fp, #-16]
   16c14:	bl	10d60 <ferror_unlocked@plt>
   16c18:	mov	r3, r0
   16c1c:	cmp	r3, #0
   16c20:	movne	r3, #1
   16c24:	moveq	r3, #0
   16c28:	strb	r3, [fp, #-6]
   16c2c:	ldr	r0, [fp, #-16]
   16c30:	bl	12b24 <__assert_fail@plt+0x1c68>
   16c34:	mov	r3, r0
   16c38:	cmp	r3, #0
   16c3c:	movne	r3, #1
   16c40:	moveq	r3, #0
   16c44:	strb	r3, [fp, #-7]
   16c48:	ldrb	r3, [fp, #-6]
   16c4c:	cmp	r3, #0
   16c50:	bne	16c80 <__assert_fail@plt+0x5dc4>
   16c54:	ldrb	r3, [fp, #-7]
   16c58:	cmp	r3, #0
   16c5c:	beq	16cac <__assert_fail@plt+0x5df0>
   16c60:	ldrb	r3, [fp, #-5]
   16c64:	cmp	r3, #0
   16c68:	bne	16c80 <__assert_fail@plt+0x5dc4>
   16c6c:	bl	10dfc <__errno_location@plt>
   16c70:	mov	r3, r0
   16c74:	ldr	r3, [r3]
   16c78:	cmp	r3, #9
   16c7c:	beq	16cac <__assert_fail@plt+0x5df0>
   16c80:	ldrb	r3, [fp, #-7]
   16c84:	eor	r3, r3, #1
   16c88:	uxtb	r3, r3
   16c8c:	cmp	r3, #0
   16c90:	beq	16ca4 <__assert_fail@plt+0x5de8>
   16c94:	bl	10dfc <__errno_location@plt>
   16c98:	mov	r2, r0
   16c9c:	mov	r3, #0
   16ca0:	str	r3, [r2]
   16ca4:	mvn	r3, #0
   16ca8:	b	16cb0 <__assert_fail@plt+0x5df4>
   16cac:	mov	r3, #0
   16cb0:	mov	r0, r3
   16cb4:	sub	sp, fp, #4
   16cb8:	ldr	fp, [sp]
   16cbc:	add	sp, sp, #4
   16cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc4:	str	fp, [sp, #-8]!
   16cc8:	str	lr, [sp, #4]
   16ccc:	add	fp, sp, #4
   16cd0:	bl	10dfc <__errno_location@plt>
   16cd4:	mov	r2, r0
   16cd8:	mov	r3, #12
   16cdc:	str	r3, [r2]
   16ce0:	mov	r3, #0
   16ce4:	mov	r0, r3
   16ce8:	sub	sp, fp, #4
   16cec:	ldr	fp, [sp]
   16cf0:	add	sp, sp, #4
   16cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf8:	str	fp, [sp, #-8]!
   16cfc:	str	lr, [sp, #4]
   16d00:	add	fp, sp, #4
   16d04:	sub	sp, sp, #8
   16d08:	str	r0, [fp, #-8]
   16d0c:	ldr	r3, [fp, #-8]
   16d10:	mov	r0, r3
   16d14:	bl	169ec <__assert_fail@plt+0x5b30>
   16d18:	mov	r3, r0
   16d1c:	mov	r0, r3
   16d20:	sub	sp, fp, #4
   16d24:	ldr	fp, [sp]
   16d28:	add	sp, sp, #4
   16d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d30:	str	fp, [sp, #-8]!
   16d34:	str	lr, [sp, #4]
   16d38:	add	fp, sp, #4
   16d3c:	sub	sp, sp, #8
   16d40:	str	r0, [fp, #-8]
   16d44:	str	r1, [fp, #-12]
   16d48:	ldr	r3, [fp, #-12]
   16d4c:	cmp	r3, #0
   16d50:	moveq	r3, #1
   16d54:	movne	r3, #0
   16d58:	uxtb	r3, r3
   16d5c:	mov	r2, r3
   16d60:	ldr	r3, [fp, #-12]
   16d64:	orr	r3, r2, r3
   16d68:	mov	r1, r3
   16d6c:	ldr	r0, [fp, #-8]
   16d70:	bl	16a7c <__assert_fail@plt+0x5bc0>
   16d74:	mov	r3, r0
   16d78:	mov	r0, r3
   16d7c:	sub	sp, fp, #4
   16d80:	ldr	fp, [sp]
   16d84:	add	sp, sp, #4
   16d88:	pop	{pc}		; (ldr pc, [sp], #4)
   16d8c:	str	fp, [sp, #-8]!
   16d90:	str	lr, [sp, #4]
   16d94:	add	fp, sp, #4
   16d98:	sub	sp, sp, #8
   16d9c:	str	r0, [fp, #-8]
   16da0:	str	r1, [fp, #-12]
   16da4:	ldr	r3, [fp, #-8]
   16da8:	ldr	r2, [fp, #-12]
   16dac:	mov	r1, r2
   16db0:	mov	r0, r3
   16db4:	bl	1691c <__assert_fail@plt+0x5a60>
   16db8:	mov	r3, r0
   16dbc:	mov	r0, r3
   16dc0:	sub	sp, fp, #4
   16dc4:	ldr	fp, [sp]
   16dc8:	add	sp, sp, #4
   16dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd0:	str	fp, [sp, #-8]!
   16dd4:	str	lr, [sp, #4]
   16dd8:	add	fp, sp, #4
   16ddc:	sub	sp, sp, #16
   16de0:	str	r0, [fp, #-8]
   16de4:	str	r1, [fp, #-12]
   16de8:	str	r2, [fp, #-16]
   16dec:	ldr	r3, [fp, #-12]
   16df0:	cmp	r3, #0
   16df4:	beq	16e04 <__assert_fail@plt+0x5f48>
   16df8:	ldr	r3, [fp, #-16]
   16dfc:	cmp	r3, #0
   16e00:	bne	16e14 <__assert_fail@plt+0x5f58>
   16e04:	mov	r3, #1
   16e08:	str	r3, [fp, #-16]
   16e0c:	ldr	r3, [fp, #-16]
   16e10:	str	r3, [fp, #-12]
   16e14:	ldr	r3, [fp, #-12]
   16e18:	ldr	r2, [fp, #-16]
   16e1c:	mov	r1, r3
   16e20:	ldr	r0, [fp, #-8]
   16e24:	bl	16f60 <__assert_fail@plt+0x60a4>
   16e28:	mov	r3, r0
   16e2c:	mov	r0, r3
   16e30:	sub	sp, fp, #4
   16e34:	ldr	fp, [sp]
   16e38:	add	sp, sp, #4
   16e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e40:	str	fp, [sp, #-8]!
   16e44:	str	lr, [sp, #4]
   16e48:	add	fp, sp, #4
   16e4c:	sub	sp, sp, #8
   16e50:	mov	r0, #14
   16e54:	bl	10e5c <nl_langinfo@plt>
   16e58:	str	r0, [fp, #-8]
   16e5c:	ldr	r3, [fp, #-8]
   16e60:	cmp	r3, #0
   16e64:	bne	16e74 <__assert_fail@plt+0x5fb8>
   16e68:	movw	r3, #34324	; 0x8614
   16e6c:	movt	r3, #1
   16e70:	str	r3, [fp, #-8]
   16e74:	ldr	r3, [fp, #-8]
   16e78:	ldrb	r3, [r3]
   16e7c:	cmp	r3, #0
   16e80:	bne	16e90 <__assert_fail@plt+0x5fd4>
   16e84:	movw	r3, #34328	; 0x8618
   16e88:	movt	r3, #1
   16e8c:	str	r3, [fp, #-8]
   16e90:	ldr	r3, [fp, #-8]
   16e94:	mov	r0, r3
   16e98:	sub	sp, fp, #4
   16e9c:	ldr	fp, [sp]
   16ea0:	add	sp, sp, #4
   16ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ea8:	str	fp, [sp, #-8]!
   16eac:	str	lr, [sp, #4]
   16eb0:	add	fp, sp, #4
   16eb4:	sub	sp, sp, #32
   16eb8:	str	r0, [fp, #-24]	; 0xffffffe8
   16ebc:	str	r1, [fp, #-28]	; 0xffffffe4
   16ec0:	str	r2, [fp, #-32]	; 0xffffffe0
   16ec4:	str	r3, [fp, #-36]	; 0xffffffdc
   16ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ecc:	cmp	r3, #0
   16ed0:	bne	16edc <__assert_fail@plt+0x6020>
   16ed4:	sub	r3, fp, #16
   16ed8:	str	r3, [fp, #-24]	; 0xffffffe8
   16edc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16ee0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16ee4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16ee8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16eec:	bl	10d6c <mbrtowc@plt>
   16ef0:	str	r0, [fp, #-8]
   16ef4:	ldr	r3, [fp, #-8]
   16ef8:	cmn	r3, #3
   16efc:	bls	16f48 <__assert_fail@plt+0x608c>
   16f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f04:	cmp	r3, #0
   16f08:	beq	16f48 <__assert_fail@plt+0x608c>
   16f0c:	mov	r0, #0
   16f10:	bl	1752c <__assert_fail@plt+0x6670>
   16f14:	mov	r3, r0
   16f18:	eor	r3, r3, #1
   16f1c:	uxtb	r3, r3
   16f20:	cmp	r3, #0
   16f24:	beq	16f48 <__assert_fail@plt+0x608c>
   16f28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f2c:	ldrb	r3, [r3]
   16f30:	strb	r3, [fp, #-9]
   16f34:	ldrb	r2, [fp, #-9]
   16f38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f3c:	str	r2, [r3]
   16f40:	mov	r3, #1
   16f44:	b	16f4c <__assert_fail@plt+0x6090>
   16f48:	ldr	r3, [fp, #-8]
   16f4c:	mov	r0, r3
   16f50:	sub	sp, fp, #4
   16f54:	ldr	fp, [sp]
   16f58:	add	sp, sp, #4
   16f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f60:	str	fp, [sp, #-8]!
   16f64:	str	lr, [sp, #4]
   16f68:	add	fp, sp, #4
   16f6c:	sub	sp, sp, #24
   16f70:	str	r0, [fp, #-16]
   16f74:	str	r1, [fp, #-20]	; 0xffffffec
   16f78:	str	r2, [fp, #-24]	; 0xffffffe8
   16f7c:	mov	ip, #0
   16f80:	ldr	r2, [fp, #-20]	; 0xffffffec
   16f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f88:	umull	r0, r1, r2, r3
   16f8c:	mov	r2, #0
   16f90:	mov	r3, #0
   16f94:	mov	r2, r1
   16f98:	mov	r3, #0
   16f9c:	cmp	r2, #0
   16fa0:	beq	16fa8 <__assert_fail@plt+0x60ec>
   16fa4:	mov	ip, #1
   16fa8:	mov	r3, r0
   16fac:	str	r3, [fp, #-8]
   16fb0:	mov	r3, ip
   16fb4:	and	r3, r3, #1
   16fb8:	uxtb	r3, r3
   16fbc:	cmp	r3, #0
   16fc0:	beq	16fdc <__assert_fail@plt+0x6120>
   16fc4:	bl	10dfc <__errno_location@plt>
   16fc8:	mov	r2, r0
   16fcc:	mov	r3, #12
   16fd0:	str	r3, [r2]
   16fd4:	mov	r3, #0
   16fd8:	b	16ff0 <__assert_fail@plt+0x6134>
   16fdc:	ldr	r3, [fp, #-8]
   16fe0:	mov	r1, r3
   16fe4:	ldr	r0, [fp, #-16]
   16fe8:	bl	16a7c <__assert_fail@plt+0x5bc0>
   16fec:	mov	r3, r0
   16ff0:	mov	r0, r3
   16ff4:	sub	sp, fp, #4
   16ff8:	ldr	fp, [sp]
   16ffc:	add	sp, sp, #4
   17000:	pop	{pc}		; (ldr pc, [sp], #4)
   17004:	push	{fp}		; (str fp, [sp, #-4]!)
   17008:	add	fp, sp, #0
   1700c:	sub	sp, sp, #12
   17010:	str	r0, [fp, #-8]
   17014:	ldr	r3, [fp, #-8]
   17018:	cmp	r3, #90	; 0x5a
   1701c:	bgt	17040 <__assert_fail@plt+0x6184>
   17020:	ldr	r3, [fp, #-8]
   17024:	cmp	r3, #65	; 0x41
   17028:	bge	17050 <__assert_fail@plt+0x6194>
   1702c:	ldr	r3, [fp, #-8]
   17030:	sub	r3, r3, #48	; 0x30
   17034:	cmp	r3, #9
   17038:	bhi	17058 <__assert_fail@plt+0x619c>
   1703c:	b	17050 <__assert_fail@plt+0x6194>
   17040:	ldr	r3, [fp, #-8]
   17044:	sub	r3, r3, #97	; 0x61
   17048:	cmp	r3, #25
   1704c:	bhi	17058 <__assert_fail@plt+0x619c>
   17050:	mov	r3, #1
   17054:	b	1705c <__assert_fail@plt+0x61a0>
   17058:	mov	r3, #0
   1705c:	mov	r0, r3
   17060:	add	sp, fp, #0
   17064:	pop	{fp}		; (ldr fp, [sp], #4)
   17068:	bx	lr
   1706c:	push	{fp}		; (str fp, [sp, #-4]!)
   17070:	add	fp, sp, #0
   17074:	sub	sp, sp, #12
   17078:	str	r0, [fp, #-8]
   1707c:	ldr	r3, [fp, #-8]
   17080:	cmp	r3, #65	; 0x41
   17084:	blt	170ac <__assert_fail@plt+0x61f0>
   17088:	ldr	r3, [fp, #-8]
   1708c:	cmp	r3, #90	; 0x5a
   17090:	ble	170a4 <__assert_fail@plt+0x61e8>
   17094:	ldr	r3, [fp, #-8]
   17098:	sub	r3, r3, #97	; 0x61
   1709c:	cmp	r3, #25
   170a0:	bhi	170ac <__assert_fail@plt+0x61f0>
   170a4:	mov	r3, #1
   170a8:	b	170b0 <__assert_fail@plt+0x61f4>
   170ac:	mov	r3, #0
   170b0:	mov	r0, r3
   170b4:	add	sp, fp, #0
   170b8:	pop	{fp}		; (ldr fp, [sp], #4)
   170bc:	bx	lr
   170c0:	push	{fp}		; (str fp, [sp, #-4]!)
   170c4:	add	fp, sp, #0
   170c8:	sub	sp, sp, #12
   170cc:	str	r0, [fp, #-8]
   170d0:	ldr	r3, [fp, #-8]
   170d4:	cmp	r3, #127	; 0x7f
   170d8:	bhi	170e4 <__assert_fail@plt+0x6228>
   170dc:	mov	r3, #1
   170e0:	b	170e8 <__assert_fail@plt+0x622c>
   170e4:	mov	r3, #0
   170e8:	mov	r0, r3
   170ec:	add	sp, fp, #0
   170f0:	pop	{fp}		; (ldr fp, [sp], #4)
   170f4:	bx	lr
   170f8:	push	{fp}		; (str fp, [sp, #-4]!)
   170fc:	add	fp, sp, #0
   17100:	sub	sp, sp, #12
   17104:	str	r0, [fp, #-8]
   17108:	ldr	r3, [fp, #-8]
   1710c:	cmp	r3, #32
   17110:	beq	17120 <__assert_fail@plt+0x6264>
   17114:	ldr	r3, [fp, #-8]
   17118:	cmp	r3, #9
   1711c:	bne	17128 <__assert_fail@plt+0x626c>
   17120:	mov	r3, #1
   17124:	b	1712c <__assert_fail@plt+0x6270>
   17128:	mov	r3, #0
   1712c:	and	r3, r3, #1
   17130:	uxtb	r3, r3
   17134:	mov	r0, r3
   17138:	add	sp, fp, #0
   1713c:	pop	{fp}		; (ldr fp, [sp], #4)
   17140:	bx	lr
   17144:	push	{fp}		; (str fp, [sp, #-4]!)
   17148:	add	fp, sp, #0
   1714c:	sub	sp, sp, #12
   17150:	str	r0, [fp, #-8]
   17154:	ldr	r3, [fp, #-8]
   17158:	cmp	r3, #0
   1715c:	blt	17180 <__assert_fail@plt+0x62c4>
   17160:	ldr	r3, [fp, #-8]
   17164:	cmp	r3, #31
   17168:	ble	17178 <__assert_fail@plt+0x62bc>
   1716c:	ldr	r3, [fp, #-8]
   17170:	cmp	r3, #127	; 0x7f
   17174:	bne	17180 <__assert_fail@plt+0x62c4>
   17178:	mov	r3, #1
   1717c:	b	17184 <__assert_fail@plt+0x62c8>
   17180:	mov	r3, #0
   17184:	mov	r0, r3
   17188:	add	sp, fp, #0
   1718c:	pop	{fp}		; (ldr fp, [sp], #4)
   17190:	bx	lr
   17194:	push	{fp}		; (str fp, [sp, #-4]!)
   17198:	add	fp, sp, #0
   1719c:	sub	sp, sp, #12
   171a0:	str	r0, [fp, #-8]
   171a4:	ldr	r3, [fp, #-8]
   171a8:	sub	r3, r3, #48	; 0x30
   171ac:	cmp	r3, #9
   171b0:	bhi	171bc <__assert_fail@plt+0x6300>
   171b4:	mov	r3, #1
   171b8:	b	171c0 <__assert_fail@plt+0x6304>
   171bc:	mov	r3, #0
   171c0:	mov	r0, r3
   171c4:	add	sp, fp, #0
   171c8:	pop	{fp}		; (ldr fp, [sp], #4)
   171cc:	bx	lr
   171d0:	push	{fp}		; (str fp, [sp, #-4]!)
   171d4:	add	fp, sp, #0
   171d8:	sub	sp, sp, #12
   171dc:	str	r0, [fp, #-8]
   171e0:	ldr	r3, [fp, #-8]
   171e4:	sub	r3, r3, #33	; 0x21
   171e8:	cmp	r3, #93	; 0x5d
   171ec:	bhi	171f8 <__assert_fail@plt+0x633c>
   171f0:	mov	r3, #1
   171f4:	b	171fc <__assert_fail@plt+0x6340>
   171f8:	mov	r3, #0
   171fc:	mov	r0, r3
   17200:	add	sp, fp, #0
   17204:	pop	{fp}		; (ldr fp, [sp], #4)
   17208:	bx	lr
   1720c:	push	{fp}		; (str fp, [sp, #-4]!)
   17210:	add	fp, sp, #0
   17214:	sub	sp, sp, #12
   17218:	str	r0, [fp, #-8]
   1721c:	ldr	r3, [fp, #-8]
   17220:	sub	r3, r3, #97	; 0x61
   17224:	cmp	r3, #25
   17228:	bhi	17234 <__assert_fail@plt+0x6378>
   1722c:	mov	r3, #1
   17230:	b	17238 <__assert_fail@plt+0x637c>
   17234:	mov	r3, #0
   17238:	mov	r0, r3
   1723c:	add	sp, fp, #0
   17240:	pop	{fp}		; (ldr fp, [sp], #4)
   17244:	bx	lr
   17248:	push	{fp}		; (str fp, [sp, #-4]!)
   1724c:	add	fp, sp, #0
   17250:	sub	sp, sp, #12
   17254:	str	r0, [fp, #-8]
   17258:	ldr	r3, [fp, #-8]
   1725c:	sub	r3, r3, #32
   17260:	cmp	r3, #94	; 0x5e
   17264:	bhi	17270 <__assert_fail@plt+0x63b4>
   17268:	mov	r3, #1
   1726c:	b	17274 <__assert_fail@plt+0x63b8>
   17270:	mov	r3, #0
   17274:	mov	r0, r3
   17278:	add	sp, fp, #0
   1727c:	pop	{fp}		; (ldr fp, [sp], #4)
   17280:	bx	lr
   17284:	push	{fp}		; (str fp, [sp, #-4]!)
   17288:	add	fp, sp, #0
   1728c:	sub	sp, sp, #12
   17290:	str	r0, [fp, #-8]
   17294:	ldr	r3, [fp, #-8]
   17298:	cmp	r3, #64	; 0x40
   1729c:	bgt	172c0 <__assert_fail@plt+0x6404>
   172a0:	ldr	r3, [fp, #-8]
   172a4:	cmp	r3, #58	; 0x3a
   172a8:	bge	172e8 <__assert_fail@plt+0x642c>
   172ac:	ldr	r3, [fp, #-8]
   172b0:	sub	r3, r3, #33	; 0x21
   172b4:	cmp	r3, #14
   172b8:	bhi	172f0 <__assert_fail@plt+0x6434>
   172bc:	b	172e8 <__assert_fail@plt+0x642c>
   172c0:	ldr	r3, [fp, #-8]
   172c4:	cmp	r3, #91	; 0x5b
   172c8:	blt	172f0 <__assert_fail@plt+0x6434>
   172cc:	ldr	r3, [fp, #-8]
   172d0:	cmp	r3, #96	; 0x60
   172d4:	ble	172e8 <__assert_fail@plt+0x642c>
   172d8:	ldr	r3, [fp, #-8]
   172dc:	sub	r3, r3, #123	; 0x7b
   172e0:	cmp	r3, #3
   172e4:	bhi	172f0 <__assert_fail@plt+0x6434>
   172e8:	mov	r3, #1
   172ec:	b	172f4 <__assert_fail@plt+0x6438>
   172f0:	mov	r3, #0
   172f4:	mov	r0, r3
   172f8:	add	sp, fp, #0
   172fc:	pop	{fp}		; (ldr fp, [sp], #4)
   17300:	bx	lr
   17304:	push	{fp}		; (str fp, [sp, #-4]!)
   17308:	add	fp, sp, #0
   1730c:	sub	sp, sp, #12
   17310:	str	r0, [fp, #-8]
   17314:	ldr	r3, [fp, #-8]
   17318:	cmp	r3, #9
   1731c:	blt	17340 <__assert_fail@plt+0x6484>
   17320:	ldr	r3, [fp, #-8]
   17324:	cmp	r3, #13
   17328:	ble	17338 <__assert_fail@plt+0x647c>
   1732c:	ldr	r3, [fp, #-8]
   17330:	cmp	r3, #32
   17334:	bne	17340 <__assert_fail@plt+0x6484>
   17338:	mov	r3, #1
   1733c:	b	17344 <__assert_fail@plt+0x6488>
   17340:	mov	r3, #0
   17344:	mov	r0, r3
   17348:	add	sp, fp, #0
   1734c:	pop	{fp}		; (ldr fp, [sp], #4)
   17350:	bx	lr
   17354:	push	{fp}		; (str fp, [sp, #-4]!)
   17358:	add	fp, sp, #0
   1735c:	sub	sp, sp, #12
   17360:	str	r0, [fp, #-8]
   17364:	ldr	r3, [fp, #-8]
   17368:	sub	r3, r3, #65	; 0x41
   1736c:	cmp	r3, #25
   17370:	bhi	1737c <__assert_fail@plt+0x64c0>
   17374:	mov	r3, #1
   17378:	b	17380 <__assert_fail@plt+0x64c4>
   1737c:	mov	r3, #0
   17380:	mov	r0, r3
   17384:	add	sp, fp, #0
   17388:	pop	{fp}		; (ldr fp, [sp], #4)
   1738c:	bx	lr
   17390:	push	{fp}		; (str fp, [sp, #-4]!)
   17394:	add	fp, sp, #0
   17398:	sub	sp, sp, #12
   1739c:	str	r0, [fp, #-8]
   173a0:	ldr	r3, [fp, #-8]
   173a4:	sub	r3, r3, #48	; 0x30
   173a8:	cmp	r3, #54	; 0x36
   173ac:	ldrls	pc, [pc, r3, lsl #2]
   173b0:	b	17498 <__assert_fail@plt+0x65dc>
   173b4:	muleq	r1, r0, r4
   173b8:	muleq	r1, r0, r4
   173bc:	muleq	r1, r0, r4
   173c0:	muleq	r1, r0, r4
   173c4:	muleq	r1, r0, r4
   173c8:	muleq	r1, r0, r4
   173cc:	muleq	r1, r0, r4
   173d0:	muleq	r1, r0, r4
   173d4:	muleq	r1, r0, r4
   173d8:	muleq	r1, r0, r4
   173dc:	muleq	r1, r8, r4
   173e0:	muleq	r1, r8, r4
   173e4:	muleq	r1, r8, r4
   173e8:	muleq	r1, r8, r4
   173ec:	muleq	r1, r8, r4
   173f0:	muleq	r1, r8, r4
   173f4:	muleq	r1, r8, r4
   173f8:	muleq	r1, r0, r4
   173fc:	muleq	r1, r0, r4
   17400:	muleq	r1, r0, r4
   17404:	muleq	r1, r0, r4
   17408:	muleq	r1, r0, r4
   1740c:	muleq	r1, r0, r4
   17410:	muleq	r1, r8, r4
   17414:	muleq	r1, r8, r4
   17418:	muleq	r1, r8, r4
   1741c:	muleq	r1, r8, r4
   17420:	muleq	r1, r8, r4
   17424:	muleq	r1, r8, r4
   17428:	muleq	r1, r8, r4
   1742c:	muleq	r1, r8, r4
   17430:	muleq	r1, r8, r4
   17434:	muleq	r1, r8, r4
   17438:	muleq	r1, r8, r4
   1743c:	muleq	r1, r8, r4
   17440:	muleq	r1, r8, r4
   17444:	muleq	r1, r8, r4
   17448:	muleq	r1, r8, r4
   1744c:	muleq	r1, r8, r4
   17450:	muleq	r1, r8, r4
   17454:	muleq	r1, r8, r4
   17458:	muleq	r1, r8, r4
   1745c:	muleq	r1, r8, r4
   17460:	muleq	r1, r8, r4
   17464:	muleq	r1, r8, r4
   17468:	muleq	r1, r8, r4
   1746c:	muleq	r1, r8, r4
   17470:	muleq	r1, r8, r4
   17474:	muleq	r1, r8, r4
   17478:	muleq	r1, r0, r4
   1747c:	muleq	r1, r0, r4
   17480:	muleq	r1, r0, r4
   17484:	muleq	r1, r0, r4
   17488:	muleq	r1, r0, r4
   1748c:	muleq	r1, r0, r4
   17490:	mov	r3, #1
   17494:	b	1749c <__assert_fail@plt+0x65e0>
   17498:	mov	r3, #0
   1749c:	mov	r0, r3
   174a0:	add	sp, fp, #0
   174a4:	pop	{fp}		; (ldr fp, [sp], #4)
   174a8:	bx	lr
   174ac:	push	{fp}		; (str fp, [sp, #-4]!)
   174b0:	add	fp, sp, #0
   174b4:	sub	sp, sp, #12
   174b8:	str	r0, [fp, #-8]
   174bc:	ldr	r3, [fp, #-8]
   174c0:	sub	r3, r3, #65	; 0x41
   174c4:	cmp	r3, #25
   174c8:	bhi	174d8 <__assert_fail@plt+0x661c>
   174cc:	ldr	r3, [fp, #-8]
   174d0:	add	r3, r3, #32
   174d4:	b	174dc <__assert_fail@plt+0x6620>
   174d8:	ldr	r3, [fp, #-8]
   174dc:	mov	r0, r3
   174e0:	add	sp, fp, #0
   174e4:	pop	{fp}		; (ldr fp, [sp], #4)
   174e8:	bx	lr
   174ec:	push	{fp}		; (str fp, [sp, #-4]!)
   174f0:	add	fp, sp, #0
   174f4:	sub	sp, sp, #12
   174f8:	str	r0, [fp, #-8]
   174fc:	ldr	r3, [fp, #-8]
   17500:	sub	r3, r3, #97	; 0x61
   17504:	cmp	r3, #25
   17508:	bhi	17518 <__assert_fail@plt+0x665c>
   1750c:	ldr	r3, [fp, #-8]
   17510:	sub	r3, r3, #32
   17514:	b	1751c <__assert_fail@plt+0x6660>
   17518:	ldr	r3, [fp, #-8]
   1751c:	mov	r0, r3
   17520:	add	sp, fp, #0
   17524:	pop	{fp}		; (ldr fp, [sp], #4)
   17528:	bx	lr
   1752c:	str	fp, [sp, #-8]!
   17530:	str	lr, [sp, #4]
   17534:	add	fp, sp, #4
   17538:	sub	sp, sp, #272	; 0x110
   1753c:	str	r0, [fp, #-272]	; 0xfffffef0
   17540:	sub	r3, fp, #264	; 0x108
   17544:	movw	r2, #257	; 0x101
   17548:	mov	r1, r3
   1754c:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17550:	bl	176f0 <__assert_fail@plt+0x6834>
   17554:	mov	r3, r0
   17558:	cmp	r3, #0
   1755c:	beq	17568 <__assert_fail@plt+0x66ac>
   17560:	mov	r3, #0
   17564:	b	175bc <__assert_fail@plt+0x6700>
   17568:	sub	r3, fp, #264	; 0x108
   1756c:	movw	r1, #34336	; 0x8620
   17570:	movt	r1, #1
   17574:	mov	r0, r3
   17578:	bl	10c88 <strcmp@plt>
   1757c:	mov	r3, r0
   17580:	cmp	r3, #0
   17584:	beq	175b0 <__assert_fail@plt+0x66f4>
   17588:	sub	r3, fp, #264	; 0x108
   1758c:	movw	r1, #34340	; 0x8624
   17590:	movt	r1, #1
   17594:	mov	r0, r3
   17598:	bl	10c88 <strcmp@plt>
   1759c:	mov	r3, r0
   175a0:	cmp	r3, #0
   175a4:	beq	175b0 <__assert_fail@plt+0x66f4>
   175a8:	mov	r3, #1
   175ac:	b	175b4 <__assert_fail@plt+0x66f8>
   175b0:	mov	r3, #0
   175b4:	and	r3, r3, #1
   175b8:	uxtb	r3, r3
   175bc:	mov	r0, r3
   175c0:	sub	sp, fp, #4
   175c4:	ldr	fp, [sp]
   175c8:	add	sp, sp, #4
   175cc:	pop	{pc}		; (ldr pc, [sp], #4)
   175d0:	str	fp, [sp, #-8]!
   175d4:	str	lr, [sp, #4]
   175d8:	add	fp, sp, #4
   175dc:	sub	sp, sp, #16
   175e0:	str	r0, [fp, #-16]
   175e4:	mov	r1, #0
   175e8:	ldr	r0, [fp, #-16]
   175ec:	bl	10e44 <setlocale@plt>
   175f0:	str	r0, [fp, #-8]
   175f4:	ldr	r3, [fp, #-8]
   175f8:	mov	r0, r3
   175fc:	sub	sp, fp, #4
   17600:	ldr	fp, [sp]
   17604:	add	sp, sp, #4
   17608:	pop	{pc}		; (ldr pc, [sp], #4)
   1760c:	str	fp, [sp, #-8]!
   17610:	str	lr, [sp, #4]
   17614:	add	fp, sp, #4
   17618:	sub	sp, sp, #24
   1761c:	str	r0, [fp, #-16]
   17620:	str	r1, [fp, #-20]	; 0xffffffec
   17624:	str	r2, [fp, #-24]	; 0xffffffe8
   17628:	ldr	r0, [fp, #-16]
   1762c:	bl	175d0 <__assert_fail@plt+0x6714>
   17630:	str	r0, [fp, #-8]
   17634:	ldr	r3, [fp, #-8]
   17638:	cmp	r3, #0
   1763c:	bne	17660 <__assert_fail@plt+0x67a4>
   17640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17644:	cmp	r3, #0
   17648:	beq	17658 <__assert_fail@plt+0x679c>
   1764c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17650:	mov	r2, #0
   17654:	strb	r2, [r3]
   17658:	mov	r3, #22
   1765c:	b	176dc <__assert_fail@plt+0x6820>
   17660:	ldr	r0, [fp, #-8]
   17664:	bl	10de4 <strlen@plt>
   17668:	str	r0, [fp, #-12]
   1766c:	ldr	r2, [fp, #-12]
   17670:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17674:	cmp	r2, r3
   17678:	bcs	1769c <__assert_fail@plt+0x67e0>
   1767c:	ldr	r3, [fp, #-12]
   17680:	add	r3, r3, #1
   17684:	mov	r2, r3
   17688:	ldr	r1, [fp, #-8]
   1768c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17690:	bl	10cd0 <memcpy@plt>
   17694:	mov	r3, #0
   17698:	b	176dc <__assert_fail@plt+0x6820>
   1769c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176a0:	cmp	r3, #0
   176a4:	beq	176d8 <__assert_fail@plt+0x681c>
   176a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176ac:	sub	r3, r3, #1
   176b0:	mov	r2, r3
   176b4:	ldr	r1, [fp, #-8]
   176b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   176bc:	bl	10cd0 <memcpy@plt>
   176c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176c4:	sub	r3, r3, #1
   176c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   176cc:	add	r3, r2, r3
   176d0:	mov	r2, #0
   176d4:	strb	r2, [r3]
   176d8:	mov	r3, #34	; 0x22
   176dc:	mov	r0, r3
   176e0:	sub	sp, fp, #4
   176e4:	ldr	fp, [sp]
   176e8:	add	sp, sp, #4
   176ec:	pop	{pc}		; (ldr pc, [sp], #4)
   176f0:	str	fp, [sp, #-8]!
   176f4:	str	lr, [sp, #4]
   176f8:	add	fp, sp, #4
   176fc:	sub	sp, sp, #16
   17700:	str	r0, [fp, #-8]
   17704:	str	r1, [fp, #-12]
   17708:	str	r2, [fp, #-16]
   1770c:	ldr	r2, [fp, #-16]
   17710:	ldr	r1, [fp, #-12]
   17714:	ldr	r0, [fp, #-8]
   17718:	bl	1760c <__assert_fail@plt+0x6750>
   1771c:	mov	r3, r0
   17720:	mov	r0, r3
   17724:	sub	sp, fp, #4
   17728:	ldr	fp, [sp]
   1772c:	add	sp, sp, #4
   17730:	pop	{pc}		; (ldr pc, [sp], #4)
   17734:	str	fp, [sp, #-8]!
   17738:	str	lr, [sp, #4]
   1773c:	add	fp, sp, #4
   17740:	sub	sp, sp, #8
   17744:	str	r0, [fp, #-8]
   17748:	ldr	r0, [fp, #-8]
   1774c:	bl	175d0 <__assert_fail@plt+0x6714>
   17750:	mov	r3, r0
   17754:	mov	r0, r3
   17758:	sub	sp, fp, #4
   1775c:	ldr	fp, [sp]
   17760:	add	sp, sp, #4
   17764:	pop	{pc}		; (ldr pc, [sp], #4)
   17768:	cmp	r3, #0
   1776c:	cmpeq	r2, #0
   17770:	bne	17788 <__assert_fail@plt+0x68cc>
   17774:	cmp	r1, #0
   17778:	cmpeq	r0, #0
   1777c:	mvnne	r1, #0
   17780:	mvnne	r0, #0
   17784:	b	177a4 <__assert_fail@plt+0x68e8>
   17788:	sub	sp, sp, #8
   1778c:	push	{sp, lr}
   17790:	bl	177b4 <__assert_fail@plt+0x68f8>
   17794:	ldr	lr, [sp, #4]
   17798:	add	sp, sp, #8
   1779c:	pop	{r2, r3}
   177a0:	bx	lr
   177a4:	push	{r1, lr}
   177a8:	mov	r0, #8
   177ac:	bl	10c7c <raise@plt>
   177b0:	pop	{r1, pc}
   177b4:	cmp	r1, r3
   177b8:	cmpeq	r0, r2
   177bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177c0:	mov	r4, r0
   177c4:	movcc	r0, #0
   177c8:	mov	r5, r1
   177cc:	ldr	lr, [sp, #36]	; 0x24
   177d0:	movcc	r1, r0
   177d4:	bcc	178d0 <__assert_fail@plt+0x6a14>
   177d8:	cmp	r3, #0
   177dc:	clzeq	ip, r2
   177e0:	clzne	ip, r3
   177e4:	addeq	ip, ip, #32
   177e8:	cmp	r5, #0
   177ec:	clzeq	r1, r4
   177f0:	addeq	r1, r1, #32
   177f4:	clzne	r1, r5
   177f8:	sub	ip, ip, r1
   177fc:	sub	sl, ip, #32
   17800:	lsl	r9, r3, ip
   17804:	rsb	fp, ip, #32
   17808:	orr	r9, r9, r2, lsl sl
   1780c:	orr	r9, r9, r2, lsr fp
   17810:	lsl	r8, r2, ip
   17814:	cmp	r5, r9
   17818:	cmpeq	r4, r8
   1781c:	movcc	r0, #0
   17820:	movcc	r1, r0
   17824:	bcc	17840 <__assert_fail@plt+0x6984>
   17828:	mov	r0, #1
   1782c:	subs	r4, r4, r8
   17830:	lsl	r1, r0, sl
   17834:	orr	r1, r1, r0, lsr fp
   17838:	lsl	r0, r0, ip
   1783c:	sbc	r5, r5, r9
   17840:	cmp	ip, #0
   17844:	beq	178d0 <__assert_fail@plt+0x6a14>
   17848:	lsr	r6, r8, #1
   1784c:	orr	r6, r6, r9, lsl #31
   17850:	lsr	r7, r9, #1
   17854:	mov	r2, ip
   17858:	b	1787c <__assert_fail@plt+0x69c0>
   1785c:	subs	r3, r4, r6
   17860:	sbc	r8, r5, r7
   17864:	adds	r3, r3, r3
   17868:	adc	r8, r8, r8
   1786c:	adds	r4, r3, #1
   17870:	adc	r5, r8, #0
   17874:	subs	r2, r2, #1
   17878:	beq	17898 <__assert_fail@plt+0x69dc>
   1787c:	cmp	r5, r7
   17880:	cmpeq	r4, r6
   17884:	bcs	1785c <__assert_fail@plt+0x69a0>
   17888:	adds	r4, r4, r4
   1788c:	adc	r5, r5, r5
   17890:	subs	r2, r2, #1
   17894:	bne	1787c <__assert_fail@plt+0x69c0>
   17898:	lsr	r3, r4, ip
   1789c:	orr	r3, r3, r5, lsl fp
   178a0:	lsr	r2, r5, ip
   178a4:	orr	r3, r3, r5, lsr sl
   178a8:	adds	r0, r0, r4
   178ac:	mov	r4, r3
   178b0:	lsl	r3, r2, ip
   178b4:	orr	r3, r3, r4, lsl sl
   178b8:	lsl	ip, r4, ip
   178bc:	orr	r3, r3, r4, lsr fp
   178c0:	adc	r1, r1, r5
   178c4:	subs	r0, r0, ip
   178c8:	mov	r5, r2
   178cc:	sbc	r1, r1, r3
   178d0:	cmp	lr, #0
   178d4:	strdne	r4, [lr]
   178d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   178e0:	mov	r7, r0
   178e4:	ldr	r6, [pc, #72]	; 17934 <__assert_fail@plt+0x6a78>
   178e8:	ldr	r5, [pc, #72]	; 17938 <__assert_fail@plt+0x6a7c>
   178ec:	add	r6, pc, r6
   178f0:	add	r5, pc, r5
   178f4:	sub	r6, r6, r5
   178f8:	mov	r8, r1
   178fc:	mov	r9, r2
   17900:	bl	10c44 <calloc@plt-0x20>
   17904:	asrs	r6, r6, #2
   17908:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1790c:	mov	r4, #0
   17910:	add	r4, r4, #1
   17914:	ldr	r3, [r5], #4
   17918:	mov	r2, r9
   1791c:	mov	r1, r8
   17920:	mov	r0, r7
   17924:	blx	r3
   17928:	cmp	r6, r4
   1792c:	bne	17910 <__assert_fail@plt+0x6a54>
   17930:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17934:	andeq	r1, r1, r0, lsr #12
   17938:	andeq	r1, r1, r8, lsl r6
   1793c:	bx	lr
   17940:	ldr	r3, [pc, #12]	; 17954 <__assert_fail@plt+0x6a98>
   17944:	mov	r1, #0
   17948:	add	r3, pc, r3
   1794c:	ldr	r2, [r3]
   17950:	b	10e08 <__cxa_atexit@plt>
   17954:	muleq	r1, r0, r7

Disassembly of section .fini:

00017958 <.fini>:
   17958:	push	{r3, lr}
   1795c:	pop	{r3, pc}
