
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r6, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <memcmp@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <fputc_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <dcgettext@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <realloc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <textdomain@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <iswprint@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <lseek64@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__ctype_get_mb_cur_max@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <__fpending@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <ferror_unlocked@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <mbrtowc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <error@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <malloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__libc_start_main@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__freading@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <getopt_long@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <__ctype_b_loc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <exit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <strlen@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strchr@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <__errno_location@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__cxa_atexit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <memset@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <__printf_chk@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <fileno@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <__fprintf_chk@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <memchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <strtoimax@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <fclose@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fseeko64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <setlocale@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <strrchr@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <nl_langinfo@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <fopen64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <fread_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fputs@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fac <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:	muleq	r1, r8, r7
   1113c:	andeq	r1, r1, r0, lsr #9
   11140:	andeq	r5, r1, r8, lsr r7
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fc4 <__gmon_start__@plt>
   11160:	andeq	r5, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r7, r2, r8, lsr r1
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r7, r2, r8, lsr r1
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r7, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	sub	sp, sp, #56	; 0x38
   11204:	mov	r8, r0
   11208:	cmp	r0, #0
   1120c:	bne	11460 <__assert_fail@plt+0x364>
   11210:	movw	r1, #22507	; 0x57eb
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10f28 <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #29032	; 0x7168
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11030 <__printf_chk@plt>
   1123c:	movw	r1, #22537	; 0x5809
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10f28 <dcgettext@plt>
   11250:	mov	r1, r0
   11254:	mov	r0, #1
   11258:	mov	r2, #32
   1125c:	bl	11030 <__printf_chk@plt>
   11260:	movw	r1, #23327	; 0x5b1f
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f28 <dcgettext@plt>
   11274:	movw	r9, #29012	; 0x7154
   11278:	movt	r9, #2
   1127c:	ldr	r1, [r9]
   11280:	bl	10e8c <fputs_unlocked@plt>
   11284:	movw	r1, #23383	; 0x5b57
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10f28 <dcgettext@plt>
   11298:	ldr	r1, [r9]
   1129c:	bl	10e8c <fputs_unlocked@plt>
   112a0:	movw	r1, #22607	; 0x584f
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10f28 <dcgettext@plt>
   112b4:	ldr	r1, [r9]
   112b8:	bl	10e8c <fputs_unlocked@plt>
   112bc:	movw	r1, #22849	; 0x5941
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10f28 <dcgettext@plt>
   112d0:	ldr	r1, [r9]
   112d4:	bl	10e8c <fputs_unlocked@plt>
   112d8:	movw	r1, #22894	; 0x596e
   112dc:	mov	r0, #0
   112e0:	mov	r2, #5
   112e4:	movt	r1, #1
   112e8:	bl	10f28 <dcgettext@plt>
   112ec:	ldr	r1, [r9]
   112f0:	bl	10e8c <fputs_unlocked@plt>
   112f4:	movw	r1, #22948	; 0x59a4
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10f28 <dcgettext@plt>
   11308:	movw	r5, #23216	; 0x5ab0
   1130c:	mov	r1, r0
   11310:	mov	r0, #1
   11314:	movt	r5, #1
   11318:	mov	r2, r5
   1131c:	mov	r3, r5
   11320:	bl	11030 <__printf_chk@plt>
   11324:	movw	ip, #23968	; 0x5da0
   11328:	mov	r6, sp
   1132c:	movt	ip, #1
   11330:	mov	r1, r6
   11334:	ldm	ip!, {r2, r3, r4, r7}
   11338:	stmia	r1!, {r2, r3, r4, r7}
   1133c:	ldm	ip!, {r0, r2, r3, r4, r7}
   11340:	stmia	r1!, {r0, r2, r3, r4, r7}
   11344:	ldm	ip, {r0, r2, r3, r4, r7}
   11348:	stm	r1, {r0, r2, r3, r4, r7}
   1134c:	movw	r1, #23458	; 0x5ba2
   11350:	movt	r1, #1
   11354:	mov	r0, r5
   11358:	bl	10ea4 <strcmp@plt>
   1135c:	cmp	r0, #0
   11360:	ldrne	r1, [r6, #8]!
   11364:	cmpne	r1, #0
   11368:	bne	11354 <__assert_fail@plt+0x258>
   1136c:	ldr	r6, [r6, #4]
   11370:	movw	r1, #23553	; 0x5c01
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	movt	r1, #1
   11380:	bl	10f28 <dcgettext@plt>
   11384:	movw	r2, #23277	; 0x5aed
   11388:	movw	r3, #23576	; 0x5c18
   1138c:	mov	r1, r0
   11390:	mov	r0, #1
   11394:	movt	r2, #1
   11398:	movt	r3, #1
   1139c:	bl	11030 <__printf_chk@plt>
   113a0:	cmp	r6, #0
   113a4:	mov	r0, #5
   113a8:	mov	r1, #0
   113ac:	moveq	r6, r5
   113b0:	bl	11084 <setlocale@plt>
   113b4:	cmp	r0, #0
   113b8:	beq	113f0 <__assert_fail@plt+0x2f4>
   113bc:	movw	r1, #23616	; 0x5c40
   113c0:	mov	r2, #3
   113c4:	movt	r1, #1
   113c8:	bl	110d8 <strncmp@plt>
   113cc:	cmp	r0, #0
   113d0:	beq	113f0 <__assert_fail@plt+0x2f4>
   113d4:	movw	r1, #23620	; 0x5c44
   113d8:	mov	r0, #0
   113dc:	mov	r2, #5
   113e0:	movt	r1, #1
   113e4:	bl	10f28 <dcgettext@plt>
   113e8:	ldr	r1, [r9]
   113ec:	bl	10e8c <fputs_unlocked@plt>
   113f0:	movw	r1, #23691	; 0x5c8b
   113f4:	mov	r0, #0
   113f8:	mov	r2, #5
   113fc:	movt	r1, #1
   11400:	bl	10f28 <dcgettext@plt>
   11404:	movw	r2, #23576	; 0x5c18
   11408:	mov	r1, r0
   1140c:	mov	r0, #1
   11410:	mov	r3, r5
   11414:	movt	r2, #1
   11418:	bl	11030 <__printf_chk@plt>
   1141c:	movw	r1, #23718	; 0x5ca6
   11420:	mov	r0, #0
   11424:	mov	r2, #5
   11428:	movt	r1, #1
   1142c:	bl	10f28 <dcgettext@plt>
   11430:	movw	r3, #23768	; 0x5cd8
   11434:	mov	r1, r0
   11438:	movw	r0, #23486	; 0x5bbe
   1143c:	cmp	r6, r5
   11440:	mov	r2, r6
   11444:	movt	r0, #1
   11448:	movt	r3, #1
   1144c:	moveq	r3, r0
   11450:	mov	r0, #1
   11454:	bl	11030 <__printf_chk@plt>
   11458:	mov	r0, r8
   1145c:	bl	10fe8 <exit@plt>
   11460:	movw	r0, #29000	; 0x7148
   11464:	movw	r1, #22468	; 0x57c4
   11468:	mov	r2, #5
   1146c:	movt	r0, #2
   11470:	movt	r1, #1
   11474:	ldr	r5, [r0]
   11478:	mov	r0, #0
   1147c:	bl	10f28 <dcgettext@plt>
   11480:	mov	r2, r0
   11484:	movw	r0, #29032	; 0x7168
   11488:	mov	r1, #1
   1148c:	movt	r0, #2
   11490:	ldr	r3, [r0]
   11494:	mov	r0, r5
   11498:	bl	11048 <__fprintf_chk@plt>
   1149c:	b	11458 <__assert_fail@plt+0x35c>
   114a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a4:	add	fp, sp, #28
   114a8:	sub	sp, sp, #28
   114ac:	mov	r5, r0
   114b0:	ldr	r0, [r1]
   114b4:	mov	r4, r1
   114b8:	bl	12714 <__assert_fail@plt+0x1618>
   114bc:	movw	r1, #23768	; 0x5cd8
   114c0:	mov	r0, #6
   114c4:	movt	r1, #1
   114c8:	bl	11084 <setlocale@plt>
   114cc:	movw	r6, #23281	; 0x5af1
   114d0:	movw	r1, #23223	; 0x5ab7
   114d4:	movt	r6, #1
   114d8:	movt	r1, #1
   114dc:	mov	r0, r6
   114e0:	bl	110b4 <bindtextdomain@plt>
   114e4:	mov	r0, r6
   114e8:	bl	10f40 <textdomain@plt>
   114ec:	movw	r0, #9256	; 0x2428
   114f0:	movt	r0, #1
   114f4:	bl	1579c <__assert_fail@plt+0x46a0>
   114f8:	movw	r9, #23247	; 0x5acf
   114fc:	movw	r7, #23872	; 0x5d40
   11500:	mov	r6, #76	; 0x4c
   11504:	mov	r8, #0
   11508:	mov	sl, #0
   1150c:	mov	r0, #0
   11510:	movt	r9, #1
   11514:	movt	r7, #1
   11518:	str	r0, [sp, #12]
   1151c:	b	11588 <__assert_fail@plt+0x48c>
   11520:	cmp	r0, #119	; 0x77
   11524:	bne	1167c <__assert_fail@plt+0x580>
   11528:	movw	r0, #29016	; 0x7158
   1152c:	movw	r1, #23768	; 0x5cd8
   11530:	mov	r2, #10
   11534:	add	r3, sp, #16
   11538:	movt	r0, #2
   1153c:	movt	r1, #1
   11540:	ldr	r0, [r0]
   11544:	str	r1, [sp]
   11548:	mov	r1, #0
   1154c:	bl	14ba0 <__assert_fail@plt+0x3aa4>
   11550:	cmp	r0, #1
   11554:	bhi	1174c <__assert_fail@plt+0x650>
   11558:	ldr	r1, [sp, #20]
   1155c:	cmn	r1, #1
   11560:	ble	1174c <__assert_fail@plt+0x650>
   11564:	ldr	r2, [sp, #16]
   11568:	mvn	r3, #-2147483648	; 0x80000000
   1156c:	subs	r3, r3, r2
   11570:	rscs	r1, r1, #0
   11574:	movwlt	r2, #0
   11578:	subs	r6, r0, #1
   1157c:	movne	r6, r2
   11580:	b	11588 <__assert_fail@plt+0x48c>
   11584:	mov	sl, #1
   11588:	mov	r0, r5
   1158c:	mov	r1, r4
   11590:	mov	r2, r9
   11594:	mov	r3, r7
   11598:	str	r8, [sp]
   1159c:	bl	10fd0 <getopt_long@plt>
   115a0:	cmp	r0, #99	; 0x63
   115a4:	ble	115c0 <__assert_fail@plt+0x4c4>
   115a8:	cmp	r0, #100	; 0x64
   115ac:	beq	11584 <__assert_fail@plt+0x488>
   115b0:	cmp	r0, #105	; 0x69
   115b4:	bne	11520 <__assert_fail@plt+0x424>
   115b8:	mov	r0, #1
   115bc:	b	11518 <__assert_fail@plt+0x41c>
   115c0:	cmn	r0, #3
   115c4:	beq	115d8 <__assert_fail@plt+0x4dc>
   115c8:	cmn	r0, #2
   115cc:	bne	11620 <__assert_fail@plt+0x524>
   115d0:	mov	r0, #0
   115d4:	bl	111f8 <__assert_fail@plt+0xfc>
   115d8:	movw	r0, #28912	; 0x70f0
   115dc:	movw	r2, #23291	; 0x5afb
   115e0:	mov	r1, #0
   115e4:	movt	r0, #2
   115e8:	movt	r2, #1
   115ec:	str	r1, [sp, #4]
   115f0:	movw	r1, #23216	; 0x5ab0
   115f4:	ldr	r3, [r0]
   115f8:	movw	r0, #29012	; 0x7154
   115fc:	str	r2, [sp]
   11600:	movw	r2, #23277	; 0x5aed
   11604:	movt	r1, #1
   11608:	movt	r0, #2
   1160c:	movt	r2, #1
   11610:	ldr	r0, [r0]
   11614:	bl	14604 <__assert_fail@plt+0x3508>
   11618:	mov	r0, #0
   1161c:	bl	10fe8 <exit@plt>
   11620:	cmn	r0, #1
   11624:	bne	1167c <__assert_fail@plt+0x580>
   11628:	movw	r7, #28992	; 0x7140
   1162c:	movt	r7, #2
   11630:	ldr	r0, [r7]
   11634:	sub	r1, r5, r0
   11638:	cmp	r1, #2
   1163c:	blt	11684 <__assert_fail@plt+0x588>
   11640:	movw	r1, #23307	; 0x5b0b
   11644:	mov	r0, #0
   11648:	mov	r2, #5
   1164c:	movt	r1, #1
   11650:	bl	10f28 <dcgettext@plt>
   11654:	mov	r5, r0
   11658:	ldr	r0, [r7]
   1165c:	add	r0, r4, r0, lsl #2
   11660:	ldr	r0, [r0, #4]
   11664:	bl	14118 <__assert_fail@plt+0x301c>
   11668:	mov	r3, r0
   1166c:	mov	r0, #0
   11670:	mov	r1, #0
   11674:	mov	r2, r5
   11678:	bl	10f94 <error@plt>
   1167c:	mov	r0, #1
   11680:	bl	111f8 <__assert_fail@plt+0xfc>
   11684:	cmp	r0, r5
   11688:	movw	r1, #24393	; 0x5f49
   1168c:	ldrlt	r4, [r4, r0, lsl #2]
   11690:	movt	r1, #1
   11694:	movwge	r4, #24393	; 0x5f49
   11698:	movtge	r4, #1
   1169c:	mov	r0, r4
   116a0:	bl	10ea4 <strcmp@plt>
   116a4:	cmp	r0, #0
   116a8:	bne	116bc <__assert_fail@plt+0x5c0>
   116ac:	movw	r0, #29008	; 0x7150
   116b0:	movt	r0, #2
   116b4:	ldr	r5, [r0]
   116b8:	b	11708 <__assert_fail@plt+0x60c>
   116bc:	movw	r1, #23324	; 0x5b1c
   116c0:	mov	r0, r4
   116c4:	movt	r1, #1
   116c8:	bl	110a8 <fopen64@plt>
   116cc:	mov	r5, r0
   116d0:	cmp	r0, #0
   116d4:	bne	11708 <__assert_fail@plt+0x60c>
   116d8:	bl	1100c <__errno_location@plt>
   116dc:	ldr	r5, [r0]
   116e0:	mov	r0, #0
   116e4:	mov	r1, #3
   116e8:	mov	r2, r4
   116ec:	bl	13f84 <__assert_fail@plt+0x2e88>
   116f0:	movw	r2, #23256	; 0x5ad8
   116f4:	mov	r3, r0
   116f8:	mov	r0, #1
   116fc:	mov	r1, r5
   11700:	movt	r2, #1
   11704:	bl	10f94 <error@plt>
   11708:	mov	r0, r5
   1170c:	mov	r1, #2
   11710:	bl	12514 <__assert_fail@plt+0x1418>
   11714:	movw	r0, #29012	; 0x7154
   11718:	tst	sl, #1
   1171c:	movt	r0, #2
   11720:	ldr	r2, [r0]
   11724:	beq	1173c <__assert_fail@plt+0x640>
   11728:	ldr	r0, [sp, #12]
   1172c:	mov	r1, r4
   11730:	and	r3, r0, #1
   11734:	mov	r0, r5
   11738:	bl	11790 <__assert_fail@plt+0x694>
   1173c:	mov	r0, r5
   11740:	mov	r1, r4
   11744:	mov	r3, r6
   11748:	bl	1199c <__assert_fail@plt+0x8a0>
   1174c:	movw	r1, #23259	; 0x5adb
   11750:	mov	r0, #0
   11754:	mov	r2, #5
   11758:	movt	r1, #1
   1175c:	bl	10f28 <dcgettext@plt>
   11760:	mov	r4, r0
   11764:	movw	r0, #29016	; 0x7158
   11768:	movt	r0, #2
   1176c:	ldr	r0, [r0]
   11770:	bl	14118 <__assert_fail@plt+0x301c>
   11774:	movw	r2, #23252	; 0x5ad4
   11778:	str	r0, [sp]
   1177c:	mov	r0, #1
   11780:	mov	r1, #0
   11784:	mov	r3, r4
   11788:	movt	r2, #1
   1178c:	bl	10f94 <error@plt>
   11790:	push	{fp, lr}
   11794:	mov	fp, sp
   11798:	sub	sp, sp, #40	; 0x28
   1179c:	add	ip, sp, #8
   117a0:	mov	r8, r0
   117a4:	mov	r0, #8192	; 0x2000
   117a8:	stm	ip, {r1, r2, r3}
   117ac:	bl	1470c <__assert_fail@plt+0x3610>
   117b0:	mov	r4, r0
   117b4:	mov	r0, #5120	; 0x1400
   117b8:	bl	1470c <__assert_fail@plt+0x3610>
   117bc:	mov	r9, r0
   117c0:	sub	r0, fp, #12
   117c4:	bl	11efc <__assert_fail@plt+0xe00>
   117c8:	mov	sl, #0
   117cc:	str	r8, [sp, #20]
   117d0:	add	r5, r4, sl
   117d4:	rsb	r2, sl, #8192	; 0x2000
   117d8:	mov	r1, #1
   117dc:	mov	r3, r8
   117e0:	mov	r0, r5
   117e4:	bl	110c0 <fread_unlocked@plt>
   117e8:	mov	r8, r0
   117ec:	cmp	r0, #1
   117f0:	blt	11850 <__assert_fail@plt+0x754>
   117f4:	ldr	r0, [sp, #16]
   117f8:	cmp	r0, #0
   117fc:	beq	11850 <__assert_fail@plt+0x754>
   11800:	mov	r6, #0
   11804:	add	r0, r6, sl
   11808:	ldrb	r7, [r4, r0]
   1180c:	mov	r0, r7
   11810:	bl	11edc <__assert_fail@plt+0xde0>
   11814:	cmp	r0, #0
   11818:	bne	1183c <__assert_fail@plt+0x740>
   1181c:	cmp	r7, #61	; 0x3d
   11820:	beq	1183c <__assert_fail@plt+0x740>
   11824:	sub	r8, r8, #1
   11828:	add	r0, r5, r6
   1182c:	sub	r2, r8, r6
   11830:	add	r1, r0, #1
   11834:	bl	10ec8 <memmove@plt>
   11838:	b	11840 <__assert_fail@plt+0x744>
   1183c:	add	r6, r6, #1
   11840:	cmp	r8, #1
   11844:	blt	11850 <__assert_fail@plt+0x754>
   11848:	cmp	r6, r8
   1184c:	blt	11804 <__assert_fail@plt+0x708>
   11850:	ldr	r0, [sp, #20]
   11854:	bl	10f7c <ferror_unlocked@plt>
   11858:	cmp	r0, #0
   1185c:	bne	11988 <__assert_fail@plt+0x88c>
   11860:	add	sl, r8, sl
   11864:	ldr	r8, [sp, #20]
   11868:	cmp	sl, #8192	; 0x2000
   1186c:	bge	11880 <__assert_fail@plt+0x784>
   11870:	mov	r0, r8
   11874:	bl	110f0 <feof_unlocked@plt>
   11878:	cmp	r0, #0
   1187c:	beq	117d0 <__assert_fail@plt+0x6d4>
   11880:	mov	r0, r8
   11884:	bl	110f0 <feof_unlocked@plt>
   11888:	ldr	r5, [sp, #12]
   1188c:	mov	r6, #0
   11890:	cmp	r6, #1
   11894:	ldreq	r0, [fp, #-12]
   11898:	cmpeq	r0, #0
   1189c:	beq	11918 <__assert_fail@plt+0x81c>
   118a0:	mov	r0, #5120	; 0x1400
   118a4:	cmp	r6, #0
   118a8:	mov	r2, #0
   118ac:	mov	r1, r4
   118b0:	mov	r3, r9
   118b4:	str	r0, [fp, #-16]
   118b8:	sub	r0, fp, #16
   118bc:	moveq	r2, sl
   118c0:	str	r0, [sp]
   118c4:	sub	r0, fp, #12
   118c8:	bl	11f08 <__assert_fail@plt+0xe0c>
   118cc:	ldr	r2, [fp, #-16]
   118d0:	mov	r7, r0
   118d4:	mov	r0, r9
   118d8:	mov	r1, #1
   118dc:	mov	r3, r5
   118e0:	bl	10f04 <fwrite_unlocked@plt>
   118e4:	ldr	r1, [fp, #-16]
   118e8:	cmp	r0, r1
   118ec:	bcc	11938 <__assert_fail@plt+0x83c>
   118f0:	cmp	r7, #0
   118f4:	beq	11964 <__assert_fail@plt+0x868>
   118f8:	mov	r0, r8
   118fc:	bl	110f0 <feof_unlocked@plt>
   11900:	cmp	r0, #0
   11904:	mov	r0, #2
   11908:	add	r6, r6, #1
   1190c:	movweq	r0, #1
   11910:	cmp	r6, r0
   11914:	bcc	11890 <__assert_fail@plt+0x794>
   11918:	mov	r0, r8
   1191c:	bl	110f0 <feof_unlocked@plt>
   11920:	mov	sl, #0
   11924:	cmp	r0, #0
   11928:	beq	117d0 <__assert_fail@plt+0x6d4>
   1192c:	ldr	r1, [sp, #8]
   11930:	mov	r0, r8
   11934:	bl	11ba4 <__assert_fail@plt+0xaa8>
   11938:	bl	1100c <__errno_location@plt>
   1193c:	ldr	r4, [r0]
   11940:	movw	r1, #23820	; 0x5d0c
   11944:	movt	r1, #1
   11948:	mov	r0, #0
   1194c:	mov	r2, #5
   11950:	bl	10f28 <dcgettext@plt>
   11954:	mov	r2, r0
   11958:	mov	r0, #1
   1195c:	mov	r1, r4
   11960:	bl	10f94 <error@plt>
   11964:	movw	r1, #23832	; 0x5d18
   11968:	mov	r0, #0
   1196c:	mov	r2, #5
   11970:	movt	r1, #1
   11974:	bl	10f28 <dcgettext@plt>
   11978:	mov	r2, r0
   1197c:	mov	r0, #1
   11980:	mov	r1, #0
   11984:	bl	10f94 <error@plt>
   11988:	bl	1100c <__errno_location@plt>
   1198c:	ldr	r4, [r0]
   11990:	movw	r1, #23809	; 0x5d01
   11994:	movt	r1, #1
   11998:	b	11948 <__assert_fail@plt+0x84c>
   1199c:	push	{fp, lr}
   119a0:	mov	fp, sp
   119a4:	sub	sp, sp, #16
   119a8:	mov	r5, r0
   119ac:	mov	r0, #30720	; 0x7800
   119b0:	str	r3, [fp, #-4]
   119b4:	stm	sp, {r1, r2}
   119b8:	bl	1470c <__assert_fail@plt+0x3610>
   119bc:	mov	r4, r0
   119c0:	mov	r0, #49152	; 0xc000
   119c4:	bl	1470c <__assert_fail@plt+0x3610>
   119c8:	mov	r7, r0
   119cc:	mov	sl, #0
   119d0:	str	r0, [sp, #8]
   119d4:	mov	r6, #0
   119d8:	add	r0, r4, r6
   119dc:	rsb	r2, r6, #30720	; 0x7800
   119e0:	mov	r1, #1
   119e4:	mov	r3, r5
   119e8:	bl	110c0 <fread_unlocked@plt>
   119ec:	add	r6, r0, r6
   119f0:	mov	r0, r5
   119f4:	bl	110f0 <feof_unlocked@plt>
   119f8:	cmp	r0, #0
   119fc:	bne	11a18 <__assert_fail@plt+0x91c>
   11a00:	mov	r0, r5
   11a04:	bl	10f7c <ferror_unlocked@plt>
   11a08:	cmp	r6, #30720	; 0x7800
   11a0c:	bge	11a18 <__assert_fail@plt+0x91c>
   11a10:	cmp	r0, #0
   11a14:	beq	119d8 <__assert_fail@plt+0x8dc>
   11a18:	cmp	r6, #1
   11a1c:	blt	11af8 <__assert_fail@plt+0x9fc>
   11a20:	movw	r1, #26215	; 0x6667
   11a24:	add	r0, r6, #4
   11a28:	mov	r2, r7
   11a2c:	movt	r1, #26214	; 0x6666
   11a30:	smmul	r0, r0, r1
   11a34:	lsr	r1, r0, #1
   11a38:	add	r0, r1, r0, lsr #31
   11a3c:	mov	r1, r6
   11a40:	lsl	r8, r0, #3
   11a44:	mov	r0, r4
   11a48:	mov	r3, r8
   11a4c:	bl	11c34 <__assert_fail@plt+0xb38>
   11a50:	ldr	r0, [fp, #-4]
   11a54:	cmp	r0, #0
   11a58:	beq	11ad4 <__assert_fail@plt+0x9d8>
   11a5c:	mov	r7, #0
   11a60:	ldr	r0, [fp, #-4]
   11a64:	sub	r9, r8, r7
   11a68:	sub	r0, r0, sl
   11a6c:	cmp	r0, r9
   11a70:	movlt	r9, r0
   11a74:	cmp	r9, #0
   11a78:	beq	11ab0 <__assert_fail@plt+0x9b4>
   11a7c:	movw	r1, #29012	; 0x7154
   11a80:	ldr	r0, [sp, #8]
   11a84:	mov	r2, r9
   11a88:	movt	r1, #2
   11a8c:	ldr	r3, [r1]
   11a90:	mov	r1, #1
   11a94:	add	r0, r0, r7
   11a98:	bl	10f04 <fwrite_unlocked@plt>
   11a9c:	cmp	r0, r9
   11aa0:	bcc	11b48 <__assert_fail@plt+0xa4c>
   11aa4:	add	r7, r9, r7
   11aa8:	add	sl, r9, sl
   11aac:	b	11ac8 <__assert_fail@plt+0x9cc>
   11ab0:	ldr	r1, [sp, #4]
   11ab4:	mov	r0, #10
   11ab8:	bl	10f1c <fputc_unlocked@plt>
   11abc:	mov	sl, #0
   11ac0:	cmn	r0, #1
   11ac4:	beq	11b48 <__assert_fail@plt+0xa4c>
   11ac8:	cmp	r7, r8
   11acc:	blt	11a60 <__assert_fail@plt+0x964>
   11ad0:	b	11af8 <__assert_fail@plt+0x9fc>
   11ad4:	movw	r0, #29012	; 0x7154
   11ad8:	mov	r1, #1
   11adc:	mov	r2, r8
   11ae0:	movt	r0, #2
   11ae4:	ldr	r3, [r0]
   11ae8:	mov	r0, r7
   11aec:	bl	10f04 <fwrite_unlocked@plt>
   11af0:	cmp	r0, r8
   11af4:	bcc	11b48 <__assert_fail@plt+0xa4c>
   11af8:	mov	r0, r5
   11afc:	bl	110f0 <feof_unlocked@plt>
   11b00:	ldr	r7, [sp, #8]
   11b04:	cmp	r0, #0
   11b08:	bne	11b20 <__assert_fail@plt+0xa24>
   11b0c:	mov	r0, r5
   11b10:	bl	10f7c <ferror_unlocked@plt>
   11b14:	cmp	r6, #30720	; 0x7800
   11b18:	cmpeq	r0, #0
   11b1c:	beq	119d4 <__assert_fail@plt+0x8d8>
   11b20:	ldr	r0, [fp, #-4]
   11b24:	cmp	r0, #0
   11b28:	beq	11b74 <__assert_fail@plt+0xa78>
   11b2c:	cmp	sl, #1
   11b30:	blt	11b74 <__assert_fail@plt+0xa78>
   11b34:	ldr	r1, [sp, #4]
   11b38:	mov	r0, #10
   11b3c:	bl	10f1c <fputc_unlocked@plt>
   11b40:	cmn	r0, #1
   11b44:	bne	11b74 <__assert_fail@plt+0xa78>
   11b48:	bl	1100c <__errno_location@plt>
   11b4c:	ldr	r4, [r0]
   11b50:	movw	r1, #23820	; 0x5d0c
   11b54:	movt	r1, #1
   11b58:	mov	r0, #0
   11b5c:	mov	r2, #5
   11b60:	bl	10f28 <dcgettext@plt>
   11b64:	mov	r2, r0
   11b68:	mov	r0, #1
   11b6c:	mov	r1, r4
   11b70:	bl	10f94 <error@plt>
   11b74:	mov	r0, r5
   11b78:	bl	10f7c <ferror_unlocked@plt>
   11b7c:	cmp	r0, #0
   11b80:	bne	11b90 <__assert_fail@plt+0xa94>
   11b84:	ldr	r1, [sp]
   11b88:	mov	r0, r5
   11b8c:	bl	11ba4 <__assert_fail@plt+0xaa8>
   11b90:	bl	1100c <__errno_location@plt>
   11b94:	ldr	r4, [r0]
   11b98:	movw	r1, #23809	; 0x5d01
   11b9c:	movt	r1, #1
   11ba0:	b	11b58 <__assert_fail@plt+0xa5c>
   11ba4:	push	{fp, lr}
   11ba8:	mov	fp, sp
   11bac:	mov	r5, r1
   11bb0:	bl	12550 <__assert_fail@plt+0x1454>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11bc4 <__assert_fail@plt+0xac8>
   11bbc:	mov	r0, #0
   11bc0:	bl	10fe8 <exit@plt>
   11bc4:	movw	r1, #24393	; 0x5f49
   11bc8:	mov	r0, r5
   11bcc:	movt	r1, #1
   11bd0:	bl	10ea4 <strcmp@plt>
   11bd4:	mov	r6, r0
   11bd8:	bl	1100c <__errno_location@plt>
   11bdc:	ldr	r4, [r0]
   11be0:	cmp	r6, #0
   11be4:	bne	11c0c <__assert_fail@plt+0xb10>
   11be8:	movw	r1, #23846	; 0x5d26
   11bec:	mov	r0, #0
   11bf0:	mov	r2, #5
   11bf4:	movt	r1, #1
   11bf8:	bl	10f28 <dcgettext@plt>
   11bfc:	mov	r2, r0
   11c00:	mov	r0, #1
   11c04:	mov	r1, r4
   11c08:	bl	10f94 <error@plt>
   11c0c:	mov	r0, #0
   11c10:	mov	r1, #3
   11c14:	mov	r2, r5
   11c18:	bl	13f84 <__assert_fail@plt+0x2e88>
   11c1c:	movw	r2, #23256	; 0x5ad8
   11c20:	mov	r3, r0
   11c24:	mov	r0, #1
   11c28:	mov	r1, r4
   11c2c:	movt	r2, #1
   11c30:	bl	10f94 <error@plt>
   11c34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c38:	add	fp, sp, #24
   11c3c:	cmp	r1, #0
   11c40:	cmpne	r3, #0
   11c44:	bne	11c5c <__assert_fail@plt+0xb60>
   11c48:	cmp	r3, #0
   11c4c:	beq	11c58 <__assert_fail@plt+0xb5c>
   11c50:	mov	r0, #0
   11c54:	strb	r0, [r2]
   11c58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11c5c:	movw	lr, #24039	; 0x5de7
   11c60:	add	r0, r0, #2
   11c64:	rsb	ip, r3, #0
   11c68:	mov	r8, #0
   11c6c:	movt	lr, #1
   11c70:	ldrb	r3, [r0, #-2]
   11c74:	add	r5, ip, r8
   11c78:	mov	r4, r2
   11c7c:	cmn	r5, #1
   11c80:	ldrb	r3, [lr, r3, lsr #3]
   11c84:	strb	r3, [r4, r8]!
   11c88:	beq	11c58 <__assert_fail@plt+0xb5c>
   11c8c:	ldrb	r3, [r0, #-2]
   11c90:	cmp	r1, #1
   11c94:	add	r6, r5, #2
   11c98:	lsl	r7, r3, #2
   11c9c:	mov	r3, #0
   11ca0:	ldrbne	r3, [r0, #-1]
   11ca4:	lsrne	r3, r3, #6
   11ca8:	cmp	r6, #0
   11cac:	add	r3, r3, r7
   11cb0:	and	r3, r3, #31
   11cb4:	ldrb	r3, [lr, r3]
   11cb8:	strb	r3, [r4, #1]
   11cbc:	beq	11c58 <__assert_fail@plt+0xb5c>
   11cc0:	cmp	r1, #1
   11cc4:	mov	r7, #61	; 0x3d
   11cc8:	add	r6, r5, #3
   11ccc:	ldrbne	r3, [r0, #-1]
   11cd0:	ubfxne	r3, r3, #1, #5
   11cd4:	ldrbne	r7, [lr, r3]
   11cd8:	cmp	r6, #0
   11cdc:	strb	r7, [r4, #2]
   11ce0:	beq	11c58 <__assert_fail@plt+0xb5c>
   11ce4:	add	r6, r5, #4
   11ce8:	cmp	r1, #1
   11cec:	beq	11d18 <__assert_fail@plt+0xc1c>
   11cf0:	ldrb	r3, [r0, #-1]
   11cf4:	subs	r1, r1, #2
   11cf8:	lsl	r7, r3, #4
   11cfc:	ldrbne	r3, [r0]
   11d00:	lsrne	r3, r3, #4
   11d04:	moveq	r3, #0
   11d08:	add	r3, r3, r7
   11d0c:	and	r3, r3, #31
   11d10:	ldrb	r7, [lr, r3]
   11d14:	b	11d20 <__assert_fail@plt+0xc24>
   11d18:	mov	r7, #61	; 0x3d
   11d1c:	mov	r1, #0
   11d20:	cmp	r6, #0
   11d24:	strb	r7, [r4, #3]
   11d28:	beq	11c58 <__assert_fail@plt+0xb5c>
   11d2c:	add	r6, r5, #5
   11d30:	cmp	r1, #0
   11d34:	beq	11d60 <__assert_fail@plt+0xc64>
   11d38:	ldrb	r3, [r0]
   11d3c:	subs	r1, r1, #1
   11d40:	lsl	r7, r3, #1
   11d44:	ldrbne	r3, [r0, #1]
   11d48:	lsrne	r3, r3, #7
   11d4c:	moveq	r3, #0
   11d50:	add	r3, r3, r7
   11d54:	and	r3, r3, #31
   11d58:	ldrb	r7, [lr, r3]
   11d5c:	b	11d68 <__assert_fail@plt+0xc6c>
   11d60:	mov	r7, #61	; 0x3d
   11d64:	mov	r1, #0
   11d68:	cmp	r6, #0
   11d6c:	strb	r7, [r4, #4]
   11d70:	beq	11c58 <__assert_fail@plt+0xb5c>
   11d74:	add	r6, r5, #6
   11d78:	cmp	r1, #0
   11d7c:	beq	11d90 <__assert_fail@plt+0xc94>
   11d80:	ldrb	r3, [r0, #1]
   11d84:	ubfx	r3, r3, #2, #5
   11d88:	ldrb	r3, [lr, r3]
   11d8c:	b	11d94 <__assert_fail@plt+0xc98>
   11d90:	mov	r3, #61	; 0x3d
   11d94:	cmp	r6, #0
   11d98:	strb	r3, [r4, #5]
   11d9c:	beq	11c58 <__assert_fail@plt+0xb5c>
   11da0:	add	r7, r5, #7
   11da4:	cmp	r1, #0
   11da8:	beq	11dd4 <__assert_fail@plt+0xcd8>
   11dac:	subs	r6, r1, #1
   11db0:	ldrb	r1, [r0, #1]
   11db4:	ldrbne	r3, [r0, #2]
   11db8:	lsl	r1, r1, #3
   11dbc:	lsrne	r3, r3, #5
   11dc0:	moveq	r3, #0
   11dc4:	add	r1, r3, r1
   11dc8:	and	r1, r1, #31
   11dcc:	ldrb	r1, [lr, r1]
   11dd0:	b	11ddc <__assert_fail@plt+0xce0>
   11dd4:	mov	r1, #61	; 0x3d
   11dd8:	mov	r6, #0
   11ddc:	cmp	r7, #0
   11de0:	strb	r1, [r4, #6]
   11de4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11de8:	cmp	r6, #0
   11dec:	beq	11e00 <__assert_fail@plt+0xd04>
   11df0:	ldrb	r1, [r0, #2]
   11df4:	and	r1, r1, #31
   11df8:	ldrb	r1, [lr, r1]
   11dfc:	b	11e04 <__assert_fail@plt+0xd08>
   11e00:	mov	r1, #61	; 0x3d
   11e04:	cmn	r5, #8
   11e08:	strb	r1, [r4, #7]
   11e0c:	beq	11c58 <__assert_fail@plt+0xb5c>
   11e10:	subs	r1, r6, #1
   11e14:	add	r8, r8, #8
   11e18:	addne	r0, r0, #5
   11e1c:	cmpne	r6, #0
   11e20:	bne	11c70 <__assert_fail@plt+0xb74>
   11e24:	add	r2, r2, r8
   11e28:	b	11c50 <__assert_fail@plt+0xb54>
   11e2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e30:	add	fp, sp, #24
   11e34:	mov	r8, r0
   11e38:	movw	r0, #26215	; 0x6667
   11e3c:	mov	r4, r1
   11e40:	mov	r6, r2
   11e44:	movt	r0, #26214	; 0x6666
   11e48:	smmul	r0, r1, r0
   11e4c:	asr	r1, r0, #1
   11e50:	add	r0, r1, r0, lsr #31
   11e54:	add	r1, r0, r0, lsl #2
   11e58:	subs	r1, r4, r1
   11e5c:	addne	r0, r0, #1
   11e60:	cmn	r0, #1
   11e64:	ble	11e74 <__assert_fail@plt+0xd78>
   11e68:	cmn	r0, #-268435455	; 0xf0000001
   11e6c:	ble	11e88 <__assert_fail@plt+0xd8c>
   11e70:	b	11ec4 <__assert_fail@plt+0xdc8>
   11e74:	beq	11e88 <__assert_fail@plt+0xd8c>
   11e78:	mov	r1, #-2147483648	; 0x80000000
   11e7c:	sdiv	r1, r1, r0
   11e80:	cmp	r1, #8
   11e84:	blt	11ec4 <__assert_fail@plt+0xdc8>
   11e88:	cmn	r4, #1
   11e8c:	ble	11ec4 <__assert_fail@plt+0xdc8>
   11e90:	lsl	r7, r0, #3
   11e94:	orr	r5, r7, #1
   11e98:	mov	r0, r5
   11e9c:	bl	15260 <__assert_fail@plt+0x4164>
   11ea0:	cmp	r0, #0
   11ea4:	str	r0, [r6]
   11ea8:	beq	11ed4 <__assert_fail@plt+0xdd8>
   11eac:	mov	r2, r0
   11eb0:	mov	r0, r8
   11eb4:	mov	r1, r4
   11eb8:	mov	r3, r5
   11ebc:	bl	11c34 <__assert_fail@plt+0xb38>
   11ec0:	b	11ecc <__assert_fail@plt+0xdd0>
   11ec4:	mov	r7, #0
   11ec8:	str	r7, [r6]
   11ecc:	mov	r0, r7
   11ed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ed4:	mov	r7, r5
   11ed8:	b	11ecc <__assert_fail@plt+0xdd0>
   11edc:	movw	r1, #24071	; 0x5e07
   11ee0:	movt	r1, #1
   11ee4:	add	r0, r1, r0
   11ee8:	ldrsb	r1, [r0]
   11eec:	mov	r0, #0
   11ef0:	cmn	r1, #1
   11ef4:	movwgt	r0, #1
   11ef8:	bx	lr
   11efc:	mov	r1, #0
   11f00:	str	r1, [r0]
   11f04:	bx	lr
   11f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f0c:	add	fp, sp, #28
   11f10:	sub	sp, sp, #28
   11f14:	mov	r6, r2
   11f18:	mov	r2, r0
   11f1c:	ldr	r0, [fp, #8]
   11f20:	str	r3, [sp, #24]
   11f24:	mov	r5, r1
   11f28:	mov	r8, #0
   11f2c:	cmp	r2, #0
   11f30:	ldr	r7, [r0]
   11f34:	mov	r0, #0
   11f38:	str	r7, [sp, #20]
   11f3c:	beq	11f54 <__assert_fail@plt+0xe58>
   11f40:	clz	r0, r6
   11f44:	lsr	r8, r0, #5
   11f48:	ldr	r0, [r2]
   11f4c:	cmp	r0, #0
   11f50:	movwne	r0, #1
   11f54:	orr	r0, r0, r8
   11f58:	add	sl, sp, #24
   11f5c:	add	r4, sp, #20
   11f60:	str	r2, [sp, #16]
   11f64:	str	r0, [sp, #8]
   11f68:	add	r0, r2, #4
   11f6c:	str	r0, [sp, #4]
   11f70:	clz	r0, r2
   11f74:	lsr	r0, r0, #5
   11f78:	str	r0, [sp, #12]
   11f7c:	ldr	r0, [sp, #8]
   11f80:	cmp	r0, #0
   11f84:	beq	11f98 <__assert_fail@plt+0xe9c>
   11f88:	b	11fb8 <__assert_fail@plt+0xebc>
   11f8c:	ldr	r7, [sp, #20]
   11f90:	add	r5, r5, #8
   11f94:	sub	r6, r6, #8
   11f98:	mov	r0, r5
   11f9c:	mov	r1, r6
   11fa0:	mov	r2, sl
   11fa4:	mov	r3, r4
   11fa8:	bl	12168 <__assert_fail@plt+0x106c>
   11fac:	cmp	r0, #0
   11fb0:	bne	11f8c <__assert_fail@plt+0xe90>
   11fb4:	ldr	r2, [sp, #16]
   11fb8:	cmp	r6, #0
   11fbc:	mov	r0, r6
   11fc0:	movwne	r0, #1
   11fc4:	orr	r0, r8, r0
   11fc8:	cmp	r0, #1
   11fcc:	bne	1213c <__assert_fail@plt+0x1040>
   11fd0:	cmp	r6, #0
   11fd4:	beq	11ff0 <__assert_fail@plt+0xef4>
   11fd8:	ldrb	r0, [r5]
   11fdc:	ldr	r1, [sp, #12]
   11fe0:	subs	r0, r0, #10
   11fe4:	movwne	r0, #1
   11fe8:	orrs	r0, r0, r1
   11fec:	beq	120b4 <__assert_fail@plt+0xfb8>
   11ff0:	ldr	r0, [sp, #20]
   11ff4:	ldr	r1, [sp, #24]
   11ff8:	add	r9, r5, r6
   11ffc:	cmp	r2, #0
   12000:	str	r7, [sp, #20]
   12004:	sub	r0, r0, r7
   12008:	add	r0, r1, r0
   1200c:	str	r0, [sp, #24]
   12010:	beq	120c0 <__assert_fail@plt+0xfc4>
   12014:	ldr	r7, [r2]
   12018:	cmp	r7, #0
   1201c:	beq	12030 <__assert_fail@plt+0xf34>
   12020:	cmp	r7, #8
   12024:	bne	1205c <__assert_fail@plt+0xf60>
   12028:	mov	r0, #0
   1202c:	str	r0, [r2]
   12030:	sub	r0, r9, r5
   12034:	mov	r7, #0
   12038:	cmp	r0, #8
   1203c:	blt	1205c <__assert_fail@plt+0xf60>
   12040:	mov	r0, r5
   12044:	mov	r1, #10
   12048:	mov	r2, #8
   1204c:	bl	11054 <memchr@plt>
   12050:	ldr	r2, [sp, #16]
   12054:	cmp	r0, #0
   12058:	beq	12128 <__assert_fail@plt+0x102c>
   1205c:	cmp	r6, #1
   12060:	blt	120c8 <__assert_fail@plt+0xfcc>
   12064:	mov	r6, r7
   12068:	mov	r0, r5
   1206c:	ldrb	r1, [r5], #1
   12070:	cmp	r1, #10
   12074:	bne	12084 <__assert_fail@plt+0xf88>
   12078:	cmp	r5, r9
   1207c:	bcc	12068 <__assert_fail@plt+0xf6c>
   12080:	b	120ac <__assert_fail@plt+0xfb0>
   12084:	add	r7, r6, #1
   12088:	mov	r3, r2
   1208c:	add	r5, r0, #1
   12090:	str	r7, [r3], r6
   12094:	cmp	r5, r9
   12098:	strb	r1, [r3, #4]
   1209c:	ldr	r6, [r2]
   120a0:	bcs	120ac <__assert_fail@plt+0xfb0>
   120a4:	cmp	r6, #8
   120a8:	bne	12068 <__assert_fail@plt+0xf6c>
   120ac:	add	r5, r0, #1
   120b0:	b	120cc <__assert_fail@plt+0xfd0>
   120b4:	sub	r6, r6, #1
   120b8:	add	r5, r5, #1
   120bc:	b	12120 <__assert_fail@plt+0x1024>
   120c0:	mov	r0, r5
   120c4:	b	120d0 <__assert_fail@plt+0xfd4>
   120c8:	mov	r6, r7
   120cc:	ldr	r0, [sp, #4]
   120d0:	mov	r1, #0
   120d4:	cmp	r6, #0
   120d8:	beq	12140 <__assert_fail@plt+0x1044>
   120dc:	ldr	r3, [sp, #12]
   120e0:	cmp	r6, #7
   120e4:	mov	r2, #0
   120e8:	movwgt	r2, #1
   120ec:	orr	r2, r8, r2
   120f0:	orr	r2, r2, r3
   120f4:	cmp	r2, #1
   120f8:	bne	12140 <__assert_fail@plt+0x1044>
   120fc:	mov	r1, r6
   12100:	mov	r2, sl
   12104:	mov	r3, r4
   12108:	bl	12168 <__assert_fail@plt+0x106c>
   1210c:	cmp	r0, #0
   12110:	mov	r1, r6
   12114:	beq	12140 <__assert_fail@plt+0x1044>
   12118:	ldr	r2, [sp, #16]
   1211c:	sub	r6, r9, r5
   12120:	ldr	r7, [sp, #20]
   12124:	b	11f7c <__assert_fail@plt+0xe80>
   12128:	add	r1, r5, #8
   1212c:	mov	r0, r5
   12130:	mov	r6, #8
   12134:	mov	r5, r1
   12138:	b	120fc <__assert_fail@plt+0x1000>
   1213c:	mov	r1, r6
   12140:	ldr	r0, [fp, #8]
   12144:	ldr	r2, [sp, #20]
   12148:	mov	r3, r0
   1214c:	ldr	r0, [r0]
   12150:	sub	r0, r0, r2
   12154:	str	r0, [r3]
   12158:	clz	r0, r1
   1215c:	lsr	r0, r0, #5
   12160:	sub	sp, fp, #28
   12164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12168:	push	{r4, r5, r6, sl, fp, lr}
   1216c:	add	fp, sp, #16
   12170:	mov	ip, #0
   12174:	cmp	r1, #8
   12178:	blt	122d0 <__assert_fail@plt+0x11d4>
   1217c:	ldrb	r1, [r0]
   12180:	movw	lr, #24071	; 0x5e07
   12184:	movt	lr, #1
   12188:	add	r1, lr, r1
   1218c:	ldrsb	r4, [r1]
   12190:	cmp	r4, #0
   12194:	blt	122d0 <__assert_fail@plt+0x11d4>
   12198:	ldrb	r1, [r0, #1]
   1219c:	add	r1, lr, r1
   121a0:	ldrsb	r1, [r1]
   121a4:	cmp	r1, #0
   121a8:	blt	122d0 <__assert_fail@plt+0x11d4>
   121ac:	ldr	r5, [r3]
   121b0:	ldr	ip, [r2]
   121b4:	cmp	r5, #0
   121b8:	beq	121d8 <__assert_fail@plt+0x10dc>
   121bc:	ubfx	r5, r1, #2, #6
   121c0:	orr	r4, r5, r4, lsl #3
   121c4:	strb	r4, [ip], #1
   121c8:	ldr	r4, [r3]
   121cc:	sub	r5, r4, #1
   121d0:	str	r5, [r3]
   121d4:	b	121dc <__assert_fail@plt+0x10e0>
   121d8:	mov	r5, #0
   121dc:	ldrb	r4, [r0, #2]
   121e0:	cmp	r4, #61	; 0x3d
   121e4:	bne	12200 <__assert_fail@plt+0x1104>
   121e8:	ldrb	r1, [r0, #3]
   121ec:	cmp	r1, #61	; 0x3d
   121f0:	ldrbeq	r1, [r0, #4]
   121f4:	cmpeq	r1, #61	; 0x3d
   121f8:	bne	122c8 <__assert_fail@plt+0x11cc>
   121fc:	b	12260 <__assert_fail@plt+0x1164>
   12200:	add	r4, lr, r4
   12204:	ldrsb	r6, [r4]
   12208:	cmp	r6, #0
   1220c:	blt	122c8 <__assert_fail@plt+0x11cc>
   12210:	ldrb	r4, [r0, #3]
   12214:	add	r4, lr, r4
   12218:	ldrsb	r4, [r4]
   1221c:	cmn	r4, #1
   12220:	ble	122c8 <__assert_fail@plt+0x11cc>
   12224:	cmp	r5, #0
   12228:	beq	12250 <__assert_fail@plt+0x1154>
   1222c:	lsl	r5, r6, #1
   12230:	orr	r1, r5, r1, lsl #6
   12234:	and	r5, r4, #240	; 0xf0
   12238:	orr	r1, r1, r5, lsr #4
   1223c:	strb	r1, [ip], #1
   12240:	ldr	r1, [r3]
   12244:	sub	r5, r1, #1
   12248:	str	r5, [r3]
   1224c:	b	12254 <__assert_fail@plt+0x1158>
   12250:	mov	r5, #0
   12254:	ldrb	r1, [r0, #4]
   12258:	cmp	r1, #61	; 0x3d
   1225c:	bne	12270 <__assert_fail@plt+0x1174>
   12260:	ldrb	r1, [r0, #5]
   12264:	cmp	r1, #61	; 0x3d
   12268:	beq	122b4 <__assert_fail@plt+0x11b8>
   1226c:	b	122c8 <__assert_fail@plt+0x11cc>
   12270:	add	r1, lr, r1
   12274:	ldrsb	r1, [r1]
   12278:	cmn	r1, #1
   1227c:	ble	122c8 <__assert_fail@plt+0x11cc>
   12280:	cmp	r5, #0
   12284:	beq	122a4 <__assert_fail@plt+0x11a8>
   12288:	ubfx	r5, r1, #1, #7
   1228c:	orr	r4, r5, r4, lsl #4
   12290:	strb	r4, [ip], #1
   12294:	ldr	r4, [r3]
   12298:	sub	r4, r4, #1
   1229c:	str	r4, [r3]
   122a0:	b	122a8 <__assert_fail@plt+0x11ac>
   122a4:	mov	r4, #0
   122a8:	ldrb	r5, [r0, #5]
   122ac:	cmp	r5, #61	; 0x3d
   122b0:	bne	122d8 <__assert_fail@plt+0x11dc>
   122b4:	ldrb	r1, [r0, #6]
   122b8:	cmp	r1, #61	; 0x3d
   122bc:	ldrbeq	r0, [r0, #7]
   122c0:	cmpeq	r0, #61	; 0x3d
   122c4:	beq	12368 <__assert_fail@plt+0x126c>
   122c8:	str	ip, [r2]
   122cc:	mov	ip, #0
   122d0:	mov	r0, ip
   122d4:	pop	{r4, r5, r6, sl, fp, pc}
   122d8:	add	r5, lr, r5
   122dc:	ldrsb	r5, [r5]
   122e0:	cmp	r5, #0
   122e4:	blt	122c8 <__assert_fail@plt+0x11cc>
   122e8:	ldrb	r6, [r0, #6]
   122ec:	add	r6, lr, r6
   122f0:	ldrsb	r6, [r6]
   122f4:	cmn	r6, #1
   122f8:	ble	122c8 <__assert_fail@plt+0x11cc>
   122fc:	cmp	r4, #0
   12300:	beq	12324 <__assert_fail@plt+0x1228>
   12304:	ubfx	r4, r6, #3, #5
   12308:	orr	r4, r4, r5, lsl #2
   1230c:	orr	r1, r4, r1, lsl #7
   12310:	strb	r1, [ip], #1
   12314:	ldr	r1, [r3]
   12318:	sub	r1, r1, #1
   1231c:	str	r1, [r3]
   12320:	b	12328 <__assert_fail@plt+0x122c>
   12324:	mov	r1, #0
   12328:	ldrb	r4, [r0, #7]
   1232c:	cmp	r4, #61	; 0x3d
   12330:	beq	12368 <__assert_fail@plt+0x126c>
   12334:	add	r4, lr, r4
   12338:	ldrsb	r4, [r4]
   1233c:	cmn	r4, #1
   12340:	ble	122c8 <__assert_fail@plt+0x11cc>
   12344:	cmp	r1, #0
   12348:	beq	12368 <__assert_fail@plt+0x126c>
   1234c:	ldrb	r0, [r0, #6]
   12350:	ldrb	r0, [lr, r0]
   12354:	orr	r0, r4, r0, lsl #5
   12358:	strb	r0, [ip], #1
   1235c:	ldr	r0, [r3]
   12360:	sub	r0, r0, #1
   12364:	str	r0, [r3]
   12368:	str	ip, [r2]
   1236c:	mov	ip, #1
   12370:	b	122d0 <__assert_fail@plt+0x11d4>
   12374:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12378:	add	fp, sp, #24
   1237c:	sub	sp, sp, #8
   12380:	mov	r7, r0
   12384:	asr	r0, r2, #3
   12388:	mov	r4, r3
   1238c:	mov	r6, r2
   12390:	mov	r8, r1
   12394:	add	r0, r0, r0, lsl #2
   12398:	add	r0, r0, #5
   1239c:	str	r0, [sp, #4]
   123a0:	bl	15260 <__assert_fail@plt+0x4164>
   123a4:	mov	r5, #1
   123a8:	cmp	r0, #0
   123ac:	str	r0, [r4]
   123b0:	beq	123fc <__assert_fail@plt+0x1300>
   123b4:	mov	r3, r0
   123b8:	add	r0, sp, #4
   123bc:	mov	r1, r8
   123c0:	mov	r2, r6
   123c4:	str	r0, [sp]
   123c8:	mov	r0, r7
   123cc:	bl	11f08 <__assert_fail@plt+0xe0c>
   123d0:	cmp	r0, #0
   123d4:	beq	123ec <__assert_fail@plt+0x12f0>
   123d8:	ldr	r0, [fp, #8]
   123dc:	cmp	r0, #0
   123e0:	ldrne	r1, [sp, #4]
   123e4:	strne	r1, [r0]
   123e8:	b	123fc <__assert_fail@plt+0x1300>
   123ec:	ldr	r0, [r4]
   123f0:	bl	12648 <__assert_fail@plt+0x154c>
   123f4:	mov	r5, #0
   123f8:	str	r5, [r4]
   123fc:	mov	r0, r5
   12400:	sub	sp, fp, #24
   12404:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12408:	movw	r1, #29024	; 0x7160
   1240c:	movt	r1, #2
   12410:	str	r0, [r1]
   12414:	bx	lr
   12418:	movw	r1, #29028	; 0x7164
   1241c:	movt	r1, #2
   12420:	strb	r0, [r1]
   12424:	bx	lr
   12428:	push	{r4, r5, r6, sl, fp, lr}
   1242c:	add	fp, sp, #16
   12430:	sub	sp, sp, #8
   12434:	movw	r0, #29012	; 0x7154
   12438:	movt	r0, #2
   1243c:	ldr	r0, [r0]
   12440:	bl	152e0 <__assert_fail@plt+0x41e4>
   12444:	cmp	r0, #0
   12448:	beq	12470 <__assert_fail@plt+0x1374>
   1244c:	movw	r0, #29028	; 0x7164
   12450:	movt	r0, #2
   12454:	ldrb	r0, [r0]
   12458:	cmp	r0, #0
   1245c:	beq	12490 <__assert_fail@plt+0x1394>
   12460:	bl	1100c <__errno_location@plt>
   12464:	ldr	r0, [r0]
   12468:	cmp	r0, #32
   1246c:	bne	12490 <__assert_fail@plt+0x1394>
   12470:	movw	r0, #29000	; 0x7148
   12474:	movt	r0, #2
   12478:	ldr	r0, [r0]
   1247c:	bl	152e0 <__assert_fail@plt+0x41e4>
   12480:	cmp	r0, #0
   12484:	subeq	sp, fp, #16
   12488:	popeq	{r4, r5, r6, sl, fp, pc}
   1248c:	b	12500 <__assert_fail@plt+0x1404>
   12490:	movw	r1, #23820	; 0x5d0c
   12494:	mov	r0, #0
   12498:	mov	r2, #5
   1249c:	movt	r1, #1
   124a0:	bl	10f28 <dcgettext@plt>
   124a4:	mov	r4, r0
   124a8:	movw	r0, #29024	; 0x7160
   124ac:	movt	r0, #2
   124b0:	ldr	r6, [r0]
   124b4:	bl	1100c <__errno_location@plt>
   124b8:	ldr	r5, [r0]
   124bc:	cmp	r6, #0
   124c0:	bne	124dc <__assert_fail@plt+0x13e0>
   124c4:	movw	r2, #23256	; 0x5ad8
   124c8:	mov	r0, #0
   124cc:	mov	r1, r5
   124d0:	mov	r3, r4
   124d4:	movt	r2, #1
   124d8:	b	124fc <__assert_fail@plt+0x1400>
   124dc:	mov	r0, r6
   124e0:	bl	13ed8 <__assert_fail@plt+0x2ddc>
   124e4:	movw	r2, #23252	; 0x5ad4
   124e8:	mov	r3, r0
   124ec:	str	r4, [sp]
   124f0:	mov	r0, #0
   124f4:	mov	r1, r5
   124f8:	movt	r2, #1
   124fc:	bl	10f94 <error@plt>
   12500:	movw	r0, #28916	; 0x70f4
   12504:	movt	r0, #2
   12508:	ldr	r0, [r0]
   1250c:	bl	10ee0 <_exit@plt>
   12510:	b	10eb0 <posix_fadvise64@plt>
   12514:	cmp	r0, #0
   12518:	bxeq	lr
   1251c:	push	{r4, sl, fp, lr}
   12520:	add	fp, sp, #8
   12524:	sub	sp, sp, #16
   12528:	mov	r4, r1
   1252c:	bl	1103c <fileno@plt>
   12530:	mov	r1, #0
   12534:	mov	r2, #0
   12538:	mov	r3, #0
   1253c:	str	r1, [sp]
   12540:	stmib	sp, {r1, r4}
   12544:	bl	10eb0 <posix_fadvise64@plt>
   12548:	sub	sp, fp, #8
   1254c:	pop	{r4, sl, fp, pc}
   12550:	push	{r4, r5, r6, sl, fp, lr}
   12554:	add	fp, sp, #16
   12558:	sub	sp, sp, #8
   1255c:	mov	r4, r0
   12560:	bl	1103c <fileno@plt>
   12564:	cmn	r0, #1
   12568:	ble	125dc <__assert_fail@plt+0x14e0>
   1256c:	mov	r0, r4
   12570:	bl	10fb8 <__freading@plt>
   12574:	cmp	r0, #0
   12578:	beq	125a4 <__assert_fail@plt+0x14a8>
   1257c:	mov	r0, r4
   12580:	bl	1103c <fileno@plt>
   12584:	mov	r1, #1
   12588:	mov	r2, #0
   1258c:	mov	r3, #0
   12590:	str	r1, [sp]
   12594:	bl	10f58 <lseek64@plt>
   12598:	and	r0, r0, r1
   1259c:	cmn	r0, #1
   125a0:	beq	125dc <__assert_fail@plt+0x14e0>
   125a4:	mov	r0, r4
   125a8:	bl	125ec <__assert_fail@plt+0x14f0>
   125ac:	cmp	r0, #0
   125b0:	beq	125dc <__assert_fail@plt+0x14e0>
   125b4:	bl	1100c <__errno_location@plt>
   125b8:	ldr	r6, [r0]
   125bc:	mov	r5, r0
   125c0:	mov	r0, r4
   125c4:	bl	1106c <fclose@plt>
   125c8:	cmp	r6, #0
   125cc:	strne	r6, [r5]
   125d0:	mvnne	r0, #0
   125d4:	sub	sp, fp, #16
   125d8:	pop	{r4, r5, r6, sl, fp, pc}
   125dc:	mov	r0, r4
   125e0:	sub	sp, fp, #16
   125e4:	pop	{r4, r5, r6, sl, fp, lr}
   125e8:	b	1106c <fclose@plt>
   125ec:	push	{r4, sl, fp, lr}
   125f0:	add	fp, sp, #8
   125f4:	sub	sp, sp, #8
   125f8:	mov	r4, r0
   125fc:	cmp	r0, #0
   12600:	beq	1261c <__assert_fail@plt+0x1520>
   12604:	mov	r0, r4
   12608:	bl	10fb8 <__freading@plt>
   1260c:	cmp	r0, #0
   12610:	ldrbne	r0, [r4, #1]
   12614:	tstne	r0, #1
   12618:	bne	1262c <__assert_fail@plt+0x1530>
   1261c:	mov	r0, r4
   12620:	sub	sp, fp, #8
   12624:	pop	{r4, sl, fp, lr}
   12628:	b	10ebc <fflush@plt>
   1262c:	mov	r0, #1
   12630:	mov	r2, #0
   12634:	mov	r3, #0
   12638:	str	r0, [sp]
   1263c:	mov	r0, r4
   12640:	bl	12670 <__assert_fail@plt+0x1574>
   12644:	b	1261c <__assert_fail@plt+0x1520>
   12648:	push	{r4, r5, r6, sl, fp, lr}
   1264c:	add	fp, sp, #16
   12650:	mov	r4, r0
   12654:	bl	1100c <__errno_location@plt>
   12658:	ldr	r6, [r0]
   1265c:	mov	r5, r0
   12660:	mov	r0, r4
   12664:	bl	10ed4 <free@plt>
   12668:	str	r6, [r5]
   1266c:	pop	{r4, r5, r6, sl, fp, pc}
   12670:	push	{r4, r5, r6, r7, fp, lr}
   12674:	add	fp, sp, #16
   12678:	sub	sp, sp, #8
   1267c:	mov	r4, r0
   12680:	ldr	r0, [r0, #4]
   12684:	mov	r5, r3
   12688:	mov	r6, r2
   1268c:	ldr	r1, [r4, #8]
   12690:	cmp	r1, r0
   12694:	bne	126b0 <__assert_fail@plt+0x15b4>
   12698:	ldrd	r0, [r4, #16]
   1269c:	cmp	r1, r0
   126a0:	bne	126b0 <__assert_fail@plt+0x15b4>
   126a4:	ldr	r0, [r4, #36]	; 0x24
   126a8:	cmp	r0, #0
   126ac:	beq	126c8 <__assert_fail@plt+0x15cc>
   126b0:	mov	r0, r4
   126b4:	mov	r2, r6
   126b8:	mov	r3, r5
   126bc:	sub	sp, fp, #16
   126c0:	pop	{r4, r5, r6, r7, fp, lr}
   126c4:	b	11078 <fseeko64@plt>
   126c8:	ldr	r7, [fp, #8]
   126cc:	mov	r0, r4
   126d0:	bl	1103c <fileno@plt>
   126d4:	mov	r2, r6
   126d8:	mov	r3, r5
   126dc:	str	r7, [sp]
   126e0:	bl	10f58 <lseek64@plt>
   126e4:	and	r2, r0, r1
   126e8:	cmn	r2, #1
   126ec:	beq	12708 <__assert_fail@plt+0x160c>
   126f0:	strd	r0, [r4, #80]	; 0x50
   126f4:	ldr	r0, [r4]
   126f8:	bic	r0, r0, #16
   126fc:	str	r0, [r4]
   12700:	mov	r0, #0
   12704:	b	1270c <__assert_fail@plt+0x1610>
   12708:	mvn	r0, #0
   1270c:	sub	sp, fp, #16
   12710:	pop	{r4, r5, r6, r7, fp, pc}
   12714:	push	{r4, r5, fp, lr}
   12718:	add	fp, sp, #8
   1271c:	cmp	r0, #0
   12720:	beq	127b4 <__assert_fail@plt+0x16b8>
   12724:	mov	r1, #47	; 0x2f
   12728:	mov	r4, r0
   1272c:	bl	11090 <strrchr@plt>
   12730:	cmp	r0, #0
   12734:	mov	r5, r4
   12738:	addne	r5, r0, #1
   1273c:	sub	r0, r5, r4
   12740:	cmp	r0, #7
   12744:	blt	12798 <__assert_fail@plt+0x169c>
   12748:	movw	r1, #24383	; 0x5f3f
   1274c:	sub	r0, r5, #7
   12750:	mov	r2, #7
   12754:	movt	r1, #1
   12758:	bl	110d8 <strncmp@plt>
   1275c:	cmp	r0, #0
   12760:	bne	12798 <__assert_fail@plt+0x169c>
   12764:	movw	r1, #24391	; 0x5f47
   12768:	mov	r0, r5
   1276c:	mov	r2, #3
   12770:	movt	r1, #1
   12774:	bl	110d8 <strncmp@plt>
   12778:	cmp	r0, #0
   1277c:	beq	12788 <__assert_fail@plt+0x168c>
   12780:	mov	r4, r5
   12784:	b	12798 <__assert_fail@plt+0x169c>
   12788:	movw	r0, #28984	; 0x7138
   1278c:	add	r4, r5, #3
   12790:	movt	r0, #2
   12794:	str	r4, [r0]
   12798:	movw	r0, #28988	; 0x713c
   1279c:	movt	r0, #2
   127a0:	str	r4, [r0]
   127a4:	movw	r0, #29032	; 0x7168
   127a8:	movt	r0, #2
   127ac:	str	r4, [r0]
   127b0:	pop	{r4, r5, fp, pc}
   127b4:	movw	r0, #29000	; 0x7148
   127b8:	movt	r0, #2
   127bc:	ldr	r1, [r0]
   127c0:	movw	r0, #24327	; 0x5f07
   127c4:	movt	r0, #1
   127c8:	bl	110cc <fputs@plt>
   127cc:	bl	110e4 <abort@plt>
   127d0:	push	{r4, r5, r6, sl, fp, lr}
   127d4:	add	fp, sp, #16
   127d8:	mov	r4, r0
   127dc:	movw	r0, #29040	; 0x7170
   127e0:	movt	r0, #2
   127e4:	cmp	r4, #0
   127e8:	moveq	r4, r0
   127ec:	bl	1100c <__errno_location@plt>
   127f0:	ldr	r6, [r0]
   127f4:	mov	r5, r0
   127f8:	mov	r0, r4
   127fc:	mov	r1, #48	; 0x30
   12800:	bl	14a5c <__assert_fail@plt+0x3960>
   12804:	str	r6, [r5]
   12808:	pop	{r4, r5, r6, sl, fp, pc}
   1280c:	movw	r1, #29040	; 0x7170
   12810:	cmp	r0, #0
   12814:	movt	r1, #2
   12818:	movne	r1, r0
   1281c:	ldr	r0, [r1]
   12820:	bx	lr
   12824:	movw	r2, #29040	; 0x7170
   12828:	cmp	r0, #0
   1282c:	movt	r2, #2
   12830:	movne	r2, r0
   12834:	str	r1, [r2]
   12838:	bx	lr
   1283c:	movw	r3, #29040	; 0x7170
   12840:	cmp	r0, #0
   12844:	movt	r3, #2
   12848:	movne	r3, r0
   1284c:	ubfx	r0, r1, #5, #3
   12850:	and	r1, r1, #31
   12854:	add	r0, r3, r0, lsl #2
   12858:	ldr	r3, [r0, #8]
   1285c:	eor	r2, r2, r3, lsr r1
   12860:	and	r2, r2, #1
   12864:	eor	r2, r3, r2, lsl r1
   12868:	str	r2, [r0, #8]
   1286c:	mov	r0, #1
   12870:	and	r0, r0, r3, lsr r1
   12874:	bx	lr
   12878:	movw	r2, #29040	; 0x7170
   1287c:	cmp	r0, #0
   12880:	movt	r2, #2
   12884:	movne	r2, r0
   12888:	ldr	r0, [r2, #4]
   1288c:	str	r1, [r2, #4]
   12890:	bx	lr
   12894:	movw	r3, #29040	; 0x7170
   12898:	cmp	r0, #0
   1289c:	movt	r3, #2
   128a0:	movne	r3, r0
   128a4:	cmp	r1, #0
   128a8:	mov	r0, #10
   128ac:	cmpne	r2, #0
   128b0:	str	r0, [r3]
   128b4:	bne	128c4 <__assert_fail@plt+0x17c8>
   128b8:	push	{fp, lr}
   128bc:	mov	fp, sp
   128c0:	bl	110e4 <abort@plt>
   128c4:	str	r1, [r3, #40]	; 0x28
   128c8:	str	r2, [r3, #44]	; 0x2c
   128cc:	bx	lr
   128d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128d4:	add	fp, sp, #28
   128d8:	sub	sp, sp, #20
   128dc:	mov	r7, r0
   128e0:	ldr	r0, [fp, #8]
   128e4:	movw	r5, #29040	; 0x7170
   128e8:	mov	r8, r3
   128ec:	mov	r9, r2
   128f0:	mov	sl, r1
   128f4:	movt	r5, #2
   128f8:	cmp	r0, #0
   128fc:	movne	r5, r0
   12900:	bl	1100c <__errno_location@plt>
   12904:	mov	r4, r0
   12908:	ldm	r5, {r0, r1}
   1290c:	ldr	r2, [r5, #40]	; 0x28
   12910:	ldr	r3, [r5, #44]	; 0x2c
   12914:	add	r5, r5, #8
   12918:	ldr	r6, [r4]
   1291c:	stm	sp, {r0, r1, r5}
   12920:	str	r2, [sp, #12]
   12924:	str	r3, [sp, #16]
   12928:	mov	r0, r7
   1292c:	mov	r1, sl
   12930:	mov	r2, r9
   12934:	mov	r3, r8
   12938:	bl	12948 <__assert_fail@plt+0x184c>
   1293c:	str	r6, [r4]
   12940:	sub	sp, fp, #28
   12944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1294c:	add	fp, sp, #28
   12950:	sub	sp, sp, #156	; 0x9c
   12954:	str	r0, [fp, #-56]	; 0xffffffc8
   12958:	ldr	r0, [fp, #12]
   1295c:	mov	r4, r1
   12960:	str	r3, [sp, #80]	; 0x50
   12964:	str	r2, [fp, #-84]	; 0xffffffac
   12968:	and	r1, r0, #4
   1296c:	str	r1, [sp, #24]
   12970:	and	r1, r0, #1
   12974:	str	r1, [sp, #28]
   12978:	ubfx	r7, r0, #1, #1
   1297c:	bl	10f64 <__ctype_get_mb_cur_max@plt>
   12980:	str	r0, [sp, #32]
   12984:	ldr	r0, [fp, #24]
   12988:	ldr	r9, [fp, #8]
   1298c:	mov	r2, #0
   12990:	mov	r1, #0
   12994:	mov	r5, #0
   12998:	str	r2, [sp, #52]	; 0x34
   1299c:	mov	r2, #1
   129a0:	str	r0, [sp, #72]	; 0x48
   129a4:	ldr	r0, [fp, #20]
   129a8:	str	r0, [sp, #64]	; 0x40
   129ac:	mov	r0, #0
   129b0:	str	r0, [sp, #92]	; 0x5c
   129b4:	mov	r0, #0
   129b8:	str	r0, [fp, #-76]	; 0xffffffb4
   129bc:	mov	r0, #0
   129c0:	cmp	r9, #10
   129c4:	str	r1, [sp, #68]	; 0x44
   129c8:	bhi	139c8 <__assert_fail@plt+0x28cc>
   129cc:	add	r1, pc, #28
   129d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   129d4:	ldr	lr, [sp, #80]	; 0x50
   129d8:	mov	r6, r4
   129dc:	mov	r8, #0
   129e0:	mov	r3, #1
   129e4:	mov	sl, #0
   129e8:	mov	r4, r2
   129ec:	ldr	pc, [r1, r9, lsl #2]
   129f0:	andeq	r2, r1, r0, asr #21
   129f4:	strdeq	r2, [r1], -ip
   129f8:	ldrdeq	r2, [r1], -r0
   129fc:			; <UNDEFINED> instruction: 0x00012ab8
   12a00:	strdeq	r2, [r1], -r0
   12a04:	andeq	r2, r1, r8, asr #22
   12a08:	andeq	r2, r1, r0, ror #21
   12a0c:	andeq	r2, r1, r8, lsr #23
   12a10:	andeq	r2, r1, ip, lsl sl
   12a14:	andeq	r2, r1, ip, lsl sl
   12a18:	andeq	r2, r1, r4, asr #20
   12a1c:	movw	r0, #24473	; 0x5f99
   12a20:	mov	r1, r9
   12a24:	movt	r0, #1
   12a28:	bl	14130 <__assert_fail@plt+0x3034>
   12a2c:	str	r0, [sp, #64]	; 0x40
   12a30:	movw	r0, #24475	; 0x5f9b
   12a34:	mov	r1, r9
   12a38:	movt	r0, #1
   12a3c:	bl	14130 <__assert_fail@plt+0x3034>
   12a40:	str	r0, [sp, #72]	; 0x48
   12a44:	mov	r8, #0
   12a48:	mov	sl, r7
   12a4c:	tst	r7, #1
   12a50:	str	r5, [fp, #-48]	; 0xffffffd0
   12a54:	bne	12a90 <__assert_fail@plt+0x1994>
   12a58:	ldr	r0, [sp, #64]	; 0x40
   12a5c:	ldrb	r0, [r0]
   12a60:	cmp	r0, #0
   12a64:	beq	12a90 <__assert_fail@plt+0x1994>
   12a68:	ldr	r1, [sp, #64]	; 0x40
   12a6c:	mov	r8, #0
   12a70:	add	r1, r1, #1
   12a74:	cmp	r8, r6
   12a78:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12a7c:	strbcc	r0, [r2, r8]
   12a80:	ldrb	r0, [r1, r8]
   12a84:	add	r8, r8, #1
   12a88:	cmp	r0, #0
   12a8c:	bne	12a74 <__assert_fail@plt+0x1978>
   12a90:	ldr	r7, [sp, #72]	; 0x48
   12a94:	mov	r0, r7
   12a98:	bl	10ff4 <strlen@plt>
   12a9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12aa0:	ldr	lr, [sp, #80]	; 0x50
   12aa4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12aa8:	str	r0, [fp, #-76]	; 0xffffffb4
   12aac:	str	r7, [sp, #92]	; 0x5c
   12ab0:	mov	r3, #1
   12ab4:	b	12ba8 <__assert_fail@plt+0x1aac>
   12ab8:	mov	r0, #1
   12abc:	b	12afc <__assert_fail@plt+0x1a00>
   12ac0:	mov	r9, #0
   12ac4:	mov	r8, #0
   12ac8:	mov	r3, r0
   12acc:	b	12ba4 <__assert_fail@plt+0x1aa8>
   12ad0:	tst	r7, #1
   12ad4:	bne	12afc <__assert_fail@plt+0x1a00>
   12ad8:	mov	r3, r0
   12adc:	b	12b24 <__assert_fail@plt+0x1a28>
   12ae0:	mov	r0, #1
   12ae4:	mov	r8, #0
   12ae8:	mov	r9, #5
   12aec:	b	12b5c <__assert_fail@plt+0x1a60>
   12af0:	mov	r3, #1
   12af4:	tst	r7, #1
   12af8:	beq	12b24 <__assert_fail@plt+0x1a28>
   12afc:	mov	r1, #1
   12b00:	mov	r8, #0
   12b04:	mov	r9, #2
   12b08:	mov	r3, r0
   12b0c:	mov	sl, #1
   12b10:	str	r1, [fp, #-76]	; 0xffffffb4
   12b14:	movw	r1, #24475	; 0x5f9b
   12b18:	movt	r1, #1
   12b1c:	str	r1, [sp, #92]	; 0x5c
   12b20:	b	12ba8 <__assert_fail@plt+0x1aac>
   12b24:	cmp	r6, #0
   12b28:	mov	r8, #1
   12b2c:	mov	r9, #2
   12b30:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12b34:	movne	r0, #39	; 0x27
   12b38:	strbne	r0, [r1]
   12b3c:	movw	r0, #24475	; 0x5f9b
   12b40:	movt	r0, #1
   12b44:	b	12b98 <__assert_fail@plt+0x1a9c>
   12b48:	mov	r9, #5
   12b4c:	tst	r7, #1
   12b50:	beq	12b78 <__assert_fail@plt+0x1a7c>
   12b54:	mov	r0, #1
   12b58:	mov	r8, #0
   12b5c:	str	r0, [fp, #-76]	; 0xffffffb4
   12b60:	movw	r0, #24471	; 0x5f97
   12b64:	mov	r3, #1
   12b68:	mov	sl, #1
   12b6c:	movt	r0, #1
   12b70:	str	r0, [sp, #92]	; 0x5c
   12b74:	b	12ba8 <__assert_fail@plt+0x1aac>
   12b78:	cmp	r6, #0
   12b7c:	mov	r8, #1
   12b80:	mov	r3, #1
   12b84:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12b88:	movne	r0, #34	; 0x22
   12b8c:	strbne	r0, [r1]
   12b90:	movw	r0, #24471	; 0x5f97
   12b94:	movt	r0, #1
   12b98:	str	r0, [sp, #92]	; 0x5c
   12b9c:	mov	r0, #1
   12ba0:	str	r0, [fp, #-76]	; 0xffffffb4
   12ba4:	mov	sl, #0
   12ba8:	ldr	r0, [fp, #16]
   12bac:	mov	r7, #0
   12bb0:	str	r9, [fp, #-64]	; 0xffffffc0
   12bb4:	str	sl, [fp, #-72]	; 0xffffffb8
   12bb8:	str	r3, [sp, #84]	; 0x54
   12bbc:	cmp	r0, #0
   12bc0:	movwne	r0, #1
   12bc4:	and	r0, r0, sl
   12bc8:	str	r0, [fp, #-88]	; 0xffffffa8
   12bcc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bd0:	cmp	r0, #0
   12bd4:	movwne	r0, #1
   12bd8:	subs	r2, r9, #2
   12bdc:	and	r1, r0, sl
   12be0:	str	r2, [fp, #-80]	; 0xffffffb0
   12be4:	and	r1, r3, r1
   12be8:	str	r1, [sp, #44]	; 0x2c
   12bec:	clz	r1, r2
   12bf0:	lsr	r1, r1, #5
   12bf4:	and	r1, r1, sl
   12bf8:	str	r1, [sp, #56]	; 0x38
   12bfc:	mov	r1, r2
   12c00:	eor	r2, sl, #1
   12c04:	movwne	r1, #1
   12c08:	str	r2, [sp, #88]	; 0x58
   12c0c:	orr	r2, r1, r2
   12c10:	and	r1, r1, r3
   12c14:	and	r0, r0, r1
   12c18:	str	r2, [sp, #60]	; 0x3c
   12c1c:	str	r1, [fp, #-68]	; 0xffffffbc
   12c20:	str	r0, [fp, #-60]	; 0xffffffc4
   12c24:	eor	r0, r3, #1
   12c28:	str	r0, [sp, #48]	; 0x30
   12c2c:	cmn	lr, #1
   12c30:	beq	12c40 <__assert_fail@plt+0x1b44>
   12c34:	cmp	r7, lr
   12c38:	bne	12c4c <__assert_fail@plt+0x1b50>
   12c3c:	b	137f8 <__assert_fail@plt+0x26fc>
   12c40:	ldrb	r0, [ip, r7]
   12c44:	cmp	r0, #0
   12c48:	beq	13800 <__assert_fail@plt+0x2704>
   12c4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c50:	mov	r9, #0
   12c54:	str	r5, [fp, #-48]	; 0xffffffd0
   12c58:	str	r6, [fp, #-52]	; 0xffffffcc
   12c5c:	cmp	r0, #0
   12c60:	beq	12ca0 <__assert_fail@plt+0x1ba4>
   12c64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c68:	mov	r5, r4
   12c6c:	add	r4, r7, r0
   12c70:	cmp	r0, #2
   12c74:	bcc	12c90 <__assert_fail@plt+0x1b94>
   12c78:	cmn	lr, #1
   12c7c:	bne	12c90 <__assert_fail@plt+0x1b94>
   12c80:	mov	r0, ip
   12c84:	bl	10ff4 <strlen@plt>
   12c88:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c8c:	mov	lr, r0
   12c90:	cmp	r4, lr
   12c94:	bls	12ca8 <__assert_fail@plt+0x1bac>
   12c98:	mov	r6, #0
   12c9c:	b	12ce8 <__assert_fail@plt+0x1bec>
   12ca0:	mov	r6, #0
   12ca4:	b	12cec <__assert_fail@plt+0x1bf0>
   12ca8:	ldr	r1, [sp, #92]	; 0x5c
   12cac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12cb0:	add	r0, ip, r7
   12cb4:	mov	r4, lr
   12cb8:	bl	10f10 <memcmp@plt>
   12cbc:	ldr	r2, [sp, #88]	; 0x58
   12cc0:	cmp	r0, #0
   12cc4:	mov	r1, r0
   12cc8:	movwne	r1, #1
   12ccc:	orr	r1, r1, r2
   12cd0:	tst	r1, #1
   12cd4:	beq	13894 <__assert_fail@plt+0x2798>
   12cd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cdc:	clz	r0, r0
   12ce0:	mov	lr, r4
   12ce4:	lsr	r6, r0, #5
   12ce8:	mov	r4, r5
   12cec:	ldrb	r5, [ip, r7]
   12cf0:	cmp	r5, #126	; 0x7e
   12cf4:	bhi	130bc <__assert_fail@plt+0x1fc0>
   12cf8:	add	r3, pc, #16
   12cfc:	mov	sl, #1
   12d00:	mov	r2, #110	; 0x6e
   12d04:	mov	r0, #97	; 0x61
   12d08:	mov	r1, #0
   12d0c:	ldr	pc, [r3, r5, lsl #2]
   12d10:	andeq	r2, r1, r0, lsr #31
   12d14:	strheq	r3, [r1], -ip
   12d18:	strheq	r3, [r1], -ip
   12d1c:	strheq	r3, [r1], -ip
   12d20:	strheq	r3, [r1], -ip
   12d24:	strheq	r3, [r1], -ip
   12d28:	strheq	r3, [r1], -ip
   12d2c:	andeq	r3, r1, r0, ror #2
   12d30:	andeq	r2, r1, r0, lsl #31
   12d34:	andeq	r2, r1, r8, ror pc
   12d38:	andeq	r2, r1, ip, lsl #31
   12d3c:	andeq	r3, r1, r0, lsl r0
   12d40:	andeq	r2, r1, r0, ror pc
   12d44:	andeq	r2, r1, r8, lsl #31
   12d48:	strheq	r3, [r1], -ip
   12d4c:	strheq	r3, [r1], -ip
   12d50:	strheq	r3, [r1], -ip
   12d54:	strheq	r3, [r1], -ip
   12d58:	strheq	r3, [r1], -ip
   12d5c:	strheq	r3, [r1], -ip
   12d60:	strheq	r3, [r1], -ip
   12d64:	strheq	r3, [r1], -ip
   12d68:	strheq	r3, [r1], -ip
   12d6c:	strheq	r3, [r1], -ip
   12d70:	strheq	r3, [r1], -ip
   12d74:	strheq	r3, [r1], -ip
   12d78:	strheq	r3, [r1], -ip
   12d7c:	strheq	r3, [r1], -ip
   12d80:	strheq	r3, [r1], -ip
   12d84:	strheq	r3, [r1], -ip
   12d88:	strheq	r3, [r1], -ip
   12d8c:	strheq	r3, [r1], -ip
   12d90:	andeq	r3, r1, r0, lsr #2
   12d94:	andeq	r3, r1, r4, lsr #2
   12d98:	andeq	r3, r1, r4, lsr #2
   12d9c:	andeq	r2, r1, r0, lsr #30
   12da0:	andeq	r3, r1, r4, lsr #2
   12da4:	andeq	r2, r1, ip, lsl #30
   12da8:	andeq	r3, r1, r4, lsr #2
   12dac:	andeq	r3, r1, r8, lsl r0
   12db0:	andeq	r3, r1, r4, lsr #2
   12db4:	andeq	r3, r1, r4, lsr #2
   12db8:	andeq	r3, r1, r4, lsr #2
   12dbc:	andeq	r2, r1, ip, lsl #30
   12dc0:	andeq	r2, r1, ip, lsl #30
   12dc4:	andeq	r2, r1, ip, lsl #30
   12dc8:	andeq	r2, r1, ip, lsl #30
   12dcc:	andeq	r2, r1, ip, lsl #30
   12dd0:	andeq	r2, r1, ip, lsl #30
   12dd4:	andeq	r2, r1, ip, lsl #30
   12dd8:	andeq	r2, r1, ip, lsl #30
   12ddc:	andeq	r2, r1, ip, lsl #30
   12de0:	andeq	r2, r1, ip, lsl #30
   12de4:	andeq	r2, r1, ip, lsl #30
   12de8:	andeq	r2, r1, ip, lsl #30
   12dec:	andeq	r2, r1, ip, lsl #30
   12df0:	andeq	r2, r1, ip, lsl #30
   12df4:	andeq	r2, r1, ip, lsl #30
   12df8:	andeq	r2, r1, ip, lsl #30
   12dfc:	andeq	r3, r1, r4, lsr #2
   12e00:	andeq	r3, r1, r4, lsr #2
   12e04:	andeq	r3, r1, r4, lsr #2
   12e08:	andeq	r3, r1, r4, lsr #2
   12e0c:	andeq	r2, r1, r4, ror #31
   12e10:	strheq	r3, [r1], -ip
   12e14:	andeq	r2, r1, ip, lsl #30
   12e18:	andeq	r2, r1, ip, lsl #30
   12e1c:	andeq	r2, r1, ip, lsl #30
   12e20:	andeq	r2, r1, ip, lsl #30
   12e24:	andeq	r2, r1, ip, lsl #30
   12e28:	andeq	r2, r1, ip, lsl #30
   12e2c:	andeq	r2, r1, ip, lsl #30
   12e30:	andeq	r2, r1, ip, lsl #30
   12e34:	andeq	r2, r1, ip, lsl #30
   12e38:	andeq	r2, r1, ip, lsl #30
   12e3c:	andeq	r2, r1, ip, lsl #30
   12e40:	andeq	r2, r1, ip, lsl #30
   12e44:	andeq	r2, r1, ip, lsl #30
   12e48:	andeq	r2, r1, ip, lsl #30
   12e4c:	andeq	r2, r1, ip, lsl #30
   12e50:	andeq	r2, r1, ip, lsl #30
   12e54:	andeq	r2, r1, ip, lsl #30
   12e58:	andeq	r2, r1, ip, lsl #30
   12e5c:	andeq	r2, r1, ip, lsl #30
   12e60:	andeq	r2, r1, ip, lsl #30
   12e64:	andeq	r2, r1, ip, lsl #30
   12e68:	andeq	r2, r1, ip, lsl #30
   12e6c:	andeq	r2, r1, ip, lsl #30
   12e70:	andeq	r2, r1, ip, lsl #30
   12e74:	andeq	r2, r1, ip, lsl #30
   12e78:	andeq	r2, r1, ip, lsl #30
   12e7c:	andeq	r3, r1, r4, lsr #2
   12e80:	andeq	r2, r1, ip, asr #30
   12e84:	andeq	r2, r1, ip, lsl #30
   12e88:	andeq	r3, r1, r4, lsr #2
   12e8c:	andeq	r2, r1, ip, lsl #30
   12e90:	andeq	r3, r1, r4, lsr #2
   12e94:	andeq	r2, r1, ip, lsl #30
   12e98:	andeq	r2, r1, ip, lsl #30
   12e9c:	andeq	r2, r1, ip, lsl #30
   12ea0:	andeq	r2, r1, ip, lsl #30
   12ea4:	andeq	r2, r1, ip, lsl #30
   12ea8:	andeq	r2, r1, ip, lsl #30
   12eac:	andeq	r2, r1, ip, lsl #30
   12eb0:	andeq	r2, r1, ip, lsl #30
   12eb4:	andeq	r2, r1, ip, lsl #30
   12eb8:	andeq	r2, r1, ip, lsl #30
   12ebc:	andeq	r2, r1, ip, lsl #30
   12ec0:	andeq	r2, r1, ip, lsl #30
   12ec4:	andeq	r2, r1, ip, lsl #30
   12ec8:	andeq	r2, r1, ip, lsl #30
   12ecc:	andeq	r2, r1, ip, lsl #30
   12ed0:	andeq	r2, r1, ip, lsl #30
   12ed4:	andeq	r2, r1, ip, lsl #30
   12ed8:	andeq	r2, r1, ip, lsl #30
   12edc:	andeq	r2, r1, ip, lsl #30
   12ee0:	andeq	r2, r1, ip, lsl #30
   12ee4:	andeq	r2, r1, ip, lsl #30
   12ee8:	andeq	r2, r1, ip, lsl #30
   12eec:	andeq	r2, r1, ip, lsl #30
   12ef0:	andeq	r2, r1, ip, lsl #30
   12ef4:	andeq	r2, r1, ip, lsl #30
   12ef8:	andeq	r2, r1, ip, lsl #30
   12efc:	andeq	r2, r1, r0, lsr pc
   12f00:	andeq	r3, r1, r4, lsr #2
   12f04:	andeq	r2, r1, r0, lsr pc
   12f08:	andeq	r2, r1, r0, lsr #30
   12f0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f10:	cmp	r0, #0
   12f14:	beq	13174 <__assert_fail@plt+0x2078>
   12f18:	ldr	r0, [fp, #16]
   12f1c:	b	13178 <__assert_fail@plt+0x207c>
   12f20:	mov	sl, #0
   12f24:	cmp	r7, #0
   12f28:	bne	13390 <__assert_fail@plt+0x2294>
   12f2c:	b	13120 <__assert_fail@plt+0x2024>
   12f30:	mov	sl, #0
   12f34:	cmn	lr, #1
   12f38:	beq	1310c <__assert_fail@plt+0x2010>
   12f3c:	cmp	r7, #0
   12f40:	cmpeq	lr, #1
   12f44:	bne	13390 <__assert_fail@plt+0x2294>
   12f48:	b	13120 <__assert_fail@plt+0x2024>
   12f4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f50:	cmp	r0, #2
   12f54:	bne	13144 <__assert_fail@plt+0x2048>
   12f58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f5c:	tst	r0, #1
   12f60:	bne	138b0 <__assert_fail@plt+0x27b4>
   12f64:	mov	r9, #0
   12f68:	mov	r0, #92	; 0x5c
   12f6c:	b	13158 <__assert_fail@plt+0x205c>
   12f70:	mov	r0, #102	; 0x66
   12f74:	b	13160 <__assert_fail@plt+0x2064>
   12f78:	mov	r2, #116	; 0x74
   12f7c:	b	12f8c <__assert_fail@plt+0x1e90>
   12f80:	mov	r0, #98	; 0x62
   12f84:	b	13160 <__assert_fail@plt+0x2064>
   12f88:	mov	r2, #114	; 0x72
   12f8c:	ldr	r0, [sp, #60]	; 0x3c
   12f90:	tst	r0, #1
   12f94:	mov	r0, r2
   12f98:	bne	13160 <__assert_fail@plt+0x2064>
   12f9c:	b	138b0 <__assert_fail@plt+0x27b4>
   12fa0:	ldr	r0, [sp, #84]	; 0x54
   12fa4:	tst	r0, #1
   12fa8:	beq	1324c <__assert_fail@plt+0x2150>
   12fac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fb0:	tst	r0, #1
   12fb4:	bne	139b8 <__assert_fail@plt+0x28bc>
   12fb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fbc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12fc0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12fc4:	cmp	r0, #2
   12fc8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12fcc:	movwne	r0, #1
   12fd0:	orr	r0, r0, r3
   12fd4:	tst	r0, #1
   12fd8:	beq	136cc <__assert_fail@plt+0x25d0>
   12fdc:	mov	r0, r8
   12fe0:	b	1370c <__assert_fail@plt+0x2610>
   12fe4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fe8:	mov	r9, #0
   12fec:	mov	r5, #63	; 0x3f
   12ff0:	cmp	r0, #5
   12ff4:	beq	13398 <__assert_fail@plt+0x229c>
   12ff8:	cmp	r0, #2
   12ffc:	bne	13458 <__assert_fail@plt+0x235c>
   13000:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13004:	tst	r0, #1
   13008:	beq	1345c <__assert_fail@plt+0x2360>
   1300c:	b	138b0 <__assert_fail@plt+0x27b4>
   13010:	mov	r0, #118	; 0x76
   13014:	b	13160 <__assert_fail@plt+0x2064>
   13018:	mov	r0, #1
   1301c:	mov	r5, #39	; 0x27
   13020:	str	r0, [sp, #52]	; 0x34
   13024:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13028:	cmp	r0, #2
   1302c:	bne	130b4 <__assert_fail@plt+0x1fb8>
   13030:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13034:	tst	r0, #1
   13038:	bne	138b0 <__assert_fail@plt+0x27b4>
   1303c:	ldr	r3, [sp, #68]	; 0x44
   13040:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13044:	mov	r9, #0
   13048:	clz	r1, r2
   1304c:	cmp	r3, #0
   13050:	mov	r0, r3
   13054:	movwne	r0, #1
   13058:	lsr	r1, r1, #5
   1305c:	orrs	r0, r0, r1
   13060:	moveq	r3, r2
   13064:	moveq	r2, r0
   13068:	cmp	r8, r2
   1306c:	str	r3, [sp, #68]	; 0x44
   13070:	str	r2, [fp, #-52]	; 0xffffffcc
   13074:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13078:	movcc	r0, #39	; 0x27
   1307c:	strbcc	r0, [r1, r8]
   13080:	add	r0, r8, #1
   13084:	cmp	r0, r2
   13088:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1308c:	movcc	r1, #92	; 0x5c
   13090:	strbcc	r1, [r3, r0]
   13094:	add	r0, r8, #2
   13098:	add	r8, r8, #3
   1309c:	cmp	r0, r2
   130a0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   130a4:	movcc	r1, #39	; 0x27
   130a8:	strbcc	r1, [r2, r0]
   130ac:	mov	r0, #0
   130b0:	str	r0, [fp, #-48]	; 0xffffffd0
   130b4:	mov	sl, #1
   130b8:	b	12f0c <__assert_fail@plt+0x1e10>
   130bc:	ldr	r0, [sp, #32]
   130c0:	cmp	r0, #1
   130c4:	bne	13270 <__assert_fail@plt+0x2174>
   130c8:	str	lr, [sp, #80]	; 0x50
   130cc:	bl	10fdc <__ctype_b_loc@plt>
   130d0:	ldr	r0, [r0]
   130d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   130d8:	mov	r1, #1
   130dc:	add	r0, r0, r5, lsl #1
   130e0:	ldrb	r0, [r0, #1]
   130e4:	ubfx	sl, r0, #6, #1
   130e8:	ldr	r0, [sp, #48]	; 0x30
   130ec:	mov	r2, r1
   130f0:	cmp	r1, #1
   130f4:	orr	r0, sl, r0
   130f8:	bhi	13464 <__assert_fail@plt+0x2368>
   130fc:	tst	r0, #1
   13100:	beq	13464 <__assert_fail@plt+0x2368>
   13104:	ldr	lr, [sp, #80]	; 0x50
   13108:	b	12f0c <__assert_fail@plt+0x1e10>
   1310c:	cmp	r7, #0
   13110:	bne	1338c <__assert_fail@plt+0x2290>
   13114:	ldrb	r0, [ip, #1]
   13118:	cmp	r0, #0
   1311c:	bne	1338c <__assert_fail@plt+0x2290>
   13120:	mov	r1, #1
   13124:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13128:	cmp	r0, #2
   1312c:	bne	1313c <__assert_fail@plt+0x2040>
   13130:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13134:	tst	r0, #1
   13138:	bne	138b0 <__assert_fail@plt+0x27b4>
   1313c:	mov	sl, r1
   13140:	b	12f0c <__assert_fail@plt+0x1e10>
   13144:	ldr	r1, [sp, #44]	; 0x2c
   13148:	mov	r9, #0
   1314c:	mov	r0, #92	; 0x5c
   13150:	cmp	r1, #0
   13154:	beq	13160 <__assert_fail@plt+0x2064>
   13158:	mov	sl, #0
   1315c:	b	13678 <__assert_fail@plt+0x257c>
   13160:	ldr	r1, [sp, #84]	; 0x54
   13164:	mov	sl, #0
   13168:	mov	r9, #0
   1316c:	tst	r1, #1
   13170:	bne	131ac <__assert_fail@plt+0x20b0>
   13174:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13178:	cmp	r0, #0
   1317c:	mov	r0, r5
   13180:	beq	131a4 <__assert_fail@plt+0x20a8>
   13184:	ldr	r1, [fp, #16]
   13188:	ubfx	r0, r5, #5, #3
   1318c:	mov	r2, #1
   13190:	ldr	r0, [r1, r0, lsl #2]
   13194:	and	r1, r5, #31
   13198:	tst	r0, r2, lsl r1
   1319c:	mov	r0, r5
   131a0:	bne	131ac <__assert_fail@plt+0x20b0>
   131a4:	cmp	r6, #0
   131a8:	beq	13678 <__assert_fail@plt+0x257c>
   131ac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   131b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   131b4:	tst	r1, #1
   131b8:	bne	1388c <__assert_fail@plt+0x2790>
   131bc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   131c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   131c4:	cmp	r1, #2
   131c8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   131cc:	movwne	r1, #1
   131d0:	orr	r1, r1, r5
   131d4:	tst	r1, #1
   131d8:	bne	1321c <__assert_fail@plt+0x2120>
   131dc:	cmp	r8, r6
   131e0:	mov	r5, #1
   131e4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   131e8:	movcc	r1, #39	; 0x27
   131ec:	strbcc	r1, [r2, r8]
   131f0:	add	r1, r8, #1
   131f4:	cmp	r1, r6
   131f8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   131fc:	movcc	r2, #36	; 0x24
   13200:	strbcc	r2, [r3, r1]
   13204:	add	r1, r8, #2
   13208:	add	r8, r8, #3
   1320c:	cmp	r1, r6
   13210:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13214:	movcc	r2, #39	; 0x27
   13218:	strbcc	r2, [r3, r1]
   1321c:	cmp	r8, r6
   13220:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13224:	movcc	r1, #92	; 0x5c
   13228:	strbcc	r1, [r2, r8]
   1322c:	add	r8, r8, #1
   13230:	cmp	r8, r6
   13234:	and	r4, r4, sl
   13238:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1323c:	strbcc	r0, [r1, r8]
   13240:	add	r8, r8, #1
   13244:	add	r7, r7, #1
   13248:	b	12c2c <__assert_fail@plt+0x1b30>
   1324c:	ldr	r0, [sp, #28]
   13250:	mov	sl, #0
   13254:	mov	r9, #0
   13258:	mov	r5, #0
   1325c:	cmp	r0, #0
   13260:	beq	13174 <__assert_fail@plt+0x2078>
   13264:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13268:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1326c:	b	13244 <__assert_fail@plt+0x2148>
   13270:	mov	r0, #0
   13274:	cmn	lr, #1
   13278:	str	r6, [sp, #76]	; 0x4c
   1327c:	str	r4, [sp, #20]
   13280:	str	r0, [fp, #-36]	; 0xffffffdc
   13284:	str	r0, [fp, #-40]	; 0xffffffd8
   13288:	bne	1329c <__assert_fail@plt+0x21a0>
   1328c:	mov	r0, ip
   13290:	bl	10ff4 <strlen@plt>
   13294:	ldr	ip, [fp, #-84]	; 0xffffffac
   13298:	mov	lr, r0
   1329c:	add	r0, ip, r7
   132a0:	mov	sl, #1
   132a4:	mov	r6, #0
   132a8:	sub	r4, fp, #40	; 0x28
   132ac:	str	lr, [sp, #80]	; 0x50
   132b0:	str	r0, [sp, #36]	; 0x24
   132b4:	str	r6, [sp, #40]	; 0x28
   132b8:	add	r6, r6, r7
   132bc:	sub	r0, fp, #44	; 0x2c
   132c0:	mov	r3, r4
   132c4:	add	r1, ip, r6
   132c8:	sub	r2, lr, r6
   132cc:	bl	15398 <__assert_fail@plt+0x429c>
   132d0:	cmp	r0, #0
   132d4:	beq	137e0 <__assert_fail@plt+0x26e4>
   132d8:	cmn	r0, #1
   132dc:	beq	137a0 <__assert_fail@plt+0x26a4>
   132e0:	ldr	lr, [sp, #80]	; 0x50
   132e4:	cmn	r0, #2
   132e8:	beq	137a8 <__assert_fail@plt+0x26ac>
   132ec:	ldr	r2, [sp, #56]	; 0x38
   132f0:	cmp	r0, #2
   132f4:	mov	r1, #0
   132f8:	movwcc	r1, #1
   132fc:	eor	r2, r2, #1
   13300:	orrs	r1, r2, r1
   13304:	bne	13350 <__assert_fail@plt+0x2254>
   13308:	ldr	r1, [sp, #40]	; 0x28
   1330c:	ldr	r2, [sp, #36]	; 0x24
   13310:	add	ip, r2, r1
   13314:	mov	r2, #1
   13318:	ldrb	r3, [ip, r2]
   1331c:	sub	r6, r3, #94	; 0x5e
   13320:	cmp	r6, #30
   13324:	bhi	13338 <__assert_fail@plt+0x223c>
   13328:	mov	r4, #1
   1332c:	mov	r1, #1073741829	; 0x40000005
   13330:	tst	r1, r4, lsl r6
   13334:	bne	138ac <__assert_fail@plt+0x27b0>
   13338:	sub	r3, r3, #91	; 0x5b
   1333c:	cmp	r3, #2
   13340:	bcc	138ac <__assert_fail@plt+0x27b0>
   13344:	add	r2, r2, #1
   13348:	cmp	r2, r0
   1334c:	bcc	13318 <__assert_fail@plt+0x221c>
   13350:	ldr	r6, [sp, #40]	; 0x28
   13354:	add	r6, r0, r6
   13358:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1335c:	bl	10f4c <iswprint@plt>
   13360:	cmp	r0, #0
   13364:	sub	r4, fp, #40	; 0x28
   13368:	movwne	r0, #1
   1336c:	and	sl, sl, r0
   13370:	mov	r0, r4
   13374:	bl	10ef8 <mbsinit@plt>
   13378:	ldr	lr, [sp, #80]	; 0x50
   1337c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13380:	cmp	r0, #0
   13384:	beq	132b4 <__assert_fail@plt+0x21b8>
   13388:	b	137e8 <__assert_fail@plt+0x26ec>
   1338c:	mvn	lr, #0
   13390:	mov	r9, #0
   13394:	b	12f0c <__assert_fail@plt+0x1e10>
   13398:	ldr	r0, [sp, #24]
   1339c:	cmp	r0, #0
   133a0:	beq	13458 <__assert_fail@plt+0x235c>
   133a4:	add	r0, r7, #2
   133a8:	cmp	r0, lr
   133ac:	bcs	13458 <__assert_fail@plt+0x235c>
   133b0:	add	r1, ip, r7
   133b4:	ldrb	r1, [r1, #1]
   133b8:	cmp	r1, #63	; 0x3f
   133bc:	bne	13458 <__assert_fail@plt+0x235c>
   133c0:	ldrb	r5, [ip, r0]
   133c4:	sub	r1, r5, #33	; 0x21
   133c8:	cmp	r1, #29
   133cc:	bhi	13458 <__assert_fail@plt+0x235c>
   133d0:	movw	r3, #20929	; 0x51c1
   133d4:	mov	r2, #1
   133d8:	movt	r3, #14336	; 0x3800
   133dc:	tst	r3, r2, lsl r1
   133e0:	beq	13458 <__assert_fail@plt+0x235c>
   133e4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   133e8:	tst	r1, #1
   133ec:	bne	139c0 <__assert_fail@plt+0x28c4>
   133f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   133f4:	mov	r7, r0
   133f8:	cmp	r8, r1
   133fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13400:	movcc	r1, #63	; 0x3f
   13404:	strbcc	r1, [r2, r8]
   13408:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1340c:	add	r1, r8, #1
   13410:	cmp	r1, r2
   13414:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13418:	movcc	r2, #34	; 0x22
   1341c:	strbcc	r2, [r3, r1]
   13420:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13424:	add	r1, r8, #2
   13428:	cmp	r1, r2
   1342c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13430:	movcc	r2, #34	; 0x22
   13434:	strbcc	r2, [r3, r1]
   13438:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1343c:	add	r1, r8, #3
   13440:	add	r8, r8, #4
   13444:	cmp	r1, r2
   13448:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1344c:	movcc	r2, #63	; 0x3f
   13450:	strbcc	r2, [r3, r1]
   13454:	b	1345c <__assert_fail@plt+0x2360>
   13458:	mov	r5, #63	; 0x3f
   1345c:	mov	sl, #0
   13460:	b	12f0c <__assert_fail@plt+0x1e10>
   13464:	str	r0, [sp, #40]	; 0x28
   13468:	add	r0, r2, r7
   1346c:	str	r6, [sp, #76]	; 0x4c
   13470:	add	r1, r7, #1
   13474:	ldr	lr, [sp, #80]	; 0x50
   13478:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1347c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13480:	mov	r3, #0
   13484:	str	r0, [sp, #36]	; 0x24
   13488:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1348c:	b	13520 <__assert_fail@plt+0x2424>
   13490:	str	r0, [sp, #76]	; 0x4c
   13494:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13498:	cmp	r9, #0
   1349c:	movwne	r9, #1
   134a0:	mvn	r7, r0
   134a4:	orr	r7, r7, r9
   134a8:	tst	r7, #1
   134ac:	bne	134fc <__assert_fail@plt+0x2400>
   134b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   134b4:	cmp	r8, r6
   134b8:	bcs	134d0 <__assert_fail@plt+0x23d4>
   134bc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   134c0:	mov	r2, r4
   134c4:	mov	r4, #39	; 0x27
   134c8:	strb	r4, [r7, r8]
   134cc:	mov	r4, r2
   134d0:	add	r7, r8, #1
   134d4:	cmp	r7, r6
   134d8:	bcs	134f0 <__assert_fail@plt+0x23f4>
   134dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   134e0:	mov	r2, r4
   134e4:	mov	r4, #39	; 0x27
   134e8:	strb	r4, [r0, r7]
   134ec:	mov	r4, r2
   134f0:	add	r8, r8, #2
   134f4:	mov	r0, #0
   134f8:	b	13504 <__assert_fail@plt+0x2408>
   134fc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13500:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13504:	cmp	r8, r6
   13508:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1350c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13510:	strbcc	r5, [r2, r8]
   13514:	add	r8, r8, #1
   13518:	ldrb	r5, [ip, r1]
   1351c:	add	r1, r1, #1
   13520:	ldr	r2, [sp, #40]	; 0x28
   13524:	tst	r2, #1
   13528:	beq	13564 <__assert_fail@plt+0x2468>
   1352c:	ldr	r2, [sp, #76]	; 0x4c
   13530:	str	r0, [fp, #-48]	; 0xffffffd0
   13534:	tst	r2, #1
   13538:	beq	1355c <__assert_fail@plt+0x2460>
   1353c:	cmp	r8, r6
   13540:	bcs	13558 <__assert_fail@plt+0x245c>
   13544:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13548:	mov	r2, r4
   1354c:	mov	r4, #92	; 0x5c
   13550:	strb	r4, [r6, r8]
   13554:	mov	r4, r2
   13558:	add	r8, r8, #1
   1355c:	mov	r0, #0
   13560:	b	13658 <__assert_fail@plt+0x255c>
   13564:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13568:	tst	r2, #1
   1356c:	bne	138b8 <__assert_fail@plt+0x27bc>
   13570:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13574:	cmp	r7, #2
   13578:	movwne	r3, #1
   1357c:	orr	r3, r3, r0
   13580:	tst	r3, #1
   13584:	bne	135e0 <__assert_fail@plt+0x24e4>
   13588:	cmp	r8, r6
   1358c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13590:	movcc	r3, #39	; 0x27
   13594:	strbcc	r3, [r2, r8]
   13598:	add	r3, r8, #1
   1359c:	cmp	r3, r6
   135a0:	bcs	135b8 <__assert_fail@plt+0x24bc>
   135a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135a8:	mov	r7, r4
   135ac:	mov	r4, #36	; 0x24
   135b0:	strb	r4, [r2, r3]
   135b4:	mov	r4, r7
   135b8:	add	r3, r8, #2
   135bc:	cmp	r3, r6
   135c0:	bcs	135d8 <__assert_fail@plt+0x24dc>
   135c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135c8:	mov	r7, r4
   135cc:	mov	r4, #39	; 0x27
   135d0:	strb	r4, [r2, r3]
   135d4:	mov	r4, r7
   135d8:	add	r8, r8, #3
   135dc:	mov	r0, #1
   135e0:	cmp	r8, r6
   135e4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   135e8:	movcc	r3, #92	; 0x5c
   135ec:	strbcc	r3, [r2, r8]
   135f0:	add	r3, r8, #1
   135f4:	cmp	r3, r6
   135f8:	bcs	13618 <__assert_fail@plt+0x251c>
   135fc:	mov	r2, r4
   13600:	and	r7, r5, #192	; 0xc0
   13604:	mov	r4, #48	; 0x30
   13608:	orr	r7, r4, r7, lsr #6
   1360c:	mov	r4, r2
   13610:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13614:	strb	r7, [r2, r3]
   13618:	add	r3, r8, #2
   1361c:	cmp	r3, r6
   13620:	bcs	13640 <__assert_fail@plt+0x2544>
   13624:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13628:	mov	r6, r4
   1362c:	lsr	r7, r5, #3
   13630:	mov	r4, #6
   13634:	bfi	r7, r4, #3, #29
   13638:	mov	r4, r6
   1363c:	strb	r7, [r2, r3]
   13640:	str	r0, [fp, #-48]	; 0xffffffd0
   13644:	ldr	r0, [sp, #76]	; 0x4c
   13648:	mov	r3, #6
   1364c:	add	r8, r8, #3
   13650:	bfi	r5, r3, #3, #29
   13654:	mov	r3, #1
   13658:	ldr	r2, [sp, #36]	; 0x24
   1365c:	and	r9, r3, #1
   13660:	cmp	r2, r1
   13664:	bhi	13490 <__assert_fail@plt+0x2394>
   13668:	cmp	r9, #0
   1366c:	sub	r7, r1, #1
   13670:	mov	r0, r5
   13674:	movwne	r9, #1
   13678:	cmp	r9, #0
   1367c:	bne	136c0 <__assert_fail@plt+0x25c4>
   13680:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13684:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13688:	tst	r5, #1
   1368c:	beq	13230 <__assert_fail@plt+0x2134>
   13690:	cmp	r8, r6
   13694:	mov	r5, #0
   13698:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1369c:	movcc	r1, #39	; 0x27
   136a0:	strbcc	r1, [r2, r8]
   136a4:	add	r1, r8, #1
   136a8:	add	r8, r8, #2
   136ac:	cmp	r1, r6
   136b0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   136b4:	movcc	r2, #39	; 0x27
   136b8:	strbcc	r2, [r3, r1]
   136bc:	b	13230 <__assert_fail@plt+0x2134>
   136c0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   136c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   136c8:	b	13230 <__assert_fail@plt+0x2134>
   136cc:	cmp	r8, r1
   136d0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   136d4:	movcc	r0, #39	; 0x27
   136d8:	strbcc	r0, [r2, r8]
   136dc:	add	r0, r8, #1
   136e0:	cmp	r0, r1
   136e4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   136e8:	movcc	r2, #36	; 0x24
   136ec:	strbcc	r2, [r3, r0]
   136f0:	add	r0, r8, #2
   136f4:	cmp	r0, r1
   136f8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   136fc:	movcc	r2, #39	; 0x27
   13700:	strbcc	r2, [r3, r0]
   13704:	add	r0, r8, #3
   13708:	mov	r3, #1
   1370c:	cmp	r0, r1
   13710:	add	r8, r0, #1
   13714:	str	r3, [fp, #-48]	; 0xffffffd0
   13718:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1371c:	movcc	r1, #92	; 0x5c
   13720:	strbcc	r1, [r2, r0]
   13724:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13728:	cmp	r1, #2
   1372c:	beq	13790 <__assert_fail@plt+0x2694>
   13730:	add	r1, r7, #1
   13734:	mov	sl, #0
   13738:	mov	r9, #1
   1373c:	mov	r5, #48	; 0x30
   13740:	cmp	r1, lr
   13744:	bcs	12f0c <__assert_fail@plt+0x1e10>
   13748:	ldrb	r1, [ip, r1]
   1374c:	sub	r1, r1, #48	; 0x30
   13750:	uxtb	r1, r1
   13754:	cmp	r1, #9
   13758:	bhi	12f0c <__assert_fail@plt+0x1e10>
   1375c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13760:	cmp	r8, r1
   13764:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13768:	movcc	r1, #48	; 0x30
   1376c:	strbcc	r1, [r2, r8]
   13770:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13774:	add	r1, r0, #2
   13778:	add	r8, r0, #3
   1377c:	cmp	r1, r2
   13780:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13784:	movcc	r2, #48	; 0x30
   13788:	strbcc	r2, [r3, r1]
   1378c:	b	12f0c <__assert_fail@plt+0x1e10>
   13790:	mov	r0, #48	; 0x30
   13794:	mov	r9, #1
   13798:	mov	sl, #0
   1379c:	b	131a4 <__assert_fail@plt+0x20a8>
   137a0:	mov	sl, #0
   137a4:	b	137e0 <__assert_fail@plt+0x26e4>
   137a8:	mov	sl, #0
   137ac:	cmp	lr, r6
   137b0:	bls	137e0 <__assert_fail@plt+0x26e4>
   137b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   137b8:	ldr	r6, [sp, #40]	; 0x28
   137bc:	ldr	r0, [sp, #36]	; 0x24
   137c0:	ldrb	r0, [r0, r6]
   137c4:	cmp	r0, #0
   137c8:	beq	137e8 <__assert_fail@plt+0x26ec>
   137cc:	add	r6, r6, #1
   137d0:	add	r0, r7, r6
   137d4:	cmp	r0, lr
   137d8:	bcc	137bc <__assert_fail@plt+0x26c0>
   137dc:	b	137e8 <__assert_fail@plt+0x26ec>
   137e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   137e4:	ldr	r6, [sp, #40]	; 0x28
   137e8:	mov	r1, r6
   137ec:	ldr	r4, [sp, #20]
   137f0:	ldr	r6, [sp, #76]	; 0x4c
   137f4:	b	130e8 <__assert_fail@plt+0x1fec>
   137f8:	mov	lr, r7
   137fc:	b	13804 <__assert_fail@plt+0x2708>
   13800:	mvn	lr, #0
   13804:	ldr	r9, [fp, #-64]	; 0xffffffc0
   13808:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1380c:	eor	r0, r9, #2
   13810:	orr	r0, r0, r8
   13814:	clz	r0, r0
   13818:	lsr	r0, r0, #5
   1381c:	tst	r1, r0
   13820:	bne	1391c <__assert_fail@plt+0x2820>
   13824:	mov	r0, r1
   13828:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1382c:	cmp	r9, #2
   13830:	movwne	r1, #1
   13834:	orr	r0, r0, r1
   13838:	tst	r0, #1
   1383c:	bne	1395c <__assert_fail@plt+0x2860>
   13840:	ldr	r0, [sp, #52]	; 0x34
   13844:	ldr	r1, [sp, #68]	; 0x44
   13848:	str	lr, [sp, #80]	; 0x50
   1384c:	eor	r0, r0, #1
   13850:	tst	r0, #1
   13854:	bne	1395c <__assert_fail@plt+0x2860>
   13858:	tst	r4, #1
   1385c:	bne	13924 <__assert_fail@plt+0x2828>
   13860:	mov	r7, #0
   13864:	cmp	r1, #0
   13868:	beq	13954 <__assert_fail@plt+0x2858>
   1386c:	ldr	r0, [sp, #84]	; 0x54
   13870:	mov	r3, #0
   13874:	cmp	r6, #0
   13878:	mov	r2, #0
   1387c:	mov	r4, r1
   13880:	str	r3, [fp, #-72]	; 0xffffffb8
   13884:	beq	129c0 <__assert_fail@plt+0x18c4>
   13888:	b	1395c <__assert_fail@plt+0x2860>
   1388c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13890:	b	138b8 <__assert_fail@plt+0x27bc>
   13894:	ldr	ip, [fp, #-84]	; 0xffffffac
   13898:	mov	r2, #1
   1389c:	mov	lr, r4
   138a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   138a4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   138a8:	b	138bc <__assert_fail@plt+0x27c0>
   138ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   138b0:	mov	r7, #2
   138b4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   138b8:	ldr	r2, [sp, #84]	; 0x54
   138bc:	mov	r0, #0
   138c0:	ldr	r1, [fp, #12]
   138c4:	tst	r2, #1
   138c8:	mov	r2, r7
   138cc:	mov	r3, lr
   138d0:	str	r0, [sp, #8]
   138d4:	ldr	r0, [sp, #64]	; 0x40
   138d8:	movwne	r2, #4
   138dc:	cmp	r7, #2
   138e0:	movne	r2, r7
   138e4:	str	r2, [sp]
   138e8:	mov	r2, ip
   138ec:	bic	r1, r1, #2
   138f0:	str	r0, [sp, #12]
   138f4:	ldr	r0, [sp, #72]	; 0x48
   138f8:	str	r1, [sp, #4]
   138fc:	mov	r1, r6
   13900:	str	r0, [sp, #16]
   13904:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13908:	bl	12948 <__assert_fail@plt+0x184c>
   1390c:	mov	r8, r0
   13910:	mov	r0, r8
   13914:	sub	sp, fp, #28
   13918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1391c:	mov	r7, #2
   13920:	b	138b8 <__assert_fail@plt+0x27bc>
   13924:	mov	r0, #5
   13928:	ldr	r2, [fp, #-84]	; 0xffffffac
   1392c:	ldr	r3, [sp, #80]	; 0x50
   13930:	str	r0, [sp]
   13934:	ldr	r0, [fp, #12]
   13938:	str	r0, [sp, #4]
   1393c:	ldr	r0, [fp, #16]
   13940:	str	r0, [sp, #8]
   13944:	ldr	r0, [sp, #64]	; 0x40
   13948:	str	r0, [sp, #12]
   1394c:	ldr	r0, [sp, #72]	; 0x48
   13950:	b	13900 <__assert_fail@plt+0x2804>
   13954:	mov	r0, #0
   13958:	str	r0, [fp, #-72]	; 0xffffffb8
   1395c:	ldr	r1, [sp, #92]	; 0x5c
   13960:	cmp	r1, #0
   13964:	beq	139a4 <__assert_fail@plt+0x28a8>
   13968:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1396c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13970:	tst	r0, #1
   13974:	bne	139a8 <__assert_fail@plt+0x28ac>
   13978:	ldrb	r0, [r1]
   1397c:	cmp	r0, #0
   13980:	beq	139a8 <__assert_fail@plt+0x28ac>
   13984:	add	r1, r1, #1
   13988:	cmp	r8, r6
   1398c:	strbcc	r0, [r2, r8]
   13990:	add	r8, r8, #1
   13994:	ldrb	r0, [r1], #1
   13998:	cmp	r0, #0
   1399c:	bne	13988 <__assert_fail@plt+0x288c>
   139a0:	b	139a8 <__assert_fail@plt+0x28ac>
   139a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139a8:	cmp	r8, r6
   139ac:	movcc	r0, #0
   139b0:	strbcc	r0, [r2, r8]
   139b4:	b	13910 <__assert_fail@plt+0x2814>
   139b8:	mov	r2, #1
   139bc:	b	138a0 <__assert_fail@plt+0x27a4>
   139c0:	mov	r7, #5
   139c4:	b	138b4 <__assert_fail@plt+0x27b8>
   139c8:	bl	110e4 <abort@plt>
   139cc:	mov	r3, r2
   139d0:	mov	r2, #0
   139d4:	b	139d8 <__assert_fail@plt+0x28dc>
   139d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139dc:	add	fp, sp, #28
   139e0:	sub	sp, sp, #36	; 0x24
   139e4:	movw	r8, #29040	; 0x7170
   139e8:	cmp	r3, #0
   139ec:	mov	r4, r2
   139f0:	str	r2, [sp, #24]
   139f4:	mov	r5, r1
   139f8:	mov	r6, r0
   139fc:	str	r0, [sp, #20]
   13a00:	movt	r8, #2
   13a04:	movne	r8, r3
   13a08:	bl	1100c <__errno_location@plt>
   13a0c:	str	r0, [sp, #28]
   13a10:	cmp	r4, #0
   13a14:	add	sl, r8, #8
   13a18:	ldm	r8, {r3, r9}
   13a1c:	ldr	r7, [r0]
   13a20:	ldr	r1, [r8, #40]	; 0x28
   13a24:	ldr	r2, [r8, #44]	; 0x2c
   13a28:	mov	r0, #0
   13a2c:	orreq	r9, r9, #1
   13a30:	str	r7, [sp, #32]
   13a34:	mov	r7, r5
   13a38:	stm	sp, {r3, r9, sl}
   13a3c:	str	r1, [sp, #12]
   13a40:	str	r2, [sp, #16]
   13a44:	mov	r1, #0
   13a48:	mov	r2, r6
   13a4c:	mov	r3, r5
   13a50:	bl	12948 <__assert_fail@plt+0x184c>
   13a54:	add	r4, r0, #1
   13a58:	mov	r5, r0
   13a5c:	mov	r0, r4
   13a60:	bl	1473c <__assert_fail@plt+0x3640>
   13a64:	mov	r6, r0
   13a68:	ldr	r0, [r8]
   13a6c:	ldr	r2, [r8, #44]	; 0x2c
   13a70:	ldr	r1, [r8, #40]	; 0x28
   13a74:	mov	r3, r7
   13a78:	stm	sp, {r0, r9, sl}
   13a7c:	str	r2, [sp, #16]
   13a80:	str	r1, [sp, #12]
   13a84:	mov	r0, r6
   13a88:	mov	r1, r4
   13a8c:	ldr	r2, [sp, #20]
   13a90:	bl	12948 <__assert_fail@plt+0x184c>
   13a94:	ldr	r0, [sp, #24]
   13a98:	ldr	r1, [sp, #32]
   13a9c:	ldr	r2, [sp, #28]
   13aa0:	cmp	r0, #0
   13aa4:	str	r1, [r2]
   13aa8:	strne	r5, [r0]
   13aac:	mov	r0, r6
   13ab0:	sub	sp, fp, #28
   13ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ab8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13abc:	add	fp, sp, #24
   13ac0:	movw	r5, #28924	; 0x70fc
   13ac4:	movw	r8, #28920	; 0x70f8
   13ac8:	movt	r5, #2
   13acc:	movt	r8, #2
   13ad0:	ldr	r0, [r5]
   13ad4:	ldr	r4, [r8]
   13ad8:	cmp	r0, #2
   13adc:	blt	13b08 <__assert_fail@plt+0x2a0c>
   13ae0:	add	r7, r4, #12
   13ae4:	mov	r6, #0
   13ae8:	ldr	r0, [r7, r6, lsl #3]
   13aec:	bl	12648 <__assert_fail@plt+0x154c>
   13af0:	ldr	r1, [r5]
   13af4:	add	r2, r6, #2
   13af8:	add	r0, r6, #1
   13afc:	mov	r6, r0
   13b00:	cmp	r2, r1
   13b04:	blt	13ae8 <__assert_fail@plt+0x29ec>
   13b08:	ldr	r0, [r4, #4]
   13b0c:	movw	r7, #29088	; 0x71a0
   13b10:	movt	r7, #2
   13b14:	cmp	r0, r7
   13b18:	beq	13b30 <__assert_fail@plt+0x2a34>
   13b1c:	bl	12648 <__assert_fail@plt+0x154c>
   13b20:	movw	r0, #28928	; 0x7100
   13b24:	mov	r6, #256	; 0x100
   13b28:	movt	r0, #2
   13b2c:	strd	r6, [r0]
   13b30:	movw	r6, #28928	; 0x7100
   13b34:	movt	r6, #2
   13b38:	cmp	r4, r6
   13b3c:	beq	13b4c <__assert_fail@plt+0x2a50>
   13b40:	mov	r0, r4
   13b44:	bl	12648 <__assert_fail@plt+0x154c>
   13b48:	str	r6, [r8]
   13b4c:	mov	r0, #1
   13b50:	str	r0, [r5]
   13b54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b58:	movw	r3, #29040	; 0x7170
   13b5c:	mvn	r2, #0
   13b60:	movt	r3, #2
   13b64:	b	13b68 <__assert_fail@plt+0x2a6c>
   13b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b6c:	add	fp, sp, #28
   13b70:	sub	sp, sp, #44	; 0x2c
   13b74:	mov	r7, r3
   13b78:	str	r2, [sp, #36]	; 0x24
   13b7c:	str	r1, [sp, #32]
   13b80:	mov	r5, r0
   13b84:	bl	1100c <__errno_location@plt>
   13b88:	cmp	r5, #0
   13b8c:	blt	13cf8 <__assert_fail@plt+0x2bfc>
   13b90:	cmn	r5, #-2147483647	; 0x80000001
   13b94:	beq	13cf8 <__assert_fail@plt+0x2bfc>
   13b98:	movw	r8, #28924	; 0x70fc
   13b9c:	movw	r4, #28920	; 0x70f8
   13ba0:	str	r0, [sp, #28]
   13ba4:	ldr	r0, [r0]
   13ba8:	movt	r8, #2
   13bac:	movt	r4, #2
   13bb0:	ldr	r1, [r8]
   13bb4:	ldr	r6, [r4]
   13bb8:	str	r0, [sp, #24]
   13bbc:	cmp	r1, r5
   13bc0:	ble	13bcc <__assert_fail@plt+0x2ad0>
   13bc4:	mov	sl, r6
   13bc8:	b	13c34 <__assert_fail@plt+0x2b38>
   13bcc:	movw	r9, #28928	; 0x7100
   13bd0:	mov	r0, #8
   13bd4:	add	r2, r5, #1
   13bd8:	str	r1, [fp, #-32]	; 0xffffffe0
   13bdc:	mvn	r3, #-2147483648	; 0x80000000
   13be0:	movt	r9, #2
   13be4:	str	r0, [sp]
   13be8:	sub	r2, r2, r1
   13bec:	sub	r1, fp, #32
   13bf0:	subs	r0, r6, r9
   13bf4:	movne	r0, r6
   13bf8:	bl	1486c <__assert_fail@plt+0x3770>
   13bfc:	cmp	r6, r9
   13c00:	mov	sl, r0
   13c04:	str	r0, [r4]
   13c08:	ldrdeq	r0, [r9]
   13c0c:	stmeq	sl, {r0, r1}
   13c10:	ldr	r1, [r8]
   13c14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c18:	add	r0, sl, r1, lsl #3
   13c1c:	sub	r1, r2, r1
   13c20:	lsl	r2, r1, #3
   13c24:	mov	r1, #0
   13c28:	bl	11024 <memset@plt>
   13c2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c30:	str	r0, [r8]
   13c34:	mov	r9, sl
   13c38:	ldr	r6, [r9, r5, lsl #3]!
   13c3c:	ldr	r4, [r9, #4]!
   13c40:	ldm	r7, {r0, r1}
   13c44:	ldr	r2, [r7, #40]	; 0x28
   13c48:	ldr	r3, [r7, #44]	; 0x2c
   13c4c:	orr	r8, r1, #1
   13c50:	add	r1, r7, #8
   13c54:	stm	sp, {r0, r8}
   13c58:	add	r0, sp, #8
   13c5c:	str	r1, [sp, #20]
   13c60:	stm	r0, {r1, r2, r3}
   13c64:	mov	r0, r4
   13c68:	mov	r1, r6
   13c6c:	ldr	r2, [sp, #32]
   13c70:	ldr	r3, [sp, #36]	; 0x24
   13c74:	bl	12948 <__assert_fail@plt+0x184c>
   13c78:	cmp	r6, r0
   13c7c:	bhi	13ce0 <__assert_fail@plt+0x2be4>
   13c80:	add	r6, r0, #1
   13c84:	movw	r0, #29088	; 0x71a0
   13c88:	movt	r0, #2
   13c8c:	str	r6, [sl, r5, lsl #3]
   13c90:	cmp	r4, r0
   13c94:	beq	13ca0 <__assert_fail@plt+0x2ba4>
   13c98:	mov	r0, r4
   13c9c:	bl	12648 <__assert_fail@plt+0x154c>
   13ca0:	mov	r0, r6
   13ca4:	bl	1473c <__assert_fail@plt+0x3640>
   13ca8:	str	r0, [r9]
   13cac:	mov	r4, r0
   13cb0:	add	r3, sp, #8
   13cb4:	ldr	r0, [r7]
   13cb8:	ldr	r1, [r7, #40]	; 0x28
   13cbc:	ldr	r2, [r7, #44]	; 0x2c
   13cc0:	stm	sp, {r0, r8}
   13cc4:	ldr	r0, [sp, #20]
   13cc8:	stm	r3, {r0, r1, r2}
   13ccc:	mov	r0, r4
   13cd0:	mov	r1, r6
   13cd4:	ldr	r2, [sp, #32]
   13cd8:	ldr	r3, [sp, #36]	; 0x24
   13cdc:	bl	12948 <__assert_fail@plt+0x184c>
   13ce0:	ldr	r0, [sp, #28]
   13ce4:	ldr	r1, [sp, #24]
   13ce8:	str	r1, [r0]
   13cec:	mov	r0, r4
   13cf0:	sub	sp, fp, #28
   13cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf8:	bl	110e4 <abort@plt>
   13cfc:	movw	r3, #29040	; 0x7170
   13d00:	movt	r3, #2
   13d04:	b	13b68 <__assert_fail@plt+0x2a6c>
   13d08:	movw	r3, #29040	; 0x7170
   13d0c:	mov	r1, r0
   13d10:	mov	r0, #0
   13d14:	mvn	r2, #0
   13d18:	movt	r3, #2
   13d1c:	b	13b68 <__assert_fail@plt+0x2a6c>
   13d20:	movw	r3, #29040	; 0x7170
   13d24:	mov	r2, r1
   13d28:	mov	r1, r0
   13d2c:	mov	r0, #0
   13d30:	movt	r3, #2
   13d34:	b	13b68 <__assert_fail@plt+0x2a6c>
   13d38:	push	{fp, lr}
   13d3c:	mov	fp, sp
   13d40:	sub	sp, sp, #48	; 0x30
   13d44:	vmov.i32	q8, #0	; 0x00000000
   13d48:	mov	ip, #32
   13d4c:	mov	r3, sp
   13d50:	mov	lr, r2
   13d54:	cmp	r1, #10
   13d58:	add	r2, r3, #16
   13d5c:	vst1.64	{d16-d17}, [r3], ip
   13d60:	vst1.64	{d16-d17}, [r3]
   13d64:	vst1.64	{d16-d17}, [r2]
   13d68:	beq	13d88 <__assert_fail@plt+0x2c8c>
   13d6c:	str	r1, [sp]
   13d70:	mov	r3, sp
   13d74:	mov	r1, lr
   13d78:	mvn	r2, #0
   13d7c:	bl	13b68 <__assert_fail@plt+0x2a6c>
   13d80:	mov	sp, fp
   13d84:	pop	{fp, pc}
   13d88:	bl	110e4 <abort@plt>
   13d8c:	push	{r4, sl, fp, lr}
   13d90:	add	fp, sp, #8
   13d94:	sub	sp, sp, #48	; 0x30
   13d98:	mov	ip, r3
   13d9c:	mov	r3, sp
   13da0:	vmov.i32	q8, #0	; 0x00000000
   13da4:	mov	lr, #32
   13da8:	cmp	r1, #10
   13dac:	add	r4, r3, #16
   13db0:	vst1.64	{d16-d17}, [r3], lr
   13db4:	vst1.64	{d16-d17}, [r3]
   13db8:	vst1.64	{d16-d17}, [r4]
   13dbc:	beq	13ddc <__assert_fail@plt+0x2ce0>
   13dc0:	str	r1, [sp]
   13dc4:	mov	r1, r2
   13dc8:	mov	r3, sp
   13dcc:	mov	r2, ip
   13dd0:	bl	13b68 <__assert_fail@plt+0x2a6c>
   13dd4:	sub	sp, fp, #8
   13dd8:	pop	{r4, sl, fp, pc}
   13ddc:	bl	110e4 <abort@plt>
   13de0:	mov	r2, r1
   13de4:	mov	r1, r0
   13de8:	mov	r0, #0
   13dec:	b	13d38 <__assert_fail@plt+0x2c3c>
   13df0:	mov	r3, r2
   13df4:	mov	r2, r1
   13df8:	mov	r1, r0
   13dfc:	mov	r0, #0
   13e00:	b	13d8c <__assert_fail@plt+0x2c90>
   13e04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e08:	add	fp, sp, #24
   13e0c:	sub	sp, sp, #48	; 0x30
   13e10:	movw	r8, #29040	; 0x7170
   13e14:	mov	lr, r0
   13e18:	mov	r3, sp
   13e1c:	mov	ip, r1
   13e20:	movt	r8, #2
   13e24:	mov	r1, r3
   13e28:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13e2c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13e30:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13e34:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13e38:	ubfx	r0, r2, #5, #3
   13e3c:	and	r2, r2, #31
   13e40:	mov	r4, #1
   13e44:	add	r0, r3, r0, lsl #2
   13e48:	ldr	r1, [r0, #8]
   13e4c:	bic	r4, r4, r1, lsr r2
   13e50:	eor	r1, r1, r4, lsl r2
   13e54:	mov	r2, ip
   13e58:	str	r1, [r0, #8]
   13e5c:	mov	r0, #0
   13e60:	mov	r1, lr
   13e64:	bl	13b68 <__assert_fail@plt+0x2a6c>
   13e68:	sub	sp, fp, #24
   13e6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e74:	add	fp, sp, #24
   13e78:	sub	sp, sp, #48	; 0x30
   13e7c:	movw	lr, #29040	; 0x7170
   13e80:	mov	ip, r0
   13e84:	mov	r3, sp
   13e88:	movt	lr, #2
   13e8c:	mov	r2, r3
   13e90:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13e94:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13e98:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13e9c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13ea0:	ubfx	r0, r1, #5, #3
   13ea4:	and	r1, r1, #31
   13ea8:	mov	r7, #1
   13eac:	add	r0, r3, r0, lsl #2
   13eb0:	ldr	r2, [r0, #8]
   13eb4:	bic	r7, r7, r2, lsr r1
   13eb8:	eor	r1, r2, r7, lsl r1
   13ebc:	mvn	r2, #0
   13ec0:	str	r1, [r0, #8]
   13ec4:	mov	r0, #0
   13ec8:	mov	r1, ip
   13ecc:	bl	13b68 <__assert_fail@plt+0x2a6c>
   13ed0:	sub	sp, fp, #24
   13ed4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ed8:	push	{r4, r5, r6, r7, fp, lr}
   13edc:	add	fp, sp, #16
   13ee0:	sub	sp, sp, #48	; 0x30
   13ee4:	movw	lr, #29040	; 0x7170
   13ee8:	mov	ip, r0
   13eec:	mov	r3, sp
   13ef0:	movt	lr, #2
   13ef4:	mov	r2, r3
   13ef8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13efc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13f00:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13f04:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13f08:	mov	r1, ip
   13f0c:	mvn	r2, #0
   13f10:	ldr	r0, [sp, #12]
   13f14:	orr	r0, r0, #67108864	; 0x4000000
   13f18:	str	r0, [sp, #12]
   13f1c:	mov	r0, #0
   13f20:	bl	13b68 <__assert_fail@plt+0x2a6c>
   13f24:	sub	sp, fp, #16
   13f28:	pop	{r4, r5, r6, r7, fp, pc}
   13f2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f30:	add	fp, sp, #24
   13f34:	sub	sp, sp, #48	; 0x30
   13f38:	movw	r8, #29040	; 0x7170
   13f3c:	mov	ip, r1
   13f40:	mov	lr, r0
   13f44:	mov	r3, sp
   13f48:	movt	r8, #2
   13f4c:	mov	r2, r3
   13f50:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13f54:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13f58:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13f5c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13f60:	mov	r1, lr
   13f64:	mov	r2, ip
   13f68:	ldr	r0, [sp, #12]
   13f6c:	orr	r0, r0, #67108864	; 0x4000000
   13f70:	str	r0, [sp, #12]
   13f74:	mov	r0, #0
   13f78:	bl	13b68 <__assert_fail@plt+0x2a6c>
   13f7c:	sub	sp, fp, #24
   13f80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f88:	add	fp, sp, #24
   13f8c:	sub	sp, sp, #96	; 0x60
   13f90:	mov	lr, sp
   13f94:	vmov.i32	q8, #0	; 0x00000000
   13f98:	mov	ip, r2
   13f9c:	cmp	r1, #10
   13fa0:	add	r3, lr, #16
   13fa4:	mov	r2, lr
   13fa8:	vst1.64	{d16-d17}, [r3]
   13fac:	mov	r3, #28
   13fb0:	vst1.64	{d16-d17}, [r2], r3
   13fb4:	vst1.32	{d16-d17}, [r2]
   13fb8:	beq	13ff8 <__assert_fail@plt+0x2efc>
   13fbc:	str	r1, [sp, #48]	; 0x30
   13fc0:	add	r3, sp, #48	; 0x30
   13fc4:	ldm	lr!, {r2, r4, r5, r6, r7}
   13fc8:	add	r1, r3, #4
   13fcc:	stmia	r1!, {r2, r4, r5, r6, r7}
   13fd0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13fd4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13fd8:	mvn	r2, #0
   13fdc:	ldr	r1, [sp, #60]	; 0x3c
   13fe0:	orr	r1, r1, #67108864	; 0x4000000
   13fe4:	str	r1, [sp, #60]	; 0x3c
   13fe8:	mov	r1, ip
   13fec:	bl	13b68 <__assert_fail@plt+0x2a6c>
   13ff0:	sub	sp, fp, #24
   13ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ff8:	bl	110e4 <abort@plt>
   13ffc:	push	{fp, lr}
   14000:	mov	fp, sp
   14004:	sub	sp, sp, #8
   14008:	mvn	ip, #0
   1400c:	str	ip, [sp]
   14010:	bl	1401c <__assert_fail@plt+0x2f20>
   14014:	mov	sp, fp
   14018:	pop	{fp, pc}
   1401c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14020:	add	fp, sp, #24
   14024:	sub	sp, sp, #48	; 0x30
   14028:	movw	ip, #29040	; 0x7170
   1402c:	mov	lr, r3
   14030:	mov	r3, sp
   14034:	cmp	r1, #0
   14038:	movt	ip, #2
   1403c:	cmpne	r2, #0
   14040:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14044:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14048:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1404c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14050:	mov	r3, #10
   14054:	str	r3, [sp]
   14058:	bne	14060 <__assert_fail@plt+0x2f64>
   1405c:	bl	110e4 <abort@plt>
   14060:	ldr	ip, [fp, #8]
   14064:	str	r2, [sp, #44]	; 0x2c
   14068:	str	r1, [sp, #40]	; 0x28
   1406c:	mov	r3, sp
   14070:	mov	r1, lr
   14074:	mov	r2, ip
   14078:	bl	13b68 <__assert_fail@plt+0x2a6c>
   1407c:	sub	sp, fp, #24
   14080:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14084:	push	{fp, lr}
   14088:	mov	fp, sp
   1408c:	sub	sp, sp, #8
   14090:	mov	r3, r2
   14094:	mov	r2, r1
   14098:	mov	r1, r0
   1409c:	mvn	r0, #0
   140a0:	str	r0, [sp]
   140a4:	mov	r0, #0
   140a8:	bl	1401c <__assert_fail@plt+0x2f20>
   140ac:	mov	sp, fp
   140b0:	pop	{fp, pc}
   140b4:	push	{fp, lr}
   140b8:	mov	fp, sp
   140bc:	sub	sp, sp, #8
   140c0:	mov	ip, r2
   140c4:	mov	r2, r1
   140c8:	mov	r1, r0
   140cc:	str	r3, [sp]
   140d0:	mov	r0, #0
   140d4:	mov	r3, ip
   140d8:	bl	1401c <__assert_fail@plt+0x2f20>
   140dc:	mov	sp, fp
   140e0:	pop	{fp, pc}
   140e4:	movw	r3, #28936	; 0x7108
   140e8:	movt	r3, #2
   140ec:	b	13b68 <__assert_fail@plt+0x2a6c>
   140f0:	movw	r3, #28936	; 0x7108
   140f4:	mov	r2, r1
   140f8:	mov	r1, r0
   140fc:	mov	r0, #0
   14100:	movt	r3, #2
   14104:	b	13b68 <__assert_fail@plt+0x2a6c>
   14108:	movw	r3, #28936	; 0x7108
   1410c:	mvn	r2, #0
   14110:	movt	r3, #2
   14114:	b	13b68 <__assert_fail@plt+0x2a6c>
   14118:	movw	r3, #28936	; 0x7108
   1411c:	mov	r1, r0
   14120:	mov	r0, #0
   14124:	mvn	r2, #0
   14128:	movt	r3, #2
   1412c:	b	13b68 <__assert_fail@plt+0x2a6c>
   14130:	push	{r4, r5, fp, lr}
   14134:	add	fp, sp, #8
   14138:	mov	r5, r0
   1413c:	mov	r4, r1
   14140:	mov	r0, #0
   14144:	mov	r2, #5
   14148:	mov	r1, r5
   1414c:	bl	10f28 <dcgettext@plt>
   14150:	cmp	r0, r5
   14154:	popne	{r4, r5, fp, pc}
   14158:	bl	15360 <__assert_fail@plt+0x4264>
   1415c:	ldrb	r1, [r0]
   14160:	and	r1, r1, #223	; 0xdf
   14164:	cmp	r1, #71	; 0x47
   14168:	beq	141d0 <__assert_fail@plt+0x30d4>
   1416c:	cmp	r1, #85	; 0x55
   14170:	bne	141f4 <__assert_fail@plt+0x30f8>
   14174:	ldrb	r1, [r0, #1]
   14178:	and	r1, r1, #223	; 0xdf
   1417c:	cmp	r1, #84	; 0x54
   14180:	bne	141f4 <__assert_fail@plt+0x30f8>
   14184:	ldrb	r1, [r0, #2]
   14188:	and	r1, r1, #223	; 0xdf
   1418c:	cmp	r1, #70	; 0x46
   14190:	ldrbeq	r1, [r0, #3]
   14194:	cmpeq	r1, #45	; 0x2d
   14198:	bne	141f4 <__assert_fail@plt+0x30f8>
   1419c:	ldrb	r1, [r0, #4]
   141a0:	cmp	r1, #56	; 0x38
   141a4:	ldrbeq	r0, [r0, #5]
   141a8:	cmpeq	r0, #0
   141ac:	bne	141f4 <__assert_fail@plt+0x30f8>
   141b0:	ldrb	r1, [r5]
   141b4:	movw	r2, #24477	; 0x5f9d
   141b8:	movw	r0, #24481	; 0x5fa1
   141bc:	movt	r2, #1
   141c0:	movt	r0, #1
   141c4:	cmp	r1, #96	; 0x60
   141c8:	moveq	r0, r2
   141cc:	pop	{r4, r5, fp, pc}
   141d0:	ldrb	r1, [r0, #1]
   141d4:	and	r1, r1, #223	; 0xdf
   141d8:	cmp	r1, #66	; 0x42
   141dc:	bne	141f4 <__assert_fail@plt+0x30f8>
   141e0:	ldrb	r1, [r0, #2]
   141e4:	cmp	r1, #49	; 0x31
   141e8:	ldrbeq	r1, [r0, #3]
   141ec:	cmpeq	r1, #56	; 0x38
   141f0:	beq	14210 <__assert_fail@plt+0x3114>
   141f4:	movw	r1, #24471	; 0x5f97
   141f8:	movw	r0, #24475	; 0x5f9b
   141fc:	cmp	r4, #9
   14200:	movt	r1, #1
   14204:	movt	r0, #1
   14208:	moveq	r0, r1
   1420c:	pop	{r4, r5, fp, pc}
   14210:	ldrb	r1, [r0, #4]
   14214:	cmp	r1, #48	; 0x30
   14218:	ldrbeq	r1, [r0, #5]
   1421c:	cmpeq	r1, #51	; 0x33
   14220:	bne	141f4 <__assert_fail@plt+0x30f8>
   14224:	ldrb	r1, [r0, #6]
   14228:	cmp	r1, #48	; 0x30
   1422c:	ldrbeq	r0, [r0, #7]
   14230:	cmpeq	r0, #0
   14234:	bne	141f4 <__assert_fail@plt+0x30f8>
   14238:	ldrb	r1, [r5]
   1423c:	movw	r2, #24485	; 0x5fa5
   14240:	movw	r0, #24489	; 0x5fa9
   14244:	movt	r2, #1
   14248:	movt	r0, #1
   1424c:	b	141c4 <__assert_fail@plt+0x30c8>
   14250:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14254:	add	fp, sp, #24
   14258:	sub	sp, sp, #32
   1425c:	ldr	r6, [fp, #12]
   14260:	ldr	r7, [fp, #8]
   14264:	mov	r4, r2
   14268:	mov	r8, r0
   1426c:	cmp	r1, #0
   14270:	beq	14298 <__assert_fail@plt+0x319c>
   14274:	movw	r2, #24576	; 0x6000
   14278:	mov	r5, r1
   1427c:	str	r3, [sp, #4]
   14280:	str	r4, [sp]
   14284:	mov	r0, r8
   14288:	mov	r1, #1
   1428c:	movt	r2, #1
   14290:	mov	r3, r5
   14294:	b	142b0 <__assert_fail@plt+0x31b4>
   14298:	movw	r2, #24588	; 0x600c
   1429c:	str	r3, [sp]
   142a0:	mov	r0, r8
   142a4:	mov	r1, #1
   142a8:	mov	r3, r4
   142ac:	movt	r2, #1
   142b0:	bl	11048 <__fprintf_chk@plt>
   142b4:	movw	r1, #24595	; 0x6013
   142b8:	mov	r0, #0
   142bc:	mov	r2, #5
   142c0:	movt	r1, #1
   142c4:	bl	10f28 <dcgettext@plt>
   142c8:	movw	r2, #25313	; 0x62e1
   142cc:	mov	r3, r0
   142d0:	movw	r0, #2022	; 0x7e6
   142d4:	mov	r1, #1
   142d8:	str	r0, [sp]
   142dc:	movt	r2, #1
   142e0:	mov	r0, r8
   142e4:	bl	11048 <__fprintf_chk@plt>
   142e8:	movw	r4, #23767	; 0x5cd7
   142ec:	mov	r1, r8
   142f0:	movt	r4, #1
   142f4:	mov	r0, r4
   142f8:	bl	10e8c <fputs_unlocked@plt>
   142fc:	movw	r1, #24599	; 0x6017
   14300:	mov	r0, #0
   14304:	mov	r2, #5
   14308:	movt	r1, #1
   1430c:	bl	10f28 <dcgettext@plt>
   14310:	movw	r3, #24770	; 0x60c2
   14314:	mov	r2, r0
   14318:	mov	r0, r8
   1431c:	mov	r1, #1
   14320:	movt	r3, #1
   14324:	bl	11048 <__fprintf_chk@plt>
   14328:	mov	r0, r4
   1432c:	mov	r1, r8
   14330:	bl	10e8c <fputs_unlocked@plt>
   14334:	cmp	r6, #9
   14338:	bhi	1439c <__assert_fail@plt+0x32a0>
   1433c:	add	r0, pc, #0
   14340:	ldr	pc, [r0, r6, lsl #2]
   14344:	andeq	r4, r1, r4, ror r5
   14348:	andeq	r4, r1, ip, ror #6
   1434c:	andeq	r4, r1, r8, lsr #7
   14350:	ldrdeq	r4, [r1], -r0
   14354:	strdeq	r4, [r1], -r8
   14358:	andeq	r4, r1, r0, lsr #8
   1435c:	andeq	r4, r1, r8, asr #8
   14360:	andeq	r4, r1, r0, lsl #9
   14364:	andeq	r4, r1, r0, lsr #10
   14368:	andeq	r4, r1, r8, asr #9
   1436c:	movw	r1, #24804	; 0x60e4
   14370:	mov	r0, #0
   14374:	mov	r2, #5
   14378:	movt	r1, #1
   1437c:	bl	10f28 <dcgettext@plt>
   14380:	ldr	r3, [r7]
   14384:	mov	r2, r0
   14388:	mov	r0, r8
   1438c:	mov	r1, #1
   14390:	sub	sp, fp, #24
   14394:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14398:	b	11048 <__fprintf_chk@plt>
   1439c:	movw	r1, #25123	; 0x6223
   143a0:	movt	r1, #1
   143a4:	b	144d0 <__assert_fail@plt+0x33d4>
   143a8:	movw	r1, #24820	; 0x60f4
   143ac:	mov	r0, #0
   143b0:	mov	r2, #5
   143b4:	movt	r1, #1
   143b8:	bl	10f28 <dcgettext@plt>
   143bc:	mov	r2, r0
   143c0:	ldr	r3, [r7]
   143c4:	ldr	r0, [r7, #4]
   143c8:	str	r0, [sp]
   143cc:	b	144bc <__assert_fail@plt+0x33c0>
   143d0:	movw	r1, #24843	; 0x610b
   143d4:	mov	r0, #0
   143d8:	mov	r2, #5
   143dc:	movt	r1, #1
   143e0:	bl	10f28 <dcgettext@plt>
   143e4:	ldr	r3, [r7]
   143e8:	mov	r2, r0
   143ec:	ldmib	r7, {r0, r1}
   143f0:	stm	sp, {r0, r1}
   143f4:	b	144bc <__assert_fail@plt+0x33c0>
   143f8:	movw	r1, #24871	; 0x6127
   143fc:	mov	r0, #0
   14400:	mov	r2, #5
   14404:	movt	r1, #1
   14408:	bl	10f28 <dcgettext@plt>
   1440c:	ldr	r3, [r7]
   14410:	mov	r2, r0
   14414:	ldmib	r7, {r0, r1, r7}
   14418:	stm	sp, {r0, r1, r7}
   1441c:	b	144bc <__assert_fail@plt+0x33c0>
   14420:	movw	r1, #24903	; 0x6147
   14424:	mov	r0, #0
   14428:	mov	r2, #5
   1442c:	movt	r1, #1
   14430:	bl	10f28 <dcgettext@plt>
   14434:	ldr	r3, [r7]
   14438:	mov	r2, r0
   1443c:	ldmib	r7, {r0, r1, r6, r7}
   14440:	stm	sp, {r0, r1, r6, r7}
   14444:	b	144bc <__assert_fail@plt+0x33c0>
   14448:	movw	r1, #24939	; 0x616b
   1444c:	mov	r0, #0
   14450:	mov	r2, #5
   14454:	movt	r1, #1
   14458:	bl	10f28 <dcgettext@plt>
   1445c:	ldr	r3, [r7]
   14460:	mov	r2, r0
   14464:	ldmib	r7, {r0, r1, r6}
   14468:	ldr	r5, [r7, #16]
   1446c:	ldr	r7, [r7, #20]
   14470:	stm	sp, {r0, r1, r6}
   14474:	str	r5, [sp, #12]
   14478:	str	r7, [sp, #16]
   1447c:	b	144bc <__assert_fail@plt+0x33c0>
   14480:	movw	r1, #24979	; 0x6193
   14484:	mov	r0, #0
   14488:	mov	r2, #5
   1448c:	movt	r1, #1
   14490:	bl	10f28 <dcgettext@plt>
   14494:	ldr	r3, [r7]
   14498:	mov	r2, r0
   1449c:	ldmib	r7, {r0, r1, r6}
   144a0:	ldr	r5, [r7, #16]
   144a4:	ldr	r4, [r7, #20]
   144a8:	ldr	r7, [r7, #24]
   144ac:	stm	sp, {r0, r1, r6}
   144b0:	str	r5, [sp, #12]
   144b4:	str	r4, [sp, #16]
   144b8:	str	r7, [sp, #20]
   144bc:	mov	r0, r8
   144c0:	mov	r1, #1
   144c4:	b	14570 <__assert_fail@plt+0x3474>
   144c8:	movw	r1, #25071	; 0x61ef
   144cc:	movt	r1, #1
   144d0:	mov	r0, #0
   144d4:	mov	r2, #5
   144d8:	bl	10f28 <dcgettext@plt>
   144dc:	mov	ip, r0
   144e0:	ldr	r3, [r7]
   144e4:	ldr	r0, [r7, #4]
   144e8:	ldr	r1, [r7, #8]
   144ec:	ldr	r6, [r7, #12]
   144f0:	ldr	r5, [r7, #16]
   144f4:	ldr	r4, [r7, #20]
   144f8:	ldr	r2, [r7, #24]
   144fc:	ldr	lr, [r7, #28]
   14500:	ldr	r7, [r7, #32]
   14504:	stm	sp, {r0, r1, r6}
   14508:	str	r5, [sp, #12]
   1450c:	str	r4, [sp, #16]
   14510:	str	r2, [sp, #20]
   14514:	str	lr, [sp, #24]
   14518:	str	r7, [sp, #28]
   1451c:	b	14564 <__assert_fail@plt+0x3468>
   14520:	movw	r1, #25023	; 0x61bf
   14524:	mov	r0, #0
   14528:	mov	r2, #5
   1452c:	movt	r1, #1
   14530:	bl	10f28 <dcgettext@plt>
   14534:	mov	ip, r0
   14538:	ldr	r3, [r7]
   1453c:	ldmib	r7, {r0, r1, r6}
   14540:	ldr	r5, [r7, #16]
   14544:	ldr	r4, [r7, #20]
   14548:	ldr	r2, [r7, #24]
   1454c:	ldr	r7, [r7, #28]
   14550:	stm	sp, {r0, r1, r6}
   14554:	str	r5, [sp, #12]
   14558:	str	r4, [sp, #16]
   1455c:	str	r2, [sp, #20]
   14560:	str	r7, [sp, #24]
   14564:	mov	r0, r8
   14568:	mov	r1, #1
   1456c:	mov	r2, ip
   14570:	bl	11048 <__fprintf_chk@plt>
   14574:	sub	sp, fp, #24
   14578:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1457c:	push	{r4, sl, fp, lr}
   14580:	add	fp, sp, #8
   14584:	sub	sp, sp, #8
   14588:	ldr	ip, [fp, #8]
   1458c:	mov	lr, #0
   14590:	ldr	r4, [ip, lr, lsl #2]
   14594:	add	lr, lr, #1
   14598:	cmp	r4, #0
   1459c:	bne	14590 <__assert_fail@plt+0x3494>
   145a0:	sub	r4, lr, #1
   145a4:	str	ip, [sp]
   145a8:	str	r4, [sp, #4]
   145ac:	bl	14250 <__assert_fail@plt+0x3154>
   145b0:	sub	sp, fp, #8
   145b4:	pop	{r4, sl, fp, pc}
   145b8:	push	{r4, r5, fp, lr}
   145bc:	add	fp, sp, #8
   145c0:	sub	sp, sp, #48	; 0x30
   145c4:	ldr	r4, [fp, #8]
   145c8:	mov	ip, #0
   145cc:	add	lr, sp, #8
   145d0:	ldr	r5, [r4]
   145d4:	cmp	r5, #0
   145d8:	str	r5, [lr, ip, lsl #2]
   145dc:	beq	145f0 <__assert_fail@plt+0x34f4>
   145e0:	add	ip, ip, #1
   145e4:	add	r4, r4, #4
   145e8:	cmp	ip, #10
   145ec:	bcc	145d0 <__assert_fail@plt+0x34d4>
   145f0:	str	lr, [sp]
   145f4:	str	ip, [sp, #4]
   145f8:	bl	14250 <__assert_fail@plt+0x3154>
   145fc:	sub	sp, fp, #8
   14600:	pop	{r4, r5, fp, pc}
   14604:	push	{fp, lr}
   14608:	mov	fp, sp
   1460c:	sub	sp, sp, #8
   14610:	add	ip, fp, #8
   14614:	str	ip, [sp, #4]
   14618:	str	ip, [sp]
   1461c:	bl	145b8 <__assert_fail@plt+0x34bc>
   14620:	mov	sp, fp
   14624:	pop	{fp, pc}
   14628:	push	{fp, lr}
   1462c:	mov	fp, sp
   14630:	movw	r0, #29012	; 0x7154
   14634:	movt	r0, #2
   14638:	ldr	r1, [r0]
   1463c:	movw	r0, #23767	; 0x5cd7
   14640:	movt	r0, #1
   14644:	bl	10e8c <fputs_unlocked@plt>
   14648:	movw	r1, #25183	; 0x625f
   1464c:	mov	r0, #0
   14650:	mov	r2, #5
   14654:	movt	r1, #1
   14658:	bl	10f28 <dcgettext@plt>
   1465c:	movw	r2, #25203	; 0x6273
   14660:	mov	r1, r0
   14664:	mov	r0, #1
   14668:	movt	r2, #1
   1466c:	bl	11030 <__printf_chk@plt>
   14670:	movw	r1, #25225	; 0x6289
   14674:	mov	r0, #0
   14678:	mov	r2, #5
   1467c:	movt	r1, #1
   14680:	bl	10f28 <dcgettext@plt>
   14684:	movw	r2, #23277	; 0x5aed
   14688:	movw	r3, #23576	; 0x5c18
   1468c:	mov	r1, r0
   14690:	mov	r0, #1
   14694:	movt	r2, #1
   14698:	movt	r3, #1
   1469c:	bl	11030 <__printf_chk@plt>
   146a0:	movw	r1, #25245	; 0x629d
   146a4:	mov	r0, #0
   146a8:	mov	r2, #5
   146ac:	movt	r1, #1
   146b0:	bl	10f28 <dcgettext@plt>
   146b4:	movw	r2, #25284	; 0x62c4
   146b8:	mov	r1, r0
   146bc:	mov	r0, #1
   146c0:	movt	r2, #1
   146c4:	pop	{fp, lr}
   146c8:	b	11030 <__printf_chk@plt>
   146cc:	b	146d0 <__assert_fail@plt+0x35d4>
   146d0:	push	{r4, r5, r6, sl, fp, lr}
   146d4:	add	fp, sp, #16
   146d8:	mov	r4, r2
   146dc:	mov	r5, r1
   146e0:	mov	r6, r0
   146e4:	bl	153f8 <__assert_fail@plt+0x42fc>
   146e8:	cmp	r0, #0
   146ec:	popne	{r4, r5, r6, sl, fp, pc}
   146f0:	cmp	r6, #0
   146f4:	beq	14708 <__assert_fail@plt+0x360c>
   146f8:	cmp	r5, #0
   146fc:	cmpne	r4, #0
   14700:	bne	14708 <__assert_fail@plt+0x360c>
   14704:	pop	{r4, r5, r6, sl, fp, pc}
   14708:	bl	14b5c <__assert_fail@plt+0x3a60>
   1470c:	push	{fp, lr}
   14710:	mov	fp, sp
   14714:	bl	15260 <__assert_fail@plt+0x4164>
   14718:	cmp	r0, #0
   1471c:	popne	{fp, pc}
   14720:	bl	14b5c <__assert_fail@plt+0x3a60>
   14724:	push	{fp, lr}
   14728:	mov	fp, sp
   1472c:	bl	15260 <__assert_fail@plt+0x4164>
   14730:	cmp	r0, #0
   14734:	popne	{fp, pc}
   14738:	bl	14b5c <__assert_fail@plt+0x3a60>
   1473c:	push	{fp, lr}
   14740:	mov	fp, sp
   14744:	bl	15260 <__assert_fail@plt+0x4164>
   14748:	cmp	r0, #0
   1474c:	popne	{fp, pc}
   14750:	bl	14b5c <__assert_fail@plt+0x3a60>
   14754:	push	{r4, r5, fp, lr}
   14758:	add	fp, sp, #8
   1475c:	mov	r4, r1
   14760:	mov	r5, r0
   14764:	bl	15290 <__assert_fail@plt+0x4194>
   14768:	cmp	r0, #0
   1476c:	popne	{r4, r5, fp, pc}
   14770:	cmp	r5, #0
   14774:	beq	14784 <__assert_fail@plt+0x3688>
   14778:	cmp	r4, #0
   1477c:	bne	14784 <__assert_fail@plt+0x3688>
   14780:	pop	{r4, r5, fp, pc}
   14784:	bl	14b5c <__assert_fail@plt+0x3a60>
   14788:	push	{fp, lr}
   1478c:	mov	fp, sp
   14790:	cmp	r1, #0
   14794:	orreq	r1, r1, #1
   14798:	bl	15290 <__assert_fail@plt+0x4194>
   1479c:	cmp	r0, #0
   147a0:	popne	{fp, pc}
   147a4:	bl	14b5c <__assert_fail@plt+0x3a60>
   147a8:	push	{fp, lr}
   147ac:	mov	fp, sp
   147b0:	clz	r3, r2
   147b4:	lsr	ip, r3, #5
   147b8:	clz	r3, r1
   147bc:	lsr	r3, r3, #5
   147c0:	orrs	r3, r3, ip
   147c4:	movwne	r1, #1
   147c8:	movwne	r2, #1
   147cc:	bl	153f8 <__assert_fail@plt+0x42fc>
   147d0:	cmp	r0, #0
   147d4:	popne	{fp, pc}
   147d8:	bl	14b5c <__assert_fail@plt+0x3a60>
   147dc:	push	{fp, lr}
   147e0:	mov	fp, sp
   147e4:	mov	r2, r1
   147e8:	mov	r1, r0
   147ec:	mov	r0, #0
   147f0:	bl	153f8 <__assert_fail@plt+0x42fc>
   147f4:	cmp	r0, #0
   147f8:	popne	{fp, pc}
   147fc:	bl	14b5c <__assert_fail@plt+0x3a60>
   14800:	mov	r2, r1
   14804:	mov	r1, r0
   14808:	mov	r0, #0
   1480c:	b	147a8 <__assert_fail@plt+0x36ac>
   14810:	mov	r2, #1
   14814:	b	14818 <__assert_fail@plt+0x371c>
   14818:	push	{r4, r5, fp, lr}
   1481c:	add	fp, sp, #8
   14820:	ldr	r5, [r1]
   14824:	mov	r4, r1
   14828:	cmp	r0, #0
   1482c:	beq	14844 <__assert_fail@plt+0x3748>
   14830:	mov	r1, #1
   14834:	add	r1, r1, r5, lsr #1
   14838:	adds	r5, r5, r1
   1483c:	bcc	1485c <__assert_fail@plt+0x3760>
   14840:	bl	14b5c <__assert_fail@plt+0x3a60>
   14844:	cmp	r5, #0
   14848:	bne	1485c <__assert_fail@plt+0x3760>
   1484c:	mov	r1, #64	; 0x40
   14850:	cmp	r2, #64	; 0x40
   14854:	udiv	r5, r1, r2
   14858:	addhi	r5, r5, #1
   1485c:	mov	r1, r5
   14860:	bl	146d0 <__assert_fail@plt+0x35d4>
   14864:	str	r5, [r4]
   14868:	pop	{r4, r5, fp, pc}
   1486c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14870:	add	fp, sp, #24
   14874:	ldr	r6, [r1]
   14878:	mov	r8, r1
   1487c:	ldr	r4, [fp, #8]
   14880:	add	r1, r6, r6, asr #1
   14884:	cmp	r1, r6
   14888:	mvnvs	r1, #-2147483648	; 0x80000000
   1488c:	cmp	r1, r3
   14890:	mov	r5, r1
   14894:	movgt	r5, r3
   14898:	cmn	r3, #1
   1489c:	movle	r5, r1
   148a0:	cmn	r4, #1
   148a4:	ble	148c4 <__assert_fail@plt+0x37c8>
   148a8:	cmp	r4, #0
   148ac:	beq	14918 <__assert_fail@plt+0x381c>
   148b0:	cmn	r5, #1
   148b4:	ble	148ec <__assert_fail@plt+0x37f0>
   148b8:	mvn	r7, #-2147483648	; 0x80000000
   148bc:	udiv	r1, r7, r4
   148c0:	b	148e0 <__assert_fail@plt+0x37e4>
   148c4:	cmn	r5, #1
   148c8:	ble	14908 <__assert_fail@plt+0x380c>
   148cc:	cmn	r4, #1
   148d0:	beq	14918 <__assert_fail@plt+0x381c>
   148d4:	mov	r1, #-2147483648	; 0x80000000
   148d8:	mvn	r7, #-2147483648	; 0x80000000
   148dc:	sdiv	r1, r1, r4
   148e0:	cmp	r1, r5
   148e4:	bge	14918 <__assert_fail@plt+0x381c>
   148e8:	b	14928 <__assert_fail@plt+0x382c>
   148ec:	beq	14918 <__assert_fail@plt+0x381c>
   148f0:	mov	r1, #-2147483648	; 0x80000000
   148f4:	mvn	r7, #-2147483648	; 0x80000000
   148f8:	sdiv	r1, r1, r5
   148fc:	cmp	r1, r4
   14900:	bge	14918 <__assert_fail@plt+0x381c>
   14904:	b	14928 <__assert_fail@plt+0x382c>
   14908:	mvn	r7, #-2147483648	; 0x80000000
   1490c:	sdiv	r1, r7, r4
   14910:	cmp	r5, r1
   14914:	blt	14928 <__assert_fail@plt+0x382c>
   14918:	mul	r1, r5, r4
   1491c:	mov	r7, #64	; 0x40
   14920:	cmp	r1, #63	; 0x3f
   14924:	bgt	14930 <__assert_fail@plt+0x3834>
   14928:	sdiv	r5, r7, r4
   1492c:	mul	r1, r5, r4
   14930:	cmp	r0, #0
   14934:	moveq	r7, #0
   14938:	streq	r7, [r8]
   1493c:	sub	r7, r5, r6
   14940:	cmp	r7, r2
   14944:	bge	149e8 <__assert_fail@plt+0x38ec>
   14948:	add	r5, r6, r2
   1494c:	mov	r2, #0
   14950:	mov	r1, #0
   14954:	cmp	r5, r3
   14958:	movwgt	r2, #1
   1495c:	cmn	r3, #1
   14960:	movwgt	r1, #1
   14964:	cmp	r5, r6
   14968:	bvs	149d0 <__assert_fail@plt+0x38d4>
   1496c:	ands	r1, r1, r2
   14970:	bne	149d0 <__assert_fail@plt+0x38d4>
   14974:	cmn	r4, #1
   14978:	ble	14998 <__assert_fail@plt+0x389c>
   1497c:	cmp	r4, #0
   14980:	beq	149e4 <__assert_fail@plt+0x38e8>
   14984:	cmn	r5, #1
   14988:	ble	149bc <__assert_fail@plt+0x38c0>
   1498c:	mvn	r1, #-2147483648	; 0x80000000
   14990:	udiv	r1, r1, r4
   14994:	b	149b0 <__assert_fail@plt+0x38b4>
   14998:	cmn	r5, #1
   1499c:	ble	149d4 <__assert_fail@plt+0x38d8>
   149a0:	cmn	r4, #1
   149a4:	beq	149e4 <__assert_fail@plt+0x38e8>
   149a8:	mov	r1, #-2147483648	; 0x80000000
   149ac:	sdiv	r1, r1, r4
   149b0:	cmp	r1, r5
   149b4:	bge	149e4 <__assert_fail@plt+0x38e8>
   149b8:	b	149d0 <__assert_fail@plt+0x38d4>
   149bc:	beq	149e4 <__assert_fail@plt+0x38e8>
   149c0:	mov	r1, #-2147483648	; 0x80000000
   149c4:	sdiv	r1, r1, r5
   149c8:	cmp	r1, r4
   149cc:	bge	149e4 <__assert_fail@plt+0x38e8>
   149d0:	bl	14b5c <__assert_fail@plt+0x3a60>
   149d4:	mvn	r1, #-2147483648	; 0x80000000
   149d8:	sdiv	r1, r1, r4
   149dc:	cmp	r5, r1
   149e0:	blt	149d0 <__assert_fail@plt+0x38d4>
   149e4:	mul	r1, r5, r4
   149e8:	bl	14754 <__assert_fail@plt+0x3658>
   149ec:	str	r5, [r8]
   149f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149f4:	push	{fp, lr}
   149f8:	mov	fp, sp
   149fc:	mov	r1, #1
   14a00:	bl	1520c <__assert_fail@plt+0x4110>
   14a04:	cmp	r0, #0
   14a08:	popne	{fp, pc}
   14a0c:	bl	14b5c <__assert_fail@plt+0x3a60>
   14a10:	push	{fp, lr}
   14a14:	mov	fp, sp
   14a18:	bl	1520c <__assert_fail@plt+0x4110>
   14a1c:	cmp	r0, #0
   14a20:	popne	{fp, pc}
   14a24:	bl	14b5c <__assert_fail@plt+0x3a60>
   14a28:	push	{fp, lr}
   14a2c:	mov	fp, sp
   14a30:	mov	r1, #1
   14a34:	bl	1520c <__assert_fail@plt+0x4110>
   14a38:	cmp	r0, #0
   14a3c:	popne	{fp, pc}
   14a40:	bl	14b5c <__assert_fail@plt+0x3a60>
   14a44:	push	{fp, lr}
   14a48:	mov	fp, sp
   14a4c:	bl	1520c <__assert_fail@plt+0x4110>
   14a50:	cmp	r0, #0
   14a54:	popne	{fp, pc}
   14a58:	bl	14b5c <__assert_fail@plt+0x3a60>
   14a5c:	push	{r4, r5, r6, sl, fp, lr}
   14a60:	add	fp, sp, #16
   14a64:	mov	r5, r0
   14a68:	mov	r0, r1
   14a6c:	mov	r4, r1
   14a70:	bl	15260 <__assert_fail@plt+0x4164>
   14a74:	cmp	r0, #0
   14a78:	beq	14a94 <__assert_fail@plt+0x3998>
   14a7c:	mov	r1, r5
   14a80:	mov	r2, r4
   14a84:	mov	r6, r0
   14a88:	bl	10eec <memcpy@plt>
   14a8c:	mov	r0, r6
   14a90:	pop	{r4, r5, r6, sl, fp, pc}
   14a94:	bl	14b5c <__assert_fail@plt+0x3a60>
   14a98:	push	{r4, r5, r6, sl, fp, lr}
   14a9c:	add	fp, sp, #16
   14aa0:	mov	r5, r0
   14aa4:	mov	r0, r1
   14aa8:	mov	r4, r1
   14aac:	bl	15260 <__assert_fail@plt+0x4164>
   14ab0:	cmp	r0, #0
   14ab4:	beq	14ad0 <__assert_fail@plt+0x39d4>
   14ab8:	mov	r1, r5
   14abc:	mov	r2, r4
   14ac0:	mov	r6, r0
   14ac4:	bl	10eec <memcpy@plt>
   14ac8:	mov	r0, r6
   14acc:	pop	{r4, r5, r6, sl, fp, pc}
   14ad0:	bl	14b5c <__assert_fail@plt+0x3a60>
   14ad4:	push	{r4, r5, r6, sl, fp, lr}
   14ad8:	add	fp, sp, #16
   14adc:	mov	r5, r0
   14ae0:	add	r0, r1, #1
   14ae4:	mov	r4, r1
   14ae8:	bl	15260 <__assert_fail@plt+0x4164>
   14aec:	cmp	r0, #0
   14af0:	beq	14b18 <__assert_fail@plt+0x3a1c>
   14af4:	mov	r6, r0
   14af8:	mov	r0, #0
   14afc:	mov	r1, r5
   14b00:	mov	r2, r4
   14b04:	strb	r0, [r6, r4]
   14b08:	mov	r0, r6
   14b0c:	bl	10eec <memcpy@plt>
   14b10:	mov	r0, r6
   14b14:	pop	{r4, r5, r6, sl, fp, pc}
   14b18:	bl	14b5c <__assert_fail@plt+0x3a60>
   14b1c:	push	{r4, r5, r6, sl, fp, lr}
   14b20:	add	fp, sp, #16
   14b24:	mov	r4, r0
   14b28:	bl	10ff4 <strlen@plt>
   14b2c:	add	r5, r0, #1
   14b30:	mov	r0, r5
   14b34:	bl	15260 <__assert_fail@plt+0x4164>
   14b38:	cmp	r0, #0
   14b3c:	beq	14b58 <__assert_fail@plt+0x3a5c>
   14b40:	mov	r1, r4
   14b44:	mov	r2, r5
   14b48:	mov	r6, r0
   14b4c:	bl	10eec <memcpy@plt>
   14b50:	mov	r0, r6
   14b54:	pop	{r4, r5, r6, sl, fp, pc}
   14b58:	bl	14b5c <__assert_fail@plt+0x3a60>
   14b5c:	push	{fp, lr}
   14b60:	mov	fp, sp
   14b64:	movw	r0, #28916	; 0x70f4
   14b68:	movw	r1, #25360	; 0x6310
   14b6c:	mov	r2, #5
   14b70:	movt	r0, #2
   14b74:	movt	r1, #1
   14b78:	ldr	r4, [r0]
   14b7c:	mov	r0, #0
   14b80:	bl	10f28 <dcgettext@plt>
   14b84:	movw	r2, #23256	; 0x5ad8
   14b88:	mov	r3, r0
   14b8c:	mov	r0, r4
   14b90:	mov	r1, #0
   14b94:	movt	r2, #1
   14b98:	bl	10f94 <error@plt>
   14b9c:	bl	110e4 <abort@plt>
   14ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ba4:	add	fp, sp, #28
   14ba8:	sub	sp, sp, #28
   14bac:	cmp	r2, #37	; 0x25
   14bb0:	str	r3, [sp, #12]
   14bb4:	bcs	150c4 <__assert_fail@plt+0x3fc8>
   14bb8:	ldr	sl, [fp, #8]
   14bbc:	mov	r4, r2
   14bc0:	mov	r6, r1
   14bc4:	mov	r5, r0
   14bc8:	bl	1100c <__errno_location@plt>
   14bcc:	add	r8, sp, #24
   14bd0:	cmp	r6, #0
   14bd4:	mov	r7, r0
   14bd8:	mov	r0, #0
   14bdc:	mov	r2, r4
   14be0:	movne	r8, r6
   14be4:	str	r0, [r7]
   14be8:	mov	r0, r5
   14bec:	mov	r1, r8
   14bf0:	bl	11060 <strtoimax@plt>
   14bf4:	str	r1, [sp, #20]
   14bf8:	str	r0, [sp, #16]
   14bfc:	ldr	r4, [r8]
   14c00:	cmp	r4, r5
   14c04:	beq	14c30 <__assert_fail@plt+0x3b34>
   14c08:	mov	r6, r0
   14c0c:	ldr	r0, [r7]
   14c10:	mov	r9, r1
   14c14:	cmp	r0, #0
   14c18:	beq	14c6c <__assert_fail@plt+0x3b70>
   14c1c:	mov	r7, #4
   14c20:	cmp	r0, #34	; 0x22
   14c24:	bne	150b8 <__assert_fail@plt+0x3fbc>
   14c28:	mov	r7, #1
   14c2c:	b	14c70 <__assert_fail@plt+0x3b74>
   14c30:	cmp	sl, #0
   14c34:	mov	r7, #4
   14c38:	ldrbne	r1, [r5]
   14c3c:	cmpne	r1, #0
   14c40:	beq	150b8 <__assert_fail@plt+0x3fbc>
   14c44:	mov	r0, sl
   14c48:	bl	11000 <strchr@plt>
   14c4c:	cmp	r0, #0
   14c50:	beq	150b8 <__assert_fail@plt+0x3fbc>
   14c54:	mov	r9, #0
   14c58:	mov	r6, #1
   14c5c:	mov	r7, #0
   14c60:	str	r9, [sp, #20]
   14c64:	str	r6, [sp, #16]
   14c68:	b	14c78 <__assert_fail@plt+0x3b7c>
   14c6c:	mov	r7, r0
   14c70:	cmp	sl, #0
   14c74:	beq	14d1c <__assert_fail@plt+0x3c20>
   14c78:	ldrb	r5, [r4]
   14c7c:	cmp	r5, #0
   14c80:	beq	14d24 <__assert_fail@plt+0x3c28>
   14c84:	mov	r0, sl
   14c88:	mov	r1, r5
   14c8c:	bl	11000 <strchr@plt>
   14c90:	cmp	r0, #0
   14c94:	beq	14d2c <__assert_fail@plt+0x3c30>
   14c98:	sub	r0, r5, #69	; 0x45
   14c9c:	str	r7, [sp, #4]
   14ca0:	mov	r1, #1
   14ca4:	mov	r7, #1024	; 0x400
   14ca8:	cmp	r0, #21
   14cac:	str	r1, [sp, #8]
   14cb0:	bhi	14cc8 <__assert_fail@plt+0x3bcc>
   14cb4:	movw	r2, #35141	; 0x8945
   14cb8:	mov	r1, #1
   14cbc:	movt	r2, #48	; 0x30
   14cc0:	tst	r2, r1, lsl r0
   14cc4:	bne	14ce4 <__assert_fail@plt+0x3be8>
   14cc8:	sub	r0, r5, #103	; 0x67
   14ccc:	cmp	r0, #13
   14cd0:	bhi	14d3c <__assert_fail@plt+0x3c40>
   14cd4:	mov	r1, #1
   14cd8:	movw	r2, #8273	; 0x2051
   14cdc:	tst	r2, r1, lsl r0
   14ce0:	beq	14d3c <__assert_fail@plt+0x3c40>
   14ce4:	ldr	r0, [fp, #8]
   14ce8:	mov	r1, #48	; 0x30
   14cec:	bl	11000 <strchr@plt>
   14cf0:	cmp	r0, #0
   14cf4:	beq	14d3c <__assert_fail@plt+0x3c40>
   14cf8:	ldrb	r0, [r4, #1]
   14cfc:	ldr	sl, [sp, #12]
   14d00:	cmp	r0, #66	; 0x42
   14d04:	cmpne	r0, #68	; 0x44
   14d08:	bne	14e10 <__assert_fail@plt+0x3d14>
   14d0c:	mov	r0, #2
   14d10:	mov	r7, #1000	; 0x3e8
   14d14:	str	r0, [sp, #8]
   14d18:	b	14d40 <__assert_fail@plt+0x3c44>
   14d1c:	ldr	r0, [sp, #12]
   14d20:	b	14d34 <__assert_fail@plt+0x3c38>
   14d24:	ldr	sl, [sp, #12]
   14d28:	b	150b4 <__assert_fail@plt+0x3fb8>
   14d2c:	ldr	r0, [sp, #12]
   14d30:	orr	r7, r7, #2
   14d34:	stm	r0, {r6, r9}
   14d38:	b	150b8 <__assert_fail@plt+0x3fbc>
   14d3c:	ldr	sl, [sp, #12]
   14d40:	cmp	r5, #89	; 0x59
   14d44:	bgt	14dac <__assert_fail@plt+0x3cb0>
   14d48:	sub	r0, r5, #66	; 0x42
   14d4c:	cmp	r0, #14
   14d50:	bhi	14e30 <__assert_fail@plt+0x3d34>
   14d54:	add	r1, pc, #0
   14d58:	ldr	pc, [r1, r0, lsl #2]
   14d5c:	muleq	r1, r8, sp
   14d60:	andeq	r4, r1, r8, asr #30
   14d64:	andeq	r4, r1, r8, asr #30
   14d68:	andeq	r4, r1, r8, asr pc
   14d6c:	andeq	r4, r1, r8, asr #30
   14d70:	andeq	r4, r1, ip, lsl #29
   14d74:	andeq	r4, r1, r8, asr #30
   14d78:	andeq	r4, r1, r8, asr #30
   14d7c:	andeq	r4, r1, r8, asr #30
   14d80:			; <UNDEFINED> instruction: 0x00014eb4
   14d84:	andeq	r4, r1, r8, asr #30
   14d88:	andeq	r4, r1, r8, asr #29
   14d8c:	andeq	r4, r1, r8, asr #30
   14d90:	andeq	r4, r1, r8, asr #30
   14d94:	andeq	r4, r1, r0, lsl #31
   14d98:	cmn	r9, #1
   14d9c:	ble	14fa8 <__assert_fail@plt+0x3eac>
   14da0:	cmp	r9, #2097152	; 0x200000
   14da4:	blt	14fd4 <__assert_fail@plt+0x3ed8>
   14da8:	b	15054 <__assert_fail@plt+0x3f58>
   14dac:	cmp	r5, #115	; 0x73
   14db0:	bgt	14e68 <__assert_fail@plt+0x3d6c>
   14db4:	sub	r0, r5, #98	; 0x62
   14db8:	cmp	r0, #11
   14dbc:	bhi	14f18 <__assert_fail@plt+0x3e1c>
   14dc0:	add	r1, pc, #4
   14dc4:	mov	r4, #0
   14dc8:	ldr	pc, [r1, r0, lsl #2]
   14dcc:	strdeq	r4, [r1], -ip
   14dd0:	andeq	r5, r1, r8, lsl #1
   14dd4:	andeq	r4, r1, r8, asr #30
   14dd8:	andeq	r4, r1, r8, asr #30
   14ddc:	andeq	r4, r1, r8, asr #30
   14de0:	andeq	r4, r1, ip, lsl #29
   14de4:	andeq	r4, r1, r8, asr #30
   14de8:	andeq	r4, r1, r8, asr #30
   14dec:	andeq	r4, r1, r8, asr #30
   14df0:			; <UNDEFINED> instruction: 0x00014eb4
   14df4:	andeq	r4, r1, r8, asr #30
   14df8:	andeq	r4, r1, r8, asr #29
   14dfc:	cmn	r9, #1
   14e00:	ble	14fe8 <__assert_fail@plt+0x3eec>
   14e04:	cmp	r9, #4194304	; 0x400000
   14e08:	blt	15014 <__assert_fail@plt+0x3f18>
   14e0c:	b	15054 <__assert_fail@plt+0x3f58>
   14e10:	cmp	r0, #105	; 0x69
   14e14:	bne	14d40 <__assert_fail@plt+0x3c44>
   14e18:	ldrb	r0, [r4, #2]
   14e1c:	mov	r1, #1
   14e20:	cmp	r0, #66	; 0x42
   14e24:	movweq	r1, #3
   14e28:	str	r1, [sp, #8]
   14e2c:	b	14d40 <__assert_fail@plt+0x3c44>
   14e30:	cmp	r5, #84	; 0x54
   14e34:	beq	14ef0 <__assert_fail@plt+0x3df4>
   14e38:	cmp	r5, #89	; 0x59
   14e3c:	bne	14f48 <__assert_fail@plt+0x3e4c>
   14e40:	mov	r4, #0
   14e44:	mvn	r6, #7
   14e48:	add	r5, sp, #16
   14e4c:	mov	r0, r5
   14e50:	mov	r1, r7
   14e54:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14e58:	orr	r4, r0, r4
   14e5c:	adds	r6, r6, #1
   14e60:	bne	14e4c <__assert_fail@plt+0x3d50>
   14e64:	b	15088 <__assert_fail@plt+0x3f8c>
   14e68:	cmp	r5, #116	; 0x74
   14e6c:	beq	14ef0 <__assert_fail@plt+0x3df4>
   14e70:	cmp	r5, #119	; 0x77
   14e74:	bne	14f48 <__assert_fail@plt+0x3e4c>
   14e78:	cmn	r9, #1
   14e7c:	ble	15028 <__assert_fail@plt+0x3f2c>
   14e80:	cmp	r9, #1073741824	; 0x40000000
   14e84:	bge	15054 <__assert_fail@plt+0x3f58>
   14e88:	b	15070 <__assert_fail@plt+0x3f74>
   14e8c:	mov	r4, #0
   14e90:	mvn	r6, #2
   14e94:	add	r5, sp, #16
   14e98:	mov	r0, r5
   14e9c:	mov	r1, r7
   14ea0:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14ea4:	orr	r4, r0, r4
   14ea8:	adds	r6, r6, #1
   14eac:	bne	14e98 <__assert_fail@plt+0x3d9c>
   14eb0:	b	15088 <__assert_fail@plt+0x3f8c>
   14eb4:	add	r0, sp, #16
   14eb8:	mov	r1, r7
   14ebc:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14ec0:	mov	r4, r0
   14ec4:	b	15088 <__assert_fail@plt+0x3f8c>
   14ec8:	mov	r4, #0
   14ecc:	mvn	r6, #1
   14ed0:	add	r5, sp, #16
   14ed4:	mov	r0, r5
   14ed8:	mov	r1, r7
   14edc:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14ee0:	orr	r4, r0, r4
   14ee4:	adds	r6, r6, #1
   14ee8:	bne	14ed4 <__assert_fail@plt+0x3dd8>
   14eec:	b	15088 <__assert_fail@plt+0x3f8c>
   14ef0:	mov	r4, #0
   14ef4:	mvn	r6, #3
   14ef8:	add	r5, sp, #16
   14efc:	mov	r0, r5
   14f00:	mov	r1, r7
   14f04:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14f08:	orr	r4, r0, r4
   14f0c:	adds	r6, r6, #1
   14f10:	bne	14efc <__assert_fail@plt+0x3e00>
   14f14:	b	15088 <__assert_fail@plt+0x3f8c>
   14f18:	cmp	r5, #90	; 0x5a
   14f1c:	bne	14f48 <__assert_fail@plt+0x3e4c>
   14f20:	mov	r4, #0
   14f24:	mvn	r6, #6
   14f28:	add	r5, sp, #16
   14f2c:	mov	r0, r5
   14f30:	mov	r1, r7
   14f34:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14f38:	orr	r4, r0, r4
   14f3c:	adds	r6, r6, #1
   14f40:	bne	14f2c <__assert_fail@plt+0x3e30>
   14f44:	b	15088 <__assert_fail@plt+0x3f8c>
   14f48:	stm	sl, {r6, r9}
   14f4c:	ldr	r7, [sp, #4]
   14f50:	orr	r7, r7, #2
   14f54:	b	150b8 <__assert_fail@plt+0x3fbc>
   14f58:	mov	r4, #0
   14f5c:	mvn	r6, #5
   14f60:	add	r5, sp, #16
   14f64:	mov	r0, r5
   14f68:	mov	r1, r7
   14f6c:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14f70:	orr	r4, r0, r4
   14f74:	adds	r6, r6, #1
   14f78:	bne	14f64 <__assert_fail@plt+0x3e68>
   14f7c:	b	15088 <__assert_fail@plt+0x3f8c>
   14f80:	mov	r4, #0
   14f84:	mvn	r6, #4
   14f88:	add	r5, sp, #16
   14f8c:	mov	r0, r5
   14f90:	mov	r1, r7
   14f94:	bl	150e4 <__assert_fail@plt+0x3fe8>
   14f98:	orr	r4, r0, r4
   14f9c:	adds	r6, r6, #1
   14fa0:	bne	14f8c <__assert_fail@plt+0x3e90>
   14fa4:	b	15088 <__assert_fail@plt+0x3f8c>
   14fa8:	and	r0, r6, r9
   14fac:	cmn	r0, #1
   14fb0:	beq	14fd4 <__assert_fail@plt+0x3ed8>
   14fb4:	mov	r0, #0
   14fb8:	mov	r1, #-2147483648	; 0x80000000
   14fbc:	mov	r2, r6
   14fc0:	mov	r3, r9
   14fc4:	bl	1552c <__assert_fail@plt+0x4430>
   14fc8:	subs	r0, r0, #1024	; 0x400
   14fcc:	sbcs	r0, r1, #0
   14fd0:	blt	15054 <__assert_fail@plt+0x3f58>
   14fd4:	lsl	r0, r9, #10
   14fd8:	lsl	r1, r6, #10
   14fdc:	mov	r4, #0
   14fe0:	orr	r0, r0, r6, lsr #22
   14fe4:	b	15080 <__assert_fail@plt+0x3f84>
   14fe8:	and	r0, r6, r9
   14fec:	cmn	r0, #1
   14ff0:	beq	15014 <__assert_fail@plt+0x3f18>
   14ff4:	mov	r0, #0
   14ff8:	mov	r1, #-2147483648	; 0x80000000
   14ffc:	mov	r2, r6
   15000:	mov	r3, r9
   15004:	bl	1552c <__assert_fail@plt+0x4430>
   15008:	subs	r0, r0, #512	; 0x200
   1500c:	sbcs	r0, r1, #0
   15010:	blt	15054 <__assert_fail@plt+0x3f58>
   15014:	lsl	r0, r9, #9
   15018:	lsl	r1, r6, #9
   1501c:	mov	r4, #0
   15020:	orr	r0, r0, r6, lsr #23
   15024:	b	15080 <__assert_fail@plt+0x3f84>
   15028:	and	r0, r6, r9
   1502c:	cmn	r0, #1
   15030:	beq	15070 <__assert_fail@plt+0x3f74>
   15034:	mov	r0, #0
   15038:	mov	r1, #-2147483648	; 0x80000000
   1503c:	mov	r2, r6
   15040:	mov	r3, r9
   15044:	bl	1552c <__assert_fail@plt+0x4430>
   15048:	subs	r0, r0, #2
   1504c:	sbcs	r0, r1, #0
   15050:	bge	15070 <__assert_fail@plt+0x3f74>
   15054:	mvn	r0, #-2147483648	; 0x80000000
   15058:	cmp	r9, #0
   1505c:	mvn	r1, #0
   15060:	mov	r4, #1
   15064:	movlt	r0, #-2147483648	; 0x80000000
   15068:	movwlt	r1, #0
   1506c:	b	15080 <__assert_fail@plt+0x3f84>
   15070:	lsl	r0, r9, #1
   15074:	lsl	r1, r6, #1
   15078:	mov	r4, #0
   1507c:	orr	r0, r0, r6, lsr #31
   15080:	str	r1, [sp, #16]
   15084:	str	r0, [sp, #20]
   15088:	ldr	r0, [r8]
   1508c:	ldr	r2, [sp, #8]
   15090:	ldr	r7, [sp, #4]
   15094:	add	r1, r0, r2
   15098:	orr	r7, r4, r7
   1509c:	str	r1, [r8]
   150a0:	ldrb	r0, [r0, r2]
   150a4:	ldr	r6, [sp, #16]
   150a8:	ldr	r9, [sp, #20]
   150ac:	cmp	r0, #0
   150b0:	orrne	r7, r7, #2
   150b4:	stm	sl, {r6, r9}
   150b8:	mov	r0, r7
   150bc:	sub	sp, fp, #28
   150c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150c4:	movw	r0, #25377	; 0x6321
   150c8:	movw	r1, #25415	; 0x6347
   150cc:	movw	r3, #25431	; 0x6357
   150d0:	mov	r2, #85	; 0x55
   150d4:	movt	r0, #1
   150d8:	movt	r1, #1
   150dc:	movt	r3, #1
   150e0:	bl	110fc <__assert_fail@plt>
   150e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150e8:	add	fp, sp, #24
   150ec:	mov	r5, r1
   150f0:	mov	r4, r0
   150f4:	cmn	r1, #1
   150f8:	ble	15130 <__assert_fail@plt+0x4034>
   150fc:	ldrd	r8, [r4]
   15100:	cmp	r5, #0
   15104:	beq	15168 <__assert_fail@plt+0x406c>
   15108:	cmn	r9, #1
   1510c:	ble	15174 <__assert_fail@plt+0x4078>
   15110:	asr	r3, r5, #31
   15114:	mvn	r0, #0
   15118:	mvn	r1, #-2147483648	; 0x80000000
   1511c:	mov	r2, r5
   15120:	bl	1552c <__assert_fail@plt+0x4430>
   15124:	subs	r0, r0, r8
   15128:	sbcs	r0, r1, r9
   1512c:	b	151a4 <__assert_fail@plt+0x40a8>
   15130:	ldrd	r6, [r4]
   15134:	cmn	r7, #1
   15138:	ble	151cc <__assert_fail@plt+0x40d0>
   1513c:	cmn	r5, #1
   15140:	beq	151ec <__assert_fail@plt+0x40f0>
   15144:	asr	r3, r5, #31
   15148:	mov	r0, #0
   1514c:	mov	r1, #-2147483648	; 0x80000000
   15150:	mov	r2, r5
   15154:	bl	1552c <__assert_fail@plt+0x4430>
   15158:	subs	r0, r0, r6
   1515c:	sbcs	r0, r1, r7
   15160:	blt	151b0 <__assert_fail@plt+0x40b4>
   15164:	b	151ec <__assert_fail@plt+0x40f0>
   15168:	mov	r6, r8
   1516c:	mov	r7, r9
   15170:	b	151ec <__assert_fail@plt+0x40f0>
   15174:	and	r0, r8, r9
   15178:	mvn	r6, #0
   1517c:	mvn	r7, #0
   15180:	cmn	r0, #1
   15184:	beq	151ec <__assert_fail@plt+0x40f0>
   15188:	mov	r0, #0
   1518c:	mov	r1, #-2147483648	; 0x80000000
   15190:	mov	r2, r8
   15194:	mov	r3, r9
   15198:	bl	1552c <__assert_fail@plt+0x4430>
   1519c:	subs	r0, r0, r5
   151a0:	sbcs	r0, r1, r5, asr #31
   151a4:	mov	r7, r9
   151a8:	mov	r6, r8
   151ac:	bge	151ec <__assert_fail@plt+0x40f0>
   151b0:	mvn	r1, #-2147483648	; 0x80000000
   151b4:	cmp	r7, #0
   151b8:	mvn	r2, #0
   151bc:	mov	r0, #1
   151c0:	movlt	r1, #-2147483648	; 0x80000000
   151c4:	movwlt	r2, #0
   151c8:	b	15200 <__assert_fail@plt+0x4104>
   151cc:	asr	r3, r5, #31
   151d0:	mvn	r0, #0
   151d4:	mvn	r1, #-2147483648	; 0x80000000
   151d8:	mov	r2, r5
   151dc:	bl	1552c <__assert_fail@plt+0x4430>
   151e0:	subs	r0, r6, r0
   151e4:	sbcs	r0, r7, r1
   151e8:	blt	151b0 <__assert_fail@plt+0x40b4>
   151ec:	umull	r2, r0, r6, r5
   151f0:	asr	r1, r5, #31
   151f4:	mla	r0, r6, r1, r0
   151f8:	mla	r1, r7, r5, r0
   151fc:	mov	r0, #0
   15200:	str	r2, [r4]
   15204:	str	r1, [r4, #4]
   15208:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1520c:	clz	r2, r1
   15210:	clz	r3, r0
   15214:	lsr	r2, r2, #5
   15218:	lsr	r3, r3, #5
   1521c:	orrs	r2, r3, r2
   15220:	movwne	r1, #1
   15224:	movwne	r0, #1
   15228:	cmp	r1, #0
   1522c:	beq	1525c <__assert_fail@plt+0x4160>
   15230:	mvn	r2, #-2147483648	; 0x80000000
   15234:	udiv	r2, r2, r1
   15238:	cmp	r2, r0
   1523c:	bcs	1525c <__assert_fail@plt+0x4160>
   15240:	push	{fp, lr}
   15244:	mov	fp, sp
   15248:	bl	1100c <__errno_location@plt>
   1524c:	mov	r1, #12
   15250:	str	r1, [r0]
   15254:	mov	r0, #0
   15258:	pop	{fp, pc}
   1525c:	b	10e80 <calloc@plt>
   15260:	cmp	r0, #0
   15264:	movweq	r0, #1
   15268:	cmn	r0, #1
   1526c:	ble	15274 <__assert_fail@plt+0x4178>
   15270:	b	10fa0 <malloc@plt>
   15274:	push	{fp, lr}
   15278:	mov	fp, sp
   1527c:	bl	1100c <__errno_location@plt>
   15280:	mov	r1, #12
   15284:	str	r1, [r0]
   15288:	mov	r0, #0
   1528c:	pop	{fp, pc}
   15290:	push	{fp, lr}
   15294:	mov	fp, sp
   15298:	cmp	r0, #0
   1529c:	beq	152b8 <__assert_fail@plt+0x41bc>
   152a0:	cmp	r1, #0
   152a4:	beq	152c4 <__assert_fail@plt+0x41c8>
   152a8:	cmn	r1, #1
   152ac:	ble	152cc <__assert_fail@plt+0x41d0>
   152b0:	pop	{fp, lr}
   152b4:	b	10f34 <realloc@plt>
   152b8:	mov	r0, r1
   152bc:	pop	{fp, lr}
   152c0:	b	15260 <__assert_fail@plt+0x4164>
   152c4:	bl	12648 <__assert_fail@plt+0x154c>
   152c8:	b	152d8 <__assert_fail@plt+0x41dc>
   152cc:	bl	1100c <__errno_location@plt>
   152d0:	mov	r1, #12
   152d4:	str	r1, [r0]
   152d8:	mov	r0, #0
   152dc:	pop	{fp, pc}
   152e0:	push	{r4, r5, r6, sl, fp, lr}
   152e4:	add	fp, sp, #16
   152e8:	mov	r4, r0
   152ec:	bl	10f70 <__fpending@plt>
   152f0:	mov	r5, r0
   152f4:	mov	r0, r4
   152f8:	bl	10f7c <ferror_unlocked@plt>
   152fc:	mov	r6, r0
   15300:	mov	r0, r4
   15304:	bl	12550 <__assert_fail@plt+0x1454>
   15308:	cmp	r6, #0
   1530c:	beq	1532c <__assert_fail@plt+0x4230>
   15310:	mvn	r4, #0
   15314:	cmp	r0, #0
   15318:	bne	15358 <__assert_fail@plt+0x425c>
   1531c:	bl	1100c <__errno_location@plt>
   15320:	mov	r1, #0
   15324:	str	r1, [r0]
   15328:	b	15358 <__assert_fail@plt+0x425c>
   1532c:	cmp	r0, #0
   15330:	mov	r4, r0
   15334:	mvnne	r4, #0
   15338:	cmp	r5, #0
   1533c:	bne	15358 <__assert_fail@plt+0x425c>
   15340:	cmp	r0, #0
   15344:	beq	15358 <__assert_fail@plt+0x425c>
   15348:	bl	1100c <__errno_location@plt>
   1534c:	ldr	r0, [r0]
   15350:	subs	r4, r0, #9
   15354:	mvnne	r4, #0
   15358:	mov	r0, r4
   1535c:	pop	{r4, r5, r6, sl, fp, pc}
   15360:	push	{fp, lr}
   15364:	mov	fp, sp
   15368:	mov	r0, #14
   1536c:	bl	1109c <nl_langinfo@plt>
   15370:	movw	r1, #23768	; 0x5cd8
   15374:	cmp	r0, #0
   15378:	movt	r1, #1
   1537c:	movne	r1, r0
   15380:	movw	r0, #25509	; 0x63a5
   15384:	ldrb	r2, [r1]
   15388:	movt	r0, #1
   1538c:	cmp	r2, #0
   15390:	movne	r0, r1
   15394:	pop	{fp, pc}
   15398:	push	{r4, r5, r6, r7, fp, lr}
   1539c:	add	fp, sp, #16
   153a0:	sub	sp, sp, #8
   153a4:	add	r5, sp, #4
   153a8:	cmp	r0, #0
   153ac:	mov	r7, r2
   153b0:	mov	r4, r1
   153b4:	movne	r5, r0
   153b8:	mov	r0, r5
   153bc:	bl	10f88 <mbrtowc@plt>
   153c0:	mov	r6, r0
   153c4:	cmp	r7, #0
   153c8:	beq	153ec <__assert_fail@plt+0x42f0>
   153cc:	cmn	r6, #2
   153d0:	bcc	153ec <__assert_fail@plt+0x42f0>
   153d4:	mov	r0, #0
   153d8:	bl	15434 <__assert_fail@plt+0x4338>
   153dc:	cmp	r0, #0
   153e0:	ldrbeq	r0, [r4]
   153e4:	moveq	r6, #1
   153e8:	streq	r0, [r5]
   153ec:	mov	r0, r6
   153f0:	sub	sp, fp, #16
   153f4:	pop	{r4, r5, r6, r7, fp, pc}
   153f8:	cmp	r2, #0
   153fc:	beq	1542c <__assert_fail@plt+0x4330>
   15400:	mvn	r3, #0
   15404:	udiv	r3, r3, r2
   15408:	cmp	r3, r1
   1540c:	bcs	1542c <__assert_fail@plt+0x4330>
   15410:	push	{fp, lr}
   15414:	mov	fp, sp
   15418:	bl	1100c <__errno_location@plt>
   1541c:	mov	r1, #12
   15420:	str	r1, [r0]
   15424:	mov	r0, #0
   15428:	pop	{fp, pc}
   1542c:	mul	r1, r2, r1
   15430:	b	15290 <__assert_fail@plt+0x4194>
   15434:	push	{r4, sl, fp, lr}
   15438:	add	fp, sp, #8
   1543c:	sub	sp, sp, #264	; 0x108
   15440:	add	r1, sp, #7
   15444:	movw	r2, #257	; 0x101
   15448:	bl	15498 <__assert_fail@plt+0x439c>
   1544c:	mov	r4, #0
   15450:	cmp	r0, #0
   15454:	bne	1548c <__assert_fail@plt+0x4390>
   15458:	movw	r1, #25515	; 0x63ab
   1545c:	add	r0, sp, #7
   15460:	movt	r1, #1
   15464:	bl	10ea4 <strcmp@plt>
   15468:	cmp	r0, #0
   1546c:	beq	1548c <__assert_fail@plt+0x4390>
   15470:	movw	r1, #25517	; 0x63ad
   15474:	add	r0, sp, #7
   15478:	movt	r1, #1
   1547c:	bl	10ea4 <strcmp@plt>
   15480:	mov	r4, r0
   15484:	cmp	r0, #0
   15488:	movwne	r4, #1
   1548c:	mov	r0, r4
   15490:	sub	sp, fp, #8
   15494:	pop	{r4, sl, fp, pc}
   15498:	push	{r4, r5, r6, r7, fp, lr}
   1549c:	add	fp, sp, #16
   154a0:	mov	r4, r1
   154a4:	mov	r1, #0
   154a8:	mov	r6, r2
   154ac:	bl	11084 <setlocale@plt>
   154b0:	cmp	r0, #0
   154b4:	beq	154e0 <__assert_fail@plt+0x43e4>
   154b8:	mov	r7, r0
   154bc:	bl	10ff4 <strlen@plt>
   154c0:	cmp	r0, r6
   154c4:	bcs	154f4 <__assert_fail@plt+0x43f8>
   154c8:	add	r2, r0, #1
   154cc:	mov	r0, r4
   154d0:	mov	r1, r7
   154d4:	bl	10eec <memcpy@plt>
   154d8:	mov	r5, #0
   154dc:	b	1551c <__assert_fail@plt+0x4420>
   154e0:	cmp	r6, #0
   154e4:	mov	r5, #22
   154e8:	movne	r0, #0
   154ec:	strbne	r0, [r4]
   154f0:	b	1551c <__assert_fail@plt+0x4420>
   154f4:	mov	r5, #34	; 0x22
   154f8:	cmp	r6, #0
   154fc:	beq	1551c <__assert_fail@plt+0x4420>
   15500:	sub	r6, r6, #1
   15504:	mov	r0, r4
   15508:	mov	r1, r7
   1550c:	mov	r2, r6
   15510:	bl	10eec <memcpy@plt>
   15514:	mov	r0, #0
   15518:	strb	r0, [r4, r6]
   1551c:	mov	r0, r5
   15520:	pop	{r4, r5, r6, r7, fp, pc}
   15524:	mov	r1, #0
   15528:	b	11084 <setlocale@plt>
   1552c:	cmp	r3, #0
   15530:	cmpeq	r2, #0
   15534:	bne	15558 <__assert_fail@plt+0x445c>
   15538:	cmp	r1, #0
   1553c:	movlt	r1, #-2147483648	; 0x80000000
   15540:	movlt	r0, #0
   15544:	blt	15554 <__assert_fail@plt+0x4458>
   15548:	cmpeq	r0, #0
   1554c:	mvnne	r1, #-2147483648	; 0x80000000
   15550:	mvnne	r0, #0
   15554:	b	15600 <__assert_fail@plt+0x4504>
   15558:	sub	sp, sp, #8
   1555c:	push	{sp, lr}
   15560:	cmp	r1, #0
   15564:	blt	15584 <__assert_fail@plt+0x4488>
   15568:	cmp	r3, #0
   1556c:	blt	155b8 <__assert_fail@plt+0x44bc>
   15570:	bl	15610 <__assert_fail@plt+0x4514>
   15574:	ldr	lr, [sp, #4]
   15578:	add	sp, sp, #8
   1557c:	pop	{r2, r3}
   15580:	bx	lr
   15584:	rsbs	r0, r0, #0
   15588:	sbc	r1, r1, r1, lsl #1
   1558c:	cmp	r3, #0
   15590:	blt	155dc <__assert_fail@plt+0x44e0>
   15594:	bl	15610 <__assert_fail@plt+0x4514>
   15598:	ldr	lr, [sp, #4]
   1559c:	add	sp, sp, #8
   155a0:	pop	{r2, r3}
   155a4:	rsbs	r0, r0, #0
   155a8:	sbc	r1, r1, r1, lsl #1
   155ac:	rsbs	r2, r2, #0
   155b0:	sbc	r3, r3, r3, lsl #1
   155b4:	bx	lr
   155b8:	rsbs	r2, r2, #0
   155bc:	sbc	r3, r3, r3, lsl #1
   155c0:	bl	15610 <__assert_fail@plt+0x4514>
   155c4:	ldr	lr, [sp, #4]
   155c8:	add	sp, sp, #8
   155cc:	pop	{r2, r3}
   155d0:	rsbs	r0, r0, #0
   155d4:	sbc	r1, r1, r1, lsl #1
   155d8:	bx	lr
   155dc:	rsbs	r2, r2, #0
   155e0:	sbc	r3, r3, r3, lsl #1
   155e4:	bl	15610 <__assert_fail@plt+0x4514>
   155e8:	ldr	lr, [sp, #4]
   155ec:	add	sp, sp, #8
   155f0:	pop	{r2, r3}
   155f4:	rsbs	r2, r2, #0
   155f8:	sbc	r3, r3, r3, lsl #1
   155fc:	bx	lr
   15600:	push	{r1, lr}
   15604:	mov	r0, #8
   15608:	bl	10e98 <raise@plt>
   1560c:	pop	{r1, pc}
   15610:	cmp	r1, r3
   15614:	cmpeq	r0, r2
   15618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1561c:	mov	r4, r0
   15620:	movcc	r0, #0
   15624:	mov	r5, r1
   15628:	ldr	lr, [sp, #36]	; 0x24
   1562c:	movcc	r1, r0
   15630:	bcc	1572c <__assert_fail@plt+0x4630>
   15634:	cmp	r3, #0
   15638:	clzeq	ip, r2
   1563c:	clzne	ip, r3
   15640:	addeq	ip, ip, #32
   15644:	cmp	r5, #0
   15648:	clzeq	r1, r4
   1564c:	addeq	r1, r1, #32
   15650:	clzne	r1, r5
   15654:	sub	ip, ip, r1
   15658:	sub	sl, ip, #32
   1565c:	lsl	r9, r3, ip
   15660:	rsb	fp, ip, #32
   15664:	orr	r9, r9, r2, lsl sl
   15668:	orr	r9, r9, r2, lsr fp
   1566c:	lsl	r8, r2, ip
   15670:	cmp	r5, r9
   15674:	cmpeq	r4, r8
   15678:	movcc	r0, #0
   1567c:	movcc	r1, r0
   15680:	bcc	1569c <__assert_fail@plt+0x45a0>
   15684:	mov	r0, #1
   15688:	subs	r4, r4, r8
   1568c:	lsl	r1, r0, sl
   15690:	orr	r1, r1, r0, lsr fp
   15694:	lsl	r0, r0, ip
   15698:	sbc	r5, r5, r9
   1569c:	cmp	ip, #0
   156a0:	beq	1572c <__assert_fail@plt+0x4630>
   156a4:	lsr	r6, r8, #1
   156a8:	orr	r6, r6, r9, lsl #31
   156ac:	lsr	r7, r9, #1
   156b0:	mov	r2, ip
   156b4:	b	156d8 <__assert_fail@plt+0x45dc>
   156b8:	subs	r3, r4, r6
   156bc:	sbc	r8, r5, r7
   156c0:	adds	r3, r3, r3
   156c4:	adc	r8, r8, r8
   156c8:	adds	r4, r3, #1
   156cc:	adc	r5, r8, #0
   156d0:	subs	r2, r2, #1
   156d4:	beq	156f4 <__assert_fail@plt+0x45f8>
   156d8:	cmp	r5, r7
   156dc:	cmpeq	r4, r6
   156e0:	bcs	156b8 <__assert_fail@plt+0x45bc>
   156e4:	adds	r4, r4, r4
   156e8:	adc	r5, r5, r5
   156ec:	subs	r2, r2, #1
   156f0:	bne	156d8 <__assert_fail@plt+0x45dc>
   156f4:	lsr	r3, r4, ip
   156f8:	orr	r3, r3, r5, lsl fp
   156fc:	lsr	r2, r5, ip
   15700:	orr	r3, r3, r5, lsr sl
   15704:	adds	r0, r0, r4
   15708:	mov	r4, r3
   1570c:	lsl	r3, r2, ip
   15710:	orr	r3, r3, r4, lsl sl
   15714:	lsl	ip, r4, ip
   15718:	orr	r3, r3, r4, lsr fp
   1571c:	adc	r1, r1, r5
   15720:	subs	r0, r0, ip
   15724:	mov	r5, r2
   15728:	sbc	r1, r1, r3
   1572c:	cmp	lr, #0
   15730:	strdne	r4, [lr]
   15734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15738:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1573c:	mov	r7, r0
   15740:	ldr	r6, [pc, #72]	; 15790 <__assert_fail@plt+0x4694>
   15744:	ldr	r5, [pc, #72]	; 15794 <__assert_fail@plt+0x4698>
   15748:	add	r6, pc, r6
   1574c:	add	r5, pc, r5
   15750:	sub	r6, r6, r5
   15754:	mov	r8, r1
   15758:	mov	r9, r2
   1575c:	bl	10e60 <calloc@plt-0x20>
   15760:	asrs	r6, r6, #2
   15764:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15768:	mov	r4, #0
   1576c:	add	r4, r4, #1
   15770:	ldr	r3, [r5], #4
   15774:	mov	r2, r9
   15778:	mov	r1, r8
   1577c:	mov	r0, r7
   15780:	blx	r3
   15784:	cmp	r6, r4
   15788:	bne	1576c <__assert_fail@plt+0x4670>
   1578c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15790:			; <UNDEFINED> instruction: 0x000117bc
   15794:			; <UNDEFINED> instruction: 0x000117b4
   15798:	bx	lr
   1579c:	ldr	r3, [pc, #12]	; 157b0 <__assert_fail@plt+0x46b4>
   157a0:	mov	r1, #0
   157a4:	add	r3, pc, r3
   157a8:	ldr	r2, [r3]
   157ac:	b	11018 <__cxa_atexit@plt>
   157b0:	andeq	r1, r1, r0, asr #18

Disassembly of section .fini:

000157b4 <.fini>:
   157b4:	push	{r3, lr}
   157b8:	pop	{r3, pc}
