
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00011050 <.init>:
   11050:	push	{r3, lr}
   11054:	bl	1137c <__assert_fail@plt+0x48>
   11058:	pop	{r3, pc}

Disassembly of section .plt:

0001105c <calloc@plt-0x14>:
   1105c:	push	{lr}		; (str lr, [sp, #-4]!)
   11060:	ldr	lr, [pc, #4]	; 1106c <calloc@plt-0x4>
   11064:	add	lr, pc, lr
   11068:	ldr	pc, [lr, #8]!
   1106c:	muleq	r1, r4, pc	; <UNPREDICTABLE>

00011070 <calloc@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #3988]!	; 0xf94

0001107c <fputs_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #3980]!	; 0xf8c

00011088 <raise@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #3972]!	; 0xf84

00011094 <strcmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #106496	; 0x1a000
   1109c:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a0 <fflush@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #106496	; 0x1a000
   110a8:	ldr	pc, [ip, #3956]!	; 0xf74

000110ac <free@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #106496	; 0x1a000
   110b4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b8 <ferror@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #106496	; 0x1a000
   110c0:	ldr	pc, [ip, #3940]!	; 0xf64

000110c4 <_exit@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #106496	; 0x1a000
   110cc:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d0 <memcpy@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #106496	; 0x1a000
   110d8:	ldr	pc, [ip, #3924]!	; 0xf54

000110dc <__strtoull_internal@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #106496	; 0x1a000
   110e4:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e8 <mbsinit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #106496	; 0x1a000
   110f0:	ldr	pc, [ip, #3908]!	; 0xf44

000110f4 <strtold@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #106496	; 0x1a000
   110fc:	ldr	pc, [ip, #3900]!	; 0xf3c

00011100 <memcmp@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #106496	; 0x1a000
   11108:	ldr	pc, [ip, #3892]!	; 0xf34

0001110c <dcgettext@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #106496	; 0x1a000
   11114:	ldr	pc, [ip, #3884]!	; 0xf2c

00011118 <realloc@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #106496	; 0x1a000
   11120:	ldr	pc, [ip, #3876]!	; 0xf24

00011124 <textdomain@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #106496	; 0x1a000
   1112c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011130 <iswprint@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #106496	; 0x1a000
   11138:	ldr	pc, [ip, #3860]!	; 0xf14

0001113c <__fxstat64@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #106496	; 0x1a000
   11144:	ldr	pc, [ip, #3852]!	; 0xf0c

00011148 <fwrite@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #106496	; 0x1a000
   11150:	ldr	pc, [ip, #3844]!	; 0xf04

00011154 <lseek64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #106496	; 0x1a000
   1115c:	ldr	pc, [ip, #3836]!	; 0xefc

00011160 <__ctype_get_mb_cur_max@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #106496	; 0x1a000
   11168:	ldr	pc, [ip, #3828]!	; 0xef4

0001116c <__fpending@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #106496	; 0x1a000
   11174:	ldr	pc, [ip, #3820]!	; 0xeec

00011178 <mbrtowc@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #106496	; 0x1a000
   11180:	ldr	pc, [ip, #3812]!	; 0xee4

00011184 <error@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #106496	; 0x1a000
   1118c:	ldr	pc, [ip, #3804]!	; 0xedc

00011190 <strtof@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #106496	; 0x1a000
   11198:	ldr	pc, [ip, #3796]!	; 0xed4

0001119c <malloc@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #106496	; 0x1a000
   111a4:	ldr	pc, [ip, #3788]!	; 0xecc

000111a8 <__libc_start_main@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #106496	; 0x1a000
   111b0:	ldr	pc, [ip, #3780]!	; 0xec4

000111b4 <__vfprintf_chk@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #106496	; 0x1a000
   111bc:	ldr	pc, [ip, #3772]!	; 0xebc

000111c0 <__freading@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3764]!	; 0xeb4

000111cc <__gmon_start__@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3756]!	; 0xeac

000111d8 <getopt_long@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3748]!	; 0xea4

000111e4 <__ctype_b_loc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f0 <exit@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3732]!	; 0xe94

000111fc <strlen@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3724]!	; 0xe8c

00011208 <strchr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3716]!	; 0xe84

00011214 <__errno_location@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011220 <__sprintf_chk@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3700]!	; 0xe74

0001122c <__cxa_atexit@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3692]!	; 0xe6c

00011238 <setvbuf@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3684]!	; 0xe64

00011244 <memset@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011250 <fgetc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3668]!	; 0xe54

0001125c <__printf_chk@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3660]!	; 0xe4c

00011268 <strtod@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3652]!	; 0xe44

00011274 <fileno@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011280 <__fprintf_chk@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3636]!	; 0xe34

0001128c <fclose@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3628]!	; 0xe2c

00011298 <fseeko64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3620]!	; 0xe24

000112a4 <__overflow@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b0 <setlocale@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3604]!	; 0xe14

000112bc <strrchr@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c8 <nl_langinfo@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3588]!	; 0xe04

000112d4 <localeconv@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e0 <clearerr_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112ec <fopen64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3564]!	; 0xdec

000112f8 <bindtextdomain@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3556]!	; 0xde4

00011304 <fread_unlocked@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3548]!	; 0xddc

00011310 <strncmp@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3540]!	; 0xdd4

0001131c <abort@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3532]!	; 0xdcc

00011328 <__snprintf_chk@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3524]!	; 0xdc4

00011334 <__assert_fail@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3516]!	; 0xdbc

Disassembly of section .text:

00011340 <.text>:
   11340:	mov	fp, #0
   11344:	mov	lr, #0
   11348:	pop	{r1}		; (ldr r1, [sp], #4)
   1134c:	mov	r2, sp
   11350:	push	{r2}		; (str r2, [sp, #-4]!)
   11354:	push	{r0}		; (str r0, [sp, #-4]!)
   11358:	ldr	ip, [pc, #16]	; 11370 <__assert_fail@plt+0x3c>
   1135c:	push	{ip}		; (str ip, [sp, #-4]!)
   11360:	ldr	r0, [pc, #12]	; 11374 <__assert_fail@plt+0x40>
   11364:	ldr	r3, [pc, #12]	; 11378 <__assert_fail@plt+0x44>
   11368:	bl	111a8 <__libc_start_main@plt>
   1136c:	bl	1131c <abort@plt>
   11370:	andeq	r9, r1, r8, ror #25
   11374:	andeq	r1, r1, ip, asr #15
   11378:	andeq	r9, r1, r8, lsl #25
   1137c:	ldr	r3, [pc, #20]	; 11398 <__assert_fail@plt+0x64>
   11380:	ldr	r2, [pc, #20]	; 1139c <__assert_fail@plt+0x68>
   11384:	add	r3, pc, r3
   11388:	ldr	r2, [r3, r2]
   1138c:	cmp	r2, #0
   11390:	bxeq	lr
   11394:	b	111cc <__gmon_start__@plt>
   11398:	andeq	sl, r1, r4, ror ip
   1139c:	strdeq	r0, [r0], -ip
   113a0:	ldr	r0, [pc, #24]	; 113c0 <__assert_fail@plt+0x8c>
   113a4:	ldr	r3, [pc, #24]	; 113c4 <__assert_fail@plt+0x90>
   113a8:	cmp	r3, r0
   113ac:	bxeq	lr
   113b0:	ldr	r3, [pc, #16]	; 113c8 <__assert_fail@plt+0x94>
   113b4:	cmp	r3, #0
   113b8:	bxeq	lr
   113bc:	bx	r3
   113c0:	andeq	ip, r2, r8, asr r1
   113c4:	andeq	ip, r2, r8, asr r1
   113c8:	andeq	r0, r0, r0
   113cc:	ldr	r0, [pc, #36]	; 113f8 <__assert_fail@plt+0xc4>
   113d0:	ldr	r1, [pc, #36]	; 113fc <__assert_fail@plt+0xc8>
   113d4:	sub	r1, r1, r0
   113d8:	asr	r1, r1, #2
   113dc:	add	r1, r1, r1, lsr #31
   113e0:	asrs	r1, r1, #1
   113e4:	bxeq	lr
   113e8:	ldr	r3, [pc, #16]	; 11400 <__assert_fail@plt+0xcc>
   113ec:	cmp	r3, #0
   113f0:	bxeq	lr
   113f4:	bx	r3
   113f8:	andeq	ip, r2, r8, asr r1
   113fc:	andeq	ip, r2, r8, asr r1
   11400:	andeq	r0, r0, r0
   11404:	push	{r4, lr}
   11408:	ldr	r4, [pc, #24]	; 11428 <__assert_fail@plt+0xf4>
   1140c:	ldrb	r3, [r4]
   11410:	cmp	r3, #0
   11414:	popne	{r4, pc}
   11418:	bl	113a0 <__assert_fail@plt+0x6c>
   1141c:	mov	r3, #1
   11420:	strb	r3, [r4]
   11424:	pop	{r4, pc}
   11428:	andeq	ip, r2, ip, ror r1
   1142c:	b	113cc <__assert_fail@plt+0x98>
   11430:	push	{fp, lr}
   11434:	mov	fp, sp
   11438:	sub	sp, sp, #64	; 0x40
   1143c:	mov	r4, r0
   11440:	cmp	r0, #0
   11444:	bne	11788 <__assert_fail@plt+0x454>
   11448:	movw	r1, #40251	; 0x9d3b
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	1110c <dcgettext@plt>
   1145c:	mov	r1, r0
   11460:	movw	r0, #49720	; 0xc238
   11464:	movt	r0, #2
   11468:	ldr	r2, [r0]
   1146c:	mov	r0, #1
   11470:	mov	r3, r2
   11474:	str	r2, [sp]
   11478:	bl	1125c <__printf_chk@plt>
   1147c:	movw	r1, #40414	; 0x9dde
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	1110c <dcgettext@plt>
   11490:	movw	r7, #49524	; 0xc174
   11494:	movt	r7, #2
   11498:	ldr	r1, [r7]
   1149c:	bl	1107c <fputs_unlocked@plt>
   114a0:	movw	r1, #43894	; 0xab76
   114a4:	mov	r0, #0
   114a8:	mov	r2, #5
   114ac:	movt	r1, #1
   114b0:	bl	1110c <dcgettext@plt>
   114b4:	ldr	r1, [r7]
   114b8:	bl	1107c <fputs_unlocked@plt>
   114bc:	movw	r1, #40596	; 0x9e94
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	movt	r1, #1
   114cc:	bl	1110c <dcgettext@plt>
   114d0:	ldr	r1, [r7]
   114d4:	bl	1107c <fputs_unlocked@plt>
   114d8:	movw	r1, #43950	; 0xabae
   114dc:	mov	r0, #0
   114e0:	mov	r2, #5
   114e4:	movt	r1, #1
   114e8:	bl	1110c <dcgettext@plt>
   114ec:	ldr	r1, [r7]
   114f0:	bl	1107c <fputs_unlocked@plt>
   114f4:	movw	r1, #40987	; 0xa01b
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	1110c <dcgettext@plt>
   11508:	ldr	r1, [r7]
   1150c:	bl	1107c <fputs_unlocked@plt>
   11510:	movw	r1, #41274	; 0xa13a
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	1110c <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	1107c <fputs_unlocked@plt>
   1152c:	movw	r1, #41826	; 0xa362
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	1110c <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	1107c <fputs_unlocked@plt>
   11548:	movw	r1, #41871	; 0xa38f
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	1110c <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	1107c <fputs_unlocked@plt>
   11564:	movw	r1, #41925	; 0xa3c5
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	1110c <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	1107c <fputs_unlocked@plt>
   11580:	movw	r1, #42240	; 0xa500
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	1110c <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	1107c <fputs_unlocked@plt>
   1159c:	movw	r1, #42514	; 0xa612
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	1110c <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	1107c <fputs_unlocked@plt>
   115b8:	movw	r1, #42680	; 0xa6b8
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	1110c <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	1107c <fputs_unlocked@plt>
   115d4:	movw	r1, #42929	; 0xa7b1
   115d8:	mov	r0, #0
   115dc:	mov	r2, #5
   115e0:	movt	r1, #1
   115e4:	bl	1110c <dcgettext@plt>
   115e8:	ldr	r1, [r7]
   115ec:	bl	1107c <fputs_unlocked@plt>
   115f0:	movw	r1, #43173	; 0xa8a5
   115f4:	mov	r0, #0
   115f8:	mov	r2, #5
   115fc:	movt	r1, #1
   11600:	bl	1110c <dcgettext@plt>
   11604:	ldr	r1, [r7]
   11608:	bl	1107c <fputs_unlocked@plt>
   1160c:	movw	r1, #43267	; 0xa903
   11610:	mov	r0, #0
   11614:	mov	r2, #5
   11618:	movt	r1, #1
   1161c:	bl	1110c <dcgettext@plt>
   11620:	ldr	r1, [r7]
   11624:	bl	1107c <fputs_unlocked@plt>
   11628:	movw	r0, #45456	; 0xb190
   1162c:	mov	r2, #48	; 0x30
   11630:	add	r6, sp, #8
   11634:	movw	r5, #43499	; 0xa9eb
   11638:	movt	r0, #1
   1163c:	movt	r5, #1
   11640:	add	r1, r0, #32
   11644:	add	r3, r0, #16
   11648:	vld1.64	{d18-d19}, [r0], r2
   1164c:	vld1.64	{d16-d17}, [r1]
   11650:	vld1.64	{d20-d21}, [r3]
   11654:	add	r1, r6, #32
   11658:	vldr	d22, [r0]
   1165c:	add	r0, r6, #16
   11660:	vst1.64	{d16-d17}, [r1]
   11664:	movw	r1, #44025	; 0xabf9
   11668:	vst1.64	{d20-d21}, [r0]
   1166c:	mov	r0, r6
   11670:	vst1.64	{d18-d19}, [r0], r2
   11674:	movt	r1, #1
   11678:	vstr	d22, [r0]
   1167c:	mov	r0, r5
   11680:	bl	11094 <strcmp@plt>
   11684:	cmp	r0, #0
   11688:	ldrne	r1, [r6, #8]!
   1168c:	cmpne	r1, #0
   11690:	bne	1167c <__assert_fail@plt+0x348>
   11694:	ldr	r6, [r6, #4]
   11698:	movw	r1, #44120	; 0xac58
   1169c:	mov	r0, #0
   116a0:	mov	r2, #5
   116a4:	movt	r1, #1
   116a8:	bl	1110c <dcgettext@plt>
   116ac:	movw	r2, #43659	; 0xaa8b
   116b0:	movw	r3, #44143	; 0xac6f
   116b4:	mov	r1, r0
   116b8:	mov	r0, #1
   116bc:	movt	r2, #1
   116c0:	movt	r3, #1
   116c4:	bl	1125c <__printf_chk@plt>
   116c8:	cmp	r6, #0
   116cc:	mov	r0, #5
   116d0:	mov	r1, #0
   116d4:	moveq	r6, r5
   116d8:	bl	112b0 <setlocale@plt>
   116dc:	cmp	r0, #0
   116e0:	beq	11718 <__assert_fail@plt+0x3e4>
   116e4:	movw	r1, #44183	; 0xac97
   116e8:	mov	r2, #3
   116ec:	movt	r1, #1
   116f0:	bl	11310 <strncmp@plt>
   116f4:	cmp	r0, #0
   116f8:	beq	11718 <__assert_fail@plt+0x3e4>
   116fc:	movw	r1, #44187	; 0xac9b
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	1110c <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	1107c <fputs_unlocked@plt>
   11718:	movw	r1, #44258	; 0xace2
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	1110c <dcgettext@plt>
   1172c:	movw	r2, #44143	; 0xac6f
   11730:	mov	r1, r0
   11734:	mov	r0, #1
   11738:	mov	r3, r5
   1173c:	movt	r2, #1
   11740:	bl	1125c <__printf_chk@plt>
   11744:	movw	r1, #44285	; 0xacfd
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	1110c <dcgettext@plt>
   11758:	movw	r3, #44335	; 0xad2f
   1175c:	mov	r1, r0
   11760:	movw	r0, #44053	; 0xac15
   11764:	cmp	r6, r5
   11768:	mov	r2, r6
   1176c:	movt	r0, #1
   11770:	movt	r3, #1
   11774:	moveq	r3, r0
   11778:	mov	r0, #1
   1177c:	bl	1125c <__printf_chk@plt>
   11780:	mov	r0, r4
   11784:	bl	111f0 <exit@plt>
   11788:	movw	r0, #49512	; 0xc168
   1178c:	movw	r1, #40212	; 0x9d14
   11790:	mov	r2, #5
   11794:	movt	r0, #2
   11798:	movt	r1, #1
   1179c:	ldr	r5, [r0]
   117a0:	mov	r0, #0
   117a4:	bl	1110c <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	movw	r0, #49720	; 0xc238
   117b0:	mov	r1, #1
   117b4:	movt	r0, #2
   117b8:	ldr	r3, [r0]
   117bc:	mov	r0, r5
   117c0:	bl	11280 <__fprintf_chk@plt>
   117c4:	mov	r0, r4
   117c8:	bl	111f0 <exit@plt>
   117cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117d0:	add	fp, sp, #28
   117d4:	sub	sp, sp, #148	; 0x94
   117d8:	sub	sp, sp, #8192	; 0x2000
   117dc:	mov	r6, r0
   117e0:	ldr	r0, [r1]
   117e4:	mov	r5, r1
   117e8:	bl	15e68 <__assert_fail@plt+0x4b34>
   117ec:	movw	r1, #44335	; 0xad2f
   117f0:	mov	r0, #6
   117f4:	mov	r7, #6
   117f8:	movt	r1, #1
   117fc:	bl	112b0 <setlocale@plt>
   11800:	movw	r4, #43663	; 0xaa8f
   11804:	movw	r1, #43502	; 0xa9ee
   11808:	movt	r4, #1
   1180c:	movt	r1, #1
   11810:	mov	r0, r4
   11814:	bl	112f8 <bindtextdomain@plt>
   11818:	mov	r0, r4
   1181c:	bl	11124 <textdomain@plt>
   11820:	movw	r0, #22468	; 0x57c4
   11824:	movt	r0, #1
   11828:	bl	19cec <__assert_fail@plt+0x89b8>
   1182c:	movw	r0, #49536	; 0xc180
   11830:	vmov.i32	q8, #0	; 0x00000000
   11834:	mov	r4, #5
   11838:	mov	r8, #0
   1183c:	mov	r9, #1
   11840:	movw	sl, #45165	; 0xb06d
   11844:	movt	r0, #2
   11848:	movt	sl, #1
   1184c:	add	r1, r0, #16
   11850:	mov	r3, r0
   11854:	vst1.64	{d16-d17}, [r1]
   11858:	movw	r1, #49576	; 0xc1a8
   1185c:	movt	r1, #2
   11860:	add	r2, r1, #16
   11864:	vst1.64	{d16-d17}, [r2]
   11868:	mov	r2, #32
   1186c:	vst1.64	{d16-d17}, [r3], r2
   11870:	str	r4, [r3]
   11874:	mov	r3, r1
   11878:	movw	r4, #13632	; 0x3540
   1187c:	str	r9, [r0, #4]
   11880:	vst1.64	{d16-d17}, [r3], r2
   11884:	mov	r2, #7
   11888:	movt	r4, #1
   1188c:	str	r2, [r3]
   11890:	movw	r3, #49612	; 0xc1cc
   11894:	str	r7, [r1, #16]
   11898:	movw	r7, #45200	; 0xb090
   1189c:	movt	r3, #2
   118a0:	movt	r7, #1
   118a4:	str	r8, [r3]
   118a8:	movw	r3, #49616	; 0xc1d0
   118ac:	movt	r3, #2
   118b0:	str	r8, [r3]
   118b4:	movw	r3, #49620	; 0xc1d4
   118b8:	movt	r3, #2
   118bc:	str	r8, [r3]
   118c0:	movw	r3, #49624	; 0xc1d8
   118c4:	movt	r3, #2
   118c8:	str	r4, [r3]
   118cc:	movw	r4, #49628	; 0xc1dc
   118d0:	mov	r3, #8
   118d4:	movt	r4, #2
   118d8:	str	r3, [r4]
   118dc:	movw	r3, #49632	; 0xc1e0
   118e0:	movt	r3, #2
   118e4:	str	r2, [r3]
   118e8:	mov	r2, #2
   118ec:	str	r2, [r0, #8]
   118f0:	mov	r2, #4
   118f4:	str	r2, [r0, #16]
   118f8:	movw	r0, #49636	; 0xc1e4
   118fc:	movt	r0, #2
   11900:	strb	r8, [r0]
   11904:	mov	r0, #0
   11908:	str	r0, [sp, #32]
   1190c:	b	11918 <__assert_fail@plt+0x5e4>
   11910:	bl	13698 <__assert_fail@plt+0x2364>
   11914:	and	r9, r9, r0
   11918:	mvn	r0, #0
   1191c:	mov	r1, r5
   11920:	mov	r2, sl
   11924:	mov	r3, r7
   11928:	str	r0, [sp, #36]	; 0x24
   1192c:	add	r0, sp, #36	; 0x24
   11930:	str	r0, [sp]
   11934:	mov	r0, r6
   11938:	bl	111d8 <getopt_long@plt>
   1193c:	add	r0, r0, #3
   11940:	cmp	r0, #260	; 0x104
   11944:	bhi	13300 <__assert_fail@plt+0x1fcc>
   11948:	add	r1, pc, #0
   1194c:	ldr	pc, [r1, r0, lsl #2]
   11950:	andeq	r3, r1, r8, lsl #6
   11954:	andeq	r3, r1, r0, asr r3
   11958:	andeq	r2, r1, r0, lsr r1
   1195c:	andeq	r3, r1, r0, lsl #6
   11960:	andeq	r3, r1, r0, lsl #6
   11964:	andeq	r3, r1, r0, lsl #6
   11968:	andeq	r3, r1, r0, lsl #6
   1196c:	andeq	r3, r1, r0, lsl #6
   11970:	andeq	r3, r1, r0, lsl #6
   11974:	andeq	r3, r1, r0, lsl #6
   11978:	andeq	r3, r1, r0, lsl #6
   1197c:	andeq	r3, r1, r0, lsl #6
   11980:	andeq	r3, r1, r0, lsl #6
   11984:	andeq	r3, r1, r0, lsl #6
   11988:	andeq	r3, r1, r0, lsl #6
   1198c:	andeq	r3, r1, r0, lsl #6
   11990:	andeq	r3, r1, r0, lsl #6
   11994:	andeq	r3, r1, r0, lsl #6
   11998:	andeq	r3, r1, r0, lsl #6
   1199c:	andeq	r3, r1, r0, lsl #6
   119a0:	andeq	r3, r1, r0, lsl #6
   119a4:	andeq	r3, r1, r0, lsl #6
   119a8:	andeq	r3, r1, r0, lsl #6
   119ac:	andeq	r3, r1, r0, lsl #6
   119b0:	andeq	r3, r1, r0, lsl #6
   119b4:	andeq	r3, r1, r0, lsl #6
   119b8:	andeq	r3, r1, r0, lsl #6
   119bc:	andeq	r3, r1, r0, lsl #6
   119c0:	andeq	r3, r1, r0, lsl #6
   119c4:	andeq	r3, r1, r0, lsl #6
   119c8:	andeq	r3, r1, r0, lsl #6
   119cc:	andeq	r3, r1, r0, lsl #6
   119d0:	andeq	r3, r1, r0, lsl #6
   119d4:	andeq	r3, r1, r0, lsl #6
   119d8:	andeq	r3, r1, r0, lsl #6
   119dc:	andeq	r3, r1, r0, lsl #6
   119e0:	andeq	r3, r1, r0, lsl #6
   119e4:	andeq	r3, r1, r0, lsl #6
   119e8:	andeq	r3, r1, r0, lsl #6
   119ec:	andeq	r3, r1, r0, lsl #6
   119f0:	andeq	r3, r1, r0, lsl #6
   119f4:	andeq	r3, r1, r0, lsl #6
   119f8:	andeq	r3, r1, r0, lsl #6
   119fc:	andeq	r3, r1, r0, lsl #6
   11a00:	andeq	r3, r1, r0, lsl #6
   11a04:	andeq	r3, r1, r0, lsl #6
   11a08:	andeq	r3, r1, r0, lsl #6
   11a0c:	andeq	r3, r1, r0, lsl #6
   11a10:	andeq	r3, r1, r0, lsl #6
   11a14:	andeq	r3, r1, r0, lsl #6
   11a18:	andeq	r3, r1, r0, lsl #6
   11a1c:	andeq	r3, r1, r0, lsl #6
   11a20:	andeq	r3, r1, r0, lsl #6
   11a24:	andeq	r3, r1, r0, lsl #6
   11a28:	andeq	r3, r1, r0, lsl #6
   11a2c:	andeq	r3, r1, r0, lsl #6
   11a30:	andeq	r3, r1, r0, lsl #6
   11a34:	andeq	r3, r1, r0, lsl #6
   11a38:	andeq	r3, r1, r0, lsl #6
   11a3c:	andeq	r3, r1, r0, lsl #6
   11a40:	andeq	r3, r1, r0, lsl #6
   11a44:	andeq	r3, r1, r0, lsl #6
   11a48:	andeq	r3, r1, r0, lsl #6
   11a4c:	andeq	r3, r1, r0, lsl #6
   11a50:	andeq	r3, r1, r0, lsl #6
   11a54:	andeq	r3, r1, r0, lsl #6
   11a58:	andeq	r3, r1, r0, lsl #6
   11a5c:	andeq	r3, r1, r0, lsl #6
   11a60:	strdeq	r1, [r1], -r8
   11a64:	andeq	r1, r1, ip, ror sp
   11a68:	andeq	r3, r1, r0, lsl #6
   11a6c:	ldrdeq	r1, [r1], -r0
   11a70:	andeq	r3, r1, r0, lsl #6
   11a74:	andeq	r1, r1, r8, lsl #27
   11a78:	andeq	r3, r1, r0, lsl #6
   11a7c:	muleq	r1, r4, sp
   11a80:	andeq	r1, r1, r4, ror #26
   11a84:	andeq	r3, r1, r0, lsl #6
   11a88:	andeq	r3, r1, r0, lsl #6
   11a8c:	andeq	r1, r1, r4, ror #26
   11a90:	andeq	r3, r1, r0, lsl #6
   11a94:	andeq	r1, r1, r0, lsr pc
   11a98:	ldrdeq	r1, [r1], -r4
   11a9c:	andeq	r3, r1, r0, lsl #6
   11aa0:	andeq	r3, r1, r0, lsl #6
   11aa4:	andeq	r3, r1, r0, lsl #6
   11aa8:	andeq	r1, r1, r4, lsl #29
   11aac:	andeq	r3, r1, r0, lsl #6
   11ab0:	andeq	r3, r1, r0, lsl #6
   11ab4:	andeq	r3, r1, r0, lsl #6
   11ab8:	andeq	r3, r1, r0, lsl #6
   11abc:	muleq	r1, r4, sp
   11ac0:	andeq	r3, r1, r0, lsl #6
   11ac4:	andeq	r3, r1, r0, lsl #6
   11ac8:	andeq	r3, r1, r0, lsl #6
   11acc:	andeq	r3, r1, r0, lsl #6
   11ad0:	andeq	r3, r1, r0, lsl #6
   11ad4:	andeq	r3, r1, r0, lsl #6
   11ad8:	andeq	r3, r1, r0, lsl #6
   11adc:	andeq	r3, r1, r0, lsl #6
   11ae0:			; <UNDEFINED> instruction: 0x00011dbc
   11ae4:	andeq	r1, r1, r8, ror #29
   11ae8:	andeq	r1, r1, r0, ror #27
   11aec:	andeq	r1, r1, ip, ror #27
   11af0:	andeq	r1, r1, r8, lsl #27
   11af4:	ldrdeq	r1, [r1], -ip
   11af8:	andeq	r3, r1, r0, lsl #6
   11afc:	andeq	r1, r1, r0, ror sp
   11b00:	andeq	r1, r1, r8, ror lr
   11b04:	strdeq	r1, [r1], -r4
   11b08:	andeq	r3, r1, r0, lsl #6
   11b0c:	andeq	r1, r1, r4, ror #26
   11b10:	andeq	r3, r1, r0, lsl #6
   11b14:	andeq	r3, r1, r0, lsl #6
   11b18:	andeq	r1, r1, ip, ror sp
   11b1c:	andeq	r3, r1, r0, lsl #6
   11b20:	andeq	r3, r1, r0, lsl #6
   11b24:	andeq	r3, r1, r0, lsl #6
   11b28:	andeq	r1, r1, r8, asr #27
   11b2c:	andeq	r1, r1, r0, lsr #27
   11b30:	andeq	r3, r1, r0, lsl #6
   11b34:	strdeq	r1, [r1], -r4
   11b38:	andeq	r2, r1, r8
   11b3c:	andeq	r1, r1, r0, ror sp
   11b40:	andeq	r3, r1, r0, lsl #6
   11b44:	andeq	r3, r1, r0, lsl #6
   11b48:	andeq	r3, r1, r0, lsl #6
   11b4c:	andeq	r3, r1, r0, lsl #6
   11b50:	andeq	r3, r1, r0, lsl #6
   11b54:	andeq	r3, r1, r0, lsl #6
   11b58:	andeq	r3, r1, r0, lsl #6
   11b5c:	andeq	r3, r1, r0, lsl #6
   11b60:	andeq	r3, r1, r0, lsl #6
   11b64:	andeq	r3, r1, r0, lsl #6
   11b68:	andeq	r3, r1, r0, lsl #6
   11b6c:	andeq	r3, r1, r0, lsl #6
   11b70:	andeq	r3, r1, r0, lsl #6
   11b74:	andeq	r3, r1, r0, lsl #6
   11b78:	andeq	r3, r1, r0, lsl #6
   11b7c:	andeq	r3, r1, r0, lsl #6
   11b80:	andeq	r3, r1, r0, lsl #6
   11b84:	andeq	r3, r1, r0, lsl #6
   11b88:	andeq	r3, r1, r0, lsl #6
   11b8c:	andeq	r3, r1, r0, lsl #6
   11b90:	andeq	r3, r1, r0, lsl #6
   11b94:	andeq	r3, r1, r0, lsl #6
   11b98:	andeq	r3, r1, r0, lsl #6
   11b9c:	andeq	r3, r1, r0, lsl #6
   11ba0:	andeq	r3, r1, r0, lsl #6
   11ba4:	andeq	r3, r1, r0, lsl #6
   11ba8:	andeq	r3, r1, r0, lsl #6
   11bac:	andeq	r3, r1, r0, lsl #6
   11bb0:	andeq	r3, r1, r0, lsl #6
   11bb4:	andeq	r3, r1, r0, lsl #6
   11bb8:	andeq	r3, r1, r0, lsl #6
   11bbc:	andeq	r3, r1, r0, lsl #6
   11bc0:	andeq	r3, r1, r0, lsl #6
   11bc4:	andeq	r3, r1, r0, lsl #6
   11bc8:	andeq	r3, r1, r0, lsl #6
   11bcc:	andeq	r3, r1, r0, lsl #6
   11bd0:	andeq	r3, r1, r0, lsl #6
   11bd4:	andeq	r3, r1, r0, lsl #6
   11bd8:	andeq	r3, r1, r0, lsl #6
   11bdc:	andeq	r3, r1, r0, lsl #6
   11be0:	andeq	r3, r1, r0, lsl #6
   11be4:	andeq	r3, r1, r0, lsl #6
   11be8:	andeq	r3, r1, r0, lsl #6
   11bec:	andeq	r3, r1, r0, lsl #6
   11bf0:	andeq	r3, r1, r0, lsl #6
   11bf4:	andeq	r3, r1, r0, lsl #6
   11bf8:	andeq	r3, r1, r0, lsl #6
   11bfc:	andeq	r3, r1, r0, lsl #6
   11c00:	andeq	r3, r1, r0, lsl #6
   11c04:	andeq	r3, r1, r0, lsl #6
   11c08:	andeq	r3, r1, r0, lsl #6
   11c0c:	andeq	r3, r1, r0, lsl #6
   11c10:	andeq	r3, r1, r0, lsl #6
   11c14:	andeq	r3, r1, r0, lsl #6
   11c18:	andeq	r3, r1, r0, lsl #6
   11c1c:	andeq	r3, r1, r0, lsl #6
   11c20:	andeq	r3, r1, r0, lsl #6
   11c24:	andeq	r3, r1, r0, lsl #6
   11c28:	andeq	r3, r1, r0, lsl #6
   11c2c:	andeq	r3, r1, r0, lsl #6
   11c30:	andeq	r3, r1, r0, lsl #6
   11c34:	andeq	r3, r1, r0, lsl #6
   11c38:	andeq	r3, r1, r0, lsl #6
   11c3c:	andeq	r3, r1, r0, lsl #6
   11c40:	andeq	r3, r1, r0, lsl #6
   11c44:	andeq	r3, r1, r0, lsl #6
   11c48:	andeq	r3, r1, r0, lsl #6
   11c4c:	andeq	r3, r1, r0, lsl #6
   11c50:	andeq	r3, r1, r0, lsl #6
   11c54:	andeq	r3, r1, r0, lsl #6
   11c58:	andeq	r3, r1, r0, lsl #6
   11c5c:	andeq	r3, r1, r0, lsl #6
   11c60:	andeq	r3, r1, r0, lsl #6
   11c64:	andeq	r3, r1, r0, lsl #6
   11c68:	andeq	r3, r1, r0, lsl #6
   11c6c:	andeq	r3, r1, r0, lsl #6
   11c70:	andeq	r3, r1, r0, lsl #6
   11c74:	andeq	r3, r1, r0, lsl #6
   11c78:	andeq	r3, r1, r0, lsl #6
   11c7c:	andeq	r3, r1, r0, lsl #6
   11c80:	andeq	r3, r1, r0, lsl #6
   11c84:	andeq	r3, r1, r0, lsl #6
   11c88:	andeq	r3, r1, r0, lsl #6
   11c8c:	andeq	r3, r1, r0, lsl #6
   11c90:	andeq	r3, r1, r0, lsl #6
   11c94:	andeq	r3, r1, r0, lsl #6
   11c98:	andeq	r3, r1, r0, lsl #6
   11c9c:	andeq	r3, r1, r0, lsl #6
   11ca0:	andeq	r3, r1, r0, lsl #6
   11ca4:	andeq	r3, r1, r0, lsl #6
   11ca8:	andeq	r3, r1, r0, lsl #6
   11cac:	andeq	r3, r1, r0, lsl #6
   11cb0:	andeq	r3, r1, r0, lsl #6
   11cb4:	andeq	r3, r1, r0, lsl #6
   11cb8:	andeq	r3, r1, r0, lsl #6
   11cbc:	andeq	r3, r1, r0, lsl #6
   11cc0:	andeq	r3, r1, r0, lsl #6
   11cc4:	andeq	r3, r1, r0, lsl #6
   11cc8:	andeq	r3, r1, r0, lsl #6
   11ccc:	andeq	r3, r1, r0, lsl #6
   11cd0:	andeq	r3, r1, r0, lsl #6
   11cd4:	andeq	r3, r1, r0, lsl #6
   11cd8:	andeq	r3, r1, r0, lsl #6
   11cdc:	andeq	r3, r1, r0, lsl #6
   11ce0:	andeq	r3, r1, r0, lsl #6
   11ce4:	andeq	r3, r1, r0, lsl #6
   11ce8:	andeq	r3, r1, r0, lsl #6
   11cec:	andeq	r3, r1, r0, lsl #6
   11cf0:	andeq	r3, r1, r0, lsl #6
   11cf4:	andeq	r3, r1, r0, lsl #6
   11cf8:	andeq	r3, r1, r0, lsl #6
   11cfc:	andeq	r3, r1, r0, lsl #6
   11d00:	andeq	r3, r1, r0, lsl #6
   11d04:	andeq	r3, r1, r0, lsl #6
   11d08:	andeq	r3, r1, r0, lsl #6
   11d0c:	andeq	r3, r1, r0, lsl #6
   11d10:	andeq	r3, r1, r0, lsl #6
   11d14:	andeq	r3, r1, r0, lsl #6
   11d18:	andeq	r3, r1, r0, lsl #6
   11d1c:	andeq	r3, r1, r0, lsl #6
   11d20:	andeq	r3, r1, r0, lsl #6
   11d24:	andeq	r3, r1, r0, lsl #6
   11d28:	andeq	r3, r1, r0, lsl #6
   11d2c:	andeq	r3, r1, r0, lsl #6
   11d30:	andeq	r3, r1, r0, lsl #6
   11d34:	andeq	r3, r1, r0, lsl #6
   11d38:	andeq	r3, r1, r0, lsl #6
   11d3c:	andeq	r3, r1, r0, lsl #6
   11d40:	andeq	r3, r1, r0, lsl #6
   11d44:	andeq	r3, r1, r0, lsl #6
   11d48:	andeq	r3, r1, r0, lsl #6
   11d4c:	andeq	r3, r1, r0, lsl #6
   11d50:	andeq	r3, r1, r0, lsl #6
   11d54:	andeq	r3, r1, r0, lsl #6
   11d58:	andeq	r3, r1, r0, lsl #6
   11d5c:	andeq	r1, r1, r8, ror pc
   11d60:	andeq	r1, r1, r4, lsl #31
   11d64:	movw	r0, #43644	; 0xaa7c
   11d68:	movt	r0, #1
   11d6c:	b	11910 <__assert_fail@plt+0x5dc>
   11d70:	movw	r0, #43656	; 0xaa88
   11d74:	movt	r0, #1
   11d78:	b	11910 <__assert_fail@plt+0x5dc>
   11d7c:	movw	r0, #43650	; 0xaa82
   11d80:	movt	r0, #1
   11d84:	b	11910 <__assert_fail@plt+0x5dc>
   11d88:	movw	r0, #43632	; 0xaa70
   11d8c:	movt	r0, #1
   11d90:	b	11910 <__assert_fail@plt+0x5dc>
   11d94:	movw	r0, #43638	; 0xaa76
   11d98:	movt	r0, #1
   11d9c:	b	11910 <__assert_fail@plt+0x5dc>
   11da0:	movw	r0, #49528	; 0xc178
   11da4:	movt	r0, #2
   11da8:	ldr	r0, [r0]
   11dac:	bl	13698 <__assert_fail@plt+0x2364>
   11db0:	and	r9, r9, r0
   11db4:	mov	r8, #1
   11db8:	b	11918 <__assert_fail@plt+0x5e4>
   11dbc:	movw	r0, #44928	; 0xaf80
   11dc0:	movt	r0, #1
   11dc4:	b	11910 <__assert_fail@plt+0x5dc>
   11dc8:	movw	r0, #43653	; 0xaa85
   11dcc:	movt	r0, #1
   11dd0:	b	11910 <__assert_fail@plt+0x5dc>
   11dd4:	movw	r0, #43647	; 0xaa7f
   11dd8:	movt	r0, #1
   11ddc:	b	11910 <__assert_fail@plt+0x5dc>
   11de0:	movw	r0, #44949	; 0xaf95
   11de4:	movt	r0, #1
   11de8:	b	11910 <__assert_fail@plt+0x5dc>
   11dec:	movw	r0, #43629	; 0xaa6d
   11df0:	movt	r0, #1
   11df4:	b	11910 <__assert_fail@plt+0x5dc>
   11df8:	movw	r4, #49528	; 0xc178
   11dfc:	movt	r4, #2
   11e00:	ldr	r0, [r4]
   11e04:	ldrb	r0, [r0]
   11e08:	sub	r0, r0, #100	; 0x64
   11e0c:	cmp	r0, #20
   11e10:	bhi	13358 <__assert_fail@plt+0x2024>
   11e14:	add	r1, pc, #0
   11e18:	ldr	pc, [r1, r0, lsl #2]
   11e1c:	andeq	r1, r1, r0, ror lr
   11e20:	andeq	r3, r1, r8, asr r3
   11e24:	andeq	r3, r1, r8, asr r3
   11e28:	andeq	r3, r1, r8, asr r3
   11e2c:	andeq	r3, r1, r8, asr r3
   11e30:	andeq	r3, r1, r8, asr r3
   11e34:	andeq	r3, r1, r8, asr r3
   11e38:	andeq	r3, r1, r8, asr r3
   11e3c:	andeq	r3, r1, r8, asr r3
   11e40:	andeq	r3, r1, r8, asr r3
   11e44:	ldrdeq	r2, [r1], -r0
   11e48:	strdeq	r2, [r1], -r4
   11e4c:	andeq	r3, r1, r8, asr r3
   11e50:	andeq	r3, r1, r8, asr r3
   11e54:	andeq	r3, r1, r8, asr r3
   11e58:	andeq	r3, r1, r8, asr r3
   11e5c:	andeq	r3, r1, r8, asr r3
   11e60:	andeq	r3, r1, r8, asr r3
   11e64:	andeq	r3, r1, r8, asr r3
   11e68:	andeq	r3, r1, r8, asr r3
   11e6c:	andeq	r2, r1, r4, lsr #1
   11e70:	mov	r0, #10
   11e74:	b	120f8 <__assert_fail@plt+0xdc4>
   11e78:	movw	r0, #43641	; 0xaa79
   11e7c:	movt	r0, #1
   11e80:	b	11910 <__assert_fail@plt+0x5dc>
   11e84:	movw	r4, #49528	; 0xc178
   11e88:	movt	r4, #2
   11e8c:	ldr	r0, [r4]
   11e90:	cmp	r0, #0
   11e94:	beq	12058 <__assert_fail@plt+0xd24>
   11e98:	movw	r1, #45152	; 0xb060
   11e9c:	add	r3, sp, #40	; 0x28
   11ea0:	mov	r2, #0
   11ea4:	movt	r1, #1
   11ea8:	str	r1, [sp]
   11eac:	mov	r1, #0
   11eb0:	bl	18b3c <__assert_fail@plt+0x7808>
   11eb4:	cmp	r0, #0
   11eb8:	bne	13384 <__assert_fail@plt+0x2050>
   11ebc:	ldr	r0, [sp, #44]	; 0x2c
   11ec0:	cmp	r0, #0
   11ec4:	bne	133f4 <__assert_fail@plt+0x20c0>
   11ec8:	ldr	r0, [sp, #40]	; 0x28
   11ecc:	b	1205c <__assert_fail@plt+0xd28>
   11ed0:	movw	r0, #43626	; 0xaa6a
   11ed4:	movt	r0, #1
   11ed8:	b	11910 <__assert_fail@plt+0x5dc>
   11edc:	movw	r0, #43635	; 0xaa73
   11ee0:	movt	r0, #1
   11ee4:	b	11910 <__assert_fail@plt+0x5dc>
   11ee8:	movw	r0, #43623	; 0xaa67
   11eec:	movt	r0, #1
   11ef0:	b	11910 <__assert_fail@plt+0x5dc>
   11ef4:	movw	r4, #49528	; 0xc178
   11ef8:	movw	r1, #45152	; 0xb060
   11efc:	movw	r3, #49640	; 0xc1e8
   11f00:	mov	r2, #0
   11f04:	movt	r4, #2
   11f08:	movt	r1, #1
   11f0c:	movt	r3, #2
   11f10:	ldr	r0, [r4]
   11f14:	str	r1, [sp]
   11f18:	mov	r1, #0
   11f1c:	bl	18b3c <__assert_fail@plt+0x7808>
   11f20:	mov	r8, #1
   11f24:	cmp	r0, #0
   11f28:	beq	11918 <__assert_fail@plt+0x5e4>
   11f2c:	b	133a0 <__assert_fail@plt+0x206c>
   11f30:	movw	r0, #49648	; 0xc1f0
   11f34:	movw	r4, #49528	; 0xc178
   11f38:	mov	r8, #1
   11f3c:	movw	r1, #45152	; 0xb060
   11f40:	movw	r3, #49656	; 0xc1f8
   11f44:	mov	r2, #0
   11f48:	movt	r0, #2
   11f4c:	movt	r4, #2
   11f50:	movt	r1, #1
   11f54:	movt	r3, #2
   11f58:	strb	r8, [r0]
   11f5c:	ldr	r0, [r4]
   11f60:	str	r1, [sp]
   11f64:	mov	r1, #0
   11f68:	bl	18b3c <__assert_fail@plt+0x7808>
   11f6c:	cmp	r0, #0
   11f70:	beq	11918 <__assert_fail@plt+0x5e4>
   11f74:	b	133bc <__assert_fail@plt+0x2088>
   11f78:	movw	r0, #49669	; 0xc205
   11f7c:	movt	r0, #2
   11f80:	b	11fe8 <__assert_fail@plt+0xcb4>
   11f84:	movw	r0, #49528	; 0xc178
   11f88:	movw	r4, #45392	; 0xb150
   11f8c:	mov	r3, #4
   11f90:	mov	r2, #1
   11f94:	movt	r0, #2
   11f98:	str	r3, [sp]
   11f9c:	movt	r4, #1
   11fa0:	ldr	r1, [r0]
   11fa4:	movw	r0, #49420	; 0xc10c
   11fa8:	mov	r3, r4
   11fac:	movt	r0, #2
   11fb0:	ldr	r0, [r0]
   11fb4:	stmib	sp, {r0, r2}
   11fb8:	movw	r0, #43614	; 0xaa5e
   11fbc:	movw	r2, #45400	; 0xb158
   11fc0:	movt	r0, #1
   11fc4:	movt	r2, #1
   11fc8:	bl	15538 <__assert_fail@plt+0x4204>
   11fcc:	ldr	r0, [r4, r0, lsl #2]
   11fd0:	cmp	r0, #0
   11fd4:	beq	12090 <__assert_fail@plt+0xd5c>
   11fd8:	cmp	r0, #1
   11fdc:	bne	11918 <__assert_fail@plt+0x5e4>
   11fe0:	movw	r0, #49670	; 0xc206
   11fe4:	movt	r0, #2
   11fe8:	mov	r1, #1
   11fec:	strb	r1, [r0]
   11ff0:	b	11918 <__assert_fail@plt+0x5e4>
   11ff4:	movw	r0, #49668	; 0xc204
   11ff8:	mov	r8, #1
   11ffc:	movt	r0, #2
   12000:	strb	r8, [r0]
   12004:	b	11918 <__assert_fail@plt+0x5e4>
   12008:	movw	r4, #49528	; 0xc178
   1200c:	mov	r8, #1
   12010:	movt	r4, #2
   12014:	ldr	r0, [r4]
   12018:	cmp	r0, #0
   1201c:	beq	1207c <__assert_fail@plt+0xd48>
   12020:	movw	r1, #44335	; 0xad2f
   12024:	sub	r3, fp, #136	; 0x88
   12028:	mov	r2, #10
   1202c:	movt	r1, #1
   12030:	str	r1, [sp]
   12034:	mov	r1, #0
   12038:	bl	18b3c <__assert_fail@plt+0x7808>
   1203c:	cmp	r0, #0
   12040:	bne	133d8 <__assert_fail@plt+0x20a4>
   12044:	ldr	r0, [fp, #-132]	; 0xffffff7c
   12048:	cmp	r0, #0
   1204c:	bne	133f4 <__assert_fail@plt+0x20c0>
   12050:	ldr	r0, [fp, #-136]	; 0xffffff78
   12054:	b	12080 <__assert_fail@plt+0xd4c>
   12058:	mov	r0, #3
   1205c:	movw	r1, #49636	; 0xc1e4
   12060:	mov	r8, #1
   12064:	movt	r1, #2
   12068:	strb	r8, [r1]
   1206c:	movw	r1, #49664	; 0xc200
   12070:	movt	r1, #2
   12074:	str	r0, [r1]
   12078:	b	11918 <__assert_fail@plt+0x5e4>
   1207c:	mov	r0, #32
   12080:	str	r0, [sp, #24]
   12084:	mov	r0, #1
   12088:	str	r0, [sp, #32]
   1208c:	b	11918 <__assert_fail@plt+0x5e4>
   12090:	movw	r0, #49670	; 0xc206
   12094:	mov	r1, #0
   12098:	movt	r0, #2
   1209c:	strb	r1, [r0]
   120a0:	b	11918 <__assert_fail@plt+0x5e4>
   120a4:	movw	r1, #49628	; 0xc1dc
   120a8:	mov	r0, #16
   120ac:	movt	r1, #2
   120b0:	str	r0, [r1]
   120b4:	movw	r0, #49624	; 0xc1d8
   120b8:	movw	r1, #13632	; 0x3540
   120bc:	movt	r0, #2
   120c0:	movt	r1, #1
   120c4:	str	r1, [r0]
   120c8:	mov	r0, #6
   120cc:	b	1211c <__assert_fail@plt+0xde8>
   120d0:	movw	r1, #49632	; 0xc1e0
   120d4:	mov	r0, #0
   120d8:	movt	r1, #2
   120dc:	str	r0, [r1]
   120e0:	movw	r0, #13972	; 0x3694
   120e4:	movw	r1, #49624	; 0xc1d8
   120e8:	movt	r0, #1
   120ec:	movt	r1, #2
   120f0:	b	12124 <__assert_fail@plt+0xdf0>
   120f4:	mov	r0, #8
   120f8:	movw	r1, #49628	; 0xc1dc
   120fc:	movt	r1, #2
   12100:	str	r0, [r1]
   12104:	movw	r0, #49624	; 0xc1d8
   12108:	movw	r1, #13632	; 0x3540
   1210c:	movt	r0, #2
   12110:	movt	r1, #1
   12114:	str	r1, [r0]
   12118:	mov	r0, #7
   1211c:	movw	r1, #49632	; 0xc1e0
   12120:	movt	r1, #2
   12124:	str	r0, [r1]
   12128:	mov	r8, #1
   1212c:	b	11918 <__assert_fail@plt+0x5e4>
   12130:	mov	r0, #1
   12134:	tst	r9, #1
   12138:	beq	131d4 <__assert_fail@plt+0x1ea0>
   1213c:	movw	r0, #49636	; 0xc1e4
   12140:	movw	sl, #49612	; 0xc1cc
   12144:	movt	r0, #2
   12148:	movt	sl, #2
   1214c:	ldrb	r0, [r0]
   12150:	cmp	r0, #1
   12154:	bne	12164 <__assert_fail@plt+0xe30>
   12158:	ldr	r0, [sl]
   1215c:	cmp	r0, #0
   12160:	bne	13448 <__assert_fail@plt+0x2114>
   12164:	movw	r9, #49504	; 0xc160
   12168:	tst	r8, #1
   1216c:	movt	r9, #2
   12170:	ldr	r0, [r9]
   12174:	sub	r6, r6, r0
   12178:	beq	12190 <__assert_fail@plt+0xe5c>
   1217c:	movw	r1, #49669	; 0xc205
   12180:	movt	r1, #2
   12184:	ldrb	r1, [r1]
   12188:	cmp	r1, #1
   1218c:	bne	12438 <__assert_fail@plt+0x1104>
   12190:	cmp	r6, #3
   12194:	beq	1220c <__assert_fail@plt+0xed8>
   12198:	cmp	r6, #2
   1219c:	beq	121d8 <__assert_fail@plt+0xea4>
   121a0:	cmp	r6, #1
   121a4:	bne	1241c <__assert_fail@plt+0x10e8>
   121a8:	ldr	r4, [r5, r0, lsl #2]
   121ac:	movw	r1, #49669	; 0xc205
   121b0:	movt	r1, #2
   121b4:	ldrb	r1, [r1]
   121b8:	ldrb	r0, [r4]
   121bc:	cmp	r1, #0
   121c0:	beq	122c0 <__assert_fail@plt+0xf8c>
   121c4:	cmp	r0, #0
   121c8:	beq	123d0 <__assert_fail@plt+0x109c>
   121cc:	cmp	r0, #43	; 0x2b
   121d0:	addeq	r4, r4, #1
   121d4:	b	122cc <__assert_fail@plt+0xf98>
   121d8:	add	r0, r5, r0, lsl #2
   121dc:	movw	r8, #49669	; 0xc205
   121e0:	ldr	r4, [r0, #4]
   121e4:	movt	r8, #2
   121e8:	ldrb	r1, [r8]
   121ec:	ldrb	r0, [r4]
   121f0:	cmp	r1, #0
   121f4:	beq	12278 <__assert_fail@plt+0xf44>
   121f8:	cmp	r0, #0
   121fc:	beq	1241c <__assert_fail@plt+0x10e8>
   12200:	cmp	r0, #43	; 0x2b
   12204:	addeq	r4, r4, #1
   12208:	b	12284 <__assert_fail@plt+0xf50>
   1220c:	movw	r1, #49669	; 0xc205
   12210:	movt	r1, #2
   12214:	ldrb	r1, [r1]
   12218:	cmp	r1, #1
   1221c:	bne	1241c <__assert_fail@plt+0x10e8>
   12220:	add	r0, r5, r0, lsl #2
   12224:	ldr	r4, [r0, #4]
   12228:	ldrb	r0, [r4]
   1222c:	cmp	r0, #0
   12230:	beq	1241c <__assert_fail@plt+0x10e8>
   12234:	cmp	r0, #43	; 0x2b
   12238:	mov	r1, #46	; 0x2e
   1223c:	addeq	r4, r4, #1
   12240:	mov	r0, r4
   12244:	bl	11208 <strchr@plt>
   12248:	mov	r2, #10
   1224c:	cmp	r0, #0
   12250:	bne	123f8 <__assert_fail@plt+0x10c4>
   12254:	ldrb	r0, [r4]
   12258:	cmp	r0, #48	; 0x30
   1225c:	bne	123f4 <__assert_fail@plt+0x10c0>
   12260:	ldrb	r0, [r4, #1]
   12264:	mov	r2, #16
   12268:	orr	r0, r0, #32
   1226c:	cmp	r0, #120	; 0x78
   12270:	movne	r2, #8
   12274:	b	123f8 <__assert_fail@plt+0x10c4>
   12278:	cmp	r0, #43	; 0x2b
   1227c:	bne	12308 <__assert_fail@plt+0xfd4>
   12280:	add	r4, r4, #1
   12284:	mov	r0, r4
   12288:	mov	r1, #46	; 0x2e
   1228c:	bl	11208 <strchr@plt>
   12290:	mov	r2, #10
   12294:	cmp	r0, #0
   12298:	bne	1231c <__assert_fail@plt+0xfe8>
   1229c:	ldrb	r0, [r4]
   122a0:	cmp	r0, #48	; 0x30
   122a4:	bne	12318 <__assert_fail@plt+0xfe4>
   122a8:	ldrb	r0, [r4, #1]
   122ac:	mov	r2, #16
   122b0:	orr	r0, r0, #32
   122b4:	cmp	r0, #120	; 0x78
   122b8:	movne	r2, #8
   122bc:	b	1231c <__assert_fail@plt+0xfe8>
   122c0:	cmp	r0, #43	; 0x2b
   122c4:	bne	123d0 <__assert_fail@plt+0x109c>
   122c8:	add	r4, r4, #1
   122cc:	mov	r0, r4
   122d0:	mov	r1, #46	; 0x2e
   122d4:	bl	11208 <strchr@plt>
   122d8:	mov	r2, #10
   122dc:	cmp	r0, #0
   122e0:	bne	123a8 <__assert_fail@plt+0x1074>
   122e4:	ldrb	r0, [r4]
   122e8:	cmp	r0, #48	; 0x30
   122ec:	bne	123a4 <__assert_fail@plt+0x1070>
   122f0:	ldrb	r0, [r4, #1]
   122f4:	mov	r2, #16
   122f8:	orr	r0, r0, #32
   122fc:	cmp	r0, #120	; 0x78
   12300:	movne	r2, #8
   12304:	b	123a8 <__assert_fail@plt+0x1074>
   12308:	sub	r1, r0, #48	; 0x30
   1230c:	cmp	r1, #9
   12310:	bls	121f8 <__assert_fail@plt+0xec4>
   12314:	b	1241c <__assert_fail@plt+0x10e8>
   12318:	mov	r2, #8
   1231c:	movw	r7, #44967	; 0xafa7
   12320:	sub	r3, fp, #136	; 0x88
   12324:	mov	r0, r4
   12328:	mov	r1, #0
   1232c:	movt	r7, #1
   12330:	str	r7, [sp]
   12334:	bl	18b3c <__assert_fail@plt+0x7808>
   12338:	cmp	r0, #0
   1233c:	bne	1241c <__assert_fail@plt+0x10e8>
   12340:	ldrb	r0, [r8]
   12344:	cmp	r0, #1
   12348:	bne	13218 <__assert_fail@plt+0x1ee4>
   1234c:	ldr	r0, [r9]
   12350:	ldr	r4, [r5, r0, lsl #2]
   12354:	ldrb	r0, [r4]
   12358:	cmp	r0, #0
   1235c:	beq	13218 <__assert_fail@plt+0x1ee4>
   12360:	cmp	r0, #43	; 0x2b
   12364:	mov	r1, #46	; 0x2e
   12368:	addeq	r4, r4, #1
   1236c:	mov	r0, r4
   12370:	bl	11208 <strchr@plt>
   12374:	mov	r2, #10
   12378:	cmp	r0, #0
   1237c:	bne	131f8 <__assert_fail@plt+0x1ec4>
   12380:	ldrb	r0, [r4]
   12384:	cmp	r0, #48	; 0x30
   12388:	bne	131f4 <__assert_fail@plt+0x1ec0>
   1238c:	ldrb	r0, [r4, #1]
   12390:	mov	r2, #16
   12394:	orr	r0, r0, #32
   12398:	cmp	r0, #120	; 0x78
   1239c:	movne	r2, #8
   123a0:	b	131f8 <__assert_fail@plt+0x1ec4>
   123a4:	mov	r2, #8
   123a8:	movw	r0, #44967	; 0xafa7
   123ac:	add	r3, sp, #40	; 0x28
   123b0:	mov	r1, #0
   123b4:	mov	r6, #0
   123b8:	movt	r0, #1
   123bc:	str	r0, [sp]
   123c0:	mov	r0, r4
   123c4:	bl	18b3c <__assert_fail@plt+0x7808>
   123c8:	cmp	r0, #0
   123cc:	beq	123d8 <__assert_fail@plt+0x10a4>
   123d0:	mov	r6, #1
   123d4:	b	12438 <__assert_fail@plt+0x1104>
   123d8:	ldr	r0, [sp, #40]	; 0x28
   123dc:	ldr	r1, [sp, #44]	; 0x2c
   123e0:	movw	r2, #49640	; 0xc1e8
   123e4:	add	r4, r5, #4
   123e8:	movt	r2, #2
   123ec:	strd	r0, [r2]
   123f0:	b	1243c <__assert_fail@plt+0x1108>
   123f4:	mov	r2, #8
   123f8:	movw	r8, #44967	; 0xafa7
   123fc:	add	r3, sp, #40	; 0x28
   12400:	mov	r0, r4
   12404:	mov	r1, #0
   12408:	movt	r8, #1
   1240c:	str	r8, [sp]
   12410:	bl	18b3c <__assert_fail@plt+0x7808>
   12414:	cmp	r0, #0
   12418:	beq	12bbc <__assert_fail@plt+0x1888>
   1241c:	movw	r0, #49669	; 0xc205
   12420:	movt	r0, #2
   12424:	ldrb	r0, [r0]
   12428:	cmp	r0, #1
   1242c:	bne	12438 <__assert_fail@plt+0x1104>
   12430:	cmp	r6, #2
   12434:	bge	13454 <__assert_fail@plt+0x2120>
   12438:	mov	r4, r5
   1243c:	movw	r0, #49671	; 0xc207
   12440:	movt	r0, #2
   12444:	ldrb	r0, [r0]
   12448:	cmp	r0, #1
   1244c:	bne	124ac <__assert_fail@plt+0x1178>
   12450:	movw	r0, #49624	; 0xc1d8
   12454:	movw	r1, #13972	; 0x3694
   12458:	movt	r0, #2
   1245c:	movt	r1, #1
   12460:	ldr	r0, [r0]
   12464:	cmp	r0, r1
   12468:	beq	12478 <__assert_fail@plt+0x1144>
   1246c:	movw	r0, #16056	; 0x3eb8
   12470:	movt	r0, #1
   12474:	b	124a0 <__assert_fail@plt+0x116c>
   12478:	movw	r1, #49632	; 0xc1e0
   1247c:	mov	r0, #7
   12480:	movt	r1, #2
   12484:	str	r0, [r1]
   12488:	movw	r1, #49628	; 0xc1dc
   1248c:	mov	r0, #8
   12490:	movt	r1, #2
   12494:	str	r0, [r1]
   12498:	movw	r0, #15908	; 0x3e24
   1249c:	movt	r0, #1
   124a0:	movw	r1, #49624	; 0xc1d8
   124a4:	movt	r1, #2
   124a8:	str	r0, [r1]
   124ac:	movw	r0, #49648	; 0xc1f0
   124b0:	movt	r0, #2
   124b4:	ldrb	r0, [r0]
   124b8:	cmp	r0, #1
   124bc:	bne	124fc <__assert_fail@plt+0x11c8>
   124c0:	movw	r0, #49640	; 0xc1e8
   124c4:	movw	r2, #49656	; 0xc1f8
   124c8:	movw	r5, #49672	; 0xc208
   124cc:	movt	r0, #2
   124d0:	movt	r2, #2
   124d4:	movt	r5, #2
   124d8:	ldrd	r0, [r0]
   124dc:	ldrd	r2, [r2]
   124e0:	adds	r0, r2, r0
   124e4:	adcs	r1, r3, r1
   124e8:	strd	r0, [r5]
   124ec:	mov	r0, #0
   124f0:	adc	r0, r0, #0
   124f4:	cmp	r0, #1
   124f8:	beq	134c4 <__assert_fail@plt+0x2190>
   124fc:	ldr	r0, [sl]
   12500:	cmp	r0, #0
   12504:	bne	12514 <__assert_fail@plt+0x11e0>
   12508:	movw	r0, #43831	; 0xab37
   1250c:	movt	r0, #1
   12510:	bl	13698 <__assert_fail@plt+0x2364>
   12514:	ldr	r0, [r9]
   12518:	movw	r1, #45412	; 0xb164
   1251c:	cmp	r6, #0
   12520:	movt	r1, #1
   12524:	addgt	r1, r4, r0, lsl #2
   12528:	movw	r0, #49680	; 0xc210
   1252c:	movt	r0, #2
   12530:	str	r1, [r0]
   12534:	bl	141dc <__assert_fail@plt+0x2ea8>
   12538:	movw	r6, #49684	; 0xc214
   1253c:	mov	r9, r0
   12540:	movt	r6, #2
   12544:	ldr	r0, [r6]
   12548:	cmp	r0, #0
   1254c:	beq	131a4 <__assert_fail@plt+0x1e70>
   12550:	movw	r1, #49640	; 0xc1e8
   12554:	movt	r1, #2
   12558:	ldrd	r4, [r1]
   1255c:	orrs	r1, r4, r5
   12560:	beq	12738 <__assert_fail@plt+0x1404>
   12564:	add	r1, sp, #12
   12568:	mov	sl, #0
   1256c:	stm	r1, {r7, r8, r9}
   12570:	sub	r1, fp, #136	; 0x88
   12574:	add	r9, sp, #40	; 0x28
   12578:	mov	r8, #1
   1257c:	add	r1, r1, #48	; 0x30
   12580:	str	r1, [sp, #28]
   12584:	bl	11274 <fileno@plt>
   12588:	mov	r1, r0
   1258c:	mov	r0, #3
   12590:	sub	r2, fp, #136	; 0x88
   12594:	bl	1113c <__fxstat64@plt>
   12598:	cmp	r0, #0
   1259c:	beq	125e0 <__assert_fail@plt+0x12ac>
   125a0:	bl	11214 <__errno_location@plt>
   125a4:	ldr	r7, [r0]
   125a8:	movw	r0, #49704	; 0xc228
   125ac:	mov	r1, #3
   125b0:	mov	r6, #0
   125b4:	movt	r0, #2
   125b8:	ldr	r2, [r0]
   125bc:	mov	r0, #0
   125c0:	bl	177f0 <__assert_fail@plt+0x64bc>
   125c4:	movw	r2, #46078	; 0xb3fe
   125c8:	mov	r3, r0
   125cc:	mov	r0, #0
   125d0:	mov	r1, r7
   125d4:	movt	r2, #1
   125d8:	bl	11184 <error@plt>
   125dc:	b	126fc <__assert_fail@plt+0x13c8>
   125e0:	ldr	r0, [fp, #-120]	; 0xffffff88
   125e4:	and	r0, r0, #53248	; 0xd000
   125e8:	orr	r0, r0, #8192	; 0x2000
   125ec:	cmp	r0, #40960	; 0xa000
   125f0:	bne	1265c <__assert_fail@plt+0x1328>
   125f4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   125f8:	mov	r3, #0
   125fc:	subs	r0, r2, #536870913	; 0x20000001
   12600:	rscs	r0, r3, r2, asr #31
   12604:	mov	r0, #0
   12608:	movwcc	r0, #1
   1260c:	rsbs	r1, r2, #0
   12610:	sbcs	r1, r3, r2, asr #31
   12614:	mov	r1, #0
   12618:	movwlt	r1, #1
   1261c:	ands	r3, r1, r0
   12620:	ldr	r0, [sp, #28]
   12624:	asrne	r3, r2, #31
   12628:	moveq	r2, #512	; 0x200
   1262c:	ldrd	r0, [r0]
   12630:	subs	r2, r2, r0
   12634:	sbcs	r2, r3, r1
   12638:	bge	1267c <__assert_fail@plt+0x1348>
   1263c:	subs	r2, r0, r4
   12640:	sbcs	r2, r1, r5
   12644:	bcs	12744 <__assert_fail@plt+0x1410>
   12648:	subs	r4, r4, r0
   1264c:	sbc	r5, r5, r1
   12650:	orrs	r0, r4, r5
   12654:	bne	126f8 <__assert_fail@plt+0x13c4>
   12658:	b	12764 <__assert_fail@plt+0x1430>
   1265c:	ldr	r0, [r6]
   12660:	mov	r1, #1
   12664:	mov	r2, r4
   12668:	mov	r3, r5
   1266c:	str	r1, [sp]
   12670:	bl	15b20 <__assert_fail@plt+0x47ec>
   12674:	cmp	r0, #0
   12678:	beq	12764 <__assert_fail@plt+0x1430>
   1267c:	orrs	r0, r4, r5
   12680:	beq	126e8 <__assert_fail@plt+0x13b4>
   12684:	mov	r7, #8192	; 0x2000
   12688:	subs	r0, r4, r7
   1268c:	ldr	r3, [r6]
   12690:	mov	r1, #1
   12694:	sbcs	r0, r5, #0
   12698:	movcc	r7, r4
   1269c:	mov	r0, r9
   126a0:	mov	r2, r7
   126a4:	bl	11304 <fread_unlocked@plt>
   126a8:	subs	r4, r4, r0
   126ac:	sbc	r5, r5, #0
   126b0:	cmp	r0, r7
   126b4:	beq	126d0 <__assert_fail@plt+0x139c>
   126b8:	ldr	r0, [r6]
   126bc:	ldr	r0, [r0]
   126c0:	tst	r0, #32
   126c4:	bne	126dc <__assert_fail@plt+0x13a8>
   126c8:	tst	r0, #16
   126cc:	bne	126f0 <__assert_fail@plt+0x13bc>
   126d0:	orrs	r0, r4, r5
   126d4:	bne	12688 <__assert_fail@plt+0x1354>
   126d8:	b	126e8 <__assert_fail@plt+0x13b4>
   126dc:	bl	11214 <__errno_location@plt>
   126e0:	ldr	sl, [r0]
   126e4:	mov	r8, #0
   126e8:	mov	r4, #0
   126ec:	mov	r5, #0
   126f0:	orrs	r0, r4, r5
   126f4:	beq	12764 <__assert_fail@plt+0x1430>
   126f8:	and	r6, r8, #1
   126fc:	mov	r0, sl
   12700:	bl	14d6c <__assert_fail@plt+0x3a38>
   12704:	and	r6, r6, r0
   12708:	bl	141dc <__assert_fail@plt+0x2ea8>
   1270c:	and	r8, r6, r0
   12710:	movw	r6, #49684	; 0xc214
   12714:	movt	r6, #2
   12718:	ldr	r0, [r6]
   1271c:	cmp	r0, #0
   12720:	bne	12584 <__assert_fail@plt+0x1250>
   12724:	orrs	r0, r4, r5
   12728:	bne	1351c <__assert_fail@plt+0x21e8>
   1272c:	ldr	r9, [sp, #20]
   12730:	and	r9, r9, r8
   12734:	b	131a4 <__assert_fail@plt+0x1e70>
   12738:	mov	r0, #0
   1273c:	mov	r1, #0
   12740:	b	12794 <__assert_fail@plt+0x1460>
   12744:	ldr	r0, [r6]
   12748:	mov	r1, #1
   1274c:	mov	r2, r4
   12750:	mov	r3, r5
   12754:	str	r1, [sp]
   12758:	bl	15b20 <__assert_fail@plt+0x47ec>
   1275c:	cmp	r0, #0
   12760:	movne	r8, #0
   12764:	ldr	r9, [sp, #20]
   12768:	ldr	r0, [r6]
   1276c:	movw	sl, #49612	; 0xc1cc
   12770:	movt	sl, #2
   12774:	and	r9, r9, r8
   12778:	cmp	r0, #0
   1277c:	beq	131a4 <__assert_fail@plt+0x1e70>
   12780:	movw	r0, #49640	; 0xc1e8
   12784:	ldr	r8, [sp, #16]
   12788:	ldr	r7, [sp, #12]
   1278c:	movt	r0, #2
   12790:	ldrd	r0, [r0]
   12794:	movw	r2, #49671	; 0xc207
   12798:	subs	r0, r8, r0
   1279c:	movw	r3, #49688	; 0xc218
   127a0:	movt	r2, #2
   127a4:	sbc	r1, r7, r1
   127a8:	movt	r3, #2
   127ac:	ldrb	r2, [r2]
   127b0:	cmp	r2, #0
   127b4:	moveq	r1, r2
   127b8:	moveq	r0, r2
   127bc:	strd	r0, [r3]
   127c0:	ldr	r0, [sl]
   127c4:	cmp	r0, #0
   127c8:	beq	1282c <__assert_fail@plt+0x14f8>
   127cc:	movw	r1, #49620	; 0xc1d4
   127d0:	movw	r3, #45420	; 0xb16c
   127d4:	mov	r8, #1
   127d8:	mov	r2, #0
   127dc:	movt	r1, #2
   127e0:	movt	r3, #1
   127e4:	ldr	r1, [r1]
   127e8:	add	r7, r1, r2, lsl #5
   127ec:	mov	r4, r8
   127f0:	ldr	r7, [r7, #4]
   127f4:	ldr	r5, [r3, r7, lsl #2]
   127f8:	mov	r6, r5
   127fc:	mov	r7, r6
   12800:	udiv	r6, r4, r6
   12804:	mls	r6, r6, r7, r4
   12808:	mov	r4, r7
   1280c:	cmp	r6, #0
   12810:	bne	127fc <__assert_fail@plt+0x14c8>
   12814:	udiv	r7, r5, r7
   12818:	add	r2, r2, #1
   1281c:	mul	r8, r7, r8
   12820:	cmp	r2, r0
   12824:	bne	127e8 <__assert_fail@plt+0x14b4>
   12828:	b	12830 <__assert_fail@plt+0x14fc>
   1282c:	mov	r8, #1
   12830:	ldr	r1, [sp, #32]
   12834:	tst	r1, #1
   12838:	beq	128a0 <__assert_fail@plt+0x156c>
   1283c:	ldr	r4, [sp, #24]
   12840:	cmp	r4, #0
   12844:	beq	12858 <__assert_fail@plt+0x1524>
   12848:	udiv	r1, r4, r8
   1284c:	mls	r1, r1, r8, r4
   12850:	cmp	r1, #0
   12854:	beq	12ba0 <__assert_fail@plt+0x186c>
   12858:	movw	r1, #43834	; 0xab3a
   1285c:	mov	r0, #0
   12860:	mov	r2, #5
   12864:	movt	r1, #1
   12868:	bl	1110c <dcgettext@plt>
   1286c:	mov	r2, r0
   12870:	mov	r0, #0
   12874:	mov	r1, #0
   12878:	mov	r3, r4
   1287c:	str	r8, [sp]
   12880:	bl	11184 <error@plt>
   12884:	movw	r0, #49696	; 0xc220
   12888:	movt	r0, #2
   1288c:	str	r8, [r0]
   12890:	ldr	r0, [sl]
   12894:	cmp	r0, #0
   12898:	bne	128c4 <__assert_fail@plt+0x1590>
   1289c:	b	12944 <__assert_fail@plt+0x1610>
   128a0:	cmp	r8, #15
   128a4:	movle	r1, #16
   128a8:	sdivle	r1, r1, r8
   128ac:	mulle	r8, r1, r8
   128b0:	movw	r1, #49696	; 0xc220
   128b4:	movt	r1, #2
   128b8:	str	r8, [r1]
   128bc:	cmp	r0, #0
   128c0:	beq	12944 <__assert_fail@plt+0x1610>
   128c4:	movw	r1, #49620	; 0xc1d4
   128c8:	mov	r7, #0
   128cc:	mov	r2, #0
   128d0:	movt	r1, #2
   128d4:	ldr	r3, [r1]
   128d8:	movw	r1, #45420	; 0xb16c
   128dc:	movt	r1, #1
   128e0:	add	r6, r3, r7, lsl #5
   128e4:	add	r7, r7, #1
   128e8:	ldr	r5, [r6, #4]
   128ec:	ldr	r6, [r6, #24]
   128f0:	ldr	r5, [r1, r5, lsl #2]
   128f4:	add	r6, r6, #1
   128f8:	udiv	r5, r8, r5
   128fc:	mul	r6, r6, r5
   12900:	cmp	r2, r6
   12904:	movcc	r2, r6
   12908:	cmp	r7, r0
   1290c:	bcc	128e0 <__assert_fail@plt+0x15ac>
   12910:	movw	r3, #49620	; 0xc1d4
   12914:	movt	r3, #2
   12918:	ldr	r3, [r3]
   1291c:	add	r3, r3, #24
   12920:	ldr	r7, [r3, #-20]	; 0xffffffec
   12924:	ldr	r6, [r3]
   12928:	subs	r0, r0, #1
   1292c:	ldr	r7, [r1, r7, lsl #2]
   12930:	udiv	r7, r8, r7
   12934:	mls	r7, r6, r7, r2
   12938:	str	r7, [r3, #4]
   1293c:	add	r3, r3, #32
   12940:	bne	12920 <__assert_fail@plt+0x15ec>
   12944:	movw	r0, #49636	; 0xc1e4
   12948:	movt	r0, #2
   1294c:	ldrb	r0, [r0]
   12950:	cmp	r0, #1
   12954:	bne	129a0 <__assert_fail@plt+0x166c>
   12958:	movw	r4, #49664	; 0xc200
   1295c:	movt	r4, #2
   12960:	ldr	r0, [r4]
   12964:	cmp	r0, #100	; 0x64
   12968:	movls	r0, #100	; 0x64
   1296c:	str	r0, [sp, #40]	; 0x28
   12970:	bl	1828c <__assert_fail@plt+0x6f58>
   12974:	str	r0, [sp, #24]
   12978:	movw	r0, #49640	; 0xc1e8
   1297c:	movw	r8, #49648	; 0xc1f0
   12980:	movw	r6, #49684	; 0xc214
   12984:	movt	r0, #2
   12988:	movt	r8, #2
   1298c:	movt	r6, #2
   12990:	ldm	r0, {r7, sl}
   12994:	mov	r0, #1
   12998:	str	r0, [sp, #32]
   1299c:	b	12d8c <__assert_fail@plt+0x1a58>
   129a0:	mov	r0, #2
   129a4:	mov	r1, r8
   129a8:	str	r9, [sp, #20]
   129ac:	bl	1835c <__assert_fail@plt+0x7028>
   129b0:	movw	r9, #49696	; 0xc220
   129b4:	mov	r7, r0
   129b8:	str	r0, [sp, #40]	; 0x28
   129bc:	movt	r9, #2
   129c0:	ldr	r0, [r9]
   129c4:	add	r1, r7, r0
   129c8:	str	r1, [sp, #44]	; 0x2c
   129cc:	movw	r1, #49640	; 0xc1e8
   129d0:	movt	r1, #2
   129d4:	ldr	r8, [r1]
   129d8:	ldr	r4, [r1, #4]
   129dc:	movw	r1, #49648	; 0xc1f0
   129e0:	str	r7, [sp, #28]
   129e4:	movt	r1, #2
   129e8:	ldrb	r1, [r1]
   129ec:	cmp	r1, #0
   129f0:	beq	12af8 <__assert_fail@plt+0x17c4>
   129f4:	movw	r1, #49672	; 0xc208
   129f8:	mov	r6, r4
   129fc:	mov	r5, #0
   12a00:	mov	r4, #1
   12a04:	movt	r1, #2
   12a08:	ldr	r2, [r1]
   12a0c:	ldr	r1, [r1, #4]
   12a10:	str	r6, [sp, #32]
   12a14:	subs	r3, r8, r2
   12a18:	sbcs	r3, r6, r1
   12a1c:	bcs	12b98 <__assert_fail@plt+0x1864>
   12a20:	subs	r2, r2, r8
   12a24:	sbc	r1, r1, r6
   12a28:	subs	r3, r2, r0
   12a2c:	sbcs	r1, r1, #0
   12a30:	movcc	r0, r2
   12a34:	sub	r2, fp, #136	; 0x88
   12a38:	mov	r1, r7
   12a3c:	bl	14e84 <__assert_fail@plt+0x3b50>
   12a40:	mov	r4, r0
   12a44:	mov	r0, r7
   12a48:	ldr	r7, [r9]
   12a4c:	ldr	r5, [fp, #-136]	; 0xffffff78
   12a50:	mov	sl, #0
   12a54:	cmp	r5, r7
   12a58:	bcc	12c24 <__assert_fail@plt+0x18f0>
   12a5c:	mov	sl, #0
   12a60:	cmp	r5, r7
   12a64:	bne	134fc <__assert_fail@plt+0x21c8>
   12a68:	eor	sl, sl, #1
   12a6c:	add	r2, sp, #40	; 0x28
   12a70:	ldr	r5, [sp, #32]
   12a74:	str	r0, [sp]
   12a78:	mov	r0, r8
   12a7c:	uxtb	r1, sl
   12a80:	ldr	r6, [r2, r1, lsl #2]
   12a84:	mov	r2, r7
   12a88:	mov	r1, r5
   12a8c:	mov	r3, r6
   12a90:	bl	14f84 <__assert_fail@plt+0x3c50>
   12a94:	movw	r0, #49672	; 0xc208
   12a98:	adds	r8, r8, r7
   12a9c:	movt	r0, #2
   12aa0:	adc	r5, r5, #0
   12aa4:	ldrd	r0, [r0]
   12aa8:	str	r5, [sp, #32]
   12aac:	subs	r2, r8, r0
   12ab0:	sbcs	r2, r5, r1
   12ab4:	bcs	12c18 <__assert_fail@plt+0x18e4>
   12ab8:	subs	r2, r0, r8
   12abc:	ldr	r0, [r9]
   12ac0:	sbc	r1, r1, r5
   12ac4:	subs	r3, r2, r0
   12ac8:	sbcs	r1, r1, #0
   12acc:	movcc	r0, r2
   12ad0:	mov	r1, r6
   12ad4:	sub	r2, fp, #136	; 0x88
   12ad8:	bl	14e84 <__assert_fail@plt+0x3b50>
   12adc:	ldr	r7, [r9]
   12ae0:	ldr	r5, [fp, #-136]	; 0xffffff78
   12ae4:	and	r4, r4, r0
   12ae8:	mov	r0, r6
   12aec:	cmp	r5, r7
   12af0:	bcs	12a60 <__assert_fail@plt+0x172c>
   12af4:	b	12c24 <__assert_fail@plt+0x18f0>
   12af8:	sub	r2, fp, #136	; 0x88
   12afc:	mov	r1, r7
   12b00:	bl	14e84 <__assert_fail@plt+0x3b50>
   12b04:	mov	r1, r9
   12b08:	ldr	r5, [fp, #-136]	; 0xffffff78
   12b0c:	mov	r9, r0
   12b10:	mov	sl, #0
   12b14:	ldr	r6, [r1]
   12b18:	cmp	r5, r6
   12b1c:	bcc	12c38 <__assert_fail@plt+0x1904>
   12b20:	mov	sl, #0
   12b24:	mov	r0, r7
   12b28:	cmp	r5, r6
   12b2c:	bne	13428 <__assert_fail@plt+0x20f4>
   12b30:	eor	sl, sl, #1
   12b34:	add	r2, sp, #40	; 0x28
   12b38:	str	r0, [sp]
   12b3c:	mov	r0, r8
   12b40:	and	r1, sl, #1
   12b44:	ldr	r7, [r2, r1, lsl #2]
   12b48:	mov	r1, r4
   12b4c:	mov	r2, r6
   12b50:	mov	r3, r7
   12b54:	bl	14f84 <__assert_fail@plt+0x3c50>
   12b58:	movw	r0, #49696	; 0xc220
   12b5c:	adds	r8, r8, r6
   12b60:	mov	r1, r7
   12b64:	sub	r2, fp, #136	; 0x88
   12b68:	movt	r0, #2
   12b6c:	adc	r4, r4, #0
   12b70:	mov	r5, r0
   12b74:	ldr	r0, [r0]
   12b78:	bl	14e84 <__assert_fail@plt+0x3b50>
   12b7c:	ldr	r6, [r5]
   12b80:	ldr	r5, [fp, #-136]	; 0xffffff78
   12b84:	and	r9, r9, r0
   12b88:	mov	r0, r7
   12b8c:	cmp	r5, r6
   12b90:	bcs	12b28 <__assert_fail@plt+0x17f4>
   12b94:	b	12c38 <__assert_fail@plt+0x1904>
   12b98:	mov	sl, #0
   12b9c:	b	12c1c <__assert_fail@plt+0x18e8>
   12ba0:	movw	r1, #49696	; 0xc220
   12ba4:	mov	r8, r4
   12ba8:	movt	r1, #2
   12bac:	str	r4, [r1]
   12bb0:	cmp	r0, #0
   12bb4:	bne	128c4 <__assert_fail@plt+0x1590>
   12bb8:	b	12944 <__assert_fail@plt+0x1610>
   12bbc:	ldr	r0, [r9]
   12bc0:	add	r0, r5, r0, lsl #2
   12bc4:	ldr	r4, [r0, #8]
   12bc8:	ldrb	r0, [r4]
   12bcc:	cmp	r0, #0
   12bd0:	beq	1241c <__assert_fail@plt+0x10e8>
   12bd4:	cmp	r0, #43	; 0x2b
   12bd8:	mov	r1, #46	; 0x2e
   12bdc:	addeq	r4, r4, #1
   12be0:	mov	r0, r4
   12be4:	bl	11208 <strchr@plt>
   12be8:	mov	r2, #10
   12bec:	cmp	r0, #0
   12bf0:	bne	1327c <__assert_fail@plt+0x1f48>
   12bf4:	ldrb	r0, [r4]
   12bf8:	cmp	r0, #48	; 0x30
   12bfc:	bne	13278 <__assert_fail@plt+0x1f44>
   12c00:	ldrb	r0, [r4, #1]
   12c04:	mov	r2, #16
   12c08:	orr	r0, r0, #32
   12c0c:	cmp	r0, #120	; 0x78
   12c10:	movne	r2, #8
   12c14:	b	1327c <__assert_fail@plt+0x1f48>
   12c18:	mov	r5, #0
   12c1c:	str	r5, [fp, #-136]	; 0xffffff78
   12c20:	mov	r5, #0
   12c24:	and	r9, r4, #1
   12c28:	ldr	r4, [sp, #32]
   12c2c:	uxtb	sl, sl
   12c30:	cmp	sl, #0
   12c34:	movwne	sl, #1
   12c38:	cmp	r5, #0
   12c3c:	beq	12d14 <__assert_fail@plt+0x19e0>
   12c40:	movw	r0, #49612	; 0xc1cc
   12c44:	str	r4, [sp, #32]
   12c48:	movt	r0, #2
   12c4c:	ldr	lr, [r0]
   12c50:	mov	r0, #1
   12c54:	cmp	lr, #0
   12c58:	beq	12cb8 <__assert_fail@plt+0x1984>
   12c5c:	movw	r0, #49620	; 0xc1d4
   12c60:	movw	ip, #45420	; 0xb16c
   12c64:	mov	r3, #0
   12c68:	movt	r0, #2
   12c6c:	movt	ip, #1
   12c70:	ldr	r2, [r0]
   12c74:	mov	r0, #1
   12c78:	add	r1, r2, r3, lsl #5
   12c7c:	ldr	r1, [r1, #4]
   12c80:	ldr	r7, [ip, r1, lsl #2]
   12c84:	mov	r1, r0
   12c88:	mov	r4, r7
   12c8c:	mov	r6, r4
   12c90:	udiv	r4, r1, r4
   12c94:	mls	r4, r4, r6, r1
   12c98:	mov	r1, r6
   12c9c:	cmp	r4, #0
   12ca0:	bne	12c8c <__assert_fail@plt+0x1958>
   12ca4:	udiv	r1, r7, r6
   12ca8:	add	r3, r3, #1
   12cac:	mul	r0, r1, r0
   12cb0:	cmp	r3, lr
   12cb4:	bne	12c78 <__assert_fail@plt+0x1944>
   12cb8:	add	r1, r5, r0
   12cbc:	add	r4, sp, #40	; 0x28
   12cc0:	sub	r1, r1, #1
   12cc4:	udiv	r2, r1, r0
   12cc8:	mls	r0, r2, r0, r1
   12ccc:	add	r0, r0, r5
   12cd0:	sub	r2, r1, r0
   12cd4:	and	r0, sl, #1
   12cd8:	mov	r1, #0
   12cdc:	ldr	r6, [r4, r0, lsl #2]
   12ce0:	add	r0, r6, r5
   12ce4:	bl	11244 <memset@plt>
   12ce8:	mov	r0, #1
   12cec:	mov	r2, r5
   12cf0:	str	r6, [sp]
   12cf4:	bic	r0, r0, sl
   12cf8:	ldr	r3, [r4, r0, lsl #2]
   12cfc:	ldr	r4, [sp, #32]
   12d00:	mov	r0, r8
   12d04:	mov	r1, r4
   12d08:	bl	14f84 <__assert_fail@plt+0x3c50>
   12d0c:	adds	r8, r8, r5
   12d10:	adc	r4, r4, #0
   12d14:	movw	r0, #49624	; 0xc1d8
   12d18:	mov	r1, r4
   12d1c:	mov	r2, #10
   12d20:	movt	r0, #2
   12d24:	ldr	r3, [r0]
   12d28:	mov	r0, r8
   12d2c:	blx	r3
   12d30:	movw	r0, #49672	; 0xc208
   12d34:	ldr	r5, [sp, #28]
   12d38:	movt	r0, #2
   12d3c:	ldrd	r0, [r0]
   12d40:	subs	r0, r8, r0
   12d44:	sbcs	r0, r4, r1
   12d48:	mov	r4, r9
   12d4c:	bcc	12d78 <__assert_fail@plt+0x1a44>
   12d50:	movw	r0, #49648	; 0xc1f0
   12d54:	ldr	r9, [sp, #20]
   12d58:	movt	r0, #2
   12d5c:	ldrb	r0, [r0]
   12d60:	cmp	r0, #0
   12d64:	beq	12d7c <__assert_fail@plt+0x1a48>
   12d68:	mov	r0, #0
   12d6c:	bl	14d6c <__assert_fail@plt+0x3a38>
   12d70:	and	r4, r4, r0
   12d74:	b	12d7c <__assert_fail@plt+0x1a48>
   12d78:	ldr	r9, [sp, #20]
   12d7c:	mov	r0, r5
   12d80:	b	1319c <__assert_fail@plt+0x1e68>
   12d84:	movw	r8, #49648	; 0xc1f0
   12d88:	movt	r8, #2
   12d8c:	ldrb	r0, [r8]
   12d90:	cmp	r0, #0
   12d94:	beq	12dc4 <__assert_fail@plt+0x1a90>
   12d98:	movw	r2, #49672	; 0xc208
   12d9c:	ldr	r1, [r4]
   12da0:	movt	r2, #2
   12da4:	ldrd	r2, [r2]
   12da8:	subs	r2, r2, r1
   12dac:	sbcs	r3, r3, #0
   12db0:	bcc	132d8 <__assert_fail@plt+0x1fa4>
   12db4:	subs	r2, r7, r2
   12db8:	sbcs	r2, sl, r3
   12dbc:	bcc	12dc8 <__assert_fail@plt+0x1a94>
   12dc0:	b	132d8 <__assert_fail@plt+0x1fa4>
   12dc4:	ldr	r1, [r4]
   12dc8:	mov	r3, #0
   12dcc:	cmp	r1, #0
   12dd0:	str	sl, [sp, #28]
   12dd4:	beq	12ea0 <__assert_fail@plt+0x1b6c>
   12dd8:	ldr	r0, [r6]
   12ddc:	cmp	r0, #0
   12de0:	beq	1318c <__assert_fail@plt+0x1e58>
   12de4:	mov	r8, r3
   12de8:	mov	sl, r4
   12dec:	mov	r6, #1
   12df0:	bl	11250 <fgetc@plt>
   12df4:	cmn	r0, #1
   12df8:	bne	12e2c <__assert_fail@plt+0x1af8>
   12dfc:	bl	11214 <__errno_location@plt>
   12e00:	ldr	r0, [r0]
   12e04:	bl	14d6c <__assert_fail@plt+0x3a38>
   12e08:	and	r4, r6, r0
   12e0c:	bl	141dc <__assert_fail@plt+0x2ea8>
   12e10:	and	r6, r4, r0
   12e14:	movw	r0, #49684	; 0xc214
   12e18:	movt	r0, #2
   12e1c:	ldr	r0, [r0]
   12e20:	cmp	r0, #0
   12e24:	bne	12df0 <__assert_fail@plt+0x1abc>
   12e28:	b	13190 <__assert_fail@plt+0x1e5c>
   12e2c:	ldr	r4, [sp, #32]
   12e30:	mov	r5, r0
   12e34:	ldr	r0, [sp, #28]
   12e38:	adds	r7, r7, #1
   12e3c:	adc	r0, r0, #0
   12e40:	and	r4, r4, r6
   12e44:	cmn	r5, #1
   12e48:	str	r0, [sp, #28]
   12e4c:	ble	131ec <__assert_fail@plt+0x1eb8>
   12e50:	str	r4, [sp, #32]
   12e54:	bl	111e4 <__ctype_b_loc@plt>
   12e58:	ldr	r0, [r0]
   12e5c:	add	r0, r0, r5, lsl #1
   12e60:	ldrb	r0, [r0, #1]
   12e64:	tst	r0, #64	; 0x40
   12e68:	beq	12ec0 <__assert_fail@plt+0x1b8c>
   12e6c:	ldr	r0, [sp, #24]
   12e70:	mov	r3, r8
   12e74:	movw	r6, #49684	; 0xc214
   12e78:	mov	r4, sl
   12e7c:	add	r3, r8, #1
   12e80:	movt	r6, #2
   12e84:	strb	r5, [r0, r8]
   12e88:	ldr	r0, [sl]
   12e8c:	cmp	r3, r0
   12e90:	bcc	12dd8 <__assert_fail@plt+0x1aa4>
   12e94:	movw	r0, #49648	; 0xc1f0
   12e98:	movt	r0, #2
   12e9c:	ldrb	r0, [r0]
   12ea0:	movw	r1, #49672	; 0xc208
   12ea4:	movt	r1, #2
   12ea8:	ldm	r1, {r2, r5}
   12eac:	subs	r1, r7, r2
   12eb0:	ldr	r1, [sp, #28]
   12eb4:	sbcs	r1, r1, r5
   12eb8:	bcs	12ed4 <__assert_fail@plt+0x1ba0>
   12ebc:	b	13048 <__assert_fail@plt+0x1d14>
   12ec0:	mov	r4, sl
   12ec4:	ldr	sl, [sp, #28]
   12ec8:	movw	r6, #49684	; 0xc214
   12ecc:	movt	r6, #2
   12ed0:	b	12d84 <__assert_fail@plt+0x1a50>
   12ed4:	cmp	r0, #0
   12ed8:	beq	13048 <__assert_fail@plt+0x1d14>
   12edc:	ldr	r5, [sp, #24]
   12ee0:	movw	r2, #49624	; 0xc1d8
   12ee4:	mov	r0, #0
   12ee8:	ldr	sl, [sp, #28]
   12eec:	movt	r2, #2
   12ef0:	strb	r0, [r5, r3]
   12ef4:	mvn	r0, r3
   12ef8:	ldr	r3, [r2]
   12efc:	adds	r0, r7, r0
   12f00:	mov	r2, #32
   12f04:	sbc	r1, sl, #0
   12f08:	blx	r3
   12f0c:	b	12f18 <__assert_fail@plt+0x1be4>
   12f10:	bl	1107c <fputs_unlocked@plt>
   12f14:	add	r5, r5, #1
   12f18:	ldrb	r1, [r5]
   12f1c:	cmp	r1, #13
   12f20:	bhi	12fdc <__assert_fail@plt+0x1ca8>
   12f24:	add	r0, pc, #0
   12f28:	ldr	pc, [r0, r1, lsl #2]
   12f2c:	andeq	r3, r1, r8, lsr r1
   12f30:	ldrdeq	r2, [r1], -ip
   12f34:	ldrdeq	r2, [r1], -ip
   12f38:	ldrdeq	r2, [r1], -ip
   12f3c:	ldrdeq	r2, [r1], -ip
   12f40:	ldrdeq	r2, [r1], -ip
   12f44:	ldrdeq	r2, [r1], -ip
   12f48:	andeq	r2, r1, r4, ror #30
   12f4c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12f50:	andeq	r2, r1, ip, lsr #31
   12f54:	andeq	r3, r1, ip
   12f58:	andeq	r3, r1, r4, lsr #32
   12f5c:	andeq	r2, r1, ip, ror pc
   12f60:	andeq	r2, r1, r4, asr #31
   12f64:	movw	r0, #49524	; 0xc174
   12f68:	movt	r0, #2
   12f6c:	ldr	r1, [r0]
   12f70:	movw	r0, #44927	; 0xaf7f
   12f74:	movt	r0, #1
   12f78:	b	12f10 <__assert_fail@plt+0x1bdc>
   12f7c:	movw	r0, #49524	; 0xc174
   12f80:	movt	r0, #2
   12f84:	ldr	r1, [r0]
   12f88:	movw	r0, #44933	; 0xaf85
   12f8c:	movt	r0, #1
   12f90:	b	12f10 <__assert_fail@plt+0x1bdc>
   12f94:	movw	r0, #49524	; 0xc174
   12f98:	movt	r0, #2
   12f9c:	ldr	r1, [r0]
   12fa0:	movw	r0, #44930	; 0xaf82
   12fa4:	movt	r0, #1
   12fa8:	b	12f10 <__assert_fail@plt+0x1bdc>
   12fac:	movw	r0, #49524	; 0xc174
   12fb0:	movt	r0, #2
   12fb4:	ldr	r1, [r0]
   12fb8:	movw	r0, #44942	; 0xaf8e
   12fbc:	movt	r0, #1
   12fc0:	b	12f10 <__assert_fail@plt+0x1bdc>
   12fc4:	movw	r0, #49524	; 0xc174
   12fc8:	movt	r0, #2
   12fcc:	ldr	r1, [r0]
   12fd0:	movw	r0, #44939	; 0xaf8b
   12fd4:	movt	r0, #1
   12fd8:	b	12f10 <__assert_fail@plt+0x1bdc>
   12fdc:	movw	r0, #49524	; 0xc174
   12fe0:	movt	r0, #2
   12fe4:	ldr	r0, [r0]
   12fe8:	ldr	r2, [r0, #20]
   12fec:	ldr	r3, [r0, #24]
   12ff0:	cmp	r2, r3
   12ff4:	bcs	1303c <__assert_fail@plt+0x1d08>
   12ff8:	add	r3, r2, #1
   12ffc:	add	r5, r5, #1
   13000:	str	r3, [r0, #20]
   13004:	strb	r1, [r2]
   13008:	b	12f18 <__assert_fail@plt+0x1be4>
   1300c:	movw	r0, #49524	; 0xc174
   13010:	movt	r0, #2
   13014:	ldr	r1, [r0]
   13018:	movw	r0, #44936	; 0xaf88
   1301c:	movt	r0, #1
   13020:	b	12f10 <__assert_fail@plt+0x1bdc>
   13024:	movw	r0, #49524	; 0xc174
   13028:	movt	r0, #2
   1302c:	ldr	r1, [r0]
   13030:	movw	r0, #44945	; 0xaf91
   13034:	movt	r0, #1
   13038:	b	12f10 <__assert_fail@plt+0x1bdc>
   1303c:	bl	112a4 <__overflow@plt>
   13040:	add	r5, r5, #1
   13044:	b	12f18 <__assert_fail@plt+0x1be4>
   13048:	ldr	r0, [sp, #40]	; 0x28
   1304c:	str	r3, [sp, #20]
   13050:	cmp	r3, r0
   13054:	bne	13068 <__assert_fail@plt+0x1d34>
   13058:	ldr	r0, [sp, #24]
   1305c:	add	r1, sp, #40	; 0x28
   13060:	bl	183c0 <__assert_fail@plt+0x708c>
   13064:	str	r0, [sp, #24]
   13068:	ldr	r0, [r6]
   1306c:	mov	r5, #1
   13070:	cmp	r0, #0
   13074:	beq	131dc <__assert_fail@plt+0x1ea8>
   13078:	bl	11250 <fgetc@plt>
   1307c:	cmn	r0, #1
   13080:	bne	130ac <__assert_fail@plt+0x1d78>
   13084:	bl	11214 <__errno_location@plt>
   13088:	ldr	r0, [r0]
   1308c:	bl	14d6c <__assert_fail@plt+0x3a38>
   13090:	and	r4, r5, r0
   13094:	bl	141dc <__assert_fail@plt+0x2ea8>
   13098:	and	r5, r4, r0
   1309c:	ldr	r0, [r6]
   130a0:	cmp	r0, #0
   130a4:	bne	13078 <__assert_fail@plt+0x1d44>
   130a8:	b	131dc <__assert_fail@plt+0x1ea8>
   130ac:	mov	r8, r0
   130b0:	ldr	r0, [sp, #32]
   130b4:	adds	r7, r7, #1
   130b8:	and	r0, r0, r5
   130bc:	str	r0, [sp, #32]
   130c0:	ldr	r0, [sp, #28]
   130c4:	adc	r0, r0, #0
   130c8:	cmn	r8, #1
   130cc:	str	r0, [sp, #28]
   130d0:	ble	132f4 <__assert_fail@plt+0x1fc0>
   130d4:	movw	r4, #49664	; 0xc200
   130d8:	cmp	r8, #0
   130dc:	movt	r4, #2
   130e0:	beq	13168 <__assert_fail@plt+0x1e34>
   130e4:	bl	111e4 <__ctype_b_loc@plt>
   130e8:	ldr	r0, [r0]
   130ec:	add	r0, r0, r8, lsl #1
   130f0:	ldrb	r0, [r0, #1]
   130f4:	tst	r0, #64	; 0x40
   130f8:	beq	13170 <__assert_fail@plt+0x1e3c>
   130fc:	ldr	r0, [sp, #24]
   13100:	ldr	r3, [sp, #20]
   13104:	strb	r8, [r0, r3]
   13108:	movw	r0, #49672	; 0xc208
   1310c:	add	r3, r3, #1
   13110:	movt	r0, #2
   13114:	ldrd	r0, [r0]
   13118:	subs	r0, r7, r0
   1311c:	ldr	r0, [sp, #28]
   13120:	sbcs	r0, r0, r1
   13124:	bcc	13048 <__assert_fail@plt+0x1d14>
   13128:	movw	r0, #49648	; 0xc1f0
   1312c:	movt	r0, #2
   13130:	ldrb	r0, [r0]
   13134:	b	12ed4 <__assert_fail@plt+0x1ba0>
   13138:	movw	r0, #49524	; 0xc174
   1313c:	movt	r0, #2
   13140:	ldr	r0, [r0]
   13144:	ldr	r1, [r0, #20]
   13148:	ldr	r2, [r0, #24]
   1314c:	cmp	r1, r2
   13150:	bcs	13180 <__assert_fail@plt+0x1e4c>
   13154:	add	r2, r1, #1
   13158:	str	r2, [r0, #20]
   1315c:	mov	r0, #10
   13160:	strb	r0, [r1]
   13164:	b	12d84 <__assert_fail@plt+0x1a50>
   13168:	ldr	r3, [sp, #20]
   1316c:	b	12edc <__assert_fail@plt+0x1ba8>
   13170:	ldr	sl, [sp, #28]
   13174:	movw	r8, #49648	; 0xc1f0
   13178:	movt	r8, #2
   1317c:	b	12d8c <__assert_fail@plt+0x1a58>
   13180:	mov	r1, #10
   13184:	bl	112a4 <__overflow@plt>
   13188:	b	12d84 <__assert_fail@plt+0x1a50>
   1318c:	mov	r6, #1
   13190:	ldr	r4, [sp, #32]
   13194:	ldr	r0, [sp, #24]
   13198:	and	r4, r4, r6
   1319c:	bl	15af8 <__assert_fail@plt+0x47c4>
   131a0:	and	r9, r9, r4
   131a4:	movw	r0, #49700	; 0xc224
   131a8:	movt	r0, #2
   131ac:	ldrb	r0, [r0]
   131b0:	cmp	r0, #1
   131b4:	bne	131d0 <__assert_fail@plt+0x1e9c>
   131b8:	movw	r0, #49520	; 0xc170
   131bc:	movt	r0, #2
   131c0:	ldr	r0, [r0]
   131c4:	bl	15a00 <__assert_fail@plt+0x46cc>
   131c8:	cmn	r0, #1
   131cc:	beq	134d0 <__assert_fail@plt+0x219c>
   131d0:	eor	r0, r9, #1
   131d4:	sub	sp, fp, #28
   131d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131dc:	ldr	r4, [sp, #32]
   131e0:	ldr	r0, [sp, #24]
   131e4:	and	r4, r4, r5
   131e8:	b	1319c <__assert_fail@plt+0x1e68>
   131ec:	ldr	r0, [sp, #24]
   131f0:	b	1319c <__assert_fail@plt+0x1e68>
   131f4:	mov	r2, #8
   131f8:	add	r3, sp, #40	; 0x28
   131fc:	mov	r0, r4
   13200:	mov	r1, #0
   13204:	str	r7, [sp]
   13208:	mov	r6, #0
   1320c:	bl	18b3c <__assert_fail@plt+0x7808>
   13210:	cmp	r0, #0
   13214:	beq	13244 <__assert_fail@plt+0x1f10>
   13218:	ldr	r0, [fp, #-136]	; 0xffffff78
   1321c:	ldr	r1, [fp, #-132]	; 0xffffff7c
   13220:	movw	r2, #49640	; 0xc1e8
   13224:	add	r4, r5, #4
   13228:	mov	r6, #1
   1322c:	movt	r2, #2
   13230:	strd	r0, [r2]
   13234:	ldr	r0, [r9]
   13238:	ldr	r0, [r5, r0, lsl #2]!
   1323c:	str	r0, [r5, #4]
   13240:	b	1243c <__assert_fail@plt+0x1108>
   13244:	movw	r0, #49671	; 0xc207
   13248:	mov	r1, #1
   1324c:	ldr	r8, [fp, #-136]	; 0xffffff78
   13250:	ldr	r7, [fp, #-132]	; 0xffffff7c
   13254:	movw	r2, #49640	; 0xc1e8
   13258:	add	r4, r5, #8
   1325c:	movt	r0, #2
   13260:	movt	r2, #2
   13264:	strb	r1, [r0]
   13268:	ldr	r0, [sp, #40]	; 0x28
   1326c:	ldr	r1, [sp, #44]	; 0x2c
   13270:	strd	r0, [r2]
   13274:	b	1243c <__assert_fail@plt+0x1108>
   13278:	mov	r2, #8
   1327c:	sub	r3, fp, #136	; 0x88
   13280:	mov	r0, r4
   13284:	mov	r1, #0
   13288:	str	r8, [sp]
   1328c:	bl	18b3c <__assert_fail@plt+0x7808>
   13290:	cmp	r0, #0
   13294:	bne	1241c <__assert_fail@plt+0x10e8>
   13298:	movw	r0, #49671	; 0xc207
   1329c:	mov	r6, #1
   132a0:	ldr	r1, [sp, #44]	; 0x2c
   132a4:	movw	r2, #49640	; 0xc1e8
   132a8:	add	r4, r5, #8
   132ac:	ldr	r8, [fp, #-136]	; 0xffffff78
   132b0:	ldr	r7, [fp, #-132]	; 0xffffff7c
   132b4:	movt	r0, #2
   132b8:	movt	r2, #2
   132bc:	strb	r6, [r0]
   132c0:	ldr	r0, [sp, #40]	; 0x28
   132c4:	strd	r0, [r2]
   132c8:	ldr	r0, [r9]
   132cc:	ldr	r0, [r5, r0, lsl #2]!
   132d0:	str	r0, [r5, #8]
   132d4:	b	1243c <__assert_fail@plt+0x1108>
   132d8:	ldr	r0, [sp, #24]
   132dc:	bl	15af8 <__assert_fail@plt+0x47c4>
   132e0:	mov	r0, #0
   132e4:	bl	14d6c <__assert_fail@plt+0x3a38>
   132e8:	ldr	r4, [sp, #32]
   132ec:	and	r4, r4, r0
   132f0:	b	131a0 <__assert_fail@plt+0x1e6c>
   132f4:	ldr	r4, [sp, #32]
   132f8:	ldr	r0, [sp, #24]
   132fc:	b	1319c <__assert_fail@plt+0x1e68>
   13300:	mov	r0, #1
   13304:	bl	11430 <__assert_fail@plt+0xfc>
   13308:	movw	r0, #49416	; 0xc108
   1330c:	movw	r2, #43673	; 0xaa99
   13310:	mov	r1, #0
   13314:	movt	r0, #2
   13318:	movt	r2, #1
   1331c:	str	r1, [sp, #4]
   13320:	movw	r1, #43499	; 0xa9eb
   13324:	ldr	r3, [r0]
   13328:	movw	r0, #49524	; 0xc174
   1332c:	str	r2, [sp]
   13330:	movw	r2, #43659	; 0xaa8b
   13334:	movt	r1, #1
   13338:	movt	r0, #2
   1333c:	movt	r2, #1
   13340:	ldr	r0, [r0]
   13344:	bl	18058 <__assert_fail@plt+0x6d24>
   13348:	mov	r0, #0
   1334c:	bl	111f0 <exit@plt>
   13350:	mov	r0, #0
   13354:	bl	11430 <__assert_fail@plt+0xfc>
   13358:	movw	r1, #43526	; 0xaa06
   1335c:	mov	r0, #0
   13360:	mov	r2, #5
   13364:	movt	r1, #1
   13368:	bl	1110c <dcgettext@plt>
   1336c:	mov	r2, r0
   13370:	ldr	r0, [r4]
   13374:	mov	r1, #0
   13378:	ldrb	r3, [r0]
   1337c:	mov	r0, #1
   13380:	bl	11184 <error@plt>
   13384:	ldr	r2, [r4]
   13388:	ldr	r1, [sp, #36]	; 0x24
   1338c:	movw	r3, #45200	; 0xb090
   13390:	movt	r3, #1
   13394:	str	r2, [sp]
   13398:	mov	r2, #83	; 0x53
   1339c:	bl	18a78 <__assert_fail@plt+0x7744>
   133a0:	ldr	r2, [r4]
   133a4:	ldr	r1, [sp, #36]	; 0x24
   133a8:	movw	r3, #45200	; 0xb090
   133ac:	movt	r3, #1
   133b0:	str	r2, [sp]
   133b4:	mov	r2, #106	; 0x6a
   133b8:	bl	18a78 <__assert_fail@plt+0x7744>
   133bc:	ldr	r2, [r4]
   133c0:	ldr	r1, [sp, #36]	; 0x24
   133c4:	movw	r3, #45200	; 0xb090
   133c8:	movt	r3, #1
   133cc:	str	r2, [sp]
   133d0:	mov	r2, #78	; 0x4e
   133d4:	bl	18a78 <__assert_fail@plt+0x7744>
   133d8:	ldr	r2, [r4]
   133dc:	ldr	r1, [sp, #36]	; 0x24
   133e0:	movw	r3, #45200	; 0xb090
   133e4:	movt	r3, #1
   133e8:	str	r2, [sp]
   133ec:	mov	r2, #119	; 0x77
   133f0:	bl	18a78 <__assert_fail@plt+0x7744>
   133f4:	movw	r1, #43598	; 0xaa4e
   133f8:	mov	r0, #0
   133fc:	mov	r2, #5
   13400:	movt	r1, #1
   13404:	bl	1110c <dcgettext@plt>
   13408:	mov	r5, r0
   1340c:	ldr	r0, [r4]
   13410:	bl	17a9c <__assert_fail@plt+0x6768>
   13414:	mov	r3, r0
   13418:	mov	r0, #1
   1341c:	mov	r1, #0
   13420:	mov	r2, r5
   13424:	bl	11184 <error@plt>
   13428:	movw	r0, #45021	; 0xafdd
   1342c:	movw	r1, #44455	; 0xada7
   13430:	movw	r3, #45053	; 0xaffd
   13434:	movw	r2, #1418	; 0x58a
   13438:	movt	r0, #1
   1343c:	movt	r1, #1
   13440:	movt	r3, #1
   13444:	bl	11334 <__assert_fail@plt>
   13448:	movw	r1, #43686	; 0xaaa6
   1344c:	movt	r1, #1
   13450:	b	13524 <__assert_fail@plt+0x21f0>
   13454:	movw	r1, #43732	; 0xaad4
   13458:	mov	r0, #0
   1345c:	mov	r2, #5
   13460:	movt	r1, #1
   13464:	bl	1110c <dcgettext@plt>
   13468:	mov	r4, r0
   1346c:	ldr	r0, [r9]
   13470:	add	r0, r5, r0, lsl #2
   13474:	ldr	r0, [r0, #4]
   13478:	bl	17a9c <__assert_fail@plt+0x6768>
   1347c:	mov	r3, r0
   13480:	mov	r0, #0
   13484:	mov	r1, #0
   13488:	mov	r2, r4
   1348c:	bl	11184 <error@plt>
   13490:	movw	r1, #43749	; 0xaae5
   13494:	mov	r0, #0
   13498:	mov	r2, #5
   1349c:	movt	r1, #1
   134a0:	bl	1110c <dcgettext@plt>
   134a4:	movw	r2, #46078	; 0xb3fe
   134a8:	mov	r3, r0
   134ac:	mov	r0, #0
   134b0:	mov	r1, #0
   134b4:	movt	r2, #1
   134b8:	bl	11184 <error@plt>
   134bc:	mov	r0, #1
   134c0:	bl	11430 <__assert_fail@plt+0xfc>
   134c4:	movw	r1, #43794	; 0xab12
   134c8:	movt	r1, #1
   134cc:	b	13524 <__assert_fail@plt+0x21f0>
   134d0:	bl	11214 <__errno_location@plt>
   134d4:	ldr	r4, [r0]
   134d8:	movw	r1, #43879	; 0xab67
   134dc:	mov	r0, #0
   134e0:	mov	r2, #5
   134e4:	movt	r1, #1
   134e8:	bl	1110c <dcgettext@plt>
   134ec:	mov	r2, r0
   134f0:	mov	r0, #1
   134f4:	mov	r1, r4
   134f8:	bl	11184 <error@plt>
   134fc:	movw	r0, #45021	; 0xafdd
   13500:	movw	r1, #44455	; 0xada7
   13504:	movw	r3, #45053	; 0xaffd
   13508:	movw	r2, #1404	; 0x57c
   1350c:	movt	r0, #1
   13510:	movt	r1, #1
   13514:	movt	r3, #1
   13518:	bl	11334 <__assert_fail@plt>
   1351c:	movw	r1, #44970	; 0xafaa
   13520:	movt	r1, #1
   13524:	mov	r0, #0
   13528:	mov	r2, #5
   1352c:	bl	1110c <dcgettext@plt>
   13530:	mov	r2, r0
   13534:	mov	r0, #1
   13538:	mov	r1, #0
   1353c:	bl	11184 <error@plt>
   13540:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13544:	add	fp, sp, #24
   13548:	sub	sp, sp, #32
   1354c:	mov	r5, r0
   13550:	mov	r0, #0
   13554:	add	r9, sp, #7
   13558:	mov	r4, r1
   1355c:	strb	r0, [sp, #31]
   13560:	movw	r0, #49632	; 0xc1e0
   13564:	add	r6, r9, #23
   13568:	movt	r0, #2
   1356c:	mov	r7, r6
   13570:	ldr	r8, [r0]
   13574:	movw	r0, #49628	; 0xc1dc
   13578:	movt	r0, #2
   1357c:	ldr	r0, [r0]
   13580:	strb	r2, [r7], -r8
   13584:	cmp	r0, #8
   13588:	beq	135d0 <__assert_fail@plt+0x229c>
   1358c:	cmp	r0, #10
   13590:	beq	13608 <__assert_fail@plt+0x22d4>
   13594:	cmp	r0, #16
   13598:	bne	135fc <__assert_fail@plt+0x22c8>
   1359c:	movw	r1, #44336	; 0xad30
   135a0:	add	r0, r9, #22
   135a4:	movt	r1, #1
   135a8:	and	r2, r5, #15
   135ac:	ldrb	r2, [r1, r2]
   135b0:	strb	r2, [r0], #-1
   135b4:	lsr	r2, r5, #4
   135b8:	orr	r5, r2, r4, lsl #28
   135bc:	orr	r2, r5, r4, lsr #4
   135c0:	lsr	r4, r4, #4
   135c4:	cmp	r2, #0
   135c8:	bne	135a8 <__assert_fail@plt+0x2274>
   135cc:	b	135f8 <__assert_fail@plt+0x22c4>
   135d0:	add	r0, r9, #22
   135d4:	mov	r1, #6
   135d8:	lsr	r2, r5, #3
   135dc:	bfi	r5, r1, #3, #29
   135e0:	strb	r5, [r0], #-1
   135e4:	orr	r5, r2, r4, lsl #29
   135e8:	orr	r2, r5, r4, lsr #3
   135ec:	lsr	r4, r4, #3
   135f0:	cmp	r2, #0
   135f4:	bne	135d8 <__assert_fail@plt+0x22a4>
   135f8:	add	r6, r0, #1
   135fc:	cmp	r7, r6
   13600:	bcc	13650 <__assert_fail@plt+0x231c>
   13604:	b	13678 <__assert_fail@plt+0x2344>
   13608:	add	r6, r9, #22
   1360c:	mov	r0, r5
   13610:	mov	r1, r4
   13614:	mov	r2, #10
   13618:	mov	r3, #0
   1361c:	bl	19b14 <__assert_fail@plt+0x87e0>
   13620:	add	r2, r0, r0, lsl #2
   13624:	sub	r2, r5, r2, lsl #1
   13628:	orr	r2, r2, #48	; 0x30
   1362c:	strb	r2, [r6], #-1
   13630:	rsbs	r2, r5, #9
   13634:	mov	r5, r0
   13638:	rscs	r2, r4, #0
   1363c:	mov	r4, r1
   13640:	bcc	1360c <__assert_fail@plt+0x22d8>
   13644:	add	r6, r6, #1
   13648:	cmp	r7, r6
   1364c:	bcs	13678 <__assert_fail@plt+0x2344>
   13650:	sub	r1, r8, #23
   13654:	rsb	r0, r8, #23
   13658:	sub	r1, r1, r9
   1365c:	add	r0, r9, r0
   13660:	add	r2, r6, r1
   13664:	mov	r1, #48	; 0x30
   13668:	bl	11244 <memset@plt>
   1366c:	sub	r6, r6, #1
   13670:	cmp	r7, r6
   13674:	bcc	1366c <__assert_fail@plt+0x2338>
   13678:	movw	r0, #49524	; 0xc174
   1367c:	movt	r0, #2
   13680:	ldr	r1, [r0]
   13684:	mov	r0, r6
   13688:	bl	1107c <fputs_unlocked@plt>
   1368c:	sub	sp, fp, #24
   13690:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13694:	bx	lr
   13698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1369c:	add	fp, sp, #28
   136a0:	sub	sp, sp, #20
   136a4:	cmp	r0, #0
   136a8:	beq	13e04 <__assert_fail@plt+0x2ad0>
   136ac:	ldrb	r1, [r0]
   136b0:	cmp	r1, #0
   136b4:	beq	13cd4 <__assert_fail@plt+0x29a0>
   136b8:	movw	r7, #49612	; 0xc1cc
   136bc:	movw	r1, #49616	; 0xc1d0
   136c0:	mov	r8, r0
   136c4:	str	r0, [sp, #12]
   136c8:	movt	r7, #2
   136cc:	movt	r1, #2
   136d0:	ldr	sl, [r7]
   136d4:	ldr	r0, [r1]
   136d8:	cmp	r0, sl
   136dc:	bls	136f0 <__assert_fail@plt+0x23bc>
   136e0:	movw	r0, #49620	; 0xc1d4
   136e4:	movt	r0, #2
   136e8:	ldr	r9, [r0]
   136ec:	b	13714 <__assert_fail@plt+0x23e0>
   136f0:	movw	r0, #49620	; 0xc1d4
   136f4:	mov	r2, #32
   136f8:	movt	r0, #2
   136fc:	mov	r4, r0
   13700:	ldr	r0, [r0]
   13704:	bl	18438 <__assert_fail@plt+0x7104>
   13708:	ldr	sl, [r7]
   1370c:	mov	r9, r0
   13710:	str	r0, [r4]
   13714:	add	r0, r9, sl, lsl #5
   13718:	cmp	r0, #0
   1371c:	beq	13da4 <__assert_fail@plt+0x2a70>
   13720:	ldrb	r1, [r8]
   13724:	sub	r2, r1, #97	; 0x61
   13728:	cmp	r2, #23
   1372c:	bhi	13d14 <__assert_fail@plt+0x29e0>
   13730:	add	r3, pc, #4
   13734:	str	r8, [sp, #16]
   13738:	ldr	pc, [r3, r2, lsl #2]
   1373c:	andeq	r3, r1, r0, asr r8
   13740:	andeq	r3, r1, r4, lsl sp
   13744:	andeq	r3, r1, r8, lsl #16
   13748:	muleq	r1, ip, r7
   1374c:	andeq	r3, r1, r4, lsl sp
   13750:	andeq	r3, r1, r4, lsr #16
   13754:	andeq	r3, r1, r4, lsl sp
   13758:	andeq	r3, r1, r4, lsl sp
   1375c:	andeq	r3, r1, r4, lsl sp
   13760:	andeq	r3, r1, r4, lsl sp
   13764:	andeq	r3, r1, r4, lsl sp
   13768:	andeq	r3, r1, r4, lsl sp
   1376c:	andeq	r3, r1, r4, lsl sp
   13770:	andeq	r3, r1, r4, lsl sp
   13774:	muleq	r1, ip, r7
   13778:	andeq	r3, r1, r4, lsl sp
   1377c:	andeq	r3, r1, r4, lsl sp
   13780:	andeq	r3, r1, r4, lsl sp
   13784:	andeq	r3, r1, r4, lsl sp
   13788:	andeq	r3, r1, r4, lsl sp
   1378c:	muleq	r1, ip, r7
   13790:	andeq	r3, r1, r4, lsl sp
   13794:	andeq	r3, r1, r4, lsl sp
   13798:	muleq	r1, ip, r7
   1379c:	mov	r6, r8
   137a0:	ldrb	r3, [r6, #1]!
   137a4:	sub	r2, r3, #67	; 0x43
   137a8:	cmp	r2, #16
   137ac:	bhi	13884 <__assert_fail@plt+0x2550>
   137b0:	add	r7, pc, #0
   137b4:	ldr	pc, [r7, r2, lsl #2]
   137b8:	andeq	r3, r1, ip, ror #16
   137bc:	andeq	r3, r1, r4, lsl #17
   137c0:	andeq	r3, r1, r4, lsl #17
   137c4:	andeq	r3, r1, r4, lsl #17
   137c8:	andeq	r3, r1, r4, lsl #17
   137cc:	andeq	r3, r1, r4, lsl #17
   137d0:	strdeq	r3, [r1], -ip
   137d4:	andeq	r3, r1, r4, lsl #17
   137d8:	andeq	r3, r1, r4, lsl #17
   137dc:	strdeq	r3, [r1], -ip
   137e0:	andeq	r3, r1, r4, lsl #17
   137e4:	andeq	r3, r1, r4, lsl #17
   137e8:	andeq	r3, r1, r4, lsl #17
   137ec:	andeq	r3, r1, r4, lsl #17
   137f0:	andeq	r3, r1, r4, lsl #17
   137f4:	andeq	r3, r1, r4, lsl #17
   137f8:	andeq	r3, r1, r8, ror r8
   137fc:	add	r6, r8, #2
   13800:	mov	r4, #4
   13804:	b	138ec <__assert_fail@plt+0x25b8>
   13808:	movw	r0, #19552	; 0x4c60
   1380c:	add	r3, r8, #1
   13810:	mov	r4, #3
   13814:	mov	r5, #1
   13818:	mov	r8, #6
   1381c:	movt	r0, #1
   13820:	b	13c78 <__assert_fail@plt+0x2944>
   13824:	mov	r1, r8
   13828:	ldrb	r0, [r1, #1]!
   1382c:	cmp	r0, #68	; 0x44
   13830:	beq	13844 <__assert_fail@plt+0x2510>
   13834:	cmp	r0, #70	; 0x46
   13838:	beq	13b74 <__assert_fail@plt+0x2840>
   1383c:	cmp	r0, #76	; 0x4c
   13840:	bne	13b80 <__assert_fail@plt+0x284c>
   13844:	add	r1, r8, #2
   13848:	mov	r4, #8
   1384c:	b	13be8 <__assert_fail@plt+0x28b4>
   13850:	movw	r0, #19344	; 0x4b90
   13854:	add	r3, r8, #1
   13858:	mov	r4, #3
   1385c:	mov	r5, #1
   13860:	mov	r8, #5
   13864:	movt	r0, #1
   13868:	b	13c78 <__assert_fail@plt+0x2944>
   1386c:	add	r6, r8, #2
   13870:	mov	r4, #1
   13874:	b	138ec <__assert_fail@plt+0x25b8>
   13878:	add	r6, r8, #2
   1387c:	mov	r4, #2
   13880:	b	138ec <__assert_fail@plt+0x25b8>
   13884:	sub	r7, r3, #48	; 0x30
   13888:	mov	r4, #4
   1388c:	cmp	r7, #9
   13890:	bhi	138ec <__assert_fail@plt+0x25b8>
   13894:	add	r2, r8, #2
   13898:	mov	r4, #0
   1389c:	movw	r5, #52429	; 0xcccd
   138a0:	rsb	r3, r3, #47	; 0x2f
   138a4:	movt	r5, #52428	; 0xcccc
   138a8:	umull	r3, r5, r3, r5
   138ac:	cmp	r4, r5, lsr #3
   138b0:	bhi	13cdc <__assert_fail@plt+0x29a8>
   138b4:	add	r3, r4, r4, lsl #2
   138b8:	add	r4, r7, r3, lsl #1
   138bc:	ldrb	r3, [r2], #1
   138c0:	sub	r7, r3, #48	; 0x30
   138c4:	cmp	r7, #10
   138c8:	bcc	1389c <__assert_fail@plt+0x2568>
   138cc:	cmp	r4, #8
   138d0:	bhi	13d60 <__assert_fail@plt+0x2a2c>
   138d4:	movw	r3, #49536	; 0xc180
   138d8:	movt	r3, #2
   138dc:	ldr	r3, [r3, r4, lsl #2]
   138e0:	cmp	r3, #0
   138e4:	beq	13d60 <__assert_fail@plt+0x2a2c>
   138e8:	sub	r6, r2, #1
   138ec:	sub	r1, r1, #100	; 0x64
   138f0:	cmp	r1, #20
   138f4:	bhi	13da0 <__assert_fail@plt+0x2a6c>
   138f8:	movw	r2, #49536	; 0xc180
   138fc:	movt	r2, #2
   13900:	ldr	r5, [r2, r4, lsl #2]
   13904:	add	r2, pc, #0
   13908:	ldr	pc, [r2, r1, lsl #2]
   1390c:	andeq	r3, r1, r0, ror #18
   13910:	andeq	r3, r1, r0, lsr #27
   13914:	andeq	r3, r1, r0, lsr #27
   13918:	andeq	r3, r1, r0, lsr #27
   1391c:	andeq	r3, r1, r0, lsr #27
   13920:	andeq	r3, r1, r0, lsr #27
   13924:	andeq	r3, r1, r0, lsr #27
   13928:	andeq	r3, r1, r0, lsr #27
   1392c:	andeq	r3, r1, r0, lsr #27
   13930:	andeq	r3, r1, r0, lsr #27
   13934:	andeq	r3, r1, r0, lsr #27
   13938:	andeq	r3, r1, r8, lsl sl
   1393c:	andeq	r3, r1, r0, lsr #27
   13940:	andeq	r3, r1, r0, lsr #27
   13944:	andeq	r3, r1, r0, lsr #27
   13948:	andeq	r3, r1, r0, lsr #27
   1394c:	andeq	r3, r1, r0, lsr #27
   13950:	andeq	r3, r1, r8, ror sl
   13954:	andeq	r3, r1, r0, lsr #27
   13958:	andeq	r3, r1, r0, lsr #27
   1395c:			; <UNDEFINED> instruction: 0x000139b8
   13960:	movw	r1, #43877	; 0xab65
   13964:	movw	r2, #44719	; 0xaeaf
   13968:	cmp	r5, #4
   1396c:	add	r7, r0, #12
   13970:	movw	r3, #44712	; 0xaea8
   13974:	movt	r1, #1
   13978:	movt	r2, #1
   1397c:	mov	r0, r7
   13980:	movt	r3, #1
   13984:	moveq	r1, r2
   13988:	movw	r2, #44718	; 0xaeae
   1398c:	cmp	r5, #5
   13990:	movt	r2, #1
   13994:	moveq	r1, r2
   13998:	mov	r2, #9
   1399c:	str	r1, [sp]
   139a0:	mov	r1, #1
   139a4:	bl	11220 <__sprintf_chk@plt>
   139a8:	movw	r0, #45512	; 0xb1c8
   139ac:	mov	r8, #0
   139b0:	movt	r0, #1
   139b4:	b	13acc <__assert_fail@plt+0x2798>
   139b8:	movw	r1, #44376	; 0xad58
   139bc:	movw	r2, #44740	; 0xaec4
   139c0:	cmp	r5, #4
   139c4:	add	r7, r0, #12
   139c8:	movw	r3, #44722	; 0xaeb2
   139cc:	movt	r1, #1
   139d0:	movt	r2, #1
   139d4:	mov	r0, r7
   139d8:	movt	r3, #1
   139dc:	moveq	r1, r2
   139e0:	movw	r2, #44739	; 0xaec3
   139e4:	cmp	r5, #5
   139e8:	movt	r2, #1
   139ec:	moveq	r1, r2
   139f0:	mov	r2, #9
   139f4:	str	r1, [sp, #4]
   139f8:	movw	r1, #45716	; 0xb294
   139fc:	movt	r1, #1
   13a00:	ldr	r4, [r1, r4, lsl #2]
   13a04:	mov	r1, #1
   13a08:	str	r4, [sp]
   13a0c:	bl	11220 <__sprintf_chk@plt>
   13a10:	mov	r8, #3
   13a14:	b	13ad0 <__assert_fail@plt+0x279c>
   13a18:	movw	r1, #44954	; 0xaf9a
   13a1c:	movw	r2, #44732	; 0xaebc
   13a20:	cmp	r5, #4
   13a24:	add	r7, r0, #12
   13a28:	movw	r3, #44722	; 0xaeb2
   13a2c:	movt	r1, #1
   13a30:	movt	r2, #1
   13a34:	mov	r0, r7
   13a38:	movt	r3, #1
   13a3c:	moveq	r1, r2
   13a40:	movw	r2, #44731	; 0xaebb
   13a44:	cmp	r5, #5
   13a48:	movt	r2, #1
   13a4c:	moveq	r1, r2
   13a50:	mov	r2, #9
   13a54:	str	r1, [sp, #4]
   13a58:	movw	r1, #45580	; 0xb20c
   13a5c:	movt	r1, #1
   13a60:	ldr	r4, [r1, r4, lsl #2]
   13a64:	mov	r1, #1
   13a68:	str	r4, [sp]
   13a6c:	bl	11220 <__sprintf_chk@plt>
   13a70:	mov	r8, #2
   13a74:	b	13ad0 <__assert_fail@plt+0x279c>
   13a78:	movw	r1, #44737	; 0xaec1
   13a7c:	movw	r2, #44736	; 0xaec0
   13a80:	cmp	r5, #4
   13a84:	add	r7, r0, #12
   13a88:	movw	r3, #44712	; 0xaea8
   13a8c:	mov	r8, #1
   13a90:	movt	r1, #1
   13a94:	movt	r2, #1
   13a98:	mov	r0, r7
   13a9c:	movt	r3, #1
   13aa0:	moveq	r1, r2
   13aa4:	movw	r2, #44735	; 0xaebf
   13aa8:	cmp	r5, #5
   13aac:	movt	r2, #1
   13ab0:	moveq	r1, r2
   13ab4:	mov	r2, #9
   13ab8:	str	r1, [sp]
   13abc:	mov	r1, #1
   13ac0:	bl	11220 <__sprintf_chk@plt>
   13ac4:	movw	r0, #45648	; 0xb250
   13ac8:	movt	r0, #1
   13acc:	ldr	r4, [r0, r4, lsl #2]
   13ad0:	mov	r0, r7
   13ad4:	bl	111fc <strlen@plt>
   13ad8:	cmp	r0, #9
   13adc:	bcs	13de4 <__assert_fail@plt+0x2ab0>
   13ae0:	movw	r7, #49612	; 0xc1cc
   13ae4:	sub	r1, r5, #1
   13ae8:	cmp	r1, #4
   13aec:	movt	r7, #2
   13af0:	bhi	13da0 <__assert_fail@plt+0x2a6c>
   13af4:	movw	r0, #17864	; 0x45c8
   13af8:	add	r2, pc, #8
   13afc:	mov	r3, r6
   13b00:	movt	r0, #1
   13b04:	ldr	pc, [r2, r1, lsl #2]
   13b08:	andeq	r3, r1, ip, lsl fp
   13b0c:	andeq	r3, r1, r8, asr #22
   13b10:	andeq	r3, r1, r8, ror ip
   13b14:	andeq	r3, r1, r8, ror #22
   13b18:	andeq	r3, r1, ip, lsr fp
   13b1c:	movw	r0, #17332	; 0x43b4
   13b20:	movw	r1, #17188	; 0x4324
   13b24:	cmp	r8, #0
   13b28:	mov	r5, #1
   13b2c:	movt	r0, #1
   13b30:	movt	r1, #1
   13b34:	moveq	r0, r1
   13b38:	b	13c78 <__assert_fail@plt+0x2944>
   13b3c:	movw	r0, #18280	; 0x4768
   13b40:	movt	r0, #1
   13b44:	b	13c78 <__assert_fail@plt+0x2944>
   13b48:	movw	r0, #17672	; 0x4508
   13b4c:	movw	r1, #17476	; 0x4444
   13b50:	cmp	r8, #0
   13b54:	mov	r5, #2
   13b58:	movt	r0, #1
   13b5c:	movt	r1, #1
   13b60:	moveq	r0, r1
   13b64:	b	13c78 <__assert_fail@plt+0x2944>
   13b68:	movw	r0, #18072	; 0x4698
   13b6c:	movt	r0, #1
   13b70:	b	13c78 <__assert_fail@plt+0x2944>
   13b74:	add	r1, r8, #2
   13b78:	mov	r4, #4
   13b7c:	b	13be8 <__assert_fail@plt+0x28b4>
   13b80:	sub	r2, r0, #48	; 0x30
   13b84:	mov	r4, #8
   13b88:	cmp	r2, #9
   13b8c:	bhi	13be8 <__assert_fail@plt+0x28b4>
   13b90:	add	r1, r8, #2
   13b94:	mov	r4, #0
   13b98:	movw	r3, #52429	; 0xcccd
   13b9c:	rsb	r0, r0, #47	; 0x2f
   13ba0:	movt	r3, #52428	; 0xcccc
   13ba4:	umull	r0, r3, r0, r3
   13ba8:	cmp	r4, r3, lsr #3
   13bac:	bhi	13cdc <__assert_fail@plt+0x29a8>
   13bb0:	add	r0, r4, r4, lsl #2
   13bb4:	add	r4, r2, r0, lsl #1
   13bb8:	ldrb	r0, [r1], #1
   13bbc:	sub	r2, r0, #48	; 0x30
   13bc0:	cmp	r2, #10
   13bc4:	bcc	13b98 <__assert_fail@plt+0x2864>
   13bc8:	cmp	r4, #8
   13bcc:	bhi	13d70 <__assert_fail@plt+0x2a3c>
   13bd0:	movw	r0, #49576	; 0xc1a8
   13bd4:	movt	r0, #2
   13bd8:	ldr	r0, [r0, r4, lsl #2]
   13bdc:	cmp	r0, #0
   13be0:	beq	13d70 <__assert_fail@plt+0x2a3c>
   13be4:	sub	r1, r1, #1
   13be8:	movw	r0, #49576	; 0xc1a8
   13bec:	mov	r5, r1
   13bf0:	movt	r0, #2
   13bf4:	ldr	r4, [r0, r4, lsl #2]
   13bf8:	bl	112d4 <localeconv@plt>
   13bfc:	ldr	r0, [r0]
   13c00:	ldrb	r1, [r0]
   13c04:	cmp	r1, #0
   13c08:	beq	13c14 <__assert_fail@plt+0x28e0>
   13c0c:	bl	111fc <strlen@plt>
   13c10:	b	13c18 <__assert_fail@plt+0x28e4>
   13c14:	mov	r0, #1
   13c18:	cmp	r4, #8
   13c1c:	mov	r3, r5
   13c20:	beq	13c64 <__assert_fail@plt+0x2930>
   13c24:	cmp	r4, #7
   13c28:	beq	13c4c <__assert_fail@plt+0x2918>
   13c2c:	cmp	r4, #6
   13c30:	bne	13da0 <__assert_fail@plt+0x2a6c>
   13c34:	add	r4, r0, #14
   13c38:	movw	r0, #18524	; 0x485c
   13c3c:	mov	r5, #6
   13c40:	mov	r8, #4
   13c44:	movt	r0, #1
   13c48:	b	13c78 <__assert_fail@plt+0x2944>
   13c4c:	add	r4, r0, #23
   13c50:	movw	r0, #18776	; 0x4958
   13c54:	mov	r5, #7
   13c58:	mov	r8, #4
   13c5c:	movt	r0, #1
   13c60:	b	13c78 <__assert_fail@plt+0x2944>
   13c64:	add	r4, r0, #23
   13c68:	movw	r0, #19060	; 0x4a74
   13c6c:	mov	r5, #8
   13c70:	mov	r8, #4
   13c74:	movt	r0, #1
   13c78:	str	r8, [r9, sl, lsl #5]!
   13c7c:	str	r4, [r9, #24]
   13c80:	str	r5, [r9, #4]
   13c84:	str	r0, [r9, #8]
   13c88:	mov	r0, r3
   13c8c:	ldrb	r1, [r0], #1
   13c90:	subs	r1, r1, #122	; 0x7a
   13c94:	clz	r1, r1
   13c98:	movne	r0, r3
   13c9c:	lsr	r1, r1, #5
   13ca0:	strb	r1, [r9, #21]
   13ca4:	ldr	r1, [sp, #16]
   13ca8:	cmp	r1, r0
   13cac:	beq	13dc4 <__assert_fail@plt+0x2a90>
   13cb0:	ldr	r1, [r7]
   13cb4:	mov	r8, r0
   13cb8:	add	sl, r1, #1
   13cbc:	str	sl, [r7]
   13cc0:	ldrb	r1, [r0]
   13cc4:	cmp	r1, #0
   13cc8:	movw	r1, #49616	; 0xc1d0
   13ccc:	movt	r1, #2
   13cd0:	bne	136d4 <__assert_fail@plt+0x23a0>
   13cd4:	mov	r5, #1
   13cd8:	b	13d54 <__assert_fail@plt+0x2a20>
   13cdc:	movw	r1, #44612	; 0xae44
   13ce0:	mov	r0, #0
   13ce4:	mov	r2, #5
   13ce8:	mov	r5, #0
   13cec:	movt	r1, #1
   13cf0:	bl	1110c <dcgettext@plt>
   13cf4:	mov	r6, r0
   13cf8:	ldr	r0, [sp, #12]
   13cfc:	bl	17a9c <__assert_fail@plt+0x6768>
   13d00:	mov	r3, r0
   13d04:	mov	r0, #0
   13d08:	mov	r1, #0
   13d0c:	mov	r2, r6
   13d10:	b	13d50 <__assert_fail@plt+0x2a1c>
   13d14:	movw	r1, #44875	; 0xaf4b
   13d18:	mov	r0, #0
   13d1c:	mov	r2, #5
   13d20:	mov	r5, #0
   13d24:	movt	r1, #1
   13d28:	bl	1110c <dcgettext@plt>
   13d2c:	mov	r4, r0
   13d30:	ldr	r0, [sp, #12]
   13d34:	ldrb	r7, [r8]
   13d38:	bl	17a9c <__assert_fail@plt+0x6768>
   13d3c:	str	r0, [sp]
   13d40:	mov	r0, #0
   13d44:	mov	r1, #0
   13d48:	mov	r2, r4
   13d4c:	mov	r3, r7
   13d50:	bl	11184 <error@plt>
   13d54:	mov	r0, r5
   13d58:	sub	sp, fp, #28
   13d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d60:	movw	r1, #44635	; 0xae5b
   13d64:	mov	r5, #0
   13d68:	movt	r1, #1
   13d6c:	b	13d7c <__assert_fail@plt+0x2a48>
   13d70:	movw	r1, #44792	; 0xaef8
   13d74:	mov	r5, #0
   13d78:	movt	r1, #1
   13d7c:	mov	r0, #0
   13d80:	mov	r2, #5
   13d84:	bl	1110c <dcgettext@plt>
   13d88:	mov	r6, r0
   13d8c:	ldr	r0, [sp, #12]
   13d90:	bl	17a9c <__assert_fail@plt+0x6768>
   13d94:	mov	r3, r0
   13d98:	str	r4, [sp]
   13d9c:	b	13d04 <__assert_fail@plt+0x29d0>
   13da0:	bl	1131c <abort@plt>
   13da4:	movw	r0, #44515	; 0xade3
   13da8:	movw	r1, #44455	; 0xada7
   13dac:	movw	r3, #44529	; 0xadf1
   13db0:	mov	r2, #648	; 0x288
   13db4:	movt	r0, #1
   13db8:	movt	r1, #1
   13dbc:	movt	r3, #1
   13dc0:	bl	11334 <__assert_fail@plt>
   13dc4:	movw	r0, #44505	; 0xadd9
   13dc8:	movw	r1, #44455	; 0xada7
   13dcc:	movw	r3, #44464	; 0xadb0
   13dd0:	movw	r2, #997	; 0x3e5
   13dd4:	movt	r0, #1
   13dd8:	movt	r1, #1
   13ddc:	movt	r3, #1
   13de0:	bl	11334 <__assert_fail@plt>
   13de4:	movw	r0, #44743	; 0xaec7
   13de8:	movw	r1, #44455	; 0xada7
   13dec:	movw	r3, #44529	; 0xadf1
   13df0:	movw	r2, #747	; 0x2eb
   13df4:	movt	r0, #1
   13df8:	movt	r1, #1
   13dfc:	movt	r3, #1
   13e00:	bl	11334 <__assert_fail@plt>
   13e04:	movw	r0, #44445	; 0xad9d
   13e08:	movw	r1, #44455	; 0xada7
   13e0c:	movw	r3, #44464	; 0xadb0
   13e10:	movw	r2, #985	; 0x3d9
   13e14:	movt	r0, #1
   13e18:	movt	r1, #1
   13e1c:	movt	r3, #1
   13e20:	bl	11334 <__assert_fail@plt>
   13e24:	push	{r4, r5, r6, r7, fp, lr}
   13e28:	add	fp, sp, #16
   13e2c:	movw	r7, #49524	; 0xc174
   13e30:	mov	r6, r0
   13e34:	mov	r4, r2
   13e38:	mov	r5, r1
   13e3c:	movt	r7, #2
   13e40:	ldr	r0, [r7]
   13e44:	ldr	r1, [r0, #20]
   13e48:	ldr	r2, [r0, #24]
   13e4c:	cmp	r1, r2
   13e50:	bcs	13ea0 <__assert_fail@plt+0x2b6c>
   13e54:	add	r2, r1, #1
   13e58:	str	r2, [r0, #20]
   13e5c:	mov	r0, #40	; 0x28
   13e60:	strb	r0, [r1]
   13e64:	mov	r0, r6
   13e68:	mov	r1, r5
   13e6c:	mov	r2, #41	; 0x29
   13e70:	bl	13540 <__assert_fail@plt+0x220c>
   13e74:	cmp	r4, #0
   13e78:	popeq	{r4, r5, r6, r7, fp, pc}
   13e7c:	ldr	r0, [r7]
   13e80:	ldr	r1, [r0, #20]
   13e84:	ldr	r2, [r0, #24]
   13e88:	cmp	r1, r2
   13e8c:	bcs	13eac <__assert_fail@plt+0x2b78>
   13e90:	add	r2, r1, #1
   13e94:	str	r2, [r0, #20]
   13e98:	strb	r4, [r1]
   13e9c:	pop	{r4, r5, r6, r7, fp, pc}
   13ea0:	mov	r1, #40	; 0x28
   13ea4:	bl	112a4 <__overflow@plt>
   13ea8:	b	13e64 <__assert_fail@plt+0x2b30>
   13eac:	mov	r1, r4
   13eb0:	pop	{r4, r5, r6, r7, fp, lr}
   13eb4:	b	112a4 <__overflow@plt>
   13eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ebc:	add	fp, sp, #28
   13ec0:	sub	sp, sp, #36	; 0x24
   13ec4:	mov	r9, r0
   13ec8:	movw	r0, #49632	; 0xc1e0
   13ecc:	add	r6, sp, #11
   13ed0:	mov	r8, r1
   13ed4:	str	r2, [sp, #4]
   13ed8:	movt	r0, #2
   13edc:	add	r7, r6, #23
   13ee0:	ldr	sl, [r0]
   13ee4:	mov	r0, #32
   13ee8:	mov	r4, r7
   13eec:	strh	r0, [r4], -sl
   13ef0:	movw	r0, #49628	; 0xc1dc
   13ef4:	movt	r0, #2
   13ef8:	ldr	r0, [r0]
   13efc:	cmp	r0, #8
   13f00:	beq	13f50 <__assert_fail@plt+0x2c1c>
   13f04:	cmp	r0, #10
   13f08:	beq	1407c <__assert_fail@plt+0x2d48>
   13f0c:	cmp	r0, #16
   13f10:	bne	13f84 <__assert_fail@plt+0x2c50>
   13f14:	movw	r1, #44336	; 0xad30
   13f18:	add	r0, r6, #22
   13f1c:	mov	r2, r9
   13f20:	mov	r3, r8
   13f24:	movt	r1, #1
   13f28:	and	r7, r2, #15
   13f2c:	lsr	r2, r2, #4
   13f30:	ldrb	r7, [r1, r7]
   13f34:	orr	r2, r2, r3, lsl #28
   13f38:	strb	r7, [r0], #-1
   13f3c:	orr	r7, r2, r3, lsr #4
   13f40:	lsr	r3, r3, #4
   13f44:	cmp	r7, #0
   13f48:	bne	13f28 <__assert_fail@plt+0x2bf4>
   13f4c:	b	13f80 <__assert_fail@plt+0x2c4c>
   13f50:	add	r0, r6, #22
   13f54:	mov	r1, #6
   13f58:	mov	r2, r9
   13f5c:	mov	r3, r8
   13f60:	lsr	r7, r2, #3
   13f64:	bfi	r2, r1, #3, #29
   13f68:	strb	r2, [r0], #-1
   13f6c:	orr	r2, r7, r3, lsl #29
   13f70:	orr	r7, r2, r3, lsr #3
   13f74:	lsr	r3, r3, #3
   13f78:	cmp	r7, #0
   13f7c:	bne	13f60 <__assert_fail@plt+0x2c2c>
   13f80:	add	r7, r0, #1
   13f84:	cmp	r4, r7
   13f88:	bcs	13fb8 <__assert_fail@plt+0x2c84>
   13f8c:	mvn	r1, #22
   13f90:	rsb	r0, sl, #23
   13f94:	sub	r1, r1, r6
   13f98:	add	r0, r6, r0
   13f9c:	add	r1, r1, sl
   13fa0:	add	r2, r7, r1
   13fa4:	mov	r1, #48	; 0x30
   13fa8:	bl	11244 <memset@plt>
   13fac:	sub	r7, r7, #1
   13fb0:	cmp	r4, r7
   13fb4:	bcc	13fac <__assert_fail@plt+0x2c78>
   13fb8:	movw	sl, #49524	; 0xc174
   13fbc:	mov	r0, r7
   13fc0:	movt	sl, #2
   13fc4:	ldr	r1, [sl]
   13fc8:	bl	1107c <fputs_unlocked@plt>
   13fcc:	movw	r0, #49688	; 0xc218
   13fd0:	movt	r0, #2
   13fd4:	ldrd	r0, [r0]
   13fd8:	adds	r6, r0, r9
   13fdc:	ldr	r0, [sl]
   13fe0:	adc	r5, r1, r8
   13fe4:	ldr	r1, [r0, #20]
   13fe8:	ldr	r2, [r0, #24]
   13fec:	cmp	r1, r2
   13ff0:	bcs	141c4 <__assert_fail@plt+0x2e90>
   13ff4:	add	r2, r1, #1
   13ff8:	str	r2, [r0, #20]
   13ffc:	mov	r0, #40	; 0x28
   14000:	strb	r0, [r1]
   14004:	movw	r0, #49632	; 0xc1e0
   14008:	add	r3, sp, #11
   1400c:	movt	r0, #2
   14010:	add	r7, r3, #23
   14014:	ldr	r8, [r0]
   14018:	mov	r0, #41	; 0x29
   1401c:	mov	r4, r7
   14020:	strh	r0, [r4], -r8
   14024:	movw	r0, #49628	; 0xc1dc
   14028:	movt	r0, #2
   1402c:	ldr	r0, [r0]
   14030:	cmp	r0, #8
   14034:	beq	140d4 <__assert_fail@plt+0x2da0>
   14038:	cmp	r0, #10
   1403c:	beq	14174 <__assert_fail@plt+0x2e40>
   14040:	cmp	r0, #16
   14044:	bne	14100 <__assert_fail@plt+0x2dcc>
   14048:	movw	r1, #44336	; 0xad30
   1404c:	add	r0, r3, #22
   14050:	movt	r1, #1
   14054:	and	r2, r6, #15
   14058:	ldrb	r2, [r1, r2]
   1405c:	strb	r2, [r0], #-1
   14060:	lsr	r2, r6, #4
   14064:	orr	r6, r2, r5, lsl #28
   14068:	orr	r2, r6, r5, lsr #4
   1406c:	lsr	r5, r5, #4
   14070:	cmp	r2, #0
   14074:	bne	14054 <__assert_fail@plt+0x2d20>
   14078:	b	140fc <__assert_fail@plt+0x2dc8>
   1407c:	add	r6, r6, #22
   14080:	mov	r7, r9
   14084:	mov	r5, r8
   14088:	mov	r0, r7
   1408c:	mov	r1, r5
   14090:	mov	r2, #10
   14094:	mov	r3, #0
   14098:	bl	19b14 <__assert_fail@plt+0x87e0>
   1409c:	add	r2, r0, r0, lsl #2
   140a0:	sub	r2, r7, r2, lsl #1
   140a4:	orr	r2, r2, #48	; 0x30
   140a8:	strb	r2, [r6], #-1
   140ac:	rsbs	r2, r7, #9
   140b0:	mov	r7, r0
   140b4:	rscs	r2, r5, #0
   140b8:	mov	r5, r1
   140bc:	bcc	14088 <__assert_fail@plt+0x2d54>
   140c0:	add	r7, r6, #1
   140c4:	add	r6, sp, #11
   140c8:	cmp	r4, r7
   140cc:	bcc	13f8c <__assert_fail@plt+0x2c58>
   140d0:	b	13fb8 <__assert_fail@plt+0x2c84>
   140d4:	add	r0, r3, #22
   140d8:	mov	r1, #6
   140dc:	lsr	r2, r6, #3
   140e0:	bfi	r6, r1, #3, #29
   140e4:	strb	r6, [r0], #-1
   140e8:	orr	r6, r2, r5, lsl #29
   140ec:	orr	r2, r6, r5, lsr #3
   140f0:	lsr	r5, r5, #3
   140f4:	cmp	r2, #0
   140f8:	bne	140dc <__assert_fail@plt+0x2da8>
   140fc:	add	r7, r0, #1
   14100:	cmp	r4, r7
   14104:	bcs	14134 <__assert_fail@plt+0x2e00>
   14108:	mvn	r1, #22
   1410c:	rsb	r0, r8, #23
   14110:	sub	r1, r1, r3
   14114:	add	r0, r3, r0
   14118:	add	r1, r1, r8
   1411c:	add	r2, r7, r1
   14120:	mov	r1, #48	; 0x30
   14124:	bl	11244 <memset@plt>
   14128:	sub	r7, r7, #1
   1412c:	cmp	r4, r7
   14130:	bcc	14128 <__assert_fail@plt+0x2df4>
   14134:	ldr	r1, [sl]
   14138:	mov	r0, r7
   1413c:	bl	1107c <fputs_unlocked@plt>
   14140:	ldr	r1, [sp, #4]
   14144:	cmp	r1, #0
   14148:	beq	1416c <__assert_fail@plt+0x2e38>
   1414c:	ldr	r0, [sl]
   14150:	ldr	r3, [r0, #20]
   14154:	ldr	r2, [r0, #24]
   14158:	cmp	r3, r2
   1415c:	bcs	141d0 <__assert_fail@plt+0x2e9c>
   14160:	add	r2, r3, #1
   14164:	str	r2, [r0, #20]
   14168:	strb	r1, [r3]
   1416c:	sub	sp, fp, #28
   14170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14174:	add	r7, r3, #22
   14178:	mov	r0, r6
   1417c:	mov	r1, r5
   14180:	mov	r2, #10
   14184:	mov	r3, #0
   14188:	bl	19b14 <__assert_fail@plt+0x87e0>
   1418c:	add	r2, r0, r0, lsl #2
   14190:	sub	r2, r6, r2, lsl #1
   14194:	orr	r2, r2, #48	; 0x30
   14198:	strb	r2, [r7], #-1
   1419c:	rsbs	r2, r6, #9
   141a0:	mov	r6, r0
   141a4:	rscs	r2, r5, #0
   141a8:	mov	r5, r1
   141ac:	bcc	14178 <__assert_fail@plt+0x2e44>
   141b0:	add	r7, r7, #1
   141b4:	add	r3, sp, #11
   141b8:	cmp	r4, r7
   141bc:	bcc	14108 <__assert_fail@plt+0x2dd4>
   141c0:	b	14134 <__assert_fail@plt+0x2e00>
   141c4:	mov	r1, #40	; 0x28
   141c8:	bl	112a4 <__overflow@plt>
   141cc:	b	14004 <__assert_fail@plt+0x2cd0>
   141d0:	bl	112a4 <__overflow@plt>
   141d4:	sub	sp, fp, #28
   141d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141e0:	add	fp, sp, #28
   141e4:	sub	sp, sp, #4
   141e8:	movw	sl, #49680	; 0xc210
   141ec:	movw	r8, #49704	; 0xc228
   141f0:	movw	r4, #47170	; 0xb842
   141f4:	movw	r9, #49684	; 0xc214
   141f8:	movw	r6, #44940	; 0xaf8c
   141fc:	mov	r7, #1
   14200:	movt	sl, #2
   14204:	movt	r8, #2
   14208:	movt	r4, #1
   1420c:	movt	r9, #2
   14210:	movt	r6, #1
   14214:	ldr	r0, [sl]
   14218:	ldr	r5, [r0]
   1421c:	cmp	r5, #0
   14220:	str	r5, [r8]
   14224:	beq	14318 <__assert_fail@plt+0x2fe4>
   14228:	add	r0, r0, #4
   1422c:	mov	r1, r4
   14230:	str	r0, [sl]
   14234:	mov	r0, r5
   14238:	bl	11094 <strcmp@plt>
   1423c:	cmp	r0, #0
   14240:	beq	142a0 <__assert_fail@plt+0x2f6c>
   14244:	mov	r0, r5
   14248:	mov	r1, r6
   1424c:	bl	112ec <fopen64@plt>
   14250:	cmp	r0, #0
   14254:	str	r0, [r9]
   14258:	bne	142e0 <__assert_fail@plt+0x2fac>
   1425c:	bl	11214 <__errno_location@plt>
   14260:	ldr	r2, [r8]
   14264:	ldr	r5, [r0]
   14268:	mov	r0, #0
   1426c:	mov	r1, #3
   14270:	mov	r7, #0
   14274:	bl	177f0 <__assert_fail@plt+0x64bc>
   14278:	movw	r2, #46078	; 0xb3fe
   1427c:	mov	r3, r0
   14280:	mov	r0, #0
   14284:	mov	r1, r5
   14288:	movt	r2, #1
   1428c:	bl	11184 <error@plt>
   14290:	ldr	r0, [r9]
   14294:	cmp	r0, #0
   14298:	beq	14214 <__assert_fail@plt+0x2ee0>
   1429c:	b	142e0 <__assert_fail@plt+0x2fac>
   142a0:	movw	r1, #43879	; 0xab67
   142a4:	mov	r0, #0
   142a8:	mov	r2, #5
   142ac:	movt	r1, #1
   142b0:	bl	1110c <dcgettext@plt>
   142b4:	movw	r1, #49700	; 0xc224
   142b8:	str	r0, [r8]
   142bc:	mov	r0, #1
   142c0:	movt	r1, #2
   142c4:	strb	r0, [r1]
   142c8:	movw	r0, #49520	; 0xc170
   142cc:	movt	r0, #2
   142d0:	ldr	r0, [r0]
   142d4:	str	r0, [r9]
   142d8:	cmp	r0, #0
   142dc:	beq	14214 <__assert_fail@plt+0x2ee0>
   142e0:	movw	r1, #49648	; 0xc1f0
   142e4:	movt	r1, #2
   142e8:	ldrb	r1, [r1]
   142ec:	cmp	r1, #1
   142f0:	bne	14318 <__assert_fail@plt+0x2fe4>
   142f4:	movw	r1, #49636	; 0xc1e4
   142f8:	movt	r1, #2
   142fc:	ldrb	r1, [r1]
   14300:	cmp	r1, #0
   14304:	bne	14318 <__assert_fail@plt+0x2fe4>
   14308:	mov	r1, #0
   1430c:	mov	r2, #2
   14310:	mov	r3, #0
   14314:	bl	11238 <setvbuf@plt>
   14318:	and	r0, r7, #1
   1431c:	sub	sp, fp, #28
   14320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14328:	add	fp, sp, #28
   1432c:	sub	sp, sp, #12
   14330:	cmp	r0, r1
   14334:	str	r3, [sp, #4]
   14338:	str	r0, [sp, #8]
   1433c:	bls	143ac <__assert_fail@plt+0x3078>
   14340:	ldr	r4, [fp, #12]
   14344:	ldr	r7, [sp, #8]
   14348:	mov	r5, r2
   1434c:	mov	r9, r1
   14350:	mov	sl, #0
   14354:	asr	r8, r4, #31
   14358:	ldr	r0, [fp, #12]
   1435c:	subs	r7, r7, #1
   14360:	mov	r3, #0
   14364:	sbc	sl, sl, #0
   14368:	mov	r2, r0
   1436c:	umull	r0, r1, r7, r0
   14370:	mla	r1, r7, r8, r1
   14374:	mla	r1, sl, r2, r1
   14378:	ldr	r2, [sp, #8]
   1437c:	bl	19b14 <__assert_fail@plt+0x87e0>
   14380:	mov	r6, r0
   14384:	ldr	r0, [fp, #8]
   14388:	ldrsb	r2, [r5], #1
   1438c:	add	r0, r4, r0
   14390:	sub	r1, r0, r6
   14394:	ldr	r0, [sp, #4]
   14398:	bl	18830 <__assert_fail@plt+0x74fc>
   1439c:	subs	r0, r9, r7
   143a0:	mov	r4, r6
   143a4:	rscs	r0, sl, #0
   143a8:	bcc	14358 <__assert_fail@plt+0x3024>
   143ac:	sub	sp, fp, #28
   143b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b8:	add	fp, sp, #28
   143bc:	sub	sp, sp, #12
   143c0:	cmp	r0, r1
   143c4:	str	r3, [sp, #4]
   143c8:	str	r0, [sp, #8]
   143cc:	bls	1443c <__assert_fail@plt+0x3108>
   143d0:	ldr	r4, [fp, #12]
   143d4:	ldr	r7, [sp, #8]
   143d8:	mov	r5, r2
   143dc:	mov	r9, r1
   143e0:	mov	sl, #0
   143e4:	asr	r8, r4, #31
   143e8:	ldr	r0, [fp, #12]
   143ec:	subs	r7, r7, #1
   143f0:	mov	r3, #0
   143f4:	sbc	sl, sl, #0
   143f8:	mov	r2, r0
   143fc:	umull	r0, r1, r7, r0
   14400:	mla	r1, r7, r8, r1
   14404:	mla	r1, sl, r2, r1
   14408:	ldr	r2, [sp, #8]
   1440c:	bl	19b14 <__assert_fail@plt+0x87e0>
   14410:	mov	r6, r0
   14414:	ldr	r0, [fp, #8]
   14418:	ldrb	r2, [r5], #1
   1441c:	add	r0, r4, r0
   14420:	sub	r1, r0, r6
   14424:	ldr	r0, [sp, #4]
   14428:	bl	18830 <__assert_fail@plt+0x74fc>
   1442c:	subs	r0, r9, r7
   14430:	mov	r4, r6
   14434:	rscs	r0, sl, #0
   14438:	bcc	143e8 <__assert_fail@plt+0x30b4>
   1443c:	sub	sp, fp, #28
   14440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14448:	add	fp, sp, #28
   1444c:	sub	sp, sp, #12
   14450:	cmp	r0, r1
   14454:	stm	sp, {r1, r3}
   14458:	bls	14500 <__assert_fail@plt+0x31cc>
   1445c:	ldr	r4, [fp, #12]
   14460:	mov	r5, r2
   14464:	mov	r9, r0
   14468:	mov	sl, #0
   1446c:	mov	r7, r0
   14470:	asr	r8, r4, #31
   14474:	ldr	r0, [fp, #12]
   14478:	subs	r7, r7, #1
   1447c:	mov	r3, #0
   14480:	sbc	sl, sl, #0
   14484:	mov	r2, r0
   14488:	umull	r0, r1, r7, r0
   1448c:	mla	r1, r7, r8, r1
   14490:	mla	r1, sl, r2, r1
   14494:	mov	r2, r9
   14498:	bl	19b14 <__assert_fail@plt+0x87e0>
   1449c:	mov	r6, r0
   144a0:	ldr	r0, [fp, #8]
   144a4:	add	r0, r4, r0
   144a8:	sub	r1, r0, r6
   144ac:	movw	r0, #49670	; 0xc206
   144b0:	movt	r0, #2
   144b4:	ldrb	r0, [r0]
   144b8:	cmp	r0, #1
   144bc:	bne	144d8 <__assert_fail@plt+0x31a4>
   144c0:	ldrb	r0, [r5, #1]
   144c4:	strb	r0, [sp, #8]
   144c8:	ldrb	r0, [r5]
   144cc:	strb	r0, [sp, #9]
   144d0:	ldrh	r0, [sp, #8]
   144d4:	b	144dc <__assert_fail@plt+0x31a8>
   144d8:	ldrh	r0, [r5]
   144dc:	sxth	r2, r0
   144e0:	ldr	r0, [sp, #4]
   144e4:	bl	18830 <__assert_fail@plt+0x74fc>
   144e8:	ldr	r0, [sp]
   144ec:	add	r5, r5, #2
   144f0:	mov	r4, r6
   144f4:	subs	r0, r0, r7
   144f8:	rscs	r0, sl, #0
   144fc:	bcc	14474 <__assert_fail@plt+0x3140>
   14500:	sub	sp, fp, #28
   14504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1450c:	add	fp, sp, #28
   14510:	sub	sp, sp, #12
   14514:	cmp	r0, r1
   14518:	stm	sp, {r1, r3}
   1451c:	bls	145c0 <__assert_fail@plt+0x328c>
   14520:	ldr	r4, [fp, #12]
   14524:	mov	r5, r2
   14528:	mov	r9, r0
   1452c:	mov	sl, #0
   14530:	mov	r7, r0
   14534:	asr	r8, r4, #31
   14538:	ldr	r0, [fp, #12]
   1453c:	subs	r7, r7, #1
   14540:	mov	r3, #0
   14544:	sbc	sl, sl, #0
   14548:	mov	r2, r0
   1454c:	umull	r0, r1, r7, r0
   14550:	mla	r1, r7, r8, r1
   14554:	mla	r1, sl, r2, r1
   14558:	mov	r2, r9
   1455c:	bl	19b14 <__assert_fail@plt+0x87e0>
   14560:	mov	r6, r0
   14564:	ldr	r0, [fp, #8]
   14568:	add	r0, r4, r0
   1456c:	sub	r1, r0, r6
   14570:	movw	r0, #49670	; 0xc206
   14574:	movt	r0, #2
   14578:	ldrb	r0, [r0]
   1457c:	cmp	r0, #1
   14580:	bne	1459c <__assert_fail@plt+0x3268>
   14584:	ldrb	r0, [r5, #1]
   14588:	strb	r0, [sp, #8]
   1458c:	ldrb	r0, [r5]
   14590:	strb	r0, [sp, #9]
   14594:	ldrh	r2, [sp, #8]
   14598:	b	145a0 <__assert_fail@plt+0x326c>
   1459c:	ldrh	r2, [r5]
   145a0:	ldr	r0, [sp, #4]
   145a4:	bl	18830 <__assert_fail@plt+0x74fc>
   145a8:	ldr	r0, [sp]
   145ac:	add	r5, r5, #2
   145b0:	mov	r4, r6
   145b4:	subs	r0, r0, r7
   145b8:	rscs	r0, sl, #0
   145bc:	bcc	14538 <__assert_fail@plt+0x3204>
   145c0:	sub	sp, fp, #28
   145c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145cc:	add	fp, sp, #28
   145d0:	sub	sp, sp, #12
   145d4:	cmp	r0, r1
   145d8:	stm	sp, {r1, r3}
   145dc:	bls	14690 <__assert_fail@plt+0x335c>
   145e0:	ldr	r4, [fp, #12]
   145e4:	mov	r5, r2
   145e8:	mov	r9, r0
   145ec:	mov	sl, #0
   145f0:	mov	r7, r0
   145f4:	asr	r8, r4, #31
   145f8:	ldr	r0, [fp, #12]
   145fc:	subs	r7, r7, #1
   14600:	mov	r3, #0
   14604:	sbc	sl, sl, #0
   14608:	mov	r2, r0
   1460c:	umull	r0, r1, r7, r0
   14610:	mla	r1, r7, r8, r1
   14614:	mla	r1, sl, r2, r1
   14618:	mov	r2, r9
   1461c:	bl	19b14 <__assert_fail@plt+0x87e0>
   14620:	mov	r6, r0
   14624:	ldr	r0, [fp, #8]
   14628:	add	r0, r4, r0
   1462c:	sub	r1, r0, r6
   14630:	movw	r0, #49670	; 0xc206
   14634:	movt	r0, #2
   14638:	ldrb	r0, [r0]
   1463c:	cmp	r0, #1
   14640:	bne	1466c <__assert_fail@plt+0x3338>
   14644:	ldrb	r0, [r5, #3]
   14648:	strb	r0, [sp, #8]
   1464c:	ldrb	r0, [r5, #2]
   14650:	strb	r0, [sp, #9]
   14654:	ldrb	r0, [r5, #1]
   14658:	strb	r0, [sp, #10]
   1465c:	ldrb	r0, [r5]
   14660:	strb	r0, [sp, #11]
   14664:	ldr	r2, [sp, #8]
   14668:	b	14670 <__assert_fail@plt+0x333c>
   1466c:	ldr	r2, [r5]
   14670:	ldr	r0, [sp, #4]
   14674:	bl	18830 <__assert_fail@plt+0x74fc>
   14678:	ldr	r0, [sp]
   1467c:	add	r5, r5, #4
   14680:	mov	r4, r6
   14684:	subs	r0, r0, r7
   14688:	rscs	r0, sl, #0
   1468c:	bcc	145f8 <__assert_fail@plt+0x32c4>
   14690:	sub	sp, fp, #28
   14694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1469c:	add	fp, sp, #28
   146a0:	sub	sp, sp, #12
   146a4:	cmp	r0, r1
   146a8:	stm	sp, {r1, r3}
   146ac:	bls	14760 <__assert_fail@plt+0x342c>
   146b0:	ldr	r4, [fp, #12]
   146b4:	mov	r5, r2
   146b8:	mov	r9, r0
   146bc:	mov	sl, #0
   146c0:	mov	r7, r0
   146c4:	asr	r8, r4, #31
   146c8:	ldr	r0, [fp, #12]
   146cc:	subs	r7, r7, #1
   146d0:	mov	r3, #0
   146d4:	sbc	sl, sl, #0
   146d8:	mov	r2, r0
   146dc:	umull	r0, r1, r7, r0
   146e0:	mla	r1, r7, r8, r1
   146e4:	mla	r1, sl, r2, r1
   146e8:	mov	r2, r9
   146ec:	bl	19b14 <__assert_fail@plt+0x87e0>
   146f0:	mov	r6, r0
   146f4:	ldr	r0, [fp, #8]
   146f8:	add	r0, r4, r0
   146fc:	sub	r1, r0, r6
   14700:	movw	r0, #49670	; 0xc206
   14704:	movt	r0, #2
   14708:	ldrb	r0, [r0]
   1470c:	cmp	r0, #1
   14710:	bne	1473c <__assert_fail@plt+0x3408>
   14714:	ldrb	r0, [r5, #3]
   14718:	strb	r0, [sp, #8]
   1471c:	ldrb	r0, [r5, #2]
   14720:	strb	r0, [sp, #9]
   14724:	ldrb	r0, [r5, #1]
   14728:	strb	r0, [sp, #10]
   1472c:	ldrb	r0, [r5]
   14730:	strb	r0, [sp, #11]
   14734:	ldr	r2, [sp, #8]
   14738:	b	14740 <__assert_fail@plt+0x340c>
   1473c:	ldr	r2, [r5]
   14740:	ldr	r0, [sp, #4]
   14744:	bl	18830 <__assert_fail@plt+0x74fc>
   14748:	ldr	r0, [sp]
   1474c:	add	r5, r5, #4
   14750:	mov	r4, r6
   14754:	subs	r0, r0, r7
   14758:	rscs	r0, sl, #0
   1475c:	bcc	146c8 <__assert_fail@plt+0x3394>
   14760:	sub	sp, fp, #28
   14764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1476c:	add	fp, sp, #28
   14770:	sub	sp, sp, #20
   14774:	cmp	r0, r1
   14778:	stm	sp, {r1, r3}
   1477c:	bls	14854 <__assert_fail@plt+0x3520>
   14780:	ldr	r4, [fp, #12]
   14784:	mov	r5, r2
   14788:	mov	r9, r0
   1478c:	mov	sl, #0
   14790:	mov	r7, r0
   14794:	asr	r8, r4, #31
   14798:	ldr	r0, [fp, #12]
   1479c:	subs	r7, r7, #1
   147a0:	mov	r3, #0
   147a4:	sbc	sl, sl, #0
   147a8:	mov	r2, r0
   147ac:	umull	r0, r1, r7, r0
   147b0:	mla	r1, r7, r8, r1
   147b4:	mla	r1, sl, r2, r1
   147b8:	mov	r2, r9
   147bc:	bl	19b14 <__assert_fail@plt+0x87e0>
   147c0:	mov	r6, r0
   147c4:	ldr	r0, [fp, #8]
   147c8:	add	r0, r4, r0
   147cc:	sub	r1, r0, r6
   147d0:	movw	r0, #49670	; 0xc206
   147d4:	movt	r0, #2
   147d8:	ldrb	r0, [r0]
   147dc:	cmp	r0, #1
   147e0:	bne	14830 <__assert_fail@plt+0x34fc>
   147e4:	ldrb	r0, [r5, #7]
   147e8:	strb	r0, [sp, #8]
   147ec:	ldrb	r0, [r5, #6]
   147f0:	strb	r0, [sp, #9]
   147f4:	ldrb	r0, [r5, #5]
   147f8:	strb	r0, [sp, #10]
   147fc:	ldrb	r0, [r5, #4]
   14800:	strb	r0, [sp, #11]
   14804:	ldrb	r0, [r5, #3]
   14808:	strb	r0, [sp, #12]
   1480c:	ldrb	r0, [r5, #2]
   14810:	strb	r0, [sp, #13]
   14814:	ldrb	r0, [r5, #1]
   14818:	strb	r0, [sp, #14]
   1481c:	ldrb	r0, [r5]
   14820:	strb	r0, [sp, #15]
   14824:	ldr	r2, [sp, #8]
   14828:	ldr	r3, [sp, #12]
   1482c:	b	14834 <__assert_fail@plt+0x3500>
   14830:	ldrd	r2, [r5]
   14834:	ldr	r0, [sp, #4]
   14838:	bl	18830 <__assert_fail@plt+0x74fc>
   1483c:	ldr	r0, [sp]
   14840:	add	r5, r5, #8
   14844:	mov	r4, r6
   14848:	subs	r0, r0, r7
   1484c:	rscs	r0, sl, #0
   14850:	bcc	14798 <__assert_fail@plt+0x3464>
   14854:	sub	sp, fp, #28
   14858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1485c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14860:	add	fp, sp, #28
   14864:	sub	sp, sp, #44	; 0x2c
   14868:	cmp	r0, r1
   1486c:	str	r1, [sp, #8]
   14870:	bls	14950 <__assert_fail@plt+0x361c>
   14874:	ldr	r7, [fp, #12]
   14878:	mov	r9, r0
   1487c:	mov	r4, r2
   14880:	mov	r8, #0
   14884:	add	sl, sp, #12
   14888:	mov	r6, r9
   1488c:	asr	r0, r7, #31
   14890:	str	r0, [sp, #4]
   14894:	ldr	r0, [fp, #12]
   14898:	ldr	r3, [sp, #4]
   1489c:	subs	r6, r6, #1
   148a0:	sbc	r8, r8, #0
   148a4:	mov	r2, r0
   148a8:	umull	r0, r1, r6, r0
   148ac:	mla	r1, r6, r3, r1
   148b0:	mov	r3, #0
   148b4:	mla	r1, r8, r2, r1
   148b8:	mov	r2, r9
   148bc:	bl	19b14 <__assert_fail@plt+0x87e0>
   148c0:	mov	r5, r0
   148c4:	ldr	r0, [fp, #8]
   148c8:	add	r0, r7, r0
   148cc:	sub	r7, r0, r5
   148d0:	movw	r0, #49670	; 0xc206
   148d4:	movt	r0, #2
   148d8:	ldrb	r0, [r0]
   148dc:	cmp	r0, #1
   148e0:	bne	1490c <__assert_fail@plt+0x35d8>
   148e4:	ldrb	r0, [r4, #3]
   148e8:	strb	r0, [sp, #12]
   148ec:	ldrb	r0, [r4, #2]
   148f0:	strb	r0, [sp, #13]
   148f4:	ldrb	r0, [r4, #1]
   148f8:	strb	r0, [sp, #14]
   148fc:	ldrb	r0, [r4]
   14900:	strb	r0, [sp, #15]
   14904:	vldr	s0, [sp, #12]
   14908:	b	14910 <__assert_fail@plt+0x35dc>
   1490c:	vldr	s0, [r4]
   14910:	mov	r0, sl
   14914:	mov	r1, #31
   14918:	mov	r2, #0
   1491c:	mov	r3, #0
   14920:	bl	15bc4 <__assert_fail@plt+0x4890>
   14924:	movw	r0, #44916	; 0xaf74
   14928:	mov	r1, r7
   1492c:	mov	r2, sl
   14930:	movt	r0, #1
   14934:	bl	18830 <__assert_fail@plt+0x74fc>
   14938:	ldr	r0, [sp, #8]
   1493c:	add	r4, r4, #4
   14940:	mov	r7, r5
   14944:	subs	r0, r0, r6
   14948:	rscs	r0, r8, #0
   1494c:	bcc	14894 <__assert_fail@plt+0x3560>
   14950:	sub	sp, fp, #28
   14954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1495c:	add	fp, sp, #28
   14960:	sub	sp, sp, #52	; 0x34
   14964:	cmp	r0, r1
   14968:	str	r1, [sp, #4]
   1496c:	bls	14a6c <__assert_fail@plt+0x3738>
   14970:	ldr	r7, [fp, #12]
   14974:	mov	r9, r0
   14978:	mov	r4, r2
   1497c:	mov	r8, #0
   14980:	add	sl, sp, #8
   14984:	mov	r6, r9
   14988:	asr	r0, r7, #31
   1498c:	str	r0, [sp]
   14990:	ldr	r0, [fp, #12]
   14994:	ldr	r3, [sp]
   14998:	subs	r6, r6, #1
   1499c:	sbc	r8, r8, #0
   149a0:	mov	r2, r0
   149a4:	umull	r0, r1, r6, r0
   149a8:	mla	r1, r6, r3, r1
   149ac:	mov	r3, #0
   149b0:	mla	r1, r8, r2, r1
   149b4:	mov	r2, r9
   149b8:	bl	19b14 <__assert_fail@plt+0x87e0>
   149bc:	mov	r5, r0
   149c0:	ldr	r0, [fp, #8]
   149c4:	add	r0, r7, r0
   149c8:	sub	r7, r0, r5
   149cc:	movw	r0, #49670	; 0xc206
   149d0:	movt	r0, #2
   149d4:	ldrb	r0, [r0]
   149d8:	cmp	r0, #1
   149dc:	bne	14a28 <__assert_fail@plt+0x36f4>
   149e0:	ldrb	r0, [r4, #7]
   149e4:	strb	r0, [sp, #8]
   149e8:	ldrb	r0, [r4, #6]
   149ec:	strb	r0, [sp, #9]
   149f0:	ldrb	r0, [r4, #5]
   149f4:	strb	r0, [sp, #10]
   149f8:	ldrb	r0, [r4, #4]
   149fc:	strb	r0, [sp, #11]
   14a00:	ldrb	r0, [r4, #3]
   14a04:	strb	r0, [sp, #12]
   14a08:	ldrb	r0, [r4, #2]
   14a0c:	strb	r0, [sp, #13]
   14a10:	ldrb	r0, [r4, #1]
   14a14:	strb	r0, [sp, #14]
   14a18:	ldrb	r0, [r4]
   14a1c:	strb	r0, [sp, #15]
   14a20:	vldr	d0, [sp, #8]
   14a24:	b	14a2c <__assert_fail@plt+0x36f8>
   14a28:	vldr	d0, [r4]
   14a2c:	mov	r0, sl
   14a30:	mov	r1, #40	; 0x28
   14a34:	mov	r2, #0
   14a38:	mov	r3, #0
   14a3c:	bl	158b0 <__assert_fail@plt+0x457c>
   14a40:	movw	r0, #44916	; 0xaf74
   14a44:	mov	r1, r7
   14a48:	mov	r2, sl
   14a4c:	movt	r0, #1
   14a50:	bl	18830 <__assert_fail@plt+0x74fc>
   14a54:	ldr	r0, [sp, #4]
   14a58:	add	r4, r4, #8
   14a5c:	mov	r7, r5
   14a60:	subs	r0, r0, r6
   14a64:	rscs	r0, r8, #0
   14a68:	bcc	14990 <__assert_fail@plt+0x365c>
   14a6c:	sub	sp, fp, #28
   14a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a78:	add	fp, sp, #28
   14a7c:	sub	sp, sp, #52	; 0x34
   14a80:	cmp	r0, r1
   14a84:	str	r1, [sp, #4]
   14a88:	bls	14b88 <__assert_fail@plt+0x3854>
   14a8c:	ldr	r7, [fp, #12]
   14a90:	mov	r9, r0
   14a94:	mov	r4, r2
   14a98:	mov	r8, #0
   14a9c:	add	sl, sp, #8
   14aa0:	mov	r6, r9
   14aa4:	asr	r0, r7, #31
   14aa8:	str	r0, [sp]
   14aac:	ldr	r0, [fp, #12]
   14ab0:	ldr	r3, [sp]
   14ab4:	subs	r6, r6, #1
   14ab8:	sbc	r8, r8, #0
   14abc:	mov	r2, r0
   14ac0:	umull	r0, r1, r6, r0
   14ac4:	mla	r1, r6, r3, r1
   14ac8:	mov	r3, #0
   14acc:	mla	r1, r8, r2, r1
   14ad0:	mov	r2, r9
   14ad4:	bl	19b14 <__assert_fail@plt+0x87e0>
   14ad8:	mov	r5, r0
   14adc:	ldr	r0, [fp, #8]
   14ae0:	add	r0, r7, r0
   14ae4:	sub	r7, r0, r5
   14ae8:	movw	r0, #49670	; 0xc206
   14aec:	movt	r0, #2
   14af0:	ldrb	r0, [r0]
   14af4:	cmp	r0, #1
   14af8:	bne	14b44 <__assert_fail@plt+0x3810>
   14afc:	ldrb	r0, [r4, #7]
   14b00:	strb	r0, [sp, #8]
   14b04:	ldrb	r0, [r4, #6]
   14b08:	strb	r0, [sp, #9]
   14b0c:	ldrb	r0, [r4, #5]
   14b10:	strb	r0, [sp, #10]
   14b14:	ldrb	r0, [r4, #4]
   14b18:	strb	r0, [sp, #11]
   14b1c:	ldrb	r0, [r4, #3]
   14b20:	strb	r0, [sp, #12]
   14b24:	ldrb	r0, [r4, #2]
   14b28:	strb	r0, [sp, #13]
   14b2c:	ldrb	r0, [r4, #1]
   14b30:	strb	r0, [sp, #14]
   14b34:	ldrb	r0, [r4]
   14b38:	strb	r0, [sp, #15]
   14b3c:	vldr	d0, [sp, #8]
   14b40:	b	14b48 <__assert_fail@plt+0x3814>
   14b44:	vldr	d0, [r4]
   14b48:	mov	r0, sl
   14b4c:	mov	r1, #40	; 0x28
   14b50:	mov	r2, #0
   14b54:	mov	r3, #0
   14b58:	bl	15d18 <__assert_fail@plt+0x49e4>
   14b5c:	movw	r0, #44916	; 0xaf74
   14b60:	mov	r1, r7
   14b64:	mov	r2, sl
   14b68:	movt	r0, #1
   14b6c:	bl	18830 <__assert_fail@plt+0x74fc>
   14b70:	ldr	r0, [sp, #4]
   14b74:	add	r4, r4, #8
   14b78:	mov	r7, r5
   14b7c:	subs	r0, r0, r6
   14b80:	rscs	r0, r8, #0
   14b84:	bcc	14aac <__assert_fail@plt+0x3778>
   14b88:	sub	sp, fp, #28
   14b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b94:	add	fp, sp, #28
   14b98:	sub	sp, sp, #12
   14b9c:	cmp	r0, r1
   14ba0:	str	r1, [sp, #4]
   14ba4:	bls	14c58 <__assert_fail@plt+0x3924>
   14ba8:	ldr	r7, [fp, #12]
   14bac:	mov	r4, r2
   14bb0:	mov	r8, r0
   14bb4:	mov	r6, r0
   14bb8:	mov	r9, #0
   14bbc:	asr	sl, r7, #31
   14bc0:	ldr	r0, [fp, #12]
   14bc4:	subs	r6, r6, #1
   14bc8:	mov	r3, #0
   14bcc:	mov	r5, r7
   14bd0:	sbc	r9, r9, #0
   14bd4:	mov	r2, r0
   14bd8:	umull	r0, r1, r6, r0
   14bdc:	mla	r1, r6, sl, r1
   14be0:	mla	r1, r9, r2, r1
   14be4:	mov	r2, r8
   14be8:	bl	19b14 <__assert_fail@plt+0x87e0>
   14bec:	mov	r7, r0
   14bf0:	ldrb	r0, [r4], #1
   14bf4:	movw	r2, #44920	; 0xaf78
   14bf8:	movt	r2, #1
   14bfc:	and	r0, r0, #127	; 0x7f
   14c00:	cmp	r0, #127	; 0x7f
   14c04:	beq	14c30 <__assert_fail@plt+0x38fc>
   14c08:	cmp	r0, #32
   14c0c:	bhi	14c20 <__assert_fail@plt+0x38ec>
   14c10:	movw	r1, #45784	; 0xb2d8
   14c14:	movt	r1, #1
   14c18:	add	r2, r1, r0, lsl #2
   14c1c:	b	14c30 <__assert_fail@plt+0x38fc>
   14c20:	mov	r1, #0
   14c24:	add	r2, sp, #10
   14c28:	strb	r1, [sp, #11]
   14c2c:	strb	r0, [sp, #10]
   14c30:	ldr	r0, [fp, #8]
   14c34:	add	r0, r5, r0
   14c38:	sub	r1, r0, r7
   14c3c:	movw	r0, #44916	; 0xaf74
   14c40:	movt	r0, #1
   14c44:	bl	18830 <__assert_fail@plt+0x74fc>
   14c48:	ldr	r0, [sp, #4]
   14c4c:	subs	r0, r0, r6
   14c50:	rscs	r0, r9, #0
   14c54:	bcc	14bc0 <__assert_fail@plt+0x388c>
   14c58:	sub	sp, fp, #28
   14c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c64:	add	fp, sp, #28
   14c68:	sub	sp, sp, #20
   14c6c:	cmp	r0, r1
   14c70:	str	r1, [sp, #12]
   14c74:	bls	14d64 <__assert_fail@plt+0x3a30>
   14c78:	ldr	r7, [fp, #12]
   14c7c:	mov	sl, r0
   14c80:	mov	r4, r2
   14c84:	mov	r8, #0
   14c88:	mov	r6, sl
   14c8c:	asr	r0, r7, #31
   14c90:	str	r0, [sp, #8]
   14c94:	ldr	r0, [fp, #12]
   14c98:	ldr	r3, [sp, #8]
   14c9c:	subs	r6, r6, #1
   14ca0:	sbc	r8, r8, #0
   14ca4:	mov	r2, r0
   14ca8:	umull	r0, r1, r6, r0
   14cac:	mla	r1, r6, r3, r1
   14cb0:	mov	r3, #0
   14cb4:	mla	r1, r8, r2, r1
   14cb8:	mov	r2, sl
   14cbc:	bl	19b14 <__assert_fail@plt+0x87e0>
   14cc0:	mov	r9, r0
   14cc4:	ldrsb	r0, [r4], #1
   14cc8:	uxtb	r5, r0
   14ccc:	cmp	r5, #14
   14cd0:	bcs	14ce4 <__assert_fail@plt+0x39b0>
   14cd4:	movw	r1, #16257	; 0x3f81
   14cd8:	mov	r2, #1
   14cdc:	tst	r2, r1, lsr r5
   14ce0:	bne	14d2c <__assert_fail@plt+0x39f8>
   14ce4:	bl	111e4 <__ctype_b_loc@plt>
   14ce8:	ldr	r0, [r0]
   14cec:	movw	r3, #44948	; 0xaf94
   14cf0:	mov	r1, #1
   14cf4:	mov	r2, #4
   14cf8:	movt	r3, #1
   14cfc:	add	r0, r0, r5, lsl #1
   14d00:	ldrh	r0, [r0]
   14d04:	str	r5, [sp]
   14d08:	add	r5, sp, #16
   14d0c:	tst	r0, #16384	; 0x4000
   14d10:	movw	r0, #44951	; 0xaf97
   14d14:	movt	r0, #1
   14d18:	moveq	r3, r0
   14d1c:	mov	r0, r5
   14d20:	bl	11220 <__sprintf_chk@plt>
   14d24:	mov	r2, r5
   14d28:	b	14d38 <__assert_fail@plt+0x3a04>
   14d2c:	movw	r1, #45920	; 0xb360
   14d30:	movt	r1, #1
   14d34:	ldr	r2, [r1, r0, lsl #2]
   14d38:	ldr	r0, [fp, #8]
   14d3c:	add	r0, r7, r0
   14d40:	sub	r1, r0, r9
   14d44:	movw	r0, #44916	; 0xaf74
   14d48:	movt	r0, #1
   14d4c:	bl	18830 <__assert_fail@plt+0x74fc>
   14d50:	ldr	r0, [sp, #12]
   14d54:	mov	r7, r9
   14d58:	subs	r0, r0, r6
   14d5c:	rscs	r0, r8, #0
   14d60:	bcc	14c94 <__assert_fail@plt+0x3960>
   14d64:	sub	sp, fp, #28
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d6c:	push	{r4, r5, r6, sl, fp, lr}
   14d70:	add	fp, sp, #16
   14d74:	movw	r6, #49684	; 0xc214
   14d78:	movt	r6, #2
   14d7c:	ldr	r5, [r6]
   14d80:	cmp	r5, #0
   14d84:	beq	14e18 <__assert_fail@plt+0x3ae4>
   14d88:	ldr	r1, [r5]
   14d8c:	lsl	r1, r1, #26
   14d90:	and	r4, r0, r1, asr #31
   14d94:	movw	r0, #49680	; 0xc210
   14d98:	movw	r1, #47170	; 0xb842
   14d9c:	movt	r0, #2
   14da0:	movt	r1, #1
   14da4:	ldr	r0, [r0]
   14da8:	ldr	r0, [r0, #-4]
   14dac:	bl	11094 <strcmp@plt>
   14db0:	cmp	r0, #0
   14db4:	beq	14e20 <__assert_fail@plt+0x3aec>
   14db8:	mov	r0, r5
   14dbc:	bl	15a00 <__assert_fail@plt+0x46cc>
   14dc0:	cmp	r4, #0
   14dc4:	bne	14dd8 <__assert_fail@plt+0x3aa4>
   14dc8:	cmp	r0, #0
   14dcc:	beq	14dd8 <__assert_fail@plt+0x3aa4>
   14dd0:	bl	11214 <__errno_location@plt>
   14dd4:	ldr	r4, [r0]
   14dd8:	cmp	r4, #0
   14ddc:	beq	14e30 <__assert_fail@plt+0x3afc>
   14de0:	movw	r0, #49704	; 0xc228
   14de4:	mov	r1, #3
   14de8:	mov	r5, #0
   14dec:	movt	r0, #2
   14df0:	ldr	r2, [r0]
   14df4:	mov	r0, #0
   14df8:	bl	177f0 <__assert_fail@plt+0x64bc>
   14dfc:	movw	r2, #46078	; 0xb3fe
   14e00:	mov	r3, r0
   14e04:	mov	r0, #0
   14e08:	mov	r1, r4
   14e0c:	movt	r2, #1
   14e10:	bl	11184 <error@plt>
   14e14:	b	14e34 <__assert_fail@plt+0x3b00>
   14e18:	mov	r5, #1
   14e1c:	b	14e3c <__assert_fail@plt+0x3b08>
   14e20:	mov	r0, r5
   14e24:	bl	112e0 <clearerr_unlocked@plt>
   14e28:	cmp	r4, #0
   14e2c:	bne	14de0 <__assert_fail@plt+0x3aac>
   14e30:	mov	r5, #1
   14e34:	mov	r0, #0
   14e38:	str	r0, [r6]
   14e3c:	movw	r0, #49524	; 0xc174
   14e40:	movt	r0, #2
   14e44:	ldr	r0, [r0]
   14e48:	ldrb	r0, [r0]
   14e4c:	tst	r0, #32
   14e50:	beq	14e7c <__assert_fail@plt+0x3b48>
   14e54:	movw	r1, #45009	; 0xafd1
   14e58:	mov	r0, #0
   14e5c:	mov	r2, #5
   14e60:	mov	r5, #0
   14e64:	movt	r1, #1
   14e68:	bl	1110c <dcgettext@plt>
   14e6c:	mov	r2, r0
   14e70:	mov	r0, #0
   14e74:	mov	r1, #0
   14e78:	bl	11184 <error@plt>
   14e7c:	mov	r0, r5
   14e80:	pop	{r4, r5, r6, sl, fp, pc}
   14e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e88:	add	fp, sp, #28
   14e8c:	sub	sp, sp, #4
   14e90:	mov	r9, r0
   14e94:	movw	r0, #49696	; 0xc220
   14e98:	mov	r8, r1
   14e9c:	movt	r0, #2
   14ea0:	sub	r1, r9, #1
   14ea4:	ldr	r0, [r0]
   14ea8:	cmp	r1, r0
   14eac:	bcs	14f64 <__assert_fail@plt+0x3c30>
   14eb0:	movw	sl, #49684	; 0xc214
   14eb4:	mov	r0, #0
   14eb8:	mov	r4, r2
   14ebc:	mov	r7, #1
   14ec0:	str	r0, [r2]
   14ec4:	movt	sl, #2
   14ec8:	ldr	r3, [sl]
   14ecc:	cmp	r3, #0
   14ed0:	beq	14f58 <__assert_fail@plt+0x3c24>
   14ed4:	mov	r0, r8
   14ed8:	mov	r1, #1
   14edc:	mov	r2, r9
   14ee0:	bl	11304 <fread_unlocked@plt>
   14ee4:	ldr	r1, [r4]
   14ee8:	cmp	r0, r9
   14eec:	add	r1, r1, r0
   14ef0:	str	r1, [r4]
   14ef4:	beq	14f58 <__assert_fail@plt+0x3c24>
   14ef8:	mov	r7, #1
   14efc:	bl	11214 <__errno_location@plt>
   14f00:	mov	r5, r0
   14f04:	ldr	r0, [r5]
   14f08:	bl	14d6c <__assert_fail@plt+0x3a38>
   14f0c:	and	r6, r7, r0
   14f10:	bl	141dc <__assert_fail@plt+0x2ea8>
   14f14:	ldr	r3, [sl]
   14f18:	and	r7, r6, r0
   14f1c:	cmp	r3, #0
   14f20:	beq	14f50 <__assert_fail@plt+0x3c1c>
   14f24:	ldr	r1, [r4]
   14f28:	sub	r6, r9, r1
   14f2c:	add	r0, r8, r1
   14f30:	mov	r1, #1
   14f34:	mov	r2, r6
   14f38:	bl	11304 <fread_unlocked@plt>
   14f3c:	ldr	r1, [r4]
   14f40:	cmp	r0, r6
   14f44:	add	r1, r1, r0
   14f48:	str	r1, [r4]
   14f4c:	bne	14f04 <__assert_fail@plt+0x3bd0>
   14f50:	cmp	r7, #0
   14f54:	movwne	r7, #1
   14f58:	mov	r0, r7
   14f5c:	sub	sp, fp, #28
   14f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f64:	movw	r0, #45070	; 0xb00e
   14f68:	movw	r1, #44455	; 0xada7
   14f6c:	movw	r3, #45100	; 0xb02c
   14f70:	movw	r2, #1293	; 0x50d
   14f74:	movt	r0, #1
   14f78:	movt	r1, #1
   14f7c:	movt	r3, #1
   14f80:	bl	11334 <__assert_fail@plt>
   14f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f88:	add	fp, sp, #28
   14f8c:	sub	sp, sp, #20
   14f90:	str	r0, [sp, #12]
   14f94:	movw	r0, #49668	; 0xc204
   14f98:	mov	r4, r2
   14f9c:	str	r1, [sp, #16]
   14fa0:	movt	r0, #2
   14fa4:	ldrb	r0, [r0]
   14fa8:	cmp	r0, #0
   14fac:	bne	14fd4 <__assert_fail@plt+0x3ca0>
   14fb0:	movw	r0, #49708	; 0xc22c
   14fb4:	movt	r0, #2
   14fb8:	ldrb	r0, [r0]
   14fbc:	cmp	r0, #1
   14fc0:	movweq	r0, #49696	; 0xc220
   14fc4:	movteq	r0, #2
   14fc8:	ldreq	r0, [r0]
   14fcc:	cmpeq	r0, r4
   14fd0:	beq	1500c <__assert_fail@plt+0x3cd8>
   14fd4:	movw	r0, #49709	; 0xc22d
   14fd8:	mov	r9, #0
   14fdc:	movt	r0, #2
   14fe0:	strb	r9, [r0]
   14fe4:	movw	r0, #49612	; 0xc1cc
   14fe8:	movt	r0, #2
   14fec:	ldr	r0, [r0]
   14ff0:	cmp	r0, #0
   14ff4:	beq	15238 <__assert_fail@plt+0x3f04>
   14ff8:	movw	r5, #49620	; 0xc1d4
   14ffc:	movw	r6, #49524	; 0xc174
   15000:	movt	r5, #2
   15004:	movt	r6, #2
   15008:	b	1506c <__assert_fail@plt+0x3d38>
   1500c:	ldr	r1, [fp, #8]
   15010:	mov	r0, r3
   15014:	mov	r2, r4
   15018:	bl	11100 <memcmp@plt>
   1501c:	cmp	r0, #0
   15020:	bne	14fd4 <__assert_fail@plt+0x3ca0>
   15024:	movw	r4, #49709	; 0xc22d
   15028:	movt	r4, #2
   1502c:	ldrb	r0, [r4]
   15030:	cmp	r0, #0
   15034:	bne	15238 <__assert_fail@plt+0x3f04>
   15038:	movw	r1, #45143	; 0xb057
   1503c:	mov	r0, #1
   15040:	mov	r5, #1
   15044:	movt	r1, #1
   15048:	bl	1125c <__printf_chk@plt>
   1504c:	strb	r5, [r4]
   15050:	b	15238 <__assert_fail@plt+0x3f04>
   15054:	mov	r1, #10
   15058:	bl	112a4 <__overflow@plt>
   1505c:	b	15220 <__assert_fail@plt+0x3eec>
   15060:	mov	r1, #60	; 0x3c
   15064:	bl	112a4 <__overflow@plt>
   15068:	b	151f0 <__assert_fail@plt+0x3ebc>
   1506c:	ldr	r0, [r5]
   15070:	movw	r1, #45420	; 0xb16c
   15074:	cmp	r9, #0
   15078:	movt	r1, #1
   1507c:	add	r0, r0, r9, lsl #5
   15080:	ldr	r0, [r0, #4]
   15084:	ldr	r0, [r1, r0, lsl #2]
   15088:	movw	r1, #49696	; 0xc220
   1508c:	movt	r1, #2
   15090:	ldr	r1, [r1]
   15094:	sub	r2, r1, r4
   15098:	udiv	r8, r1, r0
   1509c:	udiv	sl, r2, r0
   150a0:	beq	150cc <__assert_fail@plt+0x3d98>
   150a4:	movw	r0, #49632	; 0xc1e0
   150a8:	movw	r1, #44916	; 0xaf74
   150ac:	movw	r3, #44335	; 0xad2f
   150b0:	movt	r0, #2
   150b4:	movt	r1, #1
   150b8:	movt	r3, #1
   150bc:	ldr	r2, [r0]
   150c0:	mov	r0, #1
   150c4:	bl	1125c <__printf_chk@plt>
   150c8:	b	150e8 <__assert_fail@plt+0x3db4>
   150cc:	movw	r0, #49624	; 0xc1d8
   150d0:	ldr	r1, [sp, #16]
   150d4:	mov	r2, #0
   150d8:	movt	r0, #2
   150dc:	ldr	r3, [r0]
   150e0:	ldr	r0, [sp, #12]
   150e4:	blx	r3
   150e8:	ldr	r0, [r5]
   150ec:	add	r0, r0, r9, lsl #5
   150f0:	ldr	r1, [r0, #24]
   150f4:	ldr	r2, [r0, #28]
   150f8:	ldr	r7, [r0, #8]
   150fc:	add	r3, r0, #12
   15100:	mov	r0, r8
   15104:	stm	sp, {r1, r2}
   15108:	ldr	r2, [fp, #8]
   1510c:	mov	r1, sl
   15110:	blx	r7
   15114:	ldr	r0, [r5]
   15118:	add	r0, r0, r9, lsl #5
   1511c:	ldrb	r1, [r0, #21]
   15120:	cmp	r1, #0
   15124:	beq	151fc <__assert_fail@plt+0x3ec8>
   15128:	ldr	r1, [r0, #24]
   1512c:	ldr	r0, [r0, #28]
   15130:	movw	r3, #44335	; 0xad2f
   15134:	movt	r3, #1
   15138:	mul	r0, r0, sl
   1513c:	sdiv	r0, r0, r8
   15140:	mla	r2, r1, sl, r0
   15144:	movw	r1, #44916	; 0xaf74
   15148:	mov	r0, #1
   1514c:	movt	r1, #1
   15150:	bl	1125c <__printf_chk@plt>
   15154:	ldr	r1, [r6]
   15158:	movw	r0, #45146	; 0xb05a
   1515c:	movt	r0, #1
   15160:	bl	1107c <fputs_unlocked@plt>
   15164:	mov	r8, r4
   15168:	cmp	r4, #0
   1516c:	beq	151cc <__assert_fail@plt+0x3e98>
   15170:	bl	111e4 <__ctype_b_loc@plt>
   15174:	ldr	r5, [fp, #8]
   15178:	mov	r7, r0
   1517c:	mov	r4, r8
   15180:	b	1518c <__assert_fail@plt+0x3e58>
   15184:	bl	112a4 <__overflow@plt>
   15188:	b	151c4 <__assert_fail@plt+0x3e90>
   1518c:	ldrb	r1, [r5], #1
   15190:	ldr	r0, [r7]
   15194:	add	r0, r0, r1, lsl #1
   15198:	ldrb	r0, [r0, #1]
   1519c:	tst	r0, #64	; 0x40
   151a0:	ldr	r0, [r6]
   151a4:	movweq	r1, #46	; 0x2e
   151a8:	ldr	r2, [r0, #20]
   151ac:	ldr	r3, [r0, #24]
   151b0:	cmp	r2, r3
   151b4:	bcs	15184 <__assert_fail@plt+0x3e50>
   151b8:	add	r3, r2, #1
   151bc:	str	r3, [r0, #20]
   151c0:	strb	r1, [r2]
   151c4:	subs	r4, r4, #1
   151c8:	bne	1518c <__assert_fail@plt+0x3e58>
   151cc:	ldr	r0, [r6]
   151d0:	ldr	r1, [r0, #20]
   151d4:	ldr	r2, [r0, #24]
   151d8:	cmp	r1, r2
   151dc:	bcs	15060 <__assert_fail@plt+0x3d2c>
   151e0:	add	r2, r1, #1
   151e4:	str	r2, [r0, #20]
   151e8:	mov	r0, #60	; 0x3c
   151ec:	strb	r0, [r1]
   151f0:	movw	r5, #49620	; 0xc1d4
   151f4:	mov	r4, r8
   151f8:	movt	r5, #2
   151fc:	ldr	r0, [r6]
   15200:	ldr	r1, [r0, #20]
   15204:	ldr	r2, [r0, #24]
   15208:	cmp	r1, r2
   1520c:	bcs	15054 <__assert_fail@plt+0x3d20>
   15210:	add	r2, r1, #1
   15214:	str	r2, [r0, #20]
   15218:	mov	r0, #10
   1521c:	strb	r0, [r1]
   15220:	movw	r0, #49612	; 0xc1cc
   15224:	add	r9, r9, #1
   15228:	movt	r0, #2
   1522c:	ldr	r0, [r0]
   15230:	cmp	r9, r0
   15234:	bcc	1506c <__assert_fail@plt+0x3d38>
   15238:	movw	r0, #49708	; 0xc22c
   1523c:	mov	r1, #1
   15240:	movt	r0, #2
   15244:	strb	r1, [r0]
   15248:	sub	sp, fp, #28
   1524c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15250:	mov	r0, #1
   15254:	b	11430 <__assert_fail@plt+0xfc>
   15258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1525c:	add	fp, sp, #28
   15260:	sub	sp, sp, #12
   15264:	mov	r4, r3
   15268:	mov	r6, r2
   1526c:	mov	r5, r1
   15270:	mov	sl, r0
   15274:	bl	111fc <strlen@plt>
   15278:	ldr	r8, [r5]
   1527c:	cmp	r8, #0
   15280:	beq	1533c <__assert_fail@plt+0x4008>
   15284:	mov	r7, r0
   15288:	mov	r0, #0
   1528c:	add	r9, r5, #4
   15290:	mov	r5, #0
   15294:	str	r6, [sp, #4]
   15298:	str	r0, [sp]
   1529c:	mvn	r0, #0
   152a0:	str	r0, [sp, #8]
   152a4:	mov	r0, r8
   152a8:	mov	r1, sl
   152ac:	mov	r2, r7
   152b0:	bl	11310 <strncmp@plt>
   152b4:	cmp	r0, #0
   152b8:	bne	15310 <__assert_fail@plt+0x3fdc>
   152bc:	mov	r0, r8
   152c0:	bl	111fc <strlen@plt>
   152c4:	cmp	r0, r7
   152c8:	beq	15340 <__assert_fail@plt+0x400c>
   152cc:	ldr	r0, [sp, #8]
   152d0:	cmn	r0, #1
   152d4:	beq	1530c <__assert_fail@plt+0x3fd8>
   152d8:	ldr	r0, [sp, #4]
   152dc:	cmp	r0, #0
   152e0:	beq	15300 <__assert_fail@plt+0x3fcc>
   152e4:	ldr	r1, [sp, #8]
   152e8:	mov	r2, r4
   152ec:	mla	r0, r1, r4, r0
   152f0:	mov	r1, r6
   152f4:	bl	11100 <memcmp@plt>
   152f8:	cmp	r0, #0
   152fc:	beq	15310 <__assert_fail@plt+0x3fdc>
   15300:	mov	r0, #1
   15304:	str	r0, [sp]
   15308:	b	15310 <__assert_fail@plt+0x3fdc>
   1530c:	str	r5, [sp, #8]
   15310:	ldr	r8, [r9, r5, lsl #2]
   15314:	add	r6, r6, r4
   15318:	add	r5, r5, #1
   1531c:	cmp	r8, #0
   15320:	bne	152a4 <__assert_fail@plt+0x3f70>
   15324:	ldr	r0, [sp]
   15328:	tst	r0, #1
   1532c:	ldr	r0, [sp, #8]
   15330:	mvnne	r0, #1
   15334:	sub	sp, fp, #28
   15338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1533c:	mvn	r5, #0
   15340:	mov	r0, r5
   15344:	sub	sp, fp, #28
   15348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1534c:	push	{r4, r5, r6, r7, fp, lr}
   15350:	add	fp, sp, #16
   15354:	mov	r5, r0
   15358:	ldr	r0, [r1]
   1535c:	mvn	r4, #0
   15360:	cmp	r0, #0
   15364:	beq	15394 <__assert_fail@plt+0x4060>
   15368:	add	r7, r1, #4
   1536c:	mov	r6, #0
   15370:	mov	r1, r5
   15374:	bl	11094 <strcmp@plt>
   15378:	cmp	r0, #0
   1537c:	moveq	r0, r6
   15380:	popeq	{r4, r5, r6, r7, fp, pc}
   15384:	ldr	r0, [r7, r6, lsl #2]
   15388:	add	r6, r6, #1
   1538c:	cmp	r0, #0
   15390:	bne	15370 <__assert_fail@plt+0x403c>
   15394:	mov	r0, r4
   15398:	pop	{r4, r5, r6, r7, fp, pc}
   1539c:	push	{r4, r5, r6, sl, fp, lr}
   153a0:	add	fp, sp, #16
   153a4:	sub	sp, sp, #8
   153a8:	mov	r4, r1
   153ac:	movw	r1, #46018	; 0xb3c2
   153b0:	mov	r5, r0
   153b4:	movw	r0, #45991	; 0xb3a7
   153b8:	cmn	r2, #1
   153bc:	mov	r2, #5
   153c0:	movt	r0, #1
   153c4:	movt	r1, #1
   153c8:	moveq	r1, r0
   153cc:	mov	r0, #0
   153d0:	bl	1110c <dcgettext@plt>
   153d4:	mov	r6, r0
   153d8:	mov	r0, #0
   153dc:	mov	r1, #8
   153e0:	mov	r2, r4
   153e4:	bl	174cc <__assert_fail@plt+0x6198>
   153e8:	mov	r4, r0
   153ec:	mov	r0, #1
   153f0:	mov	r1, r5
   153f4:	bl	17a8c <__assert_fail@plt+0x6758>
   153f8:	str	r0, [sp]
   153fc:	mov	r0, #0
   15400:	mov	r1, #0
   15404:	mov	r2, r6
   15408:	mov	r3, r4
   1540c:	bl	11184 <error@plt>
   15410:	sub	sp, fp, #16
   15414:	pop	{r4, r5, r6, sl, fp, pc}
   15418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1541c:	add	fp, sp, #28
   15420:	sub	sp, sp, #4
   15424:	mov	r5, r1
   15428:	movw	r1, #46047	; 0xb3df
   1542c:	mov	sl, r2
   15430:	mov	r7, r0
   15434:	mov	r0, #0
   15438:	mov	r2, #5
   1543c:	mov	r8, #0
   15440:	movt	r1, #1
   15444:	bl	1110c <dcgettext@plt>
   15448:	movw	r4, #49512	; 0xc168
   1544c:	movt	r4, #2
   15450:	ldr	r1, [r4]
   15454:	bl	1107c <fputs_unlocked@plt>
   15458:	ldr	r6, [r7]
   1545c:	cmp	r6, #0
   15460:	beq	15500 <__assert_fail@plt+0x41cc>
   15464:	add	r9, r7, #4
   15468:	mov	r7, #0
   1546c:	str	sl, [sp]
   15470:	cmp	r8, #0
   15474:	beq	15490 <__assert_fail@plt+0x415c>
   15478:	mov	r0, r7
   1547c:	mov	r1, r5
   15480:	mov	r2, sl
   15484:	bl	11100 <memcmp@plt>
   15488:	cmp	r0, #0
   1548c:	beq	154bc <__assert_fail@plt+0x4188>
   15490:	ldr	r7, [r4]
   15494:	mov	r0, r6
   15498:	bl	17a9c <__assert_fail@plt+0x6768>
   1549c:	movw	r2, #46068	; 0xb3f4
   154a0:	mov	r3, r0
   154a4:	mov	r0, r7
   154a8:	mov	r1, #1
   154ac:	movt	r2, #1
   154b0:	bl	11280 <__fprintf_chk@plt>
   154b4:	mov	r7, r5
   154b8:	b	154ec <__assert_fail@plt+0x41b8>
   154bc:	mov	sl, r9
   154c0:	ldr	r9, [r4]
   154c4:	mov	r0, r6
   154c8:	bl	17a9c <__assert_fail@plt+0x6768>
   154cc:	mov	r3, r0
   154d0:	mov	r0, r9
   154d4:	mov	r9, sl
   154d8:	ldr	sl, [sp]
   154dc:	movw	r2, #46076	; 0xb3fc
   154e0:	mov	r1, #1
   154e4:	movt	r2, #1
   154e8:	bl	11280 <__fprintf_chk@plt>
   154ec:	ldr	r6, [r9, -r8, lsl #2]
   154f0:	add	r5, r5, sl
   154f4:	sub	r8, r8, #1
   154f8:	cmp	r6, #0
   154fc:	bne	15470 <__assert_fail@plt+0x413c>
   15500:	ldr	r0, [r4]
   15504:	ldr	r1, [r0, #20]
   15508:	ldr	r2, [r0, #24]
   1550c:	cmp	r1, r2
   15510:	addcc	r2, r1, #1
   15514:	strcc	r2, [r0, #20]
   15518:	movcc	r0, #10
   1551c:	strbcc	r0, [r1]
   15520:	subcc	sp, fp, #28
   15524:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15528:	mov	r1, #10
   1552c:	sub	sp, fp, #28
   15530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15534:	b	112a4 <__overflow@plt>
   15538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1553c:	add	fp, sp, #28
   15540:	sub	sp, sp, #20
   15544:	mov	r9, r0
   15548:	ldr	r0, [fp, #16]
   1554c:	mov	r8, r3
   15550:	mov	sl, r2
   15554:	mov	r7, r1
   15558:	cmp	r0, #0
   1555c:	beq	15634 <__assert_fail@plt+0x4300>
   15560:	mov	r0, r7
   15564:	str	r9, [sp, #8]
   15568:	str	r8, [sp, #16]
   1556c:	bl	111fc <strlen@plt>
   15570:	ldr	r9, [sl]
   15574:	cmp	r9, #0
   15578:	beq	15674 <__assert_fail@plt+0x4340>
   1557c:	str	sl, [sp, #4]
   15580:	add	r8, sl, #4
   15584:	ldr	sl, [sp, #16]
   15588:	mov	r4, r0
   1558c:	mov	r0, #0
   15590:	mvn	r6, #0
   15594:	mov	r5, #0
   15598:	str	r0, [sp, #12]
   1559c:	mov	r0, r9
   155a0:	mov	r1, r7
   155a4:	mov	r2, r4
   155a8:	bl	11310 <strncmp@plt>
   155ac:	cmp	r0, #0
   155b0:	bne	15600 <__assert_fail@plt+0x42cc>
   155b4:	mov	r0, r9
   155b8:	bl	111fc <strlen@plt>
   155bc:	cmp	r0, r4
   155c0:	beq	15680 <__assert_fail@plt+0x434c>
   155c4:	cmn	r6, #1
   155c8:	beq	155fc <__assert_fail@plt+0x42c8>
   155cc:	ldr	r0, [sp, #16]
   155d0:	cmp	r0, #0
   155d4:	beq	155f0 <__assert_fail@plt+0x42bc>
   155d8:	ldr	r2, [fp, #8]
   155dc:	mov	r1, sl
   155e0:	mla	r0, r6, r2, r0
   155e4:	bl	11100 <memcmp@plt>
   155e8:	cmp	r0, #0
   155ec:	beq	15600 <__assert_fail@plt+0x42cc>
   155f0:	mov	r0, #1
   155f4:	str	r0, [sp, #12]
   155f8:	b	15600 <__assert_fail@plt+0x42cc>
   155fc:	mov	r6, r5
   15600:	ldr	r9, [r8, r5, lsl #2]
   15604:	ldr	r0, [fp, #8]
   15608:	add	r5, r5, #1
   1560c:	add	sl, sl, r0
   15610:	cmp	r9, #0
   15614:	bne	1559c <__assert_fail@plt+0x4268>
   15618:	ldr	r0, [sp, #12]
   1561c:	ldr	r8, [sp, #16]
   15620:	ldr	sl, [sp, #4]
   15624:	ldr	r9, [sp, #8]
   15628:	tst	r0, #1
   1562c:	beq	15690 <__assert_fail@plt+0x435c>
   15630:	b	1569c <__assert_fail@plt+0x4368>
   15634:	ldr	r0, [sl]
   15638:	movw	r4, #45991	; 0xb3a7
   1563c:	movt	r4, #1
   15640:	cmp	r0, #0
   15644:	beq	156b0 <__assert_fail@plt+0x437c>
   15648:	add	r5, sl, #4
   1564c:	mov	r6, #0
   15650:	mov	r1, r7
   15654:	bl	11094 <strcmp@plt>
   15658:	cmp	r0, #0
   1565c:	beq	15690 <__assert_fail@plt+0x435c>
   15660:	ldr	r0, [r5, r6, lsl #2]
   15664:	add	r6, r6, #1
   15668:	cmp	r0, #0
   1566c:	bne	15650 <__assert_fail@plt+0x431c>
   15670:	b	156b0 <__assert_fail@plt+0x437c>
   15674:	ldr	r8, [sp, #16]
   15678:	ldr	r9, [sp, #8]
   1567c:	b	156a8 <__assert_fail@plt+0x4374>
   15680:	ldr	r8, [sp, #16]
   15684:	ldr	sl, [sp, #4]
   15688:	ldr	r9, [sp, #8]
   1568c:	mov	r6, r5
   15690:	cmn	r6, #1
   15694:	bgt	15718 <__assert_fail@plt+0x43e4>
   15698:	beq	156a8 <__assert_fail@plt+0x4374>
   1569c:	movw	r4, #46018	; 0xb3c2
   156a0:	movt	r4, #1
   156a4:	b	156b0 <__assert_fail@plt+0x437c>
   156a8:	movw	r4, #45991	; 0xb3a7
   156ac:	movt	r4, #1
   156b0:	ldr	r6, [fp, #12]
   156b4:	mov	r0, #0
   156b8:	mov	r1, r4
   156bc:	mov	r2, #5
   156c0:	bl	1110c <dcgettext@plt>
   156c4:	mov	r4, r0
   156c8:	mov	r0, #0
   156cc:	mov	r1, #8
   156d0:	mov	r2, r7
   156d4:	bl	174cc <__assert_fail@plt+0x6198>
   156d8:	mov	r5, r0
   156dc:	mov	r0, #1
   156e0:	mov	r1, r9
   156e4:	bl	17a8c <__assert_fail@plt+0x6758>
   156e8:	str	r0, [sp]
   156ec:	mov	r0, #0
   156f0:	mov	r1, #0
   156f4:	mov	r2, r4
   156f8:	mov	r3, r5
   156fc:	bl	11184 <error@plt>
   15700:	ldr	r2, [fp, #8]
   15704:	mov	r0, sl
   15708:	mov	r1, r8
   1570c:	bl	15418 <__assert_fail@plt+0x40e4>
   15710:	blx	r6
   15714:	mvn	r6, #0
   15718:	mov	r0, r6
   1571c:	sub	sp, fp, #28
   15720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15724:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15728:	add	fp, sp, #24
   1572c:	ldr	r6, [r1]
   15730:	cmp	r6, #0
   15734:	beq	15798 <__assert_fail@plt+0x4464>
   15738:	mov	r8, r1
   1573c:	mov	r7, r2
   15740:	mov	r1, r2
   15744:	mov	r2, r3
   15748:	mov	r4, r3
   1574c:	mov	r9, r0
   15750:	bl	11100 <memcmp@plt>
   15754:	cmp	r0, #0
   15758:	beq	15790 <__assert_fail@plt+0x445c>
   1575c:	add	r7, r7, r4
   15760:	add	r5, r8, #4
   15764:	ldr	r6, [r5]
   15768:	cmp	r6, #0
   1576c:	beq	15798 <__assert_fail@plt+0x4464>
   15770:	mov	r0, r9
   15774:	mov	r1, r7
   15778:	mov	r2, r4
   1577c:	bl	11100 <memcmp@plt>
   15780:	add	r7, r7, r4
   15784:	add	r5, r5, #4
   15788:	cmp	r0, #0
   1578c:	bne	15764 <__assert_fail@plt+0x4430>
   15790:	mov	r0, r6
   15794:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15798:	mov	r6, #0
   1579c:	mov	r0, r6
   157a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   157a4:	movw	r1, #49712	; 0xc230
   157a8:	movt	r1, #2
   157ac:	str	r0, [r1]
   157b0:	bx	lr
   157b4:	movw	r1, #49716	; 0xc234
   157b8:	movt	r1, #2
   157bc:	strb	r0, [r1]
   157c0:	bx	lr
   157c4:	push	{r4, r5, r6, sl, fp, lr}
   157c8:	add	fp, sp, #16
   157cc:	sub	sp, sp, #8
   157d0:	movw	r0, #49524	; 0xc174
   157d4:	movt	r0, #2
   157d8:	ldr	r0, [r0]
   157dc:	bl	198b4 <__assert_fail@plt+0x8580>
   157e0:	cmp	r0, #0
   157e4:	beq	1580c <__assert_fail@plt+0x44d8>
   157e8:	movw	r0, #49716	; 0xc234
   157ec:	movt	r0, #2
   157f0:	ldrb	r0, [r0]
   157f4:	cmp	r0, #0
   157f8:	beq	1582c <__assert_fail@plt+0x44f8>
   157fc:	bl	11214 <__errno_location@plt>
   15800:	ldr	r0, [r0]
   15804:	cmp	r0, #32
   15808:	bne	1582c <__assert_fail@plt+0x44f8>
   1580c:	movw	r0, #49512	; 0xc168
   15810:	movt	r0, #2
   15814:	ldr	r0, [r0]
   15818:	bl	198b4 <__assert_fail@plt+0x8580>
   1581c:	cmp	r0, #0
   15820:	subeq	sp, fp, #16
   15824:	popeq	{r4, r5, r6, sl, fp, pc}
   15828:	b	1589c <__assert_fail@plt+0x4568>
   1582c:	movw	r1, #45009	; 0xafd1
   15830:	mov	r0, #0
   15834:	mov	r2, #5
   15838:	movt	r1, #1
   1583c:	bl	1110c <dcgettext@plt>
   15840:	mov	r4, r0
   15844:	movw	r0, #49712	; 0xc230
   15848:	movt	r0, #2
   1584c:	ldr	r6, [r0]
   15850:	bl	11214 <__errno_location@plt>
   15854:	ldr	r5, [r0]
   15858:	cmp	r6, #0
   1585c:	bne	15878 <__assert_fail@plt+0x4544>
   15860:	movw	r2, #46078	; 0xb3fe
   15864:	mov	r0, #0
   15868:	mov	r1, r5
   1586c:	mov	r3, r4
   15870:	movt	r2, #1
   15874:	b	15898 <__assert_fail@plt+0x4564>
   15878:	mov	r0, r6
   1587c:	bl	17714 <__assert_fail@plt+0x63e0>
   15880:	movw	r2, #46081	; 0xb401
   15884:	mov	r3, r0
   15888:	str	r4, [sp]
   1588c:	mov	r0, #0
   15890:	mov	r1, r5
   15894:	movt	r2, #1
   15898:	bl	11184 <error@plt>
   1589c:	movw	r0, #49424	; 0xc110
   158a0:	movt	r0, #2
   158a4:	ldr	r0, [r0]
   158a8:	bl	110c4 <_exit@plt>
   158ac:	andeq	r0, r0, r0
   158b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158b4:	add	fp, sp, #28
   158b8:	sub	sp, sp, #4
   158bc:	vpush	{d8}
   158c0:	sub	sp, sp, #40	; 0x28
   158c4:	mov	sl, r0
   158c8:	movw	r0, #11557	; 0x2d25
   158cc:	add	r8, sp, #29
   158d0:	mov	r5, r1
   158d4:	mov	r1, #43	; 0x2b
   158d8:	mov	r9, r3
   158dc:	mov	r3, #32
   158e0:	vldr	d16, [pc, #272]	; 159f8 <__assert_fail@plt+0x46c4>
   158e4:	tst	r2, #16
   158e8:	vcmpe.f64	d0, #0.0
   158ec:	vneg.f64	d17, d0
   158f0:	vmov.f64	d18, d0
   158f4:	mov	r6, #15
   158f8:	vmov.f64	d8, d0
   158fc:	strh	r0, [sp, #29]
   15900:	and	r0, r2, #1
   15904:	add	r0, r8, r0
   15908:	strb	r1, [r0, #1]!
   1590c:	ubfx	r1, r2, #1, #1
   15910:	strb	r3, [r0, r1]!
   15914:	ubfx	r1, r2, #2, #1
   15918:	mov	r3, #48	; 0x30
   1591c:	strb	r3, [r0, r1]!
   15920:	ubfx	r1, r2, #3, #1
   15924:	movw	r3, #11818	; 0x2e2a
   15928:	mov	r2, #1
   1592c:	strh	r3, [r0, r1]!
   15930:	mov	r1, #42	; 0x2a
   15934:	mvn	r3, #0
   15938:	strb	r1, [r0, #2]
   1593c:	mov	r1, #71	; 0x47
   15940:	movweq	r1, #103	; 0x67
   15944:	vmrs	APSR_nzcv, fpscr
   15948:	vmovmi.f64	d18, d17
   1594c:	strb	r1, [r0, #3]
   15950:	mov	r1, #0
   15954:	vcmpe.f64	d18, d16
   15958:	strb	r1, [r0, #4]
   1595c:	mov	r0, sl
   15960:	mov	r1, r5
   15964:	vstr	d0, [sp, #16]
   15968:	stm	sp, {r8, r9}
   1596c:	vmrs	APSR_nzcv, fpscr
   15970:	movwmi	r6, #1
   15974:	str	r6, [sp, #8]
   15978:	bl	11328 <__snprintf_chk@plt>
   1597c:	mov	r7, r0
   15980:	cmp	r0, #0
   15984:	blt	159e4 <__assert_fail@plt+0x46b0>
   15988:	cmp	r7, r5
   1598c:	bcs	159a8 <__assert_fail@plt+0x4674>
   15990:	mov	r0, sl
   15994:	mov	r1, #0
   15998:	bl	11268 <strtod@plt>
   1599c:	vcmp.f64	d0, d8
   159a0:	vmrs	APSR_nzcv, fpscr
   159a4:	beq	159e4 <__assert_fail@plt+0x46b0>
   159a8:	add	r4, r6, #1
   159ac:	mov	r0, sl
   159b0:	mov	r1, r5
   159b4:	mov	r2, #1
   159b8:	mvn	r3, #0
   159bc:	vstr	d8, [sp, #16]
   159c0:	stm	sp, {r8, r9}
   159c4:	str	r4, [sp, #8]
   159c8:	bl	11328 <__snprintf_chk@plt>
   159cc:	mov	r7, r0
   159d0:	cmp	r6, #15
   159d4:	bhi	159e4 <__assert_fail@plt+0x46b0>
   159d8:	cmn	r7, #1
   159dc:	mov	r6, r4
   159e0:	bgt	15988 <__assert_fail@plt+0x4654>
   159e4:	mov	r0, r7
   159e8:	sub	sp, fp, #40	; 0x28
   159ec:	vpop	{d8}
   159f0:	add	sp, sp, #4
   159f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159f8:	andeq	r0, r0, r0
   159fc:	andseq	r0, r0, r0
   15a00:	push	{r4, r5, r6, sl, fp, lr}
   15a04:	add	fp, sp, #16
   15a08:	sub	sp, sp, #8
   15a0c:	mov	r4, r0
   15a10:	bl	11274 <fileno@plt>
   15a14:	cmn	r0, #1
   15a18:	ble	15a8c <__assert_fail@plt+0x4758>
   15a1c:	mov	r0, r4
   15a20:	bl	111c0 <__freading@plt>
   15a24:	cmp	r0, #0
   15a28:	beq	15a54 <__assert_fail@plt+0x4720>
   15a2c:	mov	r0, r4
   15a30:	bl	11274 <fileno@plt>
   15a34:	mov	r1, #1
   15a38:	mov	r2, #0
   15a3c:	mov	r3, #0
   15a40:	str	r1, [sp]
   15a44:	bl	11154 <lseek64@plt>
   15a48:	and	r0, r0, r1
   15a4c:	cmn	r0, #1
   15a50:	beq	15a8c <__assert_fail@plt+0x4758>
   15a54:	mov	r0, r4
   15a58:	bl	15a9c <__assert_fail@plt+0x4768>
   15a5c:	cmp	r0, #0
   15a60:	beq	15a8c <__assert_fail@plt+0x4758>
   15a64:	bl	11214 <__errno_location@plt>
   15a68:	ldr	r6, [r0]
   15a6c:	mov	r5, r0
   15a70:	mov	r0, r4
   15a74:	bl	1128c <fclose@plt>
   15a78:	cmp	r6, #0
   15a7c:	strne	r6, [r5]
   15a80:	mvnne	r0, #0
   15a84:	sub	sp, fp, #16
   15a88:	pop	{r4, r5, r6, sl, fp, pc}
   15a8c:	mov	r0, r4
   15a90:	sub	sp, fp, #16
   15a94:	pop	{r4, r5, r6, sl, fp, lr}
   15a98:	b	1128c <fclose@plt>
   15a9c:	push	{r4, sl, fp, lr}
   15aa0:	add	fp, sp, #8
   15aa4:	sub	sp, sp, #8
   15aa8:	mov	r4, r0
   15aac:	cmp	r0, #0
   15ab0:	beq	15acc <__assert_fail@plt+0x4798>
   15ab4:	mov	r0, r4
   15ab8:	bl	111c0 <__freading@plt>
   15abc:	cmp	r0, #0
   15ac0:	ldrbne	r0, [r4, #1]
   15ac4:	tstne	r0, #1
   15ac8:	bne	15adc <__assert_fail@plt+0x47a8>
   15acc:	mov	r0, r4
   15ad0:	sub	sp, fp, #8
   15ad4:	pop	{r4, sl, fp, lr}
   15ad8:	b	110a0 <fflush@plt>
   15adc:	mov	r0, #1
   15ae0:	mov	r2, #0
   15ae4:	mov	r3, #0
   15ae8:	str	r0, [sp]
   15aec:	mov	r0, r4
   15af0:	bl	15b20 <__assert_fail@plt+0x47ec>
   15af4:	b	15acc <__assert_fail@plt+0x4798>
   15af8:	push	{r4, r5, r6, sl, fp, lr}
   15afc:	add	fp, sp, #16
   15b00:	mov	r4, r0
   15b04:	bl	11214 <__errno_location@plt>
   15b08:	ldr	r6, [r0]
   15b0c:	mov	r5, r0
   15b10:	mov	r0, r4
   15b14:	bl	110ac <free@plt>
   15b18:	str	r6, [r5]
   15b1c:	pop	{r4, r5, r6, sl, fp, pc}
   15b20:	push	{r4, r5, r6, r7, fp, lr}
   15b24:	add	fp, sp, #16
   15b28:	sub	sp, sp, #8
   15b2c:	mov	r4, r0
   15b30:	ldr	r0, [r0, #4]
   15b34:	mov	r5, r3
   15b38:	mov	r6, r2
   15b3c:	ldr	r1, [r4, #8]
   15b40:	cmp	r1, r0
   15b44:	bne	15b60 <__assert_fail@plt+0x482c>
   15b48:	ldrd	r0, [r4, #16]
   15b4c:	cmp	r1, r0
   15b50:	bne	15b60 <__assert_fail@plt+0x482c>
   15b54:	ldr	r0, [r4, #36]	; 0x24
   15b58:	cmp	r0, #0
   15b5c:	beq	15b78 <__assert_fail@plt+0x4844>
   15b60:	mov	r0, r4
   15b64:	mov	r2, r6
   15b68:	mov	r3, r5
   15b6c:	sub	sp, fp, #16
   15b70:	pop	{r4, r5, r6, r7, fp, lr}
   15b74:	b	11298 <fseeko64@plt>
   15b78:	ldr	r7, [fp, #8]
   15b7c:	mov	r0, r4
   15b80:	bl	11274 <fileno@plt>
   15b84:	mov	r2, r6
   15b88:	mov	r3, r5
   15b8c:	str	r7, [sp]
   15b90:	bl	11154 <lseek64@plt>
   15b94:	and	r2, r0, r1
   15b98:	cmn	r2, #1
   15b9c:	mvneq	r0, #0
   15ba0:	subeq	sp, fp, #16
   15ba4:	popeq	{r4, r5, r6, r7, fp, pc}
   15ba8:	strd	r0, [r4, #80]	; 0x50
   15bac:	ldr	r0, [r4]
   15bb0:	bic	r0, r0, #16
   15bb4:	str	r0, [r4]
   15bb8:	mov	r0, #0
   15bbc:	sub	sp, fp, #16
   15bc0:	pop	{r4, r5, r6, r7, fp, pc}
   15bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc8:	add	fp, sp, #28
   15bcc:	sub	sp, sp, #4
   15bd0:	vpush	{d8-d9}
   15bd4:	sub	sp, sp, #40	; 0x28
   15bd8:	mov	sl, r0
   15bdc:	movw	r0, #11557	; 0x2d25
   15be0:	add	r8, sp, #29
   15be4:	mov	r5, r1
   15be8:	mov	r1, #43	; 0x2b
   15bec:	mov	r9, r3
   15bf0:	mov	r3, #32
   15bf4:	vmov.f32	s16, s0
   15bf8:	vcvt.f64.f32	d9, s0
   15bfc:	vldr	s0, [pc, #268]	; 15d10 <__assert_fail@plt+0x49dc>
   15c00:	tst	r2, #16
   15c04:	mov	r6, #6
   15c08:	strh	r0, [sp, #29]
   15c0c:	and	r0, r2, #1
   15c10:	vcmpe.f32	s16, #0.0
   15c14:	vneg.f32	s2, s16
   15c18:	vmov.f32	s4, s16
   15c1c:	add	r0, r8, r0
   15c20:	strb	r1, [r0, #1]!
   15c24:	ubfx	r1, r2, #1, #1
   15c28:	strb	r3, [r0, r1]!
   15c2c:	ubfx	r1, r2, #2, #1
   15c30:	mov	r3, #48	; 0x30
   15c34:	strb	r3, [r0, r1]!
   15c38:	ubfx	r1, r2, #3, #1
   15c3c:	movw	r3, #11818	; 0x2e2a
   15c40:	mov	r2, #1
   15c44:	strh	r3, [r0, r1]!
   15c48:	mov	r1, #42	; 0x2a
   15c4c:	mvn	r3, #0
   15c50:	strb	r1, [r0, #2]
   15c54:	mov	r1, #71	; 0x47
   15c58:	movweq	r1, #103	; 0x67
   15c5c:	vmrs	APSR_nzcv, fpscr
   15c60:	vmovmi.f32	s4, s2
   15c64:	strb	r1, [r0, #3]
   15c68:	mov	r1, #0
   15c6c:	vcmpe.f32	s4, s0
   15c70:	strb	r1, [r0, #4]
   15c74:	mov	r0, sl
   15c78:	mov	r1, r5
   15c7c:	vstr	d9, [sp, #16]
   15c80:	stm	sp, {r8, r9}
   15c84:	vmrs	APSR_nzcv, fpscr
   15c88:	movwmi	r6, #1
   15c8c:	str	r6, [sp, #8]
   15c90:	bl	11328 <__snprintf_chk@plt>
   15c94:	mov	r7, r0
   15c98:	cmp	r0, #0
   15c9c:	blt	15cfc <__assert_fail@plt+0x49c8>
   15ca0:	cmp	r7, r5
   15ca4:	bcs	15cc0 <__assert_fail@plt+0x498c>
   15ca8:	mov	r0, sl
   15cac:	mov	r1, #0
   15cb0:	bl	11190 <strtof@plt>
   15cb4:	vcmp.f32	s0, s16
   15cb8:	vmrs	APSR_nzcv, fpscr
   15cbc:	beq	15cfc <__assert_fail@plt+0x49c8>
   15cc0:	add	r4, r6, #1
   15cc4:	mov	r0, sl
   15cc8:	mov	r1, r5
   15ccc:	mov	r2, #1
   15cd0:	mvn	r3, #0
   15cd4:	vstr	d9, [sp, #16]
   15cd8:	stm	sp, {r8, r9}
   15cdc:	str	r4, [sp, #8]
   15ce0:	bl	11328 <__snprintf_chk@plt>
   15ce4:	mov	r7, r0
   15ce8:	cmp	r6, #7
   15cec:	bhi	15cfc <__assert_fail@plt+0x49c8>
   15cf0:	cmn	r7, #1
   15cf4:	mov	r6, r4
   15cf8:	bgt	15ca0 <__assert_fail@plt+0x496c>
   15cfc:	mov	r0, r7
   15d00:	sub	sp, fp, #48	; 0x30
   15d04:	vpop	{d8-d9}
   15d08:	add	sp, sp, #4
   15d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d10:	addeq	r0, r0, r0
   15d14:	andeq	r0, r0, r0
   15d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d1c:	add	fp, sp, #28
   15d20:	sub	sp, sp, #4
   15d24:	vpush	{d8}
   15d28:	sub	sp, sp, #40	; 0x28
   15d2c:	mov	sl, r0
   15d30:	movw	r0, #11557	; 0x2d25
   15d34:	add	r8, sp, #29
   15d38:	mov	r5, r1
   15d3c:	mov	r1, #43	; 0x2b
   15d40:	mov	r9, r3
   15d44:	mov	r3, #32
   15d48:	vldr	d16, [pc, #272]	; 15e60 <__assert_fail@plt+0x4b2c>
   15d4c:	tst	r2, #16
   15d50:	vcmpe.f64	d0, #0.0
   15d54:	vneg.f64	d17, d0
   15d58:	vmov.f64	d18, d0
   15d5c:	mov	r6, #15
   15d60:	vmov.f64	d8, d0
   15d64:	strh	r0, [sp, #29]
   15d68:	and	r0, r2, #1
   15d6c:	add	r0, r8, r0
   15d70:	strb	r1, [r0, #1]!
   15d74:	ubfx	r1, r2, #1, #1
   15d78:	strb	r3, [r0, r1]!
   15d7c:	ubfx	r1, r2, #2, #1
   15d80:	mov	r3, #48	; 0x30
   15d84:	strb	r3, [r0, r1]!
   15d88:	movw	r3, #11818	; 0x2e2a
   15d8c:	ubfx	r1, r2, #3, #1
   15d90:	mov	r2, #1
   15d94:	movt	r3, #19498	; 0x4c2a
   15d98:	str	r3, [r0, r1]!
   15d9c:	mov	r1, #71	; 0x47
   15da0:	mvn	r3, #0
   15da4:	movweq	r1, #103	; 0x67
   15da8:	vmrs	APSR_nzcv, fpscr
   15dac:	vmovmi.f64	d18, d17
   15db0:	strb	r1, [r0, #4]
   15db4:	mov	r1, #0
   15db8:	vcmpe.f64	d18, d16
   15dbc:	strb	r1, [r0, #5]
   15dc0:	mov	r0, sl
   15dc4:	mov	r1, r5
   15dc8:	vstr	d0, [sp, #16]
   15dcc:	stm	sp, {r8, r9}
   15dd0:	vmrs	APSR_nzcv, fpscr
   15dd4:	movwmi	r6, #1
   15dd8:	str	r6, [sp, #8]
   15ddc:	bl	11328 <__snprintf_chk@plt>
   15de0:	mov	r7, r0
   15de4:	cmp	r0, #0
   15de8:	blt	15e48 <__assert_fail@plt+0x4b14>
   15dec:	cmp	r7, r5
   15df0:	bcs	15e0c <__assert_fail@plt+0x4ad8>
   15df4:	mov	r0, sl
   15df8:	mov	r1, #0
   15dfc:	bl	110f4 <strtold@plt>
   15e00:	vcmp.f64	d0, d8
   15e04:	vmrs	APSR_nzcv, fpscr
   15e08:	beq	15e48 <__assert_fail@plt+0x4b14>
   15e0c:	add	r4, r6, #1
   15e10:	mov	r0, sl
   15e14:	mov	r1, r5
   15e18:	mov	r2, #1
   15e1c:	mvn	r3, #0
   15e20:	vstr	d8, [sp, #16]
   15e24:	stm	sp, {r8, r9}
   15e28:	str	r4, [sp, #8]
   15e2c:	bl	11328 <__snprintf_chk@plt>
   15e30:	mov	r7, r0
   15e34:	cmp	r6, #15
   15e38:	bhi	15e48 <__assert_fail@plt+0x4b14>
   15e3c:	cmn	r7, #1
   15e40:	mov	r6, r4
   15e44:	bgt	15dec <__assert_fail@plt+0x4ab8>
   15e48:	mov	r0, r7
   15e4c:	sub	sp, fp, #40	; 0x28
   15e50:	vpop	{d8}
   15e54:	add	sp, sp, #4
   15e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e5c:	nop	{0}
   15e60:	andeq	r0, r0, r0
   15e64:	andseq	r0, r0, r0
   15e68:	push	{r4, r5, fp, lr}
   15e6c:	add	fp, sp, #8
   15e70:	cmp	r0, #0
   15e74:	beq	15f08 <__assert_fail@plt+0x4bd4>
   15e78:	mov	r1, #47	; 0x2f
   15e7c:	mov	r4, r0
   15e80:	bl	112bc <strrchr@plt>
   15e84:	cmp	r0, #0
   15e88:	mov	r5, r4
   15e8c:	addne	r5, r0, #1
   15e90:	sub	r0, r5, r4
   15e94:	cmp	r0, #7
   15e98:	blt	15eec <__assert_fail@plt+0x4bb8>
   15e9c:	movw	r1, #46144	; 0xb440
   15ea0:	sub	r0, r5, #7
   15ea4:	mov	r2, #7
   15ea8:	movt	r1, #1
   15eac:	bl	11310 <strncmp@plt>
   15eb0:	cmp	r0, #0
   15eb4:	bne	15eec <__assert_fail@plt+0x4bb8>
   15eb8:	movw	r1, #46152	; 0xb448
   15ebc:	mov	r0, r5
   15ec0:	mov	r2, #3
   15ec4:	movt	r1, #1
   15ec8:	bl	11310 <strncmp@plt>
   15ecc:	cmp	r0, #0
   15ed0:	beq	15edc <__assert_fail@plt+0x4ba8>
   15ed4:	mov	r4, r5
   15ed8:	b	15eec <__assert_fail@plt+0x4bb8>
   15edc:	movw	r0, #49496	; 0xc158
   15ee0:	add	r4, r5, #3
   15ee4:	movt	r0, #2
   15ee8:	str	r4, [r0]
   15eec:	movw	r0, #49500	; 0xc15c
   15ef0:	movt	r0, #2
   15ef4:	str	r4, [r0]
   15ef8:	movw	r0, #49720	; 0xc238
   15efc:	movt	r0, #2
   15f00:	str	r4, [r0]
   15f04:	pop	{r4, r5, fp, pc}
   15f08:	movw	r0, #49512	; 0xc168
   15f0c:	mov	r1, #55	; 0x37
   15f10:	mov	r2, #1
   15f14:	movt	r0, #2
   15f18:	ldr	r3, [r0]
   15f1c:	movw	r0, #46088	; 0xb408
   15f20:	movt	r0, #1
   15f24:	bl	11148 <fwrite@plt>
   15f28:	bl	1131c <abort@plt>
   15f2c:	push	{r4, r5, r6, sl, fp, lr}
   15f30:	add	fp, sp, #16
   15f34:	mov	r4, r0
   15f38:	movw	r0, #49728	; 0xc240
   15f3c:	movt	r0, #2
   15f40:	cmp	r4, #0
   15f44:	moveq	r4, r0
   15f48:	bl	11214 <__errno_location@plt>
   15f4c:	ldr	r6, [r0]
   15f50:	mov	r5, r0
   15f54:	mov	r0, r4
   15f58:	mov	r1, #48	; 0x30
   15f5c:	bl	186ec <__assert_fail@plt+0x73b8>
   15f60:	str	r6, [r5]
   15f64:	pop	{r4, r5, r6, sl, fp, pc}
   15f68:	movw	r1, #49728	; 0xc240
   15f6c:	cmp	r0, #0
   15f70:	movt	r1, #2
   15f74:	movne	r1, r0
   15f78:	ldr	r0, [r1]
   15f7c:	bx	lr
   15f80:	movw	r2, #49728	; 0xc240
   15f84:	cmp	r0, #0
   15f88:	movt	r2, #2
   15f8c:	movne	r2, r0
   15f90:	str	r1, [r2]
   15f94:	bx	lr
   15f98:	movw	r3, #49728	; 0xc240
   15f9c:	cmp	r0, #0
   15fa0:	movt	r3, #2
   15fa4:	movne	r3, r0
   15fa8:	ubfx	r0, r1, #5, #3
   15fac:	and	r1, r1, #31
   15fb0:	add	r0, r3, r0, lsl #2
   15fb4:	ldr	r3, [r0, #8]
   15fb8:	eor	r2, r2, r3, lsr r1
   15fbc:	and	r2, r2, #1
   15fc0:	eor	r2, r3, r2, lsl r1
   15fc4:	str	r2, [r0, #8]
   15fc8:	mov	r0, #1
   15fcc:	and	r0, r0, r3, lsr r1
   15fd0:	bx	lr
   15fd4:	movw	r2, #49728	; 0xc240
   15fd8:	cmp	r0, #0
   15fdc:	movt	r2, #2
   15fe0:	movne	r2, r0
   15fe4:	ldr	r0, [r2, #4]
   15fe8:	str	r1, [r2, #4]
   15fec:	bx	lr
   15ff0:	movw	r3, #49728	; 0xc240
   15ff4:	cmp	r0, #0
   15ff8:	movt	r3, #2
   15ffc:	movne	r3, r0
   16000:	cmp	r1, #0
   16004:	mov	r0, #10
   16008:	cmpne	r2, #0
   1600c:	str	r0, [r3]
   16010:	bne	16020 <__assert_fail@plt+0x4cec>
   16014:	push	{fp, lr}
   16018:	mov	fp, sp
   1601c:	bl	1131c <abort@plt>
   16020:	str	r1, [r3, #40]	; 0x28
   16024:	str	r2, [r3, #44]	; 0x2c
   16028:	bx	lr
   1602c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16030:	add	fp, sp, #28
   16034:	sub	sp, sp, #20
   16038:	mov	r7, r0
   1603c:	ldr	r0, [fp, #8]
   16040:	movw	r5, #49728	; 0xc240
   16044:	mov	r8, r3
   16048:	mov	r9, r2
   1604c:	mov	sl, r1
   16050:	movt	r5, #2
   16054:	cmp	r0, #0
   16058:	movne	r5, r0
   1605c:	bl	11214 <__errno_location@plt>
   16060:	mov	r4, r0
   16064:	ldm	r5, {r0, r1}
   16068:	ldr	r2, [r5, #40]	; 0x28
   1606c:	ldr	r3, [r5, #44]	; 0x2c
   16070:	add	r5, r5, #8
   16074:	ldr	r6, [r4]
   16078:	stm	sp, {r0, r1, r5}
   1607c:	str	r2, [sp, #12]
   16080:	str	r3, [sp, #16]
   16084:	mov	r0, r7
   16088:	mov	r1, sl
   1608c:	mov	r2, r9
   16090:	mov	r3, r8
   16094:	bl	160a4 <__assert_fail@plt+0x4d70>
   16098:	str	r6, [r4]
   1609c:	sub	sp, fp, #28
   160a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160a8:	add	fp, sp, #28
   160ac:	sub	sp, sp, #156	; 0x9c
   160b0:	str	r0, [sp, #80]	; 0x50
   160b4:	ldr	r0, [fp, #12]
   160b8:	mov	r6, r1
   160bc:	mov	r9, r3
   160c0:	str	r2, [fp, #-84]	; 0xffffffac
   160c4:	and	r1, r0, #4
   160c8:	str	r1, [sp, #32]
   160cc:	and	r1, r0, #1
   160d0:	str	r1, [sp, #36]	; 0x24
   160d4:	ubfx	r4, r0, #1, #1
   160d8:	bl	11160 <__ctype_get_mb_cur_max@plt>
   160dc:	str	r0, [sp, #40]	; 0x28
   160e0:	ldr	r0, [fp, #24]
   160e4:	ldr	r7, [fp, #8]
   160e8:	mov	r1, #0
   160ec:	mov	r5, #1
   160f0:	str	r1, [fp, #-56]	; 0xffffffc8
   160f4:	mov	r1, #0
   160f8:	str	r1, [sp, #60]	; 0x3c
   160fc:	str	r0, [sp, #76]	; 0x4c
   16100:	ldr	r0, [fp, #20]
   16104:	str	r0, [sp, #72]	; 0x48
   16108:	mov	r0, #0
   1610c:	str	r0, [sp, #56]	; 0x38
   16110:	mov	r0, #0
   16114:	str	r0, [sp, #92]	; 0x5c
   16118:	mov	r0, #0
   1611c:	str	r0, [fp, #-76]	; 0xffffffb4
   16120:	mov	r0, #0
   16124:	cmp	r7, #10
   16128:	bhi	170a8 <__assert_fail@plt+0x5d74>
   1612c:	add	r1, pc, #28
   16130:	mov	sl, r6
   16134:	ldr	r6, [sp, #80]	; 0x50
   16138:	ldr	ip, [fp, #-84]	; 0xffffffac
   1613c:	mov	r8, #0
   16140:	mov	r2, #1
   16144:	mov	r3, #0
   16148:	mov	lr, r9
   1614c:	ldr	pc, [r1, r7, lsl #2]
   16150:	andeq	r6, r1, r4, lsr r2
   16154:	andeq	r6, r1, r0, ror #4
   16158:	andeq	r6, r1, r4, lsr #4
   1615c:	andeq	r6, r1, ip, lsl r2
   16160:	andeq	r6, r1, r4, asr r2
   16164:	andeq	r6, r1, r8, lsr #5
   16168:	andeq	r6, r1, r4, asr #4
   1616c:	andeq	r6, r1, r4, lsl #6
   16170:	andeq	r6, r1, ip, ror r1
   16174:	andeq	r6, r1, ip, ror r1
   16178:	andeq	r6, r1, r4, lsr #3
   1617c:	movw	r0, #46234	; 0xb49a
   16180:	mov	r1, r7
   16184:	movt	r0, #1
   16188:	bl	17ab4 <__assert_fail@plt+0x6780>
   1618c:	str	r0, [sp, #72]	; 0x48
   16190:	movw	r0, #47197	; 0xb85d
   16194:	mov	r1, r7
   16198:	movt	r0, #1
   1619c:	bl	17ab4 <__assert_fail@plt+0x6780>
   161a0:	str	r0, [sp, #76]	; 0x4c
   161a4:	str	r5, [fp, #-48]	; 0xffffffd0
   161a8:	mov	r8, #0
   161ac:	mov	r5, r7
   161b0:	tst	r4, #1
   161b4:	bne	161ec <__assert_fail@plt+0x4eb8>
   161b8:	ldr	r0, [sp, #72]	; 0x48
   161bc:	ldrb	r0, [r0]
   161c0:	cmp	r0, #0
   161c4:	beq	161ec <__assert_fail@plt+0x4eb8>
   161c8:	ldr	r1, [sp, #72]	; 0x48
   161cc:	mov	r8, #0
   161d0:	add	r1, r1, #1
   161d4:	cmp	r8, sl
   161d8:	strbcc	r0, [r6, r8]
   161dc:	ldrb	r0, [r1, r8]
   161e0:	add	r8, r8, #1
   161e4:	cmp	r0, #0
   161e8:	bne	161d4 <__assert_fail@plt+0x4ea0>
   161ec:	ldr	r7, [sp, #76]	; 0x4c
   161f0:	mov	r0, r7
   161f4:	bl	111fc <strlen@plt>
   161f8:	str	r7, [sp, #92]	; 0x5c
   161fc:	mov	r7, r5
   16200:	ldr	ip, [fp, #-84]	; 0xffffffac
   16204:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16208:	str	r0, [fp, #-76]	; 0xffffffb4
   1620c:	mov	r2, #1
   16210:	mov	r3, r4
   16214:	mov	lr, r9
   16218:	b	16304 <__assert_fail@plt+0x4fd0>
   1621c:	mov	r0, #1
   16220:	b	16260 <__assert_fail@plt+0x4f2c>
   16224:	tst	r4, #1
   16228:	bne	16260 <__assert_fail@plt+0x4f2c>
   1622c:	mov	r2, r0
   16230:	b	16288 <__assert_fail@plt+0x4f54>
   16234:	mov	r7, #0
   16238:	mov	r8, #0
   1623c:	mov	r2, r0
   16240:	b	16300 <__assert_fail@plt+0x4fcc>
   16244:	mov	r0, #1
   16248:	mov	r8, #0
   1624c:	mov	r7, #5
   16250:	b	162bc <__assert_fail@plt+0x4f88>
   16254:	mov	r2, #1
   16258:	tst	r4, #1
   1625c:	beq	16288 <__assert_fail@plt+0x4f54>
   16260:	mov	r1, #1
   16264:	mov	r8, #0
   16268:	mov	r7, #2
   1626c:	mov	r2, r0
   16270:	mov	r3, #1
   16274:	str	r1, [fp, #-76]	; 0xffffffb4
   16278:	movw	r1, #47197	; 0xb85d
   1627c:	movt	r1, #1
   16280:	str	r1, [sp, #92]	; 0x5c
   16284:	b	16304 <__assert_fail@plt+0x4fd0>
   16288:	cmp	sl, #0
   1628c:	mov	r8, #1
   16290:	mov	r7, #2
   16294:	movne	r0, #39	; 0x27
   16298:	strbne	r0, [r6]
   1629c:	movw	r0, #47197	; 0xb85d
   162a0:	movt	r0, #1
   162a4:	b	162f4 <__assert_fail@plt+0x4fc0>
   162a8:	mov	r7, #5
   162ac:	tst	r4, #1
   162b0:	beq	162d8 <__assert_fail@plt+0x4fa4>
   162b4:	mov	r0, #1
   162b8:	mov	r8, #0
   162bc:	str	r0, [fp, #-76]	; 0xffffffb4
   162c0:	movw	r0, #46232	; 0xb498
   162c4:	mov	r2, #1
   162c8:	mov	r3, #1
   162cc:	movt	r0, #1
   162d0:	str	r0, [sp, #92]	; 0x5c
   162d4:	b	16304 <__assert_fail@plt+0x4fd0>
   162d8:	cmp	sl, #0
   162dc:	mov	r8, #1
   162e0:	mov	r2, #1
   162e4:	movne	r0, #34	; 0x22
   162e8:	strbne	r0, [r6]
   162ec:	movw	r0, #46232	; 0xb498
   162f0:	movt	r0, #1
   162f4:	str	r0, [sp, #92]	; 0x5c
   162f8:	mov	r0, #1
   162fc:	str	r0, [fp, #-76]	; 0xffffffb4
   16300:	mov	r3, #0
   16304:	ldr	r0, [fp, #16]
   16308:	str	r3, [fp, #-72]	; 0xffffffb8
   1630c:	str	r7, [fp, #-64]	; 0xffffffc0
   16310:	str	r2, [sp, #84]	; 0x54
   16314:	cmp	r0, #0
   16318:	movwne	r0, #1
   1631c:	and	r0, r0, r3
   16320:	str	r0, [fp, #-88]	; 0xffffffa8
   16324:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16328:	cmp	r0, #0
   1632c:	movwne	r0, #1
   16330:	subs	r4, r7, #2
   16334:	mov	r7, #0
   16338:	and	r1, r0, r3
   1633c:	str	r4, [fp, #-80]	; 0xffffffb0
   16340:	and	r1, r2, r1
   16344:	str	r1, [sp, #48]	; 0x30
   16348:	clz	r1, r4
   1634c:	lsr	r1, r1, #5
   16350:	and	r1, r1, r3
   16354:	eor	r3, r3, #1
   16358:	str	r1, [sp, #64]	; 0x40
   1635c:	mov	r1, r4
   16360:	str	r3, [sp, #88]	; 0x58
   16364:	movwne	r1, #1
   16368:	orr	r3, r1, r3
   1636c:	and	r1, r1, r2
   16370:	and	r0, r0, r1
   16374:	str	r3, [sp, #68]	; 0x44
   16378:	str	r1, [fp, #-68]	; 0xffffffbc
   1637c:	str	r0, [fp, #-60]	; 0xffffffc4
   16380:	eor	r0, r2, #1
   16384:	str	r0, [sp, #52]	; 0x34
   16388:	cmn	lr, #1
   1638c:	beq	1639c <__assert_fail@plt+0x5068>
   16390:	cmp	r7, lr
   16394:	bne	163a8 <__assert_fail@plt+0x5074>
   16398:	b	16ed0 <__assert_fail@plt+0x5b9c>
   1639c:	ldrb	r0, [ip, r7]
   163a0:	cmp	r0, #0
   163a4:	beq	16ed8 <__assert_fail@plt+0x5ba4>
   163a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   163ac:	mov	r9, #0
   163b0:	str	r5, [fp, #-48]	; 0xffffffd0
   163b4:	cmp	r0, #0
   163b8:	beq	163ec <__assert_fail@plt+0x50b8>
   163bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   163c0:	add	r4, r7, r0
   163c4:	cmp	r0, #2
   163c8:	bcc	163e4 <__assert_fail@plt+0x50b0>
   163cc:	cmn	lr, #1
   163d0:	bne	163e4 <__assert_fail@plt+0x50b0>
   163d4:	mov	r0, ip
   163d8:	bl	111fc <strlen@plt>
   163dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   163e0:	mov	lr, r0
   163e4:	cmp	r4, lr
   163e8:	bls	163f4 <__assert_fail@plt+0x50c0>
   163ec:	mov	r0, #0
   163f0:	b	16434 <__assert_fail@plt+0x5100>
   163f4:	ldr	r1, [sp, #92]	; 0x5c
   163f8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   163fc:	add	r0, ip, r7
   16400:	mov	r4, lr
   16404:	bl	11100 <memcmp@plt>
   16408:	ldr	r2, [sp, #88]	; 0x58
   1640c:	cmp	r0, #0
   16410:	mov	r1, r0
   16414:	movwne	r1, #1
   16418:	orr	r1, r1, r2
   1641c:	tst	r1, #1
   16420:	beq	16f68 <__assert_fail@plt+0x5c34>
   16424:	ldr	ip, [fp, #-84]	; 0xffffffac
   16428:	clz	r0, r0
   1642c:	mov	lr, r4
   16430:	lsr	r0, r0, #5
   16434:	str	r0, [fp, #-52]	; 0xffffffcc
   16438:	ldrb	r5, [ip, r7]
   1643c:	cmp	r5, #126	; 0x7e
   16440:	bhi	167f8 <__assert_fail@plt+0x54c4>
   16444:	add	r3, pc, #16
   16448:	mov	r4, #1
   1644c:	mov	r2, #110	; 0x6e
   16450:	mov	r0, #97	; 0x61
   16454:	mov	r1, #0
   16458:	ldr	pc, [r3, r5, lsl #2]
   1645c:	strdeq	r6, [r1], -r4
   16460:	strdeq	r6, [r1], -r8
   16464:	strdeq	r6, [r1], -r8
   16468:	strdeq	r6, [r1], -r8
   1646c:	strdeq	r6, [r1], -r8
   16470:	strdeq	r6, [r1], -r8
   16474:	strdeq	r6, [r1], -r8
   16478:	andeq	r6, r1, ip, lsr #17
   1647c:	ldrdeq	r6, [r1], -r4
   16480:	andeq	r6, r1, ip, asr #13
   16484:	andeq	r6, r1, r0, ror #13
   16488:	andeq	r6, r1, r0, ror #14
   1648c:	andeq	r6, r1, r4, asr #13
   16490:	ldrdeq	r6, [r1], -ip
   16494:	strdeq	r6, [r1], -r8
   16498:	strdeq	r6, [r1], -r8
   1649c:	strdeq	r6, [r1], -r8
   164a0:	strdeq	r6, [r1], -r8
   164a4:	strdeq	r6, [r1], -r8
   164a8:	strdeq	r6, [r1], -r8
   164ac:	strdeq	r6, [r1], -r8
   164b0:	strdeq	r6, [r1], -r8
   164b4:	strdeq	r6, [r1], -r8
   164b8:	strdeq	r6, [r1], -r8
   164bc:	strdeq	r6, [r1], -r8
   164c0:	strdeq	r6, [r1], -r8
   164c4:	strdeq	r6, [r1], -r8
   164c8:	strdeq	r6, [r1], -r8
   164cc:	strdeq	r6, [r1], -r8
   164d0:	strdeq	r6, [r1], -r8
   164d4:	strdeq	r6, [r1], -r8
   164d8:	strdeq	r6, [r1], -r8
   164dc:	andeq	r6, r1, r4, ror #16
   164e0:	andeq	r6, r1, r8, ror #16
   164e4:	andeq	r6, r1, r8, ror #16
   164e8:	andeq	r6, r1, ip, ror #12
   164ec:	andeq	r6, r1, r8, ror #16
   164f0:	andeq	r6, r1, r8, asr r6
   164f4:	andeq	r6, r1, r8, ror #16
   164f8:	andeq	r6, r1, r8, ror #14
   164fc:	andeq	r6, r1, r8, ror #16
   16500:	andeq	r6, r1, r8, ror #16
   16504:	andeq	r6, r1, r8, ror #16
   16508:	andeq	r6, r1, r8, asr r6
   1650c:	andeq	r6, r1, r8, asr r6
   16510:	andeq	r6, r1, r8, asr r6
   16514:	andeq	r6, r1, r8, asr r6
   16518:	andeq	r6, r1, r8, asr r6
   1651c:	andeq	r6, r1, r8, asr r6
   16520:	andeq	r6, r1, r8, asr r6
   16524:	andeq	r6, r1, r8, asr r6
   16528:	andeq	r6, r1, r8, asr r6
   1652c:	andeq	r6, r1, r8, asr r6
   16530:	andeq	r6, r1, r8, asr r6
   16534:	andeq	r6, r1, r8, asr r6
   16538:	andeq	r6, r1, r8, asr r6
   1653c:	andeq	r6, r1, r8, asr r6
   16540:	andeq	r6, r1, r8, asr r6
   16544:	andeq	r6, r1, r8, asr r6
   16548:	andeq	r6, r1, r8, ror #16
   1654c:	andeq	r6, r1, r8, ror #16
   16550:	andeq	r6, r1, r8, ror #16
   16554:	andeq	r6, r1, r8, ror #16
   16558:	andeq	r6, r1, r4, lsr r7
   1655c:	strdeq	r6, [r1], -r8
   16560:	andeq	r6, r1, r8, asr r6
   16564:	andeq	r6, r1, r8, asr r6
   16568:	andeq	r6, r1, r8, asr r6
   1656c:	andeq	r6, r1, r8, asr r6
   16570:	andeq	r6, r1, r8, asr r6
   16574:	andeq	r6, r1, r8, asr r6
   16578:	andeq	r6, r1, r8, asr r6
   1657c:	andeq	r6, r1, r8, asr r6
   16580:	andeq	r6, r1, r8, asr r6
   16584:	andeq	r6, r1, r8, asr r6
   16588:	andeq	r6, r1, r8, asr r6
   1658c:	andeq	r6, r1, r8, asr r6
   16590:	andeq	r6, r1, r8, asr r6
   16594:	andeq	r6, r1, r8, asr r6
   16598:	andeq	r6, r1, r8, asr r6
   1659c:	andeq	r6, r1, r8, asr r6
   165a0:	andeq	r6, r1, r8, asr r6
   165a4:	andeq	r6, r1, r8, asr r6
   165a8:	andeq	r6, r1, r8, asr r6
   165ac:	andeq	r6, r1, r8, asr r6
   165b0:	andeq	r6, r1, r8, asr r6
   165b4:	andeq	r6, r1, r8, asr r6
   165b8:	andeq	r6, r1, r8, asr r6
   165bc:	andeq	r6, r1, r8, asr r6
   165c0:	andeq	r6, r1, r8, asr r6
   165c4:	andeq	r6, r1, r8, asr r6
   165c8:	andeq	r6, r1, r8, ror #16
   165cc:	andeq	r6, r1, r0, lsr #13
   165d0:	andeq	r6, r1, r8, asr r6
   165d4:	andeq	r6, r1, r8, ror #16
   165d8:	andeq	r6, r1, r8, asr r6
   165dc:	andeq	r6, r1, r8, ror #16
   165e0:	andeq	r6, r1, r8, asr r6
   165e4:	andeq	r6, r1, r8, asr r6
   165e8:	andeq	r6, r1, r8, asr r6
   165ec:	andeq	r6, r1, r8, asr r6
   165f0:	andeq	r6, r1, r8, asr r6
   165f4:	andeq	r6, r1, r8, asr r6
   165f8:	andeq	r6, r1, r8, asr r6
   165fc:	andeq	r6, r1, r8, asr r6
   16600:	andeq	r6, r1, r8, asr r6
   16604:	andeq	r6, r1, r8, asr r6
   16608:	andeq	r6, r1, r8, asr r6
   1660c:	andeq	r6, r1, r8, asr r6
   16610:	andeq	r6, r1, r8, asr r6
   16614:	andeq	r6, r1, r8, asr r6
   16618:	andeq	r6, r1, r8, asr r6
   1661c:	andeq	r6, r1, r8, asr r6
   16620:	andeq	r6, r1, r8, asr r6
   16624:	andeq	r6, r1, r8, asr r6
   16628:	andeq	r6, r1, r8, asr r6
   1662c:	andeq	r6, r1, r8, asr r6
   16630:	andeq	r6, r1, r8, asr r6
   16634:	andeq	r6, r1, r8, asr r6
   16638:	andeq	r6, r1, r8, asr r6
   1663c:	andeq	r6, r1, r8, asr r6
   16640:	andeq	r6, r1, r8, asr r6
   16644:	andeq	r6, r1, r8, asr r6
   16648:	andeq	r6, r1, r0, lsl #13
   1664c:	andeq	r6, r1, r8, ror #16
   16650:	andeq	r6, r1, r0, lsl #13
   16654:	andeq	r6, r1, ip, ror #12
   16658:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1665c:	cmp	r0, #0
   16660:	beq	168c0 <__assert_fail@plt+0x558c>
   16664:	ldr	r0, [fp, #16]
   16668:	b	168c4 <__assert_fail@plt+0x5590>
   1666c:	mov	r4, #0
   16670:	cmp	r7, #0
   16674:	beq	16864 <__assert_fail@plt+0x5530>
   16678:	mov	r9, #0
   1667c:	b	16658 <__assert_fail@plt+0x5324>
   16680:	mov	r4, #0
   16684:	cmn	lr, #1
   16688:	beq	16848 <__assert_fail@plt+0x5514>
   1668c:	cmp	r7, #0
   16690:	bne	16678 <__assert_fail@plt+0x5344>
   16694:	cmp	lr, #1
   16698:	beq	16864 <__assert_fail@plt+0x5530>
   1669c:	b	16678 <__assert_fail@plt+0x5344>
   166a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   166a4:	cmp	r0, #2
   166a8:	bne	16888 <__assert_fail@plt+0x5554>
   166ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166b0:	tst	r0, #1
   166b4:	bne	16f84 <__assert_fail@plt+0x5c50>
   166b8:	mov	r9, #0
   166bc:	mov	r0, #92	; 0x5c
   166c0:	b	1689c <__assert_fail@plt+0x5568>
   166c4:	mov	r0, #102	; 0x66
   166c8:	b	168ac <__assert_fail@plt+0x5578>
   166cc:	mov	r2, #116	; 0x74
   166d0:	b	166e0 <__assert_fail@plt+0x53ac>
   166d4:	mov	r0, #98	; 0x62
   166d8:	b	168ac <__assert_fail@plt+0x5578>
   166dc:	mov	r2, #114	; 0x72
   166e0:	ldr	r0, [sp, #68]	; 0x44
   166e4:	tst	r0, #1
   166e8:	mov	r0, r2
   166ec:	bne	168ac <__assert_fail@plt+0x5578>
   166f0:	b	16f84 <__assert_fail@plt+0x5c50>
   166f4:	ldr	r0, [sp, #84]	; 0x54
   166f8:	tst	r0, #1
   166fc:	beq	1699c <__assert_fail@plt+0x5668>
   16700:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16704:	tst	r0, #1
   16708:	bne	17094 <__assert_fail@plt+0x5d60>
   1670c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16710:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16714:	cmp	r0, #2
   16718:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1671c:	movwne	r0, #1
   16720:	orr	r0, r0, r2
   16724:	tst	r0, #1
   16728:	beq	16d6c <__assert_fail@plt+0x5a38>
   1672c:	mov	r0, r8
   16730:	b	16da0 <__assert_fail@plt+0x5a6c>
   16734:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16738:	mov	r9, #0
   1673c:	mov	r5, #63	; 0x3f
   16740:	cmp	r0, #5
   16744:	beq	16b50 <__assert_fail@plt+0x581c>
   16748:	cmp	r0, #2
   1674c:	bne	16bf4 <__assert_fail@plt+0x58c0>
   16750:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16754:	tst	r0, #1
   16758:	beq	16bf8 <__assert_fail@plt+0x58c4>
   1675c:	b	16f84 <__assert_fail@plt+0x5c50>
   16760:	mov	r0, #118	; 0x76
   16764:	b	168ac <__assert_fail@plt+0x5578>
   16768:	mov	r0, #1
   1676c:	mov	r5, #39	; 0x27
   16770:	str	r0, [sp, #60]	; 0x3c
   16774:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16778:	cmp	r0, #2
   1677c:	bne	167f0 <__assert_fail@plt+0x54bc>
   16780:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16784:	tst	r0, #1
   16788:	bne	16f84 <__assert_fail@plt+0x5c50>
   1678c:	ldr	r2, [sp, #56]	; 0x38
   16790:	clz	r1, sl
   16794:	mov	r9, #0
   16798:	lsr	r1, r1, #5
   1679c:	cmp	r2, #0
   167a0:	mov	r0, r2
   167a4:	movwne	r0, #1
   167a8:	orrs	r0, r0, r1
   167ac:	moveq	r2, sl
   167b0:	moveq	sl, r0
   167b4:	cmp	r8, sl
   167b8:	str	r2, [sp, #56]	; 0x38
   167bc:	movcc	r0, #39	; 0x27
   167c0:	strbcc	r0, [r6, r8]
   167c4:	add	r0, r8, #1
   167c8:	cmp	r0, sl
   167cc:	movcc	r1, #92	; 0x5c
   167d0:	strbcc	r1, [r6, r0]
   167d4:	add	r0, r8, #2
   167d8:	add	r8, r8, #3
   167dc:	cmp	r0, sl
   167e0:	movcc	r1, #39	; 0x27
   167e4:	strbcc	r1, [r6, r0]
   167e8:	mov	r0, #0
   167ec:	str	r0, [fp, #-56]	; 0xffffffc8
   167f0:	mov	r4, #1
   167f4:	b	16658 <__assert_fail@plt+0x5324>
   167f8:	ldr	r0, [sp, #40]	; 0x28
   167fc:	cmp	r0, #1
   16800:	bne	169c8 <__assert_fail@plt+0x5694>
   16804:	str	lr, [sp, #28]
   16808:	bl	111e4 <__ctype_b_loc@plt>
   1680c:	ldr	r0, [r0]
   16810:	ldr	ip, [fp, #-84]	; 0xffffffac
   16814:	mov	r1, #1
   16818:	add	r0, r0, r5, lsl #1
   1681c:	ldrb	r0, [r0, #1]
   16820:	ubfx	r4, r0, #6, #1
   16824:	ldr	r0, [sp, #52]	; 0x34
   16828:	mov	r2, r1
   1682c:	cmp	r1, #1
   16830:	orr	r0, r4, r0
   16834:	bhi	16c00 <__assert_fail@plt+0x58cc>
   16838:	tst	r0, #1
   1683c:	beq	16c00 <__assert_fail@plt+0x58cc>
   16840:	ldr	lr, [sp, #28]
   16844:	b	16658 <__assert_fail@plt+0x5324>
   16848:	cmp	r7, #0
   1684c:	ldrbeq	r0, [ip, #1]
   16850:	cmpeq	r0, #0
   16854:	beq	16864 <__assert_fail@plt+0x5530>
   16858:	mvn	lr, #0
   1685c:	mov	r9, #0
   16860:	b	16658 <__assert_fail@plt+0x5324>
   16864:	mov	r1, #1
   16868:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1686c:	cmp	r0, #2
   16870:	bne	16880 <__assert_fail@plt+0x554c>
   16874:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16878:	tst	r0, #1
   1687c:	bne	16f84 <__assert_fail@plt+0x5c50>
   16880:	mov	r4, r1
   16884:	b	16658 <__assert_fail@plt+0x5324>
   16888:	ldr	r1, [sp, #48]	; 0x30
   1688c:	mov	r9, #0
   16890:	mov	r0, #92	; 0x5c
   16894:	cmp	r1, #0
   16898:	beq	168ac <__assert_fail@plt+0x5578>
   1689c:	mov	r4, #0
   168a0:	cmp	r9, #0
   168a4:	beq	16e38 <__assert_fail@plt+0x5b04>
   168a8:	b	16e74 <__assert_fail@plt+0x5b40>
   168ac:	ldr	r1, [sp, #84]	; 0x54
   168b0:	mov	r4, #0
   168b4:	mov	r9, #0
   168b8:	tst	r1, #1
   168bc:	bne	168fc <__assert_fail@plt+0x55c8>
   168c0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   168c4:	cmp	r0, #0
   168c8:	mov	r0, r5
   168cc:	beq	168f0 <__assert_fail@plt+0x55bc>
   168d0:	ldr	r1, [fp, #16]
   168d4:	ubfx	r0, r5, #5, #3
   168d8:	mov	r2, #1
   168dc:	ldr	r0, [r1, r0, lsl #2]
   168e0:	and	r1, r5, #31
   168e4:	tst	r0, r2, lsl r1
   168e8:	mov	r0, r5
   168ec:	bne	168fc <__assert_fail@plt+0x55c8>
   168f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   168f4:	cmp	r1, #0
   168f8:	beq	16e30 <__assert_fail@plt+0x5afc>
   168fc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16900:	tst	r1, #1
   16904:	bne	16f5c <__assert_fail@plt+0x5c28>
   16908:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1690c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16910:	cmp	r1, #2
   16914:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16918:	movwne	r1, #1
   1691c:	orr	r1, r1, r2
   16920:	tst	r1, #1
   16924:	beq	16930 <__assert_fail@plt+0x55fc>
   16928:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1692c:	b	1696c <__assert_fail@plt+0x5638>
   16930:	cmp	r8, sl
   16934:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16938:	movcc	r1, #39	; 0x27
   1693c:	strbcc	r1, [r6, r8]
   16940:	add	r1, r8, #1
   16944:	cmp	r1, sl
   16948:	movcc	r2, #36	; 0x24
   1694c:	strbcc	r2, [r6, r1]
   16950:	add	r1, r8, #2
   16954:	add	r8, r8, #3
   16958:	cmp	r1, sl
   1695c:	movcc	r2, #39	; 0x27
   16960:	strbcc	r2, [r6, r1]
   16964:	mov	r1, #1
   16968:	str	r1, [fp, #-56]	; 0xffffffc8
   1696c:	cmp	r8, sl
   16970:	movcc	r1, #92	; 0x5c
   16974:	strbcc	r1, [r6, r8]
   16978:	add	r8, r8, #1
   1697c:	cmp	r8, sl
   16980:	and	r5, r5, r4
   16984:	add	r7, r7, #1
   16988:	strbcc	r0, [r6, r8]
   1698c:	add	r8, r8, #1
   16990:	cmn	lr, #1
   16994:	bne	16390 <__assert_fail@plt+0x505c>
   16998:	b	1639c <__assert_fail@plt+0x5068>
   1699c:	ldr	r0, [sp, #36]	; 0x24
   169a0:	mov	r4, #0
   169a4:	mov	r9, #0
   169a8:	mov	r5, #0
   169ac:	cmp	r0, #0
   169b0:	beq	168c0 <__assert_fail@plt+0x558c>
   169b4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   169b8:	add	r7, r7, #1
   169bc:	cmn	lr, #1
   169c0:	bne	16390 <__assert_fail@plt+0x505c>
   169c4:	b	1639c <__assert_fail@plt+0x5068>
   169c8:	mov	r0, #0
   169cc:	cmn	lr, #1
   169d0:	str	r0, [fp, #-36]	; 0xffffffdc
   169d4:	str	r0, [fp, #-40]	; 0xffffffd8
   169d8:	bne	169ec <__assert_fail@plt+0x56b8>
   169dc:	mov	r0, ip
   169e0:	bl	111fc <strlen@plt>
   169e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   169e8:	mov	lr, r0
   169ec:	add	r0, ip, r7
   169f0:	mov	r4, #1
   169f4:	mov	r6, #0
   169f8:	str	lr, [sp, #28]
   169fc:	str	r0, [sp, #24]
   16a00:	sub	r0, fp, #40	; 0x28
   16a04:	mov	r3, r0
   16a08:	str	r6, [sp, #44]	; 0x2c
   16a0c:	add	r6, r6, r7
   16a10:	sub	r0, fp, #44	; 0x2c
   16a14:	add	r1, ip, r6
   16a18:	sub	r2, lr, r6
   16a1c:	bl	19970 <__assert_fail@plt+0x863c>
   16a20:	cmp	r0, #0
   16a24:	beq	16ebc <__assert_fail@plt+0x5b88>
   16a28:	cmn	r0, #1
   16a2c:	beq	16e7c <__assert_fail@plt+0x5b48>
   16a30:	ldr	lr, [sp, #28]
   16a34:	cmn	r0, #2
   16a38:	beq	16e84 <__assert_fail@plt+0x5b50>
   16a3c:	ldr	r2, [sp, #64]	; 0x40
   16a40:	cmp	r0, #2
   16a44:	mov	r1, #0
   16a48:	movwcc	r1, #1
   16a4c:	eor	r2, r2, #1
   16a50:	orrs	r1, r2, r1
   16a54:	bne	16b14 <__assert_fail@plt+0x57e0>
   16a58:	ldr	r1, [sp, #44]	; 0x2c
   16a5c:	ldr	r2, [sp, #24]
   16a60:	add	r1, r2, r1
   16a64:	mov	r2, #1
   16a68:	ldrb	r3, [r1, r2]
   16a6c:	sub	r3, r3, #91	; 0x5b
   16a70:	cmp	r3, #33	; 0x21
   16a74:	bhi	16b08 <__assert_fail@plt+0x57d4>
   16a78:	add	r6, pc, #0
   16a7c:	ldr	pc, [r6, r3, lsl #2]
   16a80:	andeq	r6, r1, ip, ror pc
   16a84:	andeq	r6, r1, ip, ror pc
   16a88:	andeq	r6, r1, r8, lsl #22
   16a8c:	andeq	r6, r1, ip, ror pc
   16a90:	andeq	r6, r1, r8, lsl #22
   16a94:	andeq	r6, r1, ip, ror pc
   16a98:	andeq	r6, r1, r8, lsl #22
   16a9c:	andeq	r6, r1, r8, lsl #22
   16aa0:	andeq	r6, r1, r8, lsl #22
   16aa4:	andeq	r6, r1, r8, lsl #22
   16aa8:	andeq	r6, r1, r8, lsl #22
   16aac:	andeq	r6, r1, r8, lsl #22
   16ab0:	andeq	r6, r1, r8, lsl #22
   16ab4:	andeq	r6, r1, r8, lsl #22
   16ab8:	andeq	r6, r1, r8, lsl #22
   16abc:	andeq	r6, r1, r8, lsl #22
   16ac0:	andeq	r6, r1, r8, lsl #22
   16ac4:	andeq	r6, r1, r8, lsl #22
   16ac8:	andeq	r6, r1, r8, lsl #22
   16acc:	andeq	r6, r1, r8, lsl #22
   16ad0:	andeq	r6, r1, r8, lsl #22
   16ad4:	andeq	r6, r1, r8, lsl #22
   16ad8:	andeq	r6, r1, r8, lsl #22
   16adc:	andeq	r6, r1, r8, lsl #22
   16ae0:	andeq	r6, r1, r8, lsl #22
   16ae4:	andeq	r6, r1, r8, lsl #22
   16ae8:	andeq	r6, r1, r8, lsl #22
   16aec:	andeq	r6, r1, r8, lsl #22
   16af0:	andeq	r6, r1, r8, lsl #22
   16af4:	andeq	r6, r1, r8, lsl #22
   16af8:	andeq	r6, r1, r8, lsl #22
   16afc:	andeq	r6, r1, r8, lsl #22
   16b00:	andeq	r6, r1, r8, lsl #22
   16b04:	andeq	r6, r1, ip, ror pc
   16b08:	add	r2, r2, #1
   16b0c:	cmp	r2, r0
   16b10:	bcc	16a68 <__assert_fail@plt+0x5734>
   16b14:	ldr	r6, [sp, #44]	; 0x2c
   16b18:	add	r6, r0, r6
   16b1c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16b20:	bl	11130 <iswprint@plt>
   16b24:	cmp	r0, #0
   16b28:	movwne	r0, #1
   16b2c:	and	r4, r4, r0
   16b30:	sub	r0, fp, #40	; 0x28
   16b34:	bl	110e8 <mbsinit@plt>
   16b38:	ldr	lr, [sp, #28]
   16b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16b40:	sub	r3, fp, #40	; 0x28
   16b44:	cmp	r0, #0
   16b48:	beq	16a08 <__assert_fail@plt+0x56d4>
   16b4c:	b	16ec4 <__assert_fail@plt+0x5b90>
   16b50:	ldr	r0, [sp, #32]
   16b54:	cmp	r0, #0
   16b58:	beq	16bf4 <__assert_fail@plt+0x58c0>
   16b5c:	add	r0, r7, #2
   16b60:	cmp	r0, lr
   16b64:	bcs	16bf4 <__assert_fail@plt+0x58c0>
   16b68:	add	r1, ip, r7
   16b6c:	ldrb	r1, [r1, #1]
   16b70:	cmp	r1, #63	; 0x3f
   16b74:	bne	16bf4 <__assert_fail@plt+0x58c0>
   16b78:	ldrb	r5, [ip, r0]
   16b7c:	sub	r1, r5, #33	; 0x21
   16b80:	cmp	r1, #29
   16b84:	bhi	16bf4 <__assert_fail@plt+0x58c0>
   16b88:	movw	r3, #20929	; 0x51c1
   16b8c:	mov	r2, #1
   16b90:	movt	r3, #14336	; 0x3800
   16b94:	tst	r3, r2, lsl r1
   16b98:	beq	16bf4 <__assert_fail@plt+0x58c0>
   16b9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16ba0:	tst	r1, #1
   16ba4:	bne	1709c <__assert_fail@plt+0x5d68>
   16ba8:	cmp	r8, sl
   16bac:	mov	r7, r0
   16bb0:	mov	r4, #0
   16bb4:	movcc	r1, #63	; 0x3f
   16bb8:	strbcc	r1, [r6, r8]
   16bbc:	add	r1, r8, #1
   16bc0:	cmp	r1, sl
   16bc4:	movcc	r2, #34	; 0x22
   16bc8:	strbcc	r2, [r6, r1]
   16bcc:	add	r1, r8, #2
   16bd0:	cmp	r1, sl
   16bd4:	movcc	r2, #34	; 0x22
   16bd8:	strbcc	r2, [r6, r1]
   16bdc:	add	r1, r8, #3
   16be0:	add	r8, r8, #4
   16be4:	cmp	r1, sl
   16be8:	movcc	r2, #63	; 0x3f
   16bec:	strbcc	r2, [r6, r1]
   16bf0:	b	16658 <__assert_fail@plt+0x5324>
   16bf4:	mov	r5, #63	; 0x3f
   16bf8:	mov	r4, #0
   16bfc:	b	16658 <__assert_fail@plt+0x5324>
   16c00:	add	r1, r2, r7
   16c04:	ldr	lr, [sp, #28]
   16c08:	mov	r3, #0
   16c0c:	str	r1, [sp, #44]	; 0x2c
   16c10:	add	r1, r7, #1
   16c14:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16c18:	tst	r0, #1
   16c1c:	bne	16cf0 <__assert_fail@plt+0x59bc>
   16c20:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16c24:	tst	r2, #1
   16c28:	bne	16fe4 <__assert_fail@plt+0x5cb0>
   16c2c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16c30:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16c34:	cmp	r7, #2
   16c38:	movwne	r3, #1
   16c3c:	orr	r3, r3, r2
   16c40:	tst	r3, #1
   16c44:	bne	16c80 <__assert_fail@plt+0x594c>
   16c48:	cmp	r8, sl
   16c4c:	add	r3, r8, #1
   16c50:	movcc	r2, #39	; 0x27
   16c54:	strbcc	r2, [r6, r8]
   16c58:	cmp	r3, sl
   16c5c:	movcc	r2, #36	; 0x24
   16c60:	strbcc	r2, [r6, r3]
   16c64:	add	r3, r8, #2
   16c68:	add	r8, r8, #3
   16c6c:	cmp	r3, sl
   16c70:	movcc	r2, #39	; 0x27
   16c74:	strbcc	r2, [r6, r3]
   16c78:	mov	r2, #1
   16c7c:	str	r2, [fp, #-56]	; 0xffffffc8
   16c80:	cmp	r8, sl
   16c84:	movcc	r3, #92	; 0x5c
   16c88:	strbcc	r3, [r6, r8]
   16c8c:	add	r3, r8, #1
   16c90:	cmp	r3, sl
   16c94:	andcc	r7, r5, #192	; 0xc0
   16c98:	movcc	r2, #48	; 0x30
   16c9c:	orrcc	r7, r2, r7, lsr #6
   16ca0:	strbcc	r7, [r6, r3]
   16ca4:	add	r3, r8, #2
   16ca8:	add	r8, r8, #3
   16cac:	cmp	r3, sl
   16cb0:	lsrcc	r7, r5, #3
   16cb4:	movcc	r2, #6
   16cb8:	bficc	r7, r2, #3, #29
   16cbc:	mov	r2, #6
   16cc0:	strbcc	r7, [r6, r3]
   16cc4:	bfi	r5, r2, #3, #29
   16cc8:	mov	r3, #1
   16ccc:	b	16d14 <__assert_fail@plt+0x59e0>
   16cd0:	cmp	r8, sl
   16cd4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16cd8:	strbcc	r5, [r6, r8]
   16cdc:	add	r8, r8, #1
   16ce0:	ldrb	r5, [ip, r1]
   16ce4:	add	r1, r1, #1
   16ce8:	tst	r0, #1
   16cec:	beq	16c20 <__assert_fail@plt+0x58ec>
   16cf0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16cf4:	tst	r2, #1
   16cf8:	beq	16d0c <__assert_fail@plt+0x59d8>
   16cfc:	cmp	r8, sl
   16d00:	movcc	r7, #92	; 0x5c
   16d04:	strbcc	r7, [r6, r8]
   16d08:	add	r8, r8, #1
   16d0c:	mov	r2, #0
   16d10:	str	r2, [fp, #-52]	; 0xffffffcc
   16d14:	ldr	r2, [sp, #44]	; 0x2c
   16d18:	and	r9, r3, #1
   16d1c:	cmp	r2, r1
   16d20:	bls	16e20 <__assert_fail@plt+0x5aec>
   16d24:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16d28:	cmp	r9, #0
   16d2c:	movwne	r9, #1
   16d30:	mvn	r7, r2
   16d34:	orr	r7, r7, r9
   16d38:	tst	r7, #1
   16d3c:	bne	16cd0 <__assert_fail@plt+0x599c>
   16d40:	cmp	r8, sl
   16d44:	movcc	r7, #39	; 0x27
   16d48:	strbcc	r7, [r6, r8]
   16d4c:	add	r7, r8, #1
   16d50:	add	r8, r8, #2
   16d54:	cmp	r7, sl
   16d58:	movcc	r2, #39	; 0x27
   16d5c:	strbcc	r2, [r6, r7]
   16d60:	mov	r2, #0
   16d64:	str	r2, [fp, #-56]	; 0xffffffc8
   16d68:	b	16cd0 <__assert_fail@plt+0x599c>
   16d6c:	cmp	r8, sl
   16d70:	mov	r2, #1
   16d74:	movcc	r0, #39	; 0x27
   16d78:	strbcc	r0, [r6, r8]
   16d7c:	add	r0, r8, #1
   16d80:	cmp	r0, sl
   16d84:	movcc	r1, #36	; 0x24
   16d88:	strbcc	r1, [r6, r0]
   16d8c:	add	r0, r8, #2
   16d90:	cmp	r0, sl
   16d94:	movcc	r1, #39	; 0x27
   16d98:	strbcc	r1, [r6, r0]
   16d9c:	add	r0, r8, #3
   16da0:	cmp	r0, sl
   16da4:	add	r8, r0, #1
   16da8:	str	r2, [fp, #-56]	; 0xffffffc8
   16dac:	movcc	r1, #92	; 0x5c
   16db0:	strbcc	r1, [r6, r0]
   16db4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16db8:	cmp	r1, #2
   16dbc:	beq	16e10 <__assert_fail@plt+0x5adc>
   16dc0:	add	r1, r7, #1
   16dc4:	mov	r4, #0
   16dc8:	mov	r9, #1
   16dcc:	mov	r5, #48	; 0x30
   16dd0:	cmp	r1, lr
   16dd4:	bcs	16658 <__assert_fail@plt+0x5324>
   16dd8:	ldrb	r1, [ip, r1]
   16ddc:	sub	r1, r1, #48	; 0x30
   16de0:	uxtb	r1, r1
   16de4:	cmp	r1, #9
   16de8:	bhi	16658 <__assert_fail@plt+0x5324>
   16dec:	cmp	r8, sl
   16df0:	movcc	r1, #48	; 0x30
   16df4:	strbcc	r1, [r6, r8]
   16df8:	add	r1, r0, #2
   16dfc:	add	r8, r0, #3
   16e00:	cmp	r1, sl
   16e04:	movcc	r2, #48	; 0x30
   16e08:	strbcc	r2, [r6, r1]
   16e0c:	b	16658 <__assert_fail@plt+0x5324>
   16e10:	mov	r0, #48	; 0x30
   16e14:	mov	r9, #1
   16e18:	mov	r4, #0
   16e1c:	b	168f0 <__assert_fail@plt+0x55bc>
   16e20:	cmp	r9, #0
   16e24:	sub	r7, r1, #1
   16e28:	mov	r0, r5
   16e2c:	movwne	r9, #1
   16e30:	cmp	r9, #0
   16e34:	bne	16e74 <__assert_fail@plt+0x5b40>
   16e38:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16e3c:	tst	r1, #1
   16e40:	beq	16e74 <__assert_fail@plt+0x5b40>
   16e44:	cmp	r8, sl
   16e48:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16e4c:	movcc	r1, #39	; 0x27
   16e50:	strbcc	r1, [r6, r8]
   16e54:	add	r1, r8, #1
   16e58:	add	r8, r8, #2
   16e5c:	cmp	r1, sl
   16e60:	movcc	r2, #39	; 0x27
   16e64:	strbcc	r2, [r6, r1]
   16e68:	mov	r1, #0
   16e6c:	str	r1, [fp, #-56]	; 0xffffffc8
   16e70:	b	1697c <__assert_fail@plt+0x5648>
   16e74:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16e78:	b	1697c <__assert_fail@plt+0x5648>
   16e7c:	mov	r4, #0
   16e80:	b	16ebc <__assert_fail@plt+0x5b88>
   16e84:	mov	r4, #0
   16e88:	cmp	lr, r6
   16e8c:	bls	16ebc <__assert_fail@plt+0x5b88>
   16e90:	ldr	ip, [fp, #-84]	; 0xffffffac
   16e94:	ldr	r6, [sp, #44]	; 0x2c
   16e98:	ldr	r0, [sp, #24]
   16e9c:	ldrb	r0, [r0, r6]
   16ea0:	cmp	r0, #0
   16ea4:	beq	16ec4 <__assert_fail@plt+0x5b90>
   16ea8:	add	r6, r6, #1
   16eac:	add	r0, r7, r6
   16eb0:	cmp	r0, lr
   16eb4:	bcc	16e98 <__assert_fail@plt+0x5b64>
   16eb8:	b	16ec4 <__assert_fail@plt+0x5b90>
   16ebc:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ec0:	ldr	r6, [sp, #44]	; 0x2c
   16ec4:	mov	r1, r6
   16ec8:	ldr	r6, [sp, #80]	; 0x50
   16ecc:	b	16824 <__assert_fail@plt+0x54f0>
   16ed0:	mov	lr, r7
   16ed4:	b	16edc <__assert_fail@plt+0x5ba8>
   16ed8:	mvn	lr, #0
   16edc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16ee0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16ee4:	eor	r0, r7, #2
   16ee8:	orr	r0, r0, r8
   16eec:	clz	r0, r0
   16ef0:	lsr	r0, r0, #5
   16ef4:	tst	r1, r0
   16ef8:	bne	16f84 <__assert_fail@plt+0x5c50>
   16efc:	mov	r0, r1
   16f00:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16f04:	cmp	r7, #2
   16f08:	movwne	r1, #1
   16f0c:	orr	r0, r0, r1
   16f10:	tst	r0, #1
   16f14:	ldreq	r0, [sp, #60]	; 0x3c
   16f18:	eoreq	r0, r0, #1
   16f1c:	tsteq	r0, #1
   16f20:	bne	17030 <__assert_fail@plt+0x5cfc>
   16f24:	mov	r9, lr
   16f28:	tst	r5, #1
   16f2c:	bne	16fec <__assert_fail@plt+0x5cb8>
   16f30:	ldr	r6, [sp, #56]	; 0x38
   16f34:	mov	r4, #0
   16f38:	cmp	r6, #0
   16f3c:	beq	17028 <__assert_fail@plt+0x5cf4>
   16f40:	ldr	r0, [sp, #84]	; 0x54
   16f44:	mov	r1, #0
   16f48:	cmp	sl, #0
   16f4c:	mov	r5, #0
   16f50:	str	r1, [fp, #-72]	; 0xffffffb8
   16f54:	beq	16124 <__assert_fail@plt+0x4df0>
   16f58:	b	17030 <__assert_fail@plt+0x5cfc>
   16f5c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16f60:	ldr	r2, [sp, #84]	; 0x54
   16f64:	b	16f8c <__assert_fail@plt+0x5c58>
   16f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f6c:	mov	r2, #1
   16f70:	mov	lr, r4
   16f74:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16f78:	b	16f8c <__assert_fail@plt+0x5c58>
   16f7c:	ldr	r6, [sp, #80]	; 0x50
   16f80:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f84:	ldr	r2, [sp, #84]	; 0x54
   16f88:	mov	r7, #2
   16f8c:	mov	r0, #0
   16f90:	ldr	r1, [fp, #12]
   16f94:	tst	r2, #1
   16f98:	mov	r2, r7
   16f9c:	mov	r3, lr
   16fa0:	str	r0, [sp, #8]
   16fa4:	ldr	r0, [sp, #72]	; 0x48
   16fa8:	movwne	r2, #4
   16fac:	cmp	r7, #2
   16fb0:	movne	r2, r7
   16fb4:	str	r2, [sp]
   16fb8:	mov	r2, ip
   16fbc:	bic	r1, r1, #2
   16fc0:	str	r0, [sp, #12]
   16fc4:	ldr	r0, [sp, #76]	; 0x4c
   16fc8:	str	r1, [sp, #4]
   16fcc:	mov	r1, sl
   16fd0:	str	r0, [sp, #16]
   16fd4:	mov	r0, r6
   16fd8:	bl	160a4 <__assert_fail@plt+0x4d70>
   16fdc:	mov	r8, r0
   16fe0:	b	17088 <__assert_fail@plt+0x5d54>
   16fe4:	ldr	r2, [sp, #84]	; 0x54
   16fe8:	b	16f8c <__assert_fail@plt+0x5c58>
   16fec:	mov	r0, #5
   16ff0:	ldr	r1, [sp, #56]	; 0x38
   16ff4:	ldr	r2, [fp, #-84]	; 0xffffffac
   16ff8:	mov	r3, r9
   16ffc:	str	r0, [sp]
   17000:	ldr	r0, [fp, #12]
   17004:	str	r0, [sp, #4]
   17008:	ldr	r0, [fp, #16]
   1700c:	str	r0, [sp, #8]
   17010:	ldr	r0, [sp, #72]	; 0x48
   17014:	str	r0, [sp, #12]
   17018:	ldr	r0, [sp, #76]	; 0x4c
   1701c:	str	r0, [sp, #16]
   17020:	ldr	r0, [sp, #80]	; 0x50
   17024:	b	16fd8 <__assert_fail@plt+0x5ca4>
   17028:	mov	r0, #0
   1702c:	str	r0, [fp, #-72]	; 0xffffffb8
   17030:	ldr	r1, [sp, #92]	; 0x5c
   17034:	cmp	r1, #0
   17038:	beq	17078 <__assert_fail@plt+0x5d44>
   1703c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17040:	ldr	r2, [sp, #80]	; 0x50
   17044:	tst	r0, #1
   17048:	bne	1707c <__assert_fail@plt+0x5d48>
   1704c:	ldrb	r0, [r1]
   17050:	cmp	r0, #0
   17054:	beq	1707c <__assert_fail@plt+0x5d48>
   17058:	add	r1, r1, #1
   1705c:	cmp	r8, sl
   17060:	strbcc	r0, [r2, r8]
   17064:	add	r8, r8, #1
   17068:	ldrb	r0, [r1], #1
   1706c:	cmp	r0, #0
   17070:	bne	1705c <__assert_fail@plt+0x5d28>
   17074:	b	1707c <__assert_fail@plt+0x5d48>
   17078:	ldr	r2, [sp, #80]	; 0x50
   1707c:	cmp	r8, sl
   17080:	movcc	r0, #0
   17084:	strbcc	r0, [r2, r8]
   17088:	mov	r0, r8
   1708c:	sub	sp, fp, #28
   17090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17094:	mov	r2, #1
   17098:	b	16f74 <__assert_fail@plt+0x5c40>
   1709c:	ldr	r2, [sp, #84]	; 0x54
   170a0:	mov	r7, #5
   170a4:	b	16f8c <__assert_fail@plt+0x5c58>
   170a8:	bl	1131c <abort@plt>
   170ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170b0:	add	fp, sp, #28
   170b4:	sub	sp, sp, #28
   170b8:	movw	r5, #49728	; 0xc240
   170bc:	cmp	r2, #0
   170c0:	mov	r4, r1
   170c4:	mov	r7, r0
   170c8:	str	r0, [sp, #20]
   170cc:	movt	r5, #2
   170d0:	movne	r5, r2
   170d4:	bl	11214 <__errno_location@plt>
   170d8:	mov	sl, r0
   170dc:	ldm	r5, {r0, r1}
   170e0:	ldr	r2, [r5, #40]	; 0x28
   170e4:	ldr	r3, [r5, #44]	; 0x2c
   170e8:	add	r9, r5, #8
   170ec:	ldr	r6, [sl]
   170f0:	orr	r8, r1, #1
   170f4:	mov	r1, #0
   170f8:	str	r6, [sp, #24]
   170fc:	stm	sp, {r0, r8, r9}
   17100:	str	r2, [sp, #12]
   17104:	str	r3, [sp, #16]
   17108:	mov	r0, #0
   1710c:	mov	r2, r7
   17110:	mov	r3, r4
   17114:	mov	r6, r4
   17118:	bl	160a4 <__assert_fail@plt+0x4d70>
   1711c:	add	r7, r0, #1
   17120:	mov	r0, r7
   17124:	bl	182bc <__assert_fail@plt+0x6f88>
   17128:	mov	r4, r0
   1712c:	ldr	r0, [r5]
   17130:	ldr	r2, [r5, #44]	; 0x2c
   17134:	ldr	r1, [r5, #40]	; 0x28
   17138:	mov	r3, r6
   1713c:	stm	sp, {r0, r8, r9}
   17140:	str	r2, [sp, #16]
   17144:	str	r1, [sp, #12]
   17148:	mov	r0, r4
   1714c:	mov	r1, r7
   17150:	ldr	r2, [sp, #20]
   17154:	bl	160a4 <__assert_fail@plt+0x4d70>
   17158:	ldr	r0, [sp, #24]
   1715c:	str	r0, [sl]
   17160:	mov	r0, r4
   17164:	sub	sp, fp, #28
   17168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1716c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17170:	add	fp, sp, #28
   17174:	sub	sp, sp, #36	; 0x24
   17178:	movw	r8, #49728	; 0xc240
   1717c:	cmp	r3, #0
   17180:	mov	r4, r2
   17184:	str	r2, [sp, #24]
   17188:	mov	r5, r1
   1718c:	mov	r6, r0
   17190:	str	r0, [sp, #20]
   17194:	movt	r8, #2
   17198:	movne	r8, r3
   1719c:	bl	11214 <__errno_location@plt>
   171a0:	str	r0, [sp, #28]
   171a4:	cmp	r4, #0
   171a8:	add	sl, r8, #8
   171ac:	ldm	r8, {r3, r9}
   171b0:	ldr	r7, [r0]
   171b4:	ldr	r1, [r8, #40]	; 0x28
   171b8:	ldr	r2, [r8, #44]	; 0x2c
   171bc:	mov	r0, #0
   171c0:	orreq	r9, r9, #1
   171c4:	str	r7, [sp, #32]
   171c8:	mov	r7, r5
   171cc:	stm	sp, {r3, r9, sl}
   171d0:	str	r1, [sp, #12]
   171d4:	str	r2, [sp, #16]
   171d8:	mov	r1, #0
   171dc:	mov	r2, r6
   171e0:	mov	r3, r5
   171e4:	bl	160a4 <__assert_fail@plt+0x4d70>
   171e8:	add	r4, r0, #1
   171ec:	mov	r5, r0
   171f0:	mov	r0, r4
   171f4:	bl	182bc <__assert_fail@plt+0x6f88>
   171f8:	mov	r6, r0
   171fc:	ldr	r0, [r8]
   17200:	ldr	r2, [r8, #44]	; 0x2c
   17204:	ldr	r1, [r8, #40]	; 0x28
   17208:	mov	r3, r7
   1720c:	stm	sp, {r0, r9, sl}
   17210:	str	r2, [sp, #16]
   17214:	str	r1, [sp, #12]
   17218:	mov	r0, r6
   1721c:	mov	r1, r4
   17220:	ldr	r2, [sp, #20]
   17224:	bl	160a4 <__assert_fail@plt+0x4d70>
   17228:	ldr	r0, [sp, #24]
   1722c:	ldr	r1, [sp, #32]
   17230:	ldr	r2, [sp, #28]
   17234:	cmp	r0, #0
   17238:	str	r1, [r2]
   1723c:	strne	r5, [r0]
   17240:	mov	r0, r6
   17244:	sub	sp, fp, #28
   17248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1724c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17250:	add	fp, sp, #24
   17254:	movw	r5, #49436	; 0xc11c
   17258:	movw	r8, #49432	; 0xc118
   1725c:	movt	r5, #2
   17260:	movt	r8, #2
   17264:	ldr	r0, [r5]
   17268:	ldr	r4, [r8]
   1726c:	cmp	r0, #2
   17270:	blt	1729c <__assert_fail@plt+0x5f68>
   17274:	add	r7, r4, #12
   17278:	mov	r6, #0
   1727c:	ldr	r0, [r7, r6, lsl #3]
   17280:	bl	15af8 <__assert_fail@plt+0x47c4>
   17284:	ldr	r1, [r5]
   17288:	add	r2, r6, #2
   1728c:	add	r0, r6, #1
   17290:	mov	r6, r0
   17294:	cmp	r2, r1
   17298:	blt	1727c <__assert_fail@plt+0x5f48>
   1729c:	ldr	r0, [r4, #4]
   172a0:	movw	r7, #49776	; 0xc270
   172a4:	movt	r7, #2
   172a8:	cmp	r0, r7
   172ac:	beq	172c4 <__assert_fail@plt+0x5f90>
   172b0:	bl	15af8 <__assert_fail@plt+0x47c4>
   172b4:	movw	r0, #49440	; 0xc120
   172b8:	mov	r6, #256	; 0x100
   172bc:	movt	r0, #2
   172c0:	strd	r6, [r0]
   172c4:	movw	r6, #49440	; 0xc120
   172c8:	movt	r6, #2
   172cc:	cmp	r4, r6
   172d0:	beq	172e0 <__assert_fail@plt+0x5fac>
   172d4:	mov	r0, r4
   172d8:	bl	15af8 <__assert_fail@plt+0x47c4>
   172dc:	str	r6, [r8]
   172e0:	mov	r0, #1
   172e4:	str	r0, [r5]
   172e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172ec:	movw	r3, #49728	; 0xc240
   172f0:	mvn	r2, #0
   172f4:	movt	r3, #2
   172f8:	b	172fc <__assert_fail@plt+0x5fc8>
   172fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17300:	add	fp, sp, #28
   17304:	sub	sp, sp, #44	; 0x2c
   17308:	mov	r7, r3
   1730c:	str	r2, [sp, #36]	; 0x24
   17310:	str	r1, [sp, #32]
   17314:	mov	r5, r0
   17318:	bl	11214 <__errno_location@plt>
   1731c:	cmp	r5, #0
   17320:	blt	1748c <__assert_fail@plt+0x6158>
   17324:	cmn	r5, #-2147483647	; 0x80000001
   17328:	beq	1748c <__assert_fail@plt+0x6158>
   1732c:	movw	r8, #49436	; 0xc11c
   17330:	movw	r4, #49432	; 0xc118
   17334:	str	r0, [sp, #28]
   17338:	ldr	r0, [r0]
   1733c:	movt	r8, #2
   17340:	movt	r4, #2
   17344:	ldr	r1, [r8]
   17348:	ldr	r6, [r4]
   1734c:	str	r0, [sp, #24]
   17350:	cmp	r1, r5
   17354:	ble	17360 <__assert_fail@plt+0x602c>
   17358:	mov	sl, r6
   1735c:	b	173c8 <__assert_fail@plt+0x6094>
   17360:	movw	r9, #49440	; 0xc120
   17364:	mov	r0, #8
   17368:	add	r2, r5, #1
   1736c:	str	r1, [fp, #-32]	; 0xffffffe0
   17370:	mvn	r3, #-2147483648	; 0x80000000
   17374:	movt	r9, #2
   17378:	str	r0, [sp]
   1737c:	sub	r2, r2, r1
   17380:	sub	r1, fp, #32
   17384:	subs	r0, r6, r9
   17388:	movne	r0, r6
   1738c:	bl	184bc <__assert_fail@plt+0x7188>
   17390:	cmp	r6, r9
   17394:	mov	sl, r0
   17398:	str	r0, [r4]
   1739c:	ldrdeq	r0, [r9]
   173a0:	stmeq	sl, {r0, r1}
   173a4:	ldr	r1, [r8]
   173a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   173ac:	add	r0, sl, r1, lsl #3
   173b0:	sub	r1, r2, r1
   173b4:	lsl	r2, r1, #3
   173b8:	mov	r1, #0
   173bc:	bl	11244 <memset@plt>
   173c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173c4:	str	r0, [r8]
   173c8:	mov	r9, sl
   173cc:	ldr	r6, [r9, r5, lsl #3]!
   173d0:	ldr	r4, [r9, #4]!
   173d4:	ldm	r7, {r0, r1}
   173d8:	ldr	r2, [r7, #40]	; 0x28
   173dc:	ldr	r3, [r7, #44]	; 0x2c
   173e0:	orr	r8, r1, #1
   173e4:	add	r1, r7, #8
   173e8:	stm	sp, {r0, r8}
   173ec:	add	r0, sp, #8
   173f0:	str	r1, [sp, #20]
   173f4:	stm	r0, {r1, r2, r3}
   173f8:	mov	r0, r4
   173fc:	mov	r1, r6
   17400:	ldr	r2, [sp, #32]
   17404:	ldr	r3, [sp, #36]	; 0x24
   17408:	bl	160a4 <__assert_fail@plt+0x4d70>
   1740c:	cmp	r6, r0
   17410:	bhi	17474 <__assert_fail@plt+0x6140>
   17414:	add	r6, r0, #1
   17418:	movw	r0, #49776	; 0xc270
   1741c:	movt	r0, #2
   17420:	str	r6, [sl, r5, lsl #3]
   17424:	cmp	r4, r0
   17428:	beq	17434 <__assert_fail@plt+0x6100>
   1742c:	mov	r0, r4
   17430:	bl	15af8 <__assert_fail@plt+0x47c4>
   17434:	mov	r0, r6
   17438:	bl	182bc <__assert_fail@plt+0x6f88>
   1743c:	str	r0, [r9]
   17440:	mov	r4, r0
   17444:	add	r3, sp, #8
   17448:	ldr	r0, [r7]
   1744c:	ldr	r1, [r7, #40]	; 0x28
   17450:	ldr	r2, [r7, #44]	; 0x2c
   17454:	stm	sp, {r0, r8}
   17458:	ldr	r0, [sp, #20]
   1745c:	stm	r3, {r0, r1, r2}
   17460:	mov	r0, r4
   17464:	mov	r1, r6
   17468:	ldr	r2, [sp, #32]
   1746c:	ldr	r3, [sp, #36]	; 0x24
   17470:	bl	160a4 <__assert_fail@plt+0x4d70>
   17474:	ldr	r0, [sp, #28]
   17478:	ldr	r1, [sp, #24]
   1747c:	str	r1, [r0]
   17480:	mov	r0, r4
   17484:	sub	sp, fp, #28
   17488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1748c:	bl	1131c <abort@plt>
   17490:	movw	r3, #49728	; 0xc240
   17494:	movt	r3, #2
   17498:	b	172fc <__assert_fail@plt+0x5fc8>
   1749c:	movw	r3, #49728	; 0xc240
   174a0:	mov	r1, r0
   174a4:	mov	r0, #0
   174a8:	mvn	r2, #0
   174ac:	movt	r3, #2
   174b0:	b	172fc <__assert_fail@plt+0x5fc8>
   174b4:	movw	r3, #49728	; 0xc240
   174b8:	mov	r2, r1
   174bc:	mov	r1, r0
   174c0:	mov	r0, #0
   174c4:	movt	r3, #2
   174c8:	b	172fc <__assert_fail@plt+0x5fc8>
   174cc:	push	{fp, lr}
   174d0:	mov	fp, sp
   174d4:	sub	sp, sp, #48	; 0x30
   174d8:	vmov.i32	q8, #0	; 0x00000000
   174dc:	mov	ip, #32
   174e0:	mov	r3, sp
   174e4:	mov	lr, r2
   174e8:	cmp	r1, #10
   174ec:	add	r2, r3, #16
   174f0:	vst1.64	{d16-d17}, [r3], ip
   174f4:	vst1.64	{d16-d17}, [r3]
   174f8:	vst1.64	{d16-d17}, [r2]
   174fc:	beq	1751c <__assert_fail@plt+0x61e8>
   17500:	str	r1, [sp]
   17504:	mov	r3, sp
   17508:	mov	r1, lr
   1750c:	mvn	r2, #0
   17510:	bl	172fc <__assert_fail@plt+0x5fc8>
   17514:	mov	sp, fp
   17518:	pop	{fp, pc}
   1751c:	bl	1131c <abort@plt>
   17520:	push	{r4, sl, fp, lr}
   17524:	add	fp, sp, #8
   17528:	sub	sp, sp, #48	; 0x30
   1752c:	mov	ip, r3
   17530:	mov	r3, sp
   17534:	vmov.i32	q8, #0	; 0x00000000
   17538:	mov	lr, #32
   1753c:	cmp	r1, #10
   17540:	add	r4, r3, #16
   17544:	vst1.64	{d16-d17}, [r3], lr
   17548:	vst1.64	{d16-d17}, [r3]
   1754c:	vst1.64	{d16-d17}, [r4]
   17550:	beq	17570 <__assert_fail@plt+0x623c>
   17554:	str	r1, [sp]
   17558:	mov	r1, r2
   1755c:	mov	r3, sp
   17560:	mov	r2, ip
   17564:	bl	172fc <__assert_fail@plt+0x5fc8>
   17568:	sub	sp, fp, #8
   1756c:	pop	{r4, sl, fp, pc}
   17570:	bl	1131c <abort@plt>
   17574:	push	{fp, lr}
   17578:	mov	fp, sp
   1757c:	sub	sp, sp, #48	; 0x30
   17580:	mov	r3, sp
   17584:	vmov.i32	q8, #0	; 0x00000000
   17588:	mov	ip, #32
   1758c:	cmp	r0, #10
   17590:	add	r2, r3, #16
   17594:	vst1.64	{d16-d17}, [r3], ip
   17598:	vst1.64	{d16-d17}, [r3]
   1759c:	vst1.64	{d16-d17}, [r2]
   175a0:	beq	175c0 <__assert_fail@plt+0x628c>
   175a4:	str	r0, [sp]
   175a8:	mov	r3, sp
   175ac:	mov	r0, #0
   175b0:	mvn	r2, #0
   175b4:	bl	172fc <__assert_fail@plt+0x5fc8>
   175b8:	mov	sp, fp
   175bc:	pop	{fp, pc}
   175c0:	bl	1131c <abort@plt>
   175c4:	push	{fp, lr}
   175c8:	mov	fp, sp
   175cc:	sub	sp, sp, #48	; 0x30
   175d0:	mov	r3, sp
   175d4:	vmov.i32	q8, #0	; 0x00000000
   175d8:	mov	ip, #32
   175dc:	cmp	r0, #10
   175e0:	add	lr, r3, #16
   175e4:	vst1.64	{d16-d17}, [r3], ip
   175e8:	vst1.64	{d16-d17}, [r3]
   175ec:	vst1.64	{d16-d17}, [lr]
   175f0:	beq	1760c <__assert_fail@plt+0x62d8>
   175f4:	str	r0, [sp]
   175f8:	mov	r3, sp
   175fc:	mov	r0, #0
   17600:	bl	172fc <__assert_fail@plt+0x5fc8>
   17604:	mov	sp, fp
   17608:	pop	{fp, pc}
   1760c:	bl	1131c <abort@plt>
   17610:	push	{r4, sl, fp, lr}
   17614:	add	fp, sp, #8
   17618:	sub	sp, sp, #48	; 0x30
   1761c:	mov	lr, r0
   17620:	movw	r0, #49728	; 0xc240
   17624:	mov	r3, #32
   17628:	mov	ip, r1
   1762c:	mov	r4, #1
   17630:	movt	r0, #2
   17634:	add	r1, r0, #16
   17638:	vld1.64	{d16-d17}, [r0], r3
   1763c:	mov	r3, sp
   17640:	vld1.64	{d18-d19}, [r1]
   17644:	add	r1, r3, #16
   17648:	vld1.64	{d20-d21}, [r0]
   1764c:	add	r0, r3, #32
   17650:	vst1.64	{d18-d19}, [r1]
   17654:	mov	r1, r3
   17658:	vst1.64	{d20-d21}, [r0]
   1765c:	mov	r0, #28
   17660:	and	r0, r0, r2, lsr #3
   17664:	and	r2, r2, #31
   17668:	vst1.64	{d16-d17}, [r1], r0
   1766c:	ldr	r0, [r1, #8]
   17670:	bic	r4, r4, r0, lsr r2
   17674:	eor	r0, r0, r4, lsl r2
   17678:	mov	r2, ip
   1767c:	str	r0, [r1, #8]
   17680:	mov	r0, #0
   17684:	mov	r1, lr
   17688:	bl	172fc <__assert_fail@plt+0x5fc8>
   1768c:	sub	sp, fp, #8
   17690:	pop	{r4, sl, fp, pc}
   17694:	push	{fp, lr}
   17698:	mov	fp, sp
   1769c:	sub	sp, sp, #48	; 0x30
   176a0:	mov	ip, r0
   176a4:	movw	r0, #49728	; 0xc240
   176a8:	mov	r3, #32
   176ac:	movt	r0, #2
   176b0:	add	r2, r0, #16
   176b4:	vld1.64	{d16-d17}, [r0], r3
   176b8:	mov	r3, sp
   176bc:	vld1.64	{d18-d19}, [r2]
   176c0:	add	r2, r3, #16
   176c4:	vld1.64	{d20-d21}, [r0]
   176c8:	add	r0, r3, #32
   176cc:	vst1.64	{d18-d19}, [r2]
   176d0:	mov	r2, r3
   176d4:	vst1.64	{d20-d21}, [r0]
   176d8:	mov	r0, #28
   176dc:	and	r0, r0, r1, lsr #3
   176e0:	and	r1, r1, #31
   176e4:	vst1.64	{d16-d17}, [r2], r0
   176e8:	mov	r0, #1
   176ec:	ldr	lr, [r2, #8]
   176f0:	bic	r0, r0, lr, lsr r1
   176f4:	eor	r0, lr, r0, lsl r1
   176f8:	mov	r1, ip
   176fc:	str	r0, [r2, #8]
   17700:	mov	r0, #0
   17704:	mvn	r2, #0
   17708:	bl	172fc <__assert_fail@plt+0x5fc8>
   1770c:	mov	sp, fp
   17710:	pop	{fp, pc}
   17714:	push	{fp, lr}
   17718:	mov	fp, sp
   1771c:	sub	sp, sp, #48	; 0x30
   17720:	movw	r2, #49728	; 0xc240
   17724:	mov	r3, #32
   17728:	mov	r1, r0
   1772c:	movt	r2, #2
   17730:	add	r0, r2, #16
   17734:	vld1.64	{d16-d17}, [r2], r3
   17738:	mov	r3, sp
   1773c:	vld1.64	{d18-d19}, [r0]
   17740:	add	r0, r3, #16
   17744:	vld1.64	{d20-d21}, [r2]
   17748:	mov	r2, r3
   1774c:	vst1.64	{d18-d19}, [r0]
   17750:	add	r0, r3, #32
   17754:	vst1.64	{d20-d21}, [r0]
   17758:	mov	r0, #12
   1775c:	vst1.64	{d16-d17}, [r2], r0
   17760:	ldr	r0, [r2]
   17764:	orr	r0, r0, #67108864	; 0x4000000
   17768:	str	r0, [r2]
   1776c:	mov	r0, #0
   17770:	mvn	r2, #0
   17774:	bl	172fc <__assert_fail@plt+0x5fc8>
   17778:	mov	sp, fp
   1777c:	pop	{fp, pc}
   17780:	push	{fp, lr}
   17784:	mov	fp, sp
   17788:	sub	sp, sp, #48	; 0x30
   1778c:	mov	ip, r1
   17790:	mov	r1, r0
   17794:	movw	r0, #49728	; 0xc240
   17798:	mov	r3, #32
   1779c:	movt	r0, #2
   177a0:	add	r2, r0, #16
   177a4:	vld1.64	{d16-d17}, [r0], r3
   177a8:	mov	r3, sp
   177ac:	vld1.64	{d18-d19}, [r2]
   177b0:	add	r2, r3, #16
   177b4:	vld1.64	{d20-d21}, [r0]
   177b8:	add	r0, r3, #32
   177bc:	vst1.64	{d18-d19}, [r2]
   177c0:	mov	r2, r3
   177c4:	vst1.64	{d20-d21}, [r0]
   177c8:	mov	r0, #12
   177cc:	vst1.64	{d16-d17}, [r2], r0
   177d0:	ldr	r0, [r2]
   177d4:	orr	r0, r0, #67108864	; 0x4000000
   177d8:	str	r0, [r2]
   177dc:	mov	r0, #0
   177e0:	mov	r2, ip
   177e4:	bl	172fc <__assert_fail@plt+0x5fc8>
   177e8:	mov	sp, fp
   177ec:	pop	{fp, pc}
   177f0:	push	{r4, sl, fp, lr}
   177f4:	add	fp, sp, #8
   177f8:	sub	sp, sp, #96	; 0x60
   177fc:	mov	ip, r2
   17800:	mov	r2, sp
   17804:	vmov.i32	q8, #0	; 0x00000000
   17808:	mov	r4, #28
   1780c:	cmp	r1, #10
   17810:	mov	r3, r2
   17814:	add	lr, r2, #16
   17818:	vst1.64	{d16-d17}, [r3], r4
   1781c:	vst1.64	{d16-d17}, [lr]
   17820:	vst1.32	{d16-d17}, [r3]
   17824:	beq	17874 <__assert_fail@plt+0x6540>
   17828:	vld1.64	{d16-d17}, [r2], r4
   1782c:	vld1.64	{d18-d19}, [lr]
   17830:	add	r3, sp, #48	; 0x30
   17834:	add	r4, r3, #4
   17838:	vld1.32	{d20-d21}, [r2]
   1783c:	add	r2, r3, #20
   17840:	vst1.32	{d16-d17}, [r4]
   17844:	vst1.32	{d18-d19}, [r2]
   17848:	add	r2, r3, #32
   1784c:	vst1.32	{d20-d21}, [r2]
   17850:	str	r1, [sp, #48]	; 0x30
   17854:	mvn	r2, #0
   17858:	ldr	r1, [sp, #60]	; 0x3c
   1785c:	orr	r1, r1, #67108864	; 0x4000000
   17860:	str	r1, [sp, #60]	; 0x3c
   17864:	mov	r1, ip
   17868:	bl	172fc <__assert_fail@plt+0x5fc8>
   1786c:	sub	sp, fp, #8
   17870:	pop	{r4, sl, fp, pc}
   17874:	bl	1131c <abort@plt>
   17878:	push	{r4, r5, fp, lr}
   1787c:	add	fp, sp, #8
   17880:	sub	sp, sp, #48	; 0x30
   17884:	mov	ip, r3
   17888:	movw	r3, #49728	; 0xc240
   1788c:	mov	lr, #32
   17890:	cmp	r1, #0
   17894:	mov	r5, sp
   17898:	movt	r3, #2
   1789c:	cmpne	r2, #0
   178a0:	add	r4, r3, #16
   178a4:	vld1.64	{d16-d17}, [r3], lr
   178a8:	vld1.64	{d18-d19}, [r4]
   178ac:	add	r4, r5, #16
   178b0:	vld1.64	{d20-d21}, [r3]
   178b4:	vst1.64	{d16-d17}, [r5], lr
   178b8:	mov	r3, #10
   178bc:	vst1.64	{d18-d19}, [r4]
   178c0:	vst1.64	{d20-d21}, [r5]
   178c4:	str	r3, [sp]
   178c8:	bne	178d0 <__assert_fail@plt+0x659c>
   178cc:	bl	1131c <abort@plt>
   178d0:	str	r2, [sp, #44]	; 0x2c
   178d4:	str	r1, [sp, #40]	; 0x28
   178d8:	mov	r3, sp
   178dc:	mov	r1, ip
   178e0:	mvn	r2, #0
   178e4:	bl	172fc <__assert_fail@plt+0x5fc8>
   178e8:	sub	sp, fp, #8
   178ec:	pop	{r4, r5, fp, pc}
   178f0:	push	{r4, r5, fp, lr}
   178f4:	add	fp, sp, #8
   178f8:	sub	sp, sp, #48	; 0x30
   178fc:	mov	lr, r3
   17900:	movw	r3, #49728	; 0xc240
   17904:	mov	ip, #32
   17908:	cmp	r1, #0
   1790c:	mov	r5, sp
   17910:	movt	r3, #2
   17914:	cmpne	r2, #0
   17918:	add	r4, r3, #16
   1791c:	vld1.64	{d16-d17}, [r3], ip
   17920:	vld1.64	{d18-d19}, [r4]
   17924:	add	r4, r5, #16
   17928:	vld1.64	{d20-d21}, [r3]
   1792c:	vst1.64	{d16-d17}, [r5], ip
   17930:	mov	r3, #10
   17934:	vst1.64	{d18-d19}, [r4]
   17938:	vst1.64	{d20-d21}, [r5]
   1793c:	str	r3, [sp]
   17940:	bne	17948 <__assert_fail@plt+0x6614>
   17944:	bl	1131c <abort@plt>
   17948:	ldr	ip, [fp, #8]
   1794c:	str	r2, [sp, #44]	; 0x2c
   17950:	str	r1, [sp, #40]	; 0x28
   17954:	mov	r3, sp
   17958:	mov	r1, lr
   1795c:	mov	r2, ip
   17960:	bl	172fc <__assert_fail@plt+0x5fc8>
   17964:	sub	sp, fp, #8
   17968:	pop	{r4, r5, fp, pc}
   1796c:	push	{r4, sl, fp, lr}
   17970:	add	fp, sp, #8
   17974:	sub	sp, sp, #48	; 0x30
   17978:	mov	ip, r2
   1797c:	movw	r2, #49728	; 0xc240
   17980:	mov	lr, #32
   17984:	cmp	r0, #0
   17988:	mov	r4, sp
   1798c:	movt	r2, #2
   17990:	cmpne	r1, #0
   17994:	add	r3, r2, #16
   17998:	vld1.64	{d16-d17}, [r2], lr
   1799c:	vld1.64	{d18-d19}, [r3]
   179a0:	add	r3, r4, #16
   179a4:	vld1.64	{d20-d21}, [r2]
   179a8:	vst1.64	{d16-d17}, [r4], lr
   179ac:	mov	r2, #10
   179b0:	vst1.64	{d18-d19}, [r3]
   179b4:	vst1.64	{d20-d21}, [r4]
   179b8:	str	r2, [sp]
   179bc:	bne	179c4 <__assert_fail@plt+0x6690>
   179c0:	bl	1131c <abort@plt>
   179c4:	str	r1, [sp, #44]	; 0x2c
   179c8:	str	r0, [sp, #40]	; 0x28
   179cc:	mov	r3, sp
   179d0:	mov	r0, #0
   179d4:	mov	r1, ip
   179d8:	mvn	r2, #0
   179dc:	bl	172fc <__assert_fail@plt+0x5fc8>
   179e0:	sub	sp, fp, #8
   179e4:	pop	{r4, sl, fp, pc}
   179e8:	push	{r4, r5, fp, lr}
   179ec:	add	fp, sp, #8
   179f0:	sub	sp, sp, #48	; 0x30
   179f4:	mov	lr, r2
   179f8:	movw	r2, #49728	; 0xc240
   179fc:	mov	ip, r3
   17a00:	mov	r3, #32
   17a04:	cmp	r0, #0
   17a08:	mov	r5, sp
   17a0c:	movt	r2, #2
   17a10:	cmpne	r1, #0
   17a14:	add	r4, r2, #16
   17a18:	vld1.64	{d16-d17}, [r2], r3
   17a1c:	vld1.64	{d18-d19}, [r4]
   17a20:	add	r4, r5, #16
   17a24:	vld1.64	{d20-d21}, [r2]
   17a28:	vst1.64	{d16-d17}, [r5], r3
   17a2c:	mov	r2, #10
   17a30:	vst1.64	{d18-d19}, [r4]
   17a34:	vst1.64	{d20-d21}, [r5]
   17a38:	str	r2, [sp]
   17a3c:	bne	17a44 <__assert_fail@plt+0x6710>
   17a40:	bl	1131c <abort@plt>
   17a44:	str	r1, [sp, #44]	; 0x2c
   17a48:	str	r0, [sp, #40]	; 0x28
   17a4c:	mov	r3, sp
   17a50:	mov	r0, #0
   17a54:	mov	r1, lr
   17a58:	mov	r2, ip
   17a5c:	bl	172fc <__assert_fail@plt+0x5fc8>
   17a60:	sub	sp, fp, #8
   17a64:	pop	{r4, r5, fp, pc}
   17a68:	movw	r3, #49448	; 0xc128
   17a6c:	movt	r3, #2
   17a70:	b	172fc <__assert_fail@plt+0x5fc8>
   17a74:	movw	r3, #49448	; 0xc128
   17a78:	mov	r2, r1
   17a7c:	mov	r1, r0
   17a80:	mov	r0, #0
   17a84:	movt	r3, #2
   17a88:	b	172fc <__assert_fail@plt+0x5fc8>
   17a8c:	movw	r3, #49448	; 0xc128
   17a90:	mvn	r2, #0
   17a94:	movt	r3, #2
   17a98:	b	172fc <__assert_fail@plt+0x5fc8>
   17a9c:	movw	r3, #49448	; 0xc128
   17aa0:	mov	r1, r0
   17aa4:	mov	r0, #0
   17aa8:	mvn	r2, #0
   17aac:	movt	r3, #2
   17ab0:	b	172fc <__assert_fail@plt+0x5fc8>
   17ab4:	push	{r4, r5, fp, lr}
   17ab8:	add	fp, sp, #8
   17abc:	mov	r5, r0
   17ac0:	mov	r4, r1
   17ac4:	mov	r0, #0
   17ac8:	mov	r2, #5
   17acc:	mov	r1, r5
   17ad0:	bl	1110c <dcgettext@plt>
   17ad4:	cmp	r0, r5
   17ad8:	popne	{r4, r5, fp, pc}
   17adc:	bl	19938 <__assert_fail@plt+0x8604>
   17ae0:	ldrb	r1, [r0]
   17ae4:	and	r1, r1, #223	; 0xdf
   17ae8:	cmp	r1, #71	; 0x47
   17aec:	beq	17b54 <__assert_fail@plt+0x6820>
   17af0:	cmp	r1, #85	; 0x55
   17af4:	bne	17b78 <__assert_fail@plt+0x6844>
   17af8:	ldrb	r1, [r0, #1]
   17afc:	and	r1, r1, #223	; 0xdf
   17b00:	cmp	r1, #84	; 0x54
   17b04:	bne	17b78 <__assert_fail@plt+0x6844>
   17b08:	ldrb	r1, [r0, #2]
   17b0c:	and	r1, r1, #223	; 0xdf
   17b10:	cmp	r1, #70	; 0x46
   17b14:	ldrbeq	r1, [r0, #3]
   17b18:	cmpeq	r1, #45	; 0x2d
   17b1c:	bne	17b78 <__assert_fail@plt+0x6844>
   17b20:	ldrb	r1, [r0, #4]
   17b24:	cmp	r1, #56	; 0x38
   17b28:	ldrbeq	r0, [r0, #5]
   17b2c:	cmpeq	r0, #0
   17b30:	bne	17b78 <__assert_fail@plt+0x6844>
   17b34:	ldrb	r1, [r5]
   17b38:	movw	r2, #46236	; 0xb49c
   17b3c:	movw	r0, #46240	; 0xb4a0
   17b40:	movt	r2, #1
   17b44:	movt	r0, #1
   17b48:	cmp	r1, #96	; 0x60
   17b4c:	moveq	r0, r2
   17b50:	pop	{r4, r5, fp, pc}
   17b54:	ldrb	r1, [r0, #1]
   17b58:	and	r1, r1, #223	; 0xdf
   17b5c:	cmp	r1, #66	; 0x42
   17b60:	bne	17b78 <__assert_fail@plt+0x6844>
   17b64:	ldrb	r1, [r0, #2]
   17b68:	cmp	r1, #49	; 0x31
   17b6c:	ldrbeq	r1, [r0, #3]
   17b70:	cmpeq	r1, #56	; 0x38
   17b74:	beq	17b94 <__assert_fail@plt+0x6860>
   17b78:	movw	r1, #46232	; 0xb498
   17b7c:	movw	r0, #47197	; 0xb85d
   17b80:	cmp	r4, #9
   17b84:	movt	r1, #1
   17b88:	movt	r0, #1
   17b8c:	moveq	r0, r1
   17b90:	pop	{r4, r5, fp, pc}
   17b94:	ldrb	r1, [r0, #4]
   17b98:	cmp	r1, #48	; 0x30
   17b9c:	ldrbeq	r1, [r0, #5]
   17ba0:	cmpeq	r1, #51	; 0x33
   17ba4:	bne	17b78 <__assert_fail@plt+0x6844>
   17ba8:	ldrb	r1, [r0, #6]
   17bac:	cmp	r1, #48	; 0x30
   17bb0:	ldrbeq	r0, [r0, #7]
   17bb4:	cmpeq	r0, #0
   17bb8:	bne	17b78 <__assert_fail@plt+0x6844>
   17bbc:	ldrb	r1, [r5]
   17bc0:	movw	r2, #46244	; 0xb4a4
   17bc4:	movw	r0, #46248	; 0xb4a8
   17bc8:	movt	r2, #1
   17bcc:	movt	r0, #1
   17bd0:	b	17b48 <__assert_fail@plt+0x6814>
   17bd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17bd8:	add	fp, sp, #24
   17bdc:	sub	sp, sp, #32
   17be0:	ldr	r6, [fp, #12]
   17be4:	ldr	r7, [fp, #8]
   17be8:	mov	r4, r2
   17bec:	mov	r8, r0
   17bf0:	cmp	r1, #0
   17bf4:	beq	17c1c <__assert_fail@plt+0x68e8>
   17bf8:	movw	r2, #46336	; 0xb500
   17bfc:	mov	r5, r1
   17c00:	str	r3, [sp, #4]
   17c04:	str	r4, [sp]
   17c08:	mov	r0, r8
   17c0c:	mov	r1, #1
   17c10:	movt	r2, #1
   17c14:	mov	r3, r5
   17c18:	b	17c34 <__assert_fail@plt+0x6900>
   17c1c:	movw	r2, #46348	; 0xb50c
   17c20:	str	r3, [sp]
   17c24:	mov	r0, r8
   17c28:	mov	r1, #1
   17c2c:	mov	r3, r4
   17c30:	movt	r2, #1
   17c34:	bl	11280 <__fprintf_chk@plt>
   17c38:	movw	r1, #46355	; 0xb513
   17c3c:	mov	r0, #0
   17c40:	mov	r2, #5
   17c44:	movt	r1, #1
   17c48:	bl	1110c <dcgettext@plt>
   17c4c:	movw	r2, #47073	; 0xb7e1
   17c50:	mov	r3, r0
   17c54:	movw	r0, #2022	; 0x7e6
   17c58:	mov	r1, #1
   17c5c:	str	r0, [sp]
   17c60:	movt	r2, #1
   17c64:	mov	r0, r8
   17c68:	bl	11280 <__fprintf_chk@plt>
   17c6c:	movw	r4, #44334	; 0xad2e
   17c70:	mov	r1, r8
   17c74:	movt	r4, #1
   17c78:	mov	r0, r4
   17c7c:	bl	1107c <fputs_unlocked@plt>
   17c80:	movw	r1, #46359	; 0xb517
   17c84:	mov	r0, #0
   17c88:	mov	r2, #5
   17c8c:	movt	r1, #1
   17c90:	bl	1110c <dcgettext@plt>
   17c94:	movw	r3, #46530	; 0xb5c2
   17c98:	mov	r2, r0
   17c9c:	mov	r0, r8
   17ca0:	mov	r1, #1
   17ca4:	movt	r3, #1
   17ca8:	bl	11280 <__fprintf_chk@plt>
   17cac:	mov	r0, r4
   17cb0:	mov	r1, r8
   17cb4:	bl	1107c <fputs_unlocked@plt>
   17cb8:	cmp	r6, #9
   17cbc:	bhi	17cf8 <__assert_fail@plt+0x69c4>
   17cc0:	add	r0, pc, #0
   17cc4:	ldr	pc, [r0, r6, lsl #2]
   17cc8:	strdeq	r7, [r1], -r0
   17ccc:	andeq	r7, r1, r4, lsl #26
   17cd0:	andeq	r7, r1, r4, lsr sp
   17cd4:	andeq	r7, r1, ip, asr sp
   17cd8:	andeq	r7, r1, r4, lsl #27
   17cdc:	andeq	r7, r1, ip, lsr #27
   17ce0:	ldrdeq	r7, [r1], -r4
   17ce4:	andeq	r7, r1, ip, lsl #28
   17ce8:	andeq	r7, r1, ip, lsr #29
   17cec:	andeq	r7, r1, r4, asr lr
   17cf0:	sub	sp, fp, #24
   17cf4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17cf8:	movw	r1, #46883	; 0xb723
   17cfc:	movt	r1, #1
   17d00:	b	17e5c <__assert_fail@plt+0x6b28>
   17d04:	movw	r1, #46564	; 0xb5e4
   17d08:	mov	r0, #0
   17d0c:	mov	r2, #5
   17d10:	movt	r1, #1
   17d14:	bl	1110c <dcgettext@plt>
   17d18:	ldr	r3, [r7]
   17d1c:	mov	r2, r0
   17d20:	mov	r0, r8
   17d24:	mov	r1, #1
   17d28:	sub	sp, fp, #24
   17d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17d30:	b	11280 <__fprintf_chk@plt>
   17d34:	movw	r1, #46580	; 0xb5f4
   17d38:	mov	r0, #0
   17d3c:	mov	r2, #5
   17d40:	movt	r1, #1
   17d44:	bl	1110c <dcgettext@plt>
   17d48:	mov	r2, r0
   17d4c:	ldr	r3, [r7]
   17d50:	ldr	r0, [r7, #4]
   17d54:	str	r0, [sp]
   17d58:	b	17e48 <__assert_fail@plt+0x6b14>
   17d5c:	movw	r1, #46603	; 0xb60b
   17d60:	mov	r0, #0
   17d64:	mov	r2, #5
   17d68:	movt	r1, #1
   17d6c:	bl	1110c <dcgettext@plt>
   17d70:	ldr	r3, [r7]
   17d74:	mov	r2, r0
   17d78:	ldmib	r7, {r0, r1}
   17d7c:	stm	sp, {r0, r1}
   17d80:	b	17e48 <__assert_fail@plt+0x6b14>
   17d84:	movw	r1, #46631	; 0xb627
   17d88:	mov	r0, #0
   17d8c:	mov	r2, #5
   17d90:	movt	r1, #1
   17d94:	bl	1110c <dcgettext@plt>
   17d98:	ldr	r3, [r7]
   17d9c:	mov	r2, r0
   17da0:	ldmib	r7, {r0, r1, r7}
   17da4:	stm	sp, {r0, r1, r7}
   17da8:	b	17e48 <__assert_fail@plt+0x6b14>
   17dac:	movw	r1, #46663	; 0xb647
   17db0:	mov	r0, #0
   17db4:	mov	r2, #5
   17db8:	movt	r1, #1
   17dbc:	bl	1110c <dcgettext@plt>
   17dc0:	ldr	r3, [r7]
   17dc4:	mov	r2, r0
   17dc8:	ldmib	r7, {r0, r1, r6, r7}
   17dcc:	stm	sp, {r0, r1, r6, r7}
   17dd0:	b	17e48 <__assert_fail@plt+0x6b14>
   17dd4:	movw	r1, #46699	; 0xb66b
   17dd8:	mov	r0, #0
   17ddc:	mov	r2, #5
   17de0:	movt	r1, #1
   17de4:	bl	1110c <dcgettext@plt>
   17de8:	ldr	r3, [r7]
   17dec:	mov	r2, r0
   17df0:	ldmib	r7, {r0, r1, r6}
   17df4:	ldr	r5, [r7, #16]
   17df8:	ldr	r7, [r7, #20]
   17dfc:	stm	sp, {r0, r1, r6}
   17e00:	str	r5, [sp, #12]
   17e04:	str	r7, [sp, #16]
   17e08:	b	17e48 <__assert_fail@plt+0x6b14>
   17e0c:	movw	r1, #46739	; 0xb693
   17e10:	mov	r0, #0
   17e14:	mov	r2, #5
   17e18:	movt	r1, #1
   17e1c:	bl	1110c <dcgettext@plt>
   17e20:	ldr	r3, [r7]
   17e24:	mov	r2, r0
   17e28:	ldmib	r7, {r0, r1, r6}
   17e2c:	ldr	r5, [r7, #16]
   17e30:	ldr	r4, [r7, #20]
   17e34:	ldr	r7, [r7, #24]
   17e38:	stm	sp, {r0, r1, r6}
   17e3c:	str	r5, [sp, #12]
   17e40:	str	r4, [sp, #16]
   17e44:	str	r7, [sp, #20]
   17e48:	mov	r0, r8
   17e4c:	mov	r1, #1
   17e50:	b	17efc <__assert_fail@plt+0x6bc8>
   17e54:	movw	r1, #46831	; 0xb6ef
   17e58:	movt	r1, #1
   17e5c:	mov	r0, #0
   17e60:	mov	r2, #5
   17e64:	bl	1110c <dcgettext@plt>
   17e68:	mov	ip, r0
   17e6c:	ldr	r3, [r7]
   17e70:	ldr	r0, [r7, #4]
   17e74:	ldr	r1, [r7, #8]
   17e78:	ldr	r6, [r7, #12]
   17e7c:	ldr	r5, [r7, #16]
   17e80:	ldr	r4, [r7, #20]
   17e84:	ldr	r2, [r7, #24]
   17e88:	ldr	lr, [r7, #28]
   17e8c:	ldr	r7, [r7, #32]
   17e90:	stm	sp, {r0, r1, r6}
   17e94:	str	r5, [sp, #12]
   17e98:	str	r4, [sp, #16]
   17e9c:	str	r2, [sp, #20]
   17ea0:	str	lr, [sp, #24]
   17ea4:	str	r7, [sp, #28]
   17ea8:	b	17ef0 <__assert_fail@plt+0x6bbc>
   17eac:	movw	r1, #46783	; 0xb6bf
   17eb0:	mov	r0, #0
   17eb4:	mov	r2, #5
   17eb8:	movt	r1, #1
   17ebc:	bl	1110c <dcgettext@plt>
   17ec0:	mov	ip, r0
   17ec4:	ldr	r3, [r7]
   17ec8:	ldmib	r7, {r0, r1, r6}
   17ecc:	ldr	r5, [r7, #16]
   17ed0:	ldr	r4, [r7, #20]
   17ed4:	ldr	r2, [r7, #24]
   17ed8:	ldr	r7, [r7, #28]
   17edc:	stm	sp, {r0, r1, r6}
   17ee0:	str	r5, [sp, #12]
   17ee4:	str	r4, [sp, #16]
   17ee8:	str	r2, [sp, #20]
   17eec:	str	r7, [sp, #24]
   17ef0:	mov	r0, r8
   17ef4:	mov	r1, #1
   17ef8:	mov	r2, ip
   17efc:	bl	11280 <__fprintf_chk@plt>
   17f00:	sub	sp, fp, #24
   17f04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f08:	push	{r4, sl, fp, lr}
   17f0c:	add	fp, sp, #8
   17f10:	sub	sp, sp, #8
   17f14:	ldr	ip, [fp, #8]
   17f18:	mov	lr, #0
   17f1c:	ldr	r4, [ip, lr, lsl #2]
   17f20:	add	lr, lr, #1
   17f24:	cmp	r4, #0
   17f28:	bne	17f1c <__assert_fail@plt+0x6be8>
   17f2c:	sub	r4, lr, #1
   17f30:	str	ip, [sp]
   17f34:	str	r4, [sp, #4]
   17f38:	bl	17bd4 <__assert_fail@plt+0x68a0>
   17f3c:	sub	sp, fp, #8
   17f40:	pop	{r4, sl, fp, pc}
   17f44:	push	{fp, lr}
   17f48:	mov	fp, sp
   17f4c:	sub	sp, sp, #48	; 0x30
   17f50:	ldr	ip, [fp, #8]
   17f54:	ldr	lr, [ip]
   17f58:	cmp	lr, #0
   17f5c:	str	lr, [sp, #8]
   17f60:	beq	17ffc <__assert_fail@plt+0x6cc8>
   17f64:	ldr	lr, [ip, #4]
   17f68:	cmp	lr, #0
   17f6c:	str	lr, [sp, #12]
   17f70:	beq	18004 <__assert_fail@plt+0x6cd0>
   17f74:	ldr	lr, [ip, #8]
   17f78:	cmp	lr, #0
   17f7c:	str	lr, [sp, #16]
   17f80:	beq	1800c <__assert_fail@plt+0x6cd8>
   17f84:	ldr	lr, [ip, #12]
   17f88:	cmp	lr, #0
   17f8c:	str	lr, [sp, #20]
   17f90:	beq	18014 <__assert_fail@plt+0x6ce0>
   17f94:	ldr	lr, [ip, #16]
   17f98:	cmp	lr, #0
   17f9c:	str	lr, [sp, #24]
   17fa0:	beq	1801c <__assert_fail@plt+0x6ce8>
   17fa4:	ldr	lr, [ip, #20]
   17fa8:	cmp	lr, #0
   17fac:	str	lr, [sp, #28]
   17fb0:	beq	18024 <__assert_fail@plt+0x6cf0>
   17fb4:	ldr	lr, [ip, #24]
   17fb8:	cmp	lr, #0
   17fbc:	str	lr, [sp, #32]
   17fc0:	beq	1802c <__assert_fail@plt+0x6cf8>
   17fc4:	ldr	lr, [ip, #28]
   17fc8:	cmp	lr, #0
   17fcc:	str	lr, [sp, #36]	; 0x24
   17fd0:	beq	18034 <__assert_fail@plt+0x6d00>
   17fd4:	ldr	lr, [ip, #32]
   17fd8:	cmp	lr, #0
   17fdc:	str	lr, [sp, #40]	; 0x28
   17fe0:	beq	1803c <__assert_fail@plt+0x6d08>
   17fe4:	ldr	lr, [ip, #36]	; 0x24
   17fe8:	mov	ip, #10
   17fec:	cmp	lr, #0
   17ff0:	str	lr, [sp, #44]	; 0x2c
   17ff4:	movweq	ip, #9
   17ff8:	b	18040 <__assert_fail@plt+0x6d0c>
   17ffc:	mov	ip, #0
   18000:	b	18040 <__assert_fail@plt+0x6d0c>
   18004:	mov	ip, #1
   18008:	b	18040 <__assert_fail@plt+0x6d0c>
   1800c:	mov	ip, #2
   18010:	b	18040 <__assert_fail@plt+0x6d0c>
   18014:	mov	ip, #3
   18018:	b	18040 <__assert_fail@plt+0x6d0c>
   1801c:	mov	ip, #4
   18020:	b	18040 <__assert_fail@plt+0x6d0c>
   18024:	mov	ip, #5
   18028:	b	18040 <__assert_fail@plt+0x6d0c>
   1802c:	mov	ip, #6
   18030:	b	18040 <__assert_fail@plt+0x6d0c>
   18034:	mov	ip, #7
   18038:	b	18040 <__assert_fail@plt+0x6d0c>
   1803c:	mov	ip, #8
   18040:	add	lr, sp, #8
   18044:	str	ip, [sp, #4]
   18048:	str	lr, [sp]
   1804c:	bl	17bd4 <__assert_fail@plt+0x68a0>
   18050:	mov	sp, fp
   18054:	pop	{fp, pc}
   18058:	push	{fp, lr}
   1805c:	mov	fp, sp
   18060:	sub	sp, sp, #56	; 0x38
   18064:	add	ip, fp, #8
   18068:	str	ip, [sp, #12]
   1806c:	ldr	lr, [fp, #8]
   18070:	cmp	lr, #0
   18074:	str	lr, [sp, #16]
   18078:	beq	18114 <__assert_fail@plt+0x6de0>
   1807c:	ldr	lr, [ip, #4]
   18080:	cmp	lr, #0
   18084:	str	lr, [sp, #20]
   18088:	beq	1811c <__assert_fail@plt+0x6de8>
   1808c:	ldr	lr, [ip, #8]
   18090:	cmp	lr, #0
   18094:	str	lr, [sp, #24]
   18098:	beq	18124 <__assert_fail@plt+0x6df0>
   1809c:	ldr	lr, [ip, #12]
   180a0:	cmp	lr, #0
   180a4:	str	lr, [sp, #28]
   180a8:	beq	1812c <__assert_fail@plt+0x6df8>
   180ac:	ldr	lr, [ip, #16]
   180b0:	cmp	lr, #0
   180b4:	str	lr, [sp, #32]
   180b8:	beq	18134 <__assert_fail@plt+0x6e00>
   180bc:	ldr	lr, [ip, #20]
   180c0:	cmp	lr, #0
   180c4:	str	lr, [sp, #36]	; 0x24
   180c8:	beq	1813c <__assert_fail@plt+0x6e08>
   180cc:	ldr	lr, [ip, #24]
   180d0:	cmp	lr, #0
   180d4:	str	lr, [sp, #40]	; 0x28
   180d8:	beq	18144 <__assert_fail@plt+0x6e10>
   180dc:	ldr	lr, [ip, #28]
   180e0:	cmp	lr, #0
   180e4:	str	lr, [sp, #44]	; 0x2c
   180e8:	beq	1814c <__assert_fail@plt+0x6e18>
   180ec:	ldr	lr, [ip, #32]
   180f0:	cmp	lr, #0
   180f4:	str	lr, [sp, #48]	; 0x30
   180f8:	beq	18154 <__assert_fail@plt+0x6e20>
   180fc:	ldr	lr, [ip, #36]	; 0x24
   18100:	mov	ip, #10
   18104:	cmp	lr, #0
   18108:	str	lr, [sp, #52]	; 0x34
   1810c:	movweq	ip, #9
   18110:	b	18158 <__assert_fail@plt+0x6e24>
   18114:	mov	ip, #0
   18118:	b	18158 <__assert_fail@plt+0x6e24>
   1811c:	mov	ip, #1
   18120:	b	18158 <__assert_fail@plt+0x6e24>
   18124:	mov	ip, #2
   18128:	b	18158 <__assert_fail@plt+0x6e24>
   1812c:	mov	ip, #3
   18130:	b	18158 <__assert_fail@plt+0x6e24>
   18134:	mov	ip, #4
   18138:	b	18158 <__assert_fail@plt+0x6e24>
   1813c:	mov	ip, #5
   18140:	b	18158 <__assert_fail@plt+0x6e24>
   18144:	mov	ip, #6
   18148:	b	18158 <__assert_fail@plt+0x6e24>
   1814c:	mov	ip, #7
   18150:	b	18158 <__assert_fail@plt+0x6e24>
   18154:	mov	ip, #8
   18158:	add	lr, sp, #16
   1815c:	str	ip, [sp, #4]
   18160:	str	lr, [sp]
   18164:	bl	17bd4 <__assert_fail@plt+0x68a0>
   18168:	mov	sp, fp
   1816c:	pop	{fp, pc}
   18170:	push	{fp, lr}
   18174:	mov	fp, sp
   18178:	movw	r0, #49524	; 0xc174
   1817c:	movt	r0, #2
   18180:	ldr	r1, [r0]
   18184:	movw	r0, #44334	; 0xad2e
   18188:	movt	r0, #1
   1818c:	bl	1107c <fputs_unlocked@plt>
   18190:	movw	r1, #46943	; 0xb75f
   18194:	mov	r0, #0
   18198:	mov	r2, #5
   1819c:	movt	r1, #1
   181a0:	bl	1110c <dcgettext@plt>
   181a4:	movw	r2, #46963	; 0xb773
   181a8:	mov	r1, r0
   181ac:	mov	r0, #1
   181b0:	movt	r2, #1
   181b4:	bl	1125c <__printf_chk@plt>
   181b8:	movw	r1, #46985	; 0xb789
   181bc:	mov	r0, #0
   181c0:	mov	r2, #5
   181c4:	movt	r1, #1
   181c8:	bl	1110c <dcgettext@plt>
   181cc:	movw	r2, #43659	; 0xaa8b
   181d0:	movw	r3, #44143	; 0xac6f
   181d4:	mov	r1, r0
   181d8:	mov	r0, #1
   181dc:	movt	r2, #1
   181e0:	movt	r3, #1
   181e4:	bl	1125c <__printf_chk@plt>
   181e8:	movw	r1, #47005	; 0xb79d
   181ec:	mov	r0, #0
   181f0:	mov	r2, #5
   181f4:	movt	r1, #1
   181f8:	bl	1110c <dcgettext@plt>
   181fc:	movw	r2, #47044	; 0xb7c4
   18200:	mov	r1, r0
   18204:	mov	r0, #1
   18208:	movt	r2, #1
   1820c:	pop	{fp, lr}
   18210:	b	1125c <__printf_chk@plt>
   18214:	push	{r4, r5, r6, sl, fp, lr}
   18218:	add	fp, sp, #16
   1821c:	mov	r4, r2
   18220:	mov	r5, r1
   18224:	mov	r6, r0
   18228:	bl	199d0 <__assert_fail@plt+0x869c>
   1822c:	cmp	r0, #0
   18230:	popne	{r4, r5, r6, sl, fp, pc}
   18234:	cmp	r6, #0
   18238:	beq	1824c <__assert_fail@plt+0x6f18>
   1823c:	cmp	r5, #0
   18240:	cmpne	r4, #0
   18244:	bne	1824c <__assert_fail@plt+0x6f18>
   18248:	pop	{r4, r5, r6, sl, fp, pc}
   1824c:	bl	187ec <__assert_fail@plt+0x74b8>
   18250:	push	{r4, r5, r6, sl, fp, lr}
   18254:	add	fp, sp, #16
   18258:	mov	r4, r2
   1825c:	mov	r5, r1
   18260:	mov	r6, r0
   18264:	bl	199d0 <__assert_fail@plt+0x869c>
   18268:	cmp	r0, #0
   1826c:	popne	{r4, r5, r6, sl, fp, pc}
   18270:	cmp	r6, #0
   18274:	beq	18288 <__assert_fail@plt+0x6f54>
   18278:	cmp	r5, #0
   1827c:	cmpne	r4, #0
   18280:	bne	18288 <__assert_fail@plt+0x6f54>
   18284:	pop	{r4, r5, r6, sl, fp, pc}
   18288:	bl	187ec <__assert_fail@plt+0x74b8>
   1828c:	push	{fp, lr}
   18290:	mov	fp, sp
   18294:	bl	19830 <__assert_fail@plt+0x84fc>
   18298:	cmp	r0, #0
   1829c:	popne	{fp, pc}
   182a0:	bl	187ec <__assert_fail@plt+0x74b8>
   182a4:	push	{fp, lr}
   182a8:	mov	fp, sp
   182ac:	bl	19830 <__assert_fail@plt+0x84fc>
   182b0:	cmp	r0, #0
   182b4:	popne	{fp, pc}
   182b8:	bl	187ec <__assert_fail@plt+0x74b8>
   182bc:	push	{fp, lr}
   182c0:	mov	fp, sp
   182c4:	bl	19830 <__assert_fail@plt+0x84fc>
   182c8:	cmp	r0, #0
   182cc:	popne	{fp, pc}
   182d0:	bl	187ec <__assert_fail@plt+0x74b8>
   182d4:	push	{r4, r5, fp, lr}
   182d8:	add	fp, sp, #8
   182dc:	mov	r4, r1
   182e0:	mov	r5, r0
   182e4:	bl	19860 <__assert_fail@plt+0x852c>
   182e8:	cmp	r0, #0
   182ec:	popne	{r4, r5, fp, pc}
   182f0:	cmp	r5, #0
   182f4:	beq	18304 <__assert_fail@plt+0x6fd0>
   182f8:	cmp	r4, #0
   182fc:	bne	18304 <__assert_fail@plt+0x6fd0>
   18300:	pop	{r4, r5, fp, pc}
   18304:	bl	187ec <__assert_fail@plt+0x74b8>
   18308:	push	{fp, lr}
   1830c:	mov	fp, sp
   18310:	cmp	r1, #0
   18314:	orreq	r1, r1, #1
   18318:	bl	19860 <__assert_fail@plt+0x852c>
   1831c:	cmp	r0, #0
   18320:	popne	{fp, pc}
   18324:	bl	187ec <__assert_fail@plt+0x74b8>
   18328:	push	{fp, lr}
   1832c:	mov	fp, sp
   18330:	clz	r3, r2
   18334:	lsr	ip, r3, #5
   18338:	clz	r3, r1
   1833c:	lsr	r3, r3, #5
   18340:	orrs	r3, r3, ip
   18344:	movwne	r1, #1
   18348:	movwne	r2, #1
   1834c:	bl	199d0 <__assert_fail@plt+0x869c>
   18350:	cmp	r0, #0
   18354:	popne	{fp, pc}
   18358:	bl	187ec <__assert_fail@plt+0x74b8>
   1835c:	push	{fp, lr}
   18360:	mov	fp, sp
   18364:	mov	r2, r1
   18368:	mov	r1, r0
   1836c:	mov	r0, #0
   18370:	bl	199d0 <__assert_fail@plt+0x869c>
   18374:	cmp	r0, #0
   18378:	popne	{fp, pc}
   1837c:	bl	187ec <__assert_fail@plt+0x74b8>
   18380:	push	{fp, lr}
   18384:	mov	fp, sp
   18388:	mov	r2, r1
   1838c:	mov	r1, r0
   18390:	clz	r0, r2
   18394:	clz	r3, r1
   18398:	lsr	r0, r0, #5
   1839c:	lsr	r3, r3, #5
   183a0:	orrs	r0, r3, r0
   183a4:	movwne	r1, #1
   183a8:	movwne	r2, #1
   183ac:	mov	r0, #0
   183b0:	bl	199d0 <__assert_fail@plt+0x869c>
   183b4:	cmp	r0, #0
   183b8:	popne	{fp, pc}
   183bc:	bl	187ec <__assert_fail@plt+0x74b8>
   183c0:	push	{r4, r5, r6, sl, fp, lr}
   183c4:	add	fp, sp, #16
   183c8:	ldr	r5, [r1]
   183cc:	mov	r4, r1
   183d0:	mov	r6, r0
   183d4:	cmp	r0, #0
   183d8:	beq	183f0 <__assert_fail@plt+0x70bc>
   183dc:	mov	r0, #1
   183e0:	add	r0, r0, r5, lsr #1
   183e4:	adds	r5, r5, r0
   183e8:	bcc	183f8 <__assert_fail@plt+0x70c4>
   183ec:	b	18434 <__assert_fail@plt+0x7100>
   183f0:	cmp	r5, #0
   183f4:	movweq	r5, #64	; 0x40
   183f8:	mov	r0, r6
   183fc:	mov	r1, r5
   18400:	mov	r2, #1
   18404:	bl	199d0 <__assert_fail@plt+0x869c>
   18408:	cmp	r5, #0
   1840c:	mov	r1, r5
   18410:	movwne	r1, #1
   18414:	cmp	r0, #0
   18418:	bne	1842c <__assert_fail@plt+0x70f8>
   1841c:	clz	r2, r6
   18420:	lsr	r2, r2, #5
   18424:	orrs	r1, r2, r1
   18428:	bne	18434 <__assert_fail@plt+0x7100>
   1842c:	str	r5, [r4]
   18430:	pop	{r4, r5, r6, sl, fp, pc}
   18434:	bl	187ec <__assert_fail@plt+0x74b8>
   18438:	push	{r4, r5, r6, r7, fp, lr}
   1843c:	add	fp, sp, #16
   18440:	ldr	r5, [r1]
   18444:	mov	r6, r2
   18448:	mov	r4, r1
   1844c:	mov	r7, r0
   18450:	cmp	r0, #0
   18454:	beq	1846c <__assert_fail@plt+0x7138>
   18458:	mov	r0, #1
   1845c:	add	r0, r0, r5, lsr #1
   18460:	adds	r5, r5, r0
   18464:	bcc	18484 <__assert_fail@plt+0x7150>
   18468:	b	184b8 <__assert_fail@plt+0x7184>
   1846c:	cmp	r5, #0
   18470:	bne	18484 <__assert_fail@plt+0x7150>
   18474:	mov	r0, #64	; 0x40
   18478:	cmp	r6, #64	; 0x40
   1847c:	udiv	r5, r0, r6
   18480:	addhi	r5, r5, #1
   18484:	mov	r0, r7
   18488:	mov	r1, r5
   1848c:	mov	r2, r6
   18490:	bl	199d0 <__assert_fail@plt+0x869c>
   18494:	cmp	r0, #0
   18498:	bne	184b0 <__assert_fail@plt+0x717c>
   1849c:	cmp	r7, #0
   184a0:	beq	184b8 <__assert_fail@plt+0x7184>
   184a4:	cmp	r6, #0
   184a8:	cmpne	r5, #0
   184ac:	bne	184b8 <__assert_fail@plt+0x7184>
   184b0:	str	r5, [r4]
   184b4:	pop	{r4, r5, r6, r7, fp, pc}
   184b8:	bl	187ec <__assert_fail@plt+0x74b8>
   184bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   184c0:	add	fp, sp, #24
   184c4:	mov	r8, r1
   184c8:	ldr	r1, [r1]
   184cc:	mov	r5, r0
   184d0:	add	r0, r1, r1, asr #1
   184d4:	cmp	r0, r1
   184d8:	mvnvs	r0, #-2147483648	; 0x80000000
   184dc:	cmp	r0, r3
   184e0:	mov	r7, r0
   184e4:	movgt	r7, r3
   184e8:	cmn	r3, #1
   184ec:	movle	r7, r0
   184f0:	ldr	r0, [fp, #8]
   184f4:	cmn	r0, #1
   184f8:	ble	18520 <__assert_fail@plt+0x71ec>
   184fc:	cmp	r0, #0
   18500:	beq	18574 <__assert_fail@plt+0x7240>
   18504:	cmn	r7, #1
   18508:	ble	18548 <__assert_fail@plt+0x7214>
   1850c:	mvn	r4, #-2147483648	; 0x80000000
   18510:	udiv	r6, r4, r0
   18514:	cmp	r6, r7
   18518:	bge	18574 <__assert_fail@plt+0x7240>
   1851c:	b	18584 <__assert_fail@plt+0x7250>
   18520:	cmn	r7, #1
   18524:	ble	18564 <__assert_fail@plt+0x7230>
   18528:	cmn	r0, #1
   1852c:	beq	18574 <__assert_fail@plt+0x7240>
   18530:	mov	r6, #-2147483648	; 0x80000000
   18534:	mvn	r4, #-2147483648	; 0x80000000
   18538:	sdiv	r6, r6, r0
   1853c:	cmp	r6, r7
   18540:	bge	18574 <__assert_fail@plt+0x7240>
   18544:	b	18584 <__assert_fail@plt+0x7250>
   18548:	beq	18574 <__assert_fail@plt+0x7240>
   1854c:	mov	r6, #-2147483648	; 0x80000000
   18550:	mvn	r4, #-2147483648	; 0x80000000
   18554:	sdiv	r6, r6, r7
   18558:	cmp	r6, r0
   1855c:	bge	18574 <__assert_fail@plt+0x7240>
   18560:	b	18584 <__assert_fail@plt+0x7250>
   18564:	mvn	r4, #-2147483648	; 0x80000000
   18568:	sdiv	r6, r4, r0
   1856c:	cmp	r7, r6
   18570:	blt	18584 <__assert_fail@plt+0x7250>
   18574:	mul	r6, r7, r0
   18578:	mov	r4, #64	; 0x40
   1857c:	cmp	r6, #63	; 0x3f
   18580:	bgt	1858c <__assert_fail@plt+0x7258>
   18584:	sdiv	r7, r4, r0
   18588:	mul	r6, r7, r0
   1858c:	cmp	r5, #0
   18590:	moveq	r4, #0
   18594:	streq	r4, [r8]
   18598:	sub	r4, r7, r1
   1859c:	cmp	r4, r2
   185a0:	bge	1864c <__assert_fail@plt+0x7318>
   185a4:	add	r7, r1, r2
   185a8:	mov	r6, #0
   185ac:	mov	r2, #0
   185b0:	cmp	r7, r3
   185b4:	movwgt	r6, #1
   185b8:	cmn	r3, #1
   185bc:	movwgt	r2, #1
   185c0:	cmp	r7, r1
   185c4:	bvs	18680 <__assert_fail@plt+0x734c>
   185c8:	ands	r1, r2, r6
   185cc:	bne	18680 <__assert_fail@plt+0x734c>
   185d0:	cmn	r0, #1
   185d4:	ble	185fc <__assert_fail@plt+0x72c8>
   185d8:	cmp	r0, #0
   185dc:	beq	18648 <__assert_fail@plt+0x7314>
   185e0:	cmn	r7, #1
   185e4:	ble	18620 <__assert_fail@plt+0x72ec>
   185e8:	mvn	r1, #-2147483648	; 0x80000000
   185ec:	udiv	r1, r1, r0
   185f0:	cmp	r1, r7
   185f4:	bge	18648 <__assert_fail@plt+0x7314>
   185f8:	b	18680 <__assert_fail@plt+0x734c>
   185fc:	cmn	r7, #1
   18600:	ble	18638 <__assert_fail@plt+0x7304>
   18604:	cmn	r0, #1
   18608:	beq	18648 <__assert_fail@plt+0x7314>
   1860c:	mov	r1, #-2147483648	; 0x80000000
   18610:	sdiv	r1, r1, r0
   18614:	cmp	r1, r7
   18618:	bge	18648 <__assert_fail@plt+0x7314>
   1861c:	b	18680 <__assert_fail@plt+0x734c>
   18620:	beq	18648 <__assert_fail@plt+0x7314>
   18624:	mov	r1, #-2147483648	; 0x80000000
   18628:	sdiv	r1, r1, r7
   1862c:	cmp	r1, r0
   18630:	bge	18648 <__assert_fail@plt+0x7314>
   18634:	b	18680 <__assert_fail@plt+0x734c>
   18638:	mvn	r1, #-2147483648	; 0x80000000
   1863c:	sdiv	r1, r1, r0
   18640:	cmp	r7, r1
   18644:	blt	18680 <__assert_fail@plt+0x734c>
   18648:	mul	r6, r7, r0
   1864c:	mov	r0, r5
   18650:	mov	r1, r6
   18654:	bl	19860 <__assert_fail@plt+0x852c>
   18658:	cmp	r6, #0
   1865c:	movwne	r6, #1
   18660:	cmp	r0, #0
   18664:	bne	18678 <__assert_fail@plt+0x7344>
   18668:	clz	r1, r5
   1866c:	lsr	r1, r1, #5
   18670:	orrs	r1, r1, r6
   18674:	bne	18680 <__assert_fail@plt+0x734c>
   18678:	str	r7, [r8]
   1867c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18680:	bl	187ec <__assert_fail@plt+0x74b8>
   18684:	push	{fp, lr}
   18688:	mov	fp, sp
   1868c:	mov	r1, #1
   18690:	bl	197dc <__assert_fail@plt+0x84a8>
   18694:	cmp	r0, #0
   18698:	popne	{fp, pc}
   1869c:	bl	187ec <__assert_fail@plt+0x74b8>
   186a0:	push	{fp, lr}
   186a4:	mov	fp, sp
   186a8:	bl	197dc <__assert_fail@plt+0x84a8>
   186ac:	cmp	r0, #0
   186b0:	popne	{fp, pc}
   186b4:	bl	187ec <__assert_fail@plt+0x74b8>
   186b8:	push	{fp, lr}
   186bc:	mov	fp, sp
   186c0:	mov	r1, #1
   186c4:	bl	197dc <__assert_fail@plt+0x84a8>
   186c8:	cmp	r0, #0
   186cc:	popne	{fp, pc}
   186d0:	bl	187ec <__assert_fail@plt+0x74b8>
   186d4:	push	{fp, lr}
   186d8:	mov	fp, sp
   186dc:	bl	197dc <__assert_fail@plt+0x84a8>
   186e0:	cmp	r0, #0
   186e4:	popne	{fp, pc}
   186e8:	bl	187ec <__assert_fail@plt+0x74b8>
   186ec:	push	{r4, r5, r6, sl, fp, lr}
   186f0:	add	fp, sp, #16
   186f4:	mov	r5, r0
   186f8:	mov	r0, r1
   186fc:	mov	r4, r1
   18700:	bl	19830 <__assert_fail@plt+0x84fc>
   18704:	cmp	r0, #0
   18708:	beq	18724 <__assert_fail@plt+0x73f0>
   1870c:	mov	r1, r5
   18710:	mov	r2, r4
   18714:	mov	r6, r0
   18718:	bl	110d0 <memcpy@plt>
   1871c:	mov	r0, r6
   18720:	pop	{r4, r5, r6, sl, fp, pc}
   18724:	bl	187ec <__assert_fail@plt+0x74b8>
   18728:	push	{r4, r5, r6, sl, fp, lr}
   1872c:	add	fp, sp, #16
   18730:	mov	r5, r0
   18734:	mov	r0, r1
   18738:	mov	r4, r1
   1873c:	bl	19830 <__assert_fail@plt+0x84fc>
   18740:	cmp	r0, #0
   18744:	beq	18760 <__assert_fail@plt+0x742c>
   18748:	mov	r1, r5
   1874c:	mov	r2, r4
   18750:	mov	r6, r0
   18754:	bl	110d0 <memcpy@plt>
   18758:	mov	r0, r6
   1875c:	pop	{r4, r5, r6, sl, fp, pc}
   18760:	bl	187ec <__assert_fail@plt+0x74b8>
   18764:	push	{r4, r5, r6, sl, fp, lr}
   18768:	add	fp, sp, #16
   1876c:	mov	r5, r0
   18770:	add	r0, r1, #1
   18774:	mov	r4, r1
   18778:	bl	19830 <__assert_fail@plt+0x84fc>
   1877c:	cmp	r0, #0
   18780:	beq	187a8 <__assert_fail@plt+0x7474>
   18784:	mov	r6, r0
   18788:	mov	r0, #0
   1878c:	mov	r1, r5
   18790:	mov	r2, r4
   18794:	strb	r0, [r6, r4]
   18798:	mov	r0, r6
   1879c:	bl	110d0 <memcpy@plt>
   187a0:	mov	r0, r6
   187a4:	pop	{r4, r5, r6, sl, fp, pc}
   187a8:	bl	187ec <__assert_fail@plt+0x74b8>
   187ac:	push	{r4, r5, r6, sl, fp, lr}
   187b0:	add	fp, sp, #16
   187b4:	mov	r4, r0
   187b8:	bl	111fc <strlen@plt>
   187bc:	add	r5, r0, #1
   187c0:	mov	r0, r5
   187c4:	bl	19830 <__assert_fail@plt+0x84fc>
   187c8:	cmp	r0, #0
   187cc:	beq	187e8 <__assert_fail@plt+0x74b4>
   187d0:	mov	r1, r4
   187d4:	mov	r2, r5
   187d8:	mov	r6, r0
   187dc:	bl	110d0 <memcpy@plt>
   187e0:	mov	r0, r6
   187e4:	pop	{r4, r5, r6, sl, fp, pc}
   187e8:	bl	187ec <__assert_fail@plt+0x74b8>
   187ec:	push	{fp, lr}
   187f0:	mov	fp, sp
   187f4:	movw	r0, #49424	; 0xc110
   187f8:	movw	r1, #47120	; 0xb810
   187fc:	mov	r2, #5
   18800:	movt	r0, #2
   18804:	movt	r1, #1
   18808:	ldr	r4, [r0]
   1880c:	mov	r0, #0
   18810:	bl	1110c <dcgettext@plt>
   18814:	movw	r2, #46078	; 0xb3fe
   18818:	mov	r3, r0
   1881c:	mov	r0, r4
   18820:	mov	r1, #0
   18824:	movt	r2, #1
   18828:	bl	11184 <error@plt>
   1882c:	bl	1131c <abort@plt>
   18830:	sub	sp, sp, #12
   18834:	push	{r4, r5, r6, sl, fp, lr}
   18838:	add	fp, sp, #16
   1883c:	sub	sp, sp, #4
   18840:	movw	r5, #49524	; 0xc174
   18844:	mov	r4, r0
   18848:	add	r0, fp, #8
   1884c:	stm	r0, {r1, r2, r3}
   18850:	movt	r5, #2
   18854:	add	r3, fp, #8
   18858:	mov	r1, #1
   1885c:	mov	r2, r4
   18860:	ldr	r0, [r5]
   18864:	str	r3, [sp]
   18868:	bl	111b4 <__vfprintf_chk@plt>
   1886c:	mov	r4, r0
   18870:	cmn	r0, #1
   18874:	bgt	188c0 <__assert_fail@plt+0x758c>
   18878:	ldr	r0, [r5]
   1887c:	bl	110b8 <ferror@plt>
   18880:	cmp	r0, #0
   18884:	bne	188c0 <__assert_fail@plt+0x758c>
   18888:	movw	r0, #49424	; 0xc110
   1888c:	movt	r0, #2
   18890:	ldr	r5, [r0]
   18894:	bl	11214 <__errno_location@plt>
   18898:	ldr	r6, [r0]
   1889c:	movw	r1, #47137	; 0xb821
   188a0:	mov	r0, #0
   188a4:	mov	r2, #5
   188a8:	movt	r1, #1
   188ac:	bl	1110c <dcgettext@plt>
   188b0:	mov	r2, r0
   188b4:	mov	r0, r5
   188b8:	mov	r1, r6
   188bc:	bl	11184 <error@plt>
   188c0:	mov	r0, r4
   188c4:	sub	sp, fp, #16
   188c8:	pop	{r4, r5, r6, sl, fp, lr}
   188cc:	add	sp, sp, #12
   188d0:	bx	lr
   188d4:	push	{r4, r5, r6, sl, fp, lr}
   188d8:	add	fp, sp, #16
   188dc:	movw	r5, #49524	; 0xc174
   188e0:	mov	r2, r0
   188e4:	mov	r3, r1
   188e8:	mov	r1, #1
   188ec:	movt	r5, #2
   188f0:	ldr	r0, [r5]
   188f4:	bl	111b4 <__vfprintf_chk@plt>
   188f8:	mov	r4, r0
   188fc:	cmn	r0, #1
   18900:	bgt	18914 <__assert_fail@plt+0x75e0>
   18904:	ldr	r0, [r5]
   18908:	bl	110b8 <ferror@plt>
   1890c:	cmp	r0, #0
   18910:	beq	1891c <__assert_fail@plt+0x75e8>
   18914:	mov	r0, r4
   18918:	pop	{r4, r5, r6, sl, fp, pc}
   1891c:	movw	r0, #49424	; 0xc110
   18920:	movt	r0, #2
   18924:	ldr	r5, [r0]
   18928:	bl	11214 <__errno_location@plt>
   1892c:	ldr	r6, [r0]
   18930:	movw	r1, #47137	; 0xb821
   18934:	mov	r0, #0
   18938:	mov	r2, #5
   1893c:	movt	r1, #1
   18940:	bl	1110c <dcgettext@plt>
   18944:	mov	r2, r0
   18948:	mov	r0, r5
   1894c:	mov	r1, r6
   18950:	bl	11184 <error@plt>
   18954:	mov	r0, r4
   18958:	pop	{r4, r5, r6, sl, fp, pc}
   1895c:	sub	sp, sp, #8
   18960:	push	{r4, r5, r6, sl, fp, lr}
   18964:	add	fp, sp, #16
   18968:	sub	sp, sp, #8
   1896c:	mov	r4, r1
   18970:	str	r3, [fp, #12]
   18974:	str	r2, [fp, #8]
   18978:	add	r3, fp, #8
   1897c:	mov	r1, #1
   18980:	mov	r5, r0
   18984:	mov	r2, r4
   18988:	str	r3, [sp, #4]
   1898c:	bl	111b4 <__vfprintf_chk@plt>
   18990:	mov	r4, r0
   18994:	cmn	r0, #1
   18998:	bgt	189e4 <__assert_fail@plt+0x76b0>
   1899c:	mov	r0, r5
   189a0:	bl	110b8 <ferror@plt>
   189a4:	cmp	r0, #0
   189a8:	bne	189e4 <__assert_fail@plt+0x76b0>
   189ac:	movw	r0, #49424	; 0xc110
   189b0:	movt	r0, #2
   189b4:	ldr	r5, [r0]
   189b8:	bl	11214 <__errno_location@plt>
   189bc:	ldr	r6, [r0]
   189c0:	movw	r1, #47137	; 0xb821
   189c4:	mov	r0, #0
   189c8:	mov	r2, #5
   189cc:	movt	r1, #1
   189d0:	bl	1110c <dcgettext@plt>
   189d4:	mov	r2, r0
   189d8:	mov	r0, r5
   189dc:	mov	r1, r6
   189e0:	bl	11184 <error@plt>
   189e4:	mov	r0, r4
   189e8:	sub	sp, fp, #16
   189ec:	pop	{r4, r5, r6, sl, fp, lr}
   189f0:	add	sp, sp, #8
   189f4:	bx	lr
   189f8:	push	{r4, r5, r6, sl, fp, lr}
   189fc:	add	fp, sp, #16
   18a00:	mov	r3, r2
   18a04:	mov	r2, r1
   18a08:	mov	r1, #1
   18a0c:	mov	r5, r0
   18a10:	bl	111b4 <__vfprintf_chk@plt>
   18a14:	mov	r4, r0
   18a18:	cmn	r0, #1
   18a1c:	bgt	18a30 <__assert_fail@plt+0x76fc>
   18a20:	mov	r0, r5
   18a24:	bl	110b8 <ferror@plt>
   18a28:	cmp	r0, #0
   18a2c:	beq	18a38 <__assert_fail@plt+0x7704>
   18a30:	mov	r0, r4
   18a34:	pop	{r4, r5, r6, sl, fp, pc}
   18a38:	movw	r0, #49424	; 0xc110
   18a3c:	movt	r0, #2
   18a40:	ldr	r5, [r0]
   18a44:	bl	11214 <__errno_location@plt>
   18a48:	ldr	r6, [r0]
   18a4c:	movw	r1, #47137	; 0xb821
   18a50:	mov	r0, #0
   18a54:	mov	r2, #5
   18a58:	movt	r1, #1
   18a5c:	bl	1110c <dcgettext@plt>
   18a60:	mov	r2, r0
   18a64:	mov	r0, r5
   18a68:	mov	r1, r6
   18a6c:	bl	11184 <error@plt>
   18a70:	mov	r0, r4
   18a74:	pop	{r4, r5, r6, sl, fp, pc}
   18a78:	push	{fp, lr}
   18a7c:	mov	fp, sp
   18a80:	sub	sp, sp, #8
   18a84:	movw	ip, #49424	; 0xc110
   18a88:	movt	ip, #2
   18a8c:	ldr	ip, [ip]
   18a90:	str	ip, [sp, #4]
   18a94:	ldr	ip, [fp, #8]
   18a98:	str	ip, [sp]
   18a9c:	bl	18aa4 <__assert_fail@plt+0x7770>
   18aa0:	bl	1131c <abort@plt>
   18aa4:	push	{r4, r5, r6, r7, fp, lr}
   18aa8:	add	fp, sp, #16
   18aac:	sub	sp, sp, #16
   18ab0:	sub	r0, r0, #1
   18ab4:	cmp	r0, #4
   18ab8:	bcs	18b38 <__assert_fail@plt+0x7804>
   18abc:	mov	r5, r1
   18ac0:	movw	r1, #47268	; 0xb8a4
   18ac4:	ldr	r4, [fp, #12]
   18ac8:	ldr	r6, [fp, #8]
   18acc:	movt	r1, #1
   18ad0:	cmn	r5, #1
   18ad4:	ldr	r1, [r1, r0, lsl #2]
   18ad8:	ble	18aec <__assert_fail@plt+0x77b8>
   18adc:	ldr	r7, [r3, r5, lsl #4]
   18ae0:	movw	r5, #47169	; 0xb841
   18ae4:	movt	r5, #1
   18ae8:	b	18b08 <__assert_fail@plt+0x77d4>
   18aec:	mov	r0, #0
   18af0:	add	r7, sp, #14
   18af4:	strb	r0, [sp, #15]
   18af8:	movw	r0, #47169	; 0xb841
   18afc:	strb	r2, [sp, #14]
   18b00:	movt	r0, #1
   18b04:	sub	r5, r0, r5
   18b08:	mov	r0, #0
   18b0c:	mov	r2, #5
   18b10:	bl	1110c <dcgettext@plt>
   18b14:	mov	r2, r0
   18b18:	mov	r0, r4
   18b1c:	mov	r1, #0
   18b20:	mov	r3, r5
   18b24:	str	r7, [sp]
   18b28:	str	r6, [sp, #4]
   18b2c:	bl	11184 <error@plt>
   18b30:	sub	sp, fp, #16
   18b34:	pop	{r4, r5, r6, r7, fp, pc}
   18b38:	bl	1131c <abort@plt>
   18b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b40:	add	fp, sp, #28
   18b44:	sub	sp, sp, #44	; 0x2c
   18b48:	cmp	r2, #37	; 0x25
   18b4c:	bcs	197bc <__assert_fail@plt+0x8488>
   18b50:	ldr	sl, [fp, #8]
   18b54:	mov	r6, r2
   18b58:	mov	r7, r1
   18b5c:	mov	r4, r0
   18b60:	str	r3, [sp, #36]	; 0x24
   18b64:	bl	11214 <__errno_location@plt>
   18b68:	mov	r5, r0
   18b6c:	mov	r0, #0
   18b70:	str	r0, [r5]
   18b74:	bl	111e4 <__ctype_b_loc@plt>
   18b78:	ldr	r1, [r0]
   18b7c:	mov	r2, r4
   18b80:	ldrb	r0, [r2], #1
   18b84:	add	r3, r1, r0, lsl #1
   18b88:	ldrb	r3, [r3, #1]
   18b8c:	tst	r3, #32
   18b90:	bne	18b80 <__assert_fail@plt+0x784c>
   18b94:	sub	r9, fp, #32
   18b98:	cmp	r7, #0
   18b9c:	mov	r8, #4
   18ba0:	movne	r9, r7
   18ba4:	cmp	r0, #45	; 0x2d
   18ba8:	beq	197b0 <__assert_fail@plt+0x847c>
   18bac:	mov	r0, r4
   18bb0:	mov	r1, r9
   18bb4:	mov	r2, r6
   18bb8:	mov	r3, #0
   18bbc:	bl	110dc <__strtoull_internal@plt>
   18bc0:	mov	r7, r1
   18bc4:	ldr	r1, [r9]
   18bc8:	cmp	r1, r4
   18bcc:	beq	18bf8 <__assert_fail@plt+0x78c4>
   18bd0:	mov	r6, r0
   18bd4:	ldr	r0, [r5]
   18bd8:	cmp	r0, #0
   18bdc:	beq	18c34 <__assert_fail@plt+0x7900>
   18be0:	cmp	r0, #34	; 0x22
   18be4:	bne	197b0 <__assert_fail@plt+0x847c>
   18be8:	mov	r8, #1
   18bec:	cmp	sl, #0
   18bf0:	bne	18c40 <__assert_fail@plt+0x790c>
   18bf4:	b	197a8 <__assert_fail@plt+0x8474>
   18bf8:	cmp	sl, #0
   18bfc:	beq	197b0 <__assert_fail@plt+0x847c>
   18c00:	mov	r5, r1
   18c04:	ldrb	r1, [r4]
   18c08:	cmp	r1, #0
   18c0c:	beq	197b0 <__assert_fail@plt+0x847c>
   18c10:	mov	r0, sl
   18c14:	bl	11208 <strchr@plt>
   18c18:	cmp	r0, #0
   18c1c:	beq	197b0 <__assert_fail@plt+0x847c>
   18c20:	mov	r1, r5
   18c24:	mov	r8, #0
   18c28:	mov	r6, #1
   18c2c:	mov	r7, #0
   18c30:	b	18c40 <__assert_fail@plt+0x790c>
   18c34:	mov	r8, r0
   18c38:	cmp	sl, #0
   18c3c:	beq	197a8 <__assert_fail@plt+0x8474>
   18c40:	ldrb	r4, [r1]
   18c44:	cmp	r4, #0
   18c48:	beq	197a8 <__assert_fail@plt+0x8474>
   18c4c:	str	r1, [sp, #32]
   18c50:	mov	r0, sl
   18c54:	mov	r1, r4
   18c58:	bl	11208 <strchr@plt>
   18c5c:	cmp	r0, #0
   18c60:	beq	18f28 <__assert_fail@plt+0x7bf4>
   18c64:	sub	r0, r4, #69	; 0x45
   18c68:	mov	r1, #1
   18c6c:	mov	r3, #0
   18c70:	mov	r5, #1024	; 0x400
   18c74:	cmp	r0, #47	; 0x2f
   18c78:	str	r1, [sp, #28]
   18c7c:	bhi	18d80 <__assert_fail@plt+0x7a4c>
   18c80:	add	r1, pc, #0
   18c84:	ldr	pc, [r1, r0, lsl #2]
   18c88:	andeq	r8, r1, r8, asr #26
   18c8c:	andeq	r8, r1, r0, lsl #27
   18c90:	andeq	r8, r1, r8, asr #26
   18c94:	andeq	r8, r1, r0, lsl #27
   18c98:	andeq	r8, r1, r0, lsl #27
   18c9c:	andeq	r8, r1, r0, lsl #27
   18ca0:	andeq	r8, r1, r8, asr #26
   18ca4:	andeq	r8, r1, r0, lsl #27
   18ca8:	andeq	r8, r1, r8, asr #26
   18cac:	andeq	r8, r1, r0, lsl #27
   18cb0:	andeq	r8, r1, r0, lsl #27
   18cb4:	andeq	r8, r1, r8, asr #26
   18cb8:	andeq	r8, r1, r0, lsl #27
   18cbc:	andeq	r8, r1, r0, lsl #27
   18cc0:	andeq	r8, r1, r0, lsl #27
   18cc4:	andeq	r8, r1, r8, asr #26
   18cc8:	andeq	r8, r1, r0, lsl #27
   18ccc:	andeq	r8, r1, r0, lsl #27
   18cd0:	andeq	r8, r1, r0, lsl #27
   18cd4:	andeq	r8, r1, r0, lsl #27
   18cd8:	andeq	r8, r1, r8, asr #26
   18cdc:	andeq	r8, r1, r8, asr #26
   18ce0:	andeq	r8, r1, r0, lsl #27
   18ce4:	andeq	r8, r1, r0, lsl #27
   18ce8:	andeq	r8, r1, r0, lsl #27
   18cec:	andeq	r8, r1, r0, lsl #27
   18cf0:	andeq	r8, r1, r0, lsl #27
   18cf4:	andeq	r8, r1, r0, lsl #27
   18cf8:	andeq	r8, r1, r0, lsl #27
   18cfc:	andeq	r8, r1, r0, lsl #27
   18d00:	andeq	r8, r1, r0, lsl #27
   18d04:	andeq	r8, r1, r0, lsl #27
   18d08:	andeq	r8, r1, r0, lsl #27
   18d0c:	andeq	r8, r1, r0, lsl #27
   18d10:	andeq	r8, r1, r8, asr #26
   18d14:	andeq	r8, r1, r0, lsl #27
   18d18:	andeq	r8, r1, r0, lsl #27
   18d1c:	andeq	r8, r1, r0, lsl #27
   18d20:	andeq	r8, r1, r8, asr #26
   18d24:	andeq	r8, r1, r0, lsl #27
   18d28:	andeq	r8, r1, r8, asr #26
   18d2c:	andeq	r8, r1, r0, lsl #27
   18d30:	andeq	r8, r1, r0, lsl #27
   18d34:	andeq	r8, r1, r0, lsl #27
   18d38:	andeq	r8, r1, r0, lsl #27
   18d3c:	andeq	r8, r1, r0, lsl #27
   18d40:	andeq	r8, r1, r0, lsl #27
   18d44:	andeq	r8, r1, r8, asr #26
   18d48:	mov	r0, sl
   18d4c:	mov	r1, #48	; 0x30
   18d50:	bl	11208 <strchr@plt>
   18d54:	cmp	r0, #0
   18d58:	beq	18d7c <__assert_fail@plt+0x7a48>
   18d5c:	ldr	r1, [sp, #32]
   18d60:	ldrb	r0, [r1, #1]
   18d64:	cmp	r0, #66	; 0x42
   18d68:	cmpne	r0, #68	; 0x44
   18d6c:	bne	18f34 <__assert_fail@plt+0x7c00>
   18d70:	mov	r5, #1000	; 0x3e8
   18d74:	mov	r0, #2
   18d78:	str	r0, [sp, #28]
   18d7c:	mov	r3, #0
   18d80:	sub	r0, r4, #66	; 0x42
   18d84:	cmp	r0, #53	; 0x35
   18d88:	bhi	18f28 <__assert_fail@plt+0x7bf4>
   18d8c:	add	r1, pc, #0
   18d90:	ldr	pc, [r1, r0, lsl #2]
   18d94:			; <UNDEFINED> instruction: 0x000192b0
   18d98:	andeq	r8, r1, r8, lsr #30
   18d9c:	andeq	r8, r1, r8, lsr #30
   18da0:	ldrdeq	r9, [r1], -r8
   18da4:	andeq	r8, r1, r8, lsr #30
   18da8:	andeq	r8, r1, ip, ror #28
   18dac:	andeq	r8, r1, r8, lsr #30
   18db0:	andeq	r8, r1, r8, lsr #30
   18db4:	andeq	r8, r1, r8, lsr #30
   18db8:	andeq	r8, r1, r8, asr pc
   18dbc:	andeq	r8, r1, r8, lsr #30
   18dc0:	andeq	r8, r1, r0, lsr #31
   18dc4:	andeq	r8, r1, r8, lsr #30
   18dc8:	andeq	r8, r1, r8, lsr #30
   18dcc:	andeq	r9, r1, r0, lsr r4
   18dd0:	andeq	r8, r1, r8, lsr #30
   18dd4:	andeq	r8, r1, r8, lsr #30
   18dd8:	andeq	r8, r1, r8, lsr #30
   18ddc:	andeq	r9, r1, ip, lsr #32
   18de0:	andeq	r8, r1, r8, lsr #30
   18de4:	andeq	r8, r1, r8, lsr #30
   18de8:	andeq	r8, r1, r8, lsr #30
   18dec:	andeq	r8, r1, r8, lsr #30
   18df0:	andeq	r9, r1, r8, asr r5
   18df4:	andeq	r9, r1, r4, lsl r1
   18df8:	andeq	r8, r1, r8, lsr #30
   18dfc:	andeq	r8, r1, r8, lsr #30
   18e00:	andeq	r8, r1, r8, lsr #30
   18e04:	andeq	r8, r1, r8, lsr #30
   18e08:	andeq	r8, r1, r8, lsr #30
   18e0c:	andeq	r8, r1, r8, lsr #30
   18e10:	andeq	r8, r1, r8, lsr #30
   18e14:	andeq	r9, r1, r0, lsr r7
   18e18:	andeq	r9, r1, r8, lsl #15
   18e1c:	andeq	r8, r1, r8, lsr #30
   18e20:	andeq	r8, r1, r8, lsr #30
   18e24:	andeq	r8, r1, r8, lsr #30
   18e28:	andeq	r8, r1, ip, ror #28
   18e2c:	andeq	r8, r1, r8, lsr #30
   18e30:	andeq	r8, r1, r8, lsr #30
   18e34:	andeq	r8, r1, r8, lsr #30
   18e38:	andeq	r8, r1, r8, asr pc
   18e3c:	andeq	r8, r1, r8, lsr #30
   18e40:	andeq	r8, r1, r0, lsr #31
   18e44:	andeq	r8, r1, r8, lsr #30
   18e48:	andeq	r8, r1, r8, lsr #30
   18e4c:	andeq	r8, r1, r8, lsr #30
   18e50:	andeq	r8, r1, r8, lsr #30
   18e54:	andeq	r8, r1, r8, lsr #30
   18e58:	andeq	r8, r1, r8, lsr #30
   18e5c:	andeq	r9, r1, ip, lsr #32
   18e60:	andeq	r8, r1, r8, lsr #30
   18e64:	andeq	r8, r1, r8, lsr #30
   18e68:	andeq	r9, r1, r4, ror #14
   18e6c:	mvn	r0, #0
   18e70:	mvn	r1, #0
   18e74:	mov	r2, r5
   18e78:	mov	sl, r3
   18e7c:	bl	19b14 <__assert_fail@plt+0x87e0>
   18e80:	subs	r3, r0, r6
   18e84:	mov	lr, #0
   18e88:	umull	r4, r2, r6, r5
   18e8c:	str	r1, [sp, #20]
   18e90:	sbcs	r3, r1, r7
   18e94:	mla	ip, r6, sl, r2
   18e98:	mov	r2, r1
   18e9c:	movwcc	lr, #1
   18ea0:	mla	r7, r7, r5, ip
   18ea4:	mov	r2, #0
   18ea8:	cmp	lr, #0
   18eac:	mvnne	r4, #0
   18eb0:	mvnne	r7, #0
   18eb4:	subs	r6, r0, r4
   18eb8:	sbcs	r6, r1, r7
   18ebc:	movwcc	r2, #1
   18ec0:	umull	r3, r6, r4, r5
   18ec4:	cmp	r2, #0
   18ec8:	str	r6, [sp, #16]
   18ecc:	mvnne	r3, #0
   18ed0:	cmp	r2, #0
   18ed4:	umull	r6, ip, r3, r5
   18ed8:	mla	r1, r3, sl, ip
   18edc:	ldr	ip, [sp, #16]
   18ee0:	str	r1, [sp, #12]
   18ee4:	mla	r4, r4, sl, ip
   18ee8:	mla	r4, r7, r5, r4
   18eec:	ldr	r7, [sp, #12]
   18ef0:	mvnne	r4, #0
   18ef4:	subs	r0, r0, r3
   18ef8:	ldr	r0, [sp, #20]
   18efc:	mla	r7, r4, r5, r7
   18f00:	sbcs	r0, r0, r4
   18f04:	mov	r0, #0
   18f08:	movwcc	r0, #1
   18f0c:	cmp	r0, #0
   18f10:	mov	r1, r0
   18f14:	orr	r0, lr, r2
   18f18:	mvnne	r7, #0
   18f1c:	mvnne	r6, #0
   18f20:	orr	r3, r0, r1
   18f24:	b	19788 <__assert_fail@plt+0x8454>
   18f28:	ldr	r0, [sp, #36]	; 0x24
   18f2c:	orr	r8, r8, #2
   18f30:	b	197ac <__assert_fail@plt+0x8478>
   18f34:	cmp	r0, #105	; 0x69
   18f38:	mov	r3, #0
   18f3c:	bne	18d80 <__assert_fail@plt+0x7a4c>
   18f40:	ldrb	r0, [r1, #2]
   18f44:	mov	r1, #1
   18f48:	cmp	r0, #66	; 0x42
   18f4c:	movweq	r1, #3
   18f50:	str	r1, [sp, #28]
   18f54:	b	18d80 <__assert_fail@plt+0x7a4c>
   18f58:	mvn	r0, #0
   18f5c:	mvn	r1, #0
   18f60:	mov	r2, r5
   18f64:	mov	r4, r3
   18f68:	bl	19b14 <__assert_fail@plt+0x87e0>
   18f6c:	subs	r0, r0, r6
   18f70:	mov	r2, #0
   18f74:	sbcs	r0, r1, r7
   18f78:	movwcc	r2, #1
   18f7c:	umull	r0, r1, r6, r5
   18f80:	mla	r1, r6, r4, r1
   18f84:	cmp	r2, #0
   18f88:	mov	r3, r2
   18f8c:	mla	r7, r7, r5, r1
   18f90:	mvnne	r0, #0
   18f94:	mvnne	r7, #0
   18f98:	mov	r6, r0
   18f9c:	b	19788 <__assert_fail@plt+0x8454>
   18fa0:	mvn	r0, #0
   18fa4:	mvn	r1, #0
   18fa8:	mov	r2, r5
   18fac:	str	r3, [sp, #24]
   18fb0:	bl	19b14 <__assert_fail@plt+0x87e0>
   18fb4:	subs	r3, r0, r6
   18fb8:	mov	ip, r0
   18fbc:	umull	r4, r0, r6, r5
   18fc0:	mov	sl, #0
   18fc4:	sbcs	r3, r1, r7
   18fc8:	str	r0, [sp, #20]
   18fcc:	ldr	r0, [sp, #24]
   18fd0:	mov	r3, #0
   18fd4:	movwcc	r3, #1
   18fd8:	cmp	r3, #0
   18fdc:	mvnne	r4, #0
   18fe0:	cmp	r3, #0
   18fe4:	umull	lr, r2, r4, r5
   18fe8:	mla	r2, r4, r0, r2
   18fec:	str	r2, [sp, #16]
   18ff0:	ldr	r2, [sp, #20]
   18ff4:	mla	r6, r6, r0, r2
   18ff8:	ldr	r0, [sp, #16]
   18ffc:	mla	r6, r7, r5, r6
   19000:	mvnne	r6, #0
   19004:	mla	r7, r6, r5, r0
   19008:	subs	r0, ip, r4
   1900c:	sbcs	r0, r1, r6
   19010:	movwcc	sl, #1
   19014:	cmp	sl, #0
   19018:	orr	r3, r3, sl
   1901c:	mvnne	lr, #0
   19020:	mvnne	r7, #0
   19024:	mov	r6, lr
   19028:	b	19788 <__assert_fail@plt+0x8454>
   1902c:	mvn	r0, #0
   19030:	mvn	r1, #0
   19034:	mov	r2, r5
   19038:	mov	sl, r3
   1903c:	bl	19b14 <__assert_fail@plt+0x87e0>
   19040:	subs	r3, r0, r6
   19044:	mov	ip, r1
   19048:	umull	r2, lr, r6, r5
   1904c:	str	r0, [sp, #20]
   19050:	sbcs	r3, r1, r7
   19054:	mov	r1, #0
   19058:	mla	r6, r6, sl, lr
   1905c:	mov	lr, #0
   19060:	str	ip, [sp, #16]
   19064:	movwcc	r1, #1
   19068:	mla	r7, r7, r5, r6
   1906c:	cmp	r1, #0
   19070:	mvnne	r2, #0
   19074:	cmp	r1, #0
   19078:	umull	r3, r4, r2, r5
   1907c:	mvnne	r7, #0
   19080:	mla	r4, r2, sl, r4
   19084:	subs	r2, r0, r2
   19088:	sbcs	r2, ip, r7
   1908c:	mla	r4, r7, r5, r4
   19090:	movwcc	lr, #1
   19094:	mov	r2, #0
   19098:	cmp	lr, #0
   1909c:	mvnne	r3, #0
   190a0:	mvnne	r4, #0
   190a4:	subs	r7, r0, r3
   190a8:	mov	r0, r5
   190ac:	sbcs	r7, ip, r4
   190b0:	movwcc	r2, #1
   190b4:	umull	r5, r7, r3, r5
   190b8:	cmp	r2, #0
   190bc:	mla	r3, r3, sl, r7
   190c0:	mvnne	r5, #0
   190c4:	mla	r3, r4, r0, r3
   190c8:	cmp	r2, #0
   190cc:	umull	r6, ip, r5, r0
   190d0:	mvnne	r3, #0
   190d4:	mla	ip, r5, sl, ip
   190d8:	mla	r7, r3, r0, ip
   190dc:	ldr	r0, [sp, #20]
   190e0:	subs	r0, r0, r5
   190e4:	ldr	r0, [sp, #16]
   190e8:	sbcs	r0, r0, r3
   190ec:	mov	r0, #0
   190f0:	movwcc	r0, #1
   190f4:	cmp	r0, #0
   190f8:	mov	r3, r0
   190fc:	orr	r0, r1, lr
   19100:	orr	r0, r0, r2
   19104:	mvnne	r7, #0
   19108:	mvnne	r6, #0
   1910c:	orr	r3, r0, r3
   19110:	b	19788 <__assert_fail@plt+0x8454>
   19114:	mvn	r0, #0
   19118:	mvn	r1, #0
   1911c:	mov	r2, r5
   19120:	mov	r4, r3
   19124:	str	r3, [sp, #24]
   19128:	bl	19b14 <__assert_fail@plt+0x87e0>
   1912c:	umull	r3, r2, r6, r5
   19130:	mla	r2, r6, r4, r2
   19134:	subs	r6, r0, r6
   19138:	sbcs	r6, r1, r7
   1913c:	mla	ip, r7, r5, r2
   19140:	ldr	r2, [sp, #24]
   19144:	mov	r6, #0
   19148:	movwcc	r6, #1
   1914c:	cmp	r6, #0
   19150:	str	r6, [sp, #20]
   19154:	mov	r6, #0
   19158:	mvnne	r3, #0
   1915c:	mvnne	ip, #0
   19160:	subs	r4, r0, r3
   19164:	umull	r7, lr, r3, r5
   19168:	sbcs	r4, r1, ip
   1916c:	mla	r3, r3, r2, lr
   19170:	movwcc	r6, #1
   19174:	cmp	r6, #0
   19178:	str	r6, [sp, #16]
   1917c:	mvnne	r7, #0
   19180:	cmp	r6, #0
   19184:	umull	sl, r4, r7, r5
   19188:	mla	r4, r7, r2, r4
   1918c:	mla	r2, ip, r5, r3
   19190:	mov	ip, #0
   19194:	mvnne	r2, #0
   19198:	subs	r3, r0, r7
   1919c:	mla	r6, r2, r5, r4
   191a0:	mov	r4, r0
   191a4:	sbcs	r2, r1, r2
   191a8:	mov	r0, #0
   191ac:	movwcc	r0, #1
   191b0:	mov	r3, r4
   191b4:	cmp	r0, #0
   191b8:	str	r0, [sp, #12]
   191bc:	mov	r0, r1
   191c0:	str	r3, [sp, #4]
   191c4:	mvnne	sl, #0
   191c8:	mvnne	r6, #0
   191cc:	str	r0, [sp, #8]
   191d0:	subs	r2, r4, sl
   191d4:	ldr	r4, [sp, #24]
   191d8:	sbcs	r2, r1, r6
   191dc:	movwcc	ip, #1
   191e0:	umull	r7, r2, sl, r5
   191e4:	cmp	ip, #0
   191e8:	mla	r2, sl, r4, r2
   191ec:	mvnne	r7, #0
   191f0:	cmp	ip, #0
   191f4:	mov	sl, #0
   191f8:	umull	r1, lr, r7, r5
   191fc:	mla	r2, r6, r5, r2
   19200:	mvnne	r2, #0
   19204:	mla	lr, r7, r4, lr
   19208:	subs	r6, r3, r7
   1920c:	mla	lr, r2, r5, lr
   19210:	sbcs	r2, r0, r2
   19214:	movwcc	sl, #1
   19218:	mov	r2, #0
   1921c:	cmp	sl, #0
   19220:	mvnne	r1, #0
   19224:	mvnne	lr, #0
   19228:	subs	r6, r3, r1
   1922c:	ldr	r3, [sp, #24]
   19230:	sbcs	r6, r0, lr
   19234:	umull	r0, r7, r1, r5
   19238:	movwcc	r2, #1
   1923c:	cmp	r2, #0
   19240:	mvnne	r0, #0
   19244:	mla	r1, r1, r3, r7
   19248:	cmp	r2, #0
   1924c:	umull	r6, r4, r0, r5
   19250:	mla	r1, lr, r5, r1
   19254:	mla	r4, r0, r3, r4
   19258:	ldr	r3, [sp, #4]
   1925c:	mvnne	r1, #0
   19260:	mla	r7, r1, r5, r4
   19264:	ldr	r5, [sp, #16]
   19268:	subs	r0, r3, r0
   1926c:	ldr	r0, [sp, #8]
   19270:	sbcs	r0, r0, r1
   19274:	mov	r0, #0
   19278:	movwcc	r0, #1
   1927c:	cmp	r0, #0
   19280:	mov	r1, r0
   19284:	ldr	r0, [sp, #20]
   19288:	mvnne	r7, #0
   1928c:	mvnne	r6, #0
   19290:	orr	r0, r0, r5
   19294:	ldr	r5, [sp, #12]
   19298:	orr	r0, r0, r5
   1929c:	orr	r0, r0, ip
   192a0:	orr	r0, r0, sl
   192a4:	orr	r0, r0, r2
   192a8:	orr	r0, r0, r1
   192ac:	b	19728 <__assert_fail@plt+0x83f4>
   192b0:	mov	r1, #0
   192b4:	lsl	r2, r7, #10
   192b8:	lsl	r0, r6, #10
   192bc:	lsr	r3, r7, #22
   192c0:	cmp	r1, r7, lsr #22
   192c4:	orr	r2, r2, r6, lsr #22
   192c8:	mvnne	r0, #0
   192cc:	movwne	r3, #1
   192d0:	cmp	r1, r7, lsr #22
   192d4:	b	19754 <__assert_fail@plt+0x8420>
   192d8:	mvn	r0, #0
   192dc:	mvn	r1, #0
   192e0:	mov	r2, r5
   192e4:	mov	sl, r3
   192e8:	bl	19b14 <__assert_fail@plt+0x87e0>
   192ec:	subs	r2, r0, r6
   192f0:	mov	ip, r0
   192f4:	mov	r0, #0
   192f8:	sbcs	r2, r1, r7
   192fc:	movwcc	r0, #1
   19300:	umull	r4, r2, r6, r5
   19304:	cmp	r0, #0
   19308:	mla	r2, r6, sl, r2
   1930c:	str	r0, [sp, #20]
   19310:	mvnne	r4, #0
   19314:	cmp	r0, #0
   19318:	mla	r2, r7, r5, r2
   1931c:	mov	r0, #0
   19320:	umull	lr, r3, r4, r5
   19324:	mvnne	r2, #0
   19328:	mla	r3, r4, sl, r3
   1932c:	mla	r6, r2, r5, r3
   19330:	subs	r3, ip, r4
   19334:	sbcs	r2, r1, r2
   19338:	mov	r3, r1
   1933c:	movwcc	r0, #1
   19340:	str	r3, [sp, #8]
   19344:	cmp	r0, #0
   19348:	str	r0, [sp, #16]
   1934c:	mov	r0, ip
   19350:	mvnne	lr, #0
   19354:	mvnne	r6, #0
   19358:	str	r0, [sp, #12]
   1935c:	subs	r2, ip, lr
   19360:	umull	r7, r4, lr, r5
   19364:	sbcs	r2, r1, r6
   19368:	mla	r4, lr, sl, r4
   1936c:	mov	r2, #0
   19370:	mla	r6, r6, r5, r4
   19374:	mov	r4, #0
   19378:	movwcc	r2, #1
   1937c:	cmp	r2, #0
   19380:	mvnne	r7, #0
   19384:	cmp	r2, #0
   19388:	umull	r1, ip, r7, r5
   1938c:	mvnne	r6, #0
   19390:	mla	ip, r7, sl, ip
   19394:	subs	r7, r0, r7
   19398:	mla	lr, r6, r5, ip
   1939c:	sbcs	r7, r3, r6
   193a0:	mov	ip, #0
   193a4:	movwcc	ip, #1
   193a8:	cmp	ip, #0
   193ac:	mvnne	r1, #0
   193b0:	mvnne	lr, #0
   193b4:	subs	r7, r0, r1
   193b8:	sbcs	r7, r3, lr
   193bc:	movwcc	r4, #1
   193c0:	umull	r0, r7, r1, r5
   193c4:	cmp	r4, #0
   193c8:	mla	r1, r1, sl, r7
   193cc:	mvnne	r0, #0
   193d0:	mla	r1, lr, r5, r1
   193d4:	cmp	r4, #0
   193d8:	umull	r6, r3, r0, r5
   193dc:	mvnne	r1, #0
   193e0:	mla	r3, r0, sl, r3
   193e4:	mla	r7, r1, r5, r3
   193e8:	ldr	r3, [sp, #12]
   193ec:	subs	r0, r3, r0
   193f0:	ldr	r3, [sp, #16]
   193f4:	ldr	r0, [sp, #8]
   193f8:	sbcs	r0, r0, r1
   193fc:	mov	r0, #0
   19400:	movwcc	r0, #1
   19404:	cmp	r0, #0
   19408:	mov	r1, r0
   1940c:	ldr	r0, [sp, #20]
   19410:	mvnne	r7, #0
   19414:	mvnne	r6, #0
   19418:	orr	r0, r0, r3
   1941c:	orr	r0, r0, r2
   19420:	orr	r0, r0, ip
   19424:	orr	r0, r0, r4
   19428:	orr	r3, r0, r1
   1942c:	b	19788 <__assert_fail@plt+0x8454>
   19430:	mvn	r0, #0
   19434:	mvn	r1, #0
   19438:	mov	r2, r5
   1943c:	mov	sl, r3
   19440:	bl	19b14 <__assert_fail@plt+0x87e0>
   19444:	umull	r3, r2, r6, r5
   19448:	mov	lr, r1
   1944c:	mov	r1, r0
   19450:	mla	r2, r6, sl, r2
   19454:	subs	r6, r0, r6
   19458:	mov	r0, #0
   1945c:	sbcs	r6, lr, r7
   19460:	mla	r2, r7, r5, r2
   19464:	movwcc	r0, #1
   19468:	cmp	r0, #0
   1946c:	str	r0, [sp, #20]
   19470:	mov	r0, r1
   19474:	mvnne	r3, #0
   19478:	mvnne	r2, #0
   1947c:	str	r0, [sp, #16]
   19480:	subs	r4, r1, r3
   19484:	umull	r7, ip, r3, r5
   19488:	sbcs	r4, lr, r2
   1948c:	mla	r3, r3, sl, ip
   19490:	mov	ip, #0
   19494:	mov	r4, #0
   19498:	mla	r2, r2, r5, r3
   1949c:	movwcc	r4, #1
   194a0:	cmp	r4, #0
   194a4:	mvnne	r7, #0
   194a8:	cmp	r4, #0
   194ac:	umull	r1, r6, r7, r5
   194b0:	mvnne	r2, #0
   194b4:	mla	r6, r7, sl, r6
   194b8:	mla	r3, r2, r5, r6
   194bc:	subs	r6, r0, r7
   194c0:	sbcs	r2, lr, r2
   194c4:	movwcc	ip, #1
   194c8:	mov	r2, #0
   194cc:	cmp	ip, #0
   194d0:	mvnne	r1, #0
   194d4:	mvnne	r3, #0
   194d8:	subs	r6, r0, r1
   194dc:	sbcs	r6, lr, r3
   194e0:	movwcc	r2, #1
   194e4:	umull	r0, r6, r1, r5
   194e8:	cmp	r2, #0
   194ec:	str	r6, [sp, #12]
   194f0:	mvnne	r0, #0
   194f4:	cmp	r2, #0
   194f8:	umull	r6, r7, r0, r5
   194fc:	mla	r7, r0, sl, r7
   19500:	str	r7, [sp, #8]
   19504:	ldr	r7, [sp, #12]
   19508:	mla	r1, r1, sl, r7
   1950c:	mla	r1, r3, r5, r1
   19510:	ldr	r3, [sp, #8]
   19514:	mvnne	r1, #0
   19518:	mla	r7, r1, r5, r3
   1951c:	ldr	r3, [sp, #16]
   19520:	subs	r0, r3, r0
   19524:	sbcs	r0, lr, r1
   19528:	mov	r0, #0
   1952c:	movwcc	r0, #1
   19530:	cmp	r0, #0
   19534:	mov	r1, r0
   19538:	ldr	r0, [sp, #20]
   1953c:	mvnne	r7, #0
   19540:	mvnne	r6, #0
   19544:	orr	r0, r0, r4
   19548:	orr	r0, r0, ip
   1954c:	orr	r0, r0, r2
   19550:	orr	r3, r0, r1
   19554:	b	19788 <__assert_fail@plt+0x8454>
   19558:	mvn	r0, #0
   1955c:	mvn	r1, #0
   19560:	mov	r2, r5
   19564:	mov	sl, r3
   19568:	bl	19b14 <__assert_fail@plt+0x87e0>
   1956c:	mov	lr, r0
   19570:	subs	r0, r0, r6
   19574:	mov	r2, #0
   19578:	mov	ip, r1
   1957c:	str	sl, [sp, #24]
   19580:	sbcs	r0, r1, r7
   19584:	umull	r3, r1, r6, r5
   19588:	str	lr, [sp, #4]
   1958c:	movwcc	r2, #1
   19590:	mla	r6, r6, sl, r1
   19594:	mov	r1, #0
   19598:	cmp	r2, #0
   1959c:	mla	r7, r7, r5, r6
   195a0:	str	r2, [sp, #20]
   195a4:	mvnne	r3, #0
   195a8:	cmp	r2, #0
   195ac:	mov	r2, #0
   195b0:	umull	r0, r4, r3, r5
   195b4:	mvnne	r7, #0
   195b8:	mla	r4, r3, sl, r4
   195bc:	subs	r3, lr, r3
   195c0:	sbcs	r3, ip, r7
   195c4:	mla	r4, r7, r5, r4
   195c8:	movwcc	r1, #1
   195cc:	cmp	r1, #0
   195d0:	str	r1, [sp, #16]
   195d4:	mvnne	r0, #0
   195d8:	mvnne	r4, #0
   195dc:	subs	r3, lr, r0
   195e0:	sbcs	r3, ip, r4
   195e4:	movwcc	r2, #1
   195e8:	umull	r6, r3, r0, r5
   195ec:	cmp	r2, #0
   195f0:	mla	r0, r0, sl, r3
   195f4:	str	r2, [sp, #12]
   195f8:	mvnne	r6, #0
   195fc:	mla	r0, r4, r5, r0
   19600:	cmp	r2, #0
   19604:	ldr	r4, [sp, #24]
   19608:	umull	r1, r7, r6, r5
   1960c:	mvnne	r0, #0
   19610:	subs	r3, lr, r6
   19614:	mla	r7, r6, sl, r7
   19618:	mov	r3, ip
   1961c:	mla	r7, r0, r5, r7
   19620:	sbcs	r0, ip, r0
   19624:	str	r3, [sp]
   19628:	mov	r0, #0
   1962c:	movwcc	r0, #1
   19630:	cmp	r0, #0
   19634:	str	r0, [sp, #8]
   19638:	mvnne	r1, #0
   1963c:	mvnne	r7, #0
   19640:	subs	r0, lr, r1
   19644:	sbcs	r0, ip, r7
   19648:	mov	ip, #0
   1964c:	movwcc	ip, #1
   19650:	umull	r6, r0, r1, r5
   19654:	cmp	ip, #0
   19658:	mla	r1, r1, r4, r0
   1965c:	mov	r0, lr
   19660:	mvnne	r6, #0
   19664:	mla	r1, r7, r5, r1
   19668:	cmp	ip, #0
   1966c:	umull	r2, sl, r6, r5
   19670:	mvnne	r1, #0
   19674:	mla	sl, r6, r4, sl
   19678:	subs	r6, lr, r6
   1967c:	mov	lr, #0
   19680:	mla	r7, r1, r5, sl
   19684:	sbcs	r1, r3, r1
   19688:	movwcc	lr, #1
   1968c:	ldr	r1, [sp, #24]
   19690:	cmp	lr, #0
   19694:	mvnne	r2, #0
   19698:	mvnne	r7, #0
   1969c:	subs	r6, r0, r2
   196a0:	umull	r0, sl, r2, r5
   196a4:	sbcs	r6, r3, r7
   196a8:	mov	r3, #0
   196ac:	mla	r2, r2, r1, sl
   196b0:	movwcc	r3, #1
   196b4:	mla	r2, r7, r5, r2
   196b8:	cmp	r3, #0
   196bc:	mvnne	r0, #0
   196c0:	cmp	r3, #0
   196c4:	umull	r6, r4, r0, r5
   196c8:	mvnne	r2, #0
   196cc:	mla	r4, r0, r1, r4
   196d0:	ldr	r1, [sp, #4]
   196d4:	mla	r7, r2, r5, r4
   196d8:	ldr	r5, [sp, #16]
   196dc:	subs	r0, r1, r0
   196e0:	ldr	r0, [sp]
   196e4:	sbcs	r0, r0, r2
   196e8:	mov	r0, #0
   196ec:	movwcc	r0, #1
   196f0:	cmp	r0, #0
   196f4:	mov	r2, r0
   196f8:	ldr	r0, [sp, #20]
   196fc:	mvnne	r7, #0
   19700:	mvnne	r6, #0
   19704:	orr	r0, r0, r5
   19708:	ldr	r5, [sp, #12]
   1970c:	orr	r0, r0, r5
   19710:	ldr	r5, [sp, #8]
   19714:	orr	r0, r0, r5
   19718:	orr	r0, r0, ip
   1971c:	orr	r0, r0, lr
   19720:	orr	r0, r0, r3
   19724:	orr	r0, r0, r2
   19728:	and	r3, r0, #1
   1972c:	b	19788 <__assert_fail@plt+0x8454>
   19730:	mov	r1, #0
   19734:	lsl	r2, r7, #9
   19738:	lsl	r0, r6, #9
   1973c:	lsr	r3, r7, #23
   19740:	cmp	r1, r7, lsr #23
   19744:	orr	r2, r2, r6, lsr #23
   19748:	mvnne	r0, #0
   1974c:	movwne	r3, #1
   19750:	cmp	r1, r7, lsr #23
   19754:	mvnne	r2, #0
   19758:	mov	r6, r0
   1975c:	mov	r7, r2
   19760:	b	19788 <__assert_fail@plt+0x8454>
   19764:	lsl	r1, r7, #1
   19768:	lsl	r0, r6, #1
   1976c:	cmp	r7, #0
   19770:	lsr	r3, r7, #31
   19774:	orr	r1, r1, r6, lsr #31
   19778:	mvnlt	r0, #0
   1977c:	mvnlt	r1, #0
   19780:	mov	r6, r0
   19784:	mov	r7, r1
   19788:	ldr	r1, [sp, #32]
   1978c:	ldr	r2, [sp, #28]
   19790:	orr	r8, r3, r8
   19794:	add	r0, r1, r2
   19798:	str	r0, [r9]
   1979c:	ldrb	r0, [r1, r2]
   197a0:	cmp	r0, #0
   197a4:	orrne	r8, r8, #2
   197a8:	ldr	r0, [sp, #36]	; 0x24
   197ac:	strd	r6, [r0]
   197b0:	mov	r0, r8
   197b4:	sub	sp, fp, #28
   197b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197bc:	movw	r0, #47284	; 0xb8b4
   197c0:	movw	r1, #47322	; 0xb8da
   197c4:	movw	r3, #47338	; 0xb8ea
   197c8:	mov	r2, #85	; 0x55
   197cc:	movt	r0, #1
   197d0:	movt	r1, #1
   197d4:	movt	r3, #1
   197d8:	bl	11334 <__assert_fail@plt>
   197dc:	clz	r2, r1
   197e0:	clz	r3, r0
   197e4:	lsr	r2, r2, #5
   197e8:	lsr	r3, r3, #5
   197ec:	orrs	r2, r3, r2
   197f0:	movwne	r1, #1
   197f4:	movwne	r0, #1
   197f8:	cmp	r1, #0
   197fc:	beq	1982c <__assert_fail@plt+0x84f8>
   19800:	mvn	r2, #-2147483648	; 0x80000000
   19804:	udiv	r2, r2, r1
   19808:	cmp	r2, r0
   1980c:	bcs	1982c <__assert_fail@plt+0x84f8>
   19810:	push	{fp, lr}
   19814:	mov	fp, sp
   19818:	bl	11214 <__errno_location@plt>
   1981c:	mov	r1, #12
   19820:	str	r1, [r0]
   19824:	mov	r0, #0
   19828:	pop	{fp, pc}
   1982c:	b	11070 <calloc@plt>
   19830:	cmp	r0, #0
   19834:	movweq	r0, #1
   19838:	cmn	r0, #1
   1983c:	ble	19844 <__assert_fail@plt+0x8510>
   19840:	b	1119c <malloc@plt>
   19844:	push	{fp, lr}
   19848:	mov	fp, sp
   1984c:	bl	11214 <__errno_location@plt>
   19850:	mov	r1, #12
   19854:	str	r1, [r0]
   19858:	mov	r0, #0
   1985c:	pop	{fp, pc}
   19860:	push	{fp, lr}
   19864:	mov	fp, sp
   19868:	cmp	r0, #0
   1986c:	beq	19888 <__assert_fail@plt+0x8554>
   19870:	cmp	r1, #0
   19874:	beq	19894 <__assert_fail@plt+0x8560>
   19878:	cmn	r1, #1
   1987c:	ble	198a0 <__assert_fail@plt+0x856c>
   19880:	pop	{fp, lr}
   19884:	b	11118 <realloc@plt>
   19888:	mov	r0, r1
   1988c:	pop	{fp, lr}
   19890:	b	19830 <__assert_fail@plt+0x84fc>
   19894:	bl	15af8 <__assert_fail@plt+0x47c4>
   19898:	mov	r0, #0
   1989c:	pop	{fp, pc}
   198a0:	bl	11214 <__errno_location@plt>
   198a4:	mov	r1, #12
   198a8:	str	r1, [r0]
   198ac:	mov	r0, #0
   198b0:	pop	{fp, pc}
   198b4:	push	{r4, r5, r6, sl, fp, lr}
   198b8:	add	fp, sp, #16
   198bc:	mov	r4, r0
   198c0:	bl	1116c <__fpending@plt>
   198c4:	ldr	r6, [r4]
   198c8:	mov	r5, r0
   198cc:	mov	r0, r4
   198d0:	bl	15a00 <__assert_fail@plt+0x46cc>
   198d4:	tst	r6, #32
   198d8:	bne	19910 <__assert_fail@plt+0x85dc>
   198dc:	cmp	r0, #0
   198e0:	mov	r4, r0
   198e4:	mvnne	r4, #0
   198e8:	cmp	r5, #0
   198ec:	bne	1991c <__assert_fail@plt+0x85e8>
   198f0:	cmp	r0, #0
   198f4:	beq	1991c <__assert_fail@plt+0x85e8>
   198f8:	bl	11214 <__errno_location@plt>
   198fc:	ldr	r0, [r0]
   19900:	subs	r4, r0, #9
   19904:	mvnne	r4, #0
   19908:	mov	r0, r4
   1990c:	pop	{r4, r5, r6, sl, fp, pc}
   19910:	mvn	r4, #0
   19914:	cmp	r0, #0
   19918:	beq	19924 <__assert_fail@plt+0x85f0>
   1991c:	mov	r0, r4
   19920:	pop	{r4, r5, r6, sl, fp, pc}
   19924:	bl	11214 <__errno_location@plt>
   19928:	mov	r1, #0
   1992c:	str	r1, [r0]
   19930:	mov	r0, r4
   19934:	pop	{r4, r5, r6, sl, fp, pc}
   19938:	push	{fp, lr}
   1993c:	mov	fp, sp
   19940:	mov	r0, #14
   19944:	bl	112c8 <nl_langinfo@plt>
   19948:	movw	r1, #44335	; 0xad2f
   1994c:	cmp	r0, #0
   19950:	movt	r1, #1
   19954:	movne	r1, r0
   19958:	movw	r0, #47417	; 0xb939
   1995c:	ldrb	r2, [r1]
   19960:	movt	r0, #1
   19964:	cmp	r2, #0
   19968:	movne	r0, r1
   1996c:	pop	{fp, pc}
   19970:	push	{r4, r5, r6, r7, fp, lr}
   19974:	add	fp, sp, #16
   19978:	sub	sp, sp, #8
   1997c:	add	r5, sp, #4
   19980:	cmp	r0, #0
   19984:	mov	r7, r2
   19988:	mov	r4, r1
   1998c:	movne	r5, r0
   19990:	mov	r0, r5
   19994:	bl	11178 <mbrtowc@plt>
   19998:	mov	r6, r0
   1999c:	cmp	r7, #0
   199a0:	beq	199c4 <__assert_fail@plt+0x8690>
   199a4:	cmn	r6, #2
   199a8:	bcc	199c4 <__assert_fail@plt+0x8690>
   199ac:	mov	r0, #0
   199b0:	bl	19a0c <__assert_fail@plt+0x86d8>
   199b4:	cmp	r0, #0
   199b8:	ldrbeq	r0, [r4]
   199bc:	moveq	r6, #1
   199c0:	streq	r0, [r5]
   199c4:	mov	r0, r6
   199c8:	sub	sp, fp, #16
   199cc:	pop	{r4, r5, r6, r7, fp, pc}
   199d0:	cmp	r2, #0
   199d4:	beq	19a04 <__assert_fail@plt+0x86d0>
   199d8:	mvn	r3, #0
   199dc:	udiv	r3, r3, r2
   199e0:	cmp	r3, r1
   199e4:	bcs	19a04 <__assert_fail@plt+0x86d0>
   199e8:	push	{fp, lr}
   199ec:	mov	fp, sp
   199f0:	bl	11214 <__errno_location@plt>
   199f4:	mov	r1, #12
   199f8:	str	r1, [r0]
   199fc:	mov	r0, #0
   19a00:	pop	{fp, pc}
   19a04:	mul	r1, r2, r1
   19a08:	b	19860 <__assert_fail@plt+0x852c>
   19a0c:	push	{r4, sl, fp, lr}
   19a10:	add	fp, sp, #8
   19a14:	sub	sp, sp, #264	; 0x108
   19a18:	add	r1, sp, #7
   19a1c:	movw	r2, #257	; 0x101
   19a20:	bl	19a70 <__assert_fail@plt+0x873c>
   19a24:	mov	r4, #0
   19a28:	cmp	r0, #0
   19a2c:	bne	19a64 <__assert_fail@plt+0x8730>
   19a30:	movw	r1, #47423	; 0xb93f
   19a34:	add	r0, sp, #7
   19a38:	movt	r1, #1
   19a3c:	bl	11094 <strcmp@plt>
   19a40:	cmp	r0, #0
   19a44:	beq	19a64 <__assert_fail@plt+0x8730>
   19a48:	movw	r1, #47425	; 0xb941
   19a4c:	add	r0, sp, #7
   19a50:	movt	r1, #1
   19a54:	bl	11094 <strcmp@plt>
   19a58:	mov	r4, r0
   19a5c:	cmp	r0, #0
   19a60:	movwne	r4, #1
   19a64:	mov	r0, r4
   19a68:	sub	sp, fp, #8
   19a6c:	pop	{r4, sl, fp, pc}
   19a70:	push	{r4, r5, r6, r7, fp, lr}
   19a74:	add	fp, sp, #16
   19a78:	mov	r4, r1
   19a7c:	mov	r1, #0
   19a80:	mov	r6, r2
   19a84:	bl	112b0 <setlocale@plt>
   19a88:	cmp	r0, #0
   19a8c:	beq	19abc <__assert_fail@plt+0x8788>
   19a90:	mov	r7, r0
   19a94:	bl	111fc <strlen@plt>
   19a98:	cmp	r0, r6
   19a9c:	bcs	19adc <__assert_fail@plt+0x87a8>
   19aa0:	add	r2, r0, #1
   19aa4:	mov	r0, r4
   19aa8:	mov	r1, r7
   19aac:	bl	110d0 <memcpy@plt>
   19ab0:	mov	r5, #0
   19ab4:	mov	r0, r5
   19ab8:	pop	{r4, r5, r6, r7, fp, pc}
   19abc:	cmp	r6, #0
   19ac0:	mov	r5, #22
   19ac4:	movne	r0, #0
   19ac8:	strbne	r0, [r4]
   19acc:	movne	r0, r5
   19ad0:	popne	{r4, r5, r6, r7, fp, pc}
   19ad4:	mov	r0, r5
   19ad8:	pop	{r4, r5, r6, r7, fp, pc}
   19adc:	mov	r5, #34	; 0x22
   19ae0:	cmp	r6, #0
   19ae4:	beq	19b04 <__assert_fail@plt+0x87d0>
   19ae8:	sub	r6, r6, #1
   19aec:	mov	r0, r4
   19af0:	mov	r1, r7
   19af4:	mov	r2, r6
   19af8:	bl	110d0 <memcpy@plt>
   19afc:	mov	r0, #0
   19b00:	strb	r0, [r4, r6]
   19b04:	mov	r0, r5
   19b08:	pop	{r4, r5, r6, r7, fp, pc}
   19b0c:	mov	r1, #0
   19b10:	b	112b0 <setlocale@plt>
   19b14:	cmp	r3, #0
   19b18:	cmpeq	r2, #0
   19b1c:	bne	19b34 <__assert_fail@plt+0x8800>
   19b20:	cmp	r1, #0
   19b24:	cmpeq	r0, #0
   19b28:	mvnne	r1, #0
   19b2c:	mvnne	r0, #0
   19b30:	b	19b50 <__assert_fail@plt+0x881c>
   19b34:	sub	sp, sp, #8
   19b38:	push	{sp, lr}
   19b3c:	bl	19b60 <__assert_fail@plt+0x882c>
   19b40:	ldr	lr, [sp, #4]
   19b44:	add	sp, sp, #8
   19b48:	pop	{r2, r3}
   19b4c:	bx	lr
   19b50:	push	{r1, lr}
   19b54:	mov	r0, #8
   19b58:	bl	11088 <raise@plt>
   19b5c:	pop	{r1, pc}
   19b60:	cmp	r1, r3
   19b64:	cmpeq	r0, r2
   19b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b6c:	mov	r4, r0
   19b70:	movcc	r0, #0
   19b74:	mov	r5, r1
   19b78:	ldr	lr, [sp, #36]	; 0x24
   19b7c:	movcc	r1, r0
   19b80:	bcc	19c7c <__assert_fail@plt+0x8948>
   19b84:	cmp	r3, #0
   19b88:	clzeq	ip, r2
   19b8c:	clzne	ip, r3
   19b90:	addeq	ip, ip, #32
   19b94:	cmp	r5, #0
   19b98:	clzeq	r1, r4
   19b9c:	addeq	r1, r1, #32
   19ba0:	clzne	r1, r5
   19ba4:	sub	ip, ip, r1
   19ba8:	sub	sl, ip, #32
   19bac:	lsl	r9, r3, ip
   19bb0:	rsb	fp, ip, #32
   19bb4:	orr	r9, r9, r2, lsl sl
   19bb8:	orr	r9, r9, r2, lsr fp
   19bbc:	lsl	r8, r2, ip
   19bc0:	cmp	r5, r9
   19bc4:	cmpeq	r4, r8
   19bc8:	movcc	r0, #0
   19bcc:	movcc	r1, r0
   19bd0:	bcc	19bec <__assert_fail@plt+0x88b8>
   19bd4:	mov	r0, #1
   19bd8:	subs	r4, r4, r8
   19bdc:	lsl	r1, r0, sl
   19be0:	orr	r1, r1, r0, lsr fp
   19be4:	lsl	r0, r0, ip
   19be8:	sbc	r5, r5, r9
   19bec:	cmp	ip, #0
   19bf0:	beq	19c7c <__assert_fail@plt+0x8948>
   19bf4:	lsr	r6, r8, #1
   19bf8:	orr	r6, r6, r9, lsl #31
   19bfc:	lsr	r7, r9, #1
   19c00:	mov	r2, ip
   19c04:	b	19c28 <__assert_fail@plt+0x88f4>
   19c08:	subs	r3, r4, r6
   19c0c:	sbc	r8, r5, r7
   19c10:	adds	r3, r3, r3
   19c14:	adc	r8, r8, r8
   19c18:	adds	r4, r3, #1
   19c1c:	adc	r5, r8, #0
   19c20:	subs	r2, r2, #1
   19c24:	beq	19c44 <__assert_fail@plt+0x8910>
   19c28:	cmp	r5, r7
   19c2c:	cmpeq	r4, r6
   19c30:	bcs	19c08 <__assert_fail@plt+0x88d4>
   19c34:	adds	r4, r4, r4
   19c38:	adc	r5, r5, r5
   19c3c:	subs	r2, r2, #1
   19c40:	bne	19c28 <__assert_fail@plt+0x88f4>
   19c44:	lsr	r3, r4, ip
   19c48:	orr	r3, r3, r5, lsl fp
   19c4c:	lsr	r2, r5, ip
   19c50:	orr	r3, r3, r5, lsr sl
   19c54:	adds	r0, r0, r4
   19c58:	mov	r4, r3
   19c5c:	lsl	r3, r2, ip
   19c60:	orr	r3, r3, r4, lsl sl
   19c64:	lsl	ip, r4, ip
   19c68:	orr	r3, r3, r4, lsr fp
   19c6c:	adc	r1, r1, r5
   19c70:	subs	r0, r0, ip
   19c74:	mov	r5, r2
   19c78:	sbc	r1, r1, r3
   19c7c:	cmp	lr, #0
   19c80:	strdne	r4, [lr]
   19c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c8c:	mov	r7, r0
   19c90:	ldr	r6, [pc, #72]	; 19ce0 <__assert_fail@plt+0x89ac>
   19c94:	ldr	r5, [pc, #72]	; 19ce4 <__assert_fail@plt+0x89b0>
   19c98:	add	r6, pc, r6
   19c9c:	add	r5, pc, r5
   19ca0:	sub	r6, r6, r5
   19ca4:	mov	r8, r1
   19ca8:	mov	r9, r2
   19cac:	bl	11050 <calloc@plt-0x20>
   19cb0:	asrs	r6, r6, #2
   19cb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19cb8:	mov	r4, #0
   19cbc:	add	r4, r4, #1
   19cc0:	ldr	r3, [r5], #4
   19cc4:	mov	r2, r9
   19cc8:	mov	r1, r8
   19ccc:	mov	r0, r7
   19cd0:	blx	r3
   19cd4:	cmp	r6, r4
   19cd8:	bne	19cbc <__assert_fail@plt+0x8988>
   19cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ce0:	andeq	r2, r1, ip, ror #4
   19ce4:	andeq	r2, r1, r4, ror #4
   19ce8:	bx	lr
   19cec:	ldr	r3, [pc, #12]	; 19d00 <__assert_fail@plt+0x89cc>
   19cf0:	mov	r1, #0
   19cf4:	add	r3, pc, r3
   19cf8:	ldr	r2, [r3]
   19cfc:	b	1122c <__cxa_atexit@plt>
   19d00:	andeq	r2, r1, r8, lsl #8

Disassembly of section .fini:

00019d04 <.fini>:
   19d04:	push	{r3, lr}
   19d08:	pop	{r3, pc}
