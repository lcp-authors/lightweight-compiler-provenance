
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010f94 <.init>:
   10f94:	push	{r3, lr}
   10f98:	bl	11ad0 <__assert_fail@plt+0x7f8>
   10f9c:	pop	{r3, pc}

Disassembly of section .plt:

00010fa0 <pthread_mutex_unlock@plt-0x14>:
   10fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fa4:	ldr	lr, [pc, #4]	; 10fb0 <pthread_mutex_unlock@plt-0x4>
   10fa8:	add	lr, pc, lr
   10fac:	ldr	pc, [lr, #8]!
   10fb0:	andeq	r4, r2, r0, asr r0

00010fb4 <pthread_mutex_unlock@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #36, 20	; 0x24000
   10fbc:	ldr	pc, [ip, #80]!	; 0x50

00010fc0 <calloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #36, 20	; 0x24000
   10fc8:	ldr	pc, [ip, #72]!	; 0x48

00010fcc <fputs_unlocked@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #36, 20	; 0x24000
   10fd4:	ldr	pc, [ip, #64]!	; 0x40

00010fd8 <wctype@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #36, 20	; 0x24000
   10fe0:	ldr	pc, [ip, #56]!	; 0x38

00010fe4 <raise@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #36, 20	; 0x24000
   10fec:	ldr	pc, [ip, #48]!	; 0x30

00010ff0 <wcrtomb@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #36, 20	; 0x24000
   10ff8:	ldr	pc, [ip, #40]!	; 0x28

00010ffc <iswctype@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #36, 20	; 0x24000
   11004:	ldr	pc, [ip, #32]!

00011008 <strcmp@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #36, 20	; 0x24000
   11010:	ldr	pc, [ip, #24]!

00011014 <posix_fadvise64@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #36, 20	; 0x24000
   1101c:	ldr	pc, [ip, #16]!

00011020 <pthread_mutex_destroy@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #36, 20	; 0x24000
   11028:	ldr	pc, [ip, #8]!

0001102c <fflush@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #36, 20	; 0x24000
   11034:	ldr	pc, [ip, #0]!

00011038 <memmove@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #143360	; 0x23000
   11040:	ldr	pc, [ip, #4088]!	; 0xff8

00011044 <free@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #143360	; 0x23000
   1104c:	ldr	pc, [ip, #4080]!	; 0xff0

00011050 <pthread_mutex_lock@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #143360	; 0x23000
   11058:	ldr	pc, [ip, #4072]!	; 0xfe8

0001105c <_exit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #143360	; 0x23000
   11064:	ldr	pc, [ip, #4064]!	; 0xfe0

00011068 <memcpy@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #143360	; 0x23000
   11070:	ldr	pc, [ip, #4056]!	; 0xfd8

00011074 <pthread_mutex_init@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #143360	; 0x23000
   1107c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011080 <towlower@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #143360	; 0x23000
   11088:	ldr	pc, [ip, #4040]!	; 0xfc8

0001108c <mbsinit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #143360	; 0x23000
   11094:	ldr	pc, [ip, #4032]!	; 0xfc0

00011098 <fwrite_unlocked@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #143360	; 0x23000
   110a0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110a4 <memcmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #143360	; 0x23000
   110ac:	ldr	pc, [ip, #4016]!	; 0xfb0

000110b0 <stpcpy@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #143360	; 0x23000
   110b8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110bc <fputc_unlocked@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #143360	; 0x23000
   110c4:	ldr	pc, [ip, #4000]!	; 0xfa0

000110c8 <dcgettext@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #143360	; 0x23000
   110d0:	ldr	pc, [ip, #3992]!	; 0xf98

000110d4 <realloc@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #143360	; 0x23000
   110dc:	ldr	pc, [ip, #3984]!	; 0xf90

000110e0 <textdomain@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #143360	; 0x23000
   110e8:	ldr	pc, [ip, #3976]!	; 0xf88

000110ec <iswprint@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #143360	; 0x23000
   110f4:	ldr	pc, [ip, #3968]!	; 0xf80

000110f8 <fwrite@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #143360	; 0x23000
   11100:	ldr	pc, [ip, #3960]!	; 0xf78

00011104 <lseek64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #143360	; 0x23000
   1110c:	ldr	pc, [ip, #3952]!	; 0xf70

00011110 <__ctype_get_mb_cur_max@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #143360	; 0x23000
   11118:	ldr	pc, [ip, #3944]!	; 0xf68

0001111c <strcpy@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #143360	; 0x23000
   11124:	ldr	pc, [ip, #3936]!	; 0xf60

00011128 <__fpending@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #143360	; 0x23000
   11130:	ldr	pc, [ip, #3928]!	; 0xf58

00011134 <mbrtowc@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #143360	; 0x23000
   1113c:	ldr	pc, [ip, #3920]!	; 0xf50

00011140 <error@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #143360	; 0x23000
   11148:	ldr	pc, [ip, #3912]!	; 0xf48

0001114c <malloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #143360	; 0x23000
   11154:	ldr	pc, [ip, #3904]!	; 0xf40

00011158 <__libc_start_main@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #143360	; 0x23000
   11160:	ldr	pc, [ip, #3896]!	; 0xf38

00011164 <__freading@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #143360	; 0x23000
   1116c:	ldr	pc, [ip, #3888]!	; 0xf30

00011170 <__ctype_tolower_loc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #143360	; 0x23000
   11178:	ldr	pc, [ip, #3880]!	; 0xf28

0001117c <__ctype_toupper_loc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #143360	; 0x23000
   11184:	ldr	pc, [ip, #3872]!	; 0xf20

00011188 <__gmon_start__@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #143360	; 0x23000
   11190:	ldr	pc, [ip, #3864]!	; 0xf18

00011194 <getopt_long@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #143360	; 0x23000
   1119c:	ldr	pc, [ip, #3856]!	; 0xf10

000111a0 <__ctype_b_loc@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #143360	; 0x23000
   111a8:	ldr	pc, [ip, #3848]!	; 0xf08

000111ac <exit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #143360	; 0x23000
   111b4:	ldr	pc, [ip, #3840]!	; 0xf00

000111b8 <strlen@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #143360	; 0x23000
   111c0:	ldr	pc, [ip, #3832]!	; 0xef8

000111c4 <strchr@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #143360	; 0x23000
   111cc:	ldr	pc, [ip, #3824]!	; 0xef0

000111d0 <__errno_location@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #143360	; 0x23000
   111d8:	ldr	pc, [ip, #3816]!	; 0xee8

000111dc <iswalnum@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #143360	; 0x23000
   111e4:	ldr	pc, [ip, #3808]!	; 0xee0

000111e8 <__cxa_atexit@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #143360	; 0x23000
   111f0:	ldr	pc, [ip, #3800]!	; 0xed8

000111f4 <memset@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #143360	; 0x23000
   111fc:	ldr	pc, [ip, #3792]!	; 0xed0

00011200 <btowc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #143360	; 0x23000
   11208:	ldr	pc, [ip, #3784]!	; 0xec8

0001120c <__printf_chk@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #143360	; 0x23000
   11214:	ldr	pc, [ip, #3776]!	; 0xec0

00011218 <fileno@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #143360	; 0x23000
   11220:	ldr	pc, [ip, #3768]!	; 0xeb8

00011224 <__fprintf_chk@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #143360	; 0x23000
   1122c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011230 <fclose@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #143360	; 0x23000
   11238:	ldr	pc, [ip, #3752]!	; 0xea8

0001123c <fseeko64@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #143360	; 0x23000
   11244:	ldr	pc, [ip, #3744]!	; 0xea0

00011248 <__uflow@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #143360	; 0x23000
   11250:	ldr	pc, [ip, #3736]!	; 0xe98

00011254 <__overflow@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #143360	; 0x23000
   1125c:	ldr	pc, [ip, #3728]!	; 0xe90

00011260 <setlocale@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #143360	; 0x23000
   11268:	ldr	pc, [ip, #3720]!	; 0xe88

0001126c <strrchr@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #143360	; 0x23000
   11274:	ldr	pc, [ip, #3712]!	; 0xe80

00011278 <nl_langinfo@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #143360	; 0x23000
   11280:	ldr	pc, [ip, #3704]!	; 0xe78

00011284 <clearerr_unlocked@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #143360	; 0x23000
   1128c:	ldr	pc, [ip, #3696]!	; 0xe70

00011290 <__strtoll_internal@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #143360	; 0x23000
   11298:	ldr	pc, [ip, #3688]!	; 0xe68

0001129c <fopen64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #143360	; 0x23000
   112a4:	ldr	pc, [ip, #3680]!	; 0xe60

000112a8 <bindtextdomain@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #143360	; 0x23000
   112b0:	ldr	pc, [ip, #3672]!	; 0xe58

000112b4 <towupper@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #143360	; 0x23000
   112bc:	ldr	pc, [ip, #3664]!	; 0xe50

000112c0 <strncmp@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #143360	; 0x23000
   112c8:	ldr	pc, [ip, #3656]!	; 0xe48

000112cc <abort@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #143360	; 0x23000
   112d4:	ldr	pc, [ip, #3648]!	; 0xe40

000112d8 <__assert_fail@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #143360	; 0x23000
   112e0:	ldr	pc, [ip, #3640]!	; 0xe38

Disassembly of section .text:

000112e4 <.text>:
   112e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e8:	mov	r6, r0
   112ec:	sub	sp, sp, #36	; 0x24
   112f0:	ldr	r0, [r1]
   112f4:	mov	r5, r1
   112f8:	bl	1297c <__assert_fail@plt+0x16a4>
   112fc:	ldr	r1, [pc, #1776]	; 119f4 <__assert_fail@plt+0x71c>
   11300:	mov	r0, #6
   11304:	bl	11260 <setlocale@plt>
   11308:	ldr	r1, [pc, #1768]	; 119f8 <__assert_fail@plt+0x720>
   1130c:	ldr	r0, [pc, #1768]	; 119fc <__assert_fail@plt+0x724>
   11310:	bl	112a8 <bindtextdomain@plt>
   11314:	ldr	r0, [pc, #1760]	; 119fc <__assert_fail@plt+0x724>
   11318:	bl	110e0 <textdomain@plt>
   1131c:	ldr	r0, [pc, #1756]	; 11a00 <__assert_fail@plt+0x728>
   11320:	bl	23a74 <__assert_fail@plt+0x1279c>
   11324:	ldr	r7, [pc, #1752]	; 11a04 <__assert_fail@plt+0x72c>
   11328:	ldr	r2, [pc, #1752]	; 11a08 <__assert_fail@plt+0x730>
   1132c:	ldr	r8, [pc, #1752]	; 11a0c <__assert_fail@plt+0x734>
   11330:	ldr	r9, [pc, #1752]	; 11a10 <__assert_fail@plt+0x738>
   11334:	ldr	fp, [pc, #1752]	; 11a14 <__assert_fail@plt+0x73c>
   11338:	mov	sl, #1
   1133c:	mov	r3, #0
   11340:	strb	r3, [r2, #16]
   11344:	mov	r4, #0
   11348:	str	r4, [sp]
   1134c:	mov	r3, r7
   11350:	mov	r2, r8
   11354:	mov	r1, r5
   11358:	mov	r0, r6
   1135c:	bl	11194 <getopt_long@plt>
   11360:	cmn	r0, #1
   11364:	beq	11840 <__assert_fail@plt+0x568>
   11368:	add	r0, r0, #3
   1136c:	cmp	r0, #122	; 0x7a
   11370:	ldrls	pc, [pc, r0, lsl #2]
   11374:	b	117f8 <__assert_fail@plt+0x520>
   11378:	andeq	r1, r1, r8, asr #14
   1137c:	andeq	r1, r1, r0, asr #14
   11380:	strdeq	r1, [r1], -r8
   11384:	strdeq	r1, [r1], -r8
   11388:	strdeq	r1, [r1], -r8
   1138c:	strdeq	r1, [r1], -r8
   11390:	strdeq	r1, [r1], -r8
   11394:	strdeq	r1, [r1], -r8
   11398:	strdeq	r1, [r1], -r8
   1139c:	strdeq	r1, [r1], -r8
   113a0:	strdeq	r1, [r1], -r8
   113a4:	strdeq	r1, [r1], -r8
   113a8:	strdeq	r1, [r1], -r8
   113ac:	strdeq	r1, [r1], -r8
   113b0:	strdeq	r1, [r1], -r8
   113b4:	strdeq	r1, [r1], -r8
   113b8:	strdeq	r1, [r1], -r8
   113bc:	strdeq	r1, [r1], -r8
   113c0:	strdeq	r1, [r1], -r8
   113c4:	strdeq	r1, [r1], -r8
   113c8:	strdeq	r1, [r1], -r8
   113cc:	strdeq	r1, [r1], -r8
   113d0:	strdeq	r1, [r1], -r8
   113d4:	strdeq	r1, [r1], -r8
   113d8:	strdeq	r1, [r1], -r8
   113dc:	strdeq	r1, [r1], -r8
   113e0:	strdeq	r1, [r1], -r8
   113e4:	strdeq	r1, [r1], -r8
   113e8:	strdeq	r1, [r1], -r8
   113ec:	strdeq	r1, [r1], -r8
   113f0:	strdeq	r1, [r1], -r8
   113f4:	strdeq	r1, [r1], -r8
   113f8:	strdeq	r1, [r1], -r8
   113fc:	strdeq	r1, [r1], -r8
   11400:	strdeq	r1, [r1], -r8
   11404:	strdeq	r1, [r1], -r8
   11408:	strdeq	r1, [r1], -r8
   1140c:	strdeq	r1, [r1], -r8
   11410:	strdeq	r1, [r1], -r8
   11414:	strdeq	r1, [r1], -r8
   11418:	strdeq	r1, [r1], -r8
   1141c:	strdeq	r1, [r1], -r8
   11420:	strdeq	r1, [r1], -r8
   11424:	strdeq	r1, [r1], -r8
   11428:	strdeq	r1, [r1], -r8
   1142c:	strdeq	r1, [r1], -r8
   11430:	strdeq	r1, [r1], -r8
   11434:	strdeq	r1, [r1], -r8
   11438:	strdeq	r1, [r1], -r8
   1143c:	strdeq	r1, [r1], -r8
   11440:	strdeq	r1, [r1], -r8
   11444:	strdeq	r1, [r1], -r8
   11448:	strdeq	r1, [r1], -r8
   1144c:	strdeq	r1, [r1], -r8
   11450:	strdeq	r1, [r1], -r8
   11454:	strdeq	r1, [r1], -r8
   11458:	strdeq	r1, [r1], -r8
   1145c:	strdeq	r1, [r1], -r8
   11460:	strdeq	r1, [r1], -r8
   11464:	strdeq	r1, [r1], -r8
   11468:	strdeq	r1, [r1], -r8
   1146c:	strdeq	r1, [r1], -r8
   11470:	strdeq	r1, [r1], -r8
   11474:	strdeq	r1, [r1], -r8
   11478:	strdeq	r1, [r1], -r8
   1147c:	strdeq	r1, [r1], -r8
   11480:	strdeq	r1, [r1], -r8
   11484:	strdeq	r1, [r1], -r8
   11488:	strdeq	r1, [r1], -r8
   1148c:	strdeq	r1, [r1], -r8
   11490:	strdeq	r1, [r1], -r8
   11494:	strdeq	r1, [r1], -r8
   11498:	strdeq	r1, [r1], -r8
   1149c:	strdeq	r1, [r1], -r8
   114a0:	strdeq	r1, [r1], -r8
   114a4:	strdeq	r1, [r1], -r8
   114a8:	strdeq	r1, [r1], -r8
   114ac:	strdeq	r1, [r1], -r8
   114b0:	strdeq	r1, [r1], -r8
   114b4:	strdeq	r1, [r1], -r8
   114b8:	strdeq	r1, [r1], -r8
   114bc:	strdeq	r1, [r1], -r8
   114c0:	strdeq	r1, [r1], -r8
   114c4:	strdeq	r1, [r1], -r8
   114c8:	strdeq	r1, [r1], -r8
   114cc:	strdeq	r1, [r1], -r8
   114d0:	strdeq	r1, [r1], -r8
   114d4:	strdeq	r1, [r1], -r8
   114d8:	strdeq	r1, [r1], -r8
   114dc:	strdeq	r1, [r1], -r8
   114e0:	strdeq	r1, [r1], -r8
   114e4:	strdeq	r1, [r1], -r8
   114e8:	strdeq	r1, [r1], -r8
   114ec:	strdeq	r1, [r1], -r8
   114f0:	strdeq	r1, [r1], -r8
   114f4:	strdeq	r1, [r1], -r8
   114f8:	strdeq	r1, [r1], -r8
   114fc:	strdeq	r1, [r1], -r8
   11500:	strdeq	r1, [r1], -r8
   11504:	strdeq	r1, [r1], -r8
   11508:	strdeq	r1, [r1], -r8
   1150c:	ldrdeq	r1, [r1], -r4
   11510:	strdeq	r1, [r1], -r8
   11514:	andeq	r1, r1, r4, lsl #15
   11518:	strdeq	r1, [r1], -r8
   1151c:	andeq	r1, r1, ip, lsl r7
   11520:	strdeq	r1, [r1], -r8
   11524:	ldrdeq	r1, [r1], -r0
   11528:	andeq	r1, r1, r4, lsl #13
   1152c:	strdeq	r1, [r1], -r8
   11530:	strdeq	r1, [r1], -r8
   11534:	andeq	r1, r1, r8, lsr r6
   11538:	strdeq	r1, [r1], -r8
   1153c:	andeq	r1, r1, r4, lsl r6
   11540:	strdeq	r1, [r1], -r8
   11544:	andeq	r1, r1, r8, lsl #12
   11548:	strdeq	r1, [r1], -r8
   1154c:	strdeq	r1, [r1], -r8
   11550:	strdeq	r1, [r1], -ip
   11554:	strdeq	r1, [r1], -r8
   11558:	strdeq	r1, [r1], -r8
   1155c:			; <UNDEFINED> instruction: 0x000115b0
   11560:	andeq	r1, r1, r4, ror #10
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #1192]	; 11a18 <__assert_fail@plt+0x740>
   1156c:	mov	r0, #0
   11570:	ldr	r4, [r9]
   11574:	bl	110c8 <dcgettext@plt>
   11578:	ldr	r1, [pc, #1140]	; 119f4 <__assert_fail@plt+0x71c>
   1157c:	mvn	r2, #-2147483648	; 0x80000000
   11580:	mov	r3, #0
   11584:	str	r1, [sp, #8]
   11588:	mov	r1, #0
   1158c:	strd	r2, [sp]
   11590:	str	r1, [sp, #16]
   11594:	mov	r2, #1
   11598:	mov	r3, #0
   1159c:	str	r0, [sp, #12]
   115a0:	mov	r0, r4
   115a4:	bl	22944 <__assert_fail@plt+0x1166c>
   115a8:	str	r0, [fp]
   115ac:	b	11344 <__assert_fail@plt+0x6c>
   115b0:	mov	r2, #5
   115b4:	ldr	r1, [pc, #1120]	; 11a1c <__assert_fail@plt+0x744>
   115b8:	mov	r0, #0
   115bc:	ldr	r4, [r9]
   115c0:	bl	110c8 <dcgettext@plt>
   115c4:	ldr	ip, [pc, #1064]	; 119f4 <__assert_fail@plt+0x71c>
   115c8:	mvn	r2, #0
   115cc:	mvn	r3, #-2147483648	; 0x80000000
   115d0:	mov	r1, #0
   115d4:	strd	r2, [sp]
   115d8:	str	ip, [sp, #8]
   115dc:	str	r1, [sp, #16]
   115e0:	mov	r2, #0
   115e4:	mov	r3, #-2147483648	; 0x80000000
   115e8:	str	r0, [sp, #12]
   115ec:	mov	r0, r4
   115f0:	bl	22944 <__assert_fail@plt+0x1166c>
   115f4:	strd	r0, [fp, #24]
   115f8:	b	11344 <__assert_fail@plt+0x6c>
   115fc:	ldr	r3, [r9]
   11600:	str	r3, [fp, #8]
   11604:	b	11344 <__assert_fail@plt+0x6c>
   11608:	mov	r3, #0
   1160c:	strb	r3, [fp, #52]	; 0x34
   11610:	b	11344 <__assert_fail@plt+0x6c>
   11614:	ldr	r4, [r9]
   11618:	ldr	r1, [pc, #1024]	; 11a20 <__assert_fail@plt+0x748>
   1161c:	mov	r0, r4
   11620:	bl	11008 <strcmp@plt>
   11624:	cmp	r0, #0
   11628:	bne	11800 <__assert_fail@plt+0x528>
   1162c:	ldr	r3, [pc, #1008]	; 11a24 <__assert_fail@plt+0x74c>
   11630:	str	r3, [fp, #4]
   11634:	b	11344 <__assert_fail@plt+0x6c>
   11638:	mov	r2, #5
   1163c:	ldr	r1, [pc, #996]	; 11a28 <__assert_fail@plt+0x750>
   11640:	mov	r0, #0
   11644:	ldr	r4, [r9]
   11648:	bl	110c8 <dcgettext@plt>
   1164c:	ldr	ip, [pc, #928]	; 119f4 <__assert_fail@plt+0x71c>
   11650:	mvn	r2, #0
   11654:	mvn	r3, #-2147483648	; 0x80000000
   11658:	mov	r1, #0
   1165c:	strd	r2, [sp]
   11660:	str	ip, [sp, #8]
   11664:	str	r1, [sp, #16]
   11668:	mov	r2, #1
   1166c:	mov	r3, #0
   11670:	str	r0, [sp, #12]
   11674:	mov	r0, r4
   11678:	bl	22944 <__assert_fail@plt+0x1166c>
   1167c:	strd	r0, [fp, #40]	; 0x28
   11680:	b	11344 <__assert_fail@plt+0x6c>
   11684:	mov	r2, #5
   11688:	ldr	r1, [pc, #924]	; 11a2c <__assert_fail@plt+0x754>
   1168c:	mov	r0, #0
   11690:	ldr	r4, [r9]
   11694:	bl	110c8 <dcgettext@plt>
   11698:	ldr	ip, [pc, #852]	; 119f4 <__assert_fail@plt+0x71c>
   1169c:	mvn	r2, #0
   116a0:	mvn	r3, #-2147483648	; 0x80000000
   116a4:	mov	r1, #0
   116a8:	strd	r2, [sp]
   116ac:	str	ip, [sp, #8]
   116b0:	str	r1, [sp, #16]
   116b4:	mov	r2, #0
   116b8:	mov	r3, #-2147483648	; 0x80000000
   116bc:	str	r0, [sp, #12]
   116c0:	mov	r0, r4
   116c4:	bl	22944 <__assert_fail@plt+0x1166c>
   116c8:	strd	r0, [fp, #16]
   116cc:	b	11344 <__assert_fail@plt+0x6c>
   116d0:	ldr	r2, [pc, #856]	; 11a30 <__assert_fail@plt+0x758>
   116d4:	ldr	r0, [pc, #856]	; 11a34 <__assert_fail@plt+0x75c>
   116d8:	sub	r1, r2, #32
   116dc:	bl	11cbc <__assert_fail@plt+0x9e4>
   116e0:	subs	r4, r0, #0
   116e4:	moveq	r2, #5
   116e8:	ldreq	r1, [pc, #840]	; 11a38 <__assert_fail@plt+0x760>
   116ec:	bne	11344 <__assert_fail@plt+0x6c>
   116f0:	bl	110c8 <dcgettext@plt>
   116f4:	mov	sl, r0
   116f8:	ldr	r0, [r9]
   116fc:	bl	1483c <__assert_fail@plt+0x3564>
   11700:	mov	r2, sl
   11704:	mov	r1, r4
   11708:	mov	sl, r4
   1170c:	mov	r3, r0
   11710:	mov	r0, r4
   11714:	bl	11140 <error@plt>
   11718:	b	11344 <__assert_fail@plt+0x6c>
   1171c:	ldr	r2, [pc, #792]	; 11a3c <__assert_fail@plt+0x764>
   11720:	ldr	r0, [pc, #792]	; 11a40 <__assert_fail@plt+0x768>
   11724:	sub	r1, r2, #608	; 0x260
   11728:	bl	11cbc <__assert_fail@plt+0x9e4>
   1172c:	subs	r4, r0, #0
   11730:	moveq	r2, #5
   11734:	ldreq	r1, [pc, #776]	; 11a44 <__assert_fail@plt+0x76c>
   11738:	bne	11344 <__assert_fail@plt+0x6c>
   1173c:	b	116f0 <__assert_fail@plt+0x418>
   11740:	mov	r0, #0
   11744:	bl	121c0 <__assert_fail@plt+0xee8>
   11748:	ldr	r3, [pc, #760]	; 11a48 <__assert_fail@plt+0x770>
   1174c:	ldr	r0, [pc, #760]	; 11a4c <__assert_fail@plt+0x774>
   11750:	ldr	r1, [pc, #760]	; 11a50 <__assert_fail@plt+0x778>
   11754:	ldr	r2, [pc, #760]	; 11a54 <__assert_fail@plt+0x77c>
   11758:	mov	r4, #0
   1175c:	ldr	r0, [r0]
   11760:	ldr	r3, [r3]
   11764:	str	r1, [sp, #4]
   11768:	str	r2, [sp]
   1176c:	str	r4, [sp, #8]
   11770:	ldr	r2, [pc, #736]	; 11a58 <__assert_fail@plt+0x780>
   11774:	ldr	r1, [pc, #736]	; 11a5c <__assert_fail@plt+0x784>
   11778:	bl	22178 <__assert_fail@plt+0x10ea0>
   1177c:	mov	r0, r4
   11780:	bl	111ac <exit@plt>
   11784:	ldr	r4, [r9]
   11788:	mov	r0, r4
   1178c:	bl	111b8 <strlen@plt>
   11790:	sub	r0, r0, #1
   11794:	cmp	r0, #1
   11798:	strhi	r4, [fp, #32]
   1179c:	bhi	11344 <__assert_fail@plt+0x6c>
   117a0:	ldrb	r2, [r4]
   117a4:	ldr	r3, [fp, #32]
   117a8:	cmp	r2, #0
   117ac:	beq	11344 <__assert_fail@plt+0x6c>
   117b0:	add	r2, r4, #1
   117b4:	str	r2, [r9]
   117b8:	ldrb	r2, [r4]
   117bc:	strb	r2, [r3], #1
   117c0:	ldr	r4, [r9]
   117c4:	ldrb	r2, [r4]
   117c8:	cmp	r2, #0
   117cc:	bne	117b0 <__assert_fail@plt+0x4d8>
   117d0:	b	11344 <__assert_fail@plt+0x6c>
   117d4:	ldr	r2, [pc, #644]	; 11a60 <__assert_fail@plt+0x788>
   117d8:	ldr	r0, [pc, #644]	; 11a64 <__assert_fail@plt+0x78c>
   117dc:	sub	r1, r2, #320	; 0x140
   117e0:	bl	11cbc <__assert_fail@plt+0x9e4>
   117e4:	subs	r4, r0, #0
   117e8:	bne	11344 <__assert_fail@plt+0x6c>
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #624]	; 11a68 <__assert_fail@plt+0x790>
   117f4:	b	116f0 <__assert_fail@plt+0x418>
   117f8:	mov	sl, r4
   117fc:	b	11348 <__assert_fail@plt+0x70>
   11800:	ldr	r1, [pc, #612]	; 11a6c <__assert_fail@plt+0x794>
   11804:	mov	r0, r4
   11808:	bl	11008 <strcmp@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11834 <__assert_fail@plt+0x55c>
   11814:	mov	r0, r4
   11818:	ldr	r1, [pc, #592]	; 11a70 <__assert_fail@plt+0x798>
   1181c:	bl	11008 <strcmp@plt>
   11820:	cmp	r0, #0
   11824:	bne	119b4 <__assert_fail@plt+0x6dc>
   11828:	ldr	r3, [pc, #580]	; 11a74 <__assert_fail@plt+0x79c>
   1182c:	str	r3, [fp, #4]
   11830:	b	11344 <__assert_fail@plt+0x6c>
   11834:	ldr	r3, [pc, #572]	; 11a78 <__assert_fail@plt+0x7a0>
   11838:	str	r3, [fp, #4]
   1183c:	b	11344 <__assert_fail@plt+0x6c>
   11840:	cmp	sl, #0
   11844:	beq	119ec <__assert_fail@plt+0x714>
   11848:	ldr	r8, [pc, #452]	; 11a14 <__assert_fail@plt+0x73c>
   1184c:	ldr	r7, [pc, #552]	; 11a7c <__assert_fail@plt+0x7a4>
   11850:	ldr	r0, [r8, #32]
   11854:	bl	111b8 <strlen@plt>
   11858:	lsl	r2, r0, #1
   1185c:	add	r3, r2, r0
   11860:	str	r2, [sp, #28]
   11864:	ldr	r2, [pc, #412]	; 11a08 <__assert_fail@plt+0x730>
   11868:	mov	r9, r0
   1186c:	add	r0, r3, #1
   11870:	str	r3, [r2, #36]	; 0x24
   11874:	bl	22274 <__assert_fail@plt+0x10f9c>
   11878:	ldr	fp, [r8, #32]
   1187c:	ldr	r2, [pc, #388]	; 11a08 <__assert_fail@plt+0x730>
   11880:	mov	r1, fp
   11884:	str	r0, [r2, #40]	; 0x28
   11888:	str	r0, [sp, #24]
   1188c:	bl	110b0 <stpcpy@plt>
   11890:	mov	r1, fp
   11894:	bl	110b0 <stpcpy@plt>
   11898:	mov	r1, fp
   1189c:	bl	1111c <strcpy@plt>
   118a0:	ldr	r0, [pc, #472]	; 11a80 <__assert_fail@plt+0x7a8>
   118a4:	ldr	r3, [sp, #24]
   118a8:	sub	r1, r0, #20
   118ac:	ldr	r2, [sp, #28]
   118b0:	add	fp, r3, r9
   118b4:	add	r3, fp, r9
   118b8:	str	r3, [r1, #52]	; 0x34
   118bc:	str	r2, [r0, #24]
   118c0:	str	fp, [r1, #48]	; 0x30
   118c4:	str	r9, [r1, #32]
   118c8:	bl	1284c <__assert_fail@plt+0x1574>
   118cc:	ldr	r0, [r8, #8]
   118d0:	bl	111b8 <strlen@plt>
   118d4:	mov	r9, r0
   118d8:	ldr	r0, [r8]
   118dc:	add	r0, r0, #1
   118e0:	add	r0, r0, r9
   118e4:	bl	22274 <__assert_fail@plt+0x10f9c>
   118e8:	ldr	r2, [r8]
   118ec:	ldr	ip, [pc, #276]	; 11a08 <__assert_fail@plt+0x730>
   118f0:	add	r9, r9, r2
   118f4:	mov	r1, #32
   118f8:	mov	r2, r9
   118fc:	str	r0, [ip, #64]	; 0x40
   11900:	bl	111f4 <memset@plt>
   11904:	ldr	ip, [pc, #376]	; 11a84 <__assert_fail@plt+0x7ac>
   11908:	ldr	r2, [r7]
   1190c:	ldr	lr, [r8, #56]	; 0x38
   11910:	cmp	r6, r2
   11914:	mov	r3, r0
   11918:	ldrd	r0, [r8, #24]
   1191c:	strb	r4, [r3, r9]
   11920:	sub	r3, ip, #108	; 0x6c
   11924:	strd	r0, [ip, #-100]	; 0xffffff9c
   11928:	str	lr, [r3, #72]	; 0x48
   1192c:	str	ip, [r3, #68]	; 0x44
   11930:	beq	1197c <__assert_fail@plt+0x6a4>
   11934:	ble	1195c <__assert_fail@plt+0x684>
   11938:	ldr	r0, [r5, r2, lsl #2]
   1193c:	bl	11de4 <__assert_fail@plt+0xb0c>
   11940:	ldr	r2, [r7]
   11944:	add	r2, r2, #1
   11948:	cmp	r6, r2
   1194c:	str	r2, [r7]
   11950:	and	sl, sl, r0
   11954:	uxtb	sl, sl
   11958:	bgt	11938 <__assert_fail@plt+0x660>
   1195c:	ldr	r3, [pc, #164]	; 11a08 <__assert_fail@plt+0x730>
   11960:	ldrb	r3, [r3, #16]
   11964:	cmp	r3, #0
   11968:	bne	1198c <__assert_fail@plt+0x6b4>
   1196c:	eor	r0, sl, #1
   11970:	uxtb	r0, r0
   11974:	add	sp, sp, #36	; 0x24
   11978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1197c:	ldr	r0, [pc, #260]	; 11a88 <__assert_fail@plt+0x7b0>
   11980:	bl	11de4 <__assert_fail@plt+0xb0c>
   11984:	mov	sl, r0
   11988:	b	1195c <__assert_fail@plt+0x684>
   1198c:	ldr	r3, [pc, #248]	; 11a8c <__assert_fail@plt+0x7b4>
   11990:	ldr	r0, [r3]
   11994:	bl	126ac <__assert_fail@plt+0x13d4>
   11998:	cmn	r0, #1
   1199c:	bne	1196c <__assert_fail@plt+0x694>
   119a0:	bl	111d0 <__errno_location@plt>
   119a4:	ldr	r2, [pc, #220]	; 11a88 <__assert_fail@plt+0x7b0>
   119a8:	ldr	r1, [r0]
   119ac:	mov	r0, #1
   119b0:	bl	11140 <error@plt>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #208]	; 11a90 <__assert_fail@plt+0x7b8>
   119bc:	mov	r0, #0
   119c0:	bl	110c8 <dcgettext@plt>
   119c4:	mov	sl, #0
   119c8:	mov	r4, r0
   119cc:	ldr	r0, [r9]
   119d0:	bl	1483c <__assert_fail@plt+0x3564>
   119d4:	mov	r1, #0
   119d8:	mov	r2, r4
   119dc:	mov	r3, r0
   119e0:	mov	r0, r1
   119e4:	bl	11140 <error@plt>
   119e8:	b	11344 <__assert_fail@plt+0x6c>
   119ec:	mov	r0, #1
   119f0:	bl	121c0 <__assert_fail@plt+0xee8>
   119f4:	andeq	r3, r2, ip, asr ip
   119f8:	andeq	r4, r2, ip, lsr r4
   119fc:	muleq	r2, r4, r3
   11a00:	andeq	r2, r1, r8, lsl #11
   11a04:	strdeq	r3, [r2], -r0
   11a08:	andeq	r5, r3, r0, ror #3
   11a0c:	muleq	r2, r4, r5
   11a10:	ldrdeq	r5, [r3], -r8
   11a14:	andeq	r5, r3, r8, lsr #2
   11a18:	andeq	r4, r2, r4, lsr #10
   11a1c:	andeq	r4, r2, r0, asr #9
   11a20:	andeq	r4, r2, r4, asr #10
   11a24:	ldrdeq	r3, [r2], -r0
   11a28:	andeq	r4, r2, r0, lsl #10
   11a2c:	andeq	r4, r2, r0, ror #9
   11a30:	andeq	r5, r3, ip, lsl #5
   11a34:	andeq	r5, r3, r4, ror #2
   11a38:	andeq	r4, r2, r4, asr r4
   11a3c:	andeq	r5, r3, ip, lsl #9
   11a40:	andeq	r5, r3, r8, asr r1
   11a44:	muleq	r2, ip, r4
   11a48:	andeq	r5, r3, ip, ror #2
   11a4c:	ldrdeq	r5, [r3], -r4
   11a50:	andeq	r4, r2, r4, ror r5
   11a54:	andeq	r4, r2, r4, lsl #11
   11a58:	muleq	r2, r0, r3
   11a5c:	andeq	r3, r2, r0, lsl ip
   11a60:	andeq	r5, r3, ip, lsl #7
   11a64:	andeq	r5, r3, r0, ror #2
   11a68:	andeq	r4, r2, r8, ror r4
   11a6c:	andeq	r4, r2, r8, asr #10
   11a70:	andeq	r4, r2, ip, asr #10
   11a74:	andeq	r3, r2, r4, ror #21
   11a78:	ldrdeq	r3, [r2], -ip
   11a7c:	andeq	r5, r3, r0, asr #3
   11a80:	strdeq	r5, [r3], -r4
   11a84:	andeq	r5, r3, ip, asr #4
   11a88:	andeq	r3, r2, r8, ror #23
   11a8c:	ldrdeq	r5, [r3], -r0
   11a90:	andeq	r4, r2, r0, asr r5
   11a94:	mov	fp, #0
   11a98:	mov	lr, #0
   11a9c:	pop	{r1}		; (ldr r1, [sp], #4)
   11aa0:	mov	r2, sp
   11aa4:	push	{r2}		; (str r2, [sp, #-4]!)
   11aa8:	push	{r0}		; (str r0, [sp, #-4]!)
   11aac:	ldr	ip, [pc, #16]	; 11ac4 <__assert_fail@plt+0x7ec>
   11ab0:	push	{ip}		; (str ip, [sp, #-4]!)
   11ab4:	ldr	r0, [pc, #12]	; 11ac8 <__assert_fail@plt+0x7f0>
   11ab8:	ldr	r3, [pc, #12]	; 11acc <__assert_fail@plt+0x7f4>
   11abc:	bl	11158 <__libc_start_main@plt>
   11ac0:	bl	112cc <abort@plt>
   11ac4:	andeq	r3, r2, r0, ror sl
   11ac8:	andeq	r1, r1, r4, ror #5
   11acc:	andeq	r3, r2, r0, lsl sl
   11ad0:	ldr	r3, [pc, #20]	; 11aec <__assert_fail@plt+0x814>
   11ad4:	ldr	r2, [pc, #20]	; 11af0 <__assert_fail@plt+0x818>
   11ad8:	add	r3, pc, r3
   11adc:	ldr	r2, [r3, r2]
   11ae0:	cmp	r2, #0
   11ae4:	bxeq	lr
   11ae8:	b	11188 <__gmon_start__@plt>
   11aec:	andeq	r3, r2, r0, lsr #10
   11af0:	andeq	r0, r0, ip, lsl r1
   11af4:	ldr	r3, [pc, #28]	; 11b18 <__assert_fail@plt+0x840>
   11af8:	ldr	r0, [pc, #28]	; 11b1c <__assert_fail@plt+0x844>
   11afc:	sub	r3, r3, r0
   11b00:	cmp	r3, #6
   11b04:	bxls	lr
   11b08:	ldr	r3, [pc, #16]	; 11b20 <__assert_fail@plt+0x848>
   11b0c:	cmp	r3, #0
   11b10:	bxeq	lr
   11b14:	bx	r3
   11b18:			; <UNDEFINED> instruction: 0x000351b7
   11b1c:			; <UNDEFINED> instruction: 0x000351b4
   11b20:	andeq	r0, r0, r0
   11b24:	ldr	r1, [pc, #36]	; 11b50 <__assert_fail@plt+0x878>
   11b28:	ldr	r0, [pc, #36]	; 11b54 <__assert_fail@plt+0x87c>
   11b2c:	sub	r1, r1, r0
   11b30:	asr	r1, r1, #2
   11b34:	add	r1, r1, r1, lsr #31
   11b38:	asrs	r1, r1, #1
   11b3c:	bxeq	lr
   11b40:	ldr	r3, [pc, #16]	; 11b58 <__assert_fail@plt+0x880>
   11b44:	cmp	r3, #0
   11b48:	bxeq	lr
   11b4c:	bx	r3
   11b50:			; <UNDEFINED> instruction: 0x000351b4
   11b54:			; <UNDEFINED> instruction: 0x000351b4
   11b58:	andeq	r0, r0, r0
   11b5c:	push	{r4, lr}
   11b60:	ldr	r4, [pc, #24]	; 11b80 <__assert_fail@plt+0x8a8>
   11b64:	ldrb	r3, [r4]
   11b68:	cmp	r3, #0
   11b6c:	popne	{r4, pc}
   11b70:	bl	11af4 <__assert_fail@plt+0x81c>
   11b74:	mov	r3, #1
   11b78:	strb	r3, [r4]
   11b7c:	pop	{r4, pc}
   11b80:	ldrdeq	r5, [r3], -ip
   11b84:	ldr	r0, [pc, #40]	; 11bb4 <__assert_fail@plt+0x8dc>
   11b88:	ldr	r3, [r0]
   11b8c:	cmp	r3, #0
   11b90:	bne	11b98 <__assert_fail@plt+0x8c0>
   11b94:	b	11b24 <__assert_fail@plt+0x84c>
   11b98:	ldr	r3, [pc, #24]	; 11bb8 <__assert_fail@plt+0x8e0>
   11b9c:	cmp	r3, #0
   11ba0:	beq	11b94 <__assert_fail@plt+0x8bc>
   11ba4:	push	{r4, lr}
   11ba8:	blx	r3
   11bac:	pop	{r4, lr}
   11bb0:	b	11b24 <__assert_fail@plt+0x84c>
   11bb4:	andeq	r4, r3, r4, lsl pc
   11bb8:	andeq	r0, r0, r0
   11bbc:	push	{r4, r5, r6, r7, lr}
   11bc0:	sub	sp, sp, #20
   11bc4:	ldr	r4, [pc, #228]	; 11cb0 <__assert_fail@plt+0x9d8>
   11bc8:	ldrb	r3, [r4]
   11bcc:	cmp	r3, #0
   11bd0:	bne	11c90 <__assert_fail@plt+0x9b8>
   11bd4:	ldr	r5, [pc, #216]	; 11cb4 <__assert_fail@plt+0x9dc>
   11bd8:	ldrd	r6, [r4, #8]
   11bdc:	mov	r0, #1
   11be0:	ldmib	r5, {r1, r3}
   11be4:	ldr	r2, [r5]
   11be8:	strd	r6, [sp]
   11bec:	str	r3, [sp, #8]
   11bf0:	bl	1120c <__printf_chk@plt>
   11bf4:	ldrd	r2, [r5, #16]
   11bf8:	cmp	r2, #0
   11bfc:	sbcs	r1, r3, #0
   11c00:	ldrd	r0, [r4, #8]
   11c04:	blt	11c6c <__assert_fail@plt+0x994>
   11c08:	cmp	r0, #0
   11c0c:	sbcs	ip, r1, #0
   11c10:	blt	11c58 <__assert_fail@plt+0x980>
   11c14:	mvn	r6, #0
   11c18:	subs	r6, r6, r2
   11c1c:	mvn	r7, #-2147483648	; 0x80000000
   11c20:	sbc	r7, r7, r3
   11c24:	cmp	r6, r0
   11c28:	sbcs	ip, r7, r1
   11c2c:	movlt	ip, #1
   11c30:	movge	ip, #0
   11c34:	cmp	ip, #0
   11c38:	beq	11c58 <__assert_fail@plt+0x980>
   11c3c:	adds	r0, r0, r2
   11c40:	adc	r1, r1, r3
   11c44:	mov	r3, #1
   11c48:	strd	r0, [r4, #8]
   11c4c:	strb	r3, [r4]
   11c50:	add	sp, sp, #20
   11c54:	pop	{r4, r5, r6, r7, pc}
   11c58:	adds	r2, r2, r0
   11c5c:	adc	r3, r3, r1
   11c60:	strd	r2, [r4, #8]
   11c64:	add	sp, sp, #20
   11c68:	pop	{r4, r5, r6, r7, pc}
   11c6c:	mov	r6, #0
   11c70:	subs	r6, r6, r2
   11c74:	mov	r7, #-2147483648	; 0x80000000
   11c78:	sbc	r7, r7, r3
   11c7c:	cmp	r0, r6
   11c80:	sbcs	ip, r1, r7
   11c84:	movlt	ip, #1
   11c88:	movge	ip, #0
   11c8c:	b	11c34 <__assert_fail@plt+0x95c>
   11c90:	mov	r2, #5
   11c94:	ldr	r1, [pc, #28]	; 11cb8 <__assert_fail@plt+0x9e0>
   11c98:	mov	r0, #0
   11c9c:	bl	110c8 <dcgettext@plt>
   11ca0:	mov	r1, #0
   11ca4:	mov	r2, r0
   11ca8:	mov	r0, #1
   11cac:	bl	11140 <error@plt>
   11cb0:	andeq	r5, r3, r0, ror #3
   11cb4:	andeq	r5, r3, r8, lsr #2
   11cb8:	ldrdeq	r3, [r2], -r0
   11cbc:	push	{r4, r5, r6, lr}
   11cc0:	ldr	lr, [pc, #232]	; 11db0 <__assert_fail@plt+0xad8>
   11cc4:	ldr	ip, [lr]
   11cc8:	ldrb	r3, [ip]
   11ccc:	sub	r3, r3, #97	; 0x61
   11cd0:	cmp	r3, #19
   11cd4:	ldrls	pc, [pc, r3, lsl #2]
   11cd8:	b	11d94 <__assert_fail@plt+0xabc>
   11cdc:	andeq	r1, r1, r8, lsl #27
   11ce0:	muleq	r1, r4, sp
   11ce4:	muleq	r1, r4, sp
   11ce8:	muleq	r1, r4, sp
   11cec:	muleq	r1, r4, sp
   11cf0:	muleq	r1, r4, sp
   11cf4:	muleq	r1, r4, sp
   11cf8:	muleq	r1, r4, sp
   11cfc:	muleq	r1, r4, sp
   11d00:	muleq	r1, r4, sp
   11d04:	muleq	r1, r4, sp
   11d08:	muleq	r1, r4, sp
   11d0c:	muleq	r1, r4, sp
   11d10:	andeq	r1, r1, r8, lsl #27
   11d14:	muleq	r1, r4, sp
   11d18:	andeq	r1, r1, ip, lsr #26
   11d1c:	muleq	r1, r4, sp
   11d20:	muleq	r1, r4, sp
   11d24:	muleq	r1, r4, sp
   11d28:	andeq	r1, r1, r8, lsl #27
   11d2c:	add	r3, ip, #1
   11d30:	mov	r4, r1
   11d34:	str	r3, [lr]
   11d38:	str	ip, [r0]
   11d3c:	ldr	r3, [pc, #112]	; 11db4 <__assert_fail@plt+0xadc>
   11d40:	ldr	r6, [lr]
   11d44:	mov	r5, #0
   11d48:	ldr	r1, [pc, #104]	; 11db8 <__assert_fail@plt+0xae0>
   11d4c:	str	r2, [r4, #16]
   11d50:	str	r5, [r4]
   11d54:	mov	r0, r6
   11d58:	str	r5, [r4, #4]
   11d5c:	str	r5, [r4, #20]
   11d60:	str	r1, [r3]
   11d64:	bl	111b8 <strlen@plt>
   11d68:	mov	r2, r4
   11d6c:	mov	r1, r0
   11d70:	mov	r0, r6
   11d74:	bl	2134c <__assert_fail@plt+0x10074>
   11d78:	cmp	r0, #0
   11d7c:	bne	11d9c <__assert_fail@plt+0xac4>
   11d80:	mov	r0, #1
   11d84:	pop	{r4, r5, r6, pc}
   11d88:	str	ip, [r0]
   11d8c:	mov	r0, #1
   11d90:	pop	{r4, r5, r6, pc}
   11d94:	mov	r0, #0
   11d98:	pop	{r4, r5, r6, pc}
   11d9c:	mov	r3, r0
   11da0:	mov	r1, r5
   11da4:	ldr	r2, [pc, #16]	; 11dbc <__assert_fail@plt+0xae4>
   11da8:	mov	r0, #1
   11dac:	bl	11140 <error@plt>
   11db0:	ldrdeq	r5, [r3], -r8
   11db4:	andeq	r5, r3, r8, asr #13
   11db8:	andeq	r0, r0, r6, asr #5
   11dbc:	andeq	r4, r2, r4, ror r4
   11dc0:	ldr	r1, [pc, #20]	; 11ddc <__assert_fail@plt+0xb04>
   11dc4:	ldr	r3, [pc, #20]	; 11de0 <__assert_fail@plt+0xb08>
   11dc8:	mov	r2, #0
   11dcc:	ldrd	r0, [r1, #24]
   11dd0:	strb	r2, [r3]
   11dd4:	strd	r0, [r3, #8]
   11dd8:	bx	lr
   11ddc:	andeq	r5, r3, r8, lsr #2
   11de0:	andeq	r5, r3, r0, ror #3
   11de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de8:	sub	sp, sp, #20
   11dec:	ldr	r1, [pc, #924]	; 12190 <__assert_fail@plt+0xeb8>
   11df0:	str	r0, [sp, #12]
   11df4:	bl	11008 <strcmp@plt>
   11df8:	cmp	r0, #0
   11dfc:	bne	12130 <__assert_fail@plt+0xe58>
   11e00:	ldr	r3, [pc, #908]	; 12194 <__assert_fail@plt+0xebc>
   11e04:	ldr	r4, [pc, #908]	; 12198 <__assert_fail@plt+0xec0>
   11e08:	mov	r2, #1
   11e0c:	ldr	r6, [r3]
   11e10:	strb	r2, [r4, #16]
   11e14:	mov	r1, #2
   11e18:	mov	r0, r6
   11e1c:	bl	12678 <__assert_fail@plt+0x13a0>
   11e20:	ldr	r7, [pc, #884]	; 1219c <__assert_fail@plt+0xec4>
   11e24:	ldr	r8, [pc, #884]	; 121a0 <__assert_fail@plt+0xec8>
   11e28:	mov	r1, r6
   11e2c:	mov	r0, r7
   11e30:	bl	1296c <__assert_fail@plt+0x1694>
   11e34:	cmp	r0, #0
   11e38:	beq	120a4 <__assert_fail@plt+0xdcc>
   11e3c:	ldr	r9, [r4, #24]
   11e40:	sub	r5, r9, #1
   11e44:	cmp	r5, #1
   11e48:	bls	11e78 <__assert_fail@plt+0xba0>
   11e4c:	ldr	sl, [r4, #32]
   11e50:	cmp	sl, #1
   11e54:	bls	11e78 <__assert_fail@plt+0xba0>
   11e58:	ldr	r3, [pc, #836]	; 121a4 <__assert_fail@plt+0xecc>
   11e5c:	ldr	fp, [r4, #28]
   11e60:	mov	r2, #2
   11e64:	mov	r0, fp
   11e68:	ldr	r1, [r3, #32]
   11e6c:	bl	110a4 <memcmp@plt>
   11e70:	cmp	r0, #0
   11e74:	beq	11fa0 <__assert_fail@plt+0xcc8>
   11e78:	ldr	r3, [r4, #72]	; 0x48
   11e7c:	ldrb	r3, [r3]
   11e80:	sub	r3, r3, #97	; 0x61
   11e84:	cmp	r3, #19
   11e88:	ldrls	pc, [pc, r3, lsl #2]
   11e8c:	b	11f0c <__assert_fail@plt+0xc34>
   11e90:	andeq	r1, r1, r4, lsr #30
   11e94:	andeq	r1, r1, ip, lsl #30
   11e98:	andeq	r1, r1, ip, lsl #30
   11e9c:	andeq	r1, r1, ip, lsl #30
   11ea0:	andeq	r1, r1, ip, lsl #30
   11ea4:	andeq	r1, r1, ip, lsl #30
   11ea8:	andeq	r1, r1, ip, lsl #30
   11eac:	andeq	r1, r1, ip, lsl #30
   11eb0:	andeq	r1, r1, ip, lsl #30
   11eb4:	andeq	r1, r1, ip, lsl #30
   11eb8:	andeq	r1, r1, ip, lsl #30
   11ebc:	andeq	r1, r1, ip, lsl #30
   11ec0:	andeq	r1, r1, ip, lsl #30
   11ec4:	strdeq	r1, [r1], -ip
   11ec8:	andeq	r1, r1, ip, lsl #30
   11ecc:	andeq	r1, r1, ip, ror #30
   11ed0:	andeq	r1, r1, ip, lsl #30
   11ed4:	andeq	r1, r1, ip, lsl #30
   11ed8:	andeq	r1, r1, ip, lsl #30
   11edc:	andeq	r1, r1, r8, asr pc
   11ee0:	ldrd	r2, [r4, #56]	; 0x38
   11ee4:	adds	r2, r2, #1
   11ee8:	adc	r3, r3, #0
   11eec:	cmp	r1, r3
   11ef0:	cmpeq	r0, r2
   11ef4:	strd	r2, [r4, #56]	; 0x38
   11ef8:	beq	11f40 <__assert_fail@plt+0xc68>
   11efc:	ldr	r1, [r8]
   11f00:	ldr	r0, [r4, #64]	; 0x40
   11f04:	bl	10fcc <fputs_unlocked@plt>
   11f08:	ldr	r9, [r4, #24]
   11f0c:	mov	r2, r9
   11f10:	ldr	r3, [r8]
   11f14:	mov	r1, #1
   11f18:	ldr	r0, [r4, #28]
   11f1c:	bl	11098 <fwrite_unlocked@plt>
   11f20:	b	11e28 <__assert_fail@plt+0xb50>
   11f24:	ldr	r3, [pc, #632]	; 121a4 <__assert_fail@plt+0xecc>
   11f28:	ldrd	r0, [r3, #40]	; 0x28
   11f2c:	cmp	r0, #2
   11f30:	sbcs	r3, r1, #0
   11f34:	blt	11f60 <__assert_fail@plt+0xc88>
   11f38:	cmp	r9, #1
   11f3c:	ble	11ee0 <__assert_fail@plt+0xc08>
   11f40:	bl	11bbc <__assert_fail@plt+0x8e4>
   11f44:	mov	r2, #0
   11f48:	mov	r3, #0
   11f4c:	ldr	r9, [r4, #24]
   11f50:	strd	r2, [r4, #56]	; 0x38
   11f54:	b	11f0c <__assert_fail@plt+0xc34>
   11f58:	cmp	r9, #1
   11f5c:	ble	11efc <__assert_fail@plt+0xc24>
   11f60:	bl	11bbc <__assert_fail@plt+0x8e4>
   11f64:	ldr	r9, [r4, #24]
   11f68:	b	11f0c <__assert_fail@plt+0xc34>
   11f6c:	mov	sl, #0
   11f70:	ldr	r1, [r4, #28]
   11f74:	ldr	r0, [r4, #68]	; 0x44
   11f78:	mov	r2, r5
   11f7c:	str	r5, [sp]
   11f80:	str	sl, [sp, #4]
   11f84:	mov	r3, sl
   11f88:	bl	21c58 <__assert_fail@plt+0x10980>
   11f8c:	cmn	r0, #2
   11f90:	beq	12108 <__assert_fail@plt+0xe30>
   11f94:	cmn	r0, #1
   11f98:	beq	11efc <__assert_fail@plt+0xc24>
   11f9c:	b	11f60 <__assert_fail@plt+0xc88>
   11fa0:	ldr	r3, [r4, #36]	; 0x24
   11fa4:	cmp	r5, r3
   11fa8:	beq	12000 <__assert_fail@plt+0xd28>
   11fac:	ldr	r3, [r4, #44]	; 0x2c
   11fb0:	cmp	r5, r3
   11fb4:	beq	12068 <__assert_fail@plt+0xd90>
   11fb8:	cmp	r5, sl
   11fbc:	bne	11e78 <__assert_fail@plt+0xba0>
   11fc0:	mov	r0, fp
   11fc4:	mov	r2, r5
   11fc8:	ldr	r1, [r4, #52]	; 0x34
   11fcc:	bl	110a4 <memcmp@plt>
   11fd0:	cmp	r0, #0
   11fd4:	bne	11e78 <__assert_fail@plt+0xba0>
   11fd8:	ldr	r3, [pc, #452]	; 121a4 <__assert_fail@plt+0xecc>
   11fdc:	ldr	r1, [pc, #452]	; 121a8 <__assert_fail@plt+0xed0>
   11fe0:	ldrb	r2, [r3, #52]	; 0x34
   11fe4:	ldr	r3, [r3, #48]	; 0x30
   11fe8:	str	r1, [r4, #68]	; 0x44
   11fec:	cmp	r2, #0
   11ff0:	str	r3, [r4, #72]	; 0x48
   11ff4:	beq	12038 <__assert_fail@plt+0xd60>
   11ff8:	bl	11dc0 <__assert_fail@plt+0xae8>
   11ffc:	b	12038 <__assert_fail@plt+0xd60>
   12000:	mov	r2, r5
   12004:	ldr	r1, [r4, #40]	; 0x28
   12008:	mov	r0, fp
   1200c:	bl	110a4 <memcmp@plt>
   12010:	cmp	r0, #0
   12014:	bne	11fac <__assert_fail@plt+0xcd4>
   12018:	ldr	r3, [pc, #388]	; 121a4 <__assert_fail@plt+0xecc>
   1201c:	ldr	r1, [pc, #392]	; 121ac <__assert_fail@plt+0xed4>
   12020:	ldrb	r2, [r3, #52]	; 0x34
   12024:	ldr	r3, [r3, #60]	; 0x3c
   12028:	str	r1, [r4, #68]	; 0x44
   1202c:	cmp	r2, #0
   12030:	str	r3, [r4, #72]	; 0x48
   12034:	bne	11ff8 <__assert_fail@plt+0xd20>
   12038:	ldr	r0, [r8]
   1203c:	ldr	r3, [r0, #20]
   12040:	ldr	r2, [r0, #24]
   12044:	cmp	r3, r2
   12048:	addcc	r1, r3, #1
   1204c:	movcc	r2, #10
   12050:	strcc	r1, [r0, #20]
   12054:	strbcc	r2, [r3]
   12058:	bcc	11e28 <__assert_fail@plt+0xb50>
   1205c:	mov	r1, #10
   12060:	bl	11254 <__overflow@plt>
   12064:	b	11e28 <__assert_fail@plt+0xb50>
   12068:	mov	r2, r5
   1206c:	ldr	r1, [r4, #48]	; 0x30
   12070:	mov	r0, fp
   12074:	bl	110a4 <memcmp@plt>
   12078:	cmp	r0, #0
   1207c:	bne	11fb8 <__assert_fail@plt+0xce0>
   12080:	ldr	r3, [pc, #284]	; 121a4 <__assert_fail@plt+0xecc>
   12084:	ldr	r1, [pc, #292]	; 121b0 <__assert_fail@plt+0xed8>
   12088:	ldrb	r2, [r3, #52]	; 0x34
   1208c:	ldr	r3, [r3, #56]	; 0x38
   12090:	str	r1, [r4, #68]	; 0x44
   12094:	cmp	r2, #0
   12098:	str	r3, [r4, #72]	; 0x48
   1209c:	beq	12038 <__assert_fail@plt+0xd60>
   120a0:	b	11ff8 <__assert_fail@plt+0xd20>
   120a4:	bl	111d0 <__errno_location@plt>
   120a8:	ldr	r4, [r6]
   120ac:	ldr	r1, [pc, #220]	; 12190 <__assert_fail@plt+0xeb8>
   120b0:	ands	r4, r4, #32
   120b4:	ldr	r3, [r0]
   120b8:	mov	r5, r0
   120bc:	ldr	r0, [sp, #12]
   120c0:	movne	r4, r3
   120c4:	bl	11008 <strcmp@plt>
   120c8:	cmp	r0, #0
   120cc:	mov	r0, r6
   120d0:	bne	120ec <__assert_fail@plt+0xe14>
   120d4:	bl	11284 <clearerr_unlocked@plt>
   120d8:	cmp	r4, #0
   120dc:	moveq	r0, #1
   120e0:	bne	1214c <__assert_fail@plt+0xe74>
   120e4:	add	sp, sp, #20
   120e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ec:	bl	126ac <__assert_fail@plt+0x13d4>
   120f0:	cmp	r0, #0
   120f4:	beq	120d8 <__assert_fail@plt+0xe00>
   120f8:	cmp	r4, #0
   120fc:	bne	1214c <__assert_fail@plt+0xe74>
   12100:	ldr	r4, [r5]
   12104:	b	120d8 <__assert_fail@plt+0xe00>
   12108:	bl	111d0 <__errno_location@plt>
   1210c:	mov	r2, #5
   12110:	ldr	r1, [pc, #156]	; 121b4 <__assert_fail@plt+0xedc>
   12114:	ldr	r4, [r0]
   12118:	mov	r0, sl
   1211c:	bl	110c8 <dcgettext@plt>
   12120:	mov	r1, r4
   12124:	mov	r2, r0
   12128:	mov	r0, #1
   1212c:	bl	11140 <error@plt>
   12130:	ldr	r1, [pc, #128]	; 121b8 <__assert_fail@plt+0xee0>
   12134:	ldr	r0, [sp, #12]
   12138:	bl	1129c <fopen64@plt>
   1213c:	subs	r6, r0, #0
   12140:	beq	1217c <__assert_fail@plt+0xea4>
   12144:	ldr	r4, [pc, #76]	; 12198 <__assert_fail@plt+0xec0>
   12148:	b	11e14 <__assert_fail@plt+0xb3c>
   1214c:	ldr	r2, [sp, #12]
   12150:	mov	r1, #3
   12154:	mov	r0, #0
   12158:	bl	146b8 <__assert_fail@plt+0x33e0>
   1215c:	mov	r1, r4
   12160:	ldr	r2, [pc, #84]	; 121bc <__assert_fail@plt+0xee4>
   12164:	mov	r3, r0
   12168:	mov	r0, #0
   1216c:	bl	11140 <error@plt>
   12170:	mov	r0, #0
   12174:	add	sp, sp, #20
   12178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1217c:	bl	111d0 <__errno_location@plt>
   12180:	ldr	r2, [sp, #12]
   12184:	mov	r1, #3
   12188:	ldr	r4, [r0]
   1218c:	b	12154 <__assert_fail@plt+0xe7c>
   12190:	andeq	r3, r2, r8, ror #23
   12194:	ldrdeq	r5, [r3], -r0
   12198:	andeq	r5, r3, r0, ror #3
   1219c:	strdeq	r5, [r3], -r4
   121a0:	ldrdeq	r5, [r3], -r4
   121a4:	andeq	r5, r3, r8, lsr #2
   121a8:	andeq	r5, r3, ip, lsr #4
   121ac:	andeq	r5, r3, ip, ror #4
   121b0:	andeq	r5, r3, ip, asr #4
   121b4:	andeq	r3, r2, ip, ror #23
   121b8:	andeq	r4, r2, r0, lsr #20
   121bc:	andeq	r4, r2, r4, ror r4
   121c0:	subs	r5, r0, #0
   121c4:	push	{r7, lr}
   121c8:	sub	sp, sp, #56	; 0x38
   121cc:	beq	12208 <__assert_fail@plt+0xf30>
   121d0:	ldr	r3, [pc, #804]	; 124fc <__assert_fail@plt+0x1224>
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #800]	; 12500 <__assert_fail@plt+0x1228>
   121dc:	mov	r0, #0
   121e0:	ldr	r4, [r3]
   121e4:	bl	110c8 <dcgettext@plt>
   121e8:	ldr	r3, [pc, #788]	; 12504 <__assert_fail@plt+0x122c>
   121ec:	mov	r1, #1
   121f0:	ldr	r3, [r3]
   121f4:	mov	r2, r0
   121f8:	mov	r0, r4
   121fc:	bl	11224 <__fprintf_chk@plt>
   12200:	mov	r0, r5
   12204:	bl	111ac <exit@plt>
   12208:	mov	r2, #5
   1220c:	ldr	r1, [pc, #756]	; 12508 <__assert_fail@plt+0x1230>
   12210:	bl	110c8 <dcgettext@plt>
   12214:	ldr	r3, [pc, #744]	; 12504 <__assert_fail@plt+0x122c>
   12218:	ldr	r6, [pc, #748]	; 1250c <__assert_fail@plt+0x1234>
   1221c:	ldr	r4, [pc, #748]	; 12510 <__assert_fail@plt+0x1238>
   12220:	ldr	r2, [r3]
   12224:	mov	r1, r0
   12228:	mov	r0, #1
   1222c:	bl	1120c <__printf_chk@plt>
   12230:	mov	r2, #5
   12234:	ldr	r1, [pc, #728]	; 12514 <__assert_fail@plt+0x123c>
   12238:	mov	r0, r5
   1223c:	bl	110c8 <dcgettext@plt>
   12240:	ldr	r1, [r6]
   12244:	bl	10fcc <fputs_unlocked@plt>
   12248:	mov	r2, #5
   1224c:	ldr	r1, [pc, #708]	; 12518 <__assert_fail@plt+0x1240>
   12250:	mov	r0, r5
   12254:	bl	110c8 <dcgettext@plt>
   12258:	ldr	r1, [r6]
   1225c:	bl	10fcc <fputs_unlocked@plt>
   12260:	mov	r2, #5
   12264:	ldr	r1, [pc, #688]	; 1251c <__assert_fail@plt+0x1244>
   12268:	mov	r0, r5
   1226c:	bl	110c8 <dcgettext@plt>
   12270:	ldr	r1, [r6]
   12274:	bl	10fcc <fputs_unlocked@plt>
   12278:	mov	r2, #5
   1227c:	ldr	r1, [pc, #668]	; 12520 <__assert_fail@plt+0x1248>
   12280:	mov	r0, r5
   12284:	bl	110c8 <dcgettext@plt>
   12288:	ldr	r1, [r6]
   1228c:	bl	10fcc <fputs_unlocked@plt>
   12290:	mov	r2, #5
   12294:	ldr	r1, [pc, #648]	; 12524 <__assert_fail@plt+0x124c>
   12298:	mov	r0, r5
   1229c:	bl	110c8 <dcgettext@plt>
   122a0:	ldr	r1, [r6]
   122a4:	bl	10fcc <fputs_unlocked@plt>
   122a8:	mov	r2, #5
   122ac:	ldr	r1, [pc, #628]	; 12528 <__assert_fail@plt+0x1250>
   122b0:	mov	r0, r5
   122b4:	bl	110c8 <dcgettext@plt>
   122b8:	ldr	r1, [r6]
   122bc:	bl	10fcc <fputs_unlocked@plt>
   122c0:	mov	r2, #5
   122c4:	ldr	r1, [pc, #608]	; 1252c <__assert_fail@plt+0x1254>
   122c8:	mov	r0, r5
   122cc:	bl	110c8 <dcgettext@plt>
   122d0:	ldr	r1, [r6]
   122d4:	bl	10fcc <fputs_unlocked@plt>
   122d8:	mov	r2, #5
   122dc:	ldr	r1, [pc, #588]	; 12530 <__assert_fail@plt+0x1258>
   122e0:	mov	r0, r5
   122e4:	bl	110c8 <dcgettext@plt>
   122e8:	ldr	r1, [r6]
   122ec:	bl	10fcc <fputs_unlocked@plt>
   122f0:	mov	r2, #5
   122f4:	ldr	r1, [pc, #568]	; 12534 <__assert_fail@plt+0x125c>
   122f8:	mov	r0, r5
   122fc:	bl	110c8 <dcgettext@plt>
   12300:	ldr	r1, [r6]
   12304:	bl	10fcc <fputs_unlocked@plt>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #548]	; 12538 <__assert_fail@plt+0x1260>
   12310:	mov	r0, r5
   12314:	bl	110c8 <dcgettext@plt>
   12318:	ldr	r1, [r6]
   1231c:	bl	10fcc <fputs_unlocked@plt>
   12320:	mov	r2, #5
   12324:	ldr	r1, [pc, #528]	; 1253c <__assert_fail@plt+0x1264>
   12328:	mov	r0, r5
   1232c:	bl	110c8 <dcgettext@plt>
   12330:	ldr	r1, [r6]
   12334:	bl	10fcc <fputs_unlocked@plt>
   12338:	ldm	r4!, {r0, r1, r2, r3}
   1233c:	mov	lr, sp
   12340:	stmia	lr!, {r0, r1, r2, r3}
   12344:	ldm	r4!, {r0, r1, r2, r3}
   12348:	ldr	ip, [sp]
   1234c:	stmia	lr!, {r0, r1, r2, r3}
   12350:	cmp	ip, #0
   12354:	ldm	r4!, {r0, r1, r2, r3}
   12358:	stmia	lr!, {r0, r1, r2, r3}
   1235c:	ldm	r4, {r0, r1}
   12360:	moveq	r4, sp
   12364:	stm	lr, {r0, r1}
   12368:	beq	12398 <__assert_fail@plt+0x10c0>
   1236c:	ldr	r7, [pc, #460]	; 12540 <__assert_fail@plt+0x1268>
   12370:	mov	r4, sp
   12374:	b	12384 <__assert_fail@plt+0x10ac>
   12378:	ldr	ip, [r4, #8]!
   1237c:	cmp	ip, #0
   12380:	beq	12398 <__assert_fail@plt+0x10c0>
   12384:	mov	r1, ip
   12388:	mov	r0, r7
   1238c:	bl	11008 <strcmp@plt>
   12390:	cmp	r0, #0
   12394:	bne	12378 <__assert_fail@plt+0x10a0>
   12398:	ldr	r4, [r4, #4]
   1239c:	mov	r2, #5
   123a0:	cmp	r4, #0
   123a4:	ldr	r1, [pc, #408]	; 12544 <__assert_fail@plt+0x126c>
   123a8:	beq	12450 <__assert_fail@plt+0x1178>
   123ac:	mov	r0, #0
   123b0:	bl	110c8 <dcgettext@plt>
   123b4:	ldr	r3, [pc, #396]	; 12548 <__assert_fail@plt+0x1270>
   123b8:	ldr	r2, [pc, #396]	; 1254c <__assert_fail@plt+0x1274>
   123bc:	mov	r1, r0
   123c0:	mov	r0, #1
   123c4:	bl	1120c <__printf_chk@plt>
   123c8:	mov	r1, #0
   123cc:	mov	r0, #5
   123d0:	bl	11260 <setlocale@plt>
   123d4:	cmp	r0, #0
   123d8:	ldreq	r7, [pc, #352]	; 12540 <__assert_fail@plt+0x1268>
   123dc:	beq	123f8 <__assert_fail@plt+0x1120>
   123e0:	mov	r2, #3
   123e4:	ldr	r1, [pc, #356]	; 12550 <__assert_fail@plt+0x1278>
   123e8:	bl	112c0 <strncmp@plt>
   123ec:	ldr	r7, [pc, #332]	; 12540 <__assert_fail@plt+0x1268>
   123f0:	cmp	r0, #0
   123f4:	bne	124e0 <__assert_fail@plt+0x1208>
   123f8:	mov	r2, #5
   123fc:	ldr	r1, [pc, #336]	; 12554 <__assert_fail@plt+0x127c>
   12400:	mov	r0, #0
   12404:	bl	110c8 <dcgettext@plt>
   12408:	ldr	r3, [pc, #304]	; 12540 <__assert_fail@plt+0x1268>
   1240c:	ldr	r2, [pc, #308]	; 12548 <__assert_fail@plt+0x1270>
   12410:	mov	r1, r0
   12414:	mov	r0, #1
   12418:	bl	1120c <__printf_chk@plt>
   1241c:	mov	r2, #5
   12420:	ldr	r1, [pc, #304]	; 12558 <__assert_fail@plt+0x1280>
   12424:	mov	r0, #0
   12428:	bl	110c8 <dcgettext@plt>
   1242c:	ldr	r2, [pc, #296]	; 1255c <__assert_fail@plt+0x1284>
   12430:	cmp	r4, r7
   12434:	ldr	r3, [pc, #292]	; 12560 <__assert_fail@plt+0x1288>
   12438:	movne	r3, r2
   1243c:	mov	r1, r0
   12440:	mov	r2, r4
   12444:	mov	r0, #1
   12448:	bl	1120c <__printf_chk@plt>
   1244c:	b	12200 <__assert_fail@plt+0xf28>
   12450:	mov	r0, r4
   12454:	bl	110c8 <dcgettext@plt>
   12458:	ldr	r3, [pc, #232]	; 12548 <__assert_fail@plt+0x1270>
   1245c:	ldr	r2, [pc, #232]	; 1254c <__assert_fail@plt+0x1274>
   12460:	mov	r1, r0
   12464:	mov	r0, #1
   12468:	bl	1120c <__printf_chk@plt>
   1246c:	mov	r1, r4
   12470:	mov	r0, #5
   12474:	bl	11260 <setlocale@plt>
   12478:	cmp	r0, #0
   1247c:	beq	12494 <__assert_fail@plt+0x11bc>
   12480:	mov	r2, #3
   12484:	ldr	r1, [pc, #196]	; 12550 <__assert_fail@plt+0x1278>
   12488:	bl	112c0 <strncmp@plt>
   1248c:	cmp	r0, #0
   12490:	bne	124d8 <__assert_fail@plt+0x1200>
   12494:	mov	r2, #5
   12498:	ldr	r1, [pc, #180]	; 12554 <__assert_fail@plt+0x127c>
   1249c:	mov	r0, #0
   124a0:	bl	110c8 <dcgettext@plt>
   124a4:	ldr	r3, [pc, #148]	; 12540 <__assert_fail@plt+0x1268>
   124a8:	ldr	r2, [pc, #152]	; 12548 <__assert_fail@plt+0x1270>
   124ac:	mov	r4, r3
   124b0:	mov	r1, r0
   124b4:	mov	r0, #1
   124b8:	bl	1120c <__printf_chk@plt>
   124bc:	ldr	r1, [pc, #148]	; 12558 <__assert_fail@plt+0x1280>
   124c0:	mov	r2, #5
   124c4:	mov	r0, #0
   124c8:	bl	110c8 <dcgettext@plt>
   124cc:	ldr	r3, [pc, #140]	; 12560 <__assert_fail@plt+0x1288>
   124d0:	mov	r1, r0
   124d4:	b	12440 <__assert_fail@plt+0x1168>
   124d8:	ldr	r7, [pc, #96]	; 12540 <__assert_fail@plt+0x1268>
   124dc:	mov	r4, r7
   124e0:	mov	r2, #5
   124e4:	ldr	r1, [pc, #120]	; 12564 <__assert_fail@plt+0x128c>
   124e8:	mov	r0, #0
   124ec:	bl	110c8 <dcgettext@plt>
   124f0:	ldr	r1, [r6]
   124f4:	bl	10fcc <fputs_unlocked@plt>
   124f8:	b	123f8 <__assert_fail@plt+0x1120>
   124fc:	andeq	r5, r3, r8, asr #3
   12500:	andeq	r3, r2, r4, lsl ip
   12504:	muleq	r3, r4, r5
   12508:	andeq	r3, r2, ip, lsr ip
   1250c:	ldrdeq	r5, [r3], -r4
   12510:	muleq	r2, r8, sl
   12514:	andeq	r3, r2, r0, ror #24
   12518:	andeq	r3, r2, r0, lsr #25
   1251c:	ldrdeq	r3, [r2], -r8
   12520:	andeq	r3, r2, r4, lsr #26
   12524:	strdeq	r3, [r2], -r8
   12528:			; <UNDEFINED> instruction: 0x00023fb4
   1252c:	andeq	r4, r2, r4, asr #32
   12530:	andeq	r4, r2, r4, ror r0
   12534:	andeq	r4, r2, ip, lsr #1
   12538:	strdeq	r4, [r2], -r0
   1253c:			; <UNDEFINED> instruction: 0x000242bc
   12540:	andeq	r3, r2, r0, lsl ip
   12544:	andeq	r4, r2, r0, asr r3
   12548:	andeq	r4, r2, r8, ror #6
   1254c:	muleq	r2, r0, r3
   12550:	andeq	r4, r2, r0, lsr #7
   12554:	andeq	r4, r2, ip, ror #7
   12558:	andeq	r4, r2, r8, lsl #8
   1255c:	andeq	r3, r2, ip, asr ip
   12560:			; <UNDEFINED> instruction: 0x000245b4
   12564:	andeq	r4, r2, r4, lsr #7
   12568:	ldr	r3, [pc, #4]	; 12574 <__assert_fail@plt+0x129c>
   1256c:	str	r0, [r3]
   12570:	bx	lr
   12574:	andeq	r5, r3, ip, lsl #11
   12578:	ldr	r3, [pc, #4]	; 12584 <__assert_fail@plt+0x12ac>
   1257c:	strb	r0, [r3, #4]
   12580:	bx	lr
   12584:	andeq	r5, r3, ip, lsl #11
   12588:	ldr	r3, [pc, #192]	; 12650 <__assert_fail@plt+0x1378>
   1258c:	push	{r4, r5, r6, lr}
   12590:	sub	sp, sp, #8
   12594:	ldr	r0, [r3]
   12598:	bl	23054 <__assert_fail@plt+0x11d7c>
   1259c:	cmp	r0, #0
   125a0:	beq	125c4 <__assert_fail@plt+0x12ec>
   125a4:	ldr	r4, [pc, #168]	; 12654 <__assert_fail@plt+0x137c>
   125a8:	ldrb	r3, [r4, #4]
   125ac:	cmp	r3, #0
   125b0:	beq	125e0 <__assert_fail@plt+0x1308>
   125b4:	bl	111d0 <__errno_location@plt>
   125b8:	ldr	r3, [r0]
   125bc:	cmp	r3, #32
   125c0:	bne	125e0 <__assert_fail@plt+0x1308>
   125c4:	ldr	r3, [pc, #140]	; 12658 <__assert_fail@plt+0x1380>
   125c8:	ldr	r0, [r3]
   125cc:	bl	23054 <__assert_fail@plt+0x11d7c>
   125d0:	cmp	r0, #0
   125d4:	bne	12628 <__assert_fail@plt+0x1350>
   125d8:	add	sp, sp, #8
   125dc:	pop	{r4, r5, r6, pc}
   125e0:	mov	r2, #5
   125e4:	ldr	r1, [pc, #112]	; 1265c <__assert_fail@plt+0x1384>
   125e8:	mov	r0, #0
   125ec:	bl	110c8 <dcgettext@plt>
   125f0:	ldr	r4, [r4]
   125f4:	cmp	r4, #0
   125f8:	mov	r5, r0
   125fc:	beq	12634 <__assert_fail@plt+0x135c>
   12600:	bl	111d0 <__errno_location@plt>
   12604:	ldr	r6, [r0]
   12608:	mov	r0, r4
   1260c:	bl	146a4 <__assert_fail@plt+0x33cc>
   12610:	mov	r1, r6
   12614:	str	r5, [sp]
   12618:	ldr	r2, [pc, #64]	; 12660 <__assert_fail@plt+0x1388>
   1261c:	mov	r3, r0
   12620:	mov	r0, #0
   12624:	bl	11140 <error@plt>
   12628:	ldr	r3, [pc, #52]	; 12664 <__assert_fail@plt+0x138c>
   1262c:	ldr	r0, [r3]
   12630:	bl	1105c <_exit@plt>
   12634:	bl	111d0 <__errno_location@plt>
   12638:	mov	r3, r5
   1263c:	ldr	r2, [pc, #36]	; 12668 <__assert_fail@plt+0x1390>
   12640:	ldr	r1, [r0]
   12644:	mov	r0, r4
   12648:	bl	11140 <error@plt>
   1264c:	b	12628 <__assert_fail@plt+0x1350>
   12650:	ldrdeq	r5, [r3], -r4
   12654:	andeq	r5, r3, ip, lsl #11
   12658:	andeq	r5, r3, r8, asr #3
   1265c:	andeq	r4, r2, r4, lsl #14
   12660:	andeq	r4, r2, r0, lsl r7
   12664:	andeq	r5, r3, r0, ror r1
   12668:	andeq	r4, r2, r4, ror r4
   1266c:	push	{r4, r5}
   12670:	pop	{r4, r5}
   12674:	b	11014 <posix_fadvise64@plt>
   12678:	cmp	r0, #0
   1267c:	bxeq	lr
   12680:	push	{r4, lr}
   12684:	sub	sp, sp, #16
   12688:	mov	r4, r1
   1268c:	bl	11218 <fileno@plt>
   12690:	mov	r2, #0
   12694:	mov	r3, #0
   12698:	str	r4, [sp, #8]
   1269c:	strd	r2, [sp]
   126a0:	bl	11014 <posix_fadvise64@plt>
   126a4:	add	sp, sp, #16
   126a8:	pop	{r4, pc}
   126ac:	push	{r4, r5, lr}
   126b0:	sub	sp, sp, #12
   126b4:	mov	r4, r0
   126b8:	bl	11218 <fileno@plt>
   126bc:	cmp	r0, #0
   126c0:	mov	r0, r4
   126c4:	blt	12740 <__assert_fail@plt+0x1468>
   126c8:	bl	11164 <__freading@plt>
   126cc:	cmp	r0, #0
   126d0:	bne	1270c <__assert_fail@plt+0x1434>
   126d4:	mov	r0, r4
   126d8:	bl	1274c <__assert_fail@plt+0x1474>
   126dc:	cmp	r0, #0
   126e0:	beq	1273c <__assert_fail@plt+0x1464>
   126e4:	bl	111d0 <__errno_location@plt>
   126e8:	mov	r5, r0
   126ec:	mov	r0, r4
   126f0:	ldr	r4, [r5]
   126f4:	bl	11230 <fclose@plt>
   126f8:	cmp	r4, #0
   126fc:	mvnne	r0, #0
   12700:	strne	r4, [r5]
   12704:	add	sp, sp, #12
   12708:	pop	{r4, r5, pc}
   1270c:	mov	r0, r4
   12710:	bl	11218 <fileno@plt>
   12714:	mov	r3, #1
   12718:	str	r3, [sp]
   1271c:	mov	r2, #0
   12720:	mov	r3, #0
   12724:	bl	11104 <lseek64@plt>
   12728:	mvn	r3, #0
   1272c:	mvn	r2, #0
   12730:	cmp	r1, r3
   12734:	cmpeq	r0, r2
   12738:	bne	126d4 <__assert_fail@plt+0x13fc>
   1273c:	mov	r0, r4
   12740:	add	sp, sp, #12
   12744:	pop	{r4, r5, lr}
   12748:	b	11230 <fclose@plt>
   1274c:	push	{r4, lr}
   12750:	subs	r4, r0, #0
   12754:	sub	sp, sp, #8
   12758:	beq	12774 <__assert_fail@plt+0x149c>
   1275c:	bl	11164 <__freading@plt>
   12760:	cmp	r0, #0
   12764:	beq	12774 <__assert_fail@plt+0x149c>
   12768:	ldr	r3, [r4]
   1276c:	tst	r3, #256	; 0x100
   12770:	bne	12784 <__assert_fail@plt+0x14ac>
   12774:	mov	r0, r4
   12778:	add	sp, sp, #8
   1277c:	pop	{r4, lr}
   12780:	b	1102c <fflush@plt>
   12784:	mov	r3, #1
   12788:	str	r3, [sp]
   1278c:	mov	r2, #0
   12790:	mov	r3, #0
   12794:	mov	r0, r4
   12798:	bl	127ac <__assert_fail@plt+0x14d4>
   1279c:	mov	r0, r4
   127a0:	add	sp, sp, #8
   127a4:	pop	{r4, lr}
   127a8:	b	1102c <fflush@plt>
   127ac:	push	{r4, r5, r6, r7, r8, lr}
   127b0:	sub	sp, sp, #8
   127b4:	ldmib	r0, {ip, lr}
   127b8:	mov	r4, r0
   127bc:	ldr	r5, [sp, #32]
   127c0:	cmp	lr, ip
   127c4:	beq	127dc <__assert_fail@plt+0x1504>
   127c8:	str	r5, [sp, #32]
   127cc:	mov	r0, r4
   127d0:	add	sp, sp, #8
   127d4:	pop	{r4, r5, r6, r7, r8, lr}
   127d8:	b	1123c <fseeko64@plt>
   127dc:	ldr	lr, [r0, #20]
   127e0:	ldr	ip, [r0, #16]
   127e4:	cmp	lr, ip
   127e8:	bne	127c8 <__assert_fail@plt+0x14f0>
   127ec:	ldr	r8, [r0, #36]	; 0x24
   127f0:	cmp	r8, #0
   127f4:	bne	127c8 <__assert_fail@plt+0x14f0>
   127f8:	mov	r6, r2
   127fc:	mov	r7, r3
   12800:	bl	11218 <fileno@plt>
   12804:	mov	r2, r6
   12808:	mov	r3, r7
   1280c:	str	r5, [sp]
   12810:	bl	11104 <lseek64@plt>
   12814:	mvn	r3, #0
   12818:	mvn	r2, #0
   1281c:	cmp	r1, r3
   12820:	cmpeq	r0, r2
   12824:	beq	12844 <__assert_fail@plt+0x156c>
   12828:	ldr	r3, [r4]
   1282c:	strd	r0, [r4, #80]	; 0x50
   12830:	mov	r0, r8
   12834:	bic	r3, r3, #16
   12838:	str	r3, [r4]
   1283c:	add	sp, sp, #8
   12840:	pop	{r4, r5, r6, r7, r8, pc}
   12844:	mvn	r0, #0
   12848:	b	1283c <__assert_fail@plt+0x1564>
   1284c:	mov	r3, #0
   12850:	str	r3, [r0]
   12854:	str	r3, [r0, #4]
   12858:	str	r3, [r0, #8]
   1285c:	bx	lr
   12860:	ldr	ip, [r1]
   12864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12868:	tst	ip, #16
   1286c:	ldr	fp, [r0, #8]
   12870:	ldr	r3, [r0]
   12874:	sub	sp, sp, #12
   12878:	add	r8, fp, r3
   1287c:	bne	12960 <__assert_fail@plt+0x1688>
   12880:	mov	r6, r2
   12884:	mov	r7, r0
   12888:	mov	r5, r1
   1288c:	mov	r4, fp
   12890:	mov	r9, #1
   12894:	b	128bc <__assert_fail@plt+0x15e4>
   12898:	add	r1, r3, #1
   1289c:	str	r1, [r5, #4]
   128a0:	ldrb	sl, [r3]
   128a4:	cmp	r4, r8
   128a8:	beq	1290c <__assert_fail@plt+0x1634>
   128ac:	cmp	sl, r6
   128b0:	strb	sl, [r4]
   128b4:	add	r4, r4, #1
   128b8:	beq	1294c <__assert_fail@plt+0x1674>
   128bc:	ldr	r3, [r5, #4]
   128c0:	ldr	r1, [r5, #8]
   128c4:	cmp	r3, r1
   128c8:	bcc	12898 <__assert_fail@plt+0x15c0>
   128cc:	mov	r0, r5
   128d0:	bl	11248 <__uflow@plt>
   128d4:	cmn	r0, #1
   128d8:	mov	sl, r0
   128dc:	bne	128a4 <__assert_fail@plt+0x15cc>
   128e0:	cmp	fp, r4
   128e4:	beq	12960 <__assert_fail@plt+0x1688>
   128e8:	ldr	r3, [r5]
   128ec:	tst	r3, #32
   128f0:	bne	12960 <__assert_fail@plt+0x1688>
   128f4:	ldrb	r3, [r4, #-1]
   128f8:	cmp	r3, r6
   128fc:	beq	1294c <__assert_fail@plt+0x1674>
   12900:	cmp	r4, r8
   12904:	mov	sl, r6
   12908:	bne	128ac <__assert_fail@plt+0x15d4>
   1290c:	str	r9, [sp]
   12910:	mov	r0, fp
   12914:	mov	r2, #1
   12918:	mvn	r3, #0
   1291c:	mov	r1, r7
   12920:	ldr	r4, [r7]
   12924:	bl	22400 <__assert_fail@plt+0x11128>
   12928:	ldr	r2, [r7]
   1292c:	cmp	sl, r6
   12930:	add	r4, r0, r4
   12934:	str	r0, [r7, #8]
   12938:	mov	fp, r0
   1293c:	strb	sl, [r4]
   12940:	add	r8, r0, r2
   12944:	add	r4, r4, #1
   12948:	bne	128bc <__assert_fail@plt+0x15e4>
   1294c:	sub	r4, r4, fp
   12950:	mov	r0, r7
   12954:	str	r4, [r7, #4]
   12958:	add	sp, sp, #12
   1295c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12960:	mov	r0, #0
   12964:	add	sp, sp, #12
   12968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1296c:	mov	r2, #10
   12970:	b	12860 <__assert_fail@plt+0x1588>
   12974:	ldr	r0, [r0, #8]
   12978:	b	23198 <__assert_fail@plt+0x11ec0>
   1297c:	push	{r4, r5, r6, lr}
   12980:	subs	r4, r0, #0
   12984:	beq	129f8 <__assert_fail@plt+0x1720>
   12988:	mov	r1, #47	; 0x2f
   1298c:	bl	1126c <strrchr@plt>
   12990:	subs	r5, r0, #0
   12994:	beq	129e4 <__assert_fail@plt+0x170c>
   12998:	add	r6, r5, #1
   1299c:	sub	r3, r6, r4
   129a0:	cmp	r3, #6
   129a4:	ble	129e4 <__assert_fail@plt+0x170c>
   129a8:	mov	r2, #7
   129ac:	ldr	r1, [pc, #96]	; 12a14 <__assert_fail@plt+0x173c>
   129b0:	sub	r0, r5, #6
   129b4:	bl	112c0 <strncmp@plt>
   129b8:	cmp	r0, #0
   129bc:	bne	129e4 <__assert_fail@plt+0x170c>
   129c0:	mov	r2, #3
   129c4:	ldr	r1, [pc, #76]	; 12a18 <__assert_fail@plt+0x1740>
   129c8:	mov	r0, r6
   129cc:	bl	112c0 <strncmp@plt>
   129d0:	cmp	r0, #0
   129d4:	movne	r4, r6
   129d8:	ldreq	r3, [pc, #60]	; 12a1c <__assert_fail@plt+0x1744>
   129dc:	addeq	r4, r5, #4
   129e0:	streq	r4, [r3]
   129e4:	ldr	r2, [pc, #52]	; 12a20 <__assert_fail@plt+0x1748>
   129e8:	ldr	r3, [pc, #52]	; 12a24 <__assert_fail@plt+0x174c>
   129ec:	str	r4, [r2]
   129f0:	str	r4, [r3]
   129f4:	pop	{r4, r5, r6, pc}
   129f8:	ldr	r3, [pc, #40]	; 12a28 <__assert_fail@plt+0x1750>
   129fc:	mov	r2, #55	; 0x37
   12a00:	mov	r1, #1
   12a04:	ldr	r3, [r3]
   12a08:	ldr	r0, [pc, #28]	; 12a2c <__assert_fail@plt+0x1754>
   12a0c:	bl	110f8 <fwrite@plt>
   12a10:	bl	112cc <abort@plt>
   12a14:	andeq	r4, r2, r0, asr r7
   12a18:	andeq	r4, r2, r8, asr r7
   12a1c:			; <UNDEFINED> instruction: 0x000351b8
   12a20:	muleq	r3, r4, r5
   12a24:			; <UNDEFINED> instruction: 0x000351bc
   12a28:	andeq	r5, r3, r8, asr #3
   12a2c:	andeq	r4, r2, r8, lsl r7
   12a30:	push	{r4, r5, r6, lr}
   12a34:	mov	r2, #48	; 0x30
   12a38:	mov	r4, r1
   12a3c:	mov	r1, #0
   12a40:	mov	r5, r0
   12a44:	bl	111f4 <memset@plt>
   12a48:	cmp	r4, #10
   12a4c:	beq	12a5c <__assert_fail@plt+0x1784>
   12a50:	str	r4, [r5]
   12a54:	mov	r0, r5
   12a58:	pop	{r4, r5, r6, pc}
   12a5c:	bl	112cc <abort@plt>
   12a60:	push	{r4, r5, r6, lr}
   12a64:	mov	r4, r0
   12a68:	mov	r5, r1
   12a6c:	bl	231f0 <__assert_fail@plt+0x11f18>
   12a70:	ldrb	r3, [r0]
   12a74:	bic	r3, r3, #32
   12a78:	cmp	r3, #85	; 0x55
   12a7c:	bne	12adc <__assert_fail@plt+0x1804>
   12a80:	ldrb	r3, [r0, #1]
   12a84:	bic	r3, r3, #32
   12a88:	cmp	r3, #84	; 0x54
   12a8c:	bne	12b18 <__assert_fail@plt+0x1840>
   12a90:	ldrb	r3, [r0, #2]
   12a94:	bic	r3, r3, #32
   12a98:	cmp	r3, #70	; 0x46
   12a9c:	bne	12b18 <__assert_fail@plt+0x1840>
   12aa0:	ldrb	r3, [r0, #3]
   12aa4:	cmp	r3, #45	; 0x2d
   12aa8:	bne	12b18 <__assert_fail@plt+0x1840>
   12aac:	ldrb	r3, [r0, #4]
   12ab0:	cmp	r3, #56	; 0x38
   12ab4:	bne	12b18 <__assert_fail@plt+0x1840>
   12ab8:	ldrb	r3, [r0, #5]
   12abc:	cmp	r3, #0
   12ac0:	bne	12b18 <__assert_fail@plt+0x1840>
   12ac4:	ldrb	r2, [r4]
   12ac8:	ldr	r3, [pc, #152]	; 12b68 <__assert_fail@plt+0x1890>
   12acc:	ldr	r0, [pc, #152]	; 12b6c <__assert_fail@plt+0x1894>
   12ad0:	cmp	r2, #96	; 0x60
   12ad4:	movne	r0, r3
   12ad8:	pop	{r4, r5, r6, pc}
   12adc:	cmp	r3, #71	; 0x47
   12ae0:	bne	12b18 <__assert_fail@plt+0x1840>
   12ae4:	ldrb	r3, [r0, #1]
   12ae8:	bic	r3, r3, #32
   12aec:	cmp	r3, #66	; 0x42
   12af0:	bne	12b18 <__assert_fail@plt+0x1840>
   12af4:	ldrb	r3, [r0, #2]
   12af8:	cmp	r3, #49	; 0x31
   12afc:	bne	12b18 <__assert_fail@plt+0x1840>
   12b00:	ldrb	r3, [r0, #3]
   12b04:	cmp	r3, #56	; 0x38
   12b08:	bne	12b18 <__assert_fail@plt+0x1840>
   12b0c:	ldrb	r3, [r0, #4]
   12b10:	cmp	r3, #48	; 0x30
   12b14:	beq	12b2c <__assert_fail@plt+0x1854>
   12b18:	ldr	r3, [pc, #80]	; 12b70 <__assert_fail@plt+0x1898>
   12b1c:	cmp	r5, #9
   12b20:	ldr	r0, [pc, #76]	; 12b74 <__assert_fail@plt+0x189c>
   12b24:	movne	r0, r3
   12b28:	pop	{r4, r5, r6, pc}
   12b2c:	ldrb	r3, [r0, #5]
   12b30:	cmp	r3, #51	; 0x33
   12b34:	bne	12b18 <__assert_fail@plt+0x1840>
   12b38:	ldrb	r3, [r0, #6]
   12b3c:	cmp	r3, #48	; 0x30
   12b40:	bne	12b18 <__assert_fail@plt+0x1840>
   12b44:	ldrb	r3, [r0, #7]
   12b48:	cmp	r3, #0
   12b4c:	bne	12b18 <__assert_fail@plt+0x1840>
   12b50:	ldrb	r2, [r4]
   12b54:	ldr	r3, [pc, #28]	; 12b78 <__assert_fail@plt+0x18a0>
   12b58:	ldr	r0, [pc, #28]	; 12b7c <__assert_fail@plt+0x18a4>
   12b5c:	cmp	r2, #96	; 0x60
   12b60:	movne	r0, r3
   12b64:	pop	{r4, r5, r6, pc}
   12b68:			; <UNDEFINED> instruction: 0x000247b4
   12b6c:			; <UNDEFINED> instruction: 0x000247b0
   12b70:	andeq	r4, r2, r4, asr #15
   12b74:	andeq	r4, r2, r0, asr #15
   12b78:			; <UNDEFINED> instruction: 0x000247bc
   12b7c:			; <UNDEFINED> instruction: 0x000247b8
   12b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	sub	sp, sp, #116	; 0x74
   12b88:	mov	sl, r0
   12b8c:	str	r3, [sp, #24]
   12b90:	mov	r3, #1
   12b94:	mov	r8, r1
   12b98:	str	r2, [sp, #56]	; 0x38
   12b9c:	str	r3, [sp, #36]	; 0x24
   12ba0:	bl	11110 <__ctype_get_mb_cur_max@plt>
   12ba4:	ldr	r3, [sp, #156]	; 0x9c
   12ba8:	mov	fp, r8
   12bac:	mov	r2, #0
   12bb0:	lsr	r3, r3, #1
   12bb4:	and	r3, r3, #1
   12bb8:	str	r2, [sp, #68]	; 0x44
   12bbc:	str	r3, [sp, #28]
   12bc0:	str	r2, [sp, #40]	; 0x28
   12bc4:	str	r2, [sp, #44]	; 0x2c
   12bc8:	str	r2, [sp, #52]	; 0x34
   12bcc:	str	r2, [sp, #64]	; 0x40
   12bd0:	str	r2, [sp, #72]	; 0x48
   12bd4:	str	sl, [sp, #32]
   12bd8:	str	r0, [sp, #76]	; 0x4c
   12bdc:	ldr	r3, [sp, #152]	; 0x98
   12be0:	cmp	r3, #10
   12be4:	ldrls	pc, [pc, r3, lsl #2]
   12be8:	b	13da8 <__assert_fail@plt+0x2ad0>
   12bec:	andeq	r2, r1, r8, lsl ip
   12bf0:	andeq	r2, r1, r0, lsl #30
   12bf4:	andeq	r2, r1, r4, lsr #30
   12bf8:	andeq	r2, r1, r8, asr #30
   12bfc:	andeq	r3, r1, r4, ror r0
   12c00:	andeq	r3, r1, r8, asr #32
   12c04:	andeq	r3, r1, r0, lsr #32
   12c08:	andeq	r2, r1, ip, asr pc
   12c0c:	andeq	r2, r1, r4, ror pc
   12c10:	andeq	r2, r1, r4, ror pc
   12c14:	andeq	r2, r1, r4, ror pc
   12c18:	mov	r3, #0
   12c1c:	mov	r7, r3
   12c20:	str	r3, [sp, #28]
   12c24:	ldr	r3, [sp, #44]	; 0x2c
   12c28:	mov	sl, #0
   12c2c:	eor	r3, r3, #1
   12c30:	str	r3, [sp, #60]	; 0x3c
   12c34:	ldr	r3, [sp, #24]
   12c38:	cmn	r3, #1
   12c3c:	beq	131a0 <__assert_fail@plt+0x1ec8>
   12c40:	ldr	r3, [sp, #24]
   12c44:	subs	r5, r3, sl
   12c48:	movne	r5, #1
   12c4c:	cmp	r5, #0
   12c50:	beq	131b8 <__assert_fail@plt+0x1ee0>
   12c54:	ldr	r3, [sp, #152]	; 0x98
   12c58:	ldr	r8, [sp, #44]	; 0x2c
   12c5c:	cmp	r3, #2
   12c60:	moveq	r8, #0
   12c64:	andne	r8, r8, #1
   12c68:	ldr	r3, [sp, #52]	; 0x34
   12c6c:	adds	r9, r3, #0
   12c70:	movne	r9, #1
   12c74:	ands	r6, r9, r8
   12c78:	beq	13620 <__assert_fail@plt+0x2348>
   12c7c:	ldr	r2, [sp, #52]	; 0x34
   12c80:	ldr	r1, [sp, #24]
   12c84:	cmp	r2, #1
   12c88:	mov	r3, r2
   12c8c:	movls	r3, #0
   12c90:	movhi	r3, #1
   12c94:	cmn	r1, #1
   12c98:	movne	r3, #0
   12c9c:	cmp	r3, #0
   12ca0:	add	r4, sl, r2
   12ca4:	beq	12cb4 <__assert_fail@plt+0x19dc>
   12ca8:	ldr	r0, [sp, #56]	; 0x38
   12cac:	bl	111b8 <strlen@plt>
   12cb0:	str	r0, [sp, #24]
   12cb4:	ldr	r3, [sp, #24]
   12cb8:	cmp	r3, r4
   12cbc:	ldr	r3, [sp, #56]	; 0x38
   12cc0:	add	r3, r3, sl
   12cc4:	str	r3, [sp, #48]	; 0x30
   12cc8:	bcc	1362c <__assert_fail@plt+0x2354>
   12ccc:	mov	r0, r3
   12cd0:	ldr	r2, [sp, #52]	; 0x34
   12cd4:	ldr	r1, [sp, #64]	; 0x40
   12cd8:	bl	110a4 <memcmp@plt>
   12cdc:	cmp	r0, #0
   12ce0:	bne	1362c <__assert_fail@plt+0x2354>
   12ce4:	ldr	r3, [sp, #28]
   12ce8:	cmp	r3, #0
   12cec:	bne	13ea8 <__assert_fail@plt+0x2bd0>
   12cf0:	ldr	r3, [sp, #48]	; 0x30
   12cf4:	ldrb	r4, [r3]
   12cf8:	cmp	r4, #126	; 0x7e
   12cfc:	ldrls	pc, [pc, r4, lsl #2]
   12d00:	b	135c0 <__assert_fail@plt+0x22e8>
   12d04:	andeq	r3, r1, r4, ror #7
   12d08:	andeq	r3, r1, r0, asr #11
   12d0c:	andeq	r3, r1, r0, asr #11
   12d10:	andeq	r3, r1, r0, asr #11
   12d14:	andeq	r3, r1, r0, asr #11
   12d18:	andeq	r3, r1, r0, asr #11
   12d1c:	andeq	r3, r1, r0, asr #11
   12d20:	andeq	r3, r1, r8, asr #7
   12d24:	andeq	r3, r1, ip, lsr #7
   12d28:	andeq	r3, r1, r8, lsr #11
   12d2c:	andeq	r3, r1, ip, lsl #6
   12d30:	strdeq	r3, [r1], -r0
   12d34:	andeq	r3, r1, r4, lsl #11
   12d38:	andeq	r3, r1, r0, ror #10
   12d3c:	andeq	r3, r1, r0, asr #11
   12d40:	andeq	r3, r1, r0, asr #11
   12d44:	andeq	r3, r1, r0, asr #11
   12d48:	andeq	r3, r1, r0, asr #11
   12d4c:	andeq	r3, r1, r0, asr #11
   12d50:	andeq	r3, r1, r0, asr #11
   12d54:	andeq	r3, r1, r0, asr #11
   12d58:	andeq	r3, r1, r0, asr #11
   12d5c:	andeq	r3, r1, r0, asr #11
   12d60:	andeq	r3, r1, r0, asr #11
   12d64:	andeq	r3, r1, r0, asr #11
   12d68:	andeq	r3, r1, r0, asr #11
   12d6c:	andeq	r3, r1, r0, asr #11
   12d70:	andeq	r3, r1, r0, asr #11
   12d74:	andeq	r3, r1, r0, asr #11
   12d78:	andeq	r3, r1, r0, asr #11
   12d7c:	andeq	r3, r1, r0, asr #11
   12d80:	andeq	r3, r1, r0, asr #11
   12d84:	andeq	r3, r1, r0, lsr #11
   12d88:	ldrdeq	r3, [r1], -r4
   12d8c:	ldrdeq	r3, [r1], -r4
   12d90:	andeq	r3, r1, r4, ror #1
   12d94:	ldrdeq	r3, [r1], -r4
   12d98:	andeq	r3, r1, ip, ror #10
   12d9c:	ldrdeq	r3, [r1], -r4
   12da0:	andeq	r3, r1, r0, asr #10
   12da4:	ldrdeq	r3, [r1], -r4
   12da8:	ldrdeq	r3, [r1], -r4
   12dac:	ldrdeq	r3, [r1], -r4
   12db0:	andeq	r3, r1, ip, ror #10
   12db4:	andeq	r3, r1, ip, ror #10
   12db8:	andeq	r3, r1, ip, ror #10
   12dbc:	andeq	r3, r1, ip, ror #10
   12dc0:	andeq	r3, r1, ip, ror #10
   12dc4:	andeq	r3, r1, ip, ror #10
   12dc8:	andeq	r3, r1, ip, ror #10
   12dcc:	andeq	r3, r1, ip, ror #10
   12dd0:	andeq	r3, r1, ip, ror #10
   12dd4:	andeq	r3, r1, ip, ror #10
   12dd8:	andeq	r3, r1, ip, ror #10
   12ddc:	andeq	r3, r1, ip, ror #10
   12de0:	andeq	r3, r1, ip, ror #10
   12de4:	andeq	r3, r1, ip, ror #10
   12de8:	andeq	r3, r1, ip, ror #10
   12dec:	andeq	r3, r1, ip, ror #10
   12df0:	ldrdeq	r3, [r1], -r4
   12df4:	ldrdeq	r3, [r1], -r4
   12df8:	ldrdeq	r3, [r1], -r4
   12dfc:	ldrdeq	r3, [r1], -r4
   12e00:	andeq	r3, r1, r0, lsl r5
   12e04:	andeq	r3, r1, r0, asr #11
   12e08:	andeq	r3, r1, ip, ror #10
   12e0c:	andeq	r3, r1, ip, ror #10
   12e10:	andeq	r3, r1, ip, ror #10
   12e14:	andeq	r3, r1, ip, ror #10
   12e18:	andeq	r3, r1, ip, ror #10
   12e1c:	andeq	r3, r1, ip, ror #10
   12e20:	andeq	r3, r1, ip, ror #10
   12e24:	andeq	r3, r1, ip, ror #10
   12e28:	andeq	r3, r1, ip, ror #10
   12e2c:	andeq	r3, r1, ip, ror #10
   12e30:	andeq	r3, r1, ip, ror #10
   12e34:	andeq	r3, r1, ip, ror #10
   12e38:	andeq	r3, r1, ip, ror #10
   12e3c:	andeq	r3, r1, ip, ror #10
   12e40:	andeq	r3, r1, ip, ror #10
   12e44:	andeq	r3, r1, ip, ror #10
   12e48:	andeq	r3, r1, ip, ror #10
   12e4c:	andeq	r3, r1, ip, ror #10
   12e50:	andeq	r3, r1, ip, ror #10
   12e54:	andeq	r3, r1, ip, ror #10
   12e58:	andeq	r3, r1, ip, ror #10
   12e5c:	andeq	r3, r1, ip, ror #10
   12e60:	andeq	r3, r1, ip, ror #10
   12e64:	andeq	r3, r1, ip, ror #10
   12e68:	andeq	r3, r1, ip, ror #10
   12e6c:	andeq	r3, r1, ip, ror #10
   12e70:	ldrdeq	r3, [r1], -r4
   12e74:	andeq	r3, r1, r0, lsr r2
   12e78:	andeq	r3, r1, ip, ror #10
   12e7c:	ldrdeq	r3, [r1], -r4
   12e80:	andeq	r3, r1, ip, ror #10
   12e84:	ldrdeq	r3, [r1], -r4
   12e88:	andeq	r3, r1, ip, ror #10
   12e8c:	andeq	r3, r1, ip, ror #10
   12e90:	andeq	r3, r1, ip, ror #10
   12e94:	andeq	r3, r1, ip, ror #10
   12e98:	andeq	r3, r1, ip, ror #10
   12e9c:	andeq	r3, r1, ip, ror #10
   12ea0:	andeq	r3, r1, ip, ror #10
   12ea4:	andeq	r3, r1, ip, ror #10
   12ea8:	andeq	r3, r1, ip, ror #10
   12eac:	andeq	r3, r1, ip, ror #10
   12eb0:	andeq	r3, r1, ip, ror #10
   12eb4:	andeq	r3, r1, ip, ror #10
   12eb8:	andeq	r3, r1, ip, ror #10
   12ebc:	andeq	r3, r1, ip, ror #10
   12ec0:	andeq	r3, r1, ip, ror #10
   12ec4:	andeq	r3, r1, ip, ror #10
   12ec8:	andeq	r3, r1, ip, ror #10
   12ecc:	andeq	r3, r1, ip, ror #10
   12ed0:	andeq	r3, r1, ip, ror #10
   12ed4:	andeq	r3, r1, ip, ror #10
   12ed8:	andeq	r3, r1, ip, ror #10
   12edc:	andeq	r3, r1, ip, ror #10
   12ee0:	andeq	r3, r1, ip, ror #10
   12ee4:	andeq	r3, r1, ip, ror #10
   12ee8:	andeq	r3, r1, ip, ror #10
   12eec:	andeq	r3, r1, ip, ror #10
   12ef0:	andeq	r3, r1, r4, asr #1
   12ef4:	ldrdeq	r3, [r1], -r4
   12ef8:	andeq	r3, r1, r4, asr #1
   12efc:	andeq	r3, r1, r4, ror #1
   12f00:	mov	r3, #1
   12f04:	str	r3, [sp, #28]
   12f08:	str	r3, [sp, #52]	; 0x34
   12f0c:	ldr	r3, [pc, #4000]	; 13eb4 <__assert_fail@plt+0x2bdc>
   12f10:	mov	r7, #0
   12f14:	str	r3, [sp, #64]	; 0x40
   12f18:	mov	r3, #2
   12f1c:	str	r3, [sp, #152]	; 0x98
   12f20:	b	12c24 <__assert_fail@plt+0x194c>
   12f24:	ldr	r3, [sp, #28]
   12f28:	cmp	r3, #0
   12f2c:	beq	13088 <__assert_fail@plt+0x1db0>
   12f30:	mov	r3, #1
   12f34:	str	r3, [sp, #52]	; 0x34
   12f38:	ldr	r3, [pc, #3956]	; 13eb4 <__assert_fail@plt+0x2bdc>
   12f3c:	mov	r7, #0
   12f40:	str	r3, [sp, #64]	; 0x40
   12f44:	b	12c24 <__assert_fail@plt+0x194c>
   12f48:	mov	r3, #1
   12f4c:	str	r3, [sp, #44]	; 0x2c
   12f50:	str	r3, [sp, #52]	; 0x34
   12f54:	str	r3, [sp, #28]
   12f58:	b	12f0c <__assert_fail@plt+0x1c34>
   12f5c:	mov	r3, #0
   12f60:	str	r3, [sp, #28]
   12f64:	mov	r3, #1
   12f68:	str	r3, [sp, #44]	; 0x2c
   12f6c:	mov	r7, #0
   12f70:	b	12c24 <__assert_fail@plt+0x194c>
   12f74:	ldr	r3, [sp, #152]	; 0x98
   12f78:	cmp	r3, #10
   12f7c:	beq	12fc0 <__assert_fail@plt+0x1ce8>
   12f80:	mov	r2, #5
   12f84:	ldr	r1, [pc, #3884]	; 13eb8 <__assert_fail@plt+0x2be0>
   12f88:	mov	r0, #0
   12f8c:	bl	110c8 <dcgettext@plt>
   12f90:	ldr	r2, [pc, #3872]	; 13eb8 <__assert_fail@plt+0x2be0>
   12f94:	cmp	r0, r2
   12f98:	str	r0, [sp, #164]	; 0xa4
   12f9c:	beq	13fa4 <__assert_fail@plt+0x2ccc>
   12fa0:	mov	r2, #5
   12fa4:	ldr	r1, [pc, #3848]	; 13eb4 <__assert_fail@plt+0x2bdc>
   12fa8:	mov	r0, #0
   12fac:	bl	110c8 <dcgettext@plt>
   12fb0:	ldr	r2, [pc, #3836]	; 13eb4 <__assert_fail@plt+0x2bdc>
   12fb4:	cmp	r0, r2
   12fb8:	str	r0, [sp, #168]	; 0xa8
   12fbc:	beq	13f94 <__assert_fail@plt+0x2cbc>
   12fc0:	ldr	r7, [sp, #28]
   12fc4:	cmp	r7, #0
   12fc8:	movne	r7, #0
   12fcc:	bne	13000 <__assert_fail@plt+0x1d28>
   12fd0:	ldr	r3, [sp, #164]	; 0xa4
   12fd4:	ldrb	r3, [r3]
   12fd8:	cmp	r3, #0
   12fdc:	beq	13fb4 <__assert_fail@plt+0x2cdc>
   12fe0:	ldr	r2, [sp, #164]	; 0xa4
   12fe4:	ldr	r1, [sp, #32]
   12fe8:	cmp	fp, r7
   12fec:	strbhi	r3, [r1, r7]
   12ff0:	ldrb	r3, [r2, #1]!
   12ff4:	add	r7, r7, #1
   12ff8:	cmp	r3, #0
   12ffc:	bne	12fe8 <__assert_fail@plt+0x1d10>
   13000:	ldr	r0, [sp, #168]	; 0xa8
   13004:	bl	111b8 <strlen@plt>
   13008:	ldr	r3, [sp, #168]	; 0xa8
   1300c:	str	r3, [sp, #64]	; 0x40
   13010:	mov	r3, #1
   13014:	str	r3, [sp, #44]	; 0x2c
   13018:	str	r0, [sp, #52]	; 0x34
   1301c:	b	12c24 <__assert_fail@plt+0x194c>
   13020:	mov	r3, #1
   13024:	str	r3, [sp, #44]	; 0x2c
   13028:	str	r3, [sp, #52]	; 0x34
   1302c:	str	r3, [sp, #28]
   13030:	ldr	r3, [pc, #3716]	; 13ebc <__assert_fail@plt+0x2be4>
   13034:	mov	r7, #0
   13038:	str	r3, [sp, #64]	; 0x40
   1303c:	mov	r3, #5
   13040:	str	r3, [sp, #152]	; 0x98
   13044:	b	12c24 <__assert_fail@plt+0x194c>
   13048:	ldr	r3, [sp, #28]
   1304c:	cmp	r3, #0
   13050:	beq	13d50 <__assert_fail@plt+0x2a78>
   13054:	ldr	r3, [sp, #28]
   13058:	mov	r7, #0
   1305c:	str	r3, [sp, #44]	; 0x2c
   13060:	mov	r3, #1
   13064:	str	r3, [sp, #52]	; 0x34
   13068:	ldr	r3, [pc, #3660]	; 13ebc <__assert_fail@plt+0x2be4>
   1306c:	str	r3, [sp, #64]	; 0x40
   13070:	b	12c24 <__assert_fail@plt+0x194c>
   13074:	ldr	r3, [sp, #28]
   13078:	cmp	r3, #0
   1307c:	mov	r3, #1
   13080:	streq	r3, [sp, #44]	; 0x2c
   13084:	bne	12f08 <__assert_fail@plt+0x1c30>
   13088:	cmp	fp, #0
   1308c:	beq	13d80 <__assert_fail@plt+0x2aa8>
   13090:	ldr	r3, [sp, #32]
   13094:	mov	r2, #39	; 0x27
   13098:	mov	r7, #1
   1309c:	strb	r2, [r3]
   130a0:	mov	r3, #0
   130a4:	str	r3, [sp, #28]
   130a8:	mov	r3, #1
   130ac:	str	r3, [sp, #52]	; 0x34
   130b0:	ldr	r3, [pc, #3580]	; 13eb4 <__assert_fail@plt+0x2bdc>
   130b4:	str	r3, [sp, #64]	; 0x40
   130b8:	mov	r3, #2
   130bc:	str	r3, [sp, #152]	; 0x98
   130c0:	b	12c24 <__assert_fail@plt+0x194c>
   130c4:	ldr	r3, [sp, #24]
   130c8:	cmn	r3, #1
   130cc:	beq	13ce4 <__assert_fail@plt+0x2a0c>
   130d0:	ldr	r3, [sp, #24]
   130d4:	subs	r3, r3, #1
   130d8:	movne	r3, #1
   130dc:	cmp	r3, #0
   130e0:	bne	130ec <__assert_fail@plt+0x1e14>
   130e4:	cmp	sl, #0
   130e8:	beq	134d8 <__assert_fail@plt+0x2200>
   130ec:	ldr	r3, [sp, #152]	; 0x98
   130f0:	mov	r5, #0
   130f4:	sub	r2, r3, #2
   130f8:	mov	r8, r5
   130fc:	clz	r2, r2
   13100:	lsr	r2, r2, #5
   13104:	ldr	r3, [sp, #60]	; 0x3c
   13108:	ldr	r1, [sp, #28]
   1310c:	orr	r3, r2, r3
   13110:	eor	r3, r3, #1
   13114:	orr	r3, r1, r3
   13118:	tst	r3, #255	; 0xff
   1311c:	bne	13848 <__assert_fail@plt+0x2570>
   13120:	cmp	r6, #0
   13124:	bne	13274 <__assert_fail@plt+0x1f9c>
   13128:	ldr	r3, [sp, #40]	; 0x28
   1312c:	eor	r8, r8, #1
   13130:	and	r8, r8, r3
   13134:	add	sl, sl, #1
   13138:	uxtb	r6, r8
   1313c:	cmp	r6, #0
   13140:	beq	13174 <__assert_fail@plt+0x1e9c>
   13144:	cmp	fp, r7
   13148:	movhi	r2, #39	; 0x27
   1314c:	ldrhi	r3, [sp, #32]
   13150:	strbhi	r2, [r3, r7]
   13154:	add	r3, r7, #1
   13158:	cmp	fp, r3
   1315c:	movhi	r1, #39	; 0x27
   13160:	ldrhi	r2, [sp, #32]
   13164:	add	r7, r7, #2
   13168:	strbhi	r1, [r2, r3]
   1316c:	mov	r3, #0
   13170:	str	r3, [sp, #40]	; 0x28
   13174:	cmp	r7, fp
   13178:	ldrcc	r3, [sp, #32]
   1317c:	strbcc	r4, [r3, r7]
   13180:	ldr	r3, [sp, #36]	; 0x24
   13184:	cmp	r5, #0
   13188:	moveq	r3, #0
   1318c:	str	r3, [sp, #36]	; 0x24
   13190:	ldr	r3, [sp, #24]
   13194:	add	r7, r7, #1
   13198:	cmn	r3, #1
   1319c:	bne	12c40 <__assert_fail@plt+0x1968>
   131a0:	ldr	r3, [sp, #56]	; 0x38
   131a4:	ldrb	r5, [r3, sl]
   131a8:	adds	r5, r5, #0
   131ac:	movne	r5, #1
   131b0:	cmp	r5, #0
   131b4:	bne	12c54 <__assert_fail@plt+0x197c>
   131b8:	ldr	r3, [sp, #152]	; 0x98
   131bc:	ldr	r1, [sp, #28]
   131c0:	sub	r3, r3, #2
   131c4:	clz	r3, r3
   131c8:	lsr	r3, r3, #5
   131cc:	and	r9, r1, r3
   131d0:	cmp	r7, #0
   131d4:	movne	r2, #0
   131d8:	andeq	r2, r9, #1
   131dc:	cmp	r2, #0
   131e0:	bne	13bbc <__assert_fail@plt+0x28e4>
   131e4:	eor	r2, r1, #1
   131e8:	ands	r3, r3, r2
   131ec:	beq	14078 <__assert_fail@plt+0x2da0>
   131f0:	ldr	r2, [sp, #68]	; 0x44
   131f4:	cmp	r2, #0
   131f8:	beq	14064 <__assert_fail@plt+0x2d8c>
   131fc:	ldr	r3, [sp, #36]	; 0x24
   13200:	cmp	r3, #0
   13204:	bne	1401c <__assert_fail@plt+0x2d44>
   13208:	ldr	r2, [sp, #72]	; 0x48
   1320c:	clz	r3, fp
   13210:	cmp	r2, #0
   13214:	lsr	r3, r3, #5
   13218:	moveq	r3, #0
   1321c:	cmp	r3, #0
   13220:	beq	13fbc <__assert_fail@plt+0x2ce4>
   13224:	str	r3, [sp, #68]	; 0x44
   13228:	ldr	fp, [sp, #72]	; 0x48
   1322c:	b	12bdc <__assert_fail@plt+0x1904>
   13230:	ldr	r3, [sp, #152]	; 0x98
   13234:	cmp	r3, #2
   13238:	beq	1388c <__assert_fail@plt+0x25b4>
   1323c:	ldr	r3, [sp, #44]	; 0x2c
   13240:	ldr	r2, [sp, #28]
   13244:	and	r2, r3, r2
   13248:	ands	r2, r9, r2
   1324c:	bne	13898 <__assert_fail@plt+0x25c0>
   13250:	mov	r4, #92	; 0x5c
   13254:	mov	r3, r4
   13258:	ldr	r1, [sp, #44]	; 0x2c
   1325c:	cmp	r1, #0
   13260:	moveq	r5, #0
   13264:	moveq	r8, r1
   13268:	beq	13104 <__assert_fail@plt+0x1e2c>
   1326c:	mov	r4, r3
   13270:	mov	r5, #0
   13274:	ldr	r3, [sp, #28]
   13278:	cmp	r3, #0
   1327c:	bne	13880 <__assert_fail@plt+0x25a8>
   13280:	ldr	r3, [sp, #40]	; 0x28
   13284:	eor	r9, r3, #1
   13288:	and	r9, r9, r2
   1328c:	ands	r9, r9, #255	; 0xff
   13290:	beq	132d4 <__assert_fail@plt+0x1ffc>
   13294:	cmp	fp, r7
   13298:	movhi	r2, #39	; 0x27
   1329c:	ldrhi	r3, [sp, #32]
   132a0:	str	r9, [sp, #40]	; 0x28
   132a4:	strbhi	r2, [r3, r7]
   132a8:	add	r3, r7, #1
   132ac:	cmp	fp, r3
   132b0:	movhi	r1, #36	; 0x24
   132b4:	ldrhi	r2, [sp, #32]
   132b8:	strbhi	r1, [r2, r3]
   132bc:	add	r3, r7, #2
   132c0:	cmp	fp, r3
   132c4:	add	r7, r7, #3
   132c8:	ldrhi	r2, [sp, #32]
   132cc:	movhi	r1, #39	; 0x27
   132d0:	strbhi	r1, [r2, r3]
   132d4:	cmp	fp, r7
   132d8:	movhi	r2, #92	; 0x5c
   132dc:	ldrhi	r3, [sp, #32]
   132e0:	add	sl, sl, #1
   132e4:	strbhi	r2, [r3, r7]
   132e8:	add	r7, r7, #1
   132ec:	b	13174 <__assert_fail@plt+0x1e9c>
   132f0:	ldr	r3, [sp, #152]	; 0x98
   132f4:	mov	r4, #11
   132f8:	sub	r2, r3, #2
   132fc:	mov	r3, #118	; 0x76
   13300:	clz	r2, r2
   13304:	lsr	r2, r2, #5
   13308:	b	13258 <__assert_fail@plt+0x1f80>
   1330c:	mov	r4, #10
   13310:	mov	r3, #110	; 0x6e
   13314:	ldr	r2, [sp, #152]	; 0x98
   13318:	ldr	r1, [sp, #28]
   1331c:	sub	r2, r2, #2
   13320:	clz	r2, r2
   13324:	lsr	r2, r2, #5
   13328:	ands	r1, r1, r2
   1332c:	beq	13258 <__assert_fail@plt+0x1f80>
   13330:	ldr	sl, [sp, #32]
   13334:	mov	r8, fp
   13338:	mov	r2, r1
   1333c:	mov	r3, #2
   13340:	str	r3, [sp, #152]	; 0x98
   13344:	ldr	r9, [sp, #44]	; 0x2c
   13348:	ldr	r3, [sp, #152]	; 0x98
   1334c:	and	r9, r9, r2
   13350:	tst	r9, #255	; 0xff
   13354:	movne	r3, #4
   13358:	str	r3, [sp, #152]	; 0x98
   1335c:	ldr	r3, [sp, #156]	; 0x9c
   13360:	mov	ip, #0
   13364:	bic	r3, r3, #2
   13368:	str	r3, [sp, #4]
   1336c:	ldr	r3, [sp, #168]	; 0xa8
   13370:	ldr	r2, [sp, #56]	; 0x38
   13374:	str	r3, [sp, #16]
   13378:	ldr	r3, [sp, #164]	; 0xa4
   1337c:	mov	r1, r8
   13380:	str	r3, [sp, #12]
   13384:	ldr	r3, [sp, #152]	; 0x98
   13388:	mov	r0, sl
   1338c:	str	r3, [sp]
   13390:	str	ip, [sp, #8]
   13394:	ldr	r3, [sp, #24]
   13398:	bl	12b80 <__assert_fail@plt+0x18a8>
   1339c:	mov	fp, r0
   133a0:	mov	r0, fp
   133a4:	add	sp, sp, #116	; 0x74
   133a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ac:	ldr	r3, [sp, #152]	; 0x98
   133b0:	mov	r4, #8
   133b4:	sub	r2, r3, #2
   133b8:	mov	r3, #98	; 0x62
   133bc:	clz	r2, r2
   133c0:	lsr	r2, r2, #5
   133c4:	b	13258 <__assert_fail@plt+0x1f80>
   133c8:	ldr	r3, [sp, #152]	; 0x98
   133cc:	mov	r4, #7
   133d0:	sub	r2, r3, #2
   133d4:	mov	r3, #97	; 0x61
   133d8:	clz	r2, r2
   133dc:	lsr	r2, r2, #5
   133e0:	b	13258 <__assert_fail@plt+0x1f80>
   133e4:	ldr	r3, [sp, #44]	; 0x2c
   133e8:	cmp	r3, #0
   133ec:	beq	13bd0 <__assert_fail@plt+0x28f8>
   133f0:	ldr	r3, [sp, #28]
   133f4:	cmp	r3, #0
   133f8:	bne	13ea8 <__assert_fail@plt+0x2bd0>
   133fc:	ldr	r3, [sp, #152]	; 0x98
   13400:	sub	r2, r3, #2
   13404:	ldr	r3, [sp, #40]	; 0x28
   13408:	clz	r2, r2
   1340c:	eor	r3, r3, #1
   13410:	lsr	r2, r2, #5
   13414:	ands	r3, r2, r3
   13418:	moveq	r1, r7
   1341c:	beq	13460 <__assert_fail@plt+0x2188>
   13420:	cmp	fp, r7
   13424:	movhi	r0, #39	; 0x27
   13428:	ldrhi	r1, [sp, #32]
   1342c:	str	r3, [sp, #40]	; 0x28
   13430:	strbhi	r0, [r1, r7]
   13434:	add	r1, r7, #1
   13438:	cmp	fp, r1
   1343c:	movhi	ip, #36	; 0x24
   13440:	ldrhi	r0, [sp, #32]
   13444:	strbhi	ip, [r0, r1]
   13448:	add	r1, r7, #2
   1344c:	cmp	fp, r1
   13450:	movhi	ip, #39	; 0x27
   13454:	ldrhi	r0, [sp, #32]
   13458:	strbhi	ip, [r0, r1]
   1345c:	add	r1, r7, #3
   13460:	cmp	fp, r1
   13464:	movhi	r0, #92	; 0x5c
   13468:	ldrhi	r3, [sp, #32]
   1346c:	add	r7, r1, #1
   13470:	strbhi	r0, [r3, r1]
   13474:	cmp	r8, #0
   13478:	beq	13dbc <__assert_fail@plt+0x2ae4>
   1347c:	ldr	r0, [sp, #24]
   13480:	add	r3, sl, #1
   13484:	cmp	r3, r0
   13488:	bcs	13cf8 <__assert_fail@plt+0x2a20>
   1348c:	ldr	r0, [sp, #56]	; 0x38
   13490:	ldrb	r3, [r0, r3]
   13494:	sub	r3, r3, #48	; 0x30
   13498:	cmp	r3, #9
   1349c:	bhi	13cf8 <__assert_fail@plt+0x2a20>
   134a0:	cmp	fp, r7
   134a4:	movhi	r3, #48	; 0x30
   134a8:	ldrhi	r0, [sp, #32]
   134ac:	ldr	r5, [sp, #28]
   134b0:	mov	r4, #48	; 0x30
   134b4:	strbhi	r3, [r0, r7]
   134b8:	add	r3, r1, #2
   134bc:	cmp	fp, r3
   134c0:	movhi	r0, #48	; 0x30
   134c4:	ldrhi	ip, [sp, #32]
   134c8:	add	r7, r1, #3
   134cc:	strbhi	r0, [ip, r3]
   134d0:	b	13104 <__assert_fail@plt+0x1e2c>
   134d4:	mov	r5, #0
   134d8:	ldr	r3, [sp, #152]	; 0x98
   134dc:	sub	r2, r3, #2
   134e0:	ldr	r3, [sp, #28]
   134e4:	clz	r2, r2
   134e8:	lsr	r2, r2, #5
   134ec:	ands	r8, r3, r2
   134f0:	beq	13104 <__assert_fail@plt+0x1e2c>
   134f4:	mov	r3, r8
   134f8:	mov	r2, r3
   134fc:	mov	r3, #2
   13500:	ldr	sl, [sp, #32]
   13504:	mov	r8, fp
   13508:	str	r3, [sp, #152]	; 0x98
   1350c:	b	13344 <__assert_fail@plt+0x206c>
   13510:	ldr	r3, [sp, #152]	; 0x98
   13514:	cmp	r3, #2
   13518:	beq	13c3c <__assert_fail@plt+0x2964>
   1351c:	cmp	r3, #5
   13520:	beq	13bfc <__assert_fail@plt+0x2924>
   13524:	mov	r5, #0
   13528:	sub	r2, r3, #2
   1352c:	mov	r8, r5
   13530:	clz	r2, r2
   13534:	mov	r4, #63	; 0x3f
   13538:	lsr	r2, r2, #5
   1353c:	b	13104 <__assert_fail@plt+0x1e2c>
   13540:	ldr	r3, [sp, #152]	; 0x98
   13544:	cmp	r3, #2
   13548:	beq	13c5c <__assert_fail@plt+0x2984>
   1354c:	mov	r2, #0
   13550:	str	r5, [sp, #68]	; 0x44
   13554:	mov	r8, r2
   13558:	mov	r4, #39	; 0x27
   1355c:	b	13104 <__assert_fail@plt+0x1e2c>
   13560:	mov	r4, #13
   13564:	mov	r3, #114	; 0x72
   13568:	b	13314 <__assert_fail@plt+0x203c>
   1356c:	ldr	r3, [sp, #152]	; 0x98
   13570:	mov	r8, #0
   13574:	sub	r2, r3, #2
   13578:	clz	r2, r2
   1357c:	lsr	r2, r2, #5
   13580:	b	13104 <__assert_fail@plt+0x1e2c>
   13584:	ldr	r3, [sp, #152]	; 0x98
   13588:	mov	r4, #12
   1358c:	sub	r2, r3, #2
   13590:	mov	r3, #102	; 0x66
   13594:	clz	r2, r2
   13598:	lsr	r2, r2, #5
   1359c:	b	13258 <__assert_fail@plt+0x1f80>
   135a0:	mov	r5, r6
   135a4:	b	134d8 <__assert_fail@plt+0x2200>
   135a8:	ldr	r3, [sp, #152]	; 0x98
   135ac:	sub	r2, r3, #2
   135b0:	mov	r3, #116	; 0x74
   135b4:	clz	r2, r2
   135b8:	lsr	r2, r2, #5
   135bc:	b	13258 <__assert_fail@plt+0x1f80>
   135c0:	ldr	r8, [sp, #76]	; 0x4c
   135c4:	cmp	r8, #1
   135c8:	bne	13a78 <__assert_fail@plt+0x27a0>
   135cc:	bl	111a0 <__ctype_b_loc@plt>
   135d0:	sxth	r3, r4
   135d4:	mov	ip, r8
   135d8:	lsl	r3, r3, #1
   135dc:	ldr	r2, [r0]
   135e0:	ldrh	r3, [r2, r3]
   135e4:	and	r3, r3, #16384	; 0x4000
   135e8:	cmp	r3, #0
   135ec:	movne	r5, #1
   135f0:	moveq	r5, #0
   135f4:	moveq	r3, #1
   135f8:	movne	r3, #0
   135fc:	ldr	r2, [sp, #44]	; 0x2c
   13600:	and	r3, r3, r2
   13604:	ands	r8, r3, #255	; 0xff
   13608:	bne	1390c <__assert_fail@plt+0x2634>
   1360c:	ldr	r3, [sp, #152]	; 0x98
   13610:	sub	r2, r3, #2
   13614:	clz	r2, r2
   13618:	lsr	r2, r2, #5
   1361c:	b	13104 <__assert_fail@plt+0x1e2c>
   13620:	ldr	r3, [sp, #56]	; 0x38
   13624:	add	r3, r3, sl
   13628:	str	r3, [sp, #48]	; 0x30
   1362c:	ldr	r3, [sp, #48]	; 0x30
   13630:	mov	r6, #0
   13634:	ldrb	r4, [r3]
   13638:	cmp	r4, #126	; 0x7e
   1363c:	ldrls	pc, [pc, r4, lsl #2]
   13640:	b	135c0 <__assert_fail@plt+0x22e8>
   13644:	andeq	r3, r1, r4, ror #7
   13648:	andeq	r3, r1, r0, asr #11
   1364c:	andeq	r3, r1, r0, asr #11
   13650:	andeq	r3, r1, r0, asr #11
   13654:	andeq	r3, r1, r0, asr #11
   13658:	andeq	r3, r1, r0, asr #11
   1365c:	andeq	r3, r1, r0, asr #11
   13660:	andeq	r3, r1, r8, asr #7
   13664:	andeq	r3, r1, ip, lsr #7
   13668:	andeq	r3, r1, r0, asr #16
   1366c:	andeq	r3, r1, ip, lsl #6
   13670:	strdeq	r3, [r1], -r0
   13674:	andeq	r3, r1, r4, lsl #11
   13678:	andeq	r3, r1, r0, ror #10
   1367c:	andeq	r3, r1, r0, asr #11
   13680:	andeq	r3, r1, r0, asr #11
   13684:	andeq	r3, r1, r0, asr #11
   13688:	andeq	r3, r1, r0, asr #11
   1368c:	andeq	r3, r1, r0, asr #11
   13690:	andeq	r3, r1, r0, asr #11
   13694:	andeq	r3, r1, r0, asr #11
   13698:	andeq	r3, r1, r0, asr #11
   1369c:	andeq	r3, r1, r0, asr #11
   136a0:	andeq	r3, r1, r0, asr #11
   136a4:	andeq	r3, r1, r0, asr #11
   136a8:	andeq	r3, r1, r0, asr #11
   136ac:	andeq	r3, r1, r0, asr #11
   136b0:	andeq	r3, r1, r0, asr #11
   136b4:	andeq	r3, r1, r0, asr #11
   136b8:	andeq	r3, r1, r0, asr #11
   136bc:	andeq	r3, r1, r0, asr #11
   136c0:	andeq	r3, r1, r0, asr #11
   136c4:	ldrdeq	r3, [r1], -r8
   136c8:	ldrdeq	r3, [r1], -r4
   136cc:	ldrdeq	r3, [r1], -r4
   136d0:	andeq	r3, r1, r4, ror #1
   136d4:	ldrdeq	r3, [r1], -r4
   136d8:	andeq	r3, r1, ip, ror #10
   136dc:	ldrdeq	r3, [r1], -r4
   136e0:	andeq	r3, r1, r0, asr #10
   136e4:	ldrdeq	r3, [r1], -r4
   136e8:	ldrdeq	r3, [r1], -r4
   136ec:	ldrdeq	r3, [r1], -r4
   136f0:	andeq	r3, r1, ip, ror #10
   136f4:	andeq	r3, r1, ip, ror #10
   136f8:	andeq	r3, r1, ip, ror #10
   136fc:	andeq	r3, r1, ip, ror #10
   13700:	andeq	r3, r1, ip, ror #10
   13704:	andeq	r3, r1, ip, ror #10
   13708:	andeq	r3, r1, ip, ror #10
   1370c:	andeq	r3, r1, ip, ror #10
   13710:	andeq	r3, r1, ip, ror #10
   13714:	andeq	r3, r1, ip, ror #10
   13718:	andeq	r3, r1, ip, ror #10
   1371c:	andeq	r3, r1, ip, ror #10
   13720:	andeq	r3, r1, ip, ror #10
   13724:	andeq	r3, r1, ip, ror #10
   13728:	andeq	r3, r1, ip, ror #10
   1372c:	andeq	r3, r1, ip, ror #10
   13730:	ldrdeq	r3, [r1], -r4
   13734:	ldrdeq	r3, [r1], -r4
   13738:	ldrdeq	r3, [r1], -r4
   1373c:	ldrdeq	r3, [r1], -r4
   13740:	andeq	r3, r1, r0, lsl r5
   13744:	andeq	r3, r1, r0, asr #11
   13748:	andeq	r3, r1, ip, ror #10
   1374c:	andeq	r3, r1, ip, ror #10
   13750:	andeq	r3, r1, ip, ror #10
   13754:	andeq	r3, r1, ip, ror #10
   13758:	andeq	r3, r1, ip, ror #10
   1375c:	andeq	r3, r1, ip, ror #10
   13760:	andeq	r3, r1, ip, ror #10
   13764:	andeq	r3, r1, ip, ror #10
   13768:	andeq	r3, r1, ip, ror #10
   1376c:	andeq	r3, r1, ip, ror #10
   13770:	andeq	r3, r1, ip, ror #10
   13774:	andeq	r3, r1, ip, ror #10
   13778:	andeq	r3, r1, ip, ror #10
   1377c:	andeq	r3, r1, ip, ror #10
   13780:	andeq	r3, r1, ip, ror #10
   13784:	andeq	r3, r1, ip, ror #10
   13788:	andeq	r3, r1, ip, ror #10
   1378c:	andeq	r3, r1, ip, ror #10
   13790:	andeq	r3, r1, ip, ror #10
   13794:	andeq	r3, r1, ip, ror #10
   13798:	andeq	r3, r1, ip, ror #10
   1379c:	andeq	r3, r1, ip, ror #10
   137a0:	andeq	r3, r1, ip, ror #10
   137a4:	andeq	r3, r1, ip, ror #10
   137a8:	andeq	r3, r1, ip, ror #10
   137ac:	andeq	r3, r1, ip, ror #10
   137b0:	ldrdeq	r3, [r1], -r4
   137b4:	andeq	r3, r1, r0, lsr r2
   137b8:	andeq	r3, r1, ip, ror #10
   137bc:	ldrdeq	r3, [r1], -r4
   137c0:	andeq	r3, r1, ip, ror #10
   137c4:	ldrdeq	r3, [r1], -r4
   137c8:	andeq	r3, r1, ip, ror #10
   137cc:	andeq	r3, r1, ip, ror #10
   137d0:	andeq	r3, r1, ip, ror #10
   137d4:	andeq	r3, r1, ip, ror #10
   137d8:	andeq	r3, r1, ip, ror #10
   137dc:	andeq	r3, r1, ip, ror #10
   137e0:	andeq	r3, r1, ip, ror #10
   137e4:	andeq	r3, r1, ip, ror #10
   137e8:	andeq	r3, r1, ip, ror #10
   137ec:	andeq	r3, r1, ip, ror #10
   137f0:	andeq	r3, r1, ip, ror #10
   137f4:	andeq	r3, r1, ip, ror #10
   137f8:	andeq	r3, r1, ip, ror #10
   137fc:	andeq	r3, r1, ip, ror #10
   13800:	andeq	r3, r1, ip, ror #10
   13804:	andeq	r3, r1, ip, ror #10
   13808:	andeq	r3, r1, ip, ror #10
   1380c:	andeq	r3, r1, ip, ror #10
   13810:	andeq	r3, r1, ip, ror #10
   13814:	andeq	r3, r1, ip, ror #10
   13818:	andeq	r3, r1, ip, ror #10
   1381c:	andeq	r3, r1, ip, ror #10
   13820:	andeq	r3, r1, ip, ror #10
   13824:	andeq	r3, r1, ip, ror #10
   13828:	andeq	r3, r1, ip, ror #10
   1382c:	andeq	r3, r1, ip, ror #10
   13830:	andeq	r3, r1, r4, asr #1
   13834:	ldrdeq	r3, [r1], -r4
   13838:	andeq	r3, r1, r4, asr #1
   1383c:	andeq	r3, r1, r4, ror #1
   13840:	mov	r3, #116	; 0x74
   13844:	b	13314 <__assert_fail@plt+0x203c>
   13848:	ldr	r3, [sp, #160]	; 0xa0
   1384c:	cmp	r3, #0
   13850:	beq	13120 <__assert_fail@plt+0x1e48>
   13854:	lsr	r3, r4, #5
   13858:	ldr	r0, [sp, #160]	; 0xa0
   1385c:	uxtb	r3, r3
   13860:	and	r1, r4, #31
   13864:	ldr	r0, [r0, r3, lsl #2]
   13868:	lsr	r3, r0, r1
   1386c:	tst	r3, #1
   13870:	beq	13120 <__assert_fail@plt+0x1e48>
   13874:	ldr	r3, [sp, #28]
   13878:	cmp	r3, #0
   1387c:	beq	13280 <__assert_fail@plt+0x1fa8>
   13880:	ldr	sl, [sp, #32]
   13884:	mov	r8, fp
   13888:	b	13344 <__assert_fail@plt+0x206c>
   1388c:	ldr	r3, [sp, #28]
   13890:	cmp	r3, #0
   13894:	bne	13de8 <__assert_fail@plt+0x2b10>
   13898:	add	sl, sl, #1
   1389c:	ldr	r6, [sp, #40]	; 0x28
   138a0:	mov	r5, #0
   138a4:	mov	r4, #92	; 0x5c
   138a8:	b	1313c <__assert_fail@plt+0x1e64>
   138ac:	cmp	r9, r8
   138b0:	bne	13b20 <__assert_fail@plt+0x2848>
   138b4:	ldr	r0, [sp, #100]	; 0x64
   138b8:	bl	110ec <iswprint@plt>
   138bc:	add	r5, r5, r4
   138c0:	cmp	r0, #0
   138c4:	add	r0, sp, #104	; 0x68
   138c8:	moveq	r6, #0
   138cc:	bl	1108c <mbsinit@plt>
   138d0:	cmp	r0, #0
   138d4:	beq	13ab4 <__assert_fail@plt+0x27dc>
   138d8:	mov	r2, r6
   138dc:	mov	ip, r5
   138e0:	eor	r5, r2, #1
   138e4:	ldr	r4, [sp, #80]	; 0x50
   138e8:	ldr	r6, [sp, #84]	; 0x54
   138ec:	ldr	r7, [sp, #88]	; 0x58
   138f0:	uxtb	r5, r5
   138f4:	cmp	ip, #1
   138f8:	bls	13df8 <__assert_fail@plt+0x2b20>
   138fc:	ldr	r3, [sp, #44]	; 0x2c
   13900:	and	r8, r3, r5
   13904:	mov	r5, r2
   13908:	uxtb	r8, r8
   1390c:	add	r2, sl, ip
   13910:	ldr	r0, [sp, #48]	; 0x30
   13914:	mov	r1, #0
   13918:	str	r5, [sp, #48]	; 0x30
   1391c:	ldr	r9, [sp, #28]
   13920:	ldr	ip, [sp, #40]	; 0x28
   13924:	ldr	r3, [sp, #32]
   13928:	ldr	r5, [sp, #152]	; 0x98
   1392c:	b	139e8 <__assert_fail@plt+0x2710>
   13930:	cmp	r9, #0
   13934:	bne	13d0c <__assert_fail@plt+0x2a34>
   13938:	eor	r1, ip, #1
   1393c:	cmp	r5, #2
   13940:	movne	r1, #0
   13944:	andeq	r1, r1, #1
   13948:	cmp	r1, #0
   1394c:	beq	13984 <__assert_fail@plt+0x26ac>
   13950:	cmp	fp, r7
   13954:	movhi	ip, #39	; 0x27
   13958:	strbhi	ip, [r3, r7]
   1395c:	add	ip, r7, #1
   13960:	cmp	fp, ip
   13964:	movhi	lr, #36	; 0x24
   13968:	strbhi	lr, [r3, ip]
   1396c:	add	ip, r7, #2
   13970:	cmp	fp, ip
   13974:	movhi	lr, #39	; 0x27
   13978:	strbhi	lr, [r3, ip]
   1397c:	add	r7, r7, #3
   13980:	mov	ip, r1
   13984:	cmp	fp, r7
   13988:	movhi	r1, #92	; 0x5c
   1398c:	strbhi	r1, [r3, r7]
   13990:	add	r1, r7, #1
   13994:	cmp	fp, r1
   13998:	lsrhi	lr, r4, #6
   1399c:	addhi	lr, lr, #48	; 0x30
   139a0:	strbhi	lr, [r3, r1]
   139a4:	add	lr, r7, #2
   139a8:	cmp	fp, lr
   139ac:	lsrhi	r1, r4, #3
   139b0:	andhi	r1, r1, #7
   139b4:	addhi	r1, r1, #48	; 0x30
   139b8:	add	sl, sl, #1
   139bc:	strbhi	r1, [r3, lr]
   139c0:	and	r4, r4, #7
   139c4:	cmp	r2, sl
   139c8:	add	r4, r4, #48	; 0x30
   139cc:	add	r7, r7, #3
   139d0:	bls	13d30 <__assert_fail@plt+0x2a58>
   139d4:	mov	r1, r8
   139d8:	cmp	fp, r7
   139dc:	strbhi	r4, [r3, r7]
   139e0:	ldrb	r4, [r0, #1]!
   139e4:	add	r7, r7, #1
   139e8:	cmp	r8, #0
   139ec:	bne	13930 <__assert_fail@plt+0x2658>
   139f0:	cmp	r6, #0
   139f4:	bne	13a44 <__assert_fail@plt+0x276c>
   139f8:	eor	r6, r1, #1
   139fc:	and	r6, r6, ip
   13a00:	add	sl, sl, #1
   13a04:	cmp	r2, sl
   13a08:	uxtb	r6, r6
   13a0c:	bls	13a6c <__assert_fail@plt+0x2794>
   13a10:	cmp	r6, #0
   13a14:	beq	139d8 <__assert_fail@plt+0x2700>
   13a18:	cmp	fp, r7
   13a1c:	movhi	ip, #39	; 0x27
   13a20:	strbhi	ip, [r3, r7]
   13a24:	add	ip, r7, #1
   13a28:	cmp	fp, ip
   13a2c:	movhi	lr, #39	; 0x27
   13a30:	strbhi	lr, [r3, ip]
   13a34:	add	r7, r7, #2
   13a38:	mov	r6, r8
   13a3c:	mov	ip, r8
   13a40:	b	139d8 <__assert_fail@plt+0x2700>
   13a44:	cmp	fp, r7
   13a48:	eor	r6, r1, #1
   13a4c:	movhi	lr, #92	; 0x5c
   13a50:	and	r6, r6, ip
   13a54:	add	sl, sl, #1
   13a58:	strbhi	lr, [r3, r7]
   13a5c:	cmp	r2, sl
   13a60:	add	r7, r7, #1
   13a64:	uxtb	r6, r6
   13a68:	bhi	13a10 <__assert_fail@plt+0x2738>
   13a6c:	str	ip, [sp, #40]	; 0x28
   13a70:	ldr	r5, [sp, #48]	; 0x30
   13a74:	b	1313c <__assert_fail@plt+0x1e64>
   13a78:	ldr	r3, [sp, #24]
   13a7c:	cmn	r3, #1
   13a80:	mov	r3, #0
   13a84:	str	r3, [sp, #104]	; 0x68
   13a88:	str	r3, [sp, #108]	; 0x6c
   13a8c:	beq	13dac <__assert_fail@plt+0x2ad4>
   13a90:	mov	r2, r5
   13a94:	mov	r3, #0
   13a98:	str	r7, [sp, #88]	; 0x58
   13a9c:	ldr	r7, [sp, #152]	; 0x98
   13aa0:	str	r5, [sp, #92]	; 0x5c
   13aa4:	str	r6, [sp, #84]	; 0x54
   13aa8:	mov	r5, r3
   13aac:	mov	r6, r2
   13ab0:	str	r4, [sp, #80]	; 0x50
   13ab4:	ldr	r3, [sp, #56]	; 0x38
   13ab8:	add	r9, sl, r5
   13abc:	add	r8, r3, r9
   13ac0:	ldr	r3, [sp, #24]
   13ac4:	mov	r1, r8
   13ac8:	sub	r2, r3, r9
   13acc:	add	r0, sp, #100	; 0x64
   13ad0:	add	r3, sp, #104	; 0x68
   13ad4:	bl	23224 <__assert_fail@plt+0x11f4c>
   13ad8:	subs	r4, r0, #0
   13adc:	beq	13e84 <__assert_fail@plt+0x2bac>
   13ae0:	cmn	r4, #1
   13ae4:	beq	13e64 <__assert_fail@plt+0x2b8c>
   13ae8:	cmn	r4, #2
   13aec:	beq	13e04 <__assert_fail@plt+0x2b2c>
   13af0:	ldr	r2, [sp, #28]
   13af4:	cmp	r7, #2
   13af8:	movne	r2, #0
   13afc:	andeq	r2, r2, #1
   13b00:	cmp	r2, #0
   13b04:	beq	138b4 <__assert_fail@plt+0x25dc>
   13b08:	cmp	r4, #1
   13b0c:	beq	138b4 <__assert_fail@plt+0x25dc>
   13b10:	sub	r3, r4, #1
   13b14:	add	r9, r3, r9
   13b18:	ldr	r3, [sp, #56]	; 0x38
   13b1c:	add	r9, r3, r9
   13b20:	ldrb	r3, [r8, #1]!
   13b24:	sub	r3, r3, #91	; 0x5b
   13b28:	cmp	r3, #33	; 0x21
   13b2c:	ldrls	pc, [pc, r3, lsl #2]
   13b30:	b	138ac <__assert_fail@plt+0x25d4>
   13b34:			; <UNDEFINED> instruction: 0x00013bbc
   13b38:			; <UNDEFINED> instruction: 0x00013bbc
   13b3c:	andeq	r3, r1, ip, lsr #17
   13b40:			; <UNDEFINED> instruction: 0x00013bbc
   13b44:	andeq	r3, r1, ip, lsr #17
   13b48:			; <UNDEFINED> instruction: 0x00013bbc
   13b4c:	andeq	r3, r1, ip, lsr #17
   13b50:	andeq	r3, r1, ip, lsr #17
   13b54:	andeq	r3, r1, ip, lsr #17
   13b58:	andeq	r3, r1, ip, lsr #17
   13b5c:	andeq	r3, r1, ip, lsr #17
   13b60:	andeq	r3, r1, ip, lsr #17
   13b64:	andeq	r3, r1, ip, lsr #17
   13b68:	andeq	r3, r1, ip, lsr #17
   13b6c:	andeq	r3, r1, ip, lsr #17
   13b70:	andeq	r3, r1, ip, lsr #17
   13b74:	andeq	r3, r1, ip, lsr #17
   13b78:	andeq	r3, r1, ip, lsr #17
   13b7c:	andeq	r3, r1, ip, lsr #17
   13b80:	andeq	r3, r1, ip, lsr #17
   13b84:	andeq	r3, r1, ip, lsr #17
   13b88:	andeq	r3, r1, ip, lsr #17
   13b8c:	andeq	r3, r1, ip, lsr #17
   13b90:	andeq	r3, r1, ip, lsr #17
   13b94:	andeq	r3, r1, ip, lsr #17
   13b98:	andeq	r3, r1, ip, lsr #17
   13b9c:	andeq	r3, r1, ip, lsr #17
   13ba0:	andeq	r3, r1, ip, lsr #17
   13ba4:	andeq	r3, r1, ip, lsr #17
   13ba8:	andeq	r3, r1, ip, lsr #17
   13bac:	andeq	r3, r1, ip, lsr #17
   13bb0:	andeq	r3, r1, ip, lsr #17
   13bb4:	andeq	r3, r1, ip, lsr #17
   13bb8:			; <UNDEFINED> instruction: 0x00013bbc
   13bbc:	mov	r3, #2
   13bc0:	ldr	sl, [sp, #32]
   13bc4:	mov	r8, fp
   13bc8:	str	r3, [sp, #152]	; 0x98
   13bcc:	b	13344 <__assert_fail@plt+0x206c>
   13bd0:	ldr	r3, [sp, #156]	; 0x9c
   13bd4:	tst	r3, #1
   13bd8:	bne	13d04 <__assert_fail@plt+0x2a2c>
   13bdc:	ldr	r3, [sp, #152]	; 0x98
   13be0:	ldr	r4, [sp, #44]	; 0x2c
   13be4:	sub	r2, r3, #2
   13be8:	mov	r5, #0
   13bec:	clz	r2, r2
   13bf0:	mov	r8, r4
   13bf4:	lsr	r2, r2, #5
   13bf8:	b	13104 <__assert_fail@plt+0x1e2c>
   13bfc:	ldr	r3, [sp, #156]	; 0x9c
   13c00:	ands	r9, r3, #4
   13c04:	beq	13d3c <__assert_fail@plt+0x2a64>
   13c08:	ldr	r2, [sp, #24]
   13c0c:	add	r3, sl, #2
   13c10:	cmp	r3, r2
   13c14:	bcs	13c28 <__assert_fail@plt+0x2950>
   13c18:	ldr	r2, [sp, #48]	; 0x30
   13c1c:	ldrb	r4, [r2, #1]
   13c20:	cmp	r4, #63	; 0x3f
   13c24:	beq	13ec4 <__assert_fail@plt+0x2bec>
   13c28:	mov	r2, #0
   13c2c:	mov	r8, r2
   13c30:	mov	r5, r2
   13c34:	mov	r4, #63	; 0x3f
   13c38:	b	13104 <__assert_fail@plt+0x1e2c>
   13c3c:	ldr	r3, [sp, #28]
   13c40:	cmp	r3, #0
   13c44:	bne	13f68 <__assert_fail@plt+0x2c90>
   13c48:	mov	r2, r5
   13c4c:	mov	r8, r3
   13c50:	mov	r5, #0
   13c54:	mov	r4, #63	; 0x3f
   13c58:	b	13104 <__assert_fail@plt+0x1e2c>
   13c5c:	ldr	r3, [sp, #28]
   13c60:	cmp	r3, #0
   13c64:	bne	13f68 <__assert_fail@plt+0x2c90>
   13c68:	ldr	r2, [sp, #72]	; 0x48
   13c6c:	adds	r3, fp, #0
   13c70:	movne	r3, #1
   13c74:	cmp	r2, #0
   13c78:	movne	r3, #0
   13c7c:	cmp	r3, #0
   13c80:	strne	fp, [sp, #72]	; 0x48
   13c84:	movne	fp, #0
   13c88:	bne	13cc4 <__assert_fail@plt+0x29ec>
   13c8c:	cmp	fp, r7
   13c90:	movhi	r2, #39	; 0x27
   13c94:	ldrhi	r3, [sp, #32]
   13c98:	strbhi	r2, [r3, r7]
   13c9c:	add	r3, r7, #1
   13ca0:	cmp	fp, r3
   13ca4:	movhi	r1, #92	; 0x5c
   13ca8:	ldrhi	r2, [sp, #32]
   13cac:	strbhi	r1, [r2, r3]
   13cb0:	add	r3, r7, #2
   13cb4:	cmp	fp, r3
   13cb8:	movhi	r1, #39	; 0x27
   13cbc:	ldrhi	r2, [sp, #32]
   13cc0:	strbhi	r1, [r2, r3]
   13cc4:	ldr	r3, [sp, #28]
   13cc8:	add	r7, r7, #3
   13ccc:	mov	r2, r5
   13cd0:	mov	r8, r3
   13cd4:	str	r5, [sp, #68]	; 0x44
   13cd8:	str	r3, [sp, #40]	; 0x28
   13cdc:	mov	r4, #39	; 0x27
   13ce0:	b	13104 <__assert_fail@plt+0x1e2c>
   13ce4:	ldr	r3, [sp, #56]	; 0x38
   13ce8:	ldrb	r3, [r3, #1]
   13cec:	adds	r3, r3, #0
   13cf0:	movne	r3, #1
   13cf4:	b	130dc <__assert_fail@plt+0x1e04>
   13cf8:	ldr	r5, [sp, #28]
   13cfc:	mov	r4, #48	; 0x30
   13d00:	b	13104 <__assert_fail@plt+0x1e2c>
   13d04:	add	sl, sl, #1
   13d08:	b	12c34 <__assert_fail@plt+0x195c>
   13d0c:	mov	sl, r3
   13d10:	ldr	r3, [sp, #28]
   13d14:	mov	r8, fp
   13d18:	str	r3, [sp, #44]	; 0x2c
   13d1c:	ldr	r3, [sp, #152]	; 0x98
   13d20:	sub	r2, r3, #2
   13d24:	clz	r2, r2
   13d28:	lsr	r2, r2, #5
   13d2c:	b	13344 <__assert_fail@plt+0x206c>
   13d30:	str	ip, [sp, #40]	; 0x28
   13d34:	ldr	r5, [sp, #48]	; 0x30
   13d38:	b	13174 <__assert_fail@plt+0x1e9c>
   13d3c:	mov	r2, r9
   13d40:	mov	r8, r9
   13d44:	mov	r5, #0
   13d48:	mov	r4, #63	; 0x3f
   13d4c:	b	13104 <__assert_fail@plt+0x1e2c>
   13d50:	cmp	fp, #0
   13d54:	beq	13dcc <__assert_fail@plt+0x2af4>
   13d58:	ldr	r1, [sp, #32]
   13d5c:	mov	r3, #34	; 0x22
   13d60:	mov	r2, #1
   13d64:	strb	r3, [r1]
   13d68:	ldr	r3, [pc, #332]	; 13ebc <__assert_fail@plt+0x2be4>
   13d6c:	str	r2, [sp, #52]	; 0x34
   13d70:	mov	r7, r2
   13d74:	str	r2, [sp, #44]	; 0x2c
   13d78:	str	r3, [sp, #64]	; 0x40
   13d7c:	b	12c24 <__assert_fail@plt+0x194c>
   13d80:	ldr	r3, [pc, #300]	; 13eb4 <__assert_fail@plt+0x2bdc>
   13d84:	str	r3, [sp, #64]	; 0x40
   13d88:	mov	r3, #0
   13d8c:	str	r3, [sp, #28]
   13d90:	mov	r3, #1
   13d94:	str	r3, [sp, #52]	; 0x34
   13d98:	mov	r7, r3
   13d9c:	mov	r3, #2
   13da0:	str	r3, [sp, #152]	; 0x98
   13da4:	b	12c24 <__assert_fail@plt+0x194c>
   13da8:	bl	112cc <abort@plt>
   13dac:	ldr	r0, [sp, #56]	; 0x38
   13db0:	bl	111b8 <strlen@plt>
   13db4:	str	r0, [sp, #24]
   13db8:	b	13a90 <__assert_fail@plt+0x27b8>
   13dbc:	mov	r5, r8
   13dc0:	mov	r4, #48	; 0x30
   13dc4:	ldr	r8, [sp, #44]	; 0x2c
   13dc8:	b	13104 <__assert_fail@plt+0x1e2c>
   13dcc:	mov	r3, #1
   13dd0:	str	r3, [sp, #52]	; 0x34
   13dd4:	mov	r7, r3
   13dd8:	str	r3, [sp, #44]	; 0x2c
   13ddc:	ldr	r3, [pc, #216]	; 13ebc <__assert_fail@plt+0x2be4>
   13de0:	str	r3, [sp, #64]	; 0x40
   13de4:	b	12c24 <__assert_fail@plt+0x194c>
   13de8:	ldr	sl, [sp, #32]
   13dec:	mov	r8, fp
   13df0:	mov	r2, r3
   13df4:	b	13344 <__assert_fail@plt+0x206c>
   13df8:	mov	r3, r5
   13dfc:	mov	r5, r2
   13e00:	b	135fc <__assert_fail@plt+0x2324>
   13e04:	ldr	r1, [sp, #24]
   13e08:	mov	r2, r5
   13e0c:	cmp	r1, r9
   13e10:	mov	ip, r5
   13e14:	ldr	r4, [sp, #80]	; 0x50
   13e18:	ldr	r5, [sp, #92]	; 0x5c
   13e1c:	ldr	r6, [sp, #84]	; 0x54
   13e20:	ldr	r7, [sp, #88]	; 0x58
   13e24:	bls	13e58 <__assert_fail@plt+0x2b80>
   13e28:	ldrb	r3, [r8]
   13e2c:	cmp	r3, #0
   13e30:	bne	13e44 <__assert_fail@plt+0x2b6c>
   13e34:	b	13e5c <__assert_fail@plt+0x2b84>
   13e38:	ldrb	r3, [r8, #1]!
   13e3c:	cmp	r3, #0
   13e40:	beq	13f5c <__assert_fail@plt+0x2c84>
   13e44:	add	r2, r2, #1
   13e48:	add	r3, sl, r2
   13e4c:	cmp	r1, r3
   13e50:	bhi	13e38 <__assert_fail@plt+0x2b60>
   13e54:	mov	ip, r2
   13e58:	mov	r3, #0
   13e5c:	mov	r2, r3
   13e60:	b	138f4 <__assert_fail@plt+0x261c>
   13e64:	mov	r3, #0
   13e68:	mov	ip, r5
   13e6c:	ldr	r4, [sp, #80]	; 0x50
   13e70:	ldr	r5, [sp, #92]	; 0x5c
   13e74:	ldr	r6, [sp, #84]	; 0x54
   13e78:	ldr	r7, [sp, #88]	; 0x58
   13e7c:	mov	r2, r3
   13e80:	b	138f4 <__assert_fail@plt+0x261c>
   13e84:	mov	r3, r6
   13e88:	mov	ip, r5
   13e8c:	eor	r5, r3, #1
   13e90:	mov	r2, r6
   13e94:	ldr	r4, [sp, #80]	; 0x50
   13e98:	ldr	r6, [sp, #84]	; 0x54
   13e9c:	ldr	r7, [sp, #88]	; 0x58
   13ea0:	uxtb	r5, r5
   13ea4:	b	138f4 <__assert_fail@plt+0x261c>
   13ea8:	ldr	sl, [sp, #32]
   13eac:	mov	r8, fp
   13eb0:	b	13d18 <__assert_fail@plt+0x2a40>
   13eb4:	andeq	r4, r2, r4, asr #15
   13eb8:	andeq	r4, r2, r8, asr #15
   13ebc:	andeq	r4, r2, r0, asr #15
   13ec0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13ec4:	ldr	r2, [sp, #56]	; 0x38
   13ec8:	ldrb	r1, [r2, r3]
   13ecc:	sub	r2, r1, #33	; 0x21
   13ed0:	uxtb	r2, r2
   13ed4:	cmp	r2, #29
   13ed8:	bhi	13f78 <__assert_fail@plt+0x2ca0>
   13edc:	ldr	r0, [pc, #-36]	; 13ec0 <__assert_fail@plt+0x2be8>
   13ee0:	mov	ip, #1
   13ee4:	ands	r2, r0, ip, lsl r2
   13ee8:	beq	13f88 <__assert_fail@plt+0x2cb0>
   13eec:	ldr	r2, [sp, #28]
   13ef0:	cmp	r2, #0
   13ef4:	bne	14088 <__assert_fail@plt+0x2db0>
   13ef8:	cmp	fp, r7
   13efc:	ldr	r8, [sp, #28]
   13f00:	ldrhi	r2, [sp, #32]
   13f04:	mov	sl, r3
   13f08:	mov	r5, r8
   13f0c:	strbhi	r4, [r2, r7]
   13f10:	add	r2, r7, #1
   13f14:	cmp	fp, r2
   13f18:	movhi	r0, #34	; 0x22
   13f1c:	ldrhi	ip, [sp, #32]
   13f20:	mov	r4, r1
   13f24:	strbhi	r0, [ip, r2]
   13f28:	add	r2, r7, #2
   13f2c:	cmp	fp, r2
   13f30:	movhi	r0, #34	; 0x22
   13f34:	ldrhi	ip, [sp, #32]
   13f38:	strbhi	r0, [ip, r2]
   13f3c:	add	r2, r7, #3
   13f40:	cmp	fp, r2
   13f44:	movhi	r0, #63	; 0x3f
   13f48:	ldrhi	ip, [sp, #32]
   13f4c:	add	r7, r7, #4
   13f50:	strbhi	r0, [ip, r2]
   13f54:	mov	r2, r8
   13f58:	b	13104 <__assert_fail@plt+0x1e2c>
   13f5c:	mov	ip, r2
   13f60:	mov	r2, r3
   13f64:	b	138f4 <__assert_fail@plt+0x261c>
   13f68:	ldr	sl, [sp, #32]
   13f6c:	mov	r8, fp
   13f70:	ldr	r2, [sp, #28]
   13f74:	b	13344 <__assert_fail@plt+0x206c>
   13f78:	mov	r2, #0
   13f7c:	mov	r8, r2
   13f80:	mov	r5, r2
   13f84:	b	13104 <__assert_fail@plt+0x1e2c>
   13f88:	mov	r8, r2
   13f8c:	mov	r5, #0
   13f90:	b	13104 <__assert_fail@plt+0x1e2c>
   13f94:	ldr	r1, [sp, #152]	; 0x98
   13f98:	bl	12a60 <__assert_fail@plt+0x1788>
   13f9c:	str	r0, [sp, #168]	; 0xa8
   13fa0:	b	12fc0 <__assert_fail@plt+0x1ce8>
   13fa4:	ldr	r1, [sp, #152]	; 0x98
   13fa8:	bl	12a60 <__assert_fail@plt+0x1788>
   13fac:	str	r0, [sp, #164]	; 0xa4
   13fb0:	b	12fa0 <__assert_fail@plt+0x1cc8>
   13fb4:	ldr	r7, [sp, #28]
   13fb8:	b	13000 <__assert_fail@plt+0x1d28>
   13fbc:	ldr	sl, [sp, #32]
   13fc0:	ldr	r2, [sp, #68]	; 0x44
   13fc4:	mov	r8, fp
   13fc8:	mov	fp, r7
   13fcc:	ldr	r3, [sp, #64]	; 0x40
   13fd0:	cmp	r3, #0
   13fd4:	moveq	r2, #0
   13fd8:	andne	r2, r2, #1
   13fdc:	cmp	r2, #0
   13fe0:	beq	1400c <__assert_fail@plt+0x2d34>
   13fe4:	mov	r2, r3
   13fe8:	ldrb	r3, [r3]
   13fec:	cmp	r3, #0
   13ff0:	beq	1400c <__assert_fail@plt+0x2d34>
   13ff4:	cmp	r8, fp
   13ff8:	strbhi	r3, [sl, fp]
   13ffc:	ldrb	r3, [r2, #1]!
   14000:	add	fp, fp, #1
   14004:	cmp	r3, #0
   14008:	bne	13ff4 <__assert_fail@plt+0x2d1c>
   1400c:	cmp	r8, fp
   14010:	movhi	r3, #0
   14014:	strbhi	r3, [sl, fp]
   14018:	b	133a0 <__assert_fail@plt+0x20c8>
   1401c:	ldr	r3, [sp, #168]	; 0xa8
   14020:	ldr	sl, [sp, #32]
   14024:	str	r3, [sp, #16]
   14028:	ldr	r3, [sp, #164]	; 0xa4
   1402c:	mov	ip, #5
   14030:	str	r3, [sp, #12]
   14034:	ldr	r3, [sp, #160]	; 0xa0
   14038:	ldr	r2, [sp, #56]	; 0x38
   1403c:	str	r3, [sp, #8]
   14040:	ldr	r3, [sp, #156]	; 0x9c
   14044:	ldr	r1, [sp, #72]	; 0x48
   14048:	str	r3, [sp, #4]
   1404c:	mov	r0, sl
   14050:	ldr	r3, [sp, #24]
   14054:	str	ip, [sp]
   14058:	bl	12b80 <__assert_fail@plt+0x18a8>
   1405c:	mov	fp, r0
   14060:	b	133a0 <__assert_fail@plt+0x20c8>
   14064:	mov	r8, fp
   14068:	ldr	sl, [sp, #32]
   1406c:	mov	fp, r7
   14070:	mov	r2, r3
   14074:	b	13fcc <__assert_fail@plt+0x2cf4>
   14078:	mov	r8, fp
   1407c:	ldr	sl, [sp, #32]
   14080:	mov	fp, r7
   14084:	b	13fcc <__assert_fail@plt+0x2cf4>
   14088:	ldr	sl, [sp, #32]
   1408c:	mov	r8, fp
   14090:	b	1335c <__assert_fail@plt+0x2084>
   14094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14098:	sub	sp, sp, #52	; 0x34
   1409c:	mov	r4, r0
   140a0:	mov	r5, r3
   140a4:	mov	sl, r1
   140a8:	mov	fp, r2
   140ac:	bl	111d0 <__errno_location@plt>
   140b0:	ldr	r7, [pc, #412]	; 14254 <__assert_fail@plt+0x2f7c>
   140b4:	cmn	r4, #-2147483647	; 0x80000001
   140b8:	ldr	r6, [r7]
   140bc:	mov	r8, r0
   140c0:	movne	r0, #0
   140c4:	moveq	r0, #1
   140c8:	ldr	r3, [r8]
   140cc:	orrs	r0, r0, r4, lsr #31
   140d0:	str	r3, [sp, #24]
   140d4:	bne	14250 <__assert_fail@plt+0x2f78>
   140d8:	ldr	r2, [r7, #4]
   140dc:	cmp	r4, r2
   140e0:	blt	14140 <__assert_fail@plt+0x2e68>
   140e4:	add	r9, r7, #8
   140e8:	cmp	r6, r9
   140ec:	str	r2, [sp, #44]	; 0x2c
   140f0:	beq	14220 <__assert_fail@plt+0x2f48>
   140f4:	mov	r3, #8
   140f8:	sub	r2, r4, r2
   140fc:	mov	r0, r6
   14100:	str	r3, [sp]
   14104:	add	r2, r2, #1
   14108:	mvn	r3, #-2147483648	; 0x80000000
   1410c:	add	r1, sp, #44	; 0x2c
   14110:	bl	22400 <__assert_fail@plt+0x11128>
   14114:	mov	r6, r0
   14118:	str	r0, [r7]
   1411c:	ldr	r0, [r7, #4]
   14120:	ldr	r2, [sp, #44]	; 0x2c
   14124:	mov	r1, #0
   14128:	sub	r2, r2, r0
   1412c:	add	r0, r6, r0, lsl #3
   14130:	lsl	r2, r2, #3
   14134:	bl	111f4 <memset@plt>
   14138:	ldr	r3, [sp, #44]	; 0x2c
   1413c:	str	r3, [r7, #4]
   14140:	add	r3, r6, r4, lsl #3
   14144:	ldr	r1, [r5, #4]
   14148:	ldr	r7, [r3, #4]
   1414c:	ldr	r9, [r6, r4, lsl #3]
   14150:	ldr	r2, [r5, #40]	; 0x28
   14154:	ldr	ip, [r5, #44]	; 0x2c
   14158:	add	r0, r5, #8
   1415c:	str	r3, [sp, #28]
   14160:	ldr	r3, [r5]
   14164:	orr	r1, r1, #1
   14168:	mov	lr, r0
   1416c:	str	r1, [sp, #32]
   14170:	str	r0, [sp, #36]	; 0x24
   14174:	str	r1, [sp, #4]
   14178:	str	r2, [sp, #12]
   1417c:	str	r3, [sp]
   14180:	mov	r0, r7
   14184:	mov	r1, r9
   14188:	str	ip, [sp, #16]
   1418c:	str	lr, [sp, #8]
   14190:	mov	r3, fp
   14194:	mov	r2, sl
   14198:	bl	12b80 <__assert_fail@plt+0x18a8>
   1419c:	cmp	r9, r0
   141a0:	bhi	1420c <__assert_fail@plt+0x2f34>
   141a4:	ldr	r3, [pc, #172]	; 14258 <__assert_fail@plt+0x2f80>
   141a8:	add	r9, r0, #1
   141ac:	cmp	r7, r3
   141b0:	str	r9, [r6, r4, lsl #3]
   141b4:	beq	141c0 <__assert_fail@plt+0x2ee8>
   141b8:	mov	r0, r7
   141bc:	bl	23198 <__assert_fail@plt+0x11ec0>
   141c0:	mov	r0, r9
   141c4:	bl	2229c <__assert_fail@plt+0x10fc4>
   141c8:	ldr	lr, [sp, #28]
   141cc:	ldr	ip, [r5, #44]	; 0x2c
   141d0:	ldr	r4, [r5, #40]	; 0x28
   141d4:	mov	r3, fp
   141d8:	mov	r2, sl
   141dc:	mov	r1, r9
   141e0:	str	r0, [lr, #4]
   141e4:	ldr	lr, [r5]
   141e8:	ldr	r5, [sp, #36]	; 0x24
   141ec:	str	ip, [sp, #16]
   141f0:	str	r5, [sp, #8]
   141f4:	ldr	r5, [sp, #32]
   141f8:	str	r4, [sp, #12]
   141fc:	str	r5, [sp, #4]
   14200:	str	lr, [sp]
   14204:	mov	r7, r0
   14208:	bl	12b80 <__assert_fail@plt+0x18a8>
   1420c:	ldr	r3, [sp, #24]
   14210:	mov	r0, r7
   14214:	str	r3, [r8]
   14218:	add	sp, sp, #52	; 0x34
   1421c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14220:	mov	r3, #8
   14224:	sub	r2, r4, r2
   14228:	str	r3, [sp]
   1422c:	add	r1, sp, #44	; 0x2c
   14230:	add	r2, r2, #1
   14234:	mvn	r3, #-2147483648	; 0x80000000
   14238:	bl	22400 <__assert_fail@plt+0x11128>
   1423c:	mov	r6, r0
   14240:	ldm	r9, {r0, r1}
   14244:	str	r6, [r7]
   14248:	stm	r6, {r0, r1}
   1424c:	b	1411c <__assert_fail@plt+0x2e44>
   14250:	bl	112cc <abort@plt>
   14254:	andeq	r5, r3, r4, ror r1
   14258:	muleq	r3, r8, r5
   1425c:	push	{r4, r5, r6, lr}
   14260:	mov	r5, r0
   14264:	bl	111d0 <__errno_location@plt>
   14268:	cmp	r5, #0
   1426c:	mov	r1, #48	; 0x30
   14270:	mov	r4, r0
   14274:	ldr	r0, [pc, #16]	; 1428c <__assert_fail@plt+0x2fb4>
   14278:	ldr	r6, [r4]
   1427c:	movne	r0, r5
   14280:	bl	226fc <__assert_fail@plt+0x11424>
   14284:	str	r6, [r4]
   14288:	pop	{r4, r5, r6, pc}
   1428c:	muleq	r3, r8, r6
   14290:	ldr	r3, [pc, #12]	; 142a4 <__assert_fail@plt+0x2fcc>
   14294:	cmp	r0, #0
   14298:	moveq	r0, r3
   1429c:	ldr	r0, [r0]
   142a0:	bx	lr
   142a4:	muleq	r3, r8, r6
   142a8:	ldr	r3, [pc, #12]	; 142bc <__assert_fail@plt+0x2fe4>
   142ac:	cmp	r0, #0
   142b0:	moveq	r0, r3
   142b4:	str	r1, [r0]
   142b8:	bx	lr
   142bc:	muleq	r3, r8, r6
   142c0:	ldr	r3, [pc, #52]	; 142fc <__assert_fail@plt+0x3024>
   142c4:	cmp	r0, #0
   142c8:	moveq	r0, r3
   142cc:	add	r3, r0, #8
   142d0:	push	{lr}		; (str lr, [sp, #-4]!)
   142d4:	lsr	lr, r1, #5
   142d8:	and	r1, r1, #31
   142dc:	ldr	ip, [r3, lr, lsl #2]
   142e0:	lsr	r0, ip, r1
   142e4:	eor	r2, r2, r0
   142e8:	and	r2, r2, #1
   142ec:	and	r0, r0, #1
   142f0:	eor	r1, ip, r2, lsl r1
   142f4:	str	r1, [r3, lr, lsl #2]
   142f8:	pop	{pc}		; (ldr pc, [sp], #4)
   142fc:	muleq	r3, r8, r6
   14300:	ldr	r3, [pc, #16]	; 14318 <__assert_fail@plt+0x3040>
   14304:	cmp	r0, #0
   14308:	movne	r3, r0
   1430c:	ldr	r0, [r3, #4]
   14310:	str	r1, [r3, #4]
   14314:	bx	lr
   14318:	muleq	r3, r8, r6
   1431c:	ldr	r3, [pc, #44]	; 14350 <__assert_fail@plt+0x3078>
   14320:	cmp	r0, #0
   14324:	moveq	r0, r3
   14328:	mov	ip, #10
   1432c:	cmp	r2, #0
   14330:	cmpne	r1, #0
   14334:	str	ip, [r0]
   14338:	beq	14348 <__assert_fail@plt+0x3070>
   1433c:	str	r1, [r0, #40]	; 0x28
   14340:	str	r2, [r0, #44]	; 0x2c
   14344:	bx	lr
   14348:	push	{r4, lr}
   1434c:	bl	112cc <abort@plt>
   14350:	muleq	r3, r8, r6
   14354:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14358:	sub	sp, sp, #24
   1435c:	ldr	ip, [pc, #108]	; 143d0 <__assert_fail@plt+0x30f8>
   14360:	ldr	r4, [sp, #56]	; 0x38
   14364:	mov	r9, r2
   14368:	cmp	r4, #0
   1436c:	moveq	r4, ip
   14370:	mov	sl, r3
   14374:	mov	r7, r0
   14378:	mov	r8, r1
   1437c:	bl	111d0 <__errno_location@plt>
   14380:	ldr	r3, [r4, #44]	; 0x2c
   14384:	mov	r1, r8
   14388:	ldr	r6, [r0]
   1438c:	str	r3, [sp, #16]
   14390:	ldr	r2, [r4, #40]	; 0x28
   14394:	add	r3, r4, #8
   14398:	str	r3, [sp, #8]
   1439c:	str	r2, [sp, #12]
   143a0:	ldr	r2, [r4, #4]
   143a4:	mov	r5, r0
   143a8:	str	r2, [sp, #4]
   143ac:	ldr	ip, [r4]
   143b0:	mov	r3, sl
   143b4:	mov	r2, r9
   143b8:	mov	r0, r7
   143bc:	str	ip, [sp]
   143c0:	bl	12b80 <__assert_fail@plt+0x18a8>
   143c4:	str	r6, [r5]
   143c8:	add	sp, sp, #24
   143cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143d0:	muleq	r3, r8, r6
   143d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d8:	cmp	r3, #0
   143dc:	sub	sp, sp, #44	; 0x2c
   143e0:	ldr	r4, [pc, #192]	; 144a8 <__assert_fail@plt+0x31d0>
   143e4:	mov	r6, r2
   143e8:	movne	r4, r3
   143ec:	mov	r9, r1
   143f0:	mov	r8, r0
   143f4:	bl	111d0 <__errno_location@plt>
   143f8:	ldr	r3, [r4, #44]	; 0x2c
   143fc:	ldr	r5, [r4, #4]
   14400:	add	sl, r4, #8
   14404:	cmp	r6, #0
   14408:	orreq	r5, r5, #1
   1440c:	mov	r1, #0
   14410:	ldr	r2, [r0]
   14414:	str	r3, [sp, #16]
   14418:	ldr	r3, [r4, #40]	; 0x28
   1441c:	stmib	sp, {r5, sl}
   14420:	str	r3, [sp, #12]
   14424:	ldr	r3, [r4]
   14428:	mov	r7, r0
   1442c:	str	r2, [sp, #28]
   14430:	str	r3, [sp]
   14434:	mov	r2, r8
   14438:	mov	r3, r9
   1443c:	mov	r0, r1
   14440:	bl	12b80 <__assert_fail@plt+0x18a8>
   14444:	add	r1, r0, #1
   14448:	mov	fp, r0
   1444c:	mov	r0, r1
   14450:	str	r1, [sp, #36]	; 0x24
   14454:	bl	2229c <__assert_fail@plt+0x10fc4>
   14458:	ldr	r3, [r4, #44]	; 0x2c
   1445c:	mov	r2, r8
   14460:	str	r3, [sp, #16]
   14464:	ldr	r3, [r4, #40]	; 0x28
   14468:	str	r5, [sp, #4]
   1446c:	str	r3, [sp, #12]
   14470:	str	sl, [sp, #8]
   14474:	ldr	ip, [r4]
   14478:	ldr	r1, [sp, #36]	; 0x24
   1447c:	mov	r3, r9
   14480:	str	ip, [sp]
   14484:	str	r0, [sp, #32]
   14488:	bl	12b80 <__assert_fail@plt+0x18a8>
   1448c:	ldr	r2, [sp, #28]
   14490:	cmp	r6, #0
   14494:	str	r2, [r7]
   14498:	ldr	r0, [sp, #32]
   1449c:	strne	fp, [r6]
   144a0:	add	sp, sp, #44	; 0x2c
   144a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a8:	muleq	r3, r8, r6
   144ac:	mov	r3, r2
   144b0:	mov	r2, #0
   144b4:	b	143d4 <__assert_fail@plt+0x30fc>
   144b8:	push	{r4, r5, r6, r7, r8, lr}
   144bc:	ldr	r6, [pc, #116]	; 14538 <__assert_fail@plt+0x3260>
   144c0:	ldr	r3, [r6, #4]
   144c4:	ldr	r7, [r6]
   144c8:	cmp	r3, #1
   144cc:	movgt	r5, r7
   144d0:	movgt	r4, #1
   144d4:	ble	144f4 <__assert_fail@plt+0x321c>
   144d8:	ldr	r0, [r5, #12]
   144dc:	bl	23198 <__assert_fail@plt+0x11ec0>
   144e0:	ldr	r3, [r6, #4]
   144e4:	add	r4, r4, #1
   144e8:	cmp	r3, r4
   144ec:	add	r5, r5, #8
   144f0:	bgt	144d8 <__assert_fail@plt+0x3200>
   144f4:	ldr	r0, [r7, #4]
   144f8:	ldr	r4, [pc, #60]	; 1453c <__assert_fail@plt+0x3264>
   144fc:	cmp	r0, r4
   14500:	beq	14514 <__assert_fail@plt+0x323c>
   14504:	bl	23198 <__assert_fail@plt+0x11ec0>
   14508:	mov	r3, #256	; 0x100
   1450c:	str	r4, [r6, #12]
   14510:	str	r3, [r6, #8]
   14514:	ldr	r4, [pc, #36]	; 14540 <__assert_fail@plt+0x3268>
   14518:	cmp	r7, r4
   1451c:	beq	1452c <__assert_fail@plt+0x3254>
   14520:	mov	r0, r7
   14524:	bl	23198 <__assert_fail@plt+0x11ec0>
   14528:	str	r4, [r6]
   1452c:	mov	r3, #1
   14530:	str	r3, [r6, #4]
   14534:	pop	{r4, r5, r6, r7, r8, pc}
   14538:	andeq	r5, r3, r4, ror r1
   1453c:	muleq	r3, r8, r5
   14540:	andeq	r5, r3, ip, ror r1
   14544:	ldr	r3, [pc, #4]	; 14550 <__assert_fail@plt+0x3278>
   14548:	mvn	r2, #0
   1454c:	b	14094 <__assert_fail@plt+0x2dbc>
   14550:	muleq	r3, r8, r6
   14554:	ldr	r3, [pc]	; 1455c <__assert_fail@plt+0x3284>
   14558:	b	14094 <__assert_fail@plt+0x2dbc>
   1455c:	muleq	r3, r8, r6
   14560:	mov	r1, r0
   14564:	ldr	r3, [pc, #8]	; 14574 <__assert_fail@plt+0x329c>
   14568:	mvn	r2, #0
   1456c:	mov	r0, #0
   14570:	b	14094 <__assert_fail@plt+0x2dbc>
   14574:	muleq	r3, r8, r6
   14578:	mov	r2, r1
   1457c:	ldr	r3, [pc, #8]	; 1458c <__assert_fail@plt+0x32b4>
   14580:	mov	r1, r0
   14584:	mov	r0, #0
   14588:	b	14094 <__assert_fail@plt+0x2dbc>
   1458c:	muleq	r3, r8, r6
   14590:	push	{r4, r5, lr}
   14594:	sub	sp, sp, #52	; 0x34
   14598:	mov	r5, r2
   1459c:	mov	r4, r0
   145a0:	mov	r0, sp
   145a4:	bl	12a30 <__assert_fail@plt+0x1758>
   145a8:	mov	r3, sp
   145ac:	mov	r1, r5
   145b0:	mov	r0, r4
   145b4:	mvn	r2, #0
   145b8:	bl	14094 <__assert_fail@plt+0x2dbc>
   145bc:	add	sp, sp, #52	; 0x34
   145c0:	pop	{r4, r5, pc}
   145c4:	push	{r4, r5, r6, lr}
   145c8:	sub	sp, sp, #48	; 0x30
   145cc:	mov	r5, r2
   145d0:	mov	r6, r3
   145d4:	mov	r4, r0
   145d8:	mov	r0, sp
   145dc:	bl	12a30 <__assert_fail@plt+0x1758>
   145e0:	mov	r3, sp
   145e4:	mov	r2, r6
   145e8:	mov	r1, r5
   145ec:	mov	r0, r4
   145f0:	bl	14094 <__assert_fail@plt+0x2dbc>
   145f4:	add	sp, sp, #48	; 0x30
   145f8:	pop	{r4, r5, r6, pc}
   145fc:	mov	r2, r1
   14600:	mov	r1, r0
   14604:	mov	r0, #0
   14608:	b	14590 <__assert_fail@plt+0x32b8>
   1460c:	mov	r3, r2
   14610:	mov	r2, r1
   14614:	mov	r1, r0
   14618:	mov	r0, #0
   1461c:	b	145c4 <__assert_fail@plt+0x32ec>
   14620:	push	{r4, r5, r6, r7, r8, lr}
   14624:	mov	r7, r0
   14628:	ldr	lr, [pc, #100]	; 14694 <__assert_fail@plt+0x33bc>
   1462c:	mov	r8, r1
   14630:	mov	r4, r2
   14634:	ldm	lr!, {r0, r1, r2, r3}
   14638:	sub	sp, sp, #48	; 0x30
   1463c:	mov	ip, sp
   14640:	lsr	r5, r4, #5
   14644:	stmia	ip!, {r0, r1, r2, r3}
   14648:	add	r6, sp, #8
   1464c:	ldm	lr!, {r0, r1, r2, r3}
   14650:	and	r4, r4, #31
   14654:	stmia	ip!, {r0, r1, r2, r3}
   14658:	ldm	lr, {r0, r1, r2, r3}
   1465c:	stm	ip, {r0, r1, r2, r3}
   14660:	mov	r2, r8
   14664:	ldr	lr, [r6, r5, lsl #2]
   14668:	mov	r1, r7
   1466c:	mov	r3, sp
   14670:	lsr	ip, lr, r4
   14674:	eor	ip, ip, #1
   14678:	and	ip, ip, #1
   1467c:	mov	r0, #0
   14680:	eor	r4, lr, ip, lsl r4
   14684:	str	r4, [r6, r5, lsl #2]
   14688:	bl	14094 <__assert_fail@plt+0x2dbc>
   1468c:	add	sp, sp, #48	; 0x30
   14690:	pop	{r4, r5, r6, r7, r8, pc}
   14694:	muleq	r3, r8, r6
   14698:	mov	r2, r1
   1469c:	mvn	r1, #0
   146a0:	b	14620 <__assert_fail@plt+0x3348>
   146a4:	mov	r2, #58	; 0x3a
   146a8:	mvn	r1, #0
   146ac:	b	14620 <__assert_fail@plt+0x3348>
   146b0:	mov	r2, #58	; 0x3a
   146b4:	b	14620 <__assert_fail@plt+0x3348>
   146b8:	push	{r4, r5, r6, r7, lr}
   146bc:	sub	sp, sp, #100	; 0x64
   146c0:	mov	r6, r0
   146c4:	mov	r0, sp
   146c8:	mov	r7, r2
   146cc:	bl	12a30 <__assert_fail@plt+0x1758>
   146d0:	mov	ip, sp
   146d4:	add	lr, sp, #48	; 0x30
   146d8:	ldm	ip!, {r0, r1, r2, r3}
   146dc:	stmia	lr!, {r0, r1, r2, r3}
   146e0:	ldm	ip!, {r0, r1, r2, r3}
   146e4:	ldr	r5, [sp, #60]	; 0x3c
   146e8:	stmia	lr!, {r0, r1, r2, r3}
   146ec:	mvn	r4, r5
   146f0:	ldm	ip, {r0, r1, r2, r3}
   146f4:	and	ip, r4, #67108864	; 0x4000000
   146f8:	eor	ip, ip, r5
   146fc:	str	ip, [sp, #60]	; 0x3c
   14700:	stm	lr, {r0, r1, r2, r3}
   14704:	mov	r1, r7
   14708:	mov	r0, r6
   1470c:	add	r3, sp, #48	; 0x30
   14710:	mvn	r2, #0
   14714:	bl	14094 <__assert_fail@plt+0x2dbc>
   14718:	add	sp, sp, #100	; 0x64
   1471c:	pop	{r4, r5, r6, r7, pc}
   14720:	push	{r4, r5, r6, r7, r8, lr}
   14724:	mov	r5, r1
   14728:	ldr	lr, [pc, #100]	; 14794 <__assert_fail@plt+0x34bc>
   1472c:	mov	r4, r2
   14730:	mov	r7, r0
   14734:	mov	r8, r3
   14738:	ldm	lr!, {r0, r1, r2, r3}
   1473c:	sub	sp, sp, #48	; 0x30
   14740:	mov	ip, sp
   14744:	mov	r6, #10
   14748:	stmia	ip!, {r0, r1, r2, r3}
   1474c:	cmp	r4, #0
   14750:	cmpne	r5, #0
   14754:	ldm	lr!, {r0, r1, r2, r3}
   14758:	str	r6, [sp]
   1475c:	stmia	ip!, {r0, r1, r2, r3}
   14760:	ldm	lr, {r0, r1, r2, r3}
   14764:	stm	ip, {r0, r1, r2, r3}
   14768:	beq	14790 <__assert_fail@plt+0x34b8>
   1476c:	mov	r3, sp
   14770:	mov	r1, r8
   14774:	mov	r0, r7
   14778:	ldr	r2, [sp, #72]	; 0x48
   1477c:	str	r5, [sp, #40]	; 0x28
   14780:	str	r4, [sp, #44]	; 0x2c
   14784:	bl	14094 <__assert_fail@plt+0x2dbc>
   14788:	add	sp, sp, #48	; 0x30
   1478c:	pop	{r4, r5, r6, r7, r8, pc}
   14790:	bl	112cc <abort@plt>
   14794:	muleq	r3, r8, r6
   14798:	push	{lr}		; (str lr, [sp, #-4]!)
   1479c:	sub	sp, sp, #12
   147a0:	mvn	ip, #0
   147a4:	str	ip, [sp]
   147a8:	bl	14720 <__assert_fail@plt+0x3448>
   147ac:	add	sp, sp, #12
   147b0:	pop	{pc}		; (ldr pc, [sp], #4)
   147b4:	push	{lr}		; (str lr, [sp, #-4]!)
   147b8:	sub	sp, sp, #12
   147bc:	mvn	ip, #0
   147c0:	mov	r3, r2
   147c4:	str	ip, [sp]
   147c8:	mov	r2, r1
   147cc:	mov	r1, r0
   147d0:	mov	r0, #0
   147d4:	bl	14720 <__assert_fail@plt+0x3448>
   147d8:	add	sp, sp, #12
   147dc:	pop	{pc}		; (ldr pc, [sp], #4)
   147e0:	push	{lr}		; (str lr, [sp, #-4]!)
   147e4:	sub	sp, sp, #12
   147e8:	str	r3, [sp]
   147ec:	mov	r3, r2
   147f0:	mov	r2, r1
   147f4:	mov	r1, r0
   147f8:	mov	r0, #0
   147fc:	bl	14720 <__assert_fail@plt+0x3448>
   14800:	add	sp, sp, #12
   14804:	pop	{pc}		; (ldr pc, [sp], #4)
   14808:	ldr	r3, [pc]	; 14810 <__assert_fail@plt+0x3538>
   1480c:	b	14094 <__assert_fail@plt+0x2dbc>
   14810:	andeq	r5, r3, r4, lsl #3
   14814:	mov	r2, r1
   14818:	ldr	r3, [pc, #8]	; 14828 <__assert_fail@plt+0x3550>
   1481c:	mov	r1, r0
   14820:	mov	r0, #0
   14824:	b	14094 <__assert_fail@plt+0x2dbc>
   14828:	andeq	r5, r3, r4, lsl #3
   1482c:	ldr	r3, [pc, #4]	; 14838 <__assert_fail@plt+0x3560>
   14830:	mvn	r2, #0
   14834:	b	14094 <__assert_fail@plt+0x2dbc>
   14838:	andeq	r5, r3, r4, lsl #3
   1483c:	mov	r1, r0
   14840:	ldr	r3, [pc, #8]	; 14850 <__assert_fail@plt+0x3578>
   14844:	mvn	r2, #0
   14848:	mov	r0, #0
   1484c:	b	14094 <__assert_fail@plt+0x2dbc>
   14850:	andeq	r5, r3, r4, lsl #3
   14854:	mov	ip, r0
   14858:	ldr	r3, [r1, #40]	; 0x28
   1485c:	ldr	r0, [r1, #56]	; 0x38
   14860:	cmp	r0, r3
   14864:	ble	148d8 <__assert_fail@plt+0x3600>
   14868:	push	{r4, lr}
   1486c:	ldr	lr, [r1, #4]
   14870:	ldrb	r0, [lr, r3]
   14874:	strb	r0, [ip]
   14878:	ldr	r4, [r1, #80]	; 0x50
   1487c:	cmp	r4, #1
   14880:	ble	148a0 <__assert_fail@plt+0x35c8>
   14884:	ldr	r4, [r1, #28]
   14888:	cmp	r3, r4
   1488c:	beq	148a0 <__assert_fail@plt+0x35c8>
   14890:	ldr	r4, [r1, #8]
   14894:	ldr	r4, [r4, r3, lsl #2]
   14898:	cmn	r4, #1
   1489c:	beq	14920 <__assert_fail@plt+0x3648>
   148a0:	cmp	r0, #92	; 0x5c
   148a4:	beq	148e8 <__assert_fail@plt+0x3610>
   148a8:	cmp	r0, #91	; 0x5b
   148ac:	beq	1492c <__assert_fail@plt+0x3654>
   148b0:	cmp	r0, #93	; 0x5d
   148b4:	beq	14910 <__assert_fail@plt+0x3638>
   148b8:	cmp	r0, #94	; 0x5e
   148bc:	beq	14950 <__assert_fail@plt+0x3678>
   148c0:	cmp	r0, #45	; 0x2d
   148c4:	bne	14900 <__assert_fail@plt+0x3628>
   148c8:	mov	r3, #22
   148cc:	strb	r3, [ip, #4]
   148d0:	mov	r0, #1
   148d4:	pop	{r4, pc}
   148d8:	mov	r3, #2
   148dc:	strb	r3, [ip, #4]
   148e0:	mov	r0, #0
   148e4:	bx	lr
   148e8:	tst	r2, #1
   148ec:	beq	14900 <__assert_fail@plt+0x3628>
   148f0:	ldr	r2, [r1, #48]	; 0x30
   148f4:	add	r3, r3, #1
   148f8:	cmp	r3, r2
   148fc:	blt	14994 <__assert_fail@plt+0x36bc>
   14900:	mov	r3, #1
   14904:	mov	r0, r3
   14908:	strb	r3, [ip, #4]
   1490c:	pop	{r4, pc}
   14910:	mov	r3, #21
   14914:	strb	r3, [ip, #4]
   14918:	mov	r0, #1
   1491c:	pop	{r4, pc}
   14920:	mov	r0, #1
   14924:	strb	r0, [ip, #4]
   14928:	pop	{r4, pc}
   1492c:	ldr	r1, [r1, #48]	; 0x30
   14930:	add	r0, r3, #1
   14934:	cmp	r0, r1
   14938:	blt	14960 <__assert_fail@plt+0x3688>
   1493c:	mov	r0, #1
   14940:	mov	r3, #91	; 0x5b
   14944:	strb	r0, [ip, #4]
   14948:	strb	r3, [ip]
   1494c:	pop	{r4, pc}
   14950:	mov	r3, #25
   14954:	strb	r3, [ip, #4]
   14958:	mov	r0, #1
   1495c:	pop	{r4, pc}
   14960:	add	r3, lr, r3
   14964:	ldrb	r3, [r3, #1]
   14968:	cmp	r3, #58	; 0x3a
   1496c:	strb	r3, [ip]
   14970:	beq	149ac <__assert_fail@plt+0x36d4>
   14974:	cmp	r3, #61	; 0x3d
   14978:	beq	149c4 <__assert_fail@plt+0x36ec>
   1497c:	cmp	r3, #46	; 0x2e
   14980:	bne	1493c <__assert_fail@plt+0x3664>
   14984:	mov	r3, #26
   14988:	strb	r3, [ip, #4]
   1498c:	mov	r0, #2
   14990:	pop	{r4, pc}
   14994:	str	r3, [r1, #40]	; 0x28
   14998:	ldrb	r3, [lr, r3]
   1499c:	mov	r0, #1
   149a0:	strb	r0, [ip, #4]
   149a4:	strb	r3, [ip]
   149a8:	pop	{r4, pc}
   149ac:	tst	r2, #4
   149b0:	beq	1493c <__assert_fail@plt+0x3664>
   149b4:	mov	r3, #30
   149b8:	strb	r3, [ip, #4]
   149bc:	mov	r0, #2
   149c0:	pop	{r4, pc}
   149c4:	mov	r3, #28
   149c8:	strb	r3, [ip, #4]
   149cc:	mov	r0, #2
   149d0:	pop	{r4, pc}
   149d4:	ldrb	r3, [r1, #24]
   149d8:	cmp	r3, #17
   149dc:	bne	149f4 <__assert_fail@plt+0x371c>
   149e0:	ldr	r3, [r1, #20]
   149e4:	cmp	r0, r3
   149e8:	ldrbeq	r3, [r1, #26]
   149ec:	orreq	r3, r3, #8
   149f0:	strbeq	r3, [r1, #26]
   149f4:	mov	r0, #0
   149f8:	bx	lr
   149fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a00:	sub	sp, sp, #52	; 0x34
   14a04:	ldr	r8, [r0, #84]	; 0x54
   14a08:	str	r3, [sp, #40]	; 0x28
   14a0c:	add	r3, r3, r3, lsl #1
   14a10:	ldr	fp, [r8, #24]
   14a14:	str	r1, [sp, #24]
   14a18:	add	fp, fp, r3, lsl #2
   14a1c:	ldr	r1, [fp, #4]
   14a20:	cmp	r1, #0
   14a24:	ble	14bc4 <__assert_fail@plt+0x38ec>
   14a28:	ldr	r3, [sp, #88]	; 0x58
   14a2c:	mov	r6, r2
   14a30:	mov	r2, #1
   14a34:	mov	sl, r0
   14a38:	add	r3, r3, r3, lsl r2
   14a3c:	lsl	r2, r2, r6
   14a40:	lsl	r3, r3, #3
   14a44:	add	r3, r3, #24
   14a48:	str	r3, [sp, #44]	; 0x2c
   14a4c:	ldr	r3, [sp, #24]
   14a50:	str	r2, [sp, #16]
   14a54:	mvn	r2, r2
   14a58:	str	r2, [sp, #20]
   14a5c:	and	r2, r3, #1
   14a60:	and	r3, r3, #2
   14a64:	mov	r7, #0
   14a68:	str	r2, [sp, #28]
   14a6c:	str	r3, [sp, #12]
   14a70:	b	14a90 <__assert_fail@plt+0x37b8>
   14a74:	cmp	r3, #9
   14a78:	beq	14bd8 <__assert_fail@plt+0x3900>
   14a7c:	cmp	r3, #4
   14a80:	beq	14ad0 <__assert_fail@plt+0x37f8>
   14a84:	add	r7, r7, #1
   14a88:	cmp	r1, r7
   14a8c:	ble	14bc4 <__assert_fail@plt+0x38ec>
   14a90:	ldr	r3, [fp, #8]
   14a94:	ldr	r2, [r8]
   14a98:	ldr	r5, [r3, r7, lsl #2]
   14a9c:	add	r3, r2, r5, lsl #3
   14aa0:	ldrb	r3, [r3, #4]
   14aa4:	cmp	r3, #8
   14aa8:	bne	14a74 <__assert_fail@plt+0x379c>
   14aac:	ldr	r3, [sp, #28]
   14ab0:	cmp	r3, #0
   14ab4:	beq	14a84 <__assert_fail@plt+0x37ac>
   14ab8:	ldr	r3, [r2, r5, lsl #3]
   14abc:	cmp	r3, r6
   14ac0:	bne	14a84 <__assert_fail@plt+0x37ac>
   14ac4:	mvn	r0, #0
   14ac8:	add	sp, sp, #52	; 0x34
   14acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad0:	ldr	r3, [sp, #88]	; 0x58
   14ad4:	cmn	r3, #1
   14ad8:	beq	14a84 <__assert_fail@plt+0x37ac>
   14adc:	add	r9, r5, r5, lsl #1
   14ae0:	ldr	r4, [sl, #116]	; 0x74
   14ae4:	ldr	r3, [sp, #44]	; 0x2c
   14ae8:	str	fp, [sp, #32]
   14aec:	str	r7, [sp, #36]	; 0x24
   14af0:	lsl	r9, r9, #2
   14af4:	add	r4, r4, r3
   14af8:	ldr	fp, [sp, #24]
   14afc:	ldr	r7, [sp, #40]	; 0x28
   14b00:	b	14b14 <__assert_fail@plt+0x383c>
   14b04:	add	r4, r4, #24
   14b08:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   14b0c:	cmp	r3, #0
   14b10:	beq	14bac <__assert_fail@plt+0x38d4>
   14b14:	ldr	r3, [r4, #-24]	; 0xffffffe8
   14b18:	cmp	r5, r3
   14b1c:	bne	14b04 <__assert_fail@plt+0x382c>
   14b20:	cmp	r6, #31
   14b24:	mov	r2, r6
   14b28:	mov	r1, fp
   14b2c:	mov	r0, sl
   14b30:	bgt	14b44 <__assert_fail@plt+0x386c>
   14b34:	ldr	r3, [r4, #-8]
   14b38:	ldr	ip, [sp, #16]
   14b3c:	tst	ip, r3
   14b40:	beq	14b04 <__assert_fail@plt+0x382c>
   14b44:	ldr	r3, [r8, #20]
   14b48:	add	r3, r3, r9
   14b4c:	ldr	r3, [r3, #8]
   14b50:	ldr	ip, [r3]
   14b54:	cmp	r7, ip
   14b58:	mov	r3, ip
   14b5c:	beq	14bfc <__assert_fail@plt+0x3924>
   14b60:	ldr	ip, [sp, #88]	; 0x58
   14b64:	str	ip, [sp]
   14b68:	bl	149fc <__assert_fail@plt+0x3724>
   14b6c:	cmn	r0, #1
   14b70:	beq	14ac4 <__assert_fail@plt+0x37ec>
   14b74:	cmp	r0, #0
   14b78:	bne	14b88 <__assert_fail@plt+0x38b0>
   14b7c:	ldr	r3, [sp, #12]
   14b80:	cmp	r3, #0
   14b84:	bne	14bf0 <__assert_fail@plt+0x3918>
   14b88:	cmp	r6, #31
   14b8c:	add	r4, r4, #24
   14b90:	ldrle	r3, [r4, #-32]	; 0xffffffe0
   14b94:	ldrle	r2, [sp, #20]
   14b98:	andle	r3, r3, r2
   14b9c:	strle	r3, [r4, #-32]	; 0xffffffe0
   14ba0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   14ba4:	cmp	r3, #0
   14ba8:	bne	14b14 <__assert_fail@plt+0x383c>
   14bac:	ldr	fp, [sp, #32]
   14bb0:	ldr	r7, [sp, #36]	; 0x24
   14bb4:	ldr	r1, [fp, #4]
   14bb8:	add	r7, r7, #1
   14bbc:	cmp	r1, r7
   14bc0:	bgt	14a90 <__assert_fail@plt+0x37b8>
   14bc4:	ldr	r3, [sp, #24]
   14bc8:	lsr	r0, r3, #1
   14bcc:	and	r0, r0, #1
   14bd0:	add	sp, sp, #52	; 0x34
   14bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bd8:	ldr	r3, [sp, #12]
   14bdc:	cmp	r3, #0
   14be0:	beq	14a84 <__assert_fail@plt+0x37ac>
   14be4:	ldr	r3, [r2, r5, lsl #3]
   14be8:	cmp	r6, r3
   14bec:	bne	14a84 <__assert_fail@plt+0x37ac>
   14bf0:	mov	r0, #0
   14bf4:	add	sp, sp, #52	; 0x34
   14bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bfc:	ldr	r3, [sp, #24]
   14c00:	ands	r0, r3, #1
   14c04:	mvnne	r0, #0
   14c08:	add	sp, sp, #52	; 0x34
   14c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c10:	add	r1, r1, r1, lsl #1
   14c14:	ldr	ip, [r0, #116]	; 0x74
   14c18:	push	{r4, lr}
   14c1c:	add	ip, ip, r1, lsl #3
   14c20:	ldr	lr, [sp, #8]
   14c24:	ldr	r1, [ip, #8]
   14c28:	ldr	r4, [sp, #12]
   14c2c:	cmp	r1, lr
   14c30:	bgt	14c80 <__assert_fail@plt+0x39a8>
   14c34:	ldr	ip, [ip, #12]
   14c38:	cmp	lr, ip
   14c3c:	bgt	14c74 <__assert_fail@plt+0x399c>
   14c40:	cmp	lr, ip
   14c44:	moveq	ip, #2
   14c48:	movne	ip, #0
   14c4c:	cmp	r1, lr
   14c50:	movne	r1, ip
   14c54:	orreq	r1, ip, #1
   14c58:	cmp	r1, #0
   14c5c:	bne	14c68 <__assert_fail@plt+0x3990>
   14c60:	mov	r0, r1
   14c64:	pop	{r4, pc}
   14c68:	str	r4, [sp, #8]
   14c6c:	pop	{r4, lr}
   14c70:	b	149fc <__assert_fail@plt+0x3724>
   14c74:	mov	r1, #1
   14c78:	mov	r0, r1
   14c7c:	pop	{r4, pc}
   14c80:	mvn	r1, #0
   14c84:	b	14c60 <__assert_fail@plt+0x3988>
   14c88:	push	{r4, r5, r6, lr}
   14c8c:	mov	r4, r0
   14c90:	mov	r6, r1
   14c94:	mov	r5, r2
   14c98:	b	14ca0 <__assert_fail@plt+0x39c8>
   14c9c:	mov	r4, r3
   14ca0:	ldr	r3, [r4, #4]
   14ca4:	cmp	r3, #0
   14ca8:	bne	14c9c <__assert_fail@plt+0x39c4>
   14cac:	ldr	r3, [r4, #8]
   14cb0:	cmp	r3, #0
   14cb4:	bne	14c9c <__assert_fail@plt+0x39c4>
   14cb8:	mov	r1, r4
   14cbc:	mov	r0, r5
   14cc0:	blx	r6
   14cc4:	cmp	r0, #0
   14cc8:	popne	{r4, r5, r6, pc}
   14ccc:	ldr	r2, [r4]
   14cd0:	cmp	r2, #0
   14cd4:	popeq	{r4, r5, r6, pc}
   14cd8:	ldr	r3, [r2, #8]
   14cdc:	cmp	r4, r3
   14ce0:	cmpne	r3, #0
   14ce4:	moveq	r4, #1
   14ce8:	movne	r4, #0
   14cec:	cmp	r4, #0
   14cf0:	mov	r4, r2
   14cf4:	bne	14cb8 <__assert_fail@plt+0x39e0>
   14cf8:	b	14c9c <__assert_fail@plt+0x39c4>
   14cfc:	push	{r4, r5, r6, r7, r8, lr}
   14d00:	mov	r4, r0
   14d04:	mov	r6, r1
   14d08:	mov	r5, r2
   14d0c:	mov	r7, #0
   14d10:	b	14d18 <__assert_fail@plt+0x3a40>
   14d14:	mov	r4, r3
   14d18:	mov	r1, r4
   14d1c:	mov	r0, r5
   14d20:	blx	r6
   14d24:	cmp	r0, #0
   14d28:	popne	{r4, r5, r6, r7, r8, pc}
   14d2c:	ldr	r3, [r4, #4]
   14d30:	cmp	r3, #0
   14d34:	moveq	r2, r7
   14d38:	bne	14d14 <__assert_fail@plt+0x3a3c>
   14d3c:	ldr	r3, [r4, #8]
   14d40:	cmp	r3, #0
   14d44:	cmpne	r2, r3
   14d48:	bne	14d14 <__assert_fail@plt+0x3a3c>
   14d4c:	ldr	r3, [r4]
   14d50:	mov	r2, r4
   14d54:	subs	r4, r3, #0
   14d58:	popeq	{r4, r5, r6, r7, r8, pc}
   14d5c:	ldr	r3, [r4, #8]
   14d60:	cmp	r3, #0
   14d64:	cmpne	r2, r3
   14d68:	beq	14d4c <__assert_fail@plt+0x3a74>
   14d6c:	b	14d14 <__assert_fail@plt+0x3a3c>
   14d70:	ldr	r3, [r0, #80]	; 0x50
   14d74:	push	{r4, r5, r6, lr}
   14d78:	cmp	r3, #1
   14d7c:	mov	r4, r0
   14d80:	mov	r5, r1
   14d84:	ble	14dcc <__assert_fail@plt+0x3af4>
   14d88:	cmn	r1, #-1073741823	; 0xc0000001
   14d8c:	bhi	14dfc <__assert_fail@plt+0x3b24>
   14d90:	lsl	r6, r1, #2
   14d94:	mov	r1, r6
   14d98:	ldr	r0, [r0, #8]
   14d9c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   14da0:	subs	r3, r0, #0
   14da4:	beq	14dfc <__assert_fail@plt+0x3b24>
   14da8:	ldr	r0, [r4, #12]
   14dac:	str	r3, [r4, #8]
   14db0:	cmp	r0, #0
   14db4:	beq	14dcc <__assert_fail@plt+0x3af4>
   14db8:	mov	r1, r6
   14dbc:	bl	22ff8 <__assert_fail@plt+0x11d20>
   14dc0:	cmp	r0, #0
   14dc4:	beq	14dfc <__assert_fail@plt+0x3b24>
   14dc8:	str	r0, [r4, #12]
   14dcc:	ldrb	r3, [r4, #75]	; 0x4b
   14dd0:	cmp	r3, #0
   14dd4:	bne	14de4 <__assert_fail@plt+0x3b0c>
   14dd8:	mov	r0, #0
   14ddc:	str	r5, [r4, #36]	; 0x24
   14de0:	pop	{r4, r5, r6, pc}
   14de4:	mov	r1, r5
   14de8:	ldr	r0, [r4, #4]
   14dec:	bl	22ff8 <__assert_fail@plt+0x11d20>
   14df0:	cmp	r0, #0
   14df4:	strne	r0, [r4, #4]
   14df8:	bne	14dd8 <__assert_fail@plt+0x3b00>
   14dfc:	mov	r0, #12
   14e00:	pop	{r4, r5, r6, pc}
   14e04:	push	{r4, r5, r6, lr}
   14e08:	mov	r5, r1
   14e0c:	ldr	r3, [r0]
   14e10:	ldr	r1, [r0, #4]
   14e14:	mov	r4, r0
   14e18:	cmp	r3, r1
   14e1c:	beq	14e38 <__assert_fail@plt+0x3b60>
   14e20:	ldr	r3, [r0, #8]
   14e24:	add	r2, r1, #1
   14e28:	str	r2, [r4, #4]
   14e2c:	mov	r0, #1
   14e30:	str	r5, [r3, r1, lsl #2]
   14e34:	pop	{r4, r5, r6, pc}
   14e38:	add	r1, r1, #1
   14e3c:	ldr	r0, [r0, #8]
   14e40:	lsl	r3, r1, #1
   14e44:	str	r3, [r4]
   14e48:	lsl	r1, r1, #3
   14e4c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   14e50:	subs	r3, r0, #0
   14e54:	ldrne	r1, [r4, #4]
   14e58:	strne	r3, [r4, #8]
   14e5c:	bne	14e24 <__assert_fail@plt+0x3b4c>
   14e60:	mov	r0, r3
   14e64:	pop	{r4, r5, r6, pc}
   14e68:	ldr	r3, [r1, #8]
   14e6c:	push	{r4, r5, r6, r7, r8, lr}
   14e70:	mov	r5, r1
   14e74:	mov	r4, #0
   14e78:	str	r2, [r5], #16
   14e7c:	mov	r8, r0
   14e80:	str	r3, [r1, #16]
   14e84:	lsl	r0, r3, #2
   14e88:	str	r4, [r1, #20]
   14e8c:	mov	r7, r1
   14e90:	mov	r6, r2
   14e94:	bl	22fcc <__assert_fail@plt+0x11cf4>
   14e98:	cmp	r0, r4
   14e9c:	str	r0, [r7, #24]
   14ea0:	beq	14f3c <__assert_fail@plt+0x3c64>
   14ea4:	ldr	r0, [r7, #8]
   14ea8:	cmp	r0, #0
   14eac:	bgt	14ec0 <__assert_fail@plt+0x3be8>
   14eb0:	b	14efc <__assert_fail@plt+0x3c24>
   14eb4:	add	r4, r4, #1
   14eb8:	cmp	r0, r4
   14ebc:	ble	14efc <__assert_fail@plt+0x3c24>
   14ec0:	ldr	r2, [r7, #12]
   14ec4:	ldr	r3, [r8]
   14ec8:	ldr	r1, [r2, r4, lsl #2]
   14ecc:	add	r3, r3, r1, lsl #3
   14ed0:	ldrb	r3, [r3, #4]
   14ed4:	tst	r3, #8
   14ed8:	bne	14eb4 <__assert_fail@plt+0x3bdc>
   14edc:	mov	r0, r5
   14ee0:	bl	14e04 <__assert_fail@plt+0x3b2c>
   14ee4:	cmp	r0, #0
   14ee8:	beq	14f3c <__assert_fail@plt+0x3c64>
   14eec:	ldr	r0, [r7, #8]
   14ef0:	add	r4, r4, #1
   14ef4:	cmp	r0, r4
   14ef8:	bgt	14ec0 <__assert_fail@plt+0x3be8>
   14efc:	ldr	r4, [r8, #68]	; 0x44
   14f00:	ldr	r5, [r8, #32]
   14f04:	and	r6, r6, r4
   14f08:	add	r6, r6, r6, lsl #1
   14f0c:	lsl	r4, r6, #2
   14f10:	add	r6, r5, r4
   14f14:	ldr	r3, [r5, r4]
   14f18:	ldr	r2, [r6, #4]
   14f1c:	cmp	r2, r3
   14f20:	ldrgt	r2, [r6, #8]
   14f24:	ble	14f44 <__assert_fail@plt+0x3c6c>
   14f28:	add	r1, r3, #1
   14f2c:	str	r1, [r5, r4]
   14f30:	mov	r0, #0
   14f34:	str	r7, [r2, r3, lsl #2]
   14f38:	pop	{r4, r5, r6, r7, r8, pc}
   14f3c:	mov	r0, #12
   14f40:	pop	{r4, r5, r6, r7, r8, pc}
   14f44:	add	r3, r3, #1
   14f48:	ldr	r0, [r6, #8]
   14f4c:	lsl	r1, r3, #3
   14f50:	lsl	r8, r3, #1
   14f54:	bl	22ff8 <__assert_fail@plt+0x11d20>
   14f58:	subs	r2, r0, #0
   14f5c:	beq	14f3c <__assert_fail@plt+0x3c64>
   14f60:	ldr	r3, [r5, r4]
   14f64:	str	r2, [r6, #8]
   14f68:	str	r8, [r6, #4]
   14f6c:	b	14f28 <__assert_fail@plt+0x3c50>
   14f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f74:	mov	r5, r0
   14f78:	ldr	r9, [r0, #36]	; 0x24
   14f7c:	ldr	r3, [r0, #48]	; 0x30
   14f80:	ldr	r4, [r0, #28]
   14f84:	cmp	r9, r3
   14f88:	movge	r9, r3
   14f8c:	cmp	r9, r4
   14f90:	sub	sp, sp, #84	; 0x54
   14f94:	ble	15034 <__assert_fail@plt+0x3d5c>
   14f98:	add	r7, r0, #16
   14f9c:	add	r8, sp, #8
   14fa0:	mov	sl, #1
   14fa4:	mvn	r6, #0
   14fa8:	ldm	r7, {r0, r1}
   14fac:	ldr	ip, [r5, #64]	; 0x40
   14fb0:	sub	r2, r9, r4
   14fb4:	cmp	ip, #0
   14fb8:	stm	r8, {r0, r1}
   14fbc:	bne	15078 <__assert_fail@plt+0x3da0>
   14fc0:	ldr	r3, [r5, #24]
   14fc4:	ldr	r1, [r5]
   14fc8:	add	r3, r4, r3
   14fcc:	add	r1, r1, r3
   14fd0:	mov	r3, r7
   14fd4:	add	r0, sp, #4
   14fd8:	bl	23224 <__assert_fail@plt+0x11f4c>
   14fdc:	sub	r2, r0, #1
   14fe0:	cmn	r2, #3
   14fe4:	mov	r3, r0
   14fe8:	bhi	15044 <__assert_fail@plt+0x3d6c>
   14fec:	cmn	r0, #2
   14ff0:	ldrne	r2, [sp, #4]
   14ff4:	beq	150d8 <__assert_fail@plt+0x3e00>
   14ff8:	ldr	r1, [r5, #8]
   14ffc:	add	r0, r4, r3
   15000:	add	ip, r4, #1
   15004:	cmp	ip, r0
   15008:	str	r2, [r1, r4, lsl #2]
   1500c:	add	r3, r1, r4, lsl #2
   15010:	bge	15100 <__assert_fail@plt+0x3e28>
   15014:	sub	r2, r0, #-1073741823	; 0xc0000001
   15018:	add	r2, r1, r2, lsl #2
   1501c:	str	r6, [r3, #4]!
   15020:	cmp	r2, r3
   15024:	bne	1501c <__assert_fail@plt+0x3d44>
   15028:	mov	r4, r0
   1502c:	cmp	r9, r4
   15030:	bgt	14fa8 <__assert_fail@plt+0x3cd0>
   15034:	str	r4, [r5, #28]
   15038:	str	r4, [r5, #32]
   1503c:	add	sp, sp, #84	; 0x54
   15040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15044:	ldr	r3, [r5]
   15048:	ldr	r2, [r5, #24]
   1504c:	add	r3, r3, r4
   15050:	ldr	r1, [r5, #64]	; 0x40
   15054:	ldrb	r2, [r3, r2]
   15058:	cmp	r1, #0
   1505c:	mov	r3, sl
   15060:	str	r2, [sp, #4]
   15064:	ldrbne	r2, [r1, r2]
   15068:	ldm	r8, {r0, r1}
   1506c:	strne	r2, [sp, #4]
   15070:	stm	r7, {r0, r1}
   15074:	b	14ff8 <__assert_fail@plt+0x3d20>
   15078:	ldr	r3, [r5, #80]	; 0x50
   1507c:	cmp	r3, #0
   15080:	ble	150d0 <__assert_fail@plt+0x3df8>
   15084:	add	r0, sp, #15
   15088:	mov	r3, #0
   1508c:	b	15094 <__assert_fail@plt+0x3dbc>
   15090:	ldr	ip, [r5, #64]	; 0x40
   15094:	ldr	r1, [r5]
   15098:	ldr	lr, [r5, #24]
   1509c:	add	r1, r1, r4
   150a0:	add	r1, r1, r3
   150a4:	ldr	fp, [r5, #4]
   150a8:	ldrb	lr, [r1, lr]
   150ac:	add	r1, fp, r4
   150b0:	ldrb	ip, [ip, lr]
   150b4:	strb	ip, [r1, r3]
   150b8:	ldr	r1, [r5, #80]	; 0x50
   150bc:	add	r3, r3, #1
   150c0:	cmp	r1, r3
   150c4:	cmpgt	r2, r3
   150c8:	strb	ip, [r0, #1]!
   150cc:	bgt	15090 <__assert_fail@plt+0x3db8>
   150d0:	add	r1, sp, #16
   150d4:	b	14fd0 <__assert_fail@plt+0x3cf8>
   150d8:	ldr	r2, [r5, #36]	; 0x24
   150dc:	ldr	r3, [r5, #48]	; 0x30
   150e0:	cmp	r2, r3
   150e4:	bge	15044 <__assert_fail@plt+0x3d6c>
   150e8:	ldm	r8, {r0, r1}
   150ec:	stm	r7, {r0, r1}
   150f0:	str	r4, [r5, #28]
   150f4:	str	r4, [r5, #32]
   150f8:	add	sp, sp, #84	; 0x54
   150fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15100:	mov	r4, ip
   15104:	b	1502c <__assert_fail@plt+0x3d54>
   15108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1510c:	mov	r5, r0
   15110:	ldr	r7, [r0, #36]	; 0x24
   15114:	ldr	r3, [r0, #48]	; 0x30
   15118:	ldrb	r2, [r0, #74]	; 0x4a
   1511c:	cmp	r7, r3
   15120:	movge	r7, r3
   15124:	cmp	r2, #0
   15128:	sub	sp, sp, #100	; 0x64
   1512c:	ldr	r6, [r0, #28]
   15130:	bne	15140 <__assert_fail@plt+0x3e68>
   15134:	ldr	r3, [r0, #64]	; 0x40
   15138:	cmp	r3, #0
   1513c:	beq	15274 <__assert_fail@plt+0x3f9c>
   15140:	ldr	r4, [r5, #32]
   15144:	cmp	r6, r7
   15148:	bge	15260 <__assert_fail@plt+0x3f88>
   1514c:	sub	r3, r7, r6
   15150:	str	r3, [sp, #4]
   15154:	add	sl, r5, #16
   15158:	add	r3, sp, #24
   1515c:	str	r3, [sp]
   15160:	add	r3, sp, #20
   15164:	str	r3, [sp, #8]
   15168:	ldm	sl, {r0, r1}
   1516c:	ldr	r2, [r5, #64]	; 0x40
   15170:	ldr	r3, [sp]
   15174:	cmp	r2, #0
   15178:	stm	r3, {r0, r1}
   1517c:	bne	153c0 <__assert_fail@plt+0x40e8>
   15180:	ldr	r3, [r5, #24]
   15184:	ldr	r2, [r5]
   15188:	add	r3, r4, r3
   1518c:	add	r3, r2, r3
   15190:	str	r3, [sp, #12]
   15194:	mov	r3, sl
   15198:	ldr	r2, [sp, #4]
   1519c:	ldr	r0, [sp, #8]
   151a0:	ldr	r1, [sp, #12]
   151a4:	bl	23224 <__assert_fail@plt+0x11f4c>
   151a8:	sub	r3, r0, #1
   151ac:	cmn	r3, #4
   151b0:	mov	r8, r0
   151b4:	str	r3, [sp, #4]
   151b8:	bhi	154d0 <__assert_fail@plt+0x41f8>
   151bc:	ldr	fp, [sp, #20]
   151c0:	mov	r0, fp
   151c4:	bl	112b4 <towupper@plt>
   151c8:	cmp	fp, r0
   151cc:	mov	r9, r0
   151d0:	beq	154b8 <__assert_fail@plt+0x41e0>
   151d4:	add	r0, sp, #32
   151d8:	ldr	r2, [sp]
   151dc:	mov	r1, r9
   151e0:	bl	10ff0 <wcrtomb@plt>
   151e4:	cmp	r8, r0
   151e8:	mov	fp, r0
   151ec:	bne	15570 <__assert_fail@plt+0x4298>
   151f0:	ldr	r0, [r5, #4]
   151f4:	add	r1, sp, #32
   151f8:	add	r0, r0, r6
   151fc:	mov	r2, r8
   15200:	bl	11068 <memcpy@plt>
   15204:	ldrb	r3, [r5, #76]	; 0x4c
   15208:	cmp	r3, #0
   1520c:	bne	15548 <__assert_fail@plt+0x4270>
   15210:	add	r2, r8, r4
   15214:	ldr	r3, [r5, #8]
   15218:	add	r8, r6, r8
   1521c:	add	r1, r6, #1
   15220:	cmp	r1, r8
   15224:	mov	r4, r2
   15228:	str	r9, [r3, r6, lsl #2]
   1522c:	bge	15568 <__assert_fail@plt+0x4290>
   15230:	sub	r2, r8, #-1073741823	; 0xc0000001
   15234:	add	r6, r3, r6, lsl #2
   15238:	add	r3, r3, r2, lsl #2
   1523c:	mvn	r2, #0
   15240:	str	r2, [r6, #4]!
   15244:	cmp	r3, r6
   15248:	bne	15240 <__assert_fail@plt+0x3f68>
   1524c:	mov	r6, r8
   15250:	b	15144 <__assert_fail@plt+0x3e6c>
   15254:	ldr	r3, [sp]
   15258:	ldm	r3, {r0, r1}
   1525c:	stm	sl, {r0, r1}
   15260:	mov	r0, #0
   15264:	str	r6, [r5, #28]
   15268:	str	r4, [r5, #32]
   1526c:	add	sp, sp, #100	; 0x64
   15270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15274:	ldrb	r3, [r0, #76]	; 0x4c
   15278:	cmp	r3, #0
   1527c:	bne	15140 <__assert_fail@plt+0x3e68>
   15280:	cmp	r6, r7
   15284:	bge	154a8 <__assert_fail@plt+0x41d0>
   15288:	add	sl, r0, #16
   1528c:	mvn	r9, #0
   15290:	b	152c0 <__assert_fail@plt+0x3fe8>
   15294:	mov	r0, fp
   15298:	bl	112b4 <towupper@plt>
   1529c:	bics	r3, r0, #127	; 0x7f
   152a0:	bne	152e8 <__assert_fail@plt+0x4010>
   152a4:	ldr	r3, [r5, #4]
   152a8:	strb	r0, [r3, r6]
   152ac:	ldr	r3, [r5, #8]
   152b0:	str	r0, [r3, r6, lsl #2]
   152b4:	add	r6, r6, #1
   152b8:	cmp	r7, r6
   152bc:	ble	154a8 <__assert_fail@plt+0x41d0>
   152c0:	ldr	r8, [r5]
   152c4:	ldr	r4, [r5, #24]
   152c8:	add	r3, r8, r4
   152cc:	ldrb	fp, [r3, r6]
   152d0:	tst	fp, #128	; 0x80
   152d4:	bne	152e8 <__assert_fail@plt+0x4010>
   152d8:	mov	r0, sl
   152dc:	bl	1108c <mbsinit@plt>
   152e0:	cmp	r0, #0
   152e4:	bne	15294 <__assert_fail@plt+0x3fbc>
   152e8:	ldm	sl, {r0, r1}
   152ec:	add	r2, sp, #24
   152f0:	sub	r3, r7, r6
   152f4:	add	r4, r4, r6
   152f8:	stm	r2, {r0, r1}
   152fc:	str	r3, [sp, #4]
   15300:	mov	r2, r3
   15304:	add	r1, r8, r4
   15308:	mov	r3, sl
   1530c:	add	r0, sp, #20
   15310:	bl	23224 <__assert_fail@plt+0x11f4c>
   15314:	add	r2, sp, #24
   15318:	str	r2, [sp]
   1531c:	add	r2, sp, #20
   15320:	mov	r4, r6
   15324:	str	r2, [sp, #8]
   15328:	sub	r3, r0, #1
   1532c:	cmn	r3, #4
   15330:	mov	r8, r0
   15334:	bhi	1543c <__assert_fail@plt+0x4164>
   15338:	ldr	r3, [sp, #20]
   1533c:	mov	r0, r3
   15340:	str	r3, [sp, #12]
   15344:	bl	112b4 <towupper@plt>
   15348:	ldr	r3, [sp, #12]
   1534c:	cmp	r3, r0
   15350:	mov	fp, r0
   15354:	beq	15418 <__assert_fail@plt+0x4140>
   15358:	mov	r1, r0
   1535c:	add	r2, sp, #24
   15360:	add	r0, sp, #32
   15364:	bl	10ff0 <wcrtomb@plt>
   15368:	cmp	r8, r0
   1536c:	bne	1546c <__assert_fail@plt+0x4194>
   15370:	ldr	r0, [r5, #4]
   15374:	mov	r2, r8
   15378:	add	r0, r0, r6
   1537c:	add	r1, sp, #32
   15380:	bl	11068 <memcpy@plt>
   15384:	add	r6, r6, #1
   15388:	ldr	r2, [r5, #8]
   1538c:	sub	r3, r6, #1
   15390:	add	r8, r3, r8
   15394:	cmp	r6, r8
   15398:	str	fp, [r2, r4, lsl #2]
   1539c:	add	r4, r2, r4, lsl #2
   153a0:	bge	152b8 <__assert_fail@plt+0x3fe0>
   153a4:	sub	r3, r8, #-1073741823	; 0xc0000001
   153a8:	add	r3, r2, r3, lsl #2
   153ac:	str	r9, [r4, #4]!
   153b0:	cmp	r4, r3
   153b4:	bne	153ac <__assert_fail@plt+0x40d4>
   153b8:	mov	r6, r8
   153bc:	b	152b8 <__assert_fail@plt+0x3fe0>
   153c0:	ldr	lr, [r5, #80]	; 0x50
   153c4:	cmp	lr, #0
   153c8:	ble	1540c <__assert_fail@plt+0x4134>
   153cc:	ldr	r3, [r5, #24]
   153d0:	ldr	r0, [sp, #4]
   153d4:	ldr	r1, [r5]
   153d8:	add	r3, r4, r3
   153dc:	cmp	lr, r0
   153e0:	sub	r3, r3, #1
   153e4:	movge	lr, r0
   153e8:	add	r1, r1, r3
   153ec:	add	r0, sp, #31
   153f0:	mov	r3, #0
   153f4:	ldrb	ip, [r1, #1]!
   153f8:	add	r3, r3, #1
   153fc:	cmp	r3, lr
   15400:	ldrb	ip, [r2, ip]
   15404:	strb	ip, [r0, #1]!
   15408:	blt	153f4 <__assert_fail@plt+0x411c>
   1540c:	add	r3, sp, #32
   15410:	str	r3, [sp, #12]
   15414:	b	15194 <__assert_fail@plt+0x3ebc>
   15418:	ldr	r3, [r5, #24]
   1541c:	ldr	r1, [r5]
   15420:	ldr	r0, [r5, #4]
   15424:	add	r3, r6, r3
   15428:	add	r1, r1, r3
   1542c:	add	r0, r0, r6
   15430:	mov	r2, r8
   15434:	bl	11068 <memcpy@plt>
   15438:	b	15384 <__assert_fail@plt+0x40ac>
   1543c:	cmn	r3, #3
   15440:	bne	15474 <__assert_fail@plt+0x419c>
   15444:	ldr	r2, [r5, #36]	; 0x24
   15448:	ldr	r3, [r5, #48]	; 0x30
   1544c:	cmp	r2, r3
   15450:	blt	1549c <__assert_fail@plt+0x41c4>
   15454:	ldr	r3, [r5, #4]
   15458:	strb	fp, [r3, r6]
   1545c:	ldr	r3, [r5, #8]
   15460:	add	r6, r6, #1
   15464:	str	fp, [r3, r4, lsl #2]
   15468:	b	152b8 <__assert_fail@plt+0x3fe0>
   1546c:	mov	r4, r6
   15470:	b	15168 <__assert_fail@plt+0x3e90>
   15474:	ldr	r3, [r5, #4]
   15478:	cmn	r0, #1
   1547c:	strb	fp, [r3, r6]
   15480:	ldr	r3, [r5, #8]
   15484:	add	r6, r6, #1
   15488:	str	fp, [r3, r4, lsl #2]
   1548c:	addeq	r3, sp, #24
   15490:	ldmeq	r3, {r0, r1}
   15494:	stmeq	sl, {r0, r1}
   15498:	b	152b8 <__assert_fail@plt+0x3fe0>
   1549c:	add	r3, sp, #24
   154a0:	ldm	r3, {r0, r1}
   154a4:	stm	sl, {r0, r1}
   154a8:	str	r6, [r5, #28]
   154ac:	str	r6, [r5, #32]
   154b0:	mov	r0, #0
   154b4:	b	1526c <__assert_fail@plt+0x3f94>
   154b8:	ldr	r0, [r5, #4]
   154bc:	ldr	r1, [sp, #12]
   154c0:	add	r0, r0, r6
   154c4:	mov	r2, r8
   154c8:	bl	11068 <memcpy@plt>
   154cc:	b	15204 <__assert_fail@plt+0x3f2c>
   154d0:	ldr	r3, [sp, #4]
   154d4:	cmn	r3, #3
   154d8:	bne	154ec <__assert_fail@plt+0x4214>
   154dc:	ldr	r2, [r5, #36]	; 0x24
   154e0:	ldr	r3, [r5, #48]	; 0x30
   154e4:	cmp	r2, r3
   154e8:	blt	15254 <__assert_fail@plt+0x3f7c>
   154ec:	ldr	r3, [r5]
   154f0:	ldr	r1, [r5, #24]
   154f4:	add	r3, r3, r4
   154f8:	ldr	r2, [r5, #64]	; 0x40
   154fc:	ldrb	r3, [r3, r1]
   15500:	cmp	r2, #0
   15504:	mov	r1, r6
   15508:	ldrbne	r3, [r2, r3]
   1550c:	ldr	r2, [r5, #4]
   15510:	strb	r3, [r2, r6]
   15514:	ldrb	r2, [r5, #76]	; 0x4c
   15518:	cmp	r2, #0
   1551c:	ldrne	r2, [r5, #12]
   15520:	strne	r4, [r2, r6, lsl #2]
   15524:	ldr	r2, [r5, #8]
   15528:	cmn	r8, #1
   1552c:	add	r4, r4, #1
   15530:	add	r6, r6, #1
   15534:	str	r3, [r2, r1, lsl #2]
   15538:	ldreq	r3, [sp]
   1553c:	ldmeq	r3, {r0, r1}
   15540:	stmeq	sl, {r0, r1}
   15544:	b	15144 <__assert_fail@plt+0x3e6c>
   15548:	ldr	r3, [r5, #12]
   1554c:	add	r2, r8, r4
   15550:	add	r3, r3, r6, lsl #2
   15554:	str	r4, [r3], #4
   15558:	add	r4, r4, #1
   1555c:	cmp	r2, r4
   15560:	bne	15554 <__assert_fail@plt+0x427c>
   15564:	b	15214 <__assert_fail@plt+0x3f3c>
   15568:	mov	r6, r1
   1556c:	b	15144 <__assert_fail@plt+0x3e6c>
   15570:	cmn	r0, #1
   15574:	beq	154b8 <__assert_fail@plt+0x41e0>
   15578:	ldr	r0, [r5, #36]	; 0x24
   1557c:	add	r7, r6, fp
   15580:	cmp	r7, r0
   15584:	bhi	15254 <__assert_fail@plt+0x3f7c>
   15588:	ldr	r3, [r5, #12]
   1558c:	cmp	r3, #0
   15590:	beq	1566c <__assert_fail@plt+0x4394>
   15594:	ldrb	r3, [r5, #76]	; 0x4c
   15598:	cmp	r3, #0
   1559c:	bne	155c8 <__assert_fail@plt+0x42f0>
   155a0:	cmp	r6, #0
   155a4:	ldrne	r2, [r5, #12]
   155a8:	subne	r2, r2, #4
   155ac:	beq	155c0 <__assert_fail@plt+0x42e8>
   155b0:	str	r3, [r2, #4]!
   155b4:	add	r3, r3, #1
   155b8:	cmp	r6, r3
   155bc:	bne	155b0 <__assert_fail@plt+0x42d8>
   155c0:	mov	r3, #1
   155c4:	strb	r3, [r5, #76]	; 0x4c
   155c8:	ldr	r0, [r5, #4]
   155cc:	add	r1, sp, #32
   155d0:	mov	r2, fp
   155d4:	add	r0, r0, r6
   155d8:	bl	11068 <memcpy@plt>
   155dc:	ldr	r3, [r5, #8]
   155e0:	ldr	r1, [r5, #12]
   155e4:	lsl	r2, r6, #2
   155e8:	cmp	fp, #1
   155ec:	str	r9, [r3, r6, lsl #2]
   155f0:	add	r3, r3, r2
   155f4:	str	r4, [r1, r6, lsl #2]
   155f8:	add	r2, r1, r2
   155fc:	bls	1562c <__assert_fail@plt+0x4354>
   15600:	mov	r1, #1
   15604:	mvn	ip, #0
   15608:	cmp	r1, r8
   1560c:	ldr	r0, [sp, #4]
   15610:	movcc	r0, r1
   15614:	add	r1, r1, #1
   15618:	add	r0, r0, r4
   1561c:	cmp	r1, fp
   15620:	str	r0, [r2, #4]!
   15624:	str	ip, [r3, #4]!
   15628:	bne	15608 <__assert_fail@plt+0x4330>
   1562c:	ldr	r2, [r5, #52]	; 0x34
   15630:	ldr	r3, [r5, #48]	; 0x30
   15634:	cmp	r4, r2
   15638:	sub	fp, fp, r8
   1563c:	ldrlt	r2, [r5, #56]	; 0x38
   15640:	add	r3, fp, r3
   15644:	addlt	fp, r2, fp
   15648:	ldr	r2, [r5, #36]	; 0x24
   1564c:	strlt	fp, [r5, #56]	; 0x38
   15650:	cmp	r3, r2
   15654:	mov	r6, r7
   15658:	str	r3, [r5, #48]	; 0x30
   1565c:	add	r4, r8, r4
   15660:	movlt	r7, r3
   15664:	movge	r7, r2
   15668:	b	15144 <__assert_fail@plt+0x3e6c>
   1566c:	lsl	r0, r0, #2
   15670:	bl	22fcc <__assert_fail@plt+0x11cf4>
   15674:	cmp	r0, #0
   15678:	str	r0, [r5, #12]
   1567c:	moveq	r0, #12
   15680:	bne	15594 <__assert_fail@plt+0x42bc>
   15684:	b	1526c <__assert_fail@plt+0x3f94>
   15688:	push	{r4, r5, r6, lr}
   1568c:	mov	r5, r0
   15690:	ldr	r6, [r0, #36]	; 0x24
   15694:	ldr	r3, [r0, #48]	; 0x30
   15698:	ldr	r4, [r0, #28]
   1569c:	cmp	r6, r3
   156a0:	movge	r6, r3
   156a4:	cmp	r6, r4
   156a8:	ble	156ec <__assert_fail@plt+0x4414>
   156ac:	bl	1117c <__ctype_toupper_loc@plt>
   156b0:	ldr	r3, [r5]
   156b4:	ldr	r2, [r5, #24]
   156b8:	add	r3, r3, r4
   156bc:	ldr	r1, [r5, #64]	; 0x40
   156c0:	ldrb	r2, [r3, r2]
   156c4:	cmp	r1, #0
   156c8:	ldr	r3, [r5, #4]
   156cc:	ldrbne	r2, [r1, r2]
   156d0:	ldr	r1, [r0]
   156d4:	add	r3, r3, r4
   156d8:	add	r4, r4, #1
   156dc:	ldr	r2, [r1, r2, lsl #2]
   156e0:	cmp	r6, r4
   156e4:	strb	r2, [r3]
   156e8:	bne	156b0 <__assert_fail@plt+0x43d8>
   156ec:	str	r4, [r5, #28]
   156f0:	str	r4, [r5, #32]
   156f4:	pop	{r4, r5, r6, pc}
   156f8:	ldr	r3, [r0, #36]	; 0x24
   156fc:	push	{r4, r5, r6, lr}
   15700:	cmn	r3, #-536870910	; 0xe0000002
   15704:	bhi	157ec <__assert_fail@plt+0x4514>
   15708:	ldr	r2, [r0, #48]	; 0x30
   1570c:	lsl	r3, r3, #1
   15710:	cmp	r3, r2
   15714:	movge	r3, r2
   15718:	cmp	r3, r1
   1571c:	movge	r1, r3
   15720:	mov	r4, r0
   15724:	bl	14d70 <__assert_fail@plt+0x3a98>
   15728:	subs	r5, r0, #0
   1572c:	bne	157e4 <__assert_fail@plt+0x450c>
   15730:	ldr	r0, [r4, #100]	; 0x64
   15734:	cmp	r0, #0
   15738:	beq	15758 <__assert_fail@plt+0x4480>
   1573c:	ldr	r1, [r4, #36]	; 0x24
   15740:	add	r1, r1, #1
   15744:	lsl	r1, r1, #2
   15748:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1574c:	cmp	r0, #0
   15750:	beq	157ec <__assert_fail@plt+0x4514>
   15754:	str	r0, [r4, #100]	; 0x64
   15758:	ldrb	r3, [r4, #72]	; 0x48
   1575c:	cmp	r3, #0
   15760:	ldr	r3, [r4, #80]	; 0x50
   15764:	beq	1577c <__assert_fail@plt+0x44a4>
   15768:	cmp	r3, #1
   1576c:	mov	r0, r4
   15770:	ble	15808 <__assert_fail@plt+0x4530>
   15774:	pop	{r4, r5, r6, lr}
   15778:	b	15108 <__assert_fail@plt+0x3e30>
   1577c:	cmp	r3, #1
   15780:	bgt	157f8 <__assert_fail@plt+0x4520>
   15784:	ldr	r1, [r4, #64]	; 0x40
   15788:	cmp	r1, #0
   1578c:	beq	157e4 <__assert_fail@plt+0x450c>
   15790:	ldr	lr, [r4, #36]	; 0x24
   15794:	ldr	r2, [r4, #48]	; 0x30
   15798:	ldr	r3, [r4, #28]
   1579c:	cmp	lr, r2
   157a0:	movge	lr, r2
   157a4:	cmp	lr, r3
   157a8:	bgt	157b4 <__assert_fail@plt+0x44dc>
   157ac:	b	157dc <__assert_fail@plt+0x4504>
   157b0:	ldr	r1, [r4, #64]	; 0x40
   157b4:	ldr	r2, [r4]
   157b8:	ldr	ip, [r4, #24]
   157bc:	add	r2, r2, r3
   157c0:	ldr	r0, [r4, #4]
   157c4:	ldrb	r2, [r2, ip]
   157c8:	ldrb	r2, [r1, r2]
   157cc:	strb	r2, [r0, r3]
   157d0:	add	r3, r3, #1
   157d4:	cmp	lr, r3
   157d8:	bne	157b0 <__assert_fail@plt+0x44d8>
   157dc:	str	r3, [r4, #28]
   157e0:	str	r3, [r4, #32]
   157e4:	mov	r0, r5
   157e8:	pop	{r4, r5, r6, pc}
   157ec:	mov	r5, #12
   157f0:	mov	r0, r5
   157f4:	pop	{r4, r5, r6, pc}
   157f8:	mov	r0, r4
   157fc:	bl	14f70 <__assert_fail@plt+0x3c98>
   15800:	mov	r0, r5
   15804:	pop	{r4, r5, r6, pc}
   15808:	bl	15688 <__assert_fail@plt+0x43b0>
   1580c:	b	157e4 <__assert_fail@plt+0x450c>
   15810:	push	{r4, lr}
   15814:	mov	r4, r0
   15818:	ldr	r0, [r0]
   1581c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15820:	ldr	r0, [r4, #4]
   15824:	bl	23198 <__assert_fail@plt+0x11ec0>
   15828:	ldr	r0, [r4, #8]
   1582c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15830:	ldr	r0, [r4, #12]
   15834:	bl	23198 <__assert_fail@plt+0x11ec0>
   15838:	mov	r0, r4
   1583c:	pop	{r4, lr}
   15840:	b	23198 <__assert_fail@plt+0x11ec0>
   15844:	ldr	r3, [pc, #36]	; 15870 <__assert_fail@plt+0x4598>
   15848:	ldr	r2, [r0, #4]
   1584c:	and	r3, r3, r2
   15850:	cmp	r3, #6
   15854:	beq	15868 <__assert_fail@plt+0x4590>
   15858:	cmp	r3, #3
   1585c:	bxne	lr
   15860:	ldr	r0, [r0]
   15864:	b	23198 <__assert_fail@plt+0x11ec0>
   15868:	ldr	r0, [r0]
   1586c:	b	15810 <__assert_fail@plt+0x4538>
   15870:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   15874:	add	r0, r1, #20
   15878:	push	{r4, lr}
   1587c:	bl	15844 <__assert_fail@plt+0x456c>
   15880:	mov	r0, #0
   15884:	pop	{r4, pc}
   15888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1588c:	sub	sp, sp, #12
   15890:	ldmib	r0, {r5, ip}
   15894:	stm	sp, {r1, r2}
   15898:	mov	r4, r0
   1589c:	cmp	ip, r5
   158a0:	mov	r8, sp
   158a4:	ldrb	r6, [sp, #4]
   158a8:	bcs	15968 <__assert_fail@plt+0x4690>
   158ac:	ldr	r7, [r0, #12]
   158b0:	ldr	r5, [r0, #20]
   158b4:	ldm	r8, {r0, r1}
   158b8:	ldr	r3, [r4]
   158bc:	cmp	r6, #5
   158c0:	add	r3, r3, ip, lsl #3
   158c4:	bic	r2, r1, #261120	; 0x3fc00
   158c8:	bic	r2, r2, #768	; 0x300
   158cc:	stm	r3, {r0, r1}
   158d0:	str	r2, [r3, #4]
   158d4:	beq	15954 <__assert_fail@plt+0x467c>
   158d8:	sub	r6, r6, #6
   158dc:	clz	r6, r6
   158e0:	lsr	r6, r6, #5
   158e4:	ldrb	r2, [r3, #6]
   158e8:	mvn	r1, #0
   158ec:	bic	r2, r2, #16
   158f0:	orr	r2, r2, r6, lsl #4
   158f4:	strb	r2, [r3, #6]
   158f8:	str	r1, [r7, ip, lsl #2]
   158fc:	ldr	r3, [r4, #8]
   15900:	mov	r2, #0
   15904:	add	r3, r3, r3, lsl #1
   15908:	lsl	r3, r3, #2
   1590c:	add	r1, r5, r3
   15910:	str	r2, [r5, r3]
   15914:	str	r2, [r1, #4]
   15918:	str	r2, [r1, #8]
   1591c:	ldr	r3, [r4, #8]
   15920:	ldr	r0, [r4, #24]
   15924:	add	r3, r3, r3, lsl #1
   15928:	lsl	r3, r3, #2
   1592c:	add	r1, r0, r3
   15930:	str	r2, [r0, r3]
   15934:	str	r2, [r1, #4]
   15938:	str	r2, [r1, #8]
   1593c:	ldr	r3, [r4, #8]
   15940:	mov	r0, r3
   15944:	add	r3, r3, #1
   15948:	str	r3, [r4, #8]
   1594c:	add	sp, sp, #12
   15950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15954:	ldr	r6, [r4, #92]	; 0x5c
   15958:	cmp	r6, #1
   1595c:	movle	r6, #0
   15960:	movgt	r6, #1
   15964:	b	158e4 <__assert_fail@plt+0x460c>
   15968:	ldr	r3, [pc, #200]	; 15a38 <__assert_fail@plt+0x4760>
   1596c:	lsl	r9, r5, #1
   15970:	cmp	r9, r3
   15974:	bhi	15a30 <__assert_fail@plt+0x4758>
   15978:	lsl	r1, r5, #4
   1597c:	ldr	r0, [r0]
   15980:	bl	22ff8 <__assert_fail@plt+0x11d20>
   15984:	cmp	r0, #0
   15988:	beq	15a30 <__assert_fail@plt+0x4758>
   1598c:	lsl	sl, r5, #3
   15990:	mov	r1, sl
   15994:	str	r0, [r4]
   15998:	ldr	r0, [r4, #12]
   1599c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   159a0:	mov	r1, sl
   159a4:	add	r5, r9, r5, lsl #2
   159a8:	lsl	sl, r5, #2
   159ac:	mov	r7, r0
   159b0:	ldr	r0, [r4, #16]
   159b4:	bl	22ff8 <__assert_fail@plt+0x11d20>
   159b8:	mov	r1, sl
   159bc:	mov	fp, r0
   159c0:	ldr	r0, [r4, #20]
   159c4:	bl	22ff8 <__assert_fail@plt+0x11d20>
   159c8:	mov	r1, sl
   159cc:	mov	r5, r0
   159d0:	ldr	r0, [r4, #24]
   159d4:	bl	22ff8 <__assert_fail@plt+0x11d20>
   159d8:	cmp	fp, #0
   159dc:	cmpne	r7, #0
   159e0:	mov	sl, r0
   159e4:	beq	15a10 <__assert_fail@plt+0x4738>
   159e8:	cmp	r0, #0
   159ec:	cmpne	r5, #0
   159f0:	beq	15a10 <__assert_fail@plt+0x4738>
   159f4:	ldr	ip, [r4, #8]
   159f8:	str	r7, [r4, #12]
   159fc:	str	fp, [r4, #16]
   15a00:	str	r5, [r4, #20]
   15a04:	str	r0, [r4, #24]
   15a08:	str	r9, [r4, #4]
   15a0c:	b	158b4 <__assert_fail@plt+0x45dc>
   15a10:	mov	r0, r7
   15a14:	bl	23198 <__assert_fail@plt+0x11ec0>
   15a18:	mov	r0, fp
   15a1c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15a20:	mov	r0, r5
   15a24:	bl	23198 <__assert_fail@plt+0x11ec0>
   15a28:	mov	r0, sl
   15a2c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15a30:	mvn	r0, #0
   15a34:	b	1594c <__assert_fail@plt+0x4674>
   15a38:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   15a3c:	ldr	r3, [r0]
   15a40:	push	{r4, r5, r6, r7, r8, lr}
   15a44:	lsl	r7, r1, #3
   15a48:	add	r3, r3, r7
   15a4c:	mov	r5, r1
   15a50:	mov	r6, r2
   15a54:	ldm	r3, {r1, r2}
   15a58:	mov	r4, r0
   15a5c:	bl	15888 <__assert_fail@plt+0x45b0>
   15a60:	cmn	r0, #1
   15a64:	popeq	{r4, r5, r6, r7, r8, pc}
   15a68:	ldr	lr, [r4]
   15a6c:	ldr	ip, [pc, #80]	; 15ac4 <__assert_fail@plt+0x47ec>
   15a70:	add	r1, lr, r0, lsl #3
   15a74:	ldr	r8, [pc, #76]	; 15ac8 <__assert_fail@plt+0x47f0>
   15a78:	ldr	r3, [r1, #4]
   15a7c:	and	r2, r6, ip
   15a80:	add	r7, lr, r7
   15a84:	bic	r3, r3, r8
   15a88:	orr	r3, r3, r2, lsl #8
   15a8c:	str	r3, [r1, #4]
   15a90:	ldr	lr, [r7, #4]
   15a94:	bic	r3, r3, r8
   15a98:	and	ip, ip, lr, lsr #8
   15a9c:	orr	r2, r2, ip
   15aa0:	orr	r3, r3, r2, lsl #8
   15aa4:	str	r3, [r1, #4]
   15aa8:	lsr	r3, r3, #16
   15aac:	uxtb	r3, r3
   15ab0:	orr	r3, r3, #4
   15ab4:	strb	r3, [r1, #6]
   15ab8:	ldr	r3, [r4, #16]
   15abc:	str	r5, [r3, r0, lsl #2]
   15ac0:	pop	{r4, r5, r6, r7, r8, pc}
   15ac4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15ac8:	andeq	pc, r3, r0, lsl #30
   15acc:	push	{r4, lr}
   15ad0:	mov	r4, r0
   15ad4:	ldr	r0, [r0, #24]
   15ad8:	bl	23198 <__assert_fail@plt+0x11ec0>
   15adc:	ldr	r0, [r4, #36]	; 0x24
   15ae0:	bl	23198 <__assert_fail@plt+0x11ec0>
   15ae4:	ldr	r3, [r4, #40]	; 0x28
   15ae8:	add	r2, r4, #4
   15aec:	cmp	r3, r2
   15af0:	beq	15b04 <__assert_fail@plt+0x482c>
   15af4:	ldr	r0, [r3, #8]
   15af8:	bl	23198 <__assert_fail@plt+0x11ec0>
   15afc:	ldr	r0, [r4, #40]	; 0x28
   15b00:	bl	23198 <__assert_fail@plt+0x11ec0>
   15b04:	ldr	r0, [r4, #12]
   15b08:	bl	23198 <__assert_fail@plt+0x11ec0>
   15b0c:	ldr	r0, [r4, #48]	; 0x30
   15b10:	bl	23198 <__assert_fail@plt+0x11ec0>
   15b14:	ldr	r0, [r4, #44]	; 0x2c
   15b18:	bl	23198 <__assert_fail@plt+0x11ec0>
   15b1c:	mov	r0, r4
   15b20:	pop	{r4, lr}
   15b24:	b	23198 <__assert_fail@plt+0x11ec0>
   15b28:	push	{r4, lr}
   15b2c:	mov	r4, r0
   15b30:	ldr	r0, [r0, #8]
   15b34:	bl	23198 <__assert_fail@plt+0x11ec0>
   15b38:	ldr	r0, [r4, #12]
   15b3c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15b40:	ldrb	r3, [r4, #75]	; 0x4b
   15b44:	cmp	r3, #0
   15b48:	popeq	{r4, pc}
   15b4c:	ldr	r0, [r4, #4]
   15b50:	pop	{r4, lr}
   15b54:	b	23198 <__assert_fail@plt+0x11ec0>
   15b58:	push	{r4, r5, r6, r7, r8, lr}
   15b5c:	mov	r6, r0
   15b60:	ldr	r0, [r0]
   15b64:	cmp	r0, #0
   15b68:	beq	15b9c <__assert_fail@plt+0x48c4>
   15b6c:	ldr	r3, [r6, #8]
   15b70:	cmp	r3, #0
   15b74:	beq	15b9c <__assert_fail@plt+0x48c4>
   15b78:	mov	r4, #0
   15b7c:	b	15b84 <__assert_fail@plt+0x48ac>
   15b80:	ldr	r0, [r6]
   15b84:	add	r0, r0, r4, lsl #3
   15b88:	bl	15844 <__assert_fail@plt+0x456c>
   15b8c:	ldr	r3, [r6, #8]
   15b90:	add	r4, r4, #1
   15b94:	cmp	r3, r4
   15b98:	bhi	15b80 <__assert_fail@plt+0x48a8>
   15b9c:	ldr	r0, [r6, #12]
   15ba0:	bl	23198 <__assert_fail@plt+0x11ec0>
   15ba4:	ldr	r3, [r6, #8]
   15ba8:	cmp	r3, #0
   15bac:	movne	r4, #0
   15bb0:	movne	r5, r4
   15bb4:	beq	15c14 <__assert_fail@plt+0x493c>
   15bb8:	ldr	r3, [r6, #24]
   15bbc:	add	r5, r5, #1
   15bc0:	cmp	r3, #0
   15bc4:	add	r2, r3, r4
   15bc8:	beq	15bd4 <__assert_fail@plt+0x48fc>
   15bcc:	ldr	r0, [r2, #8]
   15bd0:	bl	23198 <__assert_fail@plt+0x11ec0>
   15bd4:	ldr	r3, [r6, #28]
   15bd8:	cmp	r3, #0
   15bdc:	add	r2, r3, r4
   15be0:	beq	15bec <__assert_fail@plt+0x4914>
   15be4:	ldr	r0, [r2, #8]
   15be8:	bl	23198 <__assert_fail@plt+0x11ec0>
   15bec:	ldr	r3, [r6, #20]
   15bf0:	cmp	r3, #0
   15bf4:	add	r2, r3, r4
   15bf8:	beq	15c04 <__assert_fail@plt+0x492c>
   15bfc:	ldr	r0, [r2, #8]
   15c00:	bl	23198 <__assert_fail@plt+0x11ec0>
   15c04:	ldr	r3, [r6, #8]
   15c08:	add	r4, r4, #12
   15c0c:	cmp	r3, r5
   15c10:	bhi	15bb8 <__assert_fail@plt+0x48e0>
   15c14:	ldr	r0, [r6, #20]
   15c18:	bl	23198 <__assert_fail@plt+0x11ec0>
   15c1c:	ldr	r0, [r6, #24]
   15c20:	bl	23198 <__assert_fail@plt+0x11ec0>
   15c24:	ldr	r0, [r6, #28]
   15c28:	bl	23198 <__assert_fail@plt+0x11ec0>
   15c2c:	ldr	r0, [r6]
   15c30:	bl	23198 <__assert_fail@plt+0x11ec0>
   15c34:	ldr	r0, [r6, #32]
   15c38:	cmp	r0, #0
   15c3c:	beq	15c9c <__assert_fail@plt+0x49c4>
   15c40:	mov	r7, #0
   15c44:	mov	r8, r7
   15c48:	ldr	r3, [r0, r7]
   15c4c:	add	r5, r0, r7
   15c50:	cmp	r3, #0
   15c54:	movgt	r4, #0
   15c58:	ble	15c78 <__assert_fail@plt+0x49a0>
   15c5c:	ldr	r3, [r5, #8]
   15c60:	ldr	r0, [r3, r4, lsl #2]
   15c64:	bl	15acc <__assert_fail@plt+0x47f4>
   15c68:	ldr	r3, [r5]
   15c6c:	add	r4, r4, #1
   15c70:	cmp	r3, r4
   15c74:	bgt	15c5c <__assert_fail@plt+0x4984>
   15c78:	ldr	r0, [r5, #8]
   15c7c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15c80:	ldr	r3, [r6, #68]	; 0x44
   15c84:	add	r8, r8, #1
   15c88:	cmp	r3, r8
   15c8c:	add	r7, r7, #12
   15c90:	ldrcs	r0, [r6, #32]
   15c94:	bcs	15c48 <__assert_fail@plt+0x4970>
   15c98:	ldr	r0, [r6, #32]
   15c9c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15ca0:	ldr	r0, [r6, #60]	; 0x3c
   15ca4:	ldr	r3, [pc, #28]	; 15cc8 <__assert_fail@plt+0x49f0>
   15ca8:	cmp	r0, r3
   15cac:	beq	15cb4 <__assert_fail@plt+0x49dc>
   15cb0:	bl	23198 <__assert_fail@plt+0x11ec0>
   15cb4:	ldr	r0, [r6, #132]	; 0x84
   15cb8:	bl	23198 <__assert_fail@plt+0x11ec0>
   15cbc:	mov	r0, r6
   15cc0:	pop	{r4, r5, r6, r7, r8, lr}
   15cc4:	b	23198 <__assert_fail@plt+0x11ec0>
   15cc8:	andeq	r4, r2, r0, lsr r8
   15ccc:	ldr	r3, [r0, #124]	; 0x7c
   15cd0:	push	{r4, r5, r6, r7, r8, lr}
   15cd4:	cmp	r3, #0
   15cd8:	mov	r8, r0
   15cdc:	movgt	r7, #0
   15ce0:	ble	15d60 <__assert_fail@plt+0x4a88>
   15ce4:	ldr	r3, [r8, #132]	; 0x84
   15ce8:	ldr	r6, [r3, r7, lsl #2]
   15cec:	ldr	r3, [r6, #16]
   15cf0:	cmp	r3, #0
   15cf4:	movgt	r4, #0
   15cf8:	ble	15d24 <__assert_fail@plt+0x4a4c>
   15cfc:	ldr	r3, [r6, #20]
   15d00:	ldr	r5, [r3, r4, lsl #2]
   15d04:	add	r4, r4, #1
   15d08:	ldr	r0, [r5, #16]
   15d0c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15d10:	mov	r0, r5
   15d14:	bl	23198 <__assert_fail@plt+0x11ec0>
   15d18:	ldr	r3, [r6, #16]
   15d1c:	cmp	r3, r4
   15d20:	bgt	15cfc <__assert_fail@plt+0x4a24>
   15d24:	ldr	r0, [r6, #20]
   15d28:	bl	23198 <__assert_fail@plt+0x11ec0>
   15d2c:	ldr	r3, [r6, #8]
   15d30:	cmp	r3, #0
   15d34:	beq	15d48 <__assert_fail@plt+0x4a70>
   15d38:	ldr	r0, [r3, #8]
   15d3c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15d40:	ldr	r0, [r6, #8]
   15d44:	bl	23198 <__assert_fail@plt+0x11ec0>
   15d48:	mov	r0, r6
   15d4c:	bl	23198 <__assert_fail@plt+0x11ec0>
   15d50:	ldr	r3, [r8, #124]	; 0x7c
   15d54:	add	r7, r7, #1
   15d58:	cmp	r3, r7
   15d5c:	bgt	15ce4 <__assert_fail@plt+0x4a0c>
   15d60:	mov	r3, #0
   15d64:	str	r3, [r8, #124]	; 0x7c
   15d68:	str	r3, [r8, #108]	; 0x6c
   15d6c:	pop	{r4, r5, r6, r7, r8, pc}
   15d70:	push	{r4, r5, r6, lr}
   15d74:	subs	r5, r0, #0
   15d78:	beq	15dcc <__assert_fail@plt+0x4af4>
   15d7c:	ldr	r3, [r5]
   15d80:	cmp	r3, #0
   15d84:	movgt	r4, #0
   15d88:	movgt	r6, r4
   15d8c:	ble	15dc4 <__assert_fail@plt+0x4aec>
   15d90:	ldr	r3, [r5, #8]
   15d94:	add	r6, r6, #1
   15d98:	add	r3, r3, r4
   15d9c:	ldr	r0, [r3, #20]
   15da0:	bl	23198 <__assert_fail@plt+0x11ec0>
   15da4:	ldr	r3, [r5, #8]
   15da8:	add	r3, r3, r4
   15dac:	add	r4, r4, #24
   15db0:	ldr	r0, [r3, #8]
   15db4:	bl	23198 <__assert_fail@plt+0x11ec0>
   15db8:	ldr	r3, [r5]
   15dbc:	cmp	r3, r6
   15dc0:	bgt	15d90 <__assert_fail@plt+0x4ab8>
   15dc4:	ldr	r0, [r5, #8]
   15dc8:	bl	23198 <__assert_fail@plt+0x11ec0>
   15dcc:	mov	r0, #0
   15dd0:	pop	{r4, r5, r6, pc}
   15dd4:	ldr	r3, [r0]
   15dd8:	push	{r4, r5, r6, lr}
   15ddc:	cmp	r3, #0
   15de0:	mov	r4, r0
   15de4:	mov	r6, r1
   15de8:	beq	15e14 <__assert_fail@plt+0x4b3c>
   15dec:	ldr	r1, [r0, #4]
   15df0:	cmp	r1, #0
   15df4:	bne	15e44 <__assert_fail@plt+0x4b6c>
   15df8:	ldr	r3, [r0, #8]
   15dfc:	mov	r0, #1
   15e00:	str	r6, [r3]
   15e04:	ldr	r3, [r4, #4]
   15e08:	add	r3, r3, r0
   15e0c:	str	r3, [r4, #4]
   15e10:	pop	{r4, r5, r6, pc}
   15e14:	mov	r5, #1
   15e18:	str	r5, [r0]
   15e1c:	str	r5, [r0, #4]
   15e20:	mov	r0, #4
   15e24:	bl	22fcc <__assert_fail@plt+0x11cf4>
   15e28:	cmp	r0, #0
   15e2c:	str	r0, [r4, #8]
   15e30:	strne	r6, [r0]
   15e34:	streq	r0, [r4, #4]
   15e38:	streq	r0, [r4]
   15e3c:	movne	r0, r5
   15e40:	pop	{r4, r5, r6, pc}
   15e44:	cmp	r3, r1
   15e48:	beq	15ec8 <__assert_fail@plt+0x4bf0>
   15e4c:	ldr	r0, [r0, #8]
   15e50:	ldr	r3, [r0]
   15e54:	cmp	r6, r3
   15e58:	bge	15e94 <__assert_fail@plt+0x4bbc>
   15e5c:	cmp	r1, #0
   15e60:	ble	15e7c <__assert_fail@plt+0x4ba4>
   15e64:	add	r1, r0, r1, lsl #2
   15e68:	ldr	r3, [r1, #-4]
   15e6c:	str	r3, [r1], #-4
   15e70:	cmp	r0, r1
   15e74:	bne	15e68 <__assert_fail@plt+0x4b90>
   15e78:	mov	r1, #0
   15e7c:	str	r6, [r0, r1, lsl #2]
   15e80:	ldr	r3, [r4, #4]
   15e84:	mov	r0, #1
   15e88:	add	r3, r3, r0
   15e8c:	str	r3, [r4, #4]
   15e90:	pop	{r4, r5, r6, pc}
   15e94:	sub	r3, r1, #-1073741823	; 0xc0000001
   15e98:	ldr	r2, [r0, r3, lsl #2]
   15e9c:	lsl	r3, r3, #2
   15ea0:	cmp	r6, r2
   15ea4:	bge	15e7c <__assert_fail@plt+0x4ba4>
   15ea8:	add	r3, r3, #4
   15eac:	add	r3, r0, r3
   15eb0:	str	r2, [r3], #-4
   15eb4:	ldr	r2, [r3, #-4]
   15eb8:	sub	r1, r1, #1
   15ebc:	cmp	r6, r2
   15ec0:	blt	15eb0 <__assert_fail@plt+0x4bd8>
   15ec4:	b	15e7c <__assert_fail@plt+0x4ba4>
   15ec8:	lsl	r3, r1, #1
   15ecc:	str	r3, [r0]
   15ed0:	lsl	r1, r1, #3
   15ed4:	ldr	r0, [r0, #8]
   15ed8:	bl	22ff8 <__assert_fail@plt+0x11d20>
   15edc:	cmp	r0, #0
   15ee0:	popeq	{r4, r5, r6, pc}
   15ee4:	ldr	r1, [r4, #4]
   15ee8:	str	r0, [r4, #8]
   15eec:	b	15e50 <__assert_fail@plt+0x4b78>
   15ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef4:	sub	sp, sp, #20
   15ef8:	ldr	r8, [pc, #680]	; 161a8 <__assert_fail@plt+0x4ed0>
   15efc:	ldr	r7, [sp, #56]	; 0x38
   15f00:	mov	r6, r0
   15f04:	mov	fp, r1
   15f08:	mov	r9, r2
   15f0c:	str	r3, [sp, #12]
   15f10:	ldr	sl, [r6]
   15f14:	add	r3, sl, fp, lsl #3
   15f18:	ldrb	r2, [r3, #4]
   15f1c:	cmp	r2, #4
   15f20:	beq	16110 <__assert_fail@plt+0x4e38>
   15f24:	add	r4, fp, fp, lsl #1
   15f28:	ldr	r0, [r6, #20]
   15f2c:	lsl	r4, r4, #2
   15f30:	add	ip, r0, r4
   15f34:	ldr	r2, [ip, #4]
   15f38:	cmp	r2, #0
   15f3c:	beq	1617c <__assert_fail@plt+0x4ea4>
   15f40:	cmp	r2, #1
   15f44:	beq	16090 <__assert_fail@plt+0x4db8>
   15f48:	ldr	r2, [r6, #8]
   15f4c:	add	r9, r9, r9, lsl #1
   15f50:	sub	r1, r2, #1
   15f54:	cmp	r1, #0
   15f58:	add	r3, sl, r1, lsl #3
   15f5c:	lsl	r5, r9, #2
   15f60:	ldrb	lr, [r3, #6]
   15f64:	ldr	r9, [ip, #8]
   15f68:	add	r0, r0, r5
   15f6c:	movle	ip, #0
   15f70:	movgt	ip, #1
   15f74:	ands	ip, ip, lr, lsr #2
   15f78:	mov	ip, #0
   15f7c:	ldr	r9, [r9]
   15f80:	str	ip, [r0, #4]
   15f84:	beq	16038 <__assert_fail@plt+0x4d60>
   15f88:	ldr	ip, [r6, #16]
   15f8c:	rsb	fp, r3, r2, lsl #3
   15f90:	sub	fp, fp, #16
   15f94:	add	r2, ip, r2, lsl #2
   15f98:	b	15fbc <__assert_fail@plt+0x4ce4>
   15f9c:	add	r3, sl, lr
   15fa0:	sub	r1, r1, #1
   15fa4:	ldrb	lr, [r3, #6]
   15fa8:	cmp	r1, #0
   15fac:	movle	ip, #0
   15fb0:	movgt	ip, #1
   15fb4:	ands	ip, ip, lr, lsr #2
   15fb8:	beq	16038 <__assert_fail@plt+0x4d60>
   15fbc:	ldr	ip, [r2, #-4]!
   15fc0:	add	lr, r3, fp
   15fc4:	cmp	r9, ip
   15fc8:	bne	15f9c <__assert_fail@plt+0x4cc4>
   15fcc:	ldr	r3, [r3, #4]
   15fd0:	and	r3, r8, r3, lsr #8
   15fd4:	cmp	r7, r3
   15fd8:	bne	15f9c <__assert_fail@plt+0x4cc4>
   15fdc:	bl	15dd4 <__assert_fail@plt+0x4afc>
   15fe0:	cmp	r0, #0
   15fe4:	beq	1602c <__assert_fail@plt+0x4d54>
   15fe8:	ldr	r3, [r6, #20]
   15fec:	mov	r2, r7
   15ff0:	add	r4, r3, r4
   15ff4:	mov	r0, r6
   15ff8:	ldr	r3, [r4, #8]
   15ffc:	ldr	fp, [r3, #4]
   16000:	mov	r1, fp
   16004:	bl	15a3c <__assert_fail@plt+0x4764>
   16008:	cmn	r0, #1
   1600c:	mov	r9, r0
   16010:	beq	1602c <__assert_fail@plt+0x4d54>
   16014:	ldr	r0, [r6, #20]
   16018:	mov	r1, r9
   1601c:	add	r0, r0, r5
   16020:	bl	15dd4 <__assert_fail@plt+0x4afc>
   16024:	cmp	r0, #0
   16028:	bne	15f10 <__assert_fail@plt+0x4c38>
   1602c:	mov	r0, #12
   16030:	add	sp, sp, #20
   16034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16038:	mov	r2, r7
   1603c:	mov	r1, r9
   16040:	mov	r0, r6
   16044:	bl	15a3c <__assert_fail@plt+0x4764>
   16048:	cmn	r0, #1
   1604c:	mov	sl, r0
   16050:	beq	1602c <__assert_fail@plt+0x4d54>
   16054:	ldr	r0, [r6, #20]
   16058:	mov	r1, sl
   1605c:	add	r0, r0, r5
   16060:	bl	15dd4 <__assert_fail@plt+0x4afc>
   16064:	cmp	r0, #0
   16068:	beq	1602c <__assert_fail@plt+0x4d54>
   1606c:	str	r7, [sp]
   16070:	mov	r2, sl
   16074:	mov	r1, r9
   16078:	ldr	r3, [sp, #12]
   1607c:	mov	r0, r6
   16080:	bl	15ef0 <__assert_fail@plt+0x4c18>
   16084:	cmp	r0, #0
   16088:	beq	15fe8 <__assert_fail@plt+0x4d10>
   1608c:	b	16030 <__assert_fail@plt+0x4d58>
   16090:	add	r4, r9, r9, lsl #1
   16094:	ldr	r2, [ip, #8]
   16098:	ldr	r1, [sp, #12]
   1609c:	cmp	fp, r9
   160a0:	lsl	r4, r4, #2
   160a4:	sub	r1, fp, r1
   160a8:	add	r0, r0, r4
   160ac:	clz	r1, r1
   160b0:	lsr	r1, r1, #5
   160b4:	moveq	r1, #0
   160b8:	ldr	fp, [r2]
   160bc:	cmp	r1, #0
   160c0:	mov	r2, #0
   160c4:	str	r2, [r0, #4]
   160c8:	bne	16190 <__assert_fail@plt+0x4eb8>
   160cc:	ldr	r3, [r3, #4]
   160d0:	mov	r1, fp
   160d4:	mov	r0, r6
   160d8:	and	r3, r8, r3, lsr #8
   160dc:	orr	r7, r7, r3
   160e0:	mov	r2, r7
   160e4:	bl	15a3c <__assert_fail@plt+0x4764>
   160e8:	cmn	r0, #1
   160ec:	mov	r9, r0
   160f0:	beq	1602c <__assert_fail@plt+0x4d54>
   160f4:	ldr	r0, [r6, #20]
   160f8:	mov	r1, r9
   160fc:	add	r0, r0, r4
   16100:	bl	15dd4 <__assert_fail@plt+0x4afc>
   16104:	cmp	r0, #0
   16108:	bne	15f10 <__assert_fail@plt+0x4c38>
   1610c:	b	1602c <__assert_fail@plt+0x4d54>
   16110:	ldr	r2, [r6, #12]
   16114:	add	r4, r9, r9, lsl #1
   16118:	ldr	r3, [r6, #20]
   1611c:	lsl	r4, r4, #2
   16120:	add	r3, r3, r4
   16124:	lsl	sl, fp, #2
   16128:	ldr	fp, [r2, fp, lsl #2]
   1612c:	mov	r1, #0
   16130:	str	r1, [r3, #4]
   16134:	mov	r2, r7
   16138:	mov	r1, fp
   1613c:	mov	r0, r6
   16140:	bl	15a3c <__assert_fail@plt+0x4764>
   16144:	mov	r5, r9
   16148:	cmn	r0, #1
   1614c:	mov	r9, r0
   16150:	beq	1602c <__assert_fail@plt+0x4d54>
   16154:	ldr	r3, [r6, #12]
   16158:	ldr	r0, [r6, #20]
   1615c:	mov	r1, r9
   16160:	ldr	r2, [r3, sl]
   16164:	add	r0, r0, r4
   16168:	str	r2, [r3, r5, lsl #2]
   1616c:	bl	15dd4 <__assert_fail@plt+0x4afc>
   16170:	cmp	r0, #0
   16174:	bne	15f10 <__assert_fail@plt+0x4c38>
   16178:	b	1602c <__assert_fail@plt+0x4d54>
   1617c:	ldr	r3, [r6, #12]
   16180:	mov	r0, r2
   16184:	ldr	r2, [r3, fp, lsl #2]
   16188:	str	r2, [r3, r9, lsl #2]
   1618c:	b	16030 <__assert_fail@plt+0x4d58>
   16190:	mov	r1, fp
   16194:	bl	15dd4 <__assert_fail@plt+0x4afc>
   16198:	cmp	r0, #0
   1619c:	movne	r0, #0
   161a0:	bne	16030 <__assert_fail@plt+0x4d58>
   161a4:	b	1602c <__assert_fail@plt+0x4d54>
   161a8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   161ac:	ldr	r3, [r0, #36]	; 0x24
   161b0:	push	{r4, r5, r6, lr}
   161b4:	cmp	r3, r1
   161b8:	mov	r4, r0
   161bc:	mov	r5, r1
   161c0:	ldr	r6, [r0, #104]	; 0x68
   161c4:	bgt	16218 <__assert_fail@plt+0x4f40>
   161c8:	ldr	r2, [r0, #48]	; 0x30
   161cc:	cmp	r3, r2
   161d0:	bge	16218 <__assert_fail@plt+0x4f40>
   161d4:	add	r1, r5, #1
   161d8:	mov	r0, r4
   161dc:	bl	156f8 <__assert_fail@plt+0x4420>
   161e0:	cmp	r0, #0
   161e4:	bne	1623c <__assert_fail@plt+0x4f64>
   161e8:	cmp	r6, r5
   161ec:	bge	16234 <__assert_fail@plt+0x4f5c>
   161f0:	sub	r2, r5, r6
   161f4:	ldr	r0, [r4, #100]	; 0x64
   161f8:	add	r6, r6, #1
   161fc:	lsl	r2, r2, #2
   16200:	add	r0, r0, r6, lsl #2
   16204:	mov	r1, #0
   16208:	bl	111f4 <memset@plt>
   1620c:	mov	r0, #0
   16210:	str	r5, [r4, #104]	; 0x68
   16214:	pop	{r4, r5, r6, pc}
   16218:	ldr	r3, [r4, #28]
   1621c:	cmp	r5, r3
   16220:	blt	161e8 <__assert_fail@plt+0x4f10>
   16224:	ldr	r2, [r4, #48]	; 0x30
   16228:	cmp	r3, r2
   1622c:	bge	161e8 <__assert_fail@plt+0x4f10>
   16230:	b	161d4 <__assert_fail@plt+0x4efc>
   16234:	mov	r0, #0
   16238:	pop	{r4, r5, r6, pc}
   1623c:	pop	{r4, r5, r6, pc}
   16240:	push	{r4, r5, r6, r7, r8, lr}
   16244:	subs	r4, r0, #0
   16248:	ldr	r7, [sp, #28]
   1624c:	beq	162e8 <__assert_fail@plt+0x5010>
   16250:	ldr	ip, [r4]
   16254:	cmp	ip, #0
   16258:	beq	162e8 <__assert_fail@plt+0x5010>
   1625c:	sub	ip, ip, #1
   16260:	ldr	lr, [r4, #8]
   16264:	add	r5, ip, ip, lsl #1
   16268:	lsl	r6, r2, #3
   1626c:	lsl	r5, r5, #3
   16270:	add	r2, lr, r5
   16274:	mov	r0, r3
   16278:	mov	r8, r1
   1627c:	ldr	r3, [lr, r5]
   16280:	ldr	r1, [r2, #8]
   16284:	str	ip, [r4]
   16288:	mov	r2, r6
   1628c:	str	r3, [r8]
   16290:	bl	11068 <memcpy@plt>
   16294:	ldr	r3, [r4, #8]
   16298:	mov	r2, r6
   1629c:	add	r3, r3, r5
   162a0:	ldr	r0, [sp, #24]
   162a4:	ldr	r1, [r3, #8]
   162a8:	add	r1, r1, r6
   162ac:	bl	11068 <memcpy@plt>
   162b0:	ldr	r0, [r7, #8]
   162b4:	bl	23198 <__assert_fail@plt+0x11ec0>
   162b8:	ldr	r3, [r4, #8]
   162bc:	add	r3, r3, r5
   162c0:	ldr	r0, [r3, #8]
   162c4:	bl	23198 <__assert_fail@plt+0x11ec0>
   162c8:	ldr	r3, [r4, #8]
   162cc:	add	r5, r3, r5
   162d0:	add	r3, r5, #12
   162d4:	ldr	ip, [r5, #4]
   162d8:	ldm	r3, {r0, r1, r2}
   162dc:	stm	r7, {r0, r1, r2}
   162e0:	mov	r0, ip
   162e4:	pop	{r4, r5, r6, r7, r8, pc}
   162e8:	mvn	ip, #0
   162ec:	b	162e0 <__assert_fail@plt+0x5008>
   162f0:	ldr	r2, [r0, #4]
   162f4:	ldr	r3, [r1, #4]
   162f8:	cmp	r2, r3
   162fc:	beq	16308 <__assert_fail@plt+0x5030>
   16300:	mov	r0, #0
   16304:	bx	lr
   16308:	sub	r2, r2, #1
   1630c:	cmp	r2, #0
   16310:	lsl	r3, r2, #2
   16314:	sub	r2, r2, #1
   16318:	blt	1635c <__assert_fail@plt+0x5084>
   1631c:	push	{lr}		; (str lr, [sp, #-4]!)
   16320:	b	16330 <__assert_fail@plt+0x5058>
   16324:	cmp	r2, #0
   16328:	sub	r2, r2, #1
   1632c:	blt	16354 <__assert_fail@plt+0x507c>
   16330:	ldr	lr, [r0, #8]
   16334:	ldr	ip, [r1, #8]
   16338:	ldr	lr, [lr, r3]
   1633c:	ldr	ip, [ip, r3]
   16340:	sub	r3, r3, #4
   16344:	cmp	lr, ip
   16348:	beq	16324 <__assert_fail@plt+0x504c>
   1634c:	mov	r0, #0
   16350:	pop	{pc}		; (ldr pc, [sp], #4)
   16354:	mov	r0, #1
   16358:	pop	{pc}		; (ldr pc, [sp], #4)
   1635c:	mov	r0, #1
   16360:	bx	lr
   16364:	cmp	r0, #0
   16368:	ble	163ec <__assert_fail@plt+0x5114>
   1636c:	push	{lr}		; (str lr, [sp, #-4]!)
   16370:	sub	ip, r0, #1
   16374:	ldr	lr, [r1]
   16378:	mov	r0, #0
   1637c:	cmp	r0, ip
   16380:	bcs	163bc <__assert_fail@plt+0x50e4>
   16384:	add	r1, r0, ip
   16388:	lsr	r1, r1, #1
   1638c:	ldr	r3, [lr, r1, lsl #2]
   16390:	cmp	r2, r3
   16394:	ble	163ac <__assert_fail@plt+0x50d4>
   16398:	b	163d0 <__assert_fail@plt+0x50f8>
   1639c:	ldr	ip, [lr, r3, lsl #2]
   163a0:	cmp	ip, r2
   163a4:	blt	163d8 <__assert_fail@plt+0x5100>
   163a8:	mov	r1, r3
   163ac:	add	r3, r0, r1
   163b0:	cmp	r0, r1
   163b4:	lsr	r3, r3, #1
   163b8:	bcc	1639c <__assert_fail@plt+0x50c4>
   163bc:	ldr	r3, [lr, r0, lsl #2]
   163c0:	cmp	r2, r3
   163c4:	beq	163e4 <__assert_fail@plt+0x510c>
   163c8:	mov	r0, #0
   163cc:	pop	{pc}		; (ldr pc, [sp], #4)
   163d0:	mov	r3, r1
   163d4:	mov	r1, ip
   163d8:	add	r0, r3, #1
   163dc:	mov	ip, r1
   163e0:	b	1637c <__assert_fail@plt+0x50a4>
   163e4:	add	r0, r0, #1
   163e8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ec:	mov	r0, #0
   163f0:	bx	lr
   163f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   163f8:	sub	sp, sp, #12
   163fc:	mov	r5, r1
   16400:	mov	r6, r0
   16404:	mov	r4, r2
   16408:	mov	r9, r3
   1640c:	add	r8, r1, #8
   16410:	ldr	r7, [sp, #40]	; 0x28
   16414:	b	16420 <__assert_fail@plt+0x5148>
   16418:	ldr	r3, [r3, #8]
   1641c:	ldr	r4, [r3]
   16420:	mov	r1, r8
   16424:	mov	r2, r4
   16428:	ldr	r0, [r5, #4]
   1642c:	bl	16364 <__assert_fail@plt+0x508c>
   16430:	mov	r1, r4
   16434:	cmp	r0, #0
   16438:	mov	r0, r5
   1643c:	bne	164e8 <__assert_fail@plt+0x5210>
   16440:	ldr	r3, [r6]
   16444:	add	r2, r3, r4, lsl #3
   16448:	ldrb	r2, [r2, #4]
   1644c:	cmp	r2, r7
   16450:	bne	16460 <__assert_fail@plt+0x5188>
   16454:	ldr	r3, [r3, r4, lsl #3]
   16458:	cmp	r9, r3
   1645c:	beq	164c0 <__assert_fail@plt+0x51e8>
   16460:	bl	15dd4 <__assert_fail@plt+0x4afc>
   16464:	add	r4, r4, r4, lsl #1
   16468:	lsl	r4, r4, #2
   1646c:	cmp	r0, #0
   16470:	beq	164dc <__assert_fail@plt+0x5204>
   16474:	ldr	r3, [r6, #20]
   16478:	add	r3, r3, r4
   1647c:	ldr	r2, [r3, #4]
   16480:	cmp	r2, #0
   16484:	beq	164e8 <__assert_fail@plt+0x5210>
   16488:	cmp	r2, #2
   1648c:	bne	16418 <__assert_fail@plt+0x5140>
   16490:	ldr	r2, [r3, #8]
   16494:	mov	r1, r5
   16498:	mov	r3, r9
   1649c:	ldr	r2, [r2, #4]
   164a0:	mov	r0, r6
   164a4:	str	r7, [sp]
   164a8:	bl	163f4 <__assert_fail@plt+0x511c>
   164ac:	cmp	r0, #0
   164b0:	bne	164e0 <__assert_fail@plt+0x5208>
   164b4:	ldr	r3, [r6, #20]
   164b8:	add	r3, r3, r4
   164bc:	b	16418 <__assert_fail@plt+0x5140>
   164c0:	cmp	r7, #9
   164c4:	bne	164e8 <__assert_fail@plt+0x5210>
   164c8:	mov	r1, r4
   164cc:	mov	r0, r5
   164d0:	bl	15dd4 <__assert_fail@plt+0x4afc>
   164d4:	cmp	r0, #0
   164d8:	bne	164e8 <__assert_fail@plt+0x5210>
   164dc:	mov	r0, #12
   164e0:	add	sp, sp, #12
   164e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   164e8:	mov	r0, #0
   164ec:	add	sp, sp, #12
   164f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   164f4:	ldr	r3, [r0]
   164f8:	cmp	r2, r3
   164fc:	bxge	lr
   16500:	ldr	r3, [r1]
   16504:	add	r3, r3, r2, lsl #2
   16508:	ldr	r1, [r3, #4]
   1650c:	add	r2, r2, #1
   16510:	str	r1, [r3], #4
   16514:	ldr	r1, [r0]
   16518:	cmp	r2, r1
   1651c:	blt	16508 <__assert_fail@plt+0x5230>
   16520:	bx	lr
   16524:	ldrb	r3, [r1, #24]
   16528:	cmp	r3, #4
   1652c:	beq	16598 <__assert_fail@plt+0x52c0>
   16530:	cmp	r3, #17
   16534:	beq	16540 <__assert_fail@plt+0x5268>
   16538:	mov	r0, #0
   1653c:	bx	lr
   16540:	ldr	r3, [r1, #4]
   16544:	cmp	r3, #0
   16548:	beq	16538 <__assert_fail@plt+0x5260>
   1654c:	ldrb	r2, [r3, #24]
   16550:	cmp	r2, #17
   16554:	bne	16538 <__assert_fail@plt+0x5260>
   16558:	ldr	r2, [r3, #4]
   1655c:	ldr	r3, [r3, #20]
   16560:	cmp	r2, #0
   16564:	str	r2, [r1, #4]
   16568:	strne	r1, [r2]
   1656c:	ldr	r2, [r0, #132]	; 0x84
   16570:	ldr	r1, [r1, #20]
   16574:	cmp	r3, #31
   16578:	ldr	r1, [r2, r1, lsl #2]
   1657c:	str	r1, [r2, r3, lsl #2]
   16580:	ldrle	r2, [r0, #80]	; 0x50
   16584:	movle	r1, #1
   16588:	bicle	r3, r2, r1, lsl r3
   1658c:	strle	r3, [r0, #80]	; 0x50
   16590:	mov	r0, #0
   16594:	bx	lr
   16598:	ldr	r2, [r0, #132]	; 0x84
   1659c:	cmp	r2, #0
   165a0:	beq	16538 <__assert_fail@plt+0x5260>
   165a4:	ldr	r3, [r1, #20]
   165a8:	mov	ip, #1
   165ac:	ldr	r2, [r2, r3, lsl #2]
   165b0:	str	r2, [r1, #20]
   165b4:	ldr	r3, [r0, #80]	; 0x50
   165b8:	orr	r3, r3, ip, lsl r2
   165bc:	str	r3, [r0, #80]	; 0x50
   165c0:	mov	r0, #0
   165c4:	bx	lr
   165c8:	ldrb	r3, [r1, #24]
   165cc:	cmp	r3, #11
   165d0:	beq	16620 <__assert_fail@plt+0x5348>
   165d4:	cmp	r3, #16
   165d8:	beq	16604 <__assert_fail@plt+0x532c>
   165dc:	ldr	r3, [r1, #4]
   165e0:	mov	r0, #0
   165e4:	cmp	r3, #0
   165e8:	ldrne	r2, [r1, #16]
   165ec:	strne	r2, [r3, #16]
   165f0:	ldr	r3, [r1, #8]
   165f4:	cmp	r3, #0
   165f8:	ldrne	r2, [r1, #16]
   165fc:	strne	r2, [r3, #16]
   16600:	bx	lr
   16604:	ldmib	r1, {r2, r3}
   16608:	ldr	r0, [r3, #12]
   1660c:	str	r0, [r2, #16]
   16610:	ldr	r2, [r1, #16]
   16614:	mov	r0, #0
   16618:	str	r2, [r3, #16]
   1661c:	bx	lr
   16620:	ldr	r3, [r1, #4]
   16624:	mov	r0, #0
   16628:	str	r1, [r3, #16]
   1662c:	bx	lr
   16630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16634:	sub	sp, sp, #28
   16638:	ldr	r9, [r0, #108]	; 0x6c
   1663c:	ldr	r6, [sp, #64]	; 0x40
   16640:	ldr	r7, [sp, #72]	; 0x48
   16644:	ldr	lr, [r0, #84]	; 0x54
   16648:	mov	ip, r9
   1664c:	mov	r4, #0
   16650:	str	lr, [sp, #8]
   16654:	cmp	r4, ip
   16658:	bge	166b4 <__assert_fail@plt+0x53dc>
   1665c:	add	lr, r4, ip
   16660:	ldr	r5, [r0, #116]	; 0x74
   16664:	add	lr, lr, lr, lsr #31
   16668:	asr	lr, lr, #1
   1666c:	add	r8, lr, lr, lsl #1
   16670:	add	r8, r5, r8, lsl #3
   16674:	ldr	r8, [r8, #4]
   16678:	cmp	r6, r8
   1667c:	ble	166a4 <__assert_fail@plt+0x53cc>
   16680:	b	16800 <__assert_fail@plt+0x5528>
   16684:	asr	ip, ip, #1
   16688:	mov	sl, ip
   1668c:	add	r8, ip, ip, lsl #1
   16690:	add	r8, r5, r8, lsl #3
   16694:	ldr	r8, [r8, #4]
   16698:	cmp	r8, r6
   1669c:	blt	16808 <__assert_fail@plt+0x5530>
   166a0:	mov	lr, ip
   166a4:	add	ip, r4, lr
   166a8:	cmp	r4, lr
   166ac:	add	ip, ip, ip, lsr #31
   166b0:	blt	16684 <__assert_fail@plt+0x53ac>
   166b4:	cmp	r9, r4
   166b8:	mvnle	r4, #0
   166bc:	ble	166d8 <__assert_fail@plt+0x5400>
   166c0:	add	lr, r4, r4, lsl #1
   166c4:	ldr	ip, [r0, #116]	; 0x74
   166c8:	add	ip, ip, lr, lsl #3
   166cc:	ldr	ip, [ip, #4]
   166d0:	cmp	r6, ip
   166d4:	mvnne	r4, #0
   166d8:	mov	ip, r9
   166dc:	mov	r5, #0
   166e0:	cmp	r5, ip
   166e4:	bge	16740 <__assert_fail@plt+0x5468>
   166e8:	add	lr, r5, ip
   166ec:	ldr	r8, [r0, #116]	; 0x74
   166f0:	add	lr, lr, lr, lsr #31
   166f4:	asr	lr, lr, #1
   166f8:	add	sl, lr, lr, lsl #1
   166fc:	add	sl, r8, sl, lsl #3
   16700:	ldr	sl, [sl, #4]
   16704:	cmp	r7, sl
   16708:	ble	16730 <__assert_fail@plt+0x5458>
   1670c:	b	16814 <__assert_fail@plt+0x553c>
   16710:	asr	ip, ip, #1
   16714:	mov	fp, ip
   16718:	add	sl, ip, ip, lsl #1
   1671c:	add	sl, r8, sl, lsl #3
   16720:	ldr	sl, [sl, #4]
   16724:	cmp	sl, r7
   16728:	blt	1681c <__assert_fail@plt+0x5544>
   1672c:	mov	lr, ip
   16730:	add	ip, r5, lr
   16734:	cmp	r5, lr
   16738:	add	ip, ip, ip, lsr #31
   1673c:	blt	16710 <__assert_fail@plt+0x5438>
   16740:	cmp	r9, r5
   16744:	mvnle	r5, #0
   16748:	ble	16764 <__assert_fail@plt+0x548c>
   1674c:	add	lr, r5, r5, lsl #1
   16750:	ldr	ip, [r0, #116]	; 0x74
   16754:	add	ip, ip, lr, lsl #3
   16758:	ldr	ip, [ip, #4]
   1675c:	cmp	r7, ip
   16760:	mvnne	r5, #0
   16764:	ldr	ip, [r1]
   16768:	cmp	ip, #0
   1676c:	ble	1683c <__assert_fail@plt+0x5564>
   16770:	mov	r9, r2
   16774:	mov	r8, r0
   16778:	mov	fp, #0
   1677c:	str	r3, [sp, #12]
   16780:	str	r1, [sp, #20]
   16784:	str	r4, [sp, #16]
   16788:	ldr	r3, [r9]
   1678c:	ldr	r2, [sp, #8]
   16790:	ldr	lr, [r8, #116]	; 0x74
   16794:	mov	r0, r8
   16798:	ldr	ip, [r2]
   1679c:	ldr	r2, [r3, fp, lsl #2]
   167a0:	ldr	r3, [sp, #12]
   167a4:	mov	r1, r2
   167a8:	add	r2, r2, r2, lsl #1
   167ac:	ldr	r2, [lr, r2, lsl #3]
   167b0:	ldr	r4, [ip, r2, lsl #3]
   167b4:	ldr	r2, [sp, #16]
   167b8:	str	r6, [sp]
   167bc:	str	r2, [sp, #4]
   167c0:	mov	r2, r4
   167c4:	bl	14c10 <__assert_fail@plt+0x3938>
   167c8:	ldr	r1, [r9]
   167cc:	mov	r2, r4
   167d0:	ldr	r3, [sp, #68]	; 0x44
   167d4:	ldr	r1, [r1, fp, lsl #2]
   167d8:	str	r5, [sp, #4]
   167dc:	str	r7, [sp]
   167e0:	mov	sl, r0
   167e4:	mov	r0, r8
   167e8:	bl	14c10 <__assert_fail@plt+0x3938>
   167ec:	cmp	sl, r0
   167f0:	beq	16828 <__assert_fail@plt+0x5550>
   167f4:	mov	r0, #1
   167f8:	add	sp, sp, #28
   167fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16800:	mov	sl, lr
   16804:	mov	lr, ip
   16808:	add	r4, sl, #1
   1680c:	mov	ip, lr
   16810:	b	16654 <__assert_fail@plt+0x537c>
   16814:	mov	fp, lr
   16818:	mov	lr, ip
   1681c:	add	r5, fp, #1
   16820:	mov	ip, lr
   16824:	b	166e0 <__assert_fail@plt+0x5408>
   16828:	ldr	r3, [sp, #20]
   1682c:	add	fp, fp, #1
   16830:	ldr	r3, [r3]
   16834:	cmp	fp, r3
   16838:	blt	16788 <__assert_fail@plt+0x54b0>
   1683c:	mov	r0, #0
   16840:	b	167f8 <__assert_fail@plt+0x5520>
   16844:	ldr	ip, [r1, #4]
   16848:	cmp	ip, #0
   1684c:	beq	1697c <__assert_fail@plt+0x56a4>
   16850:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16854:	ldr	lr, [r2, #4]
   16858:	cmp	lr, #0
   1685c:	beq	16958 <__assert_fail@plt+0x5680>
   16860:	ldr	r3, [r0, #4]
   16864:	mov	r9, r2
   16868:	ldr	r4, [r0]
   1686c:	add	r2, ip, lr
   16870:	mov	r8, r1
   16874:	add	r1, r2, r3
   16878:	cmp	r1, r4
   1687c:	mov	r7, r0
   16880:	bgt	169c0 <__assert_fail@plt+0x56e8>
   16884:	ldr	r0, [r0, #8]
   16888:	ldr	sl, [r8, #8]
   1688c:	ldr	r2, [r9, #8]
   16890:	sub	r5, ip, #1
   16894:	sub	r6, lr, #1
   16898:	add	r1, r3, ip
   1689c:	ldr	r4, [r2, r6, lsl #2]
   168a0:	ldr	ip, [sl, r5, lsl #2]
   168a4:	add	r1, r1, lr
   168a8:	sub	r3, r3, #1
   168ac:	cmp	ip, r4
   168b0:	beq	168cc <__assert_fail@plt+0x55f4>
   168b4:	bge	16960 <__assert_fail@plt+0x5688>
   168b8:	subs	r6, r6, #1
   168bc:	bmi	16918 <__assert_fail@plt+0x5640>
   168c0:	ldr	r4, [r2, r6, lsl #2]
   168c4:	cmp	ip, r4
   168c8:	bne	168b4 <__assert_fail@plt+0x55dc>
   168cc:	cmp	r3, #0
   168d0:	blt	168fc <__assert_fail@plt+0x5624>
   168d4:	ldr	lr, [r0, r3, lsl #2]
   168d8:	add	ip, r0, r3, lsl #2
   168dc:	cmp	lr, r4
   168e0:	bgt	168f4 <__assert_fail@plt+0x561c>
   168e4:	b	16970 <__assert_fail@plt+0x5698>
   168e8:	ldr	lr, [ip, #-4]!
   168ec:	cmp	lr, r4
   168f0:	ble	16970 <__assert_fail@plt+0x5698>
   168f4:	subs	r3, r3, #1
   168f8:	bcs	168e8 <__assert_fail@plt+0x5610>
   168fc:	sub	r1, r1, #1
   16900:	str	r4, [r0, r1, lsl #2]
   16904:	subs	r5, r5, #1
   16908:	bmi	16918 <__assert_fail@plt+0x5640>
   1690c:	subs	r6, r6, #1
   16910:	ldrpl	ip, [sl, r5, lsl #2]
   16914:	bpl	168c0 <__assert_fail@plt+0x55e8>
   16918:	ldr	lr, [r7, #4]
   1691c:	ldr	ip, [r8, #4]
   16920:	ldr	r3, [r9, #4]
   16924:	add	ip, lr, ip
   16928:	add	ip, ip, r3
   1692c:	sub	r2, ip, r1
   16930:	sub	r3, lr, #1
   16934:	cmp	r3, #0
   16938:	cmpge	r2, #0
   1693c:	add	lr, lr, r2
   16940:	sub	ip, ip, #1
   16944:	str	lr, [r7, #4]
   16948:	bgt	16994 <__assert_fail@plt+0x56bc>
   1694c:	lsl	r2, r2, #2
   16950:	add	r1, r0, r1, lsl #2
   16954:	bl	11068 <memcpy@plt>
   16958:	mov	r0, #0
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16960:	subs	r5, r5, #1
   16964:	bmi	16918 <__assert_fail@plt+0x5640>
   16968:	ldr	ip, [sl, r5, lsl #2]
   1696c:	b	168ac <__assert_fail@plt+0x55d4>
   16970:	cmp	lr, r4
   16974:	bne	168fc <__assert_fail@plt+0x5624>
   16978:	b	16904 <__assert_fail@plt+0x562c>
   1697c:	mov	r0, ip
   16980:	bx	lr
   16984:	sub	r3, r3, #1
   16988:	cmn	r3, #1
   1698c:	str	lr, [r0, r6, lsl #2]
   16990:	beq	1694c <__assert_fail@plt+0x5674>
   16994:	ldr	r4, [r0, ip, lsl #2]
   16998:	ldr	lr, [r0, r3, lsl #2]
   1699c:	add	r6, r3, r2
   169a0:	cmp	r4, lr
   169a4:	mov	r5, r6
   169a8:	ble	16984 <__assert_fail@plt+0x56ac>
   169ac:	subs	r2, r2, #1
   169b0:	sub	ip, ip, #1
   169b4:	str	r4, [r0, r6, lsl #2]
   169b8:	bne	16994 <__assert_fail@plt+0x56bc>
   169bc:	b	16950 <__assert_fail@plt+0x5678>
   169c0:	add	r4, r2, r4
   169c4:	ldr	r0, [r0, #8]
   169c8:	lsl	r1, r4, #2
   169cc:	bl	22ff8 <__assert_fail@plt+0x11d20>
   169d0:	cmp	r0, #0
   169d4:	beq	169f0 <__assert_fail@plt+0x5718>
   169d8:	ldr	ip, [r8, #4]
   169dc:	ldr	lr, [r9, #4]
   169e0:	ldr	r3, [r7, #4]
   169e4:	str	r0, [r7, #8]
   169e8:	str	r4, [r7]
   169ec:	b	16888 <__assert_fail@plt+0x55b0>
   169f0:	mov	r0, #12
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169f8:	push	{r4, r5, r6, lr}
   169fc:	mov	r5, r0
   16a00:	ldr	r0, [r1]
   16a04:	sub	sp, sp, #16
   16a08:	cmp	r0, #31
   16a0c:	beq	16a80 <__assert_fail@plt+0x57a8>
   16a10:	lsl	ip, r0, #5
   16a14:	ldr	r4, [r5]
   16a18:	add	r0, r0, #1
   16a1c:	add	r6, ip, #4
   16a20:	str	r0, [r1]
   16a24:	ldr	r1, [sp, #32]
   16a28:	add	ip, r4, ip
   16a2c:	mov	r5, #0
   16a30:	str	r2, [ip, #8]
   16a34:	str	r3, [ip, #12]
   16a38:	str	r5, [ip, #4]
   16a3c:	ldm	r1, {r0, r1}
   16a40:	add	lr, ip, #24
   16a44:	cmp	r2, r5
   16a48:	stm	lr, {r0, r1}
   16a4c:	ldrb	r1, [ip, #30]
   16a50:	mvn	lr, #0
   16a54:	add	r0, r4, r6
   16a58:	and	r1, r1, #243	; 0xf3
   16a5c:	str	r5, [ip, #16]
   16a60:	str	r5, [ip, #20]
   16a64:	strb	r1, [ip, #30]
   16a68:	str	lr, [ip, #32]
   16a6c:	strne	r0, [r2]
   16a70:	cmp	r3, #0
   16a74:	strne	r0, [r3]
   16a78:	add	sp, sp, #16
   16a7c:	pop	{r4, r5, r6, pc}
   16a80:	mov	r0, #996	; 0x3e4
   16a84:	stmib	sp, {r1, r2, r3}
   16a88:	bl	22fcc <__assert_fail@plt+0x11cf4>
   16a8c:	subs	r4, r0, #0
   16a90:	beq	16ab4 <__assert_fail@plt+0x57dc>
   16a94:	ldr	ip, [r5]
   16a98:	mov	r6, #4
   16a9c:	str	ip, [r4]
   16aa0:	mov	r0, #1
   16aa4:	mov	ip, #0
   16aa8:	str	r4, [r5]
   16aac:	ldmib	sp, {r1, r2, r3}
   16ab0:	b	16a20 <__assert_fail@plt+0x5748>
   16ab4:	mov	r0, r4
   16ab8:	b	16a78 <__assert_fail@plt+0x57a0>
   16abc:	push	{r4, r5, r6, r7, r8, r9, lr}
   16ac0:	sub	sp, sp, #20
   16ac4:	mov	r4, r0
   16ac8:	ldr	r5, [r0]
   16acc:	add	r8, r1, #56	; 0x38
   16ad0:	add	r6, r1, #64	; 0x40
   16ad4:	add	r9, sp, #12
   16ad8:	mov	r7, #0
   16adc:	b	16ae8 <__assert_fail@plt+0x5810>
   16ae0:	mov	r4, r3
   16ae4:	add	r9, r5, #4
   16ae8:	add	r3, r4, #20
   16aec:	str	r3, [sp]
   16af0:	mov	r2, #0
   16af4:	mov	r3, r7
   16af8:	mov	r1, r6
   16afc:	mov	r0, r8
   16b00:	bl	169f8 <__assert_fail@plt+0x5720>
   16b04:	cmp	r0, #0
   16b08:	str	r0, [r9]
   16b0c:	beq	16b70 <__assert_fail@plt+0x5898>
   16b10:	str	r5, [r0]
   16b14:	ldr	r5, [r9]
   16b18:	ldrb	r3, [r5, #26]
   16b1c:	orr	r3, r3, #4
   16b20:	strb	r3, [r5, #26]
   16b24:	ldr	r3, [r4, #4]
   16b28:	cmp	r3, #0
   16b2c:	bne	16ae0 <__assert_fail@plt+0x5808>
   16b30:	mov	r2, r7
   16b34:	b	16b50 <__assert_fail@plt+0x5878>
   16b38:	ldr	r3, [r4]
   16b3c:	mov	r2, r4
   16b40:	cmp	r3, #0
   16b44:	ldr	r5, [r5]
   16b48:	mov	r4, r3
   16b4c:	beq	16b6c <__assert_fail@plt+0x5894>
   16b50:	ldr	r3, [r4, #8]
   16b54:	cmp	r3, #0
   16b58:	cmpne	r2, r3
   16b5c:	beq	16b38 <__assert_fail@plt+0x5860>
   16b60:	mov	r4, r3
   16b64:	add	r9, r5, #8
   16b68:	b	16ae8 <__assert_fail@plt+0x5810>
   16b6c:	ldr	r0, [sp, #12]
   16b70:	add	sp, sp, #20
   16b74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b78:	ldrb	r3, [r1, #28]
   16b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b80:	sub	sp, sp, #28
   16b84:	ands	r9, r3, #16
   16b88:	mov	r7, r2
   16b8c:	str	r0, [sp, #12]
   16b90:	ldr	r4, [r1]
   16b94:	ldr	r5, [r2, #4]
   16b98:	beq	16ce0 <__assert_fail@plt+0x5a08>
   16b9c:	cmp	r5, #0
   16ba0:	beq	16d70 <__assert_fail@plt+0x5a98>
   16ba4:	ldr	r3, [r2, #20]
   16ba8:	cmp	r3, #31
   16bac:	bgt	16cd4 <__assert_fail@plt+0x59fc>
   16bb0:	ldr	r2, [r4, #80]	; 0x50
   16bb4:	lsr	r3, r2, r3
   16bb8:	tst	r3, #1
   16bbc:	beq	16cd4 <__assert_fail@plt+0x59fc>
   16bc0:	add	r6, sp, #16
   16bc4:	mov	r9, #0
   16bc8:	add	sl, r4, #56	; 0x38
   16bcc:	add	r4, r4, #64	; 0x40
   16bd0:	mov	r3, r9
   16bd4:	mov	r2, r9
   16bd8:	mov	ip, #8
   16bdc:	str	r6, [sp]
   16be0:	mov	r1, r4
   16be4:	str	r9, [r6, #4]
   16be8:	mov	r0, sl
   16bec:	str	r9, [sp, #16]
   16bf0:	strb	ip, [sp, #20]
   16bf4:	bl	169f8 <__assert_fail@plt+0x5720>
   16bf8:	str	r6, [sp]
   16bfc:	mov	r3, r9
   16c00:	str	r9, [r6, #4]
   16c04:	mov	r2, r9
   16c08:	mov	ip, #9
   16c0c:	mov	r1, r4
   16c10:	str	r9, [sp, #16]
   16c14:	strb	ip, [sp, #20]
   16c18:	mov	r8, r0
   16c1c:	mov	r0, sl
   16c20:	bl	169f8 <__assert_fail@plt+0x5720>
   16c24:	mov	r9, r0
   16c28:	mov	r0, #0
   16c2c:	str	r6, [sp]
   16c30:	mov	ip, #16
   16c34:	str	r0, [r6, #4]
   16c38:	str	r0, [sp, #16]
   16c3c:	mov	r2, r5
   16c40:	mov	r3, r9
   16c44:	mov	r1, r4
   16c48:	mov	r0, sl
   16c4c:	strb	ip, [sp, #20]
   16c50:	bl	169f8 <__assert_fail@plt+0x5720>
   16c54:	mov	fp, r0
   16c58:	mov	r2, #0
   16c5c:	str	r6, [sp]
   16c60:	mov	ip, #16
   16c64:	str	r2, [r6, #4]
   16c68:	str	r2, [sp, #16]
   16c6c:	mov	r1, r4
   16c70:	mov	r0, sl
   16c74:	mov	r3, fp
   16c78:	mov	r2, r8
   16c7c:	strb	ip, [sp, #20]
   16c80:	bl	169f8 <__assert_fail@plt+0x5720>
   16c84:	cmp	fp, #0
   16c88:	cmpne	r0, #0
   16c8c:	mov	r5, r0
   16c90:	beq	16d54 <__assert_fail@plt+0x5a7c>
   16c94:	cmp	r9, #0
   16c98:	cmpne	r8, #0
   16c9c:	beq	16d54 <__assert_fail@plt+0x5a7c>
   16ca0:	ldr	r3, [r7, #20]
   16ca4:	str	r3, [r9, #20]
   16ca8:	str	r3, [r8, #20]
   16cac:	ldrb	r3, [r7, #26]
   16cb0:	ldrb	r2, [r9, #26]
   16cb4:	and	r3, r3, #8
   16cb8:	bic	r2, r2, #8
   16cbc:	orr	r2, r3, r2
   16cc0:	strb	r2, [r9, #26]
   16cc4:	ldrb	r2, [r8, #26]
   16cc8:	bic	r2, r2, #8
   16ccc:	orr	r3, r3, r2
   16cd0:	strb	r3, [r8, #26]
   16cd4:	mov	r0, r5
   16cd8:	add	sp, sp, #28
   16cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ce0:	add	r6, sp, #16
   16ce4:	add	sl, r4, #56	; 0x38
   16ce8:	add	r4, r4, #64	; 0x40
   16cec:	mov	ip, #8
   16cf0:	mov	r3, r9
   16cf4:	mov	r2, r9
   16cf8:	str	r6, [sp]
   16cfc:	mov	r1, r4
   16d00:	str	r9, [r6, #4]
   16d04:	mov	r0, sl
   16d08:	str	r9, [sp, #16]
   16d0c:	strb	ip, [sp, #20]
   16d10:	bl	169f8 <__assert_fail@plt+0x5720>
   16d14:	str	r6, [sp]
   16d18:	mov	ip, #9
   16d1c:	str	r9, [r6, #4]
   16d20:	mov	r3, r9
   16d24:	mov	r2, r9
   16d28:	mov	r1, r4
   16d2c:	str	r9, [sp, #16]
   16d30:	strb	ip, [sp, #20]
   16d34:	mov	r8, r0
   16d38:	mov	r0, sl
   16d3c:	bl	169f8 <__assert_fail@plt+0x5720>
   16d40:	cmp	r5, #0
   16d44:	mov	r9, r0
   16d48:	moveq	fp, r0
   16d4c:	bne	16c28 <__assert_fail@plt+0x5950>
   16d50:	b	16c58 <__assert_fail@plt+0x5980>
   16d54:	ldr	r2, [sp, #12]
   16d58:	mov	r3, #12
   16d5c:	mov	r5, #0
   16d60:	mov	r0, r5
   16d64:	str	r3, [r2]
   16d68:	add	sp, sp, #28
   16d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d70:	add	r6, sp, #16
   16d74:	add	sl, r4, #56	; 0x38
   16d78:	add	r4, r4, #64	; 0x40
   16d7c:	mov	ip, #8
   16d80:	str	r6, [sp]
   16d84:	mov	r1, r4
   16d88:	mov	r3, r5
   16d8c:	mov	r2, r5
   16d90:	str	r5, [r6, #4]
   16d94:	mov	r0, sl
   16d98:	strb	ip, [sp, #20]
   16d9c:	str	r5, [sp, #16]
   16da0:	bl	169f8 <__assert_fail@plt+0x5720>
   16da4:	str	r6, [sp]
   16da8:	mov	ip, #9
   16dac:	str	r5, [r6, #4]
   16db0:	mov	r1, r4
   16db4:	mov	r3, r5
   16db8:	mov	r2, r5
   16dbc:	str	r5, [sp, #16]
   16dc0:	strb	ip, [sp, #20]
   16dc4:	mov	r8, r0
   16dc8:	mov	r0, sl
   16dcc:	bl	169f8 <__assert_fail@plt+0x5720>
   16dd0:	mov	fp, r0
   16dd4:	mov	r9, r0
   16dd8:	b	16c58 <__assert_fail@plt+0x5980>
   16ddc:	ldr	r2, [r1, #4]
   16de0:	push	{r4, r5, lr}
   16de4:	mov	r3, #0
   16de8:	sub	sp, sp, #12
   16dec:	cmp	r2, r3
   16df0:	mov	r4, r1
   16df4:	mov	r5, r0
   16df8:	str	r3, [sp, #4]
   16dfc:	beq	16e0c <__assert_fail@plt+0x5b34>
   16e00:	ldrb	r3, [r2, #24]
   16e04:	cmp	r3, #17
   16e08:	beq	16e54 <__assert_fail@plt+0x5b7c>
   16e0c:	ldr	r2, [r4, #8]
   16e10:	cmp	r2, #0
   16e14:	beq	16e24 <__assert_fail@plt+0x5b4c>
   16e18:	ldrb	r3, [r2, #24]
   16e1c:	cmp	r3, #17
   16e20:	beq	16e30 <__assert_fail@plt+0x5b58>
   16e24:	ldr	r0, [sp, #4]
   16e28:	add	sp, sp, #12
   16e2c:	pop	{r4, r5, pc}
   16e30:	mov	r1, r5
   16e34:	add	r0, sp, #4
   16e38:	bl	16b78 <__assert_fail@plt+0x58a0>
   16e3c:	cmp	r0, #0
   16e40:	str	r0, [r4, #8]
   16e44:	strne	r4, [r0]
   16e48:	ldr	r0, [sp, #4]
   16e4c:	add	sp, sp, #12
   16e50:	pop	{r4, r5, pc}
   16e54:	mov	r1, r0
   16e58:	add	r0, sp, #4
   16e5c:	bl	16b78 <__assert_fail@plt+0x58a0>
   16e60:	cmp	r0, #0
   16e64:	str	r0, [r4, #4]
   16e68:	strne	r4, [r0]
   16e6c:	b	16e0c <__assert_fail@plt+0x5b34>
   16e70:	push	{r4, r5, r6, lr}
   16e74:	mov	r4, r0
   16e78:	ldr	r0, [r1, #4]
   16e7c:	str	r0, [r4, #4]
   16e80:	ldr	r2, [r1, #4]
   16e84:	cmp	r2, #0
   16e88:	ble	16ec0 <__assert_fail@plt+0x5be8>
   16e8c:	str	r0, [r4]
   16e90:	lsl	r0, r0, #2
   16e94:	mov	r5, r1
   16e98:	bl	22fcc <__assert_fail@plt+0x11cf4>
   16e9c:	cmp	r0, #0
   16ea0:	str	r0, [r4, #8]
   16ea4:	beq	16ed8 <__assert_fail@plt+0x5c00>
   16ea8:	ldr	r2, [r5, #4]
   16eac:	ldr	r1, [r5, #8]
   16eb0:	lsl	r2, r2, #2
   16eb4:	bl	11068 <memcpy@plt>
   16eb8:	mov	r0, #0
   16ebc:	pop	{r4, r5, r6, pc}
   16ec0:	mov	r2, #0
   16ec4:	mov	r0, r2
   16ec8:	str	r2, [r4]
   16ecc:	str	r2, [r4, #4]
   16ed0:	str	r2, [r4, #8]
   16ed4:	pop	{r4, r5, r6, pc}
   16ed8:	str	r0, [r4, #4]
   16edc:	str	r0, [r4]
   16ee0:	mov	r0, #12
   16ee4:	pop	{r4, r5, r6, pc}
   16ee8:	cmp	r1, #0
   16eec:	beq	16fb8 <__assert_fail@plt+0x5ce0>
   16ef0:	ldr	r3, [r1, #4]
   16ef4:	cmp	r2, #0
   16ef8:	cmpne	r3, #0
   16efc:	ble	16fb0 <__assert_fail@plt+0x5cd8>
   16f00:	ldr	ip, [r2, #4]
   16f04:	cmp	ip, #0
   16f08:	ble	16fd0 <__assert_fail@plt+0x5cf8>
   16f0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f10:	mov	r8, r0
   16f14:	add	r0, r3, ip
   16f18:	str	r0, [r8]
   16f1c:	lsl	r0, r0, #2
   16f20:	mov	r5, r2
   16f24:	mov	r7, r1
   16f28:	bl	22fcc <__assert_fail@plt+0x11cf4>
   16f2c:	cmp	r0, #0
   16f30:	str	r0, [r8, #8]
   16f34:	beq	1702c <__assert_fail@plt+0x5d54>
   16f38:	mov	r3, #0
   16f3c:	mov	ip, r3
   16f40:	ldr	r9, [r7, #4]
   16f44:	ldr	sl, [r5, #4]
   16f48:	mov	r4, r0
   16f4c:	mov	lr, #1
   16f50:	b	16f90 <__assert_fail@plt+0x5cb8>
   16f54:	cmp	r3, sl
   16f58:	bge	16fec <__assert_fail@plt+0x5d14>
   16f5c:	ldr	r2, [r7, #8]
   16f60:	ldr	r1, [r5, #8]
   16f64:	ldr	r2, [r2, ip, lsl #2]
   16f68:	ldr	r6, [r1, r3, lsl #2]
   16f6c:	cmp	r2, r6
   16f70:	addgt	r3, r3, #1
   16f74:	strgt	r6, [r4]
   16f78:	bgt	16f88 <__assert_fail@plt+0x5cb0>
   16f7c:	add	ip, ip, #1
   16f80:	addeq	r3, r3, #1
   16f84:	str	r2, [r4]
   16f88:	add	lr, lr, #1
   16f8c:	add	r4, r4, #4
   16f90:	cmp	ip, r9
   16f94:	sub	r6, lr, #1
   16f98:	blt	16f54 <__assert_fail@plt+0x5c7c>
   16f9c:	cmp	r3, sl
   16fa0:	blt	1700c <__assert_fail@plt+0x5d34>
   16fa4:	str	r6, [r8, #4]
   16fa8:	mov	r0, #0
   16fac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fb0:	cmp	r3, #0
   16fb4:	bgt	16fd0 <__assert_fail@plt+0x5cf8>
   16fb8:	cmp	r2, #0
   16fbc:	beq	16fd4 <__assert_fail@plt+0x5cfc>
   16fc0:	ldr	r3, [r2, #4]
   16fc4:	cmp	r3, #0
   16fc8:	ble	16fd4 <__assert_fail@plt+0x5cfc>
   16fcc:	mov	r1, r2
   16fd0:	b	16e70 <__assert_fail@plt+0x5b98>
   16fd4:	mov	r3, #0
   16fd8:	str	r3, [r0]
   16fdc:	str	r3, [r0, #4]
   16fe0:	str	r3, [r0, #8]
   16fe4:	mov	r0, r3
   16fe8:	bx	lr
   16fec:	sub	r9, r9, ip
   16ff0:	ldr	r1, [r7, #8]
   16ff4:	add	r0, r0, r6, lsl #2
   16ff8:	add	r1, r1, ip, lsl #2
   16ffc:	lsl	r2, r9, #2
   17000:	add	r6, r6, r9
   17004:	bl	11068 <memcpy@plt>
   17008:	b	16fa4 <__assert_fail@plt+0x5ccc>
   1700c:	sub	sl, sl, r3
   17010:	ldr	r1, [r5, #8]
   17014:	add	r0, r0, r6, lsl #2
   17018:	add	r1, r1, r3, lsl #2
   1701c:	lsl	r2, sl, #2
   17020:	bl	11068 <memcpy@plt>
   17024:	add	r6, r6, sl
   17028:	b	16fa4 <__assert_fail@plt+0x5ccc>
   1702c:	mov	r0, #12
   17030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17038:	mov	ip, #0
   1703c:	ldr	r4, [r2, #4]
   17040:	sub	sp, sp, #36	; 0x24
   17044:	cmp	r4, ip
   17048:	str	ip, [r0]
   1704c:	beq	170fc <__assert_fail@plt+0x5e24>
   17050:	add	r7, r3, r4
   17054:	ble	17070 <__assert_fail@plt+0x5d98>
   17058:	ldr	ip, [r2, #8]
   1705c:	add	r4, ip, r4, lsl #2
   17060:	ldr	lr, [ip], #4
   17064:	cmp	r4, ip
   17068:	add	r7, r7, lr
   1706c:	bne	17060 <__assert_fail@plt+0x5d88>
   17070:	mov	fp, r3
   17074:	ldr	r3, [r1, #68]	; 0x44
   17078:	mov	r8, r2
   1707c:	and	r3, r3, r7
   17080:	ldr	r2, [r1, #32]
   17084:	add	r3, r3, r3, lsl #1
   17088:	mov	r9, r1
   1708c:	lsl	r3, r3, #2
   17090:	str	r0, [sp, #24]
   17094:	ldr	sl, [r2, r3]
   17098:	add	r1, r2, r3
   1709c:	cmp	sl, #0
   170a0:	ble	17108 <__assert_fail@plt+0x5e30>
   170a4:	ldr	r6, [r1, #8]
   170a8:	mov	r5, #0
   170ac:	sub	r6, r6, #4
   170b0:	b	170bc <__assert_fail@plt+0x5de4>
   170b4:	cmp	r5, sl
   170b8:	beq	17108 <__assert_fail@plt+0x5e30>
   170bc:	ldr	r4, [r6, #4]!
   170c0:	add	r5, r5, #1
   170c4:	ldr	r3, [r4]
   170c8:	cmp	r3, r7
   170cc:	bne	170b4 <__assert_fail@plt+0x5ddc>
   170d0:	ldrb	r3, [r4, #52]	; 0x34
   170d4:	and	r3, r3, #15
   170d8:	cmp	fp, r3
   170dc:	bne	170b4 <__assert_fail@plt+0x5ddc>
   170e0:	ldr	r3, [r4, #40]	; 0x28
   170e4:	mov	r1, r8
   170e8:	subs	r0, r3, #0
   170ec:	beq	170b4 <__assert_fail@plt+0x5ddc>
   170f0:	bl	162f0 <__assert_fail@plt+0x5018>
   170f4:	cmp	r0, #0
   170f8:	beq	170b4 <__assert_fail@plt+0x5ddc>
   170fc:	mov	r0, r4
   17100:	add	sp, sp, #36	; 0x24
   17104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17108:	mov	r1, #1
   1710c:	mov	r0, #56	; 0x38
   17110:	bl	22f84 <__assert_fail@plt+0x11cac>
   17114:	subs	r4, r0, #0
   17118:	beq	172d8 <__assert_fail@plt+0x6000>
   1711c:	add	r3, r4, #4
   17120:	mov	r0, r3
   17124:	mov	r1, r8
   17128:	str	r3, [sp, #4]
   1712c:	bl	16e70 <__assert_fail@plt+0x5b98>
   17130:	ldr	r3, [sp, #4]
   17134:	subs	sl, r0, #0
   17138:	bne	17350 <__assert_fail@plt+0x6078>
   1713c:	ldrb	r1, [r4, #52]	; 0x34
   17140:	ldr	ip, [r8, #4]
   17144:	and	r2, fp, #15
   17148:	bic	r1, r1, #15
   1714c:	orr	r2, r2, r1
   17150:	cmp	ip, #0
   17154:	str	r3, [r4, #40]	; 0x28
   17158:	strb	r2, [r4, #52]	; 0x34
   1715c:	ble	172b8 <__assert_fail@plt+0x5fe0>
   17160:	add	r2, r4, #12
   17164:	str	r2, [sp, #12]
   17168:	add	r2, r4, #8
   1716c:	str	r2, [sp, #16]
   17170:	and	r2, fp, #4
   17174:	str	r2, [sp, #8]
   17178:	and	r2, fp, #2
   1717c:	and	fp, fp, #1
   17180:	str	r7, [sp, #20]
   17184:	ldr	r6, [pc, #464]	; 1735c <__assert_fail@plt+0x6084>
   17188:	mov	r7, fp
   1718c:	mov	r5, sl
   17190:	str	r2, [sp, #4]
   17194:	mov	fp, r3
   17198:	b	171e4 <__assert_fail@plt+0x5f0c>
   1719c:	cmp	r7, #0
   171a0:	beq	1728c <__assert_fail@plt+0x5fb4>
   171a4:	tst	r2, #2
   171a8:	bne	1728c <__assert_fail@plt+0x5fb4>
   171ac:	tst	r2, #16
   171b0:	beq	171c0 <__assert_fail@plt+0x5ee8>
   171b4:	ldr	r3, [sp, #4]
   171b8:	cmp	r3, #0
   171bc:	beq	1728c <__assert_fail@plt+0x5fb4>
   171c0:	tst	r2, #64	; 0x40
   171c4:	beq	171d4 <__assert_fail@plt+0x5efc>
   171c8:	ldr	r3, [sp, #8]
   171cc:	cmp	r3, #0
   171d0:	beq	1728c <__assert_fail@plt+0x5fb4>
   171d4:	ldr	ip, [r8, #4]
   171d8:	add	r5, r5, #1
   171dc:	cmp	r5, ip
   171e0:	bge	172b4 <__assert_fail@plt+0x5fdc>
   171e4:	ldr	r2, [r8, #8]
   171e8:	ldr	r1, [r9]
   171ec:	ldr	r2, [r2, r5, lsl #2]
   171f0:	add	r1, r1, r2, lsl #3
   171f4:	ldr	r2, [r1, #4]
   171f8:	ldrb	r0, [r1, #4]
   171fc:	ands	r2, r6, r2, lsr #8
   17200:	moveq	lr, #1
   17204:	movne	lr, #0
   17208:	cmp	r0, #1
   1720c:	movne	lr, #0
   17210:	andeq	lr, lr, #1
   17214:	cmp	lr, #0
   17218:	bne	171d8 <__assert_fail@plt+0x5f00>
   1721c:	ldrb	r1, [r1, #6]
   17220:	ldrb	lr, [r4, #52]	; 0x34
   17224:	cmp	r0, #2
   17228:	lsr	r1, r1, #4
   1722c:	orr	r1, r1, lr, lsr #5
   17230:	and	r1, r1, #1
   17234:	bic	lr, lr, #32
   17238:	orr	r1, lr, r1, lsl #5
   1723c:	strb	r1, [r4, #52]	; 0x34
   17240:	uxtbeq	r1, r1
   17244:	orreq	r1, r1, #16
   17248:	strbeq	r1, [r4, #52]	; 0x34
   1724c:	beq	17260 <__assert_fail@plt+0x5f88>
   17250:	cmp	r0, #4
   17254:	ldrbeq	r1, [r4, #52]	; 0x34
   17258:	orreq	r1, r1, #64	; 0x40
   1725c:	strbeq	r1, [r4, #52]	; 0x34
   17260:	cmp	r2, #0
   17264:	beq	171d8 <__assert_fail@plt+0x5f00>
   17268:	ldr	r1, [r4, #40]	; 0x28
   1726c:	cmp	fp, r1
   17270:	beq	1730c <__assert_fail@plt+0x6034>
   17274:	tst	r2, #1
   17278:	bne	1719c <__assert_fail@plt+0x5ec4>
   1727c:	tst	r2, #2
   17280:	beq	171ac <__assert_fail@plt+0x5ed4>
   17284:	cmp	r7, #0
   17288:	beq	171ac <__assert_fail@plt+0x5ed4>
   1728c:	subs	r2, r5, sl
   17290:	bmi	172a0 <__assert_fail@plt+0x5fc8>
   17294:	ldr	r1, [r4, #8]
   17298:	cmp	r2, r1
   1729c:	blt	172f4 <__assert_fail@plt+0x601c>
   172a0:	ldr	ip, [r8, #4]
   172a4:	add	r5, r5, #1
   172a8:	cmp	r5, ip
   172ac:	add	sl, sl, #1
   172b0:	blt	171e4 <__assert_fail@plt+0x5f0c>
   172b4:	ldr	r7, [sp, #20]
   172b8:	mov	r2, r7
   172bc:	mov	r0, r9
   172c0:	mov	r1, r4
   172c4:	bl	14e68 <__assert_fail@plt+0x3b90>
   172c8:	cmp	r0, #0
   172cc:	beq	170fc <__assert_fail@plt+0x5e24>
   172d0:	mov	r0, r4
   172d4:	bl	15acc <__assert_fail@plt+0x47f4>
   172d8:	ldr	r2, [sp, #24]
   172dc:	mov	r3, #12
   172e0:	mov	r4, #0
   172e4:	mov	r0, r4
   172e8:	str	r3, [r2]
   172ec:	add	sp, sp, #36	; 0x24
   172f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f4:	sub	r1, r1, #1
   172f8:	str	r1, [r4, #8]
   172fc:	ldr	r0, [sp, #16]
   17300:	ldr	r1, [sp, #12]
   17304:	bl	164f4 <__assert_fail@plt+0x521c>
   17308:	b	172a0 <__assert_fail@plt+0x5fc8>
   1730c:	mov	r0, #12
   17310:	str	r2, [sp, #28]
   17314:	bl	22fcc <__assert_fail@plt+0x11cf4>
   17318:	ldr	r2, [sp, #28]
   1731c:	subs	r1, r0, #0
   17320:	beq	172d0 <__assert_fail@plt+0x5ff8>
   17324:	str	r1, [r4, #40]	; 0x28
   17328:	mov	r1, r8
   1732c:	str	r2, [sp, #28]
   17330:	bl	16e70 <__assert_fail@plt+0x5b98>
   17334:	ldr	r2, [sp, #28]
   17338:	subs	sl, r0, #0
   1733c:	bne	172d0 <__assert_fail@plt+0x5ff8>
   17340:	ldrb	r1, [r4, #52]	; 0x34
   17344:	orr	r1, r1, #128	; 0x80
   17348:	strb	r1, [r4, #52]	; 0x34
   1734c:	b	17274 <__assert_fail@plt+0x5f9c>
   17350:	mov	r0, r4
   17354:	bl	23198 <__assert_fail@plt+0x11ec0>
   17358:	b	172d8 <__assert_fail@plt+0x6000>
   1735c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17360:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17364:	mov	r3, #0
   17368:	ldr	r6, [r2, #4]
   1736c:	str	r3, [r0]
   17370:	cmp	r6, r3
   17374:	beq	1754c <__assert_fail@plt+0x6274>
   17378:	ble	17394 <__assert_fail@plt+0x60bc>
   1737c:	ldr	r3, [r2, #8]
   17380:	add	lr, r3, r6, lsl #2
   17384:	ldr	ip, [r3], #4
   17388:	cmp	lr, r3
   1738c:	add	r6, r6, ip
   17390:	bne	17384 <__assert_fail@plt+0x60ac>
   17394:	ldr	r3, [r1, #68]	; 0x44
   17398:	mov	sl, r2
   1739c:	and	r3, r3, r6
   173a0:	ldr	r2, [r1, #32]
   173a4:	add	r3, r3, r3, lsl #1
   173a8:	mov	r7, r1
   173ac:	lsl	r3, r3, #2
   173b0:	mov	r8, r0
   173b4:	ldr	fp, [r2, r3]
   173b8:	add	r1, r2, r3
   173bc:	cmp	fp, #0
   173c0:	ble	1740c <__assert_fail@plt+0x6134>
   173c4:	ldr	r9, [r1, #8]
   173c8:	mov	r5, #0
   173cc:	sub	r9, r9, #4
   173d0:	b	173dc <__assert_fail@plt+0x6104>
   173d4:	cmp	r5, fp
   173d8:	beq	1740c <__assert_fail@plt+0x6134>
   173dc:	ldr	r4, [r9, #4]!
   173e0:	add	r5, r5, #1
   173e4:	ldr	r3, [r4]
   173e8:	cmp	r3, r6
   173ec:	bne	173d4 <__assert_fail@plt+0x60fc>
   173f0:	mov	r1, sl
   173f4:	add	r0, r4, #4
   173f8:	bl	162f0 <__assert_fail@plt+0x5018>
   173fc:	cmp	r0, #0
   17400:	beq	173d4 <__assert_fail@plt+0x60fc>
   17404:	mov	r0, r4
   17408:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1740c:	mov	r1, #1
   17410:	mov	r0, #56	; 0x38
   17414:	bl	22f84 <__assert_fail@plt+0x11cac>
   17418:	subs	r4, r0, #0
   1741c:	beq	17528 <__assert_fail@plt+0x6250>
   17420:	add	r5, r4, #4
   17424:	mov	r0, r5
   17428:	mov	r1, sl
   1742c:	bl	16e70 <__assert_fail@plt+0x5b98>
   17430:	cmp	r0, #0
   17434:	bne	17558 <__assert_fail@plt+0x6280>
   17438:	ldr	lr, [sl, #4]
   1743c:	str	r5, [r4, #40]	; 0x28
   17440:	cmp	lr, #0
   17444:	ble	17508 <__assert_fail@plt+0x6230>
   17448:	ldr	ip, [sl, #8]
   1744c:	ldr	r5, [r7]
   17450:	ldr	r9, [pc, #268]	; 17564 <__assert_fail@plt+0x628c>
   17454:	add	lr, ip, lr, lsl #2
   17458:	b	174b4 <__assert_fail@plt+0x61dc>
   1745c:	ldrb	r3, [r2, #6]
   17460:	ldrb	r1, [r4, #52]	; 0x34
   17464:	cmp	r0, #2
   17468:	lsr	r3, r3, #4
   1746c:	orr	r3, r3, r1, lsr #5
   17470:	and	r3, r3, #1
   17474:	bic	r1, r1, #32
   17478:	orr	r3, r1, r3, lsl #5
   1747c:	strb	r3, [r4, #52]	; 0x34
   17480:	uxtbeq	r3, r3
   17484:	orreq	r3, r3, #16
   17488:	strbeq	r3, [r4, #52]	; 0x34
   1748c:	beq	174ac <__assert_fail@plt+0x61d4>
   17490:	cmp	r0, #4
   17494:	beq	1753c <__assert_fail@plt+0x6264>
   17498:	cmp	r0, #12
   1749c:	beq	174f4 <__assert_fail@plt+0x621c>
   174a0:	ldr	r3, [r2, #4]
   174a4:	tst	r3, r9
   174a8:	bne	174f4 <__assert_fail@plt+0x621c>
   174ac:	cmp	lr, ip
   174b0:	beq	17508 <__assert_fail@plt+0x6230>
   174b4:	ldr	r2, [ip], #4
   174b8:	add	r2, r5, r2, lsl #3
   174bc:	ldrb	r0, [r2, #4]
   174c0:	cmp	r0, #1
   174c4:	bne	1745c <__assert_fail@plt+0x6184>
   174c8:	ldr	r3, [r2, #4]
   174cc:	tst	r3, r9
   174d0:	beq	174ac <__assert_fail@plt+0x61d4>
   174d4:	ldrb	r3, [r2, #6]
   174d8:	ldrb	r2, [r4, #52]	; 0x34
   174dc:	lsr	r3, r3, #4
   174e0:	orr	r3, r3, r2, lsr #5
   174e4:	and	r3, r3, #1
   174e8:	bic	r2, r2, #32
   174ec:	orr	r3, r2, r3, lsl #5
   174f0:	strb	r3, [r4, #52]	; 0x34
   174f4:	ldrb	r3, [r4, #52]	; 0x34
   174f8:	cmp	lr, ip
   174fc:	orr	r3, r3, #128	; 0x80
   17500:	strb	r3, [r4, #52]	; 0x34
   17504:	bne	174b4 <__assert_fail@plt+0x61dc>
   17508:	mov	r2, r6
   1750c:	mov	r0, r7
   17510:	mov	r1, r4
   17514:	bl	14e68 <__assert_fail@plt+0x3b90>
   17518:	cmp	r0, #0
   1751c:	beq	17404 <__assert_fail@plt+0x612c>
   17520:	mov	r0, r4
   17524:	bl	15acc <__assert_fail@plt+0x47f4>
   17528:	mov	r4, #0
   1752c:	mov	r3, #12
   17530:	str	r3, [r8]
   17534:	mov	r0, r4
   17538:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1753c:	ldrb	r3, [r4, #52]	; 0x34
   17540:	orr	r3, r3, #64	; 0x40
   17544:	strb	r3, [r4, #52]	; 0x34
   17548:	b	174ac <__assert_fail@plt+0x61d4>
   1754c:	mov	r4, r6
   17550:	mov	r0, r4
   17554:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17558:	mov	r0, r4
   1755c:	bl	23198 <__assert_fail@plt+0x11ec0>
   17560:	b	17528 <__assert_fail@plt+0x6250>
   17564:	andeq	pc, r3, r0, lsl #30
   17568:	push	{r4, r5, r6, r7, r8, lr}
   1756c:	subs	r7, r3, #0
   17570:	sub	sp, sp, #16
   17574:	movgt	r8, r0
   17578:	movgt	r4, r1
   1757c:	movgt	r5, r2
   17580:	movgt	r6, #0
   17584:	bgt	175bc <__assert_fail@plt+0x62e4>
   17588:	b	17610 <__assert_fail@plt+0x6338>
   1758c:	bl	17360 <__assert_fail@plt+0x6088>
   17590:	str	r0, [r4]
   17594:	ldr	r0, [sp, #12]
   17598:	bl	23198 <__assert_fail@plt+0x11ec0>
   1759c:	ldr	ip, [sp]
   175a0:	cmp	ip, #0
   175a4:	bne	17604 <__assert_fail@plt+0x632c>
   175a8:	add	r6, r6, #1
   175ac:	cmp	r7, r6
   175b0:	add	r4, r4, #4
   175b4:	add	r5, r5, #4
   175b8:	beq	17610 <__assert_fail@plt+0x6338>
   175bc:	ldr	r2, [r4]
   175c0:	ldr	r3, [r5]
   175c4:	cmp	r2, #0
   175c8:	add	r0, sp, #4
   175cc:	add	r1, r2, #4
   175d0:	streq	r3, [r4]
   175d4:	beq	175a8 <__assert_fail@plt+0x62d0>
   175d8:	cmp	r3, #0
   175dc:	add	r2, r3, #4
   175e0:	beq	175a8 <__assert_fail@plt+0x62d0>
   175e4:	bl	16ee8 <__assert_fail@plt+0x5c10>
   175e8:	add	r2, sp, #4
   175ec:	mov	r1, r8
   175f0:	mov	ip, r0
   175f4:	cmp	ip, #0
   175f8:	mov	r0, sp
   175fc:	str	ip, [sp]
   17600:	beq	1758c <__assert_fail@plt+0x62b4>
   17604:	mov	r0, ip
   17608:	add	sp, sp, #16
   1760c:	pop	{r4, r5, r6, r7, r8, pc}
   17610:	mov	ip, #0
   17614:	mov	r0, ip
   17618:	add	sp, sp, #16
   1761c:	pop	{r4, r5, r6, r7, r8, pc}
   17620:	ldrb	r2, [r1, #24]
   17624:	cmp	r2, #16
   17628:	beq	17698 <__assert_fail@plt+0x63c0>
   1762c:	push	{r4, r5, r6, lr}
   17630:	add	r3, r1, #20
   17634:	mov	r4, r1
   17638:	mov	r5, r0
   1763c:	str	r1, [r4, #12]
   17640:	ldm	r3, {r1, r2}
   17644:	bl	15888 <__assert_fail@plt+0x45b0>
   17648:	cmn	r0, #1
   1764c:	str	r0, [r4, #28]
   17650:	beq	176b4 <__assert_fail@plt+0x63dc>
   17654:	ldrb	r3, [r4, #24]
   17658:	cmp	r3, #12
   1765c:	beq	17668 <__assert_fail@plt+0x6390>
   17660:	mov	r0, #0
   17664:	pop	{r4, r5, r6, pc}
   17668:	ldr	r1, [r5]
   1766c:	ldr	r2, [r4, #20]
   17670:	add	r1, r1, r0, lsl #3
   17674:	mov	r0, #0
   17678:	ldr	r3, [r1, #4]
   1767c:	lsl	r2, r2, #22
   17680:	bic	r3, r3, #261120	; 0x3fc00
   17684:	lsr	r2, r2, #22
   17688:	bic	r3, r3, #768	; 0x300
   1768c:	orr	r3, r3, r2, lsl #8
   17690:	str	r3, [r1, #4]
   17694:	pop	{r4, r5, r6, pc}
   17698:	ldr	r3, [r1, #4]
   1769c:	mov	r0, #0
   176a0:	ldr	r2, [r3, #12]
   176a4:	ldr	r3, [r3, #28]
   176a8:	str	r2, [r1, #12]
   176ac:	str	r3, [r1, #28]
   176b0:	bx	lr
   176b4:	mov	r0, #12
   176b8:	pop	{r4, r5, r6, pc}
   176bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176c0:	mov	r9, r1
   176c4:	ldr	r7, [r0, #28]
   176c8:	add	r1, r1, r1, lsl #1
   176cc:	sub	sp, sp, #36	; 0x24
   176d0:	add	r7, r7, r1, lsl #2
   176d4:	mov	r5, #0
   176d8:	str	r5, [sp, #24]
   176dc:	str	r5, [sp, #20]
   176e0:	str	r5, [sp, #28]
   176e4:	ldr	r6, [r7, #4]
   176e8:	str	r3, [sp, #12]
   176ec:	cmp	r6, r5
   176f0:	ble	178d8 <__assert_fail@plt+0x6600>
   176f4:	add	r3, r7, #8
   176f8:	str	r3, [sp]
   176fc:	add	r3, r2, #8
   17700:	mov	r8, r0
   17704:	str	r3, [sp, #8]
   17708:	str	r2, [sp, #4]
   1770c:	b	17758 <__assert_fail@plt+0x6480>
   17710:	ldr	r3, [sp, #4]
   17714:	mov	r2, fp
   17718:	ldr	r1, [sp, #8]
   1771c:	ldr	r0, [r3, #4]
   17720:	bl	16364 <__assert_fail@plt+0x508c>
   17724:	cmp	r0, #0
   17728:	beq	177b4 <__assert_fail@plt+0x64dc>
   1772c:	ldr	r2, [r8, #28]
   17730:	ldr	r1, [sp, #12]
   17734:	add	r2, r2, r4
   17738:	add	r0, sp, #20
   1773c:	bl	16844 <__assert_fail@plt+0x556c>
   17740:	cmp	r0, #0
   17744:	bne	178c0 <__assert_fail@plt+0x65e8>
   17748:	ldr	r6, [r7, #4]
   1774c:	add	r5, r5, #1
   17750:	cmp	r6, r5
   17754:	ble	17814 <__assert_fail@plt+0x653c>
   17758:	ldr	r3, [r7, #8]
   1775c:	ldr	r4, [r3, r5, lsl #2]
   17760:	cmp	r9, r4
   17764:	beq	1774c <__assert_fail@plt+0x6474>
   17768:	ldr	r3, [r8]
   1776c:	add	r3, r3, r4, lsl #3
   17770:	ldrb	r3, [r3, #4]
   17774:	tst	r3, #8
   17778:	beq	1774c <__assert_fail@plt+0x6474>
   1777c:	add	r4, r4, r4, lsl #1
   17780:	ldr	r3, [r8, #20]
   17784:	lsl	r4, r4, #2
   17788:	add	r3, r3, r4
   1778c:	ldr	r1, [sp]
   17790:	ldmib	r3, {r3, sl}
   17794:	mov	r0, r6
   17798:	ldr	fp, [sl]
   1779c:	cmp	r3, #1
   177a0:	mov	r2, fp
   177a4:	ble	177f8 <__assert_fail@plt+0x6520>
   177a8:	bl	16364 <__assert_fail@plt+0x508c>
   177ac:	cmp	r0, #0
   177b0:	beq	17710 <__assert_fail@plt+0x6438>
   177b4:	ldr	sl, [sl, #4]
   177b8:	cmp	sl, #0
   177bc:	ble	1774c <__assert_fail@plt+0x6474>
   177c0:	mov	r2, sl
   177c4:	ldr	r1, [sp]
   177c8:	mov	r0, r6
   177cc:	bl	16364 <__assert_fail@plt+0x508c>
   177d0:	cmp	r0, #0
   177d4:	bne	1774c <__assert_fail@plt+0x6474>
   177d8:	mov	r2, sl
   177dc:	ldr	r3, [sp, #4]
   177e0:	ldr	r1, [sp, #8]
   177e4:	ldr	r0, [r3, #4]
   177e8:	bl	16364 <__assert_fail@plt+0x508c>
   177ec:	cmp	r0, #0
   177f0:	beq	1774c <__assert_fail@plt+0x6474>
   177f4:	b	1772c <__assert_fail@plt+0x6454>
   177f8:	bl	16364 <__assert_fail@plt+0x508c>
   177fc:	cmp	r0, #0
   17800:	moveq	r2, fp
   17804:	beq	177dc <__assert_fail@plt+0x6504>
   17808:	add	r5, r5, #1
   1780c:	cmp	r6, r5
   17810:	bgt	17758 <__assert_fail@plt+0x6480>
   17814:	cmp	r6, #0
   17818:	ldr	fp, [sp, #4]
   1781c:	ble	178a8 <__assert_fail@plt+0x65d0>
   17820:	mov	r4, #0
   17824:	add	r8, fp, #8
   17828:	add	r9, fp, #4
   1782c:	b	17838 <__assert_fail@plt+0x6560>
   17830:	cmp	r6, r4
   17834:	ble	178a8 <__assert_fail@plt+0x65d0>
   17838:	ldr	r3, [r7, #8]
   1783c:	add	r1, sp, #28
   17840:	ldr	r0, [sp, #24]
   17844:	ldr	r5, [r3, r4, lsl #2]
   17848:	add	r4, r4, #1
   1784c:	mov	r2, r5
   17850:	bl	16364 <__assert_fail@plt+0x508c>
   17854:	mov	r2, r5
   17858:	mov	r1, r8
   1785c:	cmp	r0, #0
   17860:	bne	17830 <__assert_fail@plt+0x6558>
   17864:	ldr	r5, [fp, #4]
   17868:	mov	r0, r5
   1786c:	bl	16364 <__assert_fail@plt+0x508c>
   17870:	sub	r2, r0, #1
   17874:	cmp	r2, r5
   17878:	movlt	r3, #0
   1787c:	movge	r3, #1
   17880:	orrs	r3, r3, r2, lsr #31
   17884:	bne	17830 <__assert_fail@plt+0x6558>
   17888:	sub	r5, r5, #1
   1788c:	str	r5, [fp, #4]
   17890:	mov	r1, r8
   17894:	mov	r0, r9
   17898:	bl	164f4 <__assert_fail@plt+0x521c>
   1789c:	ldr	r6, [r7, #4]
   178a0:	cmp	r6, r4
   178a4:	bgt	17838 <__assert_fail@plt+0x6560>
   178a8:	ldr	r0, [sp, #28]
   178ac:	bl	23198 <__assert_fail@plt+0x11ec0>
   178b0:	mov	r4, #0
   178b4:	mov	r0, r4
   178b8:	add	sp, sp, #36	; 0x24
   178bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178c0:	mov	r4, r0
   178c4:	ldr	r0, [sp, #28]
   178c8:	bl	23198 <__assert_fail@plt+0x11ec0>
   178cc:	mov	r0, r4
   178d0:	add	sp, sp, #36	; 0x24
   178d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178d8:	mov	r0, r5
   178dc:	b	178ac <__assert_fail@plt+0x65d4>
   178e0:	push	{r4, r5, r6, r7, r8, lr}
   178e4:	subs	r6, r1, #0
   178e8:	beq	179dc <__assert_fail@plt+0x6704>
   178ec:	ldr	r2, [r6, #4]
   178f0:	cmp	r2, #0
   178f4:	mov	ip, r2
   178f8:	beq	179dc <__assert_fail@plt+0x6704>
   178fc:	ldm	r0, {r1, r3}
   17900:	mov	r5, r0
   17904:	add	r4, r3, r2, lsl #1
   17908:	cmp	r1, r4
   1790c:	blt	17a04 <__assert_fail@plt+0x672c>
   17910:	cmp	r3, #0
   17914:	beq	17a44 <__assert_fail@plt+0x676c>
   17918:	sub	r2, r2, #1
   1791c:	sub	r3, r3, #1
   17920:	mvn	r7, r2
   17924:	mvn	lr, r3
   17928:	tst	r7, lr
   1792c:	bpl	17968 <__assert_fail@plt+0x6690>
   17930:	ldr	r1, [r5, #8]
   17934:	ldr	r0, [r6, #8]
   17938:	ldr	ip, [r1, r3, lsl #2]
   1793c:	ldr	r0, [r0, r2, lsl #2]
   17940:	cmp	ip, r0
   17944:	beq	17918 <__assert_fail@plt+0x6640>
   17948:	sublt	r4, r4, #1
   1794c:	sublt	r2, r2, #1
   17950:	subge	r3, r3, #1
   17954:	mvnlt	r7, r2
   17958:	mvnge	lr, r3
   1795c:	strlt	r0, [r1, r4, lsl #2]
   17960:	tst	r7, lr
   17964:	bmi	17930 <__assert_fail@plt+0x6658>
   17968:	cmp	r2, #0
   1796c:	blt	1798c <__assert_fail@plt+0x66b4>
   17970:	add	r2, r2, #1
   17974:	sub	r4, r4, r2
   17978:	ldr	r0, [r5, #8]
   1797c:	lsl	r2, r2, #2
   17980:	add	r0, r0, r4, lsl #2
   17984:	ldr	r1, [r6, #8]
   17988:	bl	11068 <memcpy@plt>
   1798c:	ldr	r1, [r6, #4]
   17990:	ldr	ip, [r5, #4]
   17994:	add	r1, ip, r1, lsl #1
   17998:	subs	r2, r1, r4
   1799c:	sub	r1, r1, #1
   179a0:	beq	179dc <__assert_fail@plt+0x6704>
   179a4:	ldr	r0, [r5, #8]
   179a8:	sub	r3, ip, #1
   179ac:	add	ip, ip, r2
   179b0:	str	ip, [r5, #4]
   179b4:	ldr	lr, [r0, r1, lsl #2]
   179b8:	ldr	ip, [r0, r3, lsl #2]
   179bc:	add	r6, r3, r2
   179c0:	cmp	lr, ip
   179c4:	mov	r5, r6
   179c8:	ble	179e4 <__assert_fail@plt+0x670c>
   179cc:	subs	r2, r2, #1
   179d0:	sub	r1, r1, #1
   179d4:	str	lr, [r0, r6, lsl #2]
   179d8:	bne	179b4 <__assert_fail@plt+0x66dc>
   179dc:	mov	r0, #0
   179e0:	pop	{r4, r5, r6, r7, r8, pc}
   179e4:	subs	r3, r3, #1
   179e8:	str	ip, [r0, r6, lsl #2]
   179ec:	bpl	179b4 <__assert_fail@plt+0x66dc>
   179f0:	lsl	r2, r2, #2
   179f4:	add	r1, r0, r4, lsl #2
   179f8:	bl	11068 <memcpy@plt>
   179fc:	mov	r0, #0
   17a00:	pop	{r4, r5, r6, r7, r8, pc}
   17a04:	add	r2, r2, r1
   17a08:	ldr	r0, [r0, #8]
   17a0c:	lsl	r1, r2, #3
   17a10:	lsl	r4, r2, #1
   17a14:	bl	22ff8 <__assert_fail@plt+0x11d20>
   17a18:	cmp	r0, #0
   17a1c:	beq	17a60 <__assert_fail@plt+0x6788>
   17a20:	ldr	r3, [r5, #4]
   17a24:	str	r0, [r5, #8]
   17a28:	cmp	r3, #0
   17a2c:	str	r4, [r5]
   17a30:	ldreq	ip, [r6, #4]
   17a34:	beq	17a48 <__assert_fail@plt+0x6770>
   17a38:	ldr	r2, [r6, #4]
   17a3c:	add	r4, r3, r2, lsl #1
   17a40:	b	17918 <__assert_fail@plt+0x6640>
   17a44:	ldr	r0, [r0, #8]
   17a48:	str	ip, [r5, #4]
   17a4c:	ldr	r2, [r6, #4]
   17a50:	ldr	r1, [r6, #8]
   17a54:	lsl	r2, r2, #2
   17a58:	bl	11068 <memcpy@plt>
   17a5c:	b	179dc <__assert_fail@plt+0x6704>
   17a60:	mov	r0, #12
   17a64:	pop	{r4, r5, r6, r7, r8, pc}
   17a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a6c:	add	r7, r2, r2, lsl #1
   17a70:	mov	r4, r2
   17a74:	ldr	r2, [r1, #20]
   17a78:	lsl	r7, r7, #2
   17a7c:	add	r2, r2, r7
   17a80:	mov	r6, r1
   17a84:	ldr	r1, [r2, #4]
   17a88:	sub	sp, sp, #44	; 0x2c
   17a8c:	add	r1, r1, #1
   17a90:	mov	r2, #0
   17a94:	mov	sl, r0
   17a98:	lsl	r0, r1, #2
   17a9c:	str	r3, [sp, #12]
   17aa0:	str	r1, [sp, #16]
   17aa4:	str	r2, [sp, #20]
   17aa8:	bl	22fcc <__assert_fail@plt+0x11cf4>
   17aac:	cmp	r0, #0
   17ab0:	str	r0, [sp, #24]
   17ab4:	beq	17c90 <__assert_fail@plt+0x69b8>
   17ab8:	ldr	r8, [r6]
   17abc:	ldr	r3, [sp, #20]
   17ac0:	lsl	r5, r4, #3
   17ac4:	add	lr, r8, r5
   17ac8:	str	r4, [r0, r3, lsl #2]
   17acc:	ldr	r1, [r6, #24]
   17ad0:	ldr	r0, [lr, #4]
   17ad4:	ldr	r2, [pc, #452]	; 17ca0 <__assert_fail@plt+0x69c8>
   17ad8:	add	ip, r1, r7
   17adc:	and	r2, r2, r0
   17ae0:	add	r3, r3, #1
   17ae4:	cmp	r2, #0
   17ae8:	mvn	r2, #0
   17aec:	str	r3, [sp, #20]
   17af0:	str	r2, [ip, #4]
   17af4:	beq	17b24 <__assert_fail@plt+0x684c>
   17af8:	ldr	r3, [r6, #20]
   17afc:	add	r3, r3, r7
   17b00:	ldr	r2, [r3, #4]
   17b04:	cmp	r2, #0
   17b08:	beq	17bf4 <__assert_fail@plt+0x691c>
   17b0c:	ldr	r3, [r3, #8]
   17b10:	ldr	r3, [r3]
   17b14:	add	r8, r8, r3, lsl #3
   17b18:	ldrb	r3, [r8, #6]
   17b1c:	tst	r3, #4
   17b20:	beq	17c58 <__assert_fail@plt+0x6980>
   17b24:	ldrb	r3, [lr, #4]
   17b28:	tst	r3, #8
   17b2c:	beq	17bf0 <__assert_fail@plt+0x6918>
   17b30:	ldr	ip, [r6, #20]
   17b34:	add	r3, ip, r7
   17b38:	ldr	r2, [r3, #4]
   17b3c:	cmp	r2, #0
   17b40:	ble	17bf0 <__assert_fail@plt+0x6918>
   17b44:	mov	r9, #0
   17b48:	mov	r5, r9
   17b4c:	mov	fp, #1
   17b50:	add	r8, sp, #28
   17b54:	b	17ba8 <__assert_fail@plt+0x68d0>
   17b58:	cmp	r0, #0
   17b5c:	beq	17c18 <__assert_fail@plt+0x6940>
   17b60:	ldm	r3, {r0, r1, r2}
   17b64:	stm	r8, {r0, r1, r2}
   17b68:	mov	r1, r8
   17b6c:	add	r0, sp, #16
   17b70:	bl	178e0 <__assert_fail@plt+0x6608>
   17b74:	cmp	r0, #0
   17b78:	bne	17c30 <__assert_fail@plt+0x6958>
   17b7c:	ldr	r1, [r6, #24]
   17b80:	add	r4, r1, r4
   17b84:	ldr	r3, [r4, #4]
   17b88:	cmp	r3, #0
   17b8c:	beq	17c40 <__assert_fail@plt+0x6968>
   17b90:	ldr	ip, [r6, #20]
   17b94:	add	r3, ip, r7
   17b98:	add	r5, r5, #1
   17b9c:	ldr	r2, [r3, #4]
   17ba0:	cmp	r2, r5
   17ba4:	ble	17bd0 <__assert_fail@plt+0x68f8>
   17ba8:	ldr	r3, [r3, #8]
   17bac:	ldr	r2, [r3, r5, lsl #2]
   17bb0:	add	r4, r2, r2, lsl #1
   17bb4:	lsl	r4, r4, #2
   17bb8:	add	r3, r1, r4
   17bbc:	ldr	r0, [r3, #4]
   17bc0:	cmn	r0, #1
   17bc4:	bne	17b58 <__assert_fail@plt+0x6880>
   17bc8:	mov	r9, fp
   17bcc:	b	17b94 <__assert_fail@plt+0x68bc>
   17bd0:	ldr	r3, [sp, #12]
   17bd4:	eor	r3, r3, #1
   17bd8:	tst	r9, r3
   17bdc:	addne	r7, r1, r7
   17be0:	movne	r3, #0
   17be4:	strne	r3, [r7, #4]
   17be8:	addne	lr, sp, #16
   17bec:	bne	17c00 <__assert_fail@plt+0x6928>
   17bf0:	add	ip, r1, r7
   17bf4:	add	lr, sp, #16
   17bf8:	ldm	lr, {r0, r1, r2}
   17bfc:	stm	ip, {r0, r1, r2}
   17c00:	mov	r3, #0
   17c04:	ldm	lr, {r0, r1, r2}
   17c08:	stm	sl, {r0, r1, r2}
   17c0c:	mov	r0, r3
   17c10:	add	sp, sp, #44	; 0x2c
   17c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c18:	mov	r3, #0
   17c1c:	mov	r1, r6
   17c20:	mov	r0, r8
   17c24:	bl	17a68 <__assert_fail@plt+0x6790>
   17c28:	cmp	r0, #0
   17c2c:	beq	17b68 <__assert_fail@plt+0x6890>
   17c30:	mov	r3, r0
   17c34:	mov	r0, r3
   17c38:	add	sp, sp, #44	; 0x2c
   17c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c40:	ldr	r0, [sp, #36]	; 0x24
   17c44:	bl	23198 <__assert_fail@plt+0x11ec0>
   17c48:	mov	r9, fp
   17c4c:	ldr	r1, [r6, #24]
   17c50:	ldr	ip, [r6, #20]
   17c54:	b	17b94 <__assert_fail@plt+0x68bc>
   17c58:	ldr	r2, [pc, #68]	; 17ca4 <__assert_fail@plt+0x69cc>
   17c5c:	mov	r3, r4
   17c60:	and	r0, r2, r0, lsr #8
   17c64:	str	r0, [sp]
   17c68:	mov	r2, r4
   17c6c:	mov	r1, r4
   17c70:	mov	r0, r6
   17c74:	bl	15ef0 <__assert_fail@plt+0x4c18>
   17c78:	subs	r3, r0, #0
   17c7c:	bne	17c0c <__assert_fail@plt+0x6934>
   17c80:	ldr	lr, [r6]
   17c84:	ldr	r1, [r6, #24]
   17c88:	add	lr, lr, r5
   17c8c:	b	17b24 <__assert_fail@plt+0x684c>
   17c90:	mov	r3, #12
   17c94:	mov	r0, r3
   17c98:	add	sp, sp, #44	; 0x2c
   17c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ca0:	andeq	pc, r3, r0, lsl #30
   17ca4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cac:	mov	r8, r1
   17cb0:	ldr	r1, [r1, #4]
   17cb4:	sub	sp, sp, #28
   17cb8:	mov	r6, #0
   17cbc:	mov	r7, r0
   17cc0:	lsl	r0, r1, #2
   17cc4:	mov	r5, r2
   17cc8:	mov	r4, r3
   17ccc:	str	r1, [sp, #12]
   17cd0:	str	r6, [sp, #16]
   17cd4:	bl	22fcc <__assert_fail@plt+0x11cf4>
   17cd8:	cmp	r0, r6
   17cdc:	str	r0, [sp, #20]
   17ce0:	beq	17dcc <__assert_fail@plt+0x6af4>
   17ce4:	ldr	r3, [r8, #4]
   17ce8:	add	r9, sp, #12
   17cec:	cmp	r3, r6
   17cf0:	ble	17d88 <__assert_fail@plt+0x6ab0>
   17cf4:	ldr	r3, [r8, #8]
   17cf8:	ldr	r1, [r7, #24]
   17cfc:	ldr	r2, [r3, r6, lsl #2]
   17d00:	add	r3, r2, r2, lsl #1
   17d04:	add	r1, r1, r3, lsl #2
   17d08:	ldr	fp, [r1, #4]
   17d0c:	cmp	fp, #0
   17d10:	ble	17da8 <__assert_fail@plt+0x6ad0>
   17d14:	ldr	ip, [r1, #8]
   17d18:	ldr	sl, [r7]
   17d1c:	sub	ip, ip, #4
   17d20:	mov	r3, #0
   17d24:	b	17d30 <__assert_fail@plt+0x6a58>
   17d28:	cmp	fp, r3
   17d2c:	beq	17da8 <__assert_fail@plt+0x6ad0>
   17d30:	ldr	r0, [ip, #4]!
   17d34:	add	r3, r3, #1
   17d38:	add	lr, sl, r0, lsl #3
   17d3c:	ldrb	lr, [lr, #4]
   17d40:	cmp	r4, lr
   17d44:	bne	17d28 <__assert_fail@plt+0x6a50>
   17d48:	ldr	lr, [sl, r0, lsl #3]
   17d4c:	cmp	r5, lr
   17d50:	bne	17d28 <__assert_fail@plt+0x6a50>
   17d54:	cmn	r0, #1
   17d58:	beq	17da8 <__assert_fail@plt+0x6ad0>
   17d5c:	str	r4, [sp]
   17d60:	mov	r3, r5
   17d64:	mov	r1, r9
   17d68:	mov	r0, r7
   17d6c:	bl	163f4 <__assert_fail@plt+0x511c>
   17d70:	subs	sl, r0, #0
   17d74:	bne	17db8 <__assert_fail@plt+0x6ae0>
   17d78:	ldr	r3, [r8, #4]
   17d7c:	add	r6, r6, #1
   17d80:	cmp	r3, r6
   17d84:	bgt	17cf4 <__assert_fail@plt+0x6a1c>
   17d88:	ldr	r0, [r8, #8]
   17d8c:	bl	23198 <__assert_fail@plt+0x11ec0>
   17d90:	ldm	r9, {r0, r1, r2}
   17d94:	mov	sl, #0
   17d98:	stm	r8, {r0, r1, r2}
   17d9c:	mov	r0, sl
   17da0:	add	sp, sp, #28
   17da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17da8:	mov	r0, r9
   17dac:	bl	178e0 <__assert_fail@plt+0x6608>
   17db0:	subs	sl, r0, #0
   17db4:	beq	17d78 <__assert_fail@plt+0x6aa0>
   17db8:	ldr	r0, [sp, #20]
   17dbc:	bl	23198 <__assert_fail@plt+0x11ec0>
   17dc0:	mov	r0, sl
   17dc4:	add	sp, sp, #28
   17dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dcc:	mov	sl, #12
   17dd0:	mov	r0, sl
   17dd4:	add	sp, sp, #28
   17dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17de0:	mov	r5, #0
   17de4:	ldr	r6, [r0, #108]	; 0x6c
   17de8:	sub	sp, sp, #44	; 0x2c
   17dec:	mov	r4, r6
   17df0:	cmp	r5, r4
   17df4:	bge	17e50 <__assert_fail@plt+0x6b78>
   17df8:	add	lr, r5, r4
   17dfc:	ldr	r7, [r0, #116]	; 0x74
   17e00:	add	lr, lr, lr, lsr #31
   17e04:	asr	lr, lr, #1
   17e08:	add	ip, lr, lr, lsl #1
   17e0c:	add	ip, r7, ip, lsl #3
   17e10:	ldr	ip, [ip, #4]
   17e14:	cmp	r2, ip
   17e18:	ble	17e40 <__assert_fail@plt+0x6b68>
   17e1c:	b	18070 <__assert_fail@plt+0x6d98>
   17e20:	asr	ip, ip, #1
   17e24:	mov	r8, ip
   17e28:	add	r4, ip, ip, lsl #1
   17e2c:	add	r4, r7, r4, lsl #3
   17e30:	ldr	r4, [r4, #4]
   17e34:	cmp	r2, r4
   17e38:	bgt	18078 <__assert_fail@plt+0x6da0>
   17e3c:	mov	lr, ip
   17e40:	add	ip, r5, lr
   17e44:	cmp	r5, lr
   17e48:	add	ip, ip, ip, lsr #31
   17e4c:	blt	17e20 <__assert_fail@plt+0x6b48>
   17e50:	cmp	r6, r5
   17e54:	ble	18064 <__assert_fail@plt+0x6d8c>
   17e58:	add	ip, r5, r5, lsl #1
   17e5c:	ldr	r4, [r0, #116]	; 0x74
   17e60:	lsl	ip, ip, #3
   17e64:	add	lr, r4, ip
   17e68:	cmn	r5, #1
   17e6c:	ldr	lr, [lr, #4]
   17e70:	movne	r5, #0
   17e74:	moveq	r5, #1
   17e78:	cmp	lr, r2
   17e7c:	orrne	r5, r5, #1
   17e80:	cmp	r5, #0
   17e84:	bne	18064 <__assert_fail@plt+0x6d8c>
   17e88:	ldr	fp, [r0, #84]	; 0x54
   17e8c:	mov	r8, r1
   17e90:	mov	r9, r0
   17e94:	add	r7, r1, #8
   17e98:	str	r3, [sp, #16]
   17e9c:	add	r3, ip, #24
   17ea0:	str	r2, [sp, #8]
   17ea4:	str	r3, [sp, #12]
   17ea8:	str	r5, [sp, #20]
   17eac:	ldr	r3, [sp, #12]
   17eb0:	add	r4, r4, r3
   17eb4:	b	17f00 <__assert_fail@plt+0x6c28>
   17eb8:	ldr	r3, [r9, #100]	; 0x64
   17ebc:	ldr	r2, [fp, #12]
   17ec0:	ldr	r3, [r3, r5, lsl #2]
   17ec4:	ldr	sl, [r2, sl, lsl #2]
   17ec8:	cmp	r3, #0
   17ecc:	beq	18084 <__assert_fail@plt+0x6dac>
   17ed0:	add	r1, r3, #12
   17ed4:	ldr	r0, [r3, #8]
   17ed8:	mov	r2, sl
   17edc:	str	r3, [sp, #4]
   17ee0:	bl	16364 <__assert_fail@plt+0x508c>
   17ee4:	ldr	r3, [sp, #4]
   17ee8:	cmp	r0, #0
   17eec:	beq	17fe4 <__assert_fail@plt+0x6d0c>
   17ef0:	add	r4, r4, #24
   17ef4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   17ef8:	cmp	r3, #0
   17efc:	beq	18064 <__assert_fail@plt+0x6d8c>
   17f00:	ldr	sl, [r4, #-24]	; 0xffffffe8
   17f04:	ldr	r6, [r8, #4]
   17f08:	mov	r2, sl
   17f0c:	mov	r0, r6
   17f10:	mov	r1, r7
   17f14:	bl	16364 <__assert_fail@plt+0x508c>
   17f18:	cmp	r0, #0
   17f1c:	beq	17ef0 <__assert_fail@plt+0x6c18>
   17f20:	ldr	r3, [sp, #8]
   17f24:	ldr	r5, [r4, #-12]
   17f28:	ldr	r2, [r4, #-16]
   17f2c:	add	r5, r3, r5
   17f30:	sub	r5, r5, r2
   17f34:	cmp	r3, r5
   17f38:	bne	17eb8 <__assert_fail@plt+0x6be0>
   17f3c:	ldr	r2, [fp, #20]
   17f40:	add	sl, sl, sl, lsl #1
   17f44:	mov	r0, r6
   17f48:	add	sl, r2, sl, lsl #2
   17f4c:	mov	r1, r7
   17f50:	ldr	r3, [sl, #8]
   17f54:	ldr	r5, [r3]
   17f58:	mov	r2, r5
   17f5c:	bl	16364 <__assert_fail@plt+0x508c>
   17f60:	cmp	r0, #0
   17f64:	bne	17ef0 <__assert_fail@plt+0x6c18>
   17f68:	mov	r3, #1
   17f6c:	mov	r0, #4
   17f70:	str	r3, [sp, #28]
   17f74:	str	r3, [sp, #32]
   17f78:	bl	22fcc <__assert_fail@plt+0x11cf4>
   17f7c:	ldr	r3, [sp, #80]	; 0x50
   17f80:	ldr	r2, [sp, #16]
   17f84:	add	r1, sp, #28
   17f88:	cmp	r0, #0
   17f8c:	strne	r5, [r0]
   17f90:	ldrne	ip, [sp, #20]
   17f94:	streq	r0, [sp, #32]
   17f98:	streq	r0, [sp, #28]
   17f9c:	moveq	ip, #12
   17fa0:	str	r0, [sp, #36]	; 0x24
   17fa4:	mov	r0, fp
   17fa8:	str	ip, [sp, #24]
   17fac:	bl	17ca8 <__assert_fail@plt+0x69d0>
   17fb0:	add	r1, sp, #28
   17fb4:	mov	r4, r0
   17fb8:	mov	r0, r8
   17fbc:	bl	178e0 <__assert_fail@plt+0x6608>
   17fc0:	mov	r5, r0
   17fc4:	ldr	r0, [sp, #36]	; 0x24
   17fc8:	bl	23198 <__assert_fail@plt+0x11ec0>
   17fcc:	ldr	r0, [sp, #24]
   17fd0:	orr	r3, r4, r5
   17fd4:	orrs	r3, r3, r0
   17fd8:	bne	180d8 <__assert_fail@plt+0x6e00>
   17fdc:	ldr	r4, [r9, #116]	; 0x74
   17fe0:	b	17eac <__assert_fail@plt+0x6bd4>
   17fe4:	add	r1, r3, #4
   17fe8:	add	r0, sp, #28
   17fec:	bl	16e70 <__assert_fail@plt+0x5b98>
   17ff0:	mov	r1, sl
   17ff4:	str	r0, [sp, #24]
   17ff8:	add	r0, sp, #28
   17ffc:	bl	15dd4 <__assert_fail@plt+0x4afc>
   18000:	ldr	r3, [sp, #24]
   18004:	eor	r0, r0, #1
   18008:	cmp	r3, #0
   1800c:	orrne	r0, r0, #1
   18010:	tst	r0, #255	; 0xff
   18014:	bne	180b8 <__assert_fail@plt+0x6de0>
   18018:	add	r2, sp, #28
   1801c:	mov	r1, fp
   18020:	add	r0, sp, #24
   18024:	ldr	sl, [r9, #100]	; 0x64
   18028:	bl	17360 <__assert_fail@plt+0x6088>
   1802c:	str	r0, [sl, r5, lsl #2]
   18030:	ldr	r0, [sp, #36]	; 0x24
   18034:	bl	23198 <__assert_fail@plt+0x11ec0>
   18038:	ldr	r3, [r9, #100]	; 0x64
   1803c:	ldr	r3, [r3, r5, lsl #2]
   18040:	cmp	r3, #0
   18044:	bne	17ef0 <__assert_fail@plt+0x6c18>
   18048:	ldr	r0, [sp, #24]
   1804c:	cmp	r0, #0
   18050:	bne	18068 <__assert_fail@plt+0x6d90>
   18054:	add	r4, r4, #24
   18058:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1805c:	cmp	r3, #0
   18060:	bne	17f00 <__assert_fail@plt+0x6c28>
   18064:	mov	r0, #0
   18068:	add	sp, sp, #44	; 0x2c
   1806c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18070:	mov	r8, lr
   18074:	mov	lr, r4
   18078:	add	r5, r8, #1
   1807c:	mov	r4, lr
   18080:	b	17df0 <__assert_fail@plt+0x6b18>
   18084:	str	r3, [sp, #4]
   18088:	mov	r0, #4
   1808c:	mov	r3, #1
   18090:	str	r3, [sp, #28]
   18094:	str	r3, [sp, #32]
   18098:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1809c:	cmp	r0, #0
   180a0:	str	r0, [sp, #36]	; 0x24
   180a4:	beq	180cc <__assert_fail@plt+0x6df4>
   180a8:	ldr	r3, [sp, #4]
   180ac:	str	sl, [r0]
   180b0:	str	r3, [sp, #24]
   180b4:	b	18018 <__assert_fail@plt+0x6d40>
   180b8:	ldr	r0, [sp, #36]	; 0x24
   180bc:	bl	23198 <__assert_fail@plt+0x11ec0>
   180c0:	ldr	r0, [sp, #24]
   180c4:	cmp	r0, #0
   180c8:	bne	18068 <__assert_fail@plt+0x6d90>
   180cc:	mov	r0, #12
   180d0:	add	sp, sp, #44	; 0x2c
   180d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180d8:	cmp	r0, #0
   180dc:	bne	18068 <__assert_fail@plt+0x6d90>
   180e0:	cmp	r4, #0
   180e4:	movne	r0, r4
   180e8:	moveq	r0, r5
   180ec:	b	18068 <__assert_fail@plt+0x6d90>
   180f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180f4:	sub	sp, sp, #14400	; 0x3840
   180f8:	sub	sp, sp, #28
   180fc:	mov	r4, #0
   18100:	mov	r5, r1
   18104:	str	r1, [sp, #8]
   18108:	str	r4, [r1, #44]	; 0x2c
   1810c:	str	r4, [r1, #48]	; 0x30
   18110:	mov	r8, r0
   18114:	mov	r1, r4
   18118:	add	r0, sp, #88	; 0x58
   1811c:	mov	r2, #32
   18120:	bl	111f4 <memset@plt>
   18124:	ldr	r1, [r5, #8]
   18128:	cmp	r1, r4
   1812c:	ble	18a84 <__assert_fail@plt+0x77ac>
   18130:	add	r2, sp, #6208	; 0x1840
   18134:	add	r2, r2, #24
   18138:	sub	r2, r2, #4
   1813c:	str	r2, [sp, #32]
   18140:	str	r8, [sp, #28]
   18144:	add	r2, r8, #128	; 0x80
   18148:	mov	r8, r4
   1814c:	str	r4, [sp, #16]
   18150:	str	r2, [sp, #36]	; 0x24
   18154:	ldr	r3, [sp, #8]
   18158:	ldr	r0, [sp, #16]
   1815c:	ldr	r2, [r3, #12]
   18160:	ldr	r3, [sp, #28]
   18164:	lsl	ip, r0, #2
   18168:	ldr	r2, [r2, r0, lsl #2]
   1816c:	ldr	r3, [r3]
   18170:	str	ip, [sp, #12]
   18174:	add	r0, r3, r2, lsl #3
   18178:	str	r0, [sp, #20]
   1817c:	ldrb	ip, [r0, #4]
   18180:	ldr	r4, [r0, #4]
   18184:	ldr	r0, [pc, #2548]	; 18b80 <__assert_fail@plt+0x78a8>
   18188:	cmp	ip, #1
   1818c:	str	ip, [sp, #4]
   18190:	and	r4, r0, r4, lsr #8
   18194:	beq	18308 <__assert_fail@plt+0x7030>
   18198:	ldr	r0, [sp, #4]
   1819c:	cmp	r0, #3
   181a0:	beq	185e8 <__assert_fail@plt+0x7310>
   181a4:	ldr	r3, [sp, #4]
   181a8:	cmp	r3, #5
   181ac:	beq	18614 <__assert_fail@plt+0x733c>
   181b0:	ldr	r3, [sp, #4]
   181b4:	cmp	r3, #7
   181b8:	beq	188cc <__assert_fail@plt+0x75f4>
   181bc:	ldr	r3, [sp, #16]
   181c0:	add	r3, r3, #1
   181c4:	cmp	r3, r1
   181c8:	str	r3, [sp, #16]
   181cc:	blt	18154 <__assert_fail@plt+0x6e7c>
   181d0:	str	r8, [sp, #4]
   181d4:	ldr	r3, [sp, #4]
   181d8:	ldr	r8, [sp, #28]
   181dc:	cmp	r3, #0
   181e0:	ble	18a80 <__assert_fail@plt+0x77a8>
   181e4:	ldr	r3, [sp, #4]
   181e8:	add	r6, sp, #2128	; 0x850
   181ec:	add	r3, r3, #1
   181f0:	add	r6, r6, #8
   181f4:	mov	r4, #0
   181f8:	lsl	r0, r3, #2
   181fc:	str	r3, [r6, #-2092]	; 0xfffff7d4
   18200:	str	r4, [r6, #-2088]	; 0xfffff7d8
   18204:	bl	22fcc <__assert_fail@plt+0x11cf4>
   18208:	cmp	r0, r4
   1820c:	str	r0, [r6, #-2084]	; 0xfffff7dc
   18210:	beq	18980 <__assert_fail@plt+0x76a8>
   18214:	add	r3, sp, #3152	; 0xc50
   18218:	add	r3, r3, #8
   1821c:	mov	r1, r4
   18220:	add	r0, sp, #56	; 0x38
   18224:	mov	r2, #32
   18228:	mov	r5, r3
   1822c:	str	r4, [sp, #20]
   18230:	str	r3, [sp, #24]
   18234:	str	r4, [r6, #-2096]	; 0xfffff7d0
   18238:	bl	111f4 <memset@plt>
   1823c:	add	r3, sp, #6208	; 0x1840
   18240:	add	r3, r3, #24
   18244:	add	sl, sp, #1104	; 0x450
   18248:	mov	r9, r4
   1824c:	mov	fp, r4
   18250:	add	sl, sl, #8
   18254:	mov	r4, r5
   18258:	sub	r5, r3, #4
   1825c:	add	r3, sp, #84	; 0x54
   18260:	str	r3, [sp, #12]
   18264:	add	r3, sp, #40	; 0x28
   18268:	str	r3, [sp, #16]
   1826c:	ldr	r2, [r4, #4]
   18270:	str	r9, [r6, #-2088]	; 0xfffff7d8
   18274:	cmp	r2, #0
   18278:	movgt	r7, #0
   1827c:	bgt	18294 <__assert_fail@plt+0x6fbc>
   18280:	b	18708 <__assert_fail@plt+0x7430>
   18284:	ldr	r2, [r4, #4]
   18288:	add	r7, r7, #1
   1828c:	cmp	r2, r7
   18290:	ble	18708 <__assert_fail@plt+0x7430>
   18294:	ldr	r1, [r4, #8]
   18298:	ldr	r3, [r8, #12]
   1829c:	add	r0, sp, #44	; 0x2c
   182a0:	ldr	r1, [r1, r7, lsl #2]
   182a4:	ldr	r1, [r3, r1, lsl #2]
   182a8:	cmn	r1, #1
   182ac:	add	r1, r1, r1, lsl #1
   182b0:	beq	18288 <__assert_fail@plt+0x6fb0>
   182b4:	ldr	r3, [r8, #24]
   182b8:	add	r1, r3, r1, lsl #2
   182bc:	bl	178e0 <__assert_fail@plt+0x6608>
   182c0:	cmp	r0, #0
   182c4:	str	r0, [r6, #-2096]	; 0xfffff7d0
   182c8:	beq	18284 <__assert_fail@plt+0x6fac>
   182cc:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   182d0:	bl	23198 <__assert_fail@plt+0x11ec0>
   182d4:	ldr	r5, [sp, #24]
   182d8:	ldr	r6, [sp, #4]
   182dc:	mov	r4, #0
   182e0:	ldr	r0, [r5, #8]
   182e4:	add	r4, r4, #1
   182e8:	bl	23198 <__assert_fail@plt+0x11ec0>
   182ec:	cmp	r4, r6
   182f0:	add	r5, r5, #12
   182f4:	bne	182e0 <__assert_fail@plt+0x7008>
   182f8:	mov	r0, #0
   182fc:	add	sp, sp, #14400	; 0x3840
   18300:	add	sp, sp, #28
   18304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18308:	ldrb	r3, [r3, r2, lsl #3]
   1830c:	add	r2, sp, #88	; 0x58
   18310:	and	r1, r3, #31
   18314:	asr	r3, r3, #5
   18318:	ldr	r2, [r2, r3, lsl #2]
   1831c:	orr	r2, r2, ip, lsl r1
   18320:	add	r1, sp, #88	; 0x58
   18324:	str	r2, [r1, r3, lsl #2]
   18328:	cmp	r4, #0
   1832c:	beq	18414 <__assert_fail@plt+0x713c>
   18330:	tst	r4, #32
   18334:	bne	1867c <__assert_fail@plt+0x73a4>
   18338:	tst	r4, #128	; 0x80
   1833c:	bne	186ac <__assert_fail@plt+0x73d4>
   18340:	tst	r4, #4
   18344:	beq	183ac <__assert_fail@plt+0x70d4>
   18348:	ldr	r3, [sp, #4]
   1834c:	cmp	r3, #1
   18350:	beq	1896c <__assert_fail@plt+0x7694>
   18354:	ldr	r2, [sp, #28]
   18358:	ldr	r3, [r2, #92]	; 0x5c
   1835c:	cmp	r3, #1
   18360:	ble	18998 <__assert_fail@plt+0x76c0>
   18364:	ldr	lr, [r2, #60]	; 0x3c
   18368:	ldr	r6, [sp, #36]	; 0x24
   1836c:	add	r0, sp, #88	; 0x58
   18370:	sub	lr, lr, #4
   18374:	add	r1, r2, #96	; 0x60
   18378:	mov	ip, #0
   1837c:	ldr	r3, [lr, #4]!
   18380:	ldr	r5, [r1], #4
   18384:	ldr	r2, [r0]
   18388:	mvn	r3, r3
   1838c:	orr	r3, r3, r5
   18390:	and	r3, r3, r2
   18394:	cmp	r6, r1
   18398:	str	r3, [r0], #4
   1839c:	orr	ip, ip, r3
   183a0:	bne	1837c <__assert_fail@plt+0x70a4>
   183a4:	cmp	ip, #0
   183a8:	beq	18570 <__assert_fail@plt+0x7298>
   183ac:	tst	r4, #8
   183b0:	beq	18414 <__assert_fail@plt+0x713c>
   183b4:	ldr	r3, [sp, #4]
   183b8:	cmp	r3, #1
   183bc:	beq	186c0 <__assert_fail@plt+0x73e8>
   183c0:	ldr	r2, [sp, #28]
   183c4:	ldr	r3, [r2, #92]	; 0x5c
   183c8:	cmp	r3, #1
   183cc:	ble	186d4 <__assert_fail@plt+0x73fc>
   183d0:	ldr	lr, [r2, #60]	; 0x3c
   183d4:	ldr	r5, [sp, #36]	; 0x24
   183d8:	add	ip, sp, #88	; 0x58
   183dc:	sub	lr, lr, #4
   183e0:	add	r0, r2, #96	; 0x60
   183e4:	mov	r1, #0
   183e8:	ldr	r2, [r0], #4
   183ec:	ldr	r4, [lr, #4]!
   183f0:	ldr	r3, [ip]
   183f4:	and	r2, r2, r4
   183f8:	bic	r3, r3, r2
   183fc:	cmp	r5, r0
   18400:	str	r3, [ip], #4
   18404:	orr	r1, r1, r3
   18408:	bne	183e8 <__assert_fail@plt+0x7110>
   1840c:	cmp	r1, #0
   18410:	beq	18570 <__assert_fail@plt+0x7298>
   18414:	cmp	r8, #0
   18418:	movle	r6, #0
   1841c:	ble	18568 <__assert_fail@plt+0x7290>
   18420:	add	r3, sp, #3152	; 0xc50
   18424:	add	r3, r3, #8
   18428:	ldr	ip, [sp, #32]
   1842c:	mov	r7, r3
   18430:	mov	r6, #0
   18434:	str	r3, [sp, #24]
   18438:	ldr	r3, [sp, #4]
   1843c:	cmp	r3, #1
   18440:	beq	1857c <__assert_fail@plt+0x72a4>
   18444:	add	r0, sp, #88	; 0x58
   18448:	add	r9, sp, #1104	; 0x450
   1844c:	add	r9, r9, #8
   18450:	add	r4, ip, #32
   18454:	mov	r1, ip
   18458:	mov	r5, r0
   1845c:	mov	lr, #0
   18460:	ldr	r2, [r1, #4]!
   18464:	ldr	r3, [r5], #4
   18468:	cmp	r1, r4
   1846c:	and	r3, r3, r2
   18470:	str	r3, [r9], #4
   18474:	orr	lr, lr, r3
   18478:	bne	18460 <__assert_fail@plt+0x7188>
   1847c:	cmp	lr, #0
   18480:	beq	18554 <__assert_fail@plt+0x727c>
   18484:	mov	r5, #0
   18488:	add	fp, sp, #2128	; 0x850
   1848c:	mov	sl, r5
   18490:	add	fp, fp, #8
   18494:	mov	lr, ip
   18498:	ldr	r3, [r0]
   1849c:	ldr	r9, [lr, #4]!
   184a0:	bic	r2, r9, r3
   184a4:	cmp	r1, lr
   184a8:	bic	r3, r3, r9
   184ac:	str	r2, [fp], #4
   184b0:	orr	sl, sl, r2
   184b4:	str	r3, [r0], #4
   184b8:	orr	r5, r5, r3
   184bc:	bne	18498 <__assert_fail@plt+0x71c0>
   184c0:	cmp	sl, #0
   184c4:	beq	1852c <__assert_fail@plt+0x7254>
   184c8:	add	sl, sp, #2128	; 0x850
   184cc:	add	sl, sl, #8
   184d0:	add	lr, sp, #14400	; 0x3840
   184d4:	ldm	sl!, {r0, r1, r2, r3}
   184d8:	add	lr, lr, #24
   184dc:	add	lr, lr, r8, lsl #5
   184e0:	sub	lr, lr, #8192	; 0x2000
   184e4:	add	r9, sp, #1104	; 0x450
   184e8:	stmia	lr!, {r0, r1, r2, r3}
   184ec:	add	r9, r9, #8
   184f0:	ldm	sl, {r0, r1, r2, r3}
   184f4:	add	ip, ip, #4
   184f8:	add	fp, r8, r8, lsl #1
   184fc:	stm	lr, {r0, r1, r2, r3}
   18500:	ldm	r9!, {r0, r1, r2, r3}
   18504:	stmia	ip!, {r0, r1, r2, r3}
   18508:	ldm	r9, {r0, r1, r2, r3}
   1850c:	stm	ip, {r0, r1, r2, r3}
   18510:	mov	r1, r7
   18514:	ldr	r3, [sp, #24]
   18518:	add	r0, r3, fp, lsl #2
   1851c:	bl	16e70 <__assert_fail@plt+0x5b98>
   18520:	cmp	r0, #0
   18524:	bne	185bc <__assert_fail@plt+0x72e4>
   18528:	add	r8, r8, #1
   1852c:	ldr	r3, [sp, #8]
   18530:	ldr	r2, [sp, #12]
   18534:	mov	r0, r7
   18538:	ldr	r3, [r3, #12]
   1853c:	ldr	r1, [r3, r2]
   18540:	bl	15dd4 <__assert_fail@plt+0x4afc>
   18544:	cmp	r0, #0
   18548:	beq	185bc <__assert_fail@plt+0x72e4>
   1854c:	cmp	r5, #0
   18550:	beq	18568 <__assert_fail@plt+0x7290>
   18554:	add	r6, r6, #1
   18558:	cmp	r6, r8
   1855c:	mov	ip, r4
   18560:	add	r7, r7, #12
   18564:	blt	18438 <__assert_fail@plt+0x7160>
   18568:	cmp	r8, r6
   1856c:	beq	189dc <__assert_fail@plt+0x7704>
   18570:	ldr	r3, [sp, #8]
   18574:	ldr	r1, [r3, #8]
   18578:	b	181bc <__assert_fail@plt+0x6ee4>
   1857c:	ldr	r3, [sp, #20]
   18580:	ldrb	r1, [r3]
   18584:	lsl	r3, r6, #5
   18588:	and	r2, r1, #31
   1858c:	asr	r1, r1, #5
   18590:	add	r3, r3, r1, lsl #2
   18594:	add	r1, sp, #14400	; 0x3840
   18598:	add	r1, r1, #24
   1859c:	add	r3, r1, r3
   185a0:	sub	r3, r3, #8192	; 0x2000
   185a4:	ldr	r3, [r3]
   185a8:	lsr	r2, r3, r2
   185ac:	tst	r2, #1
   185b0:	addeq	r4, ip, #32
   185b4:	beq	18554 <__assert_fail@plt+0x727c>
   185b8:	b	18444 <__assert_fail@plt+0x716c>
   185bc:	str	r8, [sp, #4]
   185c0:	ldr	r5, [sp, #24]
   185c4:	ldr	r6, [sp, #4]
   185c8:	mov	r4, #0
   185cc:	ldr	r0, [r5, #8]
   185d0:	add	r4, r4, #1
   185d4:	bl	23198 <__assert_fail@plt+0x11ec0>
   185d8:	cmp	r4, r6
   185dc:	add	r5, r5, #12
   185e0:	bne	185cc <__assert_fail@plt+0x72f4>
   185e4:	b	182f8 <__assert_fail@plt+0x7020>
   185e8:	ldr	r0, [r3, r2, lsl #3]
   185ec:	add	r1, sp, #88	; 0x58
   185f0:	sub	r2, r0, #4
   185f4:	add	r0, r0, #28
   185f8:	ldr	r3, [r1]
   185fc:	ldr	ip, [r2, #4]!
   18600:	orr	r3, r3, ip
   18604:	cmp	r2, r0
   18608:	str	r3, [r1], #4
   1860c:	bne	185f8 <__assert_fail@plt+0x7320>
   18610:	b	18328 <__assert_fail@plt+0x7050>
   18614:	ldr	r2, [sp, #28]
   18618:	ldr	r3, [r2, #92]	; 0x5c
   1861c:	cmp	r3, #1
   18620:	ble	18a6c <__assert_fail@plt+0x7794>
   18624:	ldr	r0, [r2, #60]	; 0x3c
   18628:	add	r1, sp, #88	; 0x58
   1862c:	sub	r2, r0, #4
   18630:	add	r0, r0, #28
   18634:	ldr	r3, [r1]
   18638:	ldr	ip, [r2, #4]!
   1863c:	orr	r3, r3, ip
   18640:	cmp	r2, r0
   18644:	str	r3, [r1], #4
   18648:	bne	18634 <__assert_fail@plt+0x735c>
   1864c:	ldr	r3, [sp, #28]
   18650:	ldr	r3, [r3, #128]	; 0x80
   18654:	tst	r3, #64	; 0x40
   18658:	ldreq	r2, [sp, #88]	; 0x58
   1865c:	biceq	r2, r2, #1024	; 0x400
   18660:	streq	r2, [sp, #88]	; 0x58
   18664:	tst	r3, #128	; 0x80
   18668:	beq	18328 <__assert_fail@plt+0x7050>
   1866c:	ldr	r3, [sp, #88]	; 0x58
   18670:	bic	r3, r3, #1
   18674:	str	r3, [sp, #88]	; 0x58
   18678:	b	18328 <__assert_fail@plt+0x7050>
   1867c:	ldr	r5, [sp, #88]	; 0x58
   18680:	mov	r2, #32
   18684:	mov	r1, #0
   18688:	and	r5, r5, #1024	; 0x400
   1868c:	add	r0, sp, #88	; 0x58
   18690:	bl	111f4 <memset@plt>
   18694:	cmp	r5, #0
   18698:	beq	18570 <__assert_fail@plt+0x7298>
   1869c:	mov	r3, #1024	; 0x400
   186a0:	tst	r4, #128	; 0x80
   186a4:	str	r3, [sp, #88]	; 0x58
   186a8:	beq	18340 <__assert_fail@plt+0x7068>
   186ac:	mov	r2, #32
   186b0:	mov	r1, #0
   186b4:	add	r0, sp, #88	; 0x58
   186b8:	bl	111f4 <memset@plt>
   186bc:	b	18570 <__assert_fail@plt+0x7298>
   186c0:	ldr	r3, [sp, #20]
   186c4:	ldrb	r3, [r3, #6]
   186c8:	tst	r3, #64	; 0x40
   186cc:	beq	183c0 <__assert_fail@plt+0x70e8>
   186d0:	b	186ac <__assert_fail@plt+0x73d4>
   186d4:	ldr	r3, [sp, #28]
   186d8:	ldr	lr, [sp, #36]	; 0x24
   186dc:	add	ip, sp, #88	; 0x58
   186e0:	add	r0, r3, #96	; 0x60
   186e4:	mov	r1, #0
   186e8:	ldr	r2, [r0], #4
   186ec:	ldr	r3, [ip]
   186f0:	cmp	lr, r0
   186f4:	bic	r3, r3, r2
   186f8:	str	r3, [ip], #4
   186fc:	orr	r1, r1, r3
   18700:	bne	186e8 <__assert_fail@plt+0x7410>
   18704:	b	1840c <__assert_fail@plt+0x7134>
   18708:	mov	r3, r9
   1870c:	add	r2, sp, #44	; 0x2c
   18710:	mov	r1, r8
   18714:	ldr	r0, [sp, #16]
   18718:	bl	17034 <__assert_fail@plt+0x5d5c>
   1871c:	ldr	r3, [sp, #12]
   18720:	cmp	r0, #0
   18724:	str	r0, [r3, #4]!
   18728:	mov	r7, r0
   1872c:	str	r3, [sp, #12]
   18730:	beq	189cc <__assert_fail@plt+0x76f4>
   18734:	ldrsb	r3, [r7, #52]	; 0x34
   18738:	cmp	r3, #0
   1873c:	strge	r7, [sl]
   18740:	strge	r7, [r6, fp, lsl #2]
   18744:	blt	18900 <__assert_fail@plt+0x7628>
   18748:	add	r7, sp, #56	; 0x38
   1874c:	add	r0, r5, #32
   18750:	mov	r1, r7
   18754:	ldr	r3, [r1]
   18758:	ldr	r2, [r5, #4]!
   1875c:	orr	r3, r3, r2
   18760:	cmp	r0, r5
   18764:	str	r3, [r1], #4
   18768:	bne	18754 <__assert_fail@plt+0x747c>
   1876c:	ldr	r3, [sp, #4]
   18770:	add	fp, fp, #1
   18774:	cmp	fp, r3
   18778:	add	r4, r4, #12
   1877c:	add	sl, sl, #4
   18780:	mov	r5, r0
   18784:	bne	1826c <__assert_fail@plt+0x6f94>
   18788:	ldr	r3, [sp, #20]
   1878c:	cmp	r3, #0
   18790:	bne	18ad4 <__assert_fail@plt+0x77fc>
   18794:	mov	r1, #256	; 0x100
   18798:	mov	r0, #4
   1879c:	bl	22f84 <__assert_fail@plt+0x11cac>
   187a0:	ldr	r3, [sp, #8]
   187a4:	cmp	r0, #0
   187a8:	str	r0, [r3, #44]	; 0x2c
   187ac:	beq	182cc <__assert_fail@plt+0x6ff4>
   187b0:	add	ip, sp, #6208	; 0x1840
   187b4:	add	r9, r8, #96	; 0x60
   187b8:	mov	r5, r0
   187bc:	add	ip, ip, #24
   187c0:	add	sl, r0, #1024	; 0x400
   187c4:	ldr	r1, [r7], #4
   187c8:	cmp	r1, #0
   187cc:	movne	lr, r5
   187d0:	movne	r2, #1
   187d4:	bne	187ec <__assert_fail@plt+0x7514>
   187d8:	b	18838 <__assert_fail@plt+0x7560>
   187dc:	lsrs	r1, r1, #1
   187e0:	lsl	r2, r2, #1
   187e4:	add	lr, lr, #4
   187e8:	beq	18838 <__assert_fail@plt+0x7560>
   187ec:	tst	r1, #1
   187f0:	beq	187dc <__assert_fail@plt+0x7504>
   187f4:	ldr	r3, [ip]
   187f8:	ands	r3, r2, r3
   187fc:	bne	18acc <__assert_fail@plt+0x77f4>
   18800:	add	r3, r3, #1
   18804:	ldr	r4, [ip, r3, lsl #5]
   18808:	tst	r2, r4
   1880c:	beq	18800 <__assert_fail@plt+0x7528>
   18810:	ldr	r4, [r9]
   18814:	add	r3, r6, r3, lsl #2
   18818:	tst	r2, r4
   1881c:	add	lr, lr, #4
   18820:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   18824:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   18828:	lsrs	r1, r1, #1
   1882c:	str	r3, [lr, #-4]
   18830:	lsl	r2, r2, #1
   18834:	bne	187ec <__assert_fail@plt+0x7514>
   18838:	add	r5, r5, #128	; 0x80
   1883c:	cmp	sl, r5
   18840:	add	r9, r9, #4
   18844:	add	ip, ip, #4
   18848:	bne	187c4 <__assert_fail@plt+0x74ec>
   1884c:	ldr	r3, [r6, #-2080]	; 0xfffff7e0
   18850:	tst	r3, #1024	; 0x400
   18854:	beq	18894 <__assert_fail@plt+0x75bc>
   18858:	mov	r3, #0
   1885c:	b	1886c <__assert_fail@plt+0x7594>
   18860:	add	r3, r3, #1
   18864:	cmp	fp, r3
   18868:	beq	18894 <__assert_fail@plt+0x75bc>
   1886c:	add	r2, sp, #6208	; 0x1840
   18870:	add	r2, r2, #24
   18874:	ldr	r2, [r2, r3, lsl #5]
   18878:	tst	r2, #1024	; 0x400
   1887c:	beq	18860 <__assert_fail@plt+0x7588>
   18880:	ldr	r2, [sp, #20]
   18884:	ldr	r3, [r6, r3, lsl #2]
   18888:	cmp	r2, #0
   1888c:	str	r3, [r0, #40]	; 0x28
   18890:	strne	r3, [r0, #1064]	; 0x428
   18894:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   18898:	add	r8, fp, fp, lsl #1
   1889c:	bl	23198 <__assert_fail@plt+0x11ec0>
   188a0:	ldr	r5, [sp, #24]
   188a4:	mov	r4, #0
   188a8:	lsl	r8, r8, #2
   188ac:	add	r3, r5, r4
   188b0:	add	r4, r4, #12
   188b4:	ldr	r0, [r3, #8]
   188b8:	bl	23198 <__assert_fail@plt+0x11ec0>
   188bc:	cmp	r8, r4
   188c0:	bne	188ac <__assert_fail@plt+0x75d4>
   188c4:	mov	r0, #1
   188c8:	b	182fc <__assert_fail@plt+0x7024>
   188cc:	ldr	r3, [sp, #28]
   188d0:	ldr	r2, [r3, #128]	; 0x80
   188d4:	mvn	r3, #0
   188d8:	tst	r2, #64	; 0x40
   188dc:	str	r3, [sp, #88]	; 0x58
   188e0:	str	r3, [sp, #92]	; 0x5c
   188e4:	str	r3, [sp, #96]	; 0x60
   188e8:	str	r3, [sp, #100]	; 0x64
   188ec:	biceq	r3, r3, #1024	; 0x400
   188f0:	streq	r3, [sp, #88]	; 0x58
   188f4:	tst	r2, #128	; 0x80
   188f8:	beq	18328 <__assert_fail@plt+0x7050>
   188fc:	b	1866c <__assert_fail@plt+0x7394>
   18900:	mov	r3, #1
   18904:	add	r2, sp, #44	; 0x2c
   18908:	mov	r1, r8
   1890c:	ldr	r0, [sp, #16]
   18910:	bl	17034 <__assert_fail@plt+0x5d5c>
   18914:	cmp	r0, #0
   18918:	str	r0, [sl]
   1891c:	beq	18abc <__assert_fail@plt+0x77e4>
   18920:	cmp	r7, r0
   18924:	beq	1893c <__assert_fail@plt+0x7664>
   18928:	ldr	r3, [r8, #92]	; 0x5c
   1892c:	ldr	r2, [sp, #20]
   18930:	cmp	r3, #1
   18934:	movgt	r2, #1
   18938:	str	r2, [sp, #20]
   1893c:	mov	r3, #2
   18940:	add	r2, sp, #44	; 0x2c
   18944:	mov	r1, r8
   18948:	ldr	r0, [sp, #16]
   1894c:	bl	17034 <__assert_fail@plt+0x5d5c>
   18950:	cmp	r0, #0
   18954:	str	r0, [r6, fp, lsl #2]
   18958:	bne	18748 <__assert_fail@plt+0x7470>
   1895c:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   18960:	cmp	r3, #0
   18964:	beq	18748 <__assert_fail@plt+0x7470>
   18968:	b	182cc <__assert_fail@plt+0x6ff4>
   1896c:	ldr	r3, [sp, #20]
   18970:	ldrb	r3, [r3, #6]
   18974:	tst	r3, #64	; 0x40
   18978:	bne	18354 <__assert_fail@plt+0x707c>
   1897c:	b	186ac <__assert_fail@plt+0x73d4>
   18980:	mov	r3, #12
   18984:	str	r3, [r6, #-2096]	; 0xfffff7d0
   18988:	add	r3, sp, #3152	; 0xc50
   1898c:	add	r3, r3, #8
   18990:	str	r3, [sp, #24]
   18994:	b	182d0 <__assert_fail@plt+0x6ff8>
   18998:	ldr	r3, [sp, #28]
   1899c:	ldr	lr, [sp, #36]	; 0x24
   189a0:	add	r1, sp, #88	; 0x58
   189a4:	add	r2, r3, #96	; 0x60
   189a8:	mov	ip, #0
   189ac:	ldr	r3, [r2], #4
   189b0:	ldr	r0, [r1]
   189b4:	cmp	r2, lr
   189b8:	and	r3, r3, r0
   189bc:	str	r3, [r1], #4
   189c0:	orr	ip, ip, r3
   189c4:	bne	189ac <__assert_fail@plt+0x76d4>
   189c8:	b	183a4 <__assert_fail@plt+0x70cc>
   189cc:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   189d0:	cmp	r3, #0
   189d4:	beq	18734 <__assert_fail@plt+0x745c>
   189d8:	b	182cc <__assert_fail@plt+0x6ff4>
   189dc:	add	r4, sp, #88	; 0x58
   189e0:	add	ip, sp, #14400	; 0x3840
   189e4:	ldm	r4!, {r0, r1, r2, r3}
   189e8:	add	ip, ip, #24
   189ec:	add	ip, ip, r8, lsl #5
   189f0:	sub	ip, ip, #8192	; 0x2000
   189f4:	ldr	r5, [sp, #8]
   189f8:	stmia	ip!, {r0, r1, r2, r3}
   189fc:	add	r3, sp, #3152	; 0xc50
   18a00:	add	r3, r3, #8
   18a04:	mov	r6, r3
   18a08:	str	r3, [sp, #24]
   18a0c:	ldm	r4, {r0, r1, r2, r3}
   18a10:	add	lr, r8, r8, lsl #1
   18a14:	ldr	r5, [r5, #12]
   18a18:	add	r4, r6, lr, lsl #2
   18a1c:	stm	ip, {r0, r1, r2, r3}
   18a20:	mov	r3, #1
   18a24:	ldr	r2, [sp, #12]
   18a28:	mov	r0, #4
   18a2c:	ldr	r5, [r5, r2]
   18a30:	str	r3, [r6, lr, lsl #2]
   18a34:	str	r3, [r4, #4]
   18a38:	bl	22fcc <__assert_fail@plt+0x11cf4>
   18a3c:	cmp	r0, #0
   18a40:	str	r0, [r4, #8]
   18a44:	beq	18aa4 <__assert_fail@plt+0x77cc>
   18a48:	mov	r1, #0
   18a4c:	str	r5, [r0]
   18a50:	mov	r2, #32
   18a54:	add	r0, sp, #88	; 0x58
   18a58:	bl	111f4 <memset@plt>
   18a5c:	ldr	r3, [sp, #8]
   18a60:	add	r8, r8, #1
   18a64:	ldr	r1, [r3, #8]
   18a68:	b	181bc <__assert_fail@plt+0x6ee4>
   18a6c:	mov	r2, #32
   18a70:	mvn	r1, #0
   18a74:	add	r0, sp, #88	; 0x58
   18a78:	bl	111f4 <memset@plt>
   18a7c:	b	1864c <__assert_fail@plt+0x7374>
   18a80:	bne	182f8 <__assert_fail@plt+0x7020>
   18a84:	mov	r1, #256	; 0x100
   18a88:	mov	r0, #4
   18a8c:	bl	22f84 <__assert_fail@plt+0x11cac>
   18a90:	ldr	r3, [sp, #8]
   18a94:	str	r0, [r3, #44]	; 0x2c
   18a98:	adds	r0, r0, #0
   18a9c:	movne	r0, #1
   18aa0:	b	182fc <__assert_fail@plt+0x7024>
   18aa4:	cmp	r8, #0
   18aa8:	str	r8, [sp, #4]
   18aac:	str	r0, [r4, #4]
   18ab0:	str	r0, [r4]
   18ab4:	beq	182f8 <__assert_fail@plt+0x7020>
   18ab8:	b	185c0 <__assert_fail@plt+0x72e8>
   18abc:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   18ac0:	cmp	r3, #0
   18ac4:	beq	18928 <__assert_fail@plt+0x7650>
   18ac8:	b	182cc <__assert_fail@plt+0x6ff4>
   18acc:	mov	r3, #0
   18ad0:	b	18810 <__assert_fail@plt+0x7538>
   18ad4:	mov	r1, #512	; 0x200
   18ad8:	mov	r0, #4
   18adc:	bl	22f84 <__assert_fail@plt+0x11cac>
   18ae0:	ldr	r3, [sp, #8]
   18ae4:	cmp	r0, #0
   18ae8:	str	r0, [r3, #48]	; 0x30
   18aec:	beq	182cc <__assert_fail@plt+0x6ff4>
   18af0:	add	r1, sp, #6208	; 0x1840
   18af4:	mov	lr, r0
   18af8:	add	r1, r1, #24
   18afc:	add	r5, r0, #1024	; 0x400
   18b00:	ldr	ip, [r7], #4
   18b04:	cmp	ip, #0
   18b08:	movne	r4, lr
   18b0c:	movne	r2, #1
   18b10:	bne	18b28 <__assert_fail@plt+0x7850>
   18b14:	b	18b64 <__assert_fail@plt+0x788c>
   18b18:	lsrs	ip, ip, #1
   18b1c:	lsl	r2, r2, #1
   18b20:	add	r4, r4, #4
   18b24:	beq	18b64 <__assert_fail@plt+0x788c>
   18b28:	tst	ip, #1
   18b2c:	beq	18b18 <__assert_fail@plt+0x7840>
   18b30:	ldr	r3, [r1]
   18b34:	ands	r3, r2, r3
   18b38:	bne	18b78 <__assert_fail@plt+0x78a0>
   18b3c:	add	r3, r3, #1
   18b40:	ldr	r8, [r1, r3, lsl #5]
   18b44:	tst	r2, r8
   18b48:	beq	18b3c <__assert_fail@plt+0x7864>
   18b4c:	add	r3, r6, r3, lsl #2
   18b50:	ldr	r8, [r3, #-2048]	; 0xfffff800
   18b54:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   18b58:	str	r8, [r4]
   18b5c:	str	r3, [r4, #1024]	; 0x400
   18b60:	b	18b18 <__assert_fail@plt+0x7840>
   18b64:	add	lr, lr, #128	; 0x80
   18b68:	cmp	r5, lr
   18b6c:	add	r1, r1, #4
   18b70:	bne	18b00 <__assert_fail@plt+0x7828>
   18b74:	b	1884c <__assert_fail@plt+0x7574>
   18b78:	mov	r3, #0
   18b7c:	b	18b4c <__assert_fail@plt+0x7874>
   18b80:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18b84:	cmp	r1, #0
   18b88:	push	{r4, r5, r6, lr}
   18b8c:	mov	r5, r0
   18b90:	blt	18bec <__assert_fail@plt+0x7914>
   18b94:	ldr	r3, [r0, #48]	; 0x30
   18b98:	cmp	r1, r3
   18b9c:	beq	18c60 <__assert_fail@plt+0x7988>
   18ba0:	ldr	r3, [r0, #80]	; 0x50
   18ba4:	cmp	r3, #1
   18ba8:	ble	18bf4 <__assert_fail@plt+0x791c>
   18bac:	ldr	r3, [r0, #8]
   18bb0:	add	r3, r3, r1, lsl #2
   18bb4:	b	18bc0 <__assert_fail@plt+0x78e8>
   18bb8:	cmn	r1, #1
   18bbc:	beq	18bec <__assert_fail@plt+0x7914>
   18bc0:	ldr	r4, [r3], #-4
   18bc4:	sub	r1, r1, #1
   18bc8:	cmn	r4, #1
   18bcc:	beq	18bb8 <__assert_fail@plt+0x78e0>
   18bd0:	ldrb	r3, [r5, #78]	; 0x4e
   18bd4:	cmp	r3, #0
   18bd8:	bne	18c34 <__assert_fail@plt+0x795c>
   18bdc:	cmp	r4, #10
   18be0:	beq	18c20 <__assert_fail@plt+0x7948>
   18be4:	mov	r0, #0
   18be8:	pop	{r4, r5, r6, pc}
   18bec:	ldr	r0, [r5, #60]	; 0x3c
   18bf0:	pop	{r4, r5, r6, pc}
   18bf4:	ldr	r3, [r0, #4]
   18bf8:	ldr	r0, [r0, #68]	; 0x44
   18bfc:	ldrb	r3, [r3, r1]
   18c00:	and	r2, r3, #31
   18c04:	asr	r1, r3, #5
   18c08:	ldr	r0, [r0, r1, lsl #2]
   18c0c:	lsr	r0, r0, r2
   18c10:	ands	r0, r0, #1
   18c14:	bne	18c58 <__assert_fail@plt+0x7980>
   18c18:	cmp	r3, #10
   18c1c:	popne	{r4, r5, r6, pc}
   18c20:	ldrb	r0, [r5, #77]	; 0x4d
   18c24:	cmp	r0, #0
   18c28:	movne	r0, #2
   18c2c:	moveq	r0, #0
   18c30:	pop	{r4, r5, r6, pc}
   18c34:	mov	r0, r4
   18c38:	bl	111dc <iswalnum@plt>
   18c3c:	sub	r3, r4, #95	; 0x5f
   18c40:	clz	r3, r3
   18c44:	lsr	r3, r3, #5
   18c48:	cmp	r0, #0
   18c4c:	orrne	r3, r3, #1
   18c50:	cmp	r3, #0
   18c54:	beq	18bdc <__assert_fail@plt+0x7904>
   18c58:	mov	r0, #1
   18c5c:	pop	{r4, r5, r6, pc}
   18c60:	tst	r2, #2
   18c64:	moveq	r0, #10
   18c68:	movne	r0, #8
   18c6c:	pop	{r4, r5, r6, pc}
   18c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c74:	mov	r4, r0
   18c78:	ldr	r5, [r0, #24]
   18c7c:	sub	sp, sp, #36	; 0x24
   18c80:	cmp	r5, r1
   18c84:	mov	r6, r1
   18c88:	mov	r7, r2
   18c8c:	suble	r5, r1, r5
   18c90:	ble	18cf4 <__assert_fail@plt+0x7a1c>
   18c94:	ldr	r3, [r0, #80]	; 0x50
   18c98:	ldr	r1, [r0, #44]	; 0x2c
   18c9c:	cmp	r3, #1
   18ca0:	ldrb	r3, [r0, #75]	; 0x4b
   18ca4:	movgt	r2, #0
   18ca8:	strgt	r2, [r0, #16]
   18cac:	strgt	r2, [r0, #20]
   18cb0:	tst	r7, #1
   18cb4:	ldr	r2, [r0, #52]	; 0x34
   18cb8:	moveq	r0, #6
   18cbc:	movne	r0, #4
   18cc0:	cmp	r3, #0
   18cc4:	mov	r3, #0
   18cc8:	str	r3, [r4, #28]
   18ccc:	str	r3, [r4, #24]
   18cd0:	str	r3, [r4, #32]
   18cd4:	strb	r3, [r4, #76]	; 0x4c
   18cd8:	moveq	r5, r6
   18cdc:	ldreq	r3, [r4]
   18ce0:	movne	r5, r6
   18ce4:	str	r0, [r4, #60]	; 0x3c
   18ce8:	str	r1, [r4, #48]	; 0x30
   18cec:	str	r2, [r4, #56]	; 0x38
   18cf0:	streq	r3, [r4, #4]
   18cf4:	cmp	r5, #0
   18cf8:	ldreq	r3, [r4, #80]	; 0x50
   18cfc:	beq	18d8c <__assert_fail@plt+0x7ab4>
   18d00:	ldr	r2, [r4, #32]
   18d04:	ldrb	r3, [r4, #76]	; 0x4c
   18d08:	cmp	r5, r2
   18d0c:	bge	18e5c <__assert_fail@plt+0x7b84>
   18d10:	cmp	r3, #0
   18d14:	bne	18f20 <__assert_fail@plt+0x7c48>
   18d18:	mov	r2, r7
   18d1c:	sub	r1, r5, #1
   18d20:	mov	r0, r4
   18d24:	bl	18b84 <__assert_fail@plt+0x78ac>
   18d28:	ldr	r3, [r4, #80]	; 0x50
   18d2c:	cmp	r3, #1
   18d30:	str	r0, [r4, #60]	; 0x3c
   18d34:	ble	18d50 <__assert_fail@plt+0x7a78>
   18d38:	ldr	r2, [r4, #28]
   18d3c:	ldr	r0, [r4, #8]
   18d40:	sub	r2, r2, r5
   18d44:	add	r1, r0, r5, lsl #2
   18d48:	lsl	r2, r2, #2
   18d4c:	bl	11038 <memmove@plt>
   18d50:	ldrb	r3, [r4, #75]	; 0x4b
   18d54:	cmp	r3, #0
   18d58:	bne	19060 <__assert_fail@plt+0x7d88>
   18d5c:	ldr	r0, [r4, #28]
   18d60:	ldr	r1, [r4, #32]
   18d64:	mov	r2, r3
   18d68:	ldr	r3, [r4, #80]	; 0x50
   18d6c:	sub	r0, r0, r5
   18d70:	sub	r1, r1, r5
   18d74:	str	r0, [r4, #28]
   18d78:	str	r1, [r4, #32]
   18d7c:	cmp	r2, #0
   18d80:	ldreq	r2, [r4, #4]
   18d84:	addeq	r2, r2, r5
   18d88:	streq	r2, [r4, #4]
   18d8c:	ldr	r2, [r4, #48]	; 0x30
   18d90:	ldr	r1, [r4, #56]	; 0x38
   18d94:	cmp	r3, #1
   18d98:	sub	r3, r2, r5
   18d9c:	sub	r5, r1, r5
   18da0:	str	r6, [r4, #24]
   18da4:	str	r3, [r4, #48]	; 0x30
   18da8:	str	r5, [r4, #56]	; 0x38
   18dac:	ble	18de4 <__assert_fail@plt+0x7b0c>
   18db0:	ldrb	r3, [r4, #72]	; 0x48
   18db4:	mov	r0, r4
   18db8:	cmp	r3, #0
   18dbc:	bne	18dd4 <__assert_fail@plt+0x7afc>
   18dc0:	bl	14f70 <__assert_fail@plt+0x3c98>
   18dc4:	mov	r0, #0
   18dc8:	str	r0, [r4, #40]	; 0x28
   18dcc:	add	sp, sp, #36	; 0x24
   18dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd4:	bl	15108 <__assert_fail@plt+0x3e30>
   18dd8:	cmp	r0, #0
   18ddc:	beq	18dc4 <__assert_fail@plt+0x7aec>
   18de0:	b	18dcc <__assert_fail@plt+0x7af4>
   18de4:	ldrb	r2, [r4, #75]	; 0x4b
   18de8:	cmp	r2, #0
   18dec:	streq	r3, [r4, #28]
   18df0:	beq	18dc4 <__assert_fail@plt+0x7aec>
   18df4:	ldrb	r2, [r4, #72]	; 0x48
   18df8:	cmp	r2, #0
   18dfc:	bne	19344 <__assert_fail@plt+0x806c>
   18e00:	ldr	r0, [r4, #64]	; 0x40
   18e04:	cmp	r0, #0
   18e08:	beq	18dc4 <__assert_fail@plt+0x7aec>
   18e0c:	ldr	r1, [r4, #36]	; 0x24
   18e10:	ldr	r2, [r4, #28]
   18e14:	cmp	r3, r1
   18e18:	movge	r3, r1
   18e1c:	cmp	r3, r2
   18e20:	bgt	18e30 <__assert_fail@plt+0x7b58>
   18e24:	b	18e50 <__assert_fail@plt+0x7b78>
   18e28:	ldr	r6, [r4, #24]
   18e2c:	ldr	r0, [r4, #64]	; 0x40
   18e30:	ldm	r4, {r1, ip}
   18e34:	add	r1, r1, r2
   18e38:	ldrb	r1, [r1, r6]
   18e3c:	ldrb	r1, [r0, r1]
   18e40:	strb	r1, [ip, r2]
   18e44:	add	r2, r2, #1
   18e48:	cmp	r3, r2
   18e4c:	bne	18e28 <__assert_fail@plt+0x7b50>
   18e50:	str	r2, [r4, #28]
   18e54:	str	r2, [r4, #32]
   18e58:	b	18dc4 <__assert_fail@plt+0x7aec>
   18e5c:	ldr	r1, [r4, #28]
   18e60:	cmp	r3, #0
   18e64:	str	r1, [sp]
   18e68:	bne	19280 <__assert_fail@plt+0x7fa8>
   18e6c:	ldr	r3, [r4, #80]	; 0x50
   18e70:	mov	r1, #0
   18e74:	cmp	r3, #1
   18e78:	str	r1, [r4, #28]
   18e7c:	ble	191a0 <__assert_fail@plt+0x7ec8>
   18e80:	ldrb	r1, [r4, #73]	; 0x49
   18e84:	cmp	r1, #0
   18e88:	bne	190d4 <__assert_fail@plt+0x7dfc>
   18e8c:	ldr	r8, [r4, #24]
   18e90:	add	r8, r8, r2
   18e94:	cmp	r6, r8
   18e98:	ble	19428 <__assert_fail@plt+0x8150>
   18e9c:	add	r3, sp, #16
   18ea0:	add	sl, r4, #16
   18ea4:	add	fp, sp, #24
   18ea8:	str	r5, [sp, #4]
   18eac:	mov	r9, r3
   18eb0:	b	18ec0 <__assert_fail@plt+0x7be8>
   18eb4:	add	r8, r8, r3
   18eb8:	cmp	r6, r8
   18ebc:	ble	192ac <__assert_fail@plt+0x7fd4>
   18ec0:	ldm	sl, {r0, r1}
   18ec4:	ldr	r5, [r4, #44]	; 0x2c
   18ec8:	ldr	ip, [r4]
   18ecc:	sub	r5, r5, r8
   18ed0:	stm	fp, {r0, r1}
   18ed4:	mov	r2, r5
   18ed8:	mov	r3, sl
   18edc:	add	r1, ip, r8
   18ee0:	mov	r0, r9
   18ee4:	bl	23224 <__assert_fail@plt+0x11f4c>
   18ee8:	sub	r2, r0, #1
   18eec:	cmn	r2, #4
   18ef0:	mov	r3, r0
   18ef4:	ldrls	r2, [sp, #16]
   18ef8:	bls	18eb4 <__assert_fail@plt+0x7bdc>
   18efc:	mov	r2, #0
   18f00:	cmp	r5, r2
   18f04:	cmpne	r0, r2
   18f08:	ldm	fp, {r0, r1}
   18f0c:	ldrne	r3, [r4]
   18f10:	ldrbne	r2, [r3, r8]
   18f14:	mov	r3, #1
   18f18:	stm	sl, {r0, r1}
   18f1c:	b	18eb4 <__assert_fail@plt+0x7bdc>
   18f20:	ldr	sl, [r4, #28]
   18f24:	ldr	r9, [r4, #12]
   18f28:	mov	r3, sl
   18f2c:	mov	r2, #0
   18f30:	b	18f44 <__assert_fail@plt+0x7c6c>
   18f34:	ble	18f6c <__assert_fail@plt+0x7c94>
   18f38:	add	r2, r8, #1
   18f3c:	cmp	r2, r3
   18f40:	bge	18f64 <__assert_fail@plt+0x7c8c>
   18f44:	add	r1, r2, r3
   18f48:	add	r1, r1, r1, lsr #31
   18f4c:	asr	r8, r1, #1
   18f50:	ldr	r1, [r9, r8, lsl #2]
   18f54:	cmp	r5, r1
   18f58:	bge	18f34 <__assert_fail@plt+0x7c5c>
   18f5c:	mov	r3, r8
   18f60:	b	18f3c <__assert_fail@plt+0x7c64>
   18f64:	cmp	r5, r1
   18f68:	addgt	r8, r8, #1
   18f6c:	sub	fp, r8, #1
   18f70:	mov	r2, r7
   18f74:	mov	r1, fp
   18f78:	mov	r0, r4
   18f7c:	bl	18b84 <__assert_fail@plt+0x78ac>
   18f80:	cmp	r5, sl
   18f84:	movge	r3, #0
   18f88:	movlt	r3, #1
   18f8c:	cmp	r5, r8
   18f90:	movne	r3, #0
   18f94:	cmp	r3, #0
   18f98:	str	r0, [r4, #60]	; 0x3c
   18f9c:	bne	191f8 <__assert_fail@plt+0x7f20>
   18fa0:	ldr	r2, [r4, #44]	; 0x2c
   18fa4:	ldr	r3, [r4, #52]	; 0x34
   18fa8:	sub	r2, r2, r6
   18fac:	add	r2, r2, r5
   18fb0:	sub	r3, r3, r6
   18fb4:	add	r3, r3, r5
   18fb8:	str	r2, [r4, #48]	; 0x30
   18fbc:	cmp	r8, #0
   18fc0:	mov	r2, #0
   18fc4:	str	r3, [r4, #56]	; 0x38
   18fc8:	strb	r2, [r4, #76]	; 0x4c
   18fcc:	ble	19004 <__assert_fail@plt+0x7d2c>
   18fd0:	sub	r3, r8, #-1073741823	; 0xc0000001
   18fd4:	ldr	r2, [r9, r3, lsl #2]
   18fd8:	add	r3, r9, r3, lsl #2
   18fdc:	cmp	r5, r2
   18fe0:	beq	18ff8 <__assert_fail@plt+0x7d20>
   18fe4:	b	19004 <__assert_fail@plt+0x7d2c>
   18fe8:	ldr	r2, [r3, #-4]!
   18fec:	sub	fp, fp, #1
   18ff0:	cmp	r5, r2
   18ff4:	bne	19004 <__assert_fail@plt+0x7d2c>
   18ff8:	cmp	fp, #0
   18ffc:	mov	r8, fp
   19000:	bne	18fe8 <__assert_fail@plt+0x7d10>
   19004:	cmp	sl, r8
   19008:	ble	1907c <__assert_fail@plt+0x7da4>
   1900c:	ldr	r1, [r4, #8]
   19010:	lsl	r0, r8, #2
   19014:	add	r3, r1, r0
   19018:	ldr	r2, [r1, r8, lsl #2]
   1901c:	cmn	r2, #1
   19020:	rsbeq	r1, r1, #4
   19024:	beq	19038 <__assert_fail@plt+0x7d60>
   19028:	b	19084 <__assert_fail@plt+0x7dac>
   1902c:	ldr	r2, [r3, #4]!
   19030:	cmn	r2, #1
   19034:	bne	19084 <__assert_fail@plt+0x7dac>
   19038:	add	r8, r8, #1
   1903c:	cmp	sl, r8
   19040:	add	r0, r1, r3
   19044:	bne	1902c <__assert_fail@plt+0x7d54>
   19048:	mov	r2, #0
   1904c:	str	r2, [r4, #28]
   19050:	str	r2, [r4, #32]
   19054:	ldrb	r2, [r4, #75]	; 0x4b
   19058:	ldr	r3, [r4, #80]	; 0x50
   1905c:	b	18d7c <__assert_fail@plt+0x7aa4>
   19060:	ldr	r0, [r4, #4]
   19064:	ldr	r2, [r4, #28]
   19068:	add	r1, r0, r5
   1906c:	sub	r2, r2, r5
   19070:	bl	11038 <memmove@plt>
   19074:	ldrb	r3, [r4, #75]	; 0x4b
   19078:	b	18d5c <__assert_fail@plt+0x7a84>
   1907c:	beq	19048 <__assert_fail@plt+0x7d70>
   19080:	lsl	r0, r8, #2
   19084:	ldr	r2, [r9, r0]
   19088:	sub	r2, r2, r5
   1908c:	cmp	r2, #0
   19090:	str	r2, [r4, #28]
   19094:	beq	19050 <__assert_fail@plt+0x7d78>
   19098:	ble	190c0 <__assert_fail@plt+0x7de8>
   1909c:	ldr	r1, [r4, #8]
   190a0:	mov	r3, #0
   190a4:	sub	r1, r1, #4
   190a8:	mvn	r0, #0
   190ac:	str	r0, [r1, #4]!
   190b0:	ldr	r2, [r4, #28]
   190b4:	add	r3, r3, #1
   190b8:	cmp	r2, r3
   190bc:	bgt	190ac <__assert_fail@plt+0x7dd4>
   190c0:	mov	r1, #255	; 0xff
   190c4:	ldr	r0, [r4, #4]
   190c8:	bl	111f4 <memset@plt>
   190cc:	ldr	r2, [r4, #28]
   190d0:	b	19050 <__assert_fail@plt+0x7d78>
   190d4:	ldr	ip, [r4]
   190d8:	ldr	r8, [r4, #24]
   190dc:	sub	r3, r5, r3
   190e0:	add	r9, ip, r8
   190e4:	add	r3, r9, r3
   190e8:	cmp	ip, r3
   190ec:	sub	r0, r5, #1
   190f0:	movcc	ip, r3
   190f4:	add	r1, r9, r0
   190f8:	cmp	r1, ip
   190fc:	bcc	18e90 <__assert_fail@plt+0x7bb8>
   19100:	ldrb	r3, [r9, r0]
   19104:	and	r3, r3, #192	; 0xc0
   19108:	cmp	r3, #128	; 0x80
   1910c:	subeq	r3, r1, #1
   19110:	subeq	ip, ip, #1
   19114:	bne	19138 <__assert_fail@plt+0x7e60>
   19118:	cmp	ip, r3
   1911c:	mov	r1, r3
   19120:	beq	18e90 <__assert_fail@plt+0x7bb8>
   19124:	ldrb	r0, [r1]
   19128:	sub	r3, r3, #1
   1912c:	and	r0, r0, #192	; 0xc0
   19130:	cmp	r0, #128	; 0x80
   19134:	beq	19118 <__assert_fail@plt+0x7e40>
   19138:	ldr	r2, [r4, #48]	; 0x30
   1913c:	ldr	r3, [r4, #64]	; 0x40
   19140:	add	r2, r9, r2
   19144:	cmp	r3, #0
   19148:	mov	r8, r1
   1914c:	sub	r2, r2, r1
   19150:	bne	193e0 <__assert_fail@plt+0x8108>
   19154:	add	fp, sp, #24
   19158:	mov	r3, fp
   1915c:	mov	sl, #0
   19160:	add	r0, sp, #12
   19164:	str	sl, [sp, #24]
   19168:	str	sl, [sp, #28]
   1916c:	bl	23224 <__assert_fail@plt+0x11f4c>
   19170:	add	r9, r9, r5
   19174:	sub	r8, r9, r8
   19178:	cmp	r0, r8
   1917c:	movcc	r3, #0
   19180:	movcs	r3, #1
   19184:	cmn	r0, #3
   19188:	movhi	r3, #0
   1918c:	cmp	r3, sl
   19190:	bne	192f4 <__assert_fail@plt+0x801c>
   19194:	ldr	r8, [r4, #24]
   19198:	ldr	r2, [r4, #32]
   1919c:	b	18e90 <__assert_fail@plt+0x7bb8>
   191a0:	ldr	r2, [r4]
   191a4:	ldr	r0, [r4, #24]
   191a8:	add	r2, r2, r5
   191ac:	add	r2, r2, r0
   191b0:	ldr	ip, [r4, #64]	; 0x40
   191b4:	ldrb	r0, [r2, #-1]
   191b8:	cmp	ip, #0
   191bc:	str	r1, [r4, #32]
   191c0:	ldrbne	r0, [ip, r0]
   191c4:	ldr	ip, [r4, #68]	; 0x44
   191c8:	and	r2, r0, #31
   191cc:	asr	r1, r0, #5
   191d0:	ldr	r1, [ip, r1, lsl #2]
   191d4:	lsr	r2, r1, r2
   191d8:	ands	r1, r2, #1
   191dc:	movne	r1, #1
   191e0:	bne	191ec <__assert_fail@plt+0x7f14>
   191e4:	cmp	r0, #10
   191e8:	beq	193b4 <__assert_fail@plt+0x80dc>
   191ec:	ldrb	r2, [r4, #75]	; 0x4b
   191f0:	str	r1, [r4, #60]	; 0x3c
   191f4:	b	18d7c <__assert_fail@plt+0x7aa4>
   191f8:	ldr	r3, [r9, r8, lsl #2]
   191fc:	cmp	r5, r3
   19200:	bne	18fa0 <__assert_fail@plt+0x7cc8>
   19204:	ldr	r0, [r4, #8]
   19208:	sub	r2, sl, r5
   1920c:	lsl	r7, r5, #2
   19210:	lsl	r2, r2, #2
   19214:	add	r1, r0, r7
   19218:	bl	11038 <memmove@plt>
   1921c:	ldr	r0, [r4, #4]
   19220:	ldr	r2, [r4, #28]
   19224:	add	r1, r0, r5
   19228:	sub	r2, r2, r5
   1922c:	bl	11038 <memmove@plt>
   19230:	ldr	r3, [r4, #28]
   19234:	ldr	r2, [r4, #32]
   19238:	sub	r3, r3, r5
   1923c:	sub	r2, r2, r5
   19240:	cmp	r3, #0
   19244:	str	r3, [r4, #28]
   19248:	str	r2, [r4, #32]
   1924c:	ble	19054 <__assert_fail@plt+0x7d7c>
   19250:	ldr	r1, [r4, #12]
   19254:	mov	r2, #0
   19258:	add	r0, r1, r7
   1925c:	sub	r1, r1, #4
   19260:	ldr	r3, [r0], #4
   19264:	add	r2, r2, #1
   19268:	sub	r3, r3, r5
   1926c:	str	r3, [r1, #4]!
   19270:	ldr	r3, [r4, #28]
   19274:	cmp	r3, r2
   19278:	bgt	19260 <__assert_fail@plt+0x7f88>
   1927c:	b	19054 <__assert_fail@plt+0x7d7c>
   19280:	ldr	r1, [r4, #44]	; 0x2c
   19284:	ldr	r3, [r4, #52]	; 0x34
   19288:	sub	r1, r1, r6
   1928c:	add	r1, r1, r5
   19290:	sub	r3, r3, r6
   19294:	add	r3, r3, r5
   19298:	str	r1, [r4, #48]	; 0x30
   1929c:	mov	r1, #0
   192a0:	str	r3, [r4, #56]	; 0x38
   192a4:	strb	r1, [r4, #76]	; 0x4c
   192a8:	b	18e6c <__assert_fail@plt+0x7b94>
   192ac:	sub	r8, r8, r6
   192b0:	cmn	r2, #1
   192b4:	ldr	r5, [sp, #4]
   192b8:	mov	r9, r2
   192bc:	str	r8, [r4, #28]
   192c0:	bne	19310 <__assert_fail@plt+0x8038>
   192c4:	ldr	r3, [sp]
   192c8:	mov	r2, r7
   192cc:	sub	r1, r3, #1
   192d0:	mov	r0, r4
   192d4:	bl	18b84 <__assert_fail@plt+0x78ac>
   192d8:	str	r0, [r4, #60]	; 0x3c
   192dc:	cmp	r8, #0
   192e0:	bne	19350 <__assert_fail@plt+0x8078>
   192e4:	ldrb	r2, [r4, #75]	; 0x4b
   192e8:	str	r8, [r4, #32]
   192ec:	ldr	r3, [r4, #80]	; 0x50
   192f0:	b	18d7c <__assert_fail@plt+0x7aa4>
   192f4:	ldr	r9, [sp, #12]
   192f8:	sub	r8, r0, r8
   192fc:	cmn	r9, #1
   19300:	str	sl, [r4, #16]
   19304:	str	sl, [r4, #20]
   19308:	str	r8, [r4, #28]
   1930c:	beq	19194 <__assert_fail@plt+0x7ebc>
   19310:	ldrb	r3, [r4, #78]	; 0x4e
   19314:	cmp	r3, #0
   19318:	bne	1938c <__assert_fail@plt+0x80b4>
   1931c:	cmp	r9, #10
   19320:	movne	r3, #0
   19324:	beq	19330 <__assert_fail@plt+0x8058>
   19328:	str	r3, [r4, #60]	; 0x3c
   1932c:	b	192dc <__assert_fail@plt+0x8004>
   19330:	ldrb	r3, [r4, #77]	; 0x4d
   19334:	cmp	r3, #0
   19338:	movne	r3, #2
   1933c:	moveq	r3, #0
   19340:	b	19328 <__assert_fail@plt+0x8050>
   19344:	mov	r0, r4
   19348:	bl	15688 <__assert_fail@plt+0x43b0>
   1934c:	b	18dc4 <__assert_fail@plt+0x7aec>
   19350:	ble	19378 <__assert_fail@plt+0x80a0>
   19354:	ldr	r2, [r4, #8]
   19358:	mov	r3, #0
   1935c:	sub	r2, r2, #4
   19360:	mvn	r1, #0
   19364:	str	r1, [r2, #4]!
   19368:	ldr	r8, [r4, #28]
   1936c:	add	r3, r3, #1
   19370:	cmp	r8, r3
   19374:	bgt	19364 <__assert_fail@plt+0x808c>
   19378:	ldrb	r2, [r4, #75]	; 0x4b
   1937c:	cmp	r2, #0
   19380:	bne	193c8 <__assert_fail@plt+0x80f0>
   19384:	ldr	r8, [r4, #28]
   19388:	b	192e8 <__assert_fail@plt+0x8010>
   1938c:	mov	r0, r9
   19390:	bl	111dc <iswalnum@plt>
   19394:	cmp	r9, #95	; 0x5f
   19398:	clz	r0, r0
   1939c:	lsr	r0, r0, #5
   193a0:	moveq	r0, #0
   193a4:	cmp	r0, #0
   193a8:	moveq	r3, #1
   193ac:	bne	1931c <__assert_fail@plt+0x8044>
   193b0:	b	19328 <__assert_fail@plt+0x8050>
   193b4:	ldrb	r1, [r4, #77]	; 0x4d
   193b8:	cmp	r1, #0
   193bc:	movne	r1, #2
   193c0:	moveq	r1, #0
   193c4:	b	191ec <__assert_fail@plt+0x7f14>
   193c8:	mov	r2, r8
   193cc:	mov	r1, #255	; 0xff
   193d0:	ldr	r0, [r4, #4]
   193d4:	bl	111f4 <memset@plt>
   193d8:	ldrb	r2, [r4, #75]	; 0x4b
   193dc:	b	19384 <__assert_fail@plt+0x80ac>
   193e0:	cmp	r2, #6
   193e4:	movlt	r0, r2
   193e8:	movge	r0, #6
   193ec:	cmp	r0, #0
   193f0:	ble	19434 <__assert_fail@plt+0x815c>
   193f4:	add	ip, sp, #16
   193f8:	mov	lr, ip
   193fc:	mov	sl, ip
   19400:	sub	ip, r0, #1
   19404:	add	ip, lr, ip
   19408:	add	r0, r1, r0
   1940c:	ldrb	lr, [r0, #-1]!
   19410:	cmp	r1, r0
   19414:	ldrb	lr, [r3, lr]
   19418:	strb	lr, [ip], #-1
   1941c:	bne	1940c <__assert_fail@plt+0x8134>
   19420:	mov	r1, sl
   19424:	b	19154 <__assert_fail@plt+0x7e7c>
   19428:	sub	r8, r8, r6
   1942c:	str	r8, [r4, #28]
   19430:	b	192c4 <__assert_fail@plt+0x7fec>
   19434:	add	r3, sp, #16
   19438:	mov	sl, r3
   1943c:	b	19420 <__assert_fail@plt+0x8148>
   19440:	ldrb	ip, [r1, #4]
   19444:	ldr	r3, [r0, #4]
   19448:	push	{r4, lr}
   1944c:	sub	ip, ip, #1
   19450:	ldrb	r3, [r3, r2]
   19454:	cmp	ip, #6
   19458:	ldrls	pc, [pc, ip, lsl #2]
   1945c:	b	19488 <__assert_fail@plt+0x81b0>
   19460:	andeq	r9, r1, ip, ror r4
   19464:	andeq	r9, r1, r8, lsl #9
   19468:	andeq	r9, r1, ip, lsl r5
   1946c:	andeq	r9, r1, r8, lsl #9
   19470:	muleq	r1, r8, r4
   19474:	andeq	r9, r1, r8, lsl #9
   19478:	muleq	r1, r0, r4
   1947c:	ldrb	ip, [r1]
   19480:	cmp	ip, r3
   19484:	beq	194b8 <__assert_fail@plt+0x81e0>
   19488:	mov	r0, #0
   1948c:	pop	{r4, pc}
   19490:	tst	r3, #128	; 0x80
   19494:	bne	19488 <__assert_fail@plt+0x81b0>
   19498:	cmp	r3, #10
   1949c:	beq	19558 <__assert_fail@plt+0x8280>
   194a0:	cmp	r3, #0
   194a4:	bne	194b8 <__assert_fail@plt+0x81e0>
   194a8:	ldr	ip, [r0, #84]	; 0x54
   194ac:	ldr	ip, [ip, #128]	; 0x80
   194b0:	tst	ip, #128	; 0x80
   194b4:	bne	19488 <__assert_fail@plt+0x81b0>
   194b8:	ldr	r4, [r1, #4]
   194bc:	ldr	r3, [pc, #168]	; 1956c <__assert_fail@plt+0x8294>
   194c0:	and	r3, r3, r4
   194c4:	cmp	r3, #0
   194c8:	beq	1953c <__assert_fail@plt+0x8264>
   194cc:	mov	r1, r2
   194d0:	ldr	r2, [r0, #88]	; 0x58
   194d4:	bl	18b84 <__assert_fail@plt+0x78ac>
   194d8:	ldr	r1, [pc, #144]	; 19570 <__assert_fail@plt+0x8298>
   194dc:	and	r1, r1, r4, lsr #8
   194e0:	ands	r2, r1, #4
   194e4:	bne	19544 <__assert_fail@plt+0x826c>
   194e8:	tst	r1, #8
   194ec:	beq	194f8 <__assert_fail@plt+0x8220>
   194f0:	tst	r0, #1
   194f4:	bne	19488 <__assert_fail@plt+0x81b0>
   194f8:	tst	r1, #32
   194fc:	beq	19508 <__assert_fail@plt+0x8230>
   19500:	ands	r3, r0, #2
   19504:	beq	19488 <__assert_fail@plt+0x81b0>
   19508:	tst	r1, #128	; 0x80
   1950c:	beq	1953c <__assert_fail@plt+0x8264>
   19510:	lsr	r0, r0, #3
   19514:	and	r0, r0, #1
   19518:	pop	{r4, pc}
   1951c:	ldr	ip, [r1]
   19520:	asr	lr, r3, #5
   19524:	and	r3, r3, #31
   19528:	ldr	ip, [ip, lr, lsl #2]
   1952c:	lsr	r3, ip, r3
   19530:	ands	r3, r3, #1
   19534:	bne	194b8 <__assert_fail@plt+0x81e0>
   19538:	b	19488 <__assert_fail@plt+0x81b0>
   1953c:	mov	r0, #1
   19540:	pop	{r4, pc}
   19544:	ands	r3, r0, #1
   19548:	beq	19488 <__assert_fail@plt+0x81b0>
   1954c:	tst	r1, #8
   19550:	bne	19488 <__assert_fail@plt+0x81b0>
   19554:	b	194f8 <__assert_fail@plt+0x8220>
   19558:	ldr	r3, [r0, #84]	; 0x54
   1955c:	ldr	r3, [r3, #128]	; 0x80
   19560:	ands	r3, r3, #64	; 0x40
   19564:	bne	194b8 <__assert_fail@plt+0x81e0>
   19568:	b	19488 <__assert_fail@plt+0x81b0>
   1956c:	andeq	pc, r3, r0, lsl #30
   19570:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19574:	push	{r4, r5, r6, r7, r8, lr}
   19578:	mov	r4, r1
   1957c:	mov	r1, r2
   19580:	ldr	r2, [r0, #88]	; 0x58
   19584:	mov	r5, r0
   19588:	bl	18b84 <__assert_fail@plt+0x78ac>
   1958c:	ldr	lr, [r4, #8]
   19590:	cmp	lr, #0
   19594:	ble	19634 <__assert_fail@plt+0x835c>
   19598:	ldr	r3, [r5, #84]	; 0x54
   1959c:	ldr	r1, [r4, #12]
   195a0:	ldr	r5, [pc, #168]	; 19650 <__assert_fail@plt+0x8378>
   195a4:	ldr	r4, [r3]
   195a8:	sub	r1, r1, #4
   195ac:	mov	r2, #0
   195b0:	and	r8, r0, #8
   195b4:	and	r7, r0, #2
   195b8:	and	r6, r0, #1
   195bc:	b	195cc <__assert_fail@plt+0x82f4>
   195c0:	add	r2, r2, #1
   195c4:	cmp	r2, lr
   195c8:	beq	19634 <__assert_fail@plt+0x835c>
   195cc:	ldr	r0, [r1, #4]!
   195d0:	add	r3, r4, r0, lsl #3
   195d4:	ldrb	ip, [r3, #4]
   195d8:	ldr	r3, [r3, #4]
   195dc:	cmp	ip, #2
   195e0:	and	r3, r5, r3, lsr #8
   195e4:	bne	195c0 <__assert_fail@plt+0x82e8>
   195e8:	cmp	r3, #0
   195ec:	popeq	{r4, r5, r6, r7, r8, pc}
   195f0:	tst	r3, #4
   195f4:	beq	1963c <__assert_fail@plt+0x8364>
   195f8:	cmp	r6, #0
   195fc:	beq	195c0 <__assert_fail@plt+0x82e8>
   19600:	tst	r3, #8
   19604:	bne	195c0 <__assert_fail@plt+0x82e8>
   19608:	tst	r3, #32
   1960c:	beq	19618 <__assert_fail@plt+0x8340>
   19610:	cmp	r7, #0
   19614:	beq	195c0 <__assert_fail@plt+0x82e8>
   19618:	tst	r3, #128	; 0x80
   1961c:	popeq	{r4, r5, r6, r7, r8, pc}
   19620:	cmp	r8, #0
   19624:	popne	{r4, r5, r6, r7, r8, pc}
   19628:	add	r2, r2, #1
   1962c:	cmp	r2, lr
   19630:	bne	195cc <__assert_fail@plt+0x82f4>
   19634:	mov	r0, #0
   19638:	pop	{r4, r5, r6, r7, r8, pc}
   1963c:	tst	r3, #8
   19640:	beq	19608 <__assert_fail@plt+0x8330>
   19644:	cmp	r6, #0
   19648:	beq	19608 <__assert_fail@plt+0x8330>
   1964c:	b	195c0 <__assert_fail@plt+0x82e8>
   19650:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19654:	ldr	ip, [r1]
   19658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1965c:	cmp	ip, #0
   19660:	sub	sp, sp, #20
   19664:	ldr	r6, [r0, #84]	; 0x54
   19668:	ble	19734 <__assert_fail@plt+0x845c>
   1966c:	mov	r7, r2
   19670:	str	r3, [sp, #8]
   19674:	mov	r8, r0
   19678:	str	r1, [sp, #4]
   1967c:	mov	r4, #0
   19680:	mov	r2, #24
   19684:	mov	r9, #1
   19688:	b	19694 <__assert_fail@plt+0x83bc>
   1968c:	cmp	r4, ip
   19690:	bge	19734 <__assert_fail@plt+0x845c>
   19694:	ldr	r1, [r7]
   19698:	ldr	r3, [r6]
   1969c:	ldr	r5, [r1, r4, lsl #2]
   196a0:	add	r4, r4, #1
   196a4:	add	r1, r3, r5, lsl #3
   196a8:	ldrb	r1, [r1, #4]
   196ac:	cmp	r1, #8
   196b0:	bne	1968c <__assert_fail@plt+0x83b4>
   196b4:	ldr	r3, [r3, r5, lsl #3]
   196b8:	cmp	r3, #31
   196bc:	bgt	1968c <__assert_fail@plt+0x83b4>
   196c0:	ldr	r1, [r6, #80]	; 0x50
   196c4:	lsr	r3, r1, r3
   196c8:	tst	r3, #1
   196cc:	beq	1968c <__assert_fail@plt+0x83b4>
   196d0:	ldr	sl, [r8, #124]	; 0x7c
   196d4:	ldr	r3, [r8, #128]	; 0x80
   196d8:	ldr	fp, [r8, #132]	; 0x84
   196dc:	cmp	r3, sl
   196e0:	beq	19748 <__assert_fail@plt+0x8470>
   196e4:	mov	r1, r2
   196e8:	mov	r0, r9
   196ec:	str	r2, [sp, #12]
   196f0:	bl	22f84 <__assert_fail@plt+0x11cac>
   196f4:	ldr	r3, [r8, #124]	; 0x7c
   196f8:	ldr	r1, [r8, #132]	; 0x84
   196fc:	add	ip, r3, #1
   19700:	str	r0, [fp, sl, lsl #2]
   19704:	ldr	r3, [r1, r3, lsl #2]
   19708:	cmp	r3, #0
   1970c:	beq	19740 <__assert_fail@plt+0x8468>
   19710:	ldr	r2, [sp, #8]
   19714:	str	r5, [r3, #4]
   19718:	str	ip, [r8, #124]	; 0x7c
   1971c:	str	r2, [r3]
   19720:	ldr	r3, [sp, #4]
   19724:	ldr	r2, [sp, #12]
   19728:	ldr	ip, [r3]
   1972c:	cmp	r4, ip
   19730:	blt	19694 <__assert_fail@plt+0x83bc>
   19734:	mov	r0, #0
   19738:	add	sp, sp, #20
   1973c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19740:	mov	r0, #12
   19744:	b	19738 <__assert_fail@plt+0x8460>
   19748:	mov	r0, fp
   1974c:	lsl	r1, sl, #3
   19750:	str	r2, [sp, #12]
   19754:	bl	22ff8 <__assert_fail@plt+0x11d20>
   19758:	lsl	r3, sl, #1
   1975c:	ldr	r2, [sp, #12]
   19760:	subs	fp, r0, #0
   19764:	beq	19740 <__assert_fail@plt+0x8468>
   19768:	ldr	sl, [r8, #124]	; 0x7c
   1976c:	str	fp, [r8, #132]	; 0x84
   19770:	str	r3, [r8, #128]	; 0x80
   19774:	b	196e4 <__assert_fail@plt+0x840c>
   19778:	push	{r4, r5, r6, lr}
   1977c:	mov	r5, r0
   19780:	mov	r0, r1
   19784:	mov	r4, r1
   19788:	bl	111b8 <strlen@plt>
   1978c:	cmp	r0, #1
   19790:	moveq	r1, #0
   19794:	ldrbeq	r3, [r4]
   19798:	movne	r1, #3
   1979c:	andeq	ip, r3, #31
   197a0:	asreq	r3, r3, #5
   197a4:	ldreq	r2, [r5, r3, lsl #2]
   197a8:	orreq	r2, r2, r0, lsl ip
   197ac:	mov	r0, r1
   197b0:	streq	r2, [r5, r3, lsl #2]
   197b4:	pop	{r4, r5, r6, pc}
   197b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   197bc:	mov	r6, r0
   197c0:	ldr	ip, [sp, #40]	; 0x28
   197c4:	mov	r5, r1
   197c8:	tst	ip, #4194304	; 0x400000
   197cc:	mov	sl, r2
   197d0:	mov	r7, r3
   197d4:	ldr	r9, [sp, #32]
   197d8:	beq	197f8 <__assert_fail@plt+0x8520>
   197dc:	ldr	r1, [pc, #2196]	; 1a078 <__assert_fail@plt+0x8da0>
   197e0:	ldr	r0, [sp, #36]	; 0x24
   197e4:	bl	11008 <strcmp@plt>
   197e8:	cmp	r0, #0
   197ec:	bne	198d8 <__assert_fail@plt+0x8600>
   197f0:	ldr	r3, [pc, #2180]	; 1a07c <__assert_fail@plt+0x8da4>
   197f4:	str	r3, [sp, #36]	; 0x24
   197f8:	ldr	r4, [r7]
   197fc:	ldr	r3, [r9]
   19800:	cmp	r3, r4
   19804:	beq	19908 <__assert_fail@plt+0x8630>
   19808:	ldr	r8, [sl]
   1980c:	add	r3, r4, #1
   19810:	str	r3, [r7]
   19814:	ldr	r0, [sp, #36]	; 0x24
   19818:	bl	10fd8 <wctype@plt>
   1981c:	ldr	r1, [pc, #2140]	; 1a080 <__assert_fail@plt+0x8da8>
   19820:	str	r0, [r8, r4, lsl #2]
   19824:	ldr	r0, [sp, #36]	; 0x24
   19828:	bl	11008 <strcmp@plt>
   1982c:	subs	r4, r0, #0
   19830:	beq	19890 <__assert_fail@plt+0x85b8>
   19834:	ldr	r1, [pc, #2120]	; 1a084 <__assert_fail@plt+0x8dac>
   19838:	ldr	r0, [sp, #36]	; 0x24
   1983c:	bl	11008 <strcmp@plt>
   19840:	subs	r4, r0, #0
   19844:	bne	19934 <__assert_fail@plt+0x865c>
   19848:	cmp	r6, #0
   1984c:	bne	19ae8 <__assert_fail@plt+0x8810>
   19850:	bl	111a0 <__ctype_b_loc@plt>
   19854:	mov	ip, #1
   19858:	ldr	r3, [r0]
   1985c:	sub	r3, r3, #2
   19860:	ldrh	r2, [r3, #2]!
   19864:	asr	r1, r4, #5
   19868:	and	r0, r4, #31
   1986c:	tst	r2, #2
   19870:	add	r4, r4, #1
   19874:	ldrne	r2, [r5, r1, lsl #2]
   19878:	orrne	r2, r2, ip, lsl r0
   1987c:	strne	r2, [r5, r1, lsl #2]
   19880:	cmp	r4, #256	; 0x100
   19884:	bne	19860 <__assert_fail@plt+0x8588>
   19888:	mov	r0, #0
   1988c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19890:	cmp	r6, #0
   19894:	bne	19a54 <__assert_fail@plt+0x877c>
   19898:	bl	111a0 <__ctype_b_loc@plt>
   1989c:	mov	lr, #1
   198a0:	ldr	r3, [r0]
   198a4:	sub	r3, r3, #2
   198a8:	ldrh	r0, [r3, #2]!
   198ac:	asr	r2, r4, #5
   198b0:	and	ip, r4, #31
   198b4:	tst	r0, #8
   198b8:	add	r4, r4, #1
   198bc:	ldrne	r1, [r5, r2, lsl #2]
   198c0:	orrne	r1, r1, lr, lsl ip
   198c4:	strne	r1, [r5, r2, lsl #2]
   198c8:	cmp	r4, #256	; 0x100
   198cc:	bne	198a8 <__assert_fail@plt+0x85d0>
   198d0:	mov	r0, #0
   198d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   198d8:	ldr	r0, [sp, #36]	; 0x24
   198dc:	ldr	r1, [pc, #1956]	; 1a088 <__assert_fail@plt+0x8db0>
   198e0:	bl	11008 <strcmp@plt>
   198e4:	ldr	r3, [pc, #1936]	; 1a07c <__assert_fail@plt+0x8da4>
   198e8:	ldr	r2, [sp, #36]	; 0x24
   198ec:	ldr	r4, [r7]
   198f0:	cmp	r0, #0
   198f4:	moveq	r2, r3
   198f8:	ldr	r3, [r9]
   198fc:	str	r2, [sp, #36]	; 0x24
   19900:	cmp	r3, r4
   19904:	bne	19808 <__assert_fail@plt+0x8530>
   19908:	lsl	r4, r4, #1
   1990c:	add	r4, r4, #1
   19910:	ldr	r0, [sl]
   19914:	lsl	r1, r4, #2
   19918:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1991c:	subs	r8, r0, #0
   19920:	beq	19be0 <__assert_fail@plt+0x8908>
   19924:	str	r8, [sl]
   19928:	str	r4, [r9]
   1992c:	ldr	r4, [r7]
   19930:	b	1980c <__assert_fail@plt+0x8534>
   19934:	ldr	r1, [pc, #1868]	; 1a088 <__assert_fail@plt+0x8db0>
   19938:	ldr	r0, [sp, #36]	; 0x24
   1993c:	bl	11008 <strcmp@plt>
   19940:	subs	r4, r0, #0
   19944:	beq	199a0 <__assert_fail@plt+0x86c8>
   19948:	ldr	r1, [pc, #1852]	; 1a08c <__assert_fail@plt+0x8db4>
   1994c:	ldr	r0, [sp, #36]	; 0x24
   19950:	bl	11008 <strcmp@plt>
   19954:	subs	r4, r0, #0
   19958:	bne	199e8 <__assert_fail@plt+0x8710>
   1995c:	cmp	r6, #0
   19960:	bne	19c40 <__assert_fail@plt+0x8968>
   19964:	bl	111a0 <__ctype_b_loc@plt>
   19968:	mov	ip, #1
   1996c:	ldr	r3, [r0]
   19970:	sub	r3, r3, #2
   19974:	ldrh	r2, [r3, #2]!
   19978:	asr	r1, r4, #5
   1997c:	and	r0, r4, #31
   19980:	tst	r2, #8192	; 0x2000
   19984:	add	r4, r4, #1
   19988:	ldrne	r2, [r5, r1, lsl #2]
   1998c:	orrne	r2, r2, ip, lsl r0
   19990:	strne	r2, [r5, r1, lsl #2]
   19994:	cmp	r4, #256	; 0x100
   19998:	bne	19974 <__assert_fail@plt+0x869c>
   1999c:	b	19888 <__assert_fail@plt+0x85b0>
   199a0:	cmp	r6, #0
   199a4:	bne	19b90 <__assert_fail@plt+0x88b8>
   199a8:	bl	111a0 <__ctype_b_loc@plt>
   199ac:	mov	ip, #1
   199b0:	ldr	r3, [r0]
   199b4:	sub	r3, r3, #2
   199b8:	ldrh	r2, [r3, #2]!
   199bc:	asr	r1, r4, #5
   199c0:	and	r0, r4, #31
   199c4:	tst	r2, #512	; 0x200
   199c8:	add	r4, r4, #1
   199cc:	ldrne	r2, [r5, r1, lsl #2]
   199d0:	orrne	r2, r2, ip, lsl r0
   199d4:	strne	r2, [r5, r1, lsl #2]
   199d8:	cmp	r4, #256	; 0x100
   199dc:	bne	199b8 <__assert_fail@plt+0x86e0>
   199e0:	mov	r0, #0
   199e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   199e8:	ldr	r1, [pc, #1676]	; 1a07c <__assert_fail@plt+0x8da4>
   199ec:	ldr	r0, [sp, #36]	; 0x24
   199f0:	bl	11008 <strcmp@plt>
   199f4:	subs	r4, r0, #0
   199f8:	beq	19aa4 <__assert_fail@plt+0x87cc>
   199fc:	ldr	r1, [pc, #1676]	; 1a090 <__assert_fail@plt+0x8db8>
   19a00:	ldr	r0, [sp, #36]	; 0x24
   19a04:	bl	11008 <strcmp@plt>
   19a08:	subs	r4, r0, #0
   19a0c:	bne	19b38 <__assert_fail@plt+0x8860>
   19a10:	cmp	r6, #0
   19a14:	bne	19e30 <__assert_fail@plt+0x8b58>
   19a18:	bl	111a0 <__ctype_b_loc@plt>
   19a1c:	mov	ip, #1
   19a20:	ldr	r3, [r0]
   19a24:	sub	r3, r3, #2
   19a28:	ldrh	r1, [r3, #2]!
   19a2c:	asr	r2, r4, #5
   19a30:	and	r0, r4, #31
   19a34:	tst	r1, #2048	; 0x800
   19a38:	add	r4, r4, #1
   19a3c:	ldrne	r1, [r5, r2, lsl #2]
   19a40:	orrne	r1, r1, ip, lsl r0
   19a44:	strne	r1, [r5, r2, lsl #2]
   19a48:	cmp	r4, #256	; 0x100
   19a4c:	bne	19a28 <__assert_fail@plt+0x8750>
   19a50:	b	19888 <__assert_fail@plt+0x85b0>
   19a54:	bl	111a0 <__ctype_b_loc@plt>
   19a58:	mov	r4, #1
   19a5c:	mov	r1, r6
   19a60:	ldr	r3, [r0]
   19a64:	add	ip, r3, #508	; 0x1fc
   19a68:	add	ip, ip, #2
   19a6c:	sub	r3, r3, #2
   19a70:	ldrh	r2, [r3, #2]!
   19a74:	tst	r2, #8
   19a78:	beq	19a94 <__assert_fail@plt+0x87bc>
   19a7c:	ldrb	r2, [r1]
   19a80:	and	lr, r2, #31
   19a84:	asr	r2, r2, #5
   19a88:	ldr	r0, [r5, r2, lsl #2]
   19a8c:	orr	r0, r0, r4, lsl lr
   19a90:	str	r0, [r5, r2, lsl #2]
   19a94:	cmp	ip, r3
   19a98:	add	r1, r1, #1
   19a9c:	bne	19a70 <__assert_fail@plt+0x8798>
   19aa0:	b	19888 <__assert_fail@plt+0x85b0>
   19aa4:	cmp	r6, #0
   19aa8:	bne	19c90 <__assert_fail@plt+0x89b8>
   19aac:	bl	111a0 <__ctype_b_loc@plt>
   19ab0:	mov	ip, #1
   19ab4:	ldr	r3, [r0]
   19ab8:	sub	r3, r3, #2
   19abc:	ldrh	r2, [r3, #2]!
   19ac0:	asr	r1, r4, #5
   19ac4:	and	r0, r4, #31
   19ac8:	tst	r2, #1024	; 0x400
   19acc:	add	r4, r4, #1
   19ad0:	ldrne	r2, [r5, r1, lsl #2]
   19ad4:	orrne	r2, r2, ip, lsl r0
   19ad8:	strne	r2, [r5, r1, lsl #2]
   19adc:	cmp	r4, #256	; 0x100
   19ae0:	bne	19abc <__assert_fail@plt+0x87e4>
   19ae4:	b	19888 <__assert_fail@plt+0x85b0>
   19ae8:	bl	111a0 <__ctype_b_loc@plt>
   19aec:	mov	r4, #1
   19af0:	mov	r1, r6
   19af4:	ldr	r3, [r0]
   19af8:	add	ip, r3, #508	; 0x1fc
   19afc:	add	ip, ip, #2
   19b00:	sub	r3, r3, #2
   19b04:	ldrh	r2, [r3, #2]!
   19b08:	tst	r2, #2
   19b0c:	beq	19b28 <__assert_fail@plt+0x8850>
   19b10:	ldrb	r2, [r1]
   19b14:	and	lr, r2, #31
   19b18:	asr	r2, r2, #5
   19b1c:	ldr	r0, [r5, r2, lsl #2]
   19b20:	orr	r0, r0, r4, lsl lr
   19b24:	str	r0, [r5, r2, lsl #2]
   19b28:	cmp	ip, r3
   19b2c:	add	r1, r1, #1
   19b30:	bne	19b04 <__assert_fail@plt+0x882c>
   19b34:	b	19888 <__assert_fail@plt+0x85b0>
   19b38:	ldr	r1, [pc, #1364]	; 1a094 <__assert_fail@plt+0x8dbc>
   19b3c:	ldr	r0, [sp, #36]	; 0x24
   19b40:	bl	11008 <strcmp@plt>
   19b44:	subs	r4, r0, #0
   19b48:	bne	19be8 <__assert_fail@plt+0x8910>
   19b4c:	cmp	r6, #0
   19b50:	bne	19e80 <__assert_fail@plt+0x8ba8>
   19b54:	bl	111a0 <__ctype_b_loc@plt>
   19b58:	mov	ip, #1
   19b5c:	ldr	r3, [r0]
   19b60:	sub	r3, r3, #2
   19b64:	ldrh	r2, [r3, #2]!
   19b68:	asr	r1, r4, #5
   19b6c:	and	r0, r4, #31
   19b70:	tst	r2, #16384	; 0x4000
   19b74:	add	r4, r4, #1
   19b78:	ldrne	r2, [r5, r1, lsl #2]
   19b7c:	orrne	r2, r2, ip, lsl r0
   19b80:	strne	r2, [r5, r1, lsl #2]
   19b84:	cmp	r4, #256	; 0x100
   19b88:	bne	19b64 <__assert_fail@plt+0x888c>
   19b8c:	b	19888 <__assert_fail@plt+0x85b0>
   19b90:	bl	111a0 <__ctype_b_loc@plt>
   19b94:	mov	r4, #1
   19b98:	mov	r1, r6
   19b9c:	ldr	r3, [r0]
   19ba0:	add	ip, r3, #508	; 0x1fc
   19ba4:	add	ip, ip, #2
   19ba8:	sub	r3, r3, #2
   19bac:	ldrh	r2, [r3, #2]!
   19bb0:	tst	r2, #512	; 0x200
   19bb4:	beq	19bd0 <__assert_fail@plt+0x88f8>
   19bb8:	ldrb	r2, [r1]
   19bbc:	and	lr, r2, #31
   19bc0:	asr	r2, r2, #5
   19bc4:	ldr	r0, [r5, r2, lsl #2]
   19bc8:	orr	r0, r0, r4, lsl lr
   19bcc:	str	r0, [r5, r2, lsl #2]
   19bd0:	cmp	ip, r3
   19bd4:	add	r1, r1, #1
   19bd8:	bne	19bac <__assert_fail@plt+0x88d4>
   19bdc:	b	19888 <__assert_fail@plt+0x85b0>
   19be0:	mov	r0, #12
   19be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19be8:	ldr	r1, [pc, #1160]	; 1a078 <__assert_fail@plt+0x8da0>
   19bec:	ldr	r0, [sp, #36]	; 0x24
   19bf0:	bl	11008 <strcmp@plt>
   19bf4:	subs	r4, r0, #0
   19bf8:	bne	19ce0 <__assert_fail@plt+0x8a08>
   19bfc:	cmp	r6, #0
   19c00:	bne	19d38 <__assert_fail@plt+0x8a60>
   19c04:	bl	111a0 <__ctype_b_loc@plt>
   19c08:	mov	ip, #1
   19c0c:	ldr	r3, [r0]
   19c10:	sub	r3, r3, #2
   19c14:	ldrh	r2, [r3, #2]!
   19c18:	asr	r1, r4, #5
   19c1c:	and	r0, r4, #31
   19c20:	tst	r2, #256	; 0x100
   19c24:	add	r4, r4, #1
   19c28:	ldrne	r2, [r5, r1, lsl #2]
   19c2c:	orrne	r2, r2, ip, lsl r0
   19c30:	strne	r2, [r5, r1, lsl #2]
   19c34:	cmp	r4, #256	; 0x100
   19c38:	bne	19c14 <__assert_fail@plt+0x893c>
   19c3c:	b	19888 <__assert_fail@plt+0x85b0>
   19c40:	bl	111a0 <__ctype_b_loc@plt>
   19c44:	mov	r4, #1
   19c48:	mov	r1, r6
   19c4c:	ldr	r3, [r0]
   19c50:	add	ip, r3, #508	; 0x1fc
   19c54:	add	ip, ip, #2
   19c58:	sub	r3, r3, #2
   19c5c:	ldrh	r2, [r3, #2]!
   19c60:	tst	r2, #8192	; 0x2000
   19c64:	beq	19c80 <__assert_fail@plt+0x89a8>
   19c68:	ldrb	r2, [r1]
   19c6c:	and	lr, r2, #31
   19c70:	asr	r2, r2, #5
   19c74:	ldr	r0, [r5, r2, lsl #2]
   19c78:	orr	r0, r0, r4, lsl lr
   19c7c:	str	r0, [r5, r2, lsl #2]
   19c80:	cmp	r3, ip
   19c84:	add	r1, r1, #1
   19c88:	bne	19c5c <__assert_fail@plt+0x8984>
   19c8c:	b	19888 <__assert_fail@plt+0x85b0>
   19c90:	bl	111a0 <__ctype_b_loc@plt>
   19c94:	mov	r4, #1
   19c98:	mov	r1, r6
   19c9c:	ldr	r3, [r0]
   19ca0:	add	ip, r3, #508	; 0x1fc
   19ca4:	add	ip, ip, #2
   19ca8:	sub	r3, r3, #2
   19cac:	ldrh	r2, [r3, #2]!
   19cb0:	tst	r2, #1024	; 0x400
   19cb4:	beq	19cd0 <__assert_fail@plt+0x89f8>
   19cb8:	ldrb	r2, [r1]
   19cbc:	and	lr, r2, #31
   19cc0:	asr	r2, r2, #5
   19cc4:	ldr	r0, [r5, r2, lsl #2]
   19cc8:	orr	r0, r0, r4, lsl lr
   19ccc:	str	r0, [r5, r2, lsl #2]
   19cd0:	cmp	ip, r3
   19cd4:	add	r1, r1, #1
   19cd8:	bne	19cac <__assert_fail@plt+0x89d4>
   19cdc:	b	19888 <__assert_fail@plt+0x85b0>
   19ce0:	ldr	r1, [pc, #944]	; 1a098 <__assert_fail@plt+0x8dc0>
   19ce4:	ldr	r0, [sp, #36]	; 0x24
   19ce8:	bl	11008 <strcmp@plt>
   19cec:	subs	r4, r0, #0
   19cf0:	bne	19dd8 <__assert_fail@plt+0x8b00>
   19cf4:	cmp	r6, #0
   19cf8:	bne	19d88 <__assert_fail@plt+0x8ab0>
   19cfc:	bl	111a0 <__ctype_b_loc@plt>
   19d00:	mov	ip, #1
   19d04:	ldr	r3, [r0]
   19d08:	sub	r3, r3, #2
   19d0c:	ldrh	r2, [r3, #2]!
   19d10:	asr	r1, r4, #5
   19d14:	and	r0, r4, #31
   19d18:	tst	r2, #1
   19d1c:	add	r4, r4, #1
   19d20:	ldrne	r2, [r5, r1, lsl #2]
   19d24:	orrne	r2, r2, ip, lsl r0
   19d28:	strne	r2, [r5, r1, lsl #2]
   19d2c:	cmp	r4, #256	; 0x100
   19d30:	bne	19d0c <__assert_fail@plt+0x8a34>
   19d34:	b	19888 <__assert_fail@plt+0x85b0>
   19d38:	bl	111a0 <__ctype_b_loc@plt>
   19d3c:	mov	r1, r6
   19d40:	mov	lr, #1
   19d44:	ldr	r3, [r0]
   19d48:	add	r0, r3, #508	; 0x1fc
   19d4c:	add	r0, r0, #2
   19d50:	sub	r3, r3, #2
   19d54:	ldrh	r2, [r3, #2]!
   19d58:	tst	r2, #256	; 0x100
   19d5c:	beq	19d78 <__assert_fail@plt+0x8aa0>
   19d60:	ldrb	r2, [r1]
   19d64:	and	r4, r2, #31
   19d68:	asr	r2, r2, #5
   19d6c:	ldr	ip, [r5, r2, lsl #2]
   19d70:	orr	ip, ip, lr, lsl r4
   19d74:	str	ip, [r5, r2, lsl #2]
   19d78:	cmp	r0, r3
   19d7c:	add	r1, r1, #1
   19d80:	bne	19d54 <__assert_fail@plt+0x8a7c>
   19d84:	b	19888 <__assert_fail@plt+0x85b0>
   19d88:	bl	111a0 <__ctype_b_loc@plt>
   19d8c:	mov	r1, r6
   19d90:	mov	lr, #1
   19d94:	ldr	r3, [r0]
   19d98:	add	r0, r3, #508	; 0x1fc
   19d9c:	add	r0, r0, #2
   19da0:	sub	r3, r3, #2
   19da4:	ldrh	r2, [r3, #2]!
   19da8:	tst	r2, #1
   19dac:	beq	19dc8 <__assert_fail@plt+0x8af0>
   19db0:	ldrb	r2, [r1]
   19db4:	and	r4, r2, #31
   19db8:	asr	r2, r2, #5
   19dbc:	ldr	ip, [r5, r2, lsl #2]
   19dc0:	orr	ip, ip, lr, lsl r4
   19dc4:	str	ip, [r5, r2, lsl #2]
   19dc8:	cmp	r0, r3
   19dcc:	add	r1, r1, #1
   19dd0:	bne	19da4 <__assert_fail@plt+0x8acc>
   19dd4:	b	19888 <__assert_fail@plt+0x85b0>
   19dd8:	ldr	r1, [pc, #700]	; 1a09c <__assert_fail@plt+0x8dc4>
   19ddc:	ldr	r0, [sp, #36]	; 0x24
   19de0:	bl	11008 <strcmp@plt>
   19de4:	subs	r4, r0, #0
   19de8:	bne	19f20 <__assert_fail@plt+0x8c48>
   19dec:	cmp	r6, #0
   19df0:	bne	19ed0 <__assert_fail@plt+0x8bf8>
   19df4:	bl	111a0 <__ctype_b_loc@plt>
   19df8:	mov	ip, #1
   19dfc:	ldr	r3, [r0]
   19e00:	sub	r3, r3, #2
   19e04:	ldrsh	r2, [r3, #2]!
   19e08:	cmp	r2, #0
   19e0c:	asrlt	r0, r4, #5
   19e10:	andlt	r1, r4, #31
   19e14:	ldrlt	r2, [r5, r0, lsl #2]
   19e18:	add	r4, r4, #1
   19e1c:	orrlt	r2, r2, ip, lsl r1
   19e20:	strlt	r2, [r5, r0, lsl #2]
   19e24:	cmp	r4, #256	; 0x100
   19e28:	bne	19e04 <__assert_fail@plt+0x8b2c>
   19e2c:	b	19888 <__assert_fail@plt+0x85b0>
   19e30:	bl	111a0 <__ctype_b_loc@plt>
   19e34:	mov	r1, r6
   19e38:	mov	lr, #1
   19e3c:	ldr	r3, [r0]
   19e40:	add	r2, r3, #508	; 0x1fc
   19e44:	add	r2, r2, #2
   19e48:	sub	r3, r3, #2
   19e4c:	ldrh	r0, [r3, #2]!
   19e50:	tst	r0, #2048	; 0x800
   19e54:	beq	19e70 <__assert_fail@plt+0x8b98>
   19e58:	ldrb	r0, [r1]
   19e5c:	and	r4, r0, #31
   19e60:	asr	r0, r0, #5
   19e64:	ldr	ip, [r5, r0, lsl #2]
   19e68:	orr	ip, ip, lr, lsl r4
   19e6c:	str	ip, [r5, r0, lsl #2]
   19e70:	cmp	r2, r3
   19e74:	add	r1, r1, #1
   19e78:	bne	19e4c <__assert_fail@plt+0x8b74>
   19e7c:	b	19888 <__assert_fail@plt+0x85b0>
   19e80:	bl	111a0 <__ctype_b_loc@plt>
   19e84:	mov	r1, r6
   19e88:	mov	lr, #1
   19e8c:	ldr	r3, [r0]
   19e90:	add	r0, r3, #508	; 0x1fc
   19e94:	add	r0, r0, #2
   19e98:	sub	r3, r3, #2
   19e9c:	ldrh	r2, [r3, #2]!
   19ea0:	tst	r2, #16384	; 0x4000
   19ea4:	beq	19ec0 <__assert_fail@plt+0x8be8>
   19ea8:	ldrb	r2, [r1]
   19eac:	and	r4, r2, #31
   19eb0:	asr	r2, r2, #5
   19eb4:	ldr	ip, [r5, r2, lsl #2]
   19eb8:	orr	ip, ip, lr, lsl r4
   19ebc:	str	ip, [r5, r2, lsl #2]
   19ec0:	cmp	r0, r3
   19ec4:	add	r1, r1, #1
   19ec8:	bne	19e9c <__assert_fail@plt+0x8bc4>
   19ecc:	b	19888 <__assert_fail@plt+0x85b0>
   19ed0:	bl	111a0 <__ctype_b_loc@plt>
   19ed4:	mov	r1, r6
   19ed8:	mov	lr, #1
   19edc:	ldr	r3, [r0]
   19ee0:	add	r0, r3, #508	; 0x1fc
   19ee4:	add	r0, r0, #2
   19ee8:	sub	r3, r3, #2
   19eec:	ldrsh	r2, [r3, #2]!
   19ef0:	cmp	r2, #0
   19ef4:	bge	19f10 <__assert_fail@plt+0x8c38>
   19ef8:	ldrb	r2, [r1]
   19efc:	and	r4, r2, #31
   19f00:	asr	r2, r2, #5
   19f04:	ldr	ip, [r5, r2, lsl #2]
   19f08:	orr	ip, ip, lr, lsl r4
   19f0c:	str	ip, [r5, r2, lsl #2]
   19f10:	cmp	r0, r3
   19f14:	add	r1, r1, #1
   19f18:	bne	19eec <__assert_fail@plt+0x8c14>
   19f1c:	b	19888 <__assert_fail@plt+0x85b0>
   19f20:	ldr	r1, [pc, #376]	; 1a0a0 <__assert_fail@plt+0x8dc8>
   19f24:	ldr	r0, [sp, #36]	; 0x24
   19f28:	bl	11008 <strcmp@plt>
   19f2c:	subs	r4, r0, #0
   19f30:	bne	19f78 <__assert_fail@plt+0x8ca0>
   19f34:	cmp	r6, #0
   19f38:	bne	19f94 <__assert_fail@plt+0x8cbc>
   19f3c:	bl	111a0 <__ctype_b_loc@plt>
   19f40:	mov	ip, #1
   19f44:	ldr	r3, [r0]
   19f48:	sub	r3, r3, #2
   19f4c:	ldrh	r2, [r3, #2]!
   19f50:	asr	r1, r4, #5
   19f54:	and	r0, r4, #31
   19f58:	tst	r2, #4
   19f5c:	add	r4, r4, #1
   19f60:	ldrne	r2, [r5, r1, lsl #2]
   19f64:	orrne	r2, r2, ip, lsl r0
   19f68:	strne	r2, [r5, r1, lsl #2]
   19f6c:	cmp	r4, #256	; 0x100
   19f70:	bne	19f4c <__assert_fail@plt+0x8c74>
   19f74:	b	19888 <__assert_fail@plt+0x85b0>
   19f78:	ldr	r1, [pc, #292]	; 1a0a4 <__assert_fail@plt+0x8dcc>
   19f7c:	ldr	r0, [sp, #36]	; 0x24
   19f80:	bl	11008 <strcmp@plt>
   19f84:	subs	r4, r0, #0
   19f88:	beq	19fe4 <__assert_fail@plt+0x8d0c>
   19f8c:	mov	r0, #4
   19f90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f94:	bl	111a0 <__ctype_b_loc@plt>
   19f98:	mov	r1, r6
   19f9c:	mov	lr, #1
   19fa0:	ldr	r3, [r0]
   19fa4:	add	r0, r3, #508	; 0x1fc
   19fa8:	add	r0, r0, #2
   19fac:	sub	r3, r3, #2
   19fb0:	ldrh	r2, [r3, #2]!
   19fb4:	tst	r2, #4
   19fb8:	beq	19fd4 <__assert_fail@plt+0x8cfc>
   19fbc:	ldrb	r2, [r1]
   19fc0:	and	r4, r2, #31
   19fc4:	asr	r2, r2, #5
   19fc8:	ldr	ip, [r5, r2, lsl #2]
   19fcc:	orr	ip, ip, lr, lsl r4
   19fd0:	str	ip, [r5, r2, lsl #2]
   19fd4:	cmp	r3, r0
   19fd8:	add	r1, r1, #1
   19fdc:	bne	19fb0 <__assert_fail@plt+0x8cd8>
   19fe0:	b	19888 <__assert_fail@plt+0x85b0>
   19fe4:	cmp	r6, #0
   19fe8:	bne	1a028 <__assert_fail@plt+0x8d50>
   19fec:	bl	111a0 <__ctype_b_loc@plt>
   19ff0:	mov	ip, #1
   19ff4:	ldr	r3, [r0]
   19ff8:	sub	r3, r3, #2
   19ffc:	ldrh	r2, [r3, #2]!
   1a000:	asr	r1, r4, #5
   1a004:	and	r0, r4, #31
   1a008:	tst	r2, #4096	; 0x1000
   1a00c:	add	r4, r4, #1
   1a010:	ldrne	r2, [r5, r1, lsl #2]
   1a014:	orrne	r2, r2, ip, lsl r0
   1a018:	strne	r2, [r5, r1, lsl #2]
   1a01c:	cmp	r4, #256	; 0x100
   1a020:	bne	19ffc <__assert_fail@plt+0x8d24>
   1a024:	b	19888 <__assert_fail@plt+0x85b0>
   1a028:	bl	111a0 <__ctype_b_loc@plt>
   1a02c:	mov	r1, r6
   1a030:	mov	lr, #1
   1a034:	ldr	r3, [r0]
   1a038:	add	r0, r3, #508	; 0x1fc
   1a03c:	add	r0, r0, #2
   1a040:	sub	r3, r3, #2
   1a044:	ldrh	r2, [r3, #2]!
   1a048:	tst	r2, #4096	; 0x1000
   1a04c:	beq	1a068 <__assert_fail@plt+0x8d90>
   1a050:	ldrb	r2, [r1]
   1a054:	and	r4, r2, #31
   1a058:	asr	r2, r2, #5
   1a05c:	ldr	ip, [r5, r2, lsl #2]
   1a060:	orr	ip, ip, lr, lsl r4
   1a064:	str	ip, [r5, r2, lsl #2]
   1a068:	cmp	r0, r3
   1a06c:	add	r1, r1, #1
   1a070:	bne	1a044 <__assert_fail@plt+0x8d6c>
   1a074:	b	19888 <__assert_fail@plt+0x85b0>
   1a078:	andeq	r4, r2, ip, lsl sl
   1a07c:	andeq	r4, r2, r4, lsl sl
   1a080:	andeq	r4, r2, ip, lsr #20
   1a084:	andeq	r4, r2, r4, lsr sl
   1a088:	andeq	r4, r2, r4, lsr #20
   1a08c:	andeq	r4, r2, ip, lsr sl
   1a090:	andeq	r4, r2, r4, asr #20
   1a094:	andeq	r4, r2, ip, asr #20
   1a098:	andeq	r4, r2, r4, asr sl
   1a09c:	andeq	r4, r2, ip, asr sl
   1a0a0:	andeq	r4, r2, r4, ror #20
   1a0a4:	andeq	r4, r2, ip, ror #20
   1a0a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0ac:	sub	sp, sp, #44	; 0x2c
   1a0b0:	mov	r6, r0
   1a0b4:	mov	fp, r1
   1a0b8:	mov	r9, #0
   1a0bc:	mov	r1, #1
   1a0c0:	mov	r0, #32
   1a0c4:	mov	sl, r2
   1a0c8:	mov	r5, r3
   1a0cc:	str	r9, [sp, #20]
   1a0d0:	ldrb	r8, [sp, #80]	; 0x50
   1a0d4:	bl	22f84 <__assert_fail@plt+0x11cac>
   1a0d8:	subs	r4, r0, #0
   1a0dc:	beq	1a2b8 <__assert_fail@plt+0x8fe0>
   1a0e0:	mov	r1, #1
   1a0e4:	mov	r0, #40	; 0x28
   1a0e8:	bl	22f84 <__assert_fail@plt+0x11cac>
   1a0ec:	subs	r7, r0, #0
   1a0f0:	beq	1a2d4 <__assert_fail@plt+0x8ffc>
   1a0f4:	ldrb	r2, [r7, #16]
   1a0f8:	and	r3, r8, #1
   1a0fc:	mov	r0, fp
   1a100:	bic	r2, r2, #1
   1a104:	orr	r3, r3, r2
   1a108:	add	r2, sp, #20
   1a10c:	strb	r3, [r7, #16]
   1a110:	mov	r1, r4
   1a114:	stm	sp, {r2, sl}
   1a118:	add	r3, r7, #36	; 0x24
   1a11c:	str	r9, [sp, #8]
   1a120:	add	r2, r7, #12
   1a124:	bl	197b8 <__assert_fail@plt+0x84e0>
   1a128:	subs	sl, r0, #0
   1a12c:	bne	1a2f0 <__assert_fail@plt+0x9018>
   1a130:	ldrb	r3, [r5]
   1a134:	cmp	r3, #0
   1a138:	movne	ip, #1
   1a13c:	beq	1a160 <__assert_fail@plt+0x8e88>
   1a140:	asr	r1, r3, #5
   1a144:	and	r0, r3, #31
   1a148:	ldr	r2, [r4, r1, lsl #2]
   1a14c:	ldrb	r3, [r5, #1]!
   1a150:	orr	r2, r2, ip, lsl r0
   1a154:	cmp	r3, #0
   1a158:	str	r2, [r4, r1, lsl #2]
   1a15c:	bne	1a140 <__assert_fail@plt+0x8e68>
   1a160:	cmp	r8, #0
   1a164:	bne	1a258 <__assert_fail@plt+0x8f80>
   1a168:	ldr	r3, [r6, #92]	; 0x5c
   1a16c:	cmp	r3, #1
   1a170:	ble	1a19c <__assert_fail@plt+0x8ec4>
   1a174:	ldr	r1, [r6, #60]	; 0x3c
   1a178:	sub	r3, r4, #4
   1a17c:	sub	r1, r1, #4
   1a180:	add	ip, r4, #28
   1a184:	ldr	r2, [r3, #4]
   1a188:	ldr	r0, [r1, #4]!
   1a18c:	and	r2, r2, r0
   1a190:	str	r2, [r3, #4]!
   1a194:	cmp	ip, r3
   1a198:	bne	1a184 <__assert_fail@plt+0x8eac>
   1a19c:	add	r8, sp, #24
   1a1a0:	mov	r5, #0
   1a1a4:	add	sl, r6, #56	; 0x38
   1a1a8:	add	fp, r6, #64	; 0x40
   1a1ac:	str	r8, [sp]
   1a1b0:	mov	ip, #3
   1a1b4:	str	r5, [r8, #4]
   1a1b8:	mov	r3, r5
   1a1bc:	mov	r2, r5
   1a1c0:	mov	r0, sl
   1a1c4:	mov	r1, fp
   1a1c8:	str	r4, [sp, #24]
   1a1cc:	strb	ip, [sp, #28]
   1a1d0:	bl	169f8 <__assert_fail@plt+0x5720>
   1a1d4:	subs	r9, r0, #0
   1a1d8:	beq	1a278 <__assert_fail@plt+0x8fa0>
   1a1dc:	ldr	r3, [r6, #92]	; 0x5c
   1a1e0:	cmp	r3, #1
   1a1e4:	ble	1a2a4 <__assert_fail@plt+0x8fcc>
   1a1e8:	ldrb	r3, [r6, #88]	; 0x58
   1a1ec:	mov	ip, #6
   1a1f0:	str	r8, [sp]
   1a1f4:	orr	r3, r3, #2
   1a1f8:	strb	r3, [r6, #88]	; 0x58
   1a1fc:	mov	r2, r5
   1a200:	mov	r3, r5
   1a204:	mov	r1, fp
   1a208:	mov	r0, sl
   1a20c:	str	r7, [sp, #24]
   1a210:	strb	ip, [sp, #28]
   1a214:	bl	169f8 <__assert_fail@plt+0x5720>
   1a218:	subs	r3, r0, #0
   1a21c:	beq	1a278 <__assert_fail@plt+0x8fa0>
   1a220:	add	ip, sp, #32
   1a224:	mov	r2, r9
   1a228:	mov	lr, #10
   1a22c:	mov	r1, fp
   1a230:	mov	r0, sl
   1a234:	str	ip, [sp]
   1a238:	str	r5, [sp, #36]	; 0x24
   1a23c:	str	r5, [sp, #32]
   1a240:	strb	lr, [sp, #36]	; 0x24
   1a244:	bl	169f8 <__assert_fail@plt+0x5720>
   1a248:	mov	r9, r0
   1a24c:	mov	r0, r9
   1a250:	add	sp, sp, #44	; 0x2c
   1a254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a258:	sub	r3, r4, #4
   1a25c:	add	r1, r4, #28
   1a260:	ldr	r2, [r3, #4]
   1a264:	mvn	r2, r2
   1a268:	str	r2, [r3, #4]!
   1a26c:	cmp	r1, r3
   1a270:	bne	1a260 <__assert_fail@plt+0x8f88>
   1a274:	b	1a168 <__assert_fail@plt+0x8e90>
   1a278:	mov	r0, r4
   1a27c:	bl	23198 <__assert_fail@plt+0x11ec0>
   1a280:	mov	r0, r7
   1a284:	bl	15810 <__assert_fail@plt+0x4538>
   1a288:	ldr	r2, [sp, #84]	; 0x54
   1a28c:	mov	r9, #0
   1a290:	mov	r3, #12
   1a294:	mov	r0, r9
   1a298:	str	r3, [r2]
   1a29c:	add	sp, sp, #44	; 0x2c
   1a2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2a4:	mov	r0, r7
   1a2a8:	bl	15810 <__assert_fail@plt+0x4538>
   1a2ac:	mov	r0, r9
   1a2b0:	add	sp, sp, #44	; 0x2c
   1a2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2b8:	ldr	r2, [sp, #84]	; 0x54
   1a2bc:	mov	r3, #12
   1a2c0:	mov	r9, r4
   1a2c4:	mov	r0, r9
   1a2c8:	str	r3, [r2]
   1a2cc:	add	sp, sp, #44	; 0x2c
   1a2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2d4:	mov	r0, r4
   1a2d8:	bl	23198 <__assert_fail@plt+0x11ec0>
   1a2dc:	ldr	r2, [sp, #84]	; 0x54
   1a2e0:	mov	r3, #12
   1a2e4:	mov	r9, r7
   1a2e8:	str	r3, [r2]
   1a2ec:	b	1a24c <__assert_fail@plt+0x8f74>
   1a2f0:	mov	r0, r4
   1a2f4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1a2f8:	mov	r0, r7
   1a2fc:	bl	15810 <__assert_fail@plt+0x4538>
   1a300:	ldr	r3, [sp, #84]	; 0x54
   1a304:	str	sl, [r3]
   1a308:	b	1a24c <__assert_fail@plt+0x8f74>
   1a30c:	ldr	ip, [r0]
   1a310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a314:	sub	sp, sp, #308	; 0x134
   1a318:	str	ip, [sp, #12]
   1a31c:	ldr	ip, [ip, #92]	; 0x5c
   1a320:	cmp	ip, #1
   1a324:	ldr	ip, [r1]
   1a328:	ldreq	r6, [r0, #12]
   1a32c:	movne	r6, #0
   1a330:	lsreq	r6, r6, #22
   1a334:	andeq	r6, r6, #1
   1a338:	cmp	ip, #0
   1a33c:	ble	1a6b8 <__assert_fail@plt+0x93e0>
   1a340:	mov	r7, r3
   1a344:	mov	r3, #0
   1a348:	str	r2, [sp, #20]
   1a34c:	str	r1, [sp, #24]
   1a350:	str	r0, [sp, #28]
   1a354:	str	r3, [sp, #8]
   1a358:	mov	r5, #1
   1a35c:	b	1a398 <__assert_fail@plt+0x90c0>
   1a360:	cmp	r4, #3
   1a364:	beq	1a4d8 <__assert_fail@plt+0x9200>
   1a368:	cmp	r4, #6
   1a36c:	beq	1a558 <__assert_fail@plt+0x9280>
   1a370:	and	r3, r4, #253	; 0xfd
   1a374:	cmp	r3, #5
   1a378:	beq	1a6fc <__assert_fail@plt+0x9424>
   1a37c:	cmp	r4, #2
   1a380:	beq	1a698 <__assert_fail@plt+0x93c0>
   1a384:	ldr	r3, [sp, #8]
   1a388:	add	r3, r3, #1
   1a38c:	cmp	r3, ip
   1a390:	str	r3, [sp, #8]
   1a394:	bge	1a6b8 <__assert_fail@plt+0x93e0>
   1a398:	ldr	r3, [sp, #20]
   1a39c:	ldr	r1, [sp, #8]
   1a3a0:	ldr	r2, [r3]
   1a3a4:	ldr	r3, [sp, #12]
   1a3a8:	ldr	r8, [r2, r1, lsl #2]
   1a3ac:	ldr	r3, [r3]
   1a3b0:	lsl	r2, r8, #3
   1a3b4:	str	r2, [sp, #16]
   1a3b8:	add	r2, r3, r2
   1a3bc:	ldrb	r4, [r2, #4]
   1a3c0:	cmp	r4, #1
   1a3c4:	bne	1a360 <__assert_fail@plt+0x9088>
   1a3c8:	ldrb	fp, [r3, r8, lsl #3]
   1a3cc:	cmp	r6, #0
   1a3d0:	strb	r4, [r7, fp]
   1a3d4:	beq	1a3e8 <__assert_fail@plt+0x9110>
   1a3d8:	bl	11170 <__ctype_tolower_loc@plt>
   1a3dc:	ldr	r3, [r0]
   1a3e0:	ldr	r3, [r3, fp, lsl #2]
   1a3e4:	strb	r4, [r7, r3]
   1a3e8:	ldr	r3, [sp, #28]
   1a3ec:	ldr	r3, [r3, #12]
   1a3f0:	tst	r3, #4194304	; 0x400000
   1a3f4:	beq	1a4cc <__assert_fail@plt+0x91f4>
   1a3f8:	ldr	r3, [sp, #12]
   1a3fc:	ldr	r3, [r3, #92]	; 0x5c
   1a400:	cmp	r3, #1
   1a404:	ble	1a4cc <__assert_fail@plt+0x91f4>
   1a408:	ldr	r0, [sp, #12]
   1a40c:	add	r1, r8, #1
   1a410:	ldr	r3, [r0]
   1a414:	ldrb	r2, [r3, r8, lsl #3]
   1a418:	strb	r2, [sp, #48]	; 0x30
   1a41c:	ldr	r2, [r0, #8]
   1a420:	cmp	r2, r1
   1a424:	bls	1a6f4 <__assert_fail@plt+0x941c>
   1a428:	ldr	ip, [sp, #16]
   1a42c:	ldr	lr, [pc, #744]	; 1a71c <__assert_fail@plt+0x9444>
   1a430:	add	r2, ip, #8
   1a434:	add	r3, r3, r2
   1a438:	ldr	r2, [r3, #4]
   1a43c:	bic	r2, r2, #-16777216	; 0xff000000
   1a440:	bic	r2, r2, #14614528	; 0xdf0000
   1a444:	bic	r2, r2, #65280	; 0xff00
   1a448:	cmp	r2, lr
   1a44c:	bne	1a6f4 <__assert_fail@plt+0x941c>
   1a450:	add	r9, ip, #16
   1a454:	add	r4, sp, #49	; 0x31
   1a458:	b	1a484 <__assert_fail@plt+0x91ac>
   1a45c:	ldr	r3, [r0]
   1a460:	ldr	ip, [pc, #692]	; 1a71c <__assert_fail@plt+0x9444>
   1a464:	add	r3, r3, r9
   1a468:	add	r9, r9, #8
   1a46c:	ldr	r2, [r3, #4]
   1a470:	bic	r2, r2, #-16777216	; 0xff000000
   1a474:	bic	r2, r2, #14614528	; 0xdf0000
   1a478:	bic	r2, r2, #65280	; 0xff00
   1a47c:	cmp	r2, ip
   1a480:	bne	1a49c <__assert_fail@plt+0x91c4>
   1a484:	ldrb	r3, [r3]
   1a488:	add	r1, r1, #1
   1a48c:	strb	r3, [r4], #1
   1a490:	ldr	r3, [r0, #8]
   1a494:	cmp	r1, r3
   1a498:	bcc	1a45c <__assert_fail@plt+0x9184>
   1a49c:	add	r3, sp, #48	; 0x30
   1a4a0:	sub	r4, r4, r3
   1a4a4:	mov	ip, #0
   1a4a8:	mov	r2, r4
   1a4ac:	add	r3, sp, #40	; 0x28
   1a4b0:	add	r1, sp, #48	; 0x30
   1a4b4:	add	r0, sp, #36	; 0x24
   1a4b8:	str	ip, [sp, #40]	; 0x28
   1a4bc:	str	ip, [sp, #44]	; 0x2c
   1a4c0:	bl	23224 <__assert_fail@plt+0x11f4c>
   1a4c4:	cmp	r4, r0
   1a4c8:	beq	1a6c0 <__assert_fail@plt+0x93e8>
   1a4cc:	ldr	r3, [sp, #24]
   1a4d0:	ldr	ip, [r3]
   1a4d4:	b	1a384 <__assert_fail@plt+0x90ac>
   1a4d8:	mov	r8, #0
   1a4dc:	str	r7, [sp, #4]
   1a4e0:	ldr	r2, [sp, #16]
   1a4e4:	ldr	r9, [sp, #4]
   1a4e8:	lsl	sl, r8, #5
   1a4ec:	ldr	r2, [r3, r2]
   1a4f0:	mov	r4, #0
   1a4f4:	ldr	fp, [r2, r8]
   1a4f8:	lsr	r3, fp, r4
   1a4fc:	tst	r3, #1
   1a500:	add	r4, r4, #1
   1a504:	beq	1a524 <__assert_fail@plt+0x924c>
   1a508:	cmp	r6, #0
   1a50c:	strb	r5, [r9]
   1a510:	beq	1a524 <__assert_fail@plt+0x924c>
   1a514:	bl	11170 <__ctype_tolower_loc@plt>
   1a518:	ldr	r3, [r0]
   1a51c:	ldr	r3, [r3, sl]
   1a520:	strb	r5, [r7, r3]
   1a524:	cmp	r4, #32
   1a528:	add	r9, r9, #1
   1a52c:	add	sl, sl, #4
   1a530:	bne	1a4f8 <__assert_fail@plt+0x9220>
   1a534:	ldr	r3, [sp, #4]
   1a538:	add	r8, r8, #4
   1a53c:	add	r3, r3, #32
   1a540:	cmp	r8, #32
   1a544:	str	r3, [sp, #4]
   1a548:	beq	1a4cc <__assert_fail@plt+0x91f4>
   1a54c:	ldr	r3, [sp, #12]
   1a550:	ldr	r3, [r3]
   1a554:	b	1a4e0 <__assert_fail@plt+0x9208>
   1a558:	ldr	r3, [sp, #12]
   1a55c:	ldr	r8, [r2]
   1a560:	ldr	r3, [r3, #92]	; 0x5c
   1a564:	cmp	r3, #1
   1a568:	ble	1a590 <__assert_fail@plt+0x92b8>
   1a56c:	ldr	r3, [r8, #36]	; 0x24
   1a570:	cmp	r3, #0
   1a574:	bne	1a650 <__assert_fail@plt+0x9378>
   1a578:	ldrb	r3, [r8, #16]
   1a57c:	tst	r3, #1
   1a580:	bne	1a650 <__assert_fail@plt+0x9378>
   1a584:	ldr	r3, [r8, #32]
   1a588:	cmp	r3, #0
   1a58c:	bne	1a650 <__assert_fail@plt+0x9378>
   1a590:	ldr	r3, [r8, #20]
   1a594:	cmp	r3, #0
   1a598:	ble	1a384 <__assert_fail@plt+0x90ac>
   1a59c:	ldr	sl, [sp, #12]
   1a5a0:	ldr	r9, [sp, #28]
   1a5a4:	mov	r4, #0
   1a5a8:	mov	r3, #0
   1a5ac:	str	r3, [sp, #40]	; 0x28
   1a5b0:	str	r3, [sp, #44]	; 0x2c
   1a5b4:	ldr	r3, [r8]
   1a5b8:	add	r2, sp, #40	; 0x28
   1a5bc:	add	r0, sp, #48	; 0x30
   1a5c0:	ldr	r1, [r3, r4, lsl #2]
   1a5c4:	bl	10ff0 <wcrtomb@plt>
   1a5c8:	lsl	r2, r4, #2
   1a5cc:	add	r4, r4, #1
   1a5d0:	cmn	r0, #1
   1a5d4:	beq	1a600 <__assert_fail@plt+0x9328>
   1a5d8:	ldrb	fp, [sp, #48]	; 0x30
   1a5dc:	cmp	r6, #0
   1a5e0:	strb	r5, [r7, fp]
   1a5e4:	beq	1a600 <__assert_fail@plt+0x9328>
   1a5e8:	str	r2, [sp, #4]
   1a5ec:	bl	11170 <__ctype_tolower_loc@plt>
   1a5f0:	ldr	r2, [sp, #4]
   1a5f4:	ldr	r3, [r0]
   1a5f8:	ldr	r3, [r3, fp, lsl #2]
   1a5fc:	strb	r5, [r7, r3]
   1a600:	ldr	r3, [r9, #12]
   1a604:	tst	r3, #4194304	; 0x400000
   1a608:	beq	1a640 <__assert_fail@plt+0x9368>
   1a60c:	ldr	r3, [sl, #92]	; 0x5c
   1a610:	cmp	r3, #1
   1a614:	ble	1a640 <__assert_fail@plt+0x9368>
   1a618:	ldr	r3, [r8]
   1a61c:	ldr	r0, [r3, r2]
   1a620:	bl	11080 <towlower@plt>
   1a624:	add	r2, sp, #40	; 0x28
   1a628:	mov	r1, r0
   1a62c:	add	r0, sp, #48	; 0x30
   1a630:	bl	10ff0 <wcrtomb@plt>
   1a634:	cmn	r0, #1
   1a638:	ldrbne	r3, [sp, #48]	; 0x30
   1a63c:	strbne	r5, [r7, r3]
   1a640:	ldr	r3, [r8, #20]
   1a644:	cmp	r4, r3
   1a648:	blt	1a5a8 <__assert_fail@plt+0x92d0>
   1a64c:	b	1a4cc <__assert_fail@plt+0x91f4>
   1a650:	mov	r3, #0
   1a654:	strb	r3, [sp, #40]	; 0x28
   1a658:	mov	r0, #0
   1a65c:	add	r3, sp, #48	; 0x30
   1a660:	mov	r2, r5
   1a664:	add	r1, sp, #40	; 0x28
   1a668:	str	r0, [sp, #48]	; 0x30
   1a66c:	str	r0, [sp, #52]	; 0x34
   1a670:	bl	23224 <__assert_fail@plt+0x11f4c>
   1a674:	ldrb	r3, [sp, #40]	; 0x28
   1a678:	cmn	r0, #2
   1a67c:	strbeq	r5, [r7, r3]
   1a680:	add	r3, r3, #1
   1a684:	uxtb	r3, r3
   1a688:	cmp	r3, #0
   1a68c:	strb	r3, [sp, #40]	; 0x28
   1a690:	bne	1a658 <__assert_fail@plt+0x9380>
   1a694:	b	1a4cc <__assert_fail@plt+0x91f4>
   1a698:	mov	r0, r7
   1a69c:	mov	r2, #256	; 0x100
   1a6a0:	mov	r1, #1
   1a6a4:	bl	111f4 <memset@plt>
   1a6a8:	ldr	r2, [sp, #28]
   1a6ac:	ldrb	r3, [r2, #28]
   1a6b0:	orr	r3, r3, #1
   1a6b4:	strb	r3, [r2, #28]
   1a6b8:	add	sp, sp, #308	; 0x134
   1a6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6c0:	ldr	r0, [sp, #36]	; 0x24
   1a6c4:	bl	11080 <towlower@plt>
   1a6c8:	add	r2, sp, #40	; 0x28
   1a6cc:	mov	r1, r0
   1a6d0:	add	r0, sp, #48	; 0x30
   1a6d4:	bl	10ff0 <wcrtomb@plt>
   1a6d8:	cmn	r0, #1
   1a6dc:	beq	1a4cc <__assert_fail@plt+0x91f4>
   1a6e0:	ldrb	r3, [sp, #48]	; 0x30
   1a6e4:	strb	r5, [r7, r3]
   1a6e8:	ldr	r3, [sp, #24]
   1a6ec:	ldr	ip, [r3]
   1a6f0:	b	1a384 <__assert_fail@plt+0x90ac>
   1a6f4:	add	r4, sp, #49	; 0x31
   1a6f8:	b	1a49c <__assert_fail@plt+0x91c4>
   1a6fc:	mov	r0, r7
   1a700:	mov	r2, #256	; 0x100
   1a704:	mov	r1, #1
   1a708:	bl	111f4 <memset@plt>
   1a70c:	cmp	r4, #2
   1a710:	beq	1a6a8 <__assert_fail@plt+0x93d0>
   1a714:	add	sp, sp, #308	; 0x134
   1a718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a71c:	eoreq	r0, r0, r1
   1a720:	add	ip, r0, r2, lsl #3
   1a724:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a728:	ldrb	r6, [ip, #4]
   1a72c:	ldr	r7, [sp, #32]
   1a730:	cmp	r6, #7
   1a734:	beq	1a814 <__assert_fail@plt+0x953c>
   1a738:	ldr	ip, [r3, #80]	; 0x50
   1a73c:	cmp	ip, #1
   1a740:	beq	1a828 <__assert_fail@plt+0x9550>
   1a744:	ldr	r5, [r3, #28]
   1a748:	add	lr, r7, #1
   1a74c:	cmp	r5, lr
   1a750:	ble	1a828 <__assert_fail@plt+0x9550>
   1a754:	ldr	r8, [r3, #8]
   1a758:	add	ip, r8, lr, lsl #2
   1a75c:	ldr	lr, [r8, lr, lsl #2]
   1a760:	cmn	lr, #1
   1a764:	subeq	r5, r5, r7
   1a768:	moveq	r4, #1
   1a76c:	beq	1a780 <__assert_fail@plt+0x94a8>
   1a770:	b	1a828 <__assert_fail@plt+0x9550>
   1a774:	ldr	lr, [ip, #4]!
   1a778:	cmn	lr, #1
   1a77c:	bne	1a78c <__assert_fail@plt+0x94b4>
   1a780:	add	r4, r4, #1
   1a784:	cmp	r4, r5
   1a788:	bne	1a774 <__assert_fail@plt+0x949c>
   1a78c:	cmp	r6, #5
   1a790:	beq	1a834 <__assert_fail@plt+0x955c>
   1a794:	cmp	r4, #1
   1a798:	sub	r6, r6, #6
   1a79c:	clz	r6, r6
   1a7a0:	lsr	r6, r6, #5
   1a7a4:	moveq	r6, #0
   1a7a8:	cmp	r6, #0
   1a7ac:	beq	1a828 <__assert_fail@plt+0x9550>
   1a7b0:	ldr	r9, [r0, r2, lsl #3]
   1a7b4:	ldr	ip, [r9, #32]
   1a7b8:	cmp	ip, #0
   1a7bc:	beq	1a870 <__assert_fail@plt+0x9598>
   1a7c0:	ldr	r0, [r9, #20]
   1a7c4:	cmp	r0, #0
   1a7c8:	ldr	r5, [r8, r7, lsl #2]
   1a7cc:	ble	1a800 <__assert_fail@plt+0x9528>
   1a7d0:	ldr	r2, [r9]
   1a7d4:	ldr	r3, [r2]
   1a7d8:	cmp	r5, r3
   1a7dc:	movne	r3, #0
   1a7e0:	bne	1a7f4 <__assert_fail@plt+0x951c>
   1a7e4:	b	1a8c0 <__assert_fail@plt+0x95e8>
   1a7e8:	ldr	r1, [r2, #4]!
   1a7ec:	cmp	r5, r1
   1a7f0:	beq	1a8c0 <__assert_fail@plt+0x95e8>
   1a7f4:	add	r3, r3, #1
   1a7f8:	cmp	r3, r0
   1a7fc:	bne	1a7e8 <__assert_fail@plt+0x9510>
   1a800:	ldr	r3, [r9, #36]	; 0x24
   1a804:	cmp	r3, #0
   1a808:	ble	1a904 <__assert_fail@plt+0x962c>
   1a80c:	mov	r6, #0
   1a810:	b	1a8a4 <__assert_fail@plt+0x95cc>
   1a814:	ldr	r2, [r3, #4]
   1a818:	add	r0, r2, r7
   1a81c:	ldrb	r1, [r2, r7]
   1a820:	cmp	r1, #193	; 0xc1
   1a824:	bhi	1a8d0 <__assert_fail@plt+0x95f8>
   1a828:	mov	r4, #0
   1a82c:	mov	r0, r4
   1a830:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a834:	ldr	r2, [r1]
   1a838:	tst	r2, #64	; 0x40
   1a83c:	beq	1a85c <__assert_fail@plt+0x9584>
   1a840:	tst	r2, #128	; 0x80
   1a844:	beq	1a82c <__assert_fail@plt+0x9554>
   1a848:	ldr	r3, [r3, #4]
   1a84c:	ldrb	r3, [r3, r7]
   1a850:	cmp	r3, #0
   1a854:	beq	1a828 <__assert_fail@plt+0x9550>
   1a858:	b	1a82c <__assert_fail@plt+0x9554>
   1a85c:	ldr	r1, [r3, #4]
   1a860:	ldrb	r1, [r1, r7]
   1a864:	cmp	r1, #10
   1a868:	bne	1a840 <__assert_fail@plt+0x9568>
   1a86c:	b	1a828 <__assert_fail@plt+0x9550>
   1a870:	ldr	r3, [r9, #36]	; 0x24
   1a874:	ldr	r0, [r9, #20]
   1a878:	cmp	r3, #0
   1a87c:	bne	1a7c4 <__assert_fail@plt+0x94ec>
   1a880:	cmp	r0, #0
   1a884:	bne	1a7c4 <__assert_fail@plt+0x94ec>
   1a888:	ldrb	r3, [r9, #16]
   1a88c:	tst	r3, #1
   1a890:	bne	1a82c <__assert_fail@plt+0x9554>
   1a894:	b	1a828 <__assert_fail@plt+0x9550>
   1a898:	ldr	r3, [r9, #36]	; 0x24
   1a89c:	cmp	r6, r3
   1a8a0:	bge	1a900 <__assert_fail@plt+0x9628>
   1a8a4:	ldr	r3, [r9, #12]
   1a8a8:	mov	r0, r5
   1a8ac:	ldr	r1, [r3, r6, lsl #2]
   1a8b0:	bl	10ffc <iswctype@plt>
   1a8b4:	add	r6, r6, #1
   1a8b8:	cmp	r0, #0
   1a8bc:	beq	1a898 <__assert_fail@plt+0x95c0>
   1a8c0:	ldrb	r3, [r9, #16]
   1a8c4:	tst	r3, #1
   1a8c8:	beq	1a82c <__assert_fail@plt+0x9554>
   1a8cc:	b	1a828 <__assert_fail@plt+0x9550>
   1a8d0:	ldr	ip, [r3, #48]	; 0x30
   1a8d4:	add	r3, r7, #1
   1a8d8:	cmp	r3, ip
   1a8dc:	bge	1a828 <__assert_fail@plt+0x9550>
   1a8e0:	cmp	r1, #223	; 0xdf
   1a8e4:	ldrb	r3, [r0, #1]
   1a8e8:	bhi	1a948 <__assert_fail@plt+0x9670>
   1a8ec:	eor	r3, r3, #128	; 0x80
   1a8f0:	cmp	r3, #63	; 0x3f
   1a8f4:	movls	r4, #2
   1a8f8:	bls	1a82c <__assert_fail@plt+0x9554>
   1a8fc:	b	1a828 <__assert_fail@plt+0x9550>
   1a900:	ldr	ip, [r9, #32]
   1a904:	cmp	ip, #0
   1a908:	ble	1a888 <__assert_fail@plt+0x95b0>
   1a90c:	ldr	r2, [r9, #4]
   1a910:	mov	r3, #0
   1a914:	sub	r2, r2, #4
   1a918:	b	1a928 <__assert_fail@plt+0x9650>
   1a91c:	add	r3, r3, #1
   1a920:	cmp	r3, ip
   1a924:	beq	1a888 <__assert_fail@plt+0x95b0>
   1a928:	ldr	r1, [r2, #4]!
   1a92c:	cmp	r5, r1
   1a930:	bcc	1a91c <__assert_fail@plt+0x9644>
   1a934:	ldr	r1, [r9, #8]
   1a938:	ldr	r1, [r1, r3, lsl #2]
   1a93c:	cmp	r5, r1
   1a940:	bhi	1a91c <__assert_fail@plt+0x9644>
   1a944:	b	1a8c0 <__assert_fail@plt+0x95e8>
   1a948:	cmp	r1, #239	; 0xef
   1a94c:	bhi	1a998 <__assert_fail@plt+0x96c0>
   1a950:	cmp	r3, #159	; 0x9f
   1a954:	cmpls	r1, #224	; 0xe0
   1a958:	movne	r4, #3
   1a95c:	beq	1a828 <__assert_fail@plt+0x9550>
   1a960:	add	r3, r7, r4
   1a964:	cmp	ip, r3
   1a968:	blt	1a828 <__assert_fail@plt+0x9550>
   1a96c:	sub	r3, r7, #1
   1a970:	add	r3, r3, r4
   1a974:	add	r2, r2, r3
   1a978:	b	1a984 <__assert_fail@plt+0x96ac>
   1a97c:	cmp	r2, r0
   1a980:	beq	1a82c <__assert_fail@plt+0x9554>
   1a984:	ldrb	r3, [r0, #1]!
   1a988:	eor	r3, r3, #128	; 0x80
   1a98c:	cmp	r3, #63	; 0x3f
   1a990:	bls	1a97c <__assert_fail@plt+0x96a4>
   1a994:	b	1a828 <__assert_fail@plt+0x9550>
   1a998:	cmp	r1, #247	; 0xf7
   1a99c:	bhi	1a9b4 <__assert_fail@plt+0x96dc>
   1a9a0:	cmp	r3, #143	; 0x8f
   1a9a4:	cmpls	r1, #240	; 0xf0
   1a9a8:	movne	r4, #4
   1a9ac:	bne	1a960 <__assert_fail@plt+0x9688>
   1a9b0:	b	1a828 <__assert_fail@plt+0x9550>
   1a9b4:	cmp	r1, #251	; 0xfb
   1a9b8:	bhi	1a9d0 <__assert_fail@plt+0x96f8>
   1a9bc:	cmp	r3, #135	; 0x87
   1a9c0:	cmpls	r1, #248	; 0xf8
   1a9c4:	movne	r4, #5
   1a9c8:	bne	1a960 <__assert_fail@plt+0x9688>
   1a9cc:	b	1a828 <__assert_fail@plt+0x9550>
   1a9d0:	cmp	r1, #253	; 0xfd
   1a9d4:	bhi	1a828 <__assert_fail@plt+0x9550>
   1a9d8:	cmp	r3, #131	; 0x83
   1a9dc:	cmpls	r1, #252	; 0xfc
   1a9e0:	beq	1a828 <__assert_fail@plt+0x9550>
   1a9e4:	mov	r4, #6
   1a9e8:	b	1a960 <__assert_fail@plt+0x9688>
   1a9ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9f0:	mov	r5, r0
   1a9f4:	ldr	r0, [r0, #84]	; 0x54
   1a9f8:	sub	sp, sp, #84	; 0x54
   1a9fc:	mov	ip, r1
   1aa00:	str	r0, [sp, #28]
   1aa04:	ldr	r0, [r0]
   1aa08:	mov	r8, r2
   1aa0c:	str	r1, [sp, #36]	; 0x24
   1aa10:	ldr	r2, [sp, #124]	; 0x7c
   1aa14:	ldr	r1, [r5, #120]	; 0x78
   1aa18:	ldr	r4, [ip, #4]
   1aa1c:	mov	r7, #0
   1aa20:	add	r2, r2, r1
   1aa24:	mov	r6, r3
   1aa28:	str	r7, [sp, #48]	; 0x30
   1aa2c:	ldr	r3, [r0, r8, lsl #3]
   1aa30:	cmp	r2, r4
   1aa34:	str	r3, [sp, #32]
   1aa38:	bge	1af40 <__assert_fail@plt+0x9c68>
   1aa3c:	ldr	r3, [sp, #36]	; 0x24
   1aa40:	ldr	r4, [r3]
   1aa44:	cmp	r4, #0
   1aa48:	beq	1ae14 <__assert_fail@plt+0x9b3c>
   1aa4c:	ldr	r9, [r3, #8]
   1aa50:	ldr	r3, [r5, #100]	; 0x64
   1aa54:	ldr	r2, [r5, #88]	; 0x58
   1aa58:	str	r3, [sp, #40]	; 0x28
   1aa5c:	ldr	r3, [r5, #40]	; 0x28
   1aa60:	str	r9, [r5, #100]	; 0x64
   1aa64:	str	r4, [r5, #40]	; 0x28
   1aa68:	sub	r1, r4, #1
   1aa6c:	mov	r0, r5
   1aa70:	str	r3, [sp, #44]	; 0x2c
   1aa74:	bl	18b84 <__assert_fail@plt+0x78ac>
   1aa78:	cmp	r4, r6
   1aa7c:	mov	r7, r0
   1aa80:	beq	1ae48 <__assert_fail@plt+0x9b70>
   1aa84:	ldr	r8, [r9, r4, lsl #2]
   1aa88:	cmp	r8, #0
   1aa8c:	beq	1af94 <__assert_fail@plt+0x9cbc>
   1aa90:	ldrb	r3, [r8, #52]	; 0x34
   1aa94:	add	fp, sp, #56	; 0x38
   1aa98:	ands	r2, r3, #64	; 0x40
   1aa9c:	streq	r2, [sp, #56]	; 0x38
   1aaa0:	streq	r2, [fp, #4]
   1aaa4:	streq	r2, [fp, #8]
   1aaa8:	bne	1af20 <__assert_fail@plt+0x9c48>
   1aaac:	tst	r3, #64	; 0x40
   1aab0:	beq	1ab0c <__assert_fail@plt+0x9834>
   1aab4:	ldr	r3, [sp, #60]	; 0x3c
   1aab8:	cmp	r3, #0
   1aabc:	beq	1aae8 <__assert_fail@plt+0x9810>
   1aac0:	ldr	r3, [sp, #128]	; 0x80
   1aac4:	mov	r2, r4
   1aac8:	str	r3, [sp]
   1aacc:	mov	r1, fp
   1aad0:	ldr	r3, [sp, #32]
   1aad4:	mov	r0, r5
   1aad8:	bl	17ddc <__assert_fail@plt+0x6b04>
   1aadc:	cmp	r0, #0
   1aae0:	str	r0, [sp, #48]	; 0x30
   1aae4:	bne	1aeb0 <__assert_fail@plt+0x9bd8>
   1aae8:	mov	r3, r7
   1aaec:	mov	r2, fp
   1aaf0:	ldr	r1, [sp, #28]
   1aaf4:	add	r0, sp, #48	; 0x30
   1aaf8:	bl	17034 <__assert_fail@plt+0x5d5c>
   1aafc:	subs	r8, r0, #0
   1ab00:	beq	1afa8 <__assert_fail@plt+0x9cd0>
   1ab04:	ldr	r3, [r5, #100]	; 0x64
   1ab08:	str	r8, [r3, r4, lsl #2]
   1ab0c:	ldr	r3, [sp, #124]	; 0x7c
   1ab10:	cmp	r3, r4
   1ab14:	ble	1adc0 <__assert_fail@plt+0x9ae8>
   1ab18:	ldr	r3, [r5, #120]	; 0x78
   1ab1c:	cmp	r3, #0
   1ab20:	blt	1adc0 <__assert_fail@plt+0x9ae8>
   1ab24:	mov	r3, #0
   1ab28:	add	r4, r4, #1
   1ab2c:	str	r3, [sp, #24]
   1ab30:	ldr	r3, [r5, #100]	; 0x64
   1ab34:	lsl	r2, r4, #2
   1ab38:	str	r2, [sp, #12]
   1ab3c:	str	r4, [sp, #8]
   1ab40:	ldr	r2, [sp, #12]
   1ab44:	ldr	r1, [r3, r2]
   1ab48:	mov	r3, #0
   1ab4c:	str	r3, [sp, #60]	; 0x3c
   1ab50:	cmp	r1, r3
   1ab54:	ldr	r3, [sp, #8]
   1ab58:	sub	sl, r3, #1
   1ab5c:	beq	1aed4 <__assert_fail@plt+0x9bfc>
   1ab60:	add	r1, r1, #4
   1ab64:	mov	r0, fp
   1ab68:	bl	178e0 <__assert_fail@plt+0x6608>
   1ab6c:	cmp	r0, #0
   1ab70:	str	r0, [sp, #48]	; 0x30
   1ab74:	bne	1aeb0 <__assert_fail@plt+0x9bd8>
   1ab78:	cmp	r8, #0
   1ab7c:	beq	1acf4 <__assert_fail@plt+0x9a1c>
   1ab80:	ldr	r3, [r8, #20]
   1ab84:	mov	r2, #0
   1ab88:	cmp	r3, r2
   1ab8c:	str	r2, [sp, #52]	; 0x34
   1ab90:	str	r2, [sp, #68]	; 0x44
   1ab94:	str	r2, [sp, #72]	; 0x48
   1ab98:	str	r2, [sp, #76]	; 0x4c
   1ab9c:	ldr	r9, [r5, #84]	; 0x54
   1aba0:	ble	1afc0 <__assert_fail@plt+0x9ce8>
   1aba4:	ldr	r3, [r8, #24]
   1aba8:	mov	r4, #0
   1abac:	ldr	r6, [r3]
   1abb0:	mov	r3, r9
   1abb4:	ldr	r0, [r3], #128	; 0x80
   1abb8:	lsl	r7, r6, #3
   1abbc:	str	r3, [sp, #16]
   1abc0:	add	r3, r0, r7
   1abc4:	b	1ac20 <__assert_fail@plt+0x9948>
   1abc8:	add	r1, r0, r7
   1abcc:	mov	r2, sl
   1abd0:	mov	r0, r5
   1abd4:	bl	19440 <__assert_fail@plt+0x8168>
   1abd8:	cmp	r0, #0
   1abdc:	beq	1abfc <__assert_fail@plt+0x9924>
   1abe0:	lsl	r7, r6, #2
   1abe4:	ldr	r2, [r9, #12]
   1abe8:	mov	r0, fp
   1abec:	ldr	r1, [r2, r7]
   1abf0:	bl	15dd4 <__assert_fail@plt+0x4afc>
   1abf4:	cmp	r0, #0
   1abf8:	beq	1aea0 <__assert_fail@plt+0x9bc8>
   1abfc:	ldr	r3, [r8, #20]
   1ac00:	add	r4, r4, #1
   1ac04:	cmp	r4, r3
   1ac08:	bge	1aee4 <__assert_fail@plt+0x9c0c>
   1ac0c:	ldr	r3, [r8, #24]
   1ac10:	ldr	r0, [r9]
   1ac14:	ldr	r6, [r3, r4, lsl #2]
   1ac18:	lsl	r7, r6, #3
   1ac1c:	add	r3, r0, r7
   1ac20:	ldrb	r3, [r3, #6]
   1ac24:	tst	r3, #16
   1ac28:	beq	1abc8 <__assert_fail@plt+0x98f0>
   1ac2c:	str	sl, [sp]
   1ac30:	mov	r3, r5
   1ac34:	mov	r2, r6
   1ac38:	ldr	r1, [sp, #16]
   1ac3c:	bl	1a720 <__assert_fail@plt+0x9448>
   1ac40:	cmp	r0, #1
   1ac44:	ble	1aec4 <__assert_fail@plt+0x9bec>
   1ac48:	add	r2, r0, sl
   1ac4c:	ldr	r3, [r5, #100]	; 0x64
   1ac50:	mov	r1, r2
   1ac54:	str	r2, [sp, #20]
   1ac58:	ldr	r1, [r3, r1, lsl #2]
   1ac5c:	ldr	r2, [r9, #12]
   1ac60:	mov	r3, #0
   1ac64:	cmp	r1, #0
   1ac68:	lsl	r7, r6, #2
   1ac6c:	ldr	r6, [r2, r6, lsl #2]
   1ac70:	str	r3, [sp, #72]	; 0x48
   1ac74:	beq	1ac90 <__assert_fail@plt+0x99b8>
   1ac78:	add	r1, r1, #4
   1ac7c:	add	r0, sp, #68	; 0x44
   1ac80:	bl	178e0 <__assert_fail@plt+0x6608>
   1ac84:	cmp	r0, #0
   1ac88:	str	r0, [sp, #52]	; 0x34
   1ac8c:	bne	1acdc <__assert_fail@plt+0x9a04>
   1ac90:	mov	r1, r6
   1ac94:	add	r0, sp, #68	; 0x44
   1ac98:	bl	15dd4 <__assert_fail@plt+0x4afc>
   1ac9c:	cmp	r0, #0
   1aca0:	beq	1aea0 <__assert_fail@plt+0x9bc8>
   1aca4:	add	r2, sp, #68	; 0x44
   1aca8:	mov	r1, r9
   1acac:	add	r0, sp, #52	; 0x34
   1acb0:	ldr	r6, [r5, #100]	; 0x64
   1acb4:	bl	17360 <__assert_fail@plt+0x6088>
   1acb8:	ldr	r2, [r5, #100]	; 0x64
   1acbc:	ldr	r3, [sp, #20]
   1acc0:	str	r0, [r6, r3, lsl #2]
   1acc4:	ldr	r2, [r2, r3, lsl #2]
   1acc8:	cmp	r2, #0
   1accc:	bne	1abe4 <__assert_fail@plt+0x990c>
   1acd0:	ldr	r2, [sp, #52]	; 0x34
   1acd4:	cmp	r2, #0
   1acd8:	beq	1abe4 <__assert_fail@plt+0x990c>
   1acdc:	ldr	r0, [sp, #76]	; 0x4c
   1ace0:	bl	23198 <__assert_fail@plt+0x11ec0>
   1ace4:	ldr	r3, [sp, #52]	; 0x34
   1ace8:	cmp	r3, #0
   1acec:	str	r3, [sp, #48]	; 0x30
   1acf0:	bne	1aeb0 <__assert_fail@plt+0x9bd8>
   1acf4:	ldr	r3, [sp, #60]	; 0x3c
   1acf8:	ldr	r4, [sp, #8]
   1acfc:	cmp	r3, #0
   1ad00:	beq	1ad4c <__assert_fail@plt+0x9a74>
   1ad04:	ldr	r3, [sp, #128]	; 0x80
   1ad08:	ldr	r2, [sp, #32]
   1ad0c:	mov	r1, fp
   1ad10:	ldr	r0, [sp, #28]
   1ad14:	bl	17ca8 <__assert_fail@plt+0x69d0>
   1ad18:	cmp	r0, #0
   1ad1c:	str	r0, [sp, #48]	; 0x30
   1ad20:	bne	1aeb0 <__assert_fail@plt+0x9bd8>
   1ad24:	ldr	r3, [sp, #128]	; 0x80
   1ad28:	ldr	r2, [sp, #8]
   1ad2c:	str	r3, [sp]
   1ad30:	mov	r1, fp
   1ad34:	ldr	r3, [sp, #32]
   1ad38:	mov	r0, r5
   1ad3c:	bl	17ddc <__assert_fail@plt+0x6b04>
   1ad40:	cmp	r0, #0
   1ad44:	str	r0, [sp, #48]	; 0x30
   1ad48:	bne	1aeb0 <__assert_fail@plt+0x9bd8>
   1ad4c:	ldr	r2, [r5, #88]	; 0x58
   1ad50:	mov	r1, sl
   1ad54:	mov	r0, r5
   1ad58:	bl	18b84 <__assert_fail@plt+0x78ac>
   1ad5c:	mov	r2, fp
   1ad60:	ldr	r1, [sp, #28]
   1ad64:	mov	r3, r0
   1ad68:	add	r0, sp, #48	; 0x30
   1ad6c:	bl	17034 <__assert_fail@plt+0x5d5c>
   1ad70:	subs	r8, r0, #0
   1ad74:	beq	1aef8 <__assert_fail@plt+0x9c20>
   1ad78:	mov	r2, #0
   1ad7c:	str	r2, [sp, #24]
   1ad80:	ldr	r3, [r5, #100]	; 0x64
   1ad84:	ldr	r2, [sp, #12]
   1ad88:	str	r8, [r3, r2]
   1ad8c:	ldr	r0, [sp, #124]	; 0x7c
   1ad90:	ldr	r1, [sp, #8]
   1ad94:	cmp	r0, r1
   1ad98:	ble	1adc0 <__assert_fail@plt+0x9ae8>
   1ad9c:	ldr	r0, [sp, #12]
   1ada0:	ldr	r2, [r5, #120]	; 0x78
   1ada4:	add	r0, r0, #4
   1ada8:	str	r0, [sp, #12]
   1adac:	ldr	r0, [sp, #24]
   1adb0:	cmp	r0, r2
   1adb4:	add	r2, r1, #1
   1adb8:	str	r2, [sp, #8]
   1adbc:	ble	1ab40 <__assert_fail@plt+0x9868>
   1adc0:	ldr	r0, [sp, #64]	; 0x40
   1adc4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1adc8:	ldr	r3, [r5, #100]	; 0x64
   1adcc:	ldr	r2, [sp, #124]	; 0x7c
   1add0:	ldr	r3, [r3, r2, lsl #2]
   1add4:	cmp	r3, #0
   1add8:	beq	1afc8 <__assert_fail@plt+0x9cf0>
   1addc:	ldr	r2, [sp, #36]	; 0x24
   1ade0:	add	r1, r3, #12
   1ade4:	str	r4, [r2]
   1ade8:	ldr	r2, [sp, #44]	; 0x2c
   1adec:	str	r2, [r5, #40]	; 0x28
   1adf0:	ldr	r2, [sp, #40]	; 0x28
   1adf4:	ldr	r0, [r3, #8]
   1adf8:	str	r2, [r5, #100]	; 0x64
   1adfc:	ldr	r2, [sp, #120]	; 0x78
   1ae00:	bl	16364 <__assert_fail@plt+0x508c>
   1ae04:	clz	r0, r0
   1ae08:	lsr	r0, r0, #5
   1ae0c:	add	sp, sp, #84	; 0x54
   1ae10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae14:	ldr	r3, [sp, #36]	; 0x24
   1ae18:	ldr	r2, [r5, #100]	; 0x64
   1ae1c:	sub	r1, r6, #1
   1ae20:	ldr	r3, [r3, #8]
   1ae24:	str	r2, [sp, #40]	; 0x28
   1ae28:	ldr	r2, [r5, #40]	; 0x28
   1ae2c:	str	r3, [r5, #100]	; 0x64
   1ae30:	str	r2, [sp, #44]	; 0x2c
   1ae34:	str	r6, [r5, #40]	; 0x28
   1ae38:	ldr	r2, [r5, #88]	; 0x58
   1ae3c:	mov	r0, r5
   1ae40:	bl	18b84 <__assert_fail@plt+0x78ac>
   1ae44:	mov	r7, r0
   1ae48:	mov	r3, #1
   1ae4c:	mov	r0, #4
   1ae50:	str	r3, [sp, #56]	; 0x38
   1ae54:	str	r3, [sp, #60]	; 0x3c
   1ae58:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1ae5c:	cmp	r0, #0
   1ae60:	str	r0, [sp, #64]	; 0x40
   1ae64:	beq	1afb8 <__assert_fail@plt+0x9ce0>
   1ae68:	add	fp, sp, #56	; 0x38
   1ae6c:	mov	ip, #0
   1ae70:	str	r8, [r0]
   1ae74:	mov	r1, fp
   1ae78:	ldr	r3, [sp, #128]	; 0x80
   1ae7c:	ldr	r2, [sp, #32]
   1ae80:	ldr	r0, [sp, #28]
   1ae84:	str	ip, [sp, #48]	; 0x30
   1ae88:	bl	17ca8 <__assert_fail@plt+0x69d0>
   1ae8c:	cmp	r0, #0
   1ae90:	str	r0, [sp, #48]	; 0x30
   1ae94:	moveq	r4, r6
   1ae98:	beq	1aab4 <__assert_fail@plt+0x97dc>
   1ae9c:	b	1aeb0 <__assert_fail@plt+0x9bd8>
   1aea0:	ldr	r0, [sp, #76]	; 0x4c
   1aea4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1aea8:	mov	r3, #12
   1aeac:	str	r3, [sp, #48]	; 0x30
   1aeb0:	ldr	r0, [sp, #64]	; 0x40
   1aeb4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1aeb8:	ldr	r0, [sp, #48]	; 0x30
   1aebc:	add	sp, sp, #84	; 0x54
   1aec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aec4:	cmp	r0, #0
   1aec8:	bne	1abe0 <__assert_fail@plt+0x9908>
   1aecc:	ldr	r0, [r9]
   1aed0:	b	1abc8 <__assert_fail@plt+0x98f0>
   1aed4:	cmp	r8, #0
   1aed8:	bne	1ab80 <__assert_fail@plt+0x98a8>
   1aedc:	ldr	r4, [sp, #8]
   1aee0:	b	1ad4c <__assert_fail@plt+0x9a74>
   1aee4:	ldr	r0, [sp, #76]	; 0x4c
   1aee8:	bl	23198 <__assert_fail@plt+0x11ec0>
   1aeec:	mov	r3, #0
   1aef0:	str	r3, [sp, #48]	; 0x30
   1aef4:	b	1acf4 <__assert_fail@plt+0x9a1c>
   1aef8:	ldr	r3, [sp, #48]	; 0x30
   1aefc:	cmp	r3, #0
   1af00:	bne	1aeb0 <__assert_fail@plt+0x9bd8>
   1af04:	ldr	r2, [sp, #24]
   1af08:	ldr	r3, [r5, #100]	; 0x64
   1af0c:	add	r2, r2, #1
   1af10:	str	r2, [sp, #24]
   1af14:	ldr	r2, [sp, #12]
   1af18:	str	r8, [r3, r2]
   1af1c:	b	1ad8c <__assert_fail@plt+0x9ab4>
   1af20:	mov	r0, fp
   1af24:	add	r1, r8, #4
   1af28:	bl	16e70 <__assert_fail@plt+0x5b98>
   1af2c:	cmp	r0, #0
   1af30:	str	r0, [sp, #48]	; 0x30
   1af34:	bne	1aebc <__assert_fail@plt+0x9be4>
   1af38:	ldrb	r3, [r8, #52]	; 0x34
   1af3c:	b	1aaac <__assert_fail@plt+0x97d4>
   1af40:	mvn	r3, #-2147483648	; 0x80000000
   1af44:	add	r9, r2, #1
   1af48:	sub	r3, r3, r4
   1af4c:	cmp	r9, r3
   1af50:	bgt	1afb8 <__assert_fail@plt+0x9ce0>
   1af54:	add	sl, r4, r9
   1af58:	cmn	sl, #-1073741823	; 0xc0000001
   1af5c:	bhi	1afb8 <__assert_fail@plt+0x9ce0>
   1af60:	ldr	fp, [sp, #36]	; 0x24
   1af64:	lsl	r1, sl, #2
   1af68:	ldr	r0, [fp, #8]
   1af6c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1af70:	cmp	r0, #0
   1af74:	beq	1afb8 <__assert_fail@plt+0x9ce0>
   1af78:	str	r0, [fp, #8]
   1af7c:	str	sl, [fp, #4]
   1af80:	lsl	r2, r9, #2
   1af84:	mov	r1, r7
   1af88:	add	r0, r0, r4, lsl #2
   1af8c:	bl	111f4 <memset@plt>
   1af90:	b	1aa3c <__assert_fail@plt+0x9764>
   1af94:	add	fp, sp, #56	; 0x38
   1af98:	str	r8, [sp, #56]	; 0x38
   1af9c:	str	r8, [fp, #4]
   1afa0:	str	r8, [fp, #8]
   1afa4:	b	1ab0c <__assert_fail@plt+0x9834>
   1afa8:	ldr	r3, [sp, #48]	; 0x30
   1afac:	cmp	r3, #0
   1afb0:	beq	1ab04 <__assert_fail@plt+0x982c>
   1afb4:	b	1aeb0 <__assert_fail@plt+0x9bd8>
   1afb8:	mov	r0, #12
   1afbc:	b	1aebc <__assert_fail@plt+0x9be4>
   1afc0:	mov	r0, #0
   1afc4:	b	1aee8 <__assert_fail@plt+0x9c10>
   1afc8:	ldr	r3, [sp, #36]	; 0x24
   1afcc:	mov	r0, #1
   1afd0:	str	r4, [r3]
   1afd4:	ldr	r3, [sp, #40]	; 0x28
   1afd8:	str	r3, [r5, #100]	; 0x64
   1afdc:	ldr	r3, [sp, #44]	; 0x2c
   1afe0:	str	r3, [r5, #40]	; 0x28
   1afe4:	b	1aebc <__assert_fail@plt+0x9be4>
   1afe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afec:	sub	sp, sp, #20
   1aff0:	mov	ip, r2
   1aff4:	ldr	r5, [sp, #56]	; 0x38
   1aff8:	ldr	r4, [r2, #4]
   1affc:	mov	lr, #8
   1b000:	mov	r6, r2
   1b004:	ldr	r2, [ip], #8
   1b008:	mov	r7, r3
   1b00c:	str	r3, [sp]
   1b010:	mov	r8, r1
   1b014:	mov	r3, r4
   1b018:	mov	r1, ip
   1b01c:	stmib	sp, {r5, lr}
   1b020:	mov	r4, r0
   1b024:	bl	1a9ec <__assert_fail@plt+0x9714>
   1b028:	subs	fp, r0, #0
   1b02c:	beq	1b03c <__assert_fail@plt+0x9d64>
   1b030:	mov	r0, fp
   1b034:	add	sp, sp, #20
   1b038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b03c:	ldr	r3, [r4, #108]	; 0x6c
   1b040:	ldr	r1, [r4, #112]	; 0x70
   1b044:	ldr	r9, [r6, #4]
   1b048:	cmp	r3, r1
   1b04c:	ldr	sl, [r8]
   1b050:	movlt	lr, r9
   1b054:	bge	1b0e0 <__assert_fail@plt+0x9e08>
   1b058:	add	r2, r3, r3, lsl #1
   1b05c:	cmp	r3, #0
   1b060:	ldr	ip, [r4, #116]	; 0x74
   1b064:	lsl	r2, r2, #3
   1b068:	ble	1b084 <__assert_fail@plt+0x9dac>
   1b06c:	sub	r0, r2, #24
   1b070:	add	r0, ip, r0
   1b074:	ldr	r1, [r0, #4]
   1b078:	cmp	r5, r1
   1b07c:	moveq	r1, #1
   1b080:	strbeq	r1, [r0, #20]
   1b084:	add	r0, ip, r2
   1b088:	cmp	sl, r9
   1b08c:	str	r7, [ip, r2]
   1b090:	movne	r1, #0
   1b094:	mvneq	r1, #0
   1b098:	add	r3, r3, #1
   1b09c:	mov	r2, #0
   1b0a0:	stmib	r0, {r5, sl}
   1b0a4:	str	r9, [r0, #12]
   1b0a8:	str	r1, [r0, #16]
   1b0ac:	str	r3, [r4, #108]	; 0x6c
   1b0b0:	strb	r2, [r0, #20]
   1b0b4:	ldr	r3, [r4, #120]	; 0x78
   1b0b8:	sub	r9, r9, sl
   1b0bc:	cmp	r3, r9
   1b0c0:	strlt	r9, [r4, #120]	; 0x78
   1b0c4:	ldr	r1, [r8]
   1b0c8:	add	r5, r5, lr
   1b0cc:	sub	r1, r5, r1
   1b0d0:	mov	r0, r4
   1b0d4:	add	sp, sp, #20
   1b0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0dc:	b	161ac <__assert_fail@plt+0x4ed4>
   1b0e0:	add	r1, r1, r1, lsl #1
   1b0e4:	ldr	r0, [r4, #116]	; 0x74
   1b0e8:	lsl	r1, r1, #4
   1b0ec:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1b0f0:	cmp	r0, #0
   1b0f4:	beq	1b134 <__assert_fail@plt+0x9e5c>
   1b0f8:	ldr	r2, [r4, #112]	; 0x70
   1b0fc:	ldr	r3, [r4, #108]	; 0x6c
   1b100:	str	r0, [r4, #116]	; 0x74
   1b104:	add	r2, r2, r2, lsl #1
   1b108:	add	r3, r3, r3, lsl #1
   1b10c:	lsl	r2, r2, #3
   1b110:	add	r0, r0, r3, lsl #3
   1b114:	mov	r1, fp
   1b118:	bl	111f4 <memset@plt>
   1b11c:	ldr	r2, [r4, #112]	; 0x70
   1b120:	ldr	lr, [r6, #4]
   1b124:	ldr	r3, [r4, #108]	; 0x6c
   1b128:	lsl	r2, r2, #1
   1b12c:	str	r2, [r4, #112]	; 0x70
   1b130:	b	1b058 <__assert_fail@plt+0x9d80>
   1b134:	ldr	r0, [r4, #116]	; 0x74
   1b138:	bl	23198 <__assert_fail@plt+0x11ec0>
   1b13c:	mov	fp, #12
   1b140:	b	1b030 <__assert_fail@plt+0x9d58>
   1b144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b148:	sub	sp, sp, #92	; 0x5c
   1b14c:	ldr	r6, [r1]
   1b150:	ldr	r3, [r0, #84]	; 0x54
   1b154:	cmp	r6, #0
   1b158:	str	r3, [sp, #32]
   1b15c:	ldr	sl, [r0, #40]	; 0x28
   1b160:	ble	1b688 <__assert_fail@plt+0xa3b0>
   1b164:	mov	r3, #0
   1b168:	str	r3, [sp, #20]
   1b16c:	lsl	r3, sl, #2
   1b170:	str	r2, [sp, #36]	; 0x24
   1b174:	mov	fp, r0
   1b178:	str	r1, [sp, #60]	; 0x3c
   1b17c:	str	r3, [sp, #48]	; 0x30
   1b180:	b	1b198 <__assert_fail@plt+0x9ec0>
   1b184:	ldr	r3, [sp, #20]
   1b188:	add	r3, r3, #1
   1b18c:	cmp	r3, r6
   1b190:	str	r3, [sp, #20]
   1b194:	bge	1b688 <__assert_fail@plt+0xa3b0>
   1b198:	ldr	r3, [sp, #36]	; 0x24
   1b19c:	ldr	r1, [sp, #20]
   1b1a0:	ldr	r2, [r3]
   1b1a4:	ldr	r3, [sp, #32]
   1b1a8:	ldr	r9, [r2, r1, lsl #2]
   1b1ac:	ldr	r3, [r3]
   1b1b0:	add	r3, r3, r9, lsl #3
   1b1b4:	ldrb	r2, [r3, #4]
   1b1b8:	cmp	r2, #4
   1b1bc:	bne	1b184 <__assert_fail@plt+0x9eac>
   1b1c0:	ldr	r4, [r3, #4]
   1b1c4:	ldr	r3, [pc, #1804]	; 1b8d8 <__assert_fail@plt+0xa600>
   1b1c8:	tst	r4, r3
   1b1cc:	beq	1b220 <__assert_fail@plt+0x9f48>
   1b1d0:	ldr	r2, [fp, #88]	; 0x58
   1b1d4:	mov	r1, sl
   1b1d8:	mov	r0, fp
   1b1dc:	bl	18b84 <__assert_fail@plt+0x78ac>
   1b1e0:	ldr	r3, [pc, #1780]	; 1b8dc <__assert_fail@plt+0xa604>
   1b1e4:	and	r4, r3, r4, lsr #8
   1b1e8:	tst	r4, #4
   1b1ec:	beq	1b480 <__assert_fail@plt+0xa1a8>
   1b1f0:	tst	r0, #1
   1b1f4:	beq	1b184 <__assert_fail@plt+0x9eac>
   1b1f8:	tst	r4, #8
   1b1fc:	bne	1b184 <__assert_fail@plt+0x9eac>
   1b200:	tst	r4, #32
   1b204:	beq	1b210 <__assert_fail@plt+0x9f38>
   1b208:	tst	r0, #2
   1b20c:	beq	1b184 <__assert_fail@plt+0x9eac>
   1b210:	tst	r4, #128	; 0x80
   1b214:	beq	1b220 <__assert_fail@plt+0x9f48>
   1b218:	tst	r0, #8
   1b21c:	beq	1b184 <__assert_fail@plt+0x9eac>
   1b220:	ldr	ip, [fp, #108]	; 0x6c
   1b224:	mov	r0, #0
   1b228:	mov	r5, ip
   1b22c:	mov	r3, ip
   1b230:	cmp	r0, r3
   1b234:	bge	1b290 <__assert_fail@plt+0x9fb8>
   1b238:	add	r2, r0, r3
   1b23c:	ldr	lr, [fp, #116]	; 0x74
   1b240:	add	r2, r2, r2, lsr #31
   1b244:	asr	r2, r2, #1
   1b248:	add	r1, r2, r2, lsl #1
   1b24c:	add	r1, lr, r1, lsl #3
   1b250:	ldr	r1, [r1, #4]
   1b254:	cmp	sl, r1
   1b258:	ble	1b280 <__assert_fail@plt+0x9fa8>
   1b25c:	b	1b46c <__assert_fail@plt+0xa194>
   1b260:	asr	r3, r3, #1
   1b264:	mov	r4, r3
   1b268:	add	r1, r3, r3, lsl #1
   1b26c:	add	r1, lr, r1, lsl #3
   1b270:	ldr	r1, [r1, #4]
   1b274:	cmp	sl, r1
   1b278:	bgt	1b474 <__assert_fail@plt+0xa19c>
   1b27c:	mov	r2, r3
   1b280:	add	r3, r2, r0
   1b284:	cmp	r2, r0
   1b288:	add	r3, r3, r3, lsr #31
   1b28c:	bgt	1b260 <__assert_fail@plt+0x9f88>
   1b290:	cmp	ip, r0
   1b294:	ble	1b494 <__assert_fail@plt+0xa1bc>
   1b298:	add	r2, r0, r0, lsl #1
   1b29c:	ldr	r3, [fp, #116]	; 0x74
   1b2a0:	cmn	r0, #1
   1b2a4:	add	r3, r3, r2, lsl #3
   1b2a8:	ldr	r2, [r3, #4]
   1b2ac:	sub	r2, r2, sl
   1b2b0:	clz	r2, r2
   1b2b4:	lsr	r2, r2, #5
   1b2b8:	moveq	r2, #0
   1b2bc:	cmp	r2, #0
   1b2c0:	beq	1b494 <__assert_fail@plt+0xa1bc>
   1b2c4:	add	r3, r3, #24
   1b2c8:	b	1b2d8 <__assert_fail@plt+0xa000>
   1b2cc:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1b2d0:	cmp	r2, #0
   1b2d4:	beq	1b494 <__assert_fail@plt+0xa1bc>
   1b2d8:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1b2dc:	add	r3, r3, #24
   1b2e0:	cmp	r9, r2
   1b2e4:	bne	1b2cc <__assert_fail@plt+0x9ff4>
   1b2e8:	mov	r3, #0
   1b2ec:	str	r3, [sp, #72]	; 0x48
   1b2f0:	cmp	r5, ip
   1b2f4:	lsl	r3, r9, #2
   1b2f8:	str	r3, [sp, #52]	; 0x34
   1b2fc:	bge	1b460 <__assert_fail@plt+0xa188>
   1b300:	add	r3, r9, r9, lsl #1
   1b304:	add	r4, r5, r5, lsl #1
   1b308:	lsl	r3, r3, #2
   1b30c:	str	r3, [sp, #56]	; 0x38
   1b310:	lsl	r4, r4, #3
   1b314:	ldr	r7, [sp, #32]
   1b318:	b	1b32c <__assert_fail@plt+0xa054>
   1b31c:	add	r5, r5, #1
   1b320:	cmp	r5, ip
   1b324:	add	r4, r4, #24
   1b328:	bge	1b460 <__assert_fail@plt+0xa188>
   1b32c:	ldr	r3, [fp, #116]	; 0x74
   1b330:	add	r2, r3, r4
   1b334:	ldr	r3, [r3, r4]
   1b338:	cmp	r9, r3
   1b33c:	bne	1b31c <__assert_fail@plt+0xa044>
   1b340:	ldr	r3, [r2, #4]
   1b344:	cmp	sl, r3
   1b348:	bne	1b31c <__assert_fail@plt+0xa044>
   1b34c:	ldr	r3, [r2, #12]
   1b350:	ldr	r6, [r2, #8]
   1b354:	subs	r2, r3, r6
   1b358:	str	r2, [sp, #28]
   1b35c:	ldreq	r0, [sp, #56]	; 0x38
   1b360:	ldreq	r2, [r7, #20]
   1b364:	ldrne	r2, [r7, #12]
   1b368:	addeq	r2, r2, r0
   1b36c:	ldrne	r0, [sp, #52]	; 0x34
   1b370:	ldreq	r2, [r2, #8]
   1b374:	ldreq	r1, [r7, #24]
   1b378:	ldrne	r2, [r2, r0]
   1b37c:	ldreq	r2, [r2]
   1b380:	ldrne	r1, [r7, #24]
   1b384:	add	r3, sl, r3
   1b388:	add	r2, r2, r2, lsl #1
   1b38c:	sub	r6, r3, r6
   1b390:	add	r2, r1, r2, lsl #2
   1b394:	str	r2, [sp, #24]
   1b398:	sub	r1, r6, #1
   1b39c:	ldr	r2, [fp, #88]	; 0x58
   1b3a0:	mov	r0, fp
   1b3a4:	bl	18b84 <__assert_fail@plt+0x78ac>
   1b3a8:	ldr	r8, [fp, #100]	; 0x64
   1b3ac:	ldr	r2, [sp, #48]	; 0x30
   1b3b0:	ldr	r1, [r8, r2]
   1b3b4:	ldr	r2, [r8, r6, lsl #2]
   1b3b8:	cmp	r1, #0
   1b3bc:	moveq	r1, #0
   1b3c0:	ldrne	r1, [r1, #8]
   1b3c4:	cmp	r2, #0
   1b3c8:	str	r1, [sp, #44]	; 0x2c
   1b3cc:	mov	r3, r0
   1b3d0:	beq	1b5f4 <__assert_fail@plt+0xa31c>
   1b3d4:	str	r0, [sp, #40]	; 0x28
   1b3d8:	ldr	r1, [r2, #40]	; 0x28
   1b3dc:	add	r0, sp, #76	; 0x4c
   1b3e0:	ldr	r2, [sp, #24]
   1b3e4:	bl	16ee8 <__assert_fail@plt+0x5c10>
   1b3e8:	ldr	r3, [sp, #40]	; 0x28
   1b3ec:	cmp	r0, #0
   1b3f0:	str	r0, [sp, #72]	; 0x48
   1b3f4:	bne	1b674 <__assert_fail@plt+0xa39c>
   1b3f8:	add	r2, sp, #76	; 0x4c
   1b3fc:	mov	r1, r7
   1b400:	add	r0, sp, #72	; 0x48
   1b404:	ldr	r8, [fp, #100]	; 0x64
   1b408:	bl	17034 <__assert_fail@plt+0x5d5c>
   1b40c:	str	r0, [r8, r6, lsl #2]
   1b410:	ldr	r0, [sp, #84]	; 0x54
   1b414:	bl	23198 <__assert_fail@plt+0x11ec0>
   1b418:	ldr	r3, [fp, #100]	; 0x64
   1b41c:	ldr	r2, [r3, r6, lsl #2]
   1b420:	cmp	r2, #0
   1b424:	beq	1b618 <__assert_fail@plt+0xa340>
   1b428:	ldr	r2, [sp, #28]
   1b42c:	cmp	r2, #0
   1b430:	bne	1b44c <__assert_fail@plt+0xa174>
   1b434:	ldr	r2, [sp, #48]	; 0x30
   1b438:	ldr	r3, [r3, r2]
   1b43c:	ldr	r2, [sp, #44]	; 0x2c
   1b440:	ldr	r3, [r3, #8]
   1b444:	cmp	r3, r2
   1b448:	bgt	1b628 <__assert_fail@plt+0xa350>
   1b44c:	ldr	ip, [fp, #108]	; 0x6c
   1b450:	add	r5, r5, #1
   1b454:	cmp	r5, ip
   1b458:	add	r4, r4, #24
   1b45c:	blt	1b32c <__assert_fail@plt+0xa054>
   1b460:	ldr	r3, [sp, #60]	; 0x3c
   1b464:	ldr	r6, [r3]
   1b468:	b	1b184 <__assert_fail@plt+0x9eac>
   1b46c:	mov	r4, r2
   1b470:	mov	r2, r3
   1b474:	add	r0, r4, #1
   1b478:	mov	r3, r2
   1b47c:	b	1b230 <__assert_fail@plt+0x9f58>
   1b480:	tst	r4, #8
   1b484:	beq	1b200 <__assert_fail@plt+0x9f28>
   1b488:	tst	r0, #1
   1b48c:	beq	1b200 <__assert_fail@plt+0x9f28>
   1b490:	b	1b184 <__assert_fail@plt+0x9eac>
   1b494:	ldr	r3, [fp, #84]	; 0x54
   1b498:	ldr	r1, [fp, #124]	; 0x7c
   1b49c:	str	r3, [sp, #56]	; 0x38
   1b4a0:	ldr	r3, [r3]
   1b4a4:	cmp	r1, #0
   1b4a8:	ldr	r2, [r3, r9, lsl #3]
   1b4ac:	str	r2, [sp, #52]	; 0x34
   1b4b0:	ble	1b2e8 <__assert_fail@plt+0xa010>
   1b4b4:	ldr	r2, [fp, #4]
   1b4b8:	str	r9, [sp, #44]	; 0x2c
   1b4bc:	mov	r9, r2
   1b4c0:	mov	r0, #0
   1b4c4:	str	r0, [sp, #40]	; 0x28
   1b4c8:	str	sl, [sp, #28]
   1b4cc:	str	r5, [sp, #68]	; 0x44
   1b4d0:	ldr	r2, [fp, #132]	; 0x84
   1b4d4:	ldr	r0, [sp, #40]	; 0x28
   1b4d8:	ldr	r4, [r2, r0, lsl #2]
   1b4dc:	ldr	r2, [r4, #4]
   1b4e0:	ldr	r3, [r3, r2, lsl #3]
   1b4e4:	ldr	r2, [sp, #52]	; 0x34
   1b4e8:	cmp	r2, r3
   1b4ec:	beq	1b510 <__assert_fail@plt+0xa238>
   1b4f0:	ldr	r3, [sp, #40]	; 0x28
   1b4f4:	add	r3, r3, #1
   1b4f8:	cmp	r3, r1
   1b4fc:	str	r3, [sp, #40]	; 0x28
   1b500:	bge	1b884 <__assert_fail@plt+0xa5ac>
   1b504:	ldr	r3, [sp, #56]	; 0x38
   1b508:	ldr	r3, [r3]
   1b50c:	b	1b4d0 <__assert_fail@plt+0xa1f8>
   1b510:	ldr	ip, [r4, #16]
   1b514:	ldr	r6, [r4]
   1b518:	cmp	ip, #0
   1b51c:	ble	1b8c8 <__assert_fail@plt+0xa5f0>
   1b520:	ldr	r8, [sp, #28]
   1b524:	mov	r5, #0
   1b528:	mov	r3, r6
   1b52c:	b	1b544 <__assert_fail@plt+0xa26c>
   1b530:	ldr	ip, [r4, #16]
   1b534:	mov	r3, r6
   1b538:	cmp	r5, ip
   1b53c:	mov	r8, r7
   1b540:	bge	1b694 <__assert_fail@plt+0xa3bc>
   1b544:	ldr	r2, [r4, #20]
   1b548:	ldr	sl, [r2, r5, lsl #2]
   1b54c:	ldr	r6, [sl, #4]
   1b550:	sub	r2, r6, r3
   1b554:	cmp	r2, #0
   1b558:	add	r7, r2, r8
   1b55c:	ble	1b588 <__assert_fail@plt+0xa2b0>
   1b560:	ldr	r1, [fp, #28]
   1b564:	cmp	r7, r1
   1b568:	bgt	1b5bc <__assert_fail@plt+0xa2e4>
   1b56c:	add	r1, r9, r3
   1b570:	add	r0, r9, r8
   1b574:	str	r3, [sp, #24]
   1b578:	bl	110a4 <memcmp@plt>
   1b57c:	ldr	r3, [sp, #24]
   1b580:	cmp	r0, #0
   1b584:	bne	1b808 <__assert_fail@plt+0xa530>
   1b588:	ldr	r3, [sp, #28]
   1b58c:	mov	r2, sl
   1b590:	str	r3, [sp]
   1b594:	mov	r1, r4
   1b598:	ldr	r3, [sp, #44]	; 0x2c
   1b59c:	mov	r0, fp
   1b5a0:	bl	1afe8 <__assert_fail@plt+0x9d10>
   1b5a4:	add	r5, r5, #1
   1b5a8:	ldr	r9, [fp, #4]
   1b5ac:	cmp	r0, #1
   1b5b0:	bls	1b530 <__assert_fail@plt+0xa258>
   1b5b4:	add	sp, sp, #92	; 0x5c
   1b5b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5bc:	ldr	lr, [fp, #48]	; 0x30
   1b5c0:	str	r2, [sp, #64]	; 0x40
   1b5c4:	cmp	r7, lr
   1b5c8:	mov	r1, r7
   1b5cc:	mov	r0, fp
   1b5d0:	bgt	1b8d0 <__assert_fail@plt+0xa5f8>
   1b5d4:	str	r3, [sp, #24]
   1b5d8:	bl	161ac <__assert_fail@plt+0x4ed4>
   1b5dc:	cmp	r0, #0
   1b5e0:	bne	1b5b4 <__assert_fail@plt+0xa2dc>
   1b5e4:	ldr	r9, [fp, #4]
   1b5e8:	ldr	r2, [sp, #64]	; 0x40
   1b5ec:	ldr	r3, [sp, #24]
   1b5f0:	b	1b56c <__assert_fail@plt+0xa294>
   1b5f4:	ldr	r2, [sp, #24]
   1b5f8:	mov	r1, r7
   1b5fc:	add	r0, sp, #72	; 0x48
   1b600:	bl	17034 <__assert_fail@plt+0x5d5c>
   1b604:	ldr	r3, [fp, #100]	; 0x64
   1b608:	str	r0, [r8, r6, lsl #2]
   1b60c:	ldr	r2, [r3, r6, lsl #2]
   1b610:	cmp	r2, #0
   1b614:	bne	1b428 <__assert_fail@plt+0xa150>
   1b618:	ldr	r0, [sp, #72]	; 0x48
   1b61c:	cmp	r0, #0
   1b620:	beq	1b428 <__assert_fail@plt+0xa150>
   1b624:	b	1b5b4 <__assert_fail@plt+0xa2dc>
   1b628:	ldr	r3, [sp, #24]
   1b62c:	mov	r0, fp
   1b630:	add	r6, r3, #4
   1b634:	add	r8, r3, #8
   1b638:	mov	r2, r8
   1b63c:	mov	r1, r6
   1b640:	mov	r3, sl
   1b644:	bl	19654 <__assert_fail@plt+0x837c>
   1b648:	cmp	r0, #0
   1b64c:	str	r0, [sp, #72]	; 0x48
   1b650:	bne	1b5b4 <__assert_fail@plt+0xa2dc>
   1b654:	mov	r2, r8
   1b658:	mov	r1, r6
   1b65c:	mov	r0, fp
   1b660:	bl	1b144 <__assert_fail@plt+0x9e6c>
   1b664:	cmp	r0, #0
   1b668:	str	r0, [sp, #72]	; 0x48
   1b66c:	beq	1b44c <__assert_fail@plt+0xa174>
   1b670:	b	1b5b4 <__assert_fail@plt+0xa2dc>
   1b674:	ldr	r0, [sp, #84]	; 0x54
   1b678:	bl	23198 <__assert_fail@plt+0x11ec0>
   1b67c:	ldr	r0, [sp, #72]	; 0x48
   1b680:	add	sp, sp, #92	; 0x5c
   1b684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b688:	mov	r0, #0
   1b68c:	add	sp, sp, #92	; 0x5c
   1b690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b694:	mov	sl, r6
   1b698:	add	r6, sl, #1
   1b69c:	ldr	r3, [sp, #28]
   1b6a0:	cmp	r3, r6
   1b6a4:	blt	1b800 <__assert_fail@plt+0xa528>
   1b6a8:	ldr	sl, [sp, #52]	; 0x34
   1b6ac:	lsl	r8, r6, #2
   1b6b0:	ldr	r3, [r4]
   1b6b4:	sub	r3, r6, r3
   1b6b8:	cmp	r3, #0
   1b6bc:	ble	1b6e8 <__assert_fail@plt+0xa410>
   1b6c0:	ldr	r3, [fp, #28]
   1b6c4:	cmp	r3, r7
   1b6c8:	ble	1b858 <__assert_fail@plt+0xa580>
   1b6cc:	add	r5, r7, #1
   1b6d0:	add	r3, r9, r6
   1b6d4:	ldrb	r2, [r9, r7]
   1b6d8:	ldrb	r3, [r3, #-1]
   1b6dc:	cmp	r2, r3
   1b6e0:	bne	1b800 <__assert_fail@plt+0xa528>
   1b6e4:	mov	r7, r5
   1b6e8:	ldr	r3, [fp, #100]	; 0x64
   1b6ec:	ldr	r3, [r3, r8]
   1b6f0:	cmp	r3, #0
   1b6f4:	beq	1b7ec <__assert_fail@plt+0xa514>
   1b6f8:	ldr	ip, [r3, #8]
   1b6fc:	cmp	ip, #0
   1b700:	ble	1b7ec <__assert_fail@plt+0xa514>
   1b704:	ldr	r2, [r3, #12]
   1b708:	ldr	r3, [sp, #56]	; 0x38
   1b70c:	sub	r2, r2, #4
   1b710:	ldr	r0, [r3]
   1b714:	mov	r3, #0
   1b718:	b	1b724 <__assert_fail@plt+0xa44c>
   1b71c:	cmp	ip, r3
   1b720:	beq	1b7ec <__assert_fail@plt+0xa514>
   1b724:	ldr	r5, [r2, #4]!
   1b728:	add	r3, r3, #1
   1b72c:	add	r1, r0, r5, lsl #3
   1b730:	ldrb	r1, [r1, #4]
   1b734:	cmp	r1, #9
   1b738:	bne	1b71c <__assert_fail@plt+0xa444>
   1b73c:	ldr	r1, [r0, r5, lsl #3]
   1b740:	cmp	sl, r1
   1b744:	bne	1b71c <__assert_fail@plt+0xa444>
   1b748:	cmn	r5, #1
   1b74c:	beq	1b7ec <__assert_fail@plt+0xa514>
   1b750:	ldr	r1, [r4, #8]
   1b754:	cmp	r1, #0
   1b758:	beq	1b830 <__assert_fail@plt+0xa558>
   1b75c:	mov	r0, #9
   1b760:	ldr	r3, [r4]
   1b764:	ldr	r2, [r4, #4]
   1b768:	str	r0, [sp, #8]
   1b76c:	stm	sp, {r5, r6}
   1b770:	mov	r0, fp
   1b774:	bl	1a9ec <__assert_fail@plt+0x9714>
   1b778:	cmp	r0, #1
   1b77c:	beq	1b7ec <__assert_fail@plt+0xa514>
   1b780:	cmp	r0, #0
   1b784:	bne	1b5b4 <__assert_fail@plt+0xa2dc>
   1b788:	ldr	r3, [r4, #16]
   1b78c:	ldr	r2, [r4, #12]
   1b790:	cmp	r3, r2
   1b794:	beq	1b8a0 <__assert_fail@plt+0xa5c8>
   1b798:	mov	r1, #20
   1b79c:	mov	r0, #1
   1b7a0:	bl	22f84 <__assert_fail@plt+0x11cac>
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b898 <__assert_fail@plt+0xa5c0>
   1b7ac:	ldr	r3, [r4, #16]
   1b7b0:	ldr	r2, [r4, #20]
   1b7b4:	add	r1, r3, #1
   1b7b8:	str	r0, [r2, r3, lsl #2]
   1b7bc:	stm	r0, {r5, r6}
   1b7c0:	mov	r2, r0
   1b7c4:	ldr	r0, [sp, #28]
   1b7c8:	str	r1, [r4, #16]
   1b7cc:	ldr	r3, [sp, #44]	; 0x2c
   1b7d0:	str	r0, [sp]
   1b7d4:	mov	r1, r4
   1b7d8:	mov	r0, fp
   1b7dc:	bl	1afe8 <__assert_fail@plt+0x9d10>
   1b7e0:	ldr	r9, [fp, #4]
   1b7e4:	cmp	r0, #1
   1b7e8:	bhi	1b5b4 <__assert_fail@plt+0xa2dc>
   1b7ec:	ldr	r3, [sp, #28]
   1b7f0:	add	r6, r6, #1
   1b7f4:	cmp	r3, r6
   1b7f8:	add	r8, r8, #4
   1b7fc:	bge	1b6b0 <__assert_fail@plt+0xa3d8>
   1b800:	ldr	r1, [fp, #124]	; 0x7c
   1b804:	b	1b4f0 <__assert_fail@plt+0xa218>
   1b808:	ldr	ip, [r4, #16]
   1b80c:	mov	r6, r3
   1b810:	cmp	ip, r5
   1b814:	bgt	1b800 <__assert_fail@plt+0xa528>
   1b818:	cmp	r5, #0
   1b81c:	movle	r7, r8
   1b820:	ble	1b69c <__assert_fail@plt+0xa3c4>
   1b824:	mov	sl, r6
   1b828:	mov	r7, r8
   1b82c:	b	1b698 <__assert_fail@plt+0xa3c0>
   1b830:	ldr	r1, [r4]
   1b834:	mov	r0, #12
   1b838:	sub	r1, r6, r1
   1b83c:	add	r1, r1, #1
   1b840:	bl	22f84 <__assert_fail@plt+0x11cac>
   1b844:	cmp	r0, #0
   1b848:	str	r0, [r4, #8]
   1b84c:	beq	1b898 <__assert_fail@plt+0xa5c0>
   1b850:	mov	r1, r0
   1b854:	b	1b75c <__assert_fail@plt+0xa484>
   1b858:	ldr	r3, [fp, #48]	; 0x30
   1b85c:	cmp	r3, r7
   1b860:	ble	1b800 <__assert_fail@plt+0xa528>
   1b864:	add	r5, r7, #1
   1b868:	mov	r1, r5
   1b86c:	mov	r0, fp
   1b870:	bl	156f8 <__assert_fail@plt+0x4420>
   1b874:	cmp	r0, #0
   1b878:	bne	1b5b4 <__assert_fail@plt+0xa2dc>
   1b87c:	ldr	r9, [fp, #4]
   1b880:	b	1b6d0 <__assert_fail@plt+0xa3f8>
   1b884:	ldr	sl, [sp, #28]
   1b888:	ldr	r9, [sp, #44]	; 0x2c
   1b88c:	ldr	r5, [sp, #68]	; 0x44
   1b890:	ldr	ip, [fp, #108]	; 0x6c
   1b894:	b	1b2e8 <__assert_fail@plt+0xa010>
   1b898:	mov	r0, #12
   1b89c:	b	1b5b4 <__assert_fail@plt+0xa2dc>
   1b8a0:	lsl	r3, r3, #1
   1b8a4:	add	r9, r3, #1
   1b8a8:	ldr	r0, [r4, #20]
   1b8ac:	lsl	r1, r9, #2
   1b8b0:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1b8b4:	cmp	r0, #0
   1b8b8:	beq	1b898 <__assert_fail@plt+0xa5c0>
   1b8bc:	str	r0, [r4, #20]
   1b8c0:	str	r9, [r4, #12]
   1b8c4:	b	1b798 <__assert_fail@plt+0xa4c0>
   1b8c8:	ldr	r7, [sp, #28]
   1b8cc:	b	1b69c <__assert_fail@plt+0xa3c4>
   1b8d0:	mov	r6, r3
   1b8d4:	b	1b810 <__assert_fail@plt+0xa538>
   1b8d8:	andeq	pc, r3, r0, lsl #30
   1b8dc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1b8e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8e4:	mov	r4, r1
   1b8e8:	ldr	r5, [r1, #40]	; 0x28
   1b8ec:	ldr	r3, [r1, #104]	; 0x68
   1b8f0:	sub	sp, sp, #16
   1b8f4:	cmp	r5, r3
   1b8f8:	mov	r8, r0
   1b8fc:	ldr	r7, [r1, #84]	; 0x54
   1b900:	ble	1b92c <__assert_fail@plt+0xa654>
   1b904:	ldr	r3, [r1, #100]	; 0x64
   1b908:	mov	r6, r2
   1b90c:	str	r2, [r3, r5, lsl #2]
   1b910:	str	r5, [r1, #104]	; 0x68
   1b914:	ldr	r3, [r7, #76]	; 0x4c
   1b918:	cmp	r3, #0
   1b91c:	bne	1b9f4 <__assert_fail@plt+0xa71c>
   1b920:	mov	r0, r6
   1b924:	add	sp, sp, #16
   1b928:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b92c:	ldr	r9, [r1, #100]	; 0x64
   1b930:	ldr	r3, [r9, r5, lsl #2]
   1b934:	cmp	r3, #0
   1b938:	streq	r2, [r9, r5, lsl #2]
   1b93c:	moveq	r6, r2
   1b940:	beq	1b914 <__assert_fail@plt+0xa63c>
   1b944:	cmp	r2, #0
   1b948:	ldr	r3, [r3, #40]	; 0x28
   1b94c:	beq	1b9b8 <__assert_fail@plt+0xa6e0>
   1b950:	ldr	r9, [r2, #40]	; 0x28
   1b954:	add	r0, sp, #4
   1b958:	mov	r2, r3
   1b95c:	mov	r1, r9
   1b960:	bl	16ee8 <__assert_fail@plt+0x5c10>
   1b964:	cmp	r0, #0
   1b968:	str	r0, [r8]
   1b96c:	bne	1ba54 <__assert_fail@plt+0xa77c>
   1b970:	ldr	r1, [r4, #40]	; 0x28
   1b974:	ldr	r2, [r4, #88]	; 0x58
   1b978:	sub	r1, r1, #1
   1b97c:	mov	r0, r4
   1b980:	bl	18b84 <__assert_fail@plt+0x78ac>
   1b984:	add	r2, sp, #4
   1b988:	mov	r1, r7
   1b98c:	ldr	sl, [r4, #100]	; 0x64
   1b990:	mov	r3, r0
   1b994:	mov	r0, r8
   1b998:	bl	17034 <__assert_fail@plt+0x5d5c>
   1b99c:	cmp	r9, #0
   1b9a0:	mov	r6, r0
   1b9a4:	str	r0, [sl, r5, lsl #2]
   1b9a8:	beq	1b914 <__assert_fail@plt+0xa63c>
   1b9ac:	ldr	r0, [sp, #12]
   1b9b0:	bl	23198 <__assert_fail@plt+0x11ec0>
   1b9b4:	b	1b914 <__assert_fail@plt+0xa63c>
   1b9b8:	ldm	r3, {r0, r1, r2}
   1b9bc:	add	r6, sp, #4
   1b9c0:	stm	r6, {r0, r1, r2}
   1b9c4:	sub	r1, r5, #1
   1b9c8:	ldr	r2, [r4, #88]	; 0x58
   1b9cc:	mov	r0, r4
   1b9d0:	bl	18b84 <__assert_fail@plt+0x78ac>
   1b9d4:	mov	r2, r6
   1b9d8:	mov	r1, r7
   1b9dc:	mov	r3, r0
   1b9e0:	mov	r0, r8
   1b9e4:	bl	17034 <__assert_fail@plt+0x5d5c>
   1b9e8:	mov	r6, r0
   1b9ec:	str	r0, [r9, r5, lsl #2]
   1b9f0:	b	1b914 <__assert_fail@plt+0xa63c>
   1b9f4:	cmp	r6, #0
   1b9f8:	beq	1ba54 <__assert_fail@plt+0xa77c>
   1b9fc:	add	r7, r6, #8
   1ba00:	add	r9, r6, #12
   1ba04:	mov	r1, r7
   1ba08:	mov	r2, r9
   1ba0c:	mov	r3, r5
   1ba10:	mov	r0, r4
   1ba14:	bl	19654 <__assert_fail@plt+0x837c>
   1ba18:	cmp	r0, #0
   1ba1c:	str	r0, [r8]
   1ba20:	bne	1ba54 <__assert_fail@plt+0xa77c>
   1ba24:	ldrb	r3, [r6, #52]	; 0x34
   1ba28:	tst	r3, #64	; 0x40
   1ba2c:	beq	1b920 <__assert_fail@plt+0xa648>
   1ba30:	mov	r2, r9
   1ba34:	mov	r1, r7
   1ba38:	mov	r0, r4
   1ba3c:	bl	1b144 <__assert_fail@plt+0x9e6c>
   1ba40:	cmp	r0, #0
   1ba44:	str	r0, [r8]
   1ba48:	ldreq	r3, [r4, #100]	; 0x64
   1ba4c:	ldreq	r6, [r3, r5, lsl #2]
   1ba50:	beq	1b920 <__assert_fail@plt+0xa648>
   1ba54:	mov	r6, #0
   1ba58:	b	1b920 <__assert_fail@plt+0xa648>
   1ba5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba60:	sub	sp, sp, #68	; 0x44
   1ba64:	mov	r4, #1
   1ba68:	mov	sl, r0
   1ba6c:	mov	r0, #4
   1ba70:	ldr	fp, [r1, #12]
   1ba74:	mov	r9, r1
   1ba78:	ldr	r5, [r1, #8]
   1ba7c:	str	r4, [sp, #52]	; 0x34
   1ba80:	str	r4, [sp, #56]	; 0x38
   1ba84:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1ba88:	lsl	r3, fp, #2
   1ba8c:	str	r3, [sp, #16]
   1ba90:	cmp	r0, #0
   1ba94:	str	r0, [sp, #60]	; 0x3c
   1ba98:	beq	1bd0c <__assert_fail@plt+0xaa34>
   1ba9c:	add	r3, sp, #52	; 0x34
   1baa0:	str	r5, [r0]
   1baa4:	mov	r2, fp
   1baa8:	mov	r1, r9
   1baac:	mov	r0, sl
   1bab0:	bl	1d744 <__assert_fail@plt+0xc46c>
   1bab4:	subs	r3, r0, #0
   1bab8:	str	r3, [sp, #44]	; 0x2c
   1babc:	bne	1bcdc <__assert_fail@plt+0xaa04>
   1bac0:	cmp	fp, #0
   1bac4:	ble	1bcdc <__assert_fail@plt+0xaa04>
   1bac8:	ldr	r3, [sp, #44]	; 0x2c
   1bacc:	str	r4, [sp, #40]	; 0x28
   1bad0:	str	r3, [sp, #36]	; 0x24
   1bad4:	add	r3, r9, #24
   1bad8:	str	r3, [sp, #28]
   1badc:	add	r3, r9, #20
   1bae0:	str	r3, [sp, #32]
   1bae4:	ldr	r0, [r9]
   1bae8:	ldr	r3, [sp, #16]
   1baec:	ldr	r3, [r0, r3]
   1baf0:	cmp	r3, #0
   1baf4:	movne	r3, #0
   1baf8:	ldreq	r3, [sp, #36]	; 0x24
   1bafc:	addeq	r3, r3, #1
   1bb00:	str	r3, [sp, #36]	; 0x24
   1bb04:	ldr	r2, [sp, #36]	; 0x24
   1bb08:	ldr	r3, [sl, #120]	; 0x78
   1bb0c:	cmp	r2, r3
   1bb10:	bgt	1bd1c <__assert_fail@plt+0xaa44>
   1bb14:	mov	r2, #0
   1bb18:	ldr	r3, [sl, #100]	; 0x64
   1bb1c:	str	r2, [sp, #56]	; 0x38
   1bb20:	ldr	r2, [sp, #16]
   1bb24:	sub	fp, fp, #1
   1bb28:	add	r3, r3, r2
   1bb2c:	ldr	r7, [r3, #-4]
   1bb30:	cmp	r7, #0
   1bb34:	beq	1bcac <__assert_fail@plt+0xa9d4>
   1bb38:	ldr	r3, [r7, #20]
   1bb3c:	ldr	r8, [sl, #84]	; 0x54
   1bb40:	cmp	r3, #0
   1bb44:	ble	1bcac <__assert_fail@plt+0xa9d4>
   1bb48:	ldr	r3, [r7, #24]
   1bb4c:	ldr	r1, [r8]
   1bb50:	mov	r4, #0
   1bb54:	ldr	r5, [r3]
   1bb58:	lsl	r6, r5, #3
   1bb5c:	add	r3, r1, r6
   1bb60:	b	1bc1c <__assert_fail@plt+0xa944>
   1bb64:	add	r1, r1, r6
   1bb68:	mov	r2, fp
   1bb6c:	mov	r0, sl
   1bb70:	bl	19440 <__assert_fail@plt+0x8168>
   1bb74:	cmp	r0, #0
   1bb78:	beq	1bbf8 <__assert_fail@plt+0xa920>
   1bb7c:	ldr	r3, [r9]
   1bb80:	ldr	r2, [sp, #16]
   1bb84:	ldr	r3, [r3, r2]
   1bb88:	cmp	r3, #0
   1bb8c:	beq	1bbf8 <__assert_fail@plt+0xa920>
   1bb90:	ldr	r2, [r8, #12]
   1bb94:	add	r1, r3, #12
   1bb98:	ldr	r0, [r3, #8]
   1bb9c:	ldr	r2, [r2, r5, lsl #2]
   1bba0:	bl	16364 <__assert_fail@plt+0x508c>
   1bba4:	cmp	r0, #0
   1bba8:	beq	1bbf8 <__assert_fail@plt+0xa920>
   1bbac:	ldr	r3, [sp, #40]	; 0x28
   1bbb0:	ldr	r2, [r9, #20]
   1bbb4:	cmp	r2, #0
   1bbb8:	beq	1bbe4 <__assert_fail@plt+0xa90c>
   1bbbc:	ldr	r1, [r8, #12]
   1bbc0:	add	r0, fp, r3
   1bbc4:	ldr	r2, [sp, #28]
   1bbc8:	ldr	r3, [r1, r5, lsl #2]
   1bbcc:	stm	sp, {r0, r5, fp}
   1bbd0:	mov	r0, sl
   1bbd4:	ldr	r1, [sp, #32]
   1bbd8:	bl	16630 <__assert_fail@plt+0x5358>
   1bbdc:	cmp	r0, #0
   1bbe0:	bne	1bbf8 <__assert_fail@plt+0xa920>
   1bbe4:	mov	r1, r5
   1bbe8:	add	r0, sp, #52	; 0x34
   1bbec:	bl	15dd4 <__assert_fail@plt+0x4afc>
   1bbf0:	cmp	r0, #0
   1bbf4:	beq	1bcec <__assert_fail@plt+0xaa14>
   1bbf8:	ldr	r3, [r7, #20]
   1bbfc:	add	r4, r4, #1
   1bc00:	cmp	r4, r3
   1bc04:	bge	1bcac <__assert_fail@plt+0xa9d4>
   1bc08:	ldr	r3, [r7, #24]
   1bc0c:	ldr	r1, [r8]
   1bc10:	ldr	r5, [r3, r4, lsl #2]
   1bc14:	lsl	r6, r5, #3
   1bc18:	add	r3, r1, r6
   1bc1c:	ldrb	r3, [r3, #6]
   1bc20:	tst	r3, #16
   1bc24:	beq	1bb64 <__assert_fail@plt+0xa88c>
   1bc28:	ldr	r3, [sl, #84]	; 0x54
   1bc2c:	mov	r2, r3
   1bc30:	str	r3, [sp, #24]
   1bc34:	ldr	r0, [r2]
   1bc38:	str	fp, [sp]
   1bc3c:	ldr	ip, [r9, #12]
   1bc40:	mov	r3, sl
   1bc44:	add	r1, r2, #128	; 0x80
   1bc48:	mov	r2, r5
   1bc4c:	str	ip, [sp, #20]
   1bc50:	bl	1a720 <__assert_fail@plt+0x9448>
   1bc54:	subs	r3, r0, #0
   1bc58:	ble	1bce4 <__assert_fail@plt+0xaa0c>
   1bc5c:	ldr	ip, [sp, #20]
   1bc60:	add	r2, fp, r3
   1bc64:	cmp	ip, r2
   1bc68:	blt	1bbb0 <__assert_fail@plt+0xa8d8>
   1bc6c:	ldr	r1, [r9]
   1bc70:	ldr	r2, [r1, r2, lsl #2]
   1bc74:	cmp	r2, #0
   1bc78:	beq	1bca4 <__assert_fail@plt+0xa9cc>
   1bc7c:	str	r3, [sp, #20]
   1bc80:	ldr	r3, [sp, #24]
   1bc84:	add	r1, r2, #12
   1bc88:	ldr	r0, [r2, #8]
   1bc8c:	ldr	ip, [r3, #12]
   1bc90:	ldr	r2, [ip, r5, lsl #2]
   1bc94:	bl	16364 <__assert_fail@plt+0x508c>
   1bc98:	ldr	r3, [sp, #20]
   1bc9c:	cmp	r0, #0
   1bca0:	bne	1bbb0 <__assert_fail@plt+0xa8d8>
   1bca4:	ldr	r1, [r8]
   1bca8:	b	1bb64 <__assert_fail@plt+0xa88c>
   1bcac:	add	r3, sp, #52	; 0x34
   1bcb0:	mov	r2, fp
   1bcb4:	mov	r1, r9
   1bcb8:	mov	r0, sl
   1bcbc:	bl	1d744 <__assert_fail@plt+0xc46c>
   1bcc0:	cmp	r0, #0
   1bcc4:	bne	1bd04 <__assert_fail@plt+0xaa2c>
   1bcc8:	ldr	r3, [sp, #16]
   1bccc:	cmp	fp, #0
   1bcd0:	sub	r3, r3, #4
   1bcd4:	str	r3, [sp, #16]
   1bcd8:	bne	1bae4 <__assert_fail@plt+0xa80c>
   1bcdc:	ldr	r4, [sp, #44]	; 0x2c
   1bce0:	b	1bcf0 <__assert_fail@plt+0xaa18>
   1bce4:	beq	1bca4 <__assert_fail@plt+0xa9cc>
   1bce8:	b	1bbb0 <__assert_fail@plt+0xa8d8>
   1bcec:	mov	r4, #12
   1bcf0:	ldr	r0, [sp, #60]	; 0x3c
   1bcf4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1bcf8:	mov	r0, r4
   1bcfc:	add	sp, sp, #68	; 0x44
   1bd00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd04:	mov	r4, r0
   1bd08:	b	1bcf0 <__assert_fail@plt+0xaa18>
   1bd0c:	mov	r4, #12
   1bd10:	mov	r0, r4
   1bd14:	add	sp, sp, #68	; 0x44
   1bd18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd1c:	ldr	r2, [sp, #16]
   1bd20:	mov	r1, #0
   1bd24:	bl	111f4 <memset@plt>
   1bd28:	ldr	r0, [sp, #60]	; 0x3c
   1bd2c:	ldr	r4, [sp, #44]	; 0x2c
   1bd30:	bl	23198 <__assert_fail@plt+0x11ec0>
   1bd34:	b	1bcf8 <__assert_fail@plt+0xaa20>
   1bd38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd3c:	mov	r7, r0
   1bd40:	sub	sp, sp, #428	; 0x1ac
   1bd44:	mov	r6, r3
   1bd48:	ldr	r3, [r7]
   1bd4c:	str	r0, [sp, #44]	; 0x2c
   1bd50:	str	r1, [sp, #56]	; 0x38
   1bd54:	str	r2, [sp, #72]	; 0x48
   1bd58:	mov	r1, #0
   1bd5c:	add	r0, sp, #148	; 0x94
   1bd60:	mov	r2, #136	; 0x88
   1bd64:	mov	r8, r3
   1bd68:	str	r3, [sp, #28]
   1bd6c:	ldr	r4, [sp, #464]	; 0x1d0
   1bd70:	ldr	r5, [sp, #472]	; 0x1d8
   1bd74:	bl	111f4 <memset@plt>
   1bd78:	ldr	r1, [r7, #16]
   1bd7c:	str	r8, [sp, #232]	; 0xe8
   1bd80:	cmp	r1, #0
   1bd84:	streq	r1, [sp, #60]	; 0x3c
   1bd88:	beq	1bdb4 <__assert_fail@plt+0xaadc>
   1bd8c:	ldrb	r2, [r7, #28]
   1bd90:	subs	r3, r6, r4
   1bd94:	movne	r3, #1
   1bd98:	ands	r3, r3, r2, lsr #3
   1bd9c:	streq	r3, [sp, #60]	; 0x3c
   1bda0:	beq	1bdb4 <__assert_fail@plt+0xaadc>
   1bda4:	tst	r2, #1
   1bda8:	moveq	r3, r1
   1bdac:	movne	r3, #0
   1bdb0:	str	r3, [sp, #60]	; 0x3c
   1bdb4:	ldr	r3, [sp, #44]	; 0x2c
   1bdb8:	ldr	r3, [r3, #24]
   1bdbc:	cmp	r3, r5
   1bdc0:	subcc	r2, r5, #1
   1bdc4:	subcc	r3, r2, r3
   1bdc8:	ldr	r2, [sp, #44]	; 0x2c
   1bdcc:	movcs	r3, #0
   1bdd0:	str	r3, [sp, #96]	; 0x60
   1bdd4:	ldr	r2, [r2, #8]
   1bdd8:	cmp	r2, #0
   1bddc:	beq	1c40c <__assert_fail@plt+0xb134>
   1bde0:	ldr	r2, [sp, #28]
   1bde4:	ldr	r2, [r2, #36]	; 0x24
   1bde8:	cmp	r2, #0
   1bdec:	beq	1c40c <__assert_fail@plt+0xb134>
   1bdf0:	ldr	r1, [sp, #28]
   1bdf4:	ldr	r1, [r1, #40]	; 0x28
   1bdf8:	cmp	r1, #0
   1bdfc:	beq	1c40c <__assert_fail@plt+0xb134>
   1be00:	ldr	r0, [sp, #28]
   1be04:	ldr	ip, [r0, #44]	; 0x2c
   1be08:	cmp	ip, #0
   1be0c:	beq	1c40c <__assert_fail@plt+0xb134>
   1be10:	ldr	r0, [r0, #48]	; 0x30
   1be14:	cmp	r0, #0
   1be18:	beq	1c40c <__assert_fail@plt+0xb134>
   1be1c:	ldr	r2, [r2, #8]
   1be20:	cmp	r2, #0
   1be24:	bne	1be68 <__assert_fail@plt+0xab90>
   1be28:	ldr	r2, [r1, #8]
   1be2c:	cmp	r2, #0
   1be30:	bne	1be68 <__assert_fail@plt+0xab90>
   1be34:	ldr	r2, [ip, #8]
   1be38:	cmp	r2, #0
   1be3c:	beq	1be50 <__assert_fail@plt+0xab78>
   1be40:	ldr	r2, [sp, #44]	; 0x2c
   1be44:	ldrsb	r2, [r2, #28]
   1be48:	cmp	r2, #0
   1be4c:	blt	1be68 <__assert_fail@plt+0xab90>
   1be50:	cmp	r6, #0
   1be54:	cmpne	r4, #0
   1be58:	movne	r4, #1
   1be5c:	moveq	r4, #0
   1be60:	bne	1c40c <__assert_fail@plt+0xb134>
   1be64:	mov	r6, r4
   1be68:	subs	r3, r5, r3
   1be6c:	str	r3, [sp, #76]	; 0x4c
   1be70:	movne	r3, #1
   1be74:	strne	r3, [sp, #40]	; 0x28
   1be78:	beq	1c140 <__assert_fail@plt+0xae68>
   1be7c:	ldr	r1, [sp, #28]
   1be80:	ldr	lr, [sp, #44]	; 0x2c
   1be84:	ldr	r7, [sp, #56]	; 0x38
   1be88:	ldr	r2, [r1, #8]
   1be8c:	ldr	ip, [r1, #92]	; 0x5c
   1be90:	ldrb	r0, [r1, #88]	; 0x58
   1be94:	ldr	r1, [lr, #20]
   1be98:	add	r2, r2, #1
   1be9c:	ldr	r3, [lr, #12]
   1bea0:	ldr	lr, [sp, #72]	; 0x48
   1bea4:	cmp	r2, ip
   1bea8:	mov	r5, r1
   1beac:	movlt	r2, ip
   1beb0:	str	r1, [sp, #88]	; 0x58
   1beb4:	str	lr, [sp, #196]	; 0xc4
   1beb8:	add	r1, lr, #1
   1bebc:	str	lr, [sp, #192]	; 0xc0
   1bec0:	str	lr, [sp, #204]	; 0xcc
   1bec4:	str	lr, [sp, #200]	; 0xc8
   1bec8:	mov	lr, r5
   1becc:	adds	r5, r5, #0
   1bed0:	movne	r5, #1
   1bed4:	lsr	r3, r3, #22
   1bed8:	cmp	r2, r1
   1bedc:	movlt	r1, r2
   1bee0:	and	r3, r3, #1
   1bee4:	str	ip, [sp, #228]	; 0xe4
   1bee8:	lsr	r2, r0, #3
   1beec:	lsr	ip, r0, #2
   1bef0:	and	ip, ip, #1
   1bef4:	and	r2, r2, #1
   1bef8:	strb	r3, [sp, #220]	; 0xdc
   1befc:	add	r0, sp, #148	; 0x94
   1bf00:	orr	r3, r3, r5
   1bf04:	strb	r3, [sp, #223]	; 0xdf
   1bf08:	str	r7, [sp, #148]	; 0x94
   1bf0c:	str	lr, [sp, #212]	; 0xd4
   1bf10:	strb	ip, [sp, #221]	; 0xdd
   1bf14:	strb	r2, [sp, #222]	; 0xde
   1bf18:	bl	14d70 <__assert_fail@plt+0x3a98>
   1bf1c:	subs	r3, r0, #0
   1bf20:	str	r3, [sp, #48]	; 0x30
   1bf24:	bne	1cec8 <__assert_fail@plt+0xbbf0>
   1bf28:	ldr	r1, [sp, #28]
   1bf2c:	ldrb	r2, [sp, #223]	; 0xdf
   1bf30:	add	r1, r1, #96	; 0x60
   1bf34:	ldrb	r3, [r1, #-8]
   1bf38:	cmp	r2, #0
   1bf3c:	str	r1, [sp, #216]	; 0xd8
   1bf40:	lsr	r3, r3, #4
   1bf44:	and	r3, r3, #1
   1bf48:	strb	r3, [sp, #226]	; 0xe2
   1bf4c:	bne	1bf68 <__assert_fail@plt+0xac90>
   1bf50:	ldr	r3, [sp, #28]
   1bf54:	ldr	r2, [sp, #56]	; 0x38
   1bf58:	ldr	r3, [r3, #92]	; 0x5c
   1bf5c:	str	r2, [sp, #152]	; 0x98
   1bf60:	cmp	r3, #1
   1bf64:	ble	1ce50 <__assert_fail@plt+0xbb78>
   1bf68:	mov	r1, #0
   1bf6c:	ldr	r3, [sp, #44]	; 0x2c
   1bf70:	mvn	r2, #0
   1bf74:	str	r1, [sp, #176]	; 0xb0
   1bf78:	ldrb	r3, [r3, #28]
   1bf7c:	str	r1, [sp, #180]	; 0xb4
   1bf80:	lsr	r3, r3, #7
   1bf84:	strb	r3, [sp, #225]	; 0xe1
   1bf88:	ldr	r3, [sp, #28]
   1bf8c:	ldr	r8, [r3, #76]	; 0x4c
   1bf90:	ldr	r3, [sp, #468]	; 0x1d4
   1bf94:	str	r2, [sp, #240]	; 0xf0
   1bf98:	str	r3, [sp, #204]	; 0xcc
   1bf9c:	str	r3, [sp, #200]	; 0xc8
   1bfa0:	lsl	r7, r8, #1
   1bfa4:	ldr	r3, [sp, #480]	; 0x1e0
   1bfa8:	cmp	r7, #0
   1bfac:	str	r3, [sp, #236]	; 0xec
   1bfb0:	ble	1bfec <__assert_fail@plt+0xad14>
   1bfb4:	ldr	r3, [pc, #4068]	; 1cfa0 <__assert_fail@plt+0xbcc8>
   1bfb8:	cmp	r7, r3
   1bfbc:	bgt	1c958 <__assert_fail@plt+0xb680>
   1bfc0:	add	r0, r7, r8, lsl #2
   1bfc4:	lsl	r0, r0, #3
   1bfc8:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1bfcc:	str	r0, [sp, #264]	; 0x108
   1bfd0:	lsl	r0, r8, #3
   1bfd4:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1bfd8:	ldr	r3, [sp, #264]	; 0x108
   1bfdc:	cmp	r0, #0
   1bfe0:	cmpne	r3, #0
   1bfe4:	str	r0, [sp, #280]	; 0x118
   1bfe8:	beq	1c958 <__assert_fail@plt+0xb680>
   1bfec:	ldr	r3, [sp, #76]	; 0x4c
   1bff0:	str	r7, [sp, #260]	; 0x104
   1bff4:	cmp	r3, #1
   1bff8:	mov	r3, #1
   1bffc:	str	r7, [sp, #276]	; 0x114
   1c000:	str	r3, [sp, #268]	; 0x10c
   1c004:	bls	1cfcc <__assert_fail@plt+0xbcf4>
   1c008:	ldr	r3, [sp, #184]	; 0xb8
   1c00c:	cmn	r3, #-1073741822	; 0xc0000002
   1c010:	bhi	1c958 <__assert_fail@plt+0xb680>
   1c014:	add	r3, r3, #1
   1c018:	lsl	r0, r3, #2
   1c01c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1c020:	cmp	r0, #0
   1c024:	str	r0, [sp, #248]	; 0xf8
   1c028:	beq	1c990 <__assert_fail@plt+0xb6b8>
   1c02c:	ldr	r3, [sp, #480]	; 0x1e0
   1c030:	str	r6, [sp, #116]	; 0x74
   1c034:	tst	r3, #1
   1c038:	moveq	r3, #6
   1c03c:	movne	r3, #4
   1c040:	cmp	r6, r4
   1c044:	movle	r2, #1
   1c048:	mvngt	r2, #0
   1c04c:	str	r2, [sp, #92]	; 0x5c
   1c050:	str	r3, [sp, #208]	; 0xd0
   1c054:	movlt	r2, r6
   1c058:	movge	r2, r4
   1c05c:	ldr	r3, [sp, #28]
   1c060:	str	r2, [sp, #68]	; 0x44
   1c064:	movge	r2, r6
   1c068:	movlt	r2, r4
   1c06c:	str	r2, [sp, #52]	; 0x34
   1c070:	ldr	r2, [sp, #60]	; 0x3c
   1c074:	ldr	r3, [r3, #92]	; 0x5c
   1c078:	cmp	r2, #0
   1c07c:	str	r3, [sp, #80]	; 0x50
   1c080:	beq	1d090 <__assert_fail@plt+0xbdb8>
   1c084:	ldr	r3, [sp, #80]	; 0x50
   1c088:	cmp	r3, #1
   1c08c:	moveq	r3, #4
   1c090:	beq	1c0b8 <__assert_fail@plt+0xade0>
   1c094:	ldr	r3, [sp, #44]	; 0x2c
   1c098:	ldr	r2, [sp, #88]	; 0x58
   1c09c:	ldr	r3, [r3, #12]
   1c0a0:	lsr	r3, r3, #22
   1c0a4:	eor	r3, r3, #1
   1c0a8:	cmp	r2, #0
   1c0ac:	movne	r3, #0
   1c0b0:	andeq	r3, r3, #1
   1c0b4:	lsl	r3, r3, #2
   1c0b8:	cmp	r6, r4
   1c0bc:	orr	r3, r5, r3
   1c0c0:	movle	r2, #2
   1c0c4:	movgt	r2, #0
   1c0c8:	orr	r3, r3, r2
   1c0cc:	ldr	r2, [sp, #68]	; 0x44
   1c0d0:	ldr	r1, [sp, #52]	; 0x34
   1c0d4:	cmp	r6, r2
   1c0d8:	movge	r2, #0
   1c0dc:	movlt	r2, #1
   1c0e0:	cmp	r6, r1
   1c0e4:	orrgt	r2, r2, #1
   1c0e8:	cmp	r2, #0
   1c0ec:	str	r2, [sp, #108]	; 0x6c
   1c0f0:	bne	1c3fc <__assert_fail@plt+0xb124>
   1c0f4:	sub	r3, r3, #4
   1c0f8:	cmp	r6, r4
   1c0fc:	str	r3, [sp, #84]	; 0x54
   1c100:	add	r3, sp, #424	; 0x1a8
   1c104:	suble	r3, r3, #308	; 0x134
   1c108:	movgt	r3, #0
   1c10c:	str	r3, [sp, #100]	; 0x64
   1c110:	movle	r3, #1
   1c114:	movgt	r3, #0
   1c118:	str	r3, [sp, #104]	; 0x68
   1c11c:	ldr	r3, [sp, #84]	; 0x54
   1c120:	cmp	r3, #4
   1c124:	ldrls	pc, [pc, r3, lsl #2]
   1c128:	b	1ced0 <__assert_fail@plt+0xbbf8>
   1c12c:	andeq	ip, r1, r0, asr #27
   1c130:	andeq	ip, r1, r0, asr #27
   1c134:	andeq	ip, r1, r8, asr r1
   1c138:	andeq	ip, r1, r4, asr sp
   1c13c:	andeq	ip, r1, r0, lsl #4
   1c140:	ldr	r3, [sp, #28]
   1c144:	ldr	r3, [r3, #76]	; 0x4c
   1c148:	adds	r3, r3, #0
   1c14c:	movne	r3, #1
   1c150:	str	r3, [sp, #40]	; 0x28
   1c154:	b	1be7c <__assert_fail@plt+0xaba4>
   1c158:	ldr	r3, [sp, #52]	; 0x34
   1c15c:	cmp	r3, r6
   1c160:	ble	1c1b8 <__assert_fail@plt+0xaee0>
   1c164:	ldr	r3, [sp, #56]	; 0x38
   1c168:	ldr	r1, [sp, #60]	; 0x3c
   1c16c:	ldrb	r2, [r3, r6]
   1c170:	add	r3, r3, r6
   1c174:	ldrb	r2, [r1, r2]
   1c178:	cmp	r2, #0
   1c17c:	bne	1c200 <__assert_fail@plt+0xaf28>
   1c180:	add	r2, r6, #1
   1c184:	ldr	ip, [sp, #60]	; 0x3c
   1c188:	ldr	r0, [sp, #52]	; 0x34
   1c18c:	b	1c1a4 <__assert_fail@plt+0xaecc>
   1c190:	ldrb	r1, [r3, #1]!
   1c194:	add	r2, r2, #1
   1c198:	ldrb	r1, [ip, r1]
   1c19c:	cmp	r1, #0
   1c1a0:	bne	1d044 <__assert_fail@plt+0xbd6c>
   1c1a4:	cmp	r2, r0
   1c1a8:	mov	r6, r2
   1c1ac:	bne	1c190 <__assert_fail@plt+0xaeb8>
   1c1b0:	ldr	r3, [sp, #52]	; 0x34
   1c1b4:	str	r3, [sp, #116]	; 0x74
   1c1b8:	ldr	r3, [sp, #52]	; 0x34
   1c1bc:	cmp	r3, r6
   1c1c0:	bne	1c200 <__assert_fail@plt+0xaf28>
   1c1c4:	ldr	r2, [sp, #72]	; 0x48
   1c1c8:	ldr	r1, [sp, #88]	; 0x58
   1c1cc:	cmp	r2, r3
   1c1d0:	movle	r3, #0
   1c1d4:	ldrgt	r2, [sp, #56]	; 0x38
   1c1d8:	ldrbgt	r3, [r2, r3]
   1c1dc:	cmp	r1, #0
   1c1e0:	mov	r2, r3
   1c1e4:	movne	r2, r1
   1c1e8:	ldrbne	r2, [r2, r3]
   1c1ec:	ldr	r3, [sp, #60]	; 0x3c
   1c1f0:	ldrb	r3, [r3, r2]
   1c1f4:	cmp	r3, #0
   1c1f8:	beq	1c3fc <__assert_fail@plt+0xb124>
   1c1fc:	ldr	r6, [sp, #52]	; 0x34
   1c200:	ldr	r2, [sp, #480]	; 0x1e0
   1c204:	mov	r1, r6
   1c208:	add	r0, sp, #148	; 0x94
   1c20c:	bl	18c70 <__assert_fail@plt+0x7998>
   1c210:	subs	r3, r0, #0
   1c214:	str	r3, [sp, #48]	; 0x30
   1c218:	bne	1cec8 <__assert_fail@plt+0xbbf0>
   1c21c:	ldr	r3, [sp, #80]	; 0x50
   1c220:	cmp	r3, #1
   1c224:	beq	1c244 <__assert_fail@plt+0xaf6c>
   1c228:	ldr	r3, [sp, #176]	; 0xb0
   1c22c:	cmp	r3, #0
   1c230:	beq	1c244 <__assert_fail@plt+0xaf6c>
   1c234:	ldr	r3, [sp, #156]	; 0x9c
   1c238:	ldr	r3, [r3]
   1c23c:	cmn	r3, #1
   1c240:	beq	1c3cc <__assert_fail@plt+0xb0f4>
   1c244:	ldr	r4, [sp, #232]	; 0xe8
   1c248:	mov	r3, #0
   1c24c:	str	r3, [sp, #268]	; 0x10c
   1c250:	ldr	fp, [r4, #36]	; 0x24
   1c254:	str	r3, [sp, #256]	; 0x100
   1c258:	str	r3, [sp, #252]	; 0xfc
   1c25c:	str	r3, [sp, #124]	; 0x7c
   1c260:	ldrsb	r3, [fp, #52]	; 0x34
   1c264:	ldr	r2, [sp, #188]	; 0xbc
   1c268:	cmp	r3, #0
   1c26c:	str	r2, [sp, #12]
   1c270:	blt	1cf60 <__assert_fail@plt+0xbc88>
   1c274:	ldr	r3, [sp, #248]	; 0xf8
   1c278:	cmp	r3, #0
   1c27c:	beq	1d00c <__assert_fail@plt+0xbd34>
   1c280:	ldr	r2, [r4, #76]	; 0x4c
   1c284:	ldr	r1, [sp, #12]
   1c288:	cmp	r2, #0
   1c28c:	str	fp, [r3, r1, lsl #2]
   1c290:	bne	1d098 <__assert_fail@plt+0xbdc0>
   1c294:	ldrb	r3, [fp, #52]	; 0x34
   1c298:	ldr	r2, [sp, #104]	; 0x68
   1c29c:	str	r2, [sp, #16]
   1c2a0:	tst	r3, #16
   1c2a4:	bne	1d05c <__assert_fail@plt+0xbd84>
   1c2a8:	mvn	r3, #0
   1c2ac:	str	r3, [sp, #20]
   1c2b0:	mov	r3, #0
   1c2b4:	str	r3, [sp, #36]	; 0x24
   1c2b8:	ldr	r3, [sp, #100]	; 0x64
   1c2bc:	ldr	r5, [sp, #188]	; 0xbc
   1c2c0:	str	r3, [sp, #32]
   1c2c4:	b	1c2d0 <__assert_fail@plt+0xaff8>
   1c2c8:	ldr	r5, [sp, #188]	; 0xbc
   1c2cc:	mov	fp, r4
   1c2d0:	ldr	r3, [sp, #204]	; 0xcc
   1c2d4:	cmp	r3, r5
   1c2d8:	ble	1c48c <__assert_fail@plt+0xb1b4>
   1c2dc:	ldr	r3, [sp, #184]	; 0xb8
   1c2e0:	add	r9, r5, #1
   1c2e4:	cmp	r9, r3
   1c2e8:	bge	1c844 <__assert_fail@plt+0xb56c>
   1c2ec:	ldr	r3, [sp, #176]	; 0xb0
   1c2f0:	cmp	r9, r3
   1c2f4:	bge	1c8a0 <__assert_fail@plt+0xb5c8>
   1c2f8:	ldrb	r3, [fp, #52]	; 0x34
   1c2fc:	tst	r3, #32
   1c300:	bne	1c67c <__assert_fail@plt+0xb3a4>
   1c304:	ldr	r3, [sp, #152]	; 0x98
   1c308:	add	r2, r5, #1
   1c30c:	str	r2, [sp, #188]	; 0xbc
   1c310:	ldrb	r4, [r3, r5]
   1c314:	ldr	r3, [fp, #44]	; 0x2c
   1c318:	cmp	r3, #0
   1c31c:	beq	1c870 <__assert_fail@plt+0xb598>
   1c320:	ldr	r4, [r3, r4, lsl #2]
   1c324:	ldr	r3, [sp, #248]	; 0xf8
   1c328:	cmp	r3, #0
   1c32c:	beq	1c344 <__assert_fail@plt+0xb06c>
   1c330:	mov	r2, r4
   1c334:	add	r1, sp, #148	; 0x94
   1c338:	add	r0, sp, #124	; 0x7c
   1c33c:	bl	1b8e0 <__assert_fail@plt+0xa608>
   1c340:	mov	r4, r0
   1c344:	cmp	r4, #0
   1c348:	beq	1c420 <__assert_fail@plt+0xb148>
   1c34c:	ldr	r2, [sp, #16]
   1c350:	ldrb	r3, [r4, #52]	; 0x34
   1c354:	cmp	fp, r4
   1c358:	movne	r2, #0
   1c35c:	andeq	r2, r2, #1
   1c360:	ldr	r1, [sp, #12]
   1c364:	cmp	r2, #0
   1c368:	movne	r1, r9
   1c36c:	tst	r3, #16
   1c370:	str	r2, [sp, #16]
   1c374:	str	r1, [sp, #12]
   1c378:	beq	1c2c8 <__assert_fail@plt+0xaff0>
   1c37c:	tst	r3, #128	; 0x80
   1c380:	bne	1c628 <__assert_fail@plt+0xb350>
   1c384:	ldr	r3, [sp, #188]	; 0xbc
   1c388:	str	r3, [sp, #20]
   1c38c:	ldr	r3, [sp, #40]	; 0x28
   1c390:	cmp	r3, #0
   1c394:	beq	1c4ac <__assert_fail@plt+0xb1d4>
   1c398:	mov	r3, #1
   1c39c:	str	r3, [sp, #36]	; 0x24
   1c3a0:	mov	r3, #0
   1c3a4:	ldr	r5, [sp, #20]
   1c3a8:	str	r3, [sp, #32]
   1c3ac:	b	1c2cc <__assert_fail@plt+0xaff4>
   1c3b0:	mov	r0, r5
   1c3b4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1c3b8:	mov	r0, #0
   1c3bc:	bl	23198 <__assert_fail@plt+0x11ec0>
   1c3c0:	add	r0, sp, #148	; 0x94
   1c3c4:	bl	15ccc <__assert_fail@plt+0x49f4>
   1c3c8:	ldr	r6, [sp, #116]	; 0x74
   1c3cc:	ldr	r3, [sp, #92]	; 0x5c
   1c3d0:	ldr	r2, [sp, #68]	; 0x44
   1c3d4:	add	r6, r6, r3
   1c3d8:	ldr	r3, [sp, #52]	; 0x34
   1c3dc:	str	r6, [sp, #116]	; 0x74
   1c3e0:	cmp	r3, r6
   1c3e4:	movge	r3, #0
   1c3e8:	movlt	r3, #1
   1c3ec:	cmp	r2, r6
   1c3f0:	orrgt	r3, r3, #1
   1c3f4:	cmp	r3, #0
   1c3f8:	beq	1c11c <__assert_fail@plt+0xae44>
   1c3fc:	mov	r3, #1
   1c400:	ldr	r7, [sp, #248]	; 0xf8
   1c404:	str	r3, [sp, #48]	; 0x30
   1c408:	b	1c964 <__assert_fail@plt+0xb68c>
   1c40c:	mov	r3, #1
   1c410:	str	r3, [sp, #48]	; 0x30
   1c414:	ldr	r0, [sp, #48]	; 0x30
   1c418:	add	sp, sp, #428	; 0x1ac
   1c41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c420:	ldr	r3, [sp, #124]	; 0x7c
   1c424:	cmp	r3, #0
   1c428:	bne	1d088 <__assert_fail@plt+0xbdb0>
   1c42c:	ldr	r2, [sp, #248]	; 0xf8
   1c430:	cmp	r2, #0
   1c434:	beq	1c48c <__assert_fail@plt+0xb1b4>
   1c438:	ldr	r3, [sp, #40]	; 0x28
   1c43c:	eor	r5, r3, #1
   1c440:	ldr	r3, [sp, #36]	; 0x24
   1c444:	ands	r5, r5, r3
   1c448:	bne	1c48c <__assert_fail@plt+0xb1b4>
   1c44c:	ldr	r3, [sp, #188]	; 0xbc
   1c450:	ldr	lr, [sp, #252]	; 0xfc
   1c454:	mov	ip, r3
   1c458:	add	r2, r2, r3, lsl #2
   1c45c:	mov	r0, r5
   1c460:	b	1c478 <__assert_fail@plt+0xb1a0>
   1c464:	ldr	r1, [r2, #4]!
   1c468:	add	ip, ip, #1
   1c46c:	cmp	r1, #0
   1c470:	mov	r0, #1
   1c474:	bne	1c64c <__assert_fail@plt+0xb374>
   1c478:	add	r3, r3, #1
   1c47c:	cmp	lr, r3
   1c480:	bge	1c464 <__assert_fail@plt+0xb18c>
   1c484:	cmp	r0, #0
   1c488:	strne	ip, [sp, #188]	; 0xbc
   1c48c:	ldr	r3, [sp, #32]
   1c490:	cmp	r3, #0
   1c494:	beq	1c4ac <__assert_fail@plt+0xb1d4>
   1c498:	ldr	r2, [sp, #32]
   1c49c:	ldr	r1, [sp, #12]
   1c4a0:	ldr	r3, [r2]
   1c4a4:	add	r3, r3, r1
   1c4a8:	str	r3, [r2]
   1c4ac:	ldr	r3, [sp, #20]
   1c4b0:	cmn	r3, #1
   1c4b4:	beq	1c3c0 <__assert_fail@plt+0xb0e8>
   1c4b8:	cmn	r3, #2
   1c4bc:	beq	1c958 <__assert_fail@plt+0xb680>
   1c4c0:	ldr	r3, [sp, #44]	; 0x2c
   1c4c4:	ldr	r2, [sp, #20]
   1c4c8:	ldrb	r3, [r3, #28]
   1c4cc:	str	r2, [sp, #240]	; 0xf0
   1c4d0:	ldr	r2, [sp, #76]	; 0x4c
   1c4d4:	lsr	r3, r3, #4
   1c4d8:	eor	r3, r3, #1
   1c4dc:	cmp	r2, #1
   1c4e0:	movls	r3, #0
   1c4e4:	andhi	r3, r3, #1
   1c4e8:	cmp	r3, #0
   1c4ec:	beq	1c904 <__assert_fail@plt+0xb62c>
   1c4f0:	ldr	r3, [sp, #20]
   1c4f4:	ldr	r7, [sp, #248]	; 0xf8
   1c4f8:	mov	r2, r3
   1c4fc:	add	r0, sp, #148	; 0x94
   1c500:	ldr	r1, [r7, r3, lsl #2]
   1c504:	bl	19574 <__assert_fail@plt+0x829c>
   1c508:	ldr	r3, [sp, #28]
   1c50c:	ldrb	r3, [r3, #88]	; 0x58
   1c510:	tst	r3, #1
   1c514:	str	r0, [sp, #244]	; 0xf4
   1c518:	beq	1ce3c <__assert_fail@plt+0xbb64>
   1c51c:	ldr	r3, [sp, #20]
   1c520:	ldr	fp, [sp, #232]	; 0xe8
   1c524:	cmn	r3, #-1073741822	; 0xc0000002
   1c528:	ldr	r9, [sp, #244]	; 0xf4
   1c52c:	bhi	1c994 <__assert_fail@plt+0xb6bc>
   1c530:	ldr	r3, [sp, #20]
   1c534:	add	r7, r3, #1
   1c538:	lsl	r4, r7, #2
   1c53c:	mov	r0, r4
   1c540:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1c544:	subs	r5, r0, #0
   1c548:	beq	1d178 <__assert_fail@plt+0xbea0>
   1c54c:	ldr	r3, [fp, #76]	; 0x4c
   1c550:	cmp	r3, #0
   1c554:	beq	1c9a0 <__assert_fail@plt+0xb6c8>
   1c558:	mov	r0, r4
   1c55c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1c560:	subs	r6, r0, #0
   1c564:	beq	1d0d8 <__assert_fail@plt+0xbe00>
   1c568:	ldr	r4, [sp, #20]
   1c56c:	str	fp, [sp, #12]
   1c570:	add	sl, sp, #300	; 0x12c
   1c574:	mov	fp, r7
   1c578:	lsl	r8, fp, #2
   1c57c:	mov	r2, r8
   1c580:	mov	r1, #0
   1c584:	mov	r0, r6
   1c588:	bl	111f4 <memset@plt>
   1c58c:	mov	r3, #0
   1c590:	str	r5, [sp, #284]	; 0x11c
   1c594:	str	r6, [sp, #288]	; 0x120
   1c598:	str	r9, [sp, #292]	; 0x124
   1c59c:	str	r4, [sp, #296]	; 0x128
   1c5a0:	add	r1, sp, #284	; 0x11c
   1c5a4:	str	r3, [sl]
   1c5a8:	str	r3, [sl, #4]
   1c5ac:	str	r3, [sl, #8]
   1c5b0:	add	r0, sp, #148	; 0x94
   1c5b4:	bl	1ba5c <__assert_fail@plt+0xa784>
   1c5b8:	mov	r7, r0
   1c5bc:	ldr	r0, [sp, #308]	; 0x134
   1c5c0:	bl	23198 <__assert_fail@plt+0x11ec0>
   1c5c4:	cmp	r7, #0
   1c5c8:	bne	1d1ac <__assert_fail@plt+0xbed4>
   1c5cc:	ldr	r2, [r5]
   1c5d0:	cmp	r2, #0
   1c5d4:	bne	1d0f8 <__assert_fail@plt+0xbe20>
   1c5d8:	ldr	r2, [r6]
   1c5dc:	cmp	r2, #0
   1c5e0:	bne	1d0f8 <__assert_fail@plt+0xbe20>
   1c5e4:	ldr	r3, [sp, #248]	; 0xf8
   1c5e8:	sub	r8, r8, #4
   1c5ec:	add	r3, r3, r8
   1c5f0:	subs	r4, r4, #1
   1c5f4:	bcc	1cfac <__assert_fail@plt+0xbcd4>
   1c5f8:	ldr	r1, [r3, #-4]!
   1c5fc:	cmp	r1, #0
   1c600:	beq	1c5f0 <__assert_fail@plt+0xb318>
   1c604:	ldrb	r2, [r1, #52]	; 0x34
   1c608:	tst	r2, #16
   1c60c:	beq	1c5f0 <__assert_fail@plt+0xb318>
   1c610:	mov	r2, r4
   1c614:	add	r0, sp, #148	; 0x94
   1c618:	bl	19574 <__assert_fail@plt+0x829c>
   1c61c:	add	fp, r4, #1
   1c620:	mov	r9, r0
   1c624:	b	1c578 <__assert_fail@plt+0xb2a0>
   1c628:	ldr	r5, [sp, #188]	; 0xbc
   1c62c:	mov	r1, r4
   1c630:	mov	r2, r5
   1c634:	add	r0, sp, #148	; 0x94
   1c638:	bl	19574 <__assert_fail@plt+0x829c>
   1c63c:	cmp	r0, #0
   1c640:	beq	1c2cc <__assert_fail@plt+0xaff4>
   1c644:	str	r5, [sp, #20]
   1c648:	b	1c38c <__assert_fail@plt+0xb0b4>
   1c64c:	mov	r2, #0
   1c650:	add	r1, sp, #148	; 0x94
   1c654:	add	r0, sp, #124	; 0x7c
   1c658:	str	ip, [sp, #188]	; 0xbc
   1c65c:	bl	1b8e0 <__assert_fail@plt+0xa608>
   1c660:	ldr	r3, [sp, #124]	; 0x7c
   1c664:	cmp	r3, #0
   1c668:	bne	1d194 <__assert_fail@plt+0xbebc>
   1c66c:	cmp	r0, #0
   1c670:	bne	1d1a4 <__assert_fail@plt+0xbecc>
   1c674:	ldr	r2, [sp, #248]	; 0xf8
   1c678:	b	1c44c <__assert_fail@plt+0xb174>
   1c67c:	ldr	r3, [fp, #8]
   1c680:	ldr	sl, [sp, #232]	; 0xe8
   1c684:	cmp	r3, #0
   1c688:	ble	1c774 <__assert_fail@plt+0xb49c>
   1c68c:	add	r2, sl, #128	; 0x80
   1c690:	str	r9, [sp, #64]	; 0x40
   1c694:	mov	r4, #0
   1c698:	str	r2, [sp, #24]
   1c69c:	mov	r9, r3
   1c6a0:	b	1c708 <__assert_fail@plt+0xb430>
   1c6a4:	tst	r0, #1
   1c6a8:	beq	1c6fc <__assert_fail@plt+0xb424>
   1c6ac:	tst	r6, #8
   1c6b0:	bne	1c6fc <__assert_fail@plt+0xb424>
   1c6b4:	tst	r6, #32
   1c6b8:	beq	1c6c4 <__assert_fail@plt+0xb3ec>
   1c6bc:	tst	r0, #2
   1c6c0:	beq	1c6fc <__assert_fail@plt+0xb424>
   1c6c4:	tst	r6, #128	; 0x80
   1c6c8:	beq	1c6d4 <__assert_fail@plt+0xb3fc>
   1c6cc:	tst	r0, #8
   1c6d0:	beq	1c6fc <__assert_fail@plt+0xb424>
   1c6d4:	str	r5, [sp]
   1c6d8:	mov	r0, r8
   1c6dc:	add	r3, sp, #148	; 0x94
   1c6e0:	mov	r2, r7
   1c6e4:	ldr	r1, [sp, #24]
   1c6e8:	bl	1a720 <__assert_fail@plt+0x9448>
   1c6ec:	cmp	r0, #0
   1c6f0:	bne	1c780 <__assert_fail@plt+0xb4a8>
   1c6f4:	ldr	r5, [sp, #188]	; 0xbc
   1c6f8:	ldr	r9, [fp, #8]
   1c6fc:	add	r4, r4, #1
   1c700:	cmp	r4, r9
   1c704:	bge	1c770 <__assert_fail@plt+0xb498>
   1c708:	ldr	r2, [fp, #12]
   1c70c:	ldr	r8, [sl]
   1c710:	ldr	r7, [r2, r4, lsl #2]
   1c714:	add	r2, r8, r7, lsl #3
   1c718:	ldrb	r1, [r2, #6]
   1c71c:	tst	r1, #16
   1c720:	beq	1c6fc <__assert_fail@plt+0xb424>
   1c724:	ldr	r6, [r2, #4]
   1c728:	ldr	r3, [pc, #2164]	; 1cfa4 <__assert_fail@plt+0xbccc>
   1c72c:	tst	r6, r3
   1c730:	beq	1c6d4 <__assert_fail@plt+0xb3fc>
   1c734:	ldr	r2, [sp, #236]	; 0xec
   1c738:	mov	r1, r5
   1c73c:	add	r0, sp, #148	; 0x94
   1c740:	bl	18b84 <__assert_fail@plt+0x78ac>
   1c744:	ldr	r3, [pc, #2140]	; 1cfa8 <__assert_fail@plt+0xbcd0>
   1c748:	and	r6, r3, r6, lsr #8
   1c74c:	tst	r6, #4
   1c750:	bne	1c6a4 <__assert_fail@plt+0xb3cc>
   1c754:	tst	r6, #8
   1c758:	beq	1c6b4 <__assert_fail@plt+0xb3dc>
   1c75c:	tst	r0, #1
   1c760:	beq	1c6b4 <__assert_fail@plt+0xb3dc>
   1c764:	add	r4, r4, #1
   1c768:	cmp	r4, r9
   1c76c:	blt	1c708 <__assert_fail@plt+0xb430>
   1c770:	ldr	r9, [sp, #64]	; 0x40
   1c774:	mov	r3, #0
   1c778:	str	r3, [sp, #124]	; 0x7c
   1c77c:	b	1c304 <__assert_fail@plt+0xb02c>
   1c780:	ldr	r3, [sp, #268]	; 0x10c
   1c784:	ldr	r6, [sp, #188]	; 0xbc
   1c788:	cmp	r3, r0
   1c78c:	add	r6, r0, r6
   1c790:	movlt	r3, r0
   1c794:	mov	r1, r6
   1c798:	add	r0, sp, #148	; 0x94
   1c79c:	str	r3, [sp, #268]	; 0x10c
   1c7a0:	bl	161ac <__assert_fail@plt+0x4ed4>
   1c7a4:	cmp	r0, #0
   1c7a8:	str	r0, [sp, #136]	; 0x88
   1c7ac:	bne	1c8e8 <__assert_fail@plt+0xb610>
   1c7b0:	ldr	r3, [sl, #12]
   1c7b4:	ldr	r8, [sp, #248]	; 0xf8
   1c7b8:	ldr	r2, [sl, #24]
   1c7bc:	ldr	r3, [r3, r7, lsl #2]
   1c7c0:	ldr	r1, [r8, r6, lsl #2]
   1c7c4:	add	r3, r3, r3, lsl #1
   1c7c8:	cmp	r1, #0
   1c7cc:	add	r2, r2, r3, lsl #2
   1c7d0:	beq	1c8b0 <__assert_fail@plt+0xb5d8>
   1c7d4:	ldr	r1, [r1, #40]	; 0x28
   1c7d8:	add	r0, sp, #284	; 0x11c
   1c7dc:	bl	16ee8 <__assert_fail@plt+0x5c10>
   1c7e0:	cmp	r0, #0
   1c7e4:	str	r0, [sp, #136]	; 0x88
   1c7e8:	bne	1c8e8 <__assert_fail@plt+0xb610>
   1c7ec:	ldr	r2, [sp, #236]	; 0xec
   1c7f0:	sub	r1, r6, #1
   1c7f4:	add	r0, sp, #148	; 0x94
   1c7f8:	bl	18b84 <__assert_fail@plt+0x78ac>
   1c7fc:	add	r2, sp, #284	; 0x11c
   1c800:	mov	r1, sl
   1c804:	ldr	r7, [sp, #248]	; 0xf8
   1c808:	mov	r3, r0
   1c80c:	add	r0, sp, #136	; 0x88
   1c810:	bl	17034 <__assert_fail@plt+0x5d5c>
   1c814:	str	r0, [r7, r6, lsl #2]
   1c818:	ldr	r0, [sp, #292]	; 0x124
   1c81c:	bl	23198 <__assert_fail@plt+0x11ec0>
   1c820:	ldr	r7, [sp, #248]	; 0xf8
   1c824:	ldr	r3, [r7, r6, lsl #2]
   1c828:	cmp	r3, #0
   1c82c:	bne	1c6f4 <__assert_fail@plt+0xb41c>
   1c830:	ldr	r0, [sp, #136]	; 0x88
   1c834:	cmp	r0, #0
   1c838:	beq	1c6f4 <__assert_fail@plt+0xb41c>
   1c83c:	ldr	r9, [sp, #64]	; 0x40
   1c840:	b	1c8f0 <__assert_fail@plt+0xb618>
   1c844:	ldr	r2, [sp, #196]	; 0xc4
   1c848:	cmp	r3, r2
   1c84c:	bge	1c2ec <__assert_fail@plt+0xb014>
   1c850:	add	r1, r5, #2
   1c854:	add	r0, sp, #148	; 0x94
   1c858:	bl	156f8 <__assert_fail@plt+0x4420>
   1c85c:	cmp	r0, #0
   1c860:	str	r0, [sp, #124]	; 0x7c
   1c864:	bne	1c958 <__assert_fail@plt+0xb680>
   1c868:	ldr	r5, [sp, #188]	; 0xbc
   1c86c:	b	1c2f8 <__assert_fail@plt+0xb020>
   1c870:	ldr	r5, [fp, #48]	; 0x30
   1c874:	cmp	r5, #0
   1c878:	beq	1cfe0 <__assert_fail@plt+0xbd08>
   1c87c:	ldr	r1, [sp, #188]	; 0xbc
   1c880:	ldr	r2, [sp, #236]	; 0xec
   1c884:	sub	r1, r1, #1
   1c888:	add	r0, sp, #148	; 0x94
   1c88c:	bl	18b84 <__assert_fail@plt+0x78ac>
   1c890:	tst	r0, #1
   1c894:	addne	r4, r4, #256	; 0x100
   1c898:	ldr	r4, [r5, r4, lsl #2]
   1c89c:	b	1c324 <__assert_fail@plt+0xb04c>
   1c8a0:	ldr	r2, [sp, #196]	; 0xc4
   1c8a4:	cmp	r3, r2
   1c8a8:	bge	1c2f8 <__assert_fail@plt+0xb020>
   1c8ac:	b	1c850 <__assert_fail@plt+0xb578>
   1c8b0:	ldm	r2, {r0, r1, r2}
   1c8b4:	add	r3, sp, #284	; 0x11c
   1c8b8:	stm	r3, {r0, r1, r2}
   1c8bc:	sub	r1, r6, #1
   1c8c0:	ldr	r2, [sp, #236]	; 0xec
   1c8c4:	add	r0, sp, #148	; 0x94
   1c8c8:	bl	18b84 <__assert_fail@plt+0x78ac>
   1c8cc:	add	r2, sp, #284	; 0x11c
   1c8d0:	mov	r1, sl
   1c8d4:	mov	r3, r0
   1c8d8:	add	r0, sp, #136	; 0x88
   1c8dc:	bl	17034 <__assert_fail@plt+0x5d5c>
   1c8e0:	str	r0, [r8, r6, lsl #2]
   1c8e4:	b	1c820 <__assert_fail@plt+0xb548>
   1c8e8:	ldr	r9, [sp, #64]	; 0x40
   1c8ec:	ldr	r7, [sp, #248]	; 0xf8
   1c8f0:	cmp	r7, #0
   1c8f4:	str	r0, [sp, #124]	; 0x7c
   1c8f8:	beq	1c994 <__assert_fail@plt+0xb6bc>
   1c8fc:	mov	r4, #0
   1c900:	b	1c330 <__assert_fail@plt+0xb058>
   1c904:	ldr	r3, [sp, #28]
   1c908:	ldr	r7, [sp, #248]	; 0xf8
   1c90c:	ldr	r4, [r3, #76]	; 0x4c
   1c910:	cmp	r4, #0
   1c914:	beq	1ca18 <__assert_fail@plt+0xb740>
   1c918:	ldr	r3, [sp, #20]
   1c91c:	add	r0, sp, #148	; 0x94
   1c920:	mov	r2, r3
   1c924:	ldr	r1, [r7, r3, lsl #2]
   1c928:	bl	19574 <__assert_fail@plt+0x829c>
   1c92c:	str	r0, [sp, #244]	; 0xf4
   1c930:	b	1ce44 <__assert_fail@plt+0xbb6c>
   1c934:	tst	r0, #4
   1c938:	beq	1c274 <__assert_fail@plt+0xaf9c>
   1c93c:	mov	r3, r0
   1c940:	ldr	r2, [fp, #40]	; 0x28
   1c944:	mov	r1, r4
   1c948:	add	r0, sp, #124	; 0x7c
   1c94c:	bl	17034 <__assert_fail@plt+0x5d5c>
   1c950:	subs	fp, r0, #0
   1c954:	bne	1c274 <__assert_fail@plt+0xaf9c>
   1c958:	ldr	r7, [sp, #248]	; 0xf8
   1c95c:	mov	r3, #12
   1c960:	str	r3, [sp, #48]	; 0x30
   1c964:	mov	r0, r7
   1c968:	bl	23198 <__assert_fail@plt+0x11ec0>
   1c96c:	ldr	r3, [sp, #28]
   1c970:	ldr	r3, [r3, #76]	; 0x4c
   1c974:	cmp	r3, #0
   1c978:	bne	1cf84 <__assert_fail@plt+0xbcac>
   1c97c:	add	r0, sp, #148	; 0x94
   1c980:	bl	15b28 <__assert_fail@plt+0x4850>
   1c984:	ldr	r0, [sp, #48]	; 0x30
   1c988:	add	sp, sp, #428	; 0x1ac
   1c98c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c990:	mov	r7, r0
   1c994:	mov	r3, #12
   1c998:	str	r3, [sp, #48]	; 0x30
   1c99c:	b	1c964 <__assert_fail@plt+0xb68c>
   1c9a0:	ldr	r2, [sp, #20]
   1c9a4:	add	r1, sp, #284	; 0x11c
   1c9a8:	add	r0, sp, #148	; 0x94
   1c9ac:	str	r3, [sp, #288]	; 0x120
   1c9b0:	str	r2, [sp, #296]	; 0x128
   1c9b4:	str	r3, [sp, #300]	; 0x12c
   1c9b8:	str	r3, [sp, #304]	; 0x130
   1c9bc:	str	r3, [sp, #308]	; 0x134
   1c9c0:	str	r5, [sp, #284]	; 0x11c
   1c9c4:	str	r9, [sp, #292]	; 0x124
   1c9c8:	bl	1ba5c <__assert_fail@plt+0xa784>
   1c9cc:	mov	r8, r0
   1c9d0:	ldr	r0, [sp, #308]	; 0x134
   1c9d4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1c9d8:	cmp	r8, #0
   1c9dc:	bne	1d12c <__assert_fail@plt+0xbe54>
   1c9e0:	ldr	r3, [r5]
   1c9e4:	cmp	r3, #0
   1c9e8:	beq	1c3b0 <__assert_fail@plt+0xb0d8>
   1c9ec:	ldr	r0, [sp, #248]	; 0xf8
   1c9f0:	bl	23198 <__assert_fail@plt+0x11ec0>
   1c9f4:	ldr	r3, [sp, #20]
   1c9f8:	mov	r0, #0
   1c9fc:	str	r3, [sp, #240]	; 0xf0
   1ca00:	str	r5, [sp, #248]	; 0xf8
   1ca04:	str	r9, [sp, #244]	; 0xf4
   1ca08:	bl	23198 <__assert_fail@plt+0x11ec0>
   1ca0c:	mov	r0, #0
   1ca10:	bl	23198 <__assert_fail@plt+0x11ec0>
   1ca14:	ldr	r7, [sp, #248]	; 0xf8
   1ca18:	ldr	r3, [sp, #76]	; 0x4c
   1ca1c:	cmp	r3, #0
   1ca20:	beq	1c964 <__assert_fail@plt+0xb68c>
   1ca24:	cmp	r3, #1
   1ca28:	bls	1ca50 <__assert_fail@plt+0xb778>
   1ca2c:	ldr	r3, [sp, #76]	; 0x4c
   1ca30:	mvn	r1, #0
   1ca34:	sub	r2, r3, #-536870911	; 0xe0000001
   1ca38:	ldr	r3, [sp, #476]	; 0x1dc
   1ca3c:	add	r2, r3, r2, lsl #3
   1ca40:	str	r1, [r3, #12]
   1ca44:	str	r1, [r3, #8]!
   1ca48:	cmp	r2, r3
   1ca4c:	bne	1ca40 <__assert_fail@plt+0xb768>
   1ca50:	ldr	r3, [sp, #44]	; 0x2c
   1ca54:	ldr	r1, [sp, #476]	; 0x1dc
   1ca58:	ldr	r2, [sp, #240]	; 0xf0
   1ca5c:	ldrb	r3, [r3, #28]
   1ca60:	str	r2, [r1, #4]
   1ca64:	ldr	r2, [sp, #76]	; 0x4c
   1ca68:	mov	r4, #0
   1ca6c:	lsr	r3, r3, #4
   1ca70:	eor	r3, r3, #1
   1ca74:	cmp	r2, #1
   1ca78:	moveq	r3, #0
   1ca7c:	andne	r3, r3, #1
   1ca80:	cmp	r3, #0
   1ca84:	mov	r3, r1
   1ca88:	moveq	r3, r2
   1ca8c:	str	r4, [r1]
   1ca90:	lsleq	r3, r3, #3
   1ca94:	streq	r3, [sp, #20]
   1ca98:	beq	1cc54 <__assert_fail@plt+0xb97c>
   1ca9c:	ldr	r2, [sp, #28]
   1caa0:	ldrb	r3, [r2, #88]	; 0x58
   1caa4:	tst	r3, #1
   1caa8:	beq	1d38c <__assert_fail@plt+0xc0b4>
   1caac:	ldr	r3, [r2, #76]	; 0x4c
   1cab0:	cmp	r3, #0
   1cab4:	ble	1d38c <__assert_fail@plt+0xc0b4>
   1cab8:	ldr	r1, [sp, #44]	; 0x2c
   1cabc:	mov	r2, #2
   1cac0:	mov	r3, #16
   1cac4:	ldr	r1, [r1]
   1cac8:	add	r8, sp, #296	; 0x128
   1cacc:	mov	r0, #48	; 0x30
   1cad0:	str	r1, [sp, #24]
   1cad4:	str	r4, [sp, #136]	; 0x88
   1cad8:	str	r4, [sp, #144]	; 0x90
   1cadc:	str	r4, [sp, #284]	; 0x11c
   1cae0:	str	r2, [sp, #140]	; 0x8c
   1cae4:	str	r3, [sp, #288]	; 0x120
   1cae8:	str	r8, [sp, #292]	; 0x124
   1caec:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1caf0:	cmp	r0, #0
   1caf4:	str	r0, [sp, #144]	; 0x90
   1caf8:	beq	1d638 <__assert_fail@plt+0xc360>
   1cafc:	ldr	r3, [sp, #284]	; 0x11c
   1cb00:	ldr	r2, [sp, #76]	; 0x4c
   1cb04:	add	r9, sp, #124	; 0x7c
   1cb08:	cmp	r2, r3
   1cb0c:	ldr	r3, [sp, #24]
   1cb10:	ldr	fp, [r3, #72]	; 0x48
   1cb14:	str	r4, [sp, #124]	; 0x7c
   1cb18:	str	r4, [r9, #4]
   1cb1c:	str	r4, [r9, #8]
   1cb20:	bhi	1d630 <__assert_fail@plt+0xc358>
   1cb24:	ldr	r3, [sp, #76]	; 0x4c
   1cb28:	add	sl, sp, #136	; 0x88
   1cb2c:	str	r3, [sp, #284]	; 0x11c
   1cb30:	ldr	r5, [sp, #76]	; 0x4c
   1cb34:	ldr	r3, [sp, #292]	; 0x124
   1cb38:	ldr	r1, [sp, #476]	; 0x1dc
   1cb3c:	mov	r0, r3
   1cb40:	str	r3, [sp, #16]
   1cb44:	lsl	r3, r5, #3
   1cb48:	mov	r2, r3
   1cb4c:	str	r3, [sp, #20]
   1cb50:	bl	11068 <memcpy@plt>
   1cb54:	add	r3, sp, #424	; 0x1a8
   1cb58:	mov	r2, r3
   1cb5c:	ldr	r3, [sp, #476]	; 0x1dc
   1cb60:	str	r8, [sp, #12]
   1cb64:	mov	r8, r5
   1cb68:	ldr	r4, [r3]
   1cb6c:	lsl	r1, r5, #4
   1cb70:	str	r4, [r2, #-304]!	; 0xfffffed0
   1cb74:	str	r1, [sp, #44]	; 0x2c
   1cb78:	str	r2, [sp, #40]	; 0x28
   1cb7c:	ldr	r3, [sp, #476]	; 0x1dc
   1cb80:	ldr	r3, [r3, #4]
   1cb84:	cmp	r4, r3
   1cb88:	bgt	1cc10 <__assert_fail@plt+0xb938>
   1cb8c:	ldr	r2, [sp, #24]
   1cb90:	lsl	r6, fp, #3
   1cb94:	mov	r7, fp
   1cb98:	ldr	r0, [r2]
   1cb9c:	add	r1, r0, r6
   1cba0:	ldrb	r2, [r1, #4]
   1cba4:	cmp	r2, #8
   1cba8:	beq	1d480 <__assert_fail@plt+0xc1a8>
   1cbac:	cmp	r2, #9
   1cbb0:	beq	1d430 <__assert_fail@plt+0xc158>
   1cbb4:	cmp	r3, r4
   1cbb8:	beq	1d374 <__assert_fail@plt+0xc09c>
   1cbbc:	cmp	sl, #0
   1cbc0:	beq	1d210 <__assert_fail@plt+0xbf38>
   1cbc4:	mov	r2, fp
   1cbc8:	add	r1, sp, #132	; 0x84
   1cbcc:	ldr	r0, [sp, #128]	; 0x80
   1cbd0:	bl	16364 <__assert_fail@plt+0x508c>
   1cbd4:	cmp	r0, #0
   1cbd8:	beq	1d210 <__assert_fail@plt+0xbf38>
   1cbdc:	ldr	r2, [sp, #476]	; 0x1dc
   1cbe0:	mov	r3, #0
   1cbe4:	ldr	r1, [sp, #476]	; 0x1dc
   1cbe8:	ldr	r1, [r1, r3, lsl #3]
   1cbec:	add	r3, r3, #1
   1cbf0:	cmp	r1, #0
   1cbf4:	blt	1cc04 <__assert_fail@plt+0xb92c>
   1cbf8:	ldr	r1, [r2, #4]
   1cbfc:	cmn	r1, #1
   1cc00:	beq	1d1e0 <__assert_fail@plt+0xbf08>
   1cc04:	cmp	r8, r3
   1cc08:	add	r2, r2, #8
   1cc0c:	bne	1cbe4 <__assert_fail@plt+0xb90c>
   1cc10:	ldr	r0, [sp, #132]	; 0x84
   1cc14:	ldr	r8, [sp, #12]
   1cc18:	bl	23198 <__assert_fail@plt+0x11ec0>
   1cc1c:	ldr	r0, [sp, #292]	; 0x124
   1cc20:	cmp	r0, r8
   1cc24:	beq	1cc2c <__assert_fail@plt+0xb954>
   1cc28:	bl	23198 <__assert_fail@plt+0x11ec0>
   1cc2c:	mov	r2, #0
   1cc30:	mov	r3, #16
   1cc34:	mov	r0, sl
   1cc38:	str	r8, [sp, #292]	; 0x124
   1cc3c:	str	r2, [sp, #284]	; 0x11c
   1cc40:	str	r3, [sp, #288]	; 0x120
   1cc44:	bl	15d70 <__assert_fail@plt+0x4a98>
   1cc48:	cmp	r0, #0
   1cc4c:	bne	1d1b4 <__assert_fail@plt+0xbedc>
   1cc50:	ldr	r7, [sp, #248]	; 0xf8
   1cc54:	ldr	r3, [sp, #476]	; 0x1dc
   1cc58:	ldr	r2, [sp, #20]
   1cc5c:	ldrb	r6, [sp, #224]	; 0xe0
   1cc60:	ldr	r5, [sp, #176]	; 0xb0
   1cc64:	ldr	r8, [sp, #160]	; 0xa0
   1cc68:	ldr	r9, [sp, #180]	; 0xb4
   1cc6c:	ldr	lr, [sp, #116]	; 0x74
   1cc70:	add	r4, r3, r2
   1cc74:	mov	ip, r3
   1cc78:	add	r1, r3, #4
   1cc7c:	ldr	r2, [r1, #-4]
   1cc80:	cmn	r2, #1
   1cc84:	beq	1cca4 <__assert_fail@plt+0xb9cc>
   1cc88:	cmp	r6, #0
   1cc8c:	bne	1d34c <__assert_fail@plt+0xc074>
   1cc90:	ldr	r0, [r3, #4]
   1cc94:	add	r2, lr, r2
   1cc98:	add	r0, lr, r0
   1cc9c:	str	r2, [r1, #-4]
   1cca0:	str	r0, [r3, #4]
   1cca4:	add	r3, r3, #8
   1cca8:	cmp	r4, r3
   1ccac:	add	r1, r1, #8
   1ccb0:	bne	1cc7c <__assert_fail@plt+0xb9a4>
   1ccb4:	ldr	r2, [sp, #96]	; 0x60
   1ccb8:	cmp	r2, #0
   1ccbc:	ble	1ccec <__assert_fail@plt+0xba14>
   1ccc0:	ldr	r2, [sp, #96]	; 0x60
   1ccc4:	ldr	r1, [sp, #76]	; 0x4c
   1ccc8:	ldr	r0, [sp, #476]	; 0x1dc
   1cccc:	add	r1, r2, r1
   1ccd0:	mvn	r2, #0
   1ccd4:	add	r1, r0, r1, lsl #3
   1ccd8:	str	r2, [r3]
   1ccdc:	str	r2, [r3, #4]
   1cce0:	add	r3, r3, #8
   1cce4:	cmp	r3, r1
   1cce8:	bne	1ccd8 <__assert_fail@plt+0xba00>
   1ccec:	ldr	r3, [sp, #28]
   1ccf0:	ldr	r3, [r3, #132]	; 0x84
   1ccf4:	cmp	r3, #0
   1ccf8:	beq	1c964 <__assert_fail@plt+0xb68c>
   1ccfc:	mov	r2, #0
   1cd00:	ldr	lr, [sp, #76]	; 0x4c
   1cd04:	b	1cd44 <__assert_fail@plt+0xba6c>
   1cd08:	ldr	r0, [r3]
   1cd0c:	cmp	r2, r0
   1cd10:	add	r4, r0, #1
   1cd14:	mov	r2, r1
   1cd18:	beq	1cd3c <__assert_fail@plt+0xba64>
   1cd1c:	ldr	r1, [sp, #476]	; 0x1dc
   1cd20:	ldr	r0, [sp, #476]	; 0x1dc
   1cd24:	ldr	r1, [r1, r4, lsl #3]
   1cd28:	str	r1, [ip, #8]
   1cd2c:	ldr	r1, [r3]
   1cd30:	add	r1, r0, r1, lsl #3
   1cd34:	ldr	r1, [r1, #12]
   1cd38:	str	r1, [ip, #12]
   1cd3c:	add	r3, r3, #4
   1cd40:	add	ip, ip, #8
   1cd44:	add	r1, r2, #1
   1cd48:	cmp	r1, lr
   1cd4c:	bne	1cd08 <__assert_fail@plt+0xba30>
   1cd50:	b	1c964 <__assert_fail@plt+0xb68c>
   1cd54:	ldr	r3, [sp, #52]	; 0x34
   1cd58:	cmp	r3, r6
   1cd5c:	ble	1c1b8 <__assert_fail@plt+0xaee0>
   1cd60:	ldr	r3, [sp, #56]	; 0x38
   1cd64:	ldr	r1, [sp, #88]	; 0x58
   1cd68:	ldrb	r2, [r3, r6]
   1cd6c:	add	r3, r3, r6
   1cd70:	ldrb	r2, [r1, r2]
   1cd74:	ldr	r1, [sp, #60]	; 0x3c
   1cd78:	ldrb	r2, [r1, r2]
   1cd7c:	cmp	r2, #0
   1cd80:	bne	1c200 <__assert_fail@plt+0xaf28>
   1cd84:	add	r2, r6, #1
   1cd88:	ldr	ip, [sp, #60]	; 0x3c
   1cd8c:	ldr	lr, [sp, #88]	; 0x58
   1cd90:	ldr	r0, [sp, #52]	; 0x34
   1cd94:	b	1cdb0 <__assert_fail@plt+0xbad8>
   1cd98:	ldrb	r1, [r3, #1]!
   1cd9c:	add	r2, r2, #1
   1cda0:	ldrb	r1, [lr, r1]
   1cda4:	ldrb	r1, [ip, r1]
   1cda8:	cmp	r1, #0
   1cdac:	bne	1d044 <__assert_fail@plt+0xbd6c>
   1cdb0:	cmp	r0, r2
   1cdb4:	mov	r6, r2
   1cdb8:	bne	1cd98 <__assert_fail@plt+0xbac0>
   1cdbc:	b	1c1b0 <__assert_fail@plt+0xaed8>
   1cdc0:	ldr	r3, [sp, #68]	; 0x44
   1cdc4:	cmp	r3, r6
   1cdc8:	bgt	1c3fc <__assert_fail@plt+0xb124>
   1cdcc:	ldr	ip, [sp, #116]	; 0x74
   1cdd0:	ldr	r1, [sp, #108]	; 0x6c
   1cdd4:	mov	r0, ip
   1cdd8:	ldr	r4, [sp, #60]	; 0x3c
   1cddc:	ldr	lr, [sp, #88]	; 0x58
   1cde0:	ldr	r7, [sp, #68]	; 0x44
   1cde4:	ldr	r8, [sp, #56]	; 0x38
   1cde8:	ldr	r5, [sp, #72]	; 0x48
   1cdec:	b	1ce00 <__assert_fail@plt+0xbb28>
   1cdf0:	cmp	r7, r6
   1cdf4:	mov	r0, r6
   1cdf8:	mov	r1, #1
   1cdfc:	bgt	1d04c <__assert_fail@plt+0xbd74>
   1ce00:	cmp	r5, r6
   1ce04:	mov	r3, #0
   1ce08:	ldrbgt	r3, [r8, r6]
   1ce0c:	cmp	lr, #0
   1ce10:	sub	r6, r6, #1
   1ce14:	mov	r2, r3
   1ce18:	ldrbne	r2, [lr, r3]
   1ce1c:	ldrb	r3, [r4, r2]
   1ce20:	cmp	r3, #0
   1ce24:	beq	1cdf0 <__assert_fail@plt+0xbb18>
   1ce28:	cmp	r1, #0
   1ce2c:	movne	ip, r0
   1ce30:	strne	r0, [sp, #116]	; 0x74
   1ce34:	mov	r6, ip
   1ce38:	b	1c200 <__assert_fail@plt+0xaf28>
   1ce3c:	ldr	r3, [sp, #28]
   1ce40:	ldr	r4, [r3, #76]	; 0x4c
   1ce44:	cmp	r4, #0
   1ce48:	bne	1c51c <__assert_fail@plt+0xb244>
   1ce4c:	b	1ca18 <__assert_fail@plt+0xb740>
   1ce50:	ldr	r1, [sp, #72]	; 0x48
   1ce54:	b	1bf6c <__assert_fail@plt+0xac94>
   1ce58:	cmp	sl, #0
   1ce5c:	beq	1d5ac <__assert_fail@plt+0xc2d4>
   1ce60:	ldr	r3, [sp, #16]
   1ce64:	str	r9, [sp, #4]
   1ce68:	str	r3, [sp]
   1ce6c:	mov	r2, r8
   1ce70:	ldr	r3, [sp, #476]	; 0x1dc
   1ce74:	ldr	r1, [sp, #40]	; 0x28
   1ce78:	mov	r0, sl
   1ce7c:	bl	16240 <__assert_fail@plt+0x4f68>
   1ce80:	subs	fp, r0, #0
   1ce84:	bge	1d2c0 <__assert_fail@plt+0xbfe8>
   1ce88:	ldr	r0, [sp, #132]	; 0x84
   1ce8c:	ldr	r8, [sp, #12]
   1ce90:	bl	23198 <__assert_fail@plt+0x11ec0>
   1ce94:	ldr	r0, [sp, #292]	; 0x124
   1ce98:	cmp	r0, r8
   1ce9c:	beq	1cea4 <__assert_fail@plt+0xbbcc>
   1cea0:	bl	23198 <__assert_fail@plt+0x11ec0>
   1cea4:	mov	r3, #16
   1cea8:	mov	r2, #0
   1ceac:	str	r3, [sp, #288]	; 0x120
   1ceb0:	mov	r0, sl
   1ceb4:	mov	r3, #1
   1ceb8:	str	r8, [sp, #292]	; 0x124
   1cebc:	str	r2, [sp, #284]	; 0x11c
   1cec0:	str	r3, [sp, #48]	; 0x30
   1cec4:	bl	15d70 <__assert_fail@plt+0x4a98>
   1cec8:	ldr	r7, [sp, #248]	; 0xf8
   1cecc:	b	1c964 <__assert_fail@plt+0xb68c>
   1ced0:	ldr	r1, [sp, #172]	; 0xac
   1ced4:	ldr	r4, [sp, #60]	; 0x3c
   1ced8:	ldr	r5, [sp, #92]	; 0x5c
   1cedc:	ldr	r7, [sp, #68]	; 0x44
   1cee0:	ldr	r8, [sp, #52]	; 0x34
   1cee4:	b	1cf2c <__assert_fail@plt+0xbc54>
   1cee8:	ldr	r0, [sp, #176]	; 0xb0
   1ceec:	mov	r2, #0
   1cef0:	cmp	r3, r0
   1cef4:	ldrcc	r2, [sp, #152]	; 0x98
   1cef8:	ldrbcc	r2, [r2, r3]
   1cefc:	ldrb	r3, [r4, r2]
   1cf00:	cmp	r3, #0
   1cf04:	bne	1c200 <__assert_fail@plt+0xaf28>
   1cf08:	add	r6, r6, r5
   1cf0c:	cmp	r8, r6
   1cf10:	movge	r3, #0
   1cf14:	movlt	r3, #1
   1cf18:	cmp	r7, r6
   1cf1c:	orrgt	r3, r3, #1
   1cf20:	cmp	r3, #0
   1cf24:	str	r6, [sp, #116]	; 0x74
   1cf28:	bne	1c3fc <__assert_fail@plt+0xb124>
   1cf2c:	ldr	r2, [sp, #180]	; 0xb4
   1cf30:	sub	r3, r6, r1
   1cf34:	cmp	r3, r2
   1cf38:	bcc	1cee8 <__assert_fail@plt+0xbc10>
   1cf3c:	ldr	r2, [sp, #480]	; 0x1e0
   1cf40:	mov	r1, r6
   1cf44:	add	r0, sp, #148	; 0x94
   1cf48:	bl	18c70 <__assert_fail@plt+0x7998>
   1cf4c:	cmp	r0, #0
   1cf50:	bne	1d1b4 <__assert_fail@plt+0xbedc>
   1cf54:	ldr	r1, [sp, #172]	; 0xac
   1cf58:	sub	r3, r6, r1
   1cf5c:	b	1cee8 <__assert_fail@plt+0xbc10>
   1cf60:	ldr	r3, [sp, #12]
   1cf64:	ldr	r2, [sp, #236]	; 0xec
   1cf68:	sub	r1, r3, #1
   1cf6c:	add	r0, sp, #148	; 0x94
   1cf70:	bl	18b84 <__assert_fail@plt+0x78ac>
   1cf74:	tst	r0, #1
   1cf78:	beq	1d01c <__assert_fail@plt+0xbd44>
   1cf7c:	ldr	fp, [r4, #40]	; 0x28
   1cf80:	b	1c274 <__assert_fail@plt+0xaf9c>
   1cf84:	add	r0, sp, #148	; 0x94
   1cf88:	bl	15ccc <__assert_fail@plt+0x49f4>
   1cf8c:	ldr	r0, [sp, #280]	; 0x118
   1cf90:	bl	23198 <__assert_fail@plt+0x11ec0>
   1cf94:	ldr	r0, [sp, #264]	; 0x108
   1cf98:	bl	23198 <__assert_fail@plt+0x11ec0>
   1cf9c:	b	1c97c <__assert_fail@plt+0xb6a4>
   1cfa0:	beq	feac7a50 <optarg@@GLIBC_2.4+0xfea92878>
   1cfa4:	andeq	pc, r3, r0, lsl #30
   1cfa8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1cfac:	mov	r0, r5
   1cfb0:	bl	23198 <__assert_fail@plt+0x11ec0>
   1cfb4:	mov	r0, r6
   1cfb8:	bl	23198 <__assert_fail@plt+0x11ec0>
   1cfbc:	add	r0, sp, #148	; 0x94
   1cfc0:	bl	15ccc <__assert_fail@plt+0x49f4>
   1cfc4:	ldr	r6, [sp, #116]	; 0x74
   1cfc8:	b	1c3cc <__assert_fail@plt+0xb0f4>
   1cfcc:	ldr	r3, [sp, #28]
   1cfd0:	ldrb	r3, [r3, #88]	; 0x58
   1cfd4:	tst	r3, #2
   1cfd8:	bne	1c008 <__assert_fail@plt+0xad30>
   1cfdc:	b	1c02c <__assert_fail@plt+0xad54>
   1cfe0:	mov	r1, fp
   1cfe4:	ldr	r0, [sp, #232]	; 0xe8
   1cfe8:	bl	180f0 <__assert_fail@plt+0x6e18>
   1cfec:	cmp	r0, #0
   1cff0:	bne	1c314 <__assert_fail@plt+0xb03c>
   1cff4:	ldr	r7, [sp, #248]	; 0xf8
   1cff8:	mov	r3, #12
   1cffc:	cmp	r7, #0
   1d000:	str	r3, [sp, #124]	; 0x7c
   1d004:	bne	1c8fc <__assert_fail@plt+0xb624>
   1d008:	b	1c994 <__assert_fail@plt+0xb6bc>
   1d00c:	ldr	r3, [sp, #104]	; 0x68
   1d010:	str	r3, [sp, #16]
   1d014:	ldrb	r3, [fp, #52]	; 0x34
   1d018:	b	1c2a0 <__assert_fail@plt+0xafc8>
   1d01c:	cmp	r0, #0
   1d020:	beq	1c274 <__assert_fail@plt+0xaf9c>
   1d024:	and	r3, r0, #6
   1d028:	cmp	r3, #6
   1d02c:	ldreq	fp, [r4, #48]	; 0x30
   1d030:	beq	1c274 <__assert_fail@plt+0xaf9c>
   1d034:	tst	r0, #2
   1d038:	beq	1c934 <__assert_fail@plt+0xb65c>
   1d03c:	ldr	fp, [r4, #44]	; 0x2c
   1d040:	b	1c274 <__assert_fail@plt+0xaf9c>
   1d044:	str	r6, [sp, #116]	; 0x74
   1d048:	b	1c200 <__assert_fail@plt+0xaf28>
   1d04c:	str	r6, [sp, #116]	; 0x74
   1d050:	ldr	r7, [sp, #248]	; 0xf8
   1d054:	str	r1, [sp, #48]	; 0x30
   1d058:	b	1c964 <__assert_fail@plt+0xb68c>
   1d05c:	ldrsb	r3, [fp, #52]	; 0x34
   1d060:	cmp	r3, #0
   1d064:	blt	1d154 <__assert_fail@plt+0xbe7c>
   1d068:	ldr	r3, [sp, #40]	; 0x28
   1d06c:	cmp	r3, #0
   1d070:	ldr	r3, [sp, #12]
   1d074:	str	r3, [sp, #20]
   1d078:	movne	r3, #1
   1d07c:	strne	r3, [sp, #36]	; 0x24
   1d080:	bne	1c2b8 <__assert_fail@plt+0xafe0>
   1d084:	b	1c4ac <__assert_fail@plt+0xb1d4>
   1d088:	ldr	r7, [sp, #248]	; 0xf8
   1d08c:	b	1c994 <__assert_fail@plt+0xb6bc>
   1d090:	mov	r3, #8
   1d094:	b	1c0cc <__assert_fail@plt+0xadf4>
   1d098:	add	r4, fp, #8
   1d09c:	add	r5, fp, #12
   1d0a0:	mov	r1, r4
   1d0a4:	mov	r2, r5
   1d0a8:	mov	r3, #0
   1d0ac:	add	r0, sp, #148	; 0x94
   1d0b0:	bl	19654 <__assert_fail@plt+0x837c>
   1d0b4:	cmp	r0, #0
   1d0b8:	str	r0, [sp, #124]	; 0x7c
   1d0bc:	bne	1d170 <__assert_fail@plt+0xbe98>
   1d0c0:	ldrb	r3, [fp, #52]	; 0x34
   1d0c4:	tst	r3, #64	; 0x40
   1d0c8:	bne	1d1bc <__assert_fail@plt+0xbee4>
   1d0cc:	ldr	r2, [sp, #108]	; 0x6c
   1d0d0:	str	r2, [sp, #16]
   1d0d4:	b	1c2a0 <__assert_fail@plt+0xafc8>
   1d0d8:	mov	r0, r5
   1d0dc:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d0e0:	mov	r0, r6
   1d0e4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d0e8:	mov	r3, #12
   1d0ec:	str	r3, [sp, #48]	; 0x30
   1d0f0:	ldr	r7, [sp, #248]	; 0xf8
   1d0f4:	b	1c964 <__assert_fail@plt+0xb68c>
   1d0f8:	mov	r7, fp
   1d0fc:	ldr	fp, [sp, #12]
   1d100:	mov	r3, r7
   1d104:	mov	r2, r6
   1d108:	mov	r1, r5
   1d10c:	mov	r0, fp
   1d110:	str	r4, [sp, #20]
   1d114:	bl	17568 <__assert_fail@plt+0x6290>
   1d118:	mov	r8, r0
   1d11c:	mov	r0, r6
   1d120:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d124:	cmp	r8, #0
   1d128:	beq	1c9ec <__assert_fail@plt+0xb714>
   1d12c:	mov	r6, #0
   1d130:	mov	r0, r5
   1d134:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d138:	mov	r0, r6
   1d13c:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d140:	cmp	r8, #1
   1d144:	beq	1c3c0 <__assert_fail@plt+0xb0e8>
   1d148:	str	r8, [sp, #48]	; 0x30
   1d14c:	ldr	r7, [sp, #248]	; 0xf8
   1d150:	b	1c964 <__assert_fail@plt+0xb68c>
   1d154:	ldr	r2, [sp, #12]
   1d158:	mov	r1, fp
   1d15c:	add	r0, sp, #148	; 0x94
   1d160:	bl	19574 <__assert_fail@plt+0x829c>
   1d164:	cmp	r0, #0
   1d168:	beq	1c2a8 <__assert_fail@plt+0xafd0>
   1d16c:	b	1d068 <__assert_fail@plt+0xbd90>
   1d170:	str	r0, [sp, #20]
   1d174:	b	1c4ac <__assert_fail@plt+0xb1d4>
   1d178:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d17c:	mov	r0, r5
   1d180:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d184:	mov	r3, #12
   1d188:	str	r3, [sp, #48]	; 0x30
   1d18c:	ldr	r7, [sp, #248]	; 0xf8
   1d190:	b	1c964 <__assert_fail@plt+0xb68c>
   1d194:	cmp	r0, #0
   1d198:	mov	r4, r0
   1d19c:	bne	1c34c <__assert_fail@plt+0xb074>
   1d1a0:	b	1c48c <__assert_fail@plt+0xb1b4>
   1d1a4:	mov	r4, r0
   1d1a8:	b	1c34c <__assert_fail@plt+0xb074>
   1d1ac:	mov	r8, r7
   1d1b0:	b	1d130 <__assert_fail@plt+0xbe58>
   1d1b4:	str	r0, [sp, #48]	; 0x30
   1d1b8:	b	1cec8 <__assert_fail@plt+0xbbf0>
   1d1bc:	mov	r2, r5
   1d1c0:	mov	r1, r4
   1d1c4:	add	r0, sp, #148	; 0x94
   1d1c8:	bl	1b144 <__assert_fail@plt+0x9e6c>
   1d1cc:	cmp	r0, #0
   1d1d0:	str	r0, [sp, #124]	; 0x7c
   1d1d4:	bne	1d170 <__assert_fail@plt+0xbe98>
   1d1d8:	ldrb	r3, [fp, #52]	; 0x34
   1d1dc:	b	1d0cc <__assert_fail@plt+0xbdf4>
   1d1e0:	ldr	r3, [sp, #16]
   1d1e4:	str	r9, [sp, #4]
   1d1e8:	str	r3, [sp]
   1d1ec:	mov	r2, r8
   1d1f0:	ldr	r3, [sp, #476]	; 0x1dc
   1d1f4:	ldr	r1, [sp, #40]	; 0x28
   1d1f8:	mov	r0, sl
   1d1fc:	bl	16240 <__assert_fail@plt+0x4f68>
   1d200:	subs	fp, r0, #0
   1d204:	blt	1cc10 <__assert_fail@plt+0xb938>
   1d208:	mov	r7, fp
   1d20c:	lsl	r6, fp, #3
   1d210:	ldr	r5, [sp, #232]	; 0xe8
   1d214:	ldr	r0, [r5]
   1d218:	add	r1, r0, r6
   1d21c:	ldrb	r3, [r1, #4]
   1d220:	tst	r3, #8
   1d224:	beq	1d2c8 <__assert_fail@plt+0xbff0>
   1d228:	ldr	ip, [sp, #120]	; 0x78
   1d22c:	ldr	r3, [sp, #248]	; 0xf8
   1d230:	mov	r2, fp
   1d234:	add	r1, sp, #132	; 0x84
   1d238:	ldr	r0, [sp, #128]	; 0x80
   1d23c:	ldr	r4, [r3, ip, lsl #2]
   1d240:	bl	16364 <__assert_fail@plt+0x508c>
   1d244:	ldr	r5, [r5, #20]
   1d248:	cmp	r0, #0
   1d24c:	beq	1d60c <__assert_fail@plt+0xc334>
   1d250:	add	fp, fp, fp, lsl #1
   1d254:	add	r2, r5, fp, lsl #2
   1d258:	ldr	r7, [r2, #4]
   1d25c:	cmp	r7, #0
   1d260:	ble	1ce60 <__assert_fail@plt+0xbb88>
   1d264:	ldr	r3, [r4, #8]
   1d268:	ldr	r5, [r2, #8]
   1d26c:	str	r3, [sp, #32]
   1d270:	sub	r5, r5, #4
   1d274:	add	r3, r4, #12
   1d278:	mvn	fp, #0
   1d27c:	mov	r4, #0
   1d280:	str	r3, [sp, #36]	; 0x24
   1d284:	ldr	r6, [r5, #4]!
   1d288:	ldr	r1, [sp, #36]	; 0x24
   1d28c:	mov	r2, r6
   1d290:	ldr	r0, [sp, #32]
   1d294:	bl	16364 <__assert_fail@plt+0x508c>
   1d298:	add	r4, r4, #1
   1d29c:	cmp	r0, #0
   1d2a0:	beq	1d2b0 <__assert_fail@plt+0xbfd8>
   1d2a4:	cmn	fp, #1
   1d2a8:	bne	1d644 <__assert_fail@plt+0xc36c>
   1d2ac:	mov	fp, r6
   1d2b0:	cmp	r4, r7
   1d2b4:	bne	1d284 <__assert_fail@plt+0xbfac>
   1d2b8:	cmp	fp, #0
   1d2bc:	blt	1d704 <__assert_fail@plt+0xc42c>
   1d2c0:	ldr	r4, [sp, #120]	; 0x78
   1d2c4:	b	1cb7c <__assert_fail@plt+0xb8a4>
   1d2c8:	ldrb	r2, [r1, #6]
   1d2cc:	tst	r2, #16
   1d2d0:	bne	1d574 <__assert_fail@plt+0xc29c>
   1d2d4:	cmp	r3, #4
   1d2d8:	beq	1d4ec <__assert_fail@plt+0xc214>
   1d2dc:	ldr	r4, [sp, #120]	; 0x78
   1d2e0:	mov	r2, r4
   1d2e4:	add	r0, sp, #148	; 0x94
   1d2e8:	bl	19440 <__assert_fail@plt+0x8168>
   1d2ec:	cmp	r0, #0
   1d2f0:	beq	1ce60 <__assert_fail@plt+0xbb88>
   1d2f4:	ldr	r3, [r5, #12]
   1d2f8:	add	r4, r4, #1
   1d2fc:	ldr	fp, [r3, r7, lsl #2]
   1d300:	cmp	sl, #0
   1d304:	str	r4, [sp, #120]	; 0x78
   1d308:	beq	1d340 <__assert_fail@plt+0xc068>
   1d30c:	ldr	r3, [sp, #240]	; 0xf0
   1d310:	cmp	r4, r3
   1d314:	bgt	1ce60 <__assert_fail@plt+0xbb88>
   1d318:	ldr	r3, [sp, #248]	; 0xf8
   1d31c:	ldr	r3, [r3, r4, lsl #2]
   1d320:	cmp	r3, #0
   1d324:	beq	1ce60 <__assert_fail@plt+0xbb88>
   1d328:	mov	r2, fp
   1d32c:	add	r1, r3, #12
   1d330:	ldr	r0, [r3, #8]
   1d334:	bl	16364 <__assert_fail@plt+0x508c>
   1d338:	cmp	r0, #0
   1d33c:	beq	1ce60 <__assert_fail@plt+0xbb88>
   1d340:	mov	r3, #0
   1d344:	str	r3, [sp, #128]	; 0x80
   1d348:	b	1d2b8 <__assert_fail@plt+0xbfe0>
   1d34c:	cmp	r2, r5
   1d350:	moveq	r2, r9
   1d354:	ldrne	r2, [r8, r2, lsl #2]
   1d358:	str	r2, [r1, #-4]
   1d35c:	ldr	r0, [r3, #4]
   1d360:	cmp	r5, r0
   1d364:	moveq	r0, r9
   1d368:	ldrne	r0, [r8, r0, lsl #2]
   1d36c:	str	r0, [r3, #4]
   1d370:	b	1cc94 <__assert_fail@plt+0xb9bc>
   1d374:	ldr	r3, [sp, #244]	; 0xf4
   1d378:	cmp	fp, r3
   1d37c:	bne	1cbbc <__assert_fail@plt+0xb8e4>
   1d380:	cmp	sl, #0
   1d384:	beq	1cc10 <__assert_fail@plt+0xb938>
   1d388:	b	1cbdc <__assert_fail@plt+0xb904>
   1d38c:	ldr	r3, [sp, #44]	; 0x2c
   1d390:	add	r9, sp, #124	; 0x7c
   1d394:	mov	r1, #16
   1d398:	ldr	r3, [r3]
   1d39c:	add	r8, sp, #296	; 0x128
   1d3a0:	mov	r0, r3
   1d3a4:	str	r3, [sp, #24]
   1d3a8:	mov	r3, #0
   1d3ac:	mov	sl, r3
   1d3b0:	mov	r2, #2
   1d3b4:	str	r3, [sp, #284]	; 0x11c
   1d3b8:	str	r1, [sp, #288]	; 0x120
   1d3bc:	str	r8, [sp, #292]	; 0x124
   1d3c0:	str	r3, [sp, #136]	; 0x88
   1d3c4:	ldr	fp, [r0, #72]	; 0x48
   1d3c8:	str	r3, [sp, #144]	; 0x90
   1d3cc:	str	r3, [sp, #124]	; 0x7c
   1d3d0:	str	r2, [sp, #140]	; 0x8c
   1d3d4:	str	r3, [r9, #4]
   1d3d8:	str	r3, [r9, #8]
   1d3dc:	mov	r3, #8
   1d3e0:	mov	r2, r8
   1d3e4:	ldr	r1, [sp, #76]	; 0x4c
   1d3e8:	add	r0, sp, #284	; 0x11c
   1d3ec:	bl	230d0 <__assert_fail@plt+0x11df8>
   1d3f0:	cmp	r0, #0
   1d3f4:	bne	1cb30 <__assert_fail@plt+0xb858>
   1d3f8:	ldr	r0, [sp, #292]	; 0x124
   1d3fc:	cmp	r0, r8
   1d400:	beq	1d408 <__assert_fail@plt+0xc130>
   1d404:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d408:	mov	r3, #16
   1d40c:	mov	r2, #0
   1d410:	str	r3, [sp, #288]	; 0x120
   1d414:	mov	r0, sl
   1d418:	mov	r3, #12
   1d41c:	str	r8, [sp, #292]	; 0x124
   1d420:	str	r2, [sp, #284]	; 0x11c
   1d424:	str	r3, [sp, #48]	; 0x30
   1d428:	bl	15d70 <__assert_fail@plt+0x4a98>
   1d42c:	b	1cec8 <__assert_fail@plt+0xbbf0>
   1d430:	ldr	r2, [r1]
   1d434:	add	r2, r2, #1
   1d438:	cmp	r8, r2
   1d43c:	ble	1cbb4 <__assert_fail@plt+0xb8dc>
   1d440:	ldr	r3, [sp, #476]	; 0x1dc
   1d444:	ldr	r0, [r3, r2, lsl #3]
   1d448:	add	r3, r3, r2, lsl #3
   1d44c:	cmp	r4, r0
   1d450:	bgt	1d4b0 <__assert_fail@plt+0xc1d8>
   1d454:	ldrb	r1, [r1, #6]
   1d458:	tst	r1, #8
   1d45c:	beq	1d470 <__assert_fail@plt+0xc198>
   1d460:	ldr	r1, [sp, #16]
   1d464:	ldr	r2, [r1, r2, lsl #3]
   1d468:	cmn	r2, #1
   1d46c:	bne	1d4d4 <__assert_fail@plt+0xc1fc>
   1d470:	str	r4, [r3, #4]
   1d474:	ldr	r3, [sp, #476]	; 0x1dc
   1d478:	ldr	r3, [r3, #4]
   1d47c:	b	1cbb4 <__assert_fail@plt+0xb8dc>
   1d480:	ldr	r2, [r0, fp, lsl #3]
   1d484:	add	r2, r2, #1
   1d488:	cmp	r8, r2
   1d48c:	ble	1cbb4 <__assert_fail@plt+0xb8dc>
   1d490:	ldr	r1, [sp, #476]	; 0x1dc
   1d494:	ldr	r3, [sp, #476]	; 0x1dc
   1d498:	add	r3, r3, r2, lsl #3
   1d49c:	str	r4, [r1, r2, lsl #3]
   1d4a0:	mvn	r2, #0
   1d4a4:	str	r2, [r3, #4]
   1d4a8:	ldr	r3, [r1, #4]
   1d4ac:	b	1cbb4 <__assert_fail@plt+0xb8dc>
   1d4b0:	str	r4, [r3, #4]
   1d4b4:	ldr	r2, [sp, #20]
   1d4b8:	ldr	r1, [sp, #476]	; 0x1dc
   1d4bc:	ldr	r0, [sp, #16]
   1d4c0:	bl	11068 <memcpy@plt>
   1d4c4:	ldr	r3, [sp, #476]	; 0x1dc
   1d4c8:	ldr	r4, [sp, #120]	; 0x78
   1d4cc:	ldr	r3, [r3, #4]
   1d4d0:	b	1cbb4 <__assert_fail@plt+0xb8dc>
   1d4d4:	ldr	r2, [sp, #20]
   1d4d8:	ldr	r0, [sp, #476]	; 0x1dc
   1d4dc:	bl	11068 <memcpy@plt>
   1d4e0:	ldr	r3, [sp, #476]	; 0x1dc
   1d4e4:	ldr	r3, [r3, #4]
   1d4e8:	b	1cbb4 <__assert_fail@plt+0xb8dc>
   1d4ec:	ldr	r3, [r1]
   1d4f0:	add	r3, r3, #1
   1d4f4:	cmp	r8, r3
   1d4f8:	ble	1ce58 <__assert_fail@plt+0xbb80>
   1d4fc:	ldr	r2, [sp, #476]	; 0x1dc
   1d500:	ldr	r1, [sp, #476]	; 0x1dc
   1d504:	add	r2, r2, r3, lsl #3
   1d508:	cmp	sl, #0
   1d50c:	ldr	r0, [r1, r3, lsl #3]
   1d510:	ldr	r3, [r2, #4]
   1d514:	sub	r4, r3, r0
   1d518:	beq	1d5a4 <__assert_fail@plt+0xc2cc>
   1d51c:	cmn	r0, #1
   1d520:	beq	1ce60 <__assert_fail@plt+0xbb88>
   1d524:	cmn	r3, #1
   1d528:	beq	1ce60 <__assert_fail@plt+0xbb88>
   1d52c:	cmp	r4, #0
   1d530:	beq	1d5ac <__assert_fail@plt+0xc2d4>
   1d534:	ldr	r6, [sp, #120]	; 0x78
   1d538:	ldr	r3, [sp, #176]	; 0xb0
   1d53c:	ldr	r1, [sp, #152]	; 0x98
   1d540:	sub	r3, r3, r6
   1d544:	cmp	r4, r3
   1d548:	bgt	1ce60 <__assert_fail@plt+0xbb88>
   1d54c:	add	r0, r1, r0
   1d550:	mov	r2, r4
   1d554:	add	r1, r1, r6
   1d558:	bl	110a4 <memcmp@plt>
   1d55c:	cmp	r0, #0
   1d560:	bne	1ce60 <__assert_fail@plt+0xbb88>
   1d564:	ldr	r3, [r5, #12]
   1d568:	add	r4, r6, r4
   1d56c:	ldr	fp, [r3, fp, lsl #2]
   1d570:	b	1d300 <__assert_fail@plt+0xc028>
   1d574:	ldr	r3, [sp, #120]	; 0x78
   1d578:	mov	r2, fp
   1d57c:	str	r3, [sp]
   1d580:	add	r1, r5, #128	; 0x80
   1d584:	add	r3, sp, #148	; 0x94
   1d588:	bl	1a720 <__assert_fail@plt+0x9448>
   1d58c:	subs	r4, r0, #0
   1d590:	bne	1d604 <__assert_fail@plt+0xc32c>
   1d594:	ldr	r1, [r5]
   1d598:	ldr	r4, [sp, #120]	; 0x78
   1d59c:	add	r1, r1, r6
   1d5a0:	b	1d2e0 <__assert_fail@plt+0xc008>
   1d5a4:	cmp	r4, #0
   1d5a8:	bne	1d604 <__assert_fail@plt+0xc32c>
   1d5ac:	mov	r1, fp
   1d5b0:	mov	r0, r9
   1d5b4:	bl	15dd4 <__assert_fail@plt+0x4afc>
   1d5b8:	cmp	r0, #0
   1d5bc:	beq	1d620 <__assert_fail@plt+0xc348>
   1d5c0:	add	fp, fp, fp, lsl #1
   1d5c4:	ldr	r3, [r5, #20]
   1d5c8:	ldr	r1, [sp, #248]	; 0xf8
   1d5cc:	add	r3, r3, fp, lsl #2
   1d5d0:	ldr	r4, [sp, #120]	; 0x78
   1d5d4:	ldr	r2, [r3, #8]
   1d5d8:	ldr	r3, [r1, r4, lsl #2]
   1d5dc:	ldr	fp, [r2]
   1d5e0:	add	r1, r3, #12
   1d5e4:	mov	r2, fp
   1d5e8:	ldr	r0, [r3, #8]
   1d5ec:	bl	16364 <__assert_fail@plt+0x508c>
   1d5f0:	cmp	r0, #0
   1d5f4:	bne	1d2b8 <__assert_fail@plt+0xbfe0>
   1d5f8:	ldr	r1, [r5]
   1d5fc:	add	r1, r1, r6
   1d600:	b	1d2e0 <__assert_fail@plt+0xc008>
   1d604:	ldr	r6, [sp, #120]	; 0x78
   1d608:	b	1d564 <__assert_fail@plt+0xc28c>
   1d60c:	mov	r1, fp
   1d610:	mov	r0, r9
   1d614:	bl	15dd4 <__assert_fail@plt+0x4afc>
   1d618:	cmp	r0, #0
   1d61c:	bne	1d250 <__assert_fail@plt+0xbf78>
   1d620:	ldr	r0, [sp, #132]	; 0x84
   1d624:	ldr	r8, [sp, #12]
   1d628:	bl	23198 <__assert_fail@plt+0x11ec0>
   1d62c:	b	1d3f8 <__assert_fail@plt+0xc120>
   1d630:	add	sl, sp, #136	; 0x88
   1d634:	b	1d3dc <__assert_fail@plt+0xc104>
   1d638:	mov	r3, #12
   1d63c:	str	r3, [sp, #48]	; 0x30
   1d640:	b	1cec8 <__assert_fail@plt+0xbbf0>
   1d644:	mov	r2, fp
   1d648:	add	r1, sp, #132	; 0x84
   1d64c:	ldr	r0, [sp, #128]	; 0x80
   1d650:	bl	16364 <__assert_fail@plt+0x508c>
   1d654:	cmp	r0, #0
   1d658:	bne	1d73c <__assert_fail@plt+0xc464>
   1d65c:	cmp	sl, #0
   1d660:	beq	1d2b8 <__assert_fail@plt+0xbfe0>
   1d664:	ldr	r4, [sl]
   1d668:	ldr	r3, [sl, #4]
   1d66c:	add	r1, r4, #1
   1d670:	cmp	r1, r3
   1d674:	str	r1, [sl]
   1d678:	ldr	r5, [sp, #120]	; 0x78
   1d67c:	beq	1d710 <__assert_fail@plt+0xc438>
   1d680:	ldr	r3, [sl, #8]
   1d684:	add	r2, r4, r4, lsl #1
   1d688:	ldr	r0, [sp, #44]	; 0x2c
   1d68c:	lsl	r4, r2, #3
   1d690:	str	r5, [r3, r2, lsl #3]
   1d694:	add	r5, r3, r4
   1d698:	str	r6, [r5, #4]
   1d69c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1d6a0:	ldr	r3, [sl, #8]
   1d6a4:	add	r3, r3, r4
   1d6a8:	str	r0, [r5, #8]
   1d6ac:	ldr	r0, [r3, #8]
   1d6b0:	cmp	r0, #0
   1d6b4:	beq	1d620 <__assert_fail@plt+0xc348>
   1d6b8:	ldr	r5, [sp, #20]
   1d6bc:	ldr	r1, [sp, #476]	; 0x1dc
   1d6c0:	mov	r2, r5
   1d6c4:	bl	11068 <memcpy@plt>
   1d6c8:	ldr	r3, [sl, #8]
   1d6cc:	mov	r2, r5
   1d6d0:	add	r3, r3, r4
   1d6d4:	ldr	r1, [sp, #16]
   1d6d8:	ldr	r0, [r3, #8]
   1d6dc:	add	r0, r0, r5
   1d6e0:	bl	11068 <memcpy@plt>
   1d6e4:	ldr	r0, [sl, #8]
   1d6e8:	mov	r1, r9
   1d6ec:	add	r0, r0, r4
   1d6f0:	add	r0, r0, #12
   1d6f4:	bl	16e70 <__assert_fail@plt+0x5b98>
   1d6f8:	cmp	r0, #0
   1d6fc:	beq	1d2b8 <__assert_fail@plt+0xbfe0>
   1d700:	b	1d620 <__assert_fail@plt+0xc348>
   1d704:	cmn	fp, #2
   1d708:	bne	1ce60 <__assert_fail@plt+0xbb88>
   1d70c:	b	1d620 <__assert_fail@plt+0xc348>
   1d710:	add	r1, r1, r1, lsl #1
   1d714:	ldr	r0, [sl, #8]
   1d718:	lsl	r1, r1, #4
   1d71c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1d720:	subs	r3, r0, #0
   1d724:	beq	1d620 <__assert_fail@plt+0xc348>
   1d728:	ldr	r2, [sl, #4]
   1d72c:	str	r3, [sl, #8]
   1d730:	lsl	r2, r2, #1
   1d734:	str	r2, [sl, #4]
   1d738:	b	1d684 <__assert_fail@plt+0xc3ac>
   1d73c:	mov	fp, r6
   1d740:	b	1d2b8 <__assert_fail@plt+0xbfe0>
   1d744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d748:	mov	fp, r2
   1d74c:	ldr	r2, [r0, #100]	; 0x64
   1d750:	sub	sp, sp, #100	; 0x64
   1d754:	mov	ip, #0
   1d758:	ldr	r2, [r2, fp, lsl #2]
   1d75c:	mov	r4, r3
   1d760:	cmp	r2, ip
   1d764:	lsl	r3, fp, #2
   1d768:	str	r3, [sp, #40]	; 0x28
   1d76c:	str	r0, [sp, #32]
   1d770:	mov	r9, r1
   1d774:	ldr	r5, [r0, #84]	; 0x54
   1d778:	str	ip, [sp, #64]	; 0x40
   1d77c:	ldr	r3, [r4, #4]
   1d780:	beq	1dbf4 <__assert_fail@plt+0xc91c>
   1d784:	add	r2, r2, #4
   1d788:	cmp	r3, ip
   1d78c:	str	r2, [sp, #24]
   1d790:	bne	1d7d0 <__assert_fail@plt+0xc4f8>
   1d794:	ldr	r3, [r9]
   1d798:	mov	r2, #0
   1d79c:	str	r2, [r3, fp, lsl #2]
   1d7a0:	ldr	r3, [sp, #24]
   1d7a4:	cmp	r3, #0
   1d7a8:	beq	1d930 <__assert_fail@plt+0xc658>
   1d7ac:	ldr	r3, [sp, #32]
   1d7b0:	ldr	r3, [r3, #100]	; 0x64
   1d7b4:	ldr	r3, [r3, fp, lsl #2]
   1d7b8:	ldrb	r3, [r3, #52]	; 0x34
   1d7bc:	ands	r3, r3, #64	; 0x40
   1d7c0:	bne	1d884 <__assert_fail@plt+0xc5ac>
   1d7c4:	mov	r0, r3
   1d7c8:	add	sp, sp, #100	; 0x64
   1d7cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7d0:	add	r0, sp, #96	; 0x60
   1d7d4:	mov	r2, r4
   1d7d8:	str	ip, [r0, #-28]!	; 0xffffffe4
   1d7dc:	mov	r1, r5
   1d7e0:	bl	17360 <__assert_fail@plt+0x6088>
   1d7e4:	ldr	r3, [sp, #68]	; 0x44
   1d7e8:	cmp	r3, #0
   1d7ec:	mov	r6, r0
   1d7f0:	bne	1d7c4 <__assert_fail@plt+0xc4ec>
   1d7f4:	ldr	r7, [r0, #28]
   1d7f8:	cmp	r7, #0
   1d7fc:	addne	r6, r0, #28
   1d800:	bne	1d940 <__assert_fail@plt+0xc668>
   1d804:	ldr	r0, [r4, #4]
   1d808:	str	r7, [r6, #32]
   1d80c:	str	r0, [r6, #28]
   1d810:	lsl	r0, r0, #2
   1d814:	bl	22fcc <__assert_fail@plt+0x11cf4>
   1d818:	add	r6, r6, #28
   1d81c:	cmp	r0, #0
   1d820:	str	r0, [r6, #8]
   1d824:	beq	1d874 <__assert_fail@plt+0xc59c>
   1d828:	ldr	r3, [r4, #4]
   1d82c:	str	r7, [sp, #68]	; 0x44
   1d830:	cmp	r3, #0
   1d834:	bgt	1d848 <__assert_fail@plt+0xc570>
   1d838:	b	1d940 <__assert_fail@plt+0xc668>
   1d83c:	ldr	r3, [r4, #4]
   1d840:	cmp	r7, r3
   1d844:	bge	1d940 <__assert_fail@plt+0xc668>
   1d848:	ldr	r3, [r4, #8]
   1d84c:	ldr	r1, [r5, #28]
   1d850:	mov	r0, r6
   1d854:	ldr	r3, [r3, r7, lsl #2]
   1d858:	add	r7, r7, #1
   1d85c:	add	r3, r3, r3, lsl #1
   1d860:	add	r1, r1, r3, lsl #2
   1d864:	bl	178e0 <__assert_fail@plt+0x6608>
   1d868:	cmp	r0, #0
   1d86c:	str	r0, [sp, #68]	; 0x44
   1d870:	beq	1d83c <__assert_fail@plt+0xc564>
   1d874:	mov	r3, #12
   1d878:	mov	r0, r3
   1d87c:	add	sp, sp, #100	; 0x64
   1d880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d884:	ldr	r3, [sp, #32]
   1d888:	ldr	ip, [r3, #108]	; 0x6c
   1d88c:	mov	r3, #0
   1d890:	mov	r0, r3
   1d894:	mov	r3, ip
   1d898:	cmp	r0, r3
   1d89c:	bge	1d8fc <__assert_fail@plt+0xc624>
   1d8a0:	add	r2, r0, r3
   1d8a4:	ldr	r1, [sp, #32]
   1d8a8:	add	r2, r2, r2, lsr #31
   1d8ac:	asr	r2, r2, #1
   1d8b0:	ldr	lr, [r1, #116]	; 0x74
   1d8b4:	add	r1, r2, r2, lsl #1
   1d8b8:	add	r1, lr, r1, lsl #3
   1d8bc:	ldr	r1, [r1, #4]
   1d8c0:	cmp	fp, r1
   1d8c4:	ble	1d8ec <__assert_fail@plt+0xc614>
   1d8c8:	b	1d994 <__assert_fail@plt+0xc6bc>
   1d8cc:	asr	r3, r3, #1
   1d8d0:	mov	r4, r3
   1d8d4:	add	r1, r3, r3, lsl #1
   1d8d8:	add	r1, lr, r1, lsl #3
   1d8dc:	ldr	r1, [r1, #4]
   1d8e0:	cmp	fp, r1
   1d8e4:	bgt	1d99c <__assert_fail@plt+0xc6c4>
   1d8e8:	mov	r2, r3
   1d8ec:	add	r3, r0, r2
   1d8f0:	cmp	r0, r2
   1d8f4:	add	r3, r3, r3, lsr #31
   1d8f8:	blt	1d8cc <__assert_fail@plt+0xc5f4>
   1d8fc:	str	r0, [sp, #44]	; 0x2c
   1d900:	ldr	r3, [sp, #44]	; 0x2c
   1d904:	cmp	ip, r3
   1d908:	ble	1d930 <__assert_fail@plt+0xc658>
   1d90c:	add	r2, r3, r3, lsl #1
   1d910:	ldr	r3, [sp, #32]
   1d914:	lsl	r2, r2, #3
   1d918:	str	r2, [sp, #56]	; 0x38
   1d91c:	ldr	r3, [r3, #116]	; 0x74
   1d920:	add	r3, r3, r2
   1d924:	ldr	r3, [r3, #4]
   1d928:	cmp	fp, r3
   1d92c:	beq	1d9a8 <__assert_fail@plt+0xc6d0>
   1d930:	mov	r3, #0
   1d934:	mov	r0, r3
   1d938:	add	sp, sp, #100	; 0x64
   1d93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d940:	mov	r2, r6
   1d944:	ldr	r1, [sp, #24]
   1d948:	mov	r0, r4
   1d94c:	bl	16844 <__assert_fail@plt+0x556c>
   1d950:	cmp	r0, #0
   1d954:	mov	r3, r0
   1d958:	str	r0, [sp, #64]	; 0x40
   1d95c:	bne	1d7c4 <__assert_fail@plt+0xc4ec>
   1d960:	ldr	r2, [r9, #20]
   1d964:	cmp	r2, #0
   1d968:	bne	1dc08 <__assert_fail@plt+0xc930>
   1d96c:	mov	r2, r4
   1d970:	mov	r1, r5
   1d974:	add	r0, sp, #64	; 0x40
   1d978:	ldr	r4, [r9]
   1d97c:	bl	17360 <__assert_fail@plt+0x6088>
   1d980:	ldr	r3, [sp, #64]	; 0x40
   1d984:	cmp	r3, #0
   1d988:	str	r0, [r4, fp, lsl #2]
   1d98c:	beq	1d7a0 <__assert_fail@plt+0xc4c8>
   1d990:	b	1d7c4 <__assert_fail@plt+0xc4ec>
   1d994:	mov	r4, r2
   1d998:	mov	r2, r3
   1d99c:	add	r0, r4, #1
   1d9a0:	mov	r3, r2
   1d9a4:	b	1d898 <__assert_fail@plt+0xc5c0>
   1d9a8:	ldr	r3, [sp, #44]	; 0x2c
   1d9ac:	cmn	r3, #1
   1d9b0:	beq	1d930 <__assert_fail@plt+0xc658>
   1d9b4:	ldr	r3, [sp, #24]
   1d9b8:	ldr	r2, [sp, #32]
   1d9bc:	ldr	r0, [r3, #4]
   1d9c0:	mov	r3, #0
   1d9c4:	cmp	r0, r3
   1d9c8:	str	r3, [sp, #68]	; 0x44
   1d9cc:	ldr	sl, [r2, #84]	; 0x54
   1d9d0:	ble	1d930 <__assert_fail@plt+0xc658>
   1d9d4:	str	r3, [sp, #16]
   1d9d8:	add	r3, r9, #24
   1d9dc:	str	r3, [sp, #48]	; 0x30
   1d9e0:	add	r3, r9, #20
   1d9e4:	str	r3, [sp, #52]	; 0x34
   1d9e8:	add	r3, fp, #1
   1d9ec:	str	r3, [sp, #60]	; 0x3c
   1d9f0:	b	1da10 <__assert_fail@plt+0xc738>
   1d9f4:	cmp	r3, #4
   1d9f8:	beq	1da4c <__assert_fail@plt+0xc774>
   1d9fc:	ldr	r3, [sp, #16]
   1da00:	add	r3, r3, #1
   1da04:	cmp	r3, r0
   1da08:	str	r3, [sp, #16]
   1da0c:	bge	1dec4 <__assert_fail@plt+0xcbec>
   1da10:	ldr	r3, [sp, #24]
   1da14:	ldr	ip, [sp, #16]
   1da18:	ldr	r2, [r9, #8]
   1da1c:	ldr	r1, [r3, #8]
   1da20:	ldr	r3, [sl]
   1da24:	ldr	r8, [r1, ip, lsl #2]
   1da28:	cmp	r8, r2
   1da2c:	add	r3, r3, r8, lsl #3
   1da30:	ldrb	r3, [r3, #4]
   1da34:	bne	1d9f4 <__assert_fail@plt+0xc71c>
   1da38:	ldr	r2, [r9, #12]
   1da3c:	cmp	fp, r2
   1da40:	beq	1d9fc <__assert_fail@plt+0xc724>
   1da44:	cmp	r3, #4
   1da48:	bne	1d9fc <__assert_fail@plt+0xc724>
   1da4c:	ldr	r3, [sp, #32]
   1da50:	ldr	r2, [sp, #56]	; 0x38
   1da54:	ldr	r6, [sp, #44]	; 0x2c
   1da58:	ldr	r4, [r3, #116]	; 0x74
   1da5c:	add	r3, r8, r8, lsl #1
   1da60:	add	r4, r4, r2
   1da64:	lsl	r3, r3, #2
   1da68:	str	r3, [sp, #36]	; 0x24
   1da6c:	lsl	r3, r8, #2
   1da70:	str	r3, [sp, #28]
   1da74:	mov	r7, r2
   1da78:	b	1da94 <__assert_fail@plt+0xc7bc>
   1da7c:	ldrb	r3, [r4, #20]
   1da80:	add	r6, r6, #1
   1da84:	add	r7, r7, #24
   1da88:	cmp	r3, #0
   1da8c:	add	r4, r4, #24
   1da90:	beq	1dbe8 <__assert_fail@plt+0xc910>
   1da94:	ldr	r3, [r4]
   1da98:	cmp	r8, r3
   1da9c:	bne	1da7c <__assert_fail@plt+0xc7a4>
   1daa0:	ldr	r3, [r4, #8]
   1daa4:	ldr	r5, [r4, #12]
   1daa8:	sub	r5, r5, r3
   1daac:	cmp	r5, #0
   1dab0:	add	r5, fp, r5
   1dab4:	ldreq	r3, [sl, #20]
   1dab8:	ldreq	r2, [sp, #36]	; 0x24
   1dabc:	ldrne	r2, [sp, #28]
   1dac0:	addeq	r3, r3, r2
   1dac4:	ldrne	r3, [sl, #12]
   1dac8:	ldreq	r3, [r3, #8]
   1dacc:	ldrne	r3, [r3, r2]
   1dad0:	ldr	r2, [r9, #12]
   1dad4:	ldreq	r3, [r3]
   1dad8:	cmp	r5, r2
   1dadc:	bgt	1da7c <__assert_fail@plt+0xc7a4>
   1dae0:	ldr	r2, [r9]
   1dae4:	ldr	r0, [r2, r5, lsl #2]
   1dae8:	cmp	r0, #0
   1daec:	beq	1da7c <__assert_fail@plt+0xc7a4>
   1daf0:	mov	r2, r3
   1daf4:	add	r1, r0, #12
   1daf8:	ldr	r0, [r0, #8]
   1dafc:	str	r3, [sp, #20]
   1db00:	bl	16364 <__assert_fail@plt+0x508c>
   1db04:	ldr	r3, [sp, #20]
   1db08:	cmp	r0, #0
   1db0c:	beq	1da7c <__assert_fail@plt+0xc7a4>
   1db10:	stmib	sp, {r3, r5}
   1db14:	str	fp, [sp]
   1db18:	mov	r3, r8
   1db1c:	ldr	r2, [sp, #48]	; 0x30
   1db20:	ldr	r1, [sp, #52]	; 0x34
   1db24:	ldr	r0, [sp, #32]
   1db28:	bl	16630 <__assert_fail@plt+0x5358>
   1db2c:	cmp	r0, #0
   1db30:	bne	1da7c <__assert_fail@plt+0xc7a4>
   1db34:	ldr	r3, [sp, #68]	; 0x44
   1db38:	cmp	r3, #0
   1db3c:	beq	1de4c <__assert_fail@plt+0xcb74>
   1db40:	mov	r1, r6
   1db44:	add	r0, sp, #84	; 0x54
   1db48:	str	r8, [sp, #76]	; 0x4c
   1db4c:	str	fp, [sp, #80]	; 0x50
   1db50:	bl	15dd4 <__assert_fail@plt+0x4afc>
   1db54:	cmp	r0, #0
   1db58:	beq	1ded8 <__assert_fail@plt+0xcc00>
   1db5c:	ldr	r3, [sp, #68]	; 0x44
   1db60:	ldr	r2, [sp, #40]	; 0x28
   1db64:	add	r1, sp, #68	; 0x44
   1db68:	ldr	r0, [sp, #32]
   1db6c:	ldr	r4, [r3, r2]
   1db70:	bl	1ba5c <__assert_fail@plt+0xa784>
   1db74:	cmp	r0, #0
   1db78:	bne	1de78 <__assert_fail@plt+0xcba0>
   1db7c:	ldr	r1, [r9, #4]
   1db80:	cmp	r1, #0
   1db84:	beq	1dba0 <__assert_fail@plt+0xc8c8>
   1db88:	ldr	r3, [sp, #60]	; 0x3c
   1db8c:	ldr	r2, [sp, #68]	; 0x44
   1db90:	mov	r0, sl
   1db94:	bl	17568 <__assert_fail@plt+0x6290>
   1db98:	cmp	r0, #0
   1db9c:	bne	1de78 <__assert_fail@plt+0xcba0>
   1dba0:	ldr	r3, [sp, #68]	; 0x44
   1dba4:	ldr	r1, [sp, #40]	; 0x28
   1dba8:	ldr	r5, [sp, #88]	; 0x58
   1dbac:	mov	r2, r6
   1dbb0:	str	r4, [r3, r1]
   1dbb4:	mov	r0, r5
   1dbb8:	add	r1, sp, #92	; 0x5c
   1dbbc:	bl	16364 <__assert_fail@plt+0x508c>
   1dbc0:	sub	r2, r0, #1
   1dbc4:	cmp	r5, r2
   1dbc8:	movgt	r3, #0
   1dbcc:	movle	r3, #1
   1dbd0:	orrs	r3, r3, r2, lsr #31
   1dbd4:	beq	1dea4 <__assert_fail@plt+0xcbcc>
   1dbd8:	ldr	r3, [sp, #32]
   1dbdc:	ldr	r4, [r3, #116]	; 0x74
   1dbe0:	add	r4, r4, r7
   1dbe4:	b	1da7c <__assert_fail@plt+0xc7a4>
   1dbe8:	ldr	r3, [sp, #24]
   1dbec:	ldr	r0, [r3, #4]
   1dbf0:	b	1d9fc <__assert_fail@plt+0xc724>
   1dbf4:	cmp	r3, #0
   1dbf8:	strne	r2, [sp, #24]
   1dbfc:	bne	1d96c <__assert_fail@plt+0xc694>
   1dc00:	str	r3, [sp, #24]
   1dc04:	b	1d794 <__assert_fail@plt+0xc4bc>
   1dc08:	ldr	r2, [sp, #32]
   1dc0c:	ldr	r2, [r2, #116]	; 0x74
   1dc10:	str	r2, [sp, #20]
   1dc14:	ble	1dcf8 <__assert_fail@plt+0xca20>
   1dc18:	mov	r8, r0
   1dc1c:	str	fp, [sp, #16]
   1dc20:	ldr	r3, [r9, #24]
   1dc24:	ldr	r2, [sp, #20]
   1dc28:	ldr	r0, [sp, #16]
   1dc2c:	ldr	r3, [r3, r8, lsl #2]
   1dc30:	add	r3, r3, r3, lsl #1
   1dc34:	add	r2, r2, r3, lsl #3
   1dc38:	ldr	r1, [r2, #8]
   1dc3c:	cmp	r0, r1
   1dc40:	ble	1dce4 <__assert_fail@plt+0xca0c>
   1dc44:	ldr	r1, [r2, #4]
   1dc48:	ldr	r0, [sp, #16]
   1dc4c:	cmp	r0, r1
   1dc50:	bgt	1dce4 <__assert_fail@plt+0xca0c>
   1dc54:	ldr	r1, [sp, #20]
   1dc58:	ldr	r2, [r2, #12]
   1dc5c:	ldr	r7, [r4, #4]
   1dc60:	ldr	r1, [r1, r3, lsl #3]
   1dc64:	ldr	r3, [r5]
   1dc68:	cmp	r0, r2
   1dc6c:	ldr	r6, [r3, r1, lsl #3]
   1dc70:	beq	1dd04 <__assert_fail@plt+0xca2c>
   1dc74:	cmp	r7, #0
   1dc78:	ble	1dce4 <__assert_fail@plt+0xca0c>
   1dc7c:	mov	sl, #0
   1dc80:	b	1dc94 <__assert_fail@plt+0xc9bc>
   1dc84:	add	sl, sl, #1
   1dc88:	cmp	sl, r7
   1dc8c:	bge	1dce4 <__assert_fail@plt+0xca0c>
   1dc90:	ldr	r3, [r5]
   1dc94:	ldr	r2, [r4, #8]
   1dc98:	ldr	r1, [r2, sl, lsl #2]
   1dc9c:	add	r2, r3, r1, lsl #3
   1dca0:	ldrb	r2, [r2, #4]
   1dca4:	sub	r2, r2, #8
   1dca8:	cmp	r2, #1
   1dcac:	bhi	1dc84 <__assert_fail@plt+0xc9ac>
   1dcb0:	ldr	r3, [r3, r1, lsl #3]
   1dcb4:	cmp	r6, r3
   1dcb8:	bne	1dc84 <__assert_fail@plt+0xc9ac>
   1dcbc:	ldr	r3, [sp, #24]
   1dcc0:	mov	r2, r4
   1dcc4:	mov	r0, r5
   1dcc8:	bl	176bc <__assert_fail@plt+0x63e4>
   1dccc:	cmp	r0, #0
   1dcd0:	bne	1deec <__assert_fail@plt+0xcc14>
   1dcd4:	ldr	r7, [r4, #4]
   1dcd8:	add	sl, sl, #1
   1dcdc:	cmp	sl, r7
   1dce0:	blt	1dc90 <__assert_fail@plt+0xc9b8>
   1dce4:	ldr	r3, [r9, #20]
   1dce8:	add	r8, r8, #1
   1dcec:	cmp	r8, r3
   1dcf0:	blt	1dc20 <__assert_fail@plt+0xc948>
   1dcf4:	ldr	fp, [sp, #16]
   1dcf8:	mov	r3, #0
   1dcfc:	str	r3, [sp, #64]	; 0x40
   1dd00:	b	1d96c <__assert_fail@plt+0xc694>
   1dd04:	cmp	r7, #0
   1dd08:	ble	1dce4 <__assert_fail@plt+0xca0c>
   1dd0c:	ldr	ip, [r4, #8]
   1dd10:	mvn	r2, #0
   1dd14:	mov	fp, r2
   1dd18:	add	sl, ip, r7, lsl #2
   1dd1c:	mov	r2, ip
   1dd20:	str	ip, [sp, #28]
   1dd24:	mov	ip, fp
   1dd28:	b	1dd48 <__assert_fail@plt+0xca70>
   1dd2c:	cmp	r0, #9
   1dd30:	bne	1dd40 <__assert_fail@plt+0xca68>
   1dd34:	ldr	r0, [lr]
   1dd38:	cmp	r6, r0
   1dd3c:	moveq	fp, r1
   1dd40:	cmp	sl, r2
   1dd44:	beq	1dd70 <__assert_fail@plt+0xca98>
   1dd48:	ldr	r1, [r2], #4
   1dd4c:	add	lr, r3, r1, lsl #3
   1dd50:	ldrb	r0, [lr, #4]
   1dd54:	cmp	r0, #8
   1dd58:	bne	1dd2c <__assert_fail@plt+0xca54>
   1dd5c:	ldr	r0, [r3, r1, lsl #3]
   1dd60:	cmp	r6, r0
   1dd64:	moveq	ip, r1
   1dd68:	cmp	sl, r2
   1dd6c:	bne	1dd48 <__assert_fail@plt+0xca70>
   1dd70:	mov	r3, ip
   1dd74:	cmp	r3, #0
   1dd78:	mov	r6, fp
   1dd7c:	ldr	ip, [sp, #28]
   1dd80:	blt	1dee0 <__assert_fail@plt+0xcc08>
   1dd84:	mov	r1, r3
   1dd88:	mov	r2, r4
   1dd8c:	ldr	r3, [sp, #24]
   1dd90:	mov	r0, r5
   1dd94:	bl	176bc <__assert_fail@plt+0x63e4>
   1dd98:	cmp	r0, #0
   1dd9c:	bne	1deec <__assert_fail@plt+0xcc14>
   1dda0:	cmp	fp, #0
   1dda4:	blt	1dce4 <__assert_fail@plt+0xca0c>
   1dda8:	ldr	r7, [r4, #4]
   1ddac:	cmp	r7, #0
   1ddb0:	ble	1dce4 <__assert_fail@plt+0xca0c>
   1ddb4:	ldr	ip, [r4, #8]
   1ddb8:	mov	sl, #0
   1ddbc:	str	r8, [sp, #28]
   1ddc0:	mov	fp, r6
   1ddc4:	b	1ddd8 <__assert_fail@plt+0xcb00>
   1ddc8:	add	sl, sl, #1
   1ddcc:	cmp	sl, r7
   1ddd0:	bge	1debc <__assert_fail@plt+0xcbe4>
   1ddd4:	ldr	ip, [r4, #8]
   1ddd8:	ldr	r8, [ip, sl, lsl #2]
   1dddc:	ldr	r0, [r5, #28]
   1dde0:	mov	r2, fp
   1dde4:	add	r6, r8, r8, lsl #1
   1dde8:	lsl	r6, r6, #2
   1ddec:	add	r0, r0, r6
   1ddf0:	add	r1, r0, #8
   1ddf4:	ldr	r0, [r0, #4]
   1ddf8:	bl	16364 <__assert_fail@plt+0x508c>
   1ddfc:	mov	r2, fp
   1de00:	cmp	r0, #0
   1de04:	bne	1ddc8 <__assert_fail@plt+0xcaf0>
   1de08:	ldr	r1, [r5, #24]
   1de0c:	add	r6, r1, r6
   1de10:	add	r1, r6, #8
   1de14:	ldr	r0, [r6, #4]
   1de18:	bl	16364 <__assert_fail@plt+0x508c>
   1de1c:	cmp	r0, #0
   1de20:	bne	1ddc8 <__assert_fail@plt+0xcaf0>
   1de24:	mov	r1, r8
   1de28:	ldr	r3, [sp, #24]
   1de2c:	mov	r2, r4
   1de30:	mov	r0, r5
   1de34:	bl	176bc <__assert_fail@plt+0x63e4>
   1de38:	sub	sl, sl, #1
   1de3c:	cmp	r0, #0
   1de40:	bne	1deec <__assert_fail@plt+0xcc14>
   1de44:	ldr	r7, [r4, #4]
   1de48:	b	1ddc8 <__assert_fail@plt+0xcaf0>
   1de4c:	mov	ip, r9
   1de50:	add	lr, sp, #68	; 0x44
   1de54:	ldm	ip!, {r0, r1, r2, r3}
   1de58:	stmia	lr!, {r0, r1, r2, r3}
   1de5c:	ldm	ip, {r0, r1, r2}
   1de60:	stm	lr, {r0, r1, r2}
   1de64:	mov	r1, ip
   1de68:	add	r0, sp, #84	; 0x54
   1de6c:	bl	16e70 <__assert_fail@plt+0x5b98>
   1de70:	cmp	r0, #0
   1de74:	beq	1db40 <__assert_fail@plt+0xc868>
   1de78:	mov	r3, r0
   1de7c:	ldr	r2, [sp, #68]	; 0x44
   1de80:	cmp	r2, #0
   1de84:	beq	1d7c4 <__assert_fail@plt+0xc4ec>
   1de88:	ldr	r0, [sp, #92]	; 0x5c
   1de8c:	str	r3, [sp, #16]
   1de90:	bl	23198 <__assert_fail@plt+0x11ec0>
   1de94:	ldr	r3, [sp, #16]
   1de98:	mov	r0, r3
   1de9c:	add	sp, sp, #100	; 0x64
   1dea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dea4:	add	r0, sp, #96	; 0x60
   1dea8:	sub	r5, r5, #1
   1deac:	str	r5, [r0, #-8]!
   1deb0:	add	r1, sp, #92	; 0x5c
   1deb4:	bl	164f4 <__assert_fail@plt+0x521c>
   1deb8:	b	1dbd8 <__assert_fail@plt+0xc900>
   1debc:	ldr	r8, [sp, #28]
   1dec0:	b	1dce4 <__assert_fail@plt+0xca0c>
   1dec4:	ldr	r3, [sp, #68]	; 0x44
   1dec8:	cmp	r3, #0
   1decc:	movne	r3, #0
   1ded0:	bne	1de88 <__assert_fail@plt+0xcbb0>
   1ded4:	b	1d930 <__assert_fail@plt+0xc658>
   1ded8:	mov	r3, #12
   1dedc:	b	1de7c <__assert_fail@plt+0xcba4>
   1dee0:	cmp	fp, #0
   1dee4:	bge	1ddb8 <__assert_fail@plt+0xcae0>
   1dee8:	b	1dce4 <__assert_fail@plt+0xca0c>
   1deec:	mov	r3, r0
   1def0:	b	1d7c4 <__assert_fail@plt+0xc4ec>
   1def4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1def8:	sub	sp, sp, #8
   1defc:	ldr	r6, [r1, #40]	; 0x28
   1df00:	ldr	r3, [r1, #56]	; 0x38
   1df04:	cmp	r3, r6
   1df08:	ble	1e17c <__assert_fail@plt+0xcea4>
   1df0c:	ldr	sl, [r1, #4]
   1df10:	ldrb	r3, [r0, #6]
   1df14:	mov	r8, r2
   1df18:	ldrb	r7, [sl, r6]
   1df1c:	and	r3, r3, #159	; 0x9f
   1df20:	strb	r3, [r0, #6]
   1df24:	strb	r7, [r0]
   1df28:	ldr	r3, [r1, #80]	; 0x50
   1df2c:	mov	r5, r0
   1df30:	cmp	r3, #1
   1df34:	mov	r4, r1
   1df38:	ble	1e190 <__assert_fail@plt+0xceb8>
   1df3c:	ldr	r2, [r1, #28]
   1df40:	cmp	r6, r2
   1df44:	beq	1df58 <__assert_fail@plt+0xcc80>
   1df48:	ldr	r2, [r1, #8]
   1df4c:	ldr	r2, [r2, r6, lsl #2]
   1df50:	cmn	r2, #1
   1df54:	beq	1e3f0 <__assert_fail@plt+0xd118>
   1df58:	cmp	r7, #92	; 0x5c
   1df5c:	beq	1e1f8 <__assert_fail@plt+0xcf20>
   1df60:	ldr	r3, [r4, #8]
   1df64:	mov	r2, #1
   1df68:	strb	r2, [r5, #4]
   1df6c:	ldr	r9, [r3, r6, lsl #2]
   1df70:	mov	r0, r9
   1df74:	bl	111dc <iswalnum@plt>
   1df78:	ldrb	r3, [r5, #6]
   1df7c:	sub	r9, r9, #95	; 0x5f
   1df80:	clz	r9, r9
   1df84:	lsr	r9, r9, #5
   1df88:	bic	r3, r3, #64	; 0x40
   1df8c:	cmp	r0, #0
   1df90:	orrne	r9, r9, #1
   1df94:	orr	r9, r3, r9, lsl #6
   1df98:	strb	r9, [r5, #6]
   1df9c:	sub	r7, r7, #10
   1dfa0:	cmp	r7, #115	; 0x73
   1dfa4:	ldrls	pc, [pc, r7, lsl #2]
   1dfa8:	b	1e1ec <__assert_fail@plt+0xcf14>
   1dfac:	andeq	lr, r1, r4, lsr r4
   1dfb0:	andeq	lr, r1, ip, ror #3
   1dfb4:	andeq	lr, r1, ip, ror #3
   1dfb8:	andeq	lr, r1, ip, ror #3
   1dfbc:	andeq	lr, r1, ip, ror #3
   1dfc0:	andeq	lr, r1, ip, ror #3
   1dfc4:	andeq	lr, r1, ip, ror #3
   1dfc8:	andeq	lr, r1, ip, ror #3
   1dfcc:	andeq	lr, r1, ip, ror #3
   1dfd0:	andeq	lr, r1, ip, ror #3
   1dfd4:	andeq	lr, r1, ip, ror #3
   1dfd8:	andeq	lr, r1, ip, ror #3
   1dfdc:	andeq	lr, r1, ip, ror #3
   1dfe0:	andeq	lr, r1, ip, ror #3
   1dfe4:	andeq	lr, r1, ip, ror #3
   1dfe8:	andeq	lr, r1, ip, ror #3
   1dfec:	andeq	lr, r1, ip, ror #3
   1dff0:	andeq	lr, r1, ip, ror #3
   1dff4:	andeq	lr, r1, ip, ror #3
   1dff8:	andeq	lr, r1, ip, ror #3
   1dffc:	andeq	lr, r1, ip, ror #3
   1e000:	andeq	lr, r1, ip, ror #3
   1e004:	andeq	lr, r1, ip, ror #3
   1e008:	andeq	lr, r1, ip, ror #3
   1e00c:	andeq	lr, r1, ip, ror #3
   1e010:	andeq	lr, r1, ip, ror #3
   1e014:	andeq	lr, r1, ip, asr #8
   1e018:	andeq	lr, r1, ip, ror #3
   1e01c:	andeq	lr, r1, ip, ror #3
   1e020:	andeq	lr, r1, ip, ror #3
   1e024:	andeq	lr, r1, ip, lsr #9
   1e028:	andeq	lr, r1, r4, asr #9
   1e02c:	ldrdeq	lr, [r1], -ip
   1e030:	andeq	lr, r1, ip, ror #9
   1e034:	andeq	lr, r1, ip, ror #3
   1e038:	andeq	lr, r1, ip, ror #3
   1e03c:	andeq	lr, r1, ip, lsl #10
   1e040:	andeq	lr, r1, ip, ror #3
   1e044:	andeq	lr, r1, ip, ror #3
   1e048:	andeq	lr, r1, ip, ror #3
   1e04c:	andeq	lr, r1, ip, ror #3
   1e050:	andeq	lr, r1, ip, ror #3
   1e054:	andeq	lr, r1, ip, ror #3
   1e058:	andeq	lr, r1, ip, ror #3
   1e05c:	andeq	lr, r1, ip, ror #3
   1e060:	andeq	lr, r1, ip, ror #3
   1e064:	andeq	lr, r1, ip, ror #3
   1e068:	andeq	lr, r1, ip, ror #3
   1e06c:	andeq	lr, r1, ip, ror #3
   1e070:	andeq	lr, r1, ip, ror #3
   1e074:	andeq	lr, r1, ip, ror #3
   1e078:	andeq	lr, r1, ip, ror #3
   1e07c:	andeq	lr, r1, ip, ror #3
   1e080:	andeq	lr, r1, ip, lsl r5
   1e084:	andeq	lr, r1, ip, ror #3
   1e088:	andeq	lr, r1, ip, ror #3
   1e08c:	andeq	lr, r1, ip, ror #3
   1e090:	andeq	lr, r1, ip, ror #3
   1e094:	andeq	lr, r1, ip, ror #3
   1e098:	andeq	lr, r1, ip, ror #3
   1e09c:	andeq	lr, r1, ip, ror #3
   1e0a0:	andeq	lr, r1, ip, ror #3
   1e0a4:	andeq	lr, r1, ip, ror #3
   1e0a8:	andeq	lr, r1, ip, ror #3
   1e0ac:	andeq	lr, r1, ip, ror #3
   1e0b0:	andeq	lr, r1, ip, ror #3
   1e0b4:	andeq	lr, r1, ip, ror #3
   1e0b8:	andeq	lr, r1, ip, ror #3
   1e0bc:	andeq	lr, r1, ip, ror #3
   1e0c0:	andeq	lr, r1, ip, ror #3
   1e0c4:	andeq	lr, r1, ip, ror #3
   1e0c8:	andeq	lr, r1, ip, ror #3
   1e0cc:	andeq	lr, r1, ip, ror #3
   1e0d0:	andeq	lr, r1, ip, ror #3
   1e0d4:	andeq	lr, r1, ip, ror #3
   1e0d8:	andeq	lr, r1, ip, ror #3
   1e0dc:	andeq	lr, r1, ip, ror #3
   1e0e0:	andeq	lr, r1, ip, ror #3
   1e0e4:	andeq	lr, r1, ip, ror #3
   1e0e8:	andeq	lr, r1, ip, ror #3
   1e0ec:	andeq	lr, r1, ip, ror #3
   1e0f0:	andeq	lr, r1, ip, lsr r5
   1e0f4:	andeq	lr, r1, ip, ror #3
   1e0f8:	andeq	lr, r1, ip, ror #3
   1e0fc:	andeq	lr, r1, ip, asr #10
   1e100:	andeq	lr, r1, ip, ror #3
   1e104:	andeq	lr, r1, ip, ror #3
   1e108:	andeq	lr, r1, ip, ror #3
   1e10c:	andeq	lr, r1, ip, ror #3
   1e110:	andeq	lr, r1, ip, ror #3
   1e114:	andeq	lr, r1, ip, ror #3
   1e118:	andeq	lr, r1, ip, ror #3
   1e11c:	andeq	lr, r1, ip, ror #3
   1e120:	andeq	lr, r1, ip, ror #3
   1e124:	andeq	lr, r1, ip, ror #3
   1e128:	andeq	lr, r1, ip, ror #3
   1e12c:	andeq	lr, r1, ip, ror #3
   1e130:	andeq	lr, r1, ip, ror #3
   1e134:	andeq	lr, r1, ip, ror #3
   1e138:	andeq	lr, r1, ip, ror #3
   1e13c:	andeq	lr, r1, ip, ror #3
   1e140:	andeq	lr, r1, ip, ror #3
   1e144:	andeq	lr, r1, ip, ror #3
   1e148:	andeq	lr, r1, ip, ror #3
   1e14c:	andeq	lr, r1, ip, ror #3
   1e150:	andeq	lr, r1, ip, ror #3
   1e154:	andeq	lr, r1, ip, ror #3
   1e158:	andeq	lr, r1, ip, ror #3
   1e15c:	andeq	lr, r1, ip, ror #3
   1e160:	andeq	lr, r1, ip, ror #3
   1e164:	andeq	lr, r1, ip, ror #3
   1e168:	andeq	lr, r1, ip, ror #3
   1e16c:	andeq	lr, r1, ip, ror #3
   1e170:	ldrdeq	lr, [r1], -r4
   1e174:	andeq	lr, r1, r4, lsr #11
   1e178:	andeq	lr, r1, r8, lsl r4
   1e17c:	mov	r3, #2
   1e180:	strb	r3, [r0, #4]
   1e184:	mov	r0, #0
   1e188:	add	sp, sp, #8
   1e18c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e190:	cmp	r7, #92	; 0x5c
   1e194:	beq	1e1f8 <__assert_fail@plt+0xcf20>
   1e198:	mov	r3, #1
   1e19c:	strb	r3, [r5, #4]
   1e1a0:	bl	111a0 <__ctype_b_loc@plt>
   1e1a4:	lsl	r1, r7, #1
   1e1a8:	ldrb	r2, [r5, #6]
   1e1ac:	bic	r2, r2, #64	; 0x40
   1e1b0:	ldr	r3, [r0]
   1e1b4:	ldrh	r3, [r3, r1]
   1e1b8:	lsr	r3, r3, #3
   1e1bc:	and	r3, r3, #1
   1e1c0:	cmp	r7, #95	; 0x5f
   1e1c4:	orreq	r3, r3, #1
   1e1c8:	orr	r3, r2, r3, lsl #6
   1e1cc:	strb	r3, [r5, #6]
   1e1d0:	b	1df9c <__assert_fail@plt+0xccc4>
   1e1d4:	and	r8, r8, #4608	; 0x1200
   1e1d8:	cmp	r8, #4608	; 0x1200
   1e1dc:	moveq	r3, #23
   1e1e0:	strbeq	r3, [r5, #4]
   1e1e4:	moveq	r0, #1
   1e1e8:	beq	1e188 <__assert_fail@plt+0xceb0>
   1e1ec:	mov	r0, #1
   1e1f0:	add	sp, sp, #8
   1e1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e1f8:	ldr	r1, [r4, #48]	; 0x30
   1e1fc:	add	r2, r6, #1
   1e200:	cmp	r2, r1
   1e204:	bge	1e408 <__assert_fail@plt+0xd130>
   1e208:	ldrb	r1, [r4, #75]	; 0x4b
   1e20c:	cmp	r1, #0
   1e210:	bne	1e7c4 <__assert_fail@plt+0xd4ec>
   1e214:	ldrb	r6, [sl, r2]
   1e218:	cmp	r3, #1
   1e21c:	mov	r3, #1
   1e220:	strb	r6, [r5]
   1e224:	strb	r3, [r5, #4]
   1e228:	ble	1e790 <__assert_fail@plt+0xd4b8>
   1e22c:	ldr	r1, [r4, #8]
   1e230:	add	r1, r1, r2, lsl #2
   1e234:	ldr	r4, [r1]
   1e238:	mov	r0, r4
   1e23c:	bl	111dc <iswalnum@plt>
   1e240:	ldrb	r3, [r5, #6]
   1e244:	sub	r4, r4, #95	; 0x5f
   1e248:	clz	r4, r4
   1e24c:	lsr	r4, r4, #5
   1e250:	bic	r3, r3, #64	; 0x40
   1e254:	cmp	r0, #0
   1e258:	orrne	r4, r4, #1
   1e25c:	orr	r4, r3, r4, lsl #6
   1e260:	strb	r4, [r5, #6]
   1e264:	sub	r3, r6, #39	; 0x27
   1e268:	cmp	r3, #86	; 0x56
   1e26c:	ldrls	pc, [pc, r3, lsl #2]
   1e270:	b	1e3e8 <__assert_fail@plt+0xd110>
   1e274:	andeq	lr, r1, ip, asr #11
   1e278:			; <UNDEFINED> instruction: 0x0001e5b4
   1e27c:	andeq	lr, r1, r8, ror r7
   1e280:	andeq	lr, r1, r8, ror #7
   1e284:	andeq	lr, r1, ip, asr r7
   1e288:	andeq	lr, r1, r8, ror #7
   1e28c:	andeq	lr, r1, r8, ror #7
   1e290:	andeq	lr, r1, r8, ror #7
   1e294:	andeq	lr, r1, r8, ror #7
   1e298:	andeq	lr, r1, r8, ror #7
   1e29c:	andeq	lr, r1, ip, lsr r7
   1e2a0:	andeq	lr, r1, ip, lsr r7
   1e2a4:	andeq	lr, r1, ip, lsr r7
   1e2a8:	andeq	lr, r1, ip, lsr r7
   1e2ac:	andeq	lr, r1, ip, lsr r7
   1e2b0:	andeq	lr, r1, ip, lsr r7
   1e2b4:	andeq	lr, r1, ip, lsr r7
   1e2b8:	andeq	lr, r1, ip, lsr r7
   1e2bc:	andeq	lr, r1, ip, lsr r7
   1e2c0:	andeq	lr, r1, r8, ror #7
   1e2c4:	andeq	lr, r1, r8, ror #7
   1e2c8:	andeq	lr, r1, ip, lsl r7
   1e2cc:	andeq	lr, r1, r8, ror #7
   1e2d0:	strdeq	lr, [r1], -ip
   1e2d4:	andeq	lr, r1, r0, ror #13
   1e2d8:	andeq	lr, r1, r8, ror #7
   1e2dc:	andeq	lr, r1, r8, ror #7
   1e2e0:	andeq	lr, r1, r0, asr #13
   1e2e4:	andeq	lr, r1, r8, ror #7
   1e2e8:	andeq	lr, r1, r8, ror #7
   1e2ec:	andeq	lr, r1, r8, ror #7
   1e2f0:	andeq	lr, r1, r8, ror #7
   1e2f4:	andeq	lr, r1, r8, ror #7
   1e2f8:	andeq	lr, r1, r8, ror #7
   1e2fc:	andeq	lr, r1, r8, ror #7
   1e300:	andeq	lr, r1, r8, ror #7
   1e304:	andeq	lr, r1, r8, ror #7
   1e308:	andeq	lr, r1, r8, ror #7
   1e30c:	andeq	lr, r1, r8, ror #7
   1e310:	andeq	lr, r1, r8, ror #7
   1e314:	andeq	lr, r1, r8, ror #7
   1e318:	andeq	lr, r1, r8, ror #7
   1e31c:	andeq	lr, r1, r8, ror #7
   1e320:	andeq	lr, r1, r8, ror #7
   1e324:	andeq	lr, r1, r8, lsr #13
   1e328:	andeq	lr, r1, r8, ror #7
   1e32c:	andeq	lr, r1, r8, ror #7
   1e330:	andeq	lr, r1, r8, ror #7
   1e334:	muleq	r1, r0, r6
   1e338:	andeq	lr, r1, r8, ror #7
   1e33c:	andeq	lr, r1, r8, ror #7
   1e340:	andeq	lr, r1, r8, ror #7
   1e344:	andeq	lr, r1, r8, ror #7
   1e348:	andeq	lr, r1, r8, ror #7
   1e34c:	andeq	lr, r1, r8, ror #7
   1e350:	andeq	lr, r1, r8, ror #7
   1e354:	andeq	lr, r1, r8, ror #7
   1e358:	andeq	lr, r1, r0, ror r6
   1e35c:	andeq	lr, r1, r8, ror #7
   1e360:	andeq	lr, r1, r0, asr r6
   1e364:	andeq	lr, r1, r8, ror #7
   1e368:	andeq	lr, r1, r8, ror #7
   1e36c:	andeq	lr, r1, r8, ror #7
   1e370:	andeq	lr, r1, r8, ror #7
   1e374:	andeq	lr, r1, r8, ror #7
   1e378:	andeq	lr, r1, r8, ror #7
   1e37c:	andeq	lr, r1, r8, ror #7
   1e380:	andeq	lr, r1, r8, ror #7
   1e384:	andeq	lr, r1, r8, ror #7
   1e388:	andeq	lr, r1, r8, ror #7
   1e38c:	andeq	lr, r1, r8, ror #7
   1e390:	andeq	lr, r1, r8, ror #7
   1e394:	andeq	lr, r1, r8, ror #7
   1e398:	andeq	lr, r1, r8, ror #7
   1e39c:	andeq	lr, r1, r8, ror #7
   1e3a0:	andeq	lr, r1, r8, ror #7
   1e3a4:	andeq	lr, r1, r8, lsr r6
   1e3a8:	andeq	lr, r1, r8, ror #7
   1e3ac:	andeq	lr, r1, r8, ror #7
   1e3b0:	andeq	lr, r1, r8, ror #7
   1e3b4:	andeq	lr, r1, r0, lsr #12
   1e3b8:	andeq	lr, r1, r8, ror #7
   1e3bc:	andeq	lr, r1, r8, ror #7
   1e3c0:	andeq	lr, r1, r8, ror #7
   1e3c4:	ldrdeq	lr, [r1], -r0
   1e3c8:	andeq	lr, r1, r8, lsl #12
   1e3cc:	andeq	lr, r1, ip, ror #11
   1e3d0:	and	r8, r8, #4608	; 0x1200
   1e3d4:	cmp	r8, #512	; 0x200
   1e3d8:	moveq	r3, #23
   1e3dc:	strbeq	r3, [r5, #4]
   1e3e0:	moveq	r0, #2
   1e3e4:	beq	1e188 <__assert_fail@plt+0xceb0>
   1e3e8:	mov	r0, #2
   1e3ec:	b	1e188 <__assert_fail@plt+0xceb0>
   1e3f0:	ldrb	r3, [r0, #6]
   1e3f4:	mov	r0, #1
   1e3f8:	strb	r0, [r5, #4]
   1e3fc:	orr	r3, r3, #32
   1e400:	strb	r3, [r5, #6]
   1e404:	b	1e188 <__assert_fail@plt+0xceb0>
   1e408:	mov	r3, #36	; 0x24
   1e40c:	strb	r3, [r5, #4]
   1e410:	mov	r0, #1
   1e414:	b	1e188 <__assert_fail@plt+0xceb0>
   1e418:	and	r8, r8, #4608	; 0x1200
   1e41c:	cmp	r8, #4608	; 0x1200
   1e420:	moveq	r3, #24
   1e424:	strbeq	r3, [r5, #4]
   1e428:	moveq	r0, #1
   1e42c:	bne	1e1ec <__assert_fail@plt+0xcf14>
   1e430:	b	1e188 <__assert_fail@plt+0xceb0>
   1e434:	tst	r8, #2048	; 0x800
   1e438:	beq	1e1ec <__assert_fail@plt+0xcf14>
   1e43c:	mov	r3, #10
   1e440:	strb	r3, [r5, #4]
   1e444:	mov	r0, #1
   1e448:	b	1e188 <__assert_fail@plt+0xceb0>
   1e44c:	tst	r8, #8
   1e450:	bne	1e494 <__assert_fail@plt+0xd1bc>
   1e454:	ldr	r3, [r4, #48]	; 0x30
   1e458:	add	r6, r6, #1
   1e45c:	cmp	r6, r3
   1e460:	beq	1e494 <__assert_fail@plt+0xd1bc>
   1e464:	mov	r2, r8
   1e468:	str	r6, [r4, #40]	; 0x28
   1e46c:	mov	r1, r4
   1e470:	mov	r0, sp
   1e474:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1e478:	ldrb	r2, [sp, #4]
   1e47c:	ldr	r3, [r4, #40]	; 0x28
   1e480:	sub	r2, r2, #9
   1e484:	sub	r3, r3, #1
   1e488:	cmp	r2, #1
   1e48c:	str	r3, [r4, #40]	; 0x28
   1e490:	bhi	1e1ec <__assert_fail@plt+0xcf14>
   1e494:	mov	r2, #12
   1e498:	mov	r3, #32
   1e49c:	strb	r2, [r5, #4]
   1e4a0:	str	r3, [r5]
   1e4a4:	mov	r0, #1
   1e4a8:	b	1e188 <__assert_fail@plt+0xceb0>
   1e4ac:	tst	r8, #8192	; 0x2000
   1e4b0:	beq	1e1ec <__assert_fail@plt+0xcf14>
   1e4b4:	mov	r3, #8
   1e4b8:	strb	r3, [r5, #4]
   1e4bc:	mov	r0, #1
   1e4c0:	b	1e188 <__assert_fail@plt+0xceb0>
   1e4c4:	tst	r8, #8192	; 0x2000
   1e4c8:	beq	1e1ec <__assert_fail@plt+0xcf14>
   1e4cc:	mov	r3, #9
   1e4d0:	strb	r3, [r5, #4]
   1e4d4:	mov	r0, #1
   1e4d8:	b	1e188 <__assert_fail@plt+0xceb0>
   1e4dc:	mov	r3, #11
   1e4e0:	strb	r3, [r5, #4]
   1e4e4:	mov	r0, #1
   1e4e8:	b	1e188 <__assert_fail@plt+0xceb0>
   1e4ec:	ldr	r3, [pc, #864]	; 1e854 <__assert_fail@plt+0xd57c>
   1e4f0:	and	r3, r3, r8
   1e4f4:	cmp	r3, #0
   1e4f8:	bne	1e1ec <__assert_fail@plt+0xcf14>
   1e4fc:	mov	r3, #18
   1e500:	strb	r3, [r5, #4]
   1e504:	mov	r0, #1
   1e508:	b	1e188 <__assert_fail@plt+0xceb0>
   1e50c:	mov	r3, #5
   1e510:	strb	r3, [r5, #4]
   1e514:	mov	r0, #1
   1e518:	b	1e188 <__assert_fail@plt+0xceb0>
   1e51c:	ldr	r3, [pc, #816]	; 1e854 <__assert_fail@plt+0xd57c>
   1e520:	and	r3, r3, r8
   1e524:	cmp	r3, #0
   1e528:	bne	1e1ec <__assert_fail@plt+0xcf14>
   1e52c:	mov	r3, #19
   1e530:	strb	r3, [r5, #4]
   1e534:	mov	r0, #1
   1e538:	b	1e188 <__assert_fail@plt+0xceb0>
   1e53c:	mov	r3, #20
   1e540:	strb	r3, [r5, #4]
   1e544:	mov	r0, #1
   1e548:	b	1e188 <__assert_fail@plt+0xceb0>
   1e54c:	ldr	r3, [pc, #772]	; 1e858 <__assert_fail@plt+0xd580>
   1e550:	cmp	r6, #0
   1e554:	and	r3, r3, r8
   1e558:	clz	r3, r3
   1e55c:	lsr	r3, r3, #5
   1e560:	moveq	r3, #0
   1e564:	cmp	r3, #0
   1e568:	beq	1e58c <__assert_fail@plt+0xd2b4>
   1e56c:	add	r6, sl, r6
   1e570:	lsr	r3, r8, #11
   1e574:	ldrb	r2, [r6, #-1]
   1e578:	eor	r3, r3, #1
   1e57c:	cmp	r2, #10
   1e580:	orrne	r3, r3, #1
   1e584:	tst	r3, #1
   1e588:	bne	1e1ec <__assert_fail@plt+0xcf14>
   1e58c:	mov	r2, #12
   1e590:	mov	r3, #16
   1e594:	strb	r2, [r5, #4]
   1e598:	str	r3, [r5]
   1e59c:	mov	r0, #1
   1e5a0:	b	1e188 <__assert_fail@plt+0xceb0>
   1e5a4:	and	r8, r8, #33792	; 0x8400
   1e5a8:	cmp	r8, #32768	; 0x8000
   1e5ac:	bne	1e1ec <__assert_fail@plt+0xcf14>
   1e5b0:	b	1e43c <__assert_fail@plt+0xd164>
   1e5b4:	tst	r8, #8192	; 0x2000
   1e5b8:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e5bc:	mov	r3, #8
   1e5c0:	strb	r3, [r5, #4]
   1e5c4:	mov	r0, #2
   1e5c8:	b	1e188 <__assert_fail@plt+0xceb0>
   1e5cc:	tst	r8, #524288	; 0x80000
   1e5d0:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e5d4:	mov	r2, #12
   1e5d8:	mov	r3, #128	; 0x80
   1e5dc:	strb	r2, [r5, #4]
   1e5e0:	str	r3, [r5]
   1e5e4:	mov	r0, #2
   1e5e8:	b	1e188 <__assert_fail@plt+0xceb0>
   1e5ec:	and	r8, r8, #4608	; 0x1200
   1e5f0:	cmp	r8, #512	; 0x200
   1e5f4:	moveq	r3, #24
   1e5f8:	strbeq	r3, [r5, #4]
   1e5fc:	moveq	r0, #2
   1e600:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e604:	b	1e188 <__assert_fail@plt+0xceb0>
   1e608:	tst	r8, #33792	; 0x8400
   1e60c:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e610:	mov	r3, #10
   1e614:	strb	r3, [r5, #4]
   1e618:	mov	r0, #2
   1e61c:	b	1e188 <__assert_fail@plt+0xceb0>
   1e620:	tst	r8, #524288	; 0x80000
   1e624:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e628:	mov	r3, #32
   1e62c:	strb	r3, [r5, #4]
   1e630:	mov	r0, #2
   1e634:	b	1e188 <__assert_fail@plt+0xceb0>
   1e638:	tst	r8, #524288	; 0x80000
   1e63c:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e640:	mov	r3, #34	; 0x22
   1e644:	strb	r3, [r5, #4]
   1e648:	mov	r0, #2
   1e64c:	b	1e188 <__assert_fail@plt+0xceb0>
   1e650:	tst	r8, #524288	; 0x80000
   1e654:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e658:	mov	r2, #12
   1e65c:	mov	r3, #256	; 0x100
   1e660:	strb	r2, [r5, #4]
   1e664:	str	r3, [r5]
   1e668:	mov	r0, #2
   1e66c:	b	1e188 <__assert_fail@plt+0xceb0>
   1e670:	tst	r8, #524288	; 0x80000
   1e674:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e678:	mov	r2, #12
   1e67c:	mov	r3, #64	; 0x40
   1e680:	strb	r2, [r5, #4]
   1e684:	str	r3, [r5]
   1e688:	mov	r0, #2
   1e68c:	b	1e188 <__assert_fail@plt+0xceb0>
   1e690:	tst	r8, #524288	; 0x80000
   1e694:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e698:	mov	r3, #33	; 0x21
   1e69c:	strb	r3, [r5, #4]
   1e6a0:	mov	r0, #2
   1e6a4:	b	1e188 <__assert_fail@plt+0xceb0>
   1e6a8:	tst	r8, #524288	; 0x80000
   1e6ac:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e6b0:	mov	r3, #35	; 0x23
   1e6b4:	strb	r3, [r5, #4]
   1e6b8:	mov	r0, #2
   1e6bc:	b	1e188 <__assert_fail@plt+0xceb0>
   1e6c0:	tst	r8, #524288	; 0x80000
   1e6c4:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e6c8:	mov	r2, #12
   1e6cc:	mov	r3, #512	; 0x200
   1e6d0:	strb	r2, [r5, #4]
   1e6d4:	str	r3, [r5]
   1e6d8:	mov	r0, #2
   1e6dc:	b	1e188 <__assert_fail@plt+0xceb0>
   1e6e0:	ldr	r0, [pc, #364]	; 1e854 <__assert_fail@plt+0xd57c>
   1e6e4:	and	r0, r0, r8
   1e6e8:	cmp	r0, #2
   1e6ec:	moveq	r3, #19
   1e6f0:	strbeq	r3, [r5, #4]
   1e6f4:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e6f8:	b	1e188 <__assert_fail@plt+0xceb0>
   1e6fc:	tst	r8, #524288	; 0x80000
   1e700:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e704:	mov	r2, #12
   1e708:	mov	r3, #9
   1e70c:	strb	r2, [r5, #4]
   1e710:	str	r3, [r5]
   1e714:	mov	r0, #2
   1e718:	b	1e188 <__assert_fail@plt+0xceb0>
   1e71c:	tst	r8, #524288	; 0x80000
   1e720:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e724:	mov	r2, #12
   1e728:	mov	r3, #6
   1e72c:	strb	r2, [r5, #4]
   1e730:	str	r3, [r5]
   1e734:	mov	r0, #2
   1e738:	b	1e188 <__assert_fail@plt+0xceb0>
   1e73c:	tst	r8, #16384	; 0x4000
   1e740:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e744:	sub	r6, r6, #49	; 0x31
   1e748:	mov	r3, #4
   1e74c:	str	r6, [r5]
   1e750:	strb	r3, [r5, #4]
   1e754:	mov	r0, #2
   1e758:	b	1e188 <__assert_fail@plt+0xceb0>
   1e75c:	ldr	r0, [pc, #240]	; 1e854 <__assert_fail@plt+0xd57c>
   1e760:	and	r0, r0, r8
   1e764:	cmp	r0, #2
   1e768:	moveq	r3, #18
   1e76c:	strbeq	r3, [r5, #4]
   1e770:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e774:	b	1e188 <__assert_fail@plt+0xceb0>
   1e778:	tst	r8, #8192	; 0x2000
   1e77c:	bne	1e3e8 <__assert_fail@plt+0xd110>
   1e780:	mov	r3, #9
   1e784:	strb	r3, [r5, #4]
   1e788:	mov	r0, #2
   1e78c:	b	1e188 <__assert_fail@plt+0xceb0>
   1e790:	bl	111a0 <__ctype_b_loc@plt>
   1e794:	lsl	r3, r6, #1
   1e798:	ldrb	r2, [r5, #6]
   1e79c:	bic	r2, r2, #64	; 0x40
   1e7a0:	ldr	r1, [r0]
   1e7a4:	ldrh	r3, [r1, r3]
   1e7a8:	lsr	r3, r3, #3
   1e7ac:	and	r3, r3, #1
   1e7b0:	cmp	r6, #95	; 0x5f
   1e7b4:	orreq	r3, r3, #1
   1e7b8:	orr	r3, r2, r3, lsl #6
   1e7bc:	strb	r3, [r5, #6]
   1e7c0:	b	1e264 <__assert_fail@plt+0xcf8c>
   1e7c4:	cmp	r3, #1
   1e7c8:	ble	1e7fc <__assert_fail@plt+0xd524>
   1e7cc:	ldr	r0, [r4, #8]
   1e7d0:	add	r1, r0, r2, lsl #2
   1e7d4:	ldr	r0, [r0, r2, lsl #2]
   1e7d8:	cmn	r0, #1
   1e7dc:	beq	1e840 <__assert_fail@plt+0xd568>
   1e7e0:	ldr	r0, [r4, #28]
   1e7e4:	add	r6, r6, #2
   1e7e8:	cmp	r0, r6
   1e7ec:	beq	1e7fc <__assert_fail@plt+0xd524>
   1e7f0:	ldr	r0, [r1, #4]
   1e7f4:	cmn	r0, #1
   1e7f8:	beq	1e840 <__assert_fail@plt+0xd568>
   1e7fc:	ldrb	r1, [r4, #76]	; 0x4c
   1e800:	cmp	r1, #0
   1e804:	bne	1e81c <__assert_fail@plt+0xd544>
   1e808:	ldr	r1, [r4]
   1e80c:	ldr	r0, [r4, #24]
   1e810:	add	r1, r1, r2
   1e814:	ldrb	r6, [r1, r0]
   1e818:	b	1e218 <__assert_fail@plt+0xcf40>
   1e81c:	ldr	ip, [r4, #12]
   1e820:	ldr	r1, [r4]
   1e824:	ldr	r0, [r4, #24]
   1e828:	ldr	ip, [ip, r2, lsl #2]
   1e82c:	add	r1, r1, ip
   1e830:	ldrb	r6, [r1, r0]
   1e834:	tst	r6, #128	; 0x80
   1e838:	bne	1e214 <__assert_fail@plt+0xcf3c>
   1e83c:	b	1e218 <__assert_fail@plt+0xcf40>
   1e840:	ldrb	r6, [sl, r2]
   1e844:	mov	r3, #1
   1e848:	strb	r3, [r5, #4]
   1e84c:	strb	r6, [r5]
   1e850:	b	1e234 <__assert_fail@plt+0xcf5c>
   1e854:	andeq	r0, r0, r2, lsl #8
   1e858:	addeq	r0, r0, r8
   1e85c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e860:	mov	sl, r0
   1e864:	ldr	r8, [pc, #172]	; 1e918 <__assert_fail@plt+0xd640>
   1e868:	mov	r4, r1
   1e86c:	mov	r6, r2
   1e870:	mvn	r5, #0
   1e874:	mov	r9, #32768	; 0x8000
   1e878:	mvn	r7, #1
   1e87c:	mov	r2, r6
   1e880:	mov	r1, sl
   1e884:	mov	r0, r4
   1e888:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1e88c:	ldrb	r2, [r4, #4]
   1e890:	ldr	r3, [sl, #40]	; 0x28
   1e894:	cmp	r2, #2
   1e898:	add	r0, r3, r0
   1e89c:	str	r0, [sl, #40]	; 0x28
   1e8a0:	ldrb	r3, [r4]
   1e8a4:	beq	1e90c <__assert_fail@plt+0xd634>
   1e8a8:	cmp	r3, #44	; 0x2c
   1e8ac:	cmpne	r2, #24
   1e8b0:	beq	1e910 <__assert_fail@plt+0xd638>
   1e8b4:	cmp	r2, #1
   1e8b8:	beq	1e8c4 <__assert_fail@plt+0xd5ec>
   1e8bc:	mov	r5, r7
   1e8c0:	b	1e87c <__assert_fail@plt+0xd5a4>
   1e8c4:	sub	r1, r3, #48	; 0x30
   1e8c8:	uxtb	r2, r1
   1e8cc:	cmp	r2, #9
   1e8d0:	movhi	r2, #0
   1e8d4:	movls	r2, #1
   1e8d8:	cmn	r5, #2
   1e8dc:	moveq	r2, #0
   1e8e0:	cmp	r2, #0
   1e8e4:	beq	1e8bc <__assert_fail@plt+0xd5e4>
   1e8e8:	cmn	r5, #1
   1e8ec:	moveq	r5, r1
   1e8f0:	beq	1e87c <__assert_fail@plt+0xd5a4>
   1e8f4:	add	r5, r5, r5, lsl #2
   1e8f8:	add	r3, r3, r5, lsl #1
   1e8fc:	cmp	r3, r8
   1e900:	suble	r5, r3, #48	; 0x30
   1e904:	movgt	r5, r9
   1e908:	b	1e87c <__assert_fail@plt+0xd5a4>
   1e90c:	mvn	r5, #1
   1e910:	mov	r0, r5
   1e914:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e918:	andeq	r8, r0, r0, lsr r0
   1e91c:	ldr	ip, [r1, #80]	; 0x50
   1e920:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e924:	sub	sp, sp, #12
   1e928:	cmp	ip, #1
   1e92c:	ldr	r4, [r1, #40]	; 0x28
   1e930:	ldrb	r7, [sp, #44]	; 0x2c
   1e934:	beq	1e9a8 <__assert_fail@plt+0xd6d0>
   1e938:	ldr	lr, [r1, #28]
   1e93c:	add	ip, r4, #1
   1e940:	cmp	ip, lr
   1e944:	bge	1e9a8 <__assert_fail@plt+0xd6d0>
   1e948:	ldr	r5, [r1, #8]
   1e94c:	add	r6, r5, ip, lsl #2
   1e950:	ldr	ip, [r5, ip, lsl #2]
   1e954:	cmn	ip, #1
   1e958:	subeq	lr, lr, r4
   1e95c:	moveq	r2, r6
   1e960:	moveq	r3, #1
   1e964:	beq	1e978 <__assert_fail@plt+0xd6a0>
   1e968:	b	1e9a8 <__assert_fail@plt+0xd6d0>
   1e96c:	ldr	ip, [r2, #4]!
   1e970:	cmn	ip, #1
   1e974:	bne	1e988 <__assert_fail@plt+0xd6b0>
   1e978:	add	r3, r3, #1
   1e97c:	cmp	r3, lr
   1e980:	add	r5, r3, r4
   1e984:	bne	1e96c <__assert_fail@plt+0xd694>
   1e988:	ldr	ip, [r6, #-4]
   1e98c:	mov	r2, #1
   1e990:	mov	r3, #0
   1e994:	stm	r0, {r2, ip}
   1e998:	str	r5, [r1, #40]	; 0x28
   1e99c:	mov	r0, r3
   1e9a0:	add	sp, sp, #12
   1e9a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e9a8:	ldrb	ip, [r2, #4]
   1e9ac:	add	r4, r4, r3
   1e9b0:	str	r4, [r1, #40]	; 0x28
   1e9b4:	and	r3, ip, #251	; 0xfb
   1e9b8:	cmp	ip, #28
   1e9bc:	cmpne	r3, #26
   1e9c0:	beq	1e9fc <__assert_fail@plt+0xd724>
   1e9c4:	cmp	ip, #22
   1e9c8:	moveq	ip, r7
   1e9cc:	orrne	ip, r7, #1
   1e9d0:	cmp	ip, #0
   1e9d4:	mov	r5, r2
   1e9d8:	mov	r4, r0
   1e9dc:	beq	1ea10 <__assert_fail@plt+0xd738>
   1e9e0:	mov	r3, #0
   1e9e4:	str	r3, [r4]
   1e9e8:	ldrb	r2, [r5]
   1e9ec:	mov	r0, r3
   1e9f0:	strb	r2, [r4, #4]
   1e9f4:	add	sp, sp, #12
   1e9f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e9fc:	ldr	r5, [r1, #56]	; 0x38
   1ea00:	cmp	r4, r5
   1ea04:	blt	1ea30 <__assert_fail@plt+0xd758>
   1ea08:	mov	r3, #7
   1ea0c:	b	1e99c <__assert_fail@plt+0xd6c4>
   1ea10:	ldr	r2, [sp, #40]	; 0x28
   1ea14:	mov	r0, sp
   1ea18:	bl	14854 <__assert_fail@plt+0x357c>
   1ea1c:	ldrb	r3, [sp, #4]
   1ea20:	cmp	r3, #21
   1ea24:	movne	r3, #11
   1ea28:	bne	1e99c <__assert_fail@plt+0xd6c4>
   1ea2c:	b	1e9e0 <__assert_fail@plt+0xd708>
   1ea30:	ldrb	r6, [r2]
   1ea34:	mov	lr, #0
   1ea38:	b	1ea5c <__assert_fail@plt+0xd784>
   1ea3c:	ldr	r3, [r0, #4]
   1ea40:	strb	ip, [r3, lr]
   1ea44:	add	lr, lr, #1
   1ea48:	cmp	lr, #32
   1ea4c:	beq	1ea08 <__assert_fail@plt+0xd730>
   1ea50:	ldrb	ip, [r2, #4]
   1ea54:	ldr	r4, [r1, #40]	; 0x28
   1ea58:	ldr	r5, [r1, #56]	; 0x38
   1ea5c:	cmp	ip, #30
   1ea60:	beq	1eacc <__assert_fail@plt+0xd7f4>
   1ea64:	ldr	ip, [r1, #4]
   1ea68:	add	r3, r4, #1
   1ea6c:	str	r3, [r1, #40]	; 0x28
   1ea70:	ldrb	ip, [ip, r4]
   1ea74:	cmp	r5, r3
   1ea78:	ble	1ea08 <__assert_fail@plt+0xd730>
   1ea7c:	cmp	r6, ip
   1ea80:	bne	1ea3c <__assert_fail@plt+0xd764>
   1ea84:	ldr	r4, [r1, #4]
   1ea88:	ldrb	r4, [r4, r3]
   1ea8c:	cmp	r4, #93	; 0x5d
   1ea90:	bne	1ea3c <__assert_fail@plt+0xd764>
   1ea94:	add	r3, r3, #1
   1ea98:	str	r3, [r1, #40]	; 0x28
   1ea9c:	ldr	r1, [r0, #4]
   1eaa0:	mov	r3, #0
   1eaa4:	strb	r3, [r1, lr]
   1eaa8:	ldrb	r2, [r2, #4]
   1eaac:	cmp	r2, #28
   1eab0:	beq	1ebac <__assert_fail@plt+0xd8d4>
   1eab4:	cmp	r2, #30
   1eab8:	beq	1eba0 <__assert_fail@plt+0xd8c8>
   1eabc:	cmp	r2, #26
   1eac0:	moveq	r2, #3
   1eac4:	streq	r2, [r0]
   1eac8:	b	1e99c <__assert_fail@plt+0xd6c4>
   1eacc:	ldrb	r3, [r1, #75]	; 0x4b
   1ead0:	cmp	r3, #0
   1ead4:	beq	1ea64 <__assert_fail@plt+0xd78c>
   1ead8:	ldrb	r3, [r1, #76]	; 0x4c
   1eadc:	cmp	r3, #0
   1eae0:	beq	1eb7c <__assert_fail@plt+0xd8a4>
   1eae4:	ldr	r8, [r1, #28]
   1eae8:	cmp	r4, r8
   1eaec:	beq	1eb98 <__assert_fail@plt+0xd8c0>
   1eaf0:	ldr	r3, [r1, #8]
   1eaf4:	lsl	ip, r4, #2
   1eaf8:	ldr	r3, [r3, r4, lsl #2]
   1eafc:	cmn	r3, #1
   1eb00:	beq	1ea64 <__assert_fail@plt+0xd78c>
   1eb04:	ldr	r7, [r1, #12]
   1eb08:	ldr	r3, [r1]
   1eb0c:	ldr	r7, [r7, ip]
   1eb10:	ldr	ip, [r1, #24]
   1eb14:	add	r3, r3, r7
   1eb18:	ldrb	ip, [r3, ip]
   1eb1c:	tst	ip, #128	; 0x80
   1eb20:	bne	1ea64 <__assert_fail@plt+0xd78c>
   1eb24:	ldr	r3, [r1, #80]	; 0x50
   1eb28:	cmp	r3, #1
   1eb2c:	add	r3, r4, #1
   1eb30:	beq	1eb74 <__assert_fail@plt+0xd89c>
   1eb34:	cmp	r8, r3
   1eb38:	ble	1eb74 <__assert_fail@plt+0xd89c>
   1eb3c:	ldr	r9, [r1, #8]
   1eb40:	add	r7, r9, r3, lsl #2
   1eb44:	ldr	r9, [r9, r3, lsl #2]
   1eb48:	cmn	r9, #1
   1eb4c:	addeq	r4, r4, #2
   1eb50:	beq	1eb68 <__assert_fail@plt+0xd890>
   1eb54:	b	1eb74 <__assert_fail@plt+0xd89c>
   1eb58:	ldr	r9, [r7, #4]!
   1eb5c:	add	r4, r4, #1
   1eb60:	cmn	r9, #1
   1eb64:	bne	1eb74 <__assert_fail@plt+0xd89c>
   1eb68:	cmp	r4, r8
   1eb6c:	mov	r3, r4
   1eb70:	bne	1eb58 <__assert_fail@plt+0xd880>
   1eb74:	str	r3, [r1, #40]	; 0x28
   1eb78:	b	1ea74 <__assert_fail@plt+0xd79c>
   1eb7c:	ldr	ip, [r1]
   1eb80:	ldr	r7, [r1, #24]
   1eb84:	add	ip, ip, r4
   1eb88:	add	r3, r4, #1
   1eb8c:	str	r3, [r1, #40]	; 0x28
   1eb90:	ldrb	ip, [ip, r7]
   1eb94:	b	1ea74 <__assert_fail@plt+0xd79c>
   1eb98:	lsl	ip, r4, #2
   1eb9c:	b	1eb04 <__assert_fail@plt+0xd82c>
   1eba0:	mov	r2, #4
   1eba4:	str	r2, [r0]
   1eba8:	b	1e99c <__assert_fail@plt+0xd6c4>
   1ebac:	mov	r2, #2
   1ebb0:	str	r2, [r0]
   1ebb4:	b	1e99c <__assert_fail@plt+0xd6c4>
   1ebb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebbc:	sub	sp, sp, #164	; 0xa4
   1ebc0:	mov	r4, r1
   1ebc4:	str	r2, [sp, #20]
   1ebc8:	ldrb	r2, [r2, #4]
   1ebcc:	ldr	r1, [r1]
   1ebd0:	str	r3, [sp, #28]
   1ebd4:	sub	r3, r2, #1
   1ebd8:	mov	sl, r0
   1ebdc:	str	r1, [sp, #24]
   1ebe0:	cmp	r3, #35	; 0x23
   1ebe4:	ldrls	pc, [pc, r3, lsl #2]
   1ebe8:	b	1f810 <__assert_fail@plt+0xe538>
   1ebec:	andeq	pc, r1, r0, ror #13
   1ebf0:	muleq	r1, r8, ip
   1ebf4:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ebf8:	andeq	pc, r1, ip, ror #12
   1ebfc:	andeq	pc, r1, r4, lsr #4
   1ec00:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec04:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec08:	andeq	pc, r1, r8, ror #4
   1ec0c:	andeq	pc, r1, r0, lsr #16
   1ec10:	muleq	r1, r8, ip
   1ec14:			; <UNDEFINED> instruction: 0x0001ecb8
   1ec18:	andeq	pc, r1, r0, asr #7
   1ec1c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec20:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec24:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec28:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec2c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec30:			; <UNDEFINED> instruction: 0x0001ecb8
   1ec34:			; <UNDEFINED> instruction: 0x0001ecb8
   1ec38:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   1ec3c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec40:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec44:	andeq	lr, r1, ip, lsr #25
   1ec48:	ldrdeq	lr, [r1], -r4
   1ec4c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec50:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec54:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec58:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec5c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec60:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec64:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1ec68:	andeq	pc, r1, r8, ror #15
   1ec6c:	andeq	pc, r1, r8, ror #15
   1ec70:	andeq	pc, r1, r4, asr r3	; <UNPREDICTABLE>
   1ec74:	andeq	pc, r1, r4, asr r3	; <UNPREDICTABLE>
   1ec78:	andeq	pc, r1, r8, lsr #7
   1ec7c:	cmp	r0, #0
   1ec80:	beq	1ec8c <__assert_fail@plt+0xd9b4>
   1ec84:	ldr	r1, [pc, #4032]	; 1fc4c <__assert_fail@plt+0xe974>
   1ec88:	bl	14c88 <__assert_fail@plt+0x39b0>
   1ec8c:	ldr	r2, [sp, #204]	; 0xcc
   1ec90:	mov	r3, #8
   1ec94:	str	r3, [r2]
   1ec98:	mov	r3, #0
   1ec9c:	str	r3, [sp, #32]
   1eca0:	ldr	r0, [sp, #32]
   1eca4:	add	sp, sp, #164	; 0xa4
   1eca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecac:	ldr	r3, [sp, #28]
   1ecb0:	tst	r3, #16777216	; 0x1000000
   1ecb4:	bne	1ef50 <__assert_fail@plt+0xdc78>
   1ecb8:	ldr	r3, [sp, #28]
   1ecbc:	tst	r3, #32
   1ecc0:	bne	1ef50 <__assert_fail@plt+0xdc78>
   1ecc4:	tst	r3, #16
   1ecc8:	bne	1f9e0 <__assert_fail@plt+0xe708>
   1eccc:	cmp	r2, #9
   1ecd0:	beq	1f820 <__assert_fail@plt+0xe548>
   1ecd4:	ldr	r1, [sp, #20]
   1ecd8:	ldr	r0, [sp, #24]
   1ecdc:	mov	r3, #0
   1ece0:	mov	r2, #1
   1ece4:	str	r1, [sp]
   1ece8:	strb	r2, [r1, #4]
   1ecec:	mov	r2, r3
   1ecf0:	add	r1, r0, #64	; 0x40
   1ecf4:	add	r0, r0, #56	; 0x38
   1ecf8:	bl	169f8 <__assert_fail@plt+0x5720>
   1ecfc:	subs	r3, r0, #0
   1ed00:	str	r3, [sp, #32]
   1ed04:	beq	1f7d0 <__assert_fail@plt+0xe4f8>
   1ed08:	ldr	r4, [sp, #20]
   1ed0c:	ldr	r2, [sp, #28]
   1ed10:	mov	r1, sl
   1ed14:	mov	r0, r4
   1ed18:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1ed1c:	ldr	r2, [sl, #40]	; 0x28
   1ed20:	mov	fp, #0
   1ed24:	ldrb	r3, [r4, #4]
   1ed28:	add	r2, r2, r0
   1ed2c:	str	r2, [sl, #40]	; 0x28
   1ed30:	cmp	r3, #23
   1ed34:	bhi	1eca0 <__assert_fail@plt+0xd9c8>
   1ed38:	ldr	r2, [pc, #3856]	; 1fc50 <__assert_fail@plt+0xe978>
   1ed3c:	sub	r6, r3, #18
   1ed40:	clz	r6, r6
   1ed44:	mvn	r2, r2, lsr r3
   1ed48:	tst	r2, #1
   1ed4c:	lsr	r6, r6, #5
   1ed50:	bne	1eca0 <__assert_fail@plt+0xd9c8>
   1ed54:	ldr	r2, [sp, #20]
   1ed58:	cmp	r3, #23
   1ed5c:	ldr	r4, [sl, #40]	; 0x28
   1ed60:	ldm	r2, {r0, r1}
   1ed64:	add	r2, sp, #96	; 0x60
   1ed68:	stm	r2, {r0, r1}
   1ed6c:	beq	1f020 <__assert_fail@plt+0xdd48>
   1ed70:	cmp	r3, #19
   1ed74:	moveq	r3, #1
   1ed78:	mvnne	r3, #0
   1ed7c:	ldr	r2, [sp, #28]
   1ed80:	mov	r1, sl
   1ed84:	ldr	r0, [sp, #20]
   1ed88:	str	r3, [sp, #16]
   1ed8c:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1ed90:	ldr	r3, [sl, #40]	; 0x28
   1ed94:	ldr	r2, [sp, #32]
   1ed98:	cmp	r2, #0
   1ed9c:	add	r0, r3, r0
   1eda0:	str	r0, [sl, #40]	; 0x28
   1eda4:	beq	1f090 <__assert_fail@plt+0xddb8>
   1eda8:	cmp	r6, #0
   1edac:	strle	fp, [sp, #36]	; 0x24
   1edb0:	ldrle	r5, [sp, #32]
   1edb4:	bgt	1ef70 <__assert_fail@plt+0xdc98>
   1edb8:	ldrb	r3, [r5, #24]
   1edbc:	cmp	r3, #17
   1edc0:	beq	1f0a8 <__assert_fail@plt+0xddd0>
   1edc4:	ldr	r3, [sp, #24]
   1edc8:	ldr	r2, [sp, #16]
   1edcc:	add	r4, sp, #128	; 0x80
   1edd0:	cmn	r2, #1
   1edd4:	add	r7, r3, #56	; 0x38
   1edd8:	add	r8, r3, #64	; 0x40
   1eddc:	movne	ip, #10
   1ede0:	moveq	ip, #11
   1ede4:	str	r4, [sp]
   1ede8:	mov	r0, r7
   1edec:	str	fp, [r4, #4]
   1edf0:	mov	r1, r8
   1edf4:	mov	r3, #0
   1edf8:	mov	r2, r5
   1edfc:	str	fp, [sp, #128]	; 0x80
   1ee00:	strb	ip, [sp, #132]	; 0x84
   1ee04:	bl	169f8 <__assert_fail@plt+0x5720>
   1ee08:	subs	r9, r0, #0
   1ee0c:	beq	1eff4 <__assert_fail@plt+0xdd1c>
   1ee10:	ldr	r2, [sp, #16]
   1ee14:	add	r6, r6, #2
   1ee18:	cmp	r6, r2
   1ee1c:	bgt	1eec0 <__assert_fail@plt+0xdbe8>
   1ee20:	str	sl, [sp, #40]	; 0x28
   1ee24:	mov	sl, r9
   1ee28:	ldr	r9, [sp, #24]
   1ee2c:	mov	r0, r5
   1ee30:	mov	r1, r9
   1ee34:	bl	16abc <__assert_fail@plt+0x57e4>
   1ee38:	mov	ip, #16
   1ee3c:	str	r4, [sp]
   1ee40:	mov	r2, sl
   1ee44:	str	fp, [r4, #4]
   1ee48:	mov	r1, r8
   1ee4c:	str	fp, [r4]
   1ee50:	strb	ip, [sp, #132]	; 0x84
   1ee54:	mov	r5, r0
   1ee58:	mov	r3, r0
   1ee5c:	mov	r0, r7
   1ee60:	bl	169f8 <__assert_fail@plt+0x5720>
   1ee64:	cmp	r0, #0
   1ee68:	cmpne	r5, #0
   1ee6c:	moveq	ip, #1
   1ee70:	movne	ip, #0
   1ee74:	beq	1eff4 <__assert_fail@plt+0xdd1c>
   1ee78:	str	r4, [sp]
   1ee7c:	mov	r2, r0
   1ee80:	str	ip, [r4, #4]
   1ee84:	str	ip, [r4]
   1ee88:	mov	r3, fp
   1ee8c:	mov	ip, #10
   1ee90:	mov	r1, r8
   1ee94:	mov	r0, r7
   1ee98:	strb	ip, [sp, #132]	; 0x84
   1ee9c:	bl	169f8 <__assert_fail@plt+0x5720>
   1eea0:	subs	sl, r0, #0
   1eea4:	beq	1eff4 <__assert_fail@plt+0xdd1c>
   1eea8:	ldr	r3, [sp, #16]
   1eeac:	add	r6, r6, #1
   1eeb0:	cmp	r6, r3
   1eeb4:	ble	1ee2c <__assert_fail@plt+0xdb54>
   1eeb8:	mov	r9, sl
   1eebc:	ldr	sl, [sp, #40]	; 0x28
   1eec0:	ldr	r2, [sp, #36]	; 0x24
   1eec4:	cmp	r2, #0
   1eec8:	beq	1f1c0 <__assert_fail@plt+0xdee8>
   1eecc:	str	r4, [sp]
   1eed0:	mov	ip, #16
   1eed4:	str	fp, [r4, #4]
   1eed8:	mov	r3, r9
   1eedc:	mov	r1, r8
   1eee0:	mov	r0, r7
   1eee4:	str	fp, [r4]
   1eee8:	strb	ip, [sp, #132]	; 0x84
   1eeec:	bl	169f8 <__assert_fail@plt+0x5720>
   1eef0:	ldr	r3, [sp, #204]	; 0xcc
   1eef4:	ldr	r3, [r3]
   1eef8:	adds	r3, r3, #0
   1eefc:	movne	r3, #1
   1ef00:	cmp	r0, #0
   1ef04:	movne	r3, #0
   1ef08:	cmp	r3, #0
   1ef0c:	bne	1f000 <__assert_fail@plt+0xdd28>
   1ef10:	str	r0, [sp, #32]
   1ef14:	ldr	r3, [sp, #28]
   1ef18:	tst	r3, #16777216	; 0x1000000
   1ef1c:	ldr	r3, [sp, #20]
   1ef20:	ldrb	r3, [r3, #4]
   1ef24:	beq	1ed30 <__assert_fail@plt+0xda58>
   1ef28:	cmp	r3, #23
   1ef2c:	cmpne	r3, #11
   1ef30:	bne	1ed30 <__assert_fail@plt+0xda58>
   1ef34:	ldr	r3, [sp, #32]
   1ef38:	cmp	r3, #0
   1ef3c:	beq	1ef50 <__assert_fail@plt+0xdc78>
   1ef40:	mov	r0, r3
   1ef44:	mov	r2, #0
   1ef48:	ldr	r1, [pc, #3324]	; 1fc4c <__assert_fail@plt+0xe974>
   1ef4c:	bl	14c88 <__assert_fail@plt+0x39b0>
   1ef50:	ldr	r2, [sp, #204]	; 0xcc
   1ef54:	mov	r3, #13
   1ef58:	str	r3, [r2]
   1ef5c:	mov	r3, #0
   1ef60:	str	r3, [sp, #32]
   1ef64:	ldr	r0, [sp, #32]
   1ef68:	add	sp, sp, #164	; 0xa4
   1ef6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef70:	cmp	r6, #1
   1ef74:	beq	1f810 <__assert_fail@plt+0xe538>
   1ef78:	ldr	r3, [sp, #24]
   1ef7c:	ldr	r5, [sp, #32]
   1ef80:	add	r2, r3, #56	; 0x38
   1ef84:	str	sl, [sp, #40]	; 0x28
   1ef88:	str	r2, [sp, #36]	; 0x24
   1ef8c:	add	r9, r3, #64	; 0x40
   1ef90:	mov	r7, #2
   1ef94:	add	r4, sp, #128	; 0x80
   1ef98:	mov	r8, #16
   1ef9c:	mov	sl, r5
   1efa0:	b	1efb0 <__assert_fail@plt+0xdcd8>
   1efa4:	add	r7, r7, #1
   1efa8:	cmp	r7, r6
   1efac:	bgt	1f1f8 <__assert_fail@plt+0xdf20>
   1efb0:	mov	r0, r5
   1efb4:	ldr	r1, [sp, #24]
   1efb8:	bl	16abc <__assert_fail@plt+0x57e4>
   1efbc:	str	r4, [sp]
   1efc0:	mov	r2, sl
   1efc4:	str	fp, [r4, #4]
   1efc8:	mov	r1, r9
   1efcc:	str	fp, [r4]
   1efd0:	strb	r8, [sp, #132]	; 0x84
   1efd4:	mov	r5, r0
   1efd8:	mov	r3, r0
   1efdc:	ldr	r0, [sp, #36]	; 0x24
   1efe0:	bl	169f8 <__assert_fail@plt+0x5720>
   1efe4:	cmp	r0, #0
   1efe8:	cmpne	r5, #0
   1efec:	mov	sl, r0
   1eff0:	bne	1efa4 <__assert_fail@plt+0xdccc>
   1eff4:	ldr	r2, [sp, #204]	; 0xcc
   1eff8:	mov	r3, #12
   1effc:	str	r3, [r2]
   1f000:	ldr	r3, [sp, #32]
   1f004:	cmp	r3, #0
   1f008:	beq	1ec98 <__assert_fail@plt+0xd9c0>
   1f00c:	mov	r0, r3
   1f010:	mov	r2, #0
   1f014:	ldr	r1, [pc, #3120]	; 1fc4c <__assert_fail@plt+0xe974>
   1f018:	bl	14c88 <__assert_fail@plt+0x39b0>
   1f01c:	b	1ec98 <__assert_fail@plt+0xd9c0>
   1f020:	ldr	r2, [sp, #28]
   1f024:	ldr	r1, [sp, #20]
   1f028:	mov	r0, sl
   1f02c:	bl	1e85c <__assert_fail@plt+0xd584>
   1f030:	cmn	r0, #1
   1f034:	str	r0, [sp, #16]
   1f038:	beq	1f0bc <__assert_fail@plt+0xdde4>
   1f03c:	ldr	r3, [sp, #16]
   1f040:	cmn	r3, #2
   1f044:	beq	1f060 <__assert_fail@plt+0xdd88>
   1f048:	ldr	r3, [sp, #20]
   1f04c:	ldrb	r3, [r3, #4]
   1f050:	cmp	r3, #24
   1f054:	beq	1f1c8 <__assert_fail@plt+0xdef0>
   1f058:	cmp	r3, #1
   1f05c:	beq	1f190 <__assert_fail@plt+0xdeb8>
   1f060:	ldr	r3, [sp, #28]
   1f064:	tst	r3, #2097152	; 0x200000
   1f068:	beq	1fc2c <__assert_fail@plt+0xe954>
   1f06c:	add	r3, sp, #96	; 0x60
   1f070:	ldr	r2, [sp, #20]
   1f074:	ldm	r3, {r0, r1}
   1f078:	mov	r3, #1
   1f07c:	str	r4, [sl, #40]	; 0x28
   1f080:	stm	r2, {r0, r1}
   1f084:	ldr	r0, [sp, #32]
   1f088:	strb	r3, [r2, #4]
   1f08c:	b	1eef0 <__assert_fail@plt+0xdc18>
   1f090:	ldr	r3, [sp, #204]	; 0xcc
   1f094:	ldr	r3, [r3]
   1f098:	cmp	r3, #0
   1f09c:	bne	1f000 <__assert_fail@plt+0xdd28>
   1f0a0:	str	fp, [sp, #32]
   1f0a4:	b	1ef14 <__assert_fail@plt+0xdc3c>
   1f0a8:	ldr	r2, [r5, #20]
   1f0ac:	ldr	r1, [pc, #2976]	; 1fc54 <__assert_fail@plt+0xe97c>
   1f0b0:	mov	r0, r5
   1f0b4:	bl	14c88 <__assert_fail@plt+0x39b0>
   1f0b8:	b	1edc4 <__assert_fail@plt+0xdaec>
   1f0bc:	ldr	r3, [sp, #20]
   1f0c0:	ldrb	r3, [r3, #4]
   1f0c4:	cmp	r3, #1
   1f0c8:	bne	1f1ac <__assert_fail@plt+0xded4>
   1f0cc:	ldr	r3, [sp, #20]
   1f0d0:	ldrb	r3, [r3]
   1f0d4:	cmp	r3, #44	; 0x2c
   1f0d8:	bne	1f1ac <__assert_fail@plt+0xded4>
   1f0dc:	mov	r6, fp
   1f0e0:	ldr	r2, [sp, #28]
   1f0e4:	ldr	r1, [sp, #20]
   1f0e8:	mov	r0, sl
   1f0ec:	bl	1e85c <__assert_fail@plt+0xd584>
   1f0f0:	cmn	r0, #2
   1f0f4:	str	r0, [sp, #16]
   1f0f8:	beq	1f060 <__assert_fail@plt+0xdd88>
   1f0fc:	ldr	r2, [sp, #16]
   1f100:	cmn	r2, #1
   1f104:	cmpne	r6, r2
   1f108:	bgt	1f1ac <__assert_fail@plt+0xded4>
   1f10c:	ldr	r3, [sp, #20]
   1f110:	ldrb	r3, [r3, #4]
   1f114:	cmp	r3, #24
   1f118:	bne	1f1ac <__assert_fail@plt+0xded4>
   1f11c:	cmn	r2, #1
   1f120:	beq	1f1d0 <__assert_fail@plt+0xdef8>
   1f124:	ldr	r3, [sp, #16]
   1f128:	ldr	r2, [pc, #2856]	; 1fc58 <__assert_fail@plt+0xe980>
   1f12c:	cmp	r3, r2
   1f130:	movle	r3, #0
   1f134:	movgt	r3, #1
   1f138:	cmp	r3, #0
   1f13c:	bne	1f1e8 <__assert_fail@plt+0xdf10>
   1f140:	ldr	r2, [sp, #28]
   1f144:	mov	r1, sl
   1f148:	ldr	r0, [sp, #20]
   1f14c:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1f150:	ldr	r3, [sl, #40]	; 0x28
   1f154:	ldr	ip, [sp, #32]
   1f158:	cmp	ip, #0
   1f15c:	add	r0, r3, r0
   1f160:	str	r0, [sl, #40]	; 0x28
   1f164:	beq	1f090 <__assert_fail@plt+0xddb8>
   1f168:	ldr	r3, [sp, #16]
   1f16c:	orrs	r3, r6, r3
   1f170:	bne	1eda8 <__assert_fail@plt+0xdad0>
   1f174:	mov	r2, fp
   1f178:	ldr	r1, [pc, #2764]	; 1fc4c <__assert_fail@plt+0xe974>
   1f17c:	mov	r0, ip
   1f180:	bl	14c88 <__assert_fail@plt+0x39b0>
   1f184:	ldr	r3, [sp, #204]	; 0xcc
   1f188:	ldr	r3, [r3]
   1f18c:	b	1f098 <__assert_fail@plt+0xddc0>
   1f190:	ldr	r3, [sp, #20]
   1f194:	ldrb	r3, [r3]
   1f198:	cmp	r3, #44	; 0x2c
   1f19c:	beq	200f0 <__assert_fail@plt+0xee18>
   1f1a0:	ldr	r3, [sp, #28]
   1f1a4:	tst	r3, #2097152	; 0x200000
   1f1a8:	bne	1f06c <__assert_fail@plt+0xdd94>
   1f1ac:	ldr	r2, [sp, #204]	; 0xcc
   1f1b0:	mov	r3, #10
   1f1b4:	str	r3, [r2]
   1f1b8:	b	1f000 <__assert_fail@plt+0xdd28>
   1f1bc:	ldr	r9, [sp, #36]	; 0x24
   1f1c0:	str	r9, [sp, #32]
   1f1c4:	b	1ef14 <__assert_fail@plt+0xdc3c>
   1f1c8:	ldr	r6, [sp, #16]
   1f1cc:	b	1f124 <__assert_fail@plt+0xde4c>
   1f1d0:	add	r3, r2, #32768	; 0x8000
   1f1d4:	cmp	r6, r3
   1f1d8:	movle	r3, #0
   1f1dc:	movgt	r3, #1
   1f1e0:	cmp	r3, #0
   1f1e4:	beq	1f140 <__assert_fail@plt+0xde68>
   1f1e8:	ldr	r2, [sp, #204]	; 0xcc
   1f1ec:	mov	r3, #15
   1f1f0:	str	r3, [r2]
   1f1f4:	b	1f000 <__assert_fail@plt+0xdd28>
   1f1f8:	ldr	sl, [sp, #40]	; 0x28
   1f1fc:	str	r0, [sp, #36]	; 0x24
   1f200:	ldr	r3, [sp, #16]
   1f204:	cmp	r6, r3
   1f208:	beq	1f1bc <__assert_fail@plt+0xdee4>
   1f20c:	mov	r0, r5
   1f210:	ldr	r1, [sp, #24]
   1f214:	bl	16abc <__assert_fail@plt+0x57e4>
   1f218:	subs	r5, r0, #0
   1f21c:	bne	1edb8 <__assert_fail@plt+0xdae0>
   1f220:	b	1eff4 <__assert_fail@plt+0xdd1c>
   1f224:	ldr	r2, [sp, #20]
   1f228:	ldr	r4, [sp, #24]
   1f22c:	mov	r3, #0
   1f230:	str	r2, [sp]
   1f234:	add	r1, r4, #64	; 0x40
   1f238:	mov	r2, r3
   1f23c:	add	r0, r4, #56	; 0x38
   1f240:	bl	169f8 <__assert_fail@plt+0x5720>
   1f244:	subs	r3, r0, #0
   1f248:	str	r3, [sp, #32]
   1f24c:	beq	1f7d0 <__assert_fail@plt+0xe4f8>
   1f250:	ldr	r3, [r4, #92]	; 0x5c
   1f254:	cmp	r3, #1
   1f258:	ldrbgt	r3, [r4, #88]	; 0x58
   1f25c:	orrgt	r3, r3, #2
   1f260:	strbgt	r3, [r4, #88]	; 0x58
   1f264:	b	1ed08 <__assert_fail@plt+0xda30>
   1f268:	ldr	r5, [r4, #24]
   1f26c:	ldr	r6, [sp, #20]
   1f270:	ldr	r7, [sp, #28]
   1f274:	add	r3, r5, #1
   1f278:	orr	r2, r7, #8388608	; 0x800000
   1f27c:	str	r3, [r4, #24]
   1f280:	mov	r1, r0
   1f284:	mov	r0, r6
   1f288:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1f28c:	ldrb	r2, [r6, #4]
   1f290:	ldr	r3, [sl, #40]	; 0x28
   1f294:	cmp	r2, #9
   1f298:	add	r3, r3, r0
   1f29c:	str	r3, [sl, #40]	; 0x28
   1f2a0:	beq	1f840 <__assert_fail@plt+0xe568>
   1f2a4:	ldr	r3, [sp, #200]	; 0xc8
   1f2a8:	ldr	r2, [sp, #204]	; 0xcc
   1f2ac:	add	r3, r3, #1
   1f2b0:	str	r2, [sp, #4]
   1f2b4:	str	r3, [sp]
   1f2b8:	mov	r2, r6
   1f2bc:	mov	r3, r7
   1f2c0:	mov	r1, r4
   1f2c4:	mov	r0, sl
   1f2c8:	bl	202a8 <__assert_fail@plt+0xefd0>
   1f2cc:	ldr	r2, [sp, #204]	; 0xcc
   1f2d0:	ldr	r2, [r2]
   1f2d4:	cmp	r2, #0
   1f2d8:	mov	r3, r0
   1f2dc:	bne	1ec98 <__assert_fail@plt+0xd9c0>
   1f2e0:	ldr	r1, [sp, #20]
   1f2e4:	ldrb	r1, [r1, #4]
   1f2e8:	cmp	r1, #9
   1f2ec:	bne	1ec7c <__assert_fail@plt+0xd9a4>
   1f2f0:	cmp	r5, #8
   1f2f4:	bhi	1f30c <__assert_fail@plt+0xe034>
   1f2f8:	ldr	r0, [sp, #24]
   1f2fc:	mov	r1, #1
   1f300:	ldr	r2, [r0, #84]	; 0x54
   1f304:	orr	r2, r2, r1, lsl r5
   1f308:	str	r2, [r0, #84]	; 0x54
   1f30c:	add	ip, sp, #128	; 0x80
   1f310:	str	ip, [sp]
   1f314:	ldr	ip, [sp, #24]
   1f318:	mov	r0, #0
   1f31c:	str	r0, [sp, #132]	; 0x84
   1f320:	mov	r2, r3
   1f324:	mov	lr, #17
   1f328:	mov	r3, r0
   1f32c:	str	r0, [sp, #128]	; 0x80
   1f330:	add	r1, ip, #64	; 0x40
   1f334:	add	r0, ip, #56	; 0x38
   1f338:	strb	lr, [sp, #132]	; 0x84
   1f33c:	bl	169f8 <__assert_fail@plt+0x5720>
   1f340:	subs	r3, r0, #0
   1f344:	str	r3, [sp, #32]
   1f348:	beq	1f7d0 <__assert_fail@plt+0xe4f8>
   1f34c:	str	r5, [r3, #20]
   1f350:	b	1ed08 <__assert_fail@plt+0xda30>
   1f354:	ldr	r3, [sp, #204]	; 0xcc
   1f358:	sub	r2, r2, #35	; 0x23
   1f35c:	clz	r2, r2
   1f360:	lsr	r2, r2, #5
   1f364:	ldr	r1, [r0, #64]	; 0x40
   1f368:	str	r2, [sp]
   1f36c:	str	r3, [sp, #4]
   1f370:	ldr	r2, [pc, #2276]	; 1fc5c <__assert_fail@plt+0xe984>
   1f374:	ldr	r3, [pc, #2276]	; 1fc60 <__assert_fail@plt+0xe988>
   1f378:	ldr	r0, [sp, #24]
   1f37c:	bl	1a0a8 <__assert_fail@plt+0x8dd0>
   1f380:	ldr	r3, [sp, #204]	; 0xcc
   1f384:	ldr	r3, [r3]
   1f388:	adds	r3, r3, #0
   1f38c:	movne	r3, #1
   1f390:	cmp	r0, #0
   1f394:	movne	r3, #0
   1f398:	cmp	r3, #0
   1f39c:	str	r0, [sp, #32]
   1f3a0:	beq	1ed08 <__assert_fail@plt+0xda30>
   1f3a4:	b	1ec98 <__assert_fail@plt+0xd9c0>
   1f3a8:	ldr	r2, [sp, #204]	; 0xcc
   1f3ac:	mov	r3, #5
   1f3b0:	str	r3, [r2]
   1f3b4:	mov	r3, #0
   1f3b8:	str	r3, [sp, #32]
   1f3bc:	b	1eca0 <__assert_fail@plt+0xd9c8>
   1f3c0:	ldr	r3, [sp, #20]
   1f3c4:	ldr	r2, [r3]
   1f3c8:	ldr	r3, [pc, #2196]	; 1fc64 <__assert_fail@plt+0xe98c>
   1f3cc:	and	r3, r3, r2
   1f3d0:	cmp	r3, #0
   1f3d4:	beq	1f43c <__assert_fail@plt+0xe164>
   1f3d8:	ldr	r3, [sp, #24]
   1f3dc:	ldrb	r3, [r3, #88]	; 0x58
   1f3e0:	ands	r4, r3, #16
   1f3e4:	bne	1f43c <__assert_fail@plt+0xe164>
   1f3e8:	ldr	r0, [sp, #24]
   1f3ec:	orr	r3, r3, #16
   1f3f0:	ands	r2, r3, #8
   1f3f4:	mov	r1, r3
   1f3f8:	strb	r3, [r0, #88]	; 0x58
   1f3fc:	bne	1fef8 <__assert_fail@plt+0xec20>
   1f400:	ldr	r3, [pc, #2144]	; 1fc68 <__assert_fail@plt+0xe990>
   1f404:	tst	r1, #4
   1f408:	str	r3, [r0, #100]	; 0x64
   1f40c:	mvn	r1, #2013265921	; 0x78000001
   1f410:	mvn	r3, #-134217727	; 0xf8000001
   1f414:	str	r2, [r0, #96]	; 0x60
   1f418:	str	r1, [r0, #104]	; 0x68
   1f41c:	str	r3, [r0, #108]	; 0x6c
   1f420:	beq	1fe70 <__assert_fail@plt+0xeb98>
   1f424:	ldr	r3, [sp, #20]
   1f428:	str	r2, [r0, #112]	; 0x70
   1f42c:	str	r2, [r0, #116]	; 0x74
   1f430:	str	r2, [r0, #120]	; 0x78
   1f434:	str	r2, [r0, #124]	; 0x7c
   1f438:	ldr	r2, [r3]
   1f43c:	sub	r3, r2, #256	; 0x100
   1f440:	bics	r3, r3, #256	; 0x100
   1f444:	bne	1fa30 <__assert_fail@plt+0xe758>
   1f448:	cmp	r2, #256	; 0x100
   1f44c:	beq	1f948 <__assert_fail@plt+0xe670>
   1f450:	ldr	r1, [sp, #24]
   1f454:	ldr	r7, [sp, #20]
   1f458:	mov	r2, #5
   1f45c:	add	r5, r1, #56	; 0x38
   1f460:	add	r6, r1, #64	; 0x40
   1f464:	str	r7, [sp]
   1f468:	mov	r1, r6
   1f46c:	str	r2, [r7]
   1f470:	mov	r0, r5
   1f474:	mov	r2, r3
   1f478:	bl	169f8 <__assert_fail@plt+0x5720>
   1f47c:	mov	r3, #10
   1f480:	str	r3, [r7]
   1f484:	mov	r4, r0
   1f488:	ldr	r2, [sp, #20]
   1f48c:	mov	r3, #0
   1f490:	str	r2, [sp]
   1f494:	mov	r1, r6
   1f498:	mov	r2, r3
   1f49c:	mov	r0, r5
   1f4a0:	bl	169f8 <__assert_fail@plt+0x5720>
   1f4a4:	add	r2, sp, #128	; 0x80
   1f4a8:	mov	ip, #0
   1f4ac:	str	r2, [sp]
   1f4b0:	mov	lr, #10
   1f4b4:	mov	r1, r6
   1f4b8:	mov	r2, r4
   1f4bc:	str	ip, [sp, #132]	; 0x84
   1f4c0:	str	ip, [sp, #128]	; 0x80
   1f4c4:	strb	lr, [sp, #132]	; 0x84
   1f4c8:	mov	r7, r0
   1f4cc:	mov	r3, r7
   1f4d0:	mov	r0, r5
   1f4d4:	bl	169f8 <__assert_fail@plt+0x5720>
   1f4d8:	cmp	r7, #0
   1f4dc:	cmpne	r4, #0
   1f4e0:	moveq	r3, #1
   1f4e4:	movne	r3, #0
   1f4e8:	cmp	r0, #0
   1f4ec:	orreq	r3, r3, #1
   1f4f0:	cmp	r3, #0
   1f4f4:	str	r0, [sp, #32]
   1f4f8:	bne	1f7d0 <__assert_fail@plt+0xe4f8>
   1f4fc:	ldr	r2, [sp, #28]
   1f500:	ldr	r0, [sp, #20]
   1f504:	mov	r1, sl
   1f508:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1f50c:	ldr	r3, [sl, #40]	; 0x28
   1f510:	add	r3, r3, r0
   1f514:	str	r3, [sl, #40]	; 0x28
   1f518:	b	1eca0 <__assert_fail@plt+0xd9c8>
   1f51c:	mov	r3, #0
   1f520:	mov	r1, #1
   1f524:	mov	r0, #32
   1f528:	str	r3, [sp, #68]	; 0x44
   1f52c:	bl	22f84 <__assert_fail@plt+0x11cac>
   1f530:	mov	r1, #1
   1f534:	mov	r9, r0
   1f538:	mov	r0, #40	; 0x28
   1f53c:	bl	22f84 <__assert_fail@plt+0x11cac>
   1f540:	cmp	r0, #0
   1f544:	cmpne	r9, #0
   1f548:	moveq	r3, #1
   1f54c:	movne	r3, #0
   1f550:	mov	r6, r0
   1f554:	str	r3, [sp, #36]	; 0x24
   1f558:	beq	1fbf0 <__assert_fail@plt+0xe918>
   1f55c:	ldr	r4, [sp, #20]
   1f560:	ldr	r2, [sp, #28]
   1f564:	mov	r1, sl
   1f568:	mov	r0, r4
   1f56c:	bl	14854 <__assert_fail@plt+0x357c>
   1f570:	ldrb	r3, [r4, #4]
   1f574:	cmp	r3, #2
   1f578:	mov	fp, r0
   1f57c:	beq	1fc10 <__assert_fail@plt+0xe938>
   1f580:	cmp	r3, #25
   1f584:	beq	1f984 <__assert_fail@plt+0xe6ac>
   1f588:	ldr	r2, [sp, #36]	; 0x24
   1f58c:	str	r2, [sp, #40]	; 0x28
   1f590:	cmp	r3, #21
   1f594:	ldr	r1, [sp, #28]
   1f598:	ldreq	r2, [sp, #20]
   1f59c:	moveq	r3, #1
   1f5a0:	ldr	r4, [sp, #20]
   1f5a4:	strbeq	r3, [r2, #4]
   1f5a8:	mov	r3, #0
   1f5ac:	mov	r2, r3
   1f5b0:	str	r3, [sp, #32]
   1f5b4:	lsr	r3, r1, #16
   1f5b8:	and	r3, r3, #1
   1f5bc:	str	r2, [sp, #16]
   1f5c0:	str	r3, [sp, #52]	; 0x34
   1f5c4:	add	r2, r6, #36	; 0x24
   1f5c8:	mov	r8, r9
   1f5cc:	mov	r3, #1
   1f5d0:	mov	r9, r1
   1f5d4:	str	r2, [sp, #44]	; 0x2c
   1f5d8:	add	r2, r6, #12
   1f5dc:	str	r2, [sp, #48]	; 0x30
   1f5e0:	add	ip, sp, #96	; 0x60
   1f5e4:	str	r3, [sp, #4]
   1f5e8:	str	ip, [sp, #76]	; 0x4c
   1f5ec:	str	r9, [sp]
   1f5f0:	mov	ip, #3
   1f5f4:	mov	r3, fp
   1f5f8:	mov	r2, r4
   1f5fc:	mov	r1, sl
   1f600:	add	r0, sp, #72	; 0x48
   1f604:	str	ip, [sp, #72]	; 0x48
   1f608:	bl	1e91c <__assert_fail@plt+0xd644>
   1f60c:	cmp	r0, #0
   1f610:	bne	1fa60 <__assert_fail@plt+0xe788>
   1f614:	mov	r2, r9
   1f618:	mov	r1, sl
   1f61c:	mov	r0, r4
   1f620:	bl	14854 <__assert_fail@plt+0x357c>
   1f624:	ldr	r3, [sp, #72]	; 0x48
   1f628:	sub	r2, r3, #2
   1f62c:	bics	r2, r2, #2
   1f630:	mov	fp, r0
   1f634:	beq	1f64c <__assert_fail@plt+0xe374>
   1f638:	ldrb	r2, [r4, #4]
   1f63c:	cmp	r2, #2
   1f640:	beq	1fa78 <__assert_fail@plt+0xe7a0>
   1f644:	cmp	r2, #22
   1f648:	beq	1fa8c <__assert_fail@plt+0xe7b4>
   1f64c:	cmp	r3, #4
   1f650:	ldrls	pc, [pc, r3, lsl #2]
   1f654:	b	1fa78 <__assert_fail@plt+0xe7a0>
   1f658:	andeq	pc, r1, r8, lsr #18
   1f65c:	andeq	pc, r1, r0, lsl #18
   1f660:	andeq	pc, r1, r0, ror #17
   1f664:	muleq	r1, r8, r8
   1f668:	andeq	pc, r1, r8, asr #16
   1f66c:	ldr	r3, [sp, #20]
   1f670:	mov	r2, #1
   1f674:	ldr	r1, [r3]
   1f678:	ldr	r3, [sp, #24]
   1f67c:	lsl	r2, r2, r1
   1f680:	ldr	r3, [r3, #84]	; 0x54
   1f684:	ands	r3, r2, r3
   1f688:	beq	1fbdc <__assert_fail@plt+0xe904>
   1f68c:	ldr	r4, [sp, #24]
   1f690:	ldr	r0, [sp, #20]
   1f694:	mov	r3, #0
   1f698:	ldr	r1, [r4, #80]	; 0x50
   1f69c:	orr	r2, r1, r2
   1f6a0:	str	r2, [r4, #80]	; 0x50
   1f6a4:	add	r1, r4, #64	; 0x40
   1f6a8:	mov	r2, r3
   1f6ac:	str	r0, [sp]
   1f6b0:	add	r0, r4, #56	; 0x38
   1f6b4:	bl	169f8 <__assert_fail@plt+0x5720>
   1f6b8:	subs	r3, r0, #0
   1f6bc:	str	r3, [sp, #32]
   1f6c0:	beq	1f7d0 <__assert_fail@plt+0xe4f8>
   1f6c4:	ldrb	r2, [r4, #88]	; 0x58
   1f6c8:	ldr	r3, [r4, #76]	; 0x4c
   1f6cc:	orr	r2, r2, #2
   1f6d0:	add	r3, r3, #1
   1f6d4:	strb	r2, [r4, #88]	; 0x58
   1f6d8:	str	r3, [r4, #76]	; 0x4c
   1f6dc:	b	1ed08 <__assert_fail@plt+0xda30>
   1f6e0:	ldr	r3, [sp, #24]
   1f6e4:	ldr	r2, [sp, #20]
   1f6e8:	add	r8, r3, #56	; 0x38
   1f6ec:	add	r7, r3, #64	; 0x40
   1f6f0:	mov	r3, #0
   1f6f4:	str	r2, [sp]
   1f6f8:	mov	r0, r8
   1f6fc:	mov	r2, r3
   1f700:	mov	r1, r7
   1f704:	bl	169f8 <__assert_fail@plt+0x5720>
   1f708:	subs	r3, r0, #0
   1f70c:	str	r3, [sp, #32]
   1f710:	beq	1f7d0 <__assert_fail@plt+0xe4f8>
   1f714:	ldr	r3, [sp, #24]
   1f718:	ldr	r3, [r3, #92]	; 0x5c
   1f71c:	cmp	r3, #1
   1f720:	ble	1ed08 <__assert_fail@plt+0xda30>
   1f724:	ldr	r6, [sp, #32]
   1f728:	mov	r5, #0
   1f72c:	add	r4, sp, #128	; 0x80
   1f730:	mov	r9, #16
   1f734:	ldr	r3, [sl, #40]	; 0x28
   1f738:	ldr	r2, [sl, #56]	; 0x38
   1f73c:	cmp	r2, r3
   1f740:	ble	1fa70 <__assert_fail@plt+0xe798>
   1f744:	ldr	r2, [sl, #28]
   1f748:	cmp	r3, r2
   1f74c:	beq	1fa70 <__assert_fail@plt+0xe798>
   1f750:	ldr	r2, [sl, #8]
   1f754:	ldr	r3, [r2, r3, lsl #2]
   1f758:	cmn	r3, #1
   1f75c:	bne	1fa70 <__assert_fail@plt+0xe798>
   1f760:	ldr	fp, [sp, #20]
   1f764:	ldr	r2, [sp, #28]
   1f768:	mov	r1, sl
   1f76c:	mov	r0, fp
   1f770:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1f774:	ldr	ip, [sl, #40]	; 0x28
   1f778:	mov	r3, r5
   1f77c:	str	fp, [sp]
   1f780:	mov	r2, #0
   1f784:	mov	r1, r7
   1f788:	add	r0, ip, r0
   1f78c:	str	r0, [sl, #40]	; 0x28
   1f790:	mov	r0, r8
   1f794:	bl	169f8 <__assert_fail@plt+0x5720>
   1f798:	str	r4, [sp]
   1f79c:	mov	r2, r6
   1f7a0:	str	r5, [r4, #4]
   1f7a4:	mov	r1, r7
   1f7a8:	str	r5, [r4]
   1f7ac:	strb	r9, [sp, #132]	; 0x84
   1f7b0:	mov	fp, r0
   1f7b4:	mov	r3, r0
   1f7b8:	mov	r0, r8
   1f7bc:	bl	169f8 <__assert_fail@plt+0x5720>
   1f7c0:	cmp	r0, #0
   1f7c4:	cmpne	fp, #0
   1f7c8:	mov	r6, r0
   1f7cc:	bne	1f734 <__assert_fail@plt+0xe45c>
   1f7d0:	ldr	r2, [sp, #204]	; 0xcc
   1f7d4:	mov	r3, #12
   1f7d8:	str	r3, [r2]
   1f7dc:	mov	r3, #0
   1f7e0:	str	r3, [sp, #32]
   1f7e4:	b	1eca0 <__assert_fail@plt+0xd9c8>
   1f7e8:	ldr	r3, [sp, #204]	; 0xcc
   1f7ec:	sub	r2, r2, #33	; 0x21
   1f7f0:	clz	r2, r2
   1f7f4:	lsr	r2, r2, #5
   1f7f8:	ldr	r1, [r0, #64]	; 0x40
   1f7fc:	str	r2, [sp]
   1f800:	str	r3, [sp, #4]
   1f804:	ldr	r2, [pc, #1120]	; 1fc6c <__assert_fail@plt+0xe994>
   1f808:	ldr	r3, [pc, #1120]	; 1fc70 <__assert_fail@plt+0xe998>
   1f80c:	b	1f378 <__assert_fail@plt+0xe0a0>
   1f810:	ldr	r3, [sp, #32]
   1f814:	str	r3, [sp, #36]	; 0x24
   1f818:	mov	r5, r3
   1f81c:	b	1f200 <__assert_fail@plt+0xdf28>
   1f820:	ldr	r3, [sp, #28]
   1f824:	ands	r2, r3, #131072	; 0x20000
   1f828:	bne	1ecd4 <__assert_fail@plt+0xd9fc>
   1f82c:	str	r2, [sp, #32]
   1f830:	ldr	r2, [sp, #204]	; 0xcc
   1f834:	mov	r3, #16
   1f838:	str	r3, [r2]
   1f83c:	b	1eca0 <__assert_fail@plt+0xd9c8>
   1f840:	mov	r3, #0
   1f844:	b	1f2f0 <__assert_fail@plt+0xe018>
   1f848:	ldr	r3, [sp, #76]	; 0x4c
   1f84c:	add	r2, sp, #68	; 0x44
   1f850:	ldr	r0, [sl, #64]	; 0x40
   1f854:	mov	r1, r8
   1f858:	stm	sp, {r2, r3}
   1f85c:	str	r9, [sp, #8]
   1f860:	ldr	r3, [sp, #44]	; 0x2c
   1f864:	ldr	r2, [sp, #48]	; 0x30
   1f868:	bl	197b8 <__assert_fail@plt+0x84e0>
   1f86c:	ldr	r3, [sp, #204]	; 0xcc
   1f870:	cmp	r0, #0
   1f874:	str	r0, [r3]
   1f878:	bne	1f8b4 <__assert_fail@plt+0xe5dc>
   1f87c:	ldrb	r3, [r4, #4]
   1f880:	cmp	r3, #2
   1f884:	beq	1fa78 <__assert_fail@plt+0xe7a0>
   1f888:	cmp	r3, #21
   1f88c:	beq	1ff00 <__assert_fail@plt+0xec28>
   1f890:	ldr	r3, [sp, #36]	; 0x24
   1f894:	b	1f5e0 <__assert_fail@plt+0xe308>
   1f898:	ldr	r1, [sp, #76]	; 0x4c
   1f89c:	mov	r0, r8
   1f8a0:	bl	19778 <__assert_fail@plt+0x84a0>
   1f8a4:	ldr	r3, [sp, #204]	; 0xcc
   1f8a8:	cmp	r0, #0
   1f8ac:	str	r0, [r3]
   1f8b0:	beq	1f87c <__assert_fail@plt+0xe5a4>
   1f8b4:	mov	r9, r8
   1f8b8:	mov	r0, r9
   1f8bc:	bl	23198 <__assert_fail@plt+0x11ec0>
   1f8c0:	mov	r0, r6
   1f8c4:	bl	15810 <__assert_fail@plt+0x4538>
   1f8c8:	ldr	r3, [sp, #204]	; 0xcc
   1f8cc:	ldr	r3, [r3]
   1f8d0:	cmp	r3, #0
   1f8d4:	bne	1ec98 <__assert_fail@plt+0xd9c0>
   1f8d8:	str	r3, [sp, #32]
   1f8dc:	b	1ed08 <__assert_fail@plt+0xda30>
   1f8e0:	ldr	r1, [sp, #76]	; 0x4c
   1f8e4:	mov	r0, r8
   1f8e8:	bl	19778 <__assert_fail@plt+0x84a0>
   1f8ec:	ldr	r3, [sp, #204]	; 0xcc
   1f8f0:	cmp	r0, #0
   1f8f4:	str	r0, [r3]
   1f8f8:	beq	1f87c <__assert_fail@plt+0xe5a4>
   1f8fc:	b	1f8b4 <__assert_fail@plt+0xe5dc>
   1f900:	ldr	r3, [r6, #20]
   1f904:	ldr	r2, [sp, #16]
   1f908:	cmp	r3, r2
   1f90c:	beq	1fcf4 <__assert_fail@plt+0xea1c>
   1f910:	ldr	r0, [r6]
   1f914:	ldr	r2, [sp, #76]	; 0x4c
   1f918:	add	r1, r3, #1
   1f91c:	str	r1, [r6, #20]
   1f920:	str	r2, [r0, r3, lsl #2]
   1f924:	b	1f87c <__assert_fail@plt+0xe5a4>
   1f928:	ldrb	r3, [sp, #76]	; 0x4c
   1f92c:	mov	r0, #1
   1f930:	and	r1, r3, #31
   1f934:	asr	r3, r3, #5
   1f938:	ldr	r2, [r8, r3, lsl #2]
   1f93c:	orr	r2, r2, r0, lsl r1
   1f940:	str	r2, [r8, r3, lsl #2]
   1f944:	b	1f87c <__assert_fail@plt+0xe5a4>
   1f948:	ldr	r1, [sp, #24]
   1f94c:	ldr	r7, [sp, #20]
   1f950:	mov	r2, #6
   1f954:	add	r5, r1, #56	; 0x38
   1f958:	add	r6, r1, #64	; 0x40
   1f95c:	str	r7, [sp]
   1f960:	mov	r1, r6
   1f964:	str	r2, [r7]
   1f968:	mov	r0, r5
   1f96c:	mov	r2, r3
   1f970:	bl	169f8 <__assert_fail@plt+0x5720>
   1f974:	mov	r3, #9
   1f978:	str	r3, [r7]
   1f97c:	mov	r4, r0
   1f980:	b	1f488 <__assert_fail@plt+0xe1b0>
   1f984:	ldrb	r3, [r6, #16]
   1f988:	ldr	r2, [sp, #28]
   1f98c:	ldr	r4, [sp, #20]
   1f990:	tst	r2, #256	; 0x100
   1f994:	orr	r3, r3, #1
   1f998:	strb	r3, [r6, #16]
   1f99c:	ldrne	r3, [r9]
   1f9a0:	ldr	r2, [sp, #28]
   1f9a4:	orrne	r3, r3, #1024	; 0x400
   1f9a8:	strne	r3, [r9]
   1f9ac:	ldr	r3, [sl, #40]	; 0x28
   1f9b0:	mov	r1, sl
   1f9b4:	add	r3, r3, r0
   1f9b8:	str	r3, [sl, #40]	; 0x28
   1f9bc:	mov	r0, r4
   1f9c0:	bl	14854 <__assert_fail@plt+0x357c>
   1f9c4:	ldrb	r3, [r4, #4]
   1f9c8:	cmp	r3, #2
   1f9cc:	mov	fp, r0
   1f9d0:	beq	1fc10 <__assert_fail@plt+0xe938>
   1f9d4:	mov	r2, #1
   1f9d8:	str	r2, [sp, #40]	; 0x28
   1f9dc:	b	1f590 <__assert_fail@plt+0xe2b8>
   1f9e0:	ldr	r5, [sp, #20]
   1f9e4:	mov	r2, r3
   1f9e8:	mov	r1, sl
   1f9ec:	mov	r0, r5
   1f9f0:	mov	r6, r3
   1f9f4:	bl	1def4 <__assert_fail@plt+0xcc1c>
   1f9f8:	ldr	r3, [sp, #204]	; 0xcc
   1f9fc:	ldr	ip, [sl, #40]	; 0x28
   1fa00:	str	r3, [sp, #4]
   1fa04:	ldr	r3, [sp, #200]	; 0xc8
   1fa08:	mov	r2, r5
   1fa0c:	str	r3, [sp]
   1fa10:	mov	r1, r4
   1fa14:	mov	r3, r6
   1fa18:	add	r0, ip, r0
   1fa1c:	str	r0, [sl, #40]	; 0x28
   1fa20:	mov	r0, sl
   1fa24:	bl	1ebb8 <__assert_fail@plt+0xd8e0>
   1fa28:	str	r0, [sp, #32]
   1fa2c:	b	1eca0 <__assert_fail@plt+0xd9c8>
   1fa30:	ldr	r2, [sp, #20]
   1fa34:	ldr	r0, [sp, #24]
   1fa38:	mov	r3, #0
   1fa3c:	str	r2, [sp]
   1fa40:	add	r1, r0, #64	; 0x40
   1fa44:	mov	r2, r3
   1fa48:	add	r0, r0, #56	; 0x38
   1fa4c:	bl	169f8 <__assert_fail@plt+0x5720>
   1fa50:	subs	r3, r0, #0
   1fa54:	str	r3, [sp, #32]
   1fa58:	bne	1f4fc <__assert_fail@plt+0xe224>
   1fa5c:	b	1f7d0 <__assert_fail@plt+0xe4f8>
   1fa60:	ldr	r3, [sp, #204]	; 0xcc
   1fa64:	mov	r9, r8
   1fa68:	str	r0, [r3]
   1fa6c:	b	1f8b8 <__assert_fail@plt+0xe5e0>
   1fa70:	str	r6, [sp, #32]
   1fa74:	b	1ed08 <__assert_fail@plt+0xda30>
   1fa78:	ldr	r2, [sp, #204]	; 0xcc
   1fa7c:	mov	r3, #7
   1fa80:	mov	r9, r8
   1fa84:	str	r3, [r2]
   1fa88:	b	1f8b8 <__assert_fail@plt+0xe5e0>
   1fa8c:	ldr	r3, [sl, #40]	; 0x28
   1fa90:	mov	r2, r9
   1fa94:	add	r3, r3, r0
   1fa98:	str	r3, [sl, #40]	; 0x28
   1fa9c:	add	r0, sp, #88	; 0x58
   1faa0:	mov	r1, sl
   1faa4:	bl	14854 <__assert_fail@plt+0x357c>
   1faa8:	ldrb	r2, [sp, #92]	; 0x5c
   1faac:	cmp	r2, #2
   1fab0:	mov	r3, r0
   1fab4:	beq	1fa78 <__assert_fail@plt+0xe7a0>
   1fab8:	cmp	r2, #21
   1fabc:	beq	1fd24 <__assert_fail@plt+0xea4c>
   1fac0:	add	r0, sp, #160	; 0xa0
   1fac4:	mov	ip, #1
   1fac8:	mov	r1, #3
   1facc:	str	r9, [sp]
   1fad0:	add	r2, sp, #88	; 0x58
   1fad4:	str	r1, [r0, #-80]!	; 0xffffffb0
   1fad8:	str	ip, [sp, #4]
   1fadc:	mov	r1, sl
   1fae0:	add	ip, sp, #128	; 0x80
   1fae4:	str	ip, [sp, #84]	; 0x54
   1fae8:	bl	1e91c <__assert_fail@plt+0xd644>
   1faec:	cmp	r0, #0
   1faf0:	bne	1fa60 <__assert_fail@plt+0xe788>
   1faf4:	mov	r2, r9
   1faf8:	mov	r1, sl
   1fafc:	mov	r0, r4
   1fb00:	bl	14854 <__assert_fail@plt+0x357c>
   1fb04:	ldr	r2, [sp, #72]	; 0x48
   1fb08:	sub	r3, r2, #2
   1fb0c:	bics	r3, r3, #2
   1fb10:	mov	fp, r0
   1fb14:	beq	1fbc8 <__assert_fail@plt+0xe8f0>
   1fb18:	ldr	r3, [sp, #80]	; 0x50
   1fb1c:	cmp	r3, #2
   1fb20:	beq	1fbc8 <__assert_fail@plt+0xe8f0>
   1fb24:	cmp	r3, #4
   1fb28:	beq	1fc20 <__assert_fail@plt+0xe948>
   1fb2c:	cmp	r2, #3
   1fb30:	beq	1fc74 <__assert_fail@plt+0xe99c>
   1fb34:	cmp	r3, #3
   1fb38:	beq	1fcbc <__assert_fail@plt+0xe9e4>
   1fb3c:	cmp	r2, #0
   1fb40:	bne	1fca8 <__assert_fail@plt+0xe9d0>
   1fb44:	ldrb	r5, [sp, #76]	; 0x4c
   1fb48:	cmp	r3, #0
   1fb4c:	bne	20108 <__assert_fail@plt+0xee30>
   1fb50:	ldrb	r7, [sp, #84]	; 0x54
   1fb54:	cmp	r2, #0
   1fb58:	cmpne	r2, #3
   1fb5c:	bne	20100 <__assert_fail@plt+0xee28>
   1fb60:	ldr	r2, [sp, #24]
   1fb64:	ldr	r2, [r2, #92]	; 0x5c
   1fb68:	cmp	r2, #1
   1fb6c:	ble	1fd40 <__assert_fail@plt+0xea68>
   1fb70:	mov	r0, r5
   1fb74:	bl	11200 <btowc@plt>
   1fb78:	ldr	r3, [sp, #80]	; 0x50
   1fb7c:	mov	r5, r0
   1fb80:	cmp	r3, #3
   1fb84:	cmpne	r3, #0
   1fb88:	bne	200f8 <__assert_fail@plt+0xee20>
   1fb8c:	ldr	r3, [sp, #24]
   1fb90:	ldr	r3, [r3, #92]	; 0x5c
   1fb94:	cmp	r3, #1
   1fb98:	ble	1fba8 <__assert_fail@plt+0xe8d0>
   1fb9c:	mov	r0, r7
   1fba0:	bl	11200 <btowc@plt>
   1fba4:	mov	r7, r0
   1fba8:	cmn	r5, #1
   1fbac:	cmnne	r7, #1
   1fbb0:	bne	1fd4c <__assert_fail@plt+0xea74>
   1fbb4:	mov	r9, r8
   1fbb8:	mov	r3, #3
   1fbbc:	ldr	r2, [sp, #204]	; 0xcc
   1fbc0:	str	r3, [r2]
   1fbc4:	b	1f8b8 <__assert_fail@plt+0xe5e0>
   1fbc8:	mov	r9, r8
   1fbcc:	mov	r8, #11
   1fbd0:	ldr	r3, [sp, #204]	; 0xcc
   1fbd4:	str	r8, [r3]
   1fbd8:	b	1f8b8 <__assert_fail@plt+0xe5e0>
   1fbdc:	str	r3, [sp, #32]
   1fbe0:	ldr	r3, [sp, #204]	; 0xcc
   1fbe4:	mov	r2, #6
   1fbe8:	str	r2, [r3]
   1fbec:	b	1eca0 <__assert_fail@plt+0xd9c8>
   1fbf0:	mov	r0, r9
   1fbf4:	bl	23198 <__assert_fail@plt+0x11ec0>
   1fbf8:	mov	r0, r6
   1fbfc:	bl	23198 <__assert_fail@plt+0x11ec0>
   1fc00:	ldr	r2, [sp, #204]	; 0xcc
   1fc04:	mov	r3, #12
   1fc08:	str	r3, [r2]
   1fc0c:	b	1ec98 <__assert_fail@plt+0xd9c0>
   1fc10:	ldr	r2, [sp, #204]	; 0xcc
   1fc14:	mov	r3, #2
   1fc18:	str	r3, [r2]
   1fc1c:	b	1f8b8 <__assert_fail@plt+0xe5e0>
   1fc20:	mov	r9, r8
   1fc24:	mov	r3, #11
   1fc28:	b	1fbbc <__assert_fail@plt+0xe8e4>
   1fc2c:	ldr	r3, [sp, #20]
   1fc30:	ldrb	r3, [r3, #4]
   1fc34:	cmp	r3, #2
   1fc38:	bne	1f1ac <__assert_fail@plt+0xded4>
   1fc3c:	ldr	r2, [sp, #204]	; 0xcc
   1fc40:	mov	r3, #9
   1fc44:	str	r3, [r2]
   1fc48:	b	1f000 <__assert_fail@plt+0xdd28>
   1fc4c:	andeq	r5, r1, r4, ror r8
   1fc50:	addeq	r0, ip, r0, lsl #16
   1fc54:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1fc58:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1fc5c:	andeq	r4, r2, ip, lsr sl
   1fc60:	andeq	r3, r2, ip, asr ip
   1fc64:	andeq	r0, r0, pc, lsl #6
   1fc68:	mvnseq	r0, #0
   1fc6c:	andeq	r4, r2, ip, lsr #20
   1fc70:	andeq	r4, r2, r4, ror sl
   1fc74:	ldr	r5, [sp, #76]	; 0x4c
   1fc78:	str	r2, [sp, #60]	; 0x3c
   1fc7c:	mov	r0, r5
   1fc80:	str	r3, [sp, #56]	; 0x38
   1fc84:	bl	111b8 <strlen@plt>
   1fc88:	ldr	r3, [sp, #56]	; 0x38
   1fc8c:	ldr	r2, [sp, #60]	; 0x3c
   1fc90:	cmp	r0, #1
   1fc94:	bhi	1fce8 <__assert_fail@plt+0xea10>
   1fc98:	cmp	r3, #3
   1fc9c:	beq	1fcbc <__assert_fail@plt+0xe9e4>
   1fca0:	ldrb	r5, [r5]
   1fca4:	b	1fb48 <__assert_fail@plt+0xe870>
   1fca8:	cmp	r2, #3
   1fcac:	movne	r5, #0
   1fcb0:	bne	1fb48 <__assert_fail@plt+0xe870>
   1fcb4:	ldr	r5, [sp, #76]	; 0x4c
   1fcb8:	b	1fca0 <__assert_fail@plt+0xe9c8>
   1fcbc:	ldr	r0, [sp, #84]	; 0x54
   1fcc0:	str	r2, [sp, #60]	; 0x3c
   1fcc4:	str	r3, [sp, #56]	; 0x38
   1fcc8:	bl	111b8 <strlen@plt>
   1fccc:	ldr	r3, [sp, #56]	; 0x38
   1fcd0:	ldr	r2, [sp, #60]	; 0x3c
   1fcd4:	cmp	r0, #1
   1fcd8:	bls	1fb3c <__assert_fail@plt+0xe864>
   1fcdc:	mov	r9, r8
   1fce0:	mov	r8, #3
   1fce4:	b	1fbd0 <__assert_fail@plt+0xe8f8>
   1fce8:	mov	r9, r8
   1fcec:	mov	r8, r2
   1fcf0:	b	1fbd0 <__assert_fail@plt+0xe8f8>
   1fcf4:	ldr	r3, [sp, #16]
   1fcf8:	ldr	r0, [r6]
   1fcfc:	lsl	r3, r3, #1
   1fd00:	add	r3, r3, #1
   1fd04:	str	r3, [sp, #16]
   1fd08:	lsl	r1, r3, #2
   1fd0c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1fd10:	cmp	r0, #0
   1fd14:	beq	1fdf0 <__assert_fail@plt+0xeb18>
   1fd18:	ldr	r3, [r6, #20]
   1fd1c:	str	r0, [r6]
   1fd20:	b	1f914 <__assert_fail@plt+0xe63c>
   1fd24:	ldr	r3, [sl, #40]	; 0x28
   1fd28:	mov	r2, #1
   1fd2c:	sub	r3, r3, fp
   1fd30:	str	r3, [sl, #40]	; 0x28
   1fd34:	strb	r2, [r4, #4]
   1fd38:	ldr	r3, [sp, #72]	; 0x48
   1fd3c:	b	1f64c <__assert_fail@plt+0xe374>
   1fd40:	cmp	r3, #0
   1fd44:	cmpne	r3, #3
   1fd48:	bne	200f8 <__assert_fail@plt+0xee20>
   1fd4c:	ldr	r3, [sp, #52]	; 0x34
   1fd50:	cmp	r7, r5
   1fd54:	movcs	r3, #0
   1fd58:	andcc	r3, r3, #1
   1fd5c:	cmp	r3, #0
   1fd60:	bne	1fc20 <__assert_fail@plt+0xe948>
   1fd64:	ldr	r3, [sp, #24]
   1fd68:	ldr	r3, [r3, #92]	; 0x5c
   1fd6c:	cmp	r3, #1
   1fd70:	ble	1fda0 <__assert_fail@plt+0xeac8>
   1fd74:	ldr	r2, [r6, #32]
   1fd78:	ldr	r3, [sp, #32]
   1fd7c:	cmp	r2, r3
   1fd80:	beq	1fdfc <__assert_fail@plt+0xeb24>
   1fd84:	ldr	r3, [r6, #4]
   1fd88:	ldr	r0, [r6, #8]
   1fd8c:	str	r5, [r3, r2, lsl #2]
   1fd90:	ldr	r3, [r6, #32]
   1fd94:	add	r2, r3, #1
   1fd98:	str	r2, [r6, #32]
   1fd9c:	str	r7, [r0, r3, lsl #2]
   1fda0:	mov	r3, #0
   1fda4:	mov	ip, #1
   1fda8:	cmp	r5, r3
   1fdac:	movhi	r2, #0
   1fdb0:	movls	r2, #1
   1fdb4:	cmp	r7, r3
   1fdb8:	movcc	r2, #0
   1fdbc:	cmp	r2, #0
   1fdc0:	asrne	r0, r3, #5
   1fdc4:	andne	r1, r3, #31
   1fdc8:	ldrne	r2, [r8, r0, lsl #2]
   1fdcc:	add	r3, r3, #1
   1fdd0:	orrne	r2, r2, ip, lsl r1
   1fdd4:	strne	r2, [r8, r0, lsl #2]
   1fdd8:	cmp	r3, #256	; 0x100
   1fddc:	bne	1fda8 <__assert_fail@plt+0xead0>
   1fde0:	ldr	r2, [sp, #204]	; 0xcc
   1fde4:	mov	r3, #0
   1fde8:	str	r3, [r2]
   1fdec:	b	1f87c <__assert_fail@plt+0xe5a4>
   1fdf0:	mov	r9, r8
   1fdf4:	mov	r3, #12
   1fdf8:	b	1fbbc <__assert_fail@plt+0xe8e4>
   1fdfc:	ldr	r3, [sp, #32]
   1fe00:	ldr	r0, [r6, #4]
   1fe04:	lsl	r3, r3, #1
   1fe08:	add	r3, r3, #1
   1fe0c:	str	r3, [sp, #32]
   1fe10:	lsl	r2, r3, #2
   1fe14:	mov	r1, r2
   1fe18:	str	r2, [sp, #60]	; 0x3c
   1fe1c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1fe20:	ldr	r2, [sp, #60]	; 0x3c
   1fe24:	mov	r1, r2
   1fe28:	str	r0, [sp, #56]	; 0x38
   1fe2c:	ldr	r0, [r6, #8]
   1fe30:	bl	22ff8 <__assert_fail@plt+0x11d20>
   1fe34:	ldr	r3, [sp, #56]	; 0x38
   1fe38:	cmp	r0, #0
   1fe3c:	cmpne	r3, #0
   1fe40:	ldrne	r2, [r6, #32]
   1fe44:	strne	r3, [r6, #4]
   1fe48:	strne	r0, [r6, #8]
   1fe4c:	bne	1fd8c <__assert_fail@plt+0xeab4>
   1fe50:	mov	r9, r8
   1fe54:	mov	r8, r0
   1fe58:	mov	r0, r3
   1fe5c:	bl	23198 <__assert_fail@plt+0x11ec0>
   1fe60:	mov	r0, r8
   1fe64:	bl	23198 <__assert_fail@plt+0x11ec0>
   1fe68:	mov	r3, #12
   1fe6c:	b	1fbbc <__assert_fail@plt+0xe8e4>
   1fe70:	mov	r4, #128	; 0x80
   1fe74:	mov	r5, #4
   1fe78:	bl	111a0 <__ctype_b_loc@plt>
   1fe7c:	sub	r3, r4, #-2147483647	; 0x80000001
   1fe80:	mov	lr, #1
   1fe84:	add	ip, r5, #24
   1fe88:	ldr	r2, [sp, #24]
   1fe8c:	add	ip, r2, ip, lsl #2
   1fe90:	ldr	r6, [r0]
   1fe94:	add	r6, r6, r3, lsl lr
   1fe98:	mov	r0, r6
   1fe9c:	mov	r1, #0
   1fea0:	ldrh	r2, [r0, #2]!
   1fea4:	add	r3, r4, r1
   1fea8:	lsr	r2, r2, #3
   1feac:	cmp	r3, #95	; 0x5f
   1feb0:	movne	r3, r2
   1feb4:	orreq	r3, r2, #1
   1feb8:	tst	r3, #1
   1febc:	ldrne	r3, [ip]
   1fec0:	orrne	r3, r3, lr, lsl r1
   1fec4:	add	r1, r1, #1
   1fec8:	strne	r3, [ip]
   1fecc:	cmp	r1, #32
   1fed0:	bne	1fea0 <__assert_fail@plt+0xebc8>
   1fed4:	add	r5, r5, #1
   1fed8:	cmp	r5, #8
   1fedc:	add	r4, r4, #32
   1fee0:	add	r6, r6, #64	; 0x40
   1fee4:	add	ip, ip, #4
   1fee8:	bne	1fe98 <__assert_fail@plt+0xebc0>
   1feec:	ldr	r3, [sp, #20]
   1fef0:	ldr	r2, [r3]
   1fef4:	b	1f43c <__assert_fail@plt+0xe164>
   1fef8:	mov	r5, r4
   1fefc:	b	1fe78 <__assert_fail@plt+0xeba0>
   1ff00:	ldr	r3, [sl, #40]	; 0x28
   1ff04:	ldr	r2, [sp, #40]	; 0x28
   1ff08:	add	r3, r3, fp
   1ff0c:	cmp	r2, #0
   1ff10:	mov	r9, r8
   1ff14:	str	r3, [sl, #40]	; 0x28
   1ff18:	bne	200d0 <__assert_fail@plt+0xedf8>
   1ff1c:	ldr	r3, [sp, #24]
   1ff20:	ldr	r0, [r3, #92]	; 0x5c
   1ff24:	cmp	r0, #1
   1ff28:	ble	1ff58 <__assert_fail@plt+0xec80>
   1ff2c:	ldr	r3, [sp, #24]
   1ff30:	sub	r1, r9, #4
   1ff34:	add	ip, r9, #28
   1ff38:	ldr	r2, [r3, #60]	; 0x3c
   1ff3c:	sub	r2, r2, #4
   1ff40:	ldr	r3, [r1, #4]
   1ff44:	ldr	lr, [r2, #4]!
   1ff48:	and	r3, r3, lr
   1ff4c:	str	r3, [r1, #4]!
   1ff50:	cmp	ip, r1
   1ff54:	bne	1ff40 <__assert_fail@plt+0xec68>
   1ff58:	ldr	r3, [r6, #20]
   1ff5c:	cmp	r3, #0
   1ff60:	bne	1ffa8 <__assert_fail@plt+0xecd0>
   1ff64:	ldr	r3, [r6, #24]
   1ff68:	cmp	r3, #0
   1ff6c:	bne	1ffa8 <__assert_fail@plt+0xecd0>
   1ff70:	ldr	r3, [r6, #28]
   1ff74:	cmp	r3, #0
   1ff78:	bne	1ffa8 <__assert_fail@plt+0xecd0>
   1ff7c:	ldr	r3, [r6, #32]
   1ff80:	cmp	r3, #0
   1ff84:	bne	1ffa8 <__assert_fail@plt+0xecd0>
   1ff88:	cmp	r0, #1
   1ff8c:	ble	20080 <__assert_fail@plt+0xeda8>
   1ff90:	ldr	r3, [r6, #36]	; 0x24
   1ff94:	cmp	r3, #0
   1ff98:	bne	1ffa8 <__assert_fail@plt+0xecd0>
   1ff9c:	ldrb	r3, [r6, #16]
   1ffa0:	tst	r3, #1
   1ffa4:	beq	20080 <__assert_fail@plt+0xeda8>
   1ffa8:	ldr	r1, [sp, #24]
   1ffac:	mov	r3, #0
   1ffb0:	add	r4, r1, #56	; 0x38
   1ffb4:	ldrb	r2, [r1, #88]	; 0x58
   1ffb8:	add	r5, r1, #64	; 0x40
   1ffbc:	mov	ip, #6
   1ffc0:	orr	r2, r2, #2
   1ffc4:	strb	r2, [r1, #88]	; 0x58
   1ffc8:	add	r2, sp, #96	; 0x60
   1ffcc:	str	r2, [sp]
   1ffd0:	mov	r0, r4
   1ffd4:	mov	r2, r3
   1ffd8:	mov	r1, r5
   1ffdc:	str	r6, [sp, #96]	; 0x60
   1ffe0:	strb	ip, [sp, #100]	; 0x64
   1ffe4:	bl	169f8 <__assert_fail@plt+0x5720>
   1ffe8:	subs	r3, r0, #0
   1ffec:	str	r3, [sp, #32]
   1fff0:	beq	1fdf4 <__assert_fail@plt+0xeb1c>
   1fff4:	sub	r3, r9, #4
   1fff8:	add	r2, r9, #28
   1fffc:	b	20008 <__assert_fail@plt+0xed30>
   20000:	cmp	r2, r3
   20004:	beq	200c4 <__assert_fail@plt+0xedec>
   20008:	ldr	r1, [r3, #4]!
   2000c:	cmp	r1, #0
   20010:	beq	20000 <__assert_fail@plt+0xed28>
   20014:	mov	r3, #0
   20018:	add	r2, sp, #96	; 0x60
   2001c:	str	r2, [sp]
   20020:	mov	ip, #3
   20024:	mov	r2, r3
   20028:	mov	r1, r5
   2002c:	mov	r0, r4
   20030:	str	r9, [sp, #96]	; 0x60
   20034:	strb	ip, [sp, #100]	; 0x64
   20038:	bl	169f8 <__assert_fail@plt+0x5720>
   2003c:	subs	r2, r0, #0
   20040:	beq	1fdf4 <__assert_fail@plt+0xeb1c>
   20044:	add	ip, sp, #128	; 0x80
   20048:	mov	lr, #0
   2004c:	ldr	r3, [sp, #32]
   20050:	mov	r0, r4
   20054:	mov	r1, r5
   20058:	str	ip, [sp]
   2005c:	mov	r4, #10
   20060:	str	lr, [sp, #132]	; 0x84
   20064:	str	lr, [sp, #128]	; 0x80
   20068:	strb	r4, [sp, #132]	; 0x84
   2006c:	bl	169f8 <__assert_fail@plt+0x5720>
   20070:	subs	r3, r0, #0
   20074:	str	r3, [sp, #32]
   20078:	bne	1ed08 <__assert_fail@plt+0xda30>
   2007c:	b	1fdf4 <__assert_fail@plt+0xeb1c>
   20080:	mov	r0, r6
   20084:	bl	15810 <__assert_fail@plt+0x4538>
   20088:	ldr	r0, [sp, #24]
   2008c:	mov	r3, #0
   20090:	add	r2, sp, #96	; 0x60
   20094:	str	r2, [sp]
   20098:	mov	ip, #3
   2009c:	mov	r2, r3
   200a0:	add	r1, r0, #64	; 0x40
   200a4:	add	r0, r0, #56	; 0x38
   200a8:	str	r9, [sp, #96]	; 0x60
   200ac:	strb	ip, [sp, #100]	; 0x64
   200b0:	bl	169f8 <__assert_fail@plt+0x5720>
   200b4:	subs	r3, r0, #0
   200b8:	str	r3, [sp, #32]
   200bc:	bne	1ed08 <__assert_fail@plt+0xda30>
   200c0:	b	1fdf4 <__assert_fail@plt+0xeb1c>
   200c4:	mov	r0, r9
   200c8:	bl	23198 <__assert_fail@plt+0x11ec0>
   200cc:	b	1ed08 <__assert_fail@plt+0xda30>
   200d0:	sub	r3, r8, #4
   200d4:	add	r1, r8, #28
   200d8:	ldr	r2, [r3, #4]
   200dc:	mvn	r2, r2
   200e0:	str	r2, [r3, #4]!
   200e4:	cmp	r1, r3
   200e8:	bne	200d8 <__assert_fail@plt+0xee00>
   200ec:	b	1ff1c <__assert_fail@plt+0xec44>
   200f0:	ldr	r6, [sp, #16]
   200f4:	b	1f0e0 <__assert_fail@plt+0xde08>
   200f8:	ldr	r7, [sp, #84]	; 0x54
   200fc:	b	1fba8 <__assert_fail@plt+0xe8d0>
   20100:	ldr	r5, [sp, #76]	; 0x4c
   20104:	b	1fb80 <__assert_fail@plt+0xe8a8>
   20108:	cmp	r3, #3
   2010c:	movne	r7, #0
   20110:	ldreq	r1, [sp, #84]	; 0x54
   20114:	ldrbeq	r7, [r1]
   20118:	b	1fb54 <__assert_fail@plt+0xe87c>
   2011c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20120:	sub	sp, sp, #28
   20124:	mov	sl, r3
   20128:	ldr	r5, [sp, #68]	; 0x44
   2012c:	ldr	r6, [sp, #64]	; 0x40
   20130:	str	r5, [sp, #4]
   20134:	str	r6, [sp]
   20138:	mov	r8, r1
   2013c:	ldr	fp, [r1]
   20140:	mov	r9, r0
   20144:	mov	r7, r2
   20148:	bl	1ebb8 <__assert_fail@plt+0xd8e0>
   2014c:	ldr	r3, [r5]
   20150:	adds	r3, r3, #0
   20154:	movne	r3, #1
   20158:	cmp	r0, #0
   2015c:	movne	r3, #0
   20160:	cmp	r3, #0
   20164:	bne	2024c <__assert_fail@plt+0xef74>
   20168:	add	r3, fp, #64	; 0x40
   2016c:	mov	r4, r0
   20170:	str	r3, [sp, #8]
   20174:	add	r3, fp, #56	; 0x38
   20178:	str	r3, [sp, #12]
   2017c:	ldrb	lr, [r7, #4]
   20180:	clz	ip, r6
   20184:	mov	r3, sl
   20188:	and	fp, lr, #247	; 0xf7
   2018c:	cmp	fp, #2
   20190:	mov	r2, r7
   20194:	mov	r1, r8
   20198:	mov	r0, r9
   2019c:	lsr	ip, ip, #5
   201a0:	beq	20250 <__assert_fail@plt+0xef78>
   201a4:	cmp	lr, #9
   201a8:	orrne	ip, ip, #1
   201ac:	cmp	ip, #0
   201b0:	beq	20250 <__assert_fail@plt+0xef78>
   201b4:	str	r5, [sp, #4]
   201b8:	str	r6, [sp]
   201bc:	bl	1ebb8 <__assert_fail@plt+0xd8e0>
   201c0:	ldr	ip, [r5]
   201c4:	adds	ip, ip, #0
   201c8:	movne	ip, #1
   201cc:	cmp	r0, #0
   201d0:	movne	ip, #0
   201d4:	cmp	ip, #0
   201d8:	mov	fp, r0
   201dc:	bne	20234 <__assert_fail@plt+0xef5c>
   201e0:	cmp	r4, #0
   201e4:	cmpne	r0, #0
   201e8:	bne	201f8 <__assert_fail@plt+0xef20>
   201ec:	cmp	r4, #0
   201f0:	moveq	r4, r0
   201f4:	b	2017c <__assert_fail@plt+0xeea4>
   201f8:	add	r3, sp, #16
   201fc:	str	ip, [sp, #20]
   20200:	str	r3, [sp]
   20204:	str	ip, [sp, #16]
   20208:	mov	r3, r0
   2020c:	mov	ip, #16
   20210:	mov	r2, r4
   20214:	ldr	r1, [sp, #8]
   20218:	ldr	r0, [sp, #12]
   2021c:	strb	ip, [sp, #20]
   20220:	bl	169f8 <__assert_fail@plt+0x5720>
   20224:	cmp	r0, #0
   20228:	beq	2025c <__assert_fail@plt+0xef84>
   2022c:	mov	r4, r0
   20230:	b	2017c <__assert_fail@plt+0xeea4>
   20234:	cmp	r4, #0
   20238:	beq	2024c <__assert_fail@plt+0xef74>
   2023c:	mov	r0, r4
   20240:	mov	r2, #0
   20244:	ldr	r1, [pc, #88]	; 202a4 <__assert_fail@plt+0xefcc>
   20248:	bl	14c88 <__assert_fail@plt+0x39b0>
   2024c:	mov	r4, #0
   20250:	mov	r0, r4
   20254:	add	sp, sp, #28
   20258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2025c:	mov	r3, r0
   20260:	mov	r2, r3
   20264:	mov	r0, fp
   20268:	ldr	r1, [pc, #52]	; 202a4 <__assert_fail@plt+0xefcc>
   2026c:	str	r3, [sp, #8]
   20270:	bl	14c88 <__assert_fail@plt+0x39b0>
   20274:	ldr	r3, [sp, #8]
   20278:	mov	r0, r4
   2027c:	mov	r2, r3
   20280:	ldr	r1, [pc, #28]	; 202a4 <__assert_fail@plt+0xefcc>
   20284:	bl	14c88 <__assert_fail@plt+0x39b0>
   20288:	ldr	r3, [sp, #8]
   2028c:	mov	r2, #12
   20290:	mov	r4, r3
   20294:	mov	r0, r4
   20298:	str	r2, [r5]
   2029c:	add	sp, sp, #28
   202a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202a4:	andeq	r5, r1, r4, ror r8
   202a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202ac:	sub	sp, sp, #44	; 0x2c
   202b0:	ldr	r8, [r1]
   202b4:	ldr	fp, [sp, #84]	; 0x54
   202b8:	str	r1, [sp, #16]
   202bc:	ldr	ip, [r8, #84]	; 0x54
   202c0:	str	fp, [sp, #4]
   202c4:	str	ip, [sp, #28]
   202c8:	ldr	ip, [sp, #80]	; 0x50
   202cc:	mov	r5, r0
   202d0:	str	ip, [sp]
   202d4:	mov	r4, r2
   202d8:	str	r3, [sp, #8]
   202dc:	bl	2011c <__assert_fail@plt+0xee44>
   202e0:	ldr	r6, [fp]
   202e4:	adds	r6, r6, #0
   202e8:	movne	r6, #1
   202ec:	cmp	r0, #0
   202f0:	movne	r6, #0
   202f4:	cmp	r6, #0
   202f8:	bne	20428 <__assert_fail@plt+0xf150>
   202fc:	ldr	r3, [sp, #8]
   20300:	mov	r9, r0
   20304:	orr	r3, r3, #8388608	; 0x800000
   20308:	str	r3, [sp, #12]
   2030c:	add	r3, r8, #64	; 0x40
   20310:	str	r3, [sp, #20]
   20314:	add	r3, r8, #56	; 0x38
   20318:	add	r7, sp, #32
   2031c:	str	r3, [sp, #24]
   20320:	str	fp, [sp, #84]	; 0x54
   20324:	b	203b4 <__assert_fail@plt+0xf0dc>
   20328:	cmp	sl, #9
   2032c:	orrne	ip, ip, #1
   20330:	cmp	ip, #0
   20334:	beq	20408 <__assert_fail@plt+0xf130>
   20338:	ldr	ip, [sp, #28]
   2033c:	ldr	sl, [r8, #84]	; 0x54
   20340:	str	ip, [r8, #84]	; 0x54
   20344:	ldr	ip, [sp, #84]	; 0x54
   20348:	str	ip, [sp, #4]
   2034c:	ldr	ip, [sp, #80]	; 0x50
   20350:	str	ip, [sp]
   20354:	bl	2011c <__assert_fail@plt+0xee44>
   20358:	ldr	r3, [sp, #84]	; 0x54
   2035c:	ldr	r3, [r3]
   20360:	adds	r3, r3, #0
   20364:	movne	r3, #1
   20368:	cmp	r0, #0
   2036c:	movne	r3, #0
   20370:	cmp	r3, #0
   20374:	mov	r3, r0
   20378:	bne	20410 <__assert_fail@plt+0xf138>
   2037c:	ldr	r2, [r8, #84]	; 0x54
   20380:	orr	sl, r2, sl
   20384:	str	sl, [r8, #84]	; 0x54
   20388:	str	r7, [sp]
   2038c:	mov	r2, r9
   20390:	str	r6, [r7, #4]
   20394:	mov	ip, #10
   20398:	ldr	r1, [sp, #20]
   2039c:	ldr	r0, [sp, #24]
   203a0:	str	r6, [r7]
   203a4:	strb	ip, [sp, #36]	; 0x24
   203a8:	bl	169f8 <__assert_fail@plt+0x5720>
   203ac:	subs	r9, r0, #0
   203b0:	beq	20438 <__assert_fail@plt+0xf160>
   203b4:	ldrb	r3, [r4, #4]
   203b8:	ldr	r2, [sp, #12]
   203bc:	mov	r1, r5
   203c0:	cmp	r3, #10
   203c4:	mov	r0, r4
   203c8:	bne	2042c <__assert_fail@plt+0xf154>
   203cc:	bl	1def4 <__assert_fail@plt+0xcc1c>
   203d0:	ldrb	sl, [r4, #4]
   203d4:	ldr	lr, [r5, #40]	; 0x28
   203d8:	ldr	ip, [sp, #80]	; 0x50
   203dc:	and	fp, sl, #247	; 0xf7
   203e0:	cmp	fp, #2
   203e4:	clz	ip, ip
   203e8:	ldr	r3, [sp, #8]
   203ec:	mov	r2, r4
   203f0:	ldr	r1, [sp, #16]
   203f4:	lsr	ip, ip, #5
   203f8:	add	lr, lr, r0
   203fc:	str	lr, [r5, #40]	; 0x28
   20400:	mov	r0, r5
   20404:	bne	20328 <__assert_fail@plt+0xf050>
   20408:	mov	r3, r6
   2040c:	b	20388 <__assert_fail@plt+0xf0b0>
   20410:	cmp	r9, #0
   20414:	beq	20428 <__assert_fail@plt+0xf150>
   20418:	mov	r0, r9
   2041c:	mov	r2, #0
   20420:	ldr	r1, [pc, #40]	; 20450 <__assert_fail@plt+0xf178>
   20424:	bl	14c88 <__assert_fail@plt+0x39b0>
   20428:	mov	r9, #0
   2042c:	mov	r0, r9
   20430:	add	sp, sp, #44	; 0x2c
   20434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20438:	ldr	fp, [sp, #84]	; 0x54
   2043c:	mov	r3, #12
   20440:	mov	r0, r9
   20444:	str	r3, [fp]
   20448:	add	sp, sp, #44	; 0x2c
   2044c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20450:	andeq	r5, r1, r4, ror r8
   20454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20458:	mov	r8, r0
   2045c:	ldrb	r0, [r0, #28]
   20460:	ldr	ip, [r8, #4]
   20464:	sub	sp, sp, #148	; 0x94
   20468:	mov	r7, r3
   2046c:	and	r0, r0, #144	; 0x90
   20470:	mov	r3, #0
   20474:	cmp	ip, #159	; 0x9f
   20478:	str	r7, [r8, #12]
   2047c:	str	r1, [sp, #12]
   20480:	mov	r5, r2
   20484:	strb	r0, [r8, #28]
   20488:	str	r3, [r8, #8]
   2048c:	str	r3, [sp, #36]	; 0x24
   20490:	str	r3, [r8, #24]
   20494:	ldr	r4, [r8]
   20498:	bls	21084 <__assert_fail@plt+0xfdac>
   2049c:	mov	r2, #160	; 0xa0
   204a0:	str	r2, [r8, #8]
   204a4:	mov	r1, #0
   204a8:	mov	r0, r4
   204ac:	bl	111f4 <memset@plt>
   204b0:	ldr	r2, [pc, #3696]	; 21328 <__assert_fail@plt+0x10050>
   204b4:	mov	r3, #31
   204b8:	cmp	r5, r2
   204bc:	str	r3, [r4, #64]	; 0x40
   204c0:	bhi	20ac0 <__assert_fail@plt+0xf7e8>
   204c4:	add	r3, r5, #1
   204c8:	str	r3, [r4, #4]
   204cc:	lsl	r0, r3, #3
   204d0:	str	r3, [sp, #20]
   204d4:	bl	22fcc <__assert_fail@plt+0x11cf4>
   204d8:	cmp	r5, #0
   204dc:	str	r0, [r4]
   204e0:	beq	21120 <__assert_fail@plt+0xfe48>
   204e4:	mov	r1, #1
   204e8:	lsl	r1, r1, #1
   204ec:	cmp	r5, r1
   204f0:	bcs	204e8 <__assert_fail@plt+0xf210>
   204f4:	sub	sl, r1, #1
   204f8:	mov	r0, #12
   204fc:	bl	22f84 <__assert_fail@plt+0x11cac>
   20500:	str	sl, [r4, #68]	; 0x44
   20504:	str	r0, [r4, #32]
   20508:	bl	11110 <__ctype_get_mb_cur_max@plt>
   2050c:	str	r0, [r4, #92]	; 0x5c
   20510:	mov	r0, #14
   20514:	bl	11278 <nl_langinfo@plt>
   20518:	ldrb	r3, [r0]
   2051c:	and	r3, r3, #223	; 0xdf
   20520:	cmp	r3, #85	; 0x55
   20524:	bne	20548 <__assert_fail@plt+0xf270>
   20528:	ldrb	r3, [r0, #1]
   2052c:	and	r3, r3, #223	; 0xdf
   20530:	cmp	r3, #84	; 0x54
   20534:	bne	20548 <__assert_fail@plt+0xf270>
   20538:	ldrb	r3, [r0, #2]
   2053c:	and	r3, r3, #223	; 0xdf
   20540:	cmp	r3, #70	; 0x46
   20544:	beq	20db0 <__assert_fail@plt+0xfad8>
   20548:	ldrb	r3, [r4, #88]	; 0x58
   2054c:	ldr	r2, [r4, #92]	; 0x5c
   20550:	bic	r3, r3, #8
   20554:	cmp	r2, #1
   20558:	strb	r3, [r4, #88]	; 0x58
   2055c:	ble	20574 <__assert_fail@plt+0xf29c>
   20560:	uxtb	r3, r3
   20564:	ands	r6, r3, #4
   20568:	beq	20cfc <__assert_fail@plt+0xfa24>
   2056c:	ldr	r3, [pc, #3512]	; 2132c <__assert_fail@plt+0x10054>
   20570:	str	r3, [r4, #60]	; 0x3c
   20574:	ldr	r3, [r4]
   20578:	cmp	r3, #0
   2057c:	beq	20ac0 <__assert_fail@plt+0xf7e8>
   20580:	ldr	r3, [r4, #32]
   20584:	cmp	r3, #0
   20588:	beq	20ac0 <__assert_fail@plt+0xf7e8>
   2058c:	ldr	r2, [pc, #3484]	; 21330 <__assert_fail@plt+0x10058>
   20590:	mov	r3, #0
   20594:	ldr	r1, [pc, #3480]	; 21334 <__assert_fail@plt+0x1005c>
   20598:	cmp	r2, r3
   2059c:	str	r3, [sp, #36]	; 0x24
   205a0:	mov	r3, #1
   205a4:	moveq	r3, r2
   205a8:	cmp	r1, #0
   205ac:	mov	r2, #1
   205b0:	moveq	r2, r1
   205b4:	orr	r3, r3, r2
   205b8:	ands	r3, r3, #255	; 0xff
   205bc:	str	r3, [sp, #24]
   205c0:	beq	205e4 <__assert_fail@plt+0xf30c>
   205c4:	mov	r1, #0
   205c8:	add	r0, r4, #136	; 0x88
   205cc:	bl	11074 <pthread_mutex_init@plt>
   205d0:	cmp	r0, #0
   205d4:	bne	20ac0 <__assert_fail@plt+0xf7e8>
   205d8:	ldr	r3, [sp, #36]	; 0x24
   205dc:	cmp	r3, #0
   205e0:	bne	20ac8 <__assert_fail@plt+0xf7f0>
   205e4:	ands	r3, r7, #4194304	; 0x400000
   205e8:	mov	r1, #0
   205ec:	mov	r2, #84	; 0x54
   205f0:	add	r0, sp, #60	; 0x3c
   205f4:	moveq	fp, r1
   205f8:	movne	fp, #1
   205fc:	ldr	sl, [r8, #20]
   20600:	str	r3, [sp, #16]
   20604:	bl	111f4 <memset@plt>
   20608:	ldrb	r2, [r4, #88]	; 0x58
   2060c:	ldr	ip, [sp, #12]
   20610:	ldr	r1, [r4, #92]	; 0x5c
   20614:	cmp	sl, #0
   20618:	moveq	r3, fp
   2061c:	orrne	r3, fp, #1
   20620:	lsr	r0, r2, #2
   20624:	lsr	r2, r2, #3
   20628:	and	r0, r0, #1
   2062c:	and	r2, r2, #1
   20630:	cmp	r5, #0
   20634:	str	ip, [sp, #60]	; 0x3c
   20638:	strb	fp, [sp, #132]	; 0x84
   2063c:	strb	r3, [sp, #135]	; 0x87
   20640:	str	sl, [sp, #124]	; 0x7c
   20644:	str	r5, [sp, #108]	; 0x6c
   20648:	str	r5, [sp, #104]	; 0x68
   2064c:	str	r5, [sp, #116]	; 0x74
   20650:	str	r5, [sp, #112]	; 0x70
   20654:	mov	ip, r3
   20658:	strb	r0, [sp, #133]	; 0x85
   2065c:	strb	r2, [sp, #134]	; 0x86
   20660:	str	r1, [sp, #140]	; 0x8c
   20664:	beq	2068c <__assert_fail@plt+0xf3b4>
   20668:	ldr	r1, [sp, #20]
   2066c:	add	r0, sp, #60	; 0x3c
   20670:	str	r3, [sp, #28]
   20674:	bl	14d70 <__assert_fail@plt+0x3a98>
   20678:	cmp	r0, #0
   2067c:	bne	206f8 <__assert_fail@plt+0xf420>
   20680:	ldrb	ip, [sp, #135]	; 0x87
   20684:	ldr	r1, [r4, #92]	; 0x5c
   20688:	ldr	r3, [sp, #28]
   2068c:	cmp	ip, #0
   20690:	ldrne	r6, [sp, #64]	; 0x40
   20694:	ldreq	r6, [sp, #12]
   20698:	ands	r2, r7, #4194304	; 0x400000
   2069c:	cmp	r2, #0
   206a0:	str	r6, [sp, #64]	; 0x40
   206a4:	beq	20778 <__assert_fail@plt+0xf4a0>
   206a8:	cmp	r1, #1
   206ac:	ble	2119c <__assert_fail@plt+0xfec4>
   206b0:	add	r0, sp, #60	; 0x3c
   206b4:	bl	15108 <__assert_fail@plt+0x3e30>
   206b8:	cmp	r0, #0
   206bc:	bne	206f8 <__assert_fail@plt+0xf420>
   206c0:	ldr	r3, [sp, #92]	; 0x5c
   206c4:	cmp	r5, r3
   206c8:	ble	207ac <__assert_fail@plt+0xf4d4>
   206cc:	ldr	r3, [sp, #88]	; 0x58
   206d0:	ldr	r2, [r4, #92]	; 0x5c
   206d4:	ldr	r1, [sp, #96]	; 0x60
   206d8:	add	r3, r3, r2
   206dc:	cmp	r1, r3
   206e0:	bgt	207ac <__assert_fail@plt+0xf4d4>
   206e4:	lsl	r1, r1, #1
   206e8:	add	r0, sp, #60	; 0x3c
   206ec:	bl	14d70 <__assert_fail@plt+0x3a98>
   206f0:	cmp	r0, #0
   206f4:	beq	206b0 <__assert_fail@plt+0xf3d8>
   206f8:	str	r0, [sp, #36]	; 0x24
   206fc:	ldr	r6, [r8]
   20700:	ldr	r0, [r6, #56]	; 0x38
   20704:	cmp	r0, #0
   20708:	beq	2071c <__assert_fail@plt+0xf444>
   2070c:	ldr	r5, [r0]
   20710:	bl	23198 <__assert_fail@plt+0x11ec0>
   20714:	subs	r0, r5, #0
   20718:	bne	2070c <__assert_fail@plt+0xf434>
   2071c:	mov	r5, #0
   20720:	mov	r3, #31
   20724:	str	r3, [r6, #64]	; 0x40
   20728:	ldr	r0, [r6, #16]
   2072c:	str	r5, [r6, #56]	; 0x38
   20730:	str	r5, [r6, #52]	; 0x34
   20734:	bl	23198 <__assert_fail@plt+0x11ec0>
   20738:	str	r5, [r6, #16]
   2073c:	add	r0, sp, #60	; 0x3c
   20740:	bl	15b28 <__assert_fail@plt+0x4850>
   20744:	ldr	r3, [sp, #24]
   20748:	cmp	r3, r5
   2074c:	beq	20758 <__assert_fail@plt+0xf480>
   20750:	add	r0, r4, #136	; 0x88
   20754:	bl	11020 <pthread_mutex_destroy@plt>
   20758:	mov	r0, r4
   2075c:	bl	15b58 <__assert_fail@plt+0x4880>
   20760:	ldr	r0, [sp, #36]	; 0x24
   20764:	mov	r3, #0
   20768:	str	r3, [r8]
   2076c:	str	r3, [r8, #4]
   20770:	add	sp, sp, #148	; 0x94
   20774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20778:	cmp	r1, #1
   2077c:	bgt	20e54 <__assert_fail@plt+0xfb7c>
   20780:	cmp	r3, #0
   20784:	beq	21194 <__assert_fail@plt+0xfebc>
   20788:	ldr	ip, [sp, #96]	; 0x60
   2078c:	ldr	r2, [sp, #108]	; 0x6c
   20790:	ldr	r3, [sp, #88]	; 0x58
   20794:	cmp	ip, r2
   20798:	movge	ip, r2
   2079c:	cmp	ip, r3
   207a0:	bgt	20a38 <__assert_fail@plt+0xf760>
   207a4:	str	r3, [sp, #88]	; 0x58
   207a8:	str	r3, [sp, #92]	; 0x5c
   207ac:	ldr	r5, [r8]
   207b0:	mov	r6, #0
   207b4:	orr	r2, r7, #8388608	; 0x800000
   207b8:	str	r6, [r8, #24]
   207bc:	add	r1, sp, #60	; 0x3c
   207c0:	str	r7, [r5, #128]	; 0x80
   207c4:	add	r0, sp, #40	; 0x28
   207c8:	str	r6, [sp, #36]	; 0x24
   207cc:	bl	1def4 <__assert_fail@plt+0xcc1c>
   207d0:	ldr	ip, [sp, #100]	; 0x64
   207d4:	add	r2, sp, #36	; 0x24
   207d8:	mov	r3, r7
   207dc:	str	r2, [sp, #4]
   207e0:	str	r6, [sp]
   207e4:	add	r2, sp, #40	; 0x28
   207e8:	mov	r1, r8
   207ec:	add	ip, ip, r0
   207f0:	add	r0, sp, #60	; 0x3c
   207f4:	str	ip, [sp, #100]	; 0x64
   207f8:	bl	202a8 <__assert_fail@plt+0xefd0>
   207fc:	ldr	r3, [sp, #36]	; 0x24
   20800:	cmp	r3, r6
   20804:	mov	r7, r0
   20808:	bne	2112c <__assert_fail@plt+0xfe54>
   2080c:	add	fp, sp, #48	; 0x30
   20810:	add	r9, r5, #56	; 0x38
   20814:	add	r5, r5, #64	; 0x40
   20818:	str	fp, [sp]
   2081c:	mov	ip, #2
   20820:	str	r3, [fp, #4]
   20824:	mov	r1, r5
   20828:	mov	r0, r9
   2082c:	mov	r2, r3
   20830:	str	r3, [sp, #48]	; 0x30
   20834:	strb	ip, [sp, #52]	; 0x34
   20838:	bl	169f8 <__assert_fail@plt+0x5720>
   2083c:	cmp	r7, #0
   20840:	mov	r6, r0
   20844:	beq	20874 <__assert_fail@plt+0xf59c>
   20848:	mov	r3, #0
   2084c:	str	fp, [sp]
   20850:	mov	ip, #16
   20854:	str	r3, [fp, #4]
   20858:	str	r3, [sp, #48]	; 0x30
   2085c:	mov	r2, r7
   20860:	mov	r1, r5
   20864:	mov	r0, r9
   20868:	mov	r3, r6
   2086c:	strb	ip, [sp, #52]	; 0x34
   20870:	bl	169f8 <__assert_fail@plt+0x5720>
   20874:	cmp	r0, #0
   20878:	cmpne	r6, #0
   2087c:	moveq	r3, #1
   20880:	movne	r3, #0
   20884:	str	r3, [sp, #12]
   20888:	moveq	r3, #12
   2088c:	streq	r3, [sp, #36]	; 0x24
   20890:	beq	210a8 <__assert_fail@plt+0xfdd0>
   20894:	ldr	r6, [r8]
   20898:	str	r0, [r4, #52]	; 0x34
   2089c:	ldr	r0, [r6, #4]
   208a0:	lsl	r0, r0, #2
   208a4:	bl	22fcc <__assert_fail@plt+0x11cf4>
   208a8:	ldr	r3, [r6, #4]
   208ac:	str	r0, [r6, #12]
   208b0:	lsl	r0, r3, #2
   208b4:	bl	22fcc <__assert_fail@plt+0x11cf4>
   208b8:	ldr	r3, [r6, #4]
   208bc:	add	r3, r3, r3, lsl #1
   208c0:	str	r0, [r6, #16]
   208c4:	lsl	r0, r3, #2
   208c8:	bl	22fcc <__assert_fail@plt+0x11cf4>
   208cc:	ldr	r3, [r6, #4]
   208d0:	add	r3, r3, r3, lsl #1
   208d4:	str	r0, [r6, #20]
   208d8:	lsl	r0, r3, #2
   208dc:	bl	22fcc <__assert_fail@plt+0x11cf4>
   208e0:	ldr	r3, [r6, #12]
   208e4:	cmp	r3, #0
   208e8:	str	r0, [r6, #24]
   208ec:	beq	20be4 <__assert_fail@plt+0xf90c>
   208f0:	ldr	r3, [r6, #16]
   208f4:	cmp	r3, #0
   208f8:	beq	20be4 <__assert_fail@plt+0xf90c>
   208fc:	ldr	r3, [r6, #20]
   20900:	cmp	r3, #0
   20904:	beq	21078 <__assert_fail@plt+0xfda0>
   20908:	cmp	r0, #0
   2090c:	beq	20be4 <__assert_fail@plt+0xf90c>
   20910:	ldr	r0, [r8, #24]
   20914:	lsl	r0, r0, #2
   20918:	bl	22fcc <__assert_fail@plt+0x11cf4>
   2091c:	cmp	r0, #0
   20920:	str	r0, [r6, #132]	; 0x84
   20924:	beq	20998 <__assert_fail@plt+0xf6c0>
   20928:	ldr	r1, [r8, #24]
   2092c:	cmp	r1, #0
   20930:	subne	r2, r0, #4
   20934:	ldrne	r3, [sp, #12]
   20938:	beq	2094c <__assert_fail@plt+0xf674>
   2093c:	str	r3, [r2, #4]!
   20940:	add	r3, r3, #1
   20944:	cmp	r3, r1
   20948:	bne	2093c <__assert_fail@plt+0xf664>
   2094c:	ldr	r1, [pc, #2532]	; 21338 <__assert_fail@plt+0x10060>
   20950:	mov	r2, r6
   20954:	ldr	r0, [r6, #52]	; 0x34
   20958:	bl	14cfc <__assert_fail@plt+0x3a24>
   2095c:	ldr	r1, [r8, #24]
   20960:	cmp	r1, #0
   20964:	beq	21180 <__assert_fail@plt+0xfea8>
   20968:	ldr	r0, [r6, #132]	; 0x84
   2096c:	ldr	r3, [r0]
   20970:	cmp	r3, #0
   20974:	beq	20988 <__assert_fail@plt+0xf6b0>
   20978:	b	20998 <__assert_fail@plt+0xf6c0>
   2097c:	ldr	r2, [r0, r3, lsl #2]
   20980:	cmp	r2, r3
   20984:	bne	20998 <__assert_fail@plt+0xf6c0>
   20988:	add	r3, r3, #1
   2098c:	cmp	r3, r1
   20990:	bcc	2097c <__assert_fail@plt+0xf6a4>
   20994:	beq	21184 <__assert_fail@plt+0xfeac>
   20998:	mov	r2, r8
   2099c:	ldr	r1, [pc, #2456]	; 2133c <__assert_fail@plt+0x10064>
   209a0:	ldr	r0, [r6, #52]	; 0x34
   209a4:	bl	14c88 <__assert_fail@plt+0x39b0>
   209a8:	subs	r3, r0, #0
   209ac:	bne	20ab8 <__assert_fail@plt+0xf7e0>
   209b0:	mov	r2, r6
   209b4:	ldr	r1, [pc, #2436]	; 21340 <__assert_fail@plt+0x10068>
   209b8:	ldr	r0, [r6, #52]	; 0x34
   209bc:	bl	14c88 <__assert_fail@plt+0x39b0>
   209c0:	subs	r3, r0, #0
   209c4:	bne	20ab8 <__assert_fail@plt+0xf7e0>
   209c8:	mov	r2, r6
   209cc:	ldr	r1, [pc, #2416]	; 21344 <__assert_fail@plt+0x1006c>
   209d0:	ldr	r0, [r6, #52]	; 0x34
   209d4:	str	r3, [sp, #20]
   209d8:	bl	14cfc <__assert_fail@plt+0x3a24>
   209dc:	ldr	r7, [r6, #52]	; 0x34
   209e0:	ldrb	r3, [r7, #24]
   209e4:	ldr	r2, [r7, #28]
   209e8:	sub	r3, r3, #2
   209ec:	cmp	r3, #14
   209f0:	ldrls	pc, [pc, r3, lsl #2]
   209f4:	b	20de0 <__assert_fail@plt+0xfb08>
   209f8:	andeq	r0, r2, r4, ror ip
   209fc:	andeq	r0, r2, r0, ror #27
   20a00:	andeq	r0, r2, r4, ror #20
   20a04:	andeq	r0, r2, r0, ror #27
   20a08:	andeq	r0, r2, r0, ror #27
   20a0c:	andeq	r0, r2, r0, ror #27
   20a10:	andeq	r0, r2, r4, ror sp
   20a14:	andeq	r0, r2, r4, ror sp
   20a18:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20a1c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20a20:	andeq	r0, r2, r4, ror sp
   20a24:	andeq	r0, r2, r0, ror #27
   20a28:	andeq	r0, r2, r0, ror #27
   20a2c:	andeq	r0, r2, r0, ror #27
   20a30:	andeq	r0, r2, r4, ror ip
   20a34:	ldr	r6, [sp, #64]	; 0x40
   20a38:	ldr	r2, [sp, #60]	; 0x3c
   20a3c:	ldr	r0, [sp, #84]	; 0x54
   20a40:	add	r2, r2, r3
   20a44:	ldr	r1, [sp, #124]	; 0x7c
   20a48:	ldrb	r2, [r2, r0]
   20a4c:	ldrb	r2, [r1, r2]
   20a50:	strb	r2, [r6, r3]
   20a54:	add	r3, r3, #1
   20a58:	cmp	ip, r3
   20a5c:	bne	20a34 <__assert_fail@plt+0xf75c>
   20a60:	b	207a4 <__assert_fail@plt+0xf4cc>
   20a64:	ldr	r1, [r7, #16]
   20a68:	ldr	r3, [r6, #12]
   20a6c:	ldr	r5, [r1, #28]
   20a70:	str	r5, [r3, r2, lsl #2]
   20a74:	ldrb	r3, [r7, #24]
   20a78:	cmp	r3, #4
   20a7c:	bne	20c74 <__assert_fail@plt+0xf99c>
   20a80:	ldr	r3, [r6, #20]
   20a84:	add	r2, r2, r2, lsl #1
   20a88:	mov	r1, #1
   20a8c:	add	sl, r3, r2, lsl #2
   20a90:	str	r1, [r3, r2, lsl #2]
   20a94:	mov	r0, #4
   20a98:	str	r1, [sl, #4]
   20a9c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   20aa0:	cmp	r0, #0
   20aa4:	str	r0, [sl, #8]
   20aa8:	bne	20da8 <__assert_fail@plt+0xfad0>
   20aac:	mov	r3, #12
   20ab0:	str	r0, [sl, #4]
   20ab4:	str	r0, [sl]
   20ab8:	str	r3, [sp, #36]	; 0x24
   20abc:	b	206fc <__assert_fail@plt+0xf424>
   20ac0:	mov	r3, #12
   20ac4:	str	r3, [sp, #36]	; 0x24
   20ac8:	mov	r0, r4
   20acc:	bl	15b58 <__assert_fail@plt+0x4880>
   20ad0:	mov	r3, #0
   20ad4:	ldr	r0, [sp, #36]	; 0x24
   20ad8:	str	r3, [r8]
   20adc:	str	r3, [r8, #4]
   20ae0:	add	sp, sp, #148	; 0x94
   20ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ae8:	ldrb	r3, [r8, #28]
   20aec:	tst	r3, #16
   20af0:	bne	20b00 <__assert_fail@plt+0xf828>
   20af4:	ldr	r3, [r8, #24]
   20af8:	cmp	r3, #0
   20afc:	bne	21170 <__assert_fail@plt+0xfe98>
   20b00:	ldr	r3, [r6, #76]	; 0x4c
   20b04:	cmp	r3, #0
   20b08:	beq	20e78 <__assert_fail@plt+0xfba0>
   20b0c:	add	r0, r0, r0, lsl #1
   20b10:	lsl	r0, r0, #2
   20b14:	bl	22fcc <__assert_fail@plt+0x11cf4>
   20b18:	cmp	r0, #0
   20b1c:	str	r0, [r6, #28]
   20b20:	beq	20be4 <__assert_fail@plt+0xf90c>
   20b24:	ldr	r3, [r6, #8]
   20b28:	cmp	r3, #0
   20b2c:	beq	20e78 <__assert_fail@plt+0xfba0>
   20b30:	mov	r3, #0
   20b34:	mov	r2, r0
   20b38:	mov	r1, r3
   20b3c:	mov	r0, r3
   20b40:	b	20b48 <__assert_fail@plt+0xf870>
   20b44:	ldr	r2, [r6, #28]
   20b48:	add	ip, r2, r3
   20b4c:	str	r1, [r2, r3]
   20b50:	str	r1, [ip, #4]
   20b54:	str	r1, [ip, #8]
   20b58:	ldr	r2, [r6, #8]
   20b5c:	add	r0, r0, #1
   20b60:	cmp	r0, r2
   20b64:	add	r3, r3, #12
   20b68:	bcc	20b44 <__assert_fail@plt+0xf86c>
   20b6c:	cmp	r2, #0
   20b70:	beq	20e78 <__assert_fail@plt+0xfba0>
   20b74:	mov	r5, #0
   20b78:	ldr	r3, [r6, #24]
   20b7c:	str	r4, [sp, #12]
   20b80:	mov	sl, r5
   20b84:	mov	r4, r6
   20b88:	mov	ip, r2
   20b8c:	add	r1, r3, r5
   20b90:	ldmib	r1, {r0, r6}
   20b94:	cmp	r0, #0
   20b98:	subgt	r6, r6, #4
   20b9c:	movgt	r7, #0
   20ba0:	bgt	20bc0 <__assert_fail@plt+0xf8e8>
   20ba4:	b	20e64 <__assert_fail@plt+0xfb8c>
   20ba8:	ldr	r3, [r4, #24]
   20bac:	add	r7, r7, #1
   20bb0:	add	r2, r3, r5
   20bb4:	ldr	r2, [r2, #4]
   20bb8:	cmp	r7, r2
   20bbc:	bge	20e60 <__assert_fail@plt+0xfb88>
   20bc0:	ldr	r3, [r6, #4]!
   20bc4:	ldr	r0, [r4, #28]
   20bc8:	mov	r1, sl
   20bcc:	add	r3, r3, r3, lsl #1
   20bd0:	add	r0, r0, r3, lsl #2
   20bd4:	bl	14e04 <__assert_fail@plt+0x3b2c>
   20bd8:	cmp	r0, #0
   20bdc:	bne	20ba8 <__assert_fail@plt+0xf8d0>
   20be0:	ldr	r4, [sp, #12]
   20be4:	mov	r3, #12
   20be8:	str	r3, [sp, #36]	; 0x24
   20bec:	b	206fc <__assert_fail@plt+0xf424>
   20bf0:	ldrb	r3, [r6, #88]	; 0x58
   20bf4:	ldr	r5, [r6, #20]
   20bf8:	add	r2, r2, r2, lsl #1
   20bfc:	orr	r3, r3, #1
   20c00:	strb	r3, [r6, #88]	; 0x58
   20c04:	ldr	r3, [r7, #4]
   20c08:	mov	r0, #8
   20c0c:	cmp	r3, #0
   20c10:	ldrne	r3, [r3, #12]
   20c14:	ldreq	r3, [r7, #16]
   20c18:	ldr	r9, [r3, #28]
   20c1c:	ldr	r3, [r7, #8]
   20c20:	cmp	r3, #0
   20c24:	ldrne	r3, [r3, #12]
   20c28:	ldreq	r3, [r7, #16]
   20c2c:	ldr	sl, [r3, #28]
   20c30:	mov	r3, #2
   20c34:	str	r3, [r5, r2, lsl #2]
   20c38:	add	r5, r5, r2, lsl r3
   20c3c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   20c40:	cmp	r0, #0
   20c44:	str	r0, [r5, #8]
   20c48:	beq	20be4 <__assert_fail@plt+0xf90c>
   20c4c:	cmp	r9, sl
   20c50:	moveq	r3, #1
   20c54:	streq	r3, [r5, #4]
   20c58:	streq	r9, [r0]
   20c5c:	beq	20c74 <__assert_fail@plt+0xf99c>
   20c60:	mov	r3, #2
   20c64:	str	r3, [r5, #4]
   20c68:	stmlt	r0, {r9, sl}
   20c6c:	strge	sl, [r0]
   20c70:	strge	r9, [r0, #4]
   20c74:	ldr	r3, [r7, #4]
   20c78:	cmp	r3, #0
   20c7c:	ldreq	r2, [sp, #20]
   20c80:	beq	20c90 <__assert_fail@plt+0xf9b8>
   20c84:	mov	r7, r3
   20c88:	b	209e0 <__assert_fail@plt+0xf708>
   20c8c:	mov	r7, r5
   20c90:	ldr	r3, [r7, #8]
   20c94:	cmp	r3, #0
   20c98:	cmpne	r3, r2
   20c9c:	moveq	sl, #1
   20ca0:	movne	sl, #0
   20ca4:	bne	20c84 <__assert_fail@plt+0xf9ac>
   20ca8:	ldr	r5, [r7]
   20cac:	mov	r2, r7
   20cb0:	cmp	r5, #0
   20cb4:	bne	20c8c <__assert_fail@plt+0xf9b4>
   20cb8:	ldr	r9, [sp, #12]
   20cbc:	ldr	r3, [r6, #24]
   20cc0:	add	r7, r5, r5, lsl #1
   20cc4:	lsl	r7, r7, #2
   20cc8:	add	r2, r3, r7
   20ccc:	ldr	r2, [r2, #4]
   20cd0:	cmp	r2, #0
   20cd4:	beq	20df4 <__assert_fail@plt+0xfb1c>
   20cd8:	ldr	r0, [r6, #8]
   20cdc:	add	r5, r5, #1
   20ce0:	cmp	r0, r5
   20ce4:	bne	20cc0 <__assert_fail@plt+0xf9e8>
   20ce8:	cmp	r9, #0
   20cec:	beq	20ae8 <__assert_fail@plt+0xf810>
   20cf0:	ldr	r9, [sp, #12]
   20cf4:	mov	r5, #0
   20cf8:	b	20cc0 <__assert_fail@plt+0xf9e8>
   20cfc:	mov	r1, #1
   20d00:	mov	r0, #32
   20d04:	bl	22f84 <__assert_fail@plt+0x11cac>
   20d08:	cmp	r0, #0
   20d0c:	str	r0, [r4, #60]	; 0x3c
   20d10:	beq	20ac0 <__assert_fail@plt+0xf7e8>
   20d14:	mov	fp, #1
   20d18:	lsl	r9, r6, #3
   20d1c:	mov	sl, #0
   20d20:	mov	r0, r9
   20d24:	bl	11200 <btowc@plt>
   20d28:	cmn	r0, #1
   20d2c:	ldrne	r2, [r4, #60]	; 0x3c
   20d30:	ldrne	r3, [r2, r6]
   20d34:	orrne	r3, r3, fp, lsl sl
   20d38:	strne	r3, [r2, r6]
   20d3c:	bics	r3, r9, #127	; 0x7f
   20d40:	bne	20d54 <__assert_fail@plt+0xfa7c>
   20d44:	cmp	r0, r9
   20d48:	ldrbne	r3, [r4, #88]	; 0x58
   20d4c:	orrne	r3, r3, #8
   20d50:	strbne	r3, [r4, #88]	; 0x58
   20d54:	add	sl, sl, #1
   20d58:	cmp	sl, #32
   20d5c:	add	r9, r9, #1
   20d60:	bne	20d20 <__assert_fail@plt+0xfa48>
   20d64:	add	r6, r6, #4
   20d68:	cmp	r6, #32
   20d6c:	bne	20d18 <__assert_fail@plt+0xfa40>
   20d70:	b	20574 <__assert_fail@plt+0xf29c>
   20d74:	ldr	r1, [r7, #16]
   20d78:	ldr	r3, [r6, #20]
   20d7c:	add	r2, r2, r2, lsl #1
   20d80:	ldr	r5, [r1, #28]
   20d84:	add	r9, r3, r2, lsl #2
   20d88:	mov	r1, #1
   20d8c:	str	r1, [r3, r2, lsl #2]
   20d90:	mov	r0, #4
   20d94:	str	r1, [r9, #4]
   20d98:	bl	22fcc <__assert_fail@plt+0x11cf4>
   20d9c:	cmp	r0, #0
   20da0:	str	r0, [r9, #8]
   20da4:	beq	211b8 <__assert_fail@plt+0xfee0>
   20da8:	str	r5, [r0]
   20dac:	b	20c74 <__assert_fail@plt+0xf99c>
   20db0:	ldrb	r3, [r0, #3]
   20db4:	ldr	r1, [pc, #1420]	; 21348 <__assert_fail@plt+0x10070>
   20db8:	cmp	r3, #45	; 0x2d
   20dbc:	moveq	r3, #4
   20dc0:	movne	r3, #3
   20dc4:	add	r0, r0, r3
   20dc8:	bl	11008 <strcmp@plt>
   20dcc:	cmp	r0, #0
   20dd0:	ldrbeq	r3, [r4, #88]	; 0x58
   20dd4:	orreq	r3, r3, #4
   20dd8:	strbeq	r3, [r4, #88]	; 0x58
   20ddc:	b	20548 <__assert_fail@plt+0xf270>
   20de0:	ldr	r1, [r7, #16]
   20de4:	ldr	r3, [r6, #12]
   20de8:	ldr	r1, [r1, #28]
   20dec:	str	r1, [r3, r2, lsl #2]
   20df0:	b	20c74 <__assert_fail@plt+0xf99c>
   20df4:	mov	r3, #1
   20df8:	mov	r2, r5
   20dfc:	mov	r1, r6
   20e00:	mov	r0, fp
   20e04:	bl	17a68 <__assert_fail@plt+0x6790>
   20e08:	cmp	r0, #0
   20e0c:	bne	2106c <__assert_fail@plt+0xfd94>
   20e10:	ldr	r3, [r6, #24]
   20e14:	add	r7, r3, r7
   20e18:	ldr	r7, [r7, #4]
   20e1c:	cmp	r7, #0
   20e20:	bne	20cd8 <__assert_fail@plt+0xfa00>
   20e24:	ldr	r0, [sp, #56]	; 0x38
   20e28:	bl	23198 <__assert_fail@plt+0x11ec0>
   20e2c:	ldr	r3, [r6, #8]
   20e30:	add	r5, r5, #1
   20e34:	cmp	r3, r5
   20e38:	movne	r9, sl
   20e3c:	beq	20e48 <__assert_fail@plt+0xfb70>
   20e40:	ldr	r3, [r6, #24]
   20e44:	b	20cc0 <__assert_fail@plt+0xf9e8>
   20e48:	mov	r5, r7
   20e4c:	ldr	r9, [sp, #12]
   20e50:	b	20e40 <__assert_fail@plt+0xfb68>
   20e54:	add	r0, sp, #60	; 0x3c
   20e58:	bl	14f70 <__assert_fail@plt+0x3c98>
   20e5c:	b	207ac <__assert_fail@plt+0xf4d4>
   20e60:	ldr	ip, [r4, #8]
   20e64:	add	sl, sl, #1
   20e68:	cmp	sl, ip
   20e6c:	add	r5, r5, #12
   20e70:	bcc	20b8c <__assert_fail@plt+0xf8b4>
   20e74:	ldr	r4, [sp, #12]
   20e78:	ldrb	r2, [r4, #88]	; 0x58
   20e7c:	ldr	r3, [sp, #16]
   20e80:	clz	r3, r3
   20e84:	lsr	r3, r3, #5
   20e88:	mov	r1, #0
   20e8c:	ands	r3, r3, r2, lsr #2
   20e90:	str	r1, [sp, #36]	; 0x24
   20e94:	beq	20ea4 <__assert_fail@plt+0xfbcc>
   20e98:	ldr	r2, [r8, #20]
   20e9c:	cmp	r2, #0
   20ea0:	beq	211c8 <__assert_fail@plt+0xfef0>
   20ea4:	ldr	r3, [r4, #52]	; 0x34
   20ea8:	ldr	r1, [r4, #24]
   20eac:	mov	r0, fp
   20eb0:	ldr	r3, [r3, #12]
   20eb4:	ldr	r3, [r3, #28]
   20eb8:	str	r3, [r4, #72]	; 0x48
   20ebc:	add	r3, r3, r3, lsl #1
   20ec0:	add	r1, r1, r3, lsl #2
   20ec4:	bl	16e70 <__assert_fail@plt+0x5b98>
   20ec8:	cmp	r0, #0
   20ecc:	mov	r6, r0
   20ed0:	str	r0, [sp, #40]	; 0x28
   20ed4:	bne	20ffc <__assert_fail@plt+0xfd24>
   20ed8:	ldr	r3, [r4, #76]	; 0x4c
   20edc:	cmp	r3, #0
   20ee0:	ble	20fbc <__assert_fail@plt+0xfce4>
   20ee4:	ldr	r5, [sp, #52]	; 0x34
   20ee8:	cmp	r5, #0
   20eec:	ble	20fbc <__assert_fail@plt+0xfce4>
   20ef0:	mov	r7, r0
   20ef4:	b	20f04 <__assert_fail@plt+0xfc2c>
   20ef8:	add	r7, r7, #1
   20efc:	cmp	r7, r5
   20f00:	bge	20fbc <__assert_fail@plt+0xfce4>
   20f04:	ldr	r2, [sp, #56]	; 0x38
   20f08:	ldr	ip, [r4]
   20f0c:	ldr	r9, [r2, r7, lsl #2]
   20f10:	add	lr, ip, r9, lsl #3
   20f14:	ldrb	r3, [lr, #4]
   20f18:	cmp	r3, #4
   20f1c:	bne	20ef8 <__assert_fail@plt+0xfc20>
   20f20:	cmp	r5, #0
   20f24:	ble	21064 <__assert_fail@plt+0xfd8c>
   20f28:	sub	r2, r2, #4
   20f2c:	mov	r3, #0
   20f30:	b	20f40 <__assert_fail@plt+0xfc68>
   20f34:	add	r3, r3, #1
   20f38:	cmp	r5, r3
   20f3c:	beq	20ef8 <__assert_fail@plt+0xfc20>
   20f40:	ldr	r1, [r2, #4]!
   20f44:	add	r0, ip, r1, lsl #3
   20f48:	ldrb	r0, [r0, #4]
   20f4c:	cmp	r0, #9
   20f50:	bne	20f34 <__assert_fail@plt+0xfc5c>
   20f54:	ldr	r0, [ip, r1, lsl #3]
   20f58:	ldr	r1, [lr]
   20f5c:	cmp	r0, r1
   20f60:	bne	20f34 <__assert_fail@plt+0xfc5c>
   20f64:	ldr	r3, [r4, #20]
   20f68:	add	r9, r9, r9, lsl #1
   20f6c:	add	r1, sp, #56	; 0x38
   20f70:	add	r9, r3, r9, lsl #2
   20f74:	mov	r0, r5
   20f78:	ldr	r3, [r9, #8]
   20f7c:	ldr	r9, [r3]
   20f80:	mov	r2, r9
   20f84:	bl	16364 <__assert_fail@plt+0x508c>
   20f88:	cmp	r0, #0
   20f8c:	bne	20ef8 <__assert_fail@plt+0xfc20>
   20f90:	ldr	r1, [r4, #24]
   20f94:	add	r9, r9, r9, lsl #1
   20f98:	mov	r0, fp
   20f9c:	add	r1, r1, r9, lsl #2
   20fa0:	bl	178e0 <__assert_fail@plt+0x6608>
   20fa4:	cmp	r0, #0
   20fa8:	bne	211b0 <__assert_fail@plt+0xfed8>
   20fac:	ldr	r5, [sp, #52]	; 0x34
   20fb0:	mov	r7, #1
   20fb4:	cmp	r7, r5
   20fb8:	blt	20f04 <__assert_fail@plt+0xfc2c>
   20fbc:	mov	r3, #0
   20fc0:	mov	r2, fp
   20fc4:	mov	r1, r4
   20fc8:	add	r0, sp, #40	; 0x28
   20fcc:	bl	17034 <__assert_fail@plt+0x5d5c>
   20fd0:	cmp	r0, #0
   20fd4:	str	r0, [r4, #36]	; 0x24
   20fd8:	beq	21118 <__assert_fail@plt+0xfe40>
   20fdc:	ldrsb	r3, [r0, #52]	; 0x34
   20fe0:	cmp	r3, #0
   20fe4:	strge	r0, [r4, #48]	; 0x30
   20fe8:	strge	r0, [r4, #44]	; 0x2c
   20fec:	strge	r0, [r4, #40]	; 0x28
   20ff0:	blt	210b4 <__assert_fail@plt+0xfddc>
   20ff4:	ldr	r0, [sp, #56]	; 0x38
   20ff8:	bl	23198 <__assert_fail@plt+0x11ec0>
   20ffc:	ldr	r7, [r8]
   21000:	str	r6, [sp, #36]	; 0x24
   21004:	ldr	r0, [r7, #56]	; 0x38
   21008:	cmp	r0, #0
   2100c:	beq	21020 <__assert_fail@plt+0xfd48>
   21010:	ldr	r5, [r0]
   21014:	bl	23198 <__assert_fail@plt+0x11ec0>
   21018:	subs	r0, r5, #0
   2101c:	bne	21010 <__assert_fail@plt+0xfd38>
   21020:	mov	r5, #0
   21024:	mov	r3, #31
   21028:	str	r3, [r7, #64]	; 0x40
   2102c:	ldr	r0, [r7, #16]
   21030:	str	r5, [r7, #56]	; 0x38
   21034:	str	r5, [r7, #52]	; 0x34
   21038:	bl	23198 <__assert_fail@plt+0x11ec0>
   2103c:	add	r0, sp, #60	; 0x3c
   21040:	str	r5, [r7, #16]
   21044:	bl	15b28 <__assert_fail@plt+0x4850>
   21048:	ldr	r0, [sp, #36]	; 0x24
   2104c:	cmp	r0, r5
   21050:	beq	20770 <__assert_fail@plt+0xf498>
   21054:	ldr	r3, [sp, #24]
   21058:	cmp	r3, #0
   2105c:	bne	20750 <__assert_fail@plt+0xf478>
   21060:	b	20758 <__assert_fail@plt+0xf480>
   21064:	bne	20f64 <__assert_fail@plt+0xfc8c>
   21068:	b	20ef8 <__assert_fail@plt+0xfc20>
   2106c:	mov	r3, r0
   21070:	str	r3, [sp, #36]	; 0x24
   21074:	b	206fc <__assert_fail@plt+0xf424>
   21078:	mov	r3, #12
   2107c:	str	r3, [sp, #36]	; 0x24
   21080:	b	206fc <__assert_fail@plt+0xf424>
   21084:	mov	r0, r4
   21088:	mov	r1, #160	; 0xa0
   2108c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   21090:	subs	r4, r0, #0
   21094:	beq	211a8 <__assert_fail@plt+0xfed0>
   21098:	mov	r3, #160	; 0xa0
   2109c:	str	r4, [r8]
   210a0:	str	r3, [r8, #4]
   210a4:	b	2049c <__assert_fail@plt+0xf1c4>
   210a8:	mov	r3, #0
   210ac:	str	r3, [r4, #52]	; 0x34
   210b0:	b	206fc <__assert_fail@plt+0xf424>
   210b4:	mov	r3, #1
   210b8:	mov	r2, fp
   210bc:	mov	r1, r4
   210c0:	add	r0, sp, #40	; 0x28
   210c4:	bl	17034 <__assert_fail@plt+0x5d5c>
   210c8:	mov	r3, #2
   210cc:	mov	r2, fp
   210d0:	mov	r1, r4
   210d4:	str	r0, [r4, #40]	; 0x28
   210d8:	add	r0, sp, #40	; 0x28
   210dc:	bl	17034 <__assert_fail@plt+0x5d5c>
   210e0:	mov	r3, #6
   210e4:	mov	r2, fp
   210e8:	mov	r1, r4
   210ec:	str	r0, [r4, #44]	; 0x2c
   210f0:	add	r0, sp, #40	; 0x28
   210f4:	bl	17034 <__assert_fail@plt+0x5d5c>
   210f8:	ldr	r3, [r4, #40]	; 0x28
   210fc:	cmp	r3, #0
   21100:	str	r0, [r4, #48]	; 0x30
   21104:	beq	21118 <__assert_fail@plt+0xfe40>
   21108:	ldr	r3, [r4, #44]	; 0x2c
   2110c:	cmp	r0, #0
   21110:	cmpne	r3, #0
   21114:	bne	20ff4 <__assert_fail@plt+0xfd1c>
   21118:	ldr	r6, [sp, #40]	; 0x28
   2111c:	b	20ffc <__assert_fail@plt+0xfd24>
   21120:	mov	sl, r5
   21124:	mov	r1, #1
   21128:	b	204f8 <__assert_fail@plt+0xf220>
   2112c:	cmp	r7, #0
   21130:	beq	210a8 <__assert_fail@plt+0xfdd0>
   21134:	add	fp, sp, #48	; 0x30
   21138:	add	r9, r5, #56	; 0x38
   2113c:	add	r5, r5, #64	; 0x40
   21140:	str	fp, [sp]
   21144:	mov	ip, #2
   21148:	str	r6, [fp, #4]
   2114c:	mov	r3, r6
   21150:	mov	r2, r6
   21154:	mov	r1, r5
   21158:	mov	r0, r9
   2115c:	str	r6, [sp, #48]	; 0x30
   21160:	strb	ip, [sp, #52]	; 0x34
   21164:	bl	169f8 <__assert_fail@plt+0x5720>
   21168:	mov	r6, r0
   2116c:	b	20848 <__assert_fail@plt+0xf570>
   21170:	ldrb	r3, [r6, #88]	; 0x58
   21174:	tst	r3, #1
   21178:	bne	20b0c <__assert_fail@plt+0xf834>
   2117c:	b	20b00 <__assert_fail@plt+0xf828>
   21180:	ldr	r0, [r6, #132]	; 0x84
   21184:	bl	23198 <__assert_fail@plt+0x11ec0>
   21188:	mov	r3, #0
   2118c:	str	r3, [r6, #132]	; 0x84
   21190:	b	20998 <__assert_fail@plt+0xf6c0>
   21194:	ldr	r3, [sp, #96]	; 0x60
   21198:	b	207a4 <__assert_fail@plt+0xf4cc>
   2119c:	add	r0, sp, #60	; 0x3c
   211a0:	bl	15688 <__assert_fail@plt+0x43b0>
   211a4:	b	207ac <__assert_fail@plt+0xf4d4>
   211a8:	mov	r0, #12
   211ac:	b	20770 <__assert_fail@plt+0xf498>
   211b0:	mov	r6, r0
   211b4:	b	20ffc <__assert_fail@plt+0xfd24>
   211b8:	str	r0, [r9, #4]
   211bc:	str	r0, [r9]
   211c0:	mov	r3, #12
   211c4:	b	20ab8 <__assert_fail@plt+0xf7e0>
   211c8:	ldr	r7, [r4, #8]
   211cc:	cmp	r7, #0
   211d0:	beq	212f8 <__assert_fail@plt+0x10020>
   211d4:	ldr	r1, [r4]
   211d8:	mov	lr, r9
   211dc:	mov	r0, r1
   211e0:	mov	r5, r1
   211e4:	ldrb	ip, [r5, #4]
   211e8:	sub	ip, ip, #1
   211ec:	cmp	ip, #11
   211f0:	ldrls	pc, [pc, ip, lsl #2]
   211f4:	b	21294 <__assert_fail@plt+0xffbc>
   211f8:	andeq	r1, r2, r8, lsr #4
   211fc:	andeq	r1, r2, r4, lsr r2
   21200:	andeq	r1, r2, r4, asr #5
   21204:	andeq	r1, r2, r4, lsr r2
   21208:			; <UNDEFINED> instruction: 0x000212bc
   2120c:	andeq	r0, r2, r4, lsr #29
   21210:	muleq	r2, r4, r2
   21214:	andeq	r1, r2, r4, lsr r2
   21218:	andeq	r1, r2, r4, lsr r2
   2121c:	andeq	r1, r2, r4, lsr r2
   21220:	andeq	r1, r2, r4, lsr r2
   21224:	muleq	r2, r8, r2
   21228:	ldrb	ip, [r1, r2, lsl #3]
   2122c:	lsrs	ip, ip, #7
   21230:	movne	r9, r3
   21234:	add	r2, r2, #1
   21238:	cmp	r2, r7
   2123c:	add	r5, r5, #8
   21240:	bne	211e4 <__assert_fail@plt+0xff0c>
   21244:	orr	r9, r9, lr
   21248:	ands	r9, r9, #255	; 0xff
   2124c:	beq	212f8 <__assert_fail@plt+0x10020>
   21250:	add	r2, r1, r2, lsl #3
   21254:	mov	r1, #7
   21258:	b	21270 <__assert_fail@plt+0xff98>
   2125c:	cmp	r3, #5
   21260:	strbeq	r1, [r0, #4]
   21264:	add	r0, r0, #8
   21268:	cmp	r0, r2
   2126c:	beq	212f4 <__assert_fail@plt+0x1001c>
   21270:	ldrb	r3, [r0, #4]
   21274:	cmp	r3, #1
   21278:	bne	2125c <__assert_fail@plt+0xff84>
   2127c:	ldrsb	r3, [r0]
   21280:	cmp	r3, #0
   21284:	ldrblt	r3, [r0, #6]
   21288:	biclt	r3, r3, #32
   2128c:	strblt	r3, [r0, #6]
   21290:	b	21264 <__assert_fail@plt+0xff8c>
   21294:	bl	112cc <abort@plt>
   21298:	ldr	ip, [r1, r2, lsl #3]
   2129c:	cmp	ip, #32
   212a0:	beq	21234 <__assert_fail@plt+0xff5c>
   212a4:	bls	212e8 <__assert_fail@plt+0x10010>
   212a8:	cmp	ip, #64	; 0x40
   212ac:	beq	21234 <__assert_fail@plt+0xff5c>
   212b0:	cmp	ip, #128	; 0x80
   212b4:	beq	21234 <__assert_fail@plt+0xff5c>
   212b8:	b	20ea4 <__assert_fail@plt+0xfbcc>
   212bc:	mov	lr, r3
   212c0:	b	21234 <__assert_fail@plt+0xff5c>
   212c4:	ldr	ip, [r1, r2, lsl #3]
   212c8:	add	r6, ip, #12
   212cc:	add	ip, ip, #28
   212d0:	ldr	sl, [r6, #4]!
   212d4:	cmp	sl, #0
   212d8:	bne	20ea4 <__assert_fail@plt+0xfbcc>
   212dc:	cmp	r6, ip
   212e0:	bne	212d0 <__assert_fail@plt+0xfff8>
   212e4:	b	21234 <__assert_fail@plt+0xff5c>
   212e8:	cmp	ip, #16
   212ec:	beq	21234 <__assert_fail@plt+0xff5c>
   212f0:	b	20ea4 <__assert_fail@plt+0xfbcc>
   212f4:	mov	r9, lr
   212f8:	ldr	r2, [r4, #76]	; 0x4c
   212fc:	ldrb	r3, [r4, #88]	; 0x58
   21300:	cmp	r2, #0
   21304:	movle	r2, r9
   21308:	orrgt	r2, r9, #1
   2130c:	and	r2, r2, #1
   21310:	and	r3, r3, #249	; 0xf9
   21314:	orr	r3, r3, r2, lsl #1
   21318:	mov	r2, #1
   2131c:	strb	r3, [r4, #88]	; 0x58
   21320:	str	r2, [r4, #92]	; 0x5c
   21324:	b	20ea4 <__assert_fail@plt+0xfbcc>
   21328:	beq	feacbdd4 <optarg@@GLIBC_2.4+0xfea96bfc>
   2132c:	andeq	r4, r2, r0, lsr r8
	...
   21338:	andeq	r6, r1, r4, lsr #10
   2133c:	ldrdeq	r6, [r1], -ip
   21340:	andeq	r7, r1, r0, lsr #12
   21344:	andeq	r6, r1, r8, asr #11
   21348:	andeq	r4, r2, r8, ror sl
   2134c:	ldr	r3, [pc, #96]	; 213b4 <__assert_fail@plt+0x100dc>
   21350:	push	{r4, lr}
   21354:	mov	lr, r2
   21358:	ldr	r3, [r3]
   2135c:	ldrb	ip, [lr, #28]
   21360:	mov	r2, r1
   21364:	mov	r1, r0
   21368:	lsr	r0, r3, #21
   2136c:	and	r4, r0, #16
   21370:	and	r0, ip, #239	; 0xef
   21374:	orr	r0, r0, r4
   21378:	orr	r0, r0, #128	; 0x80
   2137c:	strb	r0, [lr, #28]
   21380:	mov	r0, lr
   21384:	bl	20454 <__assert_fail@plt+0xf17c>
   21388:	subs	r3, r0, #0
   2138c:	popeq	{r4, pc}
   21390:	ldr	r1, [pc, #32]	; 213b8 <__assert_fail@plt+0x100e0>
   21394:	mov	r2, #5
   21398:	add	r3, r1, r3, lsl #2
   2139c:	add	r1, r1, #32
   213a0:	ldr	r3, [r3, #416]	; 0x1a0
   213a4:	mov	r0, #0
   213a8:	add	r1, r1, r3
   213ac:	pop	{r4, lr}
   213b0:	b	110c8 <dcgettext@plt>
   213b4:	andeq	r5, r3, r8, asr #13
   213b8:	andeq	r4, r2, r0, lsr r8
   213bc:	ldr	r3, [pc, #12]	; 213d0 <__assert_fail@plt+0x100f8>
   213c0:	ldr	r2, [r3]
   213c4:	str	r0, [r3]
   213c8:	mov	r0, r2
   213cc:	bx	lr
   213d0:	andeq	r5, r3, r8, asr #13
   213d4:	push	{r4, r5, r6, lr}
   213d8:	mov	r2, #256	; 0x100
   213dc:	ldr	r5, [r0]
   213e0:	ldr	r6, [r0, #16]
   213e4:	mov	r4, r0
   213e8:	mov	r1, #0
   213ec:	mov	r0, r6
   213f0:	bl	111f4 <memset@plt>
   213f4:	ldr	r1, [r5, #36]	; 0x24
   213f8:	mov	r3, r6
   213fc:	add	r2, r1, #12
   21400:	mov	r0, r4
   21404:	add	r1, r1, #8
   21408:	bl	1a30c <__assert_fail@plt+0x9034>
   2140c:	ldr	r0, [r5, #40]	; 0x28
   21410:	ldr	r3, [r5, #36]	; 0x24
   21414:	cmp	r3, r0
   21418:	beq	21434 <__assert_fail@plt+0x1015c>
   2141c:	add	r2, r0, #12
   21420:	add	r1, r0, #8
   21424:	mov	r3, r6
   21428:	mov	r0, r4
   2142c:	bl	1a30c <__assert_fail@plt+0x9034>
   21430:	ldr	r0, [r5, #36]	; 0x24
   21434:	ldr	r1, [r5, #44]	; 0x2c
   21438:	cmp	r1, r0
   2143c:	beq	21458 <__assert_fail@plt+0x10180>
   21440:	add	r2, r1, #12
   21444:	mov	r0, r4
   21448:	mov	r3, r6
   2144c:	add	r1, r1, #8
   21450:	bl	1a30c <__assert_fail@plt+0x9034>
   21454:	ldr	r0, [r5, #36]	; 0x24
   21458:	ldr	r1, [r5, #48]	; 0x30
   2145c:	cmp	r1, r0
   21460:	beq	21478 <__assert_fail@plt+0x101a0>
   21464:	add	r2, r1, #12
   21468:	mov	r3, r6
   2146c:	add	r1, r1, #8
   21470:	mov	r0, r4
   21474:	bl	1a30c <__assert_fail@plt+0x9034>
   21478:	ldrb	r3, [r4, #28]
   2147c:	mov	r0, #0
   21480:	orr	r3, r3, #8
   21484:	strb	r3, [r4, #28]
   21488:	pop	{r4, r5, r6, pc}
   2148c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21490:	cmp	r3, r2
   21494:	mov	r5, r3
   21498:	sub	sp, sp, #52	; 0x34
   2149c:	movle	r3, #0
   214a0:	movgt	r3, #1
   214a4:	orrs	r3, r3, r5, lsr #31
   214a8:	ldrb	r3, [sp, #100]	; 0x64
   214ac:	ldr	ip, [sp, #88]	; 0x58
   214b0:	ldr	sl, [r0]
   214b4:	add	r8, r5, ip
   214b8:	ldr	r7, [sp, #96]	; 0x60
   214bc:	str	r3, [sp, #32]
   214c0:	bne	21768 <__assert_fail@plt+0x10490>
   214c4:	cmp	r8, r2
   214c8:	bgt	21760 <__assert_fail@plt+0x10488>
   214cc:	cmp	ip, #0
   214d0:	cmpge	r5, r8
   214d4:	movgt	lr, #1
   214d8:	movle	lr, #0
   214dc:	bgt	21760 <__assert_fail@plt+0x10488>
   214e0:	cmp	r8, #0
   214e4:	blt	217f4 <__assert_fail@plt+0x1051c>
   214e8:	cmp	r5, r8
   214ec:	movgt	lr, #0
   214f0:	movle	lr, #1
   214f4:	ands	r3, lr, ip, lsr #31
   214f8:	movne	r8, #0
   214fc:	ldr	lr, [pc, #796]	; 21820 <__assert_fail@plt+0x10548>
   21500:	ldr	r4, [pc, #796]	; 21824 <__assert_fail@plt+0x1054c>
   21504:	cmp	lr, #0
   21508:	mov	ip, #1
   2150c:	moveq	ip, lr
   21510:	cmp	r4, #0
   21514:	mov	lr, #1
   21518:	moveq	lr, r4
   2151c:	str	r2, [sp, #40]	; 0x28
   21520:	orr	r2, ip, lr
   21524:	ands	r3, r2, #255	; 0xff
   21528:	str	r1, [sp, #44]	; 0x2c
   2152c:	mov	r6, r0
   21530:	str	r3, [sp, #28]
   21534:	beq	21540 <__assert_fail@plt+0x10268>
   21538:	add	r0, sl, #136	; 0x88
   2153c:	bl	11050 <pthread_mutex_lock@plt>
   21540:	ldrb	r2, [r6, #28]
   21544:	cmp	r8, r5
   21548:	lsr	fp, r2, #5
   2154c:	and	r3, fp, #3
   21550:	str	r3, [sp, #36]	; 0x24
   21554:	bgt	21608 <__assert_fail@plt+0x10330>
   21558:	lsr	r1, r2, #4
   2155c:	and	r1, r1, #1
   21560:	cmp	r7, #0
   21564:	orreq	r1, r1, #1
   21568:	cmp	r1, #0
   2156c:	bne	217fc <__assert_fail@plt+0x10524>
   21570:	and	r2, r2, #6
   21574:	cmp	r2, #4
   21578:	ldrne	r0, [r6, #24]
   2157c:	beq	217c4 <__assert_fail@plt+0x104ec>
   21580:	add	fp, r0, #1
   21584:	mov	r4, fp
   21588:	lsl	r0, fp, #3
   2158c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   21590:	subs	r9, r0, #0
   21594:	beq	21778 <__assert_fail@plt+0x104a0>
   21598:	ldr	r3, [sp, #36]	; 0x24
   2159c:	str	r9, [sp, #12]
   215a0:	str	r3, [sp, #16]
   215a4:	ldr	r3, [sp, #92]	; 0x5c
   215a8:	str	fp, [sp, #8]
   215ac:	str	r3, [sp, #4]
   215b0:	str	r8, [sp]
   215b4:	ldr	r2, [sp, #40]	; 0x28
   215b8:	ldr	r1, [sp, #44]	; 0x2c
   215bc:	mov	r3, r5
   215c0:	mov	r0, r6
   215c4:	bl	1bd38 <__assert_fail@plt+0xaa60>
   215c8:	cmp	r0, #0
   215cc:	beq	2162c <__assert_fail@plt+0x10354>
   215d0:	cmp	r0, #1
   215d4:	mvneq	r5, #0
   215d8:	beq	215e0 <__assert_fail@plt+0x10308>
   215dc:	mvn	r5, #1
   215e0:	mov	r0, r9
   215e4:	bl	23198 <__assert_fail@plt+0x11ec0>
   215e8:	ldr	r3, [sp, #28]
   215ec:	cmp	r3, #0
   215f0:	beq	215fc <__assert_fail@plt+0x10324>
   215f4:	add	r0, sl, #136	; 0x88
   215f8:	bl	10fb4 <pthread_mutex_unlock@plt>
   215fc:	mov	r0, r5
   21600:	add	sp, sp, #52	; 0x34
   21604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21608:	ldr	r1, [r6, #16]
   2160c:	cmp	r1, #0
   21610:	beq	21558 <__assert_fail@plt+0x10280>
   21614:	tst	r2, #8
   21618:	bne	21558 <__assert_fail@plt+0x10280>
   2161c:	mov	r0, r6
   21620:	bl	213d4 <__assert_fail@plt+0x100fc>
   21624:	ldrb	r2, [r6, #28]
   21628:	b	21558 <__assert_fail@plt+0x10280>
   2162c:	cmp	r7, #0
   21630:	beq	216d8 <__assert_fail@plt+0x10400>
   21634:	ldrb	r8, [r6, #28]
   21638:	add	fp, r4, #1
   2163c:	lsr	r8, r8, #1
   21640:	ands	r8, r8, #3
   21644:	beq	21780 <__assert_fail@plt+0x104a8>
   21648:	cmp	r8, #1
   2164c:	movne	r8, #2
   21650:	beq	216f4 <__assert_fail@plt+0x1041c>
   21654:	cmp	r4, #0
   21658:	ble	21810 <__assert_fail@plt+0x10538>
   2165c:	ldmib	r7, {r1, r2}
   21660:	mov	r3, r9
   21664:	add	ip, r9, r4, lsl #3
   21668:	sub	r1, r1, #4
   2166c:	sub	r2, r2, #4
   21670:	ldr	r0, [r3]
   21674:	add	r3, r3, #8
   21678:	str	r0, [r1, #4]!
   2167c:	ldr	r0, [r3, #-4]
   21680:	cmp	ip, r3
   21684:	str	r0, [r2, #4]!
   21688:	bne	21670 <__assert_fail@plt+0x10398>
   2168c:	ldr	r2, [r7]
   21690:	mov	r3, r4
   21694:	cmp	r2, r4
   21698:	bls	216c0 <__assert_fail@plt+0x103e8>
   2169c:	ldmib	r7, {r0, r1}
   216a0:	mvn	r2, #0
   216a4:	str	r2, [r1, r3, lsl #2]
   216a8:	str	r2, [r0, r3, lsl #2]
   216ac:	ldr	r3, [r7]
   216b0:	add	r4, r4, #1
   216b4:	cmp	r4, r3
   216b8:	mov	r3, r4
   216bc:	bcc	216a4 <__assert_fail@plt+0x103cc>
   216c0:	ldrb	r3, [r6, #28]
   216c4:	bic	r3, r3, #6
   216c8:	orr	r8, r3, r8, lsl #1
   216cc:	tst	r8, #6
   216d0:	strb	r8, [r6, #28]
   216d4:	beq	215dc <__assert_fail@plt+0x10304>
   216d8:	ldr	r3, [sp, #32]
   216dc:	cmp	r3, #0
   216e0:	ldrne	r3, [r9, #4]
   216e4:	subne	r5, r3, r5
   216e8:	bne	215e0 <__assert_fail@plt+0x10308>
   216ec:	ldr	r5, [r9]
   216f0:	b	215e0 <__assert_fail@plt+0x10308>
   216f4:	ldr	r3, [r7]
   216f8:	cmp	r3, fp
   216fc:	bcs	21654 <__assert_fail@plt+0x1037c>
   21700:	lsl	r2, fp, #2
   21704:	mov	r1, r2
   21708:	ldr	r0, [r7, #4]
   2170c:	str	r2, [sp, #40]	; 0x28
   21710:	bl	22ff8 <__assert_fail@plt+0x11d20>
   21714:	subs	r3, r0, #0
   21718:	str	r3, [sp, #36]	; 0x24
   2171c:	beq	21818 <__assert_fail@plt+0x10540>
   21720:	ldr	r2, [sp, #40]	; 0x28
   21724:	ldr	r0, [r7, #8]
   21728:	mov	r1, r2
   2172c:	bl	22ff8 <__assert_fail@plt+0x11d20>
   21730:	ldr	r3, [sp, #36]	; 0x24
   21734:	subs	r2, r0, #0
   21738:	strne	r3, [r7, #4]
   2173c:	strne	r2, [r7, #8]
   21740:	strne	fp, [r7]
   21744:	bne	21654 <__assert_fail@plt+0x1037c>
   21748:	mov	r0, r3
   2174c:	str	r2, [sp, #36]	; 0x24
   21750:	bl	23198 <__assert_fail@plt+0x11ec0>
   21754:	ldr	r2, [sp, #36]	; 0x24
   21758:	mov	r8, r2
   2175c:	b	216c0 <__assert_fail@plt+0x103e8>
   21760:	mov	r8, r2
   21764:	b	214fc <__assert_fail@plt+0x10224>
   21768:	mvn	r5, #0
   2176c:	mov	r0, r5
   21770:	add	sp, sp, #52	; 0x34
   21774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21778:	mvn	r5, #1
   2177c:	b	215e8 <__assert_fail@plt+0x10310>
   21780:	lsl	r8, fp, #2
   21784:	mov	r0, r8
   21788:	bl	22fcc <__assert_fail@plt+0x11cf4>
   2178c:	cmp	r0, #0
   21790:	str	r0, [r7, #4]
   21794:	beq	21818 <__assert_fail@plt+0x10540>
   21798:	mov	r0, r8
   2179c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   217a0:	cmp	r0, #0
   217a4:	mov	r8, r0
   217a8:	str	r0, [r7, #8]
   217ac:	strne	fp, [r7]
   217b0:	movne	r8, #1
   217b4:	bne	21654 <__assert_fail@plt+0x1037c>
   217b8:	ldr	r0, [r7, #4]
   217bc:	bl	23198 <__assert_fail@plt+0x11ec0>
   217c0:	b	216c0 <__assert_fail@plt+0x103e8>
   217c4:	ldr	fp, [r7]
   217c8:	ldr	r0, [r6, #24]
   217cc:	cmp	fp, r0
   217d0:	bhi	21580 <__assert_fail@plt+0x102a8>
   217d4:	cmp	fp, #0
   217d8:	mov	r4, fp
   217dc:	bgt	21588 <__assert_fail@plt+0x102b0>
   217e0:	mov	fp, #1
   217e4:	mov	r7, r1
   217e8:	mov	r4, fp
   217ec:	mov	r0, #8
   217f0:	b	2158c <__assert_fail@plt+0x102b4>
   217f4:	mov	r8, lr
   217f8:	b	214fc <__assert_fail@plt+0x10224>
   217fc:	mov	fp, #1
   21800:	mov	r4, fp
   21804:	mov	r0, #8
   21808:	mov	r7, #0
   2180c:	b	2158c <__assert_fail@plt+0x102b4>
   21810:	mov	r4, #0
   21814:	b	2168c <__assert_fail@plt+0x103b4>
   21818:	mov	r8, #0
   2181c:	b	216c0 <__assert_fail@plt+0x103e8>
	...
   21828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2182c:	sub	sp, sp, #28
   21830:	mov	r5, r2
   21834:	ldr	r6, [sp, #80]	; 0x50
   21838:	ldr	r4, [sp, #64]	; 0x40
   2183c:	orr	r2, r2, r6
   21840:	orrs	r2, r2, r4
   21844:	ldrb	fp, [sp, #84]	; 0x54
   21848:	bmi	2186c <__assert_fail@plt+0x10594>
   2184c:	cmp	r4, #0
   21850:	mov	sl, r0
   21854:	mov	r7, r3
   21858:	blt	2187c <__assert_fail@plt+0x105a4>
   2185c:	mvn	r3, #-2147483648	; 0x80000000
   21860:	sub	r3, r3, r4
   21864:	cmp	r5, r3
   21868:	ble	2187c <__assert_fail@plt+0x105a4>
   2186c:	mvn	r4, #1
   21870:	mov	r0, r4
   21874:	add	sp, sp, #28
   21878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2187c:	cmp	r4, #0
   21880:	add	r9, r5, r4
   21884:	ble	21910 <__assert_fail@plt+0x10638>
   21888:	cmp	r5, #0
   2188c:	str	r1, [sp, #20]
   21890:	beq	21908 <__assert_fail@plt+0x10630>
   21894:	mov	r0, r9
   21898:	bl	22fcc <__assert_fail@plt+0x11cf4>
   2189c:	subs	r8, r0, #0
   218a0:	beq	2186c <__assert_fail@plt+0x10594>
   218a4:	ldr	r1, [sp, #20]
   218a8:	mov	r2, r5
   218ac:	bl	11068 <memcpy@plt>
   218b0:	mov	r1, r7
   218b4:	mov	r2, r4
   218b8:	add	r0, r8, r5
   218bc:	bl	11068 <memcpy@plt>
   218c0:	mov	r7, r8
   218c4:	ldr	r3, [sp, #76]	; 0x4c
   218c8:	mov	r2, r9
   218cc:	str	r3, [sp, #8]
   218d0:	ldr	r3, [sp, #72]	; 0x48
   218d4:	mov	r1, r7
   218d8:	str	r3, [sp]
   218dc:	str	fp, [sp, #12]
   218e0:	ldr	r3, [sp, #68]	; 0x44
   218e4:	str	r6, [sp, #4]
   218e8:	mov	r0, sl
   218ec:	bl	2148c <__assert_fail@plt+0x101b4>
   218f0:	mov	r4, r0
   218f4:	mov	r0, r8
   218f8:	bl	23198 <__assert_fail@plt+0x11ec0>
   218fc:	mov	r0, r4
   21900:	add	sp, sp, #28
   21904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21908:	mov	r8, r5
   2190c:	b	218c4 <__assert_fail@plt+0x105ec>
   21910:	mov	r7, r1
   21914:	mov	r8, #0
   21918:	b	218c4 <__assert_fail@plt+0x105ec>
   2191c:	push	{r4, r5, r6, r7, r8, lr}
   21920:	mov	r5, r2
   21924:	ldr	r3, [pc, #228]	; 21a10 <__assert_fail@plt+0x10738>
   21928:	mov	r2, #0
   2192c:	tst	r5, #1
   21930:	mov	r4, r0
   21934:	str	r2, [r0]
   21938:	str	r2, [r0, #4]
   2193c:	str	r2, [r0, #8]
   21940:	mov	r0, #256	; 0x100
   21944:	ldr	r6, [pc, #200]	; 21a14 <__assert_fail@plt+0x1073c>
   21948:	mov	r7, r1
   2194c:	moveq	r6, r3
   21950:	bl	22fcc <__assert_fail@plt+0x11cf4>
   21954:	cmp	r0, #0
   21958:	str	r0, [r4, #16]
   2195c:	beq	21a08 <__assert_fail@plt+0x10730>
   21960:	tst	r5, #2
   21964:	movne	r3, #4194304	; 0x400000
   21968:	moveq	r3, #0
   2196c:	orr	r6, r6, r3
   21970:	ldrb	r3, [r4, #28]
   21974:	tst	r5, #4
   21978:	lsl	r5, r5, #1
   2197c:	orrne	r3, r3, #128	; 0x80
   21980:	biceq	r3, r3, #128	; 0x80
   21984:	strb	r3, [r4, #28]
   21988:	ldrb	r2, [r4, #28]
   2198c:	and	r5, r5, #16
   21990:	mov	r3, #0
   21994:	bic	r2, r2, #16
   21998:	orr	r5, r5, r2
   2199c:	bicne	r6, r6, #64	; 0x40
   219a0:	strb	r5, [r4, #28]
   219a4:	str	r3, [r4, #20]
   219a8:	mov	r0, r7
   219ac:	orrne	r6, r6, #256	; 0x100
   219b0:	bl	111b8 <strlen@plt>
   219b4:	mov	r3, r6
   219b8:	mov	r1, r7
   219bc:	mov	r2, r0
   219c0:	mov	r0, r4
   219c4:	bl	20454 <__assert_fail@plt+0xf17c>
   219c8:	cmp	r0, #16
   219cc:	mov	r5, r0
   219d0:	beq	219ec <__assert_fail@plt+0x10714>
   219d4:	cmp	r0, #0
   219d8:	bne	219f0 <__assert_fail@plt+0x10718>
   219dc:	mov	r0, r4
   219e0:	bl	213d4 <__assert_fail@plt+0x100fc>
   219e4:	mov	r0, r5
   219e8:	pop	{r4, r5, r6, r7, r8, pc}
   219ec:	mov	r5, #8
   219f0:	ldr	r0, [r4, #16]
   219f4:	bl	23198 <__assert_fail@plt+0x11ec0>
   219f8:	mov	r3, #0
   219fc:	mov	r0, r5
   21a00:	str	r3, [r4, #16]
   21a04:	pop	{r4, r5, r6, r7, r8, pc}
   21a08:	mov	r0, #12
   21a0c:	pop	{r4, r5, r6, r7, r8, pc}
   21a10:	smlabteq	r1, r6, r2, r0
   21a14:	strdeq	fp, [r3], -ip
   21a18:	cmp	r0, #16
   21a1c:	push	{r4, r5, r6, r7, r8, lr}
   21a20:	bhi	21a88 <__assert_fail@plt+0x107b0>
   21a24:	ldr	r1, [pc, #96]	; 21a8c <__assert_fail@plt+0x107b4>
   21a28:	mov	r4, r3
   21a2c:	add	r0, r1, r0, lsl #2
   21a30:	add	r1, r1, #32
   21a34:	ldr	r3, [r0, #416]	; 0x1a0
   21a38:	mov	r6, r2
   21a3c:	add	r1, r1, r3
   21a40:	mov	r2, #5
   21a44:	mov	r0, #0
   21a48:	bl	110c8 <dcgettext@plt>
   21a4c:	mov	r7, r0
   21a50:	bl	111b8 <strlen@plt>
   21a54:	cmp	r4, #0
   21a58:	add	r5, r0, #1
   21a5c:	beq	21a80 <__assert_fail@plt+0x107a8>
   21a60:	cmp	r5, r4
   21a64:	subhi	r2, r4, #1
   21a68:	movhi	r3, #0
   21a6c:	strbhi	r3, [r6, r2]
   21a70:	movls	r2, r5
   21a74:	mov	r1, r7
   21a78:	mov	r0, r6
   21a7c:	bl	11068 <memcpy@plt>
   21a80:	mov	r0, r5
   21a84:	pop	{r4, r5, r6, r7, r8, pc}
   21a88:	bl	112cc <abort@plt>
   21a8c:	andeq	r4, r2, r0, lsr r8
   21a90:	push	{r4, r5, r6, lr}
   21a94:	mov	r4, r0
   21a98:	ldr	r5, [r0]
   21a9c:	cmp	r5, #0
   21aa0:	beq	21ae0 <__assert_fail@plt+0x10808>
   21aa4:	ldr	r2, [pc, #92]	; 21b08 <__assert_fail@plt+0x10830>
   21aa8:	ldr	r1, [pc, #92]	; 21b0c <__assert_fail@plt+0x10834>
   21aac:	cmp	r2, #0
   21ab0:	mov	r3, #1
   21ab4:	moveq	r3, r2
   21ab8:	cmp	r1, #0
   21abc:	mov	r2, #1
   21ac0:	moveq	r2, r1
   21ac4:	orr	r3, r3, r2
   21ac8:	tst	r3, #1
   21acc:	beq	21ad8 <__assert_fail@plt+0x10800>
   21ad0:	add	r0, r5, #136	; 0x88
   21ad4:	bl	11020 <pthread_mutex_destroy@plt>
   21ad8:	mov	r0, r5
   21adc:	bl	15b58 <__assert_fail@plt+0x4880>
   21ae0:	mov	r5, #0
   21ae4:	ldr	r0, [r4, #16]
   21ae8:	str	r5, [r4]
   21aec:	str	r5, [r4, #4]
   21af0:	bl	23198 <__assert_fail@plt+0x11ec0>
   21af4:	str	r5, [r4, #16]
   21af8:	ldr	r0, [r4, #20]
   21afc:	bl	23198 <__assert_fail@plt+0x11ec0>
   21b00:	str	r5, [r4, #20]
   21b04:	pop	{r4, r5, r6, pc}
	...
   21b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b14:	sub	sp, sp, #36	; 0x24
   21b18:	ldr	r4, [sp, #72]	; 0x48
   21b1c:	bics	ip, r4, #7
   21b20:	movne	r0, #2
   21b24:	beq	21b30 <__assert_fail@plt+0x10858>
   21b28:	add	sp, sp, #36	; 0x24
   21b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b30:	ands	fp, r4, #4
   21b34:	mov	r8, r3
   21b38:	str	r2, [sp, #28]
   21b3c:	mov	r7, r1
   21b40:	mov	r5, r0
   21b44:	bne	21be8 <__assert_fail@plt+0x10910>
   21b48:	mov	r0, r1
   21b4c:	bl	111b8 <strlen@plt>
   21b50:	mov	r9, r0
   21b54:	ldr	r3, [pc, #204]	; 21c28 <__assert_fail@plt+0x10950>
   21b58:	ldr	r1, [pc, #204]	; 21c2c <__assert_fail@plt+0x10954>
   21b5c:	cmp	r3, #0
   21b60:	mov	r6, #1
   21b64:	moveq	r6, r3
   21b68:	cmp	r1, #0
   21b6c:	mov	r3, #1
   21b70:	moveq	r3, r1
   21b74:	orr	r6, r6, r3
   21b78:	ands	r6, r6, #255	; 0xff
   21b7c:	ldr	sl, [r5]
   21b80:	beq	21b8c <__assert_fail@plt+0x108b4>
   21b84:	add	r0, sl, #136	; 0x88
   21b88:	bl	11050 <pthread_mutex_lock@plt>
   21b8c:	ldrb	r3, [r5, #28]
   21b90:	tst	r3, #16
   21b94:	beq	21bf4 <__assert_fail@plt+0x1091c>
   21b98:	mov	ip, #0
   21b9c:	str	r4, [sp, #16]
   21ba0:	str	r9, [sp, #4]
   21ba4:	str	r9, [sp]
   21ba8:	mov	r3, fp
   21bac:	mov	r2, r9
   21bb0:	mov	r1, r7
   21bb4:	mov	r0, r5
   21bb8:	str	ip, [sp, #12]
   21bbc:	str	ip, [sp, #8]
   21bc0:	bl	1bd38 <__assert_fail@plt+0xaa60>
   21bc4:	mov	r4, r0
   21bc8:	cmp	r6, #0
   21bcc:	beq	21bd8 <__assert_fail@plt+0x10900>
   21bd0:	add	r0, sl, #136	; 0x88
   21bd4:	bl	10fb4 <pthread_mutex_unlock@plt>
   21bd8:	adds	r0, r4, #0
   21bdc:	movne	r0, #1
   21be0:	add	sp, sp, #36	; 0x24
   21be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21be8:	ldr	fp, [r3]
   21bec:	ldr	r9, [r3, #4]
   21bf0:	b	21b54 <__assert_fail@plt+0x1087c>
   21bf4:	ldr	r3, [sp, #28]
   21bf8:	str	r4, [sp, #16]
   21bfc:	str	r3, [sp, #8]
   21c00:	str	r8, [sp, #12]
   21c04:	str	r9, [sp, #4]
   21c08:	str	r9, [sp]
   21c0c:	mov	r3, fp
   21c10:	mov	r2, r9
   21c14:	mov	r1, r7
   21c18:	mov	r0, r5
   21c1c:	bl	1bd38 <__assert_fail@plt+0xaa60>
   21c20:	mov	r4, r0
   21c24:	b	21bc8 <__assert_fail@plt+0x108f0>
	...
   21c30:	push	{r4, lr}
   21c34:	sub	sp, sp, #16
   21c38:	mov	lr, #1
   21c3c:	ldr	r4, [sp, #24]
   21c40:	mov	ip, #0
   21c44:	str	ip, [sp]
   21c48:	stmib	sp, {r2, r4, lr}
   21c4c:	bl	2148c <__assert_fail@plt+0x101b4>
   21c50:	add	sp, sp, #16
   21c54:	pop	{r4, pc}
   21c58:	push	{r4, lr}
   21c5c:	sub	sp, sp, #16
   21c60:	mov	ip, #0
   21c64:	ldr	r4, [sp, #24]
   21c68:	ldr	lr, [sp, #28]
   21c6c:	str	r2, [sp, #4]
   21c70:	str	r4, [sp]
   21c74:	str	lr, [sp, #8]
   21c78:	str	ip, [sp, #12]
   21c7c:	bl	2148c <__assert_fail@plt+0x101b4>
   21c80:	add	sp, sp, #16
   21c84:	pop	{r4, pc}
   21c88:	push	{r4, r5, lr}
   21c8c:	sub	sp, sp, #28
   21c90:	ldr	lr, [sp, #40]	; 0x28
   21c94:	ldr	ip, [sp, #44]	; 0x2c
   21c98:	ldr	r5, [sp, #48]	; 0x30
   21c9c:	ldr	r4, [sp, #52]	; 0x34
   21ca0:	str	lr, [sp]
   21ca4:	str	ip, [sp, #4]
   21ca8:	mov	lr, #1
   21cac:	mov	ip, #0
   21cb0:	str	r5, [sp, #12]
   21cb4:	str	r4, [sp, #16]
   21cb8:	str	lr, [sp, #20]
   21cbc:	str	ip, [sp, #8]
   21cc0:	bl	21828 <__assert_fail@plt+0x10550>
   21cc4:	add	sp, sp, #28
   21cc8:	pop	{r4, r5, pc}
   21ccc:	push	{r4, r5, lr}
   21cd0:	sub	sp, sp, #28
   21cd4:	ldr	lr, [sp, #40]	; 0x28
   21cd8:	ldr	ip, [sp, #44]	; 0x2c
   21cdc:	ldr	r5, [sp, #48]	; 0x30
   21ce0:	ldr	r4, [sp, #52]	; 0x34
   21ce4:	str	lr, [sp]
   21ce8:	ldr	lr, [sp, #56]	; 0x38
   21cec:	str	ip, [sp, #4]
   21cf0:	mov	ip, #0
   21cf4:	str	r5, [sp, #8]
   21cf8:	str	r4, [sp, #12]
   21cfc:	str	lr, [sp, #16]
   21d00:	str	ip, [sp, #20]
   21d04:	bl	21828 <__assert_fail@plt+0x10550>
   21d08:	add	sp, sp, #28
   21d0c:	pop	{r4, r5, pc}
   21d10:	cmp	r2, #0
   21d14:	bne	21d34 <__assert_fail@plt+0x10a5c>
   21d18:	ldrb	r3, [r0, #28]
   21d1c:	bic	r3, r3, #6
   21d20:	strb	r3, [r0, #28]
   21d24:	str	r2, [r1]
   21d28:	str	r2, [r1, #8]
   21d2c:	str	r2, [r1, #4]
   21d30:	bx	lr
   21d34:	ldrb	ip, [r0, #28]
   21d38:	bic	ip, ip, #4
   21d3c:	orr	ip, ip, #2
   21d40:	strb	ip, [r0, #28]
   21d44:	stm	r1, {r2, r3}
   21d48:	ldr	r3, [sp]
   21d4c:	str	r3, [r1, #8]
   21d50:	bx	lr
   21d54:	push	{r4, r5, r6, lr}
   21d58:	sub	sp, sp, #32
   21d5c:	cmp	r1, #0
   21d60:	mov	r4, r0
   21d64:	ldr	r5, [sp, #48]	; 0x30
   21d68:	ldr	r6, [sp, #52]	; 0x34
   21d6c:	beq	22084 <__assert_fail@plt+0x10dac>
   21d70:	stm	sp, {r2, r3}
   21d74:	mov	r3, r1
   21d78:	ldr	r2, [pc, #808]	; 220a8 <__assert_fail@plt+0x10dd0>
   21d7c:	mov	r1, #1
   21d80:	bl	11224 <__fprintf_chk@plt>
   21d84:	mov	r2, #5
   21d88:	ldr	r1, [pc, #796]	; 220ac <__assert_fail@plt+0x10dd4>
   21d8c:	mov	r0, #0
   21d90:	bl	110c8 <dcgettext@plt>
   21d94:	ldr	r3, [pc, #788]	; 220b0 <__assert_fail@plt+0x10dd8>
   21d98:	ldr	r2, [pc, #788]	; 220b4 <__assert_fail@plt+0x10ddc>
   21d9c:	str	r3, [sp]
   21da0:	mov	r1, #1
   21da4:	mov	r3, r0
   21da8:	mov	r0, r4
   21dac:	bl	11224 <__fprintf_chk@plt>
   21db0:	mov	r1, r4
   21db4:	mov	r0, #10
   21db8:	bl	110bc <fputc_unlocked@plt>
   21dbc:	mov	r2, #5
   21dc0:	ldr	r1, [pc, #752]	; 220b8 <__assert_fail@plt+0x10de0>
   21dc4:	mov	r0, #0
   21dc8:	bl	110c8 <dcgettext@plt>
   21dcc:	mov	r1, #1
   21dd0:	ldr	r3, [pc, #740]	; 220bc <__assert_fail@plt+0x10de4>
   21dd4:	mov	r2, r0
   21dd8:	mov	r0, r4
   21ddc:	bl	11224 <__fprintf_chk@plt>
   21de0:	mov	r1, r4
   21de4:	mov	r0, #10
   21de8:	bl	110bc <fputc_unlocked@plt>
   21dec:	cmp	r6, #9
   21df0:	ldrls	pc, [pc, r6, lsl #2]
   21df4:	b	2209c <__assert_fail@plt+0x10dc4>
   21df8:	andeq	r1, r2, ip, ror lr
   21dfc:	andeq	r1, r2, r4, lsl #29
   21e00:			; <UNDEFINED> instruction: 0x00021eb0
   21e04:	andeq	r1, r2, r4, ror #29
   21e08:	andeq	r1, r2, r0, lsr #30
   21e0c:	andeq	r1, r2, ip, asr pc
   21e10:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   21e14:	ldrdeq	r1, [r2], -ip
   21e18:	andeq	r2, r2, ip, lsr #32
   21e1c:	andeq	r1, r2, r0, lsr #28
   21e20:	ldr	r1, [pc, #664]	; 220c0 <__assert_fail@plt+0x10de8>
   21e24:	mov	r2, #5
   21e28:	mov	r0, #0
   21e2c:	bl	110c8 <dcgettext@plt>
   21e30:	ldr	ip, [r5, #32]
   21e34:	ldr	r1, [r5, #28]
   21e38:	ldr	r2, [r5, #24]
   21e3c:	ldr	r3, [r5]
   21e40:	ldr	r6, [r5, #20]
   21e44:	str	ip, [sp, #28]
   21e48:	ldr	lr, [r5, #16]
   21e4c:	str	r1, [sp, #24]
   21e50:	ldr	ip, [r5, #12]
   21e54:	str	r2, [sp, #20]
   21e58:	ldr	r1, [r5, #8]
   21e5c:	ldr	r2, [r5, #4]
   21e60:	str	r6, [sp, #16]
   21e64:	stmib	sp, {r1, ip, lr}
   21e68:	mov	r1, #1
   21e6c:	str	r2, [sp]
   21e70:	mov	r2, r0
   21e74:	mov	r0, r4
   21e78:	bl	11224 <__fprintf_chk@plt>
   21e7c:	add	sp, sp, #32
   21e80:	pop	{r4, r5, r6, pc}
   21e84:	mov	r2, #5
   21e88:	ldr	r1, [pc, #564]	; 220c4 <__assert_fail@plt+0x10dec>
   21e8c:	mov	r0, #0
   21e90:	bl	110c8 <dcgettext@plt>
   21e94:	ldr	r3, [r5]
   21e98:	mov	r1, #1
   21e9c:	mov	r2, r0
   21ea0:	mov	r0, r4
   21ea4:	add	sp, sp, #32
   21ea8:	pop	{r4, r5, r6, lr}
   21eac:	b	11224 <__fprintf_chk@plt>
   21eb0:	mov	r2, #5
   21eb4:	ldr	r1, [pc, #524]	; 220c8 <__assert_fail@plt+0x10df0>
   21eb8:	mov	r0, #0
   21ebc:	bl	110c8 <dcgettext@plt>
   21ec0:	ldr	r2, [r5, #4]
   21ec4:	ldr	r3, [r5]
   21ec8:	mov	r1, #1
   21ecc:	str	r2, [sp, #48]	; 0x30
   21ed0:	mov	r2, r0
   21ed4:	mov	r0, r4
   21ed8:	add	sp, sp, #32
   21edc:	pop	{r4, r5, r6, lr}
   21ee0:	b	11224 <__fprintf_chk@plt>
   21ee4:	mov	r2, #5
   21ee8:	ldr	r1, [pc, #476]	; 220cc <__assert_fail@plt+0x10df4>
   21eec:	mov	r0, #0
   21ef0:	bl	110c8 <dcgettext@plt>
   21ef4:	ldr	r1, [r5, #8]
   21ef8:	ldr	r2, [r5, #4]
   21efc:	ldr	r3, [r5]
   21f00:	str	r1, [sp, #52]	; 0x34
   21f04:	str	r2, [sp, #48]	; 0x30
   21f08:	mov	r1, #1
   21f0c:	mov	r2, r0
   21f10:	mov	r0, r4
   21f14:	add	sp, sp, #32
   21f18:	pop	{r4, r5, r6, lr}
   21f1c:	b	11224 <__fprintf_chk@plt>
   21f20:	mov	r2, #5
   21f24:	ldr	r1, [pc, #420]	; 220d0 <__assert_fail@plt+0x10df8>
   21f28:	mov	r0, #0
   21f2c:	bl	110c8 <dcgettext@plt>
   21f30:	ldr	r1, [r5, #8]
   21f34:	ldr	ip, [r5, #12]
   21f38:	ldr	r2, [r5, #4]
   21f3c:	ldr	r3, [r5]
   21f40:	stmib	sp, {r1, ip}
   21f44:	str	r2, [sp]
   21f48:	mov	r1, #1
   21f4c:	mov	r2, r0
   21f50:	mov	r0, r4
   21f54:	bl	11224 <__fprintf_chk@plt>
   21f58:	b	21e7c <__assert_fail@plt+0x10ba4>
   21f5c:	mov	r2, #5
   21f60:	ldr	r1, [pc, #364]	; 220d4 <__assert_fail@plt+0x10dfc>
   21f64:	mov	r0, #0
   21f68:	bl	110c8 <dcgettext@plt>
   21f6c:	add	r1, r5, #8
   21f70:	ldr	r2, [r5, #4]
   21f74:	ldm	r1, {r1, ip, lr}
   21f78:	ldr	r3, [r5]
   21f7c:	str	r2, [sp]
   21f80:	stmib	sp, {r1, ip, lr}
   21f84:	mov	r1, #1
   21f88:	mov	r2, r0
   21f8c:	mov	r0, r4
   21f90:	bl	11224 <__fprintf_chk@plt>
   21f94:	b	21e7c <__assert_fail@plt+0x10ba4>
   21f98:	mov	r2, #5
   21f9c:	ldr	r1, [pc, #308]	; 220d8 <__assert_fail@plt+0x10e00>
   21fa0:	mov	r0, #0
   21fa4:	bl	110c8 <dcgettext@plt>
   21fa8:	add	r1, r5, #8
   21fac:	ldr	r2, [r5, #4]
   21fb0:	ldm	r1, {r1, ip, lr}
   21fb4:	ldr	r6, [r5, #20]
   21fb8:	ldr	r3, [r5]
   21fbc:	stmib	sp, {r1, ip, lr}
   21fc0:	mov	r1, #1
   21fc4:	str	r2, [sp]
   21fc8:	str	r6, [sp, #16]
   21fcc:	mov	r2, r0
   21fd0:	mov	r0, r4
   21fd4:	bl	11224 <__fprintf_chk@plt>
   21fd8:	b	21e7c <__assert_fail@plt+0x10ba4>
   21fdc:	mov	r2, #5
   21fe0:	ldr	r1, [pc, #244]	; 220dc <__assert_fail@plt+0x10e04>
   21fe4:	mov	r0, #0
   21fe8:	bl	110c8 <dcgettext@plt>
   21fec:	ldr	r2, [r5, #24]
   21ff0:	ldr	r3, [r5]
   21ff4:	ldr	r6, [r5, #20]
   21ff8:	ldr	lr, [r5, #16]
   21ffc:	ldr	ip, [r5, #12]
   22000:	str	r2, [sp, #20]
   22004:	ldr	r1, [r5, #8]
   22008:	ldr	r2, [r5, #4]
   2200c:	str	r6, [sp, #16]
   22010:	stmib	sp, {r1, ip, lr}
   22014:	mov	r1, #1
   22018:	str	r2, [sp]
   2201c:	mov	r2, r0
   22020:	mov	r0, r4
   22024:	bl	11224 <__fprintf_chk@plt>
   22028:	b	21e7c <__assert_fail@plt+0x10ba4>
   2202c:	mov	r2, #5
   22030:	ldr	r1, [pc, #168]	; 220e0 <__assert_fail@plt+0x10e08>
   22034:	mov	r0, #0
   22038:	bl	110c8 <dcgettext@plt>
   2203c:	ldr	r1, [r5, #28]
   22040:	ldr	r2, [r5, #24]
   22044:	ldr	r3, [r5]
   22048:	ldr	r6, [r5, #20]
   2204c:	ldr	lr, [r5, #16]
   22050:	str	r1, [sp, #24]
   22054:	ldr	ip, [r5, #12]
   22058:	str	r2, [sp, #20]
   2205c:	ldr	r1, [r5, #8]
   22060:	ldr	r2, [r5, #4]
   22064:	str	r6, [sp, #16]
   22068:	stmib	sp, {r1, ip, lr}
   2206c:	mov	r1, #1
   22070:	str	r2, [sp]
   22074:	mov	r2, r0
   22078:	mov	r0, r4
   2207c:	bl	11224 <__fprintf_chk@plt>
   22080:	b	21e7c <__assert_fail@plt+0x10ba4>
   22084:	str	r3, [sp]
   22088:	mov	r1, #1
   2208c:	mov	r3, r2
   22090:	ldr	r2, [pc, #76]	; 220e4 <__assert_fail@plt+0x10e0c>
   22094:	bl	11224 <__fprintf_chk@plt>
   22098:	b	21d84 <__assert_fail@plt+0x10aac>
   2209c:	mov	r2, #5
   220a0:	ldr	r1, [pc, #64]	; 220e8 <__assert_fail@plt+0x10e10>
   220a4:	b	21e28 <__assert_fail@plt+0x10b50>
   220a8:	andeq	r4, r2, ip, ror sl
   220ac:	muleq	r2, r0, sl
   220b0:	andeq	r0, r0, r6, ror #15
   220b4:	andeq	r4, r2, r8, ror #26
   220b8:	muleq	r2, r4, sl
   220bc:	andeq	r4, r2, r0, asr #22
   220c0:	andeq	r4, r2, r0, ror ip
   220c4:	andeq	r4, r2, r4, ror #22
   220c8:	andeq	r4, r2, r4, ror fp
   220cc:	andeq	r4, r2, ip, lsl #23
   220d0:	andeq	r4, r2, r8, lsr #23
   220d4:	andeq	r4, r2, r8, asr #23
   220d8:	andeq	r4, r2, ip, ror #23
   220dc:	andeq	r4, r2, r4, lsl ip
   220e0:	andeq	r4, r2, r0, asr #24
   220e4:	andeq	r4, r2, r8, lsl #21
   220e8:	andeq	r4, r2, r4, lsr #25
   220ec:	push	{r4, r5, lr}
   220f0:	sub	sp, sp, #12
   220f4:	ldr	r5, [sp, #24]
   220f8:	ldr	ip, [r5]
   220fc:	cmp	ip, #0
   22100:	beq	2211c <__assert_fail@plt+0x10e44>
   22104:	mov	lr, r5
   22108:	mov	ip, #0
   2210c:	ldr	r4, [lr, #4]!
   22110:	add	ip, ip, #1
   22114:	cmp	r4, #0
   22118:	bne	2210c <__assert_fail@plt+0x10e34>
   2211c:	stm	sp, {r5, ip}
   22120:	bl	21d54 <__assert_fail@plt+0x10a7c>
   22124:	add	sp, sp, #12
   22128:	pop	{r4, r5, pc}
   2212c:	push	{r4, r5, lr}
   22130:	sub	sp, sp, #52	; 0x34
   22134:	add	r5, sp, #4
   22138:	ldr	r4, [sp, #64]	; 0x40
   2213c:	mov	ip, #0
   22140:	sub	r4, r4, #4
   22144:	ldr	lr, [r4, #4]!
   22148:	cmp	lr, #0
   2214c:	str	lr, [r5, #4]!
   22150:	beq	22160 <__assert_fail@plt+0x10e88>
   22154:	add	ip, ip, #1
   22158:	cmp	ip, #10
   2215c:	bne	22144 <__assert_fail@plt+0x10e6c>
   22160:	add	lr, sp, #8
   22164:	str	ip, [sp, #4]
   22168:	str	lr, [sp]
   2216c:	bl	21d54 <__assert_fail@plt+0x10a7c>
   22170:	add	sp, sp, #52	; 0x34
   22174:	pop	{r4, r5, pc}
   22178:	push	{r3}		; (str r3, [sp, #-4]!)
   2217c:	push	{r4, lr}
   22180:	sub	sp, sp, #60	; 0x3c
   22184:	add	lr, sp, #56	; 0x38
   22188:	add	r3, sp, #72	; 0x48
   2218c:	str	r3, [lr, #-44]!	; 0xffffffd4
   22190:	add	r4, sp, #68	; 0x44
   22194:	mov	r3, #0
   22198:	ldr	ip, [r4, #4]!
   2219c:	cmp	ip, #0
   221a0:	str	ip, [lr, #4]!
   221a4:	beq	221b4 <__assert_fail@plt+0x10edc>
   221a8:	add	r3, r3, #1
   221ac:	cmp	r3, #10
   221b0:	bne	22198 <__assert_fail@plt+0x10ec0>
   221b4:	add	ip, sp, #16
   221b8:	str	r3, [sp, #4]
   221bc:	str	ip, [sp]
   221c0:	ldr	r3, [sp, #68]	; 0x44
   221c4:	bl	21d54 <__assert_fail@plt+0x10a7c>
   221c8:	add	sp, sp, #60	; 0x3c
   221cc:	pop	{r4, lr}
   221d0:	add	sp, sp, #4
   221d4:	bx	lr
   221d8:	ldr	r3, [pc, #116]	; 22254 <__assert_fail@plt+0x10f7c>
   221dc:	push	{r4, lr}
   221e0:	mov	r0, #10
   221e4:	ldr	r1, [r3]
   221e8:	bl	110bc <fputc_unlocked@plt>
   221ec:	mov	r2, #5
   221f0:	ldr	r1, [pc, #96]	; 22258 <__assert_fail@plt+0x10f80>
   221f4:	mov	r0, #0
   221f8:	bl	110c8 <dcgettext@plt>
   221fc:	ldr	r2, [pc, #88]	; 2225c <__assert_fail@plt+0x10f84>
   22200:	mov	r1, r0
   22204:	mov	r0, #1
   22208:	bl	1120c <__printf_chk@plt>
   2220c:	mov	r2, #5
   22210:	ldr	r1, [pc, #72]	; 22260 <__assert_fail@plt+0x10f88>
   22214:	mov	r0, #0
   22218:	bl	110c8 <dcgettext@plt>
   2221c:	ldr	r3, [pc, #64]	; 22264 <__assert_fail@plt+0x10f8c>
   22220:	ldr	r2, [pc, #64]	; 22268 <__assert_fail@plt+0x10f90>
   22224:	mov	r1, r0
   22228:	mov	r0, #1
   2222c:	bl	1120c <__printf_chk@plt>
   22230:	mov	r2, #5
   22234:	ldr	r1, [pc, #48]	; 2226c <__assert_fail@plt+0x10f94>
   22238:	mov	r0, #0
   2223c:	bl	110c8 <dcgettext@plt>
   22240:	ldr	r2, [pc, #40]	; 22270 <__assert_fail@plt+0x10f98>
   22244:	pop	{r4, lr}
   22248:	mov	r1, r0
   2224c:	mov	r0, #1
   22250:	b	1120c <__printf_chk@plt>
   22254:	ldrdeq	r5, [r3], -r4
   22258:	andeq	r4, r2, r0, ror #25
   2225c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   22260:	andeq	r4, r2, ip, lsl #26
   22264:	andeq	r4, r2, r8, ror #6
   22268:	muleq	r2, r0, r3
   2226c:	andeq	r4, r2, r0, lsr #26
   22270:	andeq	r4, r2, r8, asr #26
   22274:	push	{r4, lr}
   22278:	bl	22fcc <__assert_fail@plt+0x11cf4>
   2227c:	cmp	r0, #0
   22280:	popne	{r4, pc}
   22284:	bl	227bc <__assert_fail@plt+0x114e4>
   22288:	push	{r4, lr}
   2228c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   22290:	cmp	r0, #0
   22294:	popne	{r4, pc}
   22298:	bl	227bc <__assert_fail@plt+0x114e4>
   2229c:	push	{r4, lr}
   222a0:	bl	22fcc <__assert_fail@plt+0x11cf4>
   222a4:	cmp	r0, #0
   222a8:	popne	{r4, pc}
   222ac:	bl	227bc <__assert_fail@plt+0x114e4>
   222b0:	push	{r4, r5, r6, lr}
   222b4:	mov	r5, r0
   222b8:	mov	r4, r1
   222bc:	bl	22ff8 <__assert_fail@plt+0x11d20>
   222c0:	cmp	r0, #0
   222c4:	popne	{r4, r5, r6, pc}
   222c8:	adds	r4, r4, #0
   222cc:	movne	r4, #1
   222d0:	cmp	r5, #0
   222d4:	orreq	r4, r4, #1
   222d8:	cmp	r4, #0
   222dc:	popeq	{r4, r5, r6, pc}
   222e0:	bl	227bc <__assert_fail@plt+0x114e4>
   222e4:	push	{r4, lr}
   222e8:	cmp	r1, #0
   222ec:	orreq	r1, r1, #1
   222f0:	bl	22ff8 <__assert_fail@plt+0x11d20>
   222f4:	cmp	r0, #0
   222f8:	popne	{r4, pc}
   222fc:	bl	227bc <__assert_fail@plt+0x114e4>
   22300:	push	{r4, r5, r6, lr}
   22304:	mov	r6, r0
   22308:	mov	r5, r1
   2230c:	mov	r4, r2
   22310:	bl	23278 <__assert_fail@plt+0x11fa0>
   22314:	cmp	r0, #0
   22318:	popne	{r4, r5, r6, pc}
   2231c:	cmp	r6, #0
   22320:	beq	22330 <__assert_fail@plt+0x11058>
   22324:	cmp	r5, #0
   22328:	cmpne	r4, #0
   2232c:	popeq	{r4, r5, r6, pc}
   22330:	bl	227bc <__assert_fail@plt+0x114e4>
   22334:	b	22300 <__assert_fail@plt+0x11028>
   22338:	cmp	r2, #0
   2233c:	cmpne	r1, #0
   22340:	moveq	r2, #1
   22344:	moveq	r1, r2
   22348:	push	{r4, lr}
   2234c:	bl	23278 <__assert_fail@plt+0x11fa0>
   22350:	cmp	r0, #0
   22354:	popne	{r4, pc}
   22358:	bl	227bc <__assert_fail@plt+0x114e4>
   2235c:	mov	r2, r1
   22360:	mov	r1, r0
   22364:	mov	r0, #0
   22368:	b	22300 <__assert_fail@plt+0x11028>
   2236c:	mov	r2, r1
   22370:	mov	r1, r0
   22374:	mov	r0, #0
   22378:	b	22338 <__assert_fail@plt+0x11060>
   2237c:	push	{r4, r5, r6, lr}
   22380:	subs	r6, r0, #0
   22384:	sub	sp, sp, #8
   22388:	mov	r5, r1
   2238c:	ldr	r4, [r1]
   22390:	beq	223cc <__assert_fail@plt+0x110f4>
   22394:	lsr	r1, r4, #1
   22398:	add	r3, r1, #1
   2239c:	mvn	r3, r3
   223a0:	cmp	r4, r3
   223a4:	bhi	223c8 <__assert_fail@plt+0x110f0>
   223a8:	add	r4, r4, #1
   223ac:	add	r4, r4, r1
   223b0:	mov	r0, r6
   223b4:	mov	r1, r4
   223b8:	bl	22300 <__assert_fail@plt+0x11028>
   223bc:	str	r4, [r5]
   223c0:	add	sp, sp, #8
   223c4:	pop	{r4, r5, r6, pc}
   223c8:	bl	227bc <__assert_fail@plt+0x114e4>
   223cc:	cmp	r4, #0
   223d0:	bne	223b0 <__assert_fail@plt+0x110d8>
   223d4:	mov	r1, r2
   223d8:	mov	r0, #64	; 0x40
   223dc:	str	r2, [sp, #4]
   223e0:	bl	233b8 <__assert_fail@plt+0x120e0>
   223e4:	ldr	r2, [sp, #4]
   223e8:	cmp	r0, #0
   223ec:	movne	r4, r0
   223f0:	addeq	r4, r0, #1
   223f4:	b	223b0 <__assert_fail@plt+0x110d8>
   223f8:	mov	r2, #1
   223fc:	b	2237c <__assert_fail@plt+0x110a4>
   22400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22404:	sub	sp, sp, #12
   22408:	ldr	r6, [r1]
   2240c:	mov	sl, r1
   22410:	mov	r9, r0
   22414:	asrs	r4, r6, #1
   22418:	mov	r5, r2
   2241c:	mov	fp, r3
   22420:	ldr	r7, [sp, #48]	; 0x30
   22424:	bmi	22590 <__assert_fail@plt+0x112b8>
   22428:	mvn	r3, #-2147483648	; 0x80000000
   2242c:	sub	r3, r3, r4
   22430:	cmp	r6, r3
   22434:	movle	r3, #0
   22438:	movgt	r3, #1
   2243c:	mvn	r8, fp
   22440:	cmp	r3, #0
   22444:	addeq	r4, r4, r6
   22448:	mvnne	r4, #-2147483648	; 0x80000000
   2244c:	lsr	r8, r8, #31
   22450:	cmp	fp, r4
   22454:	movge	r3, #0
   22458:	andlt	r3, r8, #1
   2245c:	cmp	r3, #0
   22460:	beq	22548 <__assert_fail@plt+0x11270>
   22464:	cmp	r7, #0
   22468:	blt	22618 <__assert_fail@plt+0x11340>
   2246c:	bne	22610 <__assert_fail@plt+0x11338>
   22470:	mov	r2, #64	; 0x40
   22474:	mov	r1, r7
   22478:	mov	r0, r2
   2247c:	str	r2, [sp, #4]
   22480:	bl	235c4 <__assert_fail@plt+0x122ec>
   22484:	ldr	r2, [sp, #4]
   22488:	mov	r1, r7
   2248c:	mov	r4, r0
   22490:	mov	r0, r2
   22494:	bl	237e4 <__assert_fail@plt+0x1250c>
   22498:	ldr	r2, [sp, #4]
   2249c:	sub	r1, r2, r1
   224a0:	cmp	r9, #0
   224a4:	sub	r3, r4, r6
   224a8:	streq	r9, [sl]
   224ac:	cmp	r3, r5
   224b0:	bge	22534 <__assert_fail@plt+0x1125c>
   224b4:	cmp	r5, #0
   224b8:	blt	225a4 <__assert_fail@plt+0x112cc>
   224bc:	cmp	r6, #0
   224c0:	blt	224e0 <__assert_fail@plt+0x11208>
   224c4:	mvn	r3, #-2147483648	; 0x80000000
   224c8:	sub	r3, r3, r5
   224cc:	cmp	r6, r3
   224d0:	movle	r3, #0
   224d4:	movgt	r3, #1
   224d8:	cmp	r3, #0
   224dc:	bne	226a0 <__assert_fail@plt+0x113c8>
   224e0:	add	r5, r6, r5
   224e4:	cmp	fp, r5
   224e8:	movge	r8, #0
   224ec:	andlt	r8, r8, #1
   224f0:	cmp	r8, #0
   224f4:	mov	r4, r5
   224f8:	bne	226a0 <__assert_fail@plt+0x113c8>
   224fc:	cmp	r7, #0
   22500:	blt	225b8 <__assert_fail@plt+0x112e0>
   22504:	beq	22530 <__assert_fail@plt+0x11258>
   22508:	cmp	r5, #0
   2250c:	blt	22660 <__assert_fail@plt+0x11388>
   22510:	mov	r1, r7
   22514:	mvn	r0, #-2147483648	; 0x80000000
   22518:	bl	235c4 <__assert_fail@plt+0x122ec>
   2251c:	cmp	r5, r0
   22520:	movle	r0, #0
   22524:	movgt	r0, #1
   22528:	cmp	r0, #0
   2252c:	bne	226a0 <__assert_fail@plt+0x113c8>
   22530:	mul	r1, r5, r7
   22534:	mov	r0, r9
   22538:	bl	222b0 <__assert_fail@plt+0x10fd8>
   2253c:	str	r4, [sl]
   22540:	add	sp, sp, #12
   22544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22548:	cmp	r7, #0
   2254c:	blt	225e4 <__assert_fail@plt+0x1130c>
   22550:	beq	22470 <__assert_fail@plt+0x11198>
   22554:	cmp	r4, #0
   22558:	blt	22620 <__assert_fail@plt+0x11348>
   2255c:	mov	r1, r7
   22560:	mvn	r0, #-2147483648	; 0x80000000
   22564:	bl	235c4 <__assert_fail@plt+0x122ec>
   22568:	cmp	r0, r4
   2256c:	movge	r0, #0
   22570:	movlt	r0, #1
   22574:	cmp	r0, #0
   22578:	mvnne	r2, #-2147483648	; 0x80000000
   2257c:	bne	22474 <__assert_fail@plt+0x1119c>
   22580:	mul	r1, r7, r4
   22584:	cmp	r1, #63	; 0x3f
   22588:	bgt	224a0 <__assert_fail@plt+0x111c8>
   2258c:	b	22470 <__assert_fail@plt+0x11198>
   22590:	rsb	r3, r4, #-2147483648	; 0x80000000
   22594:	cmp	r6, r3
   22598:	movge	r3, #0
   2259c:	movlt	r3, #1
   225a0:	b	2243c <__assert_fail@plt+0x11164>
   225a4:	rsb	r3, r5, #-2147483648	; 0x80000000
   225a8:	cmp	r6, r3
   225ac:	movge	r3, #0
   225b0:	movlt	r3, #1
   225b4:	b	224d8 <__assert_fail@plt+0x11200>
   225b8:	cmp	r5, #0
   225bc:	blt	22644 <__assert_fail@plt+0x1136c>
   225c0:	cmn	r7, #1
   225c4:	beq	22530 <__assert_fail@plt+0x11258>
   225c8:	mov	r1, r7
   225cc:	mov	r0, #-2147483648	; 0x80000000
   225d0:	bl	235c4 <__assert_fail@plt+0x122ec>
   225d4:	cmp	r5, r0
   225d8:	movle	r0, #0
   225dc:	movgt	r0, #1
   225e0:	b	22528 <__assert_fail@plt+0x11250>
   225e4:	cmp	r4, #0
   225e8:	blt	22684 <__assert_fail@plt+0x113ac>
   225ec:	cmn	r7, #1
   225f0:	beq	22580 <__assert_fail@plt+0x112a8>
   225f4:	mov	r1, r7
   225f8:	mov	r0, #-2147483648	; 0x80000000
   225fc:	bl	235c4 <__assert_fail@plt+0x122ec>
   22600:	cmp	r0, r4
   22604:	movge	r0, #0
   22608:	movlt	r0, #1
   2260c:	b	22574 <__assert_fail@plt+0x1129c>
   22610:	mov	r4, fp
   22614:	b	2255c <__assert_fail@plt+0x11284>
   22618:	mov	r4, fp
   2261c:	b	225ec <__assert_fail@plt+0x11314>
   22620:	cmn	r4, #1
   22624:	beq	22580 <__assert_fail@plt+0x112a8>
   22628:	mov	r1, r4
   2262c:	mov	r0, #-2147483648	; 0x80000000
   22630:	bl	235c4 <__assert_fail@plt+0x122ec>
   22634:	cmp	r7, r0
   22638:	movle	r0, #0
   2263c:	movgt	r0, #1
   22640:	b	22574 <__assert_fail@plt+0x1129c>
   22644:	mov	r1, r7
   22648:	mvn	r0, #-2147483648	; 0x80000000
   2264c:	bl	235c4 <__assert_fail@plt+0x122ec>
   22650:	cmp	r5, r0
   22654:	movge	r0, #0
   22658:	movlt	r0, #1
   2265c:	b	22528 <__assert_fail@plt+0x11250>
   22660:	cmn	r5, #1
   22664:	beq	22530 <__assert_fail@plt+0x11258>
   22668:	mov	r1, r5
   2266c:	mov	r0, #-2147483648	; 0x80000000
   22670:	bl	235c4 <__assert_fail@plt+0x122ec>
   22674:	cmp	r7, r0
   22678:	movle	r0, #0
   2267c:	movgt	r0, #1
   22680:	b	22528 <__assert_fail@plt+0x11250>
   22684:	mov	r1, r7
   22688:	mvn	r0, #-2147483648	; 0x80000000
   2268c:	bl	235c4 <__assert_fail@plt+0x122ec>
   22690:	cmp	r0, r4
   22694:	movle	r0, #0
   22698:	movgt	r0, #1
   2269c:	b	22574 <__assert_fail@plt+0x1129c>
   226a0:	bl	227bc <__assert_fail@plt+0x114e4>
   226a4:	push	{r4, lr}
   226a8:	mov	r1, #1
   226ac:	bl	22f84 <__assert_fail@plt+0x11cac>
   226b0:	cmp	r0, #0
   226b4:	popne	{r4, pc}
   226b8:	bl	227bc <__assert_fail@plt+0x114e4>
   226bc:	push	{r4, lr}
   226c0:	mov	r1, #1
   226c4:	bl	22f84 <__assert_fail@plt+0x11cac>
   226c8:	cmp	r0, #0
   226cc:	popne	{r4, pc}
   226d0:	bl	227bc <__assert_fail@plt+0x114e4>
   226d4:	push	{r4, lr}
   226d8:	bl	22f84 <__assert_fail@plt+0x11cac>
   226dc:	cmp	r0, #0
   226e0:	popne	{r4, pc}
   226e4:	bl	227bc <__assert_fail@plt+0x114e4>
   226e8:	push	{r4, lr}
   226ec:	bl	22f84 <__assert_fail@plt+0x11cac>
   226f0:	cmp	r0, #0
   226f4:	popne	{r4, pc}
   226f8:	bl	227bc <__assert_fail@plt+0x114e4>
   226fc:	push	{r4, r5, r6, lr}
   22700:	mov	r6, r0
   22704:	mov	r0, r1
   22708:	mov	r4, r1
   2270c:	bl	22fcc <__assert_fail@plt+0x11cf4>
   22710:	subs	r5, r0, #0
   22714:	beq	2272c <__assert_fail@plt+0x11454>
   22718:	mov	r2, r4
   2271c:	mov	r1, r6
   22720:	bl	11068 <memcpy@plt>
   22724:	mov	r0, r5
   22728:	pop	{r4, r5, r6, pc}
   2272c:	bl	227bc <__assert_fail@plt+0x114e4>
   22730:	push	{r4, r5, r6, lr}
   22734:	mov	r6, r0
   22738:	mov	r0, r1
   2273c:	mov	r4, r1
   22740:	bl	22fcc <__assert_fail@plt+0x11cf4>
   22744:	subs	r5, r0, #0
   22748:	beq	22760 <__assert_fail@plt+0x11488>
   2274c:	mov	r2, r4
   22750:	mov	r1, r6
   22754:	bl	11068 <memcpy@plt>
   22758:	mov	r0, r5
   2275c:	pop	{r4, r5, r6, pc}
   22760:	bl	227bc <__assert_fail@plt+0x114e4>
   22764:	push	{r4, r5, r6, lr}
   22768:	mov	r6, r0
   2276c:	add	r0, r1, #1
   22770:	mov	r4, r1
   22774:	bl	22fcc <__assert_fail@plt+0x11cf4>
   22778:	subs	r5, r0, #0
   2277c:	beq	2279c <__assert_fail@plt+0x114c4>
   22780:	mov	r3, #0
   22784:	mov	r1, r6
   22788:	strb	r3, [r5, r4]
   2278c:	mov	r2, r4
   22790:	bl	11068 <memcpy@plt>
   22794:	mov	r0, r5
   22798:	pop	{r4, r5, r6, pc}
   2279c:	bl	227bc <__assert_fail@plt+0x114e4>
   227a0:	push	{r4, lr}
   227a4:	mov	r4, r0
   227a8:	bl	111b8 <strlen@plt>
   227ac:	add	r1, r0, #1
   227b0:	mov	r0, r4
   227b4:	pop	{r4, lr}
   227b8:	b	226fc <__assert_fail@plt+0x11424>
   227bc:	ldr	r3, [pc, #44]	; 227f0 <__assert_fail@plt+0x11518>
   227c0:	push	{r4, lr}
   227c4:	mov	r2, #5
   227c8:	ldr	r1, [pc, #36]	; 227f4 <__assert_fail@plt+0x1151c>
   227cc:	mov	r0, #0
   227d0:	ldr	r4, [r3]
   227d4:	bl	110c8 <dcgettext@plt>
   227d8:	ldr	r2, [pc, #24]	; 227f8 <__assert_fail@plt+0x11520>
   227dc:	mov	r1, #0
   227e0:	mov	r3, r0
   227e4:	mov	r0, r4
   227e8:	bl	11140 <error@plt>
   227ec:	bl	112cc <abort@plt>
   227f0:	andeq	r5, r3, r0, ror r1
   227f4:	muleq	r2, r8, sp
   227f8:	andeq	r4, r2, r4, ror r4
   227fc:	push	{r4, r5, r6, r7, lr}
   22800:	sub	sp, sp, #20
   22804:	mov	r6, r2
   22808:	ldr	ip, [sp, #48]	; 0x30
   2280c:	mov	r2, r1
   22810:	mov	r7, r3
   22814:	str	ip, [sp]
   22818:	add	r3, sp, #8
   2281c:	mov	r1, #0
   22820:	mov	r5, r0
   22824:	ldr	r4, [sp, #56]	; 0x38
   22828:	bl	22aa4 <__assert_fail@plt+0x117cc>
   2282c:	cmp	r0, #0
   22830:	bne	228ac <__assert_fail@plt+0x115d4>
   22834:	ldrd	r0, [sp, #8]
   22838:	cmp	r0, r6
   2283c:	sbcs	r3, r1, r7
   22840:	ldrd	r6, [sp, #40]	; 0x28
   22844:	movlt	r3, #1
   22848:	movge	r3, #0
   2284c:	cmp	r6, r0
   22850:	sbcs	r2, r7, r1
   22854:	orrlt	r3, r3, #1
   22858:	cmp	r3, #0
   2285c:	beq	228a4 <__assert_fail@plt+0x115cc>
   22860:	cmp	r0, #1073741824	; 0x40000000
   22864:	sbcs	r3, r1, #0
   22868:	blt	228d8 <__assert_fail@plt+0x11600>
   2286c:	bl	111d0 <__errno_location@plt>
   22870:	mov	r3, #75	; 0x4b
   22874:	mov	r6, r3
   22878:	str	r3, [r0]
   2287c:	cmp	r4, #0
   22880:	moveq	r4, #1
   22884:	mov	r0, r5
   22888:	bl	1483c <__assert_fail@plt+0x3564>
   2288c:	mov	r1, r6
   22890:	ldr	r3, [sp, #52]	; 0x34
   22894:	ldr	r2, [pc, #164]	; 22940 <__assert_fail@plt+0x11668>
   22898:	str	r0, [sp]
   2289c:	mov	r0, r4
   228a0:	bl	11140 <error@plt>
   228a4:	add	sp, sp, #20
   228a8:	pop	{r4, r5, r6, r7, pc}
   228ac:	cmp	r0, #1
   228b0:	beq	22900 <__assert_fail@plt+0x11628>
   228b4:	cmp	r0, #3
   228b8:	beq	22930 <__assert_fail@plt+0x11658>
   228bc:	cmp	r4, #0
   228c0:	beq	22920 <__assert_fail@plt+0x11648>
   228c4:	bl	111d0 <__errno_location@plt>
   228c8:	ldr	r6, [r0]
   228cc:	cmp	r6, #22
   228d0:	moveq	r6, #0
   228d4:	b	22884 <__assert_fail@plt+0x115ac>
   228d8:	mov	r2, #-1073741824	; 0xc0000000
   228dc:	mvn	r3, #0
   228e0:	cmp	r0, r2
   228e4:	sbcs	r3, r1, r3
   228e8:	blt	2286c <__assert_fail@plt+0x11594>
   228ec:	bl	111d0 <__errno_location@plt>
   228f0:	mov	r3, #34	; 0x22
   228f4:	mov	r6, r3
   228f8:	str	r3, [r0]
   228fc:	b	2287c <__assert_fail@plt+0x115a4>
   22900:	bl	111d0 <__errno_location@plt>
   22904:	mov	r3, #75	; 0x4b
   22908:	mov	r6, r3
   2290c:	str	r3, [r0]
   22910:	cmp	r4, #0
   22914:	moveq	r4, #1
   22918:	bne	228cc <__assert_fail@plt+0x115f4>
   2291c:	b	22884 <__assert_fail@plt+0x115ac>
   22920:	bl	111d0 <__errno_location@plt>
   22924:	mov	r4, #1
   22928:	ldr	r6, [r0]
   2292c:	b	228cc <__assert_fail@plt+0x115f4>
   22930:	bl	111d0 <__errno_location@plt>
   22934:	mov	r6, #0
   22938:	str	r6, [r0]
   2293c:	b	22910 <__assert_fail@plt+0x11638>
   22940:	andeq	r4, r2, r0, lsl r7
   22944:	push	{r4, r5}
   22948:	mov	r1, #10
   2294c:	pop	{r4, r5}
   22950:	b	227fc <__assert_fail@plt+0x11524>
   22954:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22958:	subs	r5, r1, #0
   2295c:	mov	r4, r0
   22960:	blt	229bc <__assert_fail@plt+0x116e4>
   22964:	moveq	r6, #0
   22968:	moveq	r7, #0
   2296c:	beq	22a04 <__assert_fail@plt+0x1172c>
   22970:	ldrd	r8, [r0]
   22974:	cmp	r8, #0
   22978:	sbcs	r3, r9, #0
   2297c:	blt	22a5c <__assert_fail@plt+0x11784>
   22980:	asr	r7, r5, #31
   22984:	mov	r3, r7
   22988:	mov	r2, r5
   2298c:	mvn	r0, #0
   22990:	mvn	r1, #-2147483648	; 0x80000000
   22994:	bl	23804 <__assert_fail@plt+0x1252c>
   22998:	mov	r6, r5
   2299c:	cmp	r0, r8
   229a0:	sbcs	r3, r1, r9
   229a4:	bge	22a04 <__assert_fail@plt+0x1172c>
   229a8:	mvn	r2, #0
   229ac:	mvn	r3, #-2147483648	; 0x80000000
   229b0:	mov	r0, #1
   229b4:	strd	r2, [r4]
   229b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   229bc:	ldrd	r8, [r0]
   229c0:	cmp	r8, #0
   229c4:	sbcs	r3, r9, #0
   229c8:	blt	22a28 <__assert_fail@plt+0x11750>
   229cc:	cmn	r5, #1
   229d0:	mvneq	r6, #0
   229d4:	mvneq	r7, #0
   229d8:	beq	22a04 <__assert_fail@plt+0x1172c>
   229dc:	asr	r7, r5, #31
   229e0:	mov	r3, r7
   229e4:	mov	r2, r5
   229e8:	mov	r0, #0
   229ec:	mov	r1, #-2147483648	; 0x80000000
   229f0:	bl	23804 <__assert_fail@plt+0x1252c>
   229f4:	mov	r6, r5
   229f8:	cmp	r0, r8
   229fc:	sbcs	r3, r1, r9
   22a00:	blt	229a8 <__assert_fail@plt+0x116d0>
   22a04:	ldr	r2, [r4]
   22a08:	ldr	r1, [r4, #4]
   22a0c:	mov	r0, #0
   22a10:	mul	ip, r2, r7
   22a14:	umull	r2, r3, r2, r5
   22a18:	mla	r5, r5, r1, ip
   22a1c:	add	r3, r5, r3
   22a20:	strd	r2, [r4]
   22a24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22a28:	asr	r7, r5, #31
   22a2c:	mov	r3, r7
   22a30:	mov	r2, r5
   22a34:	mvn	r0, #0
   22a38:	mvn	r1, #-2147483648	; 0x80000000
   22a3c:	bl	23804 <__assert_fail@plt+0x1252c>
   22a40:	mov	r6, r5
   22a44:	cmp	r8, r0
   22a48:	sbcs	r3, r9, r1
   22a4c:	bge	22a04 <__assert_fail@plt+0x1172c>
   22a50:	mov	r2, #0
   22a54:	mov	r3, #-2147483648	; 0x80000000
   22a58:	b	229b0 <__assert_fail@plt+0x116d8>
   22a5c:	mvn	r3, #0
   22a60:	cmp	r9, r3
   22a64:	mvn	r2, #0
   22a68:	cmpeq	r8, r2
   22a6c:	moveq	r6, r5
   22a70:	asreq	r7, r6, #31
   22a74:	beq	22a04 <__assert_fail@plt+0x1172c>
   22a78:	mov	r3, r9
   22a7c:	mov	r2, r8
   22a80:	mov	r0, #0
   22a84:	mov	r1, #-2147483648	; 0x80000000
   22a88:	bl	23804 <__assert_fail@plt+0x1252c>
   22a8c:	asr	r7, r5, #31
   22a90:	mov	r6, r5
   22a94:	cmp	r0, r5
   22a98:	sbcs	r3, r1, r7
   22a9c:	blt	22a50 <__assert_fail@plt+0x11778>
   22aa0:	b	22a04 <__assert_fail@plt+0x1172c>
   22aa4:	cmp	r2, #36	; 0x24
   22aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22aac:	sub	sp, sp, #20
   22ab0:	bhi	22f64 <__assert_fail@plt+0x11c8c>
   22ab4:	cmp	r1, #0
   22ab8:	mov	r6, r1
   22abc:	mov	r5, r2
   22ac0:	addeq	r6, sp, #4
   22ac4:	mov	r8, r0
   22ac8:	mov	r7, r3
   22acc:	bl	111d0 <__errno_location@plt>
   22ad0:	mov	r4, #0
   22ad4:	mov	r2, r5
   22ad8:	mov	r3, r4
   22adc:	mov	r1, r6
   22ae0:	str	r4, [r0]
   22ae4:	mov	r9, r0
   22ae8:	mov	r0, r8
   22aec:	bl	11290 <__strtoll_internal@plt>
   22af0:	ldr	r5, [r6]
   22af4:	cmp	r8, r5
   22af8:	strd	r0, [sp, #8]
   22afc:	beq	22b4c <__assert_fail@plt+0x11874>
   22b00:	ldr	r4, [r9]
   22b04:	cmp	r4, #0
   22b08:	bne	22b34 <__assert_fail@plt+0x1185c>
   22b0c:	ldr	r3, [sp, #56]	; 0x38
   22b10:	cmp	r3, #0
   22b14:	beq	22b24 <__assert_fail@plt+0x1184c>
   22b18:	ldrb	r8, [r5]
   22b1c:	cmp	r8, #0
   22b20:	bne	22b84 <__assert_fail@plt+0x118ac>
   22b24:	strd	r0, [r7]
   22b28:	mov	r0, r4
   22b2c:	add	sp, sp, #20
   22b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b34:	cmp	r4, #34	; 0x22
   22b38:	beq	22d94 <__assert_fail@plt+0x11abc>
   22b3c:	mov	r4, #4
   22b40:	mov	r0, r4
   22b44:	add	sp, sp, #20
   22b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b4c:	ldr	r3, [sp, #56]	; 0x38
   22b50:	cmp	r3, r4
   22b54:	beq	22b3c <__assert_fail@plt+0x11864>
   22b58:	ldrb	r1, [r5]
   22b5c:	cmp	r1, r4
   22b60:	beq	22b3c <__assert_fail@plt+0x11864>
   22b64:	mov	r0, r3
   22b68:	bl	111c4 <strchr@plt>
   22b6c:	cmp	r0, r4
   22b70:	beq	22b3c <__assert_fail@plt+0x11864>
   22b74:	ldrb	r8, [r5]
   22b78:	mov	r2, #1
   22b7c:	mov	r3, #0
   22b80:	strd	r2, [sp, #8]
   22b84:	mov	r1, r8
   22b88:	ldr	r0, [sp, #56]	; 0x38
   22b8c:	bl	111c4 <strchr@plt>
   22b90:	cmp	r0, #0
   22b94:	beq	22f54 <__assert_fail@plt+0x11c7c>
   22b98:	sub	r3, r8, #69	; 0x45
   22b9c:	cmp	r3, #47	; 0x2f
   22ba0:	ldrls	pc, [pc, r3, lsl #2]
   22ba4:	b	22c68 <__assert_fail@plt+0x11990>
   22ba8:	andeq	r2, r2, r8, asr sp
   22bac:	andeq	r2, r2, r8, ror #24
   22bb0:	andeq	r2, r2, r8, asr sp
   22bb4:	andeq	r2, r2, r8, ror #24
   22bb8:	andeq	r2, r2, r8, ror #24
   22bbc:	andeq	r2, r2, r8, ror #24
   22bc0:	andeq	r2, r2, r8, asr sp
   22bc4:	andeq	r2, r2, r8, ror #24
   22bc8:	andeq	r2, r2, r8, asr sp
   22bcc:	andeq	r2, r2, r8, ror #24
   22bd0:	andeq	r2, r2, r8, ror #24
   22bd4:	andeq	r2, r2, r8, asr sp
   22bd8:	andeq	r2, r2, r8, ror #24
   22bdc:	andeq	r2, r2, r8, ror #24
   22be0:	andeq	r2, r2, r8, ror #24
   22be4:	andeq	r2, r2, r8, asr sp
   22be8:	andeq	r2, r2, r8, ror #24
   22bec:	andeq	r2, r2, r8, ror #24
   22bf0:	andeq	r2, r2, r8, ror #24
   22bf4:	andeq	r2, r2, r8, ror #24
   22bf8:	andeq	r2, r2, r8, asr sp
   22bfc:	andeq	r2, r2, r8, asr sp
   22c00:	andeq	r2, r2, r8, ror #24
   22c04:	andeq	r2, r2, r8, ror #24
   22c08:	andeq	r2, r2, r8, ror #24
   22c0c:	andeq	r2, r2, r8, ror #24
   22c10:	andeq	r2, r2, r8, ror #24
   22c14:	andeq	r2, r2, r8, ror #24
   22c18:	andeq	r2, r2, r8, ror #24
   22c1c:	andeq	r2, r2, r8, ror #24
   22c20:	andeq	r2, r2, r8, ror #24
   22c24:	andeq	r2, r2, r8, ror #24
   22c28:	andeq	r2, r2, r8, ror #24
   22c2c:	andeq	r2, r2, r8, ror #24
   22c30:	andeq	r2, r2, r8, asr sp
   22c34:	andeq	r2, r2, r8, ror #24
   22c38:	andeq	r2, r2, r8, ror #24
   22c3c:	andeq	r2, r2, r8, ror #24
   22c40:	andeq	r2, r2, r8, asr sp
   22c44:	andeq	r2, r2, r8, ror #24
   22c48:	andeq	r2, r2, r8, asr sp
   22c4c:	andeq	r2, r2, r8, ror #24
   22c50:	andeq	r2, r2, r8, ror #24
   22c54:	andeq	r2, r2, r8, ror #24
   22c58:	andeq	r2, r2, r8, ror #24
   22c5c:	andeq	r2, r2, r8, ror #24
   22c60:	andeq	r2, r2, r8, ror #24
   22c64:	andeq	r2, r2, r8, asr sp
   22c68:	mov	sl, #1
   22c6c:	mov	r9, #1024	; 0x400
   22c70:	sub	r8, r8, #66	; 0x42
   22c74:	cmp	r8, #53	; 0x35
   22c78:	ldrls	pc, [pc, r8, lsl #2]
   22c7c:	b	22f54 <__assert_fail@plt+0x11c7c>
   22c80:	andeq	r2, r2, ip, ror #28
   22c84:	andeq	r2, r2, r4, asr pc
   22c88:	andeq	r2, r2, r4, asr pc
   22c8c:	andeq	r2, r2, r4, asr #28
   22c90:	andeq	r2, r2, r4, asr pc
   22c94:	andeq	r2, r2, r8, lsl lr
   22c98:	andeq	r2, r2, r4, asr pc
   22c9c:	andeq	r2, r2, r4, asr pc
   22ca0:	andeq	r2, r2, r4, asr pc
   22ca4:	andeq	r2, r2, r0, lsl #28
   22ca8:	andeq	r2, r2, r4, asr pc
   22cac:	ldrdeq	r2, [r2], -r8
   22cb0:	andeq	r2, r2, r4, asr pc
   22cb4:	andeq	r2, r2, r4, asr pc
   22cb8:	andeq	r2, r2, ip, lsr #30
   22cbc:	andeq	r2, r2, r4, asr pc
   22cc0:	andeq	r2, r2, r4, asr pc
   22cc4:	andeq	r2, r2, r4, asr pc
   22cc8:	andeq	r2, r2, r4, lsl #30
   22ccc:	andeq	r2, r2, r4, asr pc
   22cd0:	andeq	r2, r2, r4, asr pc
   22cd4:	andeq	r2, r2, r4, asr pc
   22cd8:	andeq	r2, r2, r4, asr pc
   22cdc:	ldrdeq	r2, [r2], -ip
   22ce0:			; <UNDEFINED> instruction: 0x00022eb4
   22ce4:	andeq	r2, r2, r4, asr pc
   22ce8:	andeq	r2, r2, r4, asr pc
   22cec:	andeq	r2, r2, r4, asr pc
   22cf0:	andeq	r2, r2, r4, asr pc
   22cf4:	andeq	r2, r2, r4, asr pc
   22cf8:	andeq	r2, r2, r4, asr pc
   22cfc:	andeq	r2, r2, r4, asr pc
   22d00:	muleq	r2, ip, lr
   22d04:			; <UNDEFINED> instruction: 0x00022db4
   22d08:	andeq	r2, r2, r4, asr pc
   22d0c:	andeq	r2, r2, r4, asr pc
   22d10:	andeq	r2, r2, r4, asr pc
   22d14:	andeq	r2, r2, r8, lsl lr
   22d18:	andeq	r2, r2, r4, asr pc
   22d1c:	andeq	r2, r2, r4, asr pc
   22d20:	andeq	r2, r2, r4, asr pc
   22d24:	andeq	r2, r2, r0, lsl #28
   22d28:	andeq	r2, r2, r4, asr pc
   22d2c:	ldrdeq	r2, [r2], -r8
   22d30:	andeq	r2, r2, r4, asr pc
   22d34:	andeq	r2, r2, r4, asr pc
   22d38:	andeq	r2, r2, r4, asr pc
   22d3c:	andeq	r2, r2, r4, asr pc
   22d40:	andeq	r2, r2, r4, asr pc
   22d44:	andeq	r2, r2, r4, asr pc
   22d48:	andeq	r2, r2, r4, lsl #30
   22d4c:	andeq	r2, r2, r4, asr pc
   22d50:	andeq	r2, r2, r4, asr pc
   22d54:	andeq	r2, r2, r4, lsl #29
   22d58:	mov	r1, #48	; 0x30
   22d5c:	ldr	r0, [sp, #56]	; 0x38
   22d60:	bl	111c4 <strchr@plt>
   22d64:	cmp	r0, #0
   22d68:	beq	22c68 <__assert_fail@plt+0x11990>
   22d6c:	ldrb	r3, [r5, #1]
   22d70:	cmp	r3, #68	; 0x44
   22d74:	beq	22d88 <__assert_fail@plt+0x11ab0>
   22d78:	cmp	r3, #105	; 0x69
   22d7c:	beq	22d9c <__assert_fail@plt+0x11ac4>
   22d80:	cmp	r3, #66	; 0x42
   22d84:	bne	22c68 <__assert_fail@plt+0x11990>
   22d88:	mov	sl, #2
   22d8c:	mov	r9, #1000	; 0x3e8
   22d90:	b	22c70 <__assert_fail@plt+0x11998>
   22d94:	mov	r4, #1
   22d98:	b	22b0c <__assert_fail@plt+0x11834>
   22d9c:	ldrb	sl, [r5, #2]
   22da0:	mov	r9, #1024	; 0x400
   22da4:	cmp	sl, #66	; 0x42
   22da8:	movne	sl, #1
   22dac:	moveq	sl, #3
   22db0:	b	22c70 <__assert_fail@plt+0x11998>
   22db4:	mov	r8, #0
   22db8:	add	r3, r5, sl
   22dbc:	str	r3, [r6]
   22dc0:	ldrb	r3, [r5, sl]
   22dc4:	orr	r4, r4, r8
   22dc8:	ldrd	r0, [sp, #8]
   22dcc:	cmp	r3, #0
   22dd0:	orrne	r4, r4, #2
   22dd4:	b	22b24 <__assert_fail@plt+0x1184c>
   22dd8:	mov	r1, r9
   22ddc:	add	r0, sp, #8
   22de0:	bl	22954 <__assert_fail@plt+0x1167c>
   22de4:	mov	r1, r9
   22de8:	mov	r8, r0
   22dec:	add	r0, sp, #8
   22df0:	bl	22954 <__assert_fail@plt+0x1167c>
   22df4:	ldr	r5, [r6]
   22df8:	orr	r8, r8, r0
   22dfc:	b	22db8 <__assert_fail@plt+0x11ae0>
   22e00:	mov	r1, r9
   22e04:	add	r0, sp, #8
   22e08:	bl	22954 <__assert_fail@plt+0x1167c>
   22e0c:	ldr	r5, [r6]
   22e10:	mov	r8, r0
   22e14:	b	22db8 <__assert_fail@plt+0x11ae0>
   22e18:	mov	fp, #3
   22e1c:	mov	r8, #0
   22e20:	add	r5, sp, #8
   22e24:	mov	r1, r9
   22e28:	mov	r0, r5
   22e2c:	bl	22954 <__assert_fail@plt+0x1167c>
   22e30:	subs	fp, fp, #1
   22e34:	orr	r8, r8, r0
   22e38:	bne	22e24 <__assert_fail@plt+0x11b4c>
   22e3c:	ldr	r5, [r6]
   22e40:	b	22db8 <__assert_fail@plt+0x11ae0>
   22e44:	mov	fp, #6
   22e48:	mov	r8, #0
   22e4c:	add	r5, sp, #8
   22e50:	mov	r1, r9
   22e54:	mov	r0, r5
   22e58:	bl	22954 <__assert_fail@plt+0x1167c>
   22e5c:	subs	fp, fp, #1
   22e60:	orr	r8, r8, r0
   22e64:	bne	22e50 <__assert_fail@plt+0x11b78>
   22e68:	b	22e3c <__assert_fail@plt+0x11b64>
   22e6c:	mov	r1, #1024	; 0x400
   22e70:	add	r0, sp, #8
   22e74:	bl	22954 <__assert_fail@plt+0x1167c>
   22e78:	ldr	r5, [r6]
   22e7c:	mov	r8, r0
   22e80:	b	22db8 <__assert_fail@plt+0x11ae0>
   22e84:	mov	r1, #2
   22e88:	add	r0, sp, #8
   22e8c:	bl	22954 <__assert_fail@plt+0x1167c>
   22e90:	ldr	r5, [r6]
   22e94:	mov	r8, r0
   22e98:	b	22db8 <__assert_fail@plt+0x11ae0>
   22e9c:	mov	r1, #512	; 0x200
   22ea0:	add	r0, sp, #8
   22ea4:	bl	22954 <__assert_fail@plt+0x1167c>
   22ea8:	ldr	r5, [r6]
   22eac:	mov	r8, r0
   22eb0:	b	22db8 <__assert_fail@plt+0x11ae0>
   22eb4:	mov	fp, #7
   22eb8:	mov	r8, #0
   22ebc:	add	r5, sp, #8
   22ec0:	mov	r1, r9
   22ec4:	mov	r0, r5
   22ec8:	bl	22954 <__assert_fail@plt+0x1167c>
   22ecc:	subs	fp, fp, #1
   22ed0:	orr	r8, r8, r0
   22ed4:	bne	22ec0 <__assert_fail@plt+0x11be8>
   22ed8:	b	22e3c <__assert_fail@plt+0x11b64>
   22edc:	mov	fp, #8
   22ee0:	mov	r8, #0
   22ee4:	add	r5, sp, fp
   22ee8:	mov	r1, r9
   22eec:	mov	r0, r5
   22ef0:	bl	22954 <__assert_fail@plt+0x1167c>
   22ef4:	subs	fp, fp, #1
   22ef8:	orr	r8, r8, r0
   22efc:	bne	22ee8 <__assert_fail@plt+0x11c10>
   22f00:	b	22e3c <__assert_fail@plt+0x11b64>
   22f04:	mov	fp, #4
   22f08:	mov	r8, #0
   22f0c:	add	r5, sp, #8
   22f10:	mov	r1, r9
   22f14:	mov	r0, r5
   22f18:	bl	22954 <__assert_fail@plt+0x1167c>
   22f1c:	subs	fp, fp, #1
   22f20:	orr	r8, r8, r0
   22f24:	bne	22f10 <__assert_fail@plt+0x11c38>
   22f28:	b	22e3c <__assert_fail@plt+0x11b64>
   22f2c:	mov	fp, #5
   22f30:	mov	r8, #0
   22f34:	add	r5, sp, #8
   22f38:	mov	r1, r9
   22f3c:	mov	r0, r5
   22f40:	bl	22954 <__assert_fail@plt+0x1167c>
   22f44:	subs	fp, fp, #1
   22f48:	orr	r8, r8, r0
   22f4c:	bne	22f38 <__assert_fail@plt+0x11c60>
   22f50:	b	22e3c <__assert_fail@plt+0x11b64>
   22f54:	ldrd	r2, [sp, #8]
   22f58:	orr	r4, r4, #2
   22f5c:	strd	r2, [r7]
   22f60:	b	22b28 <__assert_fail@plt+0x11850>
   22f64:	ldr	r3, [pc, #12]	; 22f78 <__assert_fail@plt+0x11ca0>
   22f68:	mov	r2, #85	; 0x55
   22f6c:	ldr	r1, [pc, #8]	; 22f7c <__assert_fail@plt+0x11ca4>
   22f70:	ldr	r0, [pc, #8]	; 22f80 <__assert_fail@plt+0x11ca8>
   22f74:	bl	112d8 <__assert_fail@plt>
   22f78:	andeq	r4, r2, ip, lsr #27
   22f7c:			; <UNDEFINED> instruction: 0x00024db8
   22f80:	andeq	r4, r2, r8, asr #27
   22f84:	cmp	r1, #0
   22f88:	cmpne	r0, #0
   22f8c:	moveq	r1, #1
   22f90:	moveq	r0, r1
   22f94:	umull	r2, r3, r0, r1
   22f98:	adds	r3, r3, #0
   22f9c:	movne	r3, #1
   22fa0:	cmp	r2, #0
   22fa4:	blt	22fb4 <__assert_fail@plt+0x11cdc>
   22fa8:	cmp	r3, #0
   22fac:	bne	22fb4 <__assert_fail@plt+0x11cdc>
   22fb0:	b	10fc0 <calloc@plt>
   22fb4:	push	{r4, lr}
   22fb8:	bl	111d0 <__errno_location@plt>
   22fbc:	mov	r3, #12
   22fc0:	str	r3, [r0]
   22fc4:	mov	r0, #0
   22fc8:	pop	{r4, pc}
   22fcc:	cmp	r0, #0
   22fd0:	moveq	r0, #1
   22fd4:	cmp	r0, #0
   22fd8:	blt	22fe0 <__assert_fail@plt+0x11d08>
   22fdc:	b	1114c <malloc@plt>
   22fe0:	push	{r4, lr}
   22fe4:	bl	111d0 <__errno_location@plt>
   22fe8:	mov	r3, #12
   22fec:	str	r3, [r0]
   22ff0:	mov	r0, #0
   22ff4:	pop	{r4, pc}
   22ff8:	cmp	r0, #0
   22ffc:	beq	23020 <__assert_fail@plt+0x11d48>
   23000:	cmp	r1, #0
   23004:	push	{lr}		; (str lr, [sp, #-4]!)
   23008:	sub	sp, sp, #12
   2300c:	beq	23028 <__assert_fail@plt+0x11d50>
   23010:	blt	23040 <__assert_fail@plt+0x11d68>
   23014:	add	sp, sp, #12
   23018:	pop	{lr}		; (ldr lr, [sp], #4)
   2301c:	b	110d4 <realloc@plt>
   23020:	mov	r0, r1
   23024:	b	22fcc <__assert_fail@plt+0x11cf4>
   23028:	str	r1, [sp, #4]
   2302c:	bl	23198 <__assert_fail@plt+0x11ec0>
   23030:	ldr	r3, [sp, #4]
   23034:	mov	r0, r3
   23038:	add	sp, sp, #12
   2303c:	pop	{pc}		; (ldr pc, [sp], #4)
   23040:	bl	111d0 <__errno_location@plt>
   23044:	mov	r2, #12
   23048:	mov	r3, #0
   2304c:	str	r2, [r0]
   23050:	b	23034 <__assert_fail@plt+0x11d5c>
   23054:	push	{r4, r5, r6, lr}
   23058:	mov	r4, r0
   2305c:	bl	11128 <__fpending@plt>
   23060:	ldr	r5, [r4]
   23064:	and	r5, r5, #32
   23068:	mov	r6, r0
   2306c:	mov	r0, r4
   23070:	bl	126ac <__assert_fail@plt+0x13d4>
   23074:	cmp	r5, #0
   23078:	mov	r4, r0
   2307c:	bne	2309c <__assert_fail@plt+0x11dc4>
   23080:	cmp	r0, #0
   23084:	beq	23094 <__assert_fail@plt+0x11dbc>
   23088:	cmp	r6, #0
   2308c:	beq	230b8 <__assert_fail@plt+0x11de0>
   23090:	mvn	r4, #0
   23094:	mov	r0, r4
   23098:	pop	{r4, r5, r6, pc}
   2309c:	cmp	r0, #0
   230a0:	bne	23090 <__assert_fail@plt+0x11db8>
   230a4:	bl	111d0 <__errno_location@plt>
   230a8:	str	r4, [r0]
   230ac:	mvn	r4, #0
   230b0:	mov	r0, r4
   230b4:	pop	{r4, r5, r6, pc}
   230b8:	bl	111d0 <__errno_location@plt>
   230bc:	ldr	r4, [r0]
   230c0:	subs	r4, r4, #9
   230c4:	mvnne	r4, #0
   230c8:	mov	r0, r4
   230cc:	pop	{r4, r5, r6, pc}
   230d0:	ldr	ip, [r0, #4]
   230d4:	cmp	ip, r1
   230d8:	bcs	23154 <__assert_fail@plt+0x11e7c>
   230dc:	cmp	r3, #0
   230e0:	push	{r4, r5, r6, r7, r8, lr}
   230e4:	mov	r6, r3
   230e8:	mov	r7, r2
   230ec:	mov	r5, r1
   230f0:	mov	r4, r0
   230f4:	bne	23128 <__assert_fail@plt+0x11e50>
   230f8:	ldr	r0, [r4, #8]
   230fc:	mul	r1, r6, r5
   23100:	cmp	r0, r7
   23104:	beq	23164 <__assert_fail@plt+0x11e8c>
   23108:	bl	22ff8 <__assert_fail@plt+0x11d20>
   2310c:	subs	r7, r0, #0
   23110:	beq	23190 <__assert_fail@plt+0x11eb8>
   23114:	mov	r3, #1
   23118:	stmib	r4, {r5, r7}
   2311c:	str	r5, [r4]
   23120:	mov	r0, r3
   23124:	pop	{r4, r5, r6, r7, r8, pc}
   23128:	mov	r1, r3
   2312c:	mvn	r0, #0
   23130:	bl	233b8 <__assert_fail@plt+0x120e0>
   23134:	cmp	r5, r0
   23138:	bls	230f8 <__assert_fail@plt+0x11e20>
   2313c:	bl	111d0 <__errno_location@plt>
   23140:	mov	r3, #0
   23144:	mov	r2, #12
   23148:	str	r2, [r0]
   2314c:	mov	r0, r3
   23150:	pop	{r4, r5, r6, r7, r8, pc}
   23154:	mov	r3, #1
   23158:	str	r1, [r0]
   2315c:	mov	r0, r3
   23160:	bx	lr
   23164:	mov	r0, r1
   23168:	bl	22fcc <__assert_fail@plt+0x11cf4>
   2316c:	subs	r7, r0, #0
   23170:	beq	23190 <__assert_fail@plt+0x11eb8>
   23174:	ldr	r1, [r4, #8]
   23178:	cmp	r1, #0
   2317c:	beq	23114 <__assert_fail@plt+0x11e3c>
   23180:	ldr	r2, [r4]
   23184:	mul	r2, r2, r6
   23188:	bl	11068 <memcpy@plt>
   2318c:	b	23114 <__assert_fail@plt+0x11e3c>
   23190:	mov	r3, #0
   23194:	b	23120 <__assert_fail@plt+0x11e48>
   23198:	push	{r4, r5, lr}
   2319c:	sub	sp, sp, #12
   231a0:	mov	r5, r0
   231a4:	bl	111d0 <__errno_location@plt>
   231a8:	mov	r2, #0
   231ac:	mov	r4, r0
   231b0:	ldr	r3, [r0]
   231b4:	str	r2, [r4]
   231b8:	mov	r0, r5
   231bc:	str	r3, [sp]
   231c0:	str	r3, [sp, #4]
   231c4:	bl	11044 <free@plt>
   231c8:	ldr	r3, [r4]
   231cc:	add	r2, sp, #8
   231d0:	cmp	r3, #0
   231d4:	moveq	r3, #4
   231d8:	movne	r3, #0
   231dc:	add	r3, r2, r3
   231e0:	ldr	r3, [r3, #-8]
   231e4:	str	r3, [r4]
   231e8:	add	sp, sp, #12
   231ec:	pop	{r4, r5, pc}
   231f0:	push	{r4, lr}
   231f4:	mov	r0, #14
   231f8:	bl	11278 <nl_langinfo@plt>
   231fc:	cmp	r0, #0
   23200:	beq	23218 <__assert_fail@plt+0x11f40>
   23204:	ldrb	r2, [r0]
   23208:	ldr	r3, [pc, #16]	; 23220 <__assert_fail@plt+0x11f48>
   2320c:	cmp	r2, #0
   23210:	moveq	r0, r3
   23214:	pop	{r4, pc}
   23218:	ldr	r0, [pc]	; 23220 <__assert_fail@plt+0x11f48>
   2321c:	pop	{r4, pc}
   23220:	strdeq	r4, [r2], -r0
   23224:	push	{r4, r5, r6, r7, lr}
   23228:	subs	r6, r0, #0
   2322c:	sub	sp, sp, #12
   23230:	addeq	r6, sp, #4
   23234:	mov	r0, r6
   23238:	mov	r5, r2
   2323c:	mov	r7, r1
   23240:	bl	11134 <mbrtowc@plt>
   23244:	cmp	r5, #0
   23248:	cmnne	r0, #3
   2324c:	mov	r4, r0
   23250:	bls	2326c <__assert_fail@plt+0x11f94>
   23254:	mov	r0, #0
   23258:	bl	232c4 <__assert_fail@plt+0x11fec>
   2325c:	cmp	r0, #0
   23260:	moveq	r4, #1
   23264:	ldrbeq	r3, [r7]
   23268:	streq	r3, [r6]
   2326c:	mov	r0, r4
   23270:	add	sp, sp, #12
   23274:	pop	{r4, r5, r6, r7, pc}
   23278:	push	{r4, r5, r6, lr}
   2327c:	subs	r4, r2, #0
   23280:	mov	r6, r0
   23284:	mov	r5, r1
   23288:	beq	232b4 <__assert_fail@plt+0x11fdc>
   2328c:	mov	r1, r4
   23290:	mvn	r0, #0
   23294:	bl	233b8 <__assert_fail@plt+0x120e0>
   23298:	cmp	r0, r5
   2329c:	bcs	232b4 <__assert_fail@plt+0x11fdc>
   232a0:	bl	111d0 <__errno_location@plt>
   232a4:	mov	r3, #12
   232a8:	str	r3, [r0]
   232ac:	mov	r0, #0
   232b0:	pop	{r4, r5, r6, pc}
   232b4:	mul	r1, r5, r4
   232b8:	mov	r0, r6
   232bc:	pop	{r4, r5, r6, lr}
   232c0:	b	22ff8 <__assert_fail@plt+0x11d20>
   232c4:	push	{lr}		; (str lr, [sp, #-4]!)
   232c8:	sub	sp, sp, #268	; 0x10c
   232cc:	add	r1, sp, #4
   232d0:	ldr	r2, [pc, #60]	; 23314 <__assert_fail@plt+0x1203c>
   232d4:	bl	23320 <__assert_fail@plt+0x12048>
   232d8:	cmp	r0, #0
   232dc:	movne	r0, #0
   232e0:	bne	2330c <__assert_fail@plt+0x12034>
   232e4:	ldr	r1, [pc, #44]	; 23318 <__assert_fail@plt+0x12040>
   232e8:	add	r0, sp, #4
   232ec:	bl	11008 <strcmp@plt>
   232f0:	cmp	r0, #0
   232f4:	beq	2330c <__assert_fail@plt+0x12034>
   232f8:	add	r0, sp, #4
   232fc:	ldr	r1, [pc, #24]	; 2331c <__assert_fail@plt+0x12044>
   23300:	bl	11008 <strcmp@plt>
   23304:	adds	r0, r0, #0
   23308:	movne	r0, #1
   2330c:	add	sp, sp, #268	; 0x10c
   23310:	pop	{pc}		; (ldr pc, [sp], #4)
   23314:	andeq	r0, r0, r1, lsl #2
   23318:	strdeq	r4, [r2], -r8
   2331c:	strdeq	r4, [r2], -ip
   23320:	push	{r4, r5, r6, lr}
   23324:	mov	r5, r1
   23328:	mov	r1, #0
   2332c:	mov	r4, r2
   23330:	bl	11260 <setlocale@plt>
   23334:	subs	r6, r0, #0
   23338:	beq	23394 <__assert_fail@plt+0x120bc>
   2333c:	bl	111b8 <strlen@plt>
   23340:	cmp	r4, r0
   23344:	bhi	2337c <__assert_fail@plt+0x120a4>
   23348:	cmp	r4, #0
   2334c:	bne	23358 <__assert_fail@plt+0x12080>
   23350:	mov	r0, #34	; 0x22
   23354:	pop	{r4, r5, r6, pc}
   23358:	sub	r4, r4, #1
   2335c:	mov	r1, r6
   23360:	mov	r2, r4
   23364:	mov	r0, r5
   23368:	bl	11068 <memcpy@plt>
   2336c:	mov	r3, #0
   23370:	strb	r3, [r5, r4]
   23374:	mov	r0, #34	; 0x22
   23378:	pop	{r4, r5, r6, pc}
   2337c:	add	r2, r0, #1
   23380:	mov	r1, r6
   23384:	mov	r0, r5
   23388:	bl	11068 <memcpy@plt>
   2338c:	mov	r0, #0
   23390:	pop	{r4, r5, r6, pc}
   23394:	cmp	r4, #0
   23398:	beq	233a8 <__assert_fail@plt+0x120d0>
   2339c:	strb	r6, [r5]
   233a0:	mov	r0, #22
   233a4:	pop	{r4, r5, r6, pc}
   233a8:	mov	r0, #22
   233ac:	pop	{r4, r5, r6, pc}
   233b0:	mov	r1, #0
   233b4:	b	11260 <setlocale@plt>
   233b8:	subs	r2, r1, #1
   233bc:	bxeq	lr
   233c0:	bcc	23598 <__assert_fail@plt+0x122c0>
   233c4:	cmp	r0, r1
   233c8:	bls	2357c <__assert_fail@plt+0x122a4>
   233cc:	tst	r1, r2
   233d0:	beq	23588 <__assert_fail@plt+0x122b0>
   233d4:	clz	r3, r0
   233d8:	clz	r2, r1
   233dc:	sub	r3, r2, r3
   233e0:	rsbs	r3, r3, #31
   233e4:	addne	r3, r3, r3, lsl #1
   233e8:	mov	r2, #0
   233ec:	addne	pc, pc, r3, lsl #2
   233f0:	nop			; (mov r0, r0)
   233f4:	cmp	r0, r1, lsl #31
   233f8:	adc	r2, r2, r2
   233fc:	subcs	r0, r0, r1, lsl #31
   23400:	cmp	r0, r1, lsl #30
   23404:	adc	r2, r2, r2
   23408:	subcs	r0, r0, r1, lsl #30
   2340c:	cmp	r0, r1, lsl #29
   23410:	adc	r2, r2, r2
   23414:	subcs	r0, r0, r1, lsl #29
   23418:	cmp	r0, r1, lsl #28
   2341c:	adc	r2, r2, r2
   23420:	subcs	r0, r0, r1, lsl #28
   23424:	cmp	r0, r1, lsl #27
   23428:	adc	r2, r2, r2
   2342c:	subcs	r0, r0, r1, lsl #27
   23430:	cmp	r0, r1, lsl #26
   23434:	adc	r2, r2, r2
   23438:	subcs	r0, r0, r1, lsl #26
   2343c:	cmp	r0, r1, lsl #25
   23440:	adc	r2, r2, r2
   23444:	subcs	r0, r0, r1, lsl #25
   23448:	cmp	r0, r1, lsl #24
   2344c:	adc	r2, r2, r2
   23450:	subcs	r0, r0, r1, lsl #24
   23454:	cmp	r0, r1, lsl #23
   23458:	adc	r2, r2, r2
   2345c:	subcs	r0, r0, r1, lsl #23
   23460:	cmp	r0, r1, lsl #22
   23464:	adc	r2, r2, r2
   23468:	subcs	r0, r0, r1, lsl #22
   2346c:	cmp	r0, r1, lsl #21
   23470:	adc	r2, r2, r2
   23474:	subcs	r0, r0, r1, lsl #21
   23478:	cmp	r0, r1, lsl #20
   2347c:	adc	r2, r2, r2
   23480:	subcs	r0, r0, r1, lsl #20
   23484:	cmp	r0, r1, lsl #19
   23488:	adc	r2, r2, r2
   2348c:	subcs	r0, r0, r1, lsl #19
   23490:	cmp	r0, r1, lsl #18
   23494:	adc	r2, r2, r2
   23498:	subcs	r0, r0, r1, lsl #18
   2349c:	cmp	r0, r1, lsl #17
   234a0:	adc	r2, r2, r2
   234a4:	subcs	r0, r0, r1, lsl #17
   234a8:	cmp	r0, r1, lsl #16
   234ac:	adc	r2, r2, r2
   234b0:	subcs	r0, r0, r1, lsl #16
   234b4:	cmp	r0, r1, lsl #15
   234b8:	adc	r2, r2, r2
   234bc:	subcs	r0, r0, r1, lsl #15
   234c0:	cmp	r0, r1, lsl #14
   234c4:	adc	r2, r2, r2
   234c8:	subcs	r0, r0, r1, lsl #14
   234cc:	cmp	r0, r1, lsl #13
   234d0:	adc	r2, r2, r2
   234d4:	subcs	r0, r0, r1, lsl #13
   234d8:	cmp	r0, r1, lsl #12
   234dc:	adc	r2, r2, r2
   234e0:	subcs	r0, r0, r1, lsl #12
   234e4:	cmp	r0, r1, lsl #11
   234e8:	adc	r2, r2, r2
   234ec:	subcs	r0, r0, r1, lsl #11
   234f0:	cmp	r0, r1, lsl #10
   234f4:	adc	r2, r2, r2
   234f8:	subcs	r0, r0, r1, lsl #10
   234fc:	cmp	r0, r1, lsl #9
   23500:	adc	r2, r2, r2
   23504:	subcs	r0, r0, r1, lsl #9
   23508:	cmp	r0, r1, lsl #8
   2350c:	adc	r2, r2, r2
   23510:	subcs	r0, r0, r1, lsl #8
   23514:	cmp	r0, r1, lsl #7
   23518:	adc	r2, r2, r2
   2351c:	subcs	r0, r0, r1, lsl #7
   23520:	cmp	r0, r1, lsl #6
   23524:	adc	r2, r2, r2
   23528:	subcs	r0, r0, r1, lsl #6
   2352c:	cmp	r0, r1, lsl #5
   23530:	adc	r2, r2, r2
   23534:	subcs	r0, r0, r1, lsl #5
   23538:	cmp	r0, r1, lsl #4
   2353c:	adc	r2, r2, r2
   23540:	subcs	r0, r0, r1, lsl #4
   23544:	cmp	r0, r1, lsl #3
   23548:	adc	r2, r2, r2
   2354c:	subcs	r0, r0, r1, lsl #3
   23550:	cmp	r0, r1, lsl #2
   23554:	adc	r2, r2, r2
   23558:	subcs	r0, r0, r1, lsl #2
   2355c:	cmp	r0, r1, lsl #1
   23560:	adc	r2, r2, r2
   23564:	subcs	r0, r0, r1, lsl #1
   23568:	cmp	r0, r1
   2356c:	adc	r2, r2, r2
   23570:	subcs	r0, r0, r1
   23574:	mov	r0, r2
   23578:	bx	lr
   2357c:	moveq	r0, #1
   23580:	movne	r0, #0
   23584:	bx	lr
   23588:	clz	r2, r1
   2358c:	rsb	r2, r2, #31
   23590:	lsr	r0, r0, r2
   23594:	bx	lr
   23598:	cmp	r0, #0
   2359c:	mvnne	r0, #0
   235a0:	b	238d8 <__assert_fail@plt+0x12600>
   235a4:	cmp	r1, #0
   235a8:	beq	23598 <__assert_fail@plt+0x122c0>
   235ac:	push	{r0, r1, lr}
   235b0:	bl	233b8 <__assert_fail@plt+0x120e0>
   235b4:	pop	{r1, r2, lr}
   235b8:	mul	r3, r2, r0
   235bc:	sub	r1, r1, r3
   235c0:	bx	lr
   235c4:	cmp	r1, #0
   235c8:	beq	237d4 <__assert_fail@plt+0x124fc>
   235cc:	eor	ip, r0, r1
   235d0:	rsbmi	r1, r1, #0
   235d4:	subs	r2, r1, #1
   235d8:	beq	237a0 <__assert_fail@plt+0x124c8>
   235dc:	movs	r3, r0
   235e0:	rsbmi	r3, r0, #0
   235e4:	cmp	r3, r1
   235e8:	bls	237ac <__assert_fail@plt+0x124d4>
   235ec:	tst	r1, r2
   235f0:	beq	237bc <__assert_fail@plt+0x124e4>
   235f4:	clz	r2, r3
   235f8:	clz	r0, r1
   235fc:	sub	r2, r0, r2
   23600:	rsbs	r2, r2, #31
   23604:	addne	r2, r2, r2, lsl #1
   23608:	mov	r0, #0
   2360c:	addne	pc, pc, r2, lsl #2
   23610:	nop			; (mov r0, r0)
   23614:	cmp	r3, r1, lsl #31
   23618:	adc	r0, r0, r0
   2361c:	subcs	r3, r3, r1, lsl #31
   23620:	cmp	r3, r1, lsl #30
   23624:	adc	r0, r0, r0
   23628:	subcs	r3, r3, r1, lsl #30
   2362c:	cmp	r3, r1, lsl #29
   23630:	adc	r0, r0, r0
   23634:	subcs	r3, r3, r1, lsl #29
   23638:	cmp	r3, r1, lsl #28
   2363c:	adc	r0, r0, r0
   23640:	subcs	r3, r3, r1, lsl #28
   23644:	cmp	r3, r1, lsl #27
   23648:	adc	r0, r0, r0
   2364c:	subcs	r3, r3, r1, lsl #27
   23650:	cmp	r3, r1, lsl #26
   23654:	adc	r0, r0, r0
   23658:	subcs	r3, r3, r1, lsl #26
   2365c:	cmp	r3, r1, lsl #25
   23660:	adc	r0, r0, r0
   23664:	subcs	r3, r3, r1, lsl #25
   23668:	cmp	r3, r1, lsl #24
   2366c:	adc	r0, r0, r0
   23670:	subcs	r3, r3, r1, lsl #24
   23674:	cmp	r3, r1, lsl #23
   23678:	adc	r0, r0, r0
   2367c:	subcs	r3, r3, r1, lsl #23
   23680:	cmp	r3, r1, lsl #22
   23684:	adc	r0, r0, r0
   23688:	subcs	r3, r3, r1, lsl #22
   2368c:	cmp	r3, r1, lsl #21
   23690:	adc	r0, r0, r0
   23694:	subcs	r3, r3, r1, lsl #21
   23698:	cmp	r3, r1, lsl #20
   2369c:	adc	r0, r0, r0
   236a0:	subcs	r3, r3, r1, lsl #20
   236a4:	cmp	r3, r1, lsl #19
   236a8:	adc	r0, r0, r0
   236ac:	subcs	r3, r3, r1, lsl #19
   236b0:	cmp	r3, r1, lsl #18
   236b4:	adc	r0, r0, r0
   236b8:	subcs	r3, r3, r1, lsl #18
   236bc:	cmp	r3, r1, lsl #17
   236c0:	adc	r0, r0, r0
   236c4:	subcs	r3, r3, r1, lsl #17
   236c8:	cmp	r3, r1, lsl #16
   236cc:	adc	r0, r0, r0
   236d0:	subcs	r3, r3, r1, lsl #16
   236d4:	cmp	r3, r1, lsl #15
   236d8:	adc	r0, r0, r0
   236dc:	subcs	r3, r3, r1, lsl #15
   236e0:	cmp	r3, r1, lsl #14
   236e4:	adc	r0, r0, r0
   236e8:	subcs	r3, r3, r1, lsl #14
   236ec:	cmp	r3, r1, lsl #13
   236f0:	adc	r0, r0, r0
   236f4:	subcs	r3, r3, r1, lsl #13
   236f8:	cmp	r3, r1, lsl #12
   236fc:	adc	r0, r0, r0
   23700:	subcs	r3, r3, r1, lsl #12
   23704:	cmp	r3, r1, lsl #11
   23708:	adc	r0, r0, r0
   2370c:	subcs	r3, r3, r1, lsl #11
   23710:	cmp	r3, r1, lsl #10
   23714:	adc	r0, r0, r0
   23718:	subcs	r3, r3, r1, lsl #10
   2371c:	cmp	r3, r1, lsl #9
   23720:	adc	r0, r0, r0
   23724:	subcs	r3, r3, r1, lsl #9
   23728:	cmp	r3, r1, lsl #8
   2372c:	adc	r0, r0, r0
   23730:	subcs	r3, r3, r1, lsl #8
   23734:	cmp	r3, r1, lsl #7
   23738:	adc	r0, r0, r0
   2373c:	subcs	r3, r3, r1, lsl #7
   23740:	cmp	r3, r1, lsl #6
   23744:	adc	r0, r0, r0
   23748:	subcs	r3, r3, r1, lsl #6
   2374c:	cmp	r3, r1, lsl #5
   23750:	adc	r0, r0, r0
   23754:	subcs	r3, r3, r1, lsl #5
   23758:	cmp	r3, r1, lsl #4
   2375c:	adc	r0, r0, r0
   23760:	subcs	r3, r3, r1, lsl #4
   23764:	cmp	r3, r1, lsl #3
   23768:	adc	r0, r0, r0
   2376c:	subcs	r3, r3, r1, lsl #3
   23770:	cmp	r3, r1, lsl #2
   23774:	adc	r0, r0, r0
   23778:	subcs	r3, r3, r1, lsl #2
   2377c:	cmp	r3, r1, lsl #1
   23780:	adc	r0, r0, r0
   23784:	subcs	r3, r3, r1, lsl #1
   23788:	cmp	r3, r1
   2378c:	adc	r0, r0, r0
   23790:	subcs	r3, r3, r1
   23794:	cmp	ip, #0
   23798:	rsbmi	r0, r0, #0
   2379c:	bx	lr
   237a0:	teq	ip, r0
   237a4:	rsbmi	r0, r0, #0
   237a8:	bx	lr
   237ac:	movcc	r0, #0
   237b0:	asreq	r0, ip, #31
   237b4:	orreq	r0, r0, #1
   237b8:	bx	lr
   237bc:	clz	r2, r1
   237c0:	rsb	r2, r2, #31
   237c4:	cmp	ip, #0
   237c8:	lsr	r0, r3, r2
   237cc:	rsbmi	r0, r0, #0
   237d0:	bx	lr
   237d4:	cmp	r0, #0
   237d8:	mvngt	r0, #-2147483648	; 0x80000000
   237dc:	movlt	r0, #-2147483648	; 0x80000000
   237e0:	b	238d8 <__assert_fail@plt+0x12600>
   237e4:	cmp	r1, #0
   237e8:	beq	237d4 <__assert_fail@plt+0x124fc>
   237ec:	push	{r0, r1, lr}
   237f0:	bl	235cc <__assert_fail@plt+0x122f4>
   237f4:	pop	{r1, r2, lr}
   237f8:	mul	r3, r2, r0
   237fc:	sub	r1, r1, r3
   23800:	bx	lr
   23804:	cmp	r3, #0
   23808:	cmpeq	r2, #0
   2380c:	bne	23830 <__assert_fail@plt+0x12558>
   23810:	cmp	r1, #0
   23814:	movlt	r1, #-2147483648	; 0x80000000
   23818:	movlt	r0, #0
   2381c:	blt	2382c <__assert_fail@plt+0x12554>
   23820:	cmpeq	r0, #0
   23824:	mvnne	r1, #-2147483648	; 0x80000000
   23828:	mvnne	r0, #0
   2382c:	b	238d8 <__assert_fail@plt+0x12600>
   23830:	sub	sp, sp, #8
   23834:	push	{sp, lr}
   23838:	cmp	r1, #0
   2383c:	blt	2385c <__assert_fail@plt+0x12584>
   23840:	cmp	r3, #0
   23844:	blt	23890 <__assert_fail@plt+0x125b8>
   23848:	bl	238e8 <__assert_fail@plt+0x12610>
   2384c:	ldr	lr, [sp, #4]
   23850:	add	sp, sp, #8
   23854:	pop	{r2, r3}
   23858:	bx	lr
   2385c:	rsbs	r0, r0, #0
   23860:	sbc	r1, r1, r1, lsl #1
   23864:	cmp	r3, #0
   23868:	blt	238b4 <__assert_fail@plt+0x125dc>
   2386c:	bl	238e8 <__assert_fail@plt+0x12610>
   23870:	ldr	lr, [sp, #4]
   23874:	add	sp, sp, #8
   23878:	pop	{r2, r3}
   2387c:	rsbs	r0, r0, #0
   23880:	sbc	r1, r1, r1, lsl #1
   23884:	rsbs	r2, r2, #0
   23888:	sbc	r3, r3, r3, lsl #1
   2388c:	bx	lr
   23890:	rsbs	r2, r2, #0
   23894:	sbc	r3, r3, r3, lsl #1
   23898:	bl	238e8 <__assert_fail@plt+0x12610>
   2389c:	ldr	lr, [sp, #4]
   238a0:	add	sp, sp, #8
   238a4:	pop	{r2, r3}
   238a8:	rsbs	r0, r0, #0
   238ac:	sbc	r1, r1, r1, lsl #1
   238b0:	bx	lr
   238b4:	rsbs	r2, r2, #0
   238b8:	sbc	r3, r3, r3, lsl #1
   238bc:	bl	238e8 <__assert_fail@plt+0x12610>
   238c0:	ldr	lr, [sp, #4]
   238c4:	add	sp, sp, #8
   238c8:	pop	{r2, r3}
   238cc:	rsbs	r2, r2, #0
   238d0:	sbc	r3, r3, r3, lsl #1
   238d4:	bx	lr
   238d8:	push	{r1, lr}
   238dc:	mov	r0, #8
   238e0:	bl	10fe4 <raise@plt>
   238e4:	pop	{r1, pc}
   238e8:	cmp	r1, r3
   238ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   238f0:	cmpeq	r0, r2
   238f4:	mov	r4, r0
   238f8:	mov	r5, r1
   238fc:	ldr	r9, [sp, #28]
   23900:	movcc	r0, #0
   23904:	movcc	r1, #0
   23908:	bcc	23a00 <__assert_fail@plt+0x12728>
   2390c:	cmp	r3, #0
   23910:	clzeq	ip, r2
   23914:	clzne	ip, r3
   23918:	addeq	ip, ip, #32
   2391c:	cmp	r5, #0
   23920:	clzeq	r1, r4
   23924:	addeq	r1, r1, #32
   23928:	clzne	r1, r5
   2392c:	sub	ip, ip, r1
   23930:	sub	lr, ip, #32
   23934:	lsl	r7, r3, ip
   23938:	rsb	r8, ip, #32
   2393c:	orr	r7, r7, r2, lsl lr
   23940:	orr	r7, r7, r2, lsr r8
   23944:	lsl	r6, r2, ip
   23948:	cmp	r5, r7
   2394c:	cmpeq	r4, r6
   23950:	movcc	r0, #0
   23954:	movcc	r1, #0
   23958:	bcc	23974 <__assert_fail@plt+0x1269c>
   2395c:	mov	r3, #1
   23960:	subs	r4, r4, r6
   23964:	lsl	r1, r3, lr
   23968:	lsl	r0, r3, ip
   2396c:	orr	r1, r1, r3, lsr r8
   23970:	sbc	r5, r5, r7
   23974:	cmp	ip, #0
   23978:	beq	23a00 <__assert_fail@plt+0x12728>
   2397c:	lsrs	r3, r7, #1
   23980:	rrx	r2, r6
   23984:	mov	r6, ip
   23988:	b	239ac <__assert_fail@plt+0x126d4>
   2398c:	subs	r4, r4, r2
   23990:	sbc	r5, r5, r3
   23994:	adds	r4, r4, r4
   23998:	adc	r5, r5, r5
   2399c:	adds	r4, r4, #1
   239a0:	adc	r5, r5, #0
   239a4:	subs	r6, r6, #1
   239a8:	beq	239c8 <__assert_fail@plt+0x126f0>
   239ac:	cmp	r5, r3
   239b0:	cmpeq	r4, r2
   239b4:	bcs	2398c <__assert_fail@plt+0x126b4>
   239b8:	adds	r4, r4, r4
   239bc:	adc	r5, r5, r5
   239c0:	subs	r6, r6, #1
   239c4:	bne	239ac <__assert_fail@plt+0x126d4>
   239c8:	lsr	r6, r4, ip
   239cc:	lsr	r7, r5, ip
   239d0:	orr	r6, r6, r5, lsl r8
   239d4:	adds	r2, r0, r4
   239d8:	orr	r6, r6, r5, lsr lr
   239dc:	adc	r3, r1, r5
   239e0:	lsl	r1, r7, ip
   239e4:	orr	r1, r1, r6, lsl lr
   239e8:	lsl	r0, r6, ip
   239ec:	orr	r1, r1, r6, lsr r8
   239f0:	subs	r0, r2, r0
   239f4:	mov	r4, r6
   239f8:	mov	r5, r7
   239fc:	sbc	r1, r3, r1
   23a00:	cmp	r9, #0
   23a04:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   23a08:	strd	r4, [r9]
   23a0c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23a10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23a14:	mov	r7, r0
   23a18:	ldr	r6, [pc, #72]	; 23a68 <__assert_fail@plt+0x12790>
   23a1c:	ldr	r5, [pc, #72]	; 23a6c <__assert_fail@plt+0x12794>
   23a20:	add	r6, pc, r6
   23a24:	add	r5, pc, r5
   23a28:	sub	r6, r6, r5
   23a2c:	mov	r8, r1
   23a30:	mov	r9, r2
   23a34:	bl	10f94 <pthread_mutex_unlock@plt-0x20>
   23a38:	asrs	r6, r6, #2
   23a3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23a40:	mov	r4, #0
   23a44:	add	r4, r4, #1
   23a48:	ldr	r3, [r5], #4
   23a4c:	mov	r2, r9
   23a50:	mov	r1, r8
   23a54:	mov	r0, r7
   23a58:	blx	r3
   23a5c:	cmp	r6, r4
   23a60:	bne	23a44 <__assert_fail@plt+0x1276c>
   23a64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23a68:	andeq	r1, r1, r8, ror #9
   23a6c:	andeq	r1, r1, r0, ror #9
   23a70:	bx	lr
   23a74:	ldr	r3, [pc, #12]	; 23a88 <__assert_fail@plt+0x127b0>
   23a78:	mov	r1, #0
   23a7c:	add	r3, pc, r3
   23a80:	ldr	r2, [r3]
   23a84:	b	111e8 <__cxa_atexit@plt>
   23a88:	andeq	r1, r1, r0, lsr #13

Disassembly of section .fini:

00023a8c <.fini>:
   23a8c:	push	{r3, lr}
   23a90:	pop	{r3, pc}
