
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

00011268 <.init>:
   11268:	push	{r3, lr}
   1126c:	bl	11634 <__assert_fail@plt+0x4c>
   11270:	pop	{r3, pc}

Disassembly of section .plt:

00011274 <fstatfs64@plt-0x14>:
   11274:	push	{lr}		; (str lr, [sp, #-4]!)
   11278:	ldr	lr, [pc, #4]	; 11284 <fstatfs64@plt-0x4>
   1127c:	add	lr, pc, lr
   11280:	ldr	pc, [lr, #8]!
   11284:	andeq	sp, r1, ip, ror sp

00011288 <fstatfs64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3452]!	; 0xd7c

00011294 <calloc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3444]!	; 0xd74

000112a0 <fputs_unlocked@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112ac <raise@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3428]!	; 0xd64

000112b8 <strcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112c4 <strtol@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3412]!	; 0xd54

000112d0 <pause@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000112dc <read@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3396]!	; 0xd44

000112e8 <fflush@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000112f4 <free@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3380]!	; 0xd34

00011300 <nanosleep@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001130c <_exit@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3364]!	; 0xd24

00011318 <memcpy@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3356]!	; 0xd1c

00011324 <__strtoull_internal@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3348]!	; 0xd14

00011330 <mbsinit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3340]!	; 0xd0c

0001133c <fwrite_unlocked@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3332]!	; 0xd04

00011348 <memcmp@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3324]!	; 0xcfc

00011354 <dcgettext@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011360 <realloc@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3308]!	; 0xcec

0001136c <textdomain@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3300]!	; 0xce4

00011378 <rawmemchr@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3292]!	; 0xcdc

00011384 <fflush_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011390 <iswprint@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3276]!	; 0xccc

0001139c <poll@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113a8 <__fxstat64@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113b4 <fwrite@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3252]!	; 0xcb4

000113c0 <lseek64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3244]!	; 0xcac

000113cc <__ctype_get_mb_cur_max@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3236]!	; 0xca4

000113d8 <__fpending@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113e4 <mbrtowc@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3220]!	; 0xc94

000113f0 <error@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3212]!	; 0xc8c

000113fc <open64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3204]!	; 0xc84

00011408 <getenv@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3196]!	; 0xc7c

00011414 <malloc@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3188]!	; 0xc74

00011420 <__libc_start_main@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3180]!	; 0xc6c

0001142c <__freading@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3172]!	; 0xc64

00011438 <__gmon_start__@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3164]!	; 0xc5c

00011444 <getopt_long@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3156]!	; 0xc54

00011450 <kill@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #118784	; 0x1d000
   11458:	ldr	pc, [ip, #3148]!	; 0xc4c

0001145c <__ctype_b_loc@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #118784	; 0x1d000
   11464:	ldr	pc, [ip, #3140]!	; 0xc44

00011468 <exit@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #118784	; 0x1d000
   11470:	ldr	pc, [ip, #3132]!	; 0xc3c

00011474 <strlen@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #118784	; 0x1d000
   1147c:	ldr	pc, [ip, #3124]!	; 0xc34

00011480 <inotify_init@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #118784	; 0x1d000
   11488:	ldr	pc, [ip, #3116]!	; 0xc2c

0001148c <strchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #118784	; 0x1d000
   11494:	ldr	pc, [ip, #3108]!	; 0xc24

00011498 <memrchr@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #118784	; 0x1d000
   114a0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114a4 <inotify_add_watch@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #118784	; 0x1d000
   114ac:	ldr	pc, [ip, #3092]!	; 0xc14

000114b0 <__errno_location@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #118784	; 0x1d000
   114b8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114bc <__cxa_atexit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #118784	; 0x1d000
   114c4:	ldr	pc, [ip, #3076]!	; 0xc04

000114c8 <memset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #118784	; 0x1d000
   114d0:	ldr	pc, [ip, #3068]!	; 0xbfc

000114d4 <__printf_chk@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #118784	; 0x1d000
   114dc:	ldr	pc, [ip, #3060]!	; 0xbf4

000114e0 <strtod@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #118784	; 0x1d000
   114e8:	ldr	pc, [ip, #3052]!	; 0xbec

000114ec <fileno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #118784	; 0x1d000
   114f4:	ldr	pc, [ip, #3044]!	; 0xbe4

000114f8 <__fprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #118784	; 0x1d000
   11500:	ldr	pc, [ip, #3036]!	; 0xbdc

00011504 <memchr@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #118784	; 0x1d000
   1150c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011510 <fclose@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #118784	; 0x1d000
   11518:	ldr	pc, [ip, #3020]!	; 0xbcc

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #118784	; 0x1d000
   11524:	ldr	pc, [ip, #3012]!	; 0xbc4

00011528 <strtod_l@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #118784	; 0x1d000
   11530:	ldr	pc, [ip, #3004]!	; 0xbbc

00011534 <fcntl64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #118784	; 0x1d000
   1153c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011540 <__overflow@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #118784	; 0x1d000
   11548:	ldr	pc, [ip, #2988]!	; 0xbac

0001154c <setlocale@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #118784	; 0x1d000
   11554:	ldr	pc, [ip, #2980]!	; 0xba4

00011558 <strrchr@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #118784	; 0x1d000
   11560:	ldr	pc, [ip, #2972]!	; 0xb9c

00011564 <nl_langinfo@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #118784	; 0x1d000
   1156c:	ldr	pc, [ip, #2964]!	; 0xb94

00011570 <newlocale@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #118784	; 0x1d000
   11578:	ldr	pc, [ip, #2956]!	; 0xb8c

0001157c <clearerr_unlocked@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #118784	; 0x1d000
   11584:	ldr	pc, [ip, #2948]!	; 0xb84

00011588 <bindtextdomain@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #118784	; 0x1d000
   11590:	ldr	pc, [ip, #2940]!	; 0xb7c

00011594 <__xstat64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #118784	; 0x1d000
   1159c:	ldr	pc, [ip, #2932]!	; 0xb74

000115a0 <isatty@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #118784	; 0x1d000
   115a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000115ac <inotify_rm_watch@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #118784	; 0x1d000
   115b4:	ldr	pc, [ip, #2916]!	; 0xb64

000115b8 <strncmp@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #118784	; 0x1d000
   115c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000115c4 <abort@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #118784	; 0x1d000
   115cc:	ldr	pc, [ip, #2900]!	; 0xb54

000115d0 <close@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #118784	; 0x1d000
   115d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000115dc <__lxstat64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #118784	; 0x1d000
   115e4:	ldr	pc, [ip, #2884]!	; 0xb44

000115e8 <__assert_fail@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #118784	; 0x1d000
   115f0:	ldr	pc, [ip, #2876]!	; 0xb3c

Disassembly of section .text:

000115f8 <.text>:
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <__assert_fail@plt+0x40>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <__assert_fail@plt+0x44>
   1161c:	ldr	r3, [pc, #12]	; 11630 <__assert_fail@plt+0x48>
   11620:	bl	11420 <__libc_start_main@plt>
   11624:	bl	115c4 <abort@plt>
   11628:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1162c:	andeq	r1, r1, r8, asr sl
   11630:	muleq	r1, ip, sl
   11634:	ldr	r3, [pc, #20]	; 11650 <__assert_fail@plt+0x68>
   11638:	ldr	r2, [pc, #20]	; 11654 <__assert_fail@plt+0x6c>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	11438 <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x0001d9bc
   11654:	andeq	r0, r0, r0, lsr r1
   11658:	ldr	r0, [pc, #24]	; 11678 <__assert_fail@plt+0x90>
   1165c:	ldr	r3, [pc, #24]	; 1167c <__assert_fail@plt+0x94>
   11660:	cmp	r3, r0
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0x98>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	pc, r2, r0, lsr #3
   1167c:	andeq	pc, r2, r0, lsr #3
   11680:	andeq	r0, r0, r0
   11684:	ldr	r0, [pc, #36]	; 116b0 <__assert_fail@plt+0xc8>
   11688:	ldr	r1, [pc, #36]	; 116b4 <__assert_fail@plt+0xcc>
   1168c:	sub	r1, r1, r0
   11690:	asr	r1, r1, #2
   11694:	add	r1, r1, r1, lsr #31
   11698:	asrs	r1, r1, #1
   1169c:	bxeq	lr
   116a0:	ldr	r3, [pc, #16]	; 116b8 <__assert_fail@plt+0xd0>
   116a4:	cmp	r3, #0
   116a8:	bxeq	lr
   116ac:	bx	r3
   116b0:	andeq	pc, r2, r0, lsr #3
   116b4:	andeq	pc, r2, r0, lsr #3
   116b8:	andeq	r0, r0, r0
   116bc:	push	{r4, lr}
   116c0:	ldr	r4, [pc, #24]	; 116e0 <__assert_fail@plt+0xf8>
   116c4:	ldrb	r3, [r4]
   116c8:	cmp	r3, #0
   116cc:	popne	{r4, pc}
   116d0:	bl	11658 <__assert_fail@plt+0x70>
   116d4:	mov	r3, #1
   116d8:	strb	r3, [r4]
   116dc:	pop	{r4, pc}
   116e0:			; <UNDEFINED> instruction: 0x0002f1bc
   116e4:	b	11684 <__assert_fail@plt+0x9c>
   116e8:	push	{fp, lr}
   116ec:	mov	fp, sp
   116f0:	sub	sp, sp, #56	; 0x38
   116f4:	mov	r4, r0
   116f8:	cmp	r0, #0
   116fc:	bne	11a14 <__assert_fail@plt+0x42c>
   11700:	movw	r1, #52043	; 0xcb4b
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	11354 <dcgettext@plt>
   11714:	mov	r1, r0
   11718:	movw	r0, #61920	; 0xf1e0
   1171c:	movt	r0, #2
   11720:	ldr	r2, [r0]
   11724:	mov	r0, #1
   11728:	bl	114d4 <__printf_chk@plt>
   1172c:	movw	r1, #52076	; 0xcb6c
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	movt	r1, #1
   1173c:	bl	11354 <dcgettext@plt>
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	mov	r2, #10
   1174c:	bl	114d4 <__printf_chk@plt>
   11750:	movw	r1, #54689	; 0xd5a1
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	11354 <dcgettext@plt>
   11764:	movw	r7, #61876	; 0xf1b4
   11768:	movt	r7, #2
   1176c:	ldr	r1, [r7]
   11770:	bl	112a0 <fputs_unlocked@plt>
   11774:	movw	r1, #54745	; 0xd5d9
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	movt	r1, #1
   11784:	bl	11354 <dcgettext@plt>
   11788:	ldr	r1, [r7]
   1178c:	bl	112a0 <fputs_unlocked@plt>
   11790:	movw	r1, #52208	; 0xcbf0
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #1
   117a0:	bl	11354 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	112a0 <fputs_unlocked@plt>
   117ac:	movw	r1, #52353	; 0xcc81
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #1
   117bc:	bl	11354 <dcgettext@plt>
   117c0:	ldr	r1, [r7]
   117c4:	bl	112a0 <fputs_unlocked@plt>
   117c8:	movw	r1, #52587	; 0xcd6b
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	11354 <dcgettext@plt>
   117dc:	mov	r1, r0
   117e0:	mov	r0, #1
   117e4:	mov	r2, #10
   117e8:	mov	r3, #5
   117ec:	bl	114d4 <__printf_chk@plt>
   117f0:	movw	r1, #53141	; 0xcf95
   117f4:	mov	r0, #0
   117f8:	mov	r2, #5
   117fc:	movt	r1, #1
   11800:	bl	11354 <dcgettext@plt>
   11804:	ldr	r1, [r7]
   11808:	bl	112a0 <fputs_unlocked@plt>
   1180c:	movw	r1, #53357	; 0xd06d
   11810:	mov	r0, #0
   11814:	mov	r2, #5
   11818:	movt	r1, #1
   1181c:	bl	11354 <dcgettext@plt>
   11820:	ldr	r1, [r7]
   11824:	bl	112a0 <fputs_unlocked@plt>
   11828:	movw	r1, #53688	; 0xd1b8
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11354 <dcgettext@plt>
   1183c:	ldr	r1, [r7]
   11840:	bl	112a0 <fputs_unlocked@plt>
   11844:	movw	r1, #53751	; 0xd1f7
   11848:	mov	r0, #0
   1184c:	mov	r2, #5
   11850:	movt	r1, #1
   11854:	bl	11354 <dcgettext@plt>
   11858:	ldr	r1, [r7]
   1185c:	bl	112a0 <fputs_unlocked@plt>
   11860:	movw	r1, #53796	; 0xd224
   11864:	mov	r0, #0
   11868:	mov	r2, #5
   1186c:	movt	r1, #1
   11870:	bl	11354 <dcgettext@plt>
   11874:	ldr	r1, [r7]
   11878:	bl	112a0 <fputs_unlocked@plt>
   1187c:	movw	r1, #53850	; 0xd25a
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	11354 <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a0 <fputs_unlocked@plt>
   11898:	movw	r1, #54063	; 0xd32f
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	11354 <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	112a0 <fputs_unlocked@plt>
   118b4:	movw	r0, #56880	; 0xde30
   118b8:	mov	r2, #48	; 0x30
   118bc:	mov	r6, sp
   118c0:	movw	r5, #54500	; 0xd4e4
   118c4:	movt	r0, #1
   118c8:	movt	r5, #1
   118cc:	add	r1, r0, #32
   118d0:	add	r3, r0, #16
   118d4:	vld1.64	{d18-d19}, [r0], r2
   118d8:	vld1.64	{d16-d17}, [r1]
   118dc:	vld1.64	{d20-d21}, [r3]
   118e0:	add	r1, r6, #32
   118e4:	vldr	d22, [r0]
   118e8:	add	r0, r6, #16
   118ec:	vst1.64	{d16-d17}, [r1]
   118f0:	movw	r1, #54820	; 0xd624
   118f4:	vst1.64	{d20-d21}, [r0]
   118f8:	mov	r0, r6
   118fc:	vst1.64	{d18-d19}, [r0], r2
   11900:	movt	r1, #1
   11904:	vstr	d22, [r0]
   11908:	mov	r0, r5
   1190c:	bl	112b8 <strcmp@plt>
   11910:	cmp	r0, #0
   11914:	ldrne	r1, [r6, #8]!
   11918:	cmpne	r1, #0
   1191c:	bne	11908 <__assert_fail@plt+0x320>
   11920:	ldr	r6, [r6, #4]
   11924:	movw	r1, #54915	; 0xd683
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	11354 <dcgettext@plt>
   11938:	movw	r2, #54938	; 0xd69a
   1193c:	movw	r3, #54952	; 0xd6a8
   11940:	mov	r1, r0
   11944:	mov	r0, #1
   11948:	movt	r2, #1
   1194c:	movt	r3, #1
   11950:	bl	114d4 <__printf_chk@plt>
   11954:	cmp	r6, #0
   11958:	mov	r0, #5
   1195c:	mov	r1, #0
   11960:	moveq	r6, r5
   11964:	bl	1154c <setlocale@plt>
   11968:	cmp	r0, #0
   1196c:	beq	119a4 <__assert_fail@plt+0x3bc>
   11970:	movw	r1, #54992	; 0xd6d0
   11974:	mov	r2, #3
   11978:	movt	r1, #1
   1197c:	bl	115b8 <strncmp@plt>
   11980:	cmp	r0, #0
   11984:	beq	119a4 <__assert_fail@plt+0x3bc>
   11988:	movw	r1, #54996	; 0xd6d4
   1198c:	mov	r0, #0
   11990:	mov	r2, #5
   11994:	movt	r1, #1
   11998:	bl	11354 <dcgettext@plt>
   1199c:	ldr	r1, [r7]
   119a0:	bl	112a0 <fputs_unlocked@plt>
   119a4:	movw	r1, #55067	; 0xd71b
   119a8:	mov	r0, #0
   119ac:	mov	r2, #5
   119b0:	movt	r1, #1
   119b4:	bl	11354 <dcgettext@plt>
   119b8:	movw	r2, #54952	; 0xd6a8
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	mov	r3, r5
   119c8:	movt	r2, #1
   119cc:	bl	114d4 <__printf_chk@plt>
   119d0:	movw	r1, #55094	; 0xd736
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	movt	r1, #1
   119e0:	bl	11354 <dcgettext@plt>
   119e4:	movw	r3, #54062	; 0xd32e
   119e8:	mov	r1, r0
   119ec:	movw	r0, #54848	; 0xd640
   119f0:	cmp	r6, r5
   119f4:	mov	r2, r6
   119f8:	movt	r0, #1
   119fc:	movt	r3, #1
   11a00:	moveq	r3, r0
   11a04:	mov	r0, #1
   11a08:	bl	114d4 <__printf_chk@plt>
   11a0c:	mov	r0, r4
   11a10:	bl	11468 <exit@plt>
   11a14:	movw	r0, #61872	; 0xf1b0
   11a18:	movw	r1, #52004	; 0xcb24
   11a1c:	mov	r2, #5
   11a20:	movt	r0, #2
   11a24:	movt	r1, #1
   11a28:	ldr	r5, [r0]
   11a2c:	mov	r0, #0
   11a30:	bl	11354 <dcgettext@plt>
   11a34:	mov	r2, r0
   11a38:	movw	r0, #61920	; 0xf1e0
   11a3c:	mov	r1, #1
   11a40:	movt	r0, #2
   11a44:	ldr	r3, [r0]
   11a48:	mov	r0, r5
   11a4c:	bl	114f8 <__fprintf_chk@plt>
   11a50:	mov	r0, r4
   11a54:	bl	11468 <exit@plt>
   11a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a5c:	add	fp, sp, #28
   11a60:	sub	sp, sp, #4
   11a64:	vpush	{d8-d11}
   11a68:	sub	sp, sp, #240	; 0xf0
   11a6c:	sub	sp, sp, #8192	; 0x2000
   11a70:	mov	r5, r0
   11a74:	mov	r7, #0
   11a78:	mov	r0, #10
   11a7c:	mov	r4, r1
   11a80:	str	r7, [sp, #124]	; 0x7c
   11a84:	str	r0, [sp, #120]	; 0x78
   11a88:	ldr	r0, [r1]
   11a8c:	bl	188d8 <__assert_fail@plt+0x72f0>
   11a90:	movw	r1, #54062	; 0xd32e
   11a94:	mov	r0, #6
   11a98:	movt	r1, #1
   11a9c:	bl	1154c <setlocale@plt>
   11aa0:	movw	r6, #54942	; 0xd69e
   11aa4:	movw	r1, #54505	; 0xd4e9
   11aa8:	movt	r6, #1
   11aac:	movt	r1, #1
   11ab0:	mov	r0, r6
   11ab4:	bl	11588 <bindtextdomain@plt>
   11ab8:	mov	r0, r6
   11abc:	bl	1136c <textdomain@plt>
   11ac0:	movw	r0, #28920	; 0x70f8
   11ac4:	movt	r0, #1
   11ac8:	bl	1cb00 <__assert_fail@plt+0xb518>
   11acc:	movw	r0, #61888	; 0xf1c0
   11ad0:	movw	r1, #61889	; 0xf1c1
   11ad4:	cmp	r5, #2
   11ad8:	movt	r0, #2
   11adc:	movt	r1, #2
   11ae0:	strb	r7, [r0]
   11ae4:	mov	r0, #1
   11ae8:	strb	r0, [r1]
   11aec:	movw	r1, #61890	; 0xf1c2
   11af0:	movt	r1, #2
   11af4:	strb	r7, [r1]
   11af8:	movw	r1, #61891	; 0xf1c3
   11afc:	movt	r1, #2
   11b00:	strb	r7, [r1]
   11b04:	movw	r1, #61892	; 0xf1c4
   11b08:	movt	r1, #2
   11b0c:	strb	r7, [r1]
   11b10:	movw	r1, #61893	; 0xf1c5
   11b14:	movt	r1, #2
   11b18:	strb	r0, [r1]
   11b1c:	beq	11b74 <__assert_fail@plt+0x58c>
   11b20:	cmp	r5, #3
   11b24:	bne	11b48 <__assert_fail@plt+0x560>
   11b28:	ldr	r0, [r4, #8]
   11b2c:	ldrb	r1, [r0]
   11b30:	cmp	r1, #45	; 0x2d
   11b34:	bne	11b74 <__assert_fail@plt+0x58c>
   11b38:	ldrb	r1, [r0, #1]
   11b3c:	cmp	r1, #0
   11b40:	bne	11b5c <__assert_fail@plt+0x574>
   11b44:	b	11b74 <__assert_fail@plt+0x58c>
   11b48:	sub	r0, r5, #3
   11b4c:	mov	r3, #0
   11b50:	cmp	r0, #1
   11b54:	bhi	11d1c <__assert_fail@plt+0x734>
   11b58:	ldr	r0, [r4, #8]
   11b5c:	movw	r1, #55145	; 0xd769
   11b60:	movt	r1, #1
   11b64:	bl	112b8 <strcmp@plt>
   11b68:	mov	r3, #0
   11b6c:	cmp	r0, #0
   11b70:	bne	11d1c <__assert_fail@plt+0x734>
   11b74:	bl	18880 <__assert_fail@plt+0x7298>
   11b78:	ldr	r2, [r4, #4]
   11b7c:	mov	r1, r0
   11b80:	mov	r0, r2
   11b84:	ldrb	r3, [r0], #1
   11b88:	cmp	r3, #45	; 0x2d
   11b8c:	beq	11bb4 <__assert_fail@plt+0x5cc>
   11b90:	cmp	r3, #43	; 0x2b
   11b94:	bne	11c38 <__assert_fail@plt+0x650>
   11b98:	sub	r1, r1, #3504	; 0xdb0
   11b9c:	mov	r8, #1
   11ba0:	mov	r3, #0
   11ba4:	sub	r1, r1, #196608	; 0x30000
   11ba8:	cmp	r1, #696	; 0x2b8
   11bac:	bhi	11bec <__assert_fail@plt+0x604>
   11bb0:	b	11d1c <__assert_fail@plt+0x734>
   11bb4:	movw	r3, #3504	; 0xdb0
   11bb8:	mov	r8, #0
   11bbc:	movt	r3, #3
   11bc0:	cmp	r1, r3
   11bc4:	blt	11bec <__assert_fail@plt+0x604>
   11bc8:	mov	r1, r0
   11bcc:	ldrb	r3, [r1], #1
   11bd0:	cmp	r3, #99	; 0x63
   11bd4:	mov	r3, #0
   11bd8:	movne	r1, r0
   11bdc:	ldrb	r1, [r1]
   11be0:	cmp	r1, #0
   11be4:	beq	11d1c <__assert_fail@plt+0x734>
   11be8:	mov	r8, #0
   11bec:	mov	r1, #0
   11bf0:	sub	r3, r2, r1
   11bf4:	sub	r1, r1, #1
   11bf8:	ldrb	r7, [r3, #1]
   11bfc:	sub	r3, r7, #48	; 0x30
   11c00:	cmp	r3, #10
   11c04:	bcc	11bf0 <__assert_fail@plt+0x608>
   11c08:	cmp	r7, #98	; 0x62
   11c0c:	beq	11c40 <__assert_fail@plt+0x658>
   11c10:	mov	ip, #10
   11c14:	cmp	r7, #99	; 0x63
   11c18:	beq	11c44 <__assert_fail@plt+0x65c>
   11c1c:	mov	r6, #1
   11c20:	cmp	r7, #108	; 0x6c
   11c24:	beq	11c48 <__assert_fail@plt+0x660>
   11c28:	sub	r2, r2, r1
   11c2c:	mov	ip, #10
   11c30:	mov	r6, #1
   11c34:	b	11c50 <__assert_fail@plt+0x668>
   11c38:	mov	r3, #0
   11c3c:	b	11d1c <__assert_fail@plt+0x734>
   11c40:	mov	ip, #5120	; 0x1400
   11c44:	mov	r6, #0
   11c48:	sub	r2, r2, r1
   11c4c:	ldrb	r7, [r2, #1]!
   11c50:	cmp	r7, #102	; 0x66
   11c54:	mov	r3, #0
   11c58:	addeq	r2, r2, #1
   11c5c:	ldrb	r2, [r2]
   11c60:	cmp	r2, #0
   11c64:	bne	11d1c <__assert_fail@plt+0x734>
   11c68:	cmn	r1, #1
   11c6c:	beq	11cdc <__assert_fail@plt+0x6f4>
   11c70:	movw	r1, #55148	; 0xd76c
   11c74:	add	r3, sp, #120	; 0x78
   11c78:	mov	r2, #10
   11c7c:	movt	r1, #1
   11c80:	str	r1, [sp]
   11c84:	mov	r1, #0
   11c88:	bl	1b5a0 <__assert_fail@plt+0x9fb8>
   11c8c:	mvn	r1, #2
   11c90:	tst	r0, r1
   11c94:	beq	11ce8 <__assert_fail@plt+0x700>
   11c98:	bl	114b0 <__errno_location@plt>
   11c9c:	ldr	r5, [r0]
   11ca0:	movw	r1, #55157	; 0xd775
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	movt	r1, #1
   11cb0:	bl	11354 <dcgettext@plt>
   11cb4:	mov	r6, r0
   11cb8:	ldr	r0, [r4, #4]
   11cbc:	bl	1a50c <__assert_fail@plt+0x8f24>
   11cc0:	movw	r2, #55150	; 0xd76e
   11cc4:	str	r0, [sp]
   11cc8:	mov	r0, #1
   11ccc:	mov	r1, r5
   11cd0:	mov	r3, r6
   11cd4:	movt	r2, #1
   11cd8:	bl	113f0 <error@plt>
   11cdc:	mov	r0, #0
   11ce0:	str	ip, [sp, #120]	; 0x78
   11ce4:	str	r0, [sp, #124]	; 0x7c
   11ce8:	movw	r1, #61889	; 0xf1c1
   11cec:	sub	r0, r7, #102	; 0x66
   11cf0:	mov	r3, #1
   11cf4:	movt	r1, #2
   11cf8:	clz	r0, r0
   11cfc:	strb	r6, [r1]
   11d00:	movw	r1, #61891	; 0xf1c3
   11d04:	lsr	r0, r0, #5
   11d08:	movt	r1, #2
   11d0c:	strb	r8, [r1]
   11d10:	movw	r1, #61892	; 0xf1c4
   11d14:	movt	r1, #2
   11d18:	strb	r0, [r1]
   11d1c:	movw	r6, #61880	; 0xf1b8
   11d20:	add	r7, r4, r3, lsl #2
   11d24:	movw	r4, #55172	; 0xd784
   11d28:	sub	r9, r5, r3
   11d2c:	vmov.f64	d8, #112	; 0x3f800000  1.0
   11d30:	mov	r5, #0
   11d34:	mov	r0, #0
   11d38:	movt	r4, #1
   11d3c:	movt	r6, #2
   11d40:	b	11d78 <__assert_fail@plt+0x790>
   11d44:	strb	r1, [r0]
   11d48:	mov	r0, sl
   11d4c:	b	11d78 <__assert_fail@plt+0x790>
   11d50:	movw	r0, #61760	; 0xf140
   11d54:	mov	r1, #1
   11d58:	movt	r0, #2
   11d5c:	str	r1, [r0]
   11d60:	movw	r0, #61892	; 0xf1c4
   11d64:	movt	r0, #2
   11d68:	strb	r1, [r0]
   11d6c:	movw	r0, #61902	; 0xf1ce
   11d70:	movt	r0, #2
   11d74:	b	11d44 <__assert_fail@plt+0x75c>
   11d78:	movw	r3, #56936	; 0xde68
   11d7c:	mov	sl, r0
   11d80:	mov	r0, r9
   11d84:	mov	r1, r7
   11d88:	mov	r2, r4
   11d8c:	str	r5, [sp]
   11d90:	movt	r3, #1
   11d94:	bl	11444 <getopt_long@plt>
   11d98:	add	r1, r0, #3
   11d9c:	cmp	r1, #264	; 0x108
   11da0:	bhi	1519c <__assert_fail@plt+0x3bb4>
   11da4:	add	r2, pc, #8
   11da8:	mov	r8, r0
   11dac:	mov	r0, #2
   11db0:	ldr	pc, [r2, r1, lsl #2]
   11db4:	andeq	r5, r1, r4, lsr #3
   11db8:	andeq	r5, r1, r8, lsl #4
   11dbc:	andeq	r2, r1, ip, ror #8
   11dc0:	muleq	r1, ip, r1
   11dc4:	muleq	r1, ip, r1
   11dc8:	muleq	r1, ip, r1
   11dcc:	muleq	r1, ip, r1
   11dd0:	muleq	r1, ip, r1
   11dd4:	muleq	r1, ip, r1
   11dd8:	muleq	r1, ip, r1
   11ddc:	muleq	r1, ip, r1
   11de0:	muleq	r1, ip, r1
   11de4:	muleq	r1, ip, r1
   11de8:	muleq	r1, ip, r1
   11dec:	muleq	r1, ip, r1
   11df0:	muleq	r1, ip, r1
   11df4:	muleq	r1, ip, r1
   11df8:	muleq	r1, ip, r1
   11dfc:	muleq	r1, ip, r1
   11e00:	muleq	r1, ip, r1
   11e04:	muleq	r1, ip, r1
   11e08:	muleq	r1, ip, r1
   11e0c:	muleq	r1, ip, r1
   11e10:	muleq	r1, ip, r1
   11e14:	muleq	r1, ip, r1
   11e18:	muleq	r1, ip, r1
   11e1c:	muleq	r1, ip, r1
   11e20:	muleq	r1, ip, r1
   11e24:	muleq	r1, ip, r1
   11e28:	muleq	r1, ip, r1
   11e2c:	muleq	r1, ip, r1
   11e30:	muleq	r1, ip, r1
   11e34:	muleq	r1, ip, r1
   11e38:	muleq	r1, ip, r1
   11e3c:	muleq	r1, ip, r1
   11e40:	muleq	r1, ip, r1
   11e44:	muleq	r1, ip, r1
   11e48:	muleq	r1, ip, r1
   11e4c:	muleq	r1, ip, r1
   11e50:	muleq	r1, ip, r1
   11e54:	muleq	r1, ip, r1
   11e58:	muleq	r1, ip, r1
   11e5c:	muleq	r1, ip, r1
   11e60:	muleq	r1, ip, r1
   11e64:	muleq	r1, ip, r1
   11e68:	muleq	r1, ip, r1
   11e6c:	muleq	r1, ip, r1
   11e70:	muleq	r1, ip, r1
   11e74:	muleq	r1, ip, r1
   11e78:	muleq	r1, ip, r1
   11e7c:	muleq	r1, ip, r1
   11e80:	andeq	r5, r1, r4, ror r1
   11e84:	andeq	r5, r1, r4, ror r1
   11e88:	andeq	r5, r1, r4, ror r1
   11e8c:	andeq	r5, r1, r4, ror r1
   11e90:	andeq	r5, r1, r4, ror r1
   11e94:	andeq	r5, r1, r4, ror r1
   11e98:	andeq	r5, r1, r4, ror r1
   11e9c:	andeq	r5, r1, r4, ror r1
   11ea0:	andeq	r5, r1, r4, ror r1
   11ea4:	andeq	r5, r1, r4, ror r1
   11ea8:	muleq	r1, ip, r1
   11eac:	muleq	r1, ip, r1
   11eb0:	muleq	r1, ip, r1
   11eb4:	muleq	r1, ip, r1
   11eb8:	muleq	r1, ip, r1
   11ebc:	muleq	r1, ip, r1
   11ec0:	muleq	r1, ip, r1
   11ec4:	muleq	r1, ip, r1
   11ec8:	muleq	r1, ip, r1
   11ecc:	muleq	r1, ip, r1
   11ed0:	muleq	r1, ip, r1
   11ed4:	muleq	r1, ip, r1
   11ed8:	andeq	r1, r1, r0, asr sp
   11edc:	muleq	r1, ip, r1
   11ee0:	muleq	r1, ip, r1
   11ee4:	muleq	r1, ip, r1
   11ee8:	muleq	r1, ip, r1
   11eec:	muleq	r1, ip, r1
   11ef0:	muleq	r1, ip, r1
   11ef4:	muleq	r1, ip, r1
   11ef8:	muleq	r1, ip, r1
   11efc:	muleq	r1, ip, r1
   11f00:	muleq	r1, ip, r1
   11f04:	muleq	r1, ip, r1
   11f08:	muleq	r1, ip, r1
   11f0c:	muleq	r1, ip, r1
   11f10:	muleq	r1, ip, r1
   11f14:	muleq	r1, ip, r1
   11f18:	muleq	r1, ip, r1
   11f1c:	muleq	r1, ip, r1
   11f20:	muleq	r1, ip, r1
   11f24:	muleq	r1, ip, r1
   11f28:	muleq	r1, ip, r1
   11f2c:	muleq	r1, ip, r1
   11f30:	muleq	r1, ip, r1
   11f34:	muleq	r1, ip, r1
   11f38:	muleq	r1, ip, r1
   11f3c:	muleq	r1, ip, r1
   11f40:	muleq	r1, ip, r1
   11f44:	muleq	r1, ip, r1
   11f48:	muleq	r1, ip, r1
   11f4c:	ldrdeq	r2, [r1], -r8
   11f50:	muleq	r1, ip, r1
   11f54:	muleq	r1, ip, r1
   11f58:	andeq	r2, r1, r0, lsr #4
   11f5c:	muleq	r1, ip, r1
   11f60:	muleq	r1, ip, r1
   11f64:	muleq	r1, ip, r1
   11f68:	muleq	r1, ip, r1
   11f6c:	muleq	r1, ip, r1
   11f70:	muleq	r1, ip, r1
   11f74:	muleq	r1, ip, r1
   11f78:	ldrdeq	r2, [r1], -r8
   11f7c:	muleq	r1, ip, r1
   11f80:	muleq	r1, ip, r1
   11f84:	andeq	r1, r1, r8, ror sp
   11f88:	muleq	r1, ip, r1
   11f8c:	andeq	r2, r1, r4, ror #6
   11f90:	muleq	r1, ip, r1
   11f94:	muleq	r1, ip, r1
   11f98:			; <UNDEFINED> instruction: 0x000123bc
   11f9c:	muleq	r1, ip, r1
   11fa0:	muleq	r1, ip, r1
   11fa4:	muleq	r1, ip, r1
   11fa8:	muleq	r1, ip, r3
   11fac:	muleq	r1, ip, r1
   11fb0:	muleq	r1, ip, r1
   11fb4:	muleq	r1, ip, r1
   11fb8:	muleq	r1, ip, r1
   11fbc:	muleq	r1, ip, r1
   11fc0:	muleq	r1, ip, r1
   11fc4:	muleq	r1, ip, r1
   11fc8:	muleq	r1, ip, r1
   11fcc:	muleq	r1, ip, r1
   11fd0:	muleq	r1, ip, r1
   11fd4:	muleq	r1, ip, r1
   11fd8:	muleq	r1, ip, r1
   11fdc:	muleq	r1, ip, r1
   11fe0:	muleq	r1, ip, r1
   11fe4:	muleq	r1, ip, r1
   11fe8:	muleq	r1, ip, r1
   11fec:	muleq	r1, ip, r1
   11ff0:	muleq	r1, ip, r1
   11ff4:	muleq	r1, ip, r1
   11ff8:	muleq	r1, ip, r1
   11ffc:	muleq	r1, ip, r1
   12000:	muleq	r1, ip, r1
   12004:	muleq	r1, ip, r1
   12008:	muleq	r1, ip, r1
   1200c:	muleq	r1, ip, r1
   12010:	muleq	r1, ip, r1
   12014:	muleq	r1, ip, r1
   12018:	muleq	r1, ip, r1
   1201c:	muleq	r1, ip, r1
   12020:	muleq	r1, ip, r1
   12024:	muleq	r1, ip, r1
   12028:	muleq	r1, ip, r1
   1202c:	muleq	r1, ip, r1
   12030:	muleq	r1, ip, r1
   12034:	muleq	r1, ip, r1
   12038:	muleq	r1, ip, r1
   1203c:	muleq	r1, ip, r1
   12040:	muleq	r1, ip, r1
   12044:	muleq	r1, ip, r1
   12048:	muleq	r1, ip, r1
   1204c:	muleq	r1, ip, r1
   12050:	muleq	r1, ip, r1
   12054:	muleq	r1, ip, r1
   12058:	muleq	r1, ip, r1
   1205c:	muleq	r1, ip, r1
   12060:	muleq	r1, ip, r1
   12064:	muleq	r1, ip, r1
   12068:	muleq	r1, ip, r1
   1206c:	muleq	r1, ip, r1
   12070:	muleq	r1, ip, r1
   12074:	muleq	r1, ip, r1
   12078:	muleq	r1, ip, r1
   1207c:	muleq	r1, ip, r1
   12080:	muleq	r1, ip, r1
   12084:	muleq	r1, ip, r1
   12088:	muleq	r1, ip, r1
   1208c:	muleq	r1, ip, r1
   12090:	muleq	r1, ip, r1
   12094:	muleq	r1, ip, r1
   12098:	muleq	r1, ip, r1
   1209c:	muleq	r1, ip, r1
   120a0:	muleq	r1, ip, r1
   120a4:	muleq	r1, ip, r1
   120a8:	muleq	r1, ip, r1
   120ac:	muleq	r1, ip, r1
   120b0:	muleq	r1, ip, r1
   120b4:	muleq	r1, ip, r1
   120b8:	muleq	r1, ip, r1
   120bc:	muleq	r1, ip, r1
   120c0:	muleq	r1, ip, r1
   120c4:	muleq	r1, ip, r1
   120c8:	muleq	r1, ip, r1
   120cc:	muleq	r1, ip, r1
   120d0:	muleq	r1, ip, r1
   120d4:	muleq	r1, ip, r1
   120d8:	muleq	r1, ip, r1
   120dc:	muleq	r1, ip, r1
   120e0:	muleq	r1, ip, r1
   120e4:	muleq	r1, ip, r1
   120e8:	muleq	r1, ip, r1
   120ec:	muleq	r1, ip, r1
   120f0:	muleq	r1, ip, r1
   120f4:	muleq	r1, ip, r1
   120f8:	muleq	r1, ip, r1
   120fc:	muleq	r1, ip, r1
   12100:	muleq	r1, ip, r1
   12104:	muleq	r1, ip, r1
   12108:	muleq	r1, ip, r1
   1210c:	muleq	r1, ip, r1
   12110:	muleq	r1, ip, r1
   12114:	muleq	r1, ip, r1
   12118:	muleq	r1, ip, r1
   1211c:	muleq	r1, ip, r1
   12120:	muleq	r1, ip, r1
   12124:	muleq	r1, ip, r1
   12128:	muleq	r1, ip, r1
   1212c:	muleq	r1, ip, r1
   12130:	muleq	r1, ip, r1
   12134:	muleq	r1, ip, r1
   12138:	muleq	r1, ip, r1
   1213c:	muleq	r1, ip, r1
   12140:	muleq	r1, ip, r1
   12144:	muleq	r1, ip, r1
   12148:	muleq	r1, ip, r1
   1214c:	muleq	r1, ip, r1
   12150:	muleq	r1, ip, r1
   12154:	muleq	r1, ip, r1
   12158:	muleq	r1, ip, r1
   1215c:	muleq	r1, ip, r1
   12160:	muleq	r1, ip, r1
   12164:	muleq	r1, ip, r1
   12168:	muleq	r1, ip, r1
   1216c:	muleq	r1, ip, r1
   12170:	muleq	r1, ip, r1
   12174:	muleq	r1, ip, r1
   12178:	muleq	r1, ip, r1
   1217c:	muleq	r1, ip, r1
   12180:	muleq	r1, ip, r1
   12184:	muleq	r1, ip, r1
   12188:	muleq	r1, ip, r1
   1218c:	muleq	r1, ip, r1
   12190:	muleq	r1, ip, r1
   12194:	muleq	r1, ip, r1
   12198:	muleq	r1, ip, r1
   1219c:	muleq	r1, ip, r1
   121a0:	muleq	r1, ip, r1
   121a4:	muleq	r1, ip, r1
   121a8:	muleq	r1, ip, r1
   121ac:	muleq	r1, ip, r1
   121b0:	muleq	r1, ip, r1
   121b4:	muleq	r1, ip, r1
   121b8:	muleq	r1, ip, r1
   121bc:	muleq	r1, ip, r1
   121c0:			; <UNDEFINED> instruction: 0x000123b0
   121c4:	andeq	r2, r1, r0, lsl #6
   121c8:	andeq	r2, r1, ip, lsl #5
   121cc:	strdeq	r2, [r1], -r4
   121d0:	andeq	r2, r1, r0, lsr #4
   121d4:	andeq	r2, r1, r4, asr #7
   121d8:	sub	r0, r8, #110	; 0x6e
   121dc:	mov	r4, r9
   121e0:	ldr	r9, [r6]
   121e4:	movw	r1, #61889	; 0xf1c1
   121e8:	clz	r0, r0
   121ec:	movt	r1, #2
   121f0:	lsr	r0, r0, #5
   121f4:	strb	r0, [r1]
   121f8:	ldrb	r0, [r9]
   121fc:	cmp	r0, #45	; 0x2d
   12200:	beq	123ec <__assert_fail@plt+0xe04>
   12204:	cmp	r0, #43	; 0x2b
   12208:	bne	123f4 <__assert_fail@plt+0xe0c>
   1220c:	movw	r0, #61891	; 0xf1c3
   12210:	mov	r1, #1
   12214:	movt	r0, #2
   12218:	strb	r1, [r0]
   1221c:	b	123f4 <__assert_fail@plt+0xe0c>
   12220:	ldr	r1, [r6]
   12224:	movw	r0, #61892	; 0xf1c4
   12228:	mov	r2, #1
   1222c:	movt	r0, #2
   12230:	strb	r2, [r0]
   12234:	cmp	r1, #0
   12238:	beq	123d4 <__assert_fail@plt+0xdec>
   1223c:	movw	r0, #61780	; 0xf154
   12240:	mov	r3, #4
   12244:	mov	r8, r7
   12248:	movw	r7, #57192	; 0xdf68
   1224c:	movt	r0, #2
   12250:	str	r3, [sp]
   12254:	movt	r7, #1
   12258:	ldr	r0, [r0]
   1225c:	mov	r3, r7
   12260:	stmib	sp, {r0, r2}
   12264:	movw	r0, #55255	; 0xd7d7
   12268:	movw	r2, #57200	; 0xdf70
   1226c:	movt	r0, #1
   12270:	movt	r2, #1
   12274:	bl	16d64 <__assert_fail@plt+0x577c>
   12278:	ldr	r0, [r7, r0, lsl #2]
   1227c:	movw	r1, #61760	; 0xf140
   12280:	mov	r7, r8
   12284:	movt	r1, #2
   12288:	b	122e8 <__assert_fail@plt+0xd00>
   1228c:	mov	r4, r6
   12290:	ldr	r6, [r6]
   12294:	movw	r1, #55320	; 0xd818
   12298:	mov	r0, #0
   1229c:	mov	r2, #5
   122a0:	movt	r1, #1
   122a4:	bl	11354 <dcgettext@plt>
   122a8:	mvn	r1, #-2147483648	; 0x80000000
   122ac:	mov	r2, #0
   122b0:	mov	r3, #0
   122b4:	stm	sp, {r1, r5}
   122b8:	movw	r1, #54062	; 0xd32e
   122bc:	str	r0, [sp, #12]
   122c0:	mov	r0, r6
   122c4:	mov	r6, r4
   122c8:	movw	r4, #55172	; 0xd784
   122cc:	str	r5, [sp, #16]
   122d0:	movt	r1, #1
   122d4:	movt	r4, #1
   122d8:	str	r1, [sp, #8]
   122dc:	bl	1b43c <__assert_fail@plt+0x9e54>
   122e0:	movw	r1, #61896	; 0xf1c8
   122e4:	movt	r1, #2
   122e8:	str	r0, [r1]
   122ec:	mov	r0, sl
   122f0:	b	11d78 <__assert_fail@plt+0x790>
   122f4:	movw	r0, #61903	; 0xf1cf
   122f8:	movt	r0, #2
   122fc:	b	123cc <__assert_fail@plt+0xde4>
   12300:	ldr	r4, [r6]
   12304:	movw	r1, #55264	; 0xd7e0
   12308:	mov	r0, #0
   1230c:	mov	r2, #5
   12310:	movt	r1, #1
   12314:	bl	11354 <dcgettext@plt>
   12318:	mvn	r1, #0
   1231c:	str	r0, [sp, #12]
   12320:	mov	r0, r4
   12324:	movw	r4, #55172	; 0xd784
   12328:	mov	r2, #0
   1232c:	mov	r3, #0
   12330:	str	r5, [sp, #16]
   12334:	str	r1, [sp]
   12338:	str	r1, [sp, #4]
   1233c:	movw	r1, #54062	; 0xd32e
   12340:	movt	r4, #1
   12344:	movt	r1, #1
   12348:	str	r1, [sp, #8]
   1234c:	bl	1b43c <__assert_fail@plt+0x9e54>
   12350:	movw	r2, #61768	; 0xf148
   12354:	movt	r2, #2
   12358:	strd	r0, [r2]
   1235c:	mov	r0, sl
   12360:	b	11d78 <__assert_fail@plt+0x790>
   12364:	ldr	r0, [r6]
   12368:	movw	r3, #28756	; 0x7054
   1236c:	mov	r1, #0
   12370:	add	r2, sp, #128	; 0x80
   12374:	movt	r3, #1
   12378:	bl	1b508 <__assert_fail@plt+0x9f20>
   1237c:	cmp	r0, #0
   12380:	beq	15210 <__assert_fail@plt+0x3c28>
   12384:	vldr	d8, [sp, #128]	; 0x80
   12388:	vcmpe.f64	d8, #0.0
   1238c:	vmrs	APSR_nzcv, fpscr
   12390:	blt	15210 <__assert_fail@plt+0x3c28>
   12394:	mov	r0, sl
   12398:	b	11d78 <__assert_fail@plt+0x790>
   1239c:	movw	r0, #61893	; 0xf1c5
   123a0:	movt	r0, #2
   123a4:	strb	r5, [r0]
   123a8:	mov	r0, sl
   123ac:	b	11d78 <__assert_fail@plt+0x790>
   123b0:	movw	r0, #61902	; 0xf1ce
   123b4:	movt	r0, #2
   123b8:	b	123cc <__assert_fail@plt+0xde4>
   123bc:	mov	r0, #1
   123c0:	b	11d78 <__assert_fail@plt+0x790>
   123c4:	movw	r0, #61901	; 0xf1cd
   123c8:	movt	r0, #2
   123cc:	mov	r1, #1
   123d0:	b	11d44 <__assert_fail@plt+0x75c>
   123d4:	movw	r0, #61760	; 0xf140
   123d8:	mov	r1, #2
   123dc:	movt	r0, #2
   123e0:	str	r1, [r0]
   123e4:	mov	r0, sl
   123e8:	b	11d78 <__assert_fail@plt+0x790>
   123ec:	add	r9, r9, #1
   123f0:	str	r9, [r6]
   123f4:	movw	r1, #55231	; 0xd7bf
   123f8:	movw	r0, #55207	; 0xd7a7
   123fc:	cmp	r8, #110	; 0x6e
   12400:	mov	r2, #5
   12404:	movt	r1, #1
   12408:	movt	r0, #1
   1240c:	moveq	r1, r0
   12410:	mov	r0, #0
   12414:	bl	11354 <dcgettext@plt>
   12418:	mvn	r1, #0
   1241c:	str	r0, [sp, #12]
   12420:	mov	r0, #0
   12424:	mov	r2, #0
   12428:	mov	r3, #0
   1242c:	mov	r5, #0
   12430:	str	r1, [sp]
   12434:	str	r1, [sp, #4]
   12438:	movw	r1, #55194	; 0xd79a
   1243c:	str	r0, [sp, #16]
   12440:	mov	r0, r9
   12444:	movt	r1, #1
   12448:	str	r1, [sp, #8]
   1244c:	bl	1b43c <__assert_fail@plt+0x9e54>
   12450:	mov	r9, r4
   12454:	movw	r4, #55172	; 0xd784
   12458:	str	r0, [sp, #120]	; 0x78
   1245c:	str	r1, [sp, #124]	; 0x7c
   12460:	mov	r0, sl
   12464:	movt	r4, #1
   12468:	b	11d78 <__assert_fail@plt+0x790>
   1246c:	movw	r0, #61902	; 0xf1ce
   12470:	movt	r0, #2
   12474:	ldrb	r0, [r0]
   12478:	cmp	r0, #1
   1247c:	bne	124e8 <__assert_fail@plt+0xf00>
   12480:	movw	r0, #61892	; 0xf1c4
   12484:	movt	r0, #2
   12488:	ldrb	r0, [r0]
   1248c:	cmp	r0, #0
   12490:	beq	124b4 <__assert_fail@plt+0xecc>
   12494:	movw	r0, #61760	; 0xf140
   12498:	movt	r0, #2
   1249c:	ldr	r0, [r0]
   124a0:	cmp	r0, #2
   124a4:	bne	124e8 <__assert_fail@plt+0xf00>
   124a8:	movw	r1, #55520	; 0xd8e0
   124ac:	movt	r1, #1
   124b0:	b	124cc <__assert_fail@plt+0xee4>
   124b4:	movw	r1, #61902	; 0xf1ce
   124b8:	mov	r0, #0
   124bc:	movt	r1, #2
   124c0:	strb	r0, [r1]
   124c4:	movw	r1, #55456	; 0xd8a0
   124c8:	movt	r1, #1
   124cc:	mov	r0, #0
   124d0:	mov	r2, #5
   124d4:	bl	11354 <dcgettext@plt>
   124d8:	mov	r2, r0
   124dc:	mov	r0, #0
   124e0:	mov	r1, #0
   124e4:	bl	113f0 <error@plt>
   124e8:	movw	r0, #61896	; 0xf1c8
   124ec:	movt	r0, #2
   124f0:	ldr	r0, [r0]
   124f4:	cmp	r0, #0
   124f8:	beq	12538 <__assert_fail@plt+0xf50>
   124fc:	movw	r1, #61892	; 0xf1c4
   12500:	movt	r1, #2
   12504:	ldrb	r1, [r1]
   12508:	cmp	r1, #0
   1250c:	bne	12538 <__assert_fail@plt+0xf50>
   12510:	movw	r1, #55573	; 0xd915
   12514:	mov	r0, #0
   12518:	mov	r2, #5
   1251c:	movt	r1, #1
   12520:	bl	11354 <dcgettext@plt>
   12524:	mov	r2, r0
   12528:	mov	r0, #0
   1252c:	mov	r1, #0
   12530:	bl	113f0 <error@plt>
   12534:	b	12594 <__assert_fail@plt+0xfac>
   12538:	cmp	r0, #0
   1253c:	beq	12594 <__assert_fail@plt+0xfac>
   12540:	mov	r1, #0
   12544:	bl	11450 <kill@plt>
   12548:	cmp	r0, #0
   1254c:	beq	12594 <__assert_fail@plt+0xfac>
   12550:	bl	114b0 <__errno_location@plt>
   12554:	ldr	r0, [r0]
   12558:	cmp	r0, #38	; 0x26
   1255c:	bne	12594 <__assert_fail@plt+0xfac>
   12560:	movw	r1, #55635	; 0xd953
   12564:	mov	r0, #0
   12568:	mov	r2, #5
   1256c:	mov	r6, #0
   12570:	movt	r1, #1
   12574:	bl	11354 <dcgettext@plt>
   12578:	mov	r2, r0
   1257c:	mov	r0, #0
   12580:	mov	r1, #0
   12584:	bl	113f0 <error@plt>
   12588:	movw	r0, #61896	; 0xf1c8
   1258c:	movt	r0, #2
   12590:	str	r6, [r0]
   12594:	movw	r0, #61891	; 0xf1c3
   12598:	ldr	r3, [sp, #120]	; 0x78
   1259c:	ldr	r5, [sp, #124]	; 0x7c
   125a0:	movt	r0, #2
   125a4:	ldrb	r2, [r0]
   125a8:	cmp	r2, #0
   125ac:	orrsne	r0, r3, r5
   125b0:	beq	125c4 <__assert_fail@plt+0xfdc>
   125b4:	subs	r3, r3, #1
   125b8:	sbc	r5, r5, #0
   125bc:	str	r3, [sp, #120]	; 0x78
   125c0:	str	r5, [sp, #124]	; 0x7c
   125c4:	movw	r0, #61864	; 0xf1a8
   125c8:	movw	r6, #56872	; 0xde28
   125cc:	mov	r8, #1
   125d0:	movt	r0, #2
   125d4:	movt	r6, #1
   125d8:	ldr	r0, [r0]
   125dc:	cmp	r9, r0
   125e0:	subgt	r8, r9, r0
   125e4:	addgt	r6, r7, r0, lsl #2
   125e8:	cmp	r8, #0
   125ec:	str	r8, [sp, #76]	; 0x4c
   125f0:	beq	1270c <__assert_fail@plt+0x1124>
   125f4:	movw	r4, #55146	; 0xd76a
   125f8:	str	r5, [sp, #112]	; 0x70
   125fc:	mov	r9, r8
   12600:	mov	r7, r2
   12604:	mov	r5, #0
   12608:	mov	r8, #0
   1260c:	str	r3, [sp, #116]	; 0x74
   12610:	movt	r4, #1
   12614:	ldr	r0, [r6, r8, lsl #2]
   12618:	mov	r1, r4
   1261c:	bl	112b8 <strcmp@plt>
   12620:	clz	r0, r0
   12624:	add	r8, r8, #1
   12628:	lsr	r0, r0, #5
   1262c:	cmp	r9, r8
   12630:	orr	r5, r5, r0
   12634:	bne	12614 <__assert_fail@plt+0x102c>
   12638:	movw	r0, #61760	; 0xf140
   1263c:	mvn	r2, r5
   12640:	movt	r0, #2
   12644:	ldr	r1, [r0]
   12648:	subs	r0, r1, #1
   1264c:	movwne	r0, #1
   12650:	orr	r0, r2, r0
   12654:	tst	r0, #1
   12658:	beq	15270 <__assert_fail@plt+0x3c88>
   1265c:	movw	r0, #61892	; 0xf1c4
   12660:	ldr	r8, [sp, #76]	; 0x4c
   12664:	movt	r0, #2
   12668:	ldrb	r0, [r0]
   1266c:	cmp	r0, #0
   12670:	beq	12724 <__assert_fail@plt+0x113c>
   12674:	eor	r2, r5, #1
   12678:	ldr	r3, [sp, #116]	; 0x74
   1267c:	ldr	r5, [sp, #112]	; 0x70
   12680:	tst	r2, #1
   12684:	mov	r2, r7
   12688:	bne	12700 <__assert_fail@plt+0x1118>
   1268c:	cmp	r8, #1
   12690:	bne	126ac <__assert_fail@plt+0x10c4>
   12694:	cmp	r1, #2
   12698:	movweq	r0, #61896	; 0xf1c8
   1269c:	movteq	r0, #2
   126a0:	ldreq	r0, [r0]
   126a4:	cmpeq	r0, #0
   126a8:	beq	14608 <__assert_fail@plt+0x3020>
   126ac:	mov	r0, #0
   126b0:	bl	115a0 <isatty@plt>
   126b4:	cmp	r0, #0
   126b8:	beq	126e0 <__assert_fail@plt+0x10f8>
   126bc:	movw	r1, #54554	; 0xd51a
   126c0:	mov	r0, #0
   126c4:	mov	r2, #5
   126c8:	movt	r1, #1
   126cc:	bl	11354 <dcgettext@plt>
   126d0:	mov	r2, r0
   126d4:	mov	r0, #0
   126d8:	mov	r1, #0
   126dc:	bl	113f0 <error@plt>
   126e0:	movw	r0, #61891	; 0xf1c3
   126e4:	ldr	r3, [sp, #120]	; 0x78
   126e8:	ldr	r5, [sp, #124]	; 0x7c
   126ec:	movt	r0, #2
   126f0:	ldrb	r2, [r0]
   126f4:	movw	r0, #61892	; 0xf1c4
   126f8:	movt	r0, #2
   126fc:	ldrb	r0, [r0]
   12700:	orrs	r1, r3, r5
   12704:	beq	12738 <__assert_fail@plt+0x1150>
   12708:	b	12744 <__assert_fail@plt+0x115c>
   1270c:	movw	r0, #61892	; 0xf1c4
   12710:	movt	r0, #2
   12714:	ldrb	r0, [r0]
   12718:	orrs	r1, r3, r5
   1271c:	beq	12738 <__assert_fail@plt+0x1150>
   12720:	b	12744 <__assert_fail@plt+0x115c>
   12724:	ldr	r3, [sp, #116]	; 0x74
   12728:	ldr	r5, [sp, #112]	; 0x70
   1272c:	mov	r2, r7
   12730:	orrs	r1, r3, r5
   12734:	bne	12744 <__assert_fail@plt+0x115c>
   12738:	orrs	r0, r2, r0
   1273c:	mov	r0, #0
   12740:	beq	13e98 <__assert_fail@plt+0x28b0>
   12744:	mov	r0, r8
   12748:	mov	r1, #80	; 0x50
   1274c:	bl	1ae74 <__assert_fail@plt+0x988c>
   12750:	mov	r9, r0
   12754:	cmp	r8, #0
   12758:	beq	12774 <__assert_fail@plt+0x118c>
   1275c:	mov	r0, r8
   12760:	mov	r1, r9
   12764:	ldr	r2, [r6], #4
   12768:	subs	r0, r0, #1
   1276c:	str	r2, [r1], #80	; 0x50
   12770:	bne	12764 <__assert_fail@plt+0x117c>
   12774:	cmp	sl, #1
   12778:	beq	1278c <__assert_fail@plt+0x11a4>
   1277c:	cmp	sl, #0
   12780:	bne	1279c <__assert_fail@plt+0x11b4>
   12784:	cmp	r8, #2
   12788:	bcc	1279c <__assert_fail@plt+0x11b4>
   1278c:	movw	r1, #61890	; 0xf1c2
   12790:	mov	r0, #1
   12794:	movt	r1, #2
   12798:	strb	r0, [r1]
   1279c:	cmp	r8, #0
   127a0:	str	r9, [sp, #48]	; 0x30
   127a4:	beq	13e50 <__assert_fail@plt+0x2868>
   127a8:	add	sl, sp, #128	; 0x80
   127ac:	movw	r8, #55146	; 0xd76a
   127b0:	vmov.i32	q5, #0	; 0x00000000
   127b4:	mov	r6, #1
   127b8:	add	r0, sl, #96	; 0x60
   127bc:	movt	r8, #1
   127c0:	str	r0, [sp, #32]
   127c4:	add	r0, sl, #80	; 0x50
   127c8:	movw	sl, #55972	; 0xdaa4
   127cc:	str	r0, [sp, #28]
   127d0:	sub	r0, fp, #176	; 0xb0
   127d4:	movt	sl, #1
   127d8:	add	r0, r0, #48	; 0x30
   127dc:	str	r0, [sp, #24]
   127e0:	mov	r0, #0
   127e4:	b	137bc <__assert_fail@plt+0x21d4>
   127e8:	ldr	r0, [sp, #112]	; 0x70
   127ec:	ldr	sl, [sp, #116]	; 0x74
   127f0:	mvn	r1, #0
   127f4:	str	r7, [sp, #36]	; 0x24
   127f8:	subs	r0, r1, r0
   127fc:	sbcs	r0, r1, sl
   12800:	movw	r1, #61903	; 0xf1cf
   12804:	movt	r1, #2
   12808:	mov	r0, #0
   1280c:	ldrb	r1, [r1]
   12810:	movwlt	r0, #1
   12814:	eor	r1, r1, #1
   12818:	and	r0, r0, r1
   1281c:	movw	r1, #61891	; 0xf1c3
   12820:	movt	r1, #2
   12824:	ldrb	r1, [r1]
   12828:	cmp	r1, #0
   1282c:	beq	12aec <__assert_fail@plt+0x1504>
   12830:	cmp	r0, #0
   12834:	beq	12b5c <__assert_fail@plt+0x1574>
   12838:	ldr	r0, [fp, #-160]	; 0xffffff60
   1283c:	ldr	r2, [sp, #108]	; 0x6c
   12840:	and	r0, r0, #61440	; 0xf000
   12844:	cmp	r0, #32768	; 0x8000
   12848:	bne	12b2c <__assert_fail@plt+0x1544>
   1284c:	mov	r0, #1
   12850:	mov	r3, sl
   12854:	stm	sp, {r0, r7}
   12858:	mov	r0, r2
   1285c:	ldr	r2, [sp, #112]	; 0x70
   12860:	bl	15d6c <__assert_fail@plt+0x4784>
   12864:	ldr	sl, [sp, #116]	; 0x74
   12868:	ldr	r2, [sp, #108]	; 0x6c
   1286c:	mvn	r4, #0
   12870:	subs	r0, r4, r0
   12874:	sbcs	r0, r4, r1
   12878:	bge	12b2c <__assert_fail@plt+0x1544>
   1287c:	ldr	r4, [sp, #112]	; 0x70
   12880:	mov	r8, sl
   12884:	b	12be8 <__assert_fail@plt+0x1600>
   12888:	ldr	r5, [sp, #84]	; 0x54
   1288c:	ldr	r0, [sp, #108]	; 0x6c
   12890:	mov	r4, sl
   12894:	add	r1, sp, #128	; 0x80
   12898:	mov	r2, #8192	; 0x2000
   1289c:	bl	1a644 <__assert_fail@plt+0x905c>
   128a0:	cmp	r0, #0
   128a4:	beq	134b0 <__assert_fail@plt+0x1ec8>
   128a8:	ldr	r2, [sp, #116]	; 0x74
   128ac:	cmn	r0, #1
   128b0:	beq	134c0 <__assert_fail@plt+0x1ed8>
   128b4:	add	r1, sp, #128	; 0x80
   128b8:	adds	r8, r8, r0
   128bc:	add	r5, r1, r0
   128c0:	movw	r0, #61893	; 0xf1c5
   128c4:	adc	r4, r4, #0
   128c8:	movt	r0, #2
   128cc:	mov	sl, r4
   128d0:	ldrb	r4, [r0]
   128d4:	mov	r0, r1
   128d8:	cmp	r4, #0
   128dc:	movwne	r4, #10
   128e0:	str	r2, [sp, #116]	; 0x74
   128e4:	sub	r2, r5, r0
   128e8:	mov	r1, r4
   128ec:	bl	11504 <memchr@plt>
   128f0:	cmp	r0, #0
   128f4:	beq	12888 <__assert_fail@plt+0x12a0>
   128f8:	ldr	r1, [sp, #112]	; 0x70
   128fc:	ldr	r2, [sp, #116]	; 0x74
   12900:	add	r0, r0, #1
   12904:	subs	r1, r1, #1
   12908:	sbc	r2, r2, #0
   1290c:	str	r1, [sp, #112]	; 0x70
   12910:	orrs	r1, r1, r2
   12914:	bne	128e0 <__assert_fail@plt+0x12f8>
   12918:	cmp	r0, r5
   1291c:	subcc	r1, r5, r0
   12920:	blcc	15e44 <__assert_fail@plt+0x485c>
   12924:	ldr	r5, [sp, #84]	; 0x54
   12928:	ldr	r2, [sp, #108]	; 0x6c
   1292c:	mov	r4, sl
   12930:	b	12aac <__assert_fail@plt+0x14c4>
   12934:	movw	r0, #61903	; 0xf1cf
   12938:	str	r7, [sp, #36]	; 0x24
   1293c:	movt	r0, #2
   12940:	ldrb	r0, [r0]
   12944:	cmp	r0, #0
   12948:	bne	1306c <__assert_fail@plt+0x1a84>
   1294c:	ldr	r0, [fp, #-160]	; 0xffffff60
   12950:	and	r0, r0, #61440	; 0xf000
   12954:	cmp	r0, #32768	; 0x8000
   12958:	bne	1306c <__assert_fail@plt+0x1a84>
   1295c:	mov	r0, #1
   12960:	mov	r2, #0
   12964:	mov	r3, #0
   12968:	str	r0, [sp]
   1296c:	ldr	r0, [sp, #108]	; 0x6c
   12970:	bl	113c0 <lseek64@plt>
   12974:	mov	r4, r1
   12978:	mov	sl, r0
   1297c:	mvn	r1, #0
   12980:	eor	r0, r4, r1
   12984:	eor	r1, sl, r1
   12988:	orrs	r0, r1, r0
   1298c:	beq	1306c <__assert_fail@plt+0x1a84>
   12990:	mov	r0, #2
   12994:	mov	r2, #0
   12998:	mov	r3, #0
   1299c:	str	r0, [sp]
   129a0:	ldr	r0, [sp, #108]	; 0x6c
   129a4:	bl	113c0 <lseek64@plt>
   129a8:	mov	ip, r0
   129ac:	subs	r0, sl, r0
   129b0:	sbcs	r0, r4, r1
   129b4:	bge	13054 <__assert_fail@plt+0x1a6c>
   129b8:	mov	r3, r1
   129bc:	orrs	r0, ip, r1
   129c0:	mov	r6, #1
   129c4:	beq	13520 <__assert_fail@plt+0x1f38>
   129c8:	ldr	r0, [sp, #112]	; 0x70
   129cc:	ldr	r1, [sp, #116]	; 0x74
   129d0:	str	sl, [sp, #68]	; 0x44
   129d4:	str	r4, [sp, #80]	; 0x50
   129d8:	orrs	r0, r0, r1
   129dc:	beq	1353c <__assert_fail@plt+0x1f54>
   129e0:	mov	r0, #0
   129e4:	stm	sp, {r0, r7}
   129e8:	str	r3, [sp, #64]	; 0x40
   129ec:	str	ip, [sp, #60]	; 0x3c
   129f0:	ldr	r0, [sp, #68]	; 0x44
   129f4:	ldr	r1, [sp, #80]	; 0x50
   129f8:	ldr	r4, [sp, #108]	; 0x6c
   129fc:	subs	r0, ip, r0
   12a00:	sbc	r1, r3, r1
   12a04:	asr	r1, r1, #31
   12a08:	add	r1, r0, r1, lsr #19
   12a0c:	bfc	r1, #0, #13
   12a10:	subs	r5, r0, r1
   12a14:	mov	r0, r4
   12a18:	movweq	r5, #8192	; 0x2000
   12a1c:	subs	r2, ip, r5
   12a20:	sbc	r8, r3, #0
   12a24:	mov	sl, r2
   12a28:	mov	r3, r8
   12a2c:	bl	15d6c <__assert_fail@plt+0x4784>
   12a30:	mov	r0, r4
   12a34:	add	r1, sp, #128	; 0x80
   12a38:	mov	r2, r5
   12a3c:	bl	1a644 <__assert_fail@plt+0x905c>
   12a40:	cmn	r0, #1
   12a44:	beq	13548 <__assert_fail@plt+0x1f60>
   12a48:	mov	r7, sl
   12a4c:	mov	r4, r0
   12a50:	adds	sl, sl, r0
   12a54:	mov	r2, r8
   12a58:	adc	r0, r8, #0
   12a5c:	cmp	r4, #0
   12a60:	str	r0, [sp, #96]	; 0x60
   12a64:	beq	135b0 <__assert_fail@plt+0x1fc8>
   12a68:	movw	r1, #61893	; 0xf1c5
   12a6c:	ldr	r5, [sp, #112]	; 0x70
   12a70:	add	r0, sp, #128	; 0x80
   12a74:	ldr	r3, [sp, #116]	; 0x74
   12a78:	movt	r1, #2
   12a7c:	add	r0, r0, r4
   12a80:	ldrb	r1, [r1]
   12a84:	ldrb	r0, [r0, #-1]
   12a88:	subs	r8, r5, #1
   12a8c:	sbc	r9, r3, #0
   12a90:	cmp	r1, #0
   12a94:	movwne	r1, #10
   12a98:	cmp	r1, r0
   12a9c:	moveq	r9, r3
   12aa0:	moveq	r8, r5
   12aa4:	b	135b8 <__assert_fail@plt+0x1fd0>
   12aa8:	ldr	r2, [sp, #108]	; 0x6c
   12aac:	mvn	r0, #0
   12ab0:	mov	r1, r7
   12ab4:	str	r0, [sp]
   12ab8:	str	r0, [sp, #4]
   12abc:	mov	r0, #0
   12ac0:	bl	15c04 <__assert_fail@plt+0x461c>
   12ac4:	ldr	r2, [sp, #108]	; 0x6c
   12ac8:	adds	r8, r0, r8
   12acc:	mov	r6, #1
   12ad0:	str	r8, [sp, #100]	; 0x64
   12ad4:	adc	r4, r1, r4
   12ad8:	movw	sl, #55972	; 0xdaa4
   12adc:	movt	sl, #1
   12ae0:	movw	r8, #55146	; 0xd76a
   12ae4:	movt	r8, #1
   12ae8:	b	13a38 <__assert_fail@plt+0x2450>
   12aec:	cmp	r0, #0
   12af0:	mvn	r4, #0
   12af4:	mvn	r5, #0
   12af8:	mvn	ip, #0
   12afc:	mvn	lr, #0
   12b00:	beq	12c74 <__assert_fail@plt+0x168c>
   12b04:	ldr	r0, [fp, #-160]	; 0xffffff60
   12b08:	and	r0, r0, #53248	; 0xd000
   12b0c:	orr	r0, r0, #8192	; 0x2000
   12b10:	cmp	r0, #40960	; 0xa000
   12b14:	bne	12c2c <__assert_fail@plt+0x1644>
   12b18:	ldr	r0, [sp, #24]
   12b1c:	mvn	ip, #0
   12b20:	mvn	lr, #0
   12b24:	ldrd	r4, [r0]
   12b28:	b	12c74 <__assert_fail@plt+0x168c>
   12b2c:	mov	r0, #1
   12b30:	mov	r3, sl
   12b34:	str	r0, [sp]
   12b38:	mov	r0, r2
   12b3c:	ldr	r2, [sp, #112]	; 0x70
   12b40:	bl	113c0 <lseek64@plt>
   12b44:	ldr	sl, [sp, #116]	; 0x74
   12b48:	mvn	r2, #0
   12b4c:	eor	r1, r1, r2
   12b50:	eor	r0, r0, r2
   12b54:	orrs	r0, r0, r1
   12b58:	bne	12bc0 <__assert_fail@plt+0x15d8>
   12b5c:	ldr	r7, [sp, #112]	; 0x70
   12b60:	ldr	r2, [sp, #108]	; 0x6c
   12b64:	mov	r4, #0
   12b68:	mov	r8, #0
   12b6c:	orrs	r0, r7, sl
   12b70:	beq	12be8 <__assert_fail@plt+0x1600>
   12b74:	mov	r0, r2
   12b78:	add	r1, sp, #128	; 0x80
   12b7c:	mov	r2, #8192	; 0x2000
   12b80:	bl	1a644 <__assert_fail@plt+0x905c>
   12b84:	cmp	r0, #0
   12b88:	beq	12c0c <__assert_fail@plt+0x1624>
   12b8c:	cmn	r0, #1
   12b90:	beq	13004 <__assert_fail@plt+0x1a1c>
   12b94:	adds	r4, r4, r0
   12b98:	adc	r8, r8, #0
   12b9c:	subs	r1, r7, r0
   12ba0:	sbcs	r1, sl, #0
   12ba4:	bcc	12bd0 <__assert_fail@plt+0x15e8>
   12ba8:	ldr	r2, [sp, #108]	; 0x6c
   12bac:	subs	r7, r7, r0
   12bb0:	sbc	sl, sl, #0
   12bb4:	orrs	r0, r7, sl
   12bb8:	bne	12b74 <__assert_fail@plt+0x158c>
   12bbc:	b	12be8 <__assert_fail@plt+0x1600>
   12bc0:	ldr	r4, [sp, #112]	; 0x70
   12bc4:	ldr	r2, [sp, #108]	; 0x6c
   12bc8:	mov	r8, sl
   12bcc:	b	12be8 <__assert_fail@plt+0x1600>
   12bd0:	add	r1, sp, #128	; 0x80
   12bd4:	add	r2, r1, r7
   12bd8:	sub	r1, r0, r7
   12bdc:	mov	r0, r2
   12be0:	bl	15e44 <__assert_fail@plt+0x485c>
   12be4:	ldr	r2, [sp, #108]	; 0x6c
   12be8:	mvn	r6, #0
   12bec:	mvn	r1, #0
   12bf0:	str	r1, [sp, #4]
   12bf4:	ldr	r1, [sp, #36]	; 0x24
   12bf8:	mov	r0, #0
   12bfc:	str	r6, [sp]
   12c00:	bl	15c04 <__assert_fail@plt+0x461c>
   12c04:	adds	r4, r0, r4
   12c08:	adc	r8, r1, r8
   12c0c:	str	r4, [sp, #100]	; 0x64
   12c10:	mov	r6, #1
   12c14:	movw	sl, #55972	; 0xdaa4
   12c18:	mov	r4, r8
   12c1c:	movw	r8, #55146	; 0xd76a
   12c20:	movt	r8, #1
   12c24:	movt	sl, #1
   12c28:	b	13a34 <__assert_fail@plt+0x244c>
   12c2c:	ldr	r4, [sp, #112]	; 0x70
   12c30:	mov	r0, #2
   12c34:	ldr	r5, [sp, #116]	; 0x74
   12c38:	str	r0, [sp]
   12c3c:	ldr	r0, [sp, #108]	; 0x6c
   12c40:	rsbs	r2, r4, #0
   12c44:	rsc	r3, r5, #0
   12c48:	bl	113c0 <lseek64@plt>
   12c4c:	adds	r4, r0, r4
   12c50:	mvn	r2, #0
   12c54:	mov	lr, r1
   12c58:	mov	ip, r0
   12c5c:	adc	r5, r1, r5
   12c60:	eor	r3, r1, r2
   12c64:	eor	r1, r0, r2
   12c68:	orrs	r0, r1, r3
   12c6c:	moveq	r5, r2
   12c70:	moveq	r4, r2
   12c74:	ldr	r0, [fp, #-120]	; 0xffffff88
   12c78:	mov	r3, #0
   12c7c:	subs	r1, r0, #536870913	; 0x20000001
   12c80:	rscs	r1, r3, r0, asr #31
   12c84:	mov	r1, #0
   12c88:	movwcc	r1, #1
   12c8c:	rsbs	r2, r0, #0
   12c90:	sbcs	r2, r3, r0, asr #31
   12c94:	mov	r2, #0
   12c98:	movwlt	r2, #1
   12c9c:	ands	r1, r2, r1
   12ca0:	asrne	r1, r0, #31
   12ca4:	moveq	r0, #512	; 0x200
   12ca8:	subs	r0, r0, r4
   12cac:	sbcs	r0, r1, r5
   12cb0:	bge	12d54 <__assert_fail@plt+0x176c>
   12cb4:	mvn	r3, #0
   12cb8:	mov	r0, ip
   12cbc:	mov	r1, lr
   12cc0:	eor	r2, ip, r3
   12cc4:	eor	r3, lr, r3
   12cc8:	orrs	r2, r2, r3
   12ccc:	bne	12ce8 <__assert_fail@plt+0x1700>
   12cd0:	mov	r0, #1
   12cd4:	mov	r2, #0
   12cd8:	mov	r3, #0
   12cdc:	stm	sp, {r0, r7}
   12ce0:	ldr	r0, [sp, #108]	; 0x6c
   12ce4:	bl	15d6c <__assert_fail@plt+0x4784>
   12ce8:	subs	ip, r4, r0
   12cec:	mov	lr, r0
   12cf0:	mov	r8, r1
   12cf4:	sbc	r7, r5, r1
   12cf8:	subs	r2, r0, r4
   12cfc:	sbcs	r2, r1, r5
   12d00:	ldr	r2, [sp, #108]	; 0x6c
   12d04:	bge	12ff0 <__assert_fail@plt+0x1a08>
   12d08:	ldr	r6, [sp, #112]	; 0x70
   12d0c:	ldr	r1, [sp, #116]	; 0x74
   12d10:	subs	r0, r6, ip
   12d14:	sbcs	r0, r1, r7
   12d18:	bcs	12fe4 <__assert_fail@plt+0x19fc>
   12d1c:	mov	r0, #0
   12d20:	subs	r4, r4, r6
   12d24:	str	r0, [sp]
   12d28:	ldr	r0, [sp, #36]	; 0x24
   12d2c:	sbc	r8, r5, r1
   12d30:	mov	r3, r8
   12d34:	str	r0, [sp, #4]
   12d38:	mov	r0, r2
   12d3c:	mov	r2, r4
   12d40:	bl	15d6c <__assert_fail@plt+0x4784>
   12d44:	ldr	r1, [sp, #116]	; 0x74
   12d48:	ldr	r2, [sp, #108]	; 0x6c
   12d4c:	ldr	r5, [sp, #84]	; 0x54
   12d50:	b	12bf0 <__assert_fail@plt+0x1608>
   12d54:	movw	r0, #8200	; 0x2008
   12d58:	bl	1ada4 <__assert_fail@plt+0x97bc>
   12d5c:	mov	r4, r0
   12d60:	mov	r9, #0
   12d64:	mov	r0, #8192	; 0x2000
   12d68:	str	r9, [r4, r0]
   12d6c:	movw	r0, #8196	; 0x2004
   12d70:	str	r9, [r4, r0]
   12d74:	movw	r0, #8200	; 0x2008
   12d78:	bl	1ada4 <__assert_fail@plt+0x97bc>
   12d7c:	mov	sl, r0
   12d80:	ldr	r0, [sp, #108]	; 0x6c
   12d84:	mov	r2, #8192	; 0x2000
   12d88:	mov	r1, sl
   12d8c:	bl	1a644 <__assert_fail@plt+0x905c>
   12d90:	mov	r6, r0
   12d94:	add	r0, r0, #1
   12d98:	str	r4, [sp, #80]	; 0x50
   12d9c:	cmp	r0, #2
   12da0:	bcs	12db4 <__assert_fail@plt+0x17cc>
   12da4:	mov	r0, #0
   12da8:	mov	r5, #0
   12dac:	str	r0, [sp, #96]	; 0x60
   12db0:	b	12ea0 <__assert_fail@plt+0x18b8>
   12db4:	mov	r0, #0
   12db8:	mov	r9, #0
   12dbc:	mov	r5, #0
   12dc0:	str	r0, [sp, #96]	; 0x60
   12dc4:	mov	r7, sl
   12dc8:	mov	r3, #8192	; 0x2000
   12dcc:	mov	r2, #0
   12dd0:	adds	r9, r9, r6
   12dd4:	mov	r8, r4
   12dd8:	add	r5, r5, r6
   12ddc:	str	r6, [r7, r3]!
   12de0:	ldr	r0, [sp, #96]	; 0x60
   12de4:	str	r2, [r7, #4]
   12de8:	adc	r0, r0, #0
   12dec:	str	r0, [sp, #96]	; 0x60
   12df0:	ldr	r0, [r8, r3]!
   12df4:	add	r1, r0, r6
   12df8:	cmp	r2, r1, lsr #13
   12dfc:	bne	12e28 <__assert_fail@plt+0x1840>
   12e00:	add	r0, r4, r0
   12e04:	mov	r1, sl
   12e08:	mov	r2, r6
   12e0c:	str	r4, [sp, #100]	; 0x64
   12e10:	bl	11318 <memcpy@plt>
   12e14:	ldr	r0, [r7]
   12e18:	ldr	r1, [r8]
   12e1c:	add	r0, r1, r0
   12e20:	str	r0, [r8]
   12e24:	b	12e7c <__assert_fail@plt+0x1894>
   12e28:	ldr	r7, [sp, #80]	; 0x50
   12e2c:	movw	r2, #8196	; 0x2004
   12e30:	ldr	r1, [sp, #112]	; 0x70
   12e34:	str	sl, [r4, r2]
   12e38:	ldr	r0, [r7, r3]
   12e3c:	sub	r0, r5, r0
   12e40:	subs	r1, r1, r0
   12e44:	ldr	r1, [sp, #116]	; 0x74
   12e48:	sbcs	r1, r1, #0
   12e4c:	bcs	12e68 <__assert_fail@plt+0x1880>
   12e50:	ldr	r1, [r7, r2]
   12e54:	str	sl, [sp, #100]	; 0x64
   12e58:	mov	sl, r7
   12e5c:	mov	r5, r0
   12e60:	str	r1, [sp, #80]	; 0x50
   12e64:	b	12e7c <__assert_fail@plt+0x1894>
   12e68:	movw	r0, #8200	; 0x2008
   12e6c:	bl	1ada4 <__assert_fail@plt+0x97bc>
   12e70:	str	sl, [sp, #100]	; 0x64
   12e74:	mov	sl, r0
   12e78:	mov	r7, r0
   12e7c:	ldr	r0, [sp, #108]	; 0x6c
   12e80:	mov	r1, sl
   12e84:	mov	r2, #8192	; 0x2000
   12e88:	bl	1a644 <__assert_fail@plt+0x905c>
   12e8c:	ldr	r4, [sp, #100]	; 0x64
   12e90:	mov	r6, r0
   12e94:	add	r0, r0, #1
   12e98:	cmp	r0, #1
   12e9c:	bhi	12dc4 <__assert_fail@plt+0x17dc>
   12ea0:	mov	r0, sl
   12ea4:	str	r9, [sp, #100]	; 0x64
   12ea8:	bl	174e4 <__assert_fail@plt+0x5efc>
   12eac:	ldr	r9, [sp, #48]	; 0x30
   12eb0:	cmn	r6, #1
   12eb4:	beq	12f5c <__assert_fail@plt+0x1974>
   12eb8:	ldr	r6, [sp, #80]	; 0x50
   12ebc:	mov	r3, #8192	; 0x2000
   12ec0:	ldr	r7, [sp, #112]	; 0x70
   12ec4:	ldr	r4, [sp, #116]	; 0x74
   12ec8:	movw	r8, #8196	; 0x2004
   12ecc:	ldr	r1, [r6, r3]
   12ed0:	sub	r0, r5, r1
   12ed4:	subs	r2, r7, r0
   12ed8:	sbcs	r2, r4, #0
   12edc:	bcs	12efc <__assert_fail@plt+0x1914>
   12ee0:	ldr	r6, [r6, r8]
   12ee4:	mov	r5, r0
   12ee8:	ldr	r1, [r6, r3]
   12eec:	sub	r0, r0, r1
   12ef0:	subs	r2, r7, r0
   12ef4:	sbcs	r2, r4, #0
   12ef8:	bcc	12ee0 <__assert_fail@plt+0x18f8>
   12efc:	subs	r0, r7, r5
   12f00:	mov	r2, #0
   12f04:	sbcs	r0, r4, #0
   12f08:	movwcc	r2, #1
   12f0c:	cmp	r2, #0
   12f10:	subne	r2, r5, r7
   12f14:	add	r0, r6, r2
   12f18:	sub	r1, r1, r2
   12f1c:	bl	15e44 <__assert_fail@plt+0x485c>
   12f20:	ldr	r5, [r6, r8]
   12f24:	mov	r6, #1
   12f28:	cmp	r5, #0
   12f2c:	beq	12f50 <__assert_fail@plt+0x1968>
   12f30:	mov	r4, #8192	; 0x2000
   12f34:	movw	r8, #8196	; 0x2004
   12f38:	ldr	r1, [r5, r4]
   12f3c:	mov	r0, r5
   12f40:	bl	15e44 <__assert_fail@plt+0x485c>
   12f44:	ldr	r5, [r5, r8]
   12f48:	cmp	r5, #0
   12f4c:	bne	12f38 <__assert_fail@plt+0x1950>
   12f50:	movw	r7, #55146	; 0xd76a
   12f54:	movt	r7, #1
   12f58:	b	12fa8 <__assert_fail@plt+0x19c0>
   12f5c:	bl	114b0 <__errno_location@plt>
   12f60:	ldr	r5, [r0]
   12f64:	movw	r1, #55856	; 0xda30
   12f68:	mov	r0, #0
   12f6c:	mov	r2, #5
   12f70:	mov	r6, #0
   12f74:	movt	r1, #1
   12f78:	bl	11354 <dcgettext@plt>
   12f7c:	ldr	r1, [sp, #36]	; 0x24
   12f80:	mov	r7, r0
   12f84:	mov	r0, #4
   12f88:	bl	19fe4 <__assert_fail@plt+0x89fc>
   12f8c:	mov	r3, r0
   12f90:	mov	r2, r7
   12f94:	movw	r7, #55146	; 0xd76a
   12f98:	mov	r0, #0
   12f9c:	mov	r1, r5
   12fa0:	movt	r7, #1
   12fa4:	bl	113f0 <error@plt>
   12fa8:	ldr	r0, [sp, #80]	; 0x50
   12fac:	mov	r8, r7
   12fb0:	cmp	r0, #0
   12fb4:	beq	12fd0 <__assert_fail@plt+0x19e8>
   12fb8:	movw	r5, #8196	; 0x2004
   12fbc:	ldr	r4, [r0, r5]
   12fc0:	bl	174e4 <__assert_fail@plt+0x5efc>
   12fc4:	cmp	r4, #0
   12fc8:	mov	r0, r4
   12fcc:	bne	12fbc <__assert_fail@plt+0x19d4>
   12fd0:	ldr	r5, [sp, #84]	; 0x54
   12fd4:	ldr	r4, [sp, #96]	; 0x60
   12fd8:	movw	sl, #55972	; 0xdaa4
   12fdc:	movt	sl, #1
   12fe0:	b	13a34 <__assert_fail@plt+0x244c>
   12fe4:	ldr	r5, [sp, #84]	; 0x54
   12fe8:	mov	r4, lr
   12fec:	b	12bf0 <__assert_fail@plt+0x1608>
   12ff0:	ldr	r5, [sp, #84]	; 0x54
   12ff4:	ldr	r6, [sp, #112]	; 0x70
   12ff8:	ldr	r1, [sp, #116]	; 0x74
   12ffc:	mov	r4, lr
   13000:	b	12bf0 <__assert_fail@plt+0x1608>
   13004:	str	r4, [sp, #100]	; 0x64
   13008:	bl	114b0 <__errno_location@plt>
   1300c:	ldr	r4, [r0]
   13010:	movw	r1, #55856	; 0xda30
   13014:	mov	r0, #0
   13018:	mov	r2, #5
   1301c:	mov	r6, #0
   13020:	movt	r1, #1
   13024:	bl	11354 <dcgettext@plt>
   13028:	ldr	r1, [sp, #36]	; 0x24
   1302c:	mov	r5, r0
   13030:	mov	r0, #4
   13034:	bl	19fe4 <__assert_fail@plt+0x89fc>
   13038:	mov	r2, r5
   1303c:	ldr	r5, [sp, #84]	; 0x54
   13040:	mov	r3, r0
   13044:	mov	r0, #0
   13048:	mov	r1, r4
   1304c:	bl	113f0 <error@plt>
   13050:	b	12c14 <__assert_fail@plt+0x162c>
   13054:	mov	r0, #0
   13058:	mov	r2, sl
   1305c:	mov	r3, r4
   13060:	stm	sp, {r0, r7}
   13064:	ldr	r0, [sp, #108]	; 0x6c
   13068:	bl	15d6c <__assert_fail@plt+0x4784>
   1306c:	movw	r0, #8204	; 0x200c
   13070:	bl	1ada4 <__assert_fail@plt+0x97bc>
   13074:	mov	r5, r0
   13078:	mov	r1, #0
   1307c:	movw	r0, #8196	; 0x2004
   13080:	mov	sl, #8192	; 0x2000
   13084:	movw	r4, #8200	; 0x2008
   13088:	str	r1, [r5, r0]
   1308c:	mov	r0, #0
   13090:	str	r1, [r5, sl]
   13094:	str	r1, [r5, r4]
   13098:	str	r0, [sp, #100]	; 0x64
   1309c:	movw	r0, #8204	; 0x200c
   130a0:	bl	1ada4 <__assert_fail@plt+0x97bc>
   130a4:	mov	r6, r0
   130a8:	ldr	r0, [sp, #108]	; 0x6c
   130ac:	mov	r2, #8192	; 0x2000
   130b0:	mov	r1, r6
   130b4:	bl	1a644 <__assert_fail@plt+0x905c>
   130b8:	mov	r2, r0
   130bc:	add	r0, r0, #1
   130c0:	str	r5, [sp, #68]	; 0x44
   130c4:	cmp	r0, #2
   130c8:	bcs	130e8 <__assert_fail@plt+0x1b00>
   130cc:	mov	r0, #0
   130d0:	mov	r7, r8
   130d4:	str	r5, [sp, #40]	; 0x28
   130d8:	str	r0, [sp, #96]	; 0x60
   130dc:	mov	r0, #0
   130e0:	str	r0, [sp, #80]	; 0x50
   130e4:	b	132a8 <__assert_fail@plt+0x1cc0>
   130e8:	mov	r0, #0
   130ec:	str	r5, [sp, #40]	; 0x28
   130f0:	str	r0, [sp, #100]	; 0x64
   130f4:	mov	r0, #0
   130f8:	str	r0, [sp, #96]	; 0x60
   130fc:	mov	r0, #0
   13100:	str	r0, [sp, #80]	; 0x50
   13104:	mov	r1, #0
   13108:	movw	r0, #8196	; 0x2004
   1310c:	mov	r5, r2
   13110:	str	r1, [r6, r4]
   13114:	mov	r4, r6
   13118:	str	r1, [r4, r0]!
   1311c:	mov	r0, r6
   13120:	str	r2, [r0, sl]!
   13124:	add	sl, r6, r2
   13128:	str	r6, [sp, #60]	; 0x3c
   1312c:	str	r6, [sp, #64]	; 0x40
   13130:	str	r0, [sp, #56]	; 0x38
   13134:	ldr	r0, [sp, #100]	; 0x64
   13138:	adds	r0, r0, r2
   1313c:	sub	r2, sl, r6
   13140:	str	r0, [sp, #100]	; 0x64
   13144:	ldr	r0, [sp, #96]	; 0x60
   13148:	adc	r0, r0, #0
   1314c:	str	r0, [sp, #96]	; 0x60
   13150:	movw	r0, #61893	; 0xf1c5
   13154:	movt	r0, #2
   13158:	ldrb	r9, [r0]
   1315c:	mov	r0, r6
   13160:	cmp	r9, #0
   13164:	movwne	r9, #10
   13168:	mov	r1, r9
   1316c:	bl	11504 <memchr@plt>
   13170:	cmp	r0, #0
   13174:	mov	r8, #0
   13178:	beq	131a0 <__assert_fail@plt+0x1bb8>
   1317c:	mov	r8, #0
   13180:	add	r0, r0, #1
   13184:	add	r8, r8, #1
   13188:	mov	r1, r9
   1318c:	sub	r2, sl, r0
   13190:	str	r8, [r4]
   13194:	bl	11504 <memchr@plt>
   13198:	cmp	r0, #0
   1319c:	bne	13180 <__assert_fail@plt+0x1b98>
   131a0:	ldr	r6, [sp, #68]	; 0x44
   131a4:	mov	sl, #8192	; 0x2000
   131a8:	ldr	r3, [sp, #80]	; 0x50
   131ac:	mov	r2, #0
   131b0:	mov	r7, r6
   131b4:	add	r3, r8, r3
   131b8:	ldr	r0, [r7, sl]!
   131bc:	add	r1, r0, r5
   131c0:	cmp	r2, r1, lsr #13
   131c4:	bne	13224 <__assert_fail@plt+0x1c3c>
   131c8:	ldr	r8, [sp, #64]	; 0x40
   131cc:	add	r0, r6, r0
   131d0:	mov	r2, r5
   131d4:	str	r3, [sp, #80]	; 0x50
   131d8:	mov	r1, r8
   131dc:	bl	11318 <memcpy@plt>
   131e0:	ldr	r0, [sp, #56]	; 0x38
   131e4:	ldr	r1, [r7]
   131e8:	ldr	r9, [sp, #48]	; 0x30
   131ec:	ldr	r0, [r0]
   131f0:	add	r0, r1, r0
   131f4:	movw	r1, #8196	; 0x2004
   131f8:	str	r0, [r7]
   131fc:	mov	r0, r6
   13200:	movw	r7, #55146	; 0xd76a
   13204:	mov	r6, r8
   13208:	ldr	r2, [r4]
   1320c:	ldr	r1, [r0, r1]!
   13210:	movt	r7, #1
   13214:	movw	r4, #8200	; 0x2008
   13218:	add	r1, r1, r2
   1321c:	str	r1, [r0]
   13220:	b	13288 <__assert_fail@plt+0x1ca0>
   13224:	ldr	r5, [sp, #60]	; 0x3c
   13228:	movw	r4, #8200	; 0x2008
   1322c:	movw	r0, #8196	; 0x2004
   13230:	ldr	r1, [sp, #112]	; 0x70
   13234:	ldr	r9, [sp, #48]	; 0x30
   13238:	str	r5, [r6, r4]
   1323c:	ldr	r6, [sp, #40]	; 0x28
   13240:	ldr	r0, [r6, r0]
   13244:	sub	r0, r3, r0
   13248:	subs	r1, r1, r0
   1324c:	ldr	r1, [sp, #116]	; 0x74
   13250:	sbcs	r1, r1, #0
   13254:	bcs	1326c <__assert_fail@plt+0x1c84>
   13258:	ldr	r1, [r6, r4]
   1325c:	str	r0, [sp, #80]	; 0x50
   13260:	str	r5, [sp, #68]	; 0x44
   13264:	str	r1, [sp, #40]	; 0x28
   13268:	b	13280 <__assert_fail@plt+0x1c98>
   1326c:	movw	r0, #8204	; 0x200c
   13270:	str	r3, [sp, #80]	; 0x50
   13274:	bl	1ada4 <__assert_fail@plt+0x97bc>
   13278:	mov	r6, r0
   1327c:	str	r5, [sp, #68]	; 0x44
   13280:	movw	r7, #55146	; 0xd76a
   13284:	movt	r7, #1
   13288:	ldr	r0, [sp, #108]	; 0x6c
   1328c:	mov	r1, r6
   13290:	mov	r2, #8192	; 0x2000
   13294:	bl	1a644 <__assert_fail@plt+0x905c>
   13298:	mov	r2, r0
   1329c:	add	r0, r0, #1
   132a0:	cmp	r0, #1
   132a4:	bhi	13104 <__assert_fail@plt+0x1b1c>
   132a8:	mov	r0, r6
   132ac:	mov	r4, r2
   132b0:	bl	174e4 <__assert_fail@plt+0x5efc>
   132b4:	cmn	r4, #1
   132b8:	beq	13328 <__assert_fail@plt+0x1d40>
   132bc:	ldr	r0, [sp, #112]	; 0x70
   132c0:	ldr	lr, [sp, #116]	; 0x74
   132c4:	mov	r6, #1
   132c8:	orrs	r0, r0, lr
   132cc:	beq	13460 <__assert_fail@plt+0x1e78>
   132d0:	ldr	r3, [sp, #68]	; 0x44
   132d4:	mov	r0, #8192	; 0x2000
   132d8:	ldr	r2, [sp, #108]	; 0x6c
   132dc:	movw	sl, #55972	; 0xdaa4
   132e0:	movt	sl, #1
   132e4:	ldr	r1, [r3, r0]
   132e8:	ldr	r0, [sp, #40]	; 0x28
   132ec:	cmp	r1, #0
   132f0:	beq	13470 <__assert_fail@plt+0x1e88>
   132f4:	add	r1, r3, r1
   132f8:	ldrb	r2, [r1, #-1]
   132fc:	movw	r1, #61893	; 0xf1c5
   13300:	movt	r1, #2
   13304:	ldrb	sl, [r1]
   13308:	cmp	sl, #0
   1330c:	movwne	sl, #10
   13310:	cmp	sl, r2
   13314:	bne	1337c <__assert_fail@plt+0x1d94>
   13318:	ldr	r7, [sp, #112]	; 0x70
   1331c:	ldr	r4, [sp, #80]	; 0x50
   13320:	movw	r3, #8196	; 0x2004
   13324:	b	1339c <__assert_fail@plt+0x1db4>
   13328:	bl	114b0 <__errno_location@plt>
   1332c:	movw	r8, #55856	; 0xda30
   13330:	ldr	r4, [r0]
   13334:	mov	r0, #0
   13338:	mov	r2, #5
   1333c:	mov	r6, #0
   13340:	movt	r8, #1
   13344:	mov	r1, r8
   13348:	bl	11354 <dcgettext@plt>
   1334c:	ldr	r1, [sp, #36]	; 0x24
   13350:	mov	r7, r0
   13354:	mov	r0, #4
   13358:	bl	19fe4 <__assert_fail@plt+0x89fc>
   1335c:	mov	r3, r0
   13360:	mov	r2, r7
   13364:	movw	r7, #55146	; 0xd76a
   13368:	mov	r0, #0
   1336c:	mov	r1, r4
   13370:	movt	r7, #1
   13374:	bl	113f0 <error@plt>
   13378:	b	13460 <__assert_fail@plt+0x1e78>
   1337c:	mov	r2, r3
   13380:	movw	r3, #8196	; 0x2004
   13384:	ldr	r4, [sp, #80]	; 0x50
   13388:	ldr	r7, [sp, #112]	; 0x70
   1338c:	ldr	r1, [r2, r3]!
   13390:	add	r4, r4, #1
   13394:	add	r1, r1, #1
   13398:	str	r1, [r2]
   1339c:	ldr	r1, [r0, r3]
   133a0:	mov	r5, r0
   133a4:	movw	ip, #8200	; 0x2008
   133a8:	sub	r2, r4, r1
   133ac:	subs	r1, r7, r2
   133b0:	sbcs	r1, lr, #0
   133b4:	bcs	133d8 <__assert_fail@plt+0x1df0>
   133b8:	mov	r5, r0
   133bc:	ldr	r5, [r5, ip]
   133c0:	mov	r4, r2
   133c4:	ldr	r0, [r5, r3]
   133c8:	sub	r2, r2, r0
   133cc:	subs	r1, r7, r2
   133d0:	sbcs	r1, lr, #0
   133d4:	bcc	133bc <__assert_fail@plt+0x1dd4>
   133d8:	mov	r0, #8192	; 0x2000
   133dc:	ldr	r0, [r5, r0]
   133e0:	add	r8, r5, r0
   133e4:	subs	r0, r7, r4
   133e8:	sbcs	r0, lr, #0
   133ec:	mov	r0, r5
   133f0:	bcs	13420 <__assert_fail@plt+0x1e38>
   133f4:	subs	r0, r4, r7
   133f8:	beq	1341c <__assert_fail@plt+0x1e34>
   133fc:	sub	r7, r7, r4
   13400:	mov	r0, r5
   13404:	mov	r1, sl
   13408:	bl	11378 <rawmemchr@plt>
   1340c:	add	r0, r0, #1
   13410:	adds	r7, r7, #1
   13414:	bne	13404 <__assert_fail@plt+0x1e1c>
   13418:	b	13420 <__assert_fail@plt+0x1e38>
   1341c:	mov	r0, r5
   13420:	sub	r1, r8, r0
   13424:	bl	15e44 <__assert_fail@plt+0x485c>
   13428:	movw	r0, #8200	; 0x2008
   1342c:	movw	r7, #55146	; 0xd76a
   13430:	ldr	r4, [r5, r0]
   13434:	movt	r7, #1
   13438:	cmp	r4, #0
   1343c:	beq	13460 <__assert_fail@plt+0x1e78>
   13440:	movw	r5, #8200	; 0x2008
   13444:	mov	sl, #8192	; 0x2000
   13448:	ldr	r1, [r4, sl]
   1344c:	mov	r0, r4
   13450:	bl	15e44 <__assert_fail@plt+0x485c>
   13454:	ldr	r4, [r4, r5]
   13458:	cmp	r4, #0
   1345c:	bne	13448 <__assert_fail@plt+0x1e60>
   13460:	ldr	r2, [sp, #108]	; 0x6c
   13464:	ldr	r0, [sp, #40]	; 0x28
   13468:	movw	sl, #55972	; 0xdaa4
   1346c:	movt	sl, #1
   13470:	cmp	r0, #0
   13474:	mov	r8, r7
   13478:	beq	134a4 <__assert_fail@plt+0x1ebc>
   1347c:	movw	r5, #8200	; 0x2008
   13480:	ldr	r4, [r0, r5]
   13484:	bl	174e4 <__assert_fail@plt+0x5efc>
   13488:	cmp	r4, #0
   1348c:	mov	r0, r4
   13490:	bne	13480 <__assert_fail@plt+0x1e98>
   13494:	ldr	r5, [sp, #84]	; 0x54
   13498:	ldr	r2, [sp, #108]	; 0x6c
   1349c:	ldr	r4, [sp, #96]	; 0x60
   134a0:	b	13a38 <__assert_fail@plt+0x2450>
   134a4:	ldr	r5, [sp, #84]	; 0x54
   134a8:	ldr	r4, [sp, #96]	; 0x60
   134ac:	b	13a38 <__assert_fail@plt+0x2450>
   134b0:	ldr	r2, [sp, #108]	; 0x6c
   134b4:	mov	r6, #1
   134b8:	str	r8, [sp, #100]	; 0x64
   134bc:	b	12ad8 <__assert_fail@plt+0x14f0>
   134c0:	str	r8, [sp, #100]	; 0x64
   134c4:	bl	114b0 <__errno_location@plt>
   134c8:	mov	sl, r4
   134cc:	ldr	r4, [r0]
   134d0:	movw	r1, #55856	; 0xda30
   134d4:	mov	r0, #0
   134d8:	mov	r2, #5
   134dc:	mov	r6, #0
   134e0:	movt	r1, #1
   134e4:	bl	11354 <dcgettext@plt>
   134e8:	mov	r5, r0
   134ec:	mov	r0, #4
   134f0:	mov	r1, r7
   134f4:	bl	19fe4 <__assert_fail@plt+0x89fc>
   134f8:	movw	r8, #55146	; 0xd76a
   134fc:	mov	r3, r0
   13500:	mov	r1, r4
   13504:	mov	r0, #0
   13508:	mov	r2, r5
   1350c:	mov	r4, sl
   13510:	movt	r8, #1
   13514:	bl	113f0 <error@plt>
   13518:	ldr	r5, [sp, #84]	; 0x54
   1351c:	b	1352c <__assert_fail@plt+0x1f44>
   13520:	mov	r0, #0
   13524:	mov	r4, #0
   13528:	str	r0, [sp, #100]	; 0x64
   1352c:	ldr	r2, [sp, #108]	; 0x6c
   13530:	movw	sl, #55972	; 0xdaa4
   13534:	movt	sl, #1
   13538:	b	13a38 <__assert_fail@plt+0x2450>
   1353c:	mov	sl, ip
   13540:	str	r3, [sp, #96]	; 0x60
   13544:	b	13700 <__assert_fail@plt+0x2118>
   13548:	bl	114b0 <__errno_location@plt>
   1354c:	movw	r8, #55856	; 0xda30
   13550:	ldr	r4, [r0]
   13554:	mov	r0, #0
   13558:	mov	r2, #5
   1355c:	movt	r8, #1
   13560:	mov	r1, r8
   13564:	bl	11354 <dcgettext@plt>
   13568:	mov	r5, r0
   1356c:	mov	r0, #4
   13570:	mov	r1, r7
   13574:	bl	19fe4 <__assert_fail@plt+0x89fc>
   13578:	mov	r3, r0
   1357c:	mov	r0, #0
   13580:	mov	r1, r4
   13584:	mov	r2, r5
   13588:	bl	113f0 <error@plt>
   1358c:	ldr	r0, [sp, #60]	; 0x3c
   13590:	ldr	r4, [sp, #64]	; 0x40
   13594:	ldr	r5, [sp, #84]	; 0x54
   13598:	ldr	r2, [sp, #108]	; 0x6c
   1359c:	movw	sl, #55972	; 0xdaa4
   135a0:	mov	r6, #0
   135a4:	movt	sl, #1
   135a8:	str	r0, [sp, #100]	; 0x64
   135ac:	b	12ae0 <__assert_fail@plt+0x14f8>
   135b0:	ldr	r8, [sp, #112]	; 0x70
   135b4:	ldr	r9, [sp, #116]	; 0x74
   135b8:	movw	r0, #61893	; 0xf1c5
   135bc:	str	r7, [sp, #116]	; 0x74
   135c0:	str	r2, [sp, #112]	; 0x70
   135c4:	mov	r2, r4
   135c8:	movt	r0, #2
   135cc:	ldrb	r7, [r0]
   135d0:	cmp	r7, #0
   135d4:	movwne	r7, #10
   135d8:	cmp	r2, #0
   135dc:	add	r5, sp, #128	; 0x80
   135e0:	beq	13618 <__assert_fail@plt+0x2030>
   135e4:	mov	r0, r5
   135e8:	mov	r1, r7
   135ec:	bl	11498 <memrchr@plt>
   135f0:	cmp	r0, #0
   135f4:	beq	13618 <__assert_fail@plt+0x2030>
   135f8:	subs	r1, r8, #1
   135fc:	sub	r2, r0, r5
   13600:	sbc	r3, r9, #0
   13604:	orrs	r5, r8, r9
   13608:	mov	r8, r1
   1360c:	mov	r9, r3
   13610:	bne	135d8 <__assert_fail@plt+0x1ff0>
   13614:	b	136a8 <__assert_fail@plt+0x20c0>
   13618:	ldr	r0, [sp, #68]	; 0x44
   1361c:	ldr	r7, [sp, #116]	; 0x74
   13620:	ldr	r1, [sp, #80]	; 0x50
   13624:	ldr	r3, [sp, #112]	; 0x70
   13628:	ldr	r5, [sp, #84]	; 0x54
   1362c:	eor	r0, r7, r0
   13630:	eor	r1, r3, r1
   13634:	orrs	r0, r0, r1
   13638:	beq	13714 <__assert_fail@plt+0x212c>
   1363c:	mov	r0, #0
   13640:	ldr	r4, [sp, #108]	; 0x6c
   13644:	subs	r7, r7, #8192	; 0x2000
   13648:	str	sl, [sp, #100]	; 0x64
   1364c:	str	r0, [sp]
   13650:	ldr	r0, [sp, #36]	; 0x24
   13654:	sbc	r3, r3, #0
   13658:	mov	r2, r7
   1365c:	mov	sl, r3
   13660:	str	r0, [sp, #4]
   13664:	mov	r0, r4
   13668:	bl	15d6c <__assert_fail@plt+0x4784>
   1366c:	mov	r0, r4
   13670:	add	r1, sp, #128	; 0x80
   13674:	mov	r2, #8192	; 0x2000
   13678:	bl	1a644 <__assert_fail@plt+0x905c>
   1367c:	cmn	r0, #1
   13680:	beq	1376c <__assert_fail@plt+0x2184>
   13684:	mov	r4, r0
   13688:	adds	r1, r7, r0
   1368c:	mov	r2, sl
   13690:	adc	r0, sl, #0
   13694:	cmp	r4, #0
   13698:	mov	sl, r1
   1369c:	str	r0, [sp, #96]	; 0x60
   136a0:	bne	135b8 <__assert_fail@plt+0x1fd0>
   136a4:	b	13700 <__assert_fail@plt+0x2118>
   136a8:	mvn	r1, r2
   136ac:	add	r0, r0, #1
   136b0:	add	r1, r4, r1
   136b4:	bl	15e44 <__assert_fail@plt+0x485c>
   136b8:	ldr	r0, [sp, #60]	; 0x3c
   136bc:	ldr	r1, [sp, #64]	; 0x40
   136c0:	ldr	r2, [sp, #116]	; 0x74
   136c4:	subs	r0, r0, r4
   136c8:	sbc	r1, r1, #0
   136cc:	subs	r0, r0, r2
   136d0:	ldr	r2, [sp, #112]	; 0x70
   136d4:	sbc	r1, r1, r2
   136d8:	stm	sp, {r0, r1}
   136dc:	mov	r0, #0
   136e0:	ldr	r1, [sp, #36]	; 0x24
   136e4:	ldr	r2, [sp, #108]	; 0x6c
   136e8:	bl	15c04 <__assert_fail@plt+0x461c>
   136ec:	adds	sl, r0, sl
   136f0:	ldr	r0, [sp, #96]	; 0x60
   136f4:	ldr	r5, [sp, #84]	; 0x54
   136f8:	adc	r0, r1, r0
   136fc:	str	r0, [sp, #96]	; 0x60
   13700:	str	sl, [sp, #100]	; 0x64
   13704:	ldr	r9, [sp, #48]	; 0x30
   13708:	ldr	r2, [sp, #108]	; 0x6c
   1370c:	ldr	r4, [sp, #96]	; 0x60
   13710:	b	12ad8 <__assert_fail@plt+0x14f0>
   13714:	ldr	r9, [sp, #68]	; 0x44
   13718:	ldr	r8, [sp, #80]	; 0x50
   1371c:	ldr	r4, [sp, #108]	; 0x6c
   13720:	ldr	r7, [sp, #36]	; 0x24
   13724:	mov	r0, #0
   13728:	str	r0, [sp]
   1372c:	mov	r0, r4
   13730:	mov	r2, r9
   13734:	mov	r3, r8
   13738:	str	r7, [sp, #4]
   1373c:	bl	15d6c <__assert_fail@plt+0x4784>
   13740:	ldr	r0, [sp, #60]	; 0x3c
   13744:	mov	r1, r7
   13748:	mov	r2, r4
   1374c:	str	r0, [sp]
   13750:	ldr	r0, [sp, #64]	; 0x40
   13754:	str	r0, [sp, #4]
   13758:	mov	r0, #0
   1375c:	bl	15c04 <__assert_fail@plt+0x461c>
   13760:	adds	sl, r0, r9
   13764:	adc	r0, r1, r8
   13768:	b	136fc <__assert_fail@plt+0x2114>
   1376c:	bl	114b0 <__errno_location@plt>
   13770:	movw	r8, #55856	; 0xda30
   13774:	ldr	r4, [r0]
   13778:	mov	r0, #0
   1377c:	mov	r2, #5
   13780:	movt	r8, #1
   13784:	mov	r1, r8
   13788:	bl	11354 <dcgettext@plt>
   1378c:	ldr	r1, [sp, #36]	; 0x24
   13790:	mov	r5, r0
   13794:	mov	r0, #4
   13798:	bl	19fe4 <__assert_fail@plt+0x89fc>
   1379c:	mov	r2, r5
   137a0:	ldr	r5, [sp, #84]	; 0x54
   137a4:	mov	r3, r0
   137a8:	mov	r0, #0
   137ac:	mov	r1, r4
   137b0:	bl	113f0 <error@plt>
   137b4:	mov	r6, #0
   137b8:	b	13704 <__assert_fail@plt+0x211c>
   137bc:	str	r0, [sp, #88]	; 0x58
   137c0:	add	r5, r0, r0, lsl #2
   137c4:	mov	r0, r9
   137c8:	ldr	r7, [sp, #120]	; 0x78
   137cc:	mov	r1, r8
   137d0:	ldr	r4, [r0, r5, lsl #4]!
   137d4:	str	r0, [sp, #104]	; 0x68
   137d8:	ldr	r0, [sp, #124]	; 0x7c
   137dc:	str	r0, [sp, #116]	; 0x74
   137e0:	mov	r0, r4
   137e4:	bl	112b8 <strcmp@plt>
   137e8:	cmp	r0, #0
   137ec:	str	r0, [sp, #72]	; 0x48
   137f0:	beq	13804 <__assert_fail@plt+0x221c>
   137f4:	mov	r0, r4
   137f8:	mov	r1, #0
   137fc:	bl	1749c <__assert_fail@plt+0x5eb4>
   13800:	b	13818 <__assert_fail@plt+0x2230>
   13804:	movw	r0, #61888	; 0xf1c0
   13808:	mov	r1, #1
   1380c:	movt	r0, #2
   13810:	strb	r1, [r0]
   13814:	mov	r0, #0
   13818:	movw	r1, #61902	; 0xf1ce
   1381c:	add	r3, r0, #1
   13820:	cmn	r0, #1
   13824:	add	r5, r9, r5, lsl #4
   13828:	str	r6, [sp, #92]	; 0x5c
   1382c:	movt	r1, #2
   13830:	mov	r2, r3
   13834:	ldrb	r4, [r1]
   13838:	movwne	r2, #1
   1383c:	cmn	r0, #1
   13840:	mvn	r1, r4
   13844:	orr	r1, r1, r2
   13848:	mov	r2, r5
   1384c:	and	r1, r1, #1
   13850:	strb	r1, [r2, #46]!	; 0x2e
   13854:	beq	13990 <__assert_fail@plt+0x23a8>
   13858:	str	r0, [sp, #108]	; 0x6c
   1385c:	movw	r0, #61890	; 0xf1c2
   13860:	str	r2, [sp, #44]	; 0x2c
   13864:	str	r3, [sp, #52]	; 0x34
   13868:	str	r5, [sp, #84]	; 0x54
   1386c:	movt	r0, #2
   13870:	ldrb	r0, [r0]
   13874:	cmp	r0, #1
   13878:	bne	138f8 <__assert_fail@plt+0x2310>
   1387c:	ldr	r0, [sp, #104]	; 0x68
   13880:	mov	r1, r8
   13884:	ldr	r4, [r0]
   13888:	mov	r0, r4
   1388c:	bl	112b8 <strcmp@plt>
   13890:	cmp	r0, #0
   13894:	bne	138b0 <__assert_fail@plt+0x22c8>
   13898:	movw	r1, #55943	; 0xda87
   1389c:	mov	r0, #0
   138a0:	mov	r2, #5
   138a4:	movt	r1, #1
   138a8:	bl	11354 <dcgettext@plt>
   138ac:	mov	r4, r0
   138b0:	movw	r0, #61904	; 0xf1d0
   138b4:	movw	r2, #54062	; 0xd32e
   138b8:	movw	r1, #55958	; 0xda96
   138bc:	mov	r3, r4
   138c0:	movt	r0, #2
   138c4:	movt	r2, #1
   138c8:	movt	r1, #1
   138cc:	mov	r5, r0
   138d0:	ldrb	r0, [r0]
   138d4:	cmp	r0, #0
   138d8:	movw	r0, #54061	; 0xd32d
   138dc:	movt	r0, #1
   138e0:	movne	r2, r0
   138e4:	mov	r0, #1
   138e8:	bl	114d4 <__printf_chk@plt>
   138ec:	mov	r0, #1
   138f0:	strb	r0, [r5]
   138f4:	ldr	r5, [sp, #84]	; 0x54
   138f8:	ldr	r0, [sp, #104]	; 0x68
   138fc:	str	r7, [sp, #112]	; 0x70
   13900:	mov	r1, r8
   13904:	ldr	r7, [r0]
   13908:	mov	r0, r7
   1390c:	bl	112b8 <strcmp@plt>
   13910:	cmp	r0, #0
   13914:	bne	13930 <__assert_fail@plt+0x2348>
   13918:	movw	r1, #55943	; 0xda87
   1391c:	mov	r0, #0
   13920:	mov	r2, #5
   13924:	movt	r1, #1
   13928:	bl	11354 <dcgettext@plt>
   1392c:	mov	r7, r0
   13930:	movw	r0, #61889	; 0xf1c1
   13934:	movt	r0, #2
   13938:	ldrb	r0, [r0]
   1393c:	cmp	r0, #0
   13940:	beq	139cc <__assert_fail@plt+0x23e4>
   13944:	ldr	r1, [sp, #108]	; 0x6c
   13948:	mov	r0, #3
   1394c:	sub	r2, fp, #176	; 0xb0
   13950:	bl	113a8 <__fxstat64@plt>
   13954:	cmp	r0, #0
   13958:	bne	139e4 <__assert_fail@plt+0x23fc>
   1395c:	movw	r0, #61891	; 0xf1c3
   13960:	movt	r0, #2
   13964:	ldrb	r0, [r0]
   13968:	cmp	r0, #0
   1396c:	beq	12934 <__assert_fail@plt+0x134c>
   13970:	ldr	r0, [sp, #112]	; 0x70
   13974:	ldr	r1, [sp, #116]	; 0x74
   13978:	mov	r8, #0
   1397c:	mov	r4, #0
   13980:	orrs	r0, r0, r1
   13984:	beq	12aa8 <__assert_fail@plt+0x14c0>
   13988:	ldr	r0, [sp, #108]	; 0x6c
   1398c:	b	12894 <__assert_fail@plt+0x12ac>
   13990:	movw	r0, #61892	; 0xf1c4
   13994:	movt	r0, #2
   13998:	ldrb	r0, [r0]
   1399c:	cmp	r0, #0
   139a0:	beq	13c1c <__assert_fail@plt+0x2634>
   139a4:	mvn	r0, #0
   139a8:	str	r0, [r5, #48]	; 0x30
   139ac:	bl	114b0 <__errno_location@plt>
   139b0:	ldr	r1, [r0]
   139b4:	eor	r2, r4, #1
   139b8:	strb	r2, [r5, #44]	; 0x2c
   139bc:	add	r2, r5, #24
   139c0:	vst1.64	{d10-d11}, [r2]
   139c4:	str	r1, [r5, #52]	; 0x34
   139c8:	b	13c20 <__assert_fail@plt+0x2638>
   139cc:	ldr	r1, [sp, #108]	; 0x6c
   139d0:	mov	r0, #3
   139d4:	sub	r2, fp, #176	; 0xb0
   139d8:	bl	113a8 <__fxstat64@plt>
   139dc:	cmp	r0, #0
   139e0:	beq	127e8 <__assert_fail@plt+0x1200>
   139e4:	bl	114b0 <__errno_location@plt>
   139e8:	ldr	r4, [r0]
   139ec:	mov	r0, #0
   139f0:	mov	r1, sl
   139f4:	mov	r2, #5
   139f8:	str	r0, [sp, #100]	; 0x64
   139fc:	mov	r0, #0
   13a00:	bl	11354 <dcgettext@plt>
   13a04:	mov	r5, r0
   13a08:	mov	r0, #4
   13a0c:	mov	r1, r7
   13a10:	bl	19fe4 <__assert_fail@plt+0x89fc>
   13a14:	mov	r2, r5
   13a18:	ldr	r5, [sp, #84]	; 0x54
   13a1c:	mov	r3, r0
   13a20:	mov	r0, #0
   13a24:	mov	r1, r4
   13a28:	bl	113f0 <error@plt>
   13a2c:	mov	r4, #0
   13a30:	mov	r6, #0
   13a34:	ldr	r2, [sp, #108]	; 0x6c
   13a38:	movw	r0, #61892	; 0xf1c4
   13a3c:	movt	r0, #2
   13a40:	ldrb	r0, [r0]
   13a44:	cmp	r0, #0
   13a48:	beq	13b64 <__assert_fail@plt+0x257c>
   13a4c:	eor	r0, r6, #1
   13a50:	mov	r7, r4
   13a54:	mov	r4, r5
   13a58:	mov	r1, r2
   13a5c:	add	r2, sp, #128	; 0x80
   13a60:	rsb	r0, r0, #0
   13a64:	str	r0, [r4, #52]!	; 0x34
   13a68:	mov	r0, #3
   13a6c:	bl	113a8 <__fxstat64@plt>
   13a70:	cmn	r0, #1
   13a74:	ble	13b98 <__assert_fail@plt+0x25b0>
   13a78:	ldr	r0, [sp, #144]	; 0x90
   13a7c:	and	r1, r0, #61440	; 0xf000
   13a80:	cmp	r1, #32768	; 0x8000
   13a84:	bge	13c98 <__assert_fail@plt+0x26b0>
   13a88:	ldr	r2, [sp, #44]	; 0x2c
   13a8c:	cmp	r1, #4096	; 0x1000
   13a90:	cmpne	r1, #8192	; 0x2000
   13a94:	beq	13ca4 <__assert_fail@plt+0x26bc>
   13a98:	mvn	r0, #0
   13a9c:	mov	r1, #1
   13aa0:	mov	r6, r5
   13aa4:	str	r0, [r4]
   13aa8:	mov	r0, #0
   13aac:	strb	r0, [r2]
   13ab0:	movw	r0, #61902	; 0xf1ce
   13ab4:	mov	r2, #5
   13ab8:	movt	r0, #2
   13abc:	ldrb	r0, [r0]
   13ac0:	bic	r0, r1, r0
   13ac4:	movw	r1, #55873	; 0xda41
   13ac8:	strb	r0, [r6, #44]!	; 0x2c
   13acc:	mov	r0, #0
   13ad0:	movt	r1, #1
   13ad4:	bl	11354 <dcgettext@plt>
   13ad8:	mov	r4, r0
   13adc:	ldr	r0, [sp, #104]	; 0x68
   13ae0:	mov	r1, r8
   13ae4:	ldr	r5, [r0]
   13ae8:	mov	r0, r5
   13aec:	bl	112b8 <strcmp@plt>
   13af0:	cmp	r0, #0
   13af4:	bne	13b10 <__assert_fail@plt+0x2528>
   13af8:	movw	r1, #55943	; 0xda87
   13afc:	mov	r0, #0
   13b00:	mov	r2, #5
   13b04:	movt	r1, #1
   13b08:	bl	11354 <dcgettext@plt>
   13b0c:	mov	r5, r0
   13b10:	mov	r0, #0
   13b14:	mov	r1, #3
   13b18:	mov	r2, r5
   13b1c:	bl	1a260 <__assert_fail@plt+0x8c78>
   13b20:	mov	r5, r0
   13b24:	ldrb	r0, [r6]
   13b28:	cmp	r0, #0
   13b2c:	movw	r0, #54062	; 0xd32e
   13b30:	movt	r0, #1
   13b34:	beq	13b4c <__assert_fail@plt+0x2564>
   13b38:	movw	r1, #55918	; 0xda6e
   13b3c:	mov	r0, #0
   13b40:	mov	r2, #5
   13b44:	movt	r1, #1
   13b48:	bl	11354 <dcgettext@plt>
   13b4c:	str	r0, [sp]
   13b50:	mov	r0, #0
   13b54:	mov	r1, #0
   13b58:	mov	r2, r4
   13b5c:	mov	r3, r5
   13b60:	b	13c10 <__assert_fail@plt+0x2628>
   13b64:	ldr	r0, [sp, #72]	; 0x48
   13b68:	cmp	r0, #0
   13b6c:	beq	13e24 <__assert_fail@plt+0x283c>
   13b70:	mov	r0, r2
   13b74:	bl	115d0 <close@plt>
   13b78:	cmp	r0, #0
   13b7c:	beq	13e24 <__assert_fail@plt+0x283c>
   13b80:	bl	114b0 <__errno_location@plt>
   13b84:	ldr	r4, [r0]
   13b88:	movw	r1, #55856	; 0xda30
   13b8c:	mov	r0, #0
   13b90:	movt	r1, #1
   13b94:	b	13c30 <__assert_fail@plt+0x2648>
   13b98:	bl	114b0 <__errno_location@plt>
   13b9c:	ldr	r1, [r0]
   13ba0:	mov	r2, #5
   13ba4:	str	r1, [r4]
   13ba8:	movw	r1, #55856	; 0xda30
   13bac:	ldr	r4, [r0]
   13bb0:	mov	r0, #0
   13bb4:	movt	r1, #1
   13bb8:	bl	11354 <dcgettext@plt>
   13bbc:	mov	r5, r0
   13bc0:	ldr	r0, [sp, #104]	; 0x68
   13bc4:	mov	r1, r8
   13bc8:	ldr	r6, [r0]
   13bcc:	mov	r0, r6
   13bd0:	bl	112b8 <strcmp@plt>
   13bd4:	cmp	r0, #0
   13bd8:	bne	13bf4 <__assert_fail@plt+0x260c>
   13bdc:	movw	r1, #55943	; 0xda87
   13be0:	mov	r0, #0
   13be4:	mov	r2, #5
   13be8:	movt	r1, #1
   13bec:	bl	11354 <dcgettext@plt>
   13bf0:	mov	r6, r0
   13bf4:	mov	r0, #4
   13bf8:	mov	r1, r6
   13bfc:	bl	19fe4 <__assert_fail@plt+0x89fc>
   13c00:	mov	r3, r0
   13c04:	mov	r0, #0
   13c08:	mov	r1, r4
   13c0c:	mov	r2, r5
   13c10:	bl	113f0 <error@plt>
   13c14:	ldr	r5, [sp, #84]	; 0x54
   13c18:	b	13d64 <__assert_fail@plt+0x277c>
   13c1c:	bl	114b0 <__errno_location@plt>
   13c20:	ldr	r4, [r0]
   13c24:	movw	r1, #55829	; 0xda15
   13c28:	mov	r0, #0
   13c2c:	movt	r1, #1
   13c30:	mov	r2, #5
   13c34:	bl	11354 <dcgettext@plt>
   13c38:	mov	r5, r0
   13c3c:	ldr	r0, [sp, #104]	; 0x68
   13c40:	mov	r1, r8
   13c44:	ldr	r6, [r0]
   13c48:	mov	r0, r6
   13c4c:	bl	112b8 <strcmp@plt>
   13c50:	cmp	r0, #0
   13c54:	bne	13c70 <__assert_fail@plt+0x2688>
   13c58:	movw	r1, #55943	; 0xda87
   13c5c:	mov	r0, #0
   13c60:	mov	r2, #5
   13c64:	movt	r1, #1
   13c68:	bl	11354 <dcgettext@plt>
   13c6c:	mov	r6, r0
   13c70:	mov	r0, #4
   13c74:	mov	r1, r6
   13c78:	bl	19fe4 <__assert_fail@plt+0x89fc>
   13c7c:	mov	r3, r0
   13c80:	mov	r0, #0
   13c84:	mov	r1, r4
   13c88:	mov	r2, r5
   13c8c:	mov	r6, #0
   13c90:	bl	113f0 <error@plt>
   13c94:	b	13e24 <__assert_fail@plt+0x283c>
   13c98:	ldr	r2, [sp, #44]	; 0x2c
   13c9c:	cmpne	r1, #49152	; 0xc000
   13ca0:	bne	13a98 <__assert_fail@plt+0x24b0>
   13ca4:	cmp	r6, #0
   13ca8:	beq	13d64 <__assert_fail@plt+0x277c>
   13cac:	ldr	r1, [sp, #100]	; 0x64
   13cb0:	ldr	r6, [sp, #108]	; 0x6c
   13cb4:	str	r7, [r5, #12]
   13cb8:	str	r1, [r5, #8]
   13cbc:	ldr	r1, [sp, #28]
   13cc0:	str	r6, [r5, #48]	; 0x30
   13cc4:	ldrd	r2, [r1]
   13cc8:	ldr	r1, [sp, #128]	; 0x80
   13ccc:	str	r2, [r5, #16]
   13cd0:	str	r3, [r5, #20]
   13cd4:	ldr	r2, [sp, #132]	; 0x84
   13cd8:	str	r1, [r5, #24]
   13cdc:	ldr	r1, [sp, #32]
   13ce0:	str	r2, [r5, #28]
   13ce4:	ldrd	r2, [r1]
   13ce8:	mov	r1, #0
   13cec:	str	r1, [r5, #72]	; 0x48
   13cf0:	str	r1, [r5, #76]	; 0x4c
   13cf4:	str	r0, [r5, #40]	; 0x28
   13cf8:	ldr	r0, [sp, #72]	; 0x48
   13cfc:	cmp	r0, #0
   13d00:	mov	r0, #1
   13d04:	mvneq	r0, #0
   13d08:	str	r0, [r5, #56]	; 0x38
   13d0c:	ldr	r0, [sp, #104]	; 0x68
   13d10:	strb	r1, [r5, #44]	; 0x2c
   13d14:	str	r3, [r5, #36]	; 0x24
   13d18:	str	r2, [r5, #32]
   13d1c:	mov	r1, r8
   13d20:	ldr	r4, [r0]
   13d24:	mov	r0, r4
   13d28:	bl	112b8 <strcmp@plt>
   13d2c:	cmp	r0, #0
   13d30:	bne	13d4c <__assert_fail@plt+0x2764>
   13d34:	movw	r1, #55943	; 0xda87
   13d38:	mov	r0, #0
   13d3c:	mov	r2, #5
   13d40:	movt	r1, #1
   13d44:	bl	11354 <dcgettext@plt>
   13d48:	mov	r4, r0
   13d4c:	mov	r0, r6
   13d50:	mov	r1, r4
   13d54:	bl	1537c <__assert_fail@plt+0x3d94>
   13d58:	strb	r0, [r5, #45]	; 0x2d
   13d5c:	mov	r6, #1
   13d60:	b	13e24 <__assert_fail@plt+0x283c>
   13d64:	movw	r0, #61902	; 0xf1ce
   13d68:	mov	r1, #1
   13d6c:	movt	r0, #2
   13d70:	ldrb	r0, [r0]
   13d74:	bic	r0, r1, r0
   13d78:	mov	r1, r8
   13d7c:	strb	r0, [r5, #44]	; 0x2c
   13d80:	ldr	r0, [sp, #104]	; 0x68
   13d84:	ldr	r4, [r0]
   13d88:	mov	r0, r4
   13d8c:	bl	112b8 <strcmp@plt>
   13d90:	cmp	r0, #0
   13d94:	bne	13db0 <__assert_fail@plt+0x27c8>
   13d98:	movw	r1, #55943	; 0xda87
   13d9c:	mov	r0, #0
   13da0:	mov	r2, #5
   13da4:	movt	r1, #1
   13da8:	bl	11354 <dcgettext@plt>
   13dac:	mov	r4, r0
   13db0:	ldr	r0, [sp, #52]	; 0x34
   13db4:	cmp	r0, #2
   13db8:	bcc	13e18 <__assert_fail@plt+0x2830>
   13dbc:	ldr	r0, [sp, #108]	; 0x6c
   13dc0:	bl	115d0 <close@plt>
   13dc4:	cmp	r0, #0
   13dc8:	beq	13e18 <__assert_fail@plt+0x2830>
   13dcc:	bl	114b0 <__errno_location@plt>
   13dd0:	ldr	r5, [r0]
   13dd4:	movw	r1, #56114	; 0xdb32
   13dd8:	mov	r0, #0
   13ddc:	mov	r2, #5
   13de0:	movt	r1, #1
   13de4:	bl	11354 <dcgettext@plt>
   13de8:	mov	r6, r0
   13dec:	mov	r0, #4
   13df0:	mov	r1, r4
   13df4:	bl	19fe4 <__assert_fail@plt+0x89fc>
   13df8:	mov	r3, r0
   13dfc:	ldr	r0, [sp, #108]	; 0x6c
   13e00:	mov	r1, r5
   13e04:	ldr	r5, [sp, #84]	; 0x54
   13e08:	mov	r2, r6
   13e0c:	str	r0, [sp]
   13e10:	mov	r0, #0
   13e14:	bl	113f0 <error@plt>
   13e18:	mvn	r0, #0
   13e1c:	mov	r6, #0
   13e20:	str	r0, [r5, #48]	; 0x30
   13e24:	ldr	r0, [sp, #92]	; 0x5c
   13e28:	ldr	r1, [sp, #76]	; 0x4c
   13e2c:	and	r0, r0, r6
   13e30:	mov	r6, r0
   13e34:	ldr	r0, [sp, #88]	; 0x58
   13e38:	add	r0, r0, #1
   13e3c:	cmp	r0, r1
   13e40:	bne	137bc <__assert_fail@plt+0x21d4>
   13e44:	ldr	r8, [sp, #76]	; 0x4c
   13e48:	eor	r0, r6, #1
   13e4c:	b	13e54 <__assert_fail@plt+0x286c>
   13e50:	mov	r0, #0
   13e54:	str	r0, [sp, #84]	; 0x54
   13e58:	movw	r0, #61892	; 0xf1c4
   13e5c:	movt	r0, #2
   13e60:	ldrb	r0, [r0]
   13e64:	cmp	r0, #0
   13e68:	cmpne	r8, #0
   13e6c:	bne	13ea8 <__assert_fail@plt+0x28c0>
   13e70:	movw	r0, #61888	; 0xf1c0
   13e74:	movt	r0, #2
   13e78:	ldrb	r0, [r0]
   13e7c:	cmp	r0, #1
   13e80:	bne	13e94 <__assert_fail@plt+0x28ac>
   13e84:	mov	r0, #0
   13e88:	bl	115d0 <close@plt>
   13e8c:	cmn	r0, #1
   13e90:	ble	152c0 <__assert_fail@plt+0x3cd8>
   13e94:	ldr	r0, [sp, #84]	; 0x54
   13e98:	sub	sp, fp, #64	; 0x40
   13e9c:	vpop	{d8-d11}
   13ea0:	add	sp, sp, #4
   13ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea8:	movw	r4, #55146	; 0xd76a
   13eac:	add	r6, r9, #48	; 0x30
   13eb0:	mov	r7, r8
   13eb4:	mov	r5, #0
   13eb8:	mov	r8, #1
   13ebc:	mvn	r9, #0
   13ec0:	movt	r4, #1
   13ec4:	b	13ef0 <__assert_fail@plt+0x2908>
   13ec8:	ldr	r0, [r6]
   13ecc:	cmp	r0, #0
   13ed0:	blt	13f10 <__assert_fail@plt+0x2928>
   13ed4:	ldr	r0, [r6, #-8]
   13ed8:	and	r0, r0, #61440	; 0xf000
   13edc:	cmp	r0, #4096	; 0x1000
   13ee0:	bne	13f10 <__assert_fail@plt+0x2928>
   13ee4:	strb	r8, [r6, #-4]
   13ee8:	str	r9, [r6]
   13eec:	b	13f14 <__assert_fail@plt+0x292c>
   13ef0:	ldr	r0, [r6, #-48]	; 0xffffffd0
   13ef4:	mov	r1, r4
   13ef8:	bl	112b8 <strcmp@plt>
   13efc:	cmp	r0, #0
   13f00:	bne	13f10 <__assert_fail@plt+0x2928>
   13f04:	ldrb	r0, [r6, #-4]
   13f08:	cmp	r0, #0
   13f0c:	beq	13ec8 <__assert_fail@plt+0x28e0>
   13f10:	add	r5, r5, #1
   13f14:	subs	r7, r7, #1
   13f18:	add	r6, r6, #80	; 0x50
   13f1c:	bne	13ef0 <__assert_fail@plt+0x2908>
   13f20:	ldr	r8, [sp, #76]	; 0x4c
   13f24:	ldr	r7, [sp, #48]	; 0x30
   13f28:	cmp	r5, #0
   13f2c:	beq	13e70 <__assert_fail@plt+0x2888>
   13f30:	sub	r2, fp, #176	; 0xb0
   13f34:	mov	r0, #3
   13f38:	mov	r1, #1
   13f3c:	bl	113a8 <__fxstat64@plt>
   13f40:	cmn	r0, #1
   13f44:	ble	152f0 <__assert_fail@plt+0x3d08>
   13f48:	ldr	r0, [fp, #-160]	; 0xffffff60
   13f4c:	movw	r1, #61900	; 0xf1cc
   13f50:	movw	r5, #61901	; 0xf1cd
   13f54:	movt	r1, #2
   13f58:	movt	r5, #2
   13f5c:	and	r0, r0, #61440	; 0xf000
   13f60:	sub	r0, r0, #4096	; 0x1000
   13f64:	clz	r0, r0
   13f68:	lsr	r0, r0, #5
   13f6c:	strb	r0, [r1]
   13f70:	ldrb	r0, [r5]
   13f74:	cmp	r0, #0
   13f78:	bne	1402c <__assert_fail@plt+0x2a44>
   13f7c:	movw	r4, #55146	; 0xd76a
   13f80:	add	r5, r7, #44	; 0x2c
   13f84:	mov	r6, #0
   13f88:	movt	r4, #1
   13f8c:	ldrb	r0, [r5]
   13f90:	cmp	r0, #0
   13f94:	bne	13fac <__assert_fail@plt+0x29c4>
   13f98:	ldr	r0, [r5, #-44]	; 0xffffffd4
   13f9c:	mov	r1, r4
   13fa0:	bl	112b8 <strcmp@plt>
   13fa4:	cmp	r0, #0
   13fa8:	beq	1401c <__assert_fail@plt+0x2a34>
   13fac:	add	r6, r6, #1
   13fb0:	add	r5, r5, #80	; 0x50
   13fb4:	cmp	r6, r8
   13fb8:	bcc	13f8c <__assert_fail@plt+0x29a4>
   13fbc:	add	r0, r7, #45	; 0x2d
   13fc0:	mov	r1, #0
   13fc4:	ldr	r2, [r0, #3]
   13fc8:	cmp	r2, #0
   13fcc:	blt	13fdc <__assert_fail@plt+0x29f4>
   13fd0:	ldrb	r2, [r0]
   13fd4:	cmp	r2, #0
   13fd8:	bne	1401c <__assert_fail@plt+0x2a34>
   13fdc:	add	r1, r1, #1
   13fe0:	add	r0, r0, #80	; 0x50
   13fe4:	cmp	r1, r8
   13fe8:	bcc	13fc4 <__assert_fail@plt+0x29dc>
   13fec:	add	r0, r7, #45	; 0x2d
   13ff0:	mov	r1, #0
   13ff4:	ldr	r2, [r0, #3]
   13ff8:	cmp	r2, #0
   13ffc:	blt	1400c <__assert_fail@plt+0x2a24>
   14000:	ldrb	r2, [r0]
   14004:	cmp	r2, #0
   14008:	beq	14698 <__assert_fail@plt+0x30b0>
   1400c:	add	r1, r1, #1
   14010:	add	r0, r0, #80	; 0x50
   14014:	cmp	r1, r8
   14018:	bcc	13ff4 <__assert_fail@plt+0x2a0c>
   1401c:	movw	r5, #61901	; 0xf1cd
   14020:	mov	r0, #1
   14024:	movt	r5, #2
   14028:	strb	r0, [r5]
   1402c:	mov	r0, #1
   14030:	cmp	r8, #1
   14034:	strb	r0, [r5]
   14038:	bne	14060 <__assert_fail@plt+0x2a78>
   1403c:	movw	r0, #61896	; 0xf1c8
   14040:	movt	r0, #2
   14044:	ldr	r0, [r0]
   14048:	cmp	r0, #0
   1404c:	movweq	r0, #61760	; 0xf140
   14050:	movteq	r0, #2
   14054:	ldreq	r0, [r0]
   14058:	cmpeq	r0, #2
   1405c:	beq	1465c <__assert_fail@plt+0x3074>
   14060:	sub	r0, r8, #1
   14064:	str	r0, [sp, #100]	; 0x64
   14068:	mov	r0, #2048	; 0x800
   1406c:	str	r0, [sp, #104]	; 0x68
   14070:	mov	r0, #0
   14074:	str	r0, [sp, #108]	; 0x6c
   14078:	add	r0, r7, #44	; 0x2c
   1407c:	str	r0, [sp, #72]	; 0x48
   14080:	add	r0, r7, #72	; 0x48
   14084:	ldr	r7, [sp, #108]	; 0x6c
   14088:	str	r0, [sp, #80]	; 0x50
   1408c:	add	r0, sp, #128	; 0x80
   14090:	add	r1, r0, #48	; 0x30
   14094:	add	r0, r0, #80	; 0x50
   14098:	str	r0, [sp, #88]	; 0x58
   1409c:	mov	r0, #0
   140a0:	str	r1, [sp, #96]	; 0x60
   140a4:	str	r0, [sp, #92]	; 0x5c
   140a8:	ldr	r6, [sp, #80]	; 0x50
   140ac:	mov	r5, #0
   140b0:	mov	r0, #0
   140b4:	str	r0, [sp, #116]	; 0x74
   140b8:	b	142c0 <__assert_fail@plt+0x2cd8>
   140bc:	ldr	r1, [r6, #-32]	; 0xffffffe0
   140c0:	ldr	r0, [sp, #144]	; 0x90
   140c4:	cmp	r1, r0
   140c8:	bne	14198 <__assert_fail@plt+0x2bb0>
   140cc:	and	r1, r1, #61440	; 0xf000
   140d0:	cmp	r1, #32768	; 0x8000
   140d4:	bne	140f8 <__assert_fail@plt+0x2b10>
   140d8:	ldr	r1, [sp, #96]	; 0x60
   140dc:	ldrd	r2, [r1]
   140e0:	ldr	r8, [r6, #-64]	; 0xffffffc0
   140e4:	ldr	r1, [r6, #-60]	; 0xffffffc4
   140e8:	eor	r1, r1, r3
   140ec:	eor	r2, r8, r2
   140f0:	orrs	r1, r2, r1
   140f4:	bne	14198 <__assert_fail@plt+0x2bb0>
   140f8:	ldr	r1, [sp, #88]	; 0x58
   140fc:	ldrd	r2, [r1]
   14100:	ldr	r8, [r6, #-56]	; 0xffffffc8
   14104:	ldr	r1, [r6, #-52]	; 0xffffffcc
   14108:	cmp	r8, r2
   1410c:	mov	r2, #0
   14110:	movwgt	r2, #1
   14114:	sublt	r2, r2, #1
   14118:	cmp	r1, r3
   1411c:	mov	r1, #0
   14120:	movwgt	r1, #1
   14124:	sublt	r1, r1, #1
   14128:	cmn	r1, r2, lsl #1
   1412c:	bne	14198 <__assert_fail@plt+0x2bb0>
   14130:	movw	r0, #61768	; 0xf148
   14134:	ldrd	r2, [r6]
   14138:	movt	r0, #2
   1413c:	ldrd	r0, [r0]
   14140:	adds	r4, r2, #1
   14144:	adc	r7, r3, #0
   14148:	subs	r0, r2, r0
   1414c:	stm	r6, {r4, r7}
   14150:	sbcs	r0, r3, r1
   14154:	bcc	142b4 <__assert_fail@plt+0x2ccc>
   14158:	movw	r0, #61760	; 0xf140
   1415c:	ldr	r8, [sp, #76]	; 0x4c
   14160:	ldr	r7, [sp, #108]	; 0x6c
   14164:	movt	r0, #2
   14168:	ldr	r0, [r0]
   1416c:	cmp	r0, #1
   14170:	bne	144a8 <__assert_fail@plt+0x2ec0>
   14174:	ldr	r1, [r6, #-16]
   14178:	mov	r0, r9
   1417c:	cmp	r1, #0
   14180:	movwne	r1, #1
   14184:	bl	15ef0 <__assert_fail@plt+0x4908>
   14188:	mov	r0, #0
   1418c:	str	r0, [r6]
   14190:	str	r0, [r6, #4]
   14194:	b	144a8 <__assert_fail@plt+0x2ec0>
   14198:	ldr	r1, [sp, #88]	; 0x58
   1419c:	ldrd	r2, [r1]
   141a0:	mov	r1, #0
   141a4:	str	r1, [r6]
   141a8:	str	r1, [r6, #4]
   141ac:	str	r0, [r6, #-32]	; 0xffffffe0
   141b0:	ldr	r0, [sp, #112]	; 0x70
   141b4:	strd	r2, [r6, #-56]	; 0xffffffc8
   141b8:	and	r0, r0, #61440	; 0xf000
   141bc:	cmp	r0, #32768	; 0x8000
   141c0:	bne	14240 <__assert_fail@plt+0x2c58>
   141c4:	mov	r9, r6
   141c8:	ldr	r2, [sp, #96]	; 0x60
   141cc:	ldr	r0, [r9, #-64]!	; 0xffffffc0
   141d0:	ldrd	r2, [r2]
   141d4:	ldr	r1, [r9, #4]
   141d8:	subs	r0, r2, r0
   141dc:	sbcs	r0, r3, r1
   141e0:	bge	14240 <__assert_fail@plt+0x2c58>
   141e4:	movw	r1, #56789	; 0xddd5
   141e8:	mov	r0, #0
   141ec:	mov	r2, #5
   141f0:	movt	r1, #1
   141f4:	bl	11354 <dcgettext@plt>
   141f8:	mov	r8, r0
   141fc:	mov	r0, #0
   14200:	mov	r1, #3
   14204:	mov	r2, sl
   14208:	bl	1a260 <__assert_fail@plt+0x8c78>
   1420c:	mov	r3, r0
   14210:	mov	r0, #0
   14214:	mov	r1, #0
   14218:	mov	r2, r8
   1421c:	bl	113f0 <error@plt>
   14220:	mov	r8, #0
   14224:	mov	r0, r4
   14228:	mov	r2, #0
   1422c:	mov	r3, #0
   14230:	stm	sp, {r8, sl}
   14234:	bl	15d6c <__assert_fail@plt+0x4784>
   14238:	str	r8, [r9]
   1423c:	str	r8, [r9, #4]
   14240:	ldr	r0, [sp, #100]	; 0x64
   14244:	ldr	r8, [sp, #76]	; 0x4c
   14248:	cmp	r5, r0
   1424c:	beq	14370 <__assert_fail@plt+0x2d88>
   14250:	movw	r0, #61890	; 0xf1c2
   14254:	str	r5, [sp, #100]	; 0x64
   14258:	movt	r0, #2
   1425c:	ldrb	r0, [r0]
   14260:	cmp	r0, #1
   14264:	bne	14370 <__assert_fail@plt+0x2d88>
   14268:	movw	r0, #61904	; 0xf1d0
   1426c:	movw	r2, #54062	; 0xd32e
   14270:	movw	r1, #55958	; 0xda96
   14274:	mov	r3, sl
   14278:	movt	r0, #2
   1427c:	movt	r2, #1
   14280:	movt	r1, #1
   14284:	mov	r9, r0
   14288:	ldrb	r0, [r0]
   1428c:	cmp	r0, #0
   14290:	movw	r0, #54061	; 0xd32d
   14294:	movt	r0, #1
   14298:	movne	r2, r0
   1429c:	mov	r0, #1
   142a0:	bl	114d4 <__printf_chk@plt>
   142a4:	mov	r0, #1
   142a8:	str	r5, [sp, #100]	; 0x64
   142ac:	strb	r0, [r9]
   142b0:	b	14370 <__assert_fail@plt+0x2d88>
   142b4:	ldr	r8, [sp, #76]	; 0x4c
   142b8:	ldr	r7, [sp, #108]	; 0x6c
   142bc:	b	144a8 <__assert_fail@plt+0x2ec0>
   142c0:	ldrb	r0, [r6, #-28]	; 0xffffffe4
   142c4:	cmp	r0, #0
   142c8:	bne	144a8 <__assert_fail@plt+0x2ec0>
   142cc:	ldr	r4, [r6, #-24]	; 0xffffffe8
   142d0:	sub	r9, r6, #72	; 0x48
   142d4:	cmn	r4, #1
   142d8:	ble	14404 <__assert_fail@plt+0x2e1c>
   142dc:	ldr	sl, [r6, #-72]	; 0xffffffb8
   142e0:	movw	r1, #55146	; 0xd76a
   142e4:	movt	r1, #1
   142e8:	mov	r0, sl
   142ec:	bl	112b8 <strcmp@plt>
   142f0:	cmp	r0, #0
   142f4:	bne	14310 <__assert_fail@plt+0x2d28>
   142f8:	movw	r1, #55943	; 0xda87
   142fc:	mov	r0, #0
   14300:	mov	r2, #5
   14304:	movt	r1, #1
   14308:	bl	11354 <dcgettext@plt>
   1430c:	mov	sl, r0
   14310:	ldr	r0, [r6, #-32]	; 0xffffffe0
   14314:	str	r0, [sp, #112]	; 0x70
   14318:	ldr	r0, [r6, #-16]
   1431c:	cmp	r0, r7
   14320:	mov	r0, r7
   14324:	beq	14368 <__assert_fail@plt+0x2d80>
   14328:	mov	r0, r4
   1432c:	mov	r1, #3
   14330:	bl	172bc <__assert_fail@plt+0x5cd4>
   14334:	cmp	r0, #0
   14338:	blt	14414 <__assert_fail@plt+0x2e2c>
   1433c:	ldr	r1, [sp, #104]	; 0x68
   14340:	orr	r2, r0, r1
   14344:	cmp	r2, r0
   14348:	beq	14360 <__assert_fail@plt+0x2d78>
   1434c:	mov	r0, r4
   14350:	mov	r1, #4
   14354:	bl	172bc <__assert_fail@plt+0x5cd4>
   14358:	cmn	r0, #1
   1435c:	beq	14414 <__assert_fail@plt+0x2e2c>
   14360:	str	r7, [r6, #-16]
   14364:	mov	r0, r7
   14368:	cmp	r0, #0
   1436c:	beq	14444 <__assert_fail@plt+0x2e5c>
   14370:	ldr	r2, [r6, #-16]
   14374:	mvn	r1, #0
   14378:	subs	r0, r1, #1
   1437c:	sbc	r1, r1, #0
   14380:	cmp	r2, #0
   14384:	bne	143c8 <__assert_fail@plt+0x2de0>
   14388:	ldr	r0, [sp, #112]	; 0x70
   1438c:	mvn	r1, #0
   14390:	and	r0, r0, #61440	; 0xf000
   14394:	cmp	r0, #32768	; 0x8000
   14398:	mvn	r0, #0
   1439c:	bne	143c8 <__assert_fail@plt+0x2de0>
   143a0:	ldrb	r0, [r6, #-27]	; 0xffffffe5
   143a4:	mvn	r1, #0
   143a8:	cmp	r0, #0
   143ac:	mvn	r0, #0
   143b0:	beq	143c8 <__assert_fail@plt+0x2de0>
   143b4:	ldr	r2, [sp, #96]	; 0x60
   143b8:	ldrd	r0, [r6, #-64]	; 0xffffffc0
   143bc:	ldrd	r2, [r2]
   143c0:	subs	r0, r2, r0
   143c4:	sbc	r1, r3, r1
   143c8:	stm	sp, {r0, r1}
   143cc:	mov	r0, #0
   143d0:	mov	r1, sl
   143d4:	mov	r2, r4
   143d8:	bl	15c04 <__assert_fail@plt+0x461c>
   143dc:	ldrd	r2, [r6, #-64]	; 0xffffffc0
   143e0:	adds	r2, r2, r0
   143e4:	adc	r3, r3, r1
   143e8:	orrs	r0, r0, r1
   143ec:	ldr	r1, [sp, #116]	; 0x74
   143f0:	movwne	r0, #1
   143f4:	strd	r2, [r6, #-64]	; 0xffffffc0
   143f8:	orr	r1, r1, r0
   143fc:	str	r1, [sp, #116]	; 0x74
   14400:	b	144a8 <__assert_fail@plt+0x2ec0>
   14404:	mov	r0, r9
   14408:	mov	r1, r7
   1440c:	bl	15ef0 <__assert_fail@plt+0x4908>
   14410:	b	144a8 <__assert_fail@plt+0x2ec0>
   14414:	ldr	r7, [r6, #-32]	; 0xffffffe0
   14418:	bl	114b0 <__errno_location@plt>
   1441c:	ldr	r8, [r0]
   14420:	and	r0, r7, #61440	; 0xf000
   14424:	cmp	r0, #32768	; 0x8000
   14428:	cmpeq	r8, #1
   1442c:	bne	15234 <__assert_fail@plt+0x3c4c>
   14430:	ldr	r0, [r6, #-16]
   14434:	ldr	r8, [sp, #76]	; 0x4c
   14438:	ldr	r7, [sp, #108]	; 0x6c
   1443c:	cmp	r0, #0
   14440:	bne	14370 <__assert_fail@plt+0x2d88>
   14444:	mov	r0, #3
   14448:	mov	r1, r4
   1444c:	add	r2, sp, #128	; 0x80
   14450:	bl	113a8 <__fxstat64@plt>
   14454:	cmp	r0, #0
   14458:	beq	140bc <__assert_fail@plt+0x2ad4>
   1445c:	mvn	r0, #0
   14460:	str	r0, [r6, #-24]	; 0xffffffe8
   14464:	bl	114b0 <__errno_location@plt>
   14468:	ldr	r1, [r0]
   1446c:	mov	r2, sl
   14470:	str	r1, [r6, #-20]	; 0xffffffec
   14474:	mov	r1, #3
   14478:	ldr	r7, [r0]
   1447c:	mov	r0, #0
   14480:	bl	1a260 <__assert_fail@plt+0x8c78>
   14484:	mov	r1, r7
   14488:	ldr	r7, [sp, #108]	; 0x6c
   1448c:	movw	r2, #57314	; 0xdfe2
   14490:	mov	r3, r0
   14494:	mov	r0, #0
   14498:	movt	r2, #1
   1449c:	bl	113f0 <error@plt>
   144a0:	mov	r0, r4
   144a4:	bl	115d0 <close@plt>
   144a8:	add	r5, r5, #1
   144ac:	add	r6, r6, #80	; 0x50
   144b0:	cmp	r5, r8
   144b4:	bcc	142c0 <__assert_fail@plt+0x2cd8>
   144b8:	movw	r0, #61902	; 0xf1ce
   144bc:	ldr	r4, [sp, #116]	; 0x74
   144c0:	movt	r0, #2
   144c4:	ldrb	r0, [r0]
   144c8:	cmp	r0, #1
   144cc:	movweq	r1, #61760	; 0xf140
   144d0:	movteq	r1, #2
   144d4:	ldreq	r1, [r1]
   144d8:	cmpeq	r1, #1
   144dc:	beq	14520 <__assert_fail@plt+0x2f38>
   144e0:	ldr	r2, [sp, #72]	; 0x48
   144e4:	eor	r0, r0, #1
   144e8:	mov	r1, #0
   144ec:	ldr	r3, [r2, #4]
   144f0:	cmn	r3, #1
   144f4:	bgt	14520 <__assert_fail@plt+0x2f38>
   144f8:	ldrb	r3, [r2]
   144fc:	cmp	r3, #0
   14500:	movwne	r3, #1
   14504:	orrs	r3, r3, r0
   14508:	beq	14520 <__assert_fail@plt+0x2f38>
   1450c:	add	r1, r1, #1
   14510:	add	r2, r2, #80	; 0x50
   14514:	cmp	r1, r8
   14518:	bcc	144ec <__assert_fail@plt+0x2f04>
   1451c:	b	14634 <__assert_fail@plt+0x304c>
   14520:	mvn	r0, r4
   14524:	orr	r0, r7, r0
   14528:	tst	r0, #1
   1452c:	beq	14548 <__assert_fail@plt+0x2f60>
   14530:	movw	r0, #61876	; 0xf1b4
   14534:	movt	r0, #2
   14538:	ldr	r0, [r0]
   1453c:	bl	11384 <fflush_unlocked@plt>
   14540:	cmp	r0, #0
   14544:	bne	152ac <__assert_fail@plt+0x3cc4>
   14548:	movw	r0, #61900	; 0xf1cc
   1454c:	movt	r0, #2
   14550:	ldrb	r0, [r0]
   14554:	cmp	r0, #0
   14558:	beq	14590 <__assert_fail@plt+0x2fa8>
   1455c:	mov	r0, #8
   14560:	mov	r1, #1
   14564:	mov	r2, #0
   14568:	strh	r0, [sp, #132]	; 0x84
   1456c:	mov	r0, #1
   14570:	str	r0, [sp, #128]	; 0x80
   14574:	add	r0, sp, #128	; 0x80
   14578:	bl	1139c <poll@plt>
   1457c:	cmp	r0, #0
   14580:	blt	14590 <__assert_fail@plt+0x2fa8>
   14584:	ldrb	r0, [sp, #134]	; 0x86
   14588:	tst	r0, #8
   1458c:	bne	152d8 <__assert_fail@plt+0x3cf0>
   14590:	ldr	r0, [sp, #92]	; 0x5c
   14594:	orr	r0, r0, r4
   14598:	tst	r0, #1
   1459c:	bne	145fc <__assert_fail@plt+0x3014>
   145a0:	movw	r0, #61896	; 0xf1c8
   145a4:	movt	r0, #2
   145a8:	ldr	r0, [r0]
   145ac:	cmp	r0, #0
   145b0:	beq	145e0 <__assert_fail@plt+0x2ff8>
   145b4:	mov	r1, #0
   145b8:	bl	11450 <kill@plt>
   145bc:	cmp	r0, #0
   145c0:	beq	145e0 <__assert_fail@plt+0x2ff8>
   145c4:	bl	114b0 <__errno_location@plt>
   145c8:	ldr	r0, [r0]
   145cc:	mov	r4, #1
   145d0:	cmp	r0, #1
   145d4:	mov	r0, #1
   145d8:	str	r0, [sp, #92]	; 0x5c
   145dc:	bne	145fc <__assert_fail@plt+0x3014>
   145e0:	vmov.f64	d0, d8
   145e4:	bl	1b448 <__assert_fail@plt+0x9e60>
   145e8:	cmp	r0, #0
   145ec:	bne	152dc <__assert_fail@plt+0x3cf4>
   145f0:	mov	r0, #0
   145f4:	mov	r4, #1
   145f8:	str	r0, [sp, #92]	; 0x5c
   145fc:	tst	r4, #1
   14600:	bne	140a8 <__assert_fail@plt+0x2ac0>
   14604:	b	13e70 <__assert_fail@plt+0x2888>
   14608:	add	r2, sp, #128	; 0x80
   1460c:	mov	r0, #3
   14610:	mov	r1, #0
   14614:	bl	113a8 <__fxstat64@plt>
   14618:	cmp	r0, #0
   1461c:	bne	126ac <__assert_fail@plt+0x10c4>
   14620:	ldr	r0, [sp, #144]	; 0x90
   14624:	and	r0, r0, #61440	; 0xf000
   14628:	cmp	r0, #32768	; 0x8000
   1462c:	beq	126ac <__assert_fail@plt+0x10c4>
   14630:	b	126e0 <__assert_fail@plt+0x10f8>
   14634:	movw	r1, #56296	; 0xdbe8
   14638:	mov	r0, #0
   1463c:	mov	r2, #5
   14640:	movt	r1, #1
   14644:	bl	11354 <dcgettext@plt>
   14648:	mov	r2, r0
   1464c:	mov	r0, #0
   14650:	mov	r1, #0
   14654:	bl	113f0 <error@plt>
   14658:	b	13e70 <__assert_fail@plt+0x2888>
   1465c:	ldr	r0, [r7, #48]	; 0x30
   14660:	cmn	r0, #1
   14664:	beq	14060 <__assert_fail@plt+0x2a78>
   14668:	ldr	r0, [r7, #40]	; 0x28
   1466c:	mov	r1, #2048	; 0x800
   14670:	and	r0, r0, #61440	; 0xf000
   14674:	cmp	r0, #32768	; 0x8000
   14678:	sub	r0, r0, #32768	; 0x8000
   1467c:	movwne	r0, #1
   14680:	movwne	r1, #0
   14684:	str	r0, [sp, #108]	; 0x6c
   14688:	mov	r0, #0
   1468c:	str	r1, [sp, #104]	; 0x68
   14690:	str	r0, [sp, #100]	; 0x64
   14694:	b	14078 <__assert_fail@plt+0x2a90>
   14698:	mov	r4, #0
   1469c:	add	r6, sp, #128	; 0x80
   146a0:	mov	r5, r7
   146a4:	ldr	r1, [r5]
   146a8:	mov	r0, #3
   146ac:	mov	r2, r6
   146b0:	bl	115dc <__lxstat64@plt>
   146b4:	cmp	r0, #0
   146b8:	bne	146cc <__assert_fail@plt+0x30e4>
   146bc:	ldr	r0, [sp, #144]	; 0x90
   146c0:	and	r0, r0, #61440	; 0xf000
   146c4:	cmp	r0, #40960	; 0xa000
   146c8:	beq	1401c <__assert_fail@plt+0x2a34>
   146cc:	add	r4, r4, #1
   146d0:	add	r5, r5, #80	; 0x50
   146d4:	cmp	r4, r8
   146d8:	bcc	146a4 <__assert_fail@plt+0x30bc>
   146dc:	add	r0, r7, #40	; 0x28
   146e0:	mov	r1, #0
   146e4:	ldr	r2, [r0, #8]
   146e8:	cmp	r2, #0
   146ec:	blt	14704 <__assert_fail@plt+0x311c>
   146f0:	ldr	r2, [r0]
   146f4:	and	r2, r2, #61440	; 0xf000
   146f8:	cmp	r2, #32768	; 0x8000
   146fc:	cmpne	r2, #4096	; 0x1000
   14700:	bne	1401c <__assert_fail@plt+0x2a34>
   14704:	add	r1, r1, #1
   14708:	add	r0, r0, #80	; 0x50
   1470c:	cmp	r1, r8
   14710:	bcc	146e4 <__assert_fail@plt+0x30fc>
   14714:	movw	r0, #61760	; 0xf140
   14718:	ldr	r1, [sp, #84]	; 0x54
   1471c:	movt	r0, #2
   14720:	ldr	r0, [r0]
   14724:	eor	r1, r1, #1
   14728:	subs	r0, r0, #2
   1472c:	movwne	r0, #1
   14730:	orrs	r0, r0, r1
   14734:	beq	1401c <__assert_fail@plt+0x2a34>
   14738:	movw	r5, #61901	; 0xf1cd
   1473c:	movt	r5, #2
   14740:	ldrb	r0, [r5]
   14744:	cmp	r0, #0
   14748:	bne	1402c <__assert_fail@plt+0x2a44>
   1474c:	bl	11480 <inotify_init@plt>
   14750:	cmn	r0, #1
   14754:	str	r0, [sp, #116]	; 0x74
   14758:	ble	14ab0 <__assert_fail@plt+0x34c8>
   1475c:	movw	r0, #61876	; 0xf1b4
   14760:	movt	r0, #2
   14764:	ldr	r0, [r0]
   14768:	bl	11384 <fflush_unlocked@plt>
   1476c:	cmp	r0, #0
   14770:	bne	152ac <__assert_fail@plt+0x3cc4>
   14774:	movw	r2, #24264	; 0x5ec8
   14778:	movw	r3, #24280	; 0x5ed8
   1477c:	mov	r0, #0
   14780:	mov	r1, #0
   14784:	str	r0, [sp]
   14788:	movt	r2, #1
   1478c:	movt	r3, #1
   14790:	mov	r0, r8
   14794:	bl	17998 <__assert_fail@plt+0x63b0>
   14798:	cmp	r0, #0
   1479c:	str	r0, [sp, #108]	; 0x6c
   147a0:	beq	15324 <__assert_fail@plt+0x3d3c>
   147a4:	movw	r0, #61760	; 0xf140
   147a8:	mov	sl, #2
   147ac:	add	r9, r7, #68	; 0x44
   147b0:	mov	r5, #0
   147b4:	mov	r8, #0
   147b8:	movt	r0, #2
   147bc:	ldr	r0, [r0]
   147c0:	cmp	r0, #1
   147c4:	mov	r0, #0
   147c8:	movweq	sl, #3078	; 0xc06
   147cc:	str	r0, [sp, #100]	; 0x64
   147d0:	mov	r0, #0
   147d4:	str	r0, [sp, #104]	; 0x68
   147d8:	ldrb	r0, [r9, #-24]	; 0xffffffe8
   147dc:	cmp	r0, #0
   147e0:	bne	14934 <__assert_fail@plt+0x334c>
   147e4:	ldr	r7, [r9, #-68]	; 0xffffffbc
   147e8:	mov	r0, r7
   147ec:	bl	11474 <strlen@plt>
   147f0:	cmp	r5, r0
   147f4:	mvn	r1, #0
   147f8:	movcc	r5, r0
   147fc:	movw	r0, #61760	; 0xf140
   14800:	str	r1, [r9, #-8]
   14804:	movt	r0, #2
   14808:	ldr	r0, [r0]
   1480c:	cmp	r0, #1
   14810:	bne	14884 <__assert_fail@plt+0x329c>
   14814:	mov	r0, r7
   14818:	str	r5, [sp, #112]	; 0x70
   1481c:	mov	r5, sl
   14820:	bl	171e0 <__assert_fail@plt+0x5bf8>
   14824:	ldrb	sl, [r7, r0]
   14828:	mov	r4, r0
   1482c:	mov	r0, r7
   14830:	bl	16fd0 <__assert_fail@plt+0x59e8>
   14834:	sub	r0, r0, r7
   14838:	movw	r1, #56198	; 0xdb86
   1483c:	cmp	r4, #0
   14840:	movw	r2, #1924	; 0x784
   14844:	str	r0, [r9]
   14848:	mov	r0, #0
   1484c:	movt	r1, #1
   14850:	strb	r0, [r7, r4]
   14854:	ldr	r0, [sp, #116]	; 0x74
   14858:	ldrne	r1, [r9, #-68]	; 0xffffffbc
   1485c:	bl	114a4 <inotify_add_watch@plt>
   14860:	str	r0, [r9, #-4]
   14864:	ldr	r0, [r9, #-68]	; 0xffffffbc
   14868:	strb	sl, [r0, r4]
   1486c:	ldr	r0, [r9, #-4]
   14870:	cmp	r0, #0
   14874:	blt	14ab8 <__assert_fail@plt+0x34d0>
   14878:	mov	sl, r5
   1487c:	ldr	r7, [r9, #-68]	; 0xffffffbc
   14880:	ldr	r5, [sp, #112]	; 0x70
   14884:	ldr	r0, [sp, #116]	; 0x74
   14888:	mov	r1, r7
   1488c:	mov	r2, sl
   14890:	bl	114a4 <inotify_add_watch@plt>
   14894:	cmn	r0, #1
   14898:	str	r0, [r9, #-8]
   1489c:	ble	148c0 <__assert_fail@plt+0x32d8>
   148a0:	ldr	r0, [sp, #108]	; 0x6c
   148a4:	sub	r1, r9, #68	; 0x44
   148a8:	bl	184dc <__assert_fail@plt+0x6ef4>
   148ac:	mov	r1, #1
   148b0:	cmp	r0, #0
   148b4:	str	r1, [sp, #100]	; 0x64
   148b8:	bne	14934 <__assert_fail@plt+0x334c>
   148bc:	b	15324 <__assert_fail@plt+0x3d3c>
   148c0:	ldr	r0, [r9, #-20]	; 0xffffffec
   148c4:	add	r7, r0, #1
   148c8:	cmn	r0, #1
   148cc:	movwne	r7, #1
   148d0:	bl	114b0 <__errno_location@plt>
   148d4:	ldr	r4, [r0]
   148d8:	orr	r0, r4, #16
   148dc:	cmp	r0, #28
   148e0:	beq	14ac8 <__assert_fail@plt+0x34e0>
   148e4:	ldr	r0, [sp, #104]	; 0x68
   148e8:	orr	r0, r0, r7
   148ec:	str	r0, [sp, #104]	; 0x68
   148f0:	ldr	r0, [r9, #-16]
   148f4:	cmp	r4, r0
   148f8:	beq	14934 <__assert_fail@plt+0x334c>
   148fc:	movw	r1, #56264	; 0xdbc8
   14900:	mov	r0, #0
   14904:	mov	r2, #5
   14908:	movt	r1, #1
   1490c:	bl	11354 <dcgettext@plt>
   14910:	ldr	r1, [r9, #-68]	; 0xffffffbc
   14914:	mov	r7, r0
   14918:	mov	r0, #4
   1491c:	bl	19fe4 <__assert_fail@plt+0x89fc>
   14920:	mov	r3, r0
   14924:	mov	r0, #0
   14928:	mov	r1, r4
   1492c:	mov	r2, r7
   14930:	bl	113f0 <error@plt>
   14934:	ldr	r0, [sp, #76]	; 0x4c
   14938:	add	r8, r8, #1
   1493c:	add	r9, r9, #80	; 0x50
   14940:	cmp	r8, r0
   14944:	bcc	147d8 <__assert_fail@plt+0x31f0>
   14948:	movw	r0, #61760	; 0xf140
   1494c:	ldr	r8, [sp, #76]	; 0x4c
   14950:	ldr	r7, [sp, #48]	; 0x30
   14954:	movt	r0, #2
   14958:	ldr	r0, [r0]
   1495c:	cmp	r0, #2
   14960:	ldreq	r1, [sp, #104]	; 0x68
   14964:	eoreq	r1, r1, #1
   14968:	tsteq	r1, #1
   1496c:	beq	15124 <__assert_fail@plt+0x3b3c>
   14970:	ldr	r1, [sp, #100]	; 0x64
   14974:	subs	r0, r0, #2
   14978:	str	r5, [sp, #112]	; 0x70
   1497c:	movwne	r0, #1
   14980:	orr	r0, r1, r0
   14984:	tst	r0, #1
   14988:	beq	15360 <__assert_fail@plt+0x3d78>
   1498c:	add	r0, r8, r8, lsl #2
   14990:	add	r8, r6, #96	; 0x60
   14994:	mov	r5, #0
   14998:	mov	r4, r7
   1499c:	sub	r9, fp, #72	; 0x48
   149a0:	add	r0, r7, r0, lsl #4
   149a4:	sub	r0, r0, #80	; 0x50
   149a8:	str	r0, [fp, #-72]	; 0xffffffb8
   149ac:	ldrb	r0, [r4, #44]	; 0x2c
   149b0:	cmp	r0, #0
   149b4:	bne	14a3c <__assert_fail@plt+0x3454>
   149b8:	movw	r0, #61760	; 0xf140
   149bc:	movt	r0, #2
   149c0:	ldr	r0, [r0]
   149c4:	cmp	r0, #1
   149c8:	bne	149dc <__assert_fail@plt+0x33f4>
   149cc:	mov	r0, r4
   149d0:	mov	r1, #0
   149d4:	bl	15ef0 <__assert_fail@plt+0x4908>
   149d8:	b	14a30 <__assert_fail@plt+0x3448>
   149dc:	ldr	r0, [r4, #48]	; 0x30
   149e0:	cmn	r0, #1
   149e4:	beq	14a30 <__assert_fail@plt+0x3448>
   149e8:	ldr	r1, [r4]
   149ec:	mov	r0, #3
   149f0:	mov	r2, r6
   149f4:	bl	11594 <__xstat64@plt>
   149f8:	cmp	r0, #0
   149fc:	bne	14a30 <__assert_fail@plt+0x3448>
   14a00:	ldrd	r0, [r4, #24]
   14a04:	ldr	r2, [sp, #128]	; 0x80
   14a08:	ldr	r3, [sp, #132]	; 0x84
   14a0c:	eor	r1, r1, r3
   14a10:	eor	r0, r0, r2
   14a14:	orrs	r0, r0, r1
   14a18:	ldrdeq	r0, [r8]
   14a1c:	ldrdeq	r2, [r4, #32]
   14a20:	eoreq	r1, r3, r1
   14a24:	eoreq	r0, r2, r0
   14a28:	orrseq	r0, r0, r1
   14a2c:	bne	14b28 <__assert_fail@plt+0x3540>
   14a30:	mov	r0, r4
   14a34:	mov	r1, r9
   14a38:	bl	167f8 <__assert_fail@plt+0x5210>
   14a3c:	ldr	r0, [sp, #76]	; 0x4c
   14a40:	add	r5, r5, #1
   14a44:	add	r4, r4, #80	; 0x50
   14a48:	cmp	r5, r0
   14a4c:	bcc	149ac <__assert_fail@plt+0x33c4>
   14a50:	vldr	d16, [pc, #624]	; 14cc8 <__assert_fail@plt+0x36e0>
   14a54:	str	sl, [sp, #64]	; 0x40
   14a58:	vmul.f64	d16, d8, d16
   14a5c:	vcvt.s32.f64	s0, d16
   14a60:	vcvt.f64.s32	d17, s0
   14a64:	ldr	r0, [sp, #112]	; 0x70
   14a68:	vmov	r4, s0
   14a6c:	vcmpe.f64	d16, d17
   14a70:	vmrs	APSR_nzcv, fpscr
   14a74:	addgt	r4, r4, #1
   14a78:	add	r0, r0, #17
   14a7c:	str	r0, [sp, #72]	; 0x48
   14a80:	bl	1ada4 <__assert_fail@plt+0x97bc>
   14a84:	ldr	r7, [sp, #48]	; 0x30
   14a88:	vldr	d9, [pc, #576]	; 14cd0 <__assert_fail@plt+0x36e8>
   14a8c:	mov	r9, r0
   14a90:	mov	r6, #0
   14a94:	mov	sl, #0
   14a98:	str	r4, [sp, #80]	; 0x50
   14a9c:	add	r0, r7, #64	; 0x40
   14aa0:	str	r0, [sp, #92]	; 0x5c
   14aa4:	mov	r0, #3
   14aa8:	str	r0, [sp, #60]	; 0x3c
   14aac:	b	14bd8 <__assert_fail@plt+0x35f0>
   14ab0:	bl	114b0 <__errno_location@plt>
   14ab4:	b	15148 <__assert_fail@plt+0x3b60>
   14ab8:	bl	114b0 <__errno_location@plt>
   14abc:	ldr	r4, [r0]
   14ac0:	cmp	r4, #28
   14ac4:	bne	14af0 <__assert_fail@plt+0x3508>
   14ac8:	movw	r1, #56236	; 0xdbac
   14acc:	mov	r0, #0
   14ad0:	mov	r2, #5
   14ad4:	movt	r1, #1
   14ad8:	bl	11354 <dcgettext@plt>
   14adc:	mov	r2, r0
   14ae0:	mov	r0, #0
   14ae4:	mov	r1, #0
   14ae8:	bl	113f0 <error@plt>
   14aec:	b	14b9c <__assert_fail@plt+0x35b4>
   14af0:	movw	r1, #56200	; 0xdb88
   14af4:	mov	r0, #0
   14af8:	mov	r2, #5
   14afc:	movt	r1, #1
   14b00:	bl	11354 <dcgettext@plt>
   14b04:	ldr	r1, [r9, #-68]	; 0xffffffbc
   14b08:	mov	r6, r0
   14b0c:	mov	r0, #4
   14b10:	bl	19fe4 <__assert_fail@plt+0x89fc>
   14b14:	mov	r3, r0
   14b18:	mov	r0, #0
   14b1c:	mov	r1, r4
   14b20:	mov	r2, r6
   14b24:	b	14b98 <__assert_fail@plt+0x35b0>
   14b28:	bl	114b0 <__errno_location@plt>
   14b2c:	ldr	r6, [r0]
   14b30:	movw	r1, #56280	; 0xdbd8
   14b34:	mov	r0, #0
   14b38:	mov	r2, #5
   14b3c:	movt	r1, #1
   14b40:	bl	11354 <dcgettext@plt>
   14b44:	ldr	r4, [r4]
   14b48:	movw	r1, #55146	; 0xd76a
   14b4c:	mov	r7, r0
   14b50:	movt	r1, #1
   14b54:	mov	r0, r4
   14b58:	bl	112b8 <strcmp@plt>
   14b5c:	cmp	r0, #0
   14b60:	bne	14b7c <__assert_fail@plt+0x3594>
   14b64:	movw	r1, #55943	; 0xda87
   14b68:	mov	r0, #0
   14b6c:	mov	r2, #5
   14b70:	movt	r1, #1
   14b74:	bl	11354 <dcgettext@plt>
   14b78:	mov	r4, r0
   14b7c:	mov	r0, #4
   14b80:	mov	r1, r4
   14b84:	bl	19fe4 <__assert_fail@plt+0x89fc>
   14b88:	mov	r3, r0
   14b8c:	mov	r0, #0
   14b90:	mov	r1, r6
   14b94:	mov	r2, r7
   14b98:	bl	113f0 <error@plt>
   14b9c:	ldr	r8, [sp, #76]	; 0x4c
   14ba0:	ldr	r7, [sp, #48]	; 0x30
   14ba4:	b	15124 <__assert_fail@plt+0x3b3c>
   14ba8:	ldr	r1, [sp, #72]	; 0x48
   14bac:	ldr	r0, [sp, #88]	; 0x58
   14bb0:	lsl	r1, r1, #1
   14bb4:	str	r1, [sp, #72]	; 0x48
   14bb8:	bl	1adec <__assert_fail@plt+0x9804>
   14bbc:	mov	r9, r0
   14bc0:	ldr	r0, [sp, #60]	; 0x3c
   14bc4:	ldr	r7, [sp, #48]	; 0x30
   14bc8:	ldr	r4, [sp, #80]	; 0x50
   14bcc:	mov	r6, #0
   14bd0:	sub	r0, r0, #1
   14bd4:	str	r0, [sp, #60]	; 0x3c
   14bd8:	ldr	r5, [sp, #116]	; 0x74
   14bdc:	mov	r0, #0
   14be0:	str	r9, [sp, #88]	; 0x58
   14be4:	str	r0, [sp, #96]	; 0x60
   14be8:	mov	r0, #0
   14bec:	str	r0, [sp, #104]	; 0x68
   14bf0:	b	14c00 <__assert_fail@plt+0x3618>
   14bf4:	mov	r0, r8
   14bf8:	mov	r1, #0
   14bfc:	bl	15ef0 <__assert_fail@plt+0x4908>
   14c00:	movw	r0, #61760	; 0xf140
   14c04:	movt	r0, #2
   14c08:	ldr	r0, [r0]
   14c0c:	cmp	r0, #1
   14c10:	bne	14c38 <__assert_fail@plt+0x3650>
   14c14:	movw	r0, #61902	; 0xf1ce
   14c18:	movt	r0, #2
   14c1c:	ldrb	r0, [r0]
   14c20:	cmp	r0, #0
   14c24:	bne	14c38 <__assert_fail@plt+0x3650>
   14c28:	ldr	r0, [sp, #108]	; 0x6c
   14c2c:	bl	17520 <__assert_fail@plt+0x5f38>
   14c30:	cmp	r0, #0
   14c34:	beq	15328 <__assert_fail@plt+0x3d40>
   14c38:	ldr	r0, [sp, #96]	; 0x60
   14c3c:	ldr	r1, [sp, #104]	; 0x68
   14c40:	ldr	r8, [sp, #76]	; 0x4c
   14c44:	cmp	r0, r1
   14c48:	bls	14c54 <__assert_fail@plt+0x366c>
   14c4c:	mov	r0, r1
   14c50:	b	14d50 <__assert_fail@plt+0x3768>
   14c54:	movw	r0, #61896	; 0xf1c8
   14c58:	movt	r0, #2
   14c5c:	ldr	r0, [r0]
   14c60:	cmp	r0, #0
   14c64:	beq	14cd8 <__assert_fail@plt+0x36f0>
   14c68:	tst	sl, #1
   14c6c:	bne	1531c <__assert_fail@plt+0x3d34>
   14c70:	mov	r1, #0
   14c74:	mov	sl, #0
   14c78:	bl	11450 <kill@plt>
   14c7c:	cmp	r0, #0
   14c80:	beq	14c94 <__assert_fail@plt+0x36ac>
   14c84:	bl	114b0 <__errno_location@plt>
   14c88:	ldr	r0, [r0]
   14c8c:	subs	sl, r0, #1
   14c90:	movwne	sl, #1
   14c94:	vcmpe.f64	d8, #0.0
   14c98:	mov	r0, #0
   14c9c:	mov	r2, r4
   14ca0:	vmrs	APSR_nzcv, fpscr
   14ca4:	vcmpe.f64	d8, d9
   14ca8:	movwls	r0, #1
   14cac:	orrs	r0, r0, sl
   14cb0:	eor	r0, r0, #1
   14cb4:	rsb	r0, r0, #0
   14cb8:	movne	r2, r0
   14cbc:	vmrs	APSR_nzcv, fpscr
   14cc0:	movpl	r2, r0
   14cc4:	b	14cdc <__assert_fail@plt+0x36f4>
   14cc8:	andeq	r0, r0, r0
   14ccc:	addmi	r4, pc, r0
   14cd0:	andeq	r0, r0, r0
   14cd4:	cmpmi	r0, sp, asr #4
   14cd8:	mvn	r2, #0
   14cdc:	mov	r0, #1
   14ce0:	strh	r0, [sp, #132]	; 0x84
   14ce4:	str	r5, [sp, #128]	; 0x80
   14ce8:	str	r0, [sp, #136]	; 0x88
   14cec:	movw	r0, #61900	; 0xf1cc
   14cf0:	str	r6, [sp, #140]	; 0x8c
   14cf4:	movt	r0, #2
   14cf8:	ldrb	r0, [r0]
   14cfc:	add	r0, r0, #1
   14d00:	uxtb	r1, r0
   14d04:	add	r0, sp, #128	; 0x80
   14d08:	bl	1139c <poll@plt>
   14d0c:	cmp	r0, #0
   14d10:	beq	14c54 <__assert_fail@plt+0x366c>
   14d14:	cmn	r0, #1
   14d18:	ble	1534c <__assert_fail@plt+0x3d64>
   14d1c:	ldrh	r0, [sp, #142]	; 0x8e
   14d20:	cmp	r0, #0
   14d24:	bne	152d8 <__assert_fail@plt+0x3cf0>
   14d28:	ldr	r2, [sp, #72]	; 0x48
   14d2c:	mov	r0, r5
   14d30:	mov	r1, r9
   14d34:	bl	1a644 <__assert_fail@plt+0x905c>
   14d38:	cmp	r0, #0
   14d3c:	beq	150d0 <__assert_fail@plt+0x3ae8>
   14d40:	cmn	r0, #1
   14d44:	beq	150e0 <__assert_fail@plt+0x3af8>
   14d48:	str	r0, [sp, #96]	; 0x60
   14d4c:	mov	r0, #0
   14d50:	mov	ip, r0
   14d54:	add	r0, r9, r0
   14d58:	ldr	r1, [r0, #4]
   14d5c:	str	r0, [sp, #112]	; 0x70
   14d60:	ldr	r0, [r0, #12]
   14d64:	cmp	r0, #0
   14d68:	str	r1, [sp, #100]	; 0x64
   14d6c:	bne	14da8 <__assert_fail@plt+0x37c0>
   14d70:	ldr	r1, [sp, #100]	; 0x64
   14d74:	ands	r1, r1, #1024	; 0x400
   14d78:	beq	14da8 <__assert_fail@plt+0x37c0>
   14d7c:	ldr	r1, [sp, #112]	; 0x70
   14d80:	ldr	r3, [sp, #92]	; 0x5c
   14d84:	mov	r2, #0
   14d88:	ldr	r1, [r1]
   14d8c:	ldr	r5, [r3]
   14d90:	cmp	r1, r5
   14d94:	beq	15100 <__assert_fail@plt+0x3b18>
   14d98:	add	r2, r2, #1
   14d9c:	add	r3, r3, #80	; 0x50
   14da0:	cmp	r2, r8
   14da4:	bcc	14d8c <__assert_fail@plt+0x37a4>
   14da8:	add	r1, ip, r0
   14dac:	cmp	r0, #0
   14db0:	add	r1, r1, #16
   14db4:	str	r1, [sp, #104]	; 0x68
   14db8:	beq	14f88 <__assert_fail@plt+0x39a0>
   14dbc:	ldr	r4, [sp, #112]	; 0x70
   14dc0:	ldr	r5, [sp, #92]	; 0x5c
   14dc4:	mov	r8, #0
   14dc8:	ldr	r9, [r4], #16
   14dcc:	ldr	r0, [r5]
   14dd0:	cmp	r0, r9
   14dd4:	bne	14df4 <__assert_fail@plt+0x380c>
   14dd8:	ldr	r0, [r5, #-64]	; 0xffffffc0
   14ddc:	ldr	r1, [r5, #4]
   14de0:	add	r1, r0, r1
   14de4:	mov	r0, r4
   14de8:	bl	112b8 <strcmp@plt>
   14dec:	cmp	r0, #0
   14df0:	beq	14e08 <__assert_fail@plt+0x3820>
   14df4:	ldr	r0, [sp, #76]	; 0x4c
   14df8:	add	r8, r8, #1
   14dfc:	add	r5, r5, #80	; 0x50
   14e00:	cmp	r8, r0
   14e04:	bcc	14dcc <__assert_fail@plt+0x37e4>
   14e08:	ldr	r0, [sp, #76]	; 0x4c
   14e0c:	ldr	r7, [sp, #48]	; 0x30
   14e10:	ldr	r5, [sp, #116]	; 0x74
   14e14:	ldr	r4, [sp, #80]	; 0x50
   14e18:	ldr	r9, [sp, #88]	; 0x58
   14e1c:	mov	r6, #0
   14e20:	cmp	r8, r0
   14e24:	beq	14c00 <__assert_fail@plt+0x3618>
   14e28:	add	r8, r8, r8, lsl #2
   14e2c:	add	r0, r7, r8, lsl #4
   14e30:	str	r0, [sp, #68]	; 0x44
   14e34:	ldr	r0, [sp, #100]	; 0x64
   14e38:	tst	r0, #512	; 0x200
   14e3c:	bne	14f58 <__assert_fail@plt+0x3970>
   14e40:	ldr	r0, [sp, #68]	; 0x44
   14e44:	ldr	r2, [sp, #64]	; 0x40
   14e48:	ldr	r1, [r0]
   14e4c:	mov	r0, r5
   14e50:	bl	114a4 <inotify_add_watch@plt>
   14e54:	cmn	r0, #1
   14e58:	bgt	14ec8 <__assert_fail@plt+0x38e0>
   14e5c:	str	r0, [sp, #100]	; 0x64
   14e60:	bl	114b0 <__errno_location@plt>
   14e64:	ldr	r4, [r0]
   14e68:	orr	r0, r4, #16
   14e6c:	cmp	r0, #28
   14e70:	beq	14ac8 <__assert_fail@plt+0x34e0>
   14e74:	movw	r1, #56264	; 0xdbc8
   14e78:	mov	r0, #0
   14e7c:	mov	r2, #5
   14e80:	movt	r1, #1
   14e84:	bl	11354 <dcgettext@plt>
   14e88:	mov	r5, r0
   14e8c:	ldr	r0, [sp, #68]	; 0x44
   14e90:	ldr	r1, [r0]
   14e94:	mov	r0, #4
   14e98:	bl	19fe4 <__assert_fail@plt+0x89fc>
   14e9c:	mov	r3, r0
   14ea0:	mov	r0, #0
   14ea4:	mov	r1, r4
   14ea8:	mov	r2, r5
   14eac:	bl	113f0 <error@plt>
   14eb0:	ldr	r7, [sp, #48]	; 0x30
   14eb4:	ldr	r5, [sp, #116]	; 0x74
   14eb8:	ldr	r4, [sp, #80]	; 0x50
   14ebc:	ldr	r9, [sp, #88]	; 0x58
   14ec0:	ldr	r0, [sp, #100]	; 0x64
   14ec4:	mov	r6, #0
   14ec8:	add	r8, r7, r8, lsl #4
   14ecc:	ldr	r1, [r8, #60]!	; 0x3c
   14ed0:	cmp	r1, #0
   14ed4:	blt	14ee0 <__assert_fail@plt+0x38f8>
   14ed8:	cmp	r0, r1
   14edc:	beq	14f58 <__assert_fail@plt+0x3970>
   14ee0:	cmp	r1, #0
   14ee4:	str	r0, [sp, #100]	; 0x64
   14ee8:	blt	14f00 <__assert_fail@plt+0x3918>
   14eec:	mov	r0, r5
   14ef0:	bl	115ac <inotify_rm_watch@plt>
   14ef4:	ldr	r0, [sp, #108]	; 0x6c
   14ef8:	ldr	r1, [sp, #68]	; 0x44
   14efc:	bl	1851c <__assert_fail@plt+0x6f34>
   14f00:	ldr	r0, [sp, #100]	; 0x64
   14f04:	str	r0, [r8]
   14f08:	ldr	r8, [sp, #68]	; 0x44
   14f0c:	cmn	r0, #1
   14f10:	beq	14c00 <__assert_fail@plt+0x3618>
   14f14:	ldr	r0, [sp, #108]	; 0x6c
   14f18:	mov	r1, r8
   14f1c:	bl	1851c <__assert_fail@plt+0x6f34>
   14f20:	cmp	r0, #0
   14f24:	movne	r4, r0
   14f28:	cmpne	r8, r0
   14f2c:	bne	15008 <__assert_fail@plt+0x3a20>
   14f30:	ldr	r0, [sp, #108]	; 0x6c
   14f34:	mov	r1, r8
   14f38:	bl	184dc <__assert_fail@plt+0x6ef4>
   14f3c:	ldr	r7, [sp, #48]	; 0x30
   14f40:	ldr	r5, [sp, #116]	; 0x74
   14f44:	ldr	r4, [sp, #80]	; 0x50
   14f48:	ldr	r9, [sp, #88]	; 0x58
   14f4c:	cmp	r0, #0
   14f50:	mov	r6, #0
   14f54:	beq	15324 <__assert_fail@plt+0x3d3c>
   14f58:	movw	r0, #61760	; 0xf140
   14f5c:	movt	r0, #2
   14f60:	ldr	r0, [r0]
   14f64:	cmp	r0, #1
   14f68:	bne	14fb4 <__assert_fail@plt+0x39cc>
   14f6c:	ldr	r8, [sp, #68]	; 0x44
   14f70:	mov	r1, #0
   14f74:	mov	r0, r8
   14f78:	bl	15ef0 <__assert_fail@plt+0x4908>
   14f7c:	cmp	r8, #0
   14f80:	beq	14c00 <__assert_fail@plt+0x3618>
   14f84:	b	14fc0 <__assert_fail@plt+0x39d8>
   14f88:	ldr	r0, [sp, #112]	; 0x70
   14f8c:	add	r1, sp, #128	; 0x80
   14f90:	ldr	r0, [r0]
   14f94:	str	r0, [sp, #188]	; 0xbc
   14f98:	ldr	r0, [sp, #108]	; 0x6c
   14f9c:	bl	176e8 <__assert_fail@plt+0x6100>
   14fa0:	ldr	r5, [sp, #116]	; 0x74
   14fa4:	mov	r8, r0
   14fa8:	cmp	r8, #0
   14fac:	beq	14c00 <__assert_fail@plt+0x3618>
   14fb0:	b	14fc0 <__assert_fail@plt+0x39d8>
   14fb4:	ldr	r8, [sp, #68]	; 0x44
   14fb8:	cmp	r8, #0
   14fbc:	beq	14c00 <__assert_fail@plt+0x3618>
   14fc0:	ldr	r0, [sp, #112]	; 0x70
   14fc4:	movw	r1, #3588	; 0xe04
   14fc8:	ldr	r0, [r0, #4]
   14fcc:	tst	r0, r1
   14fd0:	beq	14ff8 <__assert_fail@plt+0x3a10>
   14fd4:	tst	r0, #1024	; 0x400
   14fd8:	beq	14bf4 <__assert_fail@plt+0x360c>
   14fdc:	ldr	r1, [r8, #60]	; 0x3c
   14fe0:	mov	r0, r5
   14fe4:	bl	115ac <inotify_rm_watch@plt>
   14fe8:	ldr	r0, [sp, #108]	; 0x6c
   14fec:	mov	r1, r8
   14ff0:	bl	1851c <__assert_fail@plt+0x6f34>
   14ff4:	b	14bf4 <__assert_fail@plt+0x360c>
   14ff8:	mov	r0, r8
   14ffc:	sub	r1, fp, #72	; 0x48
   15000:	bl	167f8 <__assert_fail@plt+0x5210>
   15004:	b	14c00 <__assert_fail@plt+0x3618>
   15008:	movw	r0, #61760	; 0xf140
   1500c:	movt	r0, #2
   15010:	ldr	r0, [r0]
   15014:	cmp	r0, #1
   15018:	bne	15028 <__assert_fail@plt+0x3a40>
   1501c:	mov	r0, r4
   15020:	mov	r1, #0
   15024:	bl	15ef0 <__assert_fail@plt+0x4908>
   15028:	mvn	r0, #0
   1502c:	movw	r1, #55146	; 0xd76a
   15030:	str	r0, [r4, #60]	; 0x3c
   15034:	movt	r1, #1
   15038:	ldr	r5, [r4]
   1503c:	ldr	r4, [r4, #48]	; 0x30
   15040:	mov	r0, r5
   15044:	bl	112b8 <strcmp@plt>
   15048:	cmp	r0, #0
   1504c:	bne	15068 <__assert_fail@plt+0x3a80>
   15050:	movw	r1, #55943	; 0xda87
   15054:	mov	r0, #0
   15058:	mov	r2, #5
   1505c:	movt	r1, #1
   15060:	bl	11354 <dcgettext@plt>
   15064:	mov	r5, r0
   15068:	ldr	r8, [sp, #68]	; 0x44
   1506c:	add	r0, r4, #1
   15070:	cmp	r0, #2
   15074:	bcc	14f30 <__assert_fail@plt+0x3948>
   15078:	mov	r0, r4
   1507c:	bl	115d0 <close@plt>
   15080:	cmp	r0, #0
   15084:	beq	14f30 <__assert_fail@plt+0x3948>
   15088:	bl	114b0 <__errno_location@plt>
   1508c:	ldr	r6, [r0]
   15090:	movw	r1, #56114	; 0xdb32
   15094:	mov	r0, #0
   15098:	mov	r2, #5
   1509c:	movt	r1, #1
   150a0:	bl	11354 <dcgettext@plt>
   150a4:	mov	r7, r0
   150a8:	mov	r0, #4
   150ac:	mov	r1, r5
   150b0:	bl	19fe4 <__assert_fail@plt+0x89fc>
   150b4:	mov	r3, r0
   150b8:	mov	r0, #0
   150bc:	mov	r1, r6
   150c0:	mov	r2, r7
   150c4:	str	r4, [sp]
   150c8:	bl	113f0 <error@plt>
   150cc:	b	14f30 <__assert_fail@plt+0x3948>
   150d0:	ldr	r0, [sp, #60]	; 0x3c
   150d4:	cmp	r0, #0
   150d8:	bne	14ba8 <__assert_fail@plt+0x35c0>
   150dc:	b	15368 <__assert_fail@plt+0x3d80>
   150e0:	bl	114b0 <__errno_location@plt>
   150e4:	ldr	r4, [r0]
   150e8:	ldr	r0, [sp, #60]	; 0x3c
   150ec:	cmp	r0, #0
   150f0:	beq	15370 <__assert_fail@plt+0x3d88>
   150f4:	cmp	r4, #22
   150f8:	beq	14ba8 <__assert_fail@plt+0x35c0>
   150fc:	b	15370 <__assert_fail@plt+0x3d88>
   15100:	movw	r1, #56387	; 0xdc43
   15104:	mov	r0, #0
   15108:	mov	r2, #5
   1510c:	movt	r1, #1
   15110:	bl	11354 <dcgettext@plt>
   15114:	mov	r2, r0
   15118:	mov	r0, #0
   1511c:	mov	r1, #0
   15120:	bl	113f0 <error@plt>
   15124:	ldr	r0, [sp, #108]	; 0x6c
   15128:	bl	17c90 <__assert_fail@plt+0x66a8>
   1512c:	ldr	r0, [sp, #116]	; 0x74
   15130:	bl	115d0 <close@plt>
   15134:	bl	114b0 <__errno_location@plt>
   15138:	movw	r5, #61901	; 0xf1cd
   1513c:	mov	r1, #0
   15140:	str	r1, [r0]
   15144:	movt	r5, #2
   15148:	ldr	r4, [r0]
   1514c:	movw	r1, #54644	; 0xd574
   15150:	mov	r0, #0
   15154:	mov	r2, #5
   15158:	movt	r1, #1
   1515c:	bl	11354 <dcgettext@plt>
   15160:	mov	r2, r0
   15164:	mov	r0, #0
   15168:	mov	r1, r4
   1516c:	bl	113f0 <error@plt>
   15170:	b	1402c <__assert_fail@plt+0x2a44>
   15174:	movw	r1, #55419	; 0xd87b
   15178:	mov	r0, #0
   1517c:	mov	r2, #5
   15180:	movt	r1, #1
   15184:	bl	11354 <dcgettext@plt>
   15188:	mov	r2, r0
   1518c:	mov	r0, #1
   15190:	mov	r1, #0
   15194:	mov	r3, r8
   15198:	bl	113f0 <error@plt>
   1519c:	mov	r0, #1
   151a0:	bl	116e8 <__assert_fail@plt+0x100>
   151a4:	movw	r0, #61776	; 0xf150
   151a8:	movw	r2, #55406	; 0xd86e
   151ac:	movw	r7, #55389	; 0xd85d
   151b0:	movw	r6, #55373	; 0xd84d
   151b4:	movw	r5, #55362	; 0xd842
   151b8:	mov	r1, #0
   151bc:	movt	r0, #2
   151c0:	movt	r2, #1
   151c4:	movt	r7, #1
   151c8:	movt	r6, #1
   151cc:	movt	r5, #1
   151d0:	ldr	r3, [r0]
   151d4:	movw	r0, #61876	; 0xf1b4
   151d8:	movt	r0, #2
   151dc:	ldr	r0, [r0]
   151e0:	stm	sp, {r5, r6, r7}
   151e4:	str	r2, [sp, #12]
   151e8:	movw	r2, #54938	; 0xd69a
   151ec:	str	r1, [sp, #16]
   151f0:	movw	r1, #54500	; 0xd4e4
   151f4:	movt	r1, #1
   151f8:	movt	r2, #1
   151fc:	bl	1ab70 <__assert_fail@plt+0x9588>
   15200:	mov	r0, #0
   15204:	bl	11468 <exit@plt>
   15208:	mov	r0, #0
   1520c:	bl	116e8 <__assert_fail@plt+0x100>
   15210:	movw	r1, #55332	; 0xd824
   15214:	mov	r0, #0
   15218:	mov	r2, #5
   1521c:	movt	r1, #1
   15220:	bl	11354 <dcgettext@plt>
   15224:	mov	r4, r0
   15228:	ldr	r0, [r6]
   1522c:	bl	1a50c <__assert_fail@plt+0x8f24>
   15230:	b	15298 <__assert_fail@plt+0x3cb0>
   15234:	movw	r1, #56808	; 0xdde8
   15238:	mov	r0, #0
   1523c:	mov	r2, #5
   15240:	movt	r1, #1
   15244:	bl	11354 <dcgettext@plt>
   15248:	mov	r4, r0
   1524c:	mov	r0, #0
   15250:	mov	r1, #3
   15254:	mov	r2, sl
   15258:	bl	1a260 <__assert_fail@plt+0x8c78>
   1525c:	mov	r3, r0
   15260:	mov	r0, #1
   15264:	mov	r1, r8
   15268:	mov	r2, r4
   1526c:	bl	113f0 <error@plt>
   15270:	movw	r1, #54529	; 0xd501
   15274:	mov	r0, #0
   15278:	mov	r2, #5
   1527c:	movt	r1, #1
   15280:	bl	11354 <dcgettext@plt>
   15284:	movw	r1, #55146	; 0xd76a
   15288:	mov	r4, r0
   1528c:	mov	r0, #4
   15290:	movt	r1, #1
   15294:	bl	19fe4 <__assert_fail@plt+0x89fc>
   15298:	mov	r3, r0
   1529c:	mov	r0, #1
   152a0:	mov	r1, #0
   152a4:	mov	r2, r4
   152a8:	bl	113f0 <error@plt>
   152ac:	bl	114b0 <__errno_location@plt>
   152b0:	ldr	r4, [r0]
   152b4:	movw	r1, #54632	; 0xd568
   152b8:	movt	r1, #1
   152bc:	b	15300 <__assert_fail@plt+0x3d18>
   152c0:	bl	114b0 <__errno_location@plt>
   152c4:	ldr	r1, [r0]
   152c8:	movw	r2, #55146	; 0xd76a
   152cc:	mov	r0, #1
   152d0:	movt	r2, #1
   152d4:	bl	113f0 <error@plt>
   152d8:	bl	16a64 <__assert_fail@plt+0x547c>
   152dc:	bl	114b0 <__errno_location@plt>
   152e0:	ldr	r4, [r0]
   152e4:	movw	r1, #56843	; 0xde0b
   152e8:	movt	r1, #1
   152ec:	b	15300 <__assert_fail@plt+0x3d18>
   152f0:	bl	114b0 <__errno_location@plt>
   152f4:	ldr	r4, [r0]
   152f8:	movw	r1, #54616	; 0xd558
   152fc:	movt	r1, #1
   15300:	mov	r0, #0
   15304:	mov	r2, #5
   15308:	bl	11354 <dcgettext@plt>
   1530c:	mov	r2, r0
   15310:	mov	r0, #1
   15314:	mov	r1, r4
   15318:	bl	113f0 <error@plt>
   1531c:	mov	r0, #0
   15320:	bl	11468 <exit@plt>
   15324:	bl	1b304 <__assert_fail@plt+0x9d1c>
   15328:	movw	r1, #56296	; 0xdbe8
   1532c:	mov	r0, #0
   15330:	mov	r2, #5
   15334:	movt	r1, #1
   15338:	bl	11354 <dcgettext@plt>
   1533c:	mov	r2, r0
   15340:	mov	r0, #1
   15344:	mov	r1, #0
   15348:	bl	113f0 <error@plt>
   1534c:	bl	114b0 <__errno_location@plt>
   15350:	ldr	r4, [r0]
   15354:	movw	r1, #56315	; 0xdbfb
   15358:	movt	r1, #1
   1535c:	b	15300 <__assert_fail@plt+0x3d18>
   15360:	mov	r0, #1
   15364:	bl	11468 <exit@plt>
   15368:	bl	114b0 <__errno_location@plt>
   1536c:	ldr	r4, [r0]
   15370:	movw	r1, #56359	; 0xdc27
   15374:	movt	r1, #1
   15378:	b	15300 <__assert_fail@plt+0x3d18>
   1537c:	push	{r4, r5, r6, r7, fp, lr}
   15380:	add	fp, sp, #16
   15384:	sub	sp, sp, #88	; 0x58
   15388:	mov	r5, r1
   1538c:	mov	r1, sp
   15390:	bl	11288 <fstatfs64@plt>
   15394:	cmp	r0, #0
   15398:	beq	153ec <__assert_fail@plt+0x3e04>
   1539c:	bl	114b0 <__errno_location@plt>
   153a0:	ldr	r6, [r0]
   153a4:	mov	r4, #1
   153a8:	cmp	r6, #38	; 0x26
   153ac:	beq	15bf0 <__assert_fail@plt+0x4608>
   153b0:	movw	r1, #56133	; 0xdb45
   153b4:	mov	r0, #0
   153b8:	mov	r2, #5
   153bc:	movt	r1, #1
   153c0:	bl	11354 <dcgettext@plt>
   153c4:	mov	r7, r0
   153c8:	mov	r0, #4
   153cc:	mov	r1, r5
   153d0:	bl	19fe4 <__assert_fail@plt+0x89fc>
   153d4:	mov	r3, r0
   153d8:	mov	r0, #0
   153dc:	mov	r1, r6
   153e0:	mov	r2, r7
   153e4:	bl	113f0 <error@plt>
   153e8:	b	15bf0 <__assert_fail@plt+0x4608>
   153ec:	ldr	r0, [sp]
   153f0:	movw	r1, #63411	; 0xf7b3
   153f4:	mov	r4, #0
   153f8:	movt	r1, #303	; 0x12f
   153fc:	cmp	r0, r1
   15400:	ble	1545c <__assert_fail@plt+0x3e74>
   15404:	movw	r1, #12620	; 0x314c
   15408:	movt	r1, #21318	; 0x5346
   1540c:	cmp	r0, r1
   15410:	bgt	154c8 <__assert_fail@plt+0x3ee0>
   15414:	movw	r1, #15684	; 0x3d44
   15418:	movt	r1, #10445	; 0x28cd
   1541c:	cmp	r0, r1
   15420:	bgt	15574 <__assert_fail@plt+0x3f8c>
   15424:	movw	r1, #30803	; 0x7853
   15428:	movt	r1, #4400	; 0x1130
   1542c:	cmp	r0, r1
   15430:	bgt	156a8 <__assert_fail@plt+0x40c0>
   15434:	movw	r1, #22560	; 0x5820
   15438:	movt	r1, #1893	; 0x765
   1543c:	cmp	r0, r1
   15440:	bgt	15884 <__assert_fail@plt+0x429c>
   15444:	movw	r1, #2124	; 0x84c
   15448:	movt	r1, #65232	; 0xfed0
   1544c:	add	r0, r0, r1
   15450:	cmp	r0, #4
   15454:	movcs	r4, #1
   15458:	b	15bf0 <__assert_fail@plt+0x4608>
   1545c:	movw	r1, #16963	; 0x4243
   15460:	cmp	r0, r1
   15464:	bgt	1552c <__assert_fail@plt+0x3f44>
   15468:	movw	r1, #390	; 0x186
   1546c:	cmp	r0, r1
   15470:	bgt	155c8 <__assert_fail@plt+0x3fe0>
   15474:	movw	r1, #33251	; 0x81e3
   15478:	movt	r1, #56926	; 0xde5e
   1547c:	cmp	r0, r1
   15480:	bgt	156ec <__assert_fail@plt+0x4104>
   15484:	movw	r1, #6515	; 0x1973
   15488:	movt	r1, #43962	; 0xabba
   1548c:	cmp	r0, r1
   15490:	ble	158b4 <__assert_fail@plt+0x42cc>
   15494:	movw	r1, #33127	; 0x8167
   15498:	movt	r1, #51582	; 0xc97e
   1549c:	cmp	r0, r1
   154a0:	bgt	15b2c <__assert_fail@plt+0x4544>
   154a4:	movw	r1, #6516	; 0x1974
   154a8:	movt	r1, #43962	; 0xabba
   154ac:	cmp	r0, r1
   154b0:	beq	15bf0 <__assert_fail@plt+0x4608>
   154b4:	movw	r1, #5520	; 0x1590
   154b8:	movt	r1, #51031	; 0xc757
   154bc:	cmp	r0, r1
   154c0:	beq	15bf0 <__assert_fail@plt+0x4608>
   154c4:	b	15bfc <__assert_fail@plt+0x4614>
   154c8:	movw	r1, #25967	; 0x656f
   154cc:	movt	r1, #25189	; 0x6265
   154d0:	cmp	r0, r1
   154d4:	bgt	15614 <__assert_fail@plt+0x402c>
   154d8:	movw	r1, #22568	; 0x5828
   154dc:	movt	r1, #22569	; 0x5829
   154e0:	cmp	r0, r1
   154e4:	ble	15728 <__assert_fail@plt+0x4140>
   154e8:	movw	r1, #18002	; 0x4652
   154ec:	movt	r1, #23119	; 0x5a4f
   154f0:	cmp	r0, r1
   154f4:	ble	158e4 <__assert_fail@plt+0x42fc>
   154f8:	movw	r1, #26475	; 0x676b
   154fc:	movt	r1, #24933	; 0x6165
   15500:	cmp	r0, r1
   15504:	bgt	15b50 <__assert_fail@plt+0x4568>
   15508:	movw	r1, #18003	; 0x4653
   1550c:	movt	r1, #23119	; 0x5a4f
   15510:	cmp	r0, r1
   15514:	beq	15bf0 <__assert_fail@plt+0x4608>
   15518:	movw	r1, #11765	; 0x2df5
   1551c:	movt	r1, #24010	; 0x5dca
   15520:	cmp	r0, r1
   15524:	beq	15bf0 <__assert_fail@plt+0x4608>
   15528:	b	15bfc <__assert_fail@plt+0x4614>
   1552c:	movw	r1, #44532	; 0xadf4
   15530:	cmp	r0, r1
   15534:	bgt	15668 <__assert_fail@plt+0x4080>
   15538:	movw	r1, #29300	; 0x7274
   1553c:	cmp	r0, r1
   15540:	bgt	15768 <__assert_fail@plt+0x4180>
   15544:	movw	r1, #19779	; 0x4d43
   15548:	cmp	r0, r1
   1554c:	bgt	15914 <__assert_fail@plt+0x432c>
   15550:	movw	r1, #16964	; 0x4244
   15554:	cmp	r0, r1
   15558:	movwne	r1, #18475	; 0x482b
   1555c:	cmpne	r0, r1
   15560:	beq	15bf0 <__assert_fail@plt+0x4608>
   15564:	movw	r1, #18520	; 0x4858
   15568:	cmp	r0, r1
   1556c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15570:	b	15bfc <__assert_fail@plt+0x4614>
   15574:	movw	r1, #23890	; 0x5d52
   15578:	movt	r1, #17217	; 0x4341
   1557c:	cmp	r0, r1
   15580:	ble	15798 <__assert_fail@plt+0x41b0>
   15584:	movw	r1, #17484	; 0x444c
   15588:	movt	r1, #17741	; 0x454d
   1558c:	cmp	r0, r1
   15590:	ble	15938 <__assert_fail@plt+0x4350>
   15594:	movw	r1, #18802	; 0x4972
   15598:	movt	r1, #21093	; 0x5265
   1559c:	cmp	r0, r1
   155a0:	bgt	15b74 <__assert_fail@plt+0x458c>
   155a4:	movw	r1, #17485	; 0x444d
   155a8:	movt	r1, #17741	; 0x454d
   155ac:	cmp	r0, r1
   155b0:	beq	15bf0 <__assert_fail@plt+0x4608>
   155b4:	movw	r1, #18003	; 0x4653
   155b8:	movt	r1, #17752	; 0x4558
   155bc:	cmp	r0, r1
   155c0:	beq	15bf0 <__assert_fail@plt+0x4608>
   155c4:	b	15bfc <__assert_fail@plt+0x4614>
   155c8:	movw	r1, #9319	; 0x2467
   155cc:	cmp	r0, r1
   155d0:	bgt	157d8 <__assert_fail@plt+0x41f0>
   155d4:	movw	r1, #4978	; 0x1372
   155d8:	cmp	r0, r1
   155dc:	ble	15b14 <__assert_fail@plt+0x452c>
   155e0:	movw	r1, #4979	; 0x1373
   155e4:	sub	r1, r0, r1
   155e8:	cmp	r1, #28
   155ec:	bhi	15604 <__assert_fail@plt+0x401c>
   155f0:	movw	r3, #5121	; 0x1401
   155f4:	mov	r2, #1
   155f8:	movt	r3, #4096	; 0x1000
   155fc:	tst	r3, r2, lsl r1
   15600:	bne	15bf0 <__assert_fail@plt+0x4608>
   15604:	movw	r1, #7377	; 0x1cd1
   15608:	cmp	r0, r1
   1560c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15610:	b	15bfc <__assert_fail@plt+0x4614>
   15614:	movw	r1, #4385	; 0x1121
   15618:	movt	r1, #26649	; 0x6819
   1561c:	cmp	r0, r1
   15620:	ble	15804 <__assert_fail@plt+0x421c>
   15624:	movw	r1, #26226	; 0x6672
   15628:	movt	r1, #29539	; 0x7363
   1562c:	cmp	r0, r1
   15630:	ble	15968 <__assert_fail@plt+0x4380>
   15634:	movw	r1, #29304	; 0x7278
   15638:	movt	r1, #29554	; 0x7372
   1563c:	cmp	r0, r1
   15640:	bgt	15b98 <__assert_fail@plt+0x45b0>
   15644:	movw	r1, #26227	; 0x6673
   15648:	movt	r1, #29539	; 0x7363
   1564c:	cmp	r0, r1
   15650:	beq	15bf0 <__assert_fail@plt+0x4608>
   15654:	movw	r1, #29544	; 0x7368
   15658:	movt	r1, #29553	; 0x7371
   1565c:	cmp	r0, r1
   15660:	beq	15bf0 <__assert_fail@plt+0x4608>
   15664:	b	15bfc <__assert_fail@plt+0x4614>
   15668:	movw	r1, #57578	; 0xe0ea
   1566c:	movt	r1, #39	; 0x27
   15670:	cmp	r0, r1
   15674:	bgt	15844 <__assert_fail@plt+0x425c>
   15678:	movw	r1, #61266	; 0xef52
   1567c:	cmp	r0, r1
   15680:	bgt	15998 <__assert_fail@plt+0x43b0>
   15684:	movw	r1, #44533	; 0xadf5
   15688:	cmp	r0, r1
   1568c:	movwne	r1, #44543	; 0xadff
   15690:	cmpne	r0, r1
   15694:	beq	15bf0 <__assert_fail@plt+0x4608>
   15698:	movw	r1, #61265	; 0xef51
   1569c:	cmp	r0, r1
   156a0:	beq	15bf0 <__assert_fail@plt+0x4608>
   156a4:	b	15bfc <__assert_fail@plt+0x4614>
   156a8:	movw	r1, #513	; 0x201
   156ac:	movt	r1, #6528	; 0x1980
   156b0:	cmp	r0, r1
   156b4:	ble	159c0 <__assert_fail@plt+0x43d8>
   156b8:	movw	r1, #47791	; 0xbaaf
   156bc:	movt	r1, #8209	; 0x2011
   156c0:	cmp	r0, r1
   156c4:	bgt	15bbc <__assert_fail@plt+0x45d4>
   156c8:	movw	r1, #514	; 0x202
   156cc:	movt	r1, #6528	; 0x1980
   156d0:	cmp	r0, r1
   156d4:	beq	15bf0 <__assert_fail@plt+0x4608>
   156d8:	movw	r1, #64206	; 0xface
   156dc:	movt	r1, #7085	; 0x1bad
   156e0:	cmp	r0, r1
   156e4:	beq	15bf0 <__assert_fail@plt+0x4608>
   156e8:	b	15bfc <__assert_fail@plt+0x4614>
   156ec:	movw	r1, #65419	; 0xff8b
   156f0:	movt	r1, #63868	; 0xf97c
   156f4:	cmp	r0, r1
   156f8:	ble	159f0 <__assert_fail@plt+0x4408>
   156fc:	cmp	r0, #46	; 0x2e
   15700:	bgt	15be0 <__assert_fail@plt+0x45f8>
   15704:	movw	r1, #65420	; 0xff8c
   15708:	movt	r1, #63868	; 0xf97c
   1570c:	cmp	r0, r1
   15710:	beq	15bf0 <__assert_fail@plt+0x4608>
   15714:	movw	r1, #59465	; 0xe849
   15718:	movt	r1, #63893	; 0xf995
   1571c:	cmp	r0, r1
   15720:	beq	15bf0 <__assert_fail@plt+0x4608>
   15724:	b	15bfc <__assert_fail@plt+0x4614>
   15728:	movw	r1, #17226	; 0x434a
   1572c:	movt	r1, #21327	; 0x534f
   15730:	cmp	r0, r1
   15734:	bgt	15a20 <__assert_fail@plt+0x4438>
   15738:	movw	r1, #12621	; 0x314d
   1573c:	movt	r1, #21318	; 0x5346
   15740:	cmp	r0, r1
   15744:	movwne	r1, #18502	; 0x4846
   15748:	movtne	r1, #21318	; 0x5346
   1574c:	cmpne	r0, r1
   15750:	beq	15bf0 <__assert_fail@plt+0x4608>
   15754:	movw	r1, #21582	; 0x544e
   15758:	movt	r1, #21318	; 0x5346
   1575c:	cmp	r0, r1
   15760:	beq	15bf0 <__assert_fail@plt+0x4608>
   15764:	b	15bfc <__assert_fail@plt+0x4614>
   15768:	movw	r1, #40863	; 0x9f9f
   1576c:	cmp	r0, r1
   15770:	bgt	15a50 <__assert_fail@plt+0x4468>
   15774:	movw	r1, #29301	; 0x7275
   15778:	cmp	r0, r1
   1577c:	movwne	r1, #29366	; 0x72b6
   15780:	cmpne	r0, r1
   15784:	beq	15bf0 <__assert_fail@plt+0x4608>
   15788:	movw	r1, #38496	; 0x9660
   1578c:	cmp	r0, r1
   15790:	beq	15bf0 <__assert_fail@plt+0x4608>
   15794:	b	15bfc <__assert_fail@plt+0x4614>
   15798:	movw	r1, #17993	; 0x4649
   1579c:	movt	r1, #12627	; 0x3153
   157a0:	cmp	r0, r1
   157a4:	bgt	15a64 <__assert_fail@plt+0x447c>
   157a8:	movw	r1, #15685	; 0x3d45
   157ac:	movt	r1, #10445	; 0x28cd
   157b0:	cmp	r0, r1
   157b4:	movwne	r1, #7658	; 0x1dea
   157b8:	movtne	r1, #11181	; 0x2bad
   157bc:	cmpne	r0, r1
   157c0:	beq	15bf0 <__assert_fail@plt+0x4608>
   157c4:	movw	r1, #12225	; 0x2fc1
   157c8:	movt	r1, #12225	; 0x2fc1
   157cc:	cmp	r0, r1
   157d0:	beq	15bf0 <__assert_fail@plt+0x4608>
   157d4:	b	15bfc <__assert_fail@plt+0x4614>
   157d8:	cmp	r0, #16384	; 0x4000
   157dc:	bge	15a94 <__assert_fail@plt+0x44ac>
   157e0:	movw	r1, #9320	; 0x2468
   157e4:	cmp	r0, r1
   157e8:	movwne	r1, #9336	; 0x2478
   157ec:	cmpne	r0, r1
   157f0:	beq	15bf0 <__assert_fail@plt+0x4608>
   157f4:	movw	r1, #13364	; 0x3434
   157f8:	cmp	r0, r1
   157fc:	beq	15bf0 <__assert_fail@plt+0x4608>
   15800:	b	15bfc <__assert_fail@plt+0x4614>
   15804:	movw	r1, #26399	; 0x671f
   15808:	movt	r1, #25698	; 0x6462
   1580c:	cmp	r0, r1
   15810:	bgt	15ab4 <__assert_fail@plt+0x44cc>
   15814:	movw	r1, #25968	; 0x6570
   15818:	movt	r1, #25189	; 0x6265
   1581c:	cmp	r0, r1
   15820:	movwne	r1, #25970	; 0x6572
   15824:	movtne	r1, #25189	; 0x6265
   15828:	cmpne	r0, r1
   1582c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15830:	movw	r1, #29296	; 0x7270
   15834:	movt	r1, #25447	; 0x6367
   15838:	cmp	r0, r1
   1583c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15840:	b	15bfc <__assert_fail@plt+0x4614>
   15844:	movw	r1, #6547	; 0x1993
   15848:	movt	r1, #258	; 0x102
   1584c:	cmp	r0, r1
   15850:	bgt	15ae4 <__assert_fail@plt+0x44fc>
   15854:	movw	r1, #57579	; 0xe0eb
   15858:	movt	r1, #39	; 0x27
   1585c:	cmp	r0, r1
   15860:	movwne	r1, #19027	; 0x4a53
   15864:	movtne	r1, #65	; 0x41
   15868:	cmpne	r0, r1
   1586c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15870:	movw	r1, #65518	; 0xffee
   15874:	movt	r1, #192	; 0xc0
   15878:	cmp	r0, r1
   1587c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15880:	b	15bfc <__assert_fail@plt+0x4614>
   15884:	movw	r1, #22561	; 0x5821
   15888:	movt	r1, #1893	; 0x765
   1588c:	cmp	r0, r1
   15890:	movwne	r1, #6452	; 0x1934
   15894:	movtne	r1, #2308	; 0x904
   15898:	cmpne	r0, r1
   1589c:	beq	15bf0 <__assert_fail@plt+0x4608>
   158a0:	movw	r1, #7658	; 0x1dea
   158a4:	movt	r1, #2989	; 0xbad
   158a8:	cmp	r0, r1
   158ac:	beq	15bf0 <__assert_fail@plt+0x4608>
   158b0:	b	15bfc <__assert_fail@plt+0x4614>
   158b4:	movw	r1, #22774	; 0x58f6
   158b8:	movt	r1, #34180	; 0x8584
   158bc:	cmp	r0, r1
   158c0:	movwne	r1, #26686	; 0x683e
   158c4:	movtne	r1, #37155	; 0x9123
   158c8:	cmpne	r0, r1
   158cc:	beq	15bf0 <__assert_fail@plt+0x4608>
   158d0:	movw	r1, #22774	; 0x58f6
   158d4:	movt	r1, #38276	; 0x9584
   158d8:	cmp	r0, r1
   158dc:	beq	15bf0 <__assert_fail@plt+0x4608>
   158e0:	b	15bfc <__assert_fail@plt+0x4614>
   158e4:	movw	r1, #22569	; 0x5829
   158e8:	movt	r1, #22569	; 0x5829
   158ec:	cmp	r0, r1
   158f0:	movwne	r1, #21314	; 0x5342
   158f4:	movtne	r1, #22598	; 0x5846
   158f8:	cmpne	r0, r1
   158fc:	beq	15bf0 <__assert_fail@plt+0x4608>
   15900:	movw	r1, #27120	; 0x69f0
   15904:	movt	r1, #23100	; 0x5a3c
   15908:	cmp	r0, r1
   1590c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15910:	b	15bfc <__assert_fail@plt+0x4614>
   15914:	movw	r1, #19780	; 0x4d44
   15918:	cmp	r0, r1
   1591c:	movwne	r1, #19802	; 0x4d5a
   15920:	cmpne	r0, r1
   15924:	beq	15bf0 <__assert_fail@plt+0x4608>
   15928:	movw	r1, #24053	; 0x5df5
   1592c:	cmp	r0, r1
   15930:	beq	15bf0 <__assert_fail@plt+0x4608>
   15934:	b	15bfc <__assert_fail@plt+0x4614>
   15938:	movw	r1, #23891	; 0x5d53
   1593c:	movt	r1, #17217	; 0x4341
   15940:	cmp	r0, r1
   15944:	movwne	r1, #16706	; 0x4142
   15948:	movtne	r1, #17485	; 0x444d
   1594c:	cmpne	r0, r1
   15950:	beq	15bf0 <__assert_fail@plt+0x4608>
   15954:	movw	r1, #52520	; 0xcd28
   15958:	movt	r1, #17725	; 0x453d
   1595c:	cmp	r0, r1
   15960:	beq	15bf0 <__assert_fail@plt+0x4608>
   15964:	b	15bfc <__assert_fail@plt+0x4614>
   15968:	movw	r1, #4386	; 0x1122
   1596c:	movt	r1, #26649	; 0x6819
   15970:	cmp	r0, r1
   15974:	movwne	r1, #28528	; 0x6f70
   15978:	movtne	r1, #27759	; 0x6c6f
   1597c:	cmpne	r0, r1
   15980:	beq	15bf0 <__assert_fail@plt+0x4608>
   15984:	movw	r1, #26227	; 0x6673
   15988:	movt	r1, #28275	; 0x6e73
   1598c:	cmp	r0, r1
   15990:	beq	15bf0 <__assert_fail@plt+0x4608>
   15994:	b	15bfc <__assert_fail@plt+0x4614>
   15998:	movw	r1, #61267	; 0xef53
   1599c:	cmp	r0, r1
   159a0:	movwne	r1, #61791	; 0xf15f
   159a4:	cmpne	r0, r1
   159a8:	beq	15bf0 <__assert_fail@plt+0x4608>
   159ac:	movw	r1, #6484	; 0x1954
   159b0:	movt	r1, #1
   159b4:	cmp	r0, r1
   159b8:	beq	15bf0 <__assert_fail@plt+0x4608>
   159bc:	b	15bfc <__assert_fail@plt+0x4614>
   159c0:	movw	r1, #30804	; 0x7854
   159c4:	movt	r1, #4400	; 0x1130
   159c8:	cmp	r0, r1
   159cc:	movwne	r1, #4966	; 0x1366
   159d0:	movtne	r1, #4966	; 0x1366
   159d4:	cmpne	r0, r1
   159d8:	beq	15bf0 <__assert_fail@plt+0x4608>
   159dc:	movw	r1, #13126	; 0x3346
   159e0:	movt	r1, #5377	; 0x1501
   159e4:	cmp	r0, r1
   159e8:	beq	15bf0 <__assert_fail@plt+0x4608>
   159ec:	b	15bfc <__assert_fail@plt+0x4614>
   159f0:	movw	r1, #33252	; 0x81e4
   159f4:	movt	r1, #56926	; 0xde5e
   159f8:	cmp	r0, r1
   159fc:	movwne	r1, #57826	; 0xe1e2
   15a00:	movtne	r1, #57589	; 0xe0f5
   15a04:	cmpne	r0, r1
   15a08:	beq	15bf0 <__assert_fail@plt+0x4608>
   15a0c:	movw	r1, #8208	; 0x2010
   15a10:	movt	r1, #62197	; 0xf2f5
   15a14:	cmp	r0, r1
   15a18:	beq	15bf0 <__assert_fail@plt+0x4608>
   15a1c:	b	15bfc <__assert_fail@plt+0x4614>
   15a20:	movw	r1, #17227	; 0x434b
   15a24:	movt	r1, #21327	; 0x534f
   15a28:	cmp	r0, r1
   15a2c:	movwne	r1, #256	; 0x100
   15a30:	movtne	r1, #21529	; 0x5419
   15a34:	cmpne	r0, r1
   15a38:	beq	15bf0 <__assert_fail@plt+0x4608>
   15a3c:	movw	r1, #18003	; 0x4653
   15a40:	movt	r1, #22106	; 0x565a
   15a44:	cmp	r0, r1
   15a48:	beq	15bf0 <__assert_fail@plt+0x4608>
   15a4c:	b	15bfc <__assert_fail@plt+0x4614>
   15a50:	movw	r1, #40864	; 0x9fa0
   15a54:	sub	r0, r0, r1
   15a58:	cmp	r0, #3
   15a5c:	bcc	15bf0 <__assert_fail@plt+0x4608>
   15a60:	b	15bfc <__assert_fail@plt+0x4614>
   15a64:	movw	r1, #17994	; 0x464a
   15a68:	movt	r1, #12627	; 0x3153
   15a6c:	cmp	r0, r1
   15a70:	movwne	r1, #21297	; 0x5331
   15a74:	movtne	r1, #16966	; 0x4246
   15a78:	cmpne	r0, r1
   15a7c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15a80:	movw	r1, #20045	; 0x4e4d
   15a84:	movt	r1, #16969	; 0x4249
   15a88:	cmp	r0, r1
   15a8c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15a90:	b	15bfc <__assert_fail@plt+0x4614>
   15a94:	sub	r0, r0, #16384	; 0x4000
   15a98:	cmp	r0, #6
   15a9c:	bhi	15bfc <__assert_fail@plt+0x4614>
   15aa0:	mov	r1, #1
   15aa4:	mov	r2, #81	; 0x51
   15aa8:	tst	r2, r1, lsl r0
   15aac:	bne	15bf0 <__assert_fail@plt+0x4608>
   15ab0:	b	15bfc <__assert_fail@plt+0x4614>
   15ab4:	movw	r1, #26400	; 0x6720
   15ab8:	movt	r1, #25698	; 0x6462
   15abc:	cmp	r0, r1
   15ac0:	movwne	r1, #24952	; 0x6178
   15ac4:	movtne	r1, #25700	; 0x6464
   15ac8:	cmpne	r0, r1
   15acc:	beq	15bf0 <__assert_fail@plt+0x4608>
   15ad0:	movw	r1, #26985	; 0x6969
   15ad4:	movt	r1, #26457	; 0x6759
   15ad8:	cmp	r0, r1
   15adc:	beq	15bf0 <__assert_fail@plt+0x4608>
   15ae0:	b	15bfc <__assert_fail@plt+0x4614>
   15ae4:	movw	r1, #6548	; 0x1994
   15ae8:	movt	r1, #258	; 0x102
   15aec:	cmp	r0, r1
   15af0:	movwne	r1, #6551	; 0x1997
   15af4:	movtne	r1, #258	; 0x102
   15af8:	cmpne	r0, r1
   15afc:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b00:	movw	r1, #53613	; 0xd16d
   15b04:	movt	r1, #303	; 0x12f
   15b08:	cmp	r0, r1
   15b0c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b10:	b	15bfc <__assert_fail@plt+0x4614>
   15b14:	movw	r1, #391	; 0x187
   15b18:	cmp	r0, r1
   15b1c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b20:	cmp	r0, #1984	; 0x7c0
   15b24:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b28:	b	15bfc <__assert_fail@plt+0x4614>
   15b2c:	movw	r1, #33128	; 0x8168
   15b30:	movt	r1, #51582	; 0xc97e
   15b34:	cmp	r0, r1
   15b38:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b3c:	movw	r1, #18961	; 0x4a11
   15b40:	movt	r1, #51966	; 0xcafe
   15b44:	cmp	r0, r1
   15b48:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b4c:	b	15bfc <__assert_fail@plt+0x4614>
   15b50:	movw	r1, #26476	; 0x676c
   15b54:	movt	r1, #24933	; 0x6165
   15b58:	cmp	r0, r1
   15b5c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b60:	movw	r1, #25974	; 0x6576
   15b64:	movt	r1, #25188	; 0x6264
   15b68:	cmp	r0, r1
   15b6c:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b70:	b	15bfc <__assert_fail@plt+0x4614>
   15b74:	movw	r1, #18803	; 0x4973
   15b78:	movt	r1, #21093	; 0x5265
   15b7c:	cmp	r0, r1
   15b80:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b84:	movw	r1, #17229	; 0x434d
   15b88:	movt	r1, #21317	; 0x5345
   15b8c:	cmp	r0, r1
   15b90:	beq	15bf0 <__assert_fail@plt+0x4608>
   15b94:	b	15bfc <__assert_fail@plt+0x4614>
   15b98:	movw	r1, #29305	; 0x7279
   15b9c:	movt	r1, #29554	; 0x7372
   15ba0:	cmp	r0, r1
   15ba4:	beq	15bf0 <__assert_fail@plt+0x4608>
   15ba8:	movw	r1, #24931	; 0x6163
   15bac:	movt	r1, #29810	; 0x7472
   15bb0:	cmp	r0, r1
   15bb4:	beq	15bf0 <__assert_fail@plt+0x4608>
   15bb8:	b	15bfc <__assert_fail@plt+0x4614>
   15bbc:	movw	r1, #47792	; 0xbab0
   15bc0:	movt	r1, #8209	; 0x2011
   15bc4:	cmp	r0, r1
   15bc8:	beq	15bf0 <__assert_fail@plt+0x4608>
   15bcc:	movw	r1, #6405	; 0x1905
   15bd0:	movt	r1, #9221	; 0x2405
   15bd4:	cmp	r0, r1
   15bd8:	beq	15bf0 <__assert_fail@plt+0x4608>
   15bdc:	b	15bfc <__assert_fail@plt+0x4614>
   15be0:	cmp	r0, #47	; 0x2f
   15be4:	beq	15bf0 <__assert_fail@plt+0x4608>
   15be8:	cmp	r0, #51	; 0x33
   15bec:	bne	15bfc <__assert_fail@plt+0x4614>
   15bf0:	mov	r0, r4
   15bf4:	sub	sp, fp, #16
   15bf8:	pop	{r4, r5, r6, r7, fp, pc}
   15bfc:	mov	r4, #1
   15c00:	b	15bf0 <__assert_fail@plt+0x4608>
   15c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c08:	add	fp, sp, #28
   15c0c:	sub	sp, sp, #20
   15c10:	sub	sp, sp, #8192	; 0x2000
   15c14:	ldr	r8, [fp, #12]
   15c18:	ldr	r4, [fp, #8]
   15c1c:	mov	r7, r0
   15c20:	mvn	r0, #1
   15c24:	str	r1, [sp, #8]
   15c28:	mvn	r1, #0
   15c2c:	mov	r5, #0
   15c30:	mov	r6, #0
   15c34:	str	r2, [sp, #12]
   15c38:	add	r0, r0, #1
   15c3c:	eor	r1, r8, r1
   15c40:	eor	r0, r4, r0
   15c44:	orr	sl, r0, r1
   15c48:	str	r1, [sp, #4]
   15c4c:	b	15c54 <__assert_fail@plt+0x466c>
   15c50:	mov	r7, #0
   15c54:	subs	r0, r4, #8192	; 0x2000
   15c58:	mov	r2, r4
   15c5c:	add	r1, sp, #16
   15c60:	sbcs	r0, r8, #0
   15c64:	ldr	r0, [sp, #12]
   15c68:	movcs	r2, #8192	; 0x2000
   15c6c:	bl	1a644 <__assert_fail@plt+0x905c>
   15c70:	cmp	r0, #0
   15c74:	beq	15d14 <__assert_fail@plt+0x472c>
   15c78:	mov	r9, r0
   15c7c:	cmn	r0, #1
   15c80:	beq	15d24 <__assert_fail@plt+0x473c>
   15c84:	tst	r7, #1
   15c88:	beq	15cd0 <__assert_fail@plt+0x46e8>
   15c8c:	movw	r0, #61904	; 0xf1d0
   15c90:	ldr	r3, [sp, #8]
   15c94:	movw	r2, #54062	; 0xd32e
   15c98:	movw	r1, #55958	; 0xda96
   15c9c:	movt	r0, #2
   15ca0:	movt	r2, #1
   15ca4:	movt	r1, #1
   15ca8:	mov	r7, r0
   15cac:	ldrb	r0, [r0]
   15cb0:	cmp	r0, #0
   15cb4:	movw	r0, #54061	; 0xd32d
   15cb8:	movt	r0, #1
   15cbc:	movne	r2, r0
   15cc0:	mov	r0, #1
   15cc4:	bl	114d4 <__printf_chk@plt>
   15cc8:	mov	r0, #1
   15ccc:	strb	r0, [r7]
   15cd0:	add	r0, sp, #16
   15cd4:	mov	r1, r9
   15cd8:	bl	15e44 <__assert_fail@plt+0x485c>
   15cdc:	adds	r5, r5, r9
   15ce0:	adc	r6, r6, #0
   15ce4:	cmp	sl, #0
   15ce8:	beq	15c50 <__assert_fail@plt+0x4668>
   15cec:	ldr	r1, [fp, #8]
   15cf0:	mvn	r0, #1
   15cf4:	subs	r4, r4, r9
   15cf8:	sbc	r8, r8, #0
   15cfc:	eor	r0, r1, r0
   15d00:	ldr	r1, [sp, #4]
   15d04:	orr	r0, r0, r1
   15d08:	cmp	r0, #0
   15d0c:	orrsne	r0, r4, r8
   15d10:	bne	15c50 <__assert_fail@plt+0x4668>
   15d14:	mov	r0, r5
   15d18:	mov	r1, r6
   15d1c:	sub	sp, fp, #28
   15d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d24:	bl	114b0 <__errno_location@plt>
   15d28:	ldr	r4, [r0]
   15d2c:	cmp	r4, #11
   15d30:	beq	15d14 <__assert_fail@plt+0x472c>
   15d34:	movw	r1, #55856	; 0xda30
   15d38:	mov	r0, #0
   15d3c:	mov	r2, #5
   15d40:	movt	r1, #1
   15d44:	bl	11354 <dcgettext@plt>
   15d48:	ldr	r1, [sp, #8]
   15d4c:	mov	r5, r0
   15d50:	mov	r0, #4
   15d54:	bl	19fe4 <__assert_fail@plt+0x89fc>
   15d58:	mov	r3, r0
   15d5c:	mov	r0, #1
   15d60:	mov	r1, r4
   15d64:	mov	r2, r5
   15d68:	bl	113f0 <error@plt>
   15d6c:	push	{r4, r5, r6, r7, fp, lr}
   15d70:	add	fp, sp, #16
   15d74:	sub	sp, sp, #32
   15d78:	ldr	r7, [fp, #8]
   15d7c:	mov	r4, r3
   15d80:	mov	r6, r2
   15d84:	str	r7, [sp]
   15d88:	bl	113c0 <lseek64@plt>
   15d8c:	cmp	r1, #0
   15d90:	subge	sp, fp, #16
   15d94:	popge	{r4, r5, r6, r7, fp, pc}
   15d98:	ldr	r5, [fp, #12]
   15d9c:	add	r2, sp, #11
   15da0:	mov	r0, r6
   15da4:	mov	r1, r4
   15da8:	bl	187c0 <__assert_fail@plt+0x71d8>
   15dac:	mov	r4, r0
   15db0:	cmp	r7, #2
   15db4:	beq	15ddc <__assert_fail@plt+0x47f4>
   15db8:	cmp	r7, #1
   15dbc:	beq	15df0 <__assert_fail@plt+0x4808>
   15dc0:	cmp	r7, #0
   15dc4:	bne	15e40 <__assert_fail@plt+0x4858>
   15dc8:	bl	114b0 <__errno_location@plt>
   15dcc:	ldr	r6, [r0]
   15dd0:	movw	r1, #56005	; 0xdac5
   15dd4:	movt	r1, #1
   15dd8:	b	15e00 <__assert_fail@plt+0x4818>
   15ddc:	bl	114b0 <__errno_location@plt>
   15de0:	ldr	r6, [r0]
   15de4:	movw	r1, #56072	; 0xdb08
   15de8:	movt	r1, #1
   15dec:	b	15e00 <__assert_fail@plt+0x4818>
   15df0:	bl	114b0 <__errno_location@plt>
   15df4:	ldr	r6, [r0]
   15df8:	movw	r1, #56034	; 0xdae2
   15dfc:	movt	r1, #1
   15e00:	mov	r0, #0
   15e04:	mov	r2, #5
   15e08:	bl	11354 <dcgettext@plt>
   15e0c:	mov	r7, r0
   15e10:	mov	r0, #0
   15e14:	mov	r1, #3
   15e18:	mov	r2, r5
   15e1c:	bl	1a260 <__assert_fail@plt+0x8c78>
   15e20:	mov	r3, r0
   15e24:	mov	r0, #0
   15e28:	mov	r1, r6
   15e2c:	mov	r2, r7
   15e30:	str	r4, [sp]
   15e34:	bl	113f0 <error@plt>
   15e38:	mov	r0, #1
   15e3c:	bl	11468 <exit@plt>
   15e40:	bl	115c4 <abort@plt>
   15e44:	push	{r4, r5, fp, lr}
   15e48:	add	fp, sp, #8
   15e4c:	cmp	r1, #0
   15e50:	popeq	{r4, r5, fp, pc}
   15e54:	movw	r5, #61876	; 0xf1b4
   15e58:	mov	r4, r1
   15e5c:	mov	r1, #1
   15e60:	movt	r5, #2
   15e64:	mov	r2, r4
   15e68:	ldr	r3, [r5]
   15e6c:	bl	1133c <fwrite_unlocked@plt>
   15e70:	cmp	r0, r4
   15e74:	bcc	15e7c <__assert_fail@plt+0x4894>
   15e78:	pop	{r4, r5, fp, pc}
   15e7c:	ldr	r0, [r5]
   15e80:	bl	1157c <clearerr_unlocked@plt>
   15e84:	bl	114b0 <__errno_location@plt>
   15e88:	ldr	r4, [r0]
   15e8c:	movw	r1, #55988	; 0xdab4
   15e90:	mov	r0, #0
   15e94:	mov	r2, #5
   15e98:	movt	r1, #1
   15e9c:	bl	11354 <dcgettext@plt>
   15ea0:	movw	r1, #54616	; 0xd558
   15ea4:	mov	r5, r0
   15ea8:	mov	r0, #4
   15eac:	movt	r1, #1
   15eb0:	bl	19fe4 <__assert_fail@plt+0x89fc>
   15eb4:	mov	r3, r0
   15eb8:	mov	r0, #1
   15ebc:	mov	r1, r4
   15ec0:	mov	r2, r5
   15ec4:	bl	113f0 <error@plt>
   15ec8:	ldr	r0, [r0, #60]	; 0x3c
   15ecc:	udiv	r2, r0, r1
   15ed0:	mls	r0, r2, r1, r0
   15ed4:	bx	lr
   15ed8:	ldr	r1, [r1, #60]	; 0x3c
   15edc:	ldr	r0, [r0, #60]	; 0x3c
   15ee0:	sub	r0, r0, r1
   15ee4:	clz	r0, r0
   15ee8:	lsr	r0, r0, #5
   15eec:	bx	lr
   15ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef4:	add	fp, sp, #28
   15ef8:	sub	sp, sp, #124	; 0x7c
   15efc:	ldr	r5, [r0]
   15f00:	mov	r6, r1
   15f04:	movw	r1, #55146	; 0xd76a
   15f08:	mov	r4, r0
   15f0c:	movt	r1, #1
   15f10:	mov	r0, r5
   15f14:	bl	112b8 <strcmp@plt>
   15f18:	ldr	r7, [r4, #52]	; 0x34
   15f1c:	ldrb	sl, [r4, #46]	; 0x2e
   15f20:	cmp	r0, #0
   15f24:	str	r0, [sp, #8]
   15f28:	str	r6, [sp, #12]
   15f2c:	beq	15f50 <__assert_fail@plt+0x4968>
   15f30:	mov	r1, #2048	; 0x800
   15f34:	cmp	r6, #0
   15f38:	mov	r0, r5
   15f3c:	movwne	r1, #0
   15f40:	bl	1749c <__assert_fail@plt+0x5eb4>
   15f44:	mov	r9, r0
   15f48:	ldr	r0, [r4, #52]	; 0x34
   15f4c:	b	15f58 <__assert_fail@plt+0x4970>
   15f50:	mov	r9, #0
   15f54:	mov	r0, r7
   15f58:	ldr	r1, [r4, #48]	; 0x30
   15f5c:	clz	r0, r0
   15f60:	lsr	r0, r0, #5
   15f64:	add	r1, r1, #1
   15f68:	clz	r1, r1
   15f6c:	lsr	r1, r1, #5
   15f70:	teq	r1, r0
   15f74:	beq	167b8 <__assert_fail@plt+0x51d0>
   15f78:	movw	r6, #61902	; 0xf1ce
   15f7c:	add	r5, r9, #1
   15f80:	cmn	r9, #1
   15f84:	movw	r8, #61901	; 0xf1cd
   15f88:	movt	r6, #2
   15f8c:	mov	r0, r5
   15f90:	movt	r8, #2
   15f94:	ldrb	r1, [r6]
   15f98:	movwne	r0, #1
   15f9c:	mvn	r1, r1
   15fa0:	orr	r0, r0, r1
   15fa4:	and	r0, r0, #1
   15fa8:	strb	r0, [r4, #46]	; 0x2e
   15fac:	ldrb	r0, [r8]
   15fb0:	cmp	r0, #0
   15fb4:	bne	1605c <__assert_fail@plt+0x4a74>
   15fb8:	ldr	r1, [r4]
   15fbc:	add	r2, sp, #16
   15fc0:	mov	r0, #3
   15fc4:	bl	115dc <__lxstat64@plt>
   15fc8:	cmp	r0, #0
   15fcc:	bne	1605c <__assert_fail@plt+0x4a74>
   15fd0:	ldr	r0, [sp, #32]
   15fd4:	and	r0, r0, #61440	; 0xf000
   15fd8:	cmp	r0, #40960	; 0xa000
   15fdc:	bne	1605c <__assert_fail@plt+0x4a74>
   15fe0:	mov	r0, #1
   15fe4:	movw	r1, #56493	; 0xdcad
   15fe8:	mov	r2, #5
   15fec:	strb	r0, [r4, #44]	; 0x2c
   15ff0:	mvn	r0, #0
   15ff4:	movt	r1, #1
   15ff8:	str	r0, [r4, #52]	; 0x34
   15ffc:	mov	r0, #0
   16000:	bl	11354 <dcgettext@plt>
   16004:	ldr	r7, [r4]
   16008:	movw	r1, #55146	; 0xd76a
   1600c:	mov	r6, r0
   16010:	movt	r1, #1
   16014:	mov	r0, r7
   16018:	bl	112b8 <strcmp@plt>
   1601c:	cmp	r0, #0
   16020:	bne	1603c <__assert_fail@plt+0x4a54>
   16024:	movw	r1, #55943	; 0xda87
   16028:	mov	r0, #0
   1602c:	mov	r2, #5
   16030:	movt	r1, #1
   16034:	bl	11354 <dcgettext@plt>
   16038:	mov	r7, r0
   1603c:	mov	r0, #4
   16040:	mov	r1, r7
   16044:	bl	19fe4 <__assert_fail@plt+0x89fc>
   16048:	mov	r3, r0
   1604c:	mov	r0, #0
   16050:	mov	r1, #0
   16054:	mov	r2, r6
   16058:	b	16670 <__assert_fail@plt+0x5088>
   1605c:	cmn	r9, #1
   16060:	beq	1615c <__assert_fail@plt+0x4b74>
   16064:	add	r2, sp, #16
   16068:	mov	r0, #3
   1606c:	mov	r1, r9
   16070:	bl	113a8 <__fxstat64@plt>
   16074:	cmn	r0, #1
   16078:	ble	1615c <__assert_fail@plt+0x4b74>
   1607c:	ldr	r0, [sp, #32]
   16080:	and	r0, r0, #61440	; 0xf000
   16084:	cmp	r0, #32768	; 0x8000
   16088:	bge	16250 <__assert_fail@plt+0x4c68>
   1608c:	cmp	r0, #4096	; 0x1000
   16090:	cmpne	r0, #8192	; 0x2000
   16094:	beq	16258 <__assert_fail@plt+0x4c70>
   16098:	mov	r0, #0
   1609c:	strb	r0, [r4, #46]	; 0x2e
   160a0:	mvn	r0, #0
   160a4:	str	r0, [r4, #52]	; 0x34
   160a8:	movw	r0, #61760	; 0xf140
   160ac:	movt	r0, #2
   160b0:	ldrb	r1, [r6]
   160b4:	ldr	r0, [r0]
   160b8:	mvn	r1, r1
   160bc:	subs	r0, r0, #1
   160c0:	movwne	r0, #1
   160c4:	cmn	r7, #1
   160c8:	orr	r0, r1, r0
   160cc:	cmpeq	sl, #0
   160d0:	and	r0, r0, #1
   160d4:	strb	r0, [r4, #44]	; 0x2c
   160d8:	beq	16674 <__assert_fail@plt+0x508c>
   160dc:	movw	r1, #56574	; 0xdcfe
   160e0:	mov	r0, #0
   160e4:	mov	r2, #5
   160e8:	movt	r1, #1
   160ec:	bl	11354 <dcgettext@plt>
   160f0:	ldr	r7, [r4]
   160f4:	movw	r1, #55146	; 0xd76a
   160f8:	mov	r6, r0
   160fc:	movt	r1, #1
   16100:	mov	r0, r7
   16104:	bl	112b8 <strcmp@plt>
   16108:	cmp	r0, #0
   1610c:	bne	16128 <__assert_fail@plt+0x4b40>
   16110:	movw	r1, #55943	; 0xda87
   16114:	mov	r0, #0
   16118:	mov	r2, #5
   1611c:	movt	r1, #1
   16120:	bl	11354 <dcgettext@plt>
   16124:	mov	r7, r0
   16128:	mov	r0, #4
   1612c:	mov	r1, r7
   16130:	bl	19fe4 <__assert_fail@plt+0x89fc>
   16134:	mov	r7, r0
   16138:	ldrb	r0, [r4, #44]	; 0x2c
   1613c:	cmp	r0, #0
   16140:	beq	16654 <__assert_fail@plt+0x506c>
   16144:	movw	r1, #55918	; 0xda6e
   16148:	mov	r0, #0
   1614c:	mov	r2, #5
   16150:	movt	r1, #1
   16154:	bl	11354 <dcgettext@plt>
   16158:	b	1665c <__assert_fail@plt+0x5074>
   1615c:	bl	114b0 <__errno_location@plt>
   16160:	ldr	r6, [r0]
   16164:	str	r6, [r4, #52]	; 0x34
   16168:	ldrb	r1, [r4, #46]	; 0x2e
   1616c:	cmp	r1, #0
   16170:	beq	161dc <__assert_fail@plt+0x4bf4>
   16174:	ldr	r6, [r0]
   16178:	cmp	r7, r6
   1617c:	beq	16674 <__assert_fail@plt+0x508c>
   16180:	ldr	r7, [r4]
   16184:	movw	r1, #55146	; 0xd76a
   16188:	movt	r1, #1
   1618c:	mov	r0, r7
   16190:	bl	112b8 <strcmp@plt>
   16194:	cmp	r0, #0
   16198:	bne	161b4 <__assert_fail@plt+0x4bcc>
   1619c:	movw	r1, #55943	; 0xda87
   161a0:	mov	r0, #0
   161a4:	mov	r2, #5
   161a8:	movt	r1, #1
   161ac:	bl	11354 <dcgettext@plt>
   161b0:	mov	r7, r0
   161b4:	mov	r0, #0
   161b8:	mov	r1, #3
   161bc:	mov	r2, r7
   161c0:	bl	1a260 <__assert_fail@plt+0x8c78>
   161c4:	movw	r2, #57314	; 0xdfe2
   161c8:	mov	r3, r0
   161cc:	mov	r0, #0
   161d0:	mov	r1, r6
   161d4:	movt	r2, #1
   161d8:	b	16670 <__assert_fail@plt+0x5088>
   161dc:	cmp	sl, #0
   161e0:	beq	16674 <__assert_fail@plt+0x508c>
   161e4:	movw	r1, #56547	; 0xdce3
   161e8:	mov	r0, #0
   161ec:	mov	r2, #5
   161f0:	movt	r1, #1
   161f4:	bl	11354 <dcgettext@plt>
   161f8:	ldr	r7, [r4]
   161fc:	movw	r1, #55146	; 0xd76a
   16200:	mov	r8, r0
   16204:	movt	r1, #1
   16208:	mov	r0, r7
   1620c:	bl	112b8 <strcmp@plt>
   16210:	cmp	r0, #0
   16214:	bne	16230 <__assert_fail@plt+0x4c48>
   16218:	movw	r1, #55943	; 0xda87
   1621c:	mov	r0, #0
   16220:	mov	r2, #5
   16224:	movt	r1, #1
   16228:	bl	11354 <dcgettext@plt>
   1622c:	mov	r7, r0
   16230:	mov	r0, #4
   16234:	mov	r1, r7
   16238:	bl	19fe4 <__assert_fail@plt+0x89fc>
   1623c:	mov	r3, r0
   16240:	mov	r0, #0
   16244:	mov	r1, r6
   16248:	mov	r2, r8
   1624c:	b	16670 <__assert_fail@plt+0x5088>
   16250:	cmpne	r0, #49152	; 0xc000
   16254:	bne	16098 <__assert_fail@plt+0x4ab0>
   16258:	ldr	r6, [r4]
   1625c:	movw	r1, #55146	; 0xd76a
   16260:	movt	r1, #1
   16264:	mov	r0, r6
   16268:	bl	112b8 <strcmp@plt>
   1626c:	cmp	r0, #0
   16270:	bne	1628c <__assert_fail@plt+0x4ca4>
   16274:	movw	r1, #55943	; 0xda87
   16278:	mov	r0, #0
   1627c:	mov	r2, #5
   16280:	movt	r1, #1
   16284:	bl	11354 <dcgettext@plt>
   16288:	mov	r6, r0
   1628c:	mov	r0, r9
   16290:	mov	r1, r6
   16294:	bl	1537c <__assert_fail@plt+0x3d94>
   16298:	cmp	r0, #0
   1629c:	strb	r0, [r4, #45]	; 0x2d
   162a0:	beq	162b0 <__assert_fail@plt+0x4cc8>
   162a4:	ldrb	r0, [r8]
   162a8:	cmp	r0, #0
   162ac:	beq	163b4 <__assert_fail@plt+0x4dcc>
   162b0:	mov	r0, #0
   162b4:	orr	r1, r7, #2
   162b8:	str	r0, [r4, #52]	; 0x34
   162bc:	cmp	r1, #2
   162c0:	ldr	r0, [r4, #48]	; 0x30
   162c4:	bne	163a0 <__assert_fail@plt+0x4db8>
   162c8:	cmn	r0, #1
   162cc:	beq	16538 <__assert_fail@plt+0x4f50>
   162d0:	ldrd	r0, [r4, #32]
   162d4:	ldr	r2, [sp, #112]	; 0x70
   162d8:	ldr	r3, [sp, #116]	; 0x74
   162dc:	eor	r1, r1, r3
   162e0:	eor	r0, r0, r2
   162e4:	orrs	r0, r0, r1
   162e8:	bne	16434 <__assert_fail@plt+0x4e4c>
   162ec:	ldrd	r0, [r4, #24]
   162f0:	ldr	r2, [sp, #16]
   162f4:	ldr	r3, [sp, #20]
   162f8:	eor	r1, r1, r3
   162fc:	eor	r0, r0, r2
   16300:	orrs	r0, r0, r1
   16304:	bne	16434 <__assert_fail@plt+0x4e4c>
   16308:	ldr	r4, [r4]
   1630c:	movw	r1, #55146	; 0xd76a
   16310:	movt	r1, #1
   16314:	mov	r0, r4
   16318:	bl	112b8 <strcmp@plt>
   1631c:	cmp	r0, #0
   16320:	bne	1633c <__assert_fail@plt+0x4d54>
   16324:	movw	r1, #55943	; 0xda87
   16328:	mov	r0, #0
   1632c:	mov	r2, #5
   16330:	movt	r1, #1
   16334:	bl	11354 <dcgettext@plt>
   16338:	mov	r4, r0
   1633c:	cmp	r5, #2
   16340:	bcc	16398 <__assert_fail@plt+0x4db0>
   16344:	mov	r0, r9
   16348:	bl	115d0 <close@plt>
   1634c:	cmp	r0, #0
   16350:	beq	16398 <__assert_fail@plt+0x4db0>
   16354:	bl	114b0 <__errno_location@plt>
   16358:	ldr	r5, [r0]
   1635c:	movw	r1, #56114	; 0xdb32
   16360:	mov	r0, #0
   16364:	mov	r2, #5
   16368:	movt	r1, #1
   1636c:	bl	11354 <dcgettext@plt>
   16370:	mov	r6, r0
   16374:	mov	r0, #4
   16378:	mov	r1, r4
   1637c:	bl	19fe4 <__assert_fail@plt+0x89fc>
   16380:	mov	r3, r0
   16384:	mov	r0, #0
   16388:	mov	r1, r5
   1638c:	mov	r2, r6
   16390:	str	r9, [sp]
   16394:	bl	113f0 <error@plt>
   16398:	sub	sp, fp, #28
   1639c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a0:	cmn	r0, #1
   163a4:	bne	167d8 <__assert_fail@plt+0x51f0>
   163a8:	movw	r1, #56685	; 0xdd6d
   163ac:	movt	r1, #1
   163b0:	b	16540 <__assert_fail@plt+0x4f58>
   163b4:	movw	r1, #56621	; 0xdd2d
   163b8:	mvn	r0, #0
   163bc:	mov	r2, #5
   163c0:	str	r0, [r4, #52]	; 0x34
   163c4:	movt	r1, #1
   163c8:	mov	r0, #0
   163cc:	bl	11354 <dcgettext@plt>
   163d0:	ldr	r7, [r4]
   163d4:	movw	r1, #55146	; 0xd76a
   163d8:	mov	r6, r0
   163dc:	movt	r1, #1
   163e0:	mov	r0, r7
   163e4:	bl	112b8 <strcmp@plt>
   163e8:	cmp	r0, #0
   163ec:	bne	16408 <__assert_fail@plt+0x4e20>
   163f0:	movw	r1, #55943	; 0xda87
   163f4:	mov	r0, #0
   163f8:	mov	r2, #5
   163fc:	movt	r1, #1
   16400:	bl	11354 <dcgettext@plt>
   16404:	mov	r7, r0
   16408:	mov	r0, #4
   1640c:	mov	r1, r7
   16410:	bl	19fe4 <__assert_fail@plt+0x89fc>
   16414:	mov	r3, r0
   16418:	mov	r0, #0
   1641c:	mov	r1, #0
   16420:	mov	r2, r6
   16424:	bl	113f0 <error@plt>
   16428:	movw	r0, #257	; 0x101
   1642c:	strh	r0, [r4, #44]	; 0x2c
   16430:	b	16674 <__assert_fail@plt+0x508c>
   16434:	movw	r1, #56747	; 0xddab
   16438:	mov	r0, #0
   1643c:	mov	r2, #5
   16440:	movt	r1, #1
   16444:	bl	11354 <dcgettext@plt>
   16448:	ldr	r6, [r4]
   1644c:	movw	r1, #55146	; 0xd76a
   16450:	mov	r5, r0
   16454:	movt	r1, #1
   16458:	mov	r0, r6
   1645c:	bl	112b8 <strcmp@plt>
   16460:	cmp	r0, #0
   16464:	bne	16480 <__assert_fail@plt+0x4e98>
   16468:	movw	r1, #55943	; 0xda87
   1646c:	mov	r0, #0
   16470:	mov	r2, #5
   16474:	movt	r1, #1
   16478:	bl	11354 <dcgettext@plt>
   1647c:	mov	r6, r0
   16480:	mov	r0, #4
   16484:	mov	r1, r6
   16488:	bl	19fe4 <__assert_fail@plt+0x89fc>
   1648c:	mov	r3, r0
   16490:	mov	r0, #0
   16494:	mov	r1, #0
   16498:	mov	r2, r5
   1649c:	bl	113f0 <error@plt>
   164a0:	ldr	r5, [r4]
   164a4:	ldr	r7, [r4, #48]	; 0x30
   164a8:	movw	r1, #55146	; 0xd76a
   164ac:	movt	r1, #1
   164b0:	mov	r0, r5
   164b4:	bl	112b8 <strcmp@plt>
   164b8:	cmp	r0, #0
   164bc:	bne	164d8 <__assert_fail@plt+0x4ef0>
   164c0:	movw	r1, #55943	; 0xda87
   164c4:	mov	r0, #0
   164c8:	mov	r2, #5
   164cc:	movt	r1, #1
   164d0:	bl	11354 <dcgettext@plt>
   164d4:	mov	r5, r0
   164d8:	add	r0, r7, #1
   164dc:	cmp	r0, #2
   164e0:	bcc	165a4 <__assert_fail@plt+0x4fbc>
   164e4:	mov	r0, r7
   164e8:	bl	115d0 <close@plt>
   164ec:	cmp	r0, #0
   164f0:	beq	165a4 <__assert_fail@plt+0x4fbc>
   164f4:	bl	114b0 <__errno_location@plt>
   164f8:	ldr	r8, [r0]
   164fc:	movw	r1, #56114	; 0xdb32
   16500:	mov	r0, #0
   16504:	mov	r2, #5
   16508:	movt	r1, #1
   1650c:	bl	11354 <dcgettext@plt>
   16510:	mov	r6, r0
   16514:	mov	r0, #4
   16518:	mov	r1, r5
   1651c:	bl	19fe4 <__assert_fail@plt+0x89fc>
   16520:	mov	r3, r0
   16524:	str	r7, [sp]
   16528:	mov	r0, #0
   1652c:	mov	r1, r8
   16530:	mov	r2, r6
   16534:	b	165a0 <__assert_fail@plt+0x4fb8>
   16538:	movw	r1, #56710	; 0xdd86
   1653c:	movt	r1, #1
   16540:	mov	r0, #0
   16544:	mov	r2, #5
   16548:	bl	11354 <dcgettext@plt>
   1654c:	ldr	r6, [r4]
   16550:	movw	r1, #55146	; 0xd76a
   16554:	mov	r5, r0
   16558:	movt	r1, #1
   1655c:	mov	r0, r6
   16560:	bl	112b8 <strcmp@plt>
   16564:	cmp	r0, #0
   16568:	bne	16584 <__assert_fail@plt+0x4f9c>
   1656c:	movw	r1, #55943	; 0xda87
   16570:	mov	r0, #0
   16574:	mov	r2, #5
   16578:	movt	r1, #1
   1657c:	bl	11354 <dcgettext@plt>
   16580:	mov	r6, r0
   16584:	mov	r0, #4
   16588:	mov	r1, r6
   1658c:	bl	19fe4 <__assert_fail@plt+0x89fc>
   16590:	mov	r3, r0
   16594:	mov	r0, #0
   16598:	mov	r1, #0
   1659c:	mov	r2, r5
   165a0:	bl	113f0 <error@plt>
   165a4:	str	r9, [r4, #48]	; 0x30
   165a8:	mov	r5, #0
   165ac:	add	ip, r4, #16
   165b0:	ldr	r0, [sp, #96]	; 0x60
   165b4:	ldr	r1, [sp, #100]	; 0x64
   165b8:	ldr	r2, [sp, #16]
   165bc:	ldr	r3, [sp, #20]
   165c0:	ldr	r7, [sp, #112]	; 0x70
   165c4:	ldr	r6, [sp, #116]	; 0x74
   165c8:	str	r5, [r4, #8]
   165cc:	str	r5, [r4, #12]
   165d0:	stm	ip, {r0, r1, r2, r3, r7}
   165d4:	str	r6, [r4, #36]	; 0x24
   165d8:	ldr	r1, [sp, #8]
   165dc:	ldr	r0, [sp, #32]
   165e0:	str	r5, [r4, #72]	; 0x48
   165e4:	str	r5, [r4, #76]	; 0x4c
   165e8:	cmp	r1, #0
   165ec:	ldr	r1, [sp, #12]
   165f0:	mvneq	r1, #0
   165f4:	str	r1, [r4, #56]	; 0x38
   165f8:	strb	r5, [r4, #44]	; 0x2c
   165fc:	str	r0, [r4, #40]	; 0x28
   16600:	movw	r1, #55146	; 0xd76a
   16604:	ldr	r4, [r4]
   16608:	movt	r1, #1
   1660c:	mov	r0, r4
   16610:	bl	112b8 <strcmp@plt>
   16614:	cmp	r0, #0
   16618:	bne	16634 <__assert_fail@plt+0x504c>
   1661c:	movw	r1, #55943	; 0xda87
   16620:	mov	r0, #0
   16624:	mov	r2, #5
   16628:	movt	r1, #1
   1662c:	bl	11354 <dcgettext@plt>
   16630:	mov	r4, r0
   16634:	mov	r0, r9
   16638:	mov	r2, #0
   1663c:	mov	r3, #0
   16640:	str	r5, [sp]
   16644:	str	r4, [sp, #4]
   16648:	bl	15d6c <__assert_fail@plt+0x4784>
   1664c:	sub	sp, fp, #28
   16650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16654:	movw	r0, #54062	; 0xd32e
   16658:	movt	r0, #1
   1665c:	str	r0, [sp]
   16660:	mov	r0, #0
   16664:	mov	r1, #0
   16668:	mov	r2, r6
   1666c:	mov	r3, r7
   16670:	bl	113f0 <error@plt>
   16674:	ldr	r6, [r4]
   16678:	movw	r1, #55146	; 0xd76a
   1667c:	movt	r1, #1
   16680:	mov	r0, r6
   16684:	bl	112b8 <strcmp@plt>
   16688:	cmp	r0, #0
   1668c:	beq	1669c <__assert_fail@plt+0x50b4>
   16690:	cmp	r5, #2
   16694:	bcs	166bc <__assert_fail@plt+0x50d4>
   16698:	b	16710 <__assert_fail@plt+0x5128>
   1669c:	movw	r1, #55943	; 0xda87
   166a0:	mov	r0, #0
   166a4:	mov	r2, #5
   166a8:	movt	r1, #1
   166ac:	bl	11354 <dcgettext@plt>
   166b0:	mov	r6, r0
   166b4:	cmp	r5, #2
   166b8:	bcc	16710 <__assert_fail@plt+0x5128>
   166bc:	mov	r0, r9
   166c0:	bl	115d0 <close@plt>
   166c4:	cmp	r0, #0
   166c8:	beq	16710 <__assert_fail@plt+0x5128>
   166cc:	bl	114b0 <__errno_location@plt>
   166d0:	ldr	r7, [r0]
   166d4:	movw	r1, #56114	; 0xdb32
   166d8:	mov	r0, #0
   166dc:	mov	r2, #5
   166e0:	movt	r1, #1
   166e4:	bl	11354 <dcgettext@plt>
   166e8:	mov	r5, r0
   166ec:	mov	r0, #4
   166f0:	mov	r1, r6
   166f4:	bl	19fe4 <__assert_fail@plt+0x89fc>
   166f8:	mov	r3, r0
   166fc:	mov	r0, #0
   16700:	mov	r1, r7
   16704:	mov	r2, r5
   16708:	str	r9, [sp]
   1670c:	bl	113f0 <error@plt>
   16710:	ldr	r6, [r4]
   16714:	ldr	r5, [r4, #48]	; 0x30
   16718:	movw	r1, #55146	; 0xd76a
   1671c:	movt	r1, #1
   16720:	mov	r0, r6
   16724:	bl	112b8 <strcmp@plt>
   16728:	cmp	r0, #0
   1672c:	bne	16748 <__assert_fail@plt+0x5160>
   16730:	movw	r1, #55943	; 0xda87
   16734:	mov	r0, #0
   16738:	mov	r2, #5
   1673c:	movt	r1, #1
   16740:	bl	11354 <dcgettext@plt>
   16744:	mov	r6, r0
   16748:	add	r0, r5, #1
   1674c:	cmp	r0, #2
   16750:	bcc	167a8 <__assert_fail@plt+0x51c0>
   16754:	mov	r0, r5
   16758:	bl	115d0 <close@plt>
   1675c:	cmp	r0, #0
   16760:	beq	167a8 <__assert_fail@plt+0x51c0>
   16764:	bl	114b0 <__errno_location@plt>
   16768:	ldr	r8, [r0]
   1676c:	movw	r1, #56114	; 0xdb32
   16770:	mov	r0, #0
   16774:	mov	r2, #5
   16778:	movt	r1, #1
   1677c:	bl	11354 <dcgettext@plt>
   16780:	mov	r7, r0
   16784:	mov	r0, #4
   16788:	mov	r1, r6
   1678c:	bl	19fe4 <__assert_fail@plt+0x89fc>
   16790:	mov	r3, r0
   16794:	mov	r0, #0
   16798:	mov	r1, r8
   1679c:	mov	r2, r7
   167a0:	str	r5, [sp]
   167a4:	bl	113f0 <error@plt>
   167a8:	mvn	r0, #0
   167ac:	str	r0, [r4, #48]	; 0x30
   167b0:	sub	sp, fp, #28
   167b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167b8:	movw	r0, #56433	; 0xdc71
   167bc:	movw	r1, #56187	; 0xdb7b
   167c0:	movw	r3, #56453	; 0xdc85
   167c4:	movw	r2, #994	; 0x3e2
   167c8:	movt	r0, #1
   167cc:	movt	r1, #1
   167d0:	movt	r3, #1
   167d4:	bl	115e8 <__assert_fail@plt>
   167d8:	movw	r0, #56673	; 0xdd61
   167dc:	movw	r1, #56187	; 0xdb7b
   167e0:	movw	r3, #56453	; 0xdc85
   167e4:	movw	r2, #1071	; 0x42f
   167e8:	movt	r0, #1
   167ec:	movt	r1, #1
   167f0:	movt	r3, #1
   167f4:	bl	115e8 <__assert_fail@plt>
   167f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167fc:	add	fp, sp, #28
   16800:	sub	sp, sp, #116	; 0x74
   16804:	ldr	r7, [r0, #48]	; 0x30
   16808:	cmn	r7, #1
   1680c:	beq	16a30 <__assert_fail@plt+0x5448>
   16810:	ldr	r5, [r0]
   16814:	mov	sl, r1
   16818:	movw	r1, #55146	; 0xd76a
   1681c:	mov	r4, r0
   16820:	movt	r1, #1
   16824:	mov	r0, r5
   16828:	bl	112b8 <strcmp@plt>
   1682c:	cmp	r0, #0
   16830:	bne	16850 <__assert_fail@plt+0x5268>
   16834:	movw	r1, #55943	; 0xda87
   16838:	mov	r0, #0
   1683c:	mov	r2, #5
   16840:	movt	r1, #1
   16844:	bl	11354 <dcgettext@plt>
   16848:	ldr	r7, [r4, #48]	; 0x30
   1684c:	mov	r5, r0
   16850:	add	r2, sp, #8
   16854:	mov	r0, #3
   16858:	mov	r1, r7
   1685c:	bl	113a8 <__fxstat64@plt>
   16860:	cmp	r0, #0
   16864:	beq	168e8 <__assert_fail@plt+0x5300>
   16868:	bl	114b0 <__errno_location@plt>
   1686c:	mov	r7, r0
   16870:	ldr	r0, [r0]
   16874:	str	r0, [r4, #52]	; 0x34
   16878:	ldr	r6, [r4, #48]	; 0x30
   1687c:	add	r0, r6, #1
   16880:	cmp	r0, #2
   16884:	bcc	168d8 <__assert_fail@plt+0x52f0>
   16888:	mov	r0, r6
   1688c:	bl	115d0 <close@plt>
   16890:	cmp	r0, #0
   16894:	beq	168d8 <__assert_fail@plt+0x52f0>
   16898:	ldr	r8, [r7]
   1689c:	movw	r1, #56114	; 0xdb32
   168a0:	mov	r0, #0
   168a4:	mov	r2, #5
   168a8:	movt	r1, #1
   168ac:	bl	11354 <dcgettext@plt>
   168b0:	mov	r7, r0
   168b4:	mov	r0, #4
   168b8:	mov	r1, r5
   168bc:	bl	19fe4 <__assert_fail@plt+0x89fc>
   168c0:	mov	r3, r0
   168c4:	mov	r0, #0
   168c8:	mov	r1, r8
   168cc:	mov	r2, r7
   168d0:	str	r6, [sp]
   168d4:	bl	113f0 <error@plt>
   168d8:	mvn	r0, #0
   168dc:	str	r0, [r4, #48]	; 0x30
   168e0:	sub	sp, fp, #28
   168e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e8:	ldr	r0, [r4, #40]	; 0x28
   168ec:	and	r0, r0, #61440	; 0xf000
   168f0:	cmp	r0, #32768	; 0x8000
   168f4:	bne	169c0 <__assert_fail@plt+0x53d8>
   168f8:	mov	r7, r4
   168fc:	ldr	r2, [sp, #56]	; 0x38
   16900:	ldr	r3, [sp, #60]	; 0x3c
   16904:	ldr	r0, [r7, #8]!
   16908:	ldr	r1, [r7, #4]
   1690c:	subs	r6, r2, r0
   16910:	sbcs	r6, r3, r1
   16914:	bge	1697c <__assert_fail@plt+0x5394>
   16918:	movw	r1, #56789	; 0xddd5
   1691c:	mov	r0, #0
   16920:	mov	r2, #5
   16924:	mov	r9, #0
   16928:	movt	r1, #1
   1692c:	bl	11354 <dcgettext@plt>
   16930:	mov	r8, r0
   16934:	mov	r0, #0
   16938:	mov	r1, #3
   1693c:	mov	r2, r5
   16940:	bl	1a260 <__assert_fail@plt+0x8c78>
   16944:	mov	r3, r0
   16948:	mov	r0, #0
   1694c:	mov	r1, #0
   16950:	mov	r2, r8
   16954:	bl	113f0 <error@plt>
   16958:	ldr	r0, [r4, #48]	; 0x30
   1695c:	mov	r2, #0
   16960:	mov	r3, #0
   16964:	str	r9, [sp]
   16968:	str	r5, [sp, #4]
   1696c:	bl	15d6c <__assert_fail@plt+0x4784>
   16970:	str	r9, [r7]
   16974:	str	r9, [r7, #4]
   16978:	b	169c0 <__assert_fail@plt+0x53d8>
   1697c:	eor	r0, r2, r0
   16980:	eor	r1, r3, r1
   16984:	orrs	r0, r0, r1
   16988:	bne	169c0 <__assert_fail@plt+0x53d8>
   1698c:	ldrd	r0, [r4, #16]
   16990:	ldr	r2, [sp, #88]	; 0x58
   16994:	ldr	r3, [sp, #92]	; 0x5c
   16998:	mov	r7, #0
   1699c:	cmp	r0, r2
   169a0:	mov	r0, #0
   169a4:	movwgt	r0, #1
   169a8:	sublt	r0, r0, #1
   169ac:	cmp	r1, r3
   169b0:	movwgt	r7, #1
   169b4:	sublt	r7, r7, #1
   169b8:	cmn	r7, r0, lsl #1
   169bc:	beq	16a30 <__assert_fail@plt+0x5448>
   169c0:	movw	r0, #61890	; 0xf1c2
   169c4:	movt	r0, #2
   169c8:	ldrb	r1, [r0]
   169cc:	mov	r0, #0
   169d0:	cmp	r1, #1
   169d4:	bne	169e4 <__assert_fail@plt+0x53fc>
   169d8:	ldr	r0, [sl]
   169dc:	subs	r0, r0, r4
   169e0:	movwne	r0, #1
   169e4:	ldr	r2, [r4, #48]	; 0x30
   169e8:	mvn	r1, #0
   169ec:	str	r1, [sp]
   169f0:	str	r1, [sp, #4]
   169f4:	mov	r1, r5
   169f8:	bl	15c04 <__assert_fail@plt+0x461c>
   169fc:	ldrd	r2, [r4, #8]
   16a00:	adds	r2, r2, r0
   16a04:	adc	r3, r3, r1
   16a08:	orrs	r0, r0, r1
   16a0c:	strd	r2, [r4, #8]
   16a10:	beq	16a30 <__assert_fail@plt+0x5448>
   16a14:	movw	r0, #61876	; 0xf1b4
   16a18:	str	r4, [sl]
   16a1c:	movt	r0, #2
   16a20:	ldr	r0, [r0]
   16a24:	bl	11384 <fflush_unlocked@plt>
   16a28:	cmp	r0, #0
   16a2c:	bne	16a38 <__assert_fail@plt+0x5450>
   16a30:	sub	sp, fp, #28
   16a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a38:	bl	114b0 <__errno_location@plt>
   16a3c:	ldr	r4, [r0]
   16a40:	movw	r1, #54632	; 0xd568
   16a44:	mov	r0, #0
   16a48:	mov	r2, #5
   16a4c:	movt	r1, #1
   16a50:	bl	11354 <dcgettext@plt>
   16a54:	mov	r2, r0
   16a58:	mov	r0, #1
   16a5c:	mov	r1, r4
   16a60:	bl	113f0 <error@plt>
   16a64:	push	{fp, lr}
   16a68:	mov	fp, sp
   16a6c:	mov	r0, #13
   16a70:	bl	112ac <raise@plt>
   16a74:	mov	r0, #1
   16a78:	bl	11468 <exit@plt>
   16a7c:	mov	r0, #1
   16a80:	b	116e8 <__assert_fail@plt+0x100>
   16a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a88:	add	fp, sp, #28
   16a8c:	sub	sp, sp, #12
   16a90:	mov	r4, r3
   16a94:	mov	r6, r2
   16a98:	mov	r5, r1
   16a9c:	mov	sl, r0
   16aa0:	bl	11474 <strlen@plt>
   16aa4:	ldr	r8, [r5]
   16aa8:	cmp	r8, #0
   16aac:	beq	16b68 <__assert_fail@plt+0x5580>
   16ab0:	mov	r7, r0
   16ab4:	mov	r0, #0
   16ab8:	add	r9, r5, #4
   16abc:	mov	r5, #0
   16ac0:	str	r6, [sp, #4]
   16ac4:	str	r0, [sp]
   16ac8:	mvn	r0, #0
   16acc:	str	r0, [sp, #8]
   16ad0:	mov	r0, r8
   16ad4:	mov	r1, sl
   16ad8:	mov	r2, r7
   16adc:	bl	115b8 <strncmp@plt>
   16ae0:	cmp	r0, #0
   16ae4:	bne	16b3c <__assert_fail@plt+0x5554>
   16ae8:	mov	r0, r8
   16aec:	bl	11474 <strlen@plt>
   16af0:	cmp	r0, r7
   16af4:	beq	16b6c <__assert_fail@plt+0x5584>
   16af8:	ldr	r0, [sp, #8]
   16afc:	cmn	r0, #1
   16b00:	beq	16b38 <__assert_fail@plt+0x5550>
   16b04:	ldr	r0, [sp, #4]
   16b08:	cmp	r0, #0
   16b0c:	beq	16b2c <__assert_fail@plt+0x5544>
   16b10:	ldr	r1, [sp, #8]
   16b14:	mov	r2, r4
   16b18:	mla	r0, r1, r4, r0
   16b1c:	mov	r1, r6
   16b20:	bl	11348 <memcmp@plt>
   16b24:	cmp	r0, #0
   16b28:	beq	16b3c <__assert_fail@plt+0x5554>
   16b2c:	mov	r0, #1
   16b30:	str	r0, [sp]
   16b34:	b	16b3c <__assert_fail@plt+0x5554>
   16b38:	str	r5, [sp, #8]
   16b3c:	ldr	r8, [r9, r5, lsl #2]
   16b40:	add	r6, r6, r4
   16b44:	add	r5, r5, #1
   16b48:	cmp	r8, #0
   16b4c:	bne	16ad0 <__assert_fail@plt+0x54e8>
   16b50:	ldr	r0, [sp]
   16b54:	tst	r0, #1
   16b58:	ldr	r0, [sp, #8]
   16b5c:	mvnne	r0, #1
   16b60:	sub	sp, fp, #28
   16b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b68:	mvn	r5, #0
   16b6c:	mov	r0, r5
   16b70:	sub	sp, fp, #28
   16b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b78:	push	{r4, r5, r6, r7, fp, lr}
   16b7c:	add	fp, sp, #16
   16b80:	mov	r5, r0
   16b84:	ldr	r0, [r1]
   16b88:	mvn	r4, #0
   16b8c:	cmp	r0, #0
   16b90:	beq	16bc0 <__assert_fail@plt+0x55d8>
   16b94:	add	r7, r1, #4
   16b98:	mov	r6, #0
   16b9c:	mov	r1, r5
   16ba0:	bl	112b8 <strcmp@plt>
   16ba4:	cmp	r0, #0
   16ba8:	moveq	r0, r6
   16bac:	popeq	{r4, r5, r6, r7, fp, pc}
   16bb0:	ldr	r0, [r7, r6, lsl #2]
   16bb4:	add	r6, r6, #1
   16bb8:	cmp	r0, #0
   16bbc:	bne	16b9c <__assert_fail@plt+0x55b4>
   16bc0:	mov	r0, r4
   16bc4:	pop	{r4, r5, r6, r7, fp, pc}
   16bc8:	push	{r4, r5, r6, sl, fp, lr}
   16bcc:	add	fp, sp, #16
   16bd0:	sub	sp, sp, #8
   16bd4:	mov	r4, r1
   16bd8:	movw	r1, #57254	; 0xdfa6
   16bdc:	mov	r5, r0
   16be0:	movw	r0, #57227	; 0xdf8b
   16be4:	cmn	r2, #1
   16be8:	mov	r2, #5
   16bec:	movt	r0, #1
   16bf0:	movt	r1, #1
   16bf4:	moveq	r1, r0
   16bf8:	mov	r0, #0
   16bfc:	bl	11354 <dcgettext@plt>
   16c00:	mov	r6, r0
   16c04:	mov	r0, #0
   16c08:	mov	r1, #8
   16c0c:	mov	r2, r4
   16c10:	bl	19f3c <__assert_fail@plt+0x8954>
   16c14:	mov	r4, r0
   16c18:	mov	r0, #1
   16c1c:	mov	r1, r5
   16c20:	bl	1a4fc <__assert_fail@plt+0x8f14>
   16c24:	str	r0, [sp]
   16c28:	mov	r0, #0
   16c2c:	mov	r1, #0
   16c30:	mov	r2, r6
   16c34:	mov	r3, r4
   16c38:	bl	113f0 <error@plt>
   16c3c:	sub	sp, fp, #16
   16c40:	pop	{r4, r5, r6, sl, fp, pc}
   16c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c48:	add	fp, sp, #28
   16c4c:	sub	sp, sp, #4
   16c50:	mov	r5, r1
   16c54:	movw	r1, #57283	; 0xdfc3
   16c58:	mov	sl, r2
   16c5c:	mov	r7, r0
   16c60:	mov	r0, #0
   16c64:	mov	r2, #5
   16c68:	mov	r8, #0
   16c6c:	movt	r1, #1
   16c70:	bl	11354 <dcgettext@plt>
   16c74:	movw	r4, #61872	; 0xf1b0
   16c78:	movt	r4, #2
   16c7c:	ldr	r1, [r4]
   16c80:	bl	112a0 <fputs_unlocked@plt>
   16c84:	ldr	r6, [r7]
   16c88:	cmp	r6, #0
   16c8c:	beq	16d2c <__assert_fail@plt+0x5744>
   16c90:	add	r9, r7, #4
   16c94:	mov	r7, #0
   16c98:	str	sl, [sp]
   16c9c:	cmp	r8, #0
   16ca0:	beq	16cbc <__assert_fail@plt+0x56d4>
   16ca4:	mov	r0, r7
   16ca8:	mov	r1, r5
   16cac:	mov	r2, sl
   16cb0:	bl	11348 <memcmp@plt>
   16cb4:	cmp	r0, #0
   16cb8:	beq	16ce8 <__assert_fail@plt+0x5700>
   16cbc:	ldr	r7, [r4]
   16cc0:	mov	r0, r6
   16cc4:	bl	1a50c <__assert_fail@plt+0x8f24>
   16cc8:	movw	r2, #57304	; 0xdfd8
   16ccc:	mov	r3, r0
   16cd0:	mov	r0, r7
   16cd4:	mov	r1, #1
   16cd8:	movt	r2, #1
   16cdc:	bl	114f8 <__fprintf_chk@plt>
   16ce0:	mov	r7, r5
   16ce4:	b	16d18 <__assert_fail@plt+0x5730>
   16ce8:	mov	sl, r9
   16cec:	ldr	r9, [r4]
   16cf0:	mov	r0, r6
   16cf4:	bl	1a50c <__assert_fail@plt+0x8f24>
   16cf8:	mov	r3, r0
   16cfc:	mov	r0, r9
   16d00:	mov	r9, sl
   16d04:	ldr	sl, [sp]
   16d08:	movw	r2, #57312	; 0xdfe0
   16d0c:	mov	r1, #1
   16d10:	movt	r2, #1
   16d14:	bl	114f8 <__fprintf_chk@plt>
   16d18:	ldr	r6, [r9, -r8, lsl #2]
   16d1c:	add	r5, r5, sl
   16d20:	sub	r8, r8, #1
   16d24:	cmp	r6, #0
   16d28:	bne	16c9c <__assert_fail@plt+0x56b4>
   16d2c:	ldr	r0, [r4]
   16d30:	ldr	r1, [r0, #20]
   16d34:	ldr	r2, [r0, #24]
   16d38:	cmp	r1, r2
   16d3c:	addcc	r2, r1, #1
   16d40:	strcc	r2, [r0, #20]
   16d44:	movcc	r0, #10
   16d48:	strbcc	r0, [r1]
   16d4c:	subcc	sp, fp, #28
   16d50:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d54:	mov	r1, #10
   16d58:	sub	sp, fp, #28
   16d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d60:	b	11540 <__overflow@plt>
   16d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d68:	add	fp, sp, #28
   16d6c:	sub	sp, sp, #20
   16d70:	mov	r9, r0
   16d74:	ldr	r0, [fp, #16]
   16d78:	mov	r8, r3
   16d7c:	mov	sl, r2
   16d80:	mov	r7, r1
   16d84:	cmp	r0, #0
   16d88:	beq	16e60 <__assert_fail@plt+0x5878>
   16d8c:	mov	r0, r7
   16d90:	str	r9, [sp, #8]
   16d94:	str	r8, [sp, #16]
   16d98:	bl	11474 <strlen@plt>
   16d9c:	ldr	r9, [sl]
   16da0:	cmp	r9, #0
   16da4:	beq	16ea0 <__assert_fail@plt+0x58b8>
   16da8:	str	sl, [sp, #4]
   16dac:	add	r8, sl, #4
   16db0:	ldr	sl, [sp, #16]
   16db4:	mov	r4, r0
   16db8:	mov	r0, #0
   16dbc:	mvn	r6, #0
   16dc0:	mov	r5, #0
   16dc4:	str	r0, [sp, #12]
   16dc8:	mov	r0, r9
   16dcc:	mov	r1, r7
   16dd0:	mov	r2, r4
   16dd4:	bl	115b8 <strncmp@plt>
   16dd8:	cmp	r0, #0
   16ddc:	bne	16e2c <__assert_fail@plt+0x5844>
   16de0:	mov	r0, r9
   16de4:	bl	11474 <strlen@plt>
   16de8:	cmp	r0, r4
   16dec:	beq	16eac <__assert_fail@plt+0x58c4>
   16df0:	cmn	r6, #1
   16df4:	beq	16e28 <__assert_fail@plt+0x5840>
   16df8:	ldr	r0, [sp, #16]
   16dfc:	cmp	r0, #0
   16e00:	beq	16e1c <__assert_fail@plt+0x5834>
   16e04:	ldr	r2, [fp, #8]
   16e08:	mov	r1, sl
   16e0c:	mla	r0, r6, r2, r0
   16e10:	bl	11348 <memcmp@plt>
   16e14:	cmp	r0, #0
   16e18:	beq	16e2c <__assert_fail@plt+0x5844>
   16e1c:	mov	r0, #1
   16e20:	str	r0, [sp, #12]
   16e24:	b	16e2c <__assert_fail@plt+0x5844>
   16e28:	mov	r6, r5
   16e2c:	ldr	r9, [r8, r5, lsl #2]
   16e30:	ldr	r0, [fp, #8]
   16e34:	add	r5, r5, #1
   16e38:	add	sl, sl, r0
   16e3c:	cmp	r9, #0
   16e40:	bne	16dc8 <__assert_fail@plt+0x57e0>
   16e44:	ldr	r0, [sp, #12]
   16e48:	ldr	r8, [sp, #16]
   16e4c:	ldr	sl, [sp, #4]
   16e50:	ldr	r9, [sp, #8]
   16e54:	tst	r0, #1
   16e58:	beq	16ebc <__assert_fail@plt+0x58d4>
   16e5c:	b	16ec8 <__assert_fail@plt+0x58e0>
   16e60:	ldr	r0, [sl]
   16e64:	movw	r4, #57227	; 0xdf8b
   16e68:	movt	r4, #1
   16e6c:	cmp	r0, #0
   16e70:	beq	16edc <__assert_fail@plt+0x58f4>
   16e74:	add	r5, sl, #4
   16e78:	mov	r6, #0
   16e7c:	mov	r1, r7
   16e80:	bl	112b8 <strcmp@plt>
   16e84:	cmp	r0, #0
   16e88:	beq	16ebc <__assert_fail@plt+0x58d4>
   16e8c:	ldr	r0, [r5, r6, lsl #2]
   16e90:	add	r6, r6, #1
   16e94:	cmp	r0, #0
   16e98:	bne	16e7c <__assert_fail@plt+0x5894>
   16e9c:	b	16edc <__assert_fail@plt+0x58f4>
   16ea0:	ldr	r8, [sp, #16]
   16ea4:	ldr	r9, [sp, #8]
   16ea8:	b	16ed4 <__assert_fail@plt+0x58ec>
   16eac:	ldr	r8, [sp, #16]
   16eb0:	ldr	sl, [sp, #4]
   16eb4:	ldr	r9, [sp, #8]
   16eb8:	mov	r6, r5
   16ebc:	cmn	r6, #1
   16ec0:	bgt	16f44 <__assert_fail@plt+0x595c>
   16ec4:	beq	16ed4 <__assert_fail@plt+0x58ec>
   16ec8:	movw	r4, #57254	; 0xdfa6
   16ecc:	movt	r4, #1
   16ed0:	b	16edc <__assert_fail@plt+0x58f4>
   16ed4:	movw	r4, #57227	; 0xdf8b
   16ed8:	movt	r4, #1
   16edc:	ldr	r6, [fp, #12]
   16ee0:	mov	r0, #0
   16ee4:	mov	r1, r4
   16ee8:	mov	r2, #5
   16eec:	bl	11354 <dcgettext@plt>
   16ef0:	mov	r4, r0
   16ef4:	mov	r0, #0
   16ef8:	mov	r1, #8
   16efc:	mov	r2, r7
   16f00:	bl	19f3c <__assert_fail@plt+0x8954>
   16f04:	mov	r5, r0
   16f08:	mov	r0, #1
   16f0c:	mov	r1, r9
   16f10:	bl	1a4fc <__assert_fail@plt+0x8f14>
   16f14:	str	r0, [sp]
   16f18:	mov	r0, #0
   16f1c:	mov	r1, #0
   16f20:	mov	r2, r4
   16f24:	mov	r3, r5
   16f28:	bl	113f0 <error@plt>
   16f2c:	ldr	r2, [fp, #8]
   16f30:	mov	r0, sl
   16f34:	mov	r1, r8
   16f38:	bl	16c44 <__assert_fail@plt+0x565c>
   16f3c:	blx	r6
   16f40:	mvn	r6, #0
   16f44:	mov	r0, r6
   16f48:	sub	sp, fp, #28
   16f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f54:	add	fp, sp, #24
   16f58:	ldr	r6, [r1]
   16f5c:	cmp	r6, #0
   16f60:	beq	16fc4 <__assert_fail@plt+0x59dc>
   16f64:	mov	r8, r1
   16f68:	mov	r7, r2
   16f6c:	mov	r1, r2
   16f70:	mov	r2, r3
   16f74:	mov	r4, r3
   16f78:	mov	r9, r0
   16f7c:	bl	11348 <memcmp@plt>
   16f80:	cmp	r0, #0
   16f84:	beq	16fbc <__assert_fail@plt+0x59d4>
   16f88:	add	r7, r7, r4
   16f8c:	add	r5, r8, #4
   16f90:	ldr	r6, [r5]
   16f94:	cmp	r6, #0
   16f98:	beq	16fc4 <__assert_fail@plt+0x59dc>
   16f9c:	mov	r0, r9
   16fa0:	mov	r1, r7
   16fa4:	mov	r2, r4
   16fa8:	bl	11348 <memcmp@plt>
   16fac:	add	r7, r7, r4
   16fb0:	add	r5, r5, #4
   16fb4:	cmp	r0, #0
   16fb8:	bne	16f90 <__assert_fail@plt+0x59a8>
   16fbc:	mov	r0, r6
   16fc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16fc4:	mov	r6, #0
   16fc8:	mov	r0, r6
   16fcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16fd0:	sub	r0, r0, #1
   16fd4:	ldrb	r3, [r0, #1]!
   16fd8:	cmp	r3, #47	; 0x2f
   16fdc:	beq	16fd4 <__assert_fail@plt+0x59ec>
   16fe0:	mov	r2, #0
   16fe4:	mov	r1, r0
   16fe8:	b	17004 <__assert_fail@plt+0x5a1c>
   16fec:	cmp	r3, #0
   16ff0:	bxeq	lr
   16ff4:	tst	r2, #1
   16ff8:	mov	r2, #0
   16ffc:	movne	r0, r1
   17000:	ldrb	r3, [r1, #1]!
   17004:	uxtb	r3, r3
   17008:	cmp	r3, #47	; 0x2f
   1700c:	bne	16fec <__assert_fail@plt+0x5a04>
   17010:	ldrb	r3, [r1, #1]!
   17014:	mov	r2, #1
   17018:	b	17004 <__assert_fail@plt+0x5a1c>
   1701c:	push	{r4, sl, fp, lr}
   17020:	add	fp, sp, #8
   17024:	mov	r4, r0
   17028:	bl	11474 <strlen@plt>
   1702c:	mov	r1, r0
   17030:	sub	r2, r4, #1
   17034:	mov	r0, r1
   17038:	cmp	r1, #2
   1703c:	popcc	{r4, sl, fp, pc}
   17040:	ldrb	r3, [r2, r0]
   17044:	sub	r1, r0, #1
   17048:	cmp	r3, #47	; 0x2f
   1704c:	beq	17034 <__assert_fail@plt+0x5a4c>
   17050:	pop	{r4, sl, fp, pc}
   17054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17058:	add	fp, sp, #24
   1705c:	vpush	{d8}
   17060:	sub	sp, sp, #8
   17064:	mov	r4, r1
   17068:	add	r1, sp, #4
   1706c:	mov	r5, r0
   17070:	bl	114e0 <strtod@plt>
   17074:	ldr	r7, [sp, #4]
   17078:	vmov.f64	d8, d0
   1707c:	ldrb	r0, [r7]
   17080:	cmp	r0, #0
   17084:	beq	170c0 <__assert_fail@plt+0x5ad8>
   17088:	bl	114b0 <__errno_location@plt>
   1708c:	ldr	r8, [r0]
   17090:	mov	r6, r0
   17094:	mov	r1, sp
   17098:	mov	r0, r5
   1709c:	bl	1c318 <__assert_fail@plt+0xad30>
   170a0:	ldr	r0, [sp]
   170a4:	cmp	r7, r0
   170a8:	bcs	170bc <__assert_fail@plt+0x5ad4>
   170ac:	str	r0, [sp, #4]
   170b0:	mov	r7, r0
   170b4:	vmov.f64	d8, d0
   170b8:	b	170c0 <__assert_fail@plt+0x5ad8>
   170bc:	str	r8, [r6]
   170c0:	cmp	r4, #0
   170c4:	vmov.f64	d0, d8
   170c8:	strne	r7, [r4]
   170cc:	sub	sp, fp, #32
   170d0:	vpop	{d8}
   170d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170d8:	movw	r1, #61908	; 0xf1d4
   170dc:	movt	r1, #2
   170e0:	str	r0, [r1]
   170e4:	bx	lr
   170e8:	movw	r1, #61912	; 0xf1d8
   170ec:	movt	r1, #2
   170f0:	strb	r0, [r1]
   170f4:	bx	lr
   170f8:	push	{r4, r5, r6, sl, fp, lr}
   170fc:	add	fp, sp, #16
   17100:	sub	sp, sp, #8
   17104:	movw	r0, #61876	; 0xf1b4
   17108:	movt	r0, #2
   1710c:	ldr	r0, [r0]
   17110:	bl	1c380 <__assert_fail@plt+0xad98>
   17114:	cmp	r0, #0
   17118:	beq	17140 <__assert_fail@plt+0x5b58>
   1711c:	movw	r0, #61912	; 0xf1d8
   17120:	movt	r0, #2
   17124:	ldrb	r0, [r0]
   17128:	cmp	r0, #0
   1712c:	beq	17160 <__assert_fail@plt+0x5b78>
   17130:	bl	114b0 <__errno_location@plt>
   17134:	ldr	r0, [r0]
   17138:	cmp	r0, #32
   1713c:	bne	17160 <__assert_fail@plt+0x5b78>
   17140:	movw	r0, #61872	; 0xf1b0
   17144:	movt	r0, #2
   17148:	ldr	r0, [r0]
   1714c:	bl	1c380 <__assert_fail@plt+0xad98>
   17150:	cmp	r0, #0
   17154:	subeq	sp, fp, #16
   17158:	popeq	{r4, r5, r6, sl, fp, pc}
   1715c:	b	171d0 <__assert_fail@plt+0x5be8>
   17160:	movw	r1, #54632	; 0xd568
   17164:	mov	r0, #0
   17168:	mov	r2, #5
   1716c:	movt	r1, #1
   17170:	bl	11354 <dcgettext@plt>
   17174:	mov	r4, r0
   17178:	movw	r0, #61908	; 0xf1d4
   1717c:	movt	r0, #2
   17180:	ldr	r6, [r0]
   17184:	bl	114b0 <__errno_location@plt>
   17188:	ldr	r5, [r0]
   1718c:	cmp	r6, #0
   17190:	bne	171ac <__assert_fail@plt+0x5bc4>
   17194:	movw	r2, #57314	; 0xdfe2
   17198:	mov	r0, #0
   1719c:	mov	r1, r5
   171a0:	mov	r3, r4
   171a4:	movt	r2, #1
   171a8:	b	171cc <__assert_fail@plt+0x5be4>
   171ac:	mov	r0, r6
   171b0:	bl	1a184 <__assert_fail@plt+0x8b9c>
   171b4:	movw	r2, #55150	; 0xd76e
   171b8:	mov	r3, r0
   171bc:	str	r4, [sp]
   171c0:	mov	r0, #0
   171c4:	mov	r1, r5
   171c8:	movt	r2, #1
   171cc:	bl	113f0 <error@plt>
   171d0:	movw	r0, #61784	; 0xf158
   171d4:	movt	r0, #2
   171d8:	ldr	r0, [r0]
   171dc:	bl	1130c <_exit@plt>
   171e0:	push	{r4, r5, r6, sl, fp, lr}
   171e4:	add	fp, sp, #16
   171e8:	mov	r5, r0
   171ec:	mov	r4, r0
   171f0:	ldrb	r6, [r5], #-1
   171f4:	bl	16fd0 <__assert_fail@plt+0x59e8>
   171f8:	sub	r2, r0, r4
   171fc:	sub	r0, r6, #47	; 0x2f
   17200:	clz	r0, r0
   17204:	lsr	r1, r0, #5
   17208:	mov	r0, r2
   1720c:	cmp	r2, r1
   17210:	popls	{r4, r5, r6, sl, fp, pc}
   17214:	ldrb	r3, [r5, r0]
   17218:	sub	r2, r0, #1
   1721c:	cmp	r3, #47	; 0x2f
   17220:	beq	17208 <__assert_fail@plt+0x5c20>
   17224:	pop	{r4, r5, r6, sl, fp, pc}
   17228:	push	{r4, r5, r6, sl, fp, lr}
   1722c:	add	fp, sp, #16
   17230:	mov	r6, r0
   17234:	mov	r4, r0
   17238:	ldrb	r5, [r6], #-1
   1723c:	bl	16fd0 <__assert_fail@plt+0x59e8>
   17240:	sub	r1, r0, r4
   17244:	sub	r0, r5, #47	; 0x2f
   17248:	clz	r0, r0
   1724c:	lsr	r0, r0, #5
   17250:	mov	r5, r1
   17254:	cmp	r1, r0
   17258:	bls	1726c <__assert_fail@plt+0x5c84>
   1725c:	ldrb	r2, [r6, r5]
   17260:	sub	r1, r5, #1
   17264:	cmp	r2, #47	; 0x2f
   17268:	beq	17250 <__assert_fail@plt+0x5c68>
   1726c:	cmp	r5, #0
   17270:	mov	r0, r5
   17274:	addeq	r0, r0, #1
   17278:	add	r0, r0, #1
   1727c:	bl	1c294 <__assert_fail@plt+0xacac>
   17280:	mov	r6, r0
   17284:	cmp	r0, #0
   17288:	beq	172b4 <__assert_fail@plt+0x5ccc>
   1728c:	mov	r0, r6
   17290:	mov	r1, r4
   17294:	mov	r2, r5
   17298:	bl	11318 <memcpy@plt>
   1729c:	cmp	r5, #0
   172a0:	moveq	r0, #46	; 0x2e
   172a4:	moveq	r5, #1
   172a8:	strbeq	r0, [r6]
   172ac:	mov	r0, #0
   172b0:	strb	r0, [r6, r5]
   172b4:	mov	r0, r6
   172b8:	pop	{r4, r5, r6, sl, fp, pc}
   172bc:	sub	sp, sp, #8
   172c0:	push	{r4, r5, r6, r7, fp, lr}
   172c4:	add	fp, sp, #16
   172c8:	sub	sp, sp, #8
   172cc:	mov	r5, r0
   172d0:	add	r0, fp, #8
   172d4:	cmp	r1, #11
   172d8:	str	r3, [fp, #12]
   172dc:	str	r2, [fp, #8]
   172e0:	str	r0, [sp, #4]
   172e4:	bhi	17320 <__assert_fail@plt+0x5d38>
   172e8:	mov	r0, #1
   172ec:	movw	r2, #1300	; 0x514
   172f0:	tst	r2, r0, lsl r1
   172f4:	bne	173e0 <__assert_fail@plt+0x5df8>
   172f8:	movw	r2, #2570	; 0xa0a
   172fc:	tst	r2, r0, lsl r1
   17300:	bne	17348 <__assert_fail@plt+0x5d60>
   17304:	cmp	r1, #0
   17308:	bne	17320 <__assert_fail@plt+0x5d38>
   1730c:	ldr	r0, [sp, #4]
   17310:	add	r1, r0, #4
   17314:	str	r1, [sp, #4]
   17318:	mov	r1, #0
   1731c:	b	173ec <__assert_fail@plt+0x5e04>
   17320:	sub	r0, r1, #1024	; 0x400
   17324:	cmp	r0, #10
   17328:	bhi	173e0 <__assert_fail@plt+0x5df8>
   1732c:	mov	r2, #1
   17330:	movw	r3, #645	; 0x285
   17334:	tst	r3, r2, lsl r0
   17338:	bne	173e0 <__assert_fail@plt+0x5df8>
   1733c:	movw	r3, #1282	; 0x502
   17340:	tst	r3, r2, lsl r0
   17344:	beq	17354 <__assert_fail@plt+0x5d6c>
   17348:	mov	r0, r5
   1734c:	bl	11534 <fcntl64@plt>
   17350:	b	173f8 <__assert_fail@plt+0x5e10>
   17354:	cmp	r0, #6
   17358:	bne	173e0 <__assert_fail@plt+0x5df8>
   1735c:	ldr	r0, [sp, #4]
   17360:	movw	r7, #61916	; 0xf1dc
   17364:	movt	r7, #2
   17368:	add	r1, r0, #4
   1736c:	str	r1, [sp, #4]
   17370:	ldr	r6, [r0]
   17374:	ldr	r0, [r7]
   17378:	cmp	r0, #0
   1737c:	blt	1741c <__assert_fail@plt+0x5e34>
   17380:	mov	r0, r5
   17384:	movw	r1, #1030	; 0x406
   17388:	mov	r2, r6
   1738c:	bl	11534 <fcntl64@plt>
   17390:	mov	r4, r0
   17394:	cmn	r0, #1
   17398:	bgt	17410 <__assert_fail@plt+0x5e28>
   1739c:	bl	114b0 <__errno_location@plt>
   173a0:	ldr	r0, [r0]
   173a4:	cmp	r0, #22
   173a8:	bne	17410 <__assert_fail@plt+0x5e28>
   173ac:	mov	r0, r5
   173b0:	mov	r1, #0
   173b4:	mov	r2, r6
   173b8:	bl	11534 <fcntl64@plt>
   173bc:	mov	r4, r0
   173c0:	cmp	r0, #0
   173c4:	blt	173fc <__assert_fail@plt+0x5e14>
   173c8:	mvn	r0, #0
   173cc:	str	r0, [r7]
   173d0:	mov	r0, #1
   173d4:	cmp	r0, #0
   173d8:	bne	17448 <__assert_fail@plt+0x5e60>
   173dc:	b	173fc <__assert_fail@plt+0x5e14>
   173e0:	ldr	r0, [sp, #4]
   173e4:	add	r2, r0, #4
   173e8:	str	r2, [sp, #4]
   173ec:	ldr	r2, [r0]
   173f0:	mov	r0, r5
   173f4:	bl	11534 <fcntl64@plt>
   173f8:	mov	r4, r0
   173fc:	mov	r0, r4
   17400:	sub	sp, fp, #16
   17404:	pop	{r4, r5, r6, r7, fp, lr}
   17408:	add	sp, sp, #8
   1740c:	bx	lr
   17410:	mov	r0, #1
   17414:	str	r0, [r7]
   17418:	b	173fc <__assert_fail@plt+0x5e14>
   1741c:	mov	r0, r5
   17420:	mov	r1, #0
   17424:	mov	r2, r6
   17428:	bl	11534 <fcntl64@plt>
   1742c:	mov	r4, r0
   17430:	ldr	r0, [r7]
   17434:	add	r0, r0, #1
   17438:	clz	r0, r0
   1743c:	lsr	r0, r0, #5
   17440:	cmp	r0, #0
   17444:	beq	173fc <__assert_fail@plt+0x5e14>
   17448:	cmp	r4, #0
   1744c:	blt	173fc <__assert_fail@plt+0x5e14>
   17450:	mov	r0, r4
   17454:	mov	r1, #1
   17458:	bl	11534 <fcntl64@plt>
   1745c:	cmp	r0, #0
   17460:	blt	1747c <__assert_fail@plt+0x5e94>
   17464:	orr	r2, r0, #1
   17468:	mov	r0, r4
   1746c:	mov	r1, #2
   17470:	bl	11534 <fcntl64@plt>
   17474:	cmn	r0, #1
   17478:	bne	173fc <__assert_fail@plt+0x5e14>
   1747c:	bl	114b0 <__errno_location@plt>
   17480:	ldr	r6, [r0]
   17484:	mov	r5, r0
   17488:	mov	r0, r4
   1748c:	bl	115d0 <close@plt>
   17490:	str	r6, [r5]
   17494:	mvn	r4, #0
   17498:	b	173fc <__assert_fail@plt+0x5e14>
   1749c:	sub	sp, sp, #8
   174a0:	push	{fp, lr}
   174a4:	mov	fp, sp
   174a8:	sub	sp, sp, #8
   174ac:	str	r2, [fp, #8]
   174b0:	mov	r2, #0
   174b4:	tst	r1, #64	; 0x40
   174b8:	str	r3, [fp, #12]
   174bc:	addne	r2, fp, #8
   174c0:	orrne	r2, r2, #4
   174c4:	strne	r2, [sp, #4]
   174c8:	ldrne	r2, [fp, #8]
   174cc:	bl	113fc <open64@plt>
   174d0:	bl	1a6a8 <__assert_fail@plt+0x90c0>
   174d4:	mov	sp, fp
   174d8:	pop	{fp, lr}
   174dc:	add	sp, sp, #8
   174e0:	bx	lr
   174e4:	push	{r4, r5, r6, sl, fp, lr}
   174e8:	add	fp, sp, #16
   174ec:	mov	r4, r0
   174f0:	bl	114b0 <__errno_location@plt>
   174f4:	ldr	r6, [r0]
   174f8:	mov	r5, r0
   174fc:	mov	r0, r4
   17500:	bl	112f4 <free@plt>
   17504:	str	r6, [r5]
   17508:	pop	{r4, r5, r6, sl, fp, pc}
   1750c:	andeq	r0, r0, r0
   17510:	ldr	r0, [r0, #8]
   17514:	bx	lr
   17518:	ldr	r0, [r0, #12]
   1751c:	bx	lr
   17520:	ldr	r0, [r0, #16]
   17524:	bx	lr
   17528:	ldm	r0, {r2, ip}
   1752c:	mov	r0, #0
   17530:	cmp	r2, ip
   17534:	bxcs	lr
   17538:	mov	r0, #0
   1753c:	ldr	r1, [r2]
   17540:	cmp	r1, #0
   17544:	beq	17568 <__assert_fail@plt+0x5f80>
   17548:	mov	r3, #0
   1754c:	mov	r1, r2
   17550:	ldr	r1, [r1, #4]
   17554:	add	r3, r3, #1
   17558:	cmp	r1, #0
   1755c:	bne	17550 <__assert_fail@plt+0x5f68>
   17560:	cmp	r3, r0
   17564:	movhi	r0, r3
   17568:	add	r2, r2, #8
   1756c:	cmp	r2, ip
   17570:	bcc	1753c <__assert_fail@plt+0x5f54>
   17574:	bx	lr
   17578:	push	{fp, lr}
   1757c:	mov	fp, sp
   17580:	ldm	r0, {r3, ip}
   17584:	mov	lr, #0
   17588:	mov	r1, #0
   1758c:	cmp	r3, ip
   17590:	bcs	175cc <__assert_fail@plt+0x5fe4>
   17594:	mov	r1, #0
   17598:	mov	lr, #0
   1759c:	ldr	r2, [r3]
   175a0:	cmp	r2, #0
   175a4:	beq	175c0 <__assert_fail@plt+0x5fd8>
   175a8:	mov	r2, r3
   175ac:	ldr	r2, [r2, #4]
   175b0:	add	r1, r1, #1
   175b4:	cmp	r2, #0
   175b8:	bne	175ac <__assert_fail@plt+0x5fc4>
   175bc:	add	lr, lr, #1
   175c0:	add	r3, r3, #8
   175c4:	cmp	r3, ip
   175c8:	bcc	1759c <__assert_fail@plt+0x5fb4>
   175cc:	ldr	r2, [r0, #12]
   175d0:	cmp	lr, r2
   175d4:	bne	175ec <__assert_fail@plt+0x6004>
   175d8:	ldr	r2, [r0, #16]
   175dc:	mov	r0, #1
   175e0:	cmp	r1, r2
   175e4:	movne	r0, #0
   175e8:	pop	{fp, pc}
   175ec:	mov	r0, #0
   175f0:	pop	{fp, pc}
   175f4:	nop	{0}
   175f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   175fc:	add	fp, sp, #24
   17600:	sub	sp, sp, #8
   17604:	ldr	r6, [r0]
   17608:	ldmib	r0, {r2, r7, r8}
   1760c:	ldr	r3, [r0, #16]
   17610:	mov	r4, r1
   17614:	mov	r5, #0
   17618:	cmp	r6, r2
   1761c:	bcs	1765c <__assert_fail@plt+0x6074>
   17620:	mov	r5, #0
   17624:	ldr	r0, [r6]
   17628:	cmp	r0, #0
   1762c:	beq	17650 <__assert_fail@plt+0x6068>
   17630:	mov	r0, #0
   17634:	mov	r1, r6
   17638:	ldr	r1, [r1, #4]
   1763c:	add	r0, r0, #1
   17640:	cmp	r1, #0
   17644:	bne	17638 <__assert_fail@plt+0x6050>
   17648:	cmp	r0, r5
   1764c:	movhi	r5, r0
   17650:	add	r6, r6, #8
   17654:	cmp	r6, r2
   17658:	bcc	17624 <__assert_fail@plt+0x603c>
   1765c:	movw	r2, #57317	; 0xdfe5
   17660:	mov	r0, r4
   17664:	mov	r1, #1
   17668:	movt	r2, #1
   1766c:	bl	114f8 <__fprintf_chk@plt>
   17670:	movw	r2, #57341	; 0xdffd
   17674:	mov	r0, r4
   17678:	mov	r1, #1
   1767c:	mov	r3, r7
   17680:	movt	r2, #1
   17684:	bl	114f8 <__fprintf_chk@plt>
   17688:	vldr	d16, [pc, #80]	; 176e0 <__assert_fail@plt+0x60f8>
   1768c:	vmov	s0, r8
   17690:	movw	r2, #57365	; 0xe015
   17694:	mov	r0, r4
   17698:	mov	r1, #1
   1769c:	mov	r3, r8
   176a0:	vcvt.f64.u32	d17, s0
   176a4:	vmov	s0, r7
   176a8:	movt	r2, #1
   176ac:	vcvt.f64.u32	d18, s0
   176b0:	vmul.f64	d16, d17, d16
   176b4:	vdiv.f64	d16, d16, d18
   176b8:	vstr	d16, [sp]
   176bc:	bl	114f8 <__fprintf_chk@plt>
   176c0:	movw	r2, #57398	; 0xe036
   176c4:	mov	r0, r4
   176c8:	mov	r1, #1
   176cc:	mov	r3, r5
   176d0:	movt	r2, #1
   176d4:	sub	sp, fp, #24
   176d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   176dc:	b	114f8 <__fprintf_chk@plt>
   176e0:	andeq	r0, r0, r0
   176e4:	subsmi	r0, r9, r0
   176e8:	push	{r4, r5, r6, r7, fp, lr}
   176ec:	add	fp, sp, #16
   176f0:	mov	r4, r1
   176f4:	ldr	r1, [r0, #8]
   176f8:	ldr	r2, [r0, #24]
   176fc:	mov	r5, r0
   17700:	mov	r0, r4
   17704:	blx	r2
   17708:	ldr	r1, [r5, #8]
   1770c:	cmp	r0, r1
   17710:	bcs	1777c <__assert_fail@plt+0x6194>
   17714:	ldr	r7, [r5]
   17718:	mov	r6, #0
   1771c:	ldr	r1, [r7, r0, lsl #3]!
   17720:	cmp	r1, #0
   17724:	cmpne	r7, #0
   17728:	bne	17738 <__assert_fail@plt+0x6150>
   1772c:	mov	r0, r6
   17730:	pop	{r4, r5, r6, r7, fp, pc}
   17734:	ldr	r1, [r7]
   17738:	cmp	r1, r4
   1773c:	beq	17764 <__assert_fail@plt+0x617c>
   17740:	ldr	r2, [r5, #28]
   17744:	mov	r0, r4
   17748:	blx	r2
   1774c:	cmp	r0, #0
   17750:	bne	17770 <__assert_fail@plt+0x6188>
   17754:	ldr	r7, [r7, #4]
   17758:	cmp	r7, #0
   1775c:	bne	17734 <__assert_fail@plt+0x614c>
   17760:	b	1772c <__assert_fail@plt+0x6144>
   17764:	mov	r6, r4
   17768:	mov	r0, r6
   1776c:	pop	{r4, r5, r6, r7, fp, pc}
   17770:	ldr	r6, [r7]
   17774:	mov	r0, r6
   17778:	pop	{r4, r5, r6, r7, fp, pc}
   1777c:	bl	115c4 <abort@plt>
   17780:	ldr	r1, [r0, #16]
   17784:	cmp	r1, #0
   17788:	moveq	r0, #0
   1778c:	bxeq	lr
   17790:	ldm	r0, {r1, r2}
   17794:	cmp	r1, r2
   17798:	bcs	177b0 <__assert_fail@plt+0x61c8>
   1779c:	ldr	r0, [r1], #8
   177a0:	cmp	r0, #0
   177a4:	bxne	lr
   177a8:	cmp	r1, r2
   177ac:	bcc	1779c <__assert_fail@plt+0x61b4>
   177b0:	push	{fp, lr}
   177b4:	mov	fp, sp
   177b8:	bl	115c4 <abort@plt>
   177bc:	push	{r4, r5, fp, lr}
   177c0:	add	fp, sp, #8
   177c4:	mov	r5, r1
   177c8:	ldr	r1, [r0, #8]
   177cc:	ldr	r2, [r0, #24]
   177d0:	mov	r4, r0
   177d4:	mov	r0, r5
   177d8:	blx	r2
   177dc:	ldr	r1, [r4, #8]
   177e0:	cmp	r0, r1
   177e4:	bcs	17840 <__assert_fail@plt+0x6258>
   177e8:	ldr	r1, [r4]
   177ec:	add	r2, r1, r0, lsl #3
   177f0:	ldr	r3, [r2]
   177f4:	ldr	r2, [r2, #4]
   177f8:	cmp	r3, r5
   177fc:	beq	1780c <__assert_fail@plt+0x6224>
   17800:	cmp	r2, #0
   17804:	bne	177f0 <__assert_fail@plt+0x6208>
   17808:	b	17818 <__assert_fail@plt+0x6230>
   1780c:	cmp	r2, #0
   17810:	ldrne	r0, [r2]
   17814:	popne	{r4, r5, fp, pc}
   17818:	ldr	r2, [r4, #4]
   1781c:	add	r0, r1, r0, lsl #3
   17820:	add	r1, r0, #8
   17824:	cmp	r1, r2
   17828:	movcs	r0, #0
   1782c:	popcs	{r4, r5, fp, pc}
   17830:	ldr	r0, [r1], #8
   17834:	cmp	r0, #0
   17838:	popne	{r4, r5, fp, pc}
   1783c:	b	17824 <__assert_fail@plt+0x623c>
   17840:	bl	115c4 <abort@plt>
   17844:	push	{r4, r5, fp, lr}
   17848:	add	fp, sp, #8
   1784c:	ldm	r0, {r5, lr}
   17850:	mov	ip, r0
   17854:	mov	r0, #0
   17858:	cmp	r5, lr
   1785c:	bcs	178a8 <__assert_fail@plt+0x62c0>
   17860:	mov	r0, #0
   17864:	ldr	r3, [r5]
   17868:	cmp	r3, #0
   1786c:	cmpne	r5, #0
   17870:	beq	1789c <__assert_fail@plt+0x62b4>
   17874:	mov	r3, r5
   17878:	cmp	r0, r2
   1787c:	popcs	{r4, r5, fp, pc}
   17880:	ldr	r4, [r3]
   17884:	str	r4, [r1, r0, lsl #2]
   17888:	add	r0, r0, #1
   1788c:	ldr	r3, [r3, #4]
   17890:	cmp	r3, #0
   17894:	bne	17878 <__assert_fail@plt+0x6290>
   17898:	ldr	lr, [ip, #4]
   1789c:	add	r5, r5, #8
   178a0:	cmp	r5, lr
   178a4:	bcc	17864 <__assert_fail@plt+0x627c>
   178a8:	pop	{r4, r5, fp, pc}
   178ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   178b0:	add	fp, sp, #24
   178b4:	mov	r5, r1
   178b8:	ldr	r4, [r0]
   178bc:	ldr	r1, [r0, #4]
   178c0:	mov	r6, #0
   178c4:	cmp	r4, r1
   178c8:	bcs	1793c <__assert_fail@plt+0x6354>
   178cc:	mov	r9, r2
   178d0:	mov	r8, r0
   178d4:	mov	r6, #0
   178d8:	b	17920 <__assert_fail@plt+0x6338>
   178dc:	mov	r1, r9
   178e0:	blx	r5
   178e4:	cmp	r0, #0
   178e8:	beq	1793c <__assert_fail@plt+0x6354>
   178ec:	mov	r7, r4
   178f0:	ldr	r7, [r7, #4]
   178f4:	add	r6, r6, #1
   178f8:	cmp	r7, #0
   178fc:	beq	17918 <__assert_fail@plt+0x6330>
   17900:	ldr	r0, [r7]
   17904:	mov	r1, r9
   17908:	blx	r5
   1790c:	cmp	r0, #0
   17910:	bne	178f0 <__assert_fail@plt+0x6308>
   17914:	b	1793c <__assert_fail@plt+0x6354>
   17918:	ldr	r1, [r8, #4]
   1791c:	b	17930 <__assert_fail@plt+0x6348>
   17920:	ldr	r0, [r4]
   17924:	cmp	r0, #0
   17928:	cmpne	r4, #0
   1792c:	bne	178dc <__assert_fail@plt+0x62f4>
   17930:	add	r4, r4, #8
   17934:	cmp	r4, r1
   17938:	bcc	17920 <__assert_fail@plt+0x6338>
   1793c:	mov	r0, r6
   17940:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17944:	ldrb	r2, [r0]
   17948:	cmp	r2, #0
   1794c:	moveq	r0, #0
   17950:	bxeq	lr
   17954:	add	r3, r0, #1
   17958:	mov	r0, #0
   1795c:	rsb	r0, r0, r0, lsl #5
   17960:	uxtab	r0, r0, r2
   17964:	udiv	r2, r0, r1
   17968:	mls	r0, r2, r1, r0
   1796c:	ldrb	r2, [r3], #1
   17970:	cmp	r2, #0
   17974:	bne	1795c <__assert_fail@plt+0x6374>
   17978:	bx	lr
   1797c:	movw	r1, #57424	; 0xe050
   17980:	movt	r1, #1
   17984:	vld1.32	{d16-d17}, [r1]!
   17988:	ldr	r1, [r1]
   1798c:	vst1.32	{d16-d17}, [r0]!
   17990:	str	r1, [r0]
   17994:	bx	lr
   17998:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1799c:	add	fp, sp, #24
   179a0:	movw	r9, #31680	; 0x7bc0
   179a4:	movw	r5, #31660	; 0x7bac
   179a8:	cmp	r3, #0
   179ac:	mov	r6, r0
   179b0:	mov	r0, #40	; 0x28
   179b4:	mov	r7, r1
   179b8:	movt	r9, #1
   179bc:	movt	r5, #1
   179c0:	movne	r9, r3
   179c4:	cmp	r2, #0
   179c8:	movne	r5, r2
   179cc:	bl	1c294 <__assert_fail@plt+0xacac>
   179d0:	mov	r8, #0
   179d4:	cmp	r0, #0
   179d8:	beq	17b94 <__assert_fail@plt+0x65ac>
   179dc:	mov	r4, r0
   179e0:	movw	r0, #57424	; 0xe050
   179e4:	cmp	r7, #0
   179e8:	movt	r0, #1
   179ec:	moveq	r7, r0
   179f0:	cmp	r7, r0
   179f4:	str	r7, [r4, #20]
   179f8:	beq	17a74 <__assert_fail@plt+0x648c>
   179fc:	vldr	s2, [pc, #408]	; 17b9c <__assert_fail@plt+0x65b4>
   17a00:	vldr	s0, [r7, #8]
   17a04:	vcmpe.f32	s0, s2
   17a08:	vmrs	APSR_nzcv, fpscr
   17a0c:	ble	17b20 <__assert_fail@plt+0x6538>
   17a10:	vldr	s4, [pc, #392]	; 17ba0 <__assert_fail@plt+0x65b8>
   17a14:	vcmpe.f32	s0, s4
   17a18:	vmrs	APSR_nzcv, fpscr
   17a1c:	bpl	17b20 <__assert_fail@plt+0x6538>
   17a20:	vldr	s4, [pc, #380]	; 17ba4 <__assert_fail@plt+0x65bc>
   17a24:	vldr	s6, [r7, #12]
   17a28:	vcmpe.f32	s6, s4
   17a2c:	vmrs	APSR_nzcv, fpscr
   17a30:	ble	17b20 <__assert_fail@plt+0x6538>
   17a34:	vldr	s4, [r7]
   17a38:	vcmpe.f32	s4, #0.0
   17a3c:	vmrs	APSR_nzcv, fpscr
   17a40:	blt	17b20 <__assert_fail@plt+0x6538>
   17a44:	vadd.f32	s2, s4, s2
   17a48:	vcmpe.f32	s2, s0
   17a4c:	vmrs	APSR_nzcv, fpscr
   17a50:	bpl	17b20 <__assert_fail@plt+0x6538>
   17a54:	vldr	s0, [r7, #4]
   17a58:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17a5c:	vcmpe.f32	s0, s4
   17a60:	vmrs	APSR_nzcv, fpscr
   17a64:	bhi	17b20 <__assert_fail@plt+0x6538>
   17a68:	vcmpe.f32	s2, s0
   17a6c:	vmrs	APSR_nzcv, fpscr
   17a70:	bpl	17b20 <__assert_fail@plt+0x6538>
   17a74:	ldrb	r0, [r7, #16]
   17a78:	cmp	r0, #0
   17a7c:	bne	17aa8 <__assert_fail@plt+0x64c0>
   17a80:	vldr	s0, [r7, #8]
   17a84:	vldr	s4, [pc, #284]	; 17ba8 <__assert_fail@plt+0x65c0>
   17a88:	vmov	s2, r6
   17a8c:	vcvt.f32.u32	s2, s2
   17a90:	vdiv.f32	s2, s2, s0
   17a94:	vcmpe.f32	s2, s4
   17a98:	vcvt.u32.f32	s0, s2
   17a9c:	vmrs	APSR_nzcv, fpscr
   17aa0:	bge	17b30 <__assert_fail@plt+0x6548>
   17aa4:	vmov	r6, s0
   17aa8:	cmp	r6, #10
   17aac:	movls	r6, #10
   17ab0:	orr	r0, r6, #1
   17ab4:	cmn	r0, #1
   17ab8:	beq	17b30 <__assert_fail@plt+0x6548>
   17abc:	ldr	r6, [fp, #8]
   17ac0:	mov	r1, #3
   17ac4:	cmp	r0, #10
   17ac8:	bcc	17b00 <__assert_fail@plt+0x6518>
   17acc:	mov	r1, #3
   17ad0:	mov	r3, #9
   17ad4:	mov	r2, #12
   17ad8:	udiv	r7, r0, r1
   17adc:	mls	r7, r7, r1, r0
   17ae0:	cmp	r7, #0
   17ae4:	beq	17b00 <__assert_fail@plt+0x6518>
   17ae8:	add	r3, r3, r2
   17aec:	add	r2, r2, #8
   17af0:	add	r1, r1, #2
   17af4:	add	r3, r3, #4
   17af8:	cmp	r3, r0
   17afc:	bcc	17ad8 <__assert_fail@plt+0x64f0>
   17b00:	udiv	r2, r0, r1
   17b04:	mls	r1, r2, r1, r0
   17b08:	cmp	r1, #0
   17b0c:	bne	17b28 <__assert_fail@plt+0x6540>
   17b10:	add	r0, r0, #2
   17b14:	cmn	r0, #1
   17b18:	bne	17ac0 <__assert_fail@plt+0x64d8>
   17b1c:	b	17b30 <__assert_fail@plt+0x6548>
   17b20:	str	r0, [r4, #20]
   17b24:	b	17b38 <__assert_fail@plt+0x6550>
   17b28:	cmp	r0, #536870912	; 0x20000000
   17b2c:	bcc	17b48 <__assert_fail@plt+0x6560>
   17b30:	mov	r0, #0
   17b34:	str	r0, [r4, #8]
   17b38:	mov	r0, r4
   17b3c:	bl	174e4 <__assert_fail@plt+0x5efc>
   17b40:	mov	r0, r8
   17b44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b48:	cmp	r0, #0
   17b4c:	str	r0, [r4, #8]
   17b50:	beq	17b38 <__assert_fail@plt+0x6550>
   17b54:	mov	r1, #8
   17b58:	bl	1c240 <__assert_fail@plt+0xac58>
   17b5c:	cmp	r0, #0
   17b60:	str	r0, [r4]
   17b64:	beq	17b38 <__assert_fail@plt+0x6550>
   17b68:	mov	r1, #0
   17b6c:	mov	r8, r4
   17b70:	str	r1, [r4, #12]
   17b74:	str	r1, [r4, #16]
   17b78:	str	r5, [r4, #24]
   17b7c:	str	r9, [r4, #28]
   17b80:	str	r6, [r4, #32]
   17b84:	str	r1, [r4, #36]	; 0x24
   17b88:	ldr	r1, [r4, #8]
   17b8c:	add	r0, r0, r1, lsl #3
   17b90:	str	r0, [r4, #4]
   17b94:	mov	r0, r8
   17b98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b9c:	stclcc	12, cr12, [ip, #820]	; 0x334
   17ba0:	svccc	0x00666666
   17ba4:	svccc	0x008ccccd
   17ba8:	svcmi	0x00800000
   17bac:	ror	r2, r0, #3
   17bb0:	udiv	r2, r2, r1
   17bb4:	mul	r1, r2, r1
   17bb8:	rsb	r0, r1, r0, ror #3
   17bbc:	bx	lr
   17bc0:	sub	r0, r0, r1
   17bc4:	clz	r0, r0
   17bc8:	lsr	r0, r0, #5
   17bcc:	bx	lr
   17bd0:	push	{r4, r5, r6, r7, fp, lr}
   17bd4:	add	fp, sp, #16
   17bd8:	mov	r4, r0
   17bdc:	ldr	r5, [r0]
   17be0:	ldr	r0, [r0, #4]
   17be4:	cmp	r5, r0
   17be8:	bcs	17c80 <__assert_fail@plt+0x6698>
   17bec:	mov	r6, #0
   17bf0:	ldr	r1, [r5]
   17bf4:	cmp	r1, #0
   17bf8:	beq	17c74 <__assert_fail@plt+0x668c>
   17bfc:	ldr	r1, [r4, #32]
   17c00:	ldr	r7, [r5, #4]
   17c04:	cmp	r1, #0
   17c08:	mov	r0, r1
   17c0c:	movwne	r0, #1
   17c10:	cmp	r7, #0
   17c14:	beq	17c58 <__assert_fail@plt+0x6670>
   17c18:	tst	r0, #1
   17c1c:	beq	17c2c <__assert_fail@plt+0x6644>
   17c20:	ldr	r0, [r7]
   17c24:	blx	r1
   17c28:	ldr	r1, [r4, #32]
   17c2c:	str	r6, [r7]
   17c30:	cmp	r1, #0
   17c34:	ldr	r0, [r4, #36]	; 0x24
   17c38:	ldr	r2, [r7, #4]
   17c3c:	str	r0, [r7, #4]
   17c40:	mov	r0, r1
   17c44:	str	r7, [r4, #36]	; 0x24
   17c48:	mov	r7, r2
   17c4c:	movwne	r0, #1
   17c50:	cmp	r2, #0
   17c54:	bne	17c18 <__assert_fail@plt+0x6630>
   17c58:	cmp	r0, #0
   17c5c:	beq	17c68 <__assert_fail@plt+0x6680>
   17c60:	ldr	r0, [r5]
   17c64:	blx	r1
   17c68:	str	r6, [r5]
   17c6c:	str	r6, [r5, #4]
   17c70:	ldr	r0, [r4, #4]
   17c74:	add	r5, r5, #8
   17c78:	cmp	r5, r0
   17c7c:	bcc	17bf0 <__assert_fail@plt+0x6608>
   17c80:	mov	r0, #0
   17c84:	str	r0, [r4, #12]
   17c88:	str	r0, [r4, #16]
   17c8c:	pop	{r4, r5, r6, r7, fp, pc}
   17c90:	push	{r4, r5, r6, sl, fp, lr}
   17c94:	add	fp, sp, #16
   17c98:	mov	r4, r0
   17c9c:	ldr	r0, [r0, #32]
   17ca0:	cmp	r0, #0
   17ca4:	ldrne	r0, [r4, #16]
   17ca8:	cmpne	r0, #0
   17cac:	beq	17d14 <__assert_fail@plt+0x672c>
   17cb0:	ldr	r5, [r4]
   17cb4:	ldr	r1, [r4, #4]
   17cb8:	cmp	r5, r1
   17cbc:	bcc	17cd0 <__assert_fail@plt+0x66e8>
   17cc0:	b	17d14 <__assert_fail@plt+0x672c>
   17cc4:	add	r5, r5, #8
   17cc8:	cmp	r5, r1
   17ccc:	bcs	17d14 <__assert_fail@plt+0x672c>
   17cd0:	ldr	r0, [r5]
   17cd4:	cmp	r0, #0
   17cd8:	cmpne	r5, #0
   17cdc:	beq	17cc4 <__assert_fail@plt+0x66dc>
   17ce0:	ldr	r1, [r4, #32]
   17ce4:	blx	r1
   17ce8:	ldr	r6, [r5, #4]
   17cec:	cmp	r6, #0
   17cf0:	beq	17d0c <__assert_fail@plt+0x6724>
   17cf4:	ldr	r1, [r4, #32]
   17cf8:	ldr	r0, [r6]
   17cfc:	blx	r1
   17d00:	ldr	r6, [r6, #4]
   17d04:	cmp	r6, #0
   17d08:	bne	17cf4 <__assert_fail@plt+0x670c>
   17d0c:	ldr	r1, [r4, #4]
   17d10:	b	17cc4 <__assert_fail@plt+0x66dc>
   17d14:	ldr	r5, [r4]
   17d18:	ldr	r1, [r4, #4]
   17d1c:	cmp	r5, r1
   17d20:	bcc	17d34 <__assert_fail@plt+0x674c>
   17d24:	b	17d5c <__assert_fail@plt+0x6774>
   17d28:	add	r5, r5, #8
   17d2c:	cmp	r5, r1
   17d30:	bcs	17d5c <__assert_fail@plt+0x6774>
   17d34:	ldr	r0, [r5, #4]
   17d38:	cmp	r0, #0
   17d3c:	beq	17d28 <__assert_fail@plt+0x6740>
   17d40:	ldr	r6, [r0, #4]
   17d44:	bl	174e4 <__assert_fail@plt+0x5efc>
   17d48:	cmp	r6, #0
   17d4c:	mov	r0, r6
   17d50:	bne	17d40 <__assert_fail@plt+0x6758>
   17d54:	ldr	r1, [r4, #4]
   17d58:	b	17d28 <__assert_fail@plt+0x6740>
   17d5c:	ldr	r0, [r4, #36]	; 0x24
   17d60:	cmp	r0, #0
   17d64:	beq	17d7c <__assert_fail@plt+0x6794>
   17d68:	ldr	r5, [r0, #4]
   17d6c:	bl	174e4 <__assert_fail@plt+0x5efc>
   17d70:	cmp	r5, #0
   17d74:	mov	r0, r5
   17d78:	bne	17d68 <__assert_fail@plt+0x6780>
   17d7c:	ldr	r0, [r4]
   17d80:	bl	174e4 <__assert_fail@plt+0x5efc>
   17d84:	mov	r0, r4
   17d88:	pop	{r4, r5, r6, sl, fp, lr}
   17d8c:	b	174e4 <__assert_fail@plt+0x5efc>
   17d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d94:	add	fp, sp, #28
   17d98:	sub	sp, sp, #44	; 0x2c
   17d9c:	mov	r7, r0
   17da0:	mov	r4, r0
   17da4:	ldr	r0, [r7, #20]!
   17da8:	ldrb	r2, [r0, #16]
   17dac:	cmp	r2, #0
   17db0:	bne	17de0 <__assert_fail@plt+0x67f8>
   17db4:	vldr	s0, [r0, #8]
   17db8:	vldr	s4, [pc, #560]	; 17ff0 <__assert_fail@plt+0x6a08>
   17dbc:	vmov	s2, r1
   17dc0:	mov	r5, #0
   17dc4:	vcvt.f32.u32	s2, s2
   17dc8:	vdiv.f32	s2, s2, s0
   17dcc:	vcmpe.f32	s2, s4
   17dd0:	vcvt.u32.f32	s0, s2
   17dd4:	vmrs	APSR_nzcv, fpscr
   17dd8:	bge	17fe0 <__assert_fail@plt+0x69f8>
   17ddc:	vmov	r1, s0
   17de0:	cmp	r1, #10
   17de4:	mov	r5, #0
   17de8:	movls	r1, #10
   17dec:	orr	r6, r1, #1
   17df0:	cmn	r6, #1
   17df4:	bne	17e08 <__assert_fail@plt+0x6820>
   17df8:	b	17fe0 <__assert_fail@plt+0x69f8>
   17dfc:	add	r6, r6, #2
   17e00:	cmn	r6, #1
   17e04:	beq	17fe0 <__assert_fail@plt+0x69f8>
   17e08:	mov	r0, #3
   17e0c:	cmp	r6, #10
   17e10:	bcc	17e48 <__assert_fail@plt+0x6860>
   17e14:	mov	r0, #3
   17e18:	mov	r2, #9
   17e1c:	mov	r1, #12
   17e20:	udiv	r3, r6, r0
   17e24:	mls	r3, r3, r0, r6
   17e28:	cmp	r3, #0
   17e2c:	beq	17e48 <__assert_fail@plt+0x6860>
   17e30:	add	r2, r2, r1
   17e34:	add	r1, r1, #8
   17e38:	add	r0, r0, #2
   17e3c:	add	r2, r2, #4
   17e40:	cmp	r2, r6
   17e44:	bcc	17e20 <__assert_fail@plt+0x6838>
   17e48:	udiv	r1, r6, r0
   17e4c:	mls	r0, r1, r0, r6
   17e50:	cmp	r0, #0
   17e54:	beq	17dfc <__assert_fail@plt+0x6814>
   17e58:	sub	r0, r6, #1
   17e5c:	cmn	r0, #-536870910	; 0xe0000002
   17e60:	bhi	17fe0 <__assert_fail@plt+0x69f8>
   17e64:	ldr	r0, [r4, #8]
   17e68:	cmp	r6, r0
   17e6c:	bne	17e78 <__assert_fail@plt+0x6890>
   17e70:	mov	r5, #1
   17e74:	b	17fe0 <__assert_fail@plt+0x69f8>
   17e78:	mov	r0, r6
   17e7c:	mov	r1, #8
   17e80:	bl	1c240 <__assert_fail@plt+0xac58>
   17e84:	cmp	r0, #0
   17e88:	str	r0, [sp, #4]
   17e8c:	beq	17fe0 <__assert_fail@plt+0x69f8>
   17e90:	mov	r1, #0
   17e94:	add	r0, r0, r6, lsl #3
   17e98:	str	r6, [sp, #12]
   17e9c:	add	r5, sp, #4
   17ea0:	mov	sl, r4
   17ea4:	mov	r2, #0
   17ea8:	str	r1, [sp, #16]
   17eac:	str	r1, [sp, #20]
   17eb0:	str	r0, [sp, #8]
   17eb4:	add	r0, r5, #20
   17eb8:	mov	r1, r4
   17ebc:	vld1.32	{d16-d17}, [r7]
   17ec0:	vst1.32	{d16-d17}, [r0]
   17ec4:	ldr	r0, [sl, #36]!	; 0x24
   17ec8:	str	r0, [sp, #40]	; 0x28
   17ecc:	mov	r0, r5
   17ed0:	bl	17ff4 <__assert_fail@plt+0x6a0c>
   17ed4:	cmp	r0, #0
   17ed8:	beq	17f00 <__assert_fail@plt+0x6918>
   17edc:	ldr	r0, [r4]
   17ee0:	bl	174e4 <__assert_fail@plt+0x5efc>
   17ee4:	mov	r0, #36	; 0x24
   17ee8:	vld1.32	{d16-d17}, [r5], r0
   17eec:	vst1.32	{d16-d17}, [r4], r0
   17ef0:	ldr	r0, [r5]
   17ef4:	mov	r5, #1
   17ef8:	str	r0, [r4]
   17efc:	b	17fe0 <__assert_fail@plt+0x69f8>
   17f00:	ldr	r0, [sp, #40]	; 0x28
   17f04:	str	r0, [sl]
   17f08:	ldr	r0, [sp, #8]
   17f0c:	ldr	r8, [sp, #4]
   17f10:	cmp	r8, r0
   17f14:	str	r0, [sp]
   17f18:	bcs	17fbc <__assert_fail@plt+0x69d4>
   17f1c:	mov	r9, #0
   17f20:	ldr	r0, [r8]
   17f24:	cmp	r0, #0
   17f28:	beq	17fac <__assert_fail@plt+0x69c4>
   17f2c:	ldr	r6, [r8, #4]
   17f30:	cmp	r6, #0
   17f34:	beq	17fa8 <__assert_fail@plt+0x69c0>
   17f38:	ldr	r1, [r4, #8]
   17f3c:	ldr	r5, [r6]
   17f40:	ldr	r2, [r4, #24]
   17f44:	mov	r0, r5
   17f48:	blx	r2
   17f4c:	ldr	r1, [r4, #8]
   17f50:	cmp	r0, r1
   17f54:	bcs	17fec <__assert_fail@plt+0x6a04>
   17f58:	ldr	r3, [r4]
   17f5c:	ldr	r2, [r6, #4]
   17f60:	ldr	r7, [r3, r0, lsl #3]
   17f64:	cmp	r7, #0
   17f68:	beq	17f78 <__assert_fail@plt+0x6990>
   17f6c:	add	r0, r3, r0, lsl #3
   17f70:	add	r0, r0, #4
   17f74:	b	17f90 <__assert_fail@plt+0x69a8>
   17f78:	str	r5, [r3, r0, lsl #3]
   17f7c:	ldr	r0, [r4, #12]
   17f80:	add	r0, r0, #1
   17f84:	str	r0, [r4, #12]
   17f88:	mov	r0, sl
   17f8c:	str	r9, [r6]
   17f90:	ldr	r3, [r0]
   17f94:	cmp	r2, #0
   17f98:	str	r3, [r6, #4]
   17f9c:	str	r6, [r0]
   17fa0:	mov	r6, r2
   17fa4:	bne	17f3c <__assert_fail@plt+0x6954>
   17fa8:	str	r9, [r8, #4]
   17fac:	ldr	r0, [sp]
   17fb0:	add	r8, r8, #8
   17fb4:	cmp	r8, r0
   17fb8:	bcc	17f20 <__assert_fail@plt+0x6938>
   17fbc:	add	r1, sp, #4
   17fc0:	mov	r0, r4
   17fc4:	mov	r2, #0
   17fc8:	mov	r5, #0
   17fcc:	bl	17ff4 <__assert_fail@plt+0x6a0c>
   17fd0:	cmp	r0, #0
   17fd4:	beq	17fec <__assert_fail@plt+0x6a04>
   17fd8:	ldr	r0, [sp, #4]
   17fdc:	bl	174e4 <__assert_fail@plt+0x5efc>
   17fe0:	mov	r0, r5
   17fe4:	sub	sp, fp, #28
   17fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fec:	bl	115c4 <abort@plt>
   17ff0:	svcmi	0x00800000
   17ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ff8:	add	fp, sp, #28
   17ffc:	sub	sp, sp, #12
   18000:	ldr	sl, [r1]
   18004:	str	r1, [sp, #8]
   18008:	ldr	r1, [r1, #4]
   1800c:	mov	r7, r0
   18010:	mov	r0, #1
   18014:	str	r2, [sp, #4]
   18018:	cmp	sl, r1
   1801c:	bcs	18178 <__assert_fail@plt+0x6b90>
   18020:	add	r8, r7, #36	; 0x24
   18024:	mov	r9, #0
   18028:	ldr	r4, [sl]
   1802c:	cmp	r4, #0
   18030:	beq	18160 <__assert_fail@plt+0x6b78>
   18034:	ldr	r5, [sl, #4]
   18038:	cmp	r5, #0
   1803c:	beq	180b4 <__assert_fail@plt+0x6acc>
   18040:	ldr	r1, [r7, #8]
   18044:	ldr	r4, [r5]
   18048:	ldr	r2, [r7, #24]
   1804c:	mov	r0, r4
   18050:	blx	r2
   18054:	ldr	r1, [r7, #8]
   18058:	cmp	r0, r1
   1805c:	bcs	1818c <__assert_fail@plt+0x6ba4>
   18060:	ldr	r3, [r7]
   18064:	ldr	r2, [r5, #4]
   18068:	ldr	r6, [r3, r0, lsl #3]
   1806c:	cmp	r6, #0
   18070:	beq	18080 <__assert_fail@plt+0x6a98>
   18074:	add	r0, r3, r0, lsl #3
   18078:	add	r0, r0, #4
   1807c:	b	18098 <__assert_fail@plt+0x6ab0>
   18080:	str	r4, [r3, r0, lsl #3]
   18084:	ldr	r0, [r7, #12]
   18088:	add	r0, r0, #1
   1808c:	str	r0, [r7, #12]
   18090:	mov	r0, r8
   18094:	str	r9, [r5]
   18098:	ldr	r3, [r0]
   1809c:	cmp	r2, #0
   180a0:	str	r3, [r5, #4]
   180a4:	str	r5, [r0]
   180a8:	mov	r5, r2
   180ac:	bne	18044 <__assert_fail@plt+0x6a5c>
   180b0:	ldr	r4, [sl]
   180b4:	ldr	r0, [sp, #4]
   180b8:	str	r9, [sl, #4]
   180bc:	cmp	r0, #0
   180c0:	bne	18160 <__assert_fail@plt+0x6b78>
   180c4:	ldr	r1, [r7, #8]
   180c8:	ldr	r2, [r7, #24]
   180cc:	mov	r0, r4
   180d0:	blx	r2
   180d4:	mov	r5, r0
   180d8:	ldr	r0, [r7, #8]
   180dc:	cmp	r5, r0
   180e0:	bcs	1818c <__assert_fail@plt+0x6ba4>
   180e4:	ldr	r6, [r7]
   180e8:	ldr	r0, [r6, r5, lsl #3]
   180ec:	cmp	r0, #0
   180f0:	beq	18110 <__assert_fail@plt+0x6b28>
   180f4:	ldr	r0, [r8]
   180f8:	cmp	r0, #0
   180fc:	beq	18124 <__assert_fail@plt+0x6b3c>
   18100:	mov	r1, r0
   18104:	ldr	r2, [r1, #4]!
   18108:	str	r2, [r8]
   1810c:	b	18138 <__assert_fail@plt+0x6b50>
   18110:	str	r4, [r6, r5, lsl #3]
   18114:	ldr	r0, [r7, #12]
   18118:	add	r0, r0, #1
   1811c:	str	r0, [r7, #12]
   18120:	b	1814c <__assert_fail@plt+0x6b64>
   18124:	mov	r0, #8
   18128:	bl	1c294 <__assert_fail@plt+0xacac>
   1812c:	cmp	r0, #0
   18130:	beq	18180 <__assert_fail@plt+0x6b98>
   18134:	add	r1, r0, #4
   18138:	str	r4, [r0]
   1813c:	add	r2, r6, r5, lsl #3
   18140:	ldr	r3, [r2, #4]
   18144:	str	r3, [r1]
   18148:	str	r0, [r2, #4]
   1814c:	ldr	r1, [sp, #8]
   18150:	str	r9, [sl]
   18154:	ldr	r0, [r1, #12]
   18158:	sub	r0, r0, #1
   1815c:	str	r0, [r1, #12]
   18160:	ldr	r0, [sp, #8]
   18164:	add	sl, sl, #8
   18168:	ldr	r0, [r0, #4]
   1816c:	cmp	sl, r0
   18170:	bcc	18028 <__assert_fail@plt+0x6a40>
   18174:	mov	r0, #1
   18178:	sub	sp, fp, #28
   1817c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18180:	mov	r0, #0
   18184:	sub	sp, fp, #28
   18188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1818c:	bl	115c4 <abort@plt>
   18190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18194:	add	fp, sp, #28
   18198:	sub	sp, sp, #4
   1819c:	cmp	r1, #0
   181a0:	beq	184c4 <__assert_fail@plt+0x6edc>
   181a4:	mov	r8, r2
   181a8:	mov	sl, r1
   181ac:	ldr	r1, [r0, #8]
   181b0:	ldr	r2, [r0, #24]
   181b4:	mov	r4, r0
   181b8:	mov	r0, sl
   181bc:	blx	r2
   181c0:	mov	r7, r0
   181c4:	ldr	r0, [r4, #8]
   181c8:	cmp	r7, r0
   181cc:	bcs	184c4 <__assert_fail@plt+0x6edc>
   181d0:	ldr	r5, [r4]
   181d4:	mov	r9, r5
   181d8:	ldr	r1, [r9, r7, lsl #3]!
   181dc:	cmp	r1, #0
   181e0:	beq	1826c <__assert_fail@plt+0x6c84>
   181e4:	cmp	r1, sl
   181e8:	beq	18214 <__assert_fail@plt+0x6c2c>
   181ec:	ldr	r2, [r4, #28]
   181f0:	mov	r0, sl
   181f4:	blx	r2
   181f8:	cmp	r0, #0
   181fc:	mov	r6, r9
   18200:	beq	18228 <__assert_fail@plt+0x6c40>
   18204:	ldr	r0, [r6]
   18208:	cmp	r0, #0
   1820c:	bne	18218 <__assert_fail@plt+0x6c30>
   18210:	b	1826c <__assert_fail@plt+0x6c84>
   18214:	mov	r0, sl
   18218:	cmp	r8, #0
   1821c:	mov	r7, #0
   18220:	strne	r0, [r8]
   18224:	b	18460 <__assert_fail@plt+0x6e78>
   18228:	add	r6, r5, r7, lsl #3
   1822c:	ldr	r0, [r6, #4]!
   18230:	cmp	r0, #0
   18234:	beq	1826c <__assert_fail@plt+0x6c84>
   18238:	ldr	r1, [r0]
   1823c:	cmp	r1, sl
   18240:	beq	18260 <__assert_fail@plt+0x6c78>
   18244:	ldr	r2, [r4, #28]
   18248:	mov	r0, sl
   1824c:	blx	r2
   18250:	ldr	r6, [r6]
   18254:	cmp	r0, #0
   18258:	beq	1822c <__assert_fail@plt+0x6c44>
   1825c:	b	18204 <__assert_fail@plt+0x6c1c>
   18260:	mov	r0, sl
   18264:	cmp	r0, #0
   18268:	bne	18218 <__assert_fail@plt+0x6c30>
   1826c:	vldr	s0, [r4, #8]
   18270:	vldr	s2, [r4, #12]
   18274:	ldr	r0, [r4, #20]
   18278:	vcvt.f32.u32	s0, s0
   1827c:	vcvt.f32.u32	s4, s2
   18280:	vldr	s2, [r0, #8]
   18284:	vmul.f32	s6, s2, s0
   18288:	vcmpe.f32	s6, s4
   1828c:	vmrs	APSR_nzcv, fpscr
   18290:	bpl	183e4 <__assert_fail@plt+0x6dfc>
   18294:	movw	r1, #57424	; 0xe050
   18298:	movt	r1, #1
   1829c:	cmp	r0, r1
   182a0:	beq	1832c <__assert_fail@plt+0x6d44>
   182a4:	vldr	s6, [pc, #540]	; 184c8 <__assert_fail@plt+0x6ee0>
   182a8:	vcmpe.f32	s2, s6
   182ac:	vmrs	APSR_nzcv, fpscr
   182b0:	ble	18318 <__assert_fail@plt+0x6d30>
   182b4:	vldr	s8, [pc, #528]	; 184cc <__assert_fail@plt+0x6ee4>
   182b8:	vcmpe.f32	s2, s8
   182bc:	vmrs	APSR_nzcv, fpscr
   182c0:	bpl	18318 <__assert_fail@plt+0x6d30>
   182c4:	vldr	s8, [pc, #516]	; 184d0 <__assert_fail@plt+0x6ee8>
   182c8:	vldr	s10, [r0, #12]
   182cc:	vcmpe.f32	s10, s8
   182d0:	vmrs	APSR_nzcv, fpscr
   182d4:	ble	18318 <__assert_fail@plt+0x6d30>
   182d8:	vldr	s8, [r0]
   182dc:	vcmpe.f32	s8, #0.0
   182e0:	vmrs	APSR_nzcv, fpscr
   182e4:	blt	18318 <__assert_fail@plt+0x6d30>
   182e8:	vadd.f32	s6, s8, s6
   182ec:	vcmpe.f32	s6, s2
   182f0:	vmrs	APSR_nzcv, fpscr
   182f4:	bpl	18318 <__assert_fail@plt+0x6d30>
   182f8:	vldr	s8, [r0, #4]
   182fc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   18300:	vcmpe.f32	s8, s10
   18304:	vmrs	APSR_nzcv, fpscr
   18308:	bhi	18318 <__assert_fail@plt+0x6d30>
   1830c:	vcmpe.f32	s6, s8
   18310:	vmrs	APSR_nzcv, fpscr
   18314:	bmi	18330 <__assert_fail@plt+0x6d48>
   18318:	vldr	s2, [pc, #436]	; 184d4 <__assert_fail@plt+0x6eec>
   1831c:	movw	r0, #57424	; 0xe050
   18320:	movt	r0, #1
   18324:	str	r0, [r4, #20]
   18328:	b	18330 <__assert_fail@plt+0x6d48>
   1832c:	mov	r0, r1
   18330:	vmul.f32	s6, s2, s0
   18334:	vcmpe.f32	s6, s4
   18338:	vmrs	APSR_nzcv, fpscr
   1833c:	bpl	183e4 <__assert_fail@plt+0x6dfc>
   18340:	vldr	s4, [r0, #12]
   18344:	ldrb	r0, [r0, #16]
   18348:	mvn	r7, #0
   1834c:	vmul.f32	s0, s4, s0
   18350:	vldr	s4, [pc, #384]	; 184d8 <__assert_fail@plt+0x6ef0>
   18354:	cmp	r0, #0
   18358:	vmul.f32	s2, s2, s0
   1835c:	vseleq.f32	s0, s2, s0
   18360:	vcmpe.f32	s0, s4
   18364:	vmrs	APSR_nzcv, fpscr
   18368:	bge	18460 <__assert_fail@plt+0x6e78>
   1836c:	vcvt.u32.f32	s0, s0
   18370:	mov	r0, r4
   18374:	vmov	r1, s0
   18378:	bl	17d90 <__assert_fail@plt+0x67a8>
   1837c:	cmp	r0, #0
   18380:	beq	18460 <__assert_fail@plt+0x6e78>
   18384:	ldr	r1, [r4, #8]
   18388:	ldr	r2, [r4, #24]
   1838c:	mov	r0, sl
   18390:	blx	r2
   18394:	mov	r7, r0
   18398:	ldr	r0, [r4, #8]
   1839c:	cmp	r7, r0
   183a0:	bcs	184c4 <__assert_fail@plt+0x6edc>
   183a4:	ldr	r5, [r4]
   183a8:	mov	r9, r5
   183ac:	ldr	r1, [r9, r7, lsl #3]!
   183b0:	cmp	r1, #0
   183b4:	beq	1840c <__assert_fail@plt+0x6e24>
   183b8:	cmp	r1, sl
   183bc:	mov	r0, sl
   183c0:	beq	183dc <__assert_fail@plt+0x6df4>
   183c4:	ldr	r2, [r4, #28]
   183c8:	mov	r0, sl
   183cc:	blx	r2
   183d0:	cmp	r0, #0
   183d4:	beq	18474 <__assert_fail@plt+0x6e8c>
   183d8:	ldr	r0, [r9]
   183dc:	cmp	r0, #0
   183e0:	bne	184c4 <__assert_fail@plt+0x6edc>
   183e4:	ldr	r0, [r9]
   183e8:	cmp	r0, #0
   183ec:	beq	1840c <__assert_fail@plt+0x6e24>
   183f0:	ldr	r0, [r4, #36]	; 0x24
   183f4:	cmp	r0, #0
   183f8:	beq	1842c <__assert_fail@plt+0x6e44>
   183fc:	mov	r1, r0
   18400:	ldr	r2, [r1, #4]!
   18404:	str	r2, [r4, #36]	; 0x24
   18408:	b	18440 <__assert_fail@plt+0x6e58>
   1840c:	str	sl, [r9]
   18410:	ldr	r0, [r4, #12]
   18414:	ldr	r1, [r4, #16]
   18418:	add	r0, r0, #1
   1841c:	add	r1, r1, #1
   18420:	str	r0, [r4, #12]
   18424:	str	r1, [r4, #16]
   18428:	b	1845c <__assert_fail@plt+0x6e74>
   1842c:	mov	r0, #8
   18430:	bl	1c294 <__assert_fail@plt+0xacac>
   18434:	cmp	r0, #0
   18438:	beq	1846c <__assert_fail@plt+0x6e84>
   1843c:	add	r1, r0, #4
   18440:	str	sl, [r0]
   18444:	ldr	r2, [r9, #4]
   18448:	str	r2, [r1]
   1844c:	str	r0, [r9, #4]
   18450:	ldr	r0, [r4, #16]
   18454:	add	r0, r0, #1
   18458:	str	r0, [r4, #16]
   1845c:	mov	r7, #1
   18460:	mov	r0, r7
   18464:	sub	sp, fp, #28
   18468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1846c:	mvn	r7, #0
   18470:	b	18460 <__assert_fail@plt+0x6e78>
   18474:	add	r6, r5, r7, lsl #3
   18478:	ldr	r0, [r6, #4]!
   1847c:	cmp	r0, #0
   18480:	beq	183e4 <__assert_fail@plt+0x6dfc>
   18484:	ldr	r1, [r0]
   18488:	cmp	r1, sl
   1848c:	beq	184b8 <__assert_fail@plt+0x6ed0>
   18490:	ldr	r2, [r4, #28]
   18494:	mov	r0, sl
   18498:	blx	r2
   1849c:	ldr	r6, [r6]
   184a0:	cmp	r0, #0
   184a4:	beq	18478 <__assert_fail@plt+0x6e90>
   184a8:	ldr	r0, [r6]
   184ac:	cmp	r0, #0
   184b0:	beq	183e4 <__assert_fail@plt+0x6dfc>
   184b4:	b	184c4 <__assert_fail@plt+0x6edc>
   184b8:	mov	r0, sl
   184bc:	cmp	r0, #0
   184c0:	beq	183e4 <__assert_fail@plt+0x6dfc>
   184c4:	bl	115c4 <abort@plt>
   184c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   184cc:	svccc	0x00666666
   184d0:	svccc	0x008ccccd
   184d4:	svccc	0x004ccccd
   184d8:	svcmi	0x00800000
   184dc:	push	{r4, sl, fp, lr}
   184e0:	add	fp, sp, #8
   184e4:	sub	sp, sp, #8
   184e8:	add	r2, sp, #4
   184ec:	mov	r4, r1
   184f0:	bl	18190 <__assert_fail@plt+0x6ba8>
   184f4:	cmn	r0, #1
   184f8:	beq	1850c <__assert_fail@plt+0x6f24>
   184fc:	ldr	r1, [sp, #4]
   18500:	cmp	r0, #0
   18504:	moveq	r4, r1
   18508:	b	18510 <__assert_fail@plt+0x6f28>
   1850c:	mov	r4, #0
   18510:	mov	r0, r4
   18514:	sub	sp, fp, #8
   18518:	pop	{r4, sl, fp, pc}
   1851c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18520:	add	fp, sp, #24
   18524:	mov	r9, r1
   18528:	ldr	r1, [r0, #8]
   1852c:	ldr	r2, [r0, #24]
   18530:	mov	r5, r0
   18534:	mov	r0, r9
   18538:	blx	r2
   1853c:	mov	r7, r0
   18540:	ldr	r0, [r5, #8]
   18544:	cmp	r7, r0
   18548:	bcs	187a8 <__assert_fail@plt+0x71c0>
   1854c:	ldr	r6, [r5]
   18550:	mov	r8, #0
   18554:	mov	r4, r6
   18558:	ldr	r1, [r4, r7, lsl #3]!
   1855c:	cmp	r1, #0
   18560:	beq	18614 <__assert_fail@plt+0x702c>
   18564:	cmp	r1, r9
   18568:	beq	18584 <__assert_fail@plt+0x6f9c>
   1856c:	ldr	r2, [r5, #28]
   18570:	mov	r0, r9
   18574:	blx	r2
   18578:	cmp	r0, #0
   1857c:	beq	185bc <__assert_fail@plt+0x6fd4>
   18580:	ldr	r9, [r4]
   18584:	add	r0, r6, r7, lsl #3
   18588:	ldr	r0, [r0, #4]
   1858c:	cmp	r0, #0
   18590:	beq	18604 <__assert_fail@plt+0x701c>
   18594:	ldm	r0, {r1, r2}
   18598:	stm	r4, {r1, r2}
   1859c:	mov	r1, #0
   185a0:	str	r1, [r0]
   185a4:	ldr	r1, [r5, #36]	; 0x24
   185a8:	str	r1, [r0, #4]
   185ac:	str	r0, [r5, #36]	; 0x24
   185b0:	cmp	r9, #0
   185b4:	bne	1864c <__assert_fail@plt+0x7064>
   185b8:	b	18614 <__assert_fail@plt+0x702c>
   185bc:	add	r7, r6, r7, lsl #3
   185c0:	ldr	r0, [r7, #4]!
   185c4:	cmp	r0, #0
   185c8:	beq	18614 <__assert_fail@plt+0x702c>
   185cc:	ldr	r1, [r0]
   185d0:	cmp	r1, r9
   185d4:	beq	1861c <__assert_fail@plt+0x7034>
   185d8:	ldr	r2, [r5, #28]
   185dc:	mov	r0, r9
   185e0:	blx	r2
   185e4:	ldr	r1, [r7]
   185e8:	cmp	r0, #0
   185ec:	bne	18624 <__assert_fail@plt+0x703c>
   185f0:	ldr	r0, [r1, #4]!
   185f4:	cmp	r0, #0
   185f8:	mov	r7, r1
   185fc:	bne	185cc <__assert_fail@plt+0x6fe4>
   18600:	b	18614 <__assert_fail@plt+0x702c>
   18604:	mov	r0, #0
   18608:	str	r0, [r4]
   1860c:	cmp	r9, #0
   18610:	bne	1864c <__assert_fail@plt+0x7064>
   18614:	mov	r0, r8
   18618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1861c:	mov	r1, r0
   18620:	b	18628 <__assert_fail@plt+0x7040>
   18624:	ldr	r9, [r1]
   18628:	ldr	r0, [r1, #4]
   1862c:	str	r0, [r7]
   18630:	mov	r0, #0
   18634:	str	r0, [r1]
   18638:	ldr	r0, [r5, #36]	; 0x24
   1863c:	str	r0, [r1, #4]
   18640:	str	r1, [r5, #36]	; 0x24
   18644:	cmp	r9, #0
   18648:	beq	18614 <__assert_fail@plt+0x702c>
   1864c:	ldr	r0, [r5, #16]
   18650:	sub	r0, r0, #1
   18654:	str	r0, [r5, #16]
   18658:	ldr	r0, [r4]
   1865c:	cmp	r0, #0
   18660:	bne	18768 <__assert_fail@plt+0x7180>
   18664:	ldr	r0, [r5, #12]
   18668:	vldr	s0, [r5, #8]
   1866c:	sub	r1, r0, #1
   18670:	str	r1, [r5, #12]
   18674:	vmov	s2, r1
   18678:	ldr	r0, [r5, #20]
   1867c:	vcvt.f32.u32	s0, s0
   18680:	vcvt.f32.u32	s2, s2
   18684:	vldr	s4, [r0]
   18688:	vmul.f32	s6, s4, s0
   1868c:	vcmpe.f32	s6, s2
   18690:	vmrs	APSR_nzcv, fpscr
   18694:	ble	18768 <__assert_fail@plt+0x7180>
   18698:	movw	r1, #57424	; 0xe050
   1869c:	movt	r1, #1
   186a0:	cmp	r0, r1
   186a4:	beq	186fc <__assert_fail@plt+0x7114>
   186a8:	vldr	s8, [pc, #252]	; 187ac <__assert_fail@plt+0x71c4>
   186ac:	vldr	s6, [r0, #8]
   186b0:	vcmpe.f32	s6, s8
   186b4:	vmrs	APSR_nzcv, fpscr
   186b8:	ble	186e8 <__assert_fail@plt+0x7100>
   186bc:	vldr	s10, [pc, #236]	; 187b0 <__assert_fail@plt+0x71c8>
   186c0:	vcmpe.f32	s6, s10
   186c4:	vmrs	APSR_nzcv, fpscr
   186c8:	bpl	186e8 <__assert_fail@plt+0x7100>
   186cc:	vcmpe.f32	s4, #0.0
   186d0:	vmrs	APSR_nzcv, fpscr
   186d4:	vldrge	s10, [r0, #12]
   186d8:	vldrge	s12, [pc, #212]	; 187b4 <__assert_fail@plt+0x71cc>
   186dc:	vcmpege.f32	s10, s12
   186e0:	vmrsge	APSR_nzcv, fpscr
   186e4:	bgt	18774 <__assert_fail@plt+0x718c>
   186e8:	vldr	s4, [pc, #200]	; 187b8 <__assert_fail@plt+0x71d0>
   186ec:	movw	r0, #57424	; 0xe050
   186f0:	movt	r0, #1
   186f4:	str	r0, [r5, #20]
   186f8:	b	18700 <__assert_fail@plt+0x7118>
   186fc:	mov	r0, r1
   18700:	vmul.f32	s4, s4, s0
   18704:	vcmpe.f32	s4, s2
   18708:	vmrs	APSR_nzcv, fpscr
   1870c:	ble	18768 <__assert_fail@plt+0x7180>
   18710:	ldrb	r1, [r0, #16]
   18714:	vldr	s2, [r0, #4]
   18718:	cmp	r1, #0
   1871c:	vmul.f32	s0, s2, s0
   18720:	vldreq	s2, [r0, #8]
   18724:	mov	r0, r5
   18728:	vmuleq.f32	s0, s0, s2
   1872c:	vcvt.u32.f32	s0, s0
   18730:	vmov	r1, s0
   18734:	bl	17d90 <__assert_fail@plt+0x67a8>
   18738:	cmp	r0, #0
   1873c:	bne	18768 <__assert_fail@plt+0x7180>
   18740:	ldr	r0, [r5, #36]	; 0x24
   18744:	cmp	r0, #0
   18748:	beq	18760 <__assert_fail@plt+0x7178>
   1874c:	ldr	r4, [r0, #4]
   18750:	bl	174e4 <__assert_fail@plt+0x5efc>
   18754:	cmp	r4, #0
   18758:	mov	r0, r4
   1875c:	bne	1874c <__assert_fail@plt+0x7164>
   18760:	mov	r0, #0
   18764:	str	r0, [r5, #36]	; 0x24
   18768:	mov	r8, r9
   1876c:	mov	r0, r8
   18770:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18774:	vadd.f32	s8, s4, s8
   18778:	vcmpe.f32	s8, s6
   1877c:	vmrs	APSR_nzcv, fpscr
   18780:	bpl	186e8 <__assert_fail@plt+0x7100>
   18784:	vldr	s6, [r0, #4]
   18788:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1878c:	vcmpe.f32	s6, s10
   18790:	vmrs	APSR_nzcv, fpscr
   18794:	bhi	186e8 <__assert_fail@plt+0x7100>
   18798:	vcmpe.f32	s8, s6
   1879c:	vmrs	APSR_nzcv, fpscr
   187a0:	bmi	18700 <__assert_fail@plt+0x7118>
   187a4:	b	186e8 <__assert_fail@plt+0x7100>
   187a8:	bl	115c4 <abort@plt>
   187ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   187b0:	svccc	0x00666666
   187b4:	svccc	0x008ccccd
   187b8:	andeq	r0, r0, r0
   187bc:	b	1851c <__assert_fail@plt+0x6f34>
   187c0:	push	{r4, r5, r6, sl, fp, lr}
   187c4:	add	fp, sp, #16
   187c8:	mov	r5, r0
   187cc:	mov	r0, #0
   187d0:	mov	r4, r1
   187d4:	add	r6, r2, #19
   187d8:	cmp	r1, #0
   187dc:	strb	r0, [r2, #20]
   187e0:	blt	18830 <__assert_fail@plt+0x7248>
   187e4:	mov	r0, r5
   187e8:	mov	r1, r4
   187ec:	mov	r2, #10
   187f0:	mov	r3, #0
   187f4:	bl	1c854 <__assert_fail@plt+0xb26c>
   187f8:	add	r2, r0, r0, lsl #2
   187fc:	sub	r2, r5, r2, lsl #1
   18800:	add	r2, r2, #48	; 0x30
   18804:	strb	r2, [r6], #-1
   18808:	adds	r2, r5, #9
   1880c:	mov	r5, r0
   18810:	adc	r3, r4, #0
   18814:	rsbs	r2, r2, #18
   18818:	mov	r4, r1
   1881c:	rscs	r2, r3, #0
   18820:	bcc	187e4 <__assert_fail@plt+0x71fc>
   18824:	add	r6, r6, #1
   18828:	mov	r0, r6
   1882c:	pop	{r4, r5, r6, sl, fp, pc}
   18830:	mov	r0, r5
   18834:	mov	r1, r4
   18838:	mov	r2, #10
   1883c:	mov	r3, #0
   18840:	bl	1c854 <__assert_fail@plt+0xb26c>
   18844:	add	r2, r0, r0, lsl #2
   18848:	rsb	r2, r5, r2, lsl #1
   1884c:	add	r2, r2, #48	; 0x30
   18850:	strb	r2, [r6], #-1
   18854:	adds	r2, r5, #9
   18858:	mov	r5, r0
   1885c:	adc	r3, r4, #0
   18860:	rsbs	r2, r2, #18
   18864:	mov	r4, r1
   18868:	rscs	r2, r3, #0
   1886c:	bcc	18830 <__assert_fail@plt+0x7248>
   18870:	mov	r0, #45	; 0x2d
   18874:	strb	r0, [r6]
   18878:	mov	r0, r6
   1887c:	pop	{r4, r5, r6, sl, fp, pc}
   18880:	push	{r4, sl, fp, lr}
   18884:	add	fp, sp, #8
   18888:	sub	sp, sp, #8
   1888c:	movw	r0, #57444	; 0xe064
   18890:	movt	r0, #1
   18894:	bl	11408 <getenv@plt>
   18898:	cmp	r0, #0
   1889c:	movw	r4, #4201	; 0x1069
   188a0:	ldrbne	r1, [r0]
   188a4:	movt	r4, #3
   188a8:	cmpne	r1, #0
   188ac:	beq	188cc <__assert_fail@plt+0x72e4>
   188b0:	add	r1, sp, #4
   188b4:	mov	r2, #10
   188b8:	bl	112c4 <strtol@plt>
   188bc:	ldr	r1, [sp, #4]
   188c0:	ldrb	r1, [r1]
   188c4:	cmp	r1, #0
   188c8:	moveq	r4, r0
   188cc:	mov	r0, r4
   188d0:	sub	sp, fp, #8
   188d4:	pop	{r4, sl, fp, pc}
   188d8:	push	{r4, r5, fp, lr}
   188dc:	add	fp, sp, #8
   188e0:	cmp	r0, #0
   188e4:	beq	18978 <__assert_fail@plt+0x7390>
   188e8:	mov	r1, #47	; 0x2f
   188ec:	mov	r4, r0
   188f0:	bl	11558 <strrchr@plt>
   188f4:	cmp	r0, #0
   188f8:	mov	r5, r4
   188fc:	addne	r5, r0, #1
   18900:	sub	r0, r5, r4
   18904:	cmp	r0, #7
   18908:	blt	1895c <__assert_fail@plt+0x7374>
   1890c:	movw	r1, #57516	; 0xe0ac
   18910:	sub	r0, r5, #7
   18914:	mov	r2, #7
   18918:	movt	r1, #1
   1891c:	bl	115b8 <strncmp@plt>
   18920:	cmp	r0, #0
   18924:	bne	1895c <__assert_fail@plt+0x7374>
   18928:	movw	r1, #57524	; 0xe0b4
   1892c:	mov	r0, r5
   18930:	mov	r2, #3
   18934:	movt	r1, #1
   18938:	bl	115b8 <strncmp@plt>
   1893c:	cmp	r0, #0
   18940:	beq	1894c <__assert_fail@plt+0x7364>
   18944:	mov	r4, r5
   18948:	b	1895c <__assert_fail@plt+0x7374>
   1894c:	movw	r0, #61856	; 0xf1a0
   18950:	add	r4, r5, #3
   18954:	movt	r0, #2
   18958:	str	r4, [r0]
   1895c:	movw	r0, #61860	; 0xf1a4
   18960:	movt	r0, #2
   18964:	str	r4, [r0]
   18968:	movw	r0, #61920	; 0xf1e0
   1896c:	movt	r0, #2
   18970:	str	r4, [r0]
   18974:	pop	{r4, r5, fp, pc}
   18978:	movw	r0, #61872	; 0xf1b0
   1897c:	mov	r1, #55	; 0x37
   18980:	mov	r2, #1
   18984:	movt	r0, #2
   18988:	ldr	r3, [r0]
   1898c:	movw	r0, #57460	; 0xe074
   18990:	movt	r0, #1
   18994:	bl	113b4 <fwrite@plt>
   18998:	bl	115c4 <abort@plt>
   1899c:	push	{r4, r5, r6, sl, fp, lr}
   189a0:	add	fp, sp, #16
   189a4:	mov	r4, r0
   189a8:	movw	r0, #61928	; 0xf1e8
   189ac:	movt	r0, #2
   189b0:	cmp	r4, #0
   189b4:	moveq	r4, r0
   189b8:	bl	114b0 <__errno_location@plt>
   189bc:	ldr	r6, [r0]
   189c0:	mov	r5, r0
   189c4:	mov	r0, r4
   189c8:	mov	r1, #48	; 0x30
   189cc:	bl	1b204 <__assert_fail@plt+0x9c1c>
   189d0:	str	r6, [r5]
   189d4:	pop	{r4, r5, r6, sl, fp, pc}
   189d8:	movw	r1, #61928	; 0xf1e8
   189dc:	cmp	r0, #0
   189e0:	movt	r1, #2
   189e4:	movne	r1, r0
   189e8:	ldr	r0, [r1]
   189ec:	bx	lr
   189f0:	movw	r2, #61928	; 0xf1e8
   189f4:	cmp	r0, #0
   189f8:	movt	r2, #2
   189fc:	movne	r2, r0
   18a00:	str	r1, [r2]
   18a04:	bx	lr
   18a08:	movw	r3, #61928	; 0xf1e8
   18a0c:	cmp	r0, #0
   18a10:	movt	r3, #2
   18a14:	movne	r3, r0
   18a18:	ubfx	r0, r1, #5, #3
   18a1c:	and	r1, r1, #31
   18a20:	add	r0, r3, r0, lsl #2
   18a24:	ldr	r3, [r0, #8]
   18a28:	eor	r2, r2, r3, lsr r1
   18a2c:	and	r2, r2, #1
   18a30:	eor	r2, r3, r2, lsl r1
   18a34:	str	r2, [r0, #8]
   18a38:	mov	r0, #1
   18a3c:	and	r0, r0, r3, lsr r1
   18a40:	bx	lr
   18a44:	movw	r2, #61928	; 0xf1e8
   18a48:	cmp	r0, #0
   18a4c:	movt	r2, #2
   18a50:	movne	r2, r0
   18a54:	ldr	r0, [r2, #4]
   18a58:	str	r1, [r2, #4]
   18a5c:	bx	lr
   18a60:	movw	r3, #61928	; 0xf1e8
   18a64:	cmp	r0, #0
   18a68:	movt	r3, #2
   18a6c:	movne	r3, r0
   18a70:	cmp	r1, #0
   18a74:	mov	r0, #10
   18a78:	cmpne	r2, #0
   18a7c:	str	r0, [r3]
   18a80:	bne	18a90 <__assert_fail@plt+0x74a8>
   18a84:	push	{fp, lr}
   18a88:	mov	fp, sp
   18a8c:	bl	115c4 <abort@plt>
   18a90:	str	r1, [r3, #40]	; 0x28
   18a94:	str	r2, [r3, #44]	; 0x2c
   18a98:	bx	lr
   18a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18aa0:	add	fp, sp, #28
   18aa4:	sub	sp, sp, #20
   18aa8:	mov	r7, r0
   18aac:	ldr	r0, [fp, #8]
   18ab0:	movw	r5, #61928	; 0xf1e8
   18ab4:	mov	r8, r3
   18ab8:	mov	r9, r2
   18abc:	mov	sl, r1
   18ac0:	movt	r5, #2
   18ac4:	cmp	r0, #0
   18ac8:	movne	r5, r0
   18acc:	bl	114b0 <__errno_location@plt>
   18ad0:	mov	r4, r0
   18ad4:	ldm	r5, {r0, r1}
   18ad8:	ldr	r2, [r5, #40]	; 0x28
   18adc:	ldr	r3, [r5, #44]	; 0x2c
   18ae0:	add	r5, r5, #8
   18ae4:	ldr	r6, [r4]
   18ae8:	stm	sp, {r0, r1, r5}
   18aec:	str	r2, [sp, #12]
   18af0:	str	r3, [sp, #16]
   18af4:	mov	r0, r7
   18af8:	mov	r1, sl
   18afc:	mov	r2, r9
   18b00:	mov	r3, r8
   18b04:	bl	18b14 <__assert_fail@plt+0x752c>
   18b08:	str	r6, [r4]
   18b0c:	sub	sp, fp, #28
   18b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b18:	add	fp, sp, #28
   18b1c:	sub	sp, sp, #156	; 0x9c
   18b20:	str	r0, [sp, #80]	; 0x50
   18b24:	ldr	r0, [fp, #12]
   18b28:	mov	r6, r1
   18b2c:	mov	r9, r3
   18b30:	str	r2, [fp, #-84]	; 0xffffffac
   18b34:	and	r1, r0, #4
   18b38:	str	r1, [sp, #32]
   18b3c:	and	r1, r0, #1
   18b40:	str	r1, [sp, #36]	; 0x24
   18b44:	ubfx	r4, r0, #1, #1
   18b48:	bl	113cc <__ctype_get_mb_cur_max@plt>
   18b4c:	str	r0, [sp, #40]	; 0x28
   18b50:	ldr	r0, [fp, #24]
   18b54:	ldr	r7, [fp, #8]
   18b58:	mov	r1, #0
   18b5c:	mov	r5, #1
   18b60:	str	r1, [fp, #-56]	; 0xffffffc8
   18b64:	mov	r1, #0
   18b68:	str	r1, [sp, #60]	; 0x3c
   18b6c:	str	r0, [sp, #76]	; 0x4c
   18b70:	ldr	r0, [fp, #20]
   18b74:	str	r0, [sp, #72]	; 0x48
   18b78:	mov	r0, #0
   18b7c:	str	r0, [sp, #56]	; 0x38
   18b80:	mov	r0, #0
   18b84:	str	r0, [sp, #92]	; 0x5c
   18b88:	mov	r0, #0
   18b8c:	str	r0, [fp, #-76]	; 0xffffffb4
   18b90:	mov	r0, #0
   18b94:	cmp	r7, #10
   18b98:	bhi	19b18 <__assert_fail@plt+0x8530>
   18b9c:	add	r1, pc, #28
   18ba0:	mov	sl, r6
   18ba4:	ldr	r6, [sp, #80]	; 0x50
   18ba8:	ldr	ip, [fp, #-84]	; 0xffffffac
   18bac:	mov	r8, #0
   18bb0:	mov	r2, #1
   18bb4:	mov	r3, #0
   18bb8:	mov	lr, r9
   18bbc:	ldr	pc, [r1, r7, lsl #2]
   18bc0:	andeq	r8, r1, r4, lsr #25
   18bc4:	ldrdeq	r8, [r1], -r0
   18bc8:	muleq	r1, r4, ip
   18bcc:	andeq	r8, r1, ip, lsl #25
   18bd0:	andeq	r8, r1, r4, asr #25
   18bd4:	andeq	r8, r1, r8, lsl sp
   18bd8:			; <UNDEFINED> instruction: 0x00018cb4
   18bdc:	andeq	r8, r1, r4, ror sp
   18be0:	andeq	r8, r1, ip, ror #23
   18be4:	andeq	r8, r1, ip, ror #23
   18be8:	andeq	r8, r1, r4, lsl ip
   18bec:	movw	r0, #57606	; 0xe106
   18bf0:	mov	r1, r7
   18bf4:	movt	r0, #1
   18bf8:	bl	1a524 <__assert_fail@plt+0x8f3c>
   18bfc:	str	r0, [sp, #72]	; 0x48
   18c00:	movw	r0, #57608	; 0xe108
   18c04:	mov	r1, r7
   18c08:	movt	r0, #1
   18c0c:	bl	1a524 <__assert_fail@plt+0x8f3c>
   18c10:	str	r0, [sp, #76]	; 0x4c
   18c14:	str	r5, [fp, #-48]	; 0xffffffd0
   18c18:	mov	r8, #0
   18c1c:	mov	r5, r7
   18c20:	tst	r4, #1
   18c24:	bne	18c5c <__assert_fail@plt+0x7674>
   18c28:	ldr	r0, [sp, #72]	; 0x48
   18c2c:	ldrb	r0, [r0]
   18c30:	cmp	r0, #0
   18c34:	beq	18c5c <__assert_fail@plt+0x7674>
   18c38:	ldr	r1, [sp, #72]	; 0x48
   18c3c:	mov	r8, #0
   18c40:	add	r1, r1, #1
   18c44:	cmp	r8, sl
   18c48:	strbcc	r0, [r6, r8]
   18c4c:	ldrb	r0, [r1, r8]
   18c50:	add	r8, r8, #1
   18c54:	cmp	r0, #0
   18c58:	bne	18c44 <__assert_fail@plt+0x765c>
   18c5c:	ldr	r7, [sp, #76]	; 0x4c
   18c60:	mov	r0, r7
   18c64:	bl	11474 <strlen@plt>
   18c68:	str	r7, [sp, #92]	; 0x5c
   18c6c:	mov	r7, r5
   18c70:	ldr	ip, [fp, #-84]	; 0xffffffac
   18c74:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18c78:	str	r0, [fp, #-76]	; 0xffffffb4
   18c7c:	mov	r2, #1
   18c80:	mov	r3, r4
   18c84:	mov	lr, r9
   18c88:	b	18d74 <__assert_fail@plt+0x778c>
   18c8c:	mov	r0, #1
   18c90:	b	18cd0 <__assert_fail@plt+0x76e8>
   18c94:	tst	r4, #1
   18c98:	bne	18cd0 <__assert_fail@plt+0x76e8>
   18c9c:	mov	r2, r0
   18ca0:	b	18cf8 <__assert_fail@plt+0x7710>
   18ca4:	mov	r7, #0
   18ca8:	mov	r8, #0
   18cac:	mov	r2, r0
   18cb0:	b	18d70 <__assert_fail@plt+0x7788>
   18cb4:	mov	r0, #1
   18cb8:	mov	r8, #0
   18cbc:	mov	r7, #5
   18cc0:	b	18d2c <__assert_fail@plt+0x7744>
   18cc4:	mov	r2, #1
   18cc8:	tst	r4, #1
   18ccc:	beq	18cf8 <__assert_fail@plt+0x7710>
   18cd0:	mov	r1, #1
   18cd4:	mov	r8, #0
   18cd8:	mov	r7, #2
   18cdc:	mov	r2, r0
   18ce0:	mov	r3, #1
   18ce4:	str	r1, [fp, #-76]	; 0xffffffb4
   18ce8:	movw	r1, #57608	; 0xe108
   18cec:	movt	r1, #1
   18cf0:	str	r1, [sp, #92]	; 0x5c
   18cf4:	b	18d74 <__assert_fail@plt+0x778c>
   18cf8:	cmp	sl, #0
   18cfc:	mov	r8, #1
   18d00:	mov	r7, #2
   18d04:	movne	r0, #39	; 0x27
   18d08:	strbne	r0, [r6]
   18d0c:	movw	r0, #57608	; 0xe108
   18d10:	movt	r0, #1
   18d14:	b	18d64 <__assert_fail@plt+0x777c>
   18d18:	mov	r7, #5
   18d1c:	tst	r4, #1
   18d20:	beq	18d48 <__assert_fail@plt+0x7760>
   18d24:	mov	r0, #1
   18d28:	mov	r8, #0
   18d2c:	str	r0, [fp, #-76]	; 0xffffffb4
   18d30:	movw	r0, #57604	; 0xe104
   18d34:	mov	r2, #1
   18d38:	mov	r3, #1
   18d3c:	movt	r0, #1
   18d40:	str	r0, [sp, #92]	; 0x5c
   18d44:	b	18d74 <__assert_fail@plt+0x778c>
   18d48:	cmp	sl, #0
   18d4c:	mov	r8, #1
   18d50:	mov	r2, #1
   18d54:	movne	r0, #34	; 0x22
   18d58:	strbne	r0, [r6]
   18d5c:	movw	r0, #57604	; 0xe104
   18d60:	movt	r0, #1
   18d64:	str	r0, [sp, #92]	; 0x5c
   18d68:	mov	r0, #1
   18d6c:	str	r0, [fp, #-76]	; 0xffffffb4
   18d70:	mov	r3, #0
   18d74:	ldr	r0, [fp, #16]
   18d78:	str	r3, [fp, #-72]	; 0xffffffb8
   18d7c:	str	r7, [fp, #-64]	; 0xffffffc0
   18d80:	str	r2, [sp, #84]	; 0x54
   18d84:	cmp	r0, #0
   18d88:	movwne	r0, #1
   18d8c:	and	r0, r0, r3
   18d90:	str	r0, [fp, #-88]	; 0xffffffa8
   18d94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18d98:	cmp	r0, #0
   18d9c:	movwne	r0, #1
   18da0:	subs	r4, r7, #2
   18da4:	mov	r7, #0
   18da8:	and	r1, r0, r3
   18dac:	str	r4, [fp, #-80]	; 0xffffffb0
   18db0:	and	r1, r2, r1
   18db4:	str	r1, [sp, #48]	; 0x30
   18db8:	clz	r1, r4
   18dbc:	lsr	r1, r1, #5
   18dc0:	and	r1, r1, r3
   18dc4:	eor	r3, r3, #1
   18dc8:	str	r1, [sp, #64]	; 0x40
   18dcc:	mov	r1, r4
   18dd0:	str	r3, [sp, #88]	; 0x58
   18dd4:	movwne	r1, #1
   18dd8:	orr	r3, r1, r3
   18ddc:	and	r1, r1, r2
   18de0:	and	r0, r0, r1
   18de4:	str	r3, [sp, #68]	; 0x44
   18de8:	str	r1, [fp, #-68]	; 0xffffffbc
   18dec:	str	r0, [fp, #-60]	; 0xffffffc4
   18df0:	eor	r0, r2, #1
   18df4:	str	r0, [sp, #52]	; 0x34
   18df8:	cmn	lr, #1
   18dfc:	beq	18e0c <__assert_fail@plt+0x7824>
   18e00:	cmp	r7, lr
   18e04:	bne	18e18 <__assert_fail@plt+0x7830>
   18e08:	b	19940 <__assert_fail@plt+0x8358>
   18e0c:	ldrb	r0, [ip, r7]
   18e10:	cmp	r0, #0
   18e14:	beq	19948 <__assert_fail@plt+0x8360>
   18e18:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18e1c:	mov	r9, #0
   18e20:	str	r5, [fp, #-48]	; 0xffffffd0
   18e24:	cmp	r0, #0
   18e28:	beq	18e5c <__assert_fail@plt+0x7874>
   18e2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18e30:	add	r4, r7, r0
   18e34:	cmp	r0, #2
   18e38:	bcc	18e54 <__assert_fail@plt+0x786c>
   18e3c:	cmn	lr, #1
   18e40:	bne	18e54 <__assert_fail@plt+0x786c>
   18e44:	mov	r0, ip
   18e48:	bl	11474 <strlen@plt>
   18e4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18e50:	mov	lr, r0
   18e54:	cmp	r4, lr
   18e58:	bls	18e64 <__assert_fail@plt+0x787c>
   18e5c:	mov	r0, #0
   18e60:	b	18ea4 <__assert_fail@plt+0x78bc>
   18e64:	ldr	r1, [sp, #92]	; 0x5c
   18e68:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18e6c:	add	r0, ip, r7
   18e70:	mov	r4, lr
   18e74:	bl	11348 <memcmp@plt>
   18e78:	ldr	r2, [sp, #88]	; 0x58
   18e7c:	cmp	r0, #0
   18e80:	mov	r1, r0
   18e84:	movwne	r1, #1
   18e88:	orr	r1, r1, r2
   18e8c:	tst	r1, #1
   18e90:	beq	199d8 <__assert_fail@plt+0x83f0>
   18e94:	ldr	ip, [fp, #-84]	; 0xffffffac
   18e98:	clz	r0, r0
   18e9c:	mov	lr, r4
   18ea0:	lsr	r0, r0, #5
   18ea4:	str	r0, [fp, #-52]	; 0xffffffcc
   18ea8:	ldrb	r5, [ip, r7]
   18eac:	cmp	r5, #126	; 0x7e
   18eb0:	bhi	19268 <__assert_fail@plt+0x7c80>
   18eb4:	add	r3, pc, #16
   18eb8:	mov	r4, #1
   18ebc:	mov	r2, #110	; 0x6e
   18ec0:	mov	r0, #97	; 0x61
   18ec4:	mov	r1, #0
   18ec8:	ldr	pc, [r3, r5, lsl #2]
   18ecc:	andeq	r9, r1, r4, ror #2
   18ed0:	andeq	r9, r1, r8, ror #4
   18ed4:	andeq	r9, r1, r8, ror #4
   18ed8:	andeq	r9, r1, r8, ror #4
   18edc:	andeq	r9, r1, r8, ror #4
   18ee0:	andeq	r9, r1, r8, ror #4
   18ee4:	andeq	r9, r1, r8, ror #4
   18ee8:	andeq	r9, r1, ip, lsl r3
   18eec:	andeq	r9, r1, r4, asr #2
   18ef0:	andeq	r9, r1, ip, lsr r1
   18ef4:	andeq	r9, r1, r0, asr r1
   18ef8:	ldrdeq	r9, [r1], -r0
   18efc:	andeq	r9, r1, r4, lsr r1
   18f00:	andeq	r9, r1, ip, asr #2
   18f04:	andeq	r9, r1, r8, ror #4
   18f08:	andeq	r9, r1, r8, ror #4
   18f0c:	andeq	r9, r1, r8, ror #4
   18f10:	andeq	r9, r1, r8, ror #4
   18f14:	andeq	r9, r1, r8, ror #4
   18f18:	andeq	r9, r1, r8, ror #4
   18f1c:	andeq	r9, r1, r8, ror #4
   18f20:	andeq	r9, r1, r8, ror #4
   18f24:	andeq	r9, r1, r8, ror #4
   18f28:	andeq	r9, r1, r8, ror #4
   18f2c:	andeq	r9, r1, r8, ror #4
   18f30:	andeq	r9, r1, r8, ror #4
   18f34:	andeq	r9, r1, r8, ror #4
   18f38:	andeq	r9, r1, r8, ror #4
   18f3c:	andeq	r9, r1, r8, ror #4
   18f40:	andeq	r9, r1, r8, ror #4
   18f44:	andeq	r9, r1, r8, ror #4
   18f48:	andeq	r9, r1, r8, ror #4
   18f4c:	ldrdeq	r9, [r1], -r4
   18f50:	ldrdeq	r9, [r1], -r8
   18f54:	ldrdeq	r9, [r1], -r8
   18f58:	ldrdeq	r9, [r1], -ip
   18f5c:	ldrdeq	r9, [r1], -r8
   18f60:	andeq	r9, r1, r8, asr #1
   18f64:	ldrdeq	r9, [r1], -r8
   18f68:	ldrdeq	r9, [r1], -r8
   18f6c:	ldrdeq	r9, [r1], -r8
   18f70:	ldrdeq	r9, [r1], -r8
   18f74:	ldrdeq	r9, [r1], -r8
   18f78:	andeq	r9, r1, r8, asr #1
   18f7c:	andeq	r9, r1, r8, asr #1
   18f80:	andeq	r9, r1, r8, asr #1
   18f84:	andeq	r9, r1, r8, asr #1
   18f88:	andeq	r9, r1, r8, asr #1
   18f8c:	andeq	r9, r1, r8, asr #1
   18f90:	andeq	r9, r1, r8, asr #1
   18f94:	andeq	r9, r1, r8, asr #1
   18f98:	andeq	r9, r1, r8, asr #1
   18f9c:	andeq	r9, r1, r8, asr #1
   18fa0:	andeq	r9, r1, r8, asr #1
   18fa4:	andeq	r9, r1, r8, asr #1
   18fa8:	andeq	r9, r1, r8, asr #1
   18fac:	andeq	r9, r1, r8, asr #1
   18fb0:	andeq	r9, r1, r8, asr #1
   18fb4:	andeq	r9, r1, r8, asr #1
   18fb8:	ldrdeq	r9, [r1], -r8
   18fbc:	ldrdeq	r9, [r1], -r8
   18fc0:	ldrdeq	r9, [r1], -r8
   18fc4:	ldrdeq	r9, [r1], -r8
   18fc8:	andeq	r9, r1, r4, lsr #3
   18fcc:	andeq	r9, r1, r8, ror #4
   18fd0:	andeq	r9, r1, r8, asr #1
   18fd4:	andeq	r9, r1, r8, asr #1
   18fd8:	andeq	r9, r1, r8, asr #1
   18fdc:	andeq	r9, r1, r8, asr #1
   18fe0:	andeq	r9, r1, r8, asr #1
   18fe4:	andeq	r9, r1, r8, asr #1
   18fe8:	andeq	r9, r1, r8, asr #1
   18fec:	andeq	r9, r1, r8, asr #1
   18ff0:	andeq	r9, r1, r8, asr #1
   18ff4:	andeq	r9, r1, r8, asr #1
   18ff8:	andeq	r9, r1, r8, asr #1
   18ffc:	andeq	r9, r1, r8, asr #1
   19000:	andeq	r9, r1, r8, asr #1
   19004:	andeq	r9, r1, r8, asr #1
   19008:	andeq	r9, r1, r8, asr #1
   1900c:	andeq	r9, r1, r8, asr #1
   19010:	andeq	r9, r1, r8, asr #1
   19014:	andeq	r9, r1, r8, asr #1
   19018:	andeq	r9, r1, r8, asr #1
   1901c:	andeq	r9, r1, r8, asr #1
   19020:	andeq	r9, r1, r8, asr #1
   19024:	andeq	r9, r1, r8, asr #1
   19028:	andeq	r9, r1, r8, asr #1
   1902c:	andeq	r9, r1, r8, asr #1
   19030:	andeq	r9, r1, r8, asr #1
   19034:	andeq	r9, r1, r8, asr #1
   19038:	ldrdeq	r9, [r1], -r8
   1903c:	andeq	r9, r1, r0, lsl r1
   19040:	andeq	r9, r1, r8, asr #1
   19044:	ldrdeq	r9, [r1], -r8
   19048:	andeq	r9, r1, r8, asr #1
   1904c:	ldrdeq	r9, [r1], -r8
   19050:	andeq	r9, r1, r8, asr #1
   19054:	andeq	r9, r1, r8, asr #1
   19058:	andeq	r9, r1, r8, asr #1
   1905c:	andeq	r9, r1, r8, asr #1
   19060:	andeq	r9, r1, r8, asr #1
   19064:	andeq	r9, r1, r8, asr #1
   19068:	andeq	r9, r1, r8, asr #1
   1906c:	andeq	r9, r1, r8, asr #1
   19070:	andeq	r9, r1, r8, asr #1
   19074:	andeq	r9, r1, r8, asr #1
   19078:	andeq	r9, r1, r8, asr #1
   1907c:	andeq	r9, r1, r8, asr #1
   19080:	andeq	r9, r1, r8, asr #1
   19084:	andeq	r9, r1, r8, asr #1
   19088:	andeq	r9, r1, r8, asr #1
   1908c:	andeq	r9, r1, r8, asr #1
   19090:	andeq	r9, r1, r8, asr #1
   19094:	andeq	r9, r1, r8, asr #1
   19098:	andeq	r9, r1, r8, asr #1
   1909c:	andeq	r9, r1, r8, asr #1
   190a0:	andeq	r9, r1, r8, asr #1
   190a4:	andeq	r9, r1, r8, asr #1
   190a8:	andeq	r9, r1, r8, asr #1
   190ac:	andeq	r9, r1, r8, asr #1
   190b0:	andeq	r9, r1, r8, asr #1
   190b4:	andeq	r9, r1, r8, asr #1
   190b8:	strdeq	r9, [r1], -r0
   190bc:	ldrdeq	r9, [r1], -r8
   190c0:	strdeq	r9, [r1], -r0
   190c4:	ldrdeq	r9, [r1], -ip
   190c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   190cc:	cmp	r0, #0
   190d0:	beq	19330 <__assert_fail@plt+0x7d48>
   190d4:	ldr	r0, [fp, #16]
   190d8:	b	19334 <__assert_fail@plt+0x7d4c>
   190dc:	mov	r4, #0
   190e0:	cmp	r7, #0
   190e4:	beq	192d4 <__assert_fail@plt+0x7cec>
   190e8:	mov	r9, #0
   190ec:	b	190c8 <__assert_fail@plt+0x7ae0>
   190f0:	mov	r4, #0
   190f4:	cmn	lr, #1
   190f8:	beq	192b8 <__assert_fail@plt+0x7cd0>
   190fc:	cmp	r7, #0
   19100:	bne	190e8 <__assert_fail@plt+0x7b00>
   19104:	cmp	lr, #1
   19108:	beq	192d4 <__assert_fail@plt+0x7cec>
   1910c:	b	190e8 <__assert_fail@plt+0x7b00>
   19110:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19114:	cmp	r0, #2
   19118:	bne	192f8 <__assert_fail@plt+0x7d10>
   1911c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19120:	tst	r0, #1
   19124:	bne	199f4 <__assert_fail@plt+0x840c>
   19128:	mov	r9, #0
   1912c:	mov	r0, #92	; 0x5c
   19130:	b	1930c <__assert_fail@plt+0x7d24>
   19134:	mov	r0, #102	; 0x66
   19138:	b	1931c <__assert_fail@plt+0x7d34>
   1913c:	mov	r2, #116	; 0x74
   19140:	b	19150 <__assert_fail@plt+0x7b68>
   19144:	mov	r0, #98	; 0x62
   19148:	b	1931c <__assert_fail@plt+0x7d34>
   1914c:	mov	r2, #114	; 0x72
   19150:	ldr	r0, [sp, #68]	; 0x44
   19154:	tst	r0, #1
   19158:	mov	r0, r2
   1915c:	bne	1931c <__assert_fail@plt+0x7d34>
   19160:	b	199f4 <__assert_fail@plt+0x840c>
   19164:	ldr	r0, [sp, #84]	; 0x54
   19168:	tst	r0, #1
   1916c:	beq	1940c <__assert_fail@plt+0x7e24>
   19170:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19174:	tst	r0, #1
   19178:	bne	19b04 <__assert_fail@plt+0x851c>
   1917c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19180:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19184:	cmp	r0, #2
   19188:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1918c:	movwne	r0, #1
   19190:	orr	r0, r0, r2
   19194:	tst	r0, #1
   19198:	beq	197dc <__assert_fail@plt+0x81f4>
   1919c:	mov	r0, r8
   191a0:	b	19810 <__assert_fail@plt+0x8228>
   191a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   191a8:	mov	r9, #0
   191ac:	mov	r5, #63	; 0x3f
   191b0:	cmp	r0, #5
   191b4:	beq	195c0 <__assert_fail@plt+0x7fd8>
   191b8:	cmp	r0, #2
   191bc:	bne	19664 <__assert_fail@plt+0x807c>
   191c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   191c4:	tst	r0, #1
   191c8:	beq	19668 <__assert_fail@plt+0x8080>
   191cc:	b	199f4 <__assert_fail@plt+0x840c>
   191d0:	mov	r0, #118	; 0x76
   191d4:	b	1931c <__assert_fail@plt+0x7d34>
   191d8:	mov	r0, #1
   191dc:	mov	r5, #39	; 0x27
   191e0:	str	r0, [sp, #60]	; 0x3c
   191e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   191e8:	cmp	r0, #2
   191ec:	bne	19260 <__assert_fail@plt+0x7c78>
   191f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   191f4:	tst	r0, #1
   191f8:	bne	199f4 <__assert_fail@plt+0x840c>
   191fc:	ldr	r2, [sp, #56]	; 0x38
   19200:	clz	r1, sl
   19204:	mov	r9, #0
   19208:	lsr	r1, r1, #5
   1920c:	cmp	r2, #0
   19210:	mov	r0, r2
   19214:	movwne	r0, #1
   19218:	orrs	r0, r0, r1
   1921c:	moveq	r2, sl
   19220:	moveq	sl, r0
   19224:	cmp	r8, sl
   19228:	str	r2, [sp, #56]	; 0x38
   1922c:	movcc	r0, #39	; 0x27
   19230:	strbcc	r0, [r6, r8]
   19234:	add	r0, r8, #1
   19238:	cmp	r0, sl
   1923c:	movcc	r1, #92	; 0x5c
   19240:	strbcc	r1, [r6, r0]
   19244:	add	r0, r8, #2
   19248:	add	r8, r8, #3
   1924c:	cmp	r0, sl
   19250:	movcc	r1, #39	; 0x27
   19254:	strbcc	r1, [r6, r0]
   19258:	mov	r0, #0
   1925c:	str	r0, [fp, #-56]	; 0xffffffc8
   19260:	mov	r4, #1
   19264:	b	190c8 <__assert_fail@plt+0x7ae0>
   19268:	ldr	r0, [sp, #40]	; 0x28
   1926c:	cmp	r0, #1
   19270:	bne	19438 <__assert_fail@plt+0x7e50>
   19274:	str	lr, [sp, #28]
   19278:	bl	1145c <__ctype_b_loc@plt>
   1927c:	ldr	r0, [r0]
   19280:	ldr	ip, [fp, #-84]	; 0xffffffac
   19284:	mov	r1, #1
   19288:	add	r0, r0, r5, lsl #1
   1928c:	ldrb	r0, [r0, #1]
   19290:	ubfx	r4, r0, #6, #1
   19294:	ldr	r0, [sp, #52]	; 0x34
   19298:	mov	r2, r1
   1929c:	cmp	r1, #1
   192a0:	orr	r0, r4, r0
   192a4:	bhi	19670 <__assert_fail@plt+0x8088>
   192a8:	tst	r0, #1
   192ac:	beq	19670 <__assert_fail@plt+0x8088>
   192b0:	ldr	lr, [sp, #28]
   192b4:	b	190c8 <__assert_fail@plt+0x7ae0>
   192b8:	cmp	r7, #0
   192bc:	ldrbeq	r0, [ip, #1]
   192c0:	cmpeq	r0, #0
   192c4:	beq	192d4 <__assert_fail@plt+0x7cec>
   192c8:	mvn	lr, #0
   192cc:	mov	r9, #0
   192d0:	b	190c8 <__assert_fail@plt+0x7ae0>
   192d4:	mov	r1, #1
   192d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   192dc:	cmp	r0, #2
   192e0:	bne	192f0 <__assert_fail@plt+0x7d08>
   192e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   192e8:	tst	r0, #1
   192ec:	bne	199f4 <__assert_fail@plt+0x840c>
   192f0:	mov	r4, r1
   192f4:	b	190c8 <__assert_fail@plt+0x7ae0>
   192f8:	ldr	r1, [sp, #48]	; 0x30
   192fc:	mov	r9, #0
   19300:	mov	r0, #92	; 0x5c
   19304:	cmp	r1, #0
   19308:	beq	1931c <__assert_fail@plt+0x7d34>
   1930c:	mov	r4, #0
   19310:	cmp	r9, #0
   19314:	beq	198a8 <__assert_fail@plt+0x82c0>
   19318:	b	198e4 <__assert_fail@plt+0x82fc>
   1931c:	ldr	r1, [sp, #84]	; 0x54
   19320:	mov	r4, #0
   19324:	mov	r9, #0
   19328:	tst	r1, #1
   1932c:	bne	1936c <__assert_fail@plt+0x7d84>
   19330:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19334:	cmp	r0, #0
   19338:	mov	r0, r5
   1933c:	beq	19360 <__assert_fail@plt+0x7d78>
   19340:	ldr	r1, [fp, #16]
   19344:	ubfx	r0, r5, #5, #3
   19348:	mov	r2, #1
   1934c:	ldr	r0, [r1, r0, lsl #2]
   19350:	and	r1, r5, #31
   19354:	tst	r0, r2, lsl r1
   19358:	mov	r0, r5
   1935c:	bne	1936c <__assert_fail@plt+0x7d84>
   19360:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19364:	cmp	r1, #0
   19368:	beq	198a0 <__assert_fail@plt+0x82b8>
   1936c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19370:	tst	r1, #1
   19374:	bne	199cc <__assert_fail@plt+0x83e4>
   19378:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1937c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19380:	cmp	r1, #2
   19384:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19388:	movwne	r1, #1
   1938c:	orr	r1, r1, r2
   19390:	tst	r1, #1
   19394:	beq	193a0 <__assert_fail@plt+0x7db8>
   19398:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1939c:	b	193dc <__assert_fail@plt+0x7df4>
   193a0:	cmp	r8, sl
   193a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   193a8:	movcc	r1, #39	; 0x27
   193ac:	strbcc	r1, [r6, r8]
   193b0:	add	r1, r8, #1
   193b4:	cmp	r1, sl
   193b8:	movcc	r2, #36	; 0x24
   193bc:	strbcc	r2, [r6, r1]
   193c0:	add	r1, r8, #2
   193c4:	add	r8, r8, #3
   193c8:	cmp	r1, sl
   193cc:	movcc	r2, #39	; 0x27
   193d0:	strbcc	r2, [r6, r1]
   193d4:	mov	r1, #1
   193d8:	str	r1, [fp, #-56]	; 0xffffffc8
   193dc:	cmp	r8, sl
   193e0:	movcc	r1, #92	; 0x5c
   193e4:	strbcc	r1, [r6, r8]
   193e8:	add	r8, r8, #1
   193ec:	cmp	r8, sl
   193f0:	and	r5, r5, r4
   193f4:	add	r7, r7, #1
   193f8:	strbcc	r0, [r6, r8]
   193fc:	add	r8, r8, #1
   19400:	cmn	lr, #1
   19404:	bne	18e00 <__assert_fail@plt+0x7818>
   19408:	b	18e0c <__assert_fail@plt+0x7824>
   1940c:	ldr	r0, [sp, #36]	; 0x24
   19410:	mov	r4, #0
   19414:	mov	r9, #0
   19418:	mov	r5, #0
   1941c:	cmp	r0, #0
   19420:	beq	19330 <__assert_fail@plt+0x7d48>
   19424:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19428:	add	r7, r7, #1
   1942c:	cmn	lr, #1
   19430:	bne	18e00 <__assert_fail@plt+0x7818>
   19434:	b	18e0c <__assert_fail@plt+0x7824>
   19438:	mov	r0, #0
   1943c:	cmn	lr, #1
   19440:	str	r0, [fp, #-36]	; 0xffffffdc
   19444:	str	r0, [fp, #-40]	; 0xffffffd8
   19448:	bne	1945c <__assert_fail@plt+0x7e74>
   1944c:	mov	r0, ip
   19450:	bl	11474 <strlen@plt>
   19454:	ldr	ip, [fp, #-84]	; 0xffffffac
   19458:	mov	lr, r0
   1945c:	add	r0, ip, r7
   19460:	mov	r4, #1
   19464:	mov	r6, #0
   19468:	str	lr, [sp, #28]
   1946c:	str	r0, [sp, #24]
   19470:	sub	r0, fp, #40	; 0x28
   19474:	mov	r3, r0
   19478:	str	r6, [sp, #44]	; 0x2c
   1947c:	add	r6, r6, r7
   19480:	sub	r0, fp, #44	; 0x2c
   19484:	add	r1, ip, r6
   19488:	sub	r2, lr, r6
   1948c:	bl	1c6a4 <__assert_fail@plt+0xb0bc>
   19490:	cmp	r0, #0
   19494:	beq	1992c <__assert_fail@plt+0x8344>
   19498:	cmn	r0, #1
   1949c:	beq	198ec <__assert_fail@plt+0x8304>
   194a0:	ldr	lr, [sp, #28]
   194a4:	cmn	r0, #2
   194a8:	beq	198f4 <__assert_fail@plt+0x830c>
   194ac:	ldr	r2, [sp, #64]	; 0x40
   194b0:	cmp	r0, #2
   194b4:	mov	r1, #0
   194b8:	movwcc	r1, #1
   194bc:	eor	r2, r2, #1
   194c0:	orrs	r1, r2, r1
   194c4:	bne	19584 <__assert_fail@plt+0x7f9c>
   194c8:	ldr	r1, [sp, #44]	; 0x2c
   194cc:	ldr	r2, [sp, #24]
   194d0:	add	r1, r2, r1
   194d4:	mov	r2, #1
   194d8:	ldrb	r3, [r1, r2]
   194dc:	sub	r3, r3, #91	; 0x5b
   194e0:	cmp	r3, #33	; 0x21
   194e4:	bhi	19578 <__assert_fail@plt+0x7f90>
   194e8:	add	r6, pc, #0
   194ec:	ldr	pc, [r6, r3, lsl #2]
   194f0:	andeq	r9, r1, ip, ror #19
   194f4:	andeq	r9, r1, ip, ror #19
   194f8:	andeq	r9, r1, r8, ror r5
   194fc:	andeq	r9, r1, ip, ror #19
   19500:	andeq	r9, r1, r8, ror r5
   19504:	andeq	r9, r1, ip, ror #19
   19508:	andeq	r9, r1, r8, ror r5
   1950c:	andeq	r9, r1, r8, ror r5
   19510:	andeq	r9, r1, r8, ror r5
   19514:	andeq	r9, r1, r8, ror r5
   19518:	andeq	r9, r1, r8, ror r5
   1951c:	andeq	r9, r1, r8, ror r5
   19520:	andeq	r9, r1, r8, ror r5
   19524:	andeq	r9, r1, r8, ror r5
   19528:	andeq	r9, r1, r8, ror r5
   1952c:	andeq	r9, r1, r8, ror r5
   19530:	andeq	r9, r1, r8, ror r5
   19534:	andeq	r9, r1, r8, ror r5
   19538:	andeq	r9, r1, r8, ror r5
   1953c:	andeq	r9, r1, r8, ror r5
   19540:	andeq	r9, r1, r8, ror r5
   19544:	andeq	r9, r1, r8, ror r5
   19548:	andeq	r9, r1, r8, ror r5
   1954c:	andeq	r9, r1, r8, ror r5
   19550:	andeq	r9, r1, r8, ror r5
   19554:	andeq	r9, r1, r8, ror r5
   19558:	andeq	r9, r1, r8, ror r5
   1955c:	andeq	r9, r1, r8, ror r5
   19560:	andeq	r9, r1, r8, ror r5
   19564:	andeq	r9, r1, r8, ror r5
   19568:	andeq	r9, r1, r8, ror r5
   1956c:	andeq	r9, r1, r8, ror r5
   19570:	andeq	r9, r1, r8, ror r5
   19574:	andeq	r9, r1, ip, ror #19
   19578:	add	r2, r2, #1
   1957c:	cmp	r2, r0
   19580:	bcc	194d8 <__assert_fail@plt+0x7ef0>
   19584:	ldr	r6, [sp, #44]	; 0x2c
   19588:	add	r6, r0, r6
   1958c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19590:	bl	11390 <iswprint@plt>
   19594:	cmp	r0, #0
   19598:	movwne	r0, #1
   1959c:	and	r4, r4, r0
   195a0:	sub	r0, fp, #40	; 0x28
   195a4:	bl	11330 <mbsinit@plt>
   195a8:	ldr	lr, [sp, #28]
   195ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   195b0:	sub	r3, fp, #40	; 0x28
   195b4:	cmp	r0, #0
   195b8:	beq	19478 <__assert_fail@plt+0x7e90>
   195bc:	b	19934 <__assert_fail@plt+0x834c>
   195c0:	ldr	r0, [sp, #32]
   195c4:	cmp	r0, #0
   195c8:	beq	19664 <__assert_fail@plt+0x807c>
   195cc:	add	r0, r7, #2
   195d0:	cmp	r0, lr
   195d4:	bcs	19664 <__assert_fail@plt+0x807c>
   195d8:	add	r1, ip, r7
   195dc:	ldrb	r1, [r1, #1]
   195e0:	cmp	r1, #63	; 0x3f
   195e4:	bne	19664 <__assert_fail@plt+0x807c>
   195e8:	ldrb	r5, [ip, r0]
   195ec:	sub	r1, r5, #33	; 0x21
   195f0:	cmp	r1, #29
   195f4:	bhi	19664 <__assert_fail@plt+0x807c>
   195f8:	movw	r3, #20929	; 0x51c1
   195fc:	mov	r2, #1
   19600:	movt	r3, #14336	; 0x3800
   19604:	tst	r3, r2, lsl r1
   19608:	beq	19664 <__assert_fail@plt+0x807c>
   1960c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19610:	tst	r1, #1
   19614:	bne	19b0c <__assert_fail@plt+0x8524>
   19618:	cmp	r8, sl
   1961c:	mov	r7, r0
   19620:	mov	r4, #0
   19624:	movcc	r1, #63	; 0x3f
   19628:	strbcc	r1, [r6, r8]
   1962c:	add	r1, r8, #1
   19630:	cmp	r1, sl
   19634:	movcc	r2, #34	; 0x22
   19638:	strbcc	r2, [r6, r1]
   1963c:	add	r1, r8, #2
   19640:	cmp	r1, sl
   19644:	movcc	r2, #34	; 0x22
   19648:	strbcc	r2, [r6, r1]
   1964c:	add	r1, r8, #3
   19650:	add	r8, r8, #4
   19654:	cmp	r1, sl
   19658:	movcc	r2, #63	; 0x3f
   1965c:	strbcc	r2, [r6, r1]
   19660:	b	190c8 <__assert_fail@plt+0x7ae0>
   19664:	mov	r5, #63	; 0x3f
   19668:	mov	r4, #0
   1966c:	b	190c8 <__assert_fail@plt+0x7ae0>
   19670:	add	r1, r2, r7
   19674:	ldr	lr, [sp, #28]
   19678:	mov	r3, #0
   1967c:	str	r1, [sp, #44]	; 0x2c
   19680:	add	r1, r7, #1
   19684:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19688:	tst	r0, #1
   1968c:	bne	19760 <__assert_fail@plt+0x8178>
   19690:	ldr	r2, [fp, #-72]	; 0xffffffb8
   19694:	tst	r2, #1
   19698:	bne	19a54 <__assert_fail@plt+0x846c>
   1969c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   196a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   196a4:	cmp	r7, #2
   196a8:	movwne	r3, #1
   196ac:	orr	r3, r3, r2
   196b0:	tst	r3, #1
   196b4:	bne	196f0 <__assert_fail@plt+0x8108>
   196b8:	cmp	r8, sl
   196bc:	add	r3, r8, #1
   196c0:	movcc	r2, #39	; 0x27
   196c4:	strbcc	r2, [r6, r8]
   196c8:	cmp	r3, sl
   196cc:	movcc	r2, #36	; 0x24
   196d0:	strbcc	r2, [r6, r3]
   196d4:	add	r3, r8, #2
   196d8:	add	r8, r8, #3
   196dc:	cmp	r3, sl
   196e0:	movcc	r2, #39	; 0x27
   196e4:	strbcc	r2, [r6, r3]
   196e8:	mov	r2, #1
   196ec:	str	r2, [fp, #-56]	; 0xffffffc8
   196f0:	cmp	r8, sl
   196f4:	movcc	r3, #92	; 0x5c
   196f8:	strbcc	r3, [r6, r8]
   196fc:	add	r3, r8, #1
   19700:	cmp	r3, sl
   19704:	andcc	r7, r5, #192	; 0xc0
   19708:	movcc	r2, #48	; 0x30
   1970c:	orrcc	r7, r2, r7, lsr #6
   19710:	strbcc	r7, [r6, r3]
   19714:	add	r3, r8, #2
   19718:	add	r8, r8, #3
   1971c:	cmp	r3, sl
   19720:	lsrcc	r7, r5, #3
   19724:	movcc	r2, #6
   19728:	bficc	r7, r2, #3, #29
   1972c:	mov	r2, #6
   19730:	strbcc	r7, [r6, r3]
   19734:	bfi	r5, r2, #3, #29
   19738:	mov	r3, #1
   1973c:	b	19784 <__assert_fail@plt+0x819c>
   19740:	cmp	r8, sl
   19744:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19748:	strbcc	r5, [r6, r8]
   1974c:	add	r8, r8, #1
   19750:	ldrb	r5, [ip, r1]
   19754:	add	r1, r1, #1
   19758:	tst	r0, #1
   1975c:	beq	19690 <__assert_fail@plt+0x80a8>
   19760:	ldr	r2, [fp, #-52]	; 0xffffffcc
   19764:	tst	r2, #1
   19768:	beq	1977c <__assert_fail@plt+0x8194>
   1976c:	cmp	r8, sl
   19770:	movcc	r7, #92	; 0x5c
   19774:	strbcc	r7, [r6, r8]
   19778:	add	r8, r8, #1
   1977c:	mov	r2, #0
   19780:	str	r2, [fp, #-52]	; 0xffffffcc
   19784:	ldr	r2, [sp, #44]	; 0x2c
   19788:	and	r9, r3, #1
   1978c:	cmp	r2, r1
   19790:	bls	19890 <__assert_fail@plt+0x82a8>
   19794:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19798:	cmp	r9, #0
   1979c:	movwne	r9, #1
   197a0:	mvn	r7, r2
   197a4:	orr	r7, r7, r9
   197a8:	tst	r7, #1
   197ac:	bne	19740 <__assert_fail@plt+0x8158>
   197b0:	cmp	r8, sl
   197b4:	movcc	r7, #39	; 0x27
   197b8:	strbcc	r7, [r6, r8]
   197bc:	add	r7, r8, #1
   197c0:	add	r8, r8, #2
   197c4:	cmp	r7, sl
   197c8:	movcc	r2, #39	; 0x27
   197cc:	strbcc	r2, [r6, r7]
   197d0:	mov	r2, #0
   197d4:	str	r2, [fp, #-56]	; 0xffffffc8
   197d8:	b	19740 <__assert_fail@plt+0x8158>
   197dc:	cmp	r8, sl
   197e0:	mov	r2, #1
   197e4:	movcc	r0, #39	; 0x27
   197e8:	strbcc	r0, [r6, r8]
   197ec:	add	r0, r8, #1
   197f0:	cmp	r0, sl
   197f4:	movcc	r1, #36	; 0x24
   197f8:	strbcc	r1, [r6, r0]
   197fc:	add	r0, r8, #2
   19800:	cmp	r0, sl
   19804:	movcc	r1, #39	; 0x27
   19808:	strbcc	r1, [r6, r0]
   1980c:	add	r0, r8, #3
   19810:	cmp	r0, sl
   19814:	add	r8, r0, #1
   19818:	str	r2, [fp, #-56]	; 0xffffffc8
   1981c:	movcc	r1, #92	; 0x5c
   19820:	strbcc	r1, [r6, r0]
   19824:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19828:	cmp	r1, #2
   1982c:	beq	19880 <__assert_fail@plt+0x8298>
   19830:	add	r1, r7, #1
   19834:	mov	r4, #0
   19838:	mov	r9, #1
   1983c:	mov	r5, #48	; 0x30
   19840:	cmp	r1, lr
   19844:	bcs	190c8 <__assert_fail@plt+0x7ae0>
   19848:	ldrb	r1, [ip, r1]
   1984c:	sub	r1, r1, #48	; 0x30
   19850:	uxtb	r1, r1
   19854:	cmp	r1, #9
   19858:	bhi	190c8 <__assert_fail@plt+0x7ae0>
   1985c:	cmp	r8, sl
   19860:	movcc	r1, #48	; 0x30
   19864:	strbcc	r1, [r6, r8]
   19868:	add	r1, r0, #2
   1986c:	add	r8, r0, #3
   19870:	cmp	r1, sl
   19874:	movcc	r2, #48	; 0x30
   19878:	strbcc	r2, [r6, r1]
   1987c:	b	190c8 <__assert_fail@plt+0x7ae0>
   19880:	mov	r0, #48	; 0x30
   19884:	mov	r9, #1
   19888:	mov	r4, #0
   1988c:	b	19360 <__assert_fail@plt+0x7d78>
   19890:	cmp	r9, #0
   19894:	sub	r7, r1, #1
   19898:	mov	r0, r5
   1989c:	movwne	r9, #1
   198a0:	cmp	r9, #0
   198a4:	bne	198e4 <__assert_fail@plt+0x82fc>
   198a8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   198ac:	tst	r1, #1
   198b0:	beq	198e4 <__assert_fail@plt+0x82fc>
   198b4:	cmp	r8, sl
   198b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   198bc:	movcc	r1, #39	; 0x27
   198c0:	strbcc	r1, [r6, r8]
   198c4:	add	r1, r8, #1
   198c8:	add	r8, r8, #2
   198cc:	cmp	r1, sl
   198d0:	movcc	r2, #39	; 0x27
   198d4:	strbcc	r2, [r6, r1]
   198d8:	mov	r1, #0
   198dc:	str	r1, [fp, #-56]	; 0xffffffc8
   198e0:	b	193ec <__assert_fail@plt+0x7e04>
   198e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   198e8:	b	193ec <__assert_fail@plt+0x7e04>
   198ec:	mov	r4, #0
   198f0:	b	1992c <__assert_fail@plt+0x8344>
   198f4:	mov	r4, #0
   198f8:	cmp	lr, r6
   198fc:	bls	1992c <__assert_fail@plt+0x8344>
   19900:	ldr	ip, [fp, #-84]	; 0xffffffac
   19904:	ldr	r6, [sp, #44]	; 0x2c
   19908:	ldr	r0, [sp, #24]
   1990c:	ldrb	r0, [r0, r6]
   19910:	cmp	r0, #0
   19914:	beq	19934 <__assert_fail@plt+0x834c>
   19918:	add	r6, r6, #1
   1991c:	add	r0, r7, r6
   19920:	cmp	r0, lr
   19924:	bcc	19908 <__assert_fail@plt+0x8320>
   19928:	b	19934 <__assert_fail@plt+0x834c>
   1992c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19930:	ldr	r6, [sp, #44]	; 0x2c
   19934:	mov	r1, r6
   19938:	ldr	r6, [sp, #80]	; 0x50
   1993c:	b	19294 <__assert_fail@plt+0x7cac>
   19940:	mov	lr, r7
   19944:	b	1994c <__assert_fail@plt+0x8364>
   19948:	mvn	lr, #0
   1994c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19950:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19954:	eor	r0, r7, #2
   19958:	orr	r0, r0, r8
   1995c:	clz	r0, r0
   19960:	lsr	r0, r0, #5
   19964:	tst	r1, r0
   19968:	bne	199f4 <__assert_fail@plt+0x840c>
   1996c:	mov	r0, r1
   19970:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19974:	cmp	r7, #2
   19978:	movwne	r1, #1
   1997c:	orr	r0, r0, r1
   19980:	tst	r0, #1
   19984:	ldreq	r0, [sp, #60]	; 0x3c
   19988:	eoreq	r0, r0, #1
   1998c:	tsteq	r0, #1
   19990:	bne	19aa0 <__assert_fail@plt+0x84b8>
   19994:	mov	r9, lr
   19998:	tst	r5, #1
   1999c:	bne	19a5c <__assert_fail@plt+0x8474>
   199a0:	ldr	r6, [sp, #56]	; 0x38
   199a4:	mov	r4, #0
   199a8:	cmp	r6, #0
   199ac:	beq	19a98 <__assert_fail@plt+0x84b0>
   199b0:	ldr	r0, [sp, #84]	; 0x54
   199b4:	mov	r1, #0
   199b8:	cmp	sl, #0
   199bc:	mov	r5, #0
   199c0:	str	r1, [fp, #-72]	; 0xffffffb8
   199c4:	beq	18b94 <__assert_fail@plt+0x75ac>
   199c8:	b	19aa0 <__assert_fail@plt+0x84b8>
   199cc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   199d0:	ldr	r2, [sp, #84]	; 0x54
   199d4:	b	199fc <__assert_fail@plt+0x8414>
   199d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   199dc:	mov	r2, #1
   199e0:	mov	lr, r4
   199e4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   199e8:	b	199fc <__assert_fail@plt+0x8414>
   199ec:	ldr	r6, [sp, #80]	; 0x50
   199f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   199f4:	ldr	r2, [sp, #84]	; 0x54
   199f8:	mov	r7, #2
   199fc:	mov	r0, #0
   19a00:	ldr	r1, [fp, #12]
   19a04:	tst	r2, #1
   19a08:	mov	r2, r7
   19a0c:	mov	r3, lr
   19a10:	str	r0, [sp, #8]
   19a14:	ldr	r0, [sp, #72]	; 0x48
   19a18:	movwne	r2, #4
   19a1c:	cmp	r7, #2
   19a20:	movne	r2, r7
   19a24:	str	r2, [sp]
   19a28:	mov	r2, ip
   19a2c:	bic	r1, r1, #2
   19a30:	str	r0, [sp, #12]
   19a34:	ldr	r0, [sp, #76]	; 0x4c
   19a38:	str	r1, [sp, #4]
   19a3c:	mov	r1, sl
   19a40:	str	r0, [sp, #16]
   19a44:	mov	r0, r6
   19a48:	bl	18b14 <__assert_fail@plt+0x752c>
   19a4c:	mov	r8, r0
   19a50:	b	19af8 <__assert_fail@plt+0x8510>
   19a54:	ldr	r2, [sp, #84]	; 0x54
   19a58:	b	199fc <__assert_fail@plt+0x8414>
   19a5c:	mov	r0, #5
   19a60:	ldr	r1, [sp, #56]	; 0x38
   19a64:	ldr	r2, [fp, #-84]	; 0xffffffac
   19a68:	mov	r3, r9
   19a6c:	str	r0, [sp]
   19a70:	ldr	r0, [fp, #12]
   19a74:	str	r0, [sp, #4]
   19a78:	ldr	r0, [fp, #16]
   19a7c:	str	r0, [sp, #8]
   19a80:	ldr	r0, [sp, #72]	; 0x48
   19a84:	str	r0, [sp, #12]
   19a88:	ldr	r0, [sp, #76]	; 0x4c
   19a8c:	str	r0, [sp, #16]
   19a90:	ldr	r0, [sp, #80]	; 0x50
   19a94:	b	19a48 <__assert_fail@plt+0x8460>
   19a98:	mov	r0, #0
   19a9c:	str	r0, [fp, #-72]	; 0xffffffb8
   19aa0:	ldr	r1, [sp, #92]	; 0x5c
   19aa4:	cmp	r1, #0
   19aa8:	beq	19ae8 <__assert_fail@plt+0x8500>
   19aac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19ab0:	ldr	r2, [sp, #80]	; 0x50
   19ab4:	tst	r0, #1
   19ab8:	bne	19aec <__assert_fail@plt+0x8504>
   19abc:	ldrb	r0, [r1]
   19ac0:	cmp	r0, #0
   19ac4:	beq	19aec <__assert_fail@plt+0x8504>
   19ac8:	add	r1, r1, #1
   19acc:	cmp	r8, sl
   19ad0:	strbcc	r0, [r2, r8]
   19ad4:	add	r8, r8, #1
   19ad8:	ldrb	r0, [r1], #1
   19adc:	cmp	r0, #0
   19ae0:	bne	19acc <__assert_fail@plt+0x84e4>
   19ae4:	b	19aec <__assert_fail@plt+0x8504>
   19ae8:	ldr	r2, [sp, #80]	; 0x50
   19aec:	cmp	r8, sl
   19af0:	movcc	r0, #0
   19af4:	strbcc	r0, [r2, r8]
   19af8:	mov	r0, r8
   19afc:	sub	sp, fp, #28
   19b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b04:	mov	r2, #1
   19b08:	b	199e4 <__assert_fail@plt+0x83fc>
   19b0c:	ldr	r2, [sp, #84]	; 0x54
   19b10:	mov	r7, #5
   19b14:	b	199fc <__assert_fail@plt+0x8414>
   19b18:	bl	115c4 <abort@plt>
   19b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b20:	add	fp, sp, #28
   19b24:	sub	sp, sp, #28
   19b28:	movw	r5, #61928	; 0xf1e8
   19b2c:	cmp	r2, #0
   19b30:	mov	r4, r1
   19b34:	mov	r7, r0
   19b38:	str	r0, [sp, #20]
   19b3c:	movt	r5, #2
   19b40:	movne	r5, r2
   19b44:	bl	114b0 <__errno_location@plt>
   19b48:	mov	sl, r0
   19b4c:	ldm	r5, {r0, r1}
   19b50:	ldr	r2, [r5, #40]	; 0x28
   19b54:	ldr	r3, [r5, #44]	; 0x2c
   19b58:	add	r9, r5, #8
   19b5c:	ldr	r6, [sl]
   19b60:	orr	r8, r1, #1
   19b64:	mov	r1, #0
   19b68:	str	r6, [sp, #24]
   19b6c:	stm	sp, {r0, r8, r9}
   19b70:	str	r2, [sp, #12]
   19b74:	str	r3, [sp, #16]
   19b78:	mov	r0, #0
   19b7c:	mov	r2, r7
   19b80:	mov	r3, r4
   19b84:	mov	r6, r4
   19b88:	bl	18b14 <__assert_fail@plt+0x752c>
   19b8c:	add	r7, r0, #1
   19b90:	mov	r0, r7
   19b94:	bl	1add4 <__assert_fail@plt+0x97ec>
   19b98:	mov	r4, r0
   19b9c:	ldr	r0, [r5]
   19ba0:	ldr	r2, [r5, #44]	; 0x2c
   19ba4:	ldr	r1, [r5, #40]	; 0x28
   19ba8:	mov	r3, r6
   19bac:	stm	sp, {r0, r8, r9}
   19bb0:	str	r2, [sp, #16]
   19bb4:	str	r1, [sp, #12]
   19bb8:	mov	r0, r4
   19bbc:	mov	r1, r7
   19bc0:	ldr	r2, [sp, #20]
   19bc4:	bl	18b14 <__assert_fail@plt+0x752c>
   19bc8:	ldr	r0, [sp, #24]
   19bcc:	str	r0, [sl]
   19bd0:	mov	r0, r4
   19bd4:	sub	sp, fp, #28
   19bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19be0:	add	fp, sp, #28
   19be4:	sub	sp, sp, #36	; 0x24
   19be8:	movw	r8, #61928	; 0xf1e8
   19bec:	cmp	r3, #0
   19bf0:	mov	r4, r2
   19bf4:	str	r2, [sp, #24]
   19bf8:	mov	r5, r1
   19bfc:	mov	r6, r0
   19c00:	str	r0, [sp, #20]
   19c04:	movt	r8, #2
   19c08:	movne	r8, r3
   19c0c:	bl	114b0 <__errno_location@plt>
   19c10:	str	r0, [sp, #28]
   19c14:	cmp	r4, #0
   19c18:	add	sl, r8, #8
   19c1c:	ldm	r8, {r3, r9}
   19c20:	ldr	r7, [r0]
   19c24:	ldr	r1, [r8, #40]	; 0x28
   19c28:	ldr	r2, [r8, #44]	; 0x2c
   19c2c:	mov	r0, #0
   19c30:	orreq	r9, r9, #1
   19c34:	str	r7, [sp, #32]
   19c38:	mov	r7, r5
   19c3c:	stm	sp, {r3, r9, sl}
   19c40:	str	r1, [sp, #12]
   19c44:	str	r2, [sp, #16]
   19c48:	mov	r1, #0
   19c4c:	mov	r2, r6
   19c50:	mov	r3, r5
   19c54:	bl	18b14 <__assert_fail@plt+0x752c>
   19c58:	add	r4, r0, #1
   19c5c:	mov	r5, r0
   19c60:	mov	r0, r4
   19c64:	bl	1add4 <__assert_fail@plt+0x97ec>
   19c68:	mov	r6, r0
   19c6c:	ldr	r0, [r8]
   19c70:	ldr	r2, [r8, #44]	; 0x2c
   19c74:	ldr	r1, [r8, #40]	; 0x28
   19c78:	mov	r3, r7
   19c7c:	stm	sp, {r0, r9, sl}
   19c80:	str	r2, [sp, #16]
   19c84:	str	r1, [sp, #12]
   19c88:	mov	r0, r6
   19c8c:	mov	r1, r4
   19c90:	ldr	r2, [sp, #20]
   19c94:	bl	18b14 <__assert_fail@plt+0x752c>
   19c98:	ldr	r0, [sp, #24]
   19c9c:	ldr	r1, [sp, #32]
   19ca0:	ldr	r2, [sp, #28]
   19ca4:	cmp	r0, #0
   19ca8:	str	r1, [r2]
   19cac:	strne	r5, [r0]
   19cb0:	mov	r0, r6
   19cb4:	sub	sp, fp, #28
   19cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19cc0:	add	fp, sp, #24
   19cc4:	movw	r5, #61796	; 0xf164
   19cc8:	movw	r8, #61792	; 0xf160
   19ccc:	movt	r5, #2
   19cd0:	movt	r8, #2
   19cd4:	ldr	r0, [r5]
   19cd8:	ldr	r4, [r8]
   19cdc:	cmp	r0, #2
   19ce0:	blt	19d0c <__assert_fail@plt+0x8724>
   19ce4:	add	r7, r4, #12
   19ce8:	mov	r6, #0
   19cec:	ldr	r0, [r7, r6, lsl #3]
   19cf0:	bl	174e4 <__assert_fail@plt+0x5efc>
   19cf4:	ldr	r1, [r5]
   19cf8:	add	r2, r6, #2
   19cfc:	add	r0, r6, #1
   19d00:	mov	r6, r0
   19d04:	cmp	r2, r1
   19d08:	blt	19cec <__assert_fail@plt+0x8704>
   19d0c:	ldr	r0, [r4, #4]
   19d10:	movw	r7, #61976	; 0xf218
   19d14:	movt	r7, #2
   19d18:	cmp	r0, r7
   19d1c:	beq	19d34 <__assert_fail@plt+0x874c>
   19d20:	bl	174e4 <__assert_fail@plt+0x5efc>
   19d24:	movw	r0, #61800	; 0xf168
   19d28:	mov	r6, #256	; 0x100
   19d2c:	movt	r0, #2
   19d30:	strd	r6, [r0]
   19d34:	movw	r6, #61800	; 0xf168
   19d38:	movt	r6, #2
   19d3c:	cmp	r4, r6
   19d40:	beq	19d50 <__assert_fail@plt+0x8768>
   19d44:	mov	r0, r4
   19d48:	bl	174e4 <__assert_fail@plt+0x5efc>
   19d4c:	str	r6, [r8]
   19d50:	mov	r0, #1
   19d54:	str	r0, [r5]
   19d58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19d5c:	movw	r3, #61928	; 0xf1e8
   19d60:	mvn	r2, #0
   19d64:	movt	r3, #2
   19d68:	b	19d6c <__assert_fail@plt+0x8784>
   19d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d70:	add	fp, sp, #28
   19d74:	sub	sp, sp, #44	; 0x2c
   19d78:	mov	r7, r3
   19d7c:	str	r2, [sp, #36]	; 0x24
   19d80:	str	r1, [sp, #32]
   19d84:	mov	r5, r0
   19d88:	bl	114b0 <__errno_location@plt>
   19d8c:	cmp	r5, #0
   19d90:	blt	19efc <__assert_fail@plt+0x8914>
   19d94:	cmn	r5, #-2147483647	; 0x80000001
   19d98:	beq	19efc <__assert_fail@plt+0x8914>
   19d9c:	movw	r8, #61796	; 0xf164
   19da0:	movw	r4, #61792	; 0xf160
   19da4:	str	r0, [sp, #28]
   19da8:	ldr	r0, [r0]
   19dac:	movt	r8, #2
   19db0:	movt	r4, #2
   19db4:	ldr	r1, [r8]
   19db8:	ldr	r6, [r4]
   19dbc:	str	r0, [sp, #24]
   19dc0:	cmp	r1, r5
   19dc4:	ble	19dd0 <__assert_fail@plt+0x87e8>
   19dc8:	mov	sl, r6
   19dcc:	b	19e38 <__assert_fail@plt+0x8850>
   19dd0:	movw	r9, #61800	; 0xf168
   19dd4:	mov	r0, #8
   19dd8:	add	r2, r5, #1
   19ddc:	str	r1, [fp, #-32]	; 0xffffffe0
   19de0:	mvn	r3, #-2147483648	; 0x80000000
   19de4:	movt	r9, #2
   19de8:	str	r0, [sp]
   19dec:	sub	r2, r2, r1
   19df0:	sub	r1, fp, #32
   19df4:	subs	r0, r6, r9
   19df8:	movne	r0, r6
   19dfc:	bl	1afd4 <__assert_fail@plt+0x99ec>
   19e00:	cmp	r6, r9
   19e04:	mov	sl, r0
   19e08:	str	r0, [r4]
   19e0c:	ldrdeq	r0, [r9]
   19e10:	stmeq	sl, {r0, r1}
   19e14:	ldr	r1, [r8]
   19e18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19e1c:	add	r0, sl, r1, lsl #3
   19e20:	sub	r1, r2, r1
   19e24:	lsl	r2, r1, #3
   19e28:	mov	r1, #0
   19e2c:	bl	114c8 <memset@plt>
   19e30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19e34:	str	r0, [r8]
   19e38:	mov	r9, sl
   19e3c:	ldr	r6, [r9, r5, lsl #3]!
   19e40:	ldr	r4, [r9, #4]!
   19e44:	ldm	r7, {r0, r1}
   19e48:	ldr	r2, [r7, #40]	; 0x28
   19e4c:	ldr	r3, [r7, #44]	; 0x2c
   19e50:	orr	r8, r1, #1
   19e54:	add	r1, r7, #8
   19e58:	stm	sp, {r0, r8}
   19e5c:	add	r0, sp, #8
   19e60:	str	r1, [sp, #20]
   19e64:	stm	r0, {r1, r2, r3}
   19e68:	mov	r0, r4
   19e6c:	mov	r1, r6
   19e70:	ldr	r2, [sp, #32]
   19e74:	ldr	r3, [sp, #36]	; 0x24
   19e78:	bl	18b14 <__assert_fail@plt+0x752c>
   19e7c:	cmp	r6, r0
   19e80:	bhi	19ee4 <__assert_fail@plt+0x88fc>
   19e84:	add	r6, r0, #1
   19e88:	movw	r0, #61976	; 0xf218
   19e8c:	movt	r0, #2
   19e90:	str	r6, [sl, r5, lsl #3]
   19e94:	cmp	r4, r0
   19e98:	beq	19ea4 <__assert_fail@plt+0x88bc>
   19e9c:	mov	r0, r4
   19ea0:	bl	174e4 <__assert_fail@plt+0x5efc>
   19ea4:	mov	r0, r6
   19ea8:	bl	1add4 <__assert_fail@plt+0x97ec>
   19eac:	str	r0, [r9]
   19eb0:	mov	r4, r0
   19eb4:	add	r3, sp, #8
   19eb8:	ldr	r0, [r7]
   19ebc:	ldr	r1, [r7, #40]	; 0x28
   19ec0:	ldr	r2, [r7, #44]	; 0x2c
   19ec4:	stm	sp, {r0, r8}
   19ec8:	ldr	r0, [sp, #20]
   19ecc:	stm	r3, {r0, r1, r2}
   19ed0:	mov	r0, r4
   19ed4:	mov	r1, r6
   19ed8:	ldr	r2, [sp, #32]
   19edc:	ldr	r3, [sp, #36]	; 0x24
   19ee0:	bl	18b14 <__assert_fail@plt+0x752c>
   19ee4:	ldr	r0, [sp, #28]
   19ee8:	ldr	r1, [sp, #24]
   19eec:	str	r1, [r0]
   19ef0:	mov	r0, r4
   19ef4:	sub	sp, fp, #28
   19ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19efc:	bl	115c4 <abort@plt>
   19f00:	movw	r3, #61928	; 0xf1e8
   19f04:	movt	r3, #2
   19f08:	b	19d6c <__assert_fail@plt+0x8784>
   19f0c:	movw	r3, #61928	; 0xf1e8
   19f10:	mov	r1, r0
   19f14:	mov	r0, #0
   19f18:	mvn	r2, #0
   19f1c:	movt	r3, #2
   19f20:	b	19d6c <__assert_fail@plt+0x8784>
   19f24:	movw	r3, #61928	; 0xf1e8
   19f28:	mov	r2, r1
   19f2c:	mov	r1, r0
   19f30:	mov	r0, #0
   19f34:	movt	r3, #2
   19f38:	b	19d6c <__assert_fail@plt+0x8784>
   19f3c:	push	{fp, lr}
   19f40:	mov	fp, sp
   19f44:	sub	sp, sp, #48	; 0x30
   19f48:	vmov.i32	q8, #0	; 0x00000000
   19f4c:	mov	ip, #32
   19f50:	mov	r3, sp
   19f54:	mov	lr, r2
   19f58:	cmp	r1, #10
   19f5c:	add	r2, r3, #16
   19f60:	vst1.64	{d16-d17}, [r3], ip
   19f64:	vst1.64	{d16-d17}, [r3]
   19f68:	vst1.64	{d16-d17}, [r2]
   19f6c:	beq	19f8c <__assert_fail@plt+0x89a4>
   19f70:	str	r1, [sp]
   19f74:	mov	r3, sp
   19f78:	mov	r1, lr
   19f7c:	mvn	r2, #0
   19f80:	bl	19d6c <__assert_fail@plt+0x8784>
   19f84:	mov	sp, fp
   19f88:	pop	{fp, pc}
   19f8c:	bl	115c4 <abort@plt>
   19f90:	push	{r4, sl, fp, lr}
   19f94:	add	fp, sp, #8
   19f98:	sub	sp, sp, #48	; 0x30
   19f9c:	mov	ip, r3
   19fa0:	mov	r3, sp
   19fa4:	vmov.i32	q8, #0	; 0x00000000
   19fa8:	mov	lr, #32
   19fac:	cmp	r1, #10
   19fb0:	add	r4, r3, #16
   19fb4:	vst1.64	{d16-d17}, [r3], lr
   19fb8:	vst1.64	{d16-d17}, [r3]
   19fbc:	vst1.64	{d16-d17}, [r4]
   19fc0:	beq	19fe0 <__assert_fail@plt+0x89f8>
   19fc4:	str	r1, [sp]
   19fc8:	mov	r1, r2
   19fcc:	mov	r3, sp
   19fd0:	mov	r2, ip
   19fd4:	bl	19d6c <__assert_fail@plt+0x8784>
   19fd8:	sub	sp, fp, #8
   19fdc:	pop	{r4, sl, fp, pc}
   19fe0:	bl	115c4 <abort@plt>
   19fe4:	push	{fp, lr}
   19fe8:	mov	fp, sp
   19fec:	sub	sp, sp, #48	; 0x30
   19ff0:	mov	r3, sp
   19ff4:	vmov.i32	q8, #0	; 0x00000000
   19ff8:	mov	ip, #32
   19ffc:	cmp	r0, #10
   1a000:	add	r2, r3, #16
   1a004:	vst1.64	{d16-d17}, [r3], ip
   1a008:	vst1.64	{d16-d17}, [r3]
   1a00c:	vst1.64	{d16-d17}, [r2]
   1a010:	beq	1a030 <__assert_fail@plt+0x8a48>
   1a014:	str	r0, [sp]
   1a018:	mov	r3, sp
   1a01c:	mov	r0, #0
   1a020:	mvn	r2, #0
   1a024:	bl	19d6c <__assert_fail@plt+0x8784>
   1a028:	mov	sp, fp
   1a02c:	pop	{fp, pc}
   1a030:	bl	115c4 <abort@plt>
   1a034:	push	{fp, lr}
   1a038:	mov	fp, sp
   1a03c:	sub	sp, sp, #48	; 0x30
   1a040:	mov	r3, sp
   1a044:	vmov.i32	q8, #0	; 0x00000000
   1a048:	mov	ip, #32
   1a04c:	cmp	r0, #10
   1a050:	add	lr, r3, #16
   1a054:	vst1.64	{d16-d17}, [r3], ip
   1a058:	vst1.64	{d16-d17}, [r3]
   1a05c:	vst1.64	{d16-d17}, [lr]
   1a060:	beq	1a07c <__assert_fail@plt+0x8a94>
   1a064:	str	r0, [sp]
   1a068:	mov	r3, sp
   1a06c:	mov	r0, #0
   1a070:	bl	19d6c <__assert_fail@plt+0x8784>
   1a074:	mov	sp, fp
   1a078:	pop	{fp, pc}
   1a07c:	bl	115c4 <abort@plt>
   1a080:	push	{r4, sl, fp, lr}
   1a084:	add	fp, sp, #8
   1a088:	sub	sp, sp, #48	; 0x30
   1a08c:	mov	lr, r0
   1a090:	movw	r0, #61928	; 0xf1e8
   1a094:	mov	r3, #32
   1a098:	mov	ip, r1
   1a09c:	mov	r4, #1
   1a0a0:	movt	r0, #2
   1a0a4:	add	r1, r0, #16
   1a0a8:	vld1.64	{d16-d17}, [r0], r3
   1a0ac:	mov	r3, sp
   1a0b0:	vld1.64	{d18-d19}, [r1]
   1a0b4:	add	r1, r3, #16
   1a0b8:	vld1.64	{d20-d21}, [r0]
   1a0bc:	add	r0, r3, #32
   1a0c0:	vst1.64	{d18-d19}, [r1]
   1a0c4:	mov	r1, r3
   1a0c8:	vst1.64	{d20-d21}, [r0]
   1a0cc:	mov	r0, #28
   1a0d0:	and	r0, r0, r2, lsr #3
   1a0d4:	and	r2, r2, #31
   1a0d8:	vst1.64	{d16-d17}, [r1], r0
   1a0dc:	ldr	r0, [r1, #8]
   1a0e0:	bic	r4, r4, r0, lsr r2
   1a0e4:	eor	r0, r0, r4, lsl r2
   1a0e8:	mov	r2, ip
   1a0ec:	str	r0, [r1, #8]
   1a0f0:	mov	r0, #0
   1a0f4:	mov	r1, lr
   1a0f8:	bl	19d6c <__assert_fail@plt+0x8784>
   1a0fc:	sub	sp, fp, #8
   1a100:	pop	{r4, sl, fp, pc}
   1a104:	push	{fp, lr}
   1a108:	mov	fp, sp
   1a10c:	sub	sp, sp, #48	; 0x30
   1a110:	mov	ip, r0
   1a114:	movw	r0, #61928	; 0xf1e8
   1a118:	mov	r3, #32
   1a11c:	movt	r0, #2
   1a120:	add	r2, r0, #16
   1a124:	vld1.64	{d16-d17}, [r0], r3
   1a128:	mov	r3, sp
   1a12c:	vld1.64	{d18-d19}, [r2]
   1a130:	add	r2, r3, #16
   1a134:	vld1.64	{d20-d21}, [r0]
   1a138:	add	r0, r3, #32
   1a13c:	vst1.64	{d18-d19}, [r2]
   1a140:	mov	r2, r3
   1a144:	vst1.64	{d20-d21}, [r0]
   1a148:	mov	r0, #28
   1a14c:	and	r0, r0, r1, lsr #3
   1a150:	and	r1, r1, #31
   1a154:	vst1.64	{d16-d17}, [r2], r0
   1a158:	mov	r0, #1
   1a15c:	ldr	lr, [r2, #8]
   1a160:	bic	r0, r0, lr, lsr r1
   1a164:	eor	r0, lr, r0, lsl r1
   1a168:	mov	r1, ip
   1a16c:	str	r0, [r2, #8]
   1a170:	mov	r0, #0
   1a174:	mvn	r2, #0
   1a178:	bl	19d6c <__assert_fail@plt+0x8784>
   1a17c:	mov	sp, fp
   1a180:	pop	{fp, pc}
   1a184:	push	{fp, lr}
   1a188:	mov	fp, sp
   1a18c:	sub	sp, sp, #48	; 0x30
   1a190:	movw	r2, #61928	; 0xf1e8
   1a194:	mov	r3, #32
   1a198:	mov	r1, r0
   1a19c:	movt	r2, #2
   1a1a0:	add	r0, r2, #16
   1a1a4:	vld1.64	{d16-d17}, [r2], r3
   1a1a8:	mov	r3, sp
   1a1ac:	vld1.64	{d18-d19}, [r0]
   1a1b0:	add	r0, r3, #16
   1a1b4:	vld1.64	{d20-d21}, [r2]
   1a1b8:	mov	r2, r3
   1a1bc:	vst1.64	{d18-d19}, [r0]
   1a1c0:	add	r0, r3, #32
   1a1c4:	vst1.64	{d20-d21}, [r0]
   1a1c8:	mov	r0, #12
   1a1cc:	vst1.64	{d16-d17}, [r2], r0
   1a1d0:	ldr	r0, [r2]
   1a1d4:	orr	r0, r0, #67108864	; 0x4000000
   1a1d8:	str	r0, [r2]
   1a1dc:	mov	r0, #0
   1a1e0:	mvn	r2, #0
   1a1e4:	bl	19d6c <__assert_fail@plt+0x8784>
   1a1e8:	mov	sp, fp
   1a1ec:	pop	{fp, pc}
   1a1f0:	push	{fp, lr}
   1a1f4:	mov	fp, sp
   1a1f8:	sub	sp, sp, #48	; 0x30
   1a1fc:	mov	ip, r1
   1a200:	mov	r1, r0
   1a204:	movw	r0, #61928	; 0xf1e8
   1a208:	mov	r3, #32
   1a20c:	movt	r0, #2
   1a210:	add	r2, r0, #16
   1a214:	vld1.64	{d16-d17}, [r0], r3
   1a218:	mov	r3, sp
   1a21c:	vld1.64	{d18-d19}, [r2]
   1a220:	add	r2, r3, #16
   1a224:	vld1.64	{d20-d21}, [r0]
   1a228:	add	r0, r3, #32
   1a22c:	vst1.64	{d18-d19}, [r2]
   1a230:	mov	r2, r3
   1a234:	vst1.64	{d20-d21}, [r0]
   1a238:	mov	r0, #12
   1a23c:	vst1.64	{d16-d17}, [r2], r0
   1a240:	ldr	r0, [r2]
   1a244:	orr	r0, r0, #67108864	; 0x4000000
   1a248:	str	r0, [r2]
   1a24c:	mov	r0, #0
   1a250:	mov	r2, ip
   1a254:	bl	19d6c <__assert_fail@plt+0x8784>
   1a258:	mov	sp, fp
   1a25c:	pop	{fp, pc}
   1a260:	push	{r4, sl, fp, lr}
   1a264:	add	fp, sp, #8
   1a268:	sub	sp, sp, #96	; 0x60
   1a26c:	mov	ip, r2
   1a270:	mov	r2, sp
   1a274:	vmov.i32	q8, #0	; 0x00000000
   1a278:	mov	r4, #28
   1a27c:	cmp	r1, #10
   1a280:	mov	r3, r2
   1a284:	add	lr, r2, #16
   1a288:	vst1.64	{d16-d17}, [r3], r4
   1a28c:	vst1.64	{d16-d17}, [lr]
   1a290:	vst1.32	{d16-d17}, [r3]
   1a294:	beq	1a2e4 <__assert_fail@plt+0x8cfc>
   1a298:	vld1.64	{d16-d17}, [r2], r4
   1a29c:	vld1.64	{d18-d19}, [lr]
   1a2a0:	add	r3, sp, #48	; 0x30
   1a2a4:	add	r4, r3, #4
   1a2a8:	vld1.32	{d20-d21}, [r2]
   1a2ac:	add	r2, r3, #20
   1a2b0:	vst1.32	{d16-d17}, [r4]
   1a2b4:	vst1.32	{d18-d19}, [r2]
   1a2b8:	add	r2, r3, #32
   1a2bc:	vst1.32	{d20-d21}, [r2]
   1a2c0:	str	r1, [sp, #48]	; 0x30
   1a2c4:	mvn	r2, #0
   1a2c8:	ldr	r1, [sp, #60]	; 0x3c
   1a2cc:	orr	r1, r1, #67108864	; 0x4000000
   1a2d0:	str	r1, [sp, #60]	; 0x3c
   1a2d4:	mov	r1, ip
   1a2d8:	bl	19d6c <__assert_fail@plt+0x8784>
   1a2dc:	sub	sp, fp, #8
   1a2e0:	pop	{r4, sl, fp, pc}
   1a2e4:	bl	115c4 <abort@plt>
   1a2e8:	push	{r4, r5, fp, lr}
   1a2ec:	add	fp, sp, #8
   1a2f0:	sub	sp, sp, #48	; 0x30
   1a2f4:	mov	ip, r3
   1a2f8:	movw	r3, #61928	; 0xf1e8
   1a2fc:	mov	lr, #32
   1a300:	cmp	r1, #0
   1a304:	mov	r5, sp
   1a308:	movt	r3, #2
   1a30c:	cmpne	r2, #0
   1a310:	add	r4, r3, #16
   1a314:	vld1.64	{d16-d17}, [r3], lr
   1a318:	vld1.64	{d18-d19}, [r4]
   1a31c:	add	r4, r5, #16
   1a320:	vld1.64	{d20-d21}, [r3]
   1a324:	vst1.64	{d16-d17}, [r5], lr
   1a328:	mov	r3, #10
   1a32c:	vst1.64	{d18-d19}, [r4]
   1a330:	vst1.64	{d20-d21}, [r5]
   1a334:	str	r3, [sp]
   1a338:	bne	1a340 <__assert_fail@plt+0x8d58>
   1a33c:	bl	115c4 <abort@plt>
   1a340:	str	r2, [sp, #44]	; 0x2c
   1a344:	str	r1, [sp, #40]	; 0x28
   1a348:	mov	r3, sp
   1a34c:	mov	r1, ip
   1a350:	mvn	r2, #0
   1a354:	bl	19d6c <__assert_fail@plt+0x8784>
   1a358:	sub	sp, fp, #8
   1a35c:	pop	{r4, r5, fp, pc}
   1a360:	push	{r4, r5, fp, lr}
   1a364:	add	fp, sp, #8
   1a368:	sub	sp, sp, #48	; 0x30
   1a36c:	mov	lr, r3
   1a370:	movw	r3, #61928	; 0xf1e8
   1a374:	mov	ip, #32
   1a378:	cmp	r1, #0
   1a37c:	mov	r5, sp
   1a380:	movt	r3, #2
   1a384:	cmpne	r2, #0
   1a388:	add	r4, r3, #16
   1a38c:	vld1.64	{d16-d17}, [r3], ip
   1a390:	vld1.64	{d18-d19}, [r4]
   1a394:	add	r4, r5, #16
   1a398:	vld1.64	{d20-d21}, [r3]
   1a39c:	vst1.64	{d16-d17}, [r5], ip
   1a3a0:	mov	r3, #10
   1a3a4:	vst1.64	{d18-d19}, [r4]
   1a3a8:	vst1.64	{d20-d21}, [r5]
   1a3ac:	str	r3, [sp]
   1a3b0:	bne	1a3b8 <__assert_fail@plt+0x8dd0>
   1a3b4:	bl	115c4 <abort@plt>
   1a3b8:	ldr	ip, [fp, #8]
   1a3bc:	str	r2, [sp, #44]	; 0x2c
   1a3c0:	str	r1, [sp, #40]	; 0x28
   1a3c4:	mov	r3, sp
   1a3c8:	mov	r1, lr
   1a3cc:	mov	r2, ip
   1a3d0:	bl	19d6c <__assert_fail@plt+0x8784>
   1a3d4:	sub	sp, fp, #8
   1a3d8:	pop	{r4, r5, fp, pc}
   1a3dc:	push	{r4, sl, fp, lr}
   1a3e0:	add	fp, sp, #8
   1a3e4:	sub	sp, sp, #48	; 0x30
   1a3e8:	mov	ip, r2
   1a3ec:	movw	r2, #61928	; 0xf1e8
   1a3f0:	mov	lr, #32
   1a3f4:	cmp	r0, #0
   1a3f8:	mov	r4, sp
   1a3fc:	movt	r2, #2
   1a400:	cmpne	r1, #0
   1a404:	add	r3, r2, #16
   1a408:	vld1.64	{d16-d17}, [r2], lr
   1a40c:	vld1.64	{d18-d19}, [r3]
   1a410:	add	r3, r4, #16
   1a414:	vld1.64	{d20-d21}, [r2]
   1a418:	vst1.64	{d16-d17}, [r4], lr
   1a41c:	mov	r2, #10
   1a420:	vst1.64	{d18-d19}, [r3]
   1a424:	vst1.64	{d20-d21}, [r4]
   1a428:	str	r2, [sp]
   1a42c:	bne	1a434 <__assert_fail@plt+0x8e4c>
   1a430:	bl	115c4 <abort@plt>
   1a434:	str	r1, [sp, #44]	; 0x2c
   1a438:	str	r0, [sp, #40]	; 0x28
   1a43c:	mov	r3, sp
   1a440:	mov	r0, #0
   1a444:	mov	r1, ip
   1a448:	mvn	r2, #0
   1a44c:	bl	19d6c <__assert_fail@plt+0x8784>
   1a450:	sub	sp, fp, #8
   1a454:	pop	{r4, sl, fp, pc}
   1a458:	push	{r4, r5, fp, lr}
   1a45c:	add	fp, sp, #8
   1a460:	sub	sp, sp, #48	; 0x30
   1a464:	mov	lr, r2
   1a468:	movw	r2, #61928	; 0xf1e8
   1a46c:	mov	ip, r3
   1a470:	mov	r3, #32
   1a474:	cmp	r0, #0
   1a478:	mov	r5, sp
   1a47c:	movt	r2, #2
   1a480:	cmpne	r1, #0
   1a484:	add	r4, r2, #16
   1a488:	vld1.64	{d16-d17}, [r2], r3
   1a48c:	vld1.64	{d18-d19}, [r4]
   1a490:	add	r4, r5, #16
   1a494:	vld1.64	{d20-d21}, [r2]
   1a498:	vst1.64	{d16-d17}, [r5], r3
   1a49c:	mov	r2, #10
   1a4a0:	vst1.64	{d18-d19}, [r4]
   1a4a4:	vst1.64	{d20-d21}, [r5]
   1a4a8:	str	r2, [sp]
   1a4ac:	bne	1a4b4 <__assert_fail@plt+0x8ecc>
   1a4b0:	bl	115c4 <abort@plt>
   1a4b4:	str	r1, [sp, #44]	; 0x2c
   1a4b8:	str	r0, [sp, #40]	; 0x28
   1a4bc:	mov	r3, sp
   1a4c0:	mov	r0, #0
   1a4c4:	mov	r1, lr
   1a4c8:	mov	r2, ip
   1a4cc:	bl	19d6c <__assert_fail@plt+0x8784>
   1a4d0:	sub	sp, fp, #8
   1a4d4:	pop	{r4, r5, fp, pc}
   1a4d8:	movw	r3, #61808	; 0xf170
   1a4dc:	movt	r3, #2
   1a4e0:	b	19d6c <__assert_fail@plt+0x8784>
   1a4e4:	movw	r3, #61808	; 0xf170
   1a4e8:	mov	r2, r1
   1a4ec:	mov	r1, r0
   1a4f0:	mov	r0, #0
   1a4f4:	movt	r3, #2
   1a4f8:	b	19d6c <__assert_fail@plt+0x8784>
   1a4fc:	movw	r3, #61808	; 0xf170
   1a500:	mvn	r2, #0
   1a504:	movt	r3, #2
   1a508:	b	19d6c <__assert_fail@plt+0x8784>
   1a50c:	movw	r3, #61808	; 0xf170
   1a510:	mov	r1, r0
   1a514:	mov	r0, #0
   1a518:	mvn	r2, #0
   1a51c:	movt	r3, #2
   1a520:	b	19d6c <__assert_fail@plt+0x8784>
   1a524:	push	{r4, r5, fp, lr}
   1a528:	add	fp, sp, #8
   1a52c:	mov	r5, r0
   1a530:	mov	r4, r1
   1a534:	mov	r0, #0
   1a538:	mov	r2, #5
   1a53c:	mov	r1, r5
   1a540:	bl	11354 <dcgettext@plt>
   1a544:	cmp	r0, r5
   1a548:	popne	{r4, r5, fp, pc}
   1a54c:	bl	1c66c <__assert_fail@plt+0xb084>
   1a550:	ldrb	r1, [r0]
   1a554:	and	r1, r1, #223	; 0xdf
   1a558:	cmp	r1, #71	; 0x47
   1a55c:	beq	1a5c4 <__assert_fail@plt+0x8fdc>
   1a560:	cmp	r1, #85	; 0x55
   1a564:	bne	1a5e8 <__assert_fail@plt+0x9000>
   1a568:	ldrb	r1, [r0, #1]
   1a56c:	and	r1, r1, #223	; 0xdf
   1a570:	cmp	r1, #84	; 0x54
   1a574:	bne	1a5e8 <__assert_fail@plt+0x9000>
   1a578:	ldrb	r1, [r0, #2]
   1a57c:	and	r1, r1, #223	; 0xdf
   1a580:	cmp	r1, #70	; 0x46
   1a584:	ldrbeq	r1, [r0, #3]
   1a588:	cmpeq	r1, #45	; 0x2d
   1a58c:	bne	1a5e8 <__assert_fail@plt+0x9000>
   1a590:	ldrb	r1, [r0, #4]
   1a594:	cmp	r1, #56	; 0x38
   1a598:	ldrbeq	r0, [r0, #5]
   1a59c:	cmpeq	r0, #0
   1a5a0:	bne	1a5e8 <__assert_fail@plt+0x9000>
   1a5a4:	ldrb	r1, [r5]
   1a5a8:	movw	r2, #57610	; 0xe10a
   1a5ac:	movw	r0, #57614	; 0xe10e
   1a5b0:	movt	r2, #1
   1a5b4:	movt	r0, #1
   1a5b8:	cmp	r1, #96	; 0x60
   1a5bc:	moveq	r0, r2
   1a5c0:	pop	{r4, r5, fp, pc}
   1a5c4:	ldrb	r1, [r0, #1]
   1a5c8:	and	r1, r1, #223	; 0xdf
   1a5cc:	cmp	r1, #66	; 0x42
   1a5d0:	bne	1a5e8 <__assert_fail@plt+0x9000>
   1a5d4:	ldrb	r1, [r0, #2]
   1a5d8:	cmp	r1, #49	; 0x31
   1a5dc:	ldrbeq	r1, [r0, #3]
   1a5e0:	cmpeq	r1, #56	; 0x38
   1a5e4:	beq	1a604 <__assert_fail@plt+0x901c>
   1a5e8:	movw	r1, #57604	; 0xe104
   1a5ec:	movw	r0, #57608	; 0xe108
   1a5f0:	cmp	r4, #9
   1a5f4:	movt	r1, #1
   1a5f8:	movt	r0, #1
   1a5fc:	moveq	r0, r1
   1a600:	pop	{r4, r5, fp, pc}
   1a604:	ldrb	r1, [r0, #4]
   1a608:	cmp	r1, #48	; 0x30
   1a60c:	ldrbeq	r1, [r0, #5]
   1a610:	cmpeq	r1, #51	; 0x33
   1a614:	bne	1a5e8 <__assert_fail@plt+0x9000>
   1a618:	ldrb	r1, [r0, #6]
   1a61c:	cmp	r1, #48	; 0x30
   1a620:	ldrbeq	r0, [r0, #7]
   1a624:	cmpeq	r0, #0
   1a628:	bne	1a5e8 <__assert_fail@plt+0x9000>
   1a62c:	ldrb	r1, [r5]
   1a630:	movw	r2, #57618	; 0xe112
   1a634:	movw	r0, #57622	; 0xe116
   1a638:	movt	r2, #1
   1a63c:	movt	r0, #1
   1a640:	b	1a5b8 <__assert_fail@plt+0x8fd0>
   1a644:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a648:	add	fp, sp, #24
   1a64c:	movw	r8, #0
   1a650:	mov	r6, r2
   1a654:	mov	r4, r1
   1a658:	mov	r5, r0
   1a65c:	movt	r8, #32752	; 0x7ff0
   1a660:	mov	r0, r5
   1a664:	mov	r1, r4
   1a668:	mov	r2, r6
   1a66c:	bl	112dc <read@plt>
   1a670:	mov	r7, r0
   1a674:	cmn	r0, #1
   1a678:	bgt	1a6a0 <__assert_fail@plt+0x90b8>
   1a67c:	bl	114b0 <__errno_location@plt>
   1a680:	ldr	r0, [r0]
   1a684:	cmp	r0, #4
   1a688:	beq	1a660 <__assert_fail@plt+0x9078>
   1a68c:	cmp	r6, r8
   1a690:	bls	1a6a0 <__assert_fail@plt+0x90b8>
   1a694:	cmp	r0, #22
   1a698:	mov	r6, r8
   1a69c:	beq	1a660 <__assert_fail@plt+0x9078>
   1a6a0:	mov	r0, r7
   1a6a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a6a8:	push	{r4, r5, r6, r7, fp, lr}
   1a6ac:	add	fp, sp, #16
   1a6b0:	mov	r4, r0
   1a6b4:	cmp	r0, #2
   1a6b8:	movhi	r0, r4
   1a6bc:	pophi	{r4, r5, r6, r7, fp, pc}
   1a6c0:	mov	r0, r4
   1a6c4:	bl	1c740 <__assert_fail@plt+0xb158>
   1a6c8:	mov	r5, r0
   1a6cc:	bl	114b0 <__errno_location@plt>
   1a6d0:	ldr	r7, [r0]
   1a6d4:	mov	r6, r0
   1a6d8:	mov	r0, r4
   1a6dc:	bl	115d0 <close@plt>
   1a6e0:	mov	r0, r5
   1a6e4:	str	r7, [r6]
   1a6e8:	pop	{r4, r5, r6, r7, fp, pc}
   1a6ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a6f0:	add	fp, sp, #24
   1a6f4:	sub	sp, sp, #32
   1a6f8:	ldr	r6, [fp, #12]
   1a6fc:	ldr	r7, [fp, #8]
   1a700:	mov	r4, r2
   1a704:	mov	r8, r0
   1a708:	cmp	r1, #0
   1a70c:	beq	1a734 <__assert_fail@plt+0x914c>
   1a710:	movw	r2, #57712	; 0xe170
   1a714:	mov	r5, r1
   1a718:	str	r3, [sp, #4]
   1a71c:	str	r4, [sp]
   1a720:	mov	r0, r8
   1a724:	mov	r1, #1
   1a728:	movt	r2, #1
   1a72c:	mov	r3, r5
   1a730:	b	1a74c <__assert_fail@plt+0x9164>
   1a734:	movw	r2, #57724	; 0xe17c
   1a738:	str	r3, [sp]
   1a73c:	mov	r0, r8
   1a740:	mov	r1, #1
   1a744:	mov	r3, r4
   1a748:	movt	r2, #1
   1a74c:	bl	114f8 <__fprintf_chk@plt>
   1a750:	movw	r1, #57731	; 0xe183
   1a754:	mov	r0, #0
   1a758:	mov	r2, #5
   1a75c:	movt	r1, #1
   1a760:	bl	11354 <dcgettext@plt>
   1a764:	movw	r2, #58449	; 0xe451
   1a768:	mov	r3, r0
   1a76c:	movw	r0, #2022	; 0x7e6
   1a770:	mov	r1, #1
   1a774:	str	r0, [sp]
   1a778:	movt	r2, #1
   1a77c:	mov	r0, r8
   1a780:	bl	114f8 <__fprintf_chk@plt>
   1a784:	movw	r4, #54061	; 0xd32d
   1a788:	mov	r1, r8
   1a78c:	movt	r4, #1
   1a790:	mov	r0, r4
   1a794:	bl	112a0 <fputs_unlocked@plt>
   1a798:	movw	r1, #57735	; 0xe187
   1a79c:	mov	r0, #0
   1a7a0:	mov	r2, #5
   1a7a4:	movt	r1, #1
   1a7a8:	bl	11354 <dcgettext@plt>
   1a7ac:	movw	r3, #57906	; 0xe232
   1a7b0:	mov	r2, r0
   1a7b4:	mov	r0, r8
   1a7b8:	mov	r1, #1
   1a7bc:	movt	r3, #1
   1a7c0:	bl	114f8 <__fprintf_chk@plt>
   1a7c4:	mov	r0, r4
   1a7c8:	mov	r1, r8
   1a7cc:	bl	112a0 <fputs_unlocked@plt>
   1a7d0:	cmp	r6, #9
   1a7d4:	bhi	1a810 <__assert_fail@plt+0x9228>
   1a7d8:	add	r0, pc, #0
   1a7dc:	ldr	pc, [r0, r6, lsl #2]
   1a7e0:	andeq	sl, r1, r8, lsl #16
   1a7e4:	andeq	sl, r1, ip, lsl r8
   1a7e8:	andeq	sl, r1, ip, asr #16
   1a7ec:	andeq	sl, r1, r4, ror r8
   1a7f0:	muleq	r1, ip, r8
   1a7f4:	andeq	sl, r1, r4, asr #17
   1a7f8:	andeq	sl, r1, ip, ror #17
   1a7fc:	andeq	sl, r1, r4, lsr #18
   1a800:	andeq	sl, r1, r4, asr #19
   1a804:	andeq	sl, r1, ip, ror #18
   1a808:	sub	sp, fp, #24
   1a80c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a810:	movw	r1, #58259	; 0xe393
   1a814:	movt	r1, #1
   1a818:	b	1a974 <__assert_fail@plt+0x938c>
   1a81c:	movw	r1, #57940	; 0xe254
   1a820:	mov	r0, #0
   1a824:	mov	r2, #5
   1a828:	movt	r1, #1
   1a82c:	bl	11354 <dcgettext@plt>
   1a830:	ldr	r3, [r7]
   1a834:	mov	r2, r0
   1a838:	mov	r0, r8
   1a83c:	mov	r1, #1
   1a840:	sub	sp, fp, #24
   1a844:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a848:	b	114f8 <__fprintf_chk@plt>
   1a84c:	movw	r1, #57956	; 0xe264
   1a850:	mov	r0, #0
   1a854:	mov	r2, #5
   1a858:	movt	r1, #1
   1a85c:	bl	11354 <dcgettext@plt>
   1a860:	mov	r2, r0
   1a864:	ldr	r3, [r7]
   1a868:	ldr	r0, [r7, #4]
   1a86c:	str	r0, [sp]
   1a870:	b	1a960 <__assert_fail@plt+0x9378>
   1a874:	movw	r1, #57979	; 0xe27b
   1a878:	mov	r0, #0
   1a87c:	mov	r2, #5
   1a880:	movt	r1, #1
   1a884:	bl	11354 <dcgettext@plt>
   1a888:	ldr	r3, [r7]
   1a88c:	mov	r2, r0
   1a890:	ldmib	r7, {r0, r1}
   1a894:	stm	sp, {r0, r1}
   1a898:	b	1a960 <__assert_fail@plt+0x9378>
   1a89c:	movw	r1, #58007	; 0xe297
   1a8a0:	mov	r0, #0
   1a8a4:	mov	r2, #5
   1a8a8:	movt	r1, #1
   1a8ac:	bl	11354 <dcgettext@plt>
   1a8b0:	ldr	r3, [r7]
   1a8b4:	mov	r2, r0
   1a8b8:	ldmib	r7, {r0, r1, r7}
   1a8bc:	stm	sp, {r0, r1, r7}
   1a8c0:	b	1a960 <__assert_fail@plt+0x9378>
   1a8c4:	movw	r1, #58039	; 0xe2b7
   1a8c8:	mov	r0, #0
   1a8cc:	mov	r2, #5
   1a8d0:	movt	r1, #1
   1a8d4:	bl	11354 <dcgettext@plt>
   1a8d8:	ldr	r3, [r7]
   1a8dc:	mov	r2, r0
   1a8e0:	ldmib	r7, {r0, r1, r6, r7}
   1a8e4:	stm	sp, {r0, r1, r6, r7}
   1a8e8:	b	1a960 <__assert_fail@plt+0x9378>
   1a8ec:	movw	r1, #58075	; 0xe2db
   1a8f0:	mov	r0, #0
   1a8f4:	mov	r2, #5
   1a8f8:	movt	r1, #1
   1a8fc:	bl	11354 <dcgettext@plt>
   1a900:	ldr	r3, [r7]
   1a904:	mov	r2, r0
   1a908:	ldmib	r7, {r0, r1, r6}
   1a90c:	ldr	r5, [r7, #16]
   1a910:	ldr	r7, [r7, #20]
   1a914:	stm	sp, {r0, r1, r6}
   1a918:	str	r5, [sp, #12]
   1a91c:	str	r7, [sp, #16]
   1a920:	b	1a960 <__assert_fail@plt+0x9378>
   1a924:	movw	r1, #58115	; 0xe303
   1a928:	mov	r0, #0
   1a92c:	mov	r2, #5
   1a930:	movt	r1, #1
   1a934:	bl	11354 <dcgettext@plt>
   1a938:	ldr	r3, [r7]
   1a93c:	mov	r2, r0
   1a940:	ldmib	r7, {r0, r1, r6}
   1a944:	ldr	r5, [r7, #16]
   1a948:	ldr	r4, [r7, #20]
   1a94c:	ldr	r7, [r7, #24]
   1a950:	stm	sp, {r0, r1, r6}
   1a954:	str	r5, [sp, #12]
   1a958:	str	r4, [sp, #16]
   1a95c:	str	r7, [sp, #20]
   1a960:	mov	r0, r8
   1a964:	mov	r1, #1
   1a968:	b	1aa14 <__assert_fail@plt+0x942c>
   1a96c:	movw	r1, #58207	; 0xe35f
   1a970:	movt	r1, #1
   1a974:	mov	r0, #0
   1a978:	mov	r2, #5
   1a97c:	bl	11354 <dcgettext@plt>
   1a980:	mov	ip, r0
   1a984:	ldr	r3, [r7]
   1a988:	ldr	r0, [r7, #4]
   1a98c:	ldr	r1, [r7, #8]
   1a990:	ldr	r6, [r7, #12]
   1a994:	ldr	r5, [r7, #16]
   1a998:	ldr	r4, [r7, #20]
   1a99c:	ldr	r2, [r7, #24]
   1a9a0:	ldr	lr, [r7, #28]
   1a9a4:	ldr	r7, [r7, #32]
   1a9a8:	stm	sp, {r0, r1, r6}
   1a9ac:	str	r5, [sp, #12]
   1a9b0:	str	r4, [sp, #16]
   1a9b4:	str	r2, [sp, #20]
   1a9b8:	str	lr, [sp, #24]
   1a9bc:	str	r7, [sp, #28]
   1a9c0:	b	1aa08 <__assert_fail@plt+0x9420>
   1a9c4:	movw	r1, #58159	; 0xe32f
   1a9c8:	mov	r0, #0
   1a9cc:	mov	r2, #5
   1a9d0:	movt	r1, #1
   1a9d4:	bl	11354 <dcgettext@plt>
   1a9d8:	mov	ip, r0
   1a9dc:	ldr	r3, [r7]
   1a9e0:	ldmib	r7, {r0, r1, r6}
   1a9e4:	ldr	r5, [r7, #16]
   1a9e8:	ldr	r4, [r7, #20]
   1a9ec:	ldr	r2, [r7, #24]
   1a9f0:	ldr	r7, [r7, #28]
   1a9f4:	stm	sp, {r0, r1, r6}
   1a9f8:	str	r5, [sp, #12]
   1a9fc:	str	r4, [sp, #16]
   1aa00:	str	r2, [sp, #20]
   1aa04:	str	r7, [sp, #24]
   1aa08:	mov	r0, r8
   1aa0c:	mov	r1, #1
   1aa10:	mov	r2, ip
   1aa14:	bl	114f8 <__fprintf_chk@plt>
   1aa18:	sub	sp, fp, #24
   1aa1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa20:	push	{r4, sl, fp, lr}
   1aa24:	add	fp, sp, #8
   1aa28:	sub	sp, sp, #8
   1aa2c:	ldr	ip, [fp, #8]
   1aa30:	mov	lr, #0
   1aa34:	ldr	r4, [ip, lr, lsl #2]
   1aa38:	add	lr, lr, #1
   1aa3c:	cmp	r4, #0
   1aa40:	bne	1aa34 <__assert_fail@plt+0x944c>
   1aa44:	sub	r4, lr, #1
   1aa48:	str	ip, [sp]
   1aa4c:	str	r4, [sp, #4]
   1aa50:	bl	1a6ec <__assert_fail@plt+0x9104>
   1aa54:	sub	sp, fp, #8
   1aa58:	pop	{r4, sl, fp, pc}
   1aa5c:	push	{fp, lr}
   1aa60:	mov	fp, sp
   1aa64:	sub	sp, sp, #48	; 0x30
   1aa68:	ldr	ip, [fp, #8]
   1aa6c:	ldr	lr, [ip]
   1aa70:	cmp	lr, #0
   1aa74:	str	lr, [sp, #8]
   1aa78:	beq	1ab14 <__assert_fail@plt+0x952c>
   1aa7c:	ldr	lr, [ip, #4]
   1aa80:	cmp	lr, #0
   1aa84:	str	lr, [sp, #12]
   1aa88:	beq	1ab1c <__assert_fail@plt+0x9534>
   1aa8c:	ldr	lr, [ip, #8]
   1aa90:	cmp	lr, #0
   1aa94:	str	lr, [sp, #16]
   1aa98:	beq	1ab24 <__assert_fail@plt+0x953c>
   1aa9c:	ldr	lr, [ip, #12]
   1aaa0:	cmp	lr, #0
   1aaa4:	str	lr, [sp, #20]
   1aaa8:	beq	1ab2c <__assert_fail@plt+0x9544>
   1aaac:	ldr	lr, [ip, #16]
   1aab0:	cmp	lr, #0
   1aab4:	str	lr, [sp, #24]
   1aab8:	beq	1ab34 <__assert_fail@plt+0x954c>
   1aabc:	ldr	lr, [ip, #20]
   1aac0:	cmp	lr, #0
   1aac4:	str	lr, [sp, #28]
   1aac8:	beq	1ab3c <__assert_fail@plt+0x9554>
   1aacc:	ldr	lr, [ip, #24]
   1aad0:	cmp	lr, #0
   1aad4:	str	lr, [sp, #32]
   1aad8:	beq	1ab44 <__assert_fail@plt+0x955c>
   1aadc:	ldr	lr, [ip, #28]
   1aae0:	cmp	lr, #0
   1aae4:	str	lr, [sp, #36]	; 0x24
   1aae8:	beq	1ab4c <__assert_fail@plt+0x9564>
   1aaec:	ldr	lr, [ip, #32]
   1aaf0:	cmp	lr, #0
   1aaf4:	str	lr, [sp, #40]	; 0x28
   1aaf8:	beq	1ab54 <__assert_fail@plt+0x956c>
   1aafc:	ldr	lr, [ip, #36]	; 0x24
   1ab00:	mov	ip, #10
   1ab04:	cmp	lr, #0
   1ab08:	str	lr, [sp, #44]	; 0x2c
   1ab0c:	movweq	ip, #9
   1ab10:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab14:	mov	ip, #0
   1ab18:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab1c:	mov	ip, #1
   1ab20:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab24:	mov	ip, #2
   1ab28:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab2c:	mov	ip, #3
   1ab30:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab34:	mov	ip, #4
   1ab38:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab3c:	mov	ip, #5
   1ab40:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab44:	mov	ip, #6
   1ab48:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab4c:	mov	ip, #7
   1ab50:	b	1ab58 <__assert_fail@plt+0x9570>
   1ab54:	mov	ip, #8
   1ab58:	add	lr, sp, #8
   1ab5c:	str	ip, [sp, #4]
   1ab60:	str	lr, [sp]
   1ab64:	bl	1a6ec <__assert_fail@plt+0x9104>
   1ab68:	mov	sp, fp
   1ab6c:	pop	{fp, pc}
   1ab70:	push	{fp, lr}
   1ab74:	mov	fp, sp
   1ab78:	sub	sp, sp, #56	; 0x38
   1ab7c:	add	ip, fp, #8
   1ab80:	str	ip, [sp, #12]
   1ab84:	ldr	lr, [fp, #8]
   1ab88:	cmp	lr, #0
   1ab8c:	str	lr, [sp, #16]
   1ab90:	beq	1ac2c <__assert_fail@plt+0x9644>
   1ab94:	ldr	lr, [ip, #4]
   1ab98:	cmp	lr, #0
   1ab9c:	str	lr, [sp, #20]
   1aba0:	beq	1ac34 <__assert_fail@plt+0x964c>
   1aba4:	ldr	lr, [ip, #8]
   1aba8:	cmp	lr, #0
   1abac:	str	lr, [sp, #24]
   1abb0:	beq	1ac3c <__assert_fail@plt+0x9654>
   1abb4:	ldr	lr, [ip, #12]
   1abb8:	cmp	lr, #0
   1abbc:	str	lr, [sp, #28]
   1abc0:	beq	1ac44 <__assert_fail@plt+0x965c>
   1abc4:	ldr	lr, [ip, #16]
   1abc8:	cmp	lr, #0
   1abcc:	str	lr, [sp, #32]
   1abd0:	beq	1ac4c <__assert_fail@plt+0x9664>
   1abd4:	ldr	lr, [ip, #20]
   1abd8:	cmp	lr, #0
   1abdc:	str	lr, [sp, #36]	; 0x24
   1abe0:	beq	1ac54 <__assert_fail@plt+0x966c>
   1abe4:	ldr	lr, [ip, #24]
   1abe8:	cmp	lr, #0
   1abec:	str	lr, [sp, #40]	; 0x28
   1abf0:	beq	1ac5c <__assert_fail@plt+0x9674>
   1abf4:	ldr	lr, [ip, #28]
   1abf8:	cmp	lr, #0
   1abfc:	str	lr, [sp, #44]	; 0x2c
   1ac00:	beq	1ac64 <__assert_fail@plt+0x967c>
   1ac04:	ldr	lr, [ip, #32]
   1ac08:	cmp	lr, #0
   1ac0c:	str	lr, [sp, #48]	; 0x30
   1ac10:	beq	1ac6c <__assert_fail@plt+0x9684>
   1ac14:	ldr	lr, [ip, #36]	; 0x24
   1ac18:	mov	ip, #10
   1ac1c:	cmp	lr, #0
   1ac20:	str	lr, [sp, #52]	; 0x34
   1ac24:	movweq	ip, #9
   1ac28:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac2c:	mov	ip, #0
   1ac30:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac34:	mov	ip, #1
   1ac38:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac3c:	mov	ip, #2
   1ac40:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac44:	mov	ip, #3
   1ac48:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac4c:	mov	ip, #4
   1ac50:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac54:	mov	ip, #5
   1ac58:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac5c:	mov	ip, #6
   1ac60:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac64:	mov	ip, #7
   1ac68:	b	1ac70 <__assert_fail@plt+0x9688>
   1ac6c:	mov	ip, #8
   1ac70:	add	lr, sp, #16
   1ac74:	str	ip, [sp, #4]
   1ac78:	str	lr, [sp]
   1ac7c:	bl	1a6ec <__assert_fail@plt+0x9104>
   1ac80:	mov	sp, fp
   1ac84:	pop	{fp, pc}
   1ac88:	push	{fp, lr}
   1ac8c:	mov	fp, sp
   1ac90:	movw	r0, #61876	; 0xf1b4
   1ac94:	movt	r0, #2
   1ac98:	ldr	r1, [r0]
   1ac9c:	movw	r0, #54061	; 0xd32d
   1aca0:	movt	r0, #1
   1aca4:	bl	112a0 <fputs_unlocked@plt>
   1aca8:	movw	r1, #58319	; 0xe3cf
   1acac:	mov	r0, #0
   1acb0:	mov	r2, #5
   1acb4:	movt	r1, #1
   1acb8:	bl	11354 <dcgettext@plt>
   1acbc:	movw	r2, #58339	; 0xe3e3
   1acc0:	mov	r1, r0
   1acc4:	mov	r0, #1
   1acc8:	movt	r2, #1
   1accc:	bl	114d4 <__printf_chk@plt>
   1acd0:	movw	r1, #58361	; 0xe3f9
   1acd4:	mov	r0, #0
   1acd8:	mov	r2, #5
   1acdc:	movt	r1, #1
   1ace0:	bl	11354 <dcgettext@plt>
   1ace4:	movw	r2, #54938	; 0xd69a
   1ace8:	movw	r3, #54952	; 0xd6a8
   1acec:	mov	r1, r0
   1acf0:	mov	r0, #1
   1acf4:	movt	r2, #1
   1acf8:	movt	r3, #1
   1acfc:	bl	114d4 <__printf_chk@plt>
   1ad00:	movw	r1, #58381	; 0xe40d
   1ad04:	mov	r0, #0
   1ad08:	mov	r2, #5
   1ad0c:	movt	r1, #1
   1ad10:	bl	11354 <dcgettext@plt>
   1ad14:	movw	r2, #58420	; 0xe434
   1ad18:	mov	r1, r0
   1ad1c:	mov	r0, #1
   1ad20:	movt	r2, #1
   1ad24:	pop	{fp, lr}
   1ad28:	b	114d4 <__printf_chk@plt>
   1ad2c:	push	{r4, r5, r6, sl, fp, lr}
   1ad30:	add	fp, sp, #16
   1ad34:	mov	r4, r2
   1ad38:	mov	r5, r1
   1ad3c:	mov	r6, r0
   1ad40:	bl	1c704 <__assert_fail@plt+0xb11c>
   1ad44:	cmp	r0, #0
   1ad48:	popne	{r4, r5, r6, sl, fp, pc}
   1ad4c:	cmp	r6, #0
   1ad50:	beq	1ad64 <__assert_fail@plt+0x977c>
   1ad54:	cmp	r5, #0
   1ad58:	cmpne	r4, #0
   1ad5c:	bne	1ad64 <__assert_fail@plt+0x977c>
   1ad60:	pop	{r4, r5, r6, sl, fp, pc}
   1ad64:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1ad68:	push	{r4, r5, r6, sl, fp, lr}
   1ad6c:	add	fp, sp, #16
   1ad70:	mov	r4, r2
   1ad74:	mov	r5, r1
   1ad78:	mov	r6, r0
   1ad7c:	bl	1c704 <__assert_fail@plt+0xb11c>
   1ad80:	cmp	r0, #0
   1ad84:	popne	{r4, r5, r6, sl, fp, pc}
   1ad88:	cmp	r6, #0
   1ad8c:	beq	1ada0 <__assert_fail@plt+0x97b8>
   1ad90:	cmp	r5, #0
   1ad94:	cmpne	r4, #0
   1ad98:	bne	1ada0 <__assert_fail@plt+0x97b8>
   1ad9c:	pop	{r4, r5, r6, sl, fp, pc}
   1ada0:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1ada4:	push	{fp, lr}
   1ada8:	mov	fp, sp
   1adac:	bl	1c294 <__assert_fail@plt+0xacac>
   1adb0:	cmp	r0, #0
   1adb4:	popne	{fp, pc}
   1adb8:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1adbc:	push	{fp, lr}
   1adc0:	mov	fp, sp
   1adc4:	bl	1c294 <__assert_fail@plt+0xacac>
   1adc8:	cmp	r0, #0
   1adcc:	popne	{fp, pc}
   1add0:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1add4:	push	{fp, lr}
   1add8:	mov	fp, sp
   1addc:	bl	1c294 <__assert_fail@plt+0xacac>
   1ade0:	cmp	r0, #0
   1ade4:	popne	{fp, pc}
   1ade8:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1adec:	push	{r4, r5, fp, lr}
   1adf0:	add	fp, sp, #8
   1adf4:	mov	r4, r1
   1adf8:	mov	r5, r0
   1adfc:	bl	1c2c4 <__assert_fail@plt+0xacdc>
   1ae00:	cmp	r0, #0
   1ae04:	popne	{r4, r5, fp, pc}
   1ae08:	cmp	r5, #0
   1ae0c:	beq	1ae1c <__assert_fail@plt+0x9834>
   1ae10:	cmp	r4, #0
   1ae14:	bne	1ae1c <__assert_fail@plt+0x9834>
   1ae18:	pop	{r4, r5, fp, pc}
   1ae1c:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1ae20:	push	{fp, lr}
   1ae24:	mov	fp, sp
   1ae28:	cmp	r1, #0
   1ae2c:	orreq	r1, r1, #1
   1ae30:	bl	1c2c4 <__assert_fail@plt+0xacdc>
   1ae34:	cmp	r0, #0
   1ae38:	popne	{fp, pc}
   1ae3c:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1ae40:	push	{fp, lr}
   1ae44:	mov	fp, sp
   1ae48:	clz	r3, r2
   1ae4c:	lsr	ip, r3, #5
   1ae50:	clz	r3, r1
   1ae54:	lsr	r3, r3, #5
   1ae58:	orrs	r3, r3, ip
   1ae5c:	movwne	r1, #1
   1ae60:	movwne	r2, #1
   1ae64:	bl	1c704 <__assert_fail@plt+0xb11c>
   1ae68:	cmp	r0, #0
   1ae6c:	popne	{fp, pc}
   1ae70:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1ae74:	push	{fp, lr}
   1ae78:	mov	fp, sp
   1ae7c:	mov	r2, r1
   1ae80:	mov	r1, r0
   1ae84:	mov	r0, #0
   1ae88:	bl	1c704 <__assert_fail@plt+0xb11c>
   1ae8c:	cmp	r0, #0
   1ae90:	popne	{fp, pc}
   1ae94:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1ae98:	push	{fp, lr}
   1ae9c:	mov	fp, sp
   1aea0:	mov	r2, r1
   1aea4:	mov	r1, r0
   1aea8:	clz	r0, r2
   1aeac:	clz	r3, r1
   1aeb0:	lsr	r0, r0, #5
   1aeb4:	lsr	r3, r3, #5
   1aeb8:	orrs	r0, r3, r0
   1aebc:	movwne	r1, #1
   1aec0:	movwne	r2, #1
   1aec4:	mov	r0, #0
   1aec8:	bl	1c704 <__assert_fail@plt+0xb11c>
   1aecc:	cmp	r0, #0
   1aed0:	popne	{fp, pc}
   1aed4:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1aed8:	push	{r4, r5, r6, sl, fp, lr}
   1aedc:	add	fp, sp, #16
   1aee0:	ldr	r5, [r1]
   1aee4:	mov	r4, r1
   1aee8:	mov	r6, r0
   1aeec:	cmp	r0, #0
   1aef0:	beq	1af08 <__assert_fail@plt+0x9920>
   1aef4:	mov	r0, #1
   1aef8:	add	r0, r0, r5, lsr #1
   1aefc:	adds	r5, r5, r0
   1af00:	bcc	1af10 <__assert_fail@plt+0x9928>
   1af04:	b	1af4c <__assert_fail@plt+0x9964>
   1af08:	cmp	r5, #0
   1af0c:	movweq	r5, #64	; 0x40
   1af10:	mov	r0, r6
   1af14:	mov	r1, r5
   1af18:	mov	r2, #1
   1af1c:	bl	1c704 <__assert_fail@plt+0xb11c>
   1af20:	cmp	r5, #0
   1af24:	mov	r1, r5
   1af28:	movwne	r1, #1
   1af2c:	cmp	r0, #0
   1af30:	bne	1af44 <__assert_fail@plt+0x995c>
   1af34:	clz	r2, r6
   1af38:	lsr	r2, r2, #5
   1af3c:	orrs	r1, r2, r1
   1af40:	bne	1af4c <__assert_fail@plt+0x9964>
   1af44:	str	r5, [r4]
   1af48:	pop	{r4, r5, r6, sl, fp, pc}
   1af4c:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1af50:	push	{r4, r5, r6, r7, fp, lr}
   1af54:	add	fp, sp, #16
   1af58:	ldr	r5, [r1]
   1af5c:	mov	r6, r2
   1af60:	mov	r4, r1
   1af64:	mov	r7, r0
   1af68:	cmp	r0, #0
   1af6c:	beq	1af84 <__assert_fail@plt+0x999c>
   1af70:	mov	r0, #1
   1af74:	add	r0, r0, r5, lsr #1
   1af78:	adds	r5, r5, r0
   1af7c:	bcc	1af9c <__assert_fail@plt+0x99b4>
   1af80:	b	1afd0 <__assert_fail@plt+0x99e8>
   1af84:	cmp	r5, #0
   1af88:	bne	1af9c <__assert_fail@plt+0x99b4>
   1af8c:	mov	r0, #64	; 0x40
   1af90:	cmp	r6, #64	; 0x40
   1af94:	udiv	r5, r0, r6
   1af98:	addhi	r5, r5, #1
   1af9c:	mov	r0, r7
   1afa0:	mov	r1, r5
   1afa4:	mov	r2, r6
   1afa8:	bl	1c704 <__assert_fail@plt+0xb11c>
   1afac:	cmp	r0, #0
   1afb0:	bne	1afc8 <__assert_fail@plt+0x99e0>
   1afb4:	cmp	r7, #0
   1afb8:	beq	1afd0 <__assert_fail@plt+0x99e8>
   1afbc:	cmp	r6, #0
   1afc0:	cmpne	r5, #0
   1afc4:	bne	1afd0 <__assert_fail@plt+0x99e8>
   1afc8:	str	r5, [r4]
   1afcc:	pop	{r4, r5, r6, r7, fp, pc}
   1afd0:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1afd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1afd8:	add	fp, sp, #24
   1afdc:	mov	r8, r1
   1afe0:	ldr	r1, [r1]
   1afe4:	mov	r5, r0
   1afe8:	add	r0, r1, r1, asr #1
   1afec:	cmp	r0, r1
   1aff0:	mvnvs	r0, #-2147483648	; 0x80000000
   1aff4:	cmp	r0, r3
   1aff8:	mov	r7, r0
   1affc:	movgt	r7, r3
   1b000:	cmn	r3, #1
   1b004:	movle	r7, r0
   1b008:	ldr	r0, [fp, #8]
   1b00c:	cmn	r0, #1
   1b010:	ble	1b038 <__assert_fail@plt+0x9a50>
   1b014:	cmp	r0, #0
   1b018:	beq	1b08c <__assert_fail@plt+0x9aa4>
   1b01c:	cmn	r7, #1
   1b020:	ble	1b060 <__assert_fail@plt+0x9a78>
   1b024:	mvn	r4, #-2147483648	; 0x80000000
   1b028:	udiv	r6, r4, r0
   1b02c:	cmp	r6, r7
   1b030:	bge	1b08c <__assert_fail@plt+0x9aa4>
   1b034:	b	1b09c <__assert_fail@plt+0x9ab4>
   1b038:	cmn	r7, #1
   1b03c:	ble	1b07c <__assert_fail@plt+0x9a94>
   1b040:	cmn	r0, #1
   1b044:	beq	1b08c <__assert_fail@plt+0x9aa4>
   1b048:	mov	r6, #-2147483648	; 0x80000000
   1b04c:	mvn	r4, #-2147483648	; 0x80000000
   1b050:	sdiv	r6, r6, r0
   1b054:	cmp	r6, r7
   1b058:	bge	1b08c <__assert_fail@plt+0x9aa4>
   1b05c:	b	1b09c <__assert_fail@plt+0x9ab4>
   1b060:	beq	1b08c <__assert_fail@plt+0x9aa4>
   1b064:	mov	r6, #-2147483648	; 0x80000000
   1b068:	mvn	r4, #-2147483648	; 0x80000000
   1b06c:	sdiv	r6, r6, r7
   1b070:	cmp	r6, r0
   1b074:	bge	1b08c <__assert_fail@plt+0x9aa4>
   1b078:	b	1b09c <__assert_fail@plt+0x9ab4>
   1b07c:	mvn	r4, #-2147483648	; 0x80000000
   1b080:	sdiv	r6, r4, r0
   1b084:	cmp	r7, r6
   1b088:	blt	1b09c <__assert_fail@plt+0x9ab4>
   1b08c:	mul	r6, r7, r0
   1b090:	mov	r4, #64	; 0x40
   1b094:	cmp	r6, #63	; 0x3f
   1b098:	bgt	1b0a4 <__assert_fail@plt+0x9abc>
   1b09c:	sdiv	r7, r4, r0
   1b0a0:	mul	r6, r7, r0
   1b0a4:	cmp	r5, #0
   1b0a8:	moveq	r4, #0
   1b0ac:	streq	r4, [r8]
   1b0b0:	sub	r4, r7, r1
   1b0b4:	cmp	r4, r2
   1b0b8:	bge	1b164 <__assert_fail@plt+0x9b7c>
   1b0bc:	add	r7, r1, r2
   1b0c0:	mov	r6, #0
   1b0c4:	mov	r2, #0
   1b0c8:	cmp	r7, r3
   1b0cc:	movwgt	r6, #1
   1b0d0:	cmn	r3, #1
   1b0d4:	movwgt	r2, #1
   1b0d8:	cmp	r7, r1
   1b0dc:	bvs	1b198 <__assert_fail@plt+0x9bb0>
   1b0e0:	ands	r1, r2, r6
   1b0e4:	bne	1b198 <__assert_fail@plt+0x9bb0>
   1b0e8:	cmn	r0, #1
   1b0ec:	ble	1b114 <__assert_fail@plt+0x9b2c>
   1b0f0:	cmp	r0, #0
   1b0f4:	beq	1b160 <__assert_fail@plt+0x9b78>
   1b0f8:	cmn	r7, #1
   1b0fc:	ble	1b138 <__assert_fail@plt+0x9b50>
   1b100:	mvn	r1, #-2147483648	; 0x80000000
   1b104:	udiv	r1, r1, r0
   1b108:	cmp	r1, r7
   1b10c:	bge	1b160 <__assert_fail@plt+0x9b78>
   1b110:	b	1b198 <__assert_fail@plt+0x9bb0>
   1b114:	cmn	r7, #1
   1b118:	ble	1b150 <__assert_fail@plt+0x9b68>
   1b11c:	cmn	r0, #1
   1b120:	beq	1b160 <__assert_fail@plt+0x9b78>
   1b124:	mov	r1, #-2147483648	; 0x80000000
   1b128:	sdiv	r1, r1, r0
   1b12c:	cmp	r1, r7
   1b130:	bge	1b160 <__assert_fail@plt+0x9b78>
   1b134:	b	1b198 <__assert_fail@plt+0x9bb0>
   1b138:	beq	1b160 <__assert_fail@plt+0x9b78>
   1b13c:	mov	r1, #-2147483648	; 0x80000000
   1b140:	sdiv	r1, r1, r7
   1b144:	cmp	r1, r0
   1b148:	bge	1b160 <__assert_fail@plt+0x9b78>
   1b14c:	b	1b198 <__assert_fail@plt+0x9bb0>
   1b150:	mvn	r1, #-2147483648	; 0x80000000
   1b154:	sdiv	r1, r1, r0
   1b158:	cmp	r7, r1
   1b15c:	blt	1b198 <__assert_fail@plt+0x9bb0>
   1b160:	mul	r6, r7, r0
   1b164:	mov	r0, r5
   1b168:	mov	r1, r6
   1b16c:	bl	1c2c4 <__assert_fail@plt+0xacdc>
   1b170:	cmp	r6, #0
   1b174:	movwne	r6, #1
   1b178:	cmp	r0, #0
   1b17c:	bne	1b190 <__assert_fail@plt+0x9ba8>
   1b180:	clz	r1, r5
   1b184:	lsr	r1, r1, #5
   1b188:	orrs	r1, r1, r6
   1b18c:	bne	1b198 <__assert_fail@plt+0x9bb0>
   1b190:	str	r7, [r8]
   1b194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b198:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b19c:	push	{fp, lr}
   1b1a0:	mov	fp, sp
   1b1a4:	mov	r1, #1
   1b1a8:	bl	1c240 <__assert_fail@plt+0xac58>
   1b1ac:	cmp	r0, #0
   1b1b0:	popne	{fp, pc}
   1b1b4:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b1b8:	push	{fp, lr}
   1b1bc:	mov	fp, sp
   1b1c0:	bl	1c240 <__assert_fail@plt+0xac58>
   1b1c4:	cmp	r0, #0
   1b1c8:	popne	{fp, pc}
   1b1cc:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b1d0:	push	{fp, lr}
   1b1d4:	mov	fp, sp
   1b1d8:	mov	r1, #1
   1b1dc:	bl	1c240 <__assert_fail@plt+0xac58>
   1b1e0:	cmp	r0, #0
   1b1e4:	popne	{fp, pc}
   1b1e8:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b1ec:	push	{fp, lr}
   1b1f0:	mov	fp, sp
   1b1f4:	bl	1c240 <__assert_fail@plt+0xac58>
   1b1f8:	cmp	r0, #0
   1b1fc:	popne	{fp, pc}
   1b200:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b204:	push	{r4, r5, r6, sl, fp, lr}
   1b208:	add	fp, sp, #16
   1b20c:	mov	r5, r0
   1b210:	mov	r0, r1
   1b214:	mov	r4, r1
   1b218:	bl	1c294 <__assert_fail@plt+0xacac>
   1b21c:	cmp	r0, #0
   1b220:	beq	1b23c <__assert_fail@plt+0x9c54>
   1b224:	mov	r1, r5
   1b228:	mov	r2, r4
   1b22c:	mov	r6, r0
   1b230:	bl	11318 <memcpy@plt>
   1b234:	mov	r0, r6
   1b238:	pop	{r4, r5, r6, sl, fp, pc}
   1b23c:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b240:	push	{r4, r5, r6, sl, fp, lr}
   1b244:	add	fp, sp, #16
   1b248:	mov	r5, r0
   1b24c:	mov	r0, r1
   1b250:	mov	r4, r1
   1b254:	bl	1c294 <__assert_fail@plt+0xacac>
   1b258:	cmp	r0, #0
   1b25c:	beq	1b278 <__assert_fail@plt+0x9c90>
   1b260:	mov	r1, r5
   1b264:	mov	r2, r4
   1b268:	mov	r6, r0
   1b26c:	bl	11318 <memcpy@plt>
   1b270:	mov	r0, r6
   1b274:	pop	{r4, r5, r6, sl, fp, pc}
   1b278:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b27c:	push	{r4, r5, r6, sl, fp, lr}
   1b280:	add	fp, sp, #16
   1b284:	mov	r5, r0
   1b288:	add	r0, r1, #1
   1b28c:	mov	r4, r1
   1b290:	bl	1c294 <__assert_fail@plt+0xacac>
   1b294:	cmp	r0, #0
   1b298:	beq	1b2c0 <__assert_fail@plt+0x9cd8>
   1b29c:	mov	r6, r0
   1b2a0:	mov	r0, #0
   1b2a4:	mov	r1, r5
   1b2a8:	mov	r2, r4
   1b2ac:	strb	r0, [r6, r4]
   1b2b0:	mov	r0, r6
   1b2b4:	bl	11318 <memcpy@plt>
   1b2b8:	mov	r0, r6
   1b2bc:	pop	{r4, r5, r6, sl, fp, pc}
   1b2c0:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b2c4:	push	{r4, r5, r6, sl, fp, lr}
   1b2c8:	add	fp, sp, #16
   1b2cc:	mov	r4, r0
   1b2d0:	bl	11474 <strlen@plt>
   1b2d4:	add	r5, r0, #1
   1b2d8:	mov	r0, r5
   1b2dc:	bl	1c294 <__assert_fail@plt+0xacac>
   1b2e0:	cmp	r0, #0
   1b2e4:	beq	1b300 <__assert_fail@plt+0x9d18>
   1b2e8:	mov	r1, r4
   1b2ec:	mov	r2, r5
   1b2f0:	mov	r6, r0
   1b2f4:	bl	11318 <memcpy@plt>
   1b2f8:	mov	r0, r6
   1b2fc:	pop	{r4, r5, r6, sl, fp, pc}
   1b300:	bl	1b304 <__assert_fail@plt+0x9d1c>
   1b304:	push	{fp, lr}
   1b308:	mov	fp, sp
   1b30c:	movw	r0, #61784	; 0xf158
   1b310:	movw	r1, #58496	; 0xe480
   1b314:	mov	r2, #5
   1b318:	movt	r0, #2
   1b31c:	movt	r1, #1
   1b320:	ldr	r4, [r0]
   1b324:	mov	r0, #0
   1b328:	bl	11354 <dcgettext@plt>
   1b32c:	movw	r2, #57314	; 0xdfe2
   1b330:	mov	r3, r0
   1b334:	mov	r0, r4
   1b338:	mov	r1, #0
   1b33c:	movt	r2, #1
   1b340:	bl	113f0 <error@plt>
   1b344:	bl	115c4 <abort@plt>
   1b348:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b34c:	add	fp, sp, #24
   1b350:	sub	sp, sp, #16
   1b354:	mov	r8, r0
   1b358:	ldr	r0, [fp, #16]
   1b35c:	mov	r5, r3
   1b360:	mov	r6, r2
   1b364:	mov	r2, r1
   1b368:	add	r3, sp, #8
   1b36c:	mov	r1, #0
   1b370:	str	r0, [sp]
   1b374:	mov	r0, r8
   1b378:	bl	1b5a0 <__assert_fail@plt+0x9fb8>
   1b37c:	cmp	r0, #0
   1b380:	bne	1b40c <__assert_fail@plt+0x9e24>
   1b384:	ldr	r4, [sp, #8]
   1b388:	ldr	r7, [sp, #12]
   1b38c:	subs	r0, r4, r6
   1b390:	sbcs	r0, r7, r5
   1b394:	bcc	1b3b8 <__assert_fail@plt+0x9dd0>
   1b398:	ldr	r1, [fp, #8]
   1b39c:	ldr	r0, [fp, #12]
   1b3a0:	subs	r1, r1, r4
   1b3a4:	sbcs	r0, r0, r7
   1b3a8:	movcs	r0, r4
   1b3ac:	movcs	r1, r7
   1b3b0:	subcs	sp, fp, #24
   1b3b4:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b3b8:	bl	114b0 <__errno_location@plt>
   1b3bc:	subs	r1, r4, #1073741824	; 0x40000000
   1b3c0:	sbcs	r1, r7, #0
   1b3c4:	movcc	r1, #34	; 0x22
   1b3c8:	movcs	r1, #75	; 0x4b
   1b3cc:	str	r1, [r0]
   1b3d0:	ldr	r6, [r0]
   1b3d4:	ldr	r4, [fp, #24]
   1b3d8:	ldr	r5, [fp, #20]
   1b3dc:	mov	r0, r8
   1b3e0:	bl	1a50c <__assert_fail@plt+0x8f24>
   1b3e4:	subs	r1, r6, #22
   1b3e8:	movw	r2, #55150	; 0xd76e
   1b3ec:	str	r0, [sp]
   1b3f0:	mov	r3, r5
   1b3f4:	movne	r1, r6
   1b3f8:	cmp	r4, #0
   1b3fc:	movt	r2, #1
   1b400:	movweq	r4, #1
   1b404:	mov	r0, r4
   1b408:	bl	113f0 <error@plt>
   1b40c:	cmp	r0, #1
   1b410:	beq	1b428 <__assert_fail@plt+0x9e40>
   1b414:	cmp	r0, #3
   1b418:	bne	1b434 <__assert_fail@plt+0x9e4c>
   1b41c:	bl	114b0 <__errno_location@plt>
   1b420:	mov	r1, #0
   1b424:	b	1b3cc <__assert_fail@plt+0x9de4>
   1b428:	bl	114b0 <__errno_location@plt>
   1b42c:	mov	r1, #75	; 0x4b
   1b430:	b	1b3cc <__assert_fail@plt+0x9de4>
   1b434:	bl	114b0 <__errno_location@plt>
   1b438:	b	1b3d0 <__assert_fail@plt+0x9de8>
   1b43c:	mov	r1, #10
   1b440:	b	1b348 <__assert_fail@plt+0x9d60>
   1b444:	andeq	r0, r0, r0
   1b448:	push	{r4, r5, r6, sl, fp, lr}
   1b44c:	add	fp, sp, #16
   1b450:	vpush	{d8}
   1b454:	sub	sp, sp, #8
   1b458:	vldr	d16, [pc, #160]	; 1b500 <__assert_fail@plt+0x9f18>
   1b45c:	vmov.f64	d8, d0
   1b460:	vcmpe.f64	d0, d16
   1b464:	vmrs	APSR_nzcv, fpscr
   1b468:	blt	1b480 <__assert_fail@plt+0x9e98>
   1b46c:	bl	112d0 <pause@plt>
   1b470:	bl	114b0 <__errno_location@plt>
   1b474:	ldr	r0, [r0]
   1b478:	cmp	r0, #4
   1b47c:	beq	1b46c <__assert_fail@plt+0x9e84>
   1b480:	mov	r6, sp
   1b484:	vmov.f64	d0, d8
   1b488:	mov	r0, r6
   1b48c:	bl	1c408 <__assert_fail@plt+0xae20>
   1b490:	bl	114b0 <__errno_location@plt>
   1b494:	mov	r5, #0
   1b498:	mov	r4, r0
   1b49c:	mov	r1, r6
   1b4a0:	str	r5, [r0]
   1b4a4:	mov	r0, r6
   1b4a8:	bl	11300 <nanosleep@plt>
   1b4ac:	cmp	r0, #0
   1b4b0:	beq	1b4ec <__assert_fail@plt+0x9f04>
   1b4b4:	mov	r6, sp
   1b4b8:	mov	r5, #0
   1b4bc:	ldr	r0, [r4]
   1b4c0:	orr	r0, r0, #4
   1b4c4:	cmp	r0, #4
   1b4c8:	bne	1b4e8 <__assert_fail@plt+0x9f00>
   1b4cc:	mov	r0, r6
   1b4d0:	mov	r1, r6
   1b4d4:	str	r5, [r4]
   1b4d8:	bl	11300 <nanosleep@plt>
   1b4dc:	cmp	r0, #0
   1b4e0:	bne	1b4bc <__assert_fail@plt+0x9ed4>
   1b4e4:	b	1b4ec <__assert_fail@plt+0x9f04>
   1b4e8:	mvn	r5, #0
   1b4ec:	mov	r0, r5
   1b4f0:	sub	sp, fp, #24
   1b4f4:	vpop	{d8}
   1b4f8:	pop	{r4, r5, r6, sl, fp, pc}
   1b4fc:	nop	{0}
   1b500:	andeq	r0, r0, r0
   1b504:	mvnmi	r0, r0
   1b508:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b50c:	add	fp, sp, #24
   1b510:	sub	sp, sp, #8
   1b514:	mov	r4, r3
   1b518:	mov	r8, r2
   1b51c:	mov	r9, r1
   1b520:	mov	r5, r0
   1b524:	bl	114b0 <__errno_location@plt>
   1b528:	mov	r6, #0
   1b52c:	mov	r7, r0
   1b530:	add	r1, sp, #4
   1b534:	str	r6, [r0]
   1b538:	mov	r0, r5
   1b53c:	blx	r4
   1b540:	ldr	r0, [sp, #4]
   1b544:	cmp	r0, r5
   1b548:	beq	1b588 <__assert_fail@plt+0x9fa0>
   1b54c:	cmp	r9, #0
   1b550:	beq	1b570 <__assert_fail@plt+0x9f88>
   1b554:	vcmp.f64	d0, #0.0
   1b558:	vmrs	APSR_nzcv, fpscr
   1b55c:	beq	1b584 <__assert_fail@plt+0x9f9c>
   1b560:	ldr	r1, [r7]
   1b564:	subs	r6, r1, #34	; 0x22
   1b568:	movwne	r6, #1
   1b56c:	b	1b588 <__assert_fail@plt+0x9fa0>
   1b570:	ldrb	r1, [r0]
   1b574:	mov	r6, #0
   1b578:	cmp	r1, #0
   1b57c:	bne	1b590 <__assert_fail@plt+0x9fa8>
   1b580:	b	1b554 <__assert_fail@plt+0x9f6c>
   1b584:	mov	r6, #1
   1b588:	cmp	r9, #0
   1b58c:	strne	r0, [r9]
   1b590:	vstr	d0, [r8]
   1b594:	mov	r0, r6
   1b598:	sub	sp, fp, #24
   1b59c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b5a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5a4:	add	fp, sp, #28
   1b5a8:	sub	sp, sp, #44	; 0x2c
   1b5ac:	cmp	r2, #37	; 0x25
   1b5b0:	bcs	1c220 <__assert_fail@plt+0xac38>
   1b5b4:	ldr	sl, [fp, #8]
   1b5b8:	mov	r6, r2
   1b5bc:	mov	r7, r1
   1b5c0:	mov	r4, r0
   1b5c4:	str	r3, [sp, #36]	; 0x24
   1b5c8:	bl	114b0 <__errno_location@plt>
   1b5cc:	mov	r5, r0
   1b5d0:	mov	r0, #0
   1b5d4:	str	r0, [r5]
   1b5d8:	bl	1145c <__ctype_b_loc@plt>
   1b5dc:	ldr	r1, [r0]
   1b5e0:	mov	r2, r4
   1b5e4:	ldrb	r0, [r2], #1
   1b5e8:	add	r3, r1, r0, lsl #1
   1b5ec:	ldrb	r3, [r3, #1]
   1b5f0:	tst	r3, #32
   1b5f4:	bne	1b5e4 <__assert_fail@plt+0x9ffc>
   1b5f8:	sub	r9, fp, #32
   1b5fc:	cmp	r7, #0
   1b600:	mov	r8, #4
   1b604:	movne	r9, r7
   1b608:	cmp	r0, #45	; 0x2d
   1b60c:	beq	1c214 <__assert_fail@plt+0xac2c>
   1b610:	mov	r0, r4
   1b614:	mov	r1, r9
   1b618:	mov	r2, r6
   1b61c:	mov	r3, #0
   1b620:	bl	11324 <__strtoull_internal@plt>
   1b624:	mov	r7, r1
   1b628:	ldr	r1, [r9]
   1b62c:	cmp	r1, r4
   1b630:	beq	1b65c <__assert_fail@plt+0xa074>
   1b634:	mov	r6, r0
   1b638:	ldr	r0, [r5]
   1b63c:	cmp	r0, #0
   1b640:	beq	1b698 <__assert_fail@plt+0xa0b0>
   1b644:	cmp	r0, #34	; 0x22
   1b648:	bne	1c214 <__assert_fail@plt+0xac2c>
   1b64c:	mov	r8, #1
   1b650:	cmp	sl, #0
   1b654:	bne	1b6a4 <__assert_fail@plt+0xa0bc>
   1b658:	b	1c20c <__assert_fail@plt+0xac24>
   1b65c:	cmp	sl, #0
   1b660:	beq	1c214 <__assert_fail@plt+0xac2c>
   1b664:	mov	r5, r1
   1b668:	ldrb	r1, [r4]
   1b66c:	cmp	r1, #0
   1b670:	beq	1c214 <__assert_fail@plt+0xac2c>
   1b674:	mov	r0, sl
   1b678:	bl	1148c <strchr@plt>
   1b67c:	cmp	r0, #0
   1b680:	beq	1c214 <__assert_fail@plt+0xac2c>
   1b684:	mov	r1, r5
   1b688:	mov	r8, #0
   1b68c:	mov	r6, #1
   1b690:	mov	r7, #0
   1b694:	b	1b6a4 <__assert_fail@plt+0xa0bc>
   1b698:	mov	r8, r0
   1b69c:	cmp	sl, #0
   1b6a0:	beq	1c20c <__assert_fail@plt+0xac24>
   1b6a4:	ldrb	r4, [r1]
   1b6a8:	cmp	r4, #0
   1b6ac:	beq	1c20c <__assert_fail@plt+0xac24>
   1b6b0:	str	r1, [sp, #32]
   1b6b4:	mov	r0, sl
   1b6b8:	mov	r1, r4
   1b6bc:	bl	1148c <strchr@plt>
   1b6c0:	cmp	r0, #0
   1b6c4:	beq	1b98c <__assert_fail@plt+0xa3a4>
   1b6c8:	sub	r0, r4, #69	; 0x45
   1b6cc:	mov	r1, #1
   1b6d0:	mov	r3, #0
   1b6d4:	mov	r5, #1024	; 0x400
   1b6d8:	cmp	r0, #47	; 0x2f
   1b6dc:	str	r1, [sp, #28]
   1b6e0:	bhi	1b7e4 <__assert_fail@plt+0xa1fc>
   1b6e4:	add	r1, pc, #0
   1b6e8:	ldr	pc, [r1, r0, lsl #2]
   1b6ec:	andeq	fp, r1, ip, lsr #15
   1b6f0:	andeq	fp, r1, r4, ror #15
   1b6f4:	andeq	fp, r1, ip, lsr #15
   1b6f8:	andeq	fp, r1, r4, ror #15
   1b6fc:	andeq	fp, r1, r4, ror #15
   1b700:	andeq	fp, r1, r4, ror #15
   1b704:	andeq	fp, r1, ip, lsr #15
   1b708:	andeq	fp, r1, r4, ror #15
   1b70c:	andeq	fp, r1, ip, lsr #15
   1b710:	andeq	fp, r1, r4, ror #15
   1b714:	andeq	fp, r1, r4, ror #15
   1b718:	andeq	fp, r1, ip, lsr #15
   1b71c:	andeq	fp, r1, r4, ror #15
   1b720:	andeq	fp, r1, r4, ror #15
   1b724:	andeq	fp, r1, r4, ror #15
   1b728:	andeq	fp, r1, ip, lsr #15
   1b72c:	andeq	fp, r1, r4, ror #15
   1b730:	andeq	fp, r1, r4, ror #15
   1b734:	andeq	fp, r1, r4, ror #15
   1b738:	andeq	fp, r1, r4, ror #15
   1b73c:	andeq	fp, r1, ip, lsr #15
   1b740:	andeq	fp, r1, ip, lsr #15
   1b744:	andeq	fp, r1, r4, ror #15
   1b748:	andeq	fp, r1, r4, ror #15
   1b74c:	andeq	fp, r1, r4, ror #15
   1b750:	andeq	fp, r1, r4, ror #15
   1b754:	andeq	fp, r1, r4, ror #15
   1b758:	andeq	fp, r1, r4, ror #15
   1b75c:	andeq	fp, r1, r4, ror #15
   1b760:	andeq	fp, r1, r4, ror #15
   1b764:	andeq	fp, r1, r4, ror #15
   1b768:	andeq	fp, r1, r4, ror #15
   1b76c:	andeq	fp, r1, r4, ror #15
   1b770:	andeq	fp, r1, r4, ror #15
   1b774:	andeq	fp, r1, ip, lsr #15
   1b778:	andeq	fp, r1, r4, ror #15
   1b77c:	andeq	fp, r1, r4, ror #15
   1b780:	andeq	fp, r1, r4, ror #15
   1b784:	andeq	fp, r1, ip, lsr #15
   1b788:	andeq	fp, r1, r4, ror #15
   1b78c:	andeq	fp, r1, ip, lsr #15
   1b790:	andeq	fp, r1, r4, ror #15
   1b794:	andeq	fp, r1, r4, ror #15
   1b798:	andeq	fp, r1, r4, ror #15
   1b79c:	andeq	fp, r1, r4, ror #15
   1b7a0:	andeq	fp, r1, r4, ror #15
   1b7a4:	andeq	fp, r1, r4, ror #15
   1b7a8:	andeq	fp, r1, ip, lsr #15
   1b7ac:	mov	r0, sl
   1b7b0:	mov	r1, #48	; 0x30
   1b7b4:	bl	1148c <strchr@plt>
   1b7b8:	cmp	r0, #0
   1b7bc:	beq	1b7e0 <__assert_fail@plt+0xa1f8>
   1b7c0:	ldr	r1, [sp, #32]
   1b7c4:	ldrb	r0, [r1, #1]
   1b7c8:	cmp	r0, #66	; 0x42
   1b7cc:	cmpne	r0, #68	; 0x44
   1b7d0:	bne	1b998 <__assert_fail@plt+0xa3b0>
   1b7d4:	mov	r5, #1000	; 0x3e8
   1b7d8:	mov	r0, #2
   1b7dc:	str	r0, [sp, #28]
   1b7e0:	mov	r3, #0
   1b7e4:	sub	r0, r4, #66	; 0x42
   1b7e8:	cmp	r0, #53	; 0x35
   1b7ec:	bhi	1b98c <__assert_fail@plt+0xa3a4>
   1b7f0:	add	r1, pc, #0
   1b7f4:	ldr	pc, [r1, r0, lsl #2]
   1b7f8:	andeq	fp, r1, r4, lsl sp
   1b7fc:	andeq	fp, r1, ip, lsl #19
   1b800:	andeq	fp, r1, ip, lsl #19
   1b804:	andeq	fp, r1, ip, lsr sp
   1b808:	andeq	fp, r1, ip, lsl #19
   1b80c:	ldrdeq	fp, [r1], -r0
   1b810:	andeq	fp, r1, ip, lsl #19
   1b814:	andeq	fp, r1, ip, lsl #19
   1b818:	andeq	fp, r1, ip, lsl #19
   1b81c:			; <UNDEFINED> instruction: 0x0001b9bc
   1b820:	andeq	fp, r1, ip, lsl #19
   1b824:	andeq	fp, r1, r4, lsl #20
   1b828:	andeq	fp, r1, ip, lsl #19
   1b82c:	andeq	fp, r1, ip, lsl #19
   1b830:	muleq	r1, r4, lr
   1b834:	andeq	fp, r1, ip, lsl #19
   1b838:	andeq	fp, r1, ip, lsl #19
   1b83c:	andeq	fp, r1, ip, lsl #19
   1b840:	muleq	r1, r0, sl
   1b844:	andeq	fp, r1, ip, lsl #19
   1b848:	andeq	fp, r1, ip, lsl #19
   1b84c:	andeq	fp, r1, ip, lsl #19
   1b850:	andeq	fp, r1, ip, lsl #19
   1b854:			; <UNDEFINED> instruction: 0x0001bfbc
   1b858:	andeq	fp, r1, r8, ror fp
   1b85c:	andeq	fp, r1, ip, lsl #19
   1b860:	andeq	fp, r1, ip, lsl #19
   1b864:	andeq	fp, r1, ip, lsl #19
   1b868:	andeq	fp, r1, ip, lsl #19
   1b86c:	andeq	fp, r1, ip, lsl #19
   1b870:	andeq	fp, r1, ip, lsl #19
   1b874:	andeq	fp, r1, ip, lsl #19
   1b878:	muleq	r1, r4, r1
   1b87c:	andeq	ip, r1, ip, ror #3
   1b880:	andeq	fp, r1, ip, lsl #19
   1b884:	andeq	fp, r1, ip, lsl #19
   1b888:	andeq	fp, r1, ip, lsl #19
   1b88c:	ldrdeq	fp, [r1], -r0
   1b890:	andeq	fp, r1, ip, lsl #19
   1b894:	andeq	fp, r1, ip, lsl #19
   1b898:	andeq	fp, r1, ip, lsl #19
   1b89c:			; <UNDEFINED> instruction: 0x0001b9bc
   1b8a0:	andeq	fp, r1, ip, lsl #19
   1b8a4:	andeq	fp, r1, r4, lsl #20
   1b8a8:	andeq	fp, r1, ip, lsl #19
   1b8ac:	andeq	fp, r1, ip, lsl #19
   1b8b0:	andeq	fp, r1, ip, lsl #19
   1b8b4:	andeq	fp, r1, ip, lsl #19
   1b8b8:	andeq	fp, r1, ip, lsl #19
   1b8bc:	andeq	fp, r1, ip, lsl #19
   1b8c0:	muleq	r1, r0, sl
   1b8c4:	andeq	fp, r1, ip, lsl #19
   1b8c8:	andeq	fp, r1, ip, lsl #19
   1b8cc:	andeq	ip, r1, r8, asr #3
   1b8d0:	mvn	r0, #0
   1b8d4:	mvn	r1, #0
   1b8d8:	mov	r2, r5
   1b8dc:	mov	sl, r3
   1b8e0:	bl	1c928 <__assert_fail@plt+0xb340>
   1b8e4:	subs	r3, r0, r6
   1b8e8:	mov	lr, #0
   1b8ec:	umull	r4, r2, r6, r5
   1b8f0:	str	r1, [sp, #20]
   1b8f4:	sbcs	r3, r1, r7
   1b8f8:	mla	ip, r6, sl, r2
   1b8fc:	mov	r2, r1
   1b900:	movwcc	lr, #1
   1b904:	mla	r7, r7, r5, ip
   1b908:	mov	r2, #0
   1b90c:	cmp	lr, #0
   1b910:	mvnne	r4, #0
   1b914:	mvnne	r7, #0
   1b918:	subs	r6, r0, r4
   1b91c:	sbcs	r6, r1, r7
   1b920:	movwcc	r2, #1
   1b924:	umull	r3, r6, r4, r5
   1b928:	cmp	r2, #0
   1b92c:	str	r6, [sp, #16]
   1b930:	mvnne	r3, #0
   1b934:	cmp	r2, #0
   1b938:	umull	r6, ip, r3, r5
   1b93c:	mla	r1, r3, sl, ip
   1b940:	ldr	ip, [sp, #16]
   1b944:	str	r1, [sp, #12]
   1b948:	mla	r4, r4, sl, ip
   1b94c:	mla	r4, r7, r5, r4
   1b950:	ldr	r7, [sp, #12]
   1b954:	mvnne	r4, #0
   1b958:	subs	r0, r0, r3
   1b95c:	ldr	r0, [sp, #20]
   1b960:	mla	r7, r4, r5, r7
   1b964:	sbcs	r0, r0, r4
   1b968:	mov	r0, #0
   1b96c:	movwcc	r0, #1
   1b970:	cmp	r0, #0
   1b974:	mov	r1, r0
   1b978:	orr	r0, lr, r2
   1b97c:	mvnne	r7, #0
   1b980:	mvnne	r6, #0
   1b984:	orr	r3, r0, r1
   1b988:	b	1c1ec <__assert_fail@plt+0xac04>
   1b98c:	ldr	r0, [sp, #36]	; 0x24
   1b990:	orr	r8, r8, #2
   1b994:	b	1c210 <__assert_fail@plt+0xac28>
   1b998:	cmp	r0, #105	; 0x69
   1b99c:	mov	r3, #0
   1b9a0:	bne	1b7e4 <__assert_fail@plt+0xa1fc>
   1b9a4:	ldrb	r0, [r1, #2]
   1b9a8:	mov	r1, #1
   1b9ac:	cmp	r0, #66	; 0x42
   1b9b0:	movweq	r1, #3
   1b9b4:	str	r1, [sp, #28]
   1b9b8:	b	1b7e4 <__assert_fail@plt+0xa1fc>
   1b9bc:	mvn	r0, #0
   1b9c0:	mvn	r1, #0
   1b9c4:	mov	r2, r5
   1b9c8:	mov	r4, r3
   1b9cc:	bl	1c928 <__assert_fail@plt+0xb340>
   1b9d0:	subs	r0, r0, r6
   1b9d4:	mov	r2, #0
   1b9d8:	sbcs	r0, r1, r7
   1b9dc:	movwcc	r2, #1
   1b9e0:	umull	r0, r1, r6, r5
   1b9e4:	mla	r1, r6, r4, r1
   1b9e8:	cmp	r2, #0
   1b9ec:	mov	r3, r2
   1b9f0:	mla	r7, r7, r5, r1
   1b9f4:	mvnne	r0, #0
   1b9f8:	mvnne	r7, #0
   1b9fc:	mov	r6, r0
   1ba00:	b	1c1ec <__assert_fail@plt+0xac04>
   1ba04:	mvn	r0, #0
   1ba08:	mvn	r1, #0
   1ba0c:	mov	r2, r5
   1ba10:	str	r3, [sp, #24]
   1ba14:	bl	1c928 <__assert_fail@plt+0xb340>
   1ba18:	subs	r3, r0, r6
   1ba1c:	mov	ip, r0
   1ba20:	umull	r4, r0, r6, r5
   1ba24:	mov	sl, #0
   1ba28:	sbcs	r3, r1, r7
   1ba2c:	str	r0, [sp, #20]
   1ba30:	ldr	r0, [sp, #24]
   1ba34:	mov	r3, #0
   1ba38:	movwcc	r3, #1
   1ba3c:	cmp	r3, #0
   1ba40:	mvnne	r4, #0
   1ba44:	cmp	r3, #0
   1ba48:	umull	lr, r2, r4, r5
   1ba4c:	mla	r2, r4, r0, r2
   1ba50:	str	r2, [sp, #16]
   1ba54:	ldr	r2, [sp, #20]
   1ba58:	mla	r6, r6, r0, r2
   1ba5c:	ldr	r0, [sp, #16]
   1ba60:	mla	r6, r7, r5, r6
   1ba64:	mvnne	r6, #0
   1ba68:	mla	r7, r6, r5, r0
   1ba6c:	subs	r0, ip, r4
   1ba70:	sbcs	r0, r1, r6
   1ba74:	movwcc	sl, #1
   1ba78:	cmp	sl, #0
   1ba7c:	orr	r3, r3, sl
   1ba80:	mvnne	lr, #0
   1ba84:	mvnne	r7, #0
   1ba88:	mov	r6, lr
   1ba8c:	b	1c1ec <__assert_fail@plt+0xac04>
   1ba90:	mvn	r0, #0
   1ba94:	mvn	r1, #0
   1ba98:	mov	r2, r5
   1ba9c:	mov	sl, r3
   1baa0:	bl	1c928 <__assert_fail@plt+0xb340>
   1baa4:	subs	r3, r0, r6
   1baa8:	mov	ip, r1
   1baac:	umull	r2, lr, r6, r5
   1bab0:	str	r0, [sp, #20]
   1bab4:	sbcs	r3, r1, r7
   1bab8:	mov	r1, #0
   1babc:	mla	r6, r6, sl, lr
   1bac0:	mov	lr, #0
   1bac4:	str	ip, [sp, #16]
   1bac8:	movwcc	r1, #1
   1bacc:	mla	r7, r7, r5, r6
   1bad0:	cmp	r1, #0
   1bad4:	mvnne	r2, #0
   1bad8:	cmp	r1, #0
   1badc:	umull	r3, r4, r2, r5
   1bae0:	mvnne	r7, #0
   1bae4:	mla	r4, r2, sl, r4
   1bae8:	subs	r2, r0, r2
   1baec:	sbcs	r2, ip, r7
   1baf0:	mla	r4, r7, r5, r4
   1baf4:	movwcc	lr, #1
   1baf8:	mov	r2, #0
   1bafc:	cmp	lr, #0
   1bb00:	mvnne	r3, #0
   1bb04:	mvnne	r4, #0
   1bb08:	subs	r7, r0, r3
   1bb0c:	mov	r0, r5
   1bb10:	sbcs	r7, ip, r4
   1bb14:	movwcc	r2, #1
   1bb18:	umull	r5, r7, r3, r5
   1bb1c:	cmp	r2, #0
   1bb20:	mla	r3, r3, sl, r7
   1bb24:	mvnne	r5, #0
   1bb28:	mla	r3, r4, r0, r3
   1bb2c:	cmp	r2, #0
   1bb30:	umull	r6, ip, r5, r0
   1bb34:	mvnne	r3, #0
   1bb38:	mla	ip, r5, sl, ip
   1bb3c:	mla	r7, r3, r0, ip
   1bb40:	ldr	r0, [sp, #20]
   1bb44:	subs	r0, r0, r5
   1bb48:	ldr	r0, [sp, #16]
   1bb4c:	sbcs	r0, r0, r3
   1bb50:	mov	r0, #0
   1bb54:	movwcc	r0, #1
   1bb58:	cmp	r0, #0
   1bb5c:	mov	r3, r0
   1bb60:	orr	r0, r1, lr
   1bb64:	orr	r0, r0, r2
   1bb68:	mvnne	r7, #0
   1bb6c:	mvnne	r6, #0
   1bb70:	orr	r3, r0, r3
   1bb74:	b	1c1ec <__assert_fail@plt+0xac04>
   1bb78:	mvn	r0, #0
   1bb7c:	mvn	r1, #0
   1bb80:	mov	r2, r5
   1bb84:	mov	r4, r3
   1bb88:	str	r3, [sp, #24]
   1bb8c:	bl	1c928 <__assert_fail@plt+0xb340>
   1bb90:	umull	r3, r2, r6, r5
   1bb94:	mla	r2, r6, r4, r2
   1bb98:	subs	r6, r0, r6
   1bb9c:	sbcs	r6, r1, r7
   1bba0:	mla	ip, r7, r5, r2
   1bba4:	ldr	r2, [sp, #24]
   1bba8:	mov	r6, #0
   1bbac:	movwcc	r6, #1
   1bbb0:	cmp	r6, #0
   1bbb4:	str	r6, [sp, #20]
   1bbb8:	mov	r6, #0
   1bbbc:	mvnne	r3, #0
   1bbc0:	mvnne	ip, #0
   1bbc4:	subs	r4, r0, r3
   1bbc8:	umull	r7, lr, r3, r5
   1bbcc:	sbcs	r4, r1, ip
   1bbd0:	mla	r3, r3, r2, lr
   1bbd4:	movwcc	r6, #1
   1bbd8:	cmp	r6, #0
   1bbdc:	str	r6, [sp, #16]
   1bbe0:	mvnne	r7, #0
   1bbe4:	cmp	r6, #0
   1bbe8:	umull	sl, r4, r7, r5
   1bbec:	mla	r4, r7, r2, r4
   1bbf0:	mla	r2, ip, r5, r3
   1bbf4:	mov	ip, #0
   1bbf8:	mvnne	r2, #0
   1bbfc:	subs	r3, r0, r7
   1bc00:	mla	r6, r2, r5, r4
   1bc04:	mov	r4, r0
   1bc08:	sbcs	r2, r1, r2
   1bc0c:	mov	r0, #0
   1bc10:	movwcc	r0, #1
   1bc14:	mov	r3, r4
   1bc18:	cmp	r0, #0
   1bc1c:	str	r0, [sp, #12]
   1bc20:	mov	r0, r1
   1bc24:	str	r3, [sp, #4]
   1bc28:	mvnne	sl, #0
   1bc2c:	mvnne	r6, #0
   1bc30:	str	r0, [sp, #8]
   1bc34:	subs	r2, r4, sl
   1bc38:	ldr	r4, [sp, #24]
   1bc3c:	sbcs	r2, r1, r6
   1bc40:	movwcc	ip, #1
   1bc44:	umull	r7, r2, sl, r5
   1bc48:	cmp	ip, #0
   1bc4c:	mla	r2, sl, r4, r2
   1bc50:	mvnne	r7, #0
   1bc54:	cmp	ip, #0
   1bc58:	mov	sl, #0
   1bc5c:	umull	r1, lr, r7, r5
   1bc60:	mla	r2, r6, r5, r2
   1bc64:	mvnne	r2, #0
   1bc68:	mla	lr, r7, r4, lr
   1bc6c:	subs	r6, r3, r7
   1bc70:	mla	lr, r2, r5, lr
   1bc74:	sbcs	r2, r0, r2
   1bc78:	movwcc	sl, #1
   1bc7c:	mov	r2, #0
   1bc80:	cmp	sl, #0
   1bc84:	mvnne	r1, #0
   1bc88:	mvnne	lr, #0
   1bc8c:	subs	r6, r3, r1
   1bc90:	ldr	r3, [sp, #24]
   1bc94:	sbcs	r6, r0, lr
   1bc98:	umull	r0, r7, r1, r5
   1bc9c:	movwcc	r2, #1
   1bca0:	cmp	r2, #0
   1bca4:	mvnne	r0, #0
   1bca8:	mla	r1, r1, r3, r7
   1bcac:	cmp	r2, #0
   1bcb0:	umull	r6, r4, r0, r5
   1bcb4:	mla	r1, lr, r5, r1
   1bcb8:	mla	r4, r0, r3, r4
   1bcbc:	ldr	r3, [sp, #4]
   1bcc0:	mvnne	r1, #0
   1bcc4:	mla	r7, r1, r5, r4
   1bcc8:	ldr	r5, [sp, #16]
   1bccc:	subs	r0, r3, r0
   1bcd0:	ldr	r0, [sp, #8]
   1bcd4:	sbcs	r0, r0, r1
   1bcd8:	mov	r0, #0
   1bcdc:	movwcc	r0, #1
   1bce0:	cmp	r0, #0
   1bce4:	mov	r1, r0
   1bce8:	ldr	r0, [sp, #20]
   1bcec:	mvnne	r7, #0
   1bcf0:	mvnne	r6, #0
   1bcf4:	orr	r0, r0, r5
   1bcf8:	ldr	r5, [sp, #12]
   1bcfc:	orr	r0, r0, r5
   1bd00:	orr	r0, r0, ip
   1bd04:	orr	r0, r0, sl
   1bd08:	orr	r0, r0, r2
   1bd0c:	orr	r0, r0, r1
   1bd10:	b	1c18c <__assert_fail@plt+0xaba4>
   1bd14:	mov	r1, #0
   1bd18:	lsl	r2, r7, #10
   1bd1c:	lsl	r0, r6, #10
   1bd20:	lsr	r3, r7, #22
   1bd24:	cmp	r1, r7, lsr #22
   1bd28:	orr	r2, r2, r6, lsr #22
   1bd2c:	mvnne	r0, #0
   1bd30:	movwne	r3, #1
   1bd34:	cmp	r1, r7, lsr #22
   1bd38:	b	1c1b8 <__assert_fail@plt+0xabd0>
   1bd3c:	mvn	r0, #0
   1bd40:	mvn	r1, #0
   1bd44:	mov	r2, r5
   1bd48:	mov	sl, r3
   1bd4c:	bl	1c928 <__assert_fail@plt+0xb340>
   1bd50:	subs	r2, r0, r6
   1bd54:	mov	ip, r0
   1bd58:	mov	r0, #0
   1bd5c:	sbcs	r2, r1, r7
   1bd60:	movwcc	r0, #1
   1bd64:	umull	r4, r2, r6, r5
   1bd68:	cmp	r0, #0
   1bd6c:	mla	r2, r6, sl, r2
   1bd70:	str	r0, [sp, #20]
   1bd74:	mvnne	r4, #0
   1bd78:	cmp	r0, #0
   1bd7c:	mla	r2, r7, r5, r2
   1bd80:	mov	r0, #0
   1bd84:	umull	lr, r3, r4, r5
   1bd88:	mvnne	r2, #0
   1bd8c:	mla	r3, r4, sl, r3
   1bd90:	mla	r6, r2, r5, r3
   1bd94:	subs	r3, ip, r4
   1bd98:	sbcs	r2, r1, r2
   1bd9c:	mov	r3, r1
   1bda0:	movwcc	r0, #1
   1bda4:	str	r3, [sp, #8]
   1bda8:	cmp	r0, #0
   1bdac:	str	r0, [sp, #16]
   1bdb0:	mov	r0, ip
   1bdb4:	mvnne	lr, #0
   1bdb8:	mvnne	r6, #0
   1bdbc:	str	r0, [sp, #12]
   1bdc0:	subs	r2, ip, lr
   1bdc4:	umull	r7, r4, lr, r5
   1bdc8:	sbcs	r2, r1, r6
   1bdcc:	mla	r4, lr, sl, r4
   1bdd0:	mov	r2, #0
   1bdd4:	mla	r6, r6, r5, r4
   1bdd8:	mov	r4, #0
   1bddc:	movwcc	r2, #1
   1bde0:	cmp	r2, #0
   1bde4:	mvnne	r7, #0
   1bde8:	cmp	r2, #0
   1bdec:	umull	r1, ip, r7, r5
   1bdf0:	mvnne	r6, #0
   1bdf4:	mla	ip, r7, sl, ip
   1bdf8:	subs	r7, r0, r7
   1bdfc:	mla	lr, r6, r5, ip
   1be00:	sbcs	r7, r3, r6
   1be04:	mov	ip, #0
   1be08:	movwcc	ip, #1
   1be0c:	cmp	ip, #0
   1be10:	mvnne	r1, #0
   1be14:	mvnne	lr, #0
   1be18:	subs	r7, r0, r1
   1be1c:	sbcs	r7, r3, lr
   1be20:	movwcc	r4, #1
   1be24:	umull	r0, r7, r1, r5
   1be28:	cmp	r4, #0
   1be2c:	mla	r1, r1, sl, r7
   1be30:	mvnne	r0, #0
   1be34:	mla	r1, lr, r5, r1
   1be38:	cmp	r4, #0
   1be3c:	umull	r6, r3, r0, r5
   1be40:	mvnne	r1, #0
   1be44:	mla	r3, r0, sl, r3
   1be48:	mla	r7, r1, r5, r3
   1be4c:	ldr	r3, [sp, #12]
   1be50:	subs	r0, r3, r0
   1be54:	ldr	r3, [sp, #16]
   1be58:	ldr	r0, [sp, #8]
   1be5c:	sbcs	r0, r0, r1
   1be60:	mov	r0, #0
   1be64:	movwcc	r0, #1
   1be68:	cmp	r0, #0
   1be6c:	mov	r1, r0
   1be70:	ldr	r0, [sp, #20]
   1be74:	mvnne	r7, #0
   1be78:	mvnne	r6, #0
   1be7c:	orr	r0, r0, r3
   1be80:	orr	r0, r0, r2
   1be84:	orr	r0, r0, ip
   1be88:	orr	r0, r0, r4
   1be8c:	orr	r3, r0, r1
   1be90:	b	1c1ec <__assert_fail@plt+0xac04>
   1be94:	mvn	r0, #0
   1be98:	mvn	r1, #0
   1be9c:	mov	r2, r5
   1bea0:	mov	sl, r3
   1bea4:	bl	1c928 <__assert_fail@plt+0xb340>
   1bea8:	umull	r3, r2, r6, r5
   1beac:	mov	lr, r1
   1beb0:	mov	r1, r0
   1beb4:	mla	r2, r6, sl, r2
   1beb8:	subs	r6, r0, r6
   1bebc:	mov	r0, #0
   1bec0:	sbcs	r6, lr, r7
   1bec4:	mla	r2, r7, r5, r2
   1bec8:	movwcc	r0, #1
   1becc:	cmp	r0, #0
   1bed0:	str	r0, [sp, #20]
   1bed4:	mov	r0, r1
   1bed8:	mvnne	r3, #0
   1bedc:	mvnne	r2, #0
   1bee0:	str	r0, [sp, #16]
   1bee4:	subs	r4, r1, r3
   1bee8:	umull	r7, ip, r3, r5
   1beec:	sbcs	r4, lr, r2
   1bef0:	mla	r3, r3, sl, ip
   1bef4:	mov	ip, #0
   1bef8:	mov	r4, #0
   1befc:	mla	r2, r2, r5, r3
   1bf00:	movwcc	r4, #1
   1bf04:	cmp	r4, #0
   1bf08:	mvnne	r7, #0
   1bf0c:	cmp	r4, #0
   1bf10:	umull	r1, r6, r7, r5
   1bf14:	mvnne	r2, #0
   1bf18:	mla	r6, r7, sl, r6
   1bf1c:	mla	r3, r2, r5, r6
   1bf20:	subs	r6, r0, r7
   1bf24:	sbcs	r2, lr, r2
   1bf28:	movwcc	ip, #1
   1bf2c:	mov	r2, #0
   1bf30:	cmp	ip, #0
   1bf34:	mvnne	r1, #0
   1bf38:	mvnne	r3, #0
   1bf3c:	subs	r6, r0, r1
   1bf40:	sbcs	r6, lr, r3
   1bf44:	movwcc	r2, #1
   1bf48:	umull	r0, r6, r1, r5
   1bf4c:	cmp	r2, #0
   1bf50:	str	r6, [sp, #12]
   1bf54:	mvnne	r0, #0
   1bf58:	cmp	r2, #0
   1bf5c:	umull	r6, r7, r0, r5
   1bf60:	mla	r7, r0, sl, r7
   1bf64:	str	r7, [sp, #8]
   1bf68:	ldr	r7, [sp, #12]
   1bf6c:	mla	r1, r1, sl, r7
   1bf70:	mla	r1, r3, r5, r1
   1bf74:	ldr	r3, [sp, #8]
   1bf78:	mvnne	r1, #0
   1bf7c:	mla	r7, r1, r5, r3
   1bf80:	ldr	r3, [sp, #16]
   1bf84:	subs	r0, r3, r0
   1bf88:	sbcs	r0, lr, r1
   1bf8c:	mov	r0, #0
   1bf90:	movwcc	r0, #1
   1bf94:	cmp	r0, #0
   1bf98:	mov	r1, r0
   1bf9c:	ldr	r0, [sp, #20]
   1bfa0:	mvnne	r7, #0
   1bfa4:	mvnne	r6, #0
   1bfa8:	orr	r0, r0, r4
   1bfac:	orr	r0, r0, ip
   1bfb0:	orr	r0, r0, r2
   1bfb4:	orr	r3, r0, r1
   1bfb8:	b	1c1ec <__assert_fail@plt+0xac04>
   1bfbc:	mvn	r0, #0
   1bfc0:	mvn	r1, #0
   1bfc4:	mov	r2, r5
   1bfc8:	mov	sl, r3
   1bfcc:	bl	1c928 <__assert_fail@plt+0xb340>
   1bfd0:	mov	lr, r0
   1bfd4:	subs	r0, r0, r6
   1bfd8:	mov	r2, #0
   1bfdc:	mov	ip, r1
   1bfe0:	str	sl, [sp, #24]
   1bfe4:	sbcs	r0, r1, r7
   1bfe8:	umull	r3, r1, r6, r5
   1bfec:	str	lr, [sp, #4]
   1bff0:	movwcc	r2, #1
   1bff4:	mla	r6, r6, sl, r1
   1bff8:	mov	r1, #0
   1bffc:	cmp	r2, #0
   1c000:	mla	r7, r7, r5, r6
   1c004:	str	r2, [sp, #20]
   1c008:	mvnne	r3, #0
   1c00c:	cmp	r2, #0
   1c010:	mov	r2, #0
   1c014:	umull	r0, r4, r3, r5
   1c018:	mvnne	r7, #0
   1c01c:	mla	r4, r3, sl, r4
   1c020:	subs	r3, lr, r3
   1c024:	sbcs	r3, ip, r7
   1c028:	mla	r4, r7, r5, r4
   1c02c:	movwcc	r1, #1
   1c030:	cmp	r1, #0
   1c034:	str	r1, [sp, #16]
   1c038:	mvnne	r0, #0
   1c03c:	mvnne	r4, #0
   1c040:	subs	r3, lr, r0
   1c044:	sbcs	r3, ip, r4
   1c048:	movwcc	r2, #1
   1c04c:	umull	r6, r3, r0, r5
   1c050:	cmp	r2, #0
   1c054:	mla	r0, r0, sl, r3
   1c058:	str	r2, [sp, #12]
   1c05c:	mvnne	r6, #0
   1c060:	mla	r0, r4, r5, r0
   1c064:	cmp	r2, #0
   1c068:	ldr	r4, [sp, #24]
   1c06c:	umull	r1, r7, r6, r5
   1c070:	mvnne	r0, #0
   1c074:	subs	r3, lr, r6
   1c078:	mla	r7, r6, sl, r7
   1c07c:	mov	r3, ip
   1c080:	mla	r7, r0, r5, r7
   1c084:	sbcs	r0, ip, r0
   1c088:	str	r3, [sp]
   1c08c:	mov	r0, #0
   1c090:	movwcc	r0, #1
   1c094:	cmp	r0, #0
   1c098:	str	r0, [sp, #8]
   1c09c:	mvnne	r1, #0
   1c0a0:	mvnne	r7, #0
   1c0a4:	subs	r0, lr, r1
   1c0a8:	sbcs	r0, ip, r7
   1c0ac:	mov	ip, #0
   1c0b0:	movwcc	ip, #1
   1c0b4:	umull	r6, r0, r1, r5
   1c0b8:	cmp	ip, #0
   1c0bc:	mla	r1, r1, r4, r0
   1c0c0:	mov	r0, lr
   1c0c4:	mvnne	r6, #0
   1c0c8:	mla	r1, r7, r5, r1
   1c0cc:	cmp	ip, #0
   1c0d0:	umull	r2, sl, r6, r5
   1c0d4:	mvnne	r1, #0
   1c0d8:	mla	sl, r6, r4, sl
   1c0dc:	subs	r6, lr, r6
   1c0e0:	mov	lr, #0
   1c0e4:	mla	r7, r1, r5, sl
   1c0e8:	sbcs	r1, r3, r1
   1c0ec:	movwcc	lr, #1
   1c0f0:	ldr	r1, [sp, #24]
   1c0f4:	cmp	lr, #0
   1c0f8:	mvnne	r2, #0
   1c0fc:	mvnne	r7, #0
   1c100:	subs	r6, r0, r2
   1c104:	umull	r0, sl, r2, r5
   1c108:	sbcs	r6, r3, r7
   1c10c:	mov	r3, #0
   1c110:	mla	r2, r2, r1, sl
   1c114:	movwcc	r3, #1
   1c118:	mla	r2, r7, r5, r2
   1c11c:	cmp	r3, #0
   1c120:	mvnne	r0, #0
   1c124:	cmp	r3, #0
   1c128:	umull	r6, r4, r0, r5
   1c12c:	mvnne	r2, #0
   1c130:	mla	r4, r0, r1, r4
   1c134:	ldr	r1, [sp, #4]
   1c138:	mla	r7, r2, r5, r4
   1c13c:	ldr	r5, [sp, #16]
   1c140:	subs	r0, r1, r0
   1c144:	ldr	r0, [sp]
   1c148:	sbcs	r0, r0, r2
   1c14c:	mov	r0, #0
   1c150:	movwcc	r0, #1
   1c154:	cmp	r0, #0
   1c158:	mov	r2, r0
   1c15c:	ldr	r0, [sp, #20]
   1c160:	mvnne	r7, #0
   1c164:	mvnne	r6, #0
   1c168:	orr	r0, r0, r5
   1c16c:	ldr	r5, [sp, #12]
   1c170:	orr	r0, r0, r5
   1c174:	ldr	r5, [sp, #8]
   1c178:	orr	r0, r0, r5
   1c17c:	orr	r0, r0, ip
   1c180:	orr	r0, r0, lr
   1c184:	orr	r0, r0, r3
   1c188:	orr	r0, r0, r2
   1c18c:	and	r3, r0, #1
   1c190:	b	1c1ec <__assert_fail@plt+0xac04>
   1c194:	mov	r1, #0
   1c198:	lsl	r2, r7, #9
   1c19c:	lsl	r0, r6, #9
   1c1a0:	lsr	r3, r7, #23
   1c1a4:	cmp	r1, r7, lsr #23
   1c1a8:	orr	r2, r2, r6, lsr #23
   1c1ac:	mvnne	r0, #0
   1c1b0:	movwne	r3, #1
   1c1b4:	cmp	r1, r7, lsr #23
   1c1b8:	mvnne	r2, #0
   1c1bc:	mov	r6, r0
   1c1c0:	mov	r7, r2
   1c1c4:	b	1c1ec <__assert_fail@plt+0xac04>
   1c1c8:	lsl	r1, r7, #1
   1c1cc:	lsl	r0, r6, #1
   1c1d0:	cmp	r7, #0
   1c1d4:	lsr	r3, r7, #31
   1c1d8:	orr	r1, r1, r6, lsr #31
   1c1dc:	mvnlt	r0, #0
   1c1e0:	mvnlt	r1, #0
   1c1e4:	mov	r6, r0
   1c1e8:	mov	r7, r1
   1c1ec:	ldr	r1, [sp, #32]
   1c1f0:	ldr	r2, [sp, #28]
   1c1f4:	orr	r8, r3, r8
   1c1f8:	add	r0, r1, r2
   1c1fc:	str	r0, [r9]
   1c200:	ldrb	r0, [r1, r2]
   1c204:	cmp	r0, #0
   1c208:	orrne	r8, r8, #2
   1c20c:	ldr	r0, [sp, #36]	; 0x24
   1c210:	strd	r6, [r0]
   1c214:	mov	r0, r8
   1c218:	sub	sp, fp, #28
   1c21c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c220:	movw	r0, #58513	; 0xe491
   1c224:	movw	r1, #58551	; 0xe4b7
   1c228:	movw	r3, #58567	; 0xe4c7
   1c22c:	mov	r2, #85	; 0x55
   1c230:	movt	r0, #1
   1c234:	movt	r1, #1
   1c238:	movt	r3, #1
   1c23c:	bl	115e8 <__assert_fail@plt>
   1c240:	clz	r2, r1
   1c244:	clz	r3, r0
   1c248:	lsr	r2, r2, #5
   1c24c:	lsr	r3, r3, #5
   1c250:	orrs	r2, r3, r2
   1c254:	movwne	r1, #1
   1c258:	movwne	r0, #1
   1c25c:	cmp	r1, #0
   1c260:	beq	1c290 <__assert_fail@plt+0xaca8>
   1c264:	mvn	r2, #-2147483648	; 0x80000000
   1c268:	udiv	r2, r2, r1
   1c26c:	cmp	r2, r0
   1c270:	bcs	1c290 <__assert_fail@plt+0xaca8>
   1c274:	push	{fp, lr}
   1c278:	mov	fp, sp
   1c27c:	bl	114b0 <__errno_location@plt>
   1c280:	mov	r1, #12
   1c284:	str	r1, [r0]
   1c288:	mov	r0, #0
   1c28c:	pop	{fp, pc}
   1c290:	b	11294 <calloc@plt>
   1c294:	cmp	r0, #0
   1c298:	movweq	r0, #1
   1c29c:	cmn	r0, #1
   1c2a0:	ble	1c2a8 <__assert_fail@plt+0xacc0>
   1c2a4:	b	11414 <malloc@plt>
   1c2a8:	push	{fp, lr}
   1c2ac:	mov	fp, sp
   1c2b0:	bl	114b0 <__errno_location@plt>
   1c2b4:	mov	r1, #12
   1c2b8:	str	r1, [r0]
   1c2bc:	mov	r0, #0
   1c2c0:	pop	{fp, pc}
   1c2c4:	push	{fp, lr}
   1c2c8:	mov	fp, sp
   1c2cc:	cmp	r0, #0
   1c2d0:	beq	1c2ec <__assert_fail@plt+0xad04>
   1c2d4:	cmp	r1, #0
   1c2d8:	beq	1c2f8 <__assert_fail@plt+0xad10>
   1c2dc:	cmn	r1, #1
   1c2e0:	ble	1c304 <__assert_fail@plt+0xad1c>
   1c2e4:	pop	{fp, lr}
   1c2e8:	b	11360 <realloc@plt>
   1c2ec:	mov	r0, r1
   1c2f0:	pop	{fp, lr}
   1c2f4:	b	1c294 <__assert_fail@plt+0xacac>
   1c2f8:	bl	174e4 <__assert_fail@plt+0x5efc>
   1c2fc:	mov	r0, #0
   1c300:	pop	{fp, pc}
   1c304:	bl	114b0 <__errno_location@plt>
   1c308:	mov	r1, #12
   1c30c:	str	r1, [r0]
   1c310:	mov	r0, #0
   1c314:	pop	{fp, pc}
   1c318:	push	{r4, r5, r6, sl, fp, lr}
   1c31c:	add	fp, sp, #16
   1c320:	movw	r6, #62232	; 0xf318
   1c324:	mov	r5, r0
   1c328:	mov	r4, r1
   1c32c:	movt	r6, #2
   1c330:	ldr	r0, [r6]
   1c334:	cmp	r0, #0
   1c338:	bne	1c354 <__assert_fail@plt+0xad6c>
   1c33c:	movw	r1, #58646	; 0xe516
   1c340:	movw	r0, #8127	; 0x1fbf
   1c344:	mov	r2, #0
   1c348:	movt	r1, #1
   1c34c:	bl	11570 <newlocale@plt>
   1c350:	str	r0, [r6]
   1c354:	ldr	r2, [r6]
   1c358:	cmp	r2, #0
   1c35c:	beq	1c370 <__assert_fail@plt+0xad88>
   1c360:	mov	r0, r5
   1c364:	mov	r1, r4
   1c368:	pop	{r4, r5, r6, sl, fp, lr}
   1c36c:	b	11528 <strtod_l@plt>
   1c370:	cmp	r4, #0
   1c374:	vmov.i32	d0, #0	; 0x00000000
   1c378:	strne	r5, [r4]
   1c37c:	pop	{r4, r5, r6, sl, fp, pc}
   1c380:	push	{r4, r5, r6, sl, fp, lr}
   1c384:	add	fp, sp, #16
   1c388:	mov	r4, r0
   1c38c:	bl	113d8 <__fpending@plt>
   1c390:	ldr	r6, [r4]
   1c394:	mov	r5, r0
   1c398:	mov	r0, r4
   1c39c:	bl	1c4d0 <__assert_fail@plt+0xaee8>
   1c3a0:	tst	r6, #32
   1c3a4:	bne	1c3dc <__assert_fail@plt+0xadf4>
   1c3a8:	cmp	r0, #0
   1c3ac:	mov	r4, r0
   1c3b0:	mvnne	r4, #0
   1c3b4:	cmp	r5, #0
   1c3b8:	bne	1c3e8 <__assert_fail@plt+0xae00>
   1c3bc:	cmp	r0, #0
   1c3c0:	beq	1c3e8 <__assert_fail@plt+0xae00>
   1c3c4:	bl	114b0 <__errno_location@plt>
   1c3c8:	ldr	r0, [r0]
   1c3cc:	subs	r4, r0, #9
   1c3d0:	mvnne	r4, #0
   1c3d4:	mov	r0, r4
   1c3d8:	pop	{r4, r5, r6, sl, fp, pc}
   1c3dc:	mvn	r4, #0
   1c3e0:	cmp	r0, #0
   1c3e4:	beq	1c3f0 <__assert_fail@plt+0xae08>
   1c3e8:	mov	r0, r4
   1c3ec:	pop	{r4, r5, r6, sl, fp, pc}
   1c3f0:	bl	114b0 <__errno_location@plt>
   1c3f4:	mov	r1, #0
   1c3f8:	str	r1, [r0]
   1c3fc:	mov	r0, r4
   1c400:	pop	{r4, r5, r6, sl, fp, pc}
   1c404:	andeq	r0, r0, r0
   1c408:	vldr	d16, [pc, #168]	; 1c4b8 <__assert_fail@plt+0xaed0>
   1c40c:	vcmpe.f64	d0, d16
   1c410:	vmrs	APSR_nzcv, fpscr
   1c414:	ble	1c498 <__assert_fail@plt+0xaeb0>
   1c418:	vldr	d16, [pc, #160]	; 1c4c0 <__assert_fail@plt+0xaed8>
   1c41c:	movw	ip, #51712	; 0xca00
   1c420:	movt	ip, #15258	; 0x3b9a
   1c424:	vcmpe.f64	d0, d16
   1c428:	vmrs	APSR_nzcv, fpscr
   1c42c:	bpl	1c4a4 <__assert_fail@plt+0xaebc>
   1c430:	push	{fp, lr}
   1c434:	mov	fp, sp
   1c438:	vldr	d16, [pc, #136]	; 1c4c8 <__assert_fail@plt+0xaee0>
   1c43c:	vcvt.s32.f64	s2, d0
   1c440:	movw	r1, #12193	; 0x2fa1
   1c444:	vcvt.f64.s32	d17, s2
   1c448:	movt	r1, #17592	; 0x44b8
   1c44c:	vmov	lr, s2
   1c450:	vsub.f64	d17, d0, d17
   1c454:	vmul.f64	d16, d17, d16
   1c458:	vcvt.s32.f64	s0, d16
   1c45c:	vcvt.f64.s32	d17, s0
   1c460:	vmov	r2, s0
   1c464:	vcmpe.f64	d16, d17
   1c468:	vmrs	APSR_nzcv, fpscr
   1c46c:	addgt	r2, r2, #1
   1c470:	smmul	r1, r2, r1
   1c474:	asr	r3, r1, #28
   1c478:	add	r1, r3, r1, lsr #31
   1c47c:	mls	r2, r1, ip, r2
   1c480:	add	r1, r1, lr
   1c484:	cmp	r2, #0
   1c488:	add	r3, r1, r2, asr #31
   1c48c:	addlt	r2, r2, ip
   1c490:	pop	{fp, lr}
   1c494:	b	1c4ac <__assert_fail@plt+0xaec4>
   1c498:	mov	r2, #0
   1c49c:	mov	r3, #-2147483648	; 0x80000000
   1c4a0:	b	1c4ac <__assert_fail@plt+0xaec4>
   1c4a4:	sub	r2, ip, #1
   1c4a8:	mvn	r3, #-2147483648	; 0x80000000
   1c4ac:	str	r3, [r0]
   1c4b0:	str	r2, [r0, #4]
   1c4b4:	bx	lr
   1c4b8:	andeq	r0, r0, r0
   1c4bc:	mvngt	r0, r0
   1c4c0:	andeq	r0, r0, r0
   1c4c4:	mvnmi	r0, r0
   1c4c8:	andeq	r0, r0, r0
   1c4cc:	bicmi	ip, sp, r5, ror #26
   1c4d0:	push	{r4, r5, r6, sl, fp, lr}
   1c4d4:	add	fp, sp, #16
   1c4d8:	sub	sp, sp, #8
   1c4dc:	mov	r4, r0
   1c4e0:	bl	114ec <fileno@plt>
   1c4e4:	cmn	r0, #1
   1c4e8:	ble	1c55c <__assert_fail@plt+0xaf74>
   1c4ec:	mov	r0, r4
   1c4f0:	bl	1142c <__freading@plt>
   1c4f4:	cmp	r0, #0
   1c4f8:	beq	1c524 <__assert_fail@plt+0xaf3c>
   1c4fc:	mov	r0, r4
   1c500:	bl	114ec <fileno@plt>
   1c504:	mov	r1, #1
   1c508:	mov	r2, #0
   1c50c:	mov	r3, #0
   1c510:	str	r1, [sp]
   1c514:	bl	113c0 <lseek64@plt>
   1c518:	and	r0, r0, r1
   1c51c:	cmn	r0, #1
   1c520:	beq	1c55c <__assert_fail@plt+0xaf74>
   1c524:	mov	r0, r4
   1c528:	bl	1c56c <__assert_fail@plt+0xaf84>
   1c52c:	cmp	r0, #0
   1c530:	beq	1c55c <__assert_fail@plt+0xaf74>
   1c534:	bl	114b0 <__errno_location@plt>
   1c538:	ldr	r6, [r0]
   1c53c:	mov	r5, r0
   1c540:	mov	r0, r4
   1c544:	bl	11510 <fclose@plt>
   1c548:	cmp	r6, #0
   1c54c:	strne	r6, [r5]
   1c550:	mvnne	r0, #0
   1c554:	sub	sp, fp, #16
   1c558:	pop	{r4, r5, r6, sl, fp, pc}
   1c55c:	mov	r0, r4
   1c560:	sub	sp, fp, #16
   1c564:	pop	{r4, r5, r6, sl, fp, lr}
   1c568:	b	11510 <fclose@plt>
   1c56c:	push	{r4, sl, fp, lr}
   1c570:	add	fp, sp, #8
   1c574:	sub	sp, sp, #8
   1c578:	mov	r4, r0
   1c57c:	cmp	r0, #0
   1c580:	beq	1c59c <__assert_fail@plt+0xafb4>
   1c584:	mov	r0, r4
   1c588:	bl	1142c <__freading@plt>
   1c58c:	cmp	r0, #0
   1c590:	ldrbne	r0, [r4, #1]
   1c594:	tstne	r0, #1
   1c598:	bne	1c5ac <__assert_fail@plt+0xafc4>
   1c59c:	mov	r0, r4
   1c5a0:	sub	sp, fp, #8
   1c5a4:	pop	{r4, sl, fp, lr}
   1c5a8:	b	112e8 <fflush@plt>
   1c5ac:	mov	r0, #1
   1c5b0:	mov	r2, #0
   1c5b4:	mov	r3, #0
   1c5b8:	str	r0, [sp]
   1c5bc:	mov	r0, r4
   1c5c0:	bl	1c5c8 <__assert_fail@plt+0xafe0>
   1c5c4:	b	1c59c <__assert_fail@plt+0xafb4>
   1c5c8:	push	{r4, r5, r6, r7, fp, lr}
   1c5cc:	add	fp, sp, #16
   1c5d0:	sub	sp, sp, #8
   1c5d4:	mov	r4, r0
   1c5d8:	ldr	r0, [r0, #4]
   1c5dc:	mov	r5, r3
   1c5e0:	mov	r6, r2
   1c5e4:	ldr	r1, [r4, #8]
   1c5e8:	cmp	r1, r0
   1c5ec:	bne	1c608 <__assert_fail@plt+0xb020>
   1c5f0:	ldrd	r0, [r4, #16]
   1c5f4:	cmp	r1, r0
   1c5f8:	bne	1c608 <__assert_fail@plt+0xb020>
   1c5fc:	ldr	r0, [r4, #36]	; 0x24
   1c600:	cmp	r0, #0
   1c604:	beq	1c620 <__assert_fail@plt+0xb038>
   1c608:	mov	r0, r4
   1c60c:	mov	r2, r6
   1c610:	mov	r3, r5
   1c614:	sub	sp, fp, #16
   1c618:	pop	{r4, r5, r6, r7, fp, lr}
   1c61c:	b	1151c <fseeko64@plt>
   1c620:	ldr	r7, [fp, #8]
   1c624:	mov	r0, r4
   1c628:	bl	114ec <fileno@plt>
   1c62c:	mov	r2, r6
   1c630:	mov	r3, r5
   1c634:	str	r7, [sp]
   1c638:	bl	113c0 <lseek64@plt>
   1c63c:	and	r2, r0, r1
   1c640:	cmn	r2, #1
   1c644:	mvneq	r0, #0
   1c648:	subeq	sp, fp, #16
   1c64c:	popeq	{r4, r5, r6, r7, fp, pc}
   1c650:	strd	r0, [r4, #80]	; 0x50
   1c654:	ldr	r0, [r4]
   1c658:	bic	r0, r0, #16
   1c65c:	str	r0, [r4]
   1c660:	mov	r0, #0
   1c664:	sub	sp, fp, #16
   1c668:	pop	{r4, r5, r6, r7, fp, pc}
   1c66c:	push	{fp, lr}
   1c670:	mov	fp, sp
   1c674:	mov	r0, #14
   1c678:	bl	11564 <nl_langinfo@plt>
   1c67c:	movw	r1, #54062	; 0xd32e
   1c680:	cmp	r0, #0
   1c684:	movt	r1, #1
   1c688:	movne	r1, r0
   1c68c:	movw	r0, #58648	; 0xe518
   1c690:	ldrb	r2, [r1]
   1c694:	movt	r0, #1
   1c698:	cmp	r2, #0
   1c69c:	movne	r0, r1
   1c6a0:	pop	{fp, pc}
   1c6a4:	push	{r4, r5, r6, r7, fp, lr}
   1c6a8:	add	fp, sp, #16
   1c6ac:	sub	sp, sp, #8
   1c6b0:	add	r5, sp, #4
   1c6b4:	cmp	r0, #0
   1c6b8:	mov	r7, r2
   1c6bc:	mov	r4, r1
   1c6c0:	movne	r5, r0
   1c6c4:	mov	r0, r5
   1c6c8:	bl	113e4 <mbrtowc@plt>
   1c6cc:	mov	r6, r0
   1c6d0:	cmp	r7, #0
   1c6d4:	beq	1c6f8 <__assert_fail@plt+0xb110>
   1c6d8:	cmn	r6, #2
   1c6dc:	bcc	1c6f8 <__assert_fail@plt+0xb110>
   1c6e0:	mov	r0, #0
   1c6e4:	bl	1c74c <__assert_fail@plt+0xb164>
   1c6e8:	cmp	r0, #0
   1c6ec:	ldrbeq	r0, [r4]
   1c6f0:	moveq	r6, #1
   1c6f4:	streq	r0, [r5]
   1c6f8:	mov	r0, r6
   1c6fc:	sub	sp, fp, #16
   1c700:	pop	{r4, r5, r6, r7, fp, pc}
   1c704:	cmp	r2, #0
   1c708:	beq	1c738 <__assert_fail@plt+0xb150>
   1c70c:	mvn	r3, #0
   1c710:	udiv	r3, r3, r2
   1c714:	cmp	r3, r1
   1c718:	bcs	1c738 <__assert_fail@plt+0xb150>
   1c71c:	push	{fp, lr}
   1c720:	mov	fp, sp
   1c724:	bl	114b0 <__errno_location@plt>
   1c728:	mov	r1, #12
   1c72c:	str	r1, [r0]
   1c730:	mov	r0, #0
   1c734:	pop	{fp, pc}
   1c738:	mul	r1, r2, r1
   1c73c:	b	1c2c4 <__assert_fail@plt+0xacdc>
   1c740:	mov	r1, #0
   1c744:	mov	r2, #3
   1c748:	b	172bc <__assert_fail@plt+0x5cd4>
   1c74c:	push	{r4, sl, fp, lr}
   1c750:	add	fp, sp, #8
   1c754:	sub	sp, sp, #264	; 0x108
   1c758:	add	r1, sp, #7
   1c75c:	movw	r2, #257	; 0x101
   1c760:	bl	1c7b0 <__assert_fail@plt+0xb1c8>
   1c764:	mov	r4, #0
   1c768:	cmp	r0, #0
   1c76c:	bne	1c7a4 <__assert_fail@plt+0xb1bc>
   1c770:	movw	r1, #58646	; 0xe516
   1c774:	add	r0, sp, #7
   1c778:	movt	r1, #1
   1c77c:	bl	112b8 <strcmp@plt>
   1c780:	cmp	r0, #0
   1c784:	beq	1c7a4 <__assert_fail@plt+0xb1bc>
   1c788:	movw	r1, #58654	; 0xe51e
   1c78c:	add	r0, sp, #7
   1c790:	movt	r1, #1
   1c794:	bl	112b8 <strcmp@plt>
   1c798:	mov	r4, r0
   1c79c:	cmp	r0, #0
   1c7a0:	movwne	r4, #1
   1c7a4:	mov	r0, r4
   1c7a8:	sub	sp, fp, #8
   1c7ac:	pop	{r4, sl, fp, pc}
   1c7b0:	push	{r4, r5, r6, r7, fp, lr}
   1c7b4:	add	fp, sp, #16
   1c7b8:	mov	r4, r1
   1c7bc:	mov	r1, #0
   1c7c0:	mov	r6, r2
   1c7c4:	bl	1154c <setlocale@plt>
   1c7c8:	cmp	r0, #0
   1c7cc:	beq	1c7fc <__assert_fail@plt+0xb214>
   1c7d0:	mov	r7, r0
   1c7d4:	bl	11474 <strlen@plt>
   1c7d8:	cmp	r0, r6
   1c7dc:	bcs	1c81c <__assert_fail@plt+0xb234>
   1c7e0:	add	r2, r0, #1
   1c7e4:	mov	r0, r4
   1c7e8:	mov	r1, r7
   1c7ec:	bl	11318 <memcpy@plt>
   1c7f0:	mov	r5, #0
   1c7f4:	mov	r0, r5
   1c7f8:	pop	{r4, r5, r6, r7, fp, pc}
   1c7fc:	cmp	r6, #0
   1c800:	mov	r5, #22
   1c804:	movne	r0, #0
   1c808:	strbne	r0, [r4]
   1c80c:	movne	r0, r5
   1c810:	popne	{r4, r5, r6, r7, fp, pc}
   1c814:	mov	r0, r5
   1c818:	pop	{r4, r5, r6, r7, fp, pc}
   1c81c:	mov	r5, #34	; 0x22
   1c820:	cmp	r6, #0
   1c824:	beq	1c844 <__assert_fail@plt+0xb25c>
   1c828:	sub	r6, r6, #1
   1c82c:	mov	r0, r4
   1c830:	mov	r1, r7
   1c834:	mov	r2, r6
   1c838:	bl	11318 <memcpy@plt>
   1c83c:	mov	r0, #0
   1c840:	strb	r0, [r4, r6]
   1c844:	mov	r0, r5
   1c848:	pop	{r4, r5, r6, r7, fp, pc}
   1c84c:	mov	r1, #0
   1c850:	b	1154c <setlocale@plt>
   1c854:	cmp	r3, #0
   1c858:	cmpeq	r2, #0
   1c85c:	bne	1c880 <__assert_fail@plt+0xb298>
   1c860:	cmp	r1, #0
   1c864:	movlt	r1, #-2147483648	; 0x80000000
   1c868:	movlt	r0, #0
   1c86c:	blt	1c87c <__assert_fail@plt+0xb294>
   1c870:	cmpeq	r0, #0
   1c874:	mvnne	r1, #-2147483648	; 0x80000000
   1c878:	mvnne	r0, #0
   1c87c:	b	1c964 <__assert_fail@plt+0xb37c>
   1c880:	sub	sp, sp, #8
   1c884:	push	{sp, lr}
   1c888:	cmp	r1, #0
   1c88c:	blt	1c8ac <__assert_fail@plt+0xb2c4>
   1c890:	cmp	r3, #0
   1c894:	blt	1c8e0 <__assert_fail@plt+0xb2f8>
   1c898:	bl	1c974 <__assert_fail@plt+0xb38c>
   1c89c:	ldr	lr, [sp, #4]
   1c8a0:	add	sp, sp, #8
   1c8a4:	pop	{r2, r3}
   1c8a8:	bx	lr
   1c8ac:	rsbs	r0, r0, #0
   1c8b0:	sbc	r1, r1, r1, lsl #1
   1c8b4:	cmp	r3, #0
   1c8b8:	blt	1c904 <__assert_fail@plt+0xb31c>
   1c8bc:	bl	1c974 <__assert_fail@plt+0xb38c>
   1c8c0:	ldr	lr, [sp, #4]
   1c8c4:	add	sp, sp, #8
   1c8c8:	pop	{r2, r3}
   1c8cc:	rsbs	r0, r0, #0
   1c8d0:	sbc	r1, r1, r1, lsl #1
   1c8d4:	rsbs	r2, r2, #0
   1c8d8:	sbc	r3, r3, r3, lsl #1
   1c8dc:	bx	lr
   1c8e0:	rsbs	r2, r2, #0
   1c8e4:	sbc	r3, r3, r3, lsl #1
   1c8e8:	bl	1c974 <__assert_fail@plt+0xb38c>
   1c8ec:	ldr	lr, [sp, #4]
   1c8f0:	add	sp, sp, #8
   1c8f4:	pop	{r2, r3}
   1c8f8:	rsbs	r0, r0, #0
   1c8fc:	sbc	r1, r1, r1, lsl #1
   1c900:	bx	lr
   1c904:	rsbs	r2, r2, #0
   1c908:	sbc	r3, r3, r3, lsl #1
   1c90c:	bl	1c974 <__assert_fail@plt+0xb38c>
   1c910:	ldr	lr, [sp, #4]
   1c914:	add	sp, sp, #8
   1c918:	pop	{r2, r3}
   1c91c:	rsbs	r2, r2, #0
   1c920:	sbc	r3, r3, r3, lsl #1
   1c924:	bx	lr
   1c928:	cmp	r3, #0
   1c92c:	cmpeq	r2, #0
   1c930:	bne	1c948 <__assert_fail@plt+0xb360>
   1c934:	cmp	r1, #0
   1c938:	cmpeq	r0, #0
   1c93c:	mvnne	r1, #0
   1c940:	mvnne	r0, #0
   1c944:	b	1c964 <__assert_fail@plt+0xb37c>
   1c948:	sub	sp, sp, #8
   1c94c:	push	{sp, lr}
   1c950:	bl	1c974 <__assert_fail@plt+0xb38c>
   1c954:	ldr	lr, [sp, #4]
   1c958:	add	sp, sp, #8
   1c95c:	pop	{r2, r3}
   1c960:	bx	lr
   1c964:	push	{r1, lr}
   1c968:	mov	r0, #8
   1c96c:	bl	112ac <raise@plt>
   1c970:	pop	{r1, pc}
   1c974:	cmp	r1, r3
   1c978:	cmpeq	r0, r2
   1c97c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c980:	mov	r4, r0
   1c984:	movcc	r0, #0
   1c988:	mov	r5, r1
   1c98c:	ldr	lr, [sp, #36]	; 0x24
   1c990:	movcc	r1, r0
   1c994:	bcc	1ca90 <__assert_fail@plt+0xb4a8>
   1c998:	cmp	r3, #0
   1c99c:	clzeq	ip, r2
   1c9a0:	clzne	ip, r3
   1c9a4:	addeq	ip, ip, #32
   1c9a8:	cmp	r5, #0
   1c9ac:	clzeq	r1, r4
   1c9b0:	addeq	r1, r1, #32
   1c9b4:	clzne	r1, r5
   1c9b8:	sub	ip, ip, r1
   1c9bc:	sub	sl, ip, #32
   1c9c0:	lsl	r9, r3, ip
   1c9c4:	rsb	fp, ip, #32
   1c9c8:	orr	r9, r9, r2, lsl sl
   1c9cc:	orr	r9, r9, r2, lsr fp
   1c9d0:	lsl	r8, r2, ip
   1c9d4:	cmp	r5, r9
   1c9d8:	cmpeq	r4, r8
   1c9dc:	movcc	r0, #0
   1c9e0:	movcc	r1, r0
   1c9e4:	bcc	1ca00 <__assert_fail@plt+0xb418>
   1c9e8:	mov	r0, #1
   1c9ec:	subs	r4, r4, r8
   1c9f0:	lsl	r1, r0, sl
   1c9f4:	orr	r1, r1, r0, lsr fp
   1c9f8:	lsl	r0, r0, ip
   1c9fc:	sbc	r5, r5, r9
   1ca00:	cmp	ip, #0
   1ca04:	beq	1ca90 <__assert_fail@plt+0xb4a8>
   1ca08:	lsr	r6, r8, #1
   1ca0c:	orr	r6, r6, r9, lsl #31
   1ca10:	lsr	r7, r9, #1
   1ca14:	mov	r2, ip
   1ca18:	b	1ca3c <__assert_fail@plt+0xb454>
   1ca1c:	subs	r3, r4, r6
   1ca20:	sbc	r8, r5, r7
   1ca24:	adds	r3, r3, r3
   1ca28:	adc	r8, r8, r8
   1ca2c:	adds	r4, r3, #1
   1ca30:	adc	r5, r8, #0
   1ca34:	subs	r2, r2, #1
   1ca38:	beq	1ca58 <__assert_fail@plt+0xb470>
   1ca3c:	cmp	r5, r7
   1ca40:	cmpeq	r4, r6
   1ca44:	bcs	1ca1c <__assert_fail@plt+0xb434>
   1ca48:	adds	r4, r4, r4
   1ca4c:	adc	r5, r5, r5
   1ca50:	subs	r2, r2, #1
   1ca54:	bne	1ca3c <__assert_fail@plt+0xb454>
   1ca58:	lsr	r3, r4, ip
   1ca5c:	orr	r3, r3, r5, lsl fp
   1ca60:	lsr	r2, r5, ip
   1ca64:	orr	r3, r3, r5, lsr sl
   1ca68:	adds	r0, r0, r4
   1ca6c:	mov	r4, r3
   1ca70:	lsl	r3, r2, ip
   1ca74:	orr	r3, r3, r4, lsl sl
   1ca78:	lsl	ip, r4, ip
   1ca7c:	orr	r3, r3, r4, lsr fp
   1ca80:	adc	r1, r1, r5
   1ca84:	subs	r0, r0, ip
   1ca88:	mov	r5, r2
   1ca8c:	sbc	r1, r1, r3
   1ca90:	cmp	lr, #0
   1ca94:	strdne	r4, [lr]
   1ca98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1caa0:	mov	r7, r0
   1caa4:	ldr	r6, [pc, #72]	; 1caf4 <__assert_fail@plt+0xb50c>
   1caa8:	ldr	r5, [pc, #72]	; 1caf8 <__assert_fail@plt+0xb510>
   1caac:	add	r6, pc, r6
   1cab0:	add	r5, pc, r5
   1cab4:	sub	r6, r6, r5
   1cab8:	mov	r8, r1
   1cabc:	mov	r9, r2
   1cac0:	bl	11268 <fstatfs64@plt-0x20>
   1cac4:	asrs	r6, r6, #2
   1cac8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cacc:	mov	r4, #0
   1cad0:	add	r4, r4, #1
   1cad4:	ldr	r3, [r5], #4
   1cad8:	mov	r2, r9
   1cadc:	mov	r1, r8
   1cae0:	mov	r0, r7
   1cae4:	blx	r3
   1cae8:	cmp	r6, r4
   1caec:	bne	1cad0 <__assert_fail@plt+0xb4e8>
   1caf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1caf4:	andeq	r2, r1, r8, asr r4
   1caf8:	andeq	r2, r1, r0, asr r4
   1cafc:	bx	lr
   1cb00:	ldr	r3, [pc, #12]	; 1cb14 <__assert_fail@plt+0xb52c>
   1cb04:	mov	r1, #0
   1cb08:	add	r3, pc, r3
   1cb0c:	ldr	r2, [r3]
   1cb10:	b	114bc <__cxa_atexit@plt>
   1cb14:	andeq	r2, r1, ip, lsr #12

Disassembly of section .fini:

0001cb18 <.fini>:
   1cb18:	push	{r3, lr}
   1cb1c:	pop	{r3, pc}
