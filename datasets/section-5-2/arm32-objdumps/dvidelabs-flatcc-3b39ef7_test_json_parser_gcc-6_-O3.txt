
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

00012574 <.init>:
   12574:	push	{r3, lr}
   12578:	bl	12a40 <_start@@Base+0x3c>
   1257c:	pop	{r3, pc}

Disassembly of section .plt:

00012580 <fopen@plt-0x14>:
   12580:	push	{lr}		; (str lr, [sp, #-4]!)
   12584:	ldr	lr, [pc, #4]	; 12590 <fopen@plt-0x4>
   12588:	add	lr, pc, lr
   1258c:	ldr	pc, [lr, #8]!
   12590:	andeq	lr, r2, r0, ror sl

00012594 <fopen@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #188416	; 0x2e000
   1259c:	ldr	pc, [ip, #2672]!	; 0xa70

000125a0 <free@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #188416	; 0x2e000
   125a8:	ldr	pc, [ip, #2664]!	; 0xa68

000125ac <memcpy@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #188416	; 0x2e000
   125b4:	ldr	pc, [ip, #2656]!	; 0xa60

000125b8 <ftell@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #188416	; 0x2e000
   125c0:	ldr	pc, [ip, #2648]!	; 0xa58

000125c4 <memcmp@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #188416	; 0x2e000
   125cc:	ldr	pc, [ip, #2640]!	; 0xa50

000125d0 <rewind@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #188416	; 0x2e000
   125d8:	ldr	pc, [ip, #2632]!	; 0xa48

000125dc <realloc@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #188416	; 0x2e000
   125e4:	ldr	pc, [ip, #2624]!	; 0xa40

000125e8 <fwrite@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #188416	; 0x2e000
   125f0:	ldr	pc, [ip, #2616]!	; 0xa38

000125f4 <fread@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #188416	; 0x2e000
   125fc:	ldr	pc, [ip, #2608]!	; 0xa30

00012600 <malloc@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #188416	; 0x2e000
   12608:	ldr	pc, [ip, #2600]!	; 0xa28

0001260c <__libc_start_main@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #188416	; 0x2e000
   12614:	ldr	pc, [ip, #2592]!	; 0xa20

00012618 <__gmon_start__@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #188416	; 0x2e000
   12620:	ldr	pc, [ip, #2584]!	; 0xa18

00012624 <exit@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #188416	; 0x2e000
   1262c:	ldr	pc, [ip, #2576]!	; 0xa10

00012630 <strlen@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #188416	; 0x2e000
   12638:	ldr	pc, [ip, #2568]!	; 0xa08

0001263c <fprintf@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #188416	; 0x2e000
   12644:	ldr	pc, [ip, #2560]!	; 0xa00

00012648 <posix_memalign@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #188416	; 0x2e000
   12650:	ldr	pc, [ip, #2552]!	; 0x9f8

00012654 <memset@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #188416	; 0x2e000
   1265c:	ldr	pc, [ip, #2544]!	; 0x9f0

00012660 <strtod@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #188416	; 0x2e000
   12668:	ldr	pc, [ip, #2536]!	; 0x9e8

0001266c <memchr@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #188416	; 0x2e000
   12674:	ldr	pc, [ip, #2528]!	; 0x9e0

00012678 <fclose@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #188416	; 0x2e000
   12680:	ldr	pc, [ip, #2520]!	; 0x9d8

00012684 <fputc@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #188416	; 0x2e000
   1268c:	ldr	pc, [ip, #2512]!	; 0x9d0

00012690 <fseek@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #188416	; 0x2e000
   12698:	ldr	pc, [ip, #2504]!	; 0x9c8

0001269c <abort@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #188416	; 0x2e000
   126a4:	ldr	pc, [ip, #2496]!	; 0x9c0

000126a8 <__assert_fail@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #188416	; 0x2e000
   126b0:	ldr	pc, [ip, #2488]!	; 0x9b8

Disassembly of section .text:

000126b8 <main@@Base-0x2d8>:
   126b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126bc:	sub	sp, sp, #36	; 0x24
   126c0:	mov	r6, #0
   126c4:	ldr	r8, [sp, #72]	; 0x48
   126c8:	mov	r7, #0
   126cc:	cmp	r1, r2
   126d0:	strd	r6, [r8]
   126d4:	mov	r5, r1
   126d8:	mov	r4, r2
   126dc:	mov	r9, r3
   126e0:	mov	r6, r0
   126e4:	beq	1271c <__assert_fail@plt+0x74>
   126e8:	ldrb	r3, [r1]
   126ec:	cmp	r3, #34	; 0x22
   126f0:	moveq	r3, #0
   126f4:	addeq	r5, r1, #1
   126f8:	streq	r3, [r0, #12]
   126fc:	beq	1271c <__assert_fail@plt+0x74>
   12700:	cmp	r3, #46	; 0x2e
   12704:	movne	r3, #1
   12708:	strne	r3, [r0, #12]
   1270c:	bne	1271c <__assert_fail@plt+0x74>
   12710:	mov	r3, #5
   12714:	bl	295ac <flatcc_json_parser_set_error@@Base>
   12718:	mov	r5, r0
   1271c:	ldr	r3, [r6, #12]
   12720:	cmp	r3, #0
   12724:	bne	1273c <__assert_fail@plt+0x94>
   12728:	mov	r1, r5
   1272c:	mov	r2, r4
   12730:	mov	r0, r6
   12734:	bl	12fac <_start@@Base+0x5a8>
   12738:	mov	r5, r0
   1273c:	cmp	r4, r5
   12740:	beq	12850 <__assert_fail@plt+0x1a8>
   12744:	mov	r2, #0
   12748:	mov	r3, #0
   1274c:	mov	sl, #0
   12750:	strd	r2, [sp, #8]
   12754:	mov	fp, r9
   12758:	add	r3, sp, #20
   1275c:	str	r3, [sp, #4]
   12760:	add	r3, sp, #24
   12764:	str	r3, [sp]
   12768:	ldr	r7, [fp]
   1276c:	add	r3, sp, #16
   12770:	mov	r2, r4
   12774:	mov	r1, r5
   12778:	mov	r0, r6
   1277c:	blx	r7
   12780:	cmp	r4, r0
   12784:	beq	12850 <__assert_fail@plt+0x1a8>
   12788:	cmp	r5, r0
   1278c:	bne	127b8 <__assert_fail@plt+0x110>
   12790:	ldr	r3, [fp, #4]!
   12794:	cmp	r3, #0
   12798:	bne	12758 <__assert_fail@plt+0xb0>
   1279c:	mov	r2, r4
   127a0:	mov	r1, r5
   127a4:	mov	r0, r6
   127a8:	mov	r3, #23
   127ac:	bl	295ac <flatcc_json_parser_set_error@@Base>
   127b0:	mov	r4, r0
   127b4:	b	12850 <__assert_fail@plt+0x1a8>
   127b8:	cmp	sl, #0
   127bc:	mov	r7, r0
   127c0:	beq	127ec <__assert_fail@plt+0x144>
   127c4:	ldr	r3, [r6, #12]
   127c8:	cmp	r3, #0
   127cc:	beq	127ec <__assert_fail@plt+0x144>
   127d0:	mov	r2, r4
   127d4:	mov	r1, r7
   127d8:	mov	r0, r6
   127dc:	mov	r3, #14
   127e0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   127e4:	mov	r4, r0
   127e8:	b	12850 <__assert_fail@plt+0x1a8>
   127ec:	ldr	r3, [sp, #16]
   127f0:	cmp	r3, #0
   127f4:	ldrdeq	r2, [sp, #24]
   127f8:	strdeq	r2, [sp, #8]
   127fc:	beq	1281c <__assert_fail@plt+0x174>
   12800:	mov	r3, #8
   12804:	mov	r2, r4
   12808:	mov	r1, r7
   1280c:	mov	r0, r6
   12810:	bl	295ac <flatcc_json_parser_set_error@@Base>
   12814:	cmp	r4, r0
   12818:	beq	12850 <__assert_fail@plt+0x1a8>
   1281c:	ldrd	r2, [r8]
   12820:	ldrd	r0, [sp, #8]
   12824:	ldr	ip, [sp, #20]
   12828:	add	sl, sl, #1
   1282c:	adds	r0, r0, r2
   12830:	adc	r1, r1, r3
   12834:	mov	r2, r0
   12838:	mov	r3, r1
   1283c:	cmp	ip, #0
   12840:	strd	r2, [r8]
   12844:	movne	r5, r7
   12848:	bne	12754 <__assert_fail@plt+0xac>
   1284c:	mov	r4, r7
   12850:	mov	r0, r4
   12854:	add	sp, sp, #36	; 0x24
   12858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1285c:	push	{r4, lr}
   12860:	mov	r2, #308	; 0x134
   12864:	ldr	r3, [pc, #8]	; 12874 <__assert_fail@plt+0x1cc>
   12868:	ldr	r1, [pc, #8]	; 12878 <__assert_fail@plt+0x1d0>
   1286c:	ldr	r0, [pc, #8]	; 1287c <__assert_fail@plt+0x1d4>
   12870:	bl	126a8 <__assert_fail@plt>
   12874:	muleq	r2, r8, fp
   12878:	andeq	pc, r2, r8, ror #5
   1287c:	andeq	pc, r2, r8, lsr #7
   12880:	push	{r4, lr}
   12884:	ldr	r3, [pc, #12]	; 12898 <__assert_fail@plt+0x1f0>
   12888:	ldr	r2, [pc, #12]	; 1289c <__assert_fail@plt+0x1f4>
   1288c:	ldr	r1, [pc, #12]	; 128a0 <__assert_fail@plt+0x1f8>
   12890:	ldr	r0, [pc, #12]	; 128a4 <__assert_fail@plt+0x1fc>
   12894:	bl	126a8 <__assert_fail@plt>
   12898:	andeq	lr, r2, r8, lsr #23
   1289c:	andeq	r0, r0, r1, lsr #5
   128a0:	andeq	pc, r2, r8, ror #5
   128a4:	andeq	pc, r2, r8, lsr #7
   128a8:	push	{r4, lr}
   128ac:	ldr	r3, [pc, #12]	; 128c0 <__assert_fail@plt+0x218>
   128b0:	ldr	r2, [pc, #12]	; 128c4 <__assert_fail@plt+0x21c>
   128b4:	ldr	r1, [pc, #12]	; 128c8 <__assert_fail@plt+0x220>
   128b8:	ldr	r0, [pc, #12]	; 128cc <__assert_fail@plt+0x224>
   128bc:	bl	126a8 <__assert_fail@plt>
   128c0:			; <UNDEFINED> instruction: 0x0002ebb4
   128c4:	andeq	r0, r0, r7, lsl #5
   128c8:	andeq	pc, r2, r8, ror #5
   128cc:	andeq	pc, r2, r8, lsr #7
   128d0:	push	{r4, lr}
   128d4:	mov	r2, #892	; 0x37c
   128d8:	ldr	r3, [pc, #8]	; 128e8 <__assert_fail@plt+0x240>
   128dc:	ldr	r1, [pc, #8]	; 128ec <__assert_fail@plt+0x244>
   128e0:	ldr	r0, [pc, #8]	; 128f0 <__assert_fail@plt+0x248>
   128e4:	bl	126a8 <__assert_fail@plt>
   128e8:	andeq	lr, r2, r0, asr #23
   128ec:	andeq	pc, r2, r8, ror #5
   128f0:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   128f4:	push	{r4, lr}
   128f8:	ldr	r3, [pc, #12]	; 1290c <__assert_fail@plt+0x264>
   128fc:	ldr	r2, [pc, #12]	; 12910 <__assert_fail@plt+0x268>
   12900:	ldr	r1, [pc, #12]	; 12914 <__assert_fail@plt+0x26c>
   12904:	ldr	r0, [pc, #12]	; 12918 <__assert_fail@plt+0x270>
   12908:	bl	126a8 <__assert_fail@plt>
   1290c:	ldrdeq	lr, [r2], -r4
   12910:	andeq	r0, r0, lr, lsl r2
   12914:	andeq	pc, r2, r8, ror #5
   12918:	andeq	pc, r2, ip, asr #6
   1291c:	push	{r4, lr}
   12920:	ldr	r3, [pc, #12]	; 12934 <__assert_fail@plt+0x28c>
   12924:	ldr	r2, [pc, #12]	; 12938 <__assert_fail@plt+0x290>
   12928:	ldr	r1, [pc, #12]	; 1293c <__assert_fail@plt+0x294>
   1292c:	ldr	r0, [pc, #12]	; 12940 <__assert_fail@plt+0x298>
   12930:	bl	126a8 <__assert_fail@plt>
   12934:	strdeq	lr, [r2], -r4
   12938:	andeq	r0, r0, r6, asr #7
   1293c:	andeq	pc, r2, r8, ror #5
   12940:	andeq	pc, r2, r8, ror #6
   12944:	push	{r4, lr}
   12948:	ldr	r3, [pc, #12]	; 1295c <__assert_fail@plt+0x2b4>
   1294c:	ldr	r2, [pc, #12]	; 12960 <__assert_fail@plt+0x2b8>
   12950:	ldr	r1, [pc, #12]	; 12964 <__assert_fail@plt+0x2bc>
   12954:	ldr	r0, [pc, #12]	; 12968 <__assert_fail@plt+0x2c0>
   12958:	bl	126a8 <__assert_fail@plt>
   1295c:	andeq	lr, r2, r4, lsl ip
   12960:	andeq	r0, r0, r6, lsl #15
   12964:	andeq	pc, r2, r8, ror #5
   12968:	muleq	r2, r4, r3
   1296c:	push	{r4, lr}
   12970:	mov	r2, #260	; 0x104
   12974:	ldr	r3, [pc, #8]	; 12984 <__assert_fail@plt+0x2dc>
   12978:	ldr	r1, [pc, #8]	; 12988 <__assert_fail@plt+0x2e0>
   1297c:	ldr	r0, [pc, #8]	; 1298c <__assert_fail@plt+0x2e4>
   12980:	bl	126a8 <__assert_fail@plt>
   12984:	strdeq	pc, [r2], -r8
   12988:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   1298c:	andeq	pc, r2, r8, ror #31

00012990 <main@@Base>:
   12990:	push	{r4, r5, r6, lr}
   12994:	mov	r2, #16
   12998:	ldr	r5, [pc, #84]	; 129f4 <main@@Base+0x64>
   1299c:	mov	r4, r0
   129a0:	mov	r6, r1
   129a4:	ldr	r3, [r5]
   129a8:	mov	r1, #1
   129ac:	ldr	r0, [pc, #68]	; 129f8 <main@@Base+0x68>
   129b0:	bl	125e8 <fwrite@plt>
   129b4:	sub	r3, r4, #1
   129b8:	cmp	r3, #1
   129bc:	bhi	129d8 <main@@Base+0x48>
   129c0:	cmp	r4, #2
   129c4:	ldreq	r3, [pc, #48]	; 129fc <main@@Base+0x6c>
   129c8:	ldreq	r2, [r6, #4]
   129cc:	pop	{r4, r5, r6, lr}
   129d0:	streq	r2, [r3, #716]	; 0x2cc
   129d4:	b	214b0 <test_parse@@Base>
   129d8:	ldr	r3, [r5]
   129dc:	mov	r2, #63	; 0x3f
   129e0:	mov	r1, #1
   129e4:	ldr	r0, [pc, #20]	; 12a00 <main@@Base+0x70>
   129e8:	bl	125e8 <fwrite@plt>
   129ec:	mov	r0, #1
   129f0:	bl	12624 <exit@plt>
   129f4:			; <UNDEFINED> instruction: 0x000413b8
   129f8:	andeq	lr, r2, ip, lsr #22
   129fc:	andeq	r1, r4, r8, ror r0
   12a00:	andeq	lr, r2, r0, asr #22

00012a04 <_start@@Base>:
   12a04:	mov	fp, #0
   12a08:	mov	lr, #0
   12a0c:	pop	{r1}		; (ldr r1, [sp], #4)
   12a10:	mov	r2, sp
   12a14:	push	{r2}		; (str r2, [sp, #-4]!)
   12a18:	push	{r0}		; (str r0, [sp, #-4]!)
   12a1c:	ldr	ip, [pc, #16]	; 12a34 <_start@@Base+0x30>
   12a20:	push	{ip}		; (str ip, [sp, #-4]!)
   12a24:	ldr	r0, [pc, #12]	; 12a38 <_start@@Base+0x34>
   12a28:	ldr	r3, [pc, #12]	; 12a3c <_start@@Base+0x38>
   12a2c:	bl	1260c <__libc_start_main@plt>
   12a30:	bl	1269c <abort@plt>
   12a34:	strdeq	lr, [r2], -r4
   12a38:	muleq	r1, r0, r9
   12a3c:	muleq	r2, r4, r8
   12a40:	ldr	r3, [pc, #20]	; 12a5c <_start@@Base+0x58>
   12a44:	ldr	r2, [pc, #20]	; 12a60 <_start@@Base+0x5c>
   12a48:	add	r3, pc, r3
   12a4c:	ldr	r2, [r3, r2]
   12a50:	cmp	r2, #0
   12a54:	bxeq	lr
   12a58:	b	12618 <__gmon_start__@plt>
   12a5c:			; <UNDEFINED> instruction: 0x0002e5b0
   12a60:	andeq	r0, r0, ip, rrx
   12a64:	ldr	r3, [pc, #28]	; 12a88 <_start@@Base+0x84>
   12a68:	ldr	r0, [pc, #28]	; 12a8c <_start@@Base+0x88>
   12a6c:	sub	r3, r3, r0
   12a70:	cmp	r3, #6
   12a74:	bxls	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0x8c>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:			; <UNDEFINED> instruction: 0x000413bb
   12a8c:			; <UNDEFINED> instruction: 0x000413b8
   12a90:	andeq	r0, r0, r0
   12a94:	ldr	r1, [pc, #36]	; 12ac0 <_start@@Base+0xbc>
   12a98:	ldr	r0, [pc, #36]	; 12ac4 <_start@@Base+0xc0>
   12a9c:	sub	r1, r1, r0
   12aa0:	asr	r1, r1, #2
   12aa4:	add	r1, r1, r1, lsr #31
   12aa8:	asrs	r1, r1, #1
   12aac:	bxeq	lr
   12ab0:	ldr	r3, [pc, #16]	; 12ac8 <_start@@Base+0xc4>
   12ab4:	cmp	r3, #0
   12ab8:	bxeq	lr
   12abc:	bx	r3
   12ac0:			; <UNDEFINED> instruction: 0x000413b8
   12ac4:			; <UNDEFINED> instruction: 0x000413b8
   12ac8:	andeq	r0, r0, r0
   12acc:	push	{r4, lr}
   12ad0:	ldr	r4, [pc, #24]	; 12af0 <_start@@Base+0xec>
   12ad4:	ldrb	r3, [r4]
   12ad8:	cmp	r3, #0
   12adc:	popne	{r4, pc}
   12ae0:	bl	12a64 <_start@@Base+0x60>
   12ae4:	mov	r3, #1
   12ae8:	strb	r3, [r4]
   12aec:	pop	{r4, pc}
   12af0:	andeq	r1, r4, r0, asr #7
   12af4:	ldr	r0, [pc, #40]	; 12b24 <_start@@Base+0x120>
   12af8:	ldr	r3, [r0]
   12afc:	cmp	r3, #0
   12b00:	bne	12b08 <_start@@Base+0x104>
   12b04:	b	12a94 <_start@@Base+0x90>
   12b08:	ldr	r3, [pc, #24]	; 12b28 <_start@@Base+0x124>
   12b0c:	cmp	r3, #0
   12b10:	beq	12b04 <_start@@Base+0x100>
   12b14:	push	{r4, lr}
   12b18:	blx	r3
   12b1c:	pop	{r4, lr}
   12b20:	b	12a94 <_start@@Base+0x90>
   12b24:	andeq	r0, r4, r4, lsl pc
	...
   12b30:	sub	r1, r1, r0
   12b34:	cmp	r1, #8
   12b38:	push	{r4, r5, r6, r7}
   12b3c:	bls	12bd8 <_start@@Base+0x1d4>
   12b40:	ldrb	r4, [r0, #7]
   12b44:	mov	r5, #0
   12b48:	ldrb	r6, [r0, #6]
   12b4c:	lsr	r3, r6, #24
   12b50:	lsl	r2, r6, #8
   12b54:	orr	r4, r4, r2
   12b58:	orr	r5, r5, r3
   12b5c:	ldrb	r6, [r0, #5]
   12b60:	lsr	r3, r6, #16
   12b64:	lsl	r2, r6, #16
   12b68:	orr	r4, r4, r2
   12b6c:	orr	r5, r5, r3
   12b70:	ldrb	r6, [r0, #4]
   12b74:	lsr	r3, r6, #8
   12b78:	lsl	r2, r6, #24
   12b7c:	orr	r4, r4, r2
   12b80:	orr	r5, r5, r3
   12b84:	ldrb	r3, [r0, #3]
   12b88:	mov	r2, #0
   12b8c:	orr	r4, r4, r2
   12b90:	orr	r5, r5, r3
   12b94:	ldrb	r6, [r0, #2]
   12b98:	mov	r2, #0
   12b9c:	orr	r4, r4, r2
   12ba0:	lsl	r3, r6, #8
   12ba4:	orr	r5, r5, r3
   12ba8:	ldrb	r6, [r0, #1]
   12bac:	mov	r2, #0
   12bb0:	orr	r2, r2, r4
   12bb4:	lsl	r3, r6, #16
   12bb8:	orr	r3, r3, r5
   12bbc:	ldrb	r4, [r0]
   12bc0:	mov	r0, #0
   12bc4:	orr	r0, r0, r2
   12bc8:	lsl	r1, r4, #24
   12bcc:	orr	r1, r1, r3
   12bd0:	pop	{r4, r5, r6, r7}
   12bd4:	bx	lr
   12bd8:	sub	r1, r1, #1
   12bdc:	cmp	r1, #7
   12be0:	ldrls	pc, [pc, r1, lsl #2]
   12be4:	b	12c5c <_start@@Base+0x258>
   12be8:	andeq	r2, r1, r4, lsl ip
   12bec:	andeq	r2, r1, r0, lsr #24
   12bf0:	andeq	r2, r1, ip, lsr #24
   12bf4:	andeq	r2, r1, r8, lsr ip
   12bf8:	andeq	r2, r1, r4, asr #24
   12bfc:	andeq	r2, r1, r0, asr ip
   12c00:	andeq	r2, r1, r8, lsl #24
   12c04:	andeq	r2, r1, r0, asr #22
   12c08:	mov	r4, #0
   12c0c:	mov	r5, #0
   12c10:	b	12b48 <_start@@Base+0x144>
   12c14:	mov	r2, #0
   12c18:	mov	r3, #0
   12c1c:	b	12bbc <_start@@Base+0x1b8>
   12c20:	mov	r4, #0
   12c24:	mov	r5, #0
   12c28:	b	12ba8 <_start@@Base+0x1a4>
   12c2c:	mov	r4, #0
   12c30:	mov	r5, #0
   12c34:	b	12b94 <_start@@Base+0x190>
   12c38:	mov	r4, #0
   12c3c:	mov	r5, #0
   12c40:	b	12b84 <_start@@Base+0x180>
   12c44:	mov	r4, #0
   12c48:	mov	r5, #0
   12c4c:	b	12b70 <_start@@Base+0x16c>
   12c50:	mov	r4, #0
   12c54:	mov	r5, #0
   12c58:	b	12b5c <_start@@Base+0x158>
   12c5c:	mov	r0, #0
   12c60:	mov	r1, #0
   12c64:	b	12bd0 <_start@@Base+0x1cc>
   12c68:	cmp	r0, #4
   12c6c:	movhi	r0, #0
   12c70:	movls	r0, #1
   12c74:	bx	lr
   12c78:	cmp	r0, #11
   12c7c:	bhi	12ca0 <_start@@Base+0x29c>
   12c80:	cmp	r0, #8
   12c84:	bcs	12ca8 <_start@@Base+0x2a4>
   12c88:	cmp	r0, #0
   12c8c:	beq	12ca8 <_start@@Base+0x2a4>
   12c90:	cmp	r0, #2
   12c94:	beq	12ca8 <_start@@Base+0x2a4>
   12c98:	mov	r0, #0
   12c9c:	bx	lr
   12ca0:	cmp	r0, #255	; 0xff
   12ca4:	bne	12c98 <_start@@Base+0x294>
   12ca8:	mov	r0, #1
   12cac:	bx	lr
   12cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb4:	mov	r4, r1
   12cb8:	sub	sp, sp, #12
   12cbc:	mov	r1, r2
   12cc0:	mov	r5, r0
   12cc4:	mov	r0, r4
   12cc8:	mov	sl, r2
   12ccc:	mov	fp, r3
   12cd0:	bl	12b30 <_start@@Base+0x12c>
   12cd4:	add	r3, pc, #628	; 0x274
   12cd8:	ldrd	r2, [r3]
   12cdc:	cmp	r1, r3
   12ce0:	cmpeq	r0, r2
   12ce4:	bhi	12d58 <_start@@Base+0x354>
   12ce8:	add	r3, pc, #616	; 0x268
   12cec:	ldrd	r2, [r3]
   12cf0:	cmp	r1, r3
   12cf4:	cmpeq	r0, r2
   12cf8:	bls	12e20 <_start@@Base+0x41c>
   12cfc:	add	r7, pc, #604	; 0x25c
   12d00:	ldrd	r6, [r7]
   12d04:	and	r8, r0, #-16777216	; 0xff000000
   12d08:	cmp	r1, r7
   12d0c:	cmpeq	r8, r6
   12d10:	beq	12ef4 <_start@@Base+0x4f0>
   12d14:	add	r3, pc, #588	; 0x24c
   12d18:	ldrd	r2, [r3]
   12d1c:	bic	r0, r0, #255	; 0xff
   12d20:	cmp	r1, r3
   12d24:	cmpeq	r0, r2
   12d28:	bne	12d84 <_start@@Base+0x380>
   12d2c:	ldr	r3, [sp, #52]	; 0x34
   12d30:	mov	r2, sl
   12d34:	str	r3, [sp]
   12d38:	mov	r0, r5
   12d3c:	mov	r3, #7
   12d40:	mov	r1, r4
   12d44:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   12d48:	cmp	r4, r0
   12d4c:	movne	r6, #10
   12d50:	bne	12e60 <_start@@Base+0x45c>
   12d54:	b	12d84 <_start@@Base+0x380>
   12d58:	add	r3, pc, #528	; 0x210
   12d5c:	ldrd	r2, [r3]
   12d60:	cmp	r1, r3
   12d64:	cmpeq	r0, r2
   12d68:	bhi	12d90 <_start@@Base+0x38c>
   12d6c:	add	r3, pc, #516	; 0x204
   12d70:	ldrd	r2, [r3]
   12d74:	mov	r0, #0
   12d78:	cmp	r1, r3
   12d7c:	cmpeq	r0, r2
   12d80:	beq	12ec8 <_start@@Base+0x4c4>
   12d84:	mov	r0, r4
   12d88:	add	sp, sp, #12
   12d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d90:	add	r3, pc, #488	; 0x1e8
   12d94:	ldrd	r2, [r3]
   12d98:	cmp	r1, r3
   12d9c:	cmpeq	r0, r2
   12da0:	bls	12e84 <_start@@Base+0x480>
   12da4:	add	r7, pc, #476	; 0x1dc
   12da8:	ldrd	r6, [r7]
   12dac:	ldr	r2, [pc, #500]	; 12fa8 <_start@@Base+0x5a4>
   12db0:	mvn	r3, #0
   12db4:	and	r3, r3, r1
   12db8:	and	r2, r2, r0
   12dbc:	cmp	r3, r7
   12dc0:	cmpeq	r2, r6
   12dc4:	beq	12f20 <_start@@Base+0x51c>
   12dc8:	add	r3, pc, #448	; 0x1c0
   12dcc:	ldrd	r2, [r3]
   12dd0:	cmp	r1, r3
   12dd4:	cmpeq	r0, r2
   12dd8:	bne	12d84 <_start@@Base+0x380>
   12ddc:	ldr	r3, [sp, #52]	; 0x34
   12de0:	mov	r2, sl
   12de4:	str	r3, [sp]
   12de8:	mov	r0, r5
   12dec:	mov	r3, #8
   12df0:	mov	r1, r4
   12df4:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   12df8:	cmp	r4, r0
   12dfc:	beq	12d84 <_start@@Base+0x380>
   12e00:	ldr	r2, [sp, #48]	; 0x30
   12e04:	mov	r4, r0
   12e08:	mov	r1, #0
   12e0c:	mov	r0, #8
   12e10:	mov	r3, #0
   12e14:	strd	r0, [r2]
   12e18:	str	r3, [fp]
   12e1c:	b	12d84 <_start@@Base+0x380>
   12e20:	add	r3, pc, #368	; 0x170
   12e24:	ldrd	r2, [r3]
   12e28:	and	r0, r0, #-16777216	; 0xff000000
   12e2c:	cmp	r1, r3
   12e30:	cmpeq	r0, r2
   12e34:	bne	12d84 <_start@@Base+0x380>
   12e38:	ldr	r3, [sp, #52]	; 0x34
   12e3c:	mov	r2, sl
   12e40:	str	r3, [sp]
   12e44:	mov	r0, r5
   12e48:	mov	r3, #5
   12e4c:	mov	r1, r4
   12e50:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   12e54:	cmp	r4, r0
   12e58:	movne	r6, #9
   12e5c:	beq	12d84 <_start@@Base+0x380>
   12e60:	ldr	r2, [sp, #48]	; 0x30
   12e64:	mov	r7, #0
   12e68:	mov	r3, #0
   12e6c:	mov	r4, r0
   12e70:	strd	r6, [r2]
   12e74:	mov	r0, r4
   12e78:	str	r3, [fp]
   12e7c:	add	sp, sp, #12
   12e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e84:	add	r3, pc, #276	; 0x114
   12e88:	ldrd	r2, [r3]
   12e8c:	and	r0, r0, #-16777216	; 0xff000000
   12e90:	cmp	r1, r3
   12e94:	cmpeq	r0, r2
   12e98:	bne	12d84 <_start@@Base+0x380>
   12e9c:	ldr	r3, [sp, #52]	; 0x34
   12ea0:	mov	r2, sl
   12ea4:	str	r3, [sp]
   12ea8:	mov	r0, r5
   12eac:	mov	r3, #5
   12eb0:	mov	r1, r4
   12eb4:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   12eb8:	cmp	r4, r0
   12ebc:	beq	12d84 <_start@@Base+0x380>
   12ec0:	mov	r6, #11
   12ec4:	b	12e60 <_start@@Base+0x45c>
   12ec8:	ldr	r3, [sp, #52]	; 0x34
   12ecc:	mov	r2, sl
   12ed0:	str	r3, [sp]
   12ed4:	mov	r0, r5
   12ed8:	mov	r3, #4
   12edc:	mov	r1, r4
   12ee0:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   12ee4:	cmp	r4, r0
   12ee8:	movne	r6, #0
   12eec:	bne	12e60 <_start@@Base+0x45c>
   12ef0:	b	12d84 <_start@@Base+0x380>
   12ef4:	ldr	r3, [sp, #52]	; 0x34
   12ef8:	mov	r2, sl
   12efc:	str	r3, [sp]
   12f00:	mov	r0, r5
   12f04:	mov	r3, #5
   12f08:	mov	r1, r4
   12f0c:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   12f10:	cmp	r4, r0
   12f14:	movne	r6, #2
   12f18:	bne	12e60 <_start@@Base+0x45c>
   12f1c:	b	12d84 <_start@@Base+0x380>
   12f20:	ldr	r3, [sp, #52]	; 0x34
   12f24:	mov	r2, sl
   12f28:	str	r3, [sp]
   12f2c:	mov	r0, r5
   12f30:	mov	r3, #6
   12f34:	mov	r1, r4
   12f38:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   12f3c:	cmp	r4, r0
   12f40:	movne	r6, #255	; 0xff
   12f44:	bne	12e60 <_start@@Base+0x45c>
   12f48:	b	12d84 <_start@@Base+0x380>
   12f4c:	nop			; (mov r0, r0)
   12f50:			; <UNDEFINED> instruction: 0xffffffff
   12f54:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12f58:			; <UNDEFINED> instruction: 0x46616dff
   12f5c:	rsbmi	r6, pc, #428	; 0x1ac
   12f60:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12f64:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12f68:	strbtmi	r6, [r1], -r0, lsl #28
   12f6c:	rsbmi	r6, pc, #428	; 0x1ac
   12f70:	ldrshvc	pc, [pc, #255]	; 13077 <_start@@Base+0x673>	; <UNPREDICTABLE>
   12f74:	svcmi	0x00746865
   12f78:	andeq	r0, r0, r0
   12f7c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12f80:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12f84:	rsbpl	r7, r1, #117	; 0x75
   12f88:	strbvs	r0, [r4, #-0]!
   12f8c:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12f90:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12f94:	rsbpl	r7, r1, #117	; 0x75
   12f98:	strvs	r0, [r0, #-0]
   12f9c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12fa0:	andvc	r0, r0, #0
   12fa4:	svcmi	0x00746865
   12fa8:			; <UNDEFINED> instruction: 0xffff0000
   12fac:	sub	r3, r2, r1
   12fb0:	cmp	r3, #1
   12fb4:	ble	12fc8 <_start@@Base+0x5c4>
   12fb8:	ldrb	r3, [r1]
   12fbc:	cmp	r3, #32
   12fc0:	bhi	12fcc <_start@@Base+0x5c8>
   12fc4:	beq	12fd4 <_start@@Base+0x5d0>
   12fc8:	b	296ac <flatcc_json_parser_space_ext@@Base>
   12fcc:	mov	r0, r1
   12fd0:	bx	lr
   12fd4:	ldrb	r3, [r1, #1]
   12fd8:	cmp	r3, #32
   12fdc:	bls	12fc8 <_start@@Base+0x5c4>
   12fe0:	add	r0, r1, #1
   12fe4:	bx	lr
   12fe8:	push	{r4, r5, r6, r7, lr}
   12fec:	mov	r6, #0
   12ff0:	sub	sp, sp, #28
   12ff4:	mov	r7, #0
   12ff8:	mov	lr, #0
   12ffc:	cmp	r1, r2
   13000:	strb	lr, [r3]
   13004:	str	lr, [sp, #12]
   13008:	strd	r6, [sp, #16]
   1300c:	moveq	r0, r1
   13010:	beq	1305c <_start@@Base+0x658>
   13014:	mov	r5, r3
   13018:	add	r3, sp, #16
   1301c:	str	r3, [sp]
   13020:	add	r3, sp, #12
   13024:	mov	r4, r1
   13028:	mov	r7, r0
   1302c:	mov	r6, r2
   13030:	bl	2c350 <flatcc_json_parser_integer@@Base>
   13034:	cmp	r4, r0
   13038:	beq	1305c <_start@@Base+0x658>
   1303c:	ldr	r3, [sp, #12]
   13040:	cmp	r3, #0
   13044:	bne	13064 <_start@@Base+0x660>
   13048:	ldrd	r2, [sp, #16]
   1304c:	cmp	r3, #0
   13050:	cmpeq	r2, #255	; 0xff
   13054:	strbls	r2, [r5]
   13058:	bhi	13080 <_start@@Base+0x67c>
   1305c:	add	sp, sp, #28
   13060:	pop	{r4, r5, r6, r7, pc}
   13064:	mov	r1, r0
   13068:	mov	r2, r6
   1306c:	mov	r0, r7
   13070:	mov	r3, #8
   13074:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13078:	add	sp, sp, #28
   1307c:	pop	{r4, r5, r6, r7, pc}
   13080:	mov	r1, r0
   13084:	mov	r2, r6
   13088:	mov	r0, r7
   1308c:	mov	r3, #7
   13090:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13094:	add	sp, sp, #28
   13098:	pop	{r4, r5, r6, r7, pc}
   1309c:	push	{r4, r5, r6, r7, r8, r9, lr}
   130a0:	mov	r6, #0
   130a4:	sub	sp, sp, #28
   130a8:	mov	r7, #0
   130ac:	mov	lr, #0
   130b0:	cmp	r1, r2
   130b4:	str	lr, [r3]
   130b8:	str	lr, [sp, #12]
   130bc:	strd	r6, [sp, #16]
   130c0:	moveq	r0, r1
   130c4:	beq	13118 <_start@@Base+0x714>
   130c8:	mov	r5, r3
   130cc:	add	r3, sp, #16
   130d0:	str	r3, [sp]
   130d4:	add	r3, sp, #12
   130d8:	mov	r4, r1
   130dc:	mov	r7, r0
   130e0:	mov	r6, r2
   130e4:	bl	2c350 <flatcc_json_parser_integer@@Base>
   130e8:	cmp	r4, r0
   130ec:	beq	13118 <_start@@Base+0x714>
   130f0:	ldr	r3, [sp, #12]
   130f4:	cmp	r3, #0
   130f8:	bne	13120 <_start@@Base+0x71c>
   130fc:	ldrd	r2, [sp, #16]
   13100:	mov	r9, #0
   13104:	mvn	r8, #0
   13108:	cmp	r3, r9
   1310c:	cmpeq	r2, r8
   13110:	strls	r2, [r5]
   13114:	bhi	1313c <_start@@Base+0x738>
   13118:	add	sp, sp, #28
   1311c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13120:	mov	r1, r0
   13124:	mov	r2, r6
   13128:	mov	r0, r7
   1312c:	mov	r3, #8
   13130:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13134:	add	sp, sp, #28
   13138:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1313c:	mov	r1, r0
   13140:	mov	r2, r6
   13144:	mov	r0, r7
   13148:	mov	r3, #7
   1314c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13150:	add	sp, sp, #28
   13154:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13158:	push	{r4, r5, r6, r7, r8, r9, lr}
   1315c:	mov	r6, #0
   13160:	sub	sp, sp, #28
   13164:	mov	r7, #0
   13168:	mov	lr, #0
   1316c:	cmp	r1, r2
   13170:	str	lr, [r3]
   13174:	str	lr, [sp, #12]
   13178:	strd	r6, [sp, #16]
   1317c:	moveq	r0, r1
   13180:	beq	131d0 <_start@@Base+0x7cc>
   13184:	mov	r5, r3
   13188:	add	r3, sp, #16
   1318c:	str	r3, [sp]
   13190:	add	r3, sp, #12
   13194:	mov	r4, r1
   13198:	mov	r7, r0
   1319c:	mov	r6, r2
   131a0:	bl	2c350 <flatcc_json_parser_integer@@Base>
   131a4:	cmp	r4, r0
   131a8:	beq	131d0 <_start@@Base+0x7cc>
   131ac:	ldr	r1, [sp, #12]
   131b0:	ldrd	r2, [sp, #16]
   131b4:	cmp	r1, #0
   131b8:	beq	131d8 <_start@@Base+0x7d4>
   131bc:	cmp	r3, #0
   131c0:	cmpeq	r2, #-2147483648	; 0x80000000
   131c4:	rsbls	r2, r2, #0
   131c8:	strls	r2, [r5]
   131cc:	bhi	13208 <_start@@Base+0x804>
   131d0:	add	sp, sp, #28
   131d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   131d8:	mov	r9, #0
   131dc:	cmp	r3, r9
   131e0:	mvn	r8, #-2147483648	; 0x80000000
   131e4:	cmpeq	r2, r8
   131e8:	strls	r2, [r5]
   131ec:	bls	131d0 <_start@@Base+0x7cc>
   131f0:	mov	r1, r0
   131f4:	mov	r2, r6
   131f8:	mov	r0, r7
   131fc:	mov	r3, #7
   13200:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13204:	b	131d0 <_start@@Base+0x7cc>
   13208:	mov	r1, r0
   1320c:	mov	r2, r6
   13210:	mov	r0, r7
   13214:	mov	r3, #8
   13218:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1321c:	b	131d0 <_start@@Base+0x7cc>
   13220:	push	{r4, r5, r6, r7, r8, r9, lr}
   13224:	mov	r6, #0
   13228:	sub	sp, sp, #28
   1322c:	mov	r7, #0
   13230:	mov	lr, #0
   13234:	cmp	r1, r2
   13238:	strh	lr, [r3]
   1323c:	str	lr, [sp, #12]
   13240:	strd	r6, [sp, #16]
   13244:	moveq	r0, r1
   13248:	beq	13298 <_start@@Base+0x894>
   1324c:	mov	r5, r3
   13250:	add	r3, sp, #16
   13254:	str	r3, [sp]
   13258:	add	r3, sp, #12
   1325c:	mov	r4, r1
   13260:	mov	r7, r0
   13264:	mov	r6, r2
   13268:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1326c:	cmp	r4, r0
   13270:	beq	13298 <_start@@Base+0x894>
   13274:	ldr	r1, [sp, #12]
   13278:	ldrd	r2, [sp, #16]
   1327c:	cmp	r1, #0
   13280:	beq	132a0 <_start@@Base+0x89c>
   13284:	cmp	r3, #0
   13288:	cmpeq	r2, #32768	; 0x8000
   1328c:	rsbls	r2, r2, #0
   13290:	strhls	r2, [r5]
   13294:	bhi	132d0 <_start@@Base+0x8cc>
   13298:	add	sp, sp, #28
   1329c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   132a0:	ldr	r8, [pc, #64]	; 132e8 <_start@@Base+0x8e4>
   132a4:	mov	r9, #0
   132a8:	cmp	r3, r9
   132ac:	cmpeq	r2, r8
   132b0:	strhls	r2, [r5]
   132b4:	bls	13298 <_start@@Base+0x894>
   132b8:	mov	r1, r0
   132bc:	mov	r2, r6
   132c0:	mov	r0, r7
   132c4:	mov	r3, #7
   132c8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   132cc:	b	13298 <_start@@Base+0x894>
   132d0:	mov	r1, r0
   132d4:	mov	r2, r6
   132d8:	mov	r0, r7
   132dc:	mov	r3, #8
   132e0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   132e4:	b	13298 <_start@@Base+0x894>
   132e8:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   132ec:	push	{r4, r5, r6, r7, lr}
   132f0:	mov	r4, #0
   132f4:	sub	sp, sp, #28
   132f8:	mov	r5, #0
   132fc:	cmp	r1, r2
   13300:	strd	r4, [r3]
   13304:	strd	r4, [sp, #16]
   13308:	str	r4, [sp, #12]
   1330c:	moveq	r0, r1
   13310:	beq	13364 <_start@@Base+0x960>
   13314:	mov	r5, r3
   13318:	add	r3, sp, #16
   1331c:	str	r3, [sp]
   13320:	add	r3, sp, #12
   13324:	mov	r4, r1
   13328:	mov	r6, r2
   1332c:	mov	r7, r0
   13330:	bl	2c350 <flatcc_json_parser_integer@@Base>
   13334:	cmp	r4, r0
   13338:	beq	13364 <_start@@Base+0x960>
   1333c:	ldr	r1, [sp, #12]
   13340:	ldrd	r2, [sp, #16]
   13344:	cmp	r1, #0
   13348:	beq	1336c <_start@@Base+0x968>
   1334c:	cmp	r3, #-2147483648	; 0x80000000
   13350:	cmpeq	r2, #0
   13354:	bhi	13384 <_start@@Base+0x980>
   13358:	rsbs	r2, r2, #0
   1335c:	rsc	r3, r3, #0
   13360:	strd	r2, [r5]
   13364:	add	sp, sp, #28
   13368:	pop	{r4, r5, r6, r7, pc}
   1336c:	cmp	r2, #0
   13370:	sbcs	r1, r3, #0
   13374:	blt	1339c <_start@@Base+0x998>
   13378:	strd	r2, [r5]
   1337c:	add	sp, sp, #28
   13380:	pop	{r4, r5, r6, r7, pc}
   13384:	mov	r1, r0
   13388:	mov	r2, r6
   1338c:	mov	r0, r7
   13390:	mov	r3, #8
   13394:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13398:	b	13364 <_start@@Base+0x960>
   1339c:	mov	r1, r0
   133a0:	mov	r2, r6
   133a4:	mov	r0, r7
   133a8:	mov	r3, #7
   133ac:	bl	295ac <flatcc_json_parser_set_error@@Base>
   133b0:	b	13364 <_start@@Base+0x960>
   133b4:	cmp	r1, r2
   133b8:	beq	133c8 <_start@@Base+0x9c4>
   133bc:	ldrb	ip, [r1]
   133c0:	cmp	ip, #123	; 0x7b
   133c4:	beq	133d8 <_start@@Base+0x9d4>
   133c8:	mov	ip, #0
   133cc:	str	ip, [r3]
   133d0:	mov	r3, #21
   133d4:	b	295ac <flatcc_json_parser_set_error@@Base>
   133d8:	push	{r4, r5, r6, lr}
   133dc:	mov	r5, r0
   133e0:	add	r0, r1, #1
   133e4:	mov	r6, r3
   133e8:	sub	r3, r2, r0
   133ec:	cmp	r3, #1
   133f0:	mov	r4, r2
   133f4:	ble	13408 <_start@@Base+0xa04>
   133f8:	ldrb	r3, [r1, #1]
   133fc:	cmp	r3, #32
   13400:	bhi	13418 <_start@@Base+0xa14>
   13404:	beq	13438 <_start@@Base+0xa34>
   13408:	mov	r1, r0
   1340c:	mov	r2, r4
   13410:	mov	r0, r5
   13414:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   13418:	cmp	r4, r0
   1341c:	beq	1342c <_start@@Base+0xa28>
   13420:	ldrb	r3, [r0]
   13424:	cmp	r3, #125	; 0x7d
   13428:	beq	1344c <_start@@Base+0xa48>
   1342c:	mov	r3, #1
   13430:	str	r3, [r6]
   13434:	pop	{r4, r5, r6, pc}
   13438:	ldrb	r3, [r1, #2]
   1343c:	cmp	r3, #32
   13440:	addhi	r0, r1, #2
   13444:	bls	13408 <_start@@Base+0xa04>
   13448:	b	13418 <_start@@Base+0xa14>
   1344c:	mov	r3, #0
   13450:	mov	r2, r4
   13454:	add	r1, r0, #1
   13458:	str	r3, [r6]
   1345c:	mov	r0, r5
   13460:	pop	{r4, r5, r6, lr}
   13464:	b	12fac <_start@@Base+0x5a8>
   13468:	cmp	r1, r2
   1346c:	beq	1347c <_start@@Base+0xa78>
   13470:	ldrb	ip, [r1]
   13474:	cmp	ip, #91	; 0x5b
   13478:	beq	1348c <_start@@Base+0xa88>
   1347c:	mov	ip, #0
   13480:	str	ip, [r3]
   13484:	mov	r3, #22
   13488:	b	295ac <flatcc_json_parser_set_error@@Base>
   1348c:	push	{r4, r5, r6, lr}
   13490:	mov	r5, r0
   13494:	add	r0, r1, #1
   13498:	mov	r6, r3
   1349c:	sub	r3, r2, r0
   134a0:	cmp	r3, #1
   134a4:	mov	r4, r2
   134a8:	ble	134bc <_start@@Base+0xab8>
   134ac:	ldrb	r3, [r1, #1]
   134b0:	cmp	r3, #32
   134b4:	bhi	134cc <_start@@Base+0xac8>
   134b8:	beq	134ec <_start@@Base+0xae8>
   134bc:	mov	r1, r0
   134c0:	mov	r2, r4
   134c4:	mov	r0, r5
   134c8:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   134cc:	cmp	r4, r0
   134d0:	beq	134e0 <_start@@Base+0xadc>
   134d4:	ldrb	r3, [r0]
   134d8:	cmp	r3, #93	; 0x5d
   134dc:	beq	13500 <_start@@Base+0xafc>
   134e0:	mov	r3, #1
   134e4:	str	r3, [r6]
   134e8:	pop	{r4, r5, r6, pc}
   134ec:	ldrb	r3, [r1, #2]
   134f0:	cmp	r3, #32
   134f4:	addhi	r0, r1, #2
   134f8:	bls	134bc <_start@@Base+0xab8>
   134fc:	b	134cc <_start@@Base+0xac8>
   13500:	mov	r3, #0
   13504:	mov	r2, r4
   13508:	add	r1, r0, #1
   1350c:	str	r3, [r6]
   13510:	mov	r0, r5
   13514:	pop	{r4, r5, r6, lr}
   13518:	b	12fac <_start@@Base+0x5a8>
   1351c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13520:	sub	sp, sp, #36	; 0x24
   13524:	mov	ip, #0
   13528:	str	r3, [sp, #12]
   1352c:	ldr	r3, [sp, #72]	; 0x48
   13530:	cmp	r1, r2
   13534:	mov	r5, r1
   13538:	mov	r6, r2
   1353c:	str	ip, [r3]
   13540:	mov	r8, r0
   13544:	beq	136c0 <_start@@Base+0xcbc>
   13548:	ldrb	r3, [r1]
   1354c:	cmp	r3, #34	; 0x22
   13550:	beq	13670 <_start@@Base+0xc6c>
   13554:	cmp	r3, #46	; 0x2e
   13558:	movne	r3, #1
   1355c:	strne	r3, [r0, #12]
   13560:	beq	136d0 <_start@@Base+0xccc>
   13564:	mov	fp, #0
   13568:	add	sl, sp, #20
   1356c:	add	r9, sp, #24
   13570:	ldr	r4, [sp, #12]
   13574:	b	1358c <_start@@Base+0xb88>
   13578:	cmp	r5, r0
   1357c:	bne	135bc <_start@@Base+0xbb8>
   13580:	ldr	r3, [r4, #4]!
   13584:	cmp	r3, #0
   13588:	beq	13618 <_start@@Base+0xc14>
   1358c:	stm	sp, {r9, sl}
   13590:	add	r3, sp, #16
   13594:	ldr	r7, [r4]
   13598:	mov	r2, r6
   1359c:	mov	r1, r5
   135a0:	mov	r0, r8
   135a4:	blx	r7
   135a8:	cmp	r6, r0
   135ac:	bne	13578 <_start@@Base+0xb74>
   135b0:	mov	r0, r6
   135b4:	add	sp, sp, #36	; 0x24
   135b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135bc:	cmp	fp, #0
   135c0:	mov	r7, r0
   135c4:	beq	135d4 <_start@@Base+0xbd0>
   135c8:	ldr	r3, [r8, #12]
   135cc:	cmp	r3, #0
   135d0:	bne	13704 <_start@@Base+0xd00>
   135d4:	ldr	r3, [sp, #16]
   135d8:	ldrd	r0, [sp, #24]
   135dc:	cmp	r3, #0
   135e0:	beq	1363c <_start@@Base+0xc38>
   135e4:	bl	2e808 <flatcc_json_parser_struct_as_root@@Base+0x650>
   135e8:	ldr	r3, [sp, #72]	; 0x48
   135ec:	add	fp, fp, #1
   135f0:	vldr	s15, [r3]
   135f4:	ldr	r3, [sp, #20]
   135f8:	cmp	r3, #0
   135fc:	ldr	r3, [sp, #72]	; 0x48
   13600:	vmov	s14, r0
   13604:	vsub.f32	s15, s15, s14
   13608:	vstr	s15, [r3]
   1360c:	beq	13668 <_start@@Base+0xc64>
   13610:	mov	r5, r7
   13614:	b	13570 <_start@@Base+0xb6c>
   13618:	mov	r2, r6
   1361c:	mov	r1, r5
   13620:	mov	r0, r8
   13624:	mov	r3, #23
   13628:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1362c:	mov	r6, r0
   13630:	mov	r0, r6
   13634:	add	sp, sp, #36	; 0x24
   13638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1363c:	bl	2e808 <flatcc_json_parser_struct_as_root@@Base+0x650>
   13640:	ldr	r3, [sp, #72]	; 0x48
   13644:	add	fp, fp, #1
   13648:	vldr	s15, [r3]
   1364c:	ldr	r3, [sp, #20]
   13650:	cmp	r3, #0
   13654:	ldr	r3, [sp, #72]	; 0x48
   13658:	vmov	s14, r0
   1365c:	vadd.f32	s15, s15, s14
   13660:	vstr	s15, [r3]
   13664:	bne	13610 <_start@@Base+0xc0c>
   13668:	mov	r6, r7
   1366c:	b	135b0 <_start@@Base+0xbac>
   13670:	add	r5, r1, #1
   13674:	sub	r3, r6, r5
   13678:	mov	r2, #0
   1367c:	str	r2, [r0, #12]
   13680:	cmp	r3, #1
   13684:	ble	13698 <_start@@Base+0xc94>
   13688:	ldrb	r3, [r5]
   1368c:	cmp	r3, #32
   13690:	bhi	136ac <_start@@Base+0xca8>
   13694:	beq	136f0 <_start@@Base+0xcec>
   13698:	mov	r1, r5
   1369c:	mov	r2, r6
   136a0:	mov	r0, r8
   136a4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   136a8:	mov	r5, r0
   136ac:	cmp	r6, r5
   136b0:	bne	13564 <_start@@Base+0xb60>
   136b4:	mov	r0, r6
   136b8:	add	sp, sp, #36	; 0x24
   136bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c0:	ldr	r3, [r0, #12]
   136c4:	cmp	r3, #0
   136c8:	beq	13698 <_start@@Base+0xc94>
   136cc:	b	135b0 <_start@@Base+0xbac>
   136d0:	mov	r3, #5
   136d4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   136d8:	ldr	r3, [r8, #12]
   136dc:	cmp	r3, #0
   136e0:	mov	r5, r0
   136e4:	subeq	r3, r6, r0
   136e8:	beq	13680 <_start@@Base+0xc7c>
   136ec:	b	136ac <_start@@Base+0xca8>
   136f0:	ldrb	r3, [r5, #1]
   136f4:	cmp	r3, #32
   136f8:	addhi	r5, r5, #1
   136fc:	bls	13698 <_start@@Base+0xc94>
   13700:	b	136ac <_start@@Base+0xca8>
   13704:	mov	r2, r6
   13708:	mov	r1, r7
   1370c:	mov	r0, r8
   13710:	mov	r3, #14
   13714:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13718:	mov	r6, r0
   1371c:	b	135b0 <_start@@Base+0xbac>
   13720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13724:	sub	sp, sp, #36	; 0x24
   13728:	mov	r8, #0
   1372c:	str	r3, [sp, #12]
   13730:	ldr	r3, [sp, #72]	; 0x48
   13734:	mov	r9, #0
   13738:	cmp	r1, r2
   1373c:	strd	r8, [r3]
   13740:	mov	r5, r1
   13744:	mov	r6, r2
   13748:	mov	r8, r0
   1374c:	beq	138c8 <_start@@Base+0xec4>
   13750:	ldrb	r3, [r1]
   13754:	cmp	r3, #34	; 0x22
   13758:	beq	13878 <_start@@Base+0xe74>
   1375c:	cmp	r3, #46	; 0x2e
   13760:	movne	r3, #1
   13764:	strne	r3, [r0, #12]
   13768:	beq	138d8 <_start@@Base+0xed4>
   1376c:	mov	fp, #0
   13770:	add	sl, sp, #20
   13774:	add	r9, sp, #24
   13778:	ldr	r4, [sp, #12]
   1377c:	b	13794 <_start@@Base+0xd90>
   13780:	cmp	r5, r0
   13784:	bne	137c4 <_start@@Base+0xdc0>
   13788:	ldr	r3, [r4, #4]!
   1378c:	cmp	r3, #0
   13790:	beq	13820 <_start@@Base+0xe1c>
   13794:	stm	sp, {r9, sl}
   13798:	add	r3, sp, #16
   1379c:	ldr	r7, [r4]
   137a0:	mov	r2, r6
   137a4:	mov	r1, r5
   137a8:	mov	r0, r8
   137ac:	blx	r7
   137b0:	cmp	r6, r0
   137b4:	bne	13780 <_start@@Base+0xd7c>
   137b8:	mov	r0, r6
   137bc:	add	sp, sp, #36	; 0x24
   137c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c4:	cmp	fp, #0
   137c8:	mov	r7, r0
   137cc:	beq	137dc <_start@@Base+0xdd8>
   137d0:	ldr	r3, [r8, #12]
   137d4:	cmp	r3, #0
   137d8:	bne	1390c <_start@@Base+0xf08>
   137dc:	ldr	r3, [sp, #16]
   137e0:	ldrd	r0, [sp, #24]
   137e4:	cmp	r3, #0
   137e8:	beq	13844 <_start@@Base+0xe40>
   137ec:	bl	2e5d0 <flatcc_json_parser_struct_as_root@@Base+0x418>
   137f0:	ldr	r3, [sp, #72]	; 0x48
   137f4:	add	fp, fp, #1
   137f8:	vldr	d7, [r3]
   137fc:	ldr	r3, [sp, #20]
   13800:	cmp	r3, #0
   13804:	ldr	r3, [sp, #72]	; 0x48
   13808:	vmov	d6, r0, r1
   1380c:	vsub.f64	d7, d7, d6
   13810:	vstr	d7, [r3]
   13814:	beq	13870 <_start@@Base+0xe6c>
   13818:	mov	r5, r7
   1381c:	b	13778 <_start@@Base+0xd74>
   13820:	mov	r2, r6
   13824:	mov	r1, r5
   13828:	mov	r0, r8
   1382c:	mov	r3, #23
   13830:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13834:	mov	r6, r0
   13838:	mov	r0, r6
   1383c:	add	sp, sp, #36	; 0x24
   13840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13844:	bl	2e5d0 <flatcc_json_parser_struct_as_root@@Base+0x418>
   13848:	ldr	r3, [sp, #72]	; 0x48
   1384c:	add	fp, fp, #1
   13850:	vldr	d7, [r3]
   13854:	ldr	r3, [sp, #20]
   13858:	cmp	r3, #0
   1385c:	ldr	r3, [sp, #72]	; 0x48
   13860:	vmov	d6, r0, r1
   13864:	vadd.f64	d7, d7, d6
   13868:	vstr	d7, [r3]
   1386c:	bne	13818 <_start@@Base+0xe14>
   13870:	mov	r6, r7
   13874:	b	137b8 <_start@@Base+0xdb4>
   13878:	add	r5, r1, #1
   1387c:	sub	r3, r6, r5
   13880:	mov	r2, #0
   13884:	str	r2, [r0, #12]
   13888:	cmp	r3, #1
   1388c:	ble	138a0 <_start@@Base+0xe9c>
   13890:	ldrb	r3, [r5]
   13894:	cmp	r3, #32
   13898:	bhi	138b4 <_start@@Base+0xeb0>
   1389c:	beq	138f8 <_start@@Base+0xef4>
   138a0:	mov	r1, r5
   138a4:	mov	r2, r6
   138a8:	mov	r0, r8
   138ac:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   138b0:	mov	r5, r0
   138b4:	cmp	r6, r5
   138b8:	bne	1376c <_start@@Base+0xd68>
   138bc:	mov	r0, r6
   138c0:	add	sp, sp, #36	; 0x24
   138c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c8:	ldr	r3, [r0, #12]
   138cc:	cmp	r3, #0
   138d0:	beq	138a0 <_start@@Base+0xe9c>
   138d4:	b	137b8 <_start@@Base+0xdb4>
   138d8:	mov	r3, #5
   138dc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   138e0:	ldr	r3, [r8, #12]
   138e4:	cmp	r3, #0
   138e8:	mov	r5, r0
   138ec:	subeq	r3, r6, r0
   138f0:	beq	13888 <_start@@Base+0xe84>
   138f4:	b	138b4 <_start@@Base+0xeb0>
   138f8:	ldrb	r3, [r5, #1]
   138fc:	cmp	r3, #32
   13900:	addhi	r5, r5, #1
   13904:	bls	138a0 <_start@@Base+0xe9c>
   13908:	b	138b4 <_start@@Base+0xeb0>
   1390c:	mov	r2, r6
   13910:	mov	r1, r7
   13914:	mov	r0, r8
   13918:	mov	r3, #14
   1391c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13920:	mov	r6, r0
   13924:	b	137b8 <_start@@Base+0xdb4>
   13928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1392c:	sub	sp, sp, #36	; 0x24
   13930:	mov	ip, #0
   13934:	str	r3, [sp, #12]
   13938:	ldr	r3, [sp, #72]	; 0x48
   1393c:	cmp	r1, r2
   13940:	mov	r7, r1
   13944:	mov	r6, r2
   13948:	strb	ip, [r3]
   1394c:	mov	r8, r0
   13950:	beq	13ac8 <_start@@Base+0x10c4>
   13954:	ldrb	r3, [r1]
   13958:	cmp	r3, #34	; 0x22
   1395c:	beq	13a7c <_start@@Base+0x1078>
   13960:	cmp	r3, #46	; 0x2e
   13964:	movne	r3, #1
   13968:	strne	r3, [r0, #12]
   1396c:	beq	13ad8 <_start@@Base+0x10d4>
   13970:	add	sl, sp, #20
   13974:	add	r9, sp, #24
   13978:	mov	fp, #0
   1397c:	str	fp, [sp, #8]
   13980:	ldr	r5, [sp, #12]
   13984:	b	1399c <_start@@Base+0xf98>
   13988:	cmp	r7, r0
   1398c:	bne	139cc <_start@@Base+0xfc8>
   13990:	ldr	r3, [r5, #4]!
   13994:	cmp	r3, #0
   13998:	beq	13a38 <_start@@Base+0x1034>
   1399c:	stm	sp, {r9, sl}
   139a0:	add	r3, sp, #16
   139a4:	ldr	r4, [r5]
   139a8:	mov	r2, r6
   139ac:	mov	r1, r7
   139b0:	mov	r0, r8
   139b4:	blx	r4
   139b8:	cmp	r6, r0
   139bc:	bne	13988 <_start@@Base+0xf84>
   139c0:	mov	r0, r6
   139c4:	add	sp, sp, #36	; 0x24
   139c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139cc:	cmp	fp, #0
   139d0:	mov	r4, r0
   139d4:	beq	139e4 <_start@@Base+0xfe0>
   139d8:	ldr	r3, [r8, #12]
   139dc:	cmp	r3, #0
   139e0:	bne	13b14 <_start@@Base+0x1110>
   139e4:	ldr	r3, [sp, #16]
   139e8:	cmp	r3, #0
   139ec:	bne	13a5c <_start@@Base+0x1058>
   139f0:	ldr	r3, [sp, #28]
   139f4:	ldr	r2, [sp, #24]
   139f8:	orrs	r3, r2, r3
   139fc:	movne	r3, #1
   13a00:	moveq	r3, #0
   13a04:	str	r3, [sp, #8]
   13a08:	ldr	r3, [sp, #72]	; 0x48
   13a0c:	ldr	r2, [sp, #20]
   13a10:	ldr	r1, [sp, #8]
   13a14:	ldrb	r3, [r3]
   13a18:	cmp	r2, #0
   13a1c:	ldr	r2, [sp, #72]	; 0x48
   13a20:	add	r3, r1, r3
   13a24:	add	fp, fp, #1
   13a28:	strb	r3, [r2]
   13a2c:	beq	13b0c <_start@@Base+0x1108>
   13a30:	mov	r7, r4
   13a34:	b	13980 <_start@@Base+0xf7c>
   13a38:	mov	r2, r6
   13a3c:	mov	r1, r7
   13a40:	mov	r0, r8
   13a44:	mov	r3, #23
   13a48:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13a4c:	mov	r6, r0
   13a50:	mov	r0, r6
   13a54:	add	sp, sp, #36	; 0x24
   13a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a5c:	mov	r3, #8
   13a60:	mov	r2, r6
   13a64:	mov	r1, r4
   13a68:	mov	r0, r8
   13a6c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13a70:	cmp	r6, r0
   13a74:	bne	13a08 <_start@@Base+0x1004>
   13a78:	b	139c0 <_start@@Base+0xfbc>
   13a7c:	add	r7, r1, #1
   13a80:	sub	r3, r2, r7
   13a84:	str	ip, [r0, #12]
   13a88:	cmp	r3, #1
   13a8c:	ble	13aa0 <_start@@Base+0x109c>
   13a90:	ldrb	r3, [r7]
   13a94:	cmp	r3, #32
   13a98:	bhi	13ab4 <_start@@Base+0x10b0>
   13a9c:	beq	13af8 <_start@@Base+0x10f4>
   13aa0:	mov	r1, r7
   13aa4:	mov	r2, r6
   13aa8:	mov	r0, r8
   13aac:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   13ab0:	mov	r7, r0
   13ab4:	cmp	r6, r7
   13ab8:	bne	13970 <_start@@Base+0xf6c>
   13abc:	mov	r0, r6
   13ac0:	add	sp, sp, #36	; 0x24
   13ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac8:	ldr	r3, [r0, #12]
   13acc:	cmp	r3, #0
   13ad0:	beq	13aa0 <_start@@Base+0x109c>
   13ad4:	b	139c0 <_start@@Base+0xfbc>
   13ad8:	mov	r3, #5
   13adc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13ae0:	ldr	r3, [r8, #12]
   13ae4:	cmp	r3, #0
   13ae8:	mov	r7, r0
   13aec:	subeq	r3, r6, r0
   13af0:	beq	13a88 <_start@@Base+0x1084>
   13af4:	b	13ab4 <_start@@Base+0x10b0>
   13af8:	ldrb	r3, [r7, #1]
   13afc:	cmp	r3, #32
   13b00:	addhi	r7, r7, #1
   13b04:	bls	13aa0 <_start@@Base+0x109c>
   13b08:	b	13ab4 <_start@@Base+0x10b0>
   13b0c:	mov	r6, r4
   13b10:	b	139c0 <_start@@Base+0xfbc>
   13b14:	mov	r2, r6
   13b18:	mov	r1, r4
   13b1c:	mov	r0, r8
   13b20:	mov	r3, #14
   13b24:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13b28:	mov	r6, r0
   13b2c:	b	139c0 <_start@@Base+0xfbc>
   13b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b34:	sub	sp, sp, #36	; 0x24
   13b38:	mov	ip, #0
   13b3c:	str	r3, [sp, #12]
   13b40:	ldr	r3, [sp, #72]	; 0x48
   13b44:	cmp	r1, r2
   13b48:	mov	r7, r1
   13b4c:	mov	r6, r2
   13b50:	strh	ip, [r3]
   13b54:	mov	r8, r0
   13b58:	beq	13d00 <_start@@Base+0x12fc>
   13b5c:	ldrb	r3, [r1]
   13b60:	cmp	r3, #34	; 0x22
   13b64:	beq	13cbc <_start@@Base+0x12b8>
   13b68:	cmp	r3, #46	; 0x2e
   13b6c:	movne	r3, #1
   13b70:	strne	r3, [r0, #12]
   13b74:	beq	13d10 <_start@@Base+0x130c>
   13b78:	add	sl, sp, #20
   13b7c:	add	r9, sp, #24
   13b80:	mov	fp, #0
   13b84:	str	fp, [sp, #8]
   13b88:	ldr	r5, [sp, #12]
   13b8c:	b	13ba4 <_start@@Base+0x11a0>
   13b90:	cmp	r7, r0
   13b94:	bne	13bd4 <_start@@Base+0x11d0>
   13b98:	ldr	r3, [r5, #4]!
   13b9c:	cmp	r3, #0
   13ba0:	beq	13c44 <_start@@Base+0x1240>
   13ba4:	stm	sp, {r9, sl}
   13ba8:	add	r3, sp, #16
   13bac:	ldr	r4, [r5]
   13bb0:	mov	r2, r6
   13bb4:	mov	r1, r7
   13bb8:	mov	r0, r8
   13bbc:	blx	r4
   13bc0:	cmp	r6, r0
   13bc4:	bne	13b90 <_start@@Base+0x118c>
   13bc8:	mov	r0, r6
   13bcc:	add	sp, sp, #36	; 0x24
   13bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd4:	cmp	fp, #0
   13bd8:	mov	r4, r0
   13bdc:	beq	13bec <_start@@Base+0x11e8>
   13be0:	ldr	r3, [r8, #12]
   13be4:	cmp	r3, #0
   13be8:	bne	13d4c <_start@@Base+0x1348>
   13bec:	ldr	r1, [sp, #16]
   13bf0:	ldrd	r2, [sp, #24]
   13bf4:	cmp	r1, #0
   13bf8:	beq	13c68 <_start@@Base+0x1264>
   13bfc:	cmp	r3, #0
   13c00:	cmpeq	r2, #32768	; 0x8000
   13c04:	rsbls	r2, r2, #0
   13c08:	sxthls	r3, r2
   13c0c:	strls	r3, [sp, #8]
   13c10:	bhi	13c9c <_start@@Base+0x1298>
   13c14:	ldr	r3, [sp, #72]	; 0x48
   13c18:	ldr	r2, [sp, #20]
   13c1c:	ldr	r1, [sp, #8]
   13c20:	ldrh	r3, [r3]
   13c24:	cmp	r2, #0
   13c28:	ldr	r2, [sp, #72]	; 0x48
   13c2c:	add	r3, r3, r1
   13c30:	add	fp, fp, #1
   13c34:	strh	r3, [r2]
   13c38:	beq	13d44 <_start@@Base+0x1340>
   13c3c:	mov	r7, r4
   13c40:	b	13b88 <_start@@Base+0x1184>
   13c44:	mov	r2, r6
   13c48:	mov	r1, r7
   13c4c:	mov	r0, r8
   13c50:	mov	r3, #23
   13c54:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13c58:	mov	r6, r0
   13c5c:	mov	r0, r6
   13c60:	add	sp, sp, #36	; 0x24
   13c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c68:	ldr	r0, [pc, #248]	; 13d68 <_start@@Base+0x1364>
   13c6c:	mov	r1, #0
   13c70:	cmp	r3, r1
   13c74:	cmpeq	r2, r0
   13c78:	sxthls	r3, r2
   13c7c:	strls	r3, [sp, #8]
   13c80:	bls	13c14 <_start@@Base+0x1210>
   13c84:	mov	r3, #7
   13c88:	mov	r2, r6
   13c8c:	mov	r1, r4
   13c90:	mov	r0, r8
   13c94:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13c98:	b	13cb0 <_start@@Base+0x12ac>
   13c9c:	mov	r3, #8
   13ca0:	mov	r2, r6
   13ca4:	mov	r1, r4
   13ca8:	mov	r0, r8
   13cac:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13cb0:	cmp	r6, r0
   13cb4:	bne	13c14 <_start@@Base+0x1210>
   13cb8:	b	13bc8 <_start@@Base+0x11c4>
   13cbc:	add	r7, r1, #1
   13cc0:	sub	r3, r2, r7
   13cc4:	str	ip, [r0, #12]
   13cc8:	cmp	r3, #1
   13ccc:	ble	13ce0 <_start@@Base+0x12dc>
   13cd0:	ldrb	r3, [r7]
   13cd4:	cmp	r3, #32
   13cd8:	bhi	13cf4 <_start@@Base+0x12f0>
   13cdc:	beq	13d30 <_start@@Base+0x132c>
   13ce0:	mov	r1, r7
   13ce4:	mov	r2, r6
   13ce8:	mov	r0, r8
   13cec:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   13cf0:	mov	r7, r0
   13cf4:	cmp	r6, r7
   13cf8:	bne	13b78 <_start@@Base+0x1174>
   13cfc:	b	13bc8 <_start@@Base+0x11c4>
   13d00:	ldr	r3, [r0, #12]
   13d04:	cmp	r3, #0
   13d08:	bne	13bc8 <_start@@Base+0x11c4>
   13d0c:	b	13ce0 <_start@@Base+0x12dc>
   13d10:	mov	r3, #5
   13d14:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13d18:	ldr	r3, [r8, #12]
   13d1c:	cmp	r3, #0
   13d20:	mov	r7, r0
   13d24:	subeq	r3, r6, r0
   13d28:	beq	13cc8 <_start@@Base+0x12c4>
   13d2c:	b	13cf4 <_start@@Base+0x12f0>
   13d30:	ldrb	r3, [r7, #1]
   13d34:	cmp	r3, #32
   13d38:	addhi	r7, r7, #1
   13d3c:	bls	13ce0 <_start@@Base+0x12dc>
   13d40:	b	13cf4 <_start@@Base+0x12f0>
   13d44:	mov	r6, r4
   13d48:	b	13bc8 <_start@@Base+0x11c4>
   13d4c:	mov	r2, r6
   13d50:	mov	r1, r4
   13d54:	mov	r0, r8
   13d58:	mov	r3, #14
   13d5c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13d60:	mov	r6, r0
   13d64:	b	13bc8 <_start@@Base+0x11c4>
   13d68:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   13d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d70:	sub	sp, sp, #36	; 0x24
   13d74:	mov	ip, #0
   13d78:	str	r3, [sp, #12]
   13d7c:	ldr	r3, [sp, #72]	; 0x48
   13d80:	cmp	r1, r2
   13d84:	mov	r7, r1
   13d88:	mov	r6, r2
   13d8c:	str	ip, [r3]
   13d90:	mov	r8, r0
   13d94:	beq	13f34 <_start@@Base+0x1530>
   13d98:	ldrb	r3, [r1]
   13d9c:	cmp	r3, #34	; 0x22
   13da0:	beq	13ef0 <_start@@Base+0x14ec>
   13da4:	cmp	r3, #46	; 0x2e
   13da8:	movne	r3, #1
   13dac:	strne	r3, [r0, #12]
   13db0:	beq	13f44 <_start@@Base+0x1540>
   13db4:	add	sl, sp, #20
   13db8:	add	r9, sp, #24
   13dbc:	mov	fp, #0
   13dc0:	str	fp, [sp, #8]
   13dc4:	ldr	r5, [sp, #12]
   13dc8:	b	13de0 <_start@@Base+0x13dc>
   13dcc:	cmp	r7, r0
   13dd0:	bne	13e10 <_start@@Base+0x140c>
   13dd4:	ldr	r3, [r5, #4]!
   13dd8:	cmp	r3, #0
   13ddc:	beq	13e7c <_start@@Base+0x1478>
   13de0:	stm	sp, {r9, sl}
   13de4:	add	r3, sp, #16
   13de8:	ldr	r4, [r5]
   13dec:	mov	r2, r6
   13df0:	mov	r1, r7
   13df4:	mov	r0, r8
   13df8:	blx	r4
   13dfc:	cmp	r6, r0
   13e00:	bne	13dcc <_start@@Base+0x13c8>
   13e04:	mov	r0, r6
   13e08:	add	sp, sp, #36	; 0x24
   13e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e10:	cmp	fp, #0
   13e14:	mov	r4, r0
   13e18:	beq	13e28 <_start@@Base+0x1424>
   13e1c:	ldr	r3, [r8, #12]
   13e20:	cmp	r3, #0
   13e24:	bne	13f80 <_start@@Base+0x157c>
   13e28:	ldr	r1, [sp, #16]
   13e2c:	ldrd	r2, [sp, #24]
   13e30:	cmp	r1, #0
   13e34:	beq	13ea0 <_start@@Base+0x149c>
   13e38:	cmp	r3, #0
   13e3c:	cmpeq	r2, #-2147483648	; 0x80000000
   13e40:	rsbls	r3, r2, #0
   13e44:	strls	r3, [sp, #8]
   13e48:	bhi	13ed0 <_start@@Base+0x14cc>
   13e4c:	ldr	r3, [sp, #72]	; 0x48
   13e50:	ldr	r2, [sp, #20]
   13e54:	ldr	r1, [sp, #8]
   13e58:	ldr	r3, [r3]
   13e5c:	cmp	r2, #0
   13e60:	ldr	r2, [sp, #72]	; 0x48
   13e64:	add	r3, r3, r1
   13e68:	add	fp, fp, #1
   13e6c:	str	r3, [r2]
   13e70:	beq	13f78 <_start@@Base+0x1574>
   13e74:	mov	r7, r4
   13e78:	b	13dc4 <_start@@Base+0x13c0>
   13e7c:	mov	r2, r6
   13e80:	mov	r1, r7
   13e84:	mov	r0, r8
   13e88:	mov	r3, #23
   13e8c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13e90:	mov	r6, r0
   13e94:	mov	r0, r6
   13e98:	add	sp, sp, #36	; 0x24
   13e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea0:	mov	r1, #0
   13ea4:	cmp	r3, r1
   13ea8:	mvn	r0, #-2147483648	; 0x80000000
   13eac:	cmpeq	r2, r0
   13eb0:	strls	r2, [sp, #8]
   13eb4:	bls	13e4c <_start@@Base+0x1448>
   13eb8:	mov	r3, #7
   13ebc:	mov	r2, r6
   13ec0:	mov	r1, r4
   13ec4:	mov	r0, r8
   13ec8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13ecc:	b	13ee4 <_start@@Base+0x14e0>
   13ed0:	mov	r3, #8
   13ed4:	mov	r2, r6
   13ed8:	mov	r1, r4
   13edc:	mov	r0, r8
   13ee0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13ee4:	cmp	r6, r0
   13ee8:	bne	13e4c <_start@@Base+0x1448>
   13eec:	b	13e04 <_start@@Base+0x1400>
   13ef0:	add	r7, r1, #1
   13ef4:	sub	r3, r2, r7
   13ef8:	str	ip, [r0, #12]
   13efc:	cmp	r3, #1
   13f00:	ble	13f14 <_start@@Base+0x1510>
   13f04:	ldrb	r3, [r7]
   13f08:	cmp	r3, #32
   13f0c:	bhi	13f28 <_start@@Base+0x1524>
   13f10:	beq	13f64 <_start@@Base+0x1560>
   13f14:	mov	r1, r7
   13f18:	mov	r2, r6
   13f1c:	mov	r0, r8
   13f20:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   13f24:	mov	r7, r0
   13f28:	cmp	r6, r7
   13f2c:	bne	13db4 <_start@@Base+0x13b0>
   13f30:	b	13e04 <_start@@Base+0x1400>
   13f34:	ldr	r3, [r0, #12]
   13f38:	cmp	r3, #0
   13f3c:	bne	13e04 <_start@@Base+0x1400>
   13f40:	b	13f14 <_start@@Base+0x1510>
   13f44:	mov	r3, #5
   13f48:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13f4c:	ldr	r3, [r8, #12]
   13f50:	cmp	r3, #0
   13f54:	mov	r7, r0
   13f58:	subeq	r3, r6, r0
   13f5c:	beq	13efc <_start@@Base+0x14f8>
   13f60:	b	13f28 <_start@@Base+0x1524>
   13f64:	ldrb	r3, [r7, #1]
   13f68:	cmp	r3, #32
   13f6c:	addhi	r7, r7, #1
   13f70:	bls	13f14 <_start@@Base+0x1510>
   13f74:	b	13f28 <_start@@Base+0x1524>
   13f78:	mov	r6, r4
   13f7c:	b	13e04 <_start@@Base+0x1400>
   13f80:	mov	r2, r6
   13f84:	mov	r1, r4
   13f88:	mov	r0, r8
   13f8c:	mov	r3, #14
   13f90:	bl	295ac <flatcc_json_parser_set_error@@Base>
   13f94:	mov	r6, r0
   13f98:	b	13e04 <_start@@Base+0x1400>
   13f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa0:	sub	sp, sp, #36	; 0x24
   13fa4:	mov	ip, #0
   13fa8:	str	r3, [sp, #8]
   13fac:	ldr	r3, [sp, #72]	; 0x48
   13fb0:	cmp	r1, r2
   13fb4:	mov	r7, r1
   13fb8:	mov	r6, r2
   13fbc:	strh	ip, [r3]
   13fc0:	mov	r8, r0
   13fc4:	beq	1415c <_start@@Base+0x1758>
   13fc8:	ldrb	r3, [r1]
   13fcc:	cmp	r3, #34	; 0x22
   13fd0:	beq	14110 <_start@@Base+0x170c>
   13fd4:	cmp	r3, #46	; 0x2e
   13fd8:	movne	r3, #1
   13fdc:	strne	r3, [r0, #12]
   13fe0:	beq	1416c <_start@@Base+0x1768>
   13fe4:	add	sl, sp, #20
   13fe8:	add	r9, sp, #24
   13fec:	mov	fp, #0
   13ff0:	str	fp, [sp, #12]
   13ff4:	ldr	r5, [sp, #8]
   13ff8:	b	14010 <_start@@Base+0x160c>
   13ffc:	cmp	r7, r0
   14000:	bne	14040 <_start@@Base+0x163c>
   14004:	ldr	r3, [r5, #4]!
   14008:	cmp	r3, #0
   1400c:	beq	140b4 <_start@@Base+0x16b0>
   14010:	stm	sp, {r9, sl}
   14014:	add	r3, sp, #16
   14018:	ldr	r4, [r5]
   1401c:	mov	r2, r6
   14020:	mov	r1, r7
   14024:	mov	r0, r8
   14028:	blx	r4
   1402c:	cmp	r6, r0
   14030:	bne	13ffc <_start@@Base+0x15f8>
   14034:	mov	r0, r6
   14038:	add	sp, sp, #36	; 0x24
   1403c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14040:	cmp	fp, #0
   14044:	mov	r4, r0
   14048:	beq	14058 <_start@@Base+0x1654>
   1404c:	ldr	r3, [r8, #12]
   14050:	cmp	r3, #0
   14054:	bne	141a8 <_start@@Base+0x17a4>
   14058:	ldr	r3, [sp, #16]
   1405c:	cmp	r3, #0
   14060:	bne	140d8 <_start@@Base+0x16d4>
   14064:	ldrd	r2, [sp, #24]
   14068:	ldr	r0, [pc, #340]	; 141c4 <_start@@Base+0x17c0>
   1406c:	mov	r1, #0
   14070:	cmp	r3, r1
   14074:	cmpeq	r2, r0
   14078:	uxthls	r3, r2
   1407c:	strls	r3, [sp, #12]
   14080:	bhi	140f8 <_start@@Base+0x16f4>
   14084:	ldr	r3, [sp, #72]	; 0x48
   14088:	ldr	r2, [sp, #20]
   1408c:	ldr	r1, [sp, #12]
   14090:	ldrh	r3, [r3]
   14094:	cmp	r2, #0
   14098:	ldr	r2, [sp, #72]	; 0x48
   1409c:	add	r3, r1, r3
   140a0:	add	fp, fp, #1
   140a4:	strh	r3, [r2]
   140a8:	beq	141a0 <_start@@Base+0x179c>
   140ac:	mov	r7, r4
   140b0:	b	13ff4 <_start@@Base+0x15f0>
   140b4:	mov	r2, r6
   140b8:	mov	r1, r7
   140bc:	mov	r0, r8
   140c0:	mov	r3, #23
   140c4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   140c8:	mov	r6, r0
   140cc:	mov	r0, r6
   140d0:	add	sp, sp, #36	; 0x24
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d8:	mov	r3, #8
   140dc:	mov	r2, r6
   140e0:	mov	r1, r4
   140e4:	mov	r0, r8
   140e8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   140ec:	cmp	r6, r0
   140f0:	bne	14084 <_start@@Base+0x1680>
   140f4:	b	14034 <_start@@Base+0x1630>
   140f8:	mov	r3, #7
   140fc:	mov	r2, r6
   14100:	mov	r1, r4
   14104:	mov	r0, r8
   14108:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1410c:	b	140ec <_start@@Base+0x16e8>
   14110:	add	r7, r1, #1
   14114:	sub	r3, r2, r7
   14118:	str	ip, [r0, #12]
   1411c:	cmp	r3, #1
   14120:	ble	14134 <_start@@Base+0x1730>
   14124:	ldrb	r3, [r7]
   14128:	cmp	r3, #32
   1412c:	bhi	14148 <_start@@Base+0x1744>
   14130:	beq	1418c <_start@@Base+0x1788>
   14134:	mov	r1, r7
   14138:	mov	r2, r6
   1413c:	mov	r0, r8
   14140:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   14144:	mov	r7, r0
   14148:	cmp	r6, r7
   1414c:	bne	13fe4 <_start@@Base+0x15e0>
   14150:	mov	r0, r6
   14154:	add	sp, sp, #36	; 0x24
   14158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1415c:	ldr	r3, [r0, #12]
   14160:	cmp	r3, #0
   14164:	beq	14134 <_start@@Base+0x1730>
   14168:	b	14034 <_start@@Base+0x1630>
   1416c:	mov	r3, #5
   14170:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14174:	ldr	r3, [r8, #12]
   14178:	cmp	r3, #0
   1417c:	mov	r7, r0
   14180:	subeq	r3, r6, r0
   14184:	beq	1411c <_start@@Base+0x1718>
   14188:	b	14148 <_start@@Base+0x1744>
   1418c:	ldrb	r3, [r7, #1]
   14190:	cmp	r3, #32
   14194:	addhi	r7, r7, #1
   14198:	bls	14134 <_start@@Base+0x1730>
   1419c:	b	14148 <_start@@Base+0x1744>
   141a0:	mov	r6, r4
   141a4:	b	14034 <_start@@Base+0x1630>
   141a8:	mov	r2, r6
   141ac:	mov	r1, r4
   141b0:	mov	r0, r8
   141b4:	mov	r3, #14
   141b8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   141bc:	mov	r6, r0
   141c0:	b	14034 <_start@@Base+0x1630>
   141c4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   141c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141cc:	sub	sp, sp, #36	; 0x24
   141d0:	mov	ip, #0
   141d4:	str	r3, [sp, #8]
   141d8:	ldr	r3, [sp, #72]	; 0x48
   141dc:	cmp	r1, r2
   141e0:	mov	r7, r1
   141e4:	mov	r6, r2
   141e8:	strb	ip, [r3]
   141ec:	mov	r8, r0
   141f0:	beq	14380 <_start@@Base+0x197c>
   141f4:	ldrb	r3, [r1]
   141f8:	cmp	r3, #34	; 0x22
   141fc:	beq	14334 <_start@@Base+0x1930>
   14200:	cmp	r3, #46	; 0x2e
   14204:	movne	r3, #1
   14208:	strne	r3, [r0, #12]
   1420c:	beq	14390 <_start@@Base+0x198c>
   14210:	add	sl, sp, #20
   14214:	add	r9, sp, #24
   14218:	mov	fp, #0
   1421c:	str	fp, [sp, #12]
   14220:	ldr	r5, [sp, #8]
   14224:	b	1423c <_start@@Base+0x1838>
   14228:	cmp	r7, r0
   1422c:	bne	1426c <_start@@Base+0x1868>
   14230:	ldr	r3, [r5, #4]!
   14234:	cmp	r3, #0
   14238:	beq	142d8 <_start@@Base+0x18d4>
   1423c:	stm	sp, {r9, sl}
   14240:	add	r3, sp, #16
   14244:	ldr	r4, [r5]
   14248:	mov	r2, r6
   1424c:	mov	r1, r7
   14250:	mov	r0, r8
   14254:	blx	r4
   14258:	cmp	r6, r0
   1425c:	bne	14228 <_start@@Base+0x1824>
   14260:	mov	r0, r6
   14264:	add	sp, sp, #36	; 0x24
   14268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1426c:	cmp	fp, #0
   14270:	mov	r4, r0
   14274:	beq	14284 <_start@@Base+0x1880>
   14278:	ldr	r3, [r8, #12]
   1427c:	cmp	r3, #0
   14280:	bne	143cc <_start@@Base+0x19c8>
   14284:	ldr	r3, [sp, #16]
   14288:	cmp	r3, #0
   1428c:	bne	142fc <_start@@Base+0x18f8>
   14290:	ldrd	r2, [sp, #24]
   14294:	cmp	r3, #0
   14298:	cmpeq	r2, #255	; 0xff
   1429c:	uxtbls	r3, r2
   142a0:	strls	r3, [sp, #12]
   142a4:	bhi	1431c <_start@@Base+0x1918>
   142a8:	ldr	r3, [sp, #72]	; 0x48
   142ac:	ldr	r2, [sp, #20]
   142b0:	ldr	r1, [sp, #12]
   142b4:	ldrb	r3, [r3]
   142b8:	cmp	r2, #0
   142bc:	ldr	r2, [sp, #72]	; 0x48
   142c0:	add	r3, r1, r3
   142c4:	add	fp, fp, #1
   142c8:	strb	r3, [r2]
   142cc:	beq	143c4 <_start@@Base+0x19c0>
   142d0:	mov	r7, r4
   142d4:	b	14220 <_start@@Base+0x181c>
   142d8:	mov	r2, r6
   142dc:	mov	r1, r7
   142e0:	mov	r0, r8
   142e4:	mov	r3, #23
   142e8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   142ec:	mov	r6, r0
   142f0:	mov	r0, r6
   142f4:	add	sp, sp, #36	; 0x24
   142f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142fc:	mov	r3, #8
   14300:	mov	r2, r6
   14304:	mov	r1, r4
   14308:	mov	r0, r8
   1430c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14310:	cmp	r6, r0
   14314:	bne	142a8 <_start@@Base+0x18a4>
   14318:	b	14260 <_start@@Base+0x185c>
   1431c:	mov	r3, #7
   14320:	mov	r2, r6
   14324:	mov	r1, r4
   14328:	mov	r0, r8
   1432c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14330:	b	14310 <_start@@Base+0x190c>
   14334:	add	r7, r1, #1
   14338:	sub	r3, r2, r7
   1433c:	str	ip, [r0, #12]
   14340:	cmp	r3, #1
   14344:	ble	14358 <_start@@Base+0x1954>
   14348:	ldrb	r3, [r7]
   1434c:	cmp	r3, #32
   14350:	bhi	1436c <_start@@Base+0x1968>
   14354:	beq	143b0 <_start@@Base+0x19ac>
   14358:	mov	r1, r7
   1435c:	mov	r2, r6
   14360:	mov	r0, r8
   14364:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   14368:	mov	r7, r0
   1436c:	cmp	r6, r7
   14370:	bne	14210 <_start@@Base+0x180c>
   14374:	mov	r0, r6
   14378:	add	sp, sp, #36	; 0x24
   1437c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14380:	ldr	r3, [r0, #12]
   14384:	cmp	r3, #0
   14388:	beq	14358 <_start@@Base+0x1954>
   1438c:	b	14260 <_start@@Base+0x185c>
   14390:	mov	r3, #5
   14394:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14398:	ldr	r3, [r8, #12]
   1439c:	cmp	r3, #0
   143a0:	mov	r7, r0
   143a4:	subeq	r3, r6, r0
   143a8:	beq	14340 <_start@@Base+0x193c>
   143ac:	b	1436c <_start@@Base+0x1968>
   143b0:	ldrb	r3, [r7, #1]
   143b4:	cmp	r3, #32
   143b8:	addhi	r7, r7, #1
   143bc:	bls	14358 <_start@@Base+0x1954>
   143c0:	b	1436c <_start@@Base+0x1968>
   143c4:	mov	r6, r4
   143c8:	b	14260 <_start@@Base+0x185c>
   143cc:	mov	r2, r6
   143d0:	mov	r1, r4
   143d4:	mov	r0, r8
   143d8:	mov	r3, #14
   143dc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   143e0:	mov	r6, r0
   143e4:	b	14260 <_start@@Base+0x185c>
   143e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143ec:	sub	sp, sp, #36	; 0x24
   143f0:	mov	ip, #0
   143f4:	str	r3, [sp, #12]
   143f8:	ldr	r3, [sp, #72]	; 0x48
   143fc:	cmp	r1, r2
   14400:	mov	r7, r1
   14404:	mov	r6, r2
   14408:	strb	ip, [r3]
   1440c:	mov	r8, r0
   14410:	beq	145b0 <_start@@Base+0x1bac>
   14414:	ldrb	r3, [r1]
   14418:	cmp	r3, #34	; 0x22
   1441c:	beq	1456c <_start@@Base+0x1b68>
   14420:	cmp	r3, #46	; 0x2e
   14424:	movne	r3, #1
   14428:	strne	r3, [r0, #12]
   1442c:	beq	145c0 <_start@@Base+0x1bbc>
   14430:	add	sl, sp, #20
   14434:	add	r9, sp, #24
   14438:	mov	fp, #0
   1443c:	str	fp, [sp, #8]
   14440:	ldr	r5, [sp, #12]
   14444:	b	1445c <_start@@Base+0x1a58>
   14448:	cmp	r7, r0
   1444c:	bne	1448c <_start@@Base+0x1a88>
   14450:	ldr	r3, [r5, #4]!
   14454:	cmp	r3, #0
   14458:	beq	144fc <_start@@Base+0x1af8>
   1445c:	stm	sp, {r9, sl}
   14460:	add	r3, sp, #16
   14464:	ldr	r4, [r5]
   14468:	mov	r2, r6
   1446c:	mov	r1, r7
   14470:	mov	r0, r8
   14474:	blx	r4
   14478:	cmp	r6, r0
   1447c:	bne	14448 <_start@@Base+0x1a44>
   14480:	mov	r0, r6
   14484:	add	sp, sp, #36	; 0x24
   14488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1448c:	cmp	fp, #0
   14490:	mov	r4, r0
   14494:	beq	144a4 <_start@@Base+0x1aa0>
   14498:	ldr	r3, [r8, #12]
   1449c:	cmp	r3, #0
   144a0:	bne	145fc <_start@@Base+0x1bf8>
   144a4:	ldr	r1, [sp, #16]
   144a8:	ldrd	r2, [sp, #24]
   144ac:	cmp	r1, #0
   144b0:	beq	14520 <_start@@Base+0x1b1c>
   144b4:	cmp	r3, #0
   144b8:	cmpeq	r2, #128	; 0x80
   144bc:	rsbls	r2, r2, #0
   144c0:	sxtbls	r3, r2
   144c4:	strls	r3, [sp, #8]
   144c8:	bhi	1454c <_start@@Base+0x1b48>
   144cc:	ldr	r3, [sp, #72]	; 0x48
   144d0:	ldr	r2, [sp, #20]
   144d4:	ldr	r1, [sp, #8]
   144d8:	ldrb	r3, [r3]
   144dc:	cmp	r2, #0
   144e0:	ldr	r2, [sp, #72]	; 0x48
   144e4:	add	r3, r3, r1
   144e8:	add	fp, fp, #1
   144ec:	strb	r3, [r2]
   144f0:	beq	145f4 <_start@@Base+0x1bf0>
   144f4:	mov	r7, r4
   144f8:	b	14440 <_start@@Base+0x1a3c>
   144fc:	mov	r2, r6
   14500:	mov	r1, r7
   14504:	mov	r0, r8
   14508:	mov	r3, #23
   1450c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14510:	mov	r6, r0
   14514:	mov	r0, r6
   14518:	add	sp, sp, #36	; 0x24
   1451c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14520:	cmp	r3, #0
   14524:	cmpeq	r2, #127	; 0x7f
   14528:	sxtbls	r3, r2
   1452c:	strls	r3, [sp, #8]
   14530:	bls	144cc <_start@@Base+0x1ac8>
   14534:	mov	r3, #7
   14538:	mov	r2, r6
   1453c:	mov	r1, r4
   14540:	mov	r0, r8
   14544:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14548:	b	14560 <_start@@Base+0x1b5c>
   1454c:	mov	r3, #8
   14550:	mov	r2, r6
   14554:	mov	r1, r4
   14558:	mov	r0, r8
   1455c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14560:	cmp	r6, r0
   14564:	bne	144cc <_start@@Base+0x1ac8>
   14568:	b	14480 <_start@@Base+0x1a7c>
   1456c:	add	r7, r1, #1
   14570:	sub	r3, r2, r7
   14574:	str	ip, [r0, #12]
   14578:	cmp	r3, #1
   1457c:	ble	14590 <_start@@Base+0x1b8c>
   14580:	ldrb	r3, [r7]
   14584:	cmp	r3, #32
   14588:	bhi	145a4 <_start@@Base+0x1ba0>
   1458c:	beq	145e0 <_start@@Base+0x1bdc>
   14590:	mov	r1, r7
   14594:	mov	r2, r6
   14598:	mov	r0, r8
   1459c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   145a0:	mov	r7, r0
   145a4:	cmp	r6, r7
   145a8:	bne	14430 <_start@@Base+0x1a2c>
   145ac:	b	14480 <_start@@Base+0x1a7c>
   145b0:	ldr	r3, [r0, #12]
   145b4:	cmp	r3, #0
   145b8:	bne	14480 <_start@@Base+0x1a7c>
   145bc:	b	14590 <_start@@Base+0x1b8c>
   145c0:	mov	r3, #5
   145c4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   145c8:	ldr	r3, [r8, #12]
   145cc:	cmp	r3, #0
   145d0:	mov	r7, r0
   145d4:	subeq	r3, r6, r0
   145d8:	beq	14578 <_start@@Base+0x1b74>
   145dc:	b	145a4 <_start@@Base+0x1ba0>
   145e0:	ldrb	r3, [r7, #1]
   145e4:	cmp	r3, #32
   145e8:	addhi	r7, r7, #1
   145ec:	bls	14590 <_start@@Base+0x1b8c>
   145f0:	b	145a4 <_start@@Base+0x1ba0>
   145f4:	mov	r6, r4
   145f8:	b	14480 <_start@@Base+0x1a7c>
   145fc:	mov	r2, r6
   14600:	mov	r1, r4
   14604:	mov	r0, r8
   14608:	mov	r3, #14
   1460c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14610:	mov	r6, r0
   14614:	b	14480 <_start@@Base+0x1a7c>
   14618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1461c:	sub	sp, sp, #36	; 0x24
   14620:	mov	ip, #0
   14624:	str	r3, [sp, #8]
   14628:	ldr	r3, [sp, #72]	; 0x48
   1462c:	cmp	r1, r2
   14630:	mov	r7, r1
   14634:	mov	r6, r2
   14638:	str	ip, [r3]
   1463c:	mov	r8, r0
   14640:	beq	147d4 <_start@@Base+0x1dd0>
   14644:	ldrb	r3, [r1]
   14648:	cmp	r3, #34	; 0x22
   1464c:	beq	14788 <_start@@Base+0x1d84>
   14650:	cmp	r3, #46	; 0x2e
   14654:	movne	r3, #1
   14658:	strne	r3, [r0, #12]
   1465c:	beq	147e4 <_start@@Base+0x1de0>
   14660:	add	sl, sp, #20
   14664:	add	r9, sp, #24
   14668:	mov	fp, #0
   1466c:	str	fp, [sp, #12]
   14670:	ldr	r5, [sp, #8]
   14674:	b	1468c <_start@@Base+0x1c88>
   14678:	cmp	r7, r0
   1467c:	bne	146bc <_start@@Base+0x1cb8>
   14680:	ldr	r3, [r5, #4]!
   14684:	cmp	r3, #0
   14688:	beq	1472c <_start@@Base+0x1d28>
   1468c:	stm	sp, {r9, sl}
   14690:	add	r3, sp, #16
   14694:	ldr	r4, [r5]
   14698:	mov	r2, r6
   1469c:	mov	r1, r7
   146a0:	mov	r0, r8
   146a4:	blx	r4
   146a8:	cmp	r6, r0
   146ac:	bne	14678 <_start@@Base+0x1c74>
   146b0:	mov	r0, r6
   146b4:	add	sp, sp, #36	; 0x24
   146b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146bc:	cmp	fp, #0
   146c0:	mov	r4, r0
   146c4:	beq	146d4 <_start@@Base+0x1cd0>
   146c8:	ldr	r3, [r8, #12]
   146cc:	cmp	r3, #0
   146d0:	bne	14820 <_start@@Base+0x1e1c>
   146d4:	ldr	r3, [sp, #16]
   146d8:	cmp	r3, #0
   146dc:	bne	14750 <_start@@Base+0x1d4c>
   146e0:	ldrd	r2, [sp, #24]
   146e4:	mov	r1, #0
   146e8:	mvn	r0, #0
   146ec:	cmp	r3, r1
   146f0:	cmpeq	r2, r0
   146f4:	strls	r2, [sp, #12]
   146f8:	bhi	14770 <_start@@Base+0x1d6c>
   146fc:	ldr	r3, [sp, #72]	; 0x48
   14700:	ldr	r2, [sp, #20]
   14704:	ldr	r1, [sp, #12]
   14708:	ldr	r3, [r3]
   1470c:	cmp	r2, #0
   14710:	ldr	r2, [sp, #72]	; 0x48
   14714:	add	r3, r3, r1
   14718:	add	fp, fp, #1
   1471c:	str	r3, [r2]
   14720:	beq	14818 <_start@@Base+0x1e14>
   14724:	mov	r7, r4
   14728:	b	14670 <_start@@Base+0x1c6c>
   1472c:	mov	r2, r6
   14730:	mov	r1, r7
   14734:	mov	r0, r8
   14738:	mov	r3, #23
   1473c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14740:	mov	r6, r0
   14744:	mov	r0, r6
   14748:	add	sp, sp, #36	; 0x24
   1474c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14750:	mov	r3, #8
   14754:	mov	r2, r6
   14758:	mov	r1, r4
   1475c:	mov	r0, r8
   14760:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14764:	cmp	r6, r0
   14768:	bne	146fc <_start@@Base+0x1cf8>
   1476c:	b	146b0 <_start@@Base+0x1cac>
   14770:	mov	r3, #7
   14774:	mov	r2, r6
   14778:	mov	r1, r4
   1477c:	mov	r0, r8
   14780:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14784:	b	14764 <_start@@Base+0x1d60>
   14788:	add	r7, r1, #1
   1478c:	sub	r3, r2, r7
   14790:	str	ip, [r0, #12]
   14794:	cmp	r3, #1
   14798:	ble	147ac <_start@@Base+0x1da8>
   1479c:	ldrb	r3, [r7]
   147a0:	cmp	r3, #32
   147a4:	bhi	147c0 <_start@@Base+0x1dbc>
   147a8:	beq	14804 <_start@@Base+0x1e00>
   147ac:	mov	r1, r7
   147b0:	mov	r2, r6
   147b4:	mov	r0, r8
   147b8:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   147bc:	mov	r7, r0
   147c0:	cmp	r6, r7
   147c4:	bne	14660 <_start@@Base+0x1c5c>
   147c8:	mov	r0, r6
   147cc:	add	sp, sp, #36	; 0x24
   147d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d4:	ldr	r3, [r0, #12]
   147d8:	cmp	r3, #0
   147dc:	beq	147ac <_start@@Base+0x1da8>
   147e0:	b	146b0 <_start@@Base+0x1cac>
   147e4:	mov	r3, #5
   147e8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   147ec:	ldr	r3, [r8, #12]
   147f0:	cmp	r3, #0
   147f4:	mov	r7, r0
   147f8:	subeq	r3, r6, r0
   147fc:	beq	14794 <_start@@Base+0x1d90>
   14800:	b	147c0 <_start@@Base+0x1dbc>
   14804:	ldrb	r3, [r7, #1]
   14808:	cmp	r3, #32
   1480c:	addhi	r7, r7, #1
   14810:	bls	147ac <_start@@Base+0x1da8>
   14814:	b	147c0 <_start@@Base+0x1dbc>
   14818:	mov	r6, r4
   1481c:	b	146b0 <_start@@Base+0x1cac>
   14820:	mov	r2, r6
   14824:	mov	r1, r4
   14828:	mov	r0, r8
   1482c:	mov	r3, #14
   14830:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14834:	mov	r6, r0
   14838:	b	146b0 <_start@@Base+0x1cac>
   1483c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14840:	sub	sp, sp, #44	; 0x2c
   14844:	mov	r4, #0
   14848:	str	r3, [sp, #20]
   1484c:	ldr	r3, [sp, #80]	; 0x50
   14850:	mov	r5, #0
   14854:	cmp	r1, r2
   14858:	mov	r6, r1
   1485c:	mov	r7, r2
   14860:	strd	r4, [r3]
   14864:	mov	r8, r0
   14868:	beq	14a10 <_start@@Base+0x200c>
   1486c:	ldrb	r3, [r1]
   14870:	cmp	r3, #34	; 0x22
   14874:	beq	149c0 <_start@@Base+0x1fbc>
   14878:	cmp	r3, #46	; 0x2e
   1487c:	movne	r3, #1
   14880:	strne	r3, [r0, #12]
   14884:	beq	14a20 <_start@@Base+0x201c>
   14888:	mov	r2, #0
   1488c:	mov	r3, #0
   14890:	mov	fp, #0
   14894:	add	sl, sp, #28
   14898:	add	r9, sp, #32
   1489c:	strd	r2, [sp, #8]
   148a0:	ldr	r5, [sp, #20]
   148a4:	b	148bc <_start@@Base+0x1eb8>
   148a8:	cmp	r6, r0
   148ac:	bne	148ec <_start@@Base+0x1ee8>
   148b0:	ldr	r3, [r5, #4]!
   148b4:	cmp	r3, #0
   148b8:	beq	14968 <_start@@Base+0x1f64>
   148bc:	stm	sp, {r9, sl}
   148c0:	add	r3, sp, #24
   148c4:	ldr	r4, [r5]
   148c8:	mov	r2, r7
   148cc:	mov	r1, r6
   148d0:	mov	r0, r8
   148d4:	blx	r4
   148d8:	cmp	r7, r0
   148dc:	bne	148a8 <_start@@Base+0x1ea4>
   148e0:	mov	r0, r7
   148e4:	add	sp, sp, #44	; 0x2c
   148e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148ec:	cmp	fp, #0
   148f0:	mov	r4, r0
   148f4:	beq	14904 <_start@@Base+0x1f00>
   148f8:	ldr	r3, [r8, #12]
   148fc:	cmp	r3, #0
   14900:	bne	14a74 <_start@@Base+0x2070>
   14904:	ldr	r1, [sp, #24]
   14908:	ldrd	r2, [sp, #32]
   1490c:	cmp	r1, #0
   14910:	beq	1498c <_start@@Base+0x1f88>
   14914:	cmp	r3, #-2147483648	; 0x80000000
   14918:	cmpeq	r2, #0
   1491c:	bhi	149a0 <_start@@Base+0x1f9c>
   14920:	rsbs	r2, r2, #0
   14924:	rsc	r3, r3, #0
   14928:	strd	r2, [sp, #8]
   1492c:	ldr	r3, [sp, #80]	; 0x50
   14930:	ldrd	r0, [sp, #8]
   14934:	ldr	ip, [sp, #28]
   14938:	ldrd	r2, [r3]
   1493c:	add	fp, fp, #1
   14940:	adds	r0, r0, r2
   14944:	adc	r1, r1, r3
   14948:	mov	r3, r1
   1494c:	ldr	r1, [sp, #80]	; 0x50
   14950:	mov	r2, r0
   14954:	cmp	ip, #0
   14958:	strd	r2, [r1]
   1495c:	beq	14a6c <_start@@Base+0x2068>
   14960:	mov	r6, r4
   14964:	b	148a0 <_start@@Base+0x1e9c>
   14968:	mov	r2, r7
   1496c:	mov	r1, r6
   14970:	mov	r0, r8
   14974:	mov	r3, #23
   14978:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1497c:	mov	r7, r0
   14980:	mov	r0, r7
   14984:	add	sp, sp, #44	; 0x2c
   14988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1498c:	cmp	r2, #0
   14990:	sbcs	r1, r3, #0
   14994:	blt	14a40 <_start@@Base+0x203c>
   14998:	strd	r2, [sp, #8]
   1499c:	b	1492c <_start@@Base+0x1f28>
   149a0:	mov	r3, #8
   149a4:	mov	r2, r7
   149a8:	mov	r1, r4
   149ac:	mov	r0, r8
   149b0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   149b4:	cmp	r7, r0
   149b8:	bne	1492c <_start@@Base+0x1f28>
   149bc:	b	148e0 <_start@@Base+0x1edc>
   149c0:	add	r6, r1, #1
   149c4:	sub	r3, r7, r6
   149c8:	mov	r2, #0
   149cc:	str	r2, [r0, #12]
   149d0:	cmp	r3, #1
   149d4:	ble	149e8 <_start@@Base+0x1fe4>
   149d8:	ldrb	r3, [r6]
   149dc:	cmp	r3, #32
   149e0:	bhi	149fc <_start@@Base+0x1ff8>
   149e4:	beq	14a58 <_start@@Base+0x2054>
   149e8:	mov	r1, r6
   149ec:	mov	r2, r7
   149f0:	mov	r0, r8
   149f4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   149f8:	mov	r6, r0
   149fc:	cmp	r7, r6
   14a00:	bne	14888 <_start@@Base+0x1e84>
   14a04:	mov	r0, r7
   14a08:	add	sp, sp, #44	; 0x2c
   14a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a10:	ldr	r3, [r0, #12]
   14a14:	cmp	r3, #0
   14a18:	beq	149e8 <_start@@Base+0x1fe4>
   14a1c:	b	148e0 <_start@@Base+0x1edc>
   14a20:	mov	r3, #5
   14a24:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14a28:	ldr	r3, [r8, #12]
   14a2c:	cmp	r3, #0
   14a30:	mov	r6, r0
   14a34:	subeq	r3, r7, r0
   14a38:	beq	149d0 <_start@@Base+0x1fcc>
   14a3c:	b	149fc <_start@@Base+0x1ff8>
   14a40:	mov	r3, #7
   14a44:	mov	r2, r7
   14a48:	mov	r1, r4
   14a4c:	mov	r0, r8
   14a50:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14a54:	b	149b4 <_start@@Base+0x1fb0>
   14a58:	ldrb	r3, [r6, #1]
   14a5c:	cmp	r3, #32
   14a60:	addhi	r6, r6, #1
   14a64:	bls	149e8 <_start@@Base+0x1fe4>
   14a68:	b	149fc <_start@@Base+0x1ff8>
   14a6c:	mov	r7, r4
   14a70:	b	148e0 <_start@@Base+0x1edc>
   14a74:	mov	r2, r7
   14a78:	mov	r1, r4
   14a7c:	mov	r0, r8
   14a80:	mov	r3, #14
   14a84:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14a88:	mov	r7, r0
   14a8c:	b	148e0 <_start@@Base+0x1edc>
   14a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a94:	sub	sp, sp, #12
   14a98:	mov	sl, r2
   14a9c:	str	r3, [sp]
   14aa0:	sub	r2, r2, r1
   14aa4:	ldr	r3, [sp, #48]	; 0x30
   14aa8:	cmp	r2, #8
   14aac:	mov	r4, r1
   14ab0:	mov	r5, r0
   14ab4:	str	r3, [sp, #4]
   14ab8:	ldr	fp, [sp, #52]	; 0x34
   14abc:	bls	14b94 <_start@@Base+0x2190>
   14ac0:	ldrb	r6, [r4, #7]
   14ac4:	mov	r7, #0
   14ac8:	ldrb	r0, [r4, #6]
   14acc:	lsr	r3, r0, #24
   14ad0:	lsl	r2, r0, #8
   14ad4:	orr	r6, r6, r2
   14ad8:	orr	r7, r7, r3
   14adc:	ldrb	r0, [r4, #5]
   14ae0:	lsr	r3, r0, #16
   14ae4:	lsl	r2, r0, #16
   14ae8:	orr	r6, r6, r2
   14aec:	orr	r7, r7, r3
   14af0:	ldrb	r0, [r4, #4]
   14af4:	lsr	r3, r0, #8
   14af8:	lsl	r2, r0, #24
   14afc:	orr	r6, r6, r2
   14b00:	orr	r7, r7, r3
   14b04:	ldrb	r3, [r4, #3]
   14b08:	mov	r2, #0
   14b0c:	orr	r2, r2, r6
   14b10:	orr	r3, r3, r7
   14b14:	ldrb	r0, [r4, #2]
   14b18:	mov	r6, #0
   14b1c:	orr	r2, r2, r6
   14b20:	lsl	r7, r0, #8
   14b24:	orr	r3, r3, r7
   14b28:	ldrb	r0, [r4, #1]
   14b2c:	mov	r6, #0
   14b30:	orr	r6, r6, r2
   14b34:	lsl	r7, r0, #16
   14b38:	orr	r7, r7, r3
   14b3c:	ldrb	r2, [r4]
   14b40:	add	r9, pc, #280	; 0x118
   14b44:	ldrd	r8, [r9]
   14b48:	mov	r0, #0
   14b4c:	orr	r0, r0, r6
   14b50:	lsl	r1, r2, #24
   14b54:	orr	r1, r1, r7
   14b58:	cmp	r1, r9
   14b5c:	cmpeq	r0, r8
   14b60:	bne	14b88 <_start@@Base+0x2184>
   14b64:	add	r6, r4, #8
   14b68:	mov	r0, r6
   14b6c:	mov	r1, sl
   14b70:	bl	12b30 <_start@@Base+0x12c>
   14b74:	mov	r0, #0
   14b78:	and	r1, r1, #-16777216	; 0xff000000
   14b7c:	cmp	r1, #1912602624	; 0x72000000
   14b80:	cmpeq	r0, #0
   14b84:	beq	14bc4 <_start@@Base+0x21c0>
   14b88:	mov	r0, r4
   14b8c:	add	sp, sp, #12
   14b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b94:	sub	r2, r2, #1
   14b98:	cmp	r2, #7
   14b9c:	ldrls	pc, [pc, r2, lsl #2]
   14ba0:	b	14b88 <_start@@Base+0x2184>
   14ba4:	andeq	r4, r1, ip, lsl #24
   14ba8:	andeq	r4, r1, r8, lsl ip
   14bac:	andeq	r4, r1, r4, lsr #24
   14bb0:	andeq	r4, r1, r0, lsr ip
   14bb4:	andeq	r4, r1, ip, lsr ip
   14bb8:	andeq	r4, r1, r8, asr #24
   14bbc:	andeq	r4, r1, r4, asr ip
   14bc0:	andeq	r4, r1, r0, asr #21
   14bc4:	sub	r3, sl, r6
   14bc8:	cmp	r3, #1
   14bcc:	ble	14b88 <_start@@Base+0x2184>
   14bd0:	ldrb	r3, [r4, #9]
   14bd4:	cmp	r3, #46	; 0x2e
   14bd8:	bne	14b88 <_start@@Base+0x2184>
   14bdc:	add	r1, r4, #10
   14be0:	cmp	r6, r1
   14be4:	beq	14b88 <_start@@Base+0x2184>
   14be8:	ldr	r3, [sp, #4]
   14bec:	str	fp, [sp, #52]	; 0x34
   14bf0:	str	r3, [sp, #48]	; 0x30
   14bf4:	mov	r2, sl
   14bf8:	ldr	r3, [sp]
   14bfc:	mov	r0, r5
   14c00:	add	sp, sp, #12
   14c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c08:	b	12cb0 <_start@@Base+0x2ac>
   14c0c:	mov	r6, #0
   14c10:	mov	r7, #0
   14c14:	b	14b3c <_start@@Base+0x2138>
   14c18:	mov	r2, #0
   14c1c:	mov	r3, #0
   14c20:	b	14b28 <_start@@Base+0x2124>
   14c24:	mov	r2, #0
   14c28:	mov	r3, #0
   14c2c:	b	14b14 <_start@@Base+0x2110>
   14c30:	mov	r6, #0
   14c34:	mov	r7, #0
   14c38:	b	14b04 <_start@@Base+0x2100>
   14c3c:	mov	r6, #0
   14c40:	mov	r7, #0
   14c44:	b	14af0 <_start@@Base+0x20ec>
   14c48:	mov	r6, #0
   14c4c:	mov	r7, #0
   14c50:	b	14adc <_start@@Base+0x20d8>
   14c54:	mov	r6, #0
   14c58:	mov	r7, #0
   14c5c:	b	14ac8 <_start@@Base+0x20c4>
   14c60:	cmnvs	r3, r5, ror #8
   14c64:	cmnmi	r8, #-2147483620	; 0x8000001c
   14c68:	push	{r4, r5, r6, lr}
   14c6c:	mov	r4, r2
   14c70:	sub	r2, r2, r1
   14c74:	cmp	r2, #1
   14c78:	mov	r5, r0
   14c7c:	mov	r6, r3
   14c80:	ble	14c94 <_start@@Base+0x2290>
   14c84:	ldrb	r3, [r1]
   14c88:	cmp	r3, #32
   14c8c:	bhi	14ca4 <_start@@Base+0x22a0>
   14c90:	beq	14d14 <_start@@Base+0x2310>
   14c94:	mov	r2, r4
   14c98:	mov	r0, r5
   14c9c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   14ca0:	mov	r1, r0
   14ca4:	cmp	r4, r1
   14ca8:	beq	14d78 <_start@@Base+0x2374>
   14cac:	ldrb	r3, [r1]
   14cb0:	cmp	r3, #44	; 0x2c
   14cb4:	beq	14d28 <_start@@Base+0x2324>
   14cb8:	mov	r3, #0
   14cbc:	str	r3, [r6]
   14cc0:	ldrb	r3, [r1]
   14cc4:	cmp	r3, #125	; 0x7d
   14cc8:	beq	14ce0 <_start@@Base+0x22dc>
   14ccc:	mov	r2, r4
   14cd0:	mov	r0, r5
   14cd4:	mov	r3, #10
   14cd8:	pop	{r4, r5, r6, lr}
   14cdc:	b	295ac <flatcc_json_parser_set_error@@Base>
   14ce0:	add	r0, r1, #1
   14ce4:	sub	r3, r4, r0
   14ce8:	cmp	r3, #1
   14cec:	ble	14d00 <_start@@Base+0x22fc>
   14cf0:	ldrb	r3, [r1, #1]
   14cf4:	cmp	r3, #32
   14cf8:	pophi	{r4, r5, r6, pc}
   14cfc:	beq	14d9c <_start@@Base+0x2398>
   14d00:	mov	r2, r4
   14d04:	mov	r1, r0
   14d08:	mov	r0, r5
   14d0c:	pop	{r4, r5, r6, lr}
   14d10:	b	296ac <flatcc_json_parser_space_ext@@Base>
   14d14:	ldrb	r3, [r1, #1]
   14d18:	cmp	r3, #32
   14d1c:	addhi	r1, r1, #1
   14d20:	bls	14c94 <_start@@Base+0x2290>
   14d24:	b	14ca4 <_start@@Base+0x22a0>
   14d28:	add	r0, r1, #1
   14d2c:	sub	r3, r4, r0
   14d30:	cmp	r3, #1
   14d34:	ble	14d48 <_start@@Base+0x2344>
   14d38:	ldrb	r3, [r1, #1]
   14d3c:	cmp	r3, #32
   14d40:	bhi	14d58 <_start@@Base+0x2354>
   14d44:	beq	14d88 <_start@@Base+0x2384>
   14d48:	mov	r1, r0
   14d4c:	mov	r2, r4
   14d50:	mov	r0, r5
   14d54:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   14d58:	cmp	r4, r0
   14d5c:	beq	14dcc <_start@@Base+0x23c8>
   14d60:	ldrb	r3, [r0]
   14d64:	cmp	r3, #125	; 0x7d
   14d68:	beq	14db0 <_start@@Base+0x23ac>
   14d6c:	mov	r3, #1
   14d70:	str	r3, [r6]
   14d74:	pop	{r4, r5, r6, pc}
   14d78:	mov	r3, #0
   14d7c:	mov	r0, r4
   14d80:	str	r3, [r6]
   14d84:	pop	{r4, r5, r6, pc}
   14d88:	ldrb	r3, [r1, #2]
   14d8c:	cmp	r3, #32
   14d90:	addhi	r0, r1, #2
   14d94:	bls	14d48 <_start@@Base+0x2344>
   14d98:	b	14d58 <_start@@Base+0x2354>
   14d9c:	ldrb	r3, [r1, #2]
   14da0:	cmp	r3, #32
   14da4:	bls	14d00 <_start@@Base+0x22fc>
   14da8:	add	r0, r1, #2
   14dac:	pop	{r4, r5, r6, pc}
   14db0:	mov	r3, #0
   14db4:	mov	r2, r4
   14db8:	add	r1, r0, #1
   14dbc:	str	r3, [r6]
   14dc0:	mov	r0, r5
   14dc4:	pop	{r4, r5, r6, lr}
   14dc8:	b	12fac <_start@@Base+0x5a8>
   14dcc:	mov	r3, #0
   14dd0:	str	r3, [r6]
   14dd4:	mov	r0, r5
   14dd8:	mov	r2, r4
   14ddc:	mov	r1, r4
   14de0:	mov	r3, #10
   14de4:	pop	{r4, r5, r6, lr}
   14de8:	b	295ac <flatcc_json_parser_set_error@@Base>
   14dec:	push	{r4, r5, r6, lr}
   14df0:	mov	r4, r2
   14df4:	sub	r2, r2, r1
   14df8:	cmp	r2, #1
   14dfc:	mov	r5, r0
   14e00:	mov	r6, r3
   14e04:	ble	14e18 <_start@@Base+0x2414>
   14e08:	ldrb	r3, [r1]
   14e0c:	cmp	r3, #32
   14e10:	bhi	14e28 <_start@@Base+0x2424>
   14e14:	beq	14e98 <_start@@Base+0x2494>
   14e18:	mov	r2, r4
   14e1c:	mov	r0, r5
   14e20:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   14e24:	mov	r1, r0
   14e28:	cmp	r4, r1
   14e2c:	beq	14efc <_start@@Base+0x24f8>
   14e30:	ldrb	r3, [r1]
   14e34:	cmp	r3, #44	; 0x2c
   14e38:	beq	14eac <_start@@Base+0x24a8>
   14e3c:	mov	r3, #0
   14e40:	str	r3, [r6]
   14e44:	ldrb	r3, [r1]
   14e48:	cmp	r3, #93	; 0x5d
   14e4c:	beq	14e64 <_start@@Base+0x2460>
   14e50:	mov	r2, r4
   14e54:	mov	r0, r5
   14e58:	mov	r3, #9
   14e5c:	pop	{r4, r5, r6, lr}
   14e60:	b	295ac <flatcc_json_parser_set_error@@Base>
   14e64:	add	r0, r1, #1
   14e68:	sub	r3, r4, r0
   14e6c:	cmp	r3, #1
   14e70:	ble	14e84 <_start@@Base+0x2480>
   14e74:	ldrb	r3, [r1, #1]
   14e78:	cmp	r3, #32
   14e7c:	pophi	{r4, r5, r6, pc}
   14e80:	beq	14f20 <_start@@Base+0x251c>
   14e84:	mov	r2, r4
   14e88:	mov	r1, r0
   14e8c:	mov	r0, r5
   14e90:	pop	{r4, r5, r6, lr}
   14e94:	b	296ac <flatcc_json_parser_space_ext@@Base>
   14e98:	ldrb	r3, [r1, #1]
   14e9c:	cmp	r3, #32
   14ea0:	addhi	r1, r1, #1
   14ea4:	bls	14e18 <_start@@Base+0x2414>
   14ea8:	b	14e28 <_start@@Base+0x2424>
   14eac:	add	r0, r1, #1
   14eb0:	sub	r3, r4, r0
   14eb4:	cmp	r3, #1
   14eb8:	ble	14ecc <_start@@Base+0x24c8>
   14ebc:	ldrb	r3, [r1, #1]
   14ec0:	cmp	r3, #32
   14ec4:	bhi	14edc <_start@@Base+0x24d8>
   14ec8:	beq	14f0c <_start@@Base+0x2508>
   14ecc:	mov	r1, r0
   14ed0:	mov	r2, r4
   14ed4:	mov	r0, r5
   14ed8:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   14edc:	cmp	r4, r0
   14ee0:	beq	14f50 <_start@@Base+0x254c>
   14ee4:	ldrb	r3, [r0]
   14ee8:	cmp	r3, #93	; 0x5d
   14eec:	beq	14f34 <_start@@Base+0x2530>
   14ef0:	mov	r3, #1
   14ef4:	str	r3, [r6]
   14ef8:	pop	{r4, r5, r6, pc}
   14efc:	mov	r3, #0
   14f00:	mov	r0, r4
   14f04:	str	r3, [r6]
   14f08:	pop	{r4, r5, r6, pc}
   14f0c:	ldrb	r3, [r1, #2]
   14f10:	cmp	r3, #32
   14f14:	addhi	r0, r1, #2
   14f18:	bls	14ecc <_start@@Base+0x24c8>
   14f1c:	b	14edc <_start@@Base+0x24d8>
   14f20:	ldrb	r3, [r1, #2]
   14f24:	cmp	r3, #32
   14f28:	bls	14e84 <_start@@Base+0x2480>
   14f2c:	add	r0, r1, #2
   14f30:	pop	{r4, r5, r6, pc}
   14f34:	mov	r3, #0
   14f38:	mov	r2, r4
   14f3c:	add	r1, r0, #1
   14f40:	str	r3, [r6]
   14f44:	mov	r0, r5
   14f48:	pop	{r4, r5, r6, lr}
   14f4c:	b	12fac <_start@@Base+0x5a8>
   14f50:	mov	r3, #0
   14f54:	str	r3, [r6]
   14f58:	mov	r0, r5
   14f5c:	mov	r2, r4
   14f60:	mov	r1, r4
   14f64:	mov	r3, #9
   14f68:	pop	{r4, r5, r6, lr}
   14f6c:	b	295ac <flatcc_json_parser_set_error@@Base>
   14f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f74:	sub	sp, sp, #92	; 0x5c
   14f78:	cmp	r1, r2
   14f7c:	mov	r5, r2
   14f80:	mov	r6, r0
   14f84:	str	r3, [sp, #64]	; 0x40
   14f88:	beq	14f98 <_start@@Base+0x2594>
   14f8c:	ldrb	r3, [r1]
   14f90:	cmp	r3, #123	; 0x7b
   14f94:	beq	14fb8 <_start@@Base+0x25b4>
   14f98:	mov	r2, r5
   14f9c:	mov	r0, r6
   14fa0:	mov	r3, #21
   14fa4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   14fa8:	mov	r5, r0
   14fac:	mov	r0, r5
   14fb0:	add	sp, sp, #92	; 0x5c
   14fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb8:	add	r4, r1, #1
   14fbc:	sub	r3, r2, r4
   14fc0:	cmp	r3, #1
   14fc4:	ble	14fd8 <_start@@Base+0x25d4>
   14fc8:	ldrb	r3, [r1, #1]
   14fcc:	cmp	r3, #32
   14fd0:	bhi	14fec <_start@@Base+0x25e8>
   14fd4:	beq	15790 <_start@@Base+0x2d8c>
   14fd8:	mov	r1, r4
   14fdc:	mov	r2, r5
   14fe0:	mov	r0, r6
   14fe4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   14fe8:	mov	r4, r0
   14fec:	cmp	r5, r4
   14ff0:	beq	15000 <_start@@Base+0x25fc>
   14ff4:	ldrb	r3, [r4]
   14ff8:	cmp	r3, #125	; 0x7d
   14ffc:	beq	157a4 <_start@@Base+0x2da0>
   15000:	mov	r7, #0
   15004:	strd	r8, [sp, #32]
   15008:	cmp	r5, r4
   1500c:	beq	152b8 <_start@@Base+0x28b4>
   15010:	ldrb	r3, [r4]
   15014:	cmp	r3, #34	; 0x22
   15018:	beq	15478 <_start@@Base+0x2a74>
   1501c:	cmp	r3, #46	; 0x2e
   15020:	movne	r3, #1
   15024:	subne	ip, r5, r4
   15028:	strne	r3, [r6, #12]
   1502c:	beq	155b4 <_start@@Base+0x2bb0>
   15030:	cmp	ip, #8
   15034:	bls	152cc <_start@@Base+0x28c8>
   15038:	mov	r9, #0
   1503c:	ldrb	r2, [r4, #6]
   15040:	lsr	r1, r2, #24
   15044:	lsl	r3, r2, #8
   15048:	str	r1, [sp, #60]	; 0x3c
   1504c:	str	r3, [sp, #56]	; 0x38
   15050:	ldrd	r2, [sp, #56]	; 0x38
   15054:	orr	r3, r3, r9
   15058:	mov	r9, r3
   1505c:	ldrb	r2, [r4, #5]
   15060:	lsr	r1, r2, #16
   15064:	lsl	r3, r2, #16
   15068:	str	r1, [sp, #52]	; 0x34
   1506c:	str	r3, [sp, #48]	; 0x30
   15070:	ldrd	r2, [sp, #48]	; 0x30
   15074:	orr	r3, r3, r9
   15078:	mov	r9, r3
   1507c:	ldrb	r2, [r4, #4]
   15080:	lsr	r1, r2, #8
   15084:	lsl	r3, r2, #24
   15088:	str	r1, [sp, #28]
   1508c:	str	r3, [sp, #24]
   15090:	ldrd	r2, [sp, #24]
   15094:	orr	r3, r3, r9
   15098:	mov	r9, r3
   1509c:	ldrb	r3, [r4, #3]
   150a0:	str	r3, [sp, #44]	; 0x2c
   150a4:	mov	r3, #0
   150a8:	str	r3, [sp, #40]	; 0x28
   150ac:	ldrd	r2, [sp, #40]	; 0x28
   150b0:	orr	r3, r3, r9
   150b4:	mov	r9, r3
   150b8:	ldrb	r2, [r4, #2]
   150bc:	lsl	r3, r2, #8
   150c0:	str	r3, [sp, #20]
   150c4:	mov	r3, #0
   150c8:	str	r3, [sp, #16]
   150cc:	ldrd	r2, [sp, #16]
   150d0:	orr	r3, r3, r9
   150d4:	mov	r9, r3
   150d8:	ldrb	r2, [r4]
   150dc:	ldrb	r0, [r4, #1]
   150e0:	mov	sl, #0
   150e4:	str	sl, [sp, #8]
   150e8:	lsl	r3, r2, #24
   150ec:	str	r3, [sp, #12]
   150f0:	ldrd	r2, [sp, #8]
   150f4:	lsl	fp, r0, #16
   150f8:	orr	r9, r9, fp
   150fc:	orr	r3, r3, r9
   15100:	and	r3, r3, #-16777216	; 0xff000000
   15104:	mov	r2, #0
   15108:	cmp	r3, #1644167168	; 0x62000000
   1510c:	cmpeq	r2, #0
   15110:	strd	r2, [sp, #32]
   15114:	beq	15344 <_start@@Base+0x2940>
   15118:	cmp	r3, #1627389952	; 0x61000000
   1511c:	cmpeq	r2, #0
   15120:	bne	152b8 <_start@@Base+0x28b4>
   15124:	cmp	ip, #1
   15128:	ble	152b8 <_start@@Base+0x28b4>
   1512c:	ldr	r3, [r6, #12]
   15130:	cmp	r3, #0
   15134:	ldrb	r3, [r4, #1]
   15138:	beq	15518 <_start@@Base+0x2b14>
   1513c:	cmp	r3, #58	; 0x3a
   15140:	cmpne	r3, #32
   15144:	movls	r3, #0
   15148:	movhi	r3, #1
   1514c:	strls	r3, [r6, #12]
   15150:	addls	r1, r4, #1
   15154:	bhi	152b8 <_start@@Base+0x28b4>
   15158:	sub	r3, r5, r1
   1515c:	cmp	r3, #1
   15160:	ble	15174 <_start@@Base+0x2770>
   15164:	ldrb	r3, [r1]
   15168:	cmp	r3, #32
   1516c:	bhi	15184 <_start@@Base+0x2780>
   15170:	beq	156c0 <_start@@Base+0x2cbc>
   15174:	mov	r2, r5
   15178:	mov	r0, r6
   1517c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   15180:	mov	r1, r0
   15184:	cmp	r5, r1
   15188:	beq	15198 <_start@@Base+0x2794>
   1518c:	ldrb	r3, [r1]
   15190:	cmp	r3, #58	; 0x3a
   15194:	beq	156e8 <_start@@Base+0x2ce4>
   15198:	mov	r3, #4
   1519c:	mov	r2, r5
   151a0:	mov	r0, r6
   151a4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   151a8:	str	r0, [sp, #68]	; 0x44
   151ac:	ldr	r3, [sp, #68]	; 0x44
   151b0:	cmp	r3, r4
   151b4:	beq	152b8 <_start@@Base+0x28b4>
   151b8:	mov	r4, r3
   151bc:	cmp	r5, r3
   151c0:	mov	r3, #0
   151c4:	strh	r7, [sp, #74]	; 0x4a
   151c8:	str	r3, [sp, #80]	; 0x50
   151cc:	str	r3, [sp, #84]	; 0x54
   151d0:	str	r7, [sp, #76]	; 0x4c
   151d4:	beq	15618 <_start@@Base+0x2c14>
   151d8:	add	r3, sp, #80	; 0x50
   151dc:	str	r3, [sp]
   151e0:	mov	r2, r5
   151e4:	add	r3, sp, #76	; 0x4c
   151e8:	mov	r1, r4
   151ec:	mov	r0, r6
   151f0:	bl	2c350 <flatcc_json_parser_integer@@Base>
   151f4:	cmp	r4, r0
   151f8:	beq	15618 <_start@@Base+0x2c14>
   151fc:	ldr	r1, [sp, #76]	; 0x4c
   15200:	ldrd	r2, [sp, #80]	; 0x50
   15204:	cmp	r1, #0
   15208:	beq	15528 <_start@@Base+0x2b24>
   1520c:	cmp	r3, #0
   15210:	cmpeq	r2, #32768	; 0x8000
   15214:	rsbls	r2, r2, #0
   15218:	sxthls	r2, r2
   1521c:	bhi	155e8 <_start@@Base+0x2be4>
   15220:	ldr	r3, [sp, #64]	; 0x40
   15224:	strh	r2, [r3]
   15228:	sub	r3, r5, r0
   1522c:	cmp	r3, #1
   15230:	ble	15244 <_start@@Base+0x2840>
   15234:	ldrb	r3, [r0]
   15238:	cmp	r3, #32
   1523c:	bhi	15254 <_start@@Base+0x2850>
   15240:	beq	15488 <_start@@Base+0x2a84>
   15244:	mov	r1, r0
   15248:	mov	r2, r5
   1524c:	mov	r0, r6
   15250:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   15254:	cmp	r5, r0
   15258:	beq	14fac <_start@@Base+0x25a8>
   1525c:	ldrb	r3, [r0]
   15260:	cmp	r3, #44	; 0x2c
   15264:	beq	1549c <_start@@Base+0x2a98>
   15268:	cmp	r3, #125	; 0x7d
   1526c:	beq	15444 <_start@@Base+0x2a40>
   15270:	mov	r2, r5
   15274:	mov	r1, r0
   15278:	mov	r3, #10
   1527c:	mov	r0, r6
   15280:	bl	295ac <flatcc_json_parser_set_error@@Base>
   15284:	mov	r5, r0
   15288:	mov	r0, r5
   1528c:	add	sp, sp, #92	; 0x5c
   15290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15294:	ldrb	r2, [r4]
   15298:	lsl	r3, r2, #24
   1529c:	str	r3, [sp, #36]	; 0x24
   152a0:	mov	r3, #0
   152a4:	str	r3, [sp, #32]
   152a8:	ldrd	r2, [sp, #32]
   152ac:	cmp	r3, #1644167168	; 0x62000000
   152b0:	cmpeq	r2, #0
   152b4:	bne	15118 <_start@@Base+0x2714>
   152b8:	mov	r1, r4
   152bc:	mov	r2, r5
   152c0:	mov	r0, r6
   152c4:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   152c8:	b	15228 <_start@@Base+0x2824>
   152cc:	sub	r3, ip, #1
   152d0:	cmp	r3, #7
   152d4:	ldrls	pc, [pc, r3, lsl #2]
   152d8:	b	152b8 <_start@@Base+0x28b4>
   152dc:	muleq	r1, r4, r2
   152e0:	andeq	r5, r1, r8, lsr r3
   152e4:	andeq	r5, r1, ip, lsr #6
   152e8:	andeq	r5, r1, r0, lsr #6
   152ec:	andeq	r5, r1, r4, lsl r3
   152f0:	andeq	r5, r1, r8, lsl #6
   152f4:	strdeq	r5, [r1], -ip
   152f8:	andeq	r5, r1, r8, lsr r0
   152fc:	mov	r8, #0
   15300:	mov	r9, r8
   15304:	b	1503c <_start@@Base+0x2638>
   15308:	mov	r8, #0
   1530c:	mov	r9, r8
   15310:	b	1505c <_start@@Base+0x2658>
   15314:	mov	r8, #0
   15318:	mov	r9, r8
   1531c:	b	1507c <_start@@Base+0x2678>
   15320:	mov	r8, #0
   15324:	mov	r9, r8
   15328:	b	1509c <_start@@Base+0x2698>
   1532c:	mov	r8, #0
   15330:	mov	r9, r8
   15334:	b	150b8 <_start@@Base+0x26b4>
   15338:	mov	r8, #0
   1533c:	mov	r9, r8
   15340:	b	150d8 <_start@@Base+0x26d4>
   15344:	cmp	ip, #1
   15348:	ble	152b8 <_start@@Base+0x28b4>
   1534c:	ldr	r3, [r6, #12]
   15350:	cmp	r3, sl
   15354:	ldrb	r3, [r4, #1]
   15358:	beq	15570 <_start@@Base+0x2b6c>
   1535c:	cmp	r3, #58	; 0x3a
   15360:	cmpne	r3, #32
   15364:	movls	r3, #0
   15368:	movhi	r3, #1
   1536c:	strls	r3, [r6, #12]
   15370:	addls	r1, r4, #1
   15374:	bhi	152b8 <_start@@Base+0x28b4>
   15378:	sub	r3, r5, r1
   1537c:	cmp	r3, #1
   15380:	ble	15394 <_start@@Base+0x2990>
   15384:	ldrb	r3, [r1]
   15388:	cmp	r3, #32
   1538c:	bhi	153a4 <_start@@Base+0x29a0>
   15390:	beq	156d4 <_start@@Base+0x2cd0>
   15394:	mov	r2, r5
   15398:	mov	r0, r6
   1539c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   153a0:	mov	r1, r0
   153a4:	cmp	r5, r1
   153a8:	beq	153b8 <_start@@Base+0x29b4>
   153ac:	ldrb	r3, [r1]
   153b0:	cmp	r3, #58	; 0x3a
   153b4:	beq	15724 <_start@@Base+0x2d20>
   153b8:	mov	r3, #4
   153bc:	mov	r2, r5
   153c0:	mov	r0, r6
   153c4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   153c8:	mov	r8, r0
   153cc:	cmp	r8, r4
   153d0:	beq	152b8 <_start@@Base+0x28b4>
   153d4:	mov	r3, #0
   153d8:	cmp	r5, r8
   153dc:	strb	r7, [sp, #74]	; 0x4a
   153e0:	str	r3, [sp, #80]	; 0x50
   153e4:	str	r3, [sp, #84]	; 0x54
   153e8:	str	r7, [sp, #76]	; 0x4c
   153ec:	beq	15694 <_start@@Base+0x2c90>
   153f0:	add	r3, sp, #80	; 0x50
   153f4:	str	r3, [sp]
   153f8:	mov	r2, r5
   153fc:	add	r3, sp, #76	; 0x4c
   15400:	mov	r1, r8
   15404:	mov	r0, r6
   15408:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1540c:	cmp	r8, r0
   15410:	beq	15694 <_start@@Base+0x2c90>
   15414:	ldr	r1, [sp, #76]	; 0x4c
   15418:	ldrd	r2, [sp, #80]	; 0x50
   1541c:	cmp	r1, #0
   15420:	beq	15580 <_start@@Base+0x2b7c>
   15424:	cmp	r3, #0
   15428:	cmpeq	r2, #128	; 0x80
   1542c:	rsbls	r2, r2, #0
   15430:	sxtbls	r2, r2
   15434:	bhi	15600 <_start@@Base+0x2bfc>
   15438:	ldr	r3, [sp, #64]	; 0x40
   1543c:	strb	r2, [r3, #2]
   15440:	b	15228 <_start@@Base+0x2824>
   15444:	add	r1, r0, #1
   15448:	sub	r3, r5, r1
   1544c:	cmp	r3, #1
   15450:	ble	15464 <_start@@Base+0x2a60>
   15454:	ldrb	r3, [r0, #1]
   15458:	cmp	r3, #32
   1545c:	bhi	15568 <_start@@Base+0x2b64>
   15460:	beq	155d4 <_start@@Base+0x2bd0>
   15464:	mov	r2, r5
   15468:	mov	r0, r6
   1546c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   15470:	mov	r5, r0
   15474:	b	14fac <_start@@Base+0x25a8>
   15478:	add	r4, r4, #1
   1547c:	str	r7, [r6, #12]
   15480:	sub	ip, r5, r4
   15484:	b	15030 <_start@@Base+0x262c>
   15488:	ldrb	r3, [r0, #1]
   1548c:	cmp	r3, #32
   15490:	addhi	r0, r0, #1
   15494:	bls	15244 <_start@@Base+0x2840>
   15498:	b	15254 <_start@@Base+0x2850>
   1549c:	add	r4, r0, #1
   154a0:	sub	r3, r5, r4
   154a4:	cmp	r3, #1
   154a8:	ble	154bc <_start@@Base+0x2ab8>
   154ac:	ldrb	r3, [r0, #1]
   154b0:	cmp	r3, #32
   154b4:	bhi	154d0 <_start@@Base+0x2acc>
   154b8:	beq	15660 <_start@@Base+0x2c5c>
   154bc:	mov	r1, r4
   154c0:	mov	r2, r5
   154c4:	mov	r0, r6
   154c8:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   154cc:	mov	r4, r0
   154d0:	cmp	r5, r4
   154d4:	beq	15678 <_start@@Base+0x2c74>
   154d8:	ldrb	r3, [r4]
   154dc:	cmp	r3, #125	; 0x7d
   154e0:	bne	15008 <_start@@Base+0x2604>
   154e4:	add	r1, r4, #1
   154e8:	sub	r3, r5, r1
   154ec:	cmp	r3, #1
   154f0:	ble	15464 <_start@@Base+0x2a60>
   154f4:	ldrb	r3, [r4, #1]
   154f8:	cmp	r3, #32
   154fc:	bhi	15568 <_start@@Base+0x2b64>
   15500:	bne	15464 <_start@@Base+0x2a60>
   15504:	ldrb	r3, [r4, #2]
   15508:	cmp	r3, #32
   1550c:	addhi	r5, r4, #2
   15510:	bls	15464 <_start@@Base+0x2a60>
   15514:	b	14fac <_start@@Base+0x25a8>
   15518:	cmp	r3, #34	; 0x22
   1551c:	bne	152b8 <_start@@Base+0x28b4>
   15520:	add	r1, r4, #2
   15524:	b	15158 <_start@@Base+0x2754>
   15528:	ldr	r8, [pc, #652]	; 157bc <_start@@Base+0x2db8>
   1552c:	mov	r9, #0
   15530:	cmp	r3, r9
   15534:	cmpeq	r2, r8
   15538:	sxthls	r2, r2
   1553c:	bls	15220 <_start@@Base+0x281c>
   15540:	mov	r1, r0
   15544:	mov	r3, #7
   15548:	mov	r2, r5
   1554c:	mov	r0, r6
   15550:	bl	295ac <flatcc_json_parser_set_error@@Base>
   15554:	ldr	r3, [sp, #68]	; 0x44
   15558:	cmp	r3, r0
   1555c:	beq	15618 <_start@@Base+0x2c14>
   15560:	ldrsh	r2, [sp, #74]	; 0x4a
   15564:	b	15220 <_start@@Base+0x281c>
   15568:	mov	r5, r1
   1556c:	b	14fac <_start@@Base+0x25a8>
   15570:	cmp	r3, #34	; 0x22
   15574:	bne	152b8 <_start@@Base+0x28b4>
   15578:	add	r1, r4, #2
   1557c:	b	15378 <_start@@Base+0x2974>
   15580:	cmp	r3, #0
   15584:	cmpeq	r2, #127	; 0x7f
   15588:	sxtbls	r2, r2
   1558c:	bls	15438 <_start@@Base+0x2a34>
   15590:	mov	r1, r0
   15594:	mov	r3, #7
   15598:	mov	r2, r5
   1559c:	mov	r0, r6
   155a0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   155a4:	cmp	r8, r0
   155a8:	beq	15694 <_start@@Base+0x2c90>
   155ac:	ldrsb	r2, [sp, #74]	; 0x4a
   155b0:	b	15438 <_start@@Base+0x2a34>
   155b4:	mov	r1, r4
   155b8:	mov	r3, #5
   155bc:	mov	r2, r5
   155c0:	mov	r0, r6
   155c4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   155c8:	mov	r4, r0
   155cc:	sub	ip, r5, r0
   155d0:	b	15030 <_start@@Base+0x262c>
   155d4:	ldrb	r3, [r0, #2]
   155d8:	cmp	r3, #32
   155dc:	addhi	r5, r0, #2
   155e0:	bls	15464 <_start@@Base+0x2a60>
   155e4:	b	14fac <_start@@Base+0x25a8>
   155e8:	mov	r1, r0
   155ec:	mov	r3, #8
   155f0:	mov	r2, r5
   155f4:	mov	r0, r6
   155f8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   155fc:	b	15554 <_start@@Base+0x2b50>
   15600:	mov	r1, r0
   15604:	mov	r3, #8
   15608:	mov	r2, r5
   1560c:	mov	r0, r6
   15610:	bl	295ac <flatcc_json_parser_set_error@@Base>
   15614:	b	155a4 <_start@@Base+0x2ba0>
   15618:	ldr	r4, [sp, #68]	; 0x44
   1561c:	add	r3, sp, #74	; 0x4a
   15620:	str	r3, [sp]
   15624:	mov	r2, r5
   15628:	ldr	r3, [pc, #400]	; 157c0 <_start@@Base+0x2dbc>
   1562c:	mov	r1, r4
   15630:	mov	r0, r6
   15634:	bl	13b30 <_start@@Base+0x112c>
   15638:	cmp	r5, r0
   1563c:	cmpne	r0, r4
   15640:	bne	15560 <_start@@Base+0x2b5c>
   15644:	mov	r2, r5
   15648:	mov	r1, r0
   1564c:	mov	r3, #33	; 0x21
   15650:	mov	r0, r6
   15654:	bl	295ac <flatcc_json_parser_set_error@@Base>
   15658:	mov	r5, r0
   1565c:	b	14fac <_start@@Base+0x25a8>
   15660:	ldrb	r3, [r0, #2]
   15664:	cmp	r3, #32
   15668:	addhi	r4, r0, #2
   1566c:	bls	154bc <_start@@Base+0x2ab8>
   15670:	cmp	r5, r4
   15674:	bne	154d8 <_start@@Base+0x2ad4>
   15678:	mov	r2, r5
   1567c:	mov	r1, r5
   15680:	mov	r0, r6
   15684:	mov	r3, #10
   15688:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1568c:	mov	r5, r0
   15690:	b	14fac <_start@@Base+0x25a8>
   15694:	add	r3, sp, #74	; 0x4a
   15698:	str	r3, [sp]
   1569c:	mov	r2, r5
   156a0:	ldr	r3, [pc, #284]	; 157c4 <_start@@Base+0x2dc0>
   156a4:	mov	r1, r8
   156a8:	mov	r0, r6
   156ac:	bl	143e8 <_start@@Base+0x19e4>
   156b0:	cmp	r5, r0
   156b4:	cmpne	r0, r8
   156b8:	bne	155ac <_start@@Base+0x2ba8>
   156bc:	b	15644 <_start@@Base+0x2c40>
   156c0:	ldrb	r3, [r1, #1]
   156c4:	cmp	r3, #32
   156c8:	addhi	r1, r1, #1
   156cc:	bls	15174 <_start@@Base+0x2770>
   156d0:	b	15184 <_start@@Base+0x2780>
   156d4:	ldrb	r3, [r1, #1]
   156d8:	cmp	r3, #32
   156dc:	addhi	r1, r1, #1
   156e0:	bls	15394 <_start@@Base+0x2990>
   156e4:	b	153a4 <_start@@Base+0x29a0>
   156e8:	add	r3, r1, #1
   156ec:	str	r3, [sp, #68]	; 0x44
   156f0:	sub	r3, r5, r3
   156f4:	cmp	r3, #1
   156f8:	ble	1570c <_start@@Base+0x2d08>
   156fc:	ldrb	r3, [r1, #1]
   15700:	cmp	r3, #32
   15704:	bhi	151ac <_start@@Base+0x27a8>
   15708:	beq	15760 <_start@@Base+0x2d5c>
   1570c:	ldr	r1, [sp, #68]	; 0x44
   15710:	mov	r2, r5
   15714:	mov	r0, r6
   15718:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1571c:	str	r0, [sp, #68]	; 0x44
   15720:	b	151ac <_start@@Base+0x27a8>
   15724:	add	r3, r1, #1
   15728:	mov	r8, r3
   1572c:	sub	r3, r5, r3
   15730:	cmp	r3, #1
   15734:	ble	15748 <_start@@Base+0x2d44>
   15738:	ldrb	r3, [r1, #1]
   1573c:	cmp	r3, #32
   15740:	bhi	153cc <_start@@Base+0x29c8>
   15744:	beq	15778 <_start@@Base+0x2d74>
   15748:	mov	r1, r8
   1574c:	mov	r2, r5
   15750:	mov	r0, r6
   15754:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   15758:	mov	r8, r0
   1575c:	b	153cc <_start@@Base+0x29c8>
   15760:	ldrb	r3, [r1, #2]
   15764:	cmp	r3, #32
   15768:	addhi	r3, r1, #2
   1576c:	strhi	r3, [sp, #68]	; 0x44
   15770:	bls	1570c <_start@@Base+0x2d08>
   15774:	b	151ac <_start@@Base+0x27a8>
   15778:	ldrb	r3, [r1, #2]
   1577c:	cmp	r3, #32
   15780:	addhi	r3, r1, #2
   15784:	movhi	r8, r3
   15788:	bls	15748 <_start@@Base+0x2d44>
   1578c:	b	153cc <_start@@Base+0x29c8>
   15790:	ldrb	r3, [r1, #2]
   15794:	cmp	r3, #32
   15798:	addhi	r4, r1, #2
   1579c:	bls	14fd8 <_start@@Base+0x25d4>
   157a0:	b	14fec <_start@@Base+0x25e8>
   157a4:	mov	r2, r5
   157a8:	add	r1, r4, #1
   157ac:	mov	r0, r6
   157b0:	bl	12fac <_start@@Base+0x5a8>
   157b4:	mov	r5, r0
   157b8:	b	14fac <_start@@Base+0x25a8>
   157bc:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   157c0:	andeq	r1, r4, r4, lsl #1
   157c4:	andeq	r1, r4, r8, ror r0
   157c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157cc:	mov	r5, r2
   157d0:	sub	r2, r2, r1
   157d4:	cmp	r2, #8
   157d8:	sub	sp, sp, #8
   157dc:	mov	r4, r1
   157e0:	mov	r8, r0
   157e4:	mov	r9, r3
   157e8:	bls	158b4 <_start@@Base+0x2eb0>
   157ec:	ldrb	r6, [r4, #7]
   157f0:	mov	r7, #0
   157f4:	ldrb	r2, [r4, #6]
   157f8:	lsr	r1, r2, #24
   157fc:	lsl	r0, r2, #8
   15800:	orr	r6, r6, r0
   15804:	orr	r7, r7, r1
   15808:	ldrb	r2, [r4, #5]
   1580c:	lsr	r1, r2, #16
   15810:	lsl	r0, r2, #16
   15814:	orr	r0, r0, r6
   15818:	orr	r1, r1, r7
   1581c:	ldrb	r2, [r4, #4]
   15820:	lsr	r7, r2, #8
   15824:	lsl	r6, r2, #24
   15828:	orr	r6, r6, r0
   1582c:	orr	r7, r7, r1
   15830:	ldrb	r1, [r4, #3]
   15834:	mov	r0, #0
   15838:	orr	r6, r6, r0
   1583c:	orr	r7, r7, r1
   15840:	ldrb	r2, [r4, #2]
   15844:	mov	r0, #0
   15848:	orr	r6, r6, r0
   1584c:	lsl	r1, r2, #8
   15850:	orr	r7, r7, r1
   15854:	ldrb	r2, [r4, #1]
   15858:	mov	r0, #0
   1585c:	orr	r0, r0, r6
   15860:	lsl	r1, r2, #16
   15864:	orr	r1, r1, r7
   15868:	ldrb	r2, [r4]
   1586c:	mov	r6, #0
   15870:	orr	r0, r0, r6
   15874:	lsl	r7, r2, #24
   15878:	add	r3, pc, #376	; 0x178
   1587c:	ldrd	r2, [r3]
   15880:	orr	r1, r1, r7
   15884:	cmp	r1, r3
   15888:	cmpeq	r0, r2
   1588c:	beq	158e4 <_start@@Base+0x2ee0>
   15890:	add	r3, pc, #360	; 0x168
   15894:	ldrd	r2, [r3]
   15898:	mov	r0, #0
   1589c:	cmp	r1, r3
   158a0:	cmpeq	r0, r2
   158a4:	beq	15964 <_start@@Base+0x2f60>
   158a8:	mov	r0, r4
   158ac:	add	sp, sp, #8
   158b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158b4:	sub	r2, r2, #1
   158b8:	cmp	r2, #7
   158bc:	ldrls	pc, [pc, r2, lsl #2]
   158c0:	b	158a8 <_start@@Base+0x2ea4>
   158c4:	andeq	r5, r1, r4, lsr #19
   158c8:			; <UNDEFINED> instruction: 0x000159b0
   158cc:			; <UNDEFINED> instruction: 0x000159bc
   158d0:	andeq	r5, r1, r8, asr #19
   158d4:	ldrdeq	r5, [r1], -r4
   158d8:	andeq	r5, r1, r0, ror #19
   158dc:	andeq	r5, r1, ip, ror #19
   158e0:	andeq	r5, r1, ip, ror #15
   158e4:	mov	r1, r5
   158e8:	add	r0, r4, #8
   158ec:	bl	12b30 <_start@@Base+0x12c>
   158f0:	add	r3, pc, #272	; 0x110
   158f4:	ldrd	r2, [r3]
   158f8:	cmp	r1, r3
   158fc:	cmpeq	r0, r2
   15900:	bne	158a8 <_start@@Base+0x2ea4>
   15904:	add	sl, r4, #16
   15908:	mov	r0, sl
   1590c:	mov	r1, r5
   15910:	bl	12b30 <_start@@Base+0x12c>
   15914:	mov	r0, #0
   15918:	and	r1, r1, #-16777216	; 0xff000000
   1591c:	cmp	r1, #1694498816	; 0x65000000
   15920:	cmpeq	r0, #0
   15924:	bne	158a8 <_start@@Base+0x2ea4>
   15928:	ldr	r3, [sp, #44]	; 0x2c
   1592c:	mov	r2, r5
   15930:	str	r3, [sp]
   15934:	mov	r0, r8
   15938:	mov	r3, #1
   1593c:	mov	r1, sl
   15940:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15944:	cmp	sl, r0
   15948:	beq	158a8 <_start@@Base+0x2ea4>
   1594c:	ldr	r1, [sp, #40]	; 0x28
   15950:	mov	r2, #1
   15954:	mov	r3, #0
   15958:	strd	r2, [r1]
   1595c:	str	r6, [r9]
   15960:	b	158ac <_start@@Base+0x2ea8>
   15964:	ldr	r3, [sp, #44]	; 0x2c
   15968:	mov	r2, r5
   1596c:	str	r3, [sp]
   15970:	mov	r0, r8
   15974:	mov	r3, #4
   15978:	mov	r1, r4
   1597c:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15980:	cmp	r4, r0
   15984:	beq	158ac <_start@@Base+0x2ea8>
   15988:	ldr	r1, [sp, #40]	; 0x28
   1598c:	mov	r2, #0
   15990:	mov	r3, #0
   15994:	strd	r2, [r1]
   15998:	str	r6, [r9]
   1599c:	add	sp, sp, #8
   159a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159a4:	mov	r0, #0
   159a8:	mov	r1, #0
   159ac:	b	15868 <_start@@Base+0x2e64>
   159b0:	mov	r6, #0
   159b4:	mov	r7, #0
   159b8:	b	15854 <_start@@Base+0x2e50>
   159bc:	mov	r6, #0
   159c0:	mov	r7, #0
   159c4:	b	15840 <_start@@Base+0x2e3c>
   159c8:	mov	r6, #0
   159cc:	mov	r7, #0
   159d0:	b	15830 <_start@@Base+0x2e2c>
   159d4:	mov	r0, #0
   159d8:	mov	r1, #0
   159dc:	b	1581c <_start@@Base+0x2e18>
   159e0:	mov	r6, #0
   159e4:	mov	r7, #0
   159e8:	b	15808 <_start@@Base+0x2e04>
   159ec:	mov	r6, #0
   159f0:	mov	r7, #0
   159f4:	b	157f4 <_start@@Base+0x2df0>
   159f8:	rsbvc	r6, r5, #116, 28	; 0x740
   159fc:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   15a00:	andeq	r0, r0, r0
   15a04:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   15a08:	cmnvc	r0, #-1073741800	; 0xc0000018
   15a0c:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   15a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a14:	mov	r6, r1
   15a18:	sub	r1, r2, r1
   15a1c:	cmp	r1, #8
   15a20:	sub	sp, sp, #12
   15a24:	mov	r7, r3
   15a28:	bls	15b08 <_start@@Base+0x3104>
   15a2c:	ldrb	sl, [r6, #7]
   15a30:	mov	fp, #0
   15a34:	ldrb	r4, [r6, #6]
   15a38:	lsr	r9, r4, #24
   15a3c:	lsl	r8, r4, #8
   15a40:	orr	sl, sl, r8
   15a44:	orr	fp, fp, r9
   15a48:	ldrb	r4, [r6, #5]
   15a4c:	lsr	r9, r4, #16
   15a50:	lsl	r8, r4, #16
   15a54:	orr	r8, r8, sl
   15a58:	orr	r9, r9, fp
   15a5c:	ldrb	r4, [r6, #4]
   15a60:	lsr	fp, r4, #8
   15a64:	lsl	sl, r4, #24
   15a68:	orr	sl, sl, r8
   15a6c:	orr	fp, fp, r9
   15a70:	ldrb	r9, [r6, #3]
   15a74:	mov	r8, #0
   15a78:	orr	sl, sl, r8
   15a7c:	orr	fp, fp, r9
   15a80:	ldrb	r4, [r6, #2]
   15a84:	mov	r8, #0
   15a88:	orr	sl, sl, r8
   15a8c:	lsl	r9, r4, #8
   15a90:	orr	fp, fp, r9
   15a94:	ldrb	r4, [r6, #1]
   15a98:	mov	r8, #0
   15a9c:	orr	r8, r8, sl
   15aa0:	lsl	r9, r4, #16
   15aa4:	orr	r9, r9, fp
   15aa8:	ldrb	sl, [r6]
   15aac:	mov	r4, #0
   15ab0:	orr	r4, r4, r8
   15ab4:	lsl	r5, sl, #24
   15ab8:	add	fp, pc, #392	; 0x188
   15abc:	ldrd	sl, [fp]
   15ac0:	orr	r5, r5, r9
   15ac4:	cmp	r5, fp
   15ac8:	cmpeq	r4, sl
   15acc:	bls	15b38 <_start@@Base+0x3134>
   15ad0:	add	fp, pc, #376	; 0x178
   15ad4:	ldrd	sl, [fp]
   15ad8:	mov	r4, #0
   15adc:	cmp	r5, fp
   15ae0:	cmpeq	r4, sl
   15ae4:	beq	15c24 <_start@@Base+0x3220>
   15ae8:	add	r9, pc, #360	; 0x168
   15aec:	ldrd	r8, [r9]
   15af0:	cmp	r5, r9
   15af4:	cmpeq	r4, r8
   15af8:	beq	15b94 <_start@@Base+0x3190>
   15afc:	mov	r0, r6
   15b00:	add	sp, sp, #12
   15b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b08:	sub	r1, r1, #1
   15b0c:	cmp	r1, #7
   15b10:	ldrls	pc, [pc, r1, lsl #2]
   15b14:	b	15afc <_start@@Base+0x30f8>
   15b18:	ldrdeq	r5, [r1], -r0
   15b1c:	strdeq	r5, [r1], -r4
   15b20:	andeq	r5, r1, r0, lsl #24
   15b24:	andeq	r5, r1, ip, lsl #24
   15b28:	andeq	r5, r1, r8, lsl ip
   15b2c:	ldrdeq	r5, [r1], -ip
   15b30:	andeq	r5, r1, r8, ror #23
   15b34:	andeq	r5, r1, ip, lsr #20
   15b38:	add	fp, pc, #288	; 0x120
   15b3c:	ldrd	sl, [fp]
   15b40:	mov	r4, #0
   15b44:	cmp	r5, fp
   15b48:	cmpeq	r4, sl
   15b4c:	bne	15afc <_start@@Base+0x30f8>
   15b50:	ldr	r3, [sp, #52]	; 0x34
   15b54:	mov	r1, r6
   15b58:	str	r3, [sp]
   15b5c:	mov	r3, #4
   15b60:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15b64:	cmp	r6, r0
   15b68:	mvnne	r4, #11
   15b6c:	beq	15afc <_start@@Base+0x30f8>
   15b70:	ldr	r2, [sp, #48]	; 0x30
   15b74:	mvn	r5, #0
   15b78:	mov	r3, #1
   15b7c:	mov	r6, r0
   15b80:	strd	r4, [r2]
   15b84:	mov	r0, r6
   15b88:	str	r3, [r7]
   15b8c:	add	sp, sp, #12
   15b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b94:	ldr	r3, [sp, #52]	; 0x34
   15b98:	mov	r1, r6
   15b9c:	str	r3, [sp]
   15ba0:	mov	r3, #4
   15ba4:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15ba8:	cmp	r6, r0
   15bac:	beq	15afc <_start@@Base+0x30f8>
   15bb0:	ldr	r2, [sp, #48]	; 0x30
   15bb4:	mov	r6, r0
   15bb8:	mvn	r1, #0
   15bbc:	mvn	r0, #10
   15bc0:	mov	r3, #1
   15bc4:	strd	r0, [r2]
   15bc8:	str	r3, [r7]
   15bcc:	b	15afc <_start@@Base+0x30f8>
   15bd0:	mov	r8, #0
   15bd4:	mov	r9, #0
   15bd8:	b	15aa8 <_start@@Base+0x30a4>
   15bdc:	mov	sl, #0
   15be0:	mov	fp, #0
   15be4:	b	15a48 <_start@@Base+0x3044>
   15be8:	mov	sl, #0
   15bec:	mov	fp, #0
   15bf0:	b	15a34 <_start@@Base+0x3030>
   15bf4:	mov	sl, #0
   15bf8:	mov	fp, #0
   15bfc:	b	15a94 <_start@@Base+0x3090>
   15c00:	mov	sl, #0
   15c04:	mov	fp, #0
   15c08:	b	15a80 <_start@@Base+0x307c>
   15c0c:	mov	sl, #0
   15c10:	mov	fp, #0
   15c14:	b	15a70 <_start@@Base+0x306c>
   15c18:	mov	r8, #0
   15c1c:	mov	r9, #0
   15c20:	b	15a5c <_start@@Base+0x3058>
   15c24:	ldr	r3, [sp, #52]	; 0x34
   15c28:	mov	r1, r6
   15c2c:	str	r3, [sp]
   15c30:	mov	r3, #4
   15c34:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15c38:	cmp	r6, r0
   15c3c:	beq	15afc <_start@@Base+0x30f8>
   15c40:	mvn	r4, #9
   15c44:	b	15b70 <_start@@Base+0x316c>
   15c48:			; <UNDEFINED> instruction: 0xffffffff
   15c4c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   15c50:	andeq	r0, r0, r0
   15c54:	mcrvs	7, 3, r6, cr5, cr3, {1}
   15c58:	andeq	r0, r0, r0
   15c5c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   15c60:	andeq	r0, r0, r0
   15c64:	mcrvs	7, 3, r6, cr5, cr1, {1}
   15c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c6c:	mov	r6, r1
   15c70:	sub	r1, r2, r1
   15c74:	cmp	r1, #8
   15c78:	sub	sp, sp, #12
   15c7c:	mov	ip, r0
   15c80:	mov	r7, r3
   15c84:	bls	15d6c <_start@@Base+0x3368>
   15c88:	ldrb	r8, [r6, #7]
   15c8c:	mov	r9, #0
   15c90:	ldrb	r0, [r6, #6]
   15c94:	lsr	r5, r0, #24
   15c98:	lsl	r4, r0, #8
   15c9c:	orr	r8, r8, r4
   15ca0:	orr	r9, r9, r5
   15ca4:	ldrb	r0, [r6, #5]
   15ca8:	lsr	r5, r0, #16
   15cac:	lsl	r4, r0, #16
   15cb0:	orr	r4, r4, r8
   15cb4:	orr	r5, r5, r9
   15cb8:	ldrb	r0, [r6, #4]
   15cbc:	lsr	r9, r0, #8
   15cc0:	lsl	r8, r0, #24
   15cc4:	orr	r8, r8, r4
   15cc8:	orr	r9, r9, r5
   15ccc:	ldrb	r1, [r6, #3]
   15cd0:	mov	r0, #0
   15cd4:	orr	r8, r8, r0
   15cd8:	orr	r9, r9, r1
   15cdc:	ldrb	r4, [r6, #2]
   15ce0:	mov	r0, #0
   15ce4:	orr	r8, r8, r0
   15ce8:	lsl	r1, r4, #8
   15cec:	orr	r9, r9, r1
   15cf0:	ldrb	r4, [r6, #1]
   15cf4:	mov	r0, #0
   15cf8:	orr	r0, r0, r8
   15cfc:	lsl	r1, r4, #16
   15d00:	orr	r1, r1, r9
   15d04:	ldrb	r8, [r6]
   15d08:	mov	r4, #0
   15d0c:	orr	r0, r0, r4
   15d10:	lsl	r5, r8, #24
   15d14:	add	r9, pc, #404	; 0x194
   15d18:	ldrd	r8, [r9]
   15d1c:	orr	r1, r1, r5
   15d20:	cmp	r1, r9
   15d24:	cmpeq	r0, r8
   15d28:	bls	15d9c <_start@@Base+0x3398>
   15d2c:	add	r9, pc, #388	; 0x184
   15d30:	ldrd	r8, [r9]
   15d34:	bic	fp, r1, #255	; 0xff
   15d38:	mov	sl, #0
   15d3c:	cmp	fp, r9
   15d40:	cmpeq	sl, r8
   15d44:	beq	15e88 <_start@@Base+0x3484>
   15d48:	add	r9, pc, #368	; 0x170
   15d4c:	ldrd	r8, [r9]
   15d50:	and	r0, r0, #-16777216	; 0xff000000
   15d54:	cmp	r1, r9
   15d58:	cmpeq	r0, r8
   15d5c:	beq	15df8 <_start@@Base+0x33f4>
   15d60:	mov	r0, r6
   15d64:	add	sp, sp, #12
   15d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d6c:	sub	r1, r1, #1
   15d70:	cmp	r1, #7
   15d74:	ldrls	pc, [pc, r1, lsl #2]
   15d78:	b	15d60 <_start@@Base+0x335c>
   15d7c:	andeq	r5, r1, r4, lsr lr
   15d80:	andeq	r5, r1, r8, asr lr
   15d84:	andeq	r5, r1, r4, ror #28
   15d88:	andeq	r5, r1, r0, ror lr
   15d8c:	andeq	r5, r1, ip, ror lr
   15d90:	andeq	r5, r1, r0, asr #28
   15d94:	andeq	r5, r1, ip, asr #28
   15d98:	andeq	r5, r1, r8, lsl #25
   15d9c:	add	r9, pc, #292	; 0x124
   15da0:	ldrd	r8, [r9]
   15da4:	mov	r0, #0
   15da8:	cmp	r1, r9
   15dac:	cmpeq	r0, r8
   15db0:	bne	15d60 <_start@@Base+0x335c>
   15db4:	ldr	r3, [sp, #52]	; 0x34
   15db8:	mov	r0, ip
   15dbc:	str	r3, [sp]
   15dc0:	mov	r1, r6
   15dc4:	mov	r3, #4
   15dc8:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15dcc:	cmp	r6, r0
   15dd0:	movne	r2, #8
   15dd4:	beq	15d60 <_start@@Base+0x335c>
   15dd8:	ldr	r1, [sp, #48]	; 0x30
   15ddc:	mov	r3, #0
   15de0:	mov	r6, r0
   15de4:	strd	r2, [r1]
   15de8:	mov	r0, r6
   15dec:	str	r4, [r7]
   15df0:	add	sp, sp, #12
   15df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15df8:	ldr	r3, [sp, #52]	; 0x34
   15dfc:	mov	r0, ip
   15e00:	str	r3, [sp]
   15e04:	mov	r1, r6
   15e08:	mov	r3, #5
   15e0c:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15e10:	cmp	r6, r0
   15e14:	beq	15d60 <_start@@Base+0x335c>
   15e18:	ldr	r1, [sp, #48]	; 0x30
   15e1c:	mov	r2, #2
   15e20:	mov	r3, #0
   15e24:	mov	r6, r0
   15e28:	strd	r2, [r1]
   15e2c:	str	r4, [r7]
   15e30:	b	15d60 <_start@@Base+0x335c>
   15e34:	mov	r0, #0
   15e38:	mov	r1, #0
   15e3c:	b	15d04 <_start@@Base+0x3300>
   15e40:	mov	r8, #0
   15e44:	mov	r9, #0
   15e48:	b	15ca4 <_start@@Base+0x32a0>
   15e4c:	mov	r8, #0
   15e50:	mov	r9, #0
   15e54:	b	15c90 <_start@@Base+0x328c>
   15e58:	mov	r8, #0
   15e5c:	mov	r9, #0
   15e60:	b	15cf0 <_start@@Base+0x32ec>
   15e64:	mov	r8, #0
   15e68:	mov	r9, #0
   15e6c:	b	15cdc <_start@@Base+0x32d8>
   15e70:	mov	r8, #0
   15e74:	mov	r9, #0
   15e78:	b	15ccc <_start@@Base+0x32c8>
   15e7c:	mov	r4, #0
   15e80:	mov	r5, #0
   15e84:	b	15cb8 <_start@@Base+0x32b4>
   15e88:	ldr	r3, [sp, #52]	; 0x34
   15e8c:	mov	r0, ip
   15e90:	str	r3, [sp]
   15e94:	mov	r1, r6
   15e98:	mov	r3, #3
   15e9c:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   15ea0:	cmp	r6, r0
   15ea4:	beq	15d60 <_start@@Base+0x335c>
   15ea8:	mov	r2, #1
   15eac:	b	15dd8 <_start@@Base+0x33d4>
   15eb0:	ldclvs	15, cr15, [pc, #1020]!	; 162b4 <_start@@Base+0x38b0>
   15eb4:	ldrbmi	r6, [r2, -r5, ror #10]!
   15eb8:	andeq	r0, r0, r0
   15ebc:	rsbpl	r6, r5, #0, 8
   15ec0:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   15ec4:	ldrbmi	r6, [r2, -r5, ror #10]!
   15ec8:	andeq	r0, r0, r0
   15ecc:	rsbmi	r7, ip, #423624704	; 0x19400000
   15ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ed4:	mov	r6, r1
   15ed8:	sub	r1, r2, r1
   15edc:	cmp	r1, #8
   15ee0:	sub	sp, sp, #12
   15ee4:	mov	ip, r0
   15ee8:	mov	r7, r3
   15eec:	bls	15fdc <_start@@Base+0x35d8>
   15ef0:	ldrb	r8, [r6, #7]
   15ef4:	mov	r9, #0
   15ef8:	ldrb	r0, [r6, #6]
   15efc:	lsr	r5, r0, #24
   15f00:	lsl	r4, r0, #8
   15f04:	orr	r8, r8, r4
   15f08:	orr	r9, r9, r5
   15f0c:	ldrb	r0, [r6, #5]
   15f10:	lsr	r5, r0, #16
   15f14:	lsl	r4, r0, #16
   15f18:	orr	r4, r4, r8
   15f1c:	orr	r5, r5, r9
   15f20:	ldrb	r0, [r6, #4]
   15f24:	lsr	r9, r0, #8
   15f28:	lsl	r8, r0, #24
   15f2c:	orr	r8, r8, r4
   15f30:	orr	r9, r9, r5
   15f34:	ldrb	r1, [r6, #3]
   15f38:	mov	r0, #0
   15f3c:	orr	r8, r8, r0
   15f40:	orr	r9, r9, r1
   15f44:	ldrb	r4, [r6, #2]
   15f48:	mov	r0, #0
   15f4c:	orr	r8, r8, r0
   15f50:	lsl	r1, r4, #8
   15f54:	orr	r9, r9, r1
   15f58:	ldrb	r4, [r6, #1]
   15f5c:	mov	r0, #0
   15f60:	orr	r0, r0, r8
   15f64:	lsl	r1, r4, #16
   15f68:	orr	r1, r1, r9
   15f6c:	ldrb	r8, [r6]
   15f70:	mov	r4, #0
   15f74:	orr	r0, r0, r4
   15f78:	lsl	r5, r8, #24
   15f7c:	add	r9, pc, #428	; 0x1ac
   15f80:	ldrd	r8, [r9]
   15f84:	orr	r1, r1, r5
   15f88:	cmp	r1, r9
   15f8c:	cmpeq	r0, r8
   15f90:	bls	1600c <_start@@Base+0x3608>
   15f94:	add	fp, pc, #412	; 0x19c
   15f98:	ldrd	sl, [fp]
   15f9c:	ldr	r8, [pc, #436]	; 16158 <_start@@Base+0x3754>
   15fa0:	mvn	r9, #0
   15fa4:	and	r9, r9, r1
   15fa8:	and	r8, r8, r0
   15fac:	cmp	r9, fp
   15fb0:	cmpeq	r8, sl
   15fb4:	beq	160f0 <_start@@Base+0x36ec>
   15fb8:	add	r9, pc, #384	; 0x180
   15fbc:	ldrd	r8, [r9]
   15fc0:	mov	r0, #0
   15fc4:	cmp	r1, r9
   15fc8:	cmpeq	r0, r8
   15fcc:	beq	16060 <_start@@Base+0x365c>
   15fd0:	mov	r0, r6
   15fd4:	add	sp, sp, #12
   15fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fdc:	sub	r1, r1, #1
   15fe0:	cmp	r1, #7
   15fe4:	ldrls	pc, [pc, r1, lsl #2]
   15fe8:	b	15fd0 <_start@@Base+0x35cc>
   15fec:	muleq	r1, ip, r0
   15ff0:	andeq	r6, r1, r0, asr #1
   15ff4:	andeq	r6, r1, ip, asr #1
   15ff8:	ldrdeq	r6, [r1], -r8
   15ffc:	andeq	r6, r1, r4, ror #1
   16000:	andeq	r6, r1, r8, lsr #1
   16004:	strheq	r6, [r1], -r4
   16008:	strdeq	r5, [r1], -r0
   1600c:	add	r9, pc, #308	; 0x134
   16010:	ldrd	r8, [r9]
   16014:	mov	r0, #0
   16018:	cmp	r1, r9
   1601c:	cmpeq	r0, r8
   16020:	bne	15fd0 <_start@@Base+0x35cc>
   16024:	ldr	r3, [sp, #52]	; 0x34
   16028:	mov	r0, ip
   1602c:	str	r3, [sp]
   16030:	mov	r1, r6
   16034:	mov	r3, #4
   16038:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   1603c:	cmp	r6, r0
   16040:	beq	15fd0 <_start@@Base+0x35cc>
   16044:	ldr	r1, [sp, #48]	; 0x30
   16048:	mov	r2, #3
   1604c:	mov	r3, #0
   16050:	mov	r6, r0
   16054:	strd	r2, [r1]
   16058:	str	r4, [r7]
   1605c:	b	15fd0 <_start@@Base+0x35cc>
   16060:	ldr	r3, [sp, #52]	; 0x34
   16064:	mov	r0, ip
   16068:	str	r3, [sp]
   1606c:	mov	r1, r6
   16070:	mov	r3, #4
   16074:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16078:	cmp	r6, r0
   1607c:	beq	15fd0 <_start@@Base+0x35cc>
   16080:	add	r3, pc, #200	; 0xc8
   16084:	ldrd	r2, [r3]
   16088:	ldr	r1, [sp, #48]	; 0x30
   1608c:	mov	r6, r0
   16090:	strd	r2, [r1]
   16094:	str	r4, [r7]
   16098:	b	15fd0 <_start@@Base+0x35cc>
   1609c:	mov	r0, #0
   160a0:	mov	r1, #0
   160a4:	b	15f6c <_start@@Base+0x3568>
   160a8:	mov	r8, #0
   160ac:	mov	r9, #0
   160b0:	b	15f0c <_start@@Base+0x3508>
   160b4:	mov	r8, #0
   160b8:	mov	r9, #0
   160bc:	b	15ef8 <_start@@Base+0x34f4>
   160c0:	mov	r8, #0
   160c4:	mov	r9, #0
   160c8:	b	15f58 <_start@@Base+0x3554>
   160cc:	mov	r8, #0
   160d0:	mov	r9, #0
   160d4:	b	15f44 <_start@@Base+0x3540>
   160d8:	mov	r8, #0
   160dc:	mov	r9, #0
   160e0:	b	15f34 <_start@@Base+0x3530>
   160e4:	mov	r4, #0
   160e8:	mov	r5, #0
   160ec:	b	15f20 <_start@@Base+0x351c>
   160f0:	ldr	r3, [sp, #52]	; 0x34
   160f4:	mov	r0, ip
   160f8:	str	r3, [sp]
   160fc:	mov	r1, r6
   16100:	mov	r3, #6
   16104:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16108:	cmp	r6, r0
   1610c:	beq	15fd0 <_start@@Base+0x35cc>
   16110:	ldr	r2, [sp, #48]	; 0x30
   16114:	mvn	r4, #1
   16118:	mvn	r5, #0
   1611c:	mov	r3, #1
   16120:	strd	r4, [r2]
   16124:	mov	r6, r0
   16128:	str	r3, [r7]
   1612c:	b	15fd0 <_start@@Base+0x35cc>
   16130:			; <UNDEFINED> instruction: 0xffffffff
   16134:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16138:	strbvs	r0, [r7, #-0]!
   1613c:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16140:	andeq	r0, r0, r0
   16144:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16148:	andeq	r0, r0, r0
   1614c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16150:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16154:	andeq	r0, r0, r0
   16158:			; <UNDEFINED> instruction: 0xffff0000
   1615c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16160:	sub	sp, sp, #148	; 0x94
   16164:	mov	r8, r0
   16168:	mov	r0, r3
   1616c:	str	r3, [sp, #124]	; 0x7c
   16170:	mov	r4, r2
   16174:	mov	r3, #0
   16178:	mov	r2, #4
   1617c:	str	r3, [r0]
   16180:	mov	r5, r1
   16184:	ldr	r0, [r8]
   16188:	mov	r1, r2
   1618c:	bl	22e34 <flatcc_builder_start_struct@@Base>
   16190:	subs	r3, r0, #0
   16194:	str	r3, [sp, #116]	; 0x74
   16198:	beq	16960 <_start@@Base+0x3f5c>
   1619c:	cmp	r5, r4
   161a0:	beq	161b0 <_start@@Base+0x37ac>
   161a4:	ldrb	r3, [r5]
   161a8:	cmp	r3, #123	; 0x7b
   161ac:	beq	16210 <_start@@Base+0x380c>
   161b0:	mov	r1, r5
   161b4:	mov	r3, #21
   161b8:	mov	r2, r4
   161bc:	mov	r0, r8
   161c0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   161c4:	mov	r1, r0
   161c8:	cmp	r4, r1
   161cc:	beq	161f0 <_start@@Base+0x37ec>
   161d0:	ldr	r0, [r8]
   161d4:	str	r1, [sp, #8]
   161d8:	bl	22ff0 <flatcc_builder_end_struct@@Base>
   161dc:	ldr	r3, [sp, #124]	; 0x7c
   161e0:	ldr	r1, [sp, #8]
   161e4:	cmp	r0, #0
   161e8:	str	r0, [r3]
   161ec:	bne	16204 <_start@@Base+0x3800>
   161f0:	mov	r2, r4
   161f4:	mov	r0, r8
   161f8:	mov	r3, #33	; 0x21
   161fc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   16200:	mov	r1, r0
   16204:	mov	r0, r1
   16208:	add	sp, sp, #148	; 0x94
   1620c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16210:	add	r3, r5, #1
   16214:	sub	r2, r4, r3
   16218:	cmp	r2, #1
   1621c:	ble	16230 <_start@@Base+0x382c>
   16220:	ldrb	r2, [r5, #1]
   16224:	cmp	r2, #32
   16228:	bhi	16244 <_start@@Base+0x3840>
   1622c:	beq	169d4 <_start@@Base+0x3fd0>
   16230:	mov	r1, r3
   16234:	mov	r2, r4
   16238:	mov	r0, r8
   1623c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   16240:	mov	r3, r0
   16244:	cmp	r4, r3
   16248:	beq	16258 <_start@@Base+0x3854>
   1624c:	ldrb	r2, [r3]
   16250:	cmp	r2, #125	; 0x7d
   16254:	beq	169e8 <_start@@Base+0x3fe4>
   16258:	mov	r9, #0
   1625c:	mov	r1, r3
   16260:	cmp	r4, r1
   16264:	beq	16574 <_start@@Base+0x3b70>
   16268:	ldrb	r3, [r1]
   1626c:	cmp	r3, #34	; 0x22
   16270:	moveq	r3, #0
   16274:	addeq	r1, r1, #1
   16278:	streq	r3, [r8, #12]
   1627c:	beq	16290 <_start@@Base+0x388c>
   16280:	cmp	r3, #46	; 0x2e
   16284:	movne	r3, #1
   16288:	strne	r3, [r8, #12]
   1628c:	beq	16870 <_start@@Base+0x3e6c>
   16290:	sub	r3, r4, r1
   16294:	cmp	r3, #8
   16298:	bls	16584 <_start@@Base+0x3b80>
   1629c:	ldrb	r6, [r1, #7]
   162a0:	mov	r7, #0
   162a4:	ldrb	r2, [r1, #6]
   162a8:	lsr	r0, r2, #24
   162ac:	lsl	r3, r2, #8
   162b0:	str	r0, [sp, #76]	; 0x4c
   162b4:	str	r3, [sp, #72]	; 0x48
   162b8:	ldrd	r2, [sp, #72]	; 0x48
   162bc:	orr	r2, r2, r6
   162c0:	orr	r3, r3, r7
   162c4:	ldrb	r6, [r1, #5]
   162c8:	lsr	r0, r6, #16
   162cc:	str	r0, [sp, #52]	; 0x34
   162d0:	lsl	r0, r6, #16
   162d4:	str	r0, [sp, #48]	; 0x30
   162d8:	ldrd	r6, [sp, #48]	; 0x30
   162dc:	orr	r6, r6, r2
   162e0:	orr	r7, r7, r3
   162e4:	mov	r2, r6
   162e8:	mov	r3, r7
   162ec:	ldrb	r6, [r1, #4]
   162f0:	lsr	r0, r6, #8
   162f4:	str	r0, [sp, #28]
   162f8:	lsl	r0, r6, #24
   162fc:	str	r0, [sp, #24]
   16300:	ldrd	r6, [sp, #24]
   16304:	orr	r6, r6, r2
   16308:	orr	r7, r7, r3
   1630c:	mov	r2, r6
   16310:	mov	r3, r7
   16314:	ldrb	r0, [r1, #3]
   16318:	str	r0, [sp, #36]	; 0x24
   1631c:	mov	r0, #0
   16320:	str	r0, [sp, #32]
   16324:	ldrd	r6, [sp, #32]
   16328:	orr	r6, r6, r2
   1632c:	orr	r7, r7, r3
   16330:	mov	r2, r6
   16334:	mov	r3, r7
   16338:	ldrb	r6, [r1, #2]
   1633c:	lsl	r0, r6, #8
   16340:	str	r0, [sp, #20]
   16344:	mov	r0, #0
   16348:	str	r0, [sp, #16]
   1634c:	ldrd	r6, [sp, #16]
   16350:	orr	r6, r6, r2
   16354:	orr	r7, r7, r3
   16358:	mov	r2, r6
   1635c:	mov	r3, r7
   16360:	ldrb	r6, [r1, #1]
   16364:	lsl	r0, r6, #16
   16368:	str	r0, [sp, #12]
   1636c:	mov	r0, #0
   16370:	str	r0, [sp, #8]
   16374:	ldrd	r6, [sp, #8]
   16378:	orr	r6, r6, r2
   1637c:	orr	r7, r7, r3
   16380:	mov	r2, r6
   16384:	mov	r3, r7
   16388:	ldrb	r6, [r1]
   1638c:	mov	sl, #0
   16390:	orr	r2, r2, sl
   16394:	lsl	fp, r6, #24
   16398:	add	r7, pc, #960	; 0x3c0
   1639c:	ldrd	r6, [r7]
   163a0:	orr	r3, r3, fp
   163a4:	cmp	r3, r7
   163a8:	cmpeq	r2, r6
   163ac:	bne	16574 <_start@@Base+0x3b70>
   163b0:	add	r5, r1, #8
   163b4:	sub	r0, r4, r5
   163b8:	cmp	r0, #8
   163bc:	bls	16608 <_start@@Base+0x3c04>
   163c0:	ldrb	r6, [r1, #15]
   163c4:	mov	r7, #0
   163c8:	ldrb	r2, [r1, #14]
   163cc:	lsr	ip, r2, #24
   163d0:	lsl	r3, r2, #8
   163d4:	str	ip, [sp, #108]	; 0x6c
   163d8:	str	r3, [sp, #104]	; 0x68
   163dc:	ldrd	r2, [sp, #104]	; 0x68
   163e0:	orr	r2, r2, r6
   163e4:	orr	r3, r3, r7
   163e8:	mov	r6, r2
   163ec:	mov	r7, r3
   163f0:	ldrb	r2, [r1, #13]
   163f4:	lsr	ip, r2, #16
   163f8:	lsl	r3, r2, #16
   163fc:	str	ip, [sp, #100]	; 0x64
   16400:	str	r3, [sp, #96]	; 0x60
   16404:	ldrd	r2, [sp, #96]	; 0x60
   16408:	orr	r2, r2, r6
   1640c:	orr	r3, r3, r7
   16410:	mov	r6, r2
   16414:	mov	r7, r3
   16418:	ldrb	r2, [r1, #12]
   1641c:	lsr	ip, r2, #8
   16420:	lsl	r3, r2, #24
   16424:	str	ip, [sp, #84]	; 0x54
   16428:	str	r3, [sp, #80]	; 0x50
   1642c:	ldrd	r2, [sp, #80]	; 0x50
   16430:	orr	r2, r2, r6
   16434:	orr	r3, r3, r7
   16438:	mov	r6, r2
   1643c:	mov	r7, r3
   16440:	ldrb	r3, [r1, #11]
   16444:	str	r3, [sp, #92]	; 0x5c
   16448:	mov	r3, #0
   1644c:	str	r3, [sp, #88]	; 0x58
   16450:	ldrd	r2, [sp, #88]	; 0x58
   16454:	orr	r2, r2, r6
   16458:	orr	r3, r3, r7
   1645c:	mov	r6, r2
   16460:	mov	r7, r3
   16464:	ldrb	r2, [r1, #10]
   16468:	lsl	r3, r2, #8
   1646c:	str	r3, [sp, #68]	; 0x44
   16470:	mov	r3, #0
   16474:	str	r3, [sp, #64]	; 0x40
   16478:	ldrd	r2, [sp, #64]	; 0x40
   1647c:	orr	r2, r2, r6
   16480:	orr	r3, r3, r7
   16484:	ldrb	r6, [r1, #9]
   16488:	lsl	ip, r6, #16
   1648c:	str	ip, [sp, #60]	; 0x3c
   16490:	mov	ip, #0
   16494:	str	ip, [sp, #56]	; 0x38
   16498:	ldrd	r6, [sp, #56]	; 0x38
   1649c:	orr	r6, r6, r2
   164a0:	orr	r7, r7, r3
   164a4:	mov	r2, r6
   164a8:	mov	r3, r7
   164ac:	ldrb	r6, [r1, #8]
   164b0:	lsl	ip, r6, #24
   164b4:	str	ip, [sp, #44]	; 0x2c
   164b8:	mov	ip, #0
   164bc:	str	ip, [sp, #40]	; 0x28
   164c0:	ldrd	r6, [sp, #40]	; 0x28
   164c4:	orr	r7, r7, r3
   164c8:	mov	r3, r7
   164cc:	ldr	r7, [pc, #660]	; 16768 <_start@@Base+0x3d64>
   164d0:	orr	r6, r6, r2
   164d4:	and	r3, r3, r7
   164d8:	ldr	r7, [pc, #652]	; 1676c <_start@@Base+0x3d68>
   164dc:	mov	r2, r6
   164e0:	mov	r6, #0
   164e4:	and	r2, r2, r6
   164e8:	cmp	r3, r7
   164ec:	mov	r6, #0
   164f0:	cmpeq	r2, r6
   164f4:	bne	16500 <_start@@Base+0x3afc>
   164f8:	cmp	r0, #2
   164fc:	bgt	16774 <_start@@Base+0x3d70>
   16500:	mov	r1, r5
   16504:	mov	r2, r4
   16508:	mov	r0, r8
   1650c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   16510:	sub	r3, r4, r0
   16514:	cmp	r3, #1
   16518:	ble	1652c <_start@@Base+0x3b28>
   1651c:	ldrb	r3, [r0]
   16520:	cmp	r3, #32
   16524:	bhi	1653c <_start@@Base+0x3b38>
   16528:	beq	166c0 <_start@@Base+0x3cbc>
   1652c:	mov	r1, r0
   16530:	mov	r2, r4
   16534:	mov	r0, r8
   16538:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1653c:	cmp	r4, r0
   16540:	beq	166d8 <_start@@Base+0x3cd4>
   16544:	ldrb	r3, [r0]
   16548:	cmp	r3, #44	; 0x2c
   1654c:	beq	166e0 <_start@@Base+0x3cdc>
   16550:	cmp	r3, #125	; 0x7d
   16554:	beq	1668c <_start@@Base+0x3c88>
   16558:	mov	r1, r0
   1655c:	mov	r3, #10
   16560:	mov	r2, r4
   16564:	mov	r0, r8
   16568:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1656c:	mov	r1, r0
   16570:	b	161c8 <_start@@Base+0x37c4>
   16574:	mov	r2, r4
   16578:	mov	r0, r8
   1657c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   16580:	b	16510 <_start@@Base+0x3b0c>
   16584:	sub	r3, r3, #1
   16588:	cmp	r3, #7
   1658c:	ldrls	pc, [pc, r3, lsl #2]
   16590:	b	16574 <_start@@Base+0x3b70>
   16594:	strdeq	r6, [r1], -ip
   16598:	strdeq	r6, [r1], -r0
   1659c:	andeq	r6, r1, r4, ror #11
   165a0:	ldrdeq	r6, [r1], -r8
   165a4:	andeq	r6, r1, ip, asr #11
   165a8:	andeq	r6, r1, r0, asr #11
   165ac:			; <UNDEFINED> instruction: 0x000165b4
   165b0:	muleq	r1, ip, r2
   165b4:	mov	r6, r9
   165b8:	mov	r7, #0
   165bc:	b	162a4 <_start@@Base+0x38a0>
   165c0:	mov	r2, r9
   165c4:	mov	r3, #0
   165c8:	b	162c4 <_start@@Base+0x38c0>
   165cc:	mov	r2, r9
   165d0:	mov	r3, #0
   165d4:	b	162ec <_start@@Base+0x38e8>
   165d8:	mov	r2, r9
   165dc:	mov	r3, #0
   165e0:	b	16314 <_start@@Base+0x3910>
   165e4:	mov	r2, r9
   165e8:	mov	r3, #0
   165ec:	b	16338 <_start@@Base+0x3934>
   165f0:	mov	r2, r9
   165f4:	mov	r3, #0
   165f8:	b	16360 <_start@@Base+0x395c>
   165fc:	mov	r2, r9
   16600:	mov	r3, #0
   16604:	b	16388 <_start@@Base+0x3984>
   16608:	sub	r3, r0, #1
   1660c:	cmp	r3, #7
   16610:	ldrls	pc, [pc, r3, lsl #2]
   16614:	b	16500 <_start@@Base+0x3afc>
   16618:	andeq	r6, r1, r0, lsl #13
   1661c:	andeq	r6, r1, r4, ror r6
   16620:	andeq	r6, r1, r8, ror #12
   16624:	andeq	r6, r1, ip, asr r6
   16628:	andeq	r6, r1, r0, asr r6
   1662c:	andeq	r6, r1, r4, asr #12
   16630:	andeq	r6, r1, r8, lsr r6
   16634:	andeq	r6, r1, r0, asr #7
   16638:	mov	r6, r9
   1663c:	mov	r7, #0
   16640:	b	163c8 <_start@@Base+0x39c4>
   16644:	mov	r6, r9
   16648:	mov	r7, #0
   1664c:	b	163f0 <_start@@Base+0x39ec>
   16650:	mov	r6, r9
   16654:	mov	r7, #0
   16658:	b	16418 <_start@@Base+0x3a14>
   1665c:	mov	r6, r9
   16660:	mov	r7, #0
   16664:	b	16440 <_start@@Base+0x3a3c>
   16668:	mov	r6, r9
   1666c:	mov	r7, #0
   16670:	b	16464 <_start@@Base+0x3a60>
   16674:	mov	r2, r9
   16678:	mov	r3, #0
   1667c:	b	16484 <_start@@Base+0x3a80>
   16680:	mov	r2, r9
   16684:	mov	r3, #0
   16688:	b	164ac <_start@@Base+0x3aa8>
   1668c:	add	r1, r0, #1
   16690:	sub	r3, r4, r1
   16694:	cmp	r3, #1
   16698:	ble	166ac <_start@@Base+0x3ca8>
   1669c:	ldrb	r3, [r0, #1]
   166a0:	cmp	r3, #32
   166a4:	bhi	161c8 <_start@@Base+0x37c4>
   166a8:	beq	168d8 <_start@@Base+0x3ed4>
   166ac:	mov	r2, r4
   166b0:	mov	r0, r8
   166b4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   166b8:	mov	r1, r0
   166bc:	b	161c8 <_start@@Base+0x37c4>
   166c0:	ldrb	r3, [r0, #1]
   166c4:	cmp	r3, #32
   166c8:	addhi	r0, r0, #1
   166cc:	bls	1652c <_start@@Base+0x3b28>
   166d0:	cmp	r4, r0
   166d4:	bne	16544 <_start@@Base+0x3b40>
   166d8:	mov	r1, r4
   166dc:	b	161f0 <_start@@Base+0x37ec>
   166e0:	add	r1, r0, #1
   166e4:	sub	r3, r4, r1
   166e8:	cmp	r3, #1
   166ec:	ble	16700 <_start@@Base+0x3cfc>
   166f0:	ldrb	r3, [r0, #1]
   166f4:	cmp	r3, #32
   166f8:	bhi	16710 <_start@@Base+0x3d0c>
   166fc:	beq	168ec <_start@@Base+0x3ee8>
   16700:	mov	r2, r4
   16704:	mov	r0, r8
   16708:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1670c:	mov	r1, r0
   16710:	cmp	r4, r1
   16714:	beq	16968 <_start@@Base+0x3f64>
   16718:	ldrb	r3, [r1]
   1671c:	cmp	r3, #125	; 0x7d
   16720:	bne	16260 <_start@@Base+0x385c>
   16724:	mov	r3, r1
   16728:	add	r1, r1, #1
   1672c:	sub	r2, r4, r1
   16730:	cmp	r2, #1
   16734:	ble	166ac <_start@@Base+0x3ca8>
   16738:	ldrb	r2, [r3, #1]
   1673c:	cmp	r2, #32
   16740:	bhi	161c8 <_start@@Base+0x37c4>
   16744:	bne	166ac <_start@@Base+0x3ca8>
   16748:	ldrb	r2, [r3, #2]
   1674c:	cmp	r2, #32
   16750:	addhi	r1, r3, #2
   16754:	bls	166ac <_start@@Base+0x3ca8>
   16758:	b	161c8 <_start@@Base+0x37c4>
   1675c:	nop			; (mov r0, r0)
   16760:	cmpvc	pc, #1342177286	; 0x50000006
   16764:	rsbvs	r6, pc, #428	; 0x1ac
   16768:			; <UNDEFINED> instruction: 0xffff0000
   1676c:	cmnvs	r4, r0
   16770:	muleq	r4, r0, r0
   16774:	ldr	r3, [r8, #12]
   16778:	cmp	r3, ip
   1677c:	ldrb	r3, [r1, #10]
   16780:	beq	168c8 <_start@@Base+0x3ec4>
   16784:	cmp	r3, #58	; 0x3a
   16788:	cmpne	r3, #32
   1678c:	movls	r3, #0
   16790:	movhi	r3, #1
   16794:	addls	r1, r1, #10
   16798:	strls	r3, [r8, #12]
   1679c:	bhi	16500 <_start@@Base+0x3afc>
   167a0:	sub	r3, r4, r1
   167a4:	cmp	r3, #1
   167a8:	ble	167bc <_start@@Base+0x3db8>
   167ac:	ldrb	r3, [r1]
   167b0:	cmp	r3, #32
   167b4:	bhi	167cc <_start@@Base+0x3dc8>
   167b8:	beq	16984 <_start@@Base+0x3f80>
   167bc:	mov	r2, r4
   167c0:	mov	r0, r8
   167c4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   167c8:	mov	r1, r0
   167cc:	cmp	r4, r1
   167d0:	beq	167e0 <_start@@Base+0x3ddc>
   167d4:	ldrb	r3, [r1]
   167d8:	cmp	r3, #58	; 0x3a
   167dc:	beq	16998 <_start@@Base+0x3f94>
   167e0:	mov	r3, #4
   167e4:	mov	r2, r4
   167e8:	mov	r0, r8
   167ec:	bl	295ac <flatcc_json_parser_set_error@@Base>
   167f0:	str	r0, [sp, #120]	; 0x78
   167f4:	ldr	r3, [sp, #120]	; 0x78
   167f8:	cmp	r5, r3
   167fc:	beq	16500 <_start@@Base+0x3afc>
   16800:	mov	r5, r3
   16804:	cmp	r4, r3
   16808:	mov	r3, #0
   1680c:	str	r3, [sp, #128]	; 0x80
   16810:	str	r9, [sp, #136]	; 0x88
   16814:	str	r3, [sp, #140]	; 0x8c
   16818:	str	r3, [sp, #132]	; 0x84
   1681c:	beq	16918 <_start@@Base+0x3f14>
   16820:	add	r3, sp, #136	; 0x88
   16824:	str	r3, [sp]
   16828:	mov	r2, r4
   1682c:	add	r3, sp, #132	; 0x84
   16830:	mov	r1, r5
   16834:	mov	r0, r8
   16838:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1683c:	cmp	r5, r0
   16840:	beq	16918 <_start@@Base+0x3f14>
   16844:	ldr	r1, [sp, #132]	; 0x84
   16848:	ldrd	r2, [sp, #136]	; 0x88
   1684c:	cmp	r1, #0
   16850:	beq	16888 <_start@@Base+0x3e84>
   16854:	cmp	r3, #0
   16858:	cmpeq	r2, #-2147483648	; 0x80000000
   1685c:	rsbls	r3, r2, #0
   16860:	bhi	16900 <_start@@Base+0x3efc>
   16864:	ldr	r2, [sp, #116]	; 0x74
   16868:	str	r3, [r2]
   1686c:	b	16510 <_start@@Base+0x3b0c>
   16870:	mov	r3, #5
   16874:	mov	r2, r4
   16878:	mov	r0, r8
   1687c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   16880:	mov	r1, r0
   16884:	b	16290 <_start@@Base+0x388c>
   16888:	mov	r7, #0
   1688c:	cmp	r3, r7
   16890:	mvn	r6, #-2147483648	; 0x80000000
   16894:	cmpeq	r2, r6
   16898:	movls	r3, r2
   1689c:	bls	16864 <_start@@Base+0x3e60>
   168a0:	mov	r1, r0
   168a4:	mov	r3, #7
   168a8:	mov	r2, r4
   168ac:	mov	r0, r8
   168b0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   168b4:	ldr	r3, [sp, #120]	; 0x78
   168b8:	cmp	r3, r0
   168bc:	beq	16918 <_start@@Base+0x3f14>
   168c0:	ldr	r3, [sp, #128]	; 0x80
   168c4:	b	16864 <_start@@Base+0x3e60>
   168c8:	cmp	r3, #34	; 0x22
   168cc:	bne	16500 <_start@@Base+0x3afc>
   168d0:	add	r1, r1, #11
   168d4:	b	167a0 <_start@@Base+0x3d9c>
   168d8:	ldrb	r3, [r0, #2]
   168dc:	cmp	r3, #32
   168e0:	addhi	r1, r0, #2
   168e4:	bls	166ac <_start@@Base+0x3ca8>
   168e8:	b	161c8 <_start@@Base+0x37c4>
   168ec:	ldrb	r3, [r0, #2]
   168f0:	cmp	r3, #32
   168f4:	addhi	r1, r0, #2
   168f8:	bls	16700 <_start@@Base+0x3cfc>
   168fc:	b	16710 <_start@@Base+0x3d0c>
   16900:	mov	r1, r0
   16904:	mov	r3, #8
   16908:	mov	r2, r4
   1690c:	mov	r0, r8
   16910:	bl	295ac <flatcc_json_parser_set_error@@Base>
   16914:	b	168b4 <_start@@Base+0x3eb0>
   16918:	ldr	r5, [sp, #120]	; 0x78
   1691c:	add	r3, sp, #128	; 0x80
   16920:	str	r3, [sp]
   16924:	mov	r2, r4
   16928:	ldr	r3, [pc, #-448]	; 16770 <_start@@Base+0x3d6c>
   1692c:	mov	r1, r5
   16930:	mov	r0, r8
   16934:	bl	13d6c <_start@@Base+0x1368>
   16938:	cmp	r4, r0
   1693c:	cmpne	r0, r5
   16940:	bne	168c0 <_start@@Base+0x3ebc>
   16944:	mov	r1, r0
   16948:	mov	r3, #33	; 0x21
   1694c:	mov	r2, r4
   16950:	mov	r0, r8
   16954:	bl	295ac <flatcc_json_parser_set_error@@Base>
   16958:	mov	r1, r0
   1695c:	b	161c8 <_start@@Base+0x37c4>
   16960:	mov	r1, r5
   16964:	b	161f0 <_start@@Base+0x37ec>
   16968:	mov	r1, r4
   1696c:	mov	r3, #10
   16970:	mov	r2, r4
   16974:	mov	r0, r8
   16978:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1697c:	mov	r1, r0
   16980:	b	161c8 <_start@@Base+0x37c4>
   16984:	ldrb	r3, [r1, #1]
   16988:	cmp	r3, #32
   1698c:	addhi	r1, r1, #1
   16990:	bls	167bc <_start@@Base+0x3db8>
   16994:	b	167cc <_start@@Base+0x3dc8>
   16998:	add	r3, r1, #1
   1699c:	str	r3, [sp, #120]	; 0x78
   169a0:	sub	r3, r4, r3
   169a4:	cmp	r3, #1
   169a8:	ble	169bc <_start@@Base+0x3fb8>
   169ac:	ldrb	r3, [r1, #1]
   169b0:	cmp	r3, #32
   169b4:	bhi	167f4 <_start@@Base+0x3df0>
   169b8:	beq	16a00 <_start@@Base+0x3ffc>
   169bc:	ldr	r1, [sp, #120]	; 0x78
   169c0:	mov	r2, r4
   169c4:	mov	r0, r8
   169c8:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   169cc:	str	r0, [sp, #120]	; 0x78
   169d0:	b	167f4 <_start@@Base+0x3df0>
   169d4:	ldrb	r2, [r5, #2]
   169d8:	cmp	r2, #32
   169dc:	addhi	r3, r5, #2
   169e0:	bls	16230 <_start@@Base+0x382c>
   169e4:	b	16244 <_start@@Base+0x3840>
   169e8:	add	r1, r3, #1
   169ec:	mov	r2, r4
   169f0:	mov	r0, r8
   169f4:	bl	12fac <_start@@Base+0x5a8>
   169f8:	mov	r1, r0
   169fc:	b	161c8 <_start@@Base+0x37c4>
   16a00:	ldrb	r3, [r1, #2]
   16a04:	cmp	r3, #32
   16a08:	addhi	r3, r1, #2
   16a0c:	strhi	r3, [sp, #120]	; 0x78
   16a10:	bls	169bc <_start@@Base+0x3fb8>
   16a14:	b	167f4 <_start@@Base+0x3df0>
   16a18:	push	{r4, r5, r6, r7, r8, r9, lr}
   16a1c:	mov	r6, r1
   16a20:	sub	r1, r2, r1
   16a24:	cmp	r1, #8
   16a28:	sub	sp, sp, #12
   16a2c:	mov	ip, r0
   16a30:	mov	r7, r3
   16a34:	bls	16b14 <_start@@Base+0x4110>
   16a38:	ldrb	r8, [r6, #7]
   16a3c:	mov	r9, #0
   16a40:	ldrb	r0, [r6, #6]
   16a44:	lsr	r5, r0, #24
   16a48:	lsl	r4, r0, #8
   16a4c:	orr	r8, r8, r4
   16a50:	orr	r9, r9, r5
   16a54:	ldrb	r0, [r6, #5]
   16a58:	lsr	r5, r0, #16
   16a5c:	lsl	r4, r0, #16
   16a60:	orr	r4, r4, r8
   16a64:	orr	r5, r5, r9
   16a68:	ldrb	r0, [r6, #4]
   16a6c:	lsr	r9, r0, #8
   16a70:	lsl	r8, r0, #24
   16a74:	orr	r8, r8, r4
   16a78:	orr	r9, r9, r5
   16a7c:	ldrb	r1, [r6, #3]
   16a80:	mov	r0, #0
   16a84:	orr	r8, r8, r0
   16a88:	orr	r9, r9, r1
   16a8c:	ldrb	r4, [r6, #2]
   16a90:	mov	r0, #0
   16a94:	orr	r8, r8, r0
   16a98:	lsl	r1, r4, #8
   16a9c:	orr	r9, r9, r1
   16aa0:	ldrb	r4, [r6, #1]
   16aa4:	mov	r0, #0
   16aa8:	orr	r0, r0, r8
   16aac:	lsl	r1, r4, #16
   16ab0:	orr	r1, r1, r9
   16ab4:	ldrb	r8, [r6]
   16ab8:	mov	r4, #0
   16abc:	orr	r0, r0, r4
   16ac0:	lsl	r5, r8, #24
   16ac4:	add	r9, pc, #524	; 0x20c
   16ac8:	ldrd	r8, [r9]
   16acc:	orr	r1, r1, r5
   16ad0:	cmp	r1, r9
   16ad4:	cmpeq	r0, r8
   16ad8:	bls	16b44 <_start@@Base+0x4140>
   16adc:	add	r9, pc, #508	; 0x1fc
   16ae0:	ldrd	r8, [r9]
   16ae4:	cmp	r1, r9
   16ae8:	cmpeq	r0, r8
   16aec:	bhi	16ba0 <_start@@Base+0x419c>
   16af0:	add	r9, pc, #496	; 0x1f0
   16af4:	ldrd	r8, [r9]
   16af8:	mov	r0, #0
   16afc:	cmp	r1, r9
   16b00:	cmpeq	r0, r8
   16b04:	beq	16c70 <_start@@Base+0x426c>
   16b08:	mov	r0, r6
   16b0c:	add	sp, sp, #12
   16b10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b14:	sub	r1, r1, #1
   16b18:	cmp	r1, #7
   16b1c:	ldrls	pc, [pc, r1, lsl #2]
   16b20:	b	16b08 <_start@@Base+0x4104>
   16b24:	andeq	r6, r1, ip, lsl ip
   16b28:	andeq	r6, r1, r8, lsr #24
   16b2c:	andeq	r6, r1, r4, lsr ip
   16b30:	andeq	r6, r1, r0, asr #24
   16b34:	andeq	r6, r1, ip, asr #24
   16b38:	andeq	r6, r1, r8, asr ip
   16b3c:	andeq	r6, r1, r4, ror #24
   16b40:	andeq	r6, r1, r8, lsr sl
   16b44:	add	r9, pc, #420	; 0x1a4
   16b48:	ldrd	r8, [r9]
   16b4c:	mov	r0, #0
   16b50:	cmp	r1, r9
   16b54:	cmpeq	r0, r8
   16b58:	bne	16b08 <_start@@Base+0x4104>
   16b5c:	ldr	r3, [sp, #44]	; 0x2c
   16b60:	mov	r0, ip
   16b64:	str	r3, [sp]
   16b68:	mov	r1, r6
   16b6c:	mov	r3, #4
   16b70:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16b74:	cmp	r6, r0
   16b78:	movne	r2, #2
   16b7c:	beq	16b08 <_start@@Base+0x4104>
   16b80:	ldr	r1, [sp, #40]	; 0x28
   16b84:	mov	r3, #0
   16b88:	mov	r6, r0
   16b8c:	strd	r2, [r1]
   16b90:	mov	r0, r6
   16b94:	str	r4, [r7]
   16b98:	add	sp, sp, #12
   16b9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ba0:	add	r5, pc, #336	; 0x150
   16ba4:	ldrd	r4, [r5]
   16ba8:	bic	r8, r0, #255	; 0xff
   16bac:	cmp	r1, r5
   16bb0:	cmpeq	r8, r4
   16bb4:	beq	16c98 <_start@@Base+0x4294>
   16bb8:	add	r9, pc, #320	; 0x140
   16bbc:	ldrd	r8, [r9]
   16bc0:	ldr	r4, [pc, #320]	; 16d08 <_start@@Base+0x4304>
   16bc4:	mvn	r5, #0
   16bc8:	and	r1, r1, r5
   16bcc:	and	r0, r0, r4
   16bd0:	cmp	r1, r9
   16bd4:	cmpeq	r0, r8
   16bd8:	bne	16b08 <_start@@Base+0x4104>
   16bdc:	ldr	r3, [sp, #44]	; 0x2c
   16be0:	mov	r0, ip
   16be4:	str	r3, [sp]
   16be8:	mov	r1, r6
   16bec:	mov	r3, #6
   16bf0:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16bf4:	cmp	r6, r0
   16bf8:	beq	16b08 <_start@@Base+0x4104>
   16bfc:	ldr	r2, [sp, #40]	; 0x28
   16c00:	mov	r6, r0
   16c04:	mvn	r1, #0
   16c08:	mvn	r0, #1
   16c0c:	mov	r3, #1
   16c10:	strd	r0, [r2]
   16c14:	str	r3, [r7]
   16c18:	b	16b08 <_start@@Base+0x4104>
   16c1c:	mov	r0, #0
   16c20:	mov	r1, #0
   16c24:	b	16ab4 <_start@@Base+0x40b0>
   16c28:	mov	r8, #0
   16c2c:	mov	r9, #0
   16c30:	b	16aa0 <_start@@Base+0x409c>
   16c34:	mov	r8, #0
   16c38:	mov	r9, #0
   16c3c:	b	16a8c <_start@@Base+0x4088>
   16c40:	mov	r8, #0
   16c44:	mov	r9, #0
   16c48:	b	16a7c <_start@@Base+0x4078>
   16c4c:	mov	r4, #0
   16c50:	mov	r5, #0
   16c54:	b	16a68 <_start@@Base+0x4064>
   16c58:	mov	r8, #0
   16c5c:	mov	r9, #0
   16c60:	b	16a54 <_start@@Base+0x4050>
   16c64:	mov	r8, #0
   16c68:	mov	r9, #0
   16c6c:	b	16a40 <_start@@Base+0x403c>
   16c70:	ldr	r3, [sp, #44]	; 0x2c
   16c74:	mov	r0, ip
   16c78:	str	r3, [sp]
   16c7c:	mov	r1, r6
   16c80:	mov	r3, #4
   16c84:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16c88:	cmp	r6, r0
   16c8c:	beq	16b08 <_start@@Base+0x4104>
   16c90:	mov	r2, #42	; 0x2a
   16c94:	b	16b80 <_start@@Base+0x417c>
   16c98:	ldr	r3, [sp, #44]	; 0x2c
   16c9c:	mov	r0, ip
   16ca0:	str	r3, [sp]
   16ca4:	mov	r1, r6
   16ca8:	mov	r3, #7
   16cac:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16cb0:	cmp	r6, r0
   16cb4:	beq	16b08 <_start@@Base+0x4104>
   16cb8:	ldr	r2, [sp, #40]	; 0x28
   16cbc:	mvn	r4, #0
   16cc0:	mvn	r5, #0
   16cc4:	mov	r3, #1
   16cc8:	strd	r4, [r2]
   16ccc:	mov	r6, r0
   16cd0:	str	r3, [r7]
   16cd4:	b	16b08 <_start@@Base+0x4104>
   16cd8:			; <UNDEFINED> instruction: 0xffffffff
   16cdc:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16ce0:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16ce4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16ce8:	andeq	r0, r0, r0
   16cec:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16cf0:	andeq	r0, r0, r0
   16cf4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16cf8:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16cfc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16d00:	strbvs	r0, [r7, #-0]!
   16d04:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16d08:			; <UNDEFINED> instruction: 0xffff0000
   16d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d10:	mov	r7, r2
   16d14:	sub	r2, r2, r1
   16d18:	cmp	r2, #8
   16d1c:	sub	sp, sp, #12
   16d20:	mov	r6, r1
   16d24:	mov	sl, r0
   16d28:	mov	fp, r3
   16d2c:	bls	16e38 <_start@@Base+0x4434>
   16d30:	ldrb	r0, [r6, #7]
   16d34:	mov	r1, #0
   16d38:	ldrb	r2, [r6, #6]
   16d3c:	lsr	r5, r2, #24
   16d40:	lsl	r4, r2, #8
   16d44:	orr	r0, r0, r4
   16d48:	orr	r1, r1, r5
   16d4c:	ldrb	r2, [r6, #5]
   16d50:	lsr	r5, r2, #16
   16d54:	lsl	r4, r2, #16
   16d58:	orr	r4, r4, r0
   16d5c:	orr	r5, r5, r1
   16d60:	ldrb	r2, [r6, #4]
   16d64:	lsr	r1, r2, #8
   16d68:	lsl	r0, r2, #24
   16d6c:	orr	r4, r4, r0
   16d70:	orr	r5, r5, r1
   16d74:	ldrb	r1, [r6, #3]
   16d78:	mov	r0, #0
   16d7c:	orr	r4, r4, r0
   16d80:	orr	r5, r5, r1
   16d84:	ldrb	r2, [r6, #2]
   16d88:	mov	r0, #0
   16d8c:	orr	r0, r0, r4
   16d90:	lsl	r1, r2, #8
   16d94:	orr	r1, r1, r5
   16d98:	ldrb	r2, [r6, #1]
   16d9c:	mov	r4, #0
   16da0:	orr	r4, r4, r0
   16da4:	lsl	r5, r2, #16
   16da8:	orr	r5, r5, r1
   16dac:	ldrb	r2, [r6]
   16db0:	mov	r8, #0
   16db4:	orr	r4, r4, r8
   16db8:	lsl	r9, r2, #24
   16dbc:	add	r3, pc, #636	; 0x27c
   16dc0:	ldrd	r2, [r3]
   16dc4:	orr	r5, r5, r9
   16dc8:	cmp	r5, r3
   16dcc:	cmpeq	r4, r2
   16dd0:	bls	16e68 <_start@@Base+0x4464>
   16dd4:	add	r3, pc, #620	; 0x26c
   16dd8:	ldrd	r2, [r3]
   16ddc:	cmp	r5, r3
   16de0:	cmpeq	r4, r2
   16de4:	beq	16f9c <_start@@Base+0x4598>
   16de8:	add	r3, pc, #608	; 0x260
   16dec:	ldrd	r2, [r3]
   16df0:	bic	r0, r4, #255	; 0xff
   16df4:	cmp	r5, r3
   16df8:	cmpeq	r0, r2
   16dfc:	beq	16fd8 <_start@@Base+0x45d4>
   16e00:	add	r3, pc, #592	; 0x250
   16e04:	ldrd	r2, [r3]
   16e08:	mov	r0, #0
   16e0c:	cmp	r5, r3
   16e10:	cmpeq	r0, r2
   16e14:	beq	17014 <_start@@Base+0x4610>
   16e18:	add	r3, pc, #576	; 0x240
   16e1c:	ldrd	r2, [r3]
   16e20:	cmp	r5, r3
   16e24:	cmpeq	r4, r2
   16e28:	beq	16ec0 <_start@@Base+0x44bc>
   16e2c:	mov	r0, r6
   16e30:	add	sp, sp, #12
   16e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e38:	sub	r2, r2, #1
   16e3c:	cmp	r2, #7
   16e40:	ldrls	pc, [pc, r2, lsl #2]
   16e44:	b	16e2c <_start@@Base+0x4428>
   16e48:	andeq	r6, r1, r8, asr #30
   16e4c:	andeq	r6, r1, r4, asr pc
   16e50:	andeq	r6, r1, r0, ror #30
   16e54:	andeq	r6, r1, ip, ror #30
   16e58:	andeq	r6, r1, r8, ror pc
   16e5c:	andeq	r6, r1, r4, lsl #31
   16e60:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16e64:	andeq	r6, r1, r0, lsr sp
   16e68:	add	r3, pc, #504	; 0x1f8
   16e6c:	ldrd	r2, [r3]
   16e70:	bic	r5, r5, #255	; 0xff
   16e74:	mov	r4, #0
   16e78:	cmp	r5, r3
   16e7c:	cmpeq	r4, r2
   16e80:	bne	16e2c <_start@@Base+0x4428>
   16e84:	ldr	r3, [sp, #52]	; 0x34
   16e88:	mov	r2, r7
   16e8c:	str	r3, [sp]
   16e90:	mov	r0, sl
   16e94:	mov	r3, #3
   16e98:	mov	r1, r6
   16e9c:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16ea0:	cmp	r6, r0
   16ea4:	beq	16e30 <_start@@Base+0x442c>
   16ea8:	ldr	r1, [sp, #48]	; 0x30
   16eac:	mov	r2, #4
   16eb0:	mov	r3, #0
   16eb4:	strd	r2, [r1]
   16eb8:	str	r8, [fp]
   16ebc:	b	16e30 <_start@@Base+0x442c>
   16ec0:	mov	r1, r7
   16ec4:	add	r0, r6, #8
   16ec8:	bl	12b30 <_start@@Base+0x12c>
   16ecc:	add	r3, pc, #412	; 0x19c
   16ed0:	ldrd	r2, [r3]
   16ed4:	cmp	r1, r3
   16ed8:	cmpeq	r0, r2
   16edc:	bne	16e2c <_start@@Base+0x4428>
   16ee0:	add	r4, r6, #16
   16ee4:	mov	r0, r4
   16ee8:	mov	r1, r7
   16eec:	bl	12b30 <_start@@Base+0x12c>
   16ef0:	add	r3, pc, #384	; 0x180
   16ef4:	ldrd	r2, [r3]
   16ef8:	bic	r0, r0, #255	; 0xff
   16efc:	cmp	r1, r3
   16f00:	cmpeq	r0, r2
   16f04:	bne	16e2c <_start@@Base+0x4428>
   16f08:	ldr	r3, [sp, #52]	; 0x34
   16f0c:	mov	r2, r7
   16f10:	str	r3, [sp]
   16f14:	mov	r0, sl
   16f18:	mov	r3, #7
   16f1c:	mov	r1, r4
   16f20:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16f24:	cmp	r4, r0
   16f28:	beq	16e2c <_start@@Base+0x4428>
   16f2c:	mov	r4, #2
   16f30:	ldr	r2, [sp, #48]	; 0x30
   16f34:	mov	r5, #0
   16f38:	mov	r3, #0
   16f3c:	strd	r4, [r2]
   16f40:	str	r3, [fp]
   16f44:	b	16e30 <_start@@Base+0x442c>
   16f48:	mov	r4, #0
   16f4c:	mov	r5, #0
   16f50:	b	16dac <_start@@Base+0x43a8>
   16f54:	mov	r0, #0
   16f58:	mov	r1, #0
   16f5c:	b	16d98 <_start@@Base+0x4394>
   16f60:	mov	r4, #0
   16f64:	mov	r5, #0
   16f68:	b	16d84 <_start@@Base+0x4380>
   16f6c:	mov	r4, #0
   16f70:	mov	r5, #0
   16f74:	b	16d74 <_start@@Base+0x4370>
   16f78:	mov	r4, #0
   16f7c:	mov	r5, #0
   16f80:	b	16d60 <_start@@Base+0x435c>
   16f84:	mov	r0, #0
   16f88:	mov	r1, #0
   16f8c:	b	16d4c <_start@@Base+0x4348>
   16f90:	mov	r0, #0
   16f94:	mov	r1, #0
   16f98:	b	16d38 <_start@@Base+0x4334>
   16f9c:	ldr	r3, [sp, #52]	; 0x34
   16fa0:	mov	r2, r7
   16fa4:	str	r3, [sp]
   16fa8:	mov	r0, sl
   16fac:	mov	r3, #8
   16fb0:	mov	r1, r6
   16fb4:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16fb8:	cmp	r6, r0
   16fbc:	beq	16e2c <_start@@Base+0x4428>
   16fc0:	ldr	r1, [sp, #48]	; 0x30
   16fc4:	mov	r2, #3
   16fc8:	mov	r3, #0
   16fcc:	strd	r2, [r1]
   16fd0:	str	r8, [fp]
   16fd4:	b	16e30 <_start@@Base+0x442c>
   16fd8:	ldr	r3, [sp, #52]	; 0x34
   16fdc:	mov	r2, r7
   16fe0:	str	r3, [sp]
   16fe4:	mov	r1, r6
   16fe8:	mov	r3, #7
   16fec:	mov	r0, sl
   16ff0:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   16ff4:	cmp	r6, r0
   16ff8:	beq	16e00 <_start@@Base+0x43fc>
   16ffc:	ldr	r1, [sp, #48]	; 0x30
   17000:	mov	r2, #1
   17004:	mov	r3, #0
   17008:	strd	r2, [r1]
   1700c:	str	r8, [fp]
   17010:	b	16e30 <_start@@Base+0x442c>
   17014:	ldr	r3, [sp, #52]	; 0x34
   17018:	mov	r2, r7
   1701c:	str	r3, [sp]
   17020:	mov	r0, sl
   17024:	mov	r3, #4
   17028:	mov	r1, r6
   1702c:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   17030:	cmp	r6, r0
   17034:	movne	r4, #0
   17038:	bne	16f30 <_start@@Base+0x452c>
   1703c:	b	16e2c <_start@@Base+0x4428>
   17040:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   17044:	stclmi	14, cr6, [pc, #-460]!	; 16e80 <_start@@Base+0x447c>
   17048:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   1704c:	stclmi	14, cr6, [pc, #-460]!	; 16e88 <_start@@Base+0x4484>
   17050:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   17054:	stclmi	14, cr6, [pc, #-460]!	; 16e90 <_start@@Base+0x448c>
   17058:	andeq	r0, r0, r0
   1705c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   17060:	cmnpl	r9, #112, 26	; 0x1c00
   17064:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   17068:	andeq	r0, r0, r0
   1706c:	cmnmi	ip, r0, lsl #8
   17070:	rsbvs	r6, ip, #364904448	; 0x15c00000
   17074:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   17078:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1707c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   17080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17084:	mov	r4, r1
   17088:	sub	sp, sp, #28
   1708c:	mov	r1, r2
   17090:	mov	r8, r0
   17094:	mov	r0, r4
   17098:	mov	r5, r2
   1709c:	mov	sl, r3
   170a0:	bl	12b30 <_start@@Base+0x12c>
   170a4:	add	r3, pc, #956	; 0x3bc
   170a8:	ldrd	r2, [r3]
   170ac:	ldr	r7, [sp, #64]	; 0x40
   170b0:	ldr	fp, [sp, #68]	; 0x44
   170b4:	cmp	r1, r3
   170b8:	cmpeq	r0, r2
   170bc:	bhi	170e0 <_start@@Base+0x46dc>
   170c0:	add	r3, pc, #936	; 0x3a8
   170c4:	ldrd	r2, [r3]
   170c8:	cmp	r1, r3
   170cc:	cmpeq	r0, r2
   170d0:	beq	171f4 <_start@@Base+0x47f0>
   170d4:	mov	r0, r4
   170d8:	add	sp, sp, #28
   170dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e0:	add	r3, pc, #912	; 0x390
   170e4:	ldrd	r2, [r3]
   170e8:	cmp	r1, r3
   170ec:	cmpeq	r0, r2
   170f0:	beq	17274 <_start@@Base+0x4870>
   170f4:	add	r3, pc, #900	; 0x384
   170f8:	ldrd	r2, [r3]
   170fc:	cmp	r1, r3
   17100:	cmpeq	r0, r2
   17104:	bne	170d4 <_start@@Base+0x46d0>
   17108:	mov	r1, r5
   1710c:	add	r0, r4, #8
   17110:	bl	12b30 <_start@@Base+0x12c>
   17114:	add	r3, pc, #876	; 0x36c
   17118:	ldrd	r2, [r3]
   1711c:	cmp	r1, r3
   17120:	cmpeq	r0, r2
   17124:	bne	170d4 <_start@@Base+0x46d0>
   17128:	mov	r1, r5
   1712c:	add	r0, r4, #16
   17130:	bl	12b30 <_start@@Base+0x12c>
   17134:	add	r3, pc, #852	; 0x354
   17138:	ldrd	r2, [r3]
   1713c:	cmp	r1, r3
   17140:	cmpeq	r0, r2
   17144:	bne	170d4 <_start@@Base+0x46d0>
   17148:	mov	r1, r5
   1714c:	add	r0, r4, #24
   17150:	bl	12b30 <_start@@Base+0x12c>
   17154:	add	r3, pc, #828	; 0x33c
   17158:	ldrd	r2, [r3]
   1715c:	cmp	r1, r3
   17160:	cmpeq	r0, r2
   17164:	bne	170d4 <_start@@Base+0x46d0>
   17168:	add	r6, r4, #32
   1716c:	mov	r0, r6
   17170:	mov	r1, r5
   17174:	bl	12b30 <_start@@Base+0x12c>
   17178:	mov	r0, #0
   1717c:	and	r1, r1, #-16777216	; 0xff000000
   17180:	cmp	r1, #1694498816	; 0x65000000
   17184:	cmpeq	r0, #0
   17188:	bne	170d4 <_start@@Base+0x46d0>
   1718c:	sub	r6, r5, r6
   17190:	cmp	r6, #1
   17194:	ble	170d4 <_start@@Base+0x46d0>
   17198:	ldrb	r3, [r4, #33]	; 0x21
   1719c:	cmp	r3, #46	; 0x2e
   171a0:	bne	170d4 <_start@@Base+0x46d0>
   171a4:	add	r9, r4, #34	; 0x22
   171a8:	mov	r0, r9
   171ac:	mov	r1, r5
   171b0:	bl	12b30 <_start@@Base+0x12c>
   171b4:	mov	r2, #0
   171b8:	bic	r3, r1, #255	; 0xff
   171bc:	strd	r0, [sp, #8]
   171c0:	add	r1, pc, #728	; 0x2d8
   171c4:	ldrd	r0, [r1]
   171c8:	cmp	r3, r1
   171cc:	cmpeq	r2, r0
   171d0:	beq	17804 <_start@@Base+0x4e00>
   171d4:	add	r3, pc, #716	; 0x2cc
   171d8:	ldrd	r2, [r3]
   171dc:	ldrd	r0, [sp, #8]
   171e0:	cmp	r1, r3
   171e4:	cmpeq	r0, r2
   171e8:	beq	17794 <_start@@Base+0x4d90>
   171ec:	mov	r4, r9
   171f0:	b	170d4 <_start@@Base+0x46d0>
   171f4:	mov	r1, r5
   171f8:	add	r0, r4, #8
   171fc:	bl	12b30 <_start@@Base+0x12c>
   17200:	add	r3, pc, #680	; 0x2a8
   17204:	ldrd	r2, [r3]
   17208:	cmp	r1, r3
   1720c:	cmpeq	r0, r2
   17210:	bne	170d4 <_start@@Base+0x46d0>
   17214:	add	r6, r4, #16
   17218:	mov	r0, r6
   1721c:	mov	r1, r5
   17220:	bl	12b30 <_start@@Base+0x12c>
   17224:	mov	r0, #0
   17228:	and	r1, r1, #-16777216	; 0xff000000
   1722c:	cmp	r1, #1912602624	; 0x72000000
   17230:	cmpeq	r0, #0
   17234:	bne	170d4 <_start@@Base+0x46d0>
   17238:	sub	r6, r5, r6
   1723c:	cmp	r6, #1
   17240:	ble	170d4 <_start@@Base+0x46d0>
   17244:	ldrb	r3, [r4, #17]
   17248:	cmp	r3, #46	; 0x2e
   1724c:	bne	170d4 <_start@@Base+0x46d0>
   17250:	str	fp, [sp, #68]	; 0x44
   17254:	str	r7, [sp, #64]	; 0x40
   17258:	mov	r3, sl
   1725c:	mov	r2, r5
   17260:	add	r1, r4, #18
   17264:	mov	r0, r8
   17268:	add	sp, sp, #28
   1726c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17270:	b	12cb0 <_start@@Base+0x2ac>
   17274:	mov	r1, r5
   17278:	add	r0, r4, #8
   1727c:	bl	12b30 <_start@@Base+0x12c>
   17280:	add	r3, pc, #560	; 0x230
   17284:	ldrd	r2, [r3]
   17288:	cmp	r1, r3
   1728c:	cmpeq	r0, r2
   17290:	bhi	17340 <_start@@Base+0x493c>
   17294:	add	r3, pc, #548	; 0x224
   17298:	ldrd	r2, [r3]
   1729c:	cmp	r1, r3
   172a0:	cmpeq	r0, r2
   172a4:	bls	173e0 <_start@@Base+0x49dc>
   172a8:	add	r3, pc, #536	; 0x218
   172ac:	ldrd	r2, [r3]
   172b0:	cmp	r1, r3
   172b4:	cmpeq	r0, r2
   172b8:	beq	176f4 <_start@@Base+0x4cf0>
   172bc:	add	r3, pc, #524	; 0x20c
   172c0:	ldrd	r2, [r3]
   172c4:	cmp	r1, r3
   172c8:	cmpeq	r0, r2
   172cc:	bne	170d4 <_start@@Base+0x46d0>
   172d0:	add	r6, r4, #16
   172d4:	mov	r0, r6
   172d8:	mov	r1, r5
   172dc:	bl	12b30 <_start@@Base+0x12c>
   172e0:	ldr	r3, [pc, #536]	; 17500 <_start@@Base+0x4afc>
   172e4:	mov	r2, #0
   172e8:	and	r3, r3, r1
   172ec:	ldr	r1, [pc, #528]	; 17504 <_start@@Base+0x4b00>
   172f0:	and	r2, r2, r0
   172f4:	cmp	r3, r1
   172f8:	mov	r0, #0
   172fc:	cmpeq	r2, r0
   17300:	bne	170d4 <_start@@Base+0x46d0>
   17304:	sub	r6, r5, r6
   17308:	cmp	r6, #2
   1730c:	ble	170d4 <_start@@Base+0x46d0>
   17310:	ldrb	r3, [r4, #18]
   17314:	cmp	r3, #46	; 0x2e
   17318:	bne	170d4 <_start@@Base+0x46d0>
   1731c:	str	fp, [sp, #68]	; 0x44
   17320:	str	r7, [sp, #64]	; 0x40
   17324:	mov	r3, sl
   17328:	mov	r2, r5
   1732c:	add	r1, r4, #19
   17330:	mov	r0, r8
   17334:	add	sp, sp, #28
   17338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1733c:	b	157c8 <_start@@Base+0x2dc4>
   17340:	add	r3, pc, #400	; 0x190
   17344:	ldrd	r2, [r3]
   17348:	cmp	r1, r3
   1734c:	cmpeq	r0, r2
   17350:	beq	1750c <_start@@Base+0x4b08>
   17354:	add	r3, pc, #388	; 0x184
   17358:	ldrd	r2, [r3]
   1735c:	cmp	r1, r3
   17360:	cmpeq	r0, r2
   17364:	bhi	17570 <_start@@Base+0x4b6c>
   17368:	add	r3, pc, #376	; 0x178
   1736c:	ldrd	r2, [r3]
   17370:	cmp	r1, r3
   17374:	cmpeq	r0, r2
   17378:	bne	170d4 <_start@@Base+0x46d0>
   1737c:	add	r6, r4, #16
   17380:	mov	r0, r6
   17384:	mov	r1, r5
   17388:	bl	12b30 <_start@@Base+0x12c>
   1738c:	add	r3, pc, #348	; 0x15c
   17390:	ldrd	r2, [r3]
   17394:	bic	r0, r0, #255	; 0xff
   17398:	cmp	r1, r3
   1739c:	cmpeq	r0, r2
   173a0:	bne	170d4 <_start@@Base+0x46d0>
   173a4:	sub	r6, r5, r6
   173a8:	cmp	r6, #7
   173ac:	ble	170d4 <_start@@Base+0x46d0>
   173b0:	ldrb	r3, [r4, #23]
   173b4:	cmp	r3, #46	; 0x2e
   173b8:	bne	170d4 <_start@@Base+0x46d0>
   173bc:	str	fp, [sp, #68]	; 0x44
   173c0:	str	r7, [sp, #64]	; 0x40
   173c4:	mov	r3, sl
   173c8:	mov	r2, r5
   173cc:	add	r1, r4, #24
   173d0:	mov	r0, r8
   173d4:	add	sp, sp, #28
   173d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173dc:	b	16a18 <_start@@Base+0x4014>
   173e0:	add	r3, pc, #272	; 0x110
   173e4:	ldrd	r2, [r3]
   173e8:	cmp	r1, r3
   173ec:	cmpeq	r0, r2
   173f0:	bne	170d4 <_start@@Base+0x46d0>
   173f4:	add	r6, r4, #16
   173f8:	mov	r0, r6
   173fc:	mov	r1, r5
   17400:	bl	12b30 <_start@@Base+0x12c>
   17404:	ldr	r3, [pc, #244]	; 17500 <_start@@Base+0x4afc>
   17408:	mov	r2, #0
   1740c:	and	r3, r3, r1
   17410:	ldr	r1, [pc, #240]	; 17508 <_start@@Base+0x4b04>
   17414:	and	r2, r2, r0
   17418:	cmp	r3, r1
   1741c:	mov	r0, #0
   17420:	cmpeq	r2, r0
   17424:	bne	170d4 <_start@@Base+0x46d0>
   17428:	sub	r6, r5, r6
   1742c:	cmp	r6, #2
   17430:	ble	170d4 <_start@@Base+0x46d0>
   17434:	ldrb	r3, [r4, #18]
   17438:	cmp	r3, #46	; 0x2e
   1743c:	bne	170d4 <_start@@Base+0x46d0>
   17440:	str	fp, [sp, #68]	; 0x44
   17444:	str	r7, [sp, #64]	; 0x40
   17448:	mov	r3, sl
   1744c:	mov	r2, r5
   17450:	add	r1, r4, #19
   17454:	mov	r0, r8
   17458:	add	sp, sp, #28
   1745c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17460:	b	16d0c <_start@@Base+0x4308>
   17464:	nop			; (mov r0, r0)
   17468:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   1746c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17470:	cmnvs	r3, lr, lsr #18
   17474:			; <UNDEFINED> instruction: 0x46616e74
   17478:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   1747c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17480:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   17484:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17488:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1748c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   17490:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   17494:	cmnpl	r0, #-1073741800	; 0xc0000018
   17498:	cmnvs	ip, #100, 10	; 0x19000000
   1749c:	svcvs	0x006d496e
   174a0:	andeq	r0, r0, r0
   174a4:	strbtmi	r6, [pc], -r0, lsl #30
   174a8:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   174ac:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   174b0:	cmnvs	r3, r5, ror #8
   174b4:	cmnmi	r8, #-2147483620	; 0x8000001c
   174b8:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   174bc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   174c0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   174c4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   174c8:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   174cc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   174d0:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   174d4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   174d8:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   174dc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   174e0:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   174e4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   174e8:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   174ec:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   174f0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   174f4:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   174f8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   174fc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17500:			; <UNDEFINED> instruction: 0xffff0000
   17504:	svcvs	0x006f0000
   17508:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   1750c:	add	r6, r4, #16
   17510:	mov	r0, r6
   17514:	mov	r1, r5
   17518:	bl	12b30 <_start@@Base+0x12c>
   1751c:	add	r3, pc, #940	; 0x3ac
   17520:	ldrd	r2, [r3]
   17524:	bic	r0, r0, #255	; 0xff
   17528:	cmp	r1, r3
   1752c:	cmpeq	r0, r2
   17530:	bne	170d4 <_start@@Base+0x46d0>
   17534:	sub	r6, r5, r6
   17538:	cmp	r6, #7
   1753c:	ble	170d4 <_start@@Base+0x46d0>
   17540:	ldrb	r3, [r4, #23]
   17544:	cmp	r3, #46	; 0x2e
   17548:	bne	170d4 <_start@@Base+0x46d0>
   1754c:	str	fp, [sp, #68]	; 0x44
   17550:	str	r7, [sp, #64]	; 0x40
   17554:	mov	r3, sl
   17558:	mov	r2, r5
   1755c:	add	r1, r4, #24
   17560:	mov	r0, r8
   17564:	add	sp, sp, #28
   17568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1756c:	b	15ed0 <_start@@Base+0x34cc>
   17570:	add	r3, pc, #864	; 0x360
   17574:	ldrd	r2, [r3]
   17578:	cmp	r1, r3
   1757c:	cmpeq	r0, r2
   17580:	bne	170d4 <_start@@Base+0x46d0>
   17584:	add	r9, r4, #16
   17588:	mov	r0, r9
   1758c:	mov	r1, r5
   17590:	bl	12b30 <_start@@Base+0x12c>
   17594:	mov	r3, r1
   17598:	bic	r2, r0, #255	; 0xff
   1759c:	strd	r0, [sp, #8]
   175a0:	add	r1, pc, #824	; 0x338
   175a4:	ldrd	r0, [r1]
   175a8:	cmp	r3, r1
   175ac:	cmpeq	r2, r0
   175b0:	beq	17758 <_start@@Base+0x4d54>
   175b4:	add	r3, pc, #812	; 0x32c
   175b8:	ldrd	r2, [r3]
   175bc:	ldrd	r0, [sp, #8]
   175c0:	cmp	r1, r3
   175c4:	cmpeq	r0, r2
   175c8:	bne	170d4 <_start@@Base+0x46d0>
   175cc:	add	r6, r4, #24
   175d0:	mov	r0, r6
   175d4:	mov	r1, r5
   175d8:	bl	12b30 <_start@@Base+0x12c>
   175dc:	add	r3, pc, #780	; 0x30c
   175e0:	ldrd	r2, [r3]
   175e4:	mov	r0, #0
   175e8:	bic	r1, r1, #255	; 0xff
   175ec:	cmp	r1, r3
   175f0:	cmpeq	r0, r2
   175f4:	bne	170d4 <_start@@Base+0x46d0>
   175f8:	sub	r6, r5, r6
   175fc:	cmp	r6, #3
   17600:	ble	170d4 <_start@@Base+0x46d0>
   17604:	ldrb	r3, [r4, #27]
   17608:	cmp	r3, #46	; 0x2e
   1760c:	bne	170d4 <_start@@Base+0x46d0>
   17610:	add	r6, r4, #28
   17614:	sub	r3, r5, r6
   17618:	cmp	r3, #8
   1761c:	bls	17840 <_start@@Base+0x4e3c>
   17620:	ldrb	r2, [r4, #35]	; 0x23
   17624:	mov	r3, #0
   17628:	strd	r2, [sp, #8]
   1762c:	ldrb	r0, [r4, #34]	; 0x22
   17630:	lsr	r3, r0, #24
   17634:	lsl	r2, r0, #8
   17638:	ldrd	r0, [sp, #8]
   1763c:	orr	r0, r0, r2
   17640:	orr	r1, r1, r3
   17644:	strd	r0, [sp, #8]
   17648:	ldrb	r0, [r4, #33]	; 0x21
   1764c:	lsr	r3, r0, #16
   17650:	lsl	r2, r0, #16
   17654:	ldrd	r0, [sp, #8]
   17658:	orr	r0, r0, r2
   1765c:	orr	r1, r1, r3
   17660:	strd	r0, [sp, #8]
   17664:	ldrb	r0, [r4, #32]
   17668:	lsr	r3, r0, #8
   1766c:	ldrd	r0, [sp, #8]
   17670:	orr	r1, r1, r3
   17674:	mov	r3, r1
   17678:	ldrb	r1, [r4, #31]
   1767c:	orr	r1, r1, r3
   17680:	ldrb	r2, [r4, #30]
   17684:	mov	r3, #0
   17688:	strd	r2, [sp, #8]
   1768c:	ldr	ip, [sp, #8]
   17690:	lsl	r3, ip, #8
   17694:	orr	r3, r3, r1
   17698:	ldrb	r0, [r4, #29]
   1769c:	mov	r1, #0
   176a0:	strd	r0, [sp, #8]
   176a4:	ldr	ip, [sp, #8]
   176a8:	lsl	r1, ip, #16
   176ac:	orr	r3, r3, r1
   176b0:	ldrb	r0, [r4, #28]
   176b4:	mov	r1, #0
   176b8:	mov	r2, #0
   176bc:	strd	r0, [sp, #16]
   176c0:	ldr	r1, [sp, #16]
   176c4:	lsl	r1, r1, #24
   176c8:	str	r1, [sp, #12]
   176cc:	mov	r1, #0
   176d0:	str	r1, [sp, #8]
   176d4:	ldrd	r0, [sp, #8]
   176d8:	orr	r1, r1, r3
   176dc:	and	r3, r1, #-16777216	; 0xff000000
   176e0:	cmp	r3, #2013265920	; 0x78000000
   176e4:	cmpeq	r2, #0
   176e8:	beq	17870 <_start@@Base+0x4e6c>
   176ec:	mov	r4, r6
   176f0:	b	170d4 <_start@@Base+0x46d0>
   176f4:	add	r6, r4, #16
   176f8:	mov	r0, r6
   176fc:	mov	r1, r5
   17700:	bl	12b30 <_start@@Base+0x12c>
   17704:	add	r3, pc, #492	; 0x1ec
   17708:	ldrd	r2, [r3]
   1770c:	mov	r0, #0
   17710:	cmp	r1, r3
   17714:	cmpeq	r0, r2
   17718:	bne	170d4 <_start@@Base+0x46d0>
   1771c:	sub	r6, r5, r6
   17720:	cmp	r6, #4
   17724:	ble	170d4 <_start@@Base+0x46d0>
   17728:	ldrb	r3, [r4, #20]
   1772c:	cmp	r3, #46	; 0x2e
   17730:	bne	170d4 <_start@@Base+0x46d0>
   17734:	str	fp, [sp, #68]	; 0x44
   17738:	str	r7, [sp, #64]	; 0x40
   1773c:	mov	r3, sl
   17740:	mov	r2, r5
   17744:	add	r1, r4, #21
   17748:	mov	r0, r8
   1774c:	add	sp, sp, #28
   17750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17754:	b	15c68 <_start@@Base+0x3264>
   17758:	sub	r9, r5, r9
   1775c:	cmp	r9, #7
   17760:	ble	170d4 <_start@@Base+0x46d0>
   17764:	ldrb	r3, [r4, #23]
   17768:	cmp	r3, #46	; 0x2e
   1776c:	bne	170d4 <_start@@Base+0x46d0>
   17770:	str	fp, [sp, #68]	; 0x44
   17774:	str	r7, [sp, #64]	; 0x40
   17778:	mov	r3, sl
   1777c:	mov	r2, r5
   17780:	add	r1, r4, #24
   17784:	mov	r0, r8
   17788:	add	sp, sp, #28
   1778c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17790:	b	15a10 <_start@@Base+0x300c>
   17794:	add	r6, r4, #42	; 0x2a
   17798:	mov	r0, r6
   1779c:	mov	r1, r5
   177a0:	bl	12b30 <_start@@Base+0x12c>
   177a4:	ldr	r3, [pc, #340]	; 17900 <_start@@Base+0x4efc>
   177a8:	mov	r2, #0
   177ac:	and	r3, r3, r1
   177b0:	ldr	r1, [pc, #332]	; 17904 <_start@@Base+0x4f00>
   177b4:	and	r2, r2, r0
   177b8:	cmp	r3, r1
   177bc:	mov	r0, #0
   177c0:	cmpeq	r2, r0
   177c4:	bne	171ec <_start@@Base+0x47e8>
   177c8:	str	fp, [sp]
   177cc:	mov	r2, r5
   177d0:	mov	r0, r8
   177d4:	mov	r3, #2
   177d8:	mov	r1, r6
   177dc:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   177e0:	cmp	r6, r0
   177e4:	mov	r4, r0
   177e8:	beq	171ec <_start@@Base+0x47e8>
   177ec:	mov	r0, #0
   177f0:	mov	r1, #0
   177f4:	mov	r3, #0
   177f8:	strd	r0, [r7]
   177fc:	str	r3, [sl]
   17800:	b	170d4 <_start@@Base+0x46d0>
   17804:	str	fp, [sp]
   17808:	mov	r2, r5
   1780c:	mov	r0, r8
   17810:	mov	r3, #3
   17814:	mov	r1, r9
   17818:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   1781c:	cmp	r9, r0
   17820:	mov	r4, r0
   17824:	beq	170d4 <_start@@Base+0x46d0>
   17828:	mov	r0, #17
   1782c:	mov	r1, #0
   17830:	mov	r3, #0
   17834:	strd	r0, [r7]
   17838:	str	r3, [sl]
   1783c:	b	170d4 <_start@@Base+0x46d0>
   17840:	sub	r3, r3, #1
   17844:	cmp	r3, #7
   17848:	ldrls	pc, [pc, r3, lsl #2]
   1784c:	b	176ec <_start@@Base+0x4ce8>
   17850:	andeq	r7, r1, r0, lsr r9
   17854:	andeq	r7, r1, r8, lsr #18
   17858:	andeq	r7, r1, r0, lsr #18
   1785c:	andeq	r7, r1, r8, lsl r9
   17860:	andeq	r7, r1, r8, lsl #18
   17864:			; <UNDEFINED> instruction: 0x000178bc
   17868:	andeq	r7, r1, ip, lsr #17
   1786c:	andeq	r7, r1, r0, lsr #12
   17870:	str	fp, [sp]
   17874:	mov	r2, r5
   17878:	mov	r0, r8
   1787c:	mov	r3, #1
   17880:	mov	r1, r6
   17884:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   17888:	cmp	r6, r0
   1788c:	mov	r4, r0
   17890:	beq	170d4 <_start@@Base+0x46d0>
   17894:	mov	r3, #0
   17898:	mov	r2, #0
   1789c:	strd	r2, [r7]
   178a0:	ldr	r3, [sp, #8]
   178a4:	str	r3, [sl]
   178a8:	b	170d4 <_start@@Base+0x46d0>
   178ac:	mov	r2, #0
   178b0:	mov	r3, #0
   178b4:	strd	r2, [sp, #8]
   178b8:	b	1762c <_start@@Base+0x4c28>
   178bc:	mov	r2, #0
   178c0:	mov	r3, #0
   178c4:	strd	r2, [sp, #8]
   178c8:	b	17648 <_start@@Base+0x4c44>
   178cc:	nop			; (mov r0, r0)
   178d0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   178d4:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   178d8:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   178dc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   178e0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   178e4:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   178e8:	rsbsvc	r7, r4, r5, ror #18
   178ec:	svcvs	0x0074656d
   178f0:	andeq	r0, r0, r0
   178f4:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   178f8:	andeq	r0, r0, r0
   178fc:	svcvs	0x006c6f72
   17900:			; <UNDEFINED> instruction: 0xffff0000
   17904:	cmnvs	ip, r0
   17908:	mov	r2, #0
   1790c:	mov	r3, #0
   17910:	strd	r2, [sp, #8]
   17914:	b	17664 <_start@@Base+0x4c60>
   17918:	mov	r3, #0
   1791c:	b	17678 <_start@@Base+0x4c74>
   17920:	mov	r1, #0
   17924:	b	17680 <_start@@Base+0x4c7c>
   17928:	mov	r3, #0
   1792c:	b	17698 <_start@@Base+0x4c94>
   17930:	mov	r3, #0
   17934:	b	176b0 <_start@@Base+0x4cac>
   17938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1793c:	mov	r4, r1
   17940:	sub	sp, sp, #12
   17944:	mov	r1, r2
   17948:	mov	r5, r0
   1794c:	mov	r0, r4
   17950:	mov	sl, r2
   17954:	mov	fp, r3
   17958:	bl	12b30 <_start@@Base+0x12c>
   1795c:	add	r3, pc, #780	; 0x30c
   17960:	ldrd	r2, [r3]
   17964:	ldr	r8, [sp, #48]	; 0x30
   17968:	ldr	r9, [sp, #52]	; 0x34
   1796c:	cmp	r1, r3
   17970:	cmpeq	r0, r2
   17974:	bhi	179b4 <_start@@Base+0x4fb0>
   17978:	add	r3, pc, #760	; 0x2f8
   1797c:	ldrd	r2, [r3]
   17980:	cmp	r1, r3
   17984:	cmpeq	r0, r2
   17988:	bhi	17b00 <_start@@Base+0x50fc>
   1798c:	add	r3, pc, #748	; 0x2ec
   17990:	ldrd	r2, [r3]
   17994:	bic	r1, r1, #255	; 0xff
   17998:	mov	r0, #0
   1799c:	cmp	r1, r3
   179a0:	cmpeq	r0, r2
   179a4:	beq	17bc0 <_start@@Base+0x51bc>
   179a8:	mov	r0, r4
   179ac:	add	sp, sp, #12
   179b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b4:	add	r3, pc, #716	; 0x2cc
   179b8:	ldrd	r2, [r3]
   179bc:	cmp	r1, r3
   179c0:	cmpeq	r0, r2
   179c4:	bhi	17a18 <_start@@Base+0x5014>
   179c8:	add	r3, pc, #704	; 0x2c0
   179cc:	ldrd	r2, [r3]
   179d0:	cmp	r1, r3
   179d4:	cmpeq	r0, r2
   179d8:	bne	179a8 <_start@@Base+0x4fa4>
   179dc:	sub	r3, sl, r4
   179e0:	cmp	r3, #8
   179e4:	ble	179a8 <_start@@Base+0x4fa4>
   179e8:	ldrb	r3, [r4, #8]
   179ec:	cmp	r3, #46	; 0x2e
   179f0:	bne	179a8 <_start@@Base+0x4fa4>
   179f4:	str	r9, [sp, #52]	; 0x34
   179f8:	str	r8, [sp, #48]	; 0x30
   179fc:	mov	r3, fp
   17a00:	mov	r2, sl
   17a04:	add	r1, r4, #9
   17a08:	mov	r0, r5
   17a0c:	add	sp, sp, #12
   17a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a14:	b	15ed0 <_start@@Base+0x34cc>
   17a18:	add	r3, pc, #632	; 0x278
   17a1c:	ldrd	r2, [r3]
   17a20:	cmp	r1, r3
   17a24:	cmpeq	r0, r2
   17a28:	bls	17b70 <_start@@Base+0x516c>
   17a2c:	add	r3, pc, #620	; 0x26c
   17a30:	ldrd	r2, [r3]
   17a34:	cmp	r1, r3
   17a38:	cmpeq	r0, r2
   17a3c:	beq	17c30 <_start@@Base+0x522c>
   17a40:	add	r3, pc, #608	; 0x260
   17a44:	ldrd	r2, [r3]
   17a48:	cmp	r1, r3
   17a4c:	cmpeq	r0, r2
   17a50:	bne	179a8 <_start@@Base+0x4fa4>
   17a54:	add	r6, r4, #8
   17a58:	mov	r0, r6
   17a5c:	mov	r1, sl
   17a60:	bl	12b30 <_start@@Base+0x12c>
   17a64:	add	r3, pc, #580	; 0x244
   17a68:	ldrd	r2, [r3]
   17a6c:	mov	r0, #0
   17a70:	cmp	r1, r3
   17a74:	cmpeq	r0, r2
   17a78:	bne	179a8 <_start@@Base+0x4fa4>
   17a7c:	sub	r3, sl, r6
   17a80:	cmp	r3, #4
   17a84:	ble	179a8 <_start@@Base+0x4fa4>
   17a88:	ldrb	r3, [r4, #12]
   17a8c:	cmp	r3, #46	; 0x2e
   17a90:	bne	179a8 <_start@@Base+0x4fa4>
   17a94:	add	r7, r4, #13
   17a98:	cmp	r6, r7
   17a9c:	beq	179a8 <_start@@Base+0x4fa4>
   17aa0:	mov	r1, sl
   17aa4:	mov	r0, r7
   17aa8:	bl	12b30 <_start@@Base+0x12c>
   17aac:	mov	r0, #0
   17ab0:	and	r1, r1, #-16777216	; 0xff000000
   17ab4:	cmp	r1, #2013265920	; 0x78000000
   17ab8:	cmpeq	r0, #0
   17abc:	movne	r4, r7
   17ac0:	bne	179a8 <_start@@Base+0x4fa4>
   17ac4:	str	r9, [sp]
   17ac8:	mov	r2, sl
   17acc:	mov	r0, r5
   17ad0:	mov	r3, #1
   17ad4:	mov	r1, r7
   17ad8:	bl	29eb8 <flatcc_json_parser_match_constant@@Base>
   17adc:	cmp	r7, r0
   17ae0:	mov	r4, r0
   17ae4:	beq	179a8 <_start@@Base+0x4fa4>
   17ae8:	mov	r0, #0
   17aec:	mov	r1, #0
   17af0:	mov	r3, #0
   17af4:	strd	r0, [r8]
   17af8:	str	r3, [fp]
   17afc:	b	179a8 <_start@@Base+0x4fa4>
   17b00:	add	r7, pc, #432	; 0x1b0
   17b04:	ldrd	r6, [r7]
   17b08:	bic	r3, r1, #255	; 0xff
   17b0c:	mov	r2, #0
   17b10:	cmp	r3, r7
   17b14:	cmpeq	r2, r6
   17b18:	beq	17bf4 <_start@@Base+0x51f0>
   17b1c:	add	r3, pc, #412	; 0x19c
   17b20:	ldrd	r2, [r3]
   17b24:	and	r0, r0, #-16777216	; 0xff000000
   17b28:	cmp	r1, r3
   17b2c:	cmpeq	r0, r2
   17b30:	bne	179a8 <_start@@Base+0x4fa4>
   17b34:	sub	r3, sl, r4
   17b38:	cmp	r3, #5
   17b3c:	ble	179a8 <_start@@Base+0x4fa4>
   17b40:	ldrb	r3, [r4, #5]
   17b44:	cmp	r3, #46	; 0x2e
   17b48:	bne	179a8 <_start@@Base+0x4fa4>
   17b4c:	str	r9, [sp, #52]	; 0x34
   17b50:	str	r8, [sp, #48]	; 0x30
   17b54:	mov	r3, fp
   17b58:	mov	r2, sl
   17b5c:	add	r1, r4, #6
   17b60:	mov	r0, r5
   17b64:	add	sp, sp, #12
   17b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b6c:	b	15c68 <_start@@Base+0x3264>
   17b70:	add	r3, pc, #336	; 0x150
   17b74:	ldrd	r2, [r3]
   17b78:	cmp	r1, r3
   17b7c:	cmpeq	r0, r2
   17b80:	bne	179a8 <_start@@Base+0x4fa4>
   17b84:	sub	r3, sl, r4
   17b88:	cmp	r3, #8
   17b8c:	ble	179a8 <_start@@Base+0x4fa4>
   17b90:	ldrb	r3, [r4, #8]
   17b94:	cmp	r3, #46	; 0x2e
   17b98:	bne	179a8 <_start@@Base+0x4fa4>
   17b9c:	str	r9, [sp, #52]	; 0x34
   17ba0:	str	r8, [sp, #48]	; 0x30
   17ba4:	mov	r3, fp
   17ba8:	mov	r2, sl
   17bac:	add	r1, r4, #9
   17bb0:	mov	r0, r5
   17bb4:	add	sp, sp, #12
   17bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bbc:	b	16a18 <_start@@Base+0x4014>
   17bc0:	sub	r3, sl, r4
   17bc4:	cmp	r3, #3
   17bc8:	ble	179a8 <_start@@Base+0x4fa4>
   17bcc:	ldrb	r3, [r4, #3]
   17bd0:	cmp	r3, #46	; 0x2e
   17bd4:	bne	179a8 <_start@@Base+0x4fa4>
   17bd8:	mov	r3, fp
   17bdc:	mov	r2, sl
   17be0:	add	r1, r4, #4
   17be4:	mov	r0, r5
   17be8:	add	sp, sp, #12
   17bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bf0:	b	16d0c <_start@@Base+0x4308>
   17bf4:	sub	r3, sl, r4
   17bf8:	cmp	r3, #3
   17bfc:	ble	179a8 <_start@@Base+0x4fa4>
   17c00:	ldrb	r3, [r4, #3]
   17c04:	cmp	r3, #46	; 0x2e
   17c08:	bne	179a8 <_start@@Base+0x4fa4>
   17c0c:	str	r9, [sp, #52]	; 0x34
   17c10:	str	r8, [sp, #48]	; 0x30
   17c14:	mov	r3, fp
   17c18:	mov	r2, sl
   17c1c:	add	r1, r4, #4
   17c20:	mov	r0, r5
   17c24:	add	sp, sp, #12
   17c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c2c:	b	157c8 <_start@@Base+0x2dc4>
   17c30:	sub	r3, sl, r4
   17c34:	cmp	r3, #8
   17c38:	ble	179a8 <_start@@Base+0x4fa4>
   17c3c:	ldrb	r3, [r4, #8]
   17c40:	cmp	r3, #46	; 0x2e
   17c44:	bne	179a8 <_start@@Base+0x4fa4>
   17c48:	str	r9, [sp, #52]	; 0x34
   17c4c:	str	r8, [sp, #48]	; 0x30
   17c50:	mov	r3, fp
   17c54:	mov	r2, sl
   17c58:	add	r1, r4, #9
   17c5c:	mov	r0, r5
   17c60:	add	sp, sp, #12
   17c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c68:	b	15a10 <_start@@Base+0x300c>
   17c6c:	nop			; (mov r0, r0)
   17c70:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   17c74:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   17c78:	ldrshvc	pc, [pc, #255]	; 17d7f <_start@@Base+0x537b>	; <UNPREDICTABLE>
   17c7c:	cmnmi	pc, #28416	; 0x6f00
   17c80:	andeq	r0, r0, r0
   17c84:	cmnmi	lr, r0, lsl #18
   17c88:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   17c8c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   17c90:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17c94:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   17c98:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   17c9c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   17ca0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17ca4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   17ca8:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   17cac:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   17cb0:	andeq	r0, r0, r0
   17cb4:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17cb8:	andeq	r0, r0, r0
   17cbc:	strbtmi	r6, [pc], -r0, lsl #30
   17cc0:	andvc	r0, r0, #0
   17cc4:	cmnmi	pc, #28416	; 0x6f00
   17cc8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17ccc:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   17cd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17cd4:	mov	r7, r3
   17cd8:	mov	r3, #0
   17cdc:	mov	r5, r0
   17ce0:	mov	r6, r1
   17ce4:	str	r3, [r7]
   17ce8:	mov	r1, r3
   17cec:	ldr	r0, [r0]
   17cf0:	mov	r4, r2
   17cf4:	bl	244d8 <flatcc_builder_start_table@@Base>
   17cf8:	cmp	r0, #0
   17cfc:	bne	17d38 <_start@@Base+0x5334>
   17d00:	cmp	r6, r4
   17d04:	beq	17d14 <_start@@Base+0x5310>
   17d08:	ldrb	r3, [r6]
   17d0c:	cmp	r3, #123	; 0x7b
   17d10:	beq	17d6c <_start@@Base+0x5368>
   17d14:	mov	r1, r6
   17d18:	mov	r3, #21
   17d1c:	mov	r2, r4
   17d20:	mov	r0, r5
   17d24:	bl	295ac <flatcc_json_parser_set_error@@Base>
   17d28:	mov	r6, r0
   17d2c:	ldr	r3, [r5, #24]
   17d30:	cmp	r3, #0
   17d34:	beq	17d50 <_start@@Base+0x534c>
   17d38:	mov	r2, r4
   17d3c:	mov	r1, r6
   17d40:	mov	r0, r5
   17d44:	mov	r3, #33	; 0x21
   17d48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17d4c:	b	295ac <flatcc_json_parser_set_error@@Base>
   17d50:	ldr	r0, [r5]
   17d54:	bl	24f18 <flatcc_builder_end_table@@Base>
   17d58:	cmp	r0, #0
   17d5c:	str	r0, [r7]
   17d60:	beq	17d38 <_start@@Base+0x5334>
   17d64:	mov	r0, r6
   17d68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d6c:	add	r1, r6, #1
   17d70:	sub	r3, r4, r1
   17d74:	cmp	r3, #1
   17d78:	ble	17d8c <_start@@Base+0x5388>
   17d7c:	ldrb	r3, [r6, #1]
   17d80:	cmp	r3, #32
   17d84:	bhi	17d9c <_start@@Base+0x5398>
   17d88:	beq	17f64 <_start@@Base+0x5560>
   17d8c:	mov	r2, r4
   17d90:	mov	r0, r5
   17d94:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   17d98:	mov	r1, r0
   17d9c:	cmp	r4, r1
   17da0:	beq	17db0 <_start@@Base+0x53ac>
   17da4:	ldrb	r3, [r1]
   17da8:	cmp	r3, #125	; 0x7d
   17dac:	beq	17f94 <_start@@Base+0x5590>
   17db0:	mov	r6, #1
   17db4:	mov	r9, #5
   17db8:	mov	r8, #0
   17dbc:	cmp	r4, r1
   17dc0:	beq	17de4 <_start@@Base+0x53e0>
   17dc4:	ldrb	r3, [r1]
   17dc8:	cmp	r3, #34	; 0x22
   17dcc:	addeq	r1, r1, #1
   17dd0:	streq	r8, [r5, #12]
   17dd4:	beq	17de4 <_start@@Base+0x53e0>
   17dd8:	cmp	r3, #46	; 0x2e
   17ddc:	strne	r6, [r5, #12]
   17de0:	beq	17f24 <_start@@Base+0x5520>
   17de4:	mov	r2, r4
   17de8:	mov	r0, r5
   17dec:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   17df0:	sub	r3, r4, r0
   17df4:	cmp	r3, #1
   17df8:	ble	17e0c <_start@@Base+0x5408>
   17dfc:	ldrb	r3, [r0]
   17e00:	cmp	r3, #32
   17e04:	bhi	17e1c <_start@@Base+0x5418>
   17e08:	beq	17e8c <_start@@Base+0x5488>
   17e0c:	mov	r1, r0
   17e10:	mov	r2, r4
   17e14:	mov	r0, r5
   17e18:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   17e1c:	cmp	r4, r0
   17e20:	beq	17ea4 <_start@@Base+0x54a0>
   17e24:	ldrb	r3, [r0]
   17e28:	cmp	r3, #44	; 0x2c
   17e2c:	beq	17eac <_start@@Base+0x54a8>
   17e30:	cmp	r3, #125	; 0x7d
   17e34:	beq	17e54 <_start@@Base+0x5450>
   17e38:	mov	r1, r0
   17e3c:	mov	r3, #10
   17e40:	mov	r2, r4
   17e44:	mov	r0, r5
   17e48:	bl	295ac <flatcc_json_parser_set_error@@Base>
   17e4c:	mov	r6, r0
   17e50:	b	17d2c <_start@@Base+0x5328>
   17e54:	add	r6, r0, #1
   17e58:	sub	r3, r4, r6
   17e5c:	cmp	r3, #1
   17e60:	ble	17e74 <_start@@Base+0x5470>
   17e64:	ldrb	r3, [r0, #1]
   17e68:	cmp	r3, #32
   17e6c:	bhi	17d2c <_start@@Base+0x5328>
   17e70:	beq	17f3c <_start@@Base+0x5538>
   17e74:	mov	r1, r6
   17e78:	mov	r2, r4
   17e7c:	mov	r0, r5
   17e80:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   17e84:	mov	r6, r0
   17e88:	b	17d2c <_start@@Base+0x5328>
   17e8c:	ldrb	r3, [r0, #1]
   17e90:	cmp	r3, #32
   17e94:	addhi	r0, r0, #1
   17e98:	bls	17e0c <_start@@Base+0x5408>
   17e9c:	cmp	r4, r0
   17ea0:	bne	17e24 <_start@@Base+0x5420>
   17ea4:	mov	r6, r4
   17ea8:	b	17d2c <_start@@Base+0x5328>
   17eac:	add	r1, r0, #1
   17eb0:	sub	r3, r4, r1
   17eb4:	cmp	r3, #1
   17eb8:	ble	17ecc <_start@@Base+0x54c8>
   17ebc:	ldrb	r3, [r0, #1]
   17ec0:	cmp	r3, #32
   17ec4:	bhi	17edc <_start@@Base+0x54d8>
   17ec8:	beq	17f50 <_start@@Base+0x554c>
   17ecc:	mov	r2, r4
   17ed0:	mov	r0, r5
   17ed4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   17ed8:	mov	r1, r0
   17edc:	cmp	r4, r1
   17ee0:	beq	17f78 <_start@@Base+0x5574>
   17ee4:	ldrb	r3, [r1]
   17ee8:	cmp	r3, #125	; 0x7d
   17eec:	bne	17dbc <_start@@Base+0x53b8>
   17ef0:	add	r6, r1, #1
   17ef4:	sub	r3, r4, r6
   17ef8:	cmp	r3, #1
   17efc:	ble	17e74 <_start@@Base+0x5470>
   17f00:	ldrb	r3, [r1, #1]
   17f04:	cmp	r3, #32
   17f08:	bhi	17d2c <_start@@Base+0x5328>
   17f0c:	bne	17e74 <_start@@Base+0x5470>
   17f10:	ldrb	r3, [r1, #2]
   17f14:	cmp	r3, #32
   17f18:	addhi	r6, r1, #2
   17f1c:	bls	17e74 <_start@@Base+0x5470>
   17f20:	b	17d2c <_start@@Base+0x5328>
   17f24:	mov	r3, r9
   17f28:	mov	r2, r4
   17f2c:	mov	r0, r5
   17f30:	bl	295ac <flatcc_json_parser_set_error@@Base>
   17f34:	mov	r1, r0
   17f38:	b	17de4 <_start@@Base+0x53e0>
   17f3c:	ldrb	r3, [r0, #2]
   17f40:	cmp	r3, #32
   17f44:	addhi	r6, r0, #2
   17f48:	bls	17e74 <_start@@Base+0x5470>
   17f4c:	b	17d2c <_start@@Base+0x5328>
   17f50:	ldrb	r3, [r0, #2]
   17f54:	cmp	r3, #32
   17f58:	addhi	r1, r0, #2
   17f5c:	bls	17ecc <_start@@Base+0x54c8>
   17f60:	b	17edc <_start@@Base+0x54d8>
   17f64:	ldrb	r3, [r6, #2]
   17f68:	cmp	r3, #32
   17f6c:	addhi	r1, r6, #2
   17f70:	bls	17d8c <_start@@Base+0x5388>
   17f74:	b	17d9c <_start@@Base+0x5398>
   17f78:	mov	r3, #10
   17f7c:	mov	r2, r4
   17f80:	mov	r1, r4
   17f84:	mov	r0, r5
   17f88:	bl	295ac <flatcc_json_parser_set_error@@Base>
   17f8c:	mov	r6, r0
   17f90:	b	17d2c <_start@@Base+0x5328>
   17f94:	add	r1, r1, #1
   17f98:	mov	r2, r4
   17f9c:	mov	r0, r5
   17fa0:	bl	12fac <_start@@Base+0x5a8>
   17fa4:	mov	r6, r0
   17fa8:	b	17d2c <_start@@Base+0x5328>
   17fac:	push	{r4, r5, r6, lr}
   17fb0:	mov	r4, r0
   17fb4:	ldr	r0, [r0, #12]
   17fb8:	mov	r5, r2
   17fbc:	cmp	r0, #0
   17fc0:	ldrb	r2, [r1, r3]
   17fc4:	beq	1803c <_start@@Base+0x5638>
   17fc8:	cmp	r2, #58	; 0x3a
   17fcc:	cmpne	r2, #32
   17fd0:	movls	r2, #0
   17fd4:	add	r0, r1, r3
   17fd8:	movhi	r2, #1
   17fdc:	strls	r2, [r4, #12]
   17fe0:	bhi	18044 <_start@@Base+0x5640>
   17fe4:	sub	r2, r5, r0
   17fe8:	cmp	r2, #1
   17fec:	ble	18000 <_start@@Base+0x55fc>
   17ff0:	ldrb	r2, [r0]
   17ff4:	cmp	r2, #32
   17ff8:	bhi	18010 <_start@@Base+0x560c>
   17ffc:	beq	18058 <_start@@Base+0x5654>
   18000:	mov	r1, r0
   18004:	mov	r2, r5
   18008:	mov	r0, r4
   1800c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   18010:	cmp	r5, r0
   18014:	beq	18024 <_start@@Base+0x5620>
   18018:	ldrb	r2, [r0]
   1801c:	cmp	r2, #58	; 0x3a
   18020:	beq	1806c <_start@@Base+0x5668>
   18024:	mov	r2, r5
   18028:	mov	r1, r0
   1802c:	mov	r3, #4
   18030:	mov	r0, r4
   18034:	pop	{r4, r5, r6, lr}
   18038:	b	295ac <flatcc_json_parser_set_error@@Base>
   1803c:	cmp	r2, #34	; 0x22
   18040:	beq	1804c <_start@@Base+0x5648>
   18044:	mov	r0, r1
   18048:	pop	{r4, r5, r6, pc}
   1804c:	add	r3, r3, #1
   18050:	add	r0, r1, r3
   18054:	b	17fe4 <_start@@Base+0x55e0>
   18058:	ldrb	r2, [r0, #1]
   1805c:	cmp	r2, #32
   18060:	addhi	r0, r0, #1
   18064:	bls	18000 <_start@@Base+0x55fc>
   18068:	b	18010 <_start@@Base+0x560c>
   1806c:	add	r1, r0, #1
   18070:	sub	r2, r5, r1
   18074:	cmp	r2, #1
   18078:	ble	1808c <_start@@Base+0x5688>
   1807c:	ldrb	r2, [r0, #1]
   18080:	cmp	r2, #32
   18084:	bhi	18044 <_start@@Base+0x5640>
   18088:	beq	1809c <_start@@Base+0x5698>
   1808c:	mov	r2, r5
   18090:	mov	r0, r4
   18094:	pop	{r4, r5, r6, lr}
   18098:	b	296ac <flatcc_json_parser_space_ext@@Base>
   1809c:	ldrb	r2, [r0, #2]
   180a0:	cmp	r2, #32
   180a4:	addhi	r1, r0, #2
   180a8:	bls	1808c <_start@@Base+0x5688>
   180ac:	b	18044 <_start@@Base+0x5640>
   180b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180b4:	mov	r9, r3
   180b8:	mov	r3, #0
   180bc:	sub	sp, sp, #76	; 0x4c
   180c0:	mov	r8, r0
   180c4:	mov	r4, r1
   180c8:	str	r3, [r9]
   180cc:	ldr	r0, [r0]
   180d0:	mov	r1, #9
   180d4:	mov	r5, r2
   180d8:	bl	244d8 <flatcc_builder_start_table@@Base>
   180dc:	cmp	r0, #0
   180e0:	bne	18350 <_start@@Base+0x594c>
   180e4:	mov	r1, r4
   180e8:	add	r3, sp, #56	; 0x38
   180ec:	mov	r2, r5
   180f0:	mov	r0, r8
   180f4:	bl	133b4 <_start@@Base+0x9b0>
   180f8:	ldr	r3, [sp, #56]	; 0x38
   180fc:	mov	r4, r0
   18100:	cmp	r3, #0
   18104:	beq	18550 <_start@@Base+0x5b4c>
   18108:	cmp	r5, r4
   1810c:	beq	183cc <_start@@Base+0x59c8>
   18110:	ldrb	r3, [r4]
   18114:	cmp	r3, #34	; 0x22
   18118:	beq	18518 <_start@@Base+0x5b14>
   1811c:	cmp	r3, #46	; 0x2e
   18120:	movne	r3, #1
   18124:	subne	ip, r5, r4
   18128:	strne	r3, [r8, #12]
   1812c:	beq	188e8 <_start@@Base+0x5ee4>
   18130:	cmp	ip, #8
   18134:	bls	18458 <_start@@Base+0x5a54>
   18138:	ldrb	r2, [r4, #7]
   1813c:	mov	r3, #0
   18140:	ldrb	r0, [r4, #6]
   18144:	lsr	lr, r0, #24
   18148:	lsl	r1, r0, #8
   1814c:	str	lr, [sp, #52]	; 0x34
   18150:	str	r1, [sp, #48]	; 0x30
   18154:	ldrd	r0, [sp, #48]	; 0x30
   18158:	orr	r0, r0, r2
   1815c:	orr	r1, r1, r3
   18160:	mov	r2, r0
   18164:	mov	r3, r1
   18168:	ldrb	r0, [r4, #5]
   1816c:	lsr	lr, r0, #16
   18170:	lsl	r1, r0, #16
   18174:	str	lr, [sp, #44]	; 0x2c
   18178:	str	r1, [sp, #40]	; 0x28
   1817c:	ldrd	r0, [sp, #40]	; 0x28
   18180:	orr	r0, r0, r2
   18184:	orr	r1, r1, r3
   18188:	mov	r2, r0
   1818c:	mov	r3, r1
   18190:	ldrb	r0, [r4, #4]
   18194:	lsr	lr, r0, #8
   18198:	lsl	r1, r0, #24
   1819c:	str	lr, [sp, #28]
   181a0:	str	r1, [sp, #24]
   181a4:	ldrd	r0, [sp, #24]
   181a8:	orr	r0, r0, r2
   181ac:	orr	r1, r1, r3
   181b0:	mov	r2, r0
   181b4:	mov	r3, r1
   181b8:	ldrb	r1, [r4, #3]
   181bc:	str	r1, [sp, #36]	; 0x24
   181c0:	mov	r1, #0
   181c4:	str	r1, [sp, #32]
   181c8:	ldrd	r0, [sp, #32]
   181cc:	orr	r0, r0, r2
   181d0:	orr	r1, r1, r3
   181d4:	mov	r2, r0
   181d8:	mov	r3, r1
   181dc:	ldrb	r0, [r4, #2]
   181e0:	lsl	r1, r0, #8
   181e4:	str	r1, [sp, #20]
   181e8:	mov	r1, #0
   181ec:	str	r1, [sp, #16]
   181f0:	ldrd	r0, [sp, #16]
   181f4:	orr	r0, r0, r2
   181f8:	orr	r1, r1, r3
   181fc:	mov	r2, r0
   18200:	mov	r3, r1
   18204:	ldrb	r0, [r4, #1]
   18208:	lsl	r1, r0, #16
   1820c:	str	r1, [sp, #12]
   18210:	mov	r1, #0
   18214:	str	r1, [sp, #8]
   18218:	ldrd	r0, [sp, #8]
   1821c:	orr	r0, r0, r2
   18220:	orr	r1, r1, r3
   18224:	mov	r2, r0
   18228:	mov	r3, r1
   1822c:	ldrb	r6, [r4]
   18230:	add	r1, pc, #832	; 0x340
   18234:	ldrd	r0, [r1]
   18238:	mov	sl, #0
   1823c:	orr	r2, r2, sl
   18240:	lsl	fp, r6, #24
   18244:	orr	r3, r3, fp
   18248:	cmp	r3, r1
   1824c:	cmpeq	r2, r0
   18250:	bls	1836c <_start@@Base+0x5968>
   18254:	add	r1, pc, #804	; 0x324
   18258:	ldrd	r0, [r1]
   1825c:	cmp	r3, r1
   18260:	cmpeq	r2, r0
   18264:	beq	18688 <_start@@Base+0x5c84>
   18268:	add	r1, pc, #792	; 0x318
   1826c:	ldrd	r0, [r1]
   18270:	mov	r6, #0
   18274:	cmp	r3, r1
   18278:	cmpeq	r6, r0
   1827c:	beq	187f8 <_start@@Base+0x5df4>
   18280:	add	r1, pc, #776	; 0x308
   18284:	ldrd	r0, [r1]
   18288:	cmp	r3, r1
   1828c:	cmpeq	r2, r0
   18290:	bne	183cc <_start@@Base+0x59c8>
   18294:	cmp	ip, #8
   18298:	bgt	18908 <_start@@Base+0x5f04>
   1829c:	add	r4, r4, #8
   182a0:	mov	r0, r4
   182a4:	mov	r1, r5
   182a8:	bl	12b30 <_start@@Base+0x12c>
   182ac:	mov	r0, #0
   182b0:	and	r1, r1, #-16777216	; 0xff000000
   182b4:	cmp	r1, #889192448	; 0x35000000
   182b8:	cmpeq	r0, #0
   182bc:	bne	183cc <_start@@Base+0x59c8>
   182c0:	sub	r3, r5, r4
   182c4:	cmp	r3, #1
   182c8:	ble	183cc <_start@@Base+0x59c8>
   182cc:	mov	r3, #1
   182d0:	mov	r2, r5
   182d4:	mov	r1, r4
   182d8:	mov	r0, r8
   182dc:	bl	17fac <_start@@Base+0x55a8>
   182e0:	cmp	r4, r0
   182e4:	mov	r7, r0
   182e8:	beq	183cc <_start@@Base+0x59c8>
   182ec:	add	r4, sp, #72	; 0x48
   182f0:	mov	r3, #0
   182f4:	str	r3, [r4, #-8]!
   182f8:	mov	r1, r0
   182fc:	mov	r2, r5
   18300:	mov	r3, r4
   18304:	mov	r0, r8
   18308:	bl	1309c <_start@@Base+0x698>
   1830c:	cmp	r0, r7
   18310:	mov	r6, r0
   18314:	beq	18bd0 <_start@@Base+0x61cc>
   18318:	ldr	r3, [sp, #64]	; 0x40
   1831c:	cmp	r3, #0
   18320:	bne	18330 <_start@@Base+0x592c>
   18324:	ldr	r3, [r8, #8]
   18328:	tst	r3, #2
   1832c:	beq	183e0 <_start@@Base+0x59dc>
   18330:	mov	r3, #4
   18334:	mov	r2, r3
   18338:	mov	r1, #8
   1833c:	ldr	r0, [r8]
   18340:	bl	26644 <flatcc_builder_table_add@@Base>
   18344:	cmp	r0, #0
   18348:	bne	1867c <_start@@Base+0x5c78>
   1834c:	mov	r4, r6
   18350:	mov	r2, r5
   18354:	mov	r1, r4
   18358:	mov	r0, r8
   1835c:	mov	r3, #33	; 0x21
   18360:	bl	295ac <flatcc_json_parser_set_error@@Base>
   18364:	add	sp, sp, #76	; 0x4c
   18368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1836c:	add	r1, pc, #548	; 0x224
   18370:	ldrd	r0, [r1]
   18374:	cmp	r3, r1
   18378:	cmpeq	r2, r0
   1837c:	beq	185d0 <_start@@Base+0x5bcc>
   18380:	add	r7, pc, #536	; 0x218
   18384:	ldrd	r6, [r7]
   18388:	mov	r0, #0
   1838c:	mov	r1, r3
   18390:	cmp	r3, r7
   18394:	cmpeq	r0, r6
   18398:	beq	18798 <_start@@Base+0x5d94>
   1839c:	add	r7, pc, #516	; 0x204
   183a0:	ldrd	r6, [r7]
   183a4:	cmp	r3, r7
   183a8:	cmpeq	r2, r6
   183ac:	beq	18858 <_start@@Base+0x5e54>
   183b0:	add	r3, pc, #504	; 0x1f8
   183b4:	ldrd	r2, [r3]
   183b8:	cmp	r1, r3
   183bc:	cmpeq	r0, r2
   183c0:	bne	183cc <_start@@Base+0x59c8>
   183c4:	cmp	ip, #4
   183c8:	bgt	18a20 <_start@@Base+0x601c>
   183cc:	mov	r1, r4
   183d0:	mov	r2, r5
   183d4:	mov	r0, r8
   183d8:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   183dc:	mov	r6, r0
   183e0:	sub	r3, r5, r6
   183e4:	cmp	r3, #1
   183e8:	ble	183fc <_start@@Base+0x59f8>
   183ec:	ldrb	r3, [r6]
   183f0:	cmp	r3, #32
   183f4:	bhi	18410 <_start@@Base+0x5a0c>
   183f8:	beq	1852c <_start@@Base+0x5b28>
   183fc:	mov	r1, r6
   18400:	mov	r2, r5
   18404:	mov	r0, r8
   18408:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1840c:	mov	r6, r0
   18410:	cmp	r5, r6
   18414:	beq	18544 <_start@@Base+0x5b40>
   18418:	ldrb	r3, [r6]
   1841c:	cmp	r3, #44	; 0x2c
   18420:	beq	18744 <_start@@Base+0x5d40>
   18424:	mov	r3, #0
   18428:	str	r3, [sp, #56]	; 0x38
   1842c:	ldrb	r3, [r6]
   18430:	cmp	r3, #125	; 0x7d
   18434:	beq	184dc <_start@@Base+0x5ad8>
   18438:	mov	r3, #10
   1843c:	mov	r1, r6
   18440:	mov	r2, r5
   18444:	mov	r0, r8
   18448:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1844c:	ldr	r3, [sp, #56]	; 0x38
   18450:	mov	r4, r0
   18454:	b	18100 <_start@@Base+0x56fc>
   18458:	sub	r3, ip, #1
   1845c:	cmp	r3, #7
   18460:	ldrls	pc, [pc, r3, lsl #2]
   18464:	b	183cc <_start@@Base+0x59c8>
   18468:	ldrdeq	r8, [r1], -r0
   1846c:	andeq	r8, r1, r4, asr #9
   18470:			; <UNDEFINED> instruction: 0x000184b8
   18474:	andeq	r8, r1, ip, lsr #9
   18478:	andeq	r8, r1, r0, lsr #9
   1847c:	muleq	r1, r4, r4
   18480:	andeq	r8, r1, r8, lsl #9
   18484:	andeq	r8, r1, r8, lsr r1
   18488:	mov	r2, #0
   1848c:	mov	r3, #0
   18490:	b	18140 <_start@@Base+0x573c>
   18494:	mov	r2, #0
   18498:	mov	r3, #0
   1849c:	b	18168 <_start@@Base+0x5764>
   184a0:	mov	r2, #0
   184a4:	mov	r3, #0
   184a8:	b	18190 <_start@@Base+0x578c>
   184ac:	mov	r2, #0
   184b0:	mov	r3, #0
   184b4:	b	181b8 <_start@@Base+0x57b4>
   184b8:	mov	r2, #0
   184bc:	mov	r3, #0
   184c0:	b	181dc <_start@@Base+0x57d8>
   184c4:	mov	r2, #0
   184c8:	mov	r3, #0
   184cc:	b	18204 <_start@@Base+0x5800>
   184d0:	mov	r2, #0
   184d4:	mov	r3, #0
   184d8:	b	1822c <_start@@Base+0x5828>
   184dc:	add	r4, r6, #1
   184e0:	sub	r3, r5, r4
   184e4:	cmp	r3, #1
   184e8:	ble	184fc <_start@@Base+0x5af8>
   184ec:	ldrb	r3, [r6, #1]
   184f0:	cmp	r3, #32
   184f4:	bhi	18550 <_start@@Base+0x5b4c>
   184f8:	beq	18a80 <_start@@Base+0x607c>
   184fc:	mov	r1, r4
   18500:	mov	r2, r5
   18504:	mov	r0, r8
   18508:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1850c:	ldr	r3, [sp, #56]	; 0x38
   18510:	mov	r4, r0
   18514:	b	18100 <_start@@Base+0x56fc>
   18518:	add	r4, r4, #1
   1851c:	mov	r3, #0
   18520:	sub	ip, r5, r4
   18524:	str	r3, [r8, #12]
   18528:	b	18130 <_start@@Base+0x572c>
   1852c:	ldrb	r3, [r6, #1]
   18530:	cmp	r3, #32
   18534:	addhi	r6, r6, #1
   18538:	bls	183fc <_start@@Base+0x59f8>
   1853c:	cmp	r5, r6
   18540:	bne	18418 <_start@@Base+0x5a14>
   18544:	mov	r4, r5
   18548:	mov	r3, #0
   1854c:	str	r3, [sp, #56]	; 0x38
   18550:	ldr	r3, [r8, #24]
   18554:	cmp	r3, #0
   18558:	bne	18350 <_start@@Base+0x594c>
   1855c:	ldr	r0, [r8]
   18560:	bl	24f18 <flatcc_builder_end_table@@Base>
   18564:	cmp	r0, #0
   18568:	str	r0, [r9]
   1856c:	beq	18350 <_start@@Base+0x594c>
   18570:	mov	r0, r4
   18574:	b	18364 <_start@@Base+0x5960>
   18578:			; <UNDEFINED> instruction: 0xffffffff
   1857c:	cmnvs	r3, #-2013265919	; 0x88000001
   18580:	teqcc	r2, r4, lsr r3
   18584:	cmnvs	r3, #-1946157055	; 0x8c000001
   18588:	andeq	r0, r0, r0
   1858c:	cmnvs	r3, #-1946157055	; 0x8c000001
   18590:	teqcc	r2, r4, lsr r3
   18594:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   18598:	teqcc	r2, r4, lsr r3
   1859c:	cmnvs	r1, r1, ror #2
   185a0:	andeq	r0, r0, r0
   185a4:	cmnvs	r1, r1, ror #2
   185a8:	teqcc	r2, r4, lsr r3
   185ac:	rsbvs	r6, r2, #536870918	; 0x20000006
   185b0:	andeq	r0, r0, r0
   185b4:	rsbvs	r6, r2, #536870918	; 0x20000006
   185b8:	andeq	r1, r4, ip, asr #1
   185bc:	strheq	r1, [r4], -r4
   185c0:	andeq	r1, r4, r8, lsr #1
   185c4:	muleq	r4, ip, r0
   185c8:	andeq	r1, r4, r0, asr #1
   185cc:	ldrdeq	r1, [r4], -r8
   185d0:	add	r4, r4, #8
   185d4:	mov	r0, r4
   185d8:	mov	r1, r5
   185dc:	bl	12b30 <_start@@Base+0x12c>
   185e0:	mov	r0, #0
   185e4:	and	r1, r1, #-16777216	; 0xff000000
   185e8:	cmp	r1, #889192448	; 0x35000000
   185ec:	cmpeq	r0, #0
   185f0:	bne	183cc <_start@@Base+0x59c8>
   185f4:	sub	r3, r5, r4
   185f8:	cmp	r3, #1
   185fc:	ble	183cc <_start@@Base+0x59c8>
   18600:	mov	r3, #1
   18604:	mov	r2, r5
   18608:	mov	r1, r4
   1860c:	mov	r0, r8
   18610:	bl	17fac <_start@@Base+0x55a8>
   18614:	cmp	r4, r0
   18618:	mov	r7, r0
   1861c:	beq	183cc <_start@@Base+0x59c8>
   18620:	add	r4, sp, #72	; 0x48
   18624:	mov	r1, r0
   18628:	str	sl, [r4, #-8]!
   1862c:	mov	r2, r5
   18630:	mov	r3, r4
   18634:	mov	r0, r8
   18638:	bl	1309c <_start@@Base+0x698>
   1863c:	cmp	r0, r7
   18640:	mov	r6, r0
   18644:	beq	18b78 <_start@@Base+0x6174>
   18648:	ldr	r3, [sp, #64]	; 0x40
   1864c:	cmp	r3, #0
   18650:	bne	18660 <_start@@Base+0x5c5c>
   18654:	ldr	r3, [r8, #8]
   18658:	tst	r3, #2
   1865c:	beq	183e0 <_start@@Base+0x59dc>
   18660:	mov	r3, #4
   18664:	mov	r2, r3
   18668:	mov	r1, #1
   1866c:	ldr	r0, [r8]
   18670:	bl	26644 <flatcc_builder_table_add@@Base>
   18674:	cmp	r0, #0
   18678:	beq	1834c <_start@@Base+0x5948>
   1867c:	ldr	r3, [sp, #64]	; 0x40
   18680:	str	r3, [r0]
   18684:	b	183e0 <_start@@Base+0x59dc>
   18688:	cmp	ip, #8
   1868c:	bgt	18998 <_start@@Base+0x5f94>
   18690:	add	r4, r4, #8
   18694:	mov	r0, r4
   18698:	mov	r1, r5
   1869c:	bl	12b30 <_start@@Base+0x12c>
   186a0:	mov	r0, #0
   186a4:	and	r1, r1, #-16777216	; 0xff000000
   186a8:	cmp	r1, #889192448	; 0x35000000
   186ac:	cmpeq	r0, #0
   186b0:	bne	183cc <_start@@Base+0x59c8>
   186b4:	sub	r3, r5, r4
   186b8:	cmp	r3, #1
   186bc:	ble	183cc <_start@@Base+0x59c8>
   186c0:	mov	r3, #1
   186c4:	mov	r2, r5
   186c8:	mov	r1, r4
   186cc:	mov	r0, r8
   186d0:	bl	17fac <_start@@Base+0x55a8>
   186d4:	cmp	r4, r0
   186d8:	mov	r7, r0
   186dc:	beq	183cc <_start@@Base+0x59c8>
   186e0:	add	r4, sp, #72	; 0x48
   186e4:	mov	r3, #0
   186e8:	str	r3, [r4, #-8]!
   186ec:	mov	r1, r0
   186f0:	mov	r2, r5
   186f4:	mov	r3, r4
   186f8:	mov	r0, r8
   186fc:	bl	1309c <_start@@Base+0x698>
   18700:	cmp	r0, r7
   18704:	mov	r6, r0
   18708:	beq	18ba4 <_start@@Base+0x61a0>
   1870c:	ldr	r3, [sp, #64]	; 0x40
   18710:	cmp	r3, #0
   18714:	bne	18724 <_start@@Base+0x5d20>
   18718:	ldr	r3, [r8, #8]
   1871c:	tst	r3, #2
   18720:	beq	183e0 <_start@@Base+0x59dc>
   18724:	mov	r3, #4
   18728:	mov	r2, r3
   1872c:	mov	r1, #6
   18730:	ldr	r0, [r8]
   18734:	bl	26644 <flatcc_builder_table_add@@Base>
   18738:	cmp	r0, #0
   1873c:	bne	1867c <_start@@Base+0x5c78>
   18740:	b	1834c <_start@@Base+0x5948>
   18744:	add	r4, r6, #1
   18748:	sub	r3, r5, r4
   1874c:	cmp	r3, #1
   18750:	ble	18764 <_start@@Base+0x5d60>
   18754:	ldrb	r3, [r6, #1]
   18758:	cmp	r3, #32
   1875c:	bhi	18778 <_start@@Base+0x5d74>
   18760:	beq	18a94 <_start@@Base+0x6090>
   18764:	mov	r1, r4
   18768:	mov	r2, r5
   1876c:	mov	r0, r8
   18770:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   18774:	mov	r4, r0
   18778:	cmp	r5, r4
   1877c:	beq	18b24 <_start@@Base+0x6120>
   18780:	ldrb	r3, [r4]
   18784:	cmp	r3, #125	; 0x7d
   18788:	beq	18aa8 <_start@@Base+0x60a4>
   1878c:	mov	r3, #1
   18790:	str	r3, [sp, #56]	; 0x38
   18794:	b	18108 <_start@@Base+0x5704>
   18798:	cmp	ip, #4
   1879c:	ble	183cc <_start@@Base+0x59c8>
   187a0:	mov	r1, r4
   187a4:	mov	r3, #4
   187a8:	mov	r2, r5
   187ac:	mov	r0, r8
   187b0:	bl	17fac <_start@@Base+0x55a8>
   187b4:	cmp	r0, r4
   187b8:	mov	r1, r0
   187bc:	beq	183cc <_start@@Base+0x59c8>
   187c0:	add	r3, sp, #60	; 0x3c
   187c4:	mov	r2, r5
   187c8:	mov	r0, r8
   187cc:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   187d0:	ldr	r3, [sp, #60]	; 0x3c
   187d4:	cmp	r3, #0
   187d8:	mov	r6, r0
   187dc:	beq	1834c <_start@@Base+0x5948>
   187e0:	mov	r1, sl
   187e4:	ldr	r0, [r8]
   187e8:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   187ec:	cmp	r0, #0
   187f0:	bne	18a74 <_start@@Base+0x6070>
   187f4:	b	1834c <_start@@Base+0x5948>
   187f8:	cmp	ip, #4
   187fc:	ble	183cc <_start@@Base+0x59c8>
   18800:	mov	r1, r4
   18804:	mov	r3, #4
   18808:	mov	r2, r5
   1880c:	mov	r0, r8
   18810:	bl	17fac <_start@@Base+0x55a8>
   18814:	cmp	r0, r4
   18818:	mov	r1, r0
   1881c:	beq	183cc <_start@@Base+0x59c8>
   18820:	add	r3, sp, #60	; 0x3c
   18824:	mov	r2, r5
   18828:	mov	r0, r8
   1882c:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   18830:	ldr	r3, [sp, #60]	; 0x3c
   18834:	cmp	r3, #0
   18838:	mov	r6, r0
   1883c:	beq	1834c <_start@@Base+0x5948>
   18840:	mov	r1, #4
   18844:	ldr	r0, [r8]
   18848:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1884c:	cmp	r0, #0
   18850:	bne	18a74 <_start@@Base+0x6070>
   18854:	b	1834c <_start@@Base+0x5948>
   18858:	cmp	ip, #8
   1885c:	ble	183cc <_start@@Base+0x59c8>
   18860:	mov	r3, #8
   18864:	mov	r2, r5
   18868:	mov	r1, r4
   1886c:	mov	r0, r8
   18870:	bl	17fac <_start@@Base+0x55a8>
   18874:	cmp	r0, r4
   18878:	mov	r7, r0
   1887c:	beq	183cc <_start@@Base+0x59c8>
   18880:	mov	r0, #0
   18884:	mov	r1, #0
   18888:	add	r4, sp, #72	; 0x48
   1888c:	mov	r2, r5
   18890:	strd	r0, [r4, #-8]!
   18894:	mov	r1, r7
   18898:	mov	r3, r4
   1889c:	mov	r0, r8
   188a0:	bl	132ec <_start@@Base+0x8e8>
   188a4:	cmp	r0, r7
   188a8:	mov	r6, r0
   188ac:	beq	18b4c <_start@@Base+0x6148>
   188b0:	ldrd	r2, [sp, #64]	; 0x40
   188b4:	orrs	r3, r2, r3
   188b8:	bne	188c8 <_start@@Base+0x5ec4>
   188bc:	ldr	r3, [r8, #8]
   188c0:	tst	r3, #2
   188c4:	beq	183e0 <_start@@Base+0x59dc>
   188c8:	mov	r3, #8
   188cc:	mov	r2, r3
   188d0:	mov	r1, #3
   188d4:	ldr	r0, [r8]
   188d8:	bl	26644 <flatcc_builder_table_add@@Base>
   188dc:	cmp	r0, #0
   188e0:	bne	1898c <_start@@Base+0x5f88>
   188e4:	b	1834c <_start@@Base+0x5948>
   188e8:	mov	r1, r4
   188ec:	mov	r3, #5
   188f0:	mov	r2, r5
   188f4:	mov	r0, r8
   188f8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   188fc:	mov	r4, r0
   18900:	sub	ip, r5, r0
   18904:	b	18130 <_start@@Base+0x572c>
   18908:	mov	r3, #8
   1890c:	mov	r2, r5
   18910:	mov	r1, r4
   18914:	mov	r0, r8
   18918:	bl	17fac <_start@@Base+0x55a8>
   1891c:	cmp	r0, r4
   18920:	mov	r7, r0
   18924:	beq	1829c <_start@@Base+0x5898>
   18928:	mov	r0, #0
   1892c:	mov	r1, #0
   18930:	add	r4, sp, #72	; 0x48
   18934:	mov	r2, r5
   18938:	strd	r0, [r4, #-8]!
   1893c:	mov	r1, r7
   18940:	mov	r3, r4
   18944:	mov	r0, r8
   18948:	bl	132ec <_start@@Base+0x8e8>
   1894c:	cmp	r0, r7
   18950:	mov	r6, r0
   18954:	beq	18acc <_start@@Base+0x60c8>
   18958:	ldrd	r2, [sp, #64]	; 0x40
   1895c:	orrs	r3, r2, r3
   18960:	bne	18970 <_start@@Base+0x5f6c>
   18964:	ldr	r3, [r8, #8]
   18968:	tst	r3, #2
   1896c:	beq	183e0 <_start@@Base+0x59dc>
   18970:	mov	r3, #8
   18974:	mov	r2, r3
   18978:	mov	r1, #7
   1897c:	ldr	r0, [r8]
   18980:	bl	26644 <flatcc_builder_table_add@@Base>
   18984:	cmp	r0, #0
   18988:	beq	1834c <_start@@Base+0x5948>
   1898c:	ldrd	r2, [sp, #64]	; 0x40
   18990:	strd	r2, [r0]
   18994:	b	183e0 <_start@@Base+0x59dc>
   18998:	mov	r3, #8
   1899c:	mov	r2, r5
   189a0:	mov	r1, r4
   189a4:	mov	r0, r8
   189a8:	bl	17fac <_start@@Base+0x55a8>
   189ac:	cmp	r0, r4
   189b0:	mov	r7, r0
   189b4:	beq	18690 <_start@@Base+0x5c8c>
   189b8:	mov	r0, #0
   189bc:	mov	r1, #0
   189c0:	add	r4, sp, #72	; 0x48
   189c4:	mov	r2, r5
   189c8:	strd	r0, [r4, #-8]!
   189cc:	mov	r1, r7
   189d0:	mov	r3, r4
   189d4:	mov	r0, r8
   189d8:	bl	132ec <_start@@Base+0x8e8>
   189dc:	cmp	r0, r7
   189e0:	mov	r6, r0
   189e4:	beq	18af8 <_start@@Base+0x60f4>
   189e8:	ldrd	r2, [sp, #64]	; 0x40
   189ec:	orrs	r3, r2, r3
   189f0:	bne	18a00 <_start@@Base+0x5ffc>
   189f4:	ldr	r3, [r8, #8]
   189f8:	tst	r3, #2
   189fc:	beq	183e0 <_start@@Base+0x59dc>
   18a00:	mov	r3, #8
   18a04:	mov	r2, r3
   18a08:	mov	r1, #5
   18a0c:	ldr	r0, [r8]
   18a10:	bl	26644 <flatcc_builder_table_add@@Base>
   18a14:	cmp	r0, #0
   18a18:	bne	1898c <_start@@Base+0x5f88>
   18a1c:	b	1834c <_start@@Base+0x5948>
   18a20:	mov	r1, r4
   18a24:	mov	r3, #4
   18a28:	mov	r2, r5
   18a2c:	mov	r0, r8
   18a30:	bl	17fac <_start@@Base+0x55a8>
   18a34:	cmp	r0, r4
   18a38:	mov	r1, r0
   18a3c:	beq	183cc <_start@@Base+0x59c8>
   18a40:	add	r3, sp, #60	; 0x3c
   18a44:	mov	r2, r5
   18a48:	mov	r0, r8
   18a4c:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   18a50:	ldr	r3, [sp, #60]	; 0x3c
   18a54:	cmp	r3, #0
   18a58:	mov	r6, r0
   18a5c:	beq	1834c <_start@@Base+0x5948>
   18a60:	mov	r1, #2
   18a64:	ldr	r0, [r8]
   18a68:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   18a6c:	cmp	r0, #0
   18a70:	beq	1834c <_start@@Base+0x5948>
   18a74:	ldr	r3, [sp, #60]	; 0x3c
   18a78:	str	r3, [r0]
   18a7c:	b	183e0 <_start@@Base+0x59dc>
   18a80:	ldrb	r3, [r6, #2]
   18a84:	cmp	r3, #32
   18a88:	bls	184fc <_start@@Base+0x5af8>
   18a8c:	add	r4, r6, #2
   18a90:	b	18550 <_start@@Base+0x5b4c>
   18a94:	ldrb	r3, [r6, #2]
   18a98:	cmp	r3, #32
   18a9c:	addhi	r4, r6, #2
   18aa0:	bls	18764 <_start@@Base+0x5d60>
   18aa4:	b	18778 <_start@@Base+0x5d74>
   18aa8:	mov	r3, #0
   18aac:	add	r1, r4, #1
   18ab0:	mov	r2, r5
   18ab4:	mov	r0, r8
   18ab8:	str	r3, [sp, #56]	; 0x38
   18abc:	bl	12fac <_start@@Base+0x5a8>
   18ac0:	ldr	r3, [sp, #56]	; 0x38
   18ac4:	mov	r4, r0
   18ac8:	b	18100 <_start@@Base+0x56fc>
   18acc:	mov	r1, r0
   18ad0:	str	r4, [sp]
   18ad4:	ldr	r3, [pc, #-1316]	; 185b8 <_start@@Base+0x5bb4>
   18ad8:	mov	r2, r5
   18adc:	mov	r0, r8
   18ae0:	bl	1483c <_start@@Base+0x1e38>
   18ae4:	cmp	r5, r0
   18ae8:	cmpne	r6, r0
   18aec:	mov	r6, r0
   18af0:	bne	18958 <_start@@Base+0x5f54>
   18af4:	b	1834c <_start@@Base+0x5948>
   18af8:	mov	r1, r0
   18afc:	str	r4, [sp]
   18b00:	ldr	r3, [pc, #-1356]	; 185bc <_start@@Base+0x5bb8>
   18b04:	mov	r2, r5
   18b08:	mov	r0, r8
   18b0c:	bl	1483c <_start@@Base+0x1e38>
   18b10:	cmp	r5, r0
   18b14:	cmpne	r6, r0
   18b18:	mov	r6, r0
   18b1c:	bne	189e8 <_start@@Base+0x5fe4>
   18b20:	b	1834c <_start@@Base+0x5948>
   18b24:	mov	ip, #0
   18b28:	mov	r3, #10
   18b2c:	mov	r2, r5
   18b30:	mov	r1, r5
   18b34:	mov	r0, r8
   18b38:	str	ip, [sp, #56]	; 0x38
   18b3c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   18b40:	ldr	r3, [sp, #56]	; 0x38
   18b44:	mov	r4, r0
   18b48:	b	18100 <_start@@Base+0x56fc>
   18b4c:	mov	r1, r0
   18b50:	str	r4, [sp]
   18b54:	ldr	r3, [pc, #-1436]	; 185c0 <_start@@Base+0x5bbc>
   18b58:	mov	r2, r5
   18b5c:	mov	r0, r8
   18b60:	bl	1483c <_start@@Base+0x1e38>
   18b64:	cmp	r5, r0
   18b68:	cmpne	r6, r0
   18b6c:	mov	r6, r0
   18b70:	bne	188b0 <_start@@Base+0x5eac>
   18b74:	b	1834c <_start@@Base+0x5948>
   18b78:	mov	r1, r0
   18b7c:	str	r4, [sp]
   18b80:	ldr	r3, [pc, #-1476]	; 185c4 <_start@@Base+0x5bc0>
   18b84:	mov	r2, r5
   18b88:	mov	r0, r8
   18b8c:	bl	14618 <_start@@Base+0x1c14>
   18b90:	cmp	r5, r0
   18b94:	cmpne	r6, r0
   18b98:	mov	r6, r0
   18b9c:	bne	18648 <_start@@Base+0x5c44>
   18ba0:	b	1834c <_start@@Base+0x5948>
   18ba4:	mov	r1, r0
   18ba8:	str	r4, [sp]
   18bac:	ldr	r3, [pc, #-1516]	; 185c8 <_start@@Base+0x5bc4>
   18bb0:	mov	r2, r5
   18bb4:	mov	r0, r8
   18bb8:	bl	14618 <_start@@Base+0x1c14>
   18bbc:	cmp	r5, r0
   18bc0:	cmpne	r6, r0
   18bc4:	mov	r6, r0
   18bc8:	bne	1870c <_start@@Base+0x5d08>
   18bcc:	b	1834c <_start@@Base+0x5948>
   18bd0:	mov	r1, r0
   18bd4:	str	r4, [sp]
   18bd8:	ldr	r3, [pc, #-1556]	; 185cc <_start@@Base+0x5bc8>
   18bdc:	mov	r2, r5
   18be0:	mov	r0, r8
   18be4:	bl	14618 <_start@@Base+0x1c14>
   18be8:	cmp	r5, r0
   18bec:	cmpne	r6, r0
   18bf0:	mov	r6, r0
   18bf4:	bne	18318 <_start@@Base+0x5914>
   18bf8:	b	1834c <_start@@Base+0x5948>
   18bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c00:	sub	sp, sp, #244	; 0xf4
   18c04:	mov	ip, #0
   18c08:	ldr	lr, [sp, #280]	; 0x118
   18c0c:	cmp	r3, #9
   18c10:	mov	r5, r0
   18c14:	str	ip, [lr]
   18c18:	mov	r4, r2
   18c1c:	beq	18cc8 <_start@@Base+0x62c4>
   18c20:	mov	r6, r1
   18c24:	bls	18c6c <_start@@Base+0x6268>
   18c28:	cmp	r3, #11
   18c2c:	beq	18d10 <_start@@Base+0x630c>
   18c30:	bcc	18cc8 <_start@@Base+0x62c4>
   18c34:	cmp	r3, #255	; 0xff
   18c38:	beq	18d10 <_start@@Base+0x630c>
   18c3c:	ldr	r3, [r5, #8]
   18c40:	mov	r2, r4
   18c44:	tst	r3, #1
   18c48:	mov	r1, r6
   18c4c:	mov	r0, r5
   18c50:	bne	19800 <_start@@Base+0x6dfc>
   18c54:	mov	r3, #15
   18c58:	bl	295ac <flatcc_json_parser_set_error@@Base>
   18c5c:	mov	r1, r0
   18c60:	mov	r0, r1
   18c64:	add	sp, sp, #244	; 0xf4
   18c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c6c:	cmp	r3, #2
   18c70:	beq	1921c <_start@@Base+0x6818>
   18c74:	cmp	r3, #8
   18c78:	beq	18d20 <_start@@Base+0x631c>
   18c7c:	cmp	r3, ip
   18c80:	bne	18c3c <_start@@Base+0x6238>
   18c84:	sub	r3, r2, r1
   18c88:	cmp	r3, #3
   18c8c:	ble	18cac <_start@@Base+0x62a8>
   18c90:	ldr	r1, [pc, #1400]	; 19210 <_start@@Base+0x680c>
   18c94:	mov	r2, #4
   18c98:	mov	r0, r6
   18c9c:	bl	125c4 <memcmp@plt>
   18ca0:	cmp	r0, #0
   18ca4:	addeq	r1, r6, #4
   18ca8:	beq	18c60 <_start@@Base+0x625c>
   18cac:	mov	r1, r6
   18cb0:	mov	r2, r4
   18cb4:	mov	r0, r5
   18cb8:	mov	r3, #26
   18cbc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   18cc0:	mov	r1, r0
   18cc4:	b	18c60 <_start@@Base+0x625c>
   18cc8:	mov	r3, lr
   18ccc:	bl	1615c <_start@@Base+0x3758>
   18cd0:	mov	r1, r0
   18cd4:	ldr	r3, [r5, #24]
   18cd8:	cmp	r3, #0
   18cdc:	bne	18c60 <_start@@Base+0x625c>
   18ce0:	ldr	r3, [sp, #280]	; 0x118
   18ce4:	ldr	r3, [r3]
   18ce8:	cmp	r3, #0
   18cec:	bne	18c60 <_start@@Base+0x625c>
   18cf0:	mov	r2, r4
   18cf4:	mov	r0, r5
   18cf8:	mov	r3, #33	; 0x21
   18cfc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   18d00:	mov	r1, r0
   18d04:	mov	r0, r1
   18d08:	add	sp, sp, #244	; 0xf4
   18d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d10:	mov	r3, lr
   18d14:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   18d18:	mov	r1, r0
   18d1c:	b	18cd4 <_start@@Base+0x62d0>
   18d20:	mov	r2, #2
   18d24:	mov	r1, r2
   18d28:	ldr	r0, [r0]
   18d2c:	bl	22e34 <flatcc_builder_start_struct@@Base>
   18d30:	mov	r1, r6
   18d34:	subs	r3, r0, #0
   18d38:	str	r3, [sp, #24]
   18d3c:	beq	19130 <_start@@Base+0x672c>
   18d40:	add	r3, sp, #224	; 0xe0
   18d44:	mov	r2, r4
   18d48:	mov	r0, r5
   18d4c:	bl	133b4 <_start@@Base+0x9b0>
   18d50:	ldr	r3, [sp, #224]	; 0xe0
   18d54:	cmp	r3, #0
   18d58:	mov	r1, r0
   18d5c:	beq	196e4 <_start@@Base+0x6ce0>
   18d60:	mov	r7, #0
   18d64:	mov	r6, r5
   18d68:	b	18ea8 <_start@@Base+0x64a4>
   18d6c:	add	r5, r0, #8
   18d70:	sub	ip, r4, r5
   18d74:	cmp	ip, #8
   18d78:	bls	19094 <_start@@Base+0x6690>
   18d7c:	ldrb	r2, [r0, #14]
   18d80:	mov	r9, #0
   18d84:	lsr	r1, r2, #24
   18d88:	lsl	r3, r2, #8
   18d8c:	str	r1, [sp, #204]	; 0xcc
   18d90:	str	r3, [sp, #200]	; 0xc8
   18d94:	ldrd	r2, [sp, #200]	; 0xc8
   18d98:	orr	r3, r3, r9
   18d9c:	mov	r9, r3
   18da0:	ldrb	r2, [r0, #13]
   18da4:	lsr	r1, r2, #16
   18da8:	lsl	r3, r2, #16
   18dac:	str	r1, [sp, #188]	; 0xbc
   18db0:	str	r3, [sp, #184]	; 0xb8
   18db4:	ldrd	r2, [sp, #184]	; 0xb8
   18db8:	orr	r3, r3, r9
   18dbc:	mov	r9, r3
   18dc0:	ldrb	r2, [r0, #12]
   18dc4:	lsr	r1, r2, #8
   18dc8:	lsl	r3, r2, #24
   18dcc:	str	r1, [sp, #140]	; 0x8c
   18dd0:	str	r3, [sp, #136]	; 0x88
   18dd4:	ldrd	r2, [sp, #136]	; 0x88
   18dd8:	orr	r3, r3, r9
   18ddc:	mov	r9, r3
   18de0:	ldrb	r3, [r0, #11]
   18de4:	str	r3, [sp, #156]	; 0x9c
   18de8:	mov	r3, #0
   18dec:	str	r3, [sp, #152]	; 0x98
   18df0:	ldrd	r2, [sp, #152]	; 0x98
   18df4:	orr	r3, r3, r9
   18df8:	mov	r9, r3
   18dfc:	ldrb	r2, [r0, #10]
   18e00:	lsl	r3, r2, #8
   18e04:	str	r3, [sp, #116]	; 0x74
   18e08:	mov	r3, #0
   18e0c:	str	r3, [sp, #112]	; 0x70
   18e10:	ldrd	r2, [sp, #112]	; 0x70
   18e14:	orr	r3, r3, r9
   18e18:	ldrb	r8, [r0, #9]
   18e1c:	lsl	r1, r8, #16
   18e20:	str	r1, [sp, #100]	; 0x64
   18e24:	mov	r1, #0
   18e28:	str	r1, [sp, #96]	; 0x60
   18e2c:	ldrd	r8, [sp, #96]	; 0x60
   18e30:	orr	r9, r9, r3
   18e34:	mov	r3, r9
   18e38:	ldrb	r0, [r0, #8]
   18e3c:	mov	r2, #0
   18e40:	lsl	r1, r0, #24
   18e44:	str	r1, [sp, #60]	; 0x3c
   18e48:	mov	r1, #0
   18e4c:	str	r1, [sp, #56]	; 0x38
   18e50:	ldrd	r8, [sp, #56]	; 0x38
   18e54:	add	r1, pc, #932	; 0x3a4
   18e58:	ldrd	r0, [r1]
   18e5c:	orr	r9, r9, r3
   18e60:	bic	r3, r9, #255	; 0xff
   18e64:	cmp	r3, r1
   18e68:	cmpeq	r2, r0
   18e6c:	bne	18e78 <_start@@Base+0x6474>
   18e70:	cmp	ip, #3
   18e74:	bgt	19148 <_start@@Base+0x6744>
   18e78:	mov	r1, r5
   18e7c:	mov	r2, r4
   18e80:	mov	r0, r6
   18e84:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   18e88:	mov	r1, r0
   18e8c:	add	r3, sp, #224	; 0xe0
   18e90:	mov	r2, r4
   18e94:	mov	r0, r6
   18e98:	bl	14c68 <_start@@Base+0x2264>
   18e9c:	ldr	r3, [sp, #224]	; 0xe0
   18ea0:	cmp	r3, #0
   18ea4:	beq	19710 <_start@@Base+0x6d0c>
   18ea8:	cmp	r4, r0
   18eac:	beq	18ff8 <_start@@Base+0x65f4>
   18eb0:	ldrb	r3, [r0]
   18eb4:	cmp	r3, #34	; 0x22
   18eb8:	moveq	r3, #0
   18ebc:	addeq	r0, r0, #1
   18ec0:	streq	r3, [r6, #12]
   18ec4:	beq	18ed8 <_start@@Base+0x64d4>
   18ec8:	cmp	r3, #46	; 0x2e
   18ecc:	movne	r3, #1
   18ed0:	strne	r3, [r6, #12]
   18ed4:	beq	191e8 <_start@@Base+0x67e4>
   18ed8:	sub	r3, r4, r0
   18edc:	cmp	r3, #8
   18ee0:	bls	19010 <_start@@Base+0x660c>
   18ee4:	ldrb	r8, [r0, #7]
   18ee8:	mov	r9, #0
   18eec:	ldrb	r2, [r0, #6]
   18ef0:	lsr	r1, r2, #24
   18ef4:	lsl	r3, r2, #8
   18ef8:	str	r1, [sp, #132]	; 0x84
   18efc:	str	r3, [sp, #128]	; 0x80
   18f00:	ldrd	r2, [sp, #128]	; 0x80
   18f04:	orr	r2, r2, r8
   18f08:	orr	r3, r3, r9
   18f0c:	ldrb	r8, [r0, #5]
   18f10:	lsr	r1, r8, #16
   18f14:	str	r1, [sp, #84]	; 0x54
   18f18:	lsl	r1, r8, #16
   18f1c:	str	r1, [sp, #80]	; 0x50
   18f20:	ldrd	r8, [sp, #80]	; 0x50
   18f24:	orr	r8, r8, r2
   18f28:	orr	r9, r9, r3
   18f2c:	mov	r2, r8
   18f30:	mov	r3, r9
   18f34:	ldrb	r8, [r0, #4]
   18f38:	lsr	r1, r8, #8
   18f3c:	str	r1, [sp, #36]	; 0x24
   18f40:	lsl	r1, r8, #24
   18f44:	str	r1, [sp, #32]
   18f48:	ldrd	r8, [sp, #32]
   18f4c:	orr	r8, r8, r2
   18f50:	orr	r9, r9, r3
   18f54:	mov	r2, r8
   18f58:	mov	r3, r9
   18f5c:	ldrb	r1, [r0, #3]
   18f60:	str	r1, [sp, #52]	; 0x34
   18f64:	mov	r1, #0
   18f68:	str	r1, [sp, #48]	; 0x30
   18f6c:	ldrd	r8, [sp, #48]	; 0x30
   18f70:	orr	r8, r8, r2
   18f74:	orr	r9, r9, r3
   18f78:	mov	r2, r8
   18f7c:	mov	r3, r9
   18f80:	ldrb	r8, [r0, #2]
   18f84:	lsl	r1, r8, #8
   18f88:	str	r1, [sp, #20]
   18f8c:	mov	r1, #0
   18f90:	str	r1, [sp, #16]
   18f94:	ldrd	r8, [sp, #16]
   18f98:	orr	r8, r8, r2
   18f9c:	orr	r9, r9, r3
   18fa0:	mov	r2, r8
   18fa4:	mov	r3, r9
   18fa8:	ldrb	r8, [r0, #1]
   18fac:	lsl	r1, r8, #16
   18fb0:	str	r1, [sp, #12]
   18fb4:	mov	r1, #0
   18fb8:	str	r1, [sp, #8]
   18fbc:	ldrd	r8, [sp, #8]
   18fc0:	orr	r8, r8, r2
   18fc4:	orr	r9, r9, r3
   18fc8:	mov	r2, r8
   18fcc:	mov	r3, r9
   18fd0:	ldrb	r8, [r0]
   18fd4:	mov	sl, #0
   18fd8:	orr	r2, r2, sl
   18fdc:	lsl	fp, r8, #24
   18fe0:	add	r9, pc, #544	; 0x220
   18fe4:	ldrd	r8, [r9]
   18fe8:	orr	r3, r3, fp
   18fec:	cmp	r3, r9
   18ff0:	cmpeq	r2, r8
   18ff4:	beq	18d6c <_start@@Base+0x6368>
   18ff8:	mov	r1, r0
   18ffc:	mov	r2, r4
   19000:	mov	r0, r6
   19004:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19008:	mov	r1, r0
   1900c:	b	18e8c <_start@@Base+0x6488>
   19010:	sub	r3, r3, #1
   19014:	cmp	r3, #7
   19018:	ldrls	pc, [pc, r3, lsl #2]
   1901c:	b	18ff8 <_start@@Base+0x65f4>
   19020:	andeq	r9, r1, r8, lsl #1
   19024:	andeq	r9, r1, ip, ror r0
   19028:	andeq	r9, r1, r0, ror r0
   1902c:	andeq	r9, r1, r4, rrx
   19030:	andeq	r9, r1, r8, asr r0
   19034:	andeq	r9, r1, ip, asr #32
   19038:	andeq	r9, r1, r0, asr #32
   1903c:	andeq	r8, r1, r4, ror #29
   19040:	mov	r8, r7
   19044:	mov	r9, #0
   19048:	b	18eec <_start@@Base+0x64e8>
   1904c:	mov	r2, r7
   19050:	mov	r3, #0
   19054:	b	18f0c <_start@@Base+0x6508>
   19058:	mov	r2, r7
   1905c:	mov	r3, #0
   19060:	b	18f34 <_start@@Base+0x6530>
   19064:	mov	r2, r7
   19068:	mov	r3, #0
   1906c:	b	18f5c <_start@@Base+0x6558>
   19070:	mov	r2, r7
   19074:	mov	r3, #0
   19078:	b	18f80 <_start@@Base+0x657c>
   1907c:	mov	r2, r7
   19080:	mov	r3, #0
   19084:	b	18fa8 <_start@@Base+0x65a4>
   19088:	mov	r2, r7
   1908c:	mov	r3, #0
   19090:	b	18fd0 <_start@@Base+0x65cc>
   19094:	sub	r3, ip, #1
   19098:	cmp	r3, #7
   1909c:	ldrls	pc, [pc, r3, lsl #2]
   190a0:	b	18e78 <_start@@Base+0x6474>
   190a4:	andeq	r9, r1, ip, ror #1
   190a8:	andeq	r9, r1, r4, ror #1
   190ac:	ldrdeq	r9, [r1], -ip
   190b0:	ldrdeq	r9, [r1], -r4
   190b4:	andeq	r9, r1, ip, asr #1
   190b8:	andeq	r9, r1, r4, asr #1
   190bc:	andeq	r8, r1, ip, ror sp
   190c0:	andeq	r8, r1, ip, ror sp
   190c4:	mov	r9, #0
   190c8:	b	18da0 <_start@@Base+0x639c>
   190cc:	mov	r9, #0
   190d0:	b	18dc0 <_start@@Base+0x63bc>
   190d4:	mov	r9, #0
   190d8:	b	18de0 <_start@@Base+0x63dc>
   190dc:	mov	r9, #0
   190e0:	b	18dfc <_start@@Base+0x63f8>
   190e4:	mov	r3, #0
   190e8:	b	18e18 <_start@@Base+0x6414>
   190ec:	mov	r3, #0
   190f0:	b	18e38 <_start@@Base+0x6434>
   190f4:	mov	r4, r0
   190f8:	add	r3, sp, #224	; 0xe0
   190fc:	str	r3, [sp]
   19100:	mov	r2, fp
   19104:	ldr	r3, [pc, #264]	; 19214 <_start@@Base+0x6810>
   19108:	mov	r1, r4
   1910c:	mov	r0, r9
   19110:	bl	13d6c <_start@@Base+0x1368>
   19114:	cmp	fp, r0
   19118:	cmpne	r0, r4
   1911c:	mov	r6, r0
   19120:	bne	198bc <_start@@Base+0x6eb8>
   19124:	mov	r5, r9
   19128:	mov	r4, fp
   1912c:	mov	r1, r6
   19130:	mov	r3, #33	; 0x21
   19134:	mov	r2, r4
   19138:	mov	r0, r5
   1913c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   19140:	mov	r1, r0
   19144:	b	18cd4 <_start@@Base+0x62d0>
   19148:	mov	r3, #3
   1914c:	mov	r2, r4
   19150:	mov	r1, r5
   19154:	mov	r0, r6
   19158:	bl	17fac <_start@@Base+0x55a8>
   1915c:	cmp	r5, r0
   19160:	str	r0, [sp, #40]	; 0x28
   19164:	beq	18e78 <_start@@Base+0x6474>
   19168:	ldrd	r2, [sp, #56]	; 0x38
   1916c:	mov	r1, #0
   19170:	cmp	r4, r0
   19174:	mov	r5, r0
   19178:	strh	r2, [sp, #220]	; 0xdc
   1917c:	str	r7, [sp, #232]	; 0xe8
   19180:	str	r1, [sp, #236]	; 0xec
   19184:	str	r2, [sp, #228]	; 0xe4
   19188:	beq	1969c <_start@@Base+0x6c98>
   1918c:	add	r3, sp, #232	; 0xe8
   19190:	mov	r1, r0
   19194:	str	r3, [sp]
   19198:	mov	r2, r4
   1919c:	add	r3, sp, #228	; 0xe4
   191a0:	mov	r0, r6
   191a4:	bl	2c350 <flatcc_json_parser_integer@@Base>
   191a8:	cmp	r5, r0
   191ac:	mov	r1, r0
   191b0:	beq	1969c <_start@@Base+0x6c98>
   191b4:	ldr	r3, [sp, #228]	; 0xe4
   191b8:	cmp	r3, #0
   191bc:	bne	19874 <_start@@Base+0x6e70>
   191c0:	ldrd	r2, [sp, #232]	; 0xe8
   191c4:	ldr	r8, [pc, #76]	; 19218 <_start@@Base+0x6814>
   191c8:	mov	r9, #0
   191cc:	cmp	r3, r9
   191d0:	cmpeq	r2, r8
   191d4:	uxthls	r2, r2
   191d8:	bhi	198c4 <_start@@Base+0x6ec0>
   191dc:	ldr	r3, [sp, #24]
   191e0:	strh	r2, [r3]
   191e4:	b	18e8c <_start@@Base+0x6488>
   191e8:	mov	r1, r0
   191ec:	mov	r3, #5
   191f0:	mov	r2, r4
   191f4:	mov	r0, r6
   191f8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   191fc:	b	18ed8 <_start@@Base+0x64d4>
   19200:	andeq	r0, r0, r0
   19204:	ldrbvs	r6, [r4, -r0, lsl #16]!
   19208:	svcpl	0x006c656e
   1920c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   19210:	andeq	lr, r2, r0, lsr r9
   19214:	andeq	r1, r4, r4, ror #1
   19218:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1921c:	mov	r1, #1
   19220:	ldr	r0, [r0]
   19224:	bl	244d8 <flatcc_builder_start_table@@Base>
   19228:	cmp	r0, #0
   1922c:	bne	1912c <_start@@Base+0x6728>
   19230:	mov	r1, r6
   19234:	add	r3, sp, #220	; 0xdc
   19238:	mov	r2, r4
   1923c:	mov	r0, r5
   19240:	bl	133b4 <_start@@Base+0x9b0>
   19244:	ldr	r3, [sp, #220]	; 0xdc
   19248:	cmp	r3, #0
   1924c:	mov	r6, r0
   19250:	beq	19814 <_start@@Base+0x6e10>
   19254:	mov	sl, #0
   19258:	strd	r8, [sp, #8]
   1925c:	mov	r7, sl
   19260:	mov	fp, r4
   19264:	mov	r9, r5
   19268:	b	1953c <_start@@Base+0x6b38>
   1926c:	ldrb	r0, [r6, #7]
   19270:	mov	r1, #0
   19274:	ldrb	r2, [r6, #6]
   19278:	lsr	ip, r2, #24
   1927c:	lsl	r3, r2, #8
   19280:	str	ip, [sp, #164]	; 0xa4
   19284:	str	r3, [sp, #160]	; 0xa0
   19288:	ldrd	r2, [sp, #160]	; 0xa0
   1928c:	orr	r2, r2, r0
   19290:	orr	r3, r3, r1
   19294:	ldrb	r0, [r6, #5]
   19298:	lsr	ip, r0, #16
   1929c:	lsl	r1, r0, #16
   192a0:	str	ip, [sp, #108]	; 0x6c
   192a4:	str	r1, [sp, #104]	; 0x68
   192a8:	ldrd	r0, [sp, #104]	; 0x68
   192ac:	orr	r0, r0, r2
   192b0:	orr	r1, r1, r3
   192b4:	mov	r2, r0
   192b8:	mov	r3, r1
   192bc:	ldrb	r0, [r6, #4]
   192c0:	lsr	ip, r0, #8
   192c4:	lsl	r1, r0, #24
   192c8:	str	ip, [sp, #68]	; 0x44
   192cc:	str	r1, [sp, #64]	; 0x40
   192d0:	ldrd	r0, [sp, #64]	; 0x40
   192d4:	orr	r0, r0, r2
   192d8:	orr	r1, r1, r3
   192dc:	mov	r2, r0
   192e0:	mov	r3, r1
   192e4:	ldrb	r1, [r6, #3]
   192e8:	str	r1, [sp, #76]	; 0x4c
   192ec:	mov	r1, #0
   192f0:	str	r1, [sp, #72]	; 0x48
   192f4:	ldrd	r0, [sp, #72]	; 0x48
   192f8:	orr	r0, r0, r2
   192fc:	orr	r1, r1, r3
   19300:	mov	r2, r0
   19304:	mov	r3, r1
   19308:	ldrb	r0, [r6, #2]
   1930c:	lsl	r1, r0, #8
   19310:	str	r1, [sp, #44]	; 0x2c
   19314:	mov	r1, #0
   19318:	str	r1, [sp, #40]	; 0x28
   1931c:	ldrd	r0, [sp, #40]	; 0x28
   19320:	orr	r0, r0, r2
   19324:	orr	r1, r1, r3
   19328:	mov	r2, r0
   1932c:	mov	r3, r1
   19330:	ldrb	r0, [r6, #1]
   19334:	lsl	r1, r0, #16
   19338:	str	r1, [sp, #28]
   1933c:	mov	r1, #0
   19340:	str	r1, [sp, #24]
   19344:	ldrd	r0, [sp, #24]
   19348:	orr	r0, r0, r2
   1934c:	orr	r1, r1, r3
   19350:	mov	r2, r0
   19354:	mov	r3, r1
   19358:	ldrb	r0, [r6]
   1935c:	lsl	r1, r0, #24
   19360:	str	r1, [sp, #12]
   19364:	mov	r1, #0
   19368:	str	r1, [sp, #8]
   1936c:	ldrd	r0, [sp, #8]
   19370:	orr	r0, r0, r2
   19374:	orr	r1, r1, r3
   19378:	mov	r2, r0
   1937c:	mov	r3, r1
   19380:	add	r1, pc, #920	; 0x398
   19384:	ldrd	r0, [r1]
   19388:	cmp	r3, r1
   1938c:	cmpeq	r2, r0
   19390:	bne	19504 <_start@@Base+0x6b00>
   19394:	add	r1, r6, #8
   19398:	sub	r3, fp, r1
   1939c:	cmp	r3, #8
   193a0:	bls	195fc <_start@@Base+0x6bf8>
   193a4:	ldrb	r4, [r6, #15]
   193a8:	mov	r5, #0
   193ac:	ldrb	r2, [r6, #14]
   193b0:	lsr	r0, r2, #24
   193b4:	lsl	r3, r2, #8
   193b8:	str	r0, [sp, #212]	; 0xd4
   193bc:	str	r3, [sp, #208]	; 0xd0
   193c0:	ldrd	r2, [sp, #208]	; 0xd0
   193c4:	orr	r2, r2, r4
   193c8:	orr	r3, r3, r5
   193cc:	mov	r4, r2
   193d0:	mov	r5, r3
   193d4:	ldrb	r2, [r6, #13]
   193d8:	lsr	r0, r2, #16
   193dc:	lsl	r3, r2, #16
   193e0:	str	r0, [sp, #196]	; 0xc4
   193e4:	str	r3, [sp, #192]	; 0xc0
   193e8:	ldrd	r2, [sp, #192]	; 0xc0
   193ec:	orr	r2, r2, r4
   193f0:	orr	r3, r3, r5
   193f4:	mov	r4, r2
   193f8:	mov	r5, r3
   193fc:	ldrb	r2, [r6, #12]
   19400:	lsr	r0, r2, #8
   19404:	lsl	r3, r2, #24
   19408:	str	r0, [sp, #172]	; 0xac
   1940c:	str	r3, [sp, #168]	; 0xa8
   19410:	ldrd	r2, [sp, #168]	; 0xa8
   19414:	orr	r2, r2, r4
   19418:	orr	r3, r3, r5
   1941c:	ldrb	r0, [r6, #11]
   19420:	str	r0, [sp, #180]	; 0xb4
   19424:	mov	r0, #0
   19428:	str	r0, [sp, #176]	; 0xb0
   1942c:	ldrd	r4, [sp, #176]	; 0xb0
   19430:	orr	r4, r4, r2
   19434:	orr	r5, r5, r3
   19438:	mov	r2, r4
   1943c:	mov	r3, r5
   19440:	ldrb	r4, [r6, #10]
   19444:	lsl	r0, r4, #8
   19448:	str	r0, [sp, #148]	; 0x94
   1944c:	mov	r0, #0
   19450:	str	r0, [sp, #144]	; 0x90
   19454:	ldrd	r4, [sp, #144]	; 0x90
   19458:	orr	r4, r4, r2
   1945c:	orr	r5, r5, r3
   19460:	mov	r2, r4
   19464:	mov	r3, r5
   19468:	ldrb	r4, [r6, #9]
   1946c:	lsl	r0, r4, #16
   19470:	str	r0, [sp, #124]	; 0x7c
   19474:	mov	r0, #0
   19478:	str	r0, [sp, #120]	; 0x78
   1947c:	ldrd	r4, [sp, #120]	; 0x78
   19480:	orr	r4, r4, r2
   19484:	orr	r5, r5, r3
   19488:	mov	r2, r4
   1948c:	mov	r3, r5
   19490:	ldrb	r4, [r6, #8]
   19494:	lsl	r0, r4, #24
   19498:	str	r0, [sp, #92]	; 0x5c
   1949c:	mov	r0, #0
   194a0:	str	r0, [sp, #88]	; 0x58
   194a4:	ldrd	r4, [sp, #88]	; 0x58
   194a8:	orr	r4, r4, r2
   194ac:	orr	r5, r5, r3
   194b0:	mov	r2, r4
   194b4:	mov	r3, r5
   194b8:	add	r5, pc, #616	; 0x268
   194bc:	ldrd	r4, [r5]
   194c0:	cmp	r3, r5
   194c4:	cmpeq	r2, r4
   194c8:	bne	19508 <_start@@Base+0x6b04>
   194cc:	add	r6, r6, #16
   194d0:	mov	r0, r6
   194d4:	mov	r1, fp
   194d8:	bl	12b30 <_start@@Base+0x12c>
   194dc:	add	r3, pc, #588	; 0x24c
   194e0:	ldrd	r2, [r3]
   194e4:	mov	r0, #0
   194e8:	bic	r1, r1, #255	; 0xff
   194ec:	cmp	r1, r3
   194f0:	cmpeq	r0, r2
   194f4:	bne	19504 <_start@@Base+0x6b00>
   194f8:	sub	r3, fp, r6
   194fc:	cmp	r3, #3
   19500:	bgt	1973c <_start@@Base+0x6d38>
   19504:	mov	r1, r6
   19508:	mov	r2, fp
   1950c:	mov	r0, r9
   19510:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19514:	mov	r6, r0
   19518:	mov	r1, r6
   1951c:	add	r3, sp, #220	; 0xdc
   19520:	mov	r2, fp
   19524:	mov	r0, r9
   19528:	bl	14c68 <_start@@Base+0x2264>
   1952c:	ldr	r3, [sp, #220]	; 0xdc
   19530:	cmp	r3, #0
   19534:	mov	r6, r0
   19538:	beq	1980c <_start@@Base+0x6e08>
   1953c:	cmp	fp, r6
   19540:	beq	19504 <_start@@Base+0x6b00>
   19544:	ldrb	r3, [r6]
   19548:	cmp	r3, #34	; 0x22
   1954c:	moveq	r3, #0
   19550:	addeq	r6, r6, #1
   19554:	streq	r3, [r9, #12]
   19558:	beq	1956c <_start@@Base+0x6b68>
   1955c:	cmp	r3, #46	; 0x2e
   19560:	movne	r3, #1
   19564:	strne	r3, [r9, #12]
   19568:	beq	19680 <_start@@Base+0x6c7c>
   1956c:	sub	r3, fp, r6
   19570:	cmp	r3, #8
   19574:	bhi	1926c <_start@@Base+0x6868>
   19578:	sub	r3, r3, #1
   1957c:	cmp	r3, #7
   19580:	ldrls	pc, [pc, r3, lsl #2]
   19584:	b	19504 <_start@@Base+0x6b00>
   19588:	strdeq	r9, [r1], -r0
   1958c:	andeq	r9, r1, r4, ror #11
   19590:	ldrdeq	r9, [r1], -r8
   19594:	andeq	r9, r1, ip, asr #11
   19598:	andeq	r9, r1, r0, asr #11
   1959c:			; <UNDEFINED> instruction: 0x000195b4
   195a0:	andeq	r9, r1, r8, lsr #11
   195a4:	andeq	r9, r1, ip, ror #4
   195a8:	mov	r0, sl
   195ac:	mov	r1, r7
   195b0:	b	19274 <_start@@Base+0x6870>
   195b4:	mov	r2, sl
   195b8:	mov	r3, r7
   195bc:	b	19294 <_start@@Base+0x6890>
   195c0:	mov	r2, sl
   195c4:	mov	r3, r7
   195c8:	b	192bc <_start@@Base+0x68b8>
   195cc:	mov	r2, sl
   195d0:	mov	r3, r7
   195d4:	b	192e4 <_start@@Base+0x68e0>
   195d8:	mov	r2, sl
   195dc:	mov	r3, r7
   195e0:	b	19308 <_start@@Base+0x6904>
   195e4:	mov	r2, sl
   195e8:	mov	r3, r7
   195ec:	b	19330 <_start@@Base+0x692c>
   195f0:	mov	r2, sl
   195f4:	mov	r3, r7
   195f8:	b	19358 <_start@@Base+0x6954>
   195fc:	sub	r3, r3, #1
   19600:	cmp	r3, #7
   19604:	ldrls	pc, [pc, r3, lsl #2]
   19608:	b	19508 <_start@@Base+0x6b04>
   1960c:	andeq	r9, r1, r4, ror r6
   19610:	andeq	r9, r1, r8, ror #12
   19614:	andeq	r9, r1, ip, asr r6
   19618:	andeq	r9, r1, r0, asr r6
   1961c:	andeq	r9, r1, r4, asr #12
   19620:	andeq	r9, r1, r8, lsr r6
   19624:	andeq	r9, r1, ip, lsr #12
   19628:	andeq	r9, r1, r4, lsr #7
   1962c:	mov	r4, sl
   19630:	mov	r5, r7
   19634:	b	193ac <_start@@Base+0x69a8>
   19638:	mov	r4, sl
   1963c:	mov	r5, r7
   19640:	b	193d4 <_start@@Base+0x69d0>
   19644:	mov	r4, sl
   19648:	mov	r5, r7
   1964c:	b	193fc <_start@@Base+0x69f8>
   19650:	mov	r2, sl
   19654:	mov	r3, r7
   19658:	b	1941c <_start@@Base+0x6a18>
   1965c:	mov	r2, sl
   19660:	mov	r3, r7
   19664:	b	19440 <_start@@Base+0x6a3c>
   19668:	mov	r2, sl
   1966c:	mov	r3, r7
   19670:	b	19468 <_start@@Base+0x6a64>
   19674:	mov	r2, sl
   19678:	mov	r3, r7
   1967c:	b	19490 <_start@@Base+0x6a8c>
   19680:	mov	r1, r6
   19684:	mov	r3, #5
   19688:	mov	r2, fp
   1968c:	mov	r0, r9
   19690:	bl	295ac <flatcc_json_parser_set_error@@Base>
   19694:	mov	r6, r0
   19698:	b	1956c <_start@@Base+0x6b68>
   1969c:	ldr	r5, [sp, #40]	; 0x28
   196a0:	add	r3, sp, #220	; 0xdc
   196a4:	str	r3, [sp]
   196a8:	mov	r1, r5
   196ac:	ldr	r3, [pc, #132]	; 19738 <_start@@Base+0x6d34>
   196b0:	mov	r2, r4
   196b4:	mov	r0, r6
   196b8:	bl	13f9c <_start@@Base+0x1598>
   196bc:	cmp	r4, r0
   196c0:	cmpne	r0, r5
   196c4:	mov	r1, r0
   196c8:	bne	19894 <_start@@Base+0x6e90>
   196cc:	mov	r3, #33	; 0x21
   196d0:	mov	r2, r4
   196d4:	mov	r0, r6
   196d8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   196dc:	mov	r5, r6
   196e0:	mov	r1, r0
   196e4:	cmp	r4, r1
   196e8:	beq	19130 <_start@@Base+0x672c>
   196ec:	ldr	r0, [r5]
   196f0:	str	r1, [sp, #8]
   196f4:	bl	22ff0 <flatcc_builder_end_struct@@Base>
   196f8:	ldr	r3, [sp, #280]	; 0x118
   196fc:	ldr	r1, [sp, #8]
   19700:	cmp	r0, #0
   19704:	str	r0, [r3]
   19708:	beq	19130 <_start@@Base+0x672c>
   1970c:	b	18c60 <_start@@Base+0x625c>
   19710:	mov	r1, r0
   19714:	mov	r5, r6
   19718:	b	196e4 <_start@@Base+0x6ce0>
   1971c:	nop			; (mov r0, r0)
   19720:	ldrbvs	r6, [pc], #-372	; 19728 <_start@@Base+0x6d24>
   19724:	cmnvc	r7, #456	; 0x1c8
   19728:	svcpl	0x0064616d
   1972c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   19730:	andeq	r0, r0, r0
   19734:	cmnvs	r7, r0, lsl #10
   19738:	strdeq	r1, [r4], -r0
   1973c:	mov	r3, #3
   19740:	mov	r2, fp
   19744:	mov	r1, r6
   19748:	mov	r0, r9
   1974c:	bl	17fac <_start@@Base+0x55a8>
   19750:	cmp	r6, r0
   19754:	mov	r4, r0
   19758:	beq	19504 <_start@@Base+0x6b00>
   1975c:	ldrd	r2, [sp, #88]	; 0x58
   19760:	cmp	fp, r0
   19764:	str	sl, [sp, #232]	; 0xe8
   19768:	str	r2, [sp, #224]	; 0xe0
   1976c:	str	r7, [sp, #236]	; 0xec
   19770:	str	r2, [sp, #228]	; 0xe4
   19774:	beq	190f8 <_start@@Base+0x66f4>
   19778:	add	r3, sp, #232	; 0xe8
   1977c:	str	r3, [sp]
   19780:	mov	r1, r0
   19784:	add	r3, sp, #228	; 0xe4
   19788:	mov	r2, fp
   1978c:	mov	r0, r9
   19790:	bl	2c350 <flatcc_json_parser_integer@@Base>
   19794:	cmp	r4, r0
   19798:	mov	r6, r0
   1979c:	beq	190f4 <_start@@Base+0x66f0>
   197a0:	ldr	r3, [sp, #228]	; 0xe4
   197a4:	ldrd	r0, [sp, #232]	; 0xe8
   197a8:	cmp	r3, #0
   197ac:	beq	19840 <_start@@Base+0x6e3c>
   197b0:	cmp	r1, #0
   197b4:	cmpeq	r0, #-2147483648	; 0x80000000
   197b8:	rsbls	r0, r0, #0
   197bc:	strls	r0, [sp, #224]	; 0xe0
   197c0:	bhi	1989c <_start@@Base+0x6e98>
   197c4:	cmp	r0, #0
   197c8:	bne	197d8 <_start@@Base+0x6dd4>
   197cc:	ldr	r3, [r9, #8]
   197d0:	tst	r3, #2
   197d4:	beq	19518 <_start@@Base+0x6b14>
   197d8:	mov	r3, #4
   197dc:	mov	r2, r3
   197e0:	mov	r1, #0
   197e4:	ldr	r0, [r9]
   197e8:	bl	26644 <flatcc_builder_table_add@@Base>
   197ec:	cmp	r0, #0
   197f0:	beq	19124 <_start@@Base+0x6720>
   197f4:	ldr	r3, [sp, #224]	; 0xe0
   197f8:	str	r3, [r0]
   197fc:	b	19518 <_start@@Base+0x6b14>
   19800:	bl	2a4f8 <flatcc_json_parser_generic_json@@Base>
   19804:	mov	r1, r0
   19808:	b	18c60 <_start@@Base+0x625c>
   1980c:	mov	r5, r9
   19810:	mov	r4, fp
   19814:	ldr	r3, [r5, #24]
   19818:	cmp	r3, #0
   1981c:	bne	1912c <_start@@Base+0x6728>
   19820:	ldr	r0, [r5]
   19824:	bl	24f18 <flatcc_builder_end_table@@Base>
   19828:	ldr	r3, [sp, #280]	; 0x118
   1982c:	cmp	r0, #0
   19830:	str	r0, [r3]
   19834:	beq	1912c <_start@@Base+0x6728>
   19838:	mov	r1, r6
   1983c:	b	18cd4 <_start@@Base+0x62d0>
   19840:	mov	r3, #0
   19844:	cmp	r1, r3
   19848:	mvn	r2, #-2147483648	; 0x80000000
   1984c:	cmpeq	r0, r2
   19850:	strls	r0, [sp, #224]	; 0xe0
   19854:	bls	197c4 <_start@@Base+0x6dc0>
   19858:	mov	r1, r6
   1985c:	mov	r3, #7
   19860:	mov	r2, fp
   19864:	mov	r0, r9
   19868:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1986c:	mov	r6, r0
   19870:	b	198b4 <_start@@Base+0x6eb0>
   19874:	mov	r3, #8
   19878:	mov	r2, r4
   1987c:	mov	r0, r6
   19880:	bl	295ac <flatcc_json_parser_set_error@@Base>
   19884:	mov	r1, r0
   19888:	ldr	r3, [sp, #40]	; 0x28
   1988c:	cmp	r3, r1
   19890:	beq	1969c <_start@@Base+0x6c98>
   19894:	ldrh	r2, [sp, #220]	; 0xdc
   19898:	b	191dc <_start@@Base+0x67d8>
   1989c:	mov	r1, r6
   198a0:	mov	r3, #8
   198a4:	mov	r2, fp
   198a8:	mov	r0, r9
   198ac:	bl	295ac <flatcc_json_parser_set_error@@Base>
   198b0:	mov	r6, r0
   198b4:	cmp	r4, r6
   198b8:	beq	190f8 <_start@@Base+0x66f4>
   198bc:	ldr	r0, [sp, #224]	; 0xe0
   198c0:	b	197c4 <_start@@Base+0x6dc0>
   198c4:	mov	r3, #7
   198c8:	mov	r2, r4
   198cc:	mov	r0, r6
   198d0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   198d4:	mov	r1, r0
   198d8:	b	19888 <_start@@Base+0x6e84>
   198dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e0:	vpush	{d8-d9}
   198e4:	mov	sl, r0
   198e8:	mov	r0, r3
   198ec:	mov	fp, r1
   198f0:	sub	sp, sp, #124	; 0x7c
   198f4:	mov	r1, #36	; 0x24
   198f8:	str	r3, [sp, #68]	; 0x44
   198fc:	mov	r3, #0
   19900:	str	r3, [r0]
   19904:	ldr	r0, [sl]
   19908:	mov	r9, r2
   1990c:	bl	244d8 <flatcc_builder_start_table@@Base>
   19910:	cmp	r0, #0
   19914:	bne	19aac <_start@@Base+0x70a8>
   19918:	add	r3, sp, #92	; 0x5c
   1991c:	str	r3, [sp]
   19920:	mov	r2, r9
   19924:	mov	r3, #1
   19928:	mov	r1, fp
   1992c:	mov	r0, sl
   19930:	bl	2cc54 <flatcc_json_parser_prepare_unions@@Base>
   19934:	cmp	r9, r0
   19938:	beq	19aac <_start@@Base+0x70a8>
   1993c:	mov	r1, fp
   19940:	add	r3, sp, #84	; 0x54
   19944:	mov	r2, r9
   19948:	mov	r0, sl
   1994c:	bl	133b4 <_start@@Base+0x9b0>
   19950:	ldr	r3, [sp, #84]	; 0x54
   19954:	cmp	r3, #0
   19958:	mov	fp, r0
   1995c:	beq	19a74 <_start@@Base+0x7070>
   19960:	mov	r3, r9
   19964:	mov	r9, sl
   19968:	mov	sl, r3
   1996c:	cmp	sl, fp
   19970:	beq	1999c <_start@@Base+0x6f98>
   19974:	ldrb	r3, [fp]
   19978:	cmp	r3, #34	; 0x22
   1997c:	moveq	r3, #0
   19980:	addeq	fp, fp, #1
   19984:	streq	r3, [r9, #12]
   19988:	beq	1999c <_start@@Base+0x6f98>
   1998c:	cmp	r3, #46	; 0x2e
   19990:	movne	r3, #1
   19994:	strne	r3, [r9, #12]
   19998:	beq	19f38 <_start@@Base+0x7534>
   1999c:	mov	r1, sl
   199a0:	mov	r0, fp
   199a4:	bl	12b30 <_start@@Base+0x12c>
   199a8:	add	r3, pc, #872	; 0x368
   199ac:	ldrd	r2, [r3]
   199b0:	cmp	r1, r3
   199b4:	cmpeq	r0, r2
   199b8:	mov	r4, r0
   199bc:	mov	r5, r1
   199c0:	bhi	19acc <_start@@Base+0x70c8>
   199c4:	add	r3, pc, #852	; 0x354
   199c8:	ldrd	r2, [r3]
   199cc:	cmp	r1, r3
   199d0:	cmpeq	r0, r2
   199d4:	bhi	19b48 <_start@@Base+0x7144>
   199d8:	add	r3, pc, #840	; 0x348
   199dc:	ldrd	r2, [r3]
   199e0:	cmp	r1, r3
   199e4:	cmpeq	r0, r2
   199e8:	bhi	19bfc <_start@@Base+0x71f8>
   199ec:	add	r3, pc, #828	; 0x33c
   199f0:	ldrd	r2, [r3]
   199f4:	and	r4, r0, #-16777216	; 0xff000000
   199f8:	cmp	r1, r3
   199fc:	cmpeq	r4, r2
   19a00:	beq	1a498 <_start@@Base+0x7a94>
   19a04:	add	r3, pc, #812	; 0x32c
   19a08:	ldrd	r2, [r3]
   19a0c:	cmp	r1, r3
   19a10:	cmpeq	r4, r2
   19a14:	beq	1a0a4 <_start@@Base+0x76a0>
   19a18:	mov	r1, fp
   19a1c:	mov	r2, sl
   19a20:	mov	r0, r9
   19a24:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19a28:	mov	fp, r0
   19a2c:	b	19a44 <_start@@Base+0x7040>
   19a30:	mov	r1, fp
   19a34:	mov	r2, sl
   19a38:	mov	r0, r9
   19a3c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19a40:	mov	fp, r0
   19a44:	mov	r1, fp
   19a48:	add	r3, sp, #84	; 0x54
   19a4c:	mov	r2, sl
   19a50:	mov	r0, r9
   19a54:	bl	14c68 <_start@@Base+0x2264>
   19a58:	ldr	r3, [sp, #84]	; 0x54
   19a5c:	cmp	r3, #0
   19a60:	mov	fp, r0
   19a64:	bne	1996c <_start@@Base+0x6f68>
   19a68:	mov	r3, sl
   19a6c:	mov	sl, r9
   19a70:	mov	r9, r3
   19a74:	ldr	r3, [sl, #24]
   19a78:	cmp	r3, #0
   19a7c:	bne	19aac <_start@@Base+0x70a8>
   19a80:	mov	r1, #3
   19a84:	ldr	r0, [sl]
   19a88:	bl	24d70 <flatcc_builder_check_required_field@@Base>
   19a8c:	mov	r1, fp
   19a90:	cmp	r0, #0
   19a94:	bne	1c7c4 <_start@@Base+0x9dc0>
   19a98:	mov	r3, #29
   19a9c:	mov	r2, r9
   19aa0:	mov	r0, sl
   19aa4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   19aa8:	mov	fp, r0
   19aac:	mov	r2, r9
   19ab0:	mov	r1, fp
   19ab4:	mov	r0, sl
   19ab8:	mov	r3, #33	; 0x21
   19abc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   19ac0:	add	sp, sp, #124	; 0x7c
   19ac4:	vpop	{d8-d9}
   19ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19acc:	add	r3, pc, #620	; 0x26c
   19ad0:	ldrd	r2, [r3]
   19ad4:	cmp	r1, r3
   19ad8:	cmpeq	r0, r2
   19adc:	bhi	19ba0 <_start@@Base+0x719c>
   19ae0:	add	r3, pc, #608	; 0x260
   19ae4:	ldrd	r2, [r3]
   19ae8:	cmp	r1, r3
   19aec:	cmpeq	r0, r2
   19af0:	beq	19eac <_start@@Base+0x74a8>
   19af4:	add	r3, pc, #596	; 0x254
   19af8:	ldrd	r2, [r3]
   19afc:	cmp	r1, r3
   19b00:	cmpeq	r0, r2
   19b04:	bhi	19e50 <_start@@Base+0x744c>
   19b08:	add	r3, pc, #584	; 0x248
   19b0c:	ldrd	r2, [r3]
   19b10:	cmp	r1, r3
   19b14:	cmpeq	r0, r2
   19b18:	beq	1a4bc <_start@@Base+0x7ab8>
   19b1c:	add	r3, pc, #572	; 0x23c
   19b20:	ldrd	r2, [r3]
   19b24:	cmp	r1, r3
   19b28:	cmpeq	r0, r2
   19b2c:	beq	1a12c <_start@@Base+0x7728>
   19b30:	mov	r1, fp
   19b34:	mov	r2, sl
   19b38:	mov	r0, r9
   19b3c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19b40:	mov	fp, r0
   19b44:	b	19a44 <_start@@Base+0x7040>
   19b48:	add	r3, pc, #536	; 0x218
   19b4c:	ldrd	r2, [r3]
   19b50:	cmp	r1, r3
   19b54:	cmpeq	r0, r2
   19b58:	bhi	19c40 <_start@@Base+0x723c>
   19b5c:	add	r3, pc, #524	; 0x20c
   19b60:	ldrd	r2, [r3]
   19b64:	cmp	r1, r3
   19b68:	cmpeq	r0, r2
   19b6c:	bhi	19f54 <_start@@Base+0x7550>
   19b70:	add	r3, pc, #512	; 0x200
   19b74:	ldrd	r2, [r3]
   19b78:	mov	r4, #0
   19b7c:	cmp	r1, r3
   19b80:	cmpeq	r4, r2
   19b84:	beq	1a248 <_start@@Base+0x7844>
   19b88:	mov	r1, fp
   19b8c:	mov	r2, sl
   19b90:	mov	r0, r9
   19b94:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19b98:	mov	fp, r0
   19b9c:	b	19a44 <_start@@Base+0x7040>
   19ba0:	add	r3, pc, #472	; 0x1d8
   19ba4:	ldrd	r2, [r3]
   19ba8:	cmp	r1, r3
   19bac:	cmpeq	r0, r2
   19bb0:	bhi	19dc0 <_start@@Base+0x73bc>
   19bb4:	add	r3, pc, #460	; 0x1cc
   19bb8:	ldrd	r2, [r3]
   19bbc:	ldr	r0, [pc, #492]	; 19db0 <_start@@Base+0x73ac>
   19bc0:	mvn	r1, #0
   19bc4:	and	r5, r5, r1
   19bc8:	and	r4, r4, r0
   19bcc:	cmp	r5, r3
   19bd0:	cmpeq	r4, r2
   19bd4:	bne	19a30 <_start@@Base+0x702c>
   19bd8:	sub	r3, sl, fp
   19bdc:	cmp	r3, #6
   19be0:	bgt	1a290 <_start@@Base+0x788c>
   19be4:	mov	r1, fp
   19be8:	mov	r2, sl
   19bec:	mov	r0, r9
   19bf0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19bf4:	mov	fp, r0
   19bf8:	b	19a44 <_start@@Base+0x7040>
   19bfc:	ldr	r3, [pc, #432]	; 19db4 <_start@@Base+0x73b0>
   19c00:	mvn	r2, #0
   19c04:	cmp	r1, r3
   19c08:	cmpeq	r0, r2
   19c0c:	bhi	19fa8 <_start@@Base+0x75a4>
   19c10:	add	r3, pc, #376	; 0x178
   19c14:	ldrd	r2, [r3]
   19c18:	mov	r4, #0
   19c1c:	cmp	r1, r3
   19c20:	cmpeq	r4, r2
   19c24:	beq	1a26c <_start@@Base+0x7868>
   19c28:	mov	r1, fp
   19c2c:	mov	r2, sl
   19c30:	mov	r0, r9
   19c34:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19c38:	mov	fp, r0
   19c3c:	b	19a44 <_start@@Base+0x7040>
   19c40:	add	r3, pc, #336	; 0x150
   19c44:	ldrd	r2, [r3]
   19c48:	and	r6, r0, #-16777216	; 0xff000000
   19c4c:	mov	r7, r1
   19c50:	cmp	r1, r3
   19c54:	cmpeq	r6, r2
   19c58:	beq	1a37c <_start@@Base+0x7978>
   19c5c:	sub	r8, sl, fp
   19c60:	cmp	r8, #4
   19c64:	bgt	1bc40 <_start@@Base+0x923c>
   19c68:	add	r3, pc, #304	; 0x130
   19c6c:	ldrd	r2, [r3]
   19c70:	cmp	r7, r3
   19c74:	cmpeq	r6, r2
   19c78:	beq	1a35c <_start@@Base+0x7958>
   19c7c:	add	r3, pc, #292	; 0x124
   19c80:	ldrd	r2, [r3]
   19c84:	cmp	r5, r3
   19c88:	cmpeq	r4, r2
   19c8c:	bne	1a364 <_start@@Base+0x7960>
   19c90:	add	fp, fp, #8
   19c94:	mov	r0, fp
   19c98:	mov	r1, sl
   19c9c:	bl	12b30 <_start@@Base+0x12c>
   19ca0:	mov	r0, #0
   19ca4:	and	r1, r1, #-16777216	; 0xff000000
   19ca8:	cmp	r1, #1694498816	; 0x65000000
   19cac:	cmpeq	r0, #0
   19cb0:	bne	1a6a4 <_start@@Base+0x7ca0>
   19cb4:	sub	r3, sl, fp
   19cb8:	cmp	r3, #1
   19cbc:	ble	1acd4 <_start@@Base+0x82d0>
   19cc0:	mov	r1, fp
   19cc4:	mov	r3, #1
   19cc8:	mov	r2, sl
   19ccc:	mov	r0, r9
   19cd0:	bl	17fac <_start@@Base+0x55a8>
   19cd4:	cmp	fp, r0
   19cd8:	mov	r1, r0
   19cdc:	beq	1acd4 <_start@@Base+0x82d0>
   19ce0:	ldr	r2, [sp, #92]	; 0x5c
   19ce4:	ldr	ip, [pc, #204]	; 19db8 <_start@@Base+0x73b4>
   19ce8:	ldr	r0, [pc, #204]	; 19dbc <_start@@Base+0x73b8>
   19cec:	mov	r3, #8
   19cf0:	str	r0, [sp, #8]
   19cf4:	str	r2, [sp, #4]
   19cf8:	str	r3, [sp]
   19cfc:	str	ip, [sp, #12]
   19d00:	mov	r3, #0
   19d04:	mov	r2, sl
   19d08:	mov	r0, r9
   19d0c:	bl	2cec0 <flatcc_json_parser_union_type@@Base>
   19d10:	mov	fp, r0
   19d14:	b	19a44 <_start@@Base+0x7040>
   19d18:	cmnvs	r2, r0, ror #4
   19d1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d20:			; <UNDEFINED> instruction: 0xffffffff
   19d24:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   19d28:			; <UNDEFINED> instruction: 0xffffffff
   19d2c:			; <UNDEFINED> instruction: 0x666c6577
   19d30:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   19d34:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   19d38:	andvc	r0, r0, #0
   19d3c:	cmnvs	pc, #28416	; 0x6f00
   19d40:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   19d44:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d48:	cmnvs	r2, r1, ror #4
   19d4c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d50:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   19d54:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d58:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   19d5c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d60:	rsbvs	r6, pc, #108, 30	; 0x1b0
   19d64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d68:			; <UNDEFINED> instruction: 0xffffffff
   19d6c:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   19d70:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   19d74:	rsbvc	r7, r1, r5, ror #4
   19d78:	andeq	r0, r0, r0
   19d7c:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   19d80:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   19d84:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d88:	ldrtvs	r0, [r3], -r0
   19d8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19d90:	andeq	r0, r0, r0
   19d94:			; <UNDEFINED> instruction: 0x666c6578
   19d98:	strcc	r0, [r0], #-0
   19d9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19da0:	strcc	r0, [r0, #-0]
   19da4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19da8:	svcpl	0x00747970
   19dac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19db0:			; <UNDEFINED> instruction: 0xffff0000
   19db4:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   19db8:	andeq	sp, r1, ip, ror #18
   19dbc:	andeq	r1, r4, ip, ror r1
   19dc0:	add	r3, pc, #976	; 0x3d0
   19dc4:	ldrd	r2, [r3]
   19dc8:	cmp	r1, r3
   19dcc:	cmpeq	r0, r2
   19dd0:	beq	1a448 <_start@@Base+0x7a44>
   19dd4:	add	r3, pc, #964	; 0x3c4
   19dd8:	ldrd	r2, [r3]
   19ddc:	cmp	r1, r3
   19de0:	cmpeq	r0, r2
   19de4:	bls	1a054 <_start@@Base+0x7650>
   19de8:	add	r3, pc, #952	; 0x3b8
   19dec:	ldrd	r2, [r3]
   19df0:	cmp	r1, r3
   19df4:	cmpeq	r0, r2
   19df8:	bne	1a52c <_start@@Base+0x7b28>
   19dfc:	add	r4, fp, #8
   19e00:	mov	r0, r4
   19e04:	mov	r1, sl
   19e08:	bl	12b30 <_start@@Base+0x12c>
   19e0c:	add	r3, pc, #924	; 0x39c
   19e10:	ldrd	r2, [r3]
   19e14:	cmp	r1, r3
   19e18:	cmpeq	r0, r2
   19e1c:	beq	1c374 <_start@@Base+0x9970>
   19e20:	add	r3, pc, #912	; 0x390
   19e24:	ldrd	r2, [r3]
   19e28:	bic	r0, r0, #255	; 0xff
   19e2c:	cmp	r1, r3
   19e30:	cmpeq	r0, r2
   19e34:	beq	1acb0 <_start@@Base+0x82ac>
   19e38:	mov	r1, r4
   19e3c:	mov	r2, sl
   19e40:	mov	r0, r9
   19e44:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19e48:	mov	fp, r0
   19e4c:	b	19a44 <_start@@Base+0x7040>
   19e50:	add	r3, pc, #872	; 0x368
   19e54:	ldrd	r2, [r3]
   19e58:	cmp	r1, r3
   19e5c:	cmpeq	r0, r2
   19e60:	bls	1a004 <_start@@Base+0x7600>
   19e64:	add	r3, pc, #860	; 0x35c
   19e68:	ldrd	r2, [r3]
   19e6c:	ldr	r0, [pc, #972]	; 1a240 <_start@@Base+0x783c>
   19e70:	mvn	r1, #0
   19e74:	and	r5, r5, r1
   19e78:	cmp	r5, r3
   19e7c:	and	r4, r4, r0
   19e80:	cmpeq	r4, r2
   19e84:	sub	r3, sl, fp
   19e88:	beq	1a758 <_start@@Base+0x7d54>
   19e8c:	cmp	r3, #5
   19e90:	bgt	1c548 <_start@@Base+0x9b44>
   19e94:	mov	r1, fp
   19e98:	mov	r2, sl
   19e9c:	mov	r0, r9
   19ea0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19ea4:	mov	fp, r0
   19ea8:	b	19a44 <_start@@Base+0x7040>
   19eac:	add	r4, fp, #8
   19eb0:	mov	r0, r4
   19eb4:	mov	r1, sl
   19eb8:	bl	12b30 <_start@@Base+0x12c>
   19ebc:	add	r3, pc, #780	; 0x30c
   19ec0:	ldrd	r2, [r3]
   19ec4:	cmp	r1, r3
   19ec8:	cmpeq	r0, r2
   19ecc:	bhi	1a0c8 <_start@@Base+0x76c4>
   19ed0:	add	r3, pc, #768	; 0x300
   19ed4:	ldrd	r2, [r3]
   19ed8:	cmp	r1, r3
   19edc:	cmpeq	r0, r2
   19ee0:	beq	1b5d0 <_start@@Base+0x8bcc>
   19ee4:	add	r3, pc, #756	; 0x2f4
   19ee8:	ldrd	r2, [r3]
   19eec:	cmp	r1, r3
   19ef0:	cmpeq	r0, r2
   19ef4:	bne	1a6d8 <_start@@Base+0x7cd4>
   19ef8:	add	r4, fp, #16
   19efc:	mov	r0, r4
   19f00:	mov	r1, sl
   19f04:	bl	12b30 <_start@@Base+0x12c>
   19f08:	add	r3, pc, #728	; 0x2d8
   19f0c:	ldrd	r2, [r3]
   19f10:	bic	r0, r0, #255	; 0xff
   19f14:	cmp	r1, r3
   19f18:	cmpeq	r0, r2
   19f1c:	beq	1ad28 <_start@@Base+0x8324>
   19f20:	mov	r1, r4
   19f24:	mov	r2, sl
   19f28:	mov	r0, r9
   19f2c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19f30:	mov	fp, r0
   19f34:	b	19a44 <_start@@Base+0x7040>
   19f38:	mov	r1, fp
   19f3c:	mov	r3, #5
   19f40:	mov	r2, sl
   19f44:	mov	r0, r9
   19f48:	bl	295ac <flatcc_json_parser_set_error@@Base>
   19f4c:	mov	fp, r0
   19f50:	b	1999c <_start@@Base+0x6f98>
   19f54:	add	r3, pc, #660	; 0x294
   19f58:	ldrd	r2, [r3]
   19f5c:	cmp	r1, r3
   19f60:	cmpeq	r0, r2
   19f64:	beq	1a320 <_start@@Base+0x791c>
   19f68:	add	r3, pc, #648	; 0x288
   19f6c:	ldrd	r2, [r3]
   19f70:	bic	r5, r1, #255	; 0xff
   19f74:	mov	r4, #0
   19f78:	cmp	r5, r3
   19f7c:	cmpeq	r4, r2
   19f80:	bne	1a544 <_start@@Base+0x7b40>
   19f84:	sub	r3, sl, fp
   19f88:	cmp	r3, #3
   19f8c:	bgt	1bc8c <_start@@Base+0x9288>
   19f90:	mov	r1, fp
   19f94:	mov	r2, sl
   19f98:	mov	r0, r9
   19f9c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19fa0:	mov	fp, r0
   19fa4:	b	19a44 <_start@@Base+0x7040>
   19fa8:	add	r3, pc, #592	; 0x250
   19fac:	ldrd	r2, [r3]
   19fb0:	cmp	r1, r3
   19fb4:	cmpeq	r0, r2
   19fb8:	bhi	1a150 <_start@@Base+0x774c>
   19fbc:	ldr	r3, [pc, #636]	; 1a240 <_start@@Base+0x783c>
   19fc0:	mov	r2, #0
   19fc4:	and	r5, r5, r3
   19fc8:	ldr	r3, [pc, #628]	; 1a244 <_start@@Base+0x7840>
   19fcc:	and	r4, r4, r2
   19fd0:	cmp	r5, r3
   19fd4:	mov	r2, #0
   19fd8:	cmpeq	r4, r2
   19fdc:	bne	1a6bc <_start@@Base+0x7cb8>
   19fe0:	sub	r3, sl, fp
   19fe4:	cmp	r3, #2
   19fe8:	bgt	1aed4 <_start@@Base+0x84d0>
   19fec:	mov	r1, fp
   19ff0:	mov	r2, sl
   19ff4:	mov	r0, r9
   19ff8:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   19ffc:	mov	fp, r0
   1a000:	b	19a44 <_start@@Base+0x7040>
   1a004:	add	r3, pc, #508	; 0x1fc
   1a008:	ldrd	r2, [r3]
   1a00c:	cmp	r1, r3
   1a010:	cmpeq	r0, r2
   1a014:	bne	1a55c <_start@@Base+0x7b58>
   1a018:	add	r4, fp, #8
   1a01c:	mov	r0, r4
   1a020:	mov	r1, sl
   1a024:	bl	12b30 <_start@@Base+0x12c>
   1a028:	mov	r0, #0
   1a02c:	and	r1, r1, #-16777216	; 0xff000000
   1a030:	cmp	r1, #2030043136	; 0x79000000
   1a034:	cmpeq	r0, #0
   1a038:	beq	1a8a4 <_start@@Base+0x7ea0>
   1a03c:	mov	r1, r4
   1a040:	mov	r2, sl
   1a044:	mov	r0, r9
   1a048:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a04c:	mov	fp, r0
   1a050:	b	19a44 <_start@@Base+0x7040>
   1a054:	add	r3, pc, #436	; 0x1b4
   1a058:	ldrd	r2, [r3]
   1a05c:	cmp	r1, r3
   1a060:	cmpeq	r0, r2
   1a064:	bne	1a514 <_start@@Base+0x7b10>
   1a068:	add	r4, fp, #8
   1a06c:	mov	r0, r4
   1a070:	mov	r1, sl
   1a074:	bl	12b30 <_start@@Base+0x12c>
   1a078:	add	r3, pc, #408	; 0x198
   1a07c:	ldrd	r2, [r3]
   1a080:	cmp	r1, r3
   1a084:	cmpeq	r0, r2
   1a088:	beq	1aa70 <_start@@Base+0x806c>
   1a08c:	mov	r1, r4
   1a090:	mov	r2, sl
   1a094:	mov	r0, r9
   1a098:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a09c:	mov	fp, r0
   1a0a0:	b	19a44 <_start@@Base+0x7040>
   1a0a4:	sub	r3, sl, fp
   1a0a8:	cmp	r3, #5
   1a0ac:	bgt	1a778 <_start@@Base+0x7d74>
   1a0b0:	mov	r1, fp
   1a0b4:	mov	r2, sl
   1a0b8:	mov	r0, r9
   1a0bc:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a0c0:	mov	fp, r0
   1a0c4:	b	19a44 <_start@@Base+0x7040>
   1a0c8:	add	r3, pc, #336	; 0x150
   1a0cc:	ldrd	r2, [r3]
   1a0d0:	cmp	r1, r3
   1a0d4:	cmpeq	r0, r2
   1a0d8:	beq	1b4b0 <_start@@Base+0x8aac>
   1a0dc:	add	r3, pc, #324	; 0x144
   1a0e0:	ldrd	r2, [r3]
   1a0e4:	cmp	r1, r3
   1a0e8:	cmpeq	r0, r2
   1a0ec:	bne	1a740 <_start@@Base+0x7d3c>
   1a0f0:	add	r4, fp, #16
   1a0f4:	mov	r0, r4
   1a0f8:	mov	r1, sl
   1a0fc:	bl	12b30 <_start@@Base+0x12c>
   1a100:	mov	r0, #0
   1a104:	and	r1, r1, #-16777216	; 0xff000000
   1a108:	cmp	r1, #1929379840	; 0x73000000
   1a10c:	cmpeq	r0, #0
   1a110:	beq	1ae00 <_start@@Base+0x83fc>
   1a114:	mov	r1, r4
   1a118:	mov	r2, sl
   1a11c:	mov	r0, r9
   1a120:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a124:	mov	fp, r0
   1a128:	b	19a44 <_start@@Base+0x7040>
   1a12c:	sub	r3, sl, fp
   1a130:	cmp	r3, #8
   1a134:	bgt	1b7c4 <_start@@Base+0x8dc0>
   1a138:	mov	r1, fp
   1a13c:	mov	r2, sl
   1a140:	mov	r0, r9
   1a144:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a148:	mov	fp, r0
   1a14c:	b	19a44 <_start@@Base+0x7040>
   1a150:	add	r3, pc, #216	; 0xd8
   1a154:	ldrd	r2, [r3]
   1a158:	cmp	r1, r3
   1a15c:	cmpeq	r0, r2
   1a160:	beq	1bae0 <_start@@Base+0x90dc>
   1a164:	add	r3, pc, #204	; 0xcc
   1a168:	ldrd	r2, [r3]
   1a16c:	mov	r4, #0
   1a170:	cmp	r1, r3
   1a174:	cmpeq	r4, r2
   1a178:	beq	1a880 <_start@@Base+0x7e7c>
   1a17c:	mov	r1, fp
   1a180:	mov	r2, sl
   1a184:	mov	r0, r9
   1a188:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a18c:	mov	fp, r0
   1a190:	b	19a44 <_start@@Base+0x7040>
   1a194:	nop			; (mov r0, r0)
   1a198:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1a19c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a1a0:	svcvs	0x00725f6e
   1a1a4:			; <UNDEFINED> instruction: 0x76656374
   1a1a8:	svcvs	0x00725f6f
   1a1ac:			; <UNDEFINED> instruction: 0x76656374
   1a1b0:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1a1b4:	ldrbvs	r6, [pc], -pc, ror #8
   1a1b8:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1a1bc:	ldrbvs	r6, [pc], -pc, ror #24
   1a1c0:	ldrbvs	pc, [pc, #4095]!	; 1b1c7 <_start@@Base+0x87c3>	; <UNPREDICTABLE>
   1a1c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a1c8:	ldrtvs	r0, [r2], -r0
   1a1cc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a1d0:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1a1d4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a1d8:	svcvs	0x006f6c73
   1a1dc:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a1e0:	svcvs	0x00727465
   1a1e4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a1e8:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1a1ec:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1a1f0:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1a1f4:	rsbvc	r7, r1, r5, ror #4
   1a1f8:	andeq	r0, r0, r0
   1a1fc:	rsbvc	r7, pc, r0, lsl #6
   1a200:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1a204:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1a208:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1a20c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a210:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1a214:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a218:	cmnvs	r4, r5, ror r2
   1a21c:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1a220:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1a224:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a228:	cmnvs	r2, r5, ror #24
   1a22c:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a230:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1a234:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1a238:	andeq	r0, r0, r0
   1a23c:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1a240:			; <UNDEFINED> instruction: 0xffff0000
   1a244:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1a248:	sub	r3, sl, fp
   1a24c:	cmp	r3, #4
   1a250:	bgt	1ba18 <_start@@Base+0x9014>
   1a254:	mov	r1, fp
   1a258:	mov	r2, sl
   1a25c:	mov	r0, r9
   1a260:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a264:	mov	fp, r0
   1a268:	b	19a44 <_start@@Base+0x7040>
   1a26c:	sub	r3, sl, fp
   1a270:	cmp	r3, #4
   1a274:	bgt	1b8dc <_start@@Base+0x8ed8>
   1a278:	mov	r1, fp
   1a27c:	mov	r2, sl
   1a280:	mov	r0, r9
   1a284:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a288:	mov	fp, r0
   1a28c:	b	19a44 <_start@@Base+0x7040>
   1a290:	mov	r3, #6
   1a294:	mov	r2, sl
   1a298:	mov	r1, fp
   1a29c:	mov	r0, r9
   1a2a0:	bl	17fac <_start@@Base+0x55a8>
   1a2a4:	cmp	r0, fp
   1a2a8:	mov	r5, r0
   1a2ac:	beq	19be4 <_start@@Base+0x71e0>
   1a2b0:	add	r4, sp, #120	; 0x78
   1a2b4:	mov	r3, #0
   1a2b8:	mov	r1, r0
   1a2bc:	str	r3, [r4, #-8]!
   1a2c0:	mov	r2, sl
   1a2c4:	mov	r0, r9
   1a2c8:	mov	r3, r4
   1a2cc:	bl	2a3d8 <flatcc_json_parser_float@@Base>
   1a2d0:	cmp	r0, r5
   1a2d4:	mov	fp, r0
   1a2d8:	beq	1c660 <_start@@Base+0x9c5c>
   1a2dc:	vldr	s15, [sp, #112]	; 0x70
   1a2e0:	vcmp.f32	s15, #0.0
   1a2e4:	vmrs	APSR_nzcv, fpscr
   1a2e8:	bne	1a2f8 <_start@@Base+0x78f4>
   1a2ec:	ldr	r3, [r9, #8]
   1a2f0:	tst	r3, #2
   1a2f4:	beq	19a44 <_start@@Base+0x7040>
   1a2f8:	mov	r3, #4
   1a2fc:	mov	r2, r3
   1a300:	mov	r1, #27
   1a304:	ldr	r0, [r9]
   1a308:	bl	26644 <flatcc_builder_table_add@@Base>
   1a30c:	cmp	r0, #0
   1a310:	beq	1a438 <_start@@Base+0x7a34>
   1a314:	ldr	r3, [sp, #112]	; 0x70
   1a318:	str	r3, [r0]
   1a31c:	b	19a44 <_start@@Base+0x7040>
   1a320:	add	r4, fp, #8
   1a324:	mov	r0, r4
   1a328:	mov	r1, sl
   1a32c:	bl	12b30 <_start@@Base+0x12c>
   1a330:	add	r3, pc, #976	; 0x3d0
   1a334:	ldrd	r2, [r3]
   1a338:	cmp	r1, r3
   1a33c:	cmpeq	r0, r2
   1a340:	beq	1ac64 <_start@@Base+0x8260>
   1a344:	mov	r1, r4
   1a348:	mov	r2, sl
   1a34c:	mov	r0, r9
   1a350:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a354:	mov	fp, r0
   1a358:	b	19a44 <_start@@Base+0x7040>
   1a35c:	cmp	r8, #5
   1a360:	bgt	1ad4c <_start@@Base+0x8348>
   1a364:	mov	r1, fp
   1a368:	mov	r2, sl
   1a36c:	mov	r0, r9
   1a370:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a374:	mov	fp, r0
   1a378:	b	19a44 <_start@@Base+0x7040>
   1a37c:	sub	r3, sl, fp
   1a380:	cmp	r3, #5
   1a384:	ble	1a364 <_start@@Base+0x7960>
   1a388:	mov	r3, #5
   1a38c:	mov	r2, sl
   1a390:	mov	r1, fp
   1a394:	mov	r0, r9
   1a398:	bl	17fac <_start@@Base+0x55a8>
   1a39c:	cmp	r0, fp
   1a3a0:	mov	r4, r0
   1a3a4:	beq	1a364 <_start@@Base+0x7960>
   1a3a8:	mvn	r3, #-1073741824	; 0xc0000000
   1a3ac:	mov	r2, #2
   1a3b0:	mov	r1, #4
   1a3b4:	ldr	r0, [r9]
   1a3b8:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1a3bc:	cmp	r0, #0
   1a3c0:	bne	1d064 <_start@@Base+0xa660>
   1a3c4:	add	r3, sp, #84	; 0x54
   1a3c8:	mov	r1, r4
   1a3cc:	mov	r2, sl
   1a3d0:	mov	r0, r9
   1a3d4:	bl	13468 <_start@@Base+0xa64>
   1a3d8:	ldr	r3, [sp, #84]	; 0x54
   1a3dc:	cmp	r3, #0
   1a3e0:	mov	fp, r0
   1a3e4:	beq	1b308 <_start@@Base+0x8904>
   1a3e8:	mov	r4, #1
   1a3ec:	b	1a418 <_start@@Base+0x7a14>
   1a3f0:	bl	14f70 <_start@@Base+0x256c>
   1a3f4:	add	r3, sp, #84	; 0x54
   1a3f8:	mov	r2, sl
   1a3fc:	mov	r1, r0
   1a400:	mov	r0, r9
   1a404:	bl	14dec <_start@@Base+0x23e8>
   1a408:	ldr	r3, [sp, #84]	; 0x54
   1a40c:	cmp	r3, #0
   1a410:	mov	fp, r0
   1a414:	beq	1b308 <_start@@Base+0x8904>
   1a418:	mov	r1, r4
   1a41c:	ldr	r0, [r9]
   1a420:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1a424:	mov	r1, fp
   1a428:	mov	r2, sl
   1a42c:	subs	r3, r0, #0
   1a430:	mov	r0, r9
   1a434:	bne	1a3f0 <_start@@Base+0x79ec>
   1a438:	mov	r3, sl
   1a43c:	mov	sl, r9
   1a440:	mov	r9, r3
   1a444:	b	19aac <_start@@Base+0x70a8>
   1a448:	add	fp, fp, #8
   1a44c:	mov	r0, fp
   1a450:	mov	r1, sl
   1a454:	bl	12b30 <_start@@Base+0x12c>
   1a458:	add	r3, pc, #688	; 0x2b0
   1a45c:	ldrd	r2, [r3]
   1a460:	cmp	r1, r3
   1a464:	cmpeq	r0, r2
   1a468:	bhi	1a574 <_start@@Base+0x7b70>
   1a46c:	add	r3, pc, #676	; 0x2a4
   1a470:	ldrd	r2, [r3]
   1a474:	cmp	r1, r3
   1a478:	cmpeq	r0, r2
   1a47c:	beq	1ab9c <_start@@Base+0x8198>
   1a480:	mov	r1, fp
   1a484:	mov	r2, sl
   1a488:	mov	r0, r9
   1a48c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a490:	mov	fp, r0
   1a494:	b	19a44 <_start@@Base+0x7040>
   1a498:	sub	r3, sl, fp
   1a49c:	cmp	r3, #5
   1a4a0:	bgt	1b450 <_start@@Base+0x8a4c>
   1a4a4:	mov	r1, fp
   1a4a8:	mov	r2, sl
   1a4ac:	mov	r0, r9
   1a4b0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a4b4:	mov	fp, r0
   1a4b8:	b	19a44 <_start@@Base+0x7040>
   1a4bc:	add	r4, fp, #8
   1a4c0:	mov	r0, r4
   1a4c4:	mov	r1, sl
   1a4c8:	bl	12b30 <_start@@Base+0x12c>
   1a4cc:	ldr	r3, [pc, #612]	; 1a738 <_start@@Base+0x7d34>
   1a4d0:	ldr	r7, [pc, #612]	; 1a73c <_start@@Base+0x7d38>
   1a4d4:	mov	r2, #0
   1a4d8:	mov	r6, #0
   1a4dc:	and	r3, r3, r1
   1a4e0:	and	r2, r2, r0
   1a4e4:	cmp	r3, r7
   1a4e8:	cmpeq	r2, r6
   1a4ec:	bne	1a6f0 <_start@@Base+0x7cec>
   1a4f0:	sub	r3, sl, r4
   1a4f4:	cmp	r3, #2
   1a4f8:	bgt	1aff4 <_start@@Base+0x85f0>
   1a4fc:	mov	r1, r4
   1a500:	mov	r2, sl
   1a504:	mov	r0, r9
   1a508:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a50c:	mov	fp, r0
   1a510:	b	19a44 <_start@@Base+0x7040>
   1a514:	mov	r1, fp
   1a518:	mov	r2, sl
   1a51c:	mov	r0, r9
   1a520:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a524:	mov	fp, r0
   1a528:	b	19a44 <_start@@Base+0x7040>
   1a52c:	mov	r1, fp
   1a530:	mov	r2, sl
   1a534:	mov	r0, r9
   1a538:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a53c:	mov	fp, r0
   1a540:	b	19a44 <_start@@Base+0x7040>
   1a544:	mov	r1, fp
   1a548:	mov	r2, sl
   1a54c:	mov	r0, r9
   1a550:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a554:	mov	fp, r0
   1a558:	b	19a44 <_start@@Base+0x7040>
   1a55c:	mov	r1, fp
   1a560:	mov	r2, sl
   1a564:	mov	r0, r9
   1a568:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a56c:	mov	fp, r0
   1a570:	b	19a44 <_start@@Base+0x7040>
   1a574:	add	r3, pc, #420	; 0x1a4
   1a578:	ldrd	r2, [r3]
   1a57c:	cmp	r1, r3
   1a580:	cmpeq	r0, r2
   1a584:	bls	1aabc <_start@@Base+0x80b8>
   1a588:	add	r3, pc, #408	; 0x198
   1a58c:	ldrd	r2, [r3]
   1a590:	cmp	r1, r3
   1a594:	cmpeq	r0, r2
   1a598:	beq	1c888 <_start@@Base+0x9e84>
   1a59c:	add	r3, pc, #396	; 0x18c
   1a5a0:	ldrd	r2, [r3]
   1a5a4:	cmp	r1, r3
   1a5a8:	cmpeq	r0, r2
   1a5ac:	bne	1c764 <_start@@Base+0x9d60>
   1a5b0:	sub	r3, sl, fp
   1a5b4:	cmp	r3, #8
   1a5b8:	bgt	1d2a4 <_start@@Base+0xa8a0>
   1a5bc:	add	fp, fp, #8
   1a5c0:	mov	r0, fp
   1a5c4:	mov	r1, sl
   1a5c8:	bl	12b30 <_start@@Base+0x12c>
   1a5cc:	mov	r0, #0
   1a5d0:	and	r1, r1, #-16777216	; 0xff000000
   1a5d4:	cmp	r1, #1627389952	; 0x61000000
   1a5d8:	cmpeq	r0, #0
   1a5dc:	bne	1d664 <_start@@Base+0xac60>
   1a5e0:	sub	r3, sl, fp
   1a5e4:	cmp	r3, #1
   1a5e8:	ble	1d84c <_start@@Base+0xae48>
   1a5ec:	mov	r3, #1
   1a5f0:	mov	r2, sl
   1a5f4:	mov	r1, fp
   1a5f8:	mov	r0, r9
   1a5fc:	bl	17fac <_start@@Base+0x55a8>
   1a600:	cmp	fp, r0
   1a604:	mov	r4, r0
   1a608:	beq	1d850 <_start@@Base+0xae4c>
   1a60c:	mov	r2, #0
   1a610:	mov	r3, #0
   1a614:	mov	r1, #0
   1a618:	cmp	sl, r0
   1a61c:	strd	r2, [sp, #104]	; 0x68
   1a620:	strd	r2, [sp, #112]	; 0x70
   1a624:	str	r1, [sp, #100]	; 0x64
   1a628:	beq	1d904 <_start@@Base+0xaf00>
   1a62c:	add	r3, sp, #112	; 0x70
   1a630:	str	r3, [sp]
   1a634:	mov	r1, r0
   1a638:	add	r3, sp, #100	; 0x64
   1a63c:	mov	r2, sl
   1a640:	mov	r0, r9
   1a644:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1a648:	cmp	r4, r0
   1a64c:	mov	fp, r0
   1a650:	beq	1d908 <_start@@Base+0xaf04>
   1a654:	ldr	r1, [sp, #100]	; 0x64
   1a658:	ldrd	r2, [sp, #112]	; 0x70
   1a65c:	cmp	r1, #0
   1a660:	bne	1d768 <_start@@Base+0xad64>
   1a664:	strd	r2, [sp, #104]	; 0x68
   1a668:	orrs	r3, r2, r3
   1a66c:	bne	1a67c <_start@@Base+0x7c78>
   1a670:	ldr	r3, [r9, #8]
   1a674:	tst	r3, #2
   1a678:	beq	19a44 <_start@@Base+0x7040>
   1a67c:	mov	r3, #8
   1a680:	mov	r2, r3
   1a684:	mov	r1, #23
   1a688:	ldr	r0, [r9]
   1a68c:	bl	26644 <flatcc_builder_table_add@@Base>
   1a690:	cmp	r0, #0
   1a694:	beq	1a438 <_start@@Base+0x7a34>
   1a698:	ldrd	r2, [sp, #104]	; 0x68
   1a69c:	strd	r2, [r0]
   1a6a0:	b	19a44 <_start@@Base+0x7040>
   1a6a4:	mov	r1, fp
   1a6a8:	mov	r2, sl
   1a6ac:	mov	r0, r9
   1a6b0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a6b4:	mov	fp, r0
   1a6b8:	b	19a44 <_start@@Base+0x7040>
   1a6bc:	mov	r1, fp
   1a6c0:	mov	r2, sl
   1a6c4:	mov	r0, r9
   1a6c8:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a6cc:	mov	fp, r0
   1a6d0:	b	19a44 <_start@@Base+0x7040>
   1a6d4:	mov	r4, r0
   1a6d8:	mov	r1, r4
   1a6dc:	mov	r2, sl
   1a6e0:	mov	r0, r9
   1a6e4:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a6e8:	mov	fp, r0
   1a6ec:	b	19a44 <_start@@Base+0x7040>
   1a6f0:	mov	r1, r4
   1a6f4:	mov	r2, sl
   1a6f8:	mov	r0, r9
   1a6fc:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a700:	mov	fp, r0
   1a704:	b	19a44 <_start@@Base+0x7040>
   1a708:	rsbvc	r6, r1, r5, ror #6
   1a70c:	smcvs	54867	; 0xd653
   1a710:			; <UNDEFINED> instruction: 0x666e7630
   1a714:	teqvc	r6, #1593835520	; 0x5f000000
   1a718:			; <UNDEFINED> instruction: 0x666e7631
   1a71c:	teqvc	r3, #-268435451	; 0xf0000005
   1a720:			; <UNDEFINED> instruction: 0x666e7630
   1a724:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1a728:			; <UNDEFINED> instruction: 0x666e7631
   1a72c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1a730:			; <UNDEFINED> instruction: 0x666e7631
   1a734:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1a738:			; <UNDEFINED> instruction: 0xffff0000
   1a73c:	ldrtcc	r0, [r4], -r0
   1a740:	mov	r1, r4
   1a744:	mov	r2, sl
   1a748:	mov	r0, r9
   1a74c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a750:	mov	fp, r0
   1a754:	b	19a44 <_start@@Base+0x7040>
   1a758:	cmp	r3, #6
   1a75c:	bgt	1af60 <_start@@Base+0x855c>
   1a760:	mov	r1, fp
   1a764:	mov	r2, sl
   1a768:	mov	r0, r9
   1a76c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a770:	mov	fp, r0
   1a774:	b	19a44 <_start@@Base+0x7040>
   1a778:	mov	r3, #5
   1a77c:	mov	r2, sl
   1a780:	mov	r1, fp
   1a784:	mov	r0, r9
   1a788:	bl	17fac <_start@@Base+0x55a8>
   1a78c:	cmp	r0, fp
   1a790:	mov	r4, r0
   1a794:	beq	1a0b0 <_start@@Base+0x76ac>
   1a798:	mov	r0, #0
   1a79c:	mov	r1, #0
   1a7a0:	mov	r3, #0
   1a7a4:	cmp	sl, r4
   1a7a8:	strd	r0, [sp, #112]	; 0x70
   1a7ac:	strb	r3, [sp, #100]	; 0x64
   1a7b0:	str	r3, [sp, #104]	; 0x68
   1a7b4:	beq	1c344 <_start@@Base+0x9940>
   1a7b8:	add	r3, sp, #112	; 0x70
   1a7bc:	str	r3, [sp]
   1a7c0:	mov	r2, sl
   1a7c4:	add	r3, sp, #104	; 0x68
   1a7c8:	mov	r1, r4
   1a7cc:	mov	r0, r9
   1a7d0:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1a7d4:	cmp	r4, r0
   1a7d8:	mov	fp, r0
   1a7dc:	beq	1c340 <_start@@Base+0x993c>
   1a7e0:	ldr	r1, [sp, #104]	; 0x68
   1a7e4:	ldrd	r2, [sp, #112]	; 0x70
   1a7e8:	cmp	r1, #0
   1a7ec:	bne	1a840 <_start@@Base+0x7e3c>
   1a7f0:	cmp	r3, #0
   1a7f4:	cmpeq	r2, #127	; 0x7f
   1a7f8:	sxtbls	r2, r2
   1a7fc:	strbls	r2, [sp, #100]	; 0x64
   1a800:	bhi	1c9dc <_start@@Base+0x9fd8>
   1a804:	cmp	r2, #8
   1a808:	bne	1a818 <_start@@Base+0x7e14>
   1a80c:	ldr	r3, [r9, #8]
   1a810:	tst	r3, #2
   1a814:	beq	19a44 <_start@@Base+0x7040>
   1a818:	mov	r3, #1
   1a81c:	mov	r2, r3
   1a820:	mov	r1, #6
   1a824:	ldr	r0, [r9]
   1a828:	bl	26644 <flatcc_builder_table_add@@Base>
   1a82c:	cmp	r0, #0
   1a830:	beq	1a438 <_start@@Base+0x7a34>
   1a834:	ldrsb	r3, [sp, #100]	; 0x64
   1a838:	strb	r3, [r0]
   1a83c:	b	19a44 <_start@@Base+0x7040>
   1a840:	cmp	r3, #0
   1a844:	cmpeq	r2, #128	; 0x80
   1a848:	rsbls	r2, r2, #0
   1a84c:	sxtbls	r2, r2
   1a850:	strbls	r2, [sp, #100]	; 0x64
   1a854:	bls	1a804 <_start@@Base+0x7e00>
   1a858:	mov	r1, r0
   1a85c:	mov	r3, #8
   1a860:	mov	r2, sl
   1a864:	mov	r0, r9
   1a868:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1a86c:	mov	fp, r0
   1a870:	cmp	r4, fp
   1a874:	beq	1c344 <_start@@Base+0x9940>
   1a878:	ldrsb	r2, [sp, #100]	; 0x64
   1a87c:	b	1a804 <_start@@Base+0x7e00>
   1a880:	sub	r3, sl, fp
   1a884:	cmp	r3, #4
   1a888:	bgt	1c6d8 <_start@@Base+0x9cd4>
   1a88c:	mov	r1, fp
   1a890:	mov	r2, sl
   1a894:	mov	r0, r9
   1a898:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a89c:	mov	fp, r0
   1a8a0:	b	19a44 <_start@@Base+0x7040>
   1a8a4:	sub	r3, sl, r4
   1a8a8:	cmp	r3, #1
   1a8ac:	ble	1ceb8 <_start@@Base+0xa4b4>
   1a8b0:	mov	r3, #1
   1a8b4:	mov	r2, sl
   1a8b8:	mov	r1, r4
   1a8bc:	mov	r0, r9
   1a8c0:	bl	17fac <_start@@Base+0x55a8>
   1a8c4:	cmp	r4, r0
   1a8c8:	mov	fp, r0
   1a8cc:	beq	1ceb4 <_start@@Base+0xa4b0>
   1a8d0:	mov	r3, #0
   1a8d4:	mov	r1, #3
   1a8d8:	ldr	r0, [r9]
   1a8dc:	str	r3, [sp, #88]	; 0x58
   1a8e0:	bl	244d8 <flatcc_builder_start_table@@Base>
   1a8e4:	cmp	r0, #0
   1a8e8:	bne	1ba9c <_start@@Base+0x9098>
   1a8ec:	mov	r1, fp
   1a8f0:	add	r3, sp, #96	; 0x60
   1a8f4:	mov	r2, sl
   1a8f8:	mov	r0, r9
   1a8fc:	bl	133b4 <_start@@Base+0x9b0>
   1a900:	ldr	r3, [sp, #96]	; 0x60
   1a904:	cmp	r3, #0
   1a908:	mov	fp, r0
   1a90c:	beq	1c81c <_start@@Base+0x9e18>
   1a910:	mov	r6, #1
   1a914:	mov	r8, #5
   1a918:	mov	r7, #0
   1a91c:	b	1a97c <_start@@Base+0x7f78>
   1a920:	add	r3, pc, #968	; 0x3c8
   1a924:	ldrd	r2, [r3]
   1a928:	and	r0, r0, #-16777216	; 0xff000000
   1a92c:	cmp	r1, r3
   1a930:	cmpeq	r0, r2
   1a934:	bne	1a944 <_start@@Base+0x7f40>
   1a938:	sub	r3, sl, fp
   1a93c:	cmp	r3, #5
   1a940:	bgt	1b33c <_start@@Base+0x8938>
   1a944:	mov	r1, fp
   1a948:	mov	r2, sl
   1a94c:	mov	r0, r9
   1a950:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1a954:	mov	fp, r0
   1a958:	mov	r1, fp
   1a95c:	add	r3, sp, #96	; 0x60
   1a960:	mov	r2, sl
   1a964:	mov	r0, r9
   1a968:	bl	14c68 <_start@@Base+0x2264>
   1a96c:	ldr	r3, [sp, #96]	; 0x60
   1a970:	cmp	r3, #0
   1a974:	mov	fp, r0
   1a978:	beq	1c81c <_start@@Base+0x9e18>
   1a97c:	cmp	sl, fp
   1a980:	beq	1a9a4 <_start@@Base+0x7fa0>
   1a984:	ldrb	r3, [fp]
   1a988:	cmp	r3, #34	; 0x22
   1a98c:	addeq	fp, fp, #1
   1a990:	streq	r7, [r9, #12]
   1a994:	beq	1a9a4 <_start@@Base+0x7fa0>
   1a998:	cmp	r3, #46	; 0x2e
   1a99c:	strne	r6, [r9, #12]
   1a9a0:	beq	1b748 <_start@@Base+0x8d44>
   1a9a4:	mov	r1, sl
   1a9a8:	mov	r0, fp
   1a9ac:	bl	12b30 <_start@@Base+0x12c>
   1a9b0:	ldr	r3, [pc, #864]	; 1ad18 <_start@@Base+0x8314>
   1a9b4:	mvn	r2, #0
   1a9b8:	cmp	r1, r3
   1a9bc:	cmpeq	r0, r2
   1a9c0:	bls	1a920 <_start@@Base+0x7f1c>
   1a9c4:	add	r3, pc, #812	; 0x32c
   1a9c8:	ldrd	r2, [r3]
   1a9cc:	bic	r5, r1, #255	; 0xff
   1a9d0:	mov	r4, #0
   1a9d4:	cmp	r5, r3
   1a9d8:	cmpeq	r4, r2
   1a9dc:	beq	1b1c0 <_start@@Base+0x87bc>
   1a9e0:	ldr	r3, [pc, #820]	; 1ad1c <_start@@Base+0x8318>
   1a9e4:	mov	r2, #0
   1a9e8:	and	r1, r1, r3
   1a9ec:	ldr	r3, [pc, #812]	; 1ad20 <_start@@Base+0x831c>
   1a9f0:	and	r0, r0, r2
   1a9f4:	cmp	r1, r3
   1a9f8:	mov	r2, #0
   1a9fc:	cmpeq	r0, r2
   1aa00:	bne	1a944 <_start@@Base+0x7f40>
   1aa04:	sub	r3, sl, fp
   1aa08:	cmp	r3, #2
   1aa0c:	ble	1a944 <_start@@Base+0x7f40>
   1aa10:	mov	r1, fp
   1aa14:	mov	r3, #2
   1aa18:	mov	r2, sl
   1aa1c:	mov	r0, r9
   1aa20:	bl	17fac <_start@@Base+0x55a8>
   1aa24:	cmp	r0, fp
   1aa28:	mov	r1, r0
   1aa2c:	beq	1a944 <_start@@Base+0x7f40>
   1aa30:	add	r3, sp, #100	; 0x64
   1aa34:	mov	r2, sl
   1aa38:	mov	r0, r9
   1aa3c:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   1aa40:	ldr	r3, [sp, #100]	; 0x64
   1aa44:	cmp	r3, #0
   1aa48:	mov	fp, r0
   1aa4c:	beq	1ba9c <_start@@Base+0x9098>
   1aa50:	mov	r1, r7
   1aa54:	ldr	r0, [r9]
   1aa58:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1aa5c:	cmp	r0, #0
   1aa60:	beq	1ba9c <_start@@Base+0x9098>
   1aa64:	ldr	r3, [sp, #100]	; 0x64
   1aa68:	str	r3, [r0]
   1aa6c:	b	1a958 <_start@@Base+0x7f54>
   1aa70:	add	r4, fp, #16
   1aa74:	mov	r0, r4
   1aa78:	mov	r1, sl
   1aa7c:	bl	12b30 <_start@@Base+0x12c>
   1aa80:	add	r3, pc, #632	; 0x278
   1aa84:	ldrd	r2, [r3]
   1aa88:	mov	r0, #0
   1aa8c:	cmp	r1, r3
   1aa90:	cmpeq	r0, r2
   1aa94:	bne	1c4e8 <_start@@Base+0x9ae4>
   1aa98:	sub	r3, sl, r4
   1aa9c:	cmp	r3, #4
   1aaa0:	bgt	1cf64 <_start@@Base+0xa560>
   1aaa4:	mov	r1, r4
   1aaa8:	mov	r2, sl
   1aaac:	mov	r0, r9
   1aab0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1aab4:	mov	fp, r0
   1aab8:	b	19a44 <_start@@Base+0x7040>
   1aabc:	add	r3, pc, #580	; 0x244
   1aac0:	ldrd	r2, [r3]
   1aac4:	cmp	r1, r3
   1aac8:	cmpeq	r0, r2
   1aacc:	bne	1c5dc <_start@@Base+0x9bd8>
   1aad0:	sub	r3, sl, fp
   1aad4:	cmp	r3, #8
   1aad8:	bgt	1d0ac <_start@@Base+0xa6a8>
   1aadc:	add	fp, fp, #8
   1aae0:	mov	r0, fp
   1aae4:	mov	r1, sl
   1aae8:	bl	12b30 <_start@@Base+0x12c>
   1aaec:	mov	r0, #0
   1aaf0:	and	r1, r1, #-16777216	; 0xff000000
   1aaf4:	cmp	r1, #1627389952	; 0x61000000
   1aaf8:	cmpeq	r0, #0
   1aafc:	bne	1d3e8 <_start@@Base+0xa9e4>
   1ab00:	sub	r3, sl, fp
   1ab04:	cmp	r3, #1
   1ab08:	ble	1d794 <_start@@Base+0xad90>
   1ab0c:	mov	r3, #1
   1ab10:	mov	r2, sl
   1ab14:	mov	r1, fp
   1ab18:	mov	r0, r9
   1ab1c:	bl	17fac <_start@@Base+0x55a8>
   1ab20:	cmp	fp, r0
   1ab24:	mov	r4, r0
   1ab28:	beq	1d798 <_start@@Base+0xad94>
   1ab2c:	mov	r0, #0
   1ab30:	mov	r1, #0
   1ab34:	add	r5, sp, #120	; 0x78
   1ab38:	mov	r2, sl
   1ab3c:	strd	r0, [r5, #-8]!
   1ab40:	mov	r1, r4
   1ab44:	mov	r3, r5
   1ab48:	mov	r0, r9
   1ab4c:	bl	132ec <_start@@Base+0x8e8>
   1ab50:	cmp	r0, r4
   1ab54:	mov	fp, r0
   1ab58:	beq	1d940 <_start@@Base+0xaf3c>
   1ab5c:	ldrd	r2, [sp, #112]	; 0x70
   1ab60:	orrs	r3, r2, r3
   1ab64:	bne	1ab74 <_start@@Base+0x8170>
   1ab68:	ldr	r3, [r9, #8]
   1ab6c:	tst	r3, #2
   1ab70:	beq	19a44 <_start@@Base+0x7040>
   1ab74:	mov	r3, #8
   1ab78:	mov	r2, r3
   1ab7c:	mov	r1, #22
   1ab80:	ldr	r0, [r9]
   1ab84:	bl	26644 <flatcc_builder_table_add@@Base>
   1ab88:	cmp	r0, #0
   1ab8c:	beq	1d8d8 <_start@@Base+0xaed4>
   1ab90:	ldrd	r2, [sp, #112]	; 0x70
   1ab94:	strd	r2, [r0]
   1ab98:	b	19a44 <_start@@Base+0x7040>
   1ab9c:	sub	r3, sl, fp
   1aba0:	cmp	r3, #8
   1aba4:	bgt	1c950 <_start@@Base+0x9f4c>
   1aba8:	add	fp, fp, #8
   1abac:	mov	r0, fp
   1abb0:	mov	r1, sl
   1abb4:	bl	12b30 <_start@@Base+0x12c>
   1abb8:	mov	r0, #0
   1abbc:	and	r1, r1, #-16777216	; 0xff000000
   1abc0:	cmp	r1, #1627389952	; 0x61000000
   1abc4:	cmpeq	r0, #0
   1abc8:	bne	1d094 <_start@@Base+0xa690>
   1abcc:	sub	r3, sl, fp
   1abd0:	cmp	r3, #1
   1abd4:	ble	1d7fc <_start@@Base+0xadf8>
   1abd8:	mov	r3, #1
   1abdc:	mov	r2, sl
   1abe0:	mov	r1, fp
   1abe4:	mov	r0, r9
   1abe8:	bl	17fac <_start@@Base+0x55a8>
   1abec:	cmp	fp, r0
   1abf0:	mov	r5, r0
   1abf4:	beq	1d7fc <_start@@Base+0xadf8>
   1abf8:	add	r4, sp, #120	; 0x78
   1abfc:	mov	r3, #0
   1ac00:	str	r3, [r4, #-8]!
   1ac04:	mov	r1, r0
   1ac08:	mov	r2, sl
   1ac0c:	mov	r3, r4
   1ac10:	mov	r0, r9
   1ac14:	bl	13158 <_start@@Base+0x754>
   1ac18:	cmp	r0, r5
   1ac1c:	mov	fp, r0
   1ac20:	beq	1d880 <_start@@Base+0xae7c>
   1ac24:	ldr	r3, [sp, #112]	; 0x70
   1ac28:	cmp	r3, #0
   1ac2c:	bne	1ac3c <_start@@Base+0x8238>
   1ac30:	ldr	r3, [r9, #8]
   1ac34:	tst	r3, #2
   1ac38:	beq	19a44 <_start@@Base+0x7040>
   1ac3c:	mov	r3, #4
   1ac40:	mov	r2, r3
   1ac44:	mov	r1, #20
   1ac48:	ldr	r0, [r9]
   1ac4c:	bl	26644 <flatcc_builder_table_add@@Base>
   1ac50:	cmp	r0, #0
   1ac54:	beq	1d8d8 <_start@@Base+0xaed4>
   1ac58:	ldr	r3, [sp, #112]	; 0x70
   1ac5c:	str	r3, [r0]
   1ac60:	b	19a44 <_start@@Base+0x7040>
   1ac64:	add	fp, fp, #16
   1ac68:	mov	r0, fp
   1ac6c:	mov	r1, sl
   1ac70:	bl	12b30 <_start@@Base+0x12c>
   1ac74:	add	r3, pc, #148	; 0x94
   1ac78:	ldrd	r2, [r3]
   1ac7c:	and	r0, r0, #-16777216	; 0xff000000
   1ac80:	cmp	r1, r3
   1ac84:	cmpeq	r0, r2
   1ac88:	bne	1c60c <_start@@Base+0x9c08>
   1ac8c:	sub	r3, sl, fp
   1ac90:	cmp	r3, #5
   1ac94:	bgt	1d13c <_start@@Base+0xa738>
   1ac98:	mov	r1, fp
   1ac9c:	mov	r2, sl
   1aca0:	mov	r0, r9
   1aca4:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1aca8:	mov	fp, r0
   1acac:	b	19a44 <_start@@Base+0x7040>
   1acb0:	sub	r3, sl, r4
   1acb4:	cmp	r3, #7
   1acb8:	bgt	1c9f8 <_start@@Base+0x9ff4>
   1acbc:	mov	r1, r4
   1acc0:	mov	r2, sl
   1acc4:	mov	r0, r9
   1acc8:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1accc:	mov	fp, r0
   1acd0:	b	19a44 <_start@@Base+0x7040>
   1acd4:	mov	r1, fp
   1acd8:	mov	r2, sl
   1acdc:	mov	r0, r9
   1ace0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1ace4:	mov	fp, r0
   1ace8:	b	19a44 <_start@@Base+0x7040>
   1acec:	nop			; (mov r0, r0)
   1acf0:	strvc	r0, [r0], #-0
   1acf4:	cmnvs	pc, #461373440	; 0x1b800000
   1acf8:	andeq	r0, r0, r0
   1acfc:	strbtvc	r6, [r1], -r0, lsl #24
   1ad00:	andeq	r0, r0, r0
   1ad04:			; <UNDEFINED> instruction: 0x66666572
   1ad08:			; <UNDEFINED> instruction: 0x666e7631
   1ad0c:	teqvc	r6, #1593835520	; 0x5f000000
   1ad10:	strvc	r0, [r0], #-0
   1ad14:	svcpl	0x00746573
   1ad18:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1ad1c:			; <UNDEFINED> instruction: 0xffff0000
   1ad20:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1ad24:	submi	r0, r0, r0
   1ad28:	sub	r3, sl, r4
   1ad2c:	cmp	r3, #7
   1ad30:	bgt	1cb80 <_start@@Base+0xa17c>
   1ad34:	mov	r1, r4
   1ad38:	mov	r2, sl
   1ad3c:	mov	r0, r9
   1ad40:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1ad44:	mov	fp, r0
   1ad48:	b	19a44 <_start@@Base+0x7040>
   1ad4c:	mov	r3, #5
   1ad50:	mov	r2, sl
   1ad54:	mov	r1, fp
   1ad58:	mov	r0, r9
   1ad5c:	bl	17fac <_start@@Base+0x55a8>
   1ad60:	cmp	r0, fp
   1ad64:	mov	r4, r0
   1ad68:	beq	1a364 <_start@@Base+0x7960>
   1ad6c:	mvn	r3, #-1073741824	; 0xc0000000
   1ad70:	mov	r2, #2
   1ad74:	mov	r1, #4
   1ad78:	ldr	r0, [r9]
   1ad7c:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1ad80:	cmp	r0, #0
   1ad84:	bne	1d064 <_start@@Base+0xa660>
   1ad88:	add	r3, sp, #84	; 0x54
   1ad8c:	mov	r1, r4
   1ad90:	mov	r2, sl
   1ad94:	mov	r0, r9
   1ad98:	bl	13468 <_start@@Base+0xa64>
   1ad9c:	ldr	r3, [sp, #84]	; 0x54
   1ada0:	cmp	r3, #0
   1ada4:	mov	fp, r0
   1ada8:	beq	1bc0c <_start@@Base+0x9208>
   1adac:	mov	r4, #1
   1adb0:	b	1addc <_start@@Base+0x83d8>
   1adb4:	bl	14f70 <_start@@Base+0x256c>
   1adb8:	add	r3, sp, #84	; 0x54
   1adbc:	mov	r2, sl
   1adc0:	mov	r1, r0
   1adc4:	mov	r0, r9
   1adc8:	bl	14dec <_start@@Base+0x23e8>
   1adcc:	ldr	r3, [sp, #84]	; 0x54
   1add0:	cmp	r3, #0
   1add4:	mov	fp, r0
   1add8:	beq	1bc0c <_start@@Base+0x9208>
   1addc:	mov	r1, r4
   1ade0:	ldr	r0, [r9]
   1ade4:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1ade8:	mov	r1, fp
   1adec:	mov	r2, sl
   1adf0:	subs	r3, r0, #0
   1adf4:	mov	r0, r9
   1adf8:	bne	1adb4 <_start@@Base+0x83b0>
   1adfc:	b	1a438 <_start@@Base+0x7a34>
   1ae00:	sub	r3, sl, r4
   1ae04:	cmp	r3, #1
   1ae08:	ble	1d28c <_start@@Base+0xa888>
   1ae0c:	mov	r3, #1
   1ae10:	mov	r2, sl
   1ae14:	mov	r1, r4
   1ae18:	mov	r0, r9
   1ae1c:	bl	17fac <_start@@Base+0x55a8>
   1ae20:	cmp	r4, r0
   1ae24:	mov	fp, r0
   1ae28:	beq	1d288 <_start@@Base+0xa884>
   1ae2c:	ldr	r0, [r9]
   1ae30:	bl	23e90 <flatcc_builder_start_offset_vector@@Base>
   1ae34:	cmp	r0, #0
   1ae38:	bne	1a438 <_start@@Base+0x7a34>
   1ae3c:	mov	r1, fp
   1ae40:	add	r3, sp, #84	; 0x54
   1ae44:	mov	r2, sl
   1ae48:	mov	r0, r9
   1ae4c:	bl	13468 <_start@@Base+0xa64>
   1ae50:	ldr	r3, [sp, #84]	; 0x54
   1ae54:	cmp	r3, #0
   1ae58:	mov	fp, r0
   1ae5c:	beq	1cefc <_start@@Base+0xa4f8>
   1ae60:	add	r4, sp, #88	; 0x58
   1ae64:	mov	r5, #1
   1ae68:	b	1aea8 <_start@@Base+0x84a4>
   1ae6c:	ldr	r0, [r9]
   1ae70:	bl	234f4 <flatcc_builder_extend_offset_vector@@Base>
   1ae74:	add	r3, sp, #84	; 0x54
   1ae78:	mov	r2, sl
   1ae7c:	mov	r1, fp
   1ae80:	subs	ip, r0, #0
   1ae84:	mov	r0, r9
   1ae88:	beq	1a438 <_start@@Base+0x7a34>
   1ae8c:	ldr	lr, [sp, #88]	; 0x58
   1ae90:	str	lr, [ip]
   1ae94:	bl	14dec <_start@@Base+0x23e8>
   1ae98:	ldr	r3, [sp, #84]	; 0x54
   1ae9c:	cmp	r3, #0
   1aea0:	mov	fp, r0
   1aea4:	beq	1cefc <_start@@Base+0xa4f8>
   1aea8:	mov	r1, fp
   1aeac:	mov	r3, r4
   1aeb0:	mov	r2, sl
   1aeb4:	mov	r0, r9
   1aeb8:	bl	198dc <_start@@Base+0x6ed8>
   1aebc:	ldr	r3, [sp, #88]	; 0x58
   1aec0:	mov	r1, r5
   1aec4:	cmp	r3, #0
   1aec8:	mov	fp, r0
   1aecc:	bne	1ae6c <_start@@Base+0x8468>
   1aed0:	b	1a438 <_start@@Base+0x7a34>
   1aed4:	mov	r3, #2
   1aed8:	mov	r2, sl
   1aedc:	mov	r1, fp
   1aee0:	mov	r0, r9
   1aee4:	bl	17fac <_start@@Base+0x55a8>
   1aee8:	cmp	r0, fp
   1aeec:	mov	r5, r0
   1aef0:	beq	19fec <_start@@Base+0x75e8>
   1aef4:	add	r4, sp, #120	; 0x78
   1aef8:	mov	r3, #0
   1aefc:	strh	r3, [r4, #-8]!
   1af00:	mov	r1, r0
   1af04:	mov	r2, sl
   1af08:	mov	r3, r4
   1af0c:	mov	r0, r9
   1af10:	bl	13220 <_start@@Base+0x81c>
   1af14:	cmp	r5, r0
   1af18:	mov	fp, r0
   1af1c:	beq	1d25c <_start@@Base+0xa858>
   1af20:	ldrsh	r3, [sp, #112]	; 0x70
   1af24:	cmp	r3, #100	; 0x64
   1af28:	bne	1af38 <_start@@Base+0x8534>
   1af2c:	ldr	r3, [r9, #8]
   1af30:	tst	r3, #2
   1af34:	beq	19a44 <_start@@Base+0x7040>
   1af38:	mov	r3, #2
   1af3c:	mov	r2, r3
   1af40:	mov	r1, r3
   1af44:	ldr	r0, [r9]
   1af48:	bl	26644 <flatcc_builder_table_add@@Base>
   1af4c:	cmp	r0, #0
   1af50:	beq	1a438 <_start@@Base+0x7a34>
   1af54:	ldrsh	r3, [sp, #112]	; 0x70
   1af58:	strh	r3, [r0]
   1af5c:	b	19a44 <_start@@Base+0x7040>
   1af60:	mov	r3, #6
   1af64:	mov	r2, sl
   1af68:	mov	r1, fp
   1af6c:	mov	r0, r9
   1af70:	bl	17fac <_start@@Base+0x55a8>
   1af74:	cmp	r0, fp
   1af78:	mov	r5, r0
   1af7c:	beq	1a760 <_start@@Base+0x7d5c>
   1af80:	add	r4, sp, #120	; 0x78
   1af84:	mov	r3, #0
   1af88:	mov	r1, r0
   1af8c:	str	r3, [r4, #-8]!
   1af90:	mov	r2, sl
   1af94:	mov	r0, r9
   1af98:	mov	r3, r4
   1af9c:	bl	2a3d8 <flatcc_json_parser_float@@Base>
   1afa0:	cmp	r0, r5
   1afa4:	mov	fp, r0
   1afa8:	beq	1d4c8 <_start@@Base+0xaac4>
   1afac:	vldr	s15, [pc, #-656]	; 1ad24 <_start@@Base+0x8320>
   1afb0:	vldr	s14, [sp, #112]	; 0x70
   1afb4:	vcmp.f32	s14, s15
   1afb8:	vmrs	APSR_nzcv, fpscr
   1afbc:	bne	1afcc <_start@@Base+0x85c8>
   1afc0:	ldr	r3, [r9, #8]
   1afc4:	tst	r3, #2
   1afc8:	beq	19a44 <_start@@Base+0x7040>
   1afcc:	mov	r3, #4
   1afd0:	mov	r2, r3
   1afd4:	mov	r1, #26
   1afd8:	ldr	r0, [r9]
   1afdc:	bl	26644 <flatcc_builder_table_add@@Base>
   1afe0:	cmp	r0, #0
   1afe4:	beq	1a438 <_start@@Base+0x7a34>
   1afe8:	ldr	r3, [sp, #112]	; 0x70
   1afec:	str	r3, [r0]
   1aff0:	b	19a44 <_start@@Base+0x7040>
   1aff4:	mov	r3, #2
   1aff8:	mov	r2, sl
   1affc:	mov	r1, r4
   1b000:	mov	r0, r9
   1b004:	bl	17fac <_start@@Base+0x55a8>
   1b008:	cmp	r4, r0
   1b00c:	mov	fp, r0
   1b010:	beq	1d8ec <_start@@Base+0xaee8>
   1b014:	mov	r3, #0
   1b018:	mov	r1, #3
   1b01c:	ldr	r0, [r9]
   1b020:	str	r3, [sp, #88]	; 0x58
   1b024:	bl	244d8 <flatcc_builder_start_table@@Base>
   1b028:	cmp	r0, #0
   1b02c:	bne	1b2c4 <_start@@Base+0x88c0>
   1b030:	mov	r1, fp
   1b034:	add	r3, sp, #104	; 0x68
   1b038:	mov	r2, sl
   1b03c:	mov	r0, r9
   1b040:	bl	133b4 <_start@@Base+0x9b0>
   1b044:	ldr	r3, [sp, #104]	; 0x68
   1b048:	cmp	r3, #0
   1b04c:	mov	fp, r0
   1b050:	beq	1c840 <_start@@Base+0x9e3c>
   1b054:	add	r7, pc, #940	; 0x3ac
   1b058:	ldrd	r6, [r7]
   1b05c:	mov	r8, #5
   1b060:	b	1b0c0 <_start@@Base+0x86bc>
   1b064:	add	r3, pc, #932	; 0x3a4
   1b068:	ldrd	r2, [r3]
   1b06c:	mov	r0, #0
   1b070:	cmp	r1, r3
   1b074:	cmpeq	r0, r2
   1b078:	bne	1b088 <_start@@Base+0x8684>
   1b07c:	sub	r3, sl, fp
   1b080:	cmp	r3, #4
   1b084:	bgt	1b764 <_start@@Base+0x8d60>
   1b088:	mov	r1, fp
   1b08c:	mov	r2, sl
   1b090:	mov	r0, r9
   1b094:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1b098:	mov	fp, r0
   1b09c:	mov	r1, fp
   1b0a0:	add	r3, sp, #104	; 0x68
   1b0a4:	mov	r2, sl
   1b0a8:	mov	r0, r9
   1b0ac:	bl	14c68 <_start@@Base+0x2264>
   1b0b0:	ldr	r3, [sp, #104]	; 0x68
   1b0b4:	cmp	r3, #0
   1b0b8:	mov	fp, r0
   1b0bc:	beq	1c840 <_start@@Base+0x9e3c>
   1b0c0:	cmp	sl, fp
   1b0c4:	beq	1b0f0 <_start@@Base+0x86ec>
   1b0c8:	ldrb	r3, [fp]
   1b0cc:	cmp	r3, #34	; 0x22
   1b0d0:	moveq	r3, #0
   1b0d4:	addeq	fp, fp, #1
   1b0d8:	streq	r3, [r9, #12]
   1b0dc:	beq	1b0f0 <_start@@Base+0x86ec>
   1b0e0:	cmp	r3, #46	; 0x2e
   1b0e4:	movne	r3, #1
   1b0e8:	strne	r3, [r9, #12]
   1b0ec:	beq	1ba78 <_start@@Base+0x9074>
   1b0f0:	mov	r1, sl
   1b0f4:	mov	r0, fp
   1b0f8:	bl	12b30 <_start@@Base+0x12c>
   1b0fc:	cmp	r1, r7
   1b100:	cmpeq	r0, r6
   1b104:	bls	1b064 <_start@@Base+0x8660>
   1b108:	add	r5, pc, #776	; 0x308
   1b10c:	ldrd	r4, [r5]
   1b110:	bic	r2, r0, #255	; 0xff
   1b114:	cmp	r1, r5
   1b118:	cmpeq	r2, r4
   1b11c:	beq	1b25c <_start@@Base+0x8858>
   1b120:	ldr	r2, [pc, #772]	; 1b42c <_start@@Base+0x8a28>
   1b124:	mvn	r3, #0
   1b128:	and	r2, r2, r0
   1b12c:	and	r3, r3, r1
   1b130:	mov	r0, r2
   1b134:	mov	r1, r3
   1b138:	add	r3, pc, #736	; 0x2e0
   1b13c:	ldrd	r2, [r3]
   1b140:	cmp	r1, r3
   1b144:	cmpeq	r0, r2
   1b148:	bne	1b088 <_start@@Base+0x8684>
   1b14c:	sub	r3, sl, fp
   1b150:	cmp	r3, #6
   1b154:	ble	1b088 <_start@@Base+0x8684>
   1b158:	mov	r1, fp
   1b15c:	mov	r3, #6
   1b160:	mov	r2, sl
   1b164:	mov	r0, r9
   1b168:	bl	17fac <_start@@Base+0x55a8>
   1b16c:	cmp	r0, fp
   1b170:	mov	r1, r0
   1b174:	beq	1b088 <_start@@Base+0x8684>
   1b178:	mov	r3, #0
   1b17c:	str	r3, [sp]
   1b180:	mov	r2, sl
   1b184:	add	r3, sp, #112	; 0x70
   1b188:	mov	r0, r9
   1b18c:	bl	2c48c <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b190:	ldr	r3, [sp, #112]	; 0x70
   1b194:	cmp	r3, #0
   1b198:	mov	fp, r0
   1b19c:	beq	1b2c4 <_start@@Base+0x88c0>
   1b1a0:	mov	r1, #2
   1b1a4:	ldr	r0, [r9]
   1b1a8:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1b1ac:	cmp	r0, #0
   1b1b0:	beq	1b2c4 <_start@@Base+0x88c0>
   1b1b4:	ldr	r3, [sp, #112]	; 0x70
   1b1b8:	str	r3, [r0]
   1b1bc:	b	1b09c <_start@@Base+0x8698>
   1b1c0:	sub	r3, sl, fp
   1b1c4:	cmp	r3, #3
   1b1c8:	ble	1a944 <_start@@Base+0x7f40>
   1b1cc:	mov	r3, #3
   1b1d0:	mov	r2, sl
   1b1d4:	mov	r1, fp
   1b1d8:	mov	r0, r9
   1b1dc:	bl	17fac <_start@@Base+0x55a8>
   1b1e0:	cmp	r0, fp
   1b1e4:	mov	r5, r0
   1b1e8:	beq	1a944 <_start@@Base+0x7f40>
   1b1ec:	mov	r0, #0
   1b1f0:	mov	r1, #0
   1b1f4:	add	r4, sp, #120	; 0x78
   1b1f8:	mov	r2, sl
   1b1fc:	strd	r0, [r4, #-8]!
   1b200:	mov	r1, r5
   1b204:	mov	r3, r4
   1b208:	mov	r0, r9
   1b20c:	bl	132ec <_start@@Base+0x8e8>
   1b210:	cmp	r5, r0
   1b214:	mov	fp, r0
   1b218:	beq	1d19c <_start@@Base+0xa798>
   1b21c:	ldrd	r2, [sp, #112]	; 0x70
   1b220:	orrs	r3, r2, r3
   1b224:	bne	1b234 <_start@@Base+0x8830>
   1b228:	ldr	r3, [r9, #8]
   1b22c:	tst	r3, #2
   1b230:	beq	1a958 <_start@@Base+0x7f54>
   1b234:	mov	r3, #8
   1b238:	mov	r2, r3
   1b23c:	mov	r1, r6
   1b240:	ldr	r0, [r9]
   1b244:	bl	26644 <flatcc_builder_table_add@@Base>
   1b248:	cmp	r0, #0
   1b24c:	beq	1ba94 <_start@@Base+0x9090>
   1b250:	ldrd	r2, [sp, #112]	; 0x70
   1b254:	strd	r2, [r0]
   1b258:	b	1a958 <_start@@Base+0x7f54>
   1b25c:	sub	r3, sl, fp
   1b260:	cmp	r3, #7
   1b264:	ble	1b088 <_start@@Base+0x8684>
   1b268:	mov	r1, fp
   1b26c:	mov	r3, #7
   1b270:	mov	r2, sl
   1b274:	mov	r0, r9
   1b278:	bl	17fac <_start@@Base+0x55a8>
   1b27c:	cmp	r0, fp
   1b280:	mov	r1, r0
   1b284:	beq	1b088 <_start@@Base+0x8684>
   1b288:	mov	r3, #1
   1b28c:	str	r3, [sp]
   1b290:	mov	r2, sl
   1b294:	add	r3, sp, #112	; 0x70
   1b298:	mov	r0, r9
   1b29c:	bl	2c48c <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b2a0:	ldr	r3, [sp, #112]	; 0x70
   1b2a4:	cmp	r3, #0
   1b2a8:	mov	fp, r0
   1b2ac:	beq	1b2c4 <_start@@Base+0x88c0>
   1b2b0:	mov	r1, #1
   1b2b4:	ldr	r0, [r9]
   1b2b8:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1b2bc:	cmp	r0, #0
   1b2c0:	bne	1b1b4 <_start@@Base+0x87b0>
   1b2c4:	mov	r1, fp
   1b2c8:	mov	r3, #33	; 0x21
   1b2cc:	mov	r2, sl
   1b2d0:	mov	r0, r9
   1b2d4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1b2d8:	ldr	r3, [sp, #88]	; 0x58
   1b2dc:	cmp	r3, #0
   1b2e0:	mov	fp, r0
   1b2e4:	beq	1a438 <_start@@Base+0x7a34>
   1b2e8:	mov	r1, #35	; 0x23
   1b2ec:	ldr	r0, [r9]
   1b2f0:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1b2f4:	cmp	r0, #0
   1b2f8:	beq	1a438 <_start@@Base+0x7a34>
   1b2fc:	ldr	r3, [sp, #88]	; 0x58
   1b300:	str	r3, [r0]
   1b304:	b	19a44 <_start@@Base+0x7040>
   1b308:	ldr	r0, [r9]
   1b30c:	bl	25218 <flatcc_builder_end_vector@@Base>
   1b310:	cmp	r0, #0
   1b314:	str	r0, [sp, #88]	; 0x58
   1b318:	beq	1a438 <_start@@Base+0x7a34>
   1b31c:	mov	r1, #9
   1b320:	ldr	r0, [r9]
   1b324:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1b328:	cmp	r0, #0
   1b32c:	beq	1a438 <_start@@Base+0x7a34>
   1b330:	ldr	r3, [sp, #88]	; 0x58
   1b334:	str	r3, [r0]
   1b338:	b	19a44 <_start@@Base+0x7040>
   1b33c:	mov	r3, r8
   1b340:	mov	r2, sl
   1b344:	mov	r1, fp
   1b348:	mov	r0, r9
   1b34c:	bl	17fac <_start@@Base+0x55a8>
   1b350:	cmp	r0, fp
   1b354:	mov	r4, r0
   1b358:	beq	1a944 <_start@@Base+0x7f40>
   1b35c:	mov	r2, #0
   1b360:	mov	r3, #0
   1b364:	cmp	sl, r0
   1b368:	strh	r7, [sp, #82]	; 0x52
   1b36c:	str	r7, [sp, #104]	; 0x68
   1b370:	strd	r2, [sp, #112]	; 0x70
   1b374:	beq	1c504 <_start@@Base+0x9b00>
   1b378:	add	r3, sp, #112	; 0x70
   1b37c:	str	r3, [sp]
   1b380:	mov	r1, r0
   1b384:	add	r3, sp, #104	; 0x68
   1b388:	mov	r2, sl
   1b38c:	mov	r0, r9
   1b390:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1b394:	cmp	r4, r0
   1b398:	mov	fp, r0
   1b39c:	beq	1c500 <_start@@Base+0x9afc>
   1b3a0:	ldr	r3, [sp, #104]	; 0x68
   1b3a4:	cmp	r3, #0
   1b3a8:	bne	1c624 <_start@@Base+0x9c20>
   1b3ac:	ldrd	r2, [sp, #112]	; 0x70
   1b3b0:	ldr	r0, [pc, #112]	; 1b428 <_start@@Base+0x8a24>
   1b3b4:	mov	r1, #0
   1b3b8:	cmp	r3, r1
   1b3bc:	cmpeq	r2, r0
   1b3c0:	uxthls	r2, r2
   1b3c4:	strhls	r2, [sp, #82]	; 0x52
   1b3c8:	bhi	1c77c <_start@@Base+0x9d78>
   1b3cc:	cmp	r2, #0
   1b3d0:	bne	1b3e0 <_start@@Base+0x89dc>
   1b3d4:	ldr	r3, [r9, #8]
   1b3d8:	tst	r3, #2
   1b3dc:	beq	1a958 <_start@@Base+0x7f54>
   1b3e0:	mov	r3, #2
   1b3e4:	mov	r2, r3
   1b3e8:	mov	r1, r3
   1b3ec:	ldr	r0, [r9]
   1b3f0:	bl	26644 <flatcc_builder_table_add@@Base>
   1b3f4:	cmp	r0, #0
   1b3f8:	beq	1ba9c <_start@@Base+0x9098>
   1b3fc:	ldrh	r3, [sp, #82]	; 0x52
   1b400:	strh	r3, [r0]
   1b404:	b	1a958 <_start@@Base+0x7f54>
   1b408:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1b40c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b410:	andeq	r0, r0, r0
   1b414:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1b418:	cmnvs	r4, r0, lsl #2
   1b41c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1b420:	strbvs	r0, [r4, #-0]!
   1b424:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b428:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1b42c:			; <UNDEFINED> instruction: 0xffff0000
   1b430:	ldrvs	r0, [r2, -r0]!
   1b434:	andeq	r1, r4, ip, lsl #3
   1b438:	andeq	lr, r2, r8, lsr r9
   1b43c:	andeq	lr, r2, r0, asr #18
   1b440:	andeq	r1, r4, ip, lsl #2
   1b444:	andeq	r1, r4, r4, lsr #2
   1b448:	andeq	sp, r1, ip, ror #18
   1b44c:	andeq	r1, r4, r0, ror r1
   1b450:	mov	r1, fp
   1b454:	mov	r3, #5
   1b458:	mov	r2, sl
   1b45c:	mov	r0, r9
   1b460:	bl	17fac <_start@@Base+0x55a8>
   1b464:	cmp	r0, fp
   1b468:	mov	r1, r0
   1b46c:	beq	1a4a4 <_start@@Base+0x7aa0>
   1b470:	add	r3, sp, #88	; 0x58
   1b474:	mov	r2, sl
   1b478:	mov	r0, r9
   1b47c:	bl	198dc <_start@@Base+0x6ed8>
   1b480:	ldr	r3, [sp, #88]	; 0x58
   1b484:	cmp	r3, #0
   1b488:	mov	fp, r0
   1b48c:	beq	1a438 <_start@@Base+0x7a34>
   1b490:	mov	r1, #12
   1b494:	ldr	r0, [r9]
   1b498:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1b49c:	cmp	r0, #0
   1b4a0:	beq	1a438 <_start@@Base+0x7a34>
   1b4a4:	ldr	r3, [sp, #88]	; 0x58
   1b4a8:	str	r3, [r0]
   1b4ac:	b	19a44 <_start@@Base+0x7040>
   1b4b0:	add	r4, fp, #16
   1b4b4:	mov	r0, r4
   1b4b8:	mov	r1, sl
   1b4bc:	bl	12b30 <_start@@Base+0x12c>
   1b4c0:	ldr	r3, [pc, #-156]	; 1b42c <_start@@Base+0x8a28>
   1b4c4:	mov	r2, #0
   1b4c8:	and	r3, r3, r1
   1b4cc:	mov	r7, r1
   1b4d0:	ldr	r1, [pc, #-168]	; 1b430 <_start@@Base+0x8a2c>
   1b4d4:	and	r2, r2, r0
   1b4d8:	cmp	r3, r1
   1b4dc:	mov	r0, #0
   1b4e0:	cmpeq	r2, r0
   1b4e4:	beq	1c864 <_start@@Base+0x9e60>
   1b4e8:	and	r7, r7, #-16777216	; 0xff000000
   1b4ec:	mov	r6, #0
   1b4f0:	cmp	r7, #1728053248	; 0x67000000
   1b4f4:	cmpeq	r6, #0
   1b4f8:	bne	1c648 <_start@@Base+0x9c44>
   1b4fc:	sub	r3, sl, r4
   1b500:	cmp	r3, #1
   1b504:	ble	1d620 <_start@@Base+0xac1c>
   1b508:	mov	r3, #1
   1b50c:	mov	r2, sl
   1b510:	mov	r1, r4
   1b514:	mov	r0, r9
   1b518:	bl	17fac <_start@@Base+0x55a8>
   1b51c:	cmp	r4, r0
   1b520:	mov	fp, r0
   1b524:	beq	1d61c <_start@@Base+0xac18>
   1b528:	ldr	r0, [r9]
   1b52c:	bl	23e90 <flatcc_builder_start_offset_vector@@Base>
   1b530:	cmp	r0, #0
   1b534:	bne	1a438 <_start@@Base+0x7a34>
   1b538:	mov	r1, fp
   1b53c:	add	r3, sp, #84	; 0x54
   1b540:	mov	r2, sl
   1b544:	mov	r0, r9
   1b548:	bl	13468 <_start@@Base+0xa64>
   1b54c:	ldr	r3, [sp, #84]	; 0x54
   1b550:	cmp	r3, #0
   1b554:	mov	fp, r0
   1b558:	beq	1d228 <_start@@Base+0xa824>
   1b55c:	add	r4, sp, #88	; 0x58
   1b560:	mov	r5, #1
   1b564:	b	1b5a4 <_start@@Base+0x8ba0>
   1b568:	ldr	r0, [r9]
   1b56c:	bl	234f4 <flatcc_builder_extend_offset_vector@@Base>
   1b570:	add	r3, sp, #84	; 0x54
   1b574:	mov	r2, sl
   1b578:	mov	r1, fp
   1b57c:	subs	ip, r0, #0
   1b580:	mov	r0, r9
   1b584:	beq	1a438 <_start@@Base+0x7a34>
   1b588:	ldr	lr, [sp, #88]	; 0x58
   1b58c:	str	lr, [ip]
   1b590:	bl	14dec <_start@@Base+0x23e8>
   1b594:	ldr	r3, [sp, #84]	; 0x54
   1b598:	cmp	r3, #0
   1b59c:	mov	fp, r0
   1b5a0:	beq	1d228 <_start@@Base+0xa824>
   1b5a4:	mov	r1, fp
   1b5a8:	mov	r3, r4
   1b5ac:	mov	r2, sl
   1b5b0:	mov	r0, r9
   1b5b4:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   1b5b8:	ldr	r3, [sp, #88]	; 0x58
   1b5bc:	mov	r1, r5
   1b5c0:	cmp	r3, #0
   1b5c4:	mov	fp, r0
   1b5c8:	bne	1b568 <_start@@Base+0x8b64>
   1b5cc:	b	1a438 <_start@@Base+0x7a34>
   1b5d0:	sub	r3, sl, r4
   1b5d4:	cmp	r3, #8
   1b5d8:	ble	1a6d8 <_start@@Base+0x7cd4>
   1b5dc:	mov	r3, #8
   1b5e0:	mov	r2, sl
   1b5e4:	mov	r1, r4
   1b5e8:	mov	r0, r9
   1b5ec:	bl	17fac <_start@@Base+0x55a8>
   1b5f0:	cmp	r4, r0
   1b5f4:	mov	fp, r0
   1b5f8:	beq	1a6d4 <_start@@Base+0x7cd0>
   1b5fc:	mov	r2, #1
   1b600:	mov	r1, r2
   1b604:	mvn	r3, #0
   1b608:	ldr	r0, [r9]
   1b60c:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1b610:	subs	r5, r0, #0
   1b614:	bne	1a438 <_start@@Base+0x7a34>
   1b618:	mov	r1, fp
   1b61c:	add	r3, sp, #84	; 0x54
   1b620:	mov	r2, sl
   1b624:	mov	r0, r9
   1b628:	bl	13468 <_start@@Base+0xa64>
   1b62c:	ldr	r3, [sp, #84]	; 0x54
   1b630:	cmp	r3, #0
   1b634:	mov	fp, r0
   1b638:	beq	1c68c <_start@@Base+0x9c88>
   1b63c:	ldr	r7, [pc, #-520]	; 1b43c <_start@@Base+0x8a38>
   1b640:	mov	r6, #1
   1b644:	b	1b69c <_start@@Base+0x8c98>
   1b648:	add	r3, sp, #112	; 0x70
   1b64c:	mov	r1, fp
   1b650:	mov	r2, sl
   1b654:	mov	r0, r9
   1b658:	bl	12fe8 <_start@@Base+0x5e4>
   1b65c:	ldrb	r3, [sp, #112]	; 0x70
   1b660:	adds	r3, r3, #0
   1b664:	movne	r3, #1
   1b668:	strb	r3, [sp, #104]	; 0x68
   1b66c:	mov	r1, r0
   1b670:	cmp	r1, fp
   1b674:	beq	1b718 <_start@@Base+0x8d14>
   1b678:	strb	r3, [r4]
   1b67c:	mov	r2, sl
   1b680:	add	r3, sp, #84	; 0x54
   1b684:	mov	r0, r9
   1b688:	bl	14dec <_start@@Base+0x23e8>
   1b68c:	ldr	r3, [sp, #84]	; 0x54
   1b690:	cmp	r3, #0
   1b694:	mov	fp, r0
   1b698:	beq	1c68c <_start@@Base+0x9c88>
   1b69c:	mov	r1, r6
   1b6a0:	ldr	r0, [r9]
   1b6a4:	strb	r5, [sp, #104]	; 0x68
   1b6a8:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1b6ac:	subs	r4, r0, #0
   1b6b0:	beq	1a438 <_start@@Base+0x7a34>
   1b6b4:	sub	r8, sl, fp
   1b6b8:	cmp	r8, #3
   1b6bc:	ble	1b648 <_start@@Base+0x8c44>
   1b6c0:	mov	r2, #4
   1b6c4:	ldr	r1, [pc, #-660]	; 1b438 <_start@@Base+0x8a34>
   1b6c8:	mov	r0, fp
   1b6cc:	bl	125c4 <memcmp@plt>
   1b6d0:	cmp	r0, #0
   1b6d4:	beq	1b708 <_start@@Base+0x8d04>
   1b6d8:	cmp	r8, #4
   1b6dc:	beq	1b648 <_start@@Base+0x8c44>
   1b6e0:	mov	r2, #5
   1b6e4:	mov	r1, r7
   1b6e8:	mov	r0, fp
   1b6ec:	bl	125c4 <memcmp@plt>
   1b6f0:	cmp	r0, #0
   1b6f4:	bne	1b648 <_start@@Base+0x8c44>
   1b6f8:	strb	r0, [sp, #104]	; 0x68
   1b6fc:	add	r1, fp, #5
   1b700:	mov	r3, r5
   1b704:	b	1b670 <_start@@Base+0x8c6c>
   1b708:	strb	r6, [sp, #104]	; 0x68
   1b70c:	add	r1, fp, #4
   1b710:	mov	r3, #1
   1b714:	b	1b670 <_start@@Base+0x8c6c>
   1b718:	add	r3, sp, #104	; 0x68
   1b71c:	str	r3, [sp]
   1b720:	mov	r2, sl
   1b724:	ldr	r3, [pc, #-760]	; 1b434 <_start@@Base+0x8a30>
   1b728:	mov	r0, r9
   1b72c:	bl	13928 <_start@@Base+0xf24>
   1b730:	cmp	sl, r0
   1b734:	cmpne	r0, fp
   1b738:	mov	r1, r0
   1b73c:	beq	1d6b8 <_start@@Base+0xacb4>
   1b740:	ldrb	r3, [sp, #104]	; 0x68
   1b744:	b	1b678 <_start@@Base+0x8c74>
   1b748:	mov	r1, fp
   1b74c:	mov	r3, r8
   1b750:	mov	r2, sl
   1b754:	mov	r0, r9
   1b758:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1b75c:	mov	fp, r0
   1b760:	b	1a9a4 <_start@@Base+0x7fa0>
   1b764:	mov	r1, fp
   1b768:	mov	r3, #4
   1b76c:	mov	r2, sl
   1b770:	mov	r0, r9
   1b774:	bl	17fac <_start@@Base+0x55a8>
   1b778:	cmp	r0, fp
   1b77c:	mov	r1, r0
   1b780:	beq	1b088 <_start@@Base+0x8684>
   1b784:	mov	r5, #0
   1b788:	add	r3, sp, #112	; 0x70
   1b78c:	str	r5, [sp]
   1b790:	mov	r2, sl
   1b794:	mov	r0, r9
   1b798:	bl	2c48c <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b79c:	ldr	r3, [sp, #112]	; 0x70
   1b7a0:	cmp	r3, r5
   1b7a4:	mov	fp, r0
   1b7a8:	beq	1b2c4 <_start@@Base+0x88c0>
   1b7ac:	mov	r1, r5
   1b7b0:	ldr	r0, [r9]
   1b7b4:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1b7b8:	cmp	r0, #0
   1b7bc:	bne	1b1b4 <_start@@Base+0x87b0>
   1b7c0:	b	1b2c4 <_start@@Base+0x88c0>
   1b7c4:	mov	r3, #8
   1b7c8:	mov	r2, sl
   1b7cc:	mov	r1, fp
   1b7d0:	mov	r0, r9
   1b7d4:	bl	17fac <_start@@Base+0x55a8>
   1b7d8:	cmp	r0, fp
   1b7dc:	mov	r4, r0
   1b7e0:	beq	1a138 <_start@@Base+0x7734>
   1b7e4:	sub	r5, sl, r0
   1b7e8:	mov	r3, #0
   1b7ec:	cmp	r5, #3
   1b7f0:	strb	r3, [sp, #100]	; 0x64
   1b7f4:	ble	1b830 <_start@@Base+0x8e2c>
   1b7f8:	mov	r2, #4
   1b7fc:	ldr	r1, [pc, #-972]	; 1b438 <_start@@Base+0x8a34>
   1b800:	bl	125c4 <memcmp@plt>
   1b804:	cmp	r0, #0
   1b808:	beq	1c538 <_start@@Base+0x9b34>
   1b80c:	cmp	r5, #4
   1b810:	beq	1b830 <_start@@Base+0x8e2c>
   1b814:	mov	r2, #5
   1b818:	ldr	r1, [pc, #-996]	; 1b43c <_start@@Base+0x8a38>
   1b81c:	mov	r0, r4
   1b820:	bl	125c4 <memcmp@plt>
   1b824:	cmp	r0, #0
   1b828:	addeq	fp, r4, #5
   1b82c:	beq	1b8b4 <_start@@Base+0x8eb0>
   1b830:	mov	r0, #0
   1b834:	mov	r1, #0
   1b838:	mov	r3, #0
   1b83c:	cmp	sl, r4
   1b840:	strd	r0, [sp, #112]	; 0x70
   1b844:	str	r3, [sp, #104]	; 0x68
   1b848:	beq	1c4ac <_start@@Base+0x9aa8>
   1b84c:	add	r3, sp, #112	; 0x70
   1b850:	str	r3, [sp]
   1b854:	mov	r2, sl
   1b858:	add	r3, sp, #104	; 0x68
   1b85c:	mov	r1, r4
   1b860:	mov	r0, r9
   1b864:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1b868:	cmp	r4, r0
   1b86c:	mov	fp, r0
   1b870:	beq	1c4ac <_start@@Base+0x9aa8>
   1b874:	ldr	r3, [sp, #104]	; 0x68
   1b878:	cmp	r3, #0
   1b87c:	bne	1cb54 <_start@@Base+0xa150>
   1b880:	ldrd	r2, [sp, #112]	; 0x70
   1b884:	cmp	r3, #0
   1b888:	cmpeq	r2, #255	; 0xff
   1b88c:	bhi	1d078 <_start@@Base+0xa674>
   1b890:	tst	r2, #255	; 0xff
   1b894:	movne	r3, #1
   1b898:	moveq	r3, #0
   1b89c:	strb	r3, [sp, #100]	; 0x64
   1b8a0:	cmp	r3, #1
   1b8a4:	bne	1b8b4 <_start@@Base+0x8eb0>
   1b8a8:	ldr	r3, [r9, #8]
   1b8ac:	tst	r3, #2
   1b8b0:	beq	19a44 <_start@@Base+0x7040>
   1b8b4:	mov	r3, #1
   1b8b8:	mov	r2, r3
   1b8bc:	mov	r1, #15
   1b8c0:	ldr	r0, [r9]
   1b8c4:	bl	26644 <flatcc_builder_table_add@@Base>
   1b8c8:	cmp	r0, #0
   1b8cc:	beq	1a438 <_start@@Base+0x7a34>
   1b8d0:	ldrb	r3, [sp, #100]	; 0x64
   1b8d4:	strb	r3, [r0]
   1b8d8:	b	19a44 <_start@@Base+0x7040>
   1b8dc:	mov	r3, #4
   1b8e0:	mov	r2, sl
   1b8e4:	mov	r1, fp
   1b8e8:	mov	r0, r9
   1b8ec:	bl	17fac <_start@@Base+0x55a8>
   1b8f0:	cmp	r0, fp
   1b8f4:	mov	r4, r0
   1b8f8:	beq	1a278 <_start@@Base+0x7874>
   1b8fc:	mov	r2, #1
   1b900:	mov	r1, r2
   1b904:	mvn	r3, #0
   1b908:	ldr	r0, [r9]
   1b90c:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1b910:	subs	r6, r0, #0
   1b914:	bne	1d064 <_start@@Base+0xa660>
   1b918:	add	r3, sp, #84	; 0x54
   1b91c:	mov	r1, r4
   1b920:	mov	r2, sl
   1b924:	mov	r0, r9
   1b928:	bl	13468 <_start@@Base+0xa64>
   1b92c:	ldr	r3, [sp, #84]	; 0x54
   1b930:	cmp	r3, #0
   1b934:	mov	fp, r0
   1b938:	beq	1b9e4 <_start@@Base+0x8fe0>
   1b93c:	ldr	r8, [pc, #-1284]	; 1b440 <_start@@Base+0x8a3c>
   1b940:	mov	r7, #1
   1b944:	add	r5, sp, #112	; 0x70
   1b948:	b	1b978 <_start@@Base+0x8f74>
   1b94c:	ldrb	r2, [sp, #112]	; 0x70
   1b950:	mov	r1, r0
   1b954:	add	r3, sp, #84	; 0x54
   1b958:	strb	r2, [r4]
   1b95c:	mov	r0, r9
   1b960:	mov	r2, sl
   1b964:	bl	14dec <_start@@Base+0x23e8>
   1b968:	ldr	r3, [sp, #84]	; 0x54
   1b96c:	cmp	r3, #0
   1b970:	mov	fp, r0
   1b974:	beq	1b9e4 <_start@@Base+0x8fe0>
   1b978:	mov	r1, r7
   1b97c:	ldr	r0, [r9]
   1b980:	strb	r6, [sp, #112]	; 0x70
   1b984:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1b988:	mov	r1, fp
   1b98c:	mov	r3, r5
   1b990:	mov	r2, sl
   1b994:	subs	r4, r0, #0
   1b998:	mov	r0, r9
   1b99c:	beq	1a438 <_start@@Base+0x7a34>
   1b9a0:	bl	12fe8 <_start@@Base+0x5e4>
   1b9a4:	cmp	r0, fp
   1b9a8:	bne	1b94c <_start@@Base+0x8f48>
   1b9ac:	str	r5, [sp]
   1b9b0:	mov	r3, r8
   1b9b4:	mov	r2, sl
   1b9b8:	mov	r1, fp
   1b9bc:	mov	r0, r9
   1b9c0:	bl	141c8 <_start@@Base+0x17c4>
   1b9c4:	cmp	sl, r0
   1b9c8:	cmpne	r0, fp
   1b9cc:	bne	1b94c <_start@@Base+0x8f48>
   1b9d0:	mov	r3, sl
   1b9d4:	mov	fp, r0
   1b9d8:	mov	sl, r9
   1b9dc:	mov	r9, r3
   1b9e0:	b	19aac <_start@@Base+0x70a8>
   1b9e4:	ldr	r0, [r9]
   1b9e8:	bl	25218 <flatcc_builder_end_vector@@Base>
   1b9ec:	cmp	r0, #0
   1b9f0:	str	r0, [sp, #88]	; 0x58
   1b9f4:	beq	1a438 <_start@@Base+0x7a34>
   1b9f8:	mov	r1, #30
   1b9fc:	ldr	r0, [r9]
   1ba00:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1ba04:	cmp	r0, #0
   1ba08:	beq	1a438 <_start@@Base+0x7a34>
   1ba0c:	ldr	r3, [sp, #88]	; 0x58
   1ba10:	str	r3, [r0]
   1ba14:	b	19a44 <_start@@Base+0x7040>
   1ba18:	mov	r1, fp
   1ba1c:	mov	r3, #4
   1ba20:	mov	r2, sl
   1ba24:	mov	r0, r9
   1ba28:	bl	17fac <_start@@Base+0x55a8>
   1ba2c:	cmp	r0, fp
   1ba30:	mov	r1, r0
   1ba34:	beq	1a254 <_start@@Base+0x7850>
   1ba38:	add	r3, sp, #88	; 0x58
   1ba3c:	mov	r2, sl
   1ba40:	mov	r0, r9
   1ba44:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   1ba48:	ldr	r3, [sp, #88]	; 0x58
   1ba4c:	cmp	r3, #0
   1ba50:	mov	fp, r0
   1ba54:	beq	1a438 <_start@@Base+0x7a34>
   1ba58:	mov	r1, #3
   1ba5c:	ldr	r0, [r9]
   1ba60:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1ba64:	cmp	r0, #0
   1ba68:	beq	1a438 <_start@@Base+0x7a34>
   1ba6c:	ldr	r3, [sp, #88]	; 0x58
   1ba70:	str	r3, [r0]
   1ba74:	b	19a44 <_start@@Base+0x7040>
   1ba78:	mov	r1, fp
   1ba7c:	mov	r3, r8
   1ba80:	mov	r2, sl
   1ba84:	mov	r0, r9
   1ba88:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1ba8c:	mov	fp, r0
   1ba90:	b	1b0f0 <_start@@Base+0x86ec>
   1ba94:	mov	r0, fp
   1ba98:	mov	fp, r0
   1ba9c:	mov	r1, fp
   1baa0:	mov	r3, #33	; 0x21
   1baa4:	mov	r2, sl
   1baa8:	mov	r0, r9
   1baac:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1bab0:	ldr	r3, [sp, #88]	; 0x58
   1bab4:	cmp	r3, #0
   1bab8:	mov	fp, r0
   1babc:	beq	1a438 <_start@@Base+0x7a34>
   1bac0:	mov	r1, #14
   1bac4:	ldr	r0, [r9]
   1bac8:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1bacc:	cmp	r0, #0
   1bad0:	beq	1a438 <_start@@Base+0x7a34>
   1bad4:	ldr	r3, [sp, #88]	; 0x58
   1bad8:	str	r3, [r0]
   1badc:	b	19a44 <_start@@Base+0x7040>
   1bae0:	add	r4, fp, #8
   1bae4:	mov	r0, r4
   1bae8:	mov	r1, sl
   1baec:	bl	12b30 <_start@@Base+0x12c>
   1baf0:	mov	r0, #0
   1baf4:	and	r1, r1, #-16777216	; 0xff000000
   1baf8:	cmp	r1, #2030043136	; 0x79000000
   1bafc:	cmpeq	r0, #0
   1bb00:	bne	1c5f4 <_start@@Base+0x9bf0>
   1bb04:	sub	r3, sl, r4
   1bb08:	cmp	r3, #1
   1bb0c:	ble	1d604 <_start@@Base+0xac00>
   1bb10:	mov	r3, #1
   1bb14:	mov	r2, sl
   1bb18:	mov	r1, r4
   1bb1c:	mov	r0, r9
   1bb20:	bl	17fac <_start@@Base+0x55a8>
   1bb24:	cmp	r4, r0
   1bb28:	mov	fp, r0
   1bb2c:	beq	1d600 <_start@@Base+0xabfc>
   1bb30:	mov	r2, #1
   1bb34:	mov	r1, r2
   1bb38:	mvn	r3, #0
   1bb3c:	ldr	r0, [r9]
   1bb40:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1bb44:	cmp	r0, #0
   1bb48:	bne	1a438 <_start@@Base+0x7a34>
   1bb4c:	mov	r1, fp
   1bb50:	add	r3, sp, #84	; 0x54
   1bb54:	mov	r2, sl
   1bb58:	mov	r0, r9
   1bb5c:	bl	13468 <_start@@Base+0xa64>
   1bb60:	ldr	r3, [sp, #84]	; 0x54
   1bb64:	cmp	r3, #0
   1bb68:	mov	fp, r0
   1bb6c:	beq	1cf30 <_start@@Base+0xa52c>
   1bb70:	ldr	r8, [pc, #-1844]	; 1b444 <_start@@Base+0x8a40>
   1bb74:	mov	r7, #0
   1bb78:	mov	r6, #1
   1bb7c:	add	r5, sp, #112	; 0x70
   1bb80:	b	1bbb0 <_start@@Base+0x91ac>
   1bb84:	ldrb	r2, [sp, #112]	; 0x70
   1bb88:	mov	r1, r0
   1bb8c:	add	r3, sp, #84	; 0x54
   1bb90:	strb	r2, [r4]
   1bb94:	mov	r0, r9
   1bb98:	mov	r2, sl
   1bb9c:	bl	14dec <_start@@Base+0x23e8>
   1bba0:	ldr	r3, [sp, #84]	; 0x54
   1bba4:	cmp	r3, #0
   1bba8:	mov	fp, r0
   1bbac:	beq	1cf30 <_start@@Base+0xa52c>
   1bbb0:	mov	r1, r6
   1bbb4:	ldr	r0, [r9]
   1bbb8:	strb	r7, [sp, #112]	; 0x70
   1bbbc:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1bbc0:	mov	r1, fp
   1bbc4:	mov	r3, r5
   1bbc8:	mov	r2, sl
   1bbcc:	subs	r4, r0, #0
   1bbd0:	mov	r0, r9
   1bbd4:	beq	1a438 <_start@@Base+0x7a34>
   1bbd8:	bl	12fe8 <_start@@Base+0x5e4>
   1bbdc:	cmp	r0, fp
   1bbe0:	bne	1bb84 <_start@@Base+0x9180>
   1bbe4:	str	r5, [sp]
   1bbe8:	mov	r3, r8
   1bbec:	mov	r2, sl
   1bbf0:	mov	r1, fp
   1bbf4:	mov	r0, r9
   1bbf8:	bl	141c8 <_start@@Base+0x17c4>
   1bbfc:	cmp	sl, r0
   1bc00:	cmpne	r0, fp
   1bc04:	bne	1bb84 <_start@@Base+0x9180>
   1bc08:	b	1b9d0 <_start@@Base+0x8fcc>
   1bc0c:	ldr	r0, [r9]
   1bc10:	bl	25218 <flatcc_builder_end_vector@@Base>
   1bc14:	cmp	r0, #0
   1bc18:	str	r0, [sp, #88]	; 0x58
   1bc1c:	beq	1a438 <_start@@Base+0x7a34>
   1bc20:	mov	r1, #31
   1bc24:	ldr	r0, [r9]
   1bc28:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1bc2c:	cmp	r0, #0
   1bc30:	beq	1a438 <_start@@Base+0x7a34>
   1bc34:	ldr	r3, [sp, #88]	; 0x58
   1bc38:	str	r3, [r0]
   1bc3c:	b	19a44 <_start@@Base+0x7040>
   1bc40:	mov	r1, fp
   1bc44:	mov	r3, #4
   1bc48:	mov	r2, sl
   1bc4c:	mov	r0, r9
   1bc50:	bl	17fac <_start@@Base+0x55a8>
   1bc54:	cmp	r0, fp
   1bc58:	mov	r1, r0
   1bc5c:	beq	19c68 <_start@@Base+0x7264>
   1bc60:	ldr	r2, [sp, #92]	; 0x5c
   1bc64:	ldr	ip, [pc, #-2084]	; 1b448 <_start@@Base+0x8a44>
   1bc68:	mov	r3, #8
   1bc6c:	str	r3, [sp]
   1bc70:	stmib	sp, {r2, ip}
   1bc74:	mov	r3, #0
   1bc78:	mov	r2, sl
   1bc7c:	mov	r0, r9
   1bc80:	bl	2cd50 <flatcc_json_parser_union@@Base>
   1bc84:	mov	fp, r0
   1bc88:	b	19a44 <_start@@Base+0x7040>
   1bc8c:	mov	r3, #3
   1bc90:	mov	r2, sl
   1bc94:	mov	r1, fp
   1bc98:	mov	r0, r9
   1bc9c:	bl	17fac <_start@@Base+0x55a8>
   1bca0:	cmp	r0, fp
   1bca4:	mov	r5, r0
   1bca8:	beq	19f90 <_start@@Base+0x758c>
   1bcac:	mov	r3, #16
   1bcb0:	mov	r2, #32
   1bcb4:	mov	r1, #0
   1bcb8:	ldr	r0, [r9]
   1bcbc:	bl	26644 <flatcc_builder_table_add@@Base>
   1bcc0:	subs	r6, r0, #0
   1bcc4:	beq	1d6a4 <_start@@Base+0xaca0>
   1bcc8:	add	r3, sp, #100	; 0x64
   1bccc:	mov	r1, r5
   1bcd0:	mov	r2, sl
   1bcd4:	mov	r0, r9
   1bcd8:	bl	133b4 <_start@@Base+0x9b0>
   1bcdc:	ldr	r3, [sp, #100]	; 0x64
   1bce0:	cmp	r3, #0
   1bce4:	mov	fp, r0
   1bce8:	beq	19a44 <_start@@Base+0x7040>
   1bcec:	str	r6, [sp, #64]	; 0x40
   1bcf0:	ldr	r8, [pc, #-2220]	; 1b44c <_start@@Base+0x8a48>
   1bcf4:	vldr	s18, [pc, #892]	; 1c078 <_start@@Base+0x9674>
   1bcf8:	vldr	d8, [pc, #848]	; 1c050 <_start@@Base+0x964c>
   1bcfc:	ldrd	r6, [sp, #72]	; 0x48
   1bd00:	b	1be8c <_start@@Base+0x9488>
   1bd04:	ldrb	r2, [fp, #7]
   1bd08:	mov	r3, #0
   1bd0c:	ldrb	r0, [fp, #6]
   1bd10:	lsr	lr, r0, #24
   1bd14:	lsl	r1, r0, #8
   1bd18:	str	lr, [sp, #60]	; 0x3c
   1bd1c:	str	r1, [sp, #56]	; 0x38
   1bd20:	ldrd	r0, [sp, #56]	; 0x38
   1bd24:	orr	r0, r0, r2
   1bd28:	orr	r1, r1, r3
   1bd2c:	mov	r2, r0
   1bd30:	mov	r3, r1
   1bd34:	ldrb	r0, [fp, #5]
   1bd38:	lsr	lr, r0, #16
   1bd3c:	lsl	r1, r0, #16
   1bd40:	str	lr, [sp, #52]	; 0x34
   1bd44:	str	r1, [sp, #48]	; 0x30
   1bd48:	ldrd	r0, [sp, #48]	; 0x30
   1bd4c:	orr	r0, r0, r2
   1bd50:	orr	r1, r1, r3
   1bd54:	mov	r2, r0
   1bd58:	mov	r3, r1
   1bd5c:	ldrb	r0, [fp, #4]
   1bd60:	lsr	lr, r0, #8
   1bd64:	lsl	r1, r0, #24
   1bd68:	str	lr, [sp, #36]	; 0x24
   1bd6c:	str	r1, [sp, #32]
   1bd70:	ldrd	r0, [sp, #32]
   1bd74:	orr	r0, r0, r2
   1bd78:	orr	r1, r1, r3
   1bd7c:	mov	r2, r0
   1bd80:	mov	r3, r1
   1bd84:	ldrb	r1, [fp, #3]
   1bd88:	str	r1, [sp, #44]	; 0x2c
   1bd8c:	mov	r1, #0
   1bd90:	str	r1, [sp, #40]	; 0x28
   1bd94:	ldrd	r0, [sp, #40]	; 0x28
   1bd98:	orr	r0, r0, r2
   1bd9c:	orr	r1, r1, r3
   1bda0:	mov	r2, r0
   1bda4:	mov	r3, r1
   1bda8:	ldrb	r0, [fp, #2]
   1bdac:	lsl	r1, r0, #8
   1bdb0:	str	r1, [sp, #28]
   1bdb4:	mov	r1, #0
   1bdb8:	str	r1, [sp, #24]
   1bdbc:	ldrd	r0, [sp, #24]
   1bdc0:	orr	r0, r0, r2
   1bdc4:	orr	r1, r1, r3
   1bdc8:	mov	r2, r0
   1bdcc:	mov	r3, r1
   1bdd0:	ldrb	r0, [fp, #1]
   1bdd4:	lsl	r1, r0, #16
   1bdd8:	str	r1, [sp, #20]
   1bddc:	mov	r1, #0
   1bde0:	str	r1, [sp, #16]
   1bde4:	ldrd	r0, [sp, #16]
   1bde8:	orr	r0, r0, r2
   1bdec:	orr	r1, r1, r3
   1bdf0:	mov	r2, r0
   1bdf4:	mov	r3, r1
   1bdf8:	ldrb	r4, [fp]
   1bdfc:	add	r1, pc, #596	; 0x254
   1be00:	ldrd	r0, [r1]
   1be04:	mov	r6, #0
   1be08:	orr	r2, r2, r6
   1be0c:	lsl	r7, r4, #24
   1be10:	orr	r3, r3, r7
   1be14:	cmp	r3, r1
   1be18:	cmpeq	r2, r0
   1be1c:	bls	1bf4c <_start@@Base+0x9548>
   1be20:	mvn	r1, #-2013265920	; 0x88000000
   1be24:	mvn	r0, #0
   1be28:	cmp	r3, r1
   1be2c:	cmpeq	r2, r0
   1be30:	bhi	1bfd8 <_start@@Base+0x95d4>
   1be34:	add	r1, pc, #548	; 0x224
   1be38:	ldrd	r0, [r1]
   1be3c:	and	r2, r2, #-16777216	; 0xff000000
   1be40:	cmp	r3, r1
   1be44:	cmpeq	r2, r0
   1be48:	bne	1be54 <_start@@Base+0x9450>
   1be4c:	cmp	ip, #5
   1be50:	bgt	1c204 <_start@@Base+0x9800>
   1be54:	mov	r1, fp
   1be58:	mov	r2, sl
   1be5c:	mov	r0, r9
   1be60:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1be64:	mov	r4, r0
   1be68:	add	r3, sp, #100	; 0x64
   1be6c:	mov	r1, r4
   1be70:	mov	r2, sl
   1be74:	mov	r0, r9
   1be78:	bl	14c68 <_start@@Base+0x2264>
   1be7c:	ldr	r3, [sp, #100]	; 0x64
   1be80:	cmp	r3, #0
   1be84:	mov	fp, r0
   1be88:	beq	1c2a4 <_start@@Base+0x98a0>
   1be8c:	cmp	sl, fp
   1be90:	beq	1c1a8 <_start@@Base+0x97a4>
   1be94:	ldrb	r3, [fp]
   1be98:	cmp	r3, #34	; 0x22
   1be9c:	moveq	r3, #0
   1bea0:	addeq	fp, fp, #1
   1bea4:	streq	r3, [r9, #12]
   1bea8:	beq	1bebc <_start@@Base+0x94b8>
   1beac:	cmp	r3, #46	; 0x2e
   1beb0:	movne	r3, #1
   1beb4:	strne	r3, [r9, #12]
   1beb8:	beq	1c1b0 <_start@@Base+0x97ac>
   1bebc:	sub	ip, sl, fp
   1bec0:	cmp	ip, #8
   1bec4:	bhi	1bd04 <_start@@Base+0x9300>
   1bec8:	sub	r3, ip, #1
   1becc:	cmp	r3, #7
   1bed0:	ldrls	pc, [pc, r3, lsl #2]
   1bed4:	b	1be54 <_start@@Base+0x9450>
   1bed8:	andeq	fp, r1, r0, asr #30
   1bedc:	andeq	fp, r1, r4, lsr pc
   1bee0:	andeq	fp, r1, r8, lsr #30
   1bee4:	andeq	fp, r1, ip, lsl pc
   1bee8:	andeq	fp, r1, r0, lsl pc
   1beec:	andeq	fp, r1, r4, lsl #30
   1bef0:	strdeq	fp, [r1], -r8
   1bef4:	andeq	fp, r1, r4, lsl #26
   1bef8:	mov	r2, #0
   1befc:	mov	r3, #0
   1bf00:	b	1bd0c <_start@@Base+0x9308>
   1bf04:	mov	r2, #0
   1bf08:	mov	r3, #0
   1bf0c:	b	1bd34 <_start@@Base+0x9330>
   1bf10:	mov	r2, #0
   1bf14:	mov	r3, #0
   1bf18:	b	1bd5c <_start@@Base+0x9358>
   1bf1c:	mov	r2, #0
   1bf20:	mov	r3, #0
   1bf24:	b	1bd84 <_start@@Base+0x9380>
   1bf28:	mov	r2, #0
   1bf2c:	mov	r3, #0
   1bf30:	b	1bda8 <_start@@Base+0x93a4>
   1bf34:	mov	r2, #0
   1bf38:	mov	r3, #0
   1bf3c:	b	1bdd0 <_start@@Base+0x93cc>
   1bf40:	mov	r2, #0
   1bf44:	mov	r3, #0
   1bf48:	b	1bdf8 <_start@@Base+0x93f4>
   1bf4c:	add	r1, pc, #276	; 0x114
   1bf50:	ldrd	r0, [r1]
   1bf54:	and	r2, r2, #-16777216	; 0xff000000
   1bf58:	cmp	r3, r1
   1bf5c:	cmpeq	r2, r0
   1bf60:	beq	1c088 <_start@@Base+0x9684>
   1bf64:	add	r1, pc, #260	; 0x104
   1bf68:	ldrd	r0, [r1]
   1bf6c:	cmp	r3, r1
   1bf70:	cmpeq	r2, r0
   1bf74:	bne	1be54 <_start@@Base+0x9450>
   1bf78:	cmp	ip, #5
   1bf7c:	ble	1be54 <_start@@Base+0x9450>
   1bf80:	mov	r3, #5
   1bf84:	mov	r2, sl
   1bf88:	mov	r1, fp
   1bf8c:	mov	r0, r9
   1bf90:	bl	17fac <_start@@Base+0x55a8>
   1bf94:	cmp	r0, fp
   1bf98:	mov	r5, r0
   1bf9c:	beq	1be54 <_start@@Base+0x9450>
   1bfa0:	add	fp, sp, #120	; 0x78
   1bfa4:	mov	r1, r0
   1bfa8:	vstmdb	fp!, {d8}
   1bfac:	mov	r2, sl
   1bfb0:	mov	r0, r9
   1bfb4:	mov	r3, fp
   1bfb8:	bl	2a2dc <flatcc_json_parser_double@@Base>
   1bfbc:	cmp	r5, r0
   1bfc0:	mov	r4, r0
   1bfc4:	beq	1c2c8 <_start@@Base+0x98c4>
   1bfc8:	ldrd	r2, [sp, #112]	; 0x70
   1bfcc:	ldr	r1, [sp, #64]	; 0x40
   1bfd0:	strd	r2, [r1, #16]
   1bfd4:	b	1be68 <_start@@Base+0x9464>
   1bfd8:	mvn	r1, #-2030043136	; 0x87000000
   1bfdc:	mvn	r0, #0
   1bfe0:	cmp	r3, r1
   1bfe4:	cmpeq	r2, r0
   1bfe8:	bhi	1c124 <_start@@Base+0x9720>
   1bfec:	cmp	ip, #1
   1bff0:	ble	1be54 <_start@@Base+0x9450>
   1bff4:	mov	r3, #1
   1bff8:	mov	r2, sl
   1bffc:	mov	r1, fp
   1c000:	mov	r0, r9
   1c004:	bl	17fac <_start@@Base+0x55a8>
   1c008:	cmp	r0, fp
   1c00c:	mov	r5, r0
   1c010:	beq	1be54 <_start@@Base+0x9450>
   1c014:	vmov	r3, s18
   1c018:	add	fp, sp, #120	; 0x78
   1c01c:	mov	r1, r0
   1c020:	mov	r2, sl
   1c024:	str	r3, [fp, #-8]!
   1c028:	mov	r0, r9
   1c02c:	mov	r3, fp
   1c030:	bl	2a3d8 <flatcc_json_parser_float@@Base>
   1c034:	cmp	r5, r0
   1c038:	mov	r4, r0
   1c03c:	beq	1c798 <_start@@Base+0x9d94>
   1c040:	ldr	r2, [sp, #64]	; 0x40
   1c044:	ldr	r3, [sp, #112]	; 0x70
   1c048:	str	r3, [r2]
   1c04c:	b	1be68 <_start@@Base+0x9464>
	...
   1c058:	rscscc	pc, pc, #1020	; 0x3fc
   1c05c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c060:	movwcc	r0, #0
   1c064:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c068:	andcc	r0, r0, #0
   1c06c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c070:	mrscc	r0, (UNDEF: 0)
   1c074:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c078:	andeq	r0, r0, r0
   1c07c:	andeq	r1, r4, ip, asr #2
   1c080:	andeq	r1, r4, ip, lsr r1
   1c084:	strdeq	r1, [r4], -ip
   1c088:	cmp	ip, #5
   1c08c:	ble	1be54 <_start@@Base+0x9450>
   1c090:	mov	r3, #5
   1c094:	mov	r2, sl
   1c098:	mov	r1, fp
   1c09c:	mov	r0, r9
   1c0a0:	bl	17fac <_start@@Base+0x55a8>
   1c0a4:	cmp	r0, fp
   1c0a8:	mov	r5, r0
   1c0ac:	beq	1be54 <_start@@Base+0x9450>
   1c0b0:	mov	r2, #0
   1c0b4:	mov	r3, #0
   1c0b8:	cmp	sl, r0
   1c0bc:	strb	r6, [sp, #96]	; 0x60
   1c0c0:	str	r6, [sp, #104]	; 0x68
   1c0c4:	strd	r2, [sp, #112]	; 0x70
   1c0c8:	beq	1c2f4 <_start@@Base+0x98f0>
   1c0cc:	add	r3, sp, #112	; 0x70
   1c0d0:	str	r3, [sp]
   1c0d4:	mov	r1, r0
   1c0d8:	add	r3, sp, #104	; 0x68
   1c0dc:	mov	r2, sl
   1c0e0:	mov	r0, r9
   1c0e4:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1c0e8:	cmp	r5, r0
   1c0ec:	mov	r4, r0
   1c0f0:	beq	1c2f4 <_start@@Base+0x98f0>
   1c0f4:	ldr	r1, [sp, #104]	; 0x68
   1c0f8:	ldrd	r2, [sp, #112]	; 0x70
   1c0fc:	cmp	r1, r6
   1c100:	beq	1c1cc <_start@@Base+0x97c8>
   1c104:	cmp	r3, #0
   1c108:	cmpeq	r2, #128	; 0x80
   1c10c:	rsbls	r2, r2, #0
   1c110:	sxtbls	r2, r2
   1c114:	bhi	1c2ac <_start@@Base+0x98a8>
   1c118:	ldr	r3, [sp, #64]	; 0x40
   1c11c:	strb	r2, [r3, #24]
   1c120:	b	1be68 <_start@@Base+0x9464>
   1c124:	and	r3, r3, #-16777216	; 0xff000000
   1c128:	mov	r2, #0
   1c12c:	cmp	r3, #2046820352	; 0x7a000000
   1c130:	cmpeq	r2, #0
   1c134:	beq	1c240 <_start@@Base+0x983c>
   1c138:	cmp	r3, #2030043136	; 0x79000000
   1c13c:	cmpeq	r2, #0
   1c140:	bne	1be54 <_start@@Base+0x9450>
   1c144:	cmp	ip, #1
   1c148:	ble	1be54 <_start@@Base+0x9450>
   1c14c:	mov	r3, #1
   1c150:	mov	r2, sl
   1c154:	mov	r1, fp
   1c158:	mov	r0, r9
   1c15c:	bl	17fac <_start@@Base+0x55a8>
   1c160:	cmp	r0, fp
   1c164:	mov	r5, r0
   1c168:	beq	1be54 <_start@@Base+0x9450>
   1c16c:	vmov	r3, s18
   1c170:	add	fp, sp, #120	; 0x78
   1c174:	mov	r1, r0
   1c178:	mov	r2, sl
   1c17c:	str	r3, [fp, #-8]!
   1c180:	mov	r0, r9
   1c184:	mov	r3, fp
   1c188:	bl	2a3d8 <flatcc_json_parser_float@@Base>
   1c18c:	cmp	r5, r0
   1c190:	mov	r4, r0
   1c194:	beq	1cb28 <_start@@Base+0xa124>
   1c198:	ldr	r2, [sp, #64]	; 0x40
   1c19c:	ldr	r3, [sp, #112]	; 0x70
   1c1a0:	str	r3, [r2, #4]
   1c1a4:	b	1be68 <_start@@Base+0x9464>
   1c1a8:	mov	fp, sl
   1c1ac:	b	1be54 <_start@@Base+0x9450>
   1c1b0:	mov	r1, fp
   1c1b4:	mov	r3, #5
   1c1b8:	mov	r2, sl
   1c1bc:	mov	r0, r9
   1c1c0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1c1c4:	mov	fp, r0
   1c1c8:	b	1bebc <_start@@Base+0x94b8>
   1c1cc:	cmp	r3, #0
   1c1d0:	cmpeq	r2, #127	; 0x7f
   1c1d4:	sxtbls	r2, r2
   1c1d8:	bls	1c118 <_start@@Base+0x9714>
   1c1dc:	mov	r1, r0
   1c1e0:	mov	r3, #7
   1c1e4:	mov	r2, sl
   1c1e8:	mov	r0, r9
   1c1ec:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1c1f0:	mov	r4, r0
   1c1f4:	cmp	r5, r4
   1c1f8:	beq	1c2f4 <_start@@Base+0x98f0>
   1c1fc:	ldrsb	r2, [sp, #96]	; 0x60
   1c200:	b	1c118 <_start@@Base+0x9714>
   1c204:	mov	r1, fp
   1c208:	mov	r3, #5
   1c20c:	mov	r2, sl
   1c210:	mov	r0, r9
   1c214:	bl	17fac <_start@@Base+0x55a8>
   1c218:	cmp	r0, fp
   1c21c:	mov	r1, r0
   1c220:	beq	1be54 <_start@@Base+0x9450>
   1c224:	ldr	r3, [sp, #64]	; 0x40
   1c228:	mov	r2, sl
   1c22c:	add	r3, r3, #26
   1c230:	mov	r0, r9
   1c234:	bl	14f70 <_start@@Base+0x256c>
   1c238:	mov	r4, r0
   1c23c:	b	1be68 <_start@@Base+0x9464>
   1c240:	cmp	ip, #1
   1c244:	ble	1be54 <_start@@Base+0x9450>
   1c248:	mov	r3, #1
   1c24c:	mov	r2, sl
   1c250:	mov	r1, fp
   1c254:	mov	r0, r9
   1c258:	bl	17fac <_start@@Base+0x55a8>
   1c25c:	cmp	r0, fp
   1c260:	mov	r5, r0
   1c264:	beq	1be54 <_start@@Base+0x9450>
   1c268:	vmov	r3, s18
   1c26c:	add	fp, sp, #120	; 0x78
   1c270:	mov	r1, r0
   1c274:	mov	r2, sl
   1c278:	str	r3, [fp, #-8]!
   1c27c:	mov	r0, r9
   1c280:	mov	r3, fp
   1c284:	bl	2a3d8 <flatcc_json_parser_float@@Base>
   1c288:	cmp	r5, r0
   1c28c:	mov	r4, r0
   1c290:	beq	1ced0 <_start@@Base+0xa4cc>
   1c294:	ldr	r2, [sp, #64]	; 0x40
   1c298:	ldr	r3, [sp, #112]	; 0x70
   1c29c:	str	r3, [r2, #8]
   1c2a0:	b	1be68 <_start@@Base+0x9464>
   1c2a4:	strd	r6, [sp, #72]	; 0x48
   1c2a8:	b	19a44 <_start@@Base+0x7040>
   1c2ac:	mov	r1, r0
   1c2b0:	mov	r3, #8
   1c2b4:	mov	r2, sl
   1c2b8:	mov	r0, r9
   1c2bc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1c2c0:	mov	r4, r0
   1c2c4:	b	1c1f4 <_start@@Base+0x97f0>
   1c2c8:	mov	r1, r0
   1c2cc:	str	fp, [sp]
   1c2d0:	ldr	r3, [pc, #-604]	; 1c07c <_start@@Base+0x9678>
   1c2d4:	mov	r2, sl
   1c2d8:	mov	r0, r9
   1c2dc:	bl	13720 <_start@@Base+0xd1c>
   1c2e0:	cmp	sl, r0
   1c2e4:	cmpne	r4, r0
   1c2e8:	beq	1d840 <_start@@Base+0xae3c>
   1c2ec:	mov	r4, r0
   1c2f0:	b	1bfc8 <_start@@Base+0x95c4>
   1c2f4:	add	r3, sp, #96	; 0x60
   1c2f8:	str	r3, [sp]
   1c2fc:	mov	r2, sl
   1c300:	ldr	r3, [pc, #-648]	; 1c080 <_start@@Base+0x967c>
   1c304:	mov	r1, r5
   1c308:	mov	r0, r9
   1c30c:	bl	143e8 <_start@@Base+0x19e4>
   1c310:	cmp	sl, r0
   1c314:	cmpne	r0, r5
   1c318:	mov	r4, r0
   1c31c:	bne	1c1fc <_start@@Base+0x97f8>
   1c320:	strd	r6, [sp, #72]	; 0x48
   1c324:	mov	r1, r4
   1c328:	mov	r3, #33	; 0x21
   1c32c:	mov	r2, sl
   1c330:	mov	r0, r9
   1c334:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1c338:	mov	fp, r0
   1c33c:	b	19a44 <_start@@Base+0x7040>
   1c340:	mov	r4, r0
   1c344:	add	r3, sp, #100	; 0x64
   1c348:	str	r3, [sp]
   1c34c:	mov	r2, sl
   1c350:	ldr	r3, [pc, #-724]	; 1c084 <_start@@Base+0x9680>
   1c354:	mov	r1, r4
   1c358:	mov	r0, r9
   1c35c:	bl	143e8 <_start@@Base+0x19e4>
   1c360:	cmp	sl, r0
   1c364:	cmpne	r0, r4
   1c368:	mov	fp, r0
   1c36c:	bne	1a878 <_start@@Base+0x7e74>
   1c370:	b	1a438 <_start@@Base+0x7a34>
   1c374:	add	r4, fp, #16
   1c378:	mov	r0, r4
   1c37c:	mov	r1, sl
   1c380:	bl	12b30 <_start@@Base+0x12c>
   1c384:	mov	r0, #0
   1c388:	and	r1, r1, #-16777216	; 0xff000000
   1c38c:	cmp	r1, #1929379840	; 0x73000000
   1c390:	cmpeq	r0, #0
   1c394:	bne	1c6c0 <_start@@Base+0x9cbc>
   1c398:	sub	r3, sl, r4
   1c39c:	cmp	r3, #1
   1c3a0:	ble	1d714 <_start@@Base+0xad10>
   1c3a4:	mov	r3, #1
   1c3a8:	mov	r2, sl
   1c3ac:	mov	r1, r4
   1c3b0:	mov	r0, r9
   1c3b4:	bl	17fac <_start@@Base+0x55a8>
   1c3b8:	cmp	r4, r0
   1c3bc:	mov	fp, r0
   1c3c0:	beq	1d710 <_start@@Base+0xad0c>
   1c3c4:	mov	r2, #8
   1c3c8:	mov	r1, r2
   1c3cc:	mvn	r3, #-536870912	; 0xe0000000
   1c3d0:	ldr	r0, [r9]
   1c3d4:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1c3d8:	cmp	r0, #0
   1c3dc:	bne	1a438 <_start@@Base+0x7a34>
   1c3e0:	mov	r1, fp
   1c3e4:	add	r3, sp, #84	; 0x54
   1c3e8:	mov	r2, sl
   1c3ec:	mov	r0, r9
   1c3f0:	bl	13468 <_start@@Base+0xa64>
   1c3f4:	ldr	r3, [sp, #84]	; 0x54
   1c3f8:	cmp	r3, #0
   1c3fc:	mov	fp, r0
   1c400:	beq	1d1c8 <_start@@Base+0xa7c4>
   1c404:	vldr	d8, [pc, #1004]	; 1c7f8 <_start@@Base+0x9df4>
   1c408:	ldr	r7, [pc, #1012]	; 1c804 <_start@@Base+0x9e00>
   1c40c:	mov	r6, #1
   1c410:	add	r5, sp, #112	; 0x70
   1c414:	b	1c444 <_start@@Base+0x9a40>
   1c418:	vldr	d7, [sp, #112]	; 0x70
   1c41c:	mov	r1, r0
   1c420:	add	r3, sp, #84	; 0x54
   1c424:	mov	r2, sl
   1c428:	vstr	d7, [r4]
   1c42c:	mov	r0, r9
   1c430:	bl	14dec <_start@@Base+0x23e8>
   1c434:	ldr	r3, [sp, #84]	; 0x54
   1c438:	cmp	r3, #0
   1c43c:	mov	fp, r0
   1c440:	beq	1d1c8 <_start@@Base+0xa7c4>
   1c444:	mov	r1, r6
   1c448:	ldr	r0, [r9]
   1c44c:	vstr	d8, [sp, #112]	; 0x70
   1c450:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1c454:	mov	r1, fp
   1c458:	mov	r3, r5
   1c45c:	mov	r2, sl
   1c460:	subs	r4, r0, #0
   1c464:	mov	r0, r9
   1c468:	beq	1a438 <_start@@Base+0x7a34>
   1c46c:	bl	2a2dc <flatcc_json_parser_double@@Base>
   1c470:	cmp	r0, fp
   1c474:	bne	1c418 <_start@@Base+0x9a14>
   1c478:	str	r5, [sp]
   1c47c:	mov	r3, r7
   1c480:	mov	r2, sl
   1c484:	mov	r1, fp
   1c488:	mov	r0, r9
   1c48c:	bl	13720 <_start@@Base+0xd1c>
   1c490:	cmp	sl, r0
   1c494:	cmpne	r0, fp
   1c498:	bne	1c418 <_start@@Base+0x9a14>
   1c49c:	mov	r3, sl
   1c4a0:	mov	sl, r9
   1c4a4:	mov	r9, r3
   1c4a8:	b	19aa8 <_start@@Base+0x70a4>
   1c4ac:	mov	r3, #0
   1c4b0:	strb	r3, [sp, #100]	; 0x64
   1c4b4:	add	r3, sp, #100	; 0x64
   1c4b8:	str	r3, [sp]
   1c4bc:	mov	r2, sl
   1c4c0:	ldr	r3, [pc, #832]	; 1c808 <_start@@Base+0x9e04>
   1c4c4:	mov	r1, r4
   1c4c8:	mov	r0, r9
   1c4cc:	bl	13928 <_start@@Base+0xf24>
   1c4d0:	cmp	sl, r0
   1c4d4:	cmpne	r0, r4
   1c4d8:	mov	fp, r0
   1c4dc:	beq	1a438 <_start@@Base+0x7a34>
   1c4e0:	ldrb	r3, [sp, #100]	; 0x64
   1c4e4:	b	1b8a0 <_start@@Base+0x8e9c>
   1c4e8:	mov	r1, r4
   1c4ec:	mov	r2, sl
   1c4f0:	mov	r0, r9
   1c4f4:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c4f8:	mov	fp, r0
   1c4fc:	b	19a44 <_start@@Base+0x7040>
   1c500:	mov	r4, r0
   1c504:	add	r3, sp, #82	; 0x52
   1c508:	str	r3, [sp]
   1c50c:	mov	r2, sl
   1c510:	ldr	r3, [pc, #756]	; 1c80c <_start@@Base+0x9e08>
   1c514:	mov	r1, r4
   1c518:	mov	r0, r9
   1c51c:	bl	13f9c <_start@@Base+0x1598>
   1c520:	cmp	sl, r0
   1c524:	cmpne	r0, r4
   1c528:	mov	fp, r0
   1c52c:	beq	1ba9c <_start@@Base+0x9098>
   1c530:	ldrh	r2, [sp, #82]	; 0x52
   1c534:	b	1b3cc <_start@@Base+0x89c8>
   1c538:	mov	r3, #1
   1c53c:	add	fp, r4, #4
   1c540:	strb	r3, [sp, #100]	; 0x64
   1c544:	b	1b8a8 <_start@@Base+0x8ea4>
   1c548:	mov	r3, #5
   1c54c:	mov	r2, sl
   1c550:	mov	r1, fp
   1c554:	mov	r0, r9
   1c558:	bl	17fac <_start@@Base+0x55a8>
   1c55c:	cmp	r0, fp
   1c560:	mov	r5, r0
   1c564:	beq	19e94 <_start@@Base+0x7490>
   1c568:	add	r4, sp, #120	; 0x78
   1c56c:	mov	r3, #0
   1c570:	mov	r1, r0
   1c574:	str	r3, [r4, #-8]!
   1c578:	mov	r2, sl
   1c57c:	mov	r0, r9
   1c580:	mov	r3, r4
   1c584:	bl	2a3d8 <flatcc_json_parser_float@@Base>
   1c588:	cmp	r0, r5
   1c58c:	mov	fp, r0
   1c590:	beq	1d1fc <_start@@Base+0xa7f8>
   1c594:	vldr	s15, [pc, #612]	; 1c800 <_start@@Base+0x9dfc>
   1c598:	vldr	s14, [sp, #112]	; 0x70
   1c59c:	vcmp.f32	s14, s15
   1c5a0:	vmrs	APSR_nzcv, fpscr
   1c5a4:	bne	1c5b4 <_start@@Base+0x9bb0>
   1c5a8:	ldr	r3, [r9, #8]
   1c5ac:	tst	r3, #2
   1c5b0:	beq	19a44 <_start@@Base+0x7040>
   1c5b4:	mov	r3, #4
   1c5b8:	mov	r2, r3
   1c5bc:	mov	r1, #25
   1c5c0:	ldr	r0, [r9]
   1c5c4:	bl	26644 <flatcc_builder_table_add@@Base>
   1c5c8:	cmp	r0, #0
   1c5cc:	beq	1a438 <_start@@Base+0x7a34>
   1c5d0:	ldr	r3, [sp, #112]	; 0x70
   1c5d4:	str	r3, [r0]
   1c5d8:	b	19a44 <_start@@Base+0x7040>
   1c5dc:	mov	r1, fp
   1c5e0:	mov	r2, sl
   1c5e4:	mov	r0, r9
   1c5e8:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c5ec:	mov	fp, r0
   1c5f0:	b	19a44 <_start@@Base+0x7040>
   1c5f4:	mov	r1, r4
   1c5f8:	mov	r2, sl
   1c5fc:	mov	r0, r9
   1c600:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c604:	mov	fp, r0
   1c608:	b	19a44 <_start@@Base+0x7040>
   1c60c:	mov	r1, fp
   1c610:	mov	r2, sl
   1c614:	mov	r0, r9
   1c618:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c61c:	mov	fp, r0
   1c620:	b	19a44 <_start@@Base+0x7040>
   1c624:	mov	r1, r0
   1c628:	mov	r3, #8
   1c62c:	mov	r2, sl
   1c630:	mov	r0, r9
   1c634:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1c638:	mov	fp, r0
   1c63c:	cmp	r4, fp
   1c640:	bne	1c530 <_start@@Base+0x9b2c>
   1c644:	b	1c504 <_start@@Base+0x9b00>
   1c648:	mov	r1, r4
   1c64c:	mov	r2, sl
   1c650:	mov	r0, r9
   1c654:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c658:	mov	fp, r0
   1c65c:	b	19a44 <_start@@Base+0x7040>
   1c660:	mov	r1, r0
   1c664:	str	r4, [sp]
   1c668:	ldr	r3, [pc, #416]	; 1c810 <_start@@Base+0x9e0c>
   1c66c:	mov	r2, sl
   1c670:	mov	r0, r9
   1c674:	bl	1351c <_start@@Base+0xb18>
   1c678:	cmp	sl, r0
   1c67c:	cmpne	fp, r0
   1c680:	beq	1c49c <_start@@Base+0x9a98>
   1c684:	mov	fp, r0
   1c688:	b	1a2dc <_start@@Base+0x78d8>
   1c68c:	ldr	r0, [r9]
   1c690:	bl	25218 <flatcc_builder_end_vector@@Base>
   1c694:	cmp	r0, #0
   1c698:	str	r0, [sp, #88]	; 0x58
   1c69c:	beq	1a438 <_start@@Base+0x7a34>
   1c6a0:	mov	r1, #24
   1c6a4:	ldr	r0, [r9]
   1c6a8:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1c6ac:	cmp	r0, #0
   1c6b0:	beq	1a438 <_start@@Base+0x7a34>
   1c6b4:	ldr	r3, [sp, #88]	; 0x58
   1c6b8:	str	r3, [r0]
   1c6bc:	b	19a44 <_start@@Base+0x7040>
   1c6c0:	mov	r1, r4
   1c6c4:	mov	r2, sl
   1c6c8:	mov	r0, r9
   1c6cc:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c6d0:	mov	fp, r0
   1c6d4:	b	19a44 <_start@@Base+0x7040>
   1c6d8:	mov	r3, #4
   1c6dc:	mov	r2, sl
   1c6e0:	mov	r1, fp
   1c6e4:	mov	r0, r9
   1c6e8:	bl	17fac <_start@@Base+0x55a8>
   1c6ec:	cmp	r0, fp
   1c6f0:	mov	r5, r0
   1c6f4:	beq	1a88c <_start@@Base+0x7e88>
   1c6f8:	add	r4, sp, #120	; 0x78
   1c6fc:	mov	r3, #0
   1c700:	strh	r3, [r4, #-8]!
   1c704:	mov	r1, r0
   1c708:	mov	r2, sl
   1c70c:	mov	r3, r4
   1c710:	mov	r0, r9
   1c714:	bl	13220 <_start@@Base+0x81c>
   1c718:	cmp	r0, r5
   1c71c:	mov	fp, r0
   1c720:	beq	1d638 <_start@@Base+0xac34>
   1c724:	ldrsh	r3, [sp, #112]	; 0x70
   1c728:	cmp	r3, #150	; 0x96
   1c72c:	bne	1c73c <_start@@Base+0x9d38>
   1c730:	ldr	r3, [r9, #8]
   1c734:	tst	r3, #2
   1c738:	beq	19a44 <_start@@Base+0x7040>
   1c73c:	mov	r3, #2
   1c740:	mov	r2, r3
   1c744:	mov	r1, #1
   1c748:	ldr	r0, [r9]
   1c74c:	bl	26644 <flatcc_builder_table_add@@Base>
   1c750:	cmp	r0, #0
   1c754:	beq	1a438 <_start@@Base+0x7a34>
   1c758:	ldrsh	r3, [sp, #112]	; 0x70
   1c75c:	strh	r3, [r0]
   1c760:	b	19a44 <_start@@Base+0x7040>
   1c764:	mov	r1, fp
   1c768:	mov	r2, sl
   1c76c:	mov	r0, r9
   1c770:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c774:	mov	fp, r0
   1c778:	b	19a44 <_start@@Base+0x7040>
   1c77c:	mov	r1, fp
   1c780:	mov	r3, #7
   1c784:	mov	r2, sl
   1c788:	mov	r0, r9
   1c78c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1c790:	mov	fp, r0
   1c794:	b	1c63c <_start@@Base+0x9c38>
   1c798:	mov	r1, r0
   1c79c:	str	fp, [sp]
   1c7a0:	ldr	r3, [pc, #108]	; 1c814 <_start@@Base+0x9e10>
   1c7a4:	mov	r2, sl
   1c7a8:	mov	r0, r9
   1c7ac:	bl	1351c <_start@@Base+0xb18>
   1c7b0:	cmp	sl, r0
   1c7b4:	cmpne	r4, r0
   1c7b8:	beq	1d840 <_start@@Base+0xae3c>
   1c7bc:	mov	r4, r0
   1c7c0:	b	1c040 <_start@@Base+0x963c>
   1c7c4:	ldr	r3, [sp, #92]	; 0x5c
   1c7c8:	mov	r2, r9
   1c7cc:	mov	r0, sl
   1c7d0:	bl	2cce0 <flatcc_json_parser_finalize_unions@@Base>
   1c7d4:	mov	fp, r0
   1c7d8:	ldr	r0, [sl]
   1c7dc:	bl	24f18 <flatcc_builder_end_table@@Base>
   1c7e0:	ldr	r3, [sp, #68]	; 0x44
   1c7e4:	cmp	r0, #0
   1c7e8:	str	r0, [r3]
   1c7ec:	beq	19aac <_start@@Base+0x70a8>
   1c7f0:	mov	r0, fp
   1c7f4:	b	19ac0 <_start@@Base+0x70bc>
	...
   1c800:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1c804:	andeq	r1, r4, r4, ror #4
   1c808:			; <UNDEFINED> instruction: 0x000411b0
   1c80c:			; <UNDEFINED> instruction: 0x000411bc
   1c810:	andeq	r1, r4, ip, ror #3
   1c814:	andeq	r1, r4, r8, asr r1
   1c818:	andeq	r1, r4, r0, ror r2
   1c81c:	ldr	r3, [r9, #24]
   1c820:	cmp	r3, #0
   1c824:	bne	1ba9c <_start@@Base+0x9098>
   1c828:	ldr	r0, [r9]
   1c82c:	bl	24f18 <flatcc_builder_end_table@@Base>
   1c830:	cmp	r0, #0
   1c834:	str	r0, [sp, #88]	; 0x58
   1c838:	beq	1ba9c <_start@@Base+0x9098>
   1c83c:	b	1bac0 <_start@@Base+0x90bc>
   1c840:	ldr	r3, [r9, #24]
   1c844:	cmp	r3, #0
   1c848:	bne	1b2c4 <_start@@Base+0x88c0>
   1c84c:	ldr	r0, [r9]
   1c850:	bl	24f18 <flatcc_builder_end_table@@Base>
   1c854:	cmp	r0, #0
   1c858:	str	r0, [sp, #88]	; 0x58
   1c85c:	beq	1b2c4 <_start@@Base+0x88c0>
   1c860:	b	1b2e8 <_start@@Base+0x88e4>
   1c864:	sub	r3, sl, r4
   1c868:	cmp	r3, #2
   1c86c:	bgt	1d400 <_start@@Base+0xa9fc>
   1c870:	mov	r1, r4
   1c874:	mov	r2, sl
   1c878:	mov	r0, r9
   1c87c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1c880:	mov	fp, r0
   1c884:	b	19a44 <_start@@Base+0x7040>
   1c888:	sub	r3, sl, fp
   1c88c:	cmp	r3, #8
   1c890:	bgt	1d35c <_start@@Base+0xa958>
   1c894:	add	fp, fp, #8
   1c898:	mov	r0, fp
   1c89c:	mov	r1, sl
   1c8a0:	bl	12b30 <_start@@Base+0x12c>
   1c8a4:	mov	r0, #0
   1c8a8:	and	r1, r1, #-16777216	; 0xff000000
   1c8ac:	cmp	r1, #1627389952	; 0x61000000
   1c8b0:	cmpeq	r0, #0
   1c8b4:	bne	1d6f8 <_start@@Base+0xacf4>
   1c8b8:	sub	r3, sl, fp
   1c8bc:	cmp	r3, #1
   1c8c0:	ble	1d7b0 <_start@@Base+0xadac>
   1c8c4:	mov	r3, #1
   1c8c8:	mov	r2, sl
   1c8cc:	mov	r1, fp
   1c8d0:	mov	r0, r9
   1c8d4:	bl	17fac <_start@@Base+0x55a8>
   1c8d8:	cmp	fp, r0
   1c8dc:	mov	r4, r0
   1c8e0:	beq	1d7b4 <_start@@Base+0xadb0>
   1c8e4:	add	r5, sp, #120	; 0x78
   1c8e8:	mov	r3, #0
   1c8ec:	str	r3, [r5, #-8]!
   1c8f0:	mov	r1, r0
   1c8f4:	mov	r2, sl
   1c8f8:	mov	r3, r5
   1c8fc:	mov	r0, r9
   1c900:	bl	1309c <_start@@Base+0x698>
   1c904:	cmp	r0, r4
   1c908:	mov	fp, r0
   1c90c:	beq	1d8ac <_start@@Base+0xaea8>
   1c910:	ldr	r3, [sp, #112]	; 0x70
   1c914:	cmp	r3, #0
   1c918:	bne	1c928 <_start@@Base+0x9f24>
   1c91c:	ldr	r3, [r9, #8]
   1c920:	tst	r3, #2
   1c924:	beq	19a44 <_start@@Base+0x7040>
   1c928:	mov	r3, #4
   1c92c:	mov	r2, r3
   1c930:	mov	r1, #21
   1c934:	ldr	r0, [r9]
   1c938:	bl	26644 <flatcc_builder_table_add@@Base>
   1c93c:	cmp	r0, #0
   1c940:	beq	1d8d8 <_start@@Base+0xaed4>
   1c944:	ldr	r3, [sp, #112]	; 0x70
   1c948:	str	r3, [r0]
   1c94c:	b	19a44 <_start@@Base+0x7040>
   1c950:	mov	r3, #8
   1c954:	mov	r2, sl
   1c958:	mov	r1, fp
   1c95c:	mov	r0, r9
   1c960:	bl	17fac <_start@@Base+0x55a8>
   1c964:	cmp	fp, r0
   1c968:	mov	r5, r0
   1c96c:	beq	1aba8 <_start@@Base+0x81a4>
   1c970:	add	r4, sp, #120	; 0x78
   1c974:	mov	r3, #0
   1c978:	str	r3, [r4, #-8]!
   1c97c:	mov	r1, r0
   1c980:	mov	r2, sl
   1c984:	mov	r3, r4
   1c988:	mov	r0, r9
   1c98c:	bl	13158 <_start@@Base+0x754>
   1c990:	cmp	r0, r5
   1c994:	mov	fp, r0
   1c998:	beq	1d6cc <_start@@Base+0xacc8>
   1c99c:	ldr	r3, [sp, #112]	; 0x70
   1c9a0:	cmp	r3, #0
   1c9a4:	bne	1c9b4 <_start@@Base+0x9fb0>
   1c9a8:	ldr	r3, [r9, #8]
   1c9ac:	tst	r3, #2
   1c9b0:	beq	19a44 <_start@@Base+0x7040>
   1c9b4:	mov	r3, #4
   1c9b8:	mov	r2, r3
   1c9bc:	mov	r1, #16
   1c9c0:	ldr	r0, [r9]
   1c9c4:	bl	26644 <flatcc_builder_table_add@@Base>
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1d8d8 <_start@@Base+0xaed4>
   1c9d0:	ldr	r3, [sp, #112]	; 0x70
   1c9d4:	str	r3, [r0]
   1c9d8:	b	19a44 <_start@@Base+0x7040>
   1c9dc:	mov	r1, r0
   1c9e0:	mov	r3, #7
   1c9e4:	mov	r2, sl
   1c9e8:	mov	r0, r9
   1c9ec:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1c9f0:	mov	fp, r0
   1c9f4:	b	1a870 <_start@@Base+0x7e6c>
   1c9f8:	mov	r3, #7
   1c9fc:	mov	r2, sl
   1ca00:	mov	r1, r4
   1ca04:	mov	r0, r9
   1ca08:	bl	17fac <_start@@Base+0x55a8>
   1ca0c:	cmp	r4, r0
   1ca10:	mov	fp, r0
   1ca14:	beq	1d8fc <_start@@Base+0xaef8>
   1ca18:	mov	r2, #8
   1ca1c:	mov	r1, r2
   1ca20:	mvn	r3, #-536870912	; 0xe0000000
   1ca24:	ldr	r0, [r9]
   1ca28:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1ca2c:	cmp	r0, #0
   1ca30:	bne	1a438 <_start@@Base+0x7a34>
   1ca34:	mov	r1, fp
   1ca38:	add	r3, sp, #84	; 0x54
   1ca3c:	mov	r2, sl
   1ca40:	mov	r0, r9
   1ca44:	bl	13468 <_start@@Base+0xa64>
   1ca48:	ldr	r3, [sp, #84]	; 0x54
   1ca4c:	cmp	r3, #0
   1ca50:	mov	fp, r0
   1ca54:	beq	1caf4 <_start@@Base+0xa0f0>
   1ca58:	mov	r8, #1
   1ca5c:	add	r7, sp, #112	; 0x70
   1ca60:	b	1ca90 <_start@@Base+0xa08c>
   1ca64:	ldrd	r4, [sp, #112]	; 0x70
   1ca68:	mov	r1, r0
   1ca6c:	add	r3, sp, #84	; 0x54
   1ca70:	strd	r4, [r6]
   1ca74:	mov	r2, sl
   1ca78:	mov	r0, r9
   1ca7c:	bl	14dec <_start@@Base+0x23e8>
   1ca80:	ldr	r3, [sp, #84]	; 0x54
   1ca84:	cmp	r3, #0
   1ca88:	mov	fp, r0
   1ca8c:	beq	1caf4 <_start@@Base+0xa0f0>
   1ca90:	mov	r2, #0
   1ca94:	mov	r3, #0
   1ca98:	mov	r1, r8
   1ca9c:	ldr	r0, [r9]
   1caa0:	strd	r2, [sp, #112]	; 0x70
   1caa4:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1caa8:	mov	r1, fp
   1caac:	mov	r3, r7
   1cab0:	mov	r2, sl
   1cab4:	subs	r6, r0, #0
   1cab8:	mov	r0, r9
   1cabc:	beq	1a438 <_start@@Base+0x7a34>
   1cac0:	bl	132ec <_start@@Base+0x8e8>
   1cac4:	cmp	r0, fp
   1cac8:	bne	1ca64 <_start@@Base+0xa060>
   1cacc:	str	r7, [sp]
   1cad0:	ldr	r3, [pc, #-704]	; 1c818 <_start@@Base+0x9e14>
   1cad4:	mov	r2, sl
   1cad8:	mov	r1, fp
   1cadc:	mov	r0, r9
   1cae0:	bl	1483c <_start@@Base+0x1e38>
   1cae4:	cmp	sl, r0
   1cae8:	cmpne	r0, fp
   1caec:	bne	1ca64 <_start@@Base+0xa060>
   1caf0:	b	1c49c <_start@@Base+0x9a98>
   1caf4:	ldr	r0, [r9]
   1caf8:	bl	25218 <flatcc_builder_end_vector@@Base>
   1cafc:	cmp	r0, #0
   1cb00:	str	r0, [sp, #88]	; 0x58
   1cb04:	beq	1a438 <_start@@Base+0x7a34>
   1cb08:	mov	r1, #32
   1cb0c:	ldr	r0, [r9]
   1cb10:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1cb14:	cmp	r0, #0
   1cb18:	beq	1a438 <_start@@Base+0x7a34>
   1cb1c:	ldr	r3, [sp, #88]	; 0x58
   1cb20:	str	r3, [r0]
   1cb24:	b	19a44 <_start@@Base+0x7040>
   1cb28:	mov	r1, r0
   1cb2c:	str	fp, [sp]
   1cb30:	mov	r3, r8
   1cb34:	mov	r2, sl
   1cb38:	mov	r0, r9
   1cb3c:	bl	1351c <_start@@Base+0xb18>
   1cb40:	cmp	sl, r0
   1cb44:	cmpne	r4, r0
   1cb48:	beq	1d840 <_start@@Base+0xae3c>
   1cb4c:	mov	r4, r0
   1cb50:	b	1c198 <_start@@Base+0x9794>
   1cb54:	mov	r1, r0
   1cb58:	mov	r3, #8
   1cb5c:	mov	r2, sl
   1cb60:	mov	r0, r9
   1cb64:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1cb68:	mov	fp, r0
   1cb6c:	mov	r3, #0
   1cb70:	cmp	r4, fp
   1cb74:	strb	r3, [sp, #100]	; 0x64
   1cb78:	bne	1b8b4 <_start@@Base+0x8eb0>
   1cb7c:	b	1c4b4 <_start@@Base+0x9ab0>
   1cb80:	mov	r3, #7
   1cb84:	mov	r2, sl
   1cb88:	mov	r1, r4
   1cb8c:	mov	r0, r9
   1cb90:	bl	17fac <_start@@Base+0x55a8>
   1cb94:	cmp	r4, r0
   1cb98:	mov	fp, r0
   1cb9c:	beq	1d868 <_start@@Base+0xae64>
   1cba0:	mvn	r3, #-536870912	; 0xe0000000
   1cba4:	mov	r2, #4
   1cba8:	mov	r1, #8
   1cbac:	ldr	r0, [r9]
   1cbb0:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1cbb4:	cmp	r0, #0
   1cbb8:	bne	1a438 <_start@@Base+0x7a34>
   1cbbc:	mov	r1, fp
   1cbc0:	add	r3, sp, #84	; 0x54
   1cbc4:	mov	r2, sl
   1cbc8:	mov	r0, r9
   1cbcc:	bl	13468 <_start@@Base+0xa64>
   1cbd0:	ldr	r3, [sp, #84]	; 0x54
   1cbd4:	cmp	r3, #0
   1cbd8:	mov	fp, r0
   1cbdc:	beq	1ce20 <_start@@Base+0xa41c>
   1cbe0:	mov	r8, #1
   1cbe4:	mov	r1, r8
   1cbe8:	ldr	r0, [r9]
   1cbec:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1cbf0:	subs	r5, r0, #0
   1cbf4:	beq	1a438 <_start@@Base+0x7a34>
   1cbf8:	add	r3, sp, #104	; 0x68
   1cbfc:	mov	r1, fp
   1cc00:	mov	r2, sl
   1cc04:	mov	r0, r9
   1cc08:	bl	133b4 <_start@@Base+0x9b0>
   1cc0c:	ldr	r3, [sp, #104]	; 0x68
   1cc10:	cmp	r3, #0
   1cc14:	mov	r4, r0
   1cc18:	beq	1cdfc <_start@@Base+0xa3f8>
   1cc1c:	mov	fp, #0
   1cc20:	b	1cc7c <_start@@Base+0xa278>
   1cc24:	add	r3, pc, #996	; 0x3e4
   1cc28:	ldrd	r2, [r3]
   1cc2c:	cmp	r7, r3
   1cc30:	cmpeq	r6, r2
   1cc34:	bne	1cc44 <_start@@Base+0xa240>
   1cc38:	sub	r3, sl, r4
   1cc3c:	cmp	r3, #8
   1cc40:	bgt	1cd38 <_start@@Base+0xa334>
   1cc44:	mov	r1, r4
   1cc48:	mov	r2, sl
   1cc4c:	mov	r0, r9
   1cc50:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1cc54:	mov	r4, r0
   1cc58:	mov	r1, r4
   1cc5c:	add	r3, sp, #104	; 0x68
   1cc60:	mov	r2, sl
   1cc64:	mov	r0, r9
   1cc68:	bl	14c68 <_start@@Base+0x2264>
   1cc6c:	ldr	r3, [sp, #104]	; 0x68
   1cc70:	cmp	r3, #0
   1cc74:	mov	r4, r0
   1cc78:	beq	1cdfc <_start@@Base+0xa3f8>
   1cc7c:	cmp	sl, r4
   1cc80:	beq	1cd88 <_start@@Base+0xa384>
   1cc84:	ldrb	r3, [r4]
   1cc88:	cmp	r3, #34	; 0x22
   1cc8c:	addeq	r4, r4, #1
   1cc90:	streq	fp, [r9, #12]
   1cc94:	beq	1cca4 <_start@@Base+0xa2a0>
   1cc98:	cmp	r3, #46	; 0x2e
   1cc9c:	strne	r8, [r9, #12]
   1cca0:	beq	1cdc8 <_start@@Base+0xa3c4>
   1cca4:	mov	r1, sl
   1cca8:	mov	r0, r4
   1ccac:	bl	12b30 <_start@@Base+0x12c>
   1ccb0:	ldr	r3, [pc, #864]	; 1d018 <_start@@Base+0xa614>
   1ccb4:	mov	r2, #0
   1ccb8:	and	r3, r3, r1
   1ccbc:	mov	r7, r1
   1ccc0:	ldr	r1, [pc, #852]	; 1d01c <_start@@Base+0xa618>
   1ccc4:	and	r2, r2, r0
   1ccc8:	mov	r6, r0
   1cccc:	cmp	r3, r1
   1ccd0:	mov	r0, #0
   1ccd4:	cmpeq	r2, r0
   1ccd8:	bne	1cc24 <_start@@Base+0xa220>
   1ccdc:	sub	r3, sl, r4
   1cce0:	cmp	r3, #2
   1cce4:	ble	1cc44 <_start@@Base+0xa240>
   1cce8:	mov	r3, #2
   1ccec:	mov	r2, sl
   1ccf0:	mov	r1, r4
   1ccf4:	mov	r0, r9
   1ccf8:	bl	17fac <_start@@Base+0x55a8>
   1ccfc:	cmp	r0, r4
   1cd00:	mov	r6, r0
   1cd04:	beq	1cc44 <_start@@Base+0xa240>
   1cd08:	mov	r1, r0
   1cd0c:	add	r3, sp, #112	; 0x70
   1cd10:	mov	r2, sl
   1cd14:	mov	r0, r9
   1cd18:	str	fp, [sp, #112]	; 0x70
   1cd1c:	bl	1309c <_start@@Base+0x698>
   1cd20:	cmp	r6, r0
   1cd24:	mov	r4, r0
   1cd28:	beq	1ce84 <_start@@Base+0xa480>
   1cd2c:	ldr	r3, [sp, #112]	; 0x70
   1cd30:	str	r3, [r5]
   1cd34:	b	1cc58 <_start@@Base+0xa254>
   1cd38:	mov	r3, #8
   1cd3c:	mov	r2, sl
   1cd40:	mov	r1, r4
   1cd44:	mov	r0, r9
   1cd48:	bl	17fac <_start@@Base+0x55a8>
   1cd4c:	cmp	r0, r4
   1cd50:	mov	r6, r0
   1cd54:	beq	1cc44 <_start@@Base+0xa240>
   1cd58:	mov	r1, r0
   1cd5c:	add	r3, sp, #112	; 0x70
   1cd60:	mov	r2, sl
   1cd64:	mov	r0, r9
   1cd68:	str	fp, [sp, #112]	; 0x70
   1cd6c:	bl	1309c <_start@@Base+0x698>
   1cd70:	cmp	r6, r0
   1cd74:	mov	r4, r0
   1cd78:	beq	1ce54 <_start@@Base+0xa450>
   1cd7c:	ldr	r3, [sp, #112]	; 0x70
   1cd80:	str	r3, [r5, #4]
   1cd84:	b	1cc58 <_start@@Base+0xa254>
   1cd88:	mov	r1, sl
   1cd8c:	mov	r0, sl
   1cd90:	bl	12b30 <_start@@Base+0x12c>
   1cd94:	ldr	r3, [pc, #636]	; 1d018 <_start@@Base+0xa614>
   1cd98:	mov	r2, #0
   1cd9c:	mov	r4, sl
   1cda0:	and	r3, r3, r1
   1cda4:	mov	r7, r1
   1cda8:	ldr	r1, [pc, #620]	; 1d01c <_start@@Base+0xa618>
   1cdac:	and	r2, r2, r0
   1cdb0:	mov	r6, r0
   1cdb4:	cmp	r3, r1
   1cdb8:	mov	r0, #0
   1cdbc:	cmpeq	r2, r0
   1cdc0:	bne	1cc24 <_start@@Base+0xa220>
   1cdc4:	b	1cc44 <_start@@Base+0xa240>
   1cdc8:	mov	r1, r4
   1cdcc:	mov	r3, #5
   1cdd0:	mov	r2, sl
   1cdd4:	mov	r0, r9
   1cdd8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1cddc:	mov	r4, r0
   1cde0:	b	1cca4 <_start@@Base+0xa2a0>
   1cde4:	mov	r1, r0
   1cde8:	mov	r3, #33	; 0x21
   1cdec:	mov	r2, sl
   1cdf0:	mov	r0, r9
   1cdf4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1cdf8:	mov	r4, r0
   1cdfc:	add	r3, sp, #84	; 0x54
   1ce00:	mov	r1, r4
   1ce04:	mov	r2, sl
   1ce08:	mov	r0, r9
   1ce0c:	bl	14dec <_start@@Base+0x23e8>
   1ce10:	ldr	r3, [sp, #84]	; 0x54
   1ce14:	cmp	r3, #0
   1ce18:	mov	fp, r0
   1ce1c:	bne	1cbe4 <_start@@Base+0xa1e0>
   1ce20:	ldr	r0, [r9]
   1ce24:	bl	25218 <flatcc_builder_end_vector@@Base>
   1ce28:	cmp	r0, #0
   1ce2c:	str	r0, [sp, #88]	; 0x58
   1ce30:	beq	1a438 <_start@@Base+0x7a34>
   1ce34:	mov	r1, #29
   1ce38:	ldr	r0, [r9]
   1ce3c:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1ce40:	cmp	r0, #0
   1ce44:	beq	1a438 <_start@@Base+0x7a34>
   1ce48:	ldr	r3, [sp, #88]	; 0x58
   1ce4c:	str	r3, [r0]
   1ce50:	b	19a44 <_start@@Base+0x7040>
   1ce54:	add	r3, sp, #112	; 0x70
   1ce58:	str	r3, [sp]
   1ce5c:	mov	r1, r0
   1ce60:	ldr	r3, [pc, #440]	; 1d020 <_start@@Base+0xa61c>
   1ce64:	mov	r2, sl
   1ce68:	mov	r0, r9
   1ce6c:	bl	14618 <_start@@Base+0x1c14>
   1ce70:	cmp	sl, r0
   1ce74:	cmpne	r4, r0
   1ce78:	beq	1cde4 <_start@@Base+0xa3e0>
   1ce7c:	mov	r4, r0
   1ce80:	b	1cd7c <_start@@Base+0xa378>
   1ce84:	add	r3, sp, #112	; 0x70
   1ce88:	str	r3, [sp]
   1ce8c:	mov	r1, r0
   1ce90:	ldr	r3, [pc, #396]	; 1d024 <_start@@Base+0xa620>
   1ce94:	mov	r2, sl
   1ce98:	mov	r0, r9
   1ce9c:	bl	14618 <_start@@Base+0x1c14>
   1cea0:	cmp	sl, r0
   1cea4:	cmpne	r4, r0
   1cea8:	beq	1cde4 <_start@@Base+0xa3e0>
   1ceac:	mov	r4, r0
   1ceb0:	b	1cd2c <_start@@Base+0xa328>
   1ceb4:	mov	r4, r0
   1ceb8:	mov	r1, r4
   1cebc:	mov	r2, sl
   1cec0:	mov	r0, r9
   1cec4:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1cec8:	mov	fp, r0
   1cecc:	b	19a44 <_start@@Base+0x7040>
   1ced0:	mov	r1, r0
   1ced4:	str	fp, [sp]
   1ced8:	ldr	r3, [pc, #328]	; 1d028 <_start@@Base+0xa624>
   1cedc:	mov	r2, sl
   1cee0:	mov	r0, r9
   1cee4:	bl	1351c <_start@@Base+0xb18>
   1cee8:	cmp	sl, r0
   1ceec:	cmpne	r4, r0
   1cef0:	beq	1d840 <_start@@Base+0xae3c>
   1cef4:	mov	r4, r0
   1cef8:	b	1c294 <_start@@Base+0x9890>
   1cefc:	ldr	r0, [r9]
   1cf00:	bl	25438 <flatcc_builder_end_offset_vector@@Base>
   1cf04:	cmp	r0, #0
   1cf08:	str	r0, [sp, #88]	; 0x58
   1cf0c:	beq	1a438 <_start@@Base+0x7a34>
   1cf10:	mov	r1, #11
   1cf14:	ldr	r0, [r9]
   1cf18:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1cf1c:	cmp	r0, #0
   1cf20:	beq	1a438 <_start@@Base+0x7a34>
   1cf24:	ldr	r3, [sp, #88]	; 0x58
   1cf28:	str	r3, [r0]
   1cf2c:	b	19a44 <_start@@Base+0x7040>
   1cf30:	ldr	r0, [r9]
   1cf34:	bl	25218 <flatcc_builder_end_vector@@Base>
   1cf38:	cmp	r0, #0
   1cf3c:	str	r0, [sp, #88]	; 0x58
   1cf40:	beq	1a438 <_start@@Base+0x7a34>
   1cf44:	mov	r1, #5
   1cf48:	ldr	r0, [r9]
   1cf4c:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1cf50:	cmp	r0, #0
   1cf54:	beq	1a438 <_start@@Base+0x7a34>
   1cf58:	ldr	r3, [sp, #88]	; 0x58
   1cf5c:	str	r3, [r0]
   1cf60:	b	19a44 <_start@@Base+0x7040>
   1cf64:	mov	r3, #4
   1cf68:	mov	r2, sl
   1cf6c:	mov	r1, r4
   1cf70:	mov	r0, r9
   1cf74:	bl	17fac <_start@@Base+0x55a8>
   1cf78:	cmp	r4, r0
   1cf7c:	mov	fp, r0
   1cf80:	beq	1d878 <_start@@Base+0xae74>
   1cf84:	cmp	sl, r0
   1cf88:	beq	1cf98 <_start@@Base+0xa594>
   1cf8c:	ldrb	r3, [r0]
   1cf90:	cmp	r3, #91	; 0x5b
   1cf94:	beq	1d528 <_start@@Base+0xab24>
   1cf98:	mov	r3, #0
   1cf9c:	mov	r2, r3
   1cfa0:	mov	r1, r3
   1cfa4:	ldr	r0, [r9]
   1cfa8:	bl	228f8 <flatcc_builder_start_buffer@@Base>
   1cfac:	cmp	r0, #0
   1cfb0:	bne	1a438 <_start@@Base+0x7a34>
   1cfb4:	mov	r1, fp
   1cfb8:	add	r3, sp, #88	; 0x58
   1cfbc:	mov	r2, sl
   1cfc0:	mov	r0, r9
   1cfc4:	bl	198dc <_start@@Base+0x6ed8>
   1cfc8:	ldr	r1, [sp, #88]	; 0x58
   1cfcc:	cmp	r1, #0
   1cfd0:	mov	fp, r0
   1cfd4:	beq	1a438 <_start@@Base+0x7a34>
   1cfd8:	ldr	r0, [r9]
   1cfdc:	bl	22a84 <flatcc_builder_end_buffer@@Base>
   1cfe0:	str	r0, [sp, #88]	; 0x58
   1cfe4:	cmp	r0, #0
   1cfe8:	beq	1a438 <_start@@Base+0x7a34>
   1cfec:	mov	r1, #13
   1cff0:	ldr	r0, [r9]
   1cff4:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1cff8:	cmp	r0, #0
   1cffc:	beq	1a438 <_start@@Base+0x7a34>
   1d000:	ldr	r3, [sp, #88]	; 0x58
   1d004:	str	r3, [r0]
   1d008:	b	19a44 <_start@@Base+0x7040>
   1d00c:	nop			; (mov r0, r0)
   1d010:	cmnvs	lr, r5, ror #6
   1d014:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1d018:			; <UNDEFINED> instruction: 0xffff0000
   1d01c:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1d020:	andeq	r1, r4, r4, lsr #3
   1d024:	muleq	r4, r8, r1
   1d028:	andeq	r1, r4, r4, ror #2
   1d02c:	andeq	r1, r4, r8, asr #3
   1d030:	andeq	r1, r4, r0, ror #3
   1d034:	andeq	r1, r4, r8, lsl r1
   1d038:	ldrdeq	r1, [r4], -r4
   1d03c:	andeq	r1, r4, r8, asr r2
   1d040:	andeq	r1, r4, r0, lsr r1
   1d044:	strdeq	r1, [r4], -r8
   1d048:	andeq	r1, r4, r0, lsl r2
   1d04c:	andeq	r1, r4, r0, asr #4
   1d050:	andeq	r1, r4, r8, lsr #4
   1d054:	andeq	r1, r4, r4, lsl #4
   1d058:	andeq	r1, r4, r4, lsr r2
   1d05c:	andeq	r1, r4, ip, asr #4
   1d060:	andeq	r1, r4, ip, lsl r2
   1d064:	mov	r3, sl
   1d068:	mov	fp, r4
   1d06c:	mov	sl, r9
   1d070:	mov	r9, r3
   1d074:	b	19aac <_start@@Base+0x70a8>
   1d078:	mov	r1, r0
   1d07c:	mov	r3, #7
   1d080:	mov	r2, sl
   1d084:	mov	r0, r9
   1d088:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1d08c:	mov	fp, r0
   1d090:	b	1cb6c <_start@@Base+0xa168>
   1d094:	mov	r1, fp
   1d098:	mov	r2, sl
   1d09c:	mov	r0, r9
   1d0a0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d0a4:	mov	fp, r0
   1d0a8:	b	19a44 <_start@@Base+0x7040>
   1d0ac:	mov	r3, #8
   1d0b0:	mov	r2, sl
   1d0b4:	mov	r1, fp
   1d0b8:	mov	r0, r9
   1d0bc:	bl	17fac <_start@@Base+0x55a8>
   1d0c0:	cmp	fp, r0
   1d0c4:	mov	r5, r0
   1d0c8:	beq	1aadc <_start@@Base+0x80d8>
   1d0cc:	mov	r0, #0
   1d0d0:	mov	r1, #0
   1d0d4:	add	r4, sp, #120	; 0x78
   1d0d8:	mov	r2, sl
   1d0dc:	strd	r0, [r4, #-8]!
   1d0e0:	mov	r1, r5
   1d0e4:	mov	r3, r4
   1d0e8:	mov	r0, r9
   1d0ec:	bl	132ec <_start@@Base+0x8e8>
   1d0f0:	cmp	r0, r5
   1d0f4:	mov	fp, r0
   1d0f8:	beq	1d73c <_start@@Base+0xad38>
   1d0fc:	ldrd	r2, [sp, #112]	; 0x70
   1d100:	orrs	r3, r2, r3
   1d104:	bne	1d114 <_start@@Base+0xa710>
   1d108:	ldr	r3, [r9, #8]
   1d10c:	tst	r3, #2
   1d110:	beq	19a44 <_start@@Base+0x7040>
   1d114:	mov	r3, #8
   1d118:	mov	r2, r3
   1d11c:	mov	r1, #18
   1d120:	ldr	r0, [r9]
   1d124:	bl	26644 <flatcc_builder_table_add@@Base>
   1d128:	cmp	r0, #0
   1d12c:	beq	1d8d8 <_start@@Base+0xaed4>
   1d130:	ldrd	r2, [sp, #112]	; 0x70
   1d134:	strd	r2, [r0]
   1d138:	b	19a44 <_start@@Base+0x7040>
   1d13c:	mov	r1, fp
   1d140:	mov	r3, #5
   1d144:	mov	r2, sl
   1d148:	mov	r0, r9
   1d14c:	bl	17fac <_start@@Base+0x55a8>
   1d150:	cmp	fp, r0
   1d154:	mov	r1, r0
   1d158:	beq	1ac98 <_start@@Base+0x8294>
   1d15c:	add	r3, sp, #88	; 0x58
   1d160:	mov	r2, sl
   1d164:	mov	r0, r9
   1d168:	bl	17cd0 <_start@@Base+0x52cc>
   1d16c:	ldr	r3, [sp, #88]	; 0x58
   1d170:	cmp	r3, #0
   1d174:	mov	fp, r0
   1d178:	beq	1a438 <_start@@Base+0x7a34>
   1d17c:	mov	r1, #34	; 0x22
   1d180:	ldr	r0, [r9]
   1d184:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1d188:	cmp	r0, #0
   1d18c:	beq	1a438 <_start@@Base+0x7a34>
   1d190:	ldr	r3, [sp, #88]	; 0x58
   1d194:	str	r3, [r0]
   1d198:	b	19a44 <_start@@Base+0x7040>
   1d19c:	mov	r1, r0
   1d1a0:	str	r4, [sp]
   1d1a4:	ldr	r3, [pc, #-384]	; 1d02c <_start@@Base+0xa628>
   1d1a8:	mov	r2, sl
   1d1ac:	mov	r0, r9
   1d1b0:	bl	1483c <_start@@Base+0x1e38>
   1d1b4:	cmp	sl, r0
   1d1b8:	cmpne	fp, r0
   1d1bc:	beq	1ba98 <_start@@Base+0x9094>
   1d1c0:	mov	fp, r0
   1d1c4:	b	1b21c <_start@@Base+0x8818>
   1d1c8:	ldr	r0, [r9]
   1d1cc:	bl	25218 <flatcc_builder_end_vector@@Base>
   1d1d0:	cmp	r0, #0
   1d1d4:	str	r0, [sp, #88]	; 0x58
   1d1d8:	beq	1a438 <_start@@Base+0x7a34>
   1d1dc:	mov	r1, #33	; 0x21
   1d1e0:	ldr	r0, [r9]
   1d1e4:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1d1e8:	cmp	r0, #0
   1d1ec:	beq	1a438 <_start@@Base+0x7a34>
   1d1f0:	ldr	r3, [sp, #88]	; 0x58
   1d1f4:	str	r3, [r0]
   1d1f8:	b	19a44 <_start@@Base+0x7040>
   1d1fc:	mov	r1, r0
   1d200:	str	r4, [sp]
   1d204:	ldr	r3, [pc, #-476]	; 1d030 <_start@@Base+0xa62c>
   1d208:	mov	r2, sl
   1d20c:	mov	r0, r9
   1d210:	bl	1351c <_start@@Base+0xb18>
   1d214:	cmp	sl, r0
   1d218:	cmpne	fp, r0
   1d21c:	beq	1c49c <_start@@Base+0x9a98>
   1d220:	mov	fp, r0
   1d224:	b	1c594 <_start@@Base+0x9b90>
   1d228:	ldr	r0, [r9]
   1d22c:	bl	25438 <flatcc_builder_end_offset_vector@@Base>
   1d230:	cmp	r0, #0
   1d234:	str	r0, [sp, #88]	; 0x58
   1d238:	beq	1a438 <_start@@Base+0x7a34>
   1d23c:	mov	r1, #10
   1d240:	ldr	r0, [r9]
   1d244:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1d248:	cmp	r0, #0
   1d24c:	beq	1a438 <_start@@Base+0x7a34>
   1d250:	ldr	r3, [sp, #88]	; 0x58
   1d254:	str	r3, [r0]
   1d258:	b	19a44 <_start@@Base+0x7040>
   1d25c:	mov	r1, r0
   1d260:	str	r4, [sp]
   1d264:	ldr	r3, [pc, #-568]	; 1d034 <_start@@Base+0xa630>
   1d268:	mov	r2, sl
   1d26c:	mov	r0, r9
   1d270:	bl	13b30 <_start@@Base+0x112c>
   1d274:	cmp	sl, r0
   1d278:	cmpne	fp, r0
   1d27c:	beq	1b9d0 <_start@@Base+0x8fcc>
   1d280:	mov	fp, r0
   1d284:	b	1af20 <_start@@Base+0x851c>
   1d288:	mov	r4, r0
   1d28c:	mov	r1, r4
   1d290:	mov	r2, sl
   1d294:	mov	r0, r9
   1d298:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d29c:	mov	fp, r0
   1d2a0:	b	19a44 <_start@@Base+0x7040>
   1d2a4:	mov	r3, #8
   1d2a8:	mov	r2, sl
   1d2ac:	mov	r1, fp
   1d2b0:	mov	r0, r9
   1d2b4:	bl	17fac <_start@@Base+0x55a8>
   1d2b8:	cmp	fp, r0
   1d2bc:	mov	r4, r0
   1d2c0:	beq	1d8f4 <_start@@Base+0xaef0>
   1d2c4:	mov	r2, #0
   1d2c8:	mov	r3, #0
   1d2cc:	mov	r1, #0
   1d2d0:	cmp	sl, r0
   1d2d4:	strd	r2, [sp, #104]	; 0x68
   1d2d8:	strd	r2, [sp, #112]	; 0x70
   1d2dc:	str	r1, [sp, #100]	; 0x64
   1d2e0:	beq	1d7cc <_start@@Base+0xadc8>
   1d2e4:	add	r3, sp, #112	; 0x70
   1d2e8:	str	r3, [sp]
   1d2ec:	mov	r1, r0
   1d2f0:	add	r3, sp, #100	; 0x64
   1d2f4:	mov	r2, sl
   1d2f8:	mov	r0, r9
   1d2fc:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1d300:	cmp	r4, r0
   1d304:	mov	fp, r0
   1d308:	beq	1d7cc <_start@@Base+0xadc8>
   1d30c:	ldr	r3, [sp, #100]	; 0x64
   1d310:	cmp	r3, #0
   1d314:	bne	1d67c <_start@@Base+0xac78>
   1d318:	ldrd	r2, [sp, #112]	; 0x70
   1d31c:	strd	r2, [sp, #104]	; 0x68
   1d320:	orrs	r3, r2, r3
   1d324:	bne	1d334 <_start@@Base+0xa930>
   1d328:	ldr	r3, [r9, #8]
   1d32c:	tst	r3, #2
   1d330:	beq	19a44 <_start@@Base+0x7040>
   1d334:	mov	r3, #8
   1d338:	mov	r2, r3
   1d33c:	mov	r1, #19
   1d340:	ldr	r0, [r9]
   1d344:	bl	26644 <flatcc_builder_table_add@@Base>
   1d348:	cmp	r0, #0
   1d34c:	beq	1a438 <_start@@Base+0x7a34>
   1d350:	ldrd	r2, [sp, #104]	; 0x68
   1d354:	strd	r2, [r0]
   1d358:	b	19a44 <_start@@Base+0x7040>
   1d35c:	mov	r3, #8
   1d360:	mov	r2, sl
   1d364:	mov	r1, fp
   1d368:	mov	r0, r9
   1d36c:	bl	17fac <_start@@Base+0x55a8>
   1d370:	cmp	fp, r0
   1d374:	mov	r5, r0
   1d378:	beq	1c894 <_start@@Base+0x9e90>
   1d37c:	add	r4, sp, #120	; 0x78
   1d380:	mov	r3, #0
   1d384:	str	r3, [r4, #-8]!
   1d388:	mov	r1, r0
   1d38c:	mov	r2, sl
   1d390:	mov	r3, r4
   1d394:	mov	r0, r9
   1d398:	bl	1309c <_start@@Base+0x698>
   1d39c:	cmp	r0, r5
   1d3a0:	mov	fp, r0
   1d3a4:	beq	1d814 <_start@@Base+0xae10>
   1d3a8:	ldr	r3, [sp, #112]	; 0x70
   1d3ac:	cmp	r3, #0
   1d3b0:	bne	1d3c0 <_start@@Base+0xa9bc>
   1d3b4:	ldr	r3, [r9, #8]
   1d3b8:	tst	r3, #2
   1d3bc:	beq	19a44 <_start@@Base+0x7040>
   1d3c0:	mov	r3, #4
   1d3c4:	mov	r2, r3
   1d3c8:	mov	r1, #17
   1d3cc:	ldr	r0, [r9]
   1d3d0:	bl	26644 <flatcc_builder_table_add@@Base>
   1d3d4:	cmp	r0, #0
   1d3d8:	beq	1d8d8 <_start@@Base+0xaed4>
   1d3dc:	ldr	r3, [sp, #112]	; 0x70
   1d3e0:	str	r3, [r0]
   1d3e4:	b	19a44 <_start@@Base+0x7040>
   1d3e8:	mov	r1, fp
   1d3ec:	mov	r2, sl
   1d3f0:	mov	r0, r9
   1d3f4:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d3f8:	mov	fp, r0
   1d3fc:	b	19a44 <_start@@Base+0x7040>
   1d400:	mov	r3, #2
   1d404:	mov	r2, sl
   1d408:	mov	r1, r4
   1d40c:	mov	r0, r9
   1d410:	bl	17fac <_start@@Base+0x55a8>
   1d414:	cmp	r4, r0
   1d418:	mov	fp, r0
   1d41c:	beq	1d870 <_start@@Base+0xae6c>
   1d420:	ldr	r0, [r9]
   1d424:	bl	23e90 <flatcc_builder_start_offset_vector@@Base>
   1d428:	cmp	r0, #0
   1d42c:	bne	1a438 <_start@@Base+0x7a34>
   1d430:	mov	r1, fp
   1d434:	add	r3, sp, #84	; 0x54
   1d438:	mov	r2, sl
   1d43c:	mov	r0, r9
   1d440:	bl	13468 <_start@@Base+0xa64>
   1d444:	ldr	r3, [sp, #84]	; 0x54
   1d448:	cmp	r3, #0
   1d44c:	mov	fp, r0
   1d450:	beq	1d4f4 <_start@@Base+0xaaf0>
   1d454:	add	r4, sp, #88	; 0x58
   1d458:	mov	r5, #1
   1d45c:	b	1d49c <_start@@Base+0xaa98>
   1d460:	ldr	r0, [r9]
   1d464:	bl	234f4 <flatcc_builder_extend_offset_vector@@Base>
   1d468:	add	r3, sp, #84	; 0x54
   1d46c:	mov	r2, sl
   1d470:	mov	r1, fp
   1d474:	subs	ip, r0, #0
   1d478:	mov	r0, r9
   1d47c:	beq	1a438 <_start@@Base+0x7a34>
   1d480:	ldr	lr, [sp, #88]	; 0x58
   1d484:	str	lr, [ip]
   1d488:	bl	14dec <_start@@Base+0x23e8>
   1d48c:	ldr	r3, [sp, #84]	; 0x54
   1d490:	cmp	r3, #0
   1d494:	mov	fp, r0
   1d498:	beq	1d4f4 <_start@@Base+0xaaf0>
   1d49c:	mov	r1, fp
   1d4a0:	mov	r3, r4
   1d4a4:	mov	r2, sl
   1d4a8:	mov	r0, r9
   1d4ac:	bl	2c92c <flatcc_json_parser_build_string@@Base>
   1d4b0:	ldr	r3, [sp, #88]	; 0x58
   1d4b4:	mov	r1, r5
   1d4b8:	cmp	r3, #0
   1d4bc:	mov	fp, r0
   1d4c0:	bne	1d460 <_start@@Base+0xaa5c>
   1d4c4:	b	1a438 <_start@@Base+0x7a34>
   1d4c8:	mov	r1, r0
   1d4cc:	str	r4, [sp]
   1d4d0:	ldr	r3, [pc, #-1184]	; 1d038 <_start@@Base+0xa634>
   1d4d4:	mov	r2, sl
   1d4d8:	mov	r0, r9
   1d4dc:	bl	1351c <_start@@Base+0xb18>
   1d4e0:	cmp	sl, r0
   1d4e4:	cmpne	fp, r0
   1d4e8:	beq	1c49c <_start@@Base+0x9a98>
   1d4ec:	mov	fp, r0
   1d4f0:	b	1afac <_start@@Base+0x85a8>
   1d4f4:	ldr	r0, [r9]
   1d4f8:	bl	25438 <flatcc_builder_end_offset_vector@@Base>
   1d4fc:	cmp	r0, #0
   1d500:	str	r0, [sp, #88]	; 0x58
   1d504:	beq	1a438 <_start@@Base+0x7a34>
   1d508:	mov	r1, #28
   1d50c:	ldr	r0, [r9]
   1d510:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1d514:	cmp	r0, #0
   1d518:	beq	1a438 <_start@@Base+0x7a34>
   1d51c:	ldr	r3, [sp, #88]	; 0x58
   1d520:	str	r3, [r0]
   1d524:	b	19a44 <_start@@Base+0x7040>
   1d528:	mov	r2, #1
   1d52c:	mov	r1, r2
   1d530:	mvn	r3, #0
   1d534:	ldr	r0, [r9]
   1d538:	bl	23d38 <flatcc_builder_start_vector@@Base>
   1d53c:	subs	r6, r0, #0
   1d540:	bne	1a438 <_start@@Base+0x7a34>
   1d544:	mov	r1, fp
   1d548:	add	r3, sp, #84	; 0x54
   1d54c:	mov	r2, sl
   1d550:	mov	r0, r9
   1d554:	bl	13468 <_start@@Base+0xa64>
   1d558:	ldr	r3, [sp, #84]	; 0x54
   1d55c:	cmp	r3, #0
   1d560:	mov	fp, r0
   1d564:	beq	1d72c <_start@@Base+0xad28>
   1d568:	ldr	r8, [pc, #-1332]	; 1d03c <_start@@Base+0xa638>
   1d56c:	mov	r7, #1
   1d570:	add	r5, sp, #112	; 0x70
   1d574:	b	1d5a4 <_start@@Base+0xaba0>
   1d578:	ldrb	r2, [sp, #112]	; 0x70
   1d57c:	mov	r1, r0
   1d580:	add	r3, sp, #84	; 0x54
   1d584:	strb	r2, [r4]
   1d588:	mov	r0, r9
   1d58c:	mov	r2, sl
   1d590:	bl	14dec <_start@@Base+0x23e8>
   1d594:	ldr	r3, [sp, #84]	; 0x54
   1d598:	cmp	r3, #0
   1d59c:	mov	fp, r0
   1d5a0:	beq	1d72c <_start@@Base+0xad28>
   1d5a4:	mov	r1, r7
   1d5a8:	ldr	r0, [r9]
   1d5ac:	strb	r6, [sp, #112]	; 0x70
   1d5b0:	bl	231cc <flatcc_builder_extend_vector@@Base>
   1d5b4:	mov	r1, fp
   1d5b8:	mov	r3, r5
   1d5bc:	mov	r2, sl
   1d5c0:	subs	r4, r0, #0
   1d5c4:	mov	r0, r9
   1d5c8:	beq	1a438 <_start@@Base+0x7a34>
   1d5cc:	bl	12fe8 <_start@@Base+0x5e4>
   1d5d0:	cmp	r0, fp
   1d5d4:	bne	1d578 <_start@@Base+0xab74>
   1d5d8:	str	r5, [sp]
   1d5dc:	mov	r3, r8
   1d5e0:	mov	r2, sl
   1d5e4:	mov	r1, fp
   1d5e8:	mov	r0, r9
   1d5ec:	bl	141c8 <_start@@Base+0x17c4>
   1d5f0:	cmp	sl, r0
   1d5f4:	cmpne	r0, fp
   1d5f8:	bne	1d578 <_start@@Base+0xab74>
   1d5fc:	b	1c49c <_start@@Base+0x9a98>
   1d600:	mov	r4, r0
   1d604:	mov	r1, r4
   1d608:	mov	r2, sl
   1d60c:	mov	r0, r9
   1d610:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d614:	mov	fp, r0
   1d618:	b	19a44 <_start@@Base+0x7040>
   1d61c:	mov	r4, r0
   1d620:	mov	r1, r4
   1d624:	mov	r2, sl
   1d628:	mov	r0, r9
   1d62c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d630:	mov	fp, r0
   1d634:	b	19a44 <_start@@Base+0x7040>
   1d638:	mov	r1, r0
   1d63c:	str	r4, [sp]
   1d640:	ldr	r3, [pc, #-1544]	; 1d040 <_start@@Base+0xa63c>
   1d644:	mov	r2, sl
   1d648:	mov	r0, r9
   1d64c:	bl	13b30 <_start@@Base+0x112c>
   1d650:	cmp	sl, r0
   1d654:	cmpne	fp, r0
   1d658:	beq	1b9d0 <_start@@Base+0x8fcc>
   1d65c:	mov	fp, r0
   1d660:	b	1c724 <_start@@Base+0x9d20>
   1d664:	mov	r1, fp
   1d668:	mov	r2, sl
   1d66c:	mov	r0, r9
   1d670:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d674:	mov	fp, r0
   1d678:	b	19a44 <_start@@Base+0x7040>
   1d67c:	mov	r1, r0
   1d680:	mov	r3, #8
   1d684:	mov	r2, sl
   1d688:	mov	r0, r9
   1d68c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1d690:	cmp	r4, r0
   1d694:	mov	fp, r0
   1d698:	beq	1d7cc <_start@@Base+0xadc8>
   1d69c:	ldrd	r2, [sp, #104]	; 0x68
   1d6a0:	b	1d320 <_start@@Base+0xa91c>
   1d6a4:	mov	r3, sl
   1d6a8:	mov	fp, r5
   1d6ac:	mov	sl, r9
   1d6b0:	mov	r9, r3
   1d6b4:	b	19aac <_start@@Base+0x70a8>
   1d6b8:	mov	r3, sl
   1d6bc:	mov	fp, r0
   1d6c0:	mov	sl, r9
   1d6c4:	mov	r9, r3
   1d6c8:	b	19aac <_start@@Base+0x70a8>
   1d6cc:	mov	r1, r0
   1d6d0:	str	r4, [sp]
   1d6d4:	ldr	r3, [pc, #-1688]	; 1d044 <_start@@Base+0xa640>
   1d6d8:	mov	r2, sl
   1d6dc:	mov	r0, r9
   1d6e0:	bl	13d6c <_start@@Base+0x1368>
   1d6e4:	cmp	sl, r0
   1d6e8:	cmpne	fp, r0
   1d6ec:	beq	1c49c <_start@@Base+0x9a98>
   1d6f0:	mov	fp, r0
   1d6f4:	b	1c99c <_start@@Base+0x9f98>
   1d6f8:	mov	r1, fp
   1d6fc:	mov	r2, sl
   1d700:	mov	r0, r9
   1d704:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d708:	mov	fp, r0
   1d70c:	b	19a44 <_start@@Base+0x7040>
   1d710:	mov	r4, r0
   1d714:	mov	r1, r4
   1d718:	mov	r2, sl
   1d71c:	mov	r0, r9
   1d720:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d724:	mov	fp, r0
   1d728:	b	19a44 <_start@@Base+0x7040>
   1d72c:	ldr	r0, [r9]
   1d730:	bl	25218 <flatcc_builder_end_vector@@Base>
   1d734:	str	r0, [sp, #88]	; 0x58
   1d738:	b	1cfe4 <_start@@Base+0xa5e0>
   1d73c:	mov	r1, r0
   1d740:	str	r4, [sp]
   1d744:	ldr	r3, [pc, #-1796]	; 1d048 <_start@@Base+0xa644>
   1d748:	mov	r2, sl
   1d74c:	mov	r0, r9
   1d750:	bl	1483c <_start@@Base+0x1e38>
   1d754:	cmp	sl, r0
   1d758:	cmpne	fp, r0
   1d75c:	beq	1c49c <_start@@Base+0x9a98>
   1d760:	mov	fp, r0
   1d764:	b	1d0fc <_start@@Base+0xa6f8>
   1d768:	mov	r1, r0
   1d76c:	mov	r3, #8
   1d770:	mov	r2, sl
   1d774:	mov	r0, r9
   1d778:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1d77c:	cmp	r4, r0
   1d780:	mov	r5, r0
   1d784:	beq	1d90c <_start@@Base+0xaf08>
   1d788:	mov	fp, r0
   1d78c:	ldrd	r2, [sp, #104]	; 0x68
   1d790:	b	1a668 <_start@@Base+0x7c64>
   1d794:	mov	r4, fp
   1d798:	mov	r1, r4
   1d79c:	mov	r2, sl
   1d7a0:	mov	r0, r9
   1d7a4:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d7a8:	mov	fp, r0
   1d7ac:	b	19a44 <_start@@Base+0x7040>
   1d7b0:	mov	r4, fp
   1d7b4:	mov	r1, r4
   1d7b8:	mov	r2, sl
   1d7bc:	mov	r0, r9
   1d7c0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d7c4:	mov	fp, r0
   1d7c8:	b	19a44 <_start@@Base+0x7040>
   1d7cc:	add	r3, sp, #104	; 0x68
   1d7d0:	str	r3, [sp]
   1d7d4:	mov	r2, sl
   1d7d8:	ldr	r3, [pc, #-1940]	; 1d04c <_start@@Base+0xa648>
   1d7dc:	mov	r1, r4
   1d7e0:	mov	r0, r9
   1d7e4:	bl	126b8 <__assert_fail@plt+0x10>
   1d7e8:	cmp	sl, r0
   1d7ec:	cmpne	r0, r4
   1d7f0:	mov	fp, r0
   1d7f4:	bne	1d69c <_start@@Base+0xac98>
   1d7f8:	b	1a438 <_start@@Base+0x7a34>
   1d7fc:	mov	r1, fp
   1d800:	mov	r2, sl
   1d804:	mov	r0, r9
   1d808:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d80c:	mov	fp, r0
   1d810:	b	19a44 <_start@@Base+0x7040>
   1d814:	mov	r1, r0
   1d818:	str	r4, [sp]
   1d81c:	ldr	r3, [pc, #-2004]	; 1d050 <_start@@Base+0xa64c>
   1d820:	mov	r2, sl
   1d824:	mov	r0, r9
   1d828:	bl	14618 <_start@@Base+0x1c14>
   1d82c:	cmp	sl, r0
   1d830:	cmpne	fp, r0
   1d834:	beq	1c49c <_start@@Base+0x9a98>
   1d838:	mov	fp, r0
   1d83c:	b	1d3a8 <_start@@Base+0xa9a4>
   1d840:	strd	r6, [sp, #72]	; 0x48
   1d844:	mov	r4, r0
   1d848:	b	1c324 <_start@@Base+0x9920>
   1d84c:	mov	r4, fp
   1d850:	mov	r1, r4
   1d854:	mov	r2, sl
   1d858:	mov	r0, r9
   1d85c:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1d860:	mov	fp, r0
   1d864:	b	19a44 <_start@@Base+0x7040>
   1d868:	mov	r4, r0
   1d86c:	b	1ad34 <_start@@Base+0x8330>
   1d870:	mov	r4, r0
   1d874:	b	1c870 <_start@@Base+0x9e6c>
   1d878:	mov	r4, r0
   1d87c:	b	1aaa4 <_start@@Base+0x80a0>
   1d880:	mov	r1, r0
   1d884:	str	r4, [sp]
   1d888:	ldr	r3, [pc, #-2108]	; 1d054 <_start@@Base+0xa650>
   1d88c:	mov	r2, sl
   1d890:	mov	r0, r9
   1d894:	bl	13d6c <_start@@Base+0x1368>
   1d898:	cmp	sl, r0
   1d89c:	cmpne	fp, r0
   1d8a0:	beq	1c49c <_start@@Base+0x9a98>
   1d8a4:	mov	fp, r0
   1d8a8:	b	1ac24 <_start@@Base+0x8220>
   1d8ac:	mov	r1, r0
   1d8b0:	str	r5, [sp]
   1d8b4:	ldr	r3, [pc, #-2148]	; 1d058 <_start@@Base+0xa654>
   1d8b8:	mov	r2, sl
   1d8bc:	mov	r0, r9
   1d8c0:	bl	14618 <_start@@Base+0x1c14>
   1d8c4:	cmp	sl, r0
   1d8c8:	cmpne	fp, r0
   1d8cc:	beq	1c49c <_start@@Base+0x9a98>
   1d8d0:	mov	fp, r0
   1d8d4:	b	1c910 <_start@@Base+0x9f0c>
   1d8d8:	mov	r3, sl
   1d8dc:	mov	r0, fp
   1d8e0:	mov	sl, r9
   1d8e4:	mov	r9, r3
   1d8e8:	b	19aa8 <_start@@Base+0x70a4>
   1d8ec:	mov	r4, r0
   1d8f0:	b	1a4fc <_start@@Base+0x7af8>
   1d8f4:	mov	fp, r0
   1d8f8:	b	1a5bc <_start@@Base+0x7bb8>
   1d8fc:	mov	r4, r0
   1d900:	b	1acbc <_start@@Base+0x82b8>
   1d904:	mov	fp, sl
   1d908:	mov	r5, fp
   1d90c:	add	r3, sp, #104	; 0x68
   1d910:	str	r3, [sp]
   1d914:	mov	r2, sl
   1d918:	ldr	r3, [pc, #-2244]	; 1d05c <_start@@Base+0xa658>
   1d91c:	mov	r1, r5
   1d920:	mov	r0, r9
   1d924:	bl	126b8 <__assert_fail@plt+0x10>
   1d928:	cmp	sl, r0
   1d92c:	cmpne	r0, r5
   1d930:	mov	fp, r0
   1d934:	beq	1a438 <_start@@Base+0x7a34>
   1d938:	ldrd	r2, [sp, #104]	; 0x68
   1d93c:	b	1a668 <_start@@Base+0x7c64>
   1d940:	mov	r1, r0
   1d944:	str	r5, [sp]
   1d948:	ldr	r3, [pc, #-2288]	; 1d060 <_start@@Base+0xa65c>
   1d94c:	mov	r2, sl
   1d950:	mov	r0, r9
   1d954:	bl	1483c <_start@@Base+0x1e38>
   1d958:	cmp	sl, r0
   1d95c:	cmpne	fp, r0
   1d960:	beq	1c49c <_start@@Base+0x9a98>
   1d964:	mov	fp, r0
   1d968:	b	1ab5c <_start@@Base+0x8158>
   1d96c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d970:	sub	sp, sp, #684	; 0x2ac
   1d974:	mov	r5, r2
   1d978:	ldr	r2, [sp, #720]	; 0x2d0
   1d97c:	mov	ip, #0
   1d980:	mov	fp, r0
   1d984:	mov	r4, r1
   1d988:	str	ip, [r2]
   1d98c:	cmp	r3, #4
   1d990:	ldrls	pc, [pc, r3, lsl #2]
   1d994:	b	1f760 <_start@@Base+0xcd5c>
   1d998:	muleq	r1, r0, ip
   1d99c:	ldrdeq	sp, [r1], -r4
   1d9a0:	andeq	sp, r1, r0, asr #26
   1d9a4:	andeq	lr, r1, ip, lsr #32
   1d9a8:	andeq	sp, r1, ip, lsr #19
   1d9ac:	mov	r1, #4
   1d9b0:	ldr	r0, [r0]
   1d9b4:	bl	244d8 <flatcc_builder_start_table@@Base>
   1d9b8:	cmp	r0, #0
   1d9bc:	bne	1e014 <_start@@Base+0xb610>
   1d9c0:	add	r3, sp, #644	; 0x284
   1d9c4:	str	r3, [sp]
   1d9c8:	mov	r2, r5
   1d9cc:	mov	r3, #1
   1d9d0:	mov	r1, r4
   1d9d4:	mov	r0, fp
   1d9d8:	bl	2cc54 <flatcc_json_parser_prepare_unions@@Base>
   1d9dc:	cmp	r5, r0
   1d9e0:	beq	1e014 <_start@@Base+0xb610>
   1d9e4:	mov	r1, r4
   1d9e8:	add	r3, sp, #640	; 0x280
   1d9ec:	mov	r2, r5
   1d9f0:	mov	r0, fp
   1d9f4:	bl	133b4 <_start@@Base+0x9b0>
   1d9f8:	ldr	r3, [sp, #640]	; 0x280
   1d9fc:	mov	r4, r0
   1da00:	cmp	r3, #0
   1da04:	beq	1f638 <_start@@Base+0xcc34>
   1da08:	mov	r7, fp
   1da0c:	mov	fp, r5
   1da10:	cmp	fp, r4
   1da14:	beq	1da40 <_start@@Base+0xb03c>
   1da18:	ldrb	r3, [r4]
   1da1c:	cmp	r3, #34	; 0x22
   1da20:	moveq	r3, #0
   1da24:	addeq	r4, r4, #1
   1da28:	streq	r3, [r7, #12]
   1da2c:	beq	1da40 <_start@@Base+0xb03c>
   1da30:	cmp	r3, #46	; 0x2e
   1da34:	movne	r3, #1
   1da38:	strne	r3, [r7, #12]
   1da3c:	beq	1f90c <_start@@Base+0xcf08>
   1da40:	sub	r5, fp, r4
   1da44:	cmp	r5, #8
   1da48:	bls	1e0c0 <_start@@Base+0xb6bc>
   1da4c:	ldrb	r0, [r4, #7]
   1da50:	mov	r1, #0
   1da54:	ldrb	r2, [r4, #6]
   1da58:	lsl	r3, r2, #8
   1da5c:	str	r3, [sp, #536]	; 0x218
   1da60:	add	r3, sp, #536	; 0x218
   1da64:	lsr	ip, r2, #24
   1da68:	str	ip, [sp, #540]	; 0x21c
   1da6c:	ldrd	r2, [r3]
   1da70:	orr	r2, r2, r0
   1da74:	orr	r3, r3, r1
   1da78:	mov	r0, r2
   1da7c:	mov	r1, r3
   1da80:	ldrb	r2, [r4, #5]
   1da84:	lsl	r3, r2, #16
   1da88:	str	r3, [sp, #464]	; 0x1d0
   1da8c:	add	r3, sp, #464	; 0x1d0
   1da90:	lsr	ip, r2, #16
   1da94:	str	ip, [sp, #468]	; 0x1d4
   1da98:	ldrd	r2, [r3]
   1da9c:	orr	r2, r2, r0
   1daa0:	orr	r3, r3, r1
   1daa4:	mov	r0, r2
   1daa8:	mov	r1, r3
   1daac:	ldrb	r2, [r4, #4]
   1dab0:	lsl	r3, r2, #24
   1dab4:	str	r3, [sp, #400]	; 0x190
   1dab8:	add	r3, sp, #400	; 0x190
   1dabc:	lsr	ip, r2, #8
   1dac0:	str	ip, [sp, #404]	; 0x194
   1dac4:	ldrd	r2, [r3]
   1dac8:	orr	r2, r2, r0
   1dacc:	orr	r3, r3, r1
   1dad0:	ldrb	r1, [r4, #3]
   1dad4:	str	r1, [sp, #420]	; 0x1a4
   1dad8:	mov	r1, #0
   1dadc:	str	r1, [sp, #416]	; 0x1a0
   1dae0:	add	r1, sp, #416	; 0x1a0
   1dae4:	ldrd	r0, [r1]
   1dae8:	orr	r0, r0, r2
   1daec:	orr	r1, r1, r3
   1daf0:	ldrb	r2, [r4, #2]
   1daf4:	lsl	r3, r2, #8
   1daf8:	str	r3, [sp, #388]	; 0x184
   1dafc:	mov	r3, #0
   1db00:	str	r3, [sp, #384]	; 0x180
   1db04:	add	r3, sp, #384	; 0x180
   1db08:	ldrd	r2, [r3]
   1db0c:	orr	r2, r2, r0
   1db10:	orr	r3, r3, r1
   1db14:	mov	r0, r2
   1db18:	mov	r1, r3
   1db1c:	ldrb	r2, [r4, #1]
   1db20:	lsl	r3, r2, #16
   1db24:	str	r3, [sp, #324]	; 0x144
   1db28:	mov	r3, #0
   1db2c:	str	r3, [sp, #320]	; 0x140
   1db30:	add	r3, sp, #320	; 0x140
   1db34:	ldrd	r8, [r3]
   1db38:	orr	r8, r8, r0
   1db3c:	orr	r9, r9, r1
   1db40:	ldrb	r0, [r4]
   1db44:	add	r3, pc, #460	; 0x1cc
   1db48:	ldrd	r2, [r3]
   1db4c:	lsl	r1, r0, #24
   1db50:	str	r1, [sp, #284]	; 0x11c
   1db54:	mov	r1, #0
   1db58:	str	r1, [sp, #280]	; 0x118
   1db5c:	add	r1, sp, #280	; 0x118
   1db60:	ldrd	r0, [r1]
   1db64:	orr	r1, r1, r9
   1db68:	orr	r0, r0, r8
   1db6c:	cmp	r1, r3
   1db70:	cmpeq	r0, r2
   1db74:	mov	r8, r0
   1db78:	mov	r9, r1
   1db7c:	beq	1e354 <_start@@Base+0xb950>
   1db80:	add	r3, pc, #408	; 0x198
   1db84:	ldrd	r2, [r3]
   1db88:	bic	r0, r0, #255	; 0xff
   1db8c:	cmp	r1, r3
   1db90:	cmpeq	r0, r2
   1db94:	movne	r3, #1
   1db98:	moveq	r3, #0
   1db9c:	cmp	r5, #7
   1dba0:	movgt	r6, r3
   1dba4:	orrle	r6, r3, #1
   1dba8:	cmp	r6, #0
   1dbac:	beq	1fe0c <_start@@Base+0xd408>
   1dbb0:	add	r1, pc, #368	; 0x170
   1dbb4:	ldrd	r0, [r1]
   1dbb8:	ldr	r2, [pc, #376]	; 1dd38 <_start@@Base+0xb334>
   1dbbc:	mvn	r3, #0
   1dbc0:	and	r3, r3, r9
   1dbc4:	and	r2, r2, r8
   1dbc8:	cmp	r3, r1
   1dbcc:	cmpeq	r2, r0
   1dbd0:	beq	1e570 <_start@@Base+0xbb6c>
   1dbd4:	add	r3, pc, #340	; 0x154
   1dbd8:	ldrd	r2, [r3]
   1dbdc:	and	r0, r8, #-16777216	; 0xff000000
   1dbe0:	cmp	r9, r3
   1dbe4:	cmpeq	r0, r2
   1dbe8:	bne	1dbf4 <_start@@Base+0xb1f0>
   1dbec:	cmp	r5, #5
   1dbf0:	bgt	1f928 <_start@@Base+0xcf24>
   1dbf4:	mov	r1, r4
   1dbf8:	mov	r2, fp
   1dbfc:	mov	r0, r7
   1dc00:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1dc04:	mov	sl, r0
   1dc08:	sub	r3, fp, sl
   1dc0c:	cmp	r3, #1
   1dc10:	ble	1dc24 <_start@@Base+0xb220>
   1dc14:	ldrb	r3, [sl]
   1dc18:	cmp	r3, #32
   1dc1c:	bhi	1dc38 <_start@@Base+0xb234>
   1dc20:	beq	1f4c0 <_start@@Base+0xcabc>
   1dc24:	mov	r1, sl
   1dc28:	mov	r2, fp
   1dc2c:	mov	r0, r7
   1dc30:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1dc34:	mov	sl, r0
   1dc38:	cmp	fp, sl
   1dc3c:	beq	1f624 <_start@@Base+0xcc20>
   1dc40:	ldrb	r3, [sl]
   1dc44:	cmp	r3, #44	; 0x2c
   1dc48:	beq	1f5d0 <_start@@Base+0xcbcc>
   1dc4c:	mov	r3, #0
   1dc50:	str	r3, [sp, #640]	; 0x280
   1dc54:	ldrb	r3, [sl]
   1dc58:	mov	r5, fp
   1dc5c:	mov	fp, r7
   1dc60:	cmp	r3, #125	; 0x7d
   1dc64:	beq	1e4c8 <_start@@Base+0xbac4>
   1dc68:	mov	r3, #10
   1dc6c:	mov	r1, sl
   1dc70:	mov	r2, r5
   1dc74:	mov	r0, r7
   1dc78:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1dc7c:	ldr	r3, [sp, #640]	; 0x280
   1dc80:	cmp	r3, #0
   1dc84:	mov	r4, r0
   1dc88:	bne	1da08 <_start@@Base+0xb004>
   1dc8c:	b	1f638 <_start@@Base+0xcc34>
   1dc90:	sub	r3, r5, r1
   1dc94:	cmp	r3, #3
   1dc98:	ble	1dcb8 <_start@@Base+0xb2b4>
   1dc9c:	mov	r2, #4
   1dca0:	ldr	r1, [pc, #148]	; 1dd3c <_start@@Base+0xb338>
   1dca4:	mov	r0, r4
   1dca8:	bl	125c4 <memcmp@plt>
   1dcac:	cmp	r0, #0
   1dcb0:	addeq	r0, r4, #4
   1dcb4:	beq	1dccc <_start@@Base+0xb2c8>
   1dcb8:	mov	r2, r5
   1dcbc:	mov	r1, r4
   1dcc0:	mov	r0, fp
   1dcc4:	mov	r3, #26
   1dcc8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1dccc:	add	sp, sp, #684	; 0x2ac
   1dcd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcd4:	ldr	r3, [sp, #720]	; 0x2d0
   1dcd8:	mov	r2, r5
   1dcdc:	bl	198dc <_start@@Base+0x6ed8>
   1dce0:	ldr	r3, [fp, #24]
   1dce4:	cmp	r3, #0
   1dce8:	bne	1dccc <_start@@Base+0xb2c8>
   1dcec:	ldr	r3, [sp, #720]	; 0x2d0
   1dcf0:	ldr	r3, [r3]
   1dcf4:	cmp	r3, #0
   1dcf8:	bne	1dccc <_start@@Base+0xb2c8>
   1dcfc:	mov	r1, r0
   1dd00:	mov	r2, r5
   1dd04:	mov	r0, fp
   1dd08:	mov	r3, #33	; 0x21
   1dd0c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1dd10:	add	sp, sp, #684	; 0x2ac
   1dd14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd18:	cmnvs	lr, pc, asr r9
   1dd1c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1dd20:	cmnvs	lr, r0, lsl #18
   1dd24:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1dd28:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1dd2c:	rsbsvc	r6, r2, r6, ror #10
   1dd30:	strvs	r0, [r0, #-0]
   1dd34:	stclvs	6, cr7, [pc, #-420]!	; 1db98 <_start@@Base+0xb194>
   1dd38:			; <UNDEFINED> instruction: 0xffff0000
   1dd3c:	andeq	lr, r2, r0, lsr r9
   1dd40:	mov	r1, #4
   1dd44:	ldr	r0, [r0]
   1dd48:	bl	244d8 <flatcc_builder_start_table@@Base>
   1dd4c:	cmp	r0, #0
   1dd50:	bne	1e014 <_start@@Base+0xb610>
   1dd54:	mov	r1, r4
   1dd58:	add	r3, sp, #660	; 0x294
   1dd5c:	mov	r2, r5
   1dd60:	mov	r0, fp
   1dd64:	bl	133b4 <_start@@Base+0x9b0>
   1dd68:	ldr	r3, [sp, #660]	; 0x294
   1dd6c:	mov	r4, r0
   1dd70:	cmp	r3, #0
   1dd74:	beq	1e008 <_start@@Base+0xb604>
   1dd78:	cmp	r5, r4
   1dd7c:	beq	1dda8 <_start@@Base+0xb3a4>
   1dd80:	ldrb	r3, [r4]
   1dd84:	cmp	r3, #34	; 0x22
   1dd88:	moveq	r3, #0
   1dd8c:	addeq	r4, r4, #1
   1dd90:	streq	r3, [fp, #12]
   1dd94:	beq	1dda8 <_start@@Base+0xb3a4>
   1dd98:	cmp	r3, #46	; 0x2e
   1dd9c:	movne	r3, #1
   1dda0:	strne	r3, [fp, #12]
   1dda4:	beq	1f744 <_start@@Base+0xcd40>
   1dda8:	sub	r8, r5, r4
   1ddac:	cmp	r8, #8
   1ddb0:	bls	1e03c <_start@@Base+0xb638>
   1ddb4:	ldrb	r6, [r4, #7]
   1ddb8:	mov	r7, #0
   1ddbc:	ldrb	r2, [r4, #6]
   1ddc0:	lsl	r3, r2, #8
   1ddc4:	str	r3, [sp, #456]	; 0x1c8
   1ddc8:	add	r3, sp, #456	; 0x1c8
   1ddcc:	lsr	r1, r2, #24
   1ddd0:	str	r1, [sp, #460]	; 0x1cc
   1ddd4:	ldrd	r2, [r3]
   1ddd8:	orr	r2, r2, r6
   1dddc:	orr	r3, r3, r7
   1dde0:	mov	r6, r2
   1dde4:	mov	r7, r3
   1dde8:	ldrb	r2, [r4, #5]
   1ddec:	lsl	r3, r2, #16
   1ddf0:	str	r3, [sp, #368]	; 0x170
   1ddf4:	add	r3, sp, #368	; 0x170
   1ddf8:	lsr	r1, r2, #16
   1ddfc:	str	r1, [sp, #372]	; 0x174
   1de00:	ldrd	r2, [r3]
   1de04:	orr	r2, r2, r6
   1de08:	orr	r3, r3, r7
   1de0c:	mov	r6, r2
   1de10:	mov	r7, r3
   1de14:	ldrb	r2, [r4, #4]
   1de18:	lsl	r3, r2, #24
   1de1c:	str	r3, [sp, #272]	; 0x110
   1de20:	add	r3, sp, #272	; 0x110
   1de24:	lsr	r1, r2, #8
   1de28:	str	r1, [sp, #276]	; 0x114
   1de2c:	ldrd	r2, [r3]
   1de30:	orr	r2, r2, r6
   1de34:	orr	r3, r3, r7
   1de38:	mov	r6, r2
   1de3c:	mov	r7, r3
   1de40:	ldrb	r3, [r4, #3]
   1de44:	str	r3, [sp, #292]	; 0x124
   1de48:	mov	r3, #0
   1de4c:	str	r3, [sp, #288]	; 0x120
   1de50:	add	r3, sp, #288	; 0x120
   1de54:	ldrd	r2, [r3]
   1de58:	orr	r2, r2, r6
   1de5c:	orr	r3, r3, r7
   1de60:	mov	r6, r2
   1de64:	mov	r7, r3
   1de68:	ldrb	r2, [r4, #2]
   1de6c:	lsl	r3, r2, #8
   1de70:	str	r3, [sp, #244]	; 0xf4
   1de74:	mov	r3, #0
   1de78:	str	r3, [sp, #240]	; 0xf0
   1de7c:	ldrd	r2, [sp, #240]	; 0xf0
   1de80:	orr	r2, r2, r6
   1de84:	orr	r3, r3, r7
   1de88:	mov	r6, r2
   1de8c:	mov	r7, r3
   1de90:	ldrb	r2, [r4, #1]
   1de94:	lsl	r3, r2, #16
   1de98:	str	r3, [sp, #188]	; 0xbc
   1de9c:	mov	r3, #0
   1dea0:	str	r3, [sp, #184]	; 0xb8
   1dea4:	ldrd	r2, [sp, #184]	; 0xb8
   1dea8:	orr	r2, r2, r6
   1deac:	orr	r3, r3, r7
   1deb0:	mov	r6, r2
   1deb4:	mov	r7, r3
   1deb8:	ldrb	r2, [r4]
   1debc:	add	r1, pc, #924	; 0x39c
   1dec0:	ldrd	r0, [r1]
   1dec4:	lsl	r3, r2, #24
   1dec8:	str	r3, [sp, #132]	; 0x84
   1decc:	mov	r3, #0
   1ded0:	str	r3, [sp, #128]	; 0x80
   1ded4:	ldrd	r2, [sp, #128]	; 0x80
   1ded8:	orr	r2, r2, r6
   1dedc:	orr	r3, r3, r7
   1dee0:	mov	r6, r2
   1dee4:	mov	r7, r3
   1dee8:	ldr	r2, [pc, #904]	; 1e278 <_start@@Base+0xb874>
   1deec:	mvn	r3, #0
   1def0:	and	r3, r3, r7
   1def4:	and	r2, r2, r6
   1def8:	cmp	r3, r1
   1defc:	cmpeq	r2, r0
   1df00:	beq	1e144 <_start@@Base+0xb740>
   1df04:	add	r3, pc, #860	; 0x35c
   1df08:	ldrd	r2, [r3]
   1df0c:	and	r0, r6, #-16777216	; 0xff000000
   1df10:	cmp	r7, r3
   1df14:	cmpeq	r0, r2
   1df18:	movne	r9, #1
   1df1c:	moveq	r9, #0
   1df20:	cmp	r8, #5
   1df24:	orrle	r9, r9, #1
   1df28:	cmp	r9, #0
   1df2c:	beq	1f7bc <_start@@Base+0xcdb8>
   1df30:	add	r3, pc, #824	; 0x338
   1df34:	ldrd	r2, [r3]
   1df38:	bic	r1, r7, #255	; 0xff
   1df3c:	mov	r0, #0
   1df40:	cmp	r1, r3
   1df44:	cmpeq	r0, r2
   1df48:	beq	1e280 <_start@@Base+0xb87c>
   1df4c:	ldr	r3, [pc, #804]	; 1e278 <_start@@Base+0xb874>
   1df50:	mov	r2, #0
   1df54:	and	r7, r7, r3
   1df58:	ldr	r3, [pc, #796]	; 1e27c <_start@@Base+0xb878>
   1df5c:	and	r6, r6, r2
   1df60:	cmp	r7, r3
   1df64:	mov	r2, #0
   1df68:	cmpeq	r6, r2
   1df6c:	bne	1df78 <_start@@Base+0xb574>
   1df70:	cmp	r8, #2
   1df74:	bgt	1f67c <_start@@Base+0xcc78>
   1df78:	mov	r1, r4
   1df7c:	mov	r2, r5
   1df80:	mov	r0, fp
   1df84:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1df88:	mov	r7, r0
   1df8c:	sub	r3, r5, r7
   1df90:	cmp	r3, #1
   1df94:	ble	1dfa8 <_start@@Base+0xb5a4>
   1df98:	ldrb	r3, [r7]
   1df9c:	cmp	r3, #32
   1dfa0:	bhi	1dfbc <_start@@Base+0xb5b8>
   1dfa4:	beq	1e494 <_start@@Base+0xba90>
   1dfa8:	mov	r1, r7
   1dfac:	mov	r2, r5
   1dfb0:	mov	r0, fp
   1dfb4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1dfb8:	mov	r7, r0
   1dfbc:	cmp	r5, r7
   1dfc0:	beq	1e4ac <_start@@Base+0xbaa8>
   1dfc4:	ldrb	r3, [r7]
   1dfc8:	cmp	r3, #44	; 0x2c
   1dfcc:	beq	1e504 <_start@@Base+0xbb00>
   1dfd0:	mov	r3, #0
   1dfd4:	str	r3, [sp, #660]	; 0x294
   1dfd8:	ldrb	r3, [r7]
   1dfdc:	cmp	r3, #125	; 0x7d
   1dfe0:	beq	1e220 <_start@@Base+0xb81c>
   1dfe4:	mov	r3, #10
   1dfe8:	mov	r1, r7
   1dfec:	mov	r2, r5
   1dff0:	mov	r0, fp
   1dff4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1dff8:	ldr	r3, [sp, #660]	; 0x294
   1dffc:	cmp	r3, #0
   1e000:	mov	r4, r0
   1e004:	bne	1dd78 <_start@@Base+0xb374>
   1e008:	ldr	r3, [fp, #24]
   1e00c:	cmp	r3, #0
   1e010:	beq	1f65c <_start@@Base+0xcc58>
   1e014:	mov	r1, r4
   1e018:	mov	r3, #33	; 0x21
   1e01c:	mov	r2, r5
   1e020:	mov	r0, fp
   1e024:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1e028:	b	1dce0 <_start@@Base+0xb2dc>
   1e02c:	ldr	r3, [sp, #720]	; 0x2d0
   1e030:	mov	r2, r5
   1e034:	bl	17cd0 <_start@@Base+0x52cc>
   1e038:	b	1dce0 <_start@@Base+0xb2dc>
   1e03c:	sub	r3, r8, #1
   1e040:	cmp	r3, #7
   1e044:	ldrls	pc, [pc, r3, lsl #2]
   1e048:	b	212d4 <_start@@Base+0xe8d0>
   1e04c:	strheq	lr, [r1], -r4
   1e050:	andeq	lr, r1, r8, lsr #1
   1e054:	muleq	r1, ip, r0
   1e058:	muleq	r1, r0, r0
   1e05c:	andeq	lr, r1, r4, lsl #1
   1e060:	andeq	lr, r1, r8, ror r0
   1e064:	andeq	lr, r1, ip, rrx
   1e068:			; <UNDEFINED> instruction: 0x0001ddb4
   1e06c:	mov	r6, #0
   1e070:	mov	r7, #0
   1e074:	b	1ddbc <_start@@Base+0xb3b8>
   1e078:	mov	r6, #0
   1e07c:	mov	r7, #0
   1e080:	b	1dde8 <_start@@Base+0xb3e4>
   1e084:	mov	r6, #0
   1e088:	mov	r7, #0
   1e08c:	b	1de14 <_start@@Base+0xb410>
   1e090:	mov	r6, #0
   1e094:	mov	r7, #0
   1e098:	b	1de40 <_start@@Base+0xb43c>
   1e09c:	mov	r6, #0
   1e0a0:	mov	r7, #0
   1e0a4:	b	1de68 <_start@@Base+0xb464>
   1e0a8:	mov	r6, #0
   1e0ac:	mov	r7, #0
   1e0b0:	b	1de90 <_start@@Base+0xb48c>
   1e0b4:	mov	r6, #0
   1e0b8:	mov	r7, #0
   1e0bc:	b	1deb8 <_start@@Base+0xb4b4>
   1e0c0:	sub	r3, r5, #1
   1e0c4:	cmp	r3, #7
   1e0c8:	ldrls	pc, [pc, r3, lsl #2]
   1e0cc:	b	212e0 <_start@@Base+0xe8dc>
   1e0d0:	andeq	lr, r1, r8, lsr r1
   1e0d4:	andeq	lr, r1, ip, lsr #2
   1e0d8:	andeq	lr, r1, r0, lsr #2
   1e0dc:	andeq	lr, r1, r4, lsl r1
   1e0e0:	andeq	lr, r1, r8, lsl #2
   1e0e4:	strdeq	lr, [r1], -ip
   1e0e8:	strdeq	lr, [r1], -r0
   1e0ec:	andeq	sp, r1, ip, asr #20
   1e0f0:	mov	r0, #0
   1e0f4:	mov	r1, #0
   1e0f8:	b	1da54 <_start@@Base+0xb050>
   1e0fc:	mov	r0, #0
   1e100:	mov	r1, #0
   1e104:	b	1da80 <_start@@Base+0xb07c>
   1e108:	mov	r0, #0
   1e10c:	mov	r1, #0
   1e110:	b	1daac <_start@@Base+0xb0a8>
   1e114:	mov	r2, #0
   1e118:	mov	r3, #0
   1e11c:	b	1dad0 <_start@@Base+0xb0cc>
   1e120:	mov	r0, #0
   1e124:	mov	r1, #0
   1e128:	b	1daf0 <_start@@Base+0xb0ec>
   1e12c:	mov	r0, #0
   1e130:	mov	r1, #0
   1e134:	b	1db1c <_start@@Base+0xb118>
   1e138:	mov	r8, #0
   1e13c:	mov	r9, #0
   1e140:	b	1db40 <_start@@Base+0xb13c>
   1e144:	cmp	r8, #6
   1e148:	ble	1df4c <_start@@Base+0xb548>
   1e14c:	mov	r3, #6
   1e150:	mov	r2, r5
   1e154:	mov	r1, r4
   1e158:	mov	r0, fp
   1e15c:	bl	17fac <_start@@Base+0x55a8>
   1e160:	cmp	r0, r4
   1e164:	mov	r9, r0
   1e168:	beq	1df4c <_start@@Base+0xb548>
   1e16c:	cmp	r5, r0
   1e170:	ldrd	r0, [sp, #128]	; 0x80
   1e174:	mov	r2, #0
   1e178:	mov	r3, #0
   1e17c:	add	r1, sp, #672	; 0x2a0
   1e180:	strb	r0, [sp, #656]	; 0x290
   1e184:	str	r0, [sp, #664]	; 0x298
   1e188:	strd	r2, [r1]
   1e18c:	beq	20480 <_start@@Base+0xda7c>
   1e190:	str	r1, [sp]
   1e194:	add	r3, sp, #664	; 0x298
   1e198:	mov	r2, r5
   1e19c:	mov	r1, r9
   1e1a0:	mov	r0, fp
   1e1a4:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1e1a8:	cmp	r9, r0
   1e1ac:	mov	r7, r0
   1e1b0:	beq	20480 <_start@@Base+0xda7c>
   1e1b4:	ldr	r1, [sp, #664]	; 0x298
   1e1b8:	add	r3, sp, #672	; 0x2a0
   1e1bc:	cmp	r1, #0
   1e1c0:	ldrd	r2, [r3]
   1e1c4:	beq	1f77c <_start@@Base+0xcd78>
   1e1c8:	cmp	r3, #0
   1e1cc:	cmpeq	r2, #128	; 0x80
   1e1d0:	rsbls	r2, r2, #0
   1e1d4:	sxtbls	r2, r2
   1e1d8:	strbls	r2, [sp, #656]	; 0x290
   1e1dc:	bhi	20214 <_start@@Base+0xd810>
   1e1e0:	cmp	r2, #2
   1e1e4:	bne	1e1f4 <_start@@Base+0xb7f0>
   1e1e8:	ldr	r3, [fp, #8]
   1e1ec:	tst	r3, #2
   1e1f0:	beq	1df8c <_start@@Base+0xb588>
   1e1f4:	mov	r3, #1
   1e1f8:	mov	r2, r3
   1e1fc:	mov	r1, r3
   1e200:	ldr	r0, [fp]
   1e204:	bl	26644 <flatcc_builder_table_add@@Base>
   1e208:	cmp	r0, #0
   1e20c:	beq	1f73c <_start@@Base+0xcd38>
   1e210:	add	r3, sp, #656	; 0x290
   1e214:	ldrsb	r3, [r3]
   1e218:	strb	r3, [r0]
   1e21c:	b	1df8c <_start@@Base+0xb588>
   1e220:	add	r4, r7, #1
   1e224:	sub	r3, r5, r4
   1e228:	cmp	r3, #1
   1e22c:	ble	1e240 <_start@@Base+0xb83c>
   1e230:	ldrb	r3, [r7, #1]
   1e234:	cmp	r3, #32
   1e238:	bhi	1e008 <_start@@Base+0xb604>
   1e23c:	beq	1ff18 <_start@@Base+0xd514>
   1e240:	mov	r1, r4
   1e244:	mov	r2, r5
   1e248:	mov	r0, fp
   1e24c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1e250:	ldr	r3, [sp, #660]	; 0x294
   1e254:	mov	r4, r0
   1e258:	b	1dd70 <_start@@Base+0xb36c>
   1e25c:	nop			; (mov r0, r0)
   1e260:	eorsvc	r0, r2, #0
   1e264:	cmnvs	pc, #28416	; 0x6f00
   1e268:	andvc	r0, r0, #0
   1e26c:	cmnvs	pc, #28416	; 0x6f00
   1e270:	andeq	r0, r0, r0
   1e274:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   1e278:			; <UNDEFINED> instruction: 0xffff0000
   1e27c:	strbvc	r0, [r3, #-0]!
   1e280:	cmp	r8, #3
   1e284:	ble	1df78 <_start@@Base+0xb574>
   1e288:	mov	r3, #3
   1e28c:	mov	r2, r5
   1e290:	mov	r1, r4
   1e294:	mov	r0, fp
   1e298:	bl	17fac <_start@@Base+0x55a8>
   1e29c:	cmp	r0, r4
   1e2a0:	mov	r6, r0
   1e2a4:	beq	1df78 <_start@@Base+0xb574>
   1e2a8:	mov	r0, #0
   1e2ac:	mov	r1, #0
   1e2b0:	add	r2, sp, #672	; 0x2a0
   1e2b4:	mov	r3, #0
   1e2b8:	cmp	r5, r6
   1e2bc:	strd	r0, [r2]
   1e2c0:	strb	r3, [sp, #656]	; 0x290
   1e2c4:	str	r3, [sp, #664]	; 0x298
   1e2c8:	beq	20f9c <_start@@Base+0xe598>
   1e2cc:	str	r2, [sp]
   1e2d0:	add	r3, sp, #664	; 0x298
   1e2d4:	mov	r2, r5
   1e2d8:	mov	r1, r6
   1e2dc:	mov	r0, fp
   1e2e0:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1e2e4:	cmp	r6, r0
   1e2e8:	mov	r7, r0
   1e2ec:	beq	20f9c <_start@@Base+0xe598>
   1e2f0:	ldr	r3, [sp, #664]	; 0x298
   1e2f4:	cmp	r3, #0
   1e2f8:	bne	200fc <_start@@Base+0xd6f8>
   1e2fc:	add	r3, sp, #672	; 0x2a0
   1e300:	ldrd	r2, [r3]
   1e304:	cmp	r3, #0
   1e308:	cmpeq	r2, #255	; 0xff
   1e30c:	uxtbls	r2, r2
   1e310:	strbls	r2, [sp, #656]	; 0x290
   1e314:	bhi	2029c <_start@@Base+0xd898>
   1e318:	cmp	r2, #2
   1e31c:	bne	1e32c <_start@@Base+0xb928>
   1e320:	ldr	r3, [fp, #8]
   1e324:	tst	r3, #2
   1e328:	beq	1df8c <_start@@Base+0xb588>
   1e32c:	mov	r3, #1
   1e330:	mov	r2, r3
   1e334:	mov	r1, #3
   1e338:	ldr	r0, [fp]
   1e33c:	bl	26644 <flatcc_builder_table_add@@Base>
   1e340:	cmp	r0, #0
   1e344:	beq	1f73c <_start@@Base+0xcd38>
   1e348:	ldrb	r3, [sp, #656]	; 0x290
   1e34c:	strb	r3, [r0]
   1e350:	b	1df8c <_start@@Base+0xb588>
   1e354:	add	r5, r4, #8
   1e358:	sub	ip, fp, r5
   1e35c:	cmp	ip, #8
   1e360:	bls	1f4d4 <_start@@Base+0xcad0>
   1e364:	ldrb	r0, [r4, #14]
   1e368:	mov	r3, #0
   1e36c:	lsl	r1, r0, #8
   1e370:	str	r1, [sp, #632]	; 0x278
   1e374:	add	r1, sp, #632	; 0x278
   1e378:	lsr	lr, r0, #24
   1e37c:	str	lr, [sp, #636]	; 0x27c
   1e380:	ldrd	r0, [r1]
   1e384:	orr	r1, r1, r3
   1e388:	mov	r3, r1
   1e38c:	ldrb	r0, [r4, #13]
   1e390:	lsl	r1, r0, #16
   1e394:	str	r1, [sp, #624]	; 0x270
   1e398:	add	r1, sp, #624	; 0x270
   1e39c:	lsr	lr, r0, #16
   1e3a0:	str	lr, [sp, #628]	; 0x274
   1e3a4:	ldrd	r0, [r1]
   1e3a8:	orr	r1, r1, r3
   1e3ac:	mov	r3, r1
   1e3b0:	ldrb	r0, [r4, #12]
   1e3b4:	lsl	r1, r0, #24
   1e3b8:	str	r1, [sp, #600]	; 0x258
   1e3bc:	add	r1, sp, #600	; 0x258
   1e3c0:	lsr	lr, r0, #8
   1e3c4:	str	lr, [sp, #604]	; 0x25c
   1e3c8:	ldrd	r0, [r1]
   1e3cc:	orr	r1, r1, r3
   1e3d0:	mov	r3, r1
   1e3d4:	ldrb	r1, [r4, #11]
   1e3d8:	str	r1, [sp, #612]	; 0x264
   1e3dc:	mov	r1, #0
   1e3e0:	str	r1, [sp, #608]	; 0x260
   1e3e4:	add	r1, sp, #608	; 0x260
   1e3e8:	ldrd	r0, [r1]
   1e3ec:	orr	r1, r1, r3
   1e3f0:	mov	r3, r1
   1e3f4:	ldrb	r0, [r4, #10]
   1e3f8:	lsl	r1, r0, #8
   1e3fc:	str	r1, [sp, #588]	; 0x24c
   1e400:	mov	r1, #0
   1e404:	str	r1, [sp, #584]	; 0x248
   1e408:	add	r1, sp, #584	; 0x248
   1e40c:	ldrd	r0, [r1]
   1e410:	orr	r1, r1, r3
   1e414:	mov	r3, r1
   1e418:	ldrb	r0, [r4, #9]
   1e41c:	lsl	r1, r0, #16
   1e420:	str	r1, [sp, #572]	; 0x23c
   1e424:	mov	r1, #0
   1e428:	str	r1, [sp, #568]	; 0x238
   1e42c:	add	r1, sp, #568	; 0x238
   1e430:	ldrd	r0, [r1]
   1e434:	orr	r1, r1, r3
   1e438:	mov	r3, r1
   1e43c:	ldrb	r0, [r4, #8]
   1e440:	add	lr, sp, #528	; 0x210
   1e444:	mov	r2, #0
   1e448:	lsl	r1, r0, #24
   1e44c:	str	r1, [sp, #532]	; 0x214
   1e450:	mov	r1, #0
   1e454:	str	r1, [sp, #528]	; 0x210
   1e458:	ldrd	r8, [lr]
   1e45c:	add	r1, pc, #244	; 0xf4
   1e460:	ldrd	r0, [r1]
   1e464:	orr	r9, r9, r3
   1e468:	cmp	r9, r1
   1e46c:	cmpeq	r2, r0
   1e470:	bne	1e47c <_start@@Base+0xba78>
   1e474:	cmp	ip, #4
   1e478:	bgt	1fff4 <_start@@Base+0xd5f0>
   1e47c:	mov	r1, r5
   1e480:	mov	r2, fp
   1e484:	mov	r0, r7
   1e488:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1e48c:	mov	sl, r0
   1e490:	b	1dc08 <_start@@Base+0xb204>
   1e494:	ldrb	r3, [r7, #1]
   1e498:	cmp	r3, #32
   1e49c:	addhi	r7, r7, #1
   1e4a0:	bls	1dfa8 <_start@@Base+0xb5a4>
   1e4a4:	cmp	r5, r7
   1e4a8:	bne	1dfc4 <_start@@Base+0xb5c0>
   1e4ac:	mov	r3, #0
   1e4b0:	str	r3, [sp, #660]	; 0x294
   1e4b4:	ldr	r3, [fp, #24]
   1e4b8:	mov	r4, r5
   1e4bc:	cmp	r3, #0
   1e4c0:	bne	1e014 <_start@@Base+0xb610>
   1e4c4:	b	1f65c <_start@@Base+0xcc58>
   1e4c8:	add	r4, sl, #1
   1e4cc:	sub	r3, r5, r4
   1e4d0:	cmp	r3, #1
   1e4d4:	ble	1e4e8 <_start@@Base+0xbae4>
   1e4d8:	ldrb	r3, [sl, #1]
   1e4dc:	cmp	r3, #32
   1e4e0:	bhi	1f638 <_start@@Base+0xcc34>
   1e4e4:	beq	200e8 <_start@@Base+0xd6e4>
   1e4e8:	mov	r1, r4
   1e4ec:	mov	r2, r5
   1e4f0:	mov	r0, fp
   1e4f4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1e4f8:	ldr	r3, [sp, #640]	; 0x280
   1e4fc:	mov	r4, r0
   1e500:	b	1da00 <_start@@Base+0xaffc>
   1e504:	add	r4, r7, #1
   1e508:	sub	r3, r5, r4
   1e50c:	cmp	r3, #1
   1e510:	ble	1e524 <_start@@Base+0xbb20>
   1e514:	ldrb	r3, [r7, #1]
   1e518:	cmp	r3, #32
   1e51c:	bhi	1e538 <_start@@Base+0xbb34>
   1e520:	beq	20200 <_start@@Base+0xd7fc>
   1e524:	mov	r1, r4
   1e528:	mov	r2, r5
   1e52c:	mov	r0, fp
   1e530:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1e534:	mov	r4, r0
   1e538:	cmp	r5, r4
   1e53c:	beq	211f0 <_start@@Base+0xe7ec>
   1e540:	ldrb	r3, [r4]
   1e544:	cmp	r3, #125	; 0x7d
   1e548:	beq	20510 <_start@@Base+0xdb0c>
   1e54c:	mov	r3, #1
   1e550:	str	r3, [sp, #660]	; 0x294
   1e554:	b	1dd78 <_start@@Base+0xb374>
   1e558:	andeq	r0, r0, r0
   1e55c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1e560:	bvs	1cfa320 <__bss_end__@@Base+0x1cb8f5c>
   1e564:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e568:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1e56c:	rsbsvc	r6, r2, r6, ror #10
   1e570:	cmp	r5, #6
   1e574:	ble	1dbf4 <_start@@Base+0xb1f0>
   1e578:	mov	r3, #6
   1e57c:	mov	r2, fp
   1e580:	mov	r1, r4
   1e584:	mov	r0, r7
   1e588:	bl	17fac <_start@@Base+0x55a8>
   1e58c:	cmp	r0, r4
   1e590:	mov	sl, r0
   1e594:	beq	1dbf4 <_start@@Base+0xb1f0>
   1e598:	mov	r1, #3
   1e59c:	ldr	r0, [r7]
   1e5a0:	bl	244d8 <flatcc_builder_start_table@@Base>
   1e5a4:	cmp	r0, #0
   1e5a8:	bne	1eae8 <_start@@Base+0xc0e4>
   1e5ac:	mov	r1, sl
   1e5b0:	add	r3, sp, #648	; 0x288
   1e5b4:	mov	r2, fp
   1e5b8:	mov	r0, r7
   1e5bc:	bl	133b4 <_start@@Base+0x9b0>
   1e5c0:	ldr	r3, [sp, #648]	; 0x288
   1e5c4:	mov	sl, r7
   1e5c8:	cmp	r3, #0
   1e5cc:	beq	1ead4 <_start@@Base+0xc0d0>
   1e5d0:	cmp	fp, r0
   1e5d4:	beq	1eb0c <_start@@Base+0xc108>
   1e5d8:	ldrb	r3, [r0]
   1e5dc:	cmp	r3, #34	; 0x22
   1e5e0:	moveq	r3, #0
   1e5e4:	addeq	r0, r0, #1
   1e5e8:	streq	r3, [sl, #12]
   1e5ec:	beq	1e600 <_start@@Base+0xbbfc>
   1e5f0:	cmp	r3, #46	; 0x2e
   1e5f4:	movne	r3, #1
   1e5f8:	strne	r3, [sl, #12]
   1e5fc:	beq	1f490 <_start@@Base+0xca8c>
   1e600:	sub	r3, fp, r0
   1e604:	cmp	r3, #8
   1e608:	bls	1eb24 <_start@@Base+0xc120>
   1e60c:	ldrb	r2, [r0, #7]
   1e610:	mov	r3, #0
   1e614:	ldrb	r4, [r0, #6]
   1e618:	lsr	r1, r4, #24
   1e61c:	str	r1, [sp, #332]	; 0x14c
   1e620:	lsl	r1, r4, #8
   1e624:	str	r1, [sp, #328]	; 0x148
   1e628:	add	r1, sp, #328	; 0x148
   1e62c:	ldrd	r4, [r1]
   1e630:	orr	r4, r4, r2
   1e634:	orr	r5, r5, r3
   1e638:	mov	r2, r4
   1e63c:	mov	r3, r5
   1e640:	ldrb	r4, [r0, #5]
   1e644:	lsr	r1, r4, #16
   1e648:	str	r1, [sp, #204]	; 0xcc
   1e64c:	lsl	r1, r4, #16
   1e650:	str	r1, [sp, #200]	; 0xc8
   1e654:	ldrd	r4, [sp, #200]	; 0xc8
   1e658:	orr	r4, r4, r2
   1e65c:	orr	r5, r5, r3
   1e660:	mov	r2, r4
   1e664:	mov	r3, r5
   1e668:	ldrb	r4, [r0, #4]
   1e66c:	lsr	r1, r4, #8
   1e670:	str	r1, [sp, #140]	; 0x8c
   1e674:	lsl	r1, r4, #24
   1e678:	str	r1, [sp, #136]	; 0x88
   1e67c:	ldrd	r4, [sp, #136]	; 0x88
   1e680:	orr	r4, r4, r2
   1e684:	orr	r5, r5, r3
   1e688:	mov	r2, r4
   1e68c:	mov	r3, r5
   1e690:	ldrb	r1, [r0, #3]
   1e694:	str	r1, [sp, #156]	; 0x9c
   1e698:	mov	r1, #0
   1e69c:	str	r1, [sp, #152]	; 0x98
   1e6a0:	ldrd	r4, [sp, #152]	; 0x98
   1e6a4:	orr	r4, r4, r2
   1e6a8:	orr	r5, r5, r3
   1e6ac:	mov	r2, r4
   1e6b0:	mov	r3, r5
   1e6b4:	ldrb	r4, [r0, #2]
   1e6b8:	lsl	r1, r4, #8
   1e6bc:	str	r1, [sp, #108]	; 0x6c
   1e6c0:	mov	r1, #0
   1e6c4:	str	r1, [sp, #104]	; 0x68
   1e6c8:	ldrd	r4, [sp, #104]	; 0x68
   1e6cc:	orr	r4, r4, r2
   1e6d0:	orr	r5, r5, r3
   1e6d4:	mov	r2, r4
   1e6d8:	mov	r3, r5
   1e6dc:	ldrb	r4, [r0, #1]
   1e6e0:	lsl	r1, r4, #16
   1e6e4:	str	r1, [sp, #76]	; 0x4c
   1e6e8:	mov	r1, #0
   1e6ec:	str	r1, [sp, #72]	; 0x48
   1e6f0:	ldrd	r4, [sp, #72]	; 0x48
   1e6f4:	orr	r4, r4, r2
   1e6f8:	orr	r5, r5, r3
   1e6fc:	mov	r2, r4
   1e700:	mov	r3, r5
   1e704:	ldrb	r4, [r0]
   1e708:	lsl	r1, r4, #24
   1e70c:	str	r1, [sp, #52]	; 0x34
   1e710:	mov	r1, #0
   1e714:	str	r1, [sp, #48]	; 0x30
   1e718:	ldrd	r4, [sp, #48]	; 0x30
   1e71c:	orr	r4, r4, r2
   1e720:	orr	r5, r5, r3
   1e724:	mov	r2, r4
   1e728:	mov	r3, r5
   1e72c:	sub	r5, pc, #468	; 0x1d4
   1e730:	ldrd	r4, [r5]
   1e734:	cmp	r3, r5
   1e738:	cmpeq	r2, r4
   1e73c:	bne	1eb0c <_start@@Base+0xc108>
   1e740:	add	r1, r0, #8
   1e744:	sub	r3, fp, r1
   1e748:	cmp	r3, #8
   1e74c:	bls	1eba8 <_start@@Base+0xc1a4>
   1e750:	ldrb	r2, [r0, #15]
   1e754:	mov	r3, #0
   1e758:	ldrb	r4, [r0, #14]
   1e75c:	lsr	ip, r4, #24
   1e760:	str	ip, [sp, #492]	; 0x1ec
   1e764:	lsl	ip, r4, #8
   1e768:	str	ip, [sp, #488]	; 0x1e8
   1e76c:	add	ip, sp, #488	; 0x1e8
   1e770:	ldrd	r4, [ip]
   1e774:	orr	r4, r4, r2
   1e778:	orr	r5, r5, r3
   1e77c:	mov	r2, r4
   1e780:	mov	r3, r5
   1e784:	ldrb	r4, [r0, #13]
   1e788:	lsr	ip, r4, #16
   1e78c:	str	ip, [sp, #412]	; 0x19c
   1e790:	lsl	ip, r4, #16
   1e794:	str	ip, [sp, #408]	; 0x198
   1e798:	add	ip, sp, #408	; 0x198
   1e79c:	ldrd	r4, [ip]
   1e7a0:	orr	r4, r4, r2
   1e7a4:	orr	r5, r5, r3
   1e7a8:	mov	r2, r4
   1e7ac:	mov	r3, r5
   1e7b0:	ldrb	r4, [r0, #12]
   1e7b4:	lsr	ip, r4, #8
   1e7b8:	str	ip, [sp, #340]	; 0x154
   1e7bc:	lsl	ip, r4, #24
   1e7c0:	str	ip, [sp, #336]	; 0x150
   1e7c4:	add	ip, sp, #336	; 0x150
   1e7c8:	ldrd	r4, [ip]
   1e7cc:	orr	r4, r4, r2
   1e7d0:	orr	r5, r5, r3
   1e7d4:	mov	r2, r4
   1e7d8:	mov	r3, r5
   1e7dc:	ldrb	ip, [r0, #11]
   1e7e0:	str	ip, [sp, #364]	; 0x16c
   1e7e4:	mov	ip, #0
   1e7e8:	str	ip, [sp, #360]	; 0x168
   1e7ec:	add	ip, sp, #360	; 0x168
   1e7f0:	ldrd	r4, [ip]
   1e7f4:	orr	r4, r4, r2
   1e7f8:	orr	r5, r5, r3
   1e7fc:	mov	r2, r4
   1e800:	mov	r3, r5
   1e804:	ldrb	r4, [r0, #10]
   1e808:	lsl	ip, r4, #8
   1e80c:	str	ip, [sp, #300]	; 0x12c
   1e810:	mov	ip, #0
   1e814:	str	ip, [sp, #296]	; 0x128
   1e818:	add	ip, sp, #296	; 0x128
   1e81c:	ldrd	r4, [ip]
   1e820:	orr	r4, r4, r2
   1e824:	orr	r5, r5, r3
   1e828:	mov	r2, r4
   1e82c:	mov	r3, r5
   1e830:	ldrb	r4, [r0, #9]
   1e834:	lsl	ip, r4, #16
   1e838:	str	ip, [sp, #252]	; 0xfc
   1e83c:	mov	ip, #0
   1e840:	str	ip, [sp, #248]	; 0xf8
   1e844:	ldrd	r4, [sp, #248]	; 0xf8
   1e848:	orr	r4, r4, r2
   1e84c:	orr	r5, r5, r3
   1e850:	mov	r2, r4
   1e854:	mov	r3, r5
   1e858:	ldrb	r4, [r0, #8]
   1e85c:	lsl	ip, r4, #24
   1e860:	str	ip, [sp, #212]	; 0xd4
   1e864:	mov	ip, #0
   1e868:	str	ip, [sp, #208]	; 0xd0
   1e86c:	ldrd	r4, [sp, #208]	; 0xd0
   1e870:	orr	r4, r4, r2
   1e874:	orr	r5, r5, r3
   1e878:	mov	r2, r4
   1e87c:	mov	r3, r5
   1e880:	sub	r5, pc, #800	; 0x320
   1e884:	ldrd	r4, [r5]
   1e888:	cmp	r3, r5
   1e88c:	cmpeq	r2, r4
   1e890:	bne	1eb10 <_start@@Base+0xc10c>
   1e894:	add	r5, r0, #16
   1e898:	sub	r4, fp, r5
   1e89c:	cmp	r4, #8
   1e8a0:	bls	1ece0 <_start@@Base+0xc2dc>
   1e8a4:	ldrb	r2, [r0, #23]
   1e8a8:	mov	r3, #0
   1e8ac:	ldrb	r6, [r0, #22]
   1e8b0:	lsr	r1, r6, #24
   1e8b4:	str	r1, [sp, #596]	; 0x254
   1e8b8:	lsl	r1, r6, #8
   1e8bc:	str	r1, [sp, #592]	; 0x250
   1e8c0:	add	r1, sp, #592	; 0x250
   1e8c4:	ldrd	r6, [r1]
   1e8c8:	orr	r6, r6, r2
   1e8cc:	orr	r7, r7, r3
   1e8d0:	mov	r2, r6
   1e8d4:	mov	r3, r7
   1e8d8:	ldrb	r6, [r0, #21]
   1e8dc:	lsr	r1, r6, #16
   1e8e0:	str	r1, [sp, #564]	; 0x234
   1e8e4:	lsl	r1, r6, #16
   1e8e8:	str	r1, [sp, #560]	; 0x230
   1e8ec:	add	r1, sp, #560	; 0x230
   1e8f0:	ldrd	r6, [r1]
   1e8f4:	orr	r6, r6, r2
   1e8f8:	orr	r7, r7, r3
   1e8fc:	mov	r2, r6
   1e900:	mov	r3, r7
   1e904:	ldrb	r6, [r0, #20]
   1e908:	lsr	r1, r6, #8
   1e90c:	str	r1, [sp, #500]	; 0x1f4
   1e910:	lsl	r1, r6, #24
   1e914:	str	r1, [sp, #496]	; 0x1f0
   1e918:	add	r1, sp, #496	; 0x1f0
   1e91c:	ldrd	r6, [r1]
   1e920:	orr	r6, r6, r2
   1e924:	orr	r7, r7, r3
   1e928:	mov	r2, r6
   1e92c:	mov	r3, r7
   1e930:	ldrb	r1, [r0, #19]
   1e934:	str	r1, [sp, #516]	; 0x204
   1e938:	mov	r1, #0
   1e93c:	str	r1, [sp, #512]	; 0x200
   1e940:	add	r1, sp, #512	; 0x200
   1e944:	ldrd	r6, [r1]
   1e948:	orr	r6, r6, r2
   1e94c:	orr	r7, r7, r3
   1e950:	mov	r2, r6
   1e954:	mov	r3, r7
   1e958:	ldrb	r6, [r0, #18]
   1e95c:	lsl	r1, r6, #8
   1e960:	str	r1, [sp, #476]	; 0x1dc
   1e964:	mov	r1, #0
   1e968:	str	r1, [sp, #472]	; 0x1d8
   1e96c:	add	r1, sp, #472	; 0x1d8
   1e970:	ldrd	r6, [r1]
   1e974:	orr	r6, r6, r2
   1e978:	orr	r7, r7, r3
   1e97c:	mov	r2, r6
   1e980:	mov	r3, r7
   1e984:	ldrb	r6, [r0, #17]
   1e988:	lsl	r1, r6, #16
   1e98c:	str	r1, [sp, #452]	; 0x1c4
   1e990:	mov	r1, #0
   1e994:	str	r1, [sp, #448]	; 0x1c0
   1e998:	add	r1, sp, #448	; 0x1c0
   1e99c:	ldrd	r6, [r1]
   1e9a0:	orr	r6, r6, r2
   1e9a4:	orr	r7, r7, r3
   1e9a8:	mov	r2, r6
   1e9ac:	mov	r3, r7
   1e9b0:	ldrb	r6, [r0, #16]
   1e9b4:	add	r1, pc, #940	; 0x3ac
   1e9b8:	ldrd	r0, [r1]
   1e9bc:	lsl	ip, r6, #24
   1e9c0:	str	ip, [sp, #396]	; 0x18c
   1e9c4:	mov	ip, #0
   1e9c8:	str	ip, [sp, #392]	; 0x188
   1e9cc:	add	ip, sp, #392	; 0x188
   1e9d0:	ldrd	r6, [ip]
   1e9d4:	orr	r6, r6, r2
   1e9d8:	orr	r7, r7, r3
   1e9dc:	mov	r2, r6
   1e9e0:	mov	r3, r7
   1e9e4:	ldr	r6, [pc, #916]	; 1ed80 <_start@@Base+0xc37c>
   1e9e8:	mvn	r7, #0
   1e9ec:	and	r7, r7, r3
   1e9f0:	and	r6, r6, r2
   1e9f4:	cmp	r7, r1
   1e9f8:	cmpeq	r6, r0
   1e9fc:	beq	1ed88 <_start@@Base+0xc384>
   1ea00:	add	r1, pc, #872	; 0x368
   1ea04:	ldrd	r0, [r1]
   1ea08:	and	r2, r2, #-16777216	; 0xff000000
   1ea0c:	cmp	r3, r1
   1ea10:	cmpeq	r2, r0
   1ea14:	movne	r8, #1
   1ea18:	moveq	r8, #0
   1ea1c:	cmp	r4, #5
   1ea20:	orrle	r8, r8, #1
   1ea24:	cmp	r8, #0
   1ea28:	beq	20090 <_start@@Base+0xd68c>
   1ea2c:	add	r3, pc, #836	; 0x344
   1ea30:	ldrd	r2, [r3]
   1ea34:	cmp	r7, r3
   1ea38:	cmpeq	r6, r2
   1ea3c:	bne	1ea48 <_start@@Base+0xc044>
   1ea40:	cmp	r4, #6
   1ea44:	bgt	1fe54 <_start@@Base+0xd450>
   1ea48:	mov	r1, r5
   1ea4c:	mov	r2, fp
   1ea50:	mov	r0, sl
   1ea54:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1ea58:	mov	r9, r0
   1ea5c:	sub	r3, fp, r9
   1ea60:	cmp	r3, #1
   1ea64:	ble	1ea78 <_start@@Base+0xc074>
   1ea68:	ldrb	r3, [r9]
   1ea6c:	cmp	r3, #32
   1ea70:	bhi	1ea8c <_start@@Base+0xc088>
   1ea74:	beq	1ec64 <_start@@Base+0xc260>
   1ea78:	mov	r1, r9
   1ea7c:	mov	r2, fp
   1ea80:	mov	r0, sl
   1ea84:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1ea88:	mov	r9, r0
   1ea8c:	cmp	fp, r9
   1ea90:	beq	1ec7c <_start@@Base+0xc278>
   1ea94:	ldrb	r3, [r9]
   1ea98:	cmp	r3, #44	; 0x2c
   1ea9c:	beq	1ec90 <_start@@Base+0xc28c>
   1eaa0:	mov	r3, #0
   1eaa4:	str	r3, [sp, #648]	; 0x288
   1eaa8:	ldrb	r3, [r9]
   1eaac:	cmp	r3, #125	; 0x7d
   1eab0:	beq	1ec2c <_start@@Base+0xc228>
   1eab4:	mov	r3, #10
   1eab8:	mov	r1, r9
   1eabc:	mov	r2, fp
   1eac0:	mov	r0, sl
   1eac4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1eac8:	ldr	r3, [sp, #648]	; 0x288
   1eacc:	cmp	r3, #0
   1ead0:	bne	1e5d0 <_start@@Base+0xbbcc>
   1ead4:	mov	r7, sl
   1ead8:	mov	sl, r0
   1eadc:	ldr	r1, [r7, #24]
   1eae0:	cmp	r1, #0
   1eae4:	beq	20fcc <_start@@Base+0xe5c8>
   1eae8:	mov	r5, fp
   1eaec:	mov	fp, r7
   1eaf0:	mov	r1, sl
   1eaf4:	mov	r3, #33	; 0x21
   1eaf8:	mov	r2, r5
   1eafc:	mov	r0, fp
   1eb00:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1eb04:	mov	r4, r0
   1eb08:	b	1e014 <_start@@Base+0xb610>
   1eb0c:	mov	r1, r0
   1eb10:	mov	r2, fp
   1eb14:	mov	r0, sl
   1eb18:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1eb1c:	mov	r9, r0
   1eb20:	b	1ea5c <_start@@Base+0xc058>
   1eb24:	sub	r3, r3, #1
   1eb28:	cmp	r3, #7
   1eb2c:	ldrls	pc, [pc, r3, lsl #2]
   1eb30:	b	1eb0c <_start@@Base+0xc108>
   1eb34:	muleq	r1, ip, fp
   1eb38:	muleq	r1, r0, fp
   1eb3c:	andeq	lr, r1, r4, lsl #23
   1eb40:	andeq	lr, r1, r8, ror fp
   1eb44:	andeq	lr, r1, ip, ror #22
   1eb48:	andeq	lr, r1, r0, ror #22
   1eb4c:	andeq	lr, r1, r4, asr fp
   1eb50:	andeq	lr, r1, ip, lsl #12
   1eb54:	mov	r2, #0
   1eb58:	mov	r3, #0
   1eb5c:	b	1e614 <_start@@Base+0xbc10>
   1eb60:	mov	r2, #0
   1eb64:	mov	r3, #0
   1eb68:	b	1e640 <_start@@Base+0xbc3c>
   1eb6c:	mov	r2, #0
   1eb70:	mov	r3, #0
   1eb74:	b	1e668 <_start@@Base+0xbc64>
   1eb78:	mov	r2, #0
   1eb7c:	mov	r3, #0
   1eb80:	b	1e690 <_start@@Base+0xbc8c>
   1eb84:	mov	r2, #0
   1eb88:	mov	r3, #0
   1eb8c:	b	1e6b4 <_start@@Base+0xbcb0>
   1eb90:	mov	r2, #0
   1eb94:	mov	r3, #0
   1eb98:	b	1e6dc <_start@@Base+0xbcd8>
   1eb9c:	mov	r2, #0
   1eba0:	mov	r3, #0
   1eba4:	b	1e704 <_start@@Base+0xbd00>
   1eba8:	sub	r3, r3, #1
   1ebac:	cmp	r3, #7
   1ebb0:	ldrls	pc, [pc, r3, lsl #2]
   1ebb4:	b	1eb10 <_start@@Base+0xc10c>
   1ebb8:	andeq	lr, r1, r0, lsr #24
   1ebbc:	andeq	lr, r1, r4, lsl ip
   1ebc0:	andeq	lr, r1, r8, lsl #24
   1ebc4:	strdeq	lr, [r1], -ip
   1ebc8:	strdeq	lr, [r1], -r0
   1ebcc:	andeq	lr, r1, r4, ror #23
   1ebd0:	ldrdeq	lr, [r1], -r8
   1ebd4:	andeq	lr, r1, r0, asr r7
   1ebd8:	mov	r2, #0
   1ebdc:	mov	r3, #0
   1ebe0:	b	1e758 <_start@@Base+0xbd54>
   1ebe4:	mov	r2, #0
   1ebe8:	mov	r3, #0
   1ebec:	b	1e784 <_start@@Base+0xbd80>
   1ebf0:	mov	r2, #0
   1ebf4:	mov	r3, #0
   1ebf8:	b	1e7b0 <_start@@Base+0xbdac>
   1ebfc:	mov	r2, #0
   1ec00:	mov	r3, #0
   1ec04:	b	1e7dc <_start@@Base+0xbdd8>
   1ec08:	mov	r2, #0
   1ec0c:	mov	r3, #0
   1ec10:	b	1e804 <_start@@Base+0xbe00>
   1ec14:	mov	r2, #0
   1ec18:	mov	r3, #0
   1ec1c:	b	1e830 <_start@@Base+0xbe2c>
   1ec20:	mov	r2, #0
   1ec24:	mov	r3, #0
   1ec28:	b	1e858 <_start@@Base+0xbe54>
   1ec2c:	add	r0, r9, #1
   1ec30:	sub	r3, fp, r0
   1ec34:	cmp	r3, #1
   1ec38:	ble	1ec4c <_start@@Base+0xc248>
   1ec3c:	ldrb	r3, [r9, #1]
   1ec40:	cmp	r3, #32
   1ec44:	bhi	1ead4 <_start@@Base+0xc0d0>
   1ec48:	beq	1f898 <_start@@Base+0xce94>
   1ec4c:	mov	r1, r0
   1ec50:	mov	r2, fp
   1ec54:	mov	r0, sl
   1ec58:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1ec5c:	ldr	r3, [sp, #648]	; 0x288
   1ec60:	b	1e5c8 <_start@@Base+0xbbc4>
   1ec64:	ldrb	r3, [r9, #1]
   1ec68:	cmp	r3, #32
   1ec6c:	addhi	r9, r9, #1
   1ec70:	bls	1ea78 <_start@@Base+0xc074>
   1ec74:	cmp	fp, r9
   1ec78:	bne	1ea94 <_start@@Base+0xc090>
   1ec7c:	mov	r3, #0
   1ec80:	mov	r7, sl
   1ec84:	str	r3, [sp, #648]	; 0x288
   1ec88:	mov	sl, fp
   1ec8c:	b	1eadc <_start@@Base+0xc0d8>
   1ec90:	add	r0, r9, #1
   1ec94:	sub	r3, fp, r0
   1ec98:	cmp	r3, #1
   1ec9c:	ble	1ecb0 <_start@@Base+0xc2ac>
   1eca0:	ldrb	r3, [r9, #1]
   1eca4:	cmp	r3, #32
   1eca8:	bhi	1ecc0 <_start@@Base+0xc2bc>
   1ecac:	beq	1ff2c <_start@@Base+0xd528>
   1ecb0:	mov	r1, r0
   1ecb4:	mov	r2, fp
   1ecb8:	mov	r0, sl
   1ecbc:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1ecc0:	cmp	fp, r0
   1ecc4:	beq	210a4 <_start@@Base+0xe6a0>
   1ecc8:	ldrb	r3, [r0]
   1eccc:	cmp	r3, #125	; 0x7d
   1ecd0:	beq	201c4 <_start@@Base+0xd7c0>
   1ecd4:	mov	r3, #1
   1ecd8:	str	r3, [sp, #648]	; 0x288
   1ecdc:	b	1e5d0 <_start@@Base+0xbbcc>
   1ece0:	sub	r3, r4, #1
   1ece4:	cmp	r3, #7
   1ece8:	ldrls	pc, [pc, r3, lsl #2]
   1ecec:	b	1ea48 <_start@@Base+0xc044>
   1ecf0:	andeq	lr, r1, r8, asr sp
   1ecf4:	andeq	lr, r1, ip, asr #26
   1ecf8:	andeq	lr, r1, r0, asr #26
   1ecfc:	andeq	lr, r1, r4, lsr sp
   1ed00:	andeq	lr, r1, r8, lsr #26
   1ed04:	andeq	lr, r1, ip, lsl sp
   1ed08:	andeq	lr, r1, r0, lsl sp
   1ed0c:	andeq	lr, r1, r4, lsr #17
   1ed10:	mov	r2, #0
   1ed14:	mov	r3, #0
   1ed18:	b	1e8ac <_start@@Base+0xbea8>
   1ed1c:	mov	r2, #0
   1ed20:	mov	r3, #0
   1ed24:	b	1e8d8 <_start@@Base+0xbed4>
   1ed28:	mov	r2, #0
   1ed2c:	mov	r3, #0
   1ed30:	b	1e904 <_start@@Base+0xbf00>
   1ed34:	mov	r2, #0
   1ed38:	mov	r3, #0
   1ed3c:	b	1e930 <_start@@Base+0xbf2c>
   1ed40:	mov	r2, #0
   1ed44:	mov	r3, #0
   1ed48:	b	1e958 <_start@@Base+0xbf54>
   1ed4c:	mov	r2, #0
   1ed50:	mov	r3, #0
   1ed54:	b	1e984 <_start@@Base+0xbf80>
   1ed58:	mov	r2, #0
   1ed5c:	mov	r3, #0
   1ed60:	b	1e9b0 <_start@@Base+0xbfac>
   1ed64:	nop			; (mov r0, r0)
   1ed68:	ldrvs	r0, [r2, -r0]!
   1ed6c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ed70:	strvs	r0, [r0, -r0]
   1ed74:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ed78:	ldrvs	r0, [r3, -r0]!
   1ed7c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ed80:			; <UNDEFINED> instruction: 0xffff0000
   1ed84:	ldrdeq	r1, [r4], -r0
   1ed88:	cmp	r4, #6
   1ed8c:	ble	1ea48 <_start@@Base+0xc044>
   1ed90:	mov	r3, #6
   1ed94:	mov	r2, fp
   1ed98:	mov	r1, r5
   1ed9c:	mov	r0, sl
   1eda0:	bl	17fac <_start@@Base+0x55a8>
   1eda4:	cmp	r5, r0
   1eda8:	mov	r9, r0
   1edac:	beq	1ea48 <_start@@Base+0xc044>
   1edb0:	ldr	r3, [sp, #392]	; 0x188
   1edb4:	mov	r1, #2
   1edb8:	ldr	r0, [sl]
   1edbc:	str	r3, [sp, #652]	; 0x28c
   1edc0:	bl	244d8 <flatcc_builder_start_table@@Base>
   1edc4:	cmp	r0, #0
   1edc8:	bne	1f180 <_start@@Base+0xc77c>
   1edcc:	mov	r1, r9
   1edd0:	add	r3, sp, #656	; 0x290
   1edd4:	mov	r2, fp
   1edd8:	mov	r0, sl
   1eddc:	bl	133b4 <_start@@Base+0x9b0>
   1ede0:	mov	r5, #0
   1ede4:	ldr	r8, [pc, #-104]	; 1ed84 <_start@@Base+0xc380>
   1ede8:	ldr	r3, [sp, #656]	; 0x290
   1edec:	mov	r6, r5
   1edf0:	mov	r9, sl
   1edf4:	mov	r7, fp
   1edf8:	cmp	r3, #0
   1edfc:	beq	1f168 <_start@@Base+0xc764>
   1ee00:	mov	r1, r0
   1ee04:	cmp	r7, r1
   1ee08:	beq	1f1c4 <_start@@Base+0xc7c0>
   1ee0c:	ldrb	r3, [r1]
   1ee10:	cmp	r3, #34	; 0x22
   1ee14:	moveq	r3, #0
   1ee18:	addeq	r1, r1, #1
   1ee1c:	streq	r3, [r9, #12]
   1ee20:	beq	1ee34 <_start@@Base+0xc430>
   1ee24:	cmp	r3, #46	; 0x2e
   1ee28:	movne	r3, #1
   1ee2c:	strne	r3, [r9, #12]
   1ee30:	beq	1f4a8 <_start@@Base+0xcaa4>
   1ee34:	sub	r3, r7, r1
   1ee38:	cmp	r3, #8
   1ee3c:	bls	1f1d8 <_start@@Base+0xc7d4>
   1ee40:	ldrb	sl, [r1, #7]
   1ee44:	mov	fp, #0
   1ee48:	ldrb	r2, [r1, #6]
   1ee4c:	lsl	r3, r2, #8
   1ee50:	str	r3, [sp, #344]	; 0x158
   1ee54:	add	r3, sp, #344	; 0x158
   1ee58:	lsr	r0, r2, #24
   1ee5c:	str	r0, [sp, #348]	; 0x15c
   1ee60:	ldrd	r2, [r3]
   1ee64:	orr	r2, r2, sl
   1ee68:	orr	r3, r3, fp
   1ee6c:	ldrb	sl, [r1, #5]
   1ee70:	lsr	r0, sl, #16
   1ee74:	str	r0, [sp, #220]	; 0xdc
   1ee78:	lsl	r0, sl, #16
   1ee7c:	str	r0, [sp, #216]	; 0xd8
   1ee80:	ldrd	sl, [sp, #216]	; 0xd8
   1ee84:	orr	sl, sl, r2
   1ee88:	orr	fp, fp, r3
   1ee8c:	mov	r2, sl
   1ee90:	mov	r3, fp
   1ee94:	ldrb	sl, [r1, #4]
   1ee98:	lsr	r0, sl, #8
   1ee9c:	str	r0, [sp, #148]	; 0x94
   1eea0:	lsl	r0, sl, #24
   1eea4:	str	r0, [sp, #144]	; 0x90
   1eea8:	ldrd	sl, [sp, #144]	; 0x90
   1eeac:	orr	sl, sl, r2
   1eeb0:	orr	fp, fp, r3
   1eeb4:	mov	r2, sl
   1eeb8:	mov	r3, fp
   1eebc:	ldrb	r0, [r1, #3]
   1eec0:	str	r0, [sp, #164]	; 0xa4
   1eec4:	mov	r0, #0
   1eec8:	str	r0, [sp, #160]	; 0xa0
   1eecc:	ldrd	sl, [sp, #160]	; 0xa0
   1eed0:	orr	sl, sl, r2
   1eed4:	orr	fp, fp, r3
   1eed8:	mov	r2, sl
   1eedc:	mov	r3, fp
   1eee0:	ldrb	sl, [r1, #2]
   1eee4:	lsl	r0, sl, #8
   1eee8:	str	r0, [sp, #116]	; 0x74
   1eeec:	mov	r0, #0
   1eef0:	str	r0, [sp, #112]	; 0x70
   1eef4:	ldrd	sl, [sp, #112]	; 0x70
   1eef8:	orr	sl, sl, r2
   1eefc:	orr	fp, fp, r3
   1ef00:	mov	r2, sl
   1ef04:	mov	r3, fp
   1ef08:	ldrb	sl, [r1, #1]
   1ef0c:	lsl	r0, sl, #16
   1ef10:	str	r0, [sp, #92]	; 0x5c
   1ef14:	mov	r0, #0
   1ef18:	str	r0, [sp, #88]	; 0x58
   1ef1c:	ldrd	sl, [sp, #88]	; 0x58
   1ef20:	orr	sl, sl, r2
   1ef24:	orr	fp, fp, r3
   1ef28:	mov	r2, sl
   1ef2c:	mov	r3, fp
   1ef30:	ldrb	sl, [r1]
   1ef34:	lsl	r0, sl, #24
   1ef38:	str	r0, [sp, #60]	; 0x3c
   1ef3c:	mov	r0, #0
   1ef40:	str	r0, [sp, #56]	; 0x38
   1ef44:	ldrd	sl, [sp, #56]	; 0x38
   1ef48:	orr	sl, sl, r2
   1ef4c:	orr	fp, fp, r3
   1ef50:	mov	r2, sl
   1ef54:	mov	r3, fp
   1ef58:	add	fp, pc, #952	; 0x3b8
   1ef5c:	ldrd	sl, [fp]
   1ef60:	cmp	r3, fp
   1ef64:	cmpeq	r2, sl
   1ef68:	bne	1f1c4 <_start@@Base+0xc7c0>
   1ef6c:	add	r4, r1, #8
   1ef70:	sub	r0, r7, r4
   1ef74:	cmp	r0, #8
   1ef78:	bls	1f25c <_start@@Base+0xc858>
   1ef7c:	ldrb	sl, [r1, #15]
   1ef80:	mov	fp, #0
   1ef84:	ldrb	r2, [r1, #14]
   1ef88:	lsl	r3, r2, #8
   1ef8c:	str	r3, [sp, #504]	; 0x1f8
   1ef90:	add	r3, sp, #504	; 0x1f8
   1ef94:	lsr	ip, r2, #24
   1ef98:	str	ip, [sp, #508]	; 0x1fc
   1ef9c:	ldrd	r2, [r3]
   1efa0:	orr	r2, r2, sl
   1efa4:	orr	r3, r3, fp
   1efa8:	mov	sl, r2
   1efac:	mov	fp, r3
   1efb0:	ldrb	r2, [r1, #13]
   1efb4:	lsl	r3, r2, #16
   1efb8:	str	r3, [sp, #424]	; 0x1a8
   1efbc:	add	r3, sp, #424	; 0x1a8
   1efc0:	lsr	ip, r2, #16
   1efc4:	str	ip, [sp, #428]	; 0x1ac
   1efc8:	ldrd	r2, [r3]
   1efcc:	orr	r2, r2, sl
   1efd0:	orr	r3, r3, fp
   1efd4:	mov	sl, r2
   1efd8:	mov	fp, r3
   1efdc:	ldrb	r2, [r1, #12]
   1efe0:	lsl	r3, r2, #24
   1efe4:	str	r3, [sp, #352]	; 0x160
   1efe8:	add	r3, sp, #352	; 0x160
   1efec:	lsr	ip, r2, #8
   1eff0:	str	ip, [sp, #356]	; 0x164
   1eff4:	ldrd	r2, [r3]
   1eff8:	orr	r2, r2, sl
   1effc:	orr	r3, r3, fp
   1f000:	ldrb	ip, [r1, #11]
   1f004:	str	ip, [sp, #380]	; 0x17c
   1f008:	mov	ip, #0
   1f00c:	str	ip, [sp, #376]	; 0x178
   1f010:	add	ip, sp, #376	; 0x178
   1f014:	ldrd	sl, [ip]
   1f018:	orr	sl, sl, r2
   1f01c:	orr	fp, fp, r3
   1f020:	mov	r2, sl
   1f024:	mov	r3, fp
   1f028:	ldrb	sl, [r1, #10]
   1f02c:	lsl	ip, sl, #8
   1f030:	str	ip, [sp, #308]	; 0x134
   1f034:	mov	ip, #0
   1f038:	str	ip, [sp, #304]	; 0x130
   1f03c:	add	ip, sp, #304	; 0x130
   1f040:	ldrd	sl, [ip]
   1f044:	orr	sl, sl, r2
   1f048:	orr	fp, fp, r3
   1f04c:	mov	r2, sl
   1f050:	mov	r3, fp
   1f054:	ldrb	sl, [r1, #9]
   1f058:	lsl	ip, sl, #16
   1f05c:	str	ip, [sp, #268]	; 0x10c
   1f060:	mov	ip, #0
   1f064:	str	ip, [sp, #264]	; 0x108
   1f068:	add	ip, sp, #264	; 0x108
   1f06c:	ldrd	sl, [ip]
   1f070:	orr	sl, sl, r2
   1f074:	orr	fp, fp, r3
   1f078:	mov	r2, sl
   1f07c:	mov	r3, fp
   1f080:	ldrb	sl, [r1, #8]
   1f084:	lsl	r1, sl, #24
   1f088:	str	r1, [sp, #180]	; 0xb4
   1f08c:	mov	r1, #0
   1f090:	str	r1, [sp, #176]	; 0xb0
   1f094:	ldrd	sl, [sp, #176]	; 0xb0
   1f098:	orr	sl, sl, r2
   1f09c:	orr	fp, fp, r3
   1f0a0:	add	r3, pc, #632	; 0x278
   1f0a4:	ldrd	r2, [r3]
   1f0a8:	strd	sl, [sp, #128]	; 0x80
   1f0ac:	bic	sl, sl, #255	; 0xff
   1f0b0:	cmp	fp, r3
   1f0b4:	cmpeq	sl, r2
   1f0b8:	beq	1f360 <_start@@Base+0xc95c>
   1f0bc:	add	r3, pc, #612	; 0x264
   1f0c0:	ldrd	r2, [r3]
   1f0c4:	ldrd	sl, [sp, #128]	; 0x80
   1f0c8:	cmp	fp, r3
   1f0cc:	cmpeq	sl, r2
   1f0d0:	bne	1f0dc <_start@@Base+0xc6d8>
   1f0d4:	cmp	r0, #8
   1f0d8:	bgt	1f504 <_start@@Base+0xcb00>
   1f0dc:	mov	r1, r4
   1f0e0:	mov	r2, r7
   1f0e4:	mov	r0, r9
   1f0e8:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1f0ec:	mov	r4, r0
   1f0f0:	sub	r3, r7, r4
   1f0f4:	cmp	r3, #1
   1f0f8:	ble	1f10c <_start@@Base+0xc708>
   1f0fc:	ldrb	r3, [r4]
   1f100:	cmp	r3, #32
   1f104:	bhi	1f120 <_start@@Base+0xc71c>
   1f108:	beq	1f330 <_start@@Base+0xc92c>
   1f10c:	mov	r1, r4
   1f110:	mov	r2, r7
   1f114:	mov	r0, r9
   1f118:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1f11c:	mov	r4, r0
   1f120:	cmp	r7, r4
   1f124:	beq	1f348 <_start@@Base+0xc944>
   1f128:	ldrb	r3, [r4]
   1f12c:	cmp	r3, #44	; 0x2c
   1f130:	beq	1f440 <_start@@Base+0xca3c>
   1f134:	mov	r3, #0
   1f138:	str	r3, [sp, #656]	; 0x290
   1f13c:	ldrb	r3, [r4]
   1f140:	cmp	r3, #125	; 0x7d
   1f144:	beq	1f2e0 <_start@@Base+0xc8dc>
   1f148:	mov	r3, #10
   1f14c:	mov	r1, r4
   1f150:	mov	r2, r7
   1f154:	mov	r0, r9
   1f158:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f15c:	ldr	r3, [sp, #656]	; 0x290
   1f160:	cmp	r3, #0
   1f164:	bne	1ee00 <_start@@Base+0xc3fc>
   1f168:	mov	sl, r9
   1f16c:	mov	fp, r7
   1f170:	mov	r9, r0
   1f174:	ldr	r3, [sl, #24]
   1f178:	cmp	r3, #0
   1f17c:	beq	21040 <_start@@Base+0xe63c>
   1f180:	mov	r1, r9
   1f184:	mov	r3, #33	; 0x21
   1f188:	mov	r2, fp
   1f18c:	mov	r0, sl
   1f190:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f194:	ldr	r3, [sp, #652]	; 0x28c
   1f198:	cmp	r3, #0
   1f19c:	mov	r9, r0
   1f1a0:	beq	1ff00 <_start@@Base+0xd4fc>
   1f1a4:	mov	r1, #1
   1f1a8:	ldr	r0, [sl]
   1f1ac:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1f1b0:	cmp	r0, #0
   1f1b4:	beq	1ff00 <_start@@Base+0xd4fc>
   1f1b8:	ldr	r3, [sp, #652]	; 0x28c
   1f1bc:	str	r3, [r0]
   1f1c0:	b	1ea5c <_start@@Base+0xc058>
   1f1c4:	mov	r2, r7
   1f1c8:	mov	r0, r9
   1f1cc:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1f1d0:	mov	r4, r0
   1f1d4:	b	1f0f0 <_start@@Base+0xc6ec>
   1f1d8:	sub	r3, r3, #1
   1f1dc:	cmp	r3, #7
   1f1e0:	ldrls	pc, [pc, r3, lsl #2]
   1f1e4:	b	1f1c4 <_start@@Base+0xc7c0>
   1f1e8:	andeq	pc, r1, r0, asr r2	; <UNPREDICTABLE>
   1f1ec:	andeq	pc, r1, r4, asr #4
   1f1f0:	andeq	pc, r1, r8, lsr r2	; <UNPREDICTABLE>
   1f1f4:	andeq	pc, r1, ip, lsr #4
   1f1f8:	andeq	pc, r1, r0, lsr #4
   1f1fc:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   1f200:	andeq	pc, r1, r8, lsl #4
   1f204:	andeq	lr, r1, r0, asr #28
   1f208:	mov	sl, r5
   1f20c:	mov	fp, r6
   1f210:	b	1ee48 <_start@@Base+0xc444>
   1f214:	mov	r2, r5
   1f218:	mov	r3, r6
   1f21c:	b	1ee6c <_start@@Base+0xc468>
   1f220:	mov	r2, r5
   1f224:	mov	r3, r6
   1f228:	b	1ee94 <_start@@Base+0xc490>
   1f22c:	mov	r2, r5
   1f230:	mov	r3, r6
   1f234:	b	1eebc <_start@@Base+0xc4b8>
   1f238:	mov	r2, r5
   1f23c:	mov	r3, r6
   1f240:	b	1eee0 <_start@@Base+0xc4dc>
   1f244:	mov	r2, r5
   1f248:	mov	r3, r6
   1f24c:	b	1ef08 <_start@@Base+0xc504>
   1f250:	mov	r2, r5
   1f254:	mov	r3, r6
   1f258:	b	1ef30 <_start@@Base+0xc52c>
   1f25c:	sub	r3, r0, #1
   1f260:	cmp	r3, #7
   1f264:	ldrls	pc, [pc, r3, lsl #2]
   1f268:	b	1f0dc <_start@@Base+0xc6d8>
   1f26c:	ldrdeq	pc, [r1], -r4
   1f270:	andeq	pc, r1, r8, asr #5
   1f274:			; <UNDEFINED> instruction: 0x0001f2bc
   1f278:			; <UNDEFINED> instruction: 0x0001f2b0
   1f27c:	andeq	pc, r1, r4, lsr #5
   1f280:	muleq	r1, r8, r2
   1f284:	andeq	pc, r1, ip, lsl #5
   1f288:	andeq	lr, r1, ip, ror pc
   1f28c:	mov	sl, r5
   1f290:	mov	fp, r6
   1f294:	b	1ef84 <_start@@Base+0xc580>
   1f298:	mov	sl, r5
   1f29c:	mov	fp, r6
   1f2a0:	b	1efb0 <_start@@Base+0xc5ac>
   1f2a4:	mov	sl, r5
   1f2a8:	mov	fp, r6
   1f2ac:	b	1efdc <_start@@Base+0xc5d8>
   1f2b0:	mov	r2, r5
   1f2b4:	mov	r3, r6
   1f2b8:	b	1f000 <_start@@Base+0xc5fc>
   1f2bc:	mov	r2, r5
   1f2c0:	mov	r3, r6
   1f2c4:	b	1f028 <_start@@Base+0xc624>
   1f2c8:	mov	r2, r5
   1f2cc:	mov	r3, r6
   1f2d0:	b	1f054 <_start@@Base+0xc650>
   1f2d4:	mov	r2, r5
   1f2d8:	mov	r3, r6
   1f2dc:	b	1f080 <_start@@Base+0xc67c>
   1f2e0:	add	r0, r4, #1
   1f2e4:	sub	r3, r7, r0
   1f2e8:	cmp	r3, #1
   1f2ec:	ble	1f300 <_start@@Base+0xc8fc>
   1f2f0:	ldrb	r3, [r4, #1]
   1f2f4:	cmp	r3, #32
   1f2f8:	bhi	1f168 <_start@@Base+0xc764>
   1f2fc:	beq	1f8b0 <_start@@Base+0xceac>
   1f300:	mov	r1, r0
   1f304:	mov	r2, r7
   1f308:	mov	r0, r9
   1f30c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1f310:	ldr	r3, [sp, #656]	; 0x290
   1f314:	b	1edf8 <_start@@Base+0xc3f4>
   1f318:	svcpl	0x00626262
   1f31c:	cmnvs	r1, r1, ror #2
   1f320:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1f324:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1f328:	cmnvs	r2, pc, asr r4
   1f32c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1f330:	ldrb	r3, [r4, #1]
   1f334:	cmp	r3, #32
   1f338:	addhi	r4, r4, #1
   1f33c:	bls	1f10c <_start@@Base+0xc708>
   1f340:	cmp	r7, r4
   1f344:	bne	1f128 <_start@@Base+0xc724>
   1f348:	mov	r3, #0
   1f34c:	mov	sl, r9
   1f350:	mov	fp, r7
   1f354:	str	r3, [sp, #656]	; 0x290
   1f358:	mov	r9, r7
   1f35c:	b	1f174 <_start@@Base+0xc770>
   1f360:	cmp	r0, #7
   1f364:	ble	1f0dc <_start@@Base+0xc6d8>
   1f368:	mov	r3, #7
   1f36c:	mov	r2, r7
   1f370:	mov	r1, r4
   1f374:	mov	r0, r9
   1f378:	bl	17fac <_start@@Base+0x55a8>
   1f37c:	cmp	r4, r0
   1f380:	mov	sl, r0
   1f384:	beq	1f0dc <_start@@Base+0xc6d8>
   1f388:	ldr	r3, [sp, #176]	; 0xb0
   1f38c:	cmp	r7, r0
   1f390:	str	r5, [sp, #664]	; 0x298
   1f394:	str	r6, [sp, #668]	; 0x29c
   1f398:	str	r5, [sp, #672]	; 0x2a0
   1f39c:	str	r6, [sp, #676]	; 0x2a4
   1f3a0:	str	r3, [sp, #660]	; 0x294
   1f3a4:	beq	204b0 <_start@@Base+0xdaac>
   1f3a8:	add	r3, sp, #672	; 0x2a0
   1f3ac:	str	r3, [sp]
   1f3b0:	mov	r1, r0
   1f3b4:	add	r3, sp, #660	; 0x294
   1f3b8:	mov	r2, r7
   1f3bc:	mov	r0, r9
   1f3c0:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1f3c4:	cmp	sl, r0
   1f3c8:	mov	r4, r0
   1f3cc:	beq	204b0 <_start@@Base+0xdaac>
   1f3d0:	ldr	r1, [sp, #660]	; 0x294
   1f3d4:	add	r3, sp, #672	; 0x2a0
   1f3d8:	cmp	r1, #0
   1f3dc:	ldrd	r2, [r3]
   1f3e0:	beq	1f880 <_start@@Base+0xce7c>
   1f3e4:	cmp	r3, #-2147483648	; 0x80000000
   1f3e8:	cmpeq	r2, #0
   1f3ec:	bhi	20270 <_start@@Base+0xd86c>
   1f3f0:	rsbs	r2, r2, #0
   1f3f4:	rsc	r3, r3, #0
   1f3f8:	add	r1, sp, #664	; 0x298
   1f3fc:	strd	r2, [r1]
   1f400:	orrs	r3, r2, r3
   1f404:	bne	1f414 <_start@@Base+0xca10>
   1f408:	ldr	r3, [r9, #8]
   1f40c:	tst	r3, #2
   1f410:	beq	1f0f0 <_start@@Base+0xc6ec>
   1f414:	mov	r3, #8
   1f418:	mov	r2, r3
   1f41c:	mov	r1, #0
   1f420:	ldr	r0, [r9]
   1f424:	bl	26644 <flatcc_builder_table_add@@Base>
   1f428:	cmp	r0, #0
   1f42c:	beq	202e4 <_start@@Base+0xd8e0>
   1f430:	add	r3, sp, #664	; 0x298
   1f434:	ldrd	r2, [r3]
   1f438:	strd	r2, [r0]
   1f43c:	b	1f0f0 <_start@@Base+0xc6ec>
   1f440:	add	r1, r4, #1
   1f444:	sub	r3, r7, r1
   1f448:	cmp	r3, #1
   1f44c:	ble	1f460 <_start@@Base+0xca5c>
   1f450:	ldrb	r3, [r4, #1]
   1f454:	cmp	r3, #32
   1f458:	bhi	1f470 <_start@@Base+0xca6c>
   1f45c:	beq	1ff68 <_start@@Base+0xd564>
   1f460:	mov	r2, r7
   1f464:	mov	r0, r9
   1f468:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1f46c:	mov	r1, r0
   1f470:	cmp	r7, r1
   1f474:	beq	210f8 <_start@@Base+0xe6f4>
   1f478:	ldrb	r3, [r1]
   1f47c:	cmp	r3, #125	; 0x7d
   1f480:	beq	20230 <_start@@Base+0xd82c>
   1f484:	mov	r3, #1
   1f488:	str	r3, [sp, #656]	; 0x290
   1f48c:	b	1ee04 <_start@@Base+0xc400>
   1f490:	mov	r1, r0
   1f494:	mov	r3, #5
   1f498:	mov	r2, fp
   1f49c:	mov	r0, sl
   1f4a0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f4a4:	b	1e600 <_start@@Base+0xbbfc>
   1f4a8:	mov	r3, #5
   1f4ac:	mov	r2, r7
   1f4b0:	mov	r0, r9
   1f4b4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f4b8:	mov	r1, r0
   1f4bc:	b	1ee34 <_start@@Base+0xc430>
   1f4c0:	ldrb	r3, [sl, #1]
   1f4c4:	cmp	r3, #32
   1f4c8:	addhi	sl, sl, #1
   1f4cc:	bls	1dc24 <_start@@Base+0xb220>
   1f4d0:	b	1dc38 <_start@@Base+0xb234>
   1f4d4:	sub	r3, ip, #1
   1f4d8:	cmp	r3, #7
   1f4dc:	ldrls	pc, [pc, r3, lsl #2]
   1f4e0:	b	1e47c <_start@@Base+0xba78>
   1f4e4:	andeq	r0, r2, r0, asr r1
   1f4e8:	andeq	r0, r2, r8, asr #2
   1f4ec:	andeq	r0, r2, r0, ror #2
   1f4f0:	andeq	r0, r2, r8, asr r1
   1f4f4:	andeq	r0, r2, r8, ror #2
   1f4f8:	andeq	r0, r2, r0, asr #2
   1f4fc:	andeq	lr, r1, r4, ror #6
   1f500:	andeq	lr, r1, r4, ror #6
   1f504:	mov	r3, #8
   1f508:	mov	r2, r7
   1f50c:	mov	r1, r4
   1f510:	mov	r0, r9
   1f514:	bl	17fac <_start@@Base+0x55a8>
   1f518:	cmp	r4, r0
   1f51c:	mov	sl, r0
   1f520:	beq	1f0dc <_start@@Base+0xc6d8>
   1f524:	ldrd	r2, [sp, #176]	; 0xb0
   1f528:	cmp	r7, r0
   1f52c:	str	r5, [sp, #672]	; 0x2a0
   1f530:	str	r2, [sp, #660]	; 0x294
   1f534:	str	r6, [sp, #676]	; 0x2a4
   1f538:	str	r2, [sp, #664]	; 0x298
   1f53c:	beq	202b8 <_start@@Base+0xd8b4>
   1f540:	add	r3, sp, #672	; 0x2a0
   1f544:	str	r3, [sp]
   1f548:	mov	r1, r0
   1f54c:	add	r3, sp, #664	; 0x298
   1f550:	mov	r2, r7
   1f554:	mov	r0, r9
   1f558:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1f55c:	cmp	sl, r0
   1f560:	mov	r4, r0
   1f564:	beq	202b8 <_start@@Base+0xd8b4>
   1f568:	ldr	r3, [sp, #664]	; 0x298
   1f56c:	cmp	r3, #0
   1f570:	bne	1ff40 <_start@@Base+0xd53c>
   1f574:	add	r3, sp, #672	; 0x2a0
   1f578:	mov	r1, #0
   1f57c:	ldrd	r2, [r3]
   1f580:	mvn	r0, #0
   1f584:	cmp	r3, r1
   1f588:	cmpeq	r2, r0
   1f58c:	strls	r2, [sp, #660]	; 0x294
   1f590:	bhi	20074 <_start@@Base+0xd670>
   1f594:	cmp	r2, #0
   1f598:	bne	1f5a8 <_start@@Base+0xcba4>
   1f59c:	ldr	r3, [r9, #8]
   1f5a0:	tst	r3, #2
   1f5a4:	beq	1f0f0 <_start@@Base+0xc6ec>
   1f5a8:	mov	r3, #4
   1f5ac:	mov	r2, r3
   1f5b0:	mov	r1, #1
   1f5b4:	ldr	r0, [r9]
   1f5b8:	bl	26644 <flatcc_builder_table_add@@Base>
   1f5bc:	cmp	r0, #0
   1f5c0:	beq	202e4 <_start@@Base+0xd8e0>
   1f5c4:	ldr	r3, [sp, #660]	; 0x294
   1f5c8:	str	r3, [r0]
   1f5cc:	b	1f0f0 <_start@@Base+0xc6ec>
   1f5d0:	add	r4, sl, #1
   1f5d4:	sub	r3, fp, r4
   1f5d8:	cmp	r3, #1
   1f5dc:	ble	1f5f0 <_start@@Base+0xcbec>
   1f5e0:	ldrb	r3, [sl, #1]
   1f5e4:	cmp	r3, #32
   1f5e8:	bhi	1f604 <_start@@Base+0xcc00>
   1f5ec:	beq	204fc <_start@@Base+0xdaf8>
   1f5f0:	mov	r1, r4
   1f5f4:	mov	r2, fp
   1f5f8:	mov	r0, r7
   1f5fc:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   1f600:	mov	r4, r0
   1f604:	cmp	fp, r4
   1f608:	beq	21244 <_start@@Base+0xe840>
   1f60c:	ldrb	r3, [r4]
   1f610:	cmp	r3, #125	; 0x7d
   1f614:	beq	211a8 <_start@@Base+0xe7a4>
   1f618:	mov	r3, #1
   1f61c:	str	r3, [sp, #640]	; 0x280
   1f620:	b	1da10 <_start@@Base+0xb00c>
   1f624:	mov	r5, fp
   1f628:	mov	r4, r5
   1f62c:	mov	fp, r7
   1f630:	mov	r3, #0
   1f634:	str	r3, [sp, #640]	; 0x280
   1f638:	ldr	r3, [fp, #24]
   1f63c:	cmp	r3, #0
   1f640:	bne	1e014 <_start@@Base+0xb610>
   1f644:	mov	r1, r4
   1f648:	ldr	r3, [sp, #644]	; 0x284
   1f64c:	mov	r2, r5
   1f650:	mov	r0, fp
   1f654:	bl	2cce0 <flatcc_json_parser_finalize_unions@@Base>
   1f658:	mov	r4, r0
   1f65c:	ldr	r0, [fp]
   1f660:	bl	24f18 <flatcc_builder_end_table@@Base>
   1f664:	ldr	r3, [sp, #720]	; 0x2d0
   1f668:	cmp	r0, #0
   1f66c:	str	r0, [r3]
   1f670:	beq	1e014 <_start@@Base+0xb610>
   1f674:	mov	r0, r4
   1f678:	b	1dce0 <_start@@Base+0xb2dc>
   1f67c:	mov	r3, #2
   1f680:	mov	r2, r5
   1f684:	mov	r1, r4
   1f688:	mov	r0, fp
   1f68c:	bl	17fac <_start@@Base+0x55a8>
   1f690:	cmp	r0, r4
   1f694:	mov	r6, r0
   1f698:	beq	1df78 <_start@@Base+0xb574>
   1f69c:	mov	r0, #0
   1f6a0:	mov	r1, #0
   1f6a4:	add	r2, sp, #672	; 0x2a0
   1f6a8:	mov	r3, #0
   1f6ac:	cmp	r5, r6
   1f6b0:	strd	r0, [r2]
   1f6b4:	strb	r3, [sp, #656]	; 0x290
   1f6b8:	str	r3, [sp, #664]	; 0x298
   1f6bc:	beq	20450 <_start@@Base+0xda4c>
   1f6c0:	str	r2, [sp]
   1f6c4:	add	r3, sp, #664	; 0x298
   1f6c8:	mov	r2, r5
   1f6cc:	mov	r1, r6
   1f6d0:	mov	r0, fp
   1f6d4:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1f6d8:	cmp	r6, r0
   1f6dc:	mov	r7, r0
   1f6e0:	beq	20450 <_start@@Base+0xda4c>
   1f6e4:	ldr	r3, [sp, #664]	; 0x298
   1f6e8:	cmp	r3, #0
   1f6ec:	bne	2004c <_start@@Base+0xd648>
   1f6f0:	add	r3, sp, #672	; 0x2a0
   1f6f4:	ldrd	r2, [r3]
   1f6f8:	cmp	r3, #0
   1f6fc:	cmpeq	r2, #255	; 0xff
   1f700:	uxtbls	r2, r2
   1f704:	strbls	r2, [sp, #656]	; 0x290
   1f708:	bhi	20124 <_start@@Base+0xd720>
   1f70c:	cmp	r2, #2
   1f710:	bne	1f720 <_start@@Base+0xcd1c>
   1f714:	ldr	r3, [fp, #8]
   1f718:	tst	r3, #2
   1f71c:	beq	1df8c <_start@@Base+0xb588>
   1f720:	mov	r3, #1
   1f724:	mov	r2, r3
   1f728:	mov	r1, #2
   1f72c:	ldr	r0, [fp]
   1f730:	bl	26644 <flatcc_builder_table_add@@Base>
   1f734:	cmp	r0, #0
   1f738:	bne	1e348 <_start@@Base+0xb944>
   1f73c:	mov	r4, r7
   1f740:	b	1e014 <_start@@Base+0xb610>
   1f744:	mov	r1, r4
   1f748:	mov	r3, #5
   1f74c:	mov	r2, r5
   1f750:	mov	r0, fp
   1f754:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f758:	mov	r4, r0
   1f75c:	b	1dda8 <_start@@Base+0xb3a4>
   1f760:	ldr	r3, [r0, #8]
   1f764:	mov	r2, r5
   1f768:	tst	r3, #1
   1f76c:	bne	1ff10 <_start@@Base+0xd50c>
   1f770:	mov	r3, #15
   1f774:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f778:	b	1dccc <_start@@Base+0xb2c8>
   1f77c:	cmp	r3, #0
   1f780:	cmpeq	r2, #127	; 0x7f
   1f784:	sxtbls	r2, r2
   1f788:	strbls	r2, [sp, #656]	; 0x290
   1f78c:	bls	1e1e0 <_start@@Base+0xb7dc>
   1f790:	mov	r1, r0
   1f794:	mov	r3, #7
   1f798:	mov	r2, r5
   1f79c:	mov	r0, fp
   1f7a0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f7a4:	mov	r7, r0
   1f7a8:	cmp	r9, r7
   1f7ac:	beq	20480 <_start@@Base+0xda7c>
   1f7b0:	add	r3, sp, #656	; 0x290
   1f7b4:	ldrsb	r2, [r3]
   1f7b8:	b	1e1e0 <_start@@Base+0xb7dc>
   1f7bc:	mov	r3, #5
   1f7c0:	mov	r2, r5
   1f7c4:	mov	r1, r4
   1f7c8:	mov	r0, fp
   1f7cc:	bl	17fac <_start@@Base+0x55a8>
   1f7d0:	cmp	r0, r4
   1f7d4:	mov	sl, r0
   1f7d8:	beq	1df30 <_start@@Base+0xb52c>
   1f7dc:	mov	r2, #0
   1f7e0:	mov	r3, #0
   1f7e4:	add	r1, sp, #672	; 0x2a0
   1f7e8:	cmp	r5, r0
   1f7ec:	strb	r9, [sp, #656]	; 0x290
   1f7f0:	str	r9, [sp, #664]	; 0x298
   1f7f4:	strd	r2, [r1]
   1f7f8:	beq	21074 <_start@@Base+0xe670>
   1f7fc:	str	r1, [sp]
   1f800:	add	r3, sp, #664	; 0x298
   1f804:	mov	r1, r0
   1f808:	mov	r2, r5
   1f80c:	mov	r0, fp
   1f810:	bl	2c350 <flatcc_json_parser_integer@@Base>
   1f814:	cmp	sl, r0
   1f818:	mov	r7, r0
   1f81c:	beq	21074 <_start@@Base+0xe670>
   1f820:	ldr	r1, [sp, #664]	; 0x298
   1f824:	add	r3, sp, #672	; 0x2a0
   1f828:	cmp	r1, #0
   1f82c:	ldrd	r2, [r3]
   1f830:	beq	1f8cc <_start@@Base+0xcec8>
   1f834:	cmp	r3, #0
   1f838:	cmpeq	r2, #128	; 0x80
   1f83c:	rsbls	r2, r2, #0
   1f840:	sxtbls	r2, r2
   1f844:	strbls	r2, [sp, #656]	; 0x290
   1f848:	bhi	204e0 <_start@@Base+0xdadc>
   1f84c:	cmp	r2, #2
   1f850:	bne	1f860 <_start@@Base+0xce5c>
   1f854:	ldr	r3, [fp, #8]
   1f858:	tst	r3, #2
   1f85c:	beq	1df8c <_start@@Base+0xb588>
   1f860:	mov	r3, #1
   1f864:	mov	r2, r3
   1f868:	mov	r1, #0
   1f86c:	ldr	r0, [fp]
   1f870:	bl	26644 <flatcc_builder_table_add@@Base>
   1f874:	cmp	r0, #0
   1f878:	bne	1e210 <_start@@Base+0xb80c>
   1f87c:	b	1f73c <_start@@Base+0xcd38>
   1f880:	cmp	r2, #0
   1f884:	sbcs	r1, r3, #0
   1f888:	blt	21218 <_start@@Base+0xe814>
   1f88c:	add	r1, sp, #664	; 0x298
   1f890:	strd	r2, [r1]
   1f894:	b	1f400 <_start@@Base+0xc9fc>
   1f898:	ldrb	r3, [r9, #2]
   1f89c:	cmp	r3, #32
   1f8a0:	bls	1ec4c <_start@@Base+0xc248>
   1f8a4:	mov	r7, sl
   1f8a8:	add	sl, r9, #2
   1f8ac:	b	1eadc <_start@@Base+0xc0d8>
   1f8b0:	ldrb	r3, [r4, #2]
   1f8b4:	cmp	r3, #32
   1f8b8:	bls	1f300 <_start@@Base+0xc8fc>
   1f8bc:	mov	sl, r9
   1f8c0:	mov	fp, r7
   1f8c4:	add	r9, r4, #2
   1f8c8:	b	1f174 <_start@@Base+0xc770>
   1f8cc:	cmp	r3, #0
   1f8d0:	cmpeq	r2, #127	; 0x7f
   1f8d4:	sxtbls	r2, r2
   1f8d8:	strbls	r2, [sp, #656]	; 0x290
   1f8dc:	bls	1f84c <_start@@Base+0xce48>
   1f8e0:	mov	r1, r0
   1f8e4:	mov	r3, #7
   1f8e8:	mov	r2, r5
   1f8ec:	mov	r0, fp
   1f8f0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f8f4:	mov	r7, r0
   1f8f8:	cmp	sl, r7
   1f8fc:	beq	21074 <_start@@Base+0xe670>
   1f900:	add	r3, sp, #656	; 0x290
   1f904:	ldrsb	r2, [r3]
   1f908:	b	1f84c <_start@@Base+0xce48>
   1f90c:	mov	r1, r4
   1f910:	mov	r3, #5
   1f914:	mov	r2, fp
   1f918:	mov	r0, r7
   1f91c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1f920:	mov	r4, r0
   1f924:	b	1da40 <_start@@Base+0xb03c>
   1f928:	mov	r3, #5
   1f92c:	mov	r2, fp
   1f930:	mov	r1, r4
   1f934:	mov	r0, r7
   1f938:	bl	17fac <_start@@Base+0x55a8>
   1f93c:	cmp	r0, r4
   1f940:	mov	sl, r0
   1f944:	beq	1dbf4 <_start@@Base+0xb1f0>
   1f948:	mov	r1, #10
   1f94c:	ldr	r0, [r7]
   1f950:	bl	244d8 <flatcc_builder_start_table@@Base>
   1f954:	cmp	r0, #0
   1f958:	bne	1eae8 <_start@@Base+0xc0e4>
   1f95c:	add	r3, sp, #672	; 0x2a0
   1f960:	str	r3, [sp]
   1f964:	mov	r2, fp
   1f968:	mov	r3, #5
   1f96c:	mov	r1, sl
   1f970:	mov	r0, r7
   1f974:	bl	2cc54 <flatcc_json_parser_prepare_unions@@Base>
   1f978:	cmp	fp, r0
   1f97c:	beq	1eae8 <_start@@Base+0xc0e4>
   1f980:	mov	r1, sl
   1f984:	add	r3, sp, #664	; 0x298
   1f988:	mov	r2, fp
   1f98c:	mov	r0, r7
   1f990:	bl	133b4 <_start@@Base+0x9b0>
   1f994:	ldr	r3, [sp, #664]	; 0x298
   1f998:	cmp	r3, #0
   1f99c:	mov	sl, r0
   1f9a0:	beq	1fd48 <_start@@Base+0xd344>
   1f9a4:	mov	r4, r0
   1f9a8:	mov	r8, r7
   1f9ac:	b	1fa30 <_start@@Base+0xd02c>
   1f9b0:	add	r3, pc, #992	; 0x3e0
   1f9b4:	ldrd	r2, [r3]
   1f9b8:	cmp	r1, r3
   1f9bc:	cmpeq	r0, r2
   1f9c0:	beq	1fc14 <_start@@Base+0xd210>
   1f9c4:	add	r3, pc, #980	; 0x3d4
   1f9c8:	ldrd	r2, [r3]
   1f9cc:	cmp	r1, r3
   1f9d0:	cmpeq	r0, r2
   1f9d4:	beq	1fcb4 <_start@@Base+0xd2b0>
   1f9d8:	add	r3, pc, #968	; 0x3c8
   1f9dc:	ldrd	r2, [r3]
   1f9e0:	and	r0, r0, #-16777216	; 0xff000000
   1f9e4:	cmp	r1, r3
   1f9e8:	cmpeq	r0, r2
   1f9ec:	bne	1f9fc <_start@@Base+0xcff8>
   1f9f0:	sub	r3, fp, r4
   1f9f4:	cmp	r3, #5
   1f9f8:	bgt	20390 <_start@@Base+0xd98c>
   1f9fc:	mov	r1, r4
   1fa00:	mov	r2, fp
   1fa04:	mov	r0, r8
   1fa08:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1fa0c:	mov	r1, r0
   1fa10:	add	r3, sp, #664	; 0x298
   1fa14:	mov	r2, fp
   1fa18:	mov	r0, r8
   1fa1c:	bl	14c68 <_start@@Base+0x2264>
   1fa20:	ldr	r3, [sp, #664]	; 0x298
   1fa24:	cmp	r3, #0
   1fa28:	mov	r4, r0
   1fa2c:	beq	1fd40 <_start@@Base+0xd33c>
   1fa30:	cmp	fp, r4
   1fa34:	beq	1fa60 <_start@@Base+0xd05c>
   1fa38:	ldrb	r3, [r4]
   1fa3c:	cmp	r3, #34	; 0x22
   1fa40:	moveq	r3, #0
   1fa44:	addeq	r4, r4, #1
   1fa48:	streq	r3, [r8, #12]
   1fa4c:	beq	1fa60 <_start@@Base+0xd05c>
   1fa50:	cmp	r3, #46	; 0x2e
   1fa54:	movne	r3, #1
   1fa58:	strne	r3, [r8, #12]
   1fa5c:	beq	1ffd8 <_start@@Base+0xd5d4>
   1fa60:	mov	r1, fp
   1fa64:	mov	r0, r4
   1fa68:	bl	12b30 <_start@@Base+0x12c>
   1fa6c:	add	r3, pc, #828	; 0x33c
   1fa70:	ldrd	r2, [r3]
   1fa74:	cmp	r1, r3
   1fa78:	cmpeq	r0, r2
   1fa7c:	bls	1f9b0 <_start@@Base+0xcfac>
   1fa80:	add	r3, pc, #816	; 0x330
   1fa84:	ldrd	r2, [r3]
   1fa88:	cmp	r1, r3
   1fa8c:	cmpeq	r0, r2
   1fa90:	bhi	1fb48 <_start@@Base+0xd144>
   1fa94:	add	r3, pc, #804	; 0x324
   1fa98:	ldrd	r2, [r3]
   1fa9c:	cmp	r1, r3
   1faa0:	cmpeq	r0, r2
   1faa4:	bne	1f9fc <_start@@Base+0xcff8>
   1faa8:	add	r4, r4, #8
   1faac:	mov	r0, r4
   1fab0:	mov	r1, fp
   1fab4:	bl	12b30 <_start@@Base+0x12c>
   1fab8:	add	r3, pc, #776	; 0x308
   1fabc:	ldrd	r2, [r3]
   1fac0:	bic	r6, r0, #255	; 0xff
   1fac4:	cmp	r1, r3
   1fac8:	cmpeq	r6, r2
   1facc:	beq	203f0 <_start@@Base+0xd9ec>
   1fad0:	ldr	r3, [pc, #792]	; 1fdf0 <_start@@Base+0xd3ec>
   1fad4:	mov	r2, #0
   1fad8:	and	r1, r1, r3
   1fadc:	ldr	r3, [pc, #784]	; 1fdf4 <_start@@Base+0xd3f0>
   1fae0:	and	r0, r0, r2
   1fae4:	cmp	r1, r3
   1fae8:	mov	r2, #0
   1faec:	cmpeq	r0, r2
   1faf0:	bne	1f9fc <_start@@Base+0xcff8>
   1faf4:	sub	r3, fp, r4
   1faf8:	cmp	r3, #2
   1fafc:	ble	1f9fc <_start@@Base+0xcff8>
   1fb00:	mov	r1, r4
   1fb04:	mov	r3, #2
   1fb08:	mov	r2, fp
   1fb0c:	mov	r0, r8
   1fb10:	bl	17fac <_start@@Base+0x55a8>
   1fb14:	cmp	r4, r0
   1fb18:	mov	r1, r0
   1fb1c:	beq	1f9fc <_start@@Base+0xcff8>
   1fb20:	ldr	r2, [sp, #672]	; 0x2a0
   1fb24:	ldr	ip, [pc, #716]	; 1fdf8 <_start@@Base+0xd3f4>
   1fb28:	mov	r3, #9
   1fb2c:	str	r3, [sp]
   1fb30:	stmib	sp, {r2, ip}
   1fb34:	mov	r3, #4
   1fb38:	mov	r2, fp
   1fb3c:	mov	r0, r8
   1fb40:	bl	2d26c <flatcc_json_parser_union_vector@@Base>
   1fb44:	b	1fa0c <_start@@Base+0xd008>
   1fb48:	add	r3, pc, #640	; 0x280
   1fb4c:	ldrd	r2, [r3]
   1fb50:	cmp	r1, r3
   1fb54:	cmpeq	r0, r2
   1fb58:	beq	1ff7c <_start@@Base+0xd578>
   1fb5c:	add	r3, pc, #628	; 0x274
   1fb60:	ldrd	r2, [r3]
   1fb64:	cmp	r1, r3
   1fb68:	cmpeq	r0, r2
   1fb6c:	bne	1f9fc <_start@@Base+0xcff8>
   1fb70:	add	r4, r4, #8
   1fb74:	mov	r0, r4
   1fb78:	mov	r1, fp
   1fb7c:	bl	12b30 <_start@@Base+0x12c>
   1fb80:	ldr	r2, [pc, #616]	; 1fdf0 <_start@@Base+0xd3ec>
   1fb84:	mvn	r3, #0
   1fb88:	mov	r6, r0
   1fb8c:	mov	r7, r1
   1fb90:	add	r1, pc, #584	; 0x248
   1fb94:	ldrd	r0, [r1]
   1fb98:	and	r3, r3, r7
   1fb9c:	and	r2, r2, r6
   1fba0:	cmp	r3, r1
   1fba4:	cmpeq	r2, r0
   1fba8:	beq	20fe8 <_start@@Base+0xe5e4>
   1fbac:	and	r7, r7, #-16777216	; 0xff000000
   1fbb0:	mov	r6, #0
   1fbb4:	cmp	r7, #1795162112	; 0x6b000000
   1fbb8:	cmpeq	r6, #0
   1fbbc:	bne	1f9fc <_start@@Base+0xcff8>
   1fbc0:	sub	r3, fp, r4
   1fbc4:	cmp	r3, #1
   1fbc8:	ble	1f9fc <_start@@Base+0xcff8>
   1fbcc:	mov	r1, r4
   1fbd0:	mov	r3, #1
   1fbd4:	mov	r2, fp
   1fbd8:	mov	r0, r8
   1fbdc:	bl	17fac <_start@@Base+0x55a8>
   1fbe0:	cmp	r4, r0
   1fbe4:	mov	r1, r0
   1fbe8:	beq	1f9fc <_start@@Base+0xcff8>
   1fbec:	ldr	r2, [sp, #672]	; 0x2a0
   1fbf0:	ldr	ip, [pc, #512]	; 1fdf8 <_start@@Base+0xd3f4>
   1fbf4:	mov	r3, #5
   1fbf8:	str	r3, [sp]
   1fbfc:	stmib	sp, {r2, ip}
   1fc00:	mov	r3, #2
   1fc04:	mov	r2, fp
   1fc08:	mov	r0, r8
   1fc0c:	bl	2cd50 <flatcc_json_parser_union@@Base>
   1fc10:	b	1fa0c <_start@@Base+0xd008>
   1fc14:	add	r4, r4, #8
   1fc18:	mov	r0, r4
   1fc1c:	mov	r1, fp
   1fc20:	bl	12b30 <_start@@Base+0x12c>
   1fc24:	add	r3, pc, #444	; 0x1bc
   1fc28:	ldrd	r2, [r3]
   1fc2c:	bic	r6, r0, #255	; 0xff
   1fc30:	cmp	r1, r3
   1fc34:	cmpeq	r6, r2
   1fc38:	beq	202f4 <_start@@Base+0xd8f0>
   1fc3c:	ldr	r3, [pc, #428]	; 1fdf0 <_start@@Base+0xd3ec>
   1fc40:	mov	r2, #0
   1fc44:	and	r1, r1, r3
   1fc48:	ldr	r3, [pc, #428]	; 1fdfc <_start@@Base+0xd3f8>
   1fc4c:	and	r0, r0, r2
   1fc50:	cmp	r1, r3
   1fc54:	mov	r2, #0
   1fc58:	cmpeq	r0, r2
   1fc5c:	bne	1f9fc <_start@@Base+0xcff8>
   1fc60:	sub	r3, fp, r4
   1fc64:	cmp	r3, #2
   1fc68:	ble	1f9fc <_start@@Base+0xcff8>
   1fc6c:	mov	r1, r4
   1fc70:	mov	r3, #2
   1fc74:	mov	r2, fp
   1fc78:	mov	r0, r8
   1fc7c:	bl	17fac <_start@@Base+0x55a8>
   1fc80:	cmp	r4, r0
   1fc84:	mov	r1, r0
   1fc88:	beq	1f9fc <_start@@Base+0xcff8>
   1fc8c:	ldr	r2, [sp, #672]	; 0x2a0
   1fc90:	ldr	ip, [pc, #352]	; 1fdf8 <_start@@Base+0xd3f4>
   1fc94:	mov	r3, #3
   1fc98:	str	r3, [sp]
   1fc9c:	stmib	sp, {r2, ip}
   1fca0:	mov	r3, #1
   1fca4:	mov	r2, fp
   1fca8:	mov	r0, r8
   1fcac:	bl	2cd50 <flatcc_json_parser_union@@Base>
   1fcb0:	b	1fa0c <_start@@Base+0xd008>
   1fcb4:	add	r4, r4, #8
   1fcb8:	mov	r0, r4
   1fcbc:	mov	r1, fp
   1fcc0:	bl	12b30 <_start@@Base+0x12c>
   1fcc4:	ldr	r3, [pc, #292]	; 1fdf0 <_start@@Base+0xd3ec>
   1fcc8:	ldr	r7, [pc, #304]	; 1fe00 <_start@@Base+0xd3fc>
   1fccc:	mov	r2, #0
   1fcd0:	mov	r6, #0
   1fcd4:	and	r1, r1, r3
   1fcd8:	and	r0, r0, r2
   1fcdc:	cmp	r1, r7
   1fce0:	cmpeq	r0, r6
   1fce4:	bne	1f9fc <_start@@Base+0xcff8>
   1fce8:	sub	r3, fp, r4
   1fcec:	cmp	r3, #2
   1fcf0:	ble	1f9fc <_start@@Base+0xcff8>
   1fcf4:	mov	r1, r4
   1fcf8:	mov	r3, #2
   1fcfc:	mov	r2, fp
   1fd00:	mov	r0, r8
   1fd04:	bl	17fac <_start@@Base+0x55a8>
   1fd08:	cmp	r4, r0
   1fd0c:	mov	r1, r0
   1fd10:	beq	1f9fc <_start@@Base+0xcff8>
   1fd14:	ldr	r2, [sp, #672]	; 0x2a0
   1fd18:	ldr	lr, [pc, #216]	; 1fdf8 <_start@@Base+0xd3f4>
   1fd1c:	ldr	ip, [pc, #224]	; 1fe04 <_start@@Base+0xd400>
   1fd20:	mov	r3, #7
   1fd24:	str	r3, [sp]
   1fd28:	stmib	sp, {r2, ip, lr}
   1fd2c:	mov	r3, #3
   1fd30:	mov	r2, fp
   1fd34:	mov	r0, r8
   1fd38:	bl	2cec0 <flatcc_json_parser_union_type@@Base>
   1fd3c:	b	1fa0c <_start@@Base+0xd008>
   1fd40:	mov	sl, r0
   1fd44:	mov	r7, r8
   1fd48:	ldr	r3, [r7, #24]
   1fd4c:	cmp	r3, #0
   1fd50:	bne	1eae8 <_start@@Base+0xc0e4>
   1fd54:	mov	r1, sl
   1fd58:	ldr	r3, [sp, #672]	; 0x2a0
   1fd5c:	mov	r2, fp
   1fd60:	mov	r0, r7
   1fd64:	bl	2cce0 <flatcc_json_parser_finalize_unions@@Base>
   1fd68:	mov	sl, r0
   1fd6c:	ldr	r0, [r7]
   1fd70:	bl	24f18 <flatcc_builder_end_table@@Base>
   1fd74:	subs	r4, r0, #0
   1fd78:	beq	1eae8 <_start@@Base+0xc0e4>
   1fd7c:	mov	r1, #1
   1fd80:	ldr	r0, [r7]
   1fd84:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1fd88:	cmp	r0, #0
   1fd8c:	beq	21234 <_start@@Base+0xe830>
   1fd90:	str	r4, [r0]
   1fd94:	b	1dc08 <_start@@Base+0xb204>
   1fd98:	strbvs	r6, [pc, -r9, ror #28]!
   1fd9c:	cmnvs	lr, r1, ror #8
   1fda0:	svcvs	0x005f7479
   1fda4:	cmnvs	r1, #6464	; 0x1940
   1fda8:	svcvs	0x00000000
   1fdac:	cmnvs	r1, #6464	; 0x1940
   1fdb0:	cmnvs	r3, r4, ror #8
   1fdb4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1fdb8:	svcpl	0x00636860
   1fdbc:			; <UNDEFINED> instruction: 0x6d61696e
   1fdc0:	cmnvs	r3, r5, ror #8
   1fdc4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1fdc8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1fdcc:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1fdd0:	svcpl	0x00636861
   1fdd4:			; <UNDEFINED> instruction: 0x6d61696e
   1fdd8:	svcpl	0x006b6963
   1fddc:	cmnvc	r9, #1694498816	; 0x65000000
   1fde0:	rsbvc	r0, r5, r0
   1fde4:	blvs	17fcfd0 <__bss_end__@@Base+0x17bbc0c>
   1fde8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1fdec:	cmnvc	r4, #116, 30	; 0x1d0
   1fdf0:			; <UNDEFINED> instruction: 0xffff0000
   1fdf4:	rsbsvc	r0, r3, #0
   1fdf8:	strdeq	r8, [r1], -ip
   1fdfc:	cmnvc	r4, #0
   1fe00:	rsbvc	r0, r5, r0
   1fe04:	andeq	r1, r4, r4, lsl #6
   1fe08:	andeq	sp, r1, ip, ror #18
   1fe0c:	mov	r1, r4
   1fe10:	mov	r3, #7
   1fe14:	mov	r2, fp
   1fe18:	mov	r0, r7
   1fe1c:	bl	17fac <_start@@Base+0x55a8>
   1fe20:	cmp	r0, r4
   1fe24:	mov	r1, r0
   1fe28:	beq	1dbb0 <_start@@Base+0xb1ac>
   1fe2c:	ldr	lr, [pc, #-44]	; 1fe08 <_start@@Base+0xd404>
   1fe30:	ldr	ip, [sp, #644]	; 0x284
   1fe34:	mov	r2, #3
   1fe38:	mov	r3, r6
   1fe3c:	stm	sp, {r2, ip, lr}
   1fe40:	mov	r0, r7
   1fe44:	mov	r2, fp
   1fe48:	bl	2d26c <flatcc_json_parser_union_vector@@Base>
   1fe4c:	mov	sl, r0
   1fe50:	b	1dc08 <_start@@Base+0xb204>
   1fe54:	mov	r3, #6
   1fe58:	mov	r2, fp
   1fe5c:	mov	r1, r5
   1fe60:	mov	r0, sl
   1fe64:	bl	17fac <_start@@Base+0x55a8>
   1fe68:	cmp	r5, r0
   1fe6c:	mov	r9, r0
   1fe70:	beq	1ea48 <_start@@Base+0xc044>
   1fe74:	mov	r3, #0
   1fe78:	mov	r1, #2
   1fe7c:	ldr	r0, [sl]
   1fe80:	str	r3, [sp, #652]	; 0x28c
   1fe84:	bl	244d8 <flatcc_builder_start_table@@Base>
   1fe88:	cmp	r0, #0
   1fe8c:	bne	1fec8 <_start@@Base+0xd4c4>
   1fe90:	cmp	fp, r9
   1fe94:	beq	1fea4 <_start@@Base+0xd4a0>
   1fe98:	ldrb	r3, [r9]
   1fe9c:	cmp	r3, #123	; 0x7b
   1fea0:	beq	20534 <_start@@Base+0xdb30>
   1fea4:	mov	r1, r9
   1fea8:	mov	r3, #21
   1feac:	mov	r2, fp
   1feb0:	mov	r0, sl
   1feb4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1feb8:	mov	r9, r0
   1febc:	ldr	r3, [sl, #24]
   1fec0:	cmp	r3, #0
   1fec4:	beq	203d8 <_start@@Base+0xd9d4>
   1fec8:	mov	r1, r9
   1fecc:	mov	r3, #33	; 0x21
   1fed0:	mov	r2, fp
   1fed4:	mov	r0, sl
   1fed8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1fedc:	ldr	r3, [sp, #652]	; 0x28c
   1fee0:	cmp	r3, #0
   1fee4:	mov	r9, r0
   1fee8:	beq	1ff00 <_start@@Base+0xd4fc>
   1feec:	mov	r1, #2
   1fef0:	ldr	r0, [sl]
   1fef4:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   1fef8:	cmp	r0, #0
   1fefc:	bne	1f1b8 <_start@@Base+0xc7b4>
   1ff00:	mov	r5, fp
   1ff04:	mov	fp, sl
   1ff08:	mov	sl, r9
   1ff0c:	b	1eaf0 <_start@@Base+0xc0ec>
   1ff10:	bl	2a4f8 <flatcc_json_parser_generic_json@@Base>
   1ff14:	b	1dccc <_start@@Base+0xb2c8>
   1ff18:	ldrb	r3, [r7, #2]
   1ff1c:	cmp	r3, #32
   1ff20:	bls	1e240 <_start@@Base+0xb83c>
   1ff24:	add	r4, r7, #2
   1ff28:	b	1e008 <_start@@Base+0xb604>
   1ff2c:	ldrb	r3, [r9, #2]
   1ff30:	cmp	r3, #32
   1ff34:	addhi	r0, r9, #2
   1ff38:	bls	1ecb0 <_start@@Base+0xc2ac>
   1ff3c:	b	1ecc0 <_start@@Base+0xc2bc>
   1ff40:	mov	r1, r0
   1ff44:	mov	r3, #8
   1ff48:	mov	r2, r7
   1ff4c:	mov	r0, r9
   1ff50:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1ff54:	mov	r4, r0
   1ff58:	cmp	sl, r4
   1ff5c:	beq	202b8 <_start@@Base+0xd8b4>
   1ff60:	ldr	r2, [sp, #660]	; 0x294
   1ff64:	b	1f594 <_start@@Base+0xcb90>
   1ff68:	ldrb	r3, [r4, #2]
   1ff6c:	cmp	r3, #32
   1ff70:	addhi	r1, r4, #2
   1ff74:	bls	1f460 <_start@@Base+0xca5c>
   1ff78:	b	1f470 <_start@@Base+0xca6c>
   1ff7c:	add	r5, r4, #8
   1ff80:	mov	r0, r5
   1ff84:	mov	r1, fp
   1ff88:	bl	12b30 <_start@@Base+0x12c>
   1ff8c:	add	r3, pc, #956	; 0x3bc
   1ff90:	ldrd	r2, [r3]
   1ff94:	cmp	r1, r3
   1ff98:	cmpeq	r0, r2
   1ff9c:	beq	2111c <_start@@Base+0xe718>
   1ffa0:	add	r3, pc, #944	; 0x3b0
   1ffa4:	ldrd	r2, [r3]
   1ffa8:	ldr	r6, [pc, #944]	; 20360 <_start@@Base+0xd95c>
   1ffac:	mvn	r7, #0
   1ffb0:	and	r1, r1, r7
   1ffb4:	and	r0, r0, r6
   1ffb8:	cmp	r1, r3
   1ffbc:	cmpeq	r0, r2
   1ffc0:	beq	20170 <_start@@Base+0xd76c>
   1ffc4:	mov	r1, r5
   1ffc8:	mov	r2, fp
   1ffcc:	mov	r0, r8
   1ffd0:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   1ffd4:	b	1fa0c <_start@@Base+0xd008>
   1ffd8:	mov	r1, r4
   1ffdc:	mov	r3, #5
   1ffe0:	mov	r2, fp
   1ffe4:	mov	r0, r8
   1ffe8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   1ffec:	mov	r4, r0
   1fff0:	b	1fa60 <_start@@Base+0xd05c>
   1fff4:	mov	r1, r5
   1fff8:	mov	r3, #4
   1fffc:	mov	r2, fp
   20000:	mov	r0, r7
   20004:	bl	17fac <_start@@Base+0x55a8>
   20008:	cmp	r5, r0
   2000c:	mov	r1, r0
   20010:	beq	1e47c <_start@@Base+0xba78>
   20014:	ldr	r2, [sp, #644]	; 0x284
   20018:	ldr	r3, [pc, #836]	; 20364 <_start@@Base+0xd960>
   2001c:	ldr	lr, [pc, #836]	; 20368 <_start@@Base+0xd964>
   20020:	ldr	ip, [pc, #836]	; 2036c <_start@@Base+0xd968>
   20024:	str	r3, [sp, #16]
   20028:	mov	r3, #3
   2002c:	stmib	sp, {r2, ip, lr}
   20030:	mov	r0, r7
   20034:	str	r3, [sp]
   20038:	mov	r2, fp
   2003c:	ldr	r3, [sp, #528]	; 0x210
   20040:	bl	2d358 <flatcc_json_parser_union_type_vector@@Base>
   20044:	mov	sl, r0
   20048:	b	1dc08 <_start@@Base+0xb204>
   2004c:	mov	r1, r0
   20050:	mov	r3, #8
   20054:	mov	r2, r5
   20058:	mov	r0, fp
   2005c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20060:	mov	r7, r0
   20064:	cmp	r6, r7
   20068:	beq	20450 <_start@@Base+0xda4c>
   2006c:	ldrb	r2, [sp, #656]	; 0x290
   20070:	b	1f70c <_start@@Base+0xcd08>
   20074:	mov	r1, r4
   20078:	mov	r3, #7
   2007c:	mov	r2, r7
   20080:	mov	r0, r9
   20084:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20088:	mov	r4, r0
   2008c:	b	1ff58 <_start@@Base+0xd554>
   20090:	mov	r1, r5
   20094:	mov	r3, #5
   20098:	mov	r2, fp
   2009c:	mov	r0, sl
   200a0:	bl	17fac <_start@@Base+0x55a8>
   200a4:	cmp	r5, r0
   200a8:	mov	r1, r0
   200ac:	beq	1ea2c <_start@@Base+0xc028>
   200b0:	add	r3, sp, #652	; 0x28c
   200b4:	mov	r2, fp
   200b8:	mov	r0, sl
   200bc:	bl	180b0 <_start@@Base+0x56ac>
   200c0:	ldr	r3, [sp, #652]	; 0x28c
   200c4:	cmp	r3, #0
   200c8:	mov	r9, r0
   200cc:	beq	1ff00 <_start@@Base+0xd4fc>
   200d0:	mov	r1, r8
   200d4:	ldr	r0, [sl]
   200d8:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   200dc:	cmp	r0, #0
   200e0:	bne	1f1b8 <_start@@Base+0xc7b4>
   200e4:	b	1ff00 <_start@@Base+0xd4fc>
   200e8:	ldrb	r3, [sl, #2]
   200ec:	cmp	r3, #32
   200f0:	bls	1e4e8 <_start@@Base+0xbae4>
   200f4:	add	r4, sl, #2
   200f8:	b	1f638 <_start@@Base+0xcc34>
   200fc:	mov	r1, r0
   20100:	mov	r3, #8
   20104:	mov	r2, r5
   20108:	mov	r0, fp
   2010c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20110:	mov	r7, r0
   20114:	cmp	r6, r7
   20118:	beq	20f9c <_start@@Base+0xe598>
   2011c:	ldrb	r2, [sp, #656]	; 0x290
   20120:	b	1e318 <_start@@Base+0xb914>
   20124:	mov	r1, r0
   20128:	mov	r3, #7
   2012c:	mov	r2, r5
   20130:	mov	r0, fp
   20134:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20138:	mov	r7, r0
   2013c:	b	20064 <_start@@Base+0xd660>
   20140:	mov	r3, #0
   20144:	b	1e38c <_start@@Base+0xb988>
   20148:	mov	r3, #0
   2014c:	b	1e418 <_start@@Base+0xba14>
   20150:	mov	r3, #0
   20154:	b	1e43c <_start@@Base+0xba38>
   20158:	mov	r3, #0
   2015c:	b	1e3d4 <_start@@Base+0xb9d0>
   20160:	mov	r3, #0
   20164:	b	1e3f4 <_start@@Base+0xb9f0>
   20168:	mov	r3, #0
   2016c:	b	1e3b0 <_start@@Base+0xb9ac>
   20170:	sub	r3, fp, r5
   20174:	cmp	r3, #6
   20178:	ble	1ffc4 <_start@@Base+0xd5c0>
   2017c:	mov	r1, r5
   20180:	mov	r3, #6
   20184:	mov	r2, fp
   20188:	mov	r0, r8
   2018c:	bl	17fac <_start@@Base+0x55a8>
   20190:	cmp	r5, r0
   20194:	mov	r1, r0
   20198:	beq	1ffc4 <_start@@Base+0xd5c0>
   2019c:	ldr	r2, [sp, #672]	; 0x2a0
   201a0:	ldr	ip, [pc, #464]	; 20378 <_start@@Base+0xd974>
   201a4:	mov	r3, #1
   201a8:	str	r3, [sp]
   201ac:	stmib	sp, {r2, ip}
   201b0:	mov	r3, #0
   201b4:	mov	r2, fp
   201b8:	mov	r0, r8
   201bc:	bl	2cd50 <flatcc_json_parser_union@@Base>
   201c0:	b	1fa0c <_start@@Base+0xd008>
   201c4:	add	r1, r0, #1
   201c8:	sub	r3, fp, r1
   201cc:	cmp	r3, #1
   201d0:	mov	r3, #0
   201d4:	str	r3, [sp, #648]	; 0x288
   201d8:	ble	201ec <_start@@Base+0xd7e8>
   201dc:	ldrb	r3, [r0, #1]
   201e0:	cmp	r3, #32
   201e4:	bhi	211d4 <_start@@Base+0xe7d0>
   201e8:	beq	21274 <_start@@Base+0xe870>
   201ec:	mov	r2, fp
   201f0:	mov	r0, sl
   201f4:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   201f8:	ldr	r3, [sp, #648]	; 0x288
   201fc:	b	1e5c8 <_start@@Base+0xbbc4>
   20200:	ldrb	r3, [r7, #2]
   20204:	cmp	r3, #32
   20208:	addhi	r4, r7, #2
   2020c:	bls	1e524 <_start@@Base+0xbb20>
   20210:	b	1e538 <_start@@Base+0xbb34>
   20214:	mov	r1, r0
   20218:	mov	r3, #8
   2021c:	mov	r2, r5
   20220:	mov	r0, fp
   20224:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20228:	mov	r7, r0
   2022c:	b	1f7a8 <_start@@Base+0xcda4>
   20230:	mov	r0, r1
   20234:	add	r1, r1, #1
   20238:	sub	r3, r7, r1
   2023c:	cmp	r3, #1
   20240:	mov	r3, #0
   20244:	str	r3, [sp, #656]	; 0x290
   20248:	ble	2025c <_start@@Base+0xd858>
   2024c:	ldrb	r3, [r0, #1]
   20250:	cmp	r3, #32
   20254:	bhi	211e0 <_start@@Base+0xe7dc>
   20258:	beq	2128c <_start@@Base+0xe888>
   2025c:	mov	r2, r7
   20260:	mov	r0, r9
   20264:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   20268:	ldr	r3, [sp, #656]	; 0x290
   2026c:	b	1edf8 <_start@@Base+0xc3f4>
   20270:	mov	r1, r0
   20274:	mov	r3, #8
   20278:	mov	r2, r7
   2027c:	mov	r0, r9
   20280:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20284:	mov	r4, r0
   20288:	cmp	sl, r4
   2028c:	beq	204b0 <_start@@Base+0xdaac>
   20290:	add	r3, sp, #664	; 0x298
   20294:	ldrd	r2, [r3]
   20298:	b	1f400 <_start@@Base+0xc9fc>
   2029c:	mov	r1, r0
   202a0:	mov	r3, #7
   202a4:	mov	r2, r5
   202a8:	mov	r0, fp
   202ac:	bl	295ac <flatcc_json_parser_set_error@@Base>
   202b0:	mov	r7, r0
   202b4:	b	20114 <_start@@Base+0xd710>
   202b8:	add	r3, sp, #660	; 0x294
   202bc:	str	r3, [sp]
   202c0:	mov	r2, r7
   202c4:	mov	r3, r8
   202c8:	mov	r1, sl
   202cc:	mov	r0, r9
   202d0:	bl	14618 <_start@@Base+0x1c14>
   202d4:	cmp	r7, r0
   202d8:	cmpne	r0, sl
   202dc:	mov	r4, r0
   202e0:	bne	1ff60 <_start@@Base+0xd55c>
   202e4:	mov	sl, r9
   202e8:	mov	fp, r7
   202ec:	mov	r9, r4
   202f0:	b	1f180 <_start@@Base+0xc77c>
   202f4:	sub	r3, fp, r4
   202f8:	cmp	r3, #7
   202fc:	ble	1f9fc <_start@@Base+0xcff8>
   20300:	mov	r1, r4
   20304:	mov	r3, #7
   20308:	mov	r2, fp
   2030c:	mov	r0, r8
   20310:	bl	17fac <_start@@Base+0x55a8>
   20314:	cmp	r4, r0
   20318:	mov	r1, r0
   2031c:	beq	1f9fc <_start@@Base+0xcff8>
   20320:	ldr	r2, [sp, #672]	; 0x2a0
   20324:	ldr	lr, [pc, #76]	; 20378 <_start@@Base+0xd974>
   20328:	ldr	ip, [pc, #64]	; 20370 <_start@@Base+0xd96c>
   2032c:	mov	r3, #3
   20330:	str	r3, [sp]
   20334:	stmib	sp, {r2, ip, lr}
   20338:	mov	r3, #1
   2033c:	mov	r2, fp
   20340:	mov	r0, r8
   20344:	bl	2cec0 <flatcc_json_parser_union_type@@Base>
   20348:	b	1fa0c <_start@@Base+0xd008>
   2034c:	nop			; (mov r0, r0)
   20350:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   20354:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   20358:	ldrbvs	r0, [r2, #-0]!
   2035c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   20360:			; <UNDEFINED> instruction: 0xffff0000
   20364:	andeq	r2, r1, r8, ror #24
   20368:	andeq	sp, r1, ip, ror #18
   2036c:			; <UNDEFINED> instruction: 0x000412b4
   20370:	strdeq	r1, [r4], -r4
   20374:	andeq	r2, r1, r8, ror ip
   20378:	strdeq	r8, [r1], -ip
   2037c:	andeq	r1, r4, r4, lsl r3
   20380:	andeq	r1, r4, r8, lsr #5
   20384:	andeq	r1, r4, ip, ror r2
   20388:	andeq	r1, r4, r4, asr #5
   2038c:	ldrdeq	r1, [r4], -ip
   20390:	mov	r1, r4
   20394:	mov	r3, #5
   20398:	mov	r2, fp
   2039c:	mov	r0, r8
   203a0:	bl	17fac <_start@@Base+0x55a8>
   203a4:	cmp	r0, r4
   203a8:	mov	r1, r0
   203ac:	beq	1f9fc <_start@@Base+0xcff8>
   203b0:	ldr	r2, [sp, #672]	; 0x2a0
   203b4:	ldr	ip, [pc, #-68]	; 20378 <_start@@Base+0xd974>
   203b8:	mov	r3, #7
   203bc:	str	r3, [sp]
   203c0:	stmib	sp, {r2, ip}
   203c4:	mov	r3, #3
   203c8:	mov	r2, fp
   203cc:	mov	r0, r8
   203d0:	bl	2cd50 <flatcc_json_parser_union@@Base>
   203d4:	b	1fa0c <_start@@Base+0xd008>
   203d8:	ldr	r0, [sl]
   203dc:	bl	24f18 <flatcc_builder_end_table@@Base>
   203e0:	cmp	r0, #0
   203e4:	str	r0, [sp, #652]	; 0x28c
   203e8:	beq	1fec8 <_start@@Base+0xd4c4>
   203ec:	b	1feec <_start@@Base+0xd4e8>
   203f0:	sub	r3, fp, r4
   203f4:	cmp	r3, #7
   203f8:	ble	1f9fc <_start@@Base+0xcff8>
   203fc:	mov	r1, r4
   20400:	mov	r3, #7
   20404:	mov	r2, fp
   20408:	mov	r0, r8
   2040c:	bl	17fac <_start@@Base+0x55a8>
   20410:	cmp	r4, r0
   20414:	mov	r1, r0
   20418:	beq	1f9fc <_start@@Base+0xcff8>
   2041c:	ldr	r2, [sp, #672]	; 0x2a0
   20420:	ldr	r3, [pc, #-180]	; 20374 <_start@@Base+0xd970>
   20424:	ldr	lr, [pc, #-180]	; 20378 <_start@@Base+0xd974>
   20428:	ldr	ip, [pc, #-180]	; 2037c <_start@@Base+0xd978>
   2042c:	str	r3, [sp, #16]
   20430:	mov	r3, #9
   20434:	stmib	sp, {r2, ip, lr}
   20438:	mov	r0, r8
   2043c:	str	r3, [sp]
   20440:	mov	r2, fp
   20444:	mov	r3, #4
   20448:	bl	2d358 <flatcc_json_parser_union_type_vector@@Base>
   2044c:	b	1fa0c <_start@@Base+0xd008>
   20450:	add	r3, sp, #656	; 0x290
   20454:	str	r3, [sp]
   20458:	mov	r2, r5
   2045c:	ldr	r3, [pc, #-228]	; 20380 <_start@@Base+0xd97c>
   20460:	mov	r1, r6
   20464:	mov	r0, fp
   20468:	bl	141c8 <_start@@Base+0x17c4>
   2046c:	cmp	r5, r0
   20470:	cmpne	r0, r6
   20474:	mov	r7, r0
   20478:	bne	2006c <_start@@Base+0xd668>
   2047c:	b	1f73c <_start@@Base+0xcd38>
   20480:	add	r3, sp, #656	; 0x290
   20484:	str	r3, [sp]
   20488:	mov	r2, r5
   2048c:	ldr	r3, [pc, #-272]	; 20384 <_start@@Base+0xd980>
   20490:	mov	r1, r9
   20494:	mov	r0, fp
   20498:	bl	143e8 <_start@@Base+0x19e4>
   2049c:	cmp	r5, r0
   204a0:	cmpne	r0, r9
   204a4:	mov	r7, r0
   204a8:	bne	1f7b0 <_start@@Base+0xcdac>
   204ac:	b	1f73c <_start@@Base+0xcd38>
   204b0:	add	r3, sp, #664	; 0x298
   204b4:	str	r3, [sp]
   204b8:	mov	r2, r7
   204bc:	ldr	r3, [pc, #-316]	; 20388 <_start@@Base+0xd984>
   204c0:	mov	r1, sl
   204c4:	mov	r0, r9
   204c8:	bl	1483c <_start@@Base+0x1e38>
   204cc:	cmp	r7, r0
   204d0:	cmpne	r0, sl
   204d4:	mov	r4, r0
   204d8:	bne	20290 <_start@@Base+0xd88c>
   204dc:	b	202e4 <_start@@Base+0xd8e0>
   204e0:	mov	r1, r0
   204e4:	mov	r3, #8
   204e8:	mov	r2, r5
   204ec:	mov	r0, fp
   204f0:	bl	295ac <flatcc_json_parser_set_error@@Base>
   204f4:	mov	r7, r0
   204f8:	b	1f8f8 <_start@@Base+0xcef4>
   204fc:	ldrb	r3, [sl, #2]
   20500:	cmp	r3, #32
   20504:	addhi	r4, sl, #2
   20508:	bls	1f5f0 <_start@@Base+0xcbec>
   2050c:	b	1f604 <_start@@Base+0xcc00>
   20510:	mov	r3, #0
   20514:	add	r1, r4, #1
   20518:	mov	r2, r5
   2051c:	mov	r0, fp
   20520:	str	r3, [sp, #660]	; 0x294
   20524:	bl	12fac <_start@@Base+0x5a8>
   20528:	ldr	r3, [sp, #660]	; 0x294
   2052c:	mov	r4, r0
   20530:	b	1dd70 <_start@@Base+0xb36c>
   20534:	add	r1, r9, #1
   20538:	sub	r3, fp, r1
   2053c:	cmp	r3, #1
   20540:	ble	20554 <_start@@Base+0xdb50>
   20544:	ldrb	r3, [r9, #1]
   20548:	cmp	r3, #32
   2054c:	bhi	20564 <_start@@Base+0xdb60>
   20550:	beq	212a8 <_start@@Base+0xe8a4>
   20554:	mov	r2, fp
   20558:	mov	r0, sl
   2055c:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   20560:	mov	r1, r0
   20564:	cmp	fp, r1
   20568:	beq	20578 <_start@@Base+0xdb74>
   2056c:	ldrb	r3, [r1]
   20570:	cmp	r3, #125	; 0x7d
   20574:	beq	212bc <_start@@Base+0xe8b8>
   20578:	mov	r5, #0
   2057c:	ldr	r9, [pc, #-504]	; 2038c <_start@@Base+0xd988>
   20580:	mov	r8, r5
   20584:	cmp	fp, r1
   20588:	beq	208d0 <_start@@Base+0xdecc>
   2058c:	ldrb	r3, [r1]
   20590:	cmp	r3, #34	; 0x22
   20594:	moveq	r3, #0
   20598:	addeq	r1, r1, #1
   2059c:	streq	r3, [sl, #12]
   205a0:	beq	205b4 <_start@@Base+0xdbb0>
   205a4:	cmp	r3, #46	; 0x2e
   205a8:	movne	r3, #1
   205ac:	strne	r3, [sl, #12]
   205b0:	beq	20dac <_start@@Base+0xe3a8>
   205b4:	sub	r3, fp, r1
   205b8:	cmp	r3, #8
   205bc:	bls	208e4 <_start@@Base+0xdee0>
   205c0:	ldrb	r2, [r1, #7]
   205c4:	mov	r3, #0
   205c8:	ldrb	r6, [r1, #6]
   205cc:	lsr	r0, r6, #24
   205d0:	str	r0, [sp, #228]	; 0xe4
   205d4:	lsl	r0, r6, #8
   205d8:	str	r0, [sp, #224]	; 0xe0
   205dc:	ldrd	r6, [sp, #224]	; 0xe0
   205e0:	orr	r6, r6, r2
   205e4:	orr	r7, r7, r3
   205e8:	mov	r2, r6
   205ec:	mov	r3, r7
   205f0:	ldrb	r6, [r1, #5]
   205f4:	lsr	r0, r6, #16
   205f8:	str	r0, [sp, #124]	; 0x7c
   205fc:	lsl	r0, r6, #16
   20600:	str	r0, [sp, #120]	; 0x78
   20604:	ldrd	r6, [sp, #120]	; 0x78
   20608:	orr	r6, r6, r2
   2060c:	orr	r7, r7, r3
   20610:	mov	r2, r6
   20614:	mov	r3, r7
   20618:	ldrb	r6, [r1, #4]
   2061c:	lsr	r0, r6, #8
   20620:	str	r0, [sp, #68]	; 0x44
   20624:	lsl	r0, r6, #24
   20628:	str	r0, [sp, #64]	; 0x40
   2062c:	ldrd	r6, [sp, #64]	; 0x40
   20630:	orr	r6, r6, r2
   20634:	orr	r7, r7, r3
   20638:	mov	r2, r6
   2063c:	mov	r3, r7
   20640:	ldrb	r0, [r1, #3]
   20644:	str	r0, [sp, #84]	; 0x54
   20648:	mov	r0, #0
   2064c:	str	r0, [sp, #80]	; 0x50
   20650:	ldrd	r6, [sp, #80]	; 0x50
   20654:	orr	r6, r6, r2
   20658:	orr	r7, r7, r3
   2065c:	mov	r2, r6
   20660:	mov	r3, r7
   20664:	ldrb	r6, [r1, #2]
   20668:	lsl	r0, r6, #8
   2066c:	str	r0, [sp, #44]	; 0x2c
   20670:	mov	r0, #0
   20674:	str	r0, [sp, #40]	; 0x28
   20678:	ldrd	r6, [sp, #40]	; 0x28
   2067c:	orr	r6, r6, r2
   20680:	orr	r7, r7, r3
   20684:	mov	r2, r6
   20688:	mov	r3, r7
   2068c:	ldrb	r6, [r1, #1]
   20690:	lsl	r0, r6, #16
   20694:	str	r0, [sp, #36]	; 0x24
   20698:	mov	r0, #0
   2069c:	str	r0, [sp, #32]
   206a0:	ldrd	r6, [sp, #32]
   206a4:	orr	r6, r6, r2
   206a8:	orr	r7, r7, r3
   206ac:	mov	r2, r6
   206b0:	mov	r3, r7
   206b4:	ldrb	r6, [r1]
   206b8:	lsl	r0, r6, #24
   206bc:	str	r0, [sp, #28]
   206c0:	mov	r0, #0
   206c4:	str	r0, [sp, #24]
   206c8:	ldrd	r6, [sp, #24]
   206cc:	orr	r6, r6, r2
   206d0:	orr	r7, r7, r3
   206d4:	mov	r2, r6
   206d8:	mov	r3, r7
   206dc:	add	r7, pc, #868	; 0x364
   206e0:	ldrd	r6, [r7]
   206e4:	cmp	r3, r7
   206e8:	cmpeq	r2, r6
   206ec:	bne	208d0 <_start@@Base+0xdecc>
   206f0:	add	r4, r1, #8
   206f4:	sub	r0, fp, r4
   206f8:	cmp	r0, #8
   206fc:	bls	20968 <_start@@Base+0xdf64>
   20700:	ldrb	r6, [r1, #15]
   20704:	mov	r7, #0
   20708:	ldrb	r2, [r1, #14]
   2070c:	lsl	r3, r2, #8
   20710:	str	r3, [sp, #440]	; 0x1b8
   20714:	add	r3, sp, #440	; 0x1b8
   20718:	lsr	ip, r2, #24
   2071c:	str	ip, [sp, #444]	; 0x1bc
   20720:	ldrd	r2, [r3]
   20724:	orr	r2, r2, r6
   20728:	orr	r3, r3, r7
   2072c:	mov	r6, r2
   20730:	mov	r7, r3
   20734:	ldrb	r2, [r1, #13]
   20738:	lsl	r3, r2, #16
   2073c:	str	r3, [sp, #312]	; 0x138
   20740:	add	r3, sp, #312	; 0x138
   20744:	lsr	ip, r2, #16
   20748:	str	ip, [sp, #316]	; 0x13c
   2074c:	ldrd	r2, [r3]
   20750:	orr	r2, r2, r6
   20754:	orr	r3, r3, r7
   20758:	mov	r6, r2
   2075c:	mov	r7, r3
   20760:	ldrb	r2, [r1, #12]
   20764:	lsr	ip, r2, #8
   20768:	lsl	r3, r2, #24
   2076c:	str	ip, [sp, #236]	; 0xec
   20770:	str	r3, [sp, #232]	; 0xe8
   20774:	ldrd	r2, [sp, #232]	; 0xe8
   20778:	orr	r2, r2, r6
   2077c:	orr	r3, r3, r7
   20780:	ldrb	ip, [r1, #11]
   20784:	str	ip, [sp, #260]	; 0x104
   20788:	mov	ip, #0
   2078c:	str	ip, [sp, #256]	; 0x100
   20790:	add	ip, sp, #256	; 0x100
   20794:	ldrd	r6, [ip]
   20798:	orr	r6, r6, r2
   2079c:	orr	r7, r7, r3
   207a0:	mov	r2, r6
   207a4:	mov	r3, r7
   207a8:	ldrb	r6, [r1, #10]
   207ac:	lsl	ip, r6, #8
   207b0:	str	ip, [sp, #196]	; 0xc4
   207b4:	mov	ip, #0
   207b8:	str	ip, [sp, #192]	; 0xc0
   207bc:	ldrd	r6, [sp, #192]	; 0xc0
   207c0:	orr	r6, r6, r2
   207c4:	orr	r7, r7, r3
   207c8:	mov	r2, r6
   207cc:	mov	r3, r7
   207d0:	ldrb	r6, [r1, #9]
   207d4:	lsl	ip, r6, #16
   207d8:	str	ip, [sp, #172]	; 0xac
   207dc:	mov	ip, #0
   207e0:	str	ip, [sp, #168]	; 0xa8
   207e4:	ldrd	r6, [sp, #168]	; 0xa8
   207e8:	orr	r6, r6, r2
   207ec:	orr	r7, r7, r3
   207f0:	mov	r2, r6
   207f4:	mov	r3, r7
   207f8:	ldrb	r6, [r1, #8]
   207fc:	lsl	ip, r6, #24
   20800:	str	ip, [sp, #100]	; 0x64
   20804:	mov	ip, #0
   20808:	str	ip, [sp, #96]	; 0x60
   2080c:	ldrd	r6, [sp, #96]	; 0x60
   20810:	orr	r6, r6, r2
   20814:	orr	r7, r7, r3
   20818:	mov	r2, r6
   2081c:	mov	r3, r7
   20820:	add	r7, pc, #552	; 0x228
   20824:	ldrd	r6, [r7]
   20828:	cmp	r3, r7
   2082c:	cmpeq	r2, r6
   20830:	beq	20a7c <_start@@Base+0xe078>
   20834:	add	r7, pc, #540	; 0x21c
   20838:	ldrd	r6, [r7]
   2083c:	bic	r2, r2, #255	; 0xff
   20840:	cmp	r3, r7
   20844:	cmpeq	r2, r6
   20848:	bne	20854 <_start@@Base+0xde50>
   2084c:	cmp	r0, #7
   20850:	bgt	20dc4 <_start@@Base+0xe3c0>
   20854:	mov	r1, r4
   20858:	mov	r2, fp
   2085c:	mov	r0, sl
   20860:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   20864:	mov	r4, r0
   20868:	sub	r3, fp, r4
   2086c:	cmp	r3, #1
   20870:	ble	20884 <_start@@Base+0xde80>
   20874:	ldrb	r3, [r4]
   20878:	cmp	r3, #32
   2087c:	bhi	20898 <_start@@Base+0xde94>
   20880:	beq	20a24 <_start@@Base+0xe020>
   20884:	mov	r1, r4
   20888:	mov	r2, fp
   2088c:	mov	r0, sl
   20890:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   20894:	mov	r4, r0
   20898:	cmp	fp, r4
   2089c:	beq	20a3c <_start@@Base+0xe038>
   208a0:	ldrb	r3, [r4]
   208a4:	cmp	r3, #44	; 0x2c
   208a8:	beq	20cb0 <_start@@Base+0xe2ac>
   208ac:	cmp	r3, #125	; 0x7d
   208b0:	beq	209ec <_start@@Base+0xdfe8>
   208b4:	mov	r1, r4
   208b8:	mov	r3, #10
   208bc:	mov	r2, fp
   208c0:	mov	r0, sl
   208c4:	bl	295ac <flatcc_json_parser_set_error@@Base>
   208c8:	mov	r9, r0
   208cc:	b	1febc <_start@@Base+0xd4b8>
   208d0:	mov	r2, fp
   208d4:	mov	r0, sl
   208d8:	bl	2be8c <flatcc_json_parser_unmatched_symbol@@Base>
   208dc:	mov	r4, r0
   208e0:	b	20868 <_start@@Base+0xde64>
   208e4:	sub	r3, r3, #1
   208e8:	cmp	r3, #7
   208ec:	ldrls	pc, [pc, r3, lsl #2]
   208f0:	b	208d0 <_start@@Base+0xdecc>
   208f4:	andeq	r0, r2, ip, asr r9
   208f8:	andeq	r0, r2, r0, asr r9
   208fc:	andeq	r0, r2, r4, asr #18
   20900:	andeq	r0, r2, r8, lsr r9
   20904:	andeq	r0, r2, ip, lsr #18
   20908:	andeq	r0, r2, r0, lsr #18
   2090c:	andeq	r0, r2, r4, lsl r9
   20910:	andeq	r0, r2, r0, asr #11
   20914:	mov	r2, r5
   20918:	mov	r3, r8
   2091c:	b	205c8 <_start@@Base+0xdbc4>
   20920:	mov	r2, r5
   20924:	mov	r3, r8
   20928:	b	205f0 <_start@@Base+0xdbec>
   2092c:	mov	r2, r5
   20930:	mov	r3, r8
   20934:	b	20618 <_start@@Base+0xdc14>
   20938:	mov	r2, r5
   2093c:	mov	r3, r8
   20940:	b	20640 <_start@@Base+0xdc3c>
   20944:	mov	r2, r5
   20948:	mov	r3, r8
   2094c:	b	20664 <_start@@Base+0xdc60>
   20950:	mov	r2, r5
   20954:	mov	r3, r8
   20958:	b	2068c <_start@@Base+0xdc88>
   2095c:	mov	r2, r5
   20960:	mov	r3, r8
   20964:	b	206b4 <_start@@Base+0xdcb0>
   20968:	sub	r3, r0, #1
   2096c:	cmp	r3, #7
   20970:	ldrls	pc, [pc, r3, lsl #2]
   20974:	b	20854 <_start@@Base+0xde50>
   20978:	andeq	r0, r2, r0, ror #19
   2097c:	ldrdeq	r0, [r2], -r4
   20980:	andeq	r0, r2, r8, asr #19
   20984:			; <UNDEFINED> instruction: 0x000209bc
   20988:			; <UNDEFINED> instruction: 0x000209b0
   2098c:	andeq	r0, r2, r4, lsr #19
   20990:	muleq	r2, r8, r9
   20994:	andeq	r0, r2, r0, lsl #14
   20998:	mov	r6, r5
   2099c:	mov	r7, r8
   209a0:	b	20708 <_start@@Base+0xdd04>
   209a4:	mov	r6, r5
   209a8:	mov	r7, r8
   209ac:	b	20734 <_start@@Base+0xdd30>
   209b0:	mov	r6, r5
   209b4:	mov	r7, r8
   209b8:	b	20760 <_start@@Base+0xdd5c>
   209bc:	mov	r2, r5
   209c0:	mov	r3, r8
   209c4:	b	20780 <_start@@Base+0xdd7c>
   209c8:	mov	r2, r5
   209cc:	mov	r3, r8
   209d0:	b	207a8 <_start@@Base+0xdda4>
   209d4:	mov	r2, r5
   209d8:	mov	r3, r8
   209dc:	b	207d0 <_start@@Base+0xddcc>
   209e0:	mov	r2, r5
   209e4:	mov	r3, r8
   209e8:	b	207f8 <_start@@Base+0xddf4>
   209ec:	add	r9, r4, #1
   209f0:	sub	r3, fp, r9
   209f4:	cmp	r3, #1
   209f8:	ble	20a0c <_start@@Base+0xe008>
   209fc:	ldrb	r3, [r4, #1]
   20a00:	cmp	r3, #32
   20a04:	bhi	1febc <_start@@Base+0xd4b8>
   20a08:	beq	20eb4 <_start@@Base+0xe4b0>
   20a0c:	mov	r1, r9
   20a10:	mov	r2, fp
   20a14:	mov	r0, sl
   20a18:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   20a1c:	mov	r9, r0
   20a20:	b	1febc <_start@@Base+0xd4b8>
   20a24:	ldrb	r3, [r4, #1]
   20a28:	cmp	r3, #32
   20a2c:	addhi	r4, r4, #1
   20a30:	bls	20884 <_start@@Base+0xde80>
   20a34:	cmp	fp, r4
   20a38:	bne	208a0 <_start@@Base+0xde9c>
   20a3c:	mov	r9, fp
   20a40:	b	1febc <_start@@Base+0xd4b8>
   20a44:	nop			; (mov r0, r0)
   20a48:	svcpl	0x00626262
   20a4c:	cmnvs	r1, r1, ror #2
   20a50:	cmnvs	r2, pc, asr r4
   20a54:	subsvs	r7, pc, #116, 6	; 0xd0000001
   20a58:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   20a5c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   20a60:	movwvc	r0, #0
   20a64:	cmnvc	r4, #112, 10	; 0x1c000000
   20a68:	andeq	r1, r4, ip, lsl #5
   20a6c:	andeq	r1, r4, r4, lsr r3
   20a70:	strdeq	r8, [r1], -ip
   20a74:	muleq	r4, ip, r2
   20a78:	andeq	r1, r4, r8, ror #5
   20a7c:	add	r4, r1, #16
   20a80:	sub	r0, fp, r4
   20a84:	cmp	r0, #8
   20a88:	bls	20d28 <_start@@Base+0xe324>
   20a8c:	ldrb	r6, [r1, #23]
   20a90:	mov	r7, #0
   20a94:	ldrb	r2, [r1, #22]
   20a98:	lsl	r3, r2, #8
   20a9c:	str	r3, [sp, #616]	; 0x268
   20aa0:	add	r3, sp, #616	; 0x268
   20aa4:	lsr	ip, r2, #24
   20aa8:	str	ip, [sp, #620]	; 0x26c
   20aac:	ldrd	r2, [r3]
   20ab0:	orr	r2, r2, r6
   20ab4:	orr	r3, r3, r7
   20ab8:	mov	r6, r2
   20abc:	mov	r7, r3
   20ac0:	ldrb	r2, [r1, #21]
   20ac4:	lsl	r3, r2, #16
   20ac8:	str	r3, [sp, #576]	; 0x240
   20acc:	add	r3, sp, #576	; 0x240
   20ad0:	lsr	ip, r2, #16
   20ad4:	str	ip, [sp, #580]	; 0x244
   20ad8:	ldrd	r2, [r3]
   20adc:	orr	r2, r2, r6
   20ae0:	orr	r3, r3, r7
   20ae4:	mov	r6, r2
   20ae8:	mov	r7, r3
   20aec:	ldrb	r2, [r1, #20]
   20af0:	lsl	r3, r2, #24
   20af4:	str	r3, [sp, #544]	; 0x220
   20af8:	add	r3, sp, #544	; 0x220
   20afc:	lsr	ip, r2, #8
   20b00:	str	ip, [sp, #548]	; 0x224
   20b04:	ldrd	r2, [r3]
   20b08:	orr	r2, r2, r6
   20b0c:	orr	r3, r3, r7
   20b10:	mov	r6, r2
   20b14:	mov	r7, r3
   20b18:	ldrb	r3, [r1, #19]
   20b1c:	str	r3, [sp, #556]	; 0x22c
   20b20:	mov	r3, #0
   20b24:	str	r3, [sp, #552]	; 0x228
   20b28:	add	r3, sp, #552	; 0x228
   20b2c:	ldrd	r2, [r3]
   20b30:	orr	r2, r2, r6
   20b34:	orr	r3, r3, r7
   20b38:	mov	r6, r2
   20b3c:	mov	r7, r3
   20b40:	ldrb	r2, [r1, #18]
   20b44:	lsl	r3, r2, #8
   20b48:	str	r3, [sp, #524]	; 0x20c
   20b4c:	mov	r3, #0
   20b50:	str	r3, [sp, #520]	; 0x208
   20b54:	add	r3, sp, #520	; 0x208
   20b58:	ldrd	r2, [r3]
   20b5c:	orr	r2, r2, r6
   20b60:	orr	r3, r3, r7
   20b64:	mov	r6, r2
   20b68:	mov	r7, r3
   20b6c:	ldrb	r2, [r1, #17]
   20b70:	lsl	r3, r2, #16
   20b74:	str	r3, [sp, #484]	; 0x1e4
   20b78:	mov	r3, #0
   20b7c:	str	r3, [sp, #480]	; 0x1e0
   20b80:	add	r3, sp, #480	; 0x1e0
   20b84:	ldrd	r2, [r3]
   20b88:	orr	r2, r2, r6
   20b8c:	orr	r3, r3, r7
   20b90:	mov	r6, r2
   20b94:	mov	r7, r3
   20b98:	ldrb	r2, [r1, #16]
   20b9c:	lsl	r3, r2, #24
   20ba0:	str	r3, [sp, #436]	; 0x1b4
   20ba4:	mov	r3, #0
   20ba8:	str	r3, [sp, #432]	; 0x1b0
   20bac:	add	r3, sp, #432	; 0x1b0
   20bb0:	ldrd	r2, [r3]
   20bb4:	orr	r2, r2, r6
   20bb8:	orr	r3, r3, r7
   20bbc:	mov	r7, r3
   20bc0:	and	r6, r2, #-16777216	; 0xff000000
   20bc4:	sub	r3, pc, #364	; 0x16c
   20bc8:	ldrd	r2, [r3]
   20bcc:	cmp	r7, r3
   20bd0:	cmpeq	r6, r2
   20bd4:	bne	20854 <_start@@Base+0xde50>
   20bd8:	cmp	r0, #5
   20bdc:	ble	20854 <_start@@Base+0xde50>
   20be0:	mov	r3, #5
   20be4:	mov	r2, fp
   20be8:	mov	r1, r4
   20bec:	mov	r0, sl
   20bf0:	bl	17fac <_start@@Base+0x55a8>
   20bf4:	cmp	r4, r0
   20bf8:	mov	r6, r0
   20bfc:	beq	20854 <_start@@Base+0xde50>
   20c00:	add	r3, sp, #432	; 0x1b0
   20c04:	cmp	fp, r0
   20c08:	ldrd	r2, [r3]
   20c0c:	str	r5, [sp, #672]	; 0x2a0
   20c10:	str	r8, [sp, #676]	; 0x2a4
   20c14:	str	r2, [sp, #660]	; 0x294
   20c18:	str	r2, [sp, #664]	; 0x298
   20c1c:	beq	210c8 <_start@@Base+0xe6c4>
   20c20:	add	r3, sp, #672	; 0x2a0
   20c24:	str	r3, [sp]
   20c28:	mov	r1, r0
   20c2c:	add	r3, sp, #664	; 0x298
   20c30:	mov	r2, fp
   20c34:	mov	r0, sl
   20c38:	bl	2c350 <flatcc_json_parser_integer@@Base>
   20c3c:	cmp	r6, r0
   20c40:	mov	r4, r0
   20c44:	beq	210c8 <_start@@Base+0xe6c4>
   20c48:	ldr	r3, [sp, #664]	; 0x298
   20c4c:	cmp	r3, #0
   20c50:	bne	20f3c <_start@@Base+0xe538>
   20c54:	add	r3, sp, #672	; 0x2a0
   20c58:	mov	r1, #0
   20c5c:	ldrd	r2, [r3]
   20c60:	mvn	r0, #0
   20c64:	cmp	r3, r1
   20c68:	cmpeq	r2, r0
   20c6c:	strls	r2, [sp, #660]	; 0x294
   20c70:	bhi	20f64 <_start@@Base+0xe560>
   20c74:	cmp	r2, #0
   20c78:	bne	20c88 <_start@@Base+0xe284>
   20c7c:	ldr	r3, [sl, #8]
   20c80:	tst	r3, #2
   20c84:	beq	20868 <_start@@Base+0xde64>
   20c88:	mov	r3, #4
   20c8c:	mov	r2, r3
   20c90:	mov	r1, #1
   20c94:	ldr	r0, [sl]
   20c98:	bl	26644 <flatcc_builder_table_add@@Base>
   20c9c:	cmp	r0, #0
   20ca0:	beq	20f34 <_start@@Base+0xe530>
   20ca4:	ldr	r3, [sp, #660]	; 0x294
   20ca8:	str	r3, [r0]
   20cac:	b	20868 <_start@@Base+0xde64>
   20cb0:	add	r1, r4, #1
   20cb4:	sub	r3, fp, r1
   20cb8:	cmp	r3, #1
   20cbc:	ble	20cd0 <_start@@Base+0xe2cc>
   20cc0:	ldrb	r3, [r4, #1]
   20cc4:	cmp	r3, #32
   20cc8:	bhi	20ce0 <_start@@Base+0xe2dc>
   20ccc:	beq	20ec8 <_start@@Base+0xe4c4>
   20cd0:	mov	r2, fp
   20cd4:	mov	r0, sl
   20cd8:	bl	296ac <flatcc_json_parser_space_ext@@Base>
   20cdc:	mov	r1, r0
   20ce0:	cmp	fp, r1
   20ce4:	beq	20f80 <_start@@Base+0xe57c>
   20ce8:	ldrb	r3, [r1]
   20cec:	cmp	r3, #125	; 0x7d
   20cf0:	bne	20584 <_start@@Base+0xdb80>
   20cf4:	add	r9, r1, #1
   20cf8:	sub	r3, fp, r9
   20cfc:	cmp	r3, #1
   20d00:	ble	20a0c <_start@@Base+0xe008>
   20d04:	ldrb	r3, [r1, #1]
   20d08:	cmp	r3, #32
   20d0c:	bhi	1febc <_start@@Base+0xd4b8>
   20d10:	bne	20a0c <_start@@Base+0xe008>
   20d14:	ldrb	r3, [r1, #2]
   20d18:	cmp	r3, #32
   20d1c:	addhi	r9, r1, #2
   20d20:	bls	20a0c <_start@@Base+0xe008>
   20d24:	b	1febc <_start@@Base+0xd4b8>
   20d28:	sub	r3, r0, #1
   20d2c:	cmp	r3, #7
   20d30:	ldrls	pc, [pc, r3, lsl #2]
   20d34:	b	20854 <_start@@Base+0xde50>
   20d38:	andeq	r0, r2, r0, lsr #27
   20d3c:	muleq	r2, r4, sp
   20d40:	andeq	r0, r2, r8, lsl #27
   20d44:	andeq	r0, r2, ip, ror sp
   20d48:	andeq	r0, r2, r0, ror sp
   20d4c:	andeq	r0, r2, r4, ror #26
   20d50:	andeq	r0, r2, r8, asr sp
   20d54:	andeq	r0, r2, ip, lsl #21
   20d58:	mov	r6, r5
   20d5c:	mov	r7, r8
   20d60:	b	20a94 <_start@@Base+0xe090>
   20d64:	mov	r6, r5
   20d68:	mov	r7, r8
   20d6c:	b	20ac0 <_start@@Base+0xe0bc>
   20d70:	mov	r6, r5
   20d74:	mov	r7, r8
   20d78:	b	20aec <_start@@Base+0xe0e8>
   20d7c:	mov	r6, r5
   20d80:	mov	r7, r8
   20d84:	b	20b18 <_start@@Base+0xe114>
   20d88:	mov	r6, r5
   20d8c:	mov	r7, r8
   20d90:	b	20b40 <_start@@Base+0xe13c>
   20d94:	mov	r6, r5
   20d98:	mov	r7, r8
   20d9c:	b	20b6c <_start@@Base+0xe168>
   20da0:	mov	r6, r5
   20da4:	mov	r7, r8
   20da8:	b	20b98 <_start@@Base+0xe194>
   20dac:	mov	r3, #5
   20db0:	mov	r2, fp
   20db4:	mov	r0, sl
   20db8:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20dbc:	mov	r1, r0
   20dc0:	b	205b4 <_start@@Base+0xdbb0>
   20dc4:	mov	r3, #7
   20dc8:	mov	r2, fp
   20dcc:	mov	r1, r4
   20dd0:	mov	r0, sl
   20dd4:	bl	17fac <_start@@Base+0x55a8>
   20dd8:	cmp	r4, r0
   20ddc:	mov	r6, r0
   20de0:	beq	20854 <_start@@Base+0xde50>
   20de4:	ldr	r3, [sp, #96]	; 0x60
   20de8:	cmp	fp, r0
   20dec:	str	r5, [sp, #664]	; 0x298
   20df0:	str	r8, [sp, #668]	; 0x29c
   20df4:	str	r5, [sp, #672]	; 0x2a0
   20df8:	str	r8, [sp, #676]	; 0x2a4
   20dfc:	str	r3, [sp, #660]	; 0x294
   20e00:	beq	20f08 <_start@@Base+0xe504>
   20e04:	add	r3, sp, #672	; 0x2a0
   20e08:	str	r3, [sp]
   20e0c:	mov	r1, r0
   20e10:	add	r3, sp, #660	; 0x294
   20e14:	mov	r2, fp
   20e18:	mov	r0, sl
   20e1c:	bl	2c350 <flatcc_json_parser_integer@@Base>
   20e20:	cmp	r6, r0
   20e24:	mov	r4, r0
   20e28:	beq	20f08 <_start@@Base+0xe504>
   20e2c:	ldr	r1, [sp, #660]	; 0x294
   20e30:	add	r3, sp, #672	; 0x2a0
   20e34:	cmp	r1, #0
   20e38:	ldrd	r2, [r3]
   20e3c:	beq	20e9c <_start@@Base+0xe498>
   20e40:	cmp	r3, #-2147483648	; 0x80000000
   20e44:	cmpeq	r2, #0
   20e48:	bhi	20edc <_start@@Base+0xe4d8>
   20e4c:	rsbs	r2, r2, #0
   20e50:	rsc	r3, r3, #0
   20e54:	add	r1, sp, #664	; 0x298
   20e58:	strd	r2, [r1]
   20e5c:	orrs	r3, r2, r3
   20e60:	bne	20e70 <_start@@Base+0xe46c>
   20e64:	ldr	r3, [sl, #8]
   20e68:	tst	r3, #2
   20e6c:	beq	20868 <_start@@Base+0xde64>
   20e70:	mov	r3, #8
   20e74:	mov	r2, r3
   20e78:	mov	r1, #0
   20e7c:	ldr	r0, [sl]
   20e80:	bl	26644 <flatcc_builder_table_add@@Base>
   20e84:	cmp	r0, #0
   20e88:	beq	20f34 <_start@@Base+0xe530>
   20e8c:	add	r3, sp, #664	; 0x298
   20e90:	ldrd	r2, [r3]
   20e94:	strd	r2, [r0]
   20e98:	b	20868 <_start@@Base+0xde64>
   20e9c:	cmp	r2, #0
   20ea0:	sbcs	r1, r3, #0
   20ea4:	blt	21058 <_start@@Base+0xe654>
   20ea8:	add	r1, sp, #664	; 0x298
   20eac:	strd	r2, [r1]
   20eb0:	b	20e5c <_start@@Base+0xe458>
   20eb4:	ldrb	r3, [r4, #2]
   20eb8:	cmp	r3, #32
   20ebc:	addhi	r9, r4, #2
   20ec0:	bls	20a0c <_start@@Base+0xe008>
   20ec4:	b	1febc <_start@@Base+0xd4b8>
   20ec8:	ldrb	r3, [r4, #2]
   20ecc:	cmp	r3, #32
   20ed0:	addhi	r1, r4, #2
   20ed4:	bls	20cd0 <_start@@Base+0xe2cc>
   20ed8:	b	20ce0 <_start@@Base+0xe2dc>
   20edc:	mov	r1, r0
   20ee0:	mov	r3, #8
   20ee4:	mov	r2, fp
   20ee8:	mov	r0, sl
   20eec:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20ef0:	mov	r4, r0
   20ef4:	cmp	r6, r4
   20ef8:	beq	20f08 <_start@@Base+0xe504>
   20efc:	add	r3, sp, #664	; 0x298
   20f00:	ldrd	r2, [r3]
   20f04:	b	20e5c <_start@@Base+0xe458>
   20f08:	add	r3, sp, #664	; 0x298
   20f0c:	str	r3, [sp]
   20f10:	mov	r2, fp
   20f14:	ldr	r3, [pc, #-1188]	; 20a78 <_start@@Base+0xe074>
   20f18:	mov	r1, r6
   20f1c:	mov	r0, sl
   20f20:	bl	1483c <_start@@Base+0x1e38>
   20f24:	cmp	fp, r0
   20f28:	cmpne	r0, r6
   20f2c:	mov	r4, r0
   20f30:	bne	20efc <_start@@Base+0xe4f8>
   20f34:	mov	r9, r4
   20f38:	b	1fec8 <_start@@Base+0xd4c4>
   20f3c:	mov	r1, r0
   20f40:	mov	r3, #8
   20f44:	mov	r2, fp
   20f48:	mov	r0, sl
   20f4c:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20f50:	mov	r4, r0
   20f54:	cmp	r6, r4
   20f58:	beq	210c8 <_start@@Base+0xe6c4>
   20f5c:	ldr	r2, [sp, #660]	; 0x294
   20f60:	b	20c74 <_start@@Base+0xe270>
   20f64:	mov	r1, r4
   20f68:	mov	r3, #7
   20f6c:	mov	r2, fp
   20f70:	mov	r0, sl
   20f74:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20f78:	mov	r4, r0
   20f7c:	b	20f54 <_start@@Base+0xe550>
   20f80:	mov	r3, #10
   20f84:	mov	r2, fp
   20f88:	mov	r1, fp
   20f8c:	mov	r0, sl
   20f90:	bl	295ac <flatcc_json_parser_set_error@@Base>
   20f94:	mov	r9, r0
   20f98:	b	1febc <_start@@Base+0xd4b8>
   20f9c:	add	r3, sp, #656	; 0x290
   20fa0:	str	r3, [sp]
   20fa4:	mov	r2, r5
   20fa8:	ldr	r3, [pc, #-1340]	; 20a74 <_start@@Base+0xe070>
   20fac:	mov	r1, r6
   20fb0:	mov	r0, fp
   20fb4:	bl	141c8 <_start@@Base+0x17c4>
   20fb8:	cmp	r5, r0
   20fbc:	cmpne	r0, r6
   20fc0:	mov	r7, r0
   20fc4:	bne	2011c <_start@@Base+0xd718>
   20fc8:	b	1f73c <_start@@Base+0xcd38>
   20fcc:	ldr	r0, [r7]
   20fd0:	str	r1, [sp, #128]	; 0x80
   20fd4:	bl	24f18 <flatcc_builder_end_table@@Base>
   20fd8:	ldr	r1, [sp, #128]	; 0x80
   20fdc:	subs	r4, r0, #0
   20fe0:	beq	1eae8 <_start@@Base+0xc0e4>
   20fe4:	b	1fd80 <_start@@Base+0xd37c>
   20fe8:	sub	r3, fp, r4
   20fec:	cmp	r3, #6
   20ff0:	ble	1f9fc <_start@@Base+0xcff8>
   20ff4:	mov	r1, r4
   20ff8:	mov	r3, #6
   20ffc:	mov	r2, fp
   21000:	mov	r0, r8
   21004:	bl	17fac <_start@@Base+0x55a8>
   21008:	cmp	r4, r0
   2100c:	mov	r1, r0
   21010:	beq	1f9fc <_start@@Base+0xcff8>
   21014:	ldr	r2, [sp, #672]	; 0x2a0
   21018:	ldr	lr, [pc, #-1456]	; 20a70 <_start@@Base+0xe06c>
   2101c:	ldr	ip, [pc, #-1464]	; 20a6c <_start@@Base+0xe068>
   21020:	mov	r3, #5
   21024:	str	r3, [sp]
   21028:	stmib	sp, {r2, ip, lr}
   2102c:	mov	r3, #2
   21030:	mov	r2, fp
   21034:	mov	r0, r8
   21038:	bl	2cec0 <flatcc_json_parser_union_type@@Base>
   2103c:	b	1fa0c <_start@@Base+0xd008>
   21040:	ldr	r0, [sl]
   21044:	bl	24f18 <flatcc_builder_end_table@@Base>
   21048:	cmp	r0, #0
   2104c:	str	r0, [sp, #652]	; 0x28c
   21050:	beq	1f180 <_start@@Base+0xc77c>
   21054:	b	1f1a4 <_start@@Base+0xc7a0>
   21058:	mov	r1, r0
   2105c:	mov	r3, #7
   21060:	mov	r2, fp
   21064:	mov	r0, sl
   21068:	bl	295ac <flatcc_json_parser_set_error@@Base>
   2106c:	mov	r4, r0
   21070:	b	20ef4 <_start@@Base+0xe4f0>
   21074:	add	r3, sp, #656	; 0x290
   21078:	str	r3, [sp]
   2107c:	mov	r2, r5
   21080:	ldr	r3, [pc, #-1568]	; 20a68 <_start@@Base+0xe064>
   21084:	mov	r1, sl
   21088:	mov	r0, fp
   2108c:	bl	143e8 <_start@@Base+0x19e4>
   21090:	cmp	r5, r0
   21094:	cmpne	r0, sl
   21098:	mov	r7, r0
   2109c:	bne	1f900 <_start@@Base+0xcefc>
   210a0:	b	1f73c <_start@@Base+0xcd38>
   210a4:	mov	ip, #0
   210a8:	mov	r3, #10
   210ac:	mov	r2, fp
   210b0:	mov	r1, fp
   210b4:	mov	r0, sl
   210b8:	str	ip, [sp, #648]	; 0x288
   210bc:	bl	295ac <flatcc_json_parser_set_error@@Base>
   210c0:	ldr	r3, [sp, #648]	; 0x288
   210c4:	b	1e5c8 <_start@@Base+0xbbc4>
   210c8:	add	r3, sp, #660	; 0x294
   210cc:	str	r3, [sp]
   210d0:	mov	r2, fp
   210d4:	mov	r3, r9
   210d8:	mov	r1, r6
   210dc:	mov	r0, sl
   210e0:	bl	14618 <_start@@Base+0x1c14>
   210e4:	cmp	fp, r0
   210e8:	cmpne	r0, r6
   210ec:	mov	r4, r0
   210f0:	bne	20f5c <_start@@Base+0xe558>
   210f4:	b	20f34 <_start@@Base+0xe530>
   210f8:	mov	ip, #0
   210fc:	mov	r3, #10
   21100:	mov	r2, r7
   21104:	mov	r1, r7
   21108:	mov	r0, r9
   2110c:	str	ip, [sp, #656]	; 0x290
   21110:	bl	295ac <flatcc_json_parser_set_error@@Base>
   21114:	ldr	r3, [sp, #656]	; 0x290
   21118:	b	1edf8 <_start@@Base+0xc3f4>
   2111c:	add	r4, r4, #16
   21120:	mov	r0, r4
   21124:	mov	r1, fp
   21128:	bl	12b30 <_start@@Base+0x12c>
   2112c:	add	r3, pc, #444	; 0x1bc
   21130:	ldrd	r2, [r3]
   21134:	mov	r0, #0
   21138:	bic	r1, r1, #255	; 0xff
   2113c:	cmp	r1, r3
   21140:	cmpeq	r0, r2
   21144:	bne	1f9fc <_start@@Base+0xcff8>
   21148:	sub	r3, fp, r4
   2114c:	cmp	r3, #3
   21150:	ble	1f9fc <_start@@Base+0xcff8>
   21154:	mov	r1, r4
   21158:	mov	r3, #3
   2115c:	mov	r2, fp
   21160:	mov	r0, r8
   21164:	bl	17fac <_start@@Base+0x55a8>
   21168:	cmp	r4, r0
   2116c:	mov	r1, r0
   21170:	beq	1f9fc <_start@@Base+0xcff8>
   21174:	ldr	r2, [sp, #672]	; 0x2a0
   21178:	ldr	ip, [pc, #376]	; 212f8 <_start@@Base+0xe8f4>
   2117c:	ldr	r0, [pc, #376]	; 212fc <_start@@Base+0xe8f8>
   21180:	mov	r3, #1
   21184:	str	r0, [sp, #8]
   21188:	str	r2, [sp, #4]
   2118c:	str	r3, [sp]
   21190:	str	ip, [sp, #12]
   21194:	mov	r3, #0
   21198:	mov	r2, fp
   2119c:	mov	r0, r8
   211a0:	bl	2cec0 <flatcc_json_parser_union_type@@Base>
   211a4:	b	1fa0c <_start@@Base+0xd008>
   211a8:	mov	r5, fp
   211ac:	mov	r3, #0
   211b0:	add	r1, r4, #1
   211b4:	mov	r2, r5
   211b8:	mov	r0, r7
   211bc:	str	r3, [sp, #640]	; 0x280
   211c0:	bl	12fac <_start@@Base+0x5a8>
   211c4:	mov	fp, r7
   211c8:	ldr	r3, [sp, #640]	; 0x280
   211cc:	mov	r4, r0
   211d0:	b	1da00 <_start@@Base+0xaffc>
   211d4:	mov	r7, sl
   211d8:	mov	sl, r1
   211dc:	b	1eadc <_start@@Base+0xc0d8>
   211e0:	mov	sl, r9
   211e4:	mov	fp, r7
   211e8:	mov	r9, r1
   211ec:	b	1f174 <_start@@Base+0xc770>
   211f0:	mov	ip, #0
   211f4:	mov	r3, #10
   211f8:	mov	r2, r5
   211fc:	mov	r1, r5
   21200:	mov	r0, fp
   21204:	str	ip, [sp, #660]	; 0x294
   21208:	bl	295ac <flatcc_json_parser_set_error@@Base>
   2120c:	ldr	r3, [sp, #660]	; 0x294
   21210:	mov	r4, r0
   21214:	b	1dd70 <_start@@Base+0xb36c>
   21218:	mov	r1, r0
   2121c:	mov	r3, #7
   21220:	mov	r2, r7
   21224:	mov	r0, r9
   21228:	bl	295ac <flatcc_json_parser_set_error@@Base>
   2122c:	mov	r4, r0
   21230:	b	20288 <_start@@Base+0xd884>
   21234:	mov	r5, fp
   21238:	mov	r4, sl
   2123c:	mov	fp, r7
   21240:	b	1e014 <_start@@Base+0xb610>
   21244:	mov	r5, fp
   21248:	mov	ip, #0
   2124c:	mov	r3, #10
   21250:	mov	r2, r5
   21254:	mov	r1, r5
   21258:	mov	r0, r7
   2125c:	str	ip, [sp, #640]	; 0x280
   21260:	bl	295ac <flatcc_json_parser_set_error@@Base>
   21264:	mov	fp, r7
   21268:	ldr	r3, [sp, #640]	; 0x280
   2126c:	mov	r4, r0
   21270:	b	1da00 <_start@@Base+0xaffc>
   21274:	ldrb	r3, [r0, #2]
   21278:	cmp	r3, #32
   2127c:	bls	201ec <_start@@Base+0xd7e8>
   21280:	mov	r7, sl
   21284:	add	sl, r0, #2
   21288:	b	1eadc <_start@@Base+0xc0d8>
   2128c:	ldrb	r3, [r0, #2]
   21290:	cmp	r3, #32
   21294:	bls	2025c <_start@@Base+0xd858>
   21298:	mov	sl, r9
   2129c:	mov	fp, r7
   212a0:	add	r9, r0, #2
   212a4:	b	1f174 <_start@@Base+0xc770>
   212a8:	ldrb	r3, [r9, #2]
   212ac:	cmp	r3, #32
   212b0:	addhi	r1, r9, #2
   212b4:	bls	20554 <_start@@Base+0xdb50>
   212b8:	b	20564 <_start@@Base+0xdb60>
   212bc:	add	r1, r1, #1
   212c0:	mov	r2, fp
   212c4:	mov	r0, sl
   212c8:	bl	12fac <_start@@Base+0x5a8>
   212cc:	mov	r9, r0
   212d0:	b	1febc <_start@@Base+0xd4b8>
   212d4:	mov	r6, #0
   212d8:	mov	r7, #0
   212dc:	b	1df4c <_start@@Base+0xb548>
   212e0:	mov	r8, #0
   212e4:	mov	r9, #0
   212e8:	b	1dbd4 <_start@@Base+0xb1d0>
   212ec:	nop			; (mov r0, r0)
   212f0:	andeq	r0, r0, r0
   212f4:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   212f8:	strdeq	r8, [r1], -ip
   212fc:	andeq	r1, r4, r4, lsr #6

00021300 <verify_parse@@Base>:
   21300:	cmp	r0, #0
   21304:	push	{r4, lr}
   21308:	beq	2131c <verify_parse@@Base+0x1c>
   2130c:	ldr	r3, [pc, #384]	; 21494 <verify_parse@@Base+0x194>
   21310:	ldr	r2, [r0, #4]
   21314:	cmp	r2, r3
   21318:	beq	21330 <verify_parse@@Base+0x30>
   2131c:	ldr	r3, [pc, #372]	; 21498 <verify_parse@@Base+0x198>
   21320:	mov	r2, #696	; 0x2b8
   21324:	ldr	r1, [pc, #368]	; 2149c <verify_parse@@Base+0x19c>
   21328:	ldr	r0, [pc, #368]	; 214a0 <verify_parse@@Base+0x1a0>
   2132c:	bl	126a8 <__assert_fail@plt>
   21330:	ldr	r2, [r0]
   21334:	adds	r3, r0, r2
   21338:	beq	2131c <verify_parse@@Base+0x1c>
   2133c:	ldr	r2, [r0, r2]
   21340:	sub	r2, r3, r2
   21344:	ldrh	r1, [r2]
   21348:	cmp	r1, #5
   2134c:	bhi	21364 <verify_parse@@Base+0x64>
   21350:	ldr	r3, [pc, #332]	; 214a4 <verify_parse@@Base+0x1a4>
   21354:	mov	r2, #45	; 0x2d
   21358:	ldr	r1, [pc, #328]	; 214a8 <verify_parse@@Base+0x1a8>
   2135c:	ldr	r0, [pc, #328]	; 214ac <verify_parse@@Base+0x1ac>
   21360:	bl	126a8 <__assert_fail@plt>
   21364:	ldrh	r2, [r2, #4]
   21368:	cmp	r2, #0
   2136c:	beq	21350 <verify_parse@@Base+0x50>
   21370:	adds	r3, r3, r2
   21374:	beq	21350 <verify_parse@@Base+0x50>
   21378:	vldr	s15, [pc, #264]	; 21488 <verify_parse@@Base+0x188>
   2137c:	vldr	s14, [r3]
   21380:	vcmp.f32	s14, s15
   21384:	vmrs	APSR_nzcv, fpscr
   21388:	bne	213f4 <verify_parse@@Base+0xf4>
   2138c:	vldr	s15, [pc, #248]	; 2148c <verify_parse@@Base+0x18c>
   21390:	vldr	s14, [r3, #4]
   21394:	vcmp.f32	s14, s15
   21398:	vmrs	APSR_nzcv, fpscr
   2139c:	bne	21408 <verify_parse@@Base+0x108>
   213a0:	vldr	s15, [pc, #232]	; 21490 <verify_parse@@Base+0x190>
   213a4:	vldr	s14, [r3, #8]
   213a8:	vcmp.f32	s14, s15
   213ac:	vmrs	APSR_nzcv, fpscr
   213b0:	bne	2141c <verify_parse@@Base+0x11c>
   213b4:	vldr	d7, [pc, #196]	; 21480 <verify_parse@@Base+0x180>
   213b8:	vldr	d6, [r3, #16]
   213bc:	vcmp.f64	d6, d7
   213c0:	vmrs	APSR_nzcv, fpscr
   213c4:	bne	21430 <verify_parse@@Base+0x130>
   213c8:	ldrsb	r2, [r3, #24]
   213cc:	cmp	r2, #2
   213d0:	bne	21444 <verify_parse@@Base+0x144>
   213d4:	ldrsh	r2, [r3, #26]
   213d8:	cmp	r2, #5
   213dc:	bne	21458 <verify_parse@@Base+0x158>
   213e0:	ldrsb	r3, [r3, #28]
   213e4:	cmp	r3, #6
   213e8:	bne	2146c <verify_parse@@Base+0x16c>
   213ec:	mov	r0, #0
   213f0:	pop	{r4, pc}
   213f4:	ldr	r3, [pc, #168]	; 214a4 <verify_parse@@Base+0x1a4>
   213f8:	mov	r2, #46	; 0x2e
   213fc:	ldr	r1, [pc, #164]	; 214a8 <verify_parse@@Base+0x1a8>
   21400:	ldr	r0, [pc, #164]	; 214ac <verify_parse@@Base+0x1ac>
   21404:	bl	126a8 <__assert_fail@plt>
   21408:	ldr	r3, [pc, #148]	; 214a4 <verify_parse@@Base+0x1a4>
   2140c:	mov	r2, #47	; 0x2f
   21410:	ldr	r1, [pc, #144]	; 214a8 <verify_parse@@Base+0x1a8>
   21414:	ldr	r0, [pc, #144]	; 214ac <verify_parse@@Base+0x1ac>
   21418:	bl	126a8 <__assert_fail@plt>
   2141c:	ldr	r3, [pc, #128]	; 214a4 <verify_parse@@Base+0x1a4>
   21420:	mov	r2, #48	; 0x30
   21424:	ldr	r1, [pc, #124]	; 214a8 <verify_parse@@Base+0x1a8>
   21428:	ldr	r0, [pc, #124]	; 214ac <verify_parse@@Base+0x1ac>
   2142c:	bl	126a8 <__assert_fail@plt>
   21430:	ldr	r3, [pc, #108]	; 214a4 <verify_parse@@Base+0x1a4>
   21434:	mov	r2, #49	; 0x31
   21438:	ldr	r1, [pc, #104]	; 214a8 <verify_parse@@Base+0x1a8>
   2143c:	ldr	r0, [pc, #104]	; 214ac <verify_parse@@Base+0x1ac>
   21440:	bl	126a8 <__assert_fail@plt>
   21444:	ldr	r3, [pc, #88]	; 214a4 <verify_parse@@Base+0x1a4>
   21448:	mov	r2, #50	; 0x32
   2144c:	ldr	r1, [pc, #84]	; 214a8 <verify_parse@@Base+0x1a8>
   21450:	ldr	r0, [pc, #84]	; 214ac <verify_parse@@Base+0x1ac>
   21454:	bl	126a8 <__assert_fail@plt>
   21458:	ldr	r3, [pc, #68]	; 214a4 <verify_parse@@Base+0x1a4>
   2145c:	mov	r2, #53	; 0x35
   21460:	ldr	r1, [pc, #64]	; 214a8 <verify_parse@@Base+0x1a8>
   21464:	ldr	r0, [pc, #64]	; 214ac <verify_parse@@Base+0x1ac>
   21468:	bl	126a8 <__assert_fail@plt>
   2146c:	ldr	r3, [pc, #48]	; 214a4 <verify_parse@@Base+0x1a4>
   21470:	mov	r2, #54	; 0x36
   21474:	ldr	r1, [pc, #44]	; 214a8 <verify_parse@@Base+0x1a8>
   21478:	ldr	r0, [pc, #44]	; 214ac <verify_parse@@Base+0x1ac>
   2147c:	bl	126a8 <__assert_fail@plt>
   21480:	andeq	r0, r0, r0
   21484:	andmi	r0, r8, r0
   21488:	svccc	0x00800000
   2148c:	andmi	r0, r0, r0
   21490:	submi	r0, r0, r0
   21494:	movtpl	r4, #61261	; 0xef4d
   21498:	andeq	lr, r2, r4, lsl #18
   2149c:	andeq	lr, r2, r8, asr #18
   214a0:	andeq	lr, r2, r8, lsr #19
   214a4:	andeq	lr, r2, r0, lsr #18
   214a8:	ldrdeq	lr, [r2], -r0
   214ac:	andeq	pc, r2, r8, lsr #7

000214b0 <test_parse@@Base>:
   214b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214b4:	sub	sp, sp, #324	; 0x144
   214b8:	ldr	r8, [pc, #1004]	; 218ac <test_parse@@Base+0x3fc>
   214bc:	add	r0, sp, #88	; 0x58
   214c0:	bl	21e08 <flatcc_builder_init@@Base>
   214c4:	ldr	r0, [r8, #716]	; 0x2cc
   214c8:	ldr	r1, [pc, #992]	; 218b0 <test_parse@@Base+0x400>
   214cc:	bl	12594 <fopen@plt>
   214d0:	subs	r9, r0, #0
   214d4:	beq	21634 <test_parse@@Base+0x184>
   214d8:	mov	r2, #2
   214dc:	mov	r1, #0
   214e0:	bl	12690 <fseek@plt>
   214e4:	mov	r0, r9
   214e8:	bl	125b8 <ftell@plt>
   214ec:	cmp	r0, #10240	; 0x2800
   214f0:	mov	sl, r0
   214f4:	bhi	2162c <test_parse@@Base+0x17c>
   214f8:	mov	r0, r9
   214fc:	bl	125d0 <rewind@plt>
   21500:	cmp	sl, #0
   21504:	movne	r0, sl
   21508:	moveq	r0, #1
   2150c:	bl	12600 <malloc@plt>
   21510:	subs	r5, r0, #0
   21514:	beq	2162c <test_parse@@Base+0x17c>
   21518:	mov	r6, #0
   2151c:	mov	fp, #1
   21520:	b	21528 <test_parse@@Base+0x78>
   21524:	add	r6, r6, r0
   21528:	add	r4, r5, r6
   2152c:	mov	r0, r4
   21530:	mov	r3, r9
   21534:	sub	r2, sl, r6
   21538:	mov	r1, fp
   2153c:	bl	125f4 <fread@plt>
   21540:	cmp	r0, #0
   21544:	bne	21524 <test_parse@@Base+0x74>
   21548:	cmp	sl, r6
   2154c:	mov	r7, r0
   21550:	mov	r0, r9
   21554:	bne	2165c <test_parse@@Base+0x1ac>
   21558:	bl	12678 <fclose@plt>
   2155c:	mov	r2, #44	; 0x2c
   21560:	mov	r1, r7
   21564:	add	r0, sp, #44	; 0x2c
   21568:	bl	12654 <memset@plt>
   2156c:	mov	ip, #1
   21570:	add	r0, sp, #88	; 0x58
   21574:	mov	r3, r7
   21578:	mov	r2, r7
   2157c:	ldr	r1, [pc, #816]	; 218b4 <test_parse@@Base+0x404>
   21580:	str	r0, [sp, #44]	; 0x2c
   21584:	str	r5, [sp, #48]	; 0x30
   21588:	str	r5, [sp, #72]	; 0x48
   2158c:	str	r4, [sp, #76]	; 0x4c
   21590:	str	r5, [sp, #80]	; 0x50
   21594:	str	ip, [sp, #60]	; 0x3c
   21598:	bl	228f8 <flatcc_builder_start_buffer@@Base>
   2159c:	cmp	r0, #0
   215a0:	bne	218a0 <test_parse@@Base+0x3f0>
   215a4:	add	r3, sp, #24
   215a8:	mov	r2, r4
   215ac:	add	r0, sp, #44	; 0x2c
   215b0:	mov	r1, r5
   215b4:	bl	198dc <_start@@Base+0x6ed8>
   215b8:	ldr	r3, [sp, #68]	; 0x44
   215bc:	cmp	r3, #0
   215c0:	str	r3, [sp, #8]
   215c4:	beq	2166c <test_parse@@Base+0x1bc>
   215c8:	ldr	r3, [pc, #744]	; 218b8 <test_parse@@Base+0x408>
   215cc:	ldr	r2, [sp, #48]	; 0x30
   215d0:	ldr	r4, [sp, #80]	; 0x50
   215d4:	ldr	r0, [sp, #8]
   215d8:	sub	r4, r4, r2
   215dc:	ldr	r7, [r8, #716]	; 0x2cc
   215e0:	ldr	r6, [r3]
   215e4:	ldr	r8, [sp, #60]	; 0x3c
   215e8:	bl	2958c <flatcc_json_parser_error_string@@Base>
   215ec:	mvn	ip, #0
   215f0:	add	r4, r4, #1
   215f4:	str	r4, [sp]
   215f8:	mov	r3, r8
   215fc:	mov	r2, r7
   21600:	ldr	r1, [pc, #692]	; 218bc <test_parse@@Base+0x40c>
   21604:	stmib	sp, {r0, ip}
   21608:	mov	r0, r6
   2160c:	bl	1263c <fprintf@plt>
   21610:	mov	r0, r5
   21614:	bl	125a0 <free@plt>
   21618:	add	r0, sp, #88	; 0x58
   2161c:	bl	22074 <flatcc_builder_clear@@Base>
   21620:	ldr	r0, [sp, #8]
   21624:	add	sp, sp, #324	; 0x144
   21628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2162c:	mov	r0, r9
   21630:	bl	12678 <fclose@plt>
   21634:	ldr	r3, [pc, #636]	; 218b8 <test_parse@@Base+0x408>
   21638:	ldr	r2, [r8, #716]	; 0x2cc
   2163c:	ldr	r1, [pc, #636]	; 218c0 <test_parse@@Base+0x410>
   21640:	ldr	r0, [r3]
   21644:	bl	1263c <fprintf@plt>
   21648:	mvn	r3, #0
   2164c:	mov	r0, r3
   21650:	str	r3, [sp, #8]
   21654:	add	sp, sp, #324	; 0x144
   21658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2165c:	bl	12678 <fclose@plt>
   21660:	mov	r0, r5
   21664:	bl	125a0 <free@plt>
   21668:	b	21634 <test_parse@@Base+0x184>
   2166c:	ldr	r1, [sp, #24]
   21670:	add	r0, sp, #88	; 0x58
   21674:	bl	22a84 <flatcc_builder_end_buffer@@Base>
   21678:	cmp	r0, #0
   2167c:	beq	218a0 <test_parse@@Base+0x3f0>
   21680:	ldr	r3, [pc, #560]	; 218b8 <test_parse@@Base+0x408>
   21684:	ldr	r2, [r8, #716]	; 0x2cc
   21688:	ldr	r1, [pc, #564]	; 218c4 <test_parse@@Base+0x414>
   2168c:	ldr	r0, [r3]
   21690:	ldr	r3, [sp, #60]	; 0x3c
   21694:	str	r5, [sp, #84]	; 0x54
   21698:	bl	1263c <fprintf@plt>
   2169c:	add	r1, sp, #20
   216a0:	add	r0, sp, #88	; 0x58
   216a4:	bl	270bc <flatcc_builder_finalize_aligned_buffer@@Base>
   216a8:	ldr	r3, [pc, #536]	; 218c8 <test_parse@@Base+0x418>
   216ac:	ldr	sl, [sp, #20]
   216b0:	ldr	r2, [pc, #532]	; 218cc <test_parse@@Base+0x41c>
   216b4:	ldr	r8, [r3]
   216b8:	ldr	r1, [pc, #528]	; 218d0 <test_parse@@Base+0x420>
   216bc:	str	r0, [sp, #12]
   216c0:	mov	r0, r8
   216c4:	bl	1263c <fprintf@plt>
   216c8:	cmp	sl, #0
   216cc:	beq	217a0 <test_parse@@Base+0x2f0>
   216d0:	ldr	r3, [sp, #12]
   216d4:	ldr	fp, [pc, #504]	; 218d4 <test_parse@@Base+0x424>
   216d8:	sub	r9, r3, #1
   216dc:	ldr	r4, [sp, #8]
   216e0:	b	21740 <test_parse@@Base+0x290>
   216e4:	cmp	r4, #0
   216e8:	beq	216f0 <test_parse@@Base+0x240>
   216ec:	bl	1263c <fprintf@plt>
   216f0:	mov	r2, r4
   216f4:	ldr	r1, [pc, #476]	; 218d8 <test_parse@@Base+0x428>
   216f8:	mov	r0, r8
   216fc:	bl	1263c <fprintf@plt>
   21700:	ldrb	r2, [r9, #1]
   21704:	ldr	r1, [pc, #464]	; 218dc <test_parse@@Base+0x42c>
   21708:	mov	r0, r8
   2170c:	bl	1263c <fprintf@plt>
   21710:	ldrb	r2, [r9, #1]!
   21714:	add	r3, sp, #320	; 0x140
   21718:	add	r3, r3, r7
   2171c:	sub	r1, r2, #32
   21720:	cmp	r1, #94	; 0x5e
   21724:	add	r4, r4, #1
   21728:	movhi	r2, #46	; 0x2e
   2172c:	mov	r1, #0
   21730:	cmp	sl, r4
   21734:	strb	r1, [r3, #-295]	; 0xfffffed9
   21738:	strb	r2, [r3, #-296]	; 0xfffffed8
   2173c:	beq	2176c <test_parse@@Base+0x2bc>
   21740:	ands	r7, r4, #15
   21744:	add	r2, sp, #24
   21748:	mov	r1, fp
   2174c:	mov	r0, r8
   21750:	beq	216e4 <test_parse@@Base+0x234>
   21754:	tst	r4, #7
   21758:	bne	21700 <test_parse@@Base+0x250>
   2175c:	mov	r1, r8
   21760:	mov	r0, #32
   21764:	bl	12684 <fputc@plt>
   21768:	b	21700 <test_parse@@Base+0x250>
   2176c:	tst	r4, #15
   21770:	beq	217a0 <test_parse@@Base+0x2f0>
   21774:	ldr	sl, [pc, #356]	; 218e0 <test_parse@@Base+0x430>
   21778:	mov	r9, #3
   2177c:	mov	r7, #1
   21780:	add	r4, r4, #1
   21784:	mov	r3, r8
   21788:	mov	r2, r9
   2178c:	mov	r1, r7
   21790:	mov	r0, sl
   21794:	bl	125e8 <fwrite@plt>
   21798:	tst	r4, #15
   2179c:	bne	21780 <test_parse@@Base+0x2d0>
   217a0:	add	r2, sp, #24
   217a4:	mov	r0, r8
   217a8:	ldr	r1, [pc, #292]	; 218d4 <test_parse@@Base+0x424>
   217ac:	bl	1263c <fprintf@plt>
   217b0:	ldr	r3, [pc, #256]	; 218b8 <test_parse@@Base+0x408>
   217b4:	mov	r2, r6
   217b8:	ldr	r1, [pc, #292]	; 218e4 <test_parse@@Base+0x434>
   217bc:	ldr	r0, [r3]
   217c0:	ldr	r3, [sp, #20]
   217c4:	bl	1263c <fprintf@plt>
   217c8:	ldr	r0, [sp, #12]
   217cc:	bl	21300 <verify_parse@@Base>
   217d0:	ldr	r3, [pc, #240]	; 218c8 <test_parse@@Base+0x418>
   217d4:	ldr	r8, [sp, #20]
   217d8:	ldr	r2, [pc, #264]	; 218e8 <test_parse@@Base+0x438>
   217dc:	ldr	r7, [r3]
   217e0:	ldr	r1, [pc, #260]	; 218ec <test_parse@@Base+0x43c>
   217e4:	mov	r0, r7
   217e8:	bl	1263c <fprintf@plt>
   217ec:	cmp	r8, #0
   217f0:	beq	2186c <test_parse@@Base+0x3bc>
   217f4:	ldr	r3, [sp, #12]
   217f8:	ldr	fp, [pc, #240]	; 218f0 <test_parse@@Base+0x440>
   217fc:	ldr	r9, [pc, #240]	; 218f4 <test_parse@@Base+0x444>
   21800:	sub	r6, r3, #1
   21804:	mov	r4, #0
   21808:	mov	sl, #1
   2180c:	b	21834 <test_parse@@Base+0x384>
   21810:	tst	r4, #7
   21814:	beq	21854 <test_parse@@Base+0x3a4>
   21818:	add	r4, r4, #1
   2181c:	ldrb	r2, [r6, #1]!
   21820:	mov	r1, r9
   21824:	mov	r0, r7
   21828:	bl	1263c <fprintf@plt>
   2182c:	cmp	r8, r4
   21830:	beq	2186c <test_parse@@Base+0x3bc>
   21834:	tst	r4, #15
   21838:	bne	21810 <test_parse@@Base+0x360>
   2183c:	mov	r3, r7
   21840:	mov	r2, #4
   21844:	mov	r1, sl
   21848:	mov	r0, fp
   2184c:	bl	125e8 <fwrite@plt>
   21850:	b	21818 <test_parse@@Base+0x368>
   21854:	mov	r3, r7
   21858:	mov	r2, #3
   2185c:	mov	r1, sl
   21860:	ldr	r0, [pc, #120]	; 218e0 <test_parse@@Base+0x430>
   21864:	bl	125e8 <fwrite@plt>
   21868:	b	21818 <test_parse@@Base+0x368>
   2186c:	mov	r3, r7
   21870:	mov	r2, #4
   21874:	mov	r1, #1
   21878:	ldr	r0, [pc, #120]	; 218f8 <test_parse@@Base+0x448>
   2187c:	bl	125e8 <fwrite@plt>
   21880:	add	r0, sp, #88	; 0x58
   21884:	bl	21f94 <flatcc_builder_reset@@Base>
   21888:	ldr	r3, [sp, #12]
   2188c:	cmp	r3, #0
   21890:	beq	21610 <test_parse@@Base+0x160>
   21894:	mov	r0, r3
   21898:	bl	271cc <flatcc_builder_aligned_free@@Base>
   2189c:	b	21610 <test_parse@@Base+0x160>
   218a0:	ldr	r3, [sp, #68]	; 0x44
   218a4:	str	r3, [sp, #8]
   218a8:	b	215c8 <test_parse@@Base+0x118>
   218ac:	andeq	r1, r4, r8, ror r0
   218b0:	andeq	lr, r2, r4, lsr #20
   218b4:	andeq	lr, r2, r8, lsr #20
   218b8:			; <UNDEFINED> instruction: 0x000413b8
   218bc:	andeq	lr, r2, ip, lsl fp
   218c0:	strdeq	lr, [r2], -r8
   218c4:	andeq	lr, r2, r0, lsr sl
   218c8:			; <UNDEFINED> instruction: 0x000413bc
   218cc:	andeq	lr, r2, r4, asr sl
   218d0:	andeq	lr, r2, r4, ror sl
   218d4:	andeq	lr, r2, ip, ror sl
   218d8:	andeq	lr, r2, r8, asr #21
   218dc:	ldrdeq	lr, [r2], -r0
   218e0:	ldrdeq	lr, [r2], -r8
   218e4:	andeq	lr, r2, r4, lsl #21
   218e8:	andeq	lr, r2, ip, ror #20
   218ec:	andeq	lr, r2, r8, lsr #21
   218f0:	andeq	lr, r2, r4, ror #21
   218f4:	andeq	lr, r2, ip, ror #21
   218f8:	ldrdeq	lr, [r2], -ip

000218fc <flatcc_builder_default_alloc@@Base>:
   218fc:	push	{r4, r5, r6, r7, r8, lr}
   21900:	subs	r5, r2, #0
   21904:	mov	r6, r1
   21908:	bne	2192c <flatcc_builder_default_alloc@@Base+0x30>
   2190c:	ldr	r0, [r1]
   21910:	cmp	r0, #0
   21914:	popeq	{r4, r5, r6, r7, r8, pc}
   21918:	bl	125a0 <free@plt>
   2191c:	str	r5, [r6]
   21920:	str	r5, [r6, #4]
   21924:	mov	r0, r5
   21928:	pop	{r4, r5, r6, r7, r8, pc}
   2192c:	mov	r7, r3
   21930:	ldr	r3, [sp, #24]
   21934:	sub	r2, r3, #1
   21938:	cmp	r2, #6
   2193c:	ldrls	pc, [pc, r2, lsl #2]
   21940:	b	219dc <flatcc_builder_default_alloc@@Base+0xe0>
   21944:			; <UNDEFINED> instruction: 0x000219b0
   21948:	ldrdeq	r1, [r2], -ip
   2194c:	ldrdeq	r1, [r2], -ip
   21950:	ldrdeq	r1, [r2], -r4
   21954:	andeq	r1, r2, r0, ror #18
   21958:	ldrdeq	r1, [r2], -ip
   2195c:	andeq	r1, r2, ip, asr #19
   21960:	mov	r4, r5
   21964:	ldr	r3, [r6, #4]
   21968:	cmp	r5, r3
   2196c:	bhi	21978 <flatcc_builder_default_alloc@@Base+0x7c>
   21970:	cmp	r4, r3, lsr #1
   21974:	bls	219e4 <flatcc_builder_default_alloc@@Base+0xe8>
   21978:	mov	r1, r4
   2197c:	ldr	r0, [r6]
   21980:	bl	125dc <realloc@plt>
   21984:	subs	r5, r0, #0
   21988:	beq	21a00 <flatcc_builder_default_alloc@@Base+0x104>
   2198c:	cmp	r7, #0
   21990:	beq	219a0 <flatcc_builder_default_alloc@@Base+0xa4>
   21994:	ldr	r0, [r6, #4]
   21998:	cmp	r0, r4
   2199c:	bcc	219ec <flatcc_builder_default_alloc@@Base+0xf0>
   219a0:	str	r5, [r6]
   219a4:	str	r4, [r6, #4]
   219a8:	mov	r0, #0
   219ac:	pop	{r4, r5, r6, r7, r8, pc}
   219b0:	mov	r4, #256	; 0x100
   219b4:	cmp	r5, r4
   219b8:	bls	21964 <flatcc_builder_default_alloc@@Base+0x68>
   219bc:	lsl	r4, r4, #1
   219c0:	cmp	r5, r4
   219c4:	bhi	219bc <flatcc_builder_default_alloc@@Base+0xc0>
   219c8:	b	21964 <flatcc_builder_default_alloc@@Base+0x68>
   219cc:	mov	r4, #64	; 0x40
   219d0:	b	219b4 <flatcc_builder_default_alloc@@Base+0xb8>
   219d4:	mov	r4, #288	; 0x120
   219d8:	b	219b4 <flatcc_builder_default_alloc@@Base+0xb8>
   219dc:	mov	r4, #32
   219e0:	b	219b4 <flatcc_builder_default_alloc@@Base+0xb8>
   219e4:	mov	r0, #0
   219e8:	pop	{r4, r5, r6, r7, r8, pc}
   219ec:	sub	r2, r4, r0
   219f0:	mov	r1, #0
   219f4:	add	r0, r5, r0
   219f8:	bl	12654 <memset@plt>
   219fc:	b	219a0 <flatcc_builder_default_alloc@@Base+0xa4>
   21a00:	mvn	r0, #0
   21a04:	pop	{r4, r5, r6, r7, r8, pc}
   21a08:	push	{r4, r5, r6, r7, r8, lr}
   21a0c:	mov	r5, r0
   21a10:	ldrh	r0, [r0, #128]	; 0x80
   21a14:	sub	sp, sp, #88	; 0x58
   21a18:	mov	r7, #4
   21a1c:	cmp	r0, #3
   21a20:	movls	r0, #4
   21a24:	strhls	r0, [r5, #128]	; 0x80
   21a28:	ldr	r0, [r5, #136]	; 0x88
   21a2c:	lsls	r4, r2, #2
   21a30:	mov	r8, #1
   21a34:	str	r7, [sp, #16]
   21a38:	str	r8, [sp, #20]
   21a3c:	and	ip, r0, #3
   21a40:	movne	r8, #2
   21a44:	str	r7, [sp, #28]
   21a48:	addne	r7, r4, r7
   21a4c:	strne	r4, [sp, #36]	; 0x24
   21a50:	add	lr, sp, #12
   21a54:	strne	r1, [sp, #32]
   21a58:	strne	r7, [sp, #16]
   21a5c:	strne	r8, [sp, #20]
   21a60:	movne	r4, #3
   21a64:	moveq	r4, #2
   21a68:	cmp	ip, #0
   21a6c:	str	r2, [sp, #12]
   21a70:	str	lr, [sp, #24]
   21a74:	beq	21aa0 <flatcc_builder_default_alloc@@Base+0x1a4>
   21a78:	add	lr, r8, #1
   21a7c:	add	r8, sp, #88	; 0x58
   21a80:	add	lr, r8, lr, lsl #3
   21a84:	ldr	r6, [pc, #320]	; 21bcc <flatcc_builder_default_alloc@@Base+0x2d0>
   21a88:	mov	r8, r4
   21a8c:	add	r7, r7, ip
   21a90:	str	ip, [lr, #-68]	; 0xffffffbc
   21a94:	str	r7, [sp, #16]
   21a98:	str	r4, [sp, #20]
   21a9c:	str	r6, [lr, #-72]	; 0xffffffb8
   21aa0:	cmp	r2, #0
   21aa4:	sub	r4, r0, r7
   21aa8:	beq	21b3c <flatcc_builder_default_alloc@@Base+0x240>
   21aac:	cmp	r3, #0
   21ab0:	addne	r6, r3, r2
   21ab4:	mvnne	r0, #3
   21ab8:	bne	21aec <flatcc_builder_default_alloc@@Base+0x1f0>
   21abc:	b	21b78 <flatcc_builder_default_alloc@@Base+0x27c>
   21ac0:	sub	lr, r0, r4
   21ac4:	add	ip, lr, ip
   21ac8:	str	ip, [r1]
   21acc:	ldrb	ip, [r3]
   21ad0:	cmp	ip, #0
   21ad4:	beq	21ba0 <flatcc_builder_default_alloc@@Base+0x2a4>
   21ad8:	add	r3, r3, #1
   21adc:	cmp	r3, r6
   21ae0:	add	r1, r1, #4
   21ae4:	sub	r0, r0, #4
   21ae8:	beq	21b34 <flatcc_builder_default_alloc@@Base+0x238>
   21aec:	ldr	ip, [r1]
   21af0:	cmp	ip, #0
   21af4:	bne	21ac0 <flatcc_builder_default_alloc@@Base+0x1c4>
   21af8:	ldrb	ip, [r3]
   21afc:	cmp	ip, #0
   21b00:	beq	21ad8 <flatcc_builder_default_alloc@@Base+0x1dc>
   21b04:	ldr	r3, [pc, #196]	; 21bd0 <flatcc_builder_default_alloc@@Base+0x2d4>
   21b08:	ldr	r2, [pc, #196]	; 21bd4 <flatcc_builder_default_alloc@@Base+0x2d8>
   21b0c:	ldr	r1, [pc, #196]	; 21bd8 <flatcc_builder_default_alloc@@Base+0x2dc>
   21b10:	ldr	r0, [pc, #196]	; 21bdc <flatcc_builder_default_alloc@@Base+0x2e0>
   21b14:	bl	126a8 <__assert_fail@plt>
   21b18:	sub	r1, r0, r4
   21b1c:	add	r3, r3, #1
   21b20:	add	r1, r1, lr
   21b24:	cmp	r2, r3
   21b28:	str	r1, [ip, #4]!
   21b2c:	sub	r0, r0, #4
   21b30:	bne	21b80 <flatcc_builder_default_alloc@@Base+0x284>
   21b34:	ldr	r0, [r5, #136]	; 0x88
   21b38:	sub	r4, r0, r7
   21b3c:	cmp	r4, r0
   21b40:	bge	21bc8 <flatcc_builder_default_alloc@@Base+0x2cc>
   21b44:	ldr	r0, [r5, #36]	; 0x24
   21b48:	mov	r2, r8
   21b4c:	str	r7, [sp]
   21b50:	mov	r3, r4
   21b54:	ldr	r6, [r5, #44]	; 0x2c
   21b58:	add	r1, sp, #24
   21b5c:	blx	r6
   21b60:	cmp	r0, #0
   21b64:	bne	21bb4 <flatcc_builder_default_alloc@@Base+0x2b8>
   21b68:	mov	r0, r4
   21b6c:	str	r4, [r5, #136]	; 0x88
   21b70:	add	sp, sp, #88	; 0x58
   21b74:	pop	{r4, r5, r6, r7, r8, pc}
   21b78:	sub	ip, r1, #4
   21b7c:	mvn	r0, #3
   21b80:	ldr	lr, [ip, #4]
   21b84:	cmp	lr, #0
   21b88:	bne	21b18 <flatcc_builder_default_alloc@@Base+0x21c>
   21b8c:	ldr	r3, [pc, #60]	; 21bd0 <flatcc_builder_default_alloc@@Base+0x2d4>
   21b90:	ldr	r2, [pc, #72]	; 21be0 <flatcc_builder_default_alloc@@Base+0x2e4>
   21b94:	ldr	r1, [pc, #60]	; 21bd8 <flatcc_builder_default_alloc@@Base+0x2dc>
   21b98:	ldr	r0, [pc, #68]	; 21be4 <flatcc_builder_default_alloc@@Base+0x2e8>
   21b9c:	bl	126a8 <__assert_fail@plt>
   21ba0:	ldr	r3, [pc, #40]	; 21bd0 <flatcc_builder_default_alloc@@Base+0x2d4>
   21ba4:	ldr	r2, [pc, #60]	; 21be8 <flatcc_builder_default_alloc@@Base+0x2ec>
   21ba8:	ldr	r1, [pc, #40]	; 21bd8 <flatcc_builder_default_alloc@@Base+0x2dc>
   21bac:	ldr	r0, [pc, #56]	; 21bec <flatcc_builder_default_alloc@@Base+0x2f0>
   21bb0:	bl	126a8 <__assert_fail@plt>
   21bb4:	ldr	r3, [pc, #52]	; 21bf0 <flatcc_builder_default_alloc@@Base+0x2f4>
   21bb8:	ldr	r2, [pc, #52]	; 21bf4 <flatcc_builder_default_alloc@@Base+0x2f8>
   21bbc:	ldr	r1, [pc, #20]	; 21bd8 <flatcc_builder_default_alloc@@Base+0x2dc>
   21bc0:	ldr	r0, [pc, #28]	; 21be4 <flatcc_builder_default_alloc@@Base+0x2e8>
   21bc4:	bl	126a8 <__assert_fail@plt>
   21bc8:	bl	128a8 <__assert_fail@plt+0x200>
   21bcc:	andeq	lr, r2, r0, lsr ip
   21bd0:	andeq	lr, r2, r0, lsr lr
   21bd4:			; <UNDEFINED> instruction: 0x000005b5
   21bd8:	andeq	pc, r2, r8, ror #5
   21bdc:	andeq	pc, r2, ip, lsr #7
   21be0:			; <UNDEFINED> instruction: 0x000005b7
   21be4:	andeq	pc, r2, r8, lsr #7
   21be8:			; <UNDEFINED> instruction: 0x000005b1
   21bec:	muleq	r2, ip, r3
   21bf0:			; <UNDEFINED> instruction: 0x0002ebb4
   21bf4:	andeq	r0, r0, fp, lsl #5
   21bf8:	ldrh	r3, [r0, #128]	; 0x80
   21bfc:	push	{r4, r5, r6, r7, lr}
   21c00:	sub	sp, sp, #92	; 0x5c
   21c04:	cmp	r3, #3
   21c08:	movls	r3, #4
   21c0c:	ldr	lr, [r0, #136]	; 0x88
   21c10:	mov	ip, #4
   21c14:	strhls	r3, [r0, #128]	; 0x80
   21c18:	mov	r4, r0
   21c1c:	lsls	r6, r2, #2
   21c20:	mov	r0, #1
   21c24:	add	r5, sp, #12
   21c28:	str	ip, [sp, #16]
   21c2c:	str	r0, [sp, #20]
   21c30:	and	r3, lr, #3
   21c34:	movne	r0, #2
   21c38:	str	ip, [sp, #28]
   21c3c:	addne	ip, r6, ip
   21c40:	str	r5, [sp, #24]
   21c44:	strne	r6, [sp, #36]	; 0x24
   21c48:	strne	r1, [sp, #32]
   21c4c:	strne	ip, [sp, #16]
   21c50:	strne	r0, [sp, #20]
   21c54:	movne	r5, r0
   21c58:	movne	r6, #3
   21c5c:	moveq	r5, r0
   21c60:	moveq	r6, #2
   21c64:	cmp	r3, #0
   21c68:	str	r2, [sp, #12]
   21c6c:	beq	21c98 <flatcc_builder_default_alloc@@Base+0x39c>
   21c70:	add	r0, r5, #1
   21c74:	add	r5, sp, #88	; 0x58
   21c78:	add	r0, r5, r0, lsl #3
   21c7c:	ldr	r7, [pc, #204]	; 21d50 <flatcc_builder_default_alloc@@Base+0x454>
   21c80:	mov	r5, r6
   21c84:	add	ip, ip, r3
   21c88:	str	r3, [r0, #-68]	; 0xffffffbc
   21c8c:	str	ip, [sp, #16]
   21c90:	str	r6, [sp, #20]
   21c94:	str	r7, [r0, #-72]	; 0xffffffb8
   21c98:	cmp	r2, #0
   21c9c:	beq	21cf8 <flatcc_builder_default_alloc@@Base+0x3fc>
   21ca0:	ldr	r3, [r1]
   21ca4:	cmp	r3, #0
   21ca8:	beq	21ce0 <flatcc_builder_default_alloc@@Base+0x3e4>
   21cac:	sub	r6, lr, ip
   21cb0:	mov	r0, #0
   21cb4:	mvn	lr, #3
   21cb8:	sub	r3, r3, r6
   21cbc:	add	r0, r0, #1
   21cc0:	add	r3, r3, lr
   21cc4:	cmp	r2, r0
   21cc8:	str	r3, [r1]
   21ccc:	beq	21cf4 <flatcc_builder_default_alloc@@Base+0x3f8>
   21cd0:	ldr	r3, [r1, #4]!
   21cd4:	sub	lr, lr, #4
   21cd8:	cmp	r3, #0
   21cdc:	bne	21cb8 <flatcc_builder_default_alloc@@Base+0x3bc>
   21ce0:	ldr	r3, [pc, #108]	; 21d54 <flatcc_builder_default_alloc@@Base+0x458>
   21ce4:	ldr	r2, [pc, #108]	; 21d58 <flatcc_builder_default_alloc@@Base+0x45c>
   21ce8:	ldr	r1, [pc, #108]	; 21d5c <flatcc_builder_default_alloc@@Base+0x460>
   21cec:	ldr	r0, [pc, #108]	; 21d60 <flatcc_builder_default_alloc@@Base+0x464>
   21cf0:	bl	126a8 <__assert_fail@plt>
   21cf4:	ldr	lr, [r4, #136]	; 0x88
   21cf8:	sub	r6, lr, ip
   21cfc:	cmp	r6, lr
   21d00:	bge	21d4c <flatcc_builder_default_alloc@@Base+0x450>
   21d04:	ldr	r0, [r4, #36]	; 0x24
   21d08:	mov	r2, r5
   21d0c:	str	ip, [sp]
   21d10:	mov	r3, r6
   21d14:	ldr	r5, [r4, #44]	; 0x2c
   21d18:	add	r1, sp, #24
   21d1c:	blx	r5
   21d20:	cmp	r0, #0
   21d24:	bne	21d38 <flatcc_builder_default_alloc@@Base+0x43c>
   21d28:	mov	r0, r6
   21d2c:	str	r6, [r4, #136]	; 0x88
   21d30:	add	sp, sp, #92	; 0x5c
   21d34:	pop	{r4, r5, r6, r7, pc}
   21d38:	ldr	r3, [pc, #36]	; 21d64 <flatcc_builder_default_alloc@@Base+0x468>
   21d3c:	ldr	r2, [pc, #36]	; 21d68 <flatcc_builder_default_alloc@@Base+0x46c>
   21d40:	ldr	r1, [pc, #20]	; 21d5c <flatcc_builder_default_alloc@@Base+0x460>
   21d44:	ldr	r0, [pc, #20]	; 21d60 <flatcc_builder_default_alloc@@Base+0x464>
   21d48:	bl	126a8 <__assert_fail@plt>
   21d4c:	bl	128a8 <__assert_fail@plt+0x200>
   21d50:	andeq	lr, r2, r0, lsr ip
   21d54:	andeq	lr, r2, r0, lsr lr
   21d58:			; <UNDEFINED> instruction: 0x000005b7
   21d5c:	andeq	pc, r2, r8, ror #5
   21d60:	andeq	pc, r2, r8, lsr #7
   21d64:			; <UNDEFINED> instruction: 0x0002ebb4
   21d68:	andeq	r0, r0, fp, lsl #5

00021d6c <flatcc_builder_flush_vtable_cache@@Base>:
   21d6c:	ldr	r3, [r0, #116]	; 0x74
   21d70:	cmp	r3, #0
   21d74:	bxeq	lr
   21d78:	ldr	r2, [r0, #96]	; 0x60
   21d7c:	push	{r4, lr}
   21d80:	mov	r1, #0
   21d84:	mov	r4, r0
   21d88:	ldr	r0, [r0, #92]	; 0x5c
   21d8c:	bl	12654 <memset@plt>
   21d90:	mov	r2, #16
   21d94:	mov	r3, #0
   21d98:	str	r2, [r4, #124]	; 0x7c
   21d9c:	str	r3, [r4, #120]	; 0x78
   21da0:	pop	{r4, pc}

00021da4 <flatcc_builder_custom_init@@Base>:
   21da4:	push	{r4, r5, r6, r7, r8, lr}
   21da8:	mov	r6, r1
   21dac:	mov	r7, r2
   21db0:	mov	r1, #0
   21db4:	mov	r2, #232	; 0xe8
   21db8:	mov	r4, r0
   21dbc:	mov	r5, r3
   21dc0:	ldr	r8, [sp, #24]
   21dc4:	bl	12654 <memset@plt>
   21dc8:	cmp	r6, #0
   21dcc:	moveq	r3, #1
   21dd0:	ldreq	r6, [pc, #40]	; 21e00 <flatcc_builder_custom_init@@Base+0x5c>
   21dd4:	addeq	r7, r4, #188	; 0xbc
   21dd8:	str	r8, [r4, #40]	; 0x28
   21ddc:	str	r7, [r4, #36]	; 0x24
   21de0:	str	r6, [r4, #44]	; 0x2c
   21de4:	mov	r0, #0
   21de8:	streq	r3, [r4, #184]	; 0xb8
   21dec:	ldr	r3, [pc, #16]	; 21e04 <flatcc_builder_custom_init@@Base+0x60>
   21df0:	cmp	r5, #0
   21df4:	moveq	r5, r3
   21df8:	str	r5, [r4, #48]	; 0x30
   21dfc:	pop	{r4, r5, r6, r7, r8, pc}
   21e00:	andeq	r7, r2, r8, asr r3
   21e04:	strdeq	r1, [r2], -ip

00021e08 <flatcc_builder_init@@Base>:
   21e08:	push	{r4, lr}
   21e0c:	mov	r2, #232	; 0xe8
   21e10:	mov	r1, #0
   21e14:	mov	r4, r0
   21e18:	bl	12654 <memset@plt>
   21e1c:	ldr	r1, [pc, #32]	; 21e44 <flatcc_builder_init@@Base+0x3c>
   21e20:	ldr	r3, [pc, #32]	; 21e48 <flatcc_builder_init@@Base+0x40>
   21e24:	mov	r0, #1
   21e28:	add	r2, r4, #188	; 0xbc
   21e2c:	str	r0, [r4, #184]	; 0xb8
   21e30:	str	r1, [r4, #48]	; 0x30
   21e34:	str	r2, [r4, #36]	; 0x24
   21e38:	str	r3, [r4, #44]	; 0x2c
   21e3c:	mov	r0, #0
   21e40:	pop	{r4, pc}
   21e44:	strdeq	r1, [r2], -ip
   21e48:	andeq	r7, r2, r8, asr r3

00021e4c <flatcc_builder_custom_reset@@Base>:
   21e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e50:	add	r7, r0, #52	; 0x34
   21e54:	mov	r4, #0
   21e58:	sub	sp, sp, #12
   21e5c:	mov	r5, r0
   21e60:	mov	sl, r1
   21e64:	mov	r8, r2
   21e68:	mov	r6, r7
   21e6c:	mov	r9, r4
   21e70:	mov	fp, #1
   21e74:	b	21ec8 <flatcc_builder_custom_reset@@Base+0x7c>
   21e78:	cmp	r4, #5
   21e7c:	cmpne	r8, #0
   21e80:	beq	21eac <flatcc_builder_custom_reset@@Base+0x60>
   21e84:	ldr	r0, [r5, #40]	; 0x28
   21e88:	mov	r3, fp
   21e8c:	str	r4, [sp]
   21e90:	mov	r2, #1
   21e94:	mov	r1, r6
   21e98:	ldr	ip, [r5, #48]	; 0x30
   21e9c:	blx	ip
   21ea0:	cmp	r0, #0
   21ea4:	bne	21f7c <flatcc_builder_custom_reset@@Base+0x130>
   21ea8:	ldr	r0, [r7, r4, lsl #3]
   21eac:	ldr	r2, [r6, #4]
   21eb0:	mov	r1, r9
   21eb4:	bl	12654 <memset@plt>
   21eb8:	add	r4, r4, #1
   21ebc:	cmp	r4, #8
   21ec0:	add	r6, r6, #8
   21ec4:	beq	21ef4 <flatcc_builder_custom_reset@@Base+0xa8>
   21ec8:	ldr	r0, [r7, r4, lsl #3]
   21ecc:	cmp	r0, #0
   21ed0:	bne	21e78 <flatcc_builder_custom_reset@@Base+0x2c>
   21ed4:	ldr	r3, [r6, #4]
   21ed8:	cmp	r3, #0
   21edc:	beq	21eb8 <flatcc_builder_custom_reset@@Base+0x6c>
   21ee0:	ldr	r3, [pc, #156]	; 21f84 <flatcc_builder_custom_reset@@Base+0x138>
   21ee4:	ldr	r2, [pc, #156]	; 21f88 <flatcc_builder_custom_reset@@Base+0x13c>
   21ee8:	ldr	r1, [pc, #156]	; 21f8c <flatcc_builder_custom_reset@@Base+0x140>
   21eec:	ldr	r0, [pc, #156]	; 21f90 <flatcc_builder_custom_reset@@Base+0x144>
   21ef0:	bl	126a8 <__assert_fail@plt>
   21ef4:	ldr	r2, [r5, #124]	; 0x7c
   21ef8:	mov	r3, #0
   21efc:	ldr	r0, [r5, #60]	; 0x3c
   21f00:	cmp	r2, r3
   21f04:	str	r3, [r5, #120]	; 0x78
   21f08:	ldr	r1, [r5, #76]	; 0x4c
   21f0c:	movne	r3, #16
   21f10:	ldr	r2, [r5, #52]	; 0x34
   21f14:	str	r0, [r5, #16]
   21f18:	ldr	r0, [r5, #184]	; 0xb8
   21f1c:	strne	r3, [r5, #124]	; 0x7c
   21f20:	mov	r3, #0
   21f24:	cmp	sl, #0
   21f28:	strne	r3, [r5, #172]	; 0xac
   21f2c:	strne	r3, [r5, #176]	; 0xb0
   21f30:	strne	r3, [r5, #180]	; 0xb4
   21f34:	cmp	r0, #0
   21f38:	stm	r5, {r1, r2}
   21f3c:	strh	r3, [r5, #128]	; 0x80
   21f40:	str	r3, [r5, #136]	; 0x88
   21f44:	str	r3, [r5, #140]	; 0x8c
   21f48:	str	r3, [r5, #156]	; 0x9c
   21f4c:	str	r3, [r5, #160]	; 0xa0
   21f50:	str	r3, [r5, #20]
   21f54:	str	r3, [r5, #24]
   21f58:	str	r3, [r5, #148]	; 0x94
   21f5c:	str	r3, [r5, #152]	; 0x98
   21f60:	str	r3, [r5, #32]
   21f64:	beq	21f74 <flatcc_builder_custom_reset@@Base+0x128>
   21f68:	add	r0, r5, #188	; 0xbc
   21f6c:	bl	27230 <flatcc_emitter_reset@@Base>
   21f70:	mov	r0, #0
   21f74:	add	sp, sp, #12
   21f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f7c:	mvn	r0, #0
   21f80:	b	21f74 <flatcc_builder_custom_reset@@Base+0x128>
   21f84:	andeq	lr, r2, r0, asr lr
   21f88:			; <UNDEFINED> instruction: 0x000001b2
   21f8c:	andeq	pc, r2, r8, ror #5
   21f90:			; <UNDEFINED> instruction: 0x0002f3bc

00021f94 <flatcc_builder_reset@@Base>:
   21f94:	push	{r4, r5, r6, r7, r8, lr}
   21f98:	mov	r5, r0
   21f9c:	add	r4, r0, #52	; 0x34
   21fa0:	add	r6, r0, #116	; 0x74
   21fa4:	mov	r7, #0
   21fa8:	b	21fc4 <flatcc_builder_reset@@Base+0x30>
   21fac:	ldr	r2, [r4, #4]
   21fb0:	mov	r1, r7
   21fb4:	bl	12654 <memset@plt>
   21fb8:	add	r4, r4, #8
   21fbc:	cmp	r6, r4
   21fc0:	beq	21ff0 <flatcc_builder_reset@@Base+0x5c>
   21fc4:	ldr	r0, [r4]
   21fc8:	cmp	r0, #0
   21fcc:	bne	21fac <flatcc_builder_reset@@Base+0x18>
   21fd0:	ldr	r3, [r4, #4]
   21fd4:	cmp	r3, #0
   21fd8:	beq	21fb8 <flatcc_builder_reset@@Base+0x24>
   21fdc:	ldr	r3, [pc, #128]	; 22064 <flatcc_builder_reset@@Base+0xd0>
   21fe0:	ldr	r2, [pc, #128]	; 22068 <flatcc_builder_reset@@Base+0xd4>
   21fe4:	ldr	r1, [pc, #128]	; 2206c <flatcc_builder_reset@@Base+0xd8>
   21fe8:	ldr	r0, [pc, #128]	; 22070 <flatcc_builder_reset@@Base+0xdc>
   21fec:	bl	126a8 <__assert_fail@plt>
   21ff0:	ldr	r2, [r5, #124]	; 0x7c
   21ff4:	mov	r3, #0
   21ff8:	cmp	r2, r3
   21ffc:	str	r3, [r5, #120]	; 0x78
   22000:	movne	r3, #16
   22004:	strne	r3, [r5, #124]	; 0x7c
   22008:	ldr	r1, [r5, #76]	; 0x4c
   2200c:	ldr	r3, [r5, #184]	; 0xb8
   22010:	ldr	r2, [r5, #52]	; 0x34
   22014:	ldr	r0, [r5, #60]	; 0x3c
   22018:	cmp	r3, #0
   2201c:	mov	r3, #0
   22020:	str	r0, [r5, #16]
   22024:	stm	r5, {r1, r2}
   22028:	strh	r3, [r5, #128]	; 0x80
   2202c:	str	r3, [r5, #136]	; 0x88
   22030:	str	r3, [r5, #140]	; 0x8c
   22034:	str	r3, [r5, #156]	; 0x9c
   22038:	str	r3, [r5, #160]	; 0xa0
   2203c:	str	r3, [r5, #20]
   22040:	str	r3, [r5, #24]
   22044:	str	r3, [r5, #148]	; 0x94
   22048:	str	r3, [r5, #152]	; 0x98
   2204c:	str	r3, [r5, #32]
   22050:	beq	2205c <flatcc_builder_reset@@Base+0xc8>
   22054:	add	r0, r5, #188	; 0xbc
   22058:	bl	27230 <flatcc_emitter_reset@@Base>
   2205c:	mov	r0, #0
   22060:	pop	{r4, r5, r6, r7, r8, pc}
   22064:	andeq	lr, r2, r0, asr lr
   22068:			; <UNDEFINED> instruction: 0x000001b2
   2206c:	andeq	pc, r2, r8, ror #5
   22070:			; <UNDEFINED> instruction: 0x0002f3bc

00022074 <flatcc_builder_clear@@Base>:
   22074:	push	{r4, r5, r6, r7, r8, lr}
   22078:	mov	r4, #0
   2207c:	sub	sp, sp, #8
   22080:	mov	r6, r0
   22084:	add	r5, r0, #52	; 0x34
   22088:	mov	r8, r4
   2208c:	ldr	r0, [r6, #40]	; 0x28
   22090:	mov	r1, r5
   22094:	str	r4, [sp]
   22098:	mov	r3, r8
   2209c:	add	r4, r4, #1
   220a0:	ldr	r7, [r6, #48]	; 0x30
   220a4:	mov	r2, #0
   220a8:	blx	r7
   220ac:	cmp	r4, #8
   220b0:	add	r5, r5, #8
   220b4:	bne	2208c <flatcc_builder_clear@@Base+0x18>
   220b8:	ldr	r3, [r6, #184]	; 0xb8
   220bc:	cmp	r3, #0
   220c0:	beq	220cc <flatcc_builder_clear@@Base+0x58>
   220c4:	add	r0, r6, #188	; 0xbc
   220c8:	bl	272ec <flatcc_emitter_clear@@Base>
   220cc:	mov	r0, r6
   220d0:	mov	r2, #232	; 0xe8
   220d4:	mov	r1, #0
   220d8:	add	sp, sp, #8
   220dc:	pop	{r4, r5, r6, r7, r8, lr}
   220e0:	b	12654 <memset@plt>

000220e4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   220e4:	push	{r4, r5, r6, r7, r8, lr}
   220e8:	add	r4, r1, #3
   220ec:	bic	r4, r4, #3
   220f0:	ldr	r7, [r0, #228]	; 0xe4
   220f4:	add	r4, r4, #4
   220f8:	ldr	r3, [r0, #112]	; 0x70
   220fc:	add	r2, r4, r7
   22100:	cmp	r2, r3
   22104:	sub	sp, sp, #8
   22108:	mov	r6, r0
   2210c:	bhi	22154 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   22110:	ldr	r8, [r6, #108]	; 0x6c
   22114:	adds	r5, r8, r7
   22118:	beq	2217c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   2211c:	mov	r2, r4
   22120:	mov	r1, #0
   22124:	mov	r0, r5
   22128:	bl	12654 <memset@plt>
   2212c:	ldr	r3, [r6, #224]	; 0xe0
   22130:	add	r0, r5, #4
   22134:	str	r3, [r8, r7]
   22138:	ldr	r3, [r6, #228]	; 0xe4
   2213c:	add	r4, r4, r3
   22140:	add	r3, r3, #4
   22144:	str	r4, [r6, #228]	; 0xe4
   22148:	str	r3, [r6, #224]	; 0xe0
   2214c:	add	sp, sp, #8
   22150:	pop	{r4, r5, r6, r7, r8, pc}
   22154:	mov	r3, #7
   22158:	ldr	r0, [r0, #40]	; 0x28
   2215c:	add	r1, r6, #108	; 0x6c
   22160:	str	r3, [sp]
   22164:	mov	r3, #0
   22168:	ldr	r5, [r6, #48]	; 0x30
   2216c:	blx	r5
   22170:	cmp	r0, #0
   22174:	beq	22110 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   22178:	bl	1285c <__assert_fail@plt+0x1b4>
   2217c:	mov	r0, r5
   22180:	b	2214c <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00022184 <flatcc_builder_enter_user_frame@@Base>:
   22184:	push	{r4, r5, r6, r7, lr}
   22188:	add	r4, r1, #3
   2218c:	bic	r4, r4, #3
   22190:	ldr	r6, [r0, #228]	; 0xe4
   22194:	add	r4, r4, #4
   22198:	ldr	r3, [r0, #112]	; 0x70
   2219c:	add	r2, r4, r6
   221a0:	cmp	r2, r3
   221a4:	sub	sp, sp, #12
   221a8:	mov	r5, r0
   221ac:	bhi	221ec <flatcc_builder_enter_user_frame@@Base+0x68>
   221b0:	ldr	r7, [r5, #108]	; 0x6c
   221b4:	adds	r0, r7, r6
   221b8:	beq	221e4 <flatcc_builder_enter_user_frame@@Base+0x60>
   221bc:	mov	r2, r4
   221c0:	mov	r1, #0
   221c4:	bl	12654 <memset@plt>
   221c8:	ldr	r3, [r5, #224]	; 0xe0
   221cc:	str	r3, [r7, r6]
   221d0:	ldr	r0, [r5, #228]	; 0xe4
   221d4:	add	r4, r4, r0
   221d8:	add	r0, r0, #4
   221dc:	str	r4, [r5, #228]	; 0xe4
   221e0:	str	r0, [r5, #224]	; 0xe0
   221e4:	add	sp, sp, #12
   221e8:	pop	{r4, r5, r6, r7, pc}
   221ec:	mov	r3, #7
   221f0:	ldr	r0, [r0, #40]	; 0x28
   221f4:	add	r1, r5, #108	; 0x6c
   221f8:	str	r3, [sp]
   221fc:	mov	r3, #0
   22200:	ldr	r7, [r5, #48]	; 0x30
   22204:	blx	r7
   22208:	cmp	r0, #0
   2220c:	beq	221b0 <flatcc_builder_enter_user_frame@@Base+0x2c>
   22210:	bl	1285c <__assert_fail@plt+0x1b4>

00022214 <flatcc_builder_exit_user_frame@@Base>:
   22214:	ldr	r3, [r0, #224]	; 0xe0
   22218:	cmp	r3, #0
   2221c:	beq	22240 <flatcc_builder_exit_user_frame@@Base+0x2c>
   22220:	ldr	r2, [r0, #108]	; 0x6c
   22224:	sub	r1, r3, #4
   22228:	add	r3, r2, r3
   2222c:	str	r1, [r0, #228]	; 0xe4
   22230:	ldr	r3, [r3, #-4]
   22234:	str	r3, [r0, #224]	; 0xe0
   22238:	mov	r0, r3
   2223c:	bx	lr
   22240:	push	{r4, lr}
   22244:	bl	128f4 <__assert_fail@plt+0x24c>

00022248 <flatcc_builder_exit_user_frame_at@@Base>:
   22248:	ldr	r3, [r0, #224]	; 0xe0
   2224c:	push	{r4, lr}
   22250:	cmp	r3, r1
   22254:	bcc	22284 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   22258:	cmp	r1, #0
   2225c:	str	r1, [r0, #224]	; 0xe0
   22260:	beq	22298 <flatcc_builder_exit_user_frame_at@@Base+0x50>
   22264:	ldr	r3, [r0, #108]	; 0x6c
   22268:	sub	r2, r1, #4
   2226c:	add	r1, r3, r1
   22270:	str	r2, [r0, #228]	; 0xe4
   22274:	ldr	r3, [r1, #-4]
   22278:	str	r3, [r0, #224]	; 0xe0
   2227c:	mov	r0, r3
   22280:	pop	{r4, pc}
   22284:	ldr	r3, [pc, #16]	; 2229c <flatcc_builder_exit_user_frame_at@@Base+0x54>
   22288:	ldr	r2, [pc, #16]	; 222a0 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   2228c:	ldr	r1, [pc, #16]	; 222a4 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   22290:	ldr	r0, [pc, #16]	; 222a8 <flatcc_builder_exit_user_frame_at@@Base+0x60>
   22294:	bl	126a8 <__assert_fail@plt>
   22298:	bl	128f4 <__assert_fail@plt+0x24c>
   2229c:	andeq	lr, r2, ip, ror #28
   222a0:	andeq	r0, r0, r7, lsr #4
   222a4:	andeq	pc, r2, r8, ror #5
   222a8:	ldrdeq	pc, [r2], -r0

000222ac <flatcc_builder_get_current_user_frame@@Base>:
   222ac:	ldr	r0, [r0, #224]	; 0xe0
   222b0:	bx	lr

000222b4 <flatcc_builder_get_user_frame_ptr@@Base>:
   222b4:	ldr	r0, [r0, #108]	; 0x6c
   222b8:	add	r0, r0, r1
   222bc:	bx	lr

000222c0 <flatcc_builder_embed_buffer@@Base>:
   222c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222c4:	sub	sp, sp, #92	; 0x5c
   222c8:	cmp	r1, #0
   222cc:	ldr	r6, [sp, #132]	; 0x84
   222d0:	mov	r8, r2
   222d4:	mov	r5, r0
   222d8:	mov	r7, r3
   222dc:	ldr	r2, [r0, #152]	; 0x98
   222e0:	and	r6, r6, #2
   222e4:	ldrh	r4, [sp, #128]	; 0x80
   222e8:	bne	222f8 <flatcc_builder_embed_buffer@@Base+0x38>
   222ec:	ldrh	r1, [r0, #132]	; 0x84
   222f0:	cmp	r1, #0
   222f4:	beq	22480 <flatcc_builder_embed_buffer@@Base+0x1c0>
   222f8:	cmp	r4, #4
   222fc:	movcc	r4, #4
   22300:	cmp	r1, r4
   22304:	movcs	r4, r1
   22308:	cmp	r2, #0
   2230c:	bne	22374 <flatcc_builder_embed_buffer@@Base+0xb4>
   22310:	ldr	r9, [r5, #140]	; 0x8c
   22314:	sub	r1, r1, #1
   22318:	ands	r1, r1, r9
   2231c:	beq	22374 <flatcc_builder_embed_buffer@@Base+0xb4>
   22320:	add	r3, r9, r1
   22324:	ldr	sl, [pc, #420]	; 224d0 <flatcc_builder_embed_buffer@@Base+0x210>
   22328:	mov	r2, #1
   2232c:	cmp	r9, r3
   22330:	str	r1, [sp, #16]
   22334:	str	r1, [sp, #28]
   22338:	str	sl, [sp, #24]
   2233c:	str	r3, [r5, #140]	; 0x8c
   22340:	str	r2, [sp, #20]
   22344:	bgt	224a4 <flatcc_builder_embed_buffer@@Base+0x1e4>
   22348:	ldr	r0, [r5, #36]	; 0x24
   2234c:	mov	r3, r9
   22350:	str	r1, [sp]
   22354:	add	r1, sp, #24
   22358:	ldr	fp, [r5, #44]	; 0x2c
   2235c:	blx	fp
   22360:	cmp	r0, #0
   22364:	bne	224a8 <flatcc_builder_embed_buffer@@Base+0x1e8>
   22368:	cmn	r9, #1
   2236c:	beq	224bc <flatcc_builder_embed_buffer@@Base+0x1fc>
   22370:	ldr	r2, [r5, #152]	; 0x98
   22374:	ldr	r1, [r5, #136]	; 0x88
   22378:	cmp	r6, #0
   2237c:	movne	r6, #4
   22380:	moveq	r6, #0
   22384:	sub	r3, r1, r7
   22388:	sub	r6, r3, r6
   2238c:	sub	r4, r4, #1
   22390:	and	r4, r4, r6
   22394:	mov	r3, #0
   22398:	add	r0, r7, r4
   2239c:	cmp	r2, #0
   223a0:	str	r0, [sp, #12]
   223a4:	str	r3, [sp, #16]
   223a8:	str	r3, [sp, #20]
   223ac:	bne	22458 <flatcc_builder_embed_buffer@@Base+0x198>
   223b0:	mov	r3, r2
   223b4:	mov	ip, #2
   223b8:	mov	r0, #1
   223bc:	cmp	r7, #0
   223c0:	beq	223ec <flatcc_builder_embed_buffer@@Base+0x12c>
   223c4:	add	r2, r2, #1
   223c8:	add	lr, sp, #88	; 0x58
   223cc:	add	r2, lr, r2, lsl #3
   223d0:	add	r3, r3, r7
   223d4:	str	r3, [sp, #16]
   223d8:	str	r8, [r2, #-72]	; 0xffffffb8
   223dc:	str	r7, [r2, #-68]	; 0xffffffbc
   223e0:	mov	r2, r0
   223e4:	str	r0, [sp, #20]
   223e8:	mov	r0, ip
   223ec:	cmp	r4, #0
   223f0:	beq	2241c <flatcc_builder_embed_buffer@@Base+0x15c>
   223f4:	add	r2, r2, #1
   223f8:	add	ip, sp, #88	; 0x58
   223fc:	add	ip, ip, r2, lsl #3
   22400:	ldr	lr, [pc, #200]	; 224d0 <flatcc_builder_embed_buffer@@Base+0x210>
   22404:	mov	r2, r0
   22408:	add	r3, r3, r4
   2240c:	str	r3, [sp, #16]
   22410:	str	r4, [ip, #-68]	; 0xffffffbc
   22414:	str	lr, [ip, #-72]	; 0xffffffb8
   22418:	str	r0, [sp, #20]
   2241c:	sub	r4, r1, r3
   22420:	cmp	r1, r4
   22424:	ble	2248c <flatcc_builder_embed_buffer@@Base+0x1cc>
   22428:	ldr	r0, [r5, #36]	; 0x24
   2242c:	add	r1, sp, #24
   22430:	str	r3, [sp]
   22434:	mov	r3, r4
   22438:	ldr	r6, [r5, #44]	; 0x2c
   2243c:	blx	r6
   22440:	cmp	r0, #0
   22444:	bne	22490 <flatcc_builder_embed_buffer@@Base+0x1d0>
   22448:	mov	r0, r4
   2244c:	str	r4, [r5, #136]	; 0x88
   22450:	add	sp, sp, #92	; 0x5c
   22454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22458:	mov	r3, #4
   2245c:	add	r0, sp, #12
   22460:	mov	r2, #1
   22464:	str	r0, [sp, #24]
   22468:	str	r3, [sp, #16]
   2246c:	str	r3, [sp, #28]
   22470:	str	r2, [sp, #20]
   22474:	mov	ip, #3
   22478:	mov	r0, #2
   2247c:	b	223bc <flatcc_builder_embed_buffer@@Base+0xfc>
   22480:	cmp	r4, #4
   22484:	movcc	r4, #4
   22488:	b	22374 <flatcc_builder_embed_buffer@@Base+0xb4>
   2248c:	bl	128a8 <__assert_fail@plt+0x200>
   22490:	ldr	r3, [pc, #60]	; 224d4 <flatcc_builder_embed_buffer@@Base+0x214>
   22494:	ldr	r2, [pc, #60]	; 224d8 <flatcc_builder_embed_buffer@@Base+0x218>
   22498:	ldr	r1, [pc, #60]	; 224dc <flatcc_builder_embed_buffer@@Base+0x21c>
   2249c:	ldr	r0, [pc, #60]	; 224e0 <flatcc_builder_embed_buffer@@Base+0x220>
   224a0:	bl	126a8 <__assert_fail@plt>
   224a4:	bl	12880 <__assert_fail@plt+0x1d8>
   224a8:	ldr	r3, [pc, #52]	; 224e4 <flatcc_builder_embed_buffer@@Base+0x224>
   224ac:	ldr	r2, [pc, #52]	; 224e8 <flatcc_builder_embed_buffer@@Base+0x228>
   224b0:	ldr	r1, [pc, #36]	; 224dc <flatcc_builder_embed_buffer@@Base+0x21c>
   224b4:	ldr	r0, [pc, #36]	; 224e0 <flatcc_builder_embed_buffer@@Base+0x220>
   224b8:	bl	126a8 <__assert_fail@plt>
   224bc:	add	r3, sl, #608	; 0x260
   224c0:	ldr	r2, [pc, #36]	; 224ec <flatcc_builder_embed_buffer@@Base+0x22c>
   224c4:	ldr	r1, [pc, #16]	; 224dc <flatcc_builder_embed_buffer@@Base+0x21c>
   224c8:	ldr	r0, [pc, #16]	; 224e0 <flatcc_builder_embed_buffer@@Base+0x220>
   224cc:	bl	126a8 <__assert_fail@plt>
   224d0:	andeq	lr, r2, r0, lsr ip
   224d4:			; <UNDEFINED> instruction: 0x0002ebb4
   224d8:	andeq	r0, r0, fp, lsl #5
   224dc:	andeq	pc, r2, r8, ror #5
   224e0:	andeq	pc, r2, r8, lsr #7
   224e4:	andeq	lr, r2, r8, lsr #23
   224e8:	andeq	r0, r0, r5, lsr #5
   224ec:			; <UNDEFINED> instruction: 0x000002be

000224f0 <flatcc_builder_create_buffer@@Base>:
   224f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224f4:	sub	sp, sp, #100	; 0x64
   224f8:	mov	ip, #0
   224fc:	ldr	r5, [sp, #140]	; 0x8c
   22500:	cmp	r2, #0
   22504:	mov	r6, r0
   22508:	mov	r8, r1
   2250c:	mov	sl, r3
   22510:	and	r7, r5, #1
   22514:	str	ip, [sp, #20]
   22518:	ldrh	r4, [sp, #136]	; 0x88
   2251c:	bne	2252c <flatcc_builder_create_buffer@@Base+0x3c>
   22520:	ldrh	r2, [r0, #132]	; 0x84
   22524:	cmp	r2, ip
   22528:	beq	22738 <flatcc_builder_create_buffer@@Base+0x248>
   2252c:	cmp	r4, #4
   22530:	movcc	r4, #4
   22534:	cmp	r2, r4
   22538:	movcs	r4, r2
   2253c:	cmp	r7, #0
   22540:	bne	225a4 <flatcc_builder_create_buffer@@Base+0xb4>
   22544:	ldr	r9, [r6, #140]	; 0x8c
   22548:	sub	r2, r2, #1
   2254c:	ands	r3, r2, r9
   22550:	beq	225a4 <flatcc_builder_create_buffer@@Base+0xb4>
   22554:	add	r1, r9, r3
   22558:	ldr	fp, [pc, #584]	; 227a8 <flatcc_builder_create_buffer@@Base+0x2b8>
   2255c:	mov	r2, #1
   22560:	cmp	r9, r1
   22564:	str	r3, [sp, #24]
   22568:	str	r3, [sp, #36]	; 0x24
   2256c:	str	fp, [sp, #32]
   22570:	str	r1, [r6, #140]	; 0x8c
   22574:	str	r2, [sp, #28]
   22578:	bgt	22790 <flatcc_builder_create_buffer@@Base+0x2a0>
   2257c:	ldr	r0, [r6, #36]	; 0x24
   22580:	add	r1, sp, #32
   22584:	str	r3, [sp]
   22588:	mov	r3, r9
   2258c:	ldr	ip, [r6, #44]	; 0x2c
   22590:	blx	ip
   22594:	cmp	r0, #0
   22598:	bne	22794 <flatcc_builder_create_buffer@@Base+0x2a4>
   2259c:	cmn	r9, #1
   225a0:	beq	22750 <flatcc_builder_create_buffer@@Base+0x260>
   225a4:	ldrh	r3, [r6, #128]	; 0x80
   225a8:	ldr	r0, [r6, #136]	; 0x88
   225ac:	uxtb	lr, r7
   225b0:	cmp	r3, r4
   225b4:	strhcc	r4, [r6, #128]	; 0x80
   225b8:	cmp	r8, #0
   225bc:	ldreq	r1, [sp, #20]
   225c0:	ldrne	r1, [r8]
   225c4:	ldrne	r3, [r8]
   225c8:	strne	r3, [sp, #20]
   225cc:	cmp	r1, #0
   225d0:	movne	r1, #4
   225d4:	moveq	r1, #0
   225d8:	ands	r5, r5, #2
   225dc:	bne	22700 <flatcc_builder_create_buffer@@Base+0x210>
   225e0:	sub	r3, r4, #1
   225e4:	sub	r4, r0, #4
   225e8:	cmp	lr, #0
   225ec:	sub	r4, r4, r1
   225f0:	and	r4, r4, r3
   225f4:	moveq	r8, #3
   225f8:	moveq	ip, #2
   225fc:	moveq	r2, #1
   22600:	moveq	r3, #4
   22604:	bne	22710 <flatcc_builder_create_buffer@@Base+0x220>
   22608:	add	r5, r5, #1
   2260c:	add	r9, sp, #96	; 0x60
   22610:	add	r5, r9, r5, lsl #3
   22614:	add	fp, sp, #12
   22618:	mov	r9, #4
   2261c:	cmp	r1, #0
   22620:	str	r3, [sp, #24]
   22624:	str	fp, [r5, #-72]	; 0xffffffb8
   22628:	str	r9, [r5, #-68]	; 0xffffffbc
   2262c:	str	r2, [sp, #28]
   22630:	beq	22660 <flatcc_builder_create_buffer@@Base+0x170>
   22634:	add	r2, r2, #1
   22638:	add	r5, sp, #96	; 0x60
   2263c:	add	r2, r5, r2, lsl #3
   22640:	add	r3, r3, r1
   22644:	add	r5, sp, #20
   22648:	str	r3, [sp, #24]
   2264c:	str	r1, [r2, #-68]	; 0xffffffbc
   22650:	str	r5, [r2, #-72]	; 0xffffffb8
   22654:	mov	r2, ip
   22658:	str	ip, [sp, #28]
   2265c:	mov	ip, r8
   22660:	cmp	r4, #0
   22664:	beq	22690 <flatcc_builder_create_buffer@@Base+0x1a0>
   22668:	add	r2, r2, #1
   2266c:	add	r1, sp, #96	; 0x60
   22670:	add	r1, r1, r2, lsl #3
   22674:	ldr	r5, [pc, #300]	; 227a8 <flatcc_builder_create_buffer@@Base+0x2b8>
   22678:	mov	r2, ip
   2267c:	add	r3, r3, r4
   22680:	str	r3, [sp, #24]
   22684:	str	r4, [r1, #-68]	; 0xffffffbc
   22688:	str	r5, [r1, #-72]	; 0xffffffb8
   2268c:	str	ip, [sp, #28]
   22690:	sub	r4, r0, r3
   22694:	cmp	lr, #0
   22698:	mov	r1, r4
   2269c:	beq	22744 <flatcc_builder_create_buffer@@Base+0x254>
   226a0:	cmp	r7, #0
   226a4:	add	r1, r4, #4
   226a8:	beq	22744 <flatcc_builder_create_buffer@@Base+0x254>
   226ac:	ldr	ip, [r6, #144]	; 0x90
   226b0:	sub	ip, ip, r1
   226b4:	sub	sl, sl, r1
   226b8:	cmp	r4, r0
   226bc:	str	sl, [sp, #12]
   226c0:	str	ip, [sp, #16]
   226c4:	bge	22764 <flatcc_builder_create_buffer@@Base+0x274>
   226c8:	ldr	r0, [r6, #36]	; 0x24
   226cc:	add	r1, sp, #32
   226d0:	str	r3, [sp]
   226d4:	mov	r3, r4
   226d8:	ldr	r5, [r6, #44]	; 0x2c
   226dc:	blx	r5
   226e0:	cmp	r0, #0
   226e4:	bne	22768 <flatcc_builder_create_buffer@@Base+0x278>
   226e8:	cmp	r4, #0
   226ec:	str	r4, [r6, #136]	; 0x88
   226f0:	beq	2277c <flatcc_builder_create_buffer@@Base+0x28c>
   226f4:	mov	r0, r4
   226f8:	add	sp, sp, #100	; 0x64
   226fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22700:	sub	r3, r0, #8
   22704:	sub	r4, r4, #1
   22708:	sub	r3, r3, r1
   2270c:	and	r4, r4, r3
   22710:	add	r3, sp, #16
   22714:	mov	r8, #4
   22718:	mov	r5, #1
   2271c:	str	r3, [sp, #32]
   22720:	str	r8, [sp, #36]	; 0x24
   22724:	mov	lr, r5
   22728:	mov	ip, #3
   2272c:	mov	r2, #2
   22730:	mov	r3, #8
   22734:	b	22608 <flatcc_builder_create_buffer@@Base+0x118>
   22738:	cmp	r4, #4
   2273c:	movcc	r4, #4
   22740:	b	225a4 <flatcc_builder_create_buffer@@Base+0xb4>
   22744:	ldr	ip, [r6, #140]	; 0x8c
   22748:	sub	ip, ip, r1
   2274c:	b	226b4 <flatcc_builder_create_buffer@@Base+0x1c4>
   22750:	add	r3, fp, #608	; 0x260
   22754:	ldr	r2, [pc, #80]	; 227ac <flatcc_builder_create_buffer@@Base+0x2bc>
   22758:	ldr	r1, [pc, #80]	; 227b0 <flatcc_builder_create_buffer@@Base+0x2c0>
   2275c:	ldr	r0, [pc, #80]	; 227b4 <flatcc_builder_create_buffer@@Base+0x2c4>
   22760:	bl	126a8 <__assert_fail@plt>
   22764:	bl	128a8 <__assert_fail@plt+0x200>
   22768:	ldr	r3, [pc, #72]	; 227b8 <flatcc_builder_create_buffer@@Base+0x2c8>
   2276c:	ldr	r2, [pc, #72]	; 227bc <flatcc_builder_create_buffer@@Base+0x2cc>
   22770:	ldr	r1, [pc, #56]	; 227b0 <flatcc_builder_create_buffer@@Base+0x2c0>
   22774:	ldr	r0, [pc, #56]	; 227b4 <flatcc_builder_create_buffer@@Base+0x2c4>
   22778:	bl	126a8 <__assert_fail@plt>
   2277c:	ldr	r3, [pc, #60]	; 227c0 <flatcc_builder_create_buffer@@Base+0x2d0>
   22780:	mov	r2, #772	; 0x304
   22784:	ldr	r1, [pc, #36]	; 227b0 <flatcc_builder_create_buffer@@Base+0x2c0>
   22788:	ldr	r0, [pc, #36]	; 227b4 <flatcc_builder_create_buffer@@Base+0x2c4>
   2278c:	bl	126a8 <__assert_fail@plt>
   22790:	bl	12880 <__assert_fail@plt+0x1d8>
   22794:	ldr	r3, [pc, #40]	; 227c4 <flatcc_builder_create_buffer@@Base+0x2d4>
   22798:	ldr	r2, [pc, #40]	; 227c8 <flatcc_builder_create_buffer@@Base+0x2d8>
   2279c:	ldr	r1, [pc, #12]	; 227b0 <flatcc_builder_create_buffer@@Base+0x2c0>
   227a0:	ldr	r0, [pc, #12]	; 227b4 <flatcc_builder_create_buffer@@Base+0x2c4>
   227a4:	bl	126a8 <__assert_fail@plt>
   227a8:	andeq	lr, r2, r0, lsr ip
   227ac:			; <UNDEFINED> instruction: 0x000002be
   227b0:	andeq	pc, r2, r8, ror #5
   227b4:	andeq	pc, r2, r8, lsr #7
   227b8:			; <UNDEFINED> instruction: 0x0002ebb4
   227bc:	andeq	r0, r0, fp, lsl #5
   227c0:	andeq	lr, r2, r0, lsr #29
   227c4:	andeq	lr, r2, r8, lsr #23
   227c8:	andeq	r0, r0, r5, lsr #5

000227cc <flatcc_builder_create_struct@@Base>:
   227cc:	cmp	r3, #0
   227d0:	push	{r4, r5, r6, lr}
   227d4:	sub	sp, sp, #80	; 0x50
   227d8:	beq	228c4 <flatcc_builder_create_struct@@Base+0xf8>
   227dc:	mov	ip, r2
   227e0:	ldrh	r2, [r0, #128]	; 0x80
   227e4:	mov	r5, r0
   227e8:	cmp	r2, r3
   227ec:	strhcc	r3, [r0, #128]	; 0x80
   227f0:	ldr	r0, [r0, #136]	; 0x88
   227f4:	mov	r2, #0
   227f8:	sub	r3, r3, #1
   227fc:	sub	r4, r0, ip
   22800:	cmp	ip, #0
   22804:	and	r3, r3, r4
   22808:	str	r2, [sp, #8]
   2280c:	str	r2, [sp, #12]
   22810:	bne	22884 <flatcc_builder_create_struct@@Base+0xb8>
   22814:	cmp	r3, #0
   22818:	movne	r2, #1
   2281c:	movne	r1, ip
   22820:	beq	228ac <flatcc_builder_create_struct@@Base+0xe0>
   22824:	add	r1, r1, #1
   22828:	add	r4, sp, #80	; 0x50
   2282c:	add	ip, ip, r3
   22830:	add	r1, r4, r1, lsl #3
   22834:	ldr	lr, [pc, #156]	; 228d8 <flatcc_builder_create_struct@@Base+0x10c>
   22838:	sub	r4, r0, ip
   2283c:	str	r3, [r1, #-68]	; 0xffffffbc
   22840:	str	ip, [sp, #8]
   22844:	str	r2, [sp, #12]
   22848:	str	lr, [r1, #-72]	; 0xffffffb8
   2284c:	cmp	r0, r4
   22850:	ble	228ac <flatcc_builder_create_struct@@Base+0xe0>
   22854:	ldr	r0, [r5, #36]	; 0x24
   22858:	mov	r3, r4
   2285c:	str	ip, [sp]
   22860:	add	r1, sp, #16
   22864:	ldr	r6, [r5, #44]	; 0x2c
   22868:	blx	r6
   2286c:	cmp	r0, #0
   22870:	bne	228b0 <flatcc_builder_create_struct@@Base+0xe4>
   22874:	mov	r0, r4
   22878:	str	r4, [r5, #136]	; 0x88
   2287c:	add	sp, sp, #80	; 0x50
   22880:	pop	{r4, r5, r6, pc}
   22884:	cmp	r3, r2
   22888:	mov	r2, #1
   2288c:	str	r1, [sp, #16]
   22890:	str	r2, [sp, #12]
   22894:	movne	r1, r2
   22898:	str	ip, [sp, #8]
   2289c:	str	ip, [sp, #20]
   228a0:	movne	r2, #2
   228a4:	beq	2284c <flatcc_builder_create_struct@@Base+0x80>
   228a8:	b	22824 <flatcc_builder_create_struct@@Base+0x58>
   228ac:	bl	128a8 <__assert_fail@plt+0x200>
   228b0:	ldr	r3, [pc, #36]	; 228dc <flatcc_builder_create_struct@@Base+0x110>
   228b4:	ldr	r2, [pc, #36]	; 228e0 <flatcc_builder_create_struct@@Base+0x114>
   228b8:	ldr	r1, [pc, #36]	; 228e4 <flatcc_builder_create_struct@@Base+0x118>
   228bc:	ldr	r0, [pc, #36]	; 228e8 <flatcc_builder_create_struct@@Base+0x11c>
   228c0:	bl	126a8 <__assert_fail@plt>
   228c4:	ldr	r3, [pc, #32]	; 228ec <flatcc_builder_create_struct@@Base+0x120>
   228c8:	ldr	r2, [pc, #32]	; 228f0 <flatcc_builder_create_struct@@Base+0x124>
   228cc:	ldr	r1, [pc, #16]	; 228e4 <flatcc_builder_create_struct@@Base+0x118>
   228d0:	ldr	r0, [pc, #28]	; 228f4 <flatcc_builder_create_struct@@Base+0x128>
   228d4:	bl	126a8 <__assert_fail@plt>
   228d8:	andeq	lr, r2, r0, lsr ip
   228dc:			; <UNDEFINED> instruction: 0x0002ebb4
   228e0:	andeq	r0, r0, fp, lsl #5
   228e4:	andeq	pc, r2, r8, ror #5
   228e8:	andeq	pc, r2, r8, lsr #7
   228ec:	andeq	lr, r2, r0, asr #29
   228f0:	andeq	r0, r0, pc, lsl #6
   228f4:	strdeq	pc, [r2], -r0

000228f8 <flatcc_builder_start_buffer@@Base>:
   228f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   228fc:	mov	r4, r0
   22900:	ldr	r0, [r0, #156]	; 0x9c
   22904:	ldr	ip, [r4, #160]	; 0xa0
   22908:	mov	r5, r1
   2290c:	add	r1, r0, #1
   22910:	cmp	r1, ip
   22914:	sub	sp, sp, #8
   22918:	mov	r7, r2
   2291c:	mov	r6, r3
   22920:	str	r1, [r4, #156]	; 0x9c
   22924:	ldrh	r8, [r4, #128]	; 0x80
   22928:	ble	22998 <flatcc_builder_start_buffer@@Base+0xa0>
   2292c:	ldr	r3, [r4, #176]	; 0xb0
   22930:	cmp	r3, #0
   22934:	cmpgt	r1, r3
   22938:	movgt	r3, #1
   2293c:	movle	r3, #0
   22940:	bgt	22a74 <flatcc_builder_start_buffer@@Base+0x17c>
   22944:	add	r0, r0, r0, lsl #3
   22948:	ldr	r1, [r4, #88]	; 0x58
   2294c:	lsl	r9, r0, #2
   22950:	add	r2, r9, #36	; 0x24
   22954:	cmp	r2, r1
   22958:	bhi	22a50 <flatcc_builder_start_buffer@@Base+0x158>
   2295c:	ldr	r3, [r4, #84]	; 0x54
   22960:	add	r3, r3, r9
   22964:	cmp	r3, #0
   22968:	str	r3, [r4, #32]
   2296c:	beq	22a74 <flatcc_builder_start_buffer@@Base+0x17c>
   22970:	ldr	r2, [r4, #88]	; 0x58
   22974:	ldr	r0, [pc, #256]	; 22a7c <flatcc_builder_start_buffer@@Base+0x184>
   22978:	ldr	r1, [r4, #176]	; 0xb0
   2297c:	umull	r0, r2, r0, r2
   22980:	lsr	r2, r2, #3
   22984:	cmp	r1, #0
   22988:	cmpgt	r2, r1
   2298c:	str	r2, [r4, #160]	; 0xa0
   22990:	strgt	r1, [r4, #160]	; 0xa0
   22994:	b	229a4 <flatcc_builder_start_buffer@@Base+0xac>
   22998:	ldr	r3, [r4, #32]
   2299c:	add	r3, r3, #36	; 0x24
   229a0:	str	r3, [r4, #32]
   229a4:	ldr	r0, [r4, #20]
   229a8:	ldr	r1, [r4, #28]
   229ac:	ldrh	lr, [r4, #130]	; 0x82
   229b0:	ldrh	ip, [r4, #132]	; 0x84
   229b4:	add	r2, r0, r1
   229b8:	add	r2, r2, #7
   229bc:	str	r0, [r3, #8]
   229c0:	strh	lr, [r3, #12]
   229c4:	bic	r2, r2, #7
   229c8:	strh	r8, [r4, #130]	; 0x82
   229cc:	mvn	lr, #3
   229d0:	str	r1, [r3]
   229d4:	mov	r0, #0
   229d8:	mov	r1, #1
   229dc:	str	lr, [r3, #4]
   229e0:	str	r2, [r4, #28]
   229e4:	str	r0, [r4, #20]
   229e8:	strh	r1, [r4, #128]	; 0x80
   229ec:	strh	ip, [r3, #34]	; 0x22
   229f0:	ldrh	r2, [r4, #164]	; 0xa4
   229f4:	strh	r7, [r4, #132]	; 0x84
   229f8:	ldr	ip, [pc, #128]	; 22a80 <flatcc_builder_start_buffer@@Base+0x188>
   229fc:	strh	r2, [r3, #32]
   22a00:	ldr	r2, [r4, #144]	; 0x90
   22a04:	strh	r6, [r4, #164]	; 0xa4
   22a08:	str	r2, [r3, #20]
   22a0c:	ldr	r2, [r4, #152]	; 0x98
   22a10:	cmp	r5, r0
   22a14:	str	r2, [r3, #28]
   22a18:	ldr	r2, [r4, #148]	; 0x94
   22a1c:	ldr	lr, [r4, #136]	; 0x88
   22a20:	moveq	r5, ip
   22a24:	ldr	ip, [r4, #168]	; 0xa8
   22a28:	add	r6, r2, r1
   22a2c:	str	r2, [r4, #152]	; 0x98
   22a30:	str	r6, [r4, #148]	; 0x94
   22a34:	str	lr, [r4, #144]	; 0x90
   22a38:	str	ip, [r3, #16]
   22a3c:	ldr	r2, [r5]
   22a40:	str	r2, [r4, #168]	; 0xa8
   22a44:	strh	r1, [r3, #14]
   22a48:	add	sp, sp, #8
   22a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22a50:	mov	r1, #4
   22a54:	ldr	r0, [r4, #40]	; 0x28
   22a58:	str	r1, [sp]
   22a5c:	add	r1, r4, #84	; 0x54
   22a60:	ldr	sl, [r4, #48]	; 0x30
   22a64:	blx	sl
   22a68:	cmp	r0, #0
   22a6c:	beq	2295c <flatcc_builder_start_buffer@@Base+0x64>
   22a70:	bl	1285c <__assert_fail@plt+0x1b4>
   22a74:	mvn	r0, #0
   22a78:	b	22a48 <flatcc_builder_start_buffer@@Base+0x150>
   22a7c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   22a80:	andeq	lr, r2, r0, lsr ip

00022a84 <flatcc_builder_end_buffer@@Base>:
   22a84:	ldr	r3, [r0, #32]
   22a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a8c:	sub	sp, sp, #100	; 0x64
   22a90:	ldrh	r5, [r0, #164]	; 0xa4
   22a94:	ldrh	r3, [r3, #14]
   22a98:	ldr	r2, [r0, #152]	; 0x98
   22a9c:	and	r5, r5, #2
   22aa0:	cmp	r2, #0
   22aa4:	orrne	r5, r5, #1
   22aa8:	cmp	r3, #1
   22aac:	bne	22d98 <flatcc_builder_end_buffer@@Base+0x314>
   22ab0:	ldrh	r3, [r0, #132]	; 0x84
   22ab4:	ldrh	r2, [r0, #128]	; 0x80
   22ab8:	mov	r9, r1
   22abc:	mov	r1, #0
   22ac0:	cmp	r3, r2
   22ac4:	movhi	r2, r3
   22ac8:	strhhi	r3, [r0, #128]	; 0x80
   22acc:	cmp	r3, #0
   22ad0:	mov	r4, r0
   22ad4:	str	r1, [sp, #20]
   22ad8:	and	r7, r5, #1
   22adc:	beq	22d44 <flatcc_builder_end_buffer@@Base+0x2c0>
   22ae0:	cmp	r3, #4
   22ae4:	movcc	r6, #4
   22ae8:	movcs	r6, r3
   22aec:	cmp	r6, r2
   22af0:	movcc	r6, r2
   22af4:	cmp	r7, r1
   22af8:	bne	22b60 <flatcc_builder_end_buffer@@Base+0xdc>
   22afc:	ldr	r8, [r0, #140]	; 0x8c
   22b00:	sub	r3, r3, #1
   22b04:	ands	r3, r3, r8
   22b08:	beq	22b60 <flatcc_builder_end_buffer@@Base+0xdc>
   22b0c:	add	r1, r8, r3
   22b10:	ldr	sl, [pc, #748]	; 22e04 <flatcc_builder_end_buffer@@Base+0x380>
   22b14:	mov	r2, #1
   22b18:	cmp	r8, r1
   22b1c:	str	r3, [sp, #24]
   22b20:	str	r3, [sp, #36]	; 0x24
   22b24:	str	sl, [sp, #32]
   22b28:	str	r1, [r0, #140]	; 0x8c
   22b2c:	str	r2, [sp, #28]
   22b30:	bgt	22dec <flatcc_builder_end_buffer@@Base+0x368>
   22b34:	ldr	r0, [r0, #36]	; 0x24
   22b38:	add	r1, sp, #32
   22b3c:	str	r3, [sp]
   22b40:	mov	r3, r8
   22b44:	ldr	fp, [r4, #44]	; 0x2c
   22b48:	blx	fp
   22b4c:	cmp	r0, #0
   22b50:	bne	22df0 <flatcc_builder_end_buffer@@Base+0x36c>
   22b54:	cmn	r8, #1
   22b58:	beq	22dd8 <flatcc_builder_end_buffer@@Base+0x354>
   22b5c:	ldrh	r2, [r4, #128]	; 0x80
   22b60:	ldr	r3, [r4, #168]	; 0xa8
   22b64:	cmp	r2, r6
   22b68:	strhcc	r6, [r4, #128]	; 0x80
   22b6c:	cmp	r3, #0
   22b70:	movne	r1, #4
   22b74:	moveq	r1, #0
   22b78:	ands	r5, r5, #2
   22b7c:	uxtb	ip, r7
   22b80:	str	r3, [sp, #20]
   22b84:	ldr	r0, [r4, #136]	; 0x88
   22b88:	bne	22d54 <flatcc_builder_end_buffer@@Base+0x2d0>
   22b8c:	sub	r3, r6, #1
   22b90:	sub	r6, r0, #4
   22b94:	cmp	ip, #0
   22b98:	sub	r6, r6, r1
   22b9c:	and	r6, r6, r3
   22ba0:	moveq	r8, #3
   22ba4:	moveq	lr, #2
   22ba8:	moveq	r2, #1
   22bac:	moveq	r3, #4
   22bb0:	bne	22d64 <flatcc_builder_end_buffer@@Base+0x2e0>
   22bb4:	add	r5, r5, #1
   22bb8:	add	sl, sp, #96	; 0x60
   22bbc:	add	r5, sl, r5, lsl #3
   22bc0:	add	fp, sp, #12
   22bc4:	mov	sl, #4
   22bc8:	cmp	r1, #0
   22bcc:	str	r3, [sp, #24]
   22bd0:	str	fp, [r5, #-72]	; 0xffffffb8
   22bd4:	str	sl, [r5, #-68]	; 0xffffffbc
   22bd8:	str	r2, [sp, #28]
   22bdc:	beq	22c0c <flatcc_builder_end_buffer@@Base+0x188>
   22be0:	add	r2, r2, #1
   22be4:	add	r5, sp, #96	; 0x60
   22be8:	add	r2, r5, r2, lsl #3
   22bec:	add	r3, r3, r1
   22bf0:	add	r5, sp, #20
   22bf4:	str	r3, [sp, #24]
   22bf8:	str	r1, [r2, #-68]	; 0xffffffbc
   22bfc:	str	r5, [r2, #-72]	; 0xffffffb8
   22c00:	mov	r2, lr
   22c04:	str	lr, [sp, #28]
   22c08:	mov	lr, r8
   22c0c:	cmp	r6, #0
   22c10:	beq	22c3c <flatcc_builder_end_buffer@@Base+0x1b8>
   22c14:	add	r2, r2, #1
   22c18:	add	r1, sp, #96	; 0x60
   22c1c:	add	r1, r1, r2, lsl #3
   22c20:	ldr	r5, [pc, #476]	; 22e04 <flatcc_builder_end_buffer@@Base+0x380>
   22c24:	mov	r2, lr
   22c28:	add	r3, r3, r6
   22c2c:	str	r3, [sp, #24]
   22c30:	str	r6, [r1, #-68]	; 0xffffffbc
   22c34:	str	r5, [r1, #-72]	; 0xffffffb8
   22c38:	str	lr, [sp, #28]
   22c3c:	sub	r5, r0, r3
   22c40:	cmp	ip, #0
   22c44:	mov	r1, r5
   22c48:	beq	22d8c <flatcc_builder_end_buffer@@Base+0x308>
   22c4c:	cmp	r7, #0
   22c50:	add	r1, r5, #4
   22c54:	beq	22d8c <flatcc_builder_end_buffer@@Base+0x308>
   22c58:	ldr	ip, [r4, #144]	; 0x90
   22c5c:	sub	ip, ip, r1
   22c60:	sub	r9, r9, r1
   22c64:	cmp	r5, r0
   22c68:	str	r9, [sp, #12]
   22c6c:	str	ip, [sp, #16]
   22c70:	bge	22dac <flatcc_builder_end_buffer@@Base+0x328>
   22c74:	ldr	r0, [r4, #36]	; 0x24
   22c78:	add	r1, sp, #32
   22c7c:	str	r3, [sp]
   22c80:	mov	r3, r5
   22c84:	ldr	r6, [r4, #44]	; 0x2c
   22c88:	blx	r6
   22c8c:	subs	r1, r0, #0
   22c90:	bne	22db0 <flatcc_builder_end_buffer@@Base+0x32c>
   22c94:	cmp	r5, #0
   22c98:	str	r5, [r4, #136]	; 0x88
   22c9c:	beq	22dc4 <flatcc_builder_end_buffer@@Base+0x340>
   22ca0:	ldr	r3, [r4, #32]
   22ca4:	ldr	r2, [r4, #20]
   22ca8:	ldr	r0, [r4, #16]
   22cac:	ldr	ip, [r3, #20]
   22cb0:	str	ip, [r4, #144]	; 0x90
   22cb4:	ldr	ip, [r3, #28]
   22cb8:	str	ip, [r4, #152]	; 0x98
   22cbc:	ldr	ip, [r3, #16]
   22cc0:	str	ip, [r4, #168]	; 0xa8
   22cc4:	ldrh	r3, [r3, #32]
   22cc8:	strh	r3, [r4, #164]	; 0xa4
   22ccc:	bl	12654 <memset@plt>
   22cd0:	ldr	r3, [r4, #32]
   22cd4:	ldr	r2, [r4, #64]	; 0x40
   22cd8:	ldrh	lr, [r4, #130]	; 0x82
   22cdc:	ldr	ip, [r3]
   22ce0:	ldr	r1, [r3, #4]
   22ce4:	ldrh	r0, [r4, #128]	; 0x80
   22ce8:	sub	r2, r2, ip
   22cec:	cmp	r2, r1
   22cf0:	movcs	r2, r1
   22cf4:	cmp	r0, lr
   22cf8:	ldr	r0, [r4, #60]	; 0x3c
   22cfc:	ldr	r6, [r3, #8]
   22d00:	str	r2, [r4, #24]
   22d04:	add	r2, r0, ip
   22d08:	str	r2, [r4, #16]
   22d0c:	str	r6, [r4, #20]
   22d10:	ldr	r2, [r4, #156]	; 0x9c
   22d14:	str	ip, [r4, #28]
   22d18:	str	r1, [r3, #4]
   22d1c:	strhcc	lr, [r4, #128]	; 0x80
   22d20:	ldrh	r1, [r3, #12]
   22d24:	sub	r2, r2, #1
   22d28:	sub	r3, r3, #36	; 0x24
   22d2c:	mov	r0, r5
   22d30:	str	r2, [r4, #156]	; 0x9c
   22d34:	strh	r1, [r4, #130]	; 0x82
   22d38:	str	r3, [r4, #32]
   22d3c:	add	sp, sp, #100	; 0x64
   22d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d44:	cmp	r2, #4
   22d48:	movcs	r6, r2
   22d4c:	movcc	r6, #4
   22d50:	b	22b60 <flatcc_builder_end_buffer@@Base+0xdc>
   22d54:	sub	r3, r0, #8
   22d58:	sub	r6, r6, #1
   22d5c:	sub	r3, r3, r1
   22d60:	and	r6, r6, r3
   22d64:	add	r3, sp, #16
   22d68:	mov	r8, #4
   22d6c:	mov	r5, #1
   22d70:	str	r3, [sp, #32]
   22d74:	str	r8, [sp, #36]	; 0x24
   22d78:	mov	ip, r5
   22d7c:	mov	lr, #3
   22d80:	mov	r2, #2
   22d84:	mov	r3, #8
   22d88:	b	22bb4 <flatcc_builder_end_buffer@@Base+0x130>
   22d8c:	ldr	ip, [r4, #140]	; 0x8c
   22d90:	sub	ip, ip, r1
   22d94:	b	22c60 <flatcc_builder_end_buffer@@Base+0x1dc>
   22d98:	ldr	r3, [pc, #104]	; 22e08 <flatcc_builder_end_buffer@@Base+0x384>
   22d9c:	ldr	r2, [pc, #104]	; 22e0c <flatcc_builder_end_buffer@@Base+0x388>
   22da0:	ldr	r1, [pc, #104]	; 22e10 <flatcc_builder_end_buffer@@Base+0x38c>
   22da4:	ldr	r0, [pc, #104]	; 22e14 <flatcc_builder_end_buffer@@Base+0x390>
   22da8:	bl	126a8 <__assert_fail@plt>
   22dac:	bl	128a8 <__assert_fail@plt+0x200>
   22db0:	ldr	r3, [pc, #96]	; 22e18 <flatcc_builder_end_buffer@@Base+0x394>
   22db4:	ldr	r2, [pc, #96]	; 22e1c <flatcc_builder_end_buffer@@Base+0x398>
   22db8:	ldr	r1, [pc, #80]	; 22e10 <flatcc_builder_end_buffer@@Base+0x38c>
   22dbc:	ldr	r0, [pc, #92]	; 22e20 <flatcc_builder_end_buffer@@Base+0x39c>
   22dc0:	bl	126a8 <__assert_fail@plt>
   22dc4:	ldr	r3, [pc, #88]	; 22e24 <flatcc_builder_end_buffer@@Base+0x3a0>
   22dc8:	mov	r2, #772	; 0x304
   22dcc:	ldr	r1, [pc, #60]	; 22e10 <flatcc_builder_end_buffer@@Base+0x38c>
   22dd0:	ldr	r0, [pc, #72]	; 22e20 <flatcc_builder_end_buffer@@Base+0x39c>
   22dd4:	bl	126a8 <__assert_fail@plt>
   22dd8:	add	r3, sl, #608	; 0x260
   22ddc:	ldr	r2, [pc, #68]	; 22e28 <flatcc_builder_end_buffer@@Base+0x3a4>
   22de0:	ldr	r1, [pc, #40]	; 22e10 <flatcc_builder_end_buffer@@Base+0x38c>
   22de4:	ldr	r0, [pc, #52]	; 22e20 <flatcc_builder_end_buffer@@Base+0x39c>
   22de8:	bl	126a8 <__assert_fail@plt>
   22dec:	bl	12880 <__assert_fail@plt+0x1d8>
   22df0:	ldr	r3, [pc, #52]	; 22e2c <flatcc_builder_end_buffer@@Base+0x3a8>
   22df4:	ldr	r2, [pc, #52]	; 22e30 <flatcc_builder_end_buffer@@Base+0x3ac>
   22df8:	ldr	r1, [pc, #16]	; 22e10 <flatcc_builder_end_buffer@@Base+0x38c>
   22dfc:	ldr	r0, [pc, #28]	; 22e20 <flatcc_builder_end_buffer@@Base+0x39c>
   22e00:	bl	126a8 <__assert_fail@plt>
   22e04:	andeq	lr, r2, r0, lsr ip
   22e08:	andeq	lr, r2, r0, ror #29
   22e0c:	andeq	r0, r0, r6, asr #6
   22e10:	andeq	pc, r2, r8, ror #5
   22e14:	strdeq	pc, [r2], -ip
   22e18:			; <UNDEFINED> instruction: 0x0002ebb4
   22e1c:	andeq	r0, r0, fp, lsl #5
   22e20:	andeq	pc, r2, r8, lsr #7
   22e24:	andeq	lr, r2, r0, lsr #29
   22e28:			; <UNDEFINED> instruction: 0x000002be
   22e2c:	andeq	lr, r2, r8, lsr #23
   22e30:	andeq	r0, r0, r5, lsr #5

00022e34 <flatcc_builder_start_struct@@Base>:
   22e34:	push	{r4, r5, r6, r7, r8, lr}
   22e38:	mov	r4, r0
   22e3c:	ldr	r0, [r0, #156]	; 0x9c
   22e40:	ldr	r3, [r4, #160]	; 0xa0
   22e44:	mov	r6, r1
   22e48:	add	r1, r0, #1
   22e4c:	cmp	r1, r3
   22e50:	sub	sp, sp, #8
   22e54:	mov	r5, r2
   22e58:	str	r1, [r4, #156]	; 0x9c
   22e5c:	ble	22ecc <flatcc_builder_start_struct@@Base+0x98>
   22e60:	ldr	r3, [r4, #176]	; 0xb0
   22e64:	cmp	r3, #0
   22e68:	cmpgt	r1, r3
   22e6c:	movgt	r3, #1
   22e70:	movle	r3, #0
   22e74:	bgt	22fdc <flatcc_builder_start_struct@@Base+0x1a8>
   22e78:	add	r0, r0, r0, lsl #3
   22e7c:	ldr	r1, [r4, #88]	; 0x58
   22e80:	lsl	r7, r0, #2
   22e84:	add	r2, r7, #36	; 0x24
   22e88:	cmp	r2, r1
   22e8c:	bhi	22fb8 <flatcc_builder_start_struct@@Base+0x184>
   22e90:	ldr	r3, [r4, #84]	; 0x54
   22e94:	add	r3, r3, r7
   22e98:	cmp	r3, #0
   22e9c:	str	r3, [r4, #32]
   22ea0:	beq	22fdc <flatcc_builder_start_struct@@Base+0x1a8>
   22ea4:	ldr	r2, [r4, #88]	; 0x58
   22ea8:	ldr	r0, [pc, #308]	; 22fe4 <flatcc_builder_start_struct@@Base+0x1b0>
   22eac:	ldr	r1, [r4, #176]	; 0xb0
   22eb0:	umull	r0, r2, r0, r2
   22eb4:	lsr	r2, r2, #3
   22eb8:	cmp	r1, #0
   22ebc:	cmpgt	r2, r1
   22ec0:	str	r2, [r4, #160]	; 0xa0
   22ec4:	strgt	r1, [r4, #160]	; 0xa0
   22ec8:	b	22ed8 <flatcc_builder_start_struct@@Base+0xa4>
   22ecc:	ldr	r3, [r4, #32]
   22ed0:	add	r3, r3, #36	; 0x24
   22ed4:	str	r3, [r4, #32]
   22ed8:	ldr	lr, [r4, #20]
   22edc:	ldr	ip, [r4, #28]
   22ee0:	ldr	r1, [r4, #64]	; 0x40
   22ee4:	add	r2, lr, ip
   22ee8:	add	r2, r2, #7
   22eec:	ldrh	r7, [r4, #130]	; 0x82
   22ef0:	bic	r2, r2, #7
   22ef4:	sub	r1, r1, r2
   22ef8:	ldr	r0, [r4, #60]	; 0x3c
   22efc:	cmn	r1, #4
   22f00:	str	lr, [r3, #8]
   22f04:	mvn	lr, #3
   22f08:	strh	r7, [r3, #12]
   22f0c:	movhi	r1, lr
   22f10:	strh	r5, [r4, #130]	; 0x82
   22f14:	str	ip, [r3]
   22f18:	mov	r5, #0
   22f1c:	mov	ip, #2
   22f20:	str	lr, [r3, #4]
   22f24:	add	r0, r0, r2
   22f28:	str	r5, [r4, #20]
   22f2c:	str	r2, [r4, #28]
   22f30:	mvn	r5, #3
   22f34:	strh	ip, [r3, #14]
   22f38:	strls	r1, [r4, #24]
   22f3c:	strhi	lr, [r4, #24]
   22f40:	cmp	r6, r1
   22f44:	str	r0, [r4, #16]
   22f48:	str	r5, [r3, #4]
   22f4c:	str	r6, [r4, #20]
   22f50:	bcs	22f5c <flatcc_builder_start_struct@@Base+0x128>
   22f54:	add	sp, sp, #8
   22f58:	pop	{r4, r5, r6, r7, r8, pc}
   22f5c:	add	r6, r6, #1
   22f60:	mov	r3, #1
   22f64:	ldr	r0, [r4, #40]	; 0x28
   22f68:	add	r2, r6, r2
   22f6c:	str	r3, [sp]
   22f70:	add	r1, r4, #60	; 0x3c
   22f74:	ldr	r6, [r4, #48]	; 0x30
   22f78:	blx	r6
   22f7c:	cmp	r0, #0
   22f80:	bne	22fdc <flatcc_builder_start_struct@@Base+0x1a8>
   22f84:	ldr	r2, [r4, #28]
   22f88:	ldr	r3, [r4, #64]	; 0x40
   22f8c:	ldr	r0, [r4, #60]	; 0x3c
   22f90:	sub	r3, r3, r2
   22f94:	ldr	r1, [r4, #32]
   22f98:	cmp	r3, r5
   22f9c:	add	r0, r0, r2
   22fa0:	movhi	r3, r5
   22fa4:	str	r3, [r4, #24]
   22fa8:	str	r0, [r4, #16]
   22fac:	str	r5, [r1, #4]
   22fb0:	add	sp, sp, #8
   22fb4:	pop	{r4, r5, r6, r7, r8, pc}
   22fb8:	mov	r1, #4
   22fbc:	ldr	r0, [r4, #40]	; 0x28
   22fc0:	str	r1, [sp]
   22fc4:	add	r1, r4, #84	; 0x54
   22fc8:	ldr	r8, [r4, #48]	; 0x30
   22fcc:	blx	r8
   22fd0:	cmp	r0, #0
   22fd4:	beq	22e90 <flatcc_builder_start_struct@@Base+0x5c>
   22fd8:	bl	1285c <__assert_fail@plt+0x1b4>
   22fdc:	mov	r0, #0
   22fe0:	b	22f54 <flatcc_builder_start_struct@@Base+0x120>
   22fe4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00022fe8 <flatcc_builder_struct_edit@@Base>:
   22fe8:	ldr	r0, [r0, #16]
   22fec:	bx	lr

00022ff0 <flatcc_builder_end_struct@@Base>:
   22ff0:	ldr	r3, [r0, #32]
   22ff4:	push	{r4, r5, r6, lr}
   22ff8:	sub	sp, sp, #80	; 0x50
   22ffc:	ldrh	r3, [r3, #14]
   23000:	cmp	r3, #2
   23004:	bne	23190 <flatcc_builder_end_struct@@Base+0x1a0>
   23008:	ldrh	r3, [r0, #130]	; 0x82
   2300c:	mov	r4, r0
   23010:	ldr	r0, [r0, #16]
   23014:	cmp	r3, #0
   23018:	ldr	r1, [r4, #20]
   2301c:	beq	2317c <flatcc_builder_end_struct@@Base+0x18c>
   23020:	ldrh	r2, [r4, #128]	; 0x80
   23024:	ldr	ip, [r4, #136]	; 0x88
   23028:	cmp	r2, r3
   2302c:	strhcc	r3, [r4, #128]	; 0x80
   23030:	mov	r2, #0
   23034:	sub	r3, r3, #1
   23038:	sub	r5, ip, r1
   2303c:	cmp	r1, #0
   23040:	and	r3, r3, r5
   23044:	str	r2, [sp, #8]
   23048:	str	r2, [sp, #12]
   2304c:	bne	2313c <flatcc_builder_end_struct@@Base+0x14c>
   23050:	cmp	r3, #0
   23054:	movne	r2, #1
   23058:	movne	r0, r1
   2305c:	beq	23164 <flatcc_builder_end_struct@@Base+0x174>
   23060:	add	r0, r0, #1
   23064:	add	r5, sp, #80	; 0x50
   23068:	add	r1, r1, r3
   2306c:	add	r0, r5, r0, lsl #3
   23070:	ldr	lr, [pc, #300]	; 231a4 <flatcc_builder_end_struct@@Base+0x1b4>
   23074:	sub	r5, ip, r1
   23078:	str	r3, [r0, #-68]	; 0xffffffbc
   2307c:	str	r1, [sp, #8]
   23080:	str	r2, [sp, #12]
   23084:	str	lr, [r0, #-72]	; 0xffffffb8
   23088:	cmp	ip, r5
   2308c:	ble	23164 <flatcc_builder_end_struct@@Base+0x174>
   23090:	ldr	r0, [r4, #36]	; 0x24
   23094:	mov	r3, r5
   23098:	str	r1, [sp]
   2309c:	add	r1, sp, #16
   230a0:	ldr	r6, [r4, #44]	; 0x2c
   230a4:	blx	r6
   230a8:	subs	r1, r0, #0
   230ac:	bne	23168 <flatcc_builder_end_struct@@Base+0x178>
   230b0:	cmp	r5, #0
   230b4:	str	r5, [r4, #136]	; 0x88
   230b8:	beq	23130 <flatcc_builder_end_struct@@Base+0x140>
   230bc:	ldr	r2, [r4, #20]
   230c0:	ldr	r0, [r4, #16]
   230c4:	bl	12654 <memset@plt>
   230c8:	ldr	r3, [r4, #32]
   230cc:	ldr	r2, [r4, #64]	; 0x40
   230d0:	ldrh	lr, [r4, #130]	; 0x82
   230d4:	ldr	ip, [r3]
   230d8:	ldr	r1, [r3, #4]
   230dc:	ldrh	r0, [r4, #128]	; 0x80
   230e0:	sub	r2, r2, ip
   230e4:	cmp	r2, r1
   230e8:	movcs	r2, r1
   230ec:	cmp	r0, lr
   230f0:	ldr	r0, [r4, #60]	; 0x3c
   230f4:	ldr	r6, [r3, #8]
   230f8:	str	r2, [r4, #24]
   230fc:	add	r2, r0, ip
   23100:	str	r2, [r4, #16]
   23104:	str	r6, [r4, #20]
   23108:	ldr	r2, [r4, #156]	; 0x9c
   2310c:	str	ip, [r4, #28]
   23110:	str	r1, [r3, #4]
   23114:	strhcc	lr, [r4, #128]	; 0x80
   23118:	ldrh	r1, [r3, #12]
   2311c:	sub	r2, r2, #1
   23120:	sub	r3, r3, #36	; 0x24
   23124:	str	r2, [r4, #156]	; 0x9c
   23128:	strh	r1, [r4, #130]	; 0x82
   2312c:	str	r3, [r4, #32]
   23130:	mov	r0, r5
   23134:	add	sp, sp, #80	; 0x50
   23138:	pop	{r4, r5, r6, pc}
   2313c:	cmp	r3, r2
   23140:	mov	r2, #1
   23144:	str	r0, [sp, #16]
   23148:	str	r2, [sp, #12]
   2314c:	movne	r0, r2
   23150:	str	r1, [sp, #8]
   23154:	str	r1, [sp, #20]
   23158:	movne	r2, #2
   2315c:	beq	23088 <flatcc_builder_end_struct@@Base+0x98>
   23160:	b	23060 <flatcc_builder_end_struct@@Base+0x70>
   23164:	bl	128a8 <__assert_fail@plt+0x200>
   23168:	ldr	r3, [pc, #56]	; 231a8 <flatcc_builder_end_struct@@Base+0x1b8>
   2316c:	ldr	r2, [pc, #56]	; 231ac <flatcc_builder_end_struct@@Base+0x1bc>
   23170:	ldr	r1, [pc, #56]	; 231b0 <flatcc_builder_end_struct@@Base+0x1c0>
   23174:	ldr	r0, [pc, #56]	; 231b4 <flatcc_builder_end_struct@@Base+0x1c4>
   23178:	bl	126a8 <__assert_fail@plt>
   2317c:	ldr	r3, [pc, #52]	; 231b8 <flatcc_builder_end_struct@@Base+0x1c8>
   23180:	ldr	r2, [pc, #52]	; 231bc <flatcc_builder_end_struct@@Base+0x1cc>
   23184:	ldr	r1, [pc, #36]	; 231b0 <flatcc_builder_end_struct@@Base+0x1c0>
   23188:	ldr	r0, [pc, #48]	; 231c0 <flatcc_builder_end_struct@@Base+0x1d0>
   2318c:	bl	126a8 <__assert_fail@plt>
   23190:	ldr	r3, [pc, #44]	; 231c4 <flatcc_builder_end_struct@@Base+0x1d4>
   23194:	mov	r2, #872	; 0x368
   23198:	ldr	r1, [pc, #16]	; 231b0 <flatcc_builder_end_struct@@Base+0x1c0>
   2319c:	ldr	r0, [pc, #36]	; 231c8 <flatcc_builder_end_struct@@Base+0x1d8>
   231a0:	bl	126a8 <__assert_fail@plt>
   231a4:	andeq	lr, r2, r0, lsr ip
   231a8:			; <UNDEFINED> instruction: 0x0002ebb4
   231ac:	andeq	r0, r0, fp, lsl #5
   231b0:	andeq	pc, r2, r8, ror #5
   231b4:	andeq	pc, r2, r8, lsr #7
   231b8:	andeq	lr, r2, r0, asr #29
   231bc:	andeq	r0, r0, pc, lsl #6
   231c0:	strdeq	pc, [r2], -r0
   231c4:	strdeq	lr, [r2], -ip
   231c8:	andeq	pc, r2, r8, lsr #8

000231cc <flatcc_builder_extend_vector@@Base>:
   231cc:	ldr	r3, [r0, #32]
   231d0:	push	{r4, r5, r6, r7, lr}
   231d4:	mov	r5, r0
   231d8:	ldr	r0, [r3, #20]
   231dc:	ldr	r4, [r3, #24]
   231e0:	add	ip, r1, r0
   231e4:	cmp	r0, ip
   231e8:	movls	r0, #0
   231ec:	movhi	r0, #1
   231f0:	cmp	r4, ip
   231f4:	movcs	r4, r0
   231f8:	orrcc	r4, r0, #1
   231fc:	cmp	r4, #0
   23200:	sub	sp, sp, #12
   23204:	bne	232a0 <flatcc_builder_extend_vector@@Base+0xd4>
   23208:	ldr	r2, [r3, #16]
   2320c:	str	ip, [r3, #20]
   23210:	ldr	r6, [r5, #20]
   23214:	ldr	r3, [r5, #24]
   23218:	mla	r1, r2, r1, r6
   2321c:	cmp	r1, r3
   23220:	str	r1, [r5, #20]
   23224:	bcs	23238 <flatcc_builder_extend_vector@@Base+0x6c>
   23228:	ldr	r0, [r5, #16]
   2322c:	add	r0, r0, r6
   23230:	add	sp, sp, #12
   23234:	pop	{r4, r5, r6, r7, pc}
   23238:	ldr	r2, [r5, #28]
   2323c:	mov	r3, #1
   23240:	add	r2, r2, #1
   23244:	ldr	r0, [r5, #40]	; 0x28
   23248:	add	r2, r2, r1
   2324c:	str	r3, [sp]
   23250:	add	r1, r5, #60	; 0x3c
   23254:	ldr	r7, [r5, #48]	; 0x30
   23258:	blx	r7
   2325c:	cmp	r0, #0
   23260:	bne	23298 <flatcc_builder_extend_vector@@Base+0xcc>
   23264:	ldr	r2, [r5, #28]
   23268:	ldr	r3, [r5, #64]	; 0x40
   2326c:	ldr	r0, [r5, #60]	; 0x3c
   23270:	sub	r3, r3, r2
   23274:	cmn	r3, #4
   23278:	mvnhi	r3, #3
   2327c:	str	r3, [r5, #24]
   23280:	ldr	r3, [r5, #32]
   23284:	add	r0, r0, r2
   23288:	mvn	r2, #3
   2328c:	str	r0, [r5, #16]
   23290:	str	r2, [r3, #4]
   23294:	b	2322c <flatcc_builder_extend_vector@@Base+0x60>
   23298:	mov	r0, r4
   2329c:	b	23230 <flatcc_builder_extend_vector@@Base+0x64>
   232a0:	bl	128d0 <__assert_fail@plt+0x228>

000232a4 <flatcc_builder_vector_push@@Base>:
   232a4:	ldr	r3, [r0, #32]
   232a8:	push	{r4, r5, r6, r7, r8, lr}
   232ac:	sub	sp, sp, #8
   232b0:	ldrh	r2, [r3, #14]
   232b4:	cmp	r2, #4
   232b8:	bne	233a0 <flatcc_builder_vector_push@@Base+0xfc>
   232bc:	mov	r5, r1
   232c0:	ldr	r2, [r3, #20]
   232c4:	ldr	r1, [r3, #24]
   232c8:	cmp	r2, r1
   232cc:	bhi	2338c <flatcc_builder_vector_push@@Base+0xe8>
   232d0:	add	r2, r2, #1
   232d4:	str	r2, [r3, #20]
   232d8:	ldr	r7, [r3, #16]
   232dc:	ldr	r6, [r0, #20]
   232e0:	ldr	r3, [r0, #24]
   232e4:	add	r1, r7, r6
   232e8:	cmp	r1, r3
   232ec:	mov	r4, r0
   232f0:	str	r1, [r0, #20]
   232f4:	bcs	23324 <flatcc_builder_vector_push@@Base+0x80>
   232f8:	ldr	r3, [r0, #16]
   232fc:	adds	r3, r3, r6
   23300:	beq	23318 <flatcc_builder_vector_push@@Base+0x74>
   23304:	mov	r0, r3
   23308:	mov	r2, r7
   2330c:	mov	r1, r5
   23310:	bl	125ac <memcpy@plt>
   23314:	mov	r3, r0
   23318:	mov	r0, r3
   2331c:	add	sp, sp, #8
   23320:	pop	{r4, r5, r6, r7, r8, pc}
   23324:	ldr	r2, [r0, #28]
   23328:	mov	r3, #1
   2332c:	add	r2, r2, #1
   23330:	ldr	r0, [r0, #40]	; 0x28
   23334:	add	r2, r2, r1
   23338:	str	r3, [sp]
   2333c:	add	r1, r4, #60	; 0x3c
   23340:	ldr	r8, [r4, #48]	; 0x30
   23344:	blx	r8
   23348:	cmp	r0, #0
   2334c:	bne	23384 <flatcc_builder_vector_push@@Base+0xe0>
   23350:	ldr	r1, [r4, #28]
   23354:	ldr	r2, [r4, #64]	; 0x40
   23358:	ldr	r3, [r4, #60]	; 0x3c
   2335c:	sub	r2, r2, r1
   23360:	cmn	r2, #4
   23364:	mvnhi	r2, #3
   23368:	str	r2, [r4, #24]
   2336c:	ldr	r2, [r4, #32]
   23370:	add	r3, r3, r1
   23374:	mvn	r1, #3
   23378:	str	r3, [r4, #16]
   2337c:	str	r1, [r2, #4]
   23380:	b	232fc <flatcc_builder_vector_push@@Base+0x58>
   23384:	mov	r3, #0
   23388:	b	23318 <flatcc_builder_vector_push@@Base+0x74>
   2338c:	ldr	r3, [pc, #32]	; 233b4 <flatcc_builder_vector_push@@Base+0x110>
   23390:	mov	r2, #908	; 0x38c
   23394:	ldr	r1, [pc, #28]	; 233b8 <flatcc_builder_vector_push@@Base+0x114>
   23398:	ldr	r0, [pc, #28]	; 233bc <flatcc_builder_vector_push@@Base+0x118>
   2339c:	bl	126a8 <__assert_fail@plt>
   233a0:	ldr	r3, [pc, #12]	; 233b4 <flatcc_builder_vector_push@@Base+0x110>
   233a4:	ldr	r2, [pc, #20]	; 233c0 <flatcc_builder_vector_push@@Base+0x11c>
   233a8:	ldr	r1, [pc, #8]	; 233b8 <flatcc_builder_vector_push@@Base+0x114>
   233ac:	ldr	r0, [pc, #16]	; 233c4 <flatcc_builder_vector_push@@Base+0x120>
   233b0:	bl	126a8 <__assert_fail@plt>
   233b4:	andeq	lr, r2, r8, lsl pc
   233b8:	andeq	pc, r2, r8, ror #5
   233bc:	andeq	pc, r2, r0, lsl #9
   233c0:	andeq	r0, r0, fp, lsl #7
   233c4:	andeq	pc, r2, r4, asr r4	; <UNPREDICTABLE>

000233c8 <flatcc_builder_append_vector@@Base>:
   233c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   233cc:	mov	r5, r1
   233d0:	ldr	r1, [r0, #32]
   233d4:	sub	sp, sp, #12
   233d8:	ldrh	r3, [r1, #14]
   233dc:	cmp	r3, #4
   233e0:	bne	234d0 <flatcc_builder_append_vector@@Base+0x108>
   233e4:	ldr	r3, [r1, #20]
   233e8:	mov	r6, r0
   233ec:	add	r0, r2, r3
   233f0:	cmp	r3, r0
   233f4:	ldr	r4, [r1, #24]
   233f8:	movls	r3, #0
   233fc:	movhi	r3, #1
   23400:	cmp	r4, r0
   23404:	movcs	r4, r3
   23408:	orrcc	r4, r3, #1
   2340c:	cmp	r4, #0
   23410:	bne	234cc <flatcc_builder_append_vector@@Base+0x104>
   23414:	ldr	r7, [r1, #16]
   23418:	str	r0, [r1, #20]
   2341c:	ldr	r8, [r6, #20]
   23420:	mul	r7, r7, r2
   23424:	ldr	r3, [r6, #24]
   23428:	add	r1, r7, r8
   2342c:	cmp	r1, r3
   23430:	str	r1, [r6, #20]
   23434:	bcs	23464 <flatcc_builder_append_vector@@Base+0x9c>
   23438:	ldr	r3, [r6, #16]
   2343c:	adds	r3, r3, r8
   23440:	beq	23458 <flatcc_builder_append_vector@@Base+0x90>
   23444:	mov	r0, r3
   23448:	mov	r2, r7
   2344c:	mov	r1, r5
   23450:	bl	125ac <memcpy@plt>
   23454:	mov	r3, r0
   23458:	mov	r0, r3
   2345c:	add	sp, sp, #12
   23460:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23464:	ldr	r2, [r6, #28]
   23468:	mov	r3, #1
   2346c:	add	r2, r2, #1
   23470:	ldr	r0, [r6, #40]	; 0x28
   23474:	add	r2, r2, r1
   23478:	str	r3, [sp]
   2347c:	add	r1, r6, #60	; 0x3c
   23480:	ldr	r9, [r6, #48]	; 0x30
   23484:	blx	r9
   23488:	cmp	r0, #0
   2348c:	bne	234c4 <flatcc_builder_append_vector@@Base+0xfc>
   23490:	ldr	r1, [r6, #28]
   23494:	ldr	r2, [r6, #64]	; 0x40
   23498:	ldr	r3, [r6, #60]	; 0x3c
   2349c:	sub	r2, r2, r1
   234a0:	cmn	r2, #4
   234a4:	mvnhi	r2, #3
   234a8:	str	r2, [r6, #24]
   234ac:	ldr	r2, [r6, #32]
   234b0:	add	r3, r3, r1
   234b4:	mvn	r1, #3
   234b8:	str	r3, [r6, #16]
   234bc:	str	r1, [r2, #4]
   234c0:	b	2343c <flatcc_builder_append_vector@@Base+0x74>
   234c4:	mov	r3, r4
   234c8:	b	23458 <flatcc_builder_append_vector@@Base+0x90>
   234cc:	bl	128d0 <__assert_fail@plt+0x228>
   234d0:	ldr	r3, [pc, #12]	; 234e4 <flatcc_builder_append_vector@@Base+0x11c>
   234d4:	ldr	r2, [pc, #12]	; 234e8 <flatcc_builder_append_vector@@Base+0x120>
   234d8:	ldr	r1, [pc, #12]	; 234ec <flatcc_builder_append_vector@@Base+0x124>
   234dc:	ldr	r0, [pc, #12]	; 234f0 <flatcc_builder_append_vector@@Base+0x128>
   234e0:	bl	126a8 <__assert_fail@plt>
   234e4:	andeq	lr, r2, r4, lsr pc
   234e8:	muleq	r0, r3, r3
   234ec:	andeq	pc, r2, r8, ror #5
   234f0:	andeq	pc, r2, r4, asr r4	; <UNPREDICTABLE>

000234f4 <flatcc_builder_extend_offset_vector@@Base>:
   234f4:	ldr	ip, [r0, #32]
   234f8:	push	{r4, r5, r6, r7, lr}
   234fc:	mov	r4, r0
   23500:	ldr	r3, [ip, #20]
   23504:	sub	sp, sp, #12
   23508:	adds	r3, r1, r3
   2350c:	movcs	r2, #1
   23510:	movcc	r2, #0
   23514:	cmn	r3, #-1073741823	; 0xc0000001
   23518:	movls	r0, #0
   2351c:	movhi	r0, #1
   23520:	orrs	r5, r2, r0
   23524:	bne	235bc <flatcc_builder_extend_offset_vector@@Base+0xc8>
   23528:	str	r3, [ip, #20]
   2352c:	ldr	r6, [r4, #20]
   23530:	ldr	r3, [r4, #24]
   23534:	add	r1, r6, r1, lsl #2
   23538:	cmp	r1, r3
   2353c:	str	r1, [r4, #20]
   23540:	bcs	23554 <flatcc_builder_extend_offset_vector@@Base+0x60>
   23544:	ldr	r0, [r4, #16]
   23548:	add	r0, r0, r6
   2354c:	add	sp, sp, #12
   23550:	pop	{r4, r5, r6, r7, pc}
   23554:	ldr	r2, [r4, #28]
   23558:	mov	r3, #1
   2355c:	add	r2, r2, #1
   23560:	ldr	r0, [r4, #40]	; 0x28
   23564:	add	r2, r2, r1
   23568:	str	r3, [sp]
   2356c:	add	r1, r4, #60	; 0x3c
   23570:	ldr	r7, [r4, #48]	; 0x30
   23574:	blx	r7
   23578:	cmp	r0, #0
   2357c:	bne	235b4 <flatcc_builder_extend_offset_vector@@Base+0xc0>
   23580:	ldr	r2, [r4, #28]
   23584:	ldr	r3, [r4, #64]	; 0x40
   23588:	ldr	r0, [r4, #60]	; 0x3c
   2358c:	sub	r3, r3, r2
   23590:	cmn	r3, #4
   23594:	mvnhi	r3, #3
   23598:	str	r3, [r4, #24]
   2359c:	ldr	r3, [r4, #32]
   235a0:	add	r0, r0, r2
   235a4:	mvn	r2, #3
   235a8:	str	r0, [r4, #16]
   235ac:	str	r2, [r3, #4]
   235b0:	b	23548 <flatcc_builder_extend_offset_vector@@Base+0x54>
   235b4:	mov	r0, r5
   235b8:	b	2354c <flatcc_builder_extend_offset_vector@@Base+0x58>
   235bc:	bl	128d0 <__assert_fail@plt+0x228>

000235c0 <flatcc_builder_offset_vector_push@@Base>:
   235c0:	ldr	r2, [r0, #32]
   235c4:	push	{r4, r5, r6, r7, lr}
   235c8:	sub	sp, sp, #12
   235cc:	ldrh	r3, [r2, #14]
   235d0:	cmp	r3, #5
   235d4:	bne	2368c <flatcc_builder_offset_vector_push@@Base+0xcc>
   235d8:	ldr	r3, [r2, #20]
   235dc:	cmn	r3, #-1073741823	; 0xc0000001
   235e0:	beq	23680 <flatcc_builder_offset_vector_push@@Base+0xc0>
   235e4:	add	r3, r3, #1
   235e8:	str	r3, [r2, #20]
   235ec:	ldr	r5, [r0, #20]
   235f0:	ldr	r2, [r0, #24]
   235f4:	add	r3, r5, #4
   235f8:	cmp	r3, r2
   235fc:	mov	r4, r0
   23600:	mov	r6, r1
   23604:	str	r3, [r0, #20]
   23608:	bcs	23620 <flatcc_builder_offset_vector_push@@Base+0x60>
   2360c:	ldr	r3, [r0, #16]
   23610:	adds	r0, r3, r5
   23614:	strne	r6, [r3, r5]
   23618:	add	sp, sp, #12
   2361c:	pop	{r4, r5, r6, r7, pc}
   23620:	ldr	r2, [r0, #28]
   23624:	mov	r3, #1
   23628:	add	r2, r5, r2
   2362c:	ldr	r0, [r0, #40]	; 0x28
   23630:	add	r2, r2, #5
   23634:	str	r3, [sp]
   23638:	add	r1, r4, #60	; 0x3c
   2363c:	ldr	r7, [r4, #48]	; 0x30
   23640:	blx	r7
   23644:	cmp	r0, #0
   23648:	bne	23680 <flatcc_builder_offset_vector_push@@Base+0xc0>
   2364c:	ldr	r1, [r4, #28]
   23650:	ldr	r2, [r4, #64]	; 0x40
   23654:	ldr	r3, [r4, #60]	; 0x3c
   23658:	sub	r2, r2, r1
   2365c:	cmn	r2, #4
   23660:	mvnhi	r2, #3
   23664:	str	r2, [r4, #24]
   23668:	ldr	r2, [r4, #32]
   2366c:	add	r3, r3, r1
   23670:	mvn	r1, #3
   23674:	str	r3, [r4, #16]
   23678:	str	r1, [r2, #4]
   2367c:	b	23610 <flatcc_builder_offset_vector_push@@Base+0x50>
   23680:	mov	r0, #0
   23684:	add	sp, sp, #12
   23688:	pop	{r4, r5, r6, r7, pc}
   2368c:	ldr	r3, [pc, #12]	; 236a0 <flatcc_builder_offset_vector_push@@Base+0xe0>
   23690:	ldr	r2, [pc, #12]	; 236a4 <flatcc_builder_offset_vector_push@@Base+0xe4>
   23694:	ldr	r1, [pc, #12]	; 236a8 <flatcc_builder_offset_vector_push@@Base+0xe8>
   23698:	ldr	r0, [pc, #12]	; 236ac <flatcc_builder_offset_vector_push@@Base+0xec>
   2369c:	bl	126a8 <__assert_fail@plt>
   236a0:	andeq	lr, r2, r4, asr pc
   236a4:	andeq	r0, r0, r6, lsr #7
   236a8:	andeq	pc, r2, r8, ror #5
   236ac:	andeq	pc, r2, r0, asr #9

000236b0 <flatcc_builder_append_offset_vector@@Base>:
   236b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   236b4:	mov	r5, r0
   236b8:	ldr	r0, [r0, #32]
   236bc:	sub	sp, sp, #12
   236c0:	ldrh	r3, [r0, #14]
   236c4:	cmp	r3, #5
   236c8:	bne	237ac <flatcc_builder_append_offset_vector@@Base+0xfc>
   236cc:	mov	r7, r1
   236d0:	ldr	r1, [r0, #20]
   236d4:	adds	r1, r2, r1
   236d8:	movcs	r4, #1
   236dc:	movcc	r4, #0
   236e0:	cmn	r1, #-1073741823	; 0xc0000001
   236e4:	movls	r3, #0
   236e8:	movhi	r3, #1
   236ec:	orrs	r4, r4, r3
   236f0:	bne	237a8 <flatcc_builder_append_offset_vector@@Base+0xf8>
   236f4:	str	r1, [r0, #20]
   236f8:	ldr	r8, [r5, #20]
   236fc:	lsl	r6, r2, #2
   23700:	ldr	r3, [r5, #24]
   23704:	add	r1, r6, r8
   23708:	cmp	r1, r3
   2370c:	str	r1, [r5, #20]
   23710:	bcs	23740 <flatcc_builder_append_offset_vector@@Base+0x90>
   23714:	ldr	r3, [r5, #16]
   23718:	adds	r3, r3, r8
   2371c:	beq	23734 <flatcc_builder_append_offset_vector@@Base+0x84>
   23720:	mov	r0, r3
   23724:	mov	r2, r6
   23728:	mov	r1, r7
   2372c:	bl	125ac <memcpy@plt>
   23730:	mov	r3, r0
   23734:	mov	r0, r3
   23738:	add	sp, sp, #12
   2373c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23740:	ldr	r2, [r5, #28]
   23744:	mov	r3, #1
   23748:	add	r2, r2, #1
   2374c:	ldr	r0, [r5, #40]	; 0x28
   23750:	add	r2, r2, r1
   23754:	str	r3, [sp]
   23758:	add	r1, r5, #60	; 0x3c
   2375c:	ldr	r9, [r5, #48]	; 0x30
   23760:	blx	r9
   23764:	cmp	r0, #0
   23768:	bne	237a0 <flatcc_builder_append_offset_vector@@Base+0xf0>
   2376c:	ldr	r1, [r5, #28]
   23770:	ldr	r2, [r5, #64]	; 0x40
   23774:	ldr	r3, [r5, #60]	; 0x3c
   23778:	sub	r2, r2, r1
   2377c:	cmn	r2, #4
   23780:	mvnhi	r2, #3
   23784:	str	r2, [r5, #24]
   23788:	ldr	r2, [r5, #32]
   2378c:	add	r3, r3, r1
   23790:	mvn	r1, #3
   23794:	str	r3, [r5, #16]
   23798:	str	r1, [r2, #4]
   2379c:	b	23718 <flatcc_builder_append_offset_vector@@Base+0x68>
   237a0:	mov	r3, r4
   237a4:	b	23734 <flatcc_builder_append_offset_vector@@Base+0x84>
   237a8:	bl	128d0 <__assert_fail@plt+0x228>
   237ac:	ldr	r3, [pc, #12]	; 237c0 <flatcc_builder_append_offset_vector@@Base+0x110>
   237b0:	mov	r2, #948	; 0x3b4
   237b4:	ldr	r1, [pc, #8]	; 237c4 <flatcc_builder_append_offset_vector@@Base+0x114>
   237b8:	ldr	r0, [pc, #8]	; 237c8 <flatcc_builder_append_offset_vector@@Base+0x118>
   237bc:	bl	126a8 <__assert_fail@plt>
   237c0:	andeq	lr, r2, r8, ror pc
   237c4:	andeq	pc, r2, r8, ror #5
   237c8:	andeq	pc, r2, r0, asr #9

000237cc <flatcc_builder_extend_string@@Base>:
   237cc:	ldr	r2, [r0, #32]
   237d0:	push	{r4, r5, r6, lr}
   237d4:	sub	sp, sp, #8
   237d8:	ldrh	r3, [r2, #14]
   237dc:	cmp	r3, #6
   237e0:	bne	2388c <flatcc_builder_extend_string@@Base+0xc0>
   237e4:	ldr	r3, [r2, #20]
   237e8:	adds	r3, r1, r3
   237ec:	bcs	23888 <flatcc_builder_extend_string@@Base+0xbc>
   237f0:	str	r3, [r2, #20]
   237f4:	ldr	r5, [r0, #20]
   237f8:	ldr	r3, [r0, #24]
   237fc:	add	r1, r1, r5
   23800:	cmp	r1, r3
   23804:	mov	r4, r0
   23808:	str	r1, [r0, #20]
   2380c:	bcs	23820 <flatcc_builder_extend_string@@Base+0x54>
   23810:	ldr	r0, [r0, #16]
   23814:	add	r0, r0, r5
   23818:	add	sp, sp, #8
   2381c:	pop	{r4, r5, r6, pc}
   23820:	ldr	r2, [r0, #28]
   23824:	mov	r3, #1
   23828:	add	r2, r2, #1
   2382c:	ldr	r0, [r0, #40]	; 0x28
   23830:	add	r2, r2, r1
   23834:	str	r3, [sp]
   23838:	add	r1, r4, #60	; 0x3c
   2383c:	ldr	r6, [r4, #48]	; 0x30
   23840:	blx	r6
   23844:	cmp	r0, #0
   23848:	bne	23880 <flatcc_builder_extend_string@@Base+0xb4>
   2384c:	ldr	r2, [r4, #28]
   23850:	ldr	r3, [r4, #64]	; 0x40
   23854:	ldr	r0, [r4, #60]	; 0x3c
   23858:	sub	r3, r3, r2
   2385c:	cmn	r3, #4
   23860:	mvnhi	r3, #3
   23864:	str	r3, [r4, #24]
   23868:	ldr	r3, [r4, #32]
   2386c:	add	r0, r0, r2
   23870:	mvn	r2, #3
   23874:	str	r0, [r4, #16]
   23878:	str	r2, [r3, #4]
   2387c:	b	23814 <flatcc_builder_extend_string@@Base+0x48>
   23880:	mov	r0, #0
   23884:	b	23818 <flatcc_builder_extend_string@@Base+0x4c>
   23888:	bl	128d0 <__assert_fail@plt+0x228>
   2388c:	ldr	r3, [pc, #12]	; 238a0 <flatcc_builder_extend_string@@Base+0xd4>
   23890:	ldr	r2, [pc, #12]	; 238a4 <flatcc_builder_extend_string@@Base+0xd8>
   23894:	ldr	r1, [pc, #12]	; 238a8 <flatcc_builder_extend_string@@Base+0xdc>
   23898:	ldr	r0, [pc, #12]	; 238ac <flatcc_builder_extend_string@@Base+0xe0>
   2389c:	bl	126a8 <__assert_fail@plt>
   238a0:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   238a4:			; <UNDEFINED> instruction: 0x000003bd
   238a8:	andeq	pc, r2, r8, ror #5
   238ac:	andeq	pc, r2, r8, ror #6

000238b0 <flatcc_builder_append_string@@Base>:
   238b0:	push	{r4, r5, r6, r7, r8, lr}
   238b4:	mov	r6, r1
   238b8:	ldr	r1, [r0, #32]
   238bc:	sub	sp, sp, #8
   238c0:	ldrh	r3, [r1, #14]
   238c4:	cmp	r3, #6
   238c8:	bne	23994 <flatcc_builder_append_string@@Base+0xe4>
   238cc:	ldr	r3, [r1, #20]
   238d0:	mov	r5, r2
   238d4:	adds	r3, r2, r3
   238d8:	bcs	23990 <flatcc_builder_append_string@@Base+0xe0>
   238dc:	str	r3, [r1, #20]
   238e0:	ldr	r7, [r0, #20]
   238e4:	ldr	r3, [r0, #24]
   238e8:	add	r1, r2, r7
   238ec:	cmp	r1, r3
   238f0:	mov	r4, r0
   238f4:	str	r1, [r0, #20]
   238f8:	bcs	23928 <flatcc_builder_append_string@@Base+0x78>
   238fc:	ldr	r3, [r0, #16]
   23900:	adds	r3, r3, r7
   23904:	beq	2391c <flatcc_builder_append_string@@Base+0x6c>
   23908:	mov	r0, r3
   2390c:	mov	r2, r5
   23910:	mov	r1, r6
   23914:	bl	125ac <memcpy@plt>
   23918:	mov	r3, r0
   2391c:	mov	r0, r3
   23920:	add	sp, sp, #8
   23924:	pop	{r4, r5, r6, r7, r8, pc}
   23928:	ldr	r2, [r0, #28]
   2392c:	mov	r3, #1
   23930:	add	r2, r2, #1
   23934:	ldr	r0, [r0, #40]	; 0x28
   23938:	add	r2, r2, r1
   2393c:	str	r3, [sp]
   23940:	add	r1, r4, #60	; 0x3c
   23944:	ldr	r8, [r4, #48]	; 0x30
   23948:	blx	r8
   2394c:	cmp	r0, #0
   23950:	bne	23988 <flatcc_builder_append_string@@Base+0xd8>
   23954:	ldr	r1, [r4, #28]
   23958:	ldr	r2, [r4, #64]	; 0x40
   2395c:	ldr	r3, [r4, #60]	; 0x3c
   23960:	sub	r2, r2, r1
   23964:	cmn	r2, #4
   23968:	mvnhi	r2, #3
   2396c:	str	r2, [r4, #24]
   23970:	ldr	r2, [r4, #32]
   23974:	add	r3, r3, r1
   23978:	mvn	r1, #3
   2397c:	str	r3, [r4, #16]
   23980:	str	r1, [r2, #4]
   23984:	b	23900 <flatcc_builder_append_string@@Base+0x50>
   23988:	mov	r3, #0
   2398c:	b	2391c <flatcc_builder_append_string@@Base+0x6c>
   23990:	bl	128d0 <__assert_fail@plt+0x228>
   23994:	bl	1291c <__assert_fail@plt+0x274>

00023998 <flatcc_builder_append_string_str@@Base>:
   23998:	push	{r4, r5, r6, r7, r8, lr}
   2399c:	mov	r4, r0
   239a0:	sub	sp, sp, #8
   239a4:	mov	r0, r1
   239a8:	mov	r6, r1
   239ac:	bl	12630 <strlen@plt>
   239b0:	ldr	r2, [r4, #32]
   239b4:	ldrh	r3, [r2, #14]
   239b8:	cmp	r3, #6
   239bc:	bne	23a84 <flatcc_builder_append_string_str@@Base+0xec>
   239c0:	ldr	r3, [r2, #20]
   239c4:	mov	r5, r0
   239c8:	adds	r3, r0, r3
   239cc:	bcs	23a80 <flatcc_builder_append_string_str@@Base+0xe8>
   239d0:	str	r3, [r2, #20]
   239d4:	ldr	r7, [r4, #20]
   239d8:	ldr	r3, [r4, #24]
   239dc:	add	r1, r0, r7
   239e0:	cmp	r1, r3
   239e4:	str	r1, [r4, #20]
   239e8:	bcs	23a18 <flatcc_builder_append_string_str@@Base+0x80>
   239ec:	ldr	r3, [r4, #16]
   239f0:	adds	r3, r3, r7
   239f4:	beq	23a0c <flatcc_builder_append_string_str@@Base+0x74>
   239f8:	mov	r0, r3
   239fc:	mov	r2, r5
   23a00:	mov	r1, r6
   23a04:	bl	125ac <memcpy@plt>
   23a08:	mov	r3, r0
   23a0c:	mov	r0, r3
   23a10:	add	sp, sp, #8
   23a14:	pop	{r4, r5, r6, r7, r8, pc}
   23a18:	ldr	r2, [r4, #28]
   23a1c:	mov	r3, #1
   23a20:	add	r2, r2, #1
   23a24:	ldr	r0, [r4, #40]	; 0x28
   23a28:	add	r2, r2, r1
   23a2c:	str	r3, [sp]
   23a30:	add	r1, r4, #60	; 0x3c
   23a34:	ldr	r8, [r4, #48]	; 0x30
   23a38:	blx	r8
   23a3c:	cmp	r0, #0
   23a40:	bne	23a78 <flatcc_builder_append_string_str@@Base+0xe0>
   23a44:	ldr	r1, [r4, #28]
   23a48:	ldr	r2, [r4, #64]	; 0x40
   23a4c:	ldr	r3, [r4, #60]	; 0x3c
   23a50:	sub	r2, r2, r1
   23a54:	cmn	r2, #4
   23a58:	mvnhi	r2, #3
   23a5c:	str	r2, [r4, #24]
   23a60:	ldr	r2, [r4, #32]
   23a64:	add	r3, r3, r1
   23a68:	mvn	r1, #3
   23a6c:	str	r3, [r4, #16]
   23a70:	str	r1, [r2, #4]
   23a74:	b	239f0 <flatcc_builder_append_string_str@@Base+0x58>
   23a78:	mov	r3, #0
   23a7c:	b	23a0c <flatcc_builder_append_string_str@@Base+0x74>
   23a80:	bl	128d0 <__assert_fail@plt+0x228>
   23a84:	bl	1291c <__assert_fail@plt+0x274>

00023a88 <flatcc_builder_append_string_strn@@Base>:
   23a88:	push	{r4, r5, r6, r7, r8, lr}
   23a8c:	mov	r6, r1
   23a90:	mov	r4, r0
   23a94:	sub	sp, sp, #8
   23a98:	mov	r1, #0
   23a9c:	mov	r0, r6
   23aa0:	mov	r5, r2
   23aa4:	bl	1266c <memchr@plt>
   23aa8:	ldr	r2, [r4, #32]
   23aac:	ldrh	r3, [r2, #14]
   23ab0:	cmp	r0, #0
   23ab4:	subne	r5, r0, r6
   23ab8:	cmp	r3, #6
   23abc:	bne	23b80 <flatcc_builder_append_string_strn@@Base+0xf8>
   23ac0:	ldr	r3, [r2, #20]
   23ac4:	adds	r3, r5, r3
   23ac8:	bcs	23b7c <flatcc_builder_append_string_strn@@Base+0xf4>
   23acc:	str	r3, [r2, #20]
   23ad0:	ldr	r7, [r4, #20]
   23ad4:	ldr	r3, [r4, #24]
   23ad8:	add	r1, r5, r7
   23adc:	cmp	r1, r3
   23ae0:	str	r1, [r4, #20]
   23ae4:	bcs	23b14 <flatcc_builder_append_string_strn@@Base+0x8c>
   23ae8:	ldr	r3, [r4, #16]
   23aec:	adds	r3, r3, r7
   23af0:	beq	23b08 <flatcc_builder_append_string_strn@@Base+0x80>
   23af4:	mov	r0, r3
   23af8:	mov	r2, r5
   23afc:	mov	r1, r6
   23b00:	bl	125ac <memcpy@plt>
   23b04:	mov	r3, r0
   23b08:	mov	r0, r3
   23b0c:	add	sp, sp, #8
   23b10:	pop	{r4, r5, r6, r7, r8, pc}
   23b14:	ldr	r2, [r4, #28]
   23b18:	mov	r3, #1
   23b1c:	add	r2, r2, #1
   23b20:	ldr	r0, [r4, #40]	; 0x28
   23b24:	add	r2, r2, r1
   23b28:	str	r3, [sp]
   23b2c:	add	r1, r4, #60	; 0x3c
   23b30:	ldr	r8, [r4, #48]	; 0x30
   23b34:	blx	r8
   23b38:	cmp	r0, #0
   23b3c:	bne	23b74 <flatcc_builder_append_string_strn@@Base+0xec>
   23b40:	ldr	r1, [r4, #28]
   23b44:	ldr	r2, [r4, #64]	; 0x40
   23b48:	ldr	r3, [r4, #60]	; 0x3c
   23b4c:	sub	r2, r2, r1
   23b50:	cmn	r2, #4
   23b54:	mvnhi	r2, #3
   23b58:	str	r2, [r4, #24]
   23b5c:	ldr	r2, [r4, #32]
   23b60:	add	r3, r3, r1
   23b64:	mvn	r1, #3
   23b68:	str	r3, [r4, #16]
   23b6c:	str	r1, [r2, #4]
   23b70:	b	23aec <flatcc_builder_append_string_strn@@Base+0x64>
   23b74:	mov	r3, #0
   23b78:	b	23b08 <flatcc_builder_append_string_strn@@Base+0x80>
   23b7c:	bl	128d0 <__assert_fail@plt+0x228>
   23b80:	bl	1291c <__assert_fail@plt+0x274>

00023b84 <flatcc_builder_truncate_vector@@Base>:
   23b84:	ldr	r3, [r0, #32]
   23b88:	push	{r4, lr}
   23b8c:	ldrh	r2, [r3, #14]
   23b90:	cmp	r2, #4
   23b94:	bne	23bd8 <flatcc_builder_truncate_vector@@Base+0x54>
   23b98:	ldr	ip, [r3, #20]
   23b9c:	cmp	ip, r1
   23ba0:	bcc	23bec <flatcc_builder_truncate_vector@@Base+0x68>
   23ba4:	ldr	r2, [r3, #16]
   23ba8:	sub	ip, ip, r1
   23bac:	str	ip, [r3, #20]
   23bb0:	mul	r2, r2, r1
   23bb4:	ldr	r3, [r0, #20]
   23bb8:	ldr	r1, [r0, #16]
   23bbc:	sub	r3, r3, r2
   23bc0:	str	r3, [r0, #20]
   23bc4:	add	r0, r1, r3
   23bc8:	mov	r1, #0
   23bcc:	bl	12654 <memset@plt>
   23bd0:	mov	r0, #0
   23bd4:	pop	{r4, pc}
   23bd8:	ldr	r3, [pc, #32]	; 23c00 <flatcc_builder_truncate_vector@@Base+0x7c>
   23bdc:	ldr	r2, [pc, #32]	; 23c04 <flatcc_builder_truncate_vector@@Base+0x80>
   23be0:	ldr	r1, [pc, #32]	; 23c08 <flatcc_builder_truncate_vector@@Base+0x84>
   23be4:	ldr	r0, [pc, #32]	; 23c0c <flatcc_builder_truncate_vector@@Base+0x88>
   23be8:	bl	126a8 <__assert_fail@plt>
   23bec:	ldr	r3, [pc, #12]	; 23c00 <flatcc_builder_truncate_vector@@Base+0x7c>
   23bf0:	ldr	r2, [pc, #24]	; 23c10 <flatcc_builder_truncate_vector@@Base+0x8c>
   23bf4:	ldr	r1, [pc, #12]	; 23c08 <flatcc_builder_truncate_vector@@Base+0x84>
   23bf8:	ldr	r0, [pc, #20]	; 23c14 <flatcc_builder_truncate_vector@@Base+0x90>
   23bfc:	bl	126a8 <__assert_fail@plt>
   23c00:			; <UNDEFINED> instruction: 0x0002efbc
   23c04:	ldrdeq	r0, [r0], -r9
   23c08:	andeq	pc, r2, r8, ror #5
   23c0c:	andeq	pc, r2, r4, asr r4	; <UNPREDICTABLE>
   23c10:	ldrdeq	r0, [r0], -sl
   23c14:	strdeq	pc, [r2], -r4

00023c18 <flatcc_builder_truncate_offset_vector@@Base>:
   23c18:	ldr	r3, [r0, #32]
   23c1c:	push	{r4, lr}
   23c20:	ldrh	r2, [r3, #14]
   23c24:	cmp	r2, #5
   23c28:	bne	23c6c <flatcc_builder_truncate_offset_vector@@Base+0x54>
   23c2c:	ldr	ip, [r3, #20]
   23c30:	cmp	ip, r1
   23c34:	bcc	23c80 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   23c38:	ldr	r2, [r3, #16]
   23c3c:	sub	ip, ip, r1
   23c40:	str	ip, [r3, #20]
   23c44:	mul	r2, r2, r1
   23c48:	ldr	r3, [r0, #20]
   23c4c:	ldr	r1, [r0, #16]
   23c50:	sub	r3, r3, r2
   23c54:	str	r3, [r0, #20]
   23c58:	add	r0, r1, r3
   23c5c:	mov	r1, #0
   23c60:	bl	12654 <memset@plt>
   23c64:	mov	r0, #0
   23c68:	pop	{r4, pc}
   23c6c:	ldr	r3, [pc, #32]	; 23c94 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   23c70:	ldr	r2, [pc, #32]	; 23c98 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   23c74:	ldr	r1, [pc, #32]	; 23c9c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   23c78:	ldr	r0, [pc, #32]	; 23ca0 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   23c7c:	bl	126a8 <__assert_fail@plt>
   23c80:	ldr	r3, [pc, #12]	; 23c94 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   23c84:	ldr	r2, [pc, #24]	; 23ca4 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   23c88:	ldr	r1, [pc, #12]	; 23c9c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   23c8c:	ldr	r0, [pc, #20]	; 23ca8 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   23c90:	bl	126a8 <__assert_fail@plt>
   23c94:	ldrdeq	lr, [r2], -ip
   23c98:	andeq	r0, r0, r2, ror #7
   23c9c:	andeq	pc, r2, r8, ror #5
   23ca0:	andeq	pc, r2, r0, asr #9
   23ca4:	andeq	r0, r0, r3, ror #7
   23ca8:	andeq	pc, r2, r8, lsl r5	; <UNPREDICTABLE>

00023cac <flatcc_builder_truncate_string@@Base>:
   23cac:	ldr	r2, [r0, #32]
   23cb0:	push	{r4, lr}
   23cb4:	ldrh	r3, [r2, #14]
   23cb8:	cmp	r3, #6
   23cbc:	bne	23cfc <flatcc_builder_truncate_string@@Base+0x50>
   23cc0:	ldr	r3, [r2, #20]
   23cc4:	cmp	r3, r1
   23cc8:	bcc	23d10 <flatcc_builder_truncate_string@@Base+0x64>
   23ccc:	sub	r3, r3, r1
   23cd0:	str	r3, [r2, #20]
   23cd4:	ldr	r3, [r0, #20]
   23cd8:	ldr	r2, [r0, #16]
   23cdc:	sub	r3, r3, r1
   23ce0:	str	r3, [r0, #20]
   23ce4:	add	r0, r2, r3
   23ce8:	mov	r2, r1
   23cec:	mov	r1, #0
   23cf0:	bl	12654 <memset@plt>
   23cf4:	mov	r0, #0
   23cf8:	pop	{r4, pc}
   23cfc:	ldr	r3, [pc, #32]	; 23d24 <flatcc_builder_truncate_string@@Base+0x78>
   23d00:	ldr	r2, [pc, #32]	; 23d28 <flatcc_builder_truncate_string@@Base+0x7c>
   23d04:	ldr	r1, [pc, #32]	; 23d2c <flatcc_builder_truncate_string@@Base+0x80>
   23d08:	ldr	r0, [pc, #32]	; 23d30 <flatcc_builder_truncate_string@@Base+0x84>
   23d0c:	bl	126a8 <__assert_fail@plt>
   23d10:	ldr	r3, [pc, #12]	; 23d24 <flatcc_builder_truncate_string@@Base+0x78>
   23d14:	mov	r2, #1004	; 0x3ec
   23d18:	ldr	r1, [pc, #12]	; 23d2c <flatcc_builder_truncate_string@@Base+0x80>
   23d1c:	ldr	r0, [pc, #16]	; 23d34 <flatcc_builder_truncate_string@@Base+0x88>
   23d20:	bl	126a8 <__assert_fail@plt>
   23d24:	andeq	pc, r2, r4
   23d28:	andeq	r0, r0, fp, ror #7
   23d2c:	andeq	pc, r2, r8, ror #5
   23d30:	andeq	pc, r2, r8, ror #6
   23d34:	andeq	pc, r2, r4, asr r5	; <UNPREDICTABLE>

00023d38 <flatcc_builder_start_vector@@Base>:
   23d38:	ldr	ip, [r0, #156]	; 0x9c
   23d3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   23d40:	cmp	r2, #4
   23d44:	ldr	lr, [r0, #160]	; 0xa0
   23d48:	mov	r4, r0
   23d4c:	add	r0, ip, #1
   23d50:	movcs	r7, r2
   23d54:	movcc	r7, #4
   23d58:	cmp	r0, lr
   23d5c:	sub	sp, sp, #12
   23d60:	mov	r6, r1
   23d64:	mov	r5, r3
   23d68:	str	r0, [r4, #156]	; 0x9c
   23d6c:	ble	23ddc <flatcc_builder_start_vector@@Base+0xa4>
   23d70:	ldr	r3, [r4, #176]	; 0xb0
   23d74:	cmp	r3, #0
   23d78:	cmpgt	r0, r3
   23d7c:	movgt	r3, #1
   23d80:	movle	r3, #0
   23d84:	bgt	23e84 <flatcc_builder_start_vector@@Base+0x14c>
   23d88:	add	ip, ip, ip, lsl #3
   23d8c:	ldr	r1, [r4, #88]	; 0x58
   23d90:	lsl	r8, ip, #2
   23d94:	add	r2, r8, #36	; 0x24
   23d98:	cmp	r2, r1
   23d9c:	bhi	23e60 <flatcc_builder_start_vector@@Base+0x128>
   23da0:	ldr	r3, [r4, #84]	; 0x54
   23da4:	add	r3, r3, r8
   23da8:	cmp	r3, #0
   23dac:	str	r3, [r4, #32]
   23db0:	beq	23e84 <flatcc_builder_start_vector@@Base+0x14c>
   23db4:	ldr	r2, [r4, #88]	; 0x58
   23db8:	ldr	r0, [pc, #204]	; 23e8c <flatcc_builder_start_vector@@Base+0x154>
   23dbc:	ldr	r1, [r4, #176]	; 0xb0
   23dc0:	umull	r0, r2, r0, r2
   23dc4:	lsr	r2, r2, #3
   23dc8:	cmp	r1, #0
   23dcc:	cmpgt	r2, r1
   23dd0:	str	r2, [r4, #160]	; 0xa0
   23dd4:	strgt	r1, [r4, #160]	; 0xa0
   23dd8:	b	23de8 <flatcc_builder_start_vector@@Base+0xb0>
   23ddc:	ldr	r3, [r4, #32]
   23de0:	add	r3, r3, #36	; 0x24
   23de4:	str	r3, [r4, #32]
   23de8:	ldr	r0, [r4, #20]
   23dec:	ldr	r1, [r4, #28]
   23df0:	ldrh	ip, [r4, #130]	; 0x82
   23df4:	add	r2, r0, r1
   23df8:	add	r2, r2, #7
   23dfc:	str	r0, [r3, #8]
   23e00:	bic	r2, r2, #7
   23e04:	mov	r0, #0
   23e08:	strh	ip, [r3, #12]
   23e0c:	strh	r7, [r4, #130]	; 0x82
   23e10:	str	r1, [r3]
   23e14:	str	r2, [r4, #28]
   23e18:	str	r0, [r4, #20]
   23e1c:	str	r0, [r3, #20]
   23e20:	str	r6, [r3, #16]
   23e24:	str	r5, [r3, #24]
   23e28:	ldr	r1, [r4, #64]	; 0x40
   23e2c:	ldr	ip, [r4, #60]	; 0x3c
   23e30:	sub	r1, r1, r2
   23e34:	mvn	lr, #3
   23e38:	cmp	r1, lr
   23e3c:	add	r2, ip, r2
   23e40:	movhi	r1, lr
   23e44:	mov	ip, #4
   23e48:	strh	ip, [r3, #14]
   23e4c:	str	r2, [r4, #16]
   23e50:	str	r1, [r4, #24]
   23e54:	str	lr, [r3, #4]
   23e58:	add	sp, sp, #12
   23e5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23e60:	mov	r1, #4
   23e64:	ldr	r0, [r4, #40]	; 0x28
   23e68:	str	r1, [sp]
   23e6c:	add	r1, r4, #84	; 0x54
   23e70:	ldr	r9, [r4, #48]	; 0x30
   23e74:	blx	r9
   23e78:	cmp	r0, #0
   23e7c:	beq	23da0 <flatcc_builder_start_vector@@Base+0x68>
   23e80:	bl	1285c <__assert_fail@plt+0x1b4>
   23e84:	mvn	r0, #0
   23e88:	b	23e58 <flatcc_builder_start_vector@@Base+0x120>
   23e8c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00023e90 <flatcc_builder_start_offset_vector@@Base>:
   23e90:	ldr	r1, [r0, #156]	; 0x9c
   23e94:	ldr	r3, [r0, #160]	; 0xa0
   23e98:	add	r2, r1, #1
   23e9c:	cmp	r2, r3
   23ea0:	push	{r4, r5, r6, lr}
   23ea4:	mov	r4, r0
   23ea8:	sub	sp, sp, #8
   23eac:	str	r2, [r0, #156]	; 0x9c
   23eb0:	ble	23f20 <flatcc_builder_start_offset_vector@@Base+0x90>
   23eb4:	ldr	r3, [r0, #176]	; 0xb0
   23eb8:	cmp	r3, #0
   23ebc:	cmpgt	r2, r3
   23ec0:	movgt	r3, #1
   23ec4:	movle	r3, #0
   23ec8:	bgt	23fc8 <flatcc_builder_start_offset_vector@@Base+0x138>
   23ecc:	add	r1, r1, r1, lsl #3
   23ed0:	ldr	r0, [r0, #88]	; 0x58
   23ed4:	lsl	r5, r1, #2
   23ed8:	add	r2, r5, #36	; 0x24
   23edc:	cmp	r2, r0
   23ee0:	bhi	23fa4 <flatcc_builder_start_offset_vector@@Base+0x114>
   23ee4:	ldr	r3, [r4, #84]	; 0x54
   23ee8:	add	r3, r3, r5
   23eec:	cmp	r3, #0
   23ef0:	str	r3, [r4, #32]
   23ef4:	beq	23fc8 <flatcc_builder_start_offset_vector@@Base+0x138>
   23ef8:	ldr	r2, [r4, #88]	; 0x58
   23efc:	ldr	r0, [pc, #204]	; 23fd0 <flatcc_builder_start_offset_vector@@Base+0x140>
   23f00:	ldr	r1, [r4, #176]	; 0xb0
   23f04:	umull	r0, r2, r0, r2
   23f08:	lsr	r2, r2, #3
   23f0c:	cmp	r1, #0
   23f10:	cmpgt	r2, r1
   23f14:	str	r2, [r4, #160]	; 0xa0
   23f18:	strgt	r1, [r4, #160]	; 0xa0
   23f1c:	b	23f2c <flatcc_builder_start_offset_vector@@Base+0x9c>
   23f20:	ldr	r3, [r0, #32]
   23f24:	add	r3, r3, #36	; 0x24
   23f28:	str	r3, [r0, #32]
   23f2c:	ldr	lr, [r4, #20]
   23f30:	ldr	ip, [r4, #28]
   23f34:	ldrh	r5, [r4, #130]	; 0x82
   23f38:	add	r2, lr, ip
   23f3c:	add	r2, r2, #7
   23f40:	bic	r2, r2, #7
   23f44:	mov	r1, #4
   23f48:	mov	r0, #0
   23f4c:	str	lr, [r3, #8]
   23f50:	strh	r5, [r3, #12]
   23f54:	strh	r1, [r4, #130]	; 0x82
   23f58:	str	ip, [r3]
   23f5c:	str	r2, [r4, #28]
   23f60:	str	r0, [r4, #20]
   23f64:	str	r1, [r3, #16]
   23f68:	str	r0, [r3, #20]
   23f6c:	ldr	r1, [r4, #64]	; 0x40
   23f70:	ldr	ip, [r4, #60]	; 0x3c
   23f74:	sub	r1, r1, r2
   23f78:	mvn	lr, #3
   23f7c:	cmp	r1, lr
   23f80:	add	r2, ip, r2
   23f84:	movhi	r1, lr
   23f88:	mov	ip, #5
   23f8c:	strh	ip, [r3, #14]
   23f90:	str	r2, [r4, #16]
   23f94:	str	r1, [r4, #24]
   23f98:	str	lr, [r3, #4]
   23f9c:	add	sp, sp, #8
   23fa0:	pop	{r4, r5, r6, pc}
   23fa4:	mov	r1, #4
   23fa8:	ldr	r0, [r4, #40]	; 0x28
   23fac:	str	r1, [sp]
   23fb0:	add	r1, r4, #84	; 0x54
   23fb4:	ldr	r6, [r4, #48]	; 0x30
   23fb8:	blx	r6
   23fbc:	cmp	r0, #0
   23fc0:	beq	23ee4 <flatcc_builder_start_offset_vector@@Base+0x54>
   23fc4:	bl	1285c <__assert_fail@plt+0x1b4>
   23fc8:	mvn	r0, #0
   23fcc:	b	23f9c <flatcc_builder_start_offset_vector@@Base+0x10c>
   23fd0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00023fd4 <flatcc_builder_create_offset_vector@@Base>:
   23fd4:	push	{r4, r5, r6, r7, r8, lr}
   23fd8:	mov	r4, r0
   23fdc:	ldr	r0, [r0, #156]	; 0x9c
   23fe0:	ldr	r3, [r4, #160]	; 0xa0
   23fe4:	mov	r7, r1
   23fe8:	add	r1, r0, #1
   23fec:	cmp	r1, r3
   23ff0:	sub	sp, sp, #8
   23ff4:	mov	r5, r2
   23ff8:	str	r1, [r4, #156]	; 0x9c
   23ffc:	ble	2406c <flatcc_builder_create_offset_vector@@Base+0x98>
   24000:	ldr	r3, [r4, #176]	; 0xb0
   24004:	cmp	r1, r3
   24008:	cmpgt	r3, #0
   2400c:	movgt	r3, #1
   24010:	movle	r3, #0
   24014:	bgt	2413c <flatcc_builder_create_offset_vector@@Base+0x168>
   24018:	add	r0, r0, r0, lsl #3
   2401c:	ldr	r1, [r4, #88]	; 0x58
   24020:	lsl	r6, r0, #2
   24024:	add	r2, r6, #36	; 0x24
   24028:	cmp	r2, r1
   2402c:	bhi	241a4 <flatcc_builder_create_offset_vector@@Base+0x1d0>
   24030:	ldr	r3, [r4, #84]	; 0x54
   24034:	add	r3, r3, r6
   24038:	cmp	r3, #0
   2403c:	str	r3, [r4, #32]
   24040:	beq	2413c <flatcc_builder_create_offset_vector@@Base+0x168>
   24044:	ldr	r2, [r4, #88]	; 0x58
   24048:	ldr	r0, [pc, #552]	; 24278 <flatcc_builder_create_offset_vector@@Base+0x2a4>
   2404c:	ldr	r1, [r4, #176]	; 0xb0
   24050:	umull	r0, r2, r0, r2
   24054:	lsr	r2, r2, #3
   24058:	cmp	r1, #0
   2405c:	cmpgt	r2, r1
   24060:	str	r2, [r4, #160]	; 0xa0
   24064:	strgt	r1, [r4, #160]	; 0xa0
   24068:	b	24078 <flatcc_builder_create_offset_vector@@Base+0xa4>
   2406c:	ldr	r3, [r4, #32]
   24070:	add	r3, r3, #36	; 0x24
   24074:	str	r3, [r4, #32]
   24078:	ldr	r2, [r4, #20]
   2407c:	ldr	ip, [r4, #28]
   24080:	ldrh	r6, [r4, #130]	; 0x82
   24084:	add	r1, r2, ip
   24088:	mvn	lr, #3
   2408c:	add	r1, r1, #7
   24090:	str	r2, [r3, #8]
   24094:	bic	r1, r1, #7
   24098:	mov	r0, #4
   2409c:	mov	r2, #0
   240a0:	strh	r6, [r3, #12]
   240a4:	strh	r0, [r4, #130]	; 0x82
   240a8:	stm	r3, {ip, lr}
   240ac:	str	r2, [r4, #20]
   240b0:	str	r1, [r4, #28]
   240b4:	str	r0, [r3, #16]
   240b8:	str	r2, [r3, #20]
   240bc:	ldr	r2, [r4, #64]	; 0x40
   240c0:	ldr	r0, [r4, #60]	; 0x3c
   240c4:	sub	r2, r2, r1
   240c8:	cmp	r2, lr
   240cc:	mov	ip, #5
   240d0:	strh	ip, [r3, #14]
   240d4:	add	r0, r0, r1
   240d8:	strls	r2, [r4, #24]
   240dc:	strhi	lr, [r4, #24]
   240e0:	movhi	r2, lr
   240e4:	mvn	r6, #3
   240e8:	cmn	r5, #-1073741823	; 0xc0000001
   240ec:	str	r0, [r4, #16]
   240f0:	str	r6, [r3, #4]
   240f4:	bhi	24260 <flatcc_builder_create_offset_vector@@Base+0x28c>
   240f8:	lsl	r8, r5, #2
   240fc:	cmp	r8, r2
   24100:	str	r5, [r3, #20]
   24104:	str	r8, [r4, #20]
   24108:	bcs	2414c <flatcc_builder_create_offset_vector@@Base+0x178>
   2410c:	cmp	r0, #0
   24110:	beq	2413c <flatcc_builder_create_offset_vector@@Base+0x168>
   24114:	mov	r2, r8
   24118:	mov	r1, r7
   2411c:	bl	125ac <memcpy@plt>
   24120:	ldr	r3, [r4, #32]
   24124:	ldrh	r2, [r3, #14]
   24128:	cmp	r2, #5
   2412c:	bne	24264 <flatcc_builder_create_offset_vector@@Base+0x290>
   24130:	ldr	r2, [r3, #20]
   24134:	cmn	r2, #-1073741823	; 0xc0000001
   24138:	bls	241c8 <flatcc_builder_create_offset_vector@@Base+0x1f4>
   2413c:	mov	r5, #0
   24140:	mov	r0, r5
   24144:	add	sp, sp, #8
   24148:	pop	{r4, r5, r6, r7, r8, pc}
   2414c:	mov	r3, #1
   24150:	add	r2, r8, #1
   24154:	ldr	r0, [r4, #40]	; 0x28
   24158:	add	r2, r2, r1
   2415c:	str	r3, [sp]
   24160:	add	r1, r4, #60	; 0x3c
   24164:	ldr	r5, [r4, #48]	; 0x30
   24168:	blx	r5
   2416c:	cmp	r0, #0
   24170:	bne	2413c <flatcc_builder_create_offset_vector@@Base+0x168>
   24174:	ldr	r2, [r4, #28]
   24178:	ldr	r3, [r4, #64]	; 0x40
   2417c:	ldr	r0, [r4, #60]	; 0x3c
   24180:	sub	r3, r3, r2
   24184:	ldr	r1, [r4, #32]
   24188:	cmn	r3, #4
   2418c:	movhi	r3, r6
   24190:	add	r0, r0, r2
   24194:	str	r3, [r4, #24]
   24198:	str	r0, [r4, #16]
   2419c:	str	r6, [r1, #4]
   241a0:	b	2410c <flatcc_builder_create_offset_vector@@Base+0x138>
   241a4:	mov	r1, #4
   241a8:	ldr	r0, [r4, #40]	; 0x28
   241ac:	str	r1, [sp]
   241b0:	add	r1, r4, #84	; 0x54
   241b4:	ldr	r8, [r4, #48]	; 0x30
   241b8:	blx	r8
   241bc:	cmp	r0, #0
   241c0:	beq	24030 <flatcc_builder_create_offset_vector@@Base+0x5c>
   241c4:	bl	1285c <__assert_fail@plt+0x1b4>
   241c8:	ldr	r1, [r4, #16]
   241cc:	mov	r0, r4
   241d0:	bl	21bf8 <flatcc_builder_default_alloc@@Base+0x2fc>
   241d4:	subs	r5, r0, #0
   241d8:	beq	2413c <flatcc_builder_create_offset_vector@@Base+0x168>
   241dc:	ldr	r2, [r4, #20]
   241e0:	mov	r1, #0
   241e4:	ldr	r0, [r4, #16]
   241e8:	bl	12654 <memset@plt>
   241ec:	ldr	r3, [r4, #32]
   241f0:	ldr	r2, [r4, #64]	; 0x40
   241f4:	ldrh	lr, [r4, #130]	; 0x82
   241f8:	ldr	ip, [r3]
   241fc:	ldr	r1, [r3, #4]
   24200:	ldrh	r0, [r4, #128]	; 0x80
   24204:	sub	r2, r2, ip
   24208:	cmp	r2, r1
   2420c:	movcs	r2, r1
   24210:	cmp	r0, lr
   24214:	ldr	r0, [r4, #60]	; 0x3c
   24218:	ldr	r6, [r3, #8]
   2421c:	str	r2, [r4, #24]
   24220:	add	r2, r0, ip
   24224:	str	r2, [r4, #16]
   24228:	str	r6, [r4, #20]
   2422c:	ldr	r2, [r4, #156]	; 0x9c
   24230:	str	ip, [r4, #28]
   24234:	str	r1, [r3, #4]
   24238:	strhcc	lr, [r4, #128]	; 0x80
   2423c:	ldrh	r1, [r3, #12]
   24240:	sub	r2, r2, #1
   24244:	sub	r3, r3, #36	; 0x24
   24248:	mov	r0, r5
   2424c:	str	r2, [r4, #156]	; 0x9c
   24250:	strh	r1, [r4, #130]	; 0x82
   24254:	str	r3, [r4, #32]
   24258:	add	sp, sp, #8
   2425c:	pop	{r4, r5, r6, r7, r8, pc}
   24260:	bl	128d0 <__assert_fail@plt+0x228>
   24264:	ldr	r3, [pc, #16]	; 2427c <flatcc_builder_create_offset_vector@@Base+0x2a8>
   24268:	ldr	r2, [pc, #16]	; 24280 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   2426c:	ldr	r1, [pc, #16]	; 24284 <flatcc_builder_create_offset_vector@@Base+0x2b0>
   24270:	ldr	r0, [pc, #16]	; 24288 <flatcc_builder_create_offset_vector@@Base+0x2b4>
   24274:	bl	126a8 <__assert_fail@plt>
   24278:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   2427c:	andeq	pc, r2, r4, lsr #32
   24280:	andeq	r0, r0, r8, asr #11
   24284:	andeq	pc, r2, r8, ror #5
   24288:	andeq	pc, r2, r0, asr #9

0002428c <flatcc_builder_start_string@@Base>:
   2428c:	ldr	r1, [r0, #156]	; 0x9c
   24290:	ldr	r3, [r0, #160]	; 0xa0
   24294:	add	r2, r1, #1
   24298:	cmp	r2, r3
   2429c:	push	{r4, r5, r6, lr}
   242a0:	mov	r4, r0
   242a4:	sub	sp, sp, #8
   242a8:	str	r2, [r0, #156]	; 0x9c
   242ac:	ble	2431c <flatcc_builder_start_string@@Base+0x90>
   242b0:	ldr	r3, [r0, #176]	; 0xb0
   242b4:	cmp	r3, #0
   242b8:	cmpgt	r2, r3
   242bc:	movgt	r3, #1
   242c0:	movle	r3, #0
   242c4:	bgt	243c4 <flatcc_builder_start_string@@Base+0x138>
   242c8:	add	r1, r1, r1, lsl #3
   242cc:	ldr	r0, [r0, #88]	; 0x58
   242d0:	lsl	r5, r1, #2
   242d4:	add	r2, r5, #36	; 0x24
   242d8:	cmp	r2, r0
   242dc:	bhi	243a0 <flatcc_builder_start_string@@Base+0x114>
   242e0:	ldr	r3, [r4, #84]	; 0x54
   242e4:	add	r3, r3, r5
   242e8:	cmp	r3, #0
   242ec:	str	r3, [r4, #32]
   242f0:	beq	243c4 <flatcc_builder_start_string@@Base+0x138>
   242f4:	ldr	r2, [r4, #88]	; 0x58
   242f8:	ldr	r0, [pc, #204]	; 243cc <flatcc_builder_start_string@@Base+0x140>
   242fc:	ldr	r1, [r4, #176]	; 0xb0
   24300:	umull	r0, r2, r0, r2
   24304:	lsr	r2, r2, #3
   24308:	cmp	r1, #0
   2430c:	cmpgt	r2, r1
   24310:	str	r2, [r4, #160]	; 0xa0
   24314:	strgt	r1, [r4, #160]	; 0xa0
   24318:	b	24328 <flatcc_builder_start_string@@Base+0x9c>
   2431c:	ldr	r3, [r0, #32]
   24320:	add	r3, r3, #36	; 0x24
   24324:	str	r3, [r0, #32]
   24328:	ldr	lr, [r4, #20]
   2432c:	ldr	ip, [r4, #28]
   24330:	ldrh	r5, [r4, #130]	; 0x82
   24334:	add	r2, lr, ip
   24338:	add	r2, r2, #7
   2433c:	bic	r2, r2, #7
   24340:	mov	r1, #1
   24344:	mov	r0, #0
   24348:	str	lr, [r3, #8]
   2434c:	strh	r5, [r3, #12]
   24350:	strh	r1, [r4, #130]	; 0x82
   24354:	str	ip, [r3]
   24358:	str	r2, [r4, #28]
   2435c:	str	r0, [r4, #20]
   24360:	str	r1, [r3, #16]
   24364:	str	r0, [r3, #20]
   24368:	ldr	r1, [r4, #64]	; 0x40
   2436c:	ldr	ip, [r4, #60]	; 0x3c
   24370:	sub	r1, r1, r2
   24374:	mvn	lr, #3
   24378:	cmp	r1, lr
   2437c:	add	r2, ip, r2
   24380:	movhi	r1, lr
   24384:	mov	ip, #6
   24388:	strh	ip, [r3, #14]
   2438c:	str	r2, [r4, #16]
   24390:	str	r1, [r4, #24]
   24394:	str	lr, [r3, #4]
   24398:	add	sp, sp, #8
   2439c:	pop	{r4, r5, r6, pc}
   243a0:	mov	r1, #4
   243a4:	ldr	r0, [r4, #40]	; 0x28
   243a8:	str	r1, [sp]
   243ac:	add	r1, r4, #84	; 0x54
   243b0:	ldr	r6, [r4, #48]	; 0x30
   243b4:	blx	r6
   243b8:	cmp	r0, #0
   243bc:	beq	242e0 <flatcc_builder_start_string@@Base+0x54>
   243c0:	bl	1285c <__assert_fail@plt+0x1b4>
   243c4:	mvn	r0, #0
   243c8:	b	24398 <flatcc_builder_start_string@@Base+0x10c>
   243cc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

000243d0 <flatcc_builder_reserve_table@@Base>:
   243d0:	cmp	r1, #0
   243d4:	push	{r4, r5, r6, r7, lr}
   243d8:	sub	sp, sp, #12
   243dc:	blt	244b4 <flatcc_builder_reserve_table@@Base+0xe4>
   243e0:	ldr	r2, [r0, #32]
   243e4:	add	r1, r1, #2
   243e8:	mov	r5, r0
   243ec:	ldrh	r6, [r2, #28]
   243f0:	ldr	r3, [r2, #16]
   243f4:	ldr	r0, [r0, #56]	; 0x38
   243f8:	lsl	r4, r1, #1
   243fc:	add	r6, r3, r6, lsl #1
   24400:	add	r2, r6, r4
   24404:	cmp	r2, r0
   24408:	bhi	24464 <flatcc_builder_reserve_table@@Base+0x94>
   2440c:	ldr	r3, [r5, #52]	; 0x34
   24410:	adds	r3, r3, r6
   24414:	streq	r3, [r5, #4]
   24418:	mvneq	r0, #0
   2441c:	beq	2445c <flatcc_builder_reserve_table@@Base+0x8c>
   24420:	ldr	r2, [r5, #32]
   24424:	add	r3, r3, #4
   24428:	str	r3, [r5, #4]
   2442c:	ldr	r6, [r2, #20]
   24430:	ldr	r3, [r5, #80]	; 0x50
   24434:	add	r2, r4, r6
   24438:	sub	r2, r2, #3
   2443c:	cmp	r2, r3
   24440:	bhi	2448c <flatcc_builder_reserve_table@@Base+0xbc>
   24444:	ldr	r3, [r5, #76]	; 0x4c
   24448:	add	r3, r3, r6
   2444c:	cmp	r3, #0
   24450:	movne	r0, #0
   24454:	mvneq	r0, #0
   24458:	str	r3, [r5]
   2445c:	add	sp, sp, #12
   24460:	pop	{r4, r5, r6, r7, pc}
   24464:	mov	r3, #0
   24468:	ldr	r0, [r5, #40]	; 0x28
   2446c:	add	r1, r5, #52	; 0x34
   24470:	str	r3, [sp]
   24474:	mov	r3, #1
   24478:	ldr	r7, [r5, #48]	; 0x30
   2447c:	blx	r7
   24480:	cmp	r0, #0
   24484:	beq	2440c <flatcc_builder_reserve_table@@Base+0x3c>
   24488:	bl	1285c <__assert_fail@plt+0x1b4>
   2448c:	mov	r3, #3
   24490:	ldr	r0, [r5, #40]	; 0x28
   24494:	add	r1, r5, #76	; 0x4c
   24498:	str	r3, [sp]
   2449c:	mov	r3, #0
   244a0:	ldr	r4, [r5, #48]	; 0x30
   244a4:	blx	r4
   244a8:	cmp	r0, #0
   244ac:	beq	24444 <flatcc_builder_reserve_table@@Base+0x74>
   244b0:	b	24488 <flatcc_builder_reserve_table@@Base+0xb8>
   244b4:	ldr	r3, [pc, #12]	; 244c8 <flatcc_builder_reserve_table@@Base+0xf8>
   244b8:	ldr	r2, [pc, #12]	; 244cc <flatcc_builder_reserve_table@@Base+0xfc>
   244bc:	ldr	r1, [pc, #12]	; 244d0 <flatcc_builder_reserve_table@@Base+0x100>
   244c0:	ldr	r0, [pc, #12]	; 244d4 <flatcc_builder_reserve_table@@Base+0x104>
   244c4:	bl	126a8 <__assert_fail@plt>
   244c8:	andeq	pc, r2, r8, asr #32
   244cc:	andeq	r0, r0, r9, lsr #8
   244d0:	andeq	pc, r2, r8, ror #5
   244d4:	andeq	pc, r2, r8, ror r5	; <UNPREDICTABLE>

000244d8 <flatcc_builder_start_table@@Base>:
   244d8:	push	{r4, r5, r6, r7, lr}
   244dc:	mov	r5, r1
   244e0:	ldr	r1, [r0, #156]	; 0x9c
   244e4:	ldr	r3, [r0, #160]	; 0xa0
   244e8:	add	r2, r1, #1
   244ec:	cmp	r2, r3
   244f0:	sub	sp, sp, #12
   244f4:	mov	r4, r0
   244f8:	str	r2, [r0, #156]	; 0x9c
   244fc:	ble	2456c <flatcc_builder_start_table@@Base+0x94>
   24500:	ldr	r3, [r0, #176]	; 0xb0
   24504:	cmp	r3, #0
   24508:	cmpgt	r2, r3
   2450c:	movgt	r3, #1
   24510:	movle	r3, #0
   24514:	bgt	2470c <flatcc_builder_start_table@@Base+0x234>
   24518:	add	r1, r1, r1, lsl #3
   2451c:	ldr	r0, [r0, #88]	; 0x58
   24520:	lsl	r6, r1, #2
   24524:	add	r2, r6, #36	; 0x24
   24528:	cmp	r2, r0
   2452c:	bhi	246e8 <flatcc_builder_start_table@@Base+0x210>
   24530:	ldr	r3, [r4, #84]	; 0x54
   24534:	add	r3, r3, r6
   24538:	cmp	r3, #0
   2453c:	str	r3, [r4, #32]
   24540:	beq	2470c <flatcc_builder_start_table@@Base+0x234>
   24544:	ldr	r2, [r4, #88]	; 0x58
   24548:	ldr	r0, [pc, #452]	; 24714 <flatcc_builder_start_table@@Base+0x23c>
   2454c:	ldr	r1, [r4, #176]	; 0xb0
   24550:	umull	r0, r2, r0, r2
   24554:	lsr	r2, r2, #3
   24558:	cmp	r2, r1
   2455c:	cmpgt	r1, #0
   24560:	str	r2, [r4, #160]	; 0xa0
   24564:	strgt	r1, [r4, #160]	; 0xa0
   24568:	b	24578 <flatcc_builder_start_table@@Base+0xa0>
   2456c:	ldr	r3, [r0, #32]
   24570:	add	r3, r3, #36	; 0x24
   24574:	str	r3, [r0, #32]
   24578:	ldr	ip, [r4, #20]
   2457c:	ldr	lr, [r4, #28]
   24580:	ldrh	r7, [r4, #130]	; 0x82
   24584:	ldr	r6, [r4, #4]
   24588:	ldr	r0, [r4, #52]	; 0x34
   2458c:	add	r2, ip, lr
   24590:	str	ip, [r3, #8]
   24594:	add	r2, r2, #7
   24598:	mov	ip, #4
   2459c:	strh	r7, [r3, #12]
   245a0:	sub	r1, r6, r0
   245a4:	strh	ip, [r4, #130]	; 0x82
   245a8:	bic	r2, r2, #7
   245ac:	mvn	r6, #3
   245b0:	mov	ip, #0
   245b4:	str	lr, [r3]
   245b8:	str	r6, [r3, #4]
   245bc:	str	r2, [r4, #28]
   245c0:	str	ip, [r4, #20]
   245c4:	str	r1, [r3, #16]
   245c8:	ldr	lr, [r4, #76]	; 0x4c
   245cc:	ldr	r2, [r4]
   245d0:	add	r5, r5, #2
   245d4:	sub	r2, r2, lr
   245d8:	str	r2, [r3, #20]
   245dc:	ldr	r2, [r4, #12]
   245e0:	lsl	r5, r5, #1
   245e4:	str	r2, [r3, #24]
   245e8:	ldrh	r6, [r4, #8]
   245ec:	ldr	lr, [pc, #292]	; 24718 <flatcc_builder_start_table@@Base+0x240>
   245f0:	strh	r6, [r3, #28]
   245f4:	add	r6, r1, r6, lsl #1
   245f8:	ldr	r1, [r4, #56]	; 0x38
   245fc:	add	r2, r6, r5
   24600:	cmp	r2, r1
   24604:	mov	r1, #3
   24608:	strh	ip, [r4, #8]
   2460c:	str	lr, [r4, #12]
   24610:	strh	r1, [r3, #14]
   24614:	bhi	24698 <flatcc_builder_start_table@@Base+0x1c0>
   24618:	adds	r6, r6, r0
   2461c:	streq	r6, [r4, #4]
   24620:	beq	2470c <flatcc_builder_start_table@@Base+0x234>
   24624:	ldr	r3, [r4, #32]
   24628:	add	r6, r6, #4
   2462c:	str	r6, [r4, #4]
   24630:	ldr	r6, [r3, #20]
   24634:	sub	r2, r5, #3
   24638:	ldr	r3, [r4, #80]	; 0x50
   2463c:	add	r2, r2, r6
   24640:	cmp	r2, r3
   24644:	bhi	246c0 <flatcc_builder_start_table@@Base+0x1e8>
   24648:	ldr	r3, [r4, #76]	; 0x4c
   2464c:	add	r3, r3, r6
   24650:	cmp	r3, #0
   24654:	str	r3, [r4]
   24658:	beq	2470c <flatcc_builder_start_table@@Base+0x234>
   2465c:	ldr	ip, [r4, #28]
   24660:	ldr	r3, [r4, #64]	; 0x40
   24664:	ldr	r2, [pc, #176]	; 2471c <flatcc_builder_start_table@@Base+0x244>
   24668:	sub	r3, r3, ip
   2466c:	ldr	r1, [r4, #60]	; 0x3c
   24670:	ldr	lr, [r4, #32]
   24674:	cmp	r3, r2
   24678:	mov	r0, #0
   2467c:	add	r1, r1, ip
   24680:	movcs	r3, r2
   24684:	str	r1, [r4, #16]
   24688:	str	r3, [r4, #24]
   2468c:	str	r2, [lr, #4]
   24690:	add	sp, sp, #12
   24694:	pop	{r4, r5, r6, r7, pc}
   24698:	ldr	r0, [r4, #40]	; 0x28
   2469c:	mov	r3, #1
   246a0:	str	ip, [sp]
   246a4:	add	r1, r4, #52	; 0x34
   246a8:	ldr	r7, [r4, #48]	; 0x30
   246ac:	blx	r7
   246b0:	cmp	r0, #0
   246b4:	bne	246e4 <flatcc_builder_start_table@@Base+0x20c>
   246b8:	ldr	r0, [r4, #52]	; 0x34
   246bc:	b	24618 <flatcc_builder_start_table@@Base+0x140>
   246c0:	mov	r3, #3
   246c4:	ldr	r0, [r4, #40]	; 0x28
   246c8:	add	r1, r4, #76	; 0x4c
   246cc:	str	r3, [sp]
   246d0:	mov	r3, #0
   246d4:	ldr	r5, [r4, #48]	; 0x30
   246d8:	blx	r5
   246dc:	cmp	r0, #0
   246e0:	beq	24648 <flatcc_builder_start_table@@Base+0x170>
   246e4:	bl	1285c <__assert_fail@plt+0x1b4>
   246e8:	mov	r1, #4
   246ec:	ldr	r0, [r4, #40]	; 0x28
   246f0:	str	r1, [sp]
   246f4:	add	r1, r4, #84	; 0x54
   246f8:	ldr	r7, [r4, #48]	; 0x30
   246fc:	blx	r7
   24700:	cmp	r0, #0
   24704:	beq	24530 <flatcc_builder_start_table@@Base+0x58>
   24708:	b	246e4 <flatcc_builder_start_table@@Base+0x20c>
   2470c:	mvn	r0, #0
   24710:	b	24690 <flatcc_builder_start_table@@Base+0x1b8>
   24714:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   24718:	svccs	0x00693b52
   2471c:	strdeq	pc, [r0], -ip

00024720 <flatcc_builder_create_vtable@@Base>:
   24720:	push	{r4, r5, r6, lr}
   24724:	sub	sp, sp, #80	; 0x50
   24728:	mov	r3, #0
   2472c:	cmp	r2, #0
   24730:	str	r3, [sp, #8]
   24734:	str	r3, [sp, #12]
   24738:	mov	r4, r0
   2473c:	ldr	r3, [r0, #152]	; 0x98
   24740:	beq	247b4 <flatcc_builder_create_vtable@@Base+0x94>
   24744:	mov	r0, #1
   24748:	cmp	r3, #0
   2474c:	str	r1, [sp, #16]
   24750:	str	r2, [sp, #8]
   24754:	str	r2, [sp, #20]
   24758:	str	r0, [sp, #12]
   2475c:	mov	r1, r2
   24760:	beq	247cc <flatcc_builder_create_vtable@@Base+0xac>
   24764:	ldr	r3, [r4, #136]	; 0x88
   24768:	sub	r5, r3, r2
   2476c:	cmp	r3, r5
   24770:	ble	247c8 <flatcc_builder_create_vtable@@Base+0xa8>
   24774:	ldr	r0, [r4, #36]	; 0x24
   24778:	mov	r3, r5
   2477c:	str	r2, [sp]
   24780:	add	r1, sp, #16
   24784:	ldr	r6, [r4, #44]	; 0x2c
   24788:	mov	r2, #1
   2478c:	blx	r6
   24790:	cmp	r0, #0
   24794:	bne	24830 <flatcc_builder_create_vtable@@Base+0x110>
   24798:	cmp	r5, #0
   2479c:	str	r5, [r4, #136]	; 0x88
   247a0:	beq	247a8 <flatcc_builder_create_vtable@@Base+0x88>
   247a4:	add	r5, r5, #1
   247a8:	mov	r0, r5
   247ac:	add	sp, sp, #80	; 0x50
   247b0:	pop	{r4, r5, r6, pc}
   247b4:	cmp	r3, #0
   247b8:	bne	247c8 <flatcc_builder_create_vtable@@Base+0xa8>
   247bc:	ldr	r2, [r0, #180]	; 0xb4
   247c0:	cmp	r2, #0
   247c4:	beq	24824 <flatcc_builder_create_vtable@@Base+0x104>
   247c8:	bl	128a8 <__assert_fail@plt+0x200>
   247cc:	ldr	r3, [r4, #180]	; 0xb4
   247d0:	cmp	r3, #0
   247d4:	bne	24764 <flatcc_builder_create_vtable@@Base+0x44>
   247d8:	ldr	r5, [r4, #140]	; 0x8c
   247dc:	add	r3, r5, r2
   247e0:	cmp	r5, r3
   247e4:	str	r3, [r4, #140]	; 0x8c
   247e8:	movle	r2, r0
   247ec:	bgt	24844 <flatcc_builder_create_vtable@@Base+0x124>
   247f0:	ldr	r0, [r4, #36]	; 0x24
   247f4:	mov	r3, r5
   247f8:	str	r1, [sp]
   247fc:	add	r1, sp, #16
   24800:	ldr	r4, [r4, #44]	; 0x2c
   24804:	blx	r4
   24808:	cmp	r0, #0
   2480c:	beq	247a4 <flatcc_builder_create_vtable@@Base+0x84>
   24810:	ldr	r3, [pc, #48]	; 24848 <flatcc_builder_create_vtable@@Base+0x128>
   24814:	ldr	r2, [pc, #48]	; 2484c <flatcc_builder_create_vtable@@Base+0x12c>
   24818:	ldr	r1, [pc, #48]	; 24850 <flatcc_builder_create_vtable@@Base+0x130>
   2481c:	ldr	r0, [pc, #48]	; 24854 <flatcc_builder_create_vtable@@Base+0x134>
   24820:	bl	126a8 <__assert_fail@plt>
   24824:	ldr	r5, [r4, #140]	; 0x8c
   24828:	mov	r1, r2
   2482c:	b	247f0 <flatcc_builder_create_vtable@@Base+0xd0>
   24830:	ldr	r3, [pc, #32]	; 24858 <flatcc_builder_create_vtable@@Base+0x138>
   24834:	ldr	r2, [pc, #32]	; 2485c <flatcc_builder_create_vtable@@Base+0x13c>
   24838:	ldr	r1, [pc, #16]	; 24850 <flatcc_builder_create_vtable@@Base+0x130>
   2483c:	ldr	r0, [pc, #16]	; 24854 <flatcc_builder_create_vtable@@Base+0x134>
   24840:	bl	126a8 <__assert_fail@plt>
   24844:	bl	12880 <__assert_fail@plt+0x1d8>
   24848:	andeq	lr, r2, r8, lsr #23
   2484c:	andeq	r0, r0, r5, lsr #5
   24850:	andeq	pc, r2, r8, ror #5
   24854:	andeq	pc, r2, r8, lsr #7
   24858:			; <UNDEFINED> instruction: 0x0002ebb4
   2485c:	andeq	r0, r0, fp, lsl #5

00024860 <flatcc_builder_create_cached_vtable@@Base>:
   24860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24864:	sub	sp, sp, #28
   24868:	ldr	r4, [r0, #116]	; 0x74
   2486c:	mov	sl, r3
   24870:	cmp	r4, #0
   24874:	mov	r8, r0
   24878:	str	r1, [sp, #8]
   2487c:	mov	r7, r2
   24880:	rsbne	r3, r4, #32
   24884:	beq	249dc <flatcc_builder_create_cached_vtable@@Base+0x17c>
   24888:	lsr	sl, sl, r3
   2488c:	ldr	r3, [r8, #92]	; 0x5c
   24890:	adds	r2, r3, sl, lsl #2
   24894:	str	r3, [sp, #16]
   24898:	str	r2, [sp, #20]
   2489c:	beq	249d0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   248a0:	ldr	r5, [r3, sl, lsl #2]
   248a4:	cmp	r5, #0
   248a8:	beq	24acc <flatcc_builder_create_cached_vtable@@Base+0x26c>
   248ac:	mov	r3, #0
   248b0:	ldr	fp, [r8, #100]	; 0x64
   248b4:	ldr	r6, [r8, #68]	; 0x44
   248b8:	mov	r9, r2
   248bc:	str	r3, [sp, #12]
   248c0:	b	248d4 <flatcc_builder_create_cached_vtable@@Base+0x74>
   248c4:	ldr	r5, [r4, #12]
   248c8:	add	r9, r4, #12
   248cc:	cmp	r5, #0
   248d0:	beq	24924 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   248d4:	add	r4, fp, r5
   248d8:	ldr	r2, [r4, #8]
   248dc:	add	r1, r6, r2
   248e0:	ldrh	r2, [r6, r2]
   248e4:	cmp	r2, r7
   248e8:	bne	248c4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   248ec:	mov	r2, r7
   248f0:	ldr	r0, [sp, #8]
   248f4:	bl	125c4 <memcmp@plt>
   248f8:	cmp	r0, #0
   248fc:	bne	248c4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   24900:	ldr	r1, [r4, #4]
   24904:	ldr	r2, [r8, #152]	; 0x98
   24908:	cmp	r1, r2
   2490c:	beq	249a0 <flatcc_builder_create_cached_vtable@@Base+0x140>
   24910:	ldr	r5, [r4, #12]
   24914:	add	r9, r4, #12
   24918:	cmp	r5, #0
   2491c:	str	r4, [sp, #12]
   24920:	bne	248d4 <flatcc_builder_create_cached_vtable@@Base+0x74>
   24924:	ldr	r4, [r8, #124]	; 0x7c
   24928:	ldr	r3, [r8, #104]	; 0x68
   2492c:	add	r2, r4, #16
   24930:	cmp	r2, r3
   24934:	bhi	24aa4 <flatcc_builder_create_cached_vtable@@Base+0x244>
   24938:	ldr	r5, [r8, #100]	; 0x64
   2493c:	adds	r6, r5, r4
   24940:	beq	249d0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   24944:	ldr	r3, [r8, #124]	; 0x7c
   24948:	ldr	r0, [sp, #16]
   2494c:	ldr	r2, [r8, #152]	; 0x98
   24950:	add	r1, r3, #16
   24954:	str	r1, [r8, #124]	; 0x7c
   24958:	str	r2, [r6, #4]
   2495c:	ldr	r1, [r0, sl, lsl #2]
   24960:	mov	r2, r7
   24964:	str	r1, [r6, #12]
   24968:	str	r3, [r0, sl, lsl #2]
   2496c:	ldr	r1, [sp, #8]
   24970:	mov	r0, r8
   24974:	bl	24720 <flatcc_builder_create_vtable@@Base>
   24978:	cmp	r0, #0
   2497c:	str	r0, [r5, r4]
   24980:	beq	249d0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   24984:	ldr	r3, [sp, #12]
   24988:	cmp	r3, #0
   2498c:	beq	24ad4 <flatcc_builder_create_cached_vtable@@Base+0x274>
   24990:	ldr	r3, [r3, #8]
   24994:	str	r3, [r6, #8]
   24998:	add	sp, sp, #28
   2499c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249a0:	ldr	r3, [sp, #20]
   249a4:	cmp	r3, r9
   249a8:	beq	249c4 <flatcc_builder_create_cached_vtable@@Base+0x164>
   249ac:	ldr	r2, [sp, #16]
   249b0:	ldr	r3, [r4, #12]
   249b4:	str	r3, [r9]
   249b8:	ldr	r3, [r2, sl, lsl #2]
   249bc:	str	r3, [r4, #12]
   249c0:	str	r5, [r2, sl, lsl #2]
   249c4:	ldr	r0, [r4]
   249c8:	add	sp, sp, #28
   249cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249d0:	mov	r0, #0
   249d4:	add	sp, sp, #28
   249d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249dc:	ldr	r3, [r0, #124]	; 0x7c
   249e0:	add	r5, r0, #92	; 0x5c
   249e4:	cmp	r3, #0
   249e8:	bne	24b98 <flatcc_builder_create_cached_vtable@@Base+0x338>
   249ec:	ldr	r3, [r0, #104]	; 0x68
   249f0:	cmp	r3, #15
   249f4:	bls	24a78 <flatcc_builder_create_cached_vtable@@Base+0x218>
   249f8:	ldr	r3, [r8, #100]	; 0x64
   249fc:	cmp	r3, #0
   24a00:	beq	249d0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   24a04:	mov	r2, #16
   24a08:	mov	r3, #5
   24a0c:	str	r2, [r8, #124]	; 0x7c
   24a10:	ldr	r0, [r8, #40]	; 0x28
   24a14:	mov	r1, r5
   24a18:	str	r3, [sp]
   24a1c:	mov	r2, #256	; 0x100
   24a20:	ldr	r5, [r8, #48]	; 0x30
   24a24:	mov	r3, #1
   24a28:	blx	r5
   24a2c:	cmp	r0, #0
   24a30:	bne	249d0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   24a34:	ldr	r1, [r8, #96]	; 0x60
   24a38:	mov	r3, #256	; 0x100
   24a3c:	b	24a44 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   24a40:	mov	r3, r2
   24a44:	lsl	r2, r3, #1
   24a48:	cmp	r2, r1
   24a4c:	bls	24a40 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   24a50:	lsr	r3, r3, #2
   24a54:	cmp	r3, #1
   24a58:	bls	24b24 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   24a5c:	mov	r2, #1
   24a60:	add	r4, r4, #1
   24a64:	cmp	r3, r2, lsl r4
   24a68:	bhi	24a60 <flatcc_builder_create_cached_vtable@@Base+0x200>
   24a6c:	rsb	r3, r4, #32
   24a70:	str	r4, [r8, #116]	; 0x74
   24a74:	b	24888 <flatcc_builder_create_cached_vtable@@Base+0x28>
   24a78:	mov	r3, #6
   24a7c:	ldr	r0, [r0, #40]	; 0x28
   24a80:	mov	r2, #16
   24a84:	str	r3, [sp]
   24a88:	add	r1, r8, #100	; 0x64
   24a8c:	ldr	r6, [r8, #48]	; 0x30
   24a90:	mov	r3, r4
   24a94:	blx	r6
   24a98:	cmp	r0, #0
   24a9c:	beq	249f8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   24aa0:	b	24b8c <flatcc_builder_create_cached_vtable@@Base+0x32c>
   24aa4:	mov	r3, #6
   24aa8:	ldr	r0, [r8, #40]	; 0x28
   24aac:	add	r1, r8, #100	; 0x64
   24ab0:	str	r3, [sp]
   24ab4:	mov	r3, #0
   24ab8:	ldr	r5, [r8, #48]	; 0x30
   24abc:	blx	r5
   24ac0:	cmp	r0, #0
   24ac4:	beq	24938 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   24ac8:	b	24b8c <flatcc_builder_create_cached_vtable@@Base+0x32c>
   24acc:	str	r5, [sp, #12]
   24ad0:	b	24924 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   24ad4:	ldr	r3, [r8, #172]	; 0xac
   24ad8:	ldr	r9, [r8, #120]	; 0x78
   24adc:	cmp	r3, #0
   24ae0:	add	r2, r9, r7
   24ae4:	beq	24b2c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   24ae8:	cmp	r3, r2
   24aec:	bcs	24b2c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   24af0:	ldr	r3, [r8, #116]	; 0x74
   24af4:	cmp	r3, #0
   24af8:	beq	24998 <flatcc_builder_create_cached_vtable@@Base+0x138>
   24afc:	ldr	r6, [sp, #12]
   24b00:	ldr	r2, [r8, #96]	; 0x60
   24b04:	mov	r1, r6
   24b08:	ldr	r0, [r8, #92]	; 0x5c
   24b0c:	bl	12654 <memset@plt>
   24b10:	mov	r3, #16
   24b14:	ldr	r0, [r5, r4]
   24b18:	str	r6, [r8, #120]	; 0x78
   24b1c:	str	r3, [r8, #124]	; 0x7c
   24b20:	b	24998 <flatcc_builder_create_cached_vtable@@Base+0x138>
   24b24:	mov	r3, #32
   24b28:	b	24a70 <flatcc_builder_create_cached_vtable@@Base+0x210>
   24b2c:	ldr	r3, [r8, #72]	; 0x48
   24b30:	cmp	r3, r2
   24b34:	bcc	24b68 <flatcc_builder_create_cached_vtable@@Base+0x308>
   24b38:	ldr	r3, [r8, #68]	; 0x44
   24b3c:	adds	r0, r3, r9
   24b40:	beq	24b90 <flatcc_builder_create_cached_vtable@@Base+0x330>
   24b44:	ldr	r3, [r8, #120]	; 0x78
   24b48:	ldr	r1, [sp, #8]
   24b4c:	add	ip, r3, r7
   24b50:	str	r3, [r6, #8]
   24b54:	mov	r2, r7
   24b58:	str	ip, [r8, #120]	; 0x78
   24b5c:	bl	125ac <memcpy@plt>
   24b60:	ldr	r0, [r5, r4]
   24b64:	b	24998 <flatcc_builder_create_cached_vtable@@Base+0x138>
   24b68:	mov	r3, #2
   24b6c:	ldr	r0, [r8, #40]	; 0x28
   24b70:	add	r1, r8, #68	; 0x44
   24b74:	str	r3, [sp]
   24b78:	mov	r3, #0
   24b7c:	ldr	sl, [r8, #48]	; 0x30
   24b80:	blx	sl
   24b84:	cmp	r0, #0
   24b88:	beq	24b38 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   24b8c:	bl	1285c <__assert_fail@plt+0x1b4>
   24b90:	mvn	r0, #0
   24b94:	b	24998 <flatcc_builder_create_cached_vtable@@Base+0x138>
   24b98:	ldr	r3, [pc, #12]	; 24bac <flatcc_builder_create_cached_vtable@@Base+0x34c>
   24b9c:	ldr	r2, [pc, #12]	; 24bb0 <flatcc_builder_create_cached_vtable@@Base+0x350>
   24ba0:	ldr	r1, [pc, #12]	; 24bb4 <flatcc_builder_create_cached_vtable@@Base+0x354>
   24ba4:	ldr	r0, [pc, #12]	; 24bb8 <flatcc_builder_create_cached_vtable@@Base+0x358>
   24ba8:	bl	126a8 <__assert_fail@plt>
   24bac:	andeq	pc, r2, r8, rrx
   24bb0:	andeq	r0, r0, r6, asr r1
   24bb4:	andeq	pc, r2, r8, ror #5
   24bb8:	andeq	pc, r2, r4, lsl #11

00024bbc <flatcc_builder_create_table@@Base>:
   24bbc:	push	{r4, r5, r6, r7, r8, lr}
   24bc0:	sub	sp, sp, #88	; 0x58
   24bc4:	ldr	r4, [sp, #116]	; 0x74
   24bc8:	ldr	lr, [sp, #120]	; 0x78
   24bcc:	cmp	r4, #0
   24bd0:	blt	24d08 <flatcc_builder_create_table@@Base+0x14c>
   24bd4:	mov	r8, r2
   24bd8:	ands	r2, lr, #1
   24bdc:	beq	24d34 <flatcc_builder_create_table@@Base+0x178>
   24be0:	mov	r5, r0
   24be4:	ldrh	r0, [r0, #128]	; 0x80
   24be8:	cmp	r3, #4
   24bec:	movcc	r3, #4
   24bf0:	ldr	ip, [r5, #136]	; 0x88
   24bf4:	cmp	r0, r3
   24bf8:	mvn	r0, #3
   24bfc:	strhcc	r3, [r5, #128]	; 0x80
   24c00:	sub	r7, ip, r8
   24c04:	sub	r3, r3, #1
   24c08:	sub	r0, r0, r8
   24c0c:	and	r7, r7, r3
   24c10:	add	r0, r0, ip
   24c14:	sub	lr, lr, #1
   24c18:	sub	r0, r0, r7
   24c1c:	sub	lr, r0, lr
   24c20:	cmp	r4, #0
   24c24:	str	lr, [sp, #12]
   24c28:	beq	24c5c <flatcc_builder_create_table@@Base+0xa0>
   24c2c:	ldr	ip, [sp, #112]	; 0x70
   24c30:	mvn	r6, #3
   24c34:	add	r4, ip, r4, lsl #1
   24c38:	sub	r6, r6, r0
   24c3c:	ldrh	r3, [ip], #2
   24c40:	sub	lr, r6, r3
   24c44:	ldr	r0, [r1, r3]
   24c48:	cmp	r4, ip
   24c4c:	add	r0, r0, lr
   24c50:	str	r0, [r1, r3]
   24c54:	bne	24c3c <flatcc_builder_create_table@@Base+0x80>
   24c58:	ldr	ip, [r5, #136]	; 0x88
   24c5c:	cmp	r8, #0
   24c60:	mov	r3, #4
   24c64:	mov	r0, #1
   24c68:	str	r3, [sp, #16]
   24c6c:	movne	r2, #2
   24c70:	str	r3, [sp, #28]
   24c74:	addne	r3, r8, r3
   24c78:	str	r0, [sp, #20]
   24c7c:	add	lr, sp, #12
   24c80:	strne	r1, [sp, #32]
   24c84:	strne	r8, [sp, #36]	; 0x24
   24c88:	strne	r3, [sp, #16]
   24c8c:	strne	r2, [sp, #20]
   24c90:	movne	r0, #3
   24c94:	moveq	r0, #2
   24c98:	cmp	r7, #0
   24c9c:	str	lr, [sp, #24]
   24ca0:	beq	24ccc <flatcc_builder_create_table@@Base+0x110>
   24ca4:	add	r2, r2, #1
   24ca8:	add	r1, sp, #88	; 0x58
   24cac:	add	r1, r1, r2, lsl #3
   24cb0:	ldr	lr, [pc, #144]	; 24d48 <flatcc_builder_create_table@@Base+0x18c>
   24cb4:	mov	r2, r0
   24cb8:	add	r3, r3, r7
   24cbc:	str	r7, [r1, #-68]	; 0xffffffbc
   24cc0:	str	r3, [sp, #16]
   24cc4:	str	r0, [sp, #20]
   24cc8:	str	lr, [r1, #-72]	; 0xffffffb8
   24ccc:	sub	r4, ip, r3
   24cd0:	cmp	r4, ip
   24cd4:	bge	24d30 <flatcc_builder_create_table@@Base+0x174>
   24cd8:	ldr	r0, [r5, #36]	; 0x24
   24cdc:	add	r1, sp, #24
   24ce0:	str	r3, [sp]
   24ce4:	mov	r3, r4
   24ce8:	ldr	r6, [r5, #44]	; 0x2c
   24cec:	blx	r6
   24cf0:	cmp	r0, #0
   24cf4:	bne	24d1c <flatcc_builder_create_table@@Base+0x160>
   24cf8:	mov	r0, r4
   24cfc:	str	r4, [r5, #136]	; 0x88
   24d00:	add	sp, sp, #88	; 0x58
   24d04:	pop	{r4, r5, r6, r7, r8, pc}
   24d08:	ldr	r3, [pc, #60]	; 24d4c <flatcc_builder_create_table@@Base+0x190>
   24d0c:	ldr	r2, [pc, #60]	; 24d50 <flatcc_builder_create_table@@Base+0x194>
   24d10:	ldr	r1, [pc, #60]	; 24d54 <flatcc_builder_create_table@@Base+0x198>
   24d14:	ldr	r0, [pc, #60]	; 24d58 <flatcc_builder_create_table@@Base+0x19c>
   24d18:	bl	126a8 <__assert_fail@plt>
   24d1c:	ldr	r3, [pc, #56]	; 24d5c <flatcc_builder_create_table@@Base+0x1a0>
   24d20:	ldr	r2, [pc, #56]	; 24d60 <flatcc_builder_create_table@@Base+0x1a4>
   24d24:	ldr	r1, [pc, #40]	; 24d54 <flatcc_builder_create_table@@Base+0x198>
   24d28:	ldr	r0, [pc, #52]	; 24d64 <flatcc_builder_create_table@@Base+0x1a8>
   24d2c:	bl	126a8 <__assert_fail@plt>
   24d30:	bl	128a8 <__assert_fail@plt+0x200>
   24d34:	ldr	r3, [pc, #16]	; 24d4c <flatcc_builder_create_table@@Base+0x190>
   24d38:	ldr	r2, [pc, #40]	; 24d68 <flatcc_builder_create_table@@Base+0x1ac>
   24d3c:	ldr	r1, [pc, #16]	; 24d54 <flatcc_builder_create_table@@Base+0x198>
   24d40:	ldr	r0, [pc, #36]	; 24d6c <flatcc_builder_create_table@@Base+0x1b0>
   24d44:	bl	126a8 <__assert_fail@plt>
   24d48:	andeq	lr, r2, r0, lsr ip
   24d4c:	andeq	pc, r2, r4, ror r0	; <UNPREDICTABLE>
   24d50:	ldrdeq	r0, [r0], -r5
   24d54:	andeq	pc, r2, r8, ror #5
   24d58:	muleq	r2, r4, r5
   24d5c:			; <UNDEFINED> instruction: 0x0002ebb4
   24d60:	andeq	r0, r0, fp, lsl #5
   24d64:	andeq	pc, r2, r8, lsr #7
   24d68:	ldrdeq	r0, [r0], -fp
   24d6c:	andeq	pc, r2, r8, lsr #11

00024d70 <flatcc_builder_check_required_field@@Base>:
   24d70:	ldr	r3, [r0, #32]
   24d74:	ldrh	r3, [r3, #14]
   24d78:	cmp	r3, #3
   24d7c:	bne	24da8 <flatcc_builder_check_required_field@@Base+0x38>
   24d80:	ldrh	r3, [r0, #8]
   24d84:	cmp	r3, r1
   24d88:	movls	r0, #0
   24d8c:	bls	24da4 <flatcc_builder_check_required_field@@Base+0x34>
   24d90:	ldr	r3, [r0, #4]
   24d94:	lsl	r1, r1, #1
   24d98:	ldrh	r0, [r3, r1]
   24d9c:	adds	r0, r0, #0
   24da0:	movne	r0, #1
   24da4:	bx	lr
   24da8:	push	{r4, lr}
   24dac:	ldr	r3, [pc, #12]	; 24dc0 <flatcc_builder_check_required_field@@Base+0x50>
   24db0:	ldr	r2, [pc, #12]	; 24dc4 <flatcc_builder_check_required_field@@Base+0x54>
   24db4:	ldr	r1, [pc, #12]	; 24dc8 <flatcc_builder_check_required_field@@Base+0x58>
   24db8:	ldr	r0, [pc, #12]	; 24dcc <flatcc_builder_check_required_field@@Base+0x5c>
   24dbc:	bl	126a8 <__assert_fail@plt>
   24dc0:	muleq	r2, r0, r0
   24dc4:	strdeq	r0, [r0], -r8
   24dc8:	andeq	pc, r2, r8, ror #5
   24dcc:			; <UNDEFINED> instruction: 0x0002f5b4

00024dd0 <flatcc_builder_check_union_field@@Base>:
   24dd0:	ldr	r3, [r0, #32]
   24dd4:	ldrh	r3, [r3, #14]
   24dd8:	cmp	r3, #3
   24ddc:	bne	24e58 <flatcc_builder_check_union_field@@Base+0x88>
   24de0:	cmp	r1, #0
   24de4:	beq	24e30 <flatcc_builder_check_union_field@@Base+0x60>
   24de8:	ldrh	r3, [r0, #8]
   24dec:	cmp	r3, r1
   24df0:	bls	24e30 <flatcc_builder_check_union_field@@Base+0x60>
   24df4:	sub	r1, r1, #-2147483647	; 0x80000001
   24df8:	ldr	r3, [r0, #4]
   24dfc:	lsl	r1, r1, #1
   24e00:	ldrh	r2, [r3, r1]
   24e04:	cmp	r2, #0
   24e08:	beq	24e44 <flatcc_builder_check_union_field@@Base+0x74>
   24e0c:	ldr	r0, [r0, #16]
   24e10:	add	r1, r3, r1
   24e14:	ldrb	r2, [r0, r2]
   24e18:	ldrh	r1, [r1, #2]
   24e1c:	cmp	r2, #0
   24e20:	bne	24e38 <flatcc_builder_check_union_field@@Base+0x68>
   24e24:	clz	r0, r1
   24e28:	lsr	r0, r0, #5
   24e2c:	bx	lr
   24e30:	mov	r0, #0
   24e34:	bx	lr
   24e38:	adds	r0, r1, #0
   24e3c:	movne	r0, #1
   24e40:	b	24e34 <flatcc_builder_check_union_field@@Base+0x64>
   24e44:	add	r1, r3, r1
   24e48:	ldrh	r1, [r1, #2]
   24e4c:	clz	r0, r1
   24e50:	lsr	r0, r0, #5
   24e54:	bx	lr
   24e58:	push	{r4, lr}
   24e5c:	ldr	r3, [pc, #12]	; 24e70 <flatcc_builder_check_union_field@@Base+0xa0>
   24e60:	ldr	r2, [pc, #12]	; 24e74 <flatcc_builder_check_union_field@@Base+0xa4>
   24e64:	ldr	r1, [pc, #12]	; 24e78 <flatcc_builder_check_union_field@@Base+0xa8>
   24e68:	ldr	r0, [pc, #12]	; 24e7c <flatcc_builder_check_union_field@@Base+0xac>
   24e6c:	bl	126a8 <__assert_fail@plt>
   24e70:	strheq	pc, [r2], -r4	; <UNPREDICTABLE>
   24e74:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   24e78:	andeq	pc, r2, r8, ror #5
   24e7c:			; <UNDEFINED> instruction: 0x0002f5b4

00024e80 <flatcc_builder_check_required@@Base>:
   24e80:	ldr	r3, [r0, #32]
   24e84:	ldrh	r3, [r3, #14]
   24e88:	cmp	r3, #3
   24e8c:	bne	24ef0 <flatcc_builder_check_required@@Base+0x70>
   24e90:	ldrh	r3, [r0, #8]
   24e94:	cmp	r3, r2
   24e98:	movlt	r0, #0
   24e9c:	blt	24eec <flatcc_builder_check_required@@Base+0x6c>
   24ea0:	cmp	r2, #0
   24ea4:	ble	24ee8 <flatcc_builder_check_required@@Base+0x68>
   24ea8:	ldrh	r3, [r1]
   24eac:	ldr	ip, [r0, #4]
   24eb0:	lsl	r3, r3, #1
   24eb4:	ldrh	r0, [ip, r3]
   24eb8:	cmp	r0, #0
   24ebc:	beq	24eec <flatcc_builder_check_required@@Base+0x6c>
   24ec0:	add	r2, r1, r2, lsl #1
   24ec4:	add	r1, r1, #2
   24ec8:	b	24ee0 <flatcc_builder_check_required@@Base+0x60>
   24ecc:	ldrh	r3, [r1], #2
   24ed0:	lsl	r3, r3, #1
   24ed4:	ldrh	r0, [ip, r3]
   24ed8:	cmp	r0, #0
   24edc:	beq	24eec <flatcc_builder_check_required@@Base+0x6c>
   24ee0:	cmp	r1, r2
   24ee4:	bne	24ecc <flatcc_builder_check_required@@Base+0x4c>
   24ee8:	mov	r0, #1
   24eec:	bx	lr
   24ef0:	push	{r4, lr}
   24ef4:	ldr	r3, [pc, #12]	; 24f08 <flatcc_builder_check_required@@Base+0x88>
   24ef8:	ldr	r2, [pc, #12]	; 24f0c <flatcc_builder_check_required@@Base+0x8c>
   24efc:	ldr	r1, [pc, #12]	; 24f10 <flatcc_builder_check_required@@Base+0x90>
   24f00:	ldr	r0, [pc, #12]	; 24f14 <flatcc_builder_check_required@@Base+0x94>
   24f04:	bl	126a8 <__assert_fail@plt>
   24f08:	ldrdeq	pc, [r2], -r8
   24f0c:	andeq	r0, r0, r1, lsl r5
   24f10:	andeq	pc, r2, r8, ror #5
   24f14:			; <UNDEFINED> instruction: 0x0002f5b4

00024f18 <flatcc_builder_end_table@@Base>:
   24f18:	ldr	r3, [r0, #32]
   24f1c:	push	{r4, r5, r6, r7, lr}
   24f20:	sub	sp, sp, #20
   24f24:	ldrh	r3, [r3, #14]
   24f28:	cmp	r3, #3
   24f2c:	bne	250b0 <flatcc_builder_end_table@@Base+0x198>
   24f30:	ldrh	r5, [r0, #8]
   24f34:	ldr	r3, [r0, #12]
   24f38:	ldr	r1, [pc, #388]	; 250c4 <flatcc_builder_end_table@@Base+0x1ac>
   24f3c:	add	r5, r5, #2
   24f40:	ldr	r2, [r0, #20]
   24f44:	lsl	r5, r5, #1
   24f48:	add	r2, r2, #4
   24f4c:	uxth	r5, r5
   24f50:	eor	r3, r3, r5
   24f54:	uxth	r2, r2
   24f58:	mul	r3, r1, r3
   24f5c:	ldr	ip, [r0, #4]
   24f60:	eor	r3, r3, r2
   24f64:	sub	r6, ip, #4
   24f68:	mul	r1, r1, r3
   24f6c:	strh	r2, [ip, #-2]
   24f70:	strh	r5, [ip, #-4]
   24f74:	mov	r3, r1
   24f78:	str	r1, [r0, #12]
   24f7c:	mov	r2, r5
   24f80:	mov	r1, r6
   24f84:	mov	r4, r0
   24f88:	bl	24860 <flatcc_builder_create_cached_vtable@@Base>
   24f8c:	subs	r7, r0, #0
   24f90:	bne	24fa4 <flatcc_builder_end_table@@Base+0x8c>
   24f94:	mov	r5, #0
   24f98:	mov	r0, r5
   24f9c:	add	sp, sp, #20
   24fa0:	pop	{r4, r5, r6, r7, pc}
   24fa4:	mov	r2, r5
   24fa8:	mov	r1, #0
   24fac:	mov	r0, r6
   24fb0:	bl	12654 <memset@plt>
   24fb4:	ldr	r3, [r4, #32]
   24fb8:	ldr	ip, [r4, #76]	; 0x4c
   24fbc:	ldr	r0, [r4]
   24fc0:	ldr	r2, [r3, #20]
   24fc4:	ldr	r1, [r4, #16]
   24fc8:	add	ip, ip, r2
   24fcc:	sub	r0, r0, ip
   24fd0:	ldrh	r3, [r4, #130]	; 0x82
   24fd4:	asr	r0, r0, #1
   24fd8:	ldr	r2, [r4, #20]
   24fdc:	str	r0, [sp, #4]
   24fe0:	str	r7, [sp, #8]
   24fe4:	str	ip, [sp]
   24fe8:	mov	r0, r4
   24fec:	bl	24bbc <flatcc_builder_create_table@@Base>
   24ff0:	subs	r5, r0, #0
   24ff4:	beq	24f94 <flatcc_builder_end_table@@Base+0x7c>
   24ff8:	ldr	r3, [r4, #32]
   24ffc:	ldr	r0, [r4, #52]	; 0x34
   25000:	ldr	ip, [r4, #76]	; 0x4c
   25004:	ldr	r1, [r3, #24]
   25008:	ldr	r2, [r4, #20]
   2500c:	str	r1, [r4, #12]
   25010:	ldrh	lr, [r3, #28]
   25014:	mov	r1, #0
   25018:	strh	lr, [r4, #8]
   2501c:	ldr	lr, [r3, #16]
   25020:	add	r0, r0, lr
   25024:	str	r0, [r4, #4]
   25028:	ldr	r3, [r3, #20]
   2502c:	ldr	r0, [r4, #16]
   25030:	add	r3, ip, r3
   25034:	str	r3, [r4]
   25038:	bl	12654 <memset@plt>
   2503c:	ldr	r3, [r4, #32]
   25040:	ldr	r2, [r4, #64]	; 0x40
   25044:	ldrh	lr, [r4, #130]	; 0x82
   25048:	ldr	ip, [r3]
   2504c:	ldr	r1, [r3, #4]
   25050:	ldrh	r0, [r4, #128]	; 0x80
   25054:	sub	r2, r2, ip
   25058:	cmp	r2, r1
   2505c:	movcs	r2, r1
   25060:	cmp	r0, lr
   25064:	ldr	r0, [r4, #60]	; 0x3c
   25068:	ldr	r6, [r3, #8]
   2506c:	str	r2, [r4, #24]
   25070:	add	r2, r0, ip
   25074:	str	r2, [r4, #16]
   25078:	str	r6, [r4, #20]
   2507c:	ldr	r2, [r4, #156]	; 0x9c
   25080:	str	ip, [r4, #28]
   25084:	str	r1, [r3, #4]
   25088:	strhcc	lr, [r4, #128]	; 0x80
   2508c:	ldrh	r1, [r3, #12]
   25090:	sub	r2, r2, #1
   25094:	sub	r3, r3, #36	; 0x24
   25098:	mov	r0, r5
   2509c:	str	r2, [r4, #156]	; 0x9c
   250a0:	strh	r1, [r4, #130]	; 0x82
   250a4:	str	r3, [r4, #32]
   250a8:	add	sp, sp, #20
   250ac:	pop	{r4, r5, r6, r7, pc}
   250b0:	ldr	r3, [pc, #16]	; 250c8 <flatcc_builder_end_table@@Base+0x1b0>
   250b4:	ldr	r2, [pc, #16]	; 250cc <flatcc_builder_end_table@@Base+0x1b4>
   250b8:	ldr	r1, [pc, #16]	; 250d0 <flatcc_builder_end_table@@Base+0x1b8>
   250bc:	ldr	r0, [pc, #16]	; 250d4 <flatcc_builder_end_table@@Base+0x1bc>
   250c0:	bl	126a8 <__assert_fail@plt>
   250c4:			; <UNDEFINED> instruction: 0x9e3779b1
   250c8:	strdeq	pc, [r2], -r8
   250cc:	andeq	r0, r0, r5, lsr #10
   250d0:	andeq	pc, r2, r8, ror #5
   250d4:			; <UNDEFINED> instruction: 0x0002f5b4

000250d8 <flatcc_builder_create_vector@@Base>:
   250d8:	push	{r4, r5, r6, lr}
   250dc:	sub	sp, sp, #88	; 0x58
   250e0:	mov	r4, r0
   250e4:	ldr	ip, [sp, #108]	; 0x6c
   250e8:	ldrh	r0, [sp, #104]	; 0x68
   250ec:	cmp	r2, ip
   250f0:	bhi	251cc <flatcc_builder_create_vector@@Base+0xf4>
   250f4:	ldrh	ip, [r4, #128]	; 0x80
   250f8:	mul	r3, r3, r2
   250fc:	cmp	r0, #4
   25100:	movcc	r0, #4
   25104:	ldr	lr, [r4, #136]	; 0x88
   25108:	cmp	ip, r0
   2510c:	sub	r6, lr, r3
   25110:	mov	ip, #4
   25114:	strhcc	r0, [r4, #128]	; 0x80
   25118:	str	r2, [sp, #12]
   2511c:	cmp	r3, #0
   25120:	mov	r2, #1
   25124:	sub	r0, r0, #1
   25128:	str	ip, [sp, #16]
   2512c:	str	r2, [sp, #20]
   25130:	and	r0, r0, r6
   25134:	movne	r2, #2
   25138:	str	ip, [sp, #28]
   2513c:	addne	ip, r3, ip
   25140:	strne	r3, [sp, #36]	; 0x24
   25144:	add	r5, sp, #12
   25148:	strne	r1, [sp, #32]
   2514c:	strne	ip, [sp, #16]
   25150:	strne	r2, [sp, #20]
   25154:	movne	r3, #3
   25158:	moveq	r3, #2
   2515c:	cmp	r0, #0
   25160:	str	r5, [sp, #24]
   25164:	beq	25190 <flatcc_builder_create_vector@@Base+0xb8>
   25168:	add	r2, r2, #1
   2516c:	add	r1, sp, #88	; 0x58
   25170:	add	r1, r1, r2, lsl #3
   25174:	ldr	r5, [pc, #124]	; 251f8 <flatcc_builder_create_vector@@Base+0x120>
   25178:	mov	r2, r3
   2517c:	add	ip, ip, r0
   25180:	str	r0, [r1, #-68]	; 0xffffffbc
   25184:	str	ip, [sp, #16]
   25188:	str	r3, [sp, #20]
   2518c:	str	r5, [r1, #-72]	; 0xffffffb8
   25190:	sub	r5, lr, ip
   25194:	cmp	lr, r5
   25198:	ble	251f4 <flatcc_builder_create_vector@@Base+0x11c>
   2519c:	ldr	r0, [r4, #36]	; 0x24
   251a0:	mov	r3, r5
   251a4:	str	ip, [sp]
   251a8:	add	r1, sp, #24
   251ac:	ldr	r6, [r4, #44]	; 0x2c
   251b0:	blx	r6
   251b4:	cmp	r0, #0
   251b8:	bne	251e0 <flatcc_builder_create_vector@@Base+0x108>
   251bc:	mov	r0, r5
   251c0:	str	r5, [r4, #136]	; 0x88
   251c4:	add	sp, sp, #88	; 0x58
   251c8:	pop	{r4, r5, r6, pc}
   251cc:	ldr	r3, [pc, #40]	; 251fc <flatcc_builder_create_vector@@Base+0x124>
   251d0:	ldr	r2, [pc, #40]	; 25200 <flatcc_builder_create_vector@@Base+0x128>
   251d4:	ldr	r1, [pc, #40]	; 25204 <flatcc_builder_create_vector@@Base+0x12c>
   251d8:	ldr	r0, [pc, #40]	; 25208 <flatcc_builder_create_vector@@Base+0x130>
   251dc:	bl	126a8 <__assert_fail@plt>
   251e0:	ldr	r3, [pc, #36]	; 2520c <flatcc_builder_create_vector@@Base+0x134>
   251e4:	ldr	r2, [pc, #36]	; 25210 <flatcc_builder_create_vector@@Base+0x138>
   251e8:	ldr	r1, [pc, #20]	; 25204 <flatcc_builder_create_vector@@Base+0x12c>
   251ec:	ldr	r0, [pc, #32]	; 25214 <flatcc_builder_create_vector@@Base+0x13c>
   251f0:	bl	126a8 <__assert_fail@plt>
   251f4:	bl	128a8 <__assert_fail@plt+0x200>
   251f8:	andeq	lr, r2, r0, lsr ip
   251fc:	andeq	pc, r2, r4, lsl r1	; <UNPREDICTABLE>
   25200:	andeq	r0, r0, r5, asr r5
   25204:	andeq	pc, r2, r8, ror #5
   25208:	andeq	pc, r2, r0, ror #11
   2520c:			; <UNDEFINED> instruction: 0x0002ebb4
   25210:	andeq	r0, r0, fp, lsl #5
   25214:	andeq	pc, r2, r8, lsr #7

00025218 <flatcc_builder_end_vector@@Base>:
   25218:	ldr	r3, [r0, #32]
   2521c:	push	{r4, r5, r6, lr}
   25220:	sub	sp, sp, #88	; 0x58
   25224:	ldrh	r2, [r3, #14]
   25228:	cmp	r2, #4
   2522c:	bne	253d0 <flatcc_builder_end_vector@@Base+0x1b8>
   25230:	ldr	lr, [r3, #20]
   25234:	ldr	r2, [r3, #24]
   25238:	ldr	r1, [r3, #16]
   2523c:	cmp	lr, r2
   25240:	mov	r4, r0
   25244:	ldr	r5, [r0, #16]
   25248:	ldrh	r3, [r0, #130]	; 0x82
   2524c:	bhi	253bc <flatcc_builder_end_vector@@Base+0x1a4>
   25250:	ldrh	r2, [r0, #128]	; 0x80
   25254:	mul	r1, r1, lr
   25258:	cmp	r3, #4
   2525c:	movcc	r3, #4
   25260:	ldr	ip, [r0, #136]	; 0x88
   25264:	cmp	r2, r3
   25268:	strhcc	r3, [r0, #128]	; 0x80
   2526c:	sub	r2, r3, #1
   25270:	sub	r0, ip, r1
   25274:	cmp	r1, #0
   25278:	mov	r3, #4
   2527c:	and	r0, r0, r2
   25280:	mov	r2, #1
   25284:	str	r3, [sp, #16]
   25288:	str	r2, [sp, #20]
   2528c:	str	r3, [sp, #28]
   25290:	movne	r2, #2
   25294:	addne	r3, r1, r3
   25298:	strne	r1, [sp, #36]	; 0x24
   2529c:	str	lr, [sp, #12]
   252a0:	strne	r5, [sp, #32]
   252a4:	add	lr, sp, #12
   252a8:	strne	r3, [sp, #16]
   252ac:	strne	r2, [sp, #20]
   252b0:	movne	r1, #3
   252b4:	moveq	r1, #2
   252b8:	cmp	r0, #0
   252bc:	str	lr, [sp, #24]
   252c0:	beq	252ec <flatcc_builder_end_vector@@Base+0xd4>
   252c4:	add	r2, r2, #1
   252c8:	add	lr, sp, #88	; 0x58
   252cc:	add	lr, lr, r2, lsl #3
   252d0:	ldr	r5, [pc, #268]	; 253e4 <flatcc_builder_end_vector@@Base+0x1cc>
   252d4:	mov	r2, r1
   252d8:	add	r3, r3, r0
   252dc:	str	r0, [lr, #-68]	; 0xffffffbc
   252e0:	str	r3, [sp, #16]
   252e4:	str	r1, [sp, #20]
   252e8:	str	r5, [lr, #-72]	; 0xffffffb8
   252ec:	sub	r5, ip, r3
   252f0:	cmp	ip, r5
   252f4:	ble	253b8 <flatcc_builder_end_vector@@Base+0x1a0>
   252f8:	ldr	r0, [r4, #36]	; 0x24
   252fc:	add	r1, sp, #24
   25300:	str	r3, [sp]
   25304:	mov	r3, r5
   25308:	ldr	r6, [r4, #44]	; 0x2c
   2530c:	blx	r6
   25310:	subs	r1, r0, #0
   25314:	bne	253a4 <flatcc_builder_end_vector@@Base+0x18c>
   25318:	cmp	r5, #0
   2531c:	str	r5, [r4, #136]	; 0x88
   25320:	beq	25398 <flatcc_builder_end_vector@@Base+0x180>
   25324:	ldr	r2, [r4, #20]
   25328:	ldr	r0, [r4, #16]
   2532c:	bl	12654 <memset@plt>
   25330:	ldr	r3, [r4, #32]
   25334:	ldr	r2, [r4, #64]	; 0x40
   25338:	ldrh	lr, [r4, #130]	; 0x82
   2533c:	ldr	ip, [r3]
   25340:	ldr	r1, [r3, #4]
   25344:	ldrh	r0, [r4, #128]	; 0x80
   25348:	sub	r2, r2, ip
   2534c:	cmp	r2, r1
   25350:	movcs	r2, r1
   25354:	cmp	r0, lr
   25358:	ldr	r0, [r4, #60]	; 0x3c
   2535c:	ldr	r6, [r3, #8]
   25360:	str	r2, [r4, #24]
   25364:	add	r2, r0, ip
   25368:	str	r2, [r4, #16]
   2536c:	str	r6, [r4, #20]
   25370:	ldr	r2, [r4, #156]	; 0x9c
   25374:	str	ip, [r4, #28]
   25378:	str	r1, [r3, #4]
   2537c:	strhcc	lr, [r4, #128]	; 0x80
   25380:	ldrh	r1, [r3, #12]
   25384:	sub	r2, r2, #1
   25388:	sub	r3, r3, #36	; 0x24
   2538c:	str	r2, [r4, #156]	; 0x9c
   25390:	strh	r1, [r4, #130]	; 0x82
   25394:	str	r3, [r4, #32]
   25398:	mov	r0, r5
   2539c:	add	sp, sp, #88	; 0x58
   253a0:	pop	{r4, r5, r6, pc}
   253a4:	ldr	r3, [pc, #60]	; 253e8 <flatcc_builder_end_vector@@Base+0x1d0>
   253a8:	ldr	r2, [pc, #60]	; 253ec <flatcc_builder_end_vector@@Base+0x1d4>
   253ac:	ldr	r1, [pc, #60]	; 253f0 <flatcc_builder_end_vector@@Base+0x1d8>
   253b0:	ldr	r0, [pc, #60]	; 253f4 <flatcc_builder_end_vector@@Base+0x1dc>
   253b4:	bl	126a8 <__assert_fail@plt>
   253b8:	bl	128a8 <__assert_fail@plt+0x200>
   253bc:	ldr	r3, [pc, #52]	; 253f8 <flatcc_builder_end_vector@@Base+0x1e0>
   253c0:	ldr	r2, [pc, #52]	; 253fc <flatcc_builder_end_vector@@Base+0x1e4>
   253c4:	ldr	r1, [pc, #36]	; 253f0 <flatcc_builder_end_vector@@Base+0x1d8>
   253c8:	ldr	r0, [pc, #48]	; 25400 <flatcc_builder_end_vector@@Base+0x1e8>
   253cc:	bl	126a8 <__assert_fail@plt>
   253d0:	ldr	r3, [pc, #44]	; 25404 <flatcc_builder_end_vector@@Base+0x1ec>
   253d4:	ldr	r2, [pc, #44]	; 25408 <flatcc_builder_end_vector@@Base+0x1f0>
   253d8:	ldr	r1, [pc, #16]	; 253f0 <flatcc_builder_end_vector@@Base+0x1d8>
   253dc:	ldr	r0, [pc, #40]	; 2540c <flatcc_builder_end_vector@@Base+0x1f4>
   253e0:	bl	126a8 <__assert_fail@plt>
   253e4:	andeq	lr, r2, r0, lsr ip
   253e8:			; <UNDEFINED> instruction: 0x0002ebb4
   253ec:	andeq	r0, r0, fp, lsl #5
   253f0:	andeq	pc, r2, r8, ror #5
   253f4:	andeq	pc, r2, r8, lsr #7
   253f8:	andeq	pc, r2, r4, lsl r1	; <UNPREDICTABLE>
   253fc:	andeq	r0, r0, r5, asr r5
   25400:	andeq	pc, r2, r0, ror #11
   25404:	andeq	pc, r2, r4, lsr r1	; <UNPREDICTABLE>
   25408:	andeq	r0, r0, r8, ror r5
   2540c:	andeq	pc, r2, r4, asr r4	; <UNPREDICTABLE>

00025410 <flatcc_builder_vector_count@@Base>:
   25410:	ldr	r3, [r0, #32]
   25414:	ldr	r0, [r3, #20]
   25418:	bx	lr

0002541c <flatcc_builder_vector_edit@@Base>:
   2541c:	ldr	r0, [r0, #16]
   25420:	bx	lr

00025424 <flatcc_builder_create_offset_vector_direct@@Base>:
   25424:	cmn	r2, #-1073741823	; 0xc0000001
   25428:	bls	25434 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   2542c:	mov	r0, #0
   25430:	bx	lr
   25434:	b	21bf8 <flatcc_builder_default_alloc@@Base+0x2fc>

00025438 <flatcc_builder_end_offset_vector@@Base>:
   25438:	ldr	r3, [r0, #32]
   2543c:	push	{r4, r5, r6, lr}
   25440:	ldrh	r2, [r3, #14]
   25444:	cmp	r2, #5
   25448:	bne	254f8 <flatcc_builder_end_offset_vector@@Base+0xc0>
   2544c:	ldr	r2, [r3, #20]
   25450:	cmn	r2, #-1073741823	; 0xc0000001
   25454:	bls	25464 <flatcc_builder_end_offset_vector@@Base+0x2c>
   25458:	mov	r5, #0
   2545c:	mov	r0, r5
   25460:	pop	{r4, r5, r6, pc}
   25464:	ldr	r1, [r0, #16]
   25468:	mov	r4, r0
   2546c:	bl	21bf8 <flatcc_builder_default_alloc@@Base+0x2fc>
   25470:	subs	r5, r0, #0
   25474:	beq	25458 <flatcc_builder_end_offset_vector@@Base+0x20>
   25478:	ldr	r2, [r4, #20]
   2547c:	mov	r1, #0
   25480:	ldr	r0, [r4, #16]
   25484:	bl	12654 <memset@plt>
   25488:	ldr	r3, [r4, #32]
   2548c:	ldr	r2, [r4, #64]	; 0x40
   25490:	ldrh	lr, [r4, #130]	; 0x82
   25494:	ldr	ip, [r3]
   25498:	ldr	r1, [r3, #4]
   2549c:	ldrh	r0, [r4, #128]	; 0x80
   254a0:	sub	r2, r2, ip
   254a4:	cmp	r2, r1
   254a8:	movcs	r2, r1
   254ac:	cmp	r0, lr
   254b0:	ldr	r0, [r4, #60]	; 0x3c
   254b4:	ldr	r6, [r3, #8]
   254b8:	str	r2, [r4, #24]
   254bc:	add	r2, r0, ip
   254c0:	str	r2, [r4, #16]
   254c4:	str	r6, [r4, #20]
   254c8:	ldr	r2, [r4, #156]	; 0x9c
   254cc:	str	ip, [r4, #28]
   254d0:	str	r1, [r3, #4]
   254d4:	strhcc	lr, [r4, #128]	; 0x80
   254d8:	ldrh	r1, [r3, #12]
   254dc:	sub	r2, r2, #1
   254e0:	sub	r3, r3, #36	; 0x24
   254e4:	str	r2, [r4, #156]	; 0x9c
   254e8:	strh	r1, [r4, #130]	; 0x82
   254ec:	str	r3, [r4, #32]
   254f0:	mov	r0, r5
   254f4:	pop	{r4, r5, r6, pc}
   254f8:	ldr	r3, [pc, #12]	; 2550c <flatcc_builder_end_offset_vector@@Base+0xd4>
   254fc:	ldr	r2, [pc, #12]	; 25510 <flatcc_builder_end_offset_vector@@Base+0xd8>
   25500:	ldr	r1, [pc, #12]	; 25514 <flatcc_builder_end_offset_vector@@Base+0xdc>
   25504:	ldr	r0, [pc, #12]	; 25518 <flatcc_builder_end_offset_vector@@Base+0xe0>
   25508:	bl	126a8 <__assert_fail@plt>
   2550c:	andeq	pc, r2, r4, lsr #32
   25510:	andeq	r0, r0, r8, asr #11
   25514:	andeq	pc, r2, r8, ror #5
   25518:	andeq	pc, r2, r0, asr #9

0002551c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2551c:	ldr	r2, [r0, #32]
   25520:	push	{r4, r5, r6, lr}
   25524:	ldrh	ip, [r2, #14]
   25528:	cmp	ip, #5
   2552c:	bne	255e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   25530:	ldr	r2, [r2, #20]
   25534:	cmn	r2, #-1073741823	; 0xc0000001
   25538:	bls	25548 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   2553c:	mov	r5, #0
   25540:	mov	r0, r5
   25544:	pop	{r4, r5, r6, pc}
   25548:	mov	r3, r1
   2554c:	ldr	r1, [r0, #16]
   25550:	mov	r4, r0
   25554:	bl	21a08 <flatcc_builder_default_alloc@@Base+0x10c>
   25558:	subs	r5, r0, #0
   2555c:	beq	2553c <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   25560:	ldr	r2, [r4, #20]
   25564:	mov	r1, #0
   25568:	ldr	r0, [r4, #16]
   2556c:	bl	12654 <memset@plt>
   25570:	ldr	r3, [r4, #32]
   25574:	ldr	r2, [r4, #64]	; 0x40
   25578:	ldrh	lr, [r4, #130]	; 0x82
   2557c:	ldr	ip, [r3]
   25580:	ldr	r1, [r3, #4]
   25584:	ldrh	r0, [r4, #128]	; 0x80
   25588:	sub	r2, r2, ip
   2558c:	cmp	r2, r1
   25590:	movcs	r2, r1
   25594:	cmp	r0, lr
   25598:	ldr	r0, [r4, #60]	; 0x3c
   2559c:	ldr	r6, [r3, #8]
   255a0:	str	r2, [r4, #24]
   255a4:	add	r2, r0, ip
   255a8:	str	r2, [r4, #16]
   255ac:	str	r6, [r4, #20]
   255b0:	ldr	r2, [r4, #156]	; 0x9c
   255b4:	str	ip, [r4, #28]
   255b8:	str	r1, [r3, #4]
   255bc:	strhcc	lr, [r4, #128]	; 0x80
   255c0:	ldrh	r1, [r3, #12]
   255c4:	sub	r2, r2, #1
   255c8:	sub	r3, r3, #36	; 0x24
   255cc:	str	r2, [r4, #156]	; 0x9c
   255d0:	strh	r1, [r4, #130]	; 0x82
   255d4:	str	r3, [r4, #32]
   255d8:	mov	r0, r5
   255dc:	pop	{r4, r5, r6, pc}
   255e0:	ldr	r3, [pc, #12]	; 255f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   255e4:	ldr	r2, [pc, #12]	; 255f8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   255e8:	ldr	r1, [pc, #12]	; 255fc <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   255ec:	ldr	r0, [pc, #12]	; 25600 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   255f0:	bl	126a8 <__assert_fail@plt>
   255f4:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   255f8:	ldrdeq	r0, [r0], -r5
   255fc:	andeq	pc, r2, r8, ror #5
   25600:	andeq	pc, r2, r0, asr #9

00025604 <flatcc_builder_offset_vector_edit@@Base>:
   25604:	ldr	r0, [r0, #16]
   25608:	bx	lr

0002560c <flatcc_builder_offset_vector_count@@Base>:
   2560c:	ldr	r3, [r0, #32]
   25610:	ldr	r0, [r3, #20]
   25614:	bx	lr

00025618 <flatcc_builder_create_union_vector@@Base>:
   25618:	push	{r4, r5, r6, r7, r8, r9, lr}
   2561c:	mov	r6, r0
   25620:	ldr	r0, [r1, #156]	; 0x9c
   25624:	ldr	ip, [r1, #160]	; 0xa0
   25628:	mov	r4, r1
   2562c:	add	r1, r0, #1
   25630:	cmp	r1, ip
   25634:	sub	sp, sp, #12
   25638:	mov	r5, r2
   2563c:	mov	r7, r3
   25640:	str	r1, [r4, #156]	; 0x9c
   25644:	ble	256cc <flatcc_builder_create_union_vector@@Base+0xb4>
   25648:	ldr	r3, [r4, #176]	; 0xb0
   2564c:	cmp	r1, r3
   25650:	cmpgt	r3, #0
   25654:	movgt	r3, #1
   25658:	movle	r3, #0
   2565c:	bgt	256b4 <flatcc_builder_create_union_vector@@Base+0x9c>
   25660:	add	r0, r0, r0, lsl #3
   25664:	ldr	r1, [r4, #88]	; 0x58
   25668:	lsl	r8, r0, #2
   2566c:	add	r2, r8, #36	; 0x24
   25670:	cmp	r2, r1
   25674:	bhi	258e8 <flatcc_builder_create_union_vector@@Base+0x2d0>
   25678:	ldr	r3, [r4, #84]	; 0x54
   2567c:	add	r3, r3, r8
   25680:	cmp	r3, #0
   25684:	str	r3, [r4, #32]
   25688:	beq	256b4 <flatcc_builder_create_union_vector@@Base+0x9c>
   2568c:	ldr	r2, [r4, #88]	; 0x58
   25690:	ldr	r0, [pc, #732]	; 25974 <flatcc_builder_create_union_vector@@Base+0x35c>
   25694:	ldr	r1, [r4, #176]	; 0xb0
   25698:	umull	r0, r2, r0, r2
   2569c:	lsr	r2, r2, #3
   256a0:	cmp	r1, #0
   256a4:	cmpgt	r2, r1
   256a8:	str	r2, [r4, #160]	; 0xa0
   256ac:	strgt	r1, [r4, #160]	; 0xa0
   256b0:	b	256d8 <flatcc_builder_create_union_vector@@Base+0xc0>
   256b4:	mov	r3, #0
   256b8:	mov	r0, r6
   256bc:	str	r3, [r6]
   256c0:	str	r3, [r6, #4]
   256c4:	add	sp, sp, #12
   256c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   256cc:	ldr	r3, [r4, #32]
   256d0:	add	r3, r3, #36	; 0x24
   256d4:	str	r3, [r4, #32]
   256d8:	ldr	r1, [r4, #20]
   256dc:	ldr	ip, [r4, #28]
   256e0:	ldrh	r8, [r4, #130]	; 0x82
   256e4:	add	r2, r1, ip
   256e8:	mvn	lr, #3
   256ec:	add	r2, r2, #7
   256f0:	str	r1, [r3, #8]
   256f4:	bic	r2, r2, #7
   256f8:	mov	r0, #4
   256fc:	mov	r1, #0
   25700:	strh	r8, [r3, #12]
   25704:	strh	r0, [r4, #130]	; 0x82
   25708:	stm	r3, {ip, lr}
   2570c:	str	r1, [r4, #20]
   25710:	str	r2, [r4, #28]
   25714:	str	r0, [r3, #16]
   25718:	str	r1, [r3, #20]
   2571c:	ldr	r0, [r4, #64]	; 0x40
   25720:	ldr	r1, [r4, #60]	; 0x3c
   25724:	sub	r0, r0, r2
   25728:	cmp	r0, lr
   2572c:	mov	ip, #5
   25730:	strh	ip, [r3, #14]
   25734:	add	r1, r1, r2
   25738:	strls	r0, [r4, #24]
   2573c:	strhi	lr, [r4, #24]
   25740:	movhi	r0, lr
   25744:	mvn	r8, #3
   25748:	cmn	r7, #-1073741823	; 0xc0000001
   2574c:	str	r1, [r4, #16]
   25750:	str	r8, [r3, #4]
   25754:	bhi	25968 <flatcc_builder_create_union_vector@@Base+0x350>
   25758:	lsl	ip, r7, #2
   2575c:	cmp	ip, r0
   25760:	str	r7, [r3, #20]
   25764:	str	ip, [r4, #20]
   25768:	bcs	25890 <flatcc_builder_create_union_vector@@Base+0x278>
   2576c:	cmp	r1, #0
   25770:	beq	256b4 <flatcc_builder_create_union_vector@@Base+0x9c>
   25774:	ldr	r8, [r4, #20]
   25778:	ldr	r0, [r4, #24]
   2577c:	add	r3, r7, r8
   25780:	cmp	r3, r0
   25784:	str	r3, [r4, #20]
   25788:	bcs	2590c <flatcc_builder_create_union_vector@@Base+0x2f4>
   2578c:	adds	r8, r1, r8
   25790:	beq	256b4 <flatcc_builder_create_union_vector@@Base+0x9c>
   25794:	cmp	r7, #0
   25798:	movne	r2, r5
   2579c:	addne	lr, r2, r7, lsl #3
   257a0:	subne	r0, r8, #1
   257a4:	subne	r3, r1, #4
   257a8:	beq	257c8 <flatcc_builder_create_union_vector@@Base+0x1b0>
   257ac:	ldrb	ip, [r2]
   257b0:	add	r2, r2, #8
   257b4:	strb	ip, [r0, #1]!
   257b8:	ldr	ip, [r2, #-4]
   257bc:	cmp	lr, r2
   257c0:	str	ip, [r3, #4]!
   257c4:	bne	257ac <flatcc_builder_create_union_vector@@Base+0x194>
   257c8:	mov	r3, r8
   257cc:	mov	r2, r7
   257d0:	mov	r0, r4
   257d4:	bl	21a08 <flatcc_builder_default_alloc@@Base+0x10c>
   257d8:	subs	r5, r0, #0
   257dc:	beq	2596c <flatcc_builder_create_union_vector@@Base+0x354>
   257e0:	mvn	r0, #0
   257e4:	mov	r3, #1
   257e8:	mov	r2, r7
   257ec:	str	r0, [sp, #4]
   257f0:	mov	r1, r8
   257f4:	str	r3, [sp]
   257f8:	mov	r0, r4
   257fc:	bl	250d8 <flatcc_builder_create_vector@@Base>
   25800:	mov	r7, r0
   25804:	ldr	r2, [r4, #20]
   25808:	mov	r1, #0
   2580c:	ldr	r0, [r4, #16]
   25810:	bl	12654 <memset@plt>
   25814:	ldr	r3, [r4, #32]
   25818:	ldr	r2, [r4, #64]	; 0x40
   2581c:	ldrh	lr, [r4, #130]	; 0x82
   25820:	ldr	ip, [r3]
   25824:	ldr	r1, [r3, #4]
   25828:	ldrh	r0, [r4, #128]	; 0x80
   2582c:	sub	r2, r2, ip
   25830:	cmp	r2, r1
   25834:	movcs	r2, r1
   25838:	cmp	r0, lr
   2583c:	ldr	r0, [r4, #60]	; 0x3c
   25840:	ldr	r8, [r3, #8]
   25844:	str	r2, [r4, #24]
   25848:	add	r2, r0, ip
   2584c:	str	r2, [r4, #16]
   25850:	str	r8, [r4, #20]
   25854:	ldr	r2, [r4, #156]	; 0x9c
   25858:	str	ip, [r4, #28]
   2585c:	str	r1, [r3, #4]
   25860:	strhcc	lr, [r4, #128]	; 0x80
   25864:	ldrh	r1, [r3, #12]
   25868:	sub	r2, r2, #1
   2586c:	sub	r3, r3, #36	; 0x24
   25870:	mov	r0, r6
   25874:	str	r7, [r6]
   25878:	str	r5, [r6, #4]
   2587c:	str	r2, [r4, #156]	; 0x9c
   25880:	strh	r1, [r4, #130]	; 0x82
   25884:	str	r3, [r4, #32]
   25888:	add	sp, sp, #12
   2588c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25890:	add	ip, ip, #1
   25894:	mov	r3, #1
   25898:	ldr	r0, [r4, #40]	; 0x28
   2589c:	add	r2, ip, r2
   258a0:	str	r3, [sp]
   258a4:	add	r1, r4, #60	; 0x3c
   258a8:	ldr	r9, [r4, #48]	; 0x30
   258ac:	blx	r9
   258b0:	cmp	r0, #0
   258b4:	bne	256b4 <flatcc_builder_create_union_vector@@Base+0x9c>
   258b8:	ldr	r2, [r4, #28]
   258bc:	ldr	r3, [r4, #64]	; 0x40
   258c0:	ldr	r1, [r4, #60]	; 0x3c
   258c4:	sub	r3, r3, r2
   258c8:	ldr	r0, [r4, #32]
   258cc:	cmn	r3, #4
   258d0:	movhi	r3, r8
   258d4:	add	r1, r1, r2
   258d8:	str	r3, [r4, #24]
   258dc:	str	r1, [r4, #16]
   258e0:	str	r8, [r0, #4]
   258e4:	b	2576c <flatcc_builder_create_union_vector@@Base+0x154>
   258e8:	mov	r1, #4
   258ec:	ldr	r0, [r4, #40]	; 0x28
   258f0:	str	r1, [sp]
   258f4:	add	r1, r4, #84	; 0x54
   258f8:	ldr	r9, [r4, #48]	; 0x30
   258fc:	blx	r9
   25900:	cmp	r0, #0
   25904:	beq	25678 <flatcc_builder_create_union_vector@@Base+0x60>
   25908:	bl	1285c <__assert_fail@plt+0x1b4>
   2590c:	add	r1, r3, #1
   25910:	mov	r3, #1
   25914:	ldr	r0, [r4, #40]	; 0x28
   25918:	add	r2, r1, r2
   2591c:	str	r3, [sp]
   25920:	add	r1, r4, #60	; 0x3c
   25924:	ldr	r9, [r4, #48]	; 0x30
   25928:	blx	r9
   2592c:	cmp	r0, #0
   25930:	bne	256b4 <flatcc_builder_create_union_vector@@Base+0x9c>
   25934:	ldr	r2, [r4, #28]
   25938:	ldr	r3, [r4, #64]	; 0x40
   2593c:	ldr	r1, [r4, #60]	; 0x3c
   25940:	sub	r3, r3, r2
   25944:	cmn	r3, #4
   25948:	mvnhi	r3, #3
   2594c:	str	r3, [r4, #24]
   25950:	ldr	r3, [r4, #32]
   25954:	add	r1, r1, r2
   25958:	mvn	r2, #3
   2595c:	str	r1, [r4, #16]
   25960:	str	r2, [r3, #4]
   25964:	b	2578c <flatcc_builder_create_union_vector@@Base+0x174>
   25968:	bl	128d0 <__assert_fail@plt+0x228>
   2596c:	mov	r7, r5
   25970:	b	25804 <flatcc_builder_create_union_vector@@Base+0x1ec>
   25974:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00025978 <flatcc_builder_create_union_vector_direct@@Base>:
   25978:	push	{r4, r5, r6, r7, r8, lr}
   2597c:	sub	sp, sp, #88	; 0x58
   25980:	mov	r4, r0
   25984:	ldr	r5, [sp, #112]	; 0x70
   25988:	cmn	r5, #-1073741823	; 0xc0000001
   2598c:	bls	259a8 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   25990:	mov	r3, #0
   25994:	mov	r0, r4
   25998:	str	r3, [r4]
   2599c:	str	r3, [r4, #4]
   259a0:	add	sp, sp, #88	; 0x58
   259a4:	pop	{r4, r5, r6, r7, r8, pc}
   259a8:	mov	r6, r1
   259ac:	mov	r8, r2
   259b0:	mov	r1, r3
   259b4:	mov	r0, r6
   259b8:	mov	r3, r2
   259bc:	mov	r2, r5
   259c0:	bl	21a08 <flatcc_builder_default_alloc@@Base+0x10c>
   259c4:	subs	r7, r0, #0
   259c8:	beq	25990 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   259cc:	ldrh	r3, [r6, #128]	; 0x80
   259d0:	ldr	r0, [r6, #136]	; 0x88
   259d4:	mov	r2, #1
   259d8:	cmp	r3, #3
   259dc:	movls	r3, #4
   259e0:	strhls	r3, [r6, #128]	; 0x80
   259e4:	sub	r1, r0, r5
   259e8:	cmp	r5, #0
   259ec:	mov	r3, #4
   259f0:	add	ip, sp, #12
   259f4:	str	r3, [sp, #16]
   259f8:	str	r2, [sp, #20]
   259fc:	and	r1, r1, #3
   25a00:	movne	r2, #2
   25a04:	str	r3, [sp, #28]
   25a08:	addne	r3, r5, r3
   25a0c:	str	ip, [sp, #24]
   25a10:	strne	r8, [sp, #32]
   25a14:	strne	r5, [sp, #36]	; 0x24
   25a18:	strne	r3, [sp, #16]
   25a1c:	strne	r2, [sp, #20]
   25a20:	movne	ip, #3
   25a24:	moveq	ip, #2
   25a28:	cmp	r1, #0
   25a2c:	str	r5, [sp, #12]
   25a30:	beq	25a5c <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   25a34:	add	r2, r2, #1
   25a38:	add	lr, sp, #88	; 0x58
   25a3c:	add	lr, lr, r2, lsl #3
   25a40:	ldr	r5, [pc, #108]	; 25ab4 <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   25a44:	mov	r2, ip
   25a48:	add	r3, r3, r1
   25a4c:	str	r1, [lr, #-68]	; 0xffffffbc
   25a50:	str	r3, [sp, #16]
   25a54:	str	ip, [sp, #20]
   25a58:	str	r5, [lr, #-72]	; 0xffffffb8
   25a5c:	sub	r5, r0, r3
   25a60:	cmp	r0, r5
   25a64:	ble	25a9c <flatcc_builder_create_union_vector_direct@@Base+0x124>
   25a68:	ldr	r0, [r6, #36]	; 0x24
   25a6c:	add	r1, sp, #24
   25a70:	str	r3, [sp]
   25a74:	mov	r3, r5
   25a78:	ldr	r8, [r6, #44]	; 0x2c
   25a7c:	blx	r8
   25a80:	cmp	r0, #0
   25a84:	bne	25aa0 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   25a88:	mov	r0, r4
   25a8c:	str	r5, [r6, #136]	; 0x88
   25a90:	stm	r4, {r5, r7}
   25a94:	add	sp, sp, #88	; 0x58
   25a98:	pop	{r4, r5, r6, r7, r8, pc}
   25a9c:	bl	128a8 <__assert_fail@plt+0x200>
   25aa0:	ldr	r3, [pc, #16]	; 25ab8 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   25aa4:	ldr	r2, [pc, #16]	; 25abc <flatcc_builder_create_union_vector_direct@@Base+0x144>
   25aa8:	ldr	r1, [pc, #16]	; 25ac0 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   25aac:	ldr	r0, [pc, #16]	; 25ac4 <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   25ab0:	bl	126a8 <__assert_fail@plt>
   25ab4:	andeq	lr, r2, r0, lsr ip
   25ab8:			; <UNDEFINED> instruction: 0x0002ebb4
   25abc:	andeq	r0, r0, fp, lsl #5
   25ac0:	andeq	pc, r2, r8, ror #5
   25ac4:	andeq	pc, r2, r8, lsr #7

00025ac8 <flatcc_builder_start_union_vector@@Base>:
   25ac8:	ldr	r1, [r0, #156]	; 0x9c
   25acc:	ldr	r3, [r0, #160]	; 0xa0
   25ad0:	add	r2, r1, #1
   25ad4:	cmp	r2, r3
   25ad8:	push	{r4, r5, r6, lr}
   25adc:	mov	r4, r0
   25ae0:	sub	sp, sp, #8
   25ae4:	str	r2, [r0, #156]	; 0x9c
   25ae8:	ble	25b58 <flatcc_builder_start_union_vector@@Base+0x90>
   25aec:	ldr	r3, [r0, #176]	; 0xb0
   25af0:	cmp	r3, #0
   25af4:	cmpgt	r2, r3
   25af8:	movgt	r3, #1
   25afc:	movle	r3, #0
   25b00:	bgt	25c04 <flatcc_builder_start_union_vector@@Base+0x13c>
   25b04:	add	r1, r1, r1, lsl #3
   25b08:	ldr	r0, [r0, #88]	; 0x58
   25b0c:	lsl	r5, r1, #2
   25b10:	add	r2, r5, #36	; 0x24
   25b14:	cmp	r2, r0
   25b18:	bhi	25be0 <flatcc_builder_start_union_vector@@Base+0x118>
   25b1c:	ldr	r3, [r4, #84]	; 0x54
   25b20:	add	r3, r3, r5
   25b24:	cmp	r3, #0
   25b28:	str	r3, [r4, #32]
   25b2c:	beq	25c04 <flatcc_builder_start_union_vector@@Base+0x13c>
   25b30:	ldr	r2, [r4, #88]	; 0x58
   25b34:	ldr	r0, [pc, #208]	; 25c0c <flatcc_builder_start_union_vector@@Base+0x144>
   25b38:	ldr	r1, [r4, #176]	; 0xb0
   25b3c:	umull	r0, r2, r0, r2
   25b40:	lsr	r2, r2, #3
   25b44:	cmp	r1, #0
   25b48:	cmpgt	r2, r1
   25b4c:	str	r2, [r4, #160]	; 0xa0
   25b50:	strgt	r1, [r4, #160]	; 0xa0
   25b54:	b	25b64 <flatcc_builder_start_union_vector@@Base+0x9c>
   25b58:	ldr	r3, [r0, #32]
   25b5c:	add	r3, r3, #36	; 0x24
   25b60:	str	r3, [r0, #32]
   25b64:	ldr	ip, [r4, #20]
   25b68:	ldr	r1, [r4, #28]
   25b6c:	ldrh	r5, [r4, #130]	; 0x82
   25b70:	add	r2, ip, r1
   25b74:	add	r2, r2, #7
   25b78:	str	ip, [r3, #8]
   25b7c:	bic	r2, r2, #7
   25b80:	mov	lr, #4
   25b84:	mov	r0, #0
   25b88:	mov	ip, #8
   25b8c:	strh	r5, [r3, #12]
   25b90:	strh	lr, [r4, #130]	; 0x82
   25b94:	str	r1, [r3]
   25b98:	str	r2, [r4, #28]
   25b9c:	str	r0, [r4, #20]
   25ba0:	str	r0, [r3, #20]
   25ba4:	str	ip, [r3, #16]
   25ba8:	ldr	r1, [r4, #64]	; 0x40
   25bac:	ldr	ip, [r4, #60]	; 0x3c
   25bb0:	sub	r1, r1, r2
   25bb4:	mvn	lr, #3
   25bb8:	cmp	r1, lr
   25bbc:	add	r2, ip, r2
   25bc0:	movhi	r1, lr
   25bc4:	mov	ip, #7
   25bc8:	strh	ip, [r3, #14]
   25bcc:	str	r2, [r4, #16]
   25bd0:	str	r1, [r4, #24]
   25bd4:	str	lr, [r3, #4]
   25bd8:	add	sp, sp, #8
   25bdc:	pop	{r4, r5, r6, pc}
   25be0:	mov	r1, #4
   25be4:	ldr	r0, [r4, #40]	; 0x28
   25be8:	str	r1, [sp]
   25bec:	add	r1, r4, #84	; 0x54
   25bf0:	ldr	r6, [r4, #48]	; 0x30
   25bf4:	blx	r6
   25bf8:	cmp	r0, #0
   25bfc:	beq	25b1c <flatcc_builder_start_union_vector@@Base+0x54>
   25c00:	bl	1285c <__assert_fail@plt+0x1b4>
   25c04:	mvn	r0, #0
   25c08:	b	25bd8 <flatcc_builder_start_union_vector@@Base+0x110>
   25c0c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00025c10 <flatcc_builder_end_union_vector@@Base>:
   25c10:	ldr	r3, [r1, #32]
   25c14:	push	{r4, r5, r6, r7, r8, r9, lr}
   25c18:	sub	sp, sp, #12
   25c1c:	ldrh	r2, [r3, #14]
   25c20:	cmp	r2, #7
   25c24:	bne	25de4 <flatcc_builder_end_union_vector@@Base+0x1d4>
   25c28:	ldr	r5, [r3, #20]
   25c2c:	ldr	r8, [r1, #20]
   25c30:	ldr	r3, [r1, #24]
   25c34:	lsl	r7, r5, #2
   25c38:	add	r2, r7, r5
   25c3c:	add	r2, r2, r8
   25c40:	cmp	r2, r3
   25c44:	mov	r4, r1
   25c48:	mov	r6, r0
   25c4c:	str	r2, [r1, #20]
   25c50:	bcs	25d2c <flatcc_builder_end_union_vector@@Base+0x11c>
   25c54:	ldr	r3, [r1, #16]
   25c58:	adds	r1, r3, r8
   25c5c:	beq	25dcc <flatcc_builder_end_union_vector@@Base+0x1bc>
   25c60:	cmp	r5, #0
   25c64:	add	r7, r1, r7
   25c68:	addne	lr, r3, r5, lsl #3
   25c6c:	subne	r0, r7, #1
   25c70:	subne	r2, r1, #4
   25c74:	beq	25d8c <flatcc_builder_end_union_vector@@Base+0x17c>
   25c78:	ldrb	ip, [r3]
   25c7c:	add	r3, r3, #8
   25c80:	strb	ip, [r0, #1]!
   25c84:	ldr	ip, [r3, #-4]
   25c88:	cmp	lr, r3
   25c8c:	str	ip, [r2, #4]!
   25c90:	bne	25c78 <flatcc_builder_end_union_vector@@Base+0x68>
   25c94:	cmn	r5, #-1073741823	; 0xc0000001
   25c98:	bls	25d8c <flatcc_builder_end_union_vector@@Base+0x17c>
   25c9c:	mov	r8, #0
   25ca0:	mov	r5, r8
   25ca4:	ldr	r2, [r4, #20]
   25ca8:	mov	r1, #0
   25cac:	ldr	r0, [r4, #16]
   25cb0:	bl	12654 <memset@plt>
   25cb4:	ldr	r3, [r4, #32]
   25cb8:	ldr	r2, [r4, #64]	; 0x40
   25cbc:	ldrh	lr, [r4, #130]	; 0x82
   25cc0:	ldr	ip, [r3]
   25cc4:	ldr	r1, [r3, #4]
   25cc8:	ldrh	r0, [r4, #128]	; 0x80
   25ccc:	sub	r2, r2, ip
   25cd0:	cmp	r2, r1
   25cd4:	movcs	r2, r1
   25cd8:	cmp	r0, lr
   25cdc:	ldr	r0, [r4, #60]	; 0x3c
   25ce0:	ldr	r7, [r3, #8]
   25ce4:	str	r2, [r4, #24]
   25ce8:	add	r2, r0, ip
   25cec:	str	r2, [r4, #16]
   25cf0:	str	r7, [r4, #20]
   25cf4:	ldr	r2, [r4, #156]	; 0x9c
   25cf8:	str	ip, [r4, #28]
   25cfc:	str	r1, [r3, #4]
   25d00:	strhcc	lr, [r4, #128]	; 0x80
   25d04:	ldrh	r1, [r3, #12]
   25d08:	sub	r2, r2, #1
   25d0c:	sub	r3, r3, #36	; 0x24
   25d10:	mov	r0, r6
   25d14:	stm	r6, {r5, r8}
   25d18:	str	r2, [r4, #156]	; 0x9c
   25d1c:	strh	r1, [r4, #130]	; 0x82
   25d20:	str	r3, [r4, #32]
   25d24:	add	sp, sp, #12
   25d28:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25d2c:	ldr	r1, [r1, #28]
   25d30:	mov	r3, #1
   25d34:	add	r1, r1, #1
   25d38:	ldr	r0, [r4, #40]	; 0x28
   25d3c:	add	r2, r1, r2
   25d40:	str	r3, [sp]
   25d44:	add	r1, r4, #60	; 0x3c
   25d48:	ldr	r9, [r4, #48]	; 0x30
   25d4c:	blx	r9
   25d50:	cmp	r0, #0
   25d54:	bne	25dcc <flatcc_builder_end_union_vector@@Base+0x1bc>
   25d58:	ldr	r1, [r4, #28]
   25d5c:	ldr	r2, [r4, #64]	; 0x40
   25d60:	ldr	r3, [r4, #60]	; 0x3c
   25d64:	sub	r2, r2, r1
   25d68:	cmn	r2, #4
   25d6c:	mvnhi	r2, #3
   25d70:	str	r2, [r4, #24]
   25d74:	ldr	r2, [r4, #32]
   25d78:	add	r3, r3, r1
   25d7c:	mvn	r1, #3
   25d80:	str	r3, [r4, #16]
   25d84:	str	r1, [r2, #4]
   25d88:	b	25c58 <flatcc_builder_end_union_vector@@Base+0x48>
   25d8c:	mov	r3, r7
   25d90:	mov	r2, r5
   25d94:	mov	r0, r4
   25d98:	bl	21a08 <flatcc_builder_default_alloc@@Base+0x10c>
   25d9c:	subs	r8, r0, #0
   25da0:	beq	25c9c <flatcc_builder_end_union_vector@@Base+0x8c>
   25da4:	mvn	r0, #0
   25da8:	mov	r3, #1
   25dac:	mov	r2, r5
   25db0:	str	r0, [sp, #4]
   25db4:	mov	r1, r7
   25db8:	str	r3, [sp]
   25dbc:	mov	r0, r4
   25dc0:	bl	250d8 <flatcc_builder_create_vector@@Base>
   25dc4:	mov	r5, r0
   25dc8:	b	25ca4 <flatcc_builder_end_union_vector@@Base+0x94>
   25dcc:	mov	r3, #0
   25dd0:	mov	r0, r6
   25dd4:	str	r3, [r6]
   25dd8:	str	r3, [r6, #4]
   25ddc:	add	sp, sp, #12
   25de0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25de4:	ldr	r3, [pc, #12]	; 25df8 <flatcc_builder_end_union_vector@@Base+0x1e8>
   25de8:	ldr	r2, [pc, #12]	; 25dfc <flatcc_builder_end_union_vector@@Base+0x1ec>
   25dec:	ldr	r1, [pc, #12]	; 25e00 <flatcc_builder_end_union_vector@@Base+0x1f0>
   25df0:	ldr	r0, [pc, #12]	; 25e04 <flatcc_builder_end_union_vector@@Base+0x1f4>
   25df4:	bl	126a8 <__assert_fail@plt>
   25df8:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   25dfc:	andeq	r0, r0, r1, asr r6
   25e00:	andeq	pc, r2, r8, ror #5
   25e04:	strdeq	pc, [r2], -r4

00025e08 <flatcc_builder_union_vector_edit@@Base>:
   25e08:	ldr	r0, [r0, #16]
   25e0c:	bx	lr

00025e10 <flatcc_builder_union_vector_count@@Base>:
   25e10:	ldr	r3, [r0, #32]
   25e14:	ldr	r0, [r3, #20]
   25e18:	bx	lr

00025e1c <flatcc_builder_extend_union_vector@@Base>:
   25e1c:	ldr	ip, [r0, #32]
   25e20:	push	{r4, r5, r6, r7, lr}
   25e24:	mov	r4, r0
   25e28:	ldr	r3, [ip, #20]
   25e2c:	sub	sp, sp, #12
   25e30:	adds	r3, r1, r3
   25e34:	movcs	r2, #1
   25e38:	movcc	r2, #0
   25e3c:	cmn	r3, #-536870911	; 0xe0000001
   25e40:	movls	r0, #0
   25e44:	movhi	r0, #1
   25e48:	orrs	r5, r2, r0
   25e4c:	bne	25ee4 <flatcc_builder_extend_union_vector@@Base+0xc8>
   25e50:	str	r3, [ip, #20]
   25e54:	ldr	r6, [r4, #20]
   25e58:	ldr	r3, [r4, #24]
   25e5c:	add	r1, r6, r1, lsl #3
   25e60:	cmp	r1, r3
   25e64:	str	r1, [r4, #20]
   25e68:	bcs	25e7c <flatcc_builder_extend_union_vector@@Base+0x60>
   25e6c:	ldr	r0, [r4, #16]
   25e70:	add	r0, r0, r6
   25e74:	add	sp, sp, #12
   25e78:	pop	{r4, r5, r6, r7, pc}
   25e7c:	ldr	r2, [r4, #28]
   25e80:	mov	r3, #1
   25e84:	add	r2, r2, #1
   25e88:	ldr	r0, [r4, #40]	; 0x28
   25e8c:	add	r2, r2, r1
   25e90:	str	r3, [sp]
   25e94:	add	r1, r4, #60	; 0x3c
   25e98:	ldr	r7, [r4, #48]	; 0x30
   25e9c:	blx	r7
   25ea0:	cmp	r0, #0
   25ea4:	bne	25edc <flatcc_builder_extend_union_vector@@Base+0xc0>
   25ea8:	ldr	r2, [r4, #28]
   25eac:	ldr	r3, [r4, #64]	; 0x40
   25eb0:	ldr	r0, [r4, #60]	; 0x3c
   25eb4:	sub	r3, r3, r2
   25eb8:	cmn	r3, #4
   25ebc:	mvnhi	r3, #3
   25ec0:	str	r3, [r4, #24]
   25ec4:	ldr	r3, [r4, #32]
   25ec8:	add	r0, r0, r2
   25ecc:	mvn	r2, #3
   25ed0:	str	r0, [r4, #16]
   25ed4:	str	r2, [r3, #4]
   25ed8:	b	25e70 <flatcc_builder_extend_union_vector@@Base+0x54>
   25edc:	mov	r0, r5
   25ee0:	b	25e74 <flatcc_builder_extend_union_vector@@Base+0x58>
   25ee4:	bl	128d0 <__assert_fail@plt+0x228>

00025ee8 <flatcc_builder_truncate_union_vector@@Base>:
   25ee8:	ldr	r3, [r0, #32]
   25eec:	push	{r4, lr}
   25ef0:	ldrh	r2, [r3, #14]
   25ef4:	cmp	r2, #7
   25ef8:	bne	25f3c <flatcc_builder_truncate_union_vector@@Base+0x54>
   25efc:	ldr	ip, [r3, #20]
   25f00:	cmp	ip, r1
   25f04:	bcc	25f50 <flatcc_builder_truncate_union_vector@@Base+0x68>
   25f08:	ldr	r2, [r3, #16]
   25f0c:	sub	ip, ip, r1
   25f10:	str	ip, [r3, #20]
   25f14:	mul	r2, r2, r1
   25f18:	ldr	r3, [r0, #20]
   25f1c:	ldr	r1, [r0, #16]
   25f20:	sub	r3, r3, r2
   25f24:	str	r3, [r0, #20]
   25f28:	add	r0, r1, r3
   25f2c:	mov	r1, #0
   25f30:	bl	12654 <memset@plt>
   25f34:	mov	r0, #0
   25f38:	pop	{r4, pc}
   25f3c:	ldr	r3, [pc, #32]	; 25f64 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   25f40:	ldr	r2, [pc, #32]	; 25f68 <flatcc_builder_truncate_union_vector@@Base+0x80>
   25f44:	ldr	r1, [pc, #32]	; 25f6c <flatcc_builder_truncate_union_vector@@Base+0x84>
   25f48:	ldr	r0, [pc, #32]	; 25f70 <flatcc_builder_truncate_union_vector@@Base+0x88>
   25f4c:	bl	126a8 <__assert_fail@plt>
   25f50:	ldr	r3, [pc, #12]	; 25f64 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   25f54:	ldr	r2, [pc, #24]	; 25f74 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   25f58:	ldr	r1, [pc, #12]	; 25f6c <flatcc_builder_truncate_union_vector@@Base+0x84>
   25f5c:	ldr	r0, [pc, #20]	; 25f78 <flatcc_builder_truncate_union_vector@@Base+0x90>
   25f60:	bl	126a8 <__assert_fail@plt>
   25f64:	muleq	r2, ip, r1
   25f68:	andeq	r0, r0, r1, lsl #13
   25f6c:	andeq	pc, r2, r8, ror #5
   25f70:	strdeq	pc, [r2], -r4
   25f74:	andeq	r0, r0, r2, lsl #13
   25f78:	andeq	pc, r2, r8, lsl r5	; <UNPREDICTABLE>

00025f7c <flatcc_builder_union_vector_push@@Base>:
   25f7c:	push	{r4, r5, r6, r7, lr}
   25f80:	mov	r4, r0
   25f84:	ldr	r0, [r0, #32]
   25f88:	sub	sp, sp, #20
   25f8c:	add	r5, sp, #8
   25f90:	ldrh	r3, [r0, #14]
   25f94:	stm	r5, {r1, r2}
   25f98:	cmp	r3, #7
   25f9c:	bne	26060 <flatcc_builder_union_vector_push@@Base+0xe4>
   25fa0:	ldr	r3, [r0, #20]
   25fa4:	cmn	r3, #-536870911	; 0xe0000001
   25fa8:	beq	26050 <flatcc_builder_union_vector_push@@Base+0xd4>
   25fac:	add	r3, r3, #1
   25fb0:	str	r3, [r0, #20]
   25fb4:	ldr	r6, [r4, #20]
   25fb8:	ldr	r2, [r4, #24]
   25fbc:	add	r3, r6, #8
   25fc0:	cmp	r3, r2
   25fc4:	str	r3, [r4, #20]
   25fc8:	bcs	25ff0 <flatcc_builder_union_vector_push@@Base+0x74>
   25fcc:	ldr	r3, [r4, #16]
   25fd0:	adds	r3, r3, r6
   25fd4:	movne	r2, r3
   25fd8:	ldmne	r5, {r0, r1}
   25fdc:	moveq	r2, r3
   25fe0:	stmne	r3, {r0, r1}
   25fe4:	mov	r0, r2
   25fe8:	add	sp, sp, #20
   25fec:	pop	{r4, r5, r6, r7, pc}
   25ff0:	ldr	r2, [r4, #28]
   25ff4:	mov	r3, #1
   25ff8:	add	r2, r6, r2
   25ffc:	ldr	r0, [r4, #40]	; 0x28
   26000:	add	r2, r2, #9
   26004:	str	r3, [sp]
   26008:	add	r1, r4, #60	; 0x3c
   2600c:	ldr	r7, [r4, #48]	; 0x30
   26010:	blx	r7
   26014:	cmp	r0, #0
   26018:	bne	26050 <flatcc_builder_union_vector_push@@Base+0xd4>
   2601c:	ldr	r1, [r4, #28]
   26020:	ldr	r2, [r4, #64]	; 0x40
   26024:	ldr	r3, [r4, #60]	; 0x3c
   26028:	sub	r2, r2, r1
   2602c:	cmn	r2, #4
   26030:	mvnhi	r2, #3
   26034:	str	r2, [r4, #24]
   26038:	ldr	r2, [r4, #32]
   2603c:	add	r3, r3, r1
   26040:	mvn	r1, #3
   26044:	str	r3, [r4, #16]
   26048:	str	r1, [r2, #4]
   2604c:	b	25fd0 <flatcc_builder_union_vector_push@@Base+0x54>
   26050:	mov	r2, #0
   26054:	mov	r0, r2
   26058:	add	sp, sp, #20
   2605c:	pop	{r4, r5, r6, r7, pc}
   26060:	ldr	r3, [pc, #12]	; 26074 <flatcc_builder_union_vector_push@@Base+0xf8>
   26064:	ldr	r2, [pc, #12]	; 26078 <flatcc_builder_union_vector_push@@Base+0xfc>
   26068:	ldr	r1, [pc, #12]	; 2607c <flatcc_builder_union_vector_push@@Base+0x100>
   2606c:	ldr	r0, [pc, #12]	; 26080 <flatcc_builder_union_vector_push@@Base+0x104>
   26070:	bl	126a8 <__assert_fail@plt>
   26074:	andeq	pc, r2, r4, asr #3
   26078:	andeq	r0, r0, sp, lsl #13
   2607c:	andeq	pc, r2, r8, ror #5
   26080:	strdeq	pc, [r2], -r4

00026084 <flatcc_builder_append_union_vector@@Base>:
   26084:	push	{r4, r5, r6, r7, r8, r9, lr}
   26088:	mov	r5, r0
   2608c:	ldr	r0, [r0, #32]
   26090:	sub	sp, sp, #12
   26094:	ldrh	r3, [r0, #14]
   26098:	cmp	r3, #7
   2609c:	bne	26180 <flatcc_builder_append_union_vector@@Base+0xfc>
   260a0:	mov	r7, r1
   260a4:	ldr	r1, [r0, #20]
   260a8:	adds	r1, r2, r1
   260ac:	movcs	r4, #1
   260b0:	movcc	r4, #0
   260b4:	cmn	r1, #-536870911	; 0xe0000001
   260b8:	movls	r3, #0
   260bc:	movhi	r3, #1
   260c0:	orrs	r4, r4, r3
   260c4:	bne	2617c <flatcc_builder_append_union_vector@@Base+0xf8>
   260c8:	str	r1, [r0, #20]
   260cc:	ldr	r8, [r5, #20]
   260d0:	lsl	r6, r2, #3
   260d4:	ldr	r3, [r5, #24]
   260d8:	add	r1, r6, r8
   260dc:	cmp	r1, r3
   260e0:	str	r1, [r5, #20]
   260e4:	bcs	26114 <flatcc_builder_append_union_vector@@Base+0x90>
   260e8:	ldr	r3, [r5, #16]
   260ec:	adds	r3, r3, r8
   260f0:	beq	26108 <flatcc_builder_append_union_vector@@Base+0x84>
   260f4:	mov	r0, r3
   260f8:	mov	r2, r6
   260fc:	mov	r1, r7
   26100:	bl	125ac <memcpy@plt>
   26104:	mov	r3, r0
   26108:	mov	r0, r3
   2610c:	add	sp, sp, #12
   26110:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26114:	ldr	r2, [r5, #28]
   26118:	mov	r3, #1
   2611c:	add	r2, r2, #1
   26120:	ldr	r0, [r5, #40]	; 0x28
   26124:	add	r2, r2, r1
   26128:	str	r3, [sp]
   2612c:	add	r1, r5, #60	; 0x3c
   26130:	ldr	r9, [r5, #48]	; 0x30
   26134:	blx	r9
   26138:	cmp	r0, #0
   2613c:	bne	26174 <flatcc_builder_append_union_vector@@Base+0xf0>
   26140:	ldr	r1, [r5, #28]
   26144:	ldr	r2, [r5, #64]	; 0x40
   26148:	ldr	r3, [r5, #60]	; 0x3c
   2614c:	sub	r2, r2, r1
   26150:	cmn	r2, #4
   26154:	mvnhi	r2, #3
   26158:	str	r2, [r5, #24]
   2615c:	ldr	r2, [r5, #32]
   26160:	add	r3, r3, r1
   26164:	mvn	r1, #3
   26168:	str	r3, [r5, #16]
   2616c:	str	r1, [r2, #4]
   26170:	b	260ec <flatcc_builder_append_union_vector@@Base+0x68>
   26174:	mov	r3, r4
   26178:	b	26108 <flatcc_builder_append_union_vector@@Base+0x84>
   2617c:	bl	128d0 <__assert_fail@plt+0x228>
   26180:	ldr	r3, [pc, #12]	; 26194 <flatcc_builder_append_union_vector@@Base+0x110>
   26184:	ldr	r2, [pc, #12]	; 26198 <flatcc_builder_append_union_vector@@Base+0x114>
   26188:	ldr	r1, [pc, #12]	; 2619c <flatcc_builder_append_union_vector@@Base+0x118>
   2618c:	ldr	r0, [pc, #12]	; 261a0 <flatcc_builder_append_union_vector@@Base+0x11c>
   26190:	bl	126a8 <__assert_fail@plt>
   26194:	andeq	pc, r2, r8, ror #3
   26198:	muleq	r0, ip, r6
   2619c:	andeq	pc, r2, r8, ror #5
   261a0:	strdeq	pc, [r2], -r4

000261a4 <flatcc_builder_create_string@@Base>:
   261a4:	push	{r4, r5, r6, lr}
   261a8:	sub	sp, sp, #88	; 0x58
   261ac:	ldr	lr, [r0, #136]	; 0x88
   261b0:	mov	r4, r0
   261b4:	add	r0, sp, #88	; 0x58
   261b8:	cmp	r2, #0
   261bc:	sub	r3, lr, r2
   261c0:	str	r2, [r0, #-76]!	; 0xffffffb4
   261c4:	sub	r3, r3, #1
   261c8:	str	r0, [sp, #24]
   261cc:	moveq	r0, #1
   261d0:	strne	r1, [sp, #32]
   261d4:	mov	ip, #4
   261d8:	moveq	r1, r0
   261dc:	movne	r1, #2
   261e0:	and	r3, r3, #3
   261e4:	str	ip, [sp, #28]
   261e8:	add	r3, r3, #1
   261ec:	addne	ip, r2, ip
   261f0:	add	r1, r1, #1
   261f4:	add	ip, ip, r3
   261f8:	add	r0, sp, #88	; 0x58
   261fc:	add	r1, r0, r1, lsl #3
   26200:	sub	r5, lr, ip
   26204:	ldr	r0, [pc, #104]	; 26274 <flatcc_builder_create_string@@Base+0xd0>
   26208:	strne	r2, [sp, #36]	; 0x24
   2620c:	moveq	r2, #2
   26210:	movne	r2, #3
   26214:	cmp	lr, r5
   26218:	str	r3, [r1, #-68]	; 0xffffffbc
   2621c:	str	ip, [sp, #16]
   26220:	str	r2, [sp, #20]
   26224:	str	r0, [r1, #-72]	; 0xffffffb8
   26228:	ble	2625c <flatcc_builder_create_string@@Base+0xb8>
   2622c:	ldr	r0, [r4, #36]	; 0x24
   26230:	mov	r3, r5
   26234:	str	ip, [sp]
   26238:	add	r1, sp, #24
   2623c:	ldr	r6, [r4, #44]	; 0x2c
   26240:	blx	r6
   26244:	cmp	r0, #0
   26248:	bne	26260 <flatcc_builder_create_string@@Base+0xbc>
   2624c:	mov	r0, r5
   26250:	str	r5, [r4, #136]	; 0x88
   26254:	add	sp, sp, #88	; 0x58
   26258:	pop	{r4, r5, r6, pc}
   2625c:	bl	128a8 <__assert_fail@plt+0x200>
   26260:	ldr	r3, [pc, #16]	; 26278 <flatcc_builder_create_string@@Base+0xd4>
   26264:	ldr	r2, [pc, #16]	; 2627c <flatcc_builder_create_string@@Base+0xd8>
   26268:	ldr	r1, [pc, #16]	; 26280 <flatcc_builder_create_string@@Base+0xdc>
   2626c:	ldr	r0, [pc, #16]	; 26284 <flatcc_builder_create_string@@Base+0xe0>
   26270:	bl	126a8 <__assert_fail@plt>
   26274:	andeq	lr, r2, r0, lsr ip
   26278:			; <UNDEFINED> instruction: 0x0002ebb4
   2627c:	andeq	r0, r0, fp, lsl #5
   26280:	andeq	pc, r2, r8, ror #5
   26284:	andeq	pc, r2, r8, lsr #7

00026288 <flatcc_builder_create_string_str@@Base>:
   26288:	push	{r4, r5, r6, lr}
   2628c:	mov	r4, r0
   26290:	sub	sp, sp, #88	; 0x58
   26294:	mov	r0, r1
   26298:	mov	r5, r1
   2629c:	bl	12630 <strlen@plt>
   262a0:	ldr	lr, [r4, #136]	; 0x88
   262a4:	add	r2, sp, #88	; 0x58
   262a8:	sub	r3, lr, #1
   262ac:	mov	ip, #4
   262b0:	str	ip, [sp, #28]
   262b4:	cmp	r0, #0
   262b8:	str	r0, [r2, #-76]!	; 0xffffffb4
   262bc:	sub	r3, r3, r0
   262c0:	str	r2, [sp, #24]
   262c4:	moveq	r2, #1
   262c8:	moveq	r1, r2
   262cc:	movne	r1, #2
   262d0:	and	r3, r3, #3
   262d4:	addne	ip, r0, ip
   262d8:	add	r3, r3, #1
   262dc:	add	r1, r1, #1
   262e0:	strne	r0, [sp, #36]	; 0x24
   262e4:	add	ip, ip, r3
   262e8:	add	r0, sp, #88	; 0x58
   262ec:	strne	r5, [sp, #32]
   262f0:	add	r1, r0, r1, lsl #3
   262f4:	sub	r5, lr, ip
   262f8:	ldr	r0, [pc, #100]	; 26364 <flatcc_builder_create_string_str@@Base+0xdc>
   262fc:	movne	r2, #3
   26300:	moveq	r2, #2
   26304:	cmp	lr, r5
   26308:	str	r3, [r1, #-68]	; 0xffffffbc
   2630c:	str	ip, [sp, #16]
   26310:	str	r2, [sp, #20]
   26314:	str	r0, [r1, #-72]	; 0xffffffb8
   26318:	ble	2634c <flatcc_builder_create_string_str@@Base+0xc4>
   2631c:	ldr	r0, [r4, #36]	; 0x24
   26320:	mov	r3, r5
   26324:	str	ip, [sp]
   26328:	add	r1, sp, #24
   2632c:	ldr	r6, [r4, #44]	; 0x2c
   26330:	blx	r6
   26334:	cmp	r0, #0
   26338:	bne	26350 <flatcc_builder_create_string_str@@Base+0xc8>
   2633c:	mov	r0, r5
   26340:	str	r5, [r4, #136]	; 0x88
   26344:	add	sp, sp, #88	; 0x58
   26348:	pop	{r4, r5, r6, pc}
   2634c:	bl	128a8 <__assert_fail@plt+0x200>
   26350:	ldr	r3, [pc, #16]	; 26368 <flatcc_builder_create_string_str@@Base+0xe0>
   26354:	ldr	r2, [pc, #16]	; 2636c <flatcc_builder_create_string_str@@Base+0xe4>
   26358:	ldr	r1, [pc, #16]	; 26370 <flatcc_builder_create_string_str@@Base+0xe8>
   2635c:	ldr	r0, [pc, #16]	; 26374 <flatcc_builder_create_string_str@@Base+0xec>
   26360:	bl	126a8 <__assert_fail@plt>
   26364:	andeq	lr, r2, r0, lsr ip
   26368:			; <UNDEFINED> instruction: 0x0002ebb4
   2636c:	andeq	r0, r0, fp, lsl #5
   26370:	andeq	pc, r2, r8, ror #5
   26374:	andeq	pc, r2, r8, lsr #7

00026378 <flatcc_builder_create_string_strn@@Base>:
   26378:	push	{r4, r5, r6, lr}
   2637c:	mov	r6, r1
   26380:	sub	sp, sp, #88	; 0x58
   26384:	mov	r4, r0
   26388:	mov	r1, #0
   2638c:	mov	r0, r6
   26390:	mov	r5, r2
   26394:	bl	1266c <memchr@plt>
   26398:	mov	ip, #4
   2639c:	mov	r1, #1
   263a0:	add	r2, sp, #88	; 0x58
   263a4:	str	ip, [sp, #28]
   263a8:	add	lr, sp, #88	; 0x58
   263ac:	cmp	r0, #0
   263b0:	subne	r5, r0, r6
   263b4:	ldr	r0, [r4, #136]	; 0x88
   263b8:	cmp	r5, #0
   263bc:	sub	r3, r0, #1
   263c0:	sub	r3, r3, r5
   263c4:	movne	r1, #2
   263c8:	and	r3, r3, #3
   263cc:	addne	ip, r5, ip
   263d0:	add	r3, r3, #1
   263d4:	add	r1, r1, #1
   263d8:	add	ip, r3, ip
   263dc:	str	r5, [r2, #-76]!	; 0xffffffb4
   263e0:	strne	r5, [sp, #36]	; 0x24
   263e4:	add	r1, lr, r1, lsl #3
   263e8:	sub	r5, r0, ip
   263ec:	ldr	lr, [pc, #108]	; 26460 <flatcc_builder_create_string_strn@@Base+0xe8>
   263f0:	str	r2, [sp, #24]
   263f4:	strne	r6, [sp, #32]
   263f8:	movne	r2, #3
   263fc:	moveq	r2, #2
   26400:	cmp	r0, r5
   26404:	str	r3, [r1, #-68]	; 0xffffffbc
   26408:	str	ip, [sp, #16]
   2640c:	str	r2, [sp, #20]
   26410:	str	lr, [r1, #-72]	; 0xffffffb8
   26414:	ble	26448 <flatcc_builder_create_string_strn@@Base+0xd0>
   26418:	ldr	r0, [r4, #36]	; 0x24
   2641c:	mov	r3, r5
   26420:	str	ip, [sp]
   26424:	add	r1, sp, #24
   26428:	ldr	r6, [r4, #44]	; 0x2c
   2642c:	blx	r6
   26430:	cmp	r0, #0
   26434:	bne	2644c <flatcc_builder_create_string_strn@@Base+0xd4>
   26438:	mov	r0, r5
   2643c:	str	r5, [r4, #136]	; 0x88
   26440:	add	sp, sp, #88	; 0x58
   26444:	pop	{r4, r5, r6, pc}
   26448:	bl	128a8 <__assert_fail@plt+0x200>
   2644c:	ldr	r3, [pc, #16]	; 26464 <flatcc_builder_create_string_strn@@Base+0xec>
   26450:	ldr	r2, [pc, #16]	; 26468 <flatcc_builder_create_string_strn@@Base+0xf0>
   26454:	ldr	r1, [pc, #16]	; 2646c <flatcc_builder_create_string_strn@@Base+0xf4>
   26458:	ldr	r0, [pc, #16]	; 26470 <flatcc_builder_create_string_strn@@Base+0xf8>
   2645c:	bl	126a8 <__assert_fail@plt>
   26460:	andeq	lr, r2, r0, lsr ip
   26464:			; <UNDEFINED> instruction: 0x0002ebb4
   26468:	andeq	r0, r0, fp, lsl #5
   2646c:	andeq	pc, r2, r8, ror #5
   26470:	andeq	pc, r2, r8, lsr #7

00026474 <flatcc_builder_end_string@@Base>:
   26474:	ldr	r3, [r0, #32]
   26478:	push	{r4, r5, r6, lr}
   2647c:	sub	sp, sp, #88	; 0x58
   26480:	ldrh	r2, [r3, #14]
   26484:	cmp	r2, #6
   26488:	bne	265f4 <flatcc_builder_end_string@@Base+0x180>
   2648c:	ldr	r2, [r3, #20]
   26490:	ldr	r3, [r0, #20]
   26494:	mov	r4, r0
   26498:	cmp	r2, r3
   2649c:	bne	265e0 <flatcc_builder_end_string@@Base+0x16c>
   264a0:	ldr	r0, [r0, #136]	; 0x88
   264a4:	add	r1, sp, #88	; 0x58
   264a8:	sub	r3, r0, #1
   264ac:	cmp	r2, #0
   264b0:	sub	r3, r3, r2
   264b4:	str	r2, [r1, #-76]!	; 0xffffffb4
   264b8:	mov	ip, #4
   264bc:	str	r1, [sp, #24]
   264c0:	ldr	lr, [r4, #16]
   264c4:	mov	r1, #1
   264c8:	and	r3, r3, #3
   264cc:	movne	r1, #2
   264d0:	str	ip, [sp, #28]
   264d4:	add	r3, r3, #1
   264d8:	addne	ip, r2, ip
   264dc:	add	r1, r1, #1
   264e0:	strne	lr, [sp, #32]
   264e4:	add	ip, ip, r3
   264e8:	add	lr, sp, #88	; 0x58
   264ec:	add	r1, lr, r1, lsl #3
   264f0:	sub	r5, r0, ip
   264f4:	ldr	lr, [pc, #268]	; 26608 <flatcc_builder_end_string@@Base+0x194>
   264f8:	strne	r2, [sp, #36]	; 0x24
   264fc:	moveq	r2, #2
   26500:	movne	r2, #3
   26504:	cmp	r0, r5
   26508:	str	r3, [r1, #-68]	; 0xffffffbc
   2650c:	str	ip, [sp, #16]
   26510:	str	r2, [sp, #20]
   26514:	str	lr, [r1, #-72]	; 0xffffffb8
   26518:	ble	265dc <flatcc_builder_end_string@@Base+0x168>
   2651c:	ldr	r0, [r4, #36]	; 0x24
   26520:	add	r1, sp, #24
   26524:	str	ip, [sp]
   26528:	mov	r3, r5
   2652c:	ldr	r6, [r4, #44]	; 0x2c
   26530:	blx	r6
   26534:	subs	r1, r0, #0
   26538:	bne	265c8 <flatcc_builder_end_string@@Base+0x154>
   2653c:	cmp	r5, #0
   26540:	str	r5, [r4, #136]	; 0x88
   26544:	beq	265bc <flatcc_builder_end_string@@Base+0x148>
   26548:	ldr	r2, [r4, #20]
   2654c:	ldr	r0, [r4, #16]
   26550:	bl	12654 <memset@plt>
   26554:	ldr	r3, [r4, #32]
   26558:	ldr	r2, [r4, #64]	; 0x40
   2655c:	ldrh	lr, [r4, #130]	; 0x82
   26560:	ldr	ip, [r3]
   26564:	ldr	r1, [r3, #4]
   26568:	ldrh	r0, [r4, #128]	; 0x80
   2656c:	sub	r2, r2, ip
   26570:	cmp	r2, r1
   26574:	movcs	r2, r1
   26578:	cmp	r0, lr
   2657c:	ldr	r0, [r4, #60]	; 0x3c
   26580:	ldr	r6, [r3, #8]
   26584:	str	r2, [r4, #24]
   26588:	add	r2, r0, ip
   2658c:	str	r2, [r4, #16]
   26590:	str	r6, [r4, #20]
   26594:	ldr	r2, [r4, #156]	; 0x9c
   26598:	str	ip, [r4, #28]
   2659c:	str	r1, [r3, #4]
   265a0:	strhcc	lr, [r4, #128]	; 0x80
   265a4:	ldrh	r1, [r3, #12]
   265a8:	sub	r2, r2, #1
   265ac:	sub	r3, r3, #36	; 0x24
   265b0:	str	r2, [r4, #156]	; 0x9c
   265b4:	strh	r1, [r4, #130]	; 0x82
   265b8:	str	r3, [r4, #32]
   265bc:	mov	r0, r5
   265c0:	add	sp, sp, #88	; 0x58
   265c4:	pop	{r4, r5, r6, pc}
   265c8:	ldr	r3, [pc, #60]	; 2660c <flatcc_builder_end_string@@Base+0x198>
   265cc:	ldr	r2, [pc, #60]	; 26610 <flatcc_builder_end_string@@Base+0x19c>
   265d0:	ldr	r1, [pc, #60]	; 26614 <flatcc_builder_end_string@@Base+0x1a0>
   265d4:	ldr	r0, [pc, #60]	; 26618 <flatcc_builder_end_string@@Base+0x1a4>
   265d8:	bl	126a8 <__assert_fail@plt>
   265dc:	bl	128a8 <__assert_fail@plt+0x200>
   265e0:	ldr	r3, [pc, #52]	; 2661c <flatcc_builder_end_string@@Base+0x1a8>
   265e4:	ldr	r2, [pc, #52]	; 26620 <flatcc_builder_end_string@@Base+0x1ac>
   265e8:	ldr	r1, [pc, #36]	; 26614 <flatcc_builder_end_string@@Base+0x1a0>
   265ec:	ldr	r0, [pc, #48]	; 26624 <flatcc_builder_end_string@@Base+0x1b0>
   265f0:	bl	126a8 <__assert_fail@plt>
   265f4:	ldr	r3, [pc, #32]	; 2661c <flatcc_builder_end_string@@Base+0x1a8>
   265f8:	ldr	r2, [pc, #40]	; 26628 <flatcc_builder_end_string@@Base+0x1b4>
   265fc:	ldr	r1, [pc, #16]	; 26614 <flatcc_builder_end_string@@Base+0x1a0>
   26600:	ldr	r0, [pc, #36]	; 2662c <flatcc_builder_end_string@@Base+0x1b8>
   26604:	bl	126a8 <__assert_fail@plt>
   26608:	andeq	lr, r2, r0, lsr ip
   2660c:			; <UNDEFINED> instruction: 0x0002ebb4
   26610:	andeq	r0, r0, fp, lsl #5
   26614:	andeq	pc, r2, r8, ror #5
   26618:	andeq	pc, r2, r8, lsr #7
   2661c:	andeq	pc, r2, ip, lsl #4
   26620:	andeq	r0, r0, r5, asr #13
   26624:	andeq	pc, r2, r8, lsr #12
   26628:	andeq	r0, r0, r4, asr #13
   2662c:	andeq	pc, r2, r8, ror #6

00026630 <flatcc_builder_string_edit@@Base>:
   26630:	ldr	r0, [r0, #16]
   26634:	bx	lr

00026638 <flatcc_builder_string_len@@Base>:
   26638:	ldr	r3, [r0, #32]
   2663c:	ldr	r0, [r3, #20]
   26640:	bx	lr

00026644 <flatcc_builder_table_add@@Base>:
   26644:	push	{r4, r5, r6, r7, r8, r9, lr}
   26648:	mov	r4, r0
   2664c:	ldr	r0, [r0, #32]
   26650:	sub	sp, sp, #12
   26654:	ldrh	r0, [r0, #14]
   26658:	cmp	r0, #3
   2665c:	bne	26798 <flatcc_builder_table_add@@Base+0x154>
   26660:	ldr	r0, [pc, #324]	; 267ac <flatcc_builder_table_add@@Base+0x168>
   26664:	cmp	r1, r0
   26668:	bhi	26784 <flatcc_builder_table_add@@Base+0x140>
   2666c:	ldrh	r0, [r4, #130]	; 0x82
   26670:	lsl	r7, r1, #1
   26674:	cmp	r0, r3
   26678:	ldr	r0, [r4, #4]
   2667c:	strhcc	r3, [r4, #130]	; 0x82
   26680:	add	lr, r0, r7
   26684:	ldrh	r6, [r0, r7]
   26688:	cmp	r6, #0
   2668c:	bne	26770 <flatcc_builder_table_add@@Base+0x12c>
   26690:	ldr	ip, [r4, #12]
   26694:	ldr	r9, [pc, #276]	; 267b0 <flatcc_builder_table_add@@Base+0x16c>
   26698:	eor	ip, ip, r1
   2669c:	uxth	r5, r1
   266a0:	mul	r1, r9, ip
   266a4:	ldr	r0, [r4, #20]
   266a8:	eor	r1, r1, r2
   266ac:	sub	r8, r3, #1
   266b0:	add	r8, r8, r0
   266b4:	rsb	r3, r3, #0
   266b8:	and	r8, r8, r3
   266bc:	mul	r1, r9, r1
   266c0:	ldr	r3, [r4, #24]
   266c4:	add	r2, r2, r8
   266c8:	cmp	r2, r3
   266cc:	str	r1, [r4, #12]
   266d0:	str	r2, [r4, #20]
   266d4:	bcs	26700 <flatcc_builder_table_add@@Base+0xbc>
   266d8:	ldr	r0, [r4, #16]
   266dc:	add	r3, r8, #4
   266e0:	strh	r3, [lr]
   266e4:	ldrh	r3, [r4, #8]
   266e8:	add	r0, r0, r8
   266ec:	cmp	r3, r5
   266f0:	addls	r5, r5, #1
   266f4:	strhls	r5, [r4, #8]
   266f8:	add	sp, sp, #12
   266fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26700:	ldr	r1, [r4, #28]
   26704:	mov	r3, #1
   26708:	add	r1, r1, #1
   2670c:	ldr	r0, [r4, #40]	; 0x28
   26710:	add	r2, r1, r2
   26714:	str	r3, [sp]
   26718:	add	r1, r4, #60	; 0x3c
   2671c:	ldr	r9, [r4, #48]	; 0x30
   26720:	blx	r9
   26724:	cmp	r0, #0
   26728:	bne	26768 <flatcc_builder_table_add@@Base+0x124>
   2672c:	ldr	r6, [r4, #28]
   26730:	ldr	r3, [r4, #64]	; 0x40
   26734:	ldr	r2, [pc, #120]	; 267b4 <flatcc_builder_table_add@@Base+0x170>
   26738:	sub	r3, r3, r6
   2673c:	ldr	r0, [r4, #60]	; 0x3c
   26740:	ldr	r1, [r4, #32]
   26744:	ldr	lr, [r4, #4]
   26748:	cmp	r3, r2
   2674c:	add	r0, r0, r6
   26750:	movcs	r3, r2
   26754:	str	r0, [r4, #16]
   26758:	str	r3, [r4, #24]
   2675c:	add	lr, lr, r7
   26760:	str	r2, [r1, #4]
   26764:	b	266dc <flatcc_builder_table_add@@Base+0x98>
   26768:	mov	r0, r6
   2676c:	b	266f8 <flatcc_builder_table_add@@Base+0xb4>
   26770:	ldr	r3, [pc, #64]	; 267b8 <flatcc_builder_table_add@@Base+0x174>
   26774:	ldr	r2, [pc, #64]	; 267bc <flatcc_builder_table_add@@Base+0x178>
   26778:	ldr	r1, [pc, #64]	; 267c0 <flatcc_builder_table_add@@Base+0x17c>
   2677c:	ldr	r0, [pc, #64]	; 267c4 <flatcc_builder_table_add@@Base+0x180>
   26780:	bl	126a8 <__assert_fail@plt>
   26784:	ldr	r3, [pc, #44]	; 267b8 <flatcc_builder_table_add@@Base+0x174>
   26788:	ldr	r2, [pc, #56]	; 267c8 <flatcc_builder_table_add@@Base+0x184>
   2678c:	ldr	r1, [pc, #44]	; 267c0 <flatcc_builder_table_add@@Base+0x17c>
   26790:	ldr	r0, [pc, #52]	; 267cc <flatcc_builder_table_add@@Base+0x188>
   26794:	bl	126a8 <__assert_fail@plt>
   26798:	ldr	r3, [pc, #24]	; 267b8 <flatcc_builder_table_add@@Base+0x174>
   2679c:	ldr	r2, [pc, #44]	; 267d0 <flatcc_builder_table_add@@Base+0x18c>
   267a0:	ldr	r1, [pc, #24]	; 267c0 <flatcc_builder_table_add@@Base+0x17c>
   267a4:	ldr	r0, [pc, #40]	; 267d4 <flatcc_builder_table_add@@Base+0x190>
   267a8:	bl	126a8 <__assert_fail@plt>
   267ac:	strdeq	r7, [r0], -ip
   267b0:			; <UNDEFINED> instruction: 0x9e3779b1
   267b4:	strdeq	pc, [r0], -ip
   267b8:	andeq	pc, r2, r8, lsr #4
   267bc:	strdeq	r0, [r0], -r8
   267c0:	andeq	pc, r2, r8, ror #5
   267c4:	andeq	pc, r2, r8, lsr #7
   267c8:	andeq	r0, r0, lr, ror #13
   267cc:	andeq	pc, r2, ip, asr #12
   267d0:	andeq	r0, r0, sp, ror #13
   267d4:			; <UNDEFINED> instruction: 0x0002f5b4

000267d8 <flatcc_builder_table_edit@@Base>:
   267d8:	ldr	r3, [r0, #32]
   267dc:	ldrh	r3, [r3, #14]
   267e0:	cmp	r3, #3
   267e4:	bne	267fc <flatcc_builder_table_edit@@Base+0x24>
   267e8:	ldr	r3, [r0, #20]
   267ec:	ldr	r0, [r0, #16]
   267f0:	sub	r1, r3, r1
   267f4:	add	r0, r0, r1
   267f8:	bx	lr
   267fc:	push	{r4, lr}
   26800:	ldr	r3, [pc, #12]	; 26814 <flatcc_builder_table_edit@@Base+0x3c>
   26804:	ldr	r2, [pc, #12]	; 26818 <flatcc_builder_table_edit@@Base+0x40>
   26808:	ldr	r1, [pc, #12]	; 2681c <flatcc_builder_table_edit@@Base+0x44>
   2680c:	ldr	r0, [pc, #12]	; 26820 <flatcc_builder_table_edit@@Base+0x48>
   26810:	bl	126a8 <__assert_fail@plt>
   26814:	andeq	pc, r2, r4, asr #4
   26818:	andeq	r0, r0, r2, lsl #14
   2681c:	andeq	pc, r2, r8, ror #5
   26820:			; <UNDEFINED> instruction: 0x0002f5b4

00026824 <flatcc_builder_table_add_copy@@Base>:
   26824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26828:	mov	r4, r0
   2682c:	ldr	r0, [r0, #32]
   26830:	mov	r7, r3
   26834:	sub	sp, sp, #12
   26838:	ldrh	r3, [r0, #14]
   2683c:	ldrh	ip, [sp, #48]	; 0x30
   26840:	cmp	r3, #3
   26844:	bne	269a0 <flatcc_builder_table_add_copy@@Base+0x17c>
   26848:	ldr	r3, [pc, #356]	; 269b4 <flatcc_builder_table_add_copy@@Base+0x190>
   2684c:	cmp	r1, r3
   26850:	bhi	2698c <flatcc_builder_table_add_copy@@Base+0x168>
   26854:	ldrh	r3, [r4, #130]	; 0x82
   26858:	lsl	sl, r1, #1
   2685c:	mov	r8, r2
   26860:	cmp	r3, ip
   26864:	ldr	r3, [r4, #4]
   26868:	strhcc	ip, [r4, #130]	; 0x82
   2686c:	add	r0, r3, sl
   26870:	ldrh	r5, [r3, sl]
   26874:	cmp	r5, #0
   26878:	bne	26978 <flatcc_builder_table_add_copy@@Base+0x154>
   2687c:	ldr	r2, [r4, #12]
   26880:	ldr	lr, [pc, #304]	; 269b8 <flatcc_builder_table_add_copy@@Base+0x194>
   26884:	eor	r2, r2, r1
   26888:	ldr	r6, [r4, #20]
   2688c:	mul	r2, lr, r2
   26890:	sub	r3, ip, #1
   26894:	eor	r2, r2, r7
   26898:	add	r3, r3, r6
   2689c:	rsb	ip, ip, #0
   268a0:	and	r6, r3, ip
   268a4:	mul	lr, lr, r2
   268a8:	ldr	r3, [r4, #24]
   268ac:	uxth	r9, r1
   268b0:	add	r1, r7, r6
   268b4:	cmp	r1, r3
   268b8:	str	lr, [r4, #12]
   268bc:	str	r1, [r4, #20]
   268c0:	bcs	26908 <flatcc_builder_table_add_copy@@Base+0xe4>
   268c4:	ldr	r3, [r4, #16]
   268c8:	add	r2, r6, #4
   268cc:	strh	r2, [r0]
   268d0:	ldrh	r2, [r4, #8]
   268d4:	cmp	r2, r9
   268d8:	addls	r9, r9, #1
   268dc:	strhls	r9, [r4, #8]
   268e0:	adds	r3, r3, r6
   268e4:	beq	268fc <flatcc_builder_table_add_copy@@Base+0xd8>
   268e8:	mov	r0, r3
   268ec:	mov	r2, r7
   268f0:	mov	r1, r8
   268f4:	bl	125ac <memcpy@plt>
   268f8:	mov	r3, r0
   268fc:	mov	r0, r3
   26900:	add	sp, sp, #12
   26904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26908:	ldr	r2, [r4, #28]
   2690c:	mov	r3, #1
   26910:	add	r2, r2, #1
   26914:	ldr	r0, [r4, #40]	; 0x28
   26918:	add	r2, r2, r1
   2691c:	str	r3, [sp]
   26920:	add	r1, r4, #60	; 0x3c
   26924:	ldr	fp, [r4, #48]	; 0x30
   26928:	blx	fp
   2692c:	cmp	r0, #0
   26930:	bne	26970 <flatcc_builder_table_add_copy@@Base+0x14c>
   26934:	ldr	r0, [r4, #28]
   26938:	ldr	r2, [r4, #64]	; 0x40
   2693c:	ldr	r1, [pc, #120]	; 269bc <flatcc_builder_table_add_copy@@Base+0x198>
   26940:	ldr	r3, [r4, #60]	; 0x3c
   26944:	sub	r2, r2, r0
   26948:	ldr	ip, [r4, #32]
   2694c:	add	r3, r3, r0
   26950:	cmp	r2, r1
   26954:	ldr	r0, [r4, #4]
   26958:	movcs	r2, r1
   2695c:	str	r3, [r4, #16]
   26960:	str	r2, [r4, #24]
   26964:	add	r0, r0, sl
   26968:	str	r1, [ip, #4]
   2696c:	b	268c8 <flatcc_builder_table_add_copy@@Base+0xa4>
   26970:	mov	r3, r5
   26974:	b	268fc <flatcc_builder_table_add_copy@@Base+0xd8>
   26978:	ldr	r3, [pc, #64]	; 269c0 <flatcc_builder_table_add_copy@@Base+0x19c>
   2697c:	ldr	r2, [pc, #64]	; 269c4 <flatcc_builder_table_add_copy@@Base+0x1a0>
   26980:	ldr	r1, [pc, #64]	; 269c8 <flatcc_builder_table_add_copy@@Base+0x1a4>
   26984:	ldr	r0, [pc, #64]	; 269cc <flatcc_builder_table_add_copy@@Base+0x1a8>
   26988:	bl	126a8 <__assert_fail@plt>
   2698c:	ldr	r3, [pc, #44]	; 269c0 <flatcc_builder_table_add_copy@@Base+0x19c>
   26990:	ldr	r2, [pc, #56]	; 269d0 <flatcc_builder_table_add_copy@@Base+0x1ac>
   26994:	ldr	r1, [pc, #44]	; 269c8 <flatcc_builder_table_add_copy@@Base+0x1a4>
   26998:	ldr	r0, [pc, #52]	; 269d4 <flatcc_builder_table_add_copy@@Base+0x1b0>
   2699c:	bl	126a8 <__assert_fail@plt>
   269a0:	ldr	r3, [pc, #24]	; 269c0 <flatcc_builder_table_add_copy@@Base+0x19c>
   269a4:	ldr	r2, [pc, #44]	; 269d8 <flatcc_builder_table_add_copy@@Base+0x1b4>
   269a8:	ldr	r1, [pc, #24]	; 269c8 <flatcc_builder_table_add_copy@@Base+0x1a4>
   269ac:	ldr	r0, [pc, #40]	; 269dc <flatcc_builder_table_add_copy@@Base+0x1b8>
   269b0:	bl	126a8 <__assert_fail@plt>
   269b4:	strdeq	r7, [r0], -ip
   269b8:			; <UNDEFINED> instruction: 0x9e3779b1
   269bc:	strdeq	pc, [r0], -ip
   269c0:	andeq	pc, r2, r8, lsr #4
   269c4:	strdeq	r0, [r0], -r8
   269c8:	andeq	pc, r2, r8, ror #5
   269cc:	andeq	pc, r2, r8, lsr #7
   269d0:	andeq	r0, r0, lr, ror #13
   269d4:	andeq	pc, r2, ip, asr #12
   269d8:	andeq	r0, r0, sp, ror #13
   269dc:			; <UNDEFINED> instruction: 0x0002f5b4

000269e0 <flatcc_builder_table_add_offset@@Base>:
   269e0:	ldr	r3, [r0, #32]
   269e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   269e8:	sub	sp, sp, #12
   269ec:	ldrh	r3, [r3, #14]
   269f0:	cmp	r3, #3
   269f4:	bne	26b30 <flatcc_builder_table_add_offset@@Base+0x150>
   269f8:	ldr	r3, [pc, #324]	; 26b44 <flatcc_builder_table_add_offset@@Base+0x164>
   269fc:	cmp	r1, r3
   26a00:	bhi	26b1c <flatcc_builder_table_add_offset@@Base+0x13c>
   26a04:	ldr	r3, [r0, #4]
   26a08:	lsl	r7, r1, #1
   26a0c:	mov	r4, r0
   26a10:	ldrh	r6, [r3, r7]
   26a14:	add	ip, r3, r7
   26a18:	cmp	r6, #0
   26a1c:	bne	26b08 <flatcc_builder_table_add_offset@@Base+0x128>
   26a20:	ldr	r3, [r0, #12]
   26a24:	ldr	r2, [pc, #284]	; 26b48 <flatcc_builder_table_add_offset@@Base+0x168>
   26a28:	eor	r3, r3, r1
   26a2c:	ldr	r5, [r0, #20]
   26a30:	mul	r3, r2, r3
   26a34:	add	r5, r5, #3
   26a38:	eor	r3, r3, #4
   26a3c:	ldr	r0, [r0, #24]
   26a40:	mul	r3, r2, r3
   26a44:	bic	r5, r5, #3
   26a48:	add	r2, r5, #4
   26a4c:	cmp	r2, r0
   26a50:	uxth	r8, r1
   26a54:	str	r3, [r4, #12]
   26a58:	str	r2, [r4, #20]
   26a5c:	bhi	26a9c <flatcc_builder_table_add_offset@@Base+0xbc>
   26a60:	ldr	r0, [r4, #16]
   26a64:	uxth	r2, r5
   26a68:	add	r3, r2, #4
   26a6c:	strh	r3, [ip]
   26a70:	ldrh	r3, [r4, #8]
   26a74:	add	r0, r0, r5
   26a78:	cmp	r3, r8
   26a7c:	ldr	r3, [r4]
   26a80:	addls	r1, r8, #1
   26a84:	strhls	r1, [r4, #8]
   26a88:	add	r1, r3, #2
   26a8c:	str	r1, [r4]
   26a90:	strh	r2, [r3]
   26a94:	add	sp, sp, #12
   26a98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26a9c:	ldr	r1, [r4, #28]
   26aa0:	mov	r3, #1
   26aa4:	ldr	r0, [r4, #40]	; 0x28
   26aa8:	add	r2, r2, r1
   26aac:	str	r3, [sp]
   26ab0:	add	r1, r4, #60	; 0x3c
   26ab4:	ldr	r9, [r4, #48]	; 0x30
   26ab8:	blx	r9
   26abc:	cmp	r0, #0
   26ac0:	bne	26b00 <flatcc_builder_table_add_offset@@Base+0x120>
   26ac4:	ldr	r6, [r4, #28]
   26ac8:	ldr	r3, [r4, #64]	; 0x40
   26acc:	ldr	r2, [pc, #120]	; 26b4c <flatcc_builder_table_add_offset@@Base+0x16c>
   26ad0:	sub	r3, r3, r6
   26ad4:	ldr	r0, [r4, #60]	; 0x3c
   26ad8:	ldr	r1, [r4, #32]
   26adc:	ldr	ip, [r4, #4]
   26ae0:	cmp	r3, r2
   26ae4:	add	r0, r0, r6
   26ae8:	movcs	r3, r2
   26aec:	str	r0, [r4, #16]
   26af0:	str	r3, [r4, #24]
   26af4:	add	ip, ip, r7
   26af8:	str	r2, [r1, #4]
   26afc:	b	26a64 <flatcc_builder_table_add_offset@@Base+0x84>
   26b00:	mov	r0, r6
   26b04:	b	26a94 <flatcc_builder_table_add_offset@@Base+0xb4>
   26b08:	ldr	r3, [pc, #64]	; 26b50 <flatcc_builder_table_add_offset@@Base+0x170>
   26b0c:	ldr	r2, [pc, #64]	; 26b54 <flatcc_builder_table_add_offset@@Base+0x174>
   26b10:	ldr	r1, [pc, #64]	; 26b58 <flatcc_builder_table_add_offset@@Base+0x178>
   26b14:	ldr	r0, [pc, #64]	; 26b5c <flatcc_builder_table_add_offset@@Base+0x17c>
   26b18:	bl	126a8 <__assert_fail@plt>
   26b1c:	ldr	r3, [pc, #44]	; 26b50 <flatcc_builder_table_add_offset@@Base+0x170>
   26b20:	ldr	r2, [pc, #56]	; 26b60 <flatcc_builder_table_add_offset@@Base+0x180>
   26b24:	ldr	r1, [pc, #44]	; 26b58 <flatcc_builder_table_add_offset@@Base+0x178>
   26b28:	ldr	r0, [pc, #52]	; 26b64 <flatcc_builder_table_add_offset@@Base+0x184>
   26b2c:	bl	126a8 <__assert_fail@plt>
   26b30:	ldr	r3, [pc, #24]	; 26b50 <flatcc_builder_table_add_offset@@Base+0x170>
   26b34:	ldr	r2, [pc, #44]	; 26b68 <flatcc_builder_table_add_offset@@Base+0x188>
   26b38:	ldr	r1, [pc, #24]	; 26b58 <flatcc_builder_table_add_offset@@Base+0x178>
   26b3c:	ldr	r0, [pc, #40]	; 26b6c <flatcc_builder_table_add_offset@@Base+0x18c>
   26b40:	bl	126a8 <__assert_fail@plt>
   26b44:	strdeq	r7, [r0], -ip
   26b48:			; <UNDEFINED> instruction: 0x9e3779b1
   26b4c:	strdeq	pc, [r0], -ip
   26b50:	andeq	pc, r2, r0, ror #4
   26b54:	andeq	r0, r0, fp, lsl r7
   26b58:	andeq	pc, r2, r8, ror #5
   26b5c:	andeq	pc, r2, r8, lsr #7
   26b60:	andeq	r0, r0, r4, lsl r7
   26b64:	andeq	pc, r2, ip, asr #12
   26b68:	andeq	r0, r0, r3, lsl r7
   26b6c:			; <UNDEFINED> instruction: 0x0002f5b4

00026b70 <flatcc_builder_table_add_union@@Base>:
   26b70:	push	{r4, r5, r6, r7, r8, r9, lr}
   26b74:	sub	sp, sp, #20
   26b78:	add	ip, sp, #16
   26b7c:	stmdb	ip, {r2, r3}
   26b80:	ldr	r3, [r0, #32]
   26b84:	ldrb	r6, [sp, #8]
   26b88:	ldr	r5, [sp, #12]
   26b8c:	ldrh	r3, [r3, #14]
   26b90:	cmp	r3, #3
   26b94:	bne	26d20 <flatcc_builder_table_add_union@@Base+0x1b0>
   26b98:	cmp	r6, #0
   26b9c:	mov	r4, r0
   26ba0:	mov	r7, r1
   26ba4:	beq	26c74 <flatcc_builder_table_add_union@@Base+0x104>
   26ba8:	cmp	r5, #0
   26bac:	beq	26bd0 <flatcc_builder_table_add_union@@Base+0x60>
   26bb0:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   26bb4:	cmp	r0, #0
   26bb8:	beq	26d5c <flatcc_builder_table_add_union@@Base+0x1ec>
   26bbc:	ldr	r3, [r4, #32]
   26bc0:	str	r5, [r0]
   26bc4:	ldrh	r3, [r3, #14]
   26bc8:	cmp	r3, #3
   26bcc:	bne	26d34 <flatcc_builder_table_add_union@@Base+0x1c4>
   26bd0:	ldr	r3, [pc, #408]	; 26d70 <flatcc_builder_table_add_union@@Base+0x200>
   26bd4:	sub	r1, r7, #1
   26bd8:	cmp	r1, r3
   26bdc:	bhi	26d48 <flatcc_builder_table_add_union@@Base+0x1d8>
   26be0:	ldrh	r3, [r4, #130]	; 0x82
   26be4:	lsl	r5, r1, #1
   26be8:	cmp	r3, #0
   26bec:	moveq	r3, #1
   26bf0:	strheq	r3, [r4, #130]	; 0x82
   26bf4:	ldr	r3, [r4, #4]
   26bf8:	add	r0, r3, r5
   26bfc:	ldrh	r3, [r3, r5]
   26c00:	cmp	r3, #0
   26c04:	bne	26d0c <flatcc_builder_table_add_union@@Base+0x19c>
   26c08:	ldr	r3, [r4, #12]
   26c0c:	ldr	r2, [pc, #352]	; 26d74 <flatcc_builder_table_add_union@@Base+0x204>
   26c10:	eor	r3, r3, r1
   26c14:	ldr	r7, [r4, #20]
   26c18:	mul	r3, r2, r3
   26c1c:	uxth	r8, r1
   26c20:	eor	r3, r3, #1
   26c24:	ldr	r1, [r4, #24]
   26c28:	mul	r3, r2, r3
   26c2c:	add	r2, r7, #1
   26c30:	cmp	r2, r1
   26c34:	str	r3, [r4, #12]
   26c38:	str	r2, [r4, #20]
   26c3c:	bcs	26c90 <flatcc_builder_table_add_union@@Base+0x120>
   26c40:	ldr	r3, [r4, #16]
   26c44:	add	r2, r7, #4
   26c48:	strh	r2, [r0]
   26c4c:	ldrh	r2, [r4, #8]
   26c50:	cmp	r2, r8
   26c54:	addls	r1, r8, #1
   26c58:	strhls	r1, [r4, #8]
   26c5c:	cmn	r3, r7
   26c60:	beq	26cf8 <flatcc_builder_table_add_union@@Base+0x188>
   26c64:	mov	r0, #0
   26c68:	strb	r6, [r3, r7]
   26c6c:	add	sp, sp, #20
   26c70:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26c74:	cmp	r5, #0
   26c78:	beq	26bd0 <flatcc_builder_table_add_union@@Base+0x60>
   26c7c:	ldr	r3, [pc, #244]	; 26d78 <flatcc_builder_table_add_union@@Base+0x208>
   26c80:	ldr	r2, [pc, #244]	; 26d7c <flatcc_builder_table_add_union@@Base+0x20c>
   26c84:	ldr	r1, [pc, #244]	; 26d80 <flatcc_builder_table_add_union@@Base+0x210>
   26c88:	ldr	r0, [pc, #244]	; 26d84 <flatcc_builder_table_add_union@@Base+0x214>
   26c8c:	bl	126a8 <__assert_fail@plt>
   26c90:	ldr	r2, [r4, #28]
   26c94:	mov	r3, #1
   26c98:	add	r2, r7, r2
   26c9c:	ldr	r0, [r4, #40]	; 0x28
   26ca0:	add	r2, r2, #2
   26ca4:	str	r3, [sp]
   26ca8:	add	r1, r4, #60	; 0x3c
   26cac:	ldr	r9, [r4, #48]	; 0x30
   26cb0:	blx	r9
   26cb4:	cmp	r0, #0
   26cb8:	bne	26cf8 <flatcc_builder_table_add_union@@Base+0x188>
   26cbc:	ldr	r0, [r4, #28]
   26cc0:	ldr	r2, [r4, #64]	; 0x40
   26cc4:	ldr	r1, [pc, #188]	; 26d88 <flatcc_builder_table_add_union@@Base+0x218>
   26cc8:	ldr	r3, [r4, #60]	; 0x3c
   26ccc:	sub	r2, r2, r0
   26cd0:	ldr	ip, [r4, #32]
   26cd4:	add	r3, r3, r0
   26cd8:	cmp	r2, r1
   26cdc:	ldr	r0, [r4, #4]
   26ce0:	movcs	r2, r1
   26ce4:	str	r3, [r4, #16]
   26ce8:	str	r2, [r4, #24]
   26cec:	add	r0, r0, r5
   26cf0:	str	r1, [ip, #4]
   26cf4:	b	26c44 <flatcc_builder_table_add_union@@Base+0xd4>
   26cf8:	ldr	r3, [pc, #120]	; 26d78 <flatcc_builder_table_add_union@@Base+0x208>
   26cfc:	ldr	r2, [pc, #136]	; 26d8c <flatcc_builder_table_add_union@@Base+0x21c>
   26d00:	ldr	r1, [pc, #120]	; 26d80 <flatcc_builder_table_add_union@@Base+0x210>
   26d04:	ldr	r0, [pc, #132]	; 26d90 <flatcc_builder_table_add_union@@Base+0x220>
   26d08:	bl	126a8 <__assert_fail@plt>
   26d0c:	ldr	r3, [pc, #128]	; 26d94 <flatcc_builder_table_add_union@@Base+0x224>
   26d10:	ldr	r2, [pc, #128]	; 26d98 <flatcc_builder_table_add_union@@Base+0x228>
   26d14:	ldr	r1, [pc, #100]	; 26d80 <flatcc_builder_table_add_union@@Base+0x210>
   26d18:	ldr	r0, [pc, #124]	; 26d9c <flatcc_builder_table_add_union@@Base+0x22c>
   26d1c:	bl	126a8 <__assert_fail@plt>
   26d20:	ldr	r3, [pc, #80]	; 26d78 <flatcc_builder_table_add_union@@Base+0x208>
   26d24:	ldr	r2, [pc, #116]	; 26da0 <flatcc_builder_table_add_union@@Base+0x230>
   26d28:	ldr	r1, [pc, #80]	; 26d80 <flatcc_builder_table_add_union@@Base+0x210>
   26d2c:	ldr	r0, [pc, #112]	; 26da4 <flatcc_builder_table_add_union@@Base+0x234>
   26d30:	bl	126a8 <__assert_fail@plt>
   26d34:	ldr	r3, [pc, #88]	; 26d94 <flatcc_builder_table_add_union@@Base+0x224>
   26d38:	ldr	r2, [pc, #104]	; 26da8 <flatcc_builder_table_add_union@@Base+0x238>
   26d3c:	ldr	r1, [pc, #60]	; 26d80 <flatcc_builder_table_add_union@@Base+0x210>
   26d40:	ldr	r0, [pc, #92]	; 26da4 <flatcc_builder_table_add_union@@Base+0x234>
   26d44:	bl	126a8 <__assert_fail@plt>
   26d48:	ldr	r3, [pc, #68]	; 26d94 <flatcc_builder_table_add_union@@Base+0x224>
   26d4c:	ldr	r2, [pc, #88]	; 26dac <flatcc_builder_table_add_union@@Base+0x23c>
   26d50:	ldr	r1, [pc, #40]	; 26d80 <flatcc_builder_table_add_union@@Base+0x210>
   26d54:	ldr	r0, [pc, #84]	; 26db0 <flatcc_builder_table_add_union@@Base+0x240>
   26d58:	bl	126a8 <__assert_fail@plt>
   26d5c:	ldr	r3, [pc, #20]	; 26d78 <flatcc_builder_table_add_union@@Base+0x208>
   26d60:	ldr	r2, [pc, #76]	; 26db4 <flatcc_builder_table_add_union@@Base+0x244>
   26d64:	ldr	r1, [pc, #20]	; 26d80 <flatcc_builder_table_add_union@@Base+0x210>
   26d68:	ldr	r0, [pc, #72]	; 26db8 <flatcc_builder_table_add_union@@Base+0x248>
   26d6c:	bl	126a8 <__assert_fail@plt>
   26d70:	strdeq	r7, [r0], -ip
   26d74:			; <UNDEFINED> instruction: 0x9e3779b1
   26d78:	andeq	pc, r2, r0, lsl #5
   26d7c:	andeq	r0, r0, pc, ror #11
   26d80:	andeq	pc, r2, r8, ror #5
   26d84:	muleq	r2, r0, r6
   26d88:	strdeq	pc, [r0], -ip
   26d8c:	strdeq	r0, [r0], -r6
   26d90:	andeq	pc, r2, r0, asr #13
   26d94:	andeq	pc, r2, r8, lsr #4
   26d98:	strdeq	r0, [r0], -r8
   26d9c:	andeq	pc, r2, r8, lsr #7
   26da0:	andeq	r0, r0, lr, ror #11
   26da4:			; <UNDEFINED> instruction: 0x0002f5b4
   26da8:	andeq	r0, r0, sp, ror #13
   26dac:	andeq	r0, r0, lr, ror #13
   26db0:	andeq	pc, r2, ip, asr #12
   26db4:	strdeq	r0, [r0], -r2
   26db8:			; <UNDEFINED> instruction: 0x0002f6b4

00026dbc <flatcc_builder_table_add_union_vector@@Base>:
   26dbc:	push	{r4, r5, r6, r7, lr}
   26dc0:	sub	sp, sp, #12
   26dc4:	add	ip, sp, #8
   26dc8:	stmdb	ip, {r2, r3}
   26dcc:	ldr	r3, [r0, #32]
   26dd0:	ldr	r4, [sp]
   26dd4:	ldr	r6, [sp, #4]
   26dd8:	ldrh	r3, [r3, #14]
   26ddc:	cmp	r3, #3
   26de0:	bne	26e70 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   26de4:	clz	r3, r6
   26de8:	clz	r2, r4
   26dec:	lsr	r3, r3, #5
   26df0:	lsr	r2, r2, #5
   26df4:	cmp	r2, r3
   26df8:	beq	26e18 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   26dfc:	adds	r4, r4, #0
   26e00:	movne	r4, #1
   26e04:	cmp	r4, r3
   26e08:	mvnne	r0, #0
   26e0c:	beq	26e84 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   26e10:	add	sp, sp, #12
   26e14:	pop	{r4, r5, r6, r7, pc}
   26e18:	cmp	r4, #0
   26e1c:	moveq	r0, r4
   26e20:	beq	26e10 <flatcc_builder_table_add_union_vector@@Base+0x54>
   26e24:	mov	r7, r1
   26e28:	sub	r1, r1, #1
   26e2c:	mov	r5, r0
   26e30:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   26e34:	cmp	r0, #0
   26e38:	beq	26e98 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   26e3c:	str	r4, [r0]
   26e40:	mov	r1, r7
   26e44:	mov	r0, r5
   26e48:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   26e4c:	cmp	r0, #0
   26e50:	strne	r6, [r0]
   26e54:	movne	r0, #0
   26e58:	bne	26e10 <flatcc_builder_table_add_union_vector@@Base+0x54>
   26e5c:	ldr	r3, [pc, #72]	; 26eac <flatcc_builder_table_add_union_vector@@Base+0xf0>
   26e60:	ldr	r2, [pc, #72]	; 26eb0 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   26e64:	ldr	r1, [pc, #72]	; 26eb4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   26e68:	ldr	r0, [pc, #72]	; 26eb8 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   26e6c:	bl	126a8 <__assert_fail@plt>
   26e70:	ldr	r3, [pc, #52]	; 26eac <flatcc_builder_table_add_union_vector@@Base+0xf0>
   26e74:	mov	r2, #1536	; 0x600
   26e78:	ldr	r1, [pc, #52]	; 26eb4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   26e7c:	ldr	r0, [pc, #56]	; 26ebc <flatcc_builder_table_add_union_vector@@Base+0x100>
   26e80:	bl	126a8 <__assert_fail@plt>
   26e84:	ldr	r3, [pc, #32]	; 26eac <flatcc_builder_table_add_union_vector@@Base+0xf0>
   26e88:	ldr	r2, [pc, #48]	; 26ec0 <flatcc_builder_table_add_union_vector@@Base+0x104>
   26e8c:	ldr	r1, [pc, #32]	; 26eb4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   26e90:	ldr	r0, [pc, #44]	; 26ec4 <flatcc_builder_table_add_union_vector@@Base+0x108>
   26e94:	bl	126a8 <__assert_fail@plt>
   26e98:	ldr	r3, [pc, #12]	; 26eac <flatcc_builder_table_add_union_vector@@Base+0xf0>
   26e9c:	ldr	r2, [pc, #36]	; 26ec8 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   26ea0:	ldr	r1, [pc, #12]	; 26eb4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   26ea4:	ldr	r0, [pc, #12]	; 26eb8 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   26ea8:	bl	126a8 <__assert_fail@plt>
   26eac:	andeq	pc, r2, r0, lsr #5
   26eb0:	andeq	r0, r0, r8, lsl #12
   26eb4:	andeq	pc, r2, r8, ror #5
   26eb8:			; <UNDEFINED> instruction: 0x0002f6b4
   26ebc:			; <UNDEFINED> instruction: 0x0002f5b4
   26ec0:	andeq	r0, r0, r1, lsl #12
   26ec4:	andeq	pc, r2, ip, asr #13
   26ec8:	andeq	r0, r0, r4, lsl #12

00026ecc <flatcc_builder_push_buffer_alignment@@Base>:
   26ecc:	mov	r3, r0
   26ed0:	mov	r2, #4
   26ed4:	ldrh	r0, [r0, #128]	; 0x80
   26ed8:	strh	r2, [r3, #128]	; 0x80
   26edc:	bx	lr

00026ee0 <flatcc_builder_pop_buffer_alignment@@Base>:
   26ee0:	ldrh	r3, [r0, #128]	; 0x80
   26ee4:	cmp	r3, r1
   26ee8:	strhcc	r1, [r0, #128]	; 0x80
   26eec:	bx	lr

00026ef0 <flatcc_builder_get_buffer_alignment@@Base>:
   26ef0:	ldrh	r0, [r0, #128]	; 0x80
   26ef4:	bx	lr

00026ef8 <flatcc_builder_set_vtable_clustering@@Base>:
   26ef8:	clz	r1, r1
   26efc:	lsr	r1, r1, #5
   26f00:	str	r1, [r0, #180]	; 0xb4
   26f04:	bx	lr

00026f08 <flatcc_builder_set_block_align@@Base>:
   26f08:	strh	r1, [r0, #132]	; 0x84
   26f0c:	bx	lr

00026f10 <flatcc_builder_get_level@@Base>:
   26f10:	ldr	r0, [r0, #156]	; 0x9c
   26f14:	bx	lr

00026f18 <flatcc_builder_set_max_level@@Base>:
   26f18:	ldr	r3, [r0, #160]	; 0xa0
   26f1c:	str	r1, [r0, #176]	; 0xb0
   26f20:	cmp	r1, r3
   26f24:	strgt	r1, [r0, #160]	; 0xa0
   26f28:	bx	lr

00026f2c <flatcc_builder_get_buffer_size@@Base>:
   26f2c:	ldr	r2, [r0, #140]	; 0x8c
   26f30:	ldr	r0, [r0, #136]	; 0x88
   26f34:	sub	r0, r2, r0
   26f38:	bx	lr

00026f3c <flatcc_builder_get_buffer_start@@Base>:
   26f3c:	ldr	r0, [r0, #136]	; 0x88
   26f40:	bx	lr

00026f44 <flatcc_builder_get_buffer_end@@Base>:
   26f44:	ldr	r0, [r0, #140]	; 0x8c
   26f48:	bx	lr

00026f4c <flatcc_builder_set_vtable_cache_limit@@Base>:
   26f4c:	str	r1, [r0, #172]	; 0xac
   26f50:	bx	lr

00026f54 <flatcc_builder_set_identifier@@Base>:
   26f54:	ldr	r3, [pc, #16]	; 26f6c <flatcc_builder_set_identifier@@Base+0x18>
   26f58:	cmp	r1, #0
   26f5c:	moveq	r1, r3
   26f60:	ldr	r3, [r1]
   26f64:	str	r3, [r0, #168]	; 0xa8
   26f68:	bx	lr
   26f6c:	andeq	lr, r2, r0, lsr ip

00026f70 <flatcc_builder_get_type@@Base>:
   26f70:	ldr	r0, [r0, #32]
   26f74:	cmp	r0, #0
   26f78:	ldrhne	r0, [r0, #14]
   26f7c:	bx	lr

00026f80 <flatcc_builder_get_type_at@@Base>:
   26f80:	cmp	r1, #0
   26f84:	ble	26fac <flatcc_builder_get_type_at@@Base+0x2c>
   26f88:	ldr	r3, [r0, #156]	; 0x9c
   26f8c:	cmp	r1, r3
   26f90:	bgt	26fac <flatcc_builder_get_type_at@@Base+0x2c>
   26f94:	sub	r1, r1, r3
   26f98:	ldr	r3, [r0, #32]
   26f9c:	add	r1, r1, r1, lsl #3
   26fa0:	add	r1, r3, r1, lsl #2
   26fa4:	ldrh	r0, [r1, #14]
   26fa8:	bx	lr
   26fac:	mov	r0, #0
   26fb0:	bx	lr

00026fb4 <flatcc_builder_get_direct_buffer@@Base>:
   26fb4:	ldr	r3, [r0, #184]	; 0xb8
   26fb8:	cmp	r3, #0
   26fbc:	beq	26fd0 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   26fc0:	ldr	r2, [r0, #188]	; 0xbc
   26fc4:	ldr	r3, [r0, #192]	; 0xc0
   26fc8:	cmp	r2, r3
   26fcc:	beq	26fe4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   26fd0:	cmp	r1, #0
   26fd4:	movne	r0, #0
   26fd8:	strne	r0, [r1]
   26fdc:	moveq	r0, r1
   26fe0:	bx	lr
   26fe4:	cmp	r1, #0
   26fe8:	ldrne	r3, [r0, #212]	; 0xd4
   26fec:	ldr	r0, [r0, #196]	; 0xc4
   26ff0:	strne	r3, [r1]
   26ff4:	bx	lr

00026ff8 <flatcc_builder_copy_buffer@@Base>:
   26ff8:	ldr	r3, [r0, #184]	; 0xb8
   26ffc:	cmp	r3, #0
   27000:	beq	2701c <flatcc_builder_copy_buffer@@Base+0x24>
   27004:	push	{r4, lr}
   27008:	add	r0, r0, #188	; 0xbc
   2700c:	bl	276d0 <flatcc_emitter_copy_buffer@@Base>
   27010:	cmp	r0, #0
   27014:	popne	{r4, pc}
   27018:	bl	12944 <__assert_fail@plt+0x29c>
   2701c:	mov	r0, r3
   27020:	bx	lr

00027024 <flatcc_builder_finalize_buffer@@Base>:
   27024:	push	{r4, r5, r6, lr}
   27028:	cmp	r1, #0
   2702c:	ldr	r4, [r0, #140]	; 0x8c
   27030:	ldr	r2, [r0, #136]	; 0x88
   27034:	mov	r5, r0
   27038:	sub	r4, r4, r2
   2703c:	strne	r4, [r1]
   27040:	mov	r0, r4
   27044:	bl	12600 <malloc@plt>
   27048:	subs	r6, r0, #0
   2704c:	beq	27090 <flatcc_builder_finalize_buffer@@Base+0x6c>
   27050:	ldr	r3, [r5, #184]	; 0xb8
   27054:	cmp	r3, #0
   27058:	beq	2707c <flatcc_builder_finalize_buffer@@Base+0x58>
   2705c:	mov	r2, r4
   27060:	add	r0, r5, #188	; 0xbc
   27064:	mov	r1, r6
   27068:	bl	276d0 <flatcc_emitter_copy_buffer@@Base>
   2706c:	cmp	r0, #0
   27070:	beq	270a4 <flatcc_builder_finalize_buffer@@Base+0x80>
   27074:	mov	r0, r6
   27078:	pop	{r4, r5, r6, pc}
   2707c:	ldr	r3, [pc, #36]	; 270a8 <flatcc_builder_finalize_buffer@@Base+0x84>
   27080:	ldr	r2, [pc, #36]	; 270ac <flatcc_builder_finalize_buffer@@Base+0x88>
   27084:	ldr	r1, [pc, #36]	; 270b0 <flatcc_builder_finalize_buffer@@Base+0x8c>
   27088:	ldr	r0, [pc, #36]	; 270b4 <flatcc_builder_finalize_buffer@@Base+0x90>
   2708c:	bl	126a8 <__assert_fail@plt>
   27090:	ldr	r3, [pc, #16]	; 270a8 <flatcc_builder_finalize_buffer@@Base+0x84>
   27094:	ldr	r2, [pc, #28]	; 270b8 <flatcc_builder_finalize_buffer@@Base+0x94>
   27098:	ldr	r1, [pc, #16]	; 270b0 <flatcc_builder_finalize_buffer@@Base+0x8c>
   2709c:	ldr	r0, [pc, #16]	; 270b4 <flatcc_builder_finalize_buffer@@Base+0x90>
   270a0:	bl	126a8 <__assert_fail@plt>
   270a4:	bl	12944 <__assert_fail@plt+0x29c>
   270a8:	andeq	pc, r2, r8, asr #5
   270ac:	muleq	r0, ip, r7
   270b0:	andeq	pc, r2, r8, ror #5
   270b4:	andeq	pc, r2, r8, lsr #7
   270b8:	muleq	r0, r8, r7

000270bc <flatcc_builder_finalize_aligned_buffer@@Base>:
   270bc:	push	{r4, r5, r6, r7, lr}
   270c0:	subs	r7, r1, #0
   270c4:	ldrh	r1, [r0, #128]	; 0x80
   270c8:	ldr	r4, [r0, #140]	; 0x8c
   270cc:	ldr	r3, [r0, #136]	; 0x88
   270d0:	sub	sp, sp, #12
   270d4:	sub	r3, r4, r3
   270d8:	sub	r4, r1, #1
   270dc:	strne	r3, [r7]
   270e0:	add	r4, r4, r3
   270e4:	mov	r5, r0
   270e8:	rsb	r3, r1, #0
   270ec:	add	r0, sp, #8
   270f0:	cmp	r1, #4
   270f4:	mov	ip, #0
   270f8:	and	r4, r4, r3
   270fc:	movcc	r1, #4
   27100:	mov	r2, r4
   27104:	str	ip, [r0, #-4]!
   27108:	bl	12648 <posix_memalign@plt>
   2710c:	cmp	r0, #0
   27110:	beq	27140 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   27114:	ldr	r0, [sp, #4]
   27118:	cmp	r0, #0
   2711c:	beq	27124 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   27120:	bl	125a0 <free@plt>
   27124:	cmp	r7, #0
   27128:	moveq	r6, r7
   2712c:	movne	r6, #0
   27130:	strne	r6, [r7]
   27134:	mov	r0, r6
   27138:	add	sp, sp, #12
   2713c:	pop	{r4, r5, r6, r7, pc}
   27140:	ldr	r6, [sp, #4]
   27144:	cmp	r6, #0
   27148:	beq	27124 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   2714c:	ldr	r3, [r5, #184]	; 0xb8
   27150:	cmp	r3, #0
   27154:	beq	27174 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   27158:	mov	r2, r4
   2715c:	add	r0, r5, #188	; 0xbc
   27160:	mov	r1, r6
   27164:	bl	276d0 <flatcc_emitter_copy_buffer@@Base>
   27168:	cmp	r0, #0
   2716c:	bne	27134 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   27170:	bl	12944 <__assert_fail@plt+0x29c>
   27174:	mov	r0, r6
   27178:	b	27120 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

0002717c <flatcc_builder_aligned_alloc@@Base>:
   2717c:	push	{r4, lr}
   27180:	sub	sp, sp, #8
   27184:	add	r3, sp, #8
   27188:	cmp	r0, #4
   2718c:	mov	r4, #0
   27190:	mov	r2, r1
   27194:	str	r4, [r3, #-4]!
   27198:	movcs	r1, r0
   2719c:	movcc	r1, #4
   271a0:	mov	r0, r3
   271a4:	bl	12648 <posix_memalign@plt>
   271a8:	cmp	r0, r4
   271ac:	ldr	r0, [sp, #4]
   271b0:	beq	271c4 <flatcc_builder_aligned_alloc@@Base+0x48>
   271b4:	cmp	r0, #0
   271b8:	beq	271c4 <flatcc_builder_aligned_alloc@@Base+0x48>
   271bc:	bl	125a0 <free@plt>
   271c0:	mov	r0, r4
   271c4:	add	sp, sp, #8
   271c8:	pop	{r4, pc}

000271cc <flatcc_builder_aligned_free@@Base>:
   271cc:	b	125a0 <free@plt>

000271d0 <flatcc_builder_get_emit_context@@Base>:
   271d0:	ldr	r0, [r0, #36]	; 0x24
   271d4:	bx	lr

000271d8 <flatcc_emitter_recycle_page@@Base>:
   271d8:	ldr	r3, [r0]
   271dc:	cmp	r3, r1
   271e0:	beq	27228 <flatcc_emitter_recycle_page@@Base+0x50>
   271e4:	ldr	r2, [r0, #4]
   271e8:	cmp	r1, r2
   271ec:	beq	27228 <flatcc_emitter_recycle_page@@Base+0x50>
   271f0:	ldr	ip, [r1, #2944]	; 0xb80
   271f4:	ldr	r2, [r1, #2948]	; 0xb84
   271f8:	push	{lr}		; (str lr, [sp, #-4]!)
   271fc:	mov	r0, #0
   27200:	str	r2, [ip, #2948]	; 0xb84
   27204:	ldr	r2, [r3, #2948]	; 0xb84
   27208:	ldr	lr, [r1, #2948]	; 0xb84
   2720c:	str	ip, [lr, #2944]	; 0xb80
   27210:	str	r3, [r1, #2944]	; 0xb80
   27214:	str	r2, [r1, #2948]	; 0xb84
   27218:	str	r1, [r2, #2944]	; 0xb80
   2721c:	ldr	r3, [r1, #2944]	; 0xb80
   27220:	str	r1, [r3, #2948]	; 0xb84
   27224:	pop	{pc}		; (ldr pc, [sp], #4)
   27228:	mvn	r0, #0
   2722c:	bx	lr

00027230 <flatcc_emitter_reset@@Base>:
   27230:	ldr	r2, [r0]
   27234:	cmp	r2, #0
   27238:	bxeq	lr
   2723c:	ldr	r3, [r0, #32]
   27240:	mov	r1, #1472	; 0x5c0
   27244:	push	{r4, lr}
   27248:	cmp	r3, #0
   2724c:	str	r1, [r0, #12]
   27250:	str	r1, [r0, #20]
   27254:	ldr	r1, [r0, #24]
   27258:	add	ip, r2, #1472	; 0x5c0
   2725c:	moveq	r3, r1
   27260:	stmib	r0, {r2, ip}
   27264:	str	ip, [r0, #16]
   27268:	add	ip, r3, r3, lsl #1
   2726c:	lsr	r3, r1, #2
   27270:	add	r3, r3, ip, lsr #2
   27274:	ldr	ip, [r0, #28]
   27278:	ldr	lr, [pc, #104]	; 272e8 <flatcc_emitter_reset@@Base+0xb8>
   2727c:	cmp	ip, r3, lsl #1
   27280:	mov	r1, #0
   27284:	str	lr, [r2, #2952]	; 0xb88
   27288:	str	r3, [r0, #32]
   2728c:	str	r1, [r0, #24]
   27290:	popls	{r4, pc}
   27294:	ldr	r3, [r2, #2944]	; 0xb80
   27298:	mov	r4, r0
   2729c:	cmp	r2, r3
   272a0:	popeq	{r4, pc}
   272a4:	ldr	r1, [r3, #2944]	; 0xb80
   272a8:	mov	r0, r3
   272ac:	str	r1, [r2, #2944]	; 0xb80
   272b0:	ldr	r3, [r3, #2944]	; 0xb80
   272b4:	str	r2, [r3, #2948]	; 0xb84
   272b8:	bl	125a0 <free@plt>
   272bc:	ldr	r3, [r4, #28]
   272c0:	ldr	r2, [r4, #32]
   272c4:	sub	r3, r3, #2944	; 0xb80
   272c8:	str	r3, [r4, #28]
   272cc:	cmp	r3, r2, lsl #1
   272d0:	popls	{r4, pc}
   272d4:	ldm	r4, {r1, r2}
   272d8:	ldr	r3, [r2, #2944]	; 0xb80
   272dc:	cmp	r3, r1
   272e0:	bne	272a4 <flatcc_emitter_reset@@Base+0x74>
   272e4:	pop	{r4, pc}
   272e8:			; <UNDEFINED> instruction: 0xfffffa40

000272ec <flatcc_emitter_clear@@Base>:
   272ec:	ldr	r3, [r0]
   272f0:	cmp	r3, #0
   272f4:	bxeq	lr
   272f8:	ldr	r2, [r3, #2948]	; 0xb84
   272fc:	mov	r1, #0
   27300:	push	{r4, r5, r6, lr}
   27304:	mov	r5, r0
   27308:	str	r1, [r2, #2944]	; 0xb80
   2730c:	ldr	r4, [r3, #2944]	; 0xb80
   27310:	cmp	r4, r1
   27314:	bne	27320 <flatcc_emitter_clear@@Base+0x34>
   27318:	b	27350 <flatcc_emitter_clear@@Base+0x64>
   2731c:	mov	r4, r3
   27320:	ldr	r0, [r4, #2948]	; 0xb84
   27324:	bl	125a0 <free@plt>
   27328:	ldr	r3, [r4, #2944]	; 0xb80
   2732c:	cmp	r3, #0
   27330:	bne	2731c <flatcc_emitter_clear@@Base+0x30>
   27334:	mov	r0, r4
   27338:	bl	125a0 <free@plt>
   2733c:	mov	r0, r5
   27340:	mov	r2, #36	; 0x24
   27344:	mov	r1, #0
   27348:	pop	{r4, r5, r6, lr}
   2734c:	b	12654 <memset@plt>
   27350:	mov	r4, r3
   27354:	b	27334 <flatcc_emitter_clear@@Base+0x48>

00027358 <flatcc_emitter@@Base>:
   27358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2735c:	sub	sp, sp, #12
   27360:	mov	r5, r0
   27364:	ldr	ip, [sp, #48]	; 0x30
   27368:	ldr	r0, [r0, #24]
   2736c:	cmp	r3, #0
   27370:	add	r0, r0, ip
   27374:	str	r0, [r5, #24]
   27378:	blt	27540 <flatcc_emitter@@Base+0x1e8>
   2737c:	ldr	r0, [r5, #20]
   27380:	cmp	ip, r0
   27384:	bls	27414 <flatcc_emitter@@Base+0xbc>
   27388:	cmp	r2, #0
   2738c:	addne	r7, r1, #8
   27390:	movne	r8, r2
   27394:	movne	r9, #2944	; 0xb80
   27398:	beq	27408 <flatcc_emitter@@Base+0xb0>
   2739c:	ldr	r6, [r7, #-4]
   273a0:	ldr	sl, [r7, #-8]
   273a4:	cmp	r6, #0
   273a8:	movne	r4, r0
   273ac:	beq	273fc <flatcc_emitter@@Base+0xa4>
   273b0:	cmp	r6, r4
   273b4:	bls	2745c <flatcc_emitter@@Base+0x104>
   273b8:	cmp	r4, #0
   273bc:	beq	27468 <flatcc_emitter@@Base+0x110>
   273c0:	sub	r6, r6, r4
   273c4:	mov	r2, r4
   273c8:	mov	r1, sl
   273cc:	ldr	r0, [r5, #16]
   273d0:	bl	125ac <memcpy@plt>
   273d4:	ldr	r0, [r5, #20]
   273d8:	ldr	r3, [r5, #16]
   273dc:	add	sl, sl, r4
   273e0:	add	r3, r3, r4
   273e4:	cmp	r6, #0
   273e8:	sub	r4, r0, r4
   273ec:	str	r3, [r5, #16]
   273f0:	str	r4, [r5, #20]
   273f4:	mov	r0, r4
   273f8:	bne	273b0 <flatcc_emitter@@Base+0x58>
   273fc:	subs	r8, r8, #1
   27400:	add	r7, r7, #8
   27404:	bne	2739c <flatcc_emitter@@Base+0x44>
   27408:	mov	r0, #0
   2740c:	add	sp, sp, #12
   27410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27414:	ldr	r3, [r5, #16]
   27418:	sub	r0, r0, ip
   2741c:	add	ip, r3, ip
   27420:	str	r0, [r5, #20]
   27424:	str	ip, [r5, #16]
   27428:	cmp	r2, #0
   2742c:	addne	r4, r1, #8
   27430:	movne	r7, r2
   27434:	beq	27408 <flatcc_emitter@@Base+0xb0>
   27438:	ldmdb	r4, {r1, r2}
   2743c:	mov	r0, r3
   27440:	bl	125ac <memcpy@plt>
   27444:	ldr	r2, [r4, #-4]
   27448:	subs	r7, r7, #1
   2744c:	add	r4, r4, #8
   27450:	add	r3, r0, r2
   27454:	bne	27438 <flatcc_emitter@@Base+0xe0>
   27458:	b	27408 <flatcc_emitter@@Base+0xb0>
   2745c:	mov	r4, r6
   27460:	mov	r6, #0
   27464:	b	273c4 <flatcc_emitter@@Base+0x6c>
   27468:	ldr	r4, [r5, #4]
   2746c:	cmp	r4, #0
   27470:	beq	274e0 <flatcc_emitter@@Base+0x188>
   27474:	ldr	fp, [r4, #2944]	; 0xb80
   27478:	ldr	r3, [r5]
   2747c:	cmp	fp, r3
   27480:	beq	274a8 <flatcc_emitter@@Base+0x150>
   27484:	str	fp, [r5, #4]
   27488:	ldr	r3, [fp, #2948]	; 0xb84
   2748c:	mov	r4, #2944	; 0xb80
   27490:	str	fp, [r5, #16]
   27494:	ldr	r3, [r3, #2952]	; 0xb88
   27498:	str	r9, [r5, #20]
   2749c:	add	r3, r3, r4
   274a0:	str	r3, [fp, #2952]	; 0xb88
   274a4:	b	273b0 <flatcc_emitter@@Base+0x58>
   274a8:	ldr	r0, [pc, #540]	; 276cc <flatcc_emitter@@Base+0x374>
   274ac:	bl	12600 <malloc@plt>
   274b0:	cmp	r0, #0
   274b4:	beq	274f0 <flatcc_emitter@@Base+0x198>
   274b8:	ldr	r3, [r5, #28]
   274bc:	str	fp, [r0, #2944]	; 0xb80
   274c0:	add	r3, r3, #2944	; 0xb80
   274c4:	str	r4, [r0, #2948]	; 0xb84
   274c8:	str	r3, [r5, #28]
   274cc:	str	r0, [fp, #2948]	; 0xb84
   274d0:	str	r0, [r4, #2944]	; 0xb80
   274d4:	mov	fp, r0
   274d8:	str	r0, [r5, #4]
   274dc:	b	27488 <flatcc_emitter@@Base+0x130>
   274e0:	ldr	r0, [pc, #484]	; 276cc <flatcc_emitter@@Base+0x374>
   274e4:	bl	12600 <malloc@plt>
   274e8:	cmp	r0, #0
   274ec:	bne	274fc <flatcc_emitter@@Base+0x1a4>
   274f0:	mvn	r0, #0
   274f4:	add	sp, sp, #12
   274f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274fc:	mov	r2, #1472	; 0x5c0
   27500:	ldr	r3, [r5, #28]
   27504:	str	r2, [r5, #12]
   27508:	str	r2, [r5, #20]
   2750c:	sub	r2, r2, #2944	; 0xb80
   27510:	str	r2, [r0, #2952]	; 0xb88
   27514:	str	r0, [r5]
   27518:	add	r3, r3, #2944	; 0xb80
   2751c:	str	r0, [r5, #4]
   27520:	str	r0, [r0, #2944]	; 0xb80
   27524:	str	r0, [r0, #2948]	; 0xb84
   27528:	add	r0, r0, #1472	; 0x5c0
   2752c:	str	r0, [r5, #8]
   27530:	str	r0, [r5, #16]
   27534:	str	r3, [r5, #28]
   27538:	mov	r4, #1472	; 0x5c0
   2753c:	b	273b0 <flatcc_emitter@@Base+0x58>
   27540:	ldr	r0, [r5, #12]
   27544:	cmp	ip, r0
   27548:	bls	275c8 <flatcc_emitter@@Base+0x270>
   2754c:	add	r6, r1, r2, lsl #3
   27550:	mov	r7, r2
   27554:	mov	r9, #2944	; 0xb80
   27558:	mov	r8, #0
   2755c:	cmp	r7, #0
   27560:	beq	27408 <flatcc_emitter@@Base+0xb0>
   27564:	ldr	r4, [r6, #-4]
   27568:	ldr	sl, [r6, #-8]
   2756c:	cmp	r4, #0
   27570:	add	sl, sl, r4
   27574:	beq	275bc <flatcc_emitter@@Base+0x264>
   27578:	ldr	r2, [r5, #12]
   2757c:	cmp	r2, r4
   27580:	bcs	275e0 <flatcc_emitter@@Base+0x288>
   27584:	cmp	r2, #0
   27588:	beq	275f0 <flatcc_emitter@@Base+0x298>
   2758c:	sub	r4, r4, r2
   27590:	mov	r1, r8
   27594:	ldr	r0, [r5, #8]
   27598:	rsb	r3, r2, #0
   2759c:	add	r0, r0, r3
   275a0:	add	sl, sl, r3
   275a4:	str	r1, [r5, #12]
   275a8:	str	r0, [r5, #8]
   275ac:	mov	r1, sl
   275b0:	bl	125ac <memcpy@plt>
   275b4:	cmp	r4, #0
   275b8:	bne	27578 <flatcc_emitter@@Base+0x220>
   275bc:	sub	r6, r6, #8
   275c0:	sub	r7, r7, #1
   275c4:	b	2755c <flatcc_emitter@@Base+0x204>
   275c8:	ldr	r3, [r5, #8]
   275cc:	sub	r0, r0, ip
   275d0:	sub	r3, r3, ip
   275d4:	str	r0, [r5, #12]
   275d8:	str	r3, [r5, #8]
   275dc:	b	27428 <flatcc_emitter@@Base+0xd0>
   275e0:	sub	r1, r2, r4
   275e4:	mov	r2, r4
   275e8:	mov	r4, #0
   275ec:	b	27594 <flatcc_emitter@@Base+0x23c>
   275f0:	ldr	r3, [r5]
   275f4:	cmp	r3, #0
   275f8:	beq	2767c <flatcc_emitter@@Base+0x324>
   275fc:	ldr	fp, [r3, #2948]	; 0xb84
   27600:	ldr	r2, [r5, #4]
   27604:	cmp	fp, r2
   27608:	beq	2763c <flatcc_emitter@@Base+0x2e4>
   2760c:	ldr	r3, [r3, #2952]	; 0xb88
   27610:	sub	r3, r3, #2944	; 0xb80
   27614:	str	r3, [fp, #2952]	; 0xb88
   27618:	str	fp, [r5]
   2761c:	ldr	r3, [fp, #2944]	; 0xb80
   27620:	add	r2, fp, #2944	; 0xb80
   27624:	str	r9, [r5, #12]
   27628:	ldr	r3, [r3, #2952]	; 0xb88
   2762c:	str	r2, [r5, #8]
   27630:	sub	r3, r3, #2944	; 0xb80
   27634:	str	r3, [fp, #2952]	; 0xb88
   27638:	b	27578 <flatcc_emitter@@Base+0x220>
   2763c:	ldr	r0, [pc, #136]	; 276cc <flatcc_emitter@@Base+0x374>
   27640:	str	r3, [sp, #4]
   27644:	bl	12600 <malloc@plt>
   27648:	ldr	r3, [sp, #4]
   2764c:	cmp	r0, #0
   27650:	beq	274f0 <flatcc_emitter@@Base+0x198>
   27654:	ldr	r2, [r5, #28]
   27658:	str	fp, [r0, #2948]	; 0xb84
   2765c:	add	r2, r2, #2944	; 0xb80
   27660:	str	r3, [r0, #2944]	; 0xb80
   27664:	str	r2, [r5, #28]
   27668:	str	r0, [r3, #2948]	; 0xb84
   2766c:	str	r0, [fp, #2944]	; 0xb80
   27670:	str	r0, [r5]
   27674:	mov	fp, r0
   27678:	b	2761c <flatcc_emitter@@Base+0x2c4>
   2767c:	ldr	r0, [pc, #72]	; 276cc <flatcc_emitter@@Base+0x374>
   27680:	bl	12600 <malloc@plt>
   27684:	cmp	r0, #0
   27688:	beq	274f0 <flatcc_emitter@@Base+0x198>
   2768c:	mov	r2, #1472	; 0x5c0
   27690:	ldr	r3, [r5, #28]
   27694:	str	r2, [r5, #12]
   27698:	str	r2, [r5, #20]
   2769c:	sub	r2, r2, #2944	; 0xb80
   276a0:	str	r2, [r0, #2952]	; 0xb88
   276a4:	str	r0, [r5]
   276a8:	add	r3, r3, #2944	; 0xb80
   276ac:	str	r0, [r5, #4]
   276b0:	str	r0, [r0, #2944]	; 0xb80
   276b4:	str	r0, [r0, #2948]	; 0xb84
   276b8:	add	r0, r0, #1472	; 0x5c0
   276bc:	str	r0, [r5, #8]
   276c0:	str	r0, [r5, #16]
   276c4:	str	r3, [r5, #28]
   276c8:	b	27578 <flatcc_emitter@@Base+0x220>
   276cc:	andeq	r0, r0, ip, lsl #23

000276d0 <flatcc_emitter_copy_buffer@@Base>:
   276d0:	ldr	ip, [r0, #24]
   276d4:	cmp	ip, r2
   276d8:	bhi	27774 <flatcc_emitter_copy_buffer@@Base+0xa4>
   276dc:	ldr	r2, [r0]
   276e0:	cmp	r2, #0
   276e4:	beq	27774 <flatcc_emitter_copy_buffer@@Base+0xa4>
   276e8:	mov	r3, r1
   276ec:	ldr	r1, [r0, #4]
   276f0:	push	{r4, r5, r6, lr}
   276f4:	cmp	r2, r1
   276f8:	mov	r5, r0
   276fc:	beq	27780 <flatcc_emitter_copy_buffer@@Base+0xb0>
   27700:	ldr	r4, [r0, #12]
   27704:	ldr	r1, [r5, #8]
   27708:	rsb	r4, r4, #2944	; 0xb80
   2770c:	mov	r2, r4
   27710:	mov	r0, r3
   27714:	bl	125ac <memcpy@plt>
   27718:	ldr	r2, [r5]
   2771c:	ldr	r1, [r5, #4]
   27720:	add	r3, r0, r4
   27724:	ldr	r4, [r2, #2944]	; 0xb80
   27728:	cmp	r4, r1
   2772c:	beq	27758 <flatcc_emitter_copy_buffer@@Base+0x88>
   27730:	mov	r6, #2944	; 0xb80
   27734:	mov	r1, r4
   27738:	mov	r0, r3
   2773c:	mov	r2, r6
   27740:	bl	125ac <memcpy@plt>
   27744:	ldr	r4, [r4, #2944]	; 0xb80
   27748:	ldr	r1, [r5, #4]
   2774c:	cmp	r1, r4
   27750:	add	r3, r0, #2944	; 0xb80
   27754:	bne	27734 <flatcc_emitter_copy_buffer@@Base+0x64>
   27758:	ldr	r2, [r5, #20]
   2775c:	mov	r0, r3
   27760:	rsb	r2, r2, #2944	; 0xb80
   27764:	bl	125ac <memcpy@plt>
   27768:	mov	r3, r0
   2776c:	mov	r0, r3
   27770:	pop	{r4, r5, r6, pc}
   27774:	mov	r3, #0
   27778:	mov	r0, r3
   2777c:	bx	lr
   27780:	ldr	r1, [r0, #8]
   27784:	mov	r2, ip
   27788:	mov	r0, r3
   2778c:	bl	125ac <memcpy@plt>
   27790:	mov	r3, r0
   27794:	b	2776c <flatcc_emitter_copy_buffer@@Base+0x9c>
   27798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2779c:	sub	sp, sp, #36	; 0x24
   277a0:	mov	r7, r3
   277a4:	ldr	r3, [sp, #72]	; 0x48
   277a8:	mov	r5, r2
   277ac:	cmp	r1, r2
   277b0:	mov	r2, #0
   277b4:	mov	r8, r0
   277b8:	strb	r2, [r3]
   277bc:	beq	2793c <flatcc_emitter_copy_buffer@@Base+0x26c>
   277c0:	ldrb	r3, [r1]
   277c4:	mov	r6, r1
   277c8:	cmp	r3, #34	; 0x22
   277cc:	beq	27a84 <flatcc_emitter_copy_buffer@@Base+0x3b4>
   277d0:	cmp	r3, #46	; 0x2e
   277d4:	movne	r3, #1
   277d8:	strne	r3, [r0, #12]
   277dc:	beq	27914 <flatcc_emitter_copy_buffer@@Base+0x244>
   277e0:	mov	fp, #0
   277e4:	add	sl, sp, #20
   277e8:	add	r9, sp, #24
   277ec:	mov	r4, r7
   277f0:	b	27808 <flatcc_emitter_copy_buffer@@Base+0x138>
   277f4:	cmp	r6, r0
   277f8:	bne	27838 <flatcc_emitter_copy_buffer@@Base+0x168>
   277fc:	ldr	r3, [r4, #4]!
   27800:	cmp	r3, #0
   27804:	beq	2788c <flatcc_emitter_copy_buffer@@Base+0x1bc>
   27808:	stm	sp, {r9, sl}
   2780c:	add	r3, sp, #16
   27810:	mov	r2, r5
   27814:	mov	r1, r6
   27818:	mov	r0, r8
   2781c:	ldr	ip, [r4]
   27820:	blx	ip
   27824:	cmp	r5, r0
   27828:	bne	277f4 <flatcc_emitter_copy_buffer@@Base+0x124>
   2782c:	mov	r0, r5
   27830:	add	sp, sp, #36	; 0x24
   27834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27838:	cmp	fp, #0
   2783c:	beq	2784c <flatcc_emitter_copy_buffer@@Base+0x17c>
   27840:	ldr	r3, [r8, #12]
   27844:	cmp	r3, #0
   27848:	bne	27adc <flatcc_emitter_copy_buffer@@Base+0x40c>
   2784c:	ldr	r3, [sp, #16]
   27850:	cmp	r3, #0
   27854:	beq	278b8 <flatcc_emitter_copy_buffer@@Base+0x1e8>
   27858:	ldr	r3, [r8, #24]
   2785c:	cmp	r3, #0
   27860:	bne	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27864:	ldr	r3, [r8, #4]
   27868:	mov	r2, #8
   2786c:	sub	r3, r0, r3
   27870:	add	r3, r3, #1
   27874:	str	r0, [r8, #36]	; 0x24
   27878:	str	r3, [r8, #20]
   2787c:	mov	r0, r5
   27880:	str	r2, [r8, #24]
   27884:	add	sp, sp, #36	; 0x24
   27888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2788c:	ldr	r3, [r8, #24]
   27890:	cmp	r3, #0
   27894:	bne	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27898:	ldr	r3, [r8, #4]
   2789c:	mov	r2, #23
   278a0:	sub	r3, r6, r3
   278a4:	add	r3, r3, #1
   278a8:	str	r6, [r8, #36]	; 0x24
   278ac:	str	r3, [r8, #20]
   278b0:	str	r2, [r8, #24]
   278b4:	b	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   278b8:	ldrd	r2, [sp, #24]
   278bc:	cmp	r3, #0
   278c0:	cmpeq	r2, #255	; 0xff
   278c4:	strd	r2, [sp, #8]
   278c8:	bhi	278fc <flatcc_emitter_copy_buffer@@Base+0x22c>
   278cc:	ldr	r3, [sp, #72]	; 0x48
   278d0:	ldr	r2, [sp, #8]
   278d4:	ldr	r1, [sp, #20]
   278d8:	ldrb	r3, [r3]
   278dc:	cmp	r1, #0
   278e0:	add	fp, fp, #1
   278e4:	add	r3, r3, r2
   278e8:	ldr	r2, [sp, #72]	; 0x48
   278ec:	strb	r3, [r2]
   278f0:	beq	27ad4 <flatcc_emitter_copy_buffer@@Base+0x404>
   278f4:	mov	r6, r0
   278f8:	b	277ec <flatcc_emitter_copy_buffer@@Base+0x11c>
   278fc:	ldr	r3, [r8, #24]
   27900:	cmp	r3, #0
   27904:	bne	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27908:	ldr	r3, [r8, #4]
   2790c:	mov	r2, #7
   27910:	b	2786c <flatcc_emitter_copy_buffer@@Base+0x19c>
   27914:	ldr	r3, [r0, #24]
   27918:	cmp	r3, #0
   2791c:	bne	2793c <flatcc_emitter_copy_buffer@@Base+0x26c>
   27920:	ldr	r3, [r0, #4]
   27924:	mov	r2, #5
   27928:	sub	r3, r1, r3
   2792c:	add	r3, r3, #1
   27930:	str	r1, [r8, #36]	; 0x24
   27934:	str	r3, [r0, #20]
   27938:	str	r2, [r0, #24]
   2793c:	ldr	r3, [r8, #12]
   27940:	cmp	r3, #0
   27944:	moveq	r1, r5
   27948:	bne	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   2794c:	mov	r0, #0
   27950:	cmp	r5, r1
   27954:	beq	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27958:	ldrb	r2, [r1]
   2795c:	cmp	r2, #32
   27960:	bne	27988 <flatcc_emitter_copy_buffer@@Base+0x2b8>
   27964:	add	r3, r1, #1
   27968:	b	27978 <flatcc_emitter_copy_buffer@@Base+0x2a8>
   2796c:	ldrb	r2, [r3], #1
   27970:	cmp	r2, #32
   27974:	bne	27988 <flatcc_emitter_copy_buffer@@Base+0x2b8>
   27978:	cmp	r5, r3
   2797c:	mov	r1, r3
   27980:	bne	2796c <flatcc_emitter_copy_buffer@@Base+0x29c>
   27984:	b	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27988:	cmp	r2, #32
   2798c:	bhi	27a48 <flatcc_emitter_copy_buffer@@Base+0x378>
   27990:	sub	r2, r2, #9
   27994:	cmp	r2, #23
   27998:	ldrls	pc, [pc, r2, lsl #2]
   2799c:	b	27a58 <flatcc_emitter_copy_buffer@@Base+0x388>
   279a0:	andeq	r7, r2, r0, asr sl
   279a4:	andeq	r7, r2, r0, lsr #20
   279a8:	andeq	r7, r2, r8, asr sl
   279ac:	andeq	r7, r2, r8, asr sl
   279b0:	andeq	r7, r2, r0, lsl #20
   279b4:	andeq	r7, r2, r8, asr sl
   279b8:	andeq	r7, r2, r8, asr sl
   279bc:	andeq	r7, r2, r8, asr sl
   279c0:	andeq	r7, r2, r8, asr sl
   279c4:	andeq	r7, r2, r8, asr sl
   279c8:	andeq	r7, r2, r8, asr sl
   279cc:	andeq	r7, r2, r8, asr sl
   279d0:	andeq	r7, r2, r8, asr sl
   279d4:	andeq	r7, r2, r8, asr sl
   279d8:	andeq	r7, r2, r8, asr sl
   279dc:	andeq	r7, r2, r8, asr sl
   279e0:	andeq	r7, r2, r8, asr sl
   279e4:	andeq	r7, r2, r8, asr sl
   279e8:	andeq	r7, r2, r8, asr sl
   279ec:	andeq	r7, r2, r8, asr sl
   279f0:	andeq	r7, r2, r8, asr sl
   279f4:	andeq	r7, r2, r8, asr sl
   279f8:	andeq	r7, r2, r8, asr sl
   279fc:	andeq	r7, r2, r0, asr r9
   27a00:	sub	r3, r5, r1
   27a04:	cmp	r3, #1
   27a08:	movle	r3, r0
   27a0c:	ldrbgt	r3, [r1, #1]
   27a10:	subgt	r3, r3, #10
   27a14:	clzgt	r3, r3
   27a18:	lsrgt	r3, r3, #5
   27a1c:	add	r1, r1, r3
   27a20:	ldr	r3, [r8, #16]
   27a24:	add	r1, r1, #1
   27a28:	add	r3, r3, #1
   27a2c:	str	r1, [r8, #4]
   27a30:	str	r3, [r8, #16]
   27a34:	cmp	r5, r1
   27a38:	beq	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27a3c:	ldrb	r2, [r1]
   27a40:	cmp	r2, #32
   27a44:	bls	27990 <flatcc_emitter_copy_buffer@@Base+0x2c0>
   27a48:	mov	r6, r1
   27a4c:	b	277e0 <flatcc_emitter_copy_buffer@@Base+0x110>
   27a50:	add	r1, r1, #1
   27a54:	b	27a34 <flatcc_emitter_copy_buffer@@Base+0x364>
   27a58:	ldr	r3, [r8, #24]
   27a5c:	cmp	r3, #0
   27a60:	bne	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27a64:	ldr	r3, [r8, #4]
   27a68:	mov	r2, #5
   27a6c:	sub	r3, r1, r3
   27a70:	add	r3, r3, #1
   27a74:	str	r1, [r8, #36]	; 0x24
   27a78:	str	r3, [r8, #20]
   27a7c:	str	r2, [r8, #24]
   27a80:	b	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27a84:	add	r1, r1, #1
   27a88:	sub	r3, r5, r1
   27a8c:	cmp	r3, #1
   27a90:	str	r2, [r0, #12]
   27a94:	ble	2794c <flatcc_emitter_copy_buffer@@Base+0x27c>
   27a98:	ldrb	r3, [r6, #1]
   27a9c:	cmp	r3, #32
   27aa0:	bhi	27ac4 <flatcc_emitter_copy_buffer@@Base+0x3f4>
   27aa4:	bne	2794c <flatcc_emitter_copy_buffer@@Base+0x27c>
   27aa8:	ldrb	r3, [r6, #2]
   27aac:	cmp	r3, #32
   27ab0:	addhi	r6, r6, #2
   27ab4:	bls	2794c <flatcc_emitter_copy_buffer@@Base+0x27c>
   27ab8:	cmp	r5, r6
   27abc:	bne	277e0 <flatcc_emitter_copy_buffer@@Base+0x110>
   27ac0:	b	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27ac4:	mov	r6, r1
   27ac8:	cmp	r5, r6
   27acc:	bne	277e0 <flatcc_emitter_copy_buffer@@Base+0x110>
   27ad0:	b	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27ad4:	mov	r5, r0
   27ad8:	b	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27adc:	ldr	r3, [r8, #24]
   27ae0:	cmp	r3, #0
   27ae4:	bne	2782c <flatcc_emitter_copy_buffer@@Base+0x15c>
   27ae8:	ldr	r3, [r8, #4]
   27aec:	mov	r2, #14
   27af0:	b	2786c <flatcc_emitter_copy_buffer@@Base+0x19c>
   27af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27af8:	sub	sp, sp, #28
   27afc:	mov	r9, r3
   27b00:	ldrh	r3, [sp, #68]	; 0x44
   27b04:	mov	ip, #0
   27b08:	mov	r6, r0
   27b0c:	ldr	r0, [r0]
   27b10:	mov	r4, r1
   27b14:	mov	r5, r2
   27b18:	str	ip, [sp, #20]
   27b1c:	str	r3, [sp, #12]
   27b20:	bl	23e90 <flatcc_builder_start_offset_vector@@Base>
   27b24:	cmp	r0, #0
   27b28:	beq	27b6c <flatcc_emitter_copy_buffer@@Base+0x49c>
   27b2c:	ldr	r3, [r6, #24]
   27b30:	cmp	r3, #0
   27b34:	beq	27b44 <flatcc_emitter_copy_buffer@@Base+0x474>
   27b38:	mov	r0, r5
   27b3c:	add	sp, sp, #28
   27b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b44:	ldr	r3, [r6, #4]
   27b48:	mov	r2, #33	; 0x21
   27b4c:	sub	r3, r4, r3
   27b50:	add	r3, r3, #1
   27b54:	mov	r0, r5
   27b58:	str	r4, [r6, #36]	; 0x24
   27b5c:	str	r3, [r6, #20]
   27b60:	str	r2, [r6, #24]
   27b64:	add	sp, sp, #28
   27b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b6c:	cmp	r4, r5
   27b70:	beq	27b80 <flatcc_emitter_copy_buffer@@Base+0x4b0>
   27b74:	ldrb	r3, [r4]
   27b78:	cmp	r3, #91	; 0x5b
   27b7c:	beq	27c08 <flatcc_emitter_copy_buffer@@Base+0x538>
   27b80:	ldr	r7, [r6, #24]
   27b84:	cmp	r7, #0
   27b88:	beq	27be8 <flatcc_emitter_copy_buffer@@Base+0x518>
   27b8c:	mov	r7, #0
   27b90:	ldr	r3, [sp, #64]	; 0x40
   27b94:	cmp	r3, r7
   27b98:	moveq	r4, r5
   27b9c:	bne	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   27ba0:	mov	r1, r9
   27ba4:	ldr	r0, [r6]
   27ba8:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   27bac:	mov	r1, r0
   27bb0:	ldr	r0, [r6]
   27bb4:	bl	2551c <flatcc_builder_end_offset_vector_for_unions@@Base>
   27bb8:	cmp	r0, #0
   27bbc:	str	r0, [sp, #20]
   27bc0:	beq	27b2c <flatcc_emitter_copy_buffer@@Base+0x45c>
   27bc4:	ldr	r1, [sp, #12]
   27bc8:	ldr	r0, [r6]
   27bcc:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   27bd0:	cmp	r0, #0
   27bd4:	beq	27b2c <flatcc_emitter_copy_buffer@@Base+0x45c>
   27bd8:	ldr	r3, [sp, #20]
   27bdc:	mov	r5, r4
   27be0:	str	r3, [r0]
   27be4:	b	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   27be8:	ldr	r3, [r6, #4]
   27bec:	mov	r2, #22
   27bf0:	sub	r3, r4, r3
   27bf4:	add	r3, r3, #1
   27bf8:	str	r4, [r6, #36]	; 0x24
   27bfc:	str	r3, [r6, #20]
   27c00:	str	r2, [r6, #24]
   27c04:	b	27b90 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   27c08:	add	r8, r4, #1
   27c0c:	sub	r3, r5, r8
   27c10:	cmp	r3, #1
   27c14:	ble	27c28 <flatcc_emitter_copy_buffer@@Base+0x558>
   27c18:	ldrb	r1, [r4, #1]
   27c1c:	cmp	r1, #32
   27c20:	bhi	28488 <flatcc_emitter_copy_buffer@@Base+0xdb8>
   27c24:	beq	28478 <flatcc_emitter_copy_buffer@@Base+0xda8>
   27c28:	mov	r0, #0
   27c2c:	cmp	r5, r8
   27c30:	beq	284dc <flatcc_emitter_copy_buffer@@Base+0xe0c>
   27c34:	ldrb	r1, [r8]
   27c38:	cmp	r1, #32
   27c3c:	bne	28328 <flatcc_emitter_copy_buffer@@Base+0xc58>
   27c40:	add	r3, r8, #1
   27c44:	b	27c54 <flatcc_emitter_copy_buffer@@Base+0x584>
   27c48:	ldrb	r1, [r3], #1
   27c4c:	cmp	r1, #32
   27c50:	bne	28328 <flatcc_emitter_copy_buffer@@Base+0xc58>
   27c54:	cmp	r3, r5
   27c58:	mov	r8, r3
   27c5c:	bne	27c48 <flatcc_emitter_copy_buffer@@Base+0x578>
   27c60:	ldr	r3, [sp, #64]	; 0x40
   27c64:	cmp	r3, #0
   27c68:	beq	2807c <flatcc_emitter_copy_buffer@@Base+0x9ac>
   27c6c:	mov	r7, #0
   27c70:	add	sl, sp, #20
   27c74:	mov	fp, #1
   27c78:	mov	r1, r9
   27c7c:	ldr	r0, [r6]
   27c80:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   27c84:	mov	r1, r8
   27c88:	mov	r2, r5
   27c8c:	ldr	ip, [sp, #72]	; 0x48
   27c90:	ldrb	r3, [r0, r7]
   27c94:	str	sl, [sp]
   27c98:	mov	r0, r6
   27c9c:	blx	ip
   27ca0:	cmp	r5, r0
   27ca4:	mov	r4, r0
   27ca8:	beq	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   27cac:	mov	r1, fp
   27cb0:	ldr	r0, [r6]
   27cb4:	bl	234f4 <flatcc_builder_extend_offset_vector@@Base>
   27cb8:	cmp	r0, #0
   27cbc:	beq	27b2c <flatcc_emitter_copy_buffer@@Base+0x45c>
   27cc0:	sub	r2, r5, r4
   27cc4:	ldr	r3, [sp, #20]
   27cc8:	cmp	r2, #1
   27ccc:	str	r3, [r0]
   27cd0:	ldrb	r2, [r4]
   27cd4:	ble	27e4c <flatcc_emitter_copy_buffer@@Base+0x77c>
   27cd8:	cmp	r2, #32
   27cdc:	bhi	27da4 <flatcc_emitter_copy_buffer@@Base+0x6d4>
   27ce0:	beq	27e7c <flatcc_emitter_copy_buffer@@Base+0x7ac>
   27ce4:	cmp	r2, #32
   27ce8:	bhi	27da4 <flatcc_emitter_copy_buffer@@Base+0x6d4>
   27cec:	sub	r2, r2, #9
   27cf0:	cmp	r2, #23
   27cf4:	ldrls	pc, [pc, r2, lsl #2]
   27cf8:	b	27e38 <flatcc_emitter_copy_buffer@@Base+0x768>
   27cfc:	andeq	r7, r2, r8, asr #27
   27d00:	andeq	r7, r2, ip, ror sp
   27d04:	andeq	r7, r2, r8, lsr lr
   27d08:	andeq	r7, r2, r8, lsr lr
   27d0c:	andeq	r7, r2, ip, asr sp
   27d10:	andeq	r7, r2, r8, lsr lr
   27d14:	andeq	r7, r2, r8, lsr lr
   27d18:	andeq	r7, r2, r8, lsr lr
   27d1c:	andeq	r7, r2, r8, lsr lr
   27d20:	andeq	r7, r2, r8, lsr lr
   27d24:	andeq	r7, r2, r8, lsr lr
   27d28:	andeq	r7, r2, r8, lsr lr
   27d2c:	andeq	r7, r2, r8, lsr lr
   27d30:	andeq	r7, r2, r8, lsr lr
   27d34:	andeq	r7, r2, r8, lsr lr
   27d38:	andeq	r7, r2, r8, lsr lr
   27d3c:	andeq	r7, r2, r8, lsr lr
   27d40:	andeq	r7, r2, r8, lsr lr
   27d44:	andeq	r7, r2, r8, lsr lr
   27d48:	andeq	r7, r2, r8, lsr lr
   27d4c:	andeq	r7, r2, r8, lsr lr
   27d50:	andeq	r7, r2, r8, lsr lr
   27d54:	andeq	r7, r2, r8, lsr lr
   27d58:	ldrdeq	r7, [r2], -r0
   27d5c:	sub	r3, r5, r4
   27d60:	cmp	r3, #1
   27d64:	movle	r3, #0
   27d68:	ldrbgt	r3, [r4, #1]
   27d6c:	subgt	r3, r3, #10
   27d70:	clzgt	r3, r3
   27d74:	lsrgt	r3, r3, #5
   27d78:	add	r4, r4, r3
   27d7c:	ldr	r3, [r6, #16]
   27d80:	add	r4, r4, #1
   27d84:	add	r3, r3, #1
   27d88:	str	r4, [r6, #4]
   27d8c:	str	r3, [r6, #16]
   27d90:	cmp	r5, r4
   27d94:	beq	27e44 <flatcc_emitter_copy_buffer@@Base+0x774>
   27d98:	ldrb	r2, [r4]
   27d9c:	cmp	r2, #32
   27da0:	bls	27cec <flatcc_emitter_copy_buffer@@Base+0x61c>
   27da4:	cmp	r2, #44	; 0x2c
   27da8:	beq	27e9c <flatcc_emitter_copy_buffer@@Base+0x7cc>
   27dac:	cmp	r2, #93	; 0x5d
   27db0:	beq	27f44 <flatcc_emitter_copy_buffer@@Base+0x874>
   27db4:	ldr	r3, [r6, #24]
   27db8:	cmp	r3, #0
   27dbc:	beq	27e58 <flatcc_emitter_copy_buffer@@Base+0x788>
   27dc0:	add	r7, r7, #1
   27dc4:	b	27b90 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   27dc8:	add	r4, r4, #1
   27dcc:	b	27d90 <flatcc_emitter_copy_buffer@@Base+0x6c0>
   27dd0:	cmp	r5, r4
   27dd4:	beq	27e44 <flatcc_emitter_copy_buffer@@Base+0x774>
   27dd8:	add	r3, r4, #1
   27ddc:	b	27dec <flatcc_emitter_copy_buffer@@Base+0x71c>
   27de0:	ldrb	r2, [r3], #1
   27de4:	cmp	r2, #32
   27de8:	bne	27ce4 <flatcc_emitter_copy_buffer@@Base+0x614>
   27dec:	cmp	r5, r3
   27df0:	mov	r4, r3
   27df4:	bne	27de0 <flatcc_emitter_copy_buffer@@Base+0x710>
   27df8:	add	r7, r7, #1
   27dfc:	mov	r1, r4
   27e00:	ldr	r3, [sp, #64]	; 0x40
   27e04:	cmp	r3, r7
   27e08:	beq	284d4 <flatcc_emitter_copy_buffer@@Base+0xe04>
   27e0c:	ldr	r3, [r6, #24]
   27e10:	cmp	r3, #0
   27e14:	bne	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   27e18:	ldr	r3, [r6, #4]
   27e1c:	mov	r2, #30
   27e20:	sub	r3, r1, r3
   27e24:	add	r3, r3, #1
   27e28:	str	r1, [r6, #36]	; 0x24
   27e2c:	str	r3, [r6, #20]
   27e30:	str	r2, [r6, #24]
   27e34:	b	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   27e38:	ldr	r3, [r6, #24]
   27e3c:	cmp	r3, #0
   27e40:	beq	27f20 <flatcc_emitter_copy_buffer@@Base+0x850>
   27e44:	mov	r4, r5
   27e48:	b	27df8 <flatcc_emitter_copy_buffer@@Base+0x728>
   27e4c:	cmp	r2, #32
   27e50:	beq	27dd8 <flatcc_emitter_copy_buffer@@Base+0x708>
   27e54:	b	27ce4 <flatcc_emitter_copy_buffer@@Base+0x614>
   27e58:	ldr	r3, [r6, #4]
   27e5c:	str	r4, [r6, #36]	; 0x24
   27e60:	sub	r4, r4, r3
   27e64:	add	r4, r4, #1
   27e68:	mov	r3, #9
   27e6c:	add	r7, r7, #1
   27e70:	str	r4, [r6, #20]
   27e74:	str	r3, [r6, #24]
   27e78:	b	27b90 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   27e7c:	ldrb	r2, [r4, #1]
   27e80:	cmp	r2, #32
   27e84:	bls	27dd8 <flatcc_emitter_copy_buffer@@Base+0x708>
   27e88:	add	r4, r4, #1
   27e8c:	cmp	r5, r4
   27e90:	beq	27e44 <flatcc_emitter_copy_buffer@@Base+0x774>
   27e94:	cmp	r2, #44	; 0x2c
   27e98:	bne	27dac <flatcc_emitter_copy_buffer@@Base+0x6dc>
   27e9c:	add	r8, r4, #1
   27ea0:	sub	r3, r5, r8
   27ea4:	cmp	r3, #1
   27ea8:	ble	27ebc <flatcc_emitter_copy_buffer@@Base+0x7ec>
   27eac:	ldrb	r1, [r4, #1]
   27eb0:	cmp	r1, #32
   27eb4:	bhi	280ec <flatcc_emitter_copy_buffer@@Base+0xa1c>
   27eb8:	beq	280dc <flatcc_emitter_copy_buffer@@Base+0xa0c>
   27ebc:	cmp	r5, r8
   27ec0:	beq	280f4 <flatcc_emitter_copy_buffer@@Base+0xa24>
   27ec4:	ldrb	r1, [r8]
   27ec8:	cmp	r1, #32
   27ecc:	bne	27fa4 <flatcc_emitter_copy_buffer@@Base+0x8d4>
   27ed0:	add	r3, r8, #1
   27ed4:	b	27ee4 <flatcc_emitter_copy_buffer@@Base+0x814>
   27ed8:	ldrb	r1, [r3], #1
   27edc:	cmp	r1, #32
   27ee0:	bne	27fa4 <flatcc_emitter_copy_buffer@@Base+0x8d4>
   27ee4:	cmp	r3, r5
   27ee8:	mov	r8, r3
   27eec:	bne	27ed8 <flatcc_emitter_copy_buffer@@Base+0x808>
   27ef0:	ldr	r3, [r6, #24]
   27ef4:	cmp	r3, #0
   27ef8:	bne	27dc0 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   27efc:	ldr	r3, [r6, #4]
   27f00:	mov	r2, #9
   27f04:	sub	r3, r8, r3
   27f08:	add	r3, r3, #1
   27f0c:	str	r8, [r6, #36]	; 0x24
   27f10:	add	r7, r7, #1
   27f14:	str	r3, [r6, #20]
   27f18:	str	r2, [r6, #24]
   27f1c:	b	27b90 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   27f20:	ldr	r3, [r6, #4]
   27f24:	mov	r2, #5
   27f28:	sub	r3, r4, r3
   27f2c:	add	r3, r3, #1
   27f30:	str	r4, [r6, #36]	; 0x24
   27f34:	str	r3, [r6, #20]
   27f38:	str	r2, [r6, #24]
   27f3c:	mov	r4, r5
   27f40:	b	27df8 <flatcc_emitter_copy_buffer@@Base+0x728>
   27f44:	add	r1, r4, #1
   27f48:	sub	r3, r5, r1
   27f4c:	cmp	r3, #1
   27f50:	ble	27f64 <flatcc_emitter_copy_buffer@@Base+0x894>
   27f54:	ldrb	r3, [r4, #1]
   27f58:	cmp	r3, #32
   27f5c:	bhi	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   27f60:	beq	281f8 <flatcc_emitter_copy_buffer@@Base+0xb28>
   27f64:	mov	r0, #0
   27f68:	cmp	r5, r1
   27f6c:	beq	28494 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   27f70:	ldrb	r2, [r1]
   27f74:	cmp	r2, #32
   27f78:	bne	280fc <flatcc_emitter_copy_buffer@@Base+0xa2c>
   27f7c:	add	r3, r1, #1
   27f80:	b	27f90 <flatcc_emitter_copy_buffer@@Base+0x8c0>
   27f84:	ldrb	r2, [r3], #1
   27f88:	cmp	r2, #32
   27f8c:	bne	280fc <flatcc_emitter_copy_buffer@@Base+0xa2c>
   27f90:	cmp	r3, r5
   27f94:	mov	r1, r3
   27f98:	bne	27f84 <flatcc_emitter_copy_buffer@@Base+0x8b4>
   27f9c:	add	r7, r7, #1
   27fa0:	b	27e00 <flatcc_emitter_copy_buffer@@Base+0x730>
   27fa4:	cmp	r1, #32
   27fa8:	bhi	28064 <flatcc_emitter_copy_buffer@@Base+0x994>
   27fac:	sub	r1, r1, #9
   27fb0:	cmp	r1, #23
   27fb4:	ldrls	pc, [pc, r1, lsl #2]
   27fb8:	b	280b0 <flatcc_emitter_copy_buffer@@Base+0x9e0>
   27fbc:	andeq	r8, r2, r8, lsr #1
   27fc0:	andeq	r8, r2, ip, lsr r0
   27fc4:	strheq	r8, [r2], -r0
   27fc8:	strheq	r8, [r2], -r0
   27fcc:	andeq	r8, r2, ip, lsl r0
   27fd0:	strheq	r8, [r2], -r0
   27fd4:	strheq	r8, [r2], -r0
   27fd8:	strheq	r8, [r2], -r0
   27fdc:	strheq	r8, [r2], -r0
   27fe0:	strheq	r8, [r2], -r0
   27fe4:	strheq	r8, [r2], -r0
   27fe8:	strheq	r8, [r2], -r0
   27fec:	strheq	r8, [r2], -r0
   27ff0:	strheq	r8, [r2], -r0
   27ff4:	strheq	r8, [r2], -r0
   27ff8:	strheq	r8, [r2], -r0
   27ffc:	strheq	r8, [r2], -r0
   28000:	strheq	r8, [r2], -r0
   28004:	strheq	r8, [r2], -r0
   28008:	strheq	r8, [r2], -r0
   2800c:	strheq	r8, [r2], -r0
   28010:	strheq	r8, [r2], -r0
   28014:	strheq	r8, [r2], -r0
   28018:			; <UNDEFINED> instruction: 0x00027ebc
   2801c:	sub	r3, r5, r8
   28020:	cmp	r3, #1
   28024:	movle	r3, #0
   28028:	ldrbgt	r3, [r8, #1]
   2802c:	subgt	r3, r3, #10
   28030:	clzgt	r3, r3
   28034:	lsrgt	r3, r3, #5
   28038:	add	r8, r8, r3
   2803c:	ldr	r3, [r6, #16]
   28040:	add	r8, r8, #1
   28044:	add	r3, r3, #1
   28048:	str	r8, [r6, #4]
   2804c:	str	r3, [r6, #16]
   28050:	cmp	r5, r8
   28054:	beq	280f4 <flatcc_emitter_copy_buffer@@Base+0xa24>
   28058:	ldrb	r1, [r8]
   2805c:	cmp	r1, #32
   28060:	bls	27fac <flatcc_emitter_copy_buffer@@Base+0x8dc>
   28064:	cmp	r1, #93	; 0x5d
   28068:	beq	2820c <flatcc_emitter_copy_buffer@@Base+0xb3c>
   2806c:	ldr	r3, [sp, #64]	; 0x40
   28070:	add	r7, r7, #1
   28074:	cmp	r3, r7
   28078:	bne	27c78 <flatcc_emitter_copy_buffer@@Base+0x5a8>
   2807c:	ldr	r3, [r6, #24]
   28080:	cmp	r3, #0
   28084:	bne	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   28088:	ldr	r3, [r6, #4]
   2808c:	mov	r1, #30
   28090:	sub	r3, r8, r3
   28094:	add	r3, r3, #1
   28098:	str	r8, [r6, #36]	; 0x24
   2809c:	str	r3, [r6, #20]
   280a0:	str	r1, [r6, #24]
   280a4:	b	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   280a8:	add	r8, r8, #1
   280ac:	b	28050 <flatcc_emitter_copy_buffer@@Base+0x980>
   280b0:	ldr	r3, [r6, #24]
   280b4:	cmp	r3, #0
   280b8:	bne	27dc0 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   280bc:	ldr	r3, [r6, #4]
   280c0:	mov	r2, #5
   280c4:	sub	r3, r8, r3
   280c8:	add	r3, r3, #1
   280cc:	str	r8, [r6, #36]	; 0x24
   280d0:	str	r3, [r6, #20]
   280d4:	str	r2, [r6, #24]
   280d8:	b	27dc0 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   280dc:	ldrb	r1, [r4, #2]
   280e0:	cmp	r1, #32
   280e4:	addhi	r8, r4, #2
   280e8:	bls	27ebc <flatcc_emitter_copy_buffer@@Base+0x7ec>
   280ec:	cmp	r5, r8
   280f0:	bne	28064 <flatcc_emitter_copy_buffer@@Base+0x994>
   280f4:	mov	r8, r5
   280f8:	b	27ef0 <flatcc_emitter_copy_buffer@@Base+0x820>
   280fc:	cmp	r2, #32
   28100:	bhi	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   28104:	sub	r2, r2, #9
   28108:	cmp	r2, #23
   2810c:	ldrls	pc, [pc, r2, lsl #2]
   28110:	b	281c8 <flatcc_emitter_copy_buffer@@Base+0xaf8>
   28114:	andeq	r8, r2, r0, asr #3
   28118:	muleq	r2, r4, r1
   2811c:	andeq	r8, r2, r8, asr #3
   28120:	andeq	r8, r2, r8, asr #3
   28124:	andeq	r8, r2, r4, ror r1
   28128:	andeq	r8, r2, r8, asr #3
   2812c:	andeq	r8, r2, r8, asr #3
   28130:	andeq	r8, r2, r8, asr #3
   28134:	andeq	r8, r2, r8, asr #3
   28138:	andeq	r8, r2, r8, asr #3
   2813c:	andeq	r8, r2, r8, asr #3
   28140:	andeq	r8, r2, r8, asr #3
   28144:	andeq	r8, r2, r8, asr #3
   28148:	andeq	r8, r2, r8, asr #3
   2814c:	andeq	r8, r2, r8, asr #3
   28150:	andeq	r8, r2, r8, asr #3
   28154:	andeq	r8, r2, r8, asr #3
   28158:	andeq	r8, r2, r8, asr #3
   2815c:	andeq	r8, r2, r8, asr #3
   28160:	andeq	r8, r2, r8, asr #3
   28164:	andeq	r8, r2, r8, asr #3
   28168:	andeq	r8, r2, r8, asr #3
   2816c:	andeq	r8, r2, r8, asr #3
   28170:	andeq	r7, r2, r8, ror #30
   28174:	sub	r3, r5, r1
   28178:	cmp	r3, #1
   2817c:	movle	r3, r0
   28180:	ldrbgt	r3, [r1, #1]
   28184:	subgt	r3, r3, #10
   28188:	clzgt	r3, r3
   2818c:	lsrgt	r3, r3, #5
   28190:	add	r1, r1, r3
   28194:	ldr	r3, [r6, #16]
   28198:	add	r1, r1, #1
   2819c:	add	r3, r3, #1
   281a0:	str	r1, [r6, #4]
   281a4:	str	r3, [r6, #16]
   281a8:	cmp	r5, r1
   281ac:	beq	28494 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   281b0:	ldrb	r2, [r1]
   281b4:	cmp	r2, #32
   281b8:	bls	28104 <flatcc_emitter_copy_buffer@@Base+0xa34>
   281bc:	b	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   281c0:	add	r1, r1, #1
   281c4:	b	281a8 <flatcc_emitter_copy_buffer@@Base+0xad8>
   281c8:	ldr	r3, [r6, #24]
   281cc:	cmp	r3, #0
   281d0:	bne	27dc0 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   281d4:	ldr	r3, [r6, #4]
   281d8:	mov	r2, #5
   281dc:	sub	r3, r1, r3
   281e0:	add	r3, r3, #1
   281e4:	str	r1, [r6, #36]	; 0x24
   281e8:	add	r7, r7, #1
   281ec:	str	r3, [r6, #20]
   281f0:	str	r2, [r6, #24]
   281f4:	b	27b90 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   281f8:	ldrb	r3, [r4, #2]
   281fc:	cmp	r3, #32
   28200:	bls	27f64 <flatcc_emitter_copy_buffer@@Base+0x894>
   28204:	add	r1, r4, #2
   28208:	b	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   2820c:	add	r1, r8, #1
   28210:	sub	r3, r5, r1
   28214:	cmp	r3, #1
   28218:	ble	2822c <flatcc_emitter_copy_buffer@@Base+0xb5c>
   2821c:	ldrb	r3, [r8, #1]
   28220:	cmp	r3, #32
   28224:	bhi	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   28228:	beq	2849c <flatcc_emitter_copy_buffer@@Base+0xdcc>
   2822c:	mov	r0, #0
   28230:	cmp	r5, r1
   28234:	beq	28494 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   28238:	ldrb	r2, [r1]
   2823c:	cmp	r2, #32
   28240:	bne	282a8 <flatcc_emitter_copy_buffer@@Base+0xbd8>
   28244:	add	r3, r1, #1
   28248:	b	28258 <flatcc_emitter_copy_buffer@@Base+0xb88>
   2824c:	ldrb	r2, [r3], #1
   28250:	cmp	r2, #32
   28254:	bne	282a8 <flatcc_emitter_copy_buffer@@Base+0xbd8>
   28258:	cmp	r5, r3
   2825c:	mov	r1, r3
   28260:	bne	2824c <flatcc_emitter_copy_buffer@@Base+0xb7c>
   28264:	b	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   28268:	sub	r3, r5, r1
   2826c:	cmp	r3, #1
   28270:	movle	r3, r0
   28274:	ldrbgt	r3, [r1, #1]
   28278:	subgt	r3, r3, #10
   2827c:	clzgt	r3, r3
   28280:	lsrgt	r3, r3, #5
   28284:	add	r1, r1, r3
   28288:	ldr	r3, [r6, #16]
   2828c:	add	r1, r1, #1
   28290:	add	r3, r3, #1
   28294:	str	r1, [r6, #4]
   28298:	str	r3, [r6, #16]
   2829c:	cmp	r5, r1
   282a0:	beq	28494 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   282a4:	ldrb	r2, [r1]
   282a8:	cmp	r2, #32
   282ac:	bhi	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   282b0:	sub	r2, r2, #9
   282b4:	cmp	r2, #23
   282b8:	ldrls	pc, [pc, r2, lsl #2]
   282bc:	b	281c8 <flatcc_emitter_copy_buffer@@Base+0xaf8>
   282c0:	andeq	r8, r2, r0, lsr #6
   282c4:	andeq	r8, r2, r8, lsl #5
   282c8:	andeq	r8, r2, r8, asr #3
   282cc:	andeq	r8, r2, r8, asr #3
   282d0:	andeq	r8, r2, r8, ror #4
   282d4:	andeq	r8, r2, r8, asr #3
   282d8:	andeq	r8, r2, r8, asr #3
   282dc:	andeq	r8, r2, r8, asr #3
   282e0:	andeq	r8, r2, r8, asr #3
   282e4:	andeq	r8, r2, r8, asr #3
   282e8:	andeq	r8, r2, r8, asr #3
   282ec:	andeq	r8, r2, r8, asr #3
   282f0:	andeq	r8, r2, r8, asr #3
   282f4:	andeq	r8, r2, r8, asr #3
   282f8:	andeq	r8, r2, r8, asr #3
   282fc:	andeq	r8, r2, r8, asr #3
   28300:	andeq	r8, r2, r8, asr #3
   28304:	andeq	r8, r2, r8, asr #3
   28308:	andeq	r8, r2, r8, asr #3
   2830c:	andeq	r8, r2, r8, asr #3
   28310:	andeq	r8, r2, r8, asr #3
   28314:	andeq	r8, r2, r8, asr #3
   28318:	andeq	r8, r2, r8, asr #3
   2831c:	andeq	r8, r2, r0, lsr r2
   28320:	add	r1, r1, #1
   28324:	b	2829c <flatcc_emitter_copy_buffer@@Base+0xbcc>
   28328:	cmp	r1, #32
   2832c:	bhi	283e8 <flatcc_emitter_copy_buffer@@Base+0xd18>
   28330:	sub	r1, r1, #9
   28334:	cmp	r1, #23
   28338:	ldrls	pc, [pc, r1, lsl #2]
   2833c:	b	28458 <flatcc_emitter_copy_buffer@@Base+0xd88>
   28340:	andeq	r8, r2, r0, asr r4
   28344:	andeq	r8, r2, r0, asr #7
   28348:	andeq	r8, r2, r8, asr r4
   2834c:	andeq	r8, r2, r8, asr r4
   28350:	andeq	r8, r2, r0, lsr #7
   28354:	andeq	r8, r2, r8, asr r4
   28358:	andeq	r8, r2, r8, asr r4
   2835c:	andeq	r8, r2, r8, asr r4
   28360:	andeq	r8, r2, r8, asr r4
   28364:	andeq	r8, r2, r8, asr r4
   28368:	andeq	r8, r2, r8, asr r4
   2836c:	andeq	r8, r2, r8, asr r4
   28370:	andeq	r8, r2, r8, asr r4
   28374:	andeq	r8, r2, r8, asr r4
   28378:	andeq	r8, r2, r8, asr r4
   2837c:	andeq	r8, r2, r8, asr r4
   28380:	andeq	r8, r2, r8, asr r4
   28384:	andeq	r8, r2, r8, asr r4
   28388:	andeq	r8, r2, r8, asr r4
   2838c:	andeq	r8, r2, r8, asr r4
   28390:	andeq	r8, r2, r8, asr r4
   28394:	andeq	r8, r2, r8, asr r4
   28398:	andeq	r8, r2, r8, asr r4
   2839c:	andeq	r7, r2, ip, lsr #24
   283a0:	sub	r3, r5, r8
   283a4:	cmp	r3, #1
   283a8:	movle	r3, r0
   283ac:	ldrbgt	r3, [r8, #1]
   283b0:	subgt	r3, r3, #10
   283b4:	clzgt	r3, r3
   283b8:	lsrgt	r3, r3, #5
   283bc:	add	r8, r8, r3
   283c0:	ldr	r3, [r6, #16]
   283c4:	add	r8, r8, #1
   283c8:	add	r3, r3, #1
   283cc:	str	r8, [r6, #4]
   283d0:	str	r3, [r6, #16]
   283d4:	cmp	r5, r8
   283d8:	beq	284dc <flatcc_emitter_copy_buffer@@Base+0xe0c>
   283dc:	ldrb	r1, [r8]
   283e0:	cmp	r1, #32
   283e4:	bls	28330 <flatcc_emitter_copy_buffer@@Base+0xc60>
   283e8:	cmp	r1, #93	; 0x5d
   283ec:	bne	27c60 <flatcc_emitter_copy_buffer@@Base+0x590>
   283f0:	add	r1, r8, #1
   283f4:	sub	r3, r5, r1
   283f8:	cmp	r3, #1
   283fc:	ble	28410 <flatcc_emitter_copy_buffer@@Base+0xd40>
   28400:	ldrb	r3, [r8, #1]
   28404:	cmp	r3, #32
   28408:	bhi	28448 <flatcc_emitter_copy_buffer@@Base+0xd78>
   2840c:	beq	284e4 <flatcc_emitter_copy_buffer@@Base+0xe14>
   28410:	mov	r0, #0
   28414:	cmp	r5, r1
   28418:	beq	285f4 <flatcc_emitter_copy_buffer@@Base+0xf24>
   2841c:	ldrb	r3, [r1]
   28420:	cmp	r3, #32
   28424:	bne	284fc <flatcc_emitter_copy_buffer@@Base+0xe2c>
   28428:	add	r2, r1, #1
   2842c:	b	2843c <flatcc_emitter_copy_buffer@@Base+0xd6c>
   28430:	ldrb	r3, [r2], #1
   28434:	cmp	r3, #32
   28438:	bne	284fc <flatcc_emitter_copy_buffer@@Base+0xe2c>
   2843c:	cmp	r2, r5
   28440:	mov	r1, r2
   28444:	bne	28430 <flatcc_emitter_copy_buffer@@Base+0xd60>
   28448:	mov	r7, #0
   2844c:	b	27e00 <flatcc_emitter_copy_buffer@@Base+0x730>
   28450:	add	r8, r8, #1
   28454:	b	283d4 <flatcc_emitter_copy_buffer@@Base+0xd04>
   28458:	ldr	r3, [r6, #24]
   2845c:	cmp	r3, #0
   28460:	beq	284b4 <flatcc_emitter_copy_buffer@@Base+0xde4>
   28464:	ldr	r3, [sp, #64]	; 0x40
   28468:	cmp	r3, #0
   2846c:	beq	27b38 <flatcc_emitter_copy_buffer@@Base+0x468>
   28470:	mov	r8, r5
   28474:	b	27c6c <flatcc_emitter_copy_buffer@@Base+0x59c>
   28478:	ldrb	r1, [r4, #2]
   2847c:	cmp	r1, #32
   28480:	addhi	r8, r4, #2
   28484:	bls	27c28 <flatcc_emitter_copy_buffer@@Base+0x558>
   28488:	cmp	r5, r8
   2848c:	bne	283e8 <flatcc_emitter_copy_buffer@@Base+0xd18>
   28490:	b	27c60 <flatcc_emitter_copy_buffer@@Base+0x590>
   28494:	mov	r1, r5
   28498:	b	27f9c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   2849c:	ldrb	r3, [r8, #2]
   284a0:	cmp	r3, #32
   284a4:	addhi	r1, r8, #2
   284a8:	addhi	r7, r7, #1
   284ac:	bls	2822c <flatcc_emitter_copy_buffer@@Base+0xb5c>
   284b0:	b	27e00 <flatcc_emitter_copy_buffer@@Base+0x730>
   284b4:	ldr	r3, [r6, #4]
   284b8:	mov	r2, #5
   284bc:	sub	r3, r8, r3
   284c0:	add	r3, r3, #1
   284c4:	str	r8, [r6, #36]	; 0x24
   284c8:	str	r3, [r6, #20]
   284cc:	str	r2, [r6, #24]
   284d0:	b	28464 <flatcc_emitter_copy_buffer@@Base+0xd94>
   284d4:	mov	r4, r1
   284d8:	b	27ba0 <flatcc_emitter_copy_buffer@@Base+0x4d0>
   284dc:	mov	r8, r5
   284e0:	b	27c60 <flatcc_emitter_copy_buffer@@Base+0x590>
   284e4:	ldrb	r3, [r8, #2]
   284e8:	cmp	r3, #32
   284ec:	addhi	r1, r8, #2
   284f0:	movhi	r7, #0
   284f4:	bls	28410 <flatcc_emitter_copy_buffer@@Base+0xd40>
   284f8:	b	27e00 <flatcc_emitter_copy_buffer@@Base+0x730>
   284fc:	cmp	r3, #32
   28500:	bhi	28448 <flatcc_emitter_copy_buffer@@Base+0xd78>
   28504:	sub	r3, r3, #9
   28508:	cmp	r3, #23
   2850c:	ldrls	pc, [pc, r3, lsl #2]
   28510:	b	285c8 <flatcc_emitter_copy_buffer@@Base+0xef8>
   28514:	andeq	r8, r2, r0, asr #11
   28518:	muleq	r2, r4, r5
   2851c:	andeq	r8, r2, r8, asr #11
   28520:	andeq	r8, r2, r8, asr #11
   28524:	andeq	r8, r2, r4, ror r5
   28528:	andeq	r8, r2, r8, asr #11
   2852c:	andeq	r8, r2, r8, asr #11
   28530:	andeq	r8, r2, r8, asr #11
   28534:	andeq	r8, r2, r8, asr #11
   28538:	andeq	r8, r2, r8, asr #11
   2853c:	andeq	r8, r2, r8, asr #11
   28540:	andeq	r8, r2, r8, asr #11
   28544:	andeq	r8, r2, r8, asr #11
   28548:	andeq	r8, r2, r8, asr #11
   2854c:	andeq	r8, r2, r8, asr #11
   28550:	andeq	r8, r2, r8, asr #11
   28554:	andeq	r8, r2, r8, asr #11
   28558:	andeq	r8, r2, r8, asr #11
   2855c:	andeq	r8, r2, r8, asr #11
   28560:	andeq	r8, r2, r8, asr #11
   28564:	andeq	r8, r2, r8, asr #11
   28568:	andeq	r8, r2, r8, asr #11
   2856c:	andeq	r8, r2, r8, asr #11
   28570:	andeq	r8, r2, r4, lsl r4
   28574:	sub	r3, r5, r1
   28578:	cmp	r3, #1
   2857c:	movle	r3, r0
   28580:	ldrbgt	r3, [r1, #1]
   28584:	subgt	r3, r3, #10
   28588:	clzgt	r3, r3
   2858c:	lsrgt	r3, r3, #5
   28590:	add	r1, r1, r3
   28594:	ldr	r3, [r6, #16]
   28598:	add	r1, r1, #1
   2859c:	add	r3, r3, #1
   285a0:	str	r1, [r6, #4]
   285a4:	str	r3, [r6, #16]
   285a8:	cmp	r5, r1
   285ac:	beq	285f4 <flatcc_emitter_copy_buffer@@Base+0xf24>
   285b0:	ldrb	r3, [r1]
   285b4:	cmp	r3, #32
   285b8:	bls	28504 <flatcc_emitter_copy_buffer@@Base+0xe34>
   285bc:	b	28448 <flatcc_emitter_copy_buffer@@Base+0xd78>
   285c0:	add	r1, r1, #1
   285c4:	b	285a8 <flatcc_emitter_copy_buffer@@Base+0xed8>
   285c8:	ldr	r7, [r6, #24]
   285cc:	cmp	r7, #0
   285d0:	bne	27b8c <flatcc_emitter_copy_buffer@@Base+0x4bc>
   285d4:	ldr	r3, [r6, #4]
   285d8:	mov	r2, #5
   285dc:	sub	r3, r1, r3
   285e0:	add	r3, r3, #1
   285e4:	str	r1, [r6, #36]	; 0x24
   285e8:	str	r3, [r6, #20]
   285ec:	str	r2, [r6, #24]
   285f0:	b	27b90 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   285f4:	mov	r1, r5
   285f8:	b	28448 <flatcc_emitter_copy_buffer@@Base+0xd78>

000285fc <grisu3_diy_fp_encode_double@@Base>:
   285fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28600:	sub	sp, sp, #60	; 0x3c
   28604:	mov	sl, r0
   28608:	ldr	lr, [sp, #96]	; 0x60
   2860c:	mov	fp, r1
   28610:	cmp	lr, #0
   28614:	mov	r6, r3
   28618:	movne	lr, #4
   2861c:	orrs	r3, sl, fp
   28620:	sub	r2, r2, r6
   28624:	beq	28b4c <grisu3_diy_fp_encode_double@@Base+0x550>
   28628:	ldr	r1, [pc, #1312]	; 28b50 <grisu3_diy_fp_encode_double@@Base+0x554>
   2862c:	mov	r0, #0
   28630:	and	r0, r0, sl
   28634:	and	r1, r1, fp
   28638:	orrs	r3, r0, r1
   2863c:	movne	ip, #0
   28640:	bne	2867c <grisu3_diy_fp_encode_double@@Base+0x80>
   28644:	mvn	r4, #9
   28648:	lsl	r3, fp, #10
   2864c:	lsl	r1, sl, #10
   28650:	orr	r3, r3, sl, lsr #22
   28654:	mov	sl, r1
   28658:	ldr	r1, [pc, #1264]	; 28b50 <grisu3_diy_fp_encode_double@@Base+0x554>
   2865c:	mov	r0, #0
   28660:	and	r0, r0, sl
   28664:	and	r1, r1, r3
   28668:	mov	fp, r3
   2866c:	orrs	r3, r0, r1
   28670:	mov	ip, r4
   28674:	sub	r4, r4, #10
   28678:	beq	28648 <grisu3_diy_fp_encode_double@@Base+0x4c>
   2867c:	cmp	sl, #0
   28680:	sbcs	r3, fp, #0
   28684:	blt	286a0 <grisu3_diy_fp_encode_double@@Base+0xa4>
   28688:	adds	sl, sl, sl
   2868c:	adc	fp, fp, fp
   28690:	cmp	sl, #0
   28694:	sbcs	r3, fp, #0
   28698:	sub	ip, ip, #1
   2869c:	bge	28688 <grisu3_diy_fp_encode_double@@Base+0x8c>
   286a0:	rsb	r3, ip, #0
   286a4:	cmn	r2, #348	; 0x15c
   286a8:	lsl	r3, lr, r3
   286ac:	str	r3, [sp, #20]
   286b0:	blt	28b38 <grisu3_diy_fp_encode_double@@Base+0x53c>
   286b4:	cmp	r2, #348	; 0x15c
   286b8:	bge	28b24 <grisu3_diy_fp_encode_double@@Base+0x528>
   286bc:	add	r1, r2, #348	; 0x15c
   286c0:	ldr	r3, [pc, #1164]	; 28b54 <grisu3_diy_fp_encode_double@@Base+0x558>
   286c4:	asr	r1, r1, #3
   286c8:	add	r1, r3, r1, lsl #4
   286cc:	ldrsh	r7, [r1, #66]	; 0x42
   286d0:	ldrd	r4, [r1, #56]	; 0x38
   286d4:	ldrsh	r1, [r1, #64]	; 0x40
   286d8:	cmp	r2, r7
   286dc:	strd	r4, [sp]
   286e0:	str	r1, [sp, #40]	; 0x28
   286e4:	blt	28b10 <grisu3_diy_fp_encode_double@@Base+0x514>
   286e8:	add	r1, r7, #7
   286ec:	cmp	r2, r1
   286f0:	bgt	28afc <grisu3_diy_fp_encode_double@@Base+0x500>
   286f4:	cmp	r2, r7
   286f8:	beq	287e4 <grisu3_diy_fp_encode_double@@Base+0x1e8>
   286fc:	sub	r2, r2, r7
   28700:	sub	r7, r2, #1
   28704:	cmp	r7, #6
   28708:	bhi	28ae8 <grisu3_diy_fp_encode_double@@Base+0x4ec>
   2870c:	ldr	r0, [pc, #1092]	; 28b58 <grisu3_diy_fp_encode_double@@Base+0x55c>
   28710:	lsl	r1, r7, #4
   28714:	mov	r3, #0
   28718:	ldrd	r4, [r0, r1]
   2871c:	add	r1, r0, r1
   28720:	str	r1, [sp, #44]	; 0x2c
   28724:	mov	r8, r4
   28728:	mov	r0, r4
   2872c:	strd	r4, [sp, #24]
   28730:	umull	r4, r5, sl, r5
   28734:	mov	r1, #0
   28738:	strd	r4, [sp, #32]
   2873c:	umull	r4, r5, fp, r8
   28740:	mul	lr, sl, r1
   28744:	mla	r2, fp, r1, r5
   28748:	mla	lr, r8, r3, lr
   2874c:	ldr	r1, [sp, #28]
   28750:	umull	r8, r9, sl, r0
   28754:	ldr	r0, [sp, #36]	; 0x24
   28758:	strd	r4, [sp, #48]	; 0x30
   2875c:	mla	r3, r1, r3, r0
   28760:	add	r0, lr, r9
   28764:	mov	lr, #0
   28768:	str	r0, [sp, #8]
   2876c:	str	lr, [sp, #12]
   28770:	mov	r4, r2
   28774:	mov	r0, r3
   28778:	ldrd	r2, [sp, #8]
   2877c:	ldr	r8, [sp, #48]	; 0x30
   28780:	add	r6, r6, #1
   28784:	adds	r2, r2, r8
   28788:	adc	r3, r3, #0
   2878c:	adds	r0, r0, r4
   28790:	ldr	r4, [sp, #28]
   28794:	adc	r1, lr, lr
   28798:	adds	r2, r2, #-2147483648	; 0x80000000
   2879c:	umlal	r0, r1, r4, fp
   287a0:	mov	fp, r1
   287a4:	ldr	r1, [sp, #44]	; 0x2c
   287a8:	adc	r3, r3, #0
   287ac:	mov	sl, r0
   287b0:	ldr	r4, [r1, #8]
   287b4:	ldr	r1, [sp, #32]
   287b8:	add	r7, r6, r7
   287bc:	adds	r2, r2, r1
   287c0:	adc	r3, r3, #0
   287c4:	adds	sl, sl, r3
   287c8:	adc	fp, fp, lr
   287cc:	cmp	r7, #19
   287d0:	add	ip, ip, r4
   287d4:	ldrgt	r3, [sp, #20]
   287d8:	add	ip, ip, #64	; 0x40
   287dc:	addgt	r3, r3, #4
   287e0:	strgt	r3, [sp, #20]
   287e4:	ldrd	r0, [sp]
   287e8:	mov	r3, #0
   287ec:	mov	r5, #0
   287f0:	mov	r2, r0
   287f4:	umull	r6, r7, sl, r1
   287f8:	umull	r8, r9, fp, r2
   287fc:	mul	lr, sl, r3
   28800:	mla	r9, fp, r3, r9
   28804:	ldr	r3, [sp, #4]
   28808:	umull	r0, r1, sl, r2
   2880c:	mla	r0, r2, r5, lr
   28810:	mla	lr, r3, r5, r7
   28814:	add	r2, r0, r1
   28818:	adds	r2, r2, r8
   2881c:	mov	r0, lr
   28820:	ldr	r4, [sp, #4]
   28824:	mov	lr, #0
   28828:	adc	r3, lr, #0
   2882c:	adds	r0, r0, r9
   28830:	adc	r1, lr, lr
   28834:	umlal	r0, r1, r4, fp
   28838:	adds	r2, r2, #-2147483648	; 0x80000000
   2883c:	adc	r3, r3, #0
   28840:	adds	r2, r2, r6
   28844:	adc	r3, r3, #0
   28848:	adds	r6, r3, r0
   2884c:	ldr	r3, [sp, #40]	; 0x28
   28850:	adc	r7, lr, r1
   28854:	add	ip, ip, r3
   28858:	ldr	r3, [sp, #20]
   2885c:	cmp	r3, lr
   28860:	moveq	r2, #8
   28864:	movne	r2, #9
   28868:	orrs	r1, r6, r7
   2886c:	add	r2, r3, r2
   28870:	add	lr, ip, #64	; 0x40
   28874:	beq	28b4c <grisu3_diy_fp_encode_double@@Base+0x550>
   28878:	ldr	r1, [pc, #720]	; 28b50 <grisu3_diy_fp_encode_double@@Base+0x554>
   2887c:	mov	r0, #0
   28880:	and	r0, r0, r6
   28884:	and	r1, r1, r7
   28888:	orrs	r3, r0, r1
   2888c:	bne	28ac0 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   28890:	add	ip, ip, #54	; 0x36
   28894:	lsl	r3, r7, #10
   28898:	lsl	r1, r6, #10
   2889c:	orr	r3, r3, r6, lsr #22
   288a0:	mov	r6, r1
   288a4:	ldr	r1, [pc, #676]	; 28b50 <grisu3_diy_fp_encode_double@@Base+0x554>
   288a8:	mov	r0, #0
   288ac:	and	r1, r1, r3
   288b0:	and	r0, r0, r6
   288b4:	mov	r7, r3
   288b8:	orrs	r3, r0, r1
   288bc:	mov	r3, ip
   288c0:	sub	ip, ip, #10
   288c4:	beq	28894 <grisu3_diy_fp_encode_double@@Base+0x298>
   288c8:	cmp	r6, #0
   288cc:	sbcs	r1, r7, #0
   288d0:	blt	288ec <grisu3_diy_fp_encode_double@@Base+0x2f0>
   288d4:	adds	r6, r6, r6
   288d8:	adc	r7, r7, r7
   288dc:	cmp	r6, #0
   288e0:	sbcs	r1, r7, #0
   288e4:	sub	r3, r3, #1
   288e8:	bge	288d4 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   288ec:	ldr	r0, [pc, #616]	; 28b5c <grisu3_diy_fp_encode_double@@Base+0x560>
   288f0:	sub	lr, lr, r3
   288f4:	add	r1, r3, #64	; 0x40
   288f8:	cmp	r1, r0
   288fc:	lsl	r2, r2, lr
   28900:	blt	28a44 <grisu3_diy_fp_encode_double@@Base+0x448>
   28904:	mov	r1, #0
   28908:	mov	lr, r1
   2890c:	mov	r0, #4
   28910:	lsr	r4, r6, lr
   28914:	rsb	r6, lr, #32
   28918:	sub	ip, lr, #32
   2891c:	orr	r4, r4, r7, lsl r6
   28920:	orr	r4, r4, r7, lsr ip
   28924:	add	ip, r2, r0
   28928:	cmp	lr, ip
   2892c:	add	r3, lr, r3
   28930:	lsr	r5, r7, lr
   28934:	blt	2895c <grisu3_diy_fp_encode_double@@Base+0x360>
   28938:	adds	r4, r4, #1
   2893c:	adc	r5, r5, #0
   28940:	mov	r6, #0
   28944:	and	r7, r5, #2097152	; 0x200000
   28948:	orrs	lr, r6, r7
   2894c:	beq	2895c <grisu3_diy_fp_encode_double@@Base+0x360>
   28950:	lsrs	r5, r5, #1
   28954:	rrx	r4, r4
   28958:	add	r3, r3, #1
   2895c:	ldr	r7, [pc, #508]	; 28b60 <grisu3_diy_fp_encode_double@@Base+0x564>
   28960:	mvn	r6, #0
   28964:	cmp	r5, r7
   28968:	cmpeq	r4, r6
   2896c:	bls	28988 <grisu3_diy_fp_encode_double@@Base+0x38c>
   28970:	lsrs	r5, r5, #1
   28974:	rrx	r4, r4
   28978:	cmp	r5, r7
   2897c:	cmpeq	r4, r6
   28980:	add	r3, r3, #1
   28984:	bhi	28970 <grisu3_diy_fp_encode_double@@Base+0x374>
   28988:	ldr	r8, [pc, #468]	; 28b64 <grisu3_diy_fp_encode_double@@Base+0x568>
   2898c:	cmp	r3, r8
   28990:	movlt	r8, #0
   28994:	movlt	r9, #0
   28998:	blt	28a18 <grisu3_diy_fp_encode_double@@Base+0x41c>
   2899c:	beq	289ec <grisu3_diy_fp_encode_double@@Base+0x3f0>
   289a0:	mov	r6, #0
   289a4:	and	r7, r5, #1048576	; 0x100000
   289a8:	orrs	lr, r6, r7
   289ac:	addne	r3, r3, #1072	; 0x430
   289b0:	addne	r3, r3, #3
   289b4:	movne	r8, #0
   289b8:	lslne	r9, r3, #20
   289bc:	beq	289d8 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   289c0:	b	28a00 <grisu3_diy_fp_encode_double@@Base+0x404>
   289c4:	mov	r6, #0
   289c8:	and	r7, r5, #1048576	; 0x100000
   289cc:	orrs	r6, r6, r7
   289d0:	bne	28aa4 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   289d4:	mov	r3, lr
   289d8:	adds	r4, r4, r4
   289dc:	sub	lr, r3, #1
   289e0:	adc	r5, r5, r5
   289e4:	cmp	lr, r8
   289e8:	bne	289c4 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   289ec:	mov	r8, #0
   289f0:	and	r9, r5, #1048576	; 0x100000
   289f4:	orrs	r3, r8, r9
   289f8:	movne	r8, #0
   289fc:	movne	r9, #1048576	; 0x100000
   28a00:	ldr	r7, [pc, #352]	; 28b68 <grisu3_diy_fp_encode_double@@Base+0x56c>
   28a04:	mvn	r6, #0
   28a08:	and	r4, r4, r6
   28a0c:	and	r5, r5, r7
   28a10:	orr	r8, r8, r4
   28a14:	orr	r9, r9, r5
   28a18:	ldr	r3, [sp, #100]	; 0x64
   28a1c:	cmp	ip, r1
   28a20:	sub	r0, r0, r2
   28a24:	movgt	ip, #0
   28a28:	movle	ip, #1
   28a2c:	cmp	r0, r1
   28a30:	movlt	r0, ip
   28a34:	orrge	r0, ip, #1
   28a38:	strd	r8, [r3]
   28a3c:	add	sp, sp, #60	; 0x3c
   28a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a44:	mvn	r0, #1072	; 0x430
   28a48:	cmp	r1, r0
   28a4c:	blt	28ab8 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   28a50:	add	r1, r3, #1136	; 0x470
   28a54:	add	r1, r1, #2
   28a58:	rsb	lr, r1, #64	; 0x40
   28a5c:	cmp	lr, #60	; 0x3c
   28a60:	rsbgt	r1, r1, #2
   28a64:	ble	28ac8 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   28a68:	rsb	r0, r1, #32
   28a6c:	lsr	ip, r6, r1
   28a70:	orr	ip, ip, r7, lsl r0
   28a74:	sub	r0, r1, #32
   28a78:	lsr	lr, r7, r1
   28a7c:	orr	ip, ip, r7, lsr r0
   28a80:	asr	r2, r2, r1
   28a84:	add	r3, r3, r1
   28a88:	mov	r1, #0
   28a8c:	mov	r7, lr
   28a90:	mov	r6, ip
   28a94:	add	r2, r2, #9
   28a98:	mov	r0, r1
   28a9c:	mov	lr, #62	; 0x3e
   28aa0:	b	28910 <grisu3_diy_fp_encode_double@@Base+0x314>
   28aa4:	add	r3, r3, #1072	; 0x430
   28aa8:	add	r3, r3, #2
   28aac:	mov	r8, #0
   28ab0:	lsl	r9, r3, #20
   28ab4:	b	28a00 <grisu3_diy_fp_encode_double@@Base+0x404>
   28ab8:	mov	r1, #2
   28abc:	b	28a68 <grisu3_diy_fp_encode_double@@Base+0x46c>
   28ac0:	mov	r3, lr
   28ac4:	b	288c8 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   28ac8:	rsb	r1, r1, #63	; 0x3f
   28acc:	mov	ip, #1
   28ad0:	mov	r0, #8
   28ad4:	lsl	r4, ip, r1
   28ad8:	and	r4, r4, r6
   28adc:	lsl	r0, r0, r1
   28ae0:	lsl	r1, r4, #3
   28ae4:	b	28910 <grisu3_diy_fp_encode_double@@Base+0x314>
   28ae8:	ldr	r3, [pc, #124]	; 28b6c <grisu3_diy_fp_encode_double@@Base+0x570>
   28aec:	mov	r2, #185	; 0xb9
   28af0:	ldr	r1, [pc, #120]	; 28b70 <grisu3_diy_fp_encode_double@@Base+0x574>
   28af4:	ldr	r0, [pc, #120]	; 28b74 <grisu3_diy_fp_encode_double@@Base+0x578>
   28af8:	bl	126a8 <__assert_fail@plt>
   28afc:	add	r3, r3, #24
   28b00:	mov	r2, #89	; 0x59
   28b04:	ldr	r1, [pc, #100]	; 28b70 <grisu3_diy_fp_encode_double@@Base+0x574>
   28b08:	ldr	r0, [pc, #104]	; 28b78 <grisu3_diy_fp_encode_double@@Base+0x57c>
   28b0c:	bl	126a8 <__assert_fail@plt>
   28b10:	add	r3, r3, #24
   28b14:	mov	r2, #88	; 0x58
   28b18:	ldr	r1, [pc, #80]	; 28b70 <grisu3_diy_fp_encode_double@@Base+0x574>
   28b1c:	ldr	r0, [pc, #88]	; 28b7c <grisu3_diy_fp_encode_double@@Base+0x580>
   28b20:	bl	126a8 <__assert_fail@plt>
   28b24:	ldr	r3, [pc, #84]	; 28b80 <grisu3_diy_fp_encode_double@@Base+0x584>
   28b28:	mov	r2, #81	; 0x51
   28b2c:	ldr	r1, [pc, #60]	; 28b70 <grisu3_diy_fp_encode_double@@Base+0x574>
   28b30:	ldr	r0, [pc, #76]	; 28b84 <grisu3_diy_fp_encode_double@@Base+0x588>
   28b34:	bl	126a8 <__assert_fail@plt>
   28b38:	ldr	r3, [pc, #64]	; 28b80 <grisu3_diy_fp_encode_double@@Base+0x584>
   28b3c:	mov	r2, #80	; 0x50
   28b40:	ldr	r1, [pc, #40]	; 28b70 <grisu3_diy_fp_encode_double@@Base+0x574>
   28b44:	ldr	r0, [pc, #60]	; 28b88 <grisu3_diy_fp_encode_double@@Base+0x58c>
   28b48:	bl	126a8 <__assert_fail@plt>
   28b4c:	bl	1296c <__assert_fail@plt+0x2c4>
   28b50:			; <UNDEFINED> instruction: 0xffc00000
   28b54:	strdeq	pc, [r2], -r8
   28b58:	andeq	r1, r4, r8, asr #6
   28b5c:			; <UNDEFINED> instruction: 0xfffffc0e
   28b60:			; <UNDEFINED> instruction: 0x001fffff
   28b64:			; <UNDEFINED> instruction: 0xfffffbce
   28b68:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   28b6c:	andeq	pc, r2, r0, lsr #25
   28b70:	strdeq	pc, [r2], -r4
   28b74:	andeq	r0, r3, r4, asr #1
   28b78:	andeq	r0, r3, r8, lsr #1
   28b7c:	muleq	r3, r8, r0
   28b80:	andeq	pc, r2, r0, lsl r7	; <UNPREDICTABLE>
   28b84:	andeq	r0, r3, ip, rrx
   28b88:	andeq	r0, r3, ip, asr #32
   28b8c:	cmp	r1, #1000	; 0x3e8
   28b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b94:	addle	r1, r1, #1
   28b98:	addgt	lr, r0, #1000	; 0x3e8
   28b9c:	mov	r4, #0
   28ba0:	mov	r5, #0
   28ba4:	addle	lr, r0, r1
   28ba8:	addgt	lr, lr, #1
   28bac:	cmp	lr, r0
   28bb0:	sub	sp, sp, #44	; 0x2c
   28bb4:	mov	fp, r2
   28bb8:	mov	sl, r0
   28bbc:	strd	r4, [r2]
   28bc0:	beq	290fc <grisu3_diy_fp_encode_double@@Base+0xb00>
   28bc4:	ldrb	r0, [r0]
   28bc8:	cmp	r0, #45	; 0x2d
   28bcc:	movne	r2, #0
   28bd0:	movne	r3, sl
   28bd4:	strne	r2, [sp, #16]
   28bd8:	beq	28f8c <grisu3_diy_fp_encode_double@@Base+0x990>
   28bdc:	cmp	r0, #48	; 0x30
   28be0:	beq	28fac <grisu3_diy_fp_encode_double@@Base+0x9b0>
   28be4:	sub	r2, r0, #49	; 0x31
   28be8:	cmp	r2, #8
   28bec:	bhi	28cec <grisu3_diy_fp_encode_double@@Base+0x6f0>
   28bf0:	add	r9, r3, #1
   28bf4:	sub	r0, r0, #48	; 0x30
   28bf8:	cmp	lr, r9
   28bfc:	asr	r1, r0, #31
   28c00:	beq	2955c <grisu3_diy_fp_encode_double@@Base+0xf60>
   28c04:	ldrb	ip, [r3, #1]
   28c08:	sub	r3, ip, #48	; 0x30
   28c0c:	cmp	r3, #9
   28c10:	movhi	r4, r9
   28c14:	movhi	r9, #0
   28c18:	bhi	28c7c <grisu3_diy_fp_encode_double@@Base+0x680>
   28c1c:	add	r5, r9, #1
   28c20:	mov	r8, #10
   28c24:	add	r7, pc, #988	; 0x3dc
   28c28:	ldrd	r6, [r7]
   28c2c:	b	28c40 <grisu3_diy_fp_encode_double@@Base+0x644>
   28c30:	cmp	r1, r7
   28c34:	cmpeq	r0, r6
   28c38:	bhi	28d08 <grisu3_diy_fp_encode_double@@Base+0x70c>
   28c3c:	mov	r5, r3
   28c40:	umull	r2, r3, r0, r8
   28c44:	mla	r3, r8, r1, r3
   28c48:	adds	r0, r2, ip
   28c4c:	adc	r1, r3, #0
   28c50:	subs	r0, r0, #48	; 0x30
   28c54:	sbc	r1, r1, #0
   28c58:	cmp	lr, r5
   28c5c:	mov	r4, r5
   28c60:	beq	29390 <grisu3_diy_fp_encode_double@@Base+0xd94>
   28c64:	ldrb	ip, [r5]
   28c68:	add	r3, r5, #1
   28c6c:	sub	r2, ip, #48	; 0x30
   28c70:	cmp	r2, #9
   28c74:	bls	28c30 <grisu3_diy_fp_encode_double@@Base+0x634>
   28c78:	sub	r9, r5, r9
   28c7c:	mov	r8, #0
   28c80:	mov	r2, r8
   28c84:	sub	r3, ip, #49	; 0x31
   28c88:	cmp	r3, #8
   28c8c:	bhi	28ec8 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   28c90:	add	r6, r4, #1
   28c94:	cmp	lr, r6
   28c98:	add	r5, r2, #1
   28c9c:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   28ca0:	ldrb	ip, [r4, #1]
   28ca4:	sub	r3, ip, #48	; 0x30
   28ca8:	cmp	r3, #9
   28cac:	bhi	28ebc <grisu3_diy_fp_encode_double@@Base+0x8c0>
   28cb0:	sub	r2, r2, r4
   28cb4:	add	r4, r4, #2
   28cb8:	b	28ccc <grisu3_diy_fp_encode_double@@Base+0x6d0>
   28cbc:	ldrb	ip, [r4], #1
   28cc0:	sub	r3, ip, #48	; 0x30
   28cc4:	cmp	r3, #9
   28cc8:	bhi	28ebc <grisu3_diy_fp_encode_double@@Base+0x8c0>
   28ccc:	cmp	r4, lr
   28cd0:	add	r5, r2, r4
   28cd4:	mov	r6, r4
   28cd8:	bne	28cbc <grisu3_diy_fp_encode_double@@Base+0x6c0>
   28cdc:	add	r5, r5, r9
   28ce0:	mov	r4, lr
   28ce4:	mov	r8, #1
   28ce8:	b	28d5c <grisu3_diy_fp_encode_double@@Base+0x760>
   28cec:	ldr	r3, [sp, #16]
   28cf0:	cmp	r3, #0
   28cf4:	moveq	r4, sl
   28cf8:	movne	r4, #0
   28cfc:	mov	r0, r4
   28d00:	add	sp, sp, #44	; 0x2c
   28d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d08:	cmp	ip, #52	; 0x34
   28d0c:	movls	r2, #0
   28d10:	movhi	r2, #1
   28d14:	adds	r0, r0, r2
   28d18:	adc	r1, r1, #0
   28d1c:	cmp	ip, #48	; 0x30
   28d20:	sub	r9, r4, r9
   28d24:	movne	r8, #1
   28d28:	movne	r2, #0
   28d2c:	beq	28d44 <grisu3_diy_fp_encode_double@@Base+0x748>
   28d30:	b	28c84 <grisu3_diy_fp_encode_double@@Base+0x688>
   28d34:	ldrb	ip, [r3]
   28d38:	add	r3, r3, #1
   28d3c:	cmp	ip, #48	; 0x30
   28d40:	bne	29000 <grisu3_diy_fp_encode_double@@Base+0xa04>
   28d44:	cmp	lr, r3
   28d48:	mov	r4, r3
   28d4c:	sub	r2, r3, r5
   28d50:	bne	28d34 <grisu3_diy_fp_encode_double@@Base+0x738>
   28d54:	add	r5, r2, r9
   28d58:	mov	r8, #1
   28d5c:	cmp	lr, r4
   28d60:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   28d64:	orrs	r3, r0, r1
   28d68:	moveq	r2, #1
   28d6c:	movne	r2, #0
   28d70:	cmn	r5, #324	; 0x144
   28d74:	movge	r3, #0
   28d78:	movlt	r3, #1
   28d7c:	orrs	r3, r2, r3
   28d80:	bne	28e98 <grisu3_diy_fp_encode_double@@Base+0x89c>
   28d84:	ldr	r3, [pc, #652]	; 29018 <grisu3_diy_fp_encode_double@@Base+0xa1c>
   28d88:	cmp	r5, r3
   28d8c:	bgt	29028 <grisu3_diy_fp_encode_double@@Base+0xa2c>
   28d90:	ldr	r3, [pc, #644]	; 2901c <grisu3_diy_fp_encode_double@@Base+0xa20>
   28d94:	mvn	r2, #0
   28d98:	cmp	r1, r3
   28d9c:	cmpeq	r0, r2
   28da0:	movls	r3, #1
   28da4:	movhi	r3, #0
   28da8:	cmp	r5, #22
   28dac:	movhi	r3, #0
   28db0:	andls	r3, r3, #1
   28db4:	cmp	r3, #0
   28db8:	beq	29124 <grisu3_diy_fp_encode_double@@Base+0xb28>
   28dbc:	bl	2e5d0 <flatcc_json_parser_struct_as_root@@Base+0x418>
   28dc0:	sub	r9, r5, r9
   28dc4:	add	r3, r9, #22
   28dc8:	vmov	d7, r0, r1
   28dcc:	cmp	r3, #44	; 0x2c
   28dd0:	ldrls	pc, [pc, r3, lsl #2]
   28dd4:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   28dd8:	andeq	r9, r2, r8, lsl #5
   28ddc:	muleq	r2, r4, r2
   28de0:	andeq	r9, r2, ip, ror r2
   28de4:	andeq	r9, r2, r4, asr r3
   28de8:	andeq	r9, r2, r8, asr #6
   28dec:	andeq	r9, r2, ip, lsr r3
   28df0:	andeq	r9, r2, r0, lsr r3
   28df4:	andeq	r9, r2, r4, lsr #6
   28df8:	andeq	r9, r2, r8, lsl r3
   28dfc:	andeq	r9, r2, ip, lsl #6
   28e00:	andeq	r9, r2, r0, lsl #6
   28e04:	strdeq	r9, [r2], -r4
   28e08:	andeq	r9, r2, r8, ror #5
   28e0c:	ldrdeq	r9, [r2], -ip
   28e10:	ldrdeq	r9, [r2], -r0
   28e14:	andeq	r9, r2, r4, asr #5
   28e18:			; <UNDEFINED> instruction: 0x000292b8
   28e1c:	andeq	r9, r2, ip, lsr #5
   28e20:	andeq	r9, r2, r0, lsr #5
   28e24:	andeq	r9, r2, r4, lsl #4
   28e28:	strdeq	r9, [r2], -r8
   28e2c:	andeq	r9, r2, ip, ror #3
   28e30:	muleq	r2, r4, lr
   28e34:	ldrdeq	r9, [r2], -r4
   28e38:	andeq	r9, r2, r8, asr #3
   28e3c:			; <UNDEFINED> instruction: 0x000291bc
   28e40:			; <UNDEFINED> instruction: 0x000291b0
   28e44:	andeq	r9, r2, r4, lsr #3
   28e48:	muleq	r2, r8, r1
   28e4c:	andeq	r9, r2, ip, lsl #3
   28e50:	andeq	r9, r2, r0, lsl #3
   28e54:	andeq	r9, r2, r4, ror r1
   28e58:	andeq	r9, r2, r8, ror #2
   28e5c:	andeq	r9, r2, ip, asr r1
   28e60:	andeq	r8, r2, ip, lsl #29
   28e64:	andeq	r9, r2, r4, ror #4
   28e68:	andeq	r9, r2, r8, asr r2
   28e6c:	andeq	r9, r2, ip, asr #4
   28e70:	andeq	r9, r2, r0, asr #4
   28e74:	andeq	r9, r2, r4, lsr r2
   28e78:	andeq	r9, r2, r8, lsr #4
   28e7c:	andeq	r9, r2, ip, lsl r2
   28e80:	andeq	r9, r2, r0, lsl r2
   28e84:	andeq	r9, r2, r0, ror r2
   28e88:	andeq	r9, r2, r0, ror #3
   28e8c:	vldr	d6, [pc, #380]	; 29010 <grisu3_diy_fp_encode_double@@Base+0xa14>
   28e90:	vmul.f64	d7, d7, d6
   28e94:	vstr	d7, [fp]
   28e98:	ldr	r3, [sp, #16]
   28e9c:	cmp	r3, #0
   28ea0:	beq	28cfc <grisu3_diy_fp_encode_double@@Base+0x700>
   28ea4:	vldr	d7, [fp]
   28ea8:	mov	r0, r4
   28eac:	vneg.f64	d7, d7
   28eb0:	vstr	d7, [fp]
   28eb4:	add	sp, sp, #44	; 0x2c
   28eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ebc:	mov	r2, r5
   28ec0:	mov	r4, r6
   28ec4:	mov	r8, #1
   28ec8:	cmp	ip, #46	; 0x2e
   28ecc:	beq	29040 <grisu3_diy_fp_encode_double@@Base+0xa44>
   28ed0:	cmp	lr, r4
   28ed4:	add	r5, r2, r9
   28ed8:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   28edc:	orr	ip, ip, #32
   28ee0:	cmp	ip, #101	; 0x65
   28ee4:	bne	28d64 <grisu3_diy_fp_encode_double@@Base+0x768>
   28ee8:	sub	r3, lr, r4
   28eec:	cmp	r3, #1
   28ef0:	ble	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   28ef4:	ldrb	r2, [r4, #1]
   28ef8:	cmp	r2, #43	; 0x2b
   28efc:	beq	29374 <grisu3_diy_fp_encode_double@@Base+0xd78>
   28f00:	cmp	r2, #45	; 0x2d
   28f04:	beq	29538 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   28f08:	add	ip, r4, #1
   28f0c:	mov	r3, #0
   28f10:	str	r3, [sp, #8]
   28f14:	sub	r2, r2, #48	; 0x30
   28f18:	uxtb	r3, r2
   28f1c:	cmp	r3, #9
   28f20:	bhi	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   28f24:	add	r4, ip, #1
   28f28:	cmp	lr, r4
   28f2c:	beq	28f78 <grisu3_diy_fp_encode_double@@Base+0x97c>
   28f30:	ldrb	r3, [ip, #1]
   28f34:	sub	r6, r3, #48	; 0x30
   28f38:	cmp	r6, #9
   28f3c:	bhi	29360 <grisu3_diy_fp_encode_double@@Base+0xd64>
   28f40:	ldr	r7, [pc, #216]	; 29020 <grisu3_diy_fp_encode_double@@Base+0xa24>
   28f44:	add	ip, ip, #2
   28f48:	b	28f5c <grisu3_diy_fp_encode_double@@Base+0x960>
   28f4c:	ldrb	r3, [ip], #1
   28f50:	sub	r6, r3, #48	; 0x30
   28f54:	cmp	r6, #9
   28f58:	bhi	29360 <grisu3_diy_fp_encode_double@@Base+0xd64>
   28f5c:	add	r4, r2, r2, lsl #2
   28f60:	cmp	r2, r7
   28f64:	add	r4, r3, r4, lsl #1
   28f68:	suble	r2, r4, #48	; 0x30
   28f6c:	cmp	lr, ip
   28f70:	mov	r4, ip
   28f74:	bne	28f4c <grisu3_diy_fp_encode_double@@Base+0x950>
   28f78:	ldr	r3, [sp, #8]
   28f7c:	cmp	r3, #0
   28f80:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   28f84:	sub	r5, r5, r2
   28f88:	b	28d5c <grisu3_diy_fp_encode_double@@Base+0x760>
   28f8c:	add	r3, sl, #1
   28f90:	cmp	lr, r3
   28f94:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   28f98:	ldrb	r0, [sl, #1]
   28f9c:	mov	r2, #1
   28fa0:	str	r2, [sp, #16]
   28fa4:	cmp	r0, #48	; 0x30
   28fa8:	bne	28be4 <grisu3_diy_fp_encode_double@@Base+0x5e8>
   28fac:	add	r4, r3, #1
   28fb0:	cmp	lr, r4
   28fb4:	beq	2910c <grisu3_diy_fp_encode_double@@Base+0xb10>
   28fb8:	ldrb	ip, [r3, #1]
   28fbc:	orr	r2, ip, #32
   28fc0:	cmp	r2, #120	; 0x78
   28fc4:	moveq	r4, sl
   28fc8:	beq	28cfc <grisu3_diy_fp_encode_double@@Base+0x700>
   28fcc:	cmp	ip, #48	; 0x30
   28fd0:	bne	28ff0 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   28fd4:	add	r3, r3, #2
   28fd8:	cmp	lr, r3
   28fdc:	mov	r4, r3
   28fe0:	beq	2910c <grisu3_diy_fp_encode_double@@Base+0xb10>
   28fe4:	ldrb	ip, [r3], #1
   28fe8:	cmp	ip, #48	; 0x30
   28fec:	beq	28fd8 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   28ff0:	mov	r9, r4
   28ff4:	mov	r0, #0
   28ff8:	mov	r1, #0
   28ffc:	b	28c08 <grisu3_diy_fp_encode_double@@Base+0x60c>
   29000:	mov	r8, #1
   29004:	b	28c84 <grisu3_diy_fp_encode_double@@Base+0x688>
   29008:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2900c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   29010:	andge	r0, r0, #0
   29014:	rsbmi	r1, sp, #148, 20	; 0x94000
   29018:	andeq	r0, r0, r6, lsr r1
   2901c:			; <UNDEFINED> instruction: 0x001fffff
   29020:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   29024:	svcvc	0x00f00000	; IMB
   29028:	ldr	r3, [pc, #-12]	; 29024 <grisu3_diy_fp_encode_double@@Base+0xa28>
   2902c:	mov	r2, #0
   29030:	strd	r2, [fp]
   29034:	b	28e98 <grisu3_diy_fp_encode_double@@Base+0x89c>
   29038:	mov	r4, #0
   2903c:	b	28cfc <grisu3_diy_fp_encode_double@@Base+0x700>
   29040:	ldrb	r3, [r4, #1]
   29044:	add	ip, r4, #1
   29048:	mov	r5, ip
   2904c:	str	ip, [sp, #20]
   29050:	sub	ip, r3, #48	; 0x30
   29054:	cmp	ip, #9
   29058:	bhi	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2905c:	cmp	lr, r5
   29060:	beq	29578 <grisu3_diy_fp_encode_double@@Base+0xf7c>
   29064:	add	r7, pc, #980	; 0x3d4
   29068:	ldrd	r6, [r7]
   2906c:	cmp	r1, r7
   29070:	cmpeq	r0, r6
   29074:	bhi	29568 <grisu3_diy_fp_encode_double@@Base+0xf6c>
   29078:	add	r4, r4, #2
   2907c:	strd	r6, [sp, #8]
   29080:	mov	ip, #10
   29084:	str	r9, [sp, #24]
   29088:	str	r8, [sp, #28]
   2908c:	b	290b4 <grisu3_diy_fp_encode_double@@Base+0xab8>
   29090:	ldrb	r3, [r4]
   29094:	add	r4, r4, #1
   29098:	sub	r5, r3, #48	; 0x30
   2909c:	cmp	r5, #9
   290a0:	bhi	29398 <grisu3_diy_fp_encode_double@@Base+0xd9c>
   290a4:	ldrd	r8, [sp, #8]
   290a8:	cmp	r1, r9
   290ac:	cmpeq	r0, r8
   290b0:	bhi	294f8 <grisu3_diy_fp_encode_double@@Base+0xefc>
   290b4:	umull	r6, r7, r0, ip
   290b8:	mla	r7, ip, r1, r7
   290bc:	adds	r0, r6, r3
   290c0:	adc	r1, r7, #0
   290c4:	subs	r0, r0, #48	; 0x30
   290c8:	sbc	r1, r1, #0
   290cc:	cmp	lr, r4
   290d0:	sub	r2, r2, #1
   290d4:	mov	r6, r4
   290d8:	bne	29090 <grisu3_diy_fp_encode_double@@Base+0xa94>
   290dc:	ldr	r3, [sp, #20]
   290e0:	ldr	r9, [sp, #24]
   290e4:	ldr	r8, [sp, #28]
   290e8:	sub	r3, lr, r3
   290ec:	mov	r4, lr
   290f0:	add	r9, r9, r3
   290f4:	add	r5, r2, r9
   290f8:	b	28d5c <grisu3_diy_fp_encode_double@@Base+0x760>
   290fc:	mov	r4, lr
   29100:	mov	r0, r4
   29104:	add	sp, sp, #44	; 0x2c
   29108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2910c:	mov	r9, #0
   29110:	mov	r0, #0
   29114:	mov	r1, #0
   29118:	mov	r5, r9
   2911c:	mov	r8, #0
   29120:	b	28d5c <grisu3_diy_fp_encode_double@@Base+0x760>
   29124:	stm	sp, {r8, fp}
   29128:	mov	r3, r9
   2912c:	mov	r2, r5
   29130:	bl	285fc <grisu3_diy_fp_encode_double@@Base>
   29134:	cmp	r0, #0
   29138:	bne	28e98 <grisu3_diy_fp_encode_double@@Base+0x89c>
   2913c:	mov	r0, sl
   29140:	add	r1, sp, #36	; 0x24
   29144:	bl	12660 <strtod@plt>
   29148:	ldr	r3, [sp, #36]	; 0x24
   2914c:	cmp	r4, r3
   29150:	movcs	r4, r3
   29154:	vstr	d0, [fp]
   29158:	b	28cfc <grisu3_diy_fp_encode_double@@Base+0x700>
   2915c:	vldr	d6, [pc, #740]	; 29448 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   29160:	vmul.f64	d7, d7, d6
   29164:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29168:	vldr	d6, [pc, #736]	; 29450 <grisu3_diy_fp_encode_double@@Base+0xe54>
   2916c:	vmul.f64	d7, d7, d6
   29170:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29174:	vldr	d6, [pc, #732]	; 29458 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   29178:	vmul.f64	d7, d7, d6
   2917c:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29180:	vldr	d6, [pc, #728]	; 29460 <grisu3_diy_fp_encode_double@@Base+0xe64>
   29184:	vmul.f64	d7, d7, d6
   29188:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   2918c:	vldr	d6, [pc, #724]	; 29468 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   29190:	vmul.f64	d7, d7, d6
   29194:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29198:	vldr	d6, [pc, #720]	; 29470 <grisu3_diy_fp_encode_double@@Base+0xe74>
   2919c:	vmul.f64	d7, d7, d6
   291a0:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291a4:	vldr	d6, [pc, #716]	; 29478 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   291a8:	vmul.f64	d7, d7, d6
   291ac:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291b0:	vldr	d6, [pc, #712]	; 29480 <grisu3_diy_fp_encode_double@@Base+0xe84>
   291b4:	vmul.f64	d7, d7, d6
   291b8:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291bc:	vldr	d6, [pc, #708]	; 29488 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   291c0:	vmul.f64	d7, d7, d6
   291c4:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291c8:	vldr	d6, [pc, #704]	; 29490 <grisu3_diy_fp_encode_double@@Base+0xe94>
   291cc:	vmul.f64	d7, d7, d6
   291d0:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291d4:	vldr	d6, [pc, #700]	; 29498 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   291d8:	vmul.f64	d7, d7, d6
   291dc:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291e0:	vldr	d6, [pc, #696]	; 294a0 <grisu3_diy_fp_encode_double@@Base+0xea4>
   291e4:	vmul.f64	d7, d7, d6
   291e8:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291ec:	vldr	d6, [pc, #676]	; 29498 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   291f0:	vdiv.f64	d7, d7, d6
   291f4:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   291f8:	vldr	d6, [pc, #656]	; 29490 <grisu3_diy_fp_encode_double@@Base+0xe94>
   291fc:	vdiv.f64	d7, d7, d6
   29200:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29204:	vldr	d6, [pc, #636]	; 29488 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   29208:	vdiv.f64	d7, d7, d6
   2920c:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29210:	vldr	d6, [pc, #656]	; 294a8 <grisu3_diy_fp_encode_double@@Base+0xeac>
   29214:	vmul.f64	d7, d7, d6
   29218:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   2921c:	vldr	d6, [pc, #652]	; 294b0 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   29220:	vmul.f64	d7, d7, d6
   29224:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29228:	vldr	d6, [pc, #648]	; 294b8 <grisu3_diy_fp_encode_double@@Base+0xebc>
   2922c:	vmul.f64	d7, d7, d6
   29230:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29234:	vldr	d6, [pc, #644]	; 294c0 <grisu3_diy_fp_encode_double@@Base+0xec4>
   29238:	vmul.f64	d7, d7, d6
   2923c:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29240:	vldr	d6, [pc, #640]	; 294c8 <grisu3_diy_fp_encode_double@@Base+0xecc>
   29244:	vmul.f64	d7, d7, d6
   29248:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   2924c:	vldr	d6, [pc, #636]	; 294d0 <grisu3_diy_fp_encode_double@@Base+0xed4>
   29250:	vmul.f64	d7, d7, d6
   29254:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29258:	vldr	d6, [pc, #632]	; 294d8 <grisu3_diy_fp_encode_double@@Base+0xedc>
   2925c:	vmul.f64	d7, d7, d6
   29260:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29264:	vldr	d6, [pc, #628]	; 294e0 <grisu3_diy_fp_encode_double@@Base+0xee4>
   29268:	vmul.f64	d7, d7, d6
   2926c:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29270:	vldr	d6, [pc, #624]	; 294e8 <grisu3_diy_fp_encode_double@@Base+0xeec>
   29274:	vmul.f64	d7, d7, d6
   29278:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   2927c:	vldr	d6, [pc, #548]	; 294a8 <grisu3_diy_fp_encode_double@@Base+0xeac>
   29280:	vdiv.f64	d7, d7, d6
   29284:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29288:	vldr	d6, [pc, #528]	; 294a0 <grisu3_diy_fp_encode_double@@Base+0xea4>
   2928c:	vdiv.f64	d7, d7, d6
   29290:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29294:	vldr	d6, [pc, #588]	; 294e8 <grisu3_diy_fp_encode_double@@Base+0xeec>
   29298:	vdiv.f64	d7, d7, d6
   2929c:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292a0:	vldr	d6, [pc, #472]	; 29480 <grisu3_diy_fp_encode_double@@Base+0xe84>
   292a4:	vdiv.f64	d7, d7, d6
   292a8:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292ac:	vldr	d6, [pc, #452]	; 29478 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   292b0:	vdiv.f64	d7, d7, d6
   292b4:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292b8:	vldr	d6, [pc, #432]	; 29470 <grisu3_diy_fp_encode_double@@Base+0xe74>
   292bc:	vdiv.f64	d7, d7, d6
   292c0:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292c4:	vldr	d6, [pc, #412]	; 29468 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   292c8:	vdiv.f64	d7, d7, d6
   292cc:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292d0:	vldr	d6, [pc, #392]	; 29460 <grisu3_diy_fp_encode_double@@Base+0xe64>
   292d4:	vdiv.f64	d7, d7, d6
   292d8:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292dc:	vldr	d6, [pc, #372]	; 29458 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   292e0:	vdiv.f64	d7, d7, d6
   292e4:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292e8:	vldr	d6, [pc, #352]	; 29450 <grisu3_diy_fp_encode_double@@Base+0xe54>
   292ec:	vdiv.f64	d7, d7, d6
   292f0:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   292f4:	vldr	d6, [pc, #332]	; 29448 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   292f8:	vdiv.f64	d7, d7, d6
   292fc:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29300:	vldr	d6, [pc, #488]	; 294f0 <grisu3_diy_fp_encode_double@@Base+0xef4>
   29304:	vdiv.f64	d7, d7, d6
   29308:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   2930c:	vldr	d6, [pc, #460]	; 294e0 <grisu3_diy_fp_encode_double@@Base+0xee4>
   29310:	vdiv.f64	d7, d7, d6
   29314:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29318:	vldr	d6, [pc, #440]	; 294d8 <grisu3_diy_fp_encode_double@@Base+0xedc>
   2931c:	vdiv.f64	d7, d7, d6
   29320:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29324:	vldr	d6, [pc, #420]	; 294d0 <grisu3_diy_fp_encode_double@@Base+0xed4>
   29328:	vdiv.f64	d7, d7, d6
   2932c:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29330:	vldr	d6, [pc, #400]	; 294c8 <grisu3_diy_fp_encode_double@@Base+0xecc>
   29334:	vdiv.f64	d7, d7, d6
   29338:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   2933c:	vldr	d6, [pc, #380]	; 294c0 <grisu3_diy_fp_encode_double@@Base+0xec4>
   29340:	vdiv.f64	d7, d7, d6
   29344:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29348:	vldr	d6, [pc, #360]	; 294b8 <grisu3_diy_fp_encode_double@@Base+0xebc>
   2934c:	vdiv.f64	d7, d7, d6
   29350:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29354:	vldr	d6, [pc, #340]	; 294b0 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   29358:	vdiv.f64	d7, d7, d6
   2935c:	b	28e94 <grisu3_diy_fp_encode_double@@Base+0x898>
   29360:	ldr	r3, [sp, #8]
   29364:	cmp	r3, #0
   29368:	bne	28f84 <grisu3_diy_fp_encode_double@@Base+0x988>
   2936c:	add	r5, r5, r2
   29370:	b	28d64 <grisu3_diy_fp_encode_double@@Base+0x768>
   29374:	add	ip, r4, #2
   29378:	cmp	lr, ip
   2937c:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   29380:	mov	r3, #0
   29384:	ldrb	r2, [r4, #2]
   29388:	str	r3, [sp, #8]
   2938c:	b	28f14 <grisu3_diy_fp_encode_double@@Base+0x918>
   29390:	sub	r9, lr, r9
   29394:	b	29118 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   29398:	ldr	r3, [sp, #20]
   2939c:	ldr	r9, [sp, #24]
   293a0:	sub	r3, r6, r3
   293a4:	ldr	r8, [sp, #28]
   293a8:	add	r9, r9, r3
   293ac:	ldrb	ip, [r6]
   293b0:	cmp	ip, #48	; 0x30
   293b4:	bne	29554 <grisu3_diy_fp_encode_double@@Base+0xf58>
   293b8:	sub	r3, r2, r6
   293bc:	add	r6, r6, #1
   293c0:	cmp	r6, lr
   293c4:	mov	r4, r6
   293c8:	add	r2, r3, r6
   293cc:	beq	290f4 <grisu3_diy_fp_encode_double@@Base+0xaf8>
   293d0:	ldrb	ip, [r6], #1
   293d4:	cmp	ip, #48	; 0x30
   293d8:	beq	293c0 <grisu3_diy_fp_encode_double@@Base+0xdc4>
   293dc:	sub	r3, ip, #49	; 0x31
   293e0:	cmp	r3, #8
   293e4:	bhi	29438 <grisu3_diy_fp_encode_double@@Base+0xe3c>
   293e8:	add	r3, r4, #1
   293ec:	cmp	lr, r3
   293f0:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   293f4:	ldrb	ip, [r4, #1]
   293f8:	sub	r5, ip, #48	; 0x30
   293fc:	cmp	r5, #9
   29400:	bhi	29430 <grisu3_diy_fp_encode_double@@Base+0xe34>
   29404:	add	r3, r4, #2
   29408:	b	29420 <grisu3_diy_fp_encode_double@@Base+0xe24>
   2940c:	ldrb	ip, [r3]
   29410:	add	r3, r3, #1
   29414:	sub	r5, ip, #48	; 0x30
   29418:	cmp	r5, #9
   2941c:	bhi	29434 <grisu3_diy_fp_encode_double@@Base+0xe38>
   29420:	cmp	r3, lr
   29424:	mov	r4, r3
   29428:	bne	2940c <grisu3_diy_fp_encode_double@@Base+0xe10>
   2942c:	b	28d54 <grisu3_diy_fp_encode_double@@Base+0x758>
   29430:	mov	r4, r3
   29434:	mov	r8, #1
   29438:	add	r5, r2, r9
   2943c:	b	28edc <grisu3_diy_fp_encode_double@@Base+0x8e0>
   29440:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   29444:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   29448:	stmda	r0, {}	; <UNPREDICTABLE>
   2944c:	eorsmi	r4, r7, #7733248	; 0x760000
   29450:	andcs	r0, r0, r0
   29454:	andmi	sl, r2, #95	; 0x5f
   29458:	andeq	r0, r0, r0
   2945c:	bicmi	ip, sp, r5, ror #26
   29460:	andeq	r0, r0, r0
   29464:	orrsmi	sp, r7, r4, lsl #15
   29468:	andeq	r0, r0, r0
   2946c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   29470:	andeq	r0, r0, r0
   29474:	smlawbmi	lr, r0, r4, r8
   29478:	andeq	r0, r0, r0
   2947c:	rscsmi	r6, r8, r0, lsl #20
   29480:	andeq	r0, r0, r0
   29484:	sbcmi	r8, r3, r0, lsl #16
   29488:	andeq	r0, r0, r0
   2948c:	addmi	r4, pc, r0
   29490:	andeq	r0, r0, r0
   29494:	subsmi	r0, r9, r0
   29498:	andeq	r0, r0, r0
   2949c:	eormi	r0, r4, r0
   294a0:			; <UNDEFINED> instruction: 0x064dd592
   294a4:	strmi	pc, [r0], #207	; 0xcf
   294a8:	ldmvc	r5!, {r6, sl, fp, pc}
   294ac:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   294b0:	addsvs	r3, r1, r0, lsl #26
   294b4:	mvnmi	r5, #228, 16	; 0xe40000
   294b8:	strbvs	ip, [lr, -r0, lsl #16]
   294bc:			; <UNDEFINED> instruction: 0x43abc16d
   294c0:	ldrbhi	sl, [r8]
   294c4:	cmnmi	r6, #1459617792	; 0x57000000
   294c8:	strbcc	r8, [r0, r0]!
   294cc:	movtmi	ip, #4985	; 0x1379
   294d0:	ldrtcs	r0, [r4], -r0
   294d4:	movwmi	r6, #52213	; 0xcbf5
   294d8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   294dc:	sbcsmi	fp, r6, #196, 24	; 0xc400
   294e0:	strb	r0, [r0, #-0]
   294e4:	adcmi	r3, r2, #156	; 0x9c
   294e8:	usatle	lr, #2, r0, asr #30
   294ec:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   294f0:	andge	r0, r0, #0
   294f4:	rsbmi	r1, sp, #148, 20	; 0x94000
   294f8:	ldr	r8, [sp, #28]
   294fc:	ldr	ip, [sp, #20]
   29500:	cmp	r8, #0
   29504:	ldr	r9, [sp, #24]
   29508:	sub	r8, r6, ip
   2950c:	bne	29524 <grisu3_diy_fp_encode_double@@Base+0xf28>
   29510:	cmp	r3, #52	; 0x34
   29514:	movls	r3, #0
   29518:	movhi	r3, #1
   2951c:	adds	r0, r0, r3
   29520:	adc	r1, r1, #0
   29524:	cmp	lr, r6
   29528:	add	r9, r9, r8
   2952c:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   29530:	mov	r8, #1
   29534:	b	293ac <grisu3_diy_fp_encode_double@@Base+0xdb0>
   29538:	add	ip, r4, #2
   2953c:	cmp	lr, ip
   29540:	beq	29038 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   29544:	mov	r3, #1
   29548:	ldrb	r2, [r4, #2]
   2954c:	str	r3, [sp, #8]
   29550:	b	28f14 <grisu3_diy_fp_encode_double@@Base+0x918>
   29554:	mov	r4, r6
   29558:	b	293dc <grisu3_diy_fp_encode_double@@Base+0xde0>
   2955c:	mov	r4, lr
   29560:	mov	r9, #0
   29564:	b	29118 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   29568:	cmp	r8, #0
   2956c:	bne	29584 <grisu3_diy_fp_encode_double@@Base+0xf88>
   29570:	mov	r6, r5
   29574:	b	29510 <grisu3_diy_fp_encode_double@@Base+0xf14>
   29578:	mov	r4, lr
   2957c:	mov	r3, #0
   29580:	b	290f0 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   29584:	mov	r6, r5
   29588:	b	293ac <grisu3_diy_fp_encode_double@@Base+0xdb0>

0002958c <flatcc_json_parser_error_string@@Base>:
   2958c:	cmp	r0, #34	; 0x22
   29590:	ldrls	r3, [pc, #12]	; 295a4 <flatcc_json_parser_error_string@@Base+0x18>
   29594:	addls	r0, r3, r0, lsl #2
   29598:	ldrls	r0, [r0, #1476]	; 0x5c4
   2959c:	ldrhi	r0, [pc, #4]	; 295a8 <flatcc_json_parser_error_string@@Base+0x1c>
   295a0:	bx	lr
   295a4:	strdeq	pc, [r2], -r8
   295a8:	andeq	r0, r3, r0, ror #1

000295ac <flatcc_json_parser_set_error@@Base>:
   295ac:	ldr	ip, [r0, #24]
   295b0:	cmp	ip, #0
   295b4:	bne	295d0 <flatcc_json_parser_set_error@@Base+0x24>
   295b8:	ldr	ip, [r0, #4]
   295bc:	str	r3, [r0, #24]
   295c0:	sub	r3, r1, ip
   295c4:	add	r3, r3, #1
   295c8:	str	r1, [r0, #36]	; 0x24
   295cc:	str	r3, [r0, #20]
   295d0:	mov	r0, r2
   295d4:	bx	lr

000295d8 <flatcc_json_parser_string_part@@Base>:
   295d8:	cmp	r1, r2
   295dc:	push	{lr}		; (str lr, [sp, #-4]!)
   295e0:	beq	29648 <flatcc_json_parser_string_part@@Base+0x70>
   295e4:	ldrb	r3, [r1]
   295e8:	cmp	r3, #34	; 0x22
   295ec:	cmpne	r3, #31
   295f0:	movhi	ip, #1
   295f4:	movls	ip, #0
   295f8:	cmp	r3, #92	; 0x5c
   295fc:	moveq	ip, #0
   29600:	andne	ip, ip, #1
   29604:	cmp	ip, #0
   29608:	beq	2965c <flatcc_json_parser_string_part@@Base+0x84>
   2960c:	add	ip, r1, #1
   29610:	b	2963c <flatcc_json_parser_string_part@@Base+0x64>
   29614:	ldrb	r3, [ip], #1
   29618:	cmp	r3, #34	; 0x22
   2961c:	cmpne	r3, #31
   29620:	movhi	lr, #1
   29624:	movls	lr, #0
   29628:	cmp	r3, #92	; 0x5c
   2962c:	moveq	lr, #0
   29630:	andne	lr, lr, #1
   29634:	cmp	lr, #0
   29638:	beq	2965c <flatcc_json_parser_string_part@@Base+0x84>
   2963c:	cmp	ip, r2
   29640:	mov	r1, ip
   29644:	bne	29614 <flatcc_json_parser_string_part@@Base+0x3c>
   29648:	ldr	r3, [r0, #24]
   2964c:	cmp	r3, #0
   29650:	beq	296a0 <flatcc_json_parser_string_part@@Base+0xc8>
   29654:	mov	r0, r2
   29658:	pop	{pc}		; (ldr pc, [sp], #4)
   2965c:	cmp	r3, #31
   29660:	bhi	29694 <flatcc_json_parser_string_part@@Base+0xbc>
   29664:	ldr	r3, [r0, #24]
   29668:	cmp	r3, #0
   2966c:	bne	29654 <flatcc_json_parser_string_part@@Base+0x7c>
   29670:	ldr	r3, [r0, #4]
   29674:	mov	ip, #17
   29678:	sub	r3, r1, r3
   2967c:	add	r3, r3, #1
   29680:	str	r1, [r0, #36]	; 0x24
   29684:	str	r3, [r0, #20]
   29688:	str	ip, [r0, #24]
   2968c:	mov	r0, r2
   29690:	pop	{pc}		; (ldr pc, [sp], #4)
   29694:	mov	r2, r1
   29698:	mov	r0, r2
   2969c:	pop	{pc}		; (ldr pc, [sp], #4)
   296a0:	ldr	r3, [r0, #4]
   296a4:	mov	ip, #20
   296a8:	b	29678 <flatcc_json_parser_string_part@@Base+0xa0>

000296ac <flatcc_json_parser_space_ext@@Base>:
   296ac:	push	{lr}		; (str lr, [sp, #-4]!)
   296b0:	mov	lr, #0
   296b4:	cmp	r1, r2
   296b8:	beq	297c8 <flatcc_json_parser_space_ext@@Base+0x11c>
   296bc:	ldrb	ip, [r1]
   296c0:	cmp	ip, #32
   296c4:	bne	296f0 <flatcc_json_parser_space_ext@@Base+0x44>
   296c8:	add	r3, r1, #1
   296cc:	b	296dc <flatcc_json_parser_space_ext@@Base+0x30>
   296d0:	ldrb	ip, [r3], #1
   296d4:	cmp	ip, #32
   296d8:	bne	296f0 <flatcc_json_parser_space_ext@@Base+0x44>
   296dc:	cmp	r3, r2
   296e0:	mov	r1, r3
   296e4:	bne	296d0 <flatcc_json_parser_space_ext@@Base+0x24>
   296e8:	mov	r0, r1
   296ec:	pop	{pc}		; (ldr pc, [sp], #4)
   296f0:	cmp	ip, #32
   296f4:	bhi	296e8 <flatcc_json_parser_space_ext@@Base+0x3c>
   296f8:	sub	ip, ip, #9
   296fc:	cmp	ip, #23
   29700:	ldrls	pc, [pc, ip, lsl #2]
   29704:	b	297bc <flatcc_json_parser_space_ext@@Base+0x110>
   29708:			; <UNDEFINED> instruction: 0x000297b4
   2970c:	andeq	r9, r2, r8, lsl #15
   29710:			; <UNDEFINED> instruction: 0x000297bc
   29714:			; <UNDEFINED> instruction: 0x000297bc
   29718:	andeq	r9, r2, r8, ror #14
   2971c:			; <UNDEFINED> instruction: 0x000297bc
   29720:			; <UNDEFINED> instruction: 0x000297bc
   29724:			; <UNDEFINED> instruction: 0x000297bc
   29728:			; <UNDEFINED> instruction: 0x000297bc
   2972c:			; <UNDEFINED> instruction: 0x000297bc
   29730:			; <UNDEFINED> instruction: 0x000297bc
   29734:			; <UNDEFINED> instruction: 0x000297bc
   29738:			; <UNDEFINED> instruction: 0x000297bc
   2973c:			; <UNDEFINED> instruction: 0x000297bc
   29740:			; <UNDEFINED> instruction: 0x000297bc
   29744:			; <UNDEFINED> instruction: 0x000297bc
   29748:			; <UNDEFINED> instruction: 0x000297bc
   2974c:			; <UNDEFINED> instruction: 0x000297bc
   29750:			; <UNDEFINED> instruction: 0x000297bc
   29754:			; <UNDEFINED> instruction: 0x000297bc
   29758:			; <UNDEFINED> instruction: 0x000297bc
   2975c:			; <UNDEFINED> instruction: 0x000297bc
   29760:			; <UNDEFINED> instruction: 0x000297bc
   29764:			; <UNDEFINED> instruction: 0x000296b4
   29768:	sub	r3, r2, r1
   2976c:	cmp	r3, #1
   29770:	movle	r3, lr
   29774:	ldrbgt	r3, [r1, #1]
   29778:	subgt	r3, r3, #10
   2977c:	clzgt	r3, r3
   29780:	lsrgt	r3, r3, #5
   29784:	add	r1, r1, r3
   29788:	ldr	r3, [r0, #16]
   2978c:	add	r1, r1, #1
   29790:	add	r3, r3, #1
   29794:	str	r1, [r0, #4]
   29798:	str	r3, [r0, #16]
   2979c:	cmp	r2, r1
   297a0:	beq	297c8 <flatcc_json_parser_space_ext@@Base+0x11c>
   297a4:	ldrb	ip, [r1]
   297a8:	cmp	ip, #32
   297ac:	bls	296f8 <flatcc_json_parser_space_ext@@Base+0x4c>
   297b0:	b	296e8 <flatcc_json_parser_space_ext@@Base+0x3c>
   297b4:	add	r1, r1, #1
   297b8:	b	2979c <flatcc_json_parser_space_ext@@Base+0xf0>
   297bc:	ldr	r3, [r0, #24]
   297c0:	cmp	r3, #0
   297c4:	beq	297d4 <flatcc_json_parser_space_ext@@Base+0x128>
   297c8:	mov	r1, r2
   297cc:	mov	r0, r1
   297d0:	pop	{pc}		; (ldr pc, [sp], #4)
   297d4:	ldr	r3, [r0, #4]
   297d8:	str	r1, [r0, #36]	; 0x24
   297dc:	sub	r3, r1, r3
   297e0:	mov	ip, #5
   297e4:	add	r3, r3, #1
   297e8:	mov	r1, r2
   297ec:	str	r3, [r0, #20]
   297f0:	str	ip, [r0, #24]
   297f4:	mov	r0, r1
   297f8:	pop	{pc}		; (ldr pc, [sp], #4)

000297fc <flatcc_json_parser_string_escape@@Base>:
   297fc:	push	{r4, r5, lr}
   29800:	sub	lr, r2, r1
   29804:	cmp	lr, #1
   29808:	mov	ip, r0
   2980c:	ble	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29810:	ldrb	r0, [r1]
   29814:	cmp	r0, #92	; 0x5c
   29818:	beq	2985c <flatcc_json_parser_string_escape@@Base+0x60>
   2981c:	mov	r0, #0
   29820:	strb	r0, [r3]
   29824:	ldr	r3, [ip, #24]
   29828:	cmp	r3, r0
   2982c:	beq	29838 <flatcc_json_parser_string_escape@@Base+0x3c>
   29830:	mov	r0, r2
   29834:	pop	{r4, r5, pc}
   29838:	ldr	r3, [ip, #4]
   2983c:	mov	lr, #18
   29840:	sub	r3, r1, r3
   29844:	add	r3, r3, #1
   29848:	str	r1, [ip, #36]	; 0x24
   2984c:	mov	r0, r2
   29850:	str	r3, [ip, #20]
   29854:	str	lr, [ip, #24]
   29858:	pop	{r4, r5, pc}
   2985c:	ldrb	r0, [r1, #1]
   29860:	sub	r0, r0, #34	; 0x22
   29864:	cmp	r0, #86	; 0x56
   29868:	ldrls	pc, [pc, r0, lsl #2]
   2986c:	b	29be8 <flatcc_json_parser_string_escape@@Base+0x3ec>
   29870:	andeq	r9, r2, r4, asr sl
   29874:	andeq	r9, r2, r8, ror #23
   29878:	andeq	r9, r2, r8, ror #23
   2987c:	andeq	r9, r2, r8, ror #23
   29880:	andeq	r9, r2, r8, ror #23
   29884:	andeq	r9, r2, r8, ror #23
   29888:	andeq	r9, r2, r8, ror #23
   2988c:	andeq	r9, r2, r8, ror #23
   29890:	andeq	r9, r2, r8, ror #23
   29894:	andeq	r9, r2, r8, ror #23
   29898:	andeq	r9, r2, r8, ror #23
   2989c:	andeq	r9, r2, r8, ror #23
   298a0:	andeq	r9, r2, r8, ror #23
   298a4:	andeq	r9, r2, ip, ror #20
   298a8:	andeq	r9, r2, r8, ror #23
   298ac:	andeq	r9, r2, r8, ror #23
   298b0:	andeq	r9, r2, r8, ror #23
   298b4:	andeq	r9, r2, r8, ror #23
   298b8:	andeq	r9, r2, r8, ror #23
   298bc:	andeq	r9, r2, r8, ror #23
   298c0:	andeq	r9, r2, r8, ror #23
   298c4:	andeq	r9, r2, r8, ror #23
   298c8:	andeq	r9, r2, r8, ror #23
   298cc:	andeq	r9, r2, r8, ror #23
   298d0:	andeq	r9, r2, r8, ror #23
   298d4:	andeq	r9, r2, r8, ror #23
   298d8:	andeq	r9, r2, r8, ror #23
   298dc:	andeq	r9, r2, r8, ror #23
   298e0:	andeq	r9, r2, r8, ror #23
   298e4:	andeq	r9, r2, r8, ror #23
   298e8:	andeq	r9, r2, r8, ror #23
   298ec:	andeq	r9, r2, r8, ror #23
   298f0:	andeq	r9, r2, r8, ror #23
   298f4:	andeq	r9, r2, r8, ror #23
   298f8:	andeq	r9, r2, r8, ror #23
   298fc:	andeq	r9, r2, r8, ror #23
   29900:	andeq	r9, r2, r8, ror #23
   29904:	andeq	r9, r2, r8, ror #23
   29908:	andeq	r9, r2, r8, ror #23
   2990c:	andeq	r9, r2, r8, ror #23
   29910:	andeq	r9, r2, r8, ror #23
   29914:	andeq	r9, r2, r8, ror #23
   29918:	andeq	r9, r2, r8, ror #23
   2991c:	andeq	r9, r2, r8, ror #23
   29920:	andeq	r9, r2, r8, ror #23
   29924:	andeq	r9, r2, r8, ror #23
   29928:	andeq	r9, r2, r8, ror #23
   2992c:	andeq	r9, r2, r8, ror #23
   29930:	andeq	r9, r2, r8, ror #23
   29934:	andeq	r9, r2, r8, ror #23
   29938:	andeq	r9, r2, r8, ror #23
   2993c:	andeq	r9, r2, r8, ror #23
   29940:	andeq	r9, r2, r8, ror #23
   29944:	andeq	r9, r2, r8, ror #23
   29948:	andeq	r9, r2, r8, ror #23
   2994c:	andeq	r9, r2, r8, ror #23
   29950:	andeq	r9, r2, r8, ror #23
   29954:	andeq	r9, r2, r8, ror #23
   29958:	andeq	r9, r2, r4, lsl #21
   2995c:	andeq	r9, r2, r8, ror #23
   29960:	andeq	r9, r2, r8, ror #23
   29964:	andeq	r9, r2, r8, ror #23
   29968:	andeq	r9, r2, r8, ror #23
   2996c:	andeq	r9, r2, r8, ror #23
   29970:	muleq	r2, ip, sl
   29974:	andeq	r9, r2, r8, ror #23
   29978:	andeq	r9, r2, r8, ror #23
   2997c:	andeq	r9, r2, r8, ror #23
   29980:			; <UNDEFINED> instruction: 0x00029ab4
   29984:	andeq	r9, r2, r8, ror #23
   29988:	andeq	r9, r2, r8, ror #23
   2998c:	andeq	r9, r2, r8, ror #23
   29990:	andeq	r9, r2, r8, ror #23
   29994:	andeq	r9, r2, r8, ror #23
   29998:	andeq	r9, r2, r8, ror #23
   2999c:	andeq	r9, r2, r8, ror #23
   299a0:	andeq	r9, r2, ip, asr #21
   299a4:	andeq	r9, r2, r8, ror #23
   299a8:	andeq	r9, r2, r8, ror #23
   299ac:	andeq	r9, r2, r8, ror #23
   299b0:	andeq	r9, r2, r4, ror #21
   299b4:	andeq	r9, r2, r8, ror #23
   299b8:	strdeq	r9, [r2], -ip
   299bc:	andeq	r9, r2, r4, lsl fp
   299c0:	andeq	r9, r2, r8, ror #23
   299c4:	andeq	r9, r2, r8, ror #23
   299c8:	andeq	r9, r2, ip, asr #19
   299cc:	mov	r0, #1
   299d0:	cmp	lr, #3
   299d4:	strb	r0, [r3]
   299d8:	ble	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   299dc:	ldrb	r0, [r1, #2]
   299e0:	sub	lr, r0, #48	; 0x30
   299e4:	uxtb	r4, lr
   299e8:	cmp	r4, #9
   299ec:	lslls	r0, lr, #4
   299f0:	uxtbls	r0, r0
   299f4:	bls	29a14 <flatcc_json_parser_string_escape@@Base+0x218>
   299f8:	orr	r0, r0, #32
   299fc:	sub	lr, r0, #97	; 0x61
   29a00:	cmp	lr, #5
   29a04:	bhi	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29a08:	sub	r0, r0, #87	; 0x57
   29a0c:	lsl	r0, r0, #4
   29a10:	uxtb	r0, r0
   29a14:	ldrb	lr, [r1, #3]
   29a18:	sub	r4, lr, #48	; 0x30
   29a1c:	uxtb	r4, r4
   29a20:	cmp	r4, #9
   29a24:	orrls	r0, r4, r0
   29a28:	bls	29a48 <flatcc_json_parser_string_escape@@Base+0x24c>
   29a2c:	orr	lr, lr, #32
   29a30:	sub	r4, lr, #97	; 0x61
   29a34:	cmp	r4, #5
   29a38:	bhi	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29a3c:	sub	lr, lr, #87	; 0x57
   29a40:	orr	r0, lr, r0
   29a44:	uxtb	r0, r0
   29a48:	strb	r0, [r3, #1]
   29a4c:	add	r0, r1, #4
   29a50:	pop	{r4, r5, pc}
   29a54:	mov	ip, #1
   29a58:	mov	r2, #34	; 0x22
   29a5c:	add	r0, r1, #2
   29a60:	strb	ip, [r3]
   29a64:	strb	r2, [r3, #1]
   29a68:	pop	{r4, r5, pc}
   29a6c:	mov	ip, #1
   29a70:	mov	r2, #47	; 0x2f
   29a74:	add	r0, r1, #2
   29a78:	strb	ip, [r3]
   29a7c:	strb	r2, [r3, #1]
   29a80:	pop	{r4, r5, pc}
   29a84:	mov	ip, #1
   29a88:	mov	r2, #92	; 0x5c
   29a8c:	add	r0, r1, #2
   29a90:	strb	ip, [r3]
   29a94:	strb	r2, [r3, #1]
   29a98:	pop	{r4, r5, pc}
   29a9c:	mov	ip, #1
   29aa0:	mov	r2, #8
   29aa4:	add	r0, r1, #2
   29aa8:	strb	ip, [r3]
   29aac:	strb	r2, [r3, #1]
   29ab0:	pop	{r4, r5, pc}
   29ab4:	mov	ip, #1
   29ab8:	mov	r2, #12
   29abc:	add	r0, r1, #2
   29ac0:	strb	ip, [r3]
   29ac4:	strb	r2, [r3, #1]
   29ac8:	pop	{r4, r5, pc}
   29acc:	mov	ip, #1
   29ad0:	mov	r2, #10
   29ad4:	add	r0, r1, #2
   29ad8:	strb	ip, [r3]
   29adc:	strb	r2, [r3, #1]
   29ae0:	pop	{r4, r5, pc}
   29ae4:	mov	ip, #1
   29ae8:	mov	r2, #13
   29aec:	add	r0, r1, #2
   29af0:	strb	ip, [r3]
   29af4:	strb	r2, [r3, #1]
   29af8:	pop	{r4, r5, pc}
   29afc:	mov	ip, #1
   29b00:	mov	r2, #9
   29b04:	add	r0, r1, #2
   29b08:	strb	ip, [r3]
   29b0c:	strb	r2, [r3, #1]
   29b10:	pop	{r4, r5, pc}
   29b14:	cmp	lr, #5
   29b18:	ble	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29b1c:	ldrb	r0, [r1, #2]
   29b20:	sub	lr, r0, #48	; 0x30
   29b24:	uxtb	r4, lr
   29b28:	cmp	r4, #9
   29b2c:	lslls	r0, lr, #12
   29b30:	uxthls	r0, r0
   29b34:	bls	29b54 <flatcc_json_parser_string_escape@@Base+0x358>
   29b38:	orr	r0, r0, #32
   29b3c:	sub	lr, r0, #97	; 0x61
   29b40:	cmp	lr, #5
   29b44:	bhi	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29b48:	sub	r0, r0, #87	; 0x57
   29b4c:	lsl	r0, r0, #12
   29b50:	and	r0, r0, #61440	; 0xf000
   29b54:	ldrb	lr, [r1, #3]
   29b58:	sub	r4, lr, #48	; 0x30
   29b5c:	uxtb	r5, r4
   29b60:	cmp	r5, #9
   29b64:	bhi	29c20 <flatcc_json_parser_string_escape@@Base+0x424>
   29b68:	uxth	r4, r4
   29b6c:	orr	r0, r0, r4, lsl #8
   29b70:	and	r0, r0, #65280	; 0xff00
   29b74:	ldrb	lr, [r1, #4]
   29b78:	sub	r4, lr, #48	; 0x30
   29b7c:	uxtb	r5, r4
   29b80:	cmp	r5, #9
   29b84:	bhi	29c44 <flatcc_json_parser_string_escape@@Base+0x448>
   29b88:	uxth	r4, r4
   29b8c:	orr	r0, r0, r4, lsl #4
   29b90:	uxth	r0, r0
   29b94:	ldrb	lr, [r1, #5]
   29b98:	sub	r4, lr, #48	; 0x30
   29b9c:	uxtb	r5, r4
   29ba0:	cmp	r5, #9
   29ba4:	orrls	r2, r0, r4
   29ba8:	uxthls	r2, r2
   29bac:	bls	29bcc <flatcc_json_parser_string_escape@@Base+0x3d0>
   29bb0:	orr	lr, lr, #32
   29bb4:	sub	r4, lr, #97	; 0x61
   29bb8:	cmp	r4, #5
   29bbc:	bhi	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29bc0:	sub	r2, lr, #87	; 0x57
   29bc4:	orr	r2, r0, r2
   29bc8:	uxth	r2, r2
   29bcc:	cmp	r2, #127	; 0x7f
   29bd0:	bhi	29c68 <flatcc_json_parser_string_escape@@Base+0x46c>
   29bd4:	mov	r0, #1
   29bd8:	strb	r2, [r3, #1]
   29bdc:	strb	r0, [r3]
   29be0:	add	r0, r1, #6
   29be4:	pop	{r4, r5, pc}
   29be8:	mov	r0, #0
   29bec:	strb	r0, [r3]
   29bf0:	ldr	r3, [ip, #24]
   29bf4:	cmp	r3, r0
   29bf8:	bne	29830 <flatcc_json_parser_string_escape@@Base+0x34>
   29bfc:	ldr	r3, [ip, #4]
   29c00:	mov	r0, r2
   29c04:	sub	r3, r1, r3
   29c08:	add	r3, r3, #1
   29c0c:	mov	r2, #18
   29c10:	str	r1, [ip, #36]	; 0x24
   29c14:	str	r3, [ip, #20]
   29c18:	str	r2, [ip, #24]
   29c1c:	pop	{r4, r5, pc}
   29c20:	orr	lr, lr, #32
   29c24:	sub	r4, lr, #97	; 0x61
   29c28:	cmp	r4, #5
   29c2c:	bhi	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29c30:	sub	lr, lr, #87	; 0x57
   29c34:	uxth	lr, lr
   29c38:	orr	r0, r0, lr, lsl #8
   29c3c:	and	r0, r0, #65280	; 0xff00
   29c40:	b	29b74 <flatcc_json_parser_string_escape@@Base+0x378>
   29c44:	orr	lr, lr, #32
   29c48:	sub	r4, lr, #97	; 0x61
   29c4c:	cmp	r4, #5
   29c50:	bhi	2981c <flatcc_json_parser_string_escape@@Base+0x20>
   29c54:	sub	lr, lr, #87	; 0x57
   29c58:	uxth	lr, lr
   29c5c:	orr	r0, r0, lr, lsl #4
   29c60:	uxth	r0, r0
   29c64:	b	29b94 <flatcc_json_parser_string_escape@@Base+0x398>
   29c68:	cmp	r2, #2048	; 0x800
   29c6c:	bcs	29c98 <flatcc_json_parser_string_escape@@Base+0x49c>
   29c70:	and	r0, r2, #63	; 0x3f
   29c74:	mvn	ip, #63	; 0x3f
   29c78:	mvn	r0, r0, lsl #25
   29c7c:	orr	r2, ip, r2, lsr #6
   29c80:	mvn	r0, r0, lsr #25
   29c84:	mov	ip, #2
   29c88:	strb	r0, [r3, #2]
   29c8c:	strb	r2, [r3, #1]
   29c90:	strb	ip, [r3]
   29c94:	b	29be0 <flatcc_json_parser_string_escape@@Base+0x3e4>
   29c98:	lsl	lr, r2, #20
   29c9c:	mvn	r4, #127	; 0x7f
   29ca0:	and	ip, r2, #63	; 0x3f
   29ca4:	mvn	r0, #31
   29ca8:	orr	r2, r0, r2, lsr #12
   29cac:	orr	lr, r4, lr, lsr #26
   29cb0:	orr	ip, ip, r4
   29cb4:	mov	r0, #3
   29cb8:	strb	lr, [r3, #2]
   29cbc:	strb	ip, [r3, #3]
   29cc0:	strb	r2, [r3, #1]
   29cc4:	strb	r0, [r3]
   29cc8:	b	29be0 <flatcc_json_parser_string_escape@@Base+0x3e4>

00029ccc <flatcc_json_parser_skip_constant@@Base>:
   29ccc:	cmp	r1, r2
   29cd0:	beq	29eb0 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   29cd4:	push	{r4, lr}
   29cd8:	mov	r4, r0
   29cdc:	ldrb	r3, [r1]
   29ce0:	b	29cf8 <flatcc_json_parser_skip_constant@@Base+0x2c>
   29ce4:	add	ip, r1, #1
   29ce8:	cmp	r2, ip
   29cec:	beq	29e6c <flatcc_json_parser_skip_constant@@Base+0x1a0>
   29cf0:	ldrb	r3, [r1, #1]
   29cf4:	mov	r1, ip
   29cf8:	sub	ip, r3, #95	; 0x5f
   29cfc:	clz	ip, ip
   29d00:	lsr	ip, ip, #5
   29d04:	orrs	r0, ip, r3, lsr #7
   29d08:	bne	29ce4 <flatcc_json_parser_skip_constant@@Base+0x18>
   29d0c:	sub	ip, r3, #48	; 0x30
   29d10:	cmp	r3, #46	; 0x2e
   29d14:	cmpne	ip, #9
   29d18:	movls	lr, #1
   29d1c:	movhi	lr, #0
   29d20:	bls	29ce4 <flatcc_json_parser_skip_constant@@Base+0x18>
   29d24:	orr	ip, r3, #32
   29d28:	sub	ip, ip, #97	; 0x61
   29d2c:	cmp	ip, #25
   29d30:	bls	29ce4 <flatcc_json_parser_skip_constant@@Base+0x18>
   29d34:	sub	r0, r2, r1
   29d38:	cmp	r0, #1
   29d3c:	ble	29d4c <flatcc_json_parser_skip_constant@@Base+0x80>
   29d40:	cmp	r3, #32
   29d44:	bhi	29e74 <flatcc_json_parser_skip_constant@@Base+0x1a8>
   29d48:	beq	29e7c <flatcc_json_parser_skip_constant@@Base+0x1b0>
   29d4c:	mov	r0, r1
   29d50:	cmp	r2, r0
   29d54:	popeq	{r4, pc}
   29d58:	ldrb	r3, [r0]
   29d5c:	cmp	r3, #32
   29d60:	bne	29d80 <flatcc_json_parser_skip_constant@@Base+0xb4>
   29d64:	add	ip, r0, #1
   29d68:	cmp	ip, r2
   29d6c:	mov	r0, ip
   29d70:	popeq	{r4, pc}
   29d74:	ldrb	r3, [ip], #1
   29d78:	cmp	r3, #32
   29d7c:	beq	29d68 <flatcc_json_parser_skip_constant@@Base+0x9c>
   29d80:	cmp	r3, #32
   29d84:	bhi	29e40 <flatcc_json_parser_skip_constant@@Base+0x174>
   29d88:	sub	r3, r3, #9
   29d8c:	cmp	r3, #23
   29d90:	ldrls	pc, [pc, r3, lsl #2]
   29d94:	b	29e60 <flatcc_json_parser_skip_constant@@Base+0x194>
   29d98:	andeq	r9, r2, r0, asr lr
   29d9c:	andeq	r9, r2, r8, lsl lr
   29da0:	andeq	r9, r2, r0, ror #28
   29da4:	andeq	r9, r2, r0, ror #28
   29da8:	strdeq	r9, [r2], -r8
   29dac:	andeq	r9, r2, r0, ror #28
   29db0:	andeq	r9, r2, r0, ror #28
   29db4:	andeq	r9, r2, r0, ror #28
   29db8:	andeq	r9, r2, r0, ror #28
   29dbc:	andeq	r9, r2, r0, ror #28
   29dc0:	andeq	r9, r2, r0, ror #28
   29dc4:	andeq	r9, r2, r0, ror #28
   29dc8:	andeq	r9, r2, r0, ror #28
   29dcc:	andeq	r9, r2, r0, ror #28
   29dd0:	andeq	r9, r2, r0, ror #28
   29dd4:	andeq	r9, r2, r0, ror #28
   29dd8:	andeq	r9, r2, r0, ror #28
   29ddc:	andeq	r9, r2, r0, ror #28
   29de0:	andeq	r9, r2, r0, ror #28
   29de4:	andeq	r9, r2, r0, ror #28
   29de8:	andeq	r9, r2, r0, ror #28
   29dec:	andeq	r9, r2, r0, ror #28
   29df0:	andeq	r9, r2, r0, ror #28
   29df4:	andeq	r9, r2, r0, asr sp
   29df8:	sub	r3, r2, r0
   29dfc:	cmp	r3, #1
   29e00:	movle	r3, lr
   29e04:	ldrbgt	r3, [r0, #1]
   29e08:	subgt	r3, r3, #10
   29e0c:	clzgt	r3, r3
   29e10:	lsrgt	r3, r3, #5
   29e14:	add	r0, r0, r3
   29e18:	ldr	r3, [r4, #16]
   29e1c:	add	r0, r0, #1
   29e20:	cmp	r2, r0
   29e24:	add	r3, r3, #1
   29e28:	str	r0, [r4, #4]
   29e2c:	str	r3, [r4, #16]
   29e30:	popeq	{r4, pc}
   29e34:	ldrb	r3, [r0]
   29e38:	cmp	r3, #32
   29e3c:	bls	29d88 <flatcc_json_parser_skip_constant@@Base+0xbc>
   29e40:	cmp	r0, r1
   29e44:	popeq	{r4, pc}
   29e48:	mov	r1, r0
   29e4c:	b	29cf8 <flatcc_json_parser_skip_constant@@Base+0x2c>
   29e50:	add	r0, r0, #1
   29e54:	cmp	r2, r0
   29e58:	bne	29e34 <flatcc_json_parser_skip_constant@@Base+0x168>
   29e5c:	pop	{r4, pc}
   29e60:	ldr	r3, [r4, #24]
   29e64:	cmp	r3, #0
   29e68:	beq	29e8c <flatcc_json_parser_skip_constant@@Base+0x1c0>
   29e6c:	mov	r0, r2
   29e70:	pop	{r4, pc}
   29e74:	mov	r0, r1
   29e78:	pop	{r4, pc}
   29e7c:	ldrb	r3, [r1, #1]
   29e80:	cmp	r3, #32
   29e84:	bls	29d4c <flatcc_json_parser_skip_constant@@Base+0x80>
   29e88:	b	29ce4 <flatcc_json_parser_skip_constant@@Base+0x18>
   29e8c:	ldr	r3, [r4, #4]
   29e90:	mov	r1, #5
   29e94:	sub	r3, r0, r3
   29e98:	add	r3, r3, #1
   29e9c:	str	r0, [r4, #36]	; 0x24
   29ea0:	str	r3, [r4, #20]
   29ea4:	mov	r0, r2
   29ea8:	str	r1, [r4, #24]
   29eac:	pop	{r4, pc}
   29eb0:	mov	r0, r1
   29eb4:	bx	lr

00029eb8 <flatcc_json_parser_match_constant@@Base>:
   29eb8:	sub	ip, r2, r1
   29ebc:	push	{r4, r5, r6, lr}
   29ec0:	cmp	r3, ip
   29ec4:	ldr	r4, [sp, #16]
   29ec8:	bge	29f18 <flatcc_json_parser_match_constant@@Base+0x60>
   29ecc:	ldr	ip, [r0, #12]
   29ed0:	add	r5, r1, r3
   29ed4:	cmp	ip, #0
   29ed8:	bne	29f2c <flatcc_json_parser_match_constant@@Base+0x74>
   29edc:	ldrb	r3, [r1, r3]
   29ee0:	cmp	r3, #32
   29ee4:	beq	2a0cc <flatcc_json_parser_match_constant@@Base+0x214>
   29ee8:	cmp	r3, #34	; 0x22
   29eec:	beq	2a114 <flatcc_json_parser_match_constant@@Base+0x25c>
   29ef0:	cmp	r3, #92	; 0x5c
   29ef4:	str	ip, [r4]
   29ef8:	movne	r3, r1
   29efc:	bne	29f10 <flatcc_json_parser_match_constant@@Base+0x58>
   29f00:	ldr	r3, [r0, #24]
   29f04:	cmp	r3, #0
   29f08:	movne	r3, r2
   29f0c:	beq	2a29c <flatcc_json_parser_match_constant@@Base+0x3e4>
   29f10:	mov	r0, r3
   29f14:	pop	{r4, r5, r6, pc}
   29f18:	mov	r2, #0
   29f1c:	mov	r3, r1
   29f20:	str	r2, [r4]
   29f24:	mov	r0, r3
   29f28:	pop	{r4, r5, r6, pc}
   29f2c:	sub	ip, r2, r5
   29f30:	cmp	ip, #1
   29f34:	ble	29f48 <flatcc_json_parser_match_constant@@Base+0x90>
   29f38:	ldrb	r3, [r1, r3]
   29f3c:	cmp	r3, #32
   29f40:	bhi	2a28c <flatcc_json_parser_match_constant@@Base+0x3d4>
   29f44:	beq	2a068 <flatcc_json_parser_match_constant@@Base+0x1b0>
   29f48:	mov	r3, r5
   29f4c:	mov	r6, #0
   29f50:	cmp	r2, r3
   29f54:	beq	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   29f58:	ldrb	lr, [r3]
   29f5c:	cmp	lr, #32
   29f60:	bne	29fd4 <flatcc_json_parser_match_constant@@Base+0x11c>
   29f64:	add	ip, r3, #1
   29f68:	b	29f78 <flatcc_json_parser_match_constant@@Base+0xc0>
   29f6c:	ldrb	lr, [ip], #1
   29f70:	cmp	lr, #32
   29f74:	bne	29fd4 <flatcc_json_parser_match_constant@@Base+0x11c>
   29f78:	cmp	ip, r2
   29f7c:	mov	r3, ip
   29f80:	bne	29f6c <flatcc_json_parser_match_constant@@Base+0xb4>
   29f84:	mov	r2, #0
   29f88:	str	r2, [r4]
   29f8c:	mov	r0, r3
   29f90:	pop	{r4, r5, r6, pc}
   29f94:	sub	ip, r2, r3
   29f98:	cmp	ip, #1
   29f9c:	movle	ip, r6
   29fa0:	ldrbgt	ip, [r3, #1]
   29fa4:	subgt	ip, ip, #10
   29fa8:	clzgt	ip, ip
   29fac:	lsrgt	ip, ip, #5
   29fb0:	add	r3, r3, ip
   29fb4:	ldr	ip, [r0, #16]
   29fb8:	add	r3, r3, #1
   29fbc:	add	ip, ip, #1
   29fc0:	str	r3, [r0, #4]
   29fc4:	str	ip, [r0, #16]
   29fc8:	cmp	r2, r3
   29fcc:	beq	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   29fd0:	ldrb	lr, [r3]
   29fd4:	cmp	lr, #32
   29fd8:	bhi	2a080 <flatcc_json_parser_match_constant@@Base+0x1c8>
   29fdc:	sub	lr, lr, #9
   29fe0:	cmp	lr, #23
   29fe4:	ldrls	pc, [pc, lr, lsl #2]
   29fe8:	b	2a054 <flatcc_json_parser_match_constant@@Base+0x19c>
   29fec:	andeq	sl, r2, ip, asr #32
   29ff0:			; <UNDEFINED> instruction: 0x00029fb4
   29ff4:	andeq	sl, r2, r4, asr r0
   29ff8:	andeq	sl, r2, r4, asr r0
   29ffc:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   2a000:	andeq	sl, r2, r4, asr r0
   2a004:	andeq	sl, r2, r4, asr r0
   2a008:	andeq	sl, r2, r4, asr r0
   2a00c:	andeq	sl, r2, r4, asr r0
   2a010:	andeq	sl, r2, r4, asr r0
   2a014:	andeq	sl, r2, r4, asr r0
   2a018:	andeq	sl, r2, r4, asr r0
   2a01c:	andeq	sl, r2, r4, asr r0
   2a020:	andeq	sl, r2, r4, asr r0
   2a024:	andeq	sl, r2, r4, asr r0
   2a028:	andeq	sl, r2, r4, asr r0
   2a02c:	andeq	sl, r2, r4, asr r0
   2a030:	andeq	sl, r2, r4, asr r0
   2a034:	andeq	sl, r2, r4, asr r0
   2a038:	andeq	sl, r2, r4, asr r0
   2a03c:	andeq	sl, r2, r4, asr r0
   2a040:	andeq	sl, r2, r4, asr r0
   2a044:	andeq	sl, r2, r4, asr r0
   2a048:	andeq	r9, r2, r0, asr pc
   2a04c:	add	r3, r3, #1
   2a050:	b	29fc8 <flatcc_json_parser_match_constant@@Base+0x110>
   2a054:	ldr	r1, [r0, #24]
   2a058:	cmp	r1, #0
   2a05c:	beq	2a240 <flatcc_json_parser_match_constant@@Base+0x388>
   2a060:	mov	r3, r2
   2a064:	b	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   2a068:	ldrb	lr, [r5, #1]
   2a06c:	cmp	lr, #32
   2a070:	bls	29f48 <flatcc_json_parser_match_constant@@Base+0x90>
   2a074:	add	r3, r5, #1
   2a078:	cmp	r2, r3
   2a07c:	beq	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   2a080:	cmp	r5, r3
   2a084:	beq	2a0ac <flatcc_json_parser_match_constant@@Base+0x1f4>
   2a088:	sub	r2, lr, #95	; 0x5f
   2a08c:	clz	r2, r2
   2a090:	lsr	r2, r2, #5
   2a094:	orrs	r2, r2, lr, lsr #7
   2a098:	bne	2a280 <flatcc_json_parser_match_constant@@Base+0x3c8>
   2a09c:	orr	lr, lr, #32
   2a0a0:	sub	lr, lr, #97	; 0x61
   2a0a4:	cmp	lr, #25
   2a0a8:	bls	2a280 <flatcc_json_parser_match_constant@@Base+0x3c8>
   2a0ac:	mov	r2, #0
   2a0b0:	str	r2, [r4]
   2a0b4:	ldrb	r2, [r3]
   2a0b8:	and	r0, r2, #223	; 0xdf
   2a0bc:	cmp	r2, #44	; 0x2c
   2a0c0:	cmpne	r0, #93	; 0x5d
   2a0c4:	movne	r3, r1
   2a0c8:	b	29f10 <flatcc_json_parser_match_constant@@Base+0x58>
   2a0cc:	add	r3, r5, #1
   2a0d0:	cmp	r2, r3
   2a0d4:	beq	2a2d4 <flatcc_json_parser_match_constant@@Base+0x41c>
   2a0d8:	ldrb	r1, [r5, #1]
   2a0dc:	cmp	r1, #32
   2a0e0:	bne	2a264 <flatcc_json_parser_match_constant@@Base+0x3ac>
   2a0e4:	add	r3, r5, #2
   2a0e8:	b	2a0f8 <flatcc_json_parser_match_constant@@Base+0x240>
   2a0ec:	ldrb	r1, [r3], #1
   2a0f0:	cmp	r1, #32
   2a0f4:	bne	2a268 <flatcc_json_parser_match_constant@@Base+0x3b0>
   2a0f8:	cmp	r2, r3
   2a0fc:	mov	r5, r3
   2a100:	bne	2a0ec <flatcc_json_parser_match_constant@@Base+0x234>
   2a104:	mov	r2, #0
   2a108:	mov	r3, r5
   2a10c:	str	r2, [r4]
   2a110:	b	29f10 <flatcc_json_parser_match_constant@@Base+0x58>
   2a114:	add	r3, r5, #1
   2a118:	cmn	r3, #1
   2a11c:	bge	2a130 <flatcc_json_parser_match_constant@@Base+0x278>
   2a120:	ldrb	r2, [r5, #1]
   2a124:	cmp	r2, #32
   2a128:	bhi	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   2a12c:	beq	2a2c0 <flatcc_json_parser_match_constant@@Base+0x408>
   2a130:	mov	ip, #0
   2a134:	cmp	r3, #0
   2a138:	beq	2a168 <flatcc_json_parser_match_constant@@Base+0x2b0>
   2a13c:	ldrb	r1, [r3]
   2a140:	cmp	r1, #32
   2a144:	bne	2a1b4 <flatcc_json_parser_match_constant@@Base+0x2fc>
   2a148:	add	r2, r3, #1
   2a14c:	b	2a15c <flatcc_json_parser_match_constant@@Base+0x2a4>
   2a150:	ldrb	r1, [r2], #1
   2a154:	cmp	r1, #32
   2a158:	bne	2a1b4 <flatcc_json_parser_match_constant@@Base+0x2fc>
   2a15c:	cmp	r2, #0
   2a160:	mov	r3, r2
   2a164:	bne	2a150 <flatcc_json_parser_match_constant@@Base+0x298>
   2a168:	mov	r2, #0
   2a16c:	mov	r3, #0
   2a170:	str	r2, [r4]
   2a174:	b	29f8c <flatcc_json_parser_match_constant@@Base+0xd4>
   2a178:	cmn	r3, #1
   2a17c:	movge	r2, ip
   2a180:	ldrblt	r2, [r3, #1]
   2a184:	sublt	r2, r2, #10
   2a188:	clzlt	r2, r2
   2a18c:	lsrlt	r2, r2, #5
   2a190:	add	r3, r3, r2
   2a194:	ldr	r2, [r0, #16]
   2a198:	add	r3, r3, #1
   2a19c:	add	r2, r2, #1
   2a1a0:	str	r3, [r0, #4]
   2a1a4:	str	r2, [r0, #16]
   2a1a8:	cmp	r3, #0
   2a1ac:	beq	2a168 <flatcc_json_parser_match_constant@@Base+0x2b0>
   2a1b0:	ldrb	r1, [r3]
   2a1b4:	cmp	r1, #32
   2a1b8:	bhi	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   2a1bc:	sub	r1, r1, #9
   2a1c0:	cmp	r1, #23
   2a1c4:	ldrls	pc, [pc, r1, lsl #2]
   2a1c8:	b	2a234 <flatcc_json_parser_match_constant@@Base+0x37c>
   2a1cc:	andeq	sl, r2, ip, lsr #4
   2a1d0:	muleq	r2, r4, r1
   2a1d4:	andeq	sl, r2, r4, lsr r2
   2a1d8:	andeq	sl, r2, r4, lsr r2
   2a1dc:	andeq	sl, r2, r8, ror r1
   2a1e0:	andeq	sl, r2, r4, lsr r2
   2a1e4:	andeq	sl, r2, r4, lsr r2
   2a1e8:	andeq	sl, r2, r4, lsr r2
   2a1ec:	andeq	sl, r2, r4, lsr r2
   2a1f0:	andeq	sl, r2, r4, lsr r2
   2a1f4:	andeq	sl, r2, r4, lsr r2
   2a1f8:	andeq	sl, r2, r4, lsr r2
   2a1fc:	andeq	sl, r2, r4, lsr r2
   2a200:	andeq	sl, r2, r4, lsr r2
   2a204:	andeq	sl, r2, r4, lsr r2
   2a208:	andeq	sl, r2, r4, lsr r2
   2a20c:	andeq	sl, r2, r4, lsr r2
   2a210:	andeq	sl, r2, r4, lsr r2
   2a214:	andeq	sl, r2, r4, lsr r2
   2a218:	andeq	sl, r2, r4, lsr r2
   2a21c:	andeq	sl, r2, r4, lsr r2
   2a220:	andeq	sl, r2, r4, lsr r2
   2a224:	andeq	sl, r2, r4, lsr r2
   2a228:	andeq	sl, r2, r4, lsr r1
   2a22c:	add	r3, r3, #1
   2a230:	b	2a1a8 <flatcc_json_parser_match_constant@@Base+0x2f0>
   2a234:	ldr	r2, [r0, #24]
   2a238:	cmp	r2, #0
   2a23c:	bne	2a168 <flatcc_json_parser_match_constant@@Base+0x2b0>
   2a240:	ldr	r1, [r0, #4]
   2a244:	mov	ip, #5
   2a248:	sub	r1, r3, r1
   2a24c:	add	r1, r1, #1
   2a250:	str	r3, [r0, #36]	; 0x24
   2a254:	str	r1, [r0, #20]
   2a258:	mov	r3, r2
   2a25c:	str	ip, [r0, #24]
   2a260:	b	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   2a264:	mov	r5, r3
   2a268:	cmp	r1, #34	; 0x22
   2a26c:	beq	2a114 <flatcc_json_parser_match_constant@@Base+0x25c>
   2a270:	mov	r2, #1
   2a274:	mov	r3, r5
   2a278:	str	r2, [r4]
   2a27c:	b	29f10 <flatcc_json_parser_match_constant@@Base+0x58>
   2a280:	mov	r2, #1
   2a284:	str	r2, [r4]
   2a288:	b	29f10 <flatcc_json_parser_match_constant@@Base+0x58>
   2a28c:	cmp	r5, r2
   2a290:	movne	r3, r5
   2a294:	beq	2a060 <flatcc_json_parser_match_constant@@Base+0x1a8>
   2a298:	b	2a0ac <flatcc_json_parser_match_constant@@Base+0x1f4>
   2a29c:	ldr	r1, [r0, #4]
   2a2a0:	mov	ip, #18
   2a2a4:	sub	r1, r5, r1
   2a2a8:	add	r1, r1, #1
   2a2ac:	str	r5, [r0, #36]	; 0x24
   2a2b0:	mov	r3, r2
   2a2b4:	str	r1, [r0, #20]
   2a2b8:	str	ip, [r0, #24]
   2a2bc:	b	29f10 <flatcc_json_parser_match_constant@@Base+0x58>
   2a2c0:	ldrb	r2, [r5, #2]
   2a2c4:	cmp	r2, #32
   2a2c8:	addhi	r3, r5, #2
   2a2cc:	bls	2a130 <flatcc_json_parser_match_constant@@Base+0x278>
   2a2d0:	b	29f84 <flatcc_json_parser_match_constant@@Base+0xcc>
   2a2d4:	mov	r5, r2
   2a2d8:	b	2a104 <flatcc_json_parser_match_constant@@Base+0x24c>

0002a2dc <flatcc_json_parser_double@@Base>:
   2a2dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a2e0:	mov	r8, #0
   2a2e4:	mov	r9, #0
   2a2e8:	cmp	r1, r2
   2a2ec:	mov	r5, r2
   2a2f0:	strd	r8, [r3]
   2a2f4:	beq	2a3b8 <flatcc_json_parser_double@@Base+0xdc>
   2a2f8:	mov	r6, r3
   2a2fc:	ldrb	r3, [r1]
   2a300:	mov	r4, r1
   2a304:	mov	r7, r0
   2a308:	cmp	r3, #45	; 0x2d
   2a30c:	addeq	r3, r1, #1
   2a310:	movne	r3, r1
   2a314:	sub	r2, r2, r3
   2a318:	cmp	r2, #1
   2a31c:	ble	2a334 <flatcc_json_parser_double@@Base+0x58>
   2a320:	ldrb	r2, [r3]
   2a324:	cmp	r2, #46	; 0x2e
   2a328:	beq	2a3ac <flatcc_json_parser_double@@Base+0xd0>
   2a32c:	cmp	r2, #48	; 0x30
   2a330:	beq	2a3a0 <flatcc_json_parser_double@@Base+0xc4>
   2a334:	mov	r2, r6
   2a338:	sub	r1, r5, r4
   2a33c:	mov	r0, r4
   2a340:	bl	28b8c <grisu3_diy_fp_encode_double@@Base+0x590>
   2a344:	cmp	r4, r0
   2a348:	cmpne	r0, #0
   2a34c:	mov	r3, r0
   2a350:	bne	2a398 <flatcc_json_parser_double@@Base+0xbc>
   2a354:	vldr	d7, [r6]
   2a358:	vldr	d6, [pc, #112]	; 2a3d0 <flatcc_json_parser_double@@Base+0xf4>
   2a35c:	vabs.f64	d7, d7
   2a360:	vcmp.f64	d7, d6
   2a364:	vmrs	APSR_nzcv, fpscr
   2a368:	ble	2a3ac <flatcc_json_parser_double@@Base+0xd0>
   2a36c:	ldr	r3, [r7, #24]
   2a370:	cmp	r3, #0
   2a374:	bne	2a3b8 <flatcc_json_parser_double@@Base+0xdc>
   2a378:	ldr	r2, [r7, #4]
   2a37c:	mov	r1, #7
   2a380:	sub	r2, r4, r2
   2a384:	mov	r3, r5
   2a388:	add	r2, r2, #1
   2a38c:	str	r4, [r7, #36]	; 0x24
   2a390:	str	r2, [r7, #20]
   2a394:	str	r1, [r7, #24]
   2a398:	mov	r0, r3
   2a39c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a3a0:	ldrb	r3, [r3, #1]
   2a3a4:	cmp	r3, #48	; 0x30
   2a3a8:	bne	2a334 <flatcc_json_parser_double@@Base+0x58>
   2a3ac:	ldr	r3, [r7, #24]
   2a3b0:	cmp	r3, #0
   2a3b4:	beq	2a3c4 <flatcc_json_parser_double@@Base+0xe8>
   2a3b8:	mov	r3, r5
   2a3bc:	mov	r0, r3
   2a3c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a3c4:	ldr	r2, [r7, #4]
   2a3c8:	mov	r1, #6
   2a3cc:	b	2a380 <flatcc_json_parser_double@@Base+0xa4>
   2a3d0:			; <UNDEFINED> instruction: 0xffffffff
   2a3d4:	svcvc	0x00efffff

0002a3d8 <flatcc_json_parser_float@@Base>:
   2a3d8:	mov	ip, #0
   2a3dc:	cmp	r1, r2
   2a3e0:	push	{r4, r5, r6, r7, lr}
   2a3e4:	mov	r5, r2
   2a3e8:	sub	sp, sp, #12
   2a3ec:	str	ip, [r3]
   2a3f0:	beq	2a484 <flatcc_json_parser_float@@Base+0xac>
   2a3f4:	mov	r6, r3
   2a3f8:	ldrb	r3, [r1]
   2a3fc:	mov	r4, r1
   2a400:	mov	r7, r0
   2a404:	cmp	r3, #45	; 0x2d
   2a408:	addeq	r3, r1, #1
   2a40c:	movne	r3, r1
   2a410:	sub	r2, r2, r3
   2a414:	cmp	r2, #1
   2a418:	ble	2a430 <flatcc_json_parser_float@@Base+0x58>
   2a41c:	ldrb	r2, [r3]
   2a420:	cmp	r2, #46	; 0x2e
   2a424:	beq	2a49c <flatcc_json_parser_float@@Base+0xc4>
   2a428:	cmp	r2, #48	; 0x30
   2a42c:	beq	2a4d0 <flatcc_json_parser_float@@Base+0xf8>
   2a430:	mov	r2, sp
   2a434:	sub	r1, r5, r4
   2a438:	mov	r0, r4
   2a43c:	bl	28b8c <grisu3_diy_fp_encode_double@@Base+0x590>
   2a440:	vldr	d6, [sp]
   2a444:	vldr	s14, [pc, #160]	; 2a4ec <flatcc_json_parser_float@@Base+0x114>
   2a448:	vcvt.f32.f64	s15, d6
   2a44c:	vabs.f32	s11, s15
   2a450:	vstr	s15, [r6]
   2a454:	vcmp.f32	s11, s14
   2a458:	vmrs	APSR_nzcv, fpscr
   2a45c:	ble	2a490 <flatcc_json_parser_float@@Base+0xb8>
   2a460:	vcmpe.f64	d6, #0.0
   2a464:	vldr	s15, [pc, #132]	; 2a4f0 <flatcc_json_parser_float@@Base+0x118>
   2a468:	vldr	s14, [pc, #132]	; 2a4f4 <flatcc_json_parser_float@@Base+0x11c>
   2a46c:	ldr	r3, [r7, #24]
   2a470:	vmrs	APSR_nzcv, fpscr
   2a474:	vmovpl.f32	s15, s14
   2a478:	cmp	r3, #0
   2a47c:	vstr	s15, [r6]
   2a480:	beq	2a4e0 <flatcc_json_parser_float@@Base+0x108>
   2a484:	mov	r0, r5
   2a488:	add	sp, sp, #12
   2a48c:	pop	{r4, r5, r6, r7, pc}
   2a490:	cmp	r4, r0
   2a494:	cmpne	r0, #0
   2a498:	bne	2a488 <flatcc_json_parser_float@@Base+0xb0>
   2a49c:	ldr	r3, [r7, #24]
   2a4a0:	cmp	r3, #0
   2a4a4:	bne	2a484 <flatcc_json_parser_float@@Base+0xac>
   2a4a8:	ldr	r3, [r7, #4]
   2a4ac:	mov	r2, #6
   2a4b0:	sub	r3, r4, r3
   2a4b4:	add	r3, r3, #1
   2a4b8:	mov	r0, r5
   2a4bc:	str	r4, [r7, #36]	; 0x24
   2a4c0:	str	r3, [r7, #20]
   2a4c4:	str	r2, [r7, #24]
   2a4c8:	add	sp, sp, #12
   2a4cc:	pop	{r4, r5, r6, r7, pc}
   2a4d0:	ldrb	r3, [r3, #1]
   2a4d4:	cmp	r3, #48	; 0x30
   2a4d8:	bne	2a430 <flatcc_json_parser_float@@Base+0x58>
   2a4dc:	b	2a49c <flatcc_json_parser_float@@Base+0xc4>
   2a4e0:	ldr	r3, [r7, #4]
   2a4e4:	mov	r2, #7
   2a4e8:	b	2a4b0 <flatcc_json_parser_float@@Base+0xd8>
   2a4ec:	svcvc	0x007fffff
   2a4f0:			; <UNDEFINED> instruction: 0xff800000
   2a4f4:	svcvc	0x00800000

0002a4f8 <flatcc_json_parser_generic_json@@Base>:
   2a4f8:	cmp	r1, r2
   2a4fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a500:	mov	r4, r2
   2a504:	sub	sp, sp, #532	; 0x214
   2a508:	beq	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2a50c:	ldrb	r2, [r1]
   2a510:	add	r7, sp, #16
   2a514:	mov	r3, r1
   2a518:	mov	r5, r0
   2a51c:	mov	r6, r7
   2a520:	mov	fp, #125	; 0x7d
   2a524:	mov	r8, #0
   2a528:	mov	sl, #93	; 0x5d
   2a52c:	mov	r9, #17
   2a530:	cmp	r6, r7
   2a534:	beq	2a634 <flatcc_json_parser_generic_json@@Base+0x13c>
   2a538:	ldrb	r1, [r6, #-1]
   2a53c:	cmp	r1, #125	; 0x7d
   2a540:	beq	2b1f8 <flatcc_json_parser_generic_json@@Base+0xd00>
   2a544:	cmp	r2, #57	; 0x39
   2a548:	bls	2a63c <flatcc_json_parser_generic_json@@Base+0x144>
   2a54c:	cmp	r2, #91	; 0x5b
   2a550:	beq	2a70c <flatcc_json_parser_generic_json@@Base+0x214>
   2a554:	cmp	r2, #123	; 0x7b
   2a558:	bne	2a8d0 <flatcc_json_parser_generic_json@@Base+0x3d8>
   2a55c:	add	r2, sp, #528	; 0x210
   2a560:	cmp	r6, r2
   2a564:	beq	2bcd4 <flatcc_json_parser_generic_json@@Base+0x17dc>
   2a568:	add	r0, r3, #1
   2a56c:	sub	r2, r4, r0
   2a570:	cmp	r2, #1
   2a574:	strb	fp, [r6]
   2a578:	ble	2a58c <flatcc_json_parser_generic_json@@Base+0x94>
   2a57c:	ldrb	r2, [r3, #1]
   2a580:	cmp	r2, #32
   2a584:	bhi	2b4e8 <flatcc_json_parser_generic_json@@Base+0xff0>
   2a588:	beq	2b4d8 <flatcc_json_parser_generic_json@@Base+0xfe0>
   2a58c:	cmp	r4, r0
   2a590:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a594:	ldrb	r2, [r0]
   2a598:	cmp	r2, #32
   2a59c:	bne	2a5bc <flatcc_json_parser_generic_json@@Base+0xc4>
   2a5a0:	add	r3, r0, #1
   2a5a4:	cmp	r3, r4
   2a5a8:	mov	r0, r3
   2a5ac:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a5b0:	ldrb	r2, [r3], #1
   2a5b4:	cmp	r2, #32
   2a5b8:	beq	2a5a4 <flatcc_json_parser_generic_json@@Base+0xac>
   2a5bc:	cmp	r2, #32
   2a5c0:	bhi	2bdec <flatcc_json_parser_generic_json@@Base+0x18f4>
   2a5c4:	sub	r2, r2, #9
   2a5c8:	cmp	r2, #23
   2a5cc:	ldrls	pc, [pc, r2, lsl #2]
   2a5d0:	b	2a87c <flatcc_json_parser_generic_json@@Base+0x384>
   2a5d4:	muleq	r2, ip, r3
   2a5d8:	andeq	sl, r2, r0, asr r8
   2a5dc:	andeq	sl, r2, ip, ror r8
   2a5e0:	andeq	sl, r2, ip, ror r8
   2a5e4:	andeq	sl, r2, r0, lsr r8
   2a5e8:	andeq	sl, r2, ip, ror r8
   2a5ec:	andeq	sl, r2, ip, ror r8
   2a5f0:	andeq	sl, r2, ip, ror r8
   2a5f4:	andeq	sl, r2, ip, ror r8
   2a5f8:	andeq	sl, r2, ip, ror r8
   2a5fc:	andeq	sl, r2, ip, ror r8
   2a600:	andeq	sl, r2, ip, ror r8
   2a604:	andeq	sl, r2, ip, ror r8
   2a608:	andeq	sl, r2, ip, ror r8
   2a60c:	andeq	sl, r2, ip, ror r8
   2a610:	andeq	sl, r2, ip, ror r8
   2a614:	andeq	sl, r2, ip, ror r8
   2a618:	andeq	sl, r2, ip, ror r8
   2a61c:	andeq	sl, r2, ip, ror r8
   2a620:	andeq	sl, r2, ip, ror r8
   2a624:	andeq	sl, r2, ip, ror r8
   2a628:	andeq	sl, r2, ip, ror r8
   2a62c:	andeq	sl, r2, ip, ror r8
   2a630:	andeq	sl, r2, ip, lsl #11
   2a634:	cmp	r2, #57	; 0x39
   2a638:	bhi	2b3ac <flatcc_json_parser_generic_json@@Base+0xeb4>
   2a63c:	cmp	r2, #48	; 0x30
   2a640:	bcs	2a654 <flatcc_json_parser_generic_json@@Base+0x15c>
   2a644:	cmp	r2, #34	; 0x22
   2a648:	beq	2b2f0 <flatcc_json_parser_generic_json@@Base+0xdf8>
   2a64c:	cmp	r2, #45	; 0x2d
   2a650:	bne	2a8d0 <flatcc_json_parser_generic_json@@Base+0x3d8>
   2a654:	cmp	r4, r3
   2a658:	beq	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2a65c:	cmp	r2, #45	; 0x2d
   2a660:	beq	2b884 <flatcc_json_parser_generic_json@@Base+0x138c>
   2a664:	cmp	r2, #48	; 0x30
   2a668:	beq	2b414 <flatcc_json_parser_generic_json@@Base+0xf1c>
   2a66c:	sub	r2, r2, #49	; 0x31
   2a670:	uxtb	r2, r2
   2a674:	cmp	r2, #8
   2a678:	bhi	2b464 <flatcc_json_parser_generic_json@@Base+0xf6c>
   2a67c:	add	r0, r3, #1
   2a680:	cmp	r4, r0
   2a684:	beq	2be14 <flatcc_json_parser_generic_json@@Base+0x191c>
   2a688:	ldrb	r2, [r3, #1]
   2a68c:	sub	r1, r2, #48	; 0x30
   2a690:	cmp	r1, #9
   2a694:	bhi	2b424 <flatcc_json_parser_generic_json@@Base+0xf2c>
   2a698:	add	r3, r3, #2
   2a69c:	b	2a6b0 <flatcc_json_parser_generic_json@@Base+0x1b8>
   2a6a0:	ldrb	r2, [r3], #1
   2a6a4:	sub	r1, r2, #48	; 0x30
   2a6a8:	cmp	r1, #9
   2a6ac:	bhi	2b424 <flatcc_json_parser_generic_json@@Base+0xf2c>
   2a6b0:	cmp	r3, r4
   2a6b4:	mov	r0, r3
   2a6b8:	bne	2a6a0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2a6bc:	ldr	r3, [r5, #24]
   2a6c0:	cmp	r3, #0
   2a6c4:	beq	2bbb0 <flatcc_json_parser_generic_json@@Base+0x16b8>
   2a6c8:	mov	r1, r6
   2a6cc:	mov	r0, r4
   2a6d0:	cmp	r1, r7
   2a6d4:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a6d8:	ldrb	r2, [r1, #-1]
   2a6dc:	ldr	r3, [r5, #24]
   2a6e0:	cmp	r2, #93	; 0x5d
   2a6e4:	movne	r2, #10
   2a6e8:	moveq	r2, #9
   2a6ec:	cmp	r3, #0
   2a6f0:	beq	2b490 <flatcc_json_parser_generic_json@@Base+0xf98>
   2a6f4:	mov	r0, r4
   2a6f8:	add	sp, sp, #532	; 0x214
   2a6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a700:	cmp	r2, #91	; 0x5b
   2a704:	bne	2bbd0 <flatcc_json_parser_generic_json@@Base+0x16d8>
   2a708:	mov	r3, r4
   2a70c:	add	r2, sp, #528	; 0x210
   2a710:	cmp	r6, r2
   2a714:	beq	2bcd4 <flatcc_json_parser_generic_json@@Base+0x17dc>
   2a718:	add	r0, r3, #1
   2a71c:	sub	r2, r4, r0
   2a720:	cmp	r2, #1
   2a724:	strb	sl, [r6]
   2a728:	ble	2a73c <flatcc_json_parser_generic_json@@Base+0x244>
   2a72c:	ldrb	r2, [r3, #1]
   2a730:	cmp	r2, #32
   2a734:	bhi	2b4bc <flatcc_json_parser_generic_json@@Base+0xfc4>
   2a738:	beq	2b4ac <flatcc_json_parser_generic_json@@Base+0xfb4>
   2a73c:	cmp	r4, r0
   2a740:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a744:	ldrb	r2, [r0]
   2a748:	cmp	r2, #32
   2a74c:	bne	2a76c <flatcc_json_parser_generic_json@@Base+0x274>
   2a750:	add	r3, r0, #1
   2a754:	cmp	r3, r4
   2a758:	mov	r0, r3
   2a75c:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a760:	ldrb	r2, [r3], #1
   2a764:	cmp	r2, #32
   2a768:	beq	2a754 <flatcc_json_parser_generic_json@@Base+0x25c>
   2a76c:	cmp	r2, #32
   2a770:	bhi	2be54 <flatcc_json_parser_generic_json@@Base+0x195c>
   2a774:	sub	r2, r2, #9
   2a778:	cmp	r2, #23
   2a77c:	ldrls	pc, [pc, r2, lsl #2]
   2a780:	b	2a87c <flatcc_json_parser_generic_json@@Base+0x384>
   2a784:	andeq	fp, r2, r4, lsr #7
   2a788:	andeq	sl, r2, r4, lsl #16
   2a78c:	andeq	sl, r2, ip, ror r8
   2a790:	andeq	sl, r2, ip, ror r8
   2a794:	andeq	sl, r2, r4, ror #15
   2a798:	andeq	sl, r2, ip, ror r8
   2a79c:	andeq	sl, r2, ip, ror r8
   2a7a0:	andeq	sl, r2, ip, ror r8
   2a7a4:	andeq	sl, r2, ip, ror r8
   2a7a8:	andeq	sl, r2, ip, ror r8
   2a7ac:	andeq	sl, r2, ip, ror r8
   2a7b0:	andeq	sl, r2, ip, ror r8
   2a7b4:	andeq	sl, r2, ip, ror r8
   2a7b8:	andeq	sl, r2, ip, ror r8
   2a7bc:	andeq	sl, r2, ip, ror r8
   2a7c0:	andeq	sl, r2, ip, ror r8
   2a7c4:	andeq	sl, r2, ip, ror r8
   2a7c8:	andeq	sl, r2, ip, ror r8
   2a7cc:	andeq	sl, r2, ip, ror r8
   2a7d0:	andeq	sl, r2, ip, ror r8
   2a7d4:	andeq	sl, r2, ip, ror r8
   2a7d8:	andeq	sl, r2, ip, ror r8
   2a7dc:	andeq	sl, r2, ip, ror r8
   2a7e0:	andeq	sl, r2, ip, lsr r7
   2a7e4:	sub	r3, r4, r0
   2a7e8:	cmp	r3, #1
   2a7ec:	movle	r3, r8
   2a7f0:	ldrbgt	r3, [r0, #1]
   2a7f4:	subgt	r3, r3, #10
   2a7f8:	clzgt	r3, r3
   2a7fc:	lsrgt	r3, r3, #5
   2a800:	add	r0, r0, r3
   2a804:	ldr	r3, [r5, #16]
   2a808:	add	r0, r0, #1
   2a80c:	add	r3, r3, #1
   2a810:	str	r0, [r5, #4]
   2a814:	str	r3, [r5, #16]
   2a818:	cmp	r4, r0
   2a81c:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a820:	ldrb	r2, [r0]
   2a824:	cmp	r2, #32
   2a828:	bls	2a774 <flatcc_json_parser_generic_json@@Base+0x27c>
   2a82c:	b	2b4c4 <flatcc_json_parser_generic_json@@Base+0xfcc>
   2a830:	sub	r3, r4, r0
   2a834:	cmp	r3, #1
   2a838:	movle	r3, r8
   2a83c:	ldrbgt	r3, [r0, #1]
   2a840:	subgt	r3, r3, #10
   2a844:	clzgt	r3, r3
   2a848:	lsrgt	r3, r3, #5
   2a84c:	add	r0, r0, r3
   2a850:	ldr	r3, [r5, #16]
   2a854:	add	r0, r0, #1
   2a858:	add	r3, r3, #1
   2a85c:	str	r0, [r5, #4]
   2a860:	str	r3, [r5, #16]
   2a864:	cmp	r4, r0
   2a868:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a86c:	ldrb	r2, [r0]
   2a870:	cmp	r2, #32
   2a874:	bls	2a5c4 <flatcc_json_parser_generic_json@@Base+0xcc>
   2a878:	b	2b4f0 <flatcc_json_parser_generic_json@@Base+0xff8>
   2a87c:	ldr	r3, [r5, #24]
   2a880:	cmp	r3, #0
   2a884:	bne	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2a888:	ldr	r3, [r5, #4]
   2a88c:	mov	r2, #5
   2a890:	sub	r3, r0, r3
   2a894:	add	r3, r3, #1
   2a898:	str	r0, [r5, #36]	; 0x24
   2a89c:	str	r3, [r5, #20]
   2a8a0:	mov	r0, r4
   2a8a4:	str	r2, [r5, #24]
   2a8a8:	add	sp, sp, #532	; 0x214
   2a8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8b0:	cmp	r2, #57	; 0x39
   2a8b4:	bls	2be6c <flatcc_json_parser_generic_json@@Base+0x1974>
   2a8b8:	cmp	r2, #91	; 0x5b
   2a8bc:	beq	2be64 <flatcc_json_parser_generic_json@@Base+0x196c>
   2a8c0:	cmp	r2, #123	; 0x7b
   2a8c4:	moveq	r3, r1
   2a8c8:	beq	2a55c <flatcc_json_parser_generic_json@@Base+0x64>
   2a8cc:	mov	r3, r1
   2a8d0:	mov	r1, r3
   2a8d4:	mov	r2, r4
   2a8d8:	mov	r0, r5
   2a8dc:	str	r3, [sp, #4]
   2a8e0:	bl	29ccc <flatcc_json_parser_skip_constant@@Base>
   2a8e4:	ldr	r3, [sp, #4]
   2a8e8:	cmp	r0, r3
   2a8ec:	beq	2bd74 <flatcc_json_parser_generic_json@@Base+0x187c>
   2a8f0:	cmp	r4, r0
   2a8f4:	beq	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2a8f8:	cmp	r6, r7
   2a8fc:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2a900:	ldrb	r3, [r6, #-1]
   2a904:	sub	r1, r6, #1
   2a908:	cmp	r3, #93	; 0x5d
   2a90c:	sub	r3, r4, r0
   2a910:	beq	2aaf4 <flatcc_json_parser_generic_json@@Base+0x5fc>
   2a914:	cmp	r3, #1
   2a918:	ble	2a92c <flatcc_json_parser_generic_json@@Base+0x434>
   2a91c:	ldrb	r2, [r0]
   2a920:	cmp	r2, #32
   2a924:	bhi	2aa8c <flatcc_json_parser_generic_json@@Base+0x594>
   2a928:	beq	2aa7c <flatcc_json_parser_generic_json@@Base+0x584>
   2a92c:	cmp	r4, r0
   2a930:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2a934:	ldrb	r2, [r0]
   2a938:	cmp	r2, #32
   2a93c:	bne	2a95c <flatcc_json_parser_generic_json@@Base+0x464>
   2a940:	add	r3, r0, #1
   2a944:	cmp	r3, r4
   2a948:	mov	r0, r3
   2a94c:	beq	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2a950:	ldrb	r2, [r3], #1
   2a954:	cmp	r2, #32
   2a958:	beq	2a944 <flatcc_json_parser_generic_json@@Base+0x44c>
   2a95c:	cmp	r2, #32
   2a960:	bhi	2aa1c <flatcc_json_parser_generic_json@@Base+0x524>
   2a964:	sub	r2, r2, #9
   2a968:	cmp	r2, #23
   2a96c:	ldrls	pc, [pc, r2, lsl #2]
   2a970:	b	2aa4c <flatcc_json_parser_generic_json@@Base+0x554>
   2a974:	andeq	sl, r2, r4, asr #20
   2a978:	strdeq	sl, [r2], -r4
   2a97c:	andeq	sl, r2, ip, asr #20
   2a980:	andeq	sl, r2, ip, asr #20
   2a984:	ldrdeq	sl, [r2], -r4
   2a988:	andeq	sl, r2, ip, asr #20
   2a98c:	andeq	sl, r2, ip, asr #20
   2a990:	andeq	sl, r2, ip, asr #20
   2a994:	andeq	sl, r2, ip, asr #20
   2a998:	andeq	sl, r2, ip, asr #20
   2a99c:	andeq	sl, r2, ip, asr #20
   2a9a0:	andeq	sl, r2, ip, asr #20
   2a9a4:	andeq	sl, r2, ip, asr #20
   2a9a8:	andeq	sl, r2, ip, asr #20
   2a9ac:	andeq	sl, r2, ip, asr #20
   2a9b0:	andeq	sl, r2, ip, asr #20
   2a9b4:	andeq	sl, r2, ip, asr #20
   2a9b8:	andeq	sl, r2, ip, asr #20
   2a9bc:	andeq	sl, r2, ip, asr #20
   2a9c0:	andeq	sl, r2, ip, asr #20
   2a9c4:	andeq	sl, r2, ip, asr #20
   2a9c8:	andeq	sl, r2, ip, asr #20
   2a9cc:	andeq	sl, r2, ip, asr #20
   2a9d0:	andeq	sl, r2, ip, lsr #18
   2a9d4:	sub	r3, r4, r0
   2a9d8:	cmp	r3, #1
   2a9dc:	movle	r3, r8
   2a9e0:	ldrbgt	r3, [r0, #1]
   2a9e4:	subgt	r3, r3, #10
   2a9e8:	clzgt	r3, r3
   2a9ec:	lsrgt	r3, r3, #5
   2a9f0:	add	r0, r0, r3
   2a9f4:	ldr	r3, [r5, #16]
   2a9f8:	add	r0, r0, #1
   2a9fc:	add	r3, r3, #1
   2aa00:	str	r0, [r5, #4]
   2aa04:	str	r3, [r5, #16]
   2aa08:	cmp	r4, r0
   2aa0c:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2aa10:	ldrb	r2, [r0]
   2aa14:	cmp	r2, #32
   2aa18:	bls	2a964 <flatcc_json_parser_generic_json@@Base+0x46c>
   2aa1c:	cmp	r2, #44	; 0x2c
   2aa20:	beq	2aa9c <flatcc_json_parser_generic_json@@Base+0x5a4>
   2aa24:	cmp	r2, #125	; 0x7d
   2aa28:	beq	2acb8 <flatcc_json_parser_generic_json@@Base+0x7c0>
   2aa2c:	ldr	r3, [r5, #24]
   2aa30:	cmp	r3, #0
   2aa34:	bne	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2aa38:	ldr	r3, [r5, #4]
   2aa3c:	mov	r2, #10
   2aa40:	b	2aa60 <flatcc_json_parser_generic_json@@Base+0x568>
   2aa44:	add	r0, r0, #1
   2aa48:	b	2aa08 <flatcc_json_parser_generic_json@@Base+0x510>
   2aa4c:	ldr	r3, [r5, #24]
   2aa50:	cmp	r3, #0
   2aa54:	bne	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2aa58:	ldr	r3, [r5, #4]
   2aa5c:	mov	r2, #5
   2aa60:	sub	r3, r0, r3
   2aa64:	add	r3, r3, #1
   2aa68:	str	r0, [r5, #36]	; 0x24
   2aa6c:	str	r3, [r5, #20]
   2aa70:	str	r2, [r5, #24]
   2aa74:	mov	r0, r4
   2aa78:	b	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2aa7c:	ldrb	r2, [r0, #1]
   2aa80:	cmp	r2, #32
   2aa84:	addhi	r0, r0, #1
   2aa88:	bls	2a92c <flatcc_json_parser_generic_json@@Base+0x434>
   2aa8c:	cmp	r4, r0
   2aa90:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2aa94:	cmp	r2, #44	; 0x2c
   2aa98:	bne	2aa24 <flatcc_json_parser_generic_json@@Base+0x52c>
   2aa9c:	add	r3, r0, #1
   2aaa0:	sub	r2, r4, r3
   2aaa4:	cmp	r2, #1
   2aaa8:	ble	2aabc <flatcc_json_parser_generic_json@@Base+0x5c4>
   2aaac:	ldrb	r2, [r0, #1]
   2aab0:	cmp	r2, #32
   2aab4:	bhi	2af28 <flatcc_json_parser_generic_json@@Base+0xa30>
   2aab8:	beq	2af18 <flatcc_json_parser_generic_json@@Base+0xa20>
   2aabc:	cmp	r4, r3
   2aac0:	beq	2af30 <flatcc_json_parser_generic_json@@Base+0xa38>
   2aac4:	ldrb	r2, [r3]
   2aac8:	cmp	r2, #32
   2aacc:	bne	2ae10 <flatcc_json_parser_generic_json@@Base+0x918>
   2aad0:	add	r0, r3, #1
   2aad4:	b	2aae4 <flatcc_json_parser_generic_json@@Base+0x5ec>
   2aad8:	ldrb	r2, [r0], #1
   2aadc:	cmp	r2, #32
   2aae0:	bne	2ae10 <flatcc_json_parser_generic_json@@Base+0x918>
   2aae4:	cmp	r0, r4
   2aae8:	mov	r3, r0
   2aaec:	bne	2aad8 <flatcc_json_parser_generic_json@@Base+0x5e0>
   2aaf0:	b	2af34 <flatcc_json_parser_generic_json@@Base+0xa3c>
   2aaf4:	cmp	r3, #1
   2aaf8:	ble	2ab0c <flatcc_json_parser_generic_json@@Base+0x614>
   2aafc:	ldrb	r2, [r0]
   2ab00:	cmp	r2, #32
   2ab04:	bhi	2ac3c <flatcc_json_parser_generic_json@@Base+0x744>
   2ab08:	beq	2ac2c <flatcc_json_parser_generic_json@@Base+0x734>
   2ab0c:	cmp	r4, r0
   2ab10:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2ab14:	ldrb	r2, [r0]
   2ab18:	cmp	r2, #32
   2ab1c:	bne	2ab3c <flatcc_json_parser_generic_json@@Base+0x644>
   2ab20:	add	r3, r0, #1
   2ab24:	cmp	r3, r4
   2ab28:	mov	r0, r3
   2ab2c:	beq	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2ab30:	ldrb	r2, [r3], #1
   2ab34:	cmp	r2, #32
   2ab38:	beq	2ab24 <flatcc_json_parser_generic_json@@Base+0x62c>
   2ab3c:	cmp	r2, #32
   2ab40:	bhi	2abfc <flatcc_json_parser_generic_json@@Base+0x704>
   2ab44:	sub	r2, r2, #9
   2ab48:	cmp	r2, #23
   2ab4c:	ldrls	pc, [pc, r2, lsl #2]
   2ab50:	b	2aa4c <flatcc_json_parser_generic_json@@Base+0x554>
   2ab54:	andeq	sl, r2, r4, lsr #24
   2ab58:	ldrdeq	sl, [r2], -r4
   2ab5c:	andeq	sl, r2, ip, asr #20
   2ab60:	andeq	sl, r2, ip, asr #20
   2ab64:			; <UNDEFINED> instruction: 0x0002abb4
   2ab68:	andeq	sl, r2, ip, asr #20
   2ab6c:	andeq	sl, r2, ip, asr #20
   2ab70:	andeq	sl, r2, ip, asr #20
   2ab74:	andeq	sl, r2, ip, asr #20
   2ab78:	andeq	sl, r2, ip, asr #20
   2ab7c:	andeq	sl, r2, ip, asr #20
   2ab80:	andeq	sl, r2, ip, asr #20
   2ab84:	andeq	sl, r2, ip, asr #20
   2ab88:	andeq	sl, r2, ip, asr #20
   2ab8c:	andeq	sl, r2, ip, asr #20
   2ab90:	andeq	sl, r2, ip, asr #20
   2ab94:	andeq	sl, r2, ip, asr #20
   2ab98:	andeq	sl, r2, ip, asr #20
   2ab9c:	andeq	sl, r2, ip, asr #20
   2aba0:	andeq	sl, r2, ip, asr #20
   2aba4:	andeq	sl, r2, ip, asr #20
   2aba8:	andeq	sl, r2, ip, asr #20
   2abac:	andeq	sl, r2, ip, asr #20
   2abb0:	andeq	sl, r2, ip, lsl #22
   2abb4:	sub	r3, r4, r0
   2abb8:	cmp	r3, #1
   2abbc:	movle	r3, r8
   2abc0:	ldrbgt	r3, [r0, #1]
   2abc4:	subgt	r3, r3, #10
   2abc8:	clzgt	r3, r3
   2abcc:	lsrgt	r3, r3, #5
   2abd0:	add	r0, r0, r3
   2abd4:	ldr	r3, [r5, #16]
   2abd8:	add	r0, r0, #1
   2abdc:	add	r3, r3, #1
   2abe0:	str	r0, [r5, #4]
   2abe4:	str	r3, [r5, #16]
   2abe8:	cmp	r4, r0
   2abec:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2abf0:	ldrb	r2, [r0]
   2abf4:	cmp	r2, #32
   2abf8:	bls	2ab44 <flatcc_json_parser_generic_json@@Base+0x64c>
   2abfc:	cmp	r2, #44	; 0x2c
   2ac00:	beq	2ac4c <flatcc_json_parser_generic_json@@Base+0x754>
   2ac04:	cmp	r2, #93	; 0x5d
   2ac08:	beq	2af64 <flatcc_json_parser_generic_json@@Base+0xa6c>
   2ac0c:	ldr	r3, [r5, #24]
   2ac10:	cmp	r3, #0
   2ac14:	bne	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2ac18:	ldr	r3, [r5, #4]
   2ac1c:	mov	r2, #9
   2ac20:	b	2aa60 <flatcc_json_parser_generic_json@@Base+0x568>
   2ac24:	add	r0, r0, #1
   2ac28:	b	2abe8 <flatcc_json_parser_generic_json@@Base+0x6f0>
   2ac2c:	ldrb	r2, [r0, #1]
   2ac30:	cmp	r2, #32
   2ac34:	addhi	r0, r0, #1
   2ac38:	bls	2ab0c <flatcc_json_parser_generic_json@@Base+0x614>
   2ac3c:	cmp	r4, r0
   2ac40:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2ac44:	cmp	r2, #44	; 0x2c
   2ac48:	bne	2ac04 <flatcc_json_parser_generic_json@@Base+0x70c>
   2ac4c:	add	r3, r0, #1
   2ac50:	sub	r2, r4, r3
   2ac54:	cmp	r2, #1
   2ac58:	ble	2ac6c <flatcc_json_parser_generic_json@@Base+0x774>
   2ac5c:	ldrb	r2, [r0, #1]
   2ac60:	cmp	r2, #32
   2ac64:	bhi	2b1e8 <flatcc_json_parser_generic_json@@Base+0xcf0>
   2ac68:	beq	2b1d8 <flatcc_json_parser_generic_json@@Base+0xce0>
   2ac6c:	cmp	r4, r3
   2ac70:	beq	2b1f0 <flatcc_json_parser_generic_json@@Base+0xcf8>
   2ac74:	ldrb	r2, [r3]
   2ac78:	cmp	r2, #32
   2ac7c:	bne	2b03c <flatcc_json_parser_generic_json@@Base+0xb44>
   2ac80:	add	r0, r3, #1
   2ac84:	b	2ac94 <flatcc_json_parser_generic_json@@Base+0x79c>
   2ac88:	ldrb	r2, [r0], #1
   2ac8c:	cmp	r2, #32
   2ac90:	bne	2b03c <flatcc_json_parser_generic_json@@Base+0xb44>
   2ac94:	cmp	r0, r4
   2ac98:	mov	r3, r0
   2ac9c:	bne	2ac88 <flatcc_json_parser_generic_json@@Base+0x790>
   2aca0:	ldr	r2, [r5, #24]
   2aca4:	cmp	r2, #0
   2aca8:	bne	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2acac:	ldr	r2, [r5, #4]
   2acb0:	mov	r0, #9
   2acb4:	b	2af48 <flatcc_json_parser_generic_json@@Base+0xa50>
   2acb8:	add	r2, r0, #1
   2acbc:	sub	r3, r4, r2
   2acc0:	cmp	r3, #1
   2acc4:	ble	2acd8 <flatcc_json_parser_generic_json@@Base+0x7e0>
   2acc8:	ldrb	r3, [r0, #1]
   2accc:	cmp	r3, #32
   2acd0:	bhi	2b56c <flatcc_json_parser_generic_json@@Base+0x1074>
   2acd4:	beq	2b55c <flatcc_json_parser_generic_json@@Base+0x1064>
   2acd8:	cmp	r4, r2
   2acdc:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2ace0:	ldrb	ip, [r2]
   2ace4:	cmp	ip, #32
   2ace8:	bne	2bba8 <flatcc_json_parser_generic_json@@Base+0x16b0>
   2acec:	add	r3, r2, #1
   2acf0:	cmp	r3, r4
   2acf4:	mov	r0, r3
   2acf8:	beq	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2acfc:	ldrb	ip, [r3], #1
   2ad00:	cmp	ip, #32
   2ad04:	beq	2acf0 <flatcc_json_parser_generic_json@@Base+0x7f8>
   2ad08:	cmp	ip, #32
   2ad0c:	mov	r2, r0
   2ad10:	bhi	2adcc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2ad14:	sub	ip, ip, #9
   2ad18:	cmp	ip, #23
   2ad1c:	ldrls	pc, [pc, ip, lsl #2]
   2ad20:	b	2ade0 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2ad24:	ldrdeq	sl, [r2], -r8
   2ad28:	andeq	sl, r2, r4, lsr #27
   2ad2c:	andeq	sl, r2, r0, ror #27
   2ad30:	andeq	sl, r2, r0, ror #27
   2ad34:	andeq	sl, r2, r4, lsl #27
   2ad38:	andeq	sl, r2, r0, ror #27
   2ad3c:	andeq	sl, r2, r0, ror #27
   2ad40:	andeq	sl, r2, r0, ror #27
   2ad44:	andeq	sl, r2, r0, ror #27
   2ad48:	andeq	sl, r2, r0, ror #27
   2ad4c:	andeq	sl, r2, r0, ror #27
   2ad50:	andeq	sl, r2, r0, ror #27
   2ad54:	andeq	sl, r2, r0, ror #27
   2ad58:	andeq	sl, r2, r0, ror #27
   2ad5c:	andeq	sl, r2, r0, ror #27
   2ad60:	andeq	sl, r2, r0, ror #27
   2ad64:	andeq	sl, r2, r0, ror #27
   2ad68:	andeq	sl, r2, r0, ror #27
   2ad6c:	andeq	sl, r2, r0, ror #27
   2ad70:	andeq	sl, r2, r0, ror #27
   2ad74:	andeq	sl, r2, r0, ror #27
   2ad78:	andeq	sl, r2, r0, ror #27
   2ad7c:	andeq	sl, r2, r0, ror #27
   2ad80:	ldrdeq	sl, [r2], -r8
   2ad84:	sub	r3, r4, r2
   2ad88:	cmp	r3, #1
   2ad8c:	movle	r3, r8
   2ad90:	ldrbgt	r3, [r2, #1]
   2ad94:	subgt	r3, r3, #10
   2ad98:	clzgt	r3, r3
   2ad9c:	lsrgt	r3, r3, #5
   2ada0:	add	r2, r2, r3
   2ada4:	ldr	r3, [r5, #16]
   2ada8:	add	r2, r2, #1
   2adac:	add	r3, r3, #1
   2adb0:	str	r2, [r5, #4]
   2adb4:	str	r3, [r5, #16]
   2adb8:	cmp	r4, r2
   2adbc:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2adc0:	ldrb	ip, [r2]
   2adc4:	cmp	ip, #32
   2adc8:	bls	2ad14 <flatcc_json_parser_generic_json@@Base+0x81c>
   2adcc:	mov	r0, r2
   2add0:	mov	r6, r1
   2add4:	b	2a8f8 <flatcc_json_parser_generic_json@@Base+0x400>
   2add8:	add	r2, r2, #1
   2addc:	b	2adb8 <flatcc_json_parser_generic_json@@Base+0x8c0>
   2ade0:	ldr	r3, [r5, #24]
   2ade4:	cmp	r3, #0
   2ade8:	bne	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2adec:	ldr	r3, [r5, #4]
   2adf0:	mov	r0, #5
   2adf4:	sub	r3, r2, r3
   2adf8:	add	r3, r3, #1
   2adfc:	str	r0, [r5, #24]
   2ae00:	str	r2, [r5, #36]	; 0x24
   2ae04:	str	r3, [r5, #20]
   2ae08:	mov	r0, r4
   2ae0c:	b	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2ae10:	cmp	r2, #32
   2ae14:	bhi	2aed0 <flatcc_json_parser_generic_json@@Base+0x9d8>
   2ae18:	sub	r2, r2, #9
   2ae1c:	cmp	r2, #23
   2ae20:	ldrls	pc, [pc, r2, lsl #2]
   2ae24:	b	2aeec <flatcc_json_parser_generic_json@@Base+0x9f4>
   2ae28:	andeq	sl, r2, r4, ror #29
   2ae2c:	andeq	sl, r2, r8, lsr #29
   2ae30:	andeq	sl, r2, ip, ror #29
   2ae34:	andeq	sl, r2, ip, ror #29
   2ae38:	andeq	sl, r2, r8, lsl #29
   2ae3c:	andeq	sl, r2, ip, ror #29
   2ae40:	andeq	sl, r2, ip, ror #29
   2ae44:	andeq	sl, r2, ip, ror #29
   2ae48:	andeq	sl, r2, ip, ror #29
   2ae4c:	andeq	sl, r2, ip, ror #29
   2ae50:	andeq	sl, r2, ip, ror #29
   2ae54:	andeq	sl, r2, ip, ror #29
   2ae58:	andeq	sl, r2, ip, ror #29
   2ae5c:	andeq	sl, r2, ip, ror #29
   2ae60:	andeq	sl, r2, ip, ror #29
   2ae64:	andeq	sl, r2, ip, ror #29
   2ae68:	andeq	sl, r2, ip, ror #29
   2ae6c:	andeq	sl, r2, ip, ror #29
   2ae70:	andeq	sl, r2, ip, ror #29
   2ae74:	andeq	sl, r2, ip, ror #29
   2ae78:	andeq	sl, r2, ip, ror #29
   2ae7c:	andeq	sl, r2, ip, ror #29
   2ae80:	andeq	sl, r2, ip, ror #29
   2ae84:			; <UNDEFINED> instruction: 0x0002aabc
   2ae88:	sub	r2, r4, r3
   2ae8c:	cmp	r2, #1
   2ae90:	movle	r2, r8
   2ae94:	ldrbgt	r2, [r3, #1]
   2ae98:	subgt	r2, r2, #10
   2ae9c:	clzgt	r2, r2
   2aea0:	lsrgt	r2, r2, #5
   2aea4:	add	r3, r3, r2
   2aea8:	ldr	r2, [r5, #16]
   2aeac:	add	r3, r3, #1
   2aeb0:	add	r2, r2, #1
   2aeb4:	str	r3, [r5, #4]
   2aeb8:	str	r2, [r5, #16]
   2aebc:	cmp	r4, r3
   2aec0:	beq	2af30 <flatcc_json_parser_generic_json@@Base+0xa38>
   2aec4:	ldrb	r2, [r3]
   2aec8:	cmp	r2, #32
   2aecc:	bls	2ae18 <flatcc_json_parser_generic_json@@Base+0x920>
   2aed0:	cmp	r2, #125	; 0x7d
   2aed4:	beq	2b8e8 <flatcc_json_parser_generic_json@@Base+0x13f0>
   2aed8:	cmp	r4, r3
   2aedc:	bne	2a530 <flatcc_json_parser_generic_json@@Base+0x38>
   2aee0:	b	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2aee4:	add	r3, r3, #1
   2aee8:	b	2aebc <flatcc_json_parser_generic_json@@Base+0x9c4>
   2aeec:	ldr	r2, [r5, #24]
   2aef0:	cmp	r2, #0
   2aef4:	bne	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2aef8:	ldr	r2, [r5, #4]
   2aefc:	mov	r0, #5
   2af00:	sub	r2, r3, r2
   2af04:	add	r2, r2, #1
   2af08:	str	r3, [r5, #36]	; 0x24
   2af0c:	str	r2, [r5, #20]
   2af10:	str	r0, [r5, #24]
   2af14:	b	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2af18:	ldrb	r2, [r0, #2]
   2af1c:	cmp	r2, #32
   2af20:	addhi	r3, r0, #2
   2af24:	bls	2aabc <flatcc_json_parser_generic_json@@Base+0x5c4>
   2af28:	cmp	r4, r3
   2af2c:	bne	2aed0 <flatcc_json_parser_generic_json@@Base+0x9d8>
   2af30:	mov	r3, r4
   2af34:	ldr	r2, [r5, #24]
   2af38:	cmp	r2, #0
   2af3c:	bne	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2af40:	ldr	r2, [r5, #4]
   2af44:	mov	r0, #10
   2af48:	sub	r2, r3, r2
   2af4c:	add	r2, r2, #1
   2af50:	str	r0, [r5, #24]
   2af54:	str	r3, [r5, #36]	; 0x24
   2af58:	str	r2, [r5, #20]
   2af5c:	mov	r0, r4
   2af60:	b	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2af64:	add	r2, r0, #1
   2af68:	sub	r3, r4, r2
   2af6c:	cmp	r3, #1
   2af70:	ble	2af90 <flatcc_json_parser_generic_json@@Base+0xa98>
   2af74:	ldrb	r3, [r0, #1]
   2af78:	cmp	r3, #32
   2af7c:	bhi	2b56c <flatcc_json_parser_generic_json@@Base+0x1074>
   2af80:	bne	2af90 <flatcc_json_parser_generic_json@@Base+0xa98>
   2af84:	ldrb	r3, [r0, #2]
   2af88:	cmp	r3, #32
   2af8c:	bhi	2b568 <flatcc_json_parser_generic_json@@Base+0x1070>
   2af90:	cmp	r4, r2
   2af94:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2af98:	ldrb	ip, [r2]
   2af9c:	cmp	ip, #32
   2afa0:	bne	2bd8c <flatcc_json_parser_generic_json@@Base+0x1894>
   2afa4:	add	r3, r2, #1
   2afa8:	cmp	r3, r4
   2afac:	mov	r0, r3
   2afb0:	beq	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2afb4:	ldrb	ip, [r3], #1
   2afb8:	cmp	ip, #32
   2afbc:	beq	2afa8 <flatcc_json_parser_generic_json@@Base+0xab0>
   2afc0:	cmp	ip, #32
   2afc4:	mov	r2, r0
   2afc8:	bhi	2adcc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2afcc:	sub	ip, ip, #9
   2afd0:	cmp	ip, #23
   2afd4:	ldrls	pc, [pc, ip, lsl #2]
   2afd8:	b	2ade0 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2afdc:	andeq	fp, r2, ip, lsl #8
   2afe0:	andeq	fp, r2, r0, ror #7
   2afe4:	andeq	sl, r2, r0, ror #27
   2afe8:	andeq	sl, r2, r0, ror #27
   2afec:	andeq	fp, r2, r0, asr #7
   2aff0:	andeq	sl, r2, r0, ror #27
   2aff4:	andeq	sl, r2, r0, ror #27
   2aff8:	andeq	sl, r2, r0, ror #27
   2affc:	andeq	sl, r2, r0, ror #27
   2b000:	andeq	sl, r2, r0, ror #27
   2b004:	andeq	sl, r2, r0, ror #27
   2b008:	andeq	sl, r2, r0, ror #27
   2b00c:	andeq	sl, r2, r0, ror #27
   2b010:	andeq	sl, r2, r0, ror #27
   2b014:	andeq	sl, r2, r0, ror #27
   2b018:	andeq	sl, r2, r0, ror #27
   2b01c:	andeq	sl, r2, r0, ror #27
   2b020:	andeq	sl, r2, r0, ror #27
   2b024:	andeq	sl, r2, r0, ror #27
   2b028:	andeq	sl, r2, r0, ror #27
   2b02c:	andeq	sl, r2, r0, ror #27
   2b030:	andeq	sl, r2, r0, ror #27
   2b034:	andeq	sl, r2, r0, ror #27
   2b038:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   2b03c:	cmp	r2, #32
   2b040:	bhi	2b0fc <flatcc_json_parser_generic_json@@Base+0xc04>
   2b044:	sub	r2, r2, #9
   2b048:	cmp	r2, #23
   2b04c:	ldrls	pc, [pc, r2, lsl #2]
   2b050:	b	2aeec <flatcc_json_parser_generic_json@@Base+0x9f4>
   2b054:	ldrdeq	fp, [r2], -r0
   2b058:	ldrdeq	fp, [r2], -r4
   2b05c:	andeq	sl, r2, ip, ror #29
   2b060:	andeq	sl, r2, ip, ror #29
   2b064:	strheq	fp, [r2], -r4
   2b068:	andeq	sl, r2, ip, ror #29
   2b06c:	andeq	sl, r2, ip, ror #29
   2b070:	andeq	sl, r2, ip, ror #29
   2b074:	andeq	sl, r2, ip, ror #29
   2b078:	andeq	sl, r2, ip, ror #29
   2b07c:	andeq	sl, r2, ip, ror #29
   2b080:	andeq	sl, r2, ip, ror #29
   2b084:	andeq	sl, r2, ip, ror #29
   2b088:	andeq	sl, r2, ip, ror #29
   2b08c:	andeq	sl, r2, ip, ror #29
   2b090:	andeq	sl, r2, ip, ror #29
   2b094:	andeq	sl, r2, ip, ror #29
   2b098:	andeq	sl, r2, ip, ror #29
   2b09c:	andeq	sl, r2, ip, ror #29
   2b0a0:	andeq	sl, r2, ip, ror #29
   2b0a4:	andeq	sl, r2, ip, ror #29
   2b0a8:	andeq	sl, r2, ip, ror #29
   2b0ac:	andeq	sl, r2, ip, ror #29
   2b0b0:	andeq	sl, r2, ip, ror #24
   2b0b4:	sub	r2, r4, r3
   2b0b8:	cmp	r2, #1
   2b0bc:	movle	r2, r8
   2b0c0:	ldrbgt	r2, [r3, #1]
   2b0c4:	subgt	r2, r2, #10
   2b0c8:	clzgt	r2, r2
   2b0cc:	lsrgt	r2, r2, #5
   2b0d0:	add	r3, r3, r2
   2b0d4:	ldr	r2, [r5, #16]
   2b0d8:	add	r3, r3, #1
   2b0dc:	add	r2, r2, #1
   2b0e0:	str	r3, [r5, #4]
   2b0e4:	str	r2, [r5, #16]
   2b0e8:	cmp	r4, r3
   2b0ec:	beq	2b1f0 <flatcc_json_parser_generic_json@@Base+0xcf8>
   2b0f0:	ldrb	r2, [r3]
   2b0f4:	cmp	r2, #32
   2b0f8:	bls	2b044 <flatcc_json_parser_generic_json@@Base+0xb4c>
   2b0fc:	cmp	r2, #93	; 0x5d
   2b100:	bne	2aed8 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2b104:	add	r2, r3, #1
   2b108:	sub	r0, r4, r2
   2b10c:	cmp	r0, #1
   2b110:	ble	2b124 <flatcc_json_parser_generic_json@@Base+0xc2c>
   2b114:	ldrb	r0, [r3, #1]
   2b118:	cmp	r0, #32
   2b11c:	bhi	2b56c <flatcc_json_parser_generic_json@@Base+0x1074>
   2b120:	beq	2bdc4 <flatcc_json_parser_generic_json@@Base+0x18cc>
   2b124:	mov	r0, r2
   2b128:	cmp	r4, r0
   2b12c:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2b130:	ldrb	r3, [r0]
   2b134:	cmp	r3, #32
   2b138:	bne	2b158 <flatcc_json_parser_generic_json@@Base+0xc60>
   2b13c:	add	r2, r0, #1
   2b140:	cmp	r2, r4
   2b144:	mov	r0, r2
   2b148:	beq	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2b14c:	ldrb	r3, [r2], #1
   2b150:	cmp	r3, #32
   2b154:	beq	2b140 <flatcc_json_parser_generic_json@@Base+0xc48>
   2b158:	cmp	r3, #32
   2b15c:	bhi	2bc58 <flatcc_json_parser_generic_json@@Base+0x1760>
   2b160:	sub	r3, r3, #9
   2b164:	cmp	r3, #23
   2b168:	ldrls	pc, [pc, r3, lsl #2]
   2b16c:	b	2aa4c <flatcc_json_parser_generic_json@@Base+0x554>
   2b170:	andeq	fp, r2, r0, ror #24
   2b174:	andeq	fp, r2, r0, lsr ip
   2b178:	andeq	sl, r2, ip, asr #20
   2b17c:	andeq	sl, r2, ip, asr #20
   2b180:	andeq	fp, r2, r0, lsl ip
   2b184:	andeq	sl, r2, ip, asr #20
   2b188:	andeq	sl, r2, ip, asr #20
   2b18c:	andeq	sl, r2, ip, asr #20
   2b190:	andeq	sl, r2, ip, asr #20
   2b194:	andeq	sl, r2, ip, asr #20
   2b198:	andeq	sl, r2, ip, asr #20
   2b19c:	andeq	sl, r2, ip, asr #20
   2b1a0:	andeq	sl, r2, ip, asr #20
   2b1a4:	andeq	sl, r2, ip, asr #20
   2b1a8:	andeq	sl, r2, ip, asr #20
   2b1ac:	andeq	sl, r2, ip, asr #20
   2b1b0:	andeq	sl, r2, ip, asr #20
   2b1b4:	andeq	sl, r2, ip, asr #20
   2b1b8:	andeq	sl, r2, ip, asr #20
   2b1bc:	andeq	sl, r2, ip, asr #20
   2b1c0:	andeq	sl, r2, ip, asr #20
   2b1c4:	andeq	sl, r2, ip, asr #20
   2b1c8:	andeq	sl, r2, ip, asr #20
   2b1cc:	andeq	fp, r2, r8, lsr #2
   2b1d0:	add	r3, r3, #1
   2b1d4:	b	2b0e8 <flatcc_json_parser_generic_json@@Base+0xbf0>
   2b1d8:	ldrb	r2, [r0, #2]
   2b1dc:	cmp	r2, #32
   2b1e0:	addhi	r3, r0, #2
   2b1e4:	bls	2ac6c <flatcc_json_parser_generic_json@@Base+0x774>
   2b1e8:	cmp	r4, r3
   2b1ec:	bne	2b0fc <flatcc_json_parser_generic_json@@Base+0xc04>
   2b1f0:	mov	r3, r4
   2b1f4:	b	2aca0 <flatcc_json_parser_generic_json@@Base+0x7a8>
   2b1f8:	cmp	r2, #34	; 0x22
   2b1fc:	beq	2b500 <flatcc_json_parser_generic_json@@Base+0x1008>
   2b200:	cmp	r2, #46	; 0x2e
   2b204:	beq	2ba3c <flatcc_json_parser_generic_json@@Base+0x1544>
   2b208:	mov	r2, #1
   2b20c:	cmp	r4, r3
   2b210:	str	r2, [r5, #12]
   2b214:	beq	2bdac <flatcc_json_parser_generic_json@@Base+0x18b4>
   2b218:	ldrb	r2, [r3]
   2b21c:	cmp	r2, #32
   2b220:	addhi	r3, r3, #1
   2b224:	bls	2bdd4 <flatcc_json_parser_generic_json@@Base+0x18dc>
   2b228:	cmp	r2, #46	; 0x2e
   2b22c:	cmpne	r2, #95	; 0x5f
   2b230:	sub	r1, r3, #1
   2b234:	beq	2b5bc <flatcc_json_parser_generic_json@@Base+0x10c4>
   2b238:	sub	r0, r2, #48	; 0x30
   2b23c:	tst	r2, #128	; 0x80
   2b240:	uxtb	r0, r0
   2b244:	bne	2b5bc <flatcc_json_parser_generic_json@@Base+0x10c4>
   2b248:	orr	ip, r2, #32
   2b24c:	sub	ip, ip, #97	; 0x61
   2b250:	cmp	r0, #9
   2b254:	uxtb	ip, ip
   2b258:	bls	2b5bc <flatcc_json_parser_generic_json@@Base+0x10c4>
   2b25c:	cmp	ip, #25
   2b260:	bls	2b5bc <flatcc_json_parser_generic_json@@Base+0x10c4>
   2b264:	mov	r0, r4
   2b268:	sub	r3, r4, r1
   2b26c:	cmp	r3, #1
   2b270:	ble	2b288 <flatcc_json_parser_generic_json@@Base+0xd90>
   2b274:	ldrb	r2, [r1]
   2b278:	cmp	r2, #32
   2b27c:	bhi	2ba84 <flatcc_json_parser_generic_json@@Base+0x158c>
   2b280:	cmp	r2, #32
   2b284:	beq	2ba74 <flatcc_json_parser_generic_json@@Base+0x157c>
   2b288:	cmp	r4, r1
   2b28c:	beq	2ba8c <flatcc_json_parser_generic_json@@Base+0x1594>
   2b290:	ldrb	r2, [r1]
   2b294:	cmp	r2, #32
   2b298:	bne	2b600 <flatcc_json_parser_generic_json@@Base+0x1108>
   2b29c:	add	r3, r1, #1
   2b2a0:	b	2b2b0 <flatcc_json_parser_generic_json@@Base+0xdb8>
   2b2a4:	ldrb	r2, [r3], #1
   2b2a8:	cmp	r2, #32
   2b2ac:	bne	2b600 <flatcc_json_parser_generic_json@@Base+0x1108>
   2b2b0:	cmp	r4, r3
   2b2b4:	mov	r1, r3
   2b2b8:	bne	2b2a4 <flatcc_json_parser_generic_json@@Base+0xdac>
   2b2bc:	ldr	r3, [r5, #24]
   2b2c0:	cmp	r3, #0
   2b2c4:	bne	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2b2c8:	ldr	r3, [r5, #4]
   2b2cc:	mov	r2, #10
   2b2d0:	sub	r3, r1, r3
   2b2d4:	add	r3, r3, #1
   2b2d8:	str	r1, [r5, #36]	; 0x24
   2b2dc:	mov	r0, r4
   2b2e0:	str	r3, [r5, #20]
   2b2e4:	str	r2, [r5, #24]
   2b2e8:	b	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2b2ec:	mov	r3, r1
   2b2f0:	add	r0, r3, #1
   2b2f4:	cmp	r4, r0
   2b2f8:	beq	2be3c <flatcc_json_parser_generic_json@@Base+0x1944>
   2b2fc:	ldrb	r3, [r3, #1]
   2b300:	cmp	r3, #34	; 0x22
   2b304:	beq	2b394 <flatcc_json_parser_generic_json@@Base+0xe9c>
   2b308:	cmp	r4, r0
   2b30c:	beq	2b35c <flatcc_json_parser_generic_json@@Base+0xe64>
   2b310:	cmp	r3, #92	; 0x5c
   2b314:	cmpne	r3, #31
   2b318:	addhi	r1, r0, #1
   2b31c:	bhi	2b350 <flatcc_json_parser_generic_json@@Base+0xe58>
   2b320:	b	2ba94 <flatcc_json_parser_generic_json@@Base+0x159c>
   2b324:	ldrb	r3, [r1]
   2b328:	add	r1, r1, #1
   2b32c:	cmp	r3, #34	; 0x22
   2b330:	cmpne	r3, #31
   2b334:	movhi	r2, #1
   2b338:	movls	r2, #0
   2b33c:	cmp	r3, #92	; 0x5c
   2b340:	moveq	r2, #0
   2b344:	andne	r2, r2, #1
   2b348:	cmp	r2, #0
   2b34c:	beq	2b578 <flatcc_json_parser_generic_json@@Base+0x1080>
   2b350:	cmp	r1, r4
   2b354:	mov	r0, r1
   2b358:	bne	2b324 <flatcc_json_parser_generic_json@@Base+0xe2c>
   2b35c:	ldr	r3, [r5, #24]
   2b360:	cmp	r3, #0
   2b364:	beq	2b5dc <flatcc_json_parser_generic_json@@Base+0x10e4>
   2b368:	mov	r0, r4
   2b36c:	mov	r1, r0
   2b370:	add	r3, sp, #12
   2b374:	mov	r2, r4
   2b378:	mov	r0, r5
   2b37c:	bl	297fc <flatcc_json_parser_string_escape@@Base>
   2b380:	cmp	r4, r0
   2b384:	beq	2be3c <flatcc_json_parser_generic_json@@Base+0x1944>
   2b388:	ldrb	r3, [r0]
   2b38c:	cmp	r3, #34	; 0x22
   2b390:	bne	2b308 <flatcc_json_parser_generic_json@@Base+0xe10>
   2b394:	add	r0, r0, #1
   2b398:	b	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2b39c:	add	r0, r0, #1
   2b3a0:	b	2a864 <flatcc_json_parser_generic_json@@Base+0x36c>
   2b3a4:	add	r0, r0, #1
   2b3a8:	b	2a818 <flatcc_json_parser_generic_json@@Base+0x320>
   2b3ac:	cmp	r2, #91	; 0x5b
   2b3b0:	beq	2a70c <flatcc_json_parser_generic_json@@Base+0x214>
   2b3b4:	cmp	r2, #123	; 0x7b
   2b3b8:	beq	2a568 <flatcc_json_parser_generic_json@@Base+0x70>
   2b3bc:	b	2a8d0 <flatcc_json_parser_generic_json@@Base+0x3d8>
   2b3c0:	sub	r3, r4, r2
   2b3c4:	cmp	r3, #1
   2b3c8:	movle	r3, r8
   2b3cc:	ldrbgt	r3, [r2, #1]
   2b3d0:	subgt	r3, r3, #10
   2b3d4:	clzgt	r3, r3
   2b3d8:	lsrgt	r3, r3, #5
   2b3dc:	add	r2, r2, r3
   2b3e0:	ldr	r3, [r5, #16]
   2b3e4:	add	r2, r2, #1
   2b3e8:	add	r3, r3, #1
   2b3ec:	str	r2, [r5, #4]
   2b3f0:	str	r3, [r5, #16]
   2b3f4:	cmp	r4, r2
   2b3f8:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2b3fc:	ldrb	ip, [r2]
   2b400:	cmp	ip, #32
   2b404:	bls	2afcc <flatcc_json_parser_generic_json@@Base+0xad4>
   2b408:	b	2adcc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2b40c:	add	r2, r2, #1
   2b410:	b	2b3f4 <flatcc_json_parser_generic_json@@Base+0xefc>
   2b414:	add	r0, r3, #1
   2b418:	cmp	r4, r0
   2b41c:	beq	2be14 <flatcc_json_parser_generic_json@@Base+0x191c>
   2b420:	ldrb	r2, [r3, #1]
   2b424:	cmp	r2, #46	; 0x2e
   2b428:	beq	2bacc <flatcc_json_parser_generic_json@@Base+0x15d4>
   2b42c:	and	r3, r2, #223	; 0xdf
   2b430:	cmp	r3, #69	; 0x45
   2b434:	bne	2baa0 <flatcc_json_parser_generic_json@@Base+0x15a8>
   2b438:	add	r3, r0, #1
   2b43c:	cmp	r4, r3
   2b440:	beq	2bd04 <flatcc_json_parser_generic_json@@Base+0x180c>
   2b444:	ldrb	r2, [r0, #1]
   2b448:	sub	r1, r2, #43	; 0x2b
   2b44c:	tst	r1, #253	; 0xfd
   2b450:	bne	2bb24 <flatcc_json_parser_generic_json@@Base+0x162c>
   2b454:	add	r3, r0, #2
   2b458:	cmp	r4, r3
   2b45c:	bne	2bb20 <flatcc_json_parser_generic_json@@Base+0x1628>
   2b460:	mov	r3, r4
   2b464:	ldr	r2, [r5, #24]
   2b468:	cmp	r2, #0
   2b46c:	bne	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2b470:	ldr	r2, [r5, #4]
   2b474:	mov	r1, #6
   2b478:	sub	r2, r3, r2
   2b47c:	add	r2, r2, #1
   2b480:	str	r3, [r5, #36]	; 0x24
   2b484:	str	r2, [r5, #20]
   2b488:	str	r1, [r5, #24]
   2b48c:	b	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2b490:	ldr	r3, [r5, #4]
   2b494:	str	r0, [r5, #36]	; 0x24
   2b498:	sub	r3, r0, r3
   2b49c:	add	r3, r3, #1
   2b4a0:	str	r2, [r5, #24]
   2b4a4:	str	r3, [r5, #20]
   2b4a8:	b	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2b4ac:	ldrb	r2, [r3, #2]
   2b4b0:	cmp	r2, #32
   2b4b4:	addhi	r0, r3, #2
   2b4b8:	bls	2a73c <flatcc_json_parser_generic_json@@Base+0x244>
   2b4bc:	cmp	r4, r0
   2b4c0:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2b4c4:	cmp	r2, #93	; 0x5d
   2b4c8:	add	r6, r6, #1
   2b4cc:	beq	2a8f8 <flatcc_json_parser_generic_json@@Base+0x400>
   2b4d0:	mov	r3, r0
   2b4d4:	b	2a530 <flatcc_json_parser_generic_json@@Base+0x38>
   2b4d8:	ldrb	r2, [r3, #2]
   2b4dc:	cmp	r2, #32
   2b4e0:	addhi	r0, r3, #2
   2b4e4:	bls	2a58c <flatcc_json_parser_generic_json@@Base+0x94>
   2b4e8:	cmp	r4, r0
   2b4ec:	beq	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2b4f0:	cmp	r2, #125	; 0x7d
   2b4f4:	add	r6, r6, #1
   2b4f8:	bne	2b4d0 <flatcc_json_parser_generic_json@@Base+0xfd8>
   2b4fc:	b	2a8f8 <flatcc_json_parser_generic_json@@Base+0x400>
   2b500:	add	r1, r3, #1
   2b504:	cmp	r4, r1
   2b508:	str	r8, [r5, #12]
   2b50c:	beq	2ba58 <flatcc_json_parser_generic_json@@Base+0x1560>
   2b510:	ldrb	r2, [r3, #1]
   2b514:	cmp	r2, #34	; 0x22
   2b518:	movne	r0, r4
   2b51c:	bne	2b53c <flatcc_json_parser_generic_json@@Base+0x1044>
   2b520:	b	2bb74 <flatcc_json_parser_generic_json@@Base+0x167c>
   2b524:	add	r1, r3, #1
   2b528:	cmp	r4, r1
   2b52c:	beq	2bb84 <flatcc_json_parser_generic_json@@Base+0x168c>
   2b530:	ldrb	r2, [r3, #1]
   2b534:	cmp	r2, #34	; 0x22
   2b538:	beq	2bb78 <flatcc_json_parser_generic_json@@Base+0x1680>
   2b53c:	cmp	r2, #92	; 0x5c
   2b540:	mov	r3, r1
   2b544:	bne	2b524 <flatcc_json_parser_generic_json@@Base+0x102c>
   2b548:	sub	r3, r4, r1
   2b54c:	cmp	r3, #1
   2b550:	ble	2ba60 <flatcc_json_parser_generic_json@@Base+0x1568>
   2b554:	add	r3, r1, #1
   2b558:	b	2b524 <flatcc_json_parser_generic_json@@Base+0x102c>
   2b55c:	ldrb	r3, [r0, #2]
   2b560:	cmp	r3, #32
   2b564:	bls	2acd8 <flatcc_json_parser_generic_json@@Base+0x7e0>
   2b568:	add	r2, r0, #2
   2b56c:	cmp	r4, r2
   2b570:	bne	2adcc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2b574:	b	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2b578:	cmp	r3, #31
   2b57c:	bhi	2b5ac <flatcc_json_parser_generic_json@@Base+0x10b4>
   2b580:	ldr	r3, [r5, #24]
   2b584:	cmp	r3, #0
   2b588:	bne	2b368 <flatcc_json_parser_generic_json@@Base+0xe70>
   2b58c:	ldr	r3, [r5, #4]
   2b590:	str	r0, [r5, #36]	; 0x24
   2b594:	sub	r3, r0, r3
   2b598:	add	r3, r3, #1
   2b59c:	str	r9, [r5, #24]
   2b5a0:	str	r3, [r5, #20]
   2b5a4:	mov	r0, r4
   2b5a8:	b	2b36c <flatcc_json_parser_generic_json@@Base+0xe74>
   2b5ac:	cmp	r3, #34	; 0x22
   2b5b0:	bne	2b36c <flatcc_json_parser_generic_json@@Base+0xe74>
   2b5b4:	add	r0, r0, #1
   2b5b8:	b	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2b5bc:	cmp	r4, r3
   2b5c0:	mov	r1, r3
   2b5c4:	beq	2bc98 <flatcc_json_parser_generic_json@@Base+0x17a0>
   2b5c8:	ldrb	r0, [r3], #1
   2b5cc:	cmp	r0, #32
   2b5d0:	bls	2bc9c <flatcc_json_parser_generic_json@@Base+0x17a4>
   2b5d4:	mov	r2, r0
   2b5d8:	b	2b228 <flatcc_json_parser_generic_json@@Base+0xd30>
   2b5dc:	ldr	r3, [r5, #4]
   2b5e0:	mov	r2, #20
   2b5e4:	sub	r3, r0, r3
   2b5e8:	add	r3, r3, #1
   2b5ec:	str	r0, [r5, #36]	; 0x24
   2b5f0:	str	r2, [r5, #24]
   2b5f4:	str	r3, [r5, #20]
   2b5f8:	mov	r0, r4
   2b5fc:	b	2b36c <flatcc_json_parser_generic_json@@Base+0xe74>
   2b600:	cmp	r2, #32
   2b604:	bhi	2b6c0 <flatcc_json_parser_generic_json@@Base+0x11c8>
   2b608:	sub	r2, r2, #9
   2b60c:	cmp	r2, #23
   2b610:	ldrls	pc, [pc, r2, lsl #2]
   2b614:	b	2b770 <flatcc_json_parser_generic_json@@Base+0x1278>
   2b618:	andeq	fp, r2, r8, ror #14
   2b61c:	muleq	r2, r8, r6
   2b620:	andeq	fp, r2, r0, ror r7
   2b624:	andeq	fp, r2, r0, ror r7
   2b628:	andeq	fp, r2, r8, ror r6
   2b62c:	andeq	fp, r2, r0, ror r7
   2b630:	andeq	fp, r2, r0, ror r7
   2b634:	andeq	fp, r2, r0, ror r7
   2b638:	andeq	fp, r2, r0, ror r7
   2b63c:	andeq	fp, r2, r0, ror r7
   2b640:	andeq	fp, r2, r0, ror r7
   2b644:	andeq	fp, r2, r0, ror r7
   2b648:	andeq	fp, r2, r0, ror r7
   2b64c:	andeq	fp, r2, r0, ror r7
   2b650:	andeq	fp, r2, r0, ror r7
   2b654:	andeq	fp, r2, r0, ror r7
   2b658:	andeq	fp, r2, r0, ror r7
   2b65c:	andeq	fp, r2, r0, ror r7
   2b660:	andeq	fp, r2, r0, ror r7
   2b664:	andeq	fp, r2, r0, ror r7
   2b668:	andeq	fp, r2, r0, ror r7
   2b66c:	andeq	fp, r2, r0, ror r7
   2b670:	andeq	fp, r2, r0, ror r7
   2b674:	andeq	fp, r2, r8, lsl #5
   2b678:	sub	r3, r0, r1
   2b67c:	cmp	r3, #1
   2b680:	movle	r3, r8
   2b684:	ldrbgt	r3, [r1, #1]
   2b688:	subgt	r3, r3, #10
   2b68c:	clzgt	r3, r3
   2b690:	lsrgt	r3, r3, #5
   2b694:	add	r1, r1, r3
   2b698:	ldr	r3, [r5, #16]
   2b69c:	add	r1, r1, #1
   2b6a0:	add	r3, r3, #1
   2b6a4:	str	r1, [r5, #4]
   2b6a8:	str	r3, [r5, #16]
   2b6ac:	cmp	r4, r1
   2b6b0:	beq	2ba8c <flatcc_json_parser_generic_json@@Base+0x1594>
   2b6b4:	ldrb	r2, [r1]
   2b6b8:	cmp	r2, #32
   2b6bc:	bls	2b608 <flatcc_json_parser_generic_json@@Base+0x1110>
   2b6c0:	cmp	r2, #58	; 0x3a
   2b6c4:	bne	2be24 <flatcc_json_parser_generic_json@@Base+0x192c>
   2b6c8:	add	r3, r1, #1
   2b6cc:	sub	r2, r0, r3
   2b6d0:	cmp	r2, #1
   2b6d4:	ldrble	ip, [r1, #1]
   2b6d8:	ble	2b6f0 <flatcc_json_parser_generic_json@@Base+0x11f8>
   2b6dc:	ldrb	r2, [r1, #1]
   2b6e0:	cmp	r2, #32
   2b6e4:	mov	ip, r2
   2b6e8:	bhi	2ba18 <flatcc_json_parser_generic_json@@Base+0x1520>
   2b6ec:	beq	2ba08 <flatcc_json_parser_generic_json@@Base+0x1510>
   2b6f0:	cmp	r4, r3
   2b6f4:	mov	r2, ip
   2b6f8:	beq	2b724 <flatcc_json_parser_generic_json@@Base+0x122c>
   2b6fc:	cmp	ip, #32
   2b700:	beq	2b714 <flatcc_json_parser_generic_json@@Base+0x121c>
   2b704:	b	2b79c <flatcc_json_parser_generic_json@@Base+0x12a4>
   2b708:	cmp	r2, #32
   2b70c:	mov	r3, r1
   2b710:	bne	2b7a0 <flatcc_json_parser_generic_json@@Base+0x12a8>
   2b714:	add	r1, r3, #1
   2b718:	cmp	r4, r1
   2b71c:	ldrb	r2, [r3, #1]
   2b720:	bne	2b708 <flatcc_json_parser_generic_json@@Base+0x1210>
   2b724:	cmp	r2, #57	; 0x39
   2b728:	bhi	2a700 <flatcc_json_parser_generic_json@@Base+0x208>
   2b72c:	cmp	r2, #48	; 0x30
   2b730:	bcs	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2b734:	cmp	r2, #34	; 0x22
   2b738:	bne	2bd3c <flatcc_json_parser_generic_json@@Base+0x1844>
   2b73c:	ldr	r3, [r5, #24]
   2b740:	cmp	r3, #0
   2b744:	bne	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2b748:	ldr	r3, [r5, #4]
   2b74c:	mov	r2, #16
   2b750:	sub	r3, r4, r3
   2b754:	add	r3, r3, #1
   2b758:	str	r4, [r5, #36]	; 0x24
   2b75c:	str	r3, [r5, #20]
   2b760:	str	r2, [r5, #24]
   2b764:	b	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2b768:	add	r1, r1, #1
   2b76c:	b	2b6ac <flatcc_json_parser_generic_json@@Base+0x11b4>
   2b770:	ldr	r3, [r5, #24]
   2b774:	cmp	r3, #0
   2b778:	bne	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2b77c:	ldr	r3, [r5, #4]
   2b780:	mov	r2, #5
   2b784:	sub	r3, r1, r3
   2b788:	add	r3, r3, #1
   2b78c:	str	r1, [r5, #36]	; 0x24
   2b790:	str	r3, [r5, #20]
   2b794:	str	r2, [r5, #24]
   2b798:	b	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2b79c:	mov	r1, r3
   2b7a0:	cmp	r2, #32
   2b7a4:	movls	r3, r1
   2b7a8:	bhi	2a8b0 <flatcc_json_parser_generic_json@@Base+0x3b8>
   2b7ac:	sub	r2, r2, #9
   2b7b0:	cmp	r2, #23
   2b7b4:	ldrls	pc, [pc, r2, lsl #2]
   2b7b8:	b	2b8b4 <flatcc_json_parser_generic_json@@Base+0x13bc>
   2b7bc:	muleq	r2, ip, r8
   2b7c0:	andeq	fp, r2, ip, lsr r8
   2b7c4:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7c8:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7cc:	andeq	fp, r2, ip, lsl r8
   2b7d0:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7d4:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7d8:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7dc:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7e0:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7e4:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7e8:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7ec:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7f0:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7f4:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7f8:			; <UNDEFINED> instruction: 0x0002b8b4
   2b7fc:			; <UNDEFINED> instruction: 0x0002b8b4
   2b800:			; <UNDEFINED> instruction: 0x0002b8b4
   2b804:			; <UNDEFINED> instruction: 0x0002b8b4
   2b808:			; <UNDEFINED> instruction: 0x0002b8b4
   2b80c:			; <UNDEFINED> instruction: 0x0002b8b4
   2b810:			; <UNDEFINED> instruction: 0x0002b8b4
   2b814:			; <UNDEFINED> instruction: 0x0002b8b4
   2b818:	andeq	fp, r2, r4, lsr #17
   2b81c:	sub	r2, r0, r3
   2b820:	cmp	r2, #1
   2b824:	movle	r2, r8
   2b828:	ldrbgt	r2, [r3, #1]
   2b82c:	subgt	r2, r2, #10
   2b830:	clzgt	r2, r2
   2b834:	lsrgt	r2, r2, #5
   2b838:	add	r3, r3, r2
   2b83c:	ldr	r2, [r5, #16]
   2b840:	add	r3, r3, #1
   2b844:	add	r2, r2, #1
   2b848:	str	r3, [r5, #4]
   2b84c:	str	r2, [r5, #16]
   2b850:	cmp	r4, r3
   2b854:	beq	2be1c <flatcc_json_parser_generic_json@@Base+0x1924>
   2b858:	ldrb	r2, [r3]
   2b85c:	cmp	r2, #32
   2b860:	bls	2b7ac <flatcc_json_parser_generic_json@@Base+0x12b4>
   2b864:	cmp	r2, #57	; 0x39
   2b868:	bhi	2a54c <flatcc_json_parser_generic_json@@Base+0x54>
   2b86c:	cmp	r2, #48	; 0x30
   2b870:	bcs	2a65c <flatcc_json_parser_generic_json@@Base+0x164>
   2b874:	cmp	r2, #34	; 0x22
   2b878:	beq	2b2f0 <flatcc_json_parser_generic_json@@Base+0xdf8>
   2b87c:	cmp	r2, #45	; 0x2d
   2b880:	bne	2a8d0 <flatcc_json_parser_generic_json@@Base+0x3d8>
   2b884:	add	r1, r3, #1
   2b888:	cmp	r4, r1
   2b88c:	beq	2bd04 <flatcc_json_parser_generic_json@@Base+0x180c>
   2b890:	ldrb	r2, [r3, #1]
   2b894:	mov	r3, r1
   2b898:	b	2a664 <flatcc_json_parser_generic_json@@Base+0x16c>
   2b89c:	add	r3, r3, #1
   2b8a0:	b	2b850 <flatcc_json_parser_generic_json@@Base+0x1358>
   2b8a4:	cmp	r4, r3
   2b8a8:	bne	2b714 <flatcc_json_parser_generic_json@@Base+0x121c>
   2b8ac:	mov	r3, r4
   2b8b0:	b	2a8d0 <flatcc_json_parser_generic_json@@Base+0x3d8>
   2b8b4:	ldr	r2, [r5, #24]
   2b8b8:	cmp	r2, #0
   2b8bc:	beq	2bd1c <flatcc_json_parser_generic_json@@Base+0x1824>
   2b8c0:	ldrb	r3, [r4]
   2b8c4:	cmp	r3, #57	; 0x39
   2b8c8:	bhi	2be00 <flatcc_json_parser_generic_json@@Base+0x1908>
   2b8cc:	cmp	r3, #48	; 0x30
   2b8d0:	bcs	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2b8d4:	cmp	r3, #34	; 0x22
   2b8d8:	beq	2b73c <flatcc_json_parser_generic_json@@Base+0x1244>
   2b8dc:	cmp	r3, #45	; 0x2d
   2b8e0:	beq	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2b8e4:	b	2b8ac <flatcc_json_parser_generic_json@@Base+0x13b4>
   2b8e8:	add	r2, r3, #1
   2b8ec:	sub	r0, r4, r2
   2b8f0:	cmp	r0, #1
   2b8f4:	ble	2b908 <flatcc_json_parser_generic_json@@Base+0x1410>
   2b8f8:	ldrb	r0, [r3, #1]
   2b8fc:	cmp	r0, #32
   2b900:	bhi	2b56c <flatcc_json_parser_generic_json@@Base+0x1074>
   2b904:	beq	2bd94 <flatcc_json_parser_generic_json@@Base+0x189c>
   2b908:	cmp	r4, r2
   2b90c:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2b910:	ldrb	ip, [r2]
   2b914:	cmp	ip, #32
   2b918:	bne	2bdbc <flatcc_json_parser_generic_json@@Base+0x18c4>
   2b91c:	add	r3, r2, #1
   2b920:	cmp	r4, r3
   2b924:	mov	r0, r3
   2b928:	beq	2a6d0 <flatcc_json_parser_generic_json@@Base+0x1d8>
   2b92c:	ldrb	ip, [r3], #1
   2b930:	cmp	ip, #32
   2b934:	beq	2b920 <flatcc_json_parser_generic_json@@Base+0x1428>
   2b938:	cmp	ip, #32
   2b93c:	mov	r2, r0
   2b940:	bhi	2adcc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2b944:	sub	ip, ip, #9
   2b948:	cmp	ip, #23
   2b94c:	ldrls	pc, [pc, ip, lsl #2]
   2b950:	b	2ade0 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2b954:	andeq	fp, r2, r0, lsl #20
   2b958:	ldrdeq	fp, [r2], -r4
   2b95c:	andeq	sl, r2, r0, ror #27
   2b960:	andeq	sl, r2, r0, ror #27
   2b964:			; <UNDEFINED> instruction: 0x0002b9b4
   2b968:	andeq	sl, r2, r0, ror #27
   2b96c:	andeq	sl, r2, r0, ror #27
   2b970:	andeq	sl, r2, r0, ror #27
   2b974:	andeq	sl, r2, r0, ror #27
   2b978:	andeq	sl, r2, r0, ror #27
   2b97c:	andeq	sl, r2, r0, ror #27
   2b980:	andeq	sl, r2, r0, ror #27
   2b984:	andeq	sl, r2, r0, ror #27
   2b988:	andeq	sl, r2, r0, ror #27
   2b98c:	andeq	sl, r2, r0, ror #27
   2b990:	andeq	sl, r2, r0, ror #27
   2b994:	andeq	sl, r2, r0, ror #27
   2b998:	andeq	sl, r2, r0, ror #27
   2b99c:	andeq	sl, r2, r0, ror #27
   2b9a0:	andeq	sl, r2, r0, ror #27
   2b9a4:	andeq	sl, r2, r0, ror #27
   2b9a8:	andeq	sl, r2, r0, ror #27
   2b9ac:	andeq	sl, r2, r0, ror #27
   2b9b0:	andeq	fp, r2, r8, lsl #18
   2b9b4:	sub	r3, r4, r2
   2b9b8:	cmp	r3, #1
   2b9bc:	movle	r3, r8
   2b9c0:	ldrbgt	r3, [r2, #1]
   2b9c4:	subgt	r3, r3, #10
   2b9c8:	clzgt	r3, r3
   2b9cc:	lsrgt	r3, r3, #5
   2b9d0:	add	r2, r2, r3
   2b9d4:	ldr	r3, [r5, #16]
   2b9d8:	add	r2, r2, #1
   2b9dc:	add	r3, r3, #1
   2b9e0:	str	r2, [r5, #4]
   2b9e4:	str	r3, [r5, #16]
   2b9e8:	cmp	r4, r2
   2b9ec:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2b9f0:	ldrb	ip, [r2]
   2b9f4:	cmp	ip, #32
   2b9f8:	bls	2b944 <flatcc_json_parser_generic_json@@Base+0x144c>
   2b9fc:	b	2adcc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2ba00:	add	r2, r2, #1
   2ba04:	b	2b9e8 <flatcc_json_parser_generic_json@@Base+0x14f0>
   2ba08:	ldrb	r2, [r1, #2]
   2ba0c:	cmp	r2, #32
   2ba10:	bls	2b6f0 <flatcc_json_parser_generic_json@@Base+0x11f8>
   2ba14:	add	r3, r1, #2
   2ba18:	cmp	r2, #57	; 0x39
   2ba1c:	bhi	2a54c <flatcc_json_parser_generic_json@@Base+0x54>
   2ba20:	cmp	r2, #48	; 0x30
   2ba24:	bcs	2a654 <flatcc_json_parser_generic_json@@Base+0x15c>
   2ba28:	cmp	r2, #34	; 0x22
   2ba2c:	bne	2a64c <flatcc_json_parser_generic_json@@Base+0x154>
   2ba30:	cmp	r3, r4
   2ba34:	beq	2b73c <flatcc_json_parser_generic_json@@Base+0x1244>
   2ba38:	b	2b2f0 <flatcc_json_parser_generic_json@@Base+0xdf8>
   2ba3c:	ldr	r2, [r5, #24]
   2ba40:	cmp	r2, #0
   2ba44:	beq	2bd54 <flatcc_json_parser_generic_json@@Base+0x185c>
   2ba48:	ldr	r3, [r5, #12]
   2ba4c:	cmp	r3, #0
   2ba50:	bne	2bda8 <flatcc_json_parser_generic_json@@Base+0x18b0>
   2ba54:	mov	r1, r4
   2ba58:	mov	r0, r1
   2ba5c:	mov	r1, r4
   2ba60:	ldr	r3, [r5, #24]
   2ba64:	cmp	r3, #0
   2ba68:	beq	2bc74 <flatcc_json_parser_generic_json@@Base+0x177c>
   2ba6c:	mov	r1, r4
   2ba70:	b	2b288 <flatcc_json_parser_generic_json@@Base+0xd90>
   2ba74:	ldrb	r2, [r1, #1]
   2ba78:	cmp	r2, #32
   2ba7c:	addhi	r1, r1, #1
   2ba80:	bls	2b288 <flatcc_json_parser_generic_json@@Base+0xd90>
   2ba84:	cmp	r4, r1
   2ba88:	bne	2b6c0 <flatcc_json_parser_generic_json@@Base+0x11c8>
   2ba8c:	mov	r1, r4
   2ba90:	b	2b2bc <flatcc_json_parser_generic_json@@Base+0xdc4>
   2ba94:	cmp	r3, #31
   2ba98:	bls	2b580 <flatcc_json_parser_generic_json@@Base+0x1088>
   2ba9c:	b	2b36c <flatcc_json_parser_generic_json@@Base+0xe74>
   2baa0:	cmp	r2, #32
   2baa4:	beq	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2baa8:	bls	2bb8c <flatcc_json_parser_generic_json@@Base+0x1694>
   2baac:	cmp	r2, #58	; 0x3a
   2bab0:	beq	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2bab4:	bls	2bc68 <flatcc_json_parser_generic_json@@Base+0x1770>
   2bab8:	cmp	r2, #93	; 0x5d
   2babc:	beq	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2bac0:	cmp	r2, #125	; 0x7d
   2bac4:	bne	2a6bc <flatcc_json_parser_generic_json@@Base+0x1c4>
   2bac8:	b	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2bacc:	ldrb	r3, [r0, #1]
   2bad0:	sub	r3, r3, #48	; 0x30
   2bad4:	cmp	r3, #9
   2bad8:	bhi	2bbe0 <flatcc_json_parser_generic_json@@Base+0x16e8>
   2badc:	add	r3, r0, #2
   2bae0:	cmp	r4, r3
   2bae4:	beq	2be14 <flatcc_json_parser_generic_json@@Base+0x191c>
   2bae8:	ldrb	r2, [r0, #2]
   2baec:	sub	r1, r2, #48	; 0x30
   2baf0:	cmp	r1, #9
   2baf4:	bhi	2bd4c <flatcc_json_parser_generic_json@@Base+0x1854>
   2baf8:	add	r3, r0, #3
   2bafc:	b	2bb10 <flatcc_json_parser_generic_json@@Base+0x1618>
   2bb00:	ldrb	r2, [r3], #1
   2bb04:	sub	r1, r2, #48	; 0x30
   2bb08:	cmp	r1, #9
   2bb0c:	bhi	2bd48 <flatcc_json_parser_generic_json@@Base+0x1850>
   2bb10:	cmp	r3, r4
   2bb14:	mov	r0, r3
   2bb18:	bne	2bb00 <flatcc_json_parser_generic_json@@Base+0x1608>
   2bb1c:	b	2a6bc <flatcc_json_parser_generic_json@@Base+0x1c4>
   2bb20:	ldrb	r2, [r0, #2]
   2bb24:	sub	r2, r2, #48	; 0x30
   2bb28:	cmp	r2, #9
   2bb2c:	bhi	2b464 <flatcc_json_parser_generic_json@@Base+0xf6c>
   2bb30:	add	r0, r3, #1
   2bb34:	cmp	r4, r0
   2bb38:	beq	2be14 <flatcc_json_parser_generic_json@@Base+0x191c>
   2bb3c:	ldrb	r2, [r3, #1]
   2bb40:	sub	r1, r2, #48	; 0x30
   2bb44:	cmp	r1, #9
   2bb48:	bhi	2baa0 <flatcc_json_parser_generic_json@@Base+0x15a8>
   2bb4c:	add	r3, r3, #2
   2bb50:	b	2bb64 <flatcc_json_parser_generic_json@@Base+0x166c>
   2bb54:	ldrb	r2, [r3], #1
   2bb58:	sub	r1, r2, #48	; 0x30
   2bb5c:	cmp	r1, #9
   2bb60:	bhi	2baa0 <flatcc_json_parser_generic_json@@Base+0x15a8>
   2bb64:	cmp	r4, r3
   2bb68:	mov	r0, r3
   2bb6c:	bne	2bb54 <flatcc_json_parser_generic_json@@Base+0x165c>
   2bb70:	b	2a6bc <flatcc_json_parser_generic_json@@Base+0x1c4>
   2bb74:	mov	r0, r4
   2bb78:	add	r1, r1, #1
   2bb7c:	sub	r3, r4, r1
   2bb80:	b	2b26c <flatcc_json_parser_generic_json@@Base+0xd74>
   2bb84:	mov	r1, r4
   2bb88:	b	2ba60 <flatcc_json_parser_generic_json@@Base+0x1568>
   2bb8c:	cmp	r2, #9
   2bb90:	bcc	2a6bc <flatcc_json_parser_generic_json@@Base+0x1c4>
   2bb94:	cmp	r2, #11
   2bb98:	bls	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2bb9c:	cmp	r2, #13
   2bba0:	bne	2a6bc <flatcc_json_parser_generic_json@@Base+0x1c4>
   2bba4:	b	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2bba8:	mov	r0, r2
   2bbac:	b	2ad08 <flatcc_json_parser_generic_json@@Base+0x810>
   2bbb0:	ldr	r3, [r5, #4]
   2bbb4:	mov	r2, #6
   2bbb8:	sub	r3, r0, r3
   2bbbc:	add	r3, r3, #1
   2bbc0:	str	r0, [r5, #36]	; 0x24
   2bbc4:	str	r3, [r5, #20]
   2bbc8:	str	r2, [r5, #24]
   2bbcc:	b	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2bbd0:	cmp	r2, #123	; 0x7b
   2bbd4:	bne	2b8ac <flatcc_json_parser_generic_json@@Base+0x13b4>
   2bbd8:	mov	r3, r4
   2bbdc:	b	2a55c <flatcc_json_parser_generic_json@@Base+0x64>
   2bbe0:	ldr	r3, [r5, #24]
   2bbe4:	cmp	r3, #0
   2bbe8:	bne	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2bbec:	ldr	r3, [r5, #4]
   2bbf0:	add	r0, r0, #1
   2bbf4:	sub	r3, r0, r3
   2bbf8:	add	r3, r3, #1
   2bbfc:	mov	r2, #6
   2bc00:	str	r0, [r5, #36]	; 0x24
   2bc04:	str	r3, [r5, #20]
   2bc08:	str	r2, [r5, #24]
   2bc0c:	b	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2bc10:	sub	r3, r4, r0
   2bc14:	cmp	r3, #1
   2bc18:	movle	r3, r8
   2bc1c:	ldrbgt	r3, [r0, #1]
   2bc20:	subgt	r3, r3, #10
   2bc24:	clzgt	r3, r3
   2bc28:	lsrgt	r3, r3, #5
   2bc2c:	add	r0, r0, r3
   2bc30:	ldr	r3, [r5, #16]
   2bc34:	add	r0, r0, #1
   2bc38:	add	r3, r3, #1
   2bc3c:	str	r0, [r5, #4]
   2bc40:	str	r3, [r5, #16]
   2bc44:	cmp	r4, r0
   2bc48:	beq	2a6cc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2bc4c:	ldrb	r3, [r0]
   2bc50:	cmp	r3, #32
   2bc54:	bls	2b160 <flatcc_json_parser_generic_json@@Base+0xc68>
   2bc58:	mov	r2, r0
   2bc5c:	b	2adcc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2bc60:	add	r0, r0, #1
   2bc64:	b	2bc44 <flatcc_json_parser_generic_json@@Base+0x174c>
   2bc68:	cmp	r2, #44	; 0x2c
   2bc6c:	bne	2a6bc <flatcc_json_parser_generic_json@@Base+0x1c4>
   2bc70:	b	2a8f0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2bc74:	ldr	r3, [r5, #4]
   2bc78:	mov	r2, #20
   2bc7c:	sub	r3, r1, r3
   2bc80:	add	r3, r3, #1
   2bc84:	str	r1, [r5, #36]	; 0x24
   2bc88:	str	r2, [r5, #24]
   2bc8c:	str	r3, [r5, #20]
   2bc90:	mov	r1, r4
   2bc94:	b	2b288 <flatcc_json_parser_generic_json@@Base+0xd90>
   2bc98:	mov	r1, r4
   2bc9c:	cmp	r2, #46	; 0x2e
   2bca0:	bne	2b264 <flatcc_json_parser_generic_json@@Base+0xd6c>
   2bca4:	ldr	r3, [r5, #24]
   2bca8:	cmp	r3, #0
   2bcac:	bne	2bccc <flatcc_json_parser_generic_json@@Base+0x17d4>
   2bcb0:	ldr	r3, [r5, #4]
   2bcb4:	mov	r2, #5
   2bcb8:	sub	r3, r1, r3
   2bcbc:	add	r3, r3, #1
   2bcc0:	str	r1, [r5, #36]	; 0x24
   2bcc4:	str	r3, [r5, #20]
   2bcc8:	str	r2, [r5, #24]
   2bccc:	mov	r0, r4
   2bcd0:	b	2ba6c <flatcc_json_parser_generic_json@@Base+0x1574>
   2bcd4:	ldr	r2, [r5, #24]
   2bcd8:	cmp	r2, #0
   2bcdc:	bne	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2bce0:	ldr	r2, [r5, #4]
   2bce4:	mov	r1, #2
   2bce8:	sub	r2, r3, r2
   2bcec:	add	r2, r2, #1
   2bcf0:	str	r3, [r5, #36]	; 0x24
   2bcf4:	mov	r0, r4
   2bcf8:	str	r2, [r5, #20]
   2bcfc:	str	r1, [r5, #24]
   2bd00:	b	2a6f8 <flatcc_json_parser_generic_json@@Base+0x200>
   2bd04:	ldr	r3, [r5, #24]
   2bd08:	cmp	r3, #0
   2bd0c:	bne	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2bd10:	ldr	r3, [r5, #4]
   2bd14:	mov	r2, #6
   2bd18:	b	2b750 <flatcc_json_parser_generic_json@@Base+0x1258>
   2bd1c:	ldr	r2, [r5, #4]
   2bd20:	str	r3, [r5, #36]	; 0x24
   2bd24:	sub	r3, r3, r2
   2bd28:	add	r3, r3, #1
   2bd2c:	mov	r2, #5
   2bd30:	str	r3, [r5, #20]
   2bd34:	str	r2, [r5, #24]
   2bd38:	b	2b8c0 <flatcc_json_parser_generic_json@@Base+0x13c8>
   2bd3c:	cmp	r2, #45	; 0x2d
   2bd40:	beq	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2bd44:	b	2b8ac <flatcc_json_parser_generic_json@@Base+0x13b4>
   2bd48:	mov	r3, r0
   2bd4c:	mov	r0, r3
   2bd50:	b	2b42c <flatcc_json_parser_generic_json@@Base+0xf34>
   2bd54:	ldr	r2, [r5, #4]
   2bd58:	str	r3, [r5, #36]	; 0x24
   2bd5c:	sub	r3, r3, r2
   2bd60:	add	r3, r3, #1
   2bd64:	mov	r2, #5
   2bd68:	str	r3, [r5, #20]
   2bd6c:	str	r2, [r5, #24]
   2bd70:	b	2ba48 <flatcc_json_parser_generic_json@@Base+0x1550>
   2bd74:	ldr	r2, [r5, #24]
   2bd78:	cmp	r2, #0
   2bd7c:	bne	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2bd80:	ldr	r2, [r5, #4]
   2bd84:	mov	r1, #5
   2bd88:	b	2bce8 <flatcc_json_parser_generic_json@@Base+0x17f0>
   2bd8c:	mov	r0, r2
   2bd90:	b	2afc0 <flatcc_json_parser_generic_json@@Base+0xac8>
   2bd94:	ldrb	r0, [r3, #2]
   2bd98:	cmp	r0, #32
   2bd9c:	bls	2b908 <flatcc_json_parser_generic_json@@Base+0x1410>
   2bda0:	add	r2, r3, #2
   2bda4:	b	2b56c <flatcc_json_parser_generic_json@@Base+0x1074>
   2bda8:	mov	r3, r4
   2bdac:	mov	r0, r3
   2bdb0:	mov	r1, r4
   2bdb4:	sub	r3, r3, r4
   2bdb8:	b	2b26c <flatcc_json_parser_generic_json@@Base+0xd74>
   2bdbc:	mov	r0, r2
   2bdc0:	b	2b938 <flatcc_json_parser_generic_json@@Base+0x1440>
   2bdc4:	ldrb	r0, [r3, #2]
   2bdc8:	cmp	r0, #32
   2bdcc:	bls	2b124 <flatcc_json_parser_generic_json@@Base+0xc2c>
   2bdd0:	b	2bda0 <flatcc_json_parser_generic_json@@Base+0x18a8>
   2bdd4:	sub	r1, r4, r3
   2bdd8:	cmp	r1, #1
   2bddc:	mov	r0, r4
   2bde0:	mov	r1, r3
   2bde4:	bgt	2b280 <flatcc_json_parser_generic_json@@Base+0xd88>
   2bde8:	b	2b288 <flatcc_json_parser_generic_json@@Base+0xd90>
   2bdec:	cmp	r2, #125	; 0x7d
   2bdf0:	add	r6, r6, #1
   2bdf4:	beq	2a8f8 <flatcc_json_parser_generic_json@@Base+0x400>
   2bdf8:	mov	r3, r0
   2bdfc:	b	2aed8 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2be00:	cmp	r3, #91	; 0x5b
   2be04:	beq	2a708 <flatcc_json_parser_generic_json@@Base+0x210>
   2be08:	cmp	r3, #123	; 0x7b
   2be0c:	beq	2bbd8 <flatcc_json_parser_generic_json@@Base+0x16e0>
   2be10:	b	2b8ac <flatcc_json_parser_generic_json@@Base+0x13b4>
   2be14:	mov	r0, r4
   2be18:	b	2a6bc <flatcc_json_parser_generic_json@@Base+0x1c4>
   2be1c:	ldrb	r2, [r4]
   2be20:	b	2b724 <flatcc_json_parser_generic_json@@Base+0x122c>
   2be24:	ldr	r3, [r5, #24]
   2be28:	cmp	r3, #0
   2be2c:	bne	2a6f4 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2be30:	ldr	r3, [r5, #4]
   2be34:	mov	r2, #4
   2be38:	b	2b2d0 <flatcc_json_parser_generic_json@@Base+0xdd8>
   2be3c:	ldr	r3, [r5, #24]
   2be40:	cmp	r3, #0
   2be44:	bne	2a6c8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2be48:	ldr	r3, [r5, #4]
   2be4c:	mov	r2, #20
   2be50:	b	2b750 <flatcc_json_parser_generic_json@@Base+0x1258>
   2be54:	cmp	r2, #93	; 0x5d
   2be58:	add	r6, r6, #1
   2be5c:	bne	2bdf8 <flatcc_json_parser_generic_json@@Base+0x1900>
   2be60:	b	2a8f8 <flatcc_json_parser_generic_json@@Base+0x400>
   2be64:	mov	r3, r1
   2be68:	b	2a70c <flatcc_json_parser_generic_json@@Base+0x214>
   2be6c:	cmp	r2, #48	; 0x30
   2be70:	bcs	2be84 <flatcc_json_parser_generic_json@@Base+0x198c>
   2be74:	cmp	r2, #34	; 0x22
   2be78:	beq	2b2ec <flatcc_json_parser_generic_json@@Base+0xdf4>
   2be7c:	cmp	r2, #45	; 0x2d
   2be80:	bne	2a8cc <flatcc_json_parser_generic_json@@Base+0x3d4>
   2be84:	mov	r3, r1
   2be88:	b	2a654 <flatcc_json_parser_generic_json@@Base+0x15c>

0002be8c <flatcc_json_parser_unmatched_symbol@@Base>:
   2be8c:	ldr	r3, [r0, #8]
   2be90:	tst	r3, #1
   2be94:	bne	2bed0 <flatcc_json_parser_unmatched_symbol@@Base+0x44>
   2be98:	ldr	r3, [r0, #24]
   2be9c:	cmp	r3, #0
   2bea0:	beq	2beac <flatcc_json_parser_unmatched_symbol@@Base+0x20>
   2bea4:	mov	r0, r2
   2bea8:	bx	lr
   2beac:	ldr	r3, [r0, #4]
   2beb0:	mov	ip, #13
   2beb4:	sub	r3, r1, r3
   2beb8:	add	r3, r3, #1
   2bebc:	str	r1, [r0, #36]	; 0x24
   2bec0:	str	r3, [r0, #20]
   2bec4:	str	ip, [r0, #24]
   2bec8:	mov	r0, r2
   2becc:	bx	lr
   2bed0:	ldr	r3, [r0, #12]
   2bed4:	push	{r4, lr}
   2bed8:	cmp	r3, #0
   2bedc:	beq	2bfbc <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   2bee0:	cmp	r1, r2
   2bee4:	beq	2bf34 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   2bee8:	ldrb	ip, [r1]
   2beec:	cmp	ip, #32
   2bef0:	bls	2bf34 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   2bef4:	add	r3, r1, #1
   2bef8:	cmp	ip, #46	; 0x2e
   2befc:	cmpne	ip, #95	; 0x5f
   2bf00:	sub	r1, r3, #1
   2bf04:	beq	2c010 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   2bf08:	sub	lr, ip, #48	; 0x30
   2bf0c:	tst	ip, #128	; 0x80
   2bf10:	uxtb	lr, lr
   2bf14:	bne	2c010 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   2bf18:	orr	r4, ip, #32
   2bf1c:	sub	r4, r4, #97	; 0x61
   2bf20:	cmp	lr, #9
   2bf24:	uxtb	r4, r4
   2bf28:	bls	2c010 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   2bf2c:	cmp	r4, #25
   2bf30:	bls	2c010 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   2bf34:	mov	lr, r2
   2bf38:	sub	r3, r2, r1
   2bf3c:	cmp	r3, #1
   2bf40:	ble	2bf54 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2bf44:	ldrb	ip, [r1]
   2bf48:	cmp	ip, #32
   2bf4c:	bhi	2c18c <flatcc_json_parser_unmatched_symbol@@Base+0x300>
   2bf50:	beq	2c17c <flatcc_json_parser_unmatched_symbol@@Base+0x2f0>
   2bf54:	mov	r4, #0
   2bf58:	cmp	r2, r1
   2bf5c:	beq	2c228 <flatcc_json_parser_unmatched_symbol@@Base+0x39c>
   2bf60:	ldrb	ip, [r1]
   2bf64:	cmp	ip, #32
   2bf68:	bne	2c030 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   2bf6c:	add	r3, r1, #1
   2bf70:	b	2bf80 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   2bf74:	ldrb	ip, [r3], #1
   2bf78:	cmp	ip, #32
   2bf7c:	bne	2c030 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   2bf80:	cmp	r3, r2
   2bf84:	mov	r1, r3
   2bf88:	bne	2bf74 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   2bf8c:	ldr	r3, [r0, #24]
   2bf90:	cmp	r3, #0
   2bf94:	bne	2bfb4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2bf98:	ldr	r3, [r0, #4]
   2bf9c:	mov	ip, #4
   2bfa0:	sub	r3, r1, r3
   2bfa4:	add	r3, r3, #1
   2bfa8:	str	r1, [r0, #36]	; 0x24
   2bfac:	str	r3, [r0, #20]
   2bfb0:	str	ip, [r0, #24]
   2bfb4:	mov	r0, r2
   2bfb8:	pop	{r4, pc}
   2bfbc:	cmp	r1, r2
   2bfc0:	beq	2c310 <flatcc_json_parser_unmatched_symbol@@Base+0x484>
   2bfc4:	ldrb	ip, [r1]
   2bfc8:	cmp	ip, #34	; 0x22
   2bfcc:	movne	lr, r2
   2bfd0:	bne	2bff0 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   2bfd4:	b	2c1b8 <flatcc_json_parser_unmatched_symbol@@Base+0x32c>
   2bfd8:	add	r1, r3, #1
   2bfdc:	cmp	r2, r1
   2bfe0:	beq	2c1a0 <flatcc_json_parser_unmatched_symbol@@Base+0x314>
   2bfe4:	ldrb	ip, [r3, #1]
   2bfe8:	cmp	ip, #34	; 0x22
   2bfec:	beq	2c1bc <flatcc_json_parser_unmatched_symbol@@Base+0x330>
   2bff0:	cmp	ip, #92	; 0x5c
   2bff4:	mov	r3, r1
   2bff8:	bne	2bfd8 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   2bffc:	sub	r3, r2, r1
   2c000:	cmp	r3, #1
   2c004:	ble	2c1a4 <flatcc_json_parser_unmatched_symbol@@Base+0x318>
   2c008:	add	r3, r1, #1
   2c00c:	b	2bfd8 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   2c010:	cmp	r2, r3
   2c014:	mov	r1, r3
   2c018:	beq	2c1c8 <flatcc_json_parser_unmatched_symbol@@Base+0x33c>
   2c01c:	ldrb	lr, [r3], #1
   2c020:	cmp	lr, #32
   2c024:	bls	2c1cc <flatcc_json_parser_unmatched_symbol@@Base+0x340>
   2c028:	mov	ip, lr
   2c02c:	b	2bef8 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>
   2c030:	cmp	ip, #32
   2c034:	bhi	2c0f0 <flatcc_json_parser_unmatched_symbol@@Base+0x264>
   2c038:	sub	ip, ip, #9
   2c03c:	cmp	ip, #23
   2c040:	ldrls	pc, [pc, ip, lsl #2]
   2c044:	b	2c164 <flatcc_json_parser_unmatched_symbol@@Base+0x2d8>
   2c048:	andeq	ip, r2, ip, asr r1
   2c04c:	andeq	ip, r2, r8, asr #1
   2c050:	andeq	ip, r2, r4, ror #2
   2c054:	andeq	ip, r2, r4, ror #2
   2c058:	andeq	ip, r2, r8, lsr #1
   2c05c:	andeq	ip, r2, r4, ror #2
   2c060:	andeq	ip, r2, r4, ror #2
   2c064:	andeq	ip, r2, r4, ror #2
   2c068:	andeq	ip, r2, r4, ror #2
   2c06c:	andeq	ip, r2, r4, ror #2
   2c070:	andeq	ip, r2, r4, ror #2
   2c074:	andeq	ip, r2, r4, ror #2
   2c078:	andeq	ip, r2, r4, ror #2
   2c07c:	andeq	ip, r2, r4, ror #2
   2c080:	andeq	ip, r2, r4, ror #2
   2c084:	andeq	ip, r2, r4, ror #2
   2c088:	andeq	ip, r2, r4, ror #2
   2c08c:	andeq	ip, r2, r4, ror #2
   2c090:	andeq	ip, r2, r4, ror #2
   2c094:	andeq	ip, r2, r4, ror #2
   2c098:	andeq	ip, r2, r4, ror #2
   2c09c:	andeq	ip, r2, r4, ror #2
   2c0a0:	andeq	ip, r2, r4, ror #2
   2c0a4:	andeq	fp, r2, r8, asr pc
   2c0a8:	sub	r3, lr, r1
   2c0ac:	cmp	r3, #1
   2c0b0:	movle	r3, r4
   2c0b4:	ldrbgt	r3, [r1, #1]
   2c0b8:	subgt	r3, r3, #10
   2c0bc:	clzgt	r3, r3
   2c0c0:	lsrgt	r3, r3, #5
   2c0c4:	add	r1, r1, r3
   2c0c8:	ldr	r3, [r0, #16]
   2c0cc:	add	r1, r1, #1
   2c0d0:	add	r3, r3, #1
   2c0d4:	str	r1, [r0, #4]
   2c0d8:	str	r3, [r0, #16]
   2c0dc:	cmp	r2, r1
   2c0e0:	beq	2c228 <flatcc_json_parser_unmatched_symbol@@Base+0x39c>
   2c0e4:	ldrb	ip, [r1]
   2c0e8:	cmp	ip, #32
   2c0ec:	bls	2c038 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   2c0f0:	cmp	ip, #58	; 0x3a
   2c0f4:	bne	2bf8c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2c0f8:	add	r4, r1, #1
   2c0fc:	sub	r3, lr, r4
   2c100:	cmp	r3, #1
   2c104:	ble	2c118 <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   2c108:	ldrb	r3, [r1, #1]
   2c10c:	cmp	r3, #32
   2c110:	bhi	2c150 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   2c114:	beq	2c318 <flatcc_json_parser_unmatched_symbol@@Base+0x48c>
   2c118:	mov	r1, #0
   2c11c:	cmp	r2, r4
   2c120:	beq	2c308 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   2c124:	ldrb	ip, [r4]
   2c128:	cmp	ip, #32
   2c12c:	bne	2c230 <flatcc_json_parser_unmatched_symbol@@Base+0x3a4>
   2c130:	add	r3, r4, #1
   2c134:	b	2c144 <flatcc_json_parser_unmatched_symbol@@Base+0x2b8>
   2c138:	ldrb	ip, [r3], #1
   2c13c:	cmp	ip, #32
   2c140:	bne	2c230 <flatcc_json_parser_unmatched_symbol@@Base+0x3a4>
   2c144:	cmp	r3, r2
   2c148:	mov	r4, r3
   2c14c:	bne	2c138 <flatcc_json_parser_unmatched_symbol@@Base+0x2ac>
   2c150:	mov	r1, r4
   2c154:	pop	{r4, lr}
   2c158:	b	2a4f8 <flatcc_json_parser_generic_json@@Base>
   2c15c:	add	r1, r1, #1
   2c160:	b	2c0dc <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   2c164:	ldr	r3, [r0, #24]
   2c168:	cmp	r3, #0
   2c16c:	bne	2bfb4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2c170:	ldr	r3, [r0, #4]
   2c174:	mov	ip, #5
   2c178:	b	2bfa0 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   2c17c:	ldrb	ip, [r1, #1]
   2c180:	cmp	ip, #32
   2c184:	addhi	r1, r1, #1
   2c188:	bls	2bf54 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2c18c:	cmp	r2, r1
   2c190:	beq	2bf8c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2c194:	cmp	ip, #58	; 0x3a
   2c198:	bne	2bf8c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2c19c:	b	2c0f8 <flatcc_json_parser_unmatched_symbol@@Base+0x26c>
   2c1a0:	mov	r1, r2
   2c1a4:	ldr	r3, [r0, #24]
   2c1a8:	cmp	r3, #0
   2c1ac:	beq	2c208 <flatcc_json_parser_unmatched_symbol@@Base+0x37c>
   2c1b0:	mov	r1, r2
   2c1b4:	b	2bf54 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2c1b8:	mov	lr, r2
   2c1bc:	add	r1, r1, #1
   2c1c0:	sub	r3, r2, r1
   2c1c4:	b	2bf3c <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   2c1c8:	mov	r1, r2
   2c1cc:	cmp	ip, #46	; 0x2e
   2c1d0:	bne	2bf34 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   2c1d4:	ldr	r3, [r0, #24]
   2c1d8:	cmp	r3, #0
   2c1dc:	beq	2c1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x35c>
   2c1e0:	mov	lr, r2
   2c1e4:	b	2c1b0 <flatcc_json_parser_unmatched_symbol@@Base+0x324>
   2c1e8:	ldr	r3, [r0, #4]
   2c1ec:	mov	ip, #5
   2c1f0:	sub	r3, r1, r3
   2c1f4:	add	r3, r3, #1
   2c1f8:	str	r1, [r0, #36]	; 0x24
   2c1fc:	str	r3, [r0, #20]
   2c200:	str	ip, [r0, #24]
   2c204:	b	2c1e0 <flatcc_json_parser_unmatched_symbol@@Base+0x354>
   2c208:	ldr	r3, [r0, #4]
   2c20c:	mov	ip, #20
   2c210:	sub	r3, r1, r3
   2c214:	add	r3, r3, #1
   2c218:	str	r1, [r0, #36]	; 0x24
   2c21c:	str	r3, [r0, #20]
   2c220:	str	ip, [r0, #24]
   2c224:	b	2c1b0 <flatcc_json_parser_unmatched_symbol@@Base+0x324>
   2c228:	mov	r1, r2
   2c22c:	b	2bf8c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2c230:	cmp	ip, #32
   2c234:	bhi	2c150 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   2c238:	sub	ip, ip, #9
   2c23c:	cmp	ip, #23
   2c240:	ldrls	pc, [pc, ip, lsl #2]
   2c244:	b	2c2fc <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   2c248:	strdeq	ip, [r2], -r4
   2c24c:	andeq	ip, r2, r8, asr #5
   2c250:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c254:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c258:	andeq	ip, r2, r8, lsr #5
   2c25c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c260:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c264:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c268:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c26c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c270:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c274:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c278:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c27c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c280:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c284:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c288:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c28c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c290:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c294:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c298:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c29c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c2a0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c2a4:	andeq	ip, r2, ip, lsl r1
   2c2a8:	sub	r3, lr, r4
   2c2ac:	cmp	r3, #1
   2c2b0:	movle	r3, r1
   2c2b4:	ldrbgt	r3, [r4, #1]
   2c2b8:	subgt	r3, r3, #10
   2c2bc:	clzgt	r3, r3
   2c2c0:	lsrgt	r3, r3, #5
   2c2c4:	add	r4, r4, r3
   2c2c8:	ldr	r3, [r0, #16]
   2c2cc:	add	r4, r4, #1
   2c2d0:	add	r3, r3, #1
   2c2d4:	str	r4, [r0, #4]
   2c2d8:	str	r3, [r0, #16]
   2c2dc:	cmp	r2, r4
   2c2e0:	beq	2c308 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   2c2e4:	ldrb	ip, [r4]
   2c2e8:	cmp	ip, #32
   2c2ec:	bls	2c238 <flatcc_json_parser_unmatched_symbol@@Base+0x3ac>
   2c2f0:	b	2c150 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   2c2f4:	add	r4, r4, #1
   2c2f8:	b	2c2dc <flatcc_json_parser_unmatched_symbol@@Base+0x450>
   2c2fc:	ldr	r3, [r0, #24]
   2c300:	cmp	r3, #0
   2c304:	beq	2c32c <flatcc_json_parser_unmatched_symbol@@Base+0x4a0>
   2c308:	mov	r4, r2
   2c30c:	b	2c150 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   2c310:	mov	lr, r1
   2c314:	b	2c1a4 <flatcc_json_parser_unmatched_symbol@@Base+0x318>
   2c318:	ldrb	r3, [r1, #2]
   2c31c:	cmp	r3, #32
   2c320:	addhi	r4, r1, #2
   2c324:	bls	2c118 <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   2c328:	b	2c150 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   2c32c:	ldr	r3, [r0, #4]
   2c330:	mov	r1, #5
   2c334:	sub	r3, r4, r3
   2c338:	add	r3, r3, #1
   2c33c:	str	r4, [r0, #36]	; 0x24
   2c340:	str	r3, [r0, #20]
   2c344:	str	r1, [r0, #24]
   2c348:	mov	r4, r2
   2c34c:	b	2c150 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>

0002c350 <flatcc_json_parser_integer@@Base>:
   2c350:	cmp	r1, r2
   2c354:	beq	2c474 <flatcc_json_parser_integer@@Base+0x124>
   2c358:	push	{r4, r5, r6, r7, r8, r9, lr}
   2c35c:	mov	r8, r0
   2c360:	ldrb	ip, [r1]
   2c364:	sub	ip, ip, #45	; 0x2d
   2c368:	clz	ip, ip
   2c36c:	lsr	ip, ip, #5
   2c370:	add	r0, r1, ip
   2c374:	cmp	r2, r0
   2c378:	str	ip, [r3]
   2c37c:	beq	2c480 <flatcc_json_parser_integer@@Base+0x130>
   2c380:	ldrb	ip, [r1, ip]
   2c384:	sub	r3, ip, #48	; 0x30
   2c388:	cmp	r3, #9
   2c38c:	bhi	2c404 <flatcc_json_parser_integer@@Base+0xb4>
   2c390:	uxtb	r6, ip
   2c394:	mov	r7, #0
   2c398:	subs	r6, r6, #48	; 0x30
   2c39c:	add	r3, r0, #1
   2c3a0:	sbc	r7, r7, #0
   2c3a4:	mov	lr, #10
   2c3a8:	b	2c3e4 <flatcc_json_parser_integer@@Base+0x94>
   2c3ac:	ldrb	ip, [r3]
   2c3b0:	add	r3, r3, #1
   2c3b4:	sub	r9, ip, #48	; 0x30
   2c3b8:	cmp	r9, #9
   2c3bc:	bhi	2c40c <flatcc_json_parser_integer@@Base+0xbc>
   2c3c0:	subs	r4, r4, #48	; 0x30
   2c3c4:	sbc	r5, r5, #0
   2c3c8:	adds	r4, r4, ip
   2c3cc:	adc	r5, r5, #0
   2c3d0:	cmp	r5, r7
   2c3d4:	cmpeq	r4, r6
   2c3d8:	mov	r7, r5
   2c3dc:	mov	r6, r4
   2c3e0:	bcc	2c438 <flatcc_json_parser_integer@@Base+0xe8>
   2c3e4:	umull	r4, r5, r6, lr
   2c3e8:	cmp	r3, r2
   2c3ec:	mla	r5, lr, r7, r5
   2c3f0:	mov	r0, r3
   2c3f4:	bne	2c3ac <flatcc_json_parser_integer@@Base+0x5c>
   2c3f8:	ldr	r3, [sp, #28]
   2c3fc:	strd	r6, [r3]
   2c400:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c404:	mov	r6, #0
   2c408:	mov	r7, #0
   2c40c:	cmp	r1, r0
   2c410:	beq	2c47c <flatcc_json_parser_integer@@Base+0x12c>
   2c414:	and	r3, ip, #223	; 0xdf
   2c418:	cmp	ip, #46	; 0x2e
   2c41c:	cmpne	r3, #69	; 0x45
   2c420:	bne	2c3f8 <flatcc_json_parser_integer@@Base+0xa8>
   2c424:	ldr	r3, [r8, #24]
   2c428:	cmp	r3, #0
   2c42c:	beq	2c468 <flatcc_json_parser_integer@@Base+0x118>
   2c430:	mov	r0, r2
   2c434:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c438:	ldr	r3, [r8, #24]
   2c43c:	cmp	r3, #0
   2c440:	bne	2c430 <flatcc_json_parser_integer@@Base+0xe0>
   2c444:	ldr	r3, [r8, #4]
   2c448:	mov	r1, #8
   2c44c:	sub	r3, r0, r3
   2c450:	add	r3, r3, #1
   2c454:	str	r0, [r8, #36]	; 0x24
   2c458:	str	r3, [r8, #20]
   2c45c:	mov	r0, r2
   2c460:	str	r1, [r8, #24]
   2c464:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c468:	ldr	r3, [r8, #4]
   2c46c:	mov	r1, #12
   2c470:	b	2c44c <flatcc_json_parser_integer@@Base+0xfc>
   2c474:	mov	r0, r2
   2c478:	bx	lr
   2c47c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c480:	mov	r6, #0
   2c484:	mov	r7, #0
   2c488:	b	2c3f8 <flatcc_json_parser_integer@@Base+0xa8>

0002c48c <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2c48c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c490:	sub	sp, sp, #36	; 0x24
   2c494:	mov	r4, r2
   2c498:	ldr	r7, [sp, #72]	; 0x48
   2c49c:	mov	r6, r0
   2c4a0:	adds	r9, r7, #0
   2c4a4:	movne	r9, #1
   2c4a8:	cmp	r1, r2
   2c4ac:	mov	r8, r3
   2c4b0:	beq	2c4c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   2c4b4:	ldrb	r3, [r1]
   2c4b8:	cmp	r3, #34	; 0x22
   2c4bc:	beq	2c520 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   2c4c0:	ldr	r3, [r6, #24]
   2c4c4:	cmp	r3, #0
   2c4c8:	beq	2c644 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2c4cc:	mov	r5, r4
   2c4d0:	mov	r3, #0
   2c4d4:	str	r3, [r8]
   2c4d8:	ldr	r3, [r6, #24]
   2c4dc:	cmp	r7, #0
   2c4e0:	moveq	r7, #31
   2c4e4:	movne	r7, #32
   2c4e8:	cmp	r3, #0
   2c4ec:	beq	2c4fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   2c4f0:	mov	r0, r4
   2c4f4:	add	sp, sp, #36	; 0x24
   2c4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4fc:	ldr	r3, [r6, #4]
   2c500:	mov	r0, r4
   2c504:	sub	r3, r5, r3
   2c508:	add	r3, r3, #1
   2c50c:	str	r7, [r6, #24]
   2c510:	str	r5, [r6, #36]	; 0x24
   2c514:	str	r3, [r6, #20]
   2c518:	add	sp, sp, #36	; 0x24
   2c51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c520:	add	fp, r1, #1
   2c524:	cmp	r2, fp
   2c528:	beq	2c90c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x480>
   2c52c:	ldrb	r3, [r1, #1]
   2c530:	cmp	r3, #34	; 0x22
   2c534:	cmpne	r3, #31
   2c538:	movhi	r2, #1
   2c53c:	movls	r2, #0
   2c540:	cmp	r3, #92	; 0x5c
   2c544:	moveq	r2, #0
   2c548:	andne	r2, r2, #1
   2c54c:	cmp	r2, #0
   2c550:	beq	2c884 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
   2c554:	add	r1, r1, #2
   2c558:	cmp	r4, r1
   2c55c:	mov	r5, r1
   2c560:	beq	2c910 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x484>
   2c564:	ldrb	r3, [r1], #1
   2c568:	cmp	r3, #34	; 0x22
   2c56c:	cmpne	r3, #31
   2c570:	movhi	r2, #1
   2c574:	movls	r2, #0
   2c578:	cmp	r3, #92	; 0x5c
   2c57c:	moveq	r2, #0
   2c580:	andne	r2, r2, #1
   2c584:	cmp	r2, #0
   2c588:	bne	2c558 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xcc>
   2c58c:	cmp	r3, #31
   2c590:	bhi	2c5c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   2c594:	ldr	r3, [r6, #24]
   2c598:	cmp	r3, #0
   2c59c:	bne	2c4cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2c5a0:	ldr	r3, [r6, #4]
   2c5a4:	mov	r2, #17
   2c5a8:	sub	r3, r5, r3
   2c5ac:	add	r3, r3, #1
   2c5b0:	str	r5, [r6, #36]	; 0x24
   2c5b4:	str	r3, [r6, #20]
   2c5b8:	str	r2, [r6, #24]
   2c5bc:	b	2c4cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2c5c0:	cmp	r3, #34	; 0x22
   2c5c4:	bne	2c4d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   2c5c8:	sub	sl, r5, fp
   2c5cc:	and	r2, sl, #3
   2c5d0:	lsr	r3, sl, #2
   2c5d4:	cmp	r2, #2
   2c5d8:	add	r3, r3, r3, lsl #1
   2c5dc:	str	r3, [sp]
   2c5e0:	beq	2c664 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d8>
   2c5e4:	cmp	r2, #3
   2c5e8:	addeq	r3, r3, #2
   2c5ec:	streq	r3, [sp]
   2c5f0:	mov	r2, #1
   2c5f4:	mov	r1, r2
   2c5f8:	mvn	r3, #0
   2c5fc:	ldr	r0, [r6]
   2c600:	bl	23d38 <flatcc_builder_start_vector@@Base>
   2c604:	cmp	r0, #0
   2c608:	beq	2c670 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   2c60c:	mov	r3, #0
   2c610:	str	r3, [r8]
   2c614:	ldr	r3, [r6, #24]
   2c618:	cmp	r3, #0
   2c61c:	bne	2c4f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   2c620:	ldr	r3, [r6, #4]
   2c624:	mov	r2, #33	; 0x21
   2c628:	sub	r3, r5, r3
   2c62c:	add	r3, r3, #1
   2c630:	str	r5, [r6, #36]	; 0x24
   2c634:	mov	r0, r4
   2c638:	str	r3, [r6, #20]
   2c63c:	str	r2, [r6, #24]
   2c640:	b	2c4f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2c644:	ldr	r3, [r6, #4]
   2c648:	mov	r2, #16
   2c64c:	sub	r3, r1, r3
   2c650:	add	r3, r3, #1
   2c654:	str	r1, [r6, #36]	; 0x24
   2c658:	str	r3, [r6, #20]
   2c65c:	str	r2, [r6, #24]
   2c660:	b	2c4cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2c664:	add	r3, r3, #1
   2c668:	str	r3, [sp]
   2c66c:	b	2c5f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   2c670:	ldr	r1, [sp]
   2c674:	ldr	r0, [r6]
   2c678:	bl	231cc <flatcc_builder_extend_vector@@Base>
   2c67c:	subs	r2, r0, #0
   2c680:	mov	lr, r2
   2c684:	str	r2, [sp, #8]
   2c688:	beq	2c60c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   2c68c:	ldr	r3, [pc, #660]	; 2c928 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x49c>
   2c690:	cmp	r9, #0
   2c694:	add	r2, r3, #256	; 0x100
   2c698:	movne	r9, r3
   2c69c:	ldr	r3, [sp]
   2c6a0:	moveq	r9, r2
   2c6a4:	cmp	r3, #0
   2c6a8:	mvneq	r3, #0
   2c6ac:	str	r3, [sp, #12]
   2c6b0:	mov	ip, fp
   2c6b4:	mov	r3, sl
   2c6b8:	str	sl, [sp, #4]
   2c6bc:	cmp	r3, #0
   2c6c0:	beq	2c77c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f0>
   2c6c4:	mov	r2, #0
   2c6c8:	ldrb	r1, [ip, r2]
   2c6cc:	ldrb	r0, [r9, r1]
   2c6d0:	add	r1, sp, #32
   2c6d4:	add	r1, r1, r2
   2c6d8:	cmp	r0, #63	; 0x3f
   2c6dc:	strb	r0, [r1, #-4]
   2c6e0:	bls	2c730 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   2c6e4:	cmp	r0, #65	; 0x41
   2c6e8:	beq	2c724 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x298>
   2c6ec:	cmp	r0, #66	; 0x42
   2c6f0:	movne	r1, r2
   2c6f4:	beq	2c7e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x354>
   2c6f8:	sub	r3, r3, r1
   2c6fc:	cmp	r2, #2
   2c700:	beq	2c74c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   2c704:	cmp	r2, #3
   2c708:	beq	2c834 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   2c70c:	cmp	r2, #0
   2c710:	beq	2c76c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   2c714:	ldr	r3, [sp, #4]
   2c718:	sub	lr, sl, r3
   2c71c:	add	r5, fp, lr
   2c720:	b	2c4d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   2c724:	add	ip, ip, #1
   2c728:	sub	r3, r3, #1
   2c72c:	sub	r2, r2, #1
   2c730:	add	r2, r2, #1
   2c734:	cmp	r2, #3
   2c738:	bhi	2c88c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x400>
   2c73c:	cmp	r2, r3
   2c740:	bne	2c6c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   2c744:	mov	r3, #0
   2c748:	b	2c6fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
   2c74c:	ldrb	r2, [sp, #29]
   2c750:	lsl	r1, r2, #4
   2c754:	tst	r1, #240	; 0xf0
   2c758:	bne	2c714 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   2c75c:	ldrb	r1, [sp, #28]
   2c760:	lsr	r2, r2, #4
   2c764:	orr	r2, r2, r1, lsl #2
   2c768:	strb	r2, [lr], #1
   2c76c:	sub	r3, sl, r3
   2c770:	cmp	sl, r3
   2c774:	addne	r5, fp, r3
   2c778:	bne	2c4d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   2c77c:	ldr	r3, [sp, #8]
   2c780:	sub	r1, lr, r3
   2c784:	ldr	r3, [sp]
   2c788:	cmp	r3, r1
   2c78c:	bls	2c7a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x318>
   2c790:	sub	r1, r3, r1
   2c794:	ldr	r0, [r6]
   2c798:	bl	23b84 <flatcc_builder_truncate_vector@@Base>
   2c79c:	cmp	r0, #0
   2c7a0:	bne	2c60c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   2c7a4:	ldr	r0, [r6]
   2c7a8:	bl	25218 <flatcc_builder_end_vector@@Base>
   2c7ac:	cmp	r0, #0
   2c7b0:	str	r0, [r8]
   2c7b4:	beq	2c60c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   2c7b8:	ldrb	r3, [r5]
   2c7bc:	cmp	r3, #34	; 0x22
   2c7c0:	addeq	r0, r5, #1
   2c7c4:	beq	2c4f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2c7c8:	ldr	r3, [r6, #24]
   2c7cc:	cmp	r3, #0
   2c7d0:	bne	2c4f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   2c7d4:	ldr	r3, [r6, #4]
   2c7d8:	mov	r2, #20
   2c7dc:	b	2c628 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   2c7e0:	add	r1, r2, #1
   2c7e4:	cmp	r1, #7
   2c7e8:	cmpls	r1, r3
   2c7ec:	bcs	2c6f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   2c7f0:	ldrb	r0, [ip, r1]
   2c7f4:	add	ip, ip, r1
   2c7f8:	ldrb	r0, [r9, r0]
   2c7fc:	sub	r0, r0, #65	; 0x41
   2c800:	cmp	r0, #1
   2c804:	bls	2c820 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   2c808:	b	2c6f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   2c80c:	ldrb	r0, [ip, #1]!
   2c810:	ldrb	r0, [r9, r0]
   2c814:	sub	r0, r0, #65	; 0x41
   2c818:	cmp	r0, #1
   2c81c:	bhi	2c6f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   2c820:	add	r1, r1, #1
   2c824:	cmp	r1, #7
   2c828:	cmpls	r1, r3
   2c82c:	bcc	2c80c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   2c830:	b	2c6f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   2c834:	ldrb	r2, [sp, #30]
   2c838:	ldr	r0, [sp, #12]
   2c83c:	lsl	r1, r2, #6
   2c840:	tst	r1, #192	; 0xc0
   2c844:	movne	r1, #1
   2c848:	moveq	r1, #0
   2c84c:	cmp	r0, #1
   2c850:	orreq	r1, r1, #1
   2c854:	cmp	r1, #0
   2c858:	bne	2c714 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   2c85c:	ldrb	r1, [sp, #29]
   2c860:	ldrb	r0, [sp, #28]
   2c864:	lsr	r2, r2, #2
   2c868:	add	lr, lr, #2
   2c86c:	orr	r2, r2, r1, lsl #4
   2c870:	lsr	r1, r1, #4
   2c874:	orr	r0, r1, r0, lsl #2
   2c878:	strb	r2, [lr, #-1]
   2c87c:	strb	r0, [lr, #-2]
   2c880:	b	2c76c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   2c884:	mov	r5, fp
   2c888:	b	2c58c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x100>
   2c88c:	ldr	r2, [sp, #12]
   2c890:	cmp	r2, #2
   2c894:	bls	2c714 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   2c898:	ldrb	r1, [sp, #29]
   2c89c:	subs	r2, r2, #3
   2c8a0:	str	r2, [sp, #12]
   2c8a4:	mov	r0, r1
   2c8a8:	ldrb	r1, [sp, #30]
   2c8ac:	str	r0, [sp, #4]
   2c8b0:	lsr	r0, r0, #4
   2c8b4:	str	r1, [sp, #16]
   2c8b8:	ldrb	r1, [sp, #28]
   2c8bc:	add	ip, ip, #4
   2c8c0:	sub	r3, r3, #4
   2c8c4:	str	r1, [sp, #20]
   2c8c8:	ldr	r2, [sp, #20]
   2c8cc:	ldrb	r1, [sp, #31]
   2c8d0:	add	lr, lr, #3
   2c8d4:	orr	r0, r0, r2, lsl #2
   2c8d8:	ldr	r2, [sp, #16]
   2c8dc:	strb	r0, [lr, #-3]
   2c8e0:	orr	r1, r1, r2, lsl #6
   2c8e4:	str	r1, [sp, #16]
   2c8e8:	ldr	r1, [sp, #4]
   2c8ec:	lsr	r2, r2, #2
   2c8f0:	orr	r2, r2, r1, lsl #4
   2c8f4:	strb	r2, [lr, #-2]
   2c8f8:	ldrb	r2, [sp, #16]
   2c8fc:	strb	r2, [lr, #-1]
   2c900:	beq	2c76c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   2c904:	str	r3, [sp, #4]
   2c908:	b	2c6bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   2c90c:	mov	r5, r2
   2c910:	ldr	r3, [r6, #24]
   2c914:	cmp	r3, #0
   2c918:	bne	2c4cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2c91c:	ldr	r3, [r6, #4]
   2c920:	mov	r2, #20
   2c924:	b	2c5a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   2c928:	andeq	pc, r2, r8, asr #26

0002c92c <flatcc_json_parser_build_string@@Base>:
   2c92c:	cmp	r1, r2
   2c930:	push	{r4, r5, r6, r7, r8, lr}
   2c934:	mov	r5, r2
   2c938:	sub	sp, sp, #8
   2c93c:	mov	r6, r0
   2c940:	mov	r7, r3
   2c944:	beq	2c954 <flatcc_json_parser_build_string@@Base+0x28>
   2c948:	ldrb	r3, [r1]
   2c94c:	cmp	r3, #34	; 0x22
   2c950:	beq	2caf8 <flatcc_json_parser_build_string@@Base+0x1cc>
   2c954:	ldr	r3, [r6, #24]
   2c958:	cmp	r3, #0
   2c95c:	beq	2cbb0 <flatcc_json_parser_build_string@@Base+0x284>
   2c960:	mov	r4, r5
   2c964:	mov	r8, r5
   2c968:	ldr	r0, [r6]
   2c96c:	bl	2428c <flatcc_builder_start_string@@Base>
   2c970:	cmp	r0, #0
   2c974:	beq	2c98c <flatcc_json_parser_build_string@@Base+0x60>
   2c978:	mov	r3, #0
   2c97c:	str	r3, [r7]
   2c980:	mov	r0, r4
   2c984:	add	sp, sp, #8
   2c988:	pop	{r4, r5, r6, r7, r8, pc}
   2c98c:	sub	r2, r4, r8
   2c990:	mov	r1, r8
   2c994:	ldr	r0, [r6]
   2c998:	bl	238b0 <flatcc_builder_append_string@@Base>
   2c99c:	cmp	r0, #0
   2c9a0:	beq	2c978 <flatcc_json_parser_build_string@@Base+0x4c>
   2c9a4:	cmp	r5, r4
   2c9a8:	beq	2cc20 <flatcc_json_parser_build_string@@Base+0x2f4>
   2c9ac:	ldrb	r3, [r4]
   2c9b0:	cmp	r3, #34	; 0x22
   2c9b4:	beq	2cc00 <flatcc_json_parser_build_string@@Base+0x2d4>
   2c9b8:	mov	r1, r4
   2c9bc:	add	r3, sp, #4
   2c9c0:	mov	r2, r5
   2c9c4:	mov	r0, r6
   2c9c8:	bl	297fc <flatcc_json_parser_string_escape@@Base>
   2c9cc:	ldrb	r2, [sp, #4]
   2c9d0:	add	r1, sp, #5
   2c9d4:	mov	r8, r0
   2c9d8:	ldr	r0, [r6]
   2c9dc:	bl	238b0 <flatcc_builder_append_string@@Base>
   2c9e0:	cmp	r0, #0
   2c9e4:	beq	2cc18 <flatcc_json_parser_build_string@@Base+0x2ec>
   2c9e8:	cmp	r5, r8
   2c9ec:	beq	2cc10 <flatcc_json_parser_build_string@@Base+0x2e4>
   2c9f0:	ldrb	r3, [r8]
   2c9f4:	cmp	r3, #34	; 0x22
   2c9f8:	cmpne	r3, #31
   2c9fc:	movhi	r2, #1
   2ca00:	movls	r2, #0
   2ca04:	cmp	r3, #92	; 0x5c
   2ca08:	moveq	r2, #0
   2ca0c:	andne	r2, r2, #1
   2ca10:	cmp	r2, #0
   2ca14:	beq	2caa4 <flatcc_json_parser_build_string@@Base+0x178>
   2ca18:	add	r2, r8, #1
   2ca1c:	b	2ca48 <flatcc_json_parser_build_string@@Base+0x11c>
   2ca20:	ldrb	r3, [r2], #1
   2ca24:	cmp	r3, #34	; 0x22
   2ca28:	cmpne	r3, #31
   2ca2c:	movhi	r1, #1
   2ca30:	movls	r1, #0
   2ca34:	cmp	r3, #92	; 0x5c
   2ca38:	moveq	r1, #0
   2ca3c:	andne	r1, r1, #1
   2ca40:	cmp	r1, #0
   2ca44:	beq	2caa8 <flatcc_json_parser_build_string@@Base+0x17c>
   2ca48:	cmp	r5, r2
   2ca4c:	mov	r4, r2
   2ca50:	bne	2ca20 <flatcc_json_parser_build_string@@Base+0xf4>
   2ca54:	ldr	r3, [r6, #24]
   2ca58:	cmp	r3, #0
   2ca5c:	beq	2cbf4 <flatcc_json_parser_build_string@@Base+0x2c8>
   2ca60:	ldr	r0, [r6]
   2ca64:	bl	26474 <flatcc_builder_end_string@@Base>
   2ca68:	mov	r4, r5
   2ca6c:	str	r0, [r7]
   2ca70:	ldr	r3, [r6, #24]
   2ca74:	cmp	r3, #0
   2ca78:	movne	r4, r5
   2ca7c:	bne	2c980 <flatcc_json_parser_build_string@@Base+0x54>
   2ca80:	ldr	r3, [r6, #4]
   2ca84:	mov	r2, #20
   2ca88:	sub	r3, r4, r3
   2ca8c:	add	r3, r3, #1
   2ca90:	str	r4, [r6, #36]	; 0x24
   2ca94:	str	r3, [r6, #20]
   2ca98:	mov	r4, r5
   2ca9c:	str	r2, [r6, #24]
   2caa0:	b	2c980 <flatcc_json_parser_build_string@@Base+0x54>
   2caa4:	mov	r4, r8
   2caa8:	cmp	r3, #31
   2caac:	bhi	2cadc <flatcc_json_parser_build_string@@Base+0x1b0>
   2cab0:	ldr	r3, [r6, #24]
   2cab4:	cmp	r3, #0
   2cab8:	bne	2ca60 <flatcc_json_parser_build_string@@Base+0x134>
   2cabc:	ldr	r3, [r6, #4]
   2cac0:	mov	r2, #17
   2cac4:	sub	r3, r4, r3
   2cac8:	add	r3, r3, #1
   2cacc:	str	r4, [r6, #36]	; 0x24
   2cad0:	str	r3, [r6, #20]
   2cad4:	str	r2, [r6, #24]
   2cad8:	b	2ca60 <flatcc_json_parser_build_string@@Base+0x134>
   2cadc:	sub	r2, r4, r8
   2cae0:	mov	r1, r8
   2cae4:	ldr	r0, [r6]
   2cae8:	bl	238b0 <flatcc_builder_append_string@@Base>
   2caec:	cmp	r0, #0
   2caf0:	bne	2c9ac <flatcc_json_parser_build_string@@Base+0x80>
   2caf4:	b	2c978 <flatcc_json_parser_build_string@@Base+0x4c>
   2caf8:	add	r8, r1, #1
   2cafc:	cmp	r2, r8
   2cb00:	beq	2cc38 <flatcc_json_parser_build_string@@Base+0x30c>
   2cb04:	ldrb	r2, [r1, #1]
   2cb08:	cmp	r2, #34	; 0x22
   2cb0c:	cmpne	r2, #31
   2cb10:	movhi	r3, #1
   2cb14:	movls	r3, #0
   2cb18:	cmp	r2, #92	; 0x5c
   2cb1c:	moveq	r3, #0
   2cb20:	andne	r3, r3, #1
   2cb24:	cmp	r3, #0
   2cb28:	beq	2cc30 <flatcc_json_parser_build_string@@Base+0x304>
   2cb2c:	add	r3, r1, #2
   2cb30:	cmp	r5, r3
   2cb34:	mov	r4, r3
   2cb38:	beq	2cc3c <flatcc_json_parser_build_string@@Base+0x310>
   2cb3c:	ldrb	r2, [r3], #1
   2cb40:	cmp	r2, #34	; 0x22
   2cb44:	cmpne	r2, #31
   2cb48:	movhi	r0, #1
   2cb4c:	movls	r0, #0
   2cb50:	cmp	r2, #92	; 0x5c
   2cb54:	moveq	r0, #0
   2cb58:	andne	r0, r0, #1
   2cb5c:	cmp	r0, #0
   2cb60:	bne	2cb30 <flatcc_json_parser_build_string@@Base+0x204>
   2cb64:	cmp	r2, #31
   2cb68:	bhi	2cb80 <flatcc_json_parser_build_string@@Base+0x254>
   2cb6c:	ldr	r3, [r6, #24]
   2cb70:	cmp	r3, #0
   2cb74:	beq	2cbd0 <flatcc_json_parser_build_string@@Base+0x2a4>
   2cb78:	mov	r4, r5
   2cb7c:	b	2c968 <flatcc_json_parser_build_string@@Base+0x3c>
   2cb80:	cmp	r2, #34	; 0x22
   2cb84:	bne	2c968 <flatcc_json_parser_build_string@@Base+0x3c>
   2cb88:	sub	r2, r4, r8
   2cb8c:	mov	r1, r8
   2cb90:	ldr	r0, [r6]
   2cb94:	bl	261a4 <flatcc_builder_create_string@@Base>
   2cb98:	str	r0, [r7]
   2cb9c:	ldrb	r3, [r4]
   2cba0:	cmp	r3, #34	; 0x22
   2cba4:	addeq	r4, r4, #1
   2cba8:	bne	2ca70 <flatcc_json_parser_build_string@@Base+0x144>
   2cbac:	b	2c980 <flatcc_json_parser_build_string@@Base+0x54>
   2cbb0:	ldr	r3, [r6, #4]
   2cbb4:	mov	r2, #16
   2cbb8:	sub	r3, r1, r3
   2cbbc:	add	r3, r3, #1
   2cbc0:	str	r1, [r6, #36]	; 0x24
   2cbc4:	str	r3, [r6, #20]
   2cbc8:	str	r2, [r6, #24]
   2cbcc:	b	2c960 <flatcc_json_parser_build_string@@Base+0x34>
   2cbd0:	ldr	r3, [r6, #4]
   2cbd4:	mov	r2, #17
   2cbd8:	sub	r3, r4, r3
   2cbdc:	add	r3, r3, #1
   2cbe0:	str	r4, [r6, #36]	; 0x24
   2cbe4:	str	r3, [r6, #20]
   2cbe8:	str	r2, [r6, #24]
   2cbec:	mov	r4, r5
   2cbf0:	b	2c968 <flatcc_json_parser_build_string@@Base+0x3c>
   2cbf4:	ldr	r3, [r6, #4]
   2cbf8:	mov	r2, #20
   2cbfc:	b	2cac4 <flatcc_json_parser_build_string@@Base+0x198>
   2cc00:	ldr	r0, [r6]
   2cc04:	bl	26474 <flatcc_builder_end_string@@Base>
   2cc08:	str	r0, [r7]
   2cc0c:	b	2cb9c <flatcc_json_parser_build_string@@Base+0x270>
   2cc10:	mov	r4, r5
   2cc14:	b	2ca54 <flatcc_json_parser_build_string@@Base+0x128>
   2cc18:	mov	r4, r8
   2cc1c:	b	2c978 <flatcc_json_parser_build_string@@Base+0x4c>
   2cc20:	ldr	r0, [r6]
   2cc24:	bl	26474 <flatcc_builder_end_string@@Base>
   2cc28:	str	r0, [r7]
   2cc2c:	b	2ca70 <flatcc_json_parser_build_string@@Base+0x144>
   2cc30:	mov	r4, r8
   2cc34:	b	2cb64 <flatcc_json_parser_build_string@@Base+0x238>
   2cc38:	mov	r4, r2
   2cc3c:	ldr	r3, [r6, #24]
   2cc40:	cmp	r3, #0
   2cc44:	bne	2cb78 <flatcc_json_parser_build_string@@Base+0x24c>
   2cc48:	ldr	r3, [r6, #4]
   2cc4c:	mov	r2, #20
   2cc50:	b	2cbd8 <flatcc_json_parser_build_string@@Base+0x2ac>

0002cc54 <flatcc_json_parser_prepare_unions@@Base>:
   2cc54:	push	{r4, r5, r6, r7, r8, lr}
   2cc58:	mov	r4, r0
   2cc5c:	add	r0, r3, r3, lsl #1
   2cc60:	mov	r8, r1
   2cc64:	lsl	r1, r0, #3
   2cc68:	add	r1, r1, #8
   2cc6c:	ldr	r0, [r4]
   2cc70:	ldr	r7, [sp, #24]
   2cc74:	mov	r5, r3
   2cc78:	mov	r6, r2
   2cc7c:	bl	22184 <flatcc_builder_enter_user_frame@@Base>
   2cc80:	cmp	r0, #0
   2cc84:	str	r0, [r7]
   2cc88:	bne	2cca0 <flatcc_json_parser_prepare_unions@@Base+0x4c>
   2cc8c:	ldr	r3, [r4, #24]
   2cc90:	cmp	r3, #0
   2cc94:	beq	2ccbc <flatcc_json_parser_prepare_unions@@Base+0x68>
   2cc98:	mov	r0, r6
   2cc9c:	pop	{r4, r5, r6, r7, r8, pc}
   2cca0:	mov	r1, r0
   2cca4:	ldr	r0, [r4]
   2cca8:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2ccac:	mov	r6, r8
   2ccb0:	str	r5, [r0]
   2ccb4:	mov	r0, r6
   2ccb8:	pop	{r4, r5, r6, r7, r8, pc}
   2ccbc:	ldr	r3, [r4, #4]
   2ccc0:	mov	r2, #33	; 0x21
   2ccc4:	sub	r3, r8, r3
   2ccc8:	add	r3, r3, #1
   2cccc:	str	r8, [r4, #36]	; 0x24
   2ccd0:	str	r3, [r4, #20]
   2ccd4:	str	r2, [r4, #24]
   2ccd8:	mov	r0, r6
   2ccdc:	pop	{r4, r5, r6, r7, r8, pc}

0002cce0 <flatcc_json_parser_finalize_unions@@Base>:
   2cce0:	push	{r4, r5, r6, r7, r8, lr}
   2cce4:	mov	r5, r1
   2cce8:	mov	r4, r0
   2ccec:	mov	r1, r3
   2ccf0:	ldr	r0, [r0]
   2ccf4:	mov	r6, r3
   2ccf8:	mov	r7, r2
   2ccfc:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2cd00:	ldr	r3, [r0, #4]
   2cd04:	cmp	r3, #0
   2cd08:	moveq	r7, r5
   2cd0c:	beq	2cd1c <flatcc_json_parser_finalize_unions@@Base+0x3c>
   2cd10:	ldr	r3, [r4, #24]
   2cd14:	cmp	r3, #0
   2cd18:	beq	2cd30 <flatcc_json_parser_finalize_unions@@Base+0x50>
   2cd1c:	mov	r1, r6
   2cd20:	ldr	r0, [r4]
   2cd24:	bl	22248 <flatcc_builder_exit_user_frame_at@@Base>
   2cd28:	mov	r0, r7
   2cd2c:	pop	{r4, r5, r6, r7, r8, pc}
   2cd30:	ldr	r3, [r4, #4]
   2cd34:	mov	r2, #27
   2cd38:	sub	r3, r5, r3
   2cd3c:	add	r3, r3, #1
   2cd40:	str	r5, [r4, #36]	; 0x24
   2cd44:	str	r3, [r4, #20]
   2cd48:	str	r2, [r4, #24]
   2cd4c:	b	2cd1c <flatcc_json_parser_finalize_unions@@Base+0x3c>

0002cd50 <flatcc_json_parser_union@@Base>:
   2cd50:	push	{r4, r5, r6, r7, r8, lr}
   2cd54:	sub	sp, sp, #16
   2cd58:	mov	r5, r0
   2cd5c:	mov	r8, r1
   2cd60:	ldr	r0, [r0]
   2cd64:	ldr	r1, [sp, #44]	; 0x2c
   2cd68:	mov	r4, r3
   2cd6c:	mov	r6, r2
   2cd70:	ldrh	r7, [sp, #40]	; 0x28
   2cd74:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2cd78:	add	r4, r4, r4, lsl #1
   2cd7c:	add	r4, r0, r4, lsl #3
   2cd80:	ldr	r3, [r4, #8]
   2cd84:	cmp	r3, #0
   2cd88:	beq	2cdd4 <flatcc_json_parser_union@@Base+0x84>
   2cd8c:	ldr	r3, [r5, #24]
   2cd90:	cmp	r3, #0
   2cd94:	beq	2cda8 <flatcc_json_parser_union@@Base+0x58>
   2cd98:	mov	r4, r6
   2cd9c:	mov	r0, r4
   2cda0:	add	sp, sp, #16
   2cda4:	pop	{r4, r5, r6, r7, r8, pc}
   2cda8:	ldr	r3, [r5, #4]
   2cdac:	mov	r2, #28
   2cdb0:	sub	r3, r8, r3
   2cdb4:	add	r3, r3, #1
   2cdb8:	mov	r4, r6
   2cdbc:	mov	r0, r4
   2cdc0:	str	r8, [r5, #36]	; 0x24
   2cdc4:	str	r3, [r5, #20]
   2cdc8:	str	r2, [r5, #24]
   2cdcc:	add	sp, sp, #16
   2cdd0:	pop	{r4, r5, r6, r7, r8, pc}
   2cdd4:	ldrb	r3, [r4, #20]
   2cdd8:	cmp	r3, #0
   2cddc:	beq	2ce88 <flatcc_json_parser_union@@Base+0x138>
   2cde0:	ldrb	r3, [r4, #21]
   2cde4:	cmp	r3, #0
   2cde8:	strb	r3, [sp, #8]
   2cdec:	bne	2ce08 <flatcc_json_parser_union@@Base+0xb8>
   2cdf0:	ldr	r3, [r5, #24]
   2cdf4:	cmp	r3, #0
   2cdf8:	bne	2cd98 <flatcc_json_parser_union@@Base+0x48>
   2cdfc:	ldr	r3, [r5, #4]
   2ce00:	mov	r2, #25
   2ce04:	b	2cdb0 <flatcc_json_parser_union@@Base+0x60>
   2ce08:	ldr	r2, [r0, #4]
   2ce0c:	add	ip, sp, #12
   2ce10:	sub	r2, r2, #1
   2ce14:	str	r2, [r0, #4]
   2ce18:	mov	r1, r8
   2ce1c:	str	ip, [sp]
   2ce20:	mov	r2, r6
   2ce24:	mov	r0, r5
   2ce28:	ldr	ip, [sp, #48]	; 0x30
   2ce2c:	blx	ip
   2ce30:	add	r3, sp, #8
   2ce34:	cmp	r6, r0
   2ce38:	mov	r4, r0
   2ce3c:	beq	2cd9c <flatcc_json_parser_union@@Base+0x4c>
   2ce40:	mov	r1, r7
   2ce44:	ldm	r3, {r2, r3}
   2ce48:	ldr	r0, [r5]
   2ce4c:	bl	26b70 <flatcc_builder_table_add_union@@Base>
   2ce50:	cmp	r0, #0
   2ce54:	beq	2cd9c <flatcc_json_parser_union@@Base+0x4c>
   2ce58:	ldr	r3, [r5, #24]
   2ce5c:	cmp	r3, #0
   2ce60:	bne	2cd98 <flatcc_json_parser_union@@Base+0x48>
   2ce64:	ldr	r3, [r5, #4]
   2ce68:	mov	r2, #28
   2ce6c:	sub	r3, r4, r3
   2ce70:	add	r3, r3, #1
   2ce74:	str	r4, [r5, #36]	; 0x24
   2ce78:	str	r3, [r5, #20]
   2ce7c:	mov	r4, r6
   2ce80:	str	r2, [r5, #24]
   2ce84:	b	2cd9c <flatcc_json_parser_union@@Base+0x4c>
   2ce88:	ldr	r3, [r0, #4]
   2ce8c:	ldr	lr, [r5, #16]
   2ce90:	ldr	ip, [r5, #4]
   2ce94:	add	r3, r3, #1
   2ce98:	str	r3, [r0, #4]
   2ce9c:	mov	r2, r6
   2cea0:	str	lr, [r4, #16]
   2cea4:	str	ip, [r4, #12]
   2cea8:	str	r8, [r4, #8]
   2ceac:	mov	r1, r8
   2ceb0:	mov	r0, r5
   2ceb4:	bl	2a4f8 <flatcc_json_parser_generic_json@@Base>
   2ceb8:	mov	r4, r0
   2cebc:	b	2cd9c <flatcc_json_parser_union@@Base+0x4c>

0002cec0 <flatcc_json_parser_union_type@@Base>:
   2cec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cec4:	sub	sp, sp, #36	; 0x24
   2cec8:	mov	sl, r3
   2cecc:	ldrh	r3, [sp, #72]	; 0x48
   2ced0:	mov	r4, r0
   2ced4:	mov	r9, r1
   2ced8:	ldr	r0, [r0]
   2cedc:	ldr	r1, [sp, #76]	; 0x4c
   2cee0:	mov	r5, r2
   2cee4:	str	r3, [sp, #16]
   2cee8:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2ceec:	add	sl, sl, sl, lsl #1
   2cef0:	lsl	r2, sl, #3
   2cef4:	str	r2, [sp, #12]
   2cef8:	add	r3, r0, #8
   2cefc:	add	r6, r3, r2
   2cf00:	str	r3, [sp, #8]
   2cf04:	ldrb	r3, [r6, #12]
   2cf08:	cmp	r3, #0
   2cf0c:	beq	2cf2c <flatcc_json_parser_union_type@@Base+0x6c>
   2cf10:	ldr	r3, [r4, #24]
   2cf14:	cmp	r3, #0
   2cf18:	beq	2d0e4 <flatcc_json_parser_union_type@@Base+0x224>
   2cf1c:	mov	r7, r5
   2cf20:	mov	r0, r7
   2cf24:	add	sp, sp, #36	; 0x24
   2cf28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf2c:	mov	r2, #1
   2cf30:	cmp	r9, r5
   2cf34:	mov	r8, r0
   2cf38:	strb	r3, [r6, #13]
   2cf3c:	strb	r2, [r6, #12]
   2cf40:	beq	2d110 <flatcc_json_parser_union_type@@Base+0x250>
   2cf44:	ldrb	r3, [r9]
   2cf48:	str	r3, [sp, #20]
   2cf4c:	sub	r3, r3, #45	; 0x2d
   2cf50:	clz	r3, r3
   2cf54:	lsr	r3, r3, #5
   2cf58:	add	r7, r9, r3
   2cf5c:	cmp	r5, r7
   2cf60:	beq	2d1b4 <flatcc_json_parser_union_type@@Base+0x2f4>
   2cf64:	ldrb	ip, [r9, r3]
   2cf68:	sub	r3, ip, #48	; 0x30
   2cf6c:	cmp	r3, #9
   2cf70:	bhi	2d138 <flatcc_json_parser_union_type@@Base+0x278>
   2cf74:	uxtb	sl, ip
   2cf78:	mov	fp, #0
   2cf7c:	subs	sl, sl, #48	; 0x30
   2cf80:	add	r1, r7, r2
   2cf84:	sbc	fp, fp, #0
   2cf88:	mov	lr, #10
   2cf8c:	b	2cfd4 <flatcc_json_parser_union_type@@Base+0x114>
   2cf90:	mov	r0, r1
   2cf94:	ldrb	ip, [r0], #1
   2cf98:	sub	r3, ip, #48	; 0x30
   2cf9c:	cmp	r3, #9
   2cfa0:	bhi	2d140 <flatcc_json_parser_union_type@@Base+0x280>
   2cfa4:	umull	r2, r3, sl, lr
   2cfa8:	mla	r3, lr, fp, r3
   2cfac:	subs	r2, r2, #48	; 0x30
   2cfb0:	sbc	r3, r3, #0
   2cfb4:	adds	r2, r2, ip
   2cfb8:	adc	r3, r3, #0
   2cfbc:	cmp	r3, fp
   2cfc0:	cmpeq	r2, sl
   2cfc4:	bcc	2d1c0 <flatcc_json_parser_union_type@@Base+0x300>
   2cfc8:	mov	r1, r0
   2cfcc:	mov	sl, r2
   2cfd0:	mov	fp, r3
   2cfd4:	cmp	r1, r5
   2cfd8:	mov	r7, r1
   2cfdc:	bne	2cf90 <flatcc_json_parser_union_type@@Base+0xd0>
   2cfe0:	ldr	r3, [sp, #20]
   2cfe4:	cmp	r3, #45	; 0x2d
   2cfe8:	beq	2d178 <flatcc_json_parser_union_type@@Base+0x2b8>
   2cfec:	cmp	fp, #0
   2cff0:	cmpeq	sl, #255	; 0xff
   2cff4:	bls	2d1e0 <flatcc_json_parser_union_type@@Base+0x320>
   2cff8:	ldr	r3, [r4, #24]
   2cffc:	cmp	r3, #0
   2d000:	bne	2d170 <flatcc_json_parser_union_type@@Base+0x2b0>
   2d004:	ldr	r3, [r4, #4]
   2d008:	str	r7, [r4, #36]	; 0x24
   2d00c:	sub	r3, r7, r3
   2d010:	mov	r7, r5
   2d014:	add	r3, r3, #1
   2d018:	mov	r2, #7
   2d01c:	str	r3, [r4, #20]
   2d020:	str	r2, [r4, #24]
   2d024:	ldr	r3, [sp, #8]
   2d028:	ldr	r2, [sp, #12]
   2d02c:	ldr	r1, [r3, r2]
   2d030:	cmp	r1, #0
   2d034:	beq	2d1f0 <flatcc_json_parser_union_type@@Base+0x330>
   2d038:	ldr	r3, [r8, #4]
   2d03c:	cmp	r3, #0
   2d040:	beq	2d248 <flatcc_json_parser_union_type@@Base+0x388>
   2d044:	ldr	r0, [r6, #8]
   2d048:	ldr	r2, [r6, #4]
   2d04c:	sub	r3, r3, #1
   2d050:	str	r3, [r8, #4]
   2d054:	ldr	r9, [r4, #16]
   2d058:	ldr	r8, [r4, #4]
   2d05c:	str	r0, [r4, #16]
   2d060:	str	r2, [r4, #4]
   2d064:	ldrb	ip, [r6, #13]
   2d068:	add	r6, sp, #32
   2d06c:	add	r2, sp, #28
   2d070:	str	r2, [sp]
   2d074:	mov	r3, ip
   2d078:	strb	ip, [r6, #-8]!
   2d07c:	mov	r2, r5
   2d080:	mov	r0, r4
   2d084:	ldr	ip, [sp, #84]	; 0x54
   2d088:	blx	ip
   2d08c:	cmp	r5, r0
   2d090:	beq	2cf1c <flatcc_json_parser_union_type@@Base+0x5c>
   2d094:	ldr	r1, [sp, #16]
   2d098:	ldm	r6, {r2, r3}
   2d09c:	ldr	r0, [r4]
   2d0a0:	bl	26b70 <flatcc_builder_table_add_union@@Base>
   2d0a4:	cmp	r0, #0
   2d0a8:	streq	r9, [r4, #16]
   2d0ac:	streq	r8, [r4, #4]
   2d0b0:	beq	2cf20 <flatcc_json_parser_union_type@@Base+0x60>
   2d0b4:	ldr	r3, [r4, #24]
   2d0b8:	cmp	r3, #0
   2d0bc:	bne	2cf1c <flatcc_json_parser_union_type@@Base+0x5c>
   2d0c0:	ldr	r3, [r4, #4]
   2d0c4:	mov	r2, #28
   2d0c8:	sub	r3, r7, r3
   2d0cc:	add	r3, r3, #1
   2d0d0:	str	r7, [r4, #36]	; 0x24
   2d0d4:	str	r3, [r4, #20]
   2d0d8:	mov	r7, r5
   2d0dc:	str	r2, [r4, #24]
   2d0e0:	b	2cf20 <flatcc_json_parser_union_type@@Base+0x60>
   2d0e4:	ldr	r3, [r4, #4]
   2d0e8:	mov	r2, #28
   2d0ec:	sub	r3, r9, r3
   2d0f0:	add	r3, r3, #1
   2d0f4:	mov	r7, r5
   2d0f8:	mov	r0, r7
   2d0fc:	str	r9, [r4, #36]	; 0x24
   2d100:	str	r3, [r4, #20]
   2d104:	str	r2, [r4, #24]
   2d108:	add	sp, sp, #36	; 0x24
   2d10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d110:	mov	r7, r5
   2d114:	add	r3, r6, #13
   2d118:	mov	r1, r7
   2d11c:	str	r3, [sp]
   2d120:	mov	r2, r5
   2d124:	ldr	r3, [sp, #80]	; 0x50
   2d128:	mov	r0, r4
   2d12c:	bl	27798 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2d130:	mov	r7, r0
   2d134:	b	2d024 <flatcc_json_parser_union_type@@Base+0x164>
   2d138:	mov	sl, #0
   2d13c:	mov	fp, #0
   2d140:	cmp	r9, r7
   2d144:	beq	2d114 <flatcc_json_parser_union_type@@Base+0x254>
   2d148:	and	r3, ip, #223	; 0xdf
   2d14c:	cmp	ip, #46	; 0x2e
   2d150:	cmpne	r3, #69	; 0x45
   2d154:	bne	2cfe0 <flatcc_json_parser_union_type@@Base+0x120>
   2d158:	ldr	r3, [r4, #24]
   2d15c:	cmp	r3, #0
   2d160:	beq	2d208 <flatcc_json_parser_union_type@@Base+0x348>
   2d164:	ldr	r3, [sp, #20]
   2d168:	cmp	r3, #45	; 0x2d
   2d16c:	bne	2d1a4 <flatcc_json_parser_union_type@@Base+0x2e4>
   2d170:	mov	r7, r5
   2d174:	b	2d024 <flatcc_json_parser_union_type@@Base+0x164>
   2d178:	ldr	r3, [r4, #24]
   2d17c:	cmp	r3, #0
   2d180:	bne	2d170 <flatcc_json_parser_union_type@@Base+0x2b0>
   2d184:	ldr	r3, [r4, #4]
   2d188:	mov	r2, #8
   2d18c:	sub	r3, r7, r3
   2d190:	add	r3, r3, #1
   2d194:	str	r7, [r4, #36]	; 0x24
   2d198:	str	r3, [r4, #20]
   2d19c:	str	r2, [r4, #24]
   2d1a0:	b	2d170 <flatcc_json_parser_union_type@@Base+0x2b0>
   2d1a4:	mov	r3, #0
   2d1a8:	strb	r3, [r6, #13]
   2d1ac:	mov	r7, r5
   2d1b0:	b	2d024 <flatcc_json_parser_union_type@@Base+0x164>
   2d1b4:	mov	sl, #0
   2d1b8:	mov	fp, #0
   2d1bc:	b	2cfe0 <flatcc_json_parser_union_type@@Base+0x120>
   2d1c0:	ldr	r3, [r4, #24]
   2d1c4:	cmp	r3, #0
   2d1c8:	beq	2d228 <flatcc_json_parser_union_type@@Base+0x368>
   2d1cc:	ldr	r3, [sp, #20]
   2d1d0:	cmp	r3, #45	; 0x2d
   2d1d4:	movne	r7, r5
   2d1d8:	movne	sl, #0
   2d1dc:	beq	2d170 <flatcc_json_parser_union_type@@Base+0x2b0>
   2d1e0:	cmp	r9, r7
   2d1e4:	strb	sl, [r6, #13]
   2d1e8:	bne	2d024 <flatcc_json_parser_union_type@@Base+0x164>
   2d1ec:	b	2d114 <flatcc_json_parser_union_type@@Base+0x254>
   2d1f0:	ldrb	r2, [r6, #13]
   2d1f4:	ldr	r3, [r8, #4]
   2d1f8:	cmp	r2, #0
   2d1fc:	addne	r3, r3, #1
   2d200:	str	r3, [r8, #4]
   2d204:	b	2cf20 <flatcc_json_parser_union_type@@Base+0x60>
   2d208:	ldr	r3, [r4, #4]
   2d20c:	mov	r2, #12
   2d210:	sub	r3, r7, r3
   2d214:	add	r3, r3, #1
   2d218:	str	r7, [r4, #36]	; 0x24
   2d21c:	str	r3, [r4, #20]
   2d220:	str	r2, [r4, #24]
   2d224:	b	2d1cc <flatcc_json_parser_union_type@@Base+0x30c>
   2d228:	ldr	r3, [r4, #4]
   2d22c:	mov	r2, #8
   2d230:	sub	r3, r1, r3
   2d234:	add	r3, r3, #1
   2d238:	str	r1, [r4, #36]	; 0x24
   2d23c:	str	r3, [r4, #20]
   2d240:	str	r2, [r4, #24]
   2d244:	b	2d1cc <flatcc_json_parser_union_type@@Base+0x30c>
   2d248:	ldr	r3, [pc, #12]	; 2d25c <flatcc_json_parser_union_type@@Base+0x39c>
   2d24c:	ldr	r2, [pc, #12]	; 2d260 <flatcc_json_parser_union_type@@Base+0x3a0>
   2d250:	ldr	r1, [pc, #12]	; 2d264 <flatcc_json_parser_union_type@@Base+0x3a4>
   2d254:	ldr	r0, [pc, #12]	; 2d268 <flatcc_json_parser_union_type@@Base+0x3a8>
   2d258:	bl	126a8 <__assert_fail@plt>
   2d25c:	andeq	pc, r2, r8, asr #30
   2d260:	andeq	r0, r0, r5, asr #7
   2d264:	andeq	r0, r3, r8, ror #1
   2d268:	andeq	r0, r3, r4, lsr r1

0002d26c <flatcc_json_parser_union_vector@@Base>:
   2d26c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d270:	mov	r5, r0
   2d274:	mov	r6, r1
   2d278:	ldr	r0, [r0]
   2d27c:	ldr	r1, [sp, #36]	; 0x24
   2d280:	mov	r4, r3
   2d284:	mov	r9, r2
   2d288:	ldrh	r7, [sp, #32]
   2d28c:	ldr	r8, [sp, #40]	; 0x28
   2d290:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2d294:	add	r3, r4, r4, lsl #1
   2d298:	lsl	r3, r3, #3
   2d29c:	add	ip, r0, #8
   2d2a0:	add	r1, ip, r3
   2d2a4:	ldr	r2, [ip, r3]
   2d2a8:	cmp	r2, #0
   2d2ac:	beq	2d2e8 <flatcc_json_parser_union_vector@@Base+0x7c>
   2d2b0:	ldr	r3, [r5, #24]
   2d2b4:	cmp	r3, #0
   2d2b8:	beq	2d2c4 <flatcc_json_parser_union_vector@@Base+0x58>
   2d2bc:	mov	r0, r9
   2d2c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d2c4:	ldr	r3, [r5, #4]
   2d2c8:	mov	r2, #28
   2d2cc:	sub	r3, r6, r3
   2d2d0:	add	r3, r3, #1
   2d2d4:	str	r6, [r5, #36]	; 0x24
   2d2d8:	str	r3, [r5, #20]
   2d2dc:	str	r2, [r5, #24]
   2d2e0:	mov	r0, r9
   2d2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d2e8:	ldrb	r2, [r1, #12]
   2d2ec:	cmp	r2, #0
   2d2f0:	beq	2d328 <flatcc_json_parser_union_vector@@Base+0xbc>
   2d2f4:	ldr	r3, [r0, #4]
   2d2f8:	mov	r2, r9
   2d2fc:	sub	r3, r3, #1
   2d300:	str	r3, [r0, #4]
   2d304:	ldr	r3, [r1, #20]
   2d308:	str	r8, [sp, #40]	; 0x28
   2d30c:	str	r7, [sp, #36]	; 0x24
   2d310:	ldr	ip, [r1, #16]
   2d314:	mov	r0, r5
   2d318:	mov	r1, r6
   2d31c:	str	ip, [sp, #32]
   2d320:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d324:	b	27af4 <flatcc_emitter_copy_buffer@@Base+0x424>
   2d328:	ldr	lr, [r0, #4]
   2d32c:	ldr	r4, [r5, #16]
   2d330:	add	lr, lr, #1
   2d334:	str	lr, [r0, #4]
   2d338:	ldr	r0, [r5, #4]
   2d33c:	mov	r2, r9
   2d340:	stmib	r1, {r0, r4}
   2d344:	mov	r1, r6
   2d348:	str	r6, [ip, r3]
   2d34c:	mov	r0, r5
   2d350:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d354:	b	2a4f8 <flatcc_json_parser_generic_json@@Base>

0002d358 <flatcc_json_parser_union_type_vector@@Base>:
   2d358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d35c:	sub	sp, sp, #44	; 0x2c
   2d360:	mov	r4, r3
   2d364:	ldrh	r3, [sp, #80]	; 0x50
   2d368:	mov	sl, r0
   2d36c:	mov	fp, r1
   2d370:	ldr	r0, [r0]
   2d374:	ldr	r1, [sp, #84]	; 0x54
   2d378:	str	r3, [sp, #24]
   2d37c:	mov	r9, r2
   2d380:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2d384:	add	r4, r4, r4, lsl #1
   2d388:	lsl	r3, r4, #3
   2d38c:	str	r3, [sp, #28]
   2d390:	add	r0, r0, #8
   2d394:	add	r3, r0, r3
   2d398:	str	r3, [sp, #20]
   2d39c:	ldrb	r3, [r3, #12]
   2d3a0:	cmp	r3, #0
   2d3a4:	beq	2d3c4 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   2d3a8:	ldr	r3, [sl, #24]
   2d3ac:	cmp	r3, #0
   2d3b0:	beq	2d400 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   2d3b4:	mov	r8, r9
   2d3b8:	mov	r0, r8
   2d3bc:	add	sp, sp, #44	; 0x2c
   2d3c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d3c4:	ldr	r3, [sp, #20]
   2d3c8:	mov	r2, #1
   2d3cc:	mov	r1, r2
   2d3d0:	strb	r2, [r3, #12]
   2d3d4:	mvn	r3, #0
   2d3d8:	ldr	r0, [sl]
   2d3dc:	bl	23d38 <flatcc_builder_start_vector@@Base>
   2d3e0:	cmp	r0, #0
   2d3e4:	beq	2d42c <flatcc_json_parser_union_type_vector@@Base+0xd4>
   2d3e8:	ldr	r3, [sl, #24]
   2d3ec:	cmp	r3, #0
   2d3f0:	bne	2d3b4 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   2d3f4:	ldr	r3, [sl, #4]
   2d3f8:	mov	r2, #33	; 0x21
   2d3fc:	b	2d408 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   2d400:	ldr	r3, [sl, #4]
   2d404:	mov	r2, #28
   2d408:	sub	r3, fp, r3
   2d40c:	add	r3, r3, #1
   2d410:	mov	r8, r9
   2d414:	mov	r0, r8
   2d418:	str	fp, [sl, #36]	; 0x24
   2d41c:	str	r3, [sl, #20]
   2d420:	str	r2, [sl, #24]
   2d424:	add	sp, sp, #44	; 0x2c
   2d428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d42c:	cmp	fp, r9
   2d430:	beq	2d440 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   2d434:	ldrb	r3, [fp]
   2d438:	cmp	r3, #91	; 0x5b
   2d43c:	beq	2d584 <flatcc_json_parser_union_type_vector@@Base+0x22c>
   2d440:	ldr	r3, [sl, #24]
   2d444:	cmp	r3, #0
   2d448:	beq	2d560 <flatcc_json_parser_union_type_vector@@Base+0x208>
   2d44c:	mov	r8, r9
   2d450:	ldr	r0, [sl]
   2d454:	bl	25410 <flatcc_builder_vector_count@@Base>
   2d458:	ldr	r3, [sp, #20]
   2d45c:	mov	r1, r0
   2d460:	str	r0, [r3, #16]
   2d464:	mov	r4, r0
   2d468:	ldr	r0, [sl]
   2d46c:	bl	22184 <flatcc_builder_enter_user_frame@@Base>
   2d470:	mov	r1, r0
   2d474:	mov	r5, r0
   2d478:	ldr	r0, [sl]
   2d47c:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2d480:	mov	r6, r0
   2d484:	ldr	r0, [sl]
   2d488:	bl	2541c <flatcc_builder_vector_edit@@Base>
   2d48c:	mov	r2, r4
   2d490:	mov	r1, r0
   2d494:	mov	r0, r6
   2d498:	bl	125ac <memcpy@plt>
   2d49c:	ldr	r0, [sl]
   2d4a0:	bl	25218 <flatcc_builder_end_vector@@Base>
   2d4a4:	subs	r6, r0, #0
   2d4a8:	bne	2d4b4 <flatcc_json_parser_union_type_vector@@Base+0x15c>
   2d4ac:	mov	fp, r8
   2d4b0:	b	2d3e8 <flatcc_json_parser_union_type_vector@@Base+0x90>
   2d4b4:	ldr	r3, [sp, #24]
   2d4b8:	ldr	r0, [sl]
   2d4bc:	sub	r1, r3, #1
   2d4c0:	bl	269e0 <flatcc_builder_table_add_offset@@Base>
   2d4c4:	cmp	r0, #0
   2d4c8:	beq	2d4ac <flatcc_json_parser_union_type_vector@@Base+0x154>
   2d4cc:	str	r6, [r0]
   2d4d0:	ldr	r1, [sp, #84]	; 0x54
   2d4d4:	ldr	r0, [sl]
   2d4d8:	bl	222b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2d4dc:	ldr	r1, [sp, #28]
   2d4e0:	add	r3, r0, #8
   2d4e4:	add	r2, r3, r1
   2d4e8:	ldr	r1, [r3, r1]
   2d4ec:	ldr	r3, [r0, #4]
   2d4f0:	cmp	r1, #0
   2d4f4:	addeq	r3, r3, #1
   2d4f8:	str	r5, [r2, #20]
   2d4fc:	streq	r3, [r0, #4]
   2d500:	beq	2d3b8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   2d504:	cmp	r3, #0
   2d508:	beq	2e06c <flatcc_json_parser_union_type_vector@@Base+0xd14>
   2d50c:	sub	r3, r3, #1
   2d510:	ldmib	r2, {r2, ip}
   2d514:	str	r3, [r0, #4]
   2d518:	ldr	r0, [sp, #92]	; 0x5c
   2d51c:	str	r4, [sp]
   2d520:	str	r0, [sp, #8]
   2d524:	ldr	r0, [sp, #24]
   2d528:	mov	r3, r5
   2d52c:	str	r0, [sp, #4]
   2d530:	mov	r0, sl
   2d534:	ldr	r5, [sl, #16]
   2d538:	ldr	r4, [sl, #4]
   2d53c:	str	ip, [sl, #16]
   2d540:	str	r2, [sl, #4]
   2d544:	mov	r2, r9
   2d548:	bl	27af4 <flatcc_emitter_copy_buffer@@Base+0x424>
   2d54c:	cmp	r9, r0
   2d550:	beq	2d3b4 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   2d554:	str	r5, [sl, #16]
   2d558:	str	r4, [sl, #4]
   2d55c:	b	2d3b8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   2d560:	ldr	r3, [sl, #4]
   2d564:	mov	r2, #22
   2d568:	sub	r3, fp, r3
   2d56c:	add	r3, r3, #1
   2d570:	str	fp, [sl, #36]	; 0x24
   2d574:	str	r3, [sl, #20]
   2d578:	str	r2, [sl, #24]
   2d57c:	mov	r8, r9
   2d580:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2d584:	add	r3, fp, #1
   2d588:	sub	r2, r9, r3
   2d58c:	cmp	r2, #1
   2d590:	ble	2d5a4 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   2d594:	ldrb	r2, [fp, #1]
   2d598:	cmp	r2, #32
   2d59c:	bhi	2dff8 <flatcc_json_parser_union_type_vector@@Base+0xca0>
   2d5a0:	beq	2e02c <flatcc_json_parser_union_type_vector@@Base+0xcd4>
   2d5a4:	mov	r1, #0
   2d5a8:	cmp	r9, r3
   2d5ac:	beq	2dff0 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   2d5b0:	ldrb	r2, [r3]
   2d5b4:	cmp	r2, #32
   2d5b8:	bne	2de3c <flatcc_json_parser_union_type_vector@@Base+0xae4>
   2d5bc:	add	r3, r3, #1
   2d5c0:	b	2d5d0 <flatcc_json_parser_union_type_vector@@Base+0x278>
   2d5c4:	ldrb	r2, [r3], #1
   2d5c8:	cmp	r2, #32
   2d5cc:	bne	2de40 <flatcc_json_parser_union_type_vector@@Base+0xae8>
   2d5d0:	cmp	r9, r3
   2d5d4:	mov	fp, r3
   2d5d8:	bne	2d5c4 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   2d5dc:	mov	r5, #0
   2d5e0:	mov	r1, #1
   2d5e4:	ldr	r0, [sl]
   2d5e8:	bl	231cc <flatcc_builder_extend_vector@@Base>
   2d5ec:	subs	r3, r0, #0
   2d5f0:	str	r3, [sp, #16]
   2d5f4:	beq	2d3e8 <flatcc_json_parser_union_type_vector@@Base+0x90>
   2d5f8:	cmp	r9, fp
   2d5fc:	strb	r5, [sp, #39]	; 0x27
   2d600:	beq	2da1c <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   2d604:	ldrb	r4, [fp]
   2d608:	sub	r3, r4, #45	; 0x2d
   2d60c:	clz	r3, r3
   2d610:	lsr	r3, r3, #5
   2d614:	add	r8, fp, r3
   2d618:	cmp	r9, r8
   2d61c:	beq	2d95c <flatcc_json_parser_union_type_vector@@Base+0x604>
   2d620:	ldrb	ip, [fp, r3]
   2d624:	sub	r3, ip, #48	; 0x30
   2d628:	cmp	r3, #9
   2d62c:	bhi	2d918 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   2d630:	uxtb	r6, ip
   2d634:	mov	r7, #0
   2d638:	subs	r6, r6, #48	; 0x30
   2d63c:	add	r1, r8, #1
   2d640:	sbc	r7, r7, #0
   2d644:	mov	lr, #10
   2d648:	b	2d690 <flatcc_json_parser_union_type_vector@@Base+0x338>
   2d64c:	mov	r0, r1
   2d650:	ldrb	ip, [r0], #1
   2d654:	sub	r3, ip, #48	; 0x30
   2d658:	cmp	r3, #9
   2d65c:	bhi	2d920 <flatcc_json_parser_union_type_vector@@Base+0x5c8>
   2d660:	umull	r2, r3, r6, lr
   2d664:	mla	r3, lr, r7, r3
   2d668:	subs	r2, r2, #48	; 0x30
   2d66c:	sbc	r3, r3, #0
   2d670:	adds	r2, r2, ip
   2d674:	adc	r3, r3, #0
   2d678:	cmp	r3, r7
   2d67c:	cmpeq	r2, r6
   2d680:	bcc	2d9bc <flatcc_json_parser_union_type_vector@@Base+0x664>
   2d684:	mov	r1, r0
   2d688:	mov	r6, r2
   2d68c:	mov	r7, r3
   2d690:	cmp	r1, r9
   2d694:	mov	r8, r1
   2d698:	bne	2d64c <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   2d69c:	cmp	r4, #45	; 0x2d
   2d6a0:	beq	2d968 <flatcc_json_parser_union_type_vector@@Base+0x610>
   2d6a4:	cmp	r7, #0
   2d6a8:	cmpeq	r6, #255	; 0xff
   2d6ac:	bhi	2d9f0 <flatcc_json_parser_union_type_vector@@Base+0x698>
   2d6b0:	uxtb	r0, r6
   2d6b4:	cmp	r8, fp
   2d6b8:	strb	r0, [sp, #39]	; 0x27
   2d6bc:	beq	2da1c <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   2d6c0:	ldr	r3, [sp, #96]	; 0x60
   2d6c4:	blx	r3
   2d6c8:	cmp	r0, #0
   2d6cc:	ldrbne	r2, [sp, #39]	; 0x27
   2d6d0:	bne	2d6e8 <flatcc_json_parser_union_type_vector@@Base+0x390>
   2d6d4:	ldr	r3, [sl, #8]
   2d6d8:	tst	r3, #1
   2d6dc:	beq	2ddf0 <flatcc_json_parser_union_type_vector@@Base+0xa98>
   2d6e0:	mov	r2, #0
   2d6e4:	strb	r5, [sp, #39]	; 0x27
   2d6e8:	sub	r3, r9, r8
   2d6ec:	cmp	r3, #1
   2d6f0:	ldr	r3, [sp, #16]
   2d6f4:	strb	r2, [r3]
   2d6f8:	ble	2d70c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   2d6fc:	ldrb	r2, [r8]
   2d700:	cmp	r2, #32
   2d704:	bhi	2d884 <flatcc_json_parser_union_type_vector@@Base+0x52c>
   2d708:	beq	2d874 <flatcc_json_parser_union_type_vector@@Base+0x51c>
   2d70c:	cmp	r9, r8
   2d710:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2d714:	ldrb	r2, [r8]
   2d718:	cmp	r2, #32
   2d71c:	bne	2d73c <flatcc_json_parser_union_type_vector@@Base+0x3e4>
   2d720:	add	r3, r8, #1
   2d724:	cmp	r9, r3
   2d728:	mov	r8, r3
   2d72c:	beq	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2d730:	ldrb	r2, [r3], #1
   2d734:	cmp	r2, #32
   2d738:	beq	2d724 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   2d73c:	cmp	r2, #32
   2d740:	bhi	2d7fc <flatcc_json_parser_union_type_vector@@Base+0x4a4>
   2d744:	sub	r2, r2, #9
   2d748:	cmp	r2, #23
   2d74c:	ldrls	pc, [pc, r2, lsl #2]
   2d750:	b	2d844 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   2d754:	andeq	sp, r2, ip, lsr r8
   2d758:	ldrdeq	sp, [r2], -r4
   2d75c:	andeq	sp, r2, r4, asr #16
   2d760:	andeq	sp, r2, r4, asr #16
   2d764:			; <UNDEFINED> instruction: 0x0002d7b4
   2d768:	andeq	sp, r2, r4, asr #16
   2d76c:	andeq	sp, r2, r4, asr #16
   2d770:	andeq	sp, r2, r4, asr #16
   2d774:	andeq	sp, r2, r4, asr #16
   2d778:	andeq	sp, r2, r4, asr #16
   2d77c:	andeq	sp, r2, r4, asr #16
   2d780:	andeq	sp, r2, r4, asr #16
   2d784:	andeq	sp, r2, r4, asr #16
   2d788:	andeq	sp, r2, r4, asr #16
   2d78c:	andeq	sp, r2, r4, asr #16
   2d790:	andeq	sp, r2, r4, asr #16
   2d794:	andeq	sp, r2, r4, asr #16
   2d798:	andeq	sp, r2, r4, asr #16
   2d79c:	andeq	sp, r2, r4, asr #16
   2d7a0:	andeq	sp, r2, r4, asr #16
   2d7a4:	andeq	sp, r2, r4, asr #16
   2d7a8:	andeq	sp, r2, r4, asr #16
   2d7ac:	andeq	sp, r2, r4, asr #16
   2d7b0:	andeq	sp, r2, ip, lsl #14
   2d7b4:	sub	r3, r9, r8
   2d7b8:	cmp	r3, #1
   2d7bc:	movle	r3, r5
   2d7c0:	ldrbgt	r3, [r8, #1]
   2d7c4:	subgt	r3, r3, #10
   2d7c8:	clzgt	r3, r3
   2d7cc:	lsrgt	r3, r3, #5
   2d7d0:	add	r8, r8, r3
   2d7d4:	ldr	r3, [sl, #16]
   2d7d8:	add	r8, r8, #1
   2d7dc:	add	r3, r3, #1
   2d7e0:	str	r8, [sl, #4]
   2d7e4:	str	r3, [sl, #16]
   2d7e8:	cmp	r9, r8
   2d7ec:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2d7f0:	ldrb	r2, [r8]
   2d7f4:	cmp	r2, #32
   2d7f8:	bls	2d744 <flatcc_json_parser_union_type_vector@@Base+0x3ec>
   2d7fc:	cmp	r2, #44	; 0x2c
   2d800:	beq	2d894 <flatcc_json_parser_union_type_vector@@Base+0x53c>
   2d804:	cmp	r2, #93	; 0x5d
   2d808:	beq	2da78 <flatcc_json_parser_union_type_vector@@Base+0x720>
   2d80c:	ldr	r3, [sl, #24]
   2d810:	cmp	r3, #0
   2d814:	bne	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2d818:	ldr	r3, [sl, #4]
   2d81c:	str	r8, [sl, #36]	; 0x24
   2d820:	sub	r8, r8, r3
   2d824:	add	r8, r8, #1
   2d828:	mov	r3, #9
   2d82c:	str	r8, [sl, #20]
   2d830:	str	r3, [sl, #24]
   2d834:	mov	r8, r9
   2d838:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2d83c:	add	r8, r8, #1
   2d840:	b	2d7e8 <flatcc_json_parser_union_type_vector@@Base+0x490>
   2d844:	ldr	r3, [sl, #24]
   2d848:	cmp	r3, #0
   2d84c:	bne	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2d850:	ldr	r3, [sl, #4]
   2d854:	str	r8, [sl, #36]	; 0x24
   2d858:	sub	r3, r8, r3
   2d85c:	add	r3, r3, #1
   2d860:	mov	r2, #5
   2d864:	str	r3, [sl, #20]
   2d868:	str	r2, [sl, #24]
   2d86c:	mov	r8, r9
   2d870:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2d874:	ldrb	r2, [r8, #1]
   2d878:	cmp	r2, #32
   2d87c:	addhi	r8, r8, #1
   2d880:	bls	2d70c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   2d884:	cmp	r9, r8
   2d888:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2d88c:	cmp	r2, #44	; 0x2c
   2d890:	bne	2d804 <flatcc_json_parser_union_type_vector@@Base+0x4ac>
   2d894:	add	fp, r8, #1
   2d898:	sub	r3, r9, fp
   2d89c:	cmp	r3, #1
   2d8a0:	ble	2d8b4 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   2d8a4:	ldrb	r2, [r8, #1]
   2d8a8:	cmp	r2, #32
   2d8ac:	bhi	2dde0 <flatcc_json_parser_union_type_vector@@Base+0xa88>
   2d8b0:	beq	2ddd0 <flatcc_json_parser_union_type_vector@@Base+0xa78>
   2d8b4:	cmp	r9, fp
   2d8b8:	beq	2dde8 <flatcc_json_parser_union_type_vector@@Base+0xa90>
   2d8bc:	ldrb	r2, [fp]
   2d8c0:	cmp	r2, #32
   2d8c4:	bne	2dbbc <flatcc_json_parser_union_type_vector@@Base+0x864>
   2d8c8:	add	r3, fp, #1
   2d8cc:	b	2d8dc <flatcc_json_parser_union_type_vector@@Base+0x584>
   2d8d0:	ldrb	r2, [r3], #1
   2d8d4:	cmp	r2, #32
   2d8d8:	bne	2dbbc <flatcc_json_parser_union_type_vector@@Base+0x864>
   2d8dc:	cmp	r3, r9
   2d8e0:	mov	fp, r3
   2d8e4:	bne	2d8d0 <flatcc_json_parser_union_type_vector@@Base+0x578>
   2d8e8:	ldr	r3, [sl, #24]
   2d8ec:	cmp	r3, #0
   2d8f0:	bne	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2d8f4:	ldr	r3, [sl, #4]
   2d8f8:	mov	r2, #9
   2d8fc:	sub	r3, fp, r3
   2d900:	add	r3, r3, #1
   2d904:	str	fp, [sl, #36]	; 0x24
   2d908:	str	r3, [sl, #20]
   2d90c:	str	r2, [sl, #24]
   2d910:	mov	r8, r9
   2d914:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2d918:	mov	r6, #0
   2d91c:	mov	r7, r6
   2d920:	cmp	r8, fp
   2d924:	beq	2da1c <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   2d928:	and	r3, ip, #223	; 0xdf
   2d92c:	cmp	ip, #46	; 0x2e
   2d930:	cmpne	r3, #69	; 0x45
   2d934:	bne	2d69c <flatcc_json_parser_union_type_vector@@Base+0x344>
   2d938:	ldr	r3, [sl, #24]
   2d93c:	cmp	r3, #0
   2d940:	beq	2da50 <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   2d944:	cmp	r4, #45	; 0x2d
   2d948:	beq	2d990 <flatcc_json_parser_union_type_vector@@Base+0x638>
   2d94c:	strb	r5, [sp, #39]	; 0x27
   2d950:	mov	r8, r9
   2d954:	mov	r0, #0
   2d958:	b	2d6c0 <flatcc_json_parser_union_type_vector@@Base+0x368>
   2d95c:	cmp	r4, #45	; 0x2d
   2d960:	movne	r6, #0
   2d964:	bne	2d6b0 <flatcc_json_parser_union_type_vector@@Base+0x358>
   2d968:	ldr	r3, [sl, #24]
   2d96c:	cmp	r3, #0
   2d970:	bne	2d990 <flatcc_json_parser_union_type_vector@@Base+0x638>
   2d974:	ldr	r3, [sl, #4]
   2d978:	mov	r2, #8
   2d97c:	sub	r3, r8, r3
   2d980:	add	r3, r3, #1
   2d984:	str	r2, [sl, #24]
   2d988:	str	r8, [sl, #36]	; 0x24
   2d98c:	str	r3, [sl, #20]
   2d990:	mov	r0, r5
   2d994:	ldr	r3, [sp, #96]	; 0x60
   2d998:	blx	r3
   2d99c:	cmp	r0, #0
   2d9a0:	moveq	r8, r9
   2d9a4:	beq	2d6d4 <flatcc_json_parser_union_type_vector@@Base+0x37c>
   2d9a8:	ldrb	r3, [sp, #39]	; 0x27
   2d9ac:	ldr	r2, [sp, #16]
   2d9b0:	mov	r8, r9
   2d9b4:	strb	r3, [r2]
   2d9b8:	b	2d70c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   2d9bc:	ldr	r3, [sl, #24]
   2d9c0:	cmp	r3, #0
   2d9c4:	bne	2d944 <flatcc_json_parser_union_type_vector@@Base+0x5ec>
   2d9c8:	ldr	r3, [sl, #4]
   2d9cc:	mov	r2, #8
   2d9d0:	sub	r3, r1, r3
   2d9d4:	add	r3, r3, #1
   2d9d8:	cmp	r4, #45	; 0x2d
   2d9dc:	str	r2, [sl, #24]
   2d9e0:	str	r1, [sl, #36]	; 0x24
   2d9e4:	str	r3, [sl, #20]
   2d9e8:	beq	2d990 <flatcc_json_parser_union_type_vector@@Base+0x638>
   2d9ec:	b	2d94c <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   2d9f0:	ldr	r3, [sl, #24]
   2d9f4:	cmp	r3, #0
   2d9f8:	bne	2d990 <flatcc_json_parser_union_type_vector@@Base+0x638>
   2d9fc:	ldr	r3, [sl, #4]
   2da00:	mov	r2, #7
   2da04:	sub	r3, r8, r3
   2da08:	add	r3, r3, #1
   2da0c:	str	r8, [sl, #36]	; 0x24
   2da10:	str	r3, [sl, #20]
   2da14:	str	r2, [sl, #24]
   2da18:	b	2d990 <flatcc_json_parser_union_type_vector@@Base+0x638>
   2da1c:	add	r3, sp, #39	; 0x27
   2da20:	str	r3, [sp]
   2da24:	mov	r2, r9
   2da28:	ldr	r3, [sp, #88]	; 0x58
   2da2c:	mov	r1, fp
   2da30:	mov	r0, sl
   2da34:	bl	27798 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2da38:	cmp	r9, r0
   2da3c:	cmpne	r0, fp
   2da40:	mov	r8, r0
   2da44:	beq	2d4ac <flatcc_json_parser_union_type_vector@@Base+0x154>
   2da48:	ldrb	r0, [sp, #39]	; 0x27
   2da4c:	b	2d6c0 <flatcc_json_parser_union_type_vector@@Base+0x368>
   2da50:	ldr	r3, [sl, #4]
   2da54:	mov	r2, #12
   2da58:	sub	r3, r8, r3
   2da5c:	add	r3, r3, #1
   2da60:	cmp	r4, #45	; 0x2d
   2da64:	str	r2, [sl, #24]
   2da68:	str	r8, [sl, #36]	; 0x24
   2da6c:	str	r3, [sl, #20]
   2da70:	beq	2d990 <flatcc_json_parser_union_type_vector@@Base+0x638>
   2da74:	b	2d94c <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   2da78:	add	r3, r8, #1
   2da7c:	sub	r2, r9, r3
   2da80:	cmp	r2, #1
   2da84:	ble	2da98 <flatcc_json_parser_union_type_vector@@Base+0x740>
   2da88:	ldrb	r2, [r8, #1]
   2da8c:	cmp	r2, #32
   2da90:	bhi	2db90 <flatcc_json_parser_union_type_vector@@Base+0x838>
   2da94:	beq	2de20 <flatcc_json_parser_union_type_vector@@Base+0xac8>
   2da98:	mov	r1, #0
   2da9c:	cmp	r9, r3
   2daa0:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2daa4:	ldrb	r2, [r3]
   2daa8:	cmp	r2, #32
   2daac:	bne	2de34 <flatcc_json_parser_union_type_vector@@Base+0xadc>
   2dab0:	add	r3, r3, #1
   2dab4:	cmp	r3, r9
   2dab8:	mov	r8, r3
   2dabc:	beq	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2dac0:	ldrb	r2, [r3], #1
   2dac4:	cmp	r2, #32
   2dac8:	beq	2dab4 <flatcc_json_parser_union_type_vector@@Base+0x75c>
   2dacc:	cmp	r2, #32
   2dad0:	bhi	2e040 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   2dad4:	mov	r3, r8
   2dad8:	sub	r2, r2, #9
   2dadc:	cmp	r2, #23
   2dae0:	ldrls	pc, [pc, r2, lsl #2]
   2dae4:	b	2dba0 <flatcc_json_parser_union_type_vector@@Base+0x848>
   2dae8:	muleq	r2, r8, fp
   2daec:	andeq	sp, r2, r8, ror #22
   2daf0:	andeq	sp, r2, r0, lsr #23
   2daf4:	andeq	sp, r2, r0, lsr #23
   2daf8:	andeq	sp, r2, r8, asr #22
   2dafc:	andeq	sp, r2, r0, lsr #23
   2db00:	andeq	sp, r2, r0, lsr #23
   2db04:	andeq	sp, r2, r0, lsr #23
   2db08:	andeq	sp, r2, r0, lsr #23
   2db0c:	andeq	sp, r2, r0, lsr #23
   2db10:	andeq	sp, r2, r0, lsr #23
   2db14:	andeq	sp, r2, r0, lsr #23
   2db18:	andeq	sp, r2, r0, lsr #23
   2db1c:	andeq	sp, r2, r0, lsr #23
   2db20:	andeq	sp, r2, r0, lsr #23
   2db24:	andeq	sp, r2, r0, lsr #23
   2db28:	andeq	sp, r2, r0, lsr #23
   2db2c:	andeq	sp, r2, r0, lsr #23
   2db30:	andeq	sp, r2, r0, lsr #23
   2db34:	andeq	sp, r2, r0, lsr #23
   2db38:	andeq	sp, r2, r0, lsr #23
   2db3c:	andeq	sp, r2, r0, lsr #23
   2db40:	andeq	sp, r2, r0, lsr #23
   2db44:	muleq	r2, ip, sl
   2db48:	sub	r2, r9, r3
   2db4c:	cmp	r2, #1
   2db50:	movle	r2, r1
   2db54:	ldrbgt	r2, [r3, #1]
   2db58:	subgt	r2, r2, #10
   2db5c:	clzgt	r2, r2
   2db60:	lsrgt	r2, r2, #5
   2db64:	add	r3, r3, r2
   2db68:	ldr	r2, [sl, #16]
   2db6c:	add	r3, r3, #1
   2db70:	add	r2, r2, #1
   2db74:	str	r3, [sl, #4]
   2db78:	str	r2, [sl, #16]
   2db7c:	cmp	r9, r3
   2db80:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2db84:	ldrb	r2, [r3]
   2db88:	cmp	r2, #32
   2db8c:	bls	2dad8 <flatcc_json_parser_union_type_vector@@Base+0x780>
   2db90:	mov	r8, r3
   2db94:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2db98:	add	r3, r3, #1
   2db9c:	b	2db7c <flatcc_json_parser_union_type_vector@@Base+0x824>
   2dba0:	ldr	r2, [sl, #24]
   2dba4:	cmp	r2, #0
   2dba8:	bne	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2dbac:	ldr	r2, [sl, #4]
   2dbb0:	str	r3, [sl, #36]	; 0x24
   2dbb4:	sub	r3, r3, r2
   2dbb8:	b	2d85c <flatcc_json_parser_union_type_vector@@Base+0x504>
   2dbbc:	cmp	r2, #32
   2dbc0:	bhi	2dc7c <flatcc_json_parser_union_type_vector@@Base+0x924>
   2dbc4:	sub	r3, r2, #9
   2dbc8:	cmp	r3, #23
   2dbcc:	ldrls	pc, [pc, r3, lsl #2]
   2dbd0:	b	2dd58 <flatcc_json_parser_union_type_vector@@Base+0xa00>
   2dbd4:	andeq	sp, r2, r0, asr sp
   2dbd8:	andeq	sp, r2, r4, asr ip
   2dbdc:	andeq	sp, r2, r8, asr sp
   2dbe0:	andeq	sp, r2, r8, asr sp
   2dbe4:	andeq	sp, r2, r4, lsr ip
   2dbe8:	andeq	sp, r2, r8, asr sp
   2dbec:	andeq	sp, r2, r8, asr sp
   2dbf0:	andeq	sp, r2, r8, asr sp
   2dbf4:	andeq	sp, r2, r8, asr sp
   2dbf8:	andeq	sp, r2, r8, asr sp
   2dbfc:	andeq	sp, r2, r8, asr sp
   2dc00:	andeq	sp, r2, r8, asr sp
   2dc04:	andeq	sp, r2, r8, asr sp
   2dc08:	andeq	sp, r2, r8, asr sp
   2dc0c:	andeq	sp, r2, r8, asr sp
   2dc10:	andeq	sp, r2, r8, asr sp
   2dc14:	andeq	sp, r2, r8, asr sp
   2dc18:	andeq	sp, r2, r8, asr sp
   2dc1c:	andeq	sp, r2, r8, asr sp
   2dc20:	andeq	sp, r2, r8, asr sp
   2dc24:	andeq	sp, r2, r8, asr sp
   2dc28:	andeq	sp, r2, r8, asr sp
   2dc2c:	andeq	sp, r2, r8, asr sp
   2dc30:			; <UNDEFINED> instruction: 0x0002d8b4
   2dc34:	sub	r3, r9, fp
   2dc38:	cmp	r3, #1
   2dc3c:	movle	r3, r5
   2dc40:	ldrbgt	r3, [fp, #1]
   2dc44:	subgt	r3, r3, #10
   2dc48:	clzgt	r3, r3
   2dc4c:	lsrgt	r3, r3, #5
   2dc50:	add	fp, fp, r3
   2dc54:	ldr	r3, [sl, #16]
   2dc58:	add	fp, fp, #1
   2dc5c:	add	r3, r3, #1
   2dc60:	str	fp, [sl, #4]
   2dc64:	str	r3, [sl, #16]
   2dc68:	cmp	r9, fp
   2dc6c:	beq	2dde8 <flatcc_json_parser_union_type_vector@@Base+0xa90>
   2dc70:	ldrb	r2, [fp]
   2dc74:	cmp	r2, #32
   2dc78:	bls	2dbc4 <flatcc_json_parser_union_type_vector@@Base+0x86c>
   2dc7c:	cmp	r2, #93	; 0x5d
   2dc80:	bne	2d5e0 <flatcc_json_parser_union_type_vector@@Base+0x288>
   2dc84:	add	r8, fp, #1
   2dc88:	sub	r3, r9, r8
   2dc8c:	cmp	r3, #1
   2dc90:	ble	2dca4 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   2dc94:	ldrb	r3, [fp, #1]
   2dc98:	cmp	r3, #32
   2dc9c:	bhi	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2dca0:	beq	2e048 <flatcc_json_parser_union_type_vector@@Base+0xcf0>
   2dca4:	mov	r1, #0
   2dca8:	cmp	r9, r8
   2dcac:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2dcb0:	ldrb	r2, [r8]
   2dcb4:	cmp	r2, #32
   2dcb8:	bne	2dcd8 <flatcc_json_parser_union_type_vector@@Base+0x980>
   2dcbc:	add	r3, r8, #1
   2dcc0:	cmp	r3, r9
   2dcc4:	mov	r8, r3
   2dcc8:	beq	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2dccc:	ldrb	r2, [r3], #1
   2dcd0:	cmp	r2, #32
   2dcd4:	beq	2dcc0 <flatcc_json_parser_union_type_vector@@Base+0x968>
   2dcd8:	cmp	r2, #32
   2dcdc:	bhi	2e040 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   2dce0:	sub	r2, r2, #9
   2dce4:	cmp	r2, #23
   2dce8:	ldrls	pc, [pc, r2, lsl #2]
   2dcec:	b	2d844 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   2dcf0:	andeq	sp, r2, r8, asr #27
   2dcf4:	andeq	sp, r2, r4, lsr #27
   2dcf8:	andeq	sp, r2, r4, asr #16
   2dcfc:	andeq	sp, r2, r4, asr #16
   2dd00:	andeq	sp, r2, r4, lsl #27
   2dd04:	andeq	sp, r2, r4, asr #16
   2dd08:	andeq	sp, r2, r4, asr #16
   2dd0c:	andeq	sp, r2, r4, asr #16
   2dd10:	andeq	sp, r2, r4, asr #16
   2dd14:	andeq	sp, r2, r4, asr #16
   2dd18:	andeq	sp, r2, r4, asr #16
   2dd1c:	andeq	sp, r2, r4, asr #16
   2dd20:	andeq	sp, r2, r4, asr #16
   2dd24:	andeq	sp, r2, r4, asr #16
   2dd28:	andeq	sp, r2, r4, asr #16
   2dd2c:	andeq	sp, r2, r4, asr #16
   2dd30:	andeq	sp, r2, r4, asr #16
   2dd34:	andeq	sp, r2, r4, asr #16
   2dd38:	andeq	sp, r2, r4, asr #16
   2dd3c:	andeq	sp, r2, r4, asr #16
   2dd40:	andeq	sp, r2, r4, asr #16
   2dd44:	andeq	sp, r2, r4, asr #16
   2dd48:	andeq	sp, r2, r4, asr #16
   2dd4c:	andeq	sp, r2, r8, lsr #25
   2dd50:	add	fp, fp, #1
   2dd54:	b	2dc68 <flatcc_json_parser_union_type_vector@@Base+0x910>
   2dd58:	ldr	r3, [sl, #24]
   2dd5c:	cmp	r3, #0
   2dd60:	bne	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2dd64:	ldr	r3, [sl, #4]
   2dd68:	mov	r2, #5
   2dd6c:	sub	r3, fp, r3
   2dd70:	add	r3, r3, #1
   2dd74:	str	fp, [sl, #36]	; 0x24
   2dd78:	str	r3, [sl, #20]
   2dd7c:	str	r2, [sl, #24]
   2dd80:	b	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2dd84:	sub	r3, r9, r8
   2dd88:	cmp	r3, #1
   2dd8c:	movle	r3, r1
   2dd90:	ldrbgt	r3, [r8, #1]
   2dd94:	subgt	r3, r3, #10
   2dd98:	clzgt	r3, r3
   2dd9c:	lsrgt	r3, r3, #5
   2dda0:	add	r8, r8, r3
   2dda4:	ldr	r3, [sl, #16]
   2dda8:	add	r8, r8, #1
   2ddac:	add	r3, r3, #1
   2ddb0:	str	r8, [sl, #4]
   2ddb4:	str	r3, [sl, #16]
   2ddb8:	cmp	r9, r8
   2ddbc:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2ddc0:	ldrb	r2, [r8]
   2ddc4:	b	2dcd8 <flatcc_json_parser_union_type_vector@@Base+0x980>
   2ddc8:	add	r8, r8, #1
   2ddcc:	b	2ddb8 <flatcc_json_parser_union_type_vector@@Base+0xa60>
   2ddd0:	ldrb	r2, [r8, #2]
   2ddd4:	cmp	r2, #32
   2ddd8:	addhi	fp, r8, #2
   2dddc:	bls	2d8b4 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   2dde0:	cmp	r9, fp
   2dde4:	bne	2dc7c <flatcc_json_parser_union_type_vector@@Base+0x924>
   2dde8:	mov	fp, r9
   2ddec:	b	2d8e8 <flatcc_json_parser_union_type_vector@@Base+0x590>
   2ddf0:	ldr	r3, [sl, #24]
   2ddf4:	cmp	r3, #0
   2ddf8:	bne	2d3b4 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   2ddfc:	ldr	r3, [sl, #4]
   2de00:	mov	r2, #15
   2de04:	sub	r3, r8, r3
   2de08:	add	r3, r3, #1
   2de0c:	str	r8, [sl, #36]	; 0x24
   2de10:	str	r3, [sl, #20]
   2de14:	mov	r8, r9
   2de18:	str	r2, [sl, #24]
   2de1c:	b	2d3b8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   2de20:	ldrb	r2, [r8, #2]
   2de24:	cmp	r2, #32
   2de28:	addhi	r8, r8, #2
   2de2c:	bls	2da98 <flatcc_json_parser_union_type_vector@@Base+0x740>
   2de30:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2de34:	mov	r8, r3
   2de38:	b	2dacc <flatcc_json_parser_union_type_vector@@Base+0x774>
   2de3c:	mov	fp, r3
   2de40:	cmp	r2, #32
   2de44:	bhi	2df08 <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   2de48:	mov	r3, fp
   2de4c:	sub	r2, r2, #9
   2de50:	cmp	r2, #23
   2de54:	ldrls	pc, [pc, r2, lsl #2]
   2de58:	b	2dfe4 <flatcc_json_parser_union_type_vector@@Base+0xc8c>
   2de5c:	ldrdeq	sp, [r2], -ip
   2de60:	ldrdeq	sp, [r2], -ip
   2de64:	andeq	sp, r2, r4, ror #31
   2de68:	andeq	sp, r2, r4, ror #31
   2de6c:			; <UNDEFINED> instruction: 0x0002debc
   2de70:	andeq	sp, r2, r4, ror #31
   2de74:	andeq	sp, r2, r4, ror #31
   2de78:	andeq	sp, r2, r4, ror #31
   2de7c:	andeq	sp, r2, r4, ror #31
   2de80:	andeq	sp, r2, r4, ror #31
   2de84:	andeq	sp, r2, r4, ror #31
   2de88:	andeq	sp, r2, r4, ror #31
   2de8c:	andeq	sp, r2, r4, ror #31
   2de90:	andeq	sp, r2, r4, ror #31
   2de94:	andeq	sp, r2, r4, ror #31
   2de98:	andeq	sp, r2, r4, ror #31
   2de9c:	andeq	sp, r2, r4, ror #31
   2dea0:	andeq	sp, r2, r4, ror #31
   2dea4:	andeq	sp, r2, r4, ror #31
   2dea8:	andeq	sp, r2, r4, ror #31
   2deac:	andeq	sp, r2, r4, ror #31
   2deb0:	andeq	sp, r2, r4, ror #31
   2deb4:	andeq	sp, r2, r4, ror #31
   2deb8:	andeq	sp, r2, r8, lsr #11
   2debc:	sub	r2, r9, r3
   2dec0:	cmp	r2, #1
   2dec4:	movle	r2, r1
   2dec8:	ldrbgt	r2, [r3, #1]
   2decc:	subgt	r2, r2, #10
   2ded0:	clzgt	r2, r2
   2ded4:	lsrgt	r2, r2, #5
   2ded8:	add	r3, r3, r2
   2dedc:	ldr	r2, [sl, #16]
   2dee0:	add	r3, r3, #1
   2dee4:	add	r2, r2, #1
   2dee8:	str	r3, [sl, #4]
   2deec:	str	r2, [sl, #16]
   2def0:	cmp	r9, r3
   2def4:	beq	2dff0 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   2def8:	ldrb	r2, [r3]
   2defc:	cmp	r2, #32
   2df00:	bls	2de4c <flatcc_json_parser_union_type_vector@@Base+0xaf4>
   2df04:	mov	fp, r3
   2df08:	cmp	r2, #93	; 0x5d
   2df0c:	bne	2d5dc <flatcc_json_parser_union_type_vector@@Base+0x284>
   2df10:	add	r8, fp, #1
   2df14:	sub	r3, r9, r8
   2df18:	cmp	r3, #1
   2df1c:	ble	2df30 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   2df20:	ldrb	r3, [fp, #1]
   2df24:	cmp	r3, #32
   2df28:	bhi	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2df2c:	beq	2e05c <flatcc_json_parser_union_type_vector@@Base+0xd04>
   2df30:	mov	r1, #0
   2df34:	cmp	r9, r8
   2df38:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2df3c:	ldrb	r3, [r8]
   2df40:	cmp	r3, #32
   2df44:	bne	2df64 <flatcc_json_parser_union_type_vector@@Base+0xc0c>
   2df48:	add	r2, r8, #1
   2df4c:	cmp	r2, r9
   2df50:	mov	r8, r2
   2df54:	beq	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2df58:	ldrb	r3, [r2], #1
   2df5c:	cmp	r3, #32
   2df60:	beq	2df4c <flatcc_json_parser_union_type_vector@@Base+0xbf4>
   2df64:	cmp	r3, #32
   2df68:	bhi	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2df6c:	sub	r3, r3, #9
   2df70:	cmp	r3, #23
   2df74:	ldrls	pc, [pc, r3, lsl #2]
   2df78:	b	2d844 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   2df7c:	andeq	lr, r2, ip, asr #1
   2df80:	andeq	lr, r2, r0, lsr #1
   2df84:	andeq	sp, r2, r4, asr #16
   2df88:	andeq	sp, r2, r4, asr #16
   2df8c:	andeq	lr, r2, r0, lsl #1
   2df90:	andeq	sp, r2, r4, asr #16
   2df94:	andeq	sp, r2, r4, asr #16
   2df98:	andeq	sp, r2, r4, asr #16
   2df9c:	andeq	sp, r2, r4, asr #16
   2dfa0:	andeq	sp, r2, r4, asr #16
   2dfa4:	andeq	sp, r2, r4, asr #16
   2dfa8:	andeq	sp, r2, r4, asr #16
   2dfac:	andeq	sp, r2, r4, asr #16
   2dfb0:	andeq	sp, r2, r4, asr #16
   2dfb4:	andeq	sp, r2, r4, asr #16
   2dfb8:	andeq	sp, r2, r4, asr #16
   2dfbc:	andeq	sp, r2, r4, asr #16
   2dfc0:	andeq	sp, r2, r4, asr #16
   2dfc4:	andeq	sp, r2, r4, asr #16
   2dfc8:	andeq	sp, r2, r4, asr #16
   2dfcc:	andeq	sp, r2, r4, asr #16
   2dfd0:	andeq	sp, r2, r4, asr #16
   2dfd4:	andeq	sp, r2, r4, asr #16
   2dfd8:	andeq	sp, r2, r4, lsr pc
   2dfdc:	add	r3, r3, #1
   2dfe0:	b	2def0 <flatcc_json_parser_union_type_vector@@Base+0xb98>
   2dfe4:	ldr	r2, [sl, #24]
   2dfe8:	cmp	r2, #0
   2dfec:	beq	2e008 <flatcc_json_parser_union_type_vector@@Base+0xcb0>
   2dff0:	mov	fp, r9
   2dff4:	b	2d5dc <flatcc_json_parser_union_type_vector@@Base+0x284>
   2dff8:	mov	fp, r3
   2dffc:	cmp	r9, fp
   2e000:	bne	2df08 <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   2e004:	b	2d5dc <flatcc_json_parser_union_type_vector@@Base+0x284>
   2e008:	ldr	r2, [sl, #4]
   2e00c:	str	r3, [sl, #36]	; 0x24
   2e010:	sub	r3, r3, r2
   2e014:	add	r3, r3, #1
   2e018:	mov	r2, #5
   2e01c:	str	r3, [sl, #20]
   2e020:	str	r2, [sl, #24]
   2e024:	mov	fp, r9
   2e028:	b	2d5dc <flatcc_json_parser_union_type_vector@@Base+0x284>
   2e02c:	ldrb	r2, [fp, #2]
   2e030:	cmp	r2, #32
   2e034:	addhi	fp, fp, #2
   2e038:	bls	2d5a4 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   2e03c:	b	2dffc <flatcc_json_parser_union_type_vector@@Base+0xca4>
   2e040:	mov	r3, r8
   2e044:	b	2db90 <flatcc_json_parser_union_type_vector@@Base+0x838>
   2e048:	ldrb	r3, [fp, #2]
   2e04c:	cmp	r3, #32
   2e050:	bls	2dca4 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   2e054:	add	r8, fp, #2
   2e058:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2e05c:	ldrb	r3, [fp, #2]
   2e060:	cmp	r3, #32
   2e064:	bls	2df30 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   2e068:	b	2e054 <flatcc_json_parser_union_type_vector@@Base+0xcfc>
   2e06c:	ldr	r3, [pc, #96]	; 2e0d4 <flatcc_json_parser_union_type_vector@@Base+0xd7c>
   2e070:	ldr	r2, [pc, #96]	; 2e0d8 <flatcc_json_parser_union_type_vector@@Base+0xd80>
   2e074:	ldr	r1, [pc, #96]	; 2e0dc <flatcc_json_parser_union_type_vector@@Base+0xd84>
   2e078:	ldr	r0, [pc, #96]	; 2e0e0 <flatcc_json_parser_union_type_vector@@Base+0xd88>
   2e07c:	bl	126a8 <__assert_fail@plt>
   2e080:	sub	r3, r9, r8
   2e084:	cmp	r3, #1
   2e088:	movle	r3, r1
   2e08c:	ldrbgt	r3, [r8, #1]
   2e090:	subgt	r3, r3, #10
   2e094:	clzgt	r3, r3
   2e098:	lsrgt	r3, r3, #5
   2e09c:	add	r8, r8, r3
   2e0a0:	ldr	r3, [sl, #16]
   2e0a4:	add	r8, r8, #1
   2e0a8:	add	r3, r3, #1
   2e0ac:	str	r8, [sl, #4]
   2e0b0:	str	r3, [sl, #16]
   2e0b4:	cmp	r9, r8
   2e0b8:	beq	2d44c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2e0bc:	ldrb	r3, [r8]
   2e0c0:	cmp	r3, #32
   2e0c4:	bls	2df6c <flatcc_json_parser_union_type_vector@@Base+0xc14>
   2e0c8:	b	2d450 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2e0cc:	add	r8, r8, #1
   2e0d0:	b	2e0b4 <flatcc_json_parser_union_type_vector@@Base+0xd5c>
   2e0d4:	andeq	pc, r2, r8, ror #30
   2e0d8:	andeq	r0, r0, r2, ror #8
   2e0dc:	andeq	r0, r3, r8, ror #1
   2e0e0:	andeq	r0, r3, r4, lsr r1

0002e0e4 <flatcc_json_parser_table_as_root@@Base>:
   2e0e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   2e0e8:	sub	sp, sp, #52	; 0x34
   2e0ec:	mov	r5, r2
   2e0f0:	ldr	r8, [sp, #80]	; 0x50
   2e0f4:	mov	r9, r0
   2e0f8:	ands	r7, r8, #4
   2e0fc:	movne	r7, #2
   2e100:	subs	r4, r1, #0
   2e104:	addeq	r4, sp, #4
   2e108:	mov	r2, #44	; 0x2c
   2e10c:	mov	r1, #0
   2e110:	mov	r0, r4
   2e114:	add	r6, r5, r3
   2e118:	bl	12654 <memset@plt>
   2e11c:	mov	r2, #1
   2e120:	str	r2, [r4, #16]
   2e124:	str	r6, [r4, #32]
   2e128:	str	r9, [r4]
   2e12c:	stmib	r4, {r5, r8}
   2e130:	str	r5, [r4, #28]
   2e134:	str	r5, [r4, #36]	; 0x24
   2e138:	mov	r3, r7
   2e13c:	mov	r2, #0
   2e140:	ldr	r1, [sp, #84]	; 0x54
   2e144:	mov	r0, r9
   2e148:	bl	228f8 <flatcc_builder_start_buffer@@Base>
   2e14c:	cmp	r0, #0
   2e150:	bne	2e1a8 <flatcc_json_parser_table_as_root@@Base+0xc4>
   2e154:	mov	r2, r6
   2e158:	mov	r3, sp
   2e15c:	mov	r1, r5
   2e160:	mov	r0, r4
   2e164:	ldr	ip, [sp, #88]	; 0x58
   2e168:	blx	ip
   2e16c:	ldr	r6, [r4, #24]
   2e170:	cmp	r6, #0
   2e174:	beq	2e184 <flatcc_json_parser_table_as_root@@Base+0xa0>
   2e178:	mov	r0, r6
   2e17c:	add	sp, sp, #52	; 0x34
   2e180:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e184:	mov	r0, r9
   2e188:	ldr	r1, [sp]
   2e18c:	bl	22a84 <flatcc_builder_end_buffer@@Base>
   2e190:	cmp	r0, #0
   2e194:	beq	2e1a8 <flatcc_json_parser_table_as_root@@Base+0xc4>
   2e198:	mov	r0, r6
   2e19c:	str	r5, [r4, #40]	; 0x28
   2e1a0:	add	sp, sp, #52	; 0x34
   2e1a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e1a8:	mvn	r6, #0
   2e1ac:	mov	r0, r6
   2e1b0:	add	sp, sp, #52	; 0x34
   2e1b4:	pop	{r4, r5, r6, r7, r8, r9, pc}

0002e1b8 <flatcc_json_parser_struct_as_root@@Base>:
   2e1b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   2e1bc:	sub	sp, sp, #52	; 0x34
   2e1c0:	mov	r5, r2
   2e1c4:	ldr	r8, [sp, #80]	; 0x50
   2e1c8:	mov	r9, r0
   2e1cc:	ands	r7, r8, #4
   2e1d0:	movne	r7, #2
   2e1d4:	subs	r4, r1, #0
   2e1d8:	addeq	r4, sp, #4
   2e1dc:	mov	r2, #44	; 0x2c
   2e1e0:	mov	r1, #0
   2e1e4:	mov	r0, r4
   2e1e8:	add	r6, r5, r3
   2e1ec:	bl	12654 <memset@plt>
   2e1f0:	mov	r2, #1
   2e1f4:	str	r2, [r4, #16]
   2e1f8:	str	r6, [r4, #32]
   2e1fc:	str	r9, [r4]
   2e200:	stmib	r4, {r5, r8}
   2e204:	str	r5, [r4, #28]
   2e208:	str	r5, [r4, #36]	; 0x24
   2e20c:	mov	r3, r7
   2e210:	mov	r2, #0
   2e214:	ldr	r1, [sp, #84]	; 0x54
   2e218:	mov	r0, r9
   2e21c:	bl	228f8 <flatcc_builder_start_buffer@@Base>
   2e220:	cmp	r0, #0
   2e224:	bne	2e27c <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2e228:	mov	r2, r6
   2e22c:	mov	r3, sp
   2e230:	mov	r1, r5
   2e234:	mov	r0, r4
   2e238:	ldr	ip, [sp, #88]	; 0x58
   2e23c:	blx	ip
   2e240:	ldr	r6, [r4, #24]
   2e244:	cmp	r6, #0
   2e248:	beq	2e258 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   2e24c:	mov	r0, r6
   2e250:	add	sp, sp, #52	; 0x34
   2e254:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e258:	mov	r0, r9
   2e25c:	ldr	r1, [sp]
   2e260:	bl	22a84 <flatcc_builder_end_buffer@@Base>
   2e264:	cmp	r0, #0
   2e268:	beq	2e27c <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2e26c:	mov	r0, r6
   2e270:	str	r5, [r4, #40]	; 0x28
   2e274:	add	sp, sp, #52	; 0x34
   2e278:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e27c:	mvn	r6, #0
   2e280:	mov	r0, r6
   2e284:	add	sp, sp, #52	; 0x34
   2e288:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e28c:	eor	r1, r1, #-2147483648	; 0x80000000
   2e290:	b	2e298 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   2e294:	eor	r3, r3, #-2147483648	; 0x80000000
   2e298:	push	{r4, r5, lr}
   2e29c:	lsl	r4, r1, #1
   2e2a0:	lsl	r5, r3, #1
   2e2a4:	teq	r4, r5
   2e2a8:	teqeq	r0, r2
   2e2ac:	orrsne	ip, r4, r0
   2e2b0:	orrsne	ip, r5, r2
   2e2b4:	mvnsne	ip, r4, asr #21
   2e2b8:	mvnsne	ip, r5, asr #21
   2e2bc:	beq	2e4a8 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   2e2c0:	lsr	r4, r4, #21
   2e2c4:	rsbs	r5, r4, r5, lsr #21
   2e2c8:	rsblt	r5, r5, #0
   2e2cc:	ble	2e2ec <flatcc_json_parser_struct_as_root@@Base+0x134>
   2e2d0:	add	r4, r4, r5
   2e2d4:	eor	r2, r0, r2
   2e2d8:	eor	r3, r1, r3
   2e2dc:	eor	r0, r2, r0
   2e2e0:	eor	r1, r3, r1
   2e2e4:	eor	r2, r0, r2
   2e2e8:	eor	r3, r1, r3
   2e2ec:	cmp	r5, #54	; 0x36
   2e2f0:	pophi	{r4, r5, pc}
   2e2f4:	tst	r1, #-2147483648	; 0x80000000
   2e2f8:	lsl	r1, r1, #12
   2e2fc:	mov	ip, #1048576	; 0x100000
   2e300:	orr	r1, ip, r1, lsr #12
   2e304:	beq	2e310 <flatcc_json_parser_struct_as_root@@Base+0x158>
   2e308:	rsbs	r0, r0, #0
   2e30c:	rsc	r1, r1, #0
   2e310:	tst	r3, #-2147483648	; 0x80000000
   2e314:	lsl	r3, r3, #12
   2e318:	orr	r3, ip, r3, lsr #12
   2e31c:	beq	2e328 <flatcc_json_parser_struct_as_root@@Base+0x170>
   2e320:	rsbs	r2, r2, #0
   2e324:	rsc	r3, r3, #0
   2e328:	teq	r4, r5
   2e32c:	beq	2e490 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   2e330:	sub	r4, r4, #1
   2e334:	rsbs	lr, r5, #32
   2e338:	blt	2e354 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   2e33c:	lsl	ip, r2, lr
   2e340:	adds	r0, r0, r2, lsr r5
   2e344:	adc	r1, r1, #0
   2e348:	adds	r0, r0, r3, lsl lr
   2e34c:	adcs	r1, r1, r3, asr r5
   2e350:	b	2e370 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   2e354:	sub	r5, r5, #32
   2e358:	add	lr, lr, #32
   2e35c:	cmp	r2, #1
   2e360:	lsl	ip, r3, lr
   2e364:	orrcs	ip, ip, #2
   2e368:	adds	r0, r0, r3, asr r5
   2e36c:	adcs	r1, r1, r3, asr #31
   2e370:	and	r5, r1, #-2147483648	; 0x80000000
   2e374:	bpl	2e384 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   2e378:	rsbs	ip, ip, #0
   2e37c:	rscs	r0, r0, #0
   2e380:	rsc	r1, r1, #0
   2e384:	cmp	r1, #1048576	; 0x100000
   2e388:	bcc	2e3c8 <flatcc_json_parser_struct_as_root@@Base+0x210>
   2e38c:	cmp	r1, #2097152	; 0x200000
   2e390:	bcc	2e3b0 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   2e394:	lsrs	r1, r1, #1
   2e398:	rrxs	r0, r0
   2e39c:	rrx	ip, ip
   2e3a0:	add	r4, r4, #1
   2e3a4:	lsl	r2, r4, #21
   2e3a8:	cmn	r2, #4194304	; 0x400000
   2e3ac:	bcs	2e508 <flatcc_json_parser_struct_as_root@@Base+0x350>
   2e3b0:	cmp	ip, #-2147483648	; 0x80000000
   2e3b4:	lsrseq	ip, r0, #1
   2e3b8:	adcs	r0, r0, #0
   2e3bc:	adc	r1, r1, r4, lsl #20
   2e3c0:	orr	r1, r1, r5
   2e3c4:	pop	{r4, r5, pc}
   2e3c8:	lsls	ip, ip, #1
   2e3cc:	adcs	r0, r0, r0
   2e3d0:	adc	r1, r1, r1
   2e3d4:	tst	r1, #1048576	; 0x100000
   2e3d8:	sub	r4, r4, #1
   2e3dc:	bne	2e3b0 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   2e3e0:	teq	r1, #0
   2e3e4:	moveq	r1, r0
   2e3e8:	moveq	r0, #0
   2e3ec:	clz	r3, r1
   2e3f0:	addeq	r3, r3, #32
   2e3f4:	sub	r3, r3, #11
   2e3f8:	subs	r2, r3, #32
   2e3fc:	bge	2e420 <flatcc_json_parser_struct_as_root@@Base+0x268>
   2e400:	adds	r2, r2, #12
   2e404:	ble	2e41c <flatcc_json_parser_struct_as_root@@Base+0x264>
   2e408:	add	ip, r2, #20
   2e40c:	rsb	r2, r2, #12
   2e410:	lsl	r0, r1, ip
   2e414:	lsr	r1, r1, r2
   2e418:	b	2e430 <flatcc_json_parser_struct_as_root@@Base+0x278>
   2e41c:	add	r2, r2, #20
   2e420:	rsble	ip, r2, #32
   2e424:	lsl	r1, r1, r2
   2e428:	orrle	r1, r1, r0, lsr ip
   2e42c:	lslle	r0, r0, r2
   2e430:	subs	r4, r4, r3
   2e434:	addge	r1, r1, r4, lsl #20
   2e438:	orrge	r1, r1, r5
   2e43c:	popge	{r4, r5, pc}
   2e440:	mvn	r4, r4
   2e444:	subs	r4, r4, #31
   2e448:	bge	2e484 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   2e44c:	adds	r4, r4, #12
   2e450:	bgt	2e46c <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   2e454:	add	r4, r4, #20
   2e458:	rsb	r2, r4, #32
   2e45c:	lsr	r0, r0, r4
   2e460:	orr	r0, r0, r1, lsl r2
   2e464:	orr	r1, r5, r1, lsr r4
   2e468:	pop	{r4, r5, pc}
   2e46c:	rsb	r4, r4, #12
   2e470:	rsb	r2, r4, #32
   2e474:	lsr	r0, r0, r2
   2e478:	orr	r0, r0, r1, lsl r4
   2e47c:	mov	r1, r5
   2e480:	pop	{r4, r5, pc}
   2e484:	lsr	r0, r1, r4
   2e488:	mov	r1, r5
   2e48c:	pop	{r4, r5, pc}
   2e490:	teq	r4, #0
   2e494:	eor	r3, r3, #1048576	; 0x100000
   2e498:	eoreq	r1, r1, #1048576	; 0x100000
   2e49c:	addeq	r4, r4, #1
   2e4a0:	subne	r5, r5, #1
   2e4a4:	b	2e330 <flatcc_json_parser_struct_as_root@@Base+0x178>
   2e4a8:	mvns	ip, r4, asr #21
   2e4ac:	mvnsne	ip, r5, asr #21
   2e4b0:	beq	2e518 <flatcc_json_parser_struct_as_root@@Base+0x360>
   2e4b4:	teq	r4, r5
   2e4b8:	teqeq	r0, r2
   2e4bc:	beq	2e4d0 <flatcc_json_parser_struct_as_root@@Base+0x318>
   2e4c0:	orrs	ip, r4, r0
   2e4c4:	moveq	r1, r3
   2e4c8:	moveq	r0, r2
   2e4cc:	pop	{r4, r5, pc}
   2e4d0:	teq	r1, r3
   2e4d4:	movne	r1, #0
   2e4d8:	movne	r0, #0
   2e4dc:	popne	{r4, r5, pc}
   2e4e0:	lsrs	ip, r4, #21
   2e4e4:	bne	2e4f8 <flatcc_json_parser_struct_as_root@@Base+0x340>
   2e4e8:	lsls	r0, r0, #1
   2e4ec:	adcs	r1, r1, r1
   2e4f0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2e4f4:	pop	{r4, r5, pc}
   2e4f8:	adds	r4, r4, #4194304	; 0x400000
   2e4fc:	addcc	r1, r1, #1048576	; 0x100000
   2e500:	popcc	{r4, r5, pc}
   2e504:	and	r5, r1, #-2147483648	; 0x80000000
   2e508:	orr	r1, r5, #2130706432	; 0x7f000000
   2e50c:	orr	r1, r1, #15728640	; 0xf00000
   2e510:	mov	r0, #0
   2e514:	pop	{r4, r5, pc}
   2e518:	mvns	ip, r4, asr #21
   2e51c:	movne	r1, r3
   2e520:	movne	r0, r2
   2e524:	mvnseq	ip, r5, asr #21
   2e528:	movne	r3, r1
   2e52c:	movne	r2, r0
   2e530:	orrs	r4, r0, r1, lsl #12
   2e534:	orrseq	r5, r2, r3, lsl #12
   2e538:	teqeq	r1, r3
   2e53c:	orrne	r1, r1, #524288	; 0x80000
   2e540:	pop	{r4, r5, pc}
   2e544:	teq	r0, #0
   2e548:	moveq	r1, #0
   2e54c:	bxeq	lr
   2e550:	push	{r4, r5, lr}
   2e554:	mov	r4, #1024	; 0x400
   2e558:	add	r4, r4, #50	; 0x32
   2e55c:	mov	r5, #0
   2e560:	mov	r1, #0
   2e564:	b	2e3e0 <flatcc_json_parser_struct_as_root@@Base+0x228>
   2e568:	teq	r0, #0
   2e56c:	moveq	r1, #0
   2e570:	bxeq	lr
   2e574:	push	{r4, r5, lr}
   2e578:	mov	r4, #1024	; 0x400
   2e57c:	add	r4, r4, #50	; 0x32
   2e580:	ands	r5, r0, #-2147483648	; 0x80000000
   2e584:	rsbmi	r0, r0, #0
   2e588:	mov	r1, #0
   2e58c:	b	2e3e0 <flatcc_json_parser_struct_as_root@@Base+0x228>
   2e590:	lsls	r2, r0, #1
   2e594:	asr	r1, r2, #3
   2e598:	rrx	r1, r1
   2e59c:	lsl	r0, r2, #28
   2e5a0:	andsne	r3, r2, #-16777216	; 0xff000000
   2e5a4:	teqne	r3, #-16777216	; 0xff000000
   2e5a8:	eorne	r1, r1, #939524096	; 0x38000000
   2e5ac:	bxne	lr
   2e5b0:	teq	r2, #0
   2e5b4:	teqne	r3, #-16777216	; 0xff000000
   2e5b8:	bxeq	lr
   2e5bc:	push	{r4, r5, lr}
   2e5c0:	mov	r4, #896	; 0x380
   2e5c4:	and	r5, r1, #-2147483648	; 0x80000000
   2e5c8:	bic	r1, r1, #-2147483648	; 0x80000000
   2e5cc:	b	2e3e0 <flatcc_json_parser_struct_as_root@@Base+0x228>
   2e5d0:	orrs	r2, r0, r1
   2e5d4:	bxeq	lr
   2e5d8:	push	{r4, r5, lr}
   2e5dc:	mov	r5, #0
   2e5e0:	b	2e600 <flatcc_json_parser_struct_as_root@@Base+0x448>
   2e5e4:	orrs	r2, r0, r1
   2e5e8:	bxeq	lr
   2e5ec:	push	{r4, r5, lr}
   2e5f0:	ands	r5, r1, #-2147483648	; 0x80000000
   2e5f4:	bpl	2e600 <flatcc_json_parser_struct_as_root@@Base+0x448>
   2e5f8:	rsbs	r0, r0, #0
   2e5fc:	rsc	r1, r1, #0
   2e600:	mov	r4, #1024	; 0x400
   2e604:	add	r4, r4, #50	; 0x32
   2e608:	lsrs	ip, r1, #22
   2e60c:	beq	2e384 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   2e610:	mov	r2, #3
   2e614:	lsrs	ip, ip, #3
   2e618:	addne	r2, r2, #3
   2e61c:	lsrs	ip, ip, #3
   2e620:	addne	r2, r2, #3
   2e624:	add	r2, r2, ip, lsr #3
   2e628:	rsb	r3, r2, #32
   2e62c:	lsl	ip, r0, r3
   2e630:	lsr	r0, r0, r2
   2e634:	orr	r0, r0, r1, lsl r3
   2e638:	lsr	r1, r1, r2
   2e63c:	add	r4, r4, r2
   2e640:	b	2e384 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   2e644:	eor	r0, r0, #-2147483648	; 0x80000000
   2e648:	b	2e650 <flatcc_json_parser_struct_as_root@@Base+0x498>
   2e64c:	eor	r1, r1, #-2147483648	; 0x80000000
   2e650:	lsls	r2, r0, #1
   2e654:	lslsne	r3, r1, #1
   2e658:	teqne	r2, r3
   2e65c:	mvnsne	ip, r2, asr #24
   2e660:	mvnsne	ip, r3, asr #24
   2e664:	beq	2e75c <flatcc_json_parser_struct_as_root@@Base+0x5a4>
   2e668:	lsr	r2, r2, #24
   2e66c:	rsbs	r3, r2, r3, lsr #24
   2e670:	addgt	r2, r2, r3
   2e674:	eorgt	r1, r0, r1
   2e678:	eorgt	r0, r1, r0
   2e67c:	eorgt	r1, r0, r1
   2e680:	rsblt	r3, r3, #0
   2e684:	cmp	r3, #25
   2e688:	bxhi	lr
   2e68c:	tst	r0, #-2147483648	; 0x80000000
   2e690:	orr	r0, r0, #8388608	; 0x800000
   2e694:	bic	r0, r0, #-16777216	; 0xff000000
   2e698:	rsbne	r0, r0, #0
   2e69c:	tst	r1, #-2147483648	; 0x80000000
   2e6a0:	orr	r1, r1, #8388608	; 0x800000
   2e6a4:	bic	r1, r1, #-16777216	; 0xff000000
   2e6a8:	rsbne	r1, r1, #0
   2e6ac:	teq	r2, r3
   2e6b0:	beq	2e744 <flatcc_json_parser_struct_as_root@@Base+0x58c>
   2e6b4:	sub	r2, r2, #1
   2e6b8:	adds	r0, r0, r1, asr r3
   2e6bc:	rsb	r3, r3, #32
   2e6c0:	lsl	r1, r1, r3
   2e6c4:	and	r3, r0, #-2147483648	; 0x80000000
   2e6c8:	bpl	2e6d4 <flatcc_json_parser_struct_as_root@@Base+0x51c>
   2e6cc:	rsbs	r1, r1, #0
   2e6d0:	rsc	r0, r0, #0
   2e6d4:	cmp	r0, #8388608	; 0x800000
   2e6d8:	bcc	2e70c <flatcc_json_parser_struct_as_root@@Base+0x554>
   2e6dc:	cmp	r0, #16777216	; 0x1000000
   2e6e0:	bcc	2e6f8 <flatcc_json_parser_struct_as_root@@Base+0x540>
   2e6e4:	lsrs	r0, r0, #1
   2e6e8:	rrx	r1, r1
   2e6ec:	add	r2, r2, #1
   2e6f0:	cmp	r2, #254	; 0xfe
   2e6f4:	bcs	2e7b0 <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   2e6f8:	cmp	r1, #-2147483648	; 0x80000000
   2e6fc:	adc	r0, r0, r2, lsl #23
   2e700:	biceq	r0, r0, #1
   2e704:	orr	r0, r0, r3
   2e708:	bx	lr
   2e70c:	lsls	r1, r1, #1
   2e710:	adc	r0, r0, r0
   2e714:	tst	r0, #8388608	; 0x800000
   2e718:	sub	r2, r2, #1
   2e71c:	bne	2e6f8 <flatcc_json_parser_struct_as_root@@Base+0x540>
   2e720:	clz	ip, r0
   2e724:	sub	ip, ip, #8
   2e728:	subs	r2, r2, ip
   2e72c:	lsl	r0, r0, ip
   2e730:	addge	r0, r0, r2, lsl #23
   2e734:	rsblt	r2, r2, #0
   2e738:	orrge	r0, r0, r3
   2e73c:	orrlt	r0, r3, r0, lsr r2
   2e740:	bx	lr
   2e744:	teq	r2, #0
   2e748:	eor	r1, r1, #8388608	; 0x800000
   2e74c:	eoreq	r0, r0, #8388608	; 0x800000
   2e750:	addeq	r2, r2, #1
   2e754:	subne	r3, r3, #1
   2e758:	b	2e6b4 <flatcc_json_parser_struct_as_root@@Base+0x4fc>
   2e75c:	lsl	r3, r1, #1
   2e760:	mvns	ip, r2, asr #24
   2e764:	mvnsne	ip, r3, asr #24
   2e768:	beq	2e7bc <flatcc_json_parser_struct_as_root@@Base+0x604>
   2e76c:	teq	r2, r3
   2e770:	beq	2e780 <flatcc_json_parser_struct_as_root@@Base+0x5c8>
   2e774:	teq	r2, #0
   2e778:	moveq	r0, r1
   2e77c:	bx	lr
   2e780:	teq	r0, r1
   2e784:	movne	r0, #0
   2e788:	bxne	lr
   2e78c:	tst	r2, #-16777216	; 0xff000000
   2e790:	bne	2e7a0 <flatcc_json_parser_struct_as_root@@Base+0x5e8>
   2e794:	lsls	r0, r0, #1
   2e798:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2e79c:	bx	lr
   2e7a0:	adds	r2, r2, #33554432	; 0x2000000
   2e7a4:	addcc	r0, r0, #8388608	; 0x800000
   2e7a8:	bxcc	lr
   2e7ac:	and	r3, r0, #-2147483648	; 0x80000000
   2e7b0:	orr	r0, r3, #2130706432	; 0x7f000000
   2e7b4:	orr	r0, r0, #8388608	; 0x800000
   2e7b8:	bx	lr
   2e7bc:	mvns	r2, r2, asr #24
   2e7c0:	movne	r0, r1
   2e7c4:	mvnseq	r3, r3, asr #24
   2e7c8:	movne	r1, r0
   2e7cc:	lsls	r2, r0, #9
   2e7d0:	lslseq	r3, r1, #9
   2e7d4:	teqeq	r0, r1
   2e7d8:	orrne	r0, r0, #4194304	; 0x400000
   2e7dc:	bx	lr
   2e7e0:	mov	r3, #0
   2e7e4:	b	2e7f0 <flatcc_json_parser_struct_as_root@@Base+0x638>
   2e7e8:	ands	r3, r0, #-2147483648	; 0x80000000
   2e7ec:	rsbmi	r0, r0, #0
   2e7f0:	movs	ip, r0
   2e7f4:	bxeq	lr
   2e7f8:	orr	r3, r3, #1258291200	; 0x4b000000
   2e7fc:	mov	r1, r0
   2e800:	mov	r0, #0
   2e804:	b	2e848 <flatcc_json_parser_struct_as_root@@Base+0x690>
   2e808:	orrs	r2, r0, r1
   2e80c:	bxeq	lr
   2e810:	mov	r3, #0
   2e814:	b	2e830 <flatcc_json_parser_struct_as_root@@Base+0x678>
   2e818:	orrs	r2, r0, r1
   2e81c:	bxeq	lr
   2e820:	ands	r3, r1, #-2147483648	; 0x80000000
   2e824:	bpl	2e830 <flatcc_json_parser_struct_as_root@@Base+0x678>
   2e828:	rsbs	r0, r0, #0
   2e82c:	rsc	r1, r1, #0
   2e830:	movs	ip, r1
   2e834:	moveq	ip, r0
   2e838:	moveq	r1, r0
   2e83c:	moveq	r0, #0
   2e840:	orr	r3, r3, #1526726656	; 0x5b000000
   2e844:	subeq	r3, r3, #268435456	; 0x10000000
   2e848:	sub	r3, r3, #8388608	; 0x800000
   2e84c:	clz	r2, ip
   2e850:	subs	r2, r2, #8
   2e854:	sub	r3, r3, r2, lsl #23
   2e858:	blt	2e878 <flatcc_json_parser_struct_as_root@@Base+0x6c0>
   2e85c:	add	r3, r3, r1, lsl r2
   2e860:	lsl	ip, r0, r2
   2e864:	rsb	r2, r2, #32
   2e868:	cmp	ip, #-2147483648	; 0x80000000
   2e86c:	adc	r0, r3, r0, lsr r2
   2e870:	biceq	r0, r0, #1
   2e874:	bx	lr
   2e878:	add	r2, r2, #32
   2e87c:	lsl	ip, r1, r2
   2e880:	rsb	r2, r2, #32
   2e884:	orrs	r0, r0, ip, lsl #1
   2e888:	adc	r0, r3, r1, lsr r2
   2e88c:	biceq	r0, r0, ip, lsr #31
   2e890:	bx	lr

0002e894 <__libc_csu_init@@Base>:
   2e894:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e898:	mov	r7, r0
   2e89c:	ldr	r6, [pc, #72]	; 2e8ec <__libc_csu_init@@Base+0x58>
   2e8a0:	ldr	r5, [pc, #72]	; 2e8f0 <__libc_csu_init@@Base+0x5c>
   2e8a4:	add	r6, pc, r6
   2e8a8:	add	r5, pc, r5
   2e8ac:	sub	r6, r6, r5
   2e8b0:	mov	r8, r1
   2e8b4:	mov	r9, r2
   2e8b8:	bl	12574 <fopen@plt-0x20>
   2e8bc:	asrs	r6, r6, #2
   2e8c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e8c4:	mov	r4, #0
   2e8c8:	add	r4, r4, #1
   2e8cc:	ldr	r3, [r5], #4
   2e8d0:	mov	r2, r9
   2e8d4:	mov	r1, r8
   2e8d8:	mov	r0, r7
   2e8dc:	blx	r3
   2e8e0:	cmp	r6, r4
   2e8e4:	bne	2e8c8 <__libc_csu_init@@Base+0x34>
   2e8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e8ec:	andeq	r2, r1, r4, ror #12
   2e8f0:	andeq	r2, r1, ip, asr r6

0002e8f4 <__libc_csu_fini@@Base>:
   2e8f4:	bx	lr

Disassembly of section .fini:

0002e8f8 <.fini>:
   2e8f8:	push	{r3, lr}
   2e8fc:	pop	{r3, pc}
