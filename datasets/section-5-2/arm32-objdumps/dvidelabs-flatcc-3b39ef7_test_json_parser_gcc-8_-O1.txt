
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

00012550 <.init>:
   12550:	push	{r3, lr}
   12554:	bl	126cc <_start@@Base+0x3c>
   12558:	pop	{r3, pc}

Disassembly of section .plt:

0001255c <fopen@plt-0x14>:
   1255c:	push	{lr}		; (str lr, [sp, #-4]!)
   12560:	ldr	lr, [pc, #4]	; 1256c <fopen@plt-0x4>
   12564:	add	lr, pc, lr
   12568:	ldr	pc, [lr, #8]!
   1256c:	muleq	r2, r4, sl

00012570 <fopen@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #176128	; 0x2b000
   12578:	ldr	pc, [ip, #2708]!	; 0xa94

0001257c <free@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #176128	; 0x2b000
   12584:	ldr	pc, [ip, #2700]!	; 0xa8c

00012588 <memcpy@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #176128	; 0x2b000
   12590:	ldr	pc, [ip, #2692]!	; 0xa84

00012594 <ftell@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #176128	; 0x2b000
   1259c:	ldr	pc, [ip, #2684]!	; 0xa7c

000125a0 <memcmp@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #176128	; 0x2b000
   125a8:	ldr	pc, [ip, #2676]!	; 0xa74

000125ac <rewind@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #176128	; 0x2b000
   125b4:	ldr	pc, [ip, #2668]!	; 0xa6c

000125b8 <realloc@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #176128	; 0x2b000
   125c0:	ldr	pc, [ip, #2660]!	; 0xa64

000125c4 <fwrite@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #176128	; 0x2b000
   125cc:	ldr	pc, [ip, #2652]!	; 0xa5c

000125d0 <fread@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #176128	; 0x2b000
   125d8:	ldr	pc, [ip, #2644]!	; 0xa54

000125dc <malloc@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #176128	; 0x2b000
   125e4:	ldr	pc, [ip, #2636]!	; 0xa4c

000125e8 <__libc_start_main@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #176128	; 0x2b000
   125f0:	ldr	pc, [ip, #2628]!	; 0xa44

000125f4 <__gmon_start__@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #176128	; 0x2b000
   125fc:	ldr	pc, [ip, #2620]!	; 0xa3c

00012600 <exit@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #176128	; 0x2b000
   12608:	ldr	pc, [ip, #2612]!	; 0xa34

0001260c <strlen@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #176128	; 0x2b000
   12614:	ldr	pc, [ip, #2604]!	; 0xa2c

00012618 <fprintf@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #176128	; 0x2b000
   12620:	ldr	pc, [ip, #2596]!	; 0xa24

00012624 <posix_memalign@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #176128	; 0x2b000
   1262c:	ldr	pc, [ip, #2588]!	; 0xa1c

00012630 <memset@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #176128	; 0x2b000
   12638:	ldr	pc, [ip, #2580]!	; 0xa14

0001263c <strtod@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #176128	; 0x2b000
   12644:	ldr	pc, [ip, #2572]!	; 0xa0c

00012648 <memchr@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #176128	; 0x2b000
   12650:	ldr	pc, [ip, #2564]!	; 0xa04

00012654 <fclose@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #176128	; 0x2b000
   1265c:	ldr	pc, [ip, #2556]!	; 0x9fc

00012660 <fputc@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #176128	; 0x2b000
   12668:	ldr	pc, [ip, #2548]!	; 0x9f4

0001266c <fseek@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #176128	; 0x2b000
   12674:	ldr	pc, [ip, #2540]!	; 0x9ec

00012678 <abort@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #176128	; 0x2b000
   12680:	ldr	pc, [ip, #2532]!	; 0x9e4

00012684 <__assert_fail@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #176128	; 0x2b000
   1268c:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00012690 <_start@@Base>:
   12690:	mov	fp, #0
   12694:	mov	lr, #0
   12698:	pop	{r1}		; (ldr r1, [sp], #4)
   1269c:	mov	r2, sp
   126a0:	push	{r2}		; (str r2, [sp, #-4]!)
   126a4:	push	{r0}		; (str r0, [sp, #-4]!)
   126a8:	ldr	ip, [pc, #16]	; 126c0 <_start@@Base+0x30>
   126ac:	push	{ip}		; (str ip, [sp, #-4]!)
   126b0:	ldr	r0, [pc, #12]	; 126c4 <_start@@Base+0x34>
   126b4:	ldr	r3, [pc, #12]	; 126c8 <_start@@Base+0x38>
   126b8:	bl	125e8 <__libc_start_main@plt>
   126bc:	bl	12678 <abort@plt>
   126c0:	andeq	fp, r2, ip, lsr #8
   126c4:	andeq	r1, r2, r8, lsr r9
   126c8:	andeq	fp, r2, ip, asr #7
   126cc:	ldr	r3, [pc, #20]	; 126e8 <_start@@Base+0x58>
   126d0:	ldr	r2, [pc, #20]	; 126ec <_start@@Base+0x5c>
   126d4:	add	r3, pc, r3
   126d8:	ldr	r2, [r3, r2]
   126dc:	cmp	r2, #0
   126e0:	bxeq	lr
   126e4:	b	125f4 <__gmon_start__@plt>
   126e8:	andeq	fp, r2, r4, lsr #18
   126ec:	andeq	r0, r0, ip, rrx
   126f0:	ldr	r0, [pc, #24]	; 12710 <_start@@Base+0x80>
   126f4:	ldr	r3, [pc, #24]	; 12714 <_start@@Base+0x84>
   126f8:	cmp	r3, r0
   126fc:	bxeq	lr
   12700:	ldr	r3, [pc, #16]	; 12718 <_start@@Base+0x88>
   12704:	cmp	r3, #0
   12708:	bxeq	lr
   1270c:	bx	r3
   12710:	andeq	lr, r3, r8, asr #6
   12714:	andeq	lr, r3, r8, asr #6
   12718:	andeq	r0, r0, r0
   1271c:	ldr	r0, [pc, #36]	; 12748 <_start@@Base+0xb8>
   12720:	ldr	r1, [pc, #36]	; 1274c <_start@@Base+0xbc>
   12724:	sub	r1, r1, r0
   12728:	asr	r1, r1, #2
   1272c:	add	r1, r1, r1, lsr #31
   12730:	asrs	r1, r1, #1
   12734:	bxeq	lr
   12738:	ldr	r3, [pc, #16]	; 12750 <_start@@Base+0xc0>
   1273c:	cmp	r3, #0
   12740:	bxeq	lr
   12744:	bx	r3
   12748:	andeq	lr, r3, r8, asr #6
   1274c:	andeq	lr, r3, r8, asr #6
   12750:	andeq	r0, r0, r0
   12754:	push	{r4, lr}
   12758:	ldr	r4, [pc, #24]	; 12778 <_start@@Base+0xe8>
   1275c:	ldrb	r3, [r4]
   12760:	cmp	r3, #0
   12764:	popne	{r4, pc}
   12768:	bl	126f0 <_start@@Base+0x60>
   1276c:	mov	r3, #1
   12770:	strb	r3, [r4]
   12774:	pop	{r4, pc}
   12778:	andeq	lr, r3, r0, asr r3
   1277c:	b	1271c <_start@@Base+0x8c>
   12780:	strd	r4, [sp, #-8]!
   12784:	sub	r1, r1, r0
   12788:	cmp	r1, #8
   1278c:	bhi	127c0 <_start@@Base+0x130>
   12790:	sub	r1, r1, #1
   12794:	cmp	r1, #7
   12798:	ldrls	pc, [pc, r1, lsl #2]
   1279c:	b	12868 <_start@@Base+0x1d8>
   127a0:	andeq	r2, r1, ip, asr r8
   127a4:	andeq	r2, r1, r0, asr r8
   127a8:	andeq	r2, r1, r4, asr #16
   127ac:	andeq	r2, r1, r8, lsr r8
   127b0:	andeq	r2, r1, ip, lsr #16
   127b4:	andeq	r2, r1, r0, lsr #16
   127b8:	andeq	r2, r1, r4, lsl r8
   127bc:	andeq	r2, r1, r0, asr #15
   127c0:	ldrb	r4, [r0, #7]
   127c4:	mov	r5, #0
   127c8:	ldrb	r2, [r0, #6]
   127cc:	orr	r2, r4, r2, lsl #8
   127d0:	mov	r1, r5
   127d4:	ldrb	r4, [r0, #5]
   127d8:	orr	r2, r2, r4, lsl #16
   127dc:	ldrb	r4, [r0, #4]
   127e0:	orr	r2, r2, r4, lsl #24
   127e4:	ldrb	r4, [r0, #3]
   127e8:	orr	r1, r1, r4
   127ec:	ldrb	r4, [r0, #2]
   127f0:	orr	r1, r1, r4, lsl #8
   127f4:	ldrb	r4, [r0, #1]
   127f8:	orr	r1, r1, r4, lsl #16
   127fc:	ldrb	r4, [r0]
   12800:	mov	r0, r2
   12804:	orr	r1, r1, r4, lsl #24
   12808:	ldrd	r4, [sp]
   1280c:	add	sp, sp, #8
   12810:	bx	lr
   12814:	mov	r4, #0
   12818:	mov	r5, #0
   1281c:	b	127c8 <_start@@Base+0x138>
   12820:	mov	r2, #0
   12824:	mov	r1, r2
   12828:	b	127d4 <_start@@Base+0x144>
   1282c:	mov	r2, #0
   12830:	mov	r1, r2
   12834:	b	127dc <_start@@Base+0x14c>
   12838:	mov	r2, #0
   1283c:	mov	r1, r2
   12840:	b	127e4 <_start@@Base+0x154>
   12844:	mov	r2, #0
   12848:	mov	r1, r2
   1284c:	b	127ec <_start@@Base+0x15c>
   12850:	mov	r2, #0
   12854:	mov	r1, r2
   12858:	b	127f4 <_start@@Base+0x164>
   1285c:	mov	r2, #0
   12860:	mov	r1, r2
   12864:	b	127fc <_start@@Base+0x16c>
   12868:	mov	r0, #0
   1286c:	mov	r1, r0
   12870:	b	12808 <_start@@Base+0x178>
   12874:	cmp	r0, #4
   12878:	movhi	r0, #0
   1287c:	movls	r0, #1
   12880:	bx	lr
   12884:	cmp	r0, #11
   12888:	bhi	128ac <_start@@Base+0x21c>
   1288c:	cmp	r0, #8
   12890:	bcs	128bc <_start@@Base+0x22c>
   12894:	cmp	r0, #0
   12898:	beq	128c4 <_start@@Base+0x234>
   1289c:	cmp	r0, #2
   128a0:	movne	r0, #0
   128a4:	moveq	r0, #1
   128a8:	bx	lr
   128ac:	cmp	r0, #255	; 0xff
   128b0:	movne	r0, #0
   128b4:	moveq	r0, #1
   128b8:	bx	lr
   128bc:	mov	r0, #1
   128c0:	bx	lr
   128c4:	mov	r0, #1
   128c8:	bx	lr
   128cc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   128d0:	strd	r6, [sp, #8]
   128d4:	strd	r8, [sp, #16]
   128d8:	str	lr, [sp, #24]
   128dc:	sub	sp, sp, #12
   128e0:	mov	r8, r0
   128e4:	mov	r4, r1
   128e8:	mov	r9, r2
   128ec:	mov	r5, r3
   128f0:	mov	r1, r2
   128f4:	mov	r0, r4
   128f8:	bl	12780 <_start@@Base+0xf0>
   128fc:	add	r3, pc, #788	; 0x314
   12900:	ldrd	r2, [r3]
   12904:	cmp	r1, r3
   12908:	cmpeq	r0, r2
   1290c:	bhi	12a68 <_start@@Base+0x3d8>
   12910:	add	r3, pc, #776	; 0x308
   12914:	ldrd	r2, [r3]
   12918:	cmp	r1, r3
   1291c:	cmpeq	r0, r2
   12920:	bhi	129a4 <_start@@Base+0x314>
   12924:	and	r2, r0, #-16777216	; 0xff000000
   12928:	mov	r3, r1
   1292c:	add	r1, pc, #756	; 0x2f4
   12930:	ldrd	r0, [r1]
   12934:	cmp	r3, r1
   12938:	cmpeq	r2, r0
   1293c:	beq	1295c <_start@@Base+0x2cc>
   12940:	mov	r0, r4
   12944:	add	sp, sp, #12
   12948:	ldrd	r4, [sp]
   1294c:	ldrd	r6, [sp, #8]
   12950:	ldrd	r8, [sp, #16]
   12954:	add	sp, sp, #24
   12958:	pop	{pc}		; (ldr pc, [sp], #4)
   1295c:	ldr	r3, [sp, #44]	; 0x2c
   12960:	str	r3, [sp]
   12964:	mov	r3, #5
   12968:	mov	r2, r9
   1296c:	mov	r1, r4
   12970:	mov	r0, r8
   12974:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12978:	cmp	r4, r0
   1297c:	moveq	r4, r0
   12980:	beq	12940 <_start@@Base+0x2b0>
   12984:	mov	r2, #9
   12988:	mov	r3, #0
   1298c:	ldr	r1, [sp, #40]	; 0x28
   12990:	strd	r2, [r1]
   12994:	mov	r3, #0
   12998:	str	r3, [r5]
   1299c:	mov	r4, r0
   129a0:	b	12940 <_start@@Base+0x2b0>
   129a4:	and	r2, r0, #-16777216	; 0xff000000
   129a8:	add	r7, pc, #640	; 0x280
   129ac:	ldrd	r6, [r7]
   129b0:	cmp	r1, r7
   129b4:	cmpeq	r2, r6
   129b8:	beq	12a20 <_start@@Base+0x390>
   129bc:	bic	r2, r0, #255	; 0xff
   129c0:	mov	r3, r1
   129c4:	add	r1, pc, #620	; 0x26c
   129c8:	ldrd	r0, [r1]
   129cc:	cmp	r3, r1
   129d0:	cmpeq	r2, r0
   129d4:	bne	12940 <_start@@Base+0x2b0>
   129d8:	ldr	r3, [sp, #44]	; 0x2c
   129dc:	str	r3, [sp]
   129e0:	mov	r3, #7
   129e4:	mov	r2, r9
   129e8:	mov	r1, r4
   129ec:	mov	r0, r8
   129f0:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   129f4:	cmp	r4, r0
   129f8:	moveq	r4, r0
   129fc:	beq	12940 <_start@@Base+0x2b0>
   12a00:	mov	r2, #10
   12a04:	mov	r3, #0
   12a08:	ldr	r1, [sp, #40]	; 0x28
   12a0c:	strd	r2, [r1]
   12a10:	mov	r3, #0
   12a14:	str	r3, [r5]
   12a18:	mov	r4, r0
   12a1c:	b	12940 <_start@@Base+0x2b0>
   12a20:	ldr	r3, [sp, #44]	; 0x2c
   12a24:	str	r3, [sp]
   12a28:	mov	r3, #5
   12a2c:	mov	r2, r9
   12a30:	mov	r1, r4
   12a34:	mov	r0, r8
   12a38:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12a3c:	cmp	r4, r0
   12a40:	moveq	r4, r0
   12a44:	beq	12940 <_start@@Base+0x2b0>
   12a48:	mov	r2, #2
   12a4c:	mov	r3, #0
   12a50:	ldr	r1, [sp, #40]	; 0x28
   12a54:	strd	r2, [r1]
   12a58:	mov	r3, #0
   12a5c:	str	r3, [r5]
   12a60:	mov	r4, r0
   12a64:	b	12940 <_start@@Base+0x2b0>
   12a68:	add	r3, pc, #464	; 0x1d0
   12a6c:	ldrd	r2, [r3]
   12a70:	cmp	r1, r3
   12a74:	cmpeq	r0, r2
   12a78:	bhi	12ae0 <_start@@Base+0x450>
   12a7c:	mov	r2, #0
   12a80:	mov	r3, r1
   12a84:	add	r1, pc, #444	; 0x1bc
   12a88:	ldrd	r0, [r1]
   12a8c:	cmp	r3, r1
   12a90:	cmpeq	r2, r0
   12a94:	bne	12940 <_start@@Base+0x2b0>
   12a98:	ldr	r3, [sp, #44]	; 0x2c
   12a9c:	str	r3, [sp]
   12aa0:	mov	r3, #4
   12aa4:	mov	r2, r9
   12aa8:	mov	r1, r4
   12aac:	mov	r0, r8
   12ab0:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12ab4:	cmp	r4, r0
   12ab8:	moveq	r4, r0
   12abc:	beq	12940 <_start@@Base+0x2b0>
   12ac0:	mov	r2, #0
   12ac4:	mov	r3, #0
   12ac8:	ldr	r1, [sp, #40]	; 0x28
   12acc:	strd	r2, [r1]
   12ad0:	mov	r3, #0
   12ad4:	str	r3, [r5]
   12ad8:	mov	r4, r0
   12adc:	b	12940 <_start@@Base+0x2b0>
   12ae0:	add	r3, pc, #360	; 0x168
   12ae4:	ldrd	r2, [r3]
   12ae8:	cmp	r1, r3
   12aec:	cmpeq	r0, r2
   12af0:	bhi	12b58 <_start@@Base+0x4c8>
   12af4:	and	r2, r0, #-16777216	; 0xff000000
   12af8:	mov	r3, r1
   12afc:	add	r1, pc, #340	; 0x154
   12b00:	ldrd	r0, [r1]
   12b04:	cmp	r3, r1
   12b08:	cmpeq	r2, r0
   12b0c:	bne	12940 <_start@@Base+0x2b0>
   12b10:	ldr	r3, [sp, #44]	; 0x2c
   12b14:	str	r3, [sp]
   12b18:	mov	r3, #5
   12b1c:	mov	r2, r9
   12b20:	mov	r1, r4
   12b24:	mov	r0, r8
   12b28:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12b2c:	cmp	r4, r0
   12b30:	moveq	r4, r0
   12b34:	beq	12940 <_start@@Base+0x2b0>
   12b38:	mov	r2, #11
   12b3c:	mov	r3, #0
   12b40:	ldr	r1, [sp, #40]	; 0x28
   12b44:	strd	r2, [r1]
   12b48:	mov	r3, #0
   12b4c:	str	r3, [r5]
   12b50:	mov	r4, r0
   12b54:	b	12940 <_start@@Base+0x2b0>
   12b58:	lsr	r2, r0, #16
   12b5c:	lsl	r2, r2, #16
   12b60:	add	r7, pc, #248	; 0xf8
   12b64:	ldrd	r6, [r7]
   12b68:	cmp	r1, r7
   12b6c:	cmpeq	r2, r6
   12b70:	beq	12bd0 <_start@@Base+0x540>
   12b74:	add	r3, pc, #236	; 0xec
   12b78:	ldrd	r2, [r3]
   12b7c:	cmp	r1, r3
   12b80:	cmpeq	r0, r2
   12b84:	bne	12940 <_start@@Base+0x2b0>
   12b88:	ldr	r3, [sp, #44]	; 0x2c
   12b8c:	str	r3, [sp]
   12b90:	mov	r3, #8
   12b94:	mov	r2, r9
   12b98:	mov	r1, r4
   12b9c:	mov	r0, r8
   12ba0:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12ba4:	cmp	r4, r0
   12ba8:	moveq	r4, r0
   12bac:	beq	12940 <_start@@Base+0x2b0>
   12bb0:	mov	r2, #8
   12bb4:	mov	r3, #0
   12bb8:	ldr	r1, [sp, #40]	; 0x28
   12bbc:	strd	r2, [r1]
   12bc0:	mov	r3, #0
   12bc4:	str	r3, [r5]
   12bc8:	mov	r4, r0
   12bcc:	b	12940 <_start@@Base+0x2b0>
   12bd0:	ldr	r3, [sp, #44]	; 0x2c
   12bd4:	str	r3, [sp]
   12bd8:	mov	r3, #6
   12bdc:	mov	r2, r9
   12be0:	mov	r1, r4
   12be4:	mov	r0, r8
   12be8:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12bec:	cmp	r4, r0
   12bf0:	moveq	r4, r0
   12bf4:	beq	12940 <_start@@Base+0x2b0>
   12bf8:	mov	r2, #255	; 0xff
   12bfc:	mov	r3, #0
   12c00:	ldr	r1, [sp, #40]	; 0x28
   12c04:	strd	r2, [r1]
   12c08:	mov	r3, #0
   12c0c:	str	r3, [r5]
   12c10:	mov	r4, r0
   12c14:	b	12940 <_start@@Base+0x2b0>
   12c18:			; <UNDEFINED> instruction: 0xffffffff
   12c1c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12c20:			; <UNDEFINED> instruction: 0x46616dff
   12c24:	rsbmi	r6, pc, #428	; 0x1ac
   12c28:	strvs	r0, [r0, #-0]
   12c2c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12c30:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12c34:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12c38:	strbtmi	r6, [r1], -r0, lsl #28
   12c3c:	rsbmi	r6, pc, #428	; 0x1ac
   12c40:	ldrshvc	pc, [pc, #255]	; 12d47 <_start@@Base+0x6b7>	; <UNPREDICTABLE>
   12c44:	svcmi	0x00746865
   12c48:	andeq	r0, r0, r0
   12c4c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12c50:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12c54:	rsbpl	r7, r1, #117	; 0x75
   12c58:	andvc	r0, r0, #0
   12c5c:	svcmi	0x00746865
   12c60:	strbvs	r0, [r4, #-0]!
   12c64:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12c68:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12c6c:	rsbpl	r7, r1, #117	; 0x75
   12c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12c74:	strd	r6, [sp, #8]
   12c78:	str	r8, [sp, #16]
   12c7c:	str	lr, [sp, #20]
   12c80:	sub	sp, sp, #8
   12c84:	mov	r6, r0
   12c88:	mov	r4, r1
   12c8c:	mov	r5, r2
   12c90:	mov	r7, r3
   12c94:	mov	r1, r2
   12c98:	mov	r0, r4
   12c9c:	bl	12780 <_start@@Base+0xf0>
   12ca0:	add	r3, pc, #152	; 0x98
   12ca4:	ldrd	r2, [r3]
   12ca8:	cmp	r1, r3
   12cac:	cmpeq	r0, r2
   12cb0:	bne	12d20 <_start@@Base+0x690>
   12cb4:	add	r8, r4, #8
   12cb8:	mov	r1, r5
   12cbc:	mov	r0, r8
   12cc0:	bl	12780 <_start@@Base+0xf0>
   12cc4:	mov	r2, #0
   12cc8:	and	r3, r1, #-16777216	; 0xff000000
   12ccc:	cmp	r3, #1912602624	; 0x72000000
   12cd0:	cmpeq	r2, #0
   12cd4:	bne	12d20 <_start@@Base+0x690>
   12cd8:	sub	r3, r5, r8
   12cdc:	cmp	r3, #1
   12ce0:	ble	12d20 <_start@@Base+0x690>
   12ce4:	ldrb	r3, [r4, #9]
   12ce8:	cmp	r3, #46	; 0x2e
   12cec:	bne	12d20 <_start@@Base+0x690>
   12cf0:	add	r1, r4, #10
   12cf4:	cmp	r8, r1
   12cf8:	beq	12d20 <_start@@Base+0x690>
   12cfc:	ldr	r3, [sp, #36]	; 0x24
   12d00:	str	r3, [sp, #4]
   12d04:	ldr	r3, [sp, #32]
   12d08:	str	r3, [sp]
   12d0c:	mov	r3, r7
   12d10:	mov	r2, r5
   12d14:	mov	r0, r6
   12d18:	bl	128cc <_start@@Base+0x23c>
   12d1c:	mov	r4, r0
   12d20:	mov	r0, r4
   12d24:	add	sp, sp, #8
   12d28:	ldrd	r4, [sp]
   12d2c:	ldrd	r6, [sp, #8]
   12d30:	ldr	r8, [sp, #16]
   12d34:	add	sp, sp, #20
   12d38:	pop	{pc}		; (ldr pc, [sp], #4)
   12d3c:	nop	{0}
   12d40:	cmnvs	r3, r5, ror #8
   12d44:	cmnmi	r8, #-2147483620	; 0x8000001c
   12d48:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12d4c:	strd	r6, [sp, #8]
   12d50:	strd	r8, [sp, #16]
   12d54:	str	lr, [sp, #24]
   12d58:	sub	sp, sp, #12
   12d5c:	mov	r8, r0
   12d60:	mov	r4, r1
   12d64:	mov	r9, r2
   12d68:	mov	r5, r3
   12d6c:	mov	r1, r2
   12d70:	mov	r0, r4
   12d74:	bl	12780 <_start@@Base+0xf0>
   12d78:	add	r3, pc, #584	; 0x248
   12d7c:	ldrd	r2, [r3]
   12d80:	cmp	r1, r3
   12d84:	cmpeq	r0, r2
   12d88:	bhi	12e0c <_start@@Base+0x77c>
   12d8c:	mov	r2, #0
   12d90:	bic	r3, r1, #255	; 0xff
   12d94:	add	r1, pc, #564	; 0x234
   12d98:	ldrd	r0, [r1]
   12d9c:	cmp	r3, r1
   12da0:	cmpeq	r2, r0
   12da4:	beq	12dc4 <_start@@Base+0x734>
   12da8:	mov	r0, r4
   12dac:	add	sp, sp, #12
   12db0:	ldrd	r4, [sp]
   12db4:	ldrd	r6, [sp, #8]
   12db8:	ldrd	r8, [sp, #16]
   12dbc:	add	sp, sp, #24
   12dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12dc4:	ldr	r3, [sp, #44]	; 0x2c
   12dc8:	str	r3, [sp]
   12dcc:	mov	r3, #3
   12dd0:	mov	r2, r9
   12dd4:	mov	r1, r4
   12dd8:	mov	r0, r8
   12ddc:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12de0:	cmp	r4, r0
   12de4:	moveq	r4, r0
   12de8:	beq	12da8 <_start@@Base+0x718>
   12dec:	mov	r2, #4
   12df0:	mov	r3, #0
   12df4:	ldr	r1, [sp, #40]	; 0x28
   12df8:	strd	r2, [r1]
   12dfc:	mov	r3, #0
   12e00:	str	r3, [r5]
   12e04:	mov	r4, r0
   12e08:	b	12da8 <_start@@Base+0x718>
   12e0c:	add	r3, pc, #452	; 0x1c4
   12e10:	ldrd	r2, [r3]
   12e14:	cmp	r1, r3
   12e18:	cmpeq	r0, r2
   12e1c:	beq	12ef4 <_start@@Base+0x864>
   12e20:	bic	r2, r0, #255	; 0xff
   12e24:	add	r7, pc, #436	; 0x1b4
   12e28:	ldrd	r6, [r7]
   12e2c:	cmp	r1, r7
   12e30:	cmpeq	r2, r6
   12e34:	beq	12f38 <_start@@Base+0x8a8>
   12e38:	mov	r2, #0
   12e3c:	add	r7, pc, #420	; 0x1a4
   12e40:	ldrd	r6, [r7]
   12e44:	cmp	r1, r7
   12e48:	cmpeq	r2, r6
   12e4c:	beq	12f7c <_start@@Base+0x8ec>
   12e50:	add	r3, pc, #408	; 0x198
   12e54:	ldrd	r2, [r3]
   12e58:	cmp	r1, r3
   12e5c:	cmpeq	r0, r2
   12e60:	bne	12da8 <_start@@Base+0x718>
   12e64:	mov	r1, r9
   12e68:	add	r0, r4, #8
   12e6c:	bl	12780 <_start@@Base+0xf0>
   12e70:	add	r3, pc, #384	; 0x180
   12e74:	ldrd	r2, [r3]
   12e78:	cmp	r1, r3
   12e7c:	cmpeq	r0, r2
   12e80:	bne	12da8 <_start@@Base+0x718>
   12e84:	add	r6, r4, #16
   12e88:	mov	r1, r9
   12e8c:	mov	r0, r6
   12e90:	bl	12780 <_start@@Base+0xf0>
   12e94:	bic	r2, r0, #255	; 0xff
   12e98:	mov	r3, r1
   12e9c:	add	r1, pc, #348	; 0x15c
   12ea0:	ldrd	r0, [r1]
   12ea4:	cmp	r3, r1
   12ea8:	cmpeq	r2, r0
   12eac:	bne	12da8 <_start@@Base+0x718>
   12eb0:	ldr	r3, [sp, #44]	; 0x2c
   12eb4:	str	r3, [sp]
   12eb8:	mov	r3, #7
   12ebc:	mov	r2, r9
   12ec0:	mov	r1, r6
   12ec4:	mov	r0, r8
   12ec8:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12ecc:	cmp	r6, r0
   12ed0:	beq	12da8 <_start@@Base+0x718>
   12ed4:	mov	r2, #2
   12ed8:	mov	r3, #0
   12edc:	ldr	r1, [sp, #40]	; 0x28
   12ee0:	strd	r2, [r1]
   12ee4:	mov	r3, #0
   12ee8:	str	r3, [r5]
   12eec:	mov	r4, r0
   12ef0:	b	12da8 <_start@@Base+0x718>
   12ef4:	ldr	r3, [sp, #44]	; 0x2c
   12ef8:	str	r3, [sp]
   12efc:	mov	r3, #8
   12f00:	mov	r2, r9
   12f04:	mov	r1, r4
   12f08:	mov	r0, r8
   12f0c:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12f10:	cmp	r4, r0
   12f14:	beq	12da8 <_start@@Base+0x718>
   12f18:	mov	r2, #3
   12f1c:	mov	r3, #0
   12f20:	ldr	r1, [sp, #40]	; 0x28
   12f24:	strd	r2, [r1]
   12f28:	mov	r3, #0
   12f2c:	str	r3, [r5]
   12f30:	mov	r4, r0
   12f34:	b	12da8 <_start@@Base+0x718>
   12f38:	ldr	r3, [sp, #44]	; 0x2c
   12f3c:	str	r3, [sp]
   12f40:	mov	r3, #7
   12f44:	mov	r2, r9
   12f48:	mov	r1, r4
   12f4c:	mov	r0, r8
   12f50:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12f54:	cmp	r4, r0
   12f58:	beq	12da8 <_start@@Base+0x718>
   12f5c:	mov	r2, #1
   12f60:	mov	r3, #0
   12f64:	ldr	r1, [sp, #40]	; 0x28
   12f68:	strd	r2, [r1]
   12f6c:	mov	r3, #0
   12f70:	str	r3, [r5]
   12f74:	mov	r4, r0
   12f78:	b	12da8 <_start@@Base+0x718>
   12f7c:	ldr	r3, [sp, #44]	; 0x2c
   12f80:	str	r3, [sp]
   12f84:	mov	r3, #4
   12f88:	mov	r2, r9
   12f8c:	mov	r1, r4
   12f90:	mov	r0, r8
   12f94:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   12f98:	cmp	r4, r0
   12f9c:	moveq	r4, r0
   12fa0:	beq	12da8 <_start@@Base+0x718>
   12fa4:	mov	r2, #0
   12fa8:	mov	r3, #0
   12fac:	ldr	r1, [sp, #40]	; 0x28
   12fb0:	strd	r2, [r1]
   12fb4:	mov	r3, #0
   12fb8:	str	r3, [r5]
   12fbc:	mov	r4, r0
   12fc0:	b	12da8 <_start@@Base+0x718>
   12fc4:	nop	{0}
   12fc8:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   12fcc:	stclmi	14, cr6, [pc, #-460]!	; 12e08 <_start@@Base+0x778>
   12fd0:	andeq	r0, r0, r0
   12fd4:	cmnmi	ip, r0, lsl #8
   12fd8:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   12fdc:	stclmi	14, cr6, [pc, #-460]!	; 12e18 <_start@@Base+0x788>
   12fe0:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   12fe4:	stclmi	14, cr6, [pc, #-460]!	; 12e20 <_start@@Base+0x790>
   12fe8:	andeq	r0, r0, r0
   12fec:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12ff0:	cmnpl	r9, #112, 26	; 0x1c00
   12ff4:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   12ff8:	rsbvs	r6, ip, #364904448	; 0x15c00000
   12ffc:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   13000:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   13004:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   13008:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1300c:	strd	r6, [sp, #8]
   13010:	str	r8, [sp, #16]
   13014:	str	lr, [sp, #20]
   13018:	sub	sp, sp, #8
   1301c:	mov	r6, r0
   13020:	mov	r4, r1
   13024:	mov	r5, r2
   13028:	mov	r7, r3
   1302c:	mov	r1, r2
   13030:	mov	r0, r4
   13034:	bl	12780 <_start@@Base+0xf0>
   13038:	add	r3, pc, #280	; 0x118
   1303c:	ldrd	r2, [r3]
   13040:	cmp	r1, r3
   13044:	cmpeq	r0, r2
   13048:	beq	13084 <_start@@Base+0x9f4>
   1304c:	mov	r2, #0
   13050:	mov	r3, r1
   13054:	add	r1, pc, #260	; 0x104
   13058:	ldrd	r0, [r1]
   1305c:	cmp	r3, r1
   13060:	cmpeq	r2, r0
   13064:	beq	1310c <_start@@Base+0xa7c>
   13068:	mov	r0, r4
   1306c:	add	sp, sp, #8
   13070:	ldrd	r4, [sp]
   13074:	ldrd	r6, [sp, #8]
   13078:	ldr	r8, [sp, #16]
   1307c:	add	sp, sp, #20
   13080:	pop	{pc}		; (ldr pc, [sp], #4)
   13084:	mov	r1, r5
   13088:	add	r0, r4, #8
   1308c:	bl	12780 <_start@@Base+0xf0>
   13090:	add	r3, pc, #208	; 0xd0
   13094:	ldrd	r2, [r3]
   13098:	cmp	r1, r3
   1309c:	cmpeq	r0, r2
   130a0:	bne	13068 <_start@@Base+0x9d8>
   130a4:	add	r8, r4, #16
   130a8:	mov	r1, r5
   130ac:	mov	r0, r8
   130b0:	bl	12780 <_start@@Base+0xf0>
   130b4:	mov	r2, #0
   130b8:	and	r3, r1, #-16777216	; 0xff000000
   130bc:	cmp	r3, #1694498816	; 0x65000000
   130c0:	cmpeq	r2, #0
   130c4:	bne	13068 <_start@@Base+0x9d8>
   130c8:	ldr	r3, [sp, #36]	; 0x24
   130cc:	str	r3, [sp]
   130d0:	mov	r3, #1
   130d4:	mov	r2, r5
   130d8:	mov	r1, r8
   130dc:	mov	r0, r6
   130e0:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   130e4:	cmp	r8, r0
   130e8:	beq	13068 <_start@@Base+0x9d8>
   130ec:	mov	r2, #1
   130f0:	mov	r3, #0
   130f4:	ldr	r1, [sp, #32]
   130f8:	strd	r2, [r1]
   130fc:	mov	r3, #0
   13100:	str	r3, [r7]
   13104:	mov	r4, r0
   13108:	b	13068 <_start@@Base+0x9d8>
   1310c:	ldr	r3, [sp, #36]	; 0x24
   13110:	str	r3, [sp]
   13114:	mov	r3, #4
   13118:	mov	r2, r5
   1311c:	mov	r1, r4
   13120:	mov	r0, r6
   13124:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13128:	cmp	r4, r0
   1312c:	moveq	r4, r0
   13130:	beq	13068 <_start@@Base+0x9d8>
   13134:	mov	r2, #0
   13138:	mov	r3, #0
   1313c:	ldr	r1, [sp, #32]
   13140:	strd	r2, [r1]
   13144:	mov	r3, #0
   13148:	str	r3, [r7]
   1314c:	mov	r4, r0
   13150:	b	13068 <_start@@Base+0x9d8>
   13154:	nop	{0}
   13158:	rsbvc	r6, r5, #116, 28	; 0x740
   1315c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   13160:	andeq	r0, r0, r0
   13164:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   13168:	cmnvc	r0, #-1073741800	; 0xc0000018
   1316c:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   13170:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13174:	strd	r6, [sp, #8]
   13178:	strd	r8, [sp, #16]
   1317c:	str	lr, [sp, #24]
   13180:	sub	sp, sp, #12
   13184:	mov	r8, r0
   13188:	mov	r4, r1
   1318c:	mov	r9, r2
   13190:	mov	r5, r3
   13194:	mov	r1, r2
   13198:	mov	r0, r4
   1319c:	bl	12780 <_start@@Base+0xf0>
   131a0:	add	r3, pc, #344	; 0x158
   131a4:	ldrd	r2, [r3]
   131a8:	cmp	r1, r3
   131ac:	cmpeq	r0, r2
   131b0:	bhi	13234 <_start@@Base+0xba4>
   131b4:	mov	r2, #0
   131b8:	mov	r3, r1
   131bc:	add	r1, pc, #324	; 0x144
   131c0:	ldrd	r0, [r1]
   131c4:	cmp	r3, r1
   131c8:	cmpeq	r2, r0
   131cc:	beq	131ec <_start@@Base+0xb5c>
   131d0:	mov	r0, r4
   131d4:	add	sp, sp, #12
   131d8:	ldrd	r4, [sp]
   131dc:	ldrd	r6, [sp, #8]
   131e0:	ldrd	r8, [sp, #16]
   131e4:	add	sp, sp, #24
   131e8:	pop	{pc}		; (ldr pc, [sp], #4)
   131ec:	ldr	r3, [sp, #44]	; 0x2c
   131f0:	str	r3, [sp]
   131f4:	mov	r3, #4
   131f8:	mov	r2, r9
   131fc:	mov	r1, r4
   13200:	mov	r0, r8
   13204:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13208:	cmp	r4, r0
   1320c:	moveq	r4, r0
   13210:	beq	131d0 <_start@@Base+0xb40>
   13214:	mov	r2, #3
   13218:	mov	r3, #0
   1321c:	ldr	r1, [sp, #40]	; 0x28
   13220:	strd	r2, [r1]
   13224:	mov	r3, #0
   13228:	str	r3, [r5]
   1322c:	mov	r4, r0
   13230:	b	131d0 <_start@@Base+0xb40>
   13234:	lsr	r2, r0, #16
   13238:	lsl	r2, r2, #16
   1323c:	add	r7, pc, #204	; 0xcc
   13240:	ldrd	r6, [r7]
   13244:	cmp	r1, r7
   13248:	cmpeq	r2, r6
   1324c:	beq	132b4 <_start@@Base+0xc24>
   13250:	mov	r2, #0
   13254:	mov	r3, r1
   13258:	add	r1, pc, #184	; 0xb8
   1325c:	ldrd	r0, [r1]
   13260:	cmp	r3, r1
   13264:	cmpeq	r2, r0
   13268:	bne	131d0 <_start@@Base+0xb40>
   1326c:	ldr	r3, [sp, #44]	; 0x2c
   13270:	str	r3, [sp]
   13274:	mov	r3, #4
   13278:	mov	r2, r9
   1327c:	mov	r1, r4
   13280:	mov	r0, r8
   13284:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13288:	cmp	r4, r0
   1328c:	moveq	r4, r0
   13290:	beq	131d0 <_start@@Base+0xb40>
   13294:	add	r3, pc, #132	; 0x84
   13298:	ldrd	r2, [r3]
   1329c:	ldr	r1, [sp, #40]	; 0x28
   132a0:	strd	r2, [r1]
   132a4:	mov	r3, #0
   132a8:	str	r3, [r5]
   132ac:	mov	r4, r0
   132b0:	b	131d0 <_start@@Base+0xb40>
   132b4:	ldr	r3, [sp, #44]	; 0x2c
   132b8:	str	r3, [sp]
   132bc:	mov	r3, #6
   132c0:	mov	r2, r9
   132c4:	mov	r1, r4
   132c8:	mov	r0, r8
   132cc:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   132d0:	cmp	r4, r0
   132d4:	moveq	r4, r0
   132d8:	beq	131d0 <_start@@Base+0xb40>
   132dc:	mvn	r2, #1
   132e0:	mvn	r3, #0
   132e4:	ldr	r1, [sp, #40]	; 0x28
   132e8:	strd	r2, [r1]
   132ec:	mov	r3, #1
   132f0:	str	r3, [r5]
   132f4:	mov	r4, r0
   132f8:	b	131d0 <_start@@Base+0xb40>
   132fc:	nop	{0}
   13300:			; <UNDEFINED> instruction: 0xffffffff
   13304:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13308:	andeq	r0, r0, r0
   1330c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13310:	strbvs	r0, [r7, #-0]!
   13314:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   13318:	andeq	r0, r0, r0
   1331c:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   13320:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   13324:	andeq	r0, r0, r0
   13328:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1332c:	strd	r6, [sp, #8]
   13330:	strd	r8, [sp, #16]
   13334:	str	lr, [sp, #24]
   13338:	sub	sp, sp, #12
   1333c:	mov	r8, r0
   13340:	mov	r4, r1
   13344:	mov	r9, r2
   13348:	mov	r5, r3
   1334c:	mov	r1, r2
   13350:	mov	r0, r4
   13354:	bl	12780 <_start@@Base+0xf0>
   13358:	add	r3, pc, #464	; 0x1d0
   1335c:	ldrd	r2, [r3]
   13360:	cmp	r1, r3
   13364:	cmpeq	r0, r2
   13368:	bhi	133ec <_start@@Base+0xd5c>
   1336c:	mov	r2, #0
   13370:	mov	r3, r1
   13374:	add	r1, pc, #444	; 0x1bc
   13378:	ldrd	r0, [r1]
   1337c:	cmp	r3, r1
   13380:	cmpeq	r2, r0
   13384:	beq	133a4 <_start@@Base+0xd14>
   13388:	mov	r0, r4
   1338c:	add	sp, sp, #12
   13390:	ldrd	r4, [sp]
   13394:	ldrd	r6, [sp, #8]
   13398:	ldrd	r8, [sp, #16]
   1339c:	add	sp, sp, #24
   133a0:	pop	{pc}		; (ldr pc, [sp], #4)
   133a4:	ldr	r3, [sp, #44]	; 0x2c
   133a8:	str	r3, [sp]
   133ac:	mov	r3, #4
   133b0:	mov	r2, r9
   133b4:	mov	r1, r4
   133b8:	mov	r0, r8
   133bc:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   133c0:	cmp	r4, r0
   133c4:	moveq	r4, r0
   133c8:	beq	13388 <_start@@Base+0xcf8>
   133cc:	mov	r2, #2
   133d0:	mov	r3, #0
   133d4:	ldr	r1, [sp, #40]	; 0x28
   133d8:	strd	r2, [r1]
   133dc:	mov	r3, #0
   133e0:	str	r3, [r5]
   133e4:	mov	r4, r0
   133e8:	b	13388 <_start@@Base+0xcf8>
   133ec:	add	r3, pc, #332	; 0x14c
   133f0:	ldrd	r2, [r3]
   133f4:	cmp	r1, r3
   133f8:	cmpeq	r0, r2
   133fc:	bhi	13464 <_start@@Base+0xdd4>
   13400:	mov	r2, #0
   13404:	mov	r3, r1
   13408:	add	r1, pc, #312	; 0x138
   1340c:	ldrd	r0, [r1]
   13410:	cmp	r3, r1
   13414:	cmpeq	r2, r0
   13418:	bne	13388 <_start@@Base+0xcf8>
   1341c:	ldr	r3, [sp, #44]	; 0x2c
   13420:	str	r3, [sp]
   13424:	mov	r3, #4
   13428:	mov	r2, r9
   1342c:	mov	r1, r4
   13430:	mov	r0, r8
   13434:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13438:	cmp	r4, r0
   1343c:	moveq	r4, r0
   13440:	beq	13388 <_start@@Base+0xcf8>
   13444:	mov	r2, #42	; 0x2a
   13448:	mov	r3, #0
   1344c:	ldr	r1, [sp, #40]	; 0x28
   13450:	strd	r2, [r1]
   13454:	mov	r3, #0
   13458:	str	r3, [r5]
   1345c:	mov	r4, r0
   13460:	b	13388 <_start@@Base+0xcf8>
   13464:	bic	r2, r0, #255	; 0xff
   13468:	add	r7, pc, #224	; 0xe0
   1346c:	ldrd	r6, [r7]
   13470:	cmp	r1, r7
   13474:	cmpeq	r2, r6
   13478:	beq	134e4 <_start@@Base+0xe54>
   1347c:	lsr	r2, r0, #16
   13480:	lsl	r2, r2, #16
   13484:	mov	r3, r1
   13488:	add	r1, pc, #200	; 0xc8
   1348c:	ldrd	r0, [r1]
   13490:	cmp	r3, r1
   13494:	cmpeq	r2, r0
   13498:	bne	13388 <_start@@Base+0xcf8>
   1349c:	ldr	r3, [sp, #44]	; 0x2c
   134a0:	str	r3, [sp]
   134a4:	mov	r3, #6
   134a8:	mov	r2, r9
   134ac:	mov	r1, r4
   134b0:	mov	r0, r8
   134b4:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   134b8:	cmp	r4, r0
   134bc:	moveq	r4, r0
   134c0:	beq	13388 <_start@@Base+0xcf8>
   134c4:	mvn	r2, #1
   134c8:	mvn	r3, #0
   134cc:	ldr	r1, [sp, #40]	; 0x28
   134d0:	strd	r2, [r1]
   134d4:	mov	r3, #1
   134d8:	str	r3, [r5]
   134dc:	mov	r4, r0
   134e0:	b	13388 <_start@@Base+0xcf8>
   134e4:	ldr	r3, [sp, #44]	; 0x2c
   134e8:	str	r3, [sp]
   134ec:	mov	r3, #7
   134f0:	mov	r2, r9
   134f4:	mov	r1, r4
   134f8:	mov	r0, r8
   134fc:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13500:	cmp	r4, r0
   13504:	moveq	r4, r0
   13508:	beq	13388 <_start@@Base+0xcf8>
   1350c:	mvn	r2, #0
   13510:	mvn	r3, #0
   13514:	ldr	r1, [sp, #40]	; 0x28
   13518:	strd	r2, [r1]
   1351c:	mov	r3, #1
   13520:	str	r3, [r5]
   13524:	mov	r4, r0
   13528:	b	13388 <_start@@Base+0xcf8>
   1352c:	nop	{0}
   13530:			; <UNDEFINED> instruction: 0xffffffff
   13534:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13538:	andeq	r0, r0, r0
   1353c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13540:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   13544:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13548:	andeq	r0, r0, r0
   1354c:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   13550:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   13554:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13558:	strbvs	r0, [r7, #-0]!
   1355c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13560:	strd	r4, [sp, #-20]!	; 0xffffffec
   13564:	strd	r6, [sp, #8]
   13568:	str	lr, [sp, #16]
   1356c:	sub	sp, sp, #12
   13570:	mov	r6, r0
   13574:	mov	r4, r1
   13578:	mov	r5, r2
   1357c:	mov	r7, r3
   13580:	mov	r1, r2
   13584:	mov	r0, r4
   13588:	bl	12780 <_start@@Base+0xf0>
   1358c:	add	r3, pc, #332	; 0x14c
   13590:	ldrd	r2, [r3]
   13594:	cmp	r1, r3
   13598:	cmpeq	r0, r2
   1359c:	bhi	1361c <_start@@Base+0xf8c>
   135a0:	mov	r2, #0
   135a4:	mov	r3, r1
   135a8:	add	r1, pc, #312	; 0x138
   135ac:	ldrd	r0, [r1]
   135b0:	cmp	r3, r1
   135b4:	cmpeq	r2, r0
   135b8:	beq	135d4 <_start@@Base+0xf44>
   135bc:	mov	r0, r4
   135c0:	add	sp, sp, #12
   135c4:	ldrd	r4, [sp]
   135c8:	ldrd	r6, [sp, #8]
   135cc:	add	sp, sp, #16
   135d0:	pop	{pc}		; (ldr pc, [sp], #4)
   135d4:	ldr	r3, [sp, #36]	; 0x24
   135d8:	str	r3, [sp]
   135dc:	mov	r3, #4
   135e0:	mov	r2, r5
   135e4:	mov	r1, r4
   135e8:	mov	r0, r6
   135ec:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   135f0:	cmp	r4, r0
   135f4:	moveq	r4, r0
   135f8:	beq	135bc <_start@@Base+0xf2c>
   135fc:	mvn	r2, #11
   13600:	mvn	r3, #0
   13604:	ldr	r1, [sp, #32]
   13608:	strd	r2, [r1]
   1360c:	mov	r3, #1
   13610:	str	r3, [r7]
   13614:	mov	r4, r0
   13618:	b	135bc <_start@@Base+0xf2c>
   1361c:	mov	r2, #0
   13620:	mov	r3, r1
   13624:	add	r1, pc, #196	; 0xc4
   13628:	ldrd	r0, [r1]
   1362c:	cmp	r3, r1
   13630:	cmpeq	r2, r0
   13634:	beq	13694 <_start@@Base+0x1004>
   13638:	add	r1, pc, #184	; 0xb8
   1363c:	ldrd	r0, [r1]
   13640:	cmp	r3, r1
   13644:	cmpeq	r2, r0
   13648:	bne	135bc <_start@@Base+0xf2c>
   1364c:	ldr	r3, [sp, #36]	; 0x24
   13650:	str	r3, [sp]
   13654:	mov	r3, #4
   13658:	mov	r2, r5
   1365c:	mov	r1, r4
   13660:	mov	r0, r6
   13664:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13668:	cmp	r4, r0
   1366c:	moveq	r4, r0
   13670:	beq	135bc <_start@@Base+0xf2c>
   13674:	mvn	r2, #10
   13678:	mvn	r3, #0
   1367c:	ldr	r1, [sp, #32]
   13680:	strd	r2, [r1]
   13684:	mov	r3, #1
   13688:	str	r3, [r7]
   1368c:	mov	r4, r0
   13690:	b	135bc <_start@@Base+0xf2c>
   13694:	ldr	r3, [sp, #36]	; 0x24
   13698:	str	r3, [sp]
   1369c:	mov	r3, #4
   136a0:	mov	r2, r5
   136a4:	mov	r1, r4
   136a8:	mov	r0, r6
   136ac:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   136b0:	cmp	r4, r0
   136b4:	moveq	r4, r0
   136b8:	beq	135bc <_start@@Base+0xf2c>
   136bc:	mvn	r2, #9
   136c0:	mvn	r3, #0
   136c4:	ldr	r1, [sp, #32]
   136c8:	strd	r2, [r1]
   136cc:	mov	r3, #1
   136d0:	str	r3, [r7]
   136d4:	mov	r4, r0
   136d8:	b	135bc <_start@@Base+0xf2c>
   136dc:	nop	{0}
   136e0:			; <UNDEFINED> instruction: 0xffffffff
   136e4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   136e8:	andeq	r0, r0, r0
   136ec:	mcrvs	7, 3, r6, cr5, cr1, {1}
   136f0:	andeq	r0, r0, r0
   136f4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   136f8:	andeq	r0, r0, r0
   136fc:	mcrvs	7, 3, r6, cr5, cr2, {1}
   13700:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13704:	strd	r6, [sp, #8]
   13708:	strd	r8, [sp, #16]
   1370c:	str	lr, [sp, #24]
   13710:	sub	sp, sp, #12
   13714:	mov	r8, r0
   13718:	mov	r4, r1
   1371c:	mov	r9, r2
   13720:	mov	r5, r3
   13724:	mov	r1, r2
   13728:	mov	r0, r4
   1372c:	bl	12780 <_start@@Base+0xf0>
   13730:	add	r3, pc, #344	; 0x158
   13734:	ldrd	r2, [r3]
   13738:	cmp	r1, r3
   1373c:	cmpeq	r0, r2
   13740:	bhi	137c4 <_start@@Base+0x1134>
   13744:	mov	r2, #0
   13748:	mov	r3, r1
   1374c:	add	r1, pc, #324	; 0x144
   13750:	ldrd	r0, [r1]
   13754:	cmp	r3, r1
   13758:	cmpeq	r2, r0
   1375c:	beq	1377c <_start@@Base+0x10ec>
   13760:	mov	r0, r4
   13764:	add	sp, sp, #12
   13768:	ldrd	r4, [sp]
   1376c:	ldrd	r6, [sp, #8]
   13770:	ldrd	r8, [sp, #16]
   13774:	add	sp, sp, #24
   13778:	pop	{pc}		; (ldr pc, [sp], #4)
   1377c:	ldr	r3, [sp, #44]	; 0x2c
   13780:	str	r3, [sp]
   13784:	mov	r3, #4
   13788:	mov	r2, r9
   1378c:	mov	r1, r4
   13790:	mov	r0, r8
   13794:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13798:	cmp	r4, r0
   1379c:	moveq	r4, r0
   137a0:	beq	13760 <_start@@Base+0x10d0>
   137a4:	mov	r2, #8
   137a8:	mov	r3, #0
   137ac:	ldr	r1, [sp, #40]	; 0x28
   137b0:	strd	r2, [r1]
   137b4:	mov	r3, #0
   137b8:	str	r3, [r5]
   137bc:	mov	r4, r0
   137c0:	b	13760 <_start@@Base+0x10d0>
   137c4:	mov	r2, #0
   137c8:	bic	r3, r1, #255	; 0xff
   137cc:	add	r7, pc, #204	; 0xcc
   137d0:	ldrd	r6, [r7]
   137d4:	cmp	r3, r7
   137d8:	cmpeq	r2, r6
   137dc:	beq	13844 <_start@@Base+0x11b4>
   137e0:	and	r2, r0, #-16777216	; 0xff000000
   137e4:	mov	r3, r1
   137e8:	add	r1, pc, #184	; 0xb8
   137ec:	ldrd	r0, [r1]
   137f0:	cmp	r3, r1
   137f4:	cmpeq	r2, r0
   137f8:	bne	13760 <_start@@Base+0x10d0>
   137fc:	ldr	r3, [sp, #44]	; 0x2c
   13800:	str	r3, [sp]
   13804:	mov	r3, #5
   13808:	mov	r2, r9
   1380c:	mov	r1, r4
   13810:	mov	r0, r8
   13814:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13818:	cmp	r4, r0
   1381c:	moveq	r4, r0
   13820:	beq	13760 <_start@@Base+0x10d0>
   13824:	mov	r2, #2
   13828:	mov	r3, #0
   1382c:	ldr	r1, [sp, #40]	; 0x28
   13830:	strd	r2, [r1]
   13834:	mov	r3, #0
   13838:	str	r3, [r5]
   1383c:	mov	r4, r0
   13840:	b	13760 <_start@@Base+0x10d0>
   13844:	ldr	r3, [sp, #44]	; 0x2c
   13848:	str	r3, [sp]
   1384c:	mov	r3, #3
   13850:	mov	r2, r9
   13854:	mov	r1, r4
   13858:	mov	r0, r8
   1385c:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13860:	cmp	r4, r0
   13864:	moveq	r4, r0
   13868:	beq	13760 <_start@@Base+0x10d0>
   1386c:	mov	r2, #1
   13870:	mov	r3, #0
   13874:	ldr	r1, [sp, #40]	; 0x28
   13878:	strd	r2, [r1]
   1387c:	mov	r3, #0
   13880:	str	r3, [r5]
   13884:	mov	r4, r0
   13888:	b	13760 <_start@@Base+0x10d0>
   1388c:	nop	{0}
   13890:	ldclvs	15, cr15, [pc, #1020]!	; 13c94 <_start@@Base+0x1604>
   13894:	ldrbmi	r6, [r2, -r5, ror #10]!
   13898:	andeq	r0, r0, r0
   1389c:	rsbmi	r7, ip, #423624704	; 0x19400000
   138a0:	andeq	r0, r0, r0
   138a4:	rsbpl	r6, r5, #0, 8
   138a8:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   138ac:	ldrbmi	r6, [r2, -r5, ror #10]!
   138b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   138b4:	strd	r6, [sp, #8]
   138b8:	strd	r8, [sp, #16]
   138bc:	str	sl, [sp, #24]
   138c0:	str	lr, [sp, #28]
   138c4:	sub	sp, sp, #8
   138c8:	mov	r9, r0
   138cc:	mov	r4, r1
   138d0:	mov	sl, r2
   138d4:	mov	r8, r3
   138d8:	mov	r1, r2
   138dc:	mov	r0, r4
   138e0:	bl	12780 <_start@@Base+0xf0>
   138e4:	add	r3, pc, #940	; 0x3ac
   138e8:	ldrd	r2, [r3]
   138ec:	cmp	r1, r3
   138f0:	cmpeq	r0, r2
   138f4:	bhi	139b0 <_start@@Base+0x1320>
   138f8:	add	r3, pc, #928	; 0x3a0
   138fc:	ldrd	r2, [r3]
   13900:	cmp	r1, r3
   13904:	cmpeq	r0, r2
   13908:	bne	13990 <_start@@Base+0x1300>
   1390c:	mov	r1, sl
   13910:	add	r0, r4, #8
   13914:	bl	12780 <_start@@Base+0xf0>
   13918:	add	r3, pc, #904	; 0x388
   1391c:	ldrd	r2, [r3]
   13920:	cmp	r1, r3
   13924:	cmpeq	r0, r2
   13928:	bne	13990 <_start@@Base+0x1300>
   1392c:	add	r5, r4, #16
   13930:	mov	r1, sl
   13934:	mov	r0, r5
   13938:	bl	12780 <_start@@Base+0xf0>
   1393c:	mov	r2, #0
   13940:	and	r3, r1, #-16777216	; 0xff000000
   13944:	cmp	r3, #1912602624	; 0x72000000
   13948:	cmpeq	r2, #0
   1394c:	bne	13990 <_start@@Base+0x1300>
   13950:	sub	r5, sl, r5
   13954:	cmp	r5, #1
   13958:	ble	13990 <_start@@Base+0x1300>
   1395c:	ldrb	r3, [r4, #17]
   13960:	cmp	r3, #46	; 0x2e
   13964:	bne	13990 <_start@@Base+0x1300>
   13968:	ldr	r3, [sp, #44]	; 0x2c
   1396c:	str	r3, [sp, #4]
   13970:	ldr	r3, [sp, #40]	; 0x28
   13974:	str	r3, [sp]
   13978:	mov	r3, r8
   1397c:	mov	r2, sl
   13980:	add	r1, r4, #18
   13984:	mov	r0, r9
   13988:	bl	128cc <_start@@Base+0x23c>
   1398c:	mov	r4, r0
   13990:	mov	r0, r4
   13994:	add	sp, sp, #8
   13998:	ldrd	r4, [sp]
   1399c:	ldrd	r6, [sp, #8]
   139a0:	ldrd	r8, [sp, #16]
   139a4:	ldr	sl, [sp, #24]
   139a8:	add	sp, sp, #28
   139ac:	pop	{pc}		; (ldr pc, [sp], #4)
   139b0:	add	r3, pc, #760	; 0x2f8
   139b4:	ldrd	r2, [r3]
   139b8:	cmp	r1, r3
   139bc:	cmpeq	r0, r2
   139c0:	beq	13b38 <_start@@Base+0x14a8>
   139c4:	add	r3, pc, #748	; 0x2ec
   139c8:	ldrd	r2, [r3]
   139cc:	cmp	r1, r3
   139d0:	cmpeq	r0, r2
   139d4:	bne	13990 <_start@@Base+0x1300>
   139d8:	mov	r1, sl
   139dc:	add	r0, r4, #8
   139e0:	bl	12780 <_start@@Base+0xf0>
   139e4:	add	r3, pc, #724	; 0x2d4
   139e8:	ldrd	r2, [r3]
   139ec:	cmp	r1, r3
   139f0:	cmpeq	r0, r2
   139f4:	bne	13990 <_start@@Base+0x1300>
   139f8:	mov	r1, sl
   139fc:	add	r0, r4, #16
   13a00:	bl	12780 <_start@@Base+0xf0>
   13a04:	add	r3, pc, #700	; 0x2bc
   13a08:	ldrd	r2, [r3]
   13a0c:	cmp	r1, r3
   13a10:	cmpeq	r0, r2
   13a14:	bne	13990 <_start@@Base+0x1300>
   13a18:	mov	r1, sl
   13a1c:	add	r0, r4, #24
   13a20:	bl	12780 <_start@@Base+0xf0>
   13a24:	add	r3, pc, #676	; 0x2a4
   13a28:	ldrd	r2, [r3]
   13a2c:	cmp	r1, r3
   13a30:	cmpeq	r0, r2
   13a34:	bne	13990 <_start@@Base+0x1300>
   13a38:	add	r5, r4, #32
   13a3c:	mov	r1, sl
   13a40:	mov	r0, r5
   13a44:	bl	12780 <_start@@Base+0xf0>
   13a48:	mov	r2, #0
   13a4c:	and	r3, r1, #-16777216	; 0xff000000
   13a50:	cmp	r3, #1694498816	; 0x65000000
   13a54:	cmpeq	r2, #0
   13a58:	bne	13990 <_start@@Base+0x1300>
   13a5c:	sub	r5, sl, r5
   13a60:	cmp	r5, #1
   13a64:	ble	13990 <_start@@Base+0x1300>
   13a68:	ldrb	r3, [r4, #33]	; 0x21
   13a6c:	cmp	r3, #46	; 0x2e
   13a70:	bne	13990 <_start@@Base+0x1300>
   13a74:	add	r5, r4, #34	; 0x22
   13a78:	mov	r1, sl
   13a7c:	mov	r0, r5
   13a80:	bl	12780 <_start@@Base+0xf0>
   13a84:	mov	r2, #0
   13a88:	bic	r3, r1, #255	; 0xff
   13a8c:	add	r7, pc, #580	; 0x244
   13a90:	ldrd	r6, [r7]
   13a94:	cmp	r3, r7
   13a98:	cmpeq	r2, r6
   13a9c:	beq	14030 <_start@@Base+0x19a0>
   13aa0:	add	r3, pc, #568	; 0x238
   13aa4:	ldrd	r2, [r3]
   13aa8:	cmp	r1, r3
   13aac:	cmpeq	r0, r2
   13ab0:	movne	r4, r5
   13ab4:	bne	13990 <_start@@Base+0x1300>
   13ab8:	add	r6, r4, #42	; 0x2a
   13abc:	mov	r1, sl
   13ac0:	mov	r0, r6
   13ac4:	bl	12780 <_start@@Base+0xf0>
   13ac8:	mov	r2, #0
   13acc:	lsr	r3, r1, #16
   13ad0:	lsl	r3, r3, #16
   13ad4:	mov	r0, #0
   13ad8:	mov	r1, #0
   13adc:	movt	r1, #24940	; 0x616c
   13ae0:	cmp	r3, r1
   13ae4:	cmpeq	r2, r0
   13ae8:	movne	r4, r5
   13aec:	bne	13990 <_start@@Base+0x1300>
   13af0:	ldr	r3, [sp, #44]	; 0x2c
   13af4:	str	r3, [sp]
   13af8:	mov	r3, #2
   13afc:	mov	r2, sl
   13b00:	mov	r1, r6
   13b04:	mov	r0, r9
   13b08:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   13b0c:	mov	r4, r0
   13b10:	cmp	r6, r0
   13b14:	moveq	r4, r5
   13b18:	beq	13990 <_start@@Base+0x1300>
   13b1c:	mov	r2, #0
   13b20:	mov	r3, #0
   13b24:	ldr	r1, [sp, #40]	; 0x28
   13b28:	strd	r2, [r1]
   13b2c:	mov	r3, #0
   13b30:	str	r3, [r8]
   13b34:	b	13990 <_start@@Base+0x1300>
   13b38:	mov	r1, sl
   13b3c:	add	r0, r4, #8
   13b40:	bl	12780 <_start@@Base+0xf0>
   13b44:	add	r3, pc, #412	; 0x19c
   13b48:	ldrd	r2, [r3]
   13b4c:	cmp	r1, r3
   13b50:	cmpeq	r0, r2
   13b54:	bhi	13dd0 <_start@@Base+0x1740>
   13b58:	add	r3, pc, #400	; 0x190
   13b5c:	ldrd	r2, [r3]
   13b60:	cmp	r1, r3
   13b64:	cmpeq	r0, r2
   13b68:	bhi	13bf8 <_start@@Base+0x1568>
   13b6c:	add	r3, pc, #388	; 0x184
   13b70:	ldrd	r2, [r3]
   13b74:	cmp	r1, r3
   13b78:	cmpeq	r0, r2
   13b7c:	bne	13990 <_start@@Base+0x1300>
   13b80:	add	r5, r4, #16
   13b84:	mov	r1, sl
   13b88:	mov	r0, r5
   13b8c:	bl	12780 <_start@@Base+0xf0>
   13b90:	mov	r2, #0
   13b94:	lsr	r3, r1, #16
   13b98:	lsl	r3, r3, #16
   13b9c:	mov	r0, #0
   13ba0:	mov	r1, #0
   13ba4:	movt	r1, #28281	; 0x6e79
   13ba8:	cmp	r3, r1
   13bac:	cmpeq	r2, r0
   13bb0:	bne	13990 <_start@@Base+0x1300>
   13bb4:	sub	r5, sl, r5
   13bb8:	cmp	r5, #2
   13bbc:	ble	13990 <_start@@Base+0x1300>
   13bc0:	ldrb	r3, [r4, #18]
   13bc4:	cmp	r3, #46	; 0x2e
   13bc8:	bne	13990 <_start@@Base+0x1300>
   13bcc:	ldr	r3, [sp, #44]	; 0x2c
   13bd0:	str	r3, [sp, #4]
   13bd4:	ldr	r3, [sp, #40]	; 0x28
   13bd8:	str	r3, [sp]
   13bdc:	mov	r3, r8
   13be0:	mov	r2, sl
   13be4:	add	r1, r4, #19
   13be8:	mov	r0, r9
   13bec:	bl	12d48 <_start@@Base+0x6b8>
   13bf0:	mov	r4, r0
   13bf4:	b	13990 <_start@@Base+0x1300>
   13bf8:	add	r3, pc, #256	; 0x100
   13bfc:	ldrd	r2, [r3]
   13c00:	cmp	r1, r3
   13c04:	cmpeq	r0, r2
   13c08:	beq	13d60 <_start@@Base+0x16d0>
   13c0c:	add	r3, pc, #244	; 0xf4
   13c10:	ldrd	r2, [r3]
   13c14:	cmp	r1, r3
   13c18:	cmpeq	r0, r2
   13c1c:	bne	13990 <_start@@Base+0x1300>
   13c20:	add	r5, r4, #16
   13c24:	mov	r1, sl
   13c28:	mov	r0, r5
   13c2c:	bl	12780 <_start@@Base+0xf0>
   13c30:	mov	r2, #0
   13c34:	lsr	r3, r1, #16
   13c38:	lsl	r3, r3, #16
   13c3c:	mov	r0, #0
   13c40:	mov	r1, #0
   13c44:	movt	r1, #28527	; 0x6f6f
   13c48:	cmp	r3, r1
   13c4c:	cmpeq	r2, r0
   13c50:	bne	13990 <_start@@Base+0x1300>
   13c54:	sub	r5, sl, r5
   13c58:	cmp	r5, #2
   13c5c:	ble	13990 <_start@@Base+0x1300>
   13c60:	ldrb	r3, [r4, #18]
   13c64:	cmp	r3, #46	; 0x2e
   13c68:	bne	13990 <_start@@Base+0x1300>
   13c6c:	ldr	r3, [sp, #44]	; 0x2c
   13c70:	str	r3, [sp, #4]
   13c74:	ldr	r3, [sp, #40]	; 0x28
   13c78:	str	r3, [sp]
   13c7c:	mov	r3, r8
   13c80:	mov	r2, sl
   13c84:	add	r1, r4, #19
   13c88:	mov	r0, r9
   13c8c:	bl	13008 <_start@@Base+0x978>
   13c90:	mov	r4, r0
   13c94:	b	13990 <_start@@Base+0x1300>
   13c98:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   13c9c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   13ca0:	cmnvs	r3, lr, lsr #18
   13ca4:			; <UNDEFINED> instruction: 0x46616e74
   13ca8:	cmnvs	r3, r5, ror #8
   13cac:	cmnmi	r8, #-2147483620	; 0x8000001c
   13cb0:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   13cb4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   13cb8:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   13cbc:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   13cc0:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   13cc4:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   13cc8:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   13ccc:	cmnpl	r0, #-1073741800	; 0xc0000018
   13cd0:	cmnvs	ip, #100, 10	; 0x19000000
   13cd4:	svcvs	0x006d496e
   13cd8:	andeq	r0, r0, r0
   13cdc:	strbtmi	r6, [pc], -r0, lsl #30
   13ce0:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   13ce4:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   13ce8:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   13cec:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13cf0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   13cf4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13cf8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   13cfc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13d00:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   13d04:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13d08:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   13d0c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13d10:	andeq	r0, r0, r0
   13d14:	svcvs	0x006c6f72
   13d18:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   13d1c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13d20:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   13d24:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   13d28:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   13d2c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13d30:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   13d34:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13d38:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   13d3c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   13d40:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   13d44:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13d48:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   13d4c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   13d50:	rsbsvc	r7, r4, r5, ror #18
   13d54:	svcvs	0x0074656d
   13d58:	andeq	r0, r0, r0
   13d5c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   13d60:	add	r5, r4, #16
   13d64:	mov	r1, sl
   13d68:	mov	r0, r5
   13d6c:	bl	12780 <_start@@Base+0xf0>
   13d70:	mov	r2, #0
   13d74:	mov	r3, r1
   13d78:	sub	r1, pc, #112	; 0x70
   13d7c:	ldrd	r0, [r1]
   13d80:	cmp	r3, r1
   13d84:	cmpeq	r2, r0
   13d88:	bne	13990 <_start@@Base+0x1300>
   13d8c:	sub	r5, sl, r5
   13d90:	cmp	r5, #4
   13d94:	ble	13990 <_start@@Base+0x1300>
   13d98:	ldrb	r3, [r4, #20]
   13d9c:	cmp	r3, #46	; 0x2e
   13da0:	bne	13990 <_start@@Base+0x1300>
   13da4:	ldr	r3, [sp, #44]	; 0x2c
   13da8:	str	r3, [sp, #4]
   13dac:	ldr	r3, [sp, #40]	; 0x28
   13db0:	str	r3, [sp]
   13db4:	mov	r3, r8
   13db8:	mov	r2, sl
   13dbc:	add	r1, r4, #21
   13dc0:	mov	r0, r9
   13dc4:	bl	13700 <_start@@Base+0x1070>
   13dc8:	mov	r4, r0
   13dcc:	b	13990 <_start@@Base+0x1300>
   13dd0:	sub	r3, pc, #192	; 0xc0
   13dd4:	ldrd	r2, [r3]
   13dd8:	cmp	r1, r3
   13ddc:	cmpeq	r0, r2
   13de0:	bhi	13e54 <_start@@Base+0x17c4>
   13de4:	add	r5, r4, #16
   13de8:	mov	r1, sl
   13dec:	mov	r0, r5
   13df0:	bl	12780 <_start@@Base+0xf0>
   13df4:	bic	r2, r0, #255	; 0xff
   13df8:	mov	r3, r1
   13dfc:	sub	r1, pc, #228	; 0xe4
   13e00:	ldrd	r0, [r1]
   13e04:	cmp	r3, r1
   13e08:	cmpeq	r2, r0
   13e0c:	bne	13990 <_start@@Base+0x1300>
   13e10:	sub	r5, sl, r5
   13e14:	cmp	r5, #7
   13e18:	ble	13990 <_start@@Base+0x1300>
   13e1c:	ldrb	r3, [r4, #23]
   13e20:	cmp	r3, #46	; 0x2e
   13e24:	bne	13990 <_start@@Base+0x1300>
   13e28:	ldr	r3, [sp, #44]	; 0x2c
   13e2c:	str	r3, [sp, #4]
   13e30:	ldr	r3, [sp, #40]	; 0x28
   13e34:	str	r3, [sp]
   13e38:	mov	r3, r8
   13e3c:	mov	r2, sl
   13e40:	add	r1, r4, #24
   13e44:	mov	r0, r9
   13e48:	bl	13170 <_start@@Base+0xae0>
   13e4c:	mov	r4, r0
   13e50:	b	13990 <_start@@Base+0x1300>
   13e54:	sub	r3, pc, #308	; 0x134
   13e58:	ldrd	r2, [r3]
   13e5c:	cmp	r1, r3
   13e60:	cmpeq	r0, r2
   13e64:	bhi	13eec <_start@@Base+0x185c>
   13e68:	sub	r3, pc, #320	; 0x140
   13e6c:	ldrd	r2, [r3]
   13e70:	cmp	r1, r3
   13e74:	cmpeq	r0, r2
   13e78:	bne	13990 <_start@@Base+0x1300>
   13e7c:	add	r5, r4, #16
   13e80:	mov	r1, sl
   13e84:	mov	r0, r5
   13e88:	bl	12780 <_start@@Base+0xf0>
   13e8c:	bic	r2, r0, #255	; 0xff
   13e90:	mov	r3, r1
   13e94:	sub	r1, pc, #356	; 0x164
   13e98:	ldrd	r0, [r1]
   13e9c:	cmp	r3, r1
   13ea0:	cmpeq	r2, r0
   13ea4:	bne	13990 <_start@@Base+0x1300>
   13ea8:	sub	r5, sl, r5
   13eac:	cmp	r5, #7
   13eb0:	ble	13990 <_start@@Base+0x1300>
   13eb4:	ldrb	r3, [r4, #23]
   13eb8:	cmp	r3, #46	; 0x2e
   13ebc:	bne	13990 <_start@@Base+0x1300>
   13ec0:	ldr	r3, [sp, #44]	; 0x2c
   13ec4:	str	r3, [sp, #4]
   13ec8:	ldr	r3, [sp, #40]	; 0x28
   13ecc:	str	r3, [sp]
   13ed0:	mov	r3, r8
   13ed4:	mov	r2, sl
   13ed8:	add	r1, r4, #24
   13edc:	mov	r0, r9
   13ee0:	bl	13328 <_start@@Base+0xc98>
   13ee4:	mov	r4, r0
   13ee8:	b	13990 <_start@@Base+0x1300>
   13eec:	sub	r3, pc, #436	; 0x1b4
   13ef0:	ldrd	r2, [r3]
   13ef4:	cmp	r1, r3
   13ef8:	cmpeq	r0, r2
   13efc:	bne	13990 <_start@@Base+0x1300>
   13f00:	add	r5, r4, #16
   13f04:	mov	r1, sl
   13f08:	mov	r0, r5
   13f0c:	bl	12780 <_start@@Base+0xf0>
   13f10:	bic	r2, r0, #255	; 0xff
   13f14:	sub	r7, pc, #468	; 0x1d4
   13f18:	ldrd	r6, [r7]
   13f1c:	cmp	r1, r7
   13f20:	cmpeq	r2, r6
   13f24:	bne	13f6c <_start@@Base+0x18dc>
   13f28:	sub	r5, sl, r5
   13f2c:	cmp	r5, #7
   13f30:	ble	13990 <_start@@Base+0x1300>
   13f34:	ldrb	r3, [r4, #23]
   13f38:	cmp	r3, #46	; 0x2e
   13f3c:	bne	13990 <_start@@Base+0x1300>
   13f40:	ldr	r3, [sp, #44]	; 0x2c
   13f44:	str	r3, [sp, #4]
   13f48:	ldr	r3, [sp, #40]	; 0x28
   13f4c:	str	r3, [sp]
   13f50:	mov	r3, r8
   13f54:	mov	r2, sl
   13f58:	add	r1, r4, #24
   13f5c:	mov	r0, r9
   13f60:	bl	13560 <_start@@Base+0xed0>
   13f64:	mov	r4, r0
   13f68:	b	13990 <_start@@Base+0x1300>
   13f6c:	sub	r3, pc, #548	; 0x224
   13f70:	ldrd	r2, [r3]
   13f74:	cmp	r1, r3
   13f78:	cmpeq	r0, r2
   13f7c:	bne	13990 <_start@@Base+0x1300>
   13f80:	add	r5, r4, #24
   13f84:	mov	r1, sl
   13f88:	mov	r0, r5
   13f8c:	bl	12780 <_start@@Base+0xf0>
   13f90:	mov	r2, #0
   13f94:	bic	r3, r1, #255	; 0xff
   13f98:	sub	r1, pc, #584	; 0x248
   13f9c:	ldrd	r0, [r1]
   13fa0:	cmp	r3, r1
   13fa4:	cmpeq	r2, r0
   13fa8:	bne	13990 <_start@@Base+0x1300>
   13fac:	sub	r5, sl, r5
   13fb0:	cmp	r5, #3
   13fb4:	ble	13990 <_start@@Base+0x1300>
   13fb8:	ldrb	r3, [r4, #27]
   13fbc:	cmp	r3, #46	; 0x2e
   13fc0:	bne	13990 <_start@@Base+0x1300>
   13fc4:	add	r5, r4, #28
   13fc8:	mov	r1, sl
   13fcc:	mov	r0, r5
   13fd0:	bl	12780 <_start@@Base+0xf0>
   13fd4:	mov	r2, #0
   13fd8:	and	r3, r1, #-16777216	; 0xff000000
   13fdc:	cmp	r3, #2013265920	; 0x78000000
   13fe0:	cmpeq	r2, #0
   13fe4:	movne	r4, r5
   13fe8:	bne	13990 <_start@@Base+0x1300>
   13fec:	ldr	r3, [sp, #44]	; 0x2c
   13ff0:	str	r3, [sp]
   13ff4:	mov	r3, #1
   13ff8:	mov	r2, sl
   13ffc:	mov	r1, r5
   14000:	mov	r0, r9
   14004:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   14008:	mov	r4, r0
   1400c:	cmp	r5, r0
   14010:	beq	13990 <_start@@Base+0x1300>
   14014:	mov	r2, #0
   14018:	mov	r3, #0
   1401c:	ldr	r1, [sp, #40]	; 0x28
   14020:	strd	r2, [r1]
   14024:	mov	r3, #0
   14028:	str	r3, [r8]
   1402c:	b	13990 <_start@@Base+0x1300>
   14030:	ldr	r3, [sp, #44]	; 0x2c
   14034:	str	r3, [sp]
   14038:	mov	r3, #3
   1403c:	mov	r2, sl
   14040:	mov	r1, r5
   14044:	mov	r0, r9
   14048:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   1404c:	mov	r4, r0
   14050:	cmp	r5, r0
   14054:	beq	13990 <_start@@Base+0x1300>
   14058:	mov	r2, #17
   1405c:	mov	r3, #0
   14060:	ldr	r1, [sp, #40]	; 0x28
   14064:	strd	r2, [r1]
   14068:	mov	r3, #0
   1406c:	str	r3, [r8]
   14070:	b	13990 <_start@@Base+0x1300>
   14074:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14078:	strd	r6, [sp, #8]
   1407c:	strd	r8, [sp, #16]
   14080:	str	lr, [sp, #24]
   14084:	sub	sp, sp, #28
   14088:	mov	r4, #0
   1408c:	mov	r5, #0
   14090:	strd	r4, [sp, #16]
   14094:	mov	ip, #0
   14098:	str	ip, [sp, #12]
   1409c:	strh	ip, [r3]
   140a0:	cmp	r1, r2
   140a4:	moveq	r0, r2
   140a8:	beq	140d4 <_start@@Base+0x1a44>
   140ac:	mov	r6, r3
   140b0:	mov	r5, r2
   140b4:	mov	r4, r1
   140b8:	mov	r7, r0
   140bc:	add	r3, sp, #16
   140c0:	str	r3, [sp]
   140c4:	add	r3, sp, #12
   140c8:	bl	29968 <flatcc_json_parser_integer@@Base>
   140cc:	cmp	r4, r0
   140d0:	bne	140ec <_start@@Base+0x1a5c>
   140d4:	add	sp, sp, #28
   140d8:	ldrd	r4, [sp]
   140dc:	ldrd	r6, [sp, #8]
   140e0:	ldrd	r8, [sp, #16]
   140e4:	add	sp, sp, #24
   140e8:	pop	{pc}		; (ldr pc, [sp], #4)
   140ec:	ldrd	r2, [sp, #16]
   140f0:	ldr	r1, [sp, #12]
   140f4:	cmp	r1, #0
   140f8:	beq	14128 <_start@@Base+0x1a98>
   140fc:	cmp	r3, #0
   14100:	cmpeq	r2, #32768	; 0x8000
   14104:	rsbls	r2, r2, #0
   14108:	strhls	r2, [r6]
   1410c:	bls	140d4 <_start@@Base+0x1a44>
   14110:	mov	r3, #8
   14114:	mov	r2, r5
   14118:	mov	r1, r0
   1411c:	mov	r0, r7
   14120:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14124:	b	140d4 <_start@@Base+0x1a44>
   14128:	movw	r8, #32767	; 0x7fff
   1412c:	mov	r9, #0
   14130:	cmp	r3, r9
   14134:	cmpeq	r2, r8
   14138:	strhls	r2, [r6]
   1413c:	bls	140d4 <_start@@Base+0x1a44>
   14140:	mov	r3, #7
   14144:	mov	r2, r5
   14148:	mov	r1, r0
   1414c:	mov	r0, r7
   14150:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14154:	b	140d4 <_start@@Base+0x1a44>
   14158:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1415c:	strd	r6, [sp, #8]
   14160:	strd	r8, [sp, #16]
   14164:	str	lr, [sp, #24]
   14168:	sub	sp, sp, #28
   1416c:	mov	r4, #0
   14170:	mov	r5, #0
   14174:	strd	r4, [sp, #16]
   14178:	mov	ip, #0
   1417c:	str	ip, [sp, #12]
   14180:	str	ip, [r3]
   14184:	cmp	r1, r2
   14188:	moveq	r0, r2
   1418c:	beq	141b8 <_start@@Base+0x1b28>
   14190:	mov	r6, r3
   14194:	mov	r5, r2
   14198:	mov	r4, r1
   1419c:	mov	r7, r0
   141a0:	add	r3, sp, #16
   141a4:	str	r3, [sp]
   141a8:	add	r3, sp, #12
   141ac:	bl	29968 <flatcc_json_parser_integer@@Base>
   141b0:	cmp	r4, r0
   141b4:	bne	141d0 <_start@@Base+0x1b40>
   141b8:	add	sp, sp, #28
   141bc:	ldrd	r4, [sp]
   141c0:	ldrd	r6, [sp, #8]
   141c4:	ldrd	r8, [sp, #16]
   141c8:	add	sp, sp, #24
   141cc:	pop	{pc}		; (ldr pc, [sp], #4)
   141d0:	ldrd	r2, [sp, #16]
   141d4:	ldr	r1, [sp, #12]
   141d8:	cmp	r1, #0
   141dc:	beq	1420c <_start@@Base+0x1b7c>
   141e0:	cmp	r3, #0
   141e4:	cmpeq	r2, #-2147483648	; 0x80000000
   141e8:	rsbls	r2, r2, #0
   141ec:	strls	r2, [r6]
   141f0:	bls	141b8 <_start@@Base+0x1b28>
   141f4:	mov	r3, #8
   141f8:	mov	r2, r5
   141fc:	mov	r1, r0
   14200:	mov	r0, r7
   14204:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14208:	b	141b8 <_start@@Base+0x1b28>
   1420c:	mvn	r8, #-2147483648	; 0x80000000
   14210:	mov	r9, #0
   14214:	cmp	r3, r9
   14218:	cmpeq	r2, r8
   1421c:	strls	r2, [r6]
   14220:	bls	141b8 <_start@@Base+0x1b28>
   14224:	mov	r3, #7
   14228:	mov	r2, r5
   1422c:	mov	r1, r0
   14230:	mov	r0, r7
   14234:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14238:	b	141b8 <_start@@Base+0x1b28>
   1423c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14240:	strd	r6, [sp, #8]
   14244:	strd	r8, [sp, #16]
   14248:	str	lr, [sp, #24]
   1424c:	sub	sp, sp, #28
   14250:	mov	r4, #0
   14254:	mov	r5, #0
   14258:	strd	r4, [sp, #16]
   1425c:	mov	ip, #0
   14260:	str	ip, [sp, #12]
   14264:	str	ip, [r3]
   14268:	cmp	r1, r2
   1426c:	moveq	r0, r2
   14270:	beq	1429c <_start@@Base+0x1c0c>
   14274:	mov	r6, r3
   14278:	mov	r5, r2
   1427c:	mov	r4, r1
   14280:	mov	r7, r0
   14284:	add	r3, sp, #16
   14288:	str	r3, [sp]
   1428c:	add	r3, sp, #12
   14290:	bl	29968 <flatcc_json_parser_integer@@Base>
   14294:	cmp	r4, r0
   14298:	bne	142b4 <_start@@Base+0x1c24>
   1429c:	add	sp, sp, #28
   142a0:	ldrd	r4, [sp]
   142a4:	ldrd	r6, [sp, #8]
   142a8:	ldrd	r8, [sp, #16]
   142ac:	add	sp, sp, #24
   142b0:	pop	{pc}		; (ldr pc, [sp], #4)
   142b4:	ldr	r3, [sp, #12]
   142b8:	cmp	r3, #0
   142bc:	bne	142f4 <_start@@Base+0x1c64>
   142c0:	ldrd	r2, [sp, #16]
   142c4:	mvn	r8, #0
   142c8:	mov	r9, #0
   142cc:	cmp	r3, r9
   142d0:	cmpeq	r2, r8
   142d4:	strls	r2, [r6]
   142d8:	bls	1429c <_start@@Base+0x1c0c>
   142dc:	mov	r3, #7
   142e0:	mov	r2, r5
   142e4:	mov	r1, r0
   142e8:	mov	r0, r7
   142ec:	bl	27930 <flatcc_json_parser_set_error@@Base>
   142f0:	b	1429c <_start@@Base+0x1c0c>
   142f4:	mov	r3, #8
   142f8:	mov	r2, r5
   142fc:	mov	r1, r0
   14300:	mov	r0, r7
   14304:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14308:	b	1429c <_start@@Base+0x1c0c>
   1430c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14310:	strd	r6, [sp, #8]
   14314:	str	lr, [sp, #16]
   14318:	sub	sp, sp, #28
   1431c:	mov	r4, #0
   14320:	mov	r5, #0
   14324:	strd	r4, [sp, #16]
   14328:	mov	ip, #0
   1432c:	str	ip, [sp, #12]
   14330:	strd	r4, [r3]
   14334:	cmp	r1, r2
   14338:	moveq	r0, r2
   1433c:	beq	1437c <_start@@Base+0x1cec>
   14340:	mov	r7, r3
   14344:	mov	r5, r2
   14348:	mov	r4, r1
   1434c:	mov	r6, r0
   14350:	add	r3, sp, #16
   14354:	str	r3, [sp]
   14358:	add	r3, sp, #12
   1435c:	bl	29968 <flatcc_json_parser_integer@@Base>
   14360:	cmp	r4, r0
   14364:	beq	1437c <_start@@Base+0x1cec>
   14368:	ldr	r3, [sp, #12]
   1436c:	cmp	r3, #0
   14370:	bne	14390 <_start@@Base+0x1d00>
   14374:	ldrd	r2, [sp, #16]
   14378:	strd	r2, [r7]
   1437c:	add	sp, sp, #28
   14380:	ldrd	r4, [sp]
   14384:	ldrd	r6, [sp, #8]
   14388:	add	sp, sp, #16
   1438c:	pop	{pc}		; (ldr pc, [sp], #4)
   14390:	mov	r3, #8
   14394:	mov	r2, r5
   14398:	mov	r1, r0
   1439c:	mov	r0, r6
   143a0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   143a4:	b	1437c <_start@@Base+0x1cec>
   143a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   143ac:	strd	r6, [sp, #8]
   143b0:	str	lr, [sp, #16]
   143b4:	sub	sp, sp, #28
   143b8:	mov	r4, #0
   143bc:	mov	r5, #0
   143c0:	strd	r4, [sp, #16]
   143c4:	mov	ip, #0
   143c8:	str	ip, [sp, #12]
   143cc:	strb	ip, [r3]
   143d0:	cmp	r1, r2
   143d4:	moveq	r0, r2
   143d8:	beq	14404 <_start@@Base+0x1d74>
   143dc:	mov	r6, r3
   143e0:	mov	r5, r2
   143e4:	mov	r4, r1
   143e8:	mov	r7, r0
   143ec:	add	r3, sp, #16
   143f0:	str	r3, [sp]
   143f4:	add	r3, sp, #12
   143f8:	bl	29968 <flatcc_json_parser_integer@@Base>
   143fc:	cmp	r4, r0
   14400:	bne	14418 <_start@@Base+0x1d88>
   14404:	add	sp, sp, #28
   14408:	ldrd	r4, [sp]
   1440c:	ldrd	r6, [sp, #8]
   14410:	add	sp, sp, #16
   14414:	pop	{pc}		; (ldr pc, [sp], #4)
   14418:	ldr	r3, [sp, #12]
   1441c:	cmp	r3, #0
   14420:	bne	14450 <_start@@Base+0x1dc0>
   14424:	ldrd	r2, [sp, #16]
   14428:	cmp	r3, #0
   1442c:	cmpeq	r2, #255	; 0xff
   14430:	strbls	r2, [r6]
   14434:	bls	14404 <_start@@Base+0x1d74>
   14438:	mov	r3, #7
   1443c:	mov	r2, r5
   14440:	mov	r1, r0
   14444:	mov	r0, r7
   14448:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1444c:	b	14404 <_start@@Base+0x1d74>
   14450:	mov	r3, #8
   14454:	mov	r2, r5
   14458:	mov	r1, r0
   1445c:	mov	r0, r7
   14460:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14464:	b	14404 <_start@@Base+0x1d74>
   14468:	strd	r4, [sp, #-20]!	; 0xffffffec
   1446c:	strd	r6, [sp, #8]
   14470:	str	lr, [sp, #16]
   14474:	sub	sp, sp, #28
   14478:	mov	r4, #0
   1447c:	mov	r5, #0
   14480:	strd	r4, [sp, #16]
   14484:	mov	ip, #0
   14488:	str	ip, [sp, #12]
   1448c:	strd	r4, [r3]
   14490:	cmp	r1, r2
   14494:	moveq	r0, r2
   14498:	beq	144c4 <_start@@Base+0x1e34>
   1449c:	mov	r6, r3
   144a0:	mov	r5, r2
   144a4:	mov	r4, r1
   144a8:	mov	r7, r0
   144ac:	add	r3, sp, #16
   144b0:	str	r3, [sp]
   144b4:	add	r3, sp, #12
   144b8:	bl	29968 <flatcc_json_parser_integer@@Base>
   144bc:	cmp	r4, r0
   144c0:	bne	144d8 <_start@@Base+0x1e48>
   144c4:	add	sp, sp, #28
   144c8:	ldrd	r4, [sp]
   144cc:	ldrd	r6, [sp, #8]
   144d0:	add	sp, sp, #16
   144d4:	pop	{pc}		; (ldr pc, [sp], #4)
   144d8:	ldrd	r2, [sp, #16]
   144dc:	ldr	r1, [sp, #12]
   144e0:	cmp	r1, #0
   144e4:	beq	1451c <_start@@Base+0x1e8c>
   144e8:	cmp	r3, #-2147483648	; 0x80000000
   144ec:	cmpeq	r2, #0
   144f0:	bhi	14504 <_start@@Base+0x1e74>
   144f4:	rsbs	r2, r2, #0
   144f8:	rsc	r3, r3, #0
   144fc:	strd	r2, [r6]
   14500:	b	144c4 <_start@@Base+0x1e34>
   14504:	mov	r3, #8
   14508:	mov	r2, r5
   1450c:	mov	r1, r0
   14510:	mov	r0, r7
   14514:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14518:	b	144c4 <_start@@Base+0x1e34>
   1451c:	cmp	r2, #0
   14520:	sbcs	r1, r3, #0
   14524:	strdge	r2, [r6]
   14528:	bge	144c4 <_start@@Base+0x1e34>
   1452c:	mov	r3, #7
   14530:	mov	r2, r5
   14534:	mov	r1, r0
   14538:	mov	r0, r7
   1453c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14540:	b	144c4 <_start@@Base+0x1e34>
   14544:	sub	r3, r2, r1
   14548:	cmp	r3, #1
   1454c:	ble	14560 <_start@@Base+0x1ed0>
   14550:	ldrb	r3, [r1]
   14554:	cmp	r3, #32
   14558:	bhi	1458c <_start@@Base+0x1efc>
   1455c:	beq	14578 <_start@@Base+0x1ee8>
   14560:	str	r4, [sp, #-8]!
   14564:	str	lr, [sp, #4]
   14568:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1456c:	ldr	r4, [sp]
   14570:	add	sp, sp, #4
   14574:	pop	{pc}		; (ldr pc, [sp], #4)
   14578:	ldrb	r3, [r1, #1]
   1457c:	cmp	r3, #32
   14580:	bls	14560 <_start@@Base+0x1ed0>
   14584:	add	r0, r1, #1
   14588:	bx	lr
   1458c:	mov	r0, r1
   14590:	bx	lr
   14594:	strd	r4, [sp, #-16]!
   14598:	str	r6, [sp, #8]
   1459c:	str	lr, [sp, #12]
   145a0:	mov	r5, r0
   145a4:	mov	r0, r1
   145a8:	mov	r4, r2
   145ac:	sub	r2, r2, r1
   145b0:	cmp	r2, r3
   145b4:	ble	14630 <_start@@Base+0x1fa0>
   145b8:	ldr	r2, [r5, #12]
   145bc:	cmp	r2, #0
   145c0:	beq	14640 <_start@@Base+0x1fb0>
   145c4:	add	r1, r1, r3
   145c8:	ldrb	r3, [r0, r3]
   145cc:	cmp	r3, #58	; 0x3a
   145d0:	cmpne	r3, #32
   145d4:	bhi	14630 <_start@@Base+0x1fa0>
   145d8:	mov	r3, #0
   145dc:	str	r3, [r5, #12]
   145e0:	sub	r3, r4, r1
   145e4:	cmp	r3, #1
   145e8:	ble	145fc <_start@@Base+0x1f6c>
   145ec:	ldrb	r3, [r1]
   145f0:	cmp	r3, #32
   145f4:	bhi	1460c <_start@@Base+0x1f7c>
   145f8:	beq	14658 <_start@@Base+0x1fc8>
   145fc:	mov	r2, r4
   14600:	mov	r0, r5
   14604:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   14608:	mov	r1, r0
   1460c:	cmp	r4, r1
   14610:	beq	14620 <_start@@Base+0x1f90>
   14614:	ldrb	r3, [r1]
   14618:	cmp	r3, #58	; 0x3a
   1461c:	beq	1466c <_start@@Base+0x1fdc>
   14620:	mov	r3, #4
   14624:	mov	r2, r4
   14628:	mov	r0, r5
   1462c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14630:	ldrd	r4, [sp]
   14634:	ldr	r6, [sp, #8]
   14638:	add	sp, sp, #12
   1463c:	pop	{pc}		; (ldr pc, [sp], #4)
   14640:	ldrb	r2, [r1, r3]
   14644:	cmp	r2, #34	; 0x22
   14648:	bne	14630 <_start@@Base+0x1fa0>
   1464c:	add	r3, r3, #1
   14650:	add	r1, r1, r3
   14654:	b	145e0 <_start@@Base+0x1f50>
   14658:	ldrb	r3, [r1, #1]
   1465c:	cmp	r3, #32
   14660:	addhi	r1, r1, #1
   14664:	bls	145fc <_start@@Base+0x1f6c>
   14668:	b	1460c <_start@@Base+0x1f7c>
   1466c:	mov	r2, r4
   14670:	add	r1, r1, #1
   14674:	mov	r0, r5
   14678:	bl	14544 <_start@@Base+0x1eb4>
   1467c:	b	14630 <_start@@Base+0x1fa0>
   14680:	strd	r4, [sp, #-16]!
   14684:	str	r6, [sp, #8]
   14688:	str	lr, [sp, #12]
   1468c:	mov	r6, r0
   14690:	mov	r4, r2
   14694:	mov	r5, r3
   14698:	cmp	r1, r2
   1469c:	beq	146ac <_start@@Base+0x201c>
   146a0:	ldrb	r3, [r1]
   146a4:	cmp	r3, #123	; 0x7b
   146a8:	beq	146d4 <_start@@Base+0x2044>
   146ac:	mov	r3, #0
   146b0:	str	r3, [r5]
   146b4:	mov	r3, #21
   146b8:	mov	r2, r4
   146bc:	mov	r0, r6
   146c0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   146c4:	ldrd	r4, [sp]
   146c8:	ldr	r6, [sp, #8]
   146cc:	add	sp, sp, #12
   146d0:	pop	{pc}		; (ldr pc, [sp], #4)
   146d4:	add	r0, r1, #1
   146d8:	sub	r3, r2, r0
   146dc:	cmp	r3, #1
   146e0:	ble	146f4 <_start@@Base+0x2064>
   146e4:	ldrb	r3, [r1, #1]
   146e8:	cmp	r3, #32
   146ec:	bhi	14704 <_start@@Base+0x2074>
   146f0:	beq	14724 <_start@@Base+0x2094>
   146f4:	mov	r2, r4
   146f8:	mov	r1, r0
   146fc:	mov	r0, r6
   14700:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   14704:	cmp	r4, r0
   14708:	beq	14718 <_start@@Base+0x2088>
   1470c:	ldrb	r3, [r0]
   14710:	cmp	r3, #125	; 0x7d
   14714:	beq	14738 <_start@@Base+0x20a8>
   14718:	mov	r3, #1
   1471c:	str	r3, [r5]
   14720:	b	146c4 <_start@@Base+0x2034>
   14724:	ldrb	r3, [r1, #2]
   14728:	cmp	r3, #32
   1472c:	addhi	r0, r1, #2
   14730:	bls	146f4 <_start@@Base+0x2064>
   14734:	b	14704 <_start@@Base+0x2074>
   14738:	mov	r3, #0
   1473c:	str	r3, [r5]
   14740:	mov	r2, r4
   14744:	add	r1, r0, #1
   14748:	mov	r0, r6
   1474c:	bl	14544 <_start@@Base+0x1eb4>
   14750:	b	146c4 <_start@@Base+0x2034>
   14754:	strd	r4, [sp, #-16]!
   14758:	str	r6, [sp, #8]
   1475c:	str	lr, [sp, #12]
   14760:	mov	r6, r0
   14764:	mov	r4, r2
   14768:	mov	r5, r3
   1476c:	cmp	r1, r2
   14770:	beq	14780 <_start@@Base+0x20f0>
   14774:	ldrb	r3, [r1]
   14778:	cmp	r3, #91	; 0x5b
   1477c:	beq	147a8 <_start@@Base+0x2118>
   14780:	mov	r3, #0
   14784:	str	r3, [r5]
   14788:	mov	r3, #22
   1478c:	mov	r2, r4
   14790:	mov	r0, r6
   14794:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14798:	ldrd	r4, [sp]
   1479c:	ldr	r6, [sp, #8]
   147a0:	add	sp, sp, #12
   147a4:	pop	{pc}		; (ldr pc, [sp], #4)
   147a8:	add	r0, r1, #1
   147ac:	sub	r3, r2, r0
   147b0:	cmp	r3, #1
   147b4:	ble	147c8 <_start@@Base+0x2138>
   147b8:	ldrb	r3, [r1, #1]
   147bc:	cmp	r3, #32
   147c0:	bhi	147d8 <_start@@Base+0x2148>
   147c4:	beq	147f8 <_start@@Base+0x2168>
   147c8:	mov	r2, r4
   147cc:	mov	r1, r0
   147d0:	mov	r0, r6
   147d4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   147d8:	cmp	r4, r0
   147dc:	beq	147ec <_start@@Base+0x215c>
   147e0:	ldrb	r3, [r0]
   147e4:	cmp	r3, #93	; 0x5d
   147e8:	beq	1480c <_start@@Base+0x217c>
   147ec:	mov	r3, #1
   147f0:	str	r3, [r5]
   147f4:	b	14798 <_start@@Base+0x2108>
   147f8:	ldrb	r3, [r1, #2]
   147fc:	cmp	r3, #32
   14800:	addhi	r0, r1, #2
   14804:	bls	147c8 <_start@@Base+0x2138>
   14808:	b	147d8 <_start@@Base+0x2148>
   1480c:	mov	r3, #0
   14810:	str	r3, [r5]
   14814:	mov	r2, r4
   14818:	add	r1, r0, #1
   1481c:	mov	r0, r6
   14820:	bl	14544 <_start@@Base+0x1eb4>
   14824:	b	14798 <_start@@Base+0x2108>
   14828:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1482c:	strd	r6, [sp, #8]
   14830:	strd	r8, [sp, #16]
   14834:	strd	sl, [sp, #24]
   14838:	str	lr, [sp, #32]
   1483c:	sub	sp, sp, #36	; 0x24
   14840:	mov	r8, r0
   14844:	mov	r7, r2
   14848:	str	r3, [sp, #12]
   1484c:	mov	r3, #0
   14850:	ldr	r2, [sp, #72]	; 0x48
   14854:	str	r3, [r2]
   14858:	cmp	r1, r7
   1485c:	beq	149e8 <_start@@Base+0x2358>
   14860:	ldrb	r3, [r1]
   14864:	cmp	r3, #34	; 0x22
   14868:	addeq	r4, r1, #1
   1486c:	moveq	r3, #0
   14870:	streq	r3, [r0, #12]
   14874:	beq	148b8 <_start@@Base+0x2228>
   14878:	cmp	r3, #46	; 0x2e
   1487c:	movne	r3, #1
   14880:	strne	r3, [r0, #12]
   14884:	movne	r4, r1
   14888:	beq	1489c <_start@@Base+0x220c>
   1488c:	mov	fp, #0
   14890:	add	sl, sp, #16
   14894:	add	r9, sp, #24
   14898:	b	1495c <_start@@Base+0x22cc>
   1489c:	mov	r3, #5
   148a0:	mov	r2, r7
   148a4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   148a8:	mov	r4, r0
   148ac:	ldr	r3, [r8, #12]
   148b0:	cmp	r3, #0
   148b4:	bne	148e8 <_start@@Base+0x2258>
   148b8:	sub	r3, r7, r4
   148bc:	cmp	r3, #1
   148c0:	ble	148d4 <_start@@Base+0x2244>
   148c4:	ldrb	r3, [r4]
   148c8:	cmp	r3, #32
   148cc:	bhi	148e8 <_start@@Base+0x2258>
   148d0:	beq	148f4 <_start@@Base+0x2264>
   148d4:	mov	r2, r7
   148d8:	mov	r1, r4
   148dc:	mov	r0, r8
   148e0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   148e4:	mov	r4, r0
   148e8:	cmp	r7, r4
   148ec:	bne	1488c <_start@@Base+0x21fc>
   148f0:	b	14a04 <_start@@Base+0x2374>
   148f4:	ldrb	r3, [r4, #1]
   148f8:	cmp	r3, #32
   148fc:	addhi	r4, r4, #1
   14900:	bls	148d4 <_start@@Base+0x2244>
   14904:	b	148e8 <_start@@Base+0x2258>
   14908:	mov	r4, r0
   1490c:	cmp	fp, #0
   14910:	beq	14920 <_start@@Base+0x2290>
   14914:	ldr	r3, [r8, #12]
   14918:	cmp	r3, #0
   1491c:	bne	149c0 <_start@@Base+0x2330>
   14920:	ldrd	r0, [sp, #24]
   14924:	ldr	r3, [sp, #20]
   14928:	cmp	r3, #0
   1492c:	beq	149dc <_start@@Base+0x234c>
   14930:	bl	2b340 <flatcc_json_parser_struct_as_root@@Base+0x670>
   14934:	vmov	s15, r0
   14938:	vneg.f32	s14, s15
   1493c:	ldr	r3, [sp, #72]	; 0x48
   14940:	vldr	s15, [r3]
   14944:	vadd.f32	s15, s15, s14
   14948:	vstr	s15, [r3]
   1494c:	add	fp, fp, #1
   14950:	ldr	r3, [sp, #16]
   14954:	cmp	r3, #0
   14958:	beq	14a04 <_start@@Base+0x2374>
   1495c:	ldr	r6, [sp, #12]
   14960:	mov	r5, r4
   14964:	str	sl, [sp, #4]
   14968:	str	r9, [sp]
   1496c:	ldr	r4, [r6]
   14970:	add	r3, sp, #20
   14974:	mov	r2, r7
   14978:	mov	r1, r5
   1497c:	mov	r0, r8
   14980:	blx	r4
   14984:	cmp	r7, r0
   14988:	beq	14a00 <_start@@Base+0x2370>
   1498c:	cmp	r5, r0
   14990:	bne	14908 <_start@@Base+0x2278>
   14994:	mov	r5, r0
   14998:	ldr	r3, [r6, #4]!
   1499c:	cmp	r3, #0
   149a0:	bne	14964 <_start@@Base+0x22d4>
   149a4:	mov	r3, #23
   149a8:	mov	r2, r7
   149ac:	mov	r1, r0
   149b0:	mov	r0, r8
   149b4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   149b8:	mov	r4, r0
   149bc:	b	14a04 <_start@@Base+0x2374>
   149c0:	mov	r3, #14
   149c4:	mov	r2, r7
   149c8:	mov	r1, r0
   149cc:	mov	r0, r8
   149d0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   149d4:	mov	r4, r0
   149d8:	b	14a04 <_start@@Base+0x2374>
   149dc:	bl	2b340 <flatcc_json_parser_struct_as_root@@Base+0x670>
   149e0:	vmov	s14, r0
   149e4:	b	1493c <_start@@Base+0x22ac>
   149e8:	ldr	r3, [r0, #12]
   149ec:	cmp	r3, #0
   149f0:	movne	r4, r7
   149f4:	bne	14a04 <_start@@Base+0x2374>
   149f8:	mov	r4, r7
   149fc:	b	148d4 <_start@@Base+0x2244>
   14a00:	mov	r4, r0
   14a04:	mov	r0, r4
   14a08:	add	sp, sp, #36	; 0x24
   14a0c:	ldrd	r4, [sp]
   14a10:	ldrd	r6, [sp, #8]
   14a14:	ldrd	r8, [sp, #16]
   14a18:	ldrd	sl, [sp, #24]
   14a1c:	add	sp, sp, #32
   14a20:	pop	{pc}		; (ldr pc, [sp], #4)
   14a24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a28:	strd	r6, [sp, #8]
   14a2c:	strd	r8, [sp, #16]
   14a30:	strd	sl, [sp, #24]
   14a34:	str	lr, [sp, #32]
   14a38:	sub	sp, sp, #36	; 0x24
   14a3c:	mov	r8, r0
   14a40:	mov	r7, r2
   14a44:	str	r3, [sp, #12]
   14a48:	mov	r2, #0
   14a4c:	mov	r3, #0
   14a50:	ldr	r0, [sp, #72]	; 0x48
   14a54:	strd	r2, [r0]
   14a58:	cmp	r1, r7
   14a5c:	beq	14bec <_start@@Base+0x255c>
   14a60:	ldrb	r3, [r1]
   14a64:	cmp	r3, #34	; 0x22
   14a68:	addeq	r4, r1, #1
   14a6c:	moveq	r3, #0
   14a70:	streq	r3, [r8, #12]
   14a74:	beq	14abc <_start@@Base+0x242c>
   14a78:	cmp	r3, #46	; 0x2e
   14a7c:	movne	r3, #1
   14a80:	strne	r3, [r8, #12]
   14a84:	movne	r4, r1
   14a88:	beq	14a9c <_start@@Base+0x240c>
   14a8c:	mov	fp, #0
   14a90:	add	sl, sp, #16
   14a94:	add	r9, sp, #24
   14a98:	b	14b60 <_start@@Base+0x24d0>
   14a9c:	mov	r3, #5
   14aa0:	mov	r2, r7
   14aa4:	mov	r0, r8
   14aa8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14aac:	mov	r4, r0
   14ab0:	ldr	r3, [r8, #12]
   14ab4:	cmp	r3, #0
   14ab8:	bne	14aec <_start@@Base+0x245c>
   14abc:	sub	r3, r7, r4
   14ac0:	cmp	r3, #1
   14ac4:	ble	14ad8 <_start@@Base+0x2448>
   14ac8:	ldrb	r3, [r4]
   14acc:	cmp	r3, #32
   14ad0:	bhi	14aec <_start@@Base+0x245c>
   14ad4:	beq	14af8 <_start@@Base+0x2468>
   14ad8:	mov	r2, r7
   14adc:	mov	r1, r4
   14ae0:	mov	r0, r8
   14ae4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   14ae8:	mov	r4, r0
   14aec:	cmp	r7, r4
   14af0:	bne	14a8c <_start@@Base+0x23fc>
   14af4:	b	14c08 <_start@@Base+0x2578>
   14af8:	ldrb	r3, [r4, #1]
   14afc:	cmp	r3, #32
   14b00:	addhi	r4, r4, #1
   14b04:	bls	14ad8 <_start@@Base+0x2448>
   14b08:	b	14aec <_start@@Base+0x245c>
   14b0c:	mov	r4, r0
   14b10:	cmp	fp, #0
   14b14:	beq	14b24 <_start@@Base+0x2494>
   14b18:	ldr	r3, [r8, #12]
   14b1c:	cmp	r3, #0
   14b20:	bne	14bc4 <_start@@Base+0x2534>
   14b24:	ldrd	r0, [sp, #24]
   14b28:	ldr	r3, [sp, #20]
   14b2c:	cmp	r3, #0
   14b30:	beq	14be0 <_start@@Base+0x2550>
   14b34:	bl	2b108 <flatcc_json_parser_struct_as_root@@Base+0x438>
   14b38:	vmov	d7, r0, r1
   14b3c:	vneg.f64	d6, d7
   14b40:	ldr	r3, [sp, #72]	; 0x48
   14b44:	vldr	d7, [r3]
   14b48:	vadd.f64	d7, d7, d6
   14b4c:	vstr	d7, [r3]
   14b50:	add	fp, fp, #1
   14b54:	ldr	r3, [sp, #16]
   14b58:	cmp	r3, #0
   14b5c:	beq	14c08 <_start@@Base+0x2578>
   14b60:	ldr	r6, [sp, #12]
   14b64:	mov	r5, r4
   14b68:	str	sl, [sp, #4]
   14b6c:	str	r9, [sp]
   14b70:	ldr	r4, [r6]
   14b74:	add	r3, sp, #20
   14b78:	mov	r2, r7
   14b7c:	mov	r1, r5
   14b80:	mov	r0, r8
   14b84:	blx	r4
   14b88:	cmp	r7, r0
   14b8c:	beq	14c04 <_start@@Base+0x2574>
   14b90:	cmp	r5, r0
   14b94:	bne	14b0c <_start@@Base+0x247c>
   14b98:	mov	r5, r0
   14b9c:	ldr	r3, [r6, #4]!
   14ba0:	cmp	r3, #0
   14ba4:	bne	14b68 <_start@@Base+0x24d8>
   14ba8:	mov	r3, #23
   14bac:	mov	r2, r7
   14bb0:	mov	r1, r0
   14bb4:	mov	r0, r8
   14bb8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14bbc:	mov	r4, r0
   14bc0:	b	14c08 <_start@@Base+0x2578>
   14bc4:	mov	r3, #14
   14bc8:	mov	r2, r7
   14bcc:	mov	r1, r0
   14bd0:	mov	r0, r8
   14bd4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14bd8:	mov	r4, r0
   14bdc:	b	14c08 <_start@@Base+0x2578>
   14be0:	bl	2b108 <flatcc_json_parser_struct_as_root@@Base+0x438>
   14be4:	vmov	d6, r0, r1
   14be8:	b	14b40 <_start@@Base+0x24b0>
   14bec:	ldr	r3, [r8, #12]
   14bf0:	cmp	r3, #0
   14bf4:	movne	r4, r7
   14bf8:	bne	14c08 <_start@@Base+0x2578>
   14bfc:	mov	r4, r7
   14c00:	b	14ad8 <_start@@Base+0x2448>
   14c04:	mov	r4, r0
   14c08:	mov	r0, r4
   14c0c:	add	sp, sp, #36	; 0x24
   14c10:	ldrd	r4, [sp]
   14c14:	ldrd	r6, [sp, #8]
   14c18:	ldrd	r8, [sp, #16]
   14c1c:	ldrd	sl, [sp, #24]
   14c20:	add	sp, sp, #32
   14c24:	pop	{pc}		; (ldr pc, [sp], #4)
   14c28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c2c:	strd	r6, [sp, #8]
   14c30:	strd	r8, [sp, #16]
   14c34:	strd	sl, [sp, #24]
   14c38:	str	lr, [sp, #32]
   14c3c:	sub	sp, sp, #36	; 0x24
   14c40:	mov	r8, r0
   14c44:	mov	r7, r2
   14c48:	str	r3, [sp, #12]
   14c4c:	mov	r3, #0
   14c50:	ldr	r2, [sp, #72]	; 0x48
   14c54:	strb	r3, [r2]
   14c58:	cmp	r1, r7
   14c5c:	beq	14e14 <_start@@Base+0x2784>
   14c60:	ldrb	r3, [r1]
   14c64:	cmp	r3, #34	; 0x22
   14c68:	addeq	r4, r1, #1
   14c6c:	moveq	r3, #0
   14c70:	streq	r3, [r0, #12]
   14c74:	beq	14cbc <_start@@Base+0x262c>
   14c78:	cmp	r3, #46	; 0x2e
   14c7c:	movne	r3, #1
   14c80:	strne	r3, [r0, #12]
   14c84:	movne	r4, r1
   14c88:	beq	14ca0 <_start@@Base+0x2610>
   14c8c:	mov	fp, #0
   14c90:	str	fp, [sp, #8]
   14c94:	add	sl, sp, #16
   14c98:	add	r9, sp, #24
   14c9c:	b	14d70 <_start@@Base+0x26e0>
   14ca0:	mov	r3, #5
   14ca4:	mov	r2, r7
   14ca8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14cac:	mov	r4, r0
   14cb0:	ldr	r3, [r8, #12]
   14cb4:	cmp	r3, #0
   14cb8:	bne	14cec <_start@@Base+0x265c>
   14cbc:	sub	r3, r7, r4
   14cc0:	cmp	r3, #1
   14cc4:	ble	14cd8 <_start@@Base+0x2648>
   14cc8:	ldrb	r3, [r4]
   14ccc:	cmp	r3, #32
   14cd0:	bhi	14cec <_start@@Base+0x265c>
   14cd4:	beq	14cf8 <_start@@Base+0x2668>
   14cd8:	mov	r2, r7
   14cdc:	mov	r1, r4
   14ce0:	mov	r0, r8
   14ce4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   14ce8:	mov	r4, r0
   14cec:	cmp	r7, r4
   14cf0:	bne	14c8c <_start@@Base+0x25fc>
   14cf4:	b	14e30 <_start@@Base+0x27a0>
   14cf8:	ldrb	r3, [r4, #1]
   14cfc:	cmp	r3, #32
   14d00:	addhi	r4, r4, #1
   14d04:	bls	14cd8 <_start@@Base+0x2648>
   14d08:	b	14cec <_start@@Base+0x265c>
   14d0c:	mov	r4, r0
   14d10:	cmp	fp, #0
   14d14:	beq	14d24 <_start@@Base+0x2694>
   14d18:	ldr	r3, [r8, #12]
   14d1c:	cmp	r3, #0
   14d20:	bne	14dd4 <_start@@Base+0x2744>
   14d24:	ldr	r3, [sp, #20]
   14d28:	cmp	r3, #0
   14d2c:	bne	14df0 <_start@@Base+0x2760>
   14d30:	ldr	r2, [sp, #24]
   14d34:	ldr	r3, [sp, #28]
   14d38:	orrs	r3, r2, r3
   14d3c:	movne	r3, #1
   14d40:	moveq	r3, #0
   14d44:	str	r3, [sp, #8]
   14d48:	ldr	r3, [sp, #72]	; 0x48
   14d4c:	ldrb	r3, [r3]
   14d50:	ldr	r2, [sp, #8]
   14d54:	add	r3, r2, r3
   14d58:	ldr	r2, [sp, #72]	; 0x48
   14d5c:	strb	r3, [r2]
   14d60:	add	fp, fp, #1
   14d64:	ldr	r3, [sp, #16]
   14d68:	cmp	r3, #0
   14d6c:	beq	14e30 <_start@@Base+0x27a0>
   14d70:	ldr	r6, [sp, #12]
   14d74:	mov	r5, r4
   14d78:	str	sl, [sp, #4]
   14d7c:	str	r9, [sp]
   14d80:	ldr	r4, [r6]
   14d84:	add	r3, sp, #20
   14d88:	mov	r2, r7
   14d8c:	mov	r1, r5
   14d90:	mov	r0, r8
   14d94:	blx	r4
   14d98:	cmp	r7, r0
   14d9c:	beq	14e2c <_start@@Base+0x279c>
   14da0:	cmp	r5, r0
   14da4:	bne	14d0c <_start@@Base+0x267c>
   14da8:	mov	r5, r0
   14dac:	ldr	r3, [r6, #4]!
   14db0:	cmp	r3, #0
   14db4:	bne	14d78 <_start@@Base+0x26e8>
   14db8:	mov	r3, #23
   14dbc:	mov	r2, r7
   14dc0:	mov	r1, r0
   14dc4:	mov	r0, r8
   14dc8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14dcc:	mov	r4, r0
   14dd0:	b	14e30 <_start@@Base+0x27a0>
   14dd4:	mov	r3, #14
   14dd8:	mov	r2, r7
   14ddc:	mov	r1, r0
   14de0:	mov	r0, r8
   14de4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14de8:	mov	r4, r0
   14dec:	b	14e30 <_start@@Base+0x27a0>
   14df0:	mov	r3, #8
   14df4:	mov	r2, r7
   14df8:	mov	r1, r4
   14dfc:	mov	r0, r8
   14e00:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14e04:	cmp	r7, r0
   14e08:	bne	14d48 <_start@@Base+0x26b8>
   14e0c:	mov	r4, r0
   14e10:	b	14e30 <_start@@Base+0x27a0>
   14e14:	ldr	r3, [r0, #12]
   14e18:	cmp	r3, #0
   14e1c:	movne	r4, r7
   14e20:	bne	14e30 <_start@@Base+0x27a0>
   14e24:	mov	r4, r7
   14e28:	b	14cd8 <_start@@Base+0x2648>
   14e2c:	mov	r4, r0
   14e30:	mov	r0, r4
   14e34:	add	sp, sp, #36	; 0x24
   14e38:	ldrd	r4, [sp]
   14e3c:	ldrd	r6, [sp, #8]
   14e40:	ldrd	r8, [sp, #16]
   14e44:	ldrd	sl, [sp, #24]
   14e48:	add	sp, sp, #32
   14e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e54:	strd	r6, [sp, #8]
   14e58:	strd	r8, [sp, #16]
   14e5c:	strd	sl, [sp, #24]
   14e60:	str	lr, [sp, #32]
   14e64:	sub	sp, sp, #36	; 0x24
   14e68:	mov	r8, r0
   14e6c:	mov	r7, r2
   14e70:	str	r3, [sp, #8]
   14e74:	mov	r3, #0
   14e78:	ldr	r2, [sp, #72]	; 0x48
   14e7c:	strh	r3, [r2]
   14e80:	cmp	r1, r7
   14e84:	beq	1505c <_start@@Base+0x29cc>
   14e88:	ldrb	r3, [r1]
   14e8c:	cmp	r3, #34	; 0x22
   14e90:	addeq	r4, r1, #1
   14e94:	moveq	r3, #0
   14e98:	streq	r3, [r0, #12]
   14e9c:	beq	14ee0 <_start@@Base+0x2850>
   14ea0:	cmp	r3, #46	; 0x2e
   14ea4:	movne	r3, #1
   14ea8:	strne	r3, [r0, #12]
   14eac:	movne	r4, r1
   14eb0:	beq	14ec4 <_start@@Base+0x2834>
   14eb4:	mov	fp, #0
   14eb8:	str	fp, [sp, #12]
   14ebc:	add	sl, sp, #16
   14ec0:	b	14f9c <_start@@Base+0x290c>
   14ec4:	mov	r3, #5
   14ec8:	mov	r2, r7
   14ecc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14ed0:	mov	r4, r0
   14ed4:	ldr	r3, [r8, #12]
   14ed8:	cmp	r3, #0
   14edc:	bne	14f10 <_start@@Base+0x2880>
   14ee0:	sub	r3, r7, r4
   14ee4:	cmp	r3, #1
   14ee8:	ble	14efc <_start@@Base+0x286c>
   14eec:	ldrb	r3, [r4]
   14ef0:	cmp	r3, #32
   14ef4:	bhi	14f10 <_start@@Base+0x2880>
   14ef8:	beq	14f1c <_start@@Base+0x288c>
   14efc:	mov	r2, r7
   14f00:	mov	r1, r4
   14f04:	mov	r0, r8
   14f08:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   14f0c:	mov	r4, r0
   14f10:	cmp	r7, r4
   14f14:	bne	14eb4 <_start@@Base+0x2824>
   14f18:	b	15078 <_start@@Base+0x29e8>
   14f1c:	ldrb	r3, [r4, #1]
   14f20:	cmp	r3, #32
   14f24:	addhi	r4, r4, #1
   14f28:	bls	14efc <_start@@Base+0x286c>
   14f2c:	b	14f10 <_start@@Base+0x2880>
   14f30:	mov	r4, r0
   14f34:	cmp	fp, #0
   14f38:	beq	14f48 <_start@@Base+0x28b8>
   14f3c:	ldr	r3, [r8, #12]
   14f40:	cmp	r3, #0
   14f44:	bne	15004 <_start@@Base+0x2974>
   14f48:	ldr	r3, [sp, #20]
   14f4c:	cmp	r3, #0
   14f50:	bne	15020 <_start@@Base+0x2990>
   14f54:	ldrd	r2, [sp, #24]
   14f58:	movw	r0, #65535	; 0xffff
   14f5c:	mov	r1, #0
   14f60:	cmp	r3, r1
   14f64:	cmpeq	r2, r0
   14f68:	uxthls	r3, r2
   14f6c:	strls	r3, [sp, #12]
   14f70:	bhi	15044 <_start@@Base+0x29b4>
   14f74:	ldr	r3, [sp, #72]	; 0x48
   14f78:	ldrh	r3, [r3]
   14f7c:	ldr	r2, [sp, #12]
   14f80:	add	r3, r2, r3
   14f84:	ldr	r2, [sp, #72]	; 0x48
   14f88:	strh	r3, [r2]
   14f8c:	add	fp, fp, #1
   14f90:	ldr	r3, [sp, #16]
   14f94:	cmp	r3, #0
   14f98:	beq	15078 <_start@@Base+0x29e8>
   14f9c:	ldr	r6, [sp, #8]
   14fa0:	mov	r5, r4
   14fa4:	add	r9, sp, #24
   14fa8:	str	sl, [sp, #4]
   14fac:	str	r9, [sp]
   14fb0:	ldr	r4, [r6]
   14fb4:	add	r3, sp, #20
   14fb8:	mov	r2, r7
   14fbc:	mov	r1, r5
   14fc0:	mov	r0, r8
   14fc4:	blx	r4
   14fc8:	cmp	r7, r0
   14fcc:	beq	15074 <_start@@Base+0x29e4>
   14fd0:	cmp	r5, r0
   14fd4:	bne	14f30 <_start@@Base+0x28a0>
   14fd8:	mov	r5, r0
   14fdc:	ldr	r3, [r6, #4]!
   14fe0:	cmp	r3, #0
   14fe4:	bne	14fa8 <_start@@Base+0x2918>
   14fe8:	mov	r3, #23
   14fec:	mov	r2, r7
   14ff0:	mov	r1, r0
   14ff4:	mov	r0, r8
   14ff8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   14ffc:	mov	r4, r0
   15000:	b	15078 <_start@@Base+0x29e8>
   15004:	mov	r3, #14
   15008:	mov	r2, r7
   1500c:	mov	r1, r0
   15010:	mov	r0, r8
   15014:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15018:	mov	r4, r0
   1501c:	b	15078 <_start@@Base+0x29e8>
   15020:	mov	r3, #8
   15024:	mov	r2, r7
   15028:	mov	r1, r4
   1502c:	mov	r0, r8
   15030:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15034:	cmp	r7, r0
   15038:	bne	14f74 <_start@@Base+0x28e4>
   1503c:	mov	r4, r0
   15040:	b	15078 <_start@@Base+0x29e8>
   15044:	mov	r3, #7
   15048:	mov	r2, r7
   1504c:	mov	r1, r4
   15050:	mov	r0, r8
   15054:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15058:	b	15034 <_start@@Base+0x29a4>
   1505c:	ldr	r3, [r0, #12]
   15060:	cmp	r3, #0
   15064:	movne	r4, r7
   15068:	bne	15078 <_start@@Base+0x29e8>
   1506c:	mov	r4, r7
   15070:	b	14efc <_start@@Base+0x286c>
   15074:	mov	r4, r0
   15078:	mov	r0, r4
   1507c:	add	sp, sp, #36	; 0x24
   15080:	ldrd	r4, [sp]
   15084:	ldrd	r6, [sp, #8]
   15088:	ldrd	r8, [sp, #16]
   1508c:	ldrd	sl, [sp, #24]
   15090:	add	sp, sp, #32
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1509c:	strd	r6, [sp, #8]
   150a0:	strd	r8, [sp, #16]
   150a4:	strd	sl, [sp, #24]
   150a8:	str	lr, [sp, #32]
   150ac:	sub	sp, sp, #36	; 0x24
   150b0:	mov	r8, r0
   150b4:	mov	r7, r2
   150b8:	str	r3, [sp, #12]
   150bc:	mov	r3, #0
   150c0:	ldr	r2, [sp, #72]	; 0x48
   150c4:	strb	r3, [r2]
   150c8:	cmp	r1, r7
   150cc:	beq	152b4 <_start@@Base+0x2c24>
   150d0:	ldrb	r3, [r1]
   150d4:	cmp	r3, #34	; 0x22
   150d8:	addeq	r4, r1, #1
   150dc:	moveq	r3, #0
   150e0:	streq	r3, [r0, #12]
   150e4:	beq	1512c <_start@@Base+0x2a9c>
   150e8:	cmp	r3, #46	; 0x2e
   150ec:	movne	r3, #1
   150f0:	strne	r3, [r0, #12]
   150f4:	movne	r4, r1
   150f8:	beq	15110 <_start@@Base+0x2a80>
   150fc:	mov	fp, #0
   15100:	str	fp, [sp, #8]
   15104:	add	sl, sp, #16
   15108:	add	r9, sp, #24
   1510c:	b	151e4 <_start@@Base+0x2b54>
   15110:	mov	r3, #5
   15114:	mov	r2, r7
   15118:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1511c:	mov	r4, r0
   15120:	ldr	r3, [r8, #12]
   15124:	cmp	r3, #0
   15128:	bne	1515c <_start@@Base+0x2acc>
   1512c:	sub	r3, r7, r4
   15130:	cmp	r3, #1
   15134:	ble	15148 <_start@@Base+0x2ab8>
   15138:	ldrb	r3, [r4]
   1513c:	cmp	r3, #32
   15140:	bhi	1515c <_start@@Base+0x2acc>
   15144:	beq	15168 <_start@@Base+0x2ad8>
   15148:	mov	r2, r7
   1514c:	mov	r1, r4
   15150:	mov	r0, r8
   15154:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   15158:	mov	r4, r0
   1515c:	cmp	r7, r4
   15160:	bne	150fc <_start@@Base+0x2a6c>
   15164:	b	152d0 <_start@@Base+0x2c40>
   15168:	ldrb	r3, [r4, #1]
   1516c:	cmp	r3, #32
   15170:	addhi	r4, r4, #1
   15174:	bls	15148 <_start@@Base+0x2ab8>
   15178:	b	1515c <_start@@Base+0x2acc>
   1517c:	mov	r4, r0
   15180:	cmp	fp, #0
   15184:	beq	15194 <_start@@Base+0x2b04>
   15188:	ldr	r3, [r8, #12]
   1518c:	cmp	r3, #0
   15190:	bne	15248 <_start@@Base+0x2bb8>
   15194:	ldrd	r2, [sp, #24]
   15198:	ldr	r1, [sp, #20]
   1519c:	cmp	r1, #0
   151a0:	beq	15288 <_start@@Base+0x2bf8>
   151a4:	cmp	r3, #0
   151a8:	cmpeq	r2, #128	; 0x80
   151ac:	rsbls	r2, r2, #0
   151b0:	sxtbls	r3, r2
   151b4:	strls	r3, [sp, #8]
   151b8:	bhi	15264 <_start@@Base+0x2bd4>
   151bc:	ldr	r3, [sp, #72]	; 0x48
   151c0:	ldrb	r3, [r3]
   151c4:	ldr	r2, [sp, #8]
   151c8:	add	r3, r3, r2
   151cc:	ldr	r2, [sp, #72]	; 0x48
   151d0:	strb	r3, [r2]
   151d4:	add	fp, fp, #1
   151d8:	ldr	r3, [sp, #16]
   151dc:	cmp	r3, #0
   151e0:	beq	152d0 <_start@@Base+0x2c40>
   151e4:	ldr	r6, [sp, #12]
   151e8:	mov	r5, r4
   151ec:	str	sl, [sp, #4]
   151f0:	str	r9, [sp]
   151f4:	ldr	r4, [r6]
   151f8:	add	r3, sp, #20
   151fc:	mov	r2, r7
   15200:	mov	r1, r5
   15204:	mov	r0, r8
   15208:	blx	r4
   1520c:	cmp	r7, r0
   15210:	beq	152cc <_start@@Base+0x2c3c>
   15214:	cmp	r5, r0
   15218:	bne	1517c <_start@@Base+0x2aec>
   1521c:	mov	r5, r0
   15220:	ldr	r3, [r6, #4]!
   15224:	cmp	r3, #0
   15228:	bne	151ec <_start@@Base+0x2b5c>
   1522c:	mov	r3, #23
   15230:	mov	r2, r7
   15234:	mov	r1, r0
   15238:	mov	r0, r8
   1523c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15240:	mov	r4, r0
   15244:	b	152d0 <_start@@Base+0x2c40>
   15248:	mov	r3, #14
   1524c:	mov	r2, r7
   15250:	mov	r1, r0
   15254:	mov	r0, r8
   15258:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1525c:	mov	r4, r0
   15260:	b	152d0 <_start@@Base+0x2c40>
   15264:	mov	r3, #8
   15268:	mov	r2, r7
   1526c:	mov	r1, r4
   15270:	mov	r0, r8
   15274:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15278:	cmp	r7, r0
   1527c:	bne	151bc <_start@@Base+0x2b2c>
   15280:	mov	r4, r0
   15284:	b	152d0 <_start@@Base+0x2c40>
   15288:	cmp	r3, #0
   1528c:	cmpeq	r2, #127	; 0x7f
   15290:	sxtbls	r3, r2
   15294:	strls	r3, [sp, #8]
   15298:	bls	151bc <_start@@Base+0x2b2c>
   1529c:	mov	r3, #7
   152a0:	mov	r2, r7
   152a4:	mov	r1, r4
   152a8:	mov	r0, r8
   152ac:	bl	27930 <flatcc_json_parser_set_error@@Base>
   152b0:	b	15278 <_start@@Base+0x2be8>
   152b4:	ldr	r3, [r0, #12]
   152b8:	cmp	r3, #0
   152bc:	movne	r4, r7
   152c0:	bne	152d0 <_start@@Base+0x2c40>
   152c4:	mov	r4, r7
   152c8:	b	15148 <_start@@Base+0x2ab8>
   152cc:	mov	r4, r0
   152d0:	mov	r0, r4
   152d4:	add	sp, sp, #36	; 0x24
   152d8:	ldrd	r4, [sp]
   152dc:	ldrd	r6, [sp, #8]
   152e0:	ldrd	r8, [sp, #16]
   152e4:	ldrd	sl, [sp, #24]
   152e8:	add	sp, sp, #32
   152ec:	pop	{pc}		; (ldr pc, [sp], #4)
   152f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152f4:	strd	r6, [sp, #8]
   152f8:	strd	r8, [sp, #16]
   152fc:	strd	sl, [sp, #24]
   15300:	str	lr, [sp, #32]
   15304:	sub	sp, sp, #36	; 0x24
   15308:	mov	r8, r0
   1530c:	mov	r7, r2
   15310:	str	r3, [sp, #12]
   15314:	mov	r3, #0
   15318:	ldr	r2, [sp, #72]	; 0x48
   1531c:	str	r3, [r2]
   15320:	cmp	r1, r7
   15324:	beq	1550c <_start@@Base+0x2e7c>
   15328:	ldrb	r3, [r1]
   1532c:	cmp	r3, #34	; 0x22
   15330:	addeq	r4, r1, #1
   15334:	moveq	r3, #0
   15338:	streq	r3, [r0, #12]
   1533c:	beq	1537c <_start@@Base+0x2cec>
   15340:	cmp	r3, #46	; 0x2e
   15344:	movne	r3, #1
   15348:	strne	r3, [r0, #12]
   1534c:	movne	r4, r1
   15350:	beq	15360 <_start@@Base+0x2cd0>
   15354:	mov	fp, #0
   15358:	str	fp, [sp, #8]
   1535c:	b	15430 <_start@@Base+0x2da0>
   15360:	mov	r3, #5
   15364:	mov	r2, r7
   15368:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1536c:	mov	r4, r0
   15370:	ldr	r3, [r8, #12]
   15374:	cmp	r3, #0
   15378:	bne	153ac <_start@@Base+0x2d1c>
   1537c:	sub	r3, r7, r4
   15380:	cmp	r3, #1
   15384:	ble	15398 <_start@@Base+0x2d08>
   15388:	ldrb	r3, [r4]
   1538c:	cmp	r3, #32
   15390:	bhi	153ac <_start@@Base+0x2d1c>
   15394:	beq	153b8 <_start@@Base+0x2d28>
   15398:	mov	r2, r7
   1539c:	mov	r1, r4
   153a0:	mov	r0, r8
   153a4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   153a8:	mov	r4, r0
   153ac:	cmp	r7, r4
   153b0:	bne	15354 <_start@@Base+0x2cc4>
   153b4:	b	15528 <_start@@Base+0x2e98>
   153b8:	ldrb	r3, [r4, #1]
   153bc:	cmp	r3, #32
   153c0:	addhi	r4, r4, #1
   153c4:	bls	15398 <_start@@Base+0x2d08>
   153c8:	b	153ac <_start@@Base+0x2d1c>
   153cc:	mov	r4, r0
   153d0:	cmp	fp, #0
   153d4:	beq	153e4 <_start@@Base+0x2d54>
   153d8:	ldr	r3, [r8, #12]
   153dc:	cmp	r3, #0
   153e0:	bne	1549c <_start@@Base+0x2e0c>
   153e4:	ldrd	r2, [sp, #24]
   153e8:	ldr	r1, [sp, #20]
   153ec:	cmp	r1, #0
   153f0:	beq	154dc <_start@@Base+0x2e4c>
   153f4:	cmp	r3, #0
   153f8:	cmpeq	r2, #-2147483648	; 0x80000000
   153fc:	rsbls	r3, r2, #0
   15400:	strls	r3, [sp, #8]
   15404:	bhi	154b8 <_start@@Base+0x2e28>
   15408:	ldr	r3, [sp, #72]	; 0x48
   1540c:	ldr	r3, [r3]
   15410:	ldr	r2, [sp, #8]
   15414:	add	r3, r3, r2
   15418:	ldr	r2, [sp, #72]	; 0x48
   1541c:	str	r3, [r2]
   15420:	add	fp, fp, #1
   15424:	ldr	r3, [sp, #16]
   15428:	cmp	r3, #0
   1542c:	beq	15528 <_start@@Base+0x2e98>
   15430:	ldr	r6, [sp, #12]
   15434:	mov	r5, r4
   15438:	add	sl, sp, #16
   1543c:	add	r9, sp, #24
   15440:	str	sl, [sp, #4]
   15444:	str	r9, [sp]
   15448:	ldr	r4, [r6]
   1544c:	add	r3, sp, #20
   15450:	mov	r2, r7
   15454:	mov	r1, r5
   15458:	mov	r0, r8
   1545c:	blx	r4
   15460:	cmp	r7, r0
   15464:	beq	15524 <_start@@Base+0x2e94>
   15468:	cmp	r5, r0
   1546c:	bne	153cc <_start@@Base+0x2d3c>
   15470:	mov	r5, r0
   15474:	ldr	r3, [r6, #4]!
   15478:	cmp	r3, #0
   1547c:	bne	15440 <_start@@Base+0x2db0>
   15480:	mov	r3, #23
   15484:	mov	r2, r7
   15488:	mov	r1, r0
   1548c:	mov	r0, r8
   15490:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15494:	mov	r4, r0
   15498:	b	15528 <_start@@Base+0x2e98>
   1549c:	mov	r3, #14
   154a0:	mov	r2, r7
   154a4:	mov	r1, r0
   154a8:	mov	r0, r8
   154ac:	bl	27930 <flatcc_json_parser_set_error@@Base>
   154b0:	mov	r4, r0
   154b4:	b	15528 <_start@@Base+0x2e98>
   154b8:	mov	r3, #8
   154bc:	mov	r2, r7
   154c0:	mov	r1, r4
   154c4:	mov	r0, r8
   154c8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   154cc:	cmp	r7, r0
   154d0:	bne	15408 <_start@@Base+0x2d78>
   154d4:	mov	r4, r0
   154d8:	b	15528 <_start@@Base+0x2e98>
   154dc:	mvn	r0, #-2147483648	; 0x80000000
   154e0:	mov	r1, #0
   154e4:	cmp	r3, r1
   154e8:	cmpeq	r2, r0
   154ec:	strls	r2, [sp, #8]
   154f0:	bls	15408 <_start@@Base+0x2d78>
   154f4:	mov	r3, #7
   154f8:	mov	r2, r7
   154fc:	mov	r1, r4
   15500:	mov	r0, r8
   15504:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15508:	b	154cc <_start@@Base+0x2e3c>
   1550c:	ldr	r3, [r0, #12]
   15510:	cmp	r3, #0
   15514:	movne	r4, r7
   15518:	bne	15528 <_start@@Base+0x2e98>
   1551c:	mov	r4, r7
   15520:	b	15398 <_start@@Base+0x2d08>
   15524:	mov	r4, r0
   15528:	mov	r0, r4
   1552c:	add	sp, sp, #36	; 0x24
   15530:	ldrd	r4, [sp]
   15534:	ldrd	r6, [sp, #8]
   15538:	ldrd	r8, [sp, #16]
   1553c:	ldrd	sl, [sp, #24]
   15540:	add	sp, sp, #32
   15544:	pop	{pc}		; (ldr pc, [sp], #4)
   15548:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1554c:	strd	r6, [sp, #8]
   15550:	strd	r8, [sp, #16]
   15554:	strd	sl, [sp, #24]
   15558:	str	lr, [sp, #32]
   1555c:	sub	sp, sp, #36	; 0x24
   15560:	mov	r8, r0
   15564:	mov	r7, r2
   15568:	str	r3, [sp, #8]
   1556c:	mov	r3, #0
   15570:	ldr	r2, [sp, #72]	; 0x48
   15574:	str	r3, [r2]
   15578:	cmp	r1, r7
   1557c:	beq	15750 <_start@@Base+0x30c0>
   15580:	ldrb	r3, [r1]
   15584:	cmp	r3, #34	; 0x22
   15588:	addeq	r4, r1, #1
   1558c:	moveq	r3, #0
   15590:	streq	r3, [r0, #12]
   15594:	beq	155d8 <_start@@Base+0x2f48>
   15598:	cmp	r3, #46	; 0x2e
   1559c:	movne	r3, #1
   155a0:	strne	r3, [r0, #12]
   155a4:	movne	r4, r1
   155a8:	beq	155bc <_start@@Base+0x2f2c>
   155ac:	mov	fp, #0
   155b0:	str	fp, [sp, #12]
   155b4:	add	sl, sp, #16
   155b8:	b	15690 <_start@@Base+0x3000>
   155bc:	mov	r3, #5
   155c0:	mov	r2, r7
   155c4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   155c8:	mov	r4, r0
   155cc:	ldr	r3, [r8, #12]
   155d0:	cmp	r3, #0
   155d4:	bne	15608 <_start@@Base+0x2f78>
   155d8:	sub	r3, r7, r4
   155dc:	cmp	r3, #1
   155e0:	ble	155f4 <_start@@Base+0x2f64>
   155e4:	ldrb	r3, [r4]
   155e8:	cmp	r3, #32
   155ec:	bhi	15608 <_start@@Base+0x2f78>
   155f0:	beq	15614 <_start@@Base+0x2f84>
   155f4:	mov	r2, r7
   155f8:	mov	r1, r4
   155fc:	mov	r0, r8
   15600:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   15604:	mov	r4, r0
   15608:	cmp	r7, r4
   1560c:	bne	155ac <_start@@Base+0x2f1c>
   15610:	b	1576c <_start@@Base+0x30dc>
   15614:	ldrb	r3, [r4, #1]
   15618:	cmp	r3, #32
   1561c:	addhi	r4, r4, #1
   15620:	bls	155f4 <_start@@Base+0x2f64>
   15624:	b	15608 <_start@@Base+0x2f78>
   15628:	mov	r4, r0
   1562c:	cmp	fp, #0
   15630:	beq	15640 <_start@@Base+0x2fb0>
   15634:	ldr	r3, [r8, #12]
   15638:	cmp	r3, #0
   1563c:	bne	156f8 <_start@@Base+0x3068>
   15640:	ldr	r3, [sp, #20]
   15644:	cmp	r3, #0
   15648:	bne	15714 <_start@@Base+0x3084>
   1564c:	ldrd	r2, [sp, #24]
   15650:	mvn	r0, #0
   15654:	mov	r1, #0
   15658:	cmp	r3, r1
   1565c:	cmpeq	r2, r0
   15660:	strls	r2, [sp, #12]
   15664:	bhi	15738 <_start@@Base+0x30a8>
   15668:	ldr	r3, [sp, #72]	; 0x48
   1566c:	ldr	r3, [r3]
   15670:	ldr	r2, [sp, #12]
   15674:	add	r3, r3, r2
   15678:	ldr	r2, [sp, #72]	; 0x48
   1567c:	str	r3, [r2]
   15680:	add	fp, fp, #1
   15684:	ldr	r3, [sp, #16]
   15688:	cmp	r3, #0
   1568c:	beq	1576c <_start@@Base+0x30dc>
   15690:	ldr	r6, [sp, #8]
   15694:	mov	r5, r4
   15698:	add	r9, sp, #24
   1569c:	str	sl, [sp, #4]
   156a0:	str	r9, [sp]
   156a4:	ldr	r4, [r6]
   156a8:	add	r3, sp, #20
   156ac:	mov	r2, r7
   156b0:	mov	r1, r5
   156b4:	mov	r0, r8
   156b8:	blx	r4
   156bc:	cmp	r7, r0
   156c0:	beq	15768 <_start@@Base+0x30d8>
   156c4:	cmp	r5, r0
   156c8:	bne	15628 <_start@@Base+0x2f98>
   156cc:	mov	r5, r0
   156d0:	ldr	r3, [r6, #4]!
   156d4:	cmp	r3, #0
   156d8:	bne	1569c <_start@@Base+0x300c>
   156dc:	mov	r3, #23
   156e0:	mov	r2, r7
   156e4:	mov	r1, r0
   156e8:	mov	r0, r8
   156ec:	bl	27930 <flatcc_json_parser_set_error@@Base>
   156f0:	mov	r4, r0
   156f4:	b	1576c <_start@@Base+0x30dc>
   156f8:	mov	r3, #14
   156fc:	mov	r2, r7
   15700:	mov	r1, r0
   15704:	mov	r0, r8
   15708:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1570c:	mov	r4, r0
   15710:	b	1576c <_start@@Base+0x30dc>
   15714:	mov	r3, #8
   15718:	mov	r2, r7
   1571c:	mov	r1, r4
   15720:	mov	r0, r8
   15724:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15728:	cmp	r7, r0
   1572c:	bne	15668 <_start@@Base+0x2fd8>
   15730:	mov	r4, r0
   15734:	b	1576c <_start@@Base+0x30dc>
   15738:	mov	r3, #7
   1573c:	mov	r2, r7
   15740:	mov	r1, r4
   15744:	mov	r0, r8
   15748:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1574c:	b	15728 <_start@@Base+0x3098>
   15750:	ldr	r3, [r0, #12]
   15754:	cmp	r3, #0
   15758:	movne	r4, r7
   1575c:	bne	1576c <_start@@Base+0x30dc>
   15760:	mov	r4, r7
   15764:	b	155f4 <_start@@Base+0x2f64>
   15768:	mov	r4, r0
   1576c:	mov	r0, r4
   15770:	add	sp, sp, #36	; 0x24
   15774:	ldrd	r4, [sp]
   15778:	ldrd	r6, [sp, #8]
   1577c:	ldrd	r8, [sp, #16]
   15780:	ldrd	sl, [sp, #24]
   15784:	add	sp, sp, #32
   15788:	pop	{pc}		; (ldr pc, [sp], #4)
   1578c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15790:	strd	r6, [sp, #8]
   15794:	strd	r8, [sp, #16]
   15798:	strd	sl, [sp, #24]
   1579c:	str	lr, [sp, #32]
   157a0:	sub	sp, sp, #36	; 0x24
   157a4:	mov	r8, r0
   157a8:	mov	r7, r2
   157ac:	str	r3, [sp, #12]
   157b0:	mov	r3, #0
   157b4:	ldr	r2, [sp, #72]	; 0x48
   157b8:	strh	r3, [r2]
   157bc:	cmp	r1, r7
   157c0:	beq	159b0 <_start@@Base+0x3320>
   157c4:	ldrb	r3, [r1]
   157c8:	cmp	r3, #34	; 0x22
   157cc:	addeq	r4, r1, #1
   157d0:	moveq	r3, #0
   157d4:	streq	r3, [r0, #12]
   157d8:	beq	1581c <_start@@Base+0x318c>
   157dc:	cmp	r3, #46	; 0x2e
   157e0:	movne	r3, #1
   157e4:	strne	r3, [r0, #12]
   157e8:	movne	r4, r1
   157ec:	beq	15800 <_start@@Base+0x3170>
   157f0:	mov	fp, #0
   157f4:	str	fp, [sp, #8]
   157f8:	add	sl, sp, #16
   157fc:	b	158d4 <_start@@Base+0x3244>
   15800:	mov	r3, #5
   15804:	mov	r2, r7
   15808:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1580c:	mov	r4, r0
   15810:	ldr	r3, [r8, #12]
   15814:	cmp	r3, #0
   15818:	bne	1584c <_start@@Base+0x31bc>
   1581c:	sub	r3, r7, r4
   15820:	cmp	r3, #1
   15824:	ble	15838 <_start@@Base+0x31a8>
   15828:	ldrb	r3, [r4]
   1582c:	cmp	r3, #32
   15830:	bhi	1584c <_start@@Base+0x31bc>
   15834:	beq	15858 <_start@@Base+0x31c8>
   15838:	mov	r2, r7
   1583c:	mov	r1, r4
   15840:	mov	r0, r8
   15844:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   15848:	mov	r4, r0
   1584c:	cmp	r7, r4
   15850:	bne	157f0 <_start@@Base+0x3160>
   15854:	b	159cc <_start@@Base+0x333c>
   15858:	ldrb	r3, [r4, #1]
   1585c:	cmp	r3, #32
   15860:	addhi	r4, r4, #1
   15864:	bls	15838 <_start@@Base+0x31a8>
   15868:	b	1584c <_start@@Base+0x31bc>
   1586c:	mov	r4, r0
   15870:	cmp	fp, #0
   15874:	beq	15884 <_start@@Base+0x31f4>
   15878:	ldr	r3, [r8, #12]
   1587c:	cmp	r3, #0
   15880:	bne	1593c <_start@@Base+0x32ac>
   15884:	ldrd	r2, [sp, #24]
   15888:	ldr	r1, [sp, #20]
   1588c:	cmp	r1, #0
   15890:	beq	1597c <_start@@Base+0x32ec>
   15894:	cmp	r3, #0
   15898:	cmpeq	r2, #32768	; 0x8000
   1589c:	rsbls	r2, r2, #0
   158a0:	sxthls	r3, r2
   158a4:	strls	r3, [sp, #8]
   158a8:	bhi	15958 <_start@@Base+0x32c8>
   158ac:	ldr	r3, [sp, #72]	; 0x48
   158b0:	ldrh	r3, [r3]
   158b4:	ldr	r2, [sp, #8]
   158b8:	add	r3, r3, r2
   158bc:	ldr	r2, [sp, #72]	; 0x48
   158c0:	strh	r3, [r2]
   158c4:	add	fp, fp, #1
   158c8:	ldr	r3, [sp, #16]
   158cc:	cmp	r3, #0
   158d0:	beq	159cc <_start@@Base+0x333c>
   158d4:	ldr	r6, [sp, #12]
   158d8:	mov	r5, r4
   158dc:	add	r9, sp, #24
   158e0:	str	sl, [sp, #4]
   158e4:	str	r9, [sp]
   158e8:	ldr	r4, [r6]
   158ec:	add	r3, sp, #20
   158f0:	mov	r2, r7
   158f4:	mov	r1, r5
   158f8:	mov	r0, r8
   158fc:	blx	r4
   15900:	cmp	r7, r0
   15904:	beq	159c8 <_start@@Base+0x3338>
   15908:	cmp	r5, r0
   1590c:	bne	1586c <_start@@Base+0x31dc>
   15910:	mov	r5, r0
   15914:	ldr	r3, [r6, #4]!
   15918:	cmp	r3, #0
   1591c:	bne	158e0 <_start@@Base+0x3250>
   15920:	mov	r3, #23
   15924:	mov	r2, r7
   15928:	mov	r1, r0
   1592c:	mov	r0, r8
   15930:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15934:	mov	r4, r0
   15938:	b	159cc <_start@@Base+0x333c>
   1593c:	mov	r3, #14
   15940:	mov	r2, r7
   15944:	mov	r1, r0
   15948:	mov	r0, r8
   1594c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15950:	mov	r4, r0
   15954:	b	159cc <_start@@Base+0x333c>
   15958:	mov	r3, #8
   1595c:	mov	r2, r7
   15960:	mov	r1, r4
   15964:	mov	r0, r8
   15968:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1596c:	cmp	r7, r0
   15970:	bne	158ac <_start@@Base+0x321c>
   15974:	mov	r4, r0
   15978:	b	159cc <_start@@Base+0x333c>
   1597c:	movw	r0, #32767	; 0x7fff
   15980:	mov	r1, #0
   15984:	cmp	r3, r1
   15988:	cmpeq	r2, r0
   1598c:	sxthls	r3, r2
   15990:	strls	r3, [sp, #8]
   15994:	bls	158ac <_start@@Base+0x321c>
   15998:	mov	r3, #7
   1599c:	mov	r2, r7
   159a0:	mov	r1, r4
   159a4:	mov	r0, r8
   159a8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   159ac:	b	1596c <_start@@Base+0x32dc>
   159b0:	ldr	r3, [r0, #12]
   159b4:	cmp	r3, #0
   159b8:	movne	r4, r7
   159bc:	bne	159cc <_start@@Base+0x333c>
   159c0:	mov	r4, r7
   159c4:	b	15838 <_start@@Base+0x31a8>
   159c8:	mov	r4, r0
   159cc:	mov	r0, r4
   159d0:	add	sp, sp, #36	; 0x24
   159d4:	ldrd	r4, [sp]
   159d8:	ldrd	r6, [sp, #8]
   159dc:	ldrd	r8, [sp, #16]
   159e0:	ldrd	sl, [sp, #24]
   159e4:	add	sp, sp, #32
   159e8:	pop	{pc}		; (ldr pc, [sp], #4)
   159ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   159f0:	strd	r6, [sp, #8]
   159f4:	strd	r8, [sp, #16]
   159f8:	strd	sl, [sp, #24]
   159fc:	str	lr, [sp, #32]
   15a00:	sub	sp, sp, #36	; 0x24
   15a04:	mov	r8, r0
   15a08:	mov	r7, r2
   15a0c:	str	r3, [sp, #8]
   15a10:	mov	r3, #0
   15a14:	ldr	r2, [sp, #72]	; 0x48
   15a18:	strb	r3, [r2]
   15a1c:	cmp	r1, r7
   15a20:	beq	15bf0 <_start@@Base+0x3560>
   15a24:	ldrb	r3, [r1]
   15a28:	cmp	r3, #34	; 0x22
   15a2c:	addeq	r4, r1, #1
   15a30:	moveq	r3, #0
   15a34:	streq	r3, [r0, #12]
   15a38:	beq	15a80 <_start@@Base+0x33f0>
   15a3c:	cmp	r3, #46	; 0x2e
   15a40:	movne	r3, #1
   15a44:	strne	r3, [r0, #12]
   15a48:	movne	r4, r1
   15a4c:	beq	15a64 <_start@@Base+0x33d4>
   15a50:	mov	fp, #0
   15a54:	str	fp, [sp, #12]
   15a58:	add	sl, sp, #16
   15a5c:	add	r9, sp, #24
   15a60:	b	15b34 <_start@@Base+0x34a4>
   15a64:	mov	r3, #5
   15a68:	mov	r2, r7
   15a6c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15a70:	mov	r4, r0
   15a74:	ldr	r3, [r8, #12]
   15a78:	cmp	r3, #0
   15a7c:	bne	15ab0 <_start@@Base+0x3420>
   15a80:	sub	r3, r7, r4
   15a84:	cmp	r3, #1
   15a88:	ble	15a9c <_start@@Base+0x340c>
   15a8c:	ldrb	r3, [r4]
   15a90:	cmp	r3, #32
   15a94:	bhi	15ab0 <_start@@Base+0x3420>
   15a98:	beq	15abc <_start@@Base+0x342c>
   15a9c:	mov	r2, r7
   15aa0:	mov	r1, r4
   15aa4:	mov	r0, r8
   15aa8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   15aac:	mov	r4, r0
   15ab0:	cmp	r7, r4
   15ab4:	bne	15a50 <_start@@Base+0x33c0>
   15ab8:	b	15c0c <_start@@Base+0x357c>
   15abc:	ldrb	r3, [r4, #1]
   15ac0:	cmp	r3, #32
   15ac4:	addhi	r4, r4, #1
   15ac8:	bls	15a9c <_start@@Base+0x340c>
   15acc:	b	15ab0 <_start@@Base+0x3420>
   15ad0:	mov	r4, r0
   15ad4:	cmp	fp, #0
   15ad8:	beq	15ae8 <_start@@Base+0x3458>
   15adc:	ldr	r3, [r8, #12]
   15ae0:	cmp	r3, #0
   15ae4:	bne	15b98 <_start@@Base+0x3508>
   15ae8:	ldr	r3, [sp, #20]
   15aec:	cmp	r3, #0
   15af0:	bne	15bb4 <_start@@Base+0x3524>
   15af4:	ldrd	r2, [sp, #24]
   15af8:	cmp	r3, #0
   15afc:	cmpeq	r2, #255	; 0xff
   15b00:	uxtbls	r3, r2
   15b04:	strls	r3, [sp, #12]
   15b08:	bhi	15bd8 <_start@@Base+0x3548>
   15b0c:	ldr	r3, [sp, #72]	; 0x48
   15b10:	ldrb	r3, [r3]
   15b14:	ldr	r2, [sp, #12]
   15b18:	add	r3, r2, r3
   15b1c:	ldr	r2, [sp, #72]	; 0x48
   15b20:	strb	r3, [r2]
   15b24:	add	fp, fp, #1
   15b28:	ldr	r3, [sp, #16]
   15b2c:	cmp	r3, #0
   15b30:	beq	15c0c <_start@@Base+0x357c>
   15b34:	ldr	r6, [sp, #8]
   15b38:	mov	r5, r4
   15b3c:	str	sl, [sp, #4]
   15b40:	str	r9, [sp]
   15b44:	ldr	r4, [r6]
   15b48:	add	r3, sp, #20
   15b4c:	mov	r2, r7
   15b50:	mov	r1, r5
   15b54:	mov	r0, r8
   15b58:	blx	r4
   15b5c:	cmp	r7, r0
   15b60:	beq	15c08 <_start@@Base+0x3578>
   15b64:	cmp	r5, r0
   15b68:	bne	15ad0 <_start@@Base+0x3440>
   15b6c:	mov	r5, r0
   15b70:	ldr	r3, [r6, #4]!
   15b74:	cmp	r3, #0
   15b78:	bne	15b3c <_start@@Base+0x34ac>
   15b7c:	mov	r3, #23
   15b80:	mov	r2, r7
   15b84:	mov	r1, r0
   15b88:	mov	r0, r8
   15b8c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15b90:	mov	r4, r0
   15b94:	b	15c0c <_start@@Base+0x357c>
   15b98:	mov	r3, #14
   15b9c:	mov	r2, r7
   15ba0:	mov	r1, r0
   15ba4:	mov	r0, r8
   15ba8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15bac:	mov	r4, r0
   15bb0:	b	15c0c <_start@@Base+0x357c>
   15bb4:	mov	r3, #8
   15bb8:	mov	r2, r7
   15bbc:	mov	r1, r4
   15bc0:	mov	r0, r8
   15bc4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15bc8:	cmp	r7, r0
   15bcc:	bne	15b0c <_start@@Base+0x347c>
   15bd0:	mov	r4, r0
   15bd4:	b	15c0c <_start@@Base+0x357c>
   15bd8:	mov	r3, #7
   15bdc:	mov	r2, r7
   15be0:	mov	r1, r4
   15be4:	mov	r0, r8
   15be8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15bec:	b	15bc8 <_start@@Base+0x3538>
   15bf0:	ldr	r3, [r0, #12]
   15bf4:	cmp	r3, #0
   15bf8:	movne	r4, r7
   15bfc:	bne	15c0c <_start@@Base+0x357c>
   15c00:	mov	r4, r7
   15c04:	b	15a9c <_start@@Base+0x340c>
   15c08:	mov	r4, r0
   15c0c:	mov	r0, r4
   15c10:	add	sp, sp, #36	; 0x24
   15c14:	ldrd	r4, [sp]
   15c18:	ldrd	r6, [sp, #8]
   15c1c:	ldrd	r8, [sp, #16]
   15c20:	ldrd	sl, [sp, #24]
   15c24:	add	sp, sp, #32
   15c28:	pop	{pc}		; (ldr pc, [sp], #4)
   15c2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c30:	strd	r6, [sp, #8]
   15c34:	strd	r8, [sp, #16]
   15c38:	strd	sl, [sp, #24]
   15c3c:	str	lr, [sp, #32]
   15c40:	sub	sp, sp, #44	; 0x2c
   15c44:	mov	r8, r0
   15c48:	mov	r7, r2
   15c4c:	str	r3, [sp, #20]
   15c50:	ldr	fp, [sp, #80]	; 0x50
   15c54:	mov	r2, #0
   15c58:	mov	r3, #0
   15c5c:	strd	r2, [fp]
   15c60:	cmp	r1, r7
   15c64:	beq	15e30 <_start@@Base+0x37a0>
   15c68:	ldrb	r3, [r1]
   15c6c:	cmp	r3, #34	; 0x22
   15c70:	addeq	r4, r1, #1
   15c74:	moveq	r3, #0
   15c78:	streq	r3, [r0, #12]
   15c7c:	beq	15ccc <_start@@Base+0x363c>
   15c80:	cmp	r3, #46	; 0x2e
   15c84:	movne	r3, #1
   15c88:	strne	r3, [r0, #12]
   15c8c:	movne	r4, r1
   15c90:	beq	15cb0 <_start@@Base+0x3620>
   15c94:	mov	r3, #0
   15c98:	str	r3, [sp, #8]
   15c9c:	str	r3, [sp, #12]
   15ca0:	str	r3, [sp, #16]
   15ca4:	add	sl, sp, #24
   15ca8:	add	r9, sp, #32
   15cac:	b	15d8c <_start@@Base+0x36fc>
   15cb0:	mov	r3, #5
   15cb4:	mov	r2, r7
   15cb8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15cbc:	mov	r4, r0
   15cc0:	ldr	r3, [r8, #12]
   15cc4:	cmp	r3, #0
   15cc8:	bne	15cfc <_start@@Base+0x366c>
   15ccc:	sub	r3, r7, r4
   15cd0:	cmp	r3, #1
   15cd4:	ble	15ce8 <_start@@Base+0x3658>
   15cd8:	ldrb	r3, [r4]
   15cdc:	cmp	r3, #32
   15ce0:	bhi	15cfc <_start@@Base+0x366c>
   15ce4:	beq	15d08 <_start@@Base+0x3678>
   15ce8:	mov	r2, r7
   15cec:	mov	r1, r4
   15cf0:	mov	r0, r8
   15cf4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   15cf8:	mov	r4, r0
   15cfc:	cmp	r7, r4
   15d00:	bne	15c94 <_start@@Base+0x3604>
   15d04:	b	15e4c <_start@@Base+0x37bc>
   15d08:	ldrb	r3, [r4, #1]
   15d0c:	cmp	r3, #32
   15d10:	addhi	r4, r4, #1
   15d14:	bls	15ce8 <_start@@Base+0x3658>
   15d18:	b	15cfc <_start@@Base+0x366c>
   15d1c:	mov	r4, r0
   15d20:	ldr	r3, [sp, #8]
   15d24:	cmp	r3, #0
   15d28:	beq	15d38 <_start@@Base+0x36a8>
   15d2c:	ldr	r3, [r8, #12]
   15d30:	cmp	r3, #0
   15d34:	bne	15df0 <_start@@Base+0x3760>
   15d38:	ldr	r3, [sp, #28]
   15d3c:	cmp	r3, #0
   15d40:	bne	15e0c <_start@@Base+0x377c>
   15d44:	ldr	r3, [sp, #32]
   15d48:	str	r3, [sp, #12]
   15d4c:	ldr	r3, [sp, #36]	; 0x24
   15d50:	str	r3, [sp, #16]
   15d54:	ldr	r3, [fp]
   15d58:	ldr	r2, [fp, #4]
   15d5c:	ldr	r1, [sp, #12]
   15d60:	adds	r3, r3, r1
   15d64:	ldr	r1, [sp, #16]
   15d68:	adc	r2, r2, r1
   15d6c:	str	r3, [fp]
   15d70:	str	r2, [fp, #4]
   15d74:	ldr	r3, [sp, #8]
   15d78:	add	r3, r3, #1
   15d7c:	str	r3, [sp, #8]
   15d80:	ldr	r3, [sp, #24]
   15d84:	cmp	r3, #0
   15d88:	beq	15e4c <_start@@Base+0x37bc>
   15d8c:	ldr	r6, [sp, #20]
   15d90:	mov	r5, r4
   15d94:	str	sl, [sp, #4]
   15d98:	str	r9, [sp]
   15d9c:	ldr	r4, [r6]
   15da0:	add	r3, sp, #28
   15da4:	mov	r2, r7
   15da8:	mov	r1, r5
   15dac:	mov	r0, r8
   15db0:	blx	r4
   15db4:	cmp	r7, r0
   15db8:	beq	15e48 <_start@@Base+0x37b8>
   15dbc:	cmp	r5, r0
   15dc0:	bne	15d1c <_start@@Base+0x368c>
   15dc4:	mov	r5, r0
   15dc8:	ldr	r3, [r6, #4]!
   15dcc:	cmp	r3, #0
   15dd0:	bne	15d94 <_start@@Base+0x3704>
   15dd4:	mov	r3, #23
   15dd8:	mov	r2, r7
   15ddc:	mov	r1, r0
   15de0:	mov	r0, r8
   15de4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15de8:	mov	r4, r0
   15dec:	b	15e4c <_start@@Base+0x37bc>
   15df0:	mov	r3, #14
   15df4:	mov	r2, r7
   15df8:	mov	r1, r0
   15dfc:	mov	r0, r8
   15e00:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15e04:	mov	r4, r0
   15e08:	b	15e4c <_start@@Base+0x37bc>
   15e0c:	mov	r3, #8
   15e10:	mov	r2, r7
   15e14:	mov	r1, r4
   15e18:	mov	r0, r8
   15e1c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15e20:	cmp	r7, r0
   15e24:	bne	15d54 <_start@@Base+0x36c4>
   15e28:	mov	r4, r0
   15e2c:	b	15e4c <_start@@Base+0x37bc>
   15e30:	ldr	r3, [r0, #12]
   15e34:	cmp	r3, #0
   15e38:	movne	r4, r7
   15e3c:	bne	15e4c <_start@@Base+0x37bc>
   15e40:	mov	r4, r7
   15e44:	b	15ce8 <_start@@Base+0x3658>
   15e48:	mov	r4, r0
   15e4c:	mov	r0, r4
   15e50:	add	sp, sp, #44	; 0x2c
   15e54:	ldrd	r4, [sp]
   15e58:	ldrd	r6, [sp, #8]
   15e5c:	ldrd	r8, [sp, #16]
   15e60:	ldrd	sl, [sp, #24]
   15e64:	add	sp, sp, #32
   15e68:	pop	{pc}		; (ldr pc, [sp], #4)
   15e6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e70:	strd	r6, [sp, #8]
   15e74:	strd	r8, [sp, #16]
   15e78:	strd	sl, [sp, #24]
   15e7c:	str	lr, [sp, #32]
   15e80:	sub	sp, sp, #44	; 0x2c
   15e84:	mov	r8, r0
   15e88:	mov	r7, r2
   15e8c:	str	r3, [sp, #20]
   15e90:	ldr	fp, [sp, #80]	; 0x50
   15e94:	mov	r2, #0
   15e98:	mov	r3, #0
   15e9c:	strd	r2, [fp]
   15ea0:	cmp	r1, r7
   15ea4:	beq	160b0 <_start@@Base+0x3a20>
   15ea8:	ldrb	r3, [r1]
   15eac:	cmp	r3, #34	; 0x22
   15eb0:	addeq	r4, r1, #1
   15eb4:	moveq	r3, #0
   15eb8:	streq	r3, [r0, #12]
   15ebc:	beq	15f08 <_start@@Base+0x3878>
   15ec0:	cmp	r3, #46	; 0x2e
   15ec4:	movne	r3, #1
   15ec8:	strne	r3, [r0, #12]
   15ecc:	movne	r4, r1
   15ed0:	beq	15eec <_start@@Base+0x385c>
   15ed4:	mov	r3, #0
   15ed8:	str	r3, [sp, #8]
   15edc:	str	r3, [sp, #12]
   15ee0:	str	r3, [sp, #16]
   15ee4:	add	sl, sp, #24
   15ee8:	b	16030 <_start@@Base+0x39a0>
   15eec:	mov	r3, #5
   15ef0:	mov	r2, r7
   15ef4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15ef8:	mov	r4, r0
   15efc:	ldr	r3, [r8, #12]
   15f00:	cmp	r3, #0
   15f04:	bne	15f38 <_start@@Base+0x38a8>
   15f08:	sub	r3, r7, r4
   15f0c:	cmp	r3, #1
   15f10:	ble	15f24 <_start@@Base+0x3894>
   15f14:	ldrb	r3, [r4]
   15f18:	cmp	r3, #32
   15f1c:	bhi	15f38 <_start@@Base+0x38a8>
   15f20:	beq	15f44 <_start@@Base+0x38b4>
   15f24:	mov	r2, r7
   15f28:	mov	r1, r4
   15f2c:	mov	r0, r8
   15f30:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   15f34:	mov	r4, r0
   15f38:	cmp	r7, r4
   15f3c:	bne	15ed4 <_start@@Base+0x3844>
   15f40:	b	160cc <_start@@Base+0x3a3c>
   15f44:	ldrb	r3, [r4, #1]
   15f48:	cmp	r3, #32
   15f4c:	addhi	r4, r4, #1
   15f50:	bls	15f24 <_start@@Base+0x3894>
   15f54:	b	15f38 <_start@@Base+0x38a8>
   15f58:	mov	r4, r0
   15f5c:	ldr	r3, [sp, #8]
   15f60:	cmp	r3, #0
   15f64:	beq	15f74 <_start@@Base+0x38e4>
   15f68:	ldr	r3, [r8, #12]
   15f6c:	cmp	r3, #0
   15f70:	bne	15f9c <_start@@Base+0x390c>
   15f74:	ldrd	r2, [sp, #32]
   15f78:	ldr	r1, [sp, #28]
   15f7c:	cmp	r1, #0
   15f80:	beq	15fdc <_start@@Base+0x394c>
   15f84:	cmp	r3, #-2147483648	; 0x80000000
   15f88:	cmpeq	r2, #0
   15f8c:	bhi	15fb8 <_start@@Base+0x3928>
   15f90:	rsbs	r0, r2, #0
   15f94:	rsc	r1, r3, #0
   15f98:	b	15ff0 <_start@@Base+0x3960>
   15f9c:	mov	r3, #14
   15fa0:	mov	r2, r7
   15fa4:	mov	r1, r0
   15fa8:	mov	r0, r8
   15fac:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15fb0:	mov	r4, r0
   15fb4:	b	160cc <_start@@Base+0x3a3c>
   15fb8:	mov	r3, #8
   15fbc:	mov	r2, r7
   15fc0:	mov	r1, r4
   15fc4:	mov	r0, r8
   15fc8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   15fcc:	cmp	r7, r0
   15fd0:	bne	15ff8 <_start@@Base+0x3968>
   15fd4:	mov	r4, r0
   15fd8:	b	160cc <_start@@Base+0x3a3c>
   15fdc:	mov	r0, r2
   15fe0:	mov	r1, r3
   15fe4:	cmp	r2, #0
   15fe8:	sbcs	r3, r3, #0
   15fec:	blt	16098 <_start@@Base+0x3a08>
   15ff0:	str	r0, [sp, #12]
   15ff4:	str	r1, [sp, #16]
   15ff8:	ldr	r3, [fp]
   15ffc:	ldr	r2, [fp, #4]
   16000:	ldr	r1, [sp, #12]
   16004:	adds	r3, r3, r1
   16008:	ldr	r1, [sp, #16]
   1600c:	adc	r2, r2, r1
   16010:	str	r3, [fp]
   16014:	str	r2, [fp, #4]
   16018:	ldr	r3, [sp, #8]
   1601c:	add	r3, r3, #1
   16020:	str	r3, [sp, #8]
   16024:	ldr	r3, [sp, #24]
   16028:	cmp	r3, #0
   1602c:	beq	160cc <_start@@Base+0x3a3c>
   16030:	ldr	r6, [sp, #20]
   16034:	mov	r5, r4
   16038:	add	r9, sp, #32
   1603c:	str	sl, [sp, #4]
   16040:	str	r9, [sp]
   16044:	ldr	r4, [r6]
   16048:	add	r3, sp, #28
   1604c:	mov	r2, r7
   16050:	mov	r1, r5
   16054:	mov	r0, r8
   16058:	blx	r4
   1605c:	cmp	r7, r0
   16060:	beq	160c8 <_start@@Base+0x3a38>
   16064:	cmp	r5, r0
   16068:	bne	15f58 <_start@@Base+0x38c8>
   1606c:	mov	r5, r0
   16070:	ldr	r3, [r6, #4]!
   16074:	cmp	r3, #0
   16078:	bne	1603c <_start@@Base+0x39ac>
   1607c:	mov	r3, #23
   16080:	mov	r2, r7
   16084:	mov	r1, r0
   16088:	mov	r0, r8
   1608c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16090:	mov	r4, r0
   16094:	b	160cc <_start@@Base+0x3a3c>
   16098:	mov	r3, #7
   1609c:	mov	r2, r7
   160a0:	mov	r1, r4
   160a4:	mov	r0, r8
   160a8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   160ac:	b	15fcc <_start@@Base+0x393c>
   160b0:	ldr	r3, [r0, #12]
   160b4:	cmp	r3, #0
   160b8:	movne	r4, r7
   160bc:	bne	160cc <_start@@Base+0x3a3c>
   160c0:	mov	r4, r7
   160c4:	b	15f24 <_start@@Base+0x3894>
   160c8:	mov	r4, r0
   160cc:	mov	r0, r4
   160d0:	add	sp, sp, #44	; 0x2c
   160d4:	ldrd	r4, [sp]
   160d8:	ldrd	r6, [sp, #8]
   160dc:	ldrd	r8, [sp, #16]
   160e0:	ldrd	sl, [sp, #24]
   160e4:	add	sp, sp, #32
   160e8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160f0:	strd	r6, [sp, #8]
   160f4:	strd	r8, [sp, #16]
   160f8:	strd	sl, [sp, #24]
   160fc:	str	lr, [sp, #32]
   16100:	sub	sp, sp, #52	; 0x34
   16104:	mov	r6, r0
   16108:	mov	r4, r1
   1610c:	mov	r5, r2
   16110:	mov	sl, r3
   16114:	mov	r3, #0
   16118:	str	r3, [sl]
   1611c:	mov	r2, #4
   16120:	mov	r1, r2
   16124:	ldr	r0, [r0]
   16128:	bl	22cf0 <flatcc_builder_start_struct@@Base>
   1612c:	subs	fp, r0, #0
   16130:	beq	166d8 <_start@@Base+0x4048>
   16134:	add	r3, sp, #28
   16138:	mov	r2, r5
   1613c:	mov	r1, r4
   16140:	mov	r0, r6
   16144:	bl	14680 <_start@@Base+0x1ff0>
   16148:	mov	r1, r0
   1614c:	mov	r4, fp
   16150:	mov	r7, sl
   16154:	strd	r8, [sp, #8]
   16158:	b	16500 <_start@@Base+0x3e70>
   1615c:	mov	r3, #5
   16160:	mov	r2, r5
   16164:	mov	r0, r6
   16168:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1616c:	mov	r1, r0
   16170:	b	1653c <_start@@Base+0x3eac>
   16174:	ldrb	sl, [r1, #7]
   16178:	mov	fp, #0
   1617c:	ldrb	r2, [r1, #6]
   16180:	orr	r2, sl, r2, lsl #8
   16184:	mov	r3, fp
   16188:	ldrb	sl, [r1, #5]
   1618c:	orr	r0, r2, sl, lsl #16
   16190:	mov	sl, r3
   16194:	ldrb	r2, [r1, #4]
   16198:	orr	r2, r0, r2, lsl #24
   1619c:	mov	r3, sl
   161a0:	ldrb	sl, [r1, #3]
   161a4:	orr	r3, r3, sl
   161a8:	ldrb	sl, [r1, #2]
   161ac:	orr	r3, r3, sl, lsl #8
   161b0:	ldrb	sl, [r1, #1]
   161b4:	orr	r3, r3, sl, lsl #16
   161b8:	ldrb	sl, [r1]
   161bc:	str	r2, [sp, #16]
   161c0:	orr	r3, r3, sl, lsl #24
   161c4:	str	r3, [sp, #20]
   161c8:	ldrd	r2, [sp, #16]
   161cc:	add	fp, pc, #1004	; 0x3ec
   161d0:	ldrd	sl, [fp]
   161d4:	cmp	r3, fp
   161d8:	cmpeq	r2, sl
   161dc:	bne	1647c <_start@@Base+0x3dec>
   161e0:	add	fp, r1, #8
   161e4:	sub	r3, r5, fp
   161e8:	cmp	r3, #8
   161ec:	bhi	16284 <_start@@Base+0x3bf4>
   161f0:	sub	r3, r3, #1
   161f4:	cmp	r3, #7
   161f8:	ldrls	pc, [pc, r3, lsl #2]
   161fc:	b	1632c <_start@@Base+0x3c9c>
   16200:	andeq	r6, r1, r4, lsr #6
   16204:	andeq	r6, r1, ip, lsl r3
   16208:	andeq	r6, r1, r4, lsl r3
   1620c:	andeq	r6, r1, ip, lsl #6
   16210:	andeq	r6, r1, r4, lsl #6
   16214:	strdeq	r6, [r1], -ip
   16218:	strdeq	r6, [r1], -r0
   1621c:	andeq	r6, r1, r4, lsl #5
   16220:	mov	sl, #0
   16224:	mov	fp, sl
   16228:	b	1617c <_start@@Base+0x3aec>
   1622c:	mov	r2, #0
   16230:	mov	r3, r2
   16234:	b	16188 <_start@@Base+0x3af8>
   16238:	mov	r0, #0
   1623c:	mov	sl, r0
   16240:	b	16194 <_start@@Base+0x3b04>
   16244:	mov	r2, #0
   16248:	mov	r3, r2
   1624c:	b	161a0 <_start@@Base+0x3b10>
   16250:	mov	r2, #0
   16254:	mov	r3, r2
   16258:	b	161a8 <_start@@Base+0x3b18>
   1625c:	mov	r2, #0
   16260:	mov	r3, r2
   16264:	b	161b0 <_start@@Base+0x3b20>
   16268:	mov	r2, #0
   1626c:	mov	r3, r2
   16270:	b	161b8 <_start@@Base+0x3b28>
   16274:	mov	r2, #0
   16278:	mov	r3, #0
   1627c:	strd	r2, [sp, #16]
   16280:	b	161c8 <_start@@Base+0x3b38>
   16284:	mov	r3, #0
   16288:	mov	r0, r3
   1628c:	ldrb	r2, [r1, #11]
   16290:	orr	r0, r0, r2
   16294:	ldrb	r2, [r1, #10]
   16298:	orr	r0, r0, r2, lsl #8
   1629c:	ldrb	r2, [r1, #9]
   162a0:	orr	r0, r0, r2, lsl #16
   162a4:	ldrb	r2, [r1, #8]
   162a8:	orr	r2, r0, r2, lsl #24
   162ac:	mov	r3, #0
   162b0:	str	r3, [sp, #8]
   162b4:	lsr	r3, r2, #16
   162b8:	lsl	r3, r3, #16
   162bc:	str	r3, [sp, #12]
   162c0:	mov	r2, #0
   162c4:	mov	r3, #0
   162c8:	movt	r3, #24932	; 0x6164
   162cc:	ldrd	r0, [sp, #8]
   162d0:	cmp	r1, r3
   162d4:	cmpeq	r0, r2
   162d8:	beq	16334 <_start@@Base+0x3ca4>
   162dc:	mov	r2, r5
   162e0:	mov	r1, fp
   162e4:	mov	r0, r6
   162e8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   162ec:	b	16488 <_start@@Base+0x3df8>
   162f0:	mov	r2, #0
   162f4:	mov	r3, r2
   162f8:	b	16288 <_start@@Base+0x3bf8>
   162fc:	mov	r0, #0
   16300:	b	1628c <_start@@Base+0x3bfc>
   16304:	mov	r0, #0
   16308:	b	1628c <_start@@Base+0x3bfc>
   1630c:	mov	r0, #0
   16310:	b	1628c <_start@@Base+0x3bfc>
   16314:	mov	r0, #0
   16318:	b	16294 <_start@@Base+0x3c04>
   1631c:	mov	r0, #0
   16320:	b	1629c <_start@@Base+0x3c0c>
   16324:	mov	r0, #0
   16328:	b	162a4 <_start@@Base+0x3c14>
   1632c:	mov	r2, #0
   16330:	b	162ac <_start@@Base+0x3c1c>
   16334:	mov	r3, #2
   16338:	mov	r2, r5
   1633c:	mov	r1, fp
   16340:	mov	r0, r6
   16344:	bl	14594 <_start@@Base+0x1f04>
   16348:	mov	sl, r0
   1634c:	cmp	fp, r0
   16350:	beq	16468 <_start@@Base+0x3dd8>
   16354:	mov	r3, #0
   16358:	str	r3, [sp, #32]
   1635c:	str	r3, [sp, #40]	; 0x28
   16360:	str	r3, [sp, #44]	; 0x2c
   16364:	str	r3, [sp, #36]	; 0x24
   16368:	cmp	r5, r0
   1636c:	beq	16394 <_start@@Base+0x3d04>
   16370:	add	r3, sp, #40	; 0x28
   16374:	str	r3, [sp]
   16378:	add	r3, sp, #36	; 0x24
   1637c:	mov	r2, r5
   16380:	mov	r1, r0
   16384:	mov	r0, r6
   16388:	bl	29968 <flatcc_json_parser_integer@@Base>
   1638c:	cmp	sl, r0
   16390:	bne	163e4 <_start@@Base+0x3d54>
   16394:	mov	sl, r0
   16398:	add	r3, sp, #32
   1639c:	str	r3, [sp]
   163a0:	movw	r3, #57464	; 0xe078
   163a4:	movt	r3, #3
   163a8:	mov	r2, r5
   163ac:	mov	r1, sl
   163b0:	mov	r0, r6
   163b4:	bl	152f0 <_start@@Base+0x2c60>
   163b8:	cmp	r5, r0
   163bc:	cmpne	r0, sl
   163c0:	bne	16424 <_start@@Base+0x3d94>
   163c4:	mov	sl, r7
   163c8:	mov	r3, #33	; 0x21
   163cc:	mov	r2, r5
   163d0:	mov	r1, r0
   163d4:	mov	r0, r6
   163d8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   163dc:	mov	r4, r0
   163e0:	b	166bc <_start@@Base+0x402c>
   163e4:	ldrd	r2, [sp, #40]	; 0x28
   163e8:	ldr	r1, [sp, #36]	; 0x24
   163ec:	cmp	r1, #0
   163f0:	beq	16430 <_start@@Base+0x3da0>
   163f4:	cmp	r3, #0
   163f8:	cmpeq	r2, #-2147483648	; 0x80000000
   163fc:	rsbls	r3, r2, #0
   16400:	strls	r3, [sp, #32]
   16404:	bls	16424 <_start@@Base+0x3d94>
   16408:	mov	r3, #8
   1640c:	mov	r2, r5
   16410:	mov	r1, r0
   16414:	mov	r0, r6
   16418:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1641c:	cmp	sl, r0
   16420:	beq	16460 <_start@@Base+0x3dd0>
   16424:	ldr	r3, [sp, #32]
   16428:	str	r3, [r4]
   1642c:	b	16488 <_start@@Base+0x3df8>
   16430:	mvn	r8, #-2147483648	; 0x80000000
   16434:	mov	r9, #0
   16438:	cmp	r3, r9
   1643c:	cmpeq	r2, r8
   16440:	strls	r2, [sp, #32]
   16444:	bls	16424 <_start@@Base+0x3d94>
   16448:	mov	r3, #7
   1644c:	mov	r2, r5
   16450:	mov	r1, r0
   16454:	mov	r0, r6
   16458:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1645c:	b	1641c <_start@@Base+0x3d8c>
   16460:	mov	sl, r0
   16464:	b	16398 <_start@@Base+0x3d08>
   16468:	mov	r2, r5
   1646c:	mov	r1, r0
   16470:	mov	r0, r6
   16474:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   16478:	b	16488 <_start@@Base+0x3df8>
   1647c:	mov	r2, r5
   16480:	mov	r0, r6
   16484:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   16488:	sub	r3, r5, r0
   1648c:	cmp	r3, #1
   16490:	ble	164a4 <_start@@Base+0x3e14>
   16494:	ldrb	r3, [r0]
   16498:	cmp	r3, #32
   1649c:	bhi	164b4 <_start@@Base+0x3e24>
   164a0:	beq	16578 <_start@@Base+0x3ee8>
   164a4:	mov	r2, r5
   164a8:	mov	r1, r0
   164ac:	mov	r0, r6
   164b0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   164b4:	cmp	r5, r0
   164b8:	moveq	r3, #0
   164bc:	streq	r3, [sp, #28]
   164c0:	moveq	r1, r0
   164c4:	beq	16500 <_start@@Base+0x3e70>
   164c8:	ldrb	r3, [r0]
   164cc:	cmp	r3, #44	; 0x2c
   164d0:	beq	165dc <_start@@Base+0x3f4c>
   164d4:	mov	r3, #0
   164d8:	str	r3, [sp, #28]
   164dc:	ldrb	r3, [r0]
   164e0:	cmp	r3, #125	; 0x7d
   164e4:	beq	1658c <_start@@Base+0x3efc>
   164e8:	mov	r3, #10
   164ec:	mov	r2, r5
   164f0:	mov	r1, r0
   164f4:	mov	r0, r6
   164f8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   164fc:	mov	r1, r0
   16500:	ldr	r3, [sp, #28]
   16504:	cmp	r3, #0
   16508:	beq	166b4 <_start@@Base+0x4024>
   1650c:	cmp	r5, r1
   16510:	beq	1653c <_start@@Base+0x3eac>
   16514:	ldrb	r3, [r1]
   16518:	cmp	r3, #34	; 0x22
   1651c:	addeq	r1, r1, #1
   16520:	moveq	r3, #0
   16524:	streq	r3, [r6, #12]
   16528:	beq	1653c <_start@@Base+0x3eac>
   1652c:	cmp	r3, #46	; 0x2e
   16530:	movne	r3, #1
   16534:	strne	r3, [r6, #12]
   16538:	beq	1615c <_start@@Base+0x3acc>
   1653c:	sub	r3, r5, r1
   16540:	cmp	r3, #8
   16544:	bhi	16174 <_start@@Base+0x3ae4>
   16548:	sub	r3, r3, #1
   1654c:	cmp	r3, #7
   16550:	ldrls	pc, [pc, r3, lsl #2]
   16554:	b	16274 <_start@@Base+0x3be4>
   16558:	andeq	r6, r1, r8, ror #4
   1655c:	andeq	r6, r1, ip, asr r2
   16560:	andeq	r6, r1, r0, asr r2
   16564:	andeq	r6, r1, r4, asr #4
   16568:	andeq	r6, r1, r8, lsr r2
   1656c:	andeq	r6, r1, ip, lsr #4
   16570:	andeq	r6, r1, r0, lsr #4
   16574:	andeq	r6, r1, r4, ror r1
   16578:	ldrb	r3, [r0, #1]
   1657c:	cmp	r3, #32
   16580:	addhi	r0, r0, #1
   16584:	bls	164a4 <_start@@Base+0x3e14>
   16588:	b	164b4 <_start@@Base+0x3e24>
   1658c:	add	r1, r0, #1
   16590:	sub	r3, r5, r1
   16594:	cmp	r3, #1
   16598:	ble	165ac <_start@@Base+0x3f1c>
   1659c:	ldrb	r3, [r0, #1]
   165a0:	cmp	r3, #32
   165a4:	bhi	16500 <_start@@Base+0x3e70>
   165a8:	beq	165c8 <_start@@Base+0x3f38>
   165ac:	mov	r2, r5
   165b0:	mov	r0, r6
   165b4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   165b8:	mov	r1, r0
   165bc:	b	16500 <_start@@Base+0x3e70>
   165c0:	cmpvc	pc, #1342177286	; 0x50000006
   165c4:	rsbvs	r6, pc, #428	; 0x1ac
   165c8:	ldrb	r3, [r0, #2]
   165cc:	cmp	r3, #32
   165d0:	addhi	r1, r0, #2
   165d4:	bls	165ac <_start@@Base+0x3f1c>
   165d8:	b	16500 <_start@@Base+0x3e70>
   165dc:	add	r1, r0, #1
   165e0:	sub	r3, r5, r1
   165e4:	cmp	r3, #1
   165e8:	ble	165fc <_start@@Base+0x3f6c>
   165ec:	ldrb	r3, [r0, #1]
   165f0:	cmp	r3, #32
   165f4:	bhi	1660c <_start@@Base+0x3f7c>
   165f8:	beq	1666c <_start@@Base+0x3fdc>
   165fc:	mov	r2, r5
   16600:	mov	r0, r6
   16604:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   16608:	mov	r1, r0
   1660c:	cmp	r5, r1
   16610:	beq	16680 <_start@@Base+0x3ff0>
   16614:	ldrb	r3, [r1]
   16618:	cmp	r3, #125	; 0x7d
   1661c:	movne	r3, #1
   16620:	strne	r3, [sp, #28]
   16624:	bne	16500 <_start@@Base+0x3e70>
   16628:	mov	r3, #0
   1662c:	str	r3, [sp, #28]
   16630:	add	r3, r1, #1
   16634:	sub	r2, r5, r3
   16638:	cmp	r2, #1
   1663c:	ble	16654 <_start@@Base+0x3fc4>
   16640:	ldrb	r2, [r1, #1]
   16644:	cmp	r2, #32
   16648:	movhi	r1, r3
   1664c:	bhi	16500 <_start@@Base+0x3e70>
   16650:	beq	166a0 <_start@@Base+0x4010>
   16654:	mov	r2, r5
   16658:	mov	r1, r3
   1665c:	mov	r0, r6
   16660:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   16664:	mov	r1, r0
   16668:	b	16500 <_start@@Base+0x3e70>
   1666c:	ldrb	r3, [r0, #2]
   16670:	cmp	r3, #32
   16674:	addhi	r1, r0, #2
   16678:	bls	165fc <_start@@Base+0x3f6c>
   1667c:	b	1660c <_start@@Base+0x3f7c>
   16680:	mov	r3, #0
   16684:	str	r3, [sp, #28]
   16688:	mov	r3, #10
   1668c:	mov	r2, r5
   16690:	mov	r0, r6
   16694:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16698:	mov	r1, r0
   1669c:	b	16500 <_start@@Base+0x3e70>
   166a0:	ldrb	r2, [r1, #2]
   166a4:	cmp	r2, #32
   166a8:	addhi	r1, r1, #2
   166ac:	bls	16654 <_start@@Base+0x3fc4>
   166b0:	b	16500 <_start@@Base+0x3e70>
   166b4:	mov	r4, r1
   166b8:	mov	sl, r7
   166bc:	cmp	r5, r4
   166c0:	beq	166d8 <_start@@Base+0x4048>
   166c4:	ldr	r0, [r6]
   166c8:	bl	22da8 <flatcc_builder_end_struct@@Base>
   166cc:	str	r0, [sl]
   166d0:	cmp	r0, #0
   166d4:	bne	166f0 <_start@@Base+0x4060>
   166d8:	mov	r3, #33	; 0x21
   166dc:	mov	r2, r5
   166e0:	mov	r1, r4
   166e4:	mov	r0, r6
   166e8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   166ec:	mov	r4, r0
   166f0:	mov	r0, r4
   166f4:	add	sp, sp, #52	; 0x34
   166f8:	ldrd	r4, [sp]
   166fc:	ldrd	r6, [sp, #8]
   16700:	ldrd	r8, [sp, #16]
   16704:	ldrd	sl, [sp, #24]
   16708:	add	sp, sp, #32
   1670c:	pop	{pc}		; (ldr pc, [sp], #4)
   16710:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16714:	strd	r6, [sp, #8]
   16718:	strd	r8, [sp, #16]
   1671c:	strd	sl, [sp, #24]
   16720:	str	lr, [sp, #32]
   16724:	sub	sp, sp, #60	; 0x3c
   16728:	mov	sl, r0
   1672c:	mov	r4, r1
   16730:	mov	r5, r2
   16734:	ldr	fp, [sp, #96]	; 0x60
   16738:	mov	r2, #0
   1673c:	str	r2, [fp]
   16740:	cmp	r3, #9
   16744:	beq	17400 <_start@@Base+0x4d70>
   16748:	bhi	1678c <_start@@Base+0x40fc>
   1674c:	cmp	r3, #2
   16750:	beq	167fc <_start@@Base+0x416c>
   16754:	cmp	r3, #8
   16758:	beq	16e5c <_start@@Base+0x47cc>
   1675c:	cmp	r3, r2
   16760:	beq	167b4 <_start@@Base+0x4124>
   16764:	ldr	r3, [sl, #8]
   16768:	tst	r3, #1
   1676c:	bne	17470 <_start@@Base+0x4de0>
   16770:	mov	r3, #15
   16774:	mov	r2, r5
   16778:	mov	r1, r4
   1677c:	mov	r0, sl
   16780:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16784:	mov	r4, r0
   16788:	b	17428 <_start@@Base+0x4d98>
   1678c:	cmp	r3, #11
   16790:	beq	1745c <_start@@Base+0x4dcc>
   16794:	bcc	17448 <_start@@Base+0x4db8>
   16798:	cmp	r3, #255	; 0xff
   1679c:	bne	16764 <_start@@Base+0x40d4>
   167a0:	mov	r3, fp
   167a4:	mov	r2, r5
   167a8:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   167ac:	mov	r4, r0
   167b0:	b	17410 <_start@@Base+0x4d80>
   167b4:	sub	r3, r5, r1
   167b8:	cmp	r3, #3
   167bc:	ble	167e0 <_start@@Base+0x4150>
   167c0:	mov	r2, #4
   167c4:	movw	r1, #46184	; 0xb468
   167c8:	movt	r1, #2
   167cc:	mov	r0, r4
   167d0:	bl	125a0 <memcmp@plt>
   167d4:	cmp	r0, #0
   167d8:	addeq	r4, r4, #4
   167dc:	beq	17428 <_start@@Base+0x4d98>
   167e0:	mov	r3, #26
   167e4:	mov	r2, r5
   167e8:	mov	r1, r4
   167ec:	mov	r0, sl
   167f0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   167f4:	mov	r4, r0
   167f8:	b	17428 <_start@@Base+0x4d98>
   167fc:	mov	r1, #1
   16800:	ldr	r0, [r0]
   16804:	bl	23a98 <flatcc_builder_start_table@@Base>
   16808:	cmp	r0, #0
   1680c:	beq	1682c <_start@@Base+0x419c>
   16810:	mov	r3, #33	; 0x21
   16814:	mov	r2, r5
   16818:	mov	r1, r4
   1681c:	mov	r0, sl
   16820:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16824:	mov	r4, r0
   16828:	b	17410 <_start@@Base+0x4d80>
   1682c:	add	r3, sp, #36	; 0x24
   16830:	mov	r2, r5
   16834:	mov	r1, r4
   16838:	mov	r0, sl
   1683c:	bl	14680 <_start@@Base+0x1ff0>
   16840:	mov	r4, r0
   16844:	add	r7, pc, #964	; 0x3c4
   16848:	ldrd	r6, [r7]
   1684c:	b	16cb8 <_start@@Base+0x4628>
   16850:	mov	r3, #5
   16854:	mov	r2, r5
   16858:	mov	r1, r4
   1685c:	mov	r0, sl
   16860:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16864:	mov	r4, r0
   16868:	b	16cf4 <_start@@Base+0x4664>
   1686c:	ldrb	r0, [r4, #7]
   16870:	mov	r1, #0
   16874:	ldrb	r2, [r4, #6]
   16878:	orr	r2, r0, r2, lsl #8
   1687c:	mov	r3, r1
   16880:	ldrb	r0, [r4, #5]
   16884:	orr	r2, r2, r0, lsl #16
   16888:	ldrb	r0, [r4, #4]
   1688c:	orr	r2, r2, r0, lsl #24
   16890:	ldrb	r0, [r4, #3]
   16894:	orr	r3, r3, r0
   16898:	ldrb	r0, [r4, #2]
   1689c:	orr	r3, r3, r0, lsl #8
   168a0:	ldrb	r0, [r4, #1]
   168a4:	orr	r3, r3, r0, lsl #16
   168a8:	ldrb	r0, [r4]
   168ac:	mov	r8, r2
   168b0:	orr	r9, r3, r0, lsl #24
   168b4:	cmp	r9, r7
   168b8:	cmpeq	r8, r6
   168bc:	bne	16c2c <_start@@Base+0x459c>
   168c0:	add	ip, r4, #8
   168c4:	sub	r3, r5, ip
   168c8:	cmp	r3, #8
   168cc:	bhi	16960 <_start@@Base+0x42d0>
   168d0:	sub	r3, r3, #1
   168d4:	cmp	r3, #7
   168d8:	ldrls	pc, [pc, r3, lsl #2]
   168dc:	b	16a68 <_start@@Base+0x43d8>
   168e0:	andeq	r6, r1, ip, asr sl
   168e4:	andeq	r6, r1, r0, asr sl
   168e8:	andeq	r6, r1, r4, asr #20
   168ec:	andeq	r6, r1, r8, lsr sl
   168f0:	andeq	r6, r1, ip, lsr #20
   168f4:	andeq	r6, r1, r0, lsr #20
   168f8:	andeq	r6, r1, r4, lsl sl
   168fc:	andeq	r6, r1, r0, ror #18
   16900:	mov	r0, #0
   16904:	mov	r1, r0
   16908:	b	16874 <_start@@Base+0x41e4>
   1690c:	mov	r2, #0
   16910:	mov	r3, r2
   16914:	b	16880 <_start@@Base+0x41f0>
   16918:	mov	r2, #0
   1691c:	mov	r3, r2
   16920:	b	16888 <_start@@Base+0x41f8>
   16924:	mov	r2, #0
   16928:	mov	r3, r2
   1692c:	b	16890 <_start@@Base+0x4200>
   16930:	mov	r2, #0
   16934:	mov	r3, r2
   16938:	b	16898 <_start@@Base+0x4208>
   1693c:	mov	r2, #0
   16940:	mov	r3, r2
   16944:	b	168a0 <_start@@Base+0x4210>
   16948:	mov	r2, #0
   1694c:	mov	r3, r2
   16950:	b	168a8 <_start@@Base+0x4218>
   16954:	mov	r8, #0
   16958:	mov	r9, #0
   1695c:	b	168b4 <_start@@Base+0x4224>
   16960:	ldrb	r0, [r4, #15]
   16964:	mov	r1, #0
   16968:	ldrb	r2, [r4, #14]
   1696c:	orr	r2, r0, r2, lsl #8
   16970:	mov	r3, r1
   16974:	ldrb	r0, [r4, #13]
   16978:	orr	r2, r2, r0, lsl #16
   1697c:	ldrb	r0, [r4, #12]
   16980:	orr	r2, r2, r0, lsl #24
   16984:	ldrb	r0, [r4, #11]
   16988:	orr	r3, r3, r0
   1698c:	ldrb	r0, [r4, #10]
   16990:	orr	r3, r3, r0, lsl #8
   16994:	ldrb	r0, [r4, #9]
   16998:	orr	r3, r3, r0, lsl #16
   1699c:	ldrb	r0, [r4, #8]
   169a0:	str	r2, [sp, #8]
   169a4:	orr	r3, r3, r0, lsl #24
   169a8:	str	r3, [sp, #12]
   169ac:	ldrd	r2, [sp, #8]
   169b0:	add	r1, pc, #608	; 0x260
   169b4:	ldrd	r0, [r1]
   169b8:	cmp	r3, r1
   169bc:	cmpeq	r2, r0
   169c0:	bne	16bf4 <_start@@Base+0x4564>
   169c4:	add	r4, r4, #16
   169c8:	mov	r1, r5
   169cc:	mov	r0, r4
   169d0:	bl	12780 <_start@@Base+0xf0>
   169d4:	mov	r3, #0
   169d8:	str	r3, [sp, #24]
   169dc:	bic	r3, r1, #255	; 0xff
   169e0:	str	r3, [sp, #28]
   169e4:	ldrd	r2, [sp, #24]
   169e8:	add	r1, pc, #560	; 0x230
   169ec:	ldrd	r0, [r1]
   169f0:	cmp	r3, r1
   169f4:	cmpeq	r2, r0
   169f8:	beq	16a78 <_start@@Base+0x43e8>
   169fc:	mov	r2, r5
   16a00:	mov	r1, r4
   16a04:	mov	r0, sl
   16a08:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   16a0c:	mov	r4, r0
   16a10:	b	16c40 <_start@@Base+0x45b0>
   16a14:	mov	r0, #0
   16a18:	mov	r1, r0
   16a1c:	b	16968 <_start@@Base+0x42d8>
   16a20:	mov	r2, #0
   16a24:	mov	r3, r2
   16a28:	b	16974 <_start@@Base+0x42e4>
   16a2c:	mov	r2, #0
   16a30:	mov	r3, r2
   16a34:	b	1697c <_start@@Base+0x42ec>
   16a38:	mov	r2, #0
   16a3c:	mov	r3, r2
   16a40:	b	16984 <_start@@Base+0x42f4>
   16a44:	mov	r2, #0
   16a48:	mov	r3, r2
   16a4c:	b	1698c <_start@@Base+0x42fc>
   16a50:	mov	r2, #0
   16a54:	mov	r3, r2
   16a58:	b	16994 <_start@@Base+0x4304>
   16a5c:	mov	r2, #0
   16a60:	mov	r3, r2
   16a64:	b	1699c <_start@@Base+0x430c>
   16a68:	mov	r2, #0
   16a6c:	mov	r3, #0
   16a70:	strd	r2, [sp, #8]
   16a74:	b	169ac <_start@@Base+0x431c>
   16a78:	mov	r3, #3
   16a7c:	mov	r2, r5
   16a80:	mov	r1, r4
   16a84:	mov	r0, sl
   16a88:	bl	14594 <_start@@Base+0x1f04>
   16a8c:	str	r0, [sp, #16]
   16a90:	cmp	r4, r0
   16a94:	beq	16bdc <_start@@Base+0x454c>
   16a98:	mov	r3, #0
   16a9c:	str	r3, [sp, #40]	; 0x28
   16aa0:	str	r3, [sp, #48]	; 0x30
   16aa4:	str	r3, [sp, #52]	; 0x34
   16aa8:	str	r3, [sp, #44]	; 0x2c
   16aac:	mov	r1, r0
   16ab0:	cmp	r5, r0
   16ab4:	beq	174a4 <_start@@Base+0x4e14>
   16ab8:	add	r3, sp, #48	; 0x30
   16abc:	str	r3, [sp]
   16ac0:	add	r3, sp, #44	; 0x2c
   16ac4:	mov	r2, r5
   16ac8:	mov	r0, sl
   16acc:	bl	29968 <flatcc_json_parser_integer@@Base>
   16ad0:	mov	r4, r0
   16ad4:	ldr	r1, [sp, #16]
   16ad8:	cmp	r1, r0
   16adc:	bne	16b18 <_start@@Base+0x4488>
   16ae0:	str	r4, [sp, #16]
   16ae4:	add	r3, sp, #40	; 0x28
   16ae8:	str	r3, [sp]
   16aec:	ldr	r3, [pc, #308]	; 16c28 <_start@@Base+0x4598>
   16af0:	mov	r2, r5
   16af4:	ldr	r1, [sp, #16]
   16af8:	mov	r0, sl
   16afc:	bl	152f0 <_start@@Base+0x2c60>
   16b00:	mov	r4, r0
   16b04:	ldr	r3, [sp, #16]
   16b08:	cmp	r5, r0
   16b0c:	cmpne	r0, r3
   16b10:	bne	16b60 <_start@@Base+0x44d0>
   16b14:	b	16810 <_start@@Base+0x4180>
   16b18:	ldrd	r2, [sp, #48]	; 0x30
   16b1c:	ldr	r1, [sp, #44]	; 0x2c
   16b20:	cmp	r1, #0
   16b24:	beq	16ba0 <_start@@Base+0x4510>
   16b28:	cmp	r3, #0
   16b2c:	cmpeq	r2, #-2147483648	; 0x80000000
   16b30:	rsbls	r2, r2, #0
   16b34:	strls	r2, [sp, #40]	; 0x28
   16b38:	bls	16b60 <_start@@Base+0x44d0>
   16b3c:	mov	r3, #8
   16b40:	mov	r2, r5
   16b44:	mov	r1, r0
   16b48:	mov	r0, sl
   16b4c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16b50:	mov	r4, r0
   16b54:	ldr	r3, [sp, #16]
   16b58:	cmp	r3, r4
   16b5c:	beq	16bd4 <_start@@Base+0x4544>
   16b60:	ldr	r3, [sp, #40]	; 0x28
   16b64:	cmp	r3, #0
   16b68:	bne	16b78 <_start@@Base+0x44e8>
   16b6c:	ldr	r3, [sl, #8]
   16b70:	tst	r3, #2
   16b74:	beq	16c40 <_start@@Base+0x45b0>
   16b78:	mov	r3, #4
   16b7c:	mov	r2, r3
   16b80:	mov	r1, #0
   16b84:	ldr	r0, [sl]
   16b88:	bl	2565c <flatcc_builder_table_add@@Base>
   16b8c:	cmp	r0, #0
   16b90:	beq	16810 <_start@@Base+0x4180>
   16b94:	ldr	r3, [sp, #40]	; 0x28
   16b98:	str	r3, [r0]
   16b9c:	b	16c40 <_start@@Base+0x45b0>
   16ba0:	mvn	r0, #-2147483648	; 0x80000000
   16ba4:	mov	r1, #0
   16ba8:	cmp	r3, r1
   16bac:	cmpeq	r2, r0
   16bb0:	strls	r2, [sp, #40]	; 0x28
   16bb4:	bls	16b60 <_start@@Base+0x44d0>
   16bb8:	mov	r3, #7
   16bbc:	mov	r2, r5
   16bc0:	mov	r1, r4
   16bc4:	mov	r0, sl
   16bc8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16bcc:	mov	r4, r0
   16bd0:	b	16b54 <_start@@Base+0x44c4>
   16bd4:	str	r4, [sp, #16]
   16bd8:	b	16ae4 <_start@@Base+0x4454>
   16bdc:	mov	r2, r5
   16be0:	ldr	r1, [sp, #16]
   16be4:	mov	r0, sl
   16be8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   16bec:	mov	r4, r0
   16bf0:	b	16c40 <_start@@Base+0x45b0>
   16bf4:	mov	r2, r5
   16bf8:	mov	r1, ip
   16bfc:	mov	r0, sl
   16c00:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   16c04:	mov	r4, r0
   16c08:	b	16c40 <_start@@Base+0x45b0>
   16c0c:	nop	{0}
   16c10:	ldrbvs	r6, [pc], #-372	; 16c18 <_start@@Base+0x4588>
   16c14:	cmnvc	r7, #456	; 0x1c8
   16c18:	svcpl	0x0064616d
   16c1c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   16c20:	andeq	r0, r0, r0
   16c24:	cmnvs	r7, r0, lsl #10
   16c28:	andeq	lr, r3, r4, lsl #1
   16c2c:	mov	r2, r5
   16c30:	mov	r1, r4
   16c34:	mov	r0, sl
   16c38:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   16c3c:	mov	r4, r0
   16c40:	sub	r3, r5, r4
   16c44:	cmp	r3, #1
   16c48:	ble	16c5c <_start@@Base+0x45cc>
   16c4c:	ldrb	r3, [r4]
   16c50:	cmp	r3, #32
   16c54:	bhi	16c70 <_start@@Base+0x45e0>
   16c58:	beq	16d30 <_start@@Base+0x46a0>
   16c5c:	mov	r2, r5
   16c60:	mov	r1, r4
   16c64:	mov	r0, sl
   16c68:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   16c6c:	mov	r4, r0
   16c70:	cmp	r5, r4
   16c74:	moveq	r3, #0
   16c78:	streq	r3, [sp, #36]	; 0x24
   16c7c:	beq	16cb8 <_start@@Base+0x4628>
   16c80:	ldrb	r3, [r4]
   16c84:	cmp	r3, #44	; 0x2c
   16c88:	beq	16d90 <_start@@Base+0x4700>
   16c8c:	mov	r3, #0
   16c90:	str	r3, [sp, #36]	; 0x24
   16c94:	ldrb	r3, [r4]
   16c98:	cmp	r3, #125	; 0x7d
   16c9c:	beq	16d44 <_start@@Base+0x46b4>
   16ca0:	mov	r3, #10
   16ca4:	mov	r2, r5
   16ca8:	mov	r1, r4
   16cac:	mov	r0, sl
   16cb0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16cb4:	mov	r4, r0
   16cb8:	ldr	r3, [sp, #36]	; 0x24
   16cbc:	cmp	r3, #0
   16cc0:	beq	16e38 <_start@@Base+0x47a8>
   16cc4:	cmp	r5, r4
   16cc8:	beq	16cf4 <_start@@Base+0x4664>
   16ccc:	ldrb	r3, [r4]
   16cd0:	cmp	r3, #34	; 0x22
   16cd4:	addeq	r4, r4, #1
   16cd8:	moveq	r3, #0
   16cdc:	streq	r3, [sl, #12]
   16ce0:	beq	16cf4 <_start@@Base+0x4664>
   16ce4:	cmp	r3, #46	; 0x2e
   16ce8:	movne	r3, #1
   16cec:	strne	r3, [sl, #12]
   16cf0:	beq	16850 <_start@@Base+0x41c0>
   16cf4:	sub	r3, r5, r4
   16cf8:	cmp	r3, #8
   16cfc:	bhi	1686c <_start@@Base+0x41dc>
   16d00:	sub	r3, r3, #1
   16d04:	cmp	r3, #7
   16d08:	ldrls	pc, [pc, r3, lsl #2]
   16d0c:	b	16954 <_start@@Base+0x42c4>
   16d10:	andeq	r6, r1, r8, asr #18
   16d14:	andeq	r6, r1, ip, lsr r9
   16d18:	andeq	r6, r1, r0, lsr r9
   16d1c:	andeq	r6, r1, r4, lsr #18
   16d20:	andeq	r6, r1, r8, lsl r9
   16d24:	andeq	r6, r1, ip, lsl #18
   16d28:	andeq	r6, r1, r0, lsl #18
   16d2c:	andeq	r6, r1, ip, ror #16
   16d30:	ldrb	r3, [r4, #1]
   16d34:	cmp	r3, #32
   16d38:	addhi	r4, r4, #1
   16d3c:	bls	16c5c <_start@@Base+0x45cc>
   16d40:	b	16c70 <_start@@Base+0x45e0>
   16d44:	add	r1, r4, #1
   16d48:	sub	r3, r5, r1
   16d4c:	cmp	r3, #1
   16d50:	ble	16d68 <_start@@Base+0x46d8>
   16d54:	ldrb	r3, [r4, #1]
   16d58:	cmp	r3, #32
   16d5c:	movhi	r4, r1
   16d60:	bhi	16cb8 <_start@@Base+0x4628>
   16d64:	beq	16d7c <_start@@Base+0x46ec>
   16d68:	mov	r2, r5
   16d6c:	mov	r0, sl
   16d70:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   16d74:	mov	r4, r0
   16d78:	b	16cb8 <_start@@Base+0x4628>
   16d7c:	ldrb	r3, [r4, #2]
   16d80:	cmp	r3, #32
   16d84:	addhi	r4, r4, #2
   16d88:	bls	16d68 <_start@@Base+0x46d8>
   16d8c:	b	16cb8 <_start@@Base+0x4628>
   16d90:	add	r1, r4, #1
   16d94:	sub	r3, r5, r1
   16d98:	cmp	r3, #1
   16d9c:	ble	16db4 <_start@@Base+0x4724>
   16da0:	ldrb	r3, [r4, #1]
   16da4:	cmp	r3, #32
   16da8:	movhi	r4, r1
   16dac:	bhi	16dc4 <_start@@Base+0x4734>
   16db0:	beq	16e00 <_start@@Base+0x4770>
   16db4:	mov	r2, r5
   16db8:	mov	r0, sl
   16dbc:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   16dc0:	mov	r4, r0
   16dc4:	cmp	r5, r4
   16dc8:	beq	16e14 <_start@@Base+0x4784>
   16dcc:	ldrb	r3, [r4]
   16dd0:	cmp	r3, #125	; 0x7d
   16dd4:	movne	r3, #1
   16dd8:	strne	r3, [sp, #36]	; 0x24
   16ddc:	bne	16cb8 <_start@@Base+0x4628>
   16de0:	mov	r3, #0
   16de4:	str	r3, [sp, #36]	; 0x24
   16de8:	mov	r2, r5
   16dec:	add	r1, r4, #1
   16df0:	mov	r0, sl
   16df4:	bl	14544 <_start@@Base+0x1eb4>
   16df8:	mov	r4, r0
   16dfc:	b	16cb8 <_start@@Base+0x4628>
   16e00:	ldrb	r3, [r4, #2]
   16e04:	cmp	r3, #32
   16e08:	addhi	r4, r4, #2
   16e0c:	bls	16db4 <_start@@Base+0x4724>
   16e10:	b	16dc4 <_start@@Base+0x4734>
   16e14:	mov	r3, #0
   16e18:	str	r3, [sp, #36]	; 0x24
   16e1c:	mov	r3, #10
   16e20:	mov	r2, r5
   16e24:	mov	r1, r4
   16e28:	mov	r0, sl
   16e2c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16e30:	mov	r4, r0
   16e34:	b	16cb8 <_start@@Base+0x4628>
   16e38:	ldr	r3, [sl, #24]
   16e3c:	cmp	r3, #0
   16e40:	bne	16810 <_start@@Base+0x4180>
   16e44:	ldr	r0, [sl]
   16e48:	bl	24570 <flatcc_builder_end_table@@Base>
   16e4c:	str	r0, [fp]
   16e50:	cmp	r0, #0
   16e54:	bne	17410 <_start@@Base+0x4d80>
   16e58:	b	16810 <_start@@Base+0x4180>
   16e5c:	mov	r2, #2
   16e60:	mov	r1, r2
   16e64:	ldr	r0, [r0]
   16e68:	bl	22cf0 <flatcc_builder_start_struct@@Base>
   16e6c:	subs	r3, r0, #0
   16e70:	str	r3, [sp, #8]
   16e74:	beq	173e4 <_start@@Base+0x4d54>
   16e78:	add	r3, sp, #40	; 0x28
   16e7c:	mov	r2, r5
   16e80:	mov	r1, r4
   16e84:	mov	r0, sl
   16e88:	bl	14680 <_start@@Base+0x1ff0>
   16e8c:	b	17208 <_start@@Base+0x4b78>
   16e90:	mov	r3, #5
   16e94:	mov	r2, r5
   16e98:	mov	r1, r0
   16e9c:	mov	r0, sl
   16ea0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   16ea4:	b	17244 <_start@@Base+0x4bb4>
   16ea8:	ldrb	r8, [r0, #7]
   16eac:	mov	r9, #0
   16eb0:	ldrb	r2, [r0, #6]
   16eb4:	orr	r2, r8, r2, lsl #8
   16eb8:	mov	r3, r9
   16ebc:	ldrb	r8, [r0, #5]
   16ec0:	orr	r1, r2, r8, lsl #16
   16ec4:	mov	r8, r3
   16ec8:	ldrb	r2, [r0, #4]
   16ecc:	orr	r2, r1, r2, lsl #24
   16ed0:	mov	r3, r8
   16ed4:	ldrb	r8, [r0, #3]
   16ed8:	orr	r3, r3, r8
   16edc:	ldrb	r8, [r0, #2]
   16ee0:	orr	r3, r3, r8, lsl #8
   16ee4:	ldrb	r8, [r0, #1]
   16ee8:	orr	r3, r3, r8, lsl #16
   16eec:	ldrb	r8, [r0]
   16ef0:	mov	r6, r2
   16ef4:	orr	r7, r3, r8, lsl #24
   16ef8:	add	r3, pc, #992	; 0x3e0
   16efc:	ldrd	r2, [r3]
   16f00:	cmp	r7, r3
   16f04:	cmpeq	r6, r2
   16f08:	bne	17188 <_start@@Base+0x4af8>
   16f0c:	add	r4, r0, #8
   16f10:	sub	r3, r5, r4
   16f14:	cmp	r3, #8
   16f18:	bhi	16fac <_start@@Base+0x491c>
   16f1c:	sub	r3, r3, #1
   16f20:	cmp	r3, #7
   16f24:	ldrls	pc, [pc, r3, lsl #2]
   16f28:	b	1704c <_start@@Base+0x49bc>
   16f2c:	andeq	r7, r1, r4, asr #32
   16f30:	andeq	r7, r1, ip, lsr r0
   16f34:	andeq	r7, r1, r4, lsr r0
   16f38:	andeq	r7, r1, ip, lsr #32
   16f3c:	andeq	r7, r1, r4, lsr #32
   16f40:	andeq	r7, r1, ip, lsl r0
   16f44:	andeq	r7, r1, r0, lsl r0
   16f48:	andeq	r6, r1, ip, lsr #31
   16f4c:	mov	r8, #0
   16f50:	mov	r9, r8
   16f54:	b	16eb0 <_start@@Base+0x4820>
   16f58:	mov	r2, #0
   16f5c:	mov	r3, r2
   16f60:	b	16ebc <_start@@Base+0x482c>
   16f64:	mov	r1, #0
   16f68:	mov	r8, r1
   16f6c:	b	16ec8 <_start@@Base+0x4838>
   16f70:	mov	r2, #0
   16f74:	mov	r3, r2
   16f78:	b	16ed4 <_start@@Base+0x4844>
   16f7c:	mov	r2, #0
   16f80:	mov	r3, r2
   16f84:	b	16edc <_start@@Base+0x484c>
   16f88:	mov	r2, #0
   16f8c:	mov	r3, r2
   16f90:	b	16ee4 <_start@@Base+0x4854>
   16f94:	mov	r2, #0
   16f98:	mov	r3, r2
   16f9c:	b	16eec <_start@@Base+0x485c>
   16fa0:	mov	r6, #0
   16fa4:	mov	r7, #0
   16fa8:	b	16ef8 <_start@@Base+0x4868>
   16fac:	mov	r3, #0
   16fb0:	mov	r1, r3
   16fb4:	ldrb	r2, [r0, #11]
   16fb8:	orr	r1, r1, r2
   16fbc:	ldrb	r2, [r0, #10]
   16fc0:	orr	r1, r1, r2, lsl #8
   16fc4:	ldrb	r2, [r0, #9]
   16fc8:	orr	r1, r1, r2, lsl #16
   16fcc:	ldrb	r2, [r0, #8]
   16fd0:	orr	r3, r1, r2, lsl #24
   16fd4:	mov	r2, #0
   16fd8:	str	r2, [sp, #16]
   16fdc:	bic	r3, r3, #255	; 0xff
   16fe0:	str	r3, [sp, #20]
   16fe4:	ldrd	r2, [sp, #16]
   16fe8:	add	r1, pc, #760	; 0x2f8
   16fec:	ldrd	r0, [r1]
   16ff0:	cmp	r3, r1
   16ff4:	cmpeq	r2, r0
   16ff8:	beq	17054 <_start@@Base+0x49c4>
   16ffc:	mov	r2, r5
   17000:	mov	r1, r4
   17004:	mov	r0, sl
   17008:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1700c:	b	17198 <_start@@Base+0x4b08>
   17010:	mov	r2, #0
   17014:	mov	r3, r2
   17018:	b	16fb0 <_start@@Base+0x4920>
   1701c:	mov	r1, #0
   17020:	b	16fb4 <_start@@Base+0x4924>
   17024:	mov	r1, #0
   17028:	b	16fb4 <_start@@Base+0x4924>
   1702c:	mov	r1, #0
   17030:	b	16fb4 <_start@@Base+0x4924>
   17034:	mov	r1, #0
   17038:	b	16fbc <_start@@Base+0x492c>
   1703c:	mov	r1, #0
   17040:	b	16fc4 <_start@@Base+0x4934>
   17044:	mov	r1, #0
   17048:	b	16fcc <_start@@Base+0x493c>
   1704c:	mov	r3, #0
   17050:	b	16fd4 <_start@@Base+0x4944>
   17054:	mov	r3, #3
   17058:	mov	r2, r5
   1705c:	mov	r1, r4
   17060:	mov	r0, sl
   17064:	bl	14594 <_start@@Base+0x1f04>
   17068:	mov	r8, r0
   1706c:	cmp	r4, r0
   17070:	beq	17174 <_start@@Base+0x4ae4>
   17074:	mov	r3, #0
   17078:	strh	r3, [sp, #36]	; 0x24
   1707c:	str	r3, [sp, #48]	; 0x30
   17080:	str	r3, [sp, #52]	; 0x34
   17084:	str	r3, [sp, #44]	; 0x2c
   17088:	cmp	r5, r0
   1708c:	beq	174ac <_start@@Base+0x4e1c>
   17090:	add	r3, sp, #48	; 0x30
   17094:	str	r3, [sp]
   17098:	add	r3, sp, #44	; 0x2c
   1709c:	mov	r2, r5
   170a0:	mov	r1, r0
   170a4:	mov	r0, sl
   170a8:	bl	29968 <flatcc_json_parser_integer@@Base>
   170ac:	mov	r4, r0
   170b0:	cmp	r8, r0
   170b4:	bne	170fc <_start@@Base+0x4a6c>
   170b8:	add	r3, sp, #36	; 0x24
   170bc:	str	r3, [sp]
   170c0:	ldr	r3, [pc, #552]	; 172f0 <_start@@Base+0x4c60>
   170c4:	mov	r2, r5
   170c8:	mov	r1, r4
   170cc:	mov	r0, sl
   170d0:	bl	14e50 <_start@@Base+0x27c0>
   170d4:	cmp	r5, r0
   170d8:	cmpne	r0, r4
   170dc:	bne	1715c <_start@@Base+0x4acc>
   170e0:	mov	r3, #33	; 0x21
   170e4:	mov	r2, r5
   170e8:	mov	r1, r0
   170ec:	mov	r0, sl
   170f0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   170f4:	mov	r4, r0
   170f8:	b	173c8 <_start@@Base+0x4d38>
   170fc:	ldr	r3, [sp, #44]	; 0x2c
   17100:	cmp	r3, #0
   17104:	bne	17140 <_start@@Base+0x4ab0>
   17108:	ldrd	r2, [sp, #48]	; 0x30
   1710c:	movw	r0, #65535	; 0xffff
   17110:	mov	r1, #0
   17114:	cmp	r3, r1
   17118:	cmpeq	r2, r0
   1711c:	strhls	r2, [sp, #36]	; 0x24
   17120:	movls	r0, r4
   17124:	bls	1715c <_start@@Base+0x4acc>
   17128:	mov	r3, #7
   1712c:	mov	r2, r5
   17130:	mov	r1, r4
   17134:	mov	r0, sl
   17138:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1713c:	b	17154 <_start@@Base+0x4ac4>
   17140:	mov	r3, #8
   17144:	mov	r2, r5
   17148:	mov	r1, r0
   1714c:	mov	r0, sl
   17150:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17154:	cmp	r8, r0
   17158:	beq	1716c <_start@@Base+0x4adc>
   1715c:	ldrh	r3, [sp, #36]	; 0x24
   17160:	ldr	r2, [sp, #8]
   17164:	strh	r3, [r2]
   17168:	b	17198 <_start@@Base+0x4b08>
   1716c:	mov	r4, r0
   17170:	b	170b8 <_start@@Base+0x4a28>
   17174:	mov	r2, r5
   17178:	mov	r1, r0
   1717c:	mov	r0, sl
   17180:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   17184:	b	17198 <_start@@Base+0x4b08>
   17188:	mov	r2, r5
   1718c:	mov	r1, r0
   17190:	mov	r0, sl
   17194:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   17198:	sub	r3, r5, r0
   1719c:	cmp	r3, #1
   171a0:	ble	171b4 <_start@@Base+0x4b24>
   171a4:	ldrb	r3, [r0]
   171a8:	cmp	r3, #32
   171ac:	bhi	171c4 <_start@@Base+0x4b34>
   171b0:	beq	17280 <_start@@Base+0x4bf0>
   171b4:	mov	r2, r5
   171b8:	mov	r1, r0
   171bc:	mov	r0, sl
   171c0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   171c4:	cmp	r5, r0
   171c8:	moveq	r3, #0
   171cc:	streq	r3, [sp, #40]	; 0x28
   171d0:	beq	17208 <_start@@Base+0x4b78>
   171d4:	ldrb	r3, [r0]
   171d8:	cmp	r3, #44	; 0x2c
   171dc:	beq	172f4 <_start@@Base+0x4c64>
   171e0:	mov	r3, #0
   171e4:	str	r3, [sp, #40]	; 0x28
   171e8:	ldrb	r3, [r0]
   171ec:	cmp	r3, #125	; 0x7d
   171f0:	beq	17294 <_start@@Base+0x4c04>
   171f4:	mov	r3, #10
   171f8:	mov	r2, r5
   171fc:	mov	r1, r0
   17200:	mov	r0, sl
   17204:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17208:	ldr	r3, [sp, #40]	; 0x28
   1720c:	cmp	r3, #0
   17210:	beq	173c4 <_start@@Base+0x4d34>
   17214:	cmp	r5, r0
   17218:	beq	17244 <_start@@Base+0x4bb4>
   1721c:	ldrb	r3, [r0]
   17220:	cmp	r3, #34	; 0x22
   17224:	addeq	r0, r0, #1
   17228:	moveq	r3, #0
   1722c:	streq	r3, [sl, #12]
   17230:	beq	17244 <_start@@Base+0x4bb4>
   17234:	cmp	r3, #46	; 0x2e
   17238:	movne	r3, #1
   1723c:	strne	r3, [sl, #12]
   17240:	beq	16e90 <_start@@Base+0x4800>
   17244:	sub	r3, r5, r0
   17248:	cmp	r3, #8
   1724c:	bhi	16ea8 <_start@@Base+0x4818>
   17250:	sub	r3, r3, #1
   17254:	cmp	r3, #7
   17258:	ldrls	pc, [pc, r3, lsl #2]
   1725c:	b	16fa0 <_start@@Base+0x4910>
   17260:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   17264:	andeq	r6, r1, r8, lsl #31
   17268:	andeq	r6, r1, ip, ror pc
   1726c:	andeq	r6, r1, r0, ror pc
   17270:	andeq	r6, r1, r4, ror #30
   17274:	andeq	r6, r1, r8, asr pc
   17278:	andeq	r6, r1, ip, asr #30
   1727c:	andeq	r6, r1, r8, lsr #29
   17280:	ldrb	r3, [r0, #1]
   17284:	cmp	r3, #32
   17288:	addhi	r0, r0, #1
   1728c:	bls	171b4 <_start@@Base+0x4b24>
   17290:	b	171c4 <_start@@Base+0x4b34>
   17294:	add	r1, r0, #1
   17298:	sub	r3, r5, r1
   1729c:	cmp	r3, #1
   172a0:	ble	172b8 <_start@@Base+0x4c28>
   172a4:	ldrb	r3, [r0, #1]
   172a8:	cmp	r3, #32
   172ac:	movhi	r0, r1
   172b0:	bhi	17208 <_start@@Base+0x4b78>
   172b4:	beq	172c8 <_start@@Base+0x4c38>
   172b8:	mov	r2, r5
   172bc:	mov	r0, sl
   172c0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   172c4:	b	17208 <_start@@Base+0x4b78>
   172c8:	ldrb	r3, [r0, #2]
   172cc:	cmp	r3, #32
   172d0:	addhi	r0, r0, #2
   172d4:	bls	172b8 <_start@@Base+0x4c28>
   172d8:	b	17208 <_start@@Base+0x4b78>
   172dc:	nop	{0}
   172e0:	svcpl	0x006c656e
   172e4:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   172e8:	andeq	r0, r0, r0
   172ec:	ldrbvs	r6, [r4, -r0, lsl #16]!
   172f0:	muleq	r3, r0, r0
   172f4:	add	r1, r0, #1
   172f8:	sub	r3, r5, r1
   172fc:	cmp	r3, #1
   17300:	ble	17318 <_start@@Base+0x4c88>
   17304:	ldrb	r3, [r0, #1]
   17308:	cmp	r3, #32
   1730c:	movhi	r0, r1
   17310:	bhi	17324 <_start@@Base+0x4c94>
   17314:	beq	1737c <_start@@Base+0x4cec>
   17318:	mov	r2, r5
   1731c:	mov	r0, sl
   17320:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17324:	cmp	r5, r0
   17328:	beq	17390 <_start@@Base+0x4d00>
   1732c:	ldrb	r3, [r0]
   17330:	cmp	r3, #125	; 0x7d
   17334:	movne	r3, #1
   17338:	strne	r3, [sp, #40]	; 0x28
   1733c:	bne	17208 <_start@@Base+0x4b78>
   17340:	mov	r3, #0
   17344:	str	r3, [sp, #40]	; 0x28
   17348:	add	r1, r0, #1
   1734c:	sub	r3, r5, r1
   17350:	cmp	r3, #1
   17354:	ble	1736c <_start@@Base+0x4cdc>
   17358:	ldrb	r3, [r0, #1]
   1735c:	cmp	r3, #32
   17360:	movhi	r0, r1
   17364:	bhi	17208 <_start@@Base+0x4b78>
   17368:	beq	173b0 <_start@@Base+0x4d20>
   1736c:	mov	r2, r5
   17370:	mov	r0, sl
   17374:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17378:	b	17208 <_start@@Base+0x4b78>
   1737c:	ldrb	r3, [r0, #2]
   17380:	cmp	r3, #32
   17384:	addhi	r0, r0, #2
   17388:	bls	17318 <_start@@Base+0x4c88>
   1738c:	b	17324 <_start@@Base+0x4c94>
   17390:	mov	r3, #0
   17394:	str	r3, [sp, #40]	; 0x28
   17398:	mov	r3, #10
   1739c:	mov	r2, r5
   173a0:	mov	r1, r0
   173a4:	mov	r0, sl
   173a8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   173ac:	b	17208 <_start@@Base+0x4b78>
   173b0:	ldrb	r3, [r0, #2]
   173b4:	cmp	r3, #32
   173b8:	addhi	r0, r0, #2
   173bc:	bls	1736c <_start@@Base+0x4cdc>
   173c0:	b	17208 <_start@@Base+0x4b78>
   173c4:	mov	r4, r0
   173c8:	cmp	r5, r4
   173cc:	beq	173e4 <_start@@Base+0x4d54>
   173d0:	ldr	r0, [sl]
   173d4:	bl	22da8 <flatcc_builder_end_struct@@Base>
   173d8:	str	r0, [fp]
   173dc:	cmp	r0, #0
   173e0:	bne	17428 <_start@@Base+0x4d98>
   173e4:	mov	r3, #33	; 0x21
   173e8:	mov	r2, r5
   173ec:	mov	r1, r4
   173f0:	mov	r0, sl
   173f4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   173f8:	mov	r4, r0
   173fc:	b	17410 <_start@@Base+0x4d80>
   17400:	mov	r3, fp
   17404:	mov	r2, r5
   17408:	bl	160ec <_start@@Base+0x3a5c>
   1740c:	mov	r4, r0
   17410:	ldr	r3, [sl, #24]
   17414:	cmp	r3, #0
   17418:	bne	17428 <_start@@Base+0x4d98>
   1741c:	ldr	r3, [fp]
   17420:	cmp	r3, #0
   17424:	beq	17488 <_start@@Base+0x4df8>
   17428:	mov	r0, r4
   1742c:	add	sp, sp, #60	; 0x3c
   17430:	ldrd	r4, [sp]
   17434:	ldrd	r6, [sp, #8]
   17438:	ldrd	r8, [sp, #16]
   1743c:	ldrd	sl, [sp, #24]
   17440:	add	sp, sp, #32
   17444:	pop	{pc}		; (ldr pc, [sp], #4)
   17448:	mov	r3, fp
   1744c:	mov	r2, r5
   17450:	bl	160ec <_start@@Base+0x3a5c>
   17454:	mov	r4, r0
   17458:	b	17410 <_start@@Base+0x4d80>
   1745c:	mov	r3, fp
   17460:	mov	r2, r5
   17464:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   17468:	mov	r4, r0
   1746c:	b	17410 <_start@@Base+0x4d80>
   17470:	mov	r2, r5
   17474:	mov	r1, r4
   17478:	mov	r0, sl
   1747c:	bl	28c34 <flatcc_json_parser_generic_json@@Base>
   17480:	mov	r4, r0
   17484:	b	17428 <_start@@Base+0x4d98>
   17488:	mov	r3, #33	; 0x21
   1748c:	mov	r2, r5
   17490:	mov	r1, r4
   17494:	mov	r0, sl
   17498:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1749c:	mov	r4, r0
   174a0:	b	17428 <_start@@Base+0x4d98>
   174a4:	ldr	r4, [sp, #16]
   174a8:	b	16ae0 <_start@@Base+0x4450>
   174ac:	mov	r4, r0
   174b0:	b	170b8 <_start@@Base+0x4a28>
   174b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   174b8:	strd	r6, [sp, #8]
   174bc:	strd	r8, [sp, #16]
   174c0:	strd	sl, [sp, #24]
   174c4:	str	lr, [sp, #32]
   174c8:	sub	sp, sp, #76	; 0x4c
   174cc:	mov	r6, r0
   174d0:	mov	r4, r1
   174d4:	mov	r5, r2
   174d8:	mov	r2, r3
   174dc:	str	r3, [sp, #40]	; 0x28
   174e0:	mov	r3, #0
   174e4:	str	r3, [r2]
   174e8:	mov	r1, #4
   174ec:	ldr	r0, [r0]
   174f0:	bl	23a98 <flatcc_builder_start_table@@Base>
   174f4:	cmp	r0, #0
   174f8:	beq	1752c <_start@@Base+0x4e9c>
   174fc:	mov	r3, #33	; 0x21
   17500:	mov	r2, r5
   17504:	mov	r1, r4
   17508:	mov	r0, r6
   1750c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17510:	add	sp, sp, #76	; 0x4c
   17514:	ldrd	r4, [sp]
   17518:	ldrd	r6, [sp, #8]
   1751c:	ldrd	r8, [sp, #16]
   17520:	ldrd	sl, [sp, #24]
   17524:	add	sp, sp, #32
   17528:	pop	{pc}		; (ldr pc, [sp], #4)
   1752c:	add	r3, sp, #68	; 0x44
   17530:	mov	r2, r5
   17534:	mov	r1, r4
   17538:	mov	r0, r6
   1753c:	bl	14680 <_start@@Base+0x1ff0>
   17540:	mov	r4, r0
   17544:	movw	r3, #57464	; 0xe078
   17548:	movt	r3, #3
   1754c:	str	r3, [sp, #36]	; 0x24
   17550:	add	r3, r3, #80	; 0x50
   17554:	str	r3, [sp, #44]	; 0x2c
   17558:	strd	sl, [sp, #16]
   1755c:	b	17b64 <_start@@Base+0x54d4>
   17560:	mov	r3, #5
   17564:	mov	r2, r5
   17568:	mov	r1, r4
   1756c:	mov	r0, r6
   17570:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17574:	mov	r4, r0
   17578:	b	17ba0 <_start@@Base+0x5510>
   1757c:	sub	r3, r3, #1
   17580:	cmp	r3, #7
   17584:	ldrls	pc, [pc, r3, lsl #2]
   17588:	b	17600 <_start@@Base+0x4f70>
   1758c:	strdeq	r7, [r1], -r4
   17590:	andeq	r7, r1, r8, ror #11
   17594:	ldrdeq	r7, [r1], -ip
   17598:	ldrdeq	r7, [r1], -r0
   1759c:	andeq	r7, r1, r4, asr #11
   175a0:			; <UNDEFINED> instruction: 0x000175b8
   175a4:	andeq	r7, r1, ip, lsr #11
   175a8:	andeq	r7, r1, ip, lsr #23
   175ac:	mov	r0, #0
   175b0:	mov	r1, #0
   175b4:	b	17bb4 <_start@@Base+0x5524>
   175b8:	mov	r3, #0
   175bc:	mov	r2, r3
   175c0:	b	17bc0 <_start@@Base+0x5530>
   175c4:	mov	r3, #0
   175c8:	mov	r2, r3
   175cc:	b	17bc8 <_start@@Base+0x5538>
   175d0:	mov	r3, #0
   175d4:	mov	r2, r3
   175d8:	b	17bd0 <_start@@Base+0x5540>
   175dc:	mov	r3, #0
   175e0:	mov	r2, r3
   175e4:	b	17bd8 <_start@@Base+0x5548>
   175e8:	mov	r3, #0
   175ec:	mov	r2, r3
   175f0:	b	17be0 <_start@@Base+0x5550>
   175f4:	mov	r3, #0
   175f8:	mov	r2, r3
   175fc:	b	17be8 <_start@@Base+0x5558>
   17600:	mov	r3, #0
   17604:	mov	r2, r3
   17608:	b	17bf0 <_start@@Base+0x5560>
   1760c:	mov	r3, #6
   17610:	mov	r2, r5
   17614:	mov	r1, r4
   17618:	mov	r0, r6
   1761c:	bl	14594 <_start@@Base+0x1f04>
   17620:	mov	r7, r0
   17624:	cmp	r0, r4
   17628:	beq	17ad8 <_start@@Base+0x5448>
   1762c:	mov	r3, #0
   17630:	strb	r3, [sp, #51]	; 0x33
   17634:	mov	r0, #0
   17638:	mov	r1, #0
   1763c:	strd	r0, [sp, #56]	; 0x38
   17640:	str	r3, [sp, #52]	; 0x34
   17644:	cmp	r5, r7
   17648:	beq	17e54 <_start@@Base+0x57c4>
   1764c:	add	r3, sp, #56	; 0x38
   17650:	str	r3, [sp]
   17654:	add	r3, sp, #52	; 0x34
   17658:	mov	r2, r5
   1765c:	mov	r1, r7
   17660:	mov	r0, r6
   17664:	bl	29968 <flatcc_json_parser_integer@@Base>
   17668:	mov	r4, r0
   1766c:	cmp	r7, r0
   17670:	bne	176ac <_start@@Base+0x501c>
   17674:	mov	r7, r4
   17678:	add	r3, sp, #51	; 0x33
   1767c:	str	r3, [sp]
   17680:	ldr	r3, [sp, #36]	; 0x24
   17684:	add	r3, r3, #36	; 0x24
   17688:	mov	r2, r5
   1768c:	mov	r1, r7
   17690:	mov	r0, r6
   17694:	bl	15098 <_start@@Base+0x2a08>
   17698:	mov	r4, r0
   1769c:	cmp	r5, r0
   176a0:	cmpne	r0, r7
   176a4:	bne	176f0 <_start@@Base+0x5060>
   176a8:	b	174fc <_start@@Base+0x4e6c>
   176ac:	ldrd	r2, [sp, #56]	; 0x38
   176b0:	ldr	r1, [sp, #52]	; 0x34
   176b4:	cmp	r1, #0
   176b8:	beq	17730 <_start@@Base+0x50a0>
   176bc:	cmp	r3, #0
   176c0:	cmpeq	r2, #128	; 0x80
   176c4:	rsbls	r2, r2, #0
   176c8:	strbls	r2, [sp, #51]	; 0x33
   176cc:	bls	176f0 <_start@@Base+0x5060>
   176d0:	mov	r3, #8
   176d4:	mov	r2, r5
   176d8:	mov	r1, r0
   176dc:	mov	r0, r6
   176e0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   176e4:	mov	r4, r0
   176e8:	cmp	r7, r4
   176ec:	beq	1775c <_start@@Base+0x50cc>
   176f0:	ldrsb	r3, [sp, #51]	; 0x33
   176f4:	cmp	r3, #2
   176f8:	bne	17708 <_start@@Base+0x5078>
   176fc:	ldr	r3, [r6, #8]
   17700:	tst	r3, #2
   17704:	beq	17aec <_start@@Base+0x545c>
   17708:	mov	r3, #1
   1770c:	mov	r2, r3
   17710:	mov	r1, r3
   17714:	ldr	r0, [r6]
   17718:	bl	2565c <flatcc_builder_table_add@@Base>
   1771c:	cmp	r0, #0
   17720:	beq	174fc <_start@@Base+0x4e6c>
   17724:	ldrsb	r3, [sp, #51]	; 0x33
   17728:	strb	r3, [r0]
   1772c:	b	17aec <_start@@Base+0x545c>
   17730:	cmp	r3, #0
   17734:	cmpeq	r2, #127	; 0x7f
   17738:	strbls	r2, [sp, #51]	; 0x33
   1773c:	bls	176f0 <_start@@Base+0x5060>
   17740:	mov	r3, #7
   17744:	mov	r2, r5
   17748:	mov	r1, r0
   1774c:	mov	r0, r6
   17750:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17754:	mov	r4, r0
   17758:	b	176e8 <_start@@Base+0x5058>
   1775c:	mov	r7, r4
   17760:	b	17678 <_start@@Base+0x4fe8>
   17764:	mov	r4, r5
   17768:	mov	r3, #0
   1776c:	mov	r2, r3
   17770:	b	17c0c <_start@@Base+0x557c>
   17774:	mov	r3, #5
   17778:	mov	r2, r5
   1777c:	mov	r1, r4
   17780:	mov	r0, r6
   17784:	bl	14594 <_start@@Base+0x1f04>
   17788:	mov	r7, r0
   1778c:	cmp	r0, r4
   17790:	beq	17ad8 <_start@@Base+0x5448>
   17794:	mov	r3, #0
   17798:	strb	r3, [sp, #51]	; 0x33
   1779c:	mov	r0, #0
   177a0:	mov	r1, #0
   177a4:	strd	r0, [sp, #56]	; 0x38
   177a8:	str	r3, [sp, #52]	; 0x34
   177ac:	cmp	r5, r7
   177b0:	beq	17e6c <_start@@Base+0x57dc>
   177b4:	add	r3, sp, #56	; 0x38
   177b8:	str	r3, [sp]
   177bc:	add	r3, sp, #52	; 0x34
   177c0:	mov	r2, r5
   177c4:	mov	r1, r7
   177c8:	mov	r0, r6
   177cc:	bl	29968 <flatcc_json_parser_integer@@Base>
   177d0:	mov	r4, r0
   177d4:	cmp	r7, r0
   177d8:	bne	17814 <_start@@Base+0x5184>
   177dc:	mov	r7, r4
   177e0:	add	r3, sp, #51	; 0x33
   177e4:	str	r3, [sp]
   177e8:	ldr	r3, [sp, #36]	; 0x24
   177ec:	add	r3, r3, #52	; 0x34
   177f0:	mov	r2, r5
   177f4:	mov	r1, r7
   177f8:	mov	r0, r6
   177fc:	bl	15098 <_start@@Base+0x2a08>
   17800:	mov	r4, r0
   17804:	cmp	r5, r0
   17808:	cmpne	r0, r7
   1780c:	bne	17858 <_start@@Base+0x51c8>
   17810:	b	174fc <_start@@Base+0x4e6c>
   17814:	ldrd	r2, [sp, #56]	; 0x38
   17818:	ldr	r1, [sp, #52]	; 0x34
   1781c:	cmp	r1, #0
   17820:	beq	17898 <_start@@Base+0x5208>
   17824:	cmp	r3, #0
   17828:	cmpeq	r2, #128	; 0x80
   1782c:	rsbls	r2, r2, #0
   17830:	strbls	r2, [sp, #51]	; 0x33
   17834:	bls	17858 <_start@@Base+0x51c8>
   17838:	mov	r3, #8
   1783c:	mov	r2, r5
   17840:	mov	r1, r0
   17844:	mov	r0, r6
   17848:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1784c:	mov	r4, r0
   17850:	cmp	r7, r4
   17854:	beq	178c4 <_start@@Base+0x5234>
   17858:	ldrsb	r3, [sp, #51]	; 0x33
   1785c:	cmp	r3, #2
   17860:	bne	17870 <_start@@Base+0x51e0>
   17864:	ldr	r3, [r6, #8]
   17868:	tst	r3, #2
   1786c:	beq	17aec <_start@@Base+0x545c>
   17870:	mov	r3, #1
   17874:	mov	r2, r3
   17878:	mov	r1, #0
   1787c:	ldr	r0, [r6]
   17880:	bl	2565c <flatcc_builder_table_add@@Base>
   17884:	cmp	r0, #0
   17888:	beq	174fc <_start@@Base+0x4e6c>
   1788c:	ldrsb	r3, [sp, #51]	; 0x33
   17890:	strb	r3, [r0]
   17894:	b	17aec <_start@@Base+0x545c>
   17898:	cmp	r3, #0
   1789c:	cmpeq	r2, #127	; 0x7f
   178a0:	strbls	r2, [sp, #51]	; 0x33
   178a4:	bls	17858 <_start@@Base+0x51c8>
   178a8:	mov	r3, #7
   178ac:	mov	r2, r5
   178b0:	mov	r1, r0
   178b4:	mov	r0, r6
   178b8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   178bc:	mov	r4, r0
   178c0:	b	17850 <_start@@Base+0x51c0>
   178c4:	mov	r7, r4
   178c8:	b	177e0 <_start@@Base+0x5150>
   178cc:	mov	r3, #3
   178d0:	mov	r2, r5
   178d4:	mov	r1, r4
   178d8:	mov	r0, r6
   178dc:	bl	14594 <_start@@Base+0x1f04>
   178e0:	mov	r7, r0
   178e4:	cmp	r0, r4
   178e8:	beq	17a08 <_start@@Base+0x5378>
   178ec:	mov	r3, #0
   178f0:	strb	r3, [sp, #51]	; 0x33
   178f4:	mov	r0, #0
   178f8:	mov	r1, #0
   178fc:	strd	r0, [sp, #56]	; 0x38
   17900:	str	r3, [sp, #52]	; 0x34
   17904:	cmp	r5, r7
   17908:	beq	17e5c <_start@@Base+0x57cc>
   1790c:	add	r3, sp, #56	; 0x38
   17910:	str	r3, [sp]
   17914:	add	r3, sp, #52	; 0x34
   17918:	mov	r2, r5
   1791c:	mov	r1, r7
   17920:	mov	r0, r6
   17924:	bl	29968 <flatcc_json_parser_integer@@Base>
   17928:	mov	r1, r0
   1792c:	cmp	r7, r0
   17930:	bne	17968 <_start@@Base+0x52d8>
   17934:	add	r3, sp, #51	; 0x33
   17938:	str	r3, [sp]
   1793c:	ldr	r3, [sp, #36]	; 0x24
   17940:	add	r3, r3, #68	; 0x44
   17944:	mov	r2, r5
   17948:	mov	r7, r1
   1794c:	mov	r0, r6
   17950:	bl	159ec <_start@@Base+0x335c>
   17954:	mov	r4, r0
   17958:	cmp	r5, r0
   1795c:	cmpne	r0, r7
   17960:	bne	179c0 <_start@@Base+0x5330>
   17964:	b	174fc <_start@@Base+0x4e6c>
   17968:	ldr	r3, [sp, #52]	; 0x34
   1796c:	cmp	r3, #0
   17970:	bne	179a4 <_start@@Base+0x5314>
   17974:	ldrd	r2, [sp, #56]	; 0x38
   17978:	cmp	r3, #0
   1797c:	cmpeq	r2, #255	; 0xff
   17980:	strbls	r2, [sp, #51]	; 0x33
   17984:	movls	r4, r0
   17988:	bls	179c0 <_start@@Base+0x5330>
   1798c:	mov	r3, #7
   17990:	mov	r2, r5
   17994:	mov	r0, r6
   17998:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1799c:	mov	r4, r0
   179a0:	b	179b8 <_start@@Base+0x5328>
   179a4:	mov	r3, #8
   179a8:	mov	r2, r5
   179ac:	mov	r0, r6
   179b0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   179b4:	mov	r4, r0
   179b8:	cmp	r7, r4
   179bc:	beq	17a00 <_start@@Base+0x5370>
   179c0:	ldrb	r3, [sp, #51]	; 0x33
   179c4:	cmp	r3, #2
   179c8:	bne	179d8 <_start@@Base+0x5348>
   179cc:	ldr	r3, [r6, #8]
   179d0:	tst	r3, #2
   179d4:	beq	17aec <_start@@Base+0x545c>
   179d8:	mov	r3, #1
   179dc:	mov	r2, r3
   179e0:	mov	r1, #3
   179e4:	ldr	r0, [r6]
   179e8:	bl	2565c <flatcc_builder_table_add@@Base>
   179ec:	cmp	r0, #0
   179f0:	beq	174fc <_start@@Base+0x4e6c>
   179f4:	ldrb	r3, [sp, #51]	; 0x33
   179f8:	strb	r3, [r0]
   179fc:	b	17aec <_start@@Base+0x545c>
   17a00:	mov	r1, r4
   17a04:	b	17934 <_start@@Base+0x52a4>
   17a08:	mov	r2, r5
   17a0c:	mov	r1, r4
   17a10:	mov	r0, r6
   17a14:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   17a18:	mov	r4, r0
   17a1c:	b	17aec <_start@@Base+0x545c>
   17a20:	ldr	r3, [sp, #52]	; 0x34
   17a24:	cmp	r3, #0
   17a28:	bne	17a5c <_start@@Base+0x53cc>
   17a2c:	ldrd	r2, [sp, #56]	; 0x38
   17a30:	cmp	r3, #0
   17a34:	cmpeq	r2, #255	; 0xff
   17a38:	strbls	r2, [sp, #51]	; 0x33
   17a3c:	movls	r4, r0
   17a40:	bls	17a78 <_start@@Base+0x53e8>
   17a44:	mov	r3, #7
   17a48:	mov	r2, r5
   17a4c:	mov	r0, r6
   17a50:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17a54:	mov	r4, r0
   17a58:	b	17a70 <_start@@Base+0x53e0>
   17a5c:	mov	r3, #8
   17a60:	mov	r2, r5
   17a64:	mov	r0, r6
   17a68:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17a6c:	mov	r4, r0
   17a70:	cmp	r7, r4
   17a74:	beq	17ab8 <_start@@Base+0x5428>
   17a78:	ldrb	r3, [sp, #51]	; 0x33
   17a7c:	cmp	r3, #2
   17a80:	bne	17a90 <_start@@Base+0x5400>
   17a84:	ldr	r3, [r6, #8]
   17a88:	tst	r3, #2
   17a8c:	beq	17aec <_start@@Base+0x545c>
   17a90:	mov	r3, #1
   17a94:	mov	r2, r3
   17a98:	mov	r1, #2
   17a9c:	ldr	r0, [r6]
   17aa0:	bl	2565c <flatcc_builder_table_add@@Base>
   17aa4:	cmp	r0, #0
   17aa8:	beq	174fc <_start@@Base+0x4e6c>
   17aac:	ldrb	r3, [sp, #51]	; 0x33
   17ab0:	strb	r3, [r0]
   17ab4:	b	17aec <_start@@Base+0x545c>
   17ab8:	mov	r1, r4
   17abc:	b	17cf0 <_start@@Base+0x5660>
   17ac0:	mov	r2, r5
   17ac4:	mov	r1, r4
   17ac8:	mov	r0, r6
   17acc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   17ad0:	mov	r4, r0
   17ad4:	b	17aec <_start@@Base+0x545c>
   17ad8:	mov	r2, r5
   17adc:	mov	r1, r4
   17ae0:	mov	r0, r6
   17ae4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   17ae8:	mov	r4, r0
   17aec:	sub	r3, r5, r4
   17af0:	cmp	r3, #1
   17af4:	ble	17b08 <_start@@Base+0x5478>
   17af8:	ldrb	r3, [r4]
   17afc:	cmp	r3, #32
   17b00:	bhi	17b1c <_start@@Base+0x548c>
   17b04:	beq	17d20 <_start@@Base+0x5690>
   17b08:	mov	r2, r5
   17b0c:	mov	r1, r4
   17b10:	mov	r0, r6
   17b14:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17b18:	mov	r4, r0
   17b1c:	cmp	r5, r4
   17b20:	moveq	r3, #0
   17b24:	streq	r3, [sp, #68]	; 0x44
   17b28:	beq	17b64 <_start@@Base+0x54d4>
   17b2c:	ldrb	r3, [r4]
   17b30:	cmp	r3, #44	; 0x2c
   17b34:	beq	17d80 <_start@@Base+0x56f0>
   17b38:	mov	r3, #0
   17b3c:	str	r3, [sp, #68]	; 0x44
   17b40:	ldrb	r3, [r4]
   17b44:	cmp	r3, #125	; 0x7d
   17b48:	beq	17d34 <_start@@Base+0x56a4>
   17b4c:	mov	r3, #10
   17b50:	mov	r2, r5
   17b54:	mov	r1, r4
   17b58:	mov	r0, r6
   17b5c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17b60:	mov	r4, r0
   17b64:	ldr	r3, [sp, #68]	; 0x44
   17b68:	cmp	r3, #0
   17b6c:	beq	17e28 <_start@@Base+0x5798>
   17b70:	cmp	r4, r5
   17b74:	beq	17764 <_start@@Base+0x50d4>
   17b78:	ldrb	r3, [r4]
   17b7c:	cmp	r3, #34	; 0x22
   17b80:	addeq	r4, r4, #1
   17b84:	moveq	r3, #0
   17b88:	streq	r3, [r6, #12]
   17b8c:	beq	17ba0 <_start@@Base+0x5510>
   17b90:	cmp	r3, #46	; 0x2e
   17b94:	movne	r3, #1
   17b98:	strne	r3, [r6, #12]
   17b9c:	beq	17560 <_start@@Base+0x4ed0>
   17ba0:	sub	r3, r5, r4
   17ba4:	cmp	r3, #8
   17ba8:	bls	1757c <_start@@Base+0x4eec>
   17bac:	ldrb	r0, [r4, #7]
   17bb0:	mov	r1, #0
   17bb4:	ldrb	r2, [r4, #6]
   17bb8:	orr	r3, r0, r2, lsl #8
   17bbc:	mov	r2, r1
   17bc0:	ldrb	r0, [r4, #5]
   17bc4:	orr	r3, r3, r0, lsl #16
   17bc8:	ldrb	r0, [r4, #4]
   17bcc:	orr	r3, r3, r0, lsl #24
   17bd0:	ldrb	r0, [r4, #3]
   17bd4:	orr	r2, r2, r0
   17bd8:	ldrb	r0, [r4, #2]
   17bdc:	orr	r2, r2, r0, lsl #8
   17be0:	ldrb	r0, [r4, #1]
   17be4:	orr	r2, r2, r0, lsl #16
   17be8:	ldrb	r0, [r4]
   17bec:	orr	r2, r2, r0, lsl #24
   17bf0:	lsr	r8, r3, #16
   17bf4:	lsl	r8, r8, #16
   17bf8:	add	r1, pc, #632	; 0x278
   17bfc:	ldrd	r0, [r1]
   17c00:	cmp	r2, r1
   17c04:	cmpeq	r8, r0
   17c08:	beq	1760c <_start@@Base+0x4f7c>
   17c0c:	and	r3, r3, #-16777216	; 0xff000000
   17c10:	str	r3, [sp, #8]
   17c14:	str	r2, [sp, #12]
   17c18:	ldrd	r0, [sp, #8]
   17c1c:	add	fp, pc, #604	; 0x25c
   17c20:	ldrd	sl, [fp]
   17c24:	cmp	r1, fp
   17c28:	cmpeq	r0, sl
   17c2c:	beq	17774 <_start@@Base+0x50e4>
   17c30:	mov	r3, #0
   17c34:	str	r3, [sp, #24]
   17c38:	bic	r3, r2, #255	; 0xff
   17c3c:	str	r3, [sp, #28]
   17c40:	ldrd	r0, [sp, #24]
   17c44:	add	fp, pc, #572	; 0x23c
   17c48:	ldrd	sl, [fp]
   17c4c:	cmp	r1, fp
   17c50:	cmpeq	r0, sl
   17c54:	beq	178cc <_start@@Base+0x523c>
   17c58:	mov	r3, #0
   17c5c:	str	r3, [sp, #16]
   17c60:	lsr	r3, r2, #16
   17c64:	lsl	r3, r3, #16
   17c68:	str	r3, [sp, #20]
   17c6c:	mov	r2, #0
   17c70:	mov	r3, #0
   17c74:	movt	r3, #30051	; 0x7563
   17c78:	ldrd	r0, [sp, #16]
   17c7c:	cmp	r1, r3
   17c80:	cmpeq	r0, r2
   17c84:	bne	17ad8 <_start@@Base+0x5448>
   17c88:	mov	r3, #2
   17c8c:	mov	r2, r5
   17c90:	mov	r1, r4
   17c94:	mov	r0, r6
   17c98:	bl	14594 <_start@@Base+0x1f04>
   17c9c:	mov	r7, r0
   17ca0:	cmp	r0, r4
   17ca4:	beq	17ac0 <_start@@Base+0x5430>
   17ca8:	mov	r3, #0
   17cac:	strb	r3, [sp, #51]	; 0x33
   17cb0:	mov	r0, #0
   17cb4:	mov	r1, #0
   17cb8:	strd	r0, [sp, #56]	; 0x38
   17cbc:	str	r3, [sp, #52]	; 0x34
   17cc0:	cmp	r5, r7
   17cc4:	beq	17e64 <_start@@Base+0x57d4>
   17cc8:	add	r3, sp, #56	; 0x38
   17ccc:	str	r3, [sp]
   17cd0:	add	r3, sp, #52	; 0x34
   17cd4:	mov	r2, r5
   17cd8:	mov	r1, r7
   17cdc:	mov	r0, r6
   17ce0:	bl	29968 <flatcc_json_parser_integer@@Base>
   17ce4:	mov	r1, r0
   17ce8:	cmp	r7, r0
   17cec:	bne	17a20 <_start@@Base+0x5390>
   17cf0:	add	r3, sp, #51	; 0x33
   17cf4:	str	r3, [sp]
   17cf8:	ldr	r3, [sp, #44]	; 0x2c
   17cfc:	mov	r2, r5
   17d00:	mov	r7, r1
   17d04:	mov	r0, r6
   17d08:	bl	159ec <_start@@Base+0x335c>
   17d0c:	mov	r4, r0
   17d10:	cmp	r5, r0
   17d14:	cmpne	r0, r7
   17d18:	bne	17a78 <_start@@Base+0x53e8>
   17d1c:	b	174fc <_start@@Base+0x4e6c>
   17d20:	ldrb	r3, [r4, #1]
   17d24:	cmp	r3, #32
   17d28:	addhi	r4, r4, #1
   17d2c:	bls	17b08 <_start@@Base+0x5478>
   17d30:	b	17b1c <_start@@Base+0x548c>
   17d34:	add	r1, r4, #1
   17d38:	sub	r3, r5, r1
   17d3c:	cmp	r3, #1
   17d40:	ble	17d58 <_start@@Base+0x56c8>
   17d44:	ldrb	r3, [r4, #1]
   17d48:	cmp	r3, #32
   17d4c:	movhi	r4, r1
   17d50:	bhi	17b64 <_start@@Base+0x54d4>
   17d54:	beq	17d6c <_start@@Base+0x56dc>
   17d58:	mov	r2, r5
   17d5c:	mov	r0, r6
   17d60:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17d64:	mov	r4, r0
   17d68:	b	17b64 <_start@@Base+0x54d4>
   17d6c:	ldrb	r3, [r4, #2]
   17d70:	cmp	r3, #32
   17d74:	addhi	r4, r4, #2
   17d78:	bls	17d58 <_start@@Base+0x56c8>
   17d7c:	b	17b64 <_start@@Base+0x54d4>
   17d80:	add	r1, r4, #1
   17d84:	sub	r3, r5, r1
   17d88:	cmp	r3, #1
   17d8c:	ble	17da4 <_start@@Base+0x5714>
   17d90:	ldrb	r3, [r4, #1]
   17d94:	cmp	r3, #32
   17d98:	movhi	r4, r1
   17d9c:	bhi	17db4 <_start@@Base+0x5724>
   17da0:	beq	17df0 <_start@@Base+0x5760>
   17da4:	mov	r2, r5
   17da8:	mov	r0, r6
   17dac:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17db0:	mov	r4, r0
   17db4:	cmp	r5, r4
   17db8:	beq	17e04 <_start@@Base+0x5774>
   17dbc:	ldrb	r3, [r4]
   17dc0:	cmp	r3, #125	; 0x7d
   17dc4:	movne	r3, #1
   17dc8:	strne	r3, [sp, #68]	; 0x44
   17dcc:	bne	17b64 <_start@@Base+0x54d4>
   17dd0:	mov	r3, #0
   17dd4:	str	r3, [sp, #68]	; 0x44
   17dd8:	mov	r2, r5
   17ddc:	add	r1, r4, #1
   17de0:	mov	r0, r6
   17de4:	bl	14544 <_start@@Base+0x1eb4>
   17de8:	mov	r4, r0
   17dec:	b	17b64 <_start@@Base+0x54d4>
   17df0:	ldrb	r3, [r4, #2]
   17df4:	cmp	r3, #32
   17df8:	addhi	r4, r4, #2
   17dfc:	bls	17da4 <_start@@Base+0x5714>
   17e00:	b	17db4 <_start@@Base+0x5724>
   17e04:	mov	r3, #0
   17e08:	str	r3, [sp, #68]	; 0x44
   17e0c:	mov	r3, #10
   17e10:	mov	r2, r5
   17e14:	mov	r1, r4
   17e18:	mov	r0, r6
   17e1c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17e20:	mov	r4, r0
   17e24:	b	17b64 <_start@@Base+0x54d4>
   17e28:	ldr	r3, [r6, #24]
   17e2c:	cmp	r3, #0
   17e30:	bne	174fc <_start@@Base+0x4e6c>
   17e34:	ldr	r0, [r6]
   17e38:	bl	24570 <flatcc_builder_end_table@@Base>
   17e3c:	ldr	r3, [sp, #40]	; 0x28
   17e40:	str	r0, [r3]
   17e44:	cmp	r0, #0
   17e48:	movne	r0, r4
   17e4c:	bne	17510 <_start@@Base+0x4e80>
   17e50:	b	174fc <_start@@Base+0x4e6c>
   17e54:	mov	r4, r7
   17e58:	b	17674 <_start@@Base+0x4fe4>
   17e5c:	mov	r1, r7
   17e60:	b	17934 <_start@@Base+0x52a4>
   17e64:	mov	r1, r7
   17e68:	b	17cf0 <_start@@Base+0x5660>
   17e6c:	mov	r4, r7
   17e70:	b	177dc <_start@@Base+0x514c>
   17e74:	nop	{0}
   17e78:	eorsvc	r0, r2, #0
   17e7c:	cmnvs	pc, #28416	; 0x6f00
   17e80:	andvc	r0, r0, #0
   17e84:	cmnvs	pc, #28416	; 0x6f00
   17e88:	andeq	r0, r0, r0
   17e8c:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   17e90:	strd	r4, [sp, #-16]!
   17e94:	str	r6, [sp, #8]
   17e98:	str	lr, [sp, #12]
   17e9c:	mov	r5, r0
   17ea0:	mov	r4, r2
   17ea4:	mov	r6, r3
   17ea8:	sub	r3, r2, r1
   17eac:	cmp	r3, #1
   17eb0:	ble	17ec4 <_start@@Base+0x5834>
   17eb4:	ldrb	r3, [r1]
   17eb8:	cmp	r3, #32
   17ebc:	bhi	17ed4 <_start@@Base+0x5844>
   17ec0:	beq	17f28 <_start@@Base+0x5898>
   17ec4:	mov	r2, r4
   17ec8:	mov	r0, r5
   17ecc:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17ed0:	mov	r1, r0
   17ed4:	cmp	r4, r1
   17ed8:	moveq	r3, #0
   17edc:	streq	r3, [r6]
   17ee0:	moveq	r0, r1
   17ee4:	beq	17f18 <_start@@Base+0x5888>
   17ee8:	ldrb	r3, [r1]
   17eec:	cmp	r3, #44	; 0x2c
   17ef0:	beq	17f84 <_start@@Base+0x58f4>
   17ef4:	mov	r3, #0
   17ef8:	str	r3, [r6]
   17efc:	ldrb	r3, [r1]
   17f00:	cmp	r3, #93	; 0x5d
   17f04:	beq	17f3c <_start@@Base+0x58ac>
   17f08:	mov	r3, #9
   17f0c:	mov	r2, r4
   17f10:	mov	r0, r5
   17f14:	bl	27930 <flatcc_json_parser_set_error@@Base>
   17f18:	ldrd	r4, [sp]
   17f1c:	ldr	r6, [sp, #8]
   17f20:	add	sp, sp, #12
   17f24:	pop	{pc}		; (ldr pc, [sp], #4)
   17f28:	ldrb	r3, [r1, #1]
   17f2c:	cmp	r3, #32
   17f30:	addhi	r1, r1, #1
   17f34:	bls	17ec4 <_start@@Base+0x5834>
   17f38:	b	17ed4 <_start@@Base+0x5844>
   17f3c:	add	r0, r1, #1
   17f40:	sub	r3, r4, r0
   17f44:	cmp	r3, #1
   17f48:	ble	17f5c <_start@@Base+0x58cc>
   17f4c:	ldrb	r3, [r1, #1]
   17f50:	cmp	r3, #32
   17f54:	bhi	17f18 <_start@@Base+0x5888>
   17f58:	beq	17f70 <_start@@Base+0x58e0>
   17f5c:	mov	r2, r4
   17f60:	mov	r1, r0
   17f64:	mov	r0, r5
   17f68:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17f6c:	b	17f18 <_start@@Base+0x5888>
   17f70:	ldrb	r3, [r1, #2]
   17f74:	cmp	r3, #32
   17f78:	addhi	r0, r1, #2
   17f7c:	bls	17f5c <_start@@Base+0x58cc>
   17f80:	b	17f18 <_start@@Base+0x5888>
   17f84:	add	r0, r1, #1
   17f88:	sub	r3, r4, r0
   17f8c:	cmp	r3, #1
   17f90:	ble	17fa4 <_start@@Base+0x5914>
   17f94:	ldrb	r3, [r1, #1]
   17f98:	cmp	r3, #32
   17f9c:	bhi	17fb4 <_start@@Base+0x5924>
   17fa0:	beq	17fec <_start@@Base+0x595c>
   17fa4:	mov	r2, r4
   17fa8:	mov	r1, r0
   17fac:	mov	r0, r5
   17fb0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   17fb4:	cmp	r4, r0
   17fb8:	beq	18000 <_start@@Base+0x5970>
   17fbc:	ldrb	r3, [r0]
   17fc0:	cmp	r3, #93	; 0x5d
   17fc4:	movne	r3, #1
   17fc8:	strne	r3, [r6]
   17fcc:	bne	17f18 <_start@@Base+0x5888>
   17fd0:	mov	r3, #0
   17fd4:	str	r3, [r6]
   17fd8:	mov	r2, r4
   17fdc:	add	r1, r0, #1
   17fe0:	mov	r0, r5
   17fe4:	bl	14544 <_start@@Base+0x1eb4>
   17fe8:	b	17f18 <_start@@Base+0x5888>
   17fec:	ldrb	r3, [r1, #2]
   17ff0:	cmp	r3, #32
   17ff4:	addhi	r0, r1, #2
   17ff8:	bls	17fa4 <_start@@Base+0x5914>
   17ffc:	b	17fb4 <_start@@Base+0x5924>
   18000:	mov	r3, #0
   18004:	str	r3, [r6]
   18008:	mov	r3, #9
   1800c:	mov	r2, r4
   18010:	mov	r1, r0
   18014:	mov	r0, r5
   18018:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1801c:	b	17f18 <_start@@Base+0x5888>
   18020:	strd	r4, [sp, #-16]!
   18024:	str	r6, [sp, #8]
   18028:	str	lr, [sp, #12]
   1802c:	mov	r5, r0
   18030:	mov	r4, r2
   18034:	mov	r6, r3
   18038:	sub	r3, r2, r1
   1803c:	cmp	r3, #1
   18040:	ble	18054 <_start@@Base+0x59c4>
   18044:	ldrb	r3, [r1]
   18048:	cmp	r3, #32
   1804c:	bhi	18064 <_start@@Base+0x59d4>
   18050:	beq	180b8 <_start@@Base+0x5a28>
   18054:	mov	r2, r4
   18058:	mov	r0, r5
   1805c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   18060:	mov	r1, r0
   18064:	cmp	r4, r1
   18068:	moveq	r3, #0
   1806c:	streq	r3, [r6]
   18070:	moveq	r0, r1
   18074:	beq	180a8 <_start@@Base+0x5a18>
   18078:	ldrb	r3, [r1]
   1807c:	cmp	r3, #44	; 0x2c
   18080:	beq	18114 <_start@@Base+0x5a84>
   18084:	mov	r3, #0
   18088:	str	r3, [r6]
   1808c:	ldrb	r3, [r1]
   18090:	cmp	r3, #125	; 0x7d
   18094:	beq	180cc <_start@@Base+0x5a3c>
   18098:	mov	r3, #10
   1809c:	mov	r2, r4
   180a0:	mov	r0, r5
   180a4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   180a8:	ldrd	r4, [sp]
   180ac:	ldr	r6, [sp, #8]
   180b0:	add	sp, sp, #12
   180b4:	pop	{pc}		; (ldr pc, [sp], #4)
   180b8:	ldrb	r3, [r1, #1]
   180bc:	cmp	r3, #32
   180c0:	addhi	r1, r1, #1
   180c4:	bls	18054 <_start@@Base+0x59c4>
   180c8:	b	18064 <_start@@Base+0x59d4>
   180cc:	add	r0, r1, #1
   180d0:	sub	r3, r4, r0
   180d4:	cmp	r3, #1
   180d8:	ble	180ec <_start@@Base+0x5a5c>
   180dc:	ldrb	r3, [r1, #1]
   180e0:	cmp	r3, #32
   180e4:	bhi	180a8 <_start@@Base+0x5a18>
   180e8:	beq	18100 <_start@@Base+0x5a70>
   180ec:	mov	r2, r4
   180f0:	mov	r1, r0
   180f4:	mov	r0, r5
   180f8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   180fc:	b	180a8 <_start@@Base+0x5a18>
   18100:	ldrb	r3, [r1, #2]
   18104:	cmp	r3, #32
   18108:	addhi	r0, r1, #2
   1810c:	bls	180ec <_start@@Base+0x5a5c>
   18110:	b	180a8 <_start@@Base+0x5a18>
   18114:	add	r0, r1, #1
   18118:	sub	r3, r4, r0
   1811c:	cmp	r3, #1
   18120:	ble	18134 <_start@@Base+0x5aa4>
   18124:	ldrb	r3, [r1, #1]
   18128:	cmp	r3, #32
   1812c:	bhi	18144 <_start@@Base+0x5ab4>
   18130:	beq	1817c <_start@@Base+0x5aec>
   18134:	mov	r2, r4
   18138:	mov	r1, r0
   1813c:	mov	r0, r5
   18140:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   18144:	cmp	r4, r0
   18148:	beq	18190 <_start@@Base+0x5b00>
   1814c:	ldrb	r3, [r0]
   18150:	cmp	r3, #125	; 0x7d
   18154:	movne	r3, #1
   18158:	strne	r3, [r6]
   1815c:	bne	180a8 <_start@@Base+0x5a18>
   18160:	mov	r3, #0
   18164:	str	r3, [r6]
   18168:	mov	r2, r4
   1816c:	add	r1, r0, #1
   18170:	mov	r0, r5
   18174:	bl	14544 <_start@@Base+0x1eb4>
   18178:	b	180a8 <_start@@Base+0x5a18>
   1817c:	ldrb	r3, [r1, #2]
   18180:	cmp	r3, #32
   18184:	addhi	r0, r1, #2
   18188:	bls	18134 <_start@@Base+0x5aa4>
   1818c:	b	18144 <_start@@Base+0x5ab4>
   18190:	mov	r3, #0
   18194:	str	r3, [r6]
   18198:	mov	r3, #10
   1819c:	mov	r2, r4
   181a0:	mov	r1, r0
   181a4:	mov	r0, r5
   181a8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   181ac:	b	180a8 <_start@@Base+0x5a18>
   181b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   181b4:	strd	r6, [sp, #8]
   181b8:	strd	r8, [sp, #16]
   181bc:	strd	sl, [sp, #24]
   181c0:	str	lr, [sp, #32]
   181c4:	sub	sp, sp, #52	; 0x34
   181c8:	mov	r6, r0
   181cc:	mov	r5, r2
   181d0:	str	r3, [sp, #12]
   181d4:	add	r3, sp, #44	; 0x2c
   181d8:	bl	14680 <_start@@Base+0x1ff0>
   181dc:	mov	r4, r0
   181e0:	mov	sl, #0
   181e4:	mov	fp, #1644167168	; 0x62000000
   181e8:	movw	r3, #57464	; 0xe078
   181ec:	movt	r3, #3
   181f0:	str	r3, [sp, #20]
   181f4:	add	r3, r3, #104	; 0x68
   181f8:	str	r3, [sp, #16]
   181fc:	b	18730 <_start@@Base+0x60a0>
   18200:	mov	r3, #5
   18204:	mov	r2, r5
   18208:	mov	r1, r4
   1820c:	mov	r0, r6
   18210:	bl	27930 <flatcc_json_parser_set_error@@Base>
   18214:	mov	r4, r0
   18218:	b	1876c <_start@@Base+0x60dc>
   1821c:	sub	r3, r2, #1
   18220:	cmp	r3, #7
   18224:	ldrls	pc, [pc, r3, lsl #2]
   18228:	b	18284 <_start@@Base+0x5bf4>
   1822c:	andeq	r8, r1, ip, ror r2
   18230:	andeq	r8, r1, r4, ror r2
   18234:	andeq	r8, r1, ip, ror #4
   18238:	andeq	r8, r1, r4, ror #4
   1823c:	andeq	r8, r1, ip, asr r2
   18240:	andeq	r8, r1, r4, asr r2
   18244:	andeq	r8, r1, ip, asr #4
   18248:	andeq	r8, r1, r8, ror r7
   1824c:	mov	r1, #0
   18250:	b	1877c <_start@@Base+0x60ec>
   18254:	mov	r3, #0
   18258:	b	18780 <_start@@Base+0x60f0>
   1825c:	mov	r3, #0
   18260:	b	18780 <_start@@Base+0x60f0>
   18264:	mov	r3, #0
   18268:	b	18780 <_start@@Base+0x60f0>
   1826c:	mov	r3, #0
   18270:	b	18788 <_start@@Base+0x60f8>
   18274:	mov	r3, #0
   18278:	b	18790 <_start@@Base+0x6100>
   1827c:	mov	r3, #0
   18280:	b	18798 <_start@@Base+0x6108>
   18284:	mov	r3, #0
   18288:	b	187a0 <_start@@Base+0x6110>
   1828c:	cmp	r2, #1
   18290:	ble	1845c <_start@@Base+0x5dcc>
   18294:	ldr	r3, [r6, #12]
   18298:	cmp	r3, r8
   1829c:	beq	18394 <_start@@Base+0x5d04>
   182a0:	ldrb	r3, [r4, #1]
   182a4:	cmp	r3, #58	; 0x3a
   182a8:	cmpne	r3, #32
   182ac:	bhi	1845c <_start@@Base+0x5dcc>
   182b0:	add	r1, r4, #1
   182b4:	str	r8, [r6, #12]
   182b8:	sub	r3, r5, r1
   182bc:	cmp	r3, #1
   182c0:	ble	182d4 <_start@@Base+0x5c44>
   182c4:	ldrb	r3, [r1]
   182c8:	cmp	r3, #32
   182cc:	bhi	182e4 <_start@@Base+0x5c54>
   182d0:	beq	183a8 <_start@@Base+0x5d18>
   182d4:	mov	r2, r5
   182d8:	mov	r0, r6
   182dc:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   182e0:	mov	r1, r0
   182e4:	cmp	r5, r1
   182e8:	beq	182f8 <_start@@Base+0x5c68>
   182ec:	ldrb	r3, [r1]
   182f0:	cmp	r3, #58	; 0x3a
   182f4:	beq	183bc <_start@@Base+0x5d2c>
   182f8:	mov	r3, #4
   182fc:	mov	r2, r5
   18300:	mov	r0, r6
   18304:	bl	27930 <flatcc_json_parser_set_error@@Base>
   18308:	mov	r7, r0
   1830c:	cmp	r4, r7
   18310:	beq	1845c <_start@@Base+0x5dcc>
   18314:	mov	r3, #0
   18318:	strb	r3, [sp, #26]
   1831c:	mov	r0, #0
   18320:	mov	r1, #0
   18324:	strd	r0, [sp, #32]
   18328:	str	r3, [sp, #28]
   1832c:	cmp	r5, r7
   18330:	beq	1892c <_start@@Base+0x629c>
   18334:	add	r3, sp, #32
   18338:	str	r3, [sp]
   1833c:	add	r3, sp, #28
   18340:	mov	r2, r5
   18344:	mov	r1, r7
   18348:	mov	r0, r6
   1834c:	bl	29968 <flatcc_json_parser_integer@@Base>
   18350:	mov	r4, r0
   18354:	cmp	r7, r0
   18358:	bne	183d4 <_start@@Base+0x5d44>
   1835c:	mov	r7, r4
   18360:	add	r3, sp, #26
   18364:	str	r3, [sp]
   18368:	ldr	r3, [sp, #20]
   1836c:	add	r3, r3, #92	; 0x5c
   18370:	mov	r2, r5
   18374:	mov	r1, r7
   18378:	mov	r0, r6
   1837c:	bl	15098 <_start@@Base+0x2a08>
   18380:	mov	r4, r0
   18384:	cmp	r5, r0
   18388:	cmpne	r0, r7
   1838c:	bne	18418 <_start@@Base+0x5d88>
   18390:	b	18578 <_start@@Base+0x5ee8>
   18394:	ldrb	r3, [r4, #1]
   18398:	cmp	r3, #34	; 0x22
   1839c:	bne	1845c <_start@@Base+0x5dcc>
   183a0:	add	r1, r4, #2
   183a4:	b	182b8 <_start@@Base+0x5c28>
   183a8:	ldrb	r3, [r1, #1]
   183ac:	cmp	r3, #32
   183b0:	addhi	r1, r1, #1
   183b4:	bls	182d4 <_start@@Base+0x5c44>
   183b8:	b	182e4 <_start@@Base+0x5c54>
   183bc:	mov	r2, r5
   183c0:	add	r1, r1, #1
   183c4:	mov	r0, r6
   183c8:	bl	14544 <_start@@Base+0x1eb4>
   183cc:	mov	r7, r0
   183d0:	b	1830c <_start@@Base+0x5c7c>
   183d4:	ldrd	r2, [sp, #32]
   183d8:	ldr	r1, [sp, #28]
   183dc:	cmp	r1, #0
   183e0:	beq	18428 <_start@@Base+0x5d98>
   183e4:	cmp	r3, #0
   183e8:	cmpeq	r2, #128	; 0x80
   183ec:	rsbls	r2, r2, #0
   183f0:	strbls	r2, [sp, #26]
   183f4:	bls	18418 <_start@@Base+0x5d88>
   183f8:	mov	r3, #8
   183fc:	mov	r2, r5
   18400:	mov	r1, r0
   18404:	mov	r0, r6
   18408:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1840c:	mov	r4, r0
   18410:	cmp	r7, r4
   18414:	beq	18454 <_start@@Base+0x5dc4>
   18418:	ldrb	r3, [sp, #26]
   1841c:	ldr	r2, [sp, #12]
   18420:	strb	r3, [r2, #2]
   18424:	b	187d4 <_start@@Base+0x6144>
   18428:	cmp	r3, #0
   1842c:	cmpeq	r2, #127	; 0x7f
   18430:	strbls	r2, [sp, #26]
   18434:	bls	18418 <_start@@Base+0x5d88>
   18438:	mov	r3, #7
   1843c:	mov	r2, r5
   18440:	mov	r1, r0
   18444:	mov	r0, r6
   18448:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1844c:	mov	r4, r0
   18450:	b	18410 <_start@@Base+0x5d80>
   18454:	mov	r7, r4
   18458:	b	18360 <_start@@Base+0x5cd0>
   1845c:	mov	r2, r5
   18460:	mov	r1, r4
   18464:	mov	r0, r6
   18468:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1846c:	mov	r4, r0
   18470:	b	187d4 <_start@@Base+0x6144>
   18474:	cmp	r2, #1
   18478:	ble	186b4 <_start@@Base+0x6024>
   1847c:	ldr	r3, [r6, #12]
   18480:	cmp	r3, #0
   18484:	beq	185b0 <_start@@Base+0x5f20>
   18488:	ldrb	r3, [r4, #1]
   1848c:	cmp	r3, #58	; 0x3a
   18490:	cmpne	r3, #32
   18494:	bhi	186b4 <_start@@Base+0x6024>
   18498:	add	r1, r4, #1
   1849c:	mov	r3, #0
   184a0:	str	r3, [r6, #12]
   184a4:	sub	r3, r5, r1
   184a8:	cmp	r3, #1
   184ac:	ble	184c0 <_start@@Base+0x5e30>
   184b0:	ldrb	r3, [r1]
   184b4:	cmp	r3, #32
   184b8:	bhi	184d0 <_start@@Base+0x5e40>
   184bc:	beq	185c4 <_start@@Base+0x5f34>
   184c0:	mov	r2, r5
   184c4:	mov	r0, r6
   184c8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   184cc:	mov	r1, r0
   184d0:	cmp	r5, r1
   184d4:	beq	184e4 <_start@@Base+0x5e54>
   184d8:	ldrb	r3, [r1]
   184dc:	cmp	r3, #58	; 0x3a
   184e0:	beq	185d8 <_start@@Base+0x5f48>
   184e4:	mov	r3, #4
   184e8:	mov	r2, r5
   184ec:	mov	r0, r6
   184f0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   184f4:	mov	r7, r0
   184f8:	cmp	r4, r7
   184fc:	beq	186b4 <_start@@Base+0x6024>
   18500:	mov	r3, #0
   18504:	strh	r3, [sp, #26]
   18508:	mov	r0, #0
   1850c:	mov	r1, #0
   18510:	strd	r0, [sp, #32]
   18514:	str	r3, [sp, #28]
   18518:	cmp	r5, r7
   1851c:	beq	18934 <_start@@Base+0x62a4>
   18520:	add	r3, sp, #32
   18524:	str	r3, [sp]
   18528:	add	r3, sp, #28
   1852c:	mov	r2, r5
   18530:	mov	r1, r7
   18534:	mov	r0, r6
   18538:	bl	29968 <flatcc_json_parser_integer@@Base>
   1853c:	mov	r4, r0
   18540:	cmp	r7, r0
   18544:	bne	18624 <_start@@Base+0x5f94>
   18548:	mov	r7, r4
   1854c:	add	r3, sp, #26
   18550:	str	r3, [sp]
   18554:	ldr	r3, [sp, #16]
   18558:	mov	r2, r5
   1855c:	mov	r1, r7
   18560:	mov	r0, r6
   18564:	bl	1578c <_start@@Base+0x30fc>
   18568:	mov	r4, r0
   1856c:	cmp	r5, r0
   18570:	cmpne	r0, r7
   18574:	bne	18668 <_start@@Base+0x5fd8>
   18578:	mov	r3, #33	; 0x21
   1857c:	mov	r2, r5
   18580:	mov	r1, r4
   18584:	mov	r0, r6
   18588:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1858c:	mov	r4, r0
   18590:	mov	r0, r4
   18594:	add	sp, sp, #52	; 0x34
   18598:	ldrd	r4, [sp]
   1859c:	ldrd	r6, [sp, #8]
   185a0:	ldrd	r8, [sp, #16]
   185a4:	ldrd	sl, [sp, #24]
   185a8:	add	sp, sp, #32
   185ac:	pop	{pc}		; (ldr pc, [sp], #4)
   185b0:	ldrb	r3, [r4, #1]
   185b4:	cmp	r3, #34	; 0x22
   185b8:	bne	186b4 <_start@@Base+0x6024>
   185bc:	add	r1, r4, #2
   185c0:	b	184a4 <_start@@Base+0x5e14>
   185c4:	ldrb	r3, [r1, #1]
   185c8:	cmp	r3, #32
   185cc:	addhi	r1, r1, #1
   185d0:	bls	184c0 <_start@@Base+0x5e30>
   185d4:	b	184d0 <_start@@Base+0x5e40>
   185d8:	add	r7, r1, #1
   185dc:	sub	r3, r5, r7
   185e0:	cmp	r3, #1
   185e4:	ble	185f8 <_start@@Base+0x5f68>
   185e8:	ldrb	r3, [r1, #1]
   185ec:	cmp	r3, #32
   185f0:	bhi	184f8 <_start@@Base+0x5e68>
   185f4:	beq	18610 <_start@@Base+0x5f80>
   185f8:	mov	r2, r5
   185fc:	mov	r1, r7
   18600:	mov	r0, r6
   18604:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   18608:	mov	r7, r0
   1860c:	b	184f8 <_start@@Base+0x5e68>
   18610:	ldrb	r3, [r1, #2]
   18614:	cmp	r3, #32
   18618:	addhi	r7, r1, #2
   1861c:	bls	185f8 <_start@@Base+0x5f68>
   18620:	b	184f8 <_start@@Base+0x5e68>
   18624:	ldrd	r2, [sp, #32]
   18628:	ldr	r1, [sp, #28]
   1862c:	cmp	r1, #0
   18630:	beq	18678 <_start@@Base+0x5fe8>
   18634:	cmp	r3, #0
   18638:	cmpeq	r2, #32768	; 0x8000
   1863c:	rsbls	r2, r2, #0
   18640:	strhls	r2, [sp, #26]
   18644:	bls	18668 <_start@@Base+0x5fd8>
   18648:	mov	r3, #8
   1864c:	mov	r2, r5
   18650:	mov	r1, r0
   18654:	mov	r0, r6
   18658:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1865c:	mov	r4, r0
   18660:	cmp	r7, r4
   18664:	beq	186ac <_start@@Base+0x601c>
   18668:	ldrh	r3, [sp, #26]
   1866c:	ldr	r2, [sp, #12]
   18670:	strh	r3, [r2]
   18674:	b	187d4 <_start@@Base+0x6144>
   18678:	movw	r0, #32767	; 0x7fff
   1867c:	mov	r1, #0
   18680:	cmp	r3, r1
   18684:	cmpeq	r2, r0
   18688:	strhls	r2, [sp, #26]
   1868c:	bls	18668 <_start@@Base+0x5fd8>
   18690:	mov	r3, #7
   18694:	mov	r2, r5
   18698:	mov	r1, r4
   1869c:	mov	r0, r6
   186a0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   186a4:	mov	r4, r0
   186a8:	b	18660 <_start@@Base+0x5fd0>
   186ac:	mov	r7, r4
   186b0:	b	1854c <_start@@Base+0x5ebc>
   186b4:	mov	r2, r5
   186b8:	mov	r1, r4
   186bc:	mov	r0, r6
   186c0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   186c4:	mov	r4, r0
   186c8:	b	187d4 <_start@@Base+0x6144>
   186cc:	mov	r4, r5
   186d0:	b	187c0 <_start@@Base+0x6130>
   186d4:	mov	r2, r5
   186d8:	mov	r1, r4
   186dc:	mov	r0, r6
   186e0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   186e4:	mov	r4, r0
   186e8:	cmp	r5, r4
   186ec:	moveq	r3, #0
   186f0:	streq	r3, [sp, #44]	; 0x2c
   186f4:	beq	18730 <_start@@Base+0x60a0>
   186f8:	ldrb	r3, [r4]
   186fc:	cmp	r3, #44	; 0x2c
   18700:	beq	18850 <_start@@Base+0x61c0>
   18704:	mov	r3, #0
   18708:	str	r3, [sp, #44]	; 0x2c
   1870c:	ldrb	r3, [r4]
   18710:	cmp	r3, #125	; 0x7d
   18714:	beq	18804 <_start@@Base+0x6174>
   18718:	mov	r3, #10
   1871c:	mov	r2, r5
   18720:	mov	r1, r4
   18724:	mov	r0, r6
   18728:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1872c:	mov	r4, r0
   18730:	ldr	r3, [sp, #44]	; 0x2c
   18734:	cmp	r3, #0
   18738:	beq	18590 <_start@@Base+0x5f00>
   1873c:	cmp	r4, r5
   18740:	beq	186cc <_start@@Base+0x603c>
   18744:	ldrb	r3, [r4]
   18748:	cmp	r3, #34	; 0x22
   1874c:	addeq	r4, r4, #1
   18750:	moveq	r3, #0
   18754:	streq	r3, [r6, #12]
   18758:	beq	1876c <_start@@Base+0x60dc>
   1875c:	cmp	r3, #46	; 0x2e
   18760:	movne	r3, #1
   18764:	strne	r3, [r6, #12]
   18768:	beq	18200 <_start@@Base+0x5b70>
   1876c:	sub	r2, r5, r4
   18770:	cmp	r2, #8
   18774:	bls	1821c <_start@@Base+0x5b8c>
   18778:	mov	r1, #0
   1877c:	mov	r3, r1
   18780:	ldrb	r0, [r4, #3]
   18784:	orr	r3, r3, r0
   18788:	ldrb	r0, [r4, #2]
   1878c:	orr	r3, r3, r0, lsl #8
   18790:	ldrb	r0, [r4, #1]
   18794:	orr	r3, r3, r0, lsl #16
   18798:	ldrb	r0, [r4]
   1879c:	orr	r3, r3, r0, lsl #24
   187a0:	mov	r8, #0
   187a4:	and	r9, r3, #-16777216	; 0xff000000
   187a8:	cmp	r9, fp
   187ac:	cmpeq	r8, sl
   187b0:	beq	1828c <_start@@Base+0x5bfc>
   187b4:	cmp	r9, #1627389952	; 0x61000000
   187b8:	cmpeq	r8, #0
   187bc:	beq	18474 <_start@@Base+0x5de4>
   187c0:	mov	r2, r5
   187c4:	mov	r1, r4
   187c8:	mov	r0, r6
   187cc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   187d0:	mov	r4, r0
   187d4:	sub	r3, r5, r4
   187d8:	cmp	r3, #1
   187dc:	ble	186d4 <_start@@Base+0x6044>
   187e0:	ldrb	r3, [r4]
   187e4:	cmp	r3, #32
   187e8:	bhi	186e8 <_start@@Base+0x6058>
   187ec:	bne	186d4 <_start@@Base+0x6044>
   187f0:	ldrb	r3, [r4, #1]
   187f4:	cmp	r3, #32
   187f8:	addhi	r4, r4, #1
   187fc:	bls	186d4 <_start@@Base+0x6044>
   18800:	b	186e8 <_start@@Base+0x6058>
   18804:	add	r1, r4, #1
   18808:	sub	r3, r5, r1
   1880c:	cmp	r3, #1
   18810:	ble	18828 <_start@@Base+0x6198>
   18814:	ldrb	r3, [r4, #1]
   18818:	cmp	r3, #32
   1881c:	movhi	r4, r1
   18820:	bhi	18730 <_start@@Base+0x60a0>
   18824:	beq	1883c <_start@@Base+0x61ac>
   18828:	mov	r2, r5
   1882c:	mov	r0, r6
   18830:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   18834:	mov	r4, r0
   18838:	b	18730 <_start@@Base+0x60a0>
   1883c:	ldrb	r3, [r4, #2]
   18840:	cmp	r3, #32
   18844:	addhi	r4, r4, #2
   18848:	bls	18828 <_start@@Base+0x6198>
   1884c:	b	18730 <_start@@Base+0x60a0>
   18850:	add	r1, r4, #1
   18854:	sub	r3, r5, r1
   18858:	cmp	r3, #1
   1885c:	ble	18874 <_start@@Base+0x61e4>
   18860:	ldrb	r3, [r4, #1]
   18864:	cmp	r3, #32
   18868:	movhi	r4, r1
   1886c:	bhi	18884 <_start@@Base+0x61f4>
   18870:	beq	188e0 <_start@@Base+0x6250>
   18874:	mov	r2, r5
   18878:	mov	r0, r6
   1887c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   18880:	mov	r4, r0
   18884:	cmp	r5, r4
   18888:	beq	188f4 <_start@@Base+0x6264>
   1888c:	ldrb	r3, [r4]
   18890:	cmp	r3, #125	; 0x7d
   18894:	movne	r3, #1
   18898:	strne	r3, [sp, #44]	; 0x2c
   1889c:	bne	18730 <_start@@Base+0x60a0>
   188a0:	mov	r3, #0
   188a4:	str	r3, [sp, #44]	; 0x2c
   188a8:	add	r1, r4, #1
   188ac:	sub	r3, r5, r1
   188b0:	cmp	r3, #1
   188b4:	ble	188cc <_start@@Base+0x623c>
   188b8:	ldrb	r3, [r4, #1]
   188bc:	cmp	r3, #32
   188c0:	movhi	r4, r1
   188c4:	bhi	18730 <_start@@Base+0x60a0>
   188c8:	beq	18918 <_start@@Base+0x6288>
   188cc:	mov	r2, r5
   188d0:	mov	r0, r6
   188d4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   188d8:	mov	r4, r0
   188dc:	b	18730 <_start@@Base+0x60a0>
   188e0:	ldrb	r3, [r4, #2]
   188e4:	cmp	r3, #32
   188e8:	addhi	r4, r4, #2
   188ec:	bls	18874 <_start@@Base+0x61e4>
   188f0:	b	18884 <_start@@Base+0x61f4>
   188f4:	mov	r3, #0
   188f8:	str	r3, [sp, #44]	; 0x2c
   188fc:	mov	r3, #10
   18900:	mov	r2, r5
   18904:	mov	r1, r4
   18908:	mov	r0, r6
   1890c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   18910:	mov	r4, r0
   18914:	b	18730 <_start@@Base+0x60a0>
   18918:	ldrb	r3, [r4, #2]
   1891c:	cmp	r3, #32
   18920:	addhi	r4, r4, #2
   18924:	bls	188cc <_start@@Base+0x623c>
   18928:	b	18730 <_start@@Base+0x60a0>
   1892c:	mov	r4, r7
   18930:	b	1835c <_start@@Base+0x5ccc>
   18934:	mov	r4, r7
   18938:	b	18548 <_start@@Base+0x5eb8>
   1893c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18940:	strd	r6, [sp, #8]
   18944:	strd	r8, [sp, #16]
   18948:	strd	sl, [sp, #24]
   1894c:	str	lr, [sp, #32]
   18950:	vpush	{d8-d9}
   18954:	sub	sp, sp, #396	; 0x18c
   18958:	mov	fp, r0
   1895c:	mov	r8, r1
   18960:	mov	r9, r2
   18964:	mov	r2, r3
   18968:	str	r3, [sp, #124]	; 0x7c
   1896c:	mov	r3, #0
   18970:	str	r3, [r2]
   18974:	mov	r1, #36	; 0x24
   18978:	ldr	r0, [r0]
   1897c:	bl	23a98 <flatcc_builder_start_table@@Base>
   18980:	cmp	r0, #0
   18984:	beq	189c4 <_start@@Base+0x6334>
   18988:	mov	r3, #33	; 0x21
   1898c:	mov	r2, r9
   18990:	mov	r1, r8
   18994:	mov	r0, fp
   18998:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1899c:	mov	r4, r0
   189a0:	mov	r0, r4
   189a4:	add	sp, sp, #396	; 0x18c
   189a8:	vpop	{d8-d9}
   189ac:	ldrd	r4, [sp]
   189b0:	ldrd	r6, [sp, #8]
   189b4:	ldrd	r8, [sp, #16]
   189b8:	ldrd	sl, [sp, #24]
   189bc:	add	sp, sp, #32
   189c0:	pop	{pc}		; (ldr pc, [sp], #4)
   189c4:	add	r3, sp, #380	; 0x17c
   189c8:	str	r3, [sp]
   189cc:	mov	r3, #1
   189d0:	mov	r2, r9
   189d4:	mov	r1, r8
   189d8:	mov	r0, fp
   189dc:	bl	2a0b0 <flatcc_json_parser_prepare_unions@@Base>
   189e0:	cmp	r9, r0
   189e4:	beq	18988 <_start@@Base+0x62f8>
   189e8:	add	r3, sp, #388	; 0x184
   189ec:	mov	r2, r9
   189f0:	mov	r1, r8
   189f4:	mov	r0, fp
   189f8:	bl	14680 <_start@@Base+0x1ff0>
   189fc:	mov	r8, r0
   18a00:	ldr	r3, [sp, #388]	; 0x184
   18a04:	cmp	r3, #0
   18a08:	beq	1d7e4 <_start@@Base+0xb154>
   18a0c:	mov	sl, fp
   18a10:	b	1c61c <_start@@Base+0x9f8c>
   18a14:	mov	r3, #5
   18a18:	mov	r2, r9
   18a1c:	mov	r1, r8
   18a20:	mov	r0, sl
   18a24:	bl	27930 <flatcc_json_parser_set_error@@Base>
   18a28:	mov	r8, r0
   18a2c:	b	1c64c <_start@@Base+0x9fbc>
   18a30:	mov	r3, #5
   18a34:	mov	r2, r9
   18a38:	mov	r1, r8
   18a3c:	mov	r0, sl
   18a40:	bl	14594 <_start@@Base+0x1f04>
   18a44:	cmp	r0, r8
   18a48:	beq	18a90 <_start@@Base+0x6400>
   18a4c:	add	r3, sp, #384	; 0x180
   18a50:	mov	r2, r9
   18a54:	mov	r1, r0
   18a58:	mov	r0, sl
   18a5c:	bl	1893c <_start@@Base+0x62ac>
   18a60:	mov	r8, r0
   18a64:	ldr	r3, [sp, #384]	; 0x180
   18a68:	cmp	r3, #0
   18a6c:	beq	1d8b4 <_start@@Base+0xb224>
   18a70:	mov	r1, #12
   18a74:	ldr	r0, [sl]
   18a78:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   18a7c:	cmp	r0, #0
   18a80:	beq	1d8bc <_start@@Base+0xb22c>
   18a84:	ldr	r3, [sp, #384]	; 0x180
   18a88:	str	r3, [r0]
   18a8c:	b	1c5f8 <_start@@Base+0x9f68>
   18a90:	mov	r2, r9
   18a94:	mov	r1, r8
   18a98:	mov	r0, sl
   18a9c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18aa0:	mov	r8, r0
   18aa4:	b	1c5f8 <_start@@Base+0x9f68>
   18aa8:	mov	r3, #5
   18aac:	mov	r2, r9
   18ab0:	mov	r1, r8
   18ab4:	mov	r0, sl
   18ab8:	bl	14594 <_start@@Base+0x1f04>
   18abc:	mov	r4, r0
   18ac0:	cmp	r0, r8
   18ac4:	beq	18c0c <_start@@Base+0x657c>
   18ac8:	mov	r3, #0
   18acc:	strb	r3, [sp, #360]	; 0x168
   18ad0:	mov	r0, #0
   18ad4:	mov	r1, #0
   18ad8:	add	r2, sp, #368	; 0x170
   18adc:	strd	r0, [r2]
   18ae0:	str	r3, [sp, #364]	; 0x16c
   18ae4:	cmp	r9, r4
   18ae8:	beq	1dab8 <_start@@Base+0xb428>
   18aec:	str	r2, [sp]
   18af0:	add	r3, sp, #364	; 0x16c
   18af4:	mov	r2, r9
   18af8:	mov	r1, r4
   18afc:	mov	r0, sl
   18b00:	bl	29968 <flatcc_json_parser_integer@@Base>
   18b04:	mov	r8, r0
   18b08:	cmp	r4, r0
   18b0c:	bne	18b48 <_start@@Base+0x64b8>
   18b10:	mov	r4, r8
   18b14:	add	r3, sp, #360	; 0x168
   18b18:	str	r3, [sp]
   18b1c:	ldr	r3, [pc, #1332]	; 19058 <_start@@Base+0x69c8>
   18b20:	mov	r2, r9
   18b24:	mov	r1, r4
   18b28:	mov	r0, sl
   18b2c:	bl	15098 <_start@@Base+0x2a08>
   18b30:	mov	r8, r0
   18b34:	cmp	r9, r0
   18b38:	cmpne	r0, r4
   18b3c:	bne	18b90 <_start@@Base+0x6500>
   18b40:	mov	fp, sl
   18b44:	b	18988 <_start@@Base+0x62f8>
   18b48:	add	r3, sp, #368	; 0x170
   18b4c:	ldrd	r2, [r3]
   18b50:	ldr	r1, [sp, #364]	; 0x16c
   18b54:	cmp	r1, #0
   18b58:	beq	18bd8 <_start@@Base+0x6548>
   18b5c:	cmp	r3, #0
   18b60:	cmpeq	r2, #128	; 0x80
   18b64:	rsbls	r2, r2, #0
   18b68:	strbls	r2, [sp, #360]	; 0x168
   18b6c:	bls	18b90 <_start@@Base+0x6500>
   18b70:	mov	r3, #8
   18b74:	mov	r2, r9
   18b78:	mov	r1, r0
   18b7c:	mov	r0, sl
   18b80:	bl	27930 <flatcc_json_parser_set_error@@Base>
   18b84:	mov	r8, r0
   18b88:	cmp	r4, r8
   18b8c:	beq	18c04 <_start@@Base+0x6574>
   18b90:	add	r3, sp, #360	; 0x168
   18b94:	ldrsb	r3, [r3]
   18b98:	cmp	r3, #8
   18b9c:	bne	18bac <_start@@Base+0x651c>
   18ba0:	ldr	r3, [sl, #8]
   18ba4:	tst	r3, #2
   18ba8:	beq	1c5f8 <_start@@Base+0x9f68>
   18bac:	mov	r3, #1
   18bb0:	mov	r2, r3
   18bb4:	mov	r1, #6
   18bb8:	ldr	r0, [sl]
   18bbc:	bl	2565c <flatcc_builder_table_add@@Base>
   18bc0:	cmp	r0, #0
   18bc4:	beq	1d8c4 <_start@@Base+0xb234>
   18bc8:	add	r3, sp, #360	; 0x168
   18bcc:	ldrsb	r3, [r3]
   18bd0:	strb	r3, [r0]
   18bd4:	b	1c5f8 <_start@@Base+0x9f68>
   18bd8:	cmp	r3, #0
   18bdc:	cmpeq	r2, #127	; 0x7f
   18be0:	strbls	r2, [sp, #360]	; 0x168
   18be4:	bls	18b90 <_start@@Base+0x6500>
   18be8:	mov	r3, #7
   18bec:	mov	r2, r9
   18bf0:	mov	r1, r0
   18bf4:	mov	r0, sl
   18bf8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   18bfc:	mov	r8, r0
   18c00:	b	18b88 <_start@@Base+0x64f8>
   18c04:	mov	r4, r8
   18c08:	b	18b14 <_start@@Base+0x6484>
   18c0c:	mov	r2, r9
   18c10:	mov	r1, r8
   18c14:	mov	r0, sl
   18c18:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18c1c:	mov	r8, r0
   18c20:	b	1c5f8 <_start@@Base+0x9f68>
   18c24:	mvn	r2, #0
   18c28:	movw	r3, #65535	; 0xffff
   18c2c:	movt	r3, #26735	; 0x686f
   18c30:	cmp	r1, r3
   18c34:	cmpeq	r0, r2
   18c38:	bhi	18dc4 <_start@@Base+0x6734>
   18c3c:	mov	r3, #0
   18c40:	str	r3, [sp, #96]	; 0x60
   18c44:	str	r1, [sp, #100]	; 0x64
   18c48:	add	r3, pc, #1000	; 0x3e8
   18c4c:	ldrd	r2, [r3]
   18c50:	ldrd	r0, [sp, #96]	; 0x60
   18c54:	cmp	r1, r3
   18c58:	cmpeq	r0, r2
   18c5c:	beq	18c78 <_start@@Base+0x65e8>
   18c60:	mov	r2, r9
   18c64:	mov	r1, r8
   18c68:	mov	r0, sl
   18c6c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18c70:	mov	r8, r0
   18c74:	b	1c5f8 <_start@@Base+0x9f68>
   18c78:	mov	r3, #4
   18c7c:	mov	r2, r9
   18c80:	mov	r1, r8
   18c84:	mov	r0, sl
   18c88:	bl	14594 <_start@@Base+0x1f04>
   18c8c:	mov	r4, r0
   18c90:	cmp	r0, r8
   18c94:	bne	18cb0 <_start@@Base+0x6620>
   18c98:	mov	r2, r9
   18c9c:	mov	r1, r8
   18ca0:	mov	r0, sl
   18ca4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18ca8:	mov	r8, r0
   18cac:	b	1c5f8 <_start@@Base+0x9f68>
   18cb0:	mvn	r3, #0
   18cb4:	mov	r2, #1
   18cb8:	mov	r1, r2
   18cbc:	ldr	r0, [sl]
   18cc0:	bl	237a0 <flatcc_builder_start_vector@@Base>
   18cc4:	cmp	r0, #0
   18cc8:	bne	1d884 <_start@@Base+0xb1f4>
   18ccc:	add	r3, sp, #388	; 0x184
   18cd0:	mov	r2, r9
   18cd4:	mov	r1, r4
   18cd8:	mov	r0, sl
   18cdc:	bl	14754 <_start@@Base+0x20c4>
   18ce0:	mov	r8, r0
   18ce4:	ldr	r3, [sp, #388]	; 0x184
   18ce8:	cmp	r3, #0
   18cec:	beq	18d90 <_start@@Base+0x6700>
   18cf0:	mov	r5, #0
   18cf4:	ldr	fp, [pc, #864]	; 1905c <_start@@Base+0x69cc>
   18cf8:	b	18d28 <_start@@Base+0x6698>
   18cfc:	ldrb	r3, [sp, #368]	; 0x170
   18d00:	strb	r3, [r4]
   18d04:	add	r3, sp, #388	; 0x184
   18d08:	mov	r2, r9
   18d0c:	mov	r1, r0
   18d10:	mov	r0, sl
   18d14:	bl	17e90 <_start@@Base+0x5800>
   18d18:	mov	r8, r0
   18d1c:	ldr	r3, [sp, #388]	; 0x184
   18d20:	cmp	r3, #0
   18d24:	beq	18d90 <_start@@Base+0x6700>
   18d28:	strb	r5, [sp, #368]	; 0x170
   18d2c:	mov	r1, #1
   18d30:	ldr	r0, [sl]
   18d34:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   18d38:	subs	r4, r0, #0
   18d3c:	beq	1d8cc <_start@@Base+0xb23c>
   18d40:	add	r3, sp, #368	; 0x170
   18d44:	mov	r2, r9
   18d48:	mov	r1, r8
   18d4c:	mov	r0, sl
   18d50:	bl	143a8 <_start@@Base+0x1d18>
   18d54:	cmp	r0, r8
   18d58:	bne	18cfc <_start@@Base+0x666c>
   18d5c:	add	r3, sp, #368	; 0x170
   18d60:	str	r3, [sp]
   18d64:	mov	r3, fp
   18d68:	mov	r2, r9
   18d6c:	mov	r1, r8
   18d70:	mov	r0, sl
   18d74:	bl	159ec <_start@@Base+0x335c>
   18d78:	cmp	r9, r0
   18d7c:	cmpne	r0, r8
   18d80:	bne	18cfc <_start@@Base+0x666c>
   18d84:	mov	fp, sl
   18d88:	mov	r8, r0
   18d8c:	b	18988 <_start@@Base+0x62f8>
   18d90:	ldr	r0, [sl]
   18d94:	bl	248a4 <flatcc_builder_end_vector@@Base>
   18d98:	str	r0, [sp, #384]	; 0x180
   18d9c:	cmp	r0, #0
   18da0:	beq	1d8d4 <_start@@Base+0xb244>
   18da4:	mov	r1, #30
   18da8:	ldr	r0, [sl]
   18dac:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   18db0:	cmp	r0, #0
   18db4:	beq	1d8dc <_start@@Base+0xb24c>
   18db8:	ldr	r3, [sp, #384]	; 0x180
   18dbc:	str	r3, [r0]
   18dc0:	b	1c5f8 <_start@@Base+0x9f68>
   18dc4:	add	r3, pc, #628	; 0x274
   18dc8:	ldrd	r2, [r3]
   18dcc:	cmp	r1, r3
   18dd0:	cmpeq	r0, r2
   18dd4:	bhi	18f14 <_start@@Base+0x6884>
   18dd8:	mov	r3, #0
   18ddc:	str	r3, [sp, #128]	; 0x80
   18de0:	lsr	r3, r1, #16
   18de4:	lsl	r3, r3, #16
   18de8:	str	r3, [sp, #132]	; 0x84
   18dec:	mov	r2, #0
   18df0:	mov	r3, #0
   18df4:	movt	r3, #26736	; 0x6870
   18df8:	ldrd	r0, [sp, #128]	; 0x80
   18dfc:	cmp	r1, r3
   18e00:	cmpeq	r0, r2
   18e04:	beq	18e20 <_start@@Base+0x6790>
   18e08:	mov	r2, r9
   18e0c:	mov	r1, r8
   18e10:	mov	r0, sl
   18e14:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18e18:	mov	r8, r0
   18e1c:	b	1c5f8 <_start@@Base+0x9f68>
   18e20:	mov	r3, #2
   18e24:	mov	r2, r9
   18e28:	mov	r1, r8
   18e2c:	mov	r0, sl
   18e30:	bl	14594 <_start@@Base+0x1f04>
   18e34:	mov	r4, r0
   18e38:	cmp	r0, r8
   18e3c:	beq	18efc <_start@@Base+0x686c>
   18e40:	mov	r3, #0
   18e44:	add	r2, sp, #368	; 0x170
   18e48:	strh	r3, [r2]
   18e4c:	mov	r3, r2
   18e50:	mov	r2, r9
   18e54:	mov	r1, r0
   18e58:	mov	r0, sl
   18e5c:	bl	14074 <_start@@Base+0x19e4>
   18e60:	mov	r8, r0
   18e64:	cmp	r4, r0
   18e68:	beq	18eb4 <_start@@Base+0x6824>
   18e6c:	add	r3, sp, #368	; 0x170
   18e70:	ldrsh	r3, [r3]
   18e74:	cmp	r3, #100	; 0x64
   18e78:	bne	18e88 <_start@@Base+0x67f8>
   18e7c:	ldr	r3, [sl, #8]
   18e80:	tst	r3, #2
   18e84:	beq	1c5f8 <_start@@Base+0x9f68>
   18e88:	mov	r3, #2
   18e8c:	mov	r2, r3
   18e90:	mov	r1, r3
   18e94:	ldr	r0, [sl]
   18e98:	bl	2565c <flatcc_builder_table_add@@Base>
   18e9c:	cmp	r0, #0
   18ea0:	beq	18ee4 <_start@@Base+0x6854>
   18ea4:	add	r3, sp, #368	; 0x170
   18ea8:	ldrsh	r3, [r3]
   18eac:	strh	r3, [r0]
   18eb0:	b	1c5f8 <_start@@Base+0x9f68>
   18eb4:	add	r3, sp, #368	; 0x170
   18eb8:	str	r3, [sp]
   18ebc:	ldr	r3, [pc, #412]	; 19060 <_start@@Base+0x69d0>
   18ec0:	mov	r2, r9
   18ec4:	mov	r1, r0
   18ec8:	mov	r0, sl
   18ecc:	bl	1578c <_start@@Base+0x30fc>
   18ed0:	cmp	r9, r0
   18ed4:	cmpne	r8, r0
   18ed8:	beq	18ef4 <_start@@Base+0x6864>
   18edc:	mov	r8, r0
   18ee0:	b	18e6c <_start@@Base+0x67dc>
   18ee4:	mov	fp, sl
   18ee8:	mov	r0, r8
   18eec:	mov	r8, r0
   18ef0:	b	18988 <_start@@Base+0x62f8>
   18ef4:	mov	fp, sl
   18ef8:	b	18eec <_start@@Base+0x685c>
   18efc:	mov	r2, r9
   18f00:	mov	r1, r8
   18f04:	mov	r0, sl
   18f08:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18f0c:	mov	r8, r0
   18f10:	b	1c5f8 <_start@@Base+0x9f68>
   18f14:	add	r3, pc, #300	; 0x12c
   18f18:	ldrd	r2, [r3]
   18f1c:	cmp	r1, r3
   18f20:	cmpeq	r0, r2
   18f24:	beq	18f64 <_start@@Base+0x68d4>
   18f28:	mov	r3, #0
   18f2c:	str	r3, [sp, #208]	; 0xd0
   18f30:	str	r1, [sp, #212]	; 0xd4
   18f34:	add	r3, pc, #276	; 0x114
   18f38:	ldrd	r2, [r3]
   18f3c:	ldrd	r0, [sp, #208]	; 0xd0
   18f40:	cmp	r1, r3
   18f44:	cmpeq	r0, r2
   18f48:	beq	19134 <_start@@Base+0x6aa4>
   18f4c:	mov	r2, r9
   18f50:	mov	r1, r8
   18f54:	mov	r0, sl
   18f58:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18f5c:	mov	r8, r0
   18f60:	b	1c5f8 <_start@@Base+0x9f68>
   18f64:	add	r4, r8, #8
   18f68:	mov	r1, r9
   18f6c:	mov	r0, r4
   18f70:	bl	12780 <_start@@Base+0xf0>
   18f74:	mov	r3, #0
   18f78:	str	r3, [sp, #272]	; 0x110
   18f7c:	and	r3, r1, #-16777216	; 0xff000000
   18f80:	str	r3, [sp, #276]	; 0x114
   18f84:	add	r3, sp, #272	; 0x110
   18f88:	ldrd	r2, [r3]
   18f8c:	cmp	r3, #2030043136	; 0x79000000
   18f90:	cmpeq	r2, #0
   18f94:	beq	18fb0 <_start@@Base+0x6920>
   18f98:	mov	r2, r9
   18f9c:	mov	r1, r4
   18fa0:	mov	r0, sl
   18fa4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18fa8:	mov	r8, r0
   18fac:	b	1c5f8 <_start@@Base+0x9f68>
   18fb0:	mov	r3, #1
   18fb4:	mov	r2, r9
   18fb8:	mov	r1, r4
   18fbc:	mov	r0, sl
   18fc0:	bl	14594 <_start@@Base+0x1f04>
   18fc4:	mov	r8, r0
   18fc8:	cmp	r4, r0
   18fcc:	bne	18fe8 <_start@@Base+0x6958>
   18fd0:	mov	r2, r9
   18fd4:	mov	r1, r0
   18fd8:	mov	r0, sl
   18fdc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   18fe0:	mov	r8, r0
   18fe4:	b	1c5f8 <_start@@Base+0x9f68>
   18fe8:	mvn	r3, #0
   18fec:	mov	r2, #1
   18ff0:	mov	r1, r2
   18ff4:	ldr	r0, [sl]
   18ff8:	bl	237a0 <flatcc_builder_start_vector@@Base>
   18ffc:	cmp	r0, #0
   19000:	bne	1d8e4 <_start@@Base+0xb254>
   19004:	add	r3, sp, #388	; 0x184
   19008:	mov	r2, r9
   1900c:	mov	r1, r8
   19010:	mov	r0, sl
   19014:	bl	14754 <_start@@Base+0x20c4>
   19018:	mov	r8, r0
   1901c:	ldr	r3, [sp, #388]	; 0x184
   19020:	cmp	r3, #0
   19024:	beq	19100 <_start@@Base+0x6a70>
   19028:	mov	r5, #0
   1902c:	ldr	fp, [pc, #48]	; 19064 <_start@@Base+0x69d4>
   19030:	b	19098 <_start@@Base+0x6a08>
   19034:	nop	{0}
   19038:	andeq	r0, r0, r0
   1903c:			; <UNDEFINED> instruction: 0x666c6578
   19040:	mrcvs	15, 3, r6, cr4, cr1, {3}
   19044:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   19048:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1904c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   19050:	andeq	r0, r0, r0
   19054:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   19058:	andeq	lr, r3, ip, ror #1
   1905c:	strdeq	lr, [r3], -ip
   19060:	andeq	lr, r3, r8, lsl #2
   19064:	andeq	lr, r3, r4, lsl r1
   19068:	andeq	lr, r3, r0, lsr #2
   1906c:	ldrb	r3, [sp, #368]	; 0x170
   19070:	strb	r3, [r4]
   19074:	add	r3, sp, #388	; 0x184
   19078:	mov	r2, r9
   1907c:	mov	r1, r0
   19080:	mov	r0, sl
   19084:	bl	17e90 <_start@@Base+0x5800>
   19088:	mov	r8, r0
   1908c:	ldr	r3, [sp, #388]	; 0x184
   19090:	cmp	r3, #0
   19094:	beq	19100 <_start@@Base+0x6a70>
   19098:	strb	r5, [sp, #368]	; 0x170
   1909c:	mov	r1, #1
   190a0:	ldr	r0, [sl]
   190a4:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   190a8:	subs	r4, r0, #0
   190ac:	beq	1d8ec <_start@@Base+0xb25c>
   190b0:	add	r3, sp, #368	; 0x170
   190b4:	mov	r2, r9
   190b8:	mov	r1, r8
   190bc:	mov	r0, sl
   190c0:	bl	143a8 <_start@@Base+0x1d18>
   190c4:	cmp	r0, r8
   190c8:	bne	1906c <_start@@Base+0x69dc>
   190cc:	add	r3, sp, #368	; 0x170
   190d0:	str	r3, [sp]
   190d4:	mov	r3, fp
   190d8:	mov	r2, r9
   190dc:	mov	r1, r8
   190e0:	mov	r0, sl
   190e4:	bl	159ec <_start@@Base+0x335c>
   190e8:	cmp	r9, r0
   190ec:	cmpne	r0, r8
   190f0:	bne	1906c <_start@@Base+0x69dc>
   190f4:	mov	fp, sl
   190f8:	mov	r8, r0
   190fc:	b	18988 <_start@@Base+0x62f8>
   19100:	ldr	r0, [sl]
   19104:	bl	248a4 <flatcc_builder_end_vector@@Base>
   19108:	str	r0, [sp, #384]	; 0x180
   1910c:	cmp	r0, #0
   19110:	beq	1d8f4 <_start@@Base+0xb264>
   19114:	mov	r1, #5
   19118:	ldr	r0, [sl]
   1911c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   19120:	cmp	r0, #0
   19124:	beq	1d8fc <_start@@Base+0xb26c>
   19128:	ldr	r3, [sp, #384]	; 0x180
   1912c:	str	r3, [r0]
   19130:	b	1c5f8 <_start@@Base+0x9f68>
   19134:	mov	r3, #4
   19138:	mov	r2, r9
   1913c:	mov	r1, r8
   19140:	mov	r0, sl
   19144:	bl	14594 <_start@@Base+0x1f04>
   19148:	mov	r4, r0
   1914c:	cmp	r0, r8
   19150:	beq	19210 <_start@@Base+0x6b80>
   19154:	mov	r3, #0
   19158:	add	r2, sp, #368	; 0x170
   1915c:	strh	r3, [r2]
   19160:	mov	r3, r2
   19164:	mov	r2, r9
   19168:	mov	r1, r0
   1916c:	mov	r0, sl
   19170:	bl	14074 <_start@@Base+0x19e4>
   19174:	mov	r8, r0
   19178:	cmp	r4, r0
   1917c:	beq	191c8 <_start@@Base+0x6b38>
   19180:	add	r3, sp, #368	; 0x170
   19184:	ldrsh	r3, [r3]
   19188:	cmp	r3, #150	; 0x96
   1918c:	bne	1919c <_start@@Base+0x6b0c>
   19190:	ldr	r3, [sl, #8]
   19194:	tst	r3, #2
   19198:	beq	1c5f8 <_start@@Base+0x9f68>
   1919c:	mov	r3, #2
   191a0:	mov	r2, r3
   191a4:	mov	r1, #1
   191a8:	ldr	r0, [sl]
   191ac:	bl	2565c <flatcc_builder_table_add@@Base>
   191b0:	cmp	r0, #0
   191b4:	beq	191f8 <_start@@Base+0x6b68>
   191b8:	add	r3, sp, #368	; 0x170
   191bc:	ldrsh	r3, [r3]
   191c0:	strh	r3, [r0]
   191c4:	b	1c5f8 <_start@@Base+0x9f68>
   191c8:	add	r3, sp, #368	; 0x170
   191cc:	str	r3, [sp]
   191d0:	ldr	r3, [pc, #-368]	; 19068 <_start@@Base+0x69d8>
   191d4:	mov	r2, r9
   191d8:	mov	r1, r0
   191dc:	mov	r0, sl
   191e0:	bl	1578c <_start@@Base+0x30fc>
   191e4:	cmp	r9, r0
   191e8:	cmpne	r8, r0
   191ec:	beq	19208 <_start@@Base+0x6b78>
   191f0:	mov	r8, r0
   191f4:	b	19180 <_start@@Base+0x6af0>
   191f8:	mov	fp, sl
   191fc:	mov	r0, r8
   19200:	mov	r8, r0
   19204:	b	18988 <_start@@Base+0x62f8>
   19208:	mov	fp, sl
   1920c:	b	19200 <_start@@Base+0x6b70>
   19210:	mov	r2, r9
   19214:	mov	r1, r8
   19218:	mov	r0, sl
   1921c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19220:	mov	r8, r0
   19224:	b	1c5f8 <_start@@Base+0x9f68>
   19228:	add	r3, pc, #928	; 0x3a0
   1922c:	ldrd	r2, [r3]
   19230:	cmp	r1, r3
   19234:	cmpeq	r0, r2
   19238:	bhi	19e88 <_start@@Base+0x77f8>
   1923c:	add	r3, pc, #916	; 0x394
   19240:	ldrd	r2, [r3]
   19244:	cmp	r1, r3
   19248:	cmpeq	r0, r2
   1924c:	bhi	19304 <_start@@Base+0x6c74>
   19250:	mov	r3, #0
   19254:	str	r3, [sp, #104]	; 0x68
   19258:	str	r1, [sp, #108]	; 0x6c
   1925c:	add	r3, pc, #892	; 0x37c
   19260:	ldrd	r2, [r3]
   19264:	ldrd	r0, [sp, #104]	; 0x68
   19268:	cmp	r1, r3
   1926c:	cmpeq	r0, r2
   19270:	beq	1928c <_start@@Base+0x6bfc>
   19274:	mov	r2, r9
   19278:	mov	r1, r8
   1927c:	mov	r0, sl
   19280:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19284:	mov	r8, r0
   19288:	b	1c5f8 <_start@@Base+0x9f68>
   1928c:	mov	r3, #4
   19290:	mov	r2, r9
   19294:	mov	r1, r8
   19298:	mov	r0, sl
   1929c:	bl	14594 <_start@@Base+0x1f04>
   192a0:	cmp	r0, r8
   192a4:	beq	192ec <_start@@Base+0x6c5c>
   192a8:	add	r3, sp, #384	; 0x180
   192ac:	mov	r2, r9
   192b0:	mov	r1, r0
   192b4:	mov	r0, sl
   192b8:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   192bc:	mov	r8, r0
   192c0:	ldr	r3, [sp, #384]	; 0x180
   192c4:	cmp	r3, #0
   192c8:	beq	1d904 <_start@@Base+0xb274>
   192cc:	mov	r1, #3
   192d0:	ldr	r0, [sl]
   192d4:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   192d8:	cmp	r0, #0
   192dc:	beq	1d90c <_start@@Base+0xb27c>
   192e0:	ldr	r3, [sp, #384]	; 0x180
   192e4:	str	r3, [r0]
   192e8:	b	1c5f8 <_start@@Base+0x9f68>
   192ec:	mov	r2, r9
   192f0:	mov	r1, r8
   192f4:	mov	r0, sl
   192f8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   192fc:	mov	r8, r0
   19300:	b	1c5f8 <_start@@Base+0x9f68>
   19304:	add	r3, pc, #732	; 0x2dc
   19308:	ldrd	r2, [r3]
   1930c:	cmp	r1, r3
   19310:	cmpeq	r0, r2
   19314:	beq	19358 <_start@@Base+0x6cc8>
   19318:	mov	r3, #0
   1931c:	str	r3, [sp, #176]	; 0xb0
   19320:	bic	r3, r1, #255	; 0xff
   19324:	str	r3, [sp, #180]	; 0xb4
   19328:	add	r3, pc, #704	; 0x2c0
   1932c:	ldrd	r2, [r3]
   19330:	ldrd	r0, [sp, #176]	; 0xb0
   19334:	cmp	r1, r3
   19338:	cmpeq	r0, r2
   1933c:	beq	19548 <_start@@Base+0x6eb8>
   19340:	mov	r2, r9
   19344:	mov	r1, r8
   19348:	mov	r0, sl
   1934c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19350:	mov	r8, r0
   19354:	b	1c5f8 <_start@@Base+0x9f68>
   19358:	add	r4, r8, #8
   1935c:	mov	r1, r9
   19360:	mov	r0, r4
   19364:	bl	12780 <_start@@Base+0xf0>
   19368:	add	r3, pc, #648	; 0x288
   1936c:	ldrd	r2, [r3]
   19370:	cmp	r1, r3
   19374:	cmpeq	r0, r2
   19378:	bne	19530 <_start@@Base+0x6ea0>
   1937c:	add	r4, r8, #16
   19380:	mov	r1, r9
   19384:	mov	r0, r4
   19388:	bl	12780 <_start@@Base+0xf0>
   1938c:	and	r3, r0, #-16777216	; 0xff000000
   19390:	str	r3, [sp, #280]	; 0x118
   19394:	str	r1, [sp, #284]	; 0x11c
   19398:	add	r3, pc, #608	; 0x260
   1939c:	ldrd	r2, [r3]
   193a0:	add	r1, sp, #280	; 0x118
   193a4:	ldrd	r0, [r1]
   193a8:	cmp	r1, r3
   193ac:	cmpeq	r0, r2
   193b0:	beq	193cc <_start@@Base+0x6d3c>
   193b4:	mov	r2, r9
   193b8:	mov	r1, r4
   193bc:	mov	r0, sl
   193c0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   193c4:	mov	r8, r0
   193c8:	b	1c5f8 <_start@@Base+0x9f68>
   193cc:	mov	r3, #5
   193d0:	mov	r2, r9
   193d4:	mov	r1, r4
   193d8:	mov	r0, sl
   193dc:	bl	14594 <_start@@Base+0x1f04>
   193e0:	mov	r8, r0
   193e4:	cmp	r4, r0
   193e8:	beq	19518 <_start@@Base+0x6e88>
   193ec:	mov	r1, #0
   193f0:	str	r1, [sp, #384]	; 0x180
   193f4:	ldr	r0, [sl]
   193f8:	bl	23a98 <flatcc_builder_start_table@@Base>
   193fc:	cmp	r0, #0
   19400:	beq	19448 <_start@@Base+0x6db8>
   19404:	mov	r3, #33	; 0x21
   19408:	mov	r2, r9
   1940c:	mov	r1, r8
   19410:	mov	r0, sl
   19414:	bl	27930 <flatcc_json_parser_set_error@@Base>
   19418:	mov	r8, r0
   1941c:	ldr	r3, [sp, #384]	; 0x180
   19420:	cmp	r3, #0
   19424:	beq	1d914 <_start@@Base+0xb284>
   19428:	mov	r1, #34	; 0x22
   1942c:	ldr	r0, [sl]
   19430:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   19434:	cmp	r0, #0
   19438:	beq	1d91c <_start@@Base+0xb28c>
   1943c:	ldr	r3, [sp, #384]	; 0x180
   19440:	str	r3, [r0]
   19444:	b	1c5f8 <_start@@Base+0x9f68>
   19448:	add	r3, sp, #368	; 0x170
   1944c:	mov	r2, r9
   19450:	mov	r1, r8
   19454:	mov	r0, sl
   19458:	bl	14680 <_start@@Base+0x1ff0>
   1945c:	mov	r8, r0
   19460:	ldr	r3, [sp, #368]	; 0x170
   19464:	cmp	r3, #0
   19468:	beq	194f4 <_start@@Base+0x6e64>
   1946c:	mov	r4, #1
   19470:	mov	fp, #5
   19474:	mov	r5, #0
   19478:	mov	r1, r0
   1947c:	b	194c4 <_start@@Base+0x6e34>
   19480:	mov	r3, fp
   19484:	mov	r2, r9
   19488:	mov	r0, sl
   1948c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   19490:	mov	r1, r0
   19494:	mov	r2, r9
   19498:	mov	r0, sl
   1949c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   194a0:	add	r3, sp, #368	; 0x170
   194a4:	mov	r2, r9
   194a8:	mov	r1, r0
   194ac:	mov	r0, sl
   194b0:	bl	18020 <_start@@Base+0x5990>
   194b4:	mov	r1, r0
   194b8:	ldr	r3, [sp, #368]	; 0x170
   194bc:	cmp	r3, #0
   194c0:	beq	194f0 <_start@@Base+0x6e60>
   194c4:	cmp	r9, r1
   194c8:	beq	19494 <_start@@Base+0x6e04>
   194cc:	ldrb	r3, [r1]
   194d0:	cmp	r3, #34	; 0x22
   194d4:	addeq	r1, r1, #1
   194d8:	streq	r5, [sl, #12]
   194dc:	beq	19494 <_start@@Base+0x6e04>
   194e0:	cmp	r3, #46	; 0x2e
   194e4:	strne	r4, [sl, #12]
   194e8:	bne	19494 <_start@@Base+0x6e04>
   194ec:	b	19480 <_start@@Base+0x6df0>
   194f0:	mov	r8, r0
   194f4:	ldr	r3, [sl, #24]
   194f8:	cmp	r3, #0
   194fc:	bne	19404 <_start@@Base+0x6d74>
   19500:	ldr	r0, [sl]
   19504:	bl	24570 <flatcc_builder_end_table@@Base>
   19508:	str	r0, [sp, #384]	; 0x180
   1950c:	cmp	r0, #0
   19510:	bne	1941c <_start@@Base+0x6d8c>
   19514:	b	19404 <_start@@Base+0x6d74>
   19518:	mov	r2, r9
   1951c:	mov	r1, r0
   19520:	mov	r0, sl
   19524:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19528:	mov	r8, r0
   1952c:	b	1c5f8 <_start@@Base+0x9f68>
   19530:	mov	r2, r9
   19534:	mov	r1, r4
   19538:	mov	r0, sl
   1953c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19540:	mov	r8, r0
   19544:	b	1c5f8 <_start@@Base+0x9f68>
   19548:	mov	r3, #3
   1954c:	mov	r2, r9
   19550:	mov	r1, r8
   19554:	mov	r0, sl
   19558:	bl	14594 <_start@@Base+0x1f04>
   1955c:	mov	r4, r0
   19560:	cmp	r0, r8
   19564:	beq	19e70 <_start@@Base+0x77e0>
   19568:	mov	r3, #16
   1956c:	mov	r2, #32
   19570:	mov	r1, #0
   19574:	ldr	r0, [sl]
   19578:	bl	2565c <flatcc_builder_table_add@@Base>
   1957c:	subs	fp, r0, #0
   19580:	beq	1d890 <_start@@Base+0xb200>
   19584:	add	r3, sp, #360	; 0x168
   19588:	mov	r2, r9
   1958c:	mov	r1, r4
   19590:	mov	r0, sl
   19594:	bl	14680 <_start@@Base+0x1ff0>
   19598:	mov	r8, r0
   1959c:	add	r5, pc, #100	; 0x64
   195a0:	ldrd	r4, [r5]
   195a4:	vldr	s18, [pc, #108]	; 19618 <_start@@Base+0x6f88>
   195a8:	vldr	d8, [pc, #96]	; 19610 <_start@@Base+0x6f80>
   195ac:	b	19738 <_start@@Base+0x70a8>
   195b0:	mov	r3, #5
   195b4:	mov	r2, r9
   195b8:	mov	r1, r8
   195bc:	mov	r0, sl
   195c0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   195c4:	mov	r8, r0
   195c8:	b	19774 <_start@@Base+0x70e4>
   195cc:	nop	{0}
   195d0:			; <UNDEFINED> instruction: 0xffffffff
   195d4:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   195d8:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   195dc:	rsbvc	r7, r1, r5, ror #4
   195e0:	andeq	r0, r0, r0
   195e4:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   195e8:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   195ec:	rsbvc	r7, r1, r5, ror #4
   195f0:	andeq	r0, r0, r0
   195f4:	rsbvc	r7, pc, r0, lsl #6
   195f8:	rsbvc	r6, r1, r5, ror #6
   195fc:	smcvs	54867	; 0xd653
   19600:	strvc	r0, [r0], #-0
   19604:	svcpl	0x00746573
   19608:	rscscc	pc, pc, #1020	; 0x3fc
   1960c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
	...
   1961c:	ldrb	r0, [r8, #7]
   19620:	mov	r1, #0
   19624:	ldrb	r2, [r8, #6]
   19628:	orr	r3, r0, r2, lsl #8
   1962c:	mov	r2, r1
   19630:	ldrb	r0, [r8, #5]
   19634:	orr	r3, r3, r0, lsl #16
   19638:	ldrb	r0, [r8, #4]
   1963c:	orr	r3, r3, r0, lsl #24
   19640:	ldrb	r0, [r8, #3]
   19644:	orr	r2, r2, r0
   19648:	ldrb	r0, [r8, #2]
   1964c:	orr	r2, r2, r0, lsl #8
   19650:	ldrb	r0, [r8, #1]
   19654:	orr	r2, r2, r0, lsl #16
   19658:	ldrb	r0, [r8]
   1965c:	mov	r6, r3
   19660:	orr	r7, r2, r0, lsl #24
   19664:	cmp	r7, r5
   19668:	cmpeq	r6, r4
   1966c:	bhi	19a20 <_start@@Base+0x7390>
   19670:	and	r3, r6, #-16777216	; 0xff000000
   19674:	str	r3, [sp, #24]
   19678:	str	r7, [sp, #28]
   1967c:	ldrd	r2, [sp, #24]
   19680:	add	r1, pc, #1000	; 0x3e8
   19684:	ldrd	r0, [r1]
   19688:	cmp	r3, r1
   1968c:	cmpeq	r2, r0
   19690:	beq	19810 <_start@@Base+0x7180>
   19694:	ldrd	r2, [sp, #24]
   19698:	add	r1, pc, #984	; 0x3d8
   1969c:	ldrd	r0, [r1]
   196a0:	cmp	r3, r1
   196a4:	cmpeq	r2, r0
   196a8:	beq	19960 <_start@@Base+0x72d0>
   196ac:	mov	r2, r9
   196b0:	mov	r1, r8
   196b4:	mov	r0, sl
   196b8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   196bc:	mov	r8, r0
   196c0:	sub	r3, r9, r8
   196c4:	cmp	r3, #1
   196c8:	ble	196dc <_start@@Base+0x704c>
   196cc:	ldrb	r3, [r8]
   196d0:	cmp	r3, #32
   196d4:	bhi	196f0 <_start@@Base+0x7060>
   196d8:	beq	19d34 <_start@@Base+0x76a4>
   196dc:	mov	r2, r9
   196e0:	mov	r1, r8
   196e4:	mov	r0, sl
   196e8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   196ec:	mov	r8, r0
   196f0:	cmp	r9, r8
   196f4:	moveq	r3, #0
   196f8:	streq	r3, [sp, #360]	; 0x168
   196fc:	beq	19738 <_start@@Base+0x70a8>
   19700:	ldrb	r3, [r8]
   19704:	cmp	r3, #44	; 0x2c
   19708:	beq	19d94 <_start@@Base+0x7704>
   1970c:	mov	r3, #0
   19710:	str	r3, [sp, #360]	; 0x168
   19714:	ldrb	r3, [r8]
   19718:	cmp	r3, #125	; 0x7d
   1971c:	beq	19d48 <_start@@Base+0x76b8>
   19720:	mov	r3, #10
   19724:	mov	r2, r9
   19728:	mov	r1, r8
   1972c:	mov	r0, sl
   19730:	bl	27930 <flatcc_json_parser_set_error@@Base>
   19734:	mov	r8, r0
   19738:	ldr	r3, [sp, #360]	; 0x168
   1973c:	cmp	r3, #0
   19740:	beq	1c5f8 <_start@@Base+0x9f68>
   19744:	cmp	r9, r8
   19748:	beq	19774 <_start@@Base+0x70e4>
   1974c:	ldrb	r3, [r8]
   19750:	cmp	r3, #34	; 0x22
   19754:	addeq	r8, r8, #1
   19758:	moveq	r3, #0
   1975c:	streq	r3, [sl, #12]
   19760:	beq	19774 <_start@@Base+0x70e4>
   19764:	cmp	r3, #46	; 0x2e
   19768:	movne	r3, #1
   1976c:	strne	r3, [sl, #12]
   19770:	beq	195b0 <_start@@Base+0x6f20>
   19774:	sub	r3, r9, r8
   19778:	cmp	r3, #8
   1977c:	bhi	1961c <_start@@Base+0x6f8c>
   19780:	sub	r3, r3, #1
   19784:	cmp	r3, #7
   19788:	ldrls	pc, [pc, r3, lsl #2]
   1978c:	b	19804 <_start@@Base+0x7174>
   19790:	strdeq	r9, [r1], -r8
   19794:	andeq	r9, r1, ip, ror #15
   19798:	andeq	r9, r1, r0, ror #15
   1979c:	ldrdeq	r9, [r1], -r4
   197a0:	andeq	r9, r1, r8, asr #15
   197a4:			; <UNDEFINED> instruction: 0x000197bc
   197a8:			; <UNDEFINED> instruction: 0x000197b0
   197ac:	andeq	r9, r1, ip, lsl r6
   197b0:	mov	r0, #0
   197b4:	mov	r1, #0
   197b8:	b	19624 <_start@@Base+0x6f94>
   197bc:	mov	r3, #0
   197c0:	mov	r2, r3
   197c4:	b	19630 <_start@@Base+0x6fa0>
   197c8:	mov	r3, #0
   197cc:	mov	r2, r3
   197d0:	b	19638 <_start@@Base+0x6fa8>
   197d4:	mov	r3, #0
   197d8:	mov	r2, r3
   197dc:	b	19640 <_start@@Base+0x6fb0>
   197e0:	mov	r3, #0
   197e4:	mov	r2, r3
   197e8:	b	19648 <_start@@Base+0x6fb8>
   197ec:	mov	r3, #0
   197f0:	mov	r2, r3
   197f4:	b	19650 <_start@@Base+0x6fc0>
   197f8:	mov	r3, #0
   197fc:	mov	r2, r3
   19800:	b	19658 <_start@@Base+0x6fc8>
   19804:	mov	r6, #0
   19808:	mov	r7, #0
   1980c:	b	19664 <_start@@Base+0x6fd4>
   19810:	mov	r3, #5
   19814:	mov	r2, r9
   19818:	mov	r1, r8
   1981c:	mov	r0, sl
   19820:	bl	14594 <_start@@Base+0x1f04>
   19824:	mov	r2, r0
   19828:	str	r0, [sp, #72]	; 0x48
   1982c:	cmp	r0, r8
   19830:	beq	19948 <_start@@Base+0x72b8>
   19834:	mov	r3, #0
   19838:	strb	r3, [sp, #356]	; 0x164
   1983c:	mov	r0, #0
   19840:	mov	r1, #0
   19844:	add	ip, sp, #368	; 0x170
   19848:	strd	r0, [ip]
   1984c:	str	r3, [sp, #364]	; 0x16c
   19850:	mov	r1, r2
   19854:	cmp	r9, r2
   19858:	beq	1dac0 <_start@@Base+0xb430>
   1985c:	str	ip, [sp]
   19860:	add	r3, sp, #364	; 0x16c
   19864:	mov	r2, r9
   19868:	mov	r0, sl
   1986c:	bl	29968 <flatcc_json_parser_integer@@Base>
   19870:	mov	r8, r0
   19874:	ldr	r1, [sp, #72]	; 0x48
   19878:	cmp	r1, r0
   1987c:	bne	198b8 <_start@@Base+0x7228>
   19880:	str	r8, [sp, #72]	; 0x48
   19884:	add	r3, sp, #356	; 0x164
   19888:	str	r3, [sp]
   1988c:	ldr	r3, [pc, #500]	; 19a88 <_start@@Base+0x73f8>
   19890:	mov	r2, r9
   19894:	ldr	r1, [sp, #72]	; 0x48
   19898:	mov	r0, sl
   1989c:	bl	15098 <_start@@Base+0x2a08>
   198a0:	mov	r8, r0
   198a4:	ldr	r3, [sp, #72]	; 0x48
   198a8:	cmp	r9, r0
   198ac:	cmpne	r0, r3
   198b0:	bne	19904 <_start@@Base+0x7274>
   198b4:	b	199ec <_start@@Base+0x735c>
   198b8:	add	r3, sp, #368	; 0x170
   198bc:	ldrd	r2, [r3]
   198c0:	ldr	r1, [sp, #364]	; 0x16c
   198c4:	cmp	r1, #0
   198c8:	beq	19914 <_start@@Base+0x7284>
   198cc:	cmp	r3, #0
   198d0:	cmpeq	r2, #128	; 0x80
   198d4:	rsbls	r2, r2, #0
   198d8:	strbls	r2, [sp, #356]	; 0x164
   198dc:	bls	19904 <_start@@Base+0x7274>
   198e0:	mov	r3, #8
   198e4:	mov	r2, r9
   198e8:	mov	r1, r0
   198ec:	mov	r0, sl
   198f0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   198f4:	mov	r8, r0
   198f8:	ldr	r3, [sp, #72]	; 0x48
   198fc:	cmp	r3, r8
   19900:	beq	19940 <_start@@Base+0x72b0>
   19904:	add	r3, sp, #356	; 0x164
   19908:	ldrsb	r3, [r3]
   1990c:	strb	r3, [fp, #24]
   19910:	b	196c0 <_start@@Base+0x7030>
   19914:	cmp	r3, #0
   19918:	cmpeq	r2, #127	; 0x7f
   1991c:	strbls	r2, [sp, #356]	; 0x164
   19920:	bls	19904 <_start@@Base+0x7274>
   19924:	mov	r3, #7
   19928:	mov	r2, r9
   1992c:	mov	r1, r0
   19930:	mov	r0, sl
   19934:	bl	27930 <flatcc_json_parser_set_error@@Base>
   19938:	mov	r8, r0
   1993c:	b	198f8 <_start@@Base+0x7268>
   19940:	str	r8, [sp, #72]	; 0x48
   19944:	b	19884 <_start@@Base+0x71f4>
   19948:	mov	r2, r9
   1994c:	mov	r1, r8
   19950:	mov	r0, sl
   19954:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19958:	mov	r8, r0
   1995c:	b	196c0 <_start@@Base+0x7030>
   19960:	mov	r3, #5
   19964:	mov	r2, r9
   19968:	mov	r1, r8
   1996c:	mov	r0, sl
   19970:	bl	14594 <_start@@Base+0x1f04>
   19974:	mov	r1, r0
   19978:	cmp	r0, r8
   1997c:	beq	19a08 <_start@@Base+0x7378>
   19980:	vstr	d8, [sp, #368]	; 0x170
   19984:	add	r3, sp, #368	; 0x170
   19988:	mov	r2, r9
   1998c:	str	r0, [sp, #72]	; 0x48
   19990:	mov	r0, sl
   19994:	bl	289f4 <flatcc_json_parser_double@@Base>
   19998:	mov	r8, r0
   1999c:	ldr	r3, [sp, #72]	; 0x48
   199a0:	cmp	r3, r0
   199a4:	beq	199b8 <_start@@Base+0x7328>
   199a8:	add	r3, sp, #368	; 0x170
   199ac:	ldrd	r2, [r3]
   199b0:	strd	r2, [fp, #16]
   199b4:	b	196c0 <_start@@Base+0x7030>
   199b8:	add	r3, sp, #368	; 0x170
   199bc:	str	r3, [sp]
   199c0:	ldr	r3, [pc, #196]	; 19a8c <_start@@Base+0x73fc>
   199c4:	mov	r2, r9
   199c8:	mov	r1, r0
   199cc:	mov	r0, sl
   199d0:	bl	14a24 <_start@@Base+0x2394>
   199d4:	cmp	r9, r0
   199d8:	cmpne	r8, r0
   199dc:	beq	199e8 <_start@@Base+0x7358>
   199e0:	mov	r8, r0
   199e4:	b	199a8 <_start@@Base+0x7318>
   199e8:	mov	r8, r0
   199ec:	mov	r3, #33	; 0x21
   199f0:	mov	r2, r9
   199f4:	mov	r1, r8
   199f8:	mov	r0, sl
   199fc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   19a00:	mov	r8, r0
   19a04:	b	1c5f8 <_start@@Base+0x9f68>
   19a08:	mov	r2, r9
   19a0c:	mov	r1, r8
   19a10:	mov	r0, sl
   19a14:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19a18:	mov	r8, r0
   19a1c:	b	196c0 <_start@@Base+0x7030>
   19a20:	mvn	r2, #0
   19a24:	mvn	r3, #-2013265920	; 0x88000000
   19a28:	cmp	r7, r3
   19a2c:	cmpeq	r6, r2
   19a30:	bhi	19aec <_start@@Base+0x745c>
   19a34:	and	r3, r6, #-16777216	; 0xff000000
   19a38:	str	r3, [sp, #64]	; 0x40
   19a3c:	str	r7, [sp, #68]	; 0x44
   19a40:	ldrd	r2, [sp, #64]	; 0x40
   19a44:	add	r1, pc, #52	; 0x34
   19a48:	ldrd	r0, [r1]
   19a4c:	cmp	r3, r1
   19a50:	cmpeq	r2, r0
   19a54:	beq	19a9c <_start@@Base+0x740c>
   19a58:	mov	r2, r9
   19a5c:	mov	r1, r8
   19a60:	mov	r0, sl
   19a64:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19a68:	mov	r8, r0
   19a6c:	b	196c0 <_start@@Base+0x7030>
   19a70:	andcc	r0, r0, #0
   19a74:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19a78:	mrscc	r0, (UNDEF: 0)
   19a7c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19a80:	movwcc	r0, #0
   19a84:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19a88:	andeq	lr, r3, ip, lsr #2
   19a8c:	andeq	lr, r3, ip, lsr r1
   19a90:	andeq	lr, r3, r8, asr #2
   19a94:	andeq	lr, r3, r4, asr r1
   19a98:	andeq	lr, r3, r0, ror #2
   19a9c:	mov	r3, #5
   19aa0:	mov	r2, r9
   19aa4:	mov	r1, r8
   19aa8:	mov	r0, sl
   19aac:	bl	14594 <_start@@Base+0x1f04>
   19ab0:	cmp	r0, r8
   19ab4:	beq	19ad4 <_start@@Base+0x7444>
   19ab8:	add	r3, fp, #26
   19abc:	mov	r2, r9
   19ac0:	mov	r1, r0
   19ac4:	mov	r0, sl
   19ac8:	bl	181b0 <_start@@Base+0x5b20>
   19acc:	mov	r8, r0
   19ad0:	b	196c0 <_start@@Base+0x7030>
   19ad4:	mov	r2, r9
   19ad8:	mov	r1, r8
   19adc:	mov	r0, sl
   19ae0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19ae4:	mov	r8, r0
   19ae8:	b	196c0 <_start@@Base+0x7030>
   19aec:	mvn	r2, #0
   19af0:	mvn	r3, #-2030043136	; 0x87000000
   19af4:	cmp	r7, r3
   19af8:	cmpeq	r6, r2
   19afc:	bhi	19ba4 <_start@@Base+0x7514>
   19b00:	mov	r3, #1
   19b04:	mov	r2, r9
   19b08:	mov	r1, r8
   19b0c:	mov	r0, sl
   19b10:	bl	14594 <_start@@Base+0x1f04>
   19b14:	mov	r1, r0
   19b18:	cmp	r0, r8
   19b1c:	beq	19b8c <_start@@Base+0x74fc>
   19b20:	vstr	s18, [sp, #368]	; 0x170
   19b24:	add	r3, sp, #368	; 0x170
   19b28:	mov	r2, r9
   19b2c:	str	r0, [sp, #72]	; 0x48
   19b30:	mov	r0, sl
   19b34:	bl	28af0 <flatcc_json_parser_float@@Base>
   19b38:	mov	r8, r0
   19b3c:	ldr	r3, [sp, #72]	; 0x48
   19b40:	cmp	r3, r0
   19b44:	beq	19b54 <_start@@Base+0x74c4>
   19b48:	ldr	r3, [sp, #368]	; 0x170
   19b4c:	str	r3, [fp]
   19b50:	b	196c0 <_start@@Base+0x7030>
   19b54:	add	r3, sp, #368	; 0x170
   19b58:	str	r3, [sp]
   19b5c:	ldr	r3, [pc, #-212]	; 19a90 <_start@@Base+0x7400>
   19b60:	mov	r2, r9
   19b64:	mov	r1, r0
   19b68:	mov	r0, sl
   19b6c:	bl	14828 <_start@@Base+0x2198>
   19b70:	cmp	r9, r0
   19b74:	cmpne	r8, r0
   19b78:	beq	19b84 <_start@@Base+0x74f4>
   19b7c:	mov	r8, r0
   19b80:	b	19b48 <_start@@Base+0x74b8>
   19b84:	mov	r8, r0
   19b88:	b	199ec <_start@@Base+0x735c>
   19b8c:	mov	r2, r9
   19b90:	mov	r1, r8
   19b94:	mov	r0, sl
   19b98:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19b9c:	mov	r8, r0
   19ba0:	b	196c0 <_start@@Base+0x7030>
   19ba4:	mov	r3, #0
   19ba8:	str	r3, [sp, #80]	; 0x50
   19bac:	and	r3, r7, #-16777216	; 0xff000000
   19bb0:	str	r3, [sp, #84]	; 0x54
   19bb4:	ldrd	r2, [sp, #80]	; 0x50
   19bb8:	cmp	r3, #2046820352	; 0x7a000000
   19bbc:	cmpeq	r2, #0
   19bc0:	beq	19bec <_start@@Base+0x755c>
   19bc4:	ldrd	r2, [sp, #80]	; 0x50
   19bc8:	cmp	r3, #2030043136	; 0x79000000
   19bcc:	cmpeq	r2, #0
   19bd0:	beq	19c90 <_start@@Base+0x7600>
   19bd4:	mov	r2, r9
   19bd8:	mov	r1, r8
   19bdc:	mov	r0, sl
   19be0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19be4:	mov	r8, r0
   19be8:	b	196c0 <_start@@Base+0x7030>
   19bec:	mov	r3, #1
   19bf0:	mov	r2, r9
   19bf4:	mov	r1, r8
   19bf8:	mov	r0, sl
   19bfc:	bl	14594 <_start@@Base+0x1f04>
   19c00:	mov	r1, r0
   19c04:	cmp	r0, r8
   19c08:	beq	19c78 <_start@@Base+0x75e8>
   19c0c:	vstr	s18, [sp, #368]	; 0x170
   19c10:	add	r3, sp, #368	; 0x170
   19c14:	mov	r2, r9
   19c18:	str	r0, [sp, #72]	; 0x48
   19c1c:	mov	r0, sl
   19c20:	bl	28af0 <flatcc_json_parser_float@@Base>
   19c24:	mov	r8, r0
   19c28:	ldr	r3, [sp, #72]	; 0x48
   19c2c:	cmp	r3, r0
   19c30:	beq	19c40 <_start@@Base+0x75b0>
   19c34:	ldr	r3, [sp, #368]	; 0x170
   19c38:	str	r3, [fp, #8]
   19c3c:	b	196c0 <_start@@Base+0x7030>
   19c40:	add	r3, sp, #368	; 0x170
   19c44:	str	r3, [sp]
   19c48:	ldr	r3, [pc, #-444]	; 19a94 <_start@@Base+0x7404>
   19c4c:	mov	r2, r9
   19c50:	mov	r1, r0
   19c54:	mov	r0, sl
   19c58:	bl	14828 <_start@@Base+0x2198>
   19c5c:	cmp	r9, r0
   19c60:	cmpne	r8, r0
   19c64:	beq	19c70 <_start@@Base+0x75e0>
   19c68:	mov	r8, r0
   19c6c:	b	19c34 <_start@@Base+0x75a4>
   19c70:	mov	r8, r0
   19c74:	b	199ec <_start@@Base+0x735c>
   19c78:	mov	r2, r9
   19c7c:	mov	r1, r8
   19c80:	mov	r0, sl
   19c84:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19c88:	mov	r8, r0
   19c8c:	b	196c0 <_start@@Base+0x7030>
   19c90:	mov	r3, #1
   19c94:	mov	r2, r9
   19c98:	mov	r1, r8
   19c9c:	mov	r0, sl
   19ca0:	bl	14594 <_start@@Base+0x1f04>
   19ca4:	mov	r1, r0
   19ca8:	cmp	r0, r8
   19cac:	beq	19d1c <_start@@Base+0x768c>
   19cb0:	vstr	s18, [sp, #368]	; 0x170
   19cb4:	add	r3, sp, #368	; 0x170
   19cb8:	mov	r2, r9
   19cbc:	str	r0, [sp, #72]	; 0x48
   19cc0:	mov	r0, sl
   19cc4:	bl	28af0 <flatcc_json_parser_float@@Base>
   19cc8:	mov	r8, r0
   19ccc:	ldr	r3, [sp, #72]	; 0x48
   19cd0:	cmp	r3, r0
   19cd4:	beq	19ce4 <_start@@Base+0x7654>
   19cd8:	ldr	r3, [sp, #368]	; 0x170
   19cdc:	str	r3, [fp, #4]
   19ce0:	b	196c0 <_start@@Base+0x7030>
   19ce4:	add	r3, sp, #368	; 0x170
   19ce8:	str	r3, [sp]
   19cec:	ldr	r3, [pc, #-604]	; 19a98 <_start@@Base+0x7408>
   19cf0:	mov	r2, r9
   19cf4:	mov	r1, r0
   19cf8:	mov	r0, sl
   19cfc:	bl	14828 <_start@@Base+0x2198>
   19d00:	cmp	r9, r0
   19d04:	cmpne	r8, r0
   19d08:	beq	19d14 <_start@@Base+0x7684>
   19d0c:	mov	r8, r0
   19d10:	b	19cd8 <_start@@Base+0x7648>
   19d14:	mov	r8, r0
   19d18:	b	199ec <_start@@Base+0x735c>
   19d1c:	mov	r2, r9
   19d20:	mov	r1, r8
   19d24:	mov	r0, sl
   19d28:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19d2c:	mov	r8, r0
   19d30:	b	196c0 <_start@@Base+0x7030>
   19d34:	ldrb	r3, [r8, #1]
   19d38:	cmp	r3, #32
   19d3c:	addhi	r8, r8, #1
   19d40:	bls	196dc <_start@@Base+0x704c>
   19d44:	b	196f0 <_start@@Base+0x7060>
   19d48:	add	r1, r8, #1
   19d4c:	sub	r3, r9, r1
   19d50:	cmp	r3, #1
   19d54:	ble	19d6c <_start@@Base+0x76dc>
   19d58:	ldrb	r3, [r8, #1]
   19d5c:	cmp	r3, #32
   19d60:	movhi	r8, r1
   19d64:	bhi	19738 <_start@@Base+0x70a8>
   19d68:	beq	19d80 <_start@@Base+0x76f0>
   19d6c:	mov	r2, r9
   19d70:	mov	r0, sl
   19d74:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   19d78:	mov	r8, r0
   19d7c:	b	19738 <_start@@Base+0x70a8>
   19d80:	ldrb	r3, [r8, #2]
   19d84:	cmp	r3, #32
   19d88:	addhi	r8, r8, #2
   19d8c:	bls	19d6c <_start@@Base+0x76dc>
   19d90:	b	19738 <_start@@Base+0x70a8>
   19d94:	add	r1, r8, #1
   19d98:	sub	r3, r9, r1
   19d9c:	cmp	r3, #1
   19da0:	ble	19db8 <_start@@Base+0x7728>
   19da4:	ldrb	r3, [r8, #1]
   19da8:	cmp	r3, #32
   19dac:	movhi	r8, r1
   19db0:	bhi	19dc8 <_start@@Base+0x7738>
   19db4:	beq	19e24 <_start@@Base+0x7794>
   19db8:	mov	r2, r9
   19dbc:	mov	r0, sl
   19dc0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   19dc4:	mov	r8, r0
   19dc8:	cmp	r9, r8
   19dcc:	beq	19e38 <_start@@Base+0x77a8>
   19dd0:	ldrb	r3, [r8]
   19dd4:	cmp	r3, #125	; 0x7d
   19dd8:	movne	r3, #1
   19ddc:	strne	r3, [sp, #360]	; 0x168
   19de0:	bne	19738 <_start@@Base+0x70a8>
   19de4:	mov	r3, #0
   19de8:	str	r3, [sp, #360]	; 0x168
   19dec:	add	r1, r8, #1
   19df0:	sub	r3, r9, r1
   19df4:	cmp	r3, #1
   19df8:	ble	19e10 <_start@@Base+0x7780>
   19dfc:	ldrb	r3, [r8, #1]
   19e00:	cmp	r3, #32
   19e04:	movhi	r8, r1
   19e08:	bhi	19738 <_start@@Base+0x70a8>
   19e0c:	beq	19e5c <_start@@Base+0x77cc>
   19e10:	mov	r2, r9
   19e14:	mov	r0, sl
   19e18:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   19e1c:	mov	r8, r0
   19e20:	b	19738 <_start@@Base+0x70a8>
   19e24:	ldrb	r3, [r8, #2]
   19e28:	cmp	r3, #32
   19e2c:	addhi	r8, r8, #2
   19e30:	bls	19db8 <_start@@Base+0x7728>
   19e34:	b	19dc8 <_start@@Base+0x7738>
   19e38:	mov	r3, #0
   19e3c:	str	r3, [sp, #360]	; 0x168
   19e40:	mov	r3, #10
   19e44:	mov	r2, r9
   19e48:	mov	r1, r8
   19e4c:	mov	r0, sl
   19e50:	bl	27930 <flatcc_json_parser_set_error@@Base>
   19e54:	mov	r8, r0
   19e58:	b	19738 <_start@@Base+0x70a8>
   19e5c:	ldrb	r3, [r8, #2]
   19e60:	cmp	r3, #32
   19e64:	addhi	r8, r8, #2
   19e68:	bls	19e10 <_start@@Base+0x7780>
   19e6c:	b	19738 <_start@@Base+0x70a8>
   19e70:	mov	r2, r9
   19e74:	mov	r1, r8
   19e78:	mov	r0, sl
   19e7c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   19e80:	mov	r8, r0
   19e84:	b	1c5f8 <_start@@Base+0x9f68>
   19e88:	and	r3, r0, #-16777216	; 0xff000000
   19e8c:	str	r3, [sp, #48]	; 0x30
   19e90:	str	r1, [sp, #52]	; 0x34
   19e94:	add	r3, pc, #924	; 0x39c
   19e98:	ldrd	r2, [r3]
   19e9c:	ldrd	r0, [sp, #48]	; 0x30
   19ea0:	cmp	r1, r3
   19ea4:	cmpeq	r0, r2
   19ea8:	beq	19f00 <_start@@Base+0x7870>
   19eac:	mov	r3, #4
   19eb0:	mov	r2, r9
   19eb4:	mov	r1, r8
   19eb8:	mov	r0, sl
   19ebc:	bl	14594 <_start@@Base+0x1f04>
   19ec0:	cmp	r0, r8
   19ec4:	beq	19fe0 <_start@@Base+0x7950>
   19ec8:	movw	r3, #56040	; 0xdae8
   19ecc:	movt	r3, #1
   19ed0:	str	r3, [sp, #8]
   19ed4:	ldr	r3, [sp, #380]	; 0x17c
   19ed8:	str	r3, [sp, #4]
   19edc:	mov	r3, #8
   19ee0:	str	r3, [sp]
   19ee4:	mov	r3, #0
   19ee8:	mov	r2, r9
   19eec:	mov	r1, r0
   19ef0:	mov	r0, sl
   19ef4:	bl	2a1ac <flatcc_json_parser_union@@Base>
   19ef8:	mov	r8, r0
   19efc:	b	1c5f8 <_start@@Base+0x9f68>
   19f00:	mov	r3, #5
   19f04:	mov	r2, r9
   19f08:	mov	r1, r8
   19f0c:	mov	r0, sl
   19f10:	bl	14594 <_start@@Base+0x1f04>
   19f14:	mov	r4, r0
   19f18:	cmp	r0, r8
   19f1c:	beq	1a074 <_start@@Base+0x79e4>
   19f20:	mvn	r3, #-1073741824	; 0xc0000000
   19f24:	mov	r2, #2
   19f28:	mov	r1, #4
   19f2c:	ldr	r0, [sl]
   19f30:	bl	237a0 <flatcc_builder_start_vector@@Base>
   19f34:	cmp	r0, #0
   19f38:	bne	1d89c <_start@@Base+0xb20c>
   19f3c:	add	r3, sp, #388	; 0x184
   19f40:	mov	r2, r9
   19f44:	mov	r1, r4
   19f48:	mov	r0, sl
   19f4c:	bl	14754 <_start@@Base+0x20c4>
   19f50:	mov	r8, r0
   19f54:	ldr	r3, [sp, #388]	; 0x184
   19f58:	cmp	r3, #0
   19f5c:	beq	19fac <_start@@Base+0x791c>
   19f60:	mov	r4, #1
   19f64:	mov	r1, r4
   19f68:	ldr	r0, [sl]
   19f6c:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   19f70:	subs	r3, r0, #0
   19f74:	beq	1d924 <_start@@Base+0xb294>
   19f78:	mov	r2, r9
   19f7c:	mov	r1, r8
   19f80:	mov	r0, sl
   19f84:	bl	181b0 <_start@@Base+0x5b20>
   19f88:	add	r3, sp, #388	; 0x184
   19f8c:	mov	r2, r9
   19f90:	mov	r1, r0
   19f94:	mov	r0, sl
   19f98:	bl	17e90 <_start@@Base+0x5800>
   19f9c:	mov	r8, r0
   19fa0:	ldr	r3, [sp, #388]	; 0x184
   19fa4:	cmp	r3, #0
   19fa8:	bne	19f64 <_start@@Base+0x78d4>
   19fac:	ldr	r0, [sl]
   19fb0:	bl	248a4 <flatcc_builder_end_vector@@Base>
   19fb4:	str	r0, [sp, #384]	; 0x180
   19fb8:	cmp	r0, #0
   19fbc:	beq	1d92c <_start@@Base+0xb29c>
   19fc0:	mov	r1, #9
   19fc4:	ldr	r0, [sl]
   19fc8:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   19fcc:	cmp	r0, #0
   19fd0:	beq	1d934 <_start@@Base+0xb2a4>
   19fd4:	ldr	r3, [sp, #384]	; 0x180
   19fd8:	str	r3, [r0]
   19fdc:	b	1c5f8 <_start@@Base+0x9f68>
   19fe0:	add	r3, pc, #600	; 0x258
   19fe4:	ldrd	r2, [r3]
   19fe8:	ldrd	r0, [sp, #48]	; 0x30
   19fec:	cmp	r1, r3
   19ff0:	cmpeq	r0, r2
   19ff4:	beq	1a054 <_start@@Base+0x79c4>
   19ff8:	add	r3, pc, #584	; 0x248
   19ffc:	ldrd	r2, [r3]
   1a000:	cmp	r5, r3
   1a004:	cmpeq	r4, r2
   1a008:	bne	1a074 <_start@@Base+0x79e4>
   1a00c:	add	r8, r8, #8
   1a010:	mov	r1, r9
   1a014:	mov	r0, r8
   1a018:	bl	12780 <_start@@Base+0xf0>
   1a01c:	mov	r3, #0
   1a020:	str	r3, [sp, #184]	; 0xb8
   1a024:	and	r3, r1, #-16777216	; 0xff000000
   1a028:	str	r3, [sp, #188]	; 0xbc
   1a02c:	ldrd	r2, [sp, #184]	; 0xb8
   1a030:	cmp	r3, #1694498816	; 0x65000000
   1a034:	cmpeq	r2, #0
   1a038:	beq	1a14c <_start@@Base+0x7abc>
   1a03c:	mov	r2, r9
   1a040:	mov	r1, r8
   1a044:	mov	r0, sl
   1a048:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a04c:	mov	r8, r0
   1a050:	b	1c5f8 <_start@@Base+0x9f68>
   1a054:	mov	r3, #5
   1a058:	mov	r2, r9
   1a05c:	mov	r1, r8
   1a060:	mov	r0, sl
   1a064:	bl	14594 <_start@@Base+0x1f04>
   1a068:	mov	r4, r0
   1a06c:	cmp	r0, r8
   1a070:	bne	1a08c <_start@@Base+0x79fc>
   1a074:	mov	r2, r9
   1a078:	mov	r1, r8
   1a07c:	mov	r0, sl
   1a080:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a084:	mov	r8, r0
   1a088:	b	1c5f8 <_start@@Base+0x9f68>
   1a08c:	mvn	r3, #-1073741824	; 0xc0000000
   1a090:	mov	r2, #2
   1a094:	mov	r1, #4
   1a098:	ldr	r0, [sl]
   1a09c:	bl	237a0 <flatcc_builder_start_vector@@Base>
   1a0a0:	cmp	r0, #0
   1a0a4:	bne	1d8a8 <_start@@Base+0xb218>
   1a0a8:	add	r3, sp, #388	; 0x184
   1a0ac:	mov	r2, r9
   1a0b0:	mov	r1, r4
   1a0b4:	mov	r0, sl
   1a0b8:	bl	14754 <_start@@Base+0x20c4>
   1a0bc:	mov	r8, r0
   1a0c0:	ldr	r3, [sp, #388]	; 0x184
   1a0c4:	cmp	r3, #0
   1a0c8:	beq	1a118 <_start@@Base+0x7a88>
   1a0cc:	mov	r4, #1
   1a0d0:	mov	r1, r4
   1a0d4:	ldr	r0, [sl]
   1a0d8:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   1a0dc:	subs	r3, r0, #0
   1a0e0:	beq	1d93c <_start@@Base+0xb2ac>
   1a0e4:	mov	r2, r9
   1a0e8:	mov	r1, r8
   1a0ec:	mov	r0, sl
   1a0f0:	bl	181b0 <_start@@Base+0x5b20>
   1a0f4:	add	r3, sp, #388	; 0x184
   1a0f8:	mov	r2, r9
   1a0fc:	mov	r1, r0
   1a100:	mov	r0, sl
   1a104:	bl	17e90 <_start@@Base+0x5800>
   1a108:	mov	r8, r0
   1a10c:	ldr	r3, [sp, #388]	; 0x184
   1a110:	cmp	r3, #0
   1a114:	bne	1a0d0 <_start@@Base+0x7a40>
   1a118:	ldr	r0, [sl]
   1a11c:	bl	248a4 <flatcc_builder_end_vector@@Base>
   1a120:	str	r0, [sp, #384]	; 0x180
   1a124:	cmp	r0, #0
   1a128:	beq	1d944 <_start@@Base+0xb2b4>
   1a12c:	mov	r1, #31
   1a130:	ldr	r0, [sl]
   1a134:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1a138:	cmp	r0, #0
   1a13c:	beq	1d94c <_start@@Base+0xb2bc>
   1a140:	ldr	r3, [sp, #384]	; 0x180
   1a144:	str	r3, [r0]
   1a148:	b	1c5f8 <_start@@Base+0x9f68>
   1a14c:	mov	r3, #1
   1a150:	mov	r2, r9
   1a154:	mov	r1, r8
   1a158:	mov	r0, sl
   1a15c:	bl	14594 <_start@@Base+0x1f04>
   1a160:	mov	r1, r0
   1a164:	cmp	r8, r0
   1a168:	beq	1a1a8 <_start@@Base+0x7b18>
   1a16c:	movw	r3, #56040	; 0xdae8
   1a170:	movt	r3, #1
   1a174:	str	r3, [sp, #12]
   1a178:	ldr	r3, [pc, #248]	; 1a278 <_start@@Base+0x7be8>
   1a17c:	str	r3, [sp, #8]
   1a180:	ldr	r3, [sp, #380]	; 0x17c
   1a184:	str	r3, [sp, #4]
   1a188:	mov	r3, #8
   1a18c:	str	r3, [sp]
   1a190:	mov	r3, #0
   1a194:	mov	r2, r9
   1a198:	mov	r0, sl
   1a19c:	bl	2a314 <flatcc_json_parser_union_type@@Base>
   1a1a0:	mov	r8, r0
   1a1a4:	b	1c5f8 <_start@@Base+0x9f68>
   1a1a8:	mov	r2, r9
   1a1ac:	mov	r0, sl
   1a1b0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a1b4:	mov	r8, r0
   1a1b8:	b	1c5f8 <_start@@Base+0x9f68>
   1a1bc:	add	r3, pc, #140	; 0x8c
   1a1c0:	ldrd	r2, [r3]
   1a1c4:	cmp	r1, r3
   1a1c8:	cmpeq	r0, r2
   1a1cc:	bhi	1c5a8 <_start@@Base+0x9f18>
   1a1d0:	add	r3, pc, #128	; 0x80
   1a1d4:	ldrd	r2, [r3]
   1a1d8:	cmp	r1, r3
   1a1dc:	cmpeq	r0, r2
   1a1e0:	beq	1a27c <_start@@Base+0x7bec>
   1a1e4:	add	r3, pc, #116	; 0x74
   1a1e8:	ldrd	r2, [r3]
   1a1ec:	cmp	r1, r3
   1a1f0:	cmpeq	r0, r2
   1a1f4:	bhi	1bb58 <_start@@Base+0x94c8>
   1a1f8:	add	r3, pc, #104	; 0x68
   1a1fc:	ldrd	r2, [r3]
   1a200:	cmp	r1, r3
   1a204:	cmpeq	r0, r2
   1a208:	beq	1b2a0 <_start@@Base+0x8c10>
   1a20c:	add	r3, pc, #92	; 0x5c
   1a210:	ldrd	r2, [r3]
   1a214:	cmp	r1, r3
   1a218:	cmpeq	r0, r2
   1a21c:	beq	1b97c <_start@@Base+0x92ec>
   1a220:	mov	r2, r9
   1a224:	mov	r1, r8
   1a228:	mov	r0, sl
   1a22c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a230:	mov	r8, r0
   1a234:	b	1c5f8 <_start@@Base+0x9f68>
   1a238:	strcc	r0, [r0], #-0
   1a23c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a240:	strcc	r0, [r0, #-0]
   1a244:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a248:	svcpl	0x00747970
   1a24c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a250:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1a254:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a258:	cmnvs	r2, r1, ror #4
   1a25c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a260:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1a264:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a268:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1a26c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a270:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1a274:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a278:	andeq	lr, r3, ip, ror #2
   1a27c:	add	r4, r8, #8
   1a280:	mov	r1, r9
   1a284:	mov	r0, r4
   1a288:	bl	12780 <_start@@Base+0xf0>
   1a28c:	add	r3, pc, #932	; 0x3a4
   1a290:	ldrd	r2, [r3]
   1a294:	cmp	r1, r3
   1a298:	cmpeq	r0, r2
   1a29c:	bhi	1ae5c <_start@@Base+0x87cc>
   1a2a0:	add	r3, pc, #920	; 0x398
   1a2a4:	ldrd	r2, [r3]
   1a2a8:	cmp	r1, r3
   1a2ac:	cmpeq	r0, r2
   1a2b0:	beq	1a314 <_start@@Base+0x7c84>
   1a2b4:	add	r3, pc, #908	; 0x38c
   1a2b8:	ldrd	r2, [r3]
   1a2bc:	cmp	r1, r3
   1a2c0:	cmpeq	r0, r2
   1a2c4:	bne	1a338 <_start@@Base+0x7ca8>
   1a2c8:	add	r4, r8, #16
   1a2cc:	mov	r1, r9
   1a2d0:	mov	r0, r4
   1a2d4:	bl	12780 <_start@@Base+0xf0>
   1a2d8:	bic	r3, r0, #255	; 0xff
   1a2dc:	str	r3, [sp, #224]	; 0xe0
   1a2e0:	str	r1, [sp, #228]	; 0xe4
   1a2e4:	add	r3, pc, #868	; 0x364
   1a2e8:	ldrd	r2, [r3]
   1a2ec:	ldrd	r0, [sp, #224]	; 0xe0
   1a2f0:	cmp	r1, r3
   1a2f4:	cmpeq	r0, r2
   1a2f8:	beq	1a578 <_start@@Base+0x7ee8>
   1a2fc:	mov	r2, r9
   1a300:	mov	r1, r4
   1a304:	mov	r0, sl
   1a308:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a30c:	mov	r8, r0
   1a310:	b	1c5f8 <_start@@Base+0x9f68>
   1a314:	mov	r3, #8
   1a318:	mov	r2, r9
   1a31c:	mov	r1, r4
   1a320:	mov	r0, sl
   1a324:	bl	14594 <_start@@Base+0x1f04>
   1a328:	mov	r8, r0
   1a32c:	cmp	r4, r0
   1a330:	moveq	r4, r0
   1a334:	bne	1a350 <_start@@Base+0x7cc0>
   1a338:	mov	r2, r9
   1a33c:	mov	r1, r4
   1a340:	mov	r0, sl
   1a344:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a348:	mov	r8, r0
   1a34c:	b	1c5f8 <_start@@Base+0x9f68>
   1a350:	mvn	r3, #0
   1a354:	mov	r2, #1
   1a358:	mov	r1, r2
   1a35c:	ldr	r0, [sl]
   1a360:	bl	237a0 <flatcc_builder_start_vector@@Base>
   1a364:	cmp	r0, #0
   1a368:	bne	1d954 <_start@@Base+0xb2c4>
   1a36c:	add	r3, sp, #388	; 0x184
   1a370:	mov	r2, r9
   1a374:	mov	r1, r8
   1a378:	mov	r0, sl
   1a37c:	bl	14754 <_start@@Base+0x20c4>
   1a380:	mov	r8, r0
   1a384:	ldr	r3, [sp, #388]	; 0x184
   1a388:	cmp	r3, #0
   1a38c:	beq	1a544 <_start@@Base+0x7eb4>
   1a390:	ldr	fp, [pc, #704]	; 1a658 <_start@@Base+0x7fc8>
   1a394:	b	1a400 <_start@@Base+0x7d70>
   1a398:	mov	r3, #8
   1a39c:	mov	r2, r9
   1a3a0:	mov	r1, r4
   1a3a4:	mov	r0, sl
   1a3a8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1a3ac:	mov	r4, r0
   1a3b0:	mov	r2, #0
   1a3b4:	b	1a3c0 <_start@@Base+0x7d30>
   1a3b8:	mov	r4, r8
   1a3bc:	mov	r2, #0
   1a3c0:	adds	r2, r2, #0
   1a3c4:	movne	r2, #1
   1a3c8:	strb	r2, [sp, #360]	; 0x168
   1a3cc:	cmp	r4, r8
   1a3d0:	beq	1a510 <_start@@Base+0x7e80>
   1a3d4:	ldrb	r3, [sp, #360]	; 0x168
   1a3d8:	strb	r3, [r5]
   1a3dc:	add	r3, sp, #388	; 0x184
   1a3e0:	mov	r2, r9
   1a3e4:	mov	r1, r4
   1a3e8:	mov	r0, sl
   1a3ec:	bl	17e90 <_start@@Base+0x5800>
   1a3f0:	mov	r8, r0
   1a3f4:	ldr	r3, [sp, #388]	; 0x184
   1a3f8:	cmp	r3, #0
   1a3fc:	beq	1a544 <_start@@Base+0x7eb4>
   1a400:	mov	r3, #0
   1a404:	strb	r3, [sp, #360]	; 0x168
   1a408:	mov	r1, #1
   1a40c:	ldr	r0, [sl]
   1a410:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   1a414:	subs	r5, r0, #0
   1a418:	beq	1d95c <_start@@Base+0xb2cc>
   1a41c:	sub	r4, r9, r8
   1a420:	cmp	r4, #3
   1a424:	ble	1a450 <_start@@Base+0x7dc0>
   1a428:	mov	r2, #4
   1a42c:	movw	r1, #46192	; 0xb470
   1a430:	movt	r1, #2
   1a434:	mov	r0, r8
   1a438:	bl	125a0 <memcmp@plt>
   1a43c:	cmp	r0, #0
   1a440:	moveq	r3, #1
   1a444:	strbeq	r3, [sp, #360]	; 0x168
   1a448:	addeq	r4, r8, #4
   1a44c:	beq	1a3cc <_start@@Base+0x7d3c>
   1a450:	cmp	r4, #4
   1a454:	ble	1a480 <_start@@Base+0x7df0>
   1a458:	mov	r2, #5
   1a45c:	movw	r1, #46200	; 0xb478
   1a460:	movt	r1, #2
   1a464:	mov	r0, r8
   1a468:	bl	125a0 <memcmp@plt>
   1a46c:	cmp	r0, #0
   1a470:	moveq	r3, #0
   1a474:	strbeq	r3, [sp, #360]	; 0x168
   1a478:	addeq	r4, r8, #5
   1a47c:	beq	1a3cc <_start@@Base+0x7d3c>
   1a480:	mov	r2, #0
   1a484:	mov	r3, #0
   1a488:	add	r1, sp, #368	; 0x170
   1a48c:	strd	r2, [r1]
   1a490:	mov	r3, #0
   1a494:	str	r3, [sp, #364]	; 0x16c
   1a498:	cmp	r9, r8
   1a49c:	beq	1a3b8 <_start@@Base+0x7d28>
   1a4a0:	str	r1, [sp]
   1a4a4:	add	r3, sp, #364	; 0x16c
   1a4a8:	mov	r2, r9
   1a4ac:	mov	r1, r8
   1a4b0:	mov	r0, sl
   1a4b4:	bl	29968 <flatcc_json_parser_integer@@Base>
   1a4b8:	mov	r4, r0
   1a4bc:	cmp	r0, r8
   1a4c0:	moveq	r4, r8
   1a4c4:	moveq	r2, #0
   1a4c8:	beq	1a3c0 <_start@@Base+0x7d30>
   1a4cc:	ldr	r3, [sp, #364]	; 0x16c
   1a4d0:	cmp	r3, #0
   1a4d4:	bne	1a398 <_start@@Base+0x7d08>
   1a4d8:	add	r3, sp, #368	; 0x170
   1a4dc:	ldrd	r2, [r3]
   1a4e0:	cmp	r3, #0
   1a4e4:	cmpeq	r2, #255	; 0xff
   1a4e8:	uxtbls	r2, r2
   1a4ec:	bls	1a3c0 <_start@@Base+0x7d30>
   1a4f0:	mov	r3, #7
   1a4f4:	mov	r2, r9
   1a4f8:	mov	r1, r4
   1a4fc:	mov	r0, sl
   1a500:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1a504:	mov	r4, r0
   1a508:	mov	r2, #0
   1a50c:	b	1a3c0 <_start@@Base+0x7d30>
   1a510:	add	r3, sp, #360	; 0x168
   1a514:	str	r3, [sp]
   1a518:	mov	r3, fp
   1a51c:	mov	r2, r9
   1a520:	mov	r1, r4
   1a524:	mov	r0, sl
   1a528:	bl	14c28 <_start@@Base+0x2598>
   1a52c:	mov	r8, r0
   1a530:	cmp	r9, r0
   1a534:	cmpne	r0, r4
   1a538:	beq	1d964 <_start@@Base+0xb2d4>
   1a53c:	mov	r4, r0
   1a540:	b	1a3d4 <_start@@Base+0x7d44>
   1a544:	ldr	r0, [sl]
   1a548:	bl	248a4 <flatcc_builder_end_vector@@Base>
   1a54c:	str	r0, [sp, #384]	; 0x180
   1a550:	cmp	r0, #0
   1a554:	beq	1d96c <_start@@Base+0xb2dc>
   1a558:	mov	r1, #24
   1a55c:	ldr	r0, [sl]
   1a560:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1a564:	cmp	r0, #0
   1a568:	beq	1d974 <_start@@Base+0xb2e4>
   1a56c:	ldr	r3, [sp, #384]	; 0x180
   1a570:	str	r3, [r0]
   1a574:	b	1c5f8 <_start@@Base+0x9f68>
   1a578:	mov	r3, #7
   1a57c:	mov	r2, r9
   1a580:	mov	r1, r4
   1a584:	mov	r0, sl
   1a588:	bl	14594 <_start@@Base+0x1f04>
   1a58c:	mov	r8, r0
   1a590:	cmp	r4, r0
   1a594:	bne	1a5b0 <_start@@Base+0x7f20>
   1a598:	mov	r2, r9
   1a59c:	mov	r1, r0
   1a5a0:	mov	r0, sl
   1a5a4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a5a8:	mov	r8, r0
   1a5ac:	b	1c5f8 <_start@@Base+0x9f68>
   1a5b0:	mvn	r3, #-536870912	; 0xe0000000
   1a5b4:	mov	r2, #4
   1a5b8:	mov	r1, #8
   1a5bc:	ldr	r0, [sl]
   1a5c0:	bl	237a0 <flatcc_builder_start_vector@@Base>
   1a5c4:	cmp	r0, #0
   1a5c8:	bne	1d97c <_start@@Base+0xb2ec>
   1a5cc:	add	r3, sp, #388	; 0x184
   1a5d0:	mov	r2, r9
   1a5d4:	mov	r1, r8
   1a5d8:	mov	r0, sl
   1a5dc:	bl	14754 <_start@@Base+0x20c4>
   1a5e0:	mov	r8, r0
   1a5e4:	ldr	r3, [sp, #388]	; 0x184
   1a5e8:	cmp	r3, #0
   1a5ec:	beq	1ae28 <_start@@Base+0x8798>
   1a5f0:	mov	fp, #0
   1a5f4:	movt	fp, #65535	; 0xffff
   1a5f8:	add	r3, sp, #344	; 0x158
   1a5fc:	strd	r6, [r3]
   1a600:	mov	r7, sl
   1a604:	mov	r4, r0
   1a608:	mov	r8, fp
   1a60c:	add	r3, sp, #256	; 0x100
   1a610:	ldrd	sl, [r3]
   1a614:	b	1ab78 <_start@@Base+0x84e8>
   1a618:	mov	r3, #5
   1a61c:	mov	r2, r9
   1a620:	mov	r1, r4
   1a624:	mov	r0, r7
   1a628:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1a62c:	mov	r4, r0
   1a630:	b	1a7b8 <_start@@Base+0x8128>
   1a634:	nop	{0}
   1a638:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1a63c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a640:	svcvs	0x006f6c73
   1a644:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a648:	svcvs	0x00727465
   1a64c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a650:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1a654:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1a658:	andeq	lr, r3, ip, ror r1
   1a65c:	ldrb	r0, [r4, #7]
   1a660:	mov	r1, #0
   1a664:	ldrb	r2, [r4, #6]
   1a668:	orr	r2, r0, r2, lsl #8
   1a66c:	mov	r3, r1
   1a670:	ldrb	r0, [r4, #5]
   1a674:	orr	r1, r2, r0, lsl #16
   1a678:	mov	r0, r3
   1a67c:	ldrb	r2, [r4, #4]
   1a680:	orr	r2, r1, r2, lsl #24
   1a684:	mov	r3, r0
   1a688:	ldrb	r0, [r4, #3]
   1a68c:	orr	r3, r3, r0
   1a690:	ldrb	r0, [r4, #2]
   1a694:	orr	r3, r3, r0, lsl #8
   1a698:	ldrb	r0, [r4, #1]
   1a69c:	mov	lr, r2
   1a6a0:	orr	r0, r3, r0, lsl #16
   1a6a4:	ldrb	r2, [r4]
   1a6a8:	mov	sl, lr
   1a6ac:	orr	fp, r0, r2, lsl #24
   1a6b0:	mov	r3, #0
   1a6b4:	str	r3, [sp, #16]
   1a6b8:	and	r3, fp, r8
   1a6bc:	str	r3, [sp, #20]
   1a6c0:	ldrd	r2, [sp, #16]
   1a6c4:	mov	r0, #0
   1a6c8:	mov	r1, #0
   1a6cc:	movt	r1, #26980	; 0x6964
   1a6d0:	cmp	r3, r1
   1a6d4:	cmpeq	r2, r0
   1a6d8:	beq	1a854 <_start@@Base+0x81c4>
   1a6dc:	add	r3, pc, #852	; 0x354
   1a6e0:	ldrd	r2, [r3]
   1a6e4:	cmp	fp, r3
   1a6e8:	cmpeq	sl, r2
   1a6ec:	beq	1aa40 <_start@@Base+0x83b0>
   1a6f0:	mov	r2, r9
   1a6f4:	mov	r1, r4
   1a6f8:	mov	r0, r7
   1a6fc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1a700:	mov	r4, r0
   1a704:	sub	r3, r9, r4
   1a708:	cmp	r3, #1
   1a70c:	ble	1a720 <_start@@Base+0x8090>
   1a710:	ldrb	r3, [r4]
   1a714:	cmp	r3, #32
   1a718:	bhi	1a734 <_start@@Base+0x80a4>
   1a71c:	beq	1acd4 <_start@@Base+0x8644>
   1a720:	mov	r2, r9
   1a724:	mov	r1, r4
   1a728:	mov	r0, r7
   1a72c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1a730:	mov	r4, r0
   1a734:	cmp	r9, r4
   1a738:	moveq	r3, #0
   1a73c:	streq	r3, [sp, #356]	; 0x164
   1a740:	beq	1a77c <_start@@Base+0x80ec>
   1a744:	ldrb	r3, [r4]
   1a748:	cmp	r3, #44	; 0x2c
   1a74c:	beq	1ad34 <_start@@Base+0x86a4>
   1a750:	mov	r3, #0
   1a754:	str	r3, [sp, #356]	; 0x164
   1a758:	ldrb	r3, [r4]
   1a75c:	cmp	r3, #125	; 0x7d
   1a760:	beq	1ace8 <_start@@Base+0x8658>
   1a764:	mov	r3, #10
   1a768:	mov	r2, r9
   1a76c:	mov	r1, r4
   1a770:	mov	r0, r7
   1a774:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1a778:	mov	r4, r0
   1a77c:	ldr	r3, [sp, #356]	; 0x164
   1a780:	cmp	r3, #0
   1a784:	beq	1ab54 <_start@@Base+0x84c4>
   1a788:	cmp	r9, r4
   1a78c:	beq	1a7b8 <_start@@Base+0x8128>
   1a790:	ldrb	r3, [r4]
   1a794:	cmp	r3, #34	; 0x22
   1a798:	addeq	r4, r4, #1
   1a79c:	moveq	r3, #0
   1a7a0:	streq	r3, [r7, #12]
   1a7a4:	beq	1a7b8 <_start@@Base+0x8128>
   1a7a8:	cmp	r3, #46	; 0x2e
   1a7ac:	movne	r3, #1
   1a7b0:	strne	r3, [r7, #12]
   1a7b4:	beq	1a618 <_start@@Base+0x7f88>
   1a7b8:	sub	ip, r9, r4
   1a7bc:	cmp	ip, #8
   1a7c0:	bhi	1a65c <_start@@Base+0x7fcc>
   1a7c4:	sub	r3, ip, #1
   1a7c8:	cmp	r3, #7
   1a7cc:	ldrls	pc, [pc, r3, lsl #2]
   1a7d0:	b	1a848 <_start@@Base+0x81b8>
   1a7d4:	andeq	sl, r1, ip, lsr r8
   1a7d8:	andeq	sl, r1, r0, lsr r8
   1a7dc:	andeq	sl, r1, r4, lsr #16
   1a7e0:	andeq	sl, r1, r8, lsl r8
   1a7e4:	andeq	sl, r1, ip, lsl #16
   1a7e8:	andeq	sl, r1, r0, lsl #16
   1a7ec:	strdeq	sl, [r1], -r4
   1a7f0:	andeq	sl, r1, ip, asr r6
   1a7f4:	mov	r0, #0
   1a7f8:	mov	r1, r0
   1a7fc:	b	1a664 <_start@@Base+0x7fd4>
   1a800:	mov	r2, #0
   1a804:	mov	r3, r2
   1a808:	b	1a670 <_start@@Base+0x7fe0>
   1a80c:	mov	r1, #0
   1a810:	mov	r0, r1
   1a814:	b	1a67c <_start@@Base+0x7fec>
   1a818:	mov	r2, #0
   1a81c:	mov	r3, r2
   1a820:	b	1a688 <_start@@Base+0x7ff8>
   1a824:	mov	r2, #0
   1a828:	mov	r3, r2
   1a82c:	b	1a690 <_start@@Base+0x8000>
   1a830:	mov	r2, #0
   1a834:	mov	r3, r2
   1a838:	b	1a698 <_start@@Base+0x8008>
   1a83c:	mov	lr, #0
   1a840:	mov	r0, lr
   1a844:	b	1a6a4 <_start@@Base+0x8014>
   1a848:	mov	sl, #0
   1a84c:	mov	fp, #0
   1a850:	b	1a6b0 <_start@@Base+0x8020>
   1a854:	cmp	ip, #2
   1a858:	ble	1aa20 <_start@@Base+0x8390>
   1a85c:	ldr	r3, [r7, #12]
   1a860:	cmp	r3, #0
   1a864:	beq	1a958 <_start@@Base+0x82c8>
   1a868:	ldrb	r3, [r4, #2]
   1a86c:	cmp	r3, #58	; 0x3a
   1a870:	cmpne	r3, #32
   1a874:	bhi	1aa20 <_start@@Base+0x8390>
   1a878:	add	r1, r4, #2
   1a87c:	mov	r3, #0
   1a880:	str	r3, [r7, #12]
   1a884:	sub	r3, r9, r1
   1a888:	cmp	r3, #1
   1a88c:	ble	1a8a0 <_start@@Base+0x8210>
   1a890:	ldrb	r3, [r1]
   1a894:	cmp	r3, #32
   1a898:	bhi	1a8b0 <_start@@Base+0x8220>
   1a89c:	beq	1a96c <_start@@Base+0x82dc>
   1a8a0:	mov	r2, r9
   1a8a4:	mov	r0, r7
   1a8a8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1a8ac:	mov	r1, r0
   1a8b0:	cmp	r9, r1
   1a8b4:	beq	1a8c4 <_start@@Base+0x8234>
   1a8b8:	ldrb	r3, [r1]
   1a8bc:	cmp	r3, #58	; 0x3a
   1a8c0:	beq	1a980 <_start@@Base+0x82f0>
   1a8c4:	mov	r3, #4
   1a8c8:	mov	r2, r9
   1a8cc:	mov	r0, r7
   1a8d0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1a8d4:	mov	r5, r0
   1a8d8:	cmp	r4, r5
   1a8dc:	beq	1aa1c <_start@@Base+0x838c>
   1a8e0:	mov	r3, #0
   1a8e4:	str	r3, [sp, #360]	; 0x168
   1a8e8:	str	r3, [sp, #368]	; 0x170
   1a8ec:	str	r3, [sp, #372]	; 0x174
   1a8f0:	str	r3, [sp, #364]	; 0x16c
   1a8f4:	cmp	r9, r5
   1a8f8:	beq	1dac8 <_start@@Base+0xb438>
   1a8fc:	add	r3, sp, #368	; 0x170
   1a900:	str	r3, [sp]
   1a904:	add	r3, sp, #364	; 0x16c
   1a908:	mov	r2, r9
   1a90c:	mov	r1, r5
   1a910:	mov	r0, r7
   1a914:	bl	29968 <flatcc_json_parser_integer@@Base>
   1a918:	mov	r6, r0
   1a91c:	cmp	r5, r0
   1a920:	bne	1a998 <_start@@Base+0x8308>
   1a924:	add	r3, sp, #360	; 0x168
   1a928:	str	r3, [sp]
   1a92c:	ldr	r3, [sp, #256]	; 0x100
   1a930:	add	r3, r3, #272	; 0x110
   1a934:	mov	r2, r9
   1a938:	mov	r1, r6
   1a93c:	mov	r0, r7
   1a940:	bl	15548 <_start@@Base+0x2eb8>
   1a944:	mov	r4, r0
   1a948:	cmp	r9, r0
   1a94c:	cmpne	r0, r6
   1a950:	bne	1aa04 <_start@@Base+0x8374>
   1a954:	b	1ab3c <_start@@Base+0x84ac>
   1a958:	ldrb	r3, [r4, #2]
   1a95c:	cmp	r3, #34	; 0x22
   1a960:	bne	1aa20 <_start@@Base+0x8390>
   1a964:	add	r1, r4, #3
   1a968:	b	1a884 <_start@@Base+0x81f4>
   1a96c:	ldrb	r3, [r1, #1]
   1a970:	cmp	r3, #32
   1a974:	addhi	r1, r1, #1
   1a978:	bls	1a8a0 <_start@@Base+0x8210>
   1a97c:	b	1a8b0 <_start@@Base+0x8220>
   1a980:	mov	r2, r9
   1a984:	add	r1, r1, #1
   1a988:	mov	r0, r7
   1a98c:	bl	14544 <_start@@Base+0x1eb4>
   1a990:	mov	r5, r0
   1a994:	b	1a8d8 <_start@@Base+0x8248>
   1a998:	ldr	r3, [sp, #364]	; 0x16c
   1a99c:	cmp	r3, #0
   1a9a0:	bne	1a9e4 <_start@@Base+0x8354>
   1a9a4:	add	r3, sp, #368	; 0x170
   1a9a8:	ldrd	r2, [r3]
   1a9ac:	mvn	r0, #0
   1a9b0:	mov	r1, #0
   1a9b4:	cmp	r3, r1
   1a9b8:	cmpeq	r2, r0
   1a9bc:	strls	r2, [sp, #360]	; 0x168
   1a9c0:	movls	r4, r6
   1a9c4:	bls	1aa04 <_start@@Base+0x8374>
   1a9c8:	mov	r3, #7
   1a9cc:	mov	r2, r9
   1a9d0:	mov	r1, r6
   1a9d4:	mov	r0, r7
   1a9d8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1a9dc:	mov	r4, r0
   1a9e0:	b	1a9fc <_start@@Base+0x836c>
   1a9e4:	mov	r3, #8
   1a9e8:	mov	r2, r9
   1a9ec:	mov	r1, r0
   1a9f0:	mov	r0, r7
   1a9f4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1a9f8:	mov	r4, r0
   1a9fc:	cmp	r5, r4
   1aa00:	beq	1aa14 <_start@@Base+0x8384>
   1aa04:	ldr	r3, [sp, #360]	; 0x168
   1aa08:	ldr	r2, [sp, #72]	; 0x48
   1aa0c:	str	r3, [r2]
   1aa10:	b	1a704 <_start@@Base+0x8074>
   1aa14:	mov	r6, r4
   1aa18:	b	1a924 <_start@@Base+0x8294>
   1aa1c:	mov	r4, r5
   1aa20:	mov	r2, r9
   1aa24:	mov	r1, r4
   1aa28:	mov	r0, r7
   1aa2c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1aa30:	mov	r4, r0
   1aa34:	b	1a704 <_start@@Base+0x8074>
   1aa38:	cmnvs	lr, r5, ror #6
   1aa3c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1aa40:	cmp	ip, #8
   1aa44:	ble	1acbc <_start@@Base+0x862c>
   1aa48:	ldr	r3, [r7, #12]
   1aa4c:	cmp	r3, #0
   1aa50:	beq	1abc0 <_start@@Base+0x8530>
   1aa54:	ldrb	r3, [r4, #8]
   1aa58:	cmp	r3, #58	; 0x3a
   1aa5c:	cmpne	r3, #32
   1aa60:	bhi	1acbc <_start@@Base+0x862c>
   1aa64:	add	r1, r4, #8
   1aa68:	mov	r3, #0
   1aa6c:	str	r3, [r7, #12]
   1aa70:	sub	r3, r9, r1
   1aa74:	cmp	r3, #1
   1aa78:	ble	1aa8c <_start@@Base+0x83fc>
   1aa7c:	ldrb	r3, [r1]
   1aa80:	cmp	r3, #32
   1aa84:	bhi	1aa9c <_start@@Base+0x840c>
   1aa88:	beq	1abd4 <_start@@Base+0x8544>
   1aa8c:	mov	r2, r9
   1aa90:	mov	r0, r7
   1aa94:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1aa98:	mov	r1, r0
   1aa9c:	cmp	r9, r1
   1aaa0:	beq	1aab0 <_start@@Base+0x8420>
   1aaa4:	ldrb	r3, [r1]
   1aaa8:	cmp	r3, #58	; 0x3a
   1aaac:	beq	1abe8 <_start@@Base+0x8558>
   1aab0:	mov	r3, #4
   1aab4:	mov	r2, r9
   1aab8:	mov	r0, r7
   1aabc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1aac0:	mov	r5, r0
   1aac4:	cmp	r4, r5
   1aac8:	beq	1acb8 <_start@@Base+0x8628>
   1aacc:	mov	r3, #0
   1aad0:	str	r3, [sp, #360]	; 0x168
   1aad4:	str	r3, [sp, #368]	; 0x170
   1aad8:	str	r3, [sp, #372]	; 0x174
   1aadc:	str	r3, [sp, #364]	; 0x16c
   1aae0:	cmp	r9, r5
   1aae4:	beq	1dad0 <_start@@Base+0xb440>
   1aae8:	add	r3, sp, #368	; 0x170
   1aaec:	str	r3, [sp]
   1aaf0:	add	r3, sp, #364	; 0x16c
   1aaf4:	mov	r2, r9
   1aaf8:	mov	r1, r5
   1aafc:	mov	r0, r7
   1ab00:	bl	29968 <flatcc_json_parser_integer@@Base>
   1ab04:	mov	r6, r0
   1ab08:	cmp	r5, r0
   1ab0c:	bne	1ac34 <_start@@Base+0x85a4>
   1ab10:	add	r3, sp, #360	; 0x168
   1ab14:	str	r3, [sp]
   1ab18:	ldr	r3, [sp, #240]	; 0xf0
   1ab1c:	mov	r2, r9
   1ab20:	mov	r1, r6
   1ab24:	mov	r0, r7
   1ab28:	bl	15548 <_start@@Base+0x2eb8>
   1ab2c:	mov	r4, r0
   1ab30:	cmp	r9, r0
   1ab34:	cmpne	r6, r0
   1ab38:	bne	1aca0 <_start@@Base+0x8610>
   1ab3c:	mov	r3, #33	; 0x21
   1ab40:	mov	r2, r9
   1ab44:	mov	r1, r4
   1ab48:	mov	r0, r7
   1ab4c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1ab50:	mov	r4, r0
   1ab54:	add	r3, sp, #388	; 0x184
   1ab58:	mov	r2, r9
   1ab5c:	mov	r1, r4
   1ab60:	mov	r0, r7
   1ab64:	bl	17e90 <_start@@Base+0x5800>
   1ab68:	mov	r4, r0
   1ab6c:	ldr	r3, [sp, #388]	; 0x184
   1ab70:	cmp	r3, #0
   1ab74:	beq	1ae10 <_start@@Base+0x8780>
   1ab78:	mov	r1, #1
   1ab7c:	ldr	r0, [r7]
   1ab80:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   1ab84:	subs	r3, r0, #0
   1ab88:	str	r3, [sp, #72]	; 0x48
   1ab8c:	beq	1d984 <_start@@Base+0xb2f4>
   1ab90:	add	r3, sp, #356	; 0x164
   1ab94:	mov	r2, r9
   1ab98:	mov	r1, r4
   1ab9c:	mov	r0, r7
   1aba0:	bl	14680 <_start@@Base+0x1ff0>
   1aba4:	mov	r4, r0
   1aba8:	movw	r3, #57464	; 0xe078
   1abac:	movt	r3, #3
   1abb0:	str	r3, [sp, #256]	; 0x100
   1abb4:	add	r3, r3, #284	; 0x11c
   1abb8:	str	r3, [sp, #240]	; 0xf0
   1abbc:	b	1a77c <_start@@Base+0x80ec>
   1abc0:	ldrb	r3, [r4, #8]
   1abc4:	cmp	r3, #34	; 0x22
   1abc8:	bne	1acbc <_start@@Base+0x862c>
   1abcc:	add	r1, r4, #9
   1abd0:	b	1aa70 <_start@@Base+0x83e0>
   1abd4:	ldrb	r3, [r1, #1]
   1abd8:	cmp	r3, #32
   1abdc:	addhi	r1, r1, #1
   1abe0:	bls	1aa8c <_start@@Base+0x83fc>
   1abe4:	b	1aa9c <_start@@Base+0x840c>
   1abe8:	add	r5, r1, #1
   1abec:	sub	r3, r9, r5
   1abf0:	cmp	r3, #1
   1abf4:	ble	1ac08 <_start@@Base+0x8578>
   1abf8:	ldrb	r3, [r1, #1]
   1abfc:	cmp	r3, #32
   1ac00:	bhi	1aac4 <_start@@Base+0x8434>
   1ac04:	beq	1ac20 <_start@@Base+0x8590>
   1ac08:	mov	r2, r9
   1ac0c:	mov	r1, r5
   1ac10:	mov	r0, r7
   1ac14:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1ac18:	mov	r5, r0
   1ac1c:	b	1aac4 <_start@@Base+0x8434>
   1ac20:	ldrb	r3, [r1, #2]
   1ac24:	cmp	r3, #32
   1ac28:	addhi	r5, r1, #2
   1ac2c:	bls	1ac08 <_start@@Base+0x8578>
   1ac30:	b	1aac4 <_start@@Base+0x8434>
   1ac34:	ldr	r3, [sp, #364]	; 0x16c
   1ac38:	cmp	r3, #0
   1ac3c:	bne	1ac80 <_start@@Base+0x85f0>
   1ac40:	add	r3, sp, #368	; 0x170
   1ac44:	ldrd	r2, [r3]
   1ac48:	mvn	r0, #0
   1ac4c:	mov	r1, #0
   1ac50:	cmp	r3, r1
   1ac54:	cmpeq	r2, r0
   1ac58:	strls	r2, [sp, #360]	; 0x168
   1ac5c:	movls	r4, r6
   1ac60:	bls	1aca0 <_start@@Base+0x8610>
   1ac64:	mov	r3, #7
   1ac68:	mov	r2, r9
   1ac6c:	mov	r1, r6
   1ac70:	mov	r0, r7
   1ac74:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1ac78:	mov	r4, r0
   1ac7c:	b	1ac98 <_start@@Base+0x8608>
   1ac80:	mov	r3, #8
   1ac84:	mov	r2, r9
   1ac88:	mov	r1, r0
   1ac8c:	mov	r0, r7
   1ac90:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1ac94:	mov	r4, r0
   1ac98:	cmp	r5, r4
   1ac9c:	beq	1acb0 <_start@@Base+0x8620>
   1aca0:	ldr	r3, [sp, #360]	; 0x168
   1aca4:	ldr	r2, [sp, #72]	; 0x48
   1aca8:	str	r3, [r2, #4]
   1acac:	b	1a704 <_start@@Base+0x8074>
   1acb0:	mov	r6, r4
   1acb4:	b	1ab10 <_start@@Base+0x8480>
   1acb8:	mov	r4, r5
   1acbc:	mov	r2, r9
   1acc0:	mov	r1, r4
   1acc4:	mov	r0, r7
   1acc8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1accc:	mov	r4, r0
   1acd0:	b	1a704 <_start@@Base+0x8074>
   1acd4:	ldrb	r3, [r4, #1]
   1acd8:	cmp	r3, #32
   1acdc:	addhi	r4, r4, #1
   1ace0:	bls	1a720 <_start@@Base+0x8090>
   1ace4:	b	1a734 <_start@@Base+0x80a4>
   1ace8:	add	r1, r4, #1
   1acec:	sub	r3, r9, r1
   1acf0:	cmp	r3, #1
   1acf4:	ble	1ad0c <_start@@Base+0x867c>
   1acf8:	ldrb	r3, [r4, #1]
   1acfc:	cmp	r3, #32
   1ad00:	movhi	r4, r1
   1ad04:	bhi	1a77c <_start@@Base+0x80ec>
   1ad08:	beq	1ad20 <_start@@Base+0x8690>
   1ad0c:	mov	r2, r9
   1ad10:	mov	r0, r7
   1ad14:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1ad18:	mov	r4, r0
   1ad1c:	b	1a77c <_start@@Base+0x80ec>
   1ad20:	ldrb	r3, [r4, #2]
   1ad24:	cmp	r3, #32
   1ad28:	addhi	r4, r4, #2
   1ad2c:	bls	1ad0c <_start@@Base+0x867c>
   1ad30:	b	1a77c <_start@@Base+0x80ec>
   1ad34:	add	r1, r4, #1
   1ad38:	sub	r3, r9, r1
   1ad3c:	cmp	r3, #1
   1ad40:	ble	1ad58 <_start@@Base+0x86c8>
   1ad44:	ldrb	r3, [r4, #1]
   1ad48:	cmp	r3, #32
   1ad4c:	movhi	r4, r1
   1ad50:	bhi	1ad68 <_start@@Base+0x86d8>
   1ad54:	beq	1adc4 <_start@@Base+0x8734>
   1ad58:	mov	r2, r9
   1ad5c:	mov	r0, r7
   1ad60:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1ad64:	mov	r4, r0
   1ad68:	cmp	r9, r4
   1ad6c:	beq	1add8 <_start@@Base+0x8748>
   1ad70:	ldrb	r3, [r4]
   1ad74:	cmp	r3, #125	; 0x7d
   1ad78:	movne	r3, #1
   1ad7c:	strne	r3, [sp, #356]	; 0x164
   1ad80:	bne	1a77c <_start@@Base+0x80ec>
   1ad84:	mov	r3, #0
   1ad88:	str	r3, [sp, #356]	; 0x164
   1ad8c:	add	r1, r4, #1
   1ad90:	sub	r3, r9, r1
   1ad94:	cmp	r3, #1
   1ad98:	ble	1adb0 <_start@@Base+0x8720>
   1ad9c:	ldrb	r3, [r4, #1]
   1ada0:	cmp	r3, #32
   1ada4:	movhi	r4, r1
   1ada8:	bhi	1a77c <_start@@Base+0x80ec>
   1adac:	beq	1adfc <_start@@Base+0x876c>
   1adb0:	mov	r2, r9
   1adb4:	mov	r0, r7
   1adb8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1adbc:	mov	r4, r0
   1adc0:	b	1a77c <_start@@Base+0x80ec>
   1adc4:	ldrb	r3, [r4, #2]
   1adc8:	cmp	r3, #32
   1adcc:	addhi	r4, r4, #2
   1add0:	bls	1ad58 <_start@@Base+0x86c8>
   1add4:	b	1ad68 <_start@@Base+0x86d8>
   1add8:	mov	r3, #0
   1addc:	str	r3, [sp, #356]	; 0x164
   1ade0:	mov	r3, #10
   1ade4:	mov	r2, r9
   1ade8:	mov	r1, r4
   1adec:	mov	r0, r7
   1adf0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1adf4:	mov	r4, r0
   1adf8:	b	1a77c <_start@@Base+0x80ec>
   1adfc:	ldrb	r3, [r4, #2]
   1ae00:	cmp	r3, #32
   1ae04:	addhi	r4, r4, #2
   1ae08:	bls	1adb0 <_start@@Base+0x8720>
   1ae0c:	b	1a77c <_start@@Base+0x80ec>
   1ae10:	add	r3, sp, #256	; 0x100
   1ae14:	strd	sl, [r3]
   1ae18:	mov	sl, r7
   1ae1c:	add	r3, sp, #344	; 0x158
   1ae20:	ldrd	r6, [r3]
   1ae24:	mov	r8, r0
   1ae28:	ldr	r0, [sl]
   1ae2c:	bl	248a4 <flatcc_builder_end_vector@@Base>
   1ae30:	str	r0, [sp, #384]	; 0x180
   1ae34:	cmp	r0, #0
   1ae38:	beq	1d990 <_start@@Base+0xb300>
   1ae3c:	mov	r1, #29
   1ae40:	ldr	r0, [sl]
   1ae44:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1ae48:	cmp	r0, #0
   1ae4c:	beq	1d998 <_start@@Base+0xb308>
   1ae50:	ldr	r3, [sp, #384]	; 0x180
   1ae54:	str	r3, [r0]
   1ae58:	b	1c5f8 <_start@@Base+0x9f68>
   1ae5c:	add	r3, pc, #820	; 0x334
   1ae60:	ldrd	r2, [r3]
   1ae64:	cmp	r1, r3
   1ae68:	cmpeq	r0, r2
   1ae6c:	beq	1aecc <_start@@Base+0x883c>
   1ae70:	add	r3, pc, #808	; 0x328
   1ae74:	ldrd	r2, [r3]
   1ae78:	cmp	r1, r3
   1ae7c:	cmpeq	r0, r2
   1ae80:	bne	1b288 <_start@@Base+0x8bf8>
   1ae84:	add	r4, r8, #16
   1ae88:	mov	r1, r9
   1ae8c:	mov	r0, r4
   1ae90:	bl	12780 <_start@@Base+0xf0>
   1ae94:	mov	r3, #0
   1ae98:	str	r3, [sp, #232]	; 0xe8
   1ae9c:	and	r3, r1, #-16777216	; 0xff000000
   1aea0:	str	r3, [sp, #236]	; 0xec
   1aea4:	ldrd	r2, [sp, #232]	; 0xe8
   1aea8:	cmp	r3, #1929379840	; 0x73000000
   1aeac:	cmpeq	r2, #0
   1aeb0:	beq	1b15c <_start@@Base+0x8acc>
   1aeb4:	mov	r2, r9
   1aeb8:	mov	r1, r4
   1aebc:	mov	r0, sl
   1aec0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1aec4:	mov	r8, r0
   1aec8:	b	1c5f8 <_start@@Base+0x9f68>
   1aecc:	add	r4, r8, #16
   1aed0:	mov	r1, r9
   1aed4:	mov	r0, r4
   1aed8:	bl	12780 <_start@@Base+0xf0>
   1aedc:	mov	ip, r1
   1aee0:	mov	r3, #0
   1aee4:	str	r3, [sp, #200]	; 0xc8
   1aee8:	lsr	r3, r1, #16
   1aeec:	lsl	r3, r3, #16
   1aef0:	str	r3, [sp, #204]	; 0xcc
   1aef4:	mov	r2, #0
   1aef8:	mov	r3, #0
   1aefc:	movt	r3, #26418	; 0x6732
   1af00:	ldrd	r0, [sp, #200]	; 0xc8
   1af04:	cmp	r1, r3
   1af08:	cmpeq	r0, r2
   1af0c:	beq	1af4c <_start@@Base+0x88bc>
   1af10:	mov	r3, #0
   1af14:	str	r3, [sp, #264]	; 0x108
   1af18:	and	r3, ip, #-16777216	; 0xff000000
   1af1c:	str	r3, [sp, #268]	; 0x10c
   1af20:	add	r3, sp, #264	; 0x108
   1af24:	ldrd	r2, [r3]
   1af28:	cmp	r3, #1728053248	; 0x67000000
   1af2c:	cmpeq	r2, #0
   1af30:	beq	1b054 <_start@@Base+0x89c4>
   1af34:	mov	r2, r9
   1af38:	mov	r1, r4
   1af3c:	mov	r0, sl
   1af40:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1af44:	mov	r8, r0
   1af48:	b	1c5f8 <_start@@Base+0x9f68>
   1af4c:	mov	r3, #2
   1af50:	mov	r2, r9
   1af54:	mov	r1, r4
   1af58:	mov	r0, sl
   1af5c:	bl	14594 <_start@@Base+0x1f04>
   1af60:	mov	r8, r0
   1af64:	cmp	r4, r0
   1af68:	bne	1af84 <_start@@Base+0x88f4>
   1af6c:	mov	r2, r9
   1af70:	mov	r1, r0
   1af74:	mov	r0, sl
   1af78:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1af7c:	mov	r8, r0
   1af80:	b	1c5f8 <_start@@Base+0x9f68>
   1af84:	ldr	r0, [sl]
   1af88:	bl	23840 <flatcc_builder_start_offset_vector@@Base>
   1af8c:	cmp	r0, #0
   1af90:	bne	1d9a0 <_start@@Base+0xb310>
   1af94:	add	r3, sp, #388	; 0x184
   1af98:	mov	r2, r9
   1af9c:	mov	r1, r8
   1afa0:	mov	r0, sl
   1afa4:	bl	14754 <_start@@Base+0x20c4>
   1afa8:	mov	r8, r0
   1afac:	ldr	r3, [sp, #388]	; 0x184
   1afb0:	cmp	r3, #0
   1afb4:	beq	1b020 <_start@@Base+0x8990>
   1afb8:	mov	r4, #1
   1afbc:	add	r3, sp, #384	; 0x180
   1afc0:	mov	r2, r9
   1afc4:	mov	r1, r8
   1afc8:	mov	r0, sl
   1afcc:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   1afd0:	mov	r8, r0
   1afd4:	ldr	r3, [sp, #384]	; 0x180
   1afd8:	cmp	r3, #0
   1afdc:	beq	1d9a8 <_start@@Base+0xb318>
   1afe0:	mov	r1, r4
   1afe4:	ldr	r0, [sl]
   1afe8:	bl	23144 <flatcc_builder_extend_offset_vector@@Base>
   1afec:	cmp	r0, #0
   1aff0:	beq	1d9b0 <_start@@Base+0xb320>
   1aff4:	ldr	r3, [sp, #384]	; 0x180
   1aff8:	str	r3, [r0]
   1affc:	add	r3, sp, #388	; 0x184
   1b000:	mov	r2, r9
   1b004:	mov	r1, r8
   1b008:	mov	r0, sl
   1b00c:	bl	17e90 <_start@@Base+0x5800>
   1b010:	mov	r8, r0
   1b014:	ldr	r3, [sp, #388]	; 0x184
   1b018:	cmp	r3, #0
   1b01c:	bne	1afbc <_start@@Base+0x892c>
   1b020:	ldr	r0, [sl]
   1b024:	bl	249d0 <flatcc_builder_end_offset_vector@@Base>
   1b028:	str	r0, [sp, #384]	; 0x180
   1b02c:	cmp	r0, #0
   1b030:	beq	1d9b8 <_start@@Base+0xb328>
   1b034:	mov	r1, #28
   1b038:	ldr	r0, [sl]
   1b03c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1b040:	cmp	r0, #0
   1b044:	beq	1d9c0 <_start@@Base+0xb330>
   1b048:	ldr	r3, [sp, #384]	; 0x180
   1b04c:	str	r3, [r0]
   1b050:	b	1c5f8 <_start@@Base+0x9f68>
   1b054:	mov	r3, #1
   1b058:	mov	r2, r9
   1b05c:	mov	r1, r4
   1b060:	mov	r0, sl
   1b064:	bl	14594 <_start@@Base+0x1f04>
   1b068:	mov	r8, r0
   1b06c:	cmp	r4, r0
   1b070:	bne	1b08c <_start@@Base+0x89fc>
   1b074:	mov	r2, r9
   1b078:	mov	r1, r0
   1b07c:	mov	r0, sl
   1b080:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b084:	mov	r8, r0
   1b088:	b	1c5f8 <_start@@Base+0x9f68>
   1b08c:	ldr	r0, [sl]
   1b090:	bl	23840 <flatcc_builder_start_offset_vector@@Base>
   1b094:	cmp	r0, #0
   1b098:	bne	1d9c8 <_start@@Base+0xb338>
   1b09c:	add	r3, sp, #388	; 0x184
   1b0a0:	mov	r2, r9
   1b0a4:	mov	r1, r8
   1b0a8:	mov	r0, sl
   1b0ac:	bl	14754 <_start@@Base+0x20c4>
   1b0b0:	mov	r8, r0
   1b0b4:	ldr	r3, [sp, #388]	; 0x184
   1b0b8:	cmp	r3, #0
   1b0bc:	beq	1b128 <_start@@Base+0x8a98>
   1b0c0:	mov	r4, #1
   1b0c4:	add	r3, sp, #384	; 0x180
   1b0c8:	mov	r2, r9
   1b0cc:	mov	r1, r8
   1b0d0:	mov	r0, sl
   1b0d4:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   1b0d8:	mov	r8, r0
   1b0dc:	ldr	r3, [sp, #384]	; 0x180
   1b0e0:	cmp	r3, #0
   1b0e4:	beq	1d9d0 <_start@@Base+0xb340>
   1b0e8:	mov	r1, r4
   1b0ec:	ldr	r0, [sl]
   1b0f0:	bl	23144 <flatcc_builder_extend_offset_vector@@Base>
   1b0f4:	cmp	r0, #0
   1b0f8:	beq	1d9d8 <_start@@Base+0xb348>
   1b0fc:	ldr	r3, [sp, #384]	; 0x180
   1b100:	str	r3, [r0]
   1b104:	add	r3, sp, #388	; 0x184
   1b108:	mov	r2, r9
   1b10c:	mov	r1, r8
   1b110:	mov	r0, sl
   1b114:	bl	17e90 <_start@@Base+0x5800>
   1b118:	mov	r8, r0
   1b11c:	ldr	r3, [sp, #388]	; 0x184
   1b120:	cmp	r3, #0
   1b124:	bne	1b0c4 <_start@@Base+0x8a34>
   1b128:	ldr	r0, [sl]
   1b12c:	bl	249d0 <flatcc_builder_end_offset_vector@@Base>
   1b130:	str	r0, [sp, #384]	; 0x180
   1b134:	cmp	r0, #0
   1b138:	beq	1d9e0 <_start@@Base+0xb350>
   1b13c:	mov	r1, #10
   1b140:	ldr	r0, [sl]
   1b144:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1b148:	cmp	r0, #0
   1b14c:	beq	1d9e8 <_start@@Base+0xb358>
   1b150:	ldr	r3, [sp, #384]	; 0x180
   1b154:	str	r3, [r0]
   1b158:	b	1c5f8 <_start@@Base+0x9f68>
   1b15c:	mov	r3, #1
   1b160:	mov	r2, r9
   1b164:	mov	r1, r4
   1b168:	mov	r0, sl
   1b16c:	bl	14594 <_start@@Base+0x1f04>
   1b170:	mov	r8, r0
   1b174:	cmp	r4, r0
   1b178:	bne	1b1b8 <_start@@Base+0x8b28>
   1b17c:	mov	r2, r9
   1b180:	mov	r1, r0
   1b184:	mov	r0, sl
   1b188:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b18c:	mov	r8, r0
   1b190:	b	1c5f8 <_start@@Base+0x9f68>
   1b194:	nop	{0}
   1b198:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1b19c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1b1a0:	cmnvs	r2, r5, ror #24
   1b1a4:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1b1a8:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1b1ac:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b1b0:	andeq	r0, r0, r0
   1b1b4:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1b1b8:	ldr	r0, [sl]
   1b1bc:	bl	23840 <flatcc_builder_start_offset_vector@@Base>
   1b1c0:	cmp	r0, #0
   1b1c4:	bne	1d9f0 <_start@@Base+0xb360>
   1b1c8:	add	r3, sp, #388	; 0x184
   1b1cc:	mov	r2, r9
   1b1d0:	mov	r1, r8
   1b1d4:	mov	r0, sl
   1b1d8:	bl	14754 <_start@@Base+0x20c4>
   1b1dc:	mov	r8, r0
   1b1e0:	ldr	r3, [sp, #388]	; 0x184
   1b1e4:	cmp	r3, #0
   1b1e8:	beq	1b254 <_start@@Base+0x8bc4>
   1b1ec:	mov	r4, #1
   1b1f0:	add	r3, sp, #384	; 0x180
   1b1f4:	mov	r2, r9
   1b1f8:	mov	r1, r8
   1b1fc:	mov	r0, sl
   1b200:	bl	1893c <_start@@Base+0x62ac>
   1b204:	mov	r8, r0
   1b208:	ldr	r3, [sp, #384]	; 0x180
   1b20c:	cmp	r3, #0
   1b210:	beq	1d9f8 <_start@@Base+0xb368>
   1b214:	mov	r1, r4
   1b218:	ldr	r0, [sl]
   1b21c:	bl	23144 <flatcc_builder_extend_offset_vector@@Base>
   1b220:	cmp	r0, #0
   1b224:	beq	1da00 <_start@@Base+0xb370>
   1b228:	ldr	r3, [sp, #384]	; 0x180
   1b22c:	str	r3, [r0]
   1b230:	add	r3, sp, #388	; 0x184
   1b234:	mov	r2, r9
   1b238:	mov	r1, r8
   1b23c:	mov	r0, sl
   1b240:	bl	17e90 <_start@@Base+0x5800>
   1b244:	mov	r8, r0
   1b248:	ldr	r3, [sp, #388]	; 0x184
   1b24c:	cmp	r3, #0
   1b250:	bne	1b1f0 <_start@@Base+0x8b60>
   1b254:	ldr	r0, [sl]
   1b258:	bl	249d0 <flatcc_builder_end_offset_vector@@Base>
   1b25c:	str	r0, [sp, #384]	; 0x180
   1b260:	cmp	r0, #0
   1b264:	beq	1da08 <_start@@Base+0xb378>
   1b268:	mov	r1, #11
   1b26c:	ldr	r0, [sl]
   1b270:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1b274:	cmp	r0, #0
   1b278:	beq	1da10 <_start@@Base+0xb380>
   1b27c:	ldr	r3, [sp, #384]	; 0x180
   1b280:	str	r3, [r0]
   1b284:	b	1c5f8 <_start@@Base+0x9f68>
   1b288:	mov	r2, r9
   1b28c:	mov	r1, r4
   1b290:	mov	r0, sl
   1b294:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b298:	mov	r8, r0
   1b29c:	b	1c5f8 <_start@@Base+0x9f68>
   1b2a0:	add	r4, r8, #8
   1b2a4:	mov	r1, r9
   1b2a8:	mov	r0, r4
   1b2ac:	bl	12780 <_start@@Base+0xf0>
   1b2b0:	mov	r3, #0
   1b2b4:	str	r3, [sp, #152]	; 0x98
   1b2b8:	lsr	r3, r1, #16
   1b2bc:	lsl	r3, r3, #16
   1b2c0:	str	r3, [sp, #156]	; 0x9c
   1b2c4:	mov	r2, #0
   1b2c8:	mov	r3, #0
   1b2cc:	movt	r3, #13876	; 0x3634
   1b2d0:	ldrd	r0, [sp, #152]	; 0x98
   1b2d4:	cmp	r1, r3
   1b2d8:	cmpeq	r0, r2
   1b2dc:	beq	1b2f8 <_start@@Base+0x8c68>
   1b2e0:	mov	r2, r9
   1b2e4:	mov	r1, r4
   1b2e8:	mov	r0, sl
   1b2ec:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b2f0:	mov	r8, r0
   1b2f4:	b	1c5f8 <_start@@Base+0x9f68>
   1b2f8:	mov	r3, #2
   1b2fc:	mov	r2, r9
   1b300:	mov	r1, r4
   1b304:	mov	r0, sl
   1b308:	bl	14594 <_start@@Base+0x1f04>
   1b30c:	mov	r8, r0
   1b310:	cmp	r4, r0
   1b314:	beq	1b94c <_start@@Base+0x92bc>
   1b318:	mov	r3, #0
   1b31c:	str	r3, [sp, #384]	; 0x180
   1b320:	mov	r1, #3
   1b324:	ldr	r0, [sl]
   1b328:	bl	23a98 <flatcc_builder_start_table@@Base>
   1b32c:	cmp	r0, #0
   1b330:	beq	1b378 <_start@@Base+0x8ce8>
   1b334:	mov	r3, #33	; 0x21
   1b338:	mov	r2, r9
   1b33c:	mov	r1, r8
   1b340:	mov	r0, sl
   1b344:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1b348:	mov	r8, r0
   1b34c:	ldr	r3, [sp, #384]	; 0x180
   1b350:	cmp	r3, #0
   1b354:	beq	1da18 <_start@@Base+0xb388>
   1b358:	mov	r1, #35	; 0x23
   1b35c:	ldr	r0, [sl]
   1b360:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1b364:	cmp	r0, #0
   1b368:	beq	1da20 <_start@@Base+0xb390>
   1b36c:	ldr	r3, [sp, #384]	; 0x180
   1b370:	str	r3, [r0]
   1b374:	b	1c5f8 <_start@@Base+0x9f68>
   1b378:	add	r3, sp, #364	; 0x16c
   1b37c:	mov	r2, r9
   1b380:	mov	r1, r8
   1b384:	mov	r0, sl
   1b388:	bl	14680 <_start@@Base+0x1ff0>
   1b38c:	mov	r8, r0
   1b390:	sub	r5, pc, #496	; 0x1f0
   1b394:	ldrd	r4, [r5]
   1b398:	mov	fp, #0
   1b39c:	movt	fp, #65535	; 0xffff
   1b3a0:	strd	r6, [sp, #240]	; 0xf0
   1b3a4:	mov	r7, sl
   1b3a8:	strd	r4, [sp, #72]	; 0x48
   1b3ac:	mov	r5, fp
   1b3b0:	add	r3, sp, #304	; 0x130
   1b3b4:	ldrd	sl, [r3]
   1b3b8:	b	1b4e0 <_start@@Base+0x8e50>
   1b3bc:	mov	r3, #5
   1b3c0:	mov	r2, r9
   1b3c4:	mov	r1, r8
   1b3c8:	mov	r0, r7
   1b3cc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1b3d0:	mov	r8, r0
   1b3d4:	b	1b51c <_start@@Base+0x8e8c>
   1b3d8:	ldrb	r0, [r8, #7]
   1b3dc:	mov	r1, #0
   1b3e0:	ldrb	r2, [r8, #6]
   1b3e4:	orr	r3, r0, r2, lsl #8
   1b3e8:	mov	r2, r1
   1b3ec:	ldrb	r0, [r8, #5]
   1b3f0:	orr	r3, r3, r0, lsl #16
   1b3f4:	ldrb	r0, [r8, #4]
   1b3f8:	orr	r3, r3, r0, lsl #24
   1b3fc:	ldrb	r0, [r8, #3]
   1b400:	orr	r2, r2, r0
   1b404:	ldrb	r0, [r8, #2]
   1b408:	orr	r2, r2, r0, lsl #8
   1b40c:	ldrb	r0, [r8, #1]
   1b410:	orr	r2, r2, r0, lsl #16
   1b414:	ldrb	r0, [r8]
   1b418:	mov	sl, r3
   1b41c:	orr	fp, r2, r0, lsl #24
   1b420:	ldrd	r2, [sp, #72]	; 0x48
   1b424:	cmp	fp, r3
   1b428:	cmpeq	sl, r2
   1b42c:	bhi	1b638 <_start@@Base+0x8fa8>
   1b430:	mov	r3, #0
   1b434:	str	r3, [sp, #136]	; 0x88
   1b438:	str	fp, [sp, #140]	; 0x8c
   1b43c:	ldrd	r2, [sp, #136]	; 0x88
   1b440:	sub	r1, pc, #664	; 0x298
   1b444:	ldrd	r0, [r1]
   1b448:	cmp	r3, r1
   1b44c:	cmpeq	r2, r0
   1b450:	beq	1b5b8 <_start@@Base+0x8f28>
   1b454:	mov	r2, r9
   1b458:	mov	r1, r8
   1b45c:	mov	r0, r7
   1b460:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b464:	mov	r8, r0
   1b468:	sub	r3, r9, r8
   1b46c:	cmp	r3, #1
   1b470:	ble	1b484 <_start@@Base+0x8df4>
   1b474:	ldrb	r3, [r8]
   1b478:	cmp	r3, #32
   1b47c:	bhi	1b498 <_start@@Base+0x8e08>
   1b480:	beq	1b798 <_start@@Base+0x9108>
   1b484:	mov	r2, r9
   1b488:	mov	r1, r8
   1b48c:	mov	r0, r7
   1b490:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1b494:	mov	r8, r0
   1b498:	cmp	r9, r8
   1b49c:	moveq	r3, #0
   1b4a0:	streq	r3, [sp, #364]	; 0x16c
   1b4a4:	beq	1b4e0 <_start@@Base+0x8e50>
   1b4a8:	ldrb	r3, [r8]
   1b4ac:	cmp	r3, #44	; 0x2c
   1b4b0:	beq	1b7f8 <_start@@Base+0x9168>
   1b4b4:	mov	r3, #0
   1b4b8:	str	r3, [sp, #364]	; 0x16c
   1b4bc:	ldrb	r3, [r8]
   1b4c0:	cmp	r3, #125	; 0x7d
   1b4c4:	beq	1b7ac <_start@@Base+0x911c>
   1b4c8:	mov	r3, #10
   1b4cc:	mov	r2, r9
   1b4d0:	mov	r1, r8
   1b4d4:	mov	r0, r7
   1b4d8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1b4dc:	mov	r8, r0
   1b4e0:	ldr	r3, [sp, #364]	; 0x16c
   1b4e4:	cmp	r3, #0
   1b4e8:	beq	1b8a0 <_start@@Base+0x9210>
   1b4ec:	cmp	r9, r8
   1b4f0:	beq	1b51c <_start@@Base+0x8e8c>
   1b4f4:	ldrb	r3, [r8]
   1b4f8:	cmp	r3, #34	; 0x22
   1b4fc:	addeq	r8, r8, #1
   1b500:	moveq	r3, #0
   1b504:	streq	r3, [r7, #12]
   1b508:	beq	1b51c <_start@@Base+0x8e8c>
   1b50c:	cmp	r3, #46	; 0x2e
   1b510:	movne	r3, #1
   1b514:	strne	r3, [r7, #12]
   1b518:	beq	1b3bc <_start@@Base+0x8d2c>
   1b51c:	sub	r3, r9, r8
   1b520:	cmp	r3, #8
   1b524:	bhi	1b3d8 <_start@@Base+0x8d48>
   1b528:	sub	r3, r3, #1
   1b52c:	cmp	r3, #7
   1b530:	ldrls	pc, [pc, r3, lsl #2]
   1b534:	b	1b5ac <_start@@Base+0x8f1c>
   1b538:	andeq	fp, r1, r0, lsr #11
   1b53c:	muleq	r1, r4, r5
   1b540:	andeq	fp, r1, r8, lsl #11
   1b544:	andeq	fp, r1, ip, ror r5
   1b548:	andeq	fp, r1, r0, ror r5
   1b54c:	andeq	fp, r1, r4, ror #10
   1b550:	andeq	fp, r1, r8, asr r5
   1b554:	ldrdeq	fp, [r1], -r8
   1b558:	mov	r0, #0
   1b55c:	mov	r1, r0
   1b560:	b	1b3e0 <_start@@Base+0x8d50>
   1b564:	mov	r3, #0
   1b568:	mov	r2, r3
   1b56c:	b	1b3ec <_start@@Base+0x8d5c>
   1b570:	mov	r3, #0
   1b574:	mov	r2, r3
   1b578:	b	1b3f4 <_start@@Base+0x8d64>
   1b57c:	mov	r3, #0
   1b580:	mov	r2, r3
   1b584:	b	1b3fc <_start@@Base+0x8d6c>
   1b588:	mov	r3, #0
   1b58c:	mov	r2, r3
   1b590:	b	1b404 <_start@@Base+0x8d74>
   1b594:	mov	r3, #0
   1b598:	mov	r2, r3
   1b59c:	b	1b40c <_start@@Base+0x8d7c>
   1b5a0:	mov	r3, #0
   1b5a4:	mov	r2, r3
   1b5a8:	b	1b414 <_start@@Base+0x8d84>
   1b5ac:	mov	sl, #0
   1b5b0:	mov	fp, #0
   1b5b4:	b	1b420 <_start@@Base+0x8d90>
   1b5b8:	mov	r3, #4
   1b5bc:	mov	r2, r9
   1b5c0:	mov	r1, r8
   1b5c4:	mov	r0, r7
   1b5c8:	bl	14594 <_start@@Base+0x1f04>
   1b5cc:	cmp	r0, r8
   1b5d0:	beq	1b620 <_start@@Base+0x8f90>
   1b5d4:	mov	r3, #0
   1b5d8:	str	r3, [sp]
   1b5dc:	add	r3, sp, #368	; 0x170
   1b5e0:	mov	r2, r9
   1b5e4:	mov	r1, r0
   1b5e8:	mov	r0, r7
   1b5ec:	bl	29ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b5f0:	mov	r8, r0
   1b5f4:	ldr	r3, [sp, #368]	; 0x170
   1b5f8:	cmp	r3, #0
   1b5fc:	beq	1b8d4 <_start@@Base+0x9244>
   1b600:	mov	r1, #0
   1b604:	ldr	r0, [r7]
   1b608:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1b60c:	cmp	r0, #0
   1b610:	beq	1b8e8 <_start@@Base+0x9258>
   1b614:	ldr	r3, [sp, #368]	; 0x170
   1b618:	str	r3, [r0]
   1b61c:	b	1b468 <_start@@Base+0x8dd8>
   1b620:	mov	r2, r9
   1b624:	mov	r1, r8
   1b628:	mov	r0, r7
   1b62c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b630:	mov	r8, r0
   1b634:	b	1b468 <_start@@Base+0x8dd8>
   1b638:	bic	r3, sl, #255	; 0xff
   1b63c:	str	r3, [sp, #144]	; 0x90
   1b640:	str	fp, [sp, #148]	; 0x94
   1b644:	ldrd	r2, [sp, #144]	; 0x90
   1b648:	add	r1, pc, #792	; 0x318
   1b64c:	ldrd	r0, [r1]
   1b650:	cmp	r3, r1
   1b654:	cmpeq	r2, r0
   1b658:	beq	1b698 <_start@@Base+0x9008>
   1b65c:	and	r3, sl, r5
   1b660:	str	r3, [sp, #192]	; 0xc0
   1b664:	str	fp, [sp, #196]	; 0xc4
   1b668:	ldrd	r2, [sp, #192]	; 0xc0
   1b66c:	add	r1, pc, #764	; 0x2fc
   1b670:	ldrd	r0, [r1]
   1b674:	cmp	r3, r1
   1b678:	cmpeq	r2, r0
   1b67c:	beq	1b718 <_start@@Base+0x9088>
   1b680:	mov	r2, r9
   1b684:	mov	r1, r8
   1b688:	mov	r0, r7
   1b68c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b690:	mov	r8, r0
   1b694:	b	1b468 <_start@@Base+0x8dd8>
   1b698:	mov	r3, #7
   1b69c:	mov	r2, r9
   1b6a0:	mov	r1, r8
   1b6a4:	mov	r0, r7
   1b6a8:	bl	14594 <_start@@Base+0x1f04>
   1b6ac:	cmp	r0, r8
   1b6b0:	beq	1b700 <_start@@Base+0x9070>
   1b6b4:	mov	r3, #1
   1b6b8:	str	r3, [sp]
   1b6bc:	add	r3, sp, #368	; 0x170
   1b6c0:	mov	r2, r9
   1b6c4:	mov	r1, r0
   1b6c8:	mov	r0, r7
   1b6cc:	bl	29ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b6d0:	mov	r8, r0
   1b6d4:	ldr	r3, [sp, #368]	; 0x170
   1b6d8:	cmp	r3, #0
   1b6dc:	beq	1b8fc <_start@@Base+0x926c>
   1b6e0:	mov	r1, #1
   1b6e4:	ldr	r0, [r7]
   1b6e8:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1b6ec:	cmp	r0, #0
   1b6f0:	beq	1b910 <_start@@Base+0x9280>
   1b6f4:	ldr	r3, [sp, #368]	; 0x170
   1b6f8:	str	r3, [r0]
   1b6fc:	b	1b468 <_start@@Base+0x8dd8>
   1b700:	mov	r2, r9
   1b704:	mov	r1, r8
   1b708:	mov	r0, r7
   1b70c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b710:	mov	r8, r0
   1b714:	b	1b468 <_start@@Base+0x8dd8>
   1b718:	mov	r3, #6
   1b71c:	mov	r2, r9
   1b720:	mov	r1, r8
   1b724:	mov	r0, r7
   1b728:	bl	14594 <_start@@Base+0x1f04>
   1b72c:	cmp	r0, r8
   1b730:	beq	1b780 <_start@@Base+0x90f0>
   1b734:	mov	r3, #0
   1b738:	str	r3, [sp]
   1b73c:	add	r3, sp, #368	; 0x170
   1b740:	mov	r2, r9
   1b744:	mov	r1, r0
   1b748:	mov	r0, r7
   1b74c:	bl	29ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b750:	mov	r8, r0
   1b754:	ldr	r3, [sp, #368]	; 0x170
   1b758:	cmp	r3, #0
   1b75c:	beq	1b924 <_start@@Base+0x9294>
   1b760:	mov	r1, #2
   1b764:	ldr	r0, [r7]
   1b768:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1b76c:	cmp	r0, #0
   1b770:	beq	1b938 <_start@@Base+0x92a8>
   1b774:	ldr	r3, [sp, #368]	; 0x170
   1b778:	str	r3, [r0]
   1b77c:	b	1b468 <_start@@Base+0x8dd8>
   1b780:	mov	r2, r9
   1b784:	mov	r1, r8
   1b788:	mov	r0, r7
   1b78c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b790:	mov	r8, r0
   1b794:	b	1b468 <_start@@Base+0x8dd8>
   1b798:	ldrb	r3, [r8, #1]
   1b79c:	cmp	r3, #32
   1b7a0:	addhi	r8, r8, #1
   1b7a4:	bls	1b484 <_start@@Base+0x8df4>
   1b7a8:	b	1b498 <_start@@Base+0x8e08>
   1b7ac:	add	r1, r8, #1
   1b7b0:	sub	r3, r9, r1
   1b7b4:	cmp	r3, #1
   1b7b8:	ble	1b7d0 <_start@@Base+0x9140>
   1b7bc:	ldrb	r3, [r8, #1]
   1b7c0:	cmp	r3, #32
   1b7c4:	movhi	r8, r1
   1b7c8:	bhi	1b4e0 <_start@@Base+0x8e50>
   1b7cc:	beq	1b7e4 <_start@@Base+0x9154>
   1b7d0:	mov	r2, r9
   1b7d4:	mov	r0, r7
   1b7d8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1b7dc:	mov	r8, r0
   1b7e0:	b	1b4e0 <_start@@Base+0x8e50>
   1b7e4:	ldrb	r3, [r8, #2]
   1b7e8:	cmp	r3, #32
   1b7ec:	addhi	r8, r8, #2
   1b7f0:	bls	1b7d0 <_start@@Base+0x9140>
   1b7f4:	b	1b4e0 <_start@@Base+0x8e50>
   1b7f8:	add	r1, r8, #1
   1b7fc:	sub	r3, r9, r1
   1b800:	cmp	r3, #1
   1b804:	ble	1b81c <_start@@Base+0x918c>
   1b808:	ldrb	r3, [r8, #1]
   1b80c:	cmp	r3, #32
   1b810:	movhi	r8, r1
   1b814:	bhi	1b82c <_start@@Base+0x919c>
   1b818:	beq	1b868 <_start@@Base+0x91d8>
   1b81c:	mov	r2, r9
   1b820:	mov	r0, r7
   1b824:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1b828:	mov	r8, r0
   1b82c:	cmp	r9, r8
   1b830:	beq	1b87c <_start@@Base+0x91ec>
   1b834:	ldrb	r3, [r8]
   1b838:	cmp	r3, #125	; 0x7d
   1b83c:	movne	r3, #1
   1b840:	strne	r3, [sp, #364]	; 0x16c
   1b844:	bne	1b4e0 <_start@@Base+0x8e50>
   1b848:	mov	r3, #0
   1b84c:	str	r3, [sp, #364]	; 0x16c
   1b850:	mov	r2, r9
   1b854:	add	r1, r8, #1
   1b858:	mov	r0, r7
   1b85c:	bl	14544 <_start@@Base+0x1eb4>
   1b860:	mov	r8, r0
   1b864:	b	1b4e0 <_start@@Base+0x8e50>
   1b868:	ldrb	r3, [r8, #2]
   1b86c:	cmp	r3, #32
   1b870:	addhi	r8, r8, #2
   1b874:	bls	1b81c <_start@@Base+0x918c>
   1b878:	b	1b82c <_start@@Base+0x919c>
   1b87c:	mov	r3, #0
   1b880:	str	r3, [sp, #364]	; 0x16c
   1b884:	mov	r3, #10
   1b888:	mov	r2, r9
   1b88c:	mov	r1, r8
   1b890:	mov	r0, r7
   1b894:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1b898:	mov	r8, r0
   1b89c:	b	1b4e0 <_start@@Base+0x8e50>
   1b8a0:	add	r3, sp, #304	; 0x130
   1b8a4:	strd	sl, [r3]
   1b8a8:	mov	sl, r7
   1b8ac:	ldrd	r6, [sp, #240]	; 0xf0
   1b8b0:	ldr	r3, [sl, #24]
   1b8b4:	cmp	r3, #0
   1b8b8:	bne	1b334 <_start@@Base+0x8ca4>
   1b8bc:	ldr	r0, [sl]
   1b8c0:	bl	24570 <flatcc_builder_end_table@@Base>
   1b8c4:	str	r0, [sp, #384]	; 0x180
   1b8c8:	cmp	r0, #0
   1b8cc:	bne	1b34c <_start@@Base+0x8cbc>
   1b8d0:	b	1b334 <_start@@Base+0x8ca4>
   1b8d4:	add	r3, sp, #304	; 0x130
   1b8d8:	strd	sl, [r3]
   1b8dc:	mov	sl, r7
   1b8e0:	ldrd	r6, [sp, #240]	; 0xf0
   1b8e4:	b	1b334 <_start@@Base+0x8ca4>
   1b8e8:	add	r3, sp, #304	; 0x130
   1b8ec:	strd	sl, [r3]
   1b8f0:	mov	sl, r7
   1b8f4:	ldrd	r6, [sp, #240]	; 0xf0
   1b8f8:	b	1b334 <_start@@Base+0x8ca4>
   1b8fc:	add	r3, sp, #304	; 0x130
   1b900:	strd	sl, [r3]
   1b904:	mov	sl, r7
   1b908:	ldrd	r6, [sp, #240]	; 0xf0
   1b90c:	b	1b334 <_start@@Base+0x8ca4>
   1b910:	add	r3, sp, #304	; 0x130
   1b914:	strd	sl, [r3]
   1b918:	mov	sl, r7
   1b91c:	ldrd	r6, [sp, #240]	; 0xf0
   1b920:	b	1b334 <_start@@Base+0x8ca4>
   1b924:	add	r3, sp, #304	; 0x130
   1b928:	strd	sl, [r3]
   1b92c:	mov	sl, r7
   1b930:	ldrd	r6, [sp, #240]	; 0xf0
   1b934:	b	1b334 <_start@@Base+0x8ca4>
   1b938:	add	r3, sp, #304	; 0x130
   1b93c:	strd	sl, [r3]
   1b940:	mov	sl, r7
   1b944:	ldrd	r6, [sp, #240]	; 0xf0
   1b948:	b	1b334 <_start@@Base+0x8ca4>
   1b94c:	mov	r2, r9
   1b950:	mov	r1, r0
   1b954:	mov	r0, sl
   1b958:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1b95c:	mov	r8, r0
   1b960:	b	1c5f8 <_start@@Base+0x9f68>
   1b964:	nop	{0}
   1b968:	cmnvs	r4, r0, lsl #2
   1b96c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1b970:	strbvs	r0, [r4, #-0]!
   1b974:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b978:	andeq	lr, r3, r0, lsr #3
   1b97c:	mov	r3, #8
   1b980:	mov	r2, r9
   1b984:	mov	r1, r8
   1b988:	mov	r0, sl
   1b98c:	bl	14594 <_start@@Base+0x1f04>
   1b990:	mov	r4, r0
   1b994:	cmp	r0, r8
   1b998:	beq	1bb40 <_start@@Base+0x94b0>
   1b99c:	mov	r3, #0
   1b9a0:	strb	r3, [sp, #360]	; 0x168
   1b9a4:	sub	r5, r9, r0
   1b9a8:	cmp	r5, #3
   1b9ac:	ble	1b9d4 <_start@@Base+0x9344>
   1b9b0:	mov	r2, #4
   1b9b4:	movw	r1, #46192	; 0xb470
   1b9b8:	movt	r1, #2
   1b9bc:	bl	125a0 <memcmp@plt>
   1b9c0:	cmp	r0, #0
   1b9c4:	moveq	r3, #1
   1b9c8:	strbeq	r3, [sp, #360]	; 0x168
   1b9cc:	addeq	r8, r4, #4
   1b9d0:	beq	1bae8 <_start@@Base+0x9458>
   1b9d4:	cmp	r5, #4
   1b9d8:	ble	1b9fc <_start@@Base+0x936c>
   1b9dc:	mov	r2, #5
   1b9e0:	movw	r1, #46200	; 0xb478
   1b9e4:	movt	r1, #2
   1b9e8:	mov	r0, r4
   1b9ec:	bl	125a0 <memcmp@plt>
   1b9f0:	cmp	r0, #0
   1b9f4:	addeq	r8, r4, #5
   1b9f8:	beq	1baf4 <_start@@Base+0x9464>
   1b9fc:	mov	r2, #0
   1ba00:	mov	r3, #0
   1ba04:	add	r1, sp, #368	; 0x170
   1ba08:	strd	r2, [r1]
   1ba0c:	mov	r3, #0
   1ba10:	str	r3, [sp, #364]	; 0x16c
   1ba14:	cmp	r9, r4
   1ba18:	beq	1dae0 <_start@@Base+0xb450>
   1ba1c:	str	r1, [sp]
   1ba20:	add	r3, sp, #364	; 0x16c
   1ba24:	mov	r2, r9
   1ba28:	mov	r1, r4
   1ba2c:	mov	r0, sl
   1ba30:	bl	29968 <flatcc_json_parser_integer@@Base>
   1ba34:	mov	r5, r0
   1ba38:	cmp	r4, r0
   1ba3c:	bne	1ba7c <_start@@Base+0x93ec>
   1ba40:	mov	r3, #0
   1ba44:	strb	r3, [sp, #360]	; 0x168
   1ba48:	add	r3, sp, #360	; 0x168
   1ba4c:	str	r3, [sp]
   1ba50:	ldr	r3, [pc, #-224]	; 1b978 <_start@@Base+0x92e8>
   1ba54:	mov	r2, r9
   1ba58:	mov	r1, r5
   1ba5c:	mov	r0, sl
   1ba60:	bl	14c28 <_start@@Base+0x2598>
   1ba64:	mov	r8, r0
   1ba68:	cmp	r9, r0
   1ba6c:	cmpne	r5, r0
   1ba70:	bne	1badc <_start@@Base+0x944c>
   1ba74:	mov	fp, sl
   1ba78:	b	18988 <_start@@Base+0x62f8>
   1ba7c:	ldr	r3, [sp, #364]	; 0x16c
   1ba80:	cmp	r3, #0
   1ba84:	bne	1bab4 <_start@@Base+0x9424>
   1ba88:	add	r3, sp, #368	; 0x170
   1ba8c:	ldrd	r2, [r3]
   1ba90:	cmp	r3, #0
   1ba94:	cmpeq	r2, #255	; 0xff
   1ba98:	bhi	1bb1c <_start@@Base+0x948c>
   1ba9c:	uxtb	r3, r2
   1baa0:	adds	r3, r3, #0
   1baa4:	movne	r3, #1
   1baa8:	strb	r3, [sp, #360]	; 0x168
   1baac:	mov	r8, r0
   1bab0:	b	1badc <_start@@Base+0x944c>
   1bab4:	mov	r3, #8
   1bab8:	mov	r2, r9
   1babc:	mov	r1, r0
   1bac0:	mov	r0, sl
   1bac4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1bac8:	mov	r8, r0
   1bacc:	mov	r3, #0
   1bad0:	strb	r3, [sp, #360]	; 0x168
   1bad4:	cmp	r4, r8
   1bad8:	beq	1bb38 <_start@@Base+0x94a8>
   1badc:	ldrb	r3, [sp, #360]	; 0x168
   1bae0:	cmp	r3, #1
   1bae4:	bne	1baf4 <_start@@Base+0x9464>
   1bae8:	ldr	r3, [sl, #8]
   1baec:	tst	r3, #2
   1baf0:	beq	1c5f8 <_start@@Base+0x9f68>
   1baf4:	mov	r3, #1
   1baf8:	mov	r2, r3
   1bafc:	mov	r1, #15
   1bb00:	ldr	r0, [sl]
   1bb04:	bl	2565c <flatcc_builder_table_add@@Base>
   1bb08:	cmp	r0, #0
   1bb0c:	beq	1da28 <_start@@Base+0xb398>
   1bb10:	ldrb	r3, [sp, #360]	; 0x168
   1bb14:	strb	r3, [r0]
   1bb18:	b	1c5f8 <_start@@Base+0x9f68>
   1bb1c:	mov	r3, #7
   1bb20:	mov	r2, r9
   1bb24:	mov	r1, r0
   1bb28:	mov	r0, sl
   1bb2c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1bb30:	mov	r8, r0
   1bb34:	b	1bacc <_start@@Base+0x943c>
   1bb38:	mov	r5, r8
   1bb3c:	b	1ba48 <_start@@Base+0x93b8>
   1bb40:	mov	r2, r9
   1bb44:	mov	r1, r8
   1bb48:	mov	r0, sl
   1bb4c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1bb50:	mov	r8, r0
   1bb54:	b	1c5f8 <_start@@Base+0x9f68>
   1bb58:	add	r3, pc, #984	; 0x3d8
   1bb5c:	ldrd	r2, [r3]
   1bb60:	cmp	r1, r3
   1bb64:	cmpeq	r0, r2
   1bb68:	bhi	1c3a0 <_start@@Base+0x9d10>
   1bb6c:	add	r3, pc, #972	; 0x3cc
   1bb70:	ldrd	r2, [r3]
   1bb74:	cmp	r1, r3
   1bb78:	cmpeq	r0, r2
   1bb7c:	bne	1c388 <_start@@Base+0x9cf8>
   1bb80:	add	r4, r8, #8
   1bb84:	mov	r1, r9
   1bb88:	mov	r0, r4
   1bb8c:	bl	12780 <_start@@Base+0xf0>
   1bb90:	mov	r3, #0
   1bb94:	str	r3, [sp, #216]	; 0xd8
   1bb98:	and	r3, r1, #-16777216	; 0xff000000
   1bb9c:	str	r3, [sp, #220]	; 0xdc
   1bba0:	ldrd	r2, [sp, #216]	; 0xd8
   1bba4:	cmp	r3, #2030043136	; 0x79000000
   1bba8:	cmpeq	r2, #0
   1bbac:	beq	1bbc8 <_start@@Base+0x9538>
   1bbb0:	mov	r2, r9
   1bbb4:	mov	r1, r4
   1bbb8:	mov	r0, sl
   1bbbc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1bbc0:	mov	r8, r0
   1bbc4:	b	1c5f8 <_start@@Base+0x9f68>
   1bbc8:	mov	r3, #1
   1bbcc:	mov	r2, r9
   1bbd0:	mov	r1, r4
   1bbd4:	mov	r0, sl
   1bbd8:	bl	14594 <_start@@Base+0x1f04>
   1bbdc:	mov	r8, r0
   1bbe0:	cmp	r4, r0
   1bbe4:	beq	1c370 <_start@@Base+0x9ce0>
   1bbe8:	mov	r3, #0
   1bbec:	str	r3, [sp, #384]	; 0x180
   1bbf0:	mov	r1, #3
   1bbf4:	ldr	r0, [sl]
   1bbf8:	bl	23a98 <flatcc_builder_start_table@@Base>
   1bbfc:	cmp	r0, #0
   1bc00:	beq	1bc48 <_start@@Base+0x95b8>
   1bc04:	mov	r3, #33	; 0x21
   1bc08:	mov	r2, r9
   1bc0c:	mov	r1, r8
   1bc10:	mov	r0, sl
   1bc14:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1bc18:	mov	r8, r0
   1bc1c:	ldr	r3, [sp, #384]	; 0x180
   1bc20:	cmp	r3, #0
   1bc24:	beq	1da30 <_start@@Base+0xb3a0>
   1bc28:	mov	r1, #14
   1bc2c:	ldr	r0, [sl]
   1bc30:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1bc34:	cmp	r0, #0
   1bc38:	beq	1da38 <_start@@Base+0xb3a8>
   1bc3c:	ldr	r3, [sp, #384]	; 0x180
   1bc40:	str	r3, [r0]
   1bc44:	b	1c5f8 <_start@@Base+0x9f68>
   1bc48:	add	r3, sp, #356	; 0x164
   1bc4c:	mov	r2, r9
   1bc50:	mov	r1, r8
   1bc54:	mov	r0, sl
   1bc58:	bl	14680 <_start@@Base+0x1ff0>
   1bc5c:	mov	r8, r0
   1bc60:	mvn	r4, #0
   1bc64:	movw	r5, #65535	; 0xffff
   1bc68:	movt	r5, #26979	; 0x6963
   1bc6c:	movw	r3, #57464	; 0xe078
   1bc70:	movt	r3, #3
   1bc74:	str	r3, [sp, #240]	; 0xf0
   1bc78:	add	r3, r3, #320	; 0x140
   1bc7c:	str	r3, [sp, #344]	; 0x158
   1bc80:	strd	r6, [sp, #72]	; 0x48
   1bc84:	b	1bdb0 <_start@@Base+0x9720>
   1bc88:	mov	r3, #5
   1bc8c:	mov	r2, r9
   1bc90:	mov	r1, r8
   1bc94:	mov	r0, sl
   1bc98:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1bc9c:	mov	r8, r0
   1bca0:	b	1bdec <_start@@Base+0x975c>
   1bca4:	ldrb	r0, [r8, #7]
   1bca8:	mov	r1, #0
   1bcac:	ldrb	r2, [r8, #6]
   1bcb0:	orr	r3, r0, r2, lsl #8
   1bcb4:	mov	r2, r1
   1bcb8:	ldrb	r0, [r8, #5]
   1bcbc:	orr	r3, r3, r0, lsl #16
   1bcc0:	ldrb	r0, [r8, #4]
   1bcc4:	orr	r3, r3, r0, lsl #24
   1bcc8:	ldrb	r0, [r8, #3]
   1bccc:	orr	r2, r2, r0
   1bcd0:	ldrb	r0, [r8, #2]
   1bcd4:	orr	r2, r2, r0, lsl #8
   1bcd8:	ldrb	r0, [r8, #1]
   1bcdc:	orr	r2, r2, r0, lsl #16
   1bce0:	ldrb	r0, [r8]
   1bce4:	str	r3, [sp, #56]	; 0x38
   1bce8:	orr	r3, r2, r0, lsl #24
   1bcec:	str	r3, [sp, #60]	; 0x3c
   1bcf0:	ldrd	r2, [sp, #56]	; 0x38
   1bcf4:	cmp	r3, r5
   1bcf8:	cmpeq	r2, r4
   1bcfc:	bhi	1c040 <_start@@Base+0x99b0>
   1bd00:	and	r1, r2, #-16777216	; 0xff000000
   1bd04:	str	r1, [sp, #160]	; 0xa0
   1bd08:	str	r3, [sp, #164]	; 0xa4
   1bd0c:	ldrd	r2, [sp, #160]	; 0xa0
   1bd10:	add	r1, pc, #560	; 0x230
   1bd14:	ldrd	r0, [r1]
   1bd18:	cmp	r3, r1
   1bd1c:	cmpeq	r2, r0
   1bd20:	beq	1be8c <_start@@Base+0x97fc>
   1bd24:	mov	r2, r9
   1bd28:	mov	r1, r8
   1bd2c:	mov	r0, sl
   1bd30:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1bd34:	mov	r8, r0
   1bd38:	sub	r3, r9, r8
   1bd3c:	cmp	r3, #1
   1bd40:	ble	1bd54 <_start@@Base+0x96c4>
   1bd44:	ldrb	r3, [r8]
   1bd48:	cmp	r3, #32
   1bd4c:	bhi	1bd68 <_start@@Base+0x96d8>
   1bd50:	beq	1c228 <_start@@Base+0x9b98>
   1bd54:	mov	r2, r9
   1bd58:	mov	r1, r8
   1bd5c:	mov	r0, sl
   1bd60:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1bd64:	mov	r8, r0
   1bd68:	cmp	r9, r8
   1bd6c:	moveq	r3, #0
   1bd70:	streq	r3, [sp, #356]	; 0x164
   1bd74:	beq	1bdb0 <_start@@Base+0x9720>
   1bd78:	ldrb	r3, [r8]
   1bd7c:	cmp	r3, #44	; 0x2c
   1bd80:	beq	1c288 <_start@@Base+0x9bf8>
   1bd84:	mov	r3, #0
   1bd88:	str	r3, [sp, #356]	; 0x164
   1bd8c:	ldrb	r3, [r8]
   1bd90:	cmp	r3, #125	; 0x7d
   1bd94:	beq	1c23c <_start@@Base+0x9bac>
   1bd98:	mov	r3, #10
   1bd9c:	mov	r2, r9
   1bda0:	mov	r1, r8
   1bda4:	mov	r0, sl
   1bda8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1bdac:	mov	r8, r0
   1bdb0:	ldr	r3, [sp, #356]	; 0x164
   1bdb4:	cmp	r3, #0
   1bdb8:	beq	1c330 <_start@@Base+0x9ca0>
   1bdbc:	cmp	r9, r8
   1bdc0:	beq	1bdec <_start@@Base+0x975c>
   1bdc4:	ldrb	r3, [r8]
   1bdc8:	cmp	r3, #34	; 0x22
   1bdcc:	addeq	r8, r8, #1
   1bdd0:	moveq	r3, #0
   1bdd4:	streq	r3, [sl, #12]
   1bdd8:	beq	1bdec <_start@@Base+0x975c>
   1bddc:	cmp	r3, #46	; 0x2e
   1bde0:	movne	r3, #1
   1bde4:	strne	r3, [sl, #12]
   1bde8:	beq	1bc88 <_start@@Base+0x95f8>
   1bdec:	sub	r3, r9, r8
   1bdf0:	cmp	r3, #8
   1bdf4:	bhi	1bca4 <_start@@Base+0x9614>
   1bdf8:	sub	r3, r3, #1
   1bdfc:	cmp	r3, #7
   1be00:	ldrls	pc, [pc, r3, lsl #2]
   1be04:	b	1be7c <_start@@Base+0x97ec>
   1be08:	andeq	fp, r1, r0, ror lr
   1be0c:	andeq	fp, r1, r4, ror #28
   1be10:	andeq	fp, r1, r8, asr lr
   1be14:	andeq	fp, r1, ip, asr #28
   1be18:	andeq	fp, r1, r0, asr #28
   1be1c:	andeq	fp, r1, r4, lsr lr
   1be20:	andeq	fp, r1, r8, lsr #28
   1be24:	andeq	fp, r1, r4, lsr #25
   1be28:	mov	r0, #0
   1be2c:	mov	r1, #0
   1be30:	b	1bcac <_start@@Base+0x961c>
   1be34:	mov	r3, #0
   1be38:	mov	r2, r3
   1be3c:	b	1bcb8 <_start@@Base+0x9628>
   1be40:	mov	r3, #0
   1be44:	mov	r2, r3
   1be48:	b	1bcc0 <_start@@Base+0x9630>
   1be4c:	mov	r3, #0
   1be50:	mov	r2, r3
   1be54:	b	1bcc8 <_start@@Base+0x9638>
   1be58:	mov	r3, #0
   1be5c:	mov	r2, r3
   1be60:	b	1bcd0 <_start@@Base+0x9640>
   1be64:	mov	r3, #0
   1be68:	mov	r2, r3
   1be6c:	b	1bcd8 <_start@@Base+0x9648>
   1be70:	mov	r3, #0
   1be74:	mov	r2, r3
   1be78:	b	1bce0 <_start@@Base+0x9650>
   1be7c:	mov	r2, #0
   1be80:	mov	r3, #0
   1be84:	strd	r2, [sp, #56]	; 0x38
   1be88:	b	1bcf0 <_start@@Base+0x9660>
   1be8c:	mov	r3, #5
   1be90:	mov	r2, r9
   1be94:	mov	r1, r8
   1be98:	mov	r0, sl
   1be9c:	bl	14594 <_start@@Base+0x1f04>
   1bea0:	mov	fp, r0
   1bea4:	cmp	r0, r8
   1bea8:	beq	1c028 <_start@@Base+0x9998>
   1beac:	mov	r3, #0
   1beb0:	add	r2, sp, #352	; 0x160
   1beb4:	add	r2, r2, #2
   1beb8:	strh	r3, [r2]
   1bebc:	mov	r0, #0
   1bec0:	mov	r1, #0
   1bec4:	add	r2, sp, #368	; 0x170
   1bec8:	strd	r0, [r2]
   1becc:	str	r3, [sp, #364]	; 0x16c
   1bed0:	cmp	r9, fp
   1bed4:	beq	1dad8 <_start@@Base+0xb448>
   1bed8:	str	r2, [sp]
   1bedc:	add	r3, sp, #364	; 0x16c
   1bee0:	mov	r2, r9
   1bee4:	mov	r1, fp
   1bee8:	mov	r0, sl
   1beec:	bl	29968 <flatcc_json_parser_integer@@Base>
   1bef0:	mov	r7, r0
   1bef4:	cmp	fp, r0
   1bef8:	bne	1bf58 <_start@@Base+0x98c8>
   1befc:	add	r3, sp, #352	; 0x160
   1bf00:	add	r3, r3, #2
   1bf04:	str	r3, [sp]
   1bf08:	ldr	r3, [sp, #240]	; 0xf0
   1bf0c:	add	r3, r3, #308	; 0x134
   1bf10:	mov	r2, r9
   1bf14:	mov	r1, r7
   1bf18:	mov	r0, sl
   1bf1c:	bl	14e50 <_start@@Base+0x27c0>
   1bf20:	mov	r8, r0
   1bf24:	cmp	r9, r0
   1bf28:	cmpne	r7, r0
   1bf2c:	bne	1bfb4 <_start@@Base+0x9924>
   1bf30:	ldrd	r6, [sp, #72]	; 0x48
   1bf34:	b	1bc04 <_start@@Base+0x9574>
   1bf38:	ldrbvs	pc, [pc, #4095]!	; 1cf3f <_start@@Base+0xa8af>	; <UNPREDICTABLE>
   1bf3c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bf40:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1bf44:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bf48:	strvc	r0, [r0], #-0
   1bf4c:	cmnvs	pc, #461373440	; 0x1b800000
   1bf50:	andeq	r0, r0, r0
   1bf54:	strbtvc	r6, [r1], -r0, lsl #24
   1bf58:	ldr	r3, [sp, #364]	; 0x16c
   1bf5c:	cmp	r3, #0
   1bf60:	bne	1bf94 <_start@@Base+0x9904>
   1bf64:	add	r3, sp, #368	; 0x170
   1bf68:	ldrd	r2, [r3]
   1bf6c:	movw	r0, #65535	; 0xffff
   1bf70:	mov	r1, #0
   1bf74:	cmp	r3, r1
   1bf78:	cmpeq	r2, r0
   1bf7c:	bhi	1c004 <_start@@Base+0x9974>
   1bf80:	add	r1, sp, #352	; 0x160
   1bf84:	add	r1, r1, #2
   1bf88:	strh	r2, [r1]
   1bf8c:	mov	r8, r7
   1bf90:	b	1bfb4 <_start@@Base+0x9924>
   1bf94:	mov	r3, #8
   1bf98:	mov	r2, r9
   1bf9c:	mov	r1, r0
   1bfa0:	mov	r0, sl
   1bfa4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1bfa8:	mov	r8, r0
   1bfac:	cmp	fp, r8
   1bfb0:	beq	1c020 <_start@@Base+0x9990>
   1bfb4:	add	r3, sp, #352	; 0x160
   1bfb8:	add	r3, r3, #2
   1bfbc:	ldrh	r3, [r3]
   1bfc0:	cmp	r3, #0
   1bfc4:	bne	1bfd4 <_start@@Base+0x9944>
   1bfc8:	ldr	r3, [sl, #8]
   1bfcc:	tst	r3, #2
   1bfd0:	beq	1bd38 <_start@@Base+0x96a8>
   1bfd4:	mov	r3, #2
   1bfd8:	mov	r2, r3
   1bfdc:	mov	r1, r3
   1bfe0:	ldr	r0, [sl]
   1bfe4:	bl	2565c <flatcc_builder_table_add@@Base>
   1bfe8:	cmp	r0, #0
   1bfec:	beq	1c358 <_start@@Base+0x9cc8>
   1bff0:	add	r3, sp, #352	; 0x160
   1bff4:	add	r3, r3, #2
   1bff8:	ldrh	r3, [r3]
   1bffc:	strh	r3, [r0]
   1c000:	b	1bd38 <_start@@Base+0x96a8>
   1c004:	mov	r3, #7
   1c008:	mov	r2, r9
   1c00c:	mov	r1, r7
   1c010:	mov	r0, sl
   1c014:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1c018:	mov	r8, r0
   1c01c:	b	1bfac <_start@@Base+0x991c>
   1c020:	mov	r7, r8
   1c024:	b	1befc <_start@@Base+0x986c>
   1c028:	mov	r2, r9
   1c02c:	mov	r1, r8
   1c030:	mov	r0, sl
   1c034:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c038:	mov	r8, r0
   1c03c:	b	1bd38 <_start@@Base+0x96a8>
   1c040:	mov	r3, #0
   1c044:	str	r3, [sp, #168]	; 0xa8
   1c048:	ldr	r3, [sp, #60]	; 0x3c
   1c04c:	bic	r3, r3, #255	; 0xff
   1c050:	str	r3, [sp, #172]	; 0xac
   1c054:	ldrd	r2, [sp, #168]	; 0xa8
   1c058:	sub	r1, pc, #272	; 0x110
   1c05c:	ldrd	r0, [r1]
   1c060:	cmp	r3, r1
   1c064:	cmpeq	r2, r0
   1c068:	beq	1c0b8 <_start@@Base+0x9a28>
   1c06c:	mov	r3, #0
   1c070:	str	r3, [sp, #112]	; 0x70
   1c074:	ldr	r3, [sp, #60]	; 0x3c
   1c078:	lsr	r3, r3, #16
   1c07c:	lsl	r3, r3, #16
   1c080:	str	r3, [sp, #116]	; 0x74
   1c084:	ldrd	r2, [sp, #112]	; 0x70
   1c088:	mov	r0, #0
   1c08c:	mov	r1, #0
   1c090:	movt	r1, #26980	; 0x6964
   1c094:	cmp	r3, r1
   1c098:	cmpeq	r2, r0
   1c09c:	beq	1c1b0 <_start@@Base+0x9b20>
   1c0a0:	mov	r2, r9
   1c0a4:	mov	r1, r8
   1c0a8:	mov	r0, sl
   1c0ac:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c0b0:	mov	r8, r0
   1c0b4:	b	1bd38 <_start@@Base+0x96a8>
   1c0b8:	mov	r3, #3
   1c0bc:	mov	r2, r9
   1c0c0:	mov	r1, r8
   1c0c4:	mov	r0, sl
   1c0c8:	bl	14594 <_start@@Base+0x1f04>
   1c0cc:	mov	fp, r0
   1c0d0:	cmp	r0, r8
   1c0d4:	beq	1c198 <_start@@Base+0x9b08>
   1c0d8:	mov	r2, #0
   1c0dc:	mov	r3, #0
   1c0e0:	add	r1, sp, #368	; 0x170
   1c0e4:	strd	r2, [r1]
   1c0e8:	mov	r3, r1
   1c0ec:	mov	r2, r9
   1c0f0:	mov	r1, r0
   1c0f4:	mov	r0, sl
   1c0f8:	bl	14468 <_start@@Base+0x1dd8>
   1c0fc:	mov	r8, r0
   1c100:	cmp	fp, r0
   1c104:	beq	1c150 <_start@@Base+0x9ac0>
   1c108:	add	r3, sp, #368	; 0x170
   1c10c:	ldrd	r2, [r3]
   1c110:	orrs	r3, r2, r3
   1c114:	bne	1c124 <_start@@Base+0x9a94>
   1c118:	ldr	r3, [sl, #8]
   1c11c:	tst	r3, #2
   1c120:	beq	1bd38 <_start@@Base+0x96a8>
   1c124:	mov	r3, #8
   1c128:	mov	r2, r3
   1c12c:	mov	r1, #1
   1c130:	ldr	r0, [sl]
   1c134:	bl	2565c <flatcc_builder_table_add@@Base>
   1c138:	cmp	r0, #0
   1c13c:	beq	1c180 <_start@@Base+0x9af0>
   1c140:	add	r3, sp, #368	; 0x170
   1c144:	ldrd	r2, [r3]
   1c148:	strd	r2, [r0]
   1c14c:	b	1bd38 <_start@@Base+0x96a8>
   1c150:	add	r3, sp, #368	; 0x170
   1c154:	str	r3, [sp]
   1c158:	ldr	r3, [sp, #344]	; 0x158
   1c15c:	mov	r2, r9
   1c160:	mov	r1, r0
   1c164:	mov	r0, sl
   1c168:	bl	15e6c <_start@@Base+0x37dc>
   1c16c:	cmp	r9, r0
   1c170:	cmpne	r8, r0
   1c174:	beq	1c190 <_start@@Base+0x9b00>
   1c178:	mov	r8, r0
   1c17c:	b	1c108 <_start@@Base+0x9a78>
   1c180:	ldrd	r6, [sp, #72]	; 0x48
   1c184:	mov	r0, r8
   1c188:	mov	r8, r0
   1c18c:	b	1bc04 <_start@@Base+0x9574>
   1c190:	ldrd	r6, [sp, #72]	; 0x48
   1c194:	b	1c188 <_start@@Base+0x9af8>
   1c198:	mov	r2, r9
   1c19c:	mov	r1, r8
   1c1a0:	mov	r0, sl
   1c1a4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c1a8:	mov	r8, r0
   1c1ac:	b	1bd38 <_start@@Base+0x96a8>
   1c1b0:	mov	r3, #2
   1c1b4:	mov	r2, r9
   1c1b8:	mov	r1, r8
   1c1bc:	mov	r0, sl
   1c1c0:	bl	14594 <_start@@Base+0x1f04>
   1c1c4:	cmp	r0, r8
   1c1c8:	beq	1c210 <_start@@Base+0x9b80>
   1c1cc:	add	r3, sp, #360	; 0x168
   1c1d0:	mov	r2, r9
   1c1d4:	mov	r1, r0
   1c1d8:	mov	r0, sl
   1c1dc:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   1c1e0:	mov	r8, r0
   1c1e4:	ldr	r3, [sp, #360]	; 0x168
   1c1e8:	cmp	r3, #0
   1c1ec:	beq	1c360 <_start@@Base+0x9cd0>
   1c1f0:	mov	r1, #0
   1c1f4:	ldr	r0, [sl]
   1c1f8:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1c1fc:	cmp	r0, #0
   1c200:	beq	1c368 <_start@@Base+0x9cd8>
   1c204:	ldr	r3, [sp, #360]	; 0x168
   1c208:	str	r3, [r0]
   1c20c:	b	1bd38 <_start@@Base+0x96a8>
   1c210:	mov	r2, r9
   1c214:	mov	r1, r8
   1c218:	mov	r0, sl
   1c21c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c220:	mov	r8, r0
   1c224:	b	1bd38 <_start@@Base+0x96a8>
   1c228:	ldrb	r3, [r8, #1]
   1c22c:	cmp	r3, #32
   1c230:	addhi	r8, r8, #1
   1c234:	bls	1bd54 <_start@@Base+0x96c4>
   1c238:	b	1bd68 <_start@@Base+0x96d8>
   1c23c:	add	r1, r8, #1
   1c240:	sub	r3, r9, r1
   1c244:	cmp	r3, #1
   1c248:	ble	1c260 <_start@@Base+0x9bd0>
   1c24c:	ldrb	r3, [r8, #1]
   1c250:	cmp	r3, #32
   1c254:	movhi	r8, r1
   1c258:	bhi	1bdb0 <_start@@Base+0x9720>
   1c25c:	beq	1c274 <_start@@Base+0x9be4>
   1c260:	mov	r2, r9
   1c264:	mov	r0, sl
   1c268:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1c26c:	mov	r8, r0
   1c270:	b	1bdb0 <_start@@Base+0x9720>
   1c274:	ldrb	r3, [r8, #2]
   1c278:	cmp	r3, #32
   1c27c:	addhi	r8, r8, #2
   1c280:	bls	1c260 <_start@@Base+0x9bd0>
   1c284:	b	1bdb0 <_start@@Base+0x9720>
   1c288:	add	r1, r8, #1
   1c28c:	sub	r3, r9, r1
   1c290:	cmp	r3, #1
   1c294:	ble	1c2ac <_start@@Base+0x9c1c>
   1c298:	ldrb	r3, [r8, #1]
   1c29c:	cmp	r3, #32
   1c2a0:	movhi	r8, r1
   1c2a4:	bhi	1c2bc <_start@@Base+0x9c2c>
   1c2a8:	beq	1c2f8 <_start@@Base+0x9c68>
   1c2ac:	mov	r2, r9
   1c2b0:	mov	r0, sl
   1c2b4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1c2b8:	mov	r8, r0
   1c2bc:	cmp	r9, r8
   1c2c0:	beq	1c30c <_start@@Base+0x9c7c>
   1c2c4:	ldrb	r3, [r8]
   1c2c8:	cmp	r3, #125	; 0x7d
   1c2cc:	movne	r3, #1
   1c2d0:	strne	r3, [sp, #356]	; 0x164
   1c2d4:	bne	1bdb0 <_start@@Base+0x9720>
   1c2d8:	mov	r3, #0
   1c2dc:	str	r3, [sp, #356]	; 0x164
   1c2e0:	mov	r2, r9
   1c2e4:	add	r1, r8, #1
   1c2e8:	mov	r0, sl
   1c2ec:	bl	14544 <_start@@Base+0x1eb4>
   1c2f0:	mov	r8, r0
   1c2f4:	b	1bdb0 <_start@@Base+0x9720>
   1c2f8:	ldrb	r3, [r8, #2]
   1c2fc:	cmp	r3, #32
   1c300:	addhi	r8, r8, #2
   1c304:	bls	1c2ac <_start@@Base+0x9c1c>
   1c308:	b	1c2bc <_start@@Base+0x9c2c>
   1c30c:	mov	r3, #0
   1c310:	str	r3, [sp, #356]	; 0x164
   1c314:	mov	r3, #10
   1c318:	mov	r2, r9
   1c31c:	mov	r1, r8
   1c320:	mov	r0, sl
   1c324:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1c328:	mov	r8, r0
   1c32c:	b	1bdb0 <_start@@Base+0x9720>
   1c330:	ldrd	r6, [sp, #72]	; 0x48
   1c334:	ldr	r3, [sl, #24]
   1c338:	cmp	r3, #0
   1c33c:	bne	1bc04 <_start@@Base+0x9574>
   1c340:	ldr	r0, [sl]
   1c344:	bl	24570 <flatcc_builder_end_table@@Base>
   1c348:	str	r0, [sp, #384]	; 0x180
   1c34c:	cmp	r0, #0
   1c350:	bne	1bc1c <_start@@Base+0x958c>
   1c354:	b	1bc04 <_start@@Base+0x9574>
   1c358:	ldrd	r6, [sp, #72]	; 0x48
   1c35c:	b	1bc04 <_start@@Base+0x9574>
   1c360:	ldrd	r6, [sp, #72]	; 0x48
   1c364:	b	1bc04 <_start@@Base+0x9574>
   1c368:	ldrd	r6, [sp, #72]	; 0x48
   1c36c:	b	1bc04 <_start@@Base+0x9574>
   1c370:	mov	r2, r9
   1c374:	mov	r1, r0
   1c378:	mov	r0, sl
   1c37c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c380:	mov	r8, r0
   1c384:	b	1c5f8 <_start@@Base+0x9f68>
   1c388:	mov	r2, r9
   1c38c:	mov	r1, r8
   1c390:	mov	r0, sl
   1c394:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c398:	mov	r8, r0
   1c39c:	b	1c5f8 <_start@@Base+0x9f68>
   1c3a0:	lsr	r3, r0, #16
   1c3a4:	lsl	r3, r3, #16
   1c3a8:	str	r3, [sp, #88]	; 0x58
   1c3ac:	str	r1, [sp, #92]	; 0x5c
   1c3b0:	add	r3, pc, #968	; 0x3c8
   1c3b4:	ldrd	r2, [r3]
   1c3b8:	ldrd	r0, [sp, #88]	; 0x58
   1c3bc:	cmp	r1, r3
   1c3c0:	cmpeq	r0, r2
   1c3c4:	beq	1c458 <_start@@Base+0x9dc8>
   1c3c8:	mov	r3, #5
   1c3cc:	mov	r2, r9
   1c3d0:	mov	r1, r8
   1c3d4:	mov	r0, sl
   1c3d8:	bl	14594 <_start@@Base+0x1f04>
   1c3dc:	mov	r4, r0
   1c3e0:	cmp	r0, r8
   1c3e4:	beq	1c590 <_start@@Base+0x9f00>
   1c3e8:	mov	r3, #0
   1c3ec:	str	r3, [sp, #368]	; 0x170
   1c3f0:	add	r3, sp, #368	; 0x170
   1c3f4:	mov	r2, r9
   1c3f8:	mov	r1, r0
   1c3fc:	mov	r0, sl
   1c400:	bl	28af0 <flatcc_json_parser_float@@Base>
   1c404:	mov	r8, r0
   1c408:	cmp	r4, r0
   1c40c:	beq	1c548 <_start@@Base+0x9eb8>
   1c410:	vldr	s15, [pc, #936]	; 1c7c0 <_start@@Base+0xa130>
   1c414:	vldr	s14, [sp, #368]	; 0x170
   1c418:	vcmp.f32	s14, s15
   1c41c:	vmrs	APSR_nzcv, fpscr
   1c420:	bne	1c430 <_start@@Base+0x9da0>
   1c424:	ldr	r3, [sl, #8]
   1c428:	tst	r3, #2
   1c42c:	beq	1c5f8 <_start@@Base+0x9f68>
   1c430:	mov	r3, #4
   1c434:	mov	r2, r3
   1c438:	mov	r1, #25
   1c43c:	ldr	r0, [sl]
   1c440:	bl	2565c <flatcc_builder_table_add@@Base>
   1c444:	cmp	r0, #0
   1c448:	beq	1c578 <_start@@Base+0x9ee8>
   1c44c:	ldr	r3, [sp, #368]	; 0x170
   1c450:	str	r3, [r0]
   1c454:	b	1c5f8 <_start@@Base+0x9f68>
   1c458:	mov	r3, #6
   1c45c:	mov	r2, r9
   1c460:	mov	r1, r8
   1c464:	mov	r0, sl
   1c468:	bl	14594 <_start@@Base+0x1f04>
   1c46c:	mov	r4, r0
   1c470:	cmp	r0, r8
   1c474:	beq	1c530 <_start@@Base+0x9ea0>
   1c478:	mov	r3, #0
   1c47c:	str	r3, [sp, #368]	; 0x170
   1c480:	add	r3, sp, #368	; 0x170
   1c484:	mov	r2, r9
   1c488:	mov	r1, r0
   1c48c:	mov	r0, sl
   1c490:	bl	28af0 <flatcc_json_parser_float@@Base>
   1c494:	mov	r8, r0
   1c498:	cmp	r4, r0
   1c49c:	beq	1c4e8 <_start@@Base+0x9e58>
   1c4a0:	vldr	s15, [pc, #796]	; 1c7c4 <_start@@Base+0xa134>
   1c4a4:	vldr	s14, [sp, #368]	; 0x170
   1c4a8:	vcmp.f32	s14, s15
   1c4ac:	vmrs	APSR_nzcv, fpscr
   1c4b0:	bne	1c4c0 <_start@@Base+0x9e30>
   1c4b4:	ldr	r3, [sl, #8]
   1c4b8:	tst	r3, #2
   1c4bc:	beq	1c5f8 <_start@@Base+0x9f68>
   1c4c0:	mov	r3, #4
   1c4c4:	mov	r2, r3
   1c4c8:	mov	r1, #26
   1c4cc:	ldr	r0, [sl]
   1c4d0:	bl	2565c <flatcc_builder_table_add@@Base>
   1c4d4:	cmp	r0, #0
   1c4d8:	beq	1c518 <_start@@Base+0x9e88>
   1c4dc:	ldr	r3, [sp, #368]	; 0x170
   1c4e0:	str	r3, [r0]
   1c4e4:	b	1c5f8 <_start@@Base+0x9f68>
   1c4e8:	add	r3, sp, #368	; 0x170
   1c4ec:	str	r3, [sp]
   1c4f0:	ldr	r3, [pc, #720]	; 1c7c8 <_start@@Base+0xa138>
   1c4f4:	mov	r2, r9
   1c4f8:	mov	r1, r0
   1c4fc:	mov	r0, sl
   1c500:	bl	14828 <_start@@Base+0x2198>
   1c504:	cmp	r9, r0
   1c508:	cmpne	r8, r0
   1c50c:	beq	1c528 <_start@@Base+0x9e98>
   1c510:	mov	r8, r0
   1c514:	b	1c4a0 <_start@@Base+0x9e10>
   1c518:	mov	fp, sl
   1c51c:	mov	r0, r8
   1c520:	mov	r8, r0
   1c524:	b	18988 <_start@@Base+0x62f8>
   1c528:	mov	fp, sl
   1c52c:	b	1c520 <_start@@Base+0x9e90>
   1c530:	mov	r2, r9
   1c534:	mov	r1, r8
   1c538:	mov	r0, sl
   1c53c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c540:	mov	r8, r0
   1c544:	b	1c5f8 <_start@@Base+0x9f68>
   1c548:	add	r3, sp, #368	; 0x170
   1c54c:	str	r3, [sp]
   1c550:	ldr	r3, [pc, #628]	; 1c7cc <_start@@Base+0xa13c>
   1c554:	mov	r2, r9
   1c558:	mov	r1, r0
   1c55c:	mov	r0, sl
   1c560:	bl	14828 <_start@@Base+0x2198>
   1c564:	cmp	r9, r0
   1c568:	cmpne	r8, r0
   1c56c:	beq	1c588 <_start@@Base+0x9ef8>
   1c570:	mov	r8, r0
   1c574:	b	1c410 <_start@@Base+0x9d80>
   1c578:	mov	fp, sl
   1c57c:	mov	r0, r8
   1c580:	mov	r8, r0
   1c584:	b	18988 <_start@@Base+0x62f8>
   1c588:	mov	fp, sl
   1c58c:	b	1c580 <_start@@Base+0x9ef0>
   1c590:	mov	r2, r9
   1c594:	mov	r1, r8
   1c598:	mov	r0, sl
   1c59c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c5a0:	mov	r8, r0
   1c5a4:	b	1c5f8 <_start@@Base+0x9f68>
   1c5a8:	add	r3, pc, #472	; 0x1d8
   1c5ac:	ldrd	r2, [r3]
   1c5b0:	cmp	r1, r3
   1c5b4:	cmpeq	r0, r2
   1c5b8:	bhi	1c828 <_start@@Base+0xa198>
   1c5bc:	lsr	r3, r0, #16
   1c5c0:	lsl	r3, r3, #16
   1c5c4:	str	r3, [sp, #32]
   1c5c8:	str	r1, [sp, #36]	; 0x24
   1c5cc:	add	r3, pc, #444	; 0x1bc
   1c5d0:	ldrd	r2, [r3]
   1c5d4:	ldrd	r0, [sp, #32]
   1c5d8:	cmp	r1, r3
   1c5dc:	cmpeq	r0, r2
   1c5e0:	beq	1c6f0 <_start@@Base+0xa060>
   1c5e4:	mov	r2, r9
   1c5e8:	mov	r1, r8
   1c5ec:	mov	r0, sl
   1c5f0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c5f4:	mov	r8, r0
   1c5f8:	add	r3, sp, #388	; 0x184
   1c5fc:	mov	r2, r9
   1c600:	mov	r1, r8
   1c604:	mov	r0, sl
   1c608:	bl	18020 <_start@@Base+0x5990>
   1c60c:	mov	r8, r0
   1c610:	ldr	r3, [sp, #388]	; 0x184
   1c614:	cmp	r3, #0
   1c618:	beq	1d7e0 <_start@@Base+0xb150>
   1c61c:	cmp	r9, r8
   1c620:	beq	1c64c <_start@@Base+0x9fbc>
   1c624:	ldrb	r3, [r8]
   1c628:	cmp	r3, #34	; 0x22
   1c62c:	addeq	r8, r8, #1
   1c630:	moveq	r3, #0
   1c634:	streq	r3, [sl, #12]
   1c638:	beq	1c64c <_start@@Base+0x9fbc>
   1c63c:	cmp	r3, #46	; 0x2e
   1c640:	movne	r3, #1
   1c644:	strne	r3, [sl, #12]
   1c648:	beq	18a14 <_start@@Base+0x6384>
   1c64c:	mov	r1, r9
   1c650:	mov	r0, r8
   1c654:	bl	12780 <_start@@Base+0xf0>
   1c658:	mov	r4, r0
   1c65c:	mov	r5, r1
   1c660:	add	r3, pc, #304	; 0x130
   1c664:	ldrd	r2, [r3]
   1c668:	cmp	r1, r3
   1c66c:	cmpeq	r0, r2
   1c670:	bhi	1a1bc <_start@@Base+0x7b2c>
   1c674:	add	r3, pc, #292	; 0x124
   1c678:	ldrd	r2, [r3]
   1c67c:	cmp	r1, r3
   1c680:	cmpeq	r0, r2
   1c684:	bhi	19228 <_start@@Base+0x6b98>
   1c688:	add	r3, pc, #280	; 0x118
   1c68c:	ldrd	r2, [r3]
   1c690:	cmp	r1, r3
   1c694:	cmpeq	r0, r2
   1c698:	bhi	18c24 <_start@@Base+0x6594>
   1c69c:	and	r3, r0, #-16777216	; 0xff000000
   1c6a0:	str	r3, [sp, #40]	; 0x28
   1c6a4:	str	r1, [sp, #44]	; 0x2c
   1c6a8:	add	r3, pc, #256	; 0x100
   1c6ac:	ldrd	r2, [r3]
   1c6b0:	ldrd	r0, [sp, #40]	; 0x28
   1c6b4:	cmp	r1, r3
   1c6b8:	cmpeq	r0, r2
   1c6bc:	beq	18a30 <_start@@Base+0x63a0>
   1c6c0:	add	r3, pc, #240	; 0xf0
   1c6c4:	ldrd	r2, [r3]
   1c6c8:	ldrd	r0, [sp, #40]	; 0x28
   1c6cc:	cmp	r1, r3
   1c6d0:	cmpeq	r0, r2
   1c6d4:	beq	18aa8 <_start@@Base+0x6418>
   1c6d8:	mov	r2, r9
   1c6dc:	mov	r1, r8
   1c6e0:	mov	r0, sl
   1c6e4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c6e8:	mov	r8, r0
   1c6ec:	b	1c5f8 <_start@@Base+0x9f68>
   1c6f0:	mov	r3, #6
   1c6f4:	mov	r2, r9
   1c6f8:	mov	r1, r8
   1c6fc:	mov	r0, sl
   1c700:	bl	14594 <_start@@Base+0x1f04>
   1c704:	mov	r4, r0
   1c708:	cmp	r0, r8
   1c70c:	beq	1c810 <_start@@Base+0xa180>
   1c710:	mov	r3, #0
   1c714:	str	r3, [sp, #368]	; 0x170
   1c718:	add	r3, sp, #368	; 0x170
   1c71c:	mov	r2, r9
   1c720:	mov	r1, r0
   1c724:	mov	r0, sl
   1c728:	bl	28af0 <flatcc_json_parser_float@@Base>
   1c72c:	mov	r8, r0
   1c730:	cmp	r4, r0
   1c734:	beq	1c7d4 <_start@@Base+0xa144>
   1c738:	vldr	s15, [sp, #368]	; 0x170
   1c73c:	vcmp.f32	s15, #0.0
   1c740:	vmrs	APSR_nzcv, fpscr
   1c744:	bne	1c754 <_start@@Base+0xa0c4>
   1c748:	ldr	r3, [sl, #8]
   1c74c:	tst	r3, #2
   1c750:	beq	1c5f8 <_start@@Base+0x9f68>
   1c754:	mov	r3, #4
   1c758:	mov	r2, r3
   1c75c:	mov	r1, #27
   1c760:	ldr	r0, [sl]
   1c764:	bl	2565c <flatcc_builder_table_add@@Base>
   1c768:	cmp	r0, #0
   1c76c:	beq	1da40 <_start@@Base+0xb3b0>
   1c770:	ldr	r3, [sp, #368]	; 0x170
   1c774:	str	r3, [r0]
   1c778:	b	1c5f8 <_start@@Base+0x9f68>
   1c77c:	nop	{0}
   1c780:	ldrtvs	r0, [r2], -r0
   1c784:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c788:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1c78c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c790:	ldrtvs	r0, [r3], -r0
   1c794:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c798:	cmnvs	r2, r0, ror #4
   1c79c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c7a0:			; <UNDEFINED> instruction: 0xffffffff
   1c7a4:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1c7a8:			; <UNDEFINED> instruction: 0xffffffff
   1c7ac:			; <UNDEFINED> instruction: 0x666c6577
   1c7b0:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1c7b4:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1c7b8:	andvc	r0, r0, #0
   1c7bc:	cmnvs	pc, #28416	; 0x6f00
   1c7c0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1c7c4:	submi	r0, r0, r0
   1c7c8:	andeq	lr, r3, r4, asr #3
   1c7cc:	ldrdeq	lr, [r3], -r0
   1c7d0:	ldrdeq	lr, [r3], -ip
   1c7d4:	add	r3, sp, #368	; 0x170
   1c7d8:	str	r3, [sp]
   1c7dc:	ldr	r3, [pc, #-20]	; 1c7d0 <_start@@Base+0xa140>
   1c7e0:	mov	r2, r9
   1c7e4:	mov	r1, r0
   1c7e8:	mov	r0, sl
   1c7ec:	bl	14828 <_start@@Base+0x2198>
   1c7f0:	cmp	r9, r0
   1c7f4:	cmpne	r8, r0
   1c7f8:	beq	1c804 <_start@@Base+0xa174>
   1c7fc:	mov	r8, r0
   1c800:	b	1c738 <_start@@Base+0xa0a8>
   1c804:	mov	fp, sl
   1c808:	mov	r8, r0
   1c80c:	b	18988 <_start@@Base+0x62f8>
   1c810:	mov	r2, r9
   1c814:	mov	r1, r8
   1c818:	mov	r0, sl
   1c81c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c820:	mov	r8, r0
   1c824:	b	1c5f8 <_start@@Base+0x9f68>
   1c828:	add	r3, pc, #984	; 0x3d8
   1c82c:	ldrd	r2, [r3]
   1c830:	cmp	r1, r3
   1c834:	cmpeq	r0, r2
   1c838:	beq	1c8d8 <_start@@Base+0xa248>
   1c83c:	add	r3, pc, #972	; 0x3cc
   1c840:	ldrd	r2, [r3]
   1c844:	cmp	r1, r3
   1c848:	cmpeq	r0, r2
   1c84c:	bhi	1d460 <_start@@Base+0xadd0>
   1c850:	add	r3, pc, #960	; 0x3c0
   1c854:	ldrd	r2, [r3]
   1c858:	cmp	r1, r3
   1c85c:	cmpeq	r0, r2
   1c860:	bne	1d448 <_start@@Base+0xadb8>
   1c864:	add	r4, r8, #8
   1c868:	mov	r1, r9
   1c86c:	mov	r0, r4
   1c870:	bl	12780 <_start@@Base+0xf0>
   1c874:	add	r3, pc, #932	; 0x3a4
   1c878:	ldrd	r2, [r3]
   1c87c:	cmp	r1, r3
   1c880:	cmpeq	r0, r2
   1c884:	bne	1d430 <_start@@Base+0xada0>
   1c888:	add	r4, r8, #16
   1c88c:	mov	r1, r9
   1c890:	mov	r0, r4
   1c894:	bl	12780 <_start@@Base+0xf0>
   1c898:	mov	r3, #0
   1c89c:	str	r3, [sp, #288]	; 0x120
   1c8a0:	str	r1, [sp, #292]	; 0x124
   1c8a4:	add	r3, pc, #892	; 0x37c
   1c8a8:	ldrd	r2, [r3]
   1c8ac:	add	r1, sp, #288	; 0x120
   1c8b0:	ldrd	r0, [r1]
   1c8b4:	cmp	r1, r3
   1c8b8:	cmpeq	r0, r2
   1c8bc:	beq	1d27c <_start@@Base+0xabec>
   1c8c0:	mov	r2, r9
   1c8c4:	mov	r1, r4
   1c8c8:	mov	r0, sl
   1c8cc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c8d0:	mov	r8, r0
   1c8d4:	b	1c5f8 <_start@@Base+0x9f68>
   1c8d8:	add	r8, r8, #8
   1c8dc:	mov	r1, r9
   1c8e0:	mov	r0, r8
   1c8e4:	bl	12780 <_start@@Base+0xf0>
   1c8e8:	add	r3, pc, #832	; 0x340
   1c8ec:	ldrd	r2, [r3]
   1c8f0:	cmp	r1, r3
   1c8f4:	cmpeq	r0, r2
   1c8f8:	bhi	1cb2c <_start@@Base+0xa49c>
   1c8fc:	add	r3, pc, #820	; 0x334
   1c900:	ldrd	r2, [r3]
   1c904:	cmp	r1, r3
   1c908:	cmpeq	r0, r2
   1c90c:	beq	1c928 <_start@@Base+0xa298>
   1c910:	mov	r2, r9
   1c914:	mov	r1, r8
   1c918:	mov	r0, sl
   1c91c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1c920:	mov	r8, r0
   1c924:	b	1c5f8 <_start@@Base+0x9f68>
   1c928:	mov	r3, #8
   1c92c:	mov	r2, r9
   1c930:	mov	r1, r8
   1c934:	mov	r0, sl
   1c938:	bl	14594 <_start@@Base+0x1f04>
   1c93c:	mov	r4, r0
   1c940:	cmp	r8, r0
   1c944:	beq	1c9f8 <_start@@Base+0xa368>
   1c948:	mov	r3, #0
   1c94c:	str	r3, [sp, #368]	; 0x170
   1c950:	add	r3, sp, #368	; 0x170
   1c954:	mov	r2, r9
   1c958:	mov	r1, r0
   1c95c:	mov	r0, sl
   1c960:	bl	14158 <_start@@Base+0x1ac8>
   1c964:	mov	r8, r0
   1c968:	cmp	r4, r0
   1c96c:	beq	1c9b0 <_start@@Base+0xa320>
   1c970:	ldr	r3, [sp, #368]	; 0x170
   1c974:	cmp	r3, #0
   1c978:	bne	1c988 <_start@@Base+0xa2f8>
   1c97c:	ldr	r3, [sl, #8]
   1c980:	tst	r3, #2
   1c984:	beq	1c5f8 <_start@@Base+0x9f68>
   1c988:	mov	r3, #4
   1c98c:	mov	r2, r3
   1c990:	mov	r1, #16
   1c994:	ldr	r0, [sl]
   1c998:	bl	2565c <flatcc_builder_table_add@@Base>
   1c99c:	cmp	r0, #0
   1c9a0:	beq	1c9e0 <_start@@Base+0xa350>
   1c9a4:	ldr	r3, [sp, #368]	; 0x170
   1c9a8:	str	r3, [r0]
   1c9ac:	b	1c5f8 <_start@@Base+0x9f68>
   1c9b0:	add	r3, sp, #368	; 0x170
   1c9b4:	str	r3, [sp]
   1c9b8:	ldr	r3, [pc, #656]	; 1cc50 <_start@@Base+0xa5c0>
   1c9bc:	mov	r2, r9
   1c9c0:	mov	r1, r0
   1c9c4:	mov	r0, sl
   1c9c8:	bl	152f0 <_start@@Base+0x2c60>
   1c9cc:	cmp	r9, r0
   1c9d0:	cmpne	r8, r0
   1c9d4:	beq	1c9f0 <_start@@Base+0xa360>
   1c9d8:	mov	r8, r0
   1c9dc:	b	1c970 <_start@@Base+0xa2e0>
   1c9e0:	mov	fp, sl
   1c9e4:	mov	r0, r8
   1c9e8:	mov	r8, r0
   1c9ec:	b	18988 <_start@@Base+0x62f8>
   1c9f0:	mov	fp, sl
   1c9f4:	b	1c9e8 <_start@@Base+0xa358>
   1c9f8:	add	r4, r0, #8
   1c9fc:	mov	r1, r9
   1ca00:	mov	r0, r4
   1ca04:	bl	12780 <_start@@Base+0xf0>
   1ca08:	mov	r3, #0
   1ca0c:	str	r3, [sp, #312]	; 0x138
   1ca10:	and	r3, r1, #-16777216	; 0xff000000
   1ca14:	str	r3, [sp, #316]	; 0x13c
   1ca18:	add	r3, sp, #312	; 0x138
   1ca1c:	ldrd	r2, [r3]
   1ca20:	cmp	r3, #1627389952	; 0x61000000
   1ca24:	cmpeq	r2, #0
   1ca28:	beq	1ca44 <_start@@Base+0xa3b4>
   1ca2c:	mov	r2, r9
   1ca30:	mov	r1, r4
   1ca34:	mov	r0, sl
   1ca38:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca3c:	mov	r8, r0
   1ca40:	b	1c5f8 <_start@@Base+0x9f68>
   1ca44:	mov	r3, #1
   1ca48:	mov	r2, r9
   1ca4c:	mov	r1, r4
   1ca50:	mov	r0, sl
   1ca54:	bl	14594 <_start@@Base+0x1f04>
   1ca58:	mov	r5, r0
   1ca5c:	cmp	r4, r0
   1ca60:	beq	1cb14 <_start@@Base+0xa484>
   1ca64:	mov	r3, #0
   1ca68:	str	r3, [sp, #368]	; 0x170
   1ca6c:	add	r3, sp, #368	; 0x170
   1ca70:	mov	r2, r9
   1ca74:	mov	r1, r0
   1ca78:	mov	r0, sl
   1ca7c:	bl	14158 <_start@@Base+0x1ac8>
   1ca80:	mov	r8, r0
   1ca84:	cmp	r5, r0
   1ca88:	beq	1cacc <_start@@Base+0xa43c>
   1ca8c:	ldr	r3, [sp, #368]	; 0x170
   1ca90:	cmp	r3, #0
   1ca94:	bne	1caa4 <_start@@Base+0xa414>
   1ca98:	ldr	r3, [sl, #8]
   1ca9c:	tst	r3, #2
   1caa0:	beq	1c5f8 <_start@@Base+0x9f68>
   1caa4:	mov	r3, #4
   1caa8:	mov	r2, r3
   1caac:	mov	r1, #20
   1cab0:	ldr	r0, [sl]
   1cab4:	bl	2565c <flatcc_builder_table_add@@Base>
   1cab8:	cmp	r0, #0
   1cabc:	beq	1cafc <_start@@Base+0xa46c>
   1cac0:	ldr	r3, [sp, #368]	; 0x170
   1cac4:	str	r3, [r0]
   1cac8:	b	1c5f8 <_start@@Base+0x9f68>
   1cacc:	add	r3, sp, #368	; 0x170
   1cad0:	str	r3, [sp]
   1cad4:	ldr	r3, [pc, #376]	; 1cc54 <_start@@Base+0xa5c4>
   1cad8:	mov	r2, r9
   1cadc:	mov	r1, r0
   1cae0:	mov	r0, sl
   1cae4:	bl	152f0 <_start@@Base+0x2c60>
   1cae8:	cmp	r9, r0
   1caec:	cmpne	r8, r0
   1caf0:	beq	1cb0c <_start@@Base+0xa47c>
   1caf4:	mov	r8, r0
   1caf8:	b	1ca8c <_start@@Base+0xa3fc>
   1cafc:	mov	fp, sl
   1cb00:	mov	r0, r8
   1cb04:	mov	r8, r0
   1cb08:	b	18988 <_start@@Base+0x62f8>
   1cb0c:	mov	fp, sl
   1cb10:	b	1cb04 <_start@@Base+0xa474>
   1cb14:	mov	r2, r9
   1cb18:	mov	r1, r0
   1cb1c:	mov	r0, sl
   1cb20:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1cb24:	mov	r8, r0
   1cb28:	b	1c5f8 <_start@@Base+0x9f68>
   1cb2c:	add	r3, pc, #268	; 0x10c
   1cb30:	ldrd	r2, [r3]
   1cb34:	cmp	r1, r3
   1cb38:	cmpeq	r0, r2
   1cb3c:	bhi	1cdec <_start@@Base+0xa75c>
   1cb40:	add	r3, pc, #256	; 0x100
   1cb44:	ldrd	r2, [r3]
   1cb48:	cmp	r1, r3
   1cb4c:	cmpeq	r0, r2
   1cb50:	beq	1cb6c <_start@@Base+0xa4dc>
   1cb54:	mov	r2, r9
   1cb58:	mov	r1, r8
   1cb5c:	mov	r0, sl
   1cb60:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1cb64:	mov	r8, r0
   1cb68:	b	1c5f8 <_start@@Base+0x9f68>
   1cb6c:	mov	r3, #8
   1cb70:	mov	r2, r9
   1cb74:	mov	r1, r8
   1cb78:	mov	r0, sl
   1cb7c:	bl	14594 <_start@@Base+0x1f04>
   1cb80:	mov	r4, r0
   1cb84:	cmp	r8, r0
   1cb88:	beq	1cca8 <_start@@Base+0xa618>
   1cb8c:	mov	r2, #0
   1cb90:	mov	r3, #0
   1cb94:	add	r1, sp, #368	; 0x170
   1cb98:	strd	r2, [r1]
   1cb9c:	mov	r3, r1
   1cba0:	mov	r2, r9
   1cba4:	mov	r1, r0
   1cba8:	mov	r0, sl
   1cbac:	bl	14468 <_start@@Base+0x1dd8>
   1cbb0:	mov	r8, r0
   1cbb4:	cmp	r4, r0
   1cbb8:	beq	1cc60 <_start@@Base+0xa5d0>
   1cbbc:	add	r3, sp, #368	; 0x170
   1cbc0:	ldrd	r2, [r3]
   1cbc4:	orrs	r3, r2, r3
   1cbc8:	bne	1cbd8 <_start@@Base+0xa548>
   1cbcc:	ldr	r3, [sl, #8]
   1cbd0:	tst	r3, #2
   1cbd4:	beq	1c5f8 <_start@@Base+0x9f68>
   1cbd8:	mov	r3, #8
   1cbdc:	mov	r2, r3
   1cbe0:	mov	r1, #18
   1cbe4:	ldr	r0, [sl]
   1cbe8:	bl	2565c <flatcc_builder_table_add@@Base>
   1cbec:	cmp	r0, #0
   1cbf0:	beq	1cc90 <_start@@Base+0xa600>
   1cbf4:	add	r3, sp, #368	; 0x170
   1cbf8:	ldrd	r2, [r3]
   1cbfc:	strd	r2, [r0]
   1cc00:	b	1c5f8 <_start@@Base+0x9f68>
   1cc04:	nop	{0}
   1cc08:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1cc0c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cc10:	svcvs	0x00725f6e
   1cc14:			; <UNDEFINED> instruction: 0x76656374
   1cc18:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1cc1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cc20:	cmnvs	r4, r5, ror r2
   1cc24:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1cc28:	andeq	r0, r0, r0
   1cc2c:			; <UNDEFINED> instruction: 0x66666572
   1cc30:			; <UNDEFINED> instruction: 0x666e7630
   1cc34:	teqvc	r6, #1593835520	; 0x5f000000
   1cc38:			; <UNDEFINED> instruction: 0x666e7631
   1cc3c:	teqvc	r3, #-268435451	; 0xf0000005
   1cc40:			; <UNDEFINED> instruction: 0x666e7630
   1cc44:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1cc48:			; <UNDEFINED> instruction: 0x666e7631
   1cc4c:	teqvc	r6, #1593835520	; 0x5f000000
   1cc50:	andeq	lr, r3, r8, ror #3
   1cc54:	strdeq	lr, [r3], -r4
   1cc58:	andeq	lr, r3, r0, lsl #4
   1cc5c:	andeq	lr, r3, ip, lsl #4
   1cc60:	add	r3, sp, #368	; 0x170
   1cc64:	str	r3, [sp]
   1cc68:	ldr	r3, [pc, #-24]	; 1cc58 <_start@@Base+0xa5c8>
   1cc6c:	mov	r2, r9
   1cc70:	mov	r1, r0
   1cc74:	mov	r0, sl
   1cc78:	bl	15e6c <_start@@Base+0x37dc>
   1cc7c:	cmp	r9, r0
   1cc80:	cmpne	r8, r0
   1cc84:	beq	1cca0 <_start@@Base+0xa610>
   1cc88:	mov	r8, r0
   1cc8c:	b	1cbbc <_start@@Base+0xa52c>
   1cc90:	mov	fp, sl
   1cc94:	mov	r0, r8
   1cc98:	mov	r8, r0
   1cc9c:	b	18988 <_start@@Base+0x62f8>
   1cca0:	mov	fp, sl
   1cca4:	b	1cc98 <_start@@Base+0xa608>
   1cca8:	add	r4, r0, #8
   1ccac:	mov	r1, r9
   1ccb0:	mov	r0, r4
   1ccb4:	bl	12780 <_start@@Base+0xf0>
   1ccb8:	mov	r3, #0
   1ccbc:	str	r3, [sp, #320]	; 0x140
   1ccc0:	and	r3, r1, #-16777216	; 0xff000000
   1ccc4:	str	r3, [sp, #324]	; 0x144
   1ccc8:	add	r3, sp, #320	; 0x140
   1cccc:	ldrd	r2, [r3]
   1ccd0:	cmp	r3, #1627389952	; 0x61000000
   1ccd4:	cmpeq	r2, #0
   1ccd8:	beq	1ccf4 <_start@@Base+0xa664>
   1ccdc:	mov	r2, r9
   1cce0:	mov	r1, r4
   1cce4:	mov	r0, sl
   1cce8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1ccec:	mov	r8, r0
   1ccf0:	b	1c5f8 <_start@@Base+0x9f68>
   1ccf4:	mov	r3, #1
   1ccf8:	mov	r2, r9
   1ccfc:	mov	r1, r4
   1cd00:	mov	r0, sl
   1cd04:	bl	14594 <_start@@Base+0x1f04>
   1cd08:	mov	r5, r0
   1cd0c:	cmp	r4, r0
   1cd10:	beq	1cdd4 <_start@@Base+0xa744>
   1cd14:	mov	r2, #0
   1cd18:	mov	r3, #0
   1cd1c:	add	r1, sp, #368	; 0x170
   1cd20:	strd	r2, [r1]
   1cd24:	mov	r3, r1
   1cd28:	mov	r2, r9
   1cd2c:	mov	r1, r0
   1cd30:	mov	r0, sl
   1cd34:	bl	14468 <_start@@Base+0x1dd8>
   1cd38:	mov	r8, r0
   1cd3c:	cmp	r5, r0
   1cd40:	beq	1cd8c <_start@@Base+0xa6fc>
   1cd44:	add	r3, sp, #368	; 0x170
   1cd48:	ldrd	r2, [r3]
   1cd4c:	orrs	r3, r2, r3
   1cd50:	bne	1cd60 <_start@@Base+0xa6d0>
   1cd54:	ldr	r3, [sl, #8]
   1cd58:	tst	r3, #2
   1cd5c:	beq	1c5f8 <_start@@Base+0x9f68>
   1cd60:	mov	r3, #8
   1cd64:	mov	r2, r3
   1cd68:	mov	r1, #22
   1cd6c:	ldr	r0, [sl]
   1cd70:	bl	2565c <flatcc_builder_table_add@@Base>
   1cd74:	cmp	r0, #0
   1cd78:	beq	1cdbc <_start@@Base+0xa72c>
   1cd7c:	add	r3, sp, #368	; 0x170
   1cd80:	ldrd	r2, [r3]
   1cd84:	strd	r2, [r0]
   1cd88:	b	1c5f8 <_start@@Base+0x9f68>
   1cd8c:	add	r3, sp, #368	; 0x170
   1cd90:	str	r3, [sp]
   1cd94:	ldr	r3, [pc, #-320]	; 1cc5c <_start@@Base+0xa5cc>
   1cd98:	mov	r2, r9
   1cd9c:	mov	r1, r0
   1cda0:	mov	r0, sl
   1cda4:	bl	15e6c <_start@@Base+0x37dc>
   1cda8:	cmp	r9, r0
   1cdac:	cmpne	r8, r0
   1cdb0:	beq	1cdcc <_start@@Base+0xa73c>
   1cdb4:	mov	r8, r0
   1cdb8:	b	1cd44 <_start@@Base+0xa6b4>
   1cdbc:	mov	fp, sl
   1cdc0:	mov	r0, r8
   1cdc4:	mov	r8, r0
   1cdc8:	b	18988 <_start@@Base+0x62f8>
   1cdcc:	mov	fp, sl
   1cdd0:	b	1cdc4 <_start@@Base+0xa734>
   1cdd4:	mov	r2, r9
   1cdd8:	mov	r1, r0
   1cddc:	mov	r0, sl
   1cde0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1cde4:	mov	r8, r0
   1cde8:	b	1c5f8 <_start@@Base+0x9f68>
   1cdec:	add	r3, pc, #876	; 0x36c
   1cdf0:	ldrd	r2, [r3]
   1cdf4:	cmp	r1, r3
   1cdf8:	cmpeq	r0, r2
   1cdfc:	beq	1ce2c <_start@@Base+0xa79c>
   1ce00:	add	r3, pc, #864	; 0x360
   1ce04:	ldrd	r2, [r3]
   1ce08:	cmp	r1, r3
   1ce0c:	cmpeq	r0, r2
   1ce10:	beq	1d030 <_start@@Base+0xa9a0>
   1ce14:	mov	r2, r9
   1ce18:	mov	r1, r8
   1ce1c:	mov	r0, sl
   1ce20:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce24:	mov	r8, r0
   1ce28:	b	1c5f8 <_start@@Base+0x9f68>
   1ce2c:	mov	r3, #8
   1ce30:	mov	r2, r9
   1ce34:	mov	r1, r8
   1ce38:	mov	r0, sl
   1ce3c:	bl	14594 <_start@@Base+0x1f04>
   1ce40:	mov	r4, r0
   1ce44:	cmp	r8, r0
   1ce48:	beq	1cefc <_start@@Base+0xa86c>
   1ce4c:	mov	r3, #0
   1ce50:	str	r3, [sp, #368]	; 0x170
   1ce54:	add	r3, sp, #368	; 0x170
   1ce58:	mov	r2, r9
   1ce5c:	mov	r1, r0
   1ce60:	mov	r0, sl
   1ce64:	bl	1423c <_start@@Base+0x1bac>
   1ce68:	mov	r8, r0
   1ce6c:	cmp	r4, r0
   1ce70:	beq	1ceb4 <_start@@Base+0xa824>
   1ce74:	ldr	r3, [sp, #368]	; 0x170
   1ce78:	cmp	r3, #0
   1ce7c:	bne	1ce8c <_start@@Base+0xa7fc>
   1ce80:	ldr	r3, [sl, #8]
   1ce84:	tst	r3, #2
   1ce88:	beq	1c5f8 <_start@@Base+0x9f68>
   1ce8c:	mov	r3, #4
   1ce90:	mov	r2, r3
   1ce94:	mov	r1, #17
   1ce98:	ldr	r0, [sl]
   1ce9c:	bl	2565c <flatcc_builder_table_add@@Base>
   1cea0:	cmp	r0, #0
   1cea4:	beq	1cee4 <_start@@Base+0xa854>
   1cea8:	ldr	r3, [sp, #368]	; 0x170
   1ceac:	str	r3, [r0]
   1ceb0:	b	1c5f8 <_start@@Base+0x9f68>
   1ceb4:	add	r3, sp, #368	; 0x170
   1ceb8:	str	r3, [sp]
   1cebc:	ldr	r3, [pc, #684]	; 1d170 <_start@@Base+0xaae0>
   1cec0:	mov	r2, r9
   1cec4:	mov	r1, r0
   1cec8:	mov	r0, sl
   1cecc:	bl	15548 <_start@@Base+0x2eb8>
   1ced0:	cmp	r9, r0
   1ced4:	cmpne	r8, r0
   1ced8:	beq	1cef4 <_start@@Base+0xa864>
   1cedc:	mov	r8, r0
   1cee0:	b	1ce74 <_start@@Base+0xa7e4>
   1cee4:	mov	fp, sl
   1cee8:	mov	r0, r8
   1ceec:	mov	r8, r0
   1cef0:	b	18988 <_start@@Base+0x62f8>
   1cef4:	mov	fp, sl
   1cef8:	b	1ceec <_start@@Base+0xa85c>
   1cefc:	add	r4, r0, #8
   1cf00:	mov	r1, r9
   1cf04:	mov	r0, r4
   1cf08:	bl	12780 <_start@@Base+0xf0>
   1cf0c:	mov	r3, #0
   1cf10:	str	r3, [sp, #328]	; 0x148
   1cf14:	and	r3, r1, #-16777216	; 0xff000000
   1cf18:	str	r3, [sp, #332]	; 0x14c
   1cf1c:	add	r3, sp, #328	; 0x148
   1cf20:	ldrd	r2, [r3]
   1cf24:	cmp	r3, #1627389952	; 0x61000000
   1cf28:	cmpeq	r2, #0
   1cf2c:	beq	1cf48 <_start@@Base+0xa8b8>
   1cf30:	mov	r2, r9
   1cf34:	mov	r1, r4
   1cf38:	mov	r0, sl
   1cf3c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf40:	mov	r8, r0
   1cf44:	b	1c5f8 <_start@@Base+0x9f68>
   1cf48:	mov	r3, #1
   1cf4c:	mov	r2, r9
   1cf50:	mov	r1, r4
   1cf54:	mov	r0, sl
   1cf58:	bl	14594 <_start@@Base+0x1f04>
   1cf5c:	mov	r5, r0
   1cf60:	cmp	r4, r0
   1cf64:	beq	1d018 <_start@@Base+0xa988>
   1cf68:	mov	r3, #0
   1cf6c:	str	r3, [sp, #368]	; 0x170
   1cf70:	add	r3, sp, #368	; 0x170
   1cf74:	mov	r2, r9
   1cf78:	mov	r1, r0
   1cf7c:	mov	r0, sl
   1cf80:	bl	1423c <_start@@Base+0x1bac>
   1cf84:	mov	r8, r0
   1cf88:	cmp	r5, r0
   1cf8c:	beq	1cfd0 <_start@@Base+0xa940>
   1cf90:	ldr	r3, [sp, #368]	; 0x170
   1cf94:	cmp	r3, #0
   1cf98:	bne	1cfa8 <_start@@Base+0xa918>
   1cf9c:	ldr	r3, [sl, #8]
   1cfa0:	tst	r3, #2
   1cfa4:	beq	1c5f8 <_start@@Base+0x9f68>
   1cfa8:	mov	r3, #4
   1cfac:	mov	r2, r3
   1cfb0:	mov	r1, #21
   1cfb4:	ldr	r0, [sl]
   1cfb8:	bl	2565c <flatcc_builder_table_add@@Base>
   1cfbc:	cmp	r0, #0
   1cfc0:	beq	1d000 <_start@@Base+0xa970>
   1cfc4:	ldr	r3, [sp, #368]	; 0x170
   1cfc8:	str	r3, [r0]
   1cfcc:	b	1c5f8 <_start@@Base+0x9f68>
   1cfd0:	add	r3, sp, #368	; 0x170
   1cfd4:	str	r3, [sp]
   1cfd8:	ldr	r3, [pc, #404]	; 1d174 <_start@@Base+0xaae4>
   1cfdc:	mov	r2, r9
   1cfe0:	mov	r1, r0
   1cfe4:	mov	r0, sl
   1cfe8:	bl	15548 <_start@@Base+0x2eb8>
   1cfec:	cmp	r9, r0
   1cff0:	cmpne	r8, r0
   1cff4:	beq	1d010 <_start@@Base+0xa980>
   1cff8:	mov	r8, r0
   1cffc:	b	1cf90 <_start@@Base+0xa900>
   1d000:	mov	fp, sl
   1d004:	mov	r0, r8
   1d008:	mov	r8, r0
   1d00c:	b	18988 <_start@@Base+0x62f8>
   1d010:	mov	fp, sl
   1d014:	b	1d008 <_start@@Base+0xa978>
   1d018:	mov	r2, r9
   1d01c:	mov	r1, r0
   1d020:	mov	r0, sl
   1d024:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d028:	mov	r8, r0
   1d02c:	b	1c5f8 <_start@@Base+0x9f68>
   1d030:	mov	r3, #8
   1d034:	mov	r2, r9
   1d038:	mov	r1, r8
   1d03c:	mov	r0, sl
   1d040:	bl	14594 <_start@@Base+0x1f04>
   1d044:	mov	r4, r0
   1d048:	cmp	r8, r0
   1d04c:	beq	1d110 <_start@@Base+0xaa80>
   1d050:	mov	r2, #0
   1d054:	mov	r3, #0
   1d058:	add	r1, sp, #368	; 0x170
   1d05c:	strd	r2, [r1]
   1d060:	mov	r3, r1
   1d064:	mov	r2, r9
   1d068:	mov	r1, r0
   1d06c:	mov	r0, sl
   1d070:	bl	1430c <_start@@Base+0x1c7c>
   1d074:	mov	r8, r0
   1d078:	cmp	r4, r0
   1d07c:	beq	1d0c8 <_start@@Base+0xaa38>
   1d080:	add	r3, sp, #368	; 0x170
   1d084:	ldrd	r2, [r3]
   1d088:	orrs	r3, r2, r3
   1d08c:	bne	1d09c <_start@@Base+0xaa0c>
   1d090:	ldr	r3, [sl, #8]
   1d094:	tst	r3, #2
   1d098:	beq	1c5f8 <_start@@Base+0x9f68>
   1d09c:	mov	r3, #8
   1d0a0:	mov	r2, r3
   1d0a4:	mov	r1, #19
   1d0a8:	ldr	r0, [sl]
   1d0ac:	bl	2565c <flatcc_builder_table_add@@Base>
   1d0b0:	cmp	r0, #0
   1d0b4:	beq	1d0f8 <_start@@Base+0xaa68>
   1d0b8:	add	r3, sp, #368	; 0x170
   1d0bc:	ldrd	r2, [r3]
   1d0c0:	strd	r2, [r0]
   1d0c4:	b	1c5f8 <_start@@Base+0x9f68>
   1d0c8:	add	r3, sp, #368	; 0x170
   1d0cc:	str	r3, [sp]
   1d0d0:	ldr	r3, [pc, #160]	; 1d178 <_start@@Base+0xaae8>
   1d0d4:	mov	r2, r9
   1d0d8:	mov	r1, r0
   1d0dc:	mov	r0, sl
   1d0e0:	bl	15c2c <_start@@Base+0x359c>
   1d0e4:	cmp	r9, r0
   1d0e8:	cmpne	r8, r0
   1d0ec:	beq	1d108 <_start@@Base+0xaa78>
   1d0f0:	mov	r8, r0
   1d0f4:	b	1d080 <_start@@Base+0xa9f0>
   1d0f8:	mov	fp, sl
   1d0fc:	mov	r0, r8
   1d100:	mov	r8, r0
   1d104:	b	18988 <_start@@Base+0x62f8>
   1d108:	mov	fp, sl
   1d10c:	b	1d100 <_start@@Base+0xaa70>
   1d110:	add	r4, r0, #8
   1d114:	mov	r1, r9
   1d118:	mov	r0, r4
   1d11c:	bl	12780 <_start@@Base+0xf0>
   1d120:	mov	r3, #0
   1d124:	str	r3, [sp, #336]	; 0x150
   1d128:	and	r3, r1, #-16777216	; 0xff000000
   1d12c:	str	r3, [sp, #340]	; 0x154
   1d130:	add	r3, sp, #336	; 0x150
   1d134:	ldrd	r2, [r3]
   1d138:	cmp	r3, #1627389952	; 0x61000000
   1d13c:	cmpeq	r2, #0
   1d140:	beq	1d184 <_start@@Base+0xaaf4>
   1d144:	mov	r2, r9
   1d148:	mov	r1, r4
   1d14c:	mov	r0, sl
   1d150:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d154:	mov	r8, r0
   1d158:	b	1c5f8 <_start@@Base+0x9f68>
   1d15c:	nop	{0}
   1d160:			; <UNDEFINED> instruction: 0x666e7631
   1d164:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1d168:			; <UNDEFINED> instruction: 0x666e7631
   1d16c:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1d170:	andeq	lr, r3, r8, lsl r2
   1d174:	andeq	lr, r3, r4, lsr #4
   1d178:	andeq	lr, r3, r0, lsr r2
   1d17c:	andeq	lr, r3, ip, lsr r2
   1d180:	andeq	lr, r3, r8, asr #4
   1d184:	mov	r3, #1
   1d188:	mov	r2, r9
   1d18c:	mov	r1, r4
   1d190:	mov	r0, sl
   1d194:	bl	14594 <_start@@Base+0x1f04>
   1d198:	mov	r5, r0
   1d19c:	cmp	r4, r0
   1d1a0:	beq	1d264 <_start@@Base+0xabd4>
   1d1a4:	mov	r2, #0
   1d1a8:	mov	r3, #0
   1d1ac:	add	r1, sp, #368	; 0x170
   1d1b0:	strd	r2, [r1]
   1d1b4:	mov	r3, r1
   1d1b8:	mov	r2, r9
   1d1bc:	mov	r1, r0
   1d1c0:	mov	r0, sl
   1d1c4:	bl	1430c <_start@@Base+0x1c7c>
   1d1c8:	mov	r8, r0
   1d1cc:	cmp	r5, r0
   1d1d0:	beq	1d21c <_start@@Base+0xab8c>
   1d1d4:	add	r3, sp, #368	; 0x170
   1d1d8:	ldrd	r2, [r3]
   1d1dc:	orrs	r3, r2, r3
   1d1e0:	bne	1d1f0 <_start@@Base+0xab60>
   1d1e4:	ldr	r3, [sl, #8]
   1d1e8:	tst	r3, #2
   1d1ec:	beq	1c5f8 <_start@@Base+0x9f68>
   1d1f0:	mov	r3, #8
   1d1f4:	mov	r2, r3
   1d1f8:	mov	r1, #23
   1d1fc:	ldr	r0, [sl]
   1d200:	bl	2565c <flatcc_builder_table_add@@Base>
   1d204:	cmp	r0, #0
   1d208:	beq	1d24c <_start@@Base+0xabbc>
   1d20c:	add	r3, sp, #368	; 0x170
   1d210:	ldrd	r2, [r3]
   1d214:	strd	r2, [r0]
   1d218:	b	1c5f8 <_start@@Base+0x9f68>
   1d21c:	add	r3, sp, #368	; 0x170
   1d220:	str	r3, [sp]
   1d224:	ldr	r3, [pc, #-176]	; 1d17c <_start@@Base+0xaaec>
   1d228:	mov	r2, r9
   1d22c:	mov	r1, r0
   1d230:	mov	r0, sl
   1d234:	bl	15c2c <_start@@Base+0x359c>
   1d238:	cmp	r9, r0
   1d23c:	cmpne	r8, r0
   1d240:	beq	1d25c <_start@@Base+0xabcc>
   1d244:	mov	r8, r0
   1d248:	b	1d1d4 <_start@@Base+0xab44>
   1d24c:	mov	fp, sl
   1d250:	mov	r0, r8
   1d254:	mov	r8, r0
   1d258:	b	18988 <_start@@Base+0x62f8>
   1d25c:	mov	fp, sl
   1d260:	b	1d254 <_start@@Base+0xabc4>
   1d264:	mov	r2, r9
   1d268:	mov	r1, r0
   1d26c:	mov	r0, sl
   1d270:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d274:	mov	r8, r0
   1d278:	b	1c5f8 <_start@@Base+0x9f68>
   1d27c:	mov	r3, #4
   1d280:	mov	r2, r9
   1d284:	mov	r1, r4
   1d288:	mov	r0, sl
   1d28c:	bl	14594 <_start@@Base+0x1f04>
   1d290:	mov	r8, r0
   1d294:	cmp	r4, r0
   1d298:	beq	1d418 <_start@@Base+0xad88>
   1d29c:	cmp	r9, r0
   1d2a0:	beq	1d2b0 <_start@@Base+0xac20>
   1d2a4:	ldrb	r3, [r0]
   1d2a8:	cmp	r3, #91	; 0x5b
   1d2ac:	beq	1d328 <_start@@Base+0xac98>
   1d2b0:	mov	r3, #0
   1d2b4:	mov	r2, r3
   1d2b8:	mov	r1, r3
   1d2bc:	ldr	r0, [sl]
   1d2c0:	bl	22ad8 <flatcc_builder_start_buffer@@Base>
   1d2c4:	cmp	r0, #0
   1d2c8:	bne	1da58 <_start@@Base+0xb3c8>
   1d2cc:	add	r3, sp, #384	; 0x180
   1d2d0:	mov	r2, r9
   1d2d4:	mov	r1, r8
   1d2d8:	mov	r0, sl
   1d2dc:	bl	1893c <_start@@Base+0x62ac>
   1d2e0:	mov	r8, r0
   1d2e4:	ldr	r1, [sp, #384]	; 0x180
   1d2e8:	cmp	r1, #0
   1d2ec:	beq	1da60 <_start@@Base+0xb3d0>
   1d2f0:	ldr	r0, [sl]
   1d2f4:	bl	22bac <flatcc_builder_end_buffer@@Base>
   1d2f8:	str	r0, [sp, #384]	; 0x180
   1d2fc:	ldr	r3, [sp, #384]	; 0x180
   1d300:	cmp	r3, #0
   1d304:	beq	1da68 <_start@@Base+0xb3d8>
   1d308:	mov	r1, #13
   1d30c:	ldr	r0, [sl]
   1d310:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1d314:	cmp	r0, #0
   1d318:	beq	1da70 <_start@@Base+0xb3e0>
   1d31c:	ldr	r3, [sp, #384]	; 0x180
   1d320:	str	r3, [r0]
   1d324:	b	1c5f8 <_start@@Base+0x9f68>
   1d328:	mvn	r3, #0
   1d32c:	mov	r2, #1
   1d330:	mov	r1, r2
   1d334:	ldr	r0, [sl]
   1d338:	bl	237a0 <flatcc_builder_start_vector@@Base>
   1d33c:	cmp	r0, #0
   1d340:	bne	1da48 <_start@@Base+0xb3b8>
   1d344:	add	r3, sp, #388	; 0x184
   1d348:	mov	r2, r9
   1d34c:	mov	r1, r8
   1d350:	mov	r0, sl
   1d354:	bl	14754 <_start@@Base+0x20c4>
   1d358:	mov	r8, r0
   1d35c:	ldr	r3, [sp, #388]	; 0x184
   1d360:	cmp	r3, #0
   1d364:	beq	1d408 <_start@@Base+0xad78>
   1d368:	mov	r5, #0
   1d36c:	ldr	fp, [pc, #-500]	; 1d180 <_start@@Base+0xaaf0>
   1d370:	b	1d3a0 <_start@@Base+0xad10>
   1d374:	ldrb	r3, [sp, #368]	; 0x170
   1d378:	strb	r3, [r4]
   1d37c:	add	r3, sp, #388	; 0x184
   1d380:	mov	r2, r9
   1d384:	mov	r1, r0
   1d388:	mov	r0, sl
   1d38c:	bl	17e90 <_start@@Base+0x5800>
   1d390:	mov	r8, r0
   1d394:	ldr	r3, [sp, #388]	; 0x184
   1d398:	cmp	r3, #0
   1d39c:	beq	1d408 <_start@@Base+0xad78>
   1d3a0:	strb	r5, [sp, #368]	; 0x170
   1d3a4:	mov	r1, #1
   1d3a8:	ldr	r0, [sl]
   1d3ac:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   1d3b0:	subs	r4, r0, #0
   1d3b4:	beq	1da50 <_start@@Base+0xb3c0>
   1d3b8:	add	r3, sp, #368	; 0x170
   1d3bc:	mov	r2, r9
   1d3c0:	mov	r1, r8
   1d3c4:	mov	r0, sl
   1d3c8:	bl	143a8 <_start@@Base+0x1d18>
   1d3cc:	cmp	r0, r8
   1d3d0:	bne	1d374 <_start@@Base+0xace4>
   1d3d4:	add	r3, sp, #368	; 0x170
   1d3d8:	str	r3, [sp]
   1d3dc:	mov	r3, fp
   1d3e0:	mov	r2, r9
   1d3e4:	mov	r1, r8
   1d3e8:	mov	r0, sl
   1d3ec:	bl	159ec <_start@@Base+0x335c>
   1d3f0:	cmp	r9, r0
   1d3f4:	cmpne	r0, r8
   1d3f8:	bne	1d374 <_start@@Base+0xace4>
   1d3fc:	mov	fp, sl
   1d400:	mov	r8, r0
   1d404:	b	18988 <_start@@Base+0x62f8>
   1d408:	ldr	r0, [sl]
   1d40c:	bl	248a4 <flatcc_builder_end_vector@@Base>
   1d410:	str	r0, [sp, #384]	; 0x180
   1d414:	b	1d2fc <_start@@Base+0xac6c>
   1d418:	mov	r2, r9
   1d41c:	mov	r1, r0
   1d420:	mov	r0, sl
   1d424:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d428:	mov	r8, r0
   1d42c:	b	1c5f8 <_start@@Base+0x9f68>
   1d430:	mov	r2, r9
   1d434:	mov	r1, r4
   1d438:	mov	r0, sl
   1d43c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d440:	mov	r8, r0
   1d444:	b	1c5f8 <_start@@Base+0x9f68>
   1d448:	mov	r2, r9
   1d44c:	mov	r1, r8
   1d450:	mov	r0, sl
   1d454:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d458:	mov	r8, r0
   1d45c:	b	1c5f8 <_start@@Base+0x9f68>
   1d460:	add	r3, pc, #984	; 0x3d8
   1d464:	ldrd	r2, [r3]
   1d468:	cmp	r1, r3
   1d46c:	cmpeq	r0, r2
   1d470:	bne	1d7c8 <_start@@Base+0xb138>
   1d474:	add	r4, r8, #8
   1d478:	mov	r1, r9
   1d47c:	mov	r0, r4
   1d480:	bl	12780 <_start@@Base+0xf0>
   1d484:	add	r3, pc, #956	; 0x3bc
   1d488:	ldrd	r2, [r3]
   1d48c:	cmp	r1, r3
   1d490:	cmpeq	r0, r2
   1d494:	beq	1d4d4 <_start@@Base+0xae44>
   1d498:	bic	r3, r0, #255	; 0xff
   1d49c:	str	r3, [sp, #248]	; 0xf8
   1d4a0:	str	r1, [sp, #252]	; 0xfc
   1d4a4:	add	r3, pc, #932	; 0x3a4
   1d4a8:	ldrd	r2, [r3]
   1d4ac:	ldrd	r0, [sp, #248]	; 0xf8
   1d4b0:	cmp	r1, r3
   1d4b4:	cmpeq	r0, r2
   1d4b8:	beq	1d670 <_start@@Base+0xafe0>
   1d4bc:	mov	r2, r9
   1d4c0:	mov	r1, r4
   1d4c4:	mov	r0, sl
   1d4c8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d4cc:	mov	r8, r0
   1d4d0:	b	1c5f8 <_start@@Base+0x9f68>
   1d4d4:	add	r4, r8, #16
   1d4d8:	mov	r1, r9
   1d4dc:	mov	r0, r4
   1d4e0:	bl	12780 <_start@@Base+0xf0>
   1d4e4:	mov	r3, #0
   1d4e8:	str	r3, [sp, #296]	; 0x128
   1d4ec:	and	r3, r1, #-16777216	; 0xff000000
   1d4f0:	str	r3, [sp, #300]	; 0x12c
   1d4f4:	add	r3, sp, #296	; 0x128
   1d4f8:	ldrd	r2, [r3]
   1d4fc:	cmp	r3, #1929379840	; 0x73000000
   1d500:	cmpeq	r2, #0
   1d504:	beq	1d520 <_start@@Base+0xae90>
   1d508:	mov	r2, r9
   1d50c:	mov	r1, r4
   1d510:	mov	r0, sl
   1d514:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d518:	mov	r8, r0
   1d51c:	b	1c5f8 <_start@@Base+0x9f68>
   1d520:	mov	r3, #1
   1d524:	mov	r2, r9
   1d528:	mov	r1, r4
   1d52c:	mov	r0, sl
   1d530:	bl	14594 <_start@@Base+0x1f04>
   1d534:	mov	r8, r0
   1d538:	cmp	r4, r0
   1d53c:	bne	1d558 <_start@@Base+0xaec8>
   1d540:	mov	r2, r9
   1d544:	mov	r1, r0
   1d548:	mov	r0, sl
   1d54c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d550:	mov	r8, r0
   1d554:	b	1c5f8 <_start@@Base+0x9f68>
   1d558:	mvn	r3, #-536870912	; 0xe0000000
   1d55c:	mov	r2, #8
   1d560:	mov	r1, r2
   1d564:	ldr	r0, [sl]
   1d568:	bl	237a0 <flatcc_builder_start_vector@@Base>
   1d56c:	cmp	r0, #0
   1d570:	bne	1da78 <_start@@Base+0xb3e8>
   1d574:	add	r3, sp, #388	; 0x184
   1d578:	mov	r2, r9
   1d57c:	mov	r1, r8
   1d580:	mov	r0, sl
   1d584:	bl	14754 <_start@@Base+0x20c4>
   1d588:	mov	r8, r0
   1d58c:	ldr	r3, [sp, #388]	; 0x184
   1d590:	cmp	r3, #0
   1d594:	beq	1d63c <_start@@Base+0xafac>
   1d598:	vldr	d8, [pc, #696]	; 1d858 <_start@@Base+0xb1c8>
   1d59c:	ldr	r5, [pc, #700]	; 1d860 <_start@@Base+0xb1d0>
   1d5a0:	b	1d5d4 <_start@@Base+0xaf44>
   1d5a4:	add	r3, sp, #368	; 0x170
   1d5a8:	ldrd	r2, [r3]
   1d5ac:	strd	r2, [r4]
   1d5b0:	add	r3, sp, #388	; 0x184
   1d5b4:	mov	r2, r9
   1d5b8:	mov	r1, r0
   1d5bc:	mov	r0, sl
   1d5c0:	bl	17e90 <_start@@Base+0x5800>
   1d5c4:	mov	r8, r0
   1d5c8:	ldr	r3, [sp, #388]	; 0x184
   1d5cc:	cmp	r3, #0
   1d5d0:	beq	1d63c <_start@@Base+0xafac>
   1d5d4:	vstr	d8, [sp, #368]	; 0x170
   1d5d8:	mov	r1, #1
   1d5dc:	ldr	r0, [sl]
   1d5e0:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   1d5e4:	subs	r4, r0, #0
   1d5e8:	beq	1da80 <_start@@Base+0xb3f0>
   1d5ec:	add	r3, sp, #368	; 0x170
   1d5f0:	mov	r2, r9
   1d5f4:	mov	r1, r8
   1d5f8:	mov	r0, sl
   1d5fc:	bl	289f4 <flatcc_json_parser_double@@Base>
   1d600:	cmp	r0, r8
   1d604:	bne	1d5a4 <_start@@Base+0xaf14>
   1d608:	add	r3, sp, #368	; 0x170
   1d60c:	str	r3, [sp]
   1d610:	mov	r3, r5
   1d614:	mov	r2, r9
   1d618:	mov	r1, r8
   1d61c:	mov	r0, sl
   1d620:	bl	14a24 <_start@@Base+0x2394>
   1d624:	cmp	r9, r0
   1d628:	cmpne	r0, r8
   1d62c:	bne	1d5a4 <_start@@Base+0xaf14>
   1d630:	mov	fp, sl
   1d634:	mov	r8, r0
   1d638:	b	18988 <_start@@Base+0x62f8>
   1d63c:	ldr	r0, [sl]
   1d640:	bl	248a4 <flatcc_builder_end_vector@@Base>
   1d644:	str	r0, [sp, #384]	; 0x180
   1d648:	cmp	r0, #0
   1d64c:	beq	1da88 <_start@@Base+0xb3f8>
   1d650:	mov	r1, #33	; 0x21
   1d654:	ldr	r0, [sl]
   1d658:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1d65c:	cmp	r0, #0
   1d660:	beq	1da90 <_start@@Base+0xb400>
   1d664:	ldr	r3, [sp, #384]	; 0x180
   1d668:	str	r3, [r0]
   1d66c:	b	1c5f8 <_start@@Base+0x9f68>
   1d670:	mov	r3, #7
   1d674:	mov	r2, r9
   1d678:	mov	r1, r4
   1d67c:	mov	r0, sl
   1d680:	bl	14594 <_start@@Base+0x1f04>
   1d684:	mov	r8, r0
   1d688:	cmp	r4, r0
   1d68c:	bne	1d6a8 <_start@@Base+0xb018>
   1d690:	mov	r2, r9
   1d694:	mov	r1, r0
   1d698:	mov	r0, sl
   1d69c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6a0:	mov	r8, r0
   1d6a4:	b	1c5f8 <_start@@Base+0x9f68>
   1d6a8:	mvn	r3, #-536870912	; 0xe0000000
   1d6ac:	mov	r2, #8
   1d6b0:	mov	r1, r2
   1d6b4:	ldr	r0, [sl]
   1d6b8:	bl	237a0 <flatcc_builder_start_vector@@Base>
   1d6bc:	cmp	r0, #0
   1d6c0:	bne	1da98 <_start@@Base+0xb408>
   1d6c4:	add	r3, sp, #388	; 0x184
   1d6c8:	mov	r2, r9
   1d6cc:	mov	r1, r8
   1d6d0:	mov	r0, sl
   1d6d4:	bl	14754 <_start@@Base+0x20c4>
   1d6d8:	mov	r8, r0
   1d6dc:	ldr	r3, [sp, #388]	; 0x184
   1d6e0:	cmp	r3, #0
   1d6e4:	beq	1d794 <_start@@Base+0xb104>
   1d6e8:	ldr	r5, [pc, #372]	; 1d864 <_start@@Base+0xb1d4>
   1d6ec:	b	1d720 <_start@@Base+0xb090>
   1d6f0:	add	r3, sp, #368	; 0x170
   1d6f4:	ldrd	r2, [r3]
   1d6f8:	strd	r2, [r4]
   1d6fc:	add	r3, sp, #388	; 0x184
   1d700:	mov	r2, r9
   1d704:	mov	r1, r0
   1d708:	mov	r0, sl
   1d70c:	bl	17e90 <_start@@Base+0x5800>
   1d710:	mov	r8, r0
   1d714:	ldr	r3, [sp, #388]	; 0x184
   1d718:	cmp	r3, #0
   1d71c:	beq	1d794 <_start@@Base+0xb104>
   1d720:	mov	r2, #0
   1d724:	mov	r3, #0
   1d728:	add	r1, sp, #368	; 0x170
   1d72c:	strd	r2, [r1]
   1d730:	mov	r1, #1
   1d734:	ldr	r0, [sl]
   1d738:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   1d73c:	subs	r4, r0, #0
   1d740:	beq	1daa0 <_start@@Base+0xb410>
   1d744:	add	r3, sp, #368	; 0x170
   1d748:	mov	r2, r9
   1d74c:	mov	r1, r8
   1d750:	mov	r0, sl
   1d754:	bl	14468 <_start@@Base+0x1dd8>
   1d758:	cmp	r0, r8
   1d75c:	bne	1d6f0 <_start@@Base+0xb060>
   1d760:	add	r3, sp, #368	; 0x170
   1d764:	str	r3, [sp]
   1d768:	mov	r3, r5
   1d76c:	mov	r2, r9
   1d770:	mov	r1, r8
   1d774:	mov	r0, sl
   1d778:	bl	15e6c <_start@@Base+0x37dc>
   1d77c:	cmp	r9, r0
   1d780:	cmpne	r0, r8
   1d784:	bne	1d6f0 <_start@@Base+0xb060>
   1d788:	mov	fp, sl
   1d78c:	mov	r8, r0
   1d790:	b	18988 <_start@@Base+0x62f8>
   1d794:	ldr	r0, [sl]
   1d798:	bl	248a4 <flatcc_builder_end_vector@@Base>
   1d79c:	str	r0, [sp, #384]	; 0x180
   1d7a0:	cmp	r0, #0
   1d7a4:	beq	1daa8 <_start@@Base+0xb418>
   1d7a8:	mov	r1, #32
   1d7ac:	ldr	r0, [sl]
   1d7b0:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1d7b4:	cmp	r0, #0
   1d7b8:	beq	1dab0 <_start@@Base+0xb420>
   1d7bc:	ldr	r3, [sp, #384]	; 0x180
   1d7c0:	str	r3, [r0]
   1d7c4:	b	1c5f8 <_start@@Base+0x9f68>
   1d7c8:	mov	r2, r9
   1d7cc:	mov	r1, r8
   1d7d0:	mov	r0, sl
   1d7d4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1d7d8:	mov	r8, r0
   1d7dc:	b	1c5f8 <_start@@Base+0x9f68>
   1d7e0:	mov	fp, sl
   1d7e4:	ldr	r3, [fp, #24]
   1d7e8:	cmp	r3, #0
   1d7ec:	bne	18988 <_start@@Base+0x62f8>
   1d7f0:	mov	r1, #3
   1d7f4:	ldr	r0, [fp]
   1d7f8:	bl	2439c <flatcc_builder_check_required_field@@Base>
   1d7fc:	cmp	r0, #0
   1d800:	beq	1d868 <_start@@Base+0xb1d8>
   1d804:	ldr	r3, [sp, #380]	; 0x17c
   1d808:	mov	r2, r9
   1d80c:	mov	r1, r8
   1d810:	mov	r0, fp
   1d814:	bl	2a134 <flatcc_json_parser_finalize_unions@@Base>
   1d818:	mov	r4, r0
   1d81c:	ldr	r0, [fp]
   1d820:	bl	24570 <flatcc_builder_end_table@@Base>
   1d824:	ldr	r3, [sp, #124]	; 0x7c
   1d828:	str	r0, [r3]
   1d82c:	cmp	r0, #0
   1d830:	moveq	r8, r4
   1d834:	bne	189a0 <_start@@Base+0x6310>
   1d838:	b	18988 <_start@@Base+0x62f8>
   1d83c:	nop	{0}
   1d840:	svcvs	0x00725f6f
   1d844:			; <UNDEFINED> instruction: 0x76656374
   1d848:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1d84c:	ldrbvs	r6, [pc], -pc, ror #8
   1d850:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1d854:	ldrbvs	r6, [pc], -pc, ror #24
	...
   1d860:	andeq	lr, r3, r4, asr r2
   1d864:	andeq	lr, r3, r0, ror #4
   1d868:	mov	r3, #29
   1d86c:	mov	r2, r9
   1d870:	mov	r1, r8
   1d874:	mov	r0, fp
   1d878:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1d87c:	mov	r8, r0
   1d880:	b	18988 <_start@@Base+0x62f8>
   1d884:	mov	fp, sl
   1d888:	mov	r8, r4
   1d88c:	b	18988 <_start@@Base+0x62f8>
   1d890:	mov	fp, sl
   1d894:	mov	r8, r4
   1d898:	b	18988 <_start@@Base+0x62f8>
   1d89c:	mov	fp, sl
   1d8a0:	mov	r8, r4
   1d8a4:	b	18988 <_start@@Base+0x62f8>
   1d8a8:	mov	fp, sl
   1d8ac:	mov	r8, r4
   1d8b0:	b	18988 <_start@@Base+0x62f8>
   1d8b4:	mov	fp, sl
   1d8b8:	b	18988 <_start@@Base+0x62f8>
   1d8bc:	mov	fp, sl
   1d8c0:	b	18988 <_start@@Base+0x62f8>
   1d8c4:	mov	fp, sl
   1d8c8:	b	18988 <_start@@Base+0x62f8>
   1d8cc:	mov	fp, sl
   1d8d0:	b	18988 <_start@@Base+0x62f8>
   1d8d4:	mov	fp, sl
   1d8d8:	b	18988 <_start@@Base+0x62f8>
   1d8dc:	mov	fp, sl
   1d8e0:	b	18988 <_start@@Base+0x62f8>
   1d8e4:	mov	fp, sl
   1d8e8:	b	18988 <_start@@Base+0x62f8>
   1d8ec:	mov	fp, sl
   1d8f0:	b	18988 <_start@@Base+0x62f8>
   1d8f4:	mov	fp, sl
   1d8f8:	b	18988 <_start@@Base+0x62f8>
   1d8fc:	mov	fp, sl
   1d900:	b	18988 <_start@@Base+0x62f8>
   1d904:	mov	fp, sl
   1d908:	b	18988 <_start@@Base+0x62f8>
   1d90c:	mov	fp, sl
   1d910:	b	18988 <_start@@Base+0x62f8>
   1d914:	mov	fp, sl
   1d918:	b	18988 <_start@@Base+0x62f8>
   1d91c:	mov	fp, sl
   1d920:	b	18988 <_start@@Base+0x62f8>
   1d924:	mov	fp, sl
   1d928:	b	18988 <_start@@Base+0x62f8>
   1d92c:	mov	fp, sl
   1d930:	b	18988 <_start@@Base+0x62f8>
   1d934:	mov	fp, sl
   1d938:	b	18988 <_start@@Base+0x62f8>
   1d93c:	mov	fp, sl
   1d940:	b	18988 <_start@@Base+0x62f8>
   1d944:	mov	fp, sl
   1d948:	b	18988 <_start@@Base+0x62f8>
   1d94c:	mov	fp, sl
   1d950:	b	18988 <_start@@Base+0x62f8>
   1d954:	mov	fp, sl
   1d958:	b	18988 <_start@@Base+0x62f8>
   1d95c:	mov	fp, sl
   1d960:	b	18988 <_start@@Base+0x62f8>
   1d964:	mov	fp, sl
   1d968:	b	18988 <_start@@Base+0x62f8>
   1d96c:	mov	fp, sl
   1d970:	b	18988 <_start@@Base+0x62f8>
   1d974:	mov	fp, sl
   1d978:	b	18988 <_start@@Base+0x62f8>
   1d97c:	mov	fp, sl
   1d980:	b	18988 <_start@@Base+0x62f8>
   1d984:	mov	fp, r7
   1d988:	mov	r8, r4
   1d98c:	b	18988 <_start@@Base+0x62f8>
   1d990:	mov	fp, sl
   1d994:	b	18988 <_start@@Base+0x62f8>
   1d998:	mov	fp, sl
   1d99c:	b	18988 <_start@@Base+0x62f8>
   1d9a0:	mov	fp, sl
   1d9a4:	b	18988 <_start@@Base+0x62f8>
   1d9a8:	mov	fp, sl
   1d9ac:	b	18988 <_start@@Base+0x62f8>
   1d9b0:	mov	fp, sl
   1d9b4:	b	18988 <_start@@Base+0x62f8>
   1d9b8:	mov	fp, sl
   1d9bc:	b	18988 <_start@@Base+0x62f8>
   1d9c0:	mov	fp, sl
   1d9c4:	b	18988 <_start@@Base+0x62f8>
   1d9c8:	mov	fp, sl
   1d9cc:	b	18988 <_start@@Base+0x62f8>
   1d9d0:	mov	fp, sl
   1d9d4:	b	18988 <_start@@Base+0x62f8>
   1d9d8:	mov	fp, sl
   1d9dc:	b	18988 <_start@@Base+0x62f8>
   1d9e0:	mov	fp, sl
   1d9e4:	b	18988 <_start@@Base+0x62f8>
   1d9e8:	mov	fp, sl
   1d9ec:	b	18988 <_start@@Base+0x62f8>
   1d9f0:	mov	fp, sl
   1d9f4:	b	18988 <_start@@Base+0x62f8>
   1d9f8:	mov	fp, sl
   1d9fc:	b	18988 <_start@@Base+0x62f8>
   1da00:	mov	fp, sl
   1da04:	b	18988 <_start@@Base+0x62f8>
   1da08:	mov	fp, sl
   1da0c:	b	18988 <_start@@Base+0x62f8>
   1da10:	mov	fp, sl
   1da14:	b	18988 <_start@@Base+0x62f8>
   1da18:	mov	fp, sl
   1da1c:	b	18988 <_start@@Base+0x62f8>
   1da20:	mov	fp, sl
   1da24:	b	18988 <_start@@Base+0x62f8>
   1da28:	mov	fp, sl
   1da2c:	b	18988 <_start@@Base+0x62f8>
   1da30:	mov	fp, sl
   1da34:	b	18988 <_start@@Base+0x62f8>
   1da38:	mov	fp, sl
   1da3c:	b	18988 <_start@@Base+0x62f8>
   1da40:	mov	fp, sl
   1da44:	b	18988 <_start@@Base+0x62f8>
   1da48:	mov	fp, sl
   1da4c:	b	18988 <_start@@Base+0x62f8>
   1da50:	mov	fp, sl
   1da54:	b	18988 <_start@@Base+0x62f8>
   1da58:	mov	fp, sl
   1da5c:	b	18988 <_start@@Base+0x62f8>
   1da60:	mov	fp, sl
   1da64:	b	18988 <_start@@Base+0x62f8>
   1da68:	mov	fp, sl
   1da6c:	b	18988 <_start@@Base+0x62f8>
   1da70:	mov	fp, sl
   1da74:	b	18988 <_start@@Base+0x62f8>
   1da78:	mov	fp, sl
   1da7c:	b	18988 <_start@@Base+0x62f8>
   1da80:	mov	fp, sl
   1da84:	b	18988 <_start@@Base+0x62f8>
   1da88:	mov	fp, sl
   1da8c:	b	18988 <_start@@Base+0x62f8>
   1da90:	mov	fp, sl
   1da94:	b	18988 <_start@@Base+0x62f8>
   1da98:	mov	fp, sl
   1da9c:	b	18988 <_start@@Base+0x62f8>
   1daa0:	mov	fp, sl
   1daa4:	b	18988 <_start@@Base+0x62f8>
   1daa8:	mov	fp, sl
   1daac:	b	18988 <_start@@Base+0x62f8>
   1dab0:	mov	fp, sl
   1dab4:	b	18988 <_start@@Base+0x62f8>
   1dab8:	mov	r8, r4
   1dabc:	b	18b10 <_start@@Base+0x6480>
   1dac0:	ldr	r8, [sp, #72]	; 0x48
   1dac4:	b	19880 <_start@@Base+0x71f0>
   1dac8:	mov	r6, r5
   1dacc:	b	1a924 <_start@@Base+0x8294>
   1dad0:	mov	r6, r5
   1dad4:	b	1ab10 <_start@@Base+0x8480>
   1dad8:	mov	r7, fp
   1dadc:	b	1befc <_start@@Base+0x986c>
   1dae0:	mov	r5, r4
   1dae4:	b	1ba40 <_start@@Base+0x93b0>
   1dae8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1daec:	strd	r6, [sp, #8]
   1daf0:	strd	r8, [sp, #16]
   1daf4:	strd	sl, [sp, #24]
   1daf8:	str	lr, [sp, #32]
   1dafc:	sub	sp, sp, #332	; 0x14c
   1db00:	mov	r7, r0
   1db04:	mov	r4, r1
   1db08:	mov	r5, r2
   1db0c:	mov	r2, #0
   1db10:	ldr	r1, [sp, #368]	; 0x170
   1db14:	str	r2, [r1]
   1db18:	cmp	r3, #4
   1db1c:	ldrls	pc, [pc, r3, lsl #2]
   1db20:	b	20df0 <_start@@Base+0xe760>
   1db24:	andeq	sp, r1, r8, lsr fp
   1db28:	andeq	sp, r1, r0, lsl #23
   1db2c:	ldrdeq	sp, [r1], -r0
   1db30:	andeq	sp, r1, r8, ror #23
   1db34:	andeq	sp, r1, ip, ror #25
   1db38:	sub	r3, r5, r4
   1db3c:	cmp	r3, #3
   1db40:	ble	1db64 <_start@@Base+0xb4d4>
   1db44:	mov	r2, #4
   1db48:	movw	r1, #46184	; 0xb468
   1db4c:	movt	r1, #2
   1db50:	mov	r0, r4
   1db54:	bl	125a0 <memcmp@plt>
   1db58:	cmp	r0, #0
   1db5c:	addeq	r4, r4, #4
   1db60:	beq	1dbb0 <_start@@Base+0xb520>
   1db64:	mov	r3, #26
   1db68:	mov	r2, r5
   1db6c:	mov	r1, r4
   1db70:	mov	r0, r7
   1db74:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1db78:	mov	r4, r0
   1db7c:	b	1dbb0 <_start@@Base+0xb520>
   1db80:	ldr	r3, [sp, #368]	; 0x170
   1db84:	mov	r2, r5
   1db88:	mov	r1, r4
   1db8c:	bl	1893c <_start@@Base+0x62ac>
   1db90:	mov	r4, r0
   1db94:	ldr	r3, [r7, #24]
   1db98:	cmp	r3, #0
   1db9c:	bne	1dbb0 <_start@@Base+0xb520>
   1dba0:	ldr	r3, [sp, #368]	; 0x170
   1dba4:	ldr	r3, [r3]
   1dba8:	cmp	r3, #0
   1dbac:	beq	20e28 <_start@@Base+0xe798>
   1dbb0:	mov	r0, r4
   1dbb4:	add	sp, sp, #332	; 0x14c
   1dbb8:	ldrd	r4, [sp]
   1dbbc:	ldrd	r6, [sp, #8]
   1dbc0:	ldrd	r8, [sp, #16]
   1dbc4:	ldrd	sl, [sp, #24]
   1dbc8:	add	sp, sp, #32
   1dbcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbd0:	ldr	r3, [sp, #368]	; 0x170
   1dbd4:	mov	r2, r5
   1dbd8:	mov	r1, r4
   1dbdc:	bl	174b4 <_start@@Base+0x4e24>
   1dbe0:	mov	r4, r0
   1dbe4:	b	1db94 <_start@@Base+0xb504>
   1dbe8:	mov	r1, #0
   1dbec:	ldr	r0, [r0]
   1dbf0:	bl	23a98 <flatcc_builder_start_table@@Base>
   1dbf4:	cmp	r0, #0
   1dbf8:	beq	1dc18 <_start@@Base+0xb588>
   1dbfc:	mov	r3, #33	; 0x21
   1dc00:	mov	r2, r5
   1dc04:	mov	r1, r4
   1dc08:	mov	r0, r7
   1dc0c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1dc10:	mov	r4, r0
   1dc14:	b	1db94 <_start@@Base+0xb504>
   1dc18:	add	r3, sp, #320	; 0x140
   1dc1c:	mov	r2, r5
   1dc20:	mov	r1, r4
   1dc24:	mov	r0, r7
   1dc28:	bl	14680 <_start@@Base+0x1ff0>
   1dc2c:	mov	r4, r0
   1dc30:	ldr	r3, [sp, #320]	; 0x140
   1dc34:	cmp	r3, #0
   1dc38:	beq	1dcc4 <_start@@Base+0xb634>
   1dc3c:	mov	r9, #1
   1dc40:	mov	r8, #5
   1dc44:	mov	r6, #0
   1dc48:	mov	r1, r0
   1dc4c:	b	1dc94 <_start@@Base+0xb604>
   1dc50:	mov	r3, r8
   1dc54:	mov	r2, r5
   1dc58:	mov	r0, r7
   1dc5c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1dc60:	mov	r1, r0
   1dc64:	mov	r2, r5
   1dc68:	mov	r0, r7
   1dc6c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc70:	add	r3, sp, #320	; 0x140
   1dc74:	mov	r2, r5
   1dc78:	mov	r1, r0
   1dc7c:	mov	r0, r7
   1dc80:	bl	18020 <_start@@Base+0x5990>
   1dc84:	mov	r1, r0
   1dc88:	ldr	r3, [sp, #320]	; 0x140
   1dc8c:	cmp	r3, #0
   1dc90:	beq	1dcc0 <_start@@Base+0xb630>
   1dc94:	cmp	r5, r1
   1dc98:	beq	1dc64 <_start@@Base+0xb5d4>
   1dc9c:	ldrb	r3, [r1]
   1dca0:	cmp	r3, #34	; 0x22
   1dca4:	addeq	r1, r1, #1
   1dca8:	streq	r6, [r7, #12]
   1dcac:	beq	1dc64 <_start@@Base+0xb5d4>
   1dcb0:	cmp	r3, #46	; 0x2e
   1dcb4:	strne	r9, [r7, #12]
   1dcb8:	bne	1dc64 <_start@@Base+0xb5d4>
   1dcbc:	b	1dc50 <_start@@Base+0xb5c0>
   1dcc0:	mov	r4, r0
   1dcc4:	ldr	r3, [r7, #24]
   1dcc8:	cmp	r3, #0
   1dccc:	bne	1dbfc <_start@@Base+0xb56c>
   1dcd0:	ldr	r0, [r7]
   1dcd4:	bl	24570 <flatcc_builder_end_table@@Base>
   1dcd8:	ldr	r3, [sp, #368]	; 0x170
   1dcdc:	str	r0, [r3]
   1dce0:	cmp	r0, #0
   1dce4:	bne	1db94 <_start@@Base+0xb504>
   1dce8:	b	1dbfc <_start@@Base+0xb56c>
   1dcec:	mov	r1, #4
   1dcf0:	ldr	r0, [r0]
   1dcf4:	bl	23a98 <flatcc_builder_start_table@@Base>
   1dcf8:	cmp	r0, #0
   1dcfc:	bne	203ec <_start@@Base+0xdd5c>
   1dd00:	add	r3, sp, #296	; 0x128
   1dd04:	str	r3, [sp]
   1dd08:	mov	r3, #1
   1dd0c:	mov	r2, r5
   1dd10:	mov	r1, r4
   1dd14:	mov	r0, r7
   1dd18:	bl	2a0b0 <flatcc_json_parser_prepare_unions@@Base>
   1dd1c:	cmp	r5, r0
   1dd20:	beq	203ec <_start@@Base+0xdd5c>
   1dd24:	add	r3, sp, #292	; 0x124
   1dd28:	mov	r2, r5
   1dd2c:	mov	r1, r4
   1dd30:	mov	r0, r7
   1dd34:	bl	14680 <_start@@Base+0x1ff0>
   1dd38:	mov	r4, r0
   1dd3c:	ldr	r3, [sp, #292]	; 0x124
   1dd40:	cmp	r3, #0
   1dd44:	beq	20da0 <_start@@Base+0xe710>
   1dd48:	mov	r6, r7
   1dd4c:	mov	r7, r5
   1dd50:	b	1de88 <_start@@Base+0xb7f8>
   1dd54:	mov	r3, #5
   1dd58:	mov	r2, r7
   1dd5c:	mov	r1, r4
   1dd60:	mov	r0, r6
   1dd64:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1dd68:	mov	r4, r0
   1dd6c:	b	1deb8 <_start@@Base+0xb828>
   1dd70:	ldrb	r0, [r4, #7]
   1dd74:	mov	r1, #0
   1dd78:	ldrb	r2, [r4, #6]
   1dd7c:	orr	r2, r0, r2, lsl #8
   1dd80:	mov	r3, r1
   1dd84:	ldrb	r0, [r4, #5]
   1dd88:	orr	r2, r2, r0, lsl #16
   1dd8c:	ldrb	r0, [r4, #4]
   1dd90:	orr	r2, r2, r0, lsl #24
   1dd94:	ldrb	r0, [r4, #3]
   1dd98:	orr	r3, r3, r0
   1dd9c:	ldrb	r0, [r4, #2]
   1dda0:	orr	r3, r3, r0, lsl #8
   1dda4:	ldrb	r0, [r4, #1]
   1dda8:	orr	r3, r3, r0, lsl #16
   1ddac:	ldrb	r0, [r4]
   1ddb0:	str	r2, [sp, #24]
   1ddb4:	orr	r3, r3, r0, lsl #24
   1ddb8:	str	r3, [sp, #28]
   1ddbc:	add	r3, pc, #1004	; 0x3ec
   1ddc0:	ldrd	r2, [r3]
   1ddc4:	ldrd	r0, [sp, #24]
   1ddc8:	cmp	r1, r3
   1ddcc:	cmpeq	r0, r2
   1ddd0:	beq	1df58 <_start@@Base+0xb8c8>
   1ddd4:	ldrd	r2, [sp, #24]
   1ddd8:	bic	r1, r2, #255	; 0xff
   1dddc:	str	r1, [sp, #96]	; 0x60
   1dde0:	str	r3, [sp, #100]	; 0x64
   1dde4:	add	r3, pc, #972	; 0x3cc
   1dde8:	ldrd	r2, [r3]
   1ddec:	ldrd	r0, [sp, #96]	; 0x60
   1ddf0:	cmp	r1, r3
   1ddf4:	cmpeq	r0, r2
   1ddf8:	beq	1e020 <_start@@Base+0xb990>
   1ddfc:	ldrd	r2, [sp, #24]
   1de00:	lsr	r1, r2, #16
   1de04:	lsl	r1, r1, #16
   1de08:	str	r1, [sp, #32]
   1de0c:	str	r3, [sp, #36]	; 0x24
   1de10:	add	r3, pc, #936	; 0x3a8
   1de14:	ldrd	r2, [r3]
   1de18:	ldrd	r0, [sp, #32]
   1de1c:	cmp	r1, r3
   1de20:	cmpeq	r0, r2
   1de24:	beq	1e074 <_start@@Base+0xb9e4>
   1de28:	ldrd	r2, [sp, #24]
   1de2c:	and	r1, r2, #-16777216	; 0xff000000
   1de30:	str	r1, [sp, #136]	; 0x88
   1de34:	str	r3, [sp, #140]	; 0x8c
   1de38:	add	r3, pc, #904	; 0x388
   1de3c:	ldrd	r2, [r3]
   1de40:	ldrd	r0, [sp, #136]	; 0x88
   1de44:	cmp	r1, r3
   1de48:	cmpeq	r0, r2
   1de4c:	beq	20398 <_start@@Base+0xdd08>
   1de50:	mov	r2, r7
   1de54:	mov	r1, r4
   1de58:	mov	r0, r6
   1de5c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1de60:	mov	sl, r0
   1de64:	add	r3, sp, #292	; 0x124
   1de68:	mov	r2, r7
   1de6c:	mov	r1, sl
   1de70:	mov	r0, r6
   1de74:	bl	18020 <_start@@Base+0x5990>
   1de78:	mov	r4, r0
   1de7c:	ldr	r3, [sp, #292]	; 0x124
   1de80:	cmp	r3, #0
   1de84:	beq	20d98 <_start@@Base+0xe708>
   1de88:	cmp	r7, r4
   1de8c:	beq	1deb8 <_start@@Base+0xb828>
   1de90:	ldrb	r3, [r4]
   1de94:	cmp	r3, #34	; 0x22
   1de98:	addeq	r4, r4, #1
   1de9c:	moveq	r3, #0
   1dea0:	streq	r3, [r6, #12]
   1dea4:	beq	1deb8 <_start@@Base+0xb828>
   1dea8:	cmp	r3, #46	; 0x2e
   1deac:	movne	r3, #1
   1deb0:	strne	r3, [r6, #12]
   1deb4:	beq	1dd54 <_start@@Base+0xb6c4>
   1deb8:	sub	r3, r7, r4
   1debc:	cmp	r3, #8
   1dec0:	bhi	1dd70 <_start@@Base+0xb6e0>
   1dec4:	sub	r3, r3, #1
   1dec8:	cmp	r3, #7
   1decc:	ldrls	pc, [pc, r3, lsl #2]
   1ded0:	b	1df48 <_start@@Base+0xb8b8>
   1ded4:	andeq	sp, r1, ip, lsr pc
   1ded8:	andeq	sp, r1, r0, lsr pc
   1dedc:	andeq	sp, r1, r4, lsr #30
   1dee0:	andeq	sp, r1, r8, lsl pc
   1dee4:	andeq	sp, r1, ip, lsl #30
   1dee8:	andeq	sp, r1, r0, lsl #30
   1deec:	strdeq	sp, [r1], -r4
   1def0:	andeq	sp, r1, r0, ror sp
   1def4:	mov	r0, #0
   1def8:	mov	r1, #0
   1defc:	b	1dd78 <_start@@Base+0xb6e8>
   1df00:	mov	r2, #0
   1df04:	mov	r3, r2
   1df08:	b	1dd84 <_start@@Base+0xb6f4>
   1df0c:	mov	r2, #0
   1df10:	mov	r3, r2
   1df14:	b	1dd8c <_start@@Base+0xb6fc>
   1df18:	mov	r2, #0
   1df1c:	mov	r3, r2
   1df20:	b	1dd94 <_start@@Base+0xb704>
   1df24:	mov	r2, #0
   1df28:	mov	r3, r2
   1df2c:	b	1dd9c <_start@@Base+0xb70c>
   1df30:	mov	r2, #0
   1df34:	mov	r3, r2
   1df38:	b	1dda4 <_start@@Base+0xb714>
   1df3c:	mov	r2, #0
   1df40:	mov	r3, r2
   1df44:	b	1ddac <_start@@Base+0xb71c>
   1df48:	mov	r2, #0
   1df4c:	mov	r3, #0
   1df50:	strd	r2, [sp, #24]
   1df54:	b	1ddbc <_start@@Base+0xb72c>
   1df58:	add	r4, r4, #8
   1df5c:	mov	r1, r7
   1df60:	mov	r0, r4
   1df64:	bl	12780 <_start@@Base+0xf0>
   1df68:	mov	r3, #0
   1df6c:	str	r3, [sp, #128]	; 0x80
   1df70:	str	r1, [sp, #132]	; 0x84
   1df74:	add	r3, pc, #596	; 0x254
   1df78:	ldrd	r2, [r3]
   1df7c:	ldrd	r0, [sp, #128]	; 0x80
   1df80:	cmp	r1, r3
   1df84:	cmpeq	r0, r2
   1df88:	beq	1dfa4 <_start@@Base+0xb914>
   1df8c:	mov	r2, r7
   1df90:	mov	r1, r4
   1df94:	mov	r0, r6
   1df98:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1df9c:	mov	sl, r0
   1dfa0:	b	1de64 <_start@@Base+0xb7d4>
   1dfa4:	mov	r3, #4
   1dfa8:	mov	r2, r7
   1dfac:	mov	r1, r4
   1dfb0:	mov	r0, r6
   1dfb4:	bl	14594 <_start@@Base+0x1f04>
   1dfb8:	mov	r1, r0
   1dfbc:	cmp	r4, r0
   1dfc0:	beq	1e00c <_start@@Base+0xb97c>
   1dfc4:	movw	r3, #10356	; 0x2874
   1dfc8:	movt	r3, #1
   1dfcc:	str	r3, [sp, #16]
   1dfd0:	movw	r3, #56040	; 0xdae8
   1dfd4:	movt	r3, #1
   1dfd8:	str	r3, [sp, #12]
   1dfdc:	ldr	r3, [pc, #508]	; 1e1e0 <_start@@Base+0xbb50>
   1dfe0:	str	r3, [sp, #8]
   1dfe4:	ldr	r3, [sp, #296]	; 0x128
   1dfe8:	str	r3, [sp, #4]
   1dfec:	mov	r3, #3
   1dff0:	str	r3, [sp]
   1dff4:	mov	r3, #0
   1dff8:	mov	r2, r7
   1dffc:	mov	r0, r6
   1e000:	bl	2a644 <flatcc_json_parser_union_type_vector@@Base>
   1e004:	mov	sl, r0
   1e008:	b	1de64 <_start@@Base+0xb7d4>
   1e00c:	mov	r2, r7
   1e010:	mov	r0, r6
   1e014:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1e018:	mov	sl, r0
   1e01c:	b	1de64 <_start@@Base+0xb7d4>
   1e020:	mov	r3, #7
   1e024:	mov	r2, r7
   1e028:	mov	r1, r4
   1e02c:	mov	r0, r6
   1e030:	bl	14594 <_start@@Base+0x1f04>
   1e034:	cmp	r0, r4
   1e038:	beq	1de50 <_start@@Base+0xb7c0>
   1e03c:	movw	r3, #56040	; 0xdae8
   1e040:	movt	r3, #1
   1e044:	str	r3, [sp, #8]
   1e048:	ldr	r3, [sp, #296]	; 0x128
   1e04c:	str	r3, [sp, #4]
   1e050:	mov	r3, #3
   1e054:	str	r3, [sp]
   1e058:	mov	r3, #0
   1e05c:	mov	r2, r7
   1e060:	mov	r1, r0
   1e064:	mov	r0, r6
   1e068:	bl	2a558 <flatcc_json_parser_union_vector@@Base>
   1e06c:	mov	sl, r0
   1e070:	b	1de64 <_start@@Base+0xb7d4>
   1e074:	mov	r3, #6
   1e078:	mov	r2, r7
   1e07c:	mov	r1, r4
   1e080:	mov	r0, r6
   1e084:	bl	14594 <_start@@Base+0x1f04>
   1e088:	mov	sl, r0
   1e08c:	cmp	r0, r4
   1e090:	beq	20380 <_start@@Base+0xdcf0>
   1e094:	mov	r1, #3
   1e098:	ldr	r0, [r6]
   1e09c:	bl	23a98 <flatcc_builder_start_table@@Base>
   1e0a0:	cmp	r0, #0
   1e0a4:	beq	1e0b8 <_start@@Base+0xba28>
   1e0a8:	mov	r5, r7
   1e0ac:	mov	r7, r6
   1e0b0:	mov	r6, sl
   1e0b4:	b	1ed30 <_start@@Base+0xc6a0>
   1e0b8:	add	r3, sp, #300	; 0x12c
   1e0bc:	mov	r2, r7
   1e0c0:	mov	r1, sl
   1e0c4:	mov	r0, r6
   1e0c8:	bl	14680 <_start@@Base+0x1ff0>
   1e0cc:	mov	sl, r0
   1e0d0:	b	20174 <_start@@Base+0xdae4>
   1e0d4:	mov	r3, #5
   1e0d8:	mov	r2, r7
   1e0dc:	mov	r1, sl
   1e0e0:	mov	r0, r6
   1e0e4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1e0e8:	mov	sl, r0
   1e0ec:	b	201b0 <_start@@Base+0xdb20>
   1e0f0:	ldrb	r0, [sl, #7]
   1e0f4:	mov	r1, #0
   1e0f8:	ldrb	r2, [sl, #6]
   1e0fc:	orr	r2, r0, r2, lsl #8
   1e100:	mov	r3, r1
   1e104:	ldrb	r0, [sl, #5]
   1e108:	orr	r2, r2, r0, lsl #16
   1e10c:	ldrb	r0, [sl, #4]
   1e110:	orr	r2, r2, r0, lsl #24
   1e114:	ldrb	r0, [sl, #3]
   1e118:	orr	r3, r3, r0
   1e11c:	ldrb	r0, [sl, #2]
   1e120:	orr	r3, r3, r0, lsl #8
   1e124:	ldrb	r0, [sl, #1]
   1e128:	orr	r3, r3, r0, lsl #16
   1e12c:	ldrb	r0, [sl]
   1e130:	str	r2, [sp, #64]	; 0x40
   1e134:	orr	r3, r3, r0, lsl #24
   1e138:	str	r3, [sp, #68]	; 0x44
   1e13c:	ldrd	r2, [sp, #64]	; 0x40
   1e140:	add	r1, pc, #144	; 0x90
   1e144:	ldrd	r0, [r1]
   1e148:	cmp	r3, r1
   1e14c:	cmpeq	r2, r0
   1e150:	bne	200e8 <_start@@Base+0xda58>
   1e154:	add	ip, sl, #8
   1e158:	sub	r3, r7, ip
   1e15c:	cmp	r3, #8
   1e160:	bhi	1e230 <_start@@Base+0xbba0>
   1e164:	sub	r3, r3, #1
   1e168:	cmp	r3, #7
   1e16c:	ldrls	pc, [pc, r3, lsl #2]
   1e170:	b	1e328 <_start@@Base+0xbc98>
   1e174:	andeq	lr, r1, ip, lsl r3
   1e178:	andeq	lr, r1, r0, lsl r3
   1e17c:	andeq	lr, r1, r4, lsl #6
   1e180:	strdeq	lr, [r1], -r8
   1e184:	andeq	lr, r1, ip, ror #5
   1e188:	andeq	lr, r1, r0, ror #5
   1e18c:	ldrdeq	lr, [r1], -r4
   1e190:	andeq	lr, r1, r0, lsr r2
   1e194:	mov	r0, #0
   1e198:	mov	r1, #0
   1e19c:	b	1e0f8 <_start@@Base+0xba68>
   1e1a0:	mov	r2, #0
   1e1a4:	mov	r3, r2
   1e1a8:	b	1e104 <_start@@Base+0xba74>
   1e1ac:	nop	{0}
   1e1b0:	cmnvs	lr, pc, asr r9
   1e1b4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1e1b8:	cmnvs	lr, r0, lsl #18
   1e1bc:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1e1c0:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1e1c4:	rsbsvc	r6, r2, r6, ror #10
   1e1c8:	strvs	r0, [r0, #-0]
   1e1cc:	stclvs	6, cr7, [pc, #-420]!	; 1e030 <_start@@Base+0xb9a0>
   1e1d0:	andeq	r0, r0, r0
   1e1d4:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1e1d8:	bvs	1cf9f98 <__bss_end__@@Base+0x1cbbc44>
   1e1dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e1e0:	andeq	lr, r3, ip, ror #4
   1e1e4:	mov	r2, #0
   1e1e8:	mov	r3, r2
   1e1ec:	b	1e10c <_start@@Base+0xba7c>
   1e1f0:	mov	r2, #0
   1e1f4:	mov	r3, r2
   1e1f8:	b	1e114 <_start@@Base+0xba84>
   1e1fc:	mov	r2, #0
   1e200:	mov	r3, r2
   1e204:	b	1e11c <_start@@Base+0xba8c>
   1e208:	mov	r2, #0
   1e20c:	mov	r3, r2
   1e210:	b	1e124 <_start@@Base+0xba94>
   1e214:	mov	r2, #0
   1e218:	mov	r3, r2
   1e21c:	b	1e12c <_start@@Base+0xba9c>
   1e220:	mov	r2, #0
   1e224:	mov	r3, #0
   1e228:	strd	r2, [sp, #64]	; 0x40
   1e22c:	b	1e13c <_start@@Base+0xbaac>
   1e230:	ldrb	r0, [sl, #15]
   1e234:	mov	r1, #0
   1e238:	ldrb	r2, [sl, #14]
   1e23c:	orr	r2, r0, r2, lsl #8
   1e240:	mov	r3, r1
   1e244:	ldrb	r4, [sl, #13]
   1e248:	orr	r2, r2, r4, lsl #16
   1e24c:	ldrb	r4, [sl, #12]
   1e250:	orr	r2, r2, r4, lsl #24
   1e254:	ldrb	r4, [sl, #11]
   1e258:	orr	r3, r3, r4
   1e25c:	ldrb	r4, [sl, #10]
   1e260:	orr	r3, r3, r4, lsl #8
   1e264:	ldrb	r0, [sl, #9]
   1e268:	orr	r3, r3, r0, lsl #16
   1e26c:	ldrb	r0, [sl, #8]
   1e270:	str	r2, [sp, #72]	; 0x48
   1e274:	orr	r3, r3, r0, lsl #24
   1e278:	str	r3, [sp, #76]	; 0x4c
   1e27c:	ldrd	r2, [sp, #72]	; 0x48
   1e280:	add	r1, pc, #904	; 0x388
   1e284:	ldrd	r0, [r1]
   1e288:	cmp	r3, r1
   1e28c:	cmpeq	r2, r0
   1e290:	bne	200d0 <_start@@Base+0xda40>
   1e294:	add	r4, sl, #16
   1e298:	sub	r3, r7, r4
   1e29c:	cmp	r3, #8
   1e2a0:	bhi	1e338 <_start@@Base+0xbca8>
   1e2a4:	sub	r3, r3, #1
   1e2a8:	cmp	r3, #7
   1e2ac:	ldrls	pc, [pc, r3, lsl #2]
   1e2b0:	b	1e44c <_start@@Base+0xbdbc>
   1e2b4:	andeq	lr, r1, r0, asr #8
   1e2b8:	andeq	lr, r1, r4, lsr r4
   1e2bc:	andeq	lr, r1, r8, lsr #8
   1e2c0:	andeq	lr, r1, ip, lsl r4
   1e2c4:	andeq	lr, r1, r0, lsl r4
   1e2c8:	andeq	lr, r1, r4, lsl #8
   1e2cc:	strdeq	lr, [r1], -r8
   1e2d0:	andeq	lr, r1, r8, lsr r3
   1e2d4:	mov	r0, #0
   1e2d8:	mov	r1, #0
   1e2dc:	b	1e238 <_start@@Base+0xbba8>
   1e2e0:	mov	r2, #0
   1e2e4:	mov	r3, r2
   1e2e8:	b	1e244 <_start@@Base+0xbbb4>
   1e2ec:	mov	r2, #0
   1e2f0:	mov	r3, r2
   1e2f4:	b	1e24c <_start@@Base+0xbbbc>
   1e2f8:	mov	r2, #0
   1e2fc:	mov	r3, r2
   1e300:	b	1e254 <_start@@Base+0xbbc4>
   1e304:	mov	r2, #0
   1e308:	mov	r3, r2
   1e30c:	b	1e25c <_start@@Base+0xbbcc>
   1e310:	mov	r2, #0
   1e314:	mov	r3, r2
   1e318:	b	1e264 <_start@@Base+0xbbd4>
   1e31c:	mov	r2, #0
   1e320:	mov	r3, r2
   1e324:	b	1e26c <_start@@Base+0xbbdc>
   1e328:	mov	r2, #0
   1e32c:	mov	r3, #0
   1e330:	strd	r2, [sp, #72]	; 0x48
   1e334:	b	1e27c <_start@@Base+0xbbec>
   1e338:	ldrb	r0, [sl, #23]
   1e33c:	mov	r1, #0
   1e340:	ldrb	r2, [sl, #22]
   1e344:	orr	r3, r0, r2, lsl #8
   1e348:	mov	r2, r1
   1e34c:	ldrb	r0, [sl, #21]
   1e350:	orr	r3, r3, r0, lsl #16
   1e354:	ldrb	r0, [sl, #20]
   1e358:	orr	r3, r3, r0, lsl #24
   1e35c:	ldrb	r0, [sl, #19]
   1e360:	orr	r2, r2, r0
   1e364:	ldrb	r0, [sl, #18]
   1e368:	orr	r2, r2, r0, lsl #8
   1e36c:	ldrb	r0, [sl, #17]
   1e370:	orr	r2, r2, r0, lsl #16
   1e374:	ldrb	r0, [sl, #16]
   1e378:	orr	r2, r2, r0, lsl #24
   1e37c:	lsr	r1, r3, #16
   1e380:	lsl	r1, r1, #16
   1e384:	str	r1, [sp, #40]	; 0x28
   1e388:	str	r2, [sp, #44]	; 0x2c
   1e38c:	add	r1, pc, #644	; 0x284
   1e390:	ldrd	r0, [r1]
   1e394:	ldrd	sl, [sp, #40]	; 0x28
   1e398:	cmp	fp, r1
   1e39c:	cmpeq	sl, r0
   1e3a0:	beq	1e458 <_start@@Base+0xbdc8>
   1e3a4:	and	r3, r3, #-16777216	; 0xff000000
   1e3a8:	str	r3, [sp, #144]	; 0x90
   1e3ac:	str	r2, [sp, #148]	; 0x94
   1e3b0:	add	r3, pc, #616	; 0x268
   1e3b4:	ldrd	r2, [r3]
   1e3b8:	ldrd	r0, [sp, #144]	; 0x90
   1e3bc:	cmp	r1, r3
   1e3c0:	cmpeq	r0, r2
   1e3c4:	beq	1ecd8 <_start@@Base+0xc648>
   1e3c8:	add	r3, pc, #600	; 0x258
   1e3cc:	ldrd	r2, [r3]
   1e3d0:	ldrd	r0, [sp, #40]	; 0x28
   1e3d4:	cmp	r1, r3
   1e3d8:	cmpeq	r0, r2
   1e3dc:	beq	1f884 <_start@@Base+0xd1f4>
   1e3e0:	mov	r2, r7
   1e3e4:	mov	r1, r4
   1e3e8:	mov	r0, r6
   1e3ec:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1e3f0:	mov	sl, r0
   1e3f4:	b	200fc <_start@@Base+0xda6c>
   1e3f8:	mov	r0, #0
   1e3fc:	mov	r1, #0
   1e400:	b	1e340 <_start@@Base+0xbcb0>
   1e404:	mov	r3, #0
   1e408:	mov	r2, r3
   1e40c:	b	1e34c <_start@@Base+0xbcbc>
   1e410:	mov	r3, #0
   1e414:	mov	r2, r3
   1e418:	b	1e354 <_start@@Base+0xbcc4>
   1e41c:	mov	r3, #0
   1e420:	mov	r2, r3
   1e424:	b	1e35c <_start@@Base+0xbccc>
   1e428:	mov	r3, #0
   1e42c:	mov	r2, r3
   1e430:	b	1e364 <_start@@Base+0xbcd4>
   1e434:	mov	r3, #0
   1e438:	mov	r2, r3
   1e43c:	b	1e36c <_start@@Base+0xbcdc>
   1e440:	mov	r3, #0
   1e444:	mov	r2, r3
   1e448:	b	1e374 <_start@@Base+0xbce4>
   1e44c:	mov	r3, #0
   1e450:	mov	r2, r3
   1e454:	b	1e37c <_start@@Base+0xbcec>
   1e458:	mov	r3, #6
   1e45c:	mov	r2, r7
   1e460:	mov	r1, r4
   1e464:	mov	r0, r6
   1e468:	bl	14594 <_start@@Base+0x1f04>
   1e46c:	mov	sl, r0
   1e470:	cmp	r4, r0
   1e474:	beq	200c8 <_start@@Base+0xda38>
   1e478:	mov	r1, #2
   1e47c:	ldr	r0, [r6]
   1e480:	bl	23a98 <flatcc_builder_start_table@@Base>
   1e484:	cmp	r0, #0
   1e488:	beq	1e4b4 <_start@@Base+0xbe24>
   1e48c:	mov	r5, r7
   1e490:	mov	r7, r6
   1e494:	mov	r6, sl
   1e498:	mov	r3, #33	; 0x21
   1e49c:	mov	r2, r5
   1e4a0:	mov	r1, r6
   1e4a4:	mov	r0, r7
   1e4a8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1e4ac:	mov	r6, r0
   1e4b0:	b	1ed30 <_start@@Base+0xc6a0>
   1e4b4:	add	r3, sp, #304	; 0x130
   1e4b8:	mov	r2, r7
   1e4bc:	mov	r1, sl
   1e4c0:	mov	r0, r6
   1e4c4:	bl	14680 <_start@@Base+0x1ff0>
   1e4c8:	mov	sl, r0
   1e4cc:	mov	fp, #0
   1e4d0:	movw	r3, #57464	; 0xe078
   1e4d4:	movt	r3, #3
   1e4d8:	str	r3, [sp, #272]	; 0x110
   1e4dc:	add	r3, r3, #528	; 0x210
   1e4e0:	str	r3, [sp, #160]	; 0xa0
   1e4e4:	b	1eae0 <_start@@Base+0xc450>
   1e4e8:	mov	r3, #5
   1e4ec:	mov	r2, r7
   1e4f0:	mov	r1, sl
   1e4f4:	mov	r0, r6
   1e4f8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1e4fc:	mov	sl, r0
   1e500:	b	1eb1c <_start@@Base+0xc48c>
   1e504:	ldrb	r0, [sl, #7]
   1e508:	mov	r1, #0
   1e50c:	ldrb	r2, [sl, #6]
   1e510:	orr	r2, r0, r2, lsl #8
   1e514:	mov	r3, r1
   1e518:	ldrb	r0, [sl, #5]
   1e51c:	orr	r2, r2, r0, lsl #16
   1e520:	ldrb	r0, [sl, #4]
   1e524:	orr	r2, r2, r0, lsl #24
   1e528:	ldrb	r0, [sl, #3]
   1e52c:	orr	r3, r3, r0
   1e530:	ldrb	r0, [sl, #2]
   1e534:	orr	r3, r3, r0, lsl #8
   1e538:	ldrb	r0, [sl, #1]
   1e53c:	orr	r3, r3, r0, lsl #16
   1e540:	ldrb	r0, [sl]
   1e544:	str	r2, [sp, #80]	; 0x50
   1e548:	orr	r3, r3, r0, lsl #24
   1e54c:	str	r3, [sp, #84]	; 0x54
   1e550:	ldrd	r2, [sp, #80]	; 0x50
   1e554:	add	r1, pc, #212	; 0xd4
   1e558:	ldrd	r0, [r1]
   1e55c:	cmp	r3, r1
   1e560:	cmpeq	r2, r0
   1e564:	bne	1ea54 <_start@@Base+0xc3c4>
   1e568:	add	r4, sl, #8
   1e56c:	sub	r3, r7, r4
   1e570:	cmp	r3, #8
   1e574:	bhi	1e648 <_start@@Base+0xbfb8>
   1e578:	sub	r3, r3, #1
   1e57c:	cmp	r3, #7
   1e580:	ldrls	pc, [pc, r3, lsl #2]
   1e584:	b	1e740 <_start@@Base+0xc0b0>
   1e588:	andeq	lr, r1, r4, lsr r7
   1e58c:	andeq	lr, r1, r8, lsr #14
   1e590:	andeq	lr, r1, ip, lsl r7
   1e594:	andeq	lr, r1, r0, lsl r7
   1e598:	andeq	lr, r1, r4, lsl #14
   1e59c:	strdeq	lr, [r1], -r8
   1e5a0:	andeq	lr, r1, ip, ror #13
   1e5a4:	andeq	lr, r1, r8, asr #12
   1e5a8:	mov	r0, #0
   1e5ac:	mov	r1, fp
   1e5b0:	b	1e50c <_start@@Base+0xbe7c>
   1e5b4:	mov	r2, #0
   1e5b8:	mov	r3, r2
   1e5bc:	b	1e518 <_start@@Base+0xbe88>
   1e5c0:	mov	r2, #0
   1e5c4:	mov	r3, r2
   1e5c8:	b	1e520 <_start@@Base+0xbe90>
   1e5cc:	mov	r2, #0
   1e5d0:	mov	r3, r2
   1e5d4:	b	1e528 <_start@@Base+0xbe98>
   1e5d8:	mov	r2, #0
   1e5dc:	mov	r3, r2
   1e5e0:	b	1e530 <_start@@Base+0xbea0>
   1e5e4:	mov	r2, #0
   1e5e8:	mov	r3, r2
   1e5ec:	b	1e538 <_start@@Base+0xbea8>
   1e5f0:	mov	r2, #0
   1e5f4:	mov	r3, r2
   1e5f8:	b	1e540 <_start@@Base+0xbeb0>
   1e5fc:	mov	r2, #0
   1e600:	mov	r3, #0
   1e604:	strd	r2, [sp, #80]	; 0x50
   1e608:	b	1e550 <_start@@Base+0xbec0>
   1e60c:	nop	{0}
   1e610:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1e614:	rsbsvc	r6, r2, r6, ror #10
   1e618:	ldrvs	r0, [r2, -r0]!
   1e61c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1e620:	strvs	r0, [r0, -r0]
   1e624:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1e628:	ldrvs	r0, [r3, -r0]!
   1e62c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1e630:	svcpl	0x00626262
   1e634:	cmnvs	r1, r1, ror #2
   1e638:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1e63c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1e640:	cmnvs	r2, pc, asr r4
   1e644:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1e648:	ldrb	r0, [sl, #15]
   1e64c:	mov	r1, #0
   1e650:	ldrb	r2, [sl, #14]
   1e654:	orr	r2, r0, r2, lsl #8
   1e658:	mov	r3, r1
   1e65c:	ldrb	r0, [sl, #13]
   1e660:	orr	r2, r2, r0, lsl #16
   1e664:	ldrb	r0, [sl, #12]
   1e668:	orr	r2, r2, r0, lsl #24
   1e66c:	ldrb	r0, [sl, #11]
   1e670:	orr	r3, r3, r0
   1e674:	ldrb	r0, [sl, #10]
   1e678:	orr	r3, r3, r0, lsl #8
   1e67c:	ldrb	r0, [sl, #9]
   1e680:	orr	r3, r3, r0, lsl #16
   1e684:	ldrb	r0, [sl, #8]
   1e688:	str	r2, [sp, #56]	; 0x38
   1e68c:	orr	r3, r3, r0, lsl #24
   1e690:	str	r3, [sp, #60]	; 0x3c
   1e694:	ldrd	r2, [sp, #56]	; 0x38
   1e698:	bic	r1, r2, #255	; 0xff
   1e69c:	str	r1, [sp, #104]	; 0x68
   1e6a0:	str	r3, [sp, #108]	; 0x6c
   1e6a4:	ldrd	r2, [sp, #104]	; 0x68
   1e6a8:	sub	r1, pc, #120	; 0x78
   1e6ac:	ldrd	r0, [r1]
   1e6b0:	cmp	r3, r1
   1e6b4:	cmpeq	r2, r0
   1e6b8:	beq	1e750 <_start@@Base+0xc0c0>
   1e6bc:	ldrd	r2, [sp, #56]	; 0x38
   1e6c0:	sub	r1, pc, #136	; 0x88
   1e6c4:	ldrd	r0, [r1]
   1e6c8:	cmp	r3, r1
   1e6cc:	cmpeq	r2, r0
   1e6d0:	beq	1e8e8 <_start@@Base+0xc258>
   1e6d4:	mov	r2, r7
   1e6d8:	mov	r1, r4
   1e6dc:	mov	r0, r6
   1e6e0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1e6e4:	mov	sl, r0
   1e6e8:	b	1ea68 <_start@@Base+0xc3d8>
   1e6ec:	mov	r0, #0
   1e6f0:	mov	r1, fp
   1e6f4:	b	1e650 <_start@@Base+0xbfc0>
   1e6f8:	mov	r2, #0
   1e6fc:	mov	r3, r2
   1e700:	b	1e65c <_start@@Base+0xbfcc>
   1e704:	mov	r2, #0
   1e708:	mov	r3, r2
   1e70c:	b	1e664 <_start@@Base+0xbfd4>
   1e710:	mov	r2, #0
   1e714:	mov	r3, r2
   1e718:	b	1e66c <_start@@Base+0xbfdc>
   1e71c:	mov	r2, #0
   1e720:	mov	r3, r2
   1e724:	b	1e674 <_start@@Base+0xbfe4>
   1e728:	mov	r2, #0
   1e72c:	mov	r3, r2
   1e730:	b	1e67c <_start@@Base+0xbfec>
   1e734:	mov	r2, #0
   1e738:	mov	r3, r2
   1e73c:	b	1e684 <_start@@Base+0xbff4>
   1e740:	mov	r2, #0
   1e744:	mov	r3, #0
   1e748:	strd	r2, [sp, #56]	; 0x38
   1e74c:	b	1e694 <_start@@Base+0xc004>
   1e750:	mov	r3, #7
   1e754:	mov	r2, r7
   1e758:	mov	r1, r4
   1e75c:	mov	r0, r6
   1e760:	bl	14594 <_start@@Base+0x1f04>
   1e764:	mov	r5, r0
   1e768:	cmp	r4, r0
   1e76c:	beq	1e8d0 <_start@@Base+0xc240>
   1e770:	mov	r3, #0
   1e774:	str	r3, [sp, #312]	; 0x138
   1e778:	str	fp, [sp, #316]	; 0x13c
   1e77c:	str	r3, [sp, #320]	; 0x140
   1e780:	str	fp, [sp, #324]	; 0x144
   1e784:	str	r3, [sp, #308]	; 0x134
   1e788:	cmp	r7, r0
   1e78c:	beq	20e64 <_start@@Base+0xe7d4>
   1e790:	add	r3, sp, #320	; 0x140
   1e794:	str	r3, [sp]
   1e798:	add	r3, sp, #308	; 0x134
   1e79c:	mov	r2, r7
   1e7a0:	mov	r1, r0
   1e7a4:	mov	r0, r6
   1e7a8:	bl	29968 <flatcc_json_parser_integer@@Base>
   1e7ac:	mov	sl, r0
   1e7b0:	cmp	r5, r0
   1e7b4:	bne	1e7fc <_start@@Base+0xc16c>
   1e7b8:	mov	r4, sl
   1e7bc:	add	r3, sp, #312	; 0x138
   1e7c0:	str	r3, [sp]
   1e7c4:	ldr	r3, [sp, #272]	; 0x110
   1e7c8:	add	r3, r3, #516	; 0x204
   1e7cc:	mov	r2, r7
   1e7d0:	mov	r1, r4
   1e7d4:	mov	r0, r6
   1e7d8:	bl	15e6c <_start@@Base+0x37dc>
   1e7dc:	mov	sl, r0
   1e7e0:	cmp	r7, r0
   1e7e4:	cmpne	r4, r0
   1e7e8:	bne	1e850 <_start@@Base+0xc1c0>
   1e7ec:	mov	r5, r7
   1e7f0:	mov	r7, r6
   1e7f4:	mov	r6, r0
   1e7f8:	b	1e498 <_start@@Base+0xbe08>
   1e7fc:	add	r3, sp, #320	; 0x140
   1e800:	ldrd	r2, [r3]
   1e804:	ldr	r1, [sp, #308]	; 0x134
   1e808:	cmp	r1, #0
   1e80c:	beq	1e898 <_start@@Base+0xc208>
   1e810:	cmp	r3, #-2147483648	; 0x80000000
   1e814:	cmpeq	r2, #0
   1e818:	bhi	1e830 <_start@@Base+0xc1a0>
   1e81c:	rsbs	r2, r2, #0
   1e820:	rsc	r3, r3, #0
   1e824:	add	r1, sp, #312	; 0x138
   1e828:	strd	r2, [r1]
   1e82c:	b	1e850 <_start@@Base+0xc1c0>
   1e830:	mov	r3, #8
   1e834:	mov	r2, r7
   1e838:	mov	r1, r0
   1e83c:	mov	r0, r6
   1e840:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1e844:	mov	sl, r0
   1e848:	cmp	r5, sl
   1e84c:	beq	1e8c8 <_start@@Base+0xc238>
   1e850:	add	r3, sp, #312	; 0x138
   1e854:	ldrd	r2, [r3]
   1e858:	orrs	r3, r2, r3
   1e85c:	bne	1e86c <_start@@Base+0xc1dc>
   1e860:	ldr	r3, [r6, #8]
   1e864:	tst	r3, #2
   1e868:	beq	1ea68 <_start@@Base+0xc3d8>
   1e86c:	mov	r3, #8
   1e870:	mov	r2, r3
   1e874:	mov	r1, #0
   1e878:	ldr	r0, [r6]
   1e87c:	bl	2565c <flatcc_builder_table_add@@Base>
   1e880:	cmp	r0, #0
   1e884:	beq	1ecb8 <_start@@Base+0xc628>
   1e888:	add	r3, sp, #312	; 0x138
   1e88c:	ldrd	r2, [r3]
   1e890:	strd	r2, [r0]
   1e894:	b	1ea68 <_start@@Base+0xc3d8>
   1e898:	cmp	r2, #0
   1e89c:	sbcs	r1, r3, #0
   1e8a0:	addge	r1, sp, #312	; 0x138
   1e8a4:	strdge	r2, [r1]
   1e8a8:	bge	1e850 <_start@@Base+0xc1c0>
   1e8ac:	mov	r3, #7
   1e8b0:	mov	r2, r7
   1e8b4:	mov	r1, r0
   1e8b8:	mov	r0, r6
   1e8bc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1e8c0:	mov	sl, r0
   1e8c4:	b	1e848 <_start@@Base+0xc1b8>
   1e8c8:	mov	r4, sl
   1e8cc:	b	1e7bc <_start@@Base+0xc12c>
   1e8d0:	mov	r2, r7
   1e8d4:	mov	r1, r0
   1e8d8:	mov	r0, r6
   1e8dc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1e8e0:	mov	sl, r0
   1e8e4:	b	1ea68 <_start@@Base+0xc3d8>
   1e8e8:	mov	r3, #8
   1e8ec:	mov	r2, r7
   1e8f0:	mov	r1, r4
   1e8f4:	mov	r0, r6
   1e8f8:	bl	14594 <_start@@Base+0x1f04>
   1e8fc:	mov	r5, r0
   1e900:	cmp	r4, r0
   1e904:	beq	1ea3c <_start@@Base+0xc3ac>
   1e908:	mov	r3, #0
   1e90c:	str	r3, [sp, #308]	; 0x134
   1e910:	str	r3, [sp, #320]	; 0x140
   1e914:	str	fp, [sp, #324]	; 0x144
   1e918:	str	r3, [sp, #312]	; 0x138
   1e91c:	cmp	r7, r0
   1e920:	beq	20e6c <_start@@Base+0xe7dc>
   1e924:	add	r3, sp, #320	; 0x140
   1e928:	str	r3, [sp]
   1e92c:	add	r3, sp, #312	; 0x138
   1e930:	mov	r2, r7
   1e934:	mov	r1, r0
   1e938:	mov	r0, r6
   1e93c:	bl	29968 <flatcc_json_parser_integer@@Base>
   1e940:	mov	r4, r0
   1e944:	cmp	r5, r0
   1e948:	bne	1e988 <_start@@Base+0xc2f8>
   1e94c:	add	r3, sp, #308	; 0x134
   1e950:	str	r3, [sp]
   1e954:	ldr	r3, [sp, #160]	; 0xa0
   1e958:	mov	r2, r7
   1e95c:	mov	r1, r4
   1e960:	mov	r0, r6
   1e964:	bl	15548 <_start@@Base+0x2eb8>
   1e968:	mov	sl, r0
   1e96c:	cmp	r7, r0
   1e970:	cmpne	r0, r4
   1e974:	bne	1e9f4 <_start@@Base+0xc364>
   1e978:	mov	r5, r7
   1e97c:	mov	r7, r6
   1e980:	mov	r6, r0
   1e984:	b	1e498 <_start@@Base+0xbe08>
   1e988:	ldr	r3, [sp, #312]	; 0x138
   1e98c:	cmp	r3, #0
   1e990:	bne	1e9d4 <_start@@Base+0xc344>
   1e994:	add	r3, sp, #320	; 0x140
   1e998:	ldrd	r2, [r3]
   1e99c:	mvn	r0, #0
   1e9a0:	mov	r1, #0
   1e9a4:	cmp	r3, r1
   1e9a8:	cmpeq	r2, r0
   1e9ac:	strls	r2, [sp, #308]	; 0x134
   1e9b0:	movls	sl, r4
   1e9b4:	bls	1e9f4 <_start@@Base+0xc364>
   1e9b8:	mov	r3, #7
   1e9bc:	mov	r2, r7
   1e9c0:	mov	r1, r4
   1e9c4:	mov	r0, r6
   1e9c8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1e9cc:	mov	sl, r0
   1e9d0:	b	1e9ec <_start@@Base+0xc35c>
   1e9d4:	mov	r3, #8
   1e9d8:	mov	r2, r7
   1e9dc:	mov	r1, r0
   1e9e0:	mov	r0, r6
   1e9e4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1e9e8:	mov	sl, r0
   1e9ec:	cmp	r5, sl
   1e9f0:	beq	1ea34 <_start@@Base+0xc3a4>
   1e9f4:	ldr	r3, [sp, #308]	; 0x134
   1e9f8:	cmp	r3, #0
   1e9fc:	bne	1ea0c <_start@@Base+0xc37c>
   1ea00:	ldr	r3, [r6, #8]
   1ea04:	tst	r3, #2
   1ea08:	beq	1ea68 <_start@@Base+0xc3d8>
   1ea0c:	mov	r3, #4
   1ea10:	mov	r2, r3
   1ea14:	mov	r1, #1
   1ea18:	ldr	r0, [r6]
   1ea1c:	bl	2565c <flatcc_builder_table_add@@Base>
   1ea20:	cmp	r0, #0
   1ea24:	beq	1ecc8 <_start@@Base+0xc638>
   1ea28:	ldr	r3, [sp, #308]	; 0x134
   1ea2c:	str	r3, [r0]
   1ea30:	b	1ea68 <_start@@Base+0xc3d8>
   1ea34:	mov	r4, sl
   1ea38:	b	1e94c <_start@@Base+0xc2bc>
   1ea3c:	mov	r2, r7
   1ea40:	mov	r1, r0
   1ea44:	mov	r0, r6
   1ea48:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea4c:	mov	sl, r0
   1ea50:	b	1ea68 <_start@@Base+0xc3d8>
   1ea54:	mov	r2, r7
   1ea58:	mov	r1, sl
   1ea5c:	mov	r0, r6
   1ea60:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea64:	mov	sl, r0
   1ea68:	sub	r3, r7, sl
   1ea6c:	cmp	r3, #1
   1ea70:	ble	1ea84 <_start@@Base+0xc3f4>
   1ea74:	ldrb	r3, [sl]
   1ea78:	cmp	r3, #32
   1ea7c:	bhi	1ea98 <_start@@Base+0xc408>
   1ea80:	beq	1eb58 <_start@@Base+0xc4c8>
   1ea84:	mov	r2, r7
   1ea88:	mov	r1, sl
   1ea8c:	mov	r0, r6
   1ea90:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1ea94:	mov	sl, r0
   1ea98:	cmp	r7, sl
   1ea9c:	moveq	r3, #0
   1eaa0:	streq	r3, [sp, #304]	; 0x130
   1eaa4:	beq	1eae0 <_start@@Base+0xc450>
   1eaa8:	ldrb	r3, [sl]
   1eaac:	cmp	r3, #44	; 0x2c
   1eab0:	beq	1ebb8 <_start@@Base+0xc528>
   1eab4:	mov	r3, #0
   1eab8:	str	r3, [sp, #304]	; 0x130
   1eabc:	ldrb	r3, [sl]
   1eac0:	cmp	r3, #125	; 0x7d
   1eac4:	beq	1eb6c <_start@@Base+0xc4dc>
   1eac8:	mov	r3, #10
   1eacc:	mov	r2, r7
   1ead0:	mov	r1, sl
   1ead4:	mov	r0, r6
   1ead8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1eadc:	mov	sl, r0
   1eae0:	ldr	r3, [sp, #304]	; 0x130
   1eae4:	cmp	r3, #0
   1eae8:	beq	1ec60 <_start@@Base+0xc5d0>
   1eaec:	cmp	r7, sl
   1eaf0:	beq	1eb1c <_start@@Base+0xc48c>
   1eaf4:	ldrb	r3, [sl]
   1eaf8:	cmp	r3, #34	; 0x22
   1eafc:	addeq	sl, sl, #1
   1eb00:	moveq	r3, #0
   1eb04:	streq	r3, [r6, #12]
   1eb08:	beq	1eb1c <_start@@Base+0xc48c>
   1eb0c:	cmp	r3, #46	; 0x2e
   1eb10:	movne	r3, #1
   1eb14:	strne	r3, [r6, #12]
   1eb18:	beq	1e4e8 <_start@@Base+0xbe58>
   1eb1c:	sub	r3, r7, sl
   1eb20:	cmp	r3, #8
   1eb24:	bhi	1e504 <_start@@Base+0xbe74>
   1eb28:	sub	r3, r3, #1
   1eb2c:	cmp	r3, #7
   1eb30:	ldrls	pc, [pc, r3, lsl #2]
   1eb34:	b	1e5fc <_start@@Base+0xbf6c>
   1eb38:	strdeq	lr, [r1], -r0
   1eb3c:	andeq	lr, r1, r4, ror #11
   1eb40:	ldrdeq	lr, [r1], -r8
   1eb44:	andeq	lr, r1, ip, asr #11
   1eb48:	andeq	lr, r1, r0, asr #11
   1eb4c:			; <UNDEFINED> instruction: 0x0001e5b4
   1eb50:	andeq	lr, r1, r8, lsr #11
   1eb54:	andeq	lr, r1, r4, lsl #10
   1eb58:	ldrb	r3, [sl, #1]
   1eb5c:	cmp	r3, #32
   1eb60:	addhi	sl, sl, #1
   1eb64:	bls	1ea84 <_start@@Base+0xc3f4>
   1eb68:	b	1ea98 <_start@@Base+0xc408>
   1eb6c:	add	r1, sl, #1
   1eb70:	sub	r3, r7, r1
   1eb74:	cmp	r3, #1
   1eb78:	ble	1eb90 <_start@@Base+0xc500>
   1eb7c:	ldrb	r3, [sl, #1]
   1eb80:	cmp	r3, #32
   1eb84:	movhi	sl, r1
   1eb88:	bhi	1eae0 <_start@@Base+0xc450>
   1eb8c:	beq	1eba4 <_start@@Base+0xc514>
   1eb90:	mov	r2, r7
   1eb94:	mov	r0, r6
   1eb98:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1eb9c:	mov	sl, r0
   1eba0:	b	1eae0 <_start@@Base+0xc450>
   1eba4:	ldrb	r3, [sl, #2]
   1eba8:	cmp	r3, #32
   1ebac:	addhi	sl, sl, #2
   1ebb0:	bls	1eb90 <_start@@Base+0xc500>
   1ebb4:	b	1eae0 <_start@@Base+0xc450>
   1ebb8:	add	r1, sl, #1
   1ebbc:	sub	r3, r7, r1
   1ebc0:	cmp	r3, #1
   1ebc4:	ble	1ebdc <_start@@Base+0xc54c>
   1ebc8:	ldrb	r3, [sl, #1]
   1ebcc:	cmp	r3, #32
   1ebd0:	movhi	sl, r1
   1ebd4:	bhi	1ebec <_start@@Base+0xc55c>
   1ebd8:	beq	1ec28 <_start@@Base+0xc598>
   1ebdc:	mov	r2, r7
   1ebe0:	mov	r0, r6
   1ebe4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1ebe8:	mov	sl, r0
   1ebec:	cmp	r7, sl
   1ebf0:	beq	1ec3c <_start@@Base+0xc5ac>
   1ebf4:	ldrb	r3, [sl]
   1ebf8:	cmp	r3, #125	; 0x7d
   1ebfc:	movne	r3, #1
   1ec00:	strne	r3, [sp, #304]	; 0x130
   1ec04:	bne	1eae0 <_start@@Base+0xc450>
   1ec08:	mov	r3, #0
   1ec0c:	str	r3, [sp, #304]	; 0x130
   1ec10:	mov	r2, r7
   1ec14:	add	r1, sl, #1
   1ec18:	mov	r0, r6
   1ec1c:	bl	14544 <_start@@Base+0x1eb4>
   1ec20:	mov	sl, r0
   1ec24:	b	1eae0 <_start@@Base+0xc450>
   1ec28:	ldrb	r3, [sl, #2]
   1ec2c:	cmp	r3, #32
   1ec30:	addhi	sl, sl, #2
   1ec34:	bls	1ebdc <_start@@Base+0xc54c>
   1ec38:	b	1ebec <_start@@Base+0xc55c>
   1ec3c:	mov	r3, #0
   1ec40:	str	r3, [sp, #304]	; 0x130
   1ec44:	mov	r3, #10
   1ec48:	mov	r2, r7
   1ec4c:	mov	r1, sl
   1ec50:	mov	r0, r6
   1ec54:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1ec58:	mov	sl, r0
   1ec5c:	b	1eae0 <_start@@Base+0xc450>
   1ec60:	ldr	r3, [r6, #24]
   1ec64:	cmp	r3, #0
   1ec68:	beq	1ec7c <_start@@Base+0xc5ec>
   1ec6c:	mov	r5, r7
   1ec70:	mov	r7, r6
   1ec74:	mov	r6, sl
   1ec78:	b	1e498 <_start@@Base+0xbe08>
   1ec7c:	ldr	r0, [r6]
   1ec80:	bl	24570 <flatcc_builder_end_table@@Base>
   1ec84:	subs	r4, r0, #0
   1ec88:	beq	1eca8 <_start@@Base+0xc618>
   1ec8c:	mov	r1, #1
   1ec90:	ldr	r0, [r6]
   1ec94:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1ec98:	cmp	r0, #0
   1ec9c:	beq	20e54 <_start@@Base+0xe7c4>
   1eca0:	str	r4, [r0]
   1eca4:	b	200fc <_start@@Base+0xda6c>
   1eca8:	mov	r5, r7
   1ecac:	mov	r7, r6
   1ecb0:	mov	r6, sl
   1ecb4:	b	1e498 <_start@@Base+0xbe08>
   1ecb8:	mov	r5, r7
   1ecbc:	mov	r7, r6
   1ecc0:	mov	r6, sl
   1ecc4:	b	1e498 <_start@@Base+0xbe08>
   1ecc8:	mov	r5, r7
   1eccc:	mov	r7, r6
   1ecd0:	mov	r6, sl
   1ecd4:	b	1e498 <_start@@Base+0xbe08>
   1ecd8:	mov	r3, #5
   1ecdc:	mov	r2, r7
   1ece0:	mov	r1, r4
   1ece4:	mov	r0, r6
   1ece8:	bl	14594 <_start@@Base+0x1f04>
   1ecec:	mov	sl, r0
   1ecf0:	cmp	r4, r0
   1ecf4:	beq	1f87c <_start@@Base+0xd1ec>
   1ecf8:	mov	r1, #9
   1ecfc:	ldr	r0, [r6]
   1ed00:	bl	23a98 <flatcc_builder_start_table@@Base>
   1ed04:	cmp	r0, #0
   1ed08:	beq	1ed4c <_start@@Base+0xc6bc>
   1ed0c:	mov	r5, r7
   1ed10:	mov	r7, r6
   1ed14:	mov	r6, sl
   1ed18:	mov	r3, #33	; 0x21
   1ed1c:	mov	r2, r5
   1ed20:	mov	r1, r6
   1ed24:	mov	r0, r7
   1ed28:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1ed2c:	mov	r6, r0
   1ed30:	mov	r3, #33	; 0x21
   1ed34:	mov	r2, r5
   1ed38:	mov	r1, r6
   1ed3c:	mov	r0, r7
   1ed40:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1ed44:	mov	r4, r0
   1ed48:	b	203ec <_start@@Base+0xdd5c>
   1ed4c:	add	r3, sp, #308	; 0x134
   1ed50:	mov	r2, r7
   1ed54:	mov	r1, sl
   1ed58:	mov	r0, r6
   1ed5c:	bl	14680 <_start@@Base+0x1ff0>
   1ed60:	mov	sl, r0
   1ed64:	ldr	r3, [sp, #308]	; 0x134
   1ed68:	cmp	r3, #0
   1ed6c:	beq	1f784 <_start@@Base+0xd0f4>
   1ed70:	add	r5, pc, #984	; 0x3d8
   1ed74:	ldrd	r4, [r5]
   1ed78:	mov	fp, r7
   1ed7c:	strd	r4, [sp, #160]	; 0xa0
   1ed80:	mov	r5, r6
   1ed84:	add	r3, sp, #264	; 0x108
   1ed88:	ldrd	r6, [r3]
   1ed8c:	b	1f270 <_start@@Base+0xcbe0>
   1ed90:	mov	r3, #5
   1ed94:	mov	r2, fp
   1ed98:	mov	r1, sl
   1ed9c:	mov	r0, r5
   1eda0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1eda4:	mov	sl, r0
   1eda8:	b	1f2a0 <_start@@Base+0xcc10>
   1edac:	ldrb	r0, [sl, #7]
   1edb0:	mov	r1, #0
   1edb4:	ldrb	r2, [sl, #6]
   1edb8:	orr	r2, r0, r2, lsl #8
   1edbc:	mov	r3, r1
   1edc0:	ldrb	r0, [sl, #5]
   1edc4:	orr	r2, r2, r0, lsl #16
   1edc8:	ldrb	r0, [sl, #4]
   1edcc:	orr	r2, r2, r0, lsl #24
   1edd0:	ldrb	r0, [sl, #3]
   1edd4:	orr	r3, r3, r0
   1edd8:	ldrb	r0, [sl, #2]
   1eddc:	orr	r3, r3, r0, lsl #8
   1ede0:	ldrb	r0, [sl, #1]
   1ede4:	orr	r3, r3, r0, lsl #16
   1ede8:	ldrb	r0, [sl]
   1edec:	mov	r8, r2
   1edf0:	orr	r9, r3, r0, lsl #24
   1edf4:	ldrd	r2, [sp, #160]	; 0xa0
   1edf8:	cmp	r9, r3
   1edfc:	cmpeq	r8, r2
   1ee00:	bhi	1f1e8 <_start@@Base+0xcb58>
   1ee04:	add	r3, pc, #844	; 0x34c
   1ee08:	ldrd	r2, [r3]
   1ee0c:	cmp	r9, r3
   1ee10:	cmpeq	r8, r2
   1ee14:	beq	1eedc <_start@@Base+0xc84c>
   1ee18:	mov	r6, #0
   1ee1c:	mov	r7, r9
   1ee20:	mov	r2, #0
   1ee24:	movw	r3, #24929	; 0x6161
   1ee28:	movt	r3, #24929	; 0x6161
   1ee2c:	cmp	r9, r3
   1ee30:	cmpeq	r6, r2
   1ee34:	beq	1f000 <_start@@Base+0xc970>
   1ee38:	add	r3, pc, #800	; 0x320
   1ee3c:	ldrd	r2, [r3]
   1ee40:	cmp	r9, r3
   1ee44:	cmpeq	r8, r2
   1ee48:	beq	1f060 <_start@@Base+0xc9d0>
   1ee4c:	mov	r2, #0
   1ee50:	movw	r3, #25186	; 0x6262
   1ee54:	movt	r3, #25186	; 0x6262
   1ee58:	cmp	r9, r3
   1ee5c:	cmpeq	r6, r2
   1ee60:	beq	1f170 <_start@@Base+0xcae0>
   1ee64:	mov	r2, fp
   1ee68:	mov	r1, sl
   1ee6c:	mov	r0, r5
   1ee70:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1ee74:	mov	sl, r0
   1ee78:	b	1f24c <_start@@Base+0xcbbc>
   1ee7c:	mov	r0, #0
   1ee80:	mov	r1, #0
   1ee84:	b	1edb4 <_start@@Base+0xc724>
   1ee88:	mov	r2, #0
   1ee8c:	mov	r3, r2
   1ee90:	b	1edc0 <_start@@Base+0xc730>
   1ee94:	mov	r2, #0
   1ee98:	mov	r3, r2
   1ee9c:	b	1edc8 <_start@@Base+0xc738>
   1eea0:	mov	r2, #0
   1eea4:	mov	r3, r2
   1eea8:	b	1edd0 <_start@@Base+0xc740>
   1eeac:	mov	r2, #0
   1eeb0:	mov	r3, r2
   1eeb4:	b	1edd8 <_start@@Base+0xc748>
   1eeb8:	mov	r2, #0
   1eebc:	mov	r3, r2
   1eec0:	b	1ede0 <_start@@Base+0xc750>
   1eec4:	mov	r2, #0
   1eec8:	mov	r3, r2
   1eecc:	b	1ede8 <_start@@Base+0xc758>
   1eed0:	mov	r8, #0
   1eed4:	mov	r9, #0
   1eed8:	b	1edf4 <_start@@Base+0xc764>
   1eedc:	add	sl, sl, #8
   1eee0:	mov	r1, fp
   1eee4:	mov	r0, sl
   1eee8:	bl	12780 <_start@@Base+0xf0>
   1eeec:	mov	r3, #0
   1eef0:	str	r3, [sp, #168]	; 0xa8
   1eef4:	and	r3, r1, #-16777216	; 0xff000000
   1eef8:	str	r3, [sp, #172]	; 0xac
   1eefc:	ldrd	r2, [sp, #168]	; 0xa8
   1ef00:	cmp	r3, #889192448	; 0x35000000
   1ef04:	cmpeq	r2, #0
   1ef08:	beq	1ef24 <_start@@Base+0xc894>
   1ef0c:	mov	r2, fp
   1ef10:	mov	r1, sl
   1ef14:	mov	r0, r5
   1ef18:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1ef1c:	mov	sl, r0
   1ef20:	b	1f24c <_start@@Base+0xcbbc>
   1ef24:	mov	r3, #1
   1ef28:	mov	r2, fp
   1ef2c:	mov	r1, sl
   1ef30:	mov	r0, r5
   1ef34:	bl	14594 <_start@@Base+0x1f04>
   1ef38:	mov	r1, r0
   1ef3c:	mov	r4, r0
   1ef40:	cmp	sl, r0
   1ef44:	beq	1efec <_start@@Base+0xc95c>
   1ef48:	mov	r3, #0
   1ef4c:	str	r3, [sp, #320]	; 0x140
   1ef50:	add	r3, sp, #320	; 0x140
   1ef54:	mov	r2, fp
   1ef58:	mov	r0, r5
   1ef5c:	bl	1423c <_start@@Base+0x1bac>
   1ef60:	mov	sl, r0
   1ef64:	cmp	r4, r0
   1ef68:	beq	1efac <_start@@Base+0xc91c>
   1ef6c:	ldr	r3, [sp, #320]	; 0x140
   1ef70:	cmp	r3, #0
   1ef74:	bne	1ef84 <_start@@Base+0xc8f4>
   1ef78:	ldr	r3, [r5, #8]
   1ef7c:	tst	r3, #2
   1ef80:	beq	1f24c <_start@@Base+0xcbbc>
   1ef84:	mov	r3, #4
   1ef88:	mov	r2, r3
   1ef8c:	mov	r1, #1
   1ef90:	ldr	r0, [r5]
   1ef94:	bl	2565c <flatcc_builder_table_add@@Base>
   1ef98:	cmp	r0, #0
   1ef9c:	beq	1f7dc <_start@@Base+0xd14c>
   1efa0:	ldr	r3, [sp, #320]	; 0x140
   1efa4:	str	r3, [r0]
   1efa8:	b	1f24c <_start@@Base+0xcbbc>
   1efac:	add	r3, sp, #320	; 0x140
   1efb0:	str	r3, [sp]
   1efb4:	ldr	r3, [pc, #428]	; 1f168 <_start@@Base+0xcad8>
   1efb8:	mov	r2, fp
   1efbc:	mov	r1, r0
   1efc0:	mov	r0, r5
   1efc4:	bl	15548 <_start@@Base+0x2eb8>
   1efc8:	cmp	fp, r0
   1efcc:	cmpne	sl, r0
   1efd0:	beq	1efdc <_start@@Base+0xc94c>
   1efd4:	mov	sl, r0
   1efd8:	b	1ef6c <_start@@Base+0xc8dc>
   1efdc:	mov	r7, r5
   1efe0:	mov	r5, fp
   1efe4:	mov	r6, r0
   1efe8:	b	1ed18 <_start@@Base+0xc688>
   1efec:	mov	r2, fp
   1eff0:	mov	r0, r5
   1eff4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1eff8:	mov	sl, r0
   1effc:	b	1f24c <_start@@Base+0xcbbc>
   1f000:	mov	r3, #4
   1f004:	mov	r2, fp
   1f008:	mov	r1, sl
   1f00c:	mov	r0, r5
   1f010:	bl	14594 <_start@@Base+0x1f04>
   1f014:	cmp	r0, sl
   1f018:	beq	1ee64 <_start@@Base+0xc7d4>
   1f01c:	add	r3, sp, #312	; 0x138
   1f020:	mov	r2, fp
   1f024:	mov	r1, r0
   1f028:	mov	r0, r5
   1f02c:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   1f030:	mov	sl, r0
   1f034:	ldr	r3, [sp, #312]	; 0x138
   1f038:	cmp	r3, r6
   1f03c:	beq	1f7ec <_start@@Base+0xd15c>
   1f040:	mov	r1, r6
   1f044:	ldr	r0, [r5]
   1f048:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1f04c:	cmp	r0, #0
   1f050:	beq	1f7fc <_start@@Base+0xd16c>
   1f054:	ldr	r3, [sp, #312]	; 0x138
   1f058:	str	r3, [r0]
   1f05c:	b	1f24c <_start@@Base+0xcbbc>
   1f060:	mov	r3, #8
   1f064:	mov	r2, fp
   1f068:	mov	r1, sl
   1f06c:	mov	r0, r5
   1f070:	bl	14594 <_start@@Base+0x1f04>
   1f074:	mov	r1, r0
   1f078:	cmp	r0, sl
   1f07c:	beq	1f138 <_start@@Base+0xcaa8>
   1f080:	mov	r2, #0
   1f084:	mov	r3, #0
   1f088:	add	r0, sp, #320	; 0x140
   1f08c:	strd	r2, [r0]
   1f090:	mov	r3, r0
   1f094:	mov	r2, fp
   1f098:	mov	r4, r1
   1f09c:	mov	r0, r5
   1f0a0:	bl	14468 <_start@@Base+0x1dd8>
   1f0a4:	mov	sl, r0
   1f0a8:	cmp	r4, r0
   1f0ac:	beq	1f0f8 <_start@@Base+0xca68>
   1f0b0:	add	r3, sp, #320	; 0x140
   1f0b4:	ldrd	r2, [r3]
   1f0b8:	orrs	r3, r2, r3
   1f0bc:	bne	1f0cc <_start@@Base+0xca3c>
   1f0c0:	ldr	r3, [r5, #8]
   1f0c4:	tst	r3, #2
   1f0c8:	beq	1f24c <_start@@Base+0xcbbc>
   1f0cc:	mov	r3, #8
   1f0d0:	mov	r2, r3
   1f0d4:	mov	r1, #3
   1f0d8:	ldr	r0, [r5]
   1f0dc:	bl	2565c <flatcc_builder_table_add@@Base>
   1f0e0:	cmp	r0, #0
   1f0e4:	beq	1f80c <_start@@Base+0xd17c>
   1f0e8:	add	r3, sp, #320	; 0x140
   1f0ec:	ldrd	r2, [r3]
   1f0f0:	strd	r2, [r0]
   1f0f4:	b	1f24c <_start@@Base+0xcbbc>
   1f0f8:	add	r3, sp, #320	; 0x140
   1f0fc:	str	r3, [sp]
   1f100:	ldr	r3, [pc, #100]	; 1f16c <_start@@Base+0xcadc>
   1f104:	mov	r2, fp
   1f108:	mov	r1, r0
   1f10c:	mov	r0, r5
   1f110:	bl	15e6c <_start@@Base+0x37dc>
   1f114:	cmp	fp, r0
   1f118:	cmpne	sl, r0
   1f11c:	beq	1f128 <_start@@Base+0xca98>
   1f120:	mov	sl, r0
   1f124:	b	1f0b0 <_start@@Base+0xca20>
   1f128:	mov	r7, r5
   1f12c:	mov	r5, fp
   1f130:	mov	r6, r0
   1f134:	b	1ed18 <_start@@Base+0xc688>
   1f138:	mov	r2, fp
   1f13c:	mov	r1, sl
   1f140:	mov	r0, r5
   1f144:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1f148:	mov	sl, r0
   1f14c:	b	1f24c <_start@@Base+0xcbbc>
   1f150:			; <UNDEFINED> instruction: 0xffffffff
   1f154:	cmnvs	r3, #-2013265919	; 0x88000001
   1f158:	teqcc	r2, r4, lsr r3
   1f15c:	cmnvs	r1, r1, ror #2
   1f160:	teqcc	r2, r4, lsr r3
   1f164:	rsbvs	r6, r2, #536870918	; 0x20000006
   1f168:	muleq	r3, r4, r2
   1f16c:	andeq	lr, r3, r0, lsr #5
   1f170:	mov	r3, #4
   1f174:	mov	r2, fp
   1f178:	mov	r1, sl
   1f17c:	mov	r0, r5
   1f180:	bl	14594 <_start@@Base+0x1f04>
   1f184:	cmp	r0, sl
   1f188:	beq	1f1d0 <_start@@Base+0xcb40>
   1f18c:	add	r3, sp, #312	; 0x138
   1f190:	mov	r2, fp
   1f194:	mov	r1, r0
   1f198:	mov	r0, r5
   1f19c:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   1f1a0:	mov	sl, r0
   1f1a4:	ldr	r3, [sp, #312]	; 0x138
   1f1a8:	cmp	r3, #0
   1f1ac:	beq	1f81c <_start@@Base+0xd18c>
   1f1b0:	mov	r1, #2
   1f1b4:	ldr	r0, [r5]
   1f1b8:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1f1bc:	cmp	r0, #0
   1f1c0:	beq	1f82c <_start@@Base+0xd19c>
   1f1c4:	ldr	r3, [sp, #312]	; 0x138
   1f1c8:	str	r3, [r0]
   1f1cc:	b	1f24c <_start@@Base+0xcbbc>
   1f1d0:	mov	r2, fp
   1f1d4:	mov	r1, sl
   1f1d8:	mov	r0, r5
   1f1dc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1f1e0:	mov	sl, r0
   1f1e4:	b	1f24c <_start@@Base+0xcbbc>
   1f1e8:	add	r3, pc, #856	; 0x358
   1f1ec:	ldrd	r2, [r3]
   1f1f0:	cmp	r9, r3
   1f1f4:	cmpeq	r8, r2
   1f1f8:	beq	1f2dc <_start@@Base+0xcc4c>
   1f1fc:	mov	r3, #0
   1f200:	str	r3, [sp, #112]	; 0x70
   1f204:	str	r9, [sp, #116]	; 0x74
   1f208:	ldrd	r2, [sp, #112]	; 0x70
   1f20c:	mov	r0, #0
   1f210:	movw	r1, #25443	; 0x6363
   1f214:	movt	r1, #25443	; 0x6363
   1f218:	cmp	r3, r1
   1f21c:	cmpeq	r2, r0
   1f220:	beq	1f4e8 <_start@@Base+0xce58>
   1f224:	add	r3, pc, #804	; 0x324
   1f228:	ldrd	r2, [r3]
   1f22c:	cmp	r9, r3
   1f230:	cmpeq	r8, r2
   1f234:	beq	1f568 <_start@@Base+0xced8>
   1f238:	mov	r2, fp
   1f23c:	mov	r1, sl
   1f240:	mov	r0, r5
   1f244:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1f248:	mov	sl, r0
   1f24c:	add	r3, sp, #308	; 0x134
   1f250:	mov	r2, fp
   1f254:	mov	r1, sl
   1f258:	mov	r0, r5
   1f25c:	bl	18020 <_start@@Base+0x5990>
   1f260:	mov	sl, r0
   1f264:	ldr	r3, [sp, #308]	; 0x134
   1f268:	cmp	r3, #0
   1f26c:	beq	1f774 <_start@@Base+0xd0e4>
   1f270:	cmp	fp, sl
   1f274:	beq	1f2a0 <_start@@Base+0xcc10>
   1f278:	ldrb	r3, [sl]
   1f27c:	cmp	r3, #34	; 0x22
   1f280:	addeq	sl, sl, #1
   1f284:	moveq	r3, #0
   1f288:	streq	r3, [r5, #12]
   1f28c:	beq	1f2a0 <_start@@Base+0xcc10>
   1f290:	cmp	r3, #46	; 0x2e
   1f294:	movne	r3, #1
   1f298:	strne	r3, [r5, #12]
   1f29c:	beq	1ed90 <_start@@Base+0xc700>
   1f2a0:	sub	r3, fp, sl
   1f2a4:	cmp	r3, #8
   1f2a8:	bhi	1edac <_start@@Base+0xc71c>
   1f2ac:	sub	r3, r3, #1
   1f2b0:	cmp	r3, #7
   1f2b4:	ldrls	pc, [pc, r3, lsl #2]
   1f2b8:	b	1eed0 <_start@@Base+0xc840>
   1f2bc:	andeq	lr, r1, r4, asr #29
   1f2c0:			; <UNDEFINED> instruction: 0x0001eeb8
   1f2c4:	andeq	lr, r1, ip, lsr #29
   1f2c8:	andeq	lr, r1, r0, lsr #29
   1f2cc:	muleq	r1, r4, lr
   1f2d0:	andeq	lr, r1, r8, lsl #29
   1f2d4:	andeq	lr, r1, ip, ror lr
   1f2d8:	andeq	lr, r1, ip, lsr #27
   1f2dc:	mov	r3, #8
   1f2e0:	mov	r2, fp
   1f2e4:	mov	r1, sl
   1f2e8:	mov	r0, r5
   1f2ec:	bl	14594 <_start@@Base+0x1f04>
   1f2f0:	mov	r4, r0
   1f2f4:	cmp	r0, sl
   1f2f8:	beq	1f3b4 <_start@@Base+0xcd24>
   1f2fc:	mov	r2, #0
   1f300:	mov	r3, #0
   1f304:	add	r1, sp, #320	; 0x140
   1f308:	strd	r2, [r1]
   1f30c:	mov	r3, r1
   1f310:	mov	r2, fp
   1f314:	mov	r1, r0
   1f318:	mov	r0, r5
   1f31c:	bl	14468 <_start@@Base+0x1dd8>
   1f320:	mov	sl, r0
   1f324:	cmp	r4, r0
   1f328:	beq	1f374 <_start@@Base+0xcce4>
   1f32c:	add	r3, sp, #320	; 0x140
   1f330:	ldrd	r2, [r3]
   1f334:	orrs	r3, r2, r3
   1f338:	bne	1f348 <_start@@Base+0xccb8>
   1f33c:	ldr	r3, [r5, #8]
   1f340:	tst	r3, #2
   1f344:	beq	1f24c <_start@@Base+0xcbbc>
   1f348:	mov	r3, #8
   1f34c:	mov	r2, r3
   1f350:	mov	r1, #5
   1f354:	ldr	r0, [r5]
   1f358:	bl	2565c <flatcc_builder_table_add@@Base>
   1f35c:	cmp	r0, #0
   1f360:	beq	1f83c <_start@@Base+0xd1ac>
   1f364:	add	r3, sp, #320	; 0x140
   1f368:	ldrd	r2, [r3]
   1f36c:	strd	r2, [r0]
   1f370:	b	1f24c <_start@@Base+0xcbbc>
   1f374:	add	r3, sp, #320	; 0x140
   1f378:	str	r3, [sp]
   1f37c:	ldr	r3, [pc, #468]	; 1f558 <_start@@Base+0xcec8>
   1f380:	mov	r2, fp
   1f384:	mov	r1, r0
   1f388:	mov	r0, r5
   1f38c:	bl	15e6c <_start@@Base+0x37dc>
   1f390:	cmp	fp, r0
   1f394:	cmpne	sl, r0
   1f398:	beq	1f3a4 <_start@@Base+0xcd14>
   1f39c:	mov	sl, r0
   1f3a0:	b	1f32c <_start@@Base+0xcc9c>
   1f3a4:	mov	r7, r5
   1f3a8:	mov	r5, fp
   1f3ac:	mov	r6, r0
   1f3b0:	b	1ed18 <_start@@Base+0xc688>
   1f3b4:	add	sl, sl, #8
   1f3b8:	mov	r1, fp
   1f3bc:	mov	r0, sl
   1f3c0:	bl	12780 <_start@@Base+0xf0>
   1f3c4:	mov	r3, #0
   1f3c8:	str	r3, [sp, #208]	; 0xd0
   1f3cc:	and	r3, r1, #-16777216	; 0xff000000
   1f3d0:	str	r3, [sp, #212]	; 0xd4
   1f3d4:	ldrd	r2, [sp, #208]	; 0xd0
   1f3d8:	cmp	r3, #889192448	; 0x35000000
   1f3dc:	cmpeq	r2, #0
   1f3e0:	beq	1f3fc <_start@@Base+0xcd6c>
   1f3e4:	mov	r2, fp
   1f3e8:	mov	r1, sl
   1f3ec:	mov	r0, r5
   1f3f0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1f3f4:	mov	sl, r0
   1f3f8:	b	1f24c <_start@@Base+0xcbbc>
   1f3fc:	mov	r3, #1
   1f400:	mov	r2, fp
   1f404:	mov	r1, sl
   1f408:	mov	r0, r5
   1f40c:	bl	14594 <_start@@Base+0x1f04>
   1f410:	mov	r1, r0
   1f414:	mov	r4, r0
   1f418:	cmp	sl, r0
   1f41c:	beq	1f4d4 <_start@@Base+0xce44>
   1f420:	mov	r3, #0
   1f424:	str	r3, [sp, #320]	; 0x140
   1f428:	add	r3, sp, #320	; 0x140
   1f42c:	mov	r2, fp
   1f430:	mov	r0, r5
   1f434:	bl	1423c <_start@@Base+0x1bac>
   1f438:	mov	sl, r0
   1f43c:	cmp	r4, r0
   1f440:	beq	1f484 <_start@@Base+0xcdf4>
   1f444:	ldr	r3, [sp, #320]	; 0x140
   1f448:	cmp	r3, #0
   1f44c:	bne	1f45c <_start@@Base+0xcdcc>
   1f450:	ldr	r3, [r5, #8]
   1f454:	tst	r3, #2
   1f458:	beq	1f24c <_start@@Base+0xcbbc>
   1f45c:	mov	r3, #4
   1f460:	mov	r2, r3
   1f464:	mov	r1, #6
   1f468:	ldr	r0, [r5]
   1f46c:	bl	2565c <flatcc_builder_table_add@@Base>
   1f470:	cmp	r0, #0
   1f474:	beq	1f4b4 <_start@@Base+0xce24>
   1f478:	ldr	r3, [sp, #320]	; 0x140
   1f47c:	str	r3, [r0]
   1f480:	b	1f24c <_start@@Base+0xcbbc>
   1f484:	add	r3, sp, #320	; 0x140
   1f488:	str	r3, [sp]
   1f48c:	ldr	r3, [pc, #200]	; 1f55c <_start@@Base+0xcecc>
   1f490:	mov	r2, fp
   1f494:	mov	r1, r0
   1f498:	mov	r0, r5
   1f49c:	bl	15548 <_start@@Base+0x2eb8>
   1f4a0:	cmp	fp, r0
   1f4a4:	cmpne	sl, r0
   1f4a8:	beq	1f4c8 <_start@@Base+0xce38>
   1f4ac:	mov	sl, r0
   1f4b0:	b	1f444 <_start@@Base+0xcdb4>
   1f4b4:	mov	r7, r5
   1f4b8:	mov	r5, fp
   1f4bc:	mov	r0, sl
   1f4c0:	mov	r6, r0
   1f4c4:	b	1ed18 <_start@@Base+0xc688>
   1f4c8:	mov	r7, r5
   1f4cc:	mov	r5, fp
   1f4d0:	b	1f4c0 <_start@@Base+0xce30>
   1f4d4:	mov	r2, fp
   1f4d8:	mov	r0, r5
   1f4dc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1f4e0:	mov	sl, r0
   1f4e4:	b	1f24c <_start@@Base+0xcbbc>
   1f4e8:	mov	r3, #4
   1f4ec:	mov	r2, fp
   1f4f0:	mov	r1, sl
   1f4f4:	mov	r0, r5
   1f4f8:	bl	14594 <_start@@Base+0x1f04>
   1f4fc:	cmp	r0, sl
   1f500:	beq	1f238 <_start@@Base+0xcba8>
   1f504:	add	r3, sp, #312	; 0x138
   1f508:	mov	r2, fp
   1f50c:	mov	r1, r0
   1f510:	mov	r0, r5
   1f514:	bl	29f00 <flatcc_json_parser_build_string@@Base>
   1f518:	mov	sl, r0
   1f51c:	ldr	r3, [sp, #312]	; 0x138
   1f520:	cmp	r3, #0
   1f524:	beq	1f84c <_start@@Base+0xd1bc>
   1f528:	mov	r1, #4
   1f52c:	ldr	r0, [r5]
   1f530:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1f534:	cmp	r0, #0
   1f538:	beq	1f85c <_start@@Base+0xd1cc>
   1f53c:	ldr	r3, [sp, #312]	; 0x138
   1f540:	str	r3, [r0]
   1f544:	b	1f24c <_start@@Base+0xcbbc>
   1f548:	teqcc	r2, r4, lsr r3
   1f54c:	cmnvs	r3, #-1946157055	; 0x8c000001
   1f550:	teqcc	r2, r4, lsr r3
   1f554:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1f558:	andeq	lr, r3, ip, lsr #5
   1f55c:			; <UNDEFINED> instruction: 0x0003e2b8
   1f560:	andeq	lr, r3, r4, asr #5
   1f564:	ldrdeq	lr, [r3], -r0
   1f568:	mov	r3, #8
   1f56c:	mov	r2, fp
   1f570:	mov	r1, sl
   1f574:	mov	r0, r5
   1f578:	bl	14594 <_start@@Base+0x1f04>
   1f57c:	mov	r4, r0
   1f580:	cmp	r0, sl
   1f584:	beq	1f640 <_start@@Base+0xcfb0>
   1f588:	mov	r2, #0
   1f58c:	mov	r3, #0
   1f590:	add	r1, sp, #320	; 0x140
   1f594:	strd	r2, [r1]
   1f598:	mov	r3, r1
   1f59c:	mov	r2, fp
   1f5a0:	mov	r1, r0
   1f5a4:	mov	r0, r5
   1f5a8:	bl	14468 <_start@@Base+0x1dd8>
   1f5ac:	mov	sl, r0
   1f5b0:	cmp	r4, r0
   1f5b4:	beq	1f600 <_start@@Base+0xcf70>
   1f5b8:	add	r3, sp, #320	; 0x140
   1f5bc:	ldrd	r2, [r3]
   1f5c0:	orrs	r3, r2, r3
   1f5c4:	bne	1f5d4 <_start@@Base+0xcf44>
   1f5c8:	ldr	r3, [r5, #8]
   1f5cc:	tst	r3, #2
   1f5d0:	beq	1f24c <_start@@Base+0xcbbc>
   1f5d4:	mov	r3, #8
   1f5d8:	mov	r2, r3
   1f5dc:	mov	r1, #7
   1f5e0:	ldr	r0, [r5]
   1f5e4:	bl	2565c <flatcc_builder_table_add@@Base>
   1f5e8:	cmp	r0, #0
   1f5ec:	beq	1f86c <_start@@Base+0xd1dc>
   1f5f0:	add	r3, sp, #320	; 0x140
   1f5f4:	ldrd	r2, [r3]
   1f5f8:	strd	r2, [r0]
   1f5fc:	b	1f24c <_start@@Base+0xcbbc>
   1f600:	add	r3, sp, #320	; 0x140
   1f604:	str	r3, [sp]
   1f608:	ldr	r3, [pc, #-176]	; 1f560 <_start@@Base+0xced0>
   1f60c:	mov	r2, fp
   1f610:	mov	r1, r0
   1f614:	mov	r0, r5
   1f618:	bl	15e6c <_start@@Base+0x37dc>
   1f61c:	cmp	fp, r0
   1f620:	cmpne	sl, r0
   1f624:	beq	1f630 <_start@@Base+0xcfa0>
   1f628:	mov	sl, r0
   1f62c:	b	1f5b8 <_start@@Base+0xcf28>
   1f630:	mov	r7, r5
   1f634:	mov	r5, fp
   1f638:	mov	r6, r0
   1f63c:	b	1ed18 <_start@@Base+0xc688>
   1f640:	add	sl, sl, #8
   1f644:	mov	r1, fp
   1f648:	mov	r0, sl
   1f64c:	bl	12780 <_start@@Base+0xf0>
   1f650:	mov	r3, #0
   1f654:	str	r3, [sp, #200]	; 0xc8
   1f658:	and	r3, r1, #-16777216	; 0xff000000
   1f65c:	str	r3, [sp, #204]	; 0xcc
   1f660:	ldrd	r2, [sp, #200]	; 0xc8
   1f664:	cmp	r3, #889192448	; 0x35000000
   1f668:	cmpeq	r2, #0
   1f66c:	beq	1f688 <_start@@Base+0xcff8>
   1f670:	mov	r2, fp
   1f674:	mov	r1, sl
   1f678:	mov	r0, r5
   1f67c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1f680:	mov	sl, r0
   1f684:	b	1f24c <_start@@Base+0xcbbc>
   1f688:	mov	r3, #1
   1f68c:	mov	r2, fp
   1f690:	mov	r1, sl
   1f694:	mov	r0, r5
   1f698:	bl	14594 <_start@@Base+0x1f04>
   1f69c:	mov	r1, r0
   1f6a0:	mov	r4, r0
   1f6a4:	cmp	sl, r0
   1f6a8:	beq	1f760 <_start@@Base+0xd0d0>
   1f6ac:	mov	r3, #0
   1f6b0:	str	r3, [sp, #320]	; 0x140
   1f6b4:	add	r3, sp, #320	; 0x140
   1f6b8:	mov	r2, fp
   1f6bc:	mov	r0, r5
   1f6c0:	bl	1423c <_start@@Base+0x1bac>
   1f6c4:	mov	sl, r0
   1f6c8:	cmp	r4, r0
   1f6cc:	beq	1f710 <_start@@Base+0xd080>
   1f6d0:	ldr	r3, [sp, #320]	; 0x140
   1f6d4:	cmp	r3, #0
   1f6d8:	bne	1f6e8 <_start@@Base+0xd058>
   1f6dc:	ldr	r3, [r5, #8]
   1f6e0:	tst	r3, #2
   1f6e4:	beq	1f24c <_start@@Base+0xcbbc>
   1f6e8:	mov	r3, #4
   1f6ec:	mov	r2, r3
   1f6f0:	mov	r1, #8
   1f6f4:	ldr	r0, [r5]
   1f6f8:	bl	2565c <flatcc_builder_table_add@@Base>
   1f6fc:	cmp	r0, #0
   1f700:	beq	1f740 <_start@@Base+0xd0b0>
   1f704:	ldr	r3, [sp, #320]	; 0x140
   1f708:	str	r3, [r0]
   1f70c:	b	1f24c <_start@@Base+0xcbbc>
   1f710:	add	r3, sp, #320	; 0x140
   1f714:	str	r3, [sp]
   1f718:	ldr	r3, [pc, #-444]	; 1f564 <_start@@Base+0xced4>
   1f71c:	mov	r2, fp
   1f720:	mov	r1, r0
   1f724:	mov	r0, r5
   1f728:	bl	15548 <_start@@Base+0x2eb8>
   1f72c:	cmp	fp, r0
   1f730:	cmpne	sl, r0
   1f734:	beq	1f754 <_start@@Base+0xd0c4>
   1f738:	mov	sl, r0
   1f73c:	b	1f6d0 <_start@@Base+0xd040>
   1f740:	mov	r7, r5
   1f744:	mov	r5, fp
   1f748:	mov	r0, sl
   1f74c:	mov	r6, r0
   1f750:	b	1ed18 <_start@@Base+0xc688>
   1f754:	mov	r7, r5
   1f758:	mov	r5, fp
   1f75c:	b	1f74c <_start@@Base+0xd0bc>
   1f760:	mov	r2, fp
   1f764:	mov	r0, r5
   1f768:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1f76c:	mov	sl, r0
   1f770:	b	1f24c <_start@@Base+0xcbbc>
   1f774:	add	r3, sp, #264	; 0x108
   1f778:	strd	r6, [r3]
   1f77c:	mov	r6, r5
   1f780:	mov	r7, fp
   1f784:	ldr	r3, [r6, #24]
   1f788:	cmp	r3, #0
   1f78c:	beq	1f7a0 <_start@@Base+0xd110>
   1f790:	mov	r5, r7
   1f794:	mov	r7, r6
   1f798:	mov	r6, sl
   1f79c:	b	1ed18 <_start@@Base+0xc688>
   1f7a0:	ldr	r0, [r6]
   1f7a4:	bl	24570 <flatcc_builder_end_table@@Base>
   1f7a8:	subs	r4, r0, #0
   1f7ac:	beq	1f7cc <_start@@Base+0xd13c>
   1f7b0:	mov	r1, #0
   1f7b4:	ldr	r0, [r6]
   1f7b8:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   1f7bc:	cmp	r0, #0
   1f7c0:	beq	20e8c <_start@@Base+0xe7fc>
   1f7c4:	str	r4, [r0]
   1f7c8:	b	200fc <_start@@Base+0xda6c>
   1f7cc:	mov	r5, r7
   1f7d0:	mov	r7, r6
   1f7d4:	mov	r6, sl
   1f7d8:	b	1ed18 <_start@@Base+0xc688>
   1f7dc:	mov	r6, sl
   1f7e0:	mov	r7, r5
   1f7e4:	mov	r5, fp
   1f7e8:	b	1ed18 <_start@@Base+0xc688>
   1f7ec:	mov	r6, r0
   1f7f0:	mov	r7, r5
   1f7f4:	mov	r5, fp
   1f7f8:	b	1ed18 <_start@@Base+0xc688>
   1f7fc:	mov	r6, sl
   1f800:	mov	r7, r5
   1f804:	mov	r5, fp
   1f808:	b	1ed18 <_start@@Base+0xc688>
   1f80c:	mov	r6, sl
   1f810:	mov	r7, r5
   1f814:	mov	r5, fp
   1f818:	b	1ed18 <_start@@Base+0xc688>
   1f81c:	mov	r6, r0
   1f820:	mov	r7, r5
   1f824:	mov	r5, fp
   1f828:	b	1ed18 <_start@@Base+0xc688>
   1f82c:	mov	r6, sl
   1f830:	mov	r7, r5
   1f834:	mov	r5, fp
   1f838:	b	1ed18 <_start@@Base+0xc688>
   1f83c:	mov	r6, sl
   1f840:	mov	r7, r5
   1f844:	mov	r5, fp
   1f848:	b	1ed18 <_start@@Base+0xc688>
   1f84c:	mov	r6, r0
   1f850:	mov	r7, r5
   1f854:	mov	r5, fp
   1f858:	b	1ed18 <_start@@Base+0xc688>
   1f85c:	mov	r6, sl
   1f860:	mov	r7, r5
   1f864:	mov	r5, fp
   1f868:	b	1ed18 <_start@@Base+0xc688>
   1f86c:	mov	r6, sl
   1f870:	mov	r7, r5
   1f874:	mov	r5, fp
   1f878:	b	1ed18 <_start@@Base+0xc688>
   1f87c:	mov	r4, r0
   1f880:	b	1e3c8 <_start@@Base+0xbd38>
   1f884:	mov	r3, #6
   1f888:	mov	r2, r7
   1f88c:	mov	r1, r4
   1f890:	mov	r0, r6
   1f894:	bl	14594 <_start@@Base+0x1f04>
   1f898:	mov	sl, r0
   1f89c:	cmp	r4, r0
   1f8a0:	beq	200b0 <_start@@Base+0xda20>
   1f8a4:	mov	r1, #2
   1f8a8:	ldr	r0, [r6]
   1f8ac:	bl	23a98 <flatcc_builder_start_table@@Base>
   1f8b0:	cmp	r0, #0
   1f8b4:	beq	1f8e0 <_start@@Base+0xd250>
   1f8b8:	mov	r5, r7
   1f8bc:	mov	r7, r6
   1f8c0:	mov	r6, sl
   1f8c4:	mov	r3, #33	; 0x21
   1f8c8:	mov	r2, r5
   1f8cc:	mov	r1, r6
   1f8d0:	mov	r0, r7
   1f8d4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1f8d8:	mov	r6, r0
   1f8dc:	b	1ed30 <_start@@Base+0xc6a0>
   1f8e0:	add	r3, sp, #304	; 0x130
   1f8e4:	mov	r2, r7
   1f8e8:	mov	r1, sl
   1f8ec:	mov	r0, r6
   1f8f0:	bl	14680 <_start@@Base+0x1ff0>
   1f8f4:	mov	sl, r0
   1f8f8:	add	r5, pc, #880	; 0x370
   1f8fc:	ldrd	r4, [r5]
   1f900:	movw	r3, #57464	; 0xe078
   1f904:	movt	r3, #3
   1f908:	str	r3, [sp, #276]	; 0x114
   1f90c:	add	r3, r3, #624	; 0x270
   1f910:	str	r3, [sp, #272]	; 0x110
   1f914:	strd	r8, [sp, #160]	; 0xa0
   1f918:	b	1feb4 <_start@@Base+0xd824>
   1f91c:	mov	r3, #5
   1f920:	mov	r2, r7
   1f924:	mov	r1, sl
   1f928:	mov	r0, r6
   1f92c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1f930:	mov	sl, r0
   1f934:	b	1fef0 <_start@@Base+0xd860>
   1f938:	ldrb	r0, [sl, #7]
   1f93c:	mov	r1, #0
   1f940:	ldrb	r2, [sl, #6]
   1f944:	orr	r2, r0, r2, lsl #8
   1f948:	mov	r3, r1
   1f94c:	ldrb	r0, [sl, #5]
   1f950:	orr	r2, r2, r0, lsl #16
   1f954:	ldrb	r0, [sl, #4]
   1f958:	orr	r2, r2, r0, lsl #24
   1f95c:	ldrb	r0, [sl, #3]
   1f960:	orr	r3, r3, r0
   1f964:	ldrb	r0, [sl, #2]
   1f968:	orr	r3, r3, r0, lsl #8
   1f96c:	ldrb	r0, [sl, #1]
   1f970:	orr	r3, r3, r0, lsl #16
   1f974:	ldrb	r0, [sl]
   1f978:	str	r2, [sp, #88]	; 0x58
   1f97c:	orr	r3, r3, r0, lsl #24
   1f980:	str	r3, [sp, #92]	; 0x5c
   1f984:	ldrd	r2, [sp, #88]	; 0x58
   1f988:	cmp	r3, r5
   1f98c:	cmpeq	r2, r4
   1f990:	bne	1fe28 <_start@@Base+0xd798>
   1f994:	add	fp, sl, #8
   1f998:	sub	r3, r7, fp
   1f99c:	cmp	r3, #8
   1f9a0:	bhi	1fa38 <_start@@Base+0xd3a8>
   1f9a4:	sub	r3, r3, #1
   1f9a8:	cmp	r3, #7
   1f9ac:	ldrls	pc, [pc, r3, lsl #2]
   1f9b0:	b	1fb30 <_start@@Base+0xd4a0>
   1f9b4:	andeq	pc, r1, r4, lsr #22
   1f9b8:	andeq	pc, r1, r8, lsl fp	; <UNPREDICTABLE>
   1f9bc:	andeq	pc, r1, ip, lsl #22
   1f9c0:	andeq	pc, r1, r0, lsl #22
   1f9c4:	strdeq	pc, [r1], -r4
   1f9c8:	andeq	pc, r1, r8, ror #21
   1f9cc:	ldrdeq	pc, [r1], -ip
   1f9d0:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f9d4:	mov	r0, #0
   1f9d8:	mov	r1, #0
   1f9dc:	b	1f940 <_start@@Base+0xd2b0>
   1f9e0:	mov	r2, #0
   1f9e4:	mov	r3, r2
   1f9e8:	b	1f94c <_start@@Base+0xd2bc>
   1f9ec:	mov	r2, #0
   1f9f0:	mov	r3, r2
   1f9f4:	b	1f954 <_start@@Base+0xd2c4>
   1f9f8:	mov	r2, #0
   1f9fc:	mov	r3, r2
   1fa00:	b	1f95c <_start@@Base+0xd2cc>
   1fa04:	mov	r2, #0
   1fa08:	mov	r3, r2
   1fa0c:	b	1f964 <_start@@Base+0xd2d4>
   1fa10:	mov	r2, #0
   1fa14:	mov	r3, r2
   1fa18:	b	1f96c <_start@@Base+0xd2dc>
   1fa1c:	mov	r2, #0
   1fa20:	mov	r3, r2
   1fa24:	b	1f974 <_start@@Base+0xd2e4>
   1fa28:	mov	r2, #0
   1fa2c:	mov	r3, #0
   1fa30:	strd	r2, [sp, #88]	; 0x58
   1fa34:	b	1f984 <_start@@Base+0xd2f4>
   1fa38:	ldrb	r0, [sl, #15]
   1fa3c:	mov	r1, #0
   1fa40:	ldrb	r2, [sl, #14]
   1fa44:	orr	r2, r0, r2, lsl #8
   1fa48:	mov	r3, r1
   1fa4c:	ldrb	r0, [sl, #13]
   1fa50:	orr	r2, r2, r0, lsl #16
   1fa54:	ldrb	r0, [sl, #12]
   1fa58:	orr	r2, r2, r0, lsl #24
   1fa5c:	ldrb	r0, [sl, #11]
   1fa60:	orr	r3, r3, r0
   1fa64:	ldrb	r0, [sl, #10]
   1fa68:	orr	r3, r3, r0, lsl #8
   1fa6c:	ldrb	r0, [sl, #9]
   1fa70:	orr	r3, r3, r0, lsl #16
   1fa74:	ldrb	r0, [sl, #8]
   1fa78:	str	r2, [sp, #48]	; 0x30
   1fa7c:	orr	r3, r3, r0, lsl #24
   1fa80:	str	r3, [sp, #52]	; 0x34
   1fa84:	ldrd	r2, [sp, #48]	; 0x30
   1fa88:	add	r1, pc, #488	; 0x1e8
   1fa8c:	ldrd	r0, [r1]
   1fa90:	cmp	r3, r1
   1fa94:	cmpeq	r2, r0
   1fa98:	beq	1fb40 <_start@@Base+0xd4b0>
   1fa9c:	ldrd	r2, [sp, #48]	; 0x30
   1faa0:	bic	r1, r2, #255	; 0xff
   1faa4:	str	r1, [sp, #120]	; 0x78
   1faa8:	str	r3, [sp, #124]	; 0x7c
   1faac:	ldrd	r2, [sp, #120]	; 0x78
   1fab0:	add	r1, pc, #456	; 0x1c8
   1fab4:	ldrd	r0, [r1]
   1fab8:	cmp	r3, r1
   1fabc:	cmpeq	r2, r0
   1fac0:	beq	1fc90 <_start@@Base+0xd600>
   1fac4:	mov	r2, r7
   1fac8:	mov	r1, fp
   1facc:	mov	r0, r6
   1fad0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1fad4:	mov	sl, r0
   1fad8:	b	1fe3c <_start@@Base+0xd7ac>
   1fadc:	mov	r0, #0
   1fae0:	mov	r1, #0
   1fae4:	b	1fa40 <_start@@Base+0xd3b0>
   1fae8:	mov	r2, #0
   1faec:	mov	r3, r2
   1faf0:	b	1fa4c <_start@@Base+0xd3bc>
   1faf4:	mov	r2, #0
   1faf8:	mov	r3, r2
   1fafc:	b	1fa54 <_start@@Base+0xd3c4>
   1fb00:	mov	r2, #0
   1fb04:	mov	r3, r2
   1fb08:	b	1fa5c <_start@@Base+0xd3cc>
   1fb0c:	mov	r2, #0
   1fb10:	mov	r3, r2
   1fb14:	b	1fa64 <_start@@Base+0xd3d4>
   1fb18:	mov	r2, #0
   1fb1c:	mov	r3, r2
   1fb20:	b	1fa6c <_start@@Base+0xd3dc>
   1fb24:	mov	r2, #0
   1fb28:	mov	r3, r2
   1fb2c:	b	1fa74 <_start@@Base+0xd3e4>
   1fb30:	mov	r2, #0
   1fb34:	mov	r3, #0
   1fb38:	strd	r2, [sp, #48]	; 0x30
   1fb3c:	b	1fa84 <_start@@Base+0xd3f4>
   1fb40:	add	sl, sl, #16
   1fb44:	mov	r1, r7
   1fb48:	mov	r0, sl
   1fb4c:	bl	12780 <_start@@Base+0xf0>
   1fb50:	and	r3, r0, #-16777216	; 0xff000000
   1fb54:	str	r3, [sp, #152]	; 0x98
   1fb58:	str	r1, [sp, #156]	; 0x9c
   1fb5c:	ldrd	r2, [sp, #152]	; 0x98
   1fb60:	add	r1, pc, #288	; 0x120
   1fb64:	ldrd	r0, [r1]
   1fb68:	cmp	r3, r1
   1fb6c:	cmpeq	r2, r0
   1fb70:	beq	1fb8c <_start@@Base+0xd4fc>
   1fb74:	mov	r2, r7
   1fb78:	mov	r1, sl
   1fb7c:	mov	r0, r6
   1fb80:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb84:	mov	sl, r0
   1fb88:	b	1fe3c <_start@@Base+0xd7ac>
   1fb8c:	mov	r3, #5
   1fb90:	mov	r2, r7
   1fb94:	mov	r1, sl
   1fb98:	mov	r0, r6
   1fb9c:	bl	14594 <_start@@Base+0x1f04>
   1fba0:	mov	fp, r0
   1fba4:	cmp	sl, r0
   1fba8:	beq	1fc58 <_start@@Base+0xd5c8>
   1fbac:	mov	r3, #0
   1fbb0:	str	r3, [sp, #320]	; 0x140
   1fbb4:	add	r3, sp, #320	; 0x140
   1fbb8:	mov	r2, r7
   1fbbc:	mov	r1, r0
   1fbc0:	mov	r0, r6
   1fbc4:	bl	1423c <_start@@Base+0x1bac>
   1fbc8:	mov	sl, r0
   1fbcc:	cmp	fp, r0
   1fbd0:	beq	1fc14 <_start@@Base+0xd584>
   1fbd4:	ldr	r3, [sp, #320]	; 0x140
   1fbd8:	cmp	r3, #0
   1fbdc:	bne	1fbec <_start@@Base+0xd55c>
   1fbe0:	ldr	r3, [r6, #8]
   1fbe4:	tst	r3, #2
   1fbe8:	beq	1fe3c <_start@@Base+0xd7ac>
   1fbec:	mov	r3, #4
   1fbf0:	mov	r2, r3
   1fbf4:	mov	r1, #1
   1fbf8:	ldr	r0, [r6]
   1fbfc:	bl	2565c <flatcc_builder_table_add@@Base>
   1fc00:	cmp	r0, #0
   1fc04:	beq	20090 <_start@@Base+0xda00>
   1fc08:	ldr	r3, [sp, #320]	; 0x140
   1fc0c:	str	r3, [r0]
   1fc10:	b	1fe3c <_start@@Base+0xd7ac>
   1fc14:	add	r3, sp, #320	; 0x140
   1fc18:	str	r3, [sp]
   1fc1c:	ldr	r3, [sp, #276]	; 0x114
   1fc20:	add	r3, r3, #612	; 0x264
   1fc24:	mov	r2, r7
   1fc28:	mov	r1, r0
   1fc2c:	mov	r0, r6
   1fc30:	bl	15548 <_start@@Base+0x2eb8>
   1fc34:	cmp	r7, r0
   1fc38:	cmpne	sl, r0
   1fc3c:	beq	1fc48 <_start@@Base+0xd5b8>
   1fc40:	mov	sl, r0
   1fc44:	b	1fbd4 <_start@@Base+0xd544>
   1fc48:	mov	r5, r7
   1fc4c:	mov	r7, r6
   1fc50:	mov	r6, r0
   1fc54:	b	1f8c4 <_start@@Base+0xd234>
   1fc58:	mov	r2, r7
   1fc5c:	mov	r1, r0
   1fc60:	mov	r0, r6
   1fc64:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1fc68:	mov	sl, r0
   1fc6c:	b	1fe3c <_start@@Base+0xd7ac>
   1fc70:	svcpl	0x00626262
   1fc74:	cmnvs	r1, r1, ror #2
   1fc78:	cmnvs	r2, pc, asr r4
   1fc7c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1fc80:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1fc84:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1fc88:	movwvc	r0, #0
   1fc8c:	cmnvc	r4, #112, 10	; 0x1c000000
   1fc90:	mov	r3, #7
   1fc94:	mov	r2, r7
   1fc98:	mov	r1, fp
   1fc9c:	mov	r0, r6
   1fca0:	bl	14594 <_start@@Base+0x1f04>
   1fca4:	mov	r9, r0
   1fca8:	cmp	fp, r0
   1fcac:	beq	1fe10 <_start@@Base+0xd780>
   1fcb0:	mov	r2, #0
   1fcb4:	mov	r3, #0
   1fcb8:	add	r1, sp, #312	; 0x138
   1fcbc:	strd	r2, [r1]
   1fcc0:	add	r1, sp, #320	; 0x140
   1fcc4:	strd	r2, [r1]
   1fcc8:	mov	r3, #0
   1fccc:	str	r3, [sp, #308]	; 0x134
   1fcd0:	cmp	r7, r0
   1fcd4:	beq	20e84 <_start@@Base+0xe7f4>
   1fcd8:	str	r1, [sp]
   1fcdc:	add	r3, sp, #308	; 0x134
   1fce0:	mov	r2, r7
   1fce4:	mov	r1, r0
   1fce8:	mov	r0, r6
   1fcec:	bl	29968 <flatcc_json_parser_integer@@Base>
   1fcf0:	mov	sl, r0
   1fcf4:	cmp	r9, r0
   1fcf8:	bne	1fd3c <_start@@Base+0xd6ac>
   1fcfc:	mov	fp, sl
   1fd00:	add	r3, sp, #312	; 0x138
   1fd04:	str	r3, [sp]
   1fd08:	ldr	r3, [sp, #272]	; 0x110
   1fd0c:	mov	r2, r7
   1fd10:	mov	r1, fp
   1fd14:	mov	r0, r6
   1fd18:	bl	15e6c <_start@@Base+0x37dc>
   1fd1c:	mov	sl, r0
   1fd20:	cmp	r7, r0
   1fd24:	cmpne	r0, fp
   1fd28:	bne	1fd90 <_start@@Base+0xd700>
   1fd2c:	mov	r5, r7
   1fd30:	mov	r7, r6
   1fd34:	mov	r6, r0
   1fd38:	b	1f8c4 <_start@@Base+0xd234>
   1fd3c:	add	r3, sp, #320	; 0x140
   1fd40:	ldrd	r2, [r3]
   1fd44:	ldr	r1, [sp, #308]	; 0x134
   1fd48:	cmp	r1, #0
   1fd4c:	beq	1fdd8 <_start@@Base+0xd748>
   1fd50:	cmp	r3, #-2147483648	; 0x80000000
   1fd54:	cmpeq	r2, #0
   1fd58:	bhi	1fd70 <_start@@Base+0xd6e0>
   1fd5c:	rsbs	r2, r2, #0
   1fd60:	rsc	r3, r3, #0
   1fd64:	add	r1, sp, #312	; 0x138
   1fd68:	strd	r2, [r1]
   1fd6c:	b	1fd90 <_start@@Base+0xd700>
   1fd70:	mov	r3, #8
   1fd74:	mov	r2, r7
   1fd78:	mov	r1, r0
   1fd7c:	mov	r0, r6
   1fd80:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1fd84:	mov	sl, r0
   1fd88:	cmp	r9, sl
   1fd8c:	beq	1fe08 <_start@@Base+0xd778>
   1fd90:	add	r3, sp, #312	; 0x138
   1fd94:	ldrd	r2, [r3]
   1fd98:	orrs	r3, r2, r3
   1fd9c:	bne	1fdac <_start@@Base+0xd71c>
   1fda0:	ldr	r3, [r6, #8]
   1fda4:	tst	r3, #2
   1fda8:	beq	1fe3c <_start@@Base+0xd7ac>
   1fdac:	mov	r3, #8
   1fdb0:	mov	r2, r3
   1fdb4:	mov	r1, #0
   1fdb8:	ldr	r0, [r6]
   1fdbc:	bl	2565c <flatcc_builder_table_add@@Base>
   1fdc0:	cmp	r0, #0
   1fdc4:	beq	200a0 <_start@@Base+0xda10>
   1fdc8:	add	r3, sp, #312	; 0x138
   1fdcc:	ldrd	r2, [r3]
   1fdd0:	strd	r2, [r0]
   1fdd4:	b	1fe3c <_start@@Base+0xd7ac>
   1fdd8:	cmp	r2, #0
   1fddc:	sbcs	r1, r3, #0
   1fde0:	addge	r1, sp, #312	; 0x138
   1fde4:	strdge	r2, [r1]
   1fde8:	bge	1fd90 <_start@@Base+0xd700>
   1fdec:	mov	r3, #7
   1fdf0:	mov	r2, r7
   1fdf4:	mov	r1, r0
   1fdf8:	mov	r0, r6
   1fdfc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1fe00:	mov	sl, r0
   1fe04:	b	1fd88 <_start@@Base+0xd6f8>
   1fe08:	mov	fp, sl
   1fe0c:	b	1fd00 <_start@@Base+0xd670>
   1fe10:	mov	r2, r7
   1fe14:	mov	r1, r0
   1fe18:	mov	r0, r6
   1fe1c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1fe20:	mov	sl, r0
   1fe24:	b	1fe3c <_start@@Base+0xd7ac>
   1fe28:	mov	r2, r7
   1fe2c:	mov	r1, sl
   1fe30:	mov	r0, r6
   1fe34:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   1fe38:	mov	sl, r0
   1fe3c:	sub	r3, r7, sl
   1fe40:	cmp	r3, #1
   1fe44:	ble	1fe58 <_start@@Base+0xd7c8>
   1fe48:	ldrb	r3, [sl]
   1fe4c:	cmp	r3, #32
   1fe50:	bhi	1fe6c <_start@@Base+0xd7dc>
   1fe54:	beq	1ff2c <_start@@Base+0xd89c>
   1fe58:	mov	r2, r7
   1fe5c:	mov	r1, sl
   1fe60:	mov	r0, r6
   1fe64:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1fe68:	mov	sl, r0
   1fe6c:	cmp	r7, sl
   1fe70:	moveq	r3, #0
   1fe74:	streq	r3, [sp, #304]	; 0x130
   1fe78:	beq	1feb4 <_start@@Base+0xd824>
   1fe7c:	ldrb	r3, [sl]
   1fe80:	cmp	r3, #44	; 0x2c
   1fe84:	beq	1ff8c <_start@@Base+0xd8fc>
   1fe88:	mov	r3, #0
   1fe8c:	str	r3, [sp, #304]	; 0x130
   1fe90:	ldrb	r3, [sl]
   1fe94:	cmp	r3, #125	; 0x7d
   1fe98:	beq	1ff40 <_start@@Base+0xd8b0>
   1fe9c:	mov	r3, #10
   1fea0:	mov	r2, r7
   1fea4:	mov	r1, sl
   1fea8:	mov	r0, r6
   1feac:	bl	27930 <flatcc_json_parser_set_error@@Base>
   1feb0:	mov	sl, r0
   1feb4:	ldr	r3, [sp, #304]	; 0x130
   1feb8:	cmp	r3, #0
   1febc:	beq	20034 <_start@@Base+0xd9a4>
   1fec0:	cmp	r7, sl
   1fec4:	beq	1fef0 <_start@@Base+0xd860>
   1fec8:	ldrb	r3, [sl]
   1fecc:	cmp	r3, #34	; 0x22
   1fed0:	addeq	sl, sl, #1
   1fed4:	moveq	r3, #0
   1fed8:	streq	r3, [r6, #12]
   1fedc:	beq	1fef0 <_start@@Base+0xd860>
   1fee0:	cmp	r3, #46	; 0x2e
   1fee4:	movne	r3, #1
   1fee8:	strne	r3, [r6, #12]
   1feec:	beq	1f91c <_start@@Base+0xd28c>
   1fef0:	sub	r3, r7, sl
   1fef4:	cmp	r3, #8
   1fef8:	bhi	1f938 <_start@@Base+0xd2a8>
   1fefc:	sub	r3, r3, #1
   1ff00:	cmp	r3, #7
   1ff04:	ldrls	pc, [pc, r3, lsl #2]
   1ff08:	b	1fa28 <_start@@Base+0xd398>
   1ff0c:	andeq	pc, r1, ip, lsl sl	; <UNPREDICTABLE>
   1ff10:	andeq	pc, r1, r0, lsl sl	; <UNPREDICTABLE>
   1ff14:	andeq	pc, r1, r4, lsl #20
   1ff18:	strdeq	pc, [r1], -r8
   1ff1c:	andeq	pc, r1, ip, ror #19
   1ff20:	andeq	pc, r1, r0, ror #19
   1ff24:	ldrdeq	pc, [r1], -r4
   1ff28:	andeq	pc, r1, r8, lsr r9	; <UNPREDICTABLE>
   1ff2c:	ldrb	r3, [sl, #1]
   1ff30:	cmp	r3, #32
   1ff34:	addhi	sl, sl, #1
   1ff38:	bls	1fe58 <_start@@Base+0xd7c8>
   1ff3c:	b	1fe6c <_start@@Base+0xd7dc>
   1ff40:	add	r1, sl, #1
   1ff44:	sub	r3, r7, r1
   1ff48:	cmp	r3, #1
   1ff4c:	ble	1ff64 <_start@@Base+0xd8d4>
   1ff50:	ldrb	r3, [sl, #1]
   1ff54:	cmp	r3, #32
   1ff58:	movhi	sl, r1
   1ff5c:	bhi	1feb4 <_start@@Base+0xd824>
   1ff60:	beq	1ff78 <_start@@Base+0xd8e8>
   1ff64:	mov	r2, r7
   1ff68:	mov	r0, r6
   1ff6c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1ff70:	mov	sl, r0
   1ff74:	b	1feb4 <_start@@Base+0xd824>
   1ff78:	ldrb	r3, [sl, #2]
   1ff7c:	cmp	r3, #32
   1ff80:	addhi	sl, sl, #2
   1ff84:	bls	1ff64 <_start@@Base+0xd8d4>
   1ff88:	b	1feb4 <_start@@Base+0xd824>
   1ff8c:	add	r1, sl, #1
   1ff90:	sub	r3, r7, r1
   1ff94:	cmp	r3, #1
   1ff98:	ble	1ffb0 <_start@@Base+0xd920>
   1ff9c:	ldrb	r3, [sl, #1]
   1ffa0:	cmp	r3, #32
   1ffa4:	movhi	sl, r1
   1ffa8:	bhi	1ffc0 <_start@@Base+0xd930>
   1ffac:	beq	1fffc <_start@@Base+0xd96c>
   1ffb0:	mov	r2, r7
   1ffb4:	mov	r0, r6
   1ffb8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   1ffbc:	mov	sl, r0
   1ffc0:	cmp	r7, sl
   1ffc4:	beq	20010 <_start@@Base+0xd980>
   1ffc8:	ldrb	r3, [sl]
   1ffcc:	cmp	r3, #125	; 0x7d
   1ffd0:	movne	r3, #1
   1ffd4:	strne	r3, [sp, #304]	; 0x130
   1ffd8:	bne	1feb4 <_start@@Base+0xd824>
   1ffdc:	mov	r3, #0
   1ffe0:	str	r3, [sp, #304]	; 0x130
   1ffe4:	mov	r2, r7
   1ffe8:	add	r1, sl, #1
   1ffec:	mov	r0, r6
   1fff0:	bl	14544 <_start@@Base+0x1eb4>
   1fff4:	mov	sl, r0
   1fff8:	b	1feb4 <_start@@Base+0xd824>
   1fffc:	ldrb	r3, [sl, #2]
   20000:	cmp	r3, #32
   20004:	addhi	sl, sl, #2
   20008:	bls	1ffb0 <_start@@Base+0xd920>
   2000c:	b	1ffc0 <_start@@Base+0xd930>
   20010:	mov	r3, #0
   20014:	str	r3, [sp, #304]	; 0x130
   20018:	mov	r3, #10
   2001c:	mov	r2, r7
   20020:	mov	r1, sl
   20024:	mov	r0, r6
   20028:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2002c:	mov	sl, r0
   20030:	b	1feb4 <_start@@Base+0xd824>
   20034:	ldrd	r8, [sp, #160]	; 0xa0
   20038:	ldr	r3, [r6, #24]
   2003c:	cmp	r3, #0
   20040:	beq	20054 <_start@@Base+0xd9c4>
   20044:	mov	r5, r7
   20048:	mov	r7, r6
   2004c:	mov	r6, sl
   20050:	b	1f8c4 <_start@@Base+0xd234>
   20054:	ldr	r0, [r6]
   20058:	bl	24570 <flatcc_builder_end_table@@Base>
   2005c:	subs	r4, r0, #0
   20060:	beq	20080 <_start@@Base+0xd9f0>
   20064:	mov	r1, #2
   20068:	ldr	r0, [r6]
   2006c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   20070:	cmp	r0, #0
   20074:	beq	20e74 <_start@@Base+0xe7e4>
   20078:	str	r4, [r0]
   2007c:	b	200fc <_start@@Base+0xda6c>
   20080:	mov	r5, r7
   20084:	mov	r7, r6
   20088:	mov	r6, sl
   2008c:	b	1f8c4 <_start@@Base+0xd234>
   20090:	mov	r5, r7
   20094:	mov	r7, r6
   20098:	mov	r6, sl
   2009c:	b	1f8c4 <_start@@Base+0xd234>
   200a0:	mov	r5, r7
   200a4:	mov	r7, r6
   200a8:	mov	r6, sl
   200ac:	b	1f8c4 <_start@@Base+0xd234>
   200b0:	mov	r2, r7
   200b4:	mov	r1, r0
   200b8:	mov	r0, r6
   200bc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   200c0:	mov	sl, r0
   200c4:	b	200fc <_start@@Base+0xda6c>
   200c8:	mov	r4, r0
   200cc:	b	1e3e0 <_start@@Base+0xbd50>
   200d0:	mov	r2, r7
   200d4:	mov	r1, ip
   200d8:	mov	r0, r6
   200dc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   200e0:	mov	sl, r0
   200e4:	b	200fc <_start@@Base+0xda6c>
   200e8:	mov	r2, r7
   200ec:	mov	r1, sl
   200f0:	mov	r0, r6
   200f4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   200f8:	mov	sl, r0
   200fc:	sub	r3, r7, sl
   20100:	cmp	r3, #1
   20104:	ble	20118 <_start@@Base+0xda88>
   20108:	ldrb	r3, [sl]
   2010c:	cmp	r3, #32
   20110:	bhi	2012c <_start@@Base+0xda9c>
   20114:	beq	201ec <_start@@Base+0xdb5c>
   20118:	mov	r2, r7
   2011c:	mov	r1, sl
   20120:	mov	r0, r6
   20124:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   20128:	mov	sl, r0
   2012c:	cmp	r7, sl
   20130:	moveq	r3, #0
   20134:	streq	r3, [sp, #300]	; 0x12c
   20138:	beq	20174 <_start@@Base+0xdae4>
   2013c:	ldrb	r3, [sl]
   20140:	cmp	r3, #44	; 0x2c
   20144:	beq	2024c <_start@@Base+0xdbbc>
   20148:	mov	r3, #0
   2014c:	str	r3, [sp, #300]	; 0x12c
   20150:	ldrb	r3, [sl]
   20154:	cmp	r3, #125	; 0x7d
   20158:	beq	20200 <_start@@Base+0xdb70>
   2015c:	mov	r3, #10
   20160:	mov	r2, r7
   20164:	mov	r1, sl
   20168:	mov	r0, r6
   2016c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   20170:	mov	sl, r0
   20174:	ldr	r3, [sp, #300]	; 0x12c
   20178:	cmp	r3, #0
   2017c:	beq	20328 <_start@@Base+0xdc98>
   20180:	cmp	r7, sl
   20184:	beq	201b0 <_start@@Base+0xdb20>
   20188:	ldrb	r3, [sl]
   2018c:	cmp	r3, #34	; 0x22
   20190:	addeq	sl, sl, #1
   20194:	moveq	r3, #0
   20198:	streq	r3, [r6, #12]
   2019c:	beq	201b0 <_start@@Base+0xdb20>
   201a0:	cmp	r3, #46	; 0x2e
   201a4:	movne	r3, #1
   201a8:	strne	r3, [r6, #12]
   201ac:	beq	1e0d4 <_start@@Base+0xba44>
   201b0:	sub	r3, r7, sl
   201b4:	cmp	r3, #8
   201b8:	bhi	1e0f0 <_start@@Base+0xba60>
   201bc:	sub	r3, r3, #1
   201c0:	cmp	r3, #7
   201c4:	ldrls	pc, [pc, r3, lsl #2]
   201c8:	b	1e220 <_start@@Base+0xbb90>
   201cc:	andeq	lr, r1, r4, lsl r2
   201d0:	andeq	lr, r1, r8, lsl #4
   201d4:	strdeq	lr, [r1], -ip
   201d8:	strdeq	lr, [r1], -r0
   201dc:	andeq	lr, r1, r4, ror #3
   201e0:	andeq	lr, r1, r0, lsr #3
   201e4:	muleq	r1, r4, r1
   201e8:	strdeq	lr, [r1], -r0
   201ec:	ldrb	r3, [sl, #1]
   201f0:	cmp	r3, #32
   201f4:	addhi	sl, sl, #1
   201f8:	bls	20118 <_start@@Base+0xda88>
   201fc:	b	2012c <_start@@Base+0xda9c>
   20200:	add	r1, sl, #1
   20204:	sub	r3, r7, r1
   20208:	cmp	r3, #1
   2020c:	ble	20224 <_start@@Base+0xdb94>
   20210:	ldrb	r3, [sl, #1]
   20214:	cmp	r3, #32
   20218:	movhi	sl, r1
   2021c:	bhi	20174 <_start@@Base+0xdae4>
   20220:	beq	20238 <_start@@Base+0xdba8>
   20224:	mov	r2, r7
   20228:	mov	r0, r6
   2022c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   20230:	mov	sl, r0
   20234:	b	20174 <_start@@Base+0xdae4>
   20238:	ldrb	r3, [sl, #2]
   2023c:	cmp	r3, #32
   20240:	addhi	sl, sl, #2
   20244:	bls	20224 <_start@@Base+0xdb94>
   20248:	b	20174 <_start@@Base+0xdae4>
   2024c:	add	r1, sl, #1
   20250:	sub	r3, r7, r1
   20254:	cmp	r3, #1
   20258:	ble	20270 <_start@@Base+0xdbe0>
   2025c:	ldrb	r3, [sl, #1]
   20260:	cmp	r3, #32
   20264:	movhi	sl, r1
   20268:	bhi	20280 <_start@@Base+0xdbf0>
   2026c:	beq	202dc <_start@@Base+0xdc4c>
   20270:	mov	r2, r7
   20274:	mov	r0, r6
   20278:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2027c:	mov	sl, r0
   20280:	cmp	r7, sl
   20284:	beq	202f0 <_start@@Base+0xdc60>
   20288:	ldrb	r3, [sl]
   2028c:	cmp	r3, #125	; 0x7d
   20290:	movne	r3, #1
   20294:	strne	r3, [sp, #300]	; 0x12c
   20298:	bne	20174 <_start@@Base+0xdae4>
   2029c:	mov	r3, #0
   202a0:	str	r3, [sp, #300]	; 0x12c
   202a4:	add	r1, sl, #1
   202a8:	sub	r3, r7, r1
   202ac:	cmp	r3, #1
   202b0:	ble	202c8 <_start@@Base+0xdc38>
   202b4:	ldrb	r3, [sl, #1]
   202b8:	cmp	r3, #32
   202bc:	movhi	sl, r1
   202c0:	bhi	20174 <_start@@Base+0xdae4>
   202c4:	beq	20314 <_start@@Base+0xdc84>
   202c8:	mov	r2, r7
   202cc:	mov	r0, r6
   202d0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   202d4:	mov	sl, r0
   202d8:	b	20174 <_start@@Base+0xdae4>
   202dc:	ldrb	r3, [sl, #2]
   202e0:	cmp	r3, #32
   202e4:	addhi	sl, sl, #2
   202e8:	bls	20270 <_start@@Base+0xdbe0>
   202ec:	b	20280 <_start@@Base+0xdbf0>
   202f0:	mov	r3, #0
   202f4:	str	r3, [sp, #300]	; 0x12c
   202f8:	mov	r3, #10
   202fc:	mov	r2, r7
   20300:	mov	r1, sl
   20304:	mov	r0, r6
   20308:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2030c:	mov	sl, r0
   20310:	b	20174 <_start@@Base+0xdae4>
   20314:	ldrb	r3, [sl, #2]
   20318:	cmp	r3, #32
   2031c:	addhi	sl, sl, #2
   20320:	bls	202c8 <_start@@Base+0xdc38>
   20324:	b	20174 <_start@@Base+0xdae4>
   20328:	ldr	r3, [r6, #24]
   2032c:	cmp	r3, #0
   20330:	beq	20344 <_start@@Base+0xdcb4>
   20334:	mov	r5, r7
   20338:	mov	r7, r6
   2033c:	mov	r6, sl
   20340:	b	1ed30 <_start@@Base+0xc6a0>
   20344:	ldr	r0, [r6]
   20348:	bl	24570 <flatcc_builder_end_table@@Base>
   2034c:	subs	r4, r0, #0
   20350:	beq	20370 <_start@@Base+0xdce0>
   20354:	mov	r1, #0
   20358:	ldr	r0, [r6]
   2035c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   20360:	cmp	r0, #0
   20364:	beq	20e44 <_start@@Base+0xe7b4>
   20368:	str	r4, [r0]
   2036c:	b	1de64 <_start@@Base+0xb7d4>
   20370:	mov	r5, r7
   20374:	mov	r7, r6
   20378:	mov	r6, sl
   2037c:	b	1ed30 <_start@@Base+0xc6a0>
   20380:	mov	r2, r7
   20384:	mov	r1, r4
   20388:	mov	r0, r6
   2038c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20390:	mov	sl, r0
   20394:	b	1de64 <_start@@Base+0xb7d4>
   20398:	mov	r3, #5
   2039c:	mov	r2, r7
   203a0:	mov	r1, r4
   203a4:	mov	r0, r6
   203a8:	bl	14594 <_start@@Base+0x1f04>
   203ac:	mov	sl, r0
   203b0:	cmp	r0, r4
   203b4:	beq	20d80 <_start@@Base+0xe6f0>
   203b8:	mov	r1, #10
   203bc:	ldr	r0, [r6]
   203c0:	bl	23a98 <flatcc_builder_start_table@@Base>
   203c4:	cmp	r0, #0
   203c8:	beq	20408 <_start@@Base+0xdd78>
   203cc:	mov	r5, r7
   203d0:	mov	r7, r6
   203d4:	mov	r3, #33	; 0x21
   203d8:	mov	r2, r5
   203dc:	mov	r1, sl
   203e0:	mov	r0, r7
   203e4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   203e8:	mov	r4, r0
   203ec:	mov	r3, #33	; 0x21
   203f0:	mov	r2, r5
   203f4:	mov	r1, r4
   203f8:	mov	r0, r7
   203fc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   20400:	mov	r4, r0
   20404:	b	1db94 <_start@@Base+0xb504>
   20408:	add	r3, sp, #320	; 0x140
   2040c:	str	r3, [sp]
   20410:	mov	r3, #5
   20414:	mov	r2, r7
   20418:	mov	r1, sl
   2041c:	mov	r0, r6
   20420:	bl	2a0b0 <flatcc_json_parser_prepare_unions@@Base>
   20424:	cmp	r7, r0
   20428:	beq	203cc <_start@@Base+0xdd3c>
   2042c:	add	r3, sp, #312	; 0x138
   20430:	mov	r2, r7
   20434:	mov	r1, sl
   20438:	mov	r0, r6
   2043c:	bl	14680 <_start@@Base+0x1ff0>
   20440:	mov	sl, r0
   20444:	ldr	r3, [sp, #312]	; 0x138
   20448:	cmp	r3, #0
   2044c:	beq	20d30 <_start@@Base+0xe6a0>
   20450:	add	r5, pc, #896	; 0x380
   20454:	ldrd	r4, [r5]
   20458:	strd	r8, [sp, #160]	; 0xa0
   2045c:	mov	r9, r6
   20460:	mov	fp, r7
   20464:	b	206f0 <_start@@Base+0xe060>
   20468:	mov	r3, #5
   2046c:	mov	r2, fp
   20470:	mov	r1, sl
   20474:	mov	r0, r9
   20478:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2047c:	mov	sl, r0
   20480:	b	20720 <_start@@Base+0xe090>
   20484:	add	sl, sl, #8
   20488:	mov	r1, fp
   2048c:	mov	r0, sl
   20490:	bl	12780 <_start@@Base+0xf0>
   20494:	bic	r3, r0, #255	; 0xff
   20498:	str	r3, [sp, #216]	; 0xd8
   2049c:	str	r1, [sp, #220]	; 0xdc
   204a0:	add	r3, pc, #824	; 0x338
   204a4:	ldrd	r2, [r3]
   204a8:	ldrd	r6, [sp, #216]	; 0xd8
   204ac:	cmp	r7, r3
   204b0:	cmpeq	r6, r2
   204b4:	beq	20500 <_start@@Base+0xde70>
   204b8:	mov	r3, #0
   204bc:	str	r3, [sp, #176]	; 0xb0
   204c0:	lsr	r3, r1, #16
   204c4:	lsl	r3, r3, #16
   204c8:	str	r3, [sp, #180]	; 0xb4
   204cc:	mov	r2, #0
   204d0:	mov	r3, #0
   204d4:	movt	r3, #29556	; 0x7374
   204d8:	ldrd	r0, [sp, #176]	; 0xb0
   204dc:	cmp	r1, r3
   204e0:	cmpeq	r0, r2
   204e4:	beq	20570 <_start@@Base+0xdee0>
   204e8:	mov	r2, fp
   204ec:	mov	r1, sl
   204f0:	mov	r0, r9
   204f4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   204f8:	mov	r1, r0
   204fc:	b	206d0 <_start@@Base+0xe040>
   20500:	mov	r3, #7
   20504:	mov	r2, fp
   20508:	mov	r1, sl
   2050c:	mov	r0, r9
   20510:	bl	14594 <_start@@Base+0x1f04>
   20514:	mov	r1, r0
   20518:	cmp	sl, r0
   2051c:	beq	2055c <_start@@Base+0xdecc>
   20520:	movw	r3, #26384	; 0x6710
   20524:	movt	r3, #1
   20528:	str	r3, [sp, #12]
   2052c:	ldr	r3, [pc, #716]	; 20800 <_start@@Base+0xe170>
   20530:	str	r3, [sp, #8]
   20534:	ldr	r3, [sp, #320]	; 0x140
   20538:	str	r3, [sp, #4]
   2053c:	mov	r3, #3
   20540:	str	r3, [sp]
   20544:	mov	r3, #1
   20548:	mov	r2, fp
   2054c:	mov	r0, r9
   20550:	bl	2a314 <flatcc_json_parser_union_type@@Base>
   20554:	mov	r1, r0
   20558:	b	206d0 <_start@@Base+0xe040>
   2055c:	mov	r2, fp
   20560:	mov	r0, r9
   20564:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20568:	mov	r1, r0
   2056c:	b	206d0 <_start@@Base+0xe040>
   20570:	mov	r3, #2
   20574:	mov	r2, fp
   20578:	mov	r1, sl
   2057c:	mov	r0, r9
   20580:	bl	14594 <_start@@Base+0x1f04>
   20584:	mov	r1, r0
   20588:	cmp	sl, r0
   2058c:	beq	205c4 <_start@@Base+0xdf34>
   20590:	movw	r3, #26384	; 0x6710
   20594:	movt	r3, #1
   20598:	str	r3, [sp, #8]
   2059c:	ldr	r3, [sp, #320]	; 0x140
   205a0:	str	r3, [sp, #4]
   205a4:	mov	r3, #3
   205a8:	str	r3, [sp]
   205ac:	mov	r3, #1
   205b0:	mov	r2, fp
   205b4:	mov	r0, r9
   205b8:	bl	2a1ac <flatcc_json_parser_union@@Base>
   205bc:	mov	r1, r0
   205c0:	b	206d0 <_start@@Base+0xe040>
   205c4:	mov	r2, fp
   205c8:	mov	r0, r9
   205cc:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   205d0:	mov	r1, r0
   205d4:	b	206d0 <_start@@Base+0xe040>
   205d8:	add	sl, sl, #8
   205dc:	mov	r1, fp
   205e0:	mov	r0, sl
   205e4:	bl	12780 <_start@@Base+0xf0>
   205e8:	mov	r3, #0
   205ec:	str	r3, [sp, #192]	; 0xc0
   205f0:	lsr	r3, r1, #16
   205f4:	lsl	r3, r3, #16
   205f8:	str	r3, [sp, #196]	; 0xc4
   205fc:	mov	r2, #0
   20600:	mov	r3, #0
   20604:	movt	r3, #28773	; 0x7065
   20608:	ldrd	r0, [sp, #192]	; 0xc0
   2060c:	cmp	r1, r3
   20610:	cmpeq	r0, r2
   20614:	beq	20630 <_start@@Base+0xdfa0>
   20618:	mov	r2, fp
   2061c:	mov	r1, sl
   20620:	mov	r0, r9
   20624:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20628:	mov	r1, r0
   2062c:	b	206d0 <_start@@Base+0xe040>
   20630:	mov	r3, #2
   20634:	mov	r2, fp
   20638:	mov	r1, sl
   2063c:	mov	r0, r9
   20640:	bl	14594 <_start@@Base+0x1f04>
   20644:	cmp	sl, r0
   20648:	beq	2068c <_start@@Base+0xdffc>
   2064c:	movw	r3, #26384	; 0x6710
   20650:	movt	r3, #1
   20654:	str	r3, [sp, #12]
   20658:	ldr	r3, [pc, #420]	; 20804 <_start@@Base+0xe174>
   2065c:	str	r3, [sp, #8]
   20660:	ldr	r3, [sp, #320]	; 0x140
   20664:	str	r3, [sp, #4]
   20668:	mov	r3, #7
   2066c:	str	r3, [sp]
   20670:	mov	r3, #3
   20674:	mov	r2, fp
   20678:	mov	r1, r0
   2067c:	mov	r0, r9
   20680:	bl	2a314 <flatcc_json_parser_union_type@@Base>
   20684:	mov	r1, r0
   20688:	b	206d0 <_start@@Base+0xe040>
   2068c:	mov	r2, fp
   20690:	mov	r1, r0
   20694:	mov	r0, r9
   20698:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   2069c:	mov	r1, r0
   206a0:	b	206d0 <_start@@Base+0xe040>
   206a4:	mov	r2, fp
   206a8:	mov	r1, sl
   206ac:	mov	r0, r9
   206b0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   206b4:	mov	r1, r0
   206b8:	b	206d0 <_start@@Base+0xe040>
   206bc:	mov	r2, fp
   206c0:	mov	r1, sl
   206c4:	mov	r0, r9
   206c8:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   206cc:	mov	r1, r0
   206d0:	add	r3, sp, #312	; 0x138
   206d4:	mov	r2, fp
   206d8:	mov	r0, r9
   206dc:	bl	18020 <_start@@Base+0x5990>
   206e0:	mov	sl, r0
   206e4:	ldr	r3, [sp, #312]	; 0x138
   206e8:	cmp	r3, #0
   206ec:	beq	20d24 <_start@@Base+0xe694>
   206f0:	cmp	fp, sl
   206f4:	beq	20720 <_start@@Base+0xe090>
   206f8:	ldrb	r3, [sl]
   206fc:	cmp	r3, #34	; 0x22
   20700:	addeq	sl, sl, #1
   20704:	moveq	r3, #0
   20708:	streq	r3, [r9, #12]
   2070c:	beq	20720 <_start@@Base+0xe090>
   20710:	cmp	r3, #46	; 0x2e
   20714:	movne	r3, #1
   20718:	strne	r3, [r9, #12]
   2071c:	beq	20468 <_start@@Base+0xddd8>
   20720:	mov	r1, fp
   20724:	mov	r0, sl
   20728:	bl	12780 <_start@@Base+0xf0>
   2072c:	cmp	r1, r5
   20730:	cmpeq	r0, r4
   20734:	bhi	20808 <_start@@Base+0xe178>
   20738:	add	r3, pc, #168	; 0xa8
   2073c:	ldrd	r2, [r3]
   20740:	cmp	r1, r3
   20744:	cmpeq	r0, r2
   20748:	beq	20484 <_start@@Base+0xddf4>
   2074c:	add	r3, pc, #156	; 0x9c
   20750:	ldrd	r2, [r3]
   20754:	cmp	r1, r3
   20758:	cmpeq	r0, r2
   2075c:	beq	205d8 <_start@@Base+0xdf48>
   20760:	and	r3, r0, #-16777216	; 0xff000000
   20764:	str	r3, [sp, #184]	; 0xb8
   20768:	str	r1, [sp, #188]	; 0xbc
   2076c:	add	r3, pc, #132	; 0x84
   20770:	ldrd	r2, [r3]
   20774:	ldrd	r0, [sp, #184]	; 0xb8
   20778:	cmp	r1, r3
   2077c:	cmpeq	r0, r2
   20780:	bne	206bc <_start@@Base+0xe02c>
   20784:	mov	r3, #5
   20788:	mov	r2, fp
   2078c:	mov	r1, sl
   20790:	mov	r0, r9
   20794:	bl	14594 <_start@@Base+0x1f04>
   20798:	cmp	r0, sl
   2079c:	beq	206a4 <_start@@Base+0xe014>
   207a0:	movw	r3, #26384	; 0x6710
   207a4:	movt	r3, #1
   207a8:	str	r3, [sp, #8]
   207ac:	ldr	r3, [sp, #320]	; 0x140
   207b0:	str	r3, [sp, #4]
   207b4:	mov	r3, #7
   207b8:	str	r3, [sp]
   207bc:	mov	r3, #3
   207c0:	mov	r2, fp
   207c4:	mov	r1, r0
   207c8:	mov	r0, r9
   207cc:	bl	2a1ac <flatcc_json_parser_union@@Base>
   207d0:	mov	r1, r0
   207d4:	b	206d0 <_start@@Base+0xe040>
   207d8:	cmnvs	r3, r4, ror #8
   207dc:	cmnvs	r8, #-2147483620	; 0x8000001c
   207e0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   207e4:	cmnvc	r4, #116, 30	; 0x1d0
   207e8:	strbvs	r6, [pc, -r9, ror #28]!
   207ec:	cmnvs	lr, r1, ror #8
   207f0:	svcvs	0x005f7479
   207f4:	cmnvs	r1, #6464	; 0x1940
   207f8:	svcvs	0x00000000
   207fc:	cmnvs	r1, #6464	; 0x1940
   20800:	strdeq	lr, [r3], -r4
   20804:	andeq	lr, r3, r4, lsl #6
   20808:	add	r3, pc, #976	; 0x3d0
   2080c:	ldrd	r2, [r3]
   20810:	cmp	r1, r3
   20814:	cmpeq	r0, r2
   20818:	bhi	209a8 <_start@@Base+0xe318>
   2081c:	add	r3, pc, #964	; 0x3c4
   20820:	ldrd	r2, [r3]
   20824:	cmp	r1, r3
   20828:	cmpeq	r0, r2
   2082c:	bne	20990 <_start@@Base+0xe300>
   20830:	add	sl, sl, #8
   20834:	mov	r1, fp
   20838:	mov	r0, sl
   2083c:	bl	12780 <_start@@Base+0xf0>
   20840:	bic	r3, r0, #255	; 0xff
   20844:	str	r3, [sp, #240]	; 0xf0
   20848:	str	r1, [sp, #244]	; 0xf4
   2084c:	add	r3, pc, #924	; 0x39c
   20850:	ldrd	r2, [r3]
   20854:	ldrd	r6, [sp, #240]	; 0xf0
   20858:	cmp	r7, r3
   2085c:	cmpeq	r6, r2
   20860:	beq	208ac <_start@@Base+0xe21c>
   20864:	mov	r3, #0
   20868:	str	r3, [sp, #224]	; 0xe0
   2086c:	lsr	r3, r1, #16
   20870:	lsl	r3, r3, #16
   20874:	str	r3, [sp, #228]	; 0xe4
   20878:	mov	r2, #0
   2087c:	mov	r3, #0
   20880:	movt	r3, #29299	; 0x7273
   20884:	ldrd	r0, [sp, #224]	; 0xe0
   20888:	cmp	r1, r3
   2088c:	cmpeq	r0, r2
   20890:	beq	20928 <_start@@Base+0xe298>
   20894:	mov	r2, fp
   20898:	mov	r1, sl
   2089c:	mov	r0, r9
   208a0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   208a4:	mov	r1, r0
   208a8:	b	206d0 <_start@@Base+0xe040>
   208ac:	mov	r3, #7
   208b0:	mov	r2, fp
   208b4:	mov	r1, sl
   208b8:	mov	r0, r9
   208bc:	bl	14594 <_start@@Base+0x1f04>
   208c0:	mov	r1, r0
   208c4:	cmp	sl, r0
   208c8:	beq	20914 <_start@@Base+0xe284>
   208cc:	movw	r3, #10372	; 0x2884
   208d0:	movt	r3, #1
   208d4:	str	r3, [sp, #16]
   208d8:	movw	r3, #26384	; 0x6710
   208dc:	movt	r3, #1
   208e0:	str	r3, [sp, #12]
   208e4:	ldr	r3, [pc, #828]	; 20c28 <_start@@Base+0xe598>
   208e8:	str	r3, [sp, #8]
   208ec:	ldr	r3, [sp, #320]	; 0x140
   208f0:	str	r3, [sp, #4]
   208f4:	mov	r3, #9
   208f8:	str	r3, [sp]
   208fc:	mov	r3, #4
   20900:	mov	r2, fp
   20904:	mov	r0, r9
   20908:	bl	2a644 <flatcc_json_parser_union_type_vector@@Base>
   2090c:	mov	r1, r0
   20910:	b	206d0 <_start@@Base+0xe040>
   20914:	mov	r2, fp
   20918:	mov	r0, r9
   2091c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20920:	mov	r1, r0
   20924:	b	206d0 <_start@@Base+0xe040>
   20928:	mov	r3, #2
   2092c:	mov	r2, fp
   20930:	mov	r1, sl
   20934:	mov	r0, r9
   20938:	bl	14594 <_start@@Base+0x1f04>
   2093c:	mov	r1, r0
   20940:	cmp	sl, r0
   20944:	beq	2097c <_start@@Base+0xe2ec>
   20948:	movw	r3, #26384	; 0x6710
   2094c:	movt	r3, #1
   20950:	str	r3, [sp, #8]
   20954:	ldr	r3, [sp, #320]	; 0x140
   20958:	str	r3, [sp, #4]
   2095c:	mov	r3, #9
   20960:	str	r3, [sp]
   20964:	mov	r3, #4
   20968:	mov	r2, fp
   2096c:	mov	r0, r9
   20970:	bl	2a558 <flatcc_json_parser_union_vector@@Base>
   20974:	mov	r1, r0
   20978:	b	206d0 <_start@@Base+0xe040>
   2097c:	mov	r2, fp
   20980:	mov	r0, r9
   20984:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20988:	mov	r1, r0
   2098c:	b	206d0 <_start@@Base+0xe040>
   20990:	mov	r2, fp
   20994:	mov	r1, sl
   20998:	mov	r0, r9
   2099c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   209a0:	mov	r1, r0
   209a4:	b	206d0 <_start@@Base+0xe040>
   209a8:	add	r3, pc, #584	; 0x248
   209ac:	ldrd	r2, [r3]
   209b0:	cmp	r1, r3
   209b4:	cmpeq	r0, r2
   209b8:	beq	20a44 <_start@@Base+0xe3b4>
   209bc:	add	r3, pc, #572	; 0x23c
   209c0:	ldrd	r2, [r3]
   209c4:	cmp	r1, r3
   209c8:	cmpeq	r0, r2
   209cc:	bne	20d0c <_start@@Base+0xe67c>
   209d0:	add	sl, sl, #8
   209d4:	mov	r1, fp
   209d8:	mov	r0, sl
   209dc:	bl	12780 <_start@@Base+0xf0>
   209e0:	lsr	r3, r0, #16
   209e4:	lsl	r3, r3, #16
   209e8:	str	r3, [sp, #232]	; 0xe8
   209ec:	str	r1, [sp, #236]	; 0xec
   209f0:	add	r3, pc, #528	; 0x210
   209f4:	ldrd	r2, [r3]
   209f8:	ldrd	r6, [sp, #232]	; 0xe8
   209fc:	cmp	r7, r3
   20a00:	cmpeq	r6, r2
   20a04:	beq	20c34 <_start@@Base+0xe5a4>
   20a08:	mov	r3, #0
   20a0c:	str	r3, [sp, #256]	; 0x100
   20a10:	and	r3, r1, #-16777216	; 0xff000000
   20a14:	str	r3, [sp, #260]	; 0x104
   20a18:	add	r3, sp, #256	; 0x100
   20a1c:	ldrd	r2, [r3]
   20a20:	cmp	r3, #1795162112	; 0x6b000000
   20a24:	cmpeq	r2, #0
   20a28:	beq	20ca4 <_start@@Base+0xe614>
   20a2c:	mov	r2, fp
   20a30:	mov	r1, sl
   20a34:	mov	r0, r9
   20a38:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20a3c:	mov	r1, r0
   20a40:	b	206d0 <_start@@Base+0xe040>
   20a44:	add	r3, sl, #8
   20a48:	mov	r6, r3
   20a4c:	mov	r1, fp
   20a50:	mov	r0, r3
   20a54:	bl	12780 <_start@@Base+0xf0>
   20a58:	add	r3, pc, #432	; 0x1b0
   20a5c:	ldrd	r2, [r3]
   20a60:	cmp	r1, r3
   20a64:	cmpeq	r0, r2
   20a68:	beq	20aac <_start@@Base+0xe41c>
   20a6c:	lsr	r3, r0, #16
   20a70:	lsl	r3, r3, #16
   20a74:	str	r3, [sp, #248]	; 0xf8
   20a78:	str	r1, [sp, #252]	; 0xfc
   20a7c:	add	r3, pc, #404	; 0x194
   20a80:	ldrd	r2, [r3]
   20a84:	ldrd	r0, [sp, #248]	; 0xf8
   20a88:	cmp	r1, r3
   20a8c:	cmpeq	r0, r2
   20a90:	beq	20b74 <_start@@Base+0xe4e4>
   20a94:	mov	r2, fp
   20a98:	mov	r1, r6
   20a9c:	mov	r0, r9
   20aa0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20aa4:	mov	r1, r0
   20aa8:	b	206d0 <_start@@Base+0xe040>
   20aac:	add	sl, sl, #16
   20ab0:	mov	r1, fp
   20ab4:	mov	r0, sl
   20ab8:	bl	12780 <_start@@Base+0xf0>
   20abc:	mov	r3, #0
   20ac0:	str	r3, [sp, #280]	; 0x118
   20ac4:	bic	r3, r1, #255	; 0xff
   20ac8:	str	r3, [sp, #284]	; 0x11c
   20acc:	add	r3, pc, #332	; 0x14c
   20ad0:	ldrd	r2, [r3]
   20ad4:	add	r1, sp, #280	; 0x118
   20ad8:	ldrd	r0, [r1]
   20adc:	cmp	r1, r3
   20ae0:	cmpeq	r0, r2
   20ae4:	beq	20b00 <_start@@Base+0xe470>
   20ae8:	mov	r2, fp
   20aec:	mov	r1, sl
   20af0:	mov	r0, r9
   20af4:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20af8:	mov	r1, r0
   20afc:	b	206d0 <_start@@Base+0xe040>
   20b00:	mov	r3, #3
   20b04:	mov	r2, fp
   20b08:	mov	r1, sl
   20b0c:	mov	r0, r9
   20b10:	bl	14594 <_start@@Base+0x1f04>
   20b14:	cmp	sl, r0
   20b18:	beq	20b5c <_start@@Base+0xe4cc>
   20b1c:	movw	r3, #26384	; 0x6710
   20b20:	movt	r3, #1
   20b24:	str	r3, [sp, #12]
   20b28:	ldr	r3, [pc, #252]	; 20c2c <_start@@Base+0xe59c>
   20b2c:	str	r3, [sp, #8]
   20b30:	ldr	r3, [sp, #320]	; 0x140
   20b34:	str	r3, [sp, #4]
   20b38:	mov	r3, #1
   20b3c:	str	r3, [sp]
   20b40:	mov	r3, #0
   20b44:	mov	r2, fp
   20b48:	mov	r1, r0
   20b4c:	mov	r0, r9
   20b50:	bl	2a314 <flatcc_json_parser_union_type@@Base>
   20b54:	mov	r1, r0
   20b58:	b	206d0 <_start@@Base+0xe040>
   20b5c:	mov	r2, fp
   20b60:	mov	r1, r0
   20b64:	mov	r0, r9
   20b68:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20b6c:	mov	r1, r0
   20b70:	b	206d0 <_start@@Base+0xe040>
   20b74:	mov	r3, #6
   20b78:	mov	r2, fp
   20b7c:	mov	r1, r6
   20b80:	mov	r0, r9
   20b84:	bl	14594 <_start@@Base+0x1f04>
   20b88:	mov	r1, r0
   20b8c:	cmp	r6, r0
   20b90:	beq	20bc8 <_start@@Base+0xe538>
   20b94:	movw	r3, #26384	; 0x6710
   20b98:	movt	r3, #1
   20b9c:	str	r3, [sp, #8]
   20ba0:	ldr	r3, [sp, #320]	; 0x140
   20ba4:	str	r3, [sp, #4]
   20ba8:	mov	r3, #1
   20bac:	str	r3, [sp]
   20bb0:	mov	r3, #0
   20bb4:	mov	r2, fp
   20bb8:	mov	r0, r9
   20bbc:	bl	2a1ac <flatcc_json_parser_union@@Base>
   20bc0:	mov	r1, r0
   20bc4:	b	206d0 <_start@@Base+0xe040>
   20bc8:	mov	r2, fp
   20bcc:	mov	r0, r9
   20bd0:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20bd4:	mov	r1, r0
   20bd8:	b	206d0 <_start@@Base+0xe040>
   20bdc:	nop	{0}
   20be0:	svcpl	0x00636860
   20be4:			; <UNDEFINED> instruction: 0x6d61696e
   20be8:	cmnvs	r3, r5, ror #8
   20bec:	cmnvs	r8, #-2147483620	; 0x8000001c
   20bf0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   20bf4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   20bf8:	svcpl	0x00636861
   20bfc:			; <UNDEFINED> instruction: 0x6d61696e
   20c00:	svcpl	0x006b6963
   20c04:	cmnvc	r9, #1694498816	; 0x65000000
   20c08:	rsbvc	r0, r5, r0
   20c0c:	blvs	17fddf8 <__bss_end__@@Base+0x17bfaa4>
   20c10:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   20c14:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   20c18:	ldrbvs	r0, [r2, #-0]!
   20c1c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   20c20:	andeq	r0, r0, r0
   20c24:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   20c28:	andeq	lr, r3, r4, lsl r3
   20c2c:	andeq	lr, r3, r4, lsr #6
   20c30:	andeq	lr, r3, r4, lsr r3
   20c34:	mov	r3, #6
   20c38:	mov	r2, fp
   20c3c:	mov	r1, sl
   20c40:	mov	r0, r9
   20c44:	bl	14594 <_start@@Base+0x1f04>
   20c48:	mov	r1, r0
   20c4c:	cmp	sl, r0
   20c50:	beq	20c90 <_start@@Base+0xe600>
   20c54:	movw	r3, #26384	; 0x6710
   20c58:	movt	r3, #1
   20c5c:	str	r3, [sp, #12]
   20c60:	ldr	r3, [pc, #-56]	; 20c30 <_start@@Base+0xe5a0>
   20c64:	str	r3, [sp, #8]
   20c68:	ldr	r3, [sp, #320]	; 0x140
   20c6c:	str	r3, [sp, #4]
   20c70:	mov	r3, #5
   20c74:	str	r3, [sp]
   20c78:	mov	r3, #2
   20c7c:	mov	r2, fp
   20c80:	mov	r0, r9
   20c84:	bl	2a314 <flatcc_json_parser_union_type@@Base>
   20c88:	mov	r1, r0
   20c8c:	b	206d0 <_start@@Base+0xe040>
   20c90:	mov	r2, fp
   20c94:	mov	r0, r9
   20c98:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20c9c:	mov	r1, r0
   20ca0:	b	206d0 <_start@@Base+0xe040>
   20ca4:	mov	r3, #1
   20ca8:	mov	r2, fp
   20cac:	mov	r1, sl
   20cb0:	mov	r0, r9
   20cb4:	bl	14594 <_start@@Base+0x1f04>
   20cb8:	mov	r1, r0
   20cbc:	cmp	sl, r0
   20cc0:	beq	20cf8 <_start@@Base+0xe668>
   20cc4:	movw	r3, #26384	; 0x6710
   20cc8:	movt	r3, #1
   20ccc:	str	r3, [sp, #8]
   20cd0:	ldr	r3, [sp, #320]	; 0x140
   20cd4:	str	r3, [sp, #4]
   20cd8:	mov	r3, #5
   20cdc:	str	r3, [sp]
   20ce0:	mov	r3, #2
   20ce4:	mov	r2, fp
   20ce8:	mov	r0, r9
   20cec:	bl	2a1ac <flatcc_json_parser_union@@Base>
   20cf0:	mov	r1, r0
   20cf4:	b	206d0 <_start@@Base+0xe040>
   20cf8:	mov	r2, fp
   20cfc:	mov	r0, r9
   20d00:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20d04:	mov	r1, r0
   20d08:	b	206d0 <_start@@Base+0xe040>
   20d0c:	mov	r2, fp
   20d10:	mov	r1, sl
   20d14:	mov	r0, r9
   20d18:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20d1c:	mov	r1, r0
   20d20:	b	206d0 <_start@@Base+0xe040>
   20d24:	mov	r6, r9
   20d28:	ldrd	r8, [sp, #160]	; 0xa0
   20d2c:	mov	r7, fp
   20d30:	ldr	r3, [r6, #24]
   20d34:	cmp	r3, #0
   20d38:	bne	203cc <_start@@Base+0xdd3c>
   20d3c:	ldr	r3, [sp, #320]	; 0x140
   20d40:	mov	r2, r7
   20d44:	mov	r1, sl
   20d48:	mov	r0, r6
   20d4c:	bl	2a134 <flatcc_json_parser_finalize_unions@@Base>
   20d50:	mov	sl, r0
   20d54:	ldr	r0, [r6]
   20d58:	bl	24570 <flatcc_builder_end_table@@Base>
   20d5c:	subs	r4, r0, #0
   20d60:	beq	203cc <_start@@Base+0xdd3c>
   20d64:	mov	r1, #1
   20d68:	ldr	r0, [r6]
   20d6c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   20d70:	cmp	r0, #0
   20d74:	beq	20de0 <_start@@Base+0xe750>
   20d78:	str	r4, [r0]
   20d7c:	b	1de64 <_start@@Base+0xb7d4>
   20d80:	mov	r2, r7
   20d84:	mov	r1, r4
   20d88:	mov	r0, r6
   20d8c:	bl	29738 <flatcc_json_parser_unmatched_symbol@@Base>
   20d90:	mov	sl, r0
   20d94:	b	1de64 <_start@@Base+0xb7d4>
   20d98:	mov	r5, r7
   20d9c:	mov	r7, r6
   20da0:	ldr	r3, [r7, #24]
   20da4:	cmp	r3, #0
   20da8:	bne	203ec <_start@@Base+0xdd5c>
   20dac:	ldr	r3, [sp, #296]	; 0x128
   20db0:	mov	r2, r5
   20db4:	mov	r1, r4
   20db8:	mov	r0, r7
   20dbc:	bl	2a134 <flatcc_json_parser_finalize_unions@@Base>
   20dc0:	mov	r4, r0
   20dc4:	ldr	r0, [r7]
   20dc8:	bl	24570 <flatcc_builder_end_table@@Base>
   20dcc:	ldr	r3, [sp, #368]	; 0x170
   20dd0:	str	r0, [r3]
   20dd4:	cmp	r0, #0
   20dd8:	bne	1db94 <_start@@Base+0xb504>
   20ddc:	b	203ec <_start@@Base+0xdd5c>
   20de0:	mov	r5, r7
   20de4:	mov	r7, r6
   20de8:	mov	r4, sl
   20dec:	b	203ec <_start@@Base+0xdd5c>
   20df0:	ldr	r3, [r0, #8]
   20df4:	tst	r3, #1
   20df8:	bne	20e14 <_start@@Base+0xe784>
   20dfc:	mov	r3, #15
   20e00:	mov	r2, r5
   20e04:	mov	r1, r4
   20e08:	bl	27930 <flatcc_json_parser_set_error@@Base>
   20e0c:	mov	r4, r0
   20e10:	b	1dbb0 <_start@@Base+0xb520>
   20e14:	mov	r2, r5
   20e18:	mov	r1, r4
   20e1c:	bl	28c34 <flatcc_json_parser_generic_json@@Base>
   20e20:	mov	r4, r0
   20e24:	b	1dbb0 <_start@@Base+0xb520>
   20e28:	mov	r3, #33	; 0x21
   20e2c:	mov	r2, r5
   20e30:	mov	r1, r4
   20e34:	mov	r0, r7
   20e38:	bl	27930 <flatcc_json_parser_set_error@@Base>
   20e3c:	mov	r4, r0
   20e40:	b	1dbb0 <_start@@Base+0xb520>
   20e44:	mov	r5, r7
   20e48:	mov	r7, r6
   20e4c:	mov	r4, sl
   20e50:	b	203ec <_start@@Base+0xdd5c>
   20e54:	mov	r5, r7
   20e58:	mov	r7, r6
   20e5c:	mov	r6, sl
   20e60:	b	1ed30 <_start@@Base+0xc6a0>
   20e64:	mov	sl, r0
   20e68:	b	1e7b8 <_start@@Base+0xc128>
   20e6c:	mov	r4, r0
   20e70:	b	1e94c <_start@@Base+0xc2bc>
   20e74:	mov	r5, r7
   20e78:	mov	r7, r6
   20e7c:	mov	r6, sl
   20e80:	b	1ed30 <_start@@Base+0xc6a0>
   20e84:	mov	sl, r0
   20e88:	b	1fcfc <_start@@Base+0xd66c>
   20e8c:	mov	r5, r7
   20e90:	mov	r7, r6
   20e94:	mov	r6, sl
   20e98:	b	1ed30 <_start@@Base+0xc6a0>
   20e9c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   20ea0:	strd	r6, [sp, #8]
   20ea4:	strd	r8, [sp, #16]
   20ea8:	str	lr, [sp, #24]
   20eac:	sub	sp, sp, #12
   20eb0:	mov	r9, r0
   20eb4:	mov	r4, r1
   20eb8:	mov	r5, r2
   20ebc:	mov	r8, r3
   20ec0:	mov	r1, r2
   20ec4:	mov	r0, r4
   20ec8:	bl	12780 <_start@@Base+0xf0>
   20ecc:	add	r3, pc, #852	; 0x354
   20ed0:	ldrd	r2, [r3]
   20ed4:	cmp	r1, r3
   20ed8:	cmpeq	r0, r2
   20edc:	bhi	2102c <_start@@Base+0xe99c>
   20ee0:	add	r3, pc, #840	; 0x348
   20ee4:	ldrd	r2, [r3]
   20ee8:	cmp	r1, r3
   20eec:	cmpeq	r0, r2
   20ef0:	bhi	20f6c <_start@@Base+0xe8dc>
   20ef4:	mov	r2, #0
   20ef8:	bic	r3, r1, #255	; 0xff
   20efc:	add	r1, pc, #820	; 0x334
   20f00:	ldrd	r0, [r1]
   20f04:	cmp	r3, r1
   20f08:	cmpeq	r2, r0
   20f0c:	bne	20f50 <_start@@Base+0xe8c0>
   20f10:	sub	r3, r5, r4
   20f14:	cmp	r3, #3
   20f18:	ble	20f50 <_start@@Base+0xe8c0>
   20f1c:	ldrb	r3, [r4, #3]
   20f20:	cmp	r3, #46	; 0x2e
   20f24:	bne	20f50 <_start@@Base+0xe8c0>
   20f28:	ldr	r3, [sp, #44]	; 0x2c
   20f2c:	str	r3, [sp, #4]
   20f30:	ldr	r3, [sp, #40]	; 0x28
   20f34:	str	r3, [sp]
   20f38:	mov	r3, r8
   20f3c:	mov	r2, r5
   20f40:	add	r1, r4, #4
   20f44:	mov	r0, r9
   20f48:	bl	12d48 <_start@@Base+0x6b8>
   20f4c:	mov	r4, r0
   20f50:	mov	r0, r4
   20f54:	add	sp, sp, #12
   20f58:	ldrd	r4, [sp]
   20f5c:	ldrd	r6, [sp, #8]
   20f60:	ldrd	r8, [sp, #16]
   20f64:	add	sp, sp, #24
   20f68:	pop	{pc}		; (ldr pc, [sp], #4)
   20f6c:	mov	r2, #0
   20f70:	bic	r3, r1, #255	; 0xff
   20f74:	add	r7, pc, #708	; 0x2c4
   20f78:	ldrd	r6, [r7]
   20f7c:	cmp	r3, r7
   20f80:	cmpeq	r2, r6
   20f84:	beq	20fe8 <_start@@Base+0xe958>
   20f88:	and	r2, r0, #-16777216	; 0xff000000
   20f8c:	mov	r3, r1
   20f90:	add	r1, pc, #688	; 0x2b0
   20f94:	ldrd	r0, [r1]
   20f98:	cmp	r3, r1
   20f9c:	cmpeq	r2, r0
   20fa0:	bne	20f50 <_start@@Base+0xe8c0>
   20fa4:	sub	r3, r5, r4
   20fa8:	cmp	r3, #5
   20fac:	ble	20f50 <_start@@Base+0xe8c0>
   20fb0:	ldrb	r3, [r4, #5]
   20fb4:	cmp	r3, #46	; 0x2e
   20fb8:	bne	20f50 <_start@@Base+0xe8c0>
   20fbc:	ldr	r3, [sp, #44]	; 0x2c
   20fc0:	str	r3, [sp, #4]
   20fc4:	ldr	r3, [sp, #40]	; 0x28
   20fc8:	str	r3, [sp]
   20fcc:	mov	r3, r8
   20fd0:	mov	r2, r5
   20fd4:	add	r1, r4, #6
   20fd8:	mov	r0, r9
   20fdc:	bl	13700 <_start@@Base+0x1070>
   20fe0:	mov	r4, r0
   20fe4:	b	20f50 <_start@@Base+0xe8c0>
   20fe8:	sub	r3, r5, r4
   20fec:	cmp	r3, #3
   20ff0:	ble	20f50 <_start@@Base+0xe8c0>
   20ff4:	ldrb	r3, [r4, #3]
   20ff8:	cmp	r3, #46	; 0x2e
   20ffc:	bne	20f50 <_start@@Base+0xe8c0>
   21000:	ldr	r3, [sp, #44]	; 0x2c
   21004:	str	r3, [sp, #4]
   21008:	ldr	r3, [sp, #40]	; 0x28
   2100c:	str	r3, [sp]
   21010:	mov	r3, r8
   21014:	mov	r2, r5
   21018:	add	r1, r4, #4
   2101c:	mov	r0, r9
   21020:	bl	13008 <_start@@Base+0x978>
   21024:	mov	r4, r0
   21028:	b	20f50 <_start@@Base+0xe8c0>
   2102c:	add	r3, pc, #540	; 0x21c
   21030:	ldrd	r2, [r3]
   21034:	cmp	r1, r3
   21038:	cmpeq	r0, r2
   2103c:	bhi	21098 <_start@@Base+0xea08>
   21040:	add	r3, pc, #528	; 0x210
   21044:	ldrd	r2, [r3]
   21048:	cmp	r1, r3
   2104c:	cmpeq	r0, r2
   21050:	bne	20f50 <_start@@Base+0xe8c0>
   21054:	sub	r3, r5, r4
   21058:	cmp	r3, #8
   2105c:	ble	20f50 <_start@@Base+0xe8c0>
   21060:	ldrb	r3, [r4, #8]
   21064:	cmp	r3, #46	; 0x2e
   21068:	bne	20f50 <_start@@Base+0xe8c0>
   2106c:	ldr	r3, [sp, #44]	; 0x2c
   21070:	str	r3, [sp, #4]
   21074:	ldr	r3, [sp, #40]	; 0x28
   21078:	str	r3, [sp]
   2107c:	mov	r3, r8
   21080:	mov	r2, r5
   21084:	add	r1, r4, #9
   21088:	mov	r0, r9
   2108c:	bl	13170 <_start@@Base+0xae0>
   21090:	mov	r4, r0
   21094:	b	20f50 <_start@@Base+0xe8c0>
   21098:	add	r3, pc, #448	; 0x1c0
   2109c:	ldrd	r2, [r3]
   210a0:	cmp	r1, r3
   210a4:	cmpeq	r0, r2
   210a8:	bhi	21104 <_start@@Base+0xea74>
   210ac:	add	r3, pc, #436	; 0x1b4
   210b0:	ldrd	r2, [r3]
   210b4:	cmp	r1, r3
   210b8:	cmpeq	r0, r2
   210bc:	bne	20f50 <_start@@Base+0xe8c0>
   210c0:	sub	r3, r5, r4
   210c4:	cmp	r3, #8
   210c8:	ble	20f50 <_start@@Base+0xe8c0>
   210cc:	ldrb	r3, [r4, #8]
   210d0:	cmp	r3, #46	; 0x2e
   210d4:	bne	20f50 <_start@@Base+0xe8c0>
   210d8:	ldr	r3, [sp, #44]	; 0x2c
   210dc:	str	r3, [sp, #4]
   210e0:	ldr	r3, [sp, #40]	; 0x28
   210e4:	str	r3, [sp]
   210e8:	mov	r3, r8
   210ec:	mov	r2, r5
   210f0:	add	r1, r4, #9
   210f4:	mov	r0, r9
   210f8:	bl	13328 <_start@@Base+0xc98>
   210fc:	mov	r4, r0
   21100:	b	20f50 <_start@@Base+0xe8c0>
   21104:	add	r3, pc, #356	; 0x164
   21108:	ldrd	r2, [r3]
   2110c:	cmp	r1, r3
   21110:	cmpeq	r0, r2
   21114:	bne	2115c <_start@@Base+0xeacc>
   21118:	sub	r3, r5, r4
   2111c:	cmp	r3, #8
   21120:	ble	20f50 <_start@@Base+0xe8c0>
   21124:	ldrb	r3, [r4, #8]
   21128:	cmp	r3, #46	; 0x2e
   2112c:	bne	20f50 <_start@@Base+0xe8c0>
   21130:	ldr	r3, [sp, #44]	; 0x2c
   21134:	str	r3, [sp, #4]
   21138:	ldr	r3, [sp, #40]	; 0x28
   2113c:	str	r3, [sp]
   21140:	mov	r3, r8
   21144:	mov	r2, r5
   21148:	add	r1, r4, #9
   2114c:	mov	r0, r9
   21150:	bl	13560 <_start@@Base+0xed0>
   21154:	mov	r4, r0
   21158:	b	20f50 <_start@@Base+0xe8c0>
   2115c:	add	r3, pc, #276	; 0x114
   21160:	ldrd	r2, [r3]
   21164:	cmp	r1, r3
   21168:	cmpeq	r0, r2
   2116c:	bne	20f50 <_start@@Base+0xe8c0>
   21170:	add	r6, r4, #8
   21174:	mov	r1, r5
   21178:	mov	r0, r6
   2117c:	bl	12780 <_start@@Base+0xf0>
   21180:	mov	r2, #0
   21184:	mov	r3, r1
   21188:	add	r1, pc, #240	; 0xf0
   2118c:	ldrd	r0, [r1]
   21190:	cmp	r3, r1
   21194:	cmpeq	r2, r0
   21198:	bne	20f50 <_start@@Base+0xe8c0>
   2119c:	sub	r3, r5, r6
   211a0:	cmp	r3, #4
   211a4:	ble	20f50 <_start@@Base+0xe8c0>
   211a8:	ldrb	r3, [r4, #12]
   211ac:	cmp	r3, #46	; 0x2e
   211b0:	bne	20f50 <_start@@Base+0xe8c0>
   211b4:	add	r7, r4, #13
   211b8:	cmp	r6, r7
   211bc:	beq	20f50 <_start@@Base+0xe8c0>
   211c0:	mov	r1, r5
   211c4:	mov	r0, r7
   211c8:	bl	12780 <_start@@Base+0xf0>
   211cc:	mov	r2, #0
   211d0:	and	r3, r1, #-16777216	; 0xff000000
   211d4:	cmp	r3, #2013265920	; 0x78000000
   211d8:	cmpeq	r2, #0
   211dc:	movne	r4, r7
   211e0:	bne	20f50 <_start@@Base+0xe8c0>
   211e4:	ldr	r3, [sp, #44]	; 0x2c
   211e8:	str	r3, [sp]
   211ec:	mov	r3, #1
   211f0:	mov	r2, r5
   211f4:	mov	r1, r7
   211f8:	mov	r0, r9
   211fc:	bl	28798 <flatcc_json_parser_match_constant@@Base>
   21200:	mov	r4, r0
   21204:	cmp	r7, r0
   21208:	beq	20f50 <_start@@Base+0xe8c0>
   2120c:	mov	r2, #0
   21210:	mov	r3, #0
   21214:	ldr	r1, [sp, #40]	; 0x28
   21218:	strd	r2, [r1]
   2121c:	mov	r3, #0
   21220:	str	r3, [r8]
   21224:	b	20f50 <_start@@Base+0xe8c0>
   21228:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   2122c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   21230:	ldrshvc	pc, [pc, #255]	; 21337 <verify_parse@@Base+0xaf>	; <UNPREDICTABLE>
   21234:	cmnmi	pc, #28416	; 0x6f00
   21238:	andeq	r0, r0, r0
   2123c:	cmnmi	lr, r0, lsl #18
   21240:	andeq	r0, r0, r0
   21244:	strbtmi	r6, [pc], -r0, lsl #30
   21248:	andvc	r0, r0, #0
   2124c:	cmnmi	pc, #28416	; 0x6f00
   21250:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   21254:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   21258:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   2125c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   21260:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   21264:	mcrvs	7, 3, r6, cr5, cr15, {2}
   21268:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   2126c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   21270:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   21274:	mcrvs	7, 3, r6, cr5, cr15, {2}
   21278:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   2127c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   21280:	andeq	r0, r0, r0
   21284:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

00021288 <verify_parse@@Base>:
   21288:	str	r4, [sp, #-8]!
   2128c:	str	lr, [sp, #4]
   21290:	cmp	r0, #0
   21294:	beq	21364 <verify_parse@@Base+0xdc>
   21298:	movw	r3, #20301	; 0x4f4d
   2129c:	movt	r3, #21326	; 0x534e
   212a0:	ldr	r2, [r0, #4]
   212a4:	cmp	r2, r3
   212a8:	bne	21364 <verify_parse@@Base+0xdc>
   212ac:	ldr	r2, [r0]
   212b0:	adds	r3, r0, r2
   212b4:	beq	21364 <verify_parse@@Base+0xdc>
   212b8:	ldr	r2, [r0, r2]
   212bc:	sub	r2, r3, r2
   212c0:	ldrh	r1, [r2]
   212c4:	cmp	r1, #5
   212c8:	bls	21384 <verify_parse@@Base+0xfc>
   212cc:	ldrh	r2, [r2, #4]
   212d0:	cmp	r2, #0
   212d4:	beq	21384 <verify_parse@@Base+0xfc>
   212d8:	adds	r3, r3, r2
   212dc:	beq	21384 <verify_parse@@Base+0xfc>
   212e0:	vldr	s14, [r3]
   212e4:	vldr	s15, [pc, #388]	; 21470 <verify_parse@@Base+0x1e8>
   212e8:	vcmp.f32	s14, s15
   212ec:	vmrs	APSR_nzcv, fpscr
   212f0:	bne	213a0 <verify_parse@@Base+0x118>
   212f4:	vldr	s14, [r3, #4]
   212f8:	vldr	s15, [pc, #372]	; 21474 <verify_parse@@Base+0x1ec>
   212fc:	vcmp.f32	s14, s15
   21300:	vmrs	APSR_nzcv, fpscr
   21304:	bne	213bc <verify_parse@@Base+0x134>
   21308:	vldr	s14, [r3, #8]
   2130c:	vldr	s15, [pc, #356]	; 21478 <verify_parse@@Base+0x1f0>
   21310:	vcmp.f32	s14, s15
   21314:	vmrs	APSR_nzcv, fpscr
   21318:	bne	213d8 <verify_parse@@Base+0x150>
   2131c:	vldr	d6, [r3, #16]
   21320:	vldr	d7, [pc, #320]	; 21468 <verify_parse@@Base+0x1e0>
   21324:	vcmp.f64	d6, d7
   21328:	vmrs	APSR_nzcv, fpscr
   2132c:	bne	213f4 <verify_parse@@Base+0x16c>
   21330:	ldrsb	r2, [r3, #24]
   21334:	cmp	r2, #2
   21338:	bne	21410 <verify_parse@@Base+0x188>
   2133c:	ldrsh	r2, [r3, #26]
   21340:	cmp	r2, #5
   21344:	bne	2142c <verify_parse@@Base+0x1a4>
   21348:	ldrsb	r3, [r3, #28]
   2134c:	cmp	r3, #6
   21350:	bne	21448 <verify_parse@@Base+0x1c0>
   21354:	mov	r0, #0
   21358:	ldr	r4, [sp]
   2135c:	add	sp, sp, #4
   21360:	pop	{pc}		; (ldr pc, [sp], #4)
   21364:	movw	r3, #46140	; 0xb43c
   21368:	movt	r3, #2
   2136c:	mov	r2, #696	; 0x2b8
   21370:	movw	r1, #46208	; 0xb480
   21374:	movt	r1, #2
   21378:	movw	r0, #46304	; 0xb4e0
   2137c:	movt	r0, #2
   21380:	bl	12684 <__assert_fail@plt>
   21384:	ldr	r3, [pc, #240]	; 2147c <verify_parse@@Base+0x1f4>
   21388:	mov	r2, #45	; 0x2d
   2138c:	movw	r1, #46344	; 0xb508
   21390:	movt	r1, #2
   21394:	movw	r0, #48756	; 0xbe74
   21398:	movt	r0, #2
   2139c:	bl	12684 <__assert_fail@plt>
   213a0:	ldr	r3, [pc, #212]	; 2147c <verify_parse@@Base+0x1f4>
   213a4:	mov	r2, #46	; 0x2e
   213a8:	movw	r1, #46344	; 0xb508
   213ac:	movt	r1, #2
   213b0:	movw	r0, #48756	; 0xbe74
   213b4:	movt	r0, #2
   213b8:	bl	12684 <__assert_fail@plt>
   213bc:	ldr	r3, [pc, #184]	; 2147c <verify_parse@@Base+0x1f4>
   213c0:	mov	r2, #47	; 0x2f
   213c4:	movw	r1, #46344	; 0xb508
   213c8:	movt	r1, #2
   213cc:	movw	r0, #48756	; 0xbe74
   213d0:	movt	r0, #2
   213d4:	bl	12684 <__assert_fail@plt>
   213d8:	ldr	r3, [pc, #156]	; 2147c <verify_parse@@Base+0x1f4>
   213dc:	mov	r2, #48	; 0x30
   213e0:	movw	r1, #46344	; 0xb508
   213e4:	movt	r1, #2
   213e8:	movw	r0, #48756	; 0xbe74
   213ec:	movt	r0, #2
   213f0:	bl	12684 <__assert_fail@plt>
   213f4:	ldr	r3, [pc, #128]	; 2147c <verify_parse@@Base+0x1f4>
   213f8:	mov	r2, #49	; 0x31
   213fc:	movw	r1, #46344	; 0xb508
   21400:	movt	r1, #2
   21404:	movw	r0, #48756	; 0xbe74
   21408:	movt	r0, #2
   2140c:	bl	12684 <__assert_fail@plt>
   21410:	ldr	r3, [pc, #100]	; 2147c <verify_parse@@Base+0x1f4>
   21414:	mov	r2, #50	; 0x32
   21418:	movw	r1, #46344	; 0xb508
   2141c:	movt	r1, #2
   21420:	movw	r0, #48756	; 0xbe74
   21424:	movt	r0, #2
   21428:	bl	12684 <__assert_fail@plt>
   2142c:	ldr	r3, [pc, #72]	; 2147c <verify_parse@@Base+0x1f4>
   21430:	mov	r2, #53	; 0x35
   21434:	movw	r1, #46344	; 0xb508
   21438:	movt	r1, #2
   2143c:	movw	r0, #48756	; 0xbe74
   21440:	movt	r0, #2
   21444:	bl	12684 <__assert_fail@plt>
   21448:	ldr	r3, [pc, #44]	; 2147c <verify_parse@@Base+0x1f4>
   2144c:	mov	r2, #54	; 0x36
   21450:	movw	r1, #46344	; 0xb508
   21454:	movt	r1, #2
   21458:	movw	r0, #48756	; 0xbe74
   2145c:	movt	r0, #2
   21460:	bl	12684 <__assert_fail@plt>
   21464:	nop	{0}
   21468:	andeq	r0, r0, r0
   2146c:	andmi	r0, r8, r0
   21470:	svccc	0x00800000
   21474:	andmi	r0, r0, r0
   21478:	submi	r0, r0, r0
   2147c:	andeq	fp, r2, r8, asr r4

00021480 <test_parse@@Base>:
   21480:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21484:	strd	r6, [sp, #8]
   21488:	strd	r8, [sp, #16]
   2148c:	strd	sl, [sp, #24]
   21490:	str	lr, [sp, #32]
   21494:	sub	sp, sp, #332	; 0x14c
   21498:	add	r0, sp, #48	; 0x30
   2149c:	bl	220e4 <flatcc_builder_init@@Base>
   214a0:	movw	r3, #57464	; 0xe078
   214a4:	movt	r3, #3
   214a8:	movw	r1, #46428	; 0xb55c
   214ac:	movt	r1, #2
   214b0:	ldr	r0, [r3, #716]	; 0x2cc
   214b4:	bl	12570 <fopen@plt>
   214b8:	subs	r6, r0, #0
   214bc:	beq	21908 <test_parse@@Base+0x488>
   214c0:	mov	r2, #2
   214c4:	mov	r1, #0
   214c8:	mov	r0, r6
   214cc:	bl	1266c <fseek@plt>
   214d0:	mov	r0, r6
   214d4:	bl	12594 <ftell@plt>
   214d8:	mov	r7, r0
   214dc:	cmp	r0, #10240	; 0x2800
   214e0:	bhi	218ec <test_parse@@Base+0x46c>
   214e4:	mov	r0, r6
   214e8:	bl	125ac <rewind@plt>
   214ec:	cmp	r7, #0
   214f0:	movne	r0, r7
   214f4:	moveq	r0, #1
   214f8:	bl	125dc <malloc@plt>
   214fc:	subs	r4, r0, #0
   21500:	beq	218f0 <test_parse@@Base+0x470>
   21504:	mov	r8, #0
   21508:	mov	r9, #1
   2150c:	mov	r3, r6
   21510:	sub	r2, r7, r8
   21514:	mov	r1, r9
   21518:	add	r0, r4, r8
   2151c:	bl	125d0 <fread@plt>
   21520:	cmp	r0, #0
   21524:	beq	21530 <test_parse@@Base+0xb0>
   21528:	add	r8, r8, r0
   2152c:	b	2150c <test_parse@@Base+0x8c>
   21530:	mov	r5, r0
   21534:	cmp	r7, r8
   21538:	bne	218f0 <test_parse@@Base+0x470>
   2153c:	mov	r0, r6
   21540:	bl	12654 <fclose@plt>
   21544:	add	r6, r4, r7
   21548:	add	r1, sp, #292	; 0x124
   2154c:	mov	r2, #0
   21550:	mov	r3, #0
   21554:	strd	r2, [r1]
   21558:	strd	r2, [r1, #8]
   2155c:	strd	r2, [r1, #24]
   21560:	add	r0, sp, #48	; 0x30
   21564:	str	r0, [sp, #280]	; 0x118
   21568:	str	r4, [sp, #284]	; 0x11c
   2156c:	mov	r3, #1
   21570:	str	r3, [sp, #296]	; 0x128
   21574:	str	r2, [sp, #288]	; 0x120
   21578:	str	r4, [sp, #308]	; 0x134
   2157c:	str	r6, [sp, #312]	; 0x138
   21580:	str	r4, [sp, #316]	; 0x13c
   21584:	mov	r3, r2
   21588:	movw	r1, #46432	; 0xb560
   2158c:	movt	r1, #2
   21590:	bl	22ad8 <flatcc_builder_start_buffer@@Base>
   21594:	cmp	r0, #0
   21598:	bne	215c0 <test_parse@@Base+0x140>
   2159c:	add	r3, sp, #28
   215a0:	mov	r2, r6
   215a4:	mov	r1, r4
   215a8:	add	r0, sp, #280	; 0x118
   215ac:	bl	1893c <_start@@Base+0x62ac>
   215b0:	ldr	r3, [sp, #304]	; 0x130
   215b4:	str	r3, [sp, #12]
   215b8:	cmp	r3, #0
   215bc:	beq	21620 <test_parse@@Base+0x1a0>
   215c0:	movw	r3, #58184	; 0xe348
   215c4:	movt	r3, #3
   215c8:	ldr	r6, [r3]
   215cc:	movw	r3, #57464	; 0xe078
   215d0:	movt	r3, #3
   215d4:	ldr	r7, [r3, #716]	; 0x2cc
   215d8:	ldr	r8, [sp, #296]	; 0x128
   215dc:	ldr	r5, [sp, #316]	; 0x13c
   215e0:	ldr	r3, [sp, #284]	; 0x11c
   215e4:	sub	r5, r5, r3
   215e8:	add	r5, r5, #1
   215ec:	ldr	r0, [sp, #304]	; 0x130
   215f0:	bl	276e8 <flatcc_json_parser_error_string@@Base>
   215f4:	str	r0, [sp, #4]
   215f8:	str	r5, [sp]
   215fc:	mov	r3, r8
   21600:	mov	r2, r7
   21604:	movw	r1, #46640	; 0xb630
   21608:	movt	r1, #2
   2160c:	mov	r0, r6
   21610:	bl	12618 <fprintf@plt>
   21614:	mvn	r3, #0
   21618:	str	r3, [sp, #12]
   2161c:	b	218bc <test_parse@@Base+0x43c>
   21620:	ldr	r1, [sp, #28]
   21624:	add	r0, sp, #48	; 0x30
   21628:	bl	22bac <flatcc_builder_end_buffer@@Base>
   2162c:	cmp	r0, #0
   21630:	beq	215c0 <test_parse@@Base+0x140>
   21634:	str	r4, [sp, #320]	; 0x140
   21638:	movw	r2, #57464	; 0xe078
   2163c:	movt	r2, #3
   21640:	movw	r0, #58184	; 0xe348
   21644:	movt	r0, #3
   21648:	ldr	r3, [sp, #296]	; 0x128
   2164c:	ldr	r2, [r2, #716]	; 0x2cc
   21650:	movw	r1, #46440	; 0xb568
   21654:	movt	r1, #2
   21658:	ldr	r0, [r0]
   2165c:	bl	12618 <fprintf@plt>
   21660:	add	r1, sp, #324	; 0x144
   21664:	add	r0, sp, #48	; 0x30
   21668:	bl	25e2c <flatcc_builder_finalize_aligned_buffer@@Base>
   2166c:	mov	fp, r0
   21670:	ldr	r8, [sp, #324]	; 0x144
   21674:	movw	r3, #58188	; 0xe34c
   21678:	movt	r3, #3
   2167c:	ldr	r3, [r3]
   21680:	str	r3, [sp, #8]
   21684:	movw	r2, #46476	; 0xb58c
   21688:	movt	r2, #2
   2168c:	movw	r1, #46508	; 0xb5ac
   21690:	movt	r1, #2
   21694:	mov	r0, r3
   21698:	bl	12618 <fprintf@plt>
   2169c:	cmp	r8, #0
   216a0:	beq	21794 <test_parse@@Base+0x314>
   216a4:	sub	sl, fp, #1
   216a8:	movw	r3, #46524	; 0xb5bc
   216ac:	movt	r3, #2
   216b0:	str	r3, [sp, #16]
   216b4:	movw	r3, #46516	; 0xb5b4
   216b8:	movt	r3, #2
   216bc:	str	r3, [sp, #20]
   216c0:	movw	r6, #46532	; 0xb5c4
   216c4:	movt	r6, #2
   216c8:	b	21730 <test_parse@@Base+0x2b0>
   216cc:	add	r2, sp, #28
   216d0:	ldr	r1, [sp, #20]
   216d4:	ldr	r0, [sp, #8]
   216d8:	bl	12618 <fprintf@plt>
   216dc:	mov	r2, r5
   216e0:	ldr	r1, [sp, #16]
   216e4:	ldr	r0, [sp, #8]
   216e8:	bl	12618 <fprintf@plt>
   216ec:	ldrb	r2, [sl, #1]!
   216f0:	mov	r1, r6
   216f4:	ldr	r0, [sp, #8]
   216f8:	bl	12618 <fprintf@plt>
   216fc:	ldrb	r2, [sl]
   21700:	sub	r3, r2, #32
   21704:	uxtb	r3, r3
   21708:	cmp	r3, #95	; 0x5f
   2170c:	movcs	r2, #46	; 0x2e
   21710:	add	r3, sp, #328	; 0x148
   21714:	add	r3, r3, r9
   21718:	strb	r2, [r3, #-300]	; 0xfffffed4
   2171c:	mov	r2, #0
   21720:	strb	r2, [r3, #-299]	; 0xfffffed5
   21724:	add	r5, r5, #1
   21728:	cmp	r8, r5
   2172c:	beq	2175c <test_parse@@Base+0x2dc>
   21730:	ands	r9, r5, #15
   21734:	bne	21744 <test_parse@@Base+0x2c4>
   21738:	cmp	r5, #0
   2173c:	beq	216dc <test_parse@@Base+0x25c>
   21740:	b	216cc <test_parse@@Base+0x24c>
   21744:	tst	r5, #7
   21748:	bne	216ec <test_parse@@Base+0x26c>
   2174c:	ldr	r1, [sp, #8]
   21750:	mov	r0, #32
   21754:	bl	12660 <fputc@plt>
   21758:	b	216ec <test_parse@@Base+0x26c>
   2175c:	tst	r8, #15
   21760:	beq	21794 <test_parse@@Base+0x314>
   21764:	movw	r5, #46540	; 0xb5cc
   21768:	movt	r5, #2
   2176c:	mov	sl, #3
   21770:	mov	r9, #1
   21774:	ldr	r3, [sp, #8]
   21778:	mov	r2, sl
   2177c:	mov	r1, r9
   21780:	mov	r0, r5
   21784:	bl	125c4 <fwrite@plt>
   21788:	add	r8, r8, #1
   2178c:	tst	r8, #15
   21790:	bne	21774 <test_parse@@Base+0x2f4>
   21794:	add	r2, sp, #28
   21798:	movw	r1, #46516	; 0xb5b4
   2179c:	movt	r1, #2
   217a0:	ldr	r0, [sp, #8]
   217a4:	bl	12618 <fprintf@plt>
   217a8:	movw	r0, #58184	; 0xe348
   217ac:	movt	r0, #3
   217b0:	ldr	r3, [sp, #324]	; 0x144
   217b4:	mov	r2, r7
   217b8:	movw	r1, #46544	; 0xb5d0
   217bc:	movt	r1, #2
   217c0:	ldr	r0, [r0]
   217c4:	bl	12618 <fprintf@plt>
   217c8:	mov	r0, fp
   217cc:	bl	21288 <verify_parse@@Base>
   217d0:	ldr	r6, [sp, #324]	; 0x144
   217d4:	movw	r3, #58188	; 0xe34c
   217d8:	movt	r3, #3
   217dc:	ldr	r5, [r3]
   217e0:	movw	r2, #46500	; 0xb5a4
   217e4:	movt	r2, #2
   217e8:	movw	r1, #46580	; 0xb5f4
   217ec:	movt	r1, #2
   217f0:	mov	r0, r5
   217f4:	bl	12618 <fprintf@plt>
   217f8:	cmp	r6, #0
   217fc:	beq	2188c <test_parse@@Base+0x40c>
   21800:	sub	r7, fp, #1
   21804:	str	fp, [sp, #8]
   21808:	sub	r6, r6, #1
   2180c:	add	r6, r6, fp
   21810:	movw	sl, #46540	; 0xb5cc
   21814:	movt	sl, #2
   21818:	movw	r9, #46612	; 0xb614
   2181c:	movt	r9, #2
   21820:	movw	r8, #46620	; 0xb61c
   21824:	movt	r8, #2
   21828:	b	21858 <test_parse@@Base+0x3d8>
   2182c:	mov	r3, r5
   21830:	mov	r2, #4
   21834:	mov	r1, #1
   21838:	mov	r0, r9
   2183c:	bl	125c4 <fwrite@plt>
   21840:	ldrb	r2, [r7, #1]!
   21844:	mov	r1, r8
   21848:	mov	r0, r5
   2184c:	bl	12618 <fprintf@plt>
   21850:	cmp	r6, r7
   21854:	beq	2188c <test_parse@@Base+0x40c>
   21858:	ldr	r3, [sp, #8]
   2185c:	rsb	r3, r3, #1
   21860:	add	r3, r3, r7
   21864:	tst	r3, #15
   21868:	beq	2182c <test_parse@@Base+0x3ac>
   2186c:	tst	r3, #7
   21870:	bne	21840 <test_parse@@Base+0x3c0>
   21874:	mov	r3, r5
   21878:	mov	r2, #3
   2187c:	mov	r1, #1
   21880:	mov	r0, sl
   21884:	bl	125c4 <fwrite@plt>
   21888:	b	21840 <test_parse@@Base+0x3c0>
   2188c:	mov	r3, r5
   21890:	mov	r2, #4
   21894:	mov	r1, #1
   21898:	movw	r0, #46632	; 0xb628
   2189c:	movt	r0, #2
   218a0:	bl	125c4 <fwrite@plt>
   218a4:	add	r0, sp, #48	; 0x30
   218a8:	bl	222a8 <flatcc_builder_reset@@Base>
   218ac:	cmp	fp, #0
   218b0:	beq	218bc <test_parse@@Base+0x43c>
   218b4:	mov	r0, fp
   218b8:	bl	25f4c <flatcc_builder_aligned_free@@Base>
   218bc:	mov	r0, r4
   218c0:	bl	1257c <free@plt>
   218c4:	add	r0, sp, #48	; 0x30
   218c8:	bl	222c8 <flatcc_builder_clear@@Base>
   218cc:	ldr	r0, [sp, #12]
   218d0:	add	sp, sp, #332	; 0x14c
   218d4:	ldrd	r4, [sp]
   218d8:	ldrd	r6, [sp, #8]
   218dc:	ldrd	r8, [sp, #16]
   218e0:	ldrd	sl, [sp, #24]
   218e4:	add	sp, sp, #32
   218e8:	pop	{pc}		; (ldr pc, [sp], #4)
   218ec:	mov	r4, #0
   218f0:	mov	r0, r6
   218f4:	bl	12654 <fclose@plt>
   218f8:	cmp	r4, #0
   218fc:	beq	21908 <test_parse@@Base+0x488>
   21900:	mov	r0, r4
   21904:	bl	1257c <free@plt>
   21908:	movw	r2, #57464	; 0xe078
   2190c:	movt	r2, #3
   21910:	movw	r3, #58184	; 0xe348
   21914:	movt	r3, #3
   21918:	ldr	r2, [r2, #716]	; 0x2cc
   2191c:	movw	r1, #46656	; 0xb640
   21920:	movt	r1, #2
   21924:	ldr	r0, [r3]
   21928:	bl	12618 <fprintf@plt>
   2192c:	mvn	r3, #0
   21930:	str	r3, [sp, #12]
   21934:	b	218cc <test_parse@@Base+0x44c>

00021938 <main@@Base>:
   21938:	strd	r4, [sp, #-16]!
   2193c:	str	r6, [sp, #8]
   21940:	str	lr, [sp, #12]
   21944:	mov	r4, r0
   21948:	mov	r5, r1
   2194c:	movw	r3, #58184	; 0xe348
   21950:	movt	r3, #3
   21954:	ldr	r3, [r3]
   21958:	mov	r2, #16
   2195c:	mov	r1, #1
   21960:	movw	r0, #46692	; 0xb664
   21964:	movt	r0, #2
   21968:	bl	125c4 <fwrite@plt>
   2196c:	sub	r3, r4, #1
   21970:	cmp	r3, #1
   21974:	bhi	21994 <main@@Base+0x5c>
   21978:	cmp	r4, #2
   2197c:	beq	219bc <main@@Base+0x84>
   21980:	bl	21480 <test_parse@@Base>
   21984:	ldrd	r4, [sp]
   21988:	ldr	r6, [sp, #8]
   2198c:	add	sp, sp, #12
   21990:	pop	{pc}		; (ldr pc, [sp], #4)
   21994:	movw	r3, #58184	; 0xe348
   21998:	movt	r3, #3
   2199c:	ldr	r3, [r3]
   219a0:	mov	r2, #63	; 0x3f
   219a4:	mov	r1, #1
   219a8:	movw	r0, #46712	; 0xb678
   219ac:	movt	r0, #2
   219b0:	bl	125c4 <fwrite@plt>
   219b4:	mov	r0, #1
   219b8:	bl	12600 <exit@plt>
   219bc:	movw	r3, #57464	; 0xe078
   219c0:	movt	r3, #3
   219c4:	ldr	r2, [r5, #4]
   219c8:	str	r2, [r3, #716]	; 0x2cc
   219cc:	b	21980 <main@@Base+0x48>
   219d0:	strd	r4, [sp, #-16]!
   219d4:	str	r6, [sp, #8]
   219d8:	str	lr, [sp, #12]
   219dc:	sub	sp, sp, #8
   219e0:	mov	r4, r0
   219e4:	mov	r5, r2
   219e8:	ldr	r2, [r0, #28]
   219ec:	mov	r3, #1
   219f0:	str	r3, [sp]
   219f4:	ldr	r6, [r0, #48]	; 0x30
   219f8:	add	r2, r1, r2
   219fc:	add	r1, r0, #60	; 0x3c
   21a00:	ldr	r0, [r0, #40]	; 0x28
   21a04:	blx	r6
   21a08:	cmp	r0, #0
   21a0c:	bne	21a50 <main@@Base+0x118>
   21a10:	ldr	r1, [r4, #28]
   21a14:	ldr	r2, [r4, #60]	; 0x3c
   21a18:	add	r2, r2, r1
   21a1c:	str	r2, [r4, #16]
   21a20:	ldr	r3, [r4, #64]	; 0x40
   21a24:	sub	r3, r3, r1
   21a28:	cmp	r3, r5
   21a2c:	movcs	r3, r5
   21a30:	str	r3, [r4, #24]
   21a34:	ldr	r3, [r4, #32]
   21a38:	str	r5, [r3, #4]
   21a3c:	add	sp, sp, #8
   21a40:	ldrd	r4, [sp]
   21a44:	ldr	r6, [sp, #8]
   21a48:	add	sp, sp, #12
   21a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   21a50:	mvn	r0, #0
   21a54:	b	21a3c <main@@Base+0x104>

00021a58 <flatcc_builder_default_alloc@@Base>:
   21a58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21a5c:	strd	r6, [sp, #8]
   21a60:	str	r8, [sp, #16]
   21a64:	str	lr, [sp, #20]
   21a68:	mov	r5, r1
   21a6c:	cmp	r2, #0
   21a70:	beq	21aa8 <flatcc_builder_default_alloc@@Base+0x50>
   21a74:	mov	r6, r3
   21a78:	ldr	r3, [sp, #24]
   21a7c:	sub	r3, r3, #1
   21a80:	cmp	r3, #6
   21a84:	ldrls	pc, [pc, r3, lsl #2]
   21a88:	b	21b54 <flatcc_builder_default_alloc@@Base+0xfc>
   21a8c:	ldrdeq	r1, [r2], -r4
   21a90:	andeq	r1, r2, r4, asr fp
   21a94:	andeq	r1, r2, r4, asr fp
   21a98:	andeq	r1, r2, ip, asr #21
   21a9c:	andeq	r1, r2, ip, asr fp
   21aa0:	andeq	r1, r2, r4, asr fp
   21aa4:	andeq	r1, r2, ip, asr #22
   21aa8:	ldr	r0, [r1]
   21aac:	cmp	r0, #0
   21ab0:	moveq	r0, #0
   21ab4:	beq	21b38 <flatcc_builder_default_alloc@@Base+0xe0>
   21ab8:	bl	1257c <free@plt>
   21abc:	mov	r0, #0
   21ac0:	str	r0, [r5]
   21ac4:	str	r0, [r5, #4]
   21ac8:	b	21b38 <flatcc_builder_default_alloc@@Base+0xe0>
   21acc:	mov	r4, #288	; 0x120
   21ad0:	b	21ad8 <flatcc_builder_default_alloc@@Base+0x80>
   21ad4:	mov	r4, #256	; 0x100
   21ad8:	cmp	r4, r2
   21adc:	bcs	21aec <flatcc_builder_default_alloc@@Base+0x94>
   21ae0:	lsl	r4, r4, #1
   21ae4:	cmp	r2, r4
   21ae8:	bhi	21ae0 <flatcc_builder_default_alloc@@Base+0x88>
   21aec:	ldr	r3, [r5, #4]
   21af0:	cmp	r3, r2
   21af4:	bcc	21b04 <flatcc_builder_default_alloc@@Base+0xac>
   21af8:	cmp	r4, r3, lsr #1
   21afc:	movls	r0, #0
   21b00:	bls	21b38 <flatcc_builder_default_alloc@@Base+0xe0>
   21b04:	mov	r1, r4
   21b08:	ldr	r0, [r5]
   21b0c:	bl	125b8 <realloc@plt>
   21b10:	subs	r7, r0, #0
   21b14:	beq	21b78 <flatcc_builder_default_alloc@@Base+0x120>
   21b18:	cmp	r6, #0
   21b1c:	beq	21b2c <flatcc_builder_default_alloc@@Base+0xd4>
   21b20:	ldr	r0, [r5, #4]
   21b24:	cmp	r0, r4
   21b28:	bcc	21b64 <flatcc_builder_default_alloc@@Base+0x10c>
   21b2c:	str	r7, [r5]
   21b30:	str	r4, [r5, #4]
   21b34:	mov	r0, #0
   21b38:	ldrd	r4, [sp]
   21b3c:	ldrd	r6, [sp, #8]
   21b40:	ldr	r8, [sp, #16]
   21b44:	add	sp, sp, #20
   21b48:	pop	{pc}		; (ldr pc, [sp], #4)
   21b4c:	mov	r4, #64	; 0x40
   21b50:	b	21ad8 <flatcc_builder_default_alloc@@Base+0x80>
   21b54:	mov	r4, #32
   21b58:	b	21ad8 <flatcc_builder_default_alloc@@Base+0x80>
   21b5c:	mov	r4, r2
   21b60:	b	21aec <flatcc_builder_default_alloc@@Base+0x94>
   21b64:	sub	r2, r4, r0
   21b68:	mov	r1, #0
   21b6c:	add	r0, r7, r0
   21b70:	bl	12630 <memset@plt>
   21b74:	b	21b2c <flatcc_builder_default_alloc@@Base+0xd4>
   21b78:	mvn	r0, #0
   21b7c:	b	21b38 <flatcc_builder_default_alloc@@Base+0xe0>
   21b80:	cmp	r2, #0
   21b84:	bne	21b94 <flatcc_builder_default_alloc@@Base+0x13c>
   21b88:	ldrh	r2, [r0, #132]	; 0x84
   21b8c:	cmp	r2, #0
   21b90:	moveq	r2, #1
   21b94:	ldrh	ip, [r1]
   21b98:	cmp	ip, #3
   21b9c:	movls	ip, #4
   21ba0:	strhls	ip, [r1]
   21ba4:	ldrh	ip, [r1]
   21ba8:	cmp	ip, r2
   21bac:	strhcc	r2, [r1]
   21bb0:	cmp	r3, #0
   21bb4:	bne	21c94 <flatcc_builder_default_alloc@@Base+0x23c>
   21bb8:	strd	r4, [sp, #-12]!
   21bbc:	str	lr, [sp, #8]
   21bc0:	sub	sp, sp, #84	; 0x54
   21bc4:	ldr	r4, [r0, #140]	; 0x8c
   21bc8:	sub	r2, r2, #1
   21bcc:	ands	r2, r2, r4
   21bd0:	bne	21be8 <flatcc_builder_default_alloc@@Base+0x190>
   21bd4:	mov	r0, #0
   21bd8:	add	sp, sp, #84	; 0x54
   21bdc:	ldrd	r4, [sp]
   21be0:	add	sp, sp, #8
   21be4:	pop	{pc}		; (ldr pc, [sp], #4)
   21be8:	str	r2, [sp, #8]
   21bec:	movw	r3, #46800	; 0xb6d0
   21bf0:	movt	r3, #2
   21bf4:	str	r3, [sp, #16]
   21bf8:	str	r2, [sp, #20]
   21bfc:	mov	r3, #1
   21c00:	str	r3, [sp, #12]
   21c04:	add	r3, r4, r2
   21c08:	str	r3, [r0, #140]	; 0x8c
   21c0c:	cmp	r4, r3
   21c10:	bgt	21c5c <flatcc_builder_default_alloc@@Base+0x204>
   21c14:	str	r2, [sp]
   21c18:	ldr	r5, [r0, #44]	; 0x2c
   21c1c:	mov	r3, r4
   21c20:	mov	r2, #1
   21c24:	add	r1, sp, #16
   21c28:	ldr	r0, [r0, #36]	; 0x24
   21c2c:	blx	r5
   21c30:	cmp	r0, #0
   21c34:	bne	21c78 <flatcc_builder_default_alloc@@Base+0x220>
   21c38:	cmn	r4, #1
   21c3c:	bne	21bd4 <flatcc_builder_default_alloc@@Base+0x17c>
   21c40:	ldr	r3, [pc, #84]	; 21c9c <flatcc_builder_default_alloc@@Base+0x244>
   21c44:	movw	r2, #702	; 0x2be
   21c48:	movw	r1, #48672	; 0xbe20
   21c4c:	movt	r1, #2
   21c50:	movw	r0, #48756	; 0xbe74
   21c54:	movt	r0, #2
   21c58:	bl	12684 <__assert_fail@plt>
   21c5c:	ldr	r3, [pc, #60]	; 21ca0 <flatcc_builder_default_alloc@@Base+0x248>
   21c60:	movw	r2, #673	; 0x2a1
   21c64:	movw	r1, #48672	; 0xbe20
   21c68:	movt	r1, #2
   21c6c:	movw	r0, #48756	; 0xbe74
   21c70:	movt	r0, #2
   21c74:	bl	12684 <__assert_fail@plt>
   21c78:	ldr	r3, [pc, #32]	; 21ca0 <flatcc_builder_default_alloc@@Base+0x248>
   21c7c:	movw	r2, #677	; 0x2a5
   21c80:	movw	r1, #48672	; 0xbe20
   21c84:	movt	r1, #2
   21c88:	movw	r0, #48756	; 0xbe74
   21c8c:	movt	r0, #2
   21c90:	bl	12684 <__assert_fail@plt>
   21c94:	mov	r0, #0
   21c98:	bx	lr
   21c9c:	ldrdeq	fp, [r2], -ip
   21ca0:	ldrdeq	fp, [r2], -r0
   21ca4:	strd	r4, [sp, #-20]!	; 0xffffffec
   21ca8:	strd	r6, [sp, #8]
   21cac:	str	lr, [sp, #16]
   21cb0:	sub	sp, sp, #12
   21cb4:	mov	r4, r0
   21cb8:	mov	r6, r1
   21cbc:	ldr	r3, [r0, #156]	; 0x9c
   21cc0:	add	r2, r3, #1
   21cc4:	str	r2, [r0, #156]	; 0x9c
   21cc8:	ldr	r1, [r0, #160]	; 0xa0
   21ccc:	cmp	r2, r1
   21cd0:	ble	21d88 <flatcc_builder_default_alloc@@Base+0x330>
   21cd4:	ldr	r1, [r0, #176]	; 0xb0
   21cd8:	cmp	r2, r1
   21cdc:	cmpgt	r1, #0
   21ce0:	bgt	21dfc <flatcc_builder_default_alloc@@Base+0x3a4>
   21ce4:	add	r3, r3, r3, lsl #3
   21ce8:	lsl	r5, r3, #2
   21cec:	add	r2, r5, #36	; 0x24
   21cf0:	ldr	r3, [r0, #88]	; 0x58
   21cf4:	cmp	r2, r3
   21cf8:	bls	21d20 <flatcc_builder_default_alloc@@Base+0x2c8>
   21cfc:	mov	r3, #4
   21d00:	str	r3, [sp]
   21d04:	ldr	r7, [r0, #48]	; 0x30
   21d08:	mov	r3, #0
   21d0c:	add	r1, r0, #84	; 0x54
   21d10:	ldr	r0, [r0, #40]	; 0x28
   21d14:	blx	r7
   21d18:	cmp	r0, #0
   21d1c:	bne	21d6c <flatcc_builder_default_alloc@@Base+0x314>
   21d20:	ldr	r3, [r4, #84]	; 0x54
   21d24:	add	r5, r3, r5
   21d28:	str	r5, [r4, #32]
   21d2c:	cmp	r5, #0
   21d30:	beq	21e04 <flatcc_builder_default_alloc@@Base+0x3ac>
   21d34:	ldr	r3, [r4, #88]	; 0x58
   21d38:	movw	r2, #36409	; 0x8e39
   21d3c:	movt	r2, #14563	; 0x38e3
   21d40:	umull	r2, r3, r2, r3
   21d44:	lsr	r3, r3, #3
   21d48:	ldr	r2, [r4, #176]	; 0xb0
   21d4c:	cmp	r2, #0
   21d50:	cmpgt	r3, r2
   21d54:	movgt	r1, #1
   21d58:	movle	r1, #0
   21d5c:	cmp	r1, #0
   21d60:	movne	r3, r2
   21d64:	str	r3, [r4, #160]	; 0xa0
   21d68:	b	21d94 <flatcc_builder_default_alloc@@Base+0x33c>
   21d6c:	ldr	r3, [pc, #152]	; 21e0c <flatcc_builder_default_alloc@@Base+0x3b4>
   21d70:	mov	r2, #308	; 0x134
   21d74:	movw	r1, #48672	; 0xbe20
   21d78:	movt	r1, #2
   21d7c:	movw	r0, #48756	; 0xbe74
   21d80:	movt	r0, #2
   21d84:	bl	12684 <__assert_fail@plt>
   21d88:	ldr	r3, [r0, #32]
   21d8c:	add	r3, r3, #36	; 0x24
   21d90:	str	r3, [r0, #32]
   21d94:	ldr	r3, [r4, #32]
   21d98:	ldr	r2, [r4, #20]
   21d9c:	str	r2, [r3, #8]
   21da0:	ldr	r3, [r4, #32]
   21da4:	ldrh	r2, [r4, #130]	; 0x82
   21da8:	strh	r2, [r3, #12]
   21dac:	strh	r6, [r4, #130]	; 0x82
   21db0:	ldr	r3, [r4, #32]
   21db4:	ldr	r2, [r4, #28]
   21db8:	str	r2, [r3]
   21dbc:	ldr	r3, [r4, #32]
   21dc0:	mvn	r2, #3
   21dc4:	str	r2, [r3, #4]
   21dc8:	ldr	r3, [r4, #28]
   21dcc:	ldr	r2, [r4, #20]
   21dd0:	add	r3, r3, r2
   21dd4:	add	r3, r3, #7
   21dd8:	bic	r3, r3, #7
   21ddc:	str	r3, [r4, #28]
   21de0:	mov	r0, #0
   21de4:	str	r0, [r4, #20]
   21de8:	add	sp, sp, #12
   21dec:	ldrd	r4, [sp]
   21df0:	ldrd	r6, [sp, #8]
   21df4:	add	sp, sp, #16
   21df8:	pop	{pc}		; (ldr pc, [sp], #4)
   21dfc:	mvn	r0, #0
   21e00:	b	21de8 <flatcc_builder_default_alloc@@Base+0x390>
   21e04:	mvn	r0, #0
   21e08:	b	21de8 <flatcc_builder_default_alloc@@Base+0x390>
   21e0c:	andeq	fp, r2, ip, ror #17
   21e10:	strd	r4, [sp, #-16]!
   21e14:	str	r6, [sp, #8]
   21e18:	str	lr, [sp, #12]
   21e1c:	sub	sp, sp, #88	; 0x58
   21e20:	cmn	r2, #-1073741823	; 0xc0000001
   21e24:	bhi	22008 <flatcc_builder_default_alloc@@Base+0x5b0>
   21e28:	ldrh	ip, [r0, #128]	; 0x80
   21e2c:	cmp	ip, #3
   21e30:	movls	ip, #4
   21e34:	strhls	ip, [r0, #128]	; 0x80
   21e38:	str	r2, [sp, #84]	; 0x54
   21e3c:	ldr	lr, [r0, #136]	; 0x88
   21e40:	and	ip, lr, #3
   21e44:	mov	r4, #4
   21e48:	str	r4, [sp, #12]
   21e4c:	add	r5, sp, #84	; 0x54
   21e50:	str	r5, [sp, #20]
   21e54:	str	r4, [sp, #24]
   21e58:	mov	r4, #1
   21e5c:	str	r4, [sp, #16]
   21e60:	lsls	r4, r2, #2
   21e64:	beq	21e80 <flatcc_builder_default_alloc@@Base+0x428>
   21e68:	add	r5, r4, #4
   21e6c:	str	r5, [sp, #12]
   21e70:	str	r1, [sp, #28]
   21e74:	str	r4, [sp, #32]
   21e78:	mov	r4, #2
   21e7c:	str	r4, [sp, #16]
   21e80:	cmp	ip, #0
   21e84:	beq	21eb8 <flatcc_builder_default_alloc@@Base+0x460>
   21e88:	ldr	r4, [sp, #12]
   21e8c:	add	r4, r4, ip
   21e90:	str	r4, [sp, #12]
   21e94:	ldr	r4, [sp, #16]
   21e98:	add	r4, r4, #1
   21e9c:	add	r5, sp, #88	; 0x58
   21ea0:	add	r6, r5, r4, lsl #3
   21ea4:	movw	r5, #46800	; 0xb6d0
   21ea8:	movt	r5, #2
   21eac:	str	r5, [r6, #-76]	; 0xffffffb4
   21eb0:	str	ip, [r6, #-72]	; 0xffffffb8
   21eb4:	str	r4, [sp, #16]
   21eb8:	mov	r5, r0
   21ebc:	ldr	r6, [sp, #12]
   21ec0:	cmp	r2, #0
   21ec4:	beq	21f80 <flatcc_builder_default_alloc@@Base+0x528>
   21ec8:	mov	ip, r3
   21ecc:	add	r4, r2, r3
   21ed0:	mov	r2, r1
   21ed4:	add	r1, r1, r6
   21ed8:	sub	r0, r1, lr
   21edc:	b	21f00 <flatcc_builder_default_alloc@@Base+0x4a8>
   21ee0:	cmp	r3, #0
   21ee4:	beq	21f64 <flatcc_builder_default_alloc@@Base+0x50c>
   21ee8:	ldrb	r1, [ip]
   21eec:	cmp	r1, #0
   21ef0:	bne	21f48 <flatcc_builder_default_alloc@@Base+0x4f0>
   21ef4:	add	ip, ip, #1
   21ef8:	cmp	ip, r4
   21efc:	beq	21f80 <flatcc_builder_default_alloc@@Base+0x528>
   21f00:	ldr	r1, [r2], #4
   21f04:	cmp	r1, #0
   21f08:	beq	21ee0 <flatcc_builder_default_alloc@@Base+0x488>
   21f0c:	sub	lr, r0, r2
   21f10:	add	r1, lr, r1
   21f14:	str	r1, [r2, #-4]
   21f18:	cmp	r3, #0
   21f1c:	beq	21ef4 <flatcc_builder_default_alloc@@Base+0x49c>
   21f20:	ldrb	r1, [ip]
   21f24:	cmp	r1, #0
   21f28:	bne	21ef4 <flatcc_builder_default_alloc@@Base+0x49c>
   21f2c:	ldr	r3, [pc, #220]	; 22010 <flatcc_builder_default_alloc@@Base+0x5b8>
   21f30:	movw	r2, #1457	; 0x5b1
   21f34:	movw	r1, #48672	; 0xbe20
   21f38:	movt	r1, #2
   21f3c:	movw	r0, #48744	; 0xbe68
   21f40:	movt	r0, #2
   21f44:	bl	12684 <__assert_fail@plt>
   21f48:	ldr	r3, [pc, #192]	; 22010 <flatcc_builder_default_alloc@@Base+0x5b8>
   21f4c:	movw	r2, #1461	; 0x5b5
   21f50:	movw	r1, #48672	; 0xbe20
   21f54:	movt	r1, #2
   21f58:	movw	r0, #48760	; 0xbe78
   21f5c:	movt	r0, #2
   21f60:	bl	12684 <__assert_fail@plt>
   21f64:	ldr	r3, [pc, #164]	; 22010 <flatcc_builder_default_alloc@@Base+0x5b8>
   21f68:	movw	r2, #1463	; 0x5b7
   21f6c:	movw	r1, #48672	; 0xbe20
   21f70:	movt	r1, #2
   21f74:	movw	r0, #48756	; 0xbe74
   21f78:	movt	r0, #2
   21f7c:	bl	12684 <__assert_fail@plt>
   21f80:	ldr	r3, [r5, #136]	; 0x88
   21f84:	sub	r4, r3, r6
   21f88:	cmp	r3, r4
   21f8c:	ble	21fd0 <flatcc_builder_default_alloc@@Base+0x578>
   21f90:	str	r6, [sp]
   21f94:	ldr	r6, [r5, #44]	; 0x2c
   21f98:	mov	r3, r4
   21f9c:	ldr	r2, [sp, #16]
   21fa0:	add	r1, sp, #20
   21fa4:	ldr	r0, [r5, #36]	; 0x24
   21fa8:	blx	r6
   21fac:	cmp	r0, #0
   21fb0:	streq	r4, [r5, #136]	; 0x88
   21fb4:	bne	21fec <flatcc_builder_default_alloc@@Base+0x594>
   21fb8:	mov	r0, r4
   21fbc:	add	sp, sp, #88	; 0x58
   21fc0:	ldrd	r4, [sp]
   21fc4:	ldr	r6, [sp, #8]
   21fc8:	add	sp, sp, #12
   21fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   21fd0:	ldr	r3, [pc, #60]	; 22014 <flatcc_builder_default_alloc@@Base+0x5bc>
   21fd4:	movw	r2, #647	; 0x287
   21fd8:	movw	r1, #48672	; 0xbe20
   21fdc:	movt	r1, #2
   21fe0:	movw	r0, #48756	; 0xbe74
   21fe4:	movt	r0, #2
   21fe8:	bl	12684 <__assert_fail@plt>
   21fec:	ldr	r3, [pc, #32]	; 22014 <flatcc_builder_default_alloc@@Base+0x5bc>
   21ff0:	movw	r2, #651	; 0x28b
   21ff4:	movw	r1, #48672	; 0xbe20
   21ff8:	movt	r1, #2
   21ffc:	movw	r0, #48756	; 0xbe74
   22000:	movt	r0, #2
   22004:	bl	12684 <__assert_fail@plt>
   22008:	mov	r4, #0
   2200c:	b	21fb8 <flatcc_builder_default_alloc@@Base+0x560>
   22010:	strdeq	fp, [r2], -ip
   22014:	andeq	fp, r2, ip, lsl r9

00022018 <flatcc_builder_flush_vtable_cache@@Base>:
   22018:	ldr	r3, [r0, #116]	; 0x74
   2201c:	cmp	r3, #0
   22020:	bxeq	lr
   22024:	str	r4, [sp, #-8]!
   22028:	str	lr, [sp, #4]
   2202c:	mov	r4, r0
   22030:	ldr	r2, [r0, #96]	; 0x60
   22034:	mov	r1, #0
   22038:	ldr	r0, [r0, #92]	; 0x5c
   2203c:	bl	12630 <memset@plt>
   22040:	mov	r3, #16
   22044:	str	r3, [r4, #124]	; 0x7c
   22048:	mov	r3, #0
   2204c:	str	r3, [r4, #120]	; 0x78
   22050:	ldr	r4, [sp]
   22054:	add	sp, sp, #4
   22058:	pop	{pc}		; (ldr pc, [sp], #4)

0002205c <flatcc_builder_custom_init@@Base>:
   2205c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22060:	strd	r6, [sp, #8]
   22064:	str	r8, [sp, #16]
   22068:	str	lr, [sp, #20]
   2206c:	mov	r4, r0
   22070:	mov	r6, r1
   22074:	mov	r7, r2
   22078:	mov	r5, r3
   2207c:	mov	r2, #232	; 0xe8
   22080:	mov	r1, #0
   22084:	bl	12630 <memset@plt>
   22088:	cmp	r6, #0
   2208c:	beq	220cc <flatcc_builder_custom_init@@Base+0x70>
   22090:	movw	r3, #6744	; 0x1a58
   22094:	movt	r3, #2
   22098:	cmp	r5, #0
   2209c:	moveq	r5, r3
   220a0:	ldr	r3, [sp, #24]
   220a4:	str	r3, [r4, #40]	; 0x28
   220a8:	str	r5, [r4, #48]	; 0x30
   220ac:	str	r7, [r4, #36]	; 0x24
   220b0:	str	r6, [r4, #44]	; 0x2c
   220b4:	mov	r0, #0
   220b8:	ldrd	r4, [sp]
   220bc:	ldrd	r6, [sp, #8]
   220c0:	ldr	r8, [sp, #16]
   220c4:	add	sp, sp, #20
   220c8:	pop	{pc}		; (ldr pc, [sp], #4)
   220cc:	mov	r3, #1
   220d0:	str	r3, [r4, #184]	; 0xb8
   220d4:	add	r7, r4, #188	; 0xbc
   220d8:	movw	r6, #24872	; 0x6128
   220dc:	movt	r6, #2
   220e0:	b	22090 <flatcc_builder_custom_init@@Base+0x34>

000220e4 <flatcc_builder_init@@Base>:
   220e4:	str	r4, [sp, #-8]!
   220e8:	str	lr, [sp, #4]
   220ec:	mov	r4, r0
   220f0:	mov	r2, #232	; 0xe8
   220f4:	mov	r1, #0
   220f8:	bl	12630 <memset@plt>
   220fc:	mov	r3, #1
   22100:	str	r3, [r4, #184]	; 0xb8
   22104:	movw	r3, #6744	; 0x1a58
   22108:	movt	r3, #2
   2210c:	str	r3, [r4, #48]	; 0x30
   22110:	add	r3, r4, #188	; 0xbc
   22114:	str	r3, [r4, #36]	; 0x24
   22118:	movw	r3, #24872	; 0x6128
   2211c:	movt	r3, #2
   22120:	str	r3, [r4, #44]	; 0x2c
   22124:	mov	r0, #0
   22128:	ldr	r4, [sp]
   2212c:	add	sp, sp, #4
   22130:	pop	{pc}		; (ldr pc, [sp], #4)

00022134 <flatcc_builder_custom_reset@@Base>:
   22134:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22138:	strd	r6, [sp, #8]
   2213c:	strd	r8, [sp, #16]
   22140:	strd	sl, [sp, #24]
   22144:	str	lr, [sp, #32]
   22148:	sub	sp, sp, #12
   2214c:	mov	r6, r0
   22150:	mov	fp, r1
   22154:	mov	r9, r2
   22158:	mov	r4, r0
   2215c:	mov	r5, #0
   22160:	mov	sl, r5
   22164:	mov	r8, #1
   22168:	b	2218c <flatcc_builder_custom_reset@@Base+0x58>
   2216c:	ldr	r2, [r7, #56]	; 0x38
   22170:	mov	r1, sl
   22174:	ldr	r0, [r7, #52]	; 0x34
   22178:	bl	12630 <memset@plt>
   2217c:	add	r5, r5, #1
   22180:	add	r4, r4, #8
   22184:	cmp	r5, #8
   22188:	beq	221fc <flatcc_builder_custom_reset@@Base+0xc8>
   2218c:	add	r1, r4, #52	; 0x34
   22190:	mov	r7, r4
   22194:	ldr	r3, [r4, #52]	; 0x34
   22198:	cmp	r3, #0
   2219c:	beq	221d4 <flatcc_builder_custom_reset@@Base+0xa0>
   221a0:	cmp	r5, #5
   221a4:	cmpne	r9, #0
   221a8:	beq	2216c <flatcc_builder_custom_reset@@Base+0x38>
   221ac:	str	r5, [sp]
   221b0:	mov	r3, r8
   221b4:	mov	r2, r8
   221b8:	ldr	r0, [r6, #40]	; 0x28
   221bc:	ldr	ip, [r6, #48]	; 0x30
   221c0:	blx	ip
   221c4:	cmp	r0, #0
   221c8:	beq	2216c <flatcc_builder_custom_reset@@Base+0x38>
   221cc:	mvn	r0, #0
   221d0:	b	22278 <flatcc_builder_custom_reset@@Base+0x144>
   221d4:	ldr	r3, [r4, #56]	; 0x38
   221d8:	cmp	r3, #0
   221dc:	beq	2217c <flatcc_builder_custom_reset@@Base+0x48>
   221e0:	ldr	r3, [pc, #188]	; 222a4 <flatcc_builder_custom_reset@@Base+0x170>
   221e4:	movw	r2, #434	; 0x1b2
   221e8:	movw	r1, #48672	; 0xbe20
   221ec:	movt	r1, #2
   221f0:	movw	r0, #48776	; 0xbe88
   221f4:	movt	r0, #2
   221f8:	bl	12684 <__assert_fail@plt>
   221fc:	mov	r3, #0
   22200:	str	r3, [r6, #120]	; 0x78
   22204:	ldr	r3, [r6, #124]	; 0x7c
   22208:	cmp	r3, #0
   2220c:	movne	r3, #16
   22210:	strne	r3, [r6, #124]	; 0x7c
   22214:	mov	r3, #0
   22218:	strh	r3, [r6, #128]	; 0x80
   2221c:	str	r3, [r6, #136]	; 0x88
   22220:	str	r3, [r6, #140]	; 0x8c
   22224:	str	r3, [r6, #156]	; 0x9c
   22228:	str	r3, [r6, #160]	; 0xa0
   2222c:	str	r3, [r6, #20]
   22230:	str	r3, [r6, #24]
   22234:	str	r3, [r6, #148]	; 0x94
   22238:	str	r3, [r6, #152]	; 0x98
   2223c:	ldr	r2, [r6, #60]	; 0x3c
   22240:	str	r2, [r6, #16]
   22244:	ldr	r2, [r6, #76]	; 0x4c
   22248:	str	r2, [r6]
   2224c:	ldr	r2, [r6, #52]	; 0x34
   22250:	str	r2, [r6, #4]
   22254:	str	r3, [r6, #32]
   22258:	cmp	fp, r3
   2225c:	beq	2226c <flatcc_builder_custom_reset@@Base+0x138>
   22260:	str	r3, [r6, #172]	; 0xac
   22264:	str	r3, [r6, #176]	; 0xb0
   22268:	str	r3, [r6, #180]	; 0xb4
   2226c:	ldr	r0, [r6, #184]	; 0xb8
   22270:	cmp	r0, #0
   22274:	bne	22294 <flatcc_builder_custom_reset@@Base+0x160>
   22278:	add	sp, sp, #12
   2227c:	ldrd	r4, [sp]
   22280:	ldrd	r6, [sp, #8]
   22284:	ldrd	r8, [sp, #16]
   22288:	ldrd	sl, [sp, #24]
   2228c:	add	sp, sp, #32
   22290:	pop	{pc}		; (ldr pc, [sp], #4)
   22294:	add	r0, r6, #188	; 0xbc
   22298:	bl	25fd0 <flatcc_emitter_reset@@Base>
   2229c:	mov	r0, #0
   222a0:	b	22278 <flatcc_builder_custom_reset@@Base+0x144>
   222a4:	andeq	fp, r2, r8, lsr #18

000222a8 <flatcc_builder_reset@@Base>:
   222a8:	str	r4, [sp, #-8]!
   222ac:	str	lr, [sp, #4]
   222b0:	mov	r2, #0
   222b4:	mov	r1, r2
   222b8:	bl	22134 <flatcc_builder_custom_reset@@Base>
   222bc:	ldr	r4, [sp]
   222c0:	add	sp, sp, #4
   222c4:	pop	{pc}		; (ldr pc, [sp], #4)

000222c8 <flatcc_builder_clear@@Base>:
   222c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   222cc:	strd	r6, [sp, #8]
   222d0:	str	r8, [sp, #16]
   222d4:	str	lr, [sp, #20]
   222d8:	sub	sp, sp, #8
   222dc:	mov	r6, r0
   222e0:	add	r5, r0, #52	; 0x34
   222e4:	mov	r4, #0
   222e8:	mov	r8, r4
   222ec:	str	r4, [sp]
   222f0:	ldr	r7, [r6, #48]	; 0x30
   222f4:	mov	r3, r8
   222f8:	mov	r2, r8
   222fc:	mov	r1, r5
   22300:	ldr	r0, [r6, #40]	; 0x28
   22304:	blx	r7
   22308:	add	r4, r4, #1
   2230c:	add	r5, r5, #8
   22310:	cmp	r4, #8
   22314:	bne	222ec <flatcc_builder_clear@@Base+0x24>
   22318:	ldr	r3, [r6, #184]	; 0xb8
   2231c:	cmp	r3, #0
   22320:	bne	2234c <flatcc_builder_clear@@Base+0x84>
   22324:	mov	r2, #232	; 0xe8
   22328:	mov	r1, #0
   2232c:	mov	r0, r6
   22330:	bl	12630 <memset@plt>
   22334:	add	sp, sp, #8
   22338:	ldrd	r4, [sp]
   2233c:	ldrd	r6, [sp, #8]
   22340:	ldr	r8, [sp, #16]
   22344:	add	sp, sp, #20
   22348:	pop	{pc}		; (ldr pc, [sp], #4)
   2234c:	add	r0, r6, #188	; 0xbc
   22350:	bl	260ac <flatcc_emitter_clear@@Base>
   22354:	b	22324 <flatcc_builder_clear@@Base+0x5c>

00022358 <flatcc_builder_enter_user_frame_ptr@@Base>:
   22358:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2235c:	strd	r6, [sp, #8]
   22360:	str	r8, [sp, #16]
   22364:	str	lr, [sp, #20]
   22368:	sub	sp, sp, #8
   2236c:	mov	r4, r0
   22370:	add	r5, r1, #3
   22374:	bic	r5, r5, #3
   22378:	add	r5, r5, #4
   2237c:	ldr	r6, [r0, #228]	; 0xe4
   22380:	add	r2, r6, r5
   22384:	ldr	r3, [r0, #112]	; 0x70
   22388:	cmp	r2, r3
   2238c:	bls	223b4 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   22390:	mov	r3, #7
   22394:	str	r3, [sp]
   22398:	ldr	r7, [r0, #48]	; 0x30
   2239c:	mov	r3, #0
   223a0:	add	r1, r0, #108	; 0x6c
   223a4:	ldr	r0, [r0, #40]	; 0x28
   223a8:	blx	r7
   223ac:	cmp	r0, #0
   223b0:	bne	2240c <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   223b4:	ldr	r8, [r4, #108]	; 0x6c
   223b8:	adds	r7, r8, r6
   223bc:	moveq	r0, #0
   223c0:	beq	223f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   223c4:	mov	r2, r5
   223c8:	mov	r1, #0
   223cc:	mov	r0, r7
   223d0:	bl	12630 <memset@plt>
   223d4:	add	r0, r7, #4
   223d8:	ldr	r3, [r4, #224]	; 0xe0
   223dc:	str	r3, [r8, r6]
   223e0:	ldr	r1, [r4, #228]	; 0xe4
   223e4:	add	r3, r1, #4
   223e8:	str	r3, [r4, #224]	; 0xe0
   223ec:	add	r5, r1, r5
   223f0:	str	r5, [r4, #228]	; 0xe4
   223f4:	add	sp, sp, #8
   223f8:	ldrd	r4, [sp]
   223fc:	ldrd	r6, [sp, #8]
   22400:	ldr	r8, [sp, #16]
   22404:	add	sp, sp, #20
   22408:	pop	{pc}		; (ldr pc, [sp], #4)
   2240c:	ldr	r3, [pc, #20]	; 22428 <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   22410:	mov	r2, #308	; 0x134
   22414:	movw	r1, #48672	; 0xbe20
   22418:	movt	r1, #2
   2241c:	movw	r0, #48756	; 0xbe74
   22420:	movt	r0, #2
   22424:	bl	12684 <__assert_fail@plt>
   22428:	andeq	fp, r2, ip, ror #17

0002242c <flatcc_builder_enter_user_frame@@Base>:
   2242c:	strd	r4, [sp, #-20]!	; 0xffffffec
   22430:	strd	r6, [sp, #8]
   22434:	str	lr, [sp, #16]
   22438:	sub	sp, sp, #12
   2243c:	mov	r4, r0
   22440:	add	r5, r1, #3
   22444:	bic	r5, r5, #3
   22448:	add	r5, r5, #4
   2244c:	ldr	r6, [r0, #228]	; 0xe4
   22450:	add	r2, r6, r5
   22454:	ldr	r3, [r0, #112]	; 0x70
   22458:	cmp	r2, r3
   2245c:	bls	22484 <flatcc_builder_enter_user_frame@@Base+0x58>
   22460:	mov	r3, #7
   22464:	str	r3, [sp]
   22468:	ldr	r7, [r0, #48]	; 0x30
   2246c:	mov	r3, #0
   22470:	add	r1, r0, #108	; 0x6c
   22474:	ldr	r0, [r0, #40]	; 0x28
   22478:	blx	r7
   2247c:	cmp	r0, #0
   22480:	bne	224cc <flatcc_builder_enter_user_frame@@Base+0xa0>
   22484:	ldr	r7, [r4, #108]	; 0x6c
   22488:	adds	r0, r7, r6
   2248c:	beq	224b8 <flatcc_builder_enter_user_frame@@Base+0x8c>
   22490:	mov	r2, r5
   22494:	mov	r1, #0
   22498:	bl	12630 <memset@plt>
   2249c:	ldr	r3, [r4, #224]	; 0xe0
   224a0:	str	r3, [r7, r6]
   224a4:	ldr	r1, [r4, #228]	; 0xe4
   224a8:	add	r0, r1, #4
   224ac:	str	r0, [r4, #224]	; 0xe0
   224b0:	add	r5, r1, r5
   224b4:	str	r5, [r4, #228]	; 0xe4
   224b8:	add	sp, sp, #12
   224bc:	ldrd	r4, [sp]
   224c0:	ldrd	r6, [sp, #8]
   224c4:	add	sp, sp, #16
   224c8:	pop	{pc}		; (ldr pc, [sp], #4)
   224cc:	ldr	r3, [pc, #20]	; 224e8 <flatcc_builder_enter_user_frame@@Base+0xbc>
   224d0:	mov	r2, #308	; 0x134
   224d4:	movw	r1, #48672	; 0xbe20
   224d8:	movt	r1, #2
   224dc:	movw	r0, #48756	; 0xbe74
   224e0:	movt	r0, #2
   224e4:	bl	12684 <__assert_fail@plt>
   224e8:	andeq	fp, r2, ip, ror #17

000224ec <flatcc_builder_exit_user_frame@@Base>:
   224ec:	ldr	r3, [r0, #224]	; 0xe0
   224f0:	cmp	r3, #0
   224f4:	beq	22518 <flatcc_builder_exit_user_frame@@Base+0x2c>
   224f8:	ldr	r2, [r0, #108]	; 0x6c
   224fc:	add	r2, r2, r3
   22500:	sub	r3, r3, #4
   22504:	str	r3, [r0, #228]	; 0xe4
   22508:	ldr	r3, [r2, #-4]
   2250c:	str	r3, [r0, #224]	; 0xe0
   22510:	mov	r0, r3
   22514:	bx	lr
   22518:	str	r4, [sp, #-8]!
   2251c:	str	lr, [sp, #4]
   22520:	ldr	r3, [pc, #20]	; 2253c <flatcc_builder_exit_user_frame@@Base+0x50>
   22524:	movw	r2, #542	; 0x21e
   22528:	movw	r1, #48672	; 0xbe20
   2252c:	movt	r1, #2
   22530:	movw	r0, #48796	; 0xbe9c
   22534:	movt	r0, #2
   22538:	bl	12684 <__assert_fail@plt>
   2253c:	andeq	fp, r2, r4, asr #18

00022540 <flatcc_builder_exit_user_frame_at@@Base>:
   22540:	str	r4, [sp, #-8]!
   22544:	str	lr, [sp, #4]
   22548:	ldr	r3, [r0, #224]	; 0xe0
   2254c:	cmp	r3, r1
   22550:	bcc	22568 <flatcc_builder_exit_user_frame_at@@Base+0x28>
   22554:	str	r1, [r0, #224]	; 0xe0
   22558:	bl	224ec <flatcc_builder_exit_user_frame@@Base>
   2255c:	ldr	r4, [sp]
   22560:	add	sp, sp, #4
   22564:	pop	{pc}		; (ldr pc, [sp], #4)
   22568:	ldr	r3, [pc, #20]	; 22584 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   2256c:	movw	r2, #551	; 0x227
   22570:	movw	r1, #48672	; 0xbe20
   22574:	movt	r1, #2
   22578:	movw	r0, #48824	; 0xbeb8
   2257c:	movt	r0, #2
   22580:	bl	12684 <__assert_fail@plt>
   22584:	andeq	fp, r2, r4, ror #18

00022588 <flatcc_builder_get_current_user_frame@@Base>:
   22588:	ldr	r0, [r0, #224]	; 0xe0
   2258c:	bx	lr

00022590 <flatcc_builder_get_user_frame_ptr@@Base>:
   22590:	ldr	r0, [r0, #108]	; 0x6c
   22594:	add	r0, r0, r1
   22598:	bx	lr

0002259c <flatcc_builder_embed_buffer@@Base>:
   2259c:	strd	r4, [sp, #-16]!
   225a0:	str	r6, [sp, #8]
   225a4:	str	lr, [sp, #12]
   225a8:	sub	sp, sp, #88	; 0x58
   225ac:	mov	r4, r0
   225b0:	mov	r6, r2
   225b4:	mov	r5, r3
   225b8:	ldr	r3, [r0, #152]	; 0x98
   225bc:	adds	r3, r3, #0
   225c0:	movne	r3, #1
   225c4:	mov	r2, r1
   225c8:	add	r1, sp, #104	; 0x68
   225cc:	bl	21b80 <flatcc_builder_default_alloc@@Base+0x128>
   225d0:	cmp	r0, #0
   225d4:	bne	22730 <flatcc_builder_embed_buffer@@Base+0x194>
   225d8:	ldr	r3, [sp, #108]	; 0x6c
   225dc:	and	r3, r3, #2
   225e0:	cmp	r3, #0
   225e4:	movne	r2, #4
   225e8:	moveq	r2, #0
   225ec:	ldr	r1, [r4, #136]	; 0x88
   225f0:	sub	r3, r1, r5
   225f4:	sub	r2, r3, r2
   225f8:	ldrh	r3, [sp, #104]	; 0x68
   225fc:	sub	r3, r3, #1
   22600:	and	r3, r3, r2
   22604:	add	r2, r5, r3
   22608:	str	r2, [sp, #84]	; 0x54
   2260c:	mov	r2, #0
   22610:	str	r2, [sp, #12]
   22614:	str	r2, [sp, #16]
   22618:	ldr	r2, [r4, #152]	; 0x98
   2261c:	cmp	r2, #0
   22620:	beq	22640 <flatcc_builder_embed_buffer@@Base+0xa4>
   22624:	mov	r2, #4
   22628:	str	r2, [sp, #12]
   2262c:	add	r0, sp, #84	; 0x54
   22630:	str	r0, [sp, #20]
   22634:	str	r2, [sp, #24]
   22638:	mov	r2, #1
   2263c:	str	r2, [sp, #16]
   22640:	cmp	r5, #0
   22644:	beq	22670 <flatcc_builder_embed_buffer@@Base+0xd4>
   22648:	ldr	r2, [sp, #12]
   2264c:	add	r2, r2, r5
   22650:	str	r2, [sp, #12]
   22654:	ldr	r2, [sp, #16]
   22658:	add	r2, r2, #1
   2265c:	add	r0, sp, #88	; 0x58
   22660:	add	r0, r0, r2, lsl #3
   22664:	str	r6, [r0, #-76]	; 0xffffffb4
   22668:	str	r5, [r0, #-72]	; 0xffffffb8
   2266c:	str	r2, [sp, #16]
   22670:	cmp	r3, #0
   22674:	beq	226a8 <flatcc_builder_embed_buffer@@Base+0x10c>
   22678:	ldr	r2, [sp, #12]
   2267c:	add	r2, r2, r3
   22680:	str	r2, [sp, #12]
   22684:	ldr	r2, [sp, #16]
   22688:	add	r2, r2, #1
   2268c:	add	r0, sp, #88	; 0x58
   22690:	add	ip, r0, r2, lsl #3
   22694:	movw	r0, #46800	; 0xb6d0
   22698:	movt	r0, #2
   2269c:	str	r0, [ip, #-76]	; 0xffffffb4
   226a0:	str	r3, [ip, #-72]	; 0xffffffb8
   226a4:	str	r2, [sp, #16]
   226a8:	ldr	r3, [sp, #12]
   226ac:	sub	r5, r1, r3
   226b0:	cmp	r1, r5
   226b4:	ble	226f8 <flatcc_builder_embed_buffer@@Base+0x15c>
   226b8:	str	r3, [sp]
   226bc:	ldr	r6, [r4, #44]	; 0x2c
   226c0:	mov	r3, r5
   226c4:	ldr	r2, [sp, #16]
   226c8:	add	r1, sp, #20
   226cc:	ldr	r0, [r4, #36]	; 0x24
   226d0:	blx	r6
   226d4:	cmp	r0, #0
   226d8:	streq	r5, [r4, #136]	; 0x88
   226dc:	bne	22714 <flatcc_builder_embed_buffer@@Base+0x178>
   226e0:	mov	r0, r5
   226e4:	add	sp, sp, #88	; 0x58
   226e8:	ldrd	r4, [sp]
   226ec:	ldr	r6, [sp, #8]
   226f0:	add	sp, sp, #12
   226f4:	pop	{pc}		; (ldr pc, [sp], #4)
   226f8:	ldr	r3, [pc, #56]	; 22738 <flatcc_builder_embed_buffer@@Base+0x19c>
   226fc:	movw	r2, #647	; 0x287
   22700:	movw	r1, #48672	; 0xbe20
   22704:	movt	r1, #2
   22708:	movw	r0, #48756	; 0xbe74
   2270c:	movt	r0, #2
   22710:	bl	12684 <__assert_fail@plt>
   22714:	ldr	r3, [pc, #28]	; 22738 <flatcc_builder_embed_buffer@@Base+0x19c>
   22718:	movw	r2, #651	; 0x28b
   2271c:	movw	r1, #48672	; 0xbe20
   22720:	movt	r1, #2
   22724:	movw	r0, #48756	; 0xbe74
   22728:	movt	r0, #2
   2272c:	bl	12684 <__assert_fail@plt>
   22730:	mov	r5, #0
   22734:	b	226e0 <flatcc_builder_embed_buffer@@Base+0x144>
   22738:	andeq	fp, r2, ip, lsl r9

0002273c <flatcc_builder_create_buffer@@Base>:
   2273c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22740:	strd	r6, [sp, #8]
   22744:	strd	r8, [sp, #16]
   22748:	str	lr, [sp, #24]
   2274c:	sub	sp, sp, #100	; 0x64
   22750:	mov	r5, r0
   22754:	mov	r8, r1
   22758:	mov	r4, r3
   2275c:	ldr	r7, [sp, #132]	; 0x84
   22760:	mov	r3, #0
   22764:	str	r3, [sp, #12]
   22768:	and	r6, r7, #1
   2276c:	mov	r3, r6
   22770:	add	r1, sp, #128	; 0x80
   22774:	bl	21b80 <flatcc_builder_default_alloc@@Base+0x128>
   22778:	cmp	r0, #0
   2277c:	bne	22978 <flatcc_builder_create_buffer@@Base+0x23c>
   22780:	ldrh	r2, [sp, #128]	; 0x80
   22784:	ldrh	r3, [r5, #128]	; 0x80
   22788:	cmp	r3, r2
   2278c:	strhcc	r2, [r5, #128]	; 0x80
   22790:	cmp	r8, #0
   22794:	ldrne	r3, [r8]
   22798:	strne	r3, [sp, #12]
   2279c:	ldr	r1, [sp, #12]
   227a0:	cmp	r1, #0
   227a4:	movne	r1, #4
   227a8:	and	r3, r7, #2
   227ac:	cmp	r3, #0
   227b0:	movne	ip, #4
   227b4:	moveq	ip, #0
   227b8:	ldr	r0, [r5, #136]	; 0x88
   227bc:	sub	r3, r0, #4
   227c0:	sub	r3, r3, r1
   227c4:	sub	r3, r3, ip
   227c8:	sub	r2, r2, #1
   227cc:	and	r3, r3, r2
   227d0:	mov	r2, #0
   227d4:	str	r2, [sp, #16]
   227d8:	str	r2, [sp, #20]
   227dc:	ands	r7, r7, #3
   227e0:	beq	22800 <flatcc_builder_create_buffer@@Base+0xc4>
   227e4:	mov	r2, #4
   227e8:	str	r2, [sp, #16]
   227ec:	add	ip, sp, #88	; 0x58
   227f0:	str	ip, [sp, #24]
   227f4:	str	r2, [sp, #28]
   227f8:	mov	r2, #1
   227fc:	str	r2, [sp, #20]
   22800:	ldr	ip, [sp, #16]
   22804:	add	ip, ip, #4
   22808:	str	ip, [sp, #16]
   2280c:	ldr	lr, [sp, #20]
   22810:	add	r2, lr, #1
   22814:	add	r8, sp, #96	; 0x60
   22818:	add	r8, r8, r2, lsl #3
   2281c:	add	r9, sp, #92	; 0x5c
   22820:	str	r9, [r8, #-80]	; 0xffffffb0
   22824:	mov	r9, #4
   22828:	str	r9, [r8, #-76]	; 0xffffffb4
   2282c:	str	r2, [sp, #20]
   22830:	cmp	r1, #0
   22834:	beq	22860 <flatcc_builder_create_buffer@@Base+0x124>
   22838:	add	ip, ip, r1
   2283c:	str	ip, [sp, #16]
   22840:	add	r2, lr, #2
   22844:	add	ip, sp, #96	; 0x60
   22848:	add	r2, ip, r2, lsl #3
   2284c:	add	ip, sp, #12
   22850:	str	ip, [r2, #-80]	; 0xffffffb0
   22854:	str	r1, [r2, #-76]	; 0xffffffb4
   22858:	add	lr, lr, #2
   2285c:	str	lr, [sp, #20]
   22860:	cmp	r3, #0
   22864:	beq	22898 <flatcc_builder_create_buffer@@Base+0x15c>
   22868:	ldr	r2, [sp, #16]
   2286c:	add	r2, r2, r3
   22870:	str	r2, [sp, #16]
   22874:	ldr	r2, [sp, #20]
   22878:	add	r2, r2, #1
   2287c:	add	r1, sp, #96	; 0x60
   22880:	add	ip, r1, r2, lsl #3
   22884:	movw	r1, #46800	; 0xb6d0
   22888:	movt	r1, #2
   2288c:	str	r1, [ip, #-80]	; 0xffffffb0
   22890:	str	r3, [ip, #-76]	; 0xffffffb4
   22894:	str	r2, [sp, #20]
   22898:	ldr	r1, [sp, #16]
   2289c:	sub	r3, r0, r1
   228a0:	cmp	r7, #0
   228a4:	movne	r2, #4
   228a8:	moveq	r2, #0
   228ac:	add	r3, r3, r2
   228b0:	cmp	r6, #0
   228b4:	ldrne	r2, [r5, #144]	; 0x90
   228b8:	ldreq	r2, [r5, #140]	; 0x8c
   228bc:	sub	r2, r2, r3
   228c0:	str	r2, [sp, #88]	; 0x58
   228c4:	sub	r4, r4, r3
   228c8:	str	r4, [sp, #92]	; 0x5c
   228cc:	sub	r4, r0, r1
   228d0:	cmp	r0, r4
   228d4:	ble	22924 <flatcc_builder_create_buffer@@Base+0x1e8>
   228d8:	str	r1, [sp]
   228dc:	ldr	r6, [r5, #44]	; 0x2c
   228e0:	mov	r3, r4
   228e4:	ldr	r2, [sp, #20]
   228e8:	add	r1, sp, #24
   228ec:	ldr	r0, [r5, #36]	; 0x24
   228f0:	blx	r6
   228f4:	cmp	r0, #0
   228f8:	bne	22940 <flatcc_builder_create_buffer@@Base+0x204>
   228fc:	str	r4, [r5, #136]	; 0x88
   22900:	cmp	r4, #0
   22904:	beq	2295c <flatcc_builder_create_buffer@@Base+0x220>
   22908:	mov	r0, r4
   2290c:	add	sp, sp, #100	; 0x64
   22910:	ldrd	r4, [sp]
   22914:	ldrd	r6, [sp, #8]
   22918:	ldrd	r8, [sp, #16]
   2291c:	add	sp, sp, #24
   22920:	pop	{pc}		; (ldr pc, [sp], #4)
   22924:	ldr	r3, [pc, #84]	; 22980 <flatcc_builder_create_buffer@@Base+0x244>
   22928:	movw	r2, #647	; 0x287
   2292c:	movw	r1, #48672	; 0xbe20
   22930:	movt	r1, #2
   22934:	movw	r0, #48756	; 0xbe74
   22938:	movt	r0, #2
   2293c:	bl	12684 <__assert_fail@plt>
   22940:	ldr	r3, [pc, #56]	; 22980 <flatcc_builder_create_buffer@@Base+0x244>
   22944:	movw	r2, #651	; 0x28b
   22948:	movw	r1, #48672	; 0xbe20
   2294c:	movt	r1, #2
   22950:	movw	r0, #48756	; 0xbe74
   22954:	movt	r0, #2
   22958:	bl	12684 <__assert_fail@plt>
   2295c:	ldr	r3, [pc, #32]	; 22984 <flatcc_builder_create_buffer@@Base+0x248>
   22960:	mov	r2, #772	; 0x304
   22964:	movw	r1, #48672	; 0xbe20
   22968:	movt	r1, #2
   2296c:	movw	r0, #48756	; 0xbe74
   22970:	movt	r0, #2
   22974:	bl	12684 <__assert_fail@plt>
   22978:	mov	r4, #0
   2297c:	b	22908 <flatcc_builder_create_buffer@@Base+0x1cc>
   22980:	andeq	fp, r2, ip, lsl r9
   22984:	andeq	fp, r2, r8, lsl #19

00022988 <flatcc_builder_create_struct@@Base>:
   22988:	strd	r4, [sp, #-16]!
   2298c:	str	r6, [sp, #8]
   22990:	str	lr, [sp, #12]
   22994:	sub	sp, sp, #80	; 0x50
   22998:	cmp	r3, #0
   2299c:	beq	229f4 <flatcc_builder_create_struct@@Base+0x6c>
   229a0:	mov	r4, r0
   229a4:	ldrh	r0, [r0, #128]	; 0x80
   229a8:	cmp	r0, r3
   229ac:	strhcc	r3, [r4, #128]	; 0x80
   229b0:	ldr	ip, [r4, #136]	; 0x88
   229b4:	sub	r0, ip, r2
   229b8:	sub	r3, r3, #1
   229bc:	and	r3, r3, r0
   229c0:	mov	r0, #0
   229c4:	str	r0, [sp, #8]
   229c8:	str	r0, [sp, #12]
   229cc:	cmp	r2, r0
   229d0:	beq	22a48 <flatcc_builder_create_struct@@Base+0xc0>
   229d4:	str	r2, [sp, #8]
   229d8:	str	r1, [sp, #16]
   229dc:	str	r2, [sp, #20]
   229e0:	mov	r2, #1
   229e4:	str	r2, [sp, #12]
   229e8:	cmp	r3, r0
   229ec:	beq	22a80 <flatcc_builder_create_struct@@Base+0xf8>
   229f0:	b	22a50 <flatcc_builder_create_struct@@Base+0xc8>
   229f4:	ldr	r3, [pc, #212]	; 22ad0 <flatcc_builder_create_struct@@Base+0x148>
   229f8:	movw	r2, #783	; 0x30f
   229fc:	movw	r1, #48672	; 0xbe20
   22a00:	movt	r1, #2
   22a04:	movw	r0, #48856	; 0xbed8
   22a08:	movt	r0, #2
   22a0c:	bl	12684 <__assert_fail@plt>
   22a10:	ldr	r3, [pc, #188]	; 22ad4 <flatcc_builder_create_struct@@Base+0x14c>
   22a14:	movw	r2, #647	; 0x287
   22a18:	movw	r1, #48672	; 0xbe20
   22a1c:	movt	r1, #2
   22a20:	movw	r0, #48756	; 0xbe74
   22a24:	movt	r0, #2
   22a28:	bl	12684 <__assert_fail@plt>
   22a2c:	ldr	r3, [pc, #160]	; 22ad4 <flatcc_builder_create_struct@@Base+0x14c>
   22a30:	movw	r2, #651	; 0x28b
   22a34:	movw	r1, #48672	; 0xbe20
   22a38:	movt	r1, #2
   22a3c:	movw	r0, #48756	; 0xbe74
   22a40:	movt	r0, #2
   22a44:	bl	12684 <__assert_fail@plt>
   22a48:	cmp	r3, #0
   22a4c:	beq	22a10 <flatcc_builder_create_struct@@Base+0x88>
   22a50:	ldr	r2, [sp, #8]
   22a54:	add	r2, r2, r3
   22a58:	str	r2, [sp, #8]
   22a5c:	ldr	r2, [sp, #12]
   22a60:	add	r2, r2, #1
   22a64:	add	r1, sp, #80	; 0x50
   22a68:	add	r0, r1, r2, lsl #3
   22a6c:	movw	r1, #46800	; 0xb6d0
   22a70:	movt	r1, #2
   22a74:	str	r1, [r0, #-72]	; 0xffffffb8
   22a78:	str	r3, [r0, #-68]	; 0xffffffbc
   22a7c:	str	r2, [sp, #12]
   22a80:	ldr	r3, [sp, #8]
   22a84:	sub	r5, ip, r3
   22a88:	cmp	ip, r5
   22a8c:	ble	22a10 <flatcc_builder_create_struct@@Base+0x88>
   22a90:	str	r3, [sp]
   22a94:	ldr	r6, [r4, #44]	; 0x2c
   22a98:	mov	r3, r5
   22a9c:	ldr	r2, [sp, #12]
   22aa0:	add	r1, sp, #16
   22aa4:	ldr	r0, [r4, #36]	; 0x24
   22aa8:	blx	r6
   22aac:	cmp	r0, #0
   22ab0:	bne	22a2c <flatcc_builder_create_struct@@Base+0xa4>
   22ab4:	str	r5, [r4, #136]	; 0x88
   22ab8:	mov	r0, r5
   22abc:	add	sp, sp, #80	; 0x50
   22ac0:	ldrd	r4, [sp]
   22ac4:	ldr	r6, [sp, #8]
   22ac8:	add	sp, sp, #12
   22acc:	pop	{pc}		; (ldr pc, [sp], #4)
   22ad0:	andeq	fp, r2, r8, lsr #19
   22ad4:	andeq	fp, r2, ip, lsl r9

00022ad8 <flatcc_builder_start_buffer@@Base>:
   22ad8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22adc:	strd	r6, [sp, #8]
   22ae0:	str	r8, [sp, #16]
   22ae4:	str	lr, [sp, #20]
   22ae8:	mov	r4, r0
   22aec:	mov	r5, r1
   22af0:	mov	r7, r2
   22af4:	mov	r6, r3
   22af8:	ldrh	r1, [r0, #128]	; 0x80
   22afc:	bl	21ca4 <flatcc_builder_default_alloc@@Base+0x24c>
   22b00:	cmp	r0, #0
   22b04:	bne	22ba4 <flatcc_builder_start_buffer@@Base+0xcc>
   22b08:	mov	r3, #1
   22b0c:	strh	r3, [r4, #128]	; 0x80
   22b10:	ldr	r3, [r4, #32]
   22b14:	ldrh	r2, [r4, #132]	; 0x84
   22b18:	strh	r2, [r3, #34]	; 0x22
   22b1c:	strh	r7, [r4, #132]	; 0x84
   22b20:	ldr	r3, [r4, #32]
   22b24:	ldrh	r2, [r4, #164]	; 0xa4
   22b28:	strh	r2, [r3, #32]
   22b2c:	strh	r6, [r4, #164]	; 0xa4
   22b30:	ldr	r3, [r4, #32]
   22b34:	ldr	r2, [r4, #144]	; 0x90
   22b38:	str	r2, [r3, #20]
   22b3c:	ldr	r3, [r4, #32]
   22b40:	ldr	r2, [r4, #152]	; 0x98
   22b44:	str	r2, [r3, #28]
   22b48:	ldr	r3, [r4, #136]	; 0x88
   22b4c:	str	r3, [r4, #144]	; 0x90
   22b50:	ldr	r3, [r4, #148]	; 0x94
   22b54:	add	r2, r3, #1
   22b58:	str	r2, [r4, #148]	; 0x94
   22b5c:	str	r3, [r4, #152]	; 0x98
   22b60:	ldr	r3, [r4, #32]
   22b64:	ldr	r2, [r4, #168]	; 0xa8
   22b68:	str	r2, [r3, #16]
   22b6c:	movw	r3, #46800	; 0xb6d0
   22b70:	movt	r3, #2
   22b74:	cmp	r5, #0
   22b78:	moveq	r5, r3
   22b7c:	ldr	r3, [r5]
   22b80:	str	r3, [r4, #168]	; 0xa8
   22b84:	ldr	r3, [r4, #32]
   22b88:	mov	r2, #1
   22b8c:	strh	r2, [r3, #14]
   22b90:	ldrd	r4, [sp]
   22b94:	ldrd	r6, [sp, #8]
   22b98:	ldr	r8, [sp, #16]
   22b9c:	add	sp, sp, #20
   22ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   22ba4:	mvn	r0, #0
   22ba8:	b	22b90 <flatcc_builder_start_buffer@@Base+0xb8>

00022bac <flatcc_builder_end_buffer@@Base>:
   22bac:	strd	r4, [sp, #-12]!
   22bb0:	str	lr, [sp, #8]
   22bb4:	sub	sp, sp, #12
   22bb8:	mov	r4, r0
   22bbc:	ldrh	r2, [r0, #164]	; 0xa4
   22bc0:	and	r2, r2, #2
   22bc4:	ldr	r0, [r0, #152]	; 0x98
   22bc8:	cmp	r0, #0
   22bcc:	moveq	r0, r2
   22bd0:	orrne	r0, r2, #1
   22bd4:	ldr	r2, [r4, #32]
   22bd8:	ldrh	r2, [r2, #14]
   22bdc:	cmp	r2, #1
   22be0:	bne	22c2c <flatcc_builder_end_buffer@@Base+0x80>
   22be4:	ldrh	r2, [r4, #132]	; 0x84
   22be8:	ldrh	r3, [r4, #128]	; 0x80
   22bec:	cmp	r3, r2
   22bf0:	strhcc	r2, [r4, #128]	; 0x80
   22bf4:	str	r0, [sp, #4]
   22bf8:	ldrh	r3, [r4, #128]	; 0x80
   22bfc:	str	r3, [sp]
   22c00:	mov	r3, r1
   22c04:	add	r1, r4, #168	; 0xa8
   22c08:	mov	r0, r4
   22c0c:	bl	2273c <flatcc_builder_create_buffer@@Base>
   22c10:	subs	r5, r0, #0
   22c14:	bne	22c48 <flatcc_builder_end_buffer@@Base+0x9c>
   22c18:	mov	r0, r5
   22c1c:	add	sp, sp, #12
   22c20:	ldrd	r4, [sp]
   22c24:	add	sp, sp, #8
   22c28:	pop	{pc}		; (ldr pc, [sp], #4)
   22c2c:	ldr	r3, [pc, #184]	; 22cec <flatcc_builder_end_buffer@@Base+0x140>
   22c30:	movw	r2, #838	; 0x346
   22c34:	movw	r1, #48672	; 0xbe20
   22c38:	movt	r1, #2
   22c3c:	movw	r0, #48868	; 0xbee4
   22c40:	movt	r0, #2
   22c44:	bl	12684 <__assert_fail@plt>
   22c48:	ldr	r3, [r4, #32]
   22c4c:	ldr	r2, [r3, #20]
   22c50:	str	r2, [r4, #144]	; 0x90
   22c54:	ldr	r2, [r3, #28]
   22c58:	str	r2, [r4, #152]	; 0x98
   22c5c:	ldr	r2, [r3, #16]
   22c60:	str	r2, [r4, #168]	; 0xa8
   22c64:	ldrh	r3, [r3, #32]
   22c68:	strh	r3, [r4, #164]	; 0xa4
   22c6c:	ldr	r2, [r4, #20]
   22c70:	mov	r1, #0
   22c74:	ldr	r0, [r4, #16]
   22c78:	bl	12630 <memset@plt>
   22c7c:	ldr	r2, [r4, #32]
   22c80:	ldr	r3, [r2, #8]
   22c84:	str	r3, [r4, #20]
   22c88:	ldr	r0, [r2]
   22c8c:	str	r0, [r4, #28]
   22c90:	ldr	r1, [r2, #4]
   22c94:	ldr	r3, [r4, #60]	; 0x3c
   22c98:	add	r3, r3, r0
   22c9c:	str	r3, [r4, #16]
   22ca0:	ldr	r3, [r4, #64]	; 0x40
   22ca4:	sub	r3, r3, r0
   22ca8:	cmp	r3, r1
   22cac:	movcs	r3, r1
   22cb0:	str	r3, [r4, #24]
   22cb4:	str	r1, [r2, #4]
   22cb8:	ldrh	r3, [r4, #130]	; 0x82
   22cbc:	ldrh	r2, [r4, #128]	; 0x80
   22cc0:	cmp	r2, r3
   22cc4:	strhcc	r3, [r4, #128]	; 0x80
   22cc8:	ldr	r3, [r4, #32]
   22ccc:	ldrh	r2, [r3, #12]
   22cd0:	strh	r2, [r4, #130]	; 0x82
   22cd4:	sub	r3, r3, #36	; 0x24
   22cd8:	str	r3, [r4, #32]
   22cdc:	ldr	r3, [r4, #156]	; 0x9c
   22ce0:	sub	r3, r3, #1
   22ce4:	str	r3, [r4, #156]	; 0x9c
   22ce8:	b	22c18 <flatcc_builder_end_buffer@@Base+0x6c>
   22cec:	andeq	fp, r2, r8, asr #19

00022cf0 <flatcc_builder_start_struct@@Base>:
   22cf0:	strd	r4, [sp, #-16]!
   22cf4:	str	r6, [sp, #8]
   22cf8:	str	lr, [sp, #12]
   22cfc:	mov	r4, r0
   22d00:	mov	r5, r1
   22d04:	mov	r1, r2
   22d08:	bl	21ca4 <flatcc_builder_default_alloc@@Base+0x24c>
   22d0c:	cmp	r0, #0
   22d10:	movne	r0, #0
   22d14:	bne	22d74 <flatcc_builder_start_struct@@Base+0x84>
   22d18:	ldr	r3, [r4, #32]
   22d1c:	mov	r2, #2
   22d20:	strh	r2, [r3, #14]
   22d24:	ldr	r1, [r4, #28]
   22d28:	ldr	r2, [r4, #60]	; 0x3c
   22d2c:	add	r2, r2, r1
   22d30:	str	r2, [r4, #16]
   22d34:	ldr	r3, [r4, #64]	; 0x40
   22d38:	sub	r3, r3, r1
   22d3c:	cmn	r3, #4
   22d40:	mvnhi	r3, #3
   22d44:	str	r3, [r4, #24]
   22d48:	ldr	r3, [r4, #32]
   22d4c:	mvn	r2, #3
   22d50:	str	r2, [r3, #4]
   22d54:	ldr	r6, [r4, #20]
   22d58:	add	r5, r5, r6
   22d5c:	str	r5, [r4, #20]
   22d60:	ldr	r3, [r4, #24]
   22d64:	cmp	r5, r3
   22d68:	bcs	22d84 <flatcc_builder_start_struct@@Base+0x94>
   22d6c:	ldr	r0, [r4, #16]
   22d70:	add	r0, r0, r6
   22d74:	ldrd	r4, [sp]
   22d78:	ldr	r6, [sp, #8]
   22d7c:	add	sp, sp, #12
   22d80:	pop	{pc}		; (ldr pc, [sp], #4)
   22d84:	add	r1, r5, #1
   22d88:	mov	r0, r4
   22d8c:	bl	219d0 <main@@Base+0x98>
   22d90:	cmp	r0, #0
   22d94:	movne	r0, #0
   22d98:	beq	22d6c <flatcc_builder_start_struct@@Base+0x7c>
   22d9c:	b	22d74 <flatcc_builder_start_struct@@Base+0x84>

00022da0 <flatcc_builder_struct_edit@@Base>:
   22da0:	ldr	r0, [r0, #16]
   22da4:	bx	lr

00022da8 <flatcc_builder_end_struct@@Base>:
   22da8:	strd	r4, [sp, #-16]!
   22dac:	str	r6, [sp, #8]
   22db0:	str	lr, [sp, #12]
   22db4:	ldr	r3, [r0, #32]
   22db8:	ldrh	r3, [r3, #14]
   22dbc:	cmp	r3, #2
   22dc0:	bne	22df4 <flatcc_builder_end_struct@@Base+0x4c>
   22dc4:	mov	r4, r0
   22dc8:	ldrh	r3, [r0, #130]	; 0x82
   22dcc:	ldr	r2, [r0, #20]
   22dd0:	ldr	r1, [r0, #16]
   22dd4:	bl	22988 <flatcc_builder_create_struct@@Base>
   22dd8:	subs	r5, r0, #0
   22ddc:	bne	22e10 <flatcc_builder_end_struct@@Base+0x68>
   22de0:	mov	r0, r5
   22de4:	ldrd	r4, [sp]
   22de8:	ldr	r6, [sp, #8]
   22dec:	add	sp, sp, #12
   22df0:	pop	{pc}		; (ldr pc, [sp], #4)
   22df4:	ldr	r3, [pc, #148]	; 22e90 <flatcc_builder_end_struct@@Base+0xe8>
   22df8:	mov	r2, #872	; 0x368
   22dfc:	movw	r1, #48672	; 0xbe20
   22e00:	movt	r1, #2
   22e04:	movw	r0, #48912	; 0xbf10
   22e08:	movt	r0, #2
   22e0c:	bl	12684 <__assert_fail@plt>
   22e10:	ldr	r2, [r4, #20]
   22e14:	mov	r1, #0
   22e18:	ldr	r0, [r4, #16]
   22e1c:	bl	12630 <memset@plt>
   22e20:	ldr	r2, [r4, #32]
   22e24:	ldr	r3, [r2, #8]
   22e28:	str	r3, [r4, #20]
   22e2c:	ldr	r0, [r2]
   22e30:	str	r0, [r4, #28]
   22e34:	ldr	r1, [r2, #4]
   22e38:	ldr	r3, [r4, #60]	; 0x3c
   22e3c:	add	r3, r3, r0
   22e40:	str	r3, [r4, #16]
   22e44:	ldr	r3, [r4, #64]	; 0x40
   22e48:	sub	r3, r3, r0
   22e4c:	cmp	r3, r1
   22e50:	movcs	r3, r1
   22e54:	str	r3, [r4, #24]
   22e58:	str	r1, [r2, #4]
   22e5c:	ldrh	r3, [r4, #130]	; 0x82
   22e60:	ldrh	r2, [r4, #128]	; 0x80
   22e64:	cmp	r2, r3
   22e68:	strhcc	r3, [r4, #128]	; 0x80
   22e6c:	ldr	r3, [r4, #32]
   22e70:	ldrh	r2, [r3, #12]
   22e74:	strh	r2, [r4, #130]	; 0x82
   22e78:	sub	r3, r3, #36	; 0x24
   22e7c:	str	r3, [r4, #32]
   22e80:	ldr	r3, [r4, #156]	; 0x9c
   22e84:	sub	r3, r3, #1
   22e88:	str	r3, [r4, #156]	; 0x9c
   22e8c:	b	22de0 <flatcc_builder_end_struct@@Base+0x38>
   22e90:	andeq	fp, r2, r4, ror #19

00022e94 <flatcc_builder_extend_vector@@Base>:
   22e94:	strd	r4, [sp, #-16]!
   22e98:	str	r6, [sp, #8]
   22e9c:	str	lr, [sp, #12]
   22ea0:	mov	r4, r0
   22ea4:	ldr	r2, [r0, #32]
   22ea8:	ldr	r3, [r2, #20]
   22eac:	add	r0, r1, r3
   22eb0:	ldr	ip, [r2, #24]
   22eb4:	cmp	r3, r0
   22eb8:	movls	r3, #0
   22ebc:	movhi	r3, #1
   22ec0:	cmp	ip, r0
   22ec4:	orrcc	r3, r3, #1
   22ec8:	cmp	r3, #0
   22ecc:	bne	22f0c <flatcc_builder_extend_vector@@Base+0x78>
   22ed0:	str	r0, [r2, #20]
   22ed4:	ldr	r5, [r4, #20]
   22ed8:	ldr	r3, [r4, #32]
   22edc:	ldr	r3, [r3, #16]
   22ee0:	mla	r1, r3, r1, r5
   22ee4:	str	r1, [r4, #20]
   22ee8:	ldr	r3, [r4, #24]
   22eec:	cmp	r1, r3
   22ef0:	bcs	22f28 <flatcc_builder_extend_vector@@Base+0x94>
   22ef4:	ldr	r0, [r4, #16]
   22ef8:	add	r0, r0, r5
   22efc:	ldrd	r4, [sp]
   22f00:	ldr	r6, [sp, #8]
   22f04:	add	sp, sp, #12
   22f08:	pop	{pc}		; (ldr pc, [sp], #4)
   22f0c:	ldr	r3, [pc, #52]	; 22f48 <flatcc_builder_extend_vector@@Base+0xb4>
   22f10:	mov	r2, #892	; 0x37c
   22f14:	movw	r1, #48672	; 0xbe20
   22f18:	movt	r1, #2
   22f1c:	movw	r0, #48956	; 0xbf3c
   22f20:	movt	r0, #2
   22f24:	bl	12684 <__assert_fail@plt>
   22f28:	mvn	r2, #3
   22f2c:	add	r1, r1, #1
   22f30:	mov	r0, r4
   22f34:	bl	219d0 <main@@Base+0x98>
   22f38:	cmp	r0, #0
   22f3c:	movne	r0, #0
   22f40:	beq	22ef4 <flatcc_builder_extend_vector@@Base+0x60>
   22f44:	b	22efc <flatcc_builder_extend_vector@@Base+0x68>
   22f48:	andeq	fp, r2, r0, lsl #20

00022f4c <flatcc_builder_vector_push@@Base>:
   22f4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22f50:	strd	r6, [sp, #8]
   22f54:	str	r8, [sp, #16]
   22f58:	str	lr, [sp, #20]
   22f5c:	ldr	r3, [r0, #32]
   22f60:	ldrh	r2, [r3, #14]
   22f64:	cmp	r2, #4
   22f68:	bne	22fe0 <flatcc_builder_vector_push@@Base+0x94>
   22f6c:	mov	r4, r0
   22f70:	mov	r6, r1
   22f74:	ldr	r2, [r3, #20]
   22f78:	ldr	r1, [r3, #24]
   22f7c:	cmp	r2, r1
   22f80:	bhi	22ffc <flatcc_builder_vector_push@@Base+0xb0>
   22f84:	add	r2, r2, #1
   22f88:	str	r2, [r3, #20]
   22f8c:	ldr	r3, [r0, #32]
   22f90:	ldr	r7, [r3, #16]
   22f94:	ldr	r5, [r0, #20]
   22f98:	add	r1, r7, r5
   22f9c:	str	r1, [r0, #20]
   22fa0:	ldr	r3, [r0, #24]
   22fa4:	cmp	r1, r3
   22fa8:	bcs	23018 <flatcc_builder_vector_push@@Base+0xcc>
   22fac:	ldr	r4, [r4, #16]
   22fb0:	adds	r4, r4, r5
   22fb4:	beq	22fc8 <flatcc_builder_vector_push@@Base+0x7c>
   22fb8:	mov	r2, r7
   22fbc:	mov	r1, r6
   22fc0:	mov	r0, r4
   22fc4:	bl	12588 <memcpy@plt>
   22fc8:	mov	r0, r4
   22fcc:	ldrd	r4, [sp]
   22fd0:	ldrd	r6, [sp, #8]
   22fd4:	ldr	r8, [sp, #16]
   22fd8:	add	sp, sp, #20
   22fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   22fe0:	ldr	r3, [pc, #76]	; 23034 <flatcc_builder_vector_push@@Base+0xe8>
   22fe4:	movw	r2, #907	; 0x38b
   22fe8:	movw	r1, #48672	; 0xbe20
   22fec:	movt	r1, #2
   22ff0:	movw	r0, #48984	; 0xbf58
   22ff4:	movt	r0, #2
   22ff8:	bl	12684 <__assert_fail@plt>
   22ffc:	ldr	r3, [pc, #48]	; 23034 <flatcc_builder_vector_push@@Base+0xe8>
   23000:	mov	r2, #908	; 0x38c
   23004:	movw	r1, #48672	; 0xbe20
   23008:	movt	r1, #2
   2300c:	movw	r0, #49028	; 0xbf84
   23010:	movt	r0, #2
   23014:	bl	12684 <__assert_fail@plt>
   23018:	mvn	r2, #3
   2301c:	add	r1, r1, #1
   23020:	bl	219d0 <main@@Base+0x98>
   23024:	cmp	r0, #0
   23028:	movne	r4, #0
   2302c:	beq	22fac <flatcc_builder_vector_push@@Base+0x60>
   23030:	b	22fc8 <flatcc_builder_vector_push@@Base+0x7c>
   23034:	andeq	fp, r2, r4, lsl sl

00023038 <flatcc_builder_append_vector@@Base>:
   23038:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2303c:	strd	r6, [sp, #8]
   23040:	str	r8, [sp, #16]
   23044:	str	lr, [sp, #20]
   23048:	mov	r6, r1
   2304c:	ldr	r1, [r0, #32]
   23050:	ldrh	r3, [r1, #14]
   23054:	cmp	r3, #4
   23058:	bne	230e4 <flatcc_builder_append_vector@@Base+0xac>
   2305c:	mov	r4, r0
   23060:	ldr	r3, [r1, #20]
   23064:	add	r0, r2, r3
   23068:	ldr	ip, [r1, #24]
   2306c:	cmp	r3, r0
   23070:	movls	r3, #0
   23074:	movhi	r3, #1
   23078:	cmp	ip, r0
   2307c:	orrcc	r3, r3, #1
   23080:	cmp	r3, #0
   23084:	bne	23100 <flatcc_builder_append_vector@@Base+0xc8>
   23088:	str	r0, [r1, #20]
   2308c:	ldr	r3, [r4, #32]
   23090:	ldr	r5, [r3, #16]
   23094:	mul	r5, r5, r2
   23098:	ldr	r7, [r4, #20]
   2309c:	add	r1, r5, r7
   230a0:	str	r1, [r4, #20]
   230a4:	ldr	r3, [r4, #24]
   230a8:	cmp	r1, r3
   230ac:	bcs	2311c <flatcc_builder_append_vector@@Base+0xe4>
   230b0:	ldr	r4, [r4, #16]
   230b4:	adds	r4, r4, r7
   230b8:	beq	230cc <flatcc_builder_append_vector@@Base+0x94>
   230bc:	mov	r2, r5
   230c0:	mov	r1, r6
   230c4:	mov	r0, r4
   230c8:	bl	12588 <memcpy@plt>
   230cc:	mov	r0, r4
   230d0:	ldrd	r4, [sp]
   230d4:	ldrd	r6, [sp, #8]
   230d8:	ldr	r8, [sp, #16]
   230dc:	add	sp, sp, #20
   230e0:	pop	{pc}		; (ldr pc, [sp], #4)
   230e4:	ldr	r3, [pc, #80]	; 2313c <flatcc_builder_append_vector@@Base+0x104>
   230e8:	movw	r2, #915	; 0x393
   230ec:	movw	r1, #48672	; 0xbe20
   230f0:	movt	r1, #2
   230f4:	movw	r0, #48984	; 0xbf58
   230f8:	movt	r0, #2
   230fc:	bl	12684 <__assert_fail@plt>
   23100:	ldr	r3, [pc, #56]	; 23140 <flatcc_builder_append_vector@@Base+0x108>
   23104:	mov	r2, #892	; 0x37c
   23108:	movw	r1, #48672	; 0xbe20
   2310c:	movt	r1, #2
   23110:	movw	r0, #48956	; 0xbf3c
   23114:	movt	r0, #2
   23118:	bl	12684 <__assert_fail@plt>
   2311c:	mvn	r2, #3
   23120:	add	r1, r1, #1
   23124:	mov	r0, r4
   23128:	bl	219d0 <main@@Base+0x98>
   2312c:	cmp	r0, #0
   23130:	movne	r4, #0
   23134:	beq	230b0 <flatcc_builder_append_vector@@Base+0x78>
   23138:	b	230cc <flatcc_builder_append_vector@@Base+0x94>
   2313c:	andeq	fp, r2, r0, lsr sl
   23140:	andeq	fp, r2, r0, lsl #20

00023144 <flatcc_builder_extend_offset_vector@@Base>:
   23144:	strd	r4, [sp, #-16]!
   23148:	str	r6, [sp, #8]
   2314c:	str	lr, [sp, #12]
   23150:	mov	r4, r0
   23154:	ldr	r2, [r0, #32]
   23158:	ldr	r3, [r2, #20]
   2315c:	adds	r3, r1, r3
   23160:	movcs	ip, #1
   23164:	movcc	ip, #0
   23168:	cmn	r3, #-1073741823	; 0xc0000001
   2316c:	movls	r0, #0
   23170:	movhi	r0, #1
   23174:	orrs	r0, ip, r0
   23178:	bne	231b0 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   2317c:	str	r3, [r2, #20]
   23180:	ldr	r5, [r4, #20]
   23184:	add	r1, r5, r1, lsl #2
   23188:	str	r1, [r4, #20]
   2318c:	ldr	r3, [r4, #24]
   23190:	cmp	r1, r3
   23194:	bcs	231cc <flatcc_builder_extend_offset_vector@@Base+0x88>
   23198:	ldr	r0, [r4, #16]
   2319c:	add	r0, r0, r5
   231a0:	ldrd	r4, [sp]
   231a4:	ldr	r6, [sp, #8]
   231a8:	add	sp, sp, #12
   231ac:	pop	{pc}		; (ldr pc, [sp], #4)
   231b0:	ldr	r3, [pc, #52]	; 231ec <flatcc_builder_extend_offset_vector@@Base+0xa8>
   231b4:	mov	r2, #892	; 0x37c
   231b8:	movw	r1, #48672	; 0xbe20
   231bc:	movt	r1, #2
   231c0:	movw	r0, #48956	; 0xbf3c
   231c4:	movt	r0, #2
   231c8:	bl	12684 <__assert_fail@plt>
   231cc:	mvn	r2, #3
   231d0:	add	r1, r1, #1
   231d4:	mov	r0, r4
   231d8:	bl	219d0 <main@@Base+0x98>
   231dc:	cmp	r0, #0
   231e0:	movne	r0, #0
   231e4:	beq	23198 <flatcc_builder_extend_offset_vector@@Base+0x54>
   231e8:	b	231a0 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   231ec:	andeq	fp, r2, r0, lsl #20

000231f0 <flatcc_builder_offset_vector_push@@Base>:
   231f0:	strd	r4, [sp, #-16]!
   231f4:	str	r6, [sp, #8]
   231f8:	str	lr, [sp, #12]
   231fc:	ldr	r2, [r0, #32]
   23200:	ldrh	r3, [r2, #14]
   23204:	cmp	r3, #5
   23208:	bne	23260 <flatcc_builder_offset_vector_push@@Base+0x70>
   2320c:	mov	r4, r0
   23210:	mov	r6, r1
   23214:	ldr	r3, [r2, #20]
   23218:	cmn	r3, #-1073741823	; 0xc0000001
   2321c:	moveq	r0, #0
   23220:	beq	23250 <flatcc_builder_offset_vector_push@@Base+0x60>
   23224:	add	r3, r3, #1
   23228:	str	r3, [r2, #20]
   2322c:	ldr	r5, [r4, #20]
   23230:	add	r3, r5, #4
   23234:	str	r3, [r4, #20]
   23238:	ldr	r2, [r4, #24]
   2323c:	cmp	r3, r2
   23240:	bcs	2327c <flatcc_builder_offset_vector_push@@Base+0x8c>
   23244:	ldr	r3, [r4, #16]
   23248:	adds	r0, r3, r5
   2324c:	strne	r6, [r3, r5]
   23250:	ldrd	r4, [sp]
   23254:	ldr	r6, [sp, #8]
   23258:	add	sp, sp, #12
   2325c:	pop	{pc}		; (ldr pc, [sp], #4)
   23260:	ldr	r3, [pc, #52]	; 2329c <flatcc_builder_offset_vector_push@@Base+0xac>
   23264:	movw	r2, #934	; 0x3a6
   23268:	movw	r1, #48672	; 0xbe20
   2326c:	movt	r1, #2
   23270:	movw	r0, #49092	; 0xbfc4
   23274:	movt	r0, #2
   23278:	bl	12684 <__assert_fail@plt>
   2327c:	mvn	r2, #3
   23280:	add	r1, r5, #5
   23284:	mov	r0, r4
   23288:	bl	219d0 <main@@Base+0x98>
   2328c:	cmp	r0, #0
   23290:	movne	r0, #0
   23294:	beq	23244 <flatcc_builder_offset_vector_push@@Base+0x54>
   23298:	b	23250 <flatcc_builder_offset_vector_push@@Base+0x60>
   2329c:	andeq	fp, r2, r0, asr sl

000232a0 <flatcc_builder_append_offset_vector@@Base>:
   232a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   232a4:	strd	r6, [sp, #8]
   232a8:	str	r8, [sp, #16]
   232ac:	str	lr, [sp, #20]
   232b0:	mov	r6, r1
   232b4:	ldr	r1, [r0, #32]
   232b8:	ldrh	r3, [r1, #14]
   232bc:	cmp	r3, #5
   232c0:	bne	23340 <flatcc_builder_append_offset_vector@@Base+0xa0>
   232c4:	mov	r5, r0
   232c8:	ldr	r3, [r1, #20]
   232cc:	adds	r3, r2, r3
   232d0:	movcs	ip, #1
   232d4:	movcc	ip, #0
   232d8:	cmn	r3, #-1073741823	; 0xc0000001
   232dc:	movls	r0, #0
   232e0:	movhi	r0, #1
   232e4:	orrs	r0, ip, r0
   232e8:	bne	2335c <flatcc_builder_append_offset_vector@@Base+0xbc>
   232ec:	str	r3, [r1, #20]
   232f0:	lsl	r4, r2, #2
   232f4:	ldr	r7, [r5, #20]
   232f8:	add	r1, r4, r7
   232fc:	str	r1, [r5, #20]
   23300:	ldr	r3, [r5, #24]
   23304:	cmp	r1, r3
   23308:	bcs	23378 <flatcc_builder_append_offset_vector@@Base+0xd8>
   2330c:	ldr	r5, [r5, #16]
   23310:	adds	r5, r5, r7
   23314:	beq	23328 <flatcc_builder_append_offset_vector@@Base+0x88>
   23318:	mov	r2, r4
   2331c:	mov	r1, r6
   23320:	mov	r0, r5
   23324:	bl	12588 <memcpy@plt>
   23328:	mov	r0, r5
   2332c:	ldrd	r4, [sp]
   23330:	ldrd	r6, [sp, #8]
   23334:	ldr	r8, [sp, #16]
   23338:	add	sp, sp, #20
   2333c:	pop	{pc}		; (ldr pc, [sp], #4)
   23340:	ldr	r3, [pc, #80]	; 23398 <flatcc_builder_append_offset_vector@@Base+0xf8>
   23344:	mov	r2, #948	; 0x3b4
   23348:	movw	r1, #48672	; 0xbe20
   2334c:	movt	r1, #2
   23350:	movw	r0, #49092	; 0xbfc4
   23354:	movt	r0, #2
   23358:	bl	12684 <__assert_fail@plt>
   2335c:	ldr	r3, [pc, #56]	; 2339c <flatcc_builder_append_offset_vector@@Base+0xfc>
   23360:	mov	r2, #892	; 0x37c
   23364:	movw	r1, #48672	; 0xbe20
   23368:	movt	r1, #2
   2336c:	movw	r0, #48956	; 0xbf3c
   23370:	movt	r0, #2
   23374:	bl	12684 <__assert_fail@plt>
   23378:	mvn	r2, #3
   2337c:	add	r1, r1, #1
   23380:	mov	r0, r5
   23384:	bl	219d0 <main@@Base+0x98>
   23388:	cmp	r0, #0
   2338c:	movne	r5, #0
   23390:	beq	2330c <flatcc_builder_append_offset_vector@@Base+0x6c>
   23394:	b	23328 <flatcc_builder_append_offset_vector@@Base+0x88>
   23398:	andeq	fp, r2, r4, ror sl
   2339c:	andeq	fp, r2, r0, lsl #20

000233a0 <flatcc_builder_extend_string@@Base>:
   233a0:	strd	r4, [sp, #-16]!
   233a4:	str	r6, [sp, #8]
   233a8:	str	lr, [sp, #12]
   233ac:	ldr	r2, [r0, #32]
   233b0:	ldrh	r3, [r2, #14]
   233b4:	cmp	r3, #6
   233b8:	bne	23400 <flatcc_builder_extend_string@@Base+0x60>
   233bc:	mov	r4, r0
   233c0:	ldr	r3, [r2, #20]
   233c4:	adds	r3, r1, r3
   233c8:	bcs	2341c <flatcc_builder_extend_string@@Base+0x7c>
   233cc:	str	r3, [r2, #20]
   233d0:	ldr	r5, [r0, #20]
   233d4:	add	r1, r1, r5
   233d8:	str	r1, [r0, #20]
   233dc:	ldr	r3, [r0, #24]
   233e0:	cmp	r1, r3
   233e4:	bcs	23438 <flatcc_builder_extend_string@@Base+0x98>
   233e8:	ldr	r0, [r4, #16]
   233ec:	add	r0, r0, r5
   233f0:	ldrd	r4, [sp]
   233f4:	ldr	r6, [sp, #8]
   233f8:	add	sp, sp, #12
   233fc:	pop	{pc}		; (ldr pc, [sp], #4)
   23400:	ldr	r3, [pc, #76]	; 23454 <flatcc_builder_extend_string@@Base+0xb4>
   23404:	movw	r2, #957	; 0x3bd
   23408:	movw	r1, #48672	; 0xbe20
   2340c:	movt	r1, #2
   23410:	movw	r0, #49144	; 0xbff8
   23414:	movt	r0, #2
   23418:	bl	12684 <__assert_fail@plt>
   2341c:	ldr	r3, [pc, #52]	; 23458 <flatcc_builder_extend_string@@Base+0xb8>
   23420:	mov	r2, #892	; 0x37c
   23424:	movw	r1, #48672	; 0xbe20
   23428:	movt	r1, #2
   2342c:	movw	r0, #48956	; 0xbf3c
   23430:	movt	r0, #2
   23434:	bl	12684 <__assert_fail@plt>
   23438:	mvn	r2, #3
   2343c:	add	r1, r1, #1
   23440:	bl	219d0 <main@@Base+0x98>
   23444:	cmp	r0, #0
   23448:	movne	r0, #0
   2344c:	beq	233e8 <flatcc_builder_extend_string@@Base+0x48>
   23450:	b	233f0 <flatcc_builder_extend_string@@Base+0x50>
   23454:	muleq	r2, r8, sl
   23458:	andeq	fp, r2, r0, lsl #20

0002345c <flatcc_builder_append_string@@Base>:
   2345c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23460:	strd	r6, [sp, #8]
   23464:	str	r8, [sp, #16]
   23468:	str	lr, [sp, #20]
   2346c:	mov	r5, r2
   23470:	ldr	r2, [r0, #32]
   23474:	ldrh	r3, [r2, #14]
   23478:	cmp	r3, #6
   2347c:	bne	234e4 <flatcc_builder_append_string@@Base+0x88>
   23480:	mov	r4, r0
   23484:	mov	r6, r1
   23488:	ldr	r3, [r2, #20]
   2348c:	adds	r3, r5, r3
   23490:	bcs	23500 <flatcc_builder_append_string@@Base+0xa4>
   23494:	str	r3, [r2, #20]
   23498:	ldr	r7, [r0, #20]
   2349c:	add	r1, r5, r7
   234a0:	str	r1, [r0, #20]
   234a4:	ldr	r3, [r0, #24]
   234a8:	cmp	r1, r3
   234ac:	bcs	2351c <flatcc_builder_append_string@@Base+0xc0>
   234b0:	ldr	r4, [r4, #16]
   234b4:	adds	r4, r4, r7
   234b8:	beq	234cc <flatcc_builder_append_string@@Base+0x70>
   234bc:	mov	r2, r5
   234c0:	mov	r1, r6
   234c4:	mov	r0, r4
   234c8:	bl	12588 <memcpy@plt>
   234cc:	mov	r0, r4
   234d0:	ldrd	r4, [sp]
   234d4:	ldrd	r6, [sp, #8]
   234d8:	ldr	r8, [sp, #16]
   234dc:	add	sp, sp, #20
   234e0:	pop	{pc}		; (ldr pc, [sp], #4)
   234e4:	ldr	r3, [pc, #76]	; 23538 <flatcc_builder_append_string@@Base+0xdc>
   234e8:	movw	r2, #966	; 0x3c6
   234ec:	movw	r1, #48672	; 0xbe20
   234f0:	movt	r1, #2
   234f4:	movw	r0, #49144	; 0xbff8
   234f8:	movt	r0, #2
   234fc:	bl	12684 <__assert_fail@plt>
   23500:	ldr	r3, [pc, #52]	; 2353c <flatcc_builder_append_string@@Base+0xe0>
   23504:	mov	r2, #892	; 0x37c
   23508:	movw	r1, #48672	; 0xbe20
   2350c:	movt	r1, #2
   23510:	movw	r0, #48956	; 0xbf3c
   23514:	movt	r0, #2
   23518:	bl	12684 <__assert_fail@plt>
   2351c:	mvn	r2, #3
   23520:	add	r1, r1, #1
   23524:	bl	219d0 <main@@Base+0x98>
   23528:	cmp	r0, #0
   2352c:	movne	r4, #0
   23530:	beq	234b0 <flatcc_builder_append_string@@Base+0x54>
   23534:	b	234cc <flatcc_builder_append_string@@Base+0x70>
   23538:			; <UNDEFINED> instruction: 0x0002bab8
   2353c:	andeq	fp, r2, r0, lsl #20

00023540 <flatcc_builder_append_string_str@@Base>:
   23540:	strd	r4, [sp, #-16]!
   23544:	str	r6, [sp, #8]
   23548:	str	lr, [sp, #12]
   2354c:	mov	r5, r0
   23550:	mov	r4, r1
   23554:	mov	r0, r1
   23558:	bl	1260c <strlen@plt>
   2355c:	mov	r2, r0
   23560:	mov	r1, r4
   23564:	mov	r0, r5
   23568:	bl	2345c <flatcc_builder_append_string@@Base>
   2356c:	ldrd	r4, [sp]
   23570:	ldr	r6, [sp, #8]
   23574:	add	sp, sp, #12
   23578:	pop	{pc}		; (ldr pc, [sp], #4)

0002357c <flatcc_builder_append_string_strn@@Base>:
   2357c:	strd	r4, [sp, #-16]!
   23580:	str	r6, [sp, #8]
   23584:	str	lr, [sp, #12]
   23588:	mov	r6, r0
   2358c:	mov	r4, r1
   23590:	mov	r5, r2
   23594:	mov	r1, #0
   23598:	mov	r0, r4
   2359c:	bl	12648 <memchr@plt>
   235a0:	cmp	r0, #0
   235a4:	subne	r5, r0, r4
   235a8:	mov	r2, r5
   235ac:	mov	r1, r4
   235b0:	mov	r0, r6
   235b4:	bl	2345c <flatcc_builder_append_string@@Base>
   235b8:	ldrd	r4, [sp]
   235bc:	ldr	r6, [sp, #8]
   235c0:	add	sp, sp, #12
   235c4:	pop	{pc}		; (ldr pc, [sp], #4)

000235c8 <flatcc_builder_truncate_vector@@Base>:
   235c8:	str	r4, [sp, #-8]!
   235cc:	str	lr, [sp, #4]
   235d0:	ldr	ip, [r0, #32]
   235d4:	ldrh	r3, [ip, #14]
   235d8:	cmp	r3, #4
   235dc:	bne	2362c <flatcc_builder_truncate_vector@@Base+0x64>
   235e0:	ldr	r3, [ip, #20]
   235e4:	cmp	r3, r1
   235e8:	bcc	23648 <flatcc_builder_truncate_vector@@Base+0x80>
   235ec:	sub	r3, r3, r1
   235f0:	str	r3, [ip, #20]
   235f4:	ldr	r3, [r0, #32]
   235f8:	ldr	r2, [r3, #16]
   235fc:	mul	r2, r2, r1
   23600:	ldr	r3, [r0, #20]
   23604:	sub	r3, r3, r2
   23608:	str	r3, [r0, #20]
   2360c:	ldr	r0, [r0, #16]
   23610:	mov	r1, #0
   23614:	add	r0, r0, r3
   23618:	bl	12630 <memset@plt>
   2361c:	mov	r0, #0
   23620:	ldr	r4, [sp]
   23624:	add	sp, sp, #4
   23628:	pop	{pc}		; (ldr pc, [sp], #4)
   2362c:	ldr	r3, [pc, #48]	; 23664 <flatcc_builder_truncate_vector@@Base+0x9c>
   23630:	movw	r2, #985	; 0x3d9
   23634:	movw	r1, #48672	; 0xbe20
   23638:	movt	r1, #2
   2363c:	movw	r0, #48984	; 0xbf58
   23640:	movt	r0, #2
   23644:	bl	12684 <__assert_fail@plt>
   23648:	ldr	r3, [pc, #20]	; 23664 <flatcc_builder_truncate_vector@@Base+0x9c>
   2364c:	movw	r2, #986	; 0x3da
   23650:	movw	r1, #48672	; 0xbe20
   23654:	movt	r1, #2
   23658:	movw	r0, #49188	; 0xc024
   2365c:	movt	r0, #2
   23660:	bl	12684 <__assert_fail@plt>
   23664:	ldrdeq	fp, [r2], -r8

00023668 <flatcc_builder_truncate_offset_vector@@Base>:
   23668:	str	r4, [sp, #-8]!
   2366c:	str	lr, [sp, #4]
   23670:	ldr	ip, [r0, #32]
   23674:	ldrh	r3, [ip, #14]
   23678:	cmp	r3, #5
   2367c:	bne	236cc <flatcc_builder_truncate_offset_vector@@Base+0x64>
   23680:	ldr	r3, [ip, #20]
   23684:	cmp	r3, r1
   23688:	bcc	236e8 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   2368c:	sub	r3, r3, r1
   23690:	str	r3, [ip, #20]
   23694:	ldr	r3, [r0, #32]
   23698:	ldr	r2, [r3, #16]
   2369c:	mul	r2, r2, r1
   236a0:	ldr	r3, [r0, #20]
   236a4:	sub	r3, r3, r2
   236a8:	str	r3, [r0, #20]
   236ac:	ldr	r0, [r0, #16]
   236b0:	mov	r1, #0
   236b4:	add	r0, r0, r3
   236b8:	bl	12630 <memset@plt>
   236bc:	mov	r0, #0
   236c0:	ldr	r4, [sp]
   236c4:	add	sp, sp, #4
   236c8:	pop	{pc}		; (ldr pc, [sp], #4)
   236cc:	ldr	r3, [pc, #48]	; 23704 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   236d0:	movw	r2, #994	; 0x3e2
   236d4:	movw	r1, #48672	; 0xbe20
   236d8:	movt	r1, #2
   236dc:	movw	r0, #49092	; 0xbfc4
   236e0:	movt	r0, #2
   236e4:	bl	12684 <__assert_fail@plt>
   236e8:	ldr	r3, [pc, #20]	; 23704 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   236ec:	movw	r2, #995	; 0x3e3
   236f0:	movw	r1, #48672	; 0xbe20
   236f4:	movt	r1, #2
   236f8:	movw	r0, #49224	; 0xc048
   236fc:	movt	r0, #2
   23700:	bl	12684 <__assert_fail@plt>
   23704:	strdeq	fp, [r2], -r8

00023708 <flatcc_builder_truncate_string@@Base>:
   23708:	str	r4, [sp, #-8]!
   2370c:	str	lr, [sp, #4]
   23710:	ldr	r2, [r0, #32]
   23714:	ldrh	r3, [r2, #14]
   23718:	cmp	r3, #6
   2371c:	bne	23764 <flatcc_builder_truncate_string@@Base+0x5c>
   23720:	ldr	r3, [r2, #20]
   23724:	cmp	r3, r1
   23728:	bcc	23780 <flatcc_builder_truncate_string@@Base+0x78>
   2372c:	sub	r3, r3, r1
   23730:	str	r3, [r2, #20]
   23734:	ldr	r3, [r0, #20]
   23738:	sub	r3, r3, r1
   2373c:	str	r3, [r0, #20]
   23740:	ldr	r0, [r0, #16]
   23744:	mov	r2, r1
   23748:	mov	r1, #0
   2374c:	add	r0, r0, r3
   23750:	bl	12630 <memset@plt>
   23754:	mov	r0, #0
   23758:	ldr	r4, [sp]
   2375c:	add	sp, sp, #4
   23760:	pop	{pc}		; (ldr pc, [sp], #4)
   23764:	ldr	r3, [pc, #48]	; 2379c <flatcc_builder_truncate_string@@Base+0x94>
   23768:	movw	r2, #1003	; 0x3eb
   2376c:	movw	r1, #48672	; 0xbe20
   23770:	movt	r1, #2
   23774:	movw	r0, #49144	; 0xbff8
   23778:	movt	r0, #2
   2377c:	bl	12684 <__assert_fail@plt>
   23780:	ldr	r3, [pc, #20]	; 2379c <flatcc_builder_truncate_string@@Base+0x94>
   23784:	mov	r2, #1004	; 0x3ec
   23788:	movw	r1, #48672	; 0xbe20
   2378c:	movt	r1, #2
   23790:	movw	r0, #49284	; 0xc084
   23794:	movt	r0, #2
   23798:	bl	12684 <__assert_fail@plt>
   2379c:	andeq	fp, r2, r0, lsr #22

000237a0 <flatcc_builder_start_vector@@Base>:
   237a0:	strd	r4, [sp, #-16]!
   237a4:	str	r6, [sp, #8]
   237a8:	str	lr, [sp, #12]
   237ac:	mov	r4, r0
   237b0:	mov	r6, r1
   237b4:	mov	r5, r3
   237b8:	cmp	r2, #4
   237bc:	movcs	r1, r2
   237c0:	movcc	r1, #4
   237c4:	bl	21ca4 <flatcc_builder_default_alloc@@Base+0x24c>
   237c8:	cmp	r0, #0
   237cc:	bne	23838 <flatcc_builder_start_vector@@Base+0x98>
   237d0:	ldr	r3, [r4, #32]
   237d4:	str	r6, [r3, #16]
   237d8:	ldr	r3, [r4, #32]
   237dc:	mov	r2, #0
   237e0:	str	r2, [r3, #20]
   237e4:	ldr	r3, [r4, #32]
   237e8:	str	r5, [r3, #24]
   237ec:	ldr	r3, [r4, #32]
   237f0:	mov	r2, #4
   237f4:	strh	r2, [r3, #14]
   237f8:	ldr	r1, [r4, #28]
   237fc:	ldr	r2, [r4, #60]	; 0x3c
   23800:	add	r2, r2, r1
   23804:	str	r2, [r4, #16]
   23808:	ldr	r3, [r4, #64]	; 0x40
   2380c:	sub	r3, r3, r1
   23810:	cmn	r3, #4
   23814:	mvnhi	r3, #3
   23818:	str	r3, [r4, #24]
   2381c:	ldr	r3, [r4, #32]
   23820:	mvn	r2, #3
   23824:	str	r2, [r3, #4]
   23828:	ldrd	r4, [sp]
   2382c:	ldr	r6, [sp, #8]
   23830:	add	sp, sp, #12
   23834:	pop	{pc}		; (ldr pc, [sp], #4)
   23838:	mvn	r0, #0
   2383c:	b	23828 <flatcc_builder_start_vector@@Base+0x88>

00023840 <flatcc_builder_start_offset_vector@@Base>:
   23840:	str	r4, [sp, #-8]!
   23844:	str	lr, [sp, #4]
   23848:	mov	r4, r0
   2384c:	mov	r1, #4
   23850:	bl	21ca4 <flatcc_builder_default_alloc@@Base+0x24c>
   23854:	cmp	r0, #0
   23858:	bne	238bc <flatcc_builder_start_offset_vector@@Base+0x7c>
   2385c:	ldr	r3, [r4, #32]
   23860:	mov	r2, #4
   23864:	str	r2, [r3, #16]
   23868:	ldr	r3, [r4, #32]
   2386c:	mov	r2, #0
   23870:	str	r2, [r3, #20]
   23874:	ldr	r3, [r4, #32]
   23878:	mov	r2, #5
   2387c:	strh	r2, [r3, #14]
   23880:	ldr	r1, [r4, #28]
   23884:	ldr	r2, [r4, #60]	; 0x3c
   23888:	add	r2, r2, r1
   2388c:	str	r2, [r4, #16]
   23890:	ldr	r3, [r4, #64]	; 0x40
   23894:	sub	r3, r3, r1
   23898:	cmn	r3, #4
   2389c:	mvnhi	r3, #3
   238a0:	str	r3, [r4, #24]
   238a4:	ldr	r3, [r4, #32]
   238a8:	mvn	r2, #3
   238ac:	str	r2, [r3, #4]
   238b0:	ldr	r4, [sp]
   238b4:	add	sp, sp, #4
   238b8:	pop	{pc}		; (ldr pc, [sp], #4)
   238bc:	mvn	r0, #0
   238c0:	b	238b0 <flatcc_builder_start_offset_vector@@Base+0x70>

000238c4 <flatcc_builder_start_string@@Base>:
   238c4:	str	r4, [sp, #-8]!
   238c8:	str	lr, [sp, #4]
   238cc:	mov	r4, r0
   238d0:	mov	r1, #1
   238d4:	bl	21ca4 <flatcc_builder_default_alloc@@Base+0x24c>
   238d8:	cmp	r0, #0
   238dc:	bne	23940 <flatcc_builder_start_string@@Base+0x7c>
   238e0:	ldr	r3, [r4, #32]
   238e4:	mov	r2, #1
   238e8:	str	r2, [r3, #16]
   238ec:	ldr	r3, [r4, #32]
   238f0:	mov	r2, #0
   238f4:	str	r2, [r3, #20]
   238f8:	ldr	r3, [r4, #32]
   238fc:	mov	r2, #6
   23900:	strh	r2, [r3, #14]
   23904:	ldr	r1, [r4, #28]
   23908:	ldr	r2, [r4, #60]	; 0x3c
   2390c:	add	r2, r2, r1
   23910:	str	r2, [r4, #16]
   23914:	ldr	r3, [r4, #64]	; 0x40
   23918:	sub	r3, r3, r1
   2391c:	cmn	r3, #4
   23920:	mvnhi	r3, #3
   23924:	str	r3, [r4, #24]
   23928:	ldr	r3, [r4, #32]
   2392c:	mvn	r2, #3
   23930:	str	r2, [r3, #4]
   23934:	ldr	r4, [sp]
   23938:	add	sp, sp, #4
   2393c:	pop	{pc}		; (ldr pc, [sp], #4)
   23940:	mvn	r0, #0
   23944:	b	23934 <flatcc_builder_start_string@@Base+0x70>

00023948 <flatcc_builder_reserve_table@@Base>:
   23948:	strd	r4, [sp, #-20]!	; 0xffffffec
   2394c:	strd	r6, [sp, #8]
   23950:	str	lr, [sp, #16]
   23954:	sub	sp, sp, #12
   23958:	cmp	r1, #0
   2395c:	blt	23a3c <flatcc_builder_reserve_table@@Base+0xf4>
   23960:	mov	r4, r0
   23964:	ldr	r2, [r0, #32]
   23968:	ldrh	r6, [r2, #28]
   2396c:	ldr	r3, [r2, #16]
   23970:	add	r6, r3, r6, lsl #1
   23974:	add	r1, r1, #2
   23978:	lsl	r5, r1, #1
   2397c:	add	r2, r6, r5
   23980:	ldr	r3, [r0, #56]	; 0x38
   23984:	cmp	r2, r3
   23988:	bls	239b0 <flatcc_builder_reserve_table@@Base+0x68>
   2398c:	mov	r3, #0
   23990:	str	r3, [sp]
   23994:	ldr	r7, [r0, #48]	; 0x30
   23998:	mov	r3, #1
   2399c:	add	r1, r0, #52	; 0x34
   239a0:	ldr	r0, [r0, #40]	; 0x28
   239a4:	blx	r7
   239a8:	cmp	r0, #0
   239ac:	bne	23a58 <flatcc_builder_reserve_table@@Base+0x110>
   239b0:	ldr	r3, [r4, #52]	; 0x34
   239b4:	adds	r3, r3, r6
   239b8:	moveq	r3, #0
   239bc:	streq	r3, [r4, #4]
   239c0:	mvneq	r0, #0
   239c4:	beq	23a28 <flatcc_builder_reserve_table@@Base+0xe0>
   239c8:	add	r3, r3, #4
   239cc:	str	r3, [r4, #4]
   239d0:	ldr	r3, [r4, #32]
   239d4:	ldr	r6, [r3, #20]
   239d8:	add	r2, r5, r6
   239dc:	sub	r2, r2, #3
   239e0:	ldr	r3, [r4, #80]	; 0x50
   239e4:	cmp	r2, r3
   239e8:	bls	23a10 <flatcc_builder_reserve_table@@Base+0xc8>
   239ec:	mov	r3, #3
   239f0:	str	r3, [sp]
   239f4:	ldr	r5, [r4, #48]	; 0x30
   239f8:	mov	r3, #0
   239fc:	add	r1, r4, #76	; 0x4c
   23a00:	ldr	r0, [r4, #40]	; 0x28
   23a04:	blx	r5
   23a08:	cmp	r0, #0
   23a0c:	bne	23a74 <flatcc_builder_reserve_table@@Base+0x12c>
   23a10:	ldr	r0, [r4, #76]	; 0x4c
   23a14:	add	r0, r0, r6
   23a18:	str	r0, [r4]
   23a1c:	clz	r0, r0
   23a20:	lsr	r0, r0, #5
   23a24:	rsb	r0, r0, #0
   23a28:	add	sp, sp, #12
   23a2c:	ldrd	r4, [sp]
   23a30:	ldrd	r6, [sp, #8]
   23a34:	add	sp, sp, #16
   23a38:	pop	{pc}		; (ldr pc, [sp], #4)
   23a3c:	ldr	r3, [pc, #76]	; 23a90 <flatcc_builder_reserve_table@@Base+0x148>
   23a40:	movw	r2, #1065	; 0x429
   23a44:	movw	r1, #48672	; 0xbe20
   23a48:	movt	r1, #2
   23a4c:	movw	r0, #49320	; 0xc0a8
   23a50:	movt	r0, #2
   23a54:	bl	12684 <__assert_fail@plt>
   23a58:	ldr	r3, [pc, #52]	; 23a94 <flatcc_builder_reserve_table@@Base+0x14c>
   23a5c:	mov	r2, #308	; 0x134
   23a60:	movw	r1, #48672	; 0xbe20
   23a64:	movt	r1, #2
   23a68:	movw	r0, #48756	; 0xbe74
   23a6c:	movt	r0, #2
   23a70:	bl	12684 <__assert_fail@plt>
   23a74:	ldr	r3, [pc, #24]	; 23a94 <flatcc_builder_reserve_table@@Base+0x14c>
   23a78:	mov	r2, #308	; 0x134
   23a7c:	movw	r1, #48672	; 0xbe20
   23a80:	movt	r1, #2
   23a84:	movw	r0, #48756	; 0xbe74
   23a88:	movt	r0, #2
   23a8c:	bl	12684 <__assert_fail@plt>
   23a90:	andeq	fp, r2, r0, asr #22
   23a94:	andeq	fp, r2, ip, ror #17

00023a98 <flatcc_builder_start_table@@Base>:
   23a98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23a9c:	strd	r6, [sp, #8]
   23aa0:	str	r8, [sp, #16]
   23aa4:	str	lr, [sp, #20]
   23aa8:	sub	sp, sp, #8
   23aac:	mov	r4, r0
   23ab0:	mov	r5, r1
   23ab4:	mov	r1, #4
   23ab8:	bl	21ca4 <flatcc_builder_default_alloc@@Base+0x24c>
   23abc:	subs	r6, r0, #0
   23ac0:	bne	23c6c <flatcc_builder_start_table@@Base+0x1d4>
   23ac4:	ldr	r2, [r4, #32]
   23ac8:	ldr	r3, [r4, #4]
   23acc:	ldr	r1, [r4, #52]	; 0x34
   23ad0:	sub	r3, r3, r1
   23ad4:	str	r3, [r2, #16]
   23ad8:	ldr	r2, [r4, #32]
   23adc:	ldr	r3, [r4]
   23ae0:	ldr	r1, [r4, #76]	; 0x4c
   23ae4:	sub	r3, r3, r1
   23ae8:	str	r3, [r2, #20]
   23aec:	ldr	r3, [r4, #32]
   23af0:	ldr	r2, [r4, #12]
   23af4:	str	r2, [r3, #24]
   23af8:	ldr	r3, [r4, #32]
   23afc:	ldrh	r2, [r4, #8]
   23b00:	strh	r2, [r3, #28]
   23b04:	movw	r3, #15186	; 0x3b52
   23b08:	movt	r3, #12137	; 0x2f69
   23b0c:	str	r3, [r4, #12]
   23b10:	mov	r3, #0
   23b14:	strh	r3, [r4, #8]
   23b18:	ldr	r3, [r4, #32]
   23b1c:	mov	r2, #3
   23b20:	strh	r2, [r3, #14]
   23b24:	ldr	r2, [r4, #32]
   23b28:	ldrh	r7, [r2, #28]
   23b2c:	ldr	r3, [r2, #16]
   23b30:	add	r7, r3, r7, lsl #1
   23b34:	add	r5, r5, #2
   23b38:	lsl	r5, r5, #1
   23b3c:	add	r2, r7, r5
   23b40:	ldr	r3, [r4, #56]	; 0x38
   23b44:	cmp	r2, r3
   23b48:	bls	23b70 <flatcc_builder_start_table@@Base+0xd8>
   23b4c:	mov	r3, #0
   23b50:	str	r3, [sp]
   23b54:	ldr	r8, [r4, #48]	; 0x30
   23b58:	mov	r3, #1
   23b5c:	add	r1, r4, #52	; 0x34
   23b60:	ldr	r0, [r4, #40]	; 0x28
   23b64:	blx	r8
   23b68:	cmp	r0, #0
   23b6c:	bne	23c34 <flatcc_builder_start_table@@Base+0x19c>
   23b70:	ldr	r3, [r4, #52]	; 0x34
   23b74:	adds	r3, r3, r7
   23b78:	moveq	r3, #0
   23b7c:	streq	r3, [r4, #4]
   23b80:	mvneq	r6, #0
   23b84:	beq	23c18 <flatcc_builder_start_table@@Base+0x180>
   23b88:	add	r3, r3, #4
   23b8c:	str	r3, [r4, #4]
   23b90:	ldr	r3, [r4, #32]
   23b94:	ldr	r7, [r3, #20]
   23b98:	sub	r2, r5, #3
   23b9c:	add	r2, r2, r7
   23ba0:	ldr	r3, [r4, #80]	; 0x50
   23ba4:	cmp	r2, r3
   23ba8:	bls	23bd0 <flatcc_builder_start_table@@Base+0x138>
   23bac:	mov	r3, #3
   23bb0:	str	r3, [sp]
   23bb4:	ldr	r5, [r4, #48]	; 0x30
   23bb8:	mov	r3, #0
   23bbc:	add	r1, r4, #76	; 0x4c
   23bc0:	ldr	r0, [r4, #40]	; 0x28
   23bc4:	blx	r5
   23bc8:	cmp	r0, #0
   23bcc:	bne	23c50 <flatcc_builder_start_table@@Base+0x1b8>
   23bd0:	ldr	r3, [r4, #76]	; 0x4c
   23bd4:	add	r3, r3, r7
   23bd8:	str	r3, [r4]
   23bdc:	cmp	r3, #0
   23be0:	beq	23c74 <flatcc_builder_start_table@@Base+0x1dc>
   23be4:	ldr	r1, [r4, #28]
   23be8:	ldr	r2, [r4, #60]	; 0x3c
   23bec:	add	r2, r2, r1
   23bf0:	str	r2, [r4, #16]
   23bf4:	ldr	r3, [r4, #64]	; 0x40
   23bf8:	sub	r3, r3, r1
   23bfc:	movw	r2, #65532	; 0xfffc
   23c00:	cmp	r3, r2
   23c04:	movwhi	r3, #65532	; 0xfffc
   23c08:	str	r3, [r4, #24]
   23c0c:	ldr	r3, [r4, #32]
   23c10:	movw	r2, #65532	; 0xfffc
   23c14:	str	r2, [r3, #4]
   23c18:	mov	r0, r6
   23c1c:	add	sp, sp, #8
   23c20:	ldrd	r4, [sp]
   23c24:	ldrd	r6, [sp, #8]
   23c28:	ldr	r8, [sp, #16]
   23c2c:	add	sp, sp, #20
   23c30:	pop	{pc}		; (ldr pc, [sp], #4)
   23c34:	ldr	r3, [pc, #64]	; 23c7c <flatcc_builder_start_table@@Base+0x1e4>
   23c38:	mov	r2, #308	; 0x134
   23c3c:	movw	r1, #48672	; 0xbe20
   23c40:	movt	r1, #2
   23c44:	movw	r0, #48756	; 0xbe74
   23c48:	movt	r0, #2
   23c4c:	bl	12684 <__assert_fail@plt>
   23c50:	ldr	r3, [pc, #36]	; 23c7c <flatcc_builder_start_table@@Base+0x1e4>
   23c54:	mov	r2, #308	; 0x134
   23c58:	movw	r1, #48672	; 0xbe20
   23c5c:	movt	r1, #2
   23c60:	movw	r0, #48756	; 0xbe74
   23c64:	movt	r0, #2
   23c68:	bl	12684 <__assert_fail@plt>
   23c6c:	mvn	r6, #0
   23c70:	b	23c18 <flatcc_builder_start_table@@Base+0x180>
   23c74:	mvn	r6, #0
   23c78:	b	23c18 <flatcc_builder_start_table@@Base+0x180>
   23c7c:	andeq	fp, r2, ip, ror #17

00023c80 <flatcc_builder_create_vtable@@Base>:
   23c80:	strd	r4, [sp, #-16]!
   23c84:	str	r6, [sp, #8]
   23c88:	str	lr, [sp, #12]
   23c8c:	sub	sp, sp, #80	; 0x50
   23c90:	mov	r5, r0
   23c94:	mov	r3, #0
   23c98:	str	r3, [sp, #8]
   23c9c:	str	r3, [sp, #12]
   23ca0:	cmp	r2, #0
   23ca4:	beq	23d40 <flatcc_builder_create_vtable@@Base+0xc0>
   23ca8:	str	r2, [sp, #8]
   23cac:	str	r1, [sp, #16]
   23cb0:	str	r2, [sp, #20]
   23cb4:	mov	r3, #1
   23cb8:	str	r3, [sp, #12]
   23cbc:	ldr	r3, [r0, #152]	; 0x98
   23cc0:	cmp	r3, #0
   23cc4:	bne	23d58 <flatcc_builder_create_vtable@@Base+0xd8>
   23cc8:	ldr	r3, [r0, #180]	; 0xb4
   23ccc:	cmp	r3, #0
   23cd0:	bne	23d58 <flatcc_builder_create_vtable@@Base+0xd8>
   23cd4:	ldr	r4, [r0, #140]	; 0x8c
   23cd8:	mov	r3, r2
   23cdc:	add	r2, r2, r4
   23ce0:	str	r2, [r0, #140]	; 0x8c
   23ce4:	cmp	r4, r2
   23ce8:	ble	23dc4 <flatcc_builder_create_vtable@@Base+0x144>
   23cec:	ldr	r3, [pc, #276]	; 23e08 <flatcc_builder_create_vtable@@Base+0x188>
   23cf0:	movw	r2, #673	; 0x2a1
   23cf4:	movw	r1, #48672	; 0xbe20
   23cf8:	movt	r1, #2
   23cfc:	movw	r0, #48756	; 0xbe74
   23d00:	movt	r0, #2
   23d04:	bl	12684 <__assert_fail@plt>
   23d08:	ldr	r3, [pc, #252]	; 23e0c <flatcc_builder_create_vtable@@Base+0x18c>
   23d0c:	movw	r2, #647	; 0x287
   23d10:	movw	r1, #48672	; 0xbe20
   23d14:	movt	r1, #2
   23d18:	movw	r0, #48756	; 0xbe74
   23d1c:	movt	r0, #2
   23d20:	bl	12684 <__assert_fail@plt>
   23d24:	ldr	r3, [pc, #224]	; 23e0c <flatcc_builder_create_vtable@@Base+0x18c>
   23d28:	movw	r2, #651	; 0x28b
   23d2c:	movw	r1, #48672	; 0xbe20
   23d30:	movt	r1, #2
   23d34:	movw	r0, #48756	; 0xbe74
   23d38:	movt	r0, #2
   23d3c:	bl	12684 <__assert_fail@plt>
   23d40:	ldr	r3, [r0, #152]	; 0x98
   23d44:	cmp	r3, #0
   23d48:	bne	23d08 <flatcc_builder_create_vtable@@Base+0x88>
   23d4c:	ldr	r3, [r0, #180]	; 0xb4
   23d50:	cmp	r3, #0
   23d54:	beq	23db4 <flatcc_builder_create_vtable@@Base+0x134>
   23d58:	ldr	r2, [r5, #136]	; 0x88
   23d5c:	ldr	r3, [sp, #8]
   23d60:	sub	r4, r2, r3
   23d64:	cmp	r2, r4
   23d68:	ble	23d08 <flatcc_builder_create_vtable@@Base+0x88>
   23d6c:	str	r3, [sp]
   23d70:	ldr	r6, [r5, #44]	; 0x2c
   23d74:	mov	r3, r4
   23d78:	ldr	r2, [sp, #12]
   23d7c:	add	r1, sp, #16
   23d80:	ldr	r0, [r5, #36]	; 0x24
   23d84:	blx	r6
   23d88:	cmp	r0, #0
   23d8c:	bne	23d24 <flatcc_builder_create_vtable@@Base+0xa4>
   23d90:	str	r4, [r5, #136]	; 0x88
   23d94:	cmp	r4, #0
   23d98:	addne	r4, r4, #1
   23d9c:	mov	r0, r4
   23da0:	add	sp, sp, #80	; 0x50
   23da4:	ldrd	r4, [sp]
   23da8:	ldr	r6, [sp, #8]
   23dac:	add	sp, sp, #12
   23db0:	pop	{pc}		; (ldr pc, [sp], #4)
   23db4:	ldr	r4, [r5, #140]	; 0x8c
   23db8:	ldr	r3, [sp, #8]
   23dbc:	add	r2, r3, r4
   23dc0:	str	r2, [r5, #140]	; 0x8c
   23dc4:	str	r3, [sp]
   23dc8:	ldr	r6, [r5, #44]	; 0x2c
   23dcc:	mov	r3, r4
   23dd0:	ldr	r2, [sp, #12]
   23dd4:	add	r1, sp, #16
   23dd8:	ldr	r0, [r5, #36]	; 0x24
   23ddc:	blx	r6
   23de0:	cmp	r0, #0
   23de4:	addeq	r4, r4, #1
   23de8:	beq	23d9c <flatcc_builder_create_vtable@@Base+0x11c>
   23dec:	ldr	r3, [pc, #20]	; 23e08 <flatcc_builder_create_vtable@@Base+0x188>
   23df0:	movw	r2, #677	; 0x2a5
   23df4:	movw	r1, #48672	; 0xbe20
   23df8:	movt	r1, #2
   23dfc:	movw	r0, #48756	; 0xbe74
   23e00:	movt	r0, #2
   23e04:	bl	12684 <__assert_fail@plt>
   23e08:	ldrdeq	fp, [r2], -r0
   23e0c:	andeq	fp, r2, ip, lsl r9

00023e10 <flatcc_builder_create_cached_vtable@@Base>:
   23e10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23e14:	strd	r6, [sp, #8]
   23e18:	strd	r8, [sp, #16]
   23e1c:	strd	sl, [sp, #24]
   23e20:	str	lr, [sp, #32]
   23e24:	sub	sp, sp, #36	; 0x24
   23e28:	mov	r5, r0
   23e2c:	str	r1, [sp, #12]
   23e30:	str	r2, [sp, #16]
   23e34:	mov	r6, r3
   23e38:	ldr	r3, [r0, #116]	; 0x74
   23e3c:	cmp	r3, #0
   23e40:	beq	23e88 <flatcc_builder_create_cached_vtable@@Base+0x78>
   23e44:	ldr	r8, [r5, #116]	; 0x74
   23e48:	rsb	r3, r8, #32
   23e4c:	lsr	r8, r6, r3
   23e50:	ldr	sl, [r5, #92]	; 0x5c
   23e54:	adds	r9, sl, r8, lsl #2
   23e58:	str	r9, [sp, #20]
   23e5c:	beq	24198 <flatcc_builder_create_cached_vtable@@Base+0x388>
   23e60:	ldr	r6, [sl, r8, lsl #2]
   23e64:	cmp	r6, #0
   23e68:	beq	240c0 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   23e6c:	ldr	fp, [r5, #100]	; 0x64
   23e70:	ldr	r7, [r5, #68]	; 0x44
   23e74:	mov	r3, #0
   23e78:	str	r3, [sp, #28]
   23e7c:	str	r8, [sp, #24]
   23e80:	ldr	r8, [sp, #16]
   23e84:	b	23f90 <flatcc_builder_create_cached_vtable@@Base+0x180>
   23e88:	add	r8, r0, #92	; 0x5c
   23e8c:	ldr	r4, [r0, #124]	; 0x7c
   23e90:	cmp	r4, #0
   23e94:	bne	23f14 <flatcc_builder_create_cached_vtable@@Base+0x104>
   23e98:	ldr	r3, [r0, #104]	; 0x68
   23e9c:	cmp	r3, #15
   23ea0:	bhi	23ecc <flatcc_builder_create_cached_vtable@@Base+0xbc>
   23ea4:	mov	r3, #6
   23ea8:	str	r3, [sp]
   23eac:	ldr	r7, [r0, #48]	; 0x30
   23eb0:	mov	r3, #0
   23eb4:	mov	r2, #16
   23eb8:	add	r1, r0, #100	; 0x64
   23ebc:	ldr	r0, [r0, #40]	; 0x28
   23ec0:	blx	r7
   23ec4:	cmp	r0, #0
   23ec8:	bne	23f30 <flatcc_builder_create_cached_vtable@@Base+0x120>
   23ecc:	ldr	r3, [r5, #100]	; 0x64
   23ed0:	cmp	r3, #0
   23ed4:	beq	241b0 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   23ed8:	mov	r3, #16
   23edc:	str	r3, [r5, #124]	; 0x7c
   23ee0:	mov	r3, #5
   23ee4:	str	r3, [sp]
   23ee8:	ldr	r7, [r5, #48]	; 0x30
   23eec:	mov	r3, #1
   23ef0:	mov	r2, #256	; 0x100
   23ef4:	mov	r1, r8
   23ef8:	ldr	r0, [r5, #40]	; 0x28
   23efc:	blx	r7
   23f00:	cmp	r0, #0
   23f04:	bne	241b0 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   23f08:	ldr	r1, [r5, #96]	; 0x60
   23f0c:	mov	r2, #256	; 0x100
   23f10:	b	23f50 <flatcc_builder_create_cached_vtable@@Base+0x140>
   23f14:	ldr	r3, [pc, #668]	; 241b8 <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   23f18:	movw	r2, #342	; 0x156
   23f1c:	movw	r1, #48672	; 0xbe20
   23f20:	movt	r1, #2
   23f24:	movw	r0, #49332	; 0xc0b4
   23f28:	movt	r0, #2
   23f2c:	bl	12684 <__assert_fail@plt>
   23f30:	ldr	r3, [pc, #644]	; 241bc <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   23f34:	mov	r2, #308	; 0x134
   23f38:	movw	r1, #48672	; 0xbe20
   23f3c:	movt	r1, #2
   23f40:	movw	r0, #48756	; 0xbe74
   23f44:	movt	r0, #2
   23f48:	bl	12684 <__assert_fail@plt>
   23f4c:	mov	r2, r3
   23f50:	lsl	r3, r2, #1
   23f54:	cmp	r3, r1
   23f58:	bls	23f4c <flatcc_builder_create_cached_vtable@@Base+0x13c>
   23f5c:	lsr	r3, r2, #2
   23f60:	cmp	r2, #7
   23f64:	bls	23f78 <flatcc_builder_create_cached_vtable@@Base+0x168>
   23f68:	mov	r2, #1
   23f6c:	add	r4, r4, #1
   23f70:	cmp	r3, r2, lsl r4
   23f74:	bhi	23f6c <flatcc_builder_create_cached_vtable@@Base+0x15c>
   23f78:	str	r4, [r5, #116]	; 0x74
   23f7c:	b	23e44 <flatcc_builder_create_cached_vtable@@Base+0x34>
   23f80:	add	r9, r4, #12
   23f84:	ldr	r6, [r4, #12]
   23f88:	cmp	r6, #0
   23f8c:	beq	24020 <flatcc_builder_create_cached_vtable@@Base+0x210>
   23f90:	add	r4, fp, r6
   23f94:	ldr	r3, [r4, #8]
   23f98:	add	r1, r7, r3
   23f9c:	ldrh	r3, [r7, r3]
   23fa0:	cmp	r3, r8
   23fa4:	bne	23f80 <flatcc_builder_create_cached_vtable@@Base+0x170>
   23fa8:	mov	r2, r8
   23fac:	ldr	r0, [sp, #12]
   23fb0:	bl	125a0 <memcmp@plt>
   23fb4:	cmp	r0, #0
   23fb8:	bne	23f80 <flatcc_builder_create_cached_vtable@@Base+0x170>
   23fbc:	ldr	r2, [r4, #4]
   23fc0:	ldr	r3, [r5, #152]	; 0x98
   23fc4:	cmp	r2, r3
   23fc8:	bne	24010 <flatcc_builder_create_cached_vtable@@Base+0x200>
   23fcc:	ldr	r8, [sp, #24]
   23fd0:	ldr	r3, [sp, #20]
   23fd4:	cmp	r3, r9
   23fd8:	beq	23ff0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   23fdc:	ldr	r3, [r4, #12]
   23fe0:	str	r3, [r9]
   23fe4:	ldr	r3, [sl, r8, lsl #2]
   23fe8:	str	r3, [r4, #12]
   23fec:	str	r6, [sl, r8, lsl #2]
   23ff0:	ldr	r0, [r4]
   23ff4:	add	sp, sp, #36	; 0x24
   23ff8:	ldrd	r4, [sp]
   23ffc:	ldrd	r6, [sp, #8]
   24000:	ldrd	r8, [sp, #16]
   24004:	ldrd	sl, [sp, #24]
   24008:	add	sp, sp, #32
   2400c:	pop	{pc}		; (ldr pc, [sp], #4)
   24010:	add	r9, r4, #12
   24014:	ldr	r6, [r4, #12]
   24018:	str	r4, [sp, #28]
   2401c:	b	23f88 <flatcc_builder_create_cached_vtable@@Base+0x178>
   24020:	ldr	r8, [sp, #24]
   24024:	ldr	r4, [r5, #124]	; 0x7c
   24028:	add	r2, r4, #16
   2402c:	ldr	r3, [r5, #104]	; 0x68
   24030:	cmp	r2, r3
   24034:	bls	2405c <flatcc_builder_create_cached_vtable@@Base+0x24c>
   24038:	mov	r3, #6
   2403c:	str	r3, [sp]
   24040:	ldr	r6, [r5, #48]	; 0x30
   24044:	mov	r3, #0
   24048:	add	r1, r5, #100	; 0x64
   2404c:	ldr	r0, [r5, #40]	; 0x28
   24050:	blx	r6
   24054:	cmp	r0, #0
   24058:	bne	240cc <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   2405c:	ldr	r6, [r5, #100]	; 0x64
   24060:	adds	r7, r6, r4
   24064:	beq	241a0 <flatcc_builder_create_cached_vtable@@Base+0x390>
   24068:	ldr	r3, [r5, #124]	; 0x7c
   2406c:	add	r2, r3, #16
   24070:	str	r2, [r5, #124]	; 0x7c
   24074:	ldr	r2, [r5, #152]	; 0x98
   24078:	str	r2, [r7, #4]
   2407c:	ldr	r2, [sl, r8, lsl #2]
   24080:	str	r2, [r7, #12]
   24084:	str	r3, [sl, r8, lsl #2]
   24088:	ldr	r2, [sp, #16]
   2408c:	ldr	r1, [sp, #12]
   24090:	mov	r0, r5
   24094:	bl	23c80 <flatcc_builder_create_vtable@@Base>
   24098:	str	r0, [r6, r4]
   2409c:	cmp	r0, #0
   240a0:	beq	23ff4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   240a4:	ldr	r3, [sp, #28]
   240a8:	cmp	r3, #0
   240ac:	beq	240e8 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   240b0:	ldr	r3, [r3, #8]
   240b4:	str	r3, [r7, #8]
   240b8:	ldr	r0, [r6, r4]
   240bc:	b	23ff4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   240c0:	mov	r3, #0
   240c4:	str	r3, [sp, #28]
   240c8:	b	24024 <flatcc_builder_create_cached_vtable@@Base+0x214>
   240cc:	ldr	r3, [pc, #232]	; 241bc <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   240d0:	mov	r2, #308	; 0x134
   240d4:	movw	r1, #48672	; 0xbe20
   240d8:	movt	r1, #2
   240dc:	movw	r0, #48756	; 0xbe74
   240e0:	movt	r0, #2
   240e4:	bl	12684 <__assert_fail@plt>
   240e8:	ldr	r2, [r5, #172]	; 0xac
   240ec:	cmp	r2, #0
   240f0:	beq	24108 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   240f4:	ldr	r3, [r5, #120]	; 0x78
   240f8:	ldr	r1, [sp, #16]
   240fc:	add	r3, r1, r3
   24100:	cmp	r2, r3
   24104:	bcc	24170 <flatcc_builder_create_cached_vtable@@Base+0x360>
   24108:	ldr	r8, [r5, #120]	; 0x78
   2410c:	ldr	r3, [sp, #16]
   24110:	add	r2, r8, r3
   24114:	ldr	r3, [r5, #72]	; 0x48
   24118:	cmp	r2, r3
   2411c:	bls	24144 <flatcc_builder_create_cached_vtable@@Base+0x334>
   24120:	mov	r3, #2
   24124:	str	r3, [sp]
   24128:	ldr	sl, [r5, #48]	; 0x30
   2412c:	mov	r3, #0
   24130:	add	r1, r5, #68	; 0x44
   24134:	ldr	r0, [r5, #40]	; 0x28
   24138:	blx	sl
   2413c:	cmp	r0, #0
   24140:	bne	2417c <flatcc_builder_create_cached_vtable@@Base+0x36c>
   24144:	ldr	r3, [r5, #68]	; 0x44
   24148:	adds	r0, r3, r8
   2414c:	beq	241a8 <flatcc_builder_create_cached_vtable@@Base+0x398>
   24150:	ldr	r3, [r5, #120]	; 0x78
   24154:	str	r3, [r7, #8]
   24158:	ldr	r2, [sp, #16]
   2415c:	add	r3, r2, r3
   24160:	str	r3, [r5, #120]	; 0x78
   24164:	ldr	r1, [sp, #12]
   24168:	bl	12588 <memcpy@plt>
   2416c:	b	240b8 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   24170:	mov	r0, r5
   24174:	bl	22018 <flatcc_builder_flush_vtable_cache@@Base>
   24178:	b	240b8 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   2417c:	ldr	r3, [pc, #56]	; 241bc <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   24180:	mov	r2, #308	; 0x134
   24184:	movw	r1, #48672	; 0xbe20
   24188:	movt	r1, #2
   2418c:	movw	r0, #48756	; 0xbe74
   24190:	movt	r0, #2
   24194:	bl	12684 <__assert_fail@plt>
   24198:	mov	r0, #0
   2419c:	b	23ff4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   241a0:	mov	r0, #0
   241a4:	b	23ff4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   241a8:	mvn	r0, #0
   241ac:	b	23ff4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   241b0:	mov	r0, #0
   241b4:	b	23ff4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   241b8:	andeq	fp, r2, r0, ror #22
   241bc:	andeq	fp, r2, ip, ror #17

000241c0 <flatcc_builder_create_table@@Base>:
   241c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   241c4:	strd	r6, [sp, #8]
   241c8:	str	lr, [sp, #16]
   241cc:	sub	sp, sp, #92	; 0x5c
   241d0:	ldr	r7, [sp, #116]	; 0x74
   241d4:	ldr	ip, [sp, #120]	; 0x78
   241d8:	cmp	r7, #0
   241dc:	blt	24324 <flatcc_builder_create_table@@Base+0x164>
   241e0:	mov	r4, r0
   241e4:	tst	ip, #1
   241e8:	beq	24340 <flatcc_builder_create_table@@Base+0x180>
   241ec:	cmp	r3, #4
   241f0:	movcc	r3, #4
   241f4:	ldrh	r0, [r0, #128]	; 0x80
   241f8:	cmp	r0, r3
   241fc:	strhcc	r3, [r4, #128]	; 0x80
   24200:	ldr	r0, [r4, #136]	; 0x88
   24204:	sub	r6, r0, r2
   24208:	sub	r3, r3, #1
   2420c:	and	r6, r6, r3
   24210:	sub	r0, r0, r2
   24214:	sub	r0, r0, #4
   24218:	sub	ip, ip, #1
   2421c:	sub	ip, r0, ip
   24220:	sub	ip, ip, r6
   24224:	str	ip, [sp, #84]	; 0x54
   24228:	cmp	r7, #0
   2422c:	ble	2425c <flatcc_builder_create_table@@Base+0x9c>
   24230:	ldr	ip, [sp, #112]	; 0x70
   24234:	add	r7, ip, r7, lsl #1
   24238:	sub	r0, r6, r0
   2423c:	sub	lr, r0, #4
   24240:	ldrh	r3, [ip], #2
   24244:	sub	r5, lr, r3
   24248:	ldr	r0, [r1, r3]
   2424c:	add	r0, r0, r5
   24250:	str	r0, [r1, r3]
   24254:	cmp	r7, ip
   24258:	bne	24240 <flatcc_builder_create_table@@Base+0x80>
   2425c:	mov	r3, #4
   24260:	str	r3, [sp, #12]
   24264:	add	r0, sp, #84	; 0x54
   24268:	str	r0, [sp, #20]
   2426c:	str	r3, [sp, #24]
   24270:	mov	r3, #1
   24274:	str	r3, [sp, #16]
   24278:	cmp	r2, #0
   2427c:	beq	24298 <flatcc_builder_create_table@@Base+0xd8>
   24280:	add	r3, r2, #4
   24284:	str	r3, [sp, #12]
   24288:	str	r1, [sp, #28]
   2428c:	str	r2, [sp, #32]
   24290:	mov	r3, #2
   24294:	str	r3, [sp, #16]
   24298:	cmp	r6, #0
   2429c:	beq	242d0 <flatcc_builder_create_table@@Base+0x110>
   242a0:	ldr	r3, [sp, #12]
   242a4:	add	r3, r3, r6
   242a8:	str	r3, [sp, #12]
   242ac:	ldr	r3, [sp, #16]
   242b0:	add	r3, r3, #1
   242b4:	add	r2, sp, #88	; 0x58
   242b8:	add	r1, r2, r3, lsl #3
   242bc:	movw	r2, #46800	; 0xb6d0
   242c0:	movt	r2, #2
   242c4:	str	r2, [r1, #-76]	; 0xffffffb4
   242c8:	str	r6, [r1, #-72]	; 0xffffffb8
   242cc:	str	r3, [sp, #16]
   242d0:	ldr	r2, [r4, #136]	; 0x88
   242d4:	ldr	r3, [sp, #12]
   242d8:	sub	r5, r2, r3
   242dc:	cmp	r2, r5
   242e0:	ble	2435c <flatcc_builder_create_table@@Base+0x19c>
   242e4:	str	r3, [sp]
   242e8:	ldr	r6, [r4, #44]	; 0x2c
   242ec:	mov	r3, r5
   242f0:	ldr	r2, [sp, #16]
   242f4:	add	r1, sp, #20
   242f8:	ldr	r0, [r4, #36]	; 0x24
   242fc:	blx	r6
   24300:	cmp	r0, #0
   24304:	bne	24378 <flatcc_builder_create_table@@Base+0x1b8>
   24308:	str	r5, [r4, #136]	; 0x88
   2430c:	mov	r0, r5
   24310:	add	sp, sp, #92	; 0x5c
   24314:	ldrd	r4, [sp]
   24318:	ldrd	r6, [sp, #8]
   2431c:	add	sp, sp, #16
   24320:	pop	{pc}		; (ldr pc, [sp], #4)
   24324:	ldr	r3, [pc, #104]	; 24394 <flatcc_builder_create_table@@Base+0x1d4>
   24328:	movw	r2, #1237	; 0x4d5
   2432c:	movw	r1, #48672	; 0xbe20
   24330:	movt	r1, #2
   24334:	movw	r0, #49348	; 0xc0c4
   24338:	movt	r0, #2
   2433c:	bl	12684 <__assert_fail@plt>
   24340:	ldr	r3, [pc, #76]	; 24394 <flatcc_builder_create_table@@Base+0x1d4>
   24344:	movw	r2, #1243	; 0x4db
   24348:	movw	r1, #48672	; 0xbe20
   2434c:	movt	r1, #2
   24350:	movw	r0, #49368	; 0xc0d8
   24354:	movt	r0, #2
   24358:	bl	12684 <__assert_fail@plt>
   2435c:	ldr	r3, [pc, #52]	; 24398 <flatcc_builder_create_table@@Base+0x1d8>
   24360:	movw	r2, #647	; 0x287
   24364:	movw	r1, #48672	; 0xbe20
   24368:	movt	r1, #2
   2436c:	movw	r0, #48756	; 0xbe74
   24370:	movt	r0, #2
   24374:	bl	12684 <__assert_fail@plt>
   24378:	ldr	r3, [pc, #24]	; 24398 <flatcc_builder_create_table@@Base+0x1d8>
   2437c:	movw	r2, #651	; 0x28b
   24380:	movw	r1, #48672	; 0xbe20
   24384:	movt	r1, #2
   24388:	movw	r0, #48756	; 0xbe74
   2438c:	movt	r0, #2
   24390:	bl	12684 <__assert_fail@plt>
   24394:	andeq	fp, r2, ip, ror #22
   24398:	andeq	fp, r2, ip, lsl r9

0002439c <flatcc_builder_check_required_field@@Base>:
   2439c:	ldr	r3, [r0, #32]
   243a0:	ldrh	r3, [r3, #14]
   243a4:	cmp	r3, #3
   243a8:	bne	243d0 <flatcc_builder_check_required_field@@Base+0x34>
   243ac:	ldrh	r3, [r0, #8]
   243b0:	cmp	r3, r1
   243b4:	bls	243f4 <flatcc_builder_check_required_field@@Base+0x58>
   243b8:	ldr	r3, [r0, #4]
   243bc:	lsl	r1, r1, #1
   243c0:	ldrh	r0, [r3, r1]
   243c4:	adds	r0, r0, #0
   243c8:	movne	r0, #1
   243cc:	bx	lr
   243d0:	str	r4, [sp, #-8]!
   243d4:	str	lr, [sp, #4]
   243d8:	ldr	r3, [pc, #28]	; 243fc <flatcc_builder_check_required_field@@Base+0x60>
   243dc:	movw	r2, #1272	; 0x4f8
   243e0:	movw	r1, #48672	; 0xbe20
   243e4:	movt	r1, #2
   243e8:	movw	r0, #49380	; 0xc0e4
   243ec:	movt	r0, #2
   243f0:	bl	12684 <__assert_fail@plt>
   243f4:	mov	r0, #0
   243f8:	bx	lr
   243fc:	andeq	fp, r2, r8, lsl #23

00024400 <flatcc_builder_check_union_field@@Base>:
   24400:	ldr	r3, [r0, #32]
   24404:	ldrh	r3, [r3, #14]
   24408:	cmp	r3, #3
   2440c:	bne	24460 <flatcc_builder_check_union_field@@Base+0x60>
   24410:	cmp	r1, #0
   24414:	beq	244ac <flatcc_builder_check_union_field@@Base+0xac>
   24418:	ldrh	r3, [r0, #8]
   2441c:	cmp	r3, r1
   24420:	bls	244b4 <flatcc_builder_check_union_field@@Base+0xb4>
   24424:	ldr	r3, [r0, #4]
   24428:	sub	r1, r1, #-2147483647	; 0x80000001
   2442c:	lsl	r1, r1, #1
   24430:	ldrh	r2, [r3, r1]
   24434:	cmp	r2, #0
   24438:	beq	24484 <flatcc_builder_check_union_field@@Base+0x84>
   2443c:	ldr	r0, [r0, #16]
   24440:	ldrb	r2, [r0, r2]
   24444:	cmp	r2, #0
   24448:	bne	24498 <flatcc_builder_check_union_field@@Base+0x98>
   2444c:	add	r1, r3, r1
   24450:	ldrh	r0, [r1, #2]
   24454:	clz	r0, r0
   24458:	lsr	r0, r0, #5
   2445c:	bx	lr
   24460:	str	r4, [sp, #-8]!
   24464:	str	lr, [sp, #4]
   24468:	ldr	r3, [pc, #76]	; 244bc <flatcc_builder_check_union_field@@Base+0xbc>
   2446c:	movw	r2, #1279	; 0x4ff
   24470:	movw	r1, #48672	; 0xbe20
   24474:	movt	r1, #2
   24478:	movw	r0, #49380	; 0xc0e4
   2447c:	movt	r0, #2
   24480:	bl	12684 <__assert_fail@plt>
   24484:	add	r1, r3, r1
   24488:	ldrh	r0, [r1, #2]
   2448c:	clz	r0, r0
   24490:	lsr	r0, r0, #5
   24494:	bx	lr
   24498:	add	r1, r3, r1
   2449c:	ldrh	r0, [r1, #2]
   244a0:	adds	r0, r0, #0
   244a4:	movne	r0, #1
   244a8:	bx	lr
   244ac:	mov	r0, #0
   244b0:	bx	lr
   244b4:	mov	r0, #0
   244b8:	bx	lr
   244bc:	andeq	fp, r2, ip, lsr #23

000244c0 <flatcc_builder_check_required@@Base>:
   244c0:	ldr	r3, [r0, #32]
   244c4:	ldrh	r3, [r3, #14]
   244c8:	cmp	r3, #3
   244cc:	bne	24528 <flatcc_builder_check_required@@Base+0x68>
   244d0:	ldrh	r3, [r0, #8]
   244d4:	cmp	r3, r2
   244d8:	blt	24554 <flatcc_builder_check_required@@Base+0x94>
   244dc:	cmp	r2, #0
   244e0:	ble	2455c <flatcc_builder_check_required@@Base+0x9c>
   244e4:	ldr	ip, [r0, #4]
   244e8:	ldrh	r3, [r1]
   244ec:	lsl	r3, r3, #1
   244f0:	ldrh	r3, [ip, r3]
   244f4:	cmp	r3, #0
   244f8:	beq	24564 <flatcc_builder_check_required@@Base+0xa4>
   244fc:	add	r0, r1, #2
   24500:	add	r2, r1, r2, lsl #1
   24504:	cmp	r0, r2
   24508:	beq	2454c <flatcc_builder_check_required@@Base+0x8c>
   2450c:	ldrh	r3, [r0], #2
   24510:	lsl	r3, r3, #1
   24514:	ldrh	r3, [ip, r3]
   24518:	cmp	r3, #0
   2451c:	bne	24504 <flatcc_builder_check_required@@Base+0x44>
   24520:	mov	r0, #0
   24524:	bx	lr
   24528:	str	r4, [sp, #-8]!
   2452c:	str	lr, [sp, #4]
   24530:	ldr	r3, [pc, #52]	; 2456c <flatcc_builder_check_required@@Base+0xac>
   24534:	movw	r2, #1297	; 0x511
   24538:	movw	r1, #48672	; 0xbe20
   2453c:	movt	r1, #2
   24540:	movw	r0, #49380	; 0xc0e4
   24544:	movt	r0, #2
   24548:	bl	12684 <__assert_fail@plt>
   2454c:	mov	r0, #1
   24550:	bx	lr
   24554:	mov	r0, #0
   24558:	bx	lr
   2455c:	mov	r0, #1
   24560:	bx	lr
   24564:	mov	r0, #0
   24568:	bx	lr
   2456c:	ldrdeq	fp, [r2], -r0

00024570 <flatcc_builder_end_table@@Base>:
   24570:	strd	r4, [sp, #-20]!	; 0xffffffec
   24574:	strd	r6, [sp, #8]
   24578:	str	lr, [sp, #16]
   2457c:	sub	sp, sp, #20
   24580:	ldr	r3, [r0, #32]
   24584:	ldrh	r3, [r3, #14]
   24588:	cmp	r3, #3
   2458c:	bne	2460c <flatcc_builder_end_table@@Base+0x9c>
   24590:	mov	r4, r0
   24594:	ldr	r2, [r0, #4]
   24598:	sub	r6, r2, #4
   2459c:	ldrh	r5, [r0, #8]
   245a0:	add	r5, r5, #2
   245a4:	lsl	r5, r5, #1
   245a8:	uxth	r5, r5
   245ac:	strh	r5, [r2, #-4]
   245b0:	ldr	r3, [r0, #20]
   245b4:	add	r3, r3, #4
   245b8:	uxth	r1, r3
   245bc:	strh	r1, [r2, #-2]
   245c0:	ldr	r3, [r0, #12]
   245c4:	eor	r3, r3, r5
   245c8:	movw	r2, #31153	; 0x79b1
   245cc:	movt	r2, #40503	; 0x9e37
   245d0:	mul	r3, r2, r3
   245d4:	eor	r3, r3, r1
   245d8:	mul	r3, r2, r3
   245dc:	str	r3, [r0, #12]
   245e0:	mov	r2, r5
   245e4:	mov	r1, r6
   245e8:	bl	23e10 <flatcc_builder_create_cached_vtable@@Base>
   245ec:	subs	r7, r0, #0
   245f0:	bne	24628 <flatcc_builder_end_table@@Base+0xb8>
   245f4:	mov	r0, r7
   245f8:	add	sp, sp, #20
   245fc:	ldrd	r4, [sp]
   24600:	ldrd	r6, [sp, #8]
   24604:	add	sp, sp, #16
   24608:	pop	{pc}		; (ldr pc, [sp], #4)
   2460c:	ldr	r3, [pc, #284]	; 24730 <flatcc_builder_end_table@@Base+0x1c0>
   24610:	movw	r2, #1317	; 0x525
   24614:	movw	r1, #48672	; 0xbe20
   24618:	movt	r1, #2
   2461c:	movw	r0, #49380	; 0xc0e4
   24620:	movt	r0, #2
   24624:	bl	12684 <__assert_fail@plt>
   24628:	mov	r2, r5
   2462c:	mov	r1, #0
   24630:	mov	r0, r6
   24634:	bl	12630 <memset@plt>
   24638:	ldr	r3, [r4, #32]
   2463c:	ldr	r2, [r4, #76]	; 0x4c
   24640:	ldr	r3, [r3, #20]
   24644:	add	r2, r2, r3
   24648:	str	r7, [sp, #8]
   2464c:	ldr	r3, [r4]
   24650:	sub	r3, r3, r2
   24654:	asr	r3, r3, #1
   24658:	str	r3, [sp, #4]
   2465c:	str	r2, [sp]
   24660:	ldrh	r3, [r4, #130]	; 0x82
   24664:	ldr	r2, [r4, #20]
   24668:	ldr	r1, [r4, #16]
   2466c:	mov	r0, r4
   24670:	bl	241c0 <flatcc_builder_create_table@@Base>
   24674:	subs	r7, r0, #0
   24678:	beq	245f4 <flatcc_builder_end_table@@Base+0x84>
   2467c:	ldr	r3, [r4, #32]
   24680:	ldr	r2, [r3, #24]
   24684:	str	r2, [r4, #12]
   24688:	ldrh	r2, [r3, #28]
   2468c:	strh	r2, [r4, #8]
   24690:	ldr	r2, [r4, #52]	; 0x34
   24694:	ldr	r1, [r3, #16]
   24698:	add	r2, r2, r1
   2469c:	str	r2, [r4, #4]
   246a0:	ldr	r2, [r4, #76]	; 0x4c
   246a4:	ldr	r3, [r3, #20]
   246a8:	add	r3, r2, r3
   246ac:	str	r3, [r4]
   246b0:	ldr	r2, [r4, #20]
   246b4:	mov	r1, #0
   246b8:	ldr	r0, [r4, #16]
   246bc:	bl	12630 <memset@plt>
   246c0:	ldr	r2, [r4, #32]
   246c4:	ldr	r3, [r2, #8]
   246c8:	str	r3, [r4, #20]
   246cc:	ldr	r0, [r2]
   246d0:	str	r0, [r4, #28]
   246d4:	ldr	r1, [r2, #4]
   246d8:	ldr	r3, [r4, #60]	; 0x3c
   246dc:	add	r3, r3, r0
   246e0:	str	r3, [r4, #16]
   246e4:	ldr	r3, [r4, #64]	; 0x40
   246e8:	sub	r3, r3, r0
   246ec:	cmp	r3, r1
   246f0:	movcs	r3, r1
   246f4:	str	r3, [r4, #24]
   246f8:	str	r1, [r2, #4]
   246fc:	ldrh	r3, [r4, #130]	; 0x82
   24700:	ldrh	r2, [r4, #128]	; 0x80
   24704:	cmp	r2, r3
   24708:	strhcc	r3, [r4, #128]	; 0x80
   2470c:	ldr	r3, [r4, #32]
   24710:	ldrh	r2, [r3, #12]
   24714:	strh	r2, [r4, #130]	; 0x82
   24718:	sub	r3, r3, #36	; 0x24
   2471c:	str	r3, [r4, #32]
   24720:	ldr	r3, [r4, #156]	; 0x9c
   24724:	sub	r3, r3, #1
   24728:	str	r3, [r4, #156]	; 0x9c
   2472c:	b	245f4 <flatcc_builder_end_table@@Base+0x84>
   24730:	strdeq	fp, [r2], -r0

00024734 <flatcc_builder_create_vector@@Base>:
   24734:	strd	r4, [sp, #-16]!
   24738:	str	r6, [sp, #8]
   2473c:	str	lr, [sp, #12]
   24740:	sub	sp, sp, #88	; 0x58
   24744:	mov	r4, r0
   24748:	ldrh	r0, [sp, #104]	; 0x68
   2474c:	ldr	ip, [sp, #108]	; 0x6c
   24750:	cmp	r2, ip
   24754:	bhi	24848 <flatcc_builder_create_vector@@Base+0x114>
   24758:	cmp	r0, #4
   2475c:	movcc	r0, #4
   24760:	ldrh	ip, [r4, #128]	; 0x80
   24764:	cmp	ip, r0
   24768:	strhcc	r0, [r4, #128]	; 0x80
   2476c:	mul	r3, r3, r2
   24770:	str	r2, [sp, #84]	; 0x54
   24774:	ldr	r2, [r4, #136]	; 0x88
   24778:	sub	ip, r2, r3
   2477c:	sub	r0, r0, #1
   24780:	and	r0, r0, ip
   24784:	mov	ip, #4
   24788:	str	ip, [sp, #12]
   2478c:	add	lr, sp, #84	; 0x54
   24790:	str	lr, [sp, #20]
   24794:	str	ip, [sp, #24]
   24798:	mov	ip, #1
   2479c:	str	ip, [sp, #16]
   247a0:	cmp	r3, #0
   247a4:	beq	247c0 <flatcc_builder_create_vector@@Base+0x8c>
   247a8:	add	ip, r3, #4
   247ac:	str	ip, [sp, #12]
   247b0:	str	r1, [sp, #28]
   247b4:	str	r3, [sp, #32]
   247b8:	mov	r3, #2
   247bc:	str	r3, [sp, #16]
   247c0:	cmp	r0, #0
   247c4:	beq	247f8 <flatcc_builder_create_vector@@Base+0xc4>
   247c8:	ldr	r3, [sp, #12]
   247cc:	add	r3, r3, r0
   247d0:	str	r3, [sp, #12]
   247d4:	ldr	r3, [sp, #16]
   247d8:	add	r3, r3, #1
   247dc:	add	r1, sp, #88	; 0x58
   247e0:	add	ip, r1, r3, lsl #3
   247e4:	movw	r1, #46800	; 0xb6d0
   247e8:	movt	r1, #2
   247ec:	str	r1, [ip, #-76]	; 0xffffffb4
   247f0:	str	r0, [ip, #-72]	; 0xffffffb8
   247f4:	str	r3, [sp, #16]
   247f8:	ldr	r3, [sp, #12]
   247fc:	sub	r5, r2, r3
   24800:	cmp	r2, r5
   24804:	ble	24864 <flatcc_builder_create_vector@@Base+0x130>
   24808:	str	r3, [sp]
   2480c:	ldr	r6, [r4, #44]	; 0x2c
   24810:	mov	r3, r5
   24814:	ldr	r2, [sp, #16]
   24818:	add	r1, sp, #20
   2481c:	ldr	r0, [r4, #36]	; 0x24
   24820:	blx	r6
   24824:	cmp	r0, #0
   24828:	bne	24880 <flatcc_builder_create_vector@@Base+0x14c>
   2482c:	str	r5, [r4, #136]	; 0x88
   24830:	mov	r0, r5
   24834:	add	sp, sp, #88	; 0x58
   24838:	ldrd	r4, [sp]
   2483c:	ldr	r6, [sp, #8]
   24840:	add	sp, sp, #12
   24844:	pop	{pc}		; (ldr pc, [sp], #4)
   24848:	ldr	r3, [pc, #76]	; 2489c <flatcc_builder_create_vector@@Base+0x168>
   2484c:	movw	r2, #1365	; 0x555
   24850:	movw	r1, #48672	; 0xbe20
   24854:	movt	r1, #2
   24858:	movw	r0, #49424	; 0xc110
   2485c:	movt	r0, #2
   24860:	bl	12684 <__assert_fail@plt>
   24864:	ldr	r3, [pc, #52]	; 248a0 <flatcc_builder_create_vector@@Base+0x16c>
   24868:	movw	r2, #647	; 0x287
   2486c:	movw	r1, #48672	; 0xbe20
   24870:	movt	r1, #2
   24874:	movw	r0, #48756	; 0xbe74
   24878:	movt	r0, #2
   2487c:	bl	12684 <__assert_fail@plt>
   24880:	ldr	r3, [pc, #24]	; 248a0 <flatcc_builder_create_vector@@Base+0x16c>
   24884:	movw	r2, #651	; 0x28b
   24888:	movw	r1, #48672	; 0xbe20
   2488c:	movt	r1, #2
   24890:	movw	r0, #48756	; 0xbe74
   24894:	movt	r0, #2
   24898:	bl	12684 <__assert_fail@plt>
   2489c:	andeq	fp, r2, ip, lsl #24
   248a0:	andeq	fp, r2, ip, lsl r9

000248a4 <flatcc_builder_end_vector@@Base>:
   248a4:	strd	r4, [sp, #-12]!
   248a8:	str	lr, [sp, #8]
   248ac:	sub	sp, sp, #12
   248b0:	ldr	r1, [r0, #32]
   248b4:	ldrh	r3, [r1, #14]
   248b8:	cmp	r3, #4
   248bc:	bne	24900 <flatcc_builder_end_vector@@Base+0x5c>
   248c0:	mov	r4, r0
   248c4:	ldr	r3, [r1, #16]
   248c8:	ldr	r2, [r1, #20]
   248cc:	ldr	r1, [r1, #24]
   248d0:	str	r1, [sp, #4]
   248d4:	ldrh	r1, [r0, #130]	; 0x82
   248d8:	str	r1, [sp]
   248dc:	ldr	r1, [r0, #16]
   248e0:	bl	24734 <flatcc_builder_create_vector@@Base>
   248e4:	subs	r5, r0, #0
   248e8:	bne	2491c <flatcc_builder_end_vector@@Base+0x78>
   248ec:	mov	r0, r5
   248f0:	add	sp, sp, #12
   248f4:	ldrd	r4, [sp]
   248f8:	add	sp, sp, #8
   248fc:	pop	{pc}		; (ldr pc, [sp], #4)
   24900:	ldr	r3, [pc, #148]	; 2499c <flatcc_builder_end_vector@@Base+0xf8>
   24904:	movw	r2, #1400	; 0x578
   24908:	movw	r1, #48672	; 0xbe20
   2490c:	movt	r1, #2
   24910:	movw	r0, #48984	; 0xbf58
   24914:	movt	r0, #2
   24918:	bl	12684 <__assert_fail@plt>
   2491c:	ldr	r2, [r4, #20]
   24920:	mov	r1, #0
   24924:	ldr	r0, [r4, #16]
   24928:	bl	12630 <memset@plt>
   2492c:	ldr	r2, [r4, #32]
   24930:	ldr	r3, [r2, #8]
   24934:	str	r3, [r4, #20]
   24938:	ldr	r0, [r2]
   2493c:	str	r0, [r4, #28]
   24940:	ldr	r1, [r2, #4]
   24944:	ldr	r3, [r4, #60]	; 0x3c
   24948:	add	r3, r3, r0
   2494c:	str	r3, [r4, #16]
   24950:	ldr	r3, [r4, #64]	; 0x40
   24954:	sub	r3, r3, r0
   24958:	cmp	r3, r1
   2495c:	movcs	r3, r1
   24960:	str	r3, [r4, #24]
   24964:	str	r1, [r2, #4]
   24968:	ldrh	r3, [r4, #130]	; 0x82
   2496c:	ldrh	r2, [r4, #128]	; 0x80
   24970:	cmp	r2, r3
   24974:	strhcc	r3, [r4, #128]	; 0x80
   24978:	ldr	r3, [r4, #32]
   2497c:	ldrh	r2, [r3, #12]
   24980:	strh	r2, [r4, #130]	; 0x82
   24984:	sub	r3, r3, #36	; 0x24
   24988:	str	r3, [r4, #32]
   2498c:	ldr	r3, [r4, #156]	; 0x9c
   24990:	sub	r3, r3, #1
   24994:	str	r3, [r4, #156]	; 0x9c
   24998:	b	248ec <flatcc_builder_end_vector@@Base+0x48>
   2499c:	andeq	fp, r2, ip, lsr #24

000249a0 <flatcc_builder_vector_count@@Base>:
   249a0:	ldr	r3, [r0, #32]
   249a4:	ldr	r0, [r3, #20]
   249a8:	bx	lr

000249ac <flatcc_builder_vector_edit@@Base>:
   249ac:	ldr	r0, [r0, #16]
   249b0:	bx	lr

000249b4 <flatcc_builder_create_offset_vector_direct@@Base>:
   249b4:	str	r4, [sp, #-8]!
   249b8:	str	lr, [sp, #4]
   249bc:	mov	r3, #0
   249c0:	bl	21e10 <flatcc_builder_default_alloc@@Base+0x3b8>
   249c4:	ldr	r4, [sp]
   249c8:	add	sp, sp, #4
   249cc:	pop	{pc}		; (ldr pc, [sp], #4)

000249d0 <flatcc_builder_end_offset_vector@@Base>:
   249d0:	strd	r4, [sp, #-16]!
   249d4:	str	r6, [sp, #8]
   249d8:	str	lr, [sp, #12]
   249dc:	ldr	r3, [r0, #32]
   249e0:	ldrh	r2, [r3, #14]
   249e4:	cmp	r2, #5
   249e8:	bne	24a18 <flatcc_builder_end_offset_vector@@Base+0x48>
   249ec:	mov	r4, r0
   249f0:	ldr	r2, [r3, #20]
   249f4:	ldr	r1, [r0, #16]
   249f8:	bl	249b4 <flatcc_builder_create_offset_vector_direct@@Base>
   249fc:	subs	r5, r0, #0
   24a00:	bne	24a34 <flatcc_builder_end_offset_vector@@Base+0x64>
   24a04:	mov	r0, r5
   24a08:	ldrd	r4, [sp]
   24a0c:	ldr	r6, [sp, #8]
   24a10:	add	sp, sp, #12
   24a14:	pop	{pc}		; (ldr pc, [sp], #4)
   24a18:	ldr	r3, [pc, #148]	; 24ab4 <flatcc_builder_end_offset_vector@@Base+0xe4>
   24a1c:	movw	r2, #1480	; 0x5c8
   24a20:	movw	r1, #48672	; 0xbe20
   24a24:	movt	r1, #2
   24a28:	movw	r0, #49092	; 0xbfc4
   24a2c:	movt	r0, #2
   24a30:	bl	12684 <__assert_fail@plt>
   24a34:	ldr	r2, [r4, #20]
   24a38:	mov	r1, #0
   24a3c:	ldr	r0, [r4, #16]
   24a40:	bl	12630 <memset@plt>
   24a44:	ldr	r2, [r4, #32]
   24a48:	ldr	r3, [r2, #8]
   24a4c:	str	r3, [r4, #20]
   24a50:	ldr	r0, [r2]
   24a54:	str	r0, [r4, #28]
   24a58:	ldr	r1, [r2, #4]
   24a5c:	ldr	r3, [r4, #60]	; 0x3c
   24a60:	add	r3, r3, r0
   24a64:	str	r3, [r4, #16]
   24a68:	ldr	r3, [r4, #64]	; 0x40
   24a6c:	sub	r3, r3, r0
   24a70:	cmp	r3, r1
   24a74:	movcs	r3, r1
   24a78:	str	r3, [r4, #24]
   24a7c:	str	r1, [r2, #4]
   24a80:	ldrh	r3, [r4, #130]	; 0x82
   24a84:	ldrh	r2, [r4, #128]	; 0x80
   24a88:	cmp	r2, r3
   24a8c:	strhcc	r3, [r4, #128]	; 0x80
   24a90:	ldr	r3, [r4, #32]
   24a94:	ldrh	r2, [r3, #12]
   24a98:	strh	r2, [r4, #130]	; 0x82
   24a9c:	sub	r3, r3, #36	; 0x24
   24aa0:	str	r3, [r4, #32]
   24aa4:	ldr	r3, [r4, #156]	; 0x9c
   24aa8:	sub	r3, r3, #1
   24aac:	str	r3, [r4, #156]	; 0x9c
   24ab0:	b	24a04 <flatcc_builder_end_offset_vector@@Base+0x34>
   24ab4:	andeq	fp, r2, r8, asr #24

00024ab8 <flatcc_builder_create_offset_vector@@Base>:
   24ab8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24abc:	strd	r6, [sp, #8]
   24ac0:	str	r8, [sp, #16]
   24ac4:	str	lr, [sp, #20]
   24ac8:	mov	r5, r0
   24acc:	mov	r7, r1
   24ad0:	mov	r6, r2
   24ad4:	bl	23840 <flatcc_builder_start_offset_vector@@Base>
   24ad8:	subs	r4, r0, #0
   24adc:	movne	r4, #0
   24ae0:	beq	24afc <flatcc_builder_create_offset_vector@@Base+0x44>
   24ae4:	mov	r0, r4
   24ae8:	ldrd	r4, [sp]
   24aec:	ldrd	r6, [sp, #8]
   24af0:	ldr	r8, [sp, #16]
   24af4:	add	sp, sp, #20
   24af8:	pop	{pc}		; (ldr pc, [sp], #4)
   24afc:	mov	r1, r6
   24b00:	mov	r0, r5
   24b04:	bl	23144 <flatcc_builder_extend_offset_vector@@Base>
   24b08:	cmp	r0, #0
   24b0c:	beq	24ae4 <flatcc_builder_create_offset_vector@@Base+0x2c>
   24b10:	lsl	r2, r6, #2
   24b14:	mov	r1, r7
   24b18:	bl	12588 <memcpy@plt>
   24b1c:	mov	r0, r5
   24b20:	bl	249d0 <flatcc_builder_end_offset_vector@@Base>
   24b24:	mov	r4, r0
   24b28:	b	24ae4 <flatcc_builder_create_offset_vector@@Base+0x2c>

00024b2c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   24b2c:	strd	r4, [sp, #-16]!
   24b30:	str	r6, [sp, #8]
   24b34:	str	lr, [sp, #12]
   24b38:	mov	r4, r0
   24b3c:	ldr	r2, [r0, #32]
   24b40:	ldrh	r0, [r2, #14]
   24b44:	cmp	r0, #5
   24b48:	bne	24b7c <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   24b4c:	mov	r3, r1
   24b50:	ldr	r2, [r2, #20]
   24b54:	ldr	r1, [r4, #16]
   24b58:	mov	r0, r4
   24b5c:	bl	21e10 <flatcc_builder_default_alloc@@Base+0x3b8>
   24b60:	subs	r5, r0, #0
   24b64:	bne	24b98 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   24b68:	mov	r0, r5
   24b6c:	ldrd	r4, [sp]
   24b70:	ldr	r6, [sp, #8]
   24b74:	add	sp, sp, #12
   24b78:	pop	{pc}		; (ldr pc, [sp], #4)
   24b7c:	ldr	r3, [pc, #148]	; 24c18 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   24b80:	movw	r2, #1493	; 0x5d5
   24b84:	movw	r1, #48672	; 0xbe20
   24b88:	movt	r1, #2
   24b8c:	movw	r0, #49092	; 0xbfc4
   24b90:	movt	r0, #2
   24b94:	bl	12684 <__assert_fail@plt>
   24b98:	ldr	r2, [r4, #20]
   24b9c:	mov	r1, #0
   24ba0:	ldr	r0, [r4, #16]
   24ba4:	bl	12630 <memset@plt>
   24ba8:	ldr	r2, [r4, #32]
   24bac:	ldr	r3, [r2, #8]
   24bb0:	str	r3, [r4, #20]
   24bb4:	ldr	r0, [r2]
   24bb8:	str	r0, [r4, #28]
   24bbc:	ldr	r1, [r2, #4]
   24bc0:	ldr	r3, [r4, #60]	; 0x3c
   24bc4:	add	r3, r3, r0
   24bc8:	str	r3, [r4, #16]
   24bcc:	ldr	r3, [r4, #64]	; 0x40
   24bd0:	sub	r3, r3, r0
   24bd4:	cmp	r3, r1
   24bd8:	movcs	r3, r1
   24bdc:	str	r3, [r4, #24]
   24be0:	str	r1, [r2, #4]
   24be4:	ldrh	r3, [r4, #130]	; 0x82
   24be8:	ldrh	r2, [r4, #128]	; 0x80
   24bec:	cmp	r2, r3
   24bf0:	strhcc	r3, [r4, #128]	; 0x80
   24bf4:	ldr	r3, [r4, #32]
   24bf8:	ldrh	r2, [r3, #12]
   24bfc:	strh	r2, [r4, #130]	; 0x82
   24c00:	sub	r3, r3, #36	; 0x24
   24c04:	str	r3, [r4, #32]
   24c08:	ldr	r3, [r4, #156]	; 0x9c
   24c0c:	sub	r3, r3, #1
   24c10:	str	r3, [r4, #156]	; 0x9c
   24c14:	b	24b68 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   24c18:	andeq	fp, r2, ip, ror #24

00024c1c <flatcc_builder_offset_vector_edit@@Base>:
   24c1c:	ldr	r0, [r0, #16]
   24c20:	bx	lr

00024c24 <flatcc_builder_offset_vector_count@@Base>:
   24c24:	ldr	r3, [r0, #32]
   24c28:	ldr	r0, [r3, #20]
   24c2c:	bx	lr

00024c30 <flatcc_builder_create_union_vector_direct@@Base>:
   24c30:	strd	r4, [sp, #-20]!	; 0xffffffec
   24c34:	strd	r6, [sp, #8]
   24c38:	str	lr, [sp, #16]
   24c3c:	sub	sp, sp, #12
   24c40:	mov	r4, r0
   24c44:	mov	r5, r1
   24c48:	mov	r6, r2
   24c4c:	mov	r1, r3
   24c50:	mov	r3, r2
   24c54:	ldr	r2, [sp, #32]
   24c58:	mov	r0, r5
   24c5c:	bl	21e10 <flatcc_builder_default_alloc@@Base+0x3b8>
   24c60:	subs	r7, r0, #0
   24c64:	bne	24c8c <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   24c68:	mov	r3, #0
   24c6c:	str	r3, [r4]
   24c70:	str	r3, [r4, #4]
   24c74:	mov	r0, r4
   24c78:	add	sp, sp, #12
   24c7c:	ldrd	r4, [sp]
   24c80:	ldrd	r6, [sp, #8]
   24c84:	add	sp, sp, #16
   24c88:	pop	{pc}		; (ldr pc, [sp], #4)
   24c8c:	mvn	r3, #0
   24c90:	str	r3, [sp, #4]
   24c94:	mov	r3, #1
   24c98:	str	r3, [sp]
   24c9c:	ldr	r2, [sp, #32]
   24ca0:	mov	r1, r6
   24ca4:	mov	r0, r5
   24ca8:	bl	24734 <flatcc_builder_create_vector@@Base>
   24cac:	cmp	r0, #0
   24cb0:	moveq	r3, #0
   24cb4:	streq	r3, [r4]
   24cb8:	strne	r0, [r4]
   24cbc:	str	r7, [r4, #4]
   24cc0:	b	24c74 <flatcc_builder_create_union_vector_direct@@Base+0x44>

00024cc4 <flatcc_builder_create_union_vector@@Base>:
   24cc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24cc8:	strd	r6, [sp, #8]
   24ccc:	str	r8, [sp, #16]
   24cd0:	str	lr, [sp, #20]
   24cd4:	sub	sp, sp, #16
   24cd8:	mov	r5, r0
   24cdc:	mov	r4, r1
   24ce0:	mov	r7, r2
   24ce4:	mov	r6, r3
   24ce8:	mov	r0, r1
   24cec:	bl	23840 <flatcc_builder_start_offset_vector@@Base>
   24cf0:	cmp	r0, #0
   24cf4:	beq	24d20 <flatcc_builder_create_union_vector@@Base+0x5c>
   24cf8:	mov	r3, #0
   24cfc:	str	r3, [r5]
   24d00:	str	r3, [r5, #4]
   24d04:	mov	r0, r5
   24d08:	add	sp, sp, #16
   24d0c:	ldrd	r4, [sp]
   24d10:	ldrd	r6, [sp, #8]
   24d14:	ldr	r8, [sp, #16]
   24d18:	add	sp, sp, #20
   24d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   24d20:	mov	r1, r6
   24d24:	mov	r0, r4
   24d28:	bl	23144 <flatcc_builder_extend_offset_vector@@Base>
   24d2c:	cmp	r0, #0
   24d30:	moveq	r3, #0
   24d34:	streq	r3, [r5]
   24d38:	streq	r3, [r5, #4]
   24d3c:	beq	24d04 <flatcc_builder_create_union_vector@@Base+0x40>
   24d40:	ldr	r8, [r4, #20]
   24d44:	add	r1, r6, r8
   24d48:	str	r1, [r4, #20]
   24d4c:	ldr	r3, [r4, #24]
   24d50:	cmp	r1, r3
   24d54:	bcs	24e38 <flatcc_builder_create_union_vector@@Base+0x174>
   24d58:	ldr	r3, [r4, #16]
   24d5c:	adds	r2, r3, r8
   24d60:	beq	24e50 <flatcc_builder_create_union_vector@@Base+0x18c>
   24d64:	cmp	r6, #0
   24d68:	beq	24d98 <flatcc_builder_create_union_vector@@Base+0xd4>
   24d6c:	mov	r1, r7
   24d70:	sub	ip, r2, #1
   24d74:	sub	r0, r3, #4
   24d78:	add	r7, r7, r6, lsl #3
   24d7c:	ldrb	lr, [r1]
   24d80:	strb	lr, [ip, #1]!
   24d84:	ldr	lr, [r1, #4]
   24d88:	str	lr, [r0, #4]!
   24d8c:	add	r1, r1, #8
   24d90:	cmp	r1, r7
   24d94:	bne	24d7c <flatcc_builder_create_union_vector@@Base+0xb8>
   24d98:	str	r6, [sp]
   24d9c:	mov	r1, r4
   24da0:	add	r0, sp, #8
   24da4:	bl	24c30 <flatcc_builder_create_union_vector_direct@@Base>
   24da8:	ldr	r7, [sp, #8]
   24dac:	ldr	r6, [sp, #12]
   24db0:	ldr	r2, [r4, #20]
   24db4:	mov	r1, #0
   24db8:	ldr	r0, [r4, #16]
   24dbc:	bl	12630 <memset@plt>
   24dc0:	ldr	r2, [r4, #32]
   24dc4:	ldr	r3, [r2, #8]
   24dc8:	str	r3, [r4, #20]
   24dcc:	ldr	r0, [r2]
   24dd0:	str	r0, [r4, #28]
   24dd4:	ldr	r1, [r2, #4]
   24dd8:	ldr	r3, [r4, #60]	; 0x3c
   24ddc:	add	r3, r3, r0
   24de0:	str	r3, [r4, #16]
   24de4:	ldr	r3, [r4, #64]	; 0x40
   24de8:	sub	r3, r3, r0
   24dec:	cmp	r3, r1
   24df0:	movcs	r3, r1
   24df4:	str	r3, [r4, #24]
   24df8:	str	r1, [r2, #4]
   24dfc:	ldrh	r3, [r4, #130]	; 0x82
   24e00:	ldrh	r2, [r4, #128]	; 0x80
   24e04:	cmp	r2, r3
   24e08:	strhcc	r3, [r4, #128]	; 0x80
   24e0c:	ldr	r3, [r4, #32]
   24e10:	ldrh	r2, [r3, #12]
   24e14:	strh	r2, [r4, #130]	; 0x82
   24e18:	sub	r3, r3, #36	; 0x24
   24e1c:	str	r3, [r4, #32]
   24e20:	ldr	r3, [r4, #156]	; 0x9c
   24e24:	sub	r3, r3, #1
   24e28:	str	r3, [r4, #156]	; 0x9c
   24e2c:	str	r7, [r5]
   24e30:	str	r6, [r5, #4]
   24e34:	b	24d04 <flatcc_builder_create_union_vector@@Base+0x40>
   24e38:	mvn	r2, #3
   24e3c:	add	r1, r1, #1
   24e40:	mov	r0, r4
   24e44:	bl	219d0 <main@@Base+0x98>
   24e48:	cmp	r0, #0
   24e4c:	beq	24d58 <flatcc_builder_create_union_vector@@Base+0x94>
   24e50:	mov	r3, #0
   24e54:	str	r3, [r5]
   24e58:	str	r3, [r5, #4]
   24e5c:	b	24d04 <flatcc_builder_create_union_vector@@Base+0x40>

00024e60 <flatcc_builder_start_union_vector@@Base>:
   24e60:	str	r4, [sp, #-8]!
   24e64:	str	lr, [sp, #4]
   24e68:	mov	r4, r0
   24e6c:	mov	r1, #4
   24e70:	bl	21ca4 <flatcc_builder_default_alloc@@Base+0x24c>
   24e74:	cmp	r0, #0
   24e78:	bne	24edc <flatcc_builder_start_union_vector@@Base+0x7c>
   24e7c:	ldr	r3, [r4, #32]
   24e80:	mov	r2, #8
   24e84:	str	r2, [r3, #16]
   24e88:	ldr	r3, [r4, #32]
   24e8c:	mov	r2, #0
   24e90:	str	r2, [r3, #20]
   24e94:	ldr	r3, [r4, #32]
   24e98:	mov	r2, #7
   24e9c:	strh	r2, [r3, #14]
   24ea0:	ldr	r1, [r4, #28]
   24ea4:	ldr	r2, [r4, #60]	; 0x3c
   24ea8:	add	r2, r2, r1
   24eac:	str	r2, [r4, #16]
   24eb0:	ldr	r3, [r4, #64]	; 0x40
   24eb4:	sub	r3, r3, r1
   24eb8:	cmn	r3, #4
   24ebc:	mvnhi	r3, #3
   24ec0:	str	r3, [r4, #24]
   24ec4:	ldr	r3, [r4, #32]
   24ec8:	mvn	r2, #3
   24ecc:	str	r2, [r3, #4]
   24ed0:	ldr	r4, [sp]
   24ed4:	add	sp, sp, #4
   24ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   24edc:	mvn	r0, #0
   24ee0:	b	24ed0 <flatcc_builder_start_union_vector@@Base+0x70>

00024ee4 <flatcc_builder_end_union_vector@@Base>:
   24ee4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24ee8:	strd	r6, [sp, #8]
   24eec:	str	r8, [sp, #16]
   24ef0:	str	lr, [sp, #20]
   24ef4:	sub	sp, sp, #16
   24ef8:	ldr	r3, [r1, #32]
   24efc:	ldrh	r2, [r3, #14]
   24f00:	cmp	r2, #7
   24f04:	bne	2502c <flatcc_builder_end_union_vector@@Base+0x148>
   24f08:	mov	r6, r0
   24f0c:	mov	r4, r1
   24f10:	ldr	r5, [r3, #20]
   24f14:	ldr	r8, [r1, #20]
   24f18:	add	r1, r5, r5, lsl #2
   24f1c:	add	r1, r1, r8
   24f20:	str	r1, [r4, #20]
   24f24:	ldr	r3, [r4, #24]
   24f28:	cmp	r1, r3
   24f2c:	bcs	25048 <flatcc_builder_end_union_vector@@Base+0x164>
   24f30:	ldr	r7, [r4, #16]
   24f34:	adds	r3, r7, r8
   24f38:	beq	25060 <flatcc_builder_end_union_vector@@Base+0x17c>
   24f3c:	add	r2, r3, r5, lsl #2
   24f40:	cmp	r5, #0
   24f44:	beq	24f74 <flatcc_builder_end_union_vector@@Base+0x90>
   24f48:	mov	r1, r7
   24f4c:	sub	ip, r2, #1
   24f50:	sub	r0, r3, #4
   24f54:	add	r7, r7, r5, lsl #3
   24f58:	ldrb	lr, [r1]
   24f5c:	strb	lr, [ip, #1]!
   24f60:	ldr	lr, [r1, #4]
   24f64:	str	lr, [r0, #4]!
   24f68:	add	r1, r1, #8
   24f6c:	cmp	r1, r7
   24f70:	bne	24f58 <flatcc_builder_end_union_vector@@Base+0x74>
   24f74:	str	r5, [sp]
   24f78:	mov	r1, r4
   24f7c:	add	r0, sp, #8
   24f80:	bl	24c30 <flatcc_builder_create_union_vector_direct@@Base>
   24f84:	ldr	r7, [sp, #8]
   24f88:	ldr	r5, [sp, #12]
   24f8c:	ldr	r2, [r4, #20]
   24f90:	mov	r1, #0
   24f94:	ldr	r0, [r4, #16]
   24f98:	bl	12630 <memset@plt>
   24f9c:	ldr	r2, [r4, #32]
   24fa0:	ldr	r3, [r2, #8]
   24fa4:	str	r3, [r4, #20]
   24fa8:	ldr	r0, [r2]
   24fac:	str	r0, [r4, #28]
   24fb0:	ldr	r1, [r2, #4]
   24fb4:	ldr	r3, [r4, #60]	; 0x3c
   24fb8:	add	r3, r3, r0
   24fbc:	str	r3, [r4, #16]
   24fc0:	ldr	r3, [r4, #64]	; 0x40
   24fc4:	sub	r3, r3, r0
   24fc8:	cmp	r3, r1
   24fcc:	movcs	r3, r1
   24fd0:	str	r3, [r4, #24]
   24fd4:	str	r1, [r2, #4]
   24fd8:	ldrh	r3, [r4, #130]	; 0x82
   24fdc:	ldrh	r2, [r4, #128]	; 0x80
   24fe0:	cmp	r2, r3
   24fe4:	strhcc	r3, [r4, #128]	; 0x80
   24fe8:	ldr	r3, [r4, #32]
   24fec:	ldrh	r2, [r3, #12]
   24ff0:	strh	r2, [r4, #130]	; 0x82
   24ff4:	sub	r3, r3, #36	; 0x24
   24ff8:	str	r3, [r4, #32]
   24ffc:	ldr	r3, [r4, #156]	; 0x9c
   25000:	sub	r3, r3, #1
   25004:	str	r3, [r4, #156]	; 0x9c
   25008:	str	r7, [r6]
   2500c:	str	r5, [r6, #4]
   25010:	mov	r0, r6
   25014:	add	sp, sp, #16
   25018:	ldrd	r4, [sp]
   2501c:	ldrd	r6, [sp, #8]
   25020:	ldr	r8, [sp, #16]
   25024:	add	sp, sp, #20
   25028:	pop	{pc}		; (ldr pc, [sp], #4)
   2502c:	ldr	r3, [pc, #60]	; 25070 <flatcc_builder_end_union_vector@@Base+0x18c>
   25030:	movw	r2, #1617	; 0x651
   25034:	movw	r1, #48672	; 0xbe20
   25038:	movt	r1, #2
   2503c:	movw	r0, #49444	; 0xc124
   25040:	movt	r0, #2
   25044:	bl	12684 <__assert_fail@plt>
   25048:	mvn	r2, #3
   2504c:	add	r1, r1, #1
   25050:	mov	r0, r4
   25054:	bl	219d0 <main@@Base+0x98>
   25058:	cmp	r0, #0
   2505c:	beq	24f30 <flatcc_builder_end_union_vector@@Base+0x4c>
   25060:	mov	r3, #0
   25064:	str	r3, [r6]
   25068:	str	r3, [r6, #4]
   2506c:	b	25010 <flatcc_builder_end_union_vector@@Base+0x12c>
   25070:	muleq	r2, r8, ip

00025074 <flatcc_builder_union_vector_edit@@Base>:
   25074:	ldr	r0, [r0, #16]
   25078:	bx	lr

0002507c <flatcc_builder_union_vector_count@@Base>:
   2507c:	ldr	r3, [r0, #32]
   25080:	ldr	r0, [r3, #20]
   25084:	bx	lr

00025088 <flatcc_builder_extend_union_vector@@Base>:
   25088:	strd	r4, [sp, #-16]!
   2508c:	str	r6, [sp, #8]
   25090:	str	lr, [sp, #12]
   25094:	mov	r4, r0
   25098:	ldr	r2, [r0, #32]
   2509c:	ldr	r3, [r2, #20]
   250a0:	adds	r3, r1, r3
   250a4:	movcs	ip, #1
   250a8:	movcc	ip, #0
   250ac:	cmn	r3, #-536870911	; 0xe0000001
   250b0:	movls	r0, #0
   250b4:	movhi	r0, #1
   250b8:	orrs	r0, ip, r0
   250bc:	bne	250f4 <flatcc_builder_extend_union_vector@@Base+0x6c>
   250c0:	str	r3, [r2, #20]
   250c4:	ldr	r5, [r4, #20]
   250c8:	add	r1, r5, r1, lsl #3
   250cc:	str	r1, [r4, #20]
   250d0:	ldr	r3, [r4, #24]
   250d4:	cmp	r1, r3
   250d8:	bcs	25110 <flatcc_builder_extend_union_vector@@Base+0x88>
   250dc:	ldr	r0, [r4, #16]
   250e0:	add	r0, r0, r5
   250e4:	ldrd	r4, [sp]
   250e8:	ldr	r6, [sp, #8]
   250ec:	add	sp, sp, #12
   250f0:	pop	{pc}		; (ldr pc, [sp], #4)
   250f4:	ldr	r3, [pc, #52]	; 25130 <flatcc_builder_extend_union_vector@@Base+0xa8>
   250f8:	mov	r2, #892	; 0x37c
   250fc:	movw	r1, #48672	; 0xbe20
   25100:	movt	r1, #2
   25104:	movw	r0, #48956	; 0xbf3c
   25108:	movt	r0, #2
   2510c:	bl	12684 <__assert_fail@plt>
   25110:	mvn	r2, #3
   25114:	add	r1, r1, #1
   25118:	mov	r0, r4
   2511c:	bl	219d0 <main@@Base+0x98>
   25120:	cmp	r0, #0
   25124:	movne	r0, #0
   25128:	beq	250dc <flatcc_builder_extend_union_vector@@Base+0x54>
   2512c:	b	250e4 <flatcc_builder_extend_union_vector@@Base+0x5c>
   25130:	andeq	fp, r2, r0, lsl #20

00025134 <flatcc_builder_truncate_union_vector@@Base>:
   25134:	str	r4, [sp, #-8]!
   25138:	str	lr, [sp, #4]
   2513c:	ldr	ip, [r0, #32]
   25140:	ldrh	r3, [ip, #14]
   25144:	cmp	r3, #7
   25148:	bne	25198 <flatcc_builder_truncate_union_vector@@Base+0x64>
   2514c:	ldr	r3, [ip, #20]
   25150:	cmp	r3, r1
   25154:	bcc	251b4 <flatcc_builder_truncate_union_vector@@Base+0x80>
   25158:	sub	r3, r3, r1
   2515c:	str	r3, [ip, #20]
   25160:	ldr	r3, [r0, #32]
   25164:	ldr	r2, [r3, #16]
   25168:	mul	r2, r2, r1
   2516c:	ldr	r3, [r0, #20]
   25170:	sub	r3, r3, r2
   25174:	str	r3, [r0, #20]
   25178:	ldr	r0, [r0, #16]
   2517c:	mov	r1, #0
   25180:	add	r0, r0, r3
   25184:	bl	12630 <memset@plt>
   25188:	mov	r0, #0
   2518c:	ldr	r4, [sp]
   25190:	add	sp, sp, #4
   25194:	pop	{pc}		; (ldr pc, [sp], #4)
   25198:	ldr	r3, [pc, #48]	; 251d0 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   2519c:	movw	r2, #1665	; 0x681
   251a0:	movw	r1, #48672	; 0xbe20
   251a4:	movt	r1, #2
   251a8:	movw	r0, #49444	; 0xc124
   251ac:	movt	r0, #2
   251b0:	bl	12684 <__assert_fail@plt>
   251b4:	ldr	r3, [pc, #20]	; 251d0 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   251b8:	movw	r2, #1666	; 0x682
   251bc:	movw	r1, #48672	; 0xbe20
   251c0:	movt	r1, #2
   251c4:	movw	r0, #49224	; 0xc048
   251c8:	movt	r0, #2
   251cc:	bl	12684 <__assert_fail@plt>
   251d0:			; <UNDEFINED> instruction: 0x0002bcb8

000251d4 <flatcc_builder_union_vector_push@@Base>:
   251d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   251d8:	strd	r6, [sp, #8]
   251dc:	str	lr, [sp, #16]
   251e0:	sub	sp, sp, #12
   251e4:	add	r3, sp, #8
   251e8:	stmdb	r3, {r1, r2}
   251ec:	ldr	r2, [r0, #32]
   251f0:	ldrh	r3, [r2, #14]
   251f4:	cmp	r3, #7
   251f8:	bne	25254 <flatcc_builder_union_vector_push@@Base+0x80>
   251fc:	mov	r4, r0
   25200:	ldr	r3, [r2, #20]
   25204:	cmn	r3, #-536870911	; 0xe0000001
   25208:	moveq	r0, #0
   2520c:	beq	25240 <flatcc_builder_union_vector_push@@Base+0x6c>
   25210:	add	r3, r3, #1
   25214:	str	r3, [r2, #20]
   25218:	ldr	r5, [r4, #20]
   2521c:	add	r3, r5, #8
   25220:	str	r3, [r4, #20]
   25224:	ldr	r2, [r4, #24]
   25228:	cmp	r3, r2
   2522c:	bcs	25270 <flatcc_builder_union_vector_push@@Base+0x9c>
   25230:	ldr	r3, [r4, #16]
   25234:	adds	r0, r3, r5
   25238:	ldrdne	r6, [sp]
   2523c:	strdne	r6, [r3, r5]
   25240:	add	sp, sp, #12
   25244:	ldrd	r4, [sp]
   25248:	ldrd	r6, [sp, #8]
   2524c:	add	sp, sp, #16
   25250:	pop	{pc}		; (ldr pc, [sp], #4)
   25254:	ldr	r3, [pc, #52]	; 25290 <flatcc_builder_union_vector_push@@Base+0xbc>
   25258:	movw	r2, #1677	; 0x68d
   2525c:	movw	r1, #48672	; 0xbe20
   25260:	movt	r1, #2
   25264:	movw	r0, #49444	; 0xc124
   25268:	movt	r0, #2
   2526c:	bl	12684 <__assert_fail@plt>
   25270:	mvn	r2, #3
   25274:	add	r1, r5, #9
   25278:	mov	r0, r4
   2527c:	bl	219d0 <main@@Base+0x98>
   25280:	cmp	r0, #0
   25284:	movne	r0, #0
   25288:	beq	25230 <flatcc_builder_union_vector_push@@Base+0x5c>
   2528c:	b	25240 <flatcc_builder_union_vector_push@@Base+0x6c>
   25290:	andeq	fp, r2, r0, ror #25

00025294 <flatcc_builder_append_union_vector@@Base>:
   25294:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25298:	strd	r6, [sp, #8]
   2529c:	str	r8, [sp, #16]
   252a0:	str	lr, [sp, #20]
   252a4:	mov	r6, r1
   252a8:	ldr	r1, [r0, #32]
   252ac:	ldrh	r3, [r1, #14]
   252b0:	cmp	r3, #7
   252b4:	bne	25334 <flatcc_builder_append_union_vector@@Base+0xa0>
   252b8:	mov	r5, r0
   252bc:	ldr	r3, [r1, #20]
   252c0:	adds	r3, r2, r3
   252c4:	movcs	ip, #1
   252c8:	movcc	ip, #0
   252cc:	cmn	r3, #-536870911	; 0xe0000001
   252d0:	movls	r0, #0
   252d4:	movhi	r0, #1
   252d8:	orrs	r0, ip, r0
   252dc:	bne	25350 <flatcc_builder_append_union_vector@@Base+0xbc>
   252e0:	str	r3, [r1, #20]
   252e4:	lsl	r4, r2, #3
   252e8:	ldr	r7, [r5, #20]
   252ec:	add	r1, r4, r7
   252f0:	str	r1, [r5, #20]
   252f4:	ldr	r3, [r5, #24]
   252f8:	cmp	r1, r3
   252fc:	bcs	2536c <flatcc_builder_append_union_vector@@Base+0xd8>
   25300:	ldr	r5, [r5, #16]
   25304:	adds	r5, r5, r7
   25308:	beq	2531c <flatcc_builder_append_union_vector@@Base+0x88>
   2530c:	mov	r2, r4
   25310:	mov	r1, r6
   25314:	mov	r0, r5
   25318:	bl	12588 <memcpy@plt>
   2531c:	mov	r0, r5
   25320:	ldrd	r4, [sp]
   25324:	ldrd	r6, [sp, #8]
   25328:	ldr	r8, [sp, #16]
   2532c:	add	sp, sp, #20
   25330:	pop	{pc}		; (ldr pc, [sp], #4)
   25334:	ldr	r3, [pc, #80]	; 2538c <flatcc_builder_append_union_vector@@Base+0xf8>
   25338:	movw	r2, #1692	; 0x69c
   2533c:	movw	r1, #48672	; 0xbe20
   25340:	movt	r1, #2
   25344:	movw	r0, #49444	; 0xc124
   25348:	movt	r0, #2
   2534c:	bl	12684 <__assert_fail@plt>
   25350:	ldr	r3, [pc, #56]	; 25390 <flatcc_builder_append_union_vector@@Base+0xfc>
   25354:	mov	r2, #892	; 0x37c
   25358:	movw	r1, #48672	; 0xbe20
   2535c:	movt	r1, #2
   25360:	movw	r0, #48956	; 0xbf3c
   25364:	movt	r0, #2
   25368:	bl	12684 <__assert_fail@plt>
   2536c:	mvn	r2, #3
   25370:	add	r1, r1, #1
   25374:	mov	r0, r5
   25378:	bl	219d0 <main@@Base+0x98>
   2537c:	cmp	r0, #0
   25380:	movne	r5, #0
   25384:	beq	25300 <flatcc_builder_append_union_vector@@Base+0x6c>
   25388:	b	2531c <flatcc_builder_append_union_vector@@Base+0x88>
   2538c:	andeq	fp, r2, r4, lsl #26
   25390:	andeq	fp, r2, r0, lsl #20

00025394 <flatcc_builder_create_string@@Base>:
   25394:	strd	r4, [sp, #-16]!
   25398:	str	r6, [sp, #8]
   2539c:	str	lr, [sp, #12]
   253a0:	sub	sp, sp, #88	; 0x58
   253a4:	mov	r4, r0
   253a8:	str	r2, [sp, #84]	; 0x54
   253ac:	ldr	r0, [r0, #136]	; 0x88
   253b0:	sub	r3, r0, r2
   253b4:	sub	r3, r3, #1
   253b8:	and	r3, r3, #3
   253bc:	add	r3, r3, #1
   253c0:	mov	ip, #4
   253c4:	str	ip, [sp, #12]
   253c8:	add	lr, sp, #84	; 0x54
   253cc:	str	lr, [sp, #20]
   253d0:	str	ip, [sp, #24]
   253d4:	mov	ip, #1
   253d8:	str	ip, [sp, #16]
   253dc:	cmp	r2, #0
   253e0:	beq	253fc <flatcc_builder_create_string@@Base+0x68>
   253e4:	add	ip, r2, #4
   253e8:	str	ip, [sp, #12]
   253ec:	str	r1, [sp, #28]
   253f0:	str	r2, [sp, #32]
   253f4:	mov	r2, #2
   253f8:	str	r2, [sp, #16]
   253fc:	ldr	r1, [sp, #12]
   25400:	add	r1, r3, r1
   25404:	str	r1, [sp, #12]
   25408:	ldr	r2, [sp, #16]
   2540c:	add	r2, r2, #1
   25410:	add	ip, sp, #88	; 0x58
   25414:	add	lr, ip, r2, lsl #3
   25418:	movw	ip, #46800	; 0xb6d0
   2541c:	movt	ip, #2
   25420:	str	ip, [lr, #-76]	; 0xffffffb4
   25424:	str	r3, [lr, #-72]	; 0xffffffb8
   25428:	str	r2, [sp, #16]
   2542c:	sub	r5, r0, r1
   25430:	cmp	r0, r5
   25434:	ble	25474 <flatcc_builder_create_string@@Base+0xe0>
   25438:	str	r1, [sp]
   2543c:	ldr	r6, [r4, #44]	; 0x2c
   25440:	mov	r3, r5
   25444:	add	r1, sp, #20
   25448:	ldr	r0, [r4, #36]	; 0x24
   2544c:	blx	r6
   25450:	cmp	r0, #0
   25454:	bne	25490 <flatcc_builder_create_string@@Base+0xfc>
   25458:	str	r5, [r4, #136]	; 0x88
   2545c:	mov	r0, r5
   25460:	add	sp, sp, #88	; 0x58
   25464:	ldrd	r4, [sp]
   25468:	ldr	r6, [sp, #8]
   2546c:	add	sp, sp, #12
   25470:	pop	{pc}		; (ldr pc, [sp], #4)
   25474:	add	r3, ip, #588	; 0x24c
   25478:	movw	r2, #647	; 0x287
   2547c:	movw	r1, #48672	; 0xbe20
   25480:	movt	r1, #2
   25484:	movw	r0, #48756	; 0xbe74
   25488:	movt	r0, #2
   2548c:	bl	12684 <__assert_fail@plt>
   25490:	ldr	r3, [pc, #20]	; 254ac <flatcc_builder_create_string@@Base+0x118>
   25494:	movw	r2, #651	; 0x28b
   25498:	movw	r1, #48672	; 0xbe20
   2549c:	movt	r1, #2
   254a0:	movw	r0, #48756	; 0xbe74
   254a4:	movt	r0, #2
   254a8:	bl	12684 <__assert_fail@plt>
   254ac:	andeq	fp, r2, ip, lsl r9

000254b0 <flatcc_builder_create_string_str@@Base>:
   254b0:	strd	r4, [sp, #-16]!
   254b4:	str	r6, [sp, #8]
   254b8:	str	lr, [sp, #12]
   254bc:	mov	r5, r0
   254c0:	mov	r4, r1
   254c4:	mov	r0, r1
   254c8:	bl	1260c <strlen@plt>
   254cc:	mov	r2, r0
   254d0:	mov	r1, r4
   254d4:	mov	r0, r5
   254d8:	bl	25394 <flatcc_builder_create_string@@Base>
   254dc:	ldrd	r4, [sp]
   254e0:	ldr	r6, [sp, #8]
   254e4:	add	sp, sp, #12
   254e8:	pop	{pc}		; (ldr pc, [sp], #4)

000254ec <flatcc_builder_create_string_strn@@Base>:
   254ec:	strd	r4, [sp, #-16]!
   254f0:	str	r6, [sp, #8]
   254f4:	str	lr, [sp, #12]
   254f8:	mov	r6, r0
   254fc:	mov	r4, r1
   25500:	mov	r5, r2
   25504:	mov	r1, #0
   25508:	mov	r0, r4
   2550c:	bl	12648 <memchr@plt>
   25510:	cmp	r0, #0
   25514:	subne	r5, r0, r4
   25518:	mov	r2, r5
   2551c:	mov	r1, r4
   25520:	mov	r0, r6
   25524:	bl	25394 <flatcc_builder_create_string@@Base>
   25528:	ldrd	r4, [sp]
   2552c:	ldr	r6, [sp, #8]
   25530:	add	sp, sp, #12
   25534:	pop	{pc}		; (ldr pc, [sp], #4)

00025538 <flatcc_builder_end_string@@Base>:
   25538:	strd	r4, [sp, #-16]!
   2553c:	str	r6, [sp, #8]
   25540:	str	lr, [sp, #12]
   25544:	ldr	r3, [r0, #32]
   25548:	ldrh	r2, [r3, #14]
   2554c:	cmp	r2, #6
   25550:	bne	2558c <flatcc_builder_end_string@@Base+0x54>
   25554:	mov	r4, r0
   25558:	ldr	r2, [r0, #20]
   2555c:	ldr	r3, [r3, #20]
   25560:	cmp	r3, r2
   25564:	bne	255a8 <flatcc_builder_end_string@@Base+0x70>
   25568:	ldr	r1, [r0, #16]
   2556c:	bl	25394 <flatcc_builder_create_string@@Base>
   25570:	subs	r5, r0, #0
   25574:	bne	255c4 <flatcc_builder_end_string@@Base+0x8c>
   25578:	mov	r0, r5
   2557c:	ldrd	r4, [sp]
   25580:	ldr	r6, [sp, #8]
   25584:	add	sp, sp, #12
   25588:	pop	{pc}		; (ldr pc, [sp], #4)
   2558c:	ldr	r3, [pc, #176]	; 25644 <flatcc_builder_end_string@@Base+0x10c>
   25590:	movw	r2, #1732	; 0x6c4
   25594:	movw	r1, #48672	; 0xbe20
   25598:	movt	r1, #2
   2559c:	movw	r0, #49144	; 0xbff8
   255a0:	movt	r0, #2
   255a4:	bl	12684 <__assert_fail@plt>
   255a8:	ldr	r3, [pc, #148]	; 25644 <flatcc_builder_end_string@@Base+0x10c>
   255ac:	movw	r2, #1733	; 0x6c5
   255b0:	movw	r1, #48672	; 0xbe20
   255b4:	movt	r1, #2
   255b8:	movw	r0, #49496	; 0xc158
   255bc:	movt	r0, #2
   255c0:	bl	12684 <__assert_fail@plt>
   255c4:	ldr	r2, [r4, #20]
   255c8:	mov	r1, #0
   255cc:	ldr	r0, [r4, #16]
   255d0:	bl	12630 <memset@plt>
   255d4:	ldr	r2, [r4, #32]
   255d8:	ldr	r3, [r2, #8]
   255dc:	str	r3, [r4, #20]
   255e0:	ldr	r0, [r2]
   255e4:	str	r0, [r4, #28]
   255e8:	ldr	r1, [r2, #4]
   255ec:	ldr	r3, [r4, #60]	; 0x3c
   255f0:	add	r3, r3, r0
   255f4:	str	r3, [r4, #16]
   255f8:	ldr	r3, [r4, #64]	; 0x40
   255fc:	sub	r3, r3, r0
   25600:	cmp	r3, r1
   25604:	movcs	r3, r1
   25608:	str	r3, [r4, #24]
   2560c:	str	r1, [r2, #4]
   25610:	ldrh	r3, [r4, #130]	; 0x82
   25614:	ldrh	r2, [r4, #128]	; 0x80
   25618:	cmp	r2, r3
   2561c:	strhcc	r3, [r4, #128]	; 0x80
   25620:	ldr	r3, [r4, #32]
   25624:	ldrh	r2, [r3, #12]
   25628:	strh	r2, [r4, #130]	; 0x82
   2562c:	sub	r3, r3, #36	; 0x24
   25630:	str	r3, [r4, #32]
   25634:	ldr	r3, [r4, #156]	; 0x9c
   25638:	sub	r3, r3, #1
   2563c:	str	r3, [r4, #156]	; 0x9c
   25640:	b	25578 <flatcc_builder_end_string@@Base+0x40>
   25644:	andeq	fp, r2, r8, lsr #26

00025648 <flatcc_builder_string_edit@@Base>:
   25648:	ldr	r0, [r0, #16]
   2564c:	bx	lr

00025650 <flatcc_builder_string_len@@Base>:
   25650:	ldr	r3, [r0, #32]
   25654:	ldr	r0, [r3, #20]
   25658:	bx	lr

0002565c <flatcc_builder_table_add@@Base>:
   2565c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25660:	strd	r6, [sp, #8]
   25664:	str	r8, [sp, #16]
   25668:	str	lr, [sp, #20]
   2566c:	mov	r5, r1
   25670:	ldr	r1, [r0, #32]
   25674:	ldrh	r1, [r1, #14]
   25678:	cmp	r1, #3
   2567c:	bne	2573c <flatcc_builder_table_add@@Base+0xe0>
   25680:	mov	r4, r0
   25684:	movw	r1, #32764	; 0x7ffc
   25688:	cmp	r5, r1
   2568c:	bhi	25758 <flatcc_builder_table_add@@Base+0xfc>
   25690:	ldrh	r1, [r0, #130]	; 0x82
   25694:	cmp	r1, r3
   25698:	strhcc	r3, [r0, #130]	; 0x82
   2569c:	ldr	r0, [r0, #4]
   256a0:	lsl	r1, r5, #1
   256a4:	ldrh	r1, [r0, r1]
   256a8:	cmp	r1, #0
   256ac:	bne	25774 <flatcc_builder_table_add@@Base+0x118>
   256b0:	ldr	r0, [r4, #12]
   256b4:	eor	r0, r0, r5
   256b8:	movw	r1, #31153	; 0x79b1
   256bc:	movt	r1, #40503	; 0x9e37
   256c0:	mul	r0, r1, r0
   256c4:	eor	r0, r0, r2
   256c8:	mul	r0, r1, r0
   256cc:	str	r0, [r4, #12]
   256d0:	uxth	r7, r5
   256d4:	sub	r6, r3, #1
   256d8:	ldr	r0, [r4, #20]
   256dc:	add	r6, r6, r0
   256e0:	rsb	r3, r3, #0
   256e4:	and	r6, r6, r3
   256e8:	add	r1, r2, r6
   256ec:	str	r1, [r4, #20]
   256f0:	ldr	r3, [r4, #24]
   256f4:	cmp	r1, r3
   256f8:	bcs	25790 <flatcc_builder_table_add@@Base+0x134>
   256fc:	uxth	r5, r5
   25700:	ldr	r3, [r4, #4]
   25704:	lsl	r5, r5, #1
   25708:	add	r2, r6, #4
   2570c:	strh	r2, [r3, r5]
   25710:	ldrh	r3, [r4, #8]
   25714:	cmp	r3, r7
   25718:	addls	r7, r7, #1
   2571c:	strhls	r7, [r4, #8]
   25720:	ldr	r0, [r4, #16]
   25724:	add	r0, r0, r6
   25728:	ldrd	r4, [sp]
   2572c:	ldrd	r6, [sp, #8]
   25730:	ldr	r8, [sp, #16]
   25734:	add	sp, sp, #20
   25738:	pop	{pc}		; (ldr pc, [sp], #4)
   2573c:	ldr	r3, [pc, #108]	; 257b0 <flatcc_builder_table_add@@Base+0x154>
   25740:	movw	r2, #1773	; 0x6ed
   25744:	movw	r1, #48672	; 0xbe20
   25748:	movt	r1, #2
   2574c:	movw	r0, #49380	; 0xc0e4
   25750:	movt	r0, #2
   25754:	bl	12684 <__assert_fail@plt>
   25758:	ldr	r3, [pc, #80]	; 257b0 <flatcc_builder_table_add@@Base+0x154>
   2575c:	movw	r2, #1774	; 0x6ee
   25760:	movw	r1, #48672	; 0xbe20
   25764:	movt	r1, #2
   25768:	movw	r0, #49532	; 0xc17c
   2576c:	movt	r0, #2
   25770:	bl	12684 <__assert_fail@plt>
   25774:	ldr	r3, [pc, #52]	; 257b0 <flatcc_builder_table_add@@Base+0x154>
   25778:	movw	r2, #1784	; 0x6f8
   2577c:	movw	r1, #48672	; 0xbe20
   25780:	movt	r1, #2
   25784:	movw	r0, #48756	; 0xbe74
   25788:	movt	r0, #2
   2578c:	bl	12684 <__assert_fail@plt>
   25790:	movw	r2, #65532	; 0xfffc
   25794:	add	r1, r1, #1
   25798:	mov	r0, r4
   2579c:	bl	219d0 <main@@Base+0x98>
   257a0:	cmp	r0, #0
   257a4:	movne	r0, #0
   257a8:	beq	256fc <flatcc_builder_table_add@@Base+0xa0>
   257ac:	b	25728 <flatcc_builder_table_add@@Base+0xcc>
   257b0:	andeq	fp, r2, r4, asr #26

000257b4 <flatcc_builder_table_edit@@Base>:
   257b4:	ldr	r2, [r0, #32]
   257b8:	ldrh	r2, [r2, #14]
   257bc:	cmp	r2, #3
   257c0:	bne	257d8 <flatcc_builder_table_edit@@Base+0x24>
   257c4:	ldr	r3, [r0, #20]
   257c8:	sub	r3, r3, r1
   257cc:	ldr	r0, [r0, #16]
   257d0:	add	r0, r0, r3
   257d4:	bx	lr
   257d8:	str	r4, [sp, #-8]!
   257dc:	str	lr, [sp, #4]
   257e0:	ldr	r3, [pc, #20]	; 257fc <flatcc_builder_table_edit@@Base+0x48>
   257e4:	movw	r2, #1794	; 0x702
   257e8:	movw	r1, #48672	; 0xbe20
   257ec:	movt	r1, #2
   257f0:	movw	r0, #49380	; 0xc0e4
   257f4:	movt	r0, #2
   257f8:	bl	12684 <__assert_fail@plt>
   257fc:	andeq	fp, r2, r0, ror #26

00025800 <flatcc_builder_table_add_copy@@Base>:
   25800:	strd	r4, [sp, #-16]!
   25804:	str	r6, [sp, #8]
   25808:	str	lr, [sp, #12]
   2580c:	mov	r6, r2
   25810:	mov	r5, r3
   25814:	ldrh	r3, [sp, #16]
   25818:	mov	r2, r5
   2581c:	bl	2565c <flatcc_builder_table_add@@Base>
   25820:	subs	r4, r0, #0
   25824:	beq	25838 <flatcc_builder_table_add_copy@@Base+0x38>
   25828:	mov	r2, r5
   2582c:	mov	r1, r6
   25830:	mov	r0, r4
   25834:	bl	12588 <memcpy@plt>
   25838:	mov	r0, r4
   2583c:	ldrd	r4, [sp]
   25840:	ldr	r6, [sp, #8]
   25844:	add	sp, sp, #12
   25848:	pop	{pc}		; (ldr pc, [sp], #4)

0002584c <flatcc_builder_table_add_offset@@Base>:
   2584c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25850:	strd	r6, [sp, #8]
   25854:	str	r8, [sp, #16]
   25858:	str	lr, [sp, #20]
   2585c:	ldr	r3, [r0, #32]
   25860:	ldrh	r3, [r3, #14]
   25864:	cmp	r3, #3
   25868:	bne	2592c <flatcc_builder_table_add_offset@@Base+0xe0>
   2586c:	mov	r4, r0
   25870:	mov	r5, r1
   25874:	movw	r3, #32764	; 0x7ffc
   25878:	cmp	r1, r3
   2587c:	bhi	25948 <flatcc_builder_table_add_offset@@Base+0xfc>
   25880:	ldr	r2, [r0, #4]
   25884:	lsl	r3, r1, #1
   25888:	ldrh	r3, [r2, r3]
   2588c:	cmp	r3, #0
   25890:	bne	25964 <flatcc_builder_table_add_offset@@Base+0x118>
   25894:	ldr	r3, [r0, #12]
   25898:	eor	r3, r3, r1
   2589c:	movw	r2, #31153	; 0x79b1
   258a0:	movt	r2, #40503	; 0x9e37
   258a4:	mul	r3, r2, r3
   258a8:	eor	r3, r3, #4
   258ac:	mul	r3, r2, r3
   258b0:	str	r3, [r0, #12]
   258b4:	uxth	r7, r1
   258b8:	ldr	r6, [r0, #20]
   258bc:	add	r6, r6, #3
   258c0:	bic	r6, r6, #3
   258c4:	add	r1, r6, #4
   258c8:	str	r1, [r0, #20]
   258cc:	ldr	r3, [r0, #24]
   258d0:	cmp	r1, r3
   258d4:	bhi	25980 <flatcc_builder_table_add_offset@@Base+0x134>
   258d8:	uxth	r2, r6
   258dc:	uxth	r5, r5
   258e0:	ldr	r3, [r4, #4]
   258e4:	lsl	r5, r5, #1
   258e8:	add	r1, r2, #4
   258ec:	strh	r1, [r3, r5]
   258f0:	ldrh	r3, [r4, #8]
   258f4:	cmp	r3, r7
   258f8:	addls	r7, r7, #1
   258fc:	strhls	r7, [r4, #8]
   25900:	ldr	r3, [r4]
   25904:	add	r1, r3, #2
   25908:	str	r1, [r4]
   2590c:	strh	r2, [r3]
   25910:	ldr	r0, [r4, #16]
   25914:	add	r0, r0, r6
   25918:	ldrd	r4, [sp]
   2591c:	ldrd	r6, [sp, #8]
   25920:	ldr	r8, [sp, #16]
   25924:	add	sp, sp, #20
   25928:	pop	{pc}		; (ldr pc, [sp], #4)
   2592c:	ldr	r3, [pc, #100]	; 25998 <flatcc_builder_table_add_offset@@Base+0x14c>
   25930:	movw	r2, #1811	; 0x713
   25934:	movw	r1, #48672	; 0xbe20
   25938:	movt	r1, #2
   2593c:	movw	r0, #49380	; 0xc0e4
   25940:	movt	r0, #2
   25944:	bl	12684 <__assert_fail@plt>
   25948:	ldr	r3, [pc, #72]	; 25998 <flatcc_builder_table_add_offset@@Base+0x14c>
   2594c:	movw	r2, #1812	; 0x714
   25950:	movw	r1, #48672	; 0xbe20
   25954:	movt	r1, #2
   25958:	movw	r0, #49532	; 0xc17c
   2595c:	movt	r0, #2
   25960:	bl	12684 <__assert_fail@plt>
   25964:	ldr	r3, [pc, #44]	; 25998 <flatcc_builder_table_add_offset@@Base+0x14c>
   25968:	movw	r2, #1819	; 0x71b
   2596c:	movw	r1, #48672	; 0xbe20
   25970:	movt	r1, #2
   25974:	movw	r0, #48756	; 0xbe74
   25978:	movt	r0, #2
   2597c:	bl	12684 <__assert_fail@plt>
   25980:	movw	r2, #65532	; 0xfffc
   25984:	bl	219d0 <main@@Base+0x98>
   25988:	cmp	r0, #0
   2598c:	movne	r0, #0
   25990:	beq	258d8 <flatcc_builder_table_add_offset@@Base+0x8c>
   25994:	b	25918 <flatcc_builder_table_add_offset@@Base+0xcc>
   25998:	andeq	fp, r2, ip, ror sp

0002599c <flatcc_builder_table_add_union@@Base>:
   2599c:	strd	r4, [sp, #-20]!	; 0xffffffec
   259a0:	strd	r6, [sp, #8]
   259a4:	str	lr, [sp, #16]
   259a8:	sub	sp, sp, #12
   259ac:	mov	r7, r1
   259b0:	add	r1, sp, #8
   259b4:	stmdb	r1, {r2, r3}
   259b8:	ldrb	r6, [sp]
   259bc:	ldr	r5, [sp, #4]
   259c0:	ldr	r3, [r0, #32]
   259c4:	ldrh	r3, [r3, #14]
   259c8:	cmp	r3, #3
   259cc:	bne	25a40 <flatcc_builder_table_add_union@@Base+0xa4>
   259d0:	mov	r4, r0
   259d4:	clz	r3, r6
   259d8:	lsr	r3, r3, #5
   259dc:	cmp	r5, #0
   259e0:	moveq	r3, #0
   259e4:	cmp	r3, #0
   259e8:	bne	25a5c <flatcc_builder_table_add_union@@Base+0xc0>
   259ec:	cmp	r5, #0
   259f0:	beq	25a08 <flatcc_builder_table_add_union@@Base+0x6c>
   259f4:	mov	r1, r7
   259f8:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   259fc:	cmp	r0, #0
   25a00:	strne	r5, [r0]
   25a04:	beq	25a78 <flatcc_builder_table_add_union@@Base+0xdc>
   25a08:	mov	r3, #1
   25a0c:	mov	r2, r3
   25a10:	sub	r1, r7, #1
   25a14:	mov	r0, r4
   25a18:	bl	2565c <flatcc_builder_table_add@@Base>
   25a1c:	cmp	r0, #0
   25a20:	beq	25a94 <flatcc_builder_table_add_union@@Base+0xf8>
   25a24:	strb	r6, [r0]
   25a28:	mov	r0, #0
   25a2c:	add	sp, sp, #12
   25a30:	ldrd	r4, [sp]
   25a34:	ldrd	r6, [sp, #8]
   25a38:	add	sp, sp, #16
   25a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   25a40:	ldr	r3, [pc, #104]	; 25ab0 <flatcc_builder_table_add_union@@Base+0x114>
   25a44:	movw	r2, #1518	; 0x5ee
   25a48:	movw	r1, #48672	; 0xbe20
   25a4c:	movt	r1, #2
   25a50:	movw	r0, #49380	; 0xc0e4
   25a54:	movt	r0, #2
   25a58:	bl	12684 <__assert_fail@plt>
   25a5c:	ldr	r3, [pc, #76]	; 25ab0 <flatcc_builder_table_add_union@@Base+0x114>
   25a60:	movw	r2, #1519	; 0x5ef
   25a64:	movw	r1, #48672	; 0xbe20
   25a68:	movt	r1, #2
   25a6c:	movw	r0, #49600	; 0xc1c0
   25a70:	movt	r0, #2
   25a74:	bl	12684 <__assert_fail@plt>
   25a78:	ldr	r3, [pc, #48]	; 25ab0 <flatcc_builder_table_add_union@@Base+0x114>
   25a7c:	movw	r2, #1522	; 0x5f2
   25a80:	movw	r1, #48672	; 0xbe20
   25a84:	movt	r1, #2
   25a88:	movw	r0, #49636	; 0xc1e4
   25a8c:	movt	r0, #2
   25a90:	bl	12684 <__assert_fail@plt>
   25a94:	ldr	r3, [pc, #20]	; 25ab0 <flatcc_builder_table_add_union@@Base+0x114>
   25a98:	movw	r2, #1526	; 0x5f6
   25a9c:	movw	r1, #48672	; 0xbe20
   25aa0:	movt	r1, #2
   25aa4:	movw	r0, #49648	; 0xc1f0
   25aa8:	movt	r0, #2
   25aac:	bl	12684 <__assert_fail@plt>
   25ab0:	muleq	r2, ip, sp

00025ab4 <flatcc_builder_table_add_union_vector@@Base>:
   25ab4:	strd	r4, [sp, #-20]!	; 0xffffffec
   25ab8:	strd	r6, [sp, #8]
   25abc:	str	lr, [sp, #16]
   25ac0:	sub	sp, sp, #12
   25ac4:	mov	r7, r1
   25ac8:	add	r1, sp, #8
   25acc:	stmdb	r1, {r2, r3}
   25ad0:	ldr	r4, [sp]
   25ad4:	ldr	r6, [sp, #4]
   25ad8:	ldr	r3, [r0, #32]
   25adc:	ldrh	r3, [r3, #14]
   25ae0:	cmp	r3, #3
   25ae4:	bne	25b30 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   25ae8:	mov	r5, r0
   25aec:	clz	r3, r6
   25af0:	lsr	r3, r3, #5
   25af4:	clz	r2, r4
   25af8:	lsr	r2, r2, #5
   25afc:	cmp	r2, r3
   25b00:	beq	25b68 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   25b04:	adds	r4, r4, #0
   25b08:	movne	r4, #1
   25b0c:	cmp	r4, r3
   25b10:	mvnne	r4, #0
   25b14:	beq	25b4c <flatcc_builder_table_add_union_vector@@Base+0x98>
   25b18:	mov	r0, r4
   25b1c:	add	sp, sp, #12
   25b20:	ldrd	r4, [sp]
   25b24:	ldrd	r6, [sp, #8]
   25b28:	add	sp, sp, #16
   25b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   25b30:	ldr	r3, [pc, #160]	; 25bd8 <flatcc_builder_table_add_union_vector@@Base+0x124>
   25b34:	mov	r2, #1536	; 0x600
   25b38:	movw	r1, #48672	; 0xbe20
   25b3c:	movt	r1, #2
   25b40:	movw	r0, #49380	; 0xc0e4
   25b44:	movt	r0, #2
   25b48:	bl	12684 <__assert_fail@plt>
   25b4c:	ldr	r3, [pc, #132]	; 25bd8 <flatcc_builder_table_add_union_vector@@Base+0x124>
   25b50:	movw	r2, #1537	; 0x601
   25b54:	movw	r1, #48672	; 0xbe20
   25b58:	movt	r1, #2
   25b5c:	movw	r0, #49660	; 0xc1fc
   25b60:	movt	r0, #2
   25b64:	bl	12684 <__assert_fail@plt>
   25b68:	cmp	r4, #0
   25b6c:	beq	25b18 <flatcc_builder_table_add_union_vector@@Base+0x64>
   25b70:	sub	r1, r7, #1
   25b74:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   25b78:	cmp	r0, #0
   25b7c:	beq	25bbc <flatcc_builder_table_add_union_vector@@Base+0x108>
   25b80:	str	r4, [r0]
   25b84:	mov	r1, r7
   25b88:	mov	r0, r5
   25b8c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   25b90:	cmp	r0, #0
   25b94:	strne	r6, [r0]
   25b98:	movne	r4, #0
   25b9c:	bne	25b18 <flatcc_builder_table_add_union_vector@@Base+0x64>
   25ba0:	ldr	r3, [pc, #48]	; 25bd8 <flatcc_builder_table_add_union_vector@@Base+0x124>
   25ba4:	movw	r2, #1544	; 0x608
   25ba8:	movw	r1, #48672	; 0xbe20
   25bac:	movt	r1, #2
   25bb0:	movw	r0, #49636	; 0xc1e4
   25bb4:	movt	r0, #2
   25bb8:	bl	12684 <__assert_fail@plt>
   25bbc:	ldr	r3, [pc, #20]	; 25bd8 <flatcc_builder_table_add_union_vector@@Base+0x124>
   25bc0:	movw	r2, #1540	; 0x604
   25bc4:	movw	r1, #48672	; 0xbe20
   25bc8:	movt	r1, #2
   25bcc:	movw	r0, #49636	; 0xc1e4
   25bd0:	movt	r0, #2
   25bd4:	bl	12684 <__assert_fail@plt>
   25bd8:			; <UNDEFINED> instruction: 0x0002bdbc

00025bdc <flatcc_builder_push_buffer_alignment@@Base>:
   25bdc:	mov	r3, r0
   25be0:	ldrh	r0, [r0, #128]	; 0x80
   25be4:	mov	r2, #4
   25be8:	strh	r2, [r3, #128]	; 0x80
   25bec:	bx	lr

00025bf0 <flatcc_builder_pop_buffer_alignment@@Base>:
   25bf0:	ldrh	r3, [r0, #128]	; 0x80
   25bf4:	cmp	r3, r1
   25bf8:	strhcc	r1, [r0, #128]	; 0x80
   25bfc:	bx	lr

00025c00 <flatcc_builder_get_buffer_alignment@@Base>:
   25c00:	ldrh	r0, [r0, #128]	; 0x80
   25c04:	bx	lr

00025c08 <flatcc_builder_set_vtable_clustering@@Base>:
   25c08:	clz	r1, r1
   25c0c:	lsr	r1, r1, #5
   25c10:	str	r1, [r0, #180]	; 0xb4
   25c14:	bx	lr

00025c18 <flatcc_builder_set_block_align@@Base>:
   25c18:	strh	r1, [r0, #132]	; 0x84
   25c1c:	bx	lr

00025c20 <flatcc_builder_get_level@@Base>:
   25c20:	ldr	r0, [r0, #156]	; 0x9c
   25c24:	bx	lr

00025c28 <flatcc_builder_set_max_level@@Base>:
   25c28:	str	r1, [r0, #176]	; 0xb0
   25c2c:	ldr	r3, [r0, #160]	; 0xa0
   25c30:	cmp	r3, r1
   25c34:	strlt	r1, [r0, #160]	; 0xa0
   25c38:	bx	lr

00025c3c <flatcc_builder_get_buffer_size@@Base>:
   25c3c:	ldr	r2, [r0, #140]	; 0x8c
   25c40:	ldr	r0, [r0, #136]	; 0x88
   25c44:	sub	r0, r2, r0
   25c48:	bx	lr

00025c4c <flatcc_builder_get_buffer_start@@Base>:
   25c4c:	ldr	r0, [r0, #136]	; 0x88
   25c50:	bx	lr

00025c54 <flatcc_builder_get_buffer_end@@Base>:
   25c54:	ldr	r0, [r0, #140]	; 0x8c
   25c58:	bx	lr

00025c5c <flatcc_builder_set_vtable_cache_limit@@Base>:
   25c5c:	str	r1, [r0, #172]	; 0xac
   25c60:	bx	lr

00025c64 <flatcc_builder_set_identifier@@Base>:
   25c64:	movw	r3, #46800	; 0xb6d0
   25c68:	movt	r3, #2
   25c6c:	cmp	r1, #0
   25c70:	moveq	r1, r3
   25c74:	ldr	r3, [r1]
   25c78:	str	r3, [r0, #168]	; 0xa8
   25c7c:	bx	lr

00025c80 <flatcc_builder_get_type@@Base>:
   25c80:	ldr	r3, [r0, #32]
   25c84:	cmp	r3, #0
   25c88:	ldrhne	r0, [r3, #14]
   25c8c:	moveq	r0, #0
   25c90:	bx	lr

00025c94 <flatcc_builder_get_type_at@@Base>:
   25c94:	cmp	r1, #0
   25c98:	ble	25cc0 <flatcc_builder_get_type_at@@Base+0x2c>
   25c9c:	ldr	r3, [r0, #156]	; 0x9c
   25ca0:	cmp	r3, r1
   25ca4:	blt	25cc8 <flatcc_builder_get_type_at@@Base+0x34>
   25ca8:	sub	r1, r1, r3
   25cac:	ldr	r3, [r0, #32]
   25cb0:	add	r1, r1, r1, lsl #3
   25cb4:	add	r1, r3, r1, lsl #2
   25cb8:	ldrh	r0, [r1, #14]
   25cbc:	bx	lr
   25cc0:	mov	r0, #0
   25cc4:	bx	lr
   25cc8:	mov	r0, #0
   25ccc:	bx	lr

00025cd0 <flatcc_builder_get_direct_buffer@@Base>:
   25cd0:	ldr	r3, [r0, #184]	; 0xb8
   25cd4:	cmp	r3, #0
   25cd8:	bne	25cf0 <flatcc_builder_get_direct_buffer@@Base+0x20>
   25cdc:	cmp	r1, #0
   25ce0:	beq	25d30 <flatcc_builder_get_direct_buffer@@Base+0x60>
   25ce4:	mov	r0, #0
   25ce8:	str	r0, [r1]
   25cec:	bx	lr
   25cf0:	ldr	r2, [r0, #188]	; 0xbc
   25cf4:	ldr	r3, [r0, #192]	; 0xc0
   25cf8:	cmp	r2, r3
   25cfc:	beq	25d14 <flatcc_builder_get_direct_buffer@@Base+0x44>
   25d00:	cmp	r1, #0
   25d04:	beq	25d28 <flatcc_builder_get_direct_buffer@@Base+0x58>
   25d08:	mov	r0, #0
   25d0c:	str	r0, [r1]
   25d10:	bx	lr
   25d14:	cmp	r1, #0
   25d18:	ldrne	r3, [r0, #212]	; 0xd4
   25d1c:	strne	r3, [r1]
   25d20:	ldr	r0, [r0, #196]	; 0xc4
   25d24:	bx	lr
   25d28:	mov	r0, r1
   25d2c:	bx	lr
   25d30:	mov	r0, r1
   25d34:	bx	lr

00025d38 <flatcc_builder_copy_buffer@@Base>:
   25d38:	ldr	r3, [r0, #184]	; 0xb8
   25d3c:	cmp	r3, #0
   25d40:	beq	25d84 <flatcc_builder_copy_buffer@@Base+0x4c>
   25d44:	str	r4, [sp, #-8]!
   25d48:	str	lr, [sp, #4]
   25d4c:	add	r0, r0, #188	; 0xbc
   25d50:	bl	264f4 <flatcc_emitter_copy_buffer@@Base>
   25d54:	cmp	r0, #0
   25d58:	beq	25d68 <flatcc_builder_copy_buffer@@Base+0x30>
   25d5c:	ldr	r4, [sp]
   25d60:	add	sp, sp, #4
   25d64:	pop	{pc}		; (ldr pc, [sp], #4)
   25d68:	ldr	r3, [pc, #28]	; 25d8c <flatcc_builder_copy_buffer@@Base+0x54>
   25d6c:	movw	r2, #1926	; 0x786
   25d70:	movw	r1, #48672	; 0xbe20
   25d74:	movt	r1, #2
   25d78:	movw	r0, #49700	; 0xc224
   25d7c:	movt	r0, #2
   25d80:	bl	12684 <__assert_fail@plt>
   25d84:	mov	r0, #0
   25d88:	bx	lr
   25d8c:	andeq	fp, r2, r4, ror #27

00025d90 <flatcc_builder_finalize_buffer@@Base>:
   25d90:	strd	r4, [sp, #-16]!
   25d94:	str	r6, [sp, #8]
   25d98:	str	lr, [sp, #12]
   25d9c:	mov	r5, r0
   25da0:	ldr	r4, [r0, #140]	; 0x8c
   25da4:	ldr	r3, [r0, #136]	; 0x88
   25da8:	sub	r4, r4, r3
   25dac:	cmp	r1, #0
   25db0:	strne	r4, [r1]
   25db4:	mov	r0, r4
   25db8:	bl	125dc <malloc@plt>
   25dbc:	subs	r6, r0, #0
   25dc0:	beq	25df0 <flatcc_builder_finalize_buffer@@Base+0x60>
   25dc4:	mov	r2, r4
   25dc8:	mov	r1, r6
   25dcc:	mov	r0, r5
   25dd0:	bl	25d38 <flatcc_builder_copy_buffer@@Base>
   25dd4:	cmp	r0, #0
   25dd8:	beq	25e0c <flatcc_builder_finalize_buffer@@Base+0x7c>
   25ddc:	mov	r0, r6
   25de0:	ldrd	r4, [sp]
   25de4:	ldr	r6, [sp, #8]
   25de8:	add	sp, sp, #12
   25dec:	pop	{pc}		; (ldr pc, [sp], #4)
   25df0:	ldr	r3, [pc, #48]	; 25e28 <flatcc_builder_finalize_buffer@@Base+0x98>
   25df4:	movw	r2, #1944	; 0x798
   25df8:	movw	r1, #48672	; 0xbe20
   25dfc:	movt	r1, #2
   25e00:	movw	r0, #48756	; 0xbe74
   25e04:	movt	r0, #2
   25e08:	bl	12684 <__assert_fail@plt>
   25e0c:	ldr	r3, [pc, #20]	; 25e28 <flatcc_builder_finalize_buffer@@Base+0x98>
   25e10:	movw	r2, #1948	; 0x79c
   25e14:	movw	r1, #48672	; 0xbe20
   25e18:	movt	r1, #2
   25e1c:	movw	r0, #48756	; 0xbe74
   25e20:	movt	r0, #2
   25e24:	bl	12684 <__assert_fail@plt>
   25e28:	andeq	fp, r2, r0, lsl #28

00025e2c <flatcc_builder_finalize_aligned_buffer@@Base>:
   25e2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   25e30:	strd	r6, [sp, #8]
   25e34:	str	lr, [sp, #16]
   25e38:	sub	sp, sp, #12
   25e3c:	mov	r7, r0
   25e40:	ldr	r4, [r0, #140]	; 0x8c
   25e44:	ldr	r3, [r0, #136]	; 0x88
   25e48:	sub	r3, r4, r3
   25e4c:	subs	r6, r1, #0
   25e50:	strne	r3, [r6]
   25e54:	ldrh	r1, [r0, #128]	; 0x80
   25e58:	sub	r4, r1, #1
   25e5c:	add	r4, r4, r3
   25e60:	rsb	r3, r1, #0
   25e64:	and	r4, r4, r3
   25e68:	mov	r3, #0
   25e6c:	str	r3, [sp, #4]
   25e70:	mov	r2, r4
   25e74:	cmp	r1, #4
   25e78:	movcc	r1, #4
   25e7c:	add	r0, sp, #4
   25e80:	bl	12624 <posix_memalign@plt>
   25e84:	cmp	r0, #0
   25e88:	beq	25eb0 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   25e8c:	ldr	r0, [sp, #4]
   25e90:	cmp	r0, #0
   25e94:	beq	25e9c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   25e98:	bl	1257c <free@plt>
   25e9c:	cmp	r6, #0
   25ea0:	movne	r5, #0
   25ea4:	strne	r5, [r6]
   25ea8:	moveq	r5, r6
   25eac:	b	25ed4 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   25eb0:	ldr	r5, [sp, #4]
   25eb4:	cmp	r5, #0
   25eb8:	beq	25e9c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   25ebc:	mov	r2, r4
   25ec0:	mov	r1, r5
   25ec4:	mov	r0, r7
   25ec8:	bl	25d38 <flatcc_builder_copy_buffer@@Base>
   25ecc:	cmp	r0, #0
   25ed0:	beq	25eec <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   25ed4:	mov	r0, r5
   25ed8:	add	sp, sp, #12
   25edc:	ldrd	r4, [sp]
   25ee0:	ldrd	r6, [sp, #8]
   25ee4:	add	sp, sp, #16
   25ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   25eec:	mov	r0, r5
   25ef0:	bl	1257c <free@plt>
   25ef4:	b	25e9c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

00025ef8 <flatcc_builder_aligned_alloc@@Base>:
   25ef8:	push	{lr}		; (str lr, [sp, #-4]!)
   25efc:	sub	sp, sp, #12
   25f00:	mov	r3, #0
   25f04:	str	r3, [sp, #4]
   25f08:	mov	r2, r1
   25f0c:	cmp	r0, #4
   25f10:	movcs	r1, r0
   25f14:	movcc	r1, #4
   25f18:	add	r0, sp, #4
   25f1c:	bl	12624 <posix_memalign@plt>
   25f20:	cmp	r0, #0
   25f24:	beq	25f40 <flatcc_builder_aligned_alloc@@Base+0x48>
   25f28:	ldr	r0, [sp, #4]
   25f2c:	cmp	r0, #0
   25f30:	beq	25f40 <flatcc_builder_aligned_alloc@@Base+0x48>
   25f34:	bl	1257c <free@plt>
   25f38:	mov	r3, #0
   25f3c:	str	r3, [sp, #4]
   25f40:	ldr	r0, [sp, #4]
   25f44:	add	sp, sp, #12
   25f48:	pop	{pc}		; (ldr pc, [sp], #4)

00025f4c <flatcc_builder_aligned_free@@Base>:
   25f4c:	str	r4, [sp, #-8]!
   25f50:	str	lr, [sp, #4]
   25f54:	bl	1257c <free@plt>
   25f58:	ldr	r4, [sp]
   25f5c:	add	sp, sp, #4
   25f60:	pop	{pc}		; (ldr pc, [sp], #4)

00025f64 <flatcc_builder_get_emit_context@@Base>:
   25f64:	ldr	r0, [r0, #36]	; 0x24
   25f68:	bx	lr

00025f6c <flatcc_emitter_recycle_page@@Base>:
   25f6c:	ldr	r3, [r0]
   25f70:	cmp	r3, r1
   25f74:	beq	25fc0 <flatcc_emitter_recycle_page@@Base+0x54>
   25f78:	ldr	r3, [r0, #4]
   25f7c:	cmp	r3, r1
   25f80:	beq	25fc8 <flatcc_emitter_recycle_page@@Base+0x5c>
   25f84:	ldr	r2, [r1, #2944]	; 0xb80
   25f88:	ldr	r3, [r1, #2948]	; 0xb84
   25f8c:	str	r3, [r2, #2948]	; 0xb84
   25f90:	ldr	r2, [r1, #2944]	; 0xb80
   25f94:	str	r2, [r3, #2944]	; 0xb80
   25f98:	ldr	r3, [r0]
   25f9c:	ldr	r3, [r3, #2948]	; 0xb84
   25fa0:	str	r3, [r1, #2948]	; 0xb84
   25fa4:	ldr	r2, [r0]
   25fa8:	str	r2, [r1, #2944]	; 0xb80
   25fac:	str	r1, [r3, #2944]	; 0xb80
   25fb0:	ldr	r3, [r1, #2944]	; 0xb80
   25fb4:	str	r1, [r3, #2948]	; 0xb84
   25fb8:	mov	r0, #0
   25fbc:	bx	lr
   25fc0:	mvn	r0, #0
   25fc4:	bx	lr
   25fc8:	mvn	r0, #0
   25fcc:	bx	lr

00025fd0 <flatcc_emitter_reset@@Base>:
   25fd0:	ldr	r3, [r0]
   25fd4:	cmp	r3, #0
   25fd8:	bxeq	lr
   25fdc:	str	r3, [r0, #4]
   25fe0:	add	r2, r3, #1472	; 0x5c0
   25fe4:	str	r2, [r0, #8]
   25fe8:	str	r2, [r0, #16]
   25fec:	mov	r2, #1472	; 0x5c0
   25ff0:	str	r2, [r0, #12]
   25ff4:	str	r2, [r0, #20]
   25ff8:	movw	r2, #64064	; 0xfa40
   25ffc:	movt	r2, #65535	; 0xffff
   26000:	str	r2, [r3, #2952]	; 0xb88
   26004:	ldr	r3, [r0, #32]
   26008:	cmp	r3, #0
   2600c:	ldreq	r3, [r0, #24]
   26010:	streq	r3, [r0, #32]
   26014:	ldr	r3, [r0, #32]
   26018:	add	r2, r3, r3, lsl #1
   2601c:	ldr	r3, [r0, #24]
   26020:	lsr	r3, r3, #2
   26024:	add	r3, r3, r2, lsr #2
   26028:	str	r3, [r0, #32]
   2602c:	mov	r2, #0
   26030:	str	r2, [r0, #24]
   26034:	ldr	r2, [r0, #28]
   26038:	cmp	r2, r3, lsl #1
   2603c:	bxls	lr
   26040:	str	r4, [sp, #-8]!
   26044:	str	lr, [sp, #4]
   26048:	mov	r4, r0
   2604c:	ldr	r3, [r0, #4]
   26050:	ldr	r0, [r3, #2944]	; 0xb80
   26054:	ldr	r2, [r4]
   26058:	cmp	r0, r2
   2605c:	beq	260a0 <flatcc_emitter_reset@@Base+0xd0>
   26060:	ldr	r2, [r0, #2944]	; 0xb80
   26064:	str	r2, [r3, #2944]	; 0xb80
   26068:	ldr	r3, [r4, #4]
   2606c:	str	r3, [r2, #2948]	; 0xb84
   26070:	bl	1257c <free@plt>
   26074:	ldr	r3, [r4, #28]
   26078:	sub	r3, r3, #2944	; 0xb80
   2607c:	str	r3, [r4, #28]
   26080:	ldr	r2, [r4, #32]
   26084:	cmp	r3, r2, lsl #1
   26088:	bls	260a0 <flatcc_emitter_reset@@Base+0xd0>
   2608c:	ldr	r3, [r4, #4]
   26090:	ldr	r0, [r3, #2944]	; 0xb80
   26094:	ldr	r2, [r4]
   26098:	cmp	r0, r2
   2609c:	bne	26060 <flatcc_emitter_reset@@Base+0x90>
   260a0:	ldr	r4, [sp]
   260a4:	add	sp, sp, #4
   260a8:	pop	{pc}		; (ldr pc, [sp], #4)

000260ac <flatcc_emitter_clear@@Base>:
   260ac:	ldr	r3, [r0]
   260b0:	cmp	r3, #0
   260b4:	bxeq	lr
   260b8:	strd	r4, [sp, #-16]!
   260bc:	str	r6, [sp, #8]
   260c0:	str	lr, [sp, #12]
   260c4:	mov	r5, r0
   260c8:	ldr	r2, [r3, #2948]	; 0xb84
   260cc:	mov	r1, #0
   260d0:	str	r1, [r2, #2944]	; 0xb80
   260d4:	ldr	r4, [r3, #2944]	; 0xb80
   260d8:	cmp	r4, r1
   260dc:	bne	260ec <flatcc_emitter_clear@@Base+0x40>
   260e0:	mov	r4, r3
   260e4:	b	26100 <flatcc_emitter_clear@@Base+0x54>
   260e8:	mov	r4, r3
   260ec:	ldr	r0, [r4, #2948]	; 0xb84
   260f0:	bl	1257c <free@plt>
   260f4:	ldr	r3, [r4, #2944]	; 0xb80
   260f8:	cmp	r3, #0
   260fc:	bne	260e8 <flatcc_emitter_clear@@Base+0x3c>
   26100:	mov	r0, r4
   26104:	bl	1257c <free@plt>
   26108:	mov	r2, #36	; 0x24
   2610c:	mov	r1, #0
   26110:	mov	r0, r5
   26114:	bl	12630 <memset@plt>
   26118:	ldrd	r4, [sp]
   2611c:	ldr	r6, [sp, #8]
   26120:	add	sp, sp, #12
   26124:	pop	{pc}		; (ldr pc, [sp], #4)

00026128 <flatcc_emitter@@Base>:
   26128:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2612c:	strd	r6, [sp, #8]
   26130:	strd	r8, [sp, #16]
   26134:	strd	sl, [sp, #24]
   26138:	str	lr, [sp, #32]
   2613c:	sub	sp, sp, #4
   26140:	mov	r4, r0
   26144:	ldr	ip, [sp, #40]	; 0x28
   26148:	ldr	r0, [r0, #24]
   2614c:	add	r0, r0, ip
   26150:	str	r0, [r4, #24]
   26154:	cmp	r3, #0
   26158:	blt	26188 <flatcc_emitter@@Base+0x60>
   2615c:	ldr	r3, [r4, #20]
   26160:	cmp	r3, ip
   26164:	bcs	26270 <flatcc_emitter@@Base+0x148>
   26168:	cmp	r2, #0
   2616c:	moveq	r0, r2
   26170:	beq	26370 <flatcc_emitter@@Base+0x248>
   26174:	add	r5, r1, #8
   26178:	mov	r8, r2
   2617c:	movw	fp, #64064	; 0xfa40
   26180:	movt	fp, #65535	; 0xffff
   26184:	b	263cc <flatcc_emitter@@Base+0x2a4>
   26188:	ldr	r3, [r4, #12]
   2618c:	cmp	r3, ip
   26190:	bcs	261a8 <flatcc_emitter@@Base+0x80>
   26194:	add	r5, r1, r2, lsl #3
   26198:	sub	r8, r2, #1
   2619c:	movw	fp, #64064	; 0xfa40
   261a0:	movt	fp, #65535	; 0xffff
   261a4:	b	2639c <flatcc_emitter@@Base+0x274>
   261a8:	ldr	r6, [r4, #8]
   261ac:	sub	r6, r6, ip
   261b0:	str	r6, [r4, #8]
   261b4:	sub	ip, r3, ip
   261b8:	str	ip, [r4, #12]
   261bc:	b	26284 <flatcc_emitter@@Base+0x15c>
   261c0:	mov	r2, r6
   261c4:	rsb	r1, r2, #0
   261c8:	ldr	r0, [r4, #8]
   261cc:	add	r0, r0, r1
   261d0:	str	r0, [r4, #8]
   261d4:	sub	r3, r3, r2
   261d8:	str	r3, [r4, #12]
   261dc:	add	r9, r9, r1
   261e0:	sub	r6, r6, r2
   261e4:	mov	r1, r9
   261e8:	bl	12588 <memcpy@plt>
   261ec:	cmp	r6, #0
   261f0:	beq	26394 <flatcc_emitter@@Base+0x26c>
   261f4:	ldr	r3, [r4, #12]
   261f8:	cmp	r3, r6
   261fc:	bcs	261c0 <flatcc_emitter@@Base+0x98>
   26200:	cmp	r3, #0
   26204:	movne	r2, r3
   26208:	bne	261c4 <flatcc_emitter@@Base+0x9c>
   2620c:	ldr	r7, [r4]
   26210:	cmp	r7, #0
   26214:	beq	26428 <flatcc_emitter@@Base+0x300>
   26218:	ldr	r2, [r7, #2948]	; 0xb84
   2621c:	ldr	r3, [r4, #4]
   26220:	cmp	r2, r3
   26224:	beq	263ec <flatcc_emitter@@Base+0x2c4>
   26228:	ldr	r3, [r7, #2952]	; 0xb88
   2622c:	sub	r3, r3, #2944	; 0xb80
   26230:	str	r3, [r2, #2952]	; 0xb88
   26234:	ldr	r3, [r4]
   26238:	ldr	r3, [r3, #2948]	; 0xb84
   2623c:	str	r3, [r4]
   26240:	ldr	r3, [r4]
   26244:	add	r2, r3, #2944	; 0xb80
   26248:	str	r2, [r4, #8]
   2624c:	mov	r2, #2944	; 0xb80
   26250:	str	r2, [r4, #12]
   26254:	ldr	r2, [r3, #2944]	; 0xb80
   26258:	ldr	r2, [r2, #2952]	; 0xb88
   2625c:	sub	r2, r2, #2944	; 0xb80
   26260:	str	r2, [r3, #2952]	; 0xb88
   26264:	b	261ec <flatcc_emitter@@Base+0xc4>
   26268:	mov	r0, #0
   2626c:	b	26370 <flatcc_emitter@@Base+0x248>
   26270:	ldr	r6, [r4, #16]
   26274:	add	r0, r6, ip
   26278:	str	r0, [r4, #16]
   2627c:	sub	ip, r3, ip
   26280:	str	ip, [r4, #20]
   26284:	sub	r4, r2, #1
   26288:	cmp	r2, #0
   2628c:	moveq	r0, r2
   26290:	beq	26370 <flatcc_emitter@@Base+0x248>
   26294:	add	r5, r1, #8
   26298:	ldr	r2, [r5, #-4]
   2629c:	ldr	r1, [r5, #-8]
   262a0:	mov	r0, r6
   262a4:	bl	12588 <memcpy@plt>
   262a8:	ldr	r3, [r5, #-4]
   262ac:	add	r6, r6, r3
   262b0:	sub	r4, r4, #1
   262b4:	add	r5, r5, #8
   262b8:	cmn	r4, #1
   262bc:	bne	26298 <flatcc_emitter@@Base+0x170>
   262c0:	mov	r0, #0
   262c4:	b	26370 <flatcc_emitter@@Base+0x248>
   262c8:	mov	r6, r7
   262cc:	mov	r2, r6
   262d0:	mov	r1, r9
   262d4:	ldr	r0, [r4, #16]
   262d8:	bl	12588 <memcpy@plt>
   262dc:	sub	r7, r7, r6
   262e0:	add	r9, r9, r6
   262e4:	ldr	r3, [r4, #16]
   262e8:	add	r3, r3, r6
   262ec:	str	r3, [r4, #16]
   262f0:	ldr	r3, [r4, #20]
   262f4:	sub	r6, r3, r6
   262f8:	str	r6, [r4, #20]
   262fc:	cmp	r7, #0
   26300:	beq	263c0 <flatcc_emitter@@Base+0x298>
   26304:	ldr	r6, [r4, #20]
   26308:	cmp	r6, r7
   2630c:	bcs	262c8 <flatcc_emitter@@Base+0x1a0>
   26310:	cmp	r6, #0
   26314:	bne	262cc <flatcc_emitter@@Base+0x1a4>
   26318:	ldr	r6, [r4, #4]
   2631c:	cmp	r6, #0
   26320:	beq	264ac <flatcc_emitter@@Base+0x384>
   26324:	ldr	r3, [r6, #2944]	; 0xb80
   26328:	ldr	r2, [r4]
   2632c:	cmp	r3, r2
   26330:	beq	26470 <flatcc_emitter@@Base+0x348>
   26334:	str	r3, [r4, #4]
   26338:	ldr	r3, [r4, #4]
   2633c:	str	r3, [r4, #16]
   26340:	mov	r2, #2944	; 0xb80
   26344:	str	r2, [r4, #20]
   26348:	ldr	r2, [r3, #2948]	; 0xb84
   2634c:	ldr	r2, [r2, #2952]	; 0xb88
   26350:	add	r2, r2, #2944	; 0xb80
   26354:	str	r2, [r3, #2952]	; 0xb88
   26358:	b	262fc <flatcc_emitter@@Base+0x1d4>
   2635c:	mvn	r0, #0
   26360:	b	26370 <flatcc_emitter@@Base+0x248>
   26364:	mvn	r0, #0
   26368:	b	26370 <flatcc_emitter@@Base+0x248>
   2636c:	mvn	r0, #0
   26370:	add	sp, sp, #4
   26374:	ldrd	r4, [sp]
   26378:	ldrd	r6, [sp, #8]
   2637c:	ldrd	r8, [sp, #16]
   26380:	ldrd	sl, [sp, #24]
   26384:	add	sp, sp, #32
   26388:	pop	{pc}		; (ldr pc, [sp], #4)
   2638c:	mvn	r0, #0
   26390:	b	26370 <flatcc_emitter@@Base+0x248>
   26394:	sub	r5, r5, #8
   26398:	sub	r8, r8, #1
   2639c:	cmn	r8, #1
   263a0:	beq	26268 <flatcc_emitter@@Base+0x140>
   263a4:	ldr	r6, [r5, #-4]
   263a8:	ldr	r9, [r5, #-8]
   263ac:	add	r9, r9, r6
   263b0:	cmp	r6, #0
   263b4:	beq	26394 <flatcc_emitter@@Base+0x26c>
   263b8:	mov	sl, #1472	; 0x5c0
   263bc:	b	261f4 <flatcc_emitter@@Base+0xcc>
   263c0:	add	r5, r5, #8
   263c4:	subs	r8, r8, #1
   263c8:	beq	263e4 <flatcc_emitter@@Base+0x2bc>
   263cc:	ldr	r9, [r5, #-8]
   263d0:	ldr	r7, [r5, #-4]
   263d4:	cmp	r7, #0
   263d8:	beq	263c0 <flatcc_emitter@@Base+0x298>
   263dc:	mov	sl, #1472	; 0x5c0
   263e0:	b	26304 <flatcc_emitter@@Base+0x1dc>
   263e4:	mov	r0, #0
   263e8:	b	26370 <flatcc_emitter@@Base+0x248>
   263ec:	movw	r0, #2956	; 0xb8c
   263f0:	bl	125dc <malloc@plt>
   263f4:	cmp	r0, #0
   263f8:	beq	2635c <flatcc_emitter@@Base+0x234>
   263fc:	ldr	r3, [r4, #28]
   26400:	add	r3, r3, #2944	; 0xb80
   26404:	str	r3, [r4, #28]
   26408:	ldr	r3, [r4, #4]
   2640c:	str	r3, [r0, #2948]	; 0xb84
   26410:	str	r7, [r0, #2944]	; 0xb80
   26414:	str	r0, [r7, #2948]	; 0xb84
   26418:	ldr	r3, [r4, #4]
   2641c:	str	r0, [r3, #2944]	; 0xb80
   26420:	str	r0, [r4]
   26424:	b	26240 <flatcc_emitter@@Base+0x118>
   26428:	movw	r0, #2956	; 0xb8c
   2642c:	bl	125dc <malloc@plt>
   26430:	cmp	r0, #0
   26434:	beq	26364 <flatcc_emitter@@Base+0x23c>
   26438:	ldr	r3, [r4, #28]
   2643c:	add	r3, r3, #2944	; 0xb80
   26440:	str	r3, [r4, #28]
   26444:	str	r0, [r4]
   26448:	str	r0, [r4, #4]
   2644c:	str	r0, [r0, #2944]	; 0xb80
   26450:	str	r0, [r0, #2948]	; 0xb84
   26454:	add	r3, r0, #1472	; 0x5c0
   26458:	str	r3, [r4, #8]
   2645c:	str	r3, [r4, #16]
   26460:	str	sl, [r4, #12]
   26464:	str	sl, [r4, #20]
   26468:	str	fp, [r0, #2952]	; 0xb88
   2646c:	b	261ec <flatcc_emitter@@Base+0xc4>
   26470:	movw	r0, #2956	; 0xb8c
   26474:	bl	125dc <malloc@plt>
   26478:	cmp	r0, #0
   2647c:	beq	2636c <flatcc_emitter@@Base+0x244>
   26480:	ldr	r3, [r4, #28]
   26484:	add	r3, r3, #2944	; 0xb80
   26488:	str	r3, [r4, #28]
   2648c:	str	r6, [r0, #2948]	; 0xb84
   26490:	ldr	r3, [r4]
   26494:	str	r3, [r0, #2944]	; 0xb80
   26498:	str	r0, [r3, #2948]	; 0xb84
   2649c:	ldr	r3, [r4, #4]
   264a0:	str	r0, [r3, #2944]	; 0xb80
   264a4:	str	r0, [r4, #4]
   264a8:	b	26338 <flatcc_emitter@@Base+0x210>
   264ac:	movw	r0, #2956	; 0xb8c
   264b0:	bl	125dc <malloc@plt>
   264b4:	cmp	r0, #0
   264b8:	beq	2638c <flatcc_emitter@@Base+0x264>
   264bc:	ldr	r3, [r4, #28]
   264c0:	add	r3, r3, #2944	; 0xb80
   264c4:	str	r3, [r4, #28]
   264c8:	str	r0, [r4]
   264cc:	str	r0, [r4, #4]
   264d0:	str	r0, [r0, #2944]	; 0xb80
   264d4:	str	r0, [r0, #2948]	; 0xb84
   264d8:	add	r3, r0, #1472	; 0x5c0
   264dc:	str	r3, [r4, #8]
   264e0:	str	r3, [r4, #16]
   264e4:	str	sl, [r4, #12]
   264e8:	str	sl, [r4, #20]
   264ec:	str	fp, [r0, #2952]	; 0xb88
   264f0:	b	262fc <flatcc_emitter@@Base+0x1d4>

000264f4 <flatcc_emitter_copy_buffer@@Base>:
   264f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   264f8:	strd	r6, [sp, #8]
   264fc:	str	r8, [sp, #16]
   26500:	str	lr, [sp, #20]
   26504:	ldr	r3, [r0, #24]
   26508:	cmp	r3, r2
   2650c:	movhi	r4, #0
   26510:	bhi	265a0 <flatcc_emitter_copy_buffer@@Base+0xac>
   26514:	ldr	r4, [r0]
   26518:	cmp	r4, #0
   2651c:	beq	265a0 <flatcc_emitter_copy_buffer@@Base+0xac>
   26520:	mov	r5, r1
   26524:	mov	r7, r0
   26528:	ldr	r2, [r0, #4]
   2652c:	cmp	r4, r2
   26530:	beq	265b8 <flatcc_emitter_copy_buffer@@Base+0xc4>
   26534:	ldr	r4, [r0, #12]
   26538:	rsb	r4, r4, #2944	; 0xb80
   2653c:	mov	r2, r4
   26540:	ldr	r1, [r0, #8]
   26544:	mov	r0, r5
   26548:	bl	12588 <memcpy@plt>
   2654c:	add	r4, r5, r4
   26550:	ldr	r3, [r7]
   26554:	ldr	r5, [r3, #2944]	; 0xb80
   26558:	ldr	r3, [r7, #4]
   2655c:	cmp	r5, r3
   26560:	beq	265d0 <flatcc_emitter_copy_buffer@@Base+0xdc>
   26564:	mov	r6, #2944	; 0xb80
   26568:	mov	r2, r6
   2656c:	mov	r1, r5
   26570:	mov	r0, r4
   26574:	bl	12588 <memcpy@plt>
   26578:	add	r4, r4, #2944	; 0xb80
   2657c:	ldr	r5, [r5, #2944]	; 0xb80
   26580:	ldr	r3, [r7, #4]
   26584:	cmp	r3, r5
   26588:	bne	26568 <flatcc_emitter_copy_buffer@@Base+0x74>
   2658c:	ldr	r2, [r7, #20]
   26590:	rsb	r2, r2, #2944	; 0xb80
   26594:	mov	r1, r5
   26598:	mov	r0, r4
   2659c:	bl	12588 <memcpy@plt>
   265a0:	mov	r0, r4
   265a4:	ldrd	r4, [sp]
   265a8:	ldrd	r6, [sp, #8]
   265ac:	ldr	r8, [sp, #16]
   265b0:	add	sp, sp, #20
   265b4:	pop	{pc}		; (ldr pc, [sp], #4)
   265b8:	mov	r2, r3
   265bc:	ldr	r1, [r0, #8]
   265c0:	mov	r0, r5
   265c4:	bl	12588 <memcpy@plt>
   265c8:	mov	r4, r5
   265cc:	b	265a0 <flatcc_emitter_copy_buffer@@Base+0xac>
   265d0:	mov	r5, r3
   265d4:	b	2658c <flatcc_emitter_copy_buffer@@Base+0x98>
   265d8:	sub	sp, sp, #8
   265dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   265e0:	strd	r6, [sp, #8]
   265e4:	strd	r8, [sp, #16]
   265e8:	str	sl, [sp, #24]
   265ec:	str	lr, [sp, #28]
   265f0:	add	r1, sp, #28
   265f4:	stmib	r1, {r2, r3}
   265f8:	ldrd	r2, [sp, #32]
   265fc:	ldr	lr, [sp, #40]	; 0x28
   26600:	orrs	r1, r2, r3
   26604:	beq	266c0 <flatcc_emitter_copy_buffer@@Base+0x1cc>
   26608:	mov	r8, #0
   2660c:	lsr	r9, r3, #22
   26610:	lsl	r9, r9, #22
   26614:	orrs	r1, r8, r9
   26618:	subeq	ip, lr, #10
   2661c:	moveq	r9, #0
   26620:	moveq	r8, r9
   26624:	movteq	r8, #65472	; 0xffc0
   26628:	bne	26658 <flatcc_emitter_copy_buffer@@Base+0x164>
   2662c:	lsl	r1, r3, #10
   26630:	orr	r1, r1, r2, lsr #22
   26634:	lsl	lr, r2, #10
   26638:	mov	r2, lr
   2663c:	mov	r3, r1
   26640:	mov	lr, ip
   26644:	mov	r6, r9
   26648:	and	r7, r1, r8
   2664c:	sub	ip, ip, #10
   26650:	orrs	r1, r6, r7
   26654:	beq	2662c <flatcc_emitter_copy_buffer@@Base+0x138>
   26658:	cmp	r2, #0
   2665c:	sbcs	r1, r3, #0
   26660:	blt	2668c <flatcc_emitter_copy_buffer@@Base+0x198>
   26664:	sub	r1, lr, #1
   26668:	adds	r4, r2, r2
   2666c:	adc	r5, r3, r3
   26670:	mov	r2, r4
   26674:	mov	r3, r5
   26678:	mov	lr, r1
   2667c:	sub	r1, r1, #1
   26680:	cmp	r4, #0
   26684:	sbcs	ip, r5, #0
   26688:	bge	26668 <flatcc_emitter_copy_buffer@@Base+0x174>
   2668c:	strd	r2, [sp, #32]
   26690:	str	lr, [sp, #40]	; 0x28
   26694:	strd	r2, [r0]
   26698:	ldrd	r2, [sp, #40]	; 0x28
   2669c:	strd	r2, [r0, #8]
   266a0:	ldrd	r4, [sp]
   266a4:	ldrd	r6, [sp, #8]
   266a8:	ldrd	r8, [sp, #16]
   266ac:	ldr	sl, [sp, #24]
   266b0:	ldr	lr, [sp, #28]
   266b4:	add	sp, sp, #32
   266b8:	add	sp, sp, #8
   266bc:	bx	lr
   266c0:	movw	r3, #49712	; 0xc230
   266c4:	movt	r3, #2
   266c8:	mov	r2, #260	; 0x104
   266cc:	movw	r1, #51888	; 0xcab0
   266d0:	movt	r1, #2
   266d4:	movw	r0, #51976	; 0xcb08
   266d8:	movt	r0, #2
   266dc:	bl	12684 <__assert_fail@plt>

000266e0 <grisu3_diy_fp_encode_double@@Base>:
   266e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   266e4:	strd	r6, [sp, #8]
   266e8:	strd	r8, [sp, #16]
   266ec:	strd	sl, [sp, #24]
   266f0:	str	lr, [sp, #32]
   266f4:	sub	sp, sp, #92	; 0x5c
   266f8:	mov	r6, r3
   266fc:	ldr	r7, [sp, #128]	; 0x80
   26700:	cmp	r7, #0
   26704:	movne	r7, #4
   26708:	sub	r5, r2, r3
   2670c:	strd	r0, [sp, #72]	; 0x48
   26710:	mov	r3, #0
   26714:	str	r3, [sp, #80]	; 0x50
   26718:	add	r0, sp, #72	; 0x48
   2671c:	ldrd	r2, [sp, #80]	; 0x50
   26720:	strd	r2, [sp]
   26724:	ldm	r0, {r2, r3}
   26728:	bl	265d8 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2672c:	ldr	r4, [sp, #72]	; 0x48
   26730:	ldr	r3, [sp, #76]	; 0x4c
   26734:	ldr	r1, [sp, #80]	; 0x50
   26738:	rsb	ip, r1, #0
   2673c:	lsl	ip, r7, ip
   26740:	cmn	r5, #348	; 0x15c
   26744:	blt	26944 <grisu3_diy_fp_encode_double@@Base+0x264>
   26748:	cmp	r5, #348	; 0x15c
   2674c:	bge	26960 <grisu3_diy_fp_encode_double@@Base+0x280>
   26750:	add	r0, r5, #348	; 0x15c
   26754:	add	r2, r0, #7
   26758:	cmp	r0, #0
   2675c:	movlt	r0, r2
   26760:	asr	r0, r0, #3
   26764:	movw	r2, #49712	; 0xc230
   26768:	movt	r2, #2
   2676c:	add	r0, r2, r0, lsl #4
   26770:	ldrsh	r2, [r0, #66]	; 0x42
   26774:	ldr	r7, [r0, #56]	; 0x38
   26778:	ldr	lr, [r0, #60]	; 0x3c
   2677c:	ldrsh	r0, [r0, #64]	; 0x40
   26780:	str	r0, [sp, #44]	; 0x2c
   26784:	cmp	r5, r2
   26788:	blt	2697c <grisu3_diy_fp_encode_double@@Base+0x29c>
   2678c:	add	r0, r2, #7
   26790:	cmp	r5, r0
   26794:	bgt	26998 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   26798:	cmp	r5, r2
   2679c:	beq	2684c <grisu3_diy_fp_encode_double@@Base+0x16c>
   267a0:	sub	r2, r5, r2
   267a4:	sub	r2, r2, #1
   267a8:	cmp	r2, #6
   267ac:	bhi	269b4 <grisu3_diy_fp_encode_double@@Base+0x2d4>
   267b0:	ldr	r0, [pc, #1052]	; 26bd4 <grisu3_diy_fp_encode_double@@Base+0x4f4>
   267b4:	add	sl, r0, r2, lsl #4
   267b8:	ldr	r0, [r0, r2, lsl #4]
   267bc:	ldr	r5, [sl, #4]
   267c0:	umull	r8, r9, r4, r5
   267c4:	strd	r8, [sp, #16]
   267c8:	umull	r8, r9, r3, r0
   267cc:	strd	r8, [sp, #24]
   267d0:	umull	r4, r5, r4, r0
   267d4:	mov	r8, r5
   267d8:	mov	r9, #0
   267dc:	ldr	r0, [sp, #24]
   267e0:	adds	r0, r8, r0
   267e4:	adc	r4, r9, r9
   267e8:	adds	r0, r0, #-2147483648	; 0x80000000
   267ec:	adc	r4, r4, r9
   267f0:	ldr	r5, [sp, #16]
   267f4:	adds	r0, r0, r5
   267f8:	adc	r8, r4, r9
   267fc:	mov	r4, r8
   26800:	mov	fp, r9
   26804:	ldr	r0, [sp, #28]
   26808:	ldr	r5, [sp, #20]
   2680c:	adds	r0, r0, r5
   26810:	str	r0, [sp, #32]
   26814:	adc	r0, r9, r9
   26818:	str	r0, [sp, #36]	; 0x24
   2681c:	ldrd	r8, [sp, #32]
   26820:	ldr	r0, [sl, #4]
   26824:	umlal	r8, r9, r0, r3
   26828:	adds	r4, r4, r8
   2682c:	adc	r3, fp, r9
   26830:	ldr	r0, [sl, #8]
   26834:	add	r1, r1, r0
   26838:	add	r1, r1, #64	; 0x40
   2683c:	add	r6, r6, #1
   26840:	add	r2, r6, r2
   26844:	cmp	r2, #19
   26848:	addgt	ip, ip, #4
   2684c:	mov	r2, #0
   26850:	umull	sl, fp, r4, lr
   26854:	umull	r8, r9, r3, r7
   26858:	umull	r4, r5, r4, r7
   2685c:	mov	r6, r5
   26860:	mov	r7, r2
   26864:	adds	r0, r6, r8
   26868:	adc	r4, r2, r2
   2686c:	adds	r0, r0, #-2147483648	; 0x80000000
   26870:	adc	r4, r4, r2
   26874:	adds	r0, r0, sl
   26878:	adc	r4, r4, r2
   2687c:	mov	r0, r4
   26880:	mov	r5, r2
   26884:	mov	r8, r2
   26888:	adds	r2, r9, fp
   2688c:	str	r2, [sp, #8]
   26890:	adc	r2, r7, r7
   26894:	str	r2, [sp, #12]
   26898:	ldrd	r6, [sp, #8]
   2689c:	umlal	r6, r7, lr, r3
   268a0:	adds	r0, r0, r6
   268a4:	adc	r5, r5, r7
   268a8:	ldr	r3, [sp, #44]	; 0x2c
   268ac:	add	r1, r1, r3
   268b0:	add	r6, r1, #64	; 0x40
   268b4:	cmp	ip, r8
   268b8:	movne	r7, #9
   268bc:	moveq	r7, #8
   268c0:	add	r7, ip, r7
   268c4:	str	r0, [sp, #72]	; 0x48
   268c8:	str	r5, [sp, #76]	; 0x4c
   268cc:	str	r6, [sp, #80]	; 0x50
   268d0:	ldrd	r2, [sp, #80]	; 0x50
   268d4:	strd	r2, [sp]
   268d8:	add	r3, sp, #72	; 0x48
   268dc:	ldm	r3, {r2, r3}
   268e0:	add	r0, sp, #56	; 0x38
   268e4:	bl	265d8 <flatcc_emitter_copy_buffer@@Base+0xe4>
   268e8:	ldr	lr, [sp, #56]	; 0x38
   268ec:	str	lr, [sp, #72]	; 0x48
   268f0:	ldr	r3, [sp, #60]	; 0x3c
   268f4:	str	r3, [sp, #76]	; 0x4c
   268f8:	mov	ip, r3
   268fc:	ldr	r4, [sp, #64]	; 0x40
   26900:	sub	r0, r6, r4
   26904:	lsl	r0, r7, r0
   26908:	add	r2, r4, #64	; 0x40
   2690c:	movw	r3, #64526	; 0xfc0e
   26910:	movt	r3, #65535	; 0xffff
   26914:	cmp	r2, r3
   26918:	movge	r5, #0
   2691c:	bge	26a00 <grisu3_diy_fp_encode_double@@Base+0x320>
   26920:	mvn	r3, #1072	; 0x430
   26924:	cmp	r2, r3
   26928:	blt	269d0 <grisu3_diy_fp_encode_double@@Base+0x2f0>
   2692c:	add	r3, r4, #1136	; 0x470
   26930:	add	r3, r3, #2
   26934:	rsb	r5, r3, #64	; 0x40
   26938:	cmp	r5, #60	; 0x3c
   2693c:	bgt	269d4 <grisu3_diy_fp_encode_double@@Base+0x2f4>
   26940:	b	26a00 <grisu3_diy_fp_encode_double@@Base+0x320>
   26944:	ldr	r3, [pc, #652]	; 26bd8 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   26948:	mov	r2, #80	; 0x50
   2694c:	movw	r1, #51988	; 0xcb14
   26950:	movt	r1, #2
   26954:	movw	r0, #52076	; 0xcb6c
   26958:	movt	r0, #2
   2695c:	bl	12684 <__assert_fail@plt>
   26960:	ldr	r3, [pc, #624]	; 26bd8 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   26964:	mov	r2, #81	; 0x51
   26968:	movw	r1, #51988	; 0xcb14
   2696c:	movt	r1, #2
   26970:	movw	r0, #52108	; 0xcb8c
   26974:	movt	r0, #2
   26978:	bl	12684 <__assert_fail@plt>
   2697c:	ldr	r3, [pc, #596]	; 26bd8 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   26980:	mov	r2, #88	; 0x58
   26984:	movw	r1, #51988	; 0xcb14
   26988:	movt	r1, #2
   2698c:	movw	r0, #52152	; 0xcbb8
   26990:	movt	r0, #2
   26994:	bl	12684 <__assert_fail@plt>
   26998:	ldr	r3, [pc, #568]	; 26bd8 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2699c:	mov	r2, #89	; 0x59
   269a0:	movw	r1, #51988	; 0xcb14
   269a4:	movt	r1, #2
   269a8:	movw	r0, #52168	; 0xcbc8
   269ac:	movt	r0, #2
   269b0:	bl	12684 <__assert_fail@plt>
   269b4:	ldr	r3, [pc, #544]	; 26bdc <grisu3_diy_fp_encode_double@@Base+0x4fc>
   269b8:	mov	r2, #185	; 0xb9
   269bc:	movw	r1, #51988	; 0xcb14
   269c0:	movt	r1, #2
   269c4:	movw	r0, #52196	; 0xcbe4
   269c8:	movt	r0, #2
   269cc:	bl	12684 <__assert_fail@plt>
   269d0:	mov	r3, #0
   269d4:	rsb	r3, r3, #2
   269d8:	rsb	r1, r3, #32
   269dc:	sub	r2, r3, #32
   269e0:	lsr	lr, lr, r3
   269e4:	orr	lr, lr, ip, lsl r1
   269e8:	orr	lr, lr, ip, lsr r2
   269ec:	lsr	ip, ip, r3
   269f0:	add	r4, r4, r3
   269f4:	asr	r0, r0, r3
   269f8:	add	r0, r0, #9
   269fc:	mov	r5, #62	; 0x3e
   26a00:	rsb	r6, r5, #32
   26a04:	sub	r1, r5, #32
   26a08:	lsr	sl, lr, r5
   26a0c:	orr	sl, sl, ip, lsl r6
   26a10:	orr	sl, sl, ip, lsr r1
   26a14:	lsr	fp, ip, r5
   26a18:	add	r4, r5, r4
   26a1c:	sub	ip, r5, #1
   26a20:	mov	r1, #1
   26a24:	and	r1, lr, r1, lsl ip
   26a28:	lsl	r1, r1, #3
   26a2c:	mov	lr, #8
   26a30:	lsl	ip, lr, ip
   26a34:	add	lr, r0, ip
   26a38:	cmp	lr, r5
   26a3c:	bgt	26a70 <grisu3_diy_fp_encode_double@@Base+0x390>
   26a40:	adds	sl, sl, #1
   26a44:	adc	fp, fp, #0
   26a48:	mov	r6, #0
   26a4c:	and	r7, fp, #2097152	; 0x200000
   26a50:	orrs	r3, r6, r7
   26a54:	beq	26a70 <grisu3_diy_fp_encode_double@@Base+0x390>
   26a58:	lsr	r5, sl, #1
   26a5c:	orr	r5, r5, fp, lsl #31
   26a60:	lsr	r6, fp, #1
   26a64:	mov	sl, r5
   26a68:	mov	fp, r6
   26a6c:	add	r4, r4, #1
   26a70:	mvn	r6, #0
   26a74:	movw	r7, #65535	; 0xffff
   26a78:	movt	r7, #31
   26a7c:	cmp	fp, r7
   26a80:	cmpeq	sl, r6
   26a84:	bls	26abc <grisu3_diy_fp_encode_double@@Base+0x3dc>
   26a88:	mov	r2, sl
   26a8c:	mov	r3, fp
   26a90:	lsr	r5, r2, #1
   26a94:	orr	r5, r5, r3, lsl #31
   26a98:	lsr	r8, r3, #1
   26a9c:	mov	r2, r5
   26aa0:	mov	r3, r8
   26aa4:	add	r4, r4, #1
   26aa8:	cmp	r8, r7
   26aac:	cmpeq	r5, r6
   26ab0:	bhi	26a90 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   26ab4:	mov	sl, r5
   26ab8:	mov	fp, r8
   26abc:	movw	r5, #64462	; 0xfbce
   26ac0:	movt	r5, #65535	; 0xffff
   26ac4:	cmp	r4, r5
   26ac8:	blt	26bc8 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   26acc:	mvn	r5, #1072	; 0x430
   26ad0:	cmp	r4, r5
   26ad4:	blt	26b90 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   26ad8:	mov	r6, #0
   26adc:	and	r7, fp, #1048576	; 0x100000
   26ae0:	orrs	r3, r6, r7
   26ae4:	bne	26b3c <grisu3_diy_fp_encode_double@@Base+0x45c>
   26ae8:	sub	r5, r4, #1
   26aec:	movw	r7, #64462	; 0xfbce
   26af0:	movt	r7, #65535	; 0xffff
   26af4:	mov	r8, #0
   26af8:	mov	r2, sl
   26afc:	mov	r3, fp
   26b00:	mov	sl, r7
   26b04:	adds	r4, r2, r2
   26b08:	adc	r9, r3, r3
   26b0c:	mov	r2, r4
   26b10:	mov	r3, r9
   26b14:	mov	r4, r5
   26b18:	cmp	r5, sl
   26b1c:	beq	26ba4 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   26b20:	mov	r6, r8
   26b24:	and	r7, r9, #1048576	; 0x100000
   26b28:	sub	r5, r5, #1
   26b2c:	orrs	r9, r6, r7
   26b30:	beq	26b04 <grisu3_diy_fp_encode_double@@Base+0x424>
   26b34:	mov	sl, r2
   26b38:	mov	fp, r3
   26b3c:	add	r4, r4, #1072	; 0x430
   26b40:	add	r4, r4, #3
   26b44:	ubfx	r3, fp, #0, #20
   26b48:	mov	r6, sl
   26b4c:	orr	r7, r3, r4, lsl #20
   26b50:	ldr	r3, [sp, #132]	; 0x84
   26b54:	strd	r6, [r3]
   26b58:	sub	r0, ip, r0
   26b5c:	cmp	lr, r1
   26b60:	movgt	lr, #0
   26b64:	movle	lr, #1
   26b68:	cmp	r0, r1
   26b6c:	movlt	r0, lr
   26b70:	orrge	r0, lr, #1
   26b74:	add	sp, sp, #92	; 0x5c
   26b78:	ldrd	r4, [sp]
   26b7c:	ldrd	r6, [sp, #8]
   26b80:	ldrd	r8, [sp, #16]
   26b84:	ldrd	sl, [sp, #24]
   26b88:	add	sp, sp, #32
   26b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   26b90:	movw	r5, #64462	; 0xfbce
   26b94:	movt	r5, #65535	; 0xffff
   26b98:	cmp	r4, r5
   26b9c:	bne	26b3c <grisu3_diy_fp_encode_double@@Base+0x45c>
   26ba0:	b	26bac <grisu3_diy_fp_encode_double@@Base+0x4cc>
   26ba4:	mov	sl, r2
   26ba8:	mov	fp, r9
   26bac:	mov	r4, #0
   26bb0:	and	r5, fp, #1048576	; 0x100000
   26bb4:	orrs	r3, r4, r5
   26bb8:	beq	26b44 <grisu3_diy_fp_encode_double@@Base+0x464>
   26bbc:	movw	r4, #64462	; 0xfbce
   26bc0:	movt	r4, #65535	; 0xffff
   26bc4:	b	26b3c <grisu3_diy_fp_encode_double@@Base+0x45c>
   26bc8:	mov	r6, #0
   26bcc:	mov	r7, #0
   26bd0:	b	26b50 <grisu3_diy_fp_encode_double@@Base+0x470>
   26bd4:	strdeq	ip, [r2], -r8
   26bd8:	andeq	ip, r2, r8, asr #4
   26bdc:	ldrdeq	ip, [r2], -r8
   26be0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26be4:	strd	r6, [sp, #8]
   26be8:	strd	r8, [sp, #16]
   26bec:	strd	sl, [sp, #24]
   26bf0:	str	lr, [sp, #32]
   26bf4:	sub	sp, sp, #44	; 0x2c
   26bf8:	mov	ip, r2
   26bfc:	str	r2, [sp, #12]
   26c00:	mov	r2, #0
   26c04:	mov	r3, #0
   26c08:	strd	r2, [ip]
   26c0c:	cmp	r1, #1000	; 0x3e8
   26c10:	addle	r1, r1, #1
   26c14:	addle	r1, r0, r1
   26c18:	addgt	r1, r0, #1000	; 0x3e8
   26c1c:	addgt	r1, r1, #1
   26c20:	cmp	r1, r0
   26c24:	moveq	r6, r0
   26c28:	beq	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   26c2c:	ldrb	r3, [r0]
   26c30:	cmp	r3, #45	; 0x2d
   26c34:	movne	r3, r0
   26c38:	movne	r2, #0
   26c3c:	strne	r2, [sp, #16]
   26c40:	beq	26d2c <grisu3_diy_fp_encode_double@@Base+0x64c>
   26c44:	ldrb	r4, [r3]
   26c48:	cmp	r4, #48	; 0x30
   26c4c:	beq	26d44 <grisu3_diy_fp_encode_double@@Base+0x664>
   26c50:	sub	r2, r4, #49	; 0x31
   26c54:	uxtb	r2, r2
   26c58:	cmp	r2, #8
   26c5c:	bhi	26d9c <grisu3_diy_fp_encode_double@@Base+0x6bc>
   26c60:	add	ip, r3, #1
   26c64:	sub	r4, r4, #48	; 0x30
   26c68:	asr	r5, r4, #31
   26c6c:	cmp	r1, ip
   26c70:	beq	2741c <grisu3_diy_fp_encode_double@@Base+0xd3c>
   26c74:	ldrb	sl, [ip]
   26c78:	sub	r3, sl, #48	; 0x30
   26c7c:	uxtb	r3, r3
   26c80:	cmp	r3, #9
   26c84:	movhi	r6, ip
   26c88:	bhi	275c4 <grisu3_diy_fp_encode_double@@Base+0xee4>
   26c8c:	add	r2, ip, #1
   26c90:	mov	lr, r1
   26c94:	add	r9, pc, #964	; 0x3c4
   26c98:	ldrd	r8, [r9]
   26c9c:	mov	r6, r2
   26ca0:	lsl	fp, r5, #2
   26ca4:	lsl	r3, r4, #2
   26ca8:	orr	r7, fp, r4, lsr #30
   26cac:	adds	r3, r3, r4
   26cb0:	adc	r7, r7, r5
   26cb4:	adds	r3, r3, r3
   26cb8:	adc	r7, r7, r7
   26cbc:	uxtb	sl, sl
   26cc0:	mov	fp, #0
   26cc4:	adds	r3, r3, sl
   26cc8:	adc	r7, r7, fp
   26ccc:	subs	r4, r3, #48	; 0x30
   26cd0:	sbc	r5, r7, #0
   26cd4:	cmp	r2, lr
   26cd8:	beq	27424 <grisu3_diy_fp_encode_double@@Base+0xd44>
   26cdc:	ldrb	sl, [r2], #1
   26ce0:	sub	r3, sl, #48	; 0x30
   26ce4:	uxtb	r3, r3
   26ce8:	cmp	r3, #9
   26cec:	bhi	275c4 <grisu3_diy_fp_encode_double@@Base+0xee4>
   26cf0:	cmp	r5, r9
   26cf4:	cmpeq	r4, r8
   26cf8:	bls	26c9c <grisu3_diy_fp_encode_double@@Base+0x5bc>
   26cfc:	cmp	sl, #52	; 0x34
   26d00:	movls	sl, #0
   26d04:	movhi	sl, #1
   26d08:	adds	r4, r4, sl
   26d0c:	adc	r5, r5, #0
   26d10:	sub	r7, r6, ip
   26d14:	cmp	r1, r6
   26d18:	moveq	r6, #0
   26d1c:	beq	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   26d20:	mov	r3, #1
   26d24:	str	r3, [sp, #20]
   26d28:	b	275d0 <grisu3_diy_fp_encode_double@@Base+0xef0>
   26d2c:	add	r3, r0, #1
   26d30:	cmp	r1, r3
   26d34:	beq	27404 <grisu3_diy_fp_encode_double@@Base+0xd24>
   26d38:	mov	r2, #1
   26d3c:	str	r2, [sp, #16]
   26d40:	b	26c44 <grisu3_diy_fp_encode_double@@Base+0x564>
   26d44:	add	ip, r3, #1
   26d48:	cmp	r1, ip
   26d4c:	moveq	r6, #0
   26d50:	beq	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   26d54:	ldrb	r2, [r3, #1]
   26d58:	orr	lr, r2, #32
   26d5c:	cmp	lr, #120	; 0x78
   26d60:	beq	2740c <grisu3_diy_fp_encode_double@@Base+0xd2c>
   26d64:	cmp	r2, #48	; 0x30
   26d68:	addeq	r3, r3, #2
   26d6c:	moveq	lr, r1
   26d70:	bne	26d90 <grisu3_diy_fp_encode_double@@Base+0x6b0>
   26d74:	mov	ip, r3
   26d78:	cmp	r3, lr
   26d7c:	beq	27414 <grisu3_diy_fp_encode_double@@Base+0xd34>
   26d80:	add	r3, r3, #1
   26d84:	ldrb	r2, [ip]
   26d88:	cmp	r2, #48	; 0x30
   26d8c:	beq	26d74 <grisu3_diy_fp_encode_double@@Base+0x694>
   26d90:	mov	r4, #0
   26d94:	mov	r5, #0
   26d98:	b	26c74 <grisu3_diy_fp_encode_double@@Base+0x594>
   26d9c:	ldr	r3, [sp, #16]
   26da0:	cmp	r3, #0
   26da4:	moveq	r6, r0
   26da8:	movne	r6, #0
   26dac:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   26db0:	add	lr, ip, #1
   26db4:	add	r2, r6, #1
   26db8:	cmp	r1, r2
   26dbc:	beq	27450 <grisu3_diy_fp_encode_double@@Base+0xd70>
   26dc0:	ldrb	r3, [r6, #1]
   26dc4:	sub	r3, r3, #48	; 0x30
   26dc8:	uxtb	r3, r3
   26dcc:	cmp	r3, #9
   26dd0:	bhi	275a8 <grisu3_diy_fp_encode_double@@Base+0xec8>
   26dd4:	add	r2, r6, #2
   26dd8:	mov	r9, r1
   26ddc:	sub	sl, ip, r6
   26de0:	add	ip, sl, r2
   26de4:	mov	lr, r2
   26de8:	cmp	r2, r9
   26dec:	beq	27458 <grisu3_diy_fp_encode_double@@Base+0xd78>
   26df0:	add	r2, r2, #1
   26df4:	ldrb	r3, [lr]
   26df8:	sub	r3, r3, #48	; 0x30
   26dfc:	uxtb	r3, r3
   26e00:	cmp	r3, #9
   26e04:	bls	26de0 <grisu3_diy_fp_encode_double@@Base+0x700>
   26e08:	mov	r6, lr
   26e0c:	mov	r3, #1
   26e10:	str	r3, [sp, #20]
   26e14:	b	2761c <grisu3_diy_fp_encode_double@@Base+0xf3c>
   26e18:	add	r2, r6, #1
   26e1c:	mov	sl, r2
   26e20:	ldrb	r8, [r6, #1]
   26e24:	sub	r3, r8, #48	; 0x30
   26e28:	uxtb	r3, r3
   26e2c:	cmp	r3, #9
   26e30:	movhi	r6, #0
   26e34:	bhi	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   26e38:	cmp	r1, r2
   26e3c:	beq	27460 <grisu3_diy_fp_encode_double@@Base+0xd80>
   26e40:	add	r3, pc, #536	; 0x218
   26e44:	ldrd	r2, [r3]
   26e48:	cmp	r5, r3
   26e4c:	cmpeq	r4, r2
   26e50:	bhi	276b4 <grisu3_diy_fp_encode_double@@Base+0xfd4>
   26e54:	add	lr, r6, #2
   26e58:	add	r6, r6, ip
   26e5c:	add	r6, r6, #1
   26e60:	str	r1, [sp, #24]
   26e64:	mov	r2, r1
   26e68:	str	r0, [sp, #28]
   26e6c:	mov	fp, lr
   26e70:	lsl	r9, r5, #2
   26e74:	lsl	r3, r4, #2
   26e78:	orr	ip, r9, r4, lsr #30
   26e7c:	adds	r3, r3, r4
   26e80:	adc	ip, ip, r5
   26e84:	adds	r3, r3, r3
   26e88:	adc	ip, ip, ip
   26e8c:	uxtb	r8, r8
   26e90:	mov	r9, #0
   26e94:	adds	r3, r3, r8
   26e98:	adc	ip, ip, r9
   26e9c:	subs	r4, r3, #48	; 0x30
   26ea0:	sbc	r5, ip, #0
   26ea4:	sub	ip, r6, lr
   26ea8:	cmp	lr, r2
   26eac:	beq	27468 <grisu3_diy_fp_encode_double@@Base+0xd88>
   26eb0:	ldrb	r8, [lr], #1
   26eb4:	sub	r3, r8, #48	; 0x30
   26eb8:	uxtb	r3, r3
   26ebc:	cmp	r3, #9
   26ec0:	bhi	26f20 <grisu3_diy_fp_encode_double@@Base+0x840>
   26ec4:	add	r1, pc, #404	; 0x194
   26ec8:	ldrd	r0, [r1]
   26ecc:	cmp	r5, r1
   26ed0:	cmpeq	r4, r0
   26ed4:	bls	26e6c <grisu3_diy_fp_encode_double@@Base+0x78c>
   26ed8:	ldr	r1, [sp, #24]
   26edc:	ldr	r0, [sp, #28]
   26ee0:	ldr	r3, [sp, #20]
   26ee4:	cmp	r3, #0
   26ee8:	bne	27594 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   26eec:	cmp	r8, #52	; 0x34
   26ef0:	movls	r2, #0
   26ef4:	movhi	r2, #1
   26ef8:	adds	r4, r4, r2
   26efc:	adc	r5, r5, #0
   26f00:	sub	r3, fp, sl
   26f04:	add	r7, r7, r3
   26f08:	cmp	r1, fp
   26f0c:	moveq	r6, #0
   26f10:	beq	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   26f14:	mov	r3, #1
   26f18:	str	r3, [sp, #20]
   26f1c:	b	26f30 <grisu3_diy_fp_encode_double@@Base+0x850>
   26f20:	ldr	r1, [sp, #24]
   26f24:	ldr	r0, [sp, #28]
   26f28:	sub	r3, fp, sl
   26f2c:	add	r7, r7, r3
   26f30:	ldrb	r3, [fp]
   26f34:	cmp	r3, #48	; 0x30
   26f38:	bne	2758c <grisu3_diy_fp_encode_double@@Base+0xeac>
   26f3c:	add	r3, fp, #1
   26f40:	mov	r2, r1
   26f44:	sub	fp, ip, fp
   26f48:	add	ip, fp, r3
   26f4c:	mov	r6, r3
   26f50:	cmp	r2, r3
   26f54:	beq	27470 <grisu3_diy_fp_encode_double@@Base+0xd90>
   26f58:	add	r3, r3, #1
   26f5c:	ldrb	lr, [r6]
   26f60:	cmp	lr, #48	; 0x30
   26f64:	beq	26f48 <grisu3_diy_fp_encode_double@@Base+0x868>
   26f68:	ldrb	r3, [r6]
   26f6c:	sub	r3, r3, #49	; 0x31
   26f70:	uxtb	r3, r3
   26f74:	cmp	r3, #8
   26f78:	bhi	27628 <grisu3_diy_fp_encode_double@@Base+0xf48>
   26f7c:	add	r2, r6, #1
   26f80:	cmp	r1, r2
   26f84:	beq	27478 <grisu3_diy_fp_encode_double@@Base+0xd98>
   26f88:	ldrb	r3, [r6, #1]
   26f8c:	sub	r3, r3, #48	; 0x30
   26f90:	uxtb	r3, r3
   26f94:	cmp	r3, #9
   26f98:	bhi	2757c <grisu3_diy_fp_encode_double@@Base+0xe9c>
   26f9c:	add	r2, r6, #2
   26fa0:	mov	lr, r1
   26fa4:	mov	r6, r2
   26fa8:	cmp	lr, r2
   26fac:	beq	27480 <grisu3_diy_fp_encode_double@@Base+0xda0>
   26fb0:	add	r2, r2, #1
   26fb4:	ldrb	r3, [r6]
   26fb8:	sub	r3, r3, #48	; 0x30
   26fbc:	uxtb	r3, r3
   26fc0:	cmp	r3, #9
   26fc4:	bls	26fa4 <grisu3_diy_fp_encode_double@@Base+0x8c4>
   26fc8:	mov	r3, #1
   26fcc:	str	r3, [sp, #20]
   26fd0:	b	27628 <grisu3_diy_fp_encode_double@@Base+0xf48>
   26fd4:	add	r2, r6, #2
   26fd8:	cmp	r1, r2
   26fdc:	beq	27488 <grisu3_diy_fp_encode_double@@Base+0xda8>
   26fe0:	mov	fp, #0
   26fe4:	b	2766c <grisu3_diy_fp_encode_double@@Base+0xf8c>
   26fe8:	add	r2, r6, #2
   26fec:	cmp	r1, r2
   26ff0:	beq	27490 <grisu3_diy_fp_encode_double@@Base+0xdb0>
   26ff4:	mov	fp, #1
   26ff8:	b	2766c <grisu3_diy_fp_encode_double@@Base+0xf8c>
   26ffc:	mov	r6, r2
   27000:	cmp	sl, r2
   27004:	beq	274a0 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   27008:	ldrb	r9, [r2], #1
   2700c:	sub	lr, r9, #48	; 0x30
   27010:	uxtb	lr, lr
   27014:	cmp	lr, #9
   27018:	bhi	274b8 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   2701c:	cmp	r3, #32768	; 0x8000
   27020:	bge	26ffc <grisu3_diy_fp_encode_double@@Base+0x91c>
   27024:	add	r3, r3, r3, lsl #2
   27028:	add	r3, r9, r3, lsl #1
   2702c:	sub	r3, r3, #48	; 0x30
   27030:	b	26ffc <grisu3_diy_fp_encode_double@@Base+0x91c>
   27034:	mov	r2, #0
   27038:	mov	r3, #0
   2703c:	movt	r3, #32752	; 0x7ff0
   27040:	strd	r2, [r9]
   27044:	ldr	r3, [sp, #16]
   27048:	cmp	r3, #0
   2704c:	beq	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27050:	vldr	d7, [r9]
   27054:	vneg.f64	d7, d7
   27058:	vstr	d7, [r9]
   2705c:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27060:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   27064:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   27068:	andeq	r0, r0, r0
   2706c:	sbcmi	r8, r3, r0, lsl #16
   27070:	andeq	r0, r0, r0
   27074:	addmi	r4, pc, r0
   27078:	andeq	r0, r0, r0
   2707c:	smlawbmi	lr, r0, r4, r8
   27080:	andeq	r0, r0, r0
   27084:	orrsmi	sp, r7, r4, lsl #15
   27088:	andcs	r0, r0, r0
   2708c:	andmi	sl, r2, #95	; 0x5f
   27090:	andge	r0, r0, #0
   27094:	rsbmi	r1, sp, #148, 20	; 0x94000
   27098:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2709c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   270a0:	strbcc	r8, [r0, r0]!
   270a4:	movtmi	ip, #4985	; 0x1379
   270a8:	strbvs	ip, [lr, -r0, lsl #16]
   270ac:			; <UNDEFINED> instruction: 0x43abc16d
   270b0:	ldmvc	r5!, {r6, sl, fp, pc}
   270b4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   270b8:			; <UNDEFINED> instruction: 0x064dd592
   270bc:	strmi	pc, [r0], #207	; 0xcf
   270c0:	usatle	lr, #2, r0, asr #30
   270c4:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   270c8:	addsvs	r3, r1, r0, lsl #26
   270cc:	mvnmi	r5, #228, 16	; 0xe40000
   270d0:	ldrbhi	sl, [r8]
   270d4:	cmnmi	r6, #1459617792	; 0x57000000
   270d8:	ldrtcs	r0, [r4], -r0
   270dc:	movwmi	r6, #52213	; 0xcbf5
   270e0:	strb	r0, [r0, #-0]
   270e4:	adcmi	r3, r2, #156	; 0x9c
   270e8:	stmda	r0, {}	; <UNPREDICTABLE>
   270ec:	eorsmi	r4, r7, #7733248	; 0x760000
   270f0:	andeq	r0, r0, r0
   270f4:	bicmi	ip, sp, r5, ror #26
   270f8:	andeq	r0, r0, r0
   270fc:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   27100:	andeq	r0, r0, r0
   27104:	rscsmi	r6, r8, r0, lsl #20
   27108:	andeq	r0, r0, r0
   2710c:	subsmi	r0, r9, r0
   27110:	andeq	r0, r0, r0
   27114:	eormi	r0, r4, r0
   27118:	mov	r0, r4
   2711c:	mov	r1, r5
   27120:	bl	2b108 <flatcc_json_parser_struct_as_root@@Base+0x438>
   27124:	vmov	d7, r0, r1
   27128:	sub	r3, r8, r7
   2712c:	add	r3, r3, #22
   27130:	cmp	r3, #44	; 0x2c
   27134:	ldrls	pc, [pc, r3, lsl #2]
   27138:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2713c:	strdeq	r7, [r2], -r0
   27140:	andeq	r7, r2, r0, lsl #4
   27144:	andeq	r7, r2, ip, lsl #4
   27148:	andeq	r7, r2, r8, lsl r2
   2714c:	andeq	r7, r2, r4, lsr #4
   27150:	andeq	r7, r2, r0, lsr r2
   27154:	andeq	r7, r2, ip, lsr r2
   27158:	andeq	r7, r2, r8, asr #4
   2715c:	andeq	r7, r2, r4, asr r2
   27160:	andeq	r7, r2, r0, ror #4
   27164:	andeq	r7, r2, ip, ror #4
   27168:	andeq	r7, r2, r8, ror r2
   2716c:	andeq	r7, r2, r4, lsl #5
   27170:	muleq	r2, r0, r2
   27174:	muleq	r2, ip, r2
   27178:	andeq	r7, r2, r8, lsr #5
   2717c:			; <UNDEFINED> instruction: 0x000272b4
   27180:	andeq	r7, r2, r0, asr #5
   27184:	andeq	r7, r2, ip, asr #5
   27188:	ldrdeq	r7, [r2], -r8
   2718c:	andeq	r7, r2, r4, ror #5
   27190:	strdeq	r7, [r2], -r0
   27194:	strdeq	r7, [r2], -r8
   27198:	strdeq	r7, [r2], -ip
   2719c:	andeq	r7, r2, r8, lsl #6
   271a0:	andeq	r7, r2, r4, lsl r3
   271a4:	andeq	r7, r2, r0, lsr #6
   271a8:	andeq	r7, r2, ip, lsr #6
   271ac:	andeq	r7, r2, r8, lsr r3
   271b0:	andeq	r7, r2, r4, asr #6
   271b4:	andeq	r7, r2, r0, asr r3
   271b8:	andeq	r7, r2, ip, asr r3
   271bc:	andeq	r7, r2, r8, ror #6
   271c0:	andeq	r7, r2, r4, ror r3
   271c4:	andeq	r7, r2, r0, lsl #7
   271c8:	andeq	r7, r2, ip, lsl #7
   271cc:	muleq	r2, r8, r3
   271d0:	andeq	r7, r2, r4, lsr #7
   271d4:			; <UNDEFINED> instruction: 0x000273b0
   271d8:			; <UNDEFINED> instruction: 0x000273bc
   271dc:	andeq	r7, r2, r8, asr #7
   271e0:	ldrdeq	r7, [r2], -r4
   271e4:	andeq	r7, r2, r0, ror #7
   271e8:	andeq	r7, r2, ip, ror #7
   271ec:	strdeq	r7, [r2], -r8
   271f0:	vldr	d6, [pc, #-320]	; 270b8 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   271f4:	vdiv.f64	d7, d7, d6
   271f8:	vstr	d7, [r9]
   271fc:	b	27044 <grisu3_diy_fp_encode_double@@Base+0x964>
   27200:	vldr	d6, [pc, #-328]	; 270c0 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   27204:	vdiv.f64	d7, d7, d6
   27208:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2720c:	vldr	d6, [pc, #-356]	; 270b0 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   27210:	vdiv.f64	d7, d7, d6
   27214:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27218:	vldr	d6, [pc, #-344]	; 270c8 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   2721c:	vdiv.f64	d7, d7, d6
   27220:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27224:	vldr	d6, [pc, #-388]	; 270a8 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   27228:	vdiv.f64	d7, d7, d6
   2722c:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27230:	vldr	d6, [pc, #-360]	; 270d0 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   27234:	vdiv.f64	d7, d7, d6
   27238:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2723c:	vldr	d6, [pc, #-420]	; 270a0 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   27240:	vdiv.f64	d7, d7, d6
   27244:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27248:	vldr	d6, [pc, #-376]	; 270d8 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   2724c:	vdiv.f64	d7, d7, d6
   27250:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27254:	vldr	d6, [pc, #-452]	; 27098 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   27258:	vdiv.f64	d7, d7, d6
   2725c:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27260:	vldr	d6, [pc, #-392]	; 270e0 <grisu3_diy_fp_encode_double@@Base+0xa00>
   27264:	vdiv.f64	d7, d7, d6
   27268:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2726c:	vldr	d6, [pc, #-484]	; 27090 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   27270:	vdiv.f64	d7, d7, d6
   27274:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27278:	vldr	d6, [pc, #-408]	; 270e8 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2727c:	vdiv.f64	d7, d7, d6
   27280:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27284:	vldr	d6, [pc, #-516]	; 27088 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   27288:	vdiv.f64	d7, d7, d6
   2728c:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27290:	vldr	d6, [pc, #-424]	; 270f0 <grisu3_diy_fp_encode_double@@Base+0xa10>
   27294:	vdiv.f64	d7, d7, d6
   27298:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2729c:	vldr	d6, [pc, #-548]	; 27080 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   272a0:	vdiv.f64	d7, d7, d6
   272a4:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272a8:	vldr	d6, [pc, #-440]	; 270f8 <grisu3_diy_fp_encode_double@@Base+0xa18>
   272ac:	vdiv.f64	d7, d7, d6
   272b0:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272b4:	vldr	d6, [pc, #-580]	; 27078 <grisu3_diy_fp_encode_double@@Base+0x998>
   272b8:	vdiv.f64	d7, d7, d6
   272bc:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272c0:	vldr	d6, [pc, #-456]	; 27100 <grisu3_diy_fp_encode_double@@Base+0xa20>
   272c4:	vdiv.f64	d7, d7, d6
   272c8:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272cc:	vldr	d6, [pc, #-620]	; 27068 <grisu3_diy_fp_encode_double@@Base+0x988>
   272d0:	vdiv.f64	d7, d7, d6
   272d4:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272d8:	vldr	d6, [pc, #-624]	; 27070 <grisu3_diy_fp_encode_double@@Base+0x990>
   272dc:	vdiv.f64	d7, d7, d6
   272e0:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272e4:	vldr	d6, [pc, #-484]	; 27108 <grisu3_diy_fp_encode_double@@Base+0xa28>
   272e8:	vdiv.f64	d7, d7, d6
   272ec:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272f0:	vldr	d6, [pc, #-488]	; 27110 <grisu3_diy_fp_encode_double@@Base+0xa30>
   272f4:	vdiv.f64	d7, d7, d6
   272f8:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   272fc:	vldr	d6, [pc, #-500]	; 27110 <grisu3_diy_fp_encode_double@@Base+0xa30>
   27300:	vmul.f64	d7, d7, d6
   27304:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27308:	vldr	d6, [pc, #-520]	; 27108 <grisu3_diy_fp_encode_double@@Base+0xa28>
   2730c:	vmul.f64	d7, d7, d6
   27310:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27314:	vldr	d6, [pc, #-684]	; 27070 <grisu3_diy_fp_encode_double@@Base+0x990>
   27318:	vmul.f64	d7, d7, d6
   2731c:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27320:	vldr	d6, [pc, #-704]	; 27068 <grisu3_diy_fp_encode_double@@Base+0x988>
   27324:	vmul.f64	d7, d7, d6
   27328:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2732c:	vldr	d6, [pc, #-564]	; 27100 <grisu3_diy_fp_encode_double@@Base+0xa20>
   27330:	vmul.f64	d7, d7, d6
   27334:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27338:	vldr	d6, [pc, #-712]	; 27078 <grisu3_diy_fp_encode_double@@Base+0x998>
   2733c:	vmul.f64	d7, d7, d6
   27340:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27344:	vldr	d6, [pc, #-596]	; 270f8 <grisu3_diy_fp_encode_double@@Base+0xa18>
   27348:	vmul.f64	d7, d7, d6
   2734c:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27350:	vldr	d6, [pc, #-728]	; 27080 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   27354:	vmul.f64	d7, d7, d6
   27358:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2735c:	vldr	d6, [pc, #-628]	; 270f0 <grisu3_diy_fp_encode_double@@Base+0xa10>
   27360:	vmul.f64	d7, d7, d6
   27364:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27368:	vldr	d6, [pc, #-744]	; 27088 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   2736c:	vmul.f64	d7, d7, d6
   27370:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27374:	vldr	d6, [pc, #-660]	; 270e8 <grisu3_diy_fp_encode_double@@Base+0xa08>
   27378:	vmul.f64	d7, d7, d6
   2737c:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27380:	vldr	d6, [pc, #-760]	; 27090 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   27384:	vmul.f64	d7, d7, d6
   27388:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2738c:	vldr	d6, [pc, #-692]	; 270e0 <grisu3_diy_fp_encode_double@@Base+0xa00>
   27390:	vmul.f64	d7, d7, d6
   27394:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27398:	vldr	d6, [pc, #-776]	; 27098 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   2739c:	vmul.f64	d7, d7, d6
   273a0:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273a4:	vldr	d6, [pc, #-724]	; 270d8 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   273a8:	vmul.f64	d7, d7, d6
   273ac:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273b0:	vldr	d6, [pc, #-792]	; 270a0 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   273b4:	vmul.f64	d7, d7, d6
   273b8:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273bc:	vldr	d6, [pc, #-756]	; 270d0 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   273c0:	vmul.f64	d7, d7, d6
   273c4:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273c8:	vldr	d6, [pc, #-808]	; 270a8 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   273cc:	vmul.f64	d7, d7, d6
   273d0:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273d4:	vldr	d6, [pc, #-788]	; 270c8 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   273d8:	vmul.f64	d7, d7, d6
   273dc:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273e0:	vldr	d6, [pc, #-824]	; 270b0 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   273e4:	vmul.f64	d7, d7, d6
   273e8:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273ec:	vldr	d6, [pc, #-820]	; 270c0 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   273f0:	vmul.f64	d7, d7, d6
   273f4:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   273f8:	vldr	d6, [pc, #-840]	; 270b8 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   273fc:	vmul.f64	d7, d7, d6
   27400:	b	271f8 <grisu3_diy_fp_encode_double@@Base+0xb18>
   27404:	mov	r6, #0
   27408:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2740c:	mov	r6, r0
   27410:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27414:	mov	r6, #0
   27418:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2741c:	mov	r6, #0
   27420:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27424:	mov	r6, #0
   27428:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2742c:	mov	r6, #0
   27430:	mov	r0, r6
   27434:	add	sp, sp, #44	; 0x2c
   27438:	ldrd	r4, [sp]
   2743c:	ldrd	r6, [sp, #8]
   27440:	ldrd	r8, [sp, #16]
   27444:	ldrd	sl, [sp, #24]
   27448:	add	sp, sp, #32
   2744c:	pop	{pc}		; (ldr pc, [sp], #4)
   27450:	mov	r6, #0
   27454:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27458:	mov	r6, #0
   2745c:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27460:	mov	r6, #0
   27464:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27468:	mov	r6, #0
   2746c:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27470:	mov	r6, #0
   27474:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27478:	mov	r6, #0
   2747c:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27480:	mov	r6, #0
   27484:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27488:	mov	r6, #0
   2748c:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27490:	mov	r6, #0
   27494:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27498:	mov	r6, #0
   2749c:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   274a0:	cmp	fp, #0
   274a4:	moveq	r6, #0
   274a8:	bne	274c0 <grisu3_diy_fp_encode_double@@Base+0xde0>
   274ac:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   274b0:	add	r8, ip, r3
   274b4:	b	274d0 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   274b8:	cmp	fp, #0
   274bc:	beq	274b0 <grisu3_diy_fp_encode_double@@Base+0xdd0>
   274c0:	rsb	r8, r3, #0
   274c4:	add	r8, ip, r8
   274c8:	cmp	r1, r6
   274cc:	beq	27498 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   274d0:	ldr	r9, [sp, #12]
   274d4:	mov	sl, r0
   274d8:	orrs	r3, r4, r5
   274dc:	moveq	r2, #1
   274e0:	movne	r2, #0
   274e4:	cmn	r8, #324	; 0x144
   274e8:	movge	r3, #0
   274ec:	movlt	r3, #1
   274f0:	orrs	r3, r2, r3
   274f4:	bne	27044 <grisu3_diy_fp_encode_double@@Base+0x964>
   274f8:	movw	r3, #310	; 0x136
   274fc:	cmp	r8, r3
   27500:	bgt	27034 <grisu3_diy_fp_encode_double@@Base+0x954>
   27504:	mvn	r2, #0
   27508:	movw	r3, #65535	; 0xffff
   2750c:	movt	r3, #31
   27510:	cmp	r5, r3
   27514:	cmpeq	r4, r2
   27518:	movls	r3, #1
   2751c:	movhi	r3, #0
   27520:	cmp	r8, #22
   27524:	movhi	r3, #0
   27528:	andls	r3, r3, #1
   2752c:	cmp	r3, #0
   27530:	bne	27118 <grisu3_diy_fp_encode_double@@Base+0xa38>
   27534:	str	r9, [sp, #4]
   27538:	ldr	r3, [sp, #20]
   2753c:	str	r3, [sp]
   27540:	mov	r3, r7
   27544:	mov	r2, r8
   27548:	mov	r0, r4
   2754c:	mov	r1, r5
   27550:	bl	266e0 <grisu3_diy_fp_encode_double@@Base>
   27554:	cmp	r0, #0
   27558:	bne	27044 <grisu3_diy_fp_encode_double@@Base+0x964>
   2755c:	add	r1, sp, #36	; 0x24
   27560:	mov	r0, sl
   27564:	bl	1263c <strtod@plt>
   27568:	vstr	d0, [r9]
   2756c:	ldr	r3, [sp, #36]	; 0x24
   27570:	cmp	r6, r3
   27574:	movcs	r6, r3
   27578:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2757c:	mov	r6, r2
   27580:	mov	r3, #1
   27584:	str	r3, [sp, #20]
   27588:	b	27628 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2758c:	mov	r6, fp
   27590:	b	26f68 <grisu3_diy_fp_encode_double@@Base+0x888>
   27594:	sub	r3, fp, sl
   27598:	add	r7, r7, r3
   2759c:	mov	r3, #1
   275a0:	str	r3, [sp, #20]
   275a4:	b	26f30 <grisu3_diy_fp_encode_double@@Base+0x850>
   275a8:	mov	ip, lr
   275ac:	mov	r6, r2
   275b0:	mov	r3, #1
   275b4:	str	r3, [sp, #20]
   275b8:	b	2761c <grisu3_diy_fp_encode_double@@Base+0xf3c>
   275bc:	mov	ip, #0
   275c0:	b	27608 <grisu3_diy_fp_encode_double@@Base+0xf28>
   275c4:	sub	r7, r6, ip
   275c8:	mov	r3, #0
   275cc:	str	r3, [sp, #20]
   275d0:	ldrb	r3, [r6]
   275d4:	cmp	r3, #48	; 0x30
   275d8:	bne	275bc <grisu3_diy_fp_encode_double@@Base+0xedc>
   275dc:	add	r3, r6, #1
   275e0:	mov	lr, r1
   275e4:	mov	ip, #0
   275e8:	add	ip, ip, #1
   275ec:	mov	r6, r3
   275f0:	cmp	r3, lr
   275f4:	beq	2742c <grisu3_diy_fp_encode_double@@Base+0xd4c>
   275f8:	add	r3, r3, #1
   275fc:	ldrb	r2, [r6]
   27600:	cmp	r2, #48	; 0x30
   27604:	beq	275e8 <grisu3_diy_fp_encode_double@@Base+0xf08>
   27608:	ldrb	r3, [r6]
   2760c:	sub	r3, r3, #49	; 0x31
   27610:	uxtb	r3, r3
   27614:	cmp	r3, #8
   27618:	bls	26db0 <grisu3_diy_fp_encode_double@@Base+0x6d0>
   2761c:	ldrb	r3, [r6]
   27620:	cmp	r3, #46	; 0x2e
   27624:	beq	26e18 <grisu3_diy_fp_encode_double@@Base+0x738>
   27628:	add	ip, r7, ip
   2762c:	ldrb	r3, [r6]
   27630:	orr	r3, r3, #32
   27634:	cmp	r3, #101	; 0x65
   27638:	movne	r8, #0
   2763c:	bne	274c4 <grisu3_diy_fp_encode_double@@Base+0xde4>
   27640:	sub	r3, r1, r6
   27644:	cmp	r3, #1
   27648:	movle	r6, #0
   2764c:	ble	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27650:	ldrb	r3, [r6, #1]
   27654:	cmp	r3, #43	; 0x2b
   27658:	beq	26fd4 <grisu3_diy_fp_encode_double@@Base+0x8f4>
   2765c:	cmp	r3, #45	; 0x2d
   27660:	beq	26fe8 <grisu3_diy_fp_encode_double@@Base+0x908>
   27664:	add	r2, r6, #1
   27668:	mov	fp, #0
   2766c:	ldrb	r8, [r2]
   27670:	sub	lr, r8, #48	; 0x30
   27674:	uxtb	lr, lr
   27678:	cmp	lr, #9
   2767c:	movhi	r6, #0
   27680:	bhi	27430 <grisu3_diy_fp_encode_double@@Base+0xd50>
   27684:	add	r6, r2, #1
   27688:	sub	r3, r8, #48	; 0x30
   2768c:	cmp	r1, r6
   27690:	beq	274a0 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   27694:	ldrb	r9, [r2, #1]
   27698:	sub	lr, r9, #48	; 0x30
   2769c:	uxtb	lr, lr
   276a0:	cmp	lr, #9
   276a4:	bhi	274b8 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   276a8:	add	r2, r2, #2
   276ac:	mov	sl, r1
   276b0:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x93c>
   276b4:	ldr	r3, [sp, #20]
   276b8:	cmp	r3, #0
   276bc:	movne	fp, sl
   276c0:	bne	27594 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   276c4:	cmp	r8, #52	; 0x34
   276c8:	movls	r2, #0
   276cc:	movhi	r2, #1
   276d0:	adds	r4, r4, r2
   276d4:	adc	r5, r5, #0
   276d8:	mov	fp, sl
   276dc:	mov	r3, #1
   276e0:	str	r3, [sp, #20]
   276e4:	b	26f30 <grisu3_diy_fp_encode_double@@Base+0x850>

000276e8 <flatcc_json_parser_error_string@@Base>:
   276e8:	cmp	r0, #34	; 0x22
   276ec:	ldrls	pc, [pc, r0, lsl #2]
   276f0:	b	27918 <flatcc_json_parser_error_string@@Base+0x230>
   276f4:	andeq	r7, r2, r4, lsr #18
   276f8:	andeq	r7, r2, r0, lsl #15
   276fc:	andeq	r7, r2, ip, lsl #15
   27700:	muleq	r2, r8, r7
   27704:	andeq	r7, r2, r4, lsr #15
   27708:			; <UNDEFINED> instruction: 0x000277b0
   2770c:			; <UNDEFINED> instruction: 0x000277bc
   27710:	andeq	r7, r2, r8, asr #15
   27714:	ldrdeq	r7, [r2], -r4
   27718:	andeq	r7, r2, r0, ror #15
   2771c:	andeq	r7, r2, ip, ror #15
   27720:	strdeq	r7, [r2], -r8
   27724:	andeq	r7, r2, r4, lsl #16
   27728:	andeq	r7, r2, r0, lsl r8
   2772c:	andeq	r7, r2, ip, lsl r8
   27730:	andeq	r7, r2, r8, lsr #16
   27734:	andeq	r7, r2, r4, lsr r8
   27738:	andeq	r7, r2, r0, asr #16
   2773c:	andeq	r7, r2, ip, asr #16
   27740:	andeq	r7, r2, r8, asr r8
   27744:	andeq	r7, r2, r4, ror #16
   27748:	andeq	r7, r2, r0, ror r8
   2774c:	andeq	r7, r2, ip, ror r8
   27750:	andeq	r7, r2, r8, lsl #17
   27754:	muleq	r2, r4, r8
   27758:	andeq	r7, r2, r0, lsr #17
   2775c:	andeq	r7, r2, ip, lsr #17
   27760:			; <UNDEFINED> instruction: 0x000278b8
   27764:	andeq	r7, r2, r4, asr #17
   27768:	ldrdeq	r7, [r2], -r0
   2776c:	ldrdeq	r7, [r2], -ip
   27770:	andeq	r7, r2, r8, ror #17
   27774:	strdeq	r7, [r2], -r4
   27778:	andeq	r7, r2, r0, lsl #18
   2777c:	andeq	r7, r2, ip, lsl #18
   27780:	movw	r0, #52924	; 0xcebc
   27784:	movt	r0, #2
   27788:	bx	lr
   2778c:	movw	r0, #52236	; 0xcc0c
   27790:	movt	r0, #2
   27794:	bx	lr
   27798:	movw	r0, #52252	; 0xcc1c
   2779c:	movt	r0, #2
   277a0:	bx	lr
   277a4:	movw	r0, #52268	; 0xcc2c
   277a8:	movt	r0, #2
   277ac:	bx	lr
   277b0:	movw	r0, #52284	; 0xcc3c
   277b4:	movt	r0, #2
   277b8:	bx	lr
   277bc:	movw	r0, #52308	; 0xcc54
   277c0:	movt	r0, #2
   277c4:	bx	lr
   277c8:	movw	r0, #52324	; 0xcc64
   277cc:	movt	r0, #2
   277d0:	bx	lr
   277d4:	movw	r0, #52336	; 0xcc70
   277d8:	movt	r0, #2
   277dc:	bx	lr
   277e0:	movw	r0, #52348	; 0xcc7c
   277e4:	movt	r0, #2
   277e8:	bx	lr
   277ec:	movw	r0, #52368	; 0xcc90
   277f0:	movt	r0, #2
   277f4:	bx	lr
   277f8:	movw	r0, #52388	; 0xcca4
   277fc:	movt	r0, #2
   27800:	bx	lr
   27804:	movw	r0, #52404	; 0xccb4
   27808:	movt	r0, #2
   2780c:	bx	lr
   27810:	movw	r0, #52424	; 0xccc8
   27814:	movt	r0, #2
   27818:	bx	lr
   2781c:	movw	r0, #52440	; 0xccd8
   27820:	movt	r0, #2
   27824:	bx	lr
   27828:	movw	r0, #52468	; 0xccf4
   2782c:	movt	r0, #2
   27830:	bx	lr
   27834:	movw	r0, #52488	; 0xcd08
   27838:	movt	r0, #2
   2783c:	bx	lr
   27840:	movw	r0, #52504	; 0xcd18
   27844:	movt	r0, #2
   27848:	bx	lr
   2784c:	movw	r0, #52524	; 0xcd2c
   27850:	movt	r0, #2
   27854:	bx	lr
   27858:	movw	r0, #52540	; 0xcd3c
   2785c:	movt	r0, #2
   27860:	bx	lr
   27864:	movw	r0, #52556	; 0xcd4c
   27868:	movt	r0, #2
   2786c:	bx	lr
   27870:	movw	r0, #52576	; 0xcd60
   27874:	movt	r0, #2
   27878:	bx	lr
   2787c:	movw	r0, #52592	; 0xcd70
   27880:	movt	r0, #2
   27884:	bx	lr
   27888:	movw	r0, #52608	; 0xcd80
   2788c:	movt	r0, #2
   27890:	bx	lr
   27894:	movw	r0, #52644	; 0xcda4
   27898:	movt	r0, #2
   2789c:	bx	lr
   278a0:	movw	r0, #52664	; 0xcdb8
   278a4:	movt	r0, #2
   278a8:	bx	lr
   278ac:	movw	r0, #52696	; 0xcdd8
   278b0:	movt	r0, #2
   278b4:	bx	lr
   278b8:	movw	r0, #52728	; 0xcdf8
   278bc:	movt	r0, #2
   278c0:	bx	lr
   278c4:	movw	r0, #52756	; 0xce14
   278c8:	movt	r0, #2
   278cc:	bx	lr
   278d0:	movw	r0, #52784	; 0xce30
   278d4:	movt	r0, #2
   278d8:	bx	lr
   278dc:	movw	r0, #52808	; 0xce48
   278e0:	movt	r0, #2
   278e4:	bx	lr
   278e8:	movw	r0, #52840	; 0xce68
   278ec:	movt	r0, #2
   278f0:	bx	lr
   278f4:	movw	r0, #52864	; 0xce80
   278f8:	movt	r0, #2
   278fc:	bx	lr
   27900:	movw	r0, #52892	; 0xce9c
   27904:	movt	r0, #2
   27908:	bx	lr
   2790c:	movw	r0, #52908	; 0xceac
   27910:	movt	r0, #2
   27914:	bx	lr
   27918:	movw	r0, #52224	; 0xcc00
   2791c:	movt	r0, #2
   27920:	bx	lr
   27924:	movw	r0, #52232	; 0xcc08
   27928:	movt	r0, #2
   2792c:	bx	lr

00027930 <flatcc_json_parser_set_error@@Base>:
   27930:	ldr	ip, [r0, #24]
   27934:	cmp	ip, #0
   27938:	bne	27954 <flatcc_json_parser_set_error@@Base+0x24>
   2793c:	str	r3, [r0, #24]
   27940:	ldr	r3, [r0, #4]
   27944:	sub	r3, r1, r3
   27948:	add	r3, r3, #1
   2794c:	str	r3, [r0, #20]
   27950:	str	r1, [r0, #36]	; 0x24
   27954:	mov	r0, r2
   27958:	bx	lr

0002795c <flatcc_json_parser_string_part@@Base>:
   2795c:	str	r4, [sp, #-8]!
   27960:	str	lr, [sp, #4]
   27964:	cmp	r1, r2
   27968:	beq	279fc <flatcc_json_parser_string_part@@Base+0xa0>
   2796c:	ldrb	ip, [r1]
   27970:	cmp	ip, #34	; 0x22
   27974:	cmpne	ip, #31
   27978:	movhi	r3, #1
   2797c:	movls	r3, #0
   27980:	cmp	ip, #92	; 0x5c
   27984:	moveq	r3, #0
   27988:	andne	r3, r3, #1
   2798c:	cmp	r3, #0
   27990:	beq	279d0 <flatcc_json_parser_string_part@@Base+0x74>
   27994:	add	r3, r1, #1
   27998:	mov	r4, r2
   2799c:	mov	r1, r3
   279a0:	cmp	r3, r4
   279a4:	beq	27a00 <flatcc_json_parser_string_part@@Base+0xa4>
   279a8:	ldrb	lr, [r3], #1
   279ac:	cmp	lr, #34	; 0x22
   279b0:	cmpne	lr, #31
   279b4:	movhi	ip, #1
   279b8:	movls	ip, #0
   279bc:	cmp	lr, #92	; 0x5c
   279c0:	moveq	ip, #0
   279c4:	andne	ip, ip, #1
   279c8:	cmp	ip, #0
   279cc:	bne	2799c <flatcc_json_parser_string_part@@Base+0x40>
   279d0:	ldrb	r3, [r1]
   279d4:	cmp	r3, #31
   279d8:	bls	279ec <flatcc_json_parser_string_part@@Base+0x90>
   279dc:	mov	r0, r1
   279e0:	ldr	r4, [sp]
   279e4:	add	sp, sp, #4
   279e8:	pop	{pc}		; (ldr pc, [sp], #4)
   279ec:	mov	r3, #17
   279f0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   279f4:	mov	r1, r0
   279f8:	b	279dc <flatcc_json_parser_string_part@@Base+0x80>
   279fc:	mov	r1, r2
   27a00:	mov	r3, #20
   27a04:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27a08:	mov	r1, r0
   27a0c:	b	279dc <flatcc_json_parser_string_part@@Base+0x80>

00027a10 <flatcc_json_parser_space_ext@@Base>:
   27a10:	str	r4, [sp, #-8]!
   27a14:	str	lr, [sp, #4]
   27a18:	mov	lr, r2
   27a1c:	mov	r4, #0
   27a20:	cmp	r1, r2
   27a24:	beq	27b50 <flatcc_json_parser_space_ext@@Base+0x140>
   27a28:	ldrb	r3, [r1]
   27a2c:	cmp	r3, #32
   27a30:	bne	27a54 <flatcc_json_parser_space_ext@@Base+0x44>
   27a34:	add	r3, r1, #1
   27a38:	mov	r1, r3
   27a3c:	cmp	r3, lr
   27a40:	beq	27b54 <flatcc_json_parser_space_ext@@Base+0x144>
   27a44:	add	r3, r3, #1
   27a48:	ldrb	ip, [r1]
   27a4c:	cmp	ip, #32
   27a50:	beq	27a38 <flatcc_json_parser_space_ext@@Base+0x28>
   27a54:	ldrb	r3, [r1]
   27a58:	cmp	r3, #32
   27a5c:	bls	27ab4 <flatcc_json_parser_space_ext@@Base+0xa4>
   27a60:	mov	r0, r1
   27a64:	b	27b34 <flatcc_json_parser_space_ext@@Base+0x124>
   27a68:	sub	r3, r2, r1
   27a6c:	cmp	r3, #1
   27a70:	movle	r3, r4
   27a74:	ble	27a88 <flatcc_json_parser_space_ext@@Base+0x78>
   27a78:	ldrb	r3, [r1, #1]
   27a7c:	cmp	r3, #10
   27a80:	movne	r3, #0
   27a84:	moveq	r3, #1
   27a88:	add	r1, r1, r3
   27a8c:	ldr	r3, [r0, #16]
   27a90:	add	r3, r3, #1
   27a94:	str	r3, [r0, #16]
   27a98:	add	r1, r1, #1
   27a9c:	str	r1, [r0, #4]
   27aa0:	cmp	r2, r1
   27aa4:	beq	27b48 <flatcc_json_parser_space_ext@@Base+0x138>
   27aa8:	ldrb	r3, [r1]
   27aac:	cmp	r3, #32
   27ab0:	bhi	27b40 <flatcc_json_parser_space_ext@@Base+0x130>
   27ab4:	sub	r3, r3, #9
   27ab8:	cmp	r3, #23
   27abc:	ldrls	pc, [pc, r3, lsl #2]
   27ac0:	b	27b2c <flatcc_json_parser_space_ext@@Base+0x11c>
   27ac4:	andeq	r7, r2, r4, lsr #22
   27ac8:	andeq	r7, r2, ip, lsl #21
   27acc:	andeq	r7, r2, ip, lsr #22
   27ad0:	andeq	r7, r2, ip, lsr #22
   27ad4:	andeq	r7, r2, r8, ror #20
   27ad8:	andeq	r7, r2, ip, lsr #22
   27adc:	andeq	r7, r2, ip, lsr #22
   27ae0:	andeq	r7, r2, ip, lsr #22
   27ae4:	andeq	r7, r2, ip, lsr #22
   27ae8:	andeq	r7, r2, ip, lsr #22
   27aec:	andeq	r7, r2, ip, lsr #22
   27af0:	andeq	r7, r2, ip, lsr #22
   27af4:	andeq	r7, r2, ip, lsr #22
   27af8:	andeq	r7, r2, ip, lsr #22
   27afc:	andeq	r7, r2, ip, lsr #22
   27b00:	andeq	r7, r2, ip, lsr #22
   27b04:	andeq	r7, r2, ip, lsr #22
   27b08:	andeq	r7, r2, ip, lsr #22
   27b0c:	andeq	r7, r2, ip, lsr #22
   27b10:	andeq	r7, r2, ip, lsr #22
   27b14:	andeq	r7, r2, ip, lsr #22
   27b18:	andeq	r7, r2, ip, lsr #22
   27b1c:	andeq	r7, r2, ip, lsr #22
   27b20:	andeq	r7, r2, r0, lsr #20
   27b24:	add	r1, r1, #1
   27b28:	b	27aa0 <flatcc_json_parser_space_ext@@Base+0x90>
   27b2c:	mov	r3, #5
   27b30:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27b34:	ldr	r4, [sp]
   27b38:	add	sp, sp, #4
   27b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   27b40:	mov	r0, r1
   27b44:	b	27b34 <flatcc_json_parser_space_ext@@Base+0x124>
   27b48:	mov	r0, r1
   27b4c:	b	27b34 <flatcc_json_parser_space_ext@@Base+0x124>
   27b50:	mov	r1, r2
   27b54:	mov	r0, r1
   27b58:	b	27b34 <flatcc_json_parser_space_ext@@Base+0x124>
   27b5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27b60:	strd	r6, [sp, #8]
   27b64:	strd	r8, [sp, #16]
   27b68:	strd	sl, [sp, #24]
   27b6c:	str	lr, [sp, #32]
   27b70:	sub	sp, sp, #36	; 0x24
   27b74:	mov	r8, r0
   27b78:	mov	r7, r2
   27b7c:	str	r3, [sp, #8]
   27b80:	mov	r3, #0
   27b84:	ldr	r2, [sp, #72]	; 0x48
   27b88:	strb	r3, [r2]
   27b8c:	cmp	r1, r7
   27b90:	beq	27d60 <flatcc_json_parser_space_ext@@Base+0x350>
   27b94:	ldrb	r3, [r1]
   27b98:	cmp	r3, #34	; 0x22
   27b9c:	addeq	r4, r1, #1
   27ba0:	moveq	r3, #0
   27ba4:	streq	r3, [r0, #12]
   27ba8:	beq	27bf0 <flatcc_json_parser_space_ext@@Base+0x1e0>
   27bac:	cmp	r3, #46	; 0x2e
   27bb0:	movne	r3, #1
   27bb4:	strne	r3, [r0, #12]
   27bb8:	movne	r4, r1
   27bbc:	beq	27bd4 <flatcc_json_parser_space_ext@@Base+0x1c4>
   27bc0:	mov	fp, #0
   27bc4:	str	fp, [sp, #12]
   27bc8:	add	sl, sp, #16
   27bcc:	add	r9, sp, #24
   27bd0:	b	27ca4 <flatcc_json_parser_space_ext@@Base+0x294>
   27bd4:	mov	r3, #5
   27bd8:	mov	r2, r7
   27bdc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27be0:	mov	r4, r0
   27be4:	ldr	r3, [r8, #12]
   27be8:	cmp	r3, #0
   27bec:	bne	27c20 <flatcc_json_parser_space_ext@@Base+0x210>
   27bf0:	sub	r3, r7, r4
   27bf4:	cmp	r3, #1
   27bf8:	ble	27c0c <flatcc_json_parser_space_ext@@Base+0x1fc>
   27bfc:	ldrb	r3, [r4]
   27c00:	cmp	r3, #32
   27c04:	bhi	27c20 <flatcc_json_parser_space_ext@@Base+0x210>
   27c08:	beq	27c2c <flatcc_json_parser_space_ext@@Base+0x21c>
   27c0c:	mov	r2, r7
   27c10:	mov	r1, r4
   27c14:	mov	r0, r8
   27c18:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   27c1c:	mov	r4, r0
   27c20:	cmp	r7, r4
   27c24:	bne	27bc0 <flatcc_json_parser_space_ext@@Base+0x1b0>
   27c28:	b	27d7c <flatcc_json_parser_space_ext@@Base+0x36c>
   27c2c:	ldrb	r3, [r4, #1]
   27c30:	cmp	r3, #32
   27c34:	addhi	r4, r4, #1
   27c38:	bls	27c0c <flatcc_json_parser_space_ext@@Base+0x1fc>
   27c3c:	b	27c20 <flatcc_json_parser_space_ext@@Base+0x210>
   27c40:	mov	r4, r0
   27c44:	cmp	fp, #0
   27c48:	beq	27c58 <flatcc_json_parser_space_ext@@Base+0x248>
   27c4c:	ldr	r3, [r8, #12]
   27c50:	cmp	r3, #0
   27c54:	bne	27d08 <flatcc_json_parser_space_ext@@Base+0x2f8>
   27c58:	ldr	r3, [sp, #20]
   27c5c:	cmp	r3, #0
   27c60:	bne	27d24 <flatcc_json_parser_space_ext@@Base+0x314>
   27c64:	ldrd	r2, [sp, #24]
   27c68:	cmp	r3, #0
   27c6c:	cmpeq	r2, #255	; 0xff
   27c70:	uxtbls	r3, r2
   27c74:	strls	r3, [sp, #12]
   27c78:	bhi	27d48 <flatcc_json_parser_space_ext@@Base+0x338>
   27c7c:	ldr	r3, [sp, #72]	; 0x48
   27c80:	ldrb	r3, [r3]
   27c84:	ldr	r2, [sp, #12]
   27c88:	add	r3, r2, r3
   27c8c:	ldr	r2, [sp, #72]	; 0x48
   27c90:	strb	r3, [r2]
   27c94:	add	fp, fp, #1
   27c98:	ldr	r3, [sp, #16]
   27c9c:	cmp	r3, #0
   27ca0:	beq	27d7c <flatcc_json_parser_space_ext@@Base+0x36c>
   27ca4:	ldr	r6, [sp, #8]
   27ca8:	mov	r5, r4
   27cac:	str	sl, [sp, #4]
   27cb0:	str	r9, [sp]
   27cb4:	ldr	r4, [r6]
   27cb8:	add	r3, sp, #20
   27cbc:	mov	r2, r7
   27cc0:	mov	r1, r5
   27cc4:	mov	r0, r8
   27cc8:	blx	r4
   27ccc:	cmp	r7, r0
   27cd0:	beq	27d78 <flatcc_json_parser_space_ext@@Base+0x368>
   27cd4:	cmp	r5, r0
   27cd8:	bne	27c40 <flatcc_json_parser_space_ext@@Base+0x230>
   27cdc:	mov	r5, r0
   27ce0:	ldr	r3, [r6, #4]!
   27ce4:	cmp	r3, #0
   27ce8:	bne	27cac <flatcc_json_parser_space_ext@@Base+0x29c>
   27cec:	mov	r3, #23
   27cf0:	mov	r2, r7
   27cf4:	mov	r1, r0
   27cf8:	mov	r0, r8
   27cfc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27d00:	mov	r4, r0
   27d04:	b	27d7c <flatcc_json_parser_space_ext@@Base+0x36c>
   27d08:	mov	r3, #14
   27d0c:	mov	r2, r7
   27d10:	mov	r1, r0
   27d14:	mov	r0, r8
   27d18:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27d1c:	mov	r4, r0
   27d20:	b	27d7c <flatcc_json_parser_space_ext@@Base+0x36c>
   27d24:	mov	r3, #8
   27d28:	mov	r2, r7
   27d2c:	mov	r1, r4
   27d30:	mov	r0, r8
   27d34:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27d38:	cmp	r7, r0
   27d3c:	bne	27c7c <flatcc_json_parser_space_ext@@Base+0x26c>
   27d40:	mov	r4, r0
   27d44:	b	27d7c <flatcc_json_parser_space_ext@@Base+0x36c>
   27d48:	mov	r3, #7
   27d4c:	mov	r2, r7
   27d50:	mov	r1, r4
   27d54:	mov	r0, r8
   27d58:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27d5c:	b	27d38 <flatcc_json_parser_space_ext@@Base+0x328>
   27d60:	ldr	r3, [r0, #12]
   27d64:	cmp	r3, #0
   27d68:	movne	r4, r7
   27d6c:	bne	27d7c <flatcc_json_parser_space_ext@@Base+0x36c>
   27d70:	mov	r4, r7
   27d74:	b	27c0c <flatcc_json_parser_space_ext@@Base+0x1fc>
   27d78:	mov	r4, r0
   27d7c:	mov	r0, r4
   27d80:	add	sp, sp, #36	; 0x24
   27d84:	ldrd	r4, [sp]
   27d88:	ldrd	r6, [sp, #8]
   27d8c:	ldrd	r8, [sp, #16]
   27d90:	ldrd	sl, [sp, #24]
   27d94:	add	sp, sp, #32
   27d98:	pop	{pc}		; (ldr pc, [sp], #4)
   27d9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27da0:	strd	r6, [sp, #8]
   27da4:	strd	r8, [sp, #16]
   27da8:	strd	sl, [sp, #24]
   27dac:	str	lr, [sp, #32]
   27db0:	sub	sp, sp, #28
   27db4:	mov	r6, r0
   27db8:	mov	r4, r1
   27dbc:	mov	r5, r2
   27dc0:	str	r3, [sp, #12]
   27dc4:	ldr	r9, [sp, #64]	; 0x40
   27dc8:	ldr	sl, [sp, #72]	; 0x48
   27dcc:	mov	r3, #0
   27dd0:	str	r3, [sp, #20]
   27dd4:	ldr	r0, [r0]
   27dd8:	bl	23840 <flatcc_builder_start_offset_vector@@Base>
   27ddc:	cmp	r0, #0
   27de0:	beq	27e1c <flatcc_json_parser_space_ext@@Base+0x40c>
   27de4:	mov	r3, #33	; 0x21
   27de8:	mov	r2, r5
   27dec:	mov	r1, r4
   27df0:	mov	r0, r6
   27df4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27df8:	mov	r4, r0
   27dfc:	mov	r0, r4
   27e00:	add	sp, sp, #28
   27e04:	ldrd	r4, [sp]
   27e08:	ldrd	r6, [sp, #8]
   27e0c:	ldrd	r8, [sp, #16]
   27e10:	ldrd	sl, [sp, #24]
   27e14:	add	sp, sp, #32
   27e18:	pop	{pc}		; (ldr pc, [sp], #4)
   27e1c:	cmp	r4, r5
   27e20:	beq	27e30 <flatcc_json_parser_space_ext@@Base+0x420>
   27e24:	ldrb	r3, [r4]
   27e28:	cmp	r3, #91	; 0x5b
   27e2c:	beq	27e50 <flatcc_json_parser_space_ext@@Base+0x440>
   27e30:	mov	r3, #22
   27e34:	mov	r2, r5
   27e38:	mov	r1, r4
   27e3c:	mov	r0, r6
   27e40:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27e44:	mov	r4, r0
   27e48:	mov	r7, #0
   27e4c:	b	28090 <flatcc_json_parser_space_ext@@Base+0x680>
   27e50:	add	r8, r4, #1
   27e54:	sub	r3, r5, r8
   27e58:	cmp	r3, #1
   27e5c:	ble	27e70 <flatcc_json_parser_space_ext@@Base+0x460>
   27e60:	ldrb	r3, [r4, #1]
   27e64:	cmp	r3, #32
   27e68:	bhi	27e84 <flatcc_json_parser_space_ext@@Base+0x474>
   27e6c:	beq	27eac <flatcc_json_parser_space_ext@@Base+0x49c>
   27e70:	mov	r2, r5
   27e74:	mov	r1, r8
   27e78:	mov	r0, r6
   27e7c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   27e80:	mov	r8, r0
   27e84:	cmp	r5, r8
   27e88:	beq	27e98 <flatcc_json_parser_space_ext@@Base+0x488>
   27e8c:	ldrb	r3, [r8]
   27e90:	cmp	r3, #93	; 0x5d
   27e94:	beq	27ec0 <flatcc_json_parser_space_ext@@Base+0x4b0>
   27e98:	cmp	r9, #0
   27e9c:	beq	27f0c <flatcc_json_parser_space_ext@@Base+0x4fc>
   27ea0:	mov	r7, #0
   27ea4:	add	fp, sp, #20
   27ea8:	b	27fdc <flatcc_json_parser_space_ext@@Base+0x5cc>
   27eac:	ldrb	r3, [r4, #2]
   27eb0:	cmp	r3, #32
   27eb4:	addhi	r8, r4, #2
   27eb8:	bls	27e70 <flatcc_json_parser_space_ext@@Base+0x460>
   27ebc:	b	27e84 <flatcc_json_parser_space_ext@@Base+0x474>
   27ec0:	add	r4, r8, #1
   27ec4:	sub	r3, r5, r4
   27ec8:	cmp	r3, #1
   27ecc:	ble	27ee0 <flatcc_json_parser_space_ext@@Base+0x4d0>
   27ed0:	ldrb	r3, [r8, #1]
   27ed4:	cmp	r3, #32
   27ed8:	bhi	27e48 <flatcc_json_parser_space_ext@@Base+0x438>
   27edc:	beq	27ef8 <flatcc_json_parser_space_ext@@Base+0x4e8>
   27ee0:	mov	r2, r5
   27ee4:	mov	r1, r4
   27ee8:	mov	r0, r6
   27eec:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   27ef0:	mov	r4, r0
   27ef4:	b	27e48 <flatcc_json_parser_space_ext@@Base+0x438>
   27ef8:	ldrb	r3, [r8, #2]
   27efc:	cmp	r3, #32
   27f00:	addhi	r4, r8, #2
   27f04:	bls	27ee0 <flatcc_json_parser_space_ext@@Base+0x4d0>
   27f08:	b	27e48 <flatcc_json_parser_space_ext@@Base+0x438>
   27f0c:	mov	r3, #30
   27f10:	mov	r2, r5
   27f14:	mov	r1, r8
   27f18:	mov	r0, r6
   27f1c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   27f20:	mov	r4, r0
   27f24:	b	27dfc <flatcc_json_parser_space_ext@@Base+0x3ec>
   27f28:	ldrb	r3, [r4, #1]
   27f2c:	cmp	r3, #32
   27f30:	addhi	r4, r4, #1
   27f34:	bls	28044 <flatcc_json_parser_space_ext@@Base+0x634>
   27f38:	b	28058 <flatcc_json_parser_space_ext@@Base+0x648>
   27f3c:	add	r1, r4, #1
   27f40:	sub	r3, r5, r1
   27f44:	cmp	r3, #1
   27f48:	ble	27f60 <flatcc_json_parser_space_ext@@Base+0x550>
   27f4c:	ldrb	r3, [r4, #1]
   27f50:	cmp	r3, #32
   27f54:	movhi	r4, r1
   27f58:	bhi	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   27f5c:	beq	27f74 <flatcc_json_parser_space_ext@@Base+0x564>
   27f60:	mov	r2, r5
   27f64:	mov	r0, r6
   27f68:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   27f6c:	mov	r4, r0
   27f70:	b	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   27f74:	ldrb	r3, [r4, #2]
   27f78:	cmp	r3, #32
   27f7c:	addhi	r4, r4, #2
   27f80:	bls	27f60 <flatcc_json_parser_space_ext@@Base+0x550>
   27f84:	b	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   27f88:	add	r8, r4, #1
   27f8c:	sub	r3, r5, r8
   27f90:	cmp	r3, #1
   27f94:	ble	27fa8 <flatcc_json_parser_space_ext@@Base+0x598>
   27f98:	ldrb	r3, [r4, #1]
   27f9c:	cmp	r3, #32
   27fa0:	bhi	27fbc <flatcc_json_parser_space_ext@@Base+0x5ac>
   27fa4:	beq	280b4 <flatcc_json_parser_space_ext@@Base+0x6a4>
   27fa8:	mov	r2, r5
   27fac:	mov	r1, r8
   27fb0:	mov	r0, r6
   27fb4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   27fb8:	mov	r8, r0
   27fbc:	cmp	r5, r8
   27fc0:	beq	280c8 <flatcc_json_parser_space_ext@@Base+0x6b8>
   27fc4:	ldrb	r3, [r8]
   27fc8:	cmp	r3, #93	; 0x5d
   27fcc:	beq	280e4 <flatcc_json_parser_space_ext@@Base+0x6d4>
   27fd0:	add	r7, r7, #1
   27fd4:	cmp	r9, r7
   27fd8:	beq	27f0c <flatcc_json_parser_space_ext@@Base+0x4fc>
   27fdc:	ldr	r1, [sp, #12]
   27fe0:	ldr	r0, [r6]
   27fe4:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   27fe8:	ldrb	r3, [r0, r7]
   27fec:	str	fp, [sp]
   27ff0:	mov	r2, r5
   27ff4:	mov	r1, r8
   27ff8:	mov	r0, r6
   27ffc:	blx	sl
   28000:	mov	r4, r0
   28004:	cmp	r5, r0
   28008:	beq	27dfc <flatcc_json_parser_space_ext@@Base+0x3ec>
   2800c:	mov	r1, #1
   28010:	ldr	r0, [r6]
   28014:	bl	23144 <flatcc_builder_extend_offset_vector@@Base>
   28018:	cmp	r0, #0
   2801c:	beq	27de4 <flatcc_json_parser_space_ext@@Base+0x3d4>
   28020:	ldr	r3, [sp, #20]
   28024:	str	r3, [r0]
   28028:	sub	r3, r5, r4
   2802c:	cmp	r3, #1
   28030:	ble	28044 <flatcc_json_parser_space_ext@@Base+0x634>
   28034:	ldrb	r3, [r4]
   28038:	cmp	r3, #32
   2803c:	bhi	28060 <flatcc_json_parser_space_ext@@Base+0x650>
   28040:	beq	27f28 <flatcc_json_parser_space_ext@@Base+0x518>
   28044:	mov	r2, r5
   28048:	mov	r1, r4
   2804c:	mov	r0, r6
   28050:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   28054:	mov	r4, r0
   28058:	cmp	r5, r4
   2805c:	beq	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   28060:	ldrb	r3, [r4]
   28064:	cmp	r3, #44	; 0x2c
   28068:	beq	27f88 <flatcc_json_parser_space_ext@@Base+0x578>
   2806c:	cmp	r3, #93	; 0x5d
   28070:	beq	27f3c <flatcc_json_parser_space_ext@@Base+0x52c>
   28074:	mov	r3, #9
   28078:	mov	r2, r5
   2807c:	mov	r1, r4
   28080:	mov	r0, r6
   28084:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28088:	mov	r4, r0
   2808c:	add	r7, r7, #1
   28090:	cmp	r9, r7
   28094:	beq	28130 <flatcc_json_parser_space_ext@@Base+0x720>
   28098:	mov	r3, #30
   2809c:	mov	r2, r5
   280a0:	mov	r1, r4
   280a4:	mov	r0, r6
   280a8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   280ac:	mov	r4, r0
   280b0:	b	27dfc <flatcc_json_parser_space_ext@@Base+0x3ec>
   280b4:	ldrb	r3, [r4, #2]
   280b8:	cmp	r3, #32
   280bc:	addhi	r8, r4, #2
   280c0:	bls	27fa8 <flatcc_json_parser_space_ext@@Base+0x598>
   280c4:	b	27fbc <flatcc_json_parser_space_ext@@Base+0x5ac>
   280c8:	mov	r3, #9
   280cc:	mov	r2, r5
   280d0:	mov	r1, r8
   280d4:	mov	r0, r6
   280d8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   280dc:	mov	r4, r0
   280e0:	b	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   280e4:	add	r4, r8, #1
   280e8:	sub	r3, r5, r4
   280ec:	cmp	r3, #1
   280f0:	ble	28104 <flatcc_json_parser_space_ext@@Base+0x6f4>
   280f4:	ldrb	r3, [r8, #1]
   280f8:	cmp	r3, #32
   280fc:	bhi	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   28100:	beq	2811c <flatcc_json_parser_space_ext@@Base+0x70c>
   28104:	mov	r2, r5
   28108:	mov	r1, r4
   2810c:	mov	r0, r6
   28110:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   28114:	mov	r4, r0
   28118:	b	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   2811c:	ldrb	r3, [r8, #2]
   28120:	cmp	r3, #32
   28124:	addhi	r4, r8, #2
   28128:	bls	28104 <flatcc_json_parser_space_ext@@Base+0x6f4>
   2812c:	b	2808c <flatcc_json_parser_space_ext@@Base+0x67c>
   28130:	ldr	r1, [sp, #12]
   28134:	ldr	r0, [r6]
   28138:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2813c:	mov	r1, r0
   28140:	ldr	r0, [r6]
   28144:	bl	24b2c <flatcc_builder_end_offset_vector_for_unions@@Base>
   28148:	str	r0, [sp, #20]
   2814c:	cmp	r0, #0
   28150:	beq	27de4 <flatcc_json_parser_space_ext@@Base+0x3d4>
   28154:	ldrh	r1, [sp, #68]	; 0x44
   28158:	ldr	r0, [r6]
   2815c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   28160:	cmp	r0, #0
   28164:	beq	27de4 <flatcc_json_parser_space_ext@@Base+0x3d4>
   28168:	ldr	r3, [sp, #20]
   2816c:	str	r3, [r0]
   28170:	b	27dfc <flatcc_json_parser_space_ext@@Base+0x3ec>

00028174 <flatcc_json_parser_string_escape@@Base>:
   28174:	str	r4, [sp, #-8]!
   28178:	str	lr, [sp, #4]
   2817c:	sub	lr, r2, r1
   28180:	cmp	lr, #1
   28184:	ble	28194 <flatcc_json_parser_string_escape@@Base+0x20>
   28188:	ldrb	ip, [r1]
   2818c:	cmp	ip, #92	; 0x5c
   28190:	beq	281b0 <flatcc_json_parser_string_escape@@Base+0x3c>
   28194:	mov	ip, #0
   28198:	strb	ip, [r3]
   2819c:	mov	r3, #18
   281a0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   281a4:	ldr	r4, [sp]
   281a8:	add	sp, sp, #4
   281ac:	pop	{pc}		; (ldr pc, [sp], #4)
   281b0:	ldrb	ip, [r1, #1]
   281b4:	sub	ip, ip, #34	; 0x22
   281b8:	cmp	ip, #86	; 0x56
   281bc:	ldrls	pc, [pc, ip, lsl #2]
   281c0:	b	286b0 <flatcc_json_parser_string_escape@@Base+0x53c>
   281c4:	andeq	r8, r2, r8, ror #12
   281c8:			; <UNDEFINED> instruction: 0x000286b0
   281cc:			; <UNDEFINED> instruction: 0x000286b0
   281d0:			; <UNDEFINED> instruction: 0x000286b0
   281d4:			; <UNDEFINED> instruction: 0x000286b0
   281d8:			; <UNDEFINED> instruction: 0x000286b0
   281dc:			; <UNDEFINED> instruction: 0x000286b0
   281e0:			; <UNDEFINED> instruction: 0x000286b0
   281e4:			; <UNDEFINED> instruction: 0x000286b0
   281e8:			; <UNDEFINED> instruction: 0x000286b0
   281ec:			; <UNDEFINED> instruction: 0x000286b0
   281f0:			; <UNDEFINED> instruction: 0x000286b0
   281f4:			; <UNDEFINED> instruction: 0x000286b0
   281f8:	muleq	r2, r8, r6
   281fc:			; <UNDEFINED> instruction: 0x000286b0
   28200:			; <UNDEFINED> instruction: 0x000286b0
   28204:			; <UNDEFINED> instruction: 0x000286b0
   28208:			; <UNDEFINED> instruction: 0x000286b0
   2820c:			; <UNDEFINED> instruction: 0x000286b0
   28210:			; <UNDEFINED> instruction: 0x000286b0
   28214:			; <UNDEFINED> instruction: 0x000286b0
   28218:			; <UNDEFINED> instruction: 0x000286b0
   2821c:			; <UNDEFINED> instruction: 0x000286b0
   28220:			; <UNDEFINED> instruction: 0x000286b0
   28224:			; <UNDEFINED> instruction: 0x000286b0
   28228:			; <UNDEFINED> instruction: 0x000286b0
   2822c:			; <UNDEFINED> instruction: 0x000286b0
   28230:			; <UNDEFINED> instruction: 0x000286b0
   28234:			; <UNDEFINED> instruction: 0x000286b0
   28238:			; <UNDEFINED> instruction: 0x000286b0
   2823c:			; <UNDEFINED> instruction: 0x000286b0
   28240:			; <UNDEFINED> instruction: 0x000286b0
   28244:			; <UNDEFINED> instruction: 0x000286b0
   28248:			; <UNDEFINED> instruction: 0x000286b0
   2824c:			; <UNDEFINED> instruction: 0x000286b0
   28250:			; <UNDEFINED> instruction: 0x000286b0
   28254:			; <UNDEFINED> instruction: 0x000286b0
   28258:			; <UNDEFINED> instruction: 0x000286b0
   2825c:			; <UNDEFINED> instruction: 0x000286b0
   28260:			; <UNDEFINED> instruction: 0x000286b0
   28264:			; <UNDEFINED> instruction: 0x000286b0
   28268:			; <UNDEFINED> instruction: 0x000286b0
   2826c:			; <UNDEFINED> instruction: 0x000286b0
   28270:			; <UNDEFINED> instruction: 0x000286b0
   28274:			; <UNDEFINED> instruction: 0x000286b0
   28278:			; <UNDEFINED> instruction: 0x000286b0
   2827c:			; <UNDEFINED> instruction: 0x000286b0
   28280:			; <UNDEFINED> instruction: 0x000286b0
   28284:			; <UNDEFINED> instruction: 0x000286b0
   28288:			; <UNDEFINED> instruction: 0x000286b0
   2828c:			; <UNDEFINED> instruction: 0x000286b0
   28290:			; <UNDEFINED> instruction: 0x000286b0
   28294:			; <UNDEFINED> instruction: 0x000286b0
   28298:			; <UNDEFINED> instruction: 0x000286b0
   2829c:			; <UNDEFINED> instruction: 0x000286b0
   282a0:			; <UNDEFINED> instruction: 0x000286b0
   282a4:			; <UNDEFINED> instruction: 0x000286b0
   282a8:			; <UNDEFINED> instruction: 0x000286b0
   282ac:	andeq	r8, r2, r0, lsl #13
   282b0:			; <UNDEFINED> instruction: 0x000286b0
   282b4:			; <UNDEFINED> instruction: 0x000286b0
   282b8:			; <UNDEFINED> instruction: 0x000286b0
   282bc:			; <UNDEFINED> instruction: 0x000286b0
   282c0:			; <UNDEFINED> instruction: 0x000286b0
   282c4:	andeq	r8, r2, r8, lsr r6
   282c8:			; <UNDEFINED> instruction: 0x000286b0
   282cc:			; <UNDEFINED> instruction: 0x000286b0
   282d0:			; <UNDEFINED> instruction: 0x000286b0
   282d4:	andeq	r8, r2, r0, asr r6
   282d8:			; <UNDEFINED> instruction: 0x000286b0
   282dc:			; <UNDEFINED> instruction: 0x000286b0
   282e0:			; <UNDEFINED> instruction: 0x000286b0
   282e4:			; <UNDEFINED> instruction: 0x000286b0
   282e8:			; <UNDEFINED> instruction: 0x000286b0
   282ec:			; <UNDEFINED> instruction: 0x000286b0
   282f0:			; <UNDEFINED> instruction: 0x000286b0
   282f4:	andeq	r8, r2, r8, lsl #12
   282f8:			; <UNDEFINED> instruction: 0x000286b0
   282fc:			; <UNDEFINED> instruction: 0x000286b0
   28300:			; <UNDEFINED> instruction: 0x000286b0
   28304:	andeq	r8, r2, r0, lsr #12
   28308:			; <UNDEFINED> instruction: 0x000286b0
   2830c:	strdeq	r8, [r2], -r0
   28310:	andeq	r8, r2, ip, ror #7
   28314:			; <UNDEFINED> instruction: 0x000286b0
   28318:			; <UNDEFINED> instruction: 0x000286b0
   2831c:	andeq	r8, r2, r0, lsr #6
   28320:	mov	ip, #1
   28324:	strb	ip, [r3]
   28328:	cmp	lr, #3
   2832c:	ble	283b0 <flatcc_json_parser_string_escape@@Base+0x23c>
   28330:	ldrb	ip, [r1, #2]
   28334:	sub	lr, ip, #48	; 0x30
   28338:	uxtb	lr, lr
   2833c:	cmp	lr, #9
   28340:	lslls	ip, ip, #4
   28344:	andls	ip, ip, #240	; 0xf0
   28348:	bls	2836c <flatcc_json_parser_string_escape@@Base+0x1f8>
   2834c:	orr	ip, ip, #32
   28350:	sub	lr, ip, #97	; 0x61
   28354:	uxtb	lr, lr
   28358:	cmp	lr, #5
   2835c:	bhi	283c4 <flatcc_json_parser_string_escape@@Base+0x250>
   28360:	sub	ip, ip, #87	; 0x57
   28364:	lsl	ip, ip, #4
   28368:	uxtb	ip, ip
   2836c:	ldrb	lr, [r1, #3]
   28370:	sub	r4, lr, #48	; 0x30
   28374:	uxtb	r4, r4
   28378:	cmp	r4, #9
   2837c:	orrls	ip, r4, ip
   28380:	bls	283a4 <flatcc_json_parser_string_escape@@Base+0x230>
   28384:	orr	lr, lr, #32
   28388:	sub	r4, lr, #97	; 0x61
   2838c:	uxtb	r4, r4
   28390:	cmp	r4, #5
   28394:	bhi	283d8 <flatcc_json_parser_string_escape@@Base+0x264>
   28398:	sub	lr, lr, #87	; 0x57
   2839c:	orr	ip, lr, ip
   283a0:	uxtb	ip, ip
   283a4:	strb	ip, [r3, #1]
   283a8:	add	r0, r1, #4
   283ac:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   283b0:	mov	ip, #0
   283b4:	strb	ip, [r3]
   283b8:	mov	r3, #18
   283bc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   283c0:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   283c4:	mov	ip, #0
   283c8:	strb	ip, [r3]
   283cc:	mov	r3, #18
   283d0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   283d4:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   283d8:	mov	ip, #0
   283dc:	strb	ip, [r3]
   283e0:	mov	r3, #18
   283e4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   283e8:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   283ec:	cmp	lr, #5
   283f0:	ble	284b4 <flatcc_json_parser_string_escape@@Base+0x340>
   283f4:	ldrb	ip, [r1, #2]
   283f8:	sub	lr, ip, #48	; 0x30
   283fc:	uxtb	lr, lr
   28400:	cmp	lr, #9
   28404:	lslls	ip, ip, #12
   28408:	andls	lr, ip, #61440	; 0xf000
   2840c:	bls	28430 <flatcc_json_parser_string_escape@@Base+0x2bc>
   28410:	orr	ip, ip, #32
   28414:	sub	lr, ip, #97	; 0x61
   28418:	uxtb	lr, lr
   2841c:	cmp	lr, #5
   28420:	bhi	284c8 <flatcc_json_parser_string_escape@@Base+0x354>
   28424:	sub	ip, ip, #87	; 0x57
   28428:	lsl	ip, ip, #12
   2842c:	and	lr, ip, #61440	; 0xf000
   28430:	ldrb	ip, [r1, #3]
   28434:	sub	r4, ip, #48	; 0x30
   28438:	uxtb	r4, r4
   2843c:	cmp	r4, #9
   28440:	bhi	284dc <flatcc_json_parser_string_escape@@Base+0x368>
   28444:	sub	ip, ip, #48	; 0x30
   28448:	uxth	ip, ip
   2844c:	orr	ip, lr, ip, lsl #8
   28450:	and	ip, ip, #65280	; 0xff00
   28454:	ldrb	lr, [r1, #4]
   28458:	sub	r4, lr, #48	; 0x30
   2845c:	uxtb	r4, r4
   28460:	cmp	r4, #9
   28464:	bhi	28518 <flatcc_json_parser_string_escape@@Base+0x3a4>
   28468:	sub	lr, lr, #48	; 0x30
   2846c:	uxth	lr, lr
   28470:	orr	ip, ip, lr, lsl #4
   28474:	uxth	ip, ip
   28478:	ldrb	lr, [r1, #5]
   2847c:	sub	r4, lr, #48	; 0x30
   28480:	uxtb	r4, r4
   28484:	cmp	r4, #9
   28488:	bhi	28554 <flatcc_json_parser_string_escape@@Base+0x3e0>
   2848c:	sub	r2, lr, #48	; 0x30
   28490:	orr	r2, ip, r2
   28494:	uxth	r2, r2
   28498:	cmp	r2, #127	; 0x7f
   2849c:	bhi	2858c <flatcc_json_parser_string_escape@@Base+0x418>
   284a0:	mov	r0, #1
   284a4:	strb	r0, [r3]
   284a8:	strb	r2, [r3, #1]
   284ac:	add	r0, r1, #6
   284b0:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   284b4:	mov	ip, #0
   284b8:	strb	ip, [r3]
   284bc:	mov	r3, #18
   284c0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   284c4:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   284c8:	mov	ip, #0
   284cc:	strb	ip, [r3]
   284d0:	mov	r3, #18
   284d4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   284d8:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   284dc:	orr	ip, ip, #32
   284e0:	sub	r4, ip, #97	; 0x61
   284e4:	uxtb	r4, r4
   284e8:	cmp	r4, #5
   284ec:	bhi	28504 <flatcc_json_parser_string_escape@@Base+0x390>
   284f0:	sub	ip, ip, #87	; 0x57
   284f4:	uxth	ip, ip
   284f8:	orr	ip, lr, ip, lsl #8
   284fc:	and	ip, ip, #65280	; 0xff00
   28500:	b	28454 <flatcc_json_parser_string_escape@@Base+0x2e0>
   28504:	mov	ip, #0
   28508:	strb	ip, [r3]
   2850c:	mov	r3, #18
   28510:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28514:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28518:	orr	lr, lr, #32
   2851c:	sub	r4, lr, #97	; 0x61
   28520:	uxtb	r4, r4
   28524:	cmp	r4, #5
   28528:	bhi	28540 <flatcc_json_parser_string_escape@@Base+0x3cc>
   2852c:	sub	lr, lr, #87	; 0x57
   28530:	uxth	lr, lr
   28534:	orr	ip, ip, lr, lsl #4
   28538:	uxth	ip, ip
   2853c:	b	28478 <flatcc_json_parser_string_escape@@Base+0x304>
   28540:	mov	ip, #0
   28544:	strb	ip, [r3]
   28548:	mov	r3, #18
   2854c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28550:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28554:	orr	lr, lr, #32
   28558:	sub	r4, lr, #97	; 0x61
   2855c:	uxtb	r4, r4
   28560:	cmp	r4, #5
   28564:	bhi	28578 <flatcc_json_parser_string_escape@@Base+0x404>
   28568:	sub	r2, lr, #87	; 0x57
   2856c:	orr	r2, ip, r2
   28570:	uxth	r2, r2
   28574:	b	28498 <flatcc_json_parser_string_escape@@Base+0x324>
   28578:	mov	ip, #0
   2857c:	strb	ip, [r3]
   28580:	mov	r3, #18
   28584:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28588:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   2858c:	cmp	r2, #2048	; 0x800
   28590:	bcs	285bc <flatcc_json_parser_string_escape@@Base+0x448>
   28594:	mov	r0, #2
   28598:	strb	r0, [r3]
   2859c:	mvn	r0, #63	; 0x3f
   285a0:	orr	r0, r0, r2, lsr #6
   285a4:	strb	r0, [r3, #1]
   285a8:	and	r2, r2, #63	; 0x3f
   285ac:	mvn	r2, r2, lsl #25
   285b0:	mvn	r2, r2, lsr #25
   285b4:	strb	r2, [r3, #2]
   285b8:	b	284ac <flatcc_json_parser_string_escape@@Base+0x338>
   285bc:	mov	r0, #3
   285c0:	strb	r0, [r3]
   285c4:	mvn	r0, #31
   285c8:	orr	r0, r0, r2, lsr #12
   285cc:	strb	r0, [r3, #1]
   285d0:	ubfx	ip, r2, #6, #6
   285d4:	mvn	r0, #127	; 0x7f
   285d8:	orr	ip, r0, ip
   285dc:	strb	ip, [r3, #2]
   285e0:	and	r2, r2, #63	; 0x3f
   285e4:	orr	r2, r0, r2
   285e8:	strb	r2, [r3, #3]
   285ec:	b	284ac <flatcc_json_parser_string_escape@@Base+0x338>
   285f0:	mov	r2, #1
   285f4:	strb	r2, [r3]
   285f8:	mov	r2, #9
   285fc:	strb	r2, [r3, #1]
   28600:	add	r0, r1, #2
   28604:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28608:	mov	r2, #1
   2860c:	strb	r2, [r3]
   28610:	mov	r2, #10
   28614:	strb	r2, [r3, #1]
   28618:	add	r0, r1, #2
   2861c:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28620:	mov	r2, #1
   28624:	strb	r2, [r3]
   28628:	mov	r2, #13
   2862c:	strb	r2, [r3, #1]
   28630:	add	r0, r1, #2
   28634:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28638:	mov	r2, #1
   2863c:	strb	r2, [r3]
   28640:	mov	r2, #8
   28644:	strb	r2, [r3, #1]
   28648:	add	r0, r1, #2
   2864c:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28650:	mov	r2, #1
   28654:	strb	r2, [r3]
   28658:	mov	r2, #12
   2865c:	strb	r2, [r3, #1]
   28660:	add	r0, r1, #2
   28664:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28668:	mov	r2, #1
   2866c:	strb	r2, [r3]
   28670:	mov	r2, #34	; 0x22
   28674:	strb	r2, [r3, #1]
   28678:	add	r0, r1, #2
   2867c:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28680:	mov	r2, #1
   28684:	strb	r2, [r3]
   28688:	mov	r2, #92	; 0x5c
   2868c:	strb	r2, [r3, #1]
   28690:	add	r0, r1, #2
   28694:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   28698:	mov	r2, #1
   2869c:	strb	r2, [r3]
   286a0:	mov	r2, #47	; 0x2f
   286a4:	strb	r2, [r3, #1]
   286a8:	add	r0, r1, #2
   286ac:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>
   286b0:	mov	ip, #0
   286b4:	strb	ip, [r3]
   286b8:	mov	r3, #18
   286bc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   286c0:	b	281a4 <flatcc_json_parser_string_escape@@Base+0x30>

000286c4 <flatcc_json_parser_skip_constant@@Base>:
   286c4:	strd	r4, [sp, #-16]!
   286c8:	str	r6, [sp, #8]
   286cc:	str	lr, [sp, #12]
   286d0:	mov	r6, r0
   286d4:	mov	r4, r1
   286d8:	mov	r5, r2
   286dc:	cmp	r1, r2
   286e0:	bne	28708 <flatcc_json_parser_skip_constant@@Base+0x44>
   286e4:	mov	r4, r2
   286e8:	mov	r0, r4
   286ec:	ldrd	r4, [sp]
   286f0:	ldr	r6, [sp, #8]
   286f4:	add	sp, sp, #12
   286f8:	pop	{pc}		; (ldr pc, [sp], #4)
   286fc:	add	r4, r4, #1
   28700:	cmp	r5, r4
   28704:	beq	286e8 <flatcc_json_parser_skip_constant@@Base+0x24>
   28708:	ldrb	r3, [r4]
   2870c:	cmp	r3, #95	; 0x5f
   28710:	movne	r2, #0
   28714:	moveq	r2, #1
   28718:	orrs	r2, r2, r3, lsr #7
   2871c:	bne	286fc <flatcc_json_parser_skip_constant@@Base+0x38>
   28720:	sub	r2, r3, #48	; 0x30
   28724:	uxtb	r2, r2
   28728:	cmp	r3, #46	; 0x2e
   2872c:	cmpne	r2, #9
   28730:	bls	286fc <flatcc_json_parser_skip_constant@@Base+0x38>
   28734:	orr	r2, r3, #32
   28738:	sub	r2, r2, #97	; 0x61
   2873c:	uxtb	r2, r2
   28740:	cmp	r2, #25
   28744:	addls	r4, r4, #1
   28748:	bls	28700 <flatcc_json_parser_skip_constant@@Base+0x3c>
   2874c:	sub	r2, r5, r4
   28750:	cmp	r2, #1
   28754:	ble	28764 <flatcc_json_parser_skip_constant@@Base+0xa0>
   28758:	cmp	r3, #32
   2875c:	bhi	286e8 <flatcc_json_parser_skip_constant@@Base+0x24>
   28760:	beq	28784 <flatcc_json_parser_skip_constant@@Base+0xc0>
   28764:	mov	r2, r5
   28768:	mov	r1, r4
   2876c:	mov	r0, r6
   28770:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   28774:	cmp	r0, r4
   28778:	beq	286e8 <flatcc_json_parser_skip_constant@@Base+0x24>
   2877c:	mov	r4, r0
   28780:	b	28700 <flatcc_json_parser_skip_constant@@Base+0x3c>
   28784:	ldrb	r3, [r4, #1]
   28788:	cmp	r3, #32
   2878c:	addhi	r0, r4, #1
   28790:	bls	28764 <flatcc_json_parser_skip_constant@@Base+0xa0>
   28794:	b	28774 <flatcc_json_parser_skip_constant@@Base+0xb0>

00028798 <flatcc_json_parser_match_constant@@Base>:
   28798:	strd	r4, [sp, #-16]!
   2879c:	str	r6, [sp, #8]
   287a0:	str	lr, [sp, #12]
   287a4:	sub	lr, r2, r1
   287a8:	cmp	lr, r3
   287ac:	ble	28808 <flatcc_json_parser_match_constant@@Base+0x70>
   287b0:	mov	r5, r2
   287b4:	mov	r6, r1
   287b8:	mov	ip, r0
   287bc:	add	r4, r1, r3
   287c0:	ldr	r2, [r0, #12]
   287c4:	cmp	r2, #0
   287c8:	bne	28828 <flatcc_json_parser_match_constant@@Base+0x90>
   287cc:	ldrb	r3, [r1, r3]
   287d0:	cmp	r3, #32
   287d4:	beq	288f4 <flatcc_json_parser_match_constant@@Base+0x15c>
   287d8:	cmp	r3, #34	; 0x22
   287dc:	beq	2893c <flatcc_json_parser_match_constant@@Base+0x1a4>
   287e0:	cmp	r3, #92	; 0x5c
   287e4:	bne	289a0 <flatcc_json_parser_match_constant@@Base+0x208>
   287e8:	mov	r3, #0
   287ec:	ldr	r2, [sp, #16]
   287f0:	str	r3, [r2]
   287f4:	mov	r3, #18
   287f8:	mov	r2, r5
   287fc:	mov	r1, r4
   28800:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28804:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   28808:	mov	r3, #0
   2880c:	ldr	r2, [sp, #16]
   28810:	str	r3, [r2]
   28814:	mov	r0, r1
   28818:	ldrd	r4, [sp]
   2881c:	ldr	r6, [sp, #8]
   28820:	add	sp, sp, #12
   28824:	pop	{pc}		; (ldr pc, [sp], #4)
   28828:	sub	r2, r5, r4
   2882c:	cmp	r2, #1
   28830:	ble	28844 <flatcc_json_parser_match_constant@@Base+0xac>
   28834:	ldrb	r3, [r1, r3]
   28838:	cmp	r3, #32
   2883c:	bhi	289b4 <flatcc_json_parser_match_constant@@Base+0x21c>
   28840:	beq	288c0 <flatcc_json_parser_match_constant@@Base+0x128>
   28844:	mov	r2, r5
   28848:	mov	r1, r4
   2884c:	mov	r0, ip
   28850:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   28854:	cmp	r5, r0
   28858:	beq	289c4 <flatcc_json_parser_match_constant@@Base+0x22c>
   2885c:	cmp	r4, r0
   28860:	beq	28890 <flatcc_json_parser_match_constant@@Base+0xf8>
   28864:	ldrb	r3, [r0]
   28868:	cmp	r3, #95	; 0x5f
   2886c:	movne	r2, #0
   28870:	moveq	r2, #1
   28874:	orrs	r2, r2, r3, lsr #7
   28878:	bne	288d4 <flatcc_json_parser_match_constant@@Base+0x13c>
   2887c:	orr	r3, r3, #32
   28880:	sub	r3, r3, #97	; 0x61
   28884:	uxtb	r3, r3
   28888:	cmp	r3, #25
   2888c:	bls	288e4 <flatcc_json_parser_match_constant@@Base+0x14c>
   28890:	mov	r3, #0
   28894:	ldr	r2, [sp, #16]
   28898:	str	r3, [r2]
   2889c:	ldrb	r2, [r0]
   288a0:	and	r3, r2, #223	; 0xdf
   288a4:	cmp	r2, #44	; 0x2c
   288a8:	cmpne	r3, #93	; 0x5d
   288ac:	moveq	r3, #1
   288b0:	movne	r3, #0
   288b4:	cmp	r3, #0
   288b8:	moveq	r0, r6
   288bc:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   288c0:	ldrb	r3, [r4, #1]
   288c4:	cmp	r3, #32
   288c8:	addhi	r0, r4, #1
   288cc:	bls	28844 <flatcc_json_parser_match_constant@@Base+0xac>
   288d0:	b	28854 <flatcc_json_parser_match_constant@@Base+0xbc>
   288d4:	mov	r3, #1
   288d8:	ldr	r2, [sp, #16]
   288dc:	str	r3, [r2]
   288e0:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   288e4:	mov	r3, #1
   288e8:	ldr	r2, [sp, #16]
   288ec:	str	r3, [r2]
   288f0:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   288f4:	add	r3, r4, #1
   288f8:	cmp	r5, r3
   288fc:	beq	289d4 <flatcc_json_parser_match_constant@@Base+0x23c>
   28900:	ldrb	r2, [r4, #1]
   28904:	cmp	r2, #32
   28908:	bne	289ec <flatcc_json_parser_match_constant@@Base+0x254>
   2890c:	add	r3, r4, #2
   28910:	mov	r2, r5
   28914:	mov	r4, r3
   28918:	cmp	r2, r3
   2891c:	beq	289d8 <flatcc_json_parser_match_constant@@Base+0x240>
   28920:	add	r3, r3, #1
   28924:	ldrb	r1, [r4]
   28928:	cmp	r1, #32
   2892c:	beq	28914 <flatcc_json_parser_match_constant@@Base+0x17c>
   28930:	ldrb	r3, [r4]
   28934:	cmp	r3, #34	; 0x22
   28938:	bne	28978 <flatcc_json_parser_match_constant@@Base+0x1e0>
   2893c:	add	r0, r4, #1
   28940:	cmn	r0, #1
   28944:	bge	28958 <flatcc_json_parser_match_constant@@Base+0x1c0>
   28948:	ldrb	r3, [r4, #1]
   2894c:	cmp	r3, #32
   28950:	bhi	28968 <flatcc_json_parser_match_constant@@Base+0x1d0>
   28954:	beq	2898c <flatcc_json_parser_match_constant@@Base+0x1f4>
   28958:	mov	r2, #0
   2895c:	mov	r1, r0
   28960:	mov	r0, ip
   28964:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   28968:	mov	r3, #0
   2896c:	ldr	r2, [sp, #16]
   28970:	str	r3, [r2]
   28974:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   28978:	mov	r3, #1
   2897c:	ldr	r2, [sp, #16]
   28980:	str	r3, [r2]
   28984:	mov	r0, r4
   28988:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   2898c:	ldrb	r3, [r4, #2]
   28990:	cmp	r3, #32
   28994:	addhi	r0, r4, #2
   28998:	bls	28958 <flatcc_json_parser_match_constant@@Base+0x1c0>
   2899c:	b	28968 <flatcc_json_parser_match_constant@@Base+0x1d0>
   289a0:	mov	r3, #0
   289a4:	ldr	r2, [sp, #16]
   289a8:	str	r3, [r2]
   289ac:	mov	r0, r1
   289b0:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   289b4:	cmp	r4, r5
   289b8:	movne	r0, r4
   289bc:	bne	28890 <flatcc_json_parser_match_constant@@Base+0xf8>
   289c0:	mov	r0, r5
   289c4:	mov	r3, #0
   289c8:	ldr	r2, [sp, #16]
   289cc:	str	r3, [r2]
   289d0:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   289d4:	mov	r4, r3
   289d8:	mov	r3, #0
   289dc:	ldr	r2, [sp, #16]
   289e0:	str	r3, [r2]
   289e4:	mov	r0, r4
   289e8:	b	28818 <flatcc_json_parser_match_constant@@Base+0x80>
   289ec:	mov	r4, r3
   289f0:	b	28930 <flatcc_json_parser_match_constant@@Base+0x198>

000289f4 <flatcc_json_parser_double@@Base>:
   289f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   289f8:	strd	r6, [sp, #8]
   289fc:	str	r8, [sp, #16]
   28a00:	str	lr, [sp, #20]
   28a04:	mov	r4, #0
   28a08:	mov	r5, #0
   28a0c:	strd	r4, [r3]
   28a10:	cmp	r1, r2
   28a14:	beq	28aa8 <flatcc_json_parser_double@@Base+0xb4>
   28a18:	ldrb	ip, [r1]
   28a1c:	cmp	ip, #45	; 0x2d
   28a20:	addeq	ip, r1, #1
   28a24:	movne	ip, r1
   28a28:	mov	r6, r3
   28a2c:	mov	r5, r2
   28a30:	mov	r4, r1
   28a34:	mov	r7, r0
   28a38:	sub	r3, r2, ip
   28a3c:	cmp	r3, #1
   28a40:	ble	28a58 <flatcc_json_parser_double@@Base+0x64>
   28a44:	ldrb	r3, [ip]
   28a48:	cmp	r3, #46	; 0x2e
   28a4c:	beq	28acc <flatcc_json_parser_double@@Base+0xd8>
   28a50:	cmp	r3, #48	; 0x30
   28a54:	beq	28ac0 <flatcc_json_parser_double@@Base+0xcc>
   28a58:	mov	r2, r6
   28a5c:	sub	r1, r5, r4
   28a60:	mov	r0, r4
   28a64:	bl	26be0 <grisu3_diy_fp_encode_double@@Base+0x500>
   28a68:	mov	r2, r0
   28a6c:	cmp	r4, r0
   28a70:	cmpne	r0, #0
   28a74:	bne	28aa8 <flatcc_json_parser_double@@Base+0xb4>
   28a78:	vldr	d7, [r6]
   28a7c:	vabs.f64	d7, d7
   28a80:	vldr	d6, [pc, #96]	; 28ae8 <flatcc_json_parser_double@@Base+0xf4>
   28a84:	vcmp.f64	d7, d6
   28a88:	vmrs	APSR_nzcv, fpscr
   28a8c:	movgt	r3, #7
   28a90:	movle	r3, #6
   28a94:	mov	r2, r5
   28a98:	mov	r1, r4
   28a9c:	mov	r0, r7
   28aa0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28aa4:	mov	r2, r0
   28aa8:	mov	r0, r2
   28aac:	ldrd	r4, [sp]
   28ab0:	ldrd	r6, [sp, #8]
   28ab4:	ldr	r8, [sp, #16]
   28ab8:	add	sp, sp, #20
   28abc:	pop	{pc}		; (ldr pc, [sp], #4)
   28ac0:	ldrb	r3, [ip, #1]
   28ac4:	cmp	r3, #48	; 0x30
   28ac8:	bne	28a58 <flatcc_json_parser_double@@Base+0x64>
   28acc:	mov	r3, #6
   28ad0:	mov	r2, r5
   28ad4:	mov	r1, r4
   28ad8:	mov	r0, r7
   28adc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28ae0:	mov	r2, r0
   28ae4:	b	28aa8 <flatcc_json_parser_double@@Base+0xb4>
   28ae8:			; <UNDEFINED> instruction: 0xffffffff
   28aec:	svcvc	0x00efffff

00028af0 <flatcc_json_parser_float@@Base>:
   28af0:	mov	ip, #0
   28af4:	str	ip, [r3]
   28af8:	cmp	r1, r2
   28afc:	beq	28c20 <flatcc_json_parser_float@@Base+0x130>
   28b00:	strd	r4, [sp, #-20]!	; 0xffffffec
   28b04:	strd	r6, [sp, #8]
   28b08:	str	lr, [sp, #16]
   28b0c:	sub	sp, sp, #12
   28b10:	ldrb	ip, [r1]
   28b14:	cmp	ip, #45	; 0x2d
   28b18:	addeq	ip, r1, #1
   28b1c:	movne	ip, r1
   28b20:	mov	r6, r3
   28b24:	mov	r5, r2
   28b28:	mov	r4, r1
   28b2c:	mov	r7, r0
   28b30:	sub	r3, r2, ip
   28b34:	cmp	r3, #1
   28b38:	ble	28b50 <flatcc_json_parser_float@@Base+0x60>
   28b3c:	ldrb	r3, [ip]
   28b40:	cmp	r3, #46	; 0x2e
   28b44:	beq	28bac <flatcc_json_parser_float@@Base+0xbc>
   28b48:	cmp	r3, #48	; 0x30
   28b4c:	beq	28ba0 <flatcc_json_parser_float@@Base+0xb0>
   28b50:	mov	r2, sp
   28b54:	sub	r1, r5, r4
   28b58:	mov	r0, r4
   28b5c:	bl	26be0 <grisu3_diy_fp_encode_double@@Base+0x500>
   28b60:	vldr	d6, [sp]
   28b64:	vcvt.f32.f64	s15, d6
   28b68:	vstr	s15, [r6]
   28b6c:	vabs.f32	s15, s15
   28b70:	vldr	s14, [pc, #176]	; 28c28 <flatcc_json_parser_float@@Base+0x138>
   28b74:	vcmp.f32	s15, s14
   28b78:	vmrs	APSR_nzcv, fpscr
   28b7c:	bgt	28bc4 <flatcc_json_parser_float@@Base+0xd4>
   28b80:	cmp	r4, r0
   28b84:	cmpne	r0, #0
   28b88:	beq	28c08 <flatcc_json_parser_float@@Base+0x118>
   28b8c:	add	sp, sp, #12
   28b90:	ldrd	r4, [sp]
   28b94:	ldrd	r6, [sp, #8]
   28b98:	add	sp, sp, #16
   28b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   28ba0:	ldrb	r3, [ip, #1]
   28ba4:	cmp	r3, #48	; 0x30
   28ba8:	bne	28b50 <flatcc_json_parser_float@@Base+0x60>
   28bac:	mov	r3, #6
   28bb0:	mov	r2, r5
   28bb4:	mov	r1, r4
   28bb8:	mov	r0, r7
   28bbc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28bc0:	b	28b8c <flatcc_json_parser_float@@Base+0x9c>
   28bc4:	vcmpe.f64	d6, #0.0
   28bc8:	vmrs	APSR_nzcv, fpscr
   28bcc:	vldr	s15, [pc, #88]	; 28c2c <flatcc_json_parser_float@@Base+0x13c>
   28bd0:	vldr	s14, [pc, #88]	; 28c30 <flatcc_json_parser_float@@Base+0x140>
   28bd4:	vmovpl.f32	s15, s14
   28bd8:	vstr	s15, [r6]
   28bdc:	vabs.f32	s15, s15
   28be0:	vldr	s14, [pc, #64]	; 28c28 <flatcc_json_parser_float@@Base+0x138>
   28be4:	vcmp.f32	s15, s14
   28be8:	vmrs	APSR_nzcv, fpscr
   28bec:	ble	28c08 <flatcc_json_parser_float@@Base+0x118>
   28bf0:	mov	r3, #7
   28bf4:	mov	r2, r5
   28bf8:	mov	r1, r4
   28bfc:	mov	r0, r7
   28c00:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28c04:	b	28b8c <flatcc_json_parser_float@@Base+0x9c>
   28c08:	mov	r3, #6
   28c0c:	mov	r2, r5
   28c10:	mov	r1, r4
   28c14:	mov	r0, r7
   28c18:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28c1c:	b	28b8c <flatcc_json_parser_float@@Base+0x9c>
   28c20:	mov	r0, r2
   28c24:	bx	lr
   28c28:	svcvc	0x007fffff
   28c2c:			; <UNDEFINED> instruction: 0xff800000
   28c30:	svcvc	0x00800000

00028c34 <flatcc_json_parser_generic_json@@Base>:
   28c34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28c38:	strd	r6, [sp, #8]
   28c3c:	strd	r8, [sp, #16]
   28c40:	strd	sl, [sp, #24]
   28c44:	str	lr, [sp, #32]
   28c48:	sub	sp, sp, #524	; 0x20c
   28c4c:	mov	r4, r2
   28c50:	cmp	r1, r2
   28c54:	beq	295bc <flatcc_json_parser_generic_json@@Base+0x988>
   28c58:	mov	r8, r0
   28c5c:	mov	r6, r1
   28c60:	add	r5, sp, #8
   28c64:	mov	r7, r5
   28c68:	b	29460 <flatcc_json_parser_generic_json@@Base+0x82c>
   28c6c:	ldrb	r3, [r6]
   28c70:	cmp	r3, #34	; 0x22
   28c74:	addeq	r6, r6, #1
   28c78:	moveq	r3, #0
   28c7c:	streq	r3, [r8, #12]
   28c80:	beq	28cd4 <flatcc_json_parser_generic_json@@Base+0xa0>
   28c84:	cmp	r3, #46	; 0x2e
   28c88:	movne	r3, #1
   28c8c:	strne	r3, [r8, #12]
   28c90:	beq	28cb0 <flatcc_json_parser_generic_json@@Base+0x7c>
   28c94:	cmp	r4, r6
   28c98:	beq	29730 <flatcc_json_parser_generic_json@@Base+0xafc>
   28c9c:	ldrb	r3, [r6]
   28ca0:	cmp	r3, #32
   28ca4:	bhi	28d10 <flatcc_json_parser_generic_json@@Base+0xdc>
   28ca8:	mov	r0, r6
   28cac:	b	28d4c <flatcc_json_parser_generic_json@@Base+0x118>
   28cb0:	mov	r3, #5
   28cb4:	mov	r2, r4
   28cb8:	mov	r1, r6
   28cbc:	mov	r0, r8
   28cc0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28cc4:	mov	r6, r0
   28cc8:	ldr	r3, [r8, #12]
   28ccc:	cmp	r3, #0
   28cd0:	bne	28c94 <flatcc_json_parser_generic_json@@Base+0x60>
   28cd4:	cmp	r4, r6
   28cd8:	beq	28e38 <flatcc_json_parser_generic_json@@Base+0x204>
   28cdc:	ldrb	r3, [r6]
   28ce0:	cmp	r3, #34	; 0x22
   28ce4:	bne	28e04 <flatcc_json_parser_generic_json@@Base+0x1d0>
   28ce8:	add	r0, r6, #1
   28cec:	b	28d4c <flatcc_json_parser_generic_json@@Base+0x118>
   28cf0:	add	r0, r6, #1
   28cf4:	cmp	r4, r0
   28cf8:	beq	28dcc <flatcc_json_parser_generic_json@@Base+0x198>
   28cfc:	ldrb	r2, [r0]
   28d00:	add	r6, r6, #1
   28d04:	cmp	r2, #32
   28d08:	bls	28dcc <flatcc_json_parser_generic_json@@Base+0x198>
   28d0c:	mov	r3, r2
   28d10:	mov	r0, r6
   28d14:	cmp	r3, #46	; 0x2e
   28d18:	cmpne	r3, #95	; 0x5f
   28d1c:	beq	28cf0 <flatcc_json_parser_generic_json@@Base+0xbc>
   28d20:	tst	r3, #128	; 0x80
   28d24:	bne	28cf0 <flatcc_json_parser_generic_json@@Base+0xbc>
   28d28:	sub	r2, r3, #48	; 0x30
   28d2c:	uxtb	r2, r2
   28d30:	cmp	r2, #9
   28d34:	bls	28cf0 <flatcc_json_parser_generic_json@@Base+0xbc>
   28d38:	orr	r2, r3, #32
   28d3c:	sub	r2, r2, #97	; 0x61
   28d40:	uxtb	r2, r2
   28d44:	cmp	r2, #25
   28d48:	bls	28dc4 <flatcc_json_parser_generic_json@@Base+0x190>
   28d4c:	sub	r3, r4, r0
   28d50:	cmp	r3, #1
   28d54:	ble	28d68 <flatcc_json_parser_generic_json@@Base+0x134>
   28d58:	ldrb	r3, [r0]
   28d5c:	cmp	r3, #32
   28d60:	bhi	28d78 <flatcc_json_parser_generic_json@@Base+0x144>
   28d64:	beq	28e50 <flatcc_json_parser_generic_json@@Base+0x21c>
   28d68:	mov	r2, r4
   28d6c:	mov	r1, r0
   28d70:	mov	r0, r8
   28d74:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   28d78:	cmp	r4, r0
   28d7c:	beq	28e64 <flatcc_json_parser_generic_json@@Base+0x230>
   28d80:	ldrb	r3, [r0]
   28d84:	cmp	r3, #58	; 0x3a
   28d88:	bne	28e7c <flatcc_json_parser_generic_json@@Base+0x248>
   28d8c:	add	r6, r0, #1
   28d90:	sub	r3, r4, r6
   28d94:	cmp	r3, #1
   28d98:	ble	28dac <flatcc_json_parser_generic_json@@Base+0x178>
   28d9c:	ldrb	r3, [r0, #1]
   28da0:	cmp	r3, #32
   28da4:	bhi	29474 <flatcc_json_parser_generic_json@@Base+0x840>
   28da8:	beq	28e94 <flatcc_json_parser_generic_json@@Base+0x260>
   28dac:	mov	r2, r4
   28db0:	mov	r1, r6
   28db4:	mov	r0, r8
   28db8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   28dbc:	mov	r6, r0
   28dc0:	b	29474 <flatcc_json_parser_generic_json@@Base+0x840>
   28dc4:	add	r0, r6, #1
   28dc8:	b	28cf4 <flatcc_json_parser_generic_json@@Base+0xc0>
   28dcc:	cmp	r3, #46	; 0x2e
   28dd0:	bne	28d4c <flatcc_json_parser_generic_json@@Base+0x118>
   28dd4:	mov	r3, #5
   28dd8:	mov	r2, r4
   28ddc:	mov	r1, r0
   28de0:	mov	r0, r8
   28de4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28de8:	b	28d4c <flatcc_json_parser_generic_json@@Base+0x118>
   28dec:	add	r6, r3, #1
   28df0:	cmp	r4, r6
   28df4:	beq	28e38 <flatcc_json_parser_generic_json@@Base+0x204>
   28df8:	ldrb	r3, [r3, #1]
   28dfc:	cmp	r3, #34	; 0x22
   28e00:	beq	28e2c <flatcc_json_parser_generic_json@@Base+0x1f8>
   28e04:	cmp	r3, #92	; 0x5c
   28e08:	movne	r3, r6
   28e0c:	bne	28dec <flatcc_json_parser_generic_json@@Base+0x1b8>
   28e10:	sub	r3, r4, r6
   28e14:	cmp	r3, #1
   28e18:	ble	28e24 <flatcc_json_parser_generic_json@@Base+0x1f0>
   28e1c:	add	r3, r6, #1
   28e20:	b	28dec <flatcc_json_parser_generic_json@@Base+0x1b8>
   28e24:	cmp	r4, r6
   28e28:	beq	28e38 <flatcc_json_parser_generic_json@@Base+0x204>
   28e2c:	ldrb	r3, [r6]
   28e30:	cmp	r3, #34	; 0x22
   28e34:	beq	28ce8 <flatcc_json_parser_generic_json@@Base+0xb4>
   28e38:	mov	r3, #20
   28e3c:	mov	r2, r4
   28e40:	mov	r1, r6
   28e44:	mov	r0, r8
   28e48:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28e4c:	b	28d4c <flatcc_json_parser_generic_json@@Base+0x118>
   28e50:	ldrb	r3, [r0, #1]
   28e54:	cmp	r3, #32
   28e58:	addhi	r0, r0, #1
   28e5c:	bls	28d68 <flatcc_json_parser_generic_json@@Base+0x134>
   28e60:	b	28d78 <flatcc_json_parser_generic_json@@Base+0x144>
   28e64:	mov	r3, #10
   28e68:	mov	r2, r4
   28e6c:	mov	r1, r0
   28e70:	mov	r0, r8
   28e74:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28e78:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   28e7c:	mov	r3, #4
   28e80:	mov	r2, r4
   28e84:	mov	r1, r0
   28e88:	mov	r0, r8
   28e8c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28e90:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   28e94:	ldrb	r3, [r0, #2]
   28e98:	cmp	r3, #32
   28e9c:	addhi	r6, r0, #2
   28ea0:	bls	28dac <flatcc_json_parser_generic_json@@Base+0x178>
   28ea4:	b	29474 <flatcc_json_parser_generic_json@@Base+0x840>
   28ea8:	cmp	r3, #48	; 0x30
   28eac:	bcs	29654 <flatcc_json_parser_generic_json@@Base+0xa20>
   28eb0:	cmp	r3, #34	; 0x22
   28eb4:	beq	28ee4 <flatcc_json_parser_generic_json@@Base+0x2b0>
   28eb8:	cmp	r3, #45	; 0x2d
   28ebc:	beq	29654 <flatcc_json_parser_generic_json@@Base+0xa20>
   28ec0:	mov	r2, r4
   28ec4:	mov	r1, r6
   28ec8:	mov	r0, r8
   28ecc:	bl	286c4 <flatcc_json_parser_skip_constant@@Base>
   28ed0:	cmp	r0, r6
   28ed4:	beq	291a8 <flatcc_json_parser_generic_json@@Base+0x574>
   28ed8:	mov	sl, #10
   28edc:	mov	fp, #9
   28ee0:	b	2937c <flatcc_json_parser_generic_json@@Base+0x748>
   28ee4:	cmp	r4, r6
   28ee8:	addne	r0, r6, #1
   28eec:	bne	28f04 <flatcc_json_parser_generic_json@@Base+0x2d0>
   28ef0:	mov	r3, #16
   28ef4:	mov	r2, r4
   28ef8:	mov	r1, r6
   28efc:	mov	r0, r8
   28f00:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28f04:	cmp	r4, r0
   28f08:	beq	295cc <flatcc_json_parser_generic_json@@Base+0x998>
   28f0c:	ldrb	r3, [r0]
   28f10:	cmp	r3, #34	; 0x22
   28f14:	bne	28f44 <flatcc_json_parser_generic_json@@Base+0x310>
   28f18:	b	28f68 <flatcc_json_parser_generic_json@@Base+0x334>
   28f1c:	add	r3, sp, #4
   28f20:	mov	r2, r4
   28f24:	mov	r1, r0
   28f28:	mov	r0, r8
   28f2c:	bl	28174 <flatcc_json_parser_string_escape@@Base>
   28f30:	cmp	r4, r0
   28f34:	beq	295cc <flatcc_json_parser_generic_json@@Base+0x998>
   28f38:	ldrb	r3, [r0]
   28f3c:	cmp	r3, #34	; 0x22
   28f40:	beq	28f68 <flatcc_json_parser_generic_json@@Base+0x334>
   28f44:	mov	r2, r4
   28f48:	mov	r1, r0
   28f4c:	mov	r0, r8
   28f50:	bl	2795c <flatcc_json_parser_string_part@@Base>
   28f54:	cmp	r4, r0
   28f58:	beq	28f1c <flatcc_json_parser_generic_json@@Base+0x2e8>
   28f5c:	ldrb	r3, [r0]
   28f60:	cmp	r3, #34	; 0x22
   28f64:	bne	28f1c <flatcc_json_parser_generic_json@@Base+0x2e8>
   28f68:	add	r0, r0, #1
   28f6c:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   28f70:	add	r6, r6, #1
   28f74:	cmp	r4, r6
   28f78:	bne	29668 <flatcc_json_parser_generic_json@@Base+0xa34>
   28f7c:	mov	r3, #6
   28f80:	mov	r2, r6
   28f84:	mov	r1, r6
   28f88:	mov	r0, r8
   28f8c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28f90:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   28f94:	add	r0, r6, #1
   28f98:	cmp	r4, r0
   28f9c:	bne	296d0 <flatcc_json_parser_generic_json@@Base+0xa9c>
   28fa0:	b	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   28fa4:	mov	r3, #6
   28fa8:	mov	r2, r4
   28fac:	mov	r1, r6
   28fb0:	mov	r0, r8
   28fb4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   28fb8:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   28fbc:	ldrb	r3, [r0, #1]
   28fc0:	sub	r3, r3, #48	; 0x30
   28fc4:	uxtb	r3, r3
   28fc8:	cmp	r3, #9
   28fcc:	bhi	29020 <flatcc_json_parser_generic_json@@Base+0x3ec>
   28fd0:	add	r2, r0, #2
   28fd4:	cmp	r4, r2
   28fd8:	beq	29620 <flatcc_json_parser_generic_json@@Base+0x9ec>
   28fdc:	ldrb	r3, [r0, #2]
   28fe0:	sub	r3, r3, #48	; 0x30
   28fe4:	uxtb	r3, r3
   28fe8:	cmp	r3, #9
   28fec:	bhi	29628 <flatcc_json_parser_generic_json@@Base+0x9f4>
   28ff0:	add	r2, r0, #3
   28ff4:	mov	r1, r4
   28ff8:	mov	r0, r2
   28ffc:	cmp	r1, r2
   29000:	beq	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   29004:	add	r2, r2, #1
   29008:	ldrb	r3, [r0]
   2900c:	sub	r3, r3, #48	; 0x30
   29010:	uxtb	r3, r3
   29014:	cmp	r3, #9
   29018:	bls	28ff8 <flatcc_json_parser_generic_json@@Base+0x3c4>
   2901c:	b	296dc <flatcc_json_parser_generic_json@@Base+0xaa8>
   29020:	mov	r3, #6
   29024:	mov	r2, r4
   29028:	add	r1, r0, #1
   2902c:	mov	r0, r8
   29030:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29034:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29038:	add	r1, r0, #1
   2903c:	cmp	r4, r1
   29040:	beq	29088 <flatcc_json_parser_generic_json@@Base+0x454>
   29044:	ldrb	r3, [r0, #1]
   29048:	sub	r3, r3, #43	; 0x2b
   2904c:	tst	r3, #253	; 0xfd
   29050:	bne	29060 <flatcc_json_parser_generic_json@@Base+0x42c>
   29054:	add	r1, r0, #2
   29058:	cmp	r4, r1
   2905c:	beq	29074 <flatcc_json_parser_generic_json@@Base+0x440>
   29060:	ldrb	r3, [r1]
   29064:	sub	r3, r3, #48	; 0x30
   29068:	uxtb	r3, r3
   2906c:	cmp	r3, #9
   29070:	bls	2909c <flatcc_json_parser_generic_json@@Base+0x468>
   29074:	mov	r3, #6
   29078:	mov	r2, r4
   2907c:	mov	r0, r8
   29080:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29084:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29088:	mov	r3, #6
   2908c:	mov	r2, r1
   29090:	mov	r0, r8
   29094:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29098:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2909c:	add	r0, r1, #1
   290a0:	cmp	r4, r0
   290a4:	beq	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   290a8:	ldrb	r3, [r1, #1]
   290ac:	sub	r3, r3, #48	; 0x30
   290b0:	uxtb	r3, r3
   290b4:	cmp	r3, #9
   290b8:	bhi	296ec <flatcc_json_parser_generic_json@@Base+0xab8>
   290bc:	add	r3, r1, #2
   290c0:	mov	r1, r4
   290c4:	mov	r0, r3
   290c8:	cmp	r1, r3
   290cc:	beq	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   290d0:	add	r3, r3, #1
   290d4:	ldrb	r2, [r0]
   290d8:	sub	r2, r2, #48	; 0x30
   290dc:	uxtb	r2, r2
   290e0:	cmp	r2, #9
   290e4:	bls	290c4 <flatcc_json_parser_generic_json@@Base+0x490>
   290e8:	b	296ec <flatcc_json_parser_generic_json@@Base+0xab8>
   290ec:	add	r3, sp, #520	; 0x208
   290f0:	cmp	r5, r3
   290f4:	beq	29150 <flatcc_json_parser_generic_json@@Base+0x51c>
   290f8:	mov	r3, #93	; 0x5d
   290fc:	strb	r3, [r5], #1
   29100:	add	r1, r6, #1
   29104:	sub	r3, r4, r1
   29108:	cmp	r3, #1
   2910c:	ble	29124 <flatcc_json_parser_generic_json@@Base+0x4f0>
   29110:	ldrb	r3, [r6, #1]
   29114:	cmp	r3, #32
   29118:	movhi	r6, r1
   2911c:	bhi	29134 <flatcc_json_parser_generic_json@@Base+0x500>
   29120:	beq	29168 <flatcc_json_parser_generic_json@@Base+0x534>
   29124:	mov	r2, r4
   29128:	mov	r0, r8
   2912c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   29130:	mov	r6, r0
   29134:	cmp	r4, r6
   29138:	beq	295c4 <flatcc_json_parser_generic_json@@Base+0x990>
   2913c:	ldrb	r3, [r6]
   29140:	cmp	r3, #93	; 0x5d
   29144:	bne	29460 <flatcc_json_parser_generic_json@@Base+0x82c>
   29148:	mov	r0, r6
   2914c:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29150:	mov	r3, #2
   29154:	mov	r2, r4
   29158:	mov	r1, r6
   2915c:	mov	r0, r8
   29160:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29164:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   29168:	ldrb	r3, [r6, #2]
   2916c:	cmp	r3, #32
   29170:	addhi	r6, r6, #2
   29174:	bls	29124 <flatcc_json_parser_generic_json@@Base+0x4f0>
   29178:	b	29134 <flatcc_json_parser_generic_json@@Base+0x500>
   2917c:	mov	r3, #2
   29180:	mov	r2, r4
   29184:	mov	r1, r6
   29188:	mov	r0, r8
   2918c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29190:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   29194:	ldrb	r3, [r6, #2]
   29198:	cmp	r3, #32
   2919c:	addhi	r6, r6, #2
   291a0:	bls	294c8 <flatcc_json_parser_generic_json@@Base+0x894>
   291a4:	b	294d8 <flatcc_json_parser_generic_json@@Base+0x8a4>
   291a8:	mov	r3, #5
   291ac:	mov	r2, r4
   291b0:	mov	r1, r6
   291b4:	mov	r0, r8
   291b8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   291bc:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   291c0:	sub	r3, r4, r0
   291c4:	cmp	r3, #1
   291c8:	ble	291dc <flatcc_json_parser_generic_json@@Base+0x5a8>
   291cc:	ldrb	r3, [r0]
   291d0:	cmp	r3, #32
   291d4:	bhi	291f4 <flatcc_json_parser_generic_json@@Base+0x5c0>
   291d8:	beq	29220 <flatcc_json_parser_generic_json@@Base+0x5ec>
   291dc:	mov	r2, r4
   291e0:	mov	r1, r0
   291e4:	mov	r0, r8
   291e8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   291ec:	cmp	r4, r0
   291f0:	beq	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   291f4:	ldrb	r3, [r0]
   291f8:	cmp	r3, #44	; 0x2c
   291fc:	beq	2927c <flatcc_json_parser_generic_json@@Base+0x648>
   29200:	cmp	r3, #93	; 0x5d
   29204:	beq	29234 <flatcc_json_parser_generic_json@@Base+0x600>
   29208:	mov	r3, fp
   2920c:	mov	r2, r4
   29210:	mov	r1, r0
   29214:	mov	r0, r8
   29218:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2921c:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29220:	ldrb	r3, [r0, #1]
   29224:	cmp	r3, #32
   29228:	addhi	r0, r0, #1
   2922c:	bls	291dc <flatcc_json_parser_generic_json@@Base+0x5a8>
   29230:	b	291ec <flatcc_json_parser_generic_json@@Base+0x5b8>
   29234:	add	r1, r0, #1
   29238:	sub	r3, r4, r1
   2923c:	cmp	r3, #1
   29240:	ble	29258 <flatcc_json_parser_generic_json@@Base+0x624>
   29244:	ldrb	r3, [r0, #1]
   29248:	cmp	r3, #32
   2924c:	movhi	r0, r1
   29250:	bhi	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29254:	beq	29268 <flatcc_json_parser_generic_json@@Base+0x634>
   29258:	mov	r2, r4
   2925c:	mov	r0, r8
   29260:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   29264:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29268:	ldrb	r3, [r0, #2]
   2926c:	cmp	r3, #32
   29270:	addhi	r0, r0, #2
   29274:	bls	29258 <flatcc_json_parser_generic_json@@Base+0x624>
   29278:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   2927c:	add	r6, r0, #1
   29280:	sub	r3, r4, r6
   29284:	cmp	r3, #1
   29288:	ble	2929c <flatcc_json_parser_generic_json@@Base+0x668>
   2928c:	ldrb	r3, [r0, #1]
   29290:	cmp	r3, #32
   29294:	bhi	292b0 <flatcc_json_parser_generic_json@@Base+0x67c>
   29298:	beq	292f8 <flatcc_json_parser_generic_json@@Base+0x6c4>
   2929c:	mov	r2, r4
   292a0:	mov	r1, r6
   292a4:	mov	r0, r8
   292a8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   292ac:	mov	r6, r0
   292b0:	cmp	r4, r6
   292b4:	beq	2930c <flatcc_json_parser_generic_json@@Base+0x6d8>
   292b8:	ldrb	r3, [r6]
   292bc:	cmp	r3, #93	; 0x5d
   292c0:	bne	29460 <flatcc_json_parser_generic_json@@Base+0x82c>
   292c4:	add	r0, r6, #1
   292c8:	sub	r3, r4, r0
   292cc:	cmp	r3, #1
   292d0:	ble	292e4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   292d4:	ldrb	r3, [r6, #1]
   292d8:	cmp	r3, #32
   292dc:	bhi	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   292e0:	beq	29324 <flatcc_json_parser_generic_json@@Base+0x6f0>
   292e4:	mov	r2, r4
   292e8:	mov	r1, r0
   292ec:	mov	r0, r8
   292f0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   292f4:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   292f8:	ldrb	r3, [r0, #2]
   292fc:	cmp	r3, #32
   29300:	addhi	r6, r0, #2
   29304:	bls	2929c <flatcc_json_parser_generic_json@@Base+0x668>
   29308:	b	292b0 <flatcc_json_parser_generic_json@@Base+0x67c>
   2930c:	mov	r3, fp
   29310:	mov	r2, r4
   29314:	mov	r1, r6
   29318:	mov	r0, r8
   2931c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29320:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29324:	ldrb	r3, [r6, #2]
   29328:	cmp	r3, #32
   2932c:	addhi	r0, r6, #2
   29330:	bls	292e4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   29334:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29338:	mov	r2, r4
   2933c:	mov	r1, r0
   29340:	mov	r0, r8
   29344:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   29348:	cmp	r4, r0
   2934c:	beq	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29350:	ldrb	r3, [r0]
   29354:	cmp	r3, #44	; 0x2c
   29358:	beq	29418 <flatcc_json_parser_generic_json@@Base+0x7e4>
   2935c:	cmp	r3, #125	; 0x7d
   29360:	beq	293d0 <flatcc_json_parser_generic_json@@Base+0x79c>
   29364:	mov	r3, sl
   29368:	mov	r2, r4
   2936c:	mov	r1, r0
   29370:	mov	r0, r8
   29374:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29378:	mov	r5, r9
   2937c:	subs	r3, r5, r7
   29380:	movne	r3, #1
   29384:	cmp	r0, r4
   29388:	cmpne	r5, r7
   2938c:	beq	29568 <flatcc_json_parser_generic_json@@Base+0x934>
   29390:	sub	r9, r5, #1
   29394:	ldrb	r3, [r5, #-1]
   29398:	cmp	r3, #93	; 0x5d
   2939c:	beq	291c0 <flatcc_json_parser_generic_json@@Base+0x58c>
   293a0:	sub	r3, r4, r0
   293a4:	cmp	r3, #1
   293a8:	ble	29338 <flatcc_json_parser_generic_json@@Base+0x704>
   293ac:	ldrb	r3, [r0]
   293b0:	cmp	r3, #32
   293b4:	bhi	29350 <flatcc_json_parser_generic_json@@Base+0x71c>
   293b8:	bne	29338 <flatcc_json_parser_generic_json@@Base+0x704>
   293bc:	ldrb	r3, [r0, #1]
   293c0:	cmp	r3, #32
   293c4:	addhi	r0, r0, #1
   293c8:	bls	29338 <flatcc_json_parser_generic_json@@Base+0x704>
   293cc:	b	29348 <flatcc_json_parser_generic_json@@Base+0x714>
   293d0:	add	r1, r0, #1
   293d4:	sub	r3, r4, r1
   293d8:	cmp	r3, #1
   293dc:	ble	293f4 <flatcc_json_parser_generic_json@@Base+0x7c0>
   293e0:	ldrb	r3, [r0, #1]
   293e4:	cmp	r3, #32
   293e8:	movhi	r0, r1
   293ec:	bhi	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   293f0:	beq	29404 <flatcc_json_parser_generic_json@@Base+0x7d0>
   293f4:	mov	r2, r4
   293f8:	mov	r0, r8
   293fc:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   29400:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29404:	ldrb	r3, [r0, #2]
   29408:	cmp	r3, #32
   2940c:	addhi	r0, r0, #2
   29410:	bls	293f4 <flatcc_json_parser_generic_json@@Base+0x7c0>
   29414:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29418:	add	r6, r0, #1
   2941c:	sub	r3, r4, r6
   29420:	cmp	r3, #1
   29424:	ble	29438 <flatcc_json_parser_generic_json@@Base+0x804>
   29428:	ldrb	r3, [r0, #1]
   2942c:	cmp	r3, #32
   29430:	bhi	2944c <flatcc_json_parser_generic_json@@Base+0x818>
   29434:	beq	294f4 <flatcc_json_parser_generic_json@@Base+0x8c0>
   29438:	mov	r2, r4
   2943c:	mov	r1, r6
   29440:	mov	r0, r8
   29444:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   29448:	mov	r6, r0
   2944c:	cmp	r4, r6
   29450:	beq	29508 <flatcc_json_parser_generic_json@@Base+0x8d4>
   29454:	ldrb	r3, [r6]
   29458:	cmp	r3, #125	; 0x7d
   2945c:	beq	29520 <flatcc_json_parser_generic_json@@Base+0x8ec>
   29460:	cmp	r5, r7
   29464:	beq	29630 <flatcc_json_parser_generic_json@@Base+0x9fc>
   29468:	ldrb	r3, [r5, #-1]
   2946c:	cmp	r3, #125	; 0x7d
   29470:	beq	28c6c <flatcc_json_parser_generic_json@@Base+0x38>
   29474:	ldrb	r3, [r6]
   29478:	cmp	r3, #57	; 0x39
   2947c:	bls	28ea8 <flatcc_json_parser_generic_json@@Base+0x274>
   29480:	cmp	r3, #91	; 0x5b
   29484:	beq	290ec <flatcc_json_parser_generic_json@@Base+0x4b8>
   29488:	cmp	r3, #123	; 0x7b
   2948c:	bne	28ec0 <flatcc_json_parser_generic_json@@Base+0x28c>
   29490:	add	r3, sp, #520	; 0x208
   29494:	cmp	r5, r3
   29498:	beq	2917c <flatcc_json_parser_generic_json@@Base+0x548>
   2949c:	mov	r3, #125	; 0x7d
   294a0:	strb	r3, [r5], #1
   294a4:	add	r1, r6, #1
   294a8:	sub	r3, r4, r1
   294ac:	cmp	r3, #1
   294b0:	ble	294c8 <flatcc_json_parser_generic_json@@Base+0x894>
   294b4:	ldrb	r3, [r6, #1]
   294b8:	cmp	r3, #32
   294bc:	movhi	r6, r1
   294c0:	bhi	294d8 <flatcc_json_parser_generic_json@@Base+0x8a4>
   294c4:	beq	29194 <flatcc_json_parser_generic_json@@Base+0x560>
   294c8:	mov	r2, r4
   294cc:	mov	r0, r8
   294d0:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   294d4:	mov	r6, r0
   294d8:	cmp	r4, r6
   294dc:	beq	295c4 <flatcc_json_parser_generic_json@@Base+0x990>
   294e0:	ldrb	r3, [r6]
   294e4:	cmp	r3, #125	; 0x7d
   294e8:	bne	29460 <flatcc_json_parser_generic_json@@Base+0x82c>
   294ec:	mov	r0, r6
   294f0:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   294f4:	ldrb	r3, [r0, #2]
   294f8:	cmp	r3, #32
   294fc:	addhi	r6, r0, #2
   29500:	bls	29438 <flatcc_json_parser_generic_json@@Base+0x804>
   29504:	b	2944c <flatcc_json_parser_generic_json@@Base+0x818>
   29508:	mov	r3, sl
   2950c:	mov	r2, r4
   29510:	mov	r1, r6
   29514:	mov	r0, r8
   29518:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2951c:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29520:	add	r0, r6, #1
   29524:	sub	r3, r4, r0
   29528:	cmp	r3, #1
   2952c:	ble	29540 <flatcc_json_parser_generic_json@@Base+0x90c>
   29530:	ldrb	r3, [r6, #1]
   29534:	cmp	r3, #32
   29538:	bhi	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   2953c:	beq	29554 <flatcc_json_parser_generic_json@@Base+0x920>
   29540:	mov	r2, r4
   29544:	mov	r1, r0
   29548:	mov	r0, r8
   2954c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   29550:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29554:	ldrb	r3, [r6, #2]
   29558:	cmp	r3, #32
   2955c:	addhi	r0, r6, #2
   29560:	bls	29540 <flatcc_json_parser_generic_json@@Base+0x90c>
   29564:	b	29378 <flatcc_json_parser_generic_json@@Base+0x744>
   29568:	cmp	r0, r4
   2956c:	movne	r3, #0
   29570:	andeq	r3, r3, #1
   29574:	cmp	r3, #0
   29578:	bne	29598 <flatcc_json_parser_generic_json@@Base+0x964>
   2957c:	add	sp, sp, #524	; 0x20c
   29580:	ldrd	r4, [sp]
   29584:	ldrd	r6, [sp, #8]
   29588:	ldrd	r8, [sp, #16]
   2958c:	ldrd	sl, [sp, #24]
   29590:	add	sp, sp, #32
   29594:	pop	{pc}		; (ldr pc, [sp], #4)
   29598:	ldrb	r3, [r5, #-1]
   2959c:	cmp	r3, #93	; 0x5d
   295a0:	moveq	r3, #9
   295a4:	movne	r3, #10
   295a8:	mov	r2, r4
   295ac:	mov	r1, r0
   295b0:	mov	r0, r8
   295b4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   295b8:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   295bc:	mov	r0, r2
   295c0:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   295c4:	mov	r0, r4
   295c8:	b	2957c <flatcc_json_parser_generic_json@@Base+0x948>
   295cc:	mov	r3, #20
   295d0:	mov	r2, r4
   295d4:	mov	r1, r0
   295d8:	mov	r0, r8
   295dc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   295e0:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   295e4:	cmp	r3, #9
   295e8:	bcc	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   295ec:	cmp	r3, #11
   295f0:	bls	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   295f4:	cmp	r3, #13
   295f8:	beq	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   295fc:	mov	r3, #6
   29600:	mov	r2, r4
   29604:	mov	r1, r0
   29608:	mov	r0, r8
   2960c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29610:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29614:	cmp	r3, #44	; 0x2c
   29618:	bne	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   2961c:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29620:	mov	r0, r2
   29624:	b	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   29628:	mov	r0, r2
   2962c:	b	296dc <flatcc_json_parser_generic_json@@Base+0xaa8>
   29630:	ldrb	r3, [r6]
   29634:	cmp	r3, #57	; 0x39
   29638:	bhi	2971c <flatcc_json_parser_generic_json@@Base+0xae8>
   2963c:	cmp	r3, #48	; 0x30
   29640:	bcs	29654 <flatcc_json_parser_generic_json@@Base+0xa20>
   29644:	cmp	r3, #34	; 0x22
   29648:	beq	28ee4 <flatcc_json_parser_generic_json@@Base+0x2b0>
   2964c:	cmp	r3, #45	; 0x2d
   29650:	bne	28ec0 <flatcc_json_parser_generic_json@@Base+0x28c>
   29654:	cmp	r4, r6
   29658:	moveq	r0, r6
   2965c:	beq	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29660:	cmp	r3, #45	; 0x2d
   29664:	beq	28f70 <flatcc_json_parser_generic_json@@Base+0x33c>
   29668:	ldrb	r3, [r6]
   2966c:	cmp	r3, #48	; 0x30
   29670:	beq	28f94 <flatcc_json_parser_generic_json@@Base+0x360>
   29674:	sub	r3, r3, #49	; 0x31
   29678:	uxtb	r3, r3
   2967c:	cmp	r3, #8
   29680:	bhi	28fa4 <flatcc_json_parser_generic_json@@Base+0x370>
   29684:	add	r0, r6, #1
   29688:	cmp	r4, r0
   2968c:	beq	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   29690:	ldrb	r3, [r6, #1]
   29694:	sub	r3, r3, #48	; 0x30
   29698:	uxtb	r3, r3
   2969c:	cmp	r3, #9
   296a0:	bhi	296d0 <flatcc_json_parser_generic_json@@Base+0xa9c>
   296a4:	add	r6, r6, #2
   296a8:	mov	r2, r4
   296ac:	mov	r0, r6
   296b0:	cmp	r6, r2
   296b4:	beq	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   296b8:	add	r6, r6, #1
   296bc:	ldrb	r3, [r0]
   296c0:	sub	r3, r3, #48	; 0x30
   296c4:	uxtb	r3, r3
   296c8:	cmp	r3, #9
   296cc:	bls	296ac <flatcc_json_parser_generic_json@@Base+0xa78>
   296d0:	ldrb	r3, [r0]
   296d4:	cmp	r3, #46	; 0x2e
   296d8:	beq	28fbc <flatcc_json_parser_generic_json@@Base+0x388>
   296dc:	ldrb	r3, [r0]
   296e0:	and	r3, r3, #223	; 0xdf
   296e4:	cmp	r3, #69	; 0x45
   296e8:	beq	29038 <flatcc_json_parser_generic_json@@Base+0x404>
   296ec:	ldrb	r3, [r0]
   296f0:	cmp	r3, #32
   296f4:	beq	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   296f8:	bls	295e4 <flatcc_json_parser_generic_json@@Base+0x9b0>
   296fc:	cmp	r3, #58	; 0x3a
   29700:	beq	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29704:	bls	29614 <flatcc_json_parser_generic_json@@Base+0x9e0>
   29708:	cmp	r3, #93	; 0x5d
   2970c:	beq	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   29710:	cmp	r3, #125	; 0x7d
   29714:	bne	295fc <flatcc_json_parser_generic_json@@Base+0x9c8>
   29718:	b	28ed8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2971c:	cmp	r3, #91	; 0x5b
   29720:	beq	290f8 <flatcc_json_parser_generic_json@@Base+0x4c4>
   29724:	cmp	r3, #123	; 0x7b
   29728:	beq	29490 <flatcc_json_parser_generic_json@@Base+0x85c>
   2972c:	b	28ec0 <flatcc_json_parser_generic_json@@Base+0x28c>
   29730:	mov	r0, r6
   29734:	b	28d4c <flatcc_json_parser_generic_json@@Base+0x118>

00029738 <flatcc_json_parser_unmatched_symbol@@Base>:
   29738:	strd	r4, [sp, #-16]!
   2973c:	str	r6, [sp, #8]
   29740:	str	lr, [sp, #12]
   29744:	mov	r5, r0
   29748:	mov	r4, r2
   2974c:	ldr	r3, [r0, #8]
   29750:	tst	r3, #1
   29754:	beq	29954 <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   29758:	ldr	r3, [r0, #12]
   2975c:	cmp	r3, #0
   29760:	bne	29780 <flatcc_json_parser_unmatched_symbol@@Base+0x48>
   29764:	cmp	r1, r2
   29768:	beq	29960 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   2976c:	ldrb	r3, [r1]
   29770:	cmp	r3, #34	; 0x22
   29774:	bne	2989c <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   29778:	add	r1, r1, #1
   2977c:	b	297f8 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   29780:	cmp	r1, r2
   29784:	beq	298f4 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   29788:	ldrb	r3, [r1]
   2978c:	cmp	r3, #32
   29790:	bls	297f8 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   29794:	mov	r2, r1
   29798:	b	297bc <flatcc_json_parser_unmatched_symbol@@Base+0x84>
   2979c:	add	r1, r2, #1
   297a0:	cmp	r4, r1
   297a4:	beq	29860 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   297a8:	ldrb	r0, [r1]
   297ac:	add	r2, r2, #1
   297b0:	cmp	r0, #32
   297b4:	bls	29860 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   297b8:	mov	r3, r0
   297bc:	mov	r1, r2
   297c0:	cmp	r3, #46	; 0x2e
   297c4:	cmpne	r3, #95	; 0x5f
   297c8:	beq	2979c <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   297cc:	tst	r3, #128	; 0x80
   297d0:	bne	2979c <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   297d4:	sub	r0, r3, #48	; 0x30
   297d8:	uxtb	r0, r0
   297dc:	cmp	r0, #9
   297e0:	bls	2979c <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   297e4:	orr	r0, r3, #32
   297e8:	sub	r0, r0, #97	; 0x61
   297ec:	uxtb	r0, r0
   297f0:	cmp	r0, #25
   297f4:	bls	29858 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   297f8:	sub	r3, r4, r1
   297fc:	cmp	r3, #1
   29800:	ble	29814 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   29804:	ldrb	r3, [r1]
   29808:	cmp	r3, #32
   2980c:	bhi	29824 <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   29810:	beq	298e0 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   29814:	mov	r2, r4
   29818:	mov	r0, r5
   2981c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   29820:	mov	r1, r0
   29824:	cmp	r4, r1
   29828:	beq	29838 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2982c:	ldrb	r3, [r1]
   29830:	cmp	r3, #58	; 0x3a
   29834:	beq	298fc <flatcc_json_parser_unmatched_symbol@@Base+0x1c4>
   29838:	mov	r3, #4
   2983c:	mov	r2, r4
   29840:	mov	r0, r5
   29844:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29848:	ldrd	r4, [sp]
   2984c:	ldr	r6, [sp, #8]
   29850:	add	sp, sp, #12
   29854:	pop	{pc}		; (ldr pc, [sp], #4)
   29858:	add	r1, r2, #1
   2985c:	b	297a0 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   29860:	cmp	r3, #46	; 0x2e
   29864:	bne	297f8 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   29868:	mov	r3, #5
   2986c:	mov	r2, r4
   29870:	mov	r0, r5
   29874:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29878:	mov	r1, r0
   2987c:	b	297f8 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   29880:	add	r3, r1, #1
   29884:	add	r1, r3, #1
   29888:	cmp	r4, r1
   2988c:	beq	298c8 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   29890:	ldrb	r3, [r3, #1]
   29894:	cmp	r3, #34	; 0x22
   29898:	beq	298bc <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   2989c:	cmp	r3, #92	; 0x5c
   298a0:	movne	r3, r1
   298a4:	bne	29884 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   298a8:	sub	r3, r4, r1
   298ac:	cmp	r3, #1
   298b0:	bgt	29880 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   298b4:	cmp	r4, r1
   298b8:	beq	298c8 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   298bc:	ldrb	r3, [r1]
   298c0:	cmp	r3, #34	; 0x22
   298c4:	beq	29778 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   298c8:	mov	r3, #20
   298cc:	mov	r2, r4
   298d0:	mov	r0, r5
   298d4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   298d8:	mov	r1, r0
   298dc:	b	297f8 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   298e0:	ldrb	r3, [r1, #1]
   298e4:	cmp	r3, #32
   298e8:	addhi	r1, r1, #1
   298ec:	bls	29814 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   298f0:	b	29824 <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   298f4:	mov	r1, r2
   298f8:	b	29814 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   298fc:	add	r0, r1, #1
   29900:	sub	r3, r4, r0
   29904:	cmp	r3, #1
   29908:	ble	2991c <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   2990c:	ldrb	r3, [r1, #1]
   29910:	cmp	r3, #32
   29914:	bhi	2992c <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   29918:	beq	29940 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   2991c:	mov	r2, r4
   29920:	mov	r1, r0
   29924:	mov	r0, r5
   29928:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2992c:	mov	r2, r4
   29930:	mov	r1, r0
   29934:	mov	r0, r5
   29938:	bl	28c34 <flatcc_json_parser_generic_json@@Base>
   2993c:	b	29848 <flatcc_json_parser_unmatched_symbol@@Base+0x110>
   29940:	ldrb	r3, [r1, #2]
   29944:	cmp	r3, #32
   29948:	addhi	r0, r1, #2
   2994c:	bls	2991c <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   29950:	b	2992c <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   29954:	mov	r3, #13
   29958:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2995c:	b	29848 <flatcc_json_parser_unmatched_symbol@@Base+0x110>
   29960:	mov	r1, r2
   29964:	b	298c8 <flatcc_json_parser_unmatched_symbol@@Base+0x190>

00029968 <flatcc_json_parser_integer@@Base>:
   29968:	cmp	r1, r2
   2996c:	beq	29a74 <flatcc_json_parser_integer@@Base+0x10c>
   29970:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29974:	strd	r6, [sp, #8]
   29978:	strd	r8, [sp, #16]
   2997c:	strd	sl, [sp, #24]
   29980:	str	lr, [sp, #32]
   29984:	sub	sp, sp, #12
   29988:	mov	r8, r0
   2998c:	ldrb	lr, [r1]
   29990:	cmp	lr, #45	; 0x2d
   29994:	movne	lr, #0
   29998:	moveq	lr, #1
   2999c:	str	lr, [r3]
   299a0:	add	r0, r1, lr
   299a4:	cmp	r2, r0
   299a8:	beq	29acc <flatcc_json_parser_integer@@Base+0x164>
   299ac:	mov	ip, r1
   299b0:	str	r8, [sp, #4]
   299b4:	ldrb	r8, [r1, lr]
   299b8:	sub	r3, r8, #48	; 0x30
   299bc:	uxtb	r3, r3
   299c0:	cmp	r3, #9
   299c4:	bhi	29a84 <flatcc_json_parser_integer@@Base+0x11c>
   299c8:	uxtb	r8, r8
   299cc:	mov	r9, #0
   299d0:	subs	r4, r8, #48	; 0x30
   299d4:	sbc	r5, r9, #0
   299d8:	add	lr, r0, #1
   299dc:	mov	sl, r2
   299e0:	mov	r0, lr
   299e4:	cmp	lr, sl
   299e8:	beq	29ad4 <flatcc_json_parser_integer@@Base+0x16c>
   299ec:	ldrb	r8, [lr], #1
   299f0:	sub	r3, r8, #48	; 0x30
   299f4:	uxtb	r3, r3
   299f8:	cmp	r3, #9
   299fc:	bhi	29a8c <flatcc_json_parser_integer@@Base+0x124>
   29a00:	lsl	fp, r5, #2
   29a04:	lsl	r3, r4, #2
   29a08:	orr	r9, fp, r4, lsr #30
   29a0c:	adds	r3, r3, r4
   29a10:	adc	r9, r9, r5
   29a14:	adds	r3, r3, r3
   29a18:	adc	r9, r9, r9
   29a1c:	subs	r3, r3, #48	; 0x30
   29a20:	sbc	fp, r9, #0
   29a24:	uxtb	r8, r8
   29a28:	mov	r9, #0
   29a2c:	adds	r6, r8, r3
   29a30:	adc	r7, r9, fp
   29a34:	cmp	r7, r5
   29a38:	cmpeq	r6, r4
   29a3c:	bcc	29a4c <flatcc_json_parser_integer@@Base+0xe4>
   29a40:	mov	r4, r6
   29a44:	mov	r5, r7
   29a48:	b	299e0 <flatcc_json_parser_integer@@Base+0x78>
   29a4c:	mov	r3, #8
   29a50:	mov	r1, r0
   29a54:	ldr	r0, [sp, #4]
   29a58:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29a5c:	b	29ab0 <flatcc_json_parser_integer@@Base+0x148>
   29a60:	mov	r3, #12
   29a64:	mov	r1, r0
   29a68:	ldr	r0, [sp, #4]
   29a6c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29a70:	b	29ab0 <flatcc_json_parser_integer@@Base+0x148>
   29a74:	mov	r0, r2
   29a78:	bx	lr
   29a7c:	mov	r0, ip
   29a80:	b	29ab0 <flatcc_json_parser_integer@@Base+0x148>
   29a84:	mov	r4, #0
   29a88:	mov	r5, #0
   29a8c:	cmp	r0, ip
   29a90:	beq	29a7c <flatcc_json_parser_integer@@Base+0x114>
   29a94:	ldrb	r3, [r0]
   29a98:	and	r1, r3, #223	; 0xdf
   29a9c:	cmp	r3, #46	; 0x2e
   29aa0:	cmpne	r1, #69	; 0x45
   29aa4:	beq	29a60 <flatcc_json_parser_integer@@Base+0xf8>
   29aa8:	ldr	r3, [sp, #48]	; 0x30
   29aac:	strd	r4, [r3]
   29ab0:	add	sp, sp, #12
   29ab4:	ldrd	r4, [sp]
   29ab8:	ldrd	r6, [sp, #8]
   29abc:	ldrd	r8, [sp, #16]
   29ac0:	ldrd	sl, [sp, #24]
   29ac4:	add	sp, sp, #32
   29ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   29acc:	mov	r4, #0
   29ad0:	mov	r5, #0
   29ad4:	cmp	r1, r0
   29ad8:	bne	29aa8 <flatcc_json_parser_integer@@Base+0x140>
   29adc:	b	29ab0 <flatcc_json_parser_integer@@Base+0x148>

00029ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   29ae0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29ae4:	strd	r6, [sp, #8]
   29ae8:	strd	r8, [sp, #16]
   29aec:	strd	sl, [sp, #24]
   29af0:	str	lr, [sp, #32]
   29af4:	sub	sp, sp, #28
   29af8:	mov	r7, r0
   29afc:	mov	r6, r2
   29b00:	mov	r8, r3
   29b04:	cmp	r1, r2
   29b08:	beq	29b1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c>
   29b0c:	ldrb	r3, [r1]
   29b10:	cmp	r3, #34	; 0x22
   29b14:	addeq	r4, r1, #1
   29b18:	beq	29b30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x50>
   29b1c:	mov	r3, #16
   29b20:	mov	r2, r6
   29b24:	mov	r0, r7
   29b28:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29b2c:	mov	r4, r0
   29b30:	mov	r2, r6
   29b34:	mov	r1, r4
   29b38:	mov	r0, r7
   29b3c:	bl	2795c <flatcc_json_parser_string_part@@Base>
   29b40:	mov	r5, r0
   29b44:	cmp	r6, r0
   29b48:	beq	29b58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   29b4c:	ldrb	r3, [r0]
   29b50:	cmp	r3, #34	; 0x22
   29b54:	beq	29b9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   29b58:	mov	r3, #0
   29b5c:	str	r3, [r8]
   29b60:	ldr	r3, [sp, #64]	; 0x40
   29b64:	cmp	r3, #0
   29b68:	movne	r3, #32
   29b6c:	moveq	r3, #31
   29b70:	mov	r2, r6
   29b74:	mov	r1, r5
   29b78:	mov	r0, r7
   29b7c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29b80:	add	sp, sp, #28
   29b84:	ldrd	r4, [sp]
   29b88:	ldrd	r6, [sp, #8]
   29b8c:	ldrd	r8, [sp, #16]
   29b90:	ldrd	sl, [sp, #24]
   29b94:	add	sp, sp, #32
   29b98:	pop	{pc}		; (ldr pc, [sp], #4)
   29b9c:	sub	sl, r0, r4
   29ba0:	and	r3, sl, #3
   29ba4:	lsr	r9, sl, #2
   29ba8:	add	r9, r9, r9, lsl #1
   29bac:	cmp	r3, #2
   29bb0:	addeq	r9, r9, #1
   29bb4:	beq	29bc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe0>
   29bb8:	cmp	r3, #3
   29bbc:	addeq	r9, r9, #2
   29bc0:	mvn	r3, #0
   29bc4:	mov	r2, #1
   29bc8:	mov	r1, r2
   29bcc:	ldr	r0, [r7]
   29bd0:	bl	237a0 <flatcc_builder_start_vector@@Base>
   29bd4:	cmp	r0, #0
   29bd8:	beq	29bfc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   29bdc:	mov	r3, #0
   29be0:	str	r3, [r8]
   29be4:	mov	r3, #33	; 0x21
   29be8:	mov	r2, r6
   29bec:	mov	r1, r5
   29bf0:	mov	r0, r7
   29bf4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29bf8:	b	29b80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   29bfc:	mov	r1, r9
   29c00:	ldr	r0, [r7]
   29c04:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   29c08:	subs	r3, r0, #0
   29c0c:	str	r3, [sp]
   29c10:	beq	29bdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   29c14:	ldr	r3, [sp, #64]	; 0x40
   29c18:	adds	r3, r3, #0
   29c1c:	movne	r3, #1
   29c20:	cmp	r3, #0
   29c24:	beq	29c40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   29c28:	cmp	r3, #1
   29c2c:	ldreq	r0, [pc, #708]	; 29ef8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x418>
   29c30:	beq	29c44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   29c34:	mov	r5, #0
   29c38:	add	r5, r4, r5
   29c3c:	b	29b58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   29c40:	ldr	r0, [pc, #692]	; 29efc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   29c44:	cmp	r9, #0
   29c48:	movne	fp, r9
   29c4c:	mvneq	fp, #0
   29c50:	str	sl, [sp, #8]
   29c54:	mov	ip, r4
   29c58:	ldr	r3, [sp]
   29c5c:	str	r3, [sp, #4]
   29c60:	add	fp, r3, fp
   29c64:	ldr	r3, [sp, #4]
   29c68:	sub	r3, fp, r3
   29c6c:	str	r3, [sp, #12]
   29c70:	ldr	r1, [sp, #8]
   29c74:	cmp	r1, #0
   29c78:	beq	29c84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a4>
   29c7c:	mov	r3, #0
   29c80:	b	29cc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   29c84:	ldr	r1, [sp, #8]
   29c88:	cmp	r1, #2
   29c8c:	beq	29dfc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x31c>
   29c90:	cmp	r1, #3
   29c94:	beq	29e9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3bc>
   29c98:	cmp	r1, #0
   29c9c:	bne	29d10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   29ca0:	b	29e38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x358>
   29ca4:	add	ip, ip, #1
   29ca8:	sub	r1, r1, #1
   29cac:	sub	r3, r3, #1
   29cb0:	add	r3, r3, #1
   29cb4:	cmp	r3, #3
   29cb8:	bhi	29d94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   29cbc:	cmp	r3, r1
   29cc0:	beq	29c88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a8>
   29cc4:	ldrb	r2, [ip, r3]
   29cc8:	ldrb	r2, [r0, r2]
   29ccc:	add	lr, sp, #24
   29cd0:	add	lr, lr, r3
   29cd4:	strb	r2, [lr, #-4]
   29cd8:	cmp	r2, #63	; 0x3f
   29cdc:	bls	29cb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   29ce0:	cmp	r2, #65	; 0x41
   29ce4:	beq	29ca4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   29ce8:	cmp	r2, #66	; 0x42
   29cec:	movne	r2, r3
   29cf0:	beq	29d1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   29cf4:	sub	r2, r1, r2
   29cf8:	cmp	r3, #2
   29cfc:	beq	29e00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   29d00:	cmp	r3, #3
   29d04:	beq	29ea0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
   29d08:	cmp	r3, #0
   29d0c:	beq	29e28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   29d10:	ldr	r3, [sp, #8]
   29d14:	sub	r5, sl, r3
   29d18:	b	29c38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   29d1c:	add	r2, r3, #1
   29d20:	cmp	r2, #7
   29d24:	movhi	lr, #0
   29d28:	movls	lr, #1
   29d2c:	cmp	r1, r2
   29d30:	movls	lr, #0
   29d34:	cmp	lr, #0
   29d38:	beq	29cf4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   29d3c:	add	lr, ip, r2
   29d40:	ldrb	ip, [ip, r2]
   29d44:	ldrb	ip, [r0, ip]
   29d48:	sub	ip, ip, #65	; 0x41
   29d4c:	uxtb	ip, ip
   29d50:	cmp	ip, #1
   29d54:	bhi	29cf4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   29d58:	add	r2, r2, #1
   29d5c:	cmp	r1, r2
   29d60:	movls	ip, #0
   29d64:	movhi	ip, #1
   29d68:	cmp	r2, #7
   29d6c:	movhi	ip, #0
   29d70:	cmp	ip, #0
   29d74:	beq	29cf4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   29d78:	ldrb	ip, [lr, #1]!
   29d7c:	ldrb	ip, [r0, ip]
   29d80:	sub	ip, ip, #65	; 0x41
   29d84:	uxtb	ip, ip
   29d88:	cmp	ip, #1
   29d8c:	bls	29d58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x278>
   29d90:	b	29cf4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   29d94:	ldr	r3, [sp, #12]
   29d98:	cmp	r3, #2
   29d9c:	bls	29eec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   29da0:	ldrb	lr, [sp, #21]
   29da4:	ldrb	r2, [sp, #20]
   29da8:	lsr	r3, lr, #4
   29dac:	orr	r3, r3, r2, lsl #2
   29db0:	ldr	r2, [sp, #4]
   29db4:	strb	r3, [r2]
   29db8:	ldrb	r2, [sp, #22]
   29dbc:	lsr	r3, r2, #2
   29dc0:	orr	r3, r3, lr, lsl #4
   29dc4:	ldr	lr, [sp, #4]
   29dc8:	strb	r3, [lr, #1]
   29dcc:	ldrb	r3, [sp, #23]
   29dd0:	orr	r3, r3, r2, lsl #6
   29dd4:	strb	r3, [lr, #2]
   29dd8:	add	r3, lr, #3
   29ddc:	str	r3, [sp, #4]
   29de0:	add	ip, ip, #4
   29de4:	sub	r2, r1, #4
   29de8:	str	r2, [sp, #8]
   29dec:	cmp	r3, fp
   29df0:	bne	29c64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x184>
   29df4:	ldr	r2, [sp, #8]
   29df8:	b	29e28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   29dfc:	mov	r2, #0
   29e00:	ldrb	r3, [sp, #21]
   29e04:	lsl	r1, r3, #4
   29e08:	tst	r1, #255	; 0xff
   29e0c:	bne	29eec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   29e10:	ldrb	r1, [sp, #20]
   29e14:	lsr	r3, r3, #4
   29e18:	orr	r3, r3, r1, lsl #2
   29e1c:	ldr	r1, [sp, #4]
   29e20:	strb	r3, [r1], #1
   29e24:	str	r1, [sp, #4]
   29e28:	sub	r2, sl, r2
   29e2c:	cmp	sl, r2
   29e30:	addne	r5, r4, r2
   29e34:	bne	29b58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   29e38:	ldr	r3, [sp, #4]
   29e3c:	ldr	r2, [sp]
   29e40:	sub	r1, r3, r2
   29e44:	cmp	r9, r1
   29e48:	bls	29e60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   29e4c:	sub	r1, r9, r1
   29e50:	ldr	r0, [r7]
   29e54:	bl	235c8 <flatcc_builder_truncate_vector@@Base>
   29e58:	cmp	r0, #0
   29e5c:	bne	29bdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   29e60:	ldr	r0, [r7]
   29e64:	bl	248a4 <flatcc_builder_end_vector@@Base>
   29e68:	str	r0, [r8]
   29e6c:	cmp	r0, #0
   29e70:	beq	29bdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   29e74:	ldrb	r3, [r5]
   29e78:	cmp	r3, #34	; 0x22
   29e7c:	addeq	r0, r5, #1
   29e80:	beq	29b80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   29e84:	mov	r3, #20
   29e88:	mov	r2, r6
   29e8c:	mov	r1, r5
   29e90:	mov	r0, r7
   29e94:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29e98:	b	29b80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   29e9c:	mov	r2, #0
   29ea0:	ldrb	r3, [sp, #22]
   29ea4:	lsl	r1, r3, #6
   29ea8:	tst	r1, #255	; 0xff
   29eac:	bne	29eec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   29eb0:	ldr	r1, [sp, #12]
   29eb4:	cmp	r1, #1
   29eb8:	bls	29eec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   29ebc:	ldrb	r0, [sp, #21]
   29ec0:	ldrb	ip, [sp, #20]
   29ec4:	lsr	r1, r0, #4
   29ec8:	orr	r1, r1, ip, lsl #2
   29ecc:	ldr	ip, [sp, #4]
   29ed0:	strb	r1, [ip]
   29ed4:	lsr	r3, r3, #2
   29ed8:	orr	r3, r3, r0, lsl #4
   29edc:	strb	r3, [ip, #1]
   29ee0:	add	r3, ip, #2
   29ee4:	str	r3, [sp, #4]
   29ee8:	b	29e28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   29eec:	ldr	r3, [sp, #8]
   29ef0:	sub	r5, sl, r3
   29ef4:	b	29c38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   29ef8:	andeq	ip, r2, r8, ror #18
   29efc:	andeq	ip, r2, r8, ror #16

00029f00 <flatcc_json_parser_build_string@@Base>:
   29f00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   29f04:	strd	r6, [sp, #8]
   29f08:	str	r8, [sp, #16]
   29f0c:	str	lr, [sp, #20]
   29f10:	sub	sp, sp, #8
   29f14:	mov	r5, r0
   29f18:	mov	r6, r2
   29f1c:	mov	r8, r3
   29f20:	cmp	r1, r2
   29f24:	beq	29f38 <flatcc_json_parser_build_string@@Base+0x38>
   29f28:	ldrb	r3, [r1]
   29f2c:	cmp	r3, #34	; 0x22
   29f30:	addeq	r7, r1, #1
   29f34:	beq	29f4c <flatcc_json_parser_build_string@@Base+0x4c>
   29f38:	mov	r3, #16
   29f3c:	mov	r2, r6
   29f40:	mov	r0, r5
   29f44:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29f48:	mov	r7, r0
   29f4c:	mov	r2, r6
   29f50:	mov	r1, r7
   29f54:	mov	r0, r5
   29f58:	bl	2795c <flatcc_json_parser_string_part@@Base>
   29f5c:	mov	r4, r0
   29f60:	cmp	r6, r0
   29f64:	beq	29f74 <flatcc_json_parser_build_string@@Base+0x74>
   29f68:	ldrb	r3, [r0]
   29f6c:	cmp	r3, #34	; 0x22
   29f70:	beq	29fa8 <flatcc_json_parser_build_string@@Base+0xa8>
   29f74:	ldr	r0, [r5]
   29f78:	bl	238c4 <flatcc_builder_start_string@@Base>
   29f7c:	cmp	r0, #0
   29f80:	beq	29fe8 <flatcc_json_parser_build_string@@Base+0xe8>
   29f84:	mov	r3, #0
   29f88:	str	r3, [r8]
   29f8c:	mov	r0, r4
   29f90:	add	sp, sp, #8
   29f94:	ldrd	r4, [sp]
   29f98:	ldrd	r6, [sp, #8]
   29f9c:	ldr	r8, [sp, #16]
   29fa0:	add	sp, sp, #20
   29fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   29fa8:	sub	r2, r0, r7
   29fac:	mov	r1, r7
   29fb0:	ldr	r0, [r5]
   29fb4:	bl	25394 <flatcc_builder_create_string@@Base>
   29fb8:	str	r0, [r8]
   29fbc:	ldrb	r3, [r4]
   29fc0:	cmp	r3, #34	; 0x22
   29fc4:	addeq	r4, r4, #1
   29fc8:	beq	29f8c <flatcc_json_parser_build_string@@Base+0x8c>
   29fcc:	mov	r3, #20
   29fd0:	mov	r2, r6
   29fd4:	mov	r1, r4
   29fd8:	mov	r0, r5
   29fdc:	bl	27930 <flatcc_json_parser_set_error@@Base>
   29fe0:	mov	r4, r0
   29fe4:	b	29f8c <flatcc_json_parser_build_string@@Base+0x8c>
   29fe8:	sub	r2, r4, r7
   29fec:	mov	r1, r7
   29ff0:	ldr	r0, [r5]
   29ff4:	bl	2345c <flatcc_builder_append_string@@Base>
   29ff8:	cmp	r0, #0
   29ffc:	beq	29f84 <flatcc_json_parser_build_string@@Base+0x84>
   2a000:	cmp	r6, r4
   2a004:	beq	2a0a0 <flatcc_json_parser_build_string@@Base+0x1a0>
   2a008:	ldrb	r3, [r4]
   2a00c:	cmp	r3, #34	; 0x22
   2a010:	bne	2a038 <flatcc_json_parser_build_string@@Base+0x138>
   2a014:	ldr	r0, [r5]
   2a018:	bl	25538 <flatcc_builder_end_string@@Base>
   2a01c:	str	r0, [r8]
   2a020:	b	29fbc <flatcc_json_parser_build_string@@Base+0xbc>
   2a024:	mov	r4, r7
   2a028:	b	29f84 <flatcc_json_parser_build_string@@Base+0x84>
   2a02c:	ldrb	r3, [r4]
   2a030:	cmp	r3, #34	; 0x22
   2a034:	beq	2a014 <flatcc_json_parser_build_string@@Base+0x114>
   2a038:	add	r3, sp, #4
   2a03c:	mov	r2, r6
   2a040:	mov	r1, r4
   2a044:	mov	r0, r5
   2a048:	bl	28174 <flatcc_json_parser_string_escape@@Base>
   2a04c:	mov	r7, r0
   2a050:	ldrb	r2, [sp, #4]
   2a054:	add	r1, sp, #5
   2a058:	ldr	r0, [r5]
   2a05c:	bl	2345c <flatcc_builder_append_string@@Base>
   2a060:	cmp	r0, #0
   2a064:	beq	2a024 <flatcc_json_parser_build_string@@Base+0x124>
   2a068:	mov	r2, r6
   2a06c:	mov	r1, r7
   2a070:	mov	r0, r5
   2a074:	bl	2795c <flatcc_json_parser_string_part@@Base>
   2a078:	mov	r4, r0
   2a07c:	cmp	r6, r0
   2a080:	beq	2a0a0 <flatcc_json_parser_build_string@@Base+0x1a0>
   2a084:	sub	r2, r0, r7
   2a088:	mov	r1, r7
   2a08c:	ldr	r0, [r5]
   2a090:	bl	2345c <flatcc_builder_append_string@@Base>
   2a094:	cmp	r0, #0
   2a098:	bne	2a02c <flatcc_json_parser_build_string@@Base+0x12c>
   2a09c:	b	29f84 <flatcc_json_parser_build_string@@Base+0x84>
   2a0a0:	ldr	r0, [r5]
   2a0a4:	bl	25538 <flatcc_builder_end_string@@Base>
   2a0a8:	str	r0, [r8]
   2a0ac:	b	29fcc <flatcc_json_parser_build_string@@Base+0xcc>

0002a0b0 <flatcc_json_parser_prepare_unions@@Base>:
   2a0b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a0b4:	strd	r6, [sp, #8]
   2a0b8:	str	r8, [sp, #16]
   2a0bc:	str	lr, [sp, #20]
   2a0c0:	mov	r6, r0
   2a0c4:	mov	r4, r1
   2a0c8:	mov	r7, r2
   2a0cc:	mov	r5, r3
   2a0d0:	add	r1, r3, r3, lsl #1
   2a0d4:	lsl	r1, r1, #3
   2a0d8:	add	r1, r1, #8
   2a0dc:	ldr	r0, [r0]
   2a0e0:	bl	2242c <flatcc_builder_enter_user_frame@@Base>
   2a0e4:	ldr	r3, [sp, #24]
   2a0e8:	str	r0, [r3]
   2a0ec:	cmp	r0, #0
   2a0f0:	beq	2a11c <flatcc_json_parser_prepare_unions@@Base+0x6c>
   2a0f4:	mov	r1, r0
   2a0f8:	ldr	r0, [r6]
   2a0fc:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a100:	str	r5, [r0]
   2a104:	mov	r0, r4
   2a108:	ldrd	r4, [sp]
   2a10c:	ldrd	r6, [sp, #8]
   2a110:	ldr	r8, [sp, #16]
   2a114:	add	sp, sp, #20
   2a118:	pop	{pc}		; (ldr pc, [sp], #4)
   2a11c:	mov	r3, #33	; 0x21
   2a120:	mov	r2, r7
   2a124:	mov	r1, r4
   2a128:	mov	r0, r6
   2a12c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a130:	b	2a108 <flatcc_json_parser_prepare_unions@@Base+0x58>

0002a134 <flatcc_json_parser_finalize_unions@@Base>:
   2a134:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a138:	strd	r6, [sp, #8]
   2a13c:	str	r8, [sp, #16]
   2a140:	str	lr, [sp, #20]
   2a144:	mov	r4, r0
   2a148:	mov	r6, r1
   2a14c:	mov	r7, r2
   2a150:	mov	r5, r3
   2a154:	mov	r1, r3
   2a158:	ldr	r0, [r0]
   2a15c:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a160:	ldr	r3, [r0, #4]
   2a164:	cmp	r3, #0
   2a168:	bne	2a190 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   2a16c:	mov	r1, r5
   2a170:	ldr	r0, [r4]
   2a174:	bl	22540 <flatcc_builder_exit_user_frame_at@@Base>
   2a178:	mov	r0, r6
   2a17c:	ldrd	r4, [sp]
   2a180:	ldrd	r6, [sp, #8]
   2a184:	ldr	r8, [sp, #16]
   2a188:	add	sp, sp, #20
   2a18c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a190:	mov	r3, #27
   2a194:	mov	r2, r7
   2a198:	mov	r1, r6
   2a19c:	mov	r0, r4
   2a1a0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a1a4:	mov	r6, r0
   2a1a8:	b	2a16c <flatcc_json_parser_finalize_unions@@Base+0x38>

0002a1ac <flatcc_json_parser_union@@Base>:
   2a1ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   2a1b0:	strd	r6, [sp, #8]
   2a1b4:	str	lr, [sp, #16]
   2a1b8:	sub	sp, sp, #20
   2a1bc:	mov	r5, r0
   2a1c0:	mov	r7, r1
   2a1c4:	mov	r6, r2
   2a1c8:	mov	r4, r3
   2a1cc:	ldr	r1, [sp, #44]	; 0x2c
   2a1d0:	ldr	r0, [r0]
   2a1d4:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a1d8:	add	r3, r4, r4, lsl #1
   2a1dc:	add	r3, r0, r3, lsl #3
   2a1e0:	ldr	r3, [r3, #8]
   2a1e4:	cmp	r3, #0
   2a1e8:	bne	2a284 <flatcc_json_parser_union@@Base+0xd8>
   2a1ec:	add	r3, r4, r4, lsl #1
   2a1f0:	add	r3, r0, r3, lsl #3
   2a1f4:	ldrb	r3, [r3, #20]
   2a1f8:	cmp	r3, #0
   2a1fc:	beq	2a2b4 <flatcc_json_parser_union@@Base+0x108>
   2a200:	add	r4, r4, r4, lsl #1
   2a204:	add	r4, r0, r4, lsl #3
   2a208:	ldrb	r3, [r4, #21]
   2a20c:	strb	r3, [sp, #8]
   2a210:	cmp	r3, #0
   2a214:	beq	2a2f8 <flatcc_json_parser_union@@Base+0x14c>
   2a218:	ldr	r2, [r0, #4]
   2a21c:	sub	r2, r2, #1
   2a220:	str	r2, [r0, #4]
   2a224:	add	r2, sp, #12
   2a228:	str	r2, [sp]
   2a22c:	mov	r2, r6
   2a230:	mov	r1, r7
   2a234:	mov	r0, r5
   2a238:	ldr	r4, [sp, #48]	; 0x30
   2a23c:	blx	r4
   2a240:	mov	r4, r0
   2a244:	cmp	r6, r0
   2a248:	beq	2a29c <flatcc_json_parser_union@@Base+0xf0>
   2a24c:	add	r3, sp, #16
   2a250:	ldmdb	r3, {r2, r3}
   2a254:	ldrh	r1, [sp, #40]	; 0x28
   2a258:	ldr	r0, [r5]
   2a25c:	bl	2599c <flatcc_builder_table_add_union@@Base>
   2a260:	cmp	r0, #0
   2a264:	beq	2a29c <flatcc_json_parser_union@@Base+0xf0>
   2a268:	mov	r3, #28
   2a26c:	mov	r2, r6
   2a270:	mov	r1, r4
   2a274:	mov	r0, r5
   2a278:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a27c:	mov	r4, r0
   2a280:	b	2a29c <flatcc_json_parser_union@@Base+0xf0>
   2a284:	mov	r3, #28
   2a288:	mov	r2, r6
   2a28c:	mov	r1, r7
   2a290:	mov	r0, r5
   2a294:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a298:	mov	r4, r0
   2a29c:	mov	r0, r4
   2a2a0:	add	sp, sp, #20
   2a2a4:	ldrd	r4, [sp]
   2a2a8:	ldrd	r6, [sp, #8]
   2a2ac:	add	sp, sp, #16
   2a2b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a2b4:	ldr	r3, [r0, #4]
   2a2b8:	add	r3, r3, #1
   2a2bc:	str	r3, [r0, #4]
   2a2c0:	ldr	r1, [r5, #16]
   2a2c4:	lsl	r3, r4, #1
   2a2c8:	add	r2, r3, r4
   2a2cc:	add	r2, r0, r2, lsl #3
   2a2d0:	str	r1, [r2, #16]
   2a2d4:	ldr	r1, [r5, #4]
   2a2d8:	str	r1, [r2, #12]
   2a2dc:	str	r7, [r2, #8]
   2a2e0:	mov	r2, r6
   2a2e4:	mov	r1, r7
   2a2e8:	mov	r0, r5
   2a2ec:	bl	28c34 <flatcc_json_parser_generic_json@@Base>
   2a2f0:	mov	r4, r0
   2a2f4:	b	2a29c <flatcc_json_parser_union@@Base+0xf0>
   2a2f8:	mov	r3, #25
   2a2fc:	mov	r2, r6
   2a300:	mov	r1, r7
   2a304:	mov	r0, r5
   2a308:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a30c:	mov	r4, r0
   2a310:	b	2a29c <flatcc_json_parser_union@@Base+0xf0>

0002a314 <flatcc_json_parser_union_type@@Base>:
   2a314:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a318:	strd	r6, [sp, #8]
   2a31c:	strd	r8, [sp, #16]
   2a320:	strd	sl, [sp, #24]
   2a324:	str	lr, [sp, #32]
   2a328:	sub	sp, sp, #36	; 0x24
   2a32c:	mov	r5, r0
   2a330:	mov	r7, r1
   2a334:	mov	r6, r2
   2a338:	mov	r4, r3
   2a33c:	ldr	r1, [sp, #76]	; 0x4c
   2a340:	ldr	r0, [r0]
   2a344:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a348:	add	r9, r0, #8
   2a34c:	add	r4, r4, r4, lsl #1
   2a350:	lsl	r4, r4, #3
   2a354:	add	sl, r9, r4
   2a358:	ldrb	r3, [sl, #12]
   2a35c:	cmp	r3, #0
   2a360:	bne	2a3dc <flatcc_json_parser_union_type@@Base+0xc8>
   2a364:	mov	r8, r0
   2a368:	mov	r3, #1
   2a36c:	strb	r3, [sl, #12]
   2a370:	mov	r2, #0
   2a374:	mov	r3, #0
   2a378:	strd	r2, [sp, #16]
   2a37c:	mov	r3, #0
   2a380:	str	r3, [sp, #12]
   2a384:	strb	r3, [sl, #13]
   2a388:	cmp	r7, r6
   2a38c:	beq	2a54c <flatcc_json_parser_union_type@@Base+0x238>
   2a390:	add	r3, sp, #16
   2a394:	str	r3, [sp]
   2a398:	add	r3, sp, #12
   2a39c:	mov	r2, r6
   2a3a0:	mov	r1, r7
   2a3a4:	mov	r0, r5
   2a3a8:	bl	29968 <flatcc_json_parser_integer@@Base>
   2a3ac:	mov	fp, r0
   2a3b0:	cmp	r7, r0
   2a3b4:	bne	2a414 <flatcc_json_parser_union_type@@Base+0x100>
   2a3b8:	add	r3, sl, #13
   2a3bc:	str	r3, [sp]
   2a3c0:	ldr	r3, [sp, #80]	; 0x50
   2a3c4:	mov	r2, r6
   2a3c8:	mov	r1, fp
   2a3cc:	mov	r0, r5
   2a3d0:	bl	27b5c <flatcc_json_parser_space_ext@@Base+0x14c>
   2a3d4:	mov	fp, r0
   2a3d8:	b	2a470 <flatcc_json_parser_union_type@@Base+0x15c>
   2a3dc:	mov	r3, #28
   2a3e0:	mov	r2, r6
   2a3e4:	mov	r1, r7
   2a3e8:	mov	r0, r5
   2a3ec:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a3f0:	mov	fp, r0
   2a3f4:	mov	r0, fp
   2a3f8:	add	sp, sp, #36	; 0x24
   2a3fc:	ldrd	r4, [sp]
   2a400:	ldrd	r6, [sp, #8]
   2a404:	ldrd	r8, [sp, #16]
   2a408:	ldrd	sl, [sp, #24]
   2a40c:	add	sp, sp, #32
   2a410:	pop	{pc}		; (ldr pc, [sp], #4)
   2a414:	ldr	r3, [sp, #12]
   2a418:	cmp	r3, #0
   2a41c:	bne	2a450 <flatcc_json_parser_union_type@@Base+0x13c>
   2a420:	ldrd	r2, [sp, #16]
   2a424:	cmp	r3, #0
   2a428:	cmpeq	r2, #255	; 0xff
   2a42c:	strbls	r2, [sl, #13]
   2a430:	bls	2a470 <flatcc_json_parser_union_type@@Base+0x15c>
   2a434:	mov	r3, #7
   2a438:	mov	r2, r6
   2a43c:	mov	r1, r0
   2a440:	mov	r0, r5
   2a444:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a448:	mov	fp, r0
   2a44c:	b	2a468 <flatcc_json_parser_union_type@@Base+0x154>
   2a450:	mov	r3, #8
   2a454:	mov	r2, r6
   2a458:	mov	r1, r0
   2a45c:	mov	r0, r5
   2a460:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a464:	mov	fp, r0
   2a468:	cmp	r7, fp
   2a46c:	beq	2a3b8 <flatcc_json_parser_union_type@@Base+0xa4>
   2a470:	ldr	r3, [r9, r4]
   2a474:	cmp	r3, #0
   2a478:	beq	2a518 <flatcc_json_parser_union_type@@Base+0x204>
   2a47c:	ldr	r3, [r8, #4]
   2a480:	cmp	r3, #0
   2a484:	beq	2a530 <flatcc_json_parser_union_type@@Base+0x21c>
   2a488:	sub	r3, r3, #1
   2a48c:	str	r3, [r8, #4]
   2a490:	ldr	r8, [r5, #16]
   2a494:	ldr	r7, [r5, #4]
   2a498:	ldr	r3, [sl, #8]
   2a49c:	str	r3, [r5, #16]
   2a4a0:	ldr	r3, [sl, #4]
   2a4a4:	str	r3, [r5, #4]
   2a4a8:	ldrb	r3, [sl, #13]
   2a4ac:	strb	r3, [sp, #24]
   2a4b0:	ldr	r1, [r9, r4]
   2a4b4:	add	r2, sp, #28
   2a4b8:	str	r2, [sp]
   2a4bc:	mov	r2, r6
   2a4c0:	mov	r0, r5
   2a4c4:	ldr	r4, [sp, #84]	; 0x54
   2a4c8:	blx	r4
   2a4cc:	cmp	r6, r0
   2a4d0:	moveq	fp, r6
   2a4d4:	beq	2a3f4 <flatcc_json_parser_union_type@@Base+0xe0>
   2a4d8:	add	r3, sp, #32
   2a4dc:	ldmdb	r3, {r2, r3}
   2a4e0:	ldrh	r1, [sp, #72]	; 0x48
   2a4e4:	ldr	r0, [r5]
   2a4e8:	bl	2599c <flatcc_builder_table_add_union@@Base>
   2a4ec:	cmp	r0, #0
   2a4f0:	streq	r8, [r5, #16]
   2a4f4:	streq	r7, [r5, #4]
   2a4f8:	beq	2a3f4 <flatcc_json_parser_union_type@@Base+0xe0>
   2a4fc:	mov	r3, #28
   2a500:	mov	r2, r6
   2a504:	mov	r1, fp
   2a508:	mov	r0, r5
   2a50c:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a510:	mov	fp, r0
   2a514:	b	2a3f4 <flatcc_json_parser_union_type@@Base+0xe0>
   2a518:	ldrb	r2, [sl, #13]
   2a51c:	ldr	r3, [r8, #4]
   2a520:	cmp	r2, #0
   2a524:	addne	r3, r3, #1
   2a528:	str	r3, [r8, #4]
   2a52c:	b	2a3f4 <flatcc_json_parser_union_type@@Base+0xe0>
   2a530:	ldr	r3, [pc, #28]	; 2a554 <flatcc_json_parser_union_type@@Base+0x240>
   2a534:	movw	r2, #965	; 0x3c5
   2a538:	movw	r1, #52928	; 0xcec0
   2a53c:	movt	r1, #2
   2a540:	movw	r0, #53004	; 0xcf0c
   2a544:	movt	r0, #2
   2a548:	bl	12684 <__assert_fail@plt>
   2a54c:	mov	fp, r6
   2a550:	b	2a3b8 <flatcc_json_parser_union_type@@Base+0xa4>
   2a554:	andeq	ip, r2, r8, ror #20

0002a558 <flatcc_json_parser_union_vector@@Base>:
   2a558:	strd	r4, [sp, #-20]!	; 0xffffffec
   2a55c:	strd	r6, [sp, #8]
   2a560:	str	lr, [sp, #16]
   2a564:	sub	sp, sp, #20
   2a568:	mov	r5, r0
   2a56c:	mov	r6, r1
   2a570:	mov	r7, r2
   2a574:	mov	r4, r3
   2a578:	ldr	r1, [sp, #44]	; 0x2c
   2a57c:	ldr	r0, [r0]
   2a580:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a584:	add	r2, r0, #8
   2a588:	add	r4, r4, r4, lsl #1
   2a58c:	lsl	r3, r4, #3
   2a590:	add	r1, r2, r3
   2a594:	ldr	ip, [r2, r3]
   2a598:	cmp	ip, #0
   2a59c:	bne	2a5e0 <flatcc_json_parser_union_vector@@Base+0x88>
   2a5a0:	ldrb	ip, [r1, #12]
   2a5a4:	cmp	ip, #0
   2a5a8:	bne	2a608 <flatcc_json_parser_union_vector@@Base+0xb0>
   2a5ac:	ldr	ip, [r0, #4]
   2a5b0:	add	ip, ip, #1
   2a5b4:	str	ip, [r0, #4]
   2a5b8:	ldr	r0, [r5, #16]
   2a5bc:	str	r0, [r1, #8]
   2a5c0:	ldr	r0, [r5, #4]
   2a5c4:	str	r0, [r1, #4]
   2a5c8:	str	r6, [r2, r3]
   2a5cc:	mov	r2, r7
   2a5d0:	mov	r1, r6
   2a5d4:	mov	r0, r5
   2a5d8:	bl	28c34 <flatcc_json_parser_generic_json@@Base>
   2a5dc:	b	2a5f4 <flatcc_json_parser_union_vector@@Base+0x9c>
   2a5e0:	mov	r3, #28
   2a5e4:	mov	r2, r7
   2a5e8:	mov	r1, r6
   2a5ec:	mov	r0, r5
   2a5f0:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a5f4:	add	sp, sp, #20
   2a5f8:	ldrd	r4, [sp]
   2a5fc:	ldrd	r6, [sp, #8]
   2a600:	add	sp, sp, #16
   2a604:	pop	{pc}		; (ldr pc, [sp], #4)
   2a608:	ldr	r3, [r0, #4]
   2a60c:	sub	r3, r3, #1
   2a610:	str	r3, [r0, #4]
   2a614:	ldr	r3, [r1, #20]
   2a618:	ldr	r2, [sp, #48]	; 0x30
   2a61c:	str	r2, [sp, #8]
   2a620:	ldrh	r2, [sp, #40]	; 0x28
   2a624:	str	r2, [sp, #4]
   2a628:	ldr	r2, [r1, #16]
   2a62c:	str	r2, [sp]
   2a630:	mov	r2, r7
   2a634:	mov	r1, r6
   2a638:	mov	r0, r5
   2a63c:	bl	27d9c <flatcc_json_parser_space_ext@@Base+0x38c>
   2a640:	b	2a5f4 <flatcc_json_parser_union_vector@@Base+0x9c>

0002a644 <flatcc_json_parser_union_type_vector@@Base>:
   2a644:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a648:	strd	r6, [sp, #8]
   2a64c:	strd	r8, [sp, #16]
   2a650:	strd	sl, [sp, #24]
   2a654:	str	lr, [sp, #32]
   2a658:	sub	sp, sp, #52	; 0x34
   2a65c:	mov	r7, r0
   2a660:	mov	r6, r1
   2a664:	mov	r5, r2
   2a668:	mov	r4, r3
   2a66c:	ldrh	r3, [sp, #88]	; 0x58
   2a670:	str	r3, [sp, #16]
   2a674:	ldr	sl, [sp, #104]	; 0x68
   2a678:	ldr	r1, [sp, #92]	; 0x5c
   2a67c:	ldr	r0, [r0]
   2a680:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a684:	add	r4, r4, r4, lsl #1
   2a688:	lsl	r3, r4, #3
   2a68c:	str	r3, [sp, #20]
   2a690:	add	r0, r0, #8
   2a694:	add	fp, r0, r3
   2a698:	ldrb	r3, [fp, #12]
   2a69c:	cmp	r3, #0
   2a6a0:	bne	2a6f4 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   2a6a4:	mov	r1, #1
   2a6a8:	strb	r1, [fp, #12]
   2a6ac:	mvn	r3, #0
   2a6b0:	mov	r2, r1
   2a6b4:	ldr	r0, [r7]
   2a6b8:	bl	237a0 <flatcc_builder_start_vector@@Base>
   2a6bc:	cmp	r0, #0
   2a6c0:	beq	2a70c <flatcc_json_parser_union_type_vector@@Base+0xc8>
   2a6c4:	mov	r3, #33	; 0x21
   2a6c8:	mov	r2, r5
   2a6cc:	mov	r1, r6
   2a6d0:	mov	r0, r7
   2a6d4:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a6d8:	add	sp, sp, #52	; 0x34
   2a6dc:	ldrd	r4, [sp]
   2a6e0:	ldrd	r6, [sp, #8]
   2a6e4:	ldrd	r8, [sp, #16]
   2a6e8:	ldrd	sl, [sp, #24]
   2a6ec:	add	sp, sp, #32
   2a6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a6f4:	mov	r3, #28
   2a6f8:	mov	r2, r5
   2a6fc:	mov	r1, r6
   2a700:	mov	r0, r7
   2a704:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a708:	b	2a6d8 <flatcc_json_parser_union_type_vector@@Base+0x94>
   2a70c:	cmp	r6, r5
   2a710:	beq	2a720 <flatcc_json_parser_union_type_vector@@Base+0xdc>
   2a714:	ldrb	r3, [r6]
   2a718:	cmp	r3, #91	; 0x5b
   2a71c:	beq	2a848 <flatcc_json_parser_union_type_vector@@Base+0x204>
   2a720:	mov	r3, #22
   2a724:	mov	r2, r5
   2a728:	mov	r1, r6
   2a72c:	mov	r0, r7
   2a730:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a734:	mov	r6, r0
   2a738:	ldr	r0, [r7]
   2a73c:	bl	249a0 <flatcc_builder_vector_count@@Base>
   2a740:	mov	r4, r0
   2a744:	str	r0, [fp, #16]
   2a748:	mov	r1, r0
   2a74c:	ldr	r0, [r7]
   2a750:	bl	2242c <flatcc_builder_enter_user_frame@@Base>
   2a754:	mov	r8, r0
   2a758:	mov	r1, r0
   2a75c:	ldr	r0, [r7]
   2a760:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a764:	mov	r9, r0
   2a768:	ldr	r0, [r7]
   2a76c:	bl	249ac <flatcc_builder_vector_edit@@Base>
   2a770:	mov	r2, r4
   2a774:	mov	r1, r0
   2a778:	mov	r0, r9
   2a77c:	bl	12588 <memcpy@plt>
   2a780:	ldr	r0, [r7]
   2a784:	bl	248a4 <flatcc_builder_end_vector@@Base>
   2a788:	subs	r9, r0, #0
   2a78c:	beq	2a6c4 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2a790:	ldr	r3, [sp, #16]
   2a794:	sub	r1, r3, #1
   2a798:	ldr	r0, [r7]
   2a79c:	bl	2584c <flatcc_builder_table_add_offset@@Base>
   2a7a0:	cmp	r0, #0
   2a7a4:	beq	2a6c4 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2a7a8:	str	r9, [r0]
   2a7ac:	ldr	r1, [sp, #92]	; 0x5c
   2a7b0:	ldr	r0, [r7]
   2a7b4:	bl	22590 <flatcc_builder_get_user_frame_ptr@@Base>
   2a7b8:	add	r2, r0, #8
   2a7bc:	ldr	r3, [sp, #20]
   2a7c0:	add	r1, r2, r3
   2a7c4:	str	r8, [r1, #20]
   2a7c8:	ldr	r3, [r2, r3]
   2a7cc:	cmp	r3, #0
   2a7d0:	beq	2abb0 <flatcc_json_parser_union_type_vector@@Base+0x56c>
   2a7d4:	ldr	r3, [r0, #4]
   2a7d8:	cmp	r3, #0
   2a7dc:	beq	2abc4 <flatcc_json_parser_union_type_vector@@Base+0x580>
   2a7e0:	sub	r3, r3, #1
   2a7e4:	str	r3, [r0, #4]
   2a7e8:	ldr	sl, [r7, #16]
   2a7ec:	ldr	r9, [r7, #4]
   2a7f0:	ldr	r3, [r1, #8]
   2a7f4:	str	r3, [r7, #16]
   2a7f8:	ldr	r3, [r1, #4]
   2a7fc:	str	r3, [r7, #4]
   2a800:	ldr	r3, [sp, #20]
   2a804:	ldr	r1, [r2, r3]
   2a808:	ldr	r3, [sp, #100]	; 0x64
   2a80c:	str	r3, [sp, #8]
   2a810:	ldr	r3, [sp, #16]
   2a814:	str	r3, [sp, #4]
   2a818:	str	r4, [sp]
   2a81c:	mov	r3, r8
   2a820:	mov	r2, r5
   2a824:	mov	r0, r7
   2a828:	bl	27d9c <flatcc_json_parser_space_ext@@Base+0x38c>
   2a82c:	cmp	r5, r0
   2a830:	moveq	r0, r5
   2a834:	beq	2a6d8 <flatcc_json_parser_union_type_vector@@Base+0x94>
   2a838:	str	sl, [r7, #16]
   2a83c:	str	r9, [r7, #4]
   2a840:	mov	r0, r6
   2a844:	b	2a6d8 <flatcc_json_parser_union_type_vector@@Base+0x94>
   2a848:	add	r1, r6, #1
   2a84c:	sub	r3, r5, r1
   2a850:	cmp	r3, #1
   2a854:	ble	2a86c <flatcc_json_parser_union_type_vector@@Base+0x228>
   2a858:	ldrb	r3, [r6, #1]
   2a85c:	cmp	r3, #32
   2a860:	movhi	r6, r1
   2a864:	bhi	2a87c <flatcc_json_parser_union_type_vector@@Base+0x238>
   2a868:	beq	2a898 <flatcc_json_parser_union_type_vector@@Base+0x254>
   2a86c:	mov	r2, r5
   2a870:	mov	r0, r7
   2a874:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2a878:	mov	r6, r0
   2a87c:	cmp	r5, r6
   2a880:	beq	2a890 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   2a884:	ldrb	r3, [r6]
   2a888:	cmp	r3, #93	; 0x5d
   2a88c:	beq	2a8ac <flatcc_json_parser_union_type_vector@@Base+0x268>
   2a890:	mov	r8, #0
   2a894:	b	2aaa8 <flatcc_json_parser_union_type_vector@@Base+0x464>
   2a898:	ldrb	r3, [r6, #2]
   2a89c:	cmp	r3, #32
   2a8a0:	addhi	r6, r6, #2
   2a8a4:	bls	2a86c <flatcc_json_parser_union_type_vector@@Base+0x228>
   2a8a8:	b	2a87c <flatcc_json_parser_union_type_vector@@Base+0x238>
   2a8ac:	add	r1, r6, #1
   2a8b0:	sub	r3, r5, r1
   2a8b4:	cmp	r3, #1
   2a8b8:	ble	2a8d0 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   2a8bc:	ldrb	r3, [r6, #1]
   2a8c0:	cmp	r3, #32
   2a8c4:	movhi	r6, r1
   2a8c8:	bhi	2a738 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2a8cc:	beq	2a8e4 <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   2a8d0:	mov	r2, r5
   2a8d4:	mov	r0, r7
   2a8d8:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2a8dc:	mov	r6, r0
   2a8e0:	b	2a738 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2a8e4:	ldrb	r3, [r6, #2]
   2a8e8:	cmp	r3, #32
   2a8ec:	addhi	r6, r6, #2
   2a8f0:	bls	2a8d0 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   2a8f4:	b	2a738 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2a8f8:	ldr	r3, [sp, #28]
   2a8fc:	cmp	r3, #0
   2a900:	bne	2a934 <flatcc_json_parser_union_type_vector@@Base+0x2f0>
   2a904:	ldrd	r2, [sp, #32]
   2a908:	cmp	r3, #0
   2a90c:	cmpeq	r2, #255	; 0xff
   2a910:	strbls	r2, [sp, #47]	; 0x2f
   2a914:	bls	2a954 <flatcc_json_parser_union_type_vector@@Base+0x310>
   2a918:	mov	r3, #7
   2a91c:	mov	r2, r5
   2a920:	mov	r1, r0
   2a924:	mov	r0, r7
   2a928:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a92c:	mov	r4, r0
   2a930:	b	2a94c <flatcc_json_parser_union_type_vector@@Base+0x308>
   2a934:	mov	r3, #8
   2a938:	mov	r2, r5
   2a93c:	mov	r1, r0
   2a940:	mov	r0, r7
   2a944:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a948:	mov	r4, r0
   2a94c:	cmp	r4, r6
   2a950:	beq	2ab00 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   2a954:	ldrb	r0, [sp, #47]	; 0x2f
   2a958:	blx	sl
   2a95c:	cmp	r0, #0
   2a960:	bne	2a974 <flatcc_json_parser_union_type_vector@@Base+0x330>
   2a964:	ldr	r3, [r7, #8]
   2a968:	tst	r3, #1
   2a96c:	beq	2a9e8 <flatcc_json_parser_union_type_vector@@Base+0x3a4>
   2a970:	strb	r8, [sp, #47]	; 0x2f
   2a974:	ldrb	r3, [sp, #47]	; 0x2f
   2a978:	strb	r3, [r9]
   2a97c:	sub	r3, r5, r4
   2a980:	cmp	r3, #1
   2a984:	ble	2a998 <flatcc_json_parser_union_type_vector@@Base+0x354>
   2a988:	ldrb	r3, [r4]
   2a98c:	cmp	r3, #32
   2a990:	bhi	2a9ac <flatcc_json_parser_union_type_vector@@Base+0x368>
   2a994:	beq	2aa00 <flatcc_json_parser_union_type_vector@@Base+0x3bc>
   2a998:	mov	r2, r5
   2a99c:	mov	r1, r4
   2a9a0:	mov	r0, r7
   2a9a4:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2a9a8:	mov	r4, r0
   2a9ac:	cmp	r5, r4
   2a9b0:	beq	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2a9b4:	ldrb	r3, [r4]
   2a9b8:	cmp	r3, #44	; 0x2c
   2a9bc:	beq	2aa60 <flatcc_json_parser_union_type_vector@@Base+0x41c>
   2a9c0:	cmp	r3, #93	; 0x5d
   2a9c4:	beq	2aa14 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   2a9c8:	mov	r3, #9
   2a9cc:	mov	r2, r5
   2a9d0:	mov	r1, r4
   2a9d4:	mov	r0, r7
   2a9d8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a9dc:	mov	r4, r0
   2a9e0:	mov	r6, r4
   2a9e4:	b	2a738 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2a9e8:	mov	r3, #15
   2a9ec:	mov	r2, r5
   2a9f0:	mov	r1, r4
   2a9f4:	mov	r0, r7
   2a9f8:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2a9fc:	b	2a6d8 <flatcc_json_parser_union_type_vector@@Base+0x94>
   2aa00:	ldrb	r3, [r4, #1]
   2aa04:	cmp	r3, #32
   2aa08:	addhi	r4, r4, #1
   2aa0c:	bls	2a998 <flatcc_json_parser_union_type_vector@@Base+0x354>
   2aa10:	b	2a9ac <flatcc_json_parser_union_type_vector@@Base+0x368>
   2aa14:	add	r1, r4, #1
   2aa18:	sub	r3, r5, r1
   2aa1c:	cmp	r3, #1
   2aa20:	ble	2aa38 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   2aa24:	ldrb	r3, [r4, #1]
   2aa28:	cmp	r3, #32
   2aa2c:	movhi	r4, r1
   2aa30:	bhi	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2aa34:	beq	2aa4c <flatcc_json_parser_union_type_vector@@Base+0x408>
   2aa38:	mov	r2, r5
   2aa3c:	mov	r0, r7
   2aa40:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2aa44:	mov	r4, r0
   2aa48:	b	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2aa4c:	ldrb	r3, [r4, #2]
   2aa50:	cmp	r3, #32
   2aa54:	addhi	r4, r4, #2
   2aa58:	bls	2aa38 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   2aa5c:	b	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2aa60:	add	r6, r4, #1
   2aa64:	sub	r3, r5, r6
   2aa68:	cmp	r3, #1
   2aa6c:	ble	2aa80 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2aa70:	ldrb	r3, [r4, #1]
   2aa74:	cmp	r3, #32
   2aa78:	bhi	2aa94 <flatcc_json_parser_union_type_vector@@Base+0x450>
   2aa7c:	beq	2ab34 <flatcc_json_parser_union_type_vector@@Base+0x4f0>
   2aa80:	mov	r2, r5
   2aa84:	mov	r1, r6
   2aa88:	mov	r0, r7
   2aa8c:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2aa90:	mov	r6, r0
   2aa94:	cmp	r5, r6
   2aa98:	beq	2ab48 <flatcc_json_parser_union_type_vector@@Base+0x504>
   2aa9c:	ldrb	r3, [r6]
   2aaa0:	cmp	r3, #93	; 0x5d
   2aaa4:	beq	2ab64 <flatcc_json_parser_union_type_vector@@Base+0x520>
   2aaa8:	mov	r1, #1
   2aaac:	ldr	r0, [r7]
   2aab0:	bl	22e94 <flatcc_builder_extend_vector@@Base>
   2aab4:	subs	r9, r0, #0
   2aab8:	beq	2a6c4 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2aabc:	mov	r2, #0
   2aac0:	mov	r3, #0
   2aac4:	strd	r2, [sp, #32]
   2aac8:	str	r8, [sp, #28]
   2aacc:	strb	r8, [sp, #47]	; 0x2f
   2aad0:	cmp	r5, r6
   2aad4:	beq	2ab00 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   2aad8:	add	r3, sp, #32
   2aadc:	str	r3, [sp]
   2aae0:	add	r3, sp, #28
   2aae4:	mov	r2, r5
   2aae8:	mov	r1, r6
   2aaec:	mov	r0, r7
   2aaf0:	bl	29968 <flatcc_json_parser_integer@@Base>
   2aaf4:	mov	r4, r0
   2aaf8:	cmp	r0, r6
   2aafc:	bne	2a8f8 <flatcc_json_parser_union_type_vector@@Base+0x2b4>
   2ab00:	add	r3, sp, #47	; 0x2f
   2ab04:	str	r3, [sp]
   2ab08:	ldr	r3, [sp, #96]	; 0x60
   2ab0c:	mov	r2, r5
   2ab10:	mov	r1, r6
   2ab14:	mov	r0, r7
   2ab18:	bl	27b5c <flatcc_json_parser_space_ext@@Base+0x14c>
   2ab1c:	mov	r4, r0
   2ab20:	cmp	r5, r0
   2ab24:	cmpne	r0, r6
   2ab28:	bne	2a954 <flatcc_json_parser_union_type_vector@@Base+0x310>
   2ab2c:	mov	r6, r0
   2ab30:	b	2a6c4 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2ab34:	ldrb	r3, [r4, #2]
   2ab38:	cmp	r3, #32
   2ab3c:	addhi	r6, r4, #2
   2ab40:	bls	2aa80 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2ab44:	b	2aa94 <flatcc_json_parser_union_type_vector@@Base+0x450>
   2ab48:	mov	r3, #9
   2ab4c:	mov	r2, r5
   2ab50:	mov	r1, r6
   2ab54:	mov	r0, r7
   2ab58:	bl	27930 <flatcc_json_parser_set_error@@Base>
   2ab5c:	mov	r4, r0
   2ab60:	b	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2ab64:	add	r4, r6, #1
   2ab68:	sub	r3, r5, r4
   2ab6c:	cmp	r3, #1
   2ab70:	ble	2ab84 <flatcc_json_parser_union_type_vector@@Base+0x540>
   2ab74:	ldrb	r3, [r6, #1]
   2ab78:	cmp	r3, #32
   2ab7c:	bhi	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2ab80:	beq	2ab9c <flatcc_json_parser_union_type_vector@@Base+0x558>
   2ab84:	mov	r2, r5
   2ab88:	mov	r1, r4
   2ab8c:	mov	r0, r7
   2ab90:	bl	27a10 <flatcc_json_parser_space_ext@@Base>
   2ab94:	mov	r4, r0
   2ab98:	b	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2ab9c:	ldrb	r3, [r6, #2]
   2aba0:	cmp	r3, #32
   2aba4:	addhi	r4, r6, #2
   2aba8:	bls	2ab84 <flatcc_json_parser_union_type_vector@@Base+0x540>
   2abac:	b	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2abb0:	ldr	r3, [r0, #4]
   2abb4:	add	r3, r3, #1
   2abb8:	str	r3, [r0, #4]
   2abbc:	mov	r0, r6
   2abc0:	b	2a6d8 <flatcc_json_parser_union_type_vector@@Base+0x94>
   2abc4:	ldr	r3, [pc, #20]	; 2abe0 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   2abc8:	movw	r2, #1122	; 0x462
   2abcc:	movw	r1, #52928	; 0xcec0
   2abd0:	movt	r1, #2
   2abd4:	movw	r0, #53004	; 0xcf0c
   2abd8:	movt	r0, #2
   2abdc:	bl	12684 <__assert_fail@plt>
   2abe0:	andeq	ip, r2, r8, lsl #21

0002abe4 <flatcc_json_parser_table_as_root@@Base>:
   2abe4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2abe8:	strd	r6, [sp, #8]
   2abec:	strd	r8, [sp, #16]
   2abf0:	str	lr, [sp, #24]
   2abf4:	sub	sp, sp, #52	; 0x34
   2abf8:	mov	r8, r0
   2abfc:	mov	r5, r2
   2ac00:	ldr	r9, [sp, #80]	; 0x50
   2ac04:	asr	r7, r9, #1
   2ac08:	and	r7, r7, #2
   2ac0c:	subs	r4, r1, #0
   2ac10:	addeq	r4, sp, #4
   2ac14:	add	r6, r2, r3
   2ac18:	mov	r2, #32
   2ac1c:	mov	r1, #0
   2ac20:	add	r0, r4, #12
   2ac24:	bl	12630 <memset@plt>
   2ac28:	str	r8, [r4]
   2ac2c:	str	r5, [r4, #4]
   2ac30:	mov	r3, #1
   2ac34:	str	r3, [r4, #16]
   2ac38:	str	r9, [r4, #8]
   2ac3c:	str	r5, [r4, #28]
   2ac40:	str	r6, [r4, #32]
   2ac44:	str	r5, [r4, #36]	; 0x24
   2ac48:	mov	r3, r7
   2ac4c:	mov	r2, #0
   2ac50:	ldr	r1, [sp, #84]	; 0x54
   2ac54:	mov	r0, r8
   2ac58:	bl	22ad8 <flatcc_builder_start_buffer@@Base>
   2ac5c:	cmp	r0, #0
   2ac60:	bne	2acc0 <flatcc_json_parser_table_as_root@@Base+0xdc>
   2ac64:	mov	r3, sp
   2ac68:	mov	r2, r6
   2ac6c:	mov	r1, r5
   2ac70:	mov	r0, r4
   2ac74:	ldr	r6, [sp, #88]	; 0x58
   2ac78:	blx	r6
   2ac7c:	ldr	r6, [r4, #24]
   2ac80:	cmp	r6, #0
   2ac84:	beq	2aca4 <flatcc_json_parser_table_as_root@@Base+0xc0>
   2ac88:	mov	r0, r6
   2ac8c:	add	sp, sp, #52	; 0x34
   2ac90:	ldrd	r4, [sp]
   2ac94:	ldrd	r6, [sp, #8]
   2ac98:	ldrd	r8, [sp, #16]
   2ac9c:	add	sp, sp, #24
   2aca0:	pop	{pc}		; (ldr pc, [sp], #4)
   2aca4:	ldr	r1, [sp]
   2aca8:	mov	r0, r8
   2acac:	bl	22bac <flatcc_builder_end_buffer@@Base>
   2acb0:	cmp	r0, #0
   2acb4:	beq	2acc8 <flatcc_json_parser_table_as_root@@Base+0xe4>
   2acb8:	str	r5, [r4, #40]	; 0x28
   2acbc:	b	2ac88 <flatcc_json_parser_table_as_root@@Base+0xa4>
   2acc0:	mvn	r6, #0
   2acc4:	b	2ac88 <flatcc_json_parser_table_as_root@@Base+0xa4>
   2acc8:	mvn	r6, #0
   2accc:	b	2ac88 <flatcc_json_parser_table_as_root@@Base+0xa4>

0002acd0 <flatcc_json_parser_struct_as_root@@Base>:
   2acd0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2acd4:	strd	r6, [sp, #8]
   2acd8:	strd	r8, [sp, #16]
   2acdc:	str	lr, [sp, #24]
   2ace0:	sub	sp, sp, #52	; 0x34
   2ace4:	mov	r8, r0
   2ace8:	mov	r5, r2
   2acec:	ldr	r9, [sp, #80]	; 0x50
   2acf0:	asr	r7, r9, #1
   2acf4:	and	r7, r7, #2
   2acf8:	subs	r4, r1, #0
   2acfc:	addeq	r4, sp, #4
   2ad00:	add	r6, r2, r3
   2ad04:	mov	r2, #32
   2ad08:	mov	r1, #0
   2ad0c:	add	r0, r4, #12
   2ad10:	bl	12630 <memset@plt>
   2ad14:	str	r8, [r4]
   2ad18:	str	r5, [r4, #4]
   2ad1c:	mov	r3, #1
   2ad20:	str	r3, [r4, #16]
   2ad24:	str	r9, [r4, #8]
   2ad28:	str	r5, [r4, #28]
   2ad2c:	str	r6, [r4, #32]
   2ad30:	str	r5, [r4, #36]	; 0x24
   2ad34:	mov	r3, r7
   2ad38:	mov	r2, #0
   2ad3c:	ldr	r1, [sp, #84]	; 0x54
   2ad40:	mov	r0, r8
   2ad44:	bl	22ad8 <flatcc_builder_start_buffer@@Base>
   2ad48:	cmp	r0, #0
   2ad4c:	bne	2adac <flatcc_json_parser_struct_as_root@@Base+0xdc>
   2ad50:	mov	r3, sp
   2ad54:	mov	r2, r6
   2ad58:	mov	r1, r5
   2ad5c:	mov	r0, r4
   2ad60:	ldr	r6, [sp, #88]	; 0x58
   2ad64:	blx	r6
   2ad68:	ldr	r6, [r4, #24]
   2ad6c:	cmp	r6, #0
   2ad70:	beq	2ad90 <flatcc_json_parser_struct_as_root@@Base+0xc0>
   2ad74:	mov	r0, r6
   2ad78:	add	sp, sp, #52	; 0x34
   2ad7c:	ldrd	r4, [sp]
   2ad80:	ldrd	r6, [sp, #8]
   2ad84:	ldrd	r8, [sp, #16]
   2ad88:	add	sp, sp, #24
   2ad8c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ad90:	ldr	r1, [sp]
   2ad94:	mov	r0, r8
   2ad98:	bl	22bac <flatcc_builder_end_buffer@@Base>
   2ad9c:	cmp	r0, #0
   2ada0:	beq	2adb4 <flatcc_json_parser_struct_as_root@@Base+0xe4>
   2ada4:	str	r5, [r4, #40]	; 0x28
   2ada8:	b	2ad74 <flatcc_json_parser_struct_as_root@@Base+0xa4>
   2adac:	mvn	r6, #0
   2adb0:	b	2ad74 <flatcc_json_parser_struct_as_root@@Base+0xa4>
   2adb4:	mvn	r6, #0
   2adb8:	b	2ad74 <flatcc_json_parser_struct_as_root@@Base+0xa4>
   2adbc:	eor	r1, r1, #-2147483648	; 0x80000000
   2adc0:	b	2adc8 <flatcc_json_parser_struct_as_root@@Base+0xf8>
   2adc4:	eor	r3, r3, #-2147483648	; 0x80000000
   2adc8:	push	{r4, r5, lr}
   2adcc:	lsl	r4, r1, #1
   2add0:	lsl	r5, r3, #1
   2add4:	teq	r4, r5
   2add8:	teqeq	r0, r2
   2addc:	orrsne	ip, r4, r0
   2ade0:	orrsne	ip, r5, r2
   2ade4:	mvnsne	ip, r4, asr #21
   2ade8:	mvnsne	ip, r5, asr #21
   2adec:	beq	2afd8 <flatcc_json_parser_struct_as_root@@Base+0x308>
   2adf0:	lsr	r4, r4, #21
   2adf4:	rsbs	r5, r4, r5, lsr #21
   2adf8:	rsblt	r5, r5, #0
   2adfc:	ble	2ae1c <flatcc_json_parser_struct_as_root@@Base+0x14c>
   2ae00:	add	r4, r4, r5
   2ae04:	eor	r2, r0, r2
   2ae08:	eor	r3, r1, r3
   2ae0c:	eor	r0, r2, r0
   2ae10:	eor	r1, r3, r1
   2ae14:	eor	r2, r0, r2
   2ae18:	eor	r3, r1, r3
   2ae1c:	cmp	r5, #54	; 0x36
   2ae20:	pophi	{r4, r5, pc}
   2ae24:	tst	r1, #-2147483648	; 0x80000000
   2ae28:	lsl	r1, r1, #12
   2ae2c:	mov	ip, #1048576	; 0x100000
   2ae30:	orr	r1, ip, r1, lsr #12
   2ae34:	beq	2ae40 <flatcc_json_parser_struct_as_root@@Base+0x170>
   2ae38:	rsbs	r0, r0, #0
   2ae3c:	rsc	r1, r1, #0
   2ae40:	tst	r3, #-2147483648	; 0x80000000
   2ae44:	lsl	r3, r3, #12
   2ae48:	orr	r3, ip, r3, lsr #12
   2ae4c:	beq	2ae58 <flatcc_json_parser_struct_as_root@@Base+0x188>
   2ae50:	rsbs	r2, r2, #0
   2ae54:	rsc	r3, r3, #0
   2ae58:	teq	r4, r5
   2ae5c:	beq	2afc0 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   2ae60:	sub	r4, r4, #1
   2ae64:	rsbs	lr, r5, #32
   2ae68:	blt	2ae84 <flatcc_json_parser_struct_as_root@@Base+0x1b4>
   2ae6c:	lsl	ip, r2, lr
   2ae70:	adds	r0, r0, r2, lsr r5
   2ae74:	adc	r1, r1, #0
   2ae78:	adds	r0, r0, r3, lsl lr
   2ae7c:	adcs	r1, r1, r3, asr r5
   2ae80:	b	2aea0 <flatcc_json_parser_struct_as_root@@Base+0x1d0>
   2ae84:	sub	r5, r5, #32
   2ae88:	add	lr, lr, #32
   2ae8c:	cmp	r2, #1
   2ae90:	lsl	ip, r3, lr
   2ae94:	orrcs	ip, ip, #2
   2ae98:	adds	r0, r0, r3, asr r5
   2ae9c:	adcs	r1, r1, r3, asr #31
   2aea0:	and	r5, r1, #-2147483648	; 0x80000000
   2aea4:	bpl	2aeb4 <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   2aea8:	rsbs	ip, ip, #0
   2aeac:	rscs	r0, r0, #0
   2aeb0:	rsc	r1, r1, #0
   2aeb4:	cmp	r1, #1048576	; 0x100000
   2aeb8:	bcc	2aef8 <flatcc_json_parser_struct_as_root@@Base+0x228>
   2aebc:	cmp	r1, #2097152	; 0x200000
   2aec0:	bcc	2aee0 <flatcc_json_parser_struct_as_root@@Base+0x210>
   2aec4:	lsrs	r1, r1, #1
   2aec8:	rrxs	r0, r0
   2aecc:	rrx	ip, ip
   2aed0:	add	r4, r4, #1
   2aed4:	lsl	r2, r4, #21
   2aed8:	cmn	r2, #4194304	; 0x400000
   2aedc:	bcs	2b038 <flatcc_json_parser_struct_as_root@@Base+0x368>
   2aee0:	cmp	ip, #-2147483648	; 0x80000000
   2aee4:	lsrseq	ip, r0, #1
   2aee8:	adcs	r0, r0, #0
   2aeec:	adc	r1, r1, r4, lsl #20
   2aef0:	orr	r1, r1, r5
   2aef4:	pop	{r4, r5, pc}
   2aef8:	lsls	ip, ip, #1
   2aefc:	adcs	r0, r0, r0
   2af00:	adc	r1, r1, r1
   2af04:	tst	r1, #1048576	; 0x100000
   2af08:	sub	r4, r4, #1
   2af0c:	bne	2aee0 <flatcc_json_parser_struct_as_root@@Base+0x210>
   2af10:	teq	r1, #0
   2af14:	moveq	r1, r0
   2af18:	moveq	r0, #0
   2af1c:	clz	r3, r1
   2af20:	addeq	r3, r3, #32
   2af24:	sub	r3, r3, #11
   2af28:	subs	r2, r3, #32
   2af2c:	bge	2af50 <flatcc_json_parser_struct_as_root@@Base+0x280>
   2af30:	adds	r2, r2, #12
   2af34:	ble	2af4c <flatcc_json_parser_struct_as_root@@Base+0x27c>
   2af38:	add	ip, r2, #20
   2af3c:	rsb	r2, r2, #12
   2af40:	lsl	r0, r1, ip
   2af44:	lsr	r1, r1, r2
   2af48:	b	2af60 <flatcc_json_parser_struct_as_root@@Base+0x290>
   2af4c:	add	r2, r2, #20
   2af50:	rsble	ip, r2, #32
   2af54:	lsl	r1, r1, r2
   2af58:	orrle	r1, r1, r0, lsr ip
   2af5c:	lslle	r0, r0, r2
   2af60:	subs	r4, r4, r3
   2af64:	addge	r1, r1, r4, lsl #20
   2af68:	orrge	r1, r1, r5
   2af6c:	popge	{r4, r5, pc}
   2af70:	mvn	r4, r4
   2af74:	subs	r4, r4, #31
   2af78:	bge	2afb4 <flatcc_json_parser_struct_as_root@@Base+0x2e4>
   2af7c:	adds	r4, r4, #12
   2af80:	bgt	2af9c <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   2af84:	add	r4, r4, #20
   2af88:	rsb	r2, r4, #32
   2af8c:	lsr	r0, r0, r4
   2af90:	orr	r0, r0, r1, lsl r2
   2af94:	orr	r1, r5, r1, lsr r4
   2af98:	pop	{r4, r5, pc}
   2af9c:	rsb	r4, r4, #12
   2afa0:	rsb	r2, r4, #32
   2afa4:	lsr	r0, r0, r2
   2afa8:	orr	r0, r0, r1, lsl r4
   2afac:	mov	r1, r5
   2afb0:	pop	{r4, r5, pc}
   2afb4:	lsr	r0, r1, r4
   2afb8:	mov	r1, r5
   2afbc:	pop	{r4, r5, pc}
   2afc0:	teq	r4, #0
   2afc4:	eor	r3, r3, #1048576	; 0x100000
   2afc8:	eoreq	r1, r1, #1048576	; 0x100000
   2afcc:	addeq	r4, r4, #1
   2afd0:	subne	r5, r5, #1
   2afd4:	b	2ae60 <flatcc_json_parser_struct_as_root@@Base+0x190>
   2afd8:	mvns	ip, r4, asr #21
   2afdc:	mvnsne	ip, r5, asr #21
   2afe0:	beq	2b048 <flatcc_json_parser_struct_as_root@@Base+0x378>
   2afe4:	teq	r4, r5
   2afe8:	teqeq	r0, r2
   2afec:	beq	2b000 <flatcc_json_parser_struct_as_root@@Base+0x330>
   2aff0:	orrs	ip, r4, r0
   2aff4:	moveq	r1, r3
   2aff8:	moveq	r0, r2
   2affc:	pop	{r4, r5, pc}
   2b000:	teq	r1, r3
   2b004:	movne	r1, #0
   2b008:	movne	r0, #0
   2b00c:	popne	{r4, r5, pc}
   2b010:	lsrs	ip, r4, #21
   2b014:	bne	2b028 <flatcc_json_parser_struct_as_root@@Base+0x358>
   2b018:	lsls	r0, r0, #1
   2b01c:	adcs	r1, r1, r1
   2b020:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2b024:	pop	{r4, r5, pc}
   2b028:	adds	r4, r4, #4194304	; 0x400000
   2b02c:	addcc	r1, r1, #1048576	; 0x100000
   2b030:	popcc	{r4, r5, pc}
   2b034:	and	r5, r1, #-2147483648	; 0x80000000
   2b038:	orr	r1, r5, #2130706432	; 0x7f000000
   2b03c:	orr	r1, r1, #15728640	; 0xf00000
   2b040:	mov	r0, #0
   2b044:	pop	{r4, r5, pc}
   2b048:	mvns	ip, r4, asr #21
   2b04c:	movne	r1, r3
   2b050:	movne	r0, r2
   2b054:	mvnseq	ip, r5, asr #21
   2b058:	movne	r3, r1
   2b05c:	movne	r2, r0
   2b060:	orrs	r4, r0, r1, lsl #12
   2b064:	orrseq	r5, r2, r3, lsl #12
   2b068:	teqeq	r1, r3
   2b06c:	orrne	r1, r1, #524288	; 0x80000
   2b070:	pop	{r4, r5, pc}
   2b074:	teq	r0, #0
   2b078:	moveq	r1, #0
   2b07c:	bxeq	lr
   2b080:	push	{r4, r5, lr}
   2b084:	mov	r4, #1024	; 0x400
   2b088:	add	r4, r4, #50	; 0x32
   2b08c:	mov	r5, #0
   2b090:	mov	r1, #0
   2b094:	b	2af10 <flatcc_json_parser_struct_as_root@@Base+0x240>
   2b098:	teq	r0, #0
   2b09c:	moveq	r1, #0
   2b0a0:	bxeq	lr
   2b0a4:	push	{r4, r5, lr}
   2b0a8:	mov	r4, #1024	; 0x400
   2b0ac:	add	r4, r4, #50	; 0x32
   2b0b0:	ands	r5, r0, #-2147483648	; 0x80000000
   2b0b4:	rsbmi	r0, r0, #0
   2b0b8:	mov	r1, #0
   2b0bc:	b	2af10 <flatcc_json_parser_struct_as_root@@Base+0x240>
   2b0c0:	lsls	r2, r0, #1
   2b0c4:	asr	r1, r2, #3
   2b0c8:	rrx	r1, r1
   2b0cc:	lsl	r0, r2, #28
   2b0d0:	andsne	r3, r2, #-16777216	; 0xff000000
   2b0d4:	teqne	r3, #-16777216	; 0xff000000
   2b0d8:	eorne	r1, r1, #939524096	; 0x38000000
   2b0dc:	bxne	lr
   2b0e0:	bics	r2, r2, #-16777216	; 0xff000000
   2b0e4:	bxeq	lr
   2b0e8:	teq	r3, #-16777216	; 0xff000000
   2b0ec:	orreq	r1, r1, #524288	; 0x80000
   2b0f0:	bxeq	lr
   2b0f4:	push	{r4, r5, lr}
   2b0f8:	mov	r4, #896	; 0x380
   2b0fc:	and	r5, r1, #-2147483648	; 0x80000000
   2b100:	bic	r1, r1, #-2147483648	; 0x80000000
   2b104:	b	2af10 <flatcc_json_parser_struct_as_root@@Base+0x240>
   2b108:	orrs	r2, r0, r1
   2b10c:	bxeq	lr
   2b110:	push	{r4, r5, lr}
   2b114:	mov	r5, #0
   2b118:	b	2b138 <flatcc_json_parser_struct_as_root@@Base+0x468>
   2b11c:	orrs	r2, r0, r1
   2b120:	bxeq	lr
   2b124:	push	{r4, r5, lr}
   2b128:	ands	r5, r1, #-2147483648	; 0x80000000
   2b12c:	bpl	2b138 <flatcc_json_parser_struct_as_root@@Base+0x468>
   2b130:	rsbs	r0, r0, #0
   2b134:	rsc	r1, r1, #0
   2b138:	mov	r4, #1024	; 0x400
   2b13c:	add	r4, r4, #50	; 0x32
   2b140:	lsrs	ip, r1, #22
   2b144:	beq	2aeb4 <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   2b148:	mov	r2, #3
   2b14c:	lsrs	ip, ip, #3
   2b150:	addne	r2, r2, #3
   2b154:	lsrs	ip, ip, #3
   2b158:	addne	r2, r2, #3
   2b15c:	add	r2, r2, ip, lsr #3
   2b160:	rsb	r3, r2, #32
   2b164:	lsl	ip, r0, r3
   2b168:	lsr	r0, r0, r2
   2b16c:	orr	r0, r0, r1, lsl r3
   2b170:	lsr	r1, r1, r2
   2b174:	add	r4, r4, r2
   2b178:	b	2aeb4 <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   2b17c:	eor	r0, r0, #-2147483648	; 0x80000000
   2b180:	b	2b188 <flatcc_json_parser_struct_as_root@@Base+0x4b8>
   2b184:	eor	r1, r1, #-2147483648	; 0x80000000
   2b188:	lsls	r2, r0, #1
   2b18c:	lslsne	r3, r1, #1
   2b190:	teqne	r2, r3
   2b194:	mvnsne	ip, r2, asr #24
   2b198:	mvnsne	ip, r3, asr #24
   2b19c:	beq	2b294 <flatcc_json_parser_struct_as_root@@Base+0x5c4>
   2b1a0:	lsr	r2, r2, #24
   2b1a4:	rsbs	r3, r2, r3, lsr #24
   2b1a8:	addgt	r2, r2, r3
   2b1ac:	eorgt	r1, r0, r1
   2b1b0:	eorgt	r0, r1, r0
   2b1b4:	eorgt	r1, r0, r1
   2b1b8:	rsblt	r3, r3, #0
   2b1bc:	cmp	r3, #25
   2b1c0:	bxhi	lr
   2b1c4:	tst	r0, #-2147483648	; 0x80000000
   2b1c8:	orr	r0, r0, #8388608	; 0x800000
   2b1cc:	bic	r0, r0, #-16777216	; 0xff000000
   2b1d0:	rsbne	r0, r0, #0
   2b1d4:	tst	r1, #-2147483648	; 0x80000000
   2b1d8:	orr	r1, r1, #8388608	; 0x800000
   2b1dc:	bic	r1, r1, #-16777216	; 0xff000000
   2b1e0:	rsbne	r1, r1, #0
   2b1e4:	teq	r2, r3
   2b1e8:	beq	2b27c <flatcc_json_parser_struct_as_root@@Base+0x5ac>
   2b1ec:	sub	r2, r2, #1
   2b1f0:	adds	r0, r0, r1, asr r3
   2b1f4:	rsb	r3, r3, #32
   2b1f8:	lsl	r1, r1, r3
   2b1fc:	and	r3, r0, #-2147483648	; 0x80000000
   2b200:	bpl	2b20c <flatcc_json_parser_struct_as_root@@Base+0x53c>
   2b204:	rsbs	r1, r1, #0
   2b208:	rsc	r0, r0, #0
   2b20c:	cmp	r0, #8388608	; 0x800000
   2b210:	bcc	2b244 <flatcc_json_parser_struct_as_root@@Base+0x574>
   2b214:	cmp	r0, #16777216	; 0x1000000
   2b218:	bcc	2b230 <flatcc_json_parser_struct_as_root@@Base+0x560>
   2b21c:	lsrs	r0, r0, #1
   2b220:	rrx	r1, r1
   2b224:	add	r2, r2, #1
   2b228:	cmp	r2, #254	; 0xfe
   2b22c:	bcs	2b2e8 <flatcc_json_parser_struct_as_root@@Base+0x618>
   2b230:	cmp	r1, #-2147483648	; 0x80000000
   2b234:	adc	r0, r0, r2, lsl #23
   2b238:	biceq	r0, r0, #1
   2b23c:	orr	r0, r0, r3
   2b240:	bx	lr
   2b244:	lsls	r1, r1, #1
   2b248:	adc	r0, r0, r0
   2b24c:	tst	r0, #8388608	; 0x800000
   2b250:	sub	r2, r2, #1
   2b254:	bne	2b230 <flatcc_json_parser_struct_as_root@@Base+0x560>
   2b258:	clz	ip, r0
   2b25c:	sub	ip, ip, #8
   2b260:	subs	r2, r2, ip
   2b264:	lsl	r0, r0, ip
   2b268:	addge	r0, r0, r2, lsl #23
   2b26c:	rsblt	r2, r2, #0
   2b270:	orrge	r0, r0, r3
   2b274:	orrlt	r0, r3, r0, lsr r2
   2b278:	bx	lr
   2b27c:	teq	r2, #0
   2b280:	eor	r1, r1, #8388608	; 0x800000
   2b284:	eoreq	r0, r0, #8388608	; 0x800000
   2b288:	addeq	r2, r2, #1
   2b28c:	subne	r3, r3, #1
   2b290:	b	2b1ec <flatcc_json_parser_struct_as_root@@Base+0x51c>
   2b294:	lsl	r3, r1, #1
   2b298:	mvns	ip, r2, asr #24
   2b29c:	mvnsne	ip, r3, asr #24
   2b2a0:	beq	2b2f4 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2b2a4:	teq	r2, r3
   2b2a8:	beq	2b2b8 <flatcc_json_parser_struct_as_root@@Base+0x5e8>
   2b2ac:	teq	r2, #0
   2b2b0:	moveq	r0, r1
   2b2b4:	bx	lr
   2b2b8:	teq	r0, r1
   2b2bc:	movne	r0, #0
   2b2c0:	bxne	lr
   2b2c4:	tst	r2, #-16777216	; 0xff000000
   2b2c8:	bne	2b2d8 <flatcc_json_parser_struct_as_root@@Base+0x608>
   2b2cc:	lsls	r0, r0, #1
   2b2d0:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2b2d4:	bx	lr
   2b2d8:	adds	r2, r2, #33554432	; 0x2000000
   2b2dc:	addcc	r0, r0, #8388608	; 0x800000
   2b2e0:	bxcc	lr
   2b2e4:	and	r3, r0, #-2147483648	; 0x80000000
   2b2e8:	orr	r0, r3, #2130706432	; 0x7f000000
   2b2ec:	orr	r0, r0, #8388608	; 0x800000
   2b2f0:	bx	lr
   2b2f4:	mvns	r2, r2, asr #24
   2b2f8:	movne	r0, r1
   2b2fc:	mvnseq	r3, r3, asr #24
   2b300:	movne	r1, r0
   2b304:	lsls	r2, r0, #9
   2b308:	lslseq	r3, r1, #9
   2b30c:	teqeq	r0, r1
   2b310:	orrne	r0, r0, #4194304	; 0x400000
   2b314:	bx	lr
   2b318:	mov	r3, #0
   2b31c:	b	2b328 <flatcc_json_parser_struct_as_root@@Base+0x658>
   2b320:	ands	r3, r0, #-2147483648	; 0x80000000
   2b324:	rsbmi	r0, r0, #0
   2b328:	movs	ip, r0
   2b32c:	bxeq	lr
   2b330:	orr	r3, r3, #1258291200	; 0x4b000000
   2b334:	mov	r1, r0
   2b338:	mov	r0, #0
   2b33c:	b	2b380 <flatcc_json_parser_struct_as_root@@Base+0x6b0>
   2b340:	orrs	r2, r0, r1
   2b344:	bxeq	lr
   2b348:	mov	r3, #0
   2b34c:	b	2b368 <flatcc_json_parser_struct_as_root@@Base+0x698>
   2b350:	orrs	r2, r0, r1
   2b354:	bxeq	lr
   2b358:	ands	r3, r1, #-2147483648	; 0x80000000
   2b35c:	bpl	2b368 <flatcc_json_parser_struct_as_root@@Base+0x698>
   2b360:	rsbs	r0, r0, #0
   2b364:	rsc	r1, r1, #0
   2b368:	movs	ip, r1
   2b36c:	moveq	ip, r0
   2b370:	moveq	r1, r0
   2b374:	moveq	r0, #0
   2b378:	orr	r3, r3, #1526726656	; 0x5b000000
   2b37c:	subeq	r3, r3, #268435456	; 0x10000000
   2b380:	sub	r3, r3, #8388608	; 0x800000
   2b384:	clz	r2, ip
   2b388:	subs	r2, r2, #8
   2b38c:	sub	r3, r3, r2, lsl #23
   2b390:	blt	2b3b0 <flatcc_json_parser_struct_as_root@@Base+0x6e0>
   2b394:	add	r3, r3, r1, lsl r2
   2b398:	lsl	ip, r0, r2
   2b39c:	rsb	r2, r2, #32
   2b3a0:	cmp	ip, #-2147483648	; 0x80000000
   2b3a4:	adc	r0, r3, r0, lsr r2
   2b3a8:	biceq	r0, r0, #1
   2b3ac:	bx	lr
   2b3b0:	add	r2, r2, #32
   2b3b4:	lsl	ip, r1, r2
   2b3b8:	rsb	r2, r2, #32
   2b3bc:	orrs	r0, r0, ip, lsl #1
   2b3c0:	adc	r0, r3, r1, lsr r2
   2b3c4:	biceq	r0, r0, ip, lsr #31
   2b3c8:	bx	lr

0002b3cc <__libc_csu_init@@Base>:
   2b3cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b3d0:	mov	r7, r0
   2b3d4:	ldr	r6, [pc, #72]	; 2b424 <__libc_csu_init@@Base+0x58>
   2b3d8:	ldr	r5, [pc, #72]	; 2b428 <__libc_csu_init@@Base+0x5c>
   2b3dc:	add	r6, pc, r6
   2b3e0:	add	r5, pc, r5
   2b3e4:	sub	r6, r6, r5
   2b3e8:	mov	r8, r1
   2b3ec:	mov	r9, r2
   2b3f0:	bl	12550 <fopen@plt-0x20>
   2b3f4:	asrs	r6, r6, #2
   2b3f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b3fc:	mov	r4, #0
   2b400:	add	r4, r4, #1
   2b404:	ldr	r3, [r5], #4
   2b408:	mov	r2, r9
   2b40c:	mov	r1, r8
   2b410:	mov	r0, r7
   2b414:	blx	r3
   2b418:	cmp	r6, r4
   2b41c:	bne	2b400 <__libc_csu_init@@Base+0x34>
   2b420:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b424:	andeq	r2, r1, r0, lsr fp
   2b428:	andeq	r2, r1, r8, lsr #22

0002b42c <__libc_csu_fini@@Base>:
   2b42c:	bx	lr

Disassembly of section .fini:

0002b430 <.fini>:
   2b430:	push	{r3, lr}
   2b434:	pop	{r3, pc}
