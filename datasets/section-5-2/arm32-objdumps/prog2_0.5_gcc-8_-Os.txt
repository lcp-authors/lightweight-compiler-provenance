
../repos/prog2/0.5:     file format elf32-littlearm


Disassembly of section .init:

000105e4 <.init>:
   105e4:	push	{r3, lr}
   105e8:	bl	10748 <_start@@Base+0x3c>
   105ec:	pop	{r3, pc}

Disassembly of section .plt:

000105f0 <strcmp@plt-0x14>:
   105f0:	push	{lr}		; (str lr, [sp, #-4]!)
   105f4:	ldr	lr, [pc, #4]	; 10600 <strcmp@plt-0x4>
   105f8:	add	lr, pc, lr
   105fc:	ldr	pc, [lr, #8]!
   10600:	andeq	r0, r1, r0, lsl #20

00010604 <strcmp@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2560]!	; 0xa00

00010610 <printf@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2552]!	; 0x9f8

0001061c <__libc_start_main@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2544]!	; 0x9f0

00010628 <__gmon_start__@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2536]!	; 0x9e8

00010634 <strlen@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2528]!	; 0x9e0

00010640 <memset@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2520]!	; 0x9d8

0001064c <__isoc99_scanf@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2512]!	; 0x9d0

00010658 <abort@plt>:
   10658:	add	ip, pc, #0, 12
   1065c:	add	ip, ip, #16, 20	; 0x10000
   10660:	ldr	pc, [ip, #2504]!	; 0x9c8

Disassembly of section .text:

00010664 <main@@Base>:
   10664:	push	{r4, r5, r6, lr}
   10668:	sub	sp, sp, #200	; 0xc8
   1066c:	mov	r2, #100	; 0x64
   10670:	mov	r1, #0
   10674:	mov	r0, sp
   10678:	ldr	r4, [pc, #120]	; 106f8 <main@@Base+0x94>
   1067c:	bl	10640 <memset@plt>
   10680:	ldr	r5, [pc, #116]	; 106fc <main@@Base+0x98>
   10684:	mov	r2, #100	; 0x64
   10688:	mov	r1, #0
   1068c:	add	r0, sp, r2
   10690:	ldr	r6, [pc, #104]	; 10700 <main@@Base+0x9c>
   10694:	bl	10640 <memset@plt>
   10698:	mov	r0, r4
   1069c:	bl	10610 <printf@plt>
   106a0:	mov	r1, sp
   106a4:	mov	r0, r5
   106a8:	bl	1064c <__isoc99_scanf@plt>
   106ac:	mov	r1, r6
   106b0:	mov	r0, sp
   106b4:	bl	10604 <strcmp@plt>
   106b8:	cmp	r0, #0
   106bc:	beq	106f0 <main@@Base+0x8c>
   106c0:	add	r1, sp, #100	; 0x64
   106c4:	mov	r0, sp
   106c8:	bl	107fc <inverte@@Base>
   106cc:	add	r1, sp, #100	; 0x64
   106d0:	mov	r0, sp
   106d4:	bl	10604 <strcmp@plt>
   106d8:	cmp	r0, #0
   106dc:	mov	r1, sp
   106e0:	ldreq	r0, [pc, #28]	; 10704 <main@@Base+0xa0>
   106e4:	ldrne	r0, [pc, #28]	; 10708 <main@@Base+0xa4>
   106e8:	bl	10610 <printf@plt>
   106ec:	b	10698 <main@@Base+0x34>
   106f0:	add	sp, sp, #200	; 0xc8
   106f4:	pop	{r4, r5, r6, pc}
   106f8:	andeq	r0, r1, r4, lsr #17
   106fc:	andeq	r0, r1, lr, lsr #17
   10700:			; <UNDEFINED> instruction: 0x000108b1
   10704:			; <UNDEFINED> instruction: 0x000108b3
   10708:	andeq	r0, r1, sp, asr #17

0001070c <_start@@Base>:
   1070c:	mov	fp, #0
   10710:	mov	lr, #0
   10714:	pop	{r1}		; (ldr r1, [sp], #4)
   10718:	mov	r2, sp
   1071c:	push	{r2}		; (str r2, [sp, #-4]!)
   10720:	push	{r0}		; (str r0, [sp, #-4]!)
   10724:	ldr	ip, [pc, #16]	; 1073c <_start@@Base+0x30>
   10728:	push	{ip}		; (str ip, [sp, #-4]!)
   1072c:	ldr	r0, [pc, #12]	; 10740 <_start@@Base+0x34>
   10730:	ldr	r3, [pc, #12]	; 10744 <_start@@Base+0x38>
   10734:	bl	1061c <__libc_start_main@plt>
   10738:	bl	10658 <abort@plt>
   1073c:	muleq	r1, r4, r8
   10740:	andeq	r0, r1, r4, ror #12
   10744:	andeq	r0, r1, r4, lsr r8
   10748:	ldr	r3, [pc, #20]	; 10764 <_start@@Base+0x58>
   1074c:	ldr	r2, [pc, #20]	; 10768 <_start@@Base+0x5c>
   10750:	add	r3, pc, r3
   10754:	ldr	r2, [r3, r2]
   10758:	cmp	r2, #0
   1075c:	bxeq	lr
   10760:	b	10628 <__gmon_start__@plt>
   10764:	andeq	r0, r1, r8, lsr #17
   10768:	andeq	r0, r0, ip, lsr #32
   1076c:	ldr	r0, [pc, #24]	; 1078c <_start@@Base+0x80>
   10770:	ldr	r3, [pc, #24]	; 10790 <_start@@Base+0x84>
   10774:	cmp	r3, r0
   10778:	bxeq	lr
   1077c:	ldr	r3, [pc, #16]	; 10794 <_start@@Base+0x88>
   10780:	cmp	r3, #0
   10784:	bxeq	lr
   10788:	bx	r3
   1078c:	andeq	r1, r2, r8, lsr r0
   10790:	andeq	r1, r2, r8, lsr r0
   10794:	andeq	r0, r0, r0
   10798:	ldr	r0, [pc, #36]	; 107c4 <_start@@Base+0xb8>
   1079c:	ldr	r1, [pc, #36]	; 107c8 <_start@@Base+0xbc>
   107a0:	sub	r1, r1, r0
   107a4:	asr	r1, r1, #2
   107a8:	add	r1, r1, r1, lsr #31
   107ac:	asrs	r1, r1, #1
   107b0:	bxeq	lr
   107b4:	ldr	r3, [pc, #16]	; 107cc <_start@@Base+0xc0>
   107b8:	cmp	r3, #0
   107bc:	bxeq	lr
   107c0:	bx	r3
   107c4:	andeq	r1, r2, r8, lsr r0
   107c8:	andeq	r1, r2, r8, lsr r0
   107cc:	andeq	r0, r0, r0
   107d0:	push	{r4, lr}
   107d4:	ldr	r4, [pc, #24]	; 107f4 <_start@@Base+0xe8>
   107d8:	ldrb	r3, [r4]
   107dc:	cmp	r3, #0
   107e0:	popne	{r4, pc}
   107e4:	bl	1076c <_start@@Base+0x60>
   107e8:	mov	r3, #1
   107ec:	strb	r3, [r4]
   107f0:	pop	{r4, pc}
   107f4:	andeq	r1, r2, r8, lsr r0
   107f8:	b	10798 <_start@@Base+0x8c>

000107fc <inverte@@Base>:
   107fc:	push	{r4, r5, r6, lr}
   10800:	mov	r5, r0
   10804:	mov	r6, r1
   10808:	mov	r4, #0
   1080c:	mov	r0, r5
   10810:	bl	10634 <strlen@plt>
   10814:	cmp	r4, r0
   10818:	popcs	{r4, r5, r6, pc}
   1081c:	sub	r0, r0, #1
   10820:	sub	r0, r0, r4
   10824:	ldrb	r3, [r5, r0]
   10828:	strb	r3, [r6, r4]
   1082c:	add	r4, r4, #1
   10830:	b	1080c <inverte@@Base+0x10>

00010834 <__libc_csu_init@@Base>:
   10834:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10838:	mov	r7, r0
   1083c:	ldr	r6, [pc, #72]	; 1088c <__libc_csu_init@@Base+0x58>
   10840:	ldr	r5, [pc, #72]	; 10890 <__libc_csu_init@@Base+0x5c>
   10844:	add	r6, pc, r6
   10848:	add	r5, pc, r5
   1084c:	sub	r6, r6, r5
   10850:	mov	r8, r1
   10854:	mov	r9, r2
   10858:	bl	105e4 <strcmp@plt-0x20>
   1085c:	asrs	r6, r6, #2
   10860:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10864:	mov	r4, #0
   10868:	add	r4, r4, #1
   1086c:	ldr	r3, [r5], #4
   10870:	mov	r2, r9
   10874:	mov	r1, r8
   10878:	mov	r0, r7
   1087c:	blx	r3
   10880:	cmp	r6, r4
   10884:	bne	10868 <__libc_csu_init@@Base+0x34>
   10888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1088c:	andeq	r0, r1, r8, asr #13
   10890:	andeq	r0, r1, r0, asr #13

00010894 <__libc_csu_fini@@Base>:
   10894:	bx	lr

Disassembly of section .fini:

00010898 <.fini>:
   10898:	push	{r3, lr}
   1089c:	pop	{r3, pc}
