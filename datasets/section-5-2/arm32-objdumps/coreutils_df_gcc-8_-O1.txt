
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000112c4 <.init>:
   112c4:	push	{r3, lr}
   112c8:	bl	1174c <__assert_fail@plt+0x48>
   112cc:	pop	{r3, pc}

Disassembly of section .plt:

000112d0 <calloc@plt-0x14>:
   112d0:	push	{lr}		; (str lr, [sp, #-4]!)
   112d4:	ldr	lr, [pc, #4]	; 112e0 <calloc@plt-0x4>
   112d8:	add	lr, pc, lr
   112dc:	ldr	pc, [lr, #8]!
   112e0:	andeq	lr, r1, r0, lsr #26

000112e4 <calloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #122880	; 0x1e000
   112ec:	ldr	pc, [ip, #3360]!	; 0xd20

000112f0 <fputs_unlocked@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #122880	; 0x1e000
   112f8:	ldr	pc, [ip, #3352]!	; 0xd18

000112fc <raise@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #122880	; 0x1e000
   11304:	ldr	pc, [ip, #3344]!	; 0xd10

00011308 <strverscmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #122880	; 0x1e000
   11310:	ldr	pc, [ip, #3336]!	; 0xd08

00011314 <__getdelim@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #122880	; 0x1e000
   1131c:	ldr	pc, [ip, #3328]!	; 0xd00

00011320 <strcmp@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #122880	; 0x1e000
   11328:	ldr	pc, [ip, #3320]!	; 0xcf8

0001132c <fflush@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #122880	; 0x1e000
   11334:	ldr	pc, [ip, #3312]!	; 0xcf0

00011338 <wcwidth@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #122880	; 0x1e000
   11340:	ldr	pc, [ip, #3304]!	; 0xce8

00011344 <memmove@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #122880	; 0x1e000
   1134c:	ldr	pc, [ip, #3296]!	; 0xce0

00011350 <free@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #122880	; 0x1e000
   11358:	ldr	pc, [ip, #3288]!	; 0xcd8

0001135c <faccessat@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #122880	; 0x1e000
   11364:	ldr	pc, [ip, #3280]!	; 0xcd0

00011368 <_exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #122880	; 0x1e000
   11370:	ldr	pc, [ip, #3272]!	; 0xcc8

00011374 <memcpy@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #122880	; 0x1e000
   1137c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011380 <__strtoull_internal@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #122880	; 0x1e000
   11388:	ldr	pc, [ip, #3256]!	; 0xcb8

0001138c <mbsinit@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #122880	; 0x1e000
   11394:	ldr	pc, [ip, #3248]!	; 0xcb0

00011398 <memcmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #122880	; 0x1e000
   113a0:	ldr	pc, [ip, #3240]!	; 0xca8

000113a4 <fputc_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #122880	; 0x1e000
   113ac:	ldr	pc, [ip, #3232]!	; 0xca0

000113b0 <uname@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #122880	; 0x1e000
   113b8:	ldr	pc, [ip, #3224]!	; 0xc98

000113bc <dcgettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #122880	; 0x1e000
   113c4:	ldr	pc, [ip, #3216]!	; 0xc90

000113c8 <strdup@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #122880	; 0x1e000
   113d0:	ldr	pc, [ip, #3208]!	; 0xc88

000113d4 <realloc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #122880	; 0x1e000
   113dc:	ldr	pc, [ip, #3200]!	; 0xc80

000113e0 <textdomain@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #122880	; 0x1e000
   113e8:	ldr	pc, [ip, #3192]!	; 0xc78

000113ec <iswcntrl@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #122880	; 0x1e000
   113f4:	ldr	pc, [ip, #3184]!	; 0xc70

000113f8 <rawmemchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #122880	; 0x1e000
   11400:	ldr	pc, [ip, #3176]!	; 0xc68

00011404 <chdir@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #122880	; 0x1e000
   1140c:	ldr	pc, [ip, #3168]!	; 0xc60

00011410 <iswprint@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #122880	; 0x1e000
   11418:	ldr	pc, [ip, #3160]!	; 0xc58

0001141c <__fxstat64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #122880	; 0x1e000
   11424:	ldr	pc, [ip, #3152]!	; 0xc50

00011428 <readlink@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #122880	; 0x1e000
   11430:	ldr	pc, [ip, #3144]!	; 0xc48

00011434 <__memcpy_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #122880	; 0x1e000
   1143c:	ldr	pc, [ip, #3136]!	; 0xc40

00011440 <fwrite@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #122880	; 0x1e000
   11448:	ldr	pc, [ip, #3128]!	; 0xc38

0001144c <lseek64@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #122880	; 0x1e000
   11454:	ldr	pc, [ip, #3120]!	; 0xc30

00011458 <__ctype_get_mb_cur_max@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #122880	; 0x1e000
   11460:	ldr	pc, [ip, #3112]!	; 0xc28

00011464 <hasmntopt@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #122880	; 0x1e000
   1146c:	ldr	pc, [ip, #3104]!	; 0xc20

00011470 <__fpending@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #122880	; 0x1e000
   11478:	ldr	pc, [ip, #3096]!	; 0xc18

0001147c <mbrtowc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #122880	; 0x1e000
   11484:	ldr	pc, [ip, #3088]!	; 0xc10

00011488 <wcstombs@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #122880	; 0x1e000
   11490:	ldr	pc, [ip, #3080]!	; 0xc08

00011494 <error@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #122880	; 0x1e000
   1149c:	ldr	pc, [ip, #3072]!	; 0xc00

000114a0 <getmntent@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #122880	; 0x1e000
   114a8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ac <open64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #122880	; 0x1e000
   114b4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114b8 <__asprintf_chk@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #122880	; 0x1e000
   114c0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c4 <getenv@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #122880	; 0x1e000
   114cc:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d0 <malloc@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #122880	; 0x1e000
   114d8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114dc <__libc_start_main@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #122880	; 0x1e000
   114e4:	ldr	pc, [ip, #3024]!	; 0xbd0

000114e8 <__freading@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #122880	; 0x1e000
   114f0:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f4 <__gmon_start__@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #122880	; 0x1e000
   114fc:	ldr	pc, [ip, #3008]!	; 0xbc0

00011500 <mempcpy@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #122880	; 0x1e000
   11508:	ldr	pc, [ip, #3000]!	; 0xbb8

0001150c <getopt_long@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #122880	; 0x1e000
   11514:	ldr	pc, [ip, #2992]!	; 0xbb0

00011518 <__ctype_b_loc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #122880	; 0x1e000
   11520:	ldr	pc, [ip, #2984]!	; 0xba8

00011524 <getcwd@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #122880	; 0x1e000
   1152c:	ldr	pc, [ip, #2976]!	; 0xba0

00011530 <exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #122880	; 0x1e000
   11538:	ldr	pc, [ip, #2968]!	; 0xb98

0001153c <strlen@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #122880	; 0x1e000
   11544:	ldr	pc, [ip, #2960]!	; 0xb90

00011548 <strchr@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #122880	; 0x1e000
   11550:	ldr	pc, [ip, #2952]!	; 0xb88

00011554 <openat64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #122880	; 0x1e000
   1155c:	ldr	pc, [ip, #2944]!	; 0xb80

00011560 <memrchr@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #122880	; 0x1e000
   11568:	ldr	pc, [ip, #2936]!	; 0xb78

0001156c <__errno_location@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #122880	; 0x1e000
   11574:	ldr	pc, [ip, #2928]!	; 0xb70

00011578 <__sprintf_chk@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #122880	; 0x1e000
   11580:	ldr	pc, [ip, #2920]!	; 0xb68

00011584 <__cxa_atexit@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #122880	; 0x1e000
   1158c:	ldr	pc, [ip, #2912]!	; 0xb60

00011590 <memset@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #122880	; 0x1e000
   11598:	ldr	pc, [ip, #2904]!	; 0xb58

0001159c <__printf_chk@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #122880	; 0x1e000
   115a4:	ldr	pc, [ip, #2896]!	; 0xb50

000115a8 <statvfs64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #122880	; 0x1e000
   115b0:	ldr	pc, [ip, #2888]!	; 0xb48

000115b4 <fileno@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #122880	; 0x1e000
   115bc:	ldr	pc, [ip, #2880]!	; 0xb40

000115c0 <__fprintf_chk@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #122880	; 0x1e000
   115c8:	ldr	pc, [ip, #2872]!	; 0xb38

000115cc <memchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #122880	; 0x1e000
   115d4:	ldr	pc, [ip, #2864]!	; 0xb30

000115d8 <fclose@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #122880	; 0x1e000
   115e0:	ldr	pc, [ip, #2856]!	; 0xb28

000115e4 <fseeko64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #122880	; 0x1e000
   115ec:	ldr	pc, [ip, #2848]!	; 0xb20

000115f0 <endmntent@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #122880	; 0x1e000
   115f8:	ldr	pc, [ip, #2840]!	; 0xb18

000115fc <fcntl64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #122880	; 0x1e000
   11604:	ldr	pc, [ip, #2832]!	; 0xb10

00011608 <__overflow@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #122880	; 0x1e000
   11610:	ldr	pc, [ip, #2824]!	; 0xb08

00011614 <setlocale@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #122880	; 0x1e000
   1161c:	ldr	pc, [ip, #2816]!	; 0xb00

00011620 <wcswidth@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #122880	; 0x1e000
   11628:	ldr	pc, [ip, #2808]!	; 0xaf8

0001162c <strrchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #122880	; 0x1e000
   11634:	ldr	pc, [ip, #2800]!	; 0xaf0

00011638 <statfs64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #122880	; 0x1e000
   11640:	ldr	pc, [ip, #2792]!	; 0xae8

00011644 <nl_langinfo@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #122880	; 0x1e000
   1164c:	ldr	pc, [ip, #2784]!	; 0xae0

00011650 <sscanf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #122880	; 0x1e000
   11658:	ldr	pc, [ip, #2776]!	; 0xad8

0001165c <localeconv@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #122880	; 0x1e000
   11664:	ldr	pc, [ip, #2768]!	; 0xad0

00011668 <mbstowcs@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #122880	; 0x1e000
   11670:	ldr	pc, [ip, #2760]!	; 0xac8

00011674 <fchdir@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #122880	; 0x1e000
   1167c:	ldr	pc, [ip, #2752]!	; 0xac0

00011680 <canonicalize_file_name@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #122880	; 0x1e000
   11688:	ldr	pc, [ip, #2744]!	; 0xab8

0001168c <fopen64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #122880	; 0x1e000
   11694:	ldr	pc, [ip, #2736]!	; 0xab0

00011698 <setmntent@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #122880	; 0x1e000
   116a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000116a4 <bindtextdomain@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #122880	; 0x1e000
   116ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000116b0 <sync@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #122880	; 0x1e000
   116b8:	ldr	pc, [ip, #2712]!	; 0xa98

000116bc <__xstat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #122880	; 0x1e000
   116c4:	ldr	pc, [ip, #2704]!	; 0xa90

000116c8 <isatty@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #122880	; 0x1e000
   116d0:	ldr	pc, [ip, #2696]!	; 0xa88

000116d4 <strncmp@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #122880	; 0x1e000
   116dc:	ldr	pc, [ip, #2688]!	; 0xa80

000116e0 <abort@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #122880	; 0x1e000
   116e8:	ldr	pc, [ip, #2680]!	; 0xa78

000116ec <close@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #122880	; 0x1e000
   116f4:	ldr	pc, [ip, #2672]!	; 0xa70

000116f8 <strspn@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #122880	; 0x1e000
   11700:	ldr	pc, [ip, #2664]!	; 0xa68

00011704 <__assert_fail@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #122880	; 0x1e000
   1170c:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

00011710 <.text>:
   11710:	mov	fp, #0
   11714:	mov	lr, #0
   11718:	pop	{r1}		; (ldr r1, [sp], #4)
   1171c:	mov	r2, sp
   11720:	push	{r2}		; (str r2, [sp, #-4]!)
   11724:	push	{r0}		; (str r0, [sp, #-4]!)
   11728:	ldr	ip, [pc, #16]	; 11740 <__assert_fail@plt+0x3c>
   1172c:	push	{ip}		; (str ip, [sp, #-4]!)
   11730:	ldr	r0, [pc, #12]	; 11744 <__assert_fail@plt+0x40>
   11734:	ldr	r3, [pc, #12]	; 11748 <__assert_fail@plt+0x44>
   11738:	bl	114dc <__libc_start_main@plt>
   1173c:	bl	116e0 <abort@plt>
   11740:	andeq	lr, r1, r0, ror #1
   11744:	muleq	r1, r4, r2
   11748:	andeq	lr, r1, r0, lsl #1
   1174c:	ldr	r3, [pc, #20]	; 11768 <__assert_fail@plt+0x64>
   11750:	ldr	r2, [pc, #20]	; 1176c <__assert_fail@plt+0x68>
   11754:	add	r3, pc, r3
   11758:	ldr	r2, [r3, r2]
   1175c:	cmp	r2, #0
   11760:	bxeq	lr
   11764:	b	114f4 <__gmon_start__@plt>
   11768:	andeq	lr, r1, r4, lsr #17
   1176c:	andeq	r0, r0, r0, ror r1
   11770:	ldr	r0, [pc, #24]	; 11790 <__assert_fail@plt+0x8c>
   11774:	ldr	r3, [pc, #24]	; 11794 <__assert_fail@plt+0x90>
   11778:	cmp	r3, r0
   1177c:	bxeq	lr
   11780:	ldr	r3, [pc, #16]	; 11798 <__assert_fail@plt+0x94>
   11784:	cmp	r3, #0
   11788:	bxeq	lr
   1178c:	bx	r3
   11790:	andeq	r0, r3, r0, lsr #6
   11794:	andeq	r0, r3, r0, lsr #6
   11798:	andeq	r0, r0, r0
   1179c:	ldr	r0, [pc, #36]	; 117c8 <__assert_fail@plt+0xc4>
   117a0:	ldr	r1, [pc, #36]	; 117cc <__assert_fail@plt+0xc8>
   117a4:	sub	r1, r1, r0
   117a8:	asr	r1, r1, #2
   117ac:	add	r1, r1, r1, lsr #31
   117b0:	asrs	r1, r1, #1
   117b4:	bxeq	lr
   117b8:	ldr	r3, [pc, #16]	; 117d0 <__assert_fail@plt+0xcc>
   117bc:	cmp	r3, #0
   117c0:	bxeq	lr
   117c4:	bx	r3
   117c8:	andeq	r0, r3, r0, lsr #6
   117cc:	andeq	r0, r3, r0, lsr #6
   117d0:	andeq	r0, r0, r0
   117d4:	push	{r4, lr}
   117d8:	ldr	r4, [pc, #24]	; 117f8 <__assert_fail@plt+0xf4>
   117dc:	ldrb	r3, [r4]
   117e0:	cmp	r3, #0
   117e4:	popne	{r4, pc}
   117e8:	bl	11770 <__assert_fail@plt+0x6c>
   117ec:	mov	r3, #1
   117f0:	strb	r3, [r4]
   117f4:	pop	{r4, pc}
   117f8:	andeq	r0, r3, ip, lsr r3
   117fc:	b	1179c <__assert_fail@plt+0x98>
   11800:	ldrb	r3, [r0]
   11804:	cmp	r3, #0
   11808:	beq	11838 <__assert_fail@plt+0x134>
   1180c:	mov	r2, #63	; 0x3f
   11810:	b	11824 <__assert_fail@plt+0x120>
   11814:	strb	r2, [r0]
   11818:	ldrb	r3, [r0, #1]!
   1181c:	cmp	r3, #0
   11820:	beq	11838 <__assert_fail@plt+0x134>
   11824:	cmp	r3, #31
   11828:	bls	11814 <__assert_fail@plt+0x110>
   1182c:	cmp	r3, #127	; 0x7f
   11830:	bne	11818 <__assert_fail@plt+0x114>
   11834:	b	11814 <__assert_fail@plt+0x110>
   11838:	bx	lr
   1183c:	str	r4, [sp, #-8]!
   11840:	str	lr, [sp, #4]
   11844:	mov	r2, r1
   11848:	mov	r3, #0
   1184c:	ldrd	r0, [r0]
   11850:	bl	1decc <__assert_fail@plt+0xc7c8>
   11854:	mov	r0, r2
   11858:	ldr	r4, [sp]
   1185c:	add	sp, sp, #4
   11860:	pop	{pc}		; (ldr pc, [sp], #4)
   11864:	strd	r4, [sp, #-8]!
   11868:	ldrd	r4, [r0]
   1186c:	ldrd	r2, [r1]
   11870:	cmp	r5, r3
   11874:	cmpeq	r4, r2
   11878:	moveq	r0, #1
   1187c:	movne	r0, #0
   11880:	ldrd	r4, [sp]
   11884:	add	sp, sp, #8
   11888:	bx	lr
   1188c:	strd	r4, [sp, #-16]!
   11890:	str	r6, [sp, #8]
   11894:	str	lr, [sp, #12]
   11898:	movw	r3, #832	; 0x340
   1189c:	movt	r3, #3
   118a0:	ldr	r4, [r3]
   118a4:	mov	r6, r0
   118a8:	clz	r3, r4
   118ac:	lsr	r3, r3, #5
   118b0:	cmp	r0, #0
   118b4:	movne	r5, r3
   118b8:	moveq	r5, #1
   118bc:	cmp	r5, #0
   118c0:	bne	118ec <__assert_fail@plt+0x1e8>
   118c4:	ldr	r1, [r4]
   118c8:	mov	r0, r6
   118cc:	bl	11320 <strcmp@plt>
   118d0:	cmp	r0, #0
   118d4:	beq	118e8 <__assert_fail@plt+0x1e4>
   118d8:	ldr	r4, [r4, #4]
   118dc:	cmp	r4, #0
   118e0:	bne	118c4 <__assert_fail@plt+0x1c0>
   118e4:	b	118ec <__assert_fail@plt+0x1e8>
   118e8:	mov	r5, #1
   118ec:	mov	r0, r5
   118f0:	ldrd	r4, [sp]
   118f4:	ldr	r6, [sp, #8]
   118f8:	add	sp, sp, #12
   118fc:	pop	{pc}		; (ldr pc, [sp], #4)
   11900:	strd	r4, [sp, #-16]!
   11904:	str	r6, [sp, #8]
   11908:	str	lr, [sp, #12]
   1190c:	movw	r3, #832	; 0x340
   11910:	movt	r3, #3
   11914:	ldr	r4, [r3, #4]
   11918:	mov	r6, r0
   1191c:	clz	r3, r4
   11920:	lsr	r3, r3, #5
   11924:	cmp	r0, #0
   11928:	movne	r5, r3
   1192c:	moveq	r5, #1
   11930:	cmp	r5, #0
   11934:	movne	r5, #0
   11938:	bne	11964 <__assert_fail@plt+0x260>
   1193c:	ldr	r1, [r4]
   11940:	mov	r0, r6
   11944:	bl	11320 <strcmp@plt>
   11948:	cmp	r0, #0
   1194c:	beq	11960 <__assert_fail@plt+0x25c>
   11950:	ldr	r4, [r4, #4]
   11954:	cmp	r4, #0
   11958:	bne	1193c <__assert_fail@plt+0x238>
   1195c:	b	11964 <__assert_fail@plt+0x260>
   11960:	mov	r5, #1
   11964:	mov	r0, r5
   11968:	ldrd	r4, [sp]
   1196c:	ldr	r6, [sp, #8]
   11970:	add	sp, sp, #12
   11974:	pop	{pc}		; (ldr pc, [sp], #4)
   11978:	str	r4, [sp, #-8]!
   1197c:	str	lr, [sp, #4]
   11980:	bl	15784 <__assert_fail@plt+0x4080>
   11984:	ldr	r4, [sp]
   11988:	add	sp, sp, #4
   1198c:	pop	{pc}		; (ldr pc, [sp], #4)
   11990:	strd	r4, [sp, #-16]!
   11994:	str	r6, [sp, #8]
   11998:	str	lr, [sp, #12]
   1199c:	mov	r4, r0
   119a0:	mov	r6, r1
   119a4:	movw	r5, #832	; 0x340
   119a8:	movt	r5, #3
   119ac:	ldr	r1, [r5, #8]
   119b0:	add	r1, r1, #1
   119b4:	str	r1, [r5, #8]
   119b8:	mov	r2, #4
   119bc:	ldr	r0, [r5, #12]
   119c0:	bl	1b554 <__assert_fail@plt+0x9e50>
   119c4:	str	r0, [r5, #12]
   119c8:	ldr	r2, [r5, #8]
   119cc:	sub	r2, r2, #-1073741823	; 0xc0000001
   119d0:	movw	r3, #380	; 0x17c
   119d4:	movt	r3, #3
   119d8:	rsb	r1, r4, r4, lsl #3
   119dc:	add	r3, r3, r1, lsl #2
   119e0:	str	r3, [r0, r2, lsl #2]
   119e4:	cmp	r6, #0
   119e8:	beq	119fc <__assert_fail@plt+0x2f8>
   119ec:	movw	r3, #380	; 0x17c
   119f0:	movt	r3, #3
   119f4:	add	r3, r3, r1, lsl #2
   119f8:	str	r6, [r3, #12]
   119fc:	movw	r3, #380	; 0x17c
   11a00:	movt	r3, #3
   11a04:	rsb	r2, r4, r4, lsl #3
   11a08:	add	r3, r3, r2, lsl #2
   11a0c:	ldrb	r3, [r3, #24]
   11a10:	cmp	r3, #0
   11a14:	bne	11a40 <__assert_fail@plt+0x33c>
   11a18:	movw	r3, #380	; 0x17c
   11a1c:	movt	r3, #3
   11a20:	rsb	r4, r4, r4, lsl #3
   11a24:	add	r4, r3, r4, lsl #2
   11a28:	mov	r3, #1
   11a2c:	strb	r3, [r4, #24]
   11a30:	ldrd	r4, [sp]
   11a34:	ldr	r6, [sp, #8]
   11a38:	add	sp, sp, #12
   11a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a40:	movw	r3, #57608	; 0xe108
   11a44:	movt	r3, #1
   11a48:	movw	r2, #425	; 0x1a9
   11a4c:	movw	r1, #57992	; 0xe288
   11a50:	movt	r1, #1
   11a54:	movw	r0, #58004	; 0xe294
   11a58:	movt	r0, #1
   11a5c:	bl	11704 <__assert_fail@plt>
   11a60:	strd	r4, [sp, #-16]!
   11a64:	str	r6, [sp, #8]
   11a68:	str	lr, [sp, #12]
   11a6c:	movw	r4, #832	; 0x340
   11a70:	movt	r4, #3
   11a74:	ldr	r1, [r4, #16]
   11a78:	add	r1, r1, #1
   11a7c:	str	r1, [r4, #16]
   11a80:	mov	r2, #4
   11a84:	ldr	r0, [r4, #20]
   11a88:	bl	1b554 <__assert_fail@plt+0x9e50>
   11a8c:	mov	r6, r0
   11a90:	str	r0, [r4, #20]
   11a94:	ldr	r5, [r4, #16]
   11a98:	sub	r5, r5, #-1073741823	; 0xc0000001
   11a9c:	mov	r1, #4
   11aa0:	ldr	r0, [r4, #8]
   11aa4:	bl	1b5fc <__assert_fail@plt+0x9ef8>
   11aa8:	str	r0, [r6, r5, lsl #2]
   11aac:	ldrd	r4, [sp]
   11ab0:	ldr	r6, [sp, #8]
   11ab4:	add	sp, sp, #12
   11ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   11abc:	str	r4, [sp, #-8]!
   11ac0:	str	lr, [sp, #4]
   11ac4:	mov	r4, r0
   11ac8:	movw	r3, #380	; 0x17c
   11acc:	movt	r3, #3
   11ad0:	ldr	r3, [r3, #336]	; 0x150
   11ad4:	cmp	r3, #0
   11ad8:	blt	11b14 <__assert_fail@plt+0x410>
   11adc:	movw	r3, #380	; 0x17c
   11ae0:	movt	r3, #3
   11ae4:	ldr	r1, [r3, #336]	; 0x150
   11ae8:	movw	r3, #7776	; 0x1e60
   11aec:	movt	r3, #1
   11af0:	movw	r2, #6144	; 0x1800
   11af4:	movt	r2, #1
   11af8:	cmp	r1, #0
   11afc:	moveq	r3, r2
   11b00:	mov	r0, r4
   11b04:	blx	r3
   11b08:	ldr	r4, [sp]
   11b0c:	add	sp, sp, #4
   11b10:	pop	{pc}		; (ldr pc, [sp], #4)
   11b14:	mov	r0, #1
   11b18:	bl	116c8 <isatty@plt>
   11b1c:	movw	r3, #380	; 0x17c
   11b20:	movt	r3, #3
   11b24:	str	r0, [r3, #336]	; 0x150
   11b28:	b	11adc <__assert_fail@plt+0x3d8>
   11b2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11b30:	strd	r6, [sp, #8]
   11b34:	strd	r8, [sp, #16]
   11b38:	strd	sl, [sp, #24]
   11b3c:	str	lr, [sp, #32]
   11b40:	sub	sp, sp, #724	; 0x2d4
   11b44:	bl	11a60 <__assert_fail@plt+0x35c>
   11b48:	movw	r3, #832	; 0x340
   11b4c:	movt	r3, #3
   11b50:	ldr	r3, [r3, #8]
   11b54:	cmp	r3, #0
   11b58:	beq	11df8 <__assert_fail@plt+0x6f4>
   11b5c:	mov	r8, #0
   11b60:	movw	fp, #832	; 0x340
   11b64:	movt	fp, #3
   11b68:	b	11bdc <__assert_fail@plt+0x4d8>
   11b6c:	ldr	r3, [fp, #28]
   11b70:	tst	r3, #16
   11b74:	beq	11c78 <__assert_fail@plt+0x574>
   11b78:	mov	r0, r5
   11b7c:	bl	113c8 <strdup@plt>
   11b80:	str	r0, [sp, #64]	; 0x40
   11b84:	ldr	r0, [sp, #64]	; 0x40
   11b88:	cmp	r0, #0
   11b8c:	beq	11df4 <__assert_fail@plt+0x6f0>
   11b90:	bl	11abc <__assert_fail@plt+0x3b8>
   11b94:	ldr	r0, [sp, #64]	; 0x40
   11b98:	ldr	r3, [fp, #16]
   11b9c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11ba0:	ldr	r2, [fp, #20]
   11ba4:	ldr	r3, [r2, r3, lsl #2]
   11ba8:	str	r0, [r3, sl]
   11bac:	mov	r1, #0
   11bb0:	bl	17e2c <__assert_fail@plt+0x6728>
   11bb4:	ldr	r3, [fp, #12]
   11bb8:	ldr	r2, [r3, sl]
   11bbc:	ldr	r3, [r2, #16]
   11bc0:	cmp	r3, r0
   11bc4:	movcs	r0, r3
   11bc8:	str	r0, [r2, #16]
   11bcc:	add	r8, r8, #1
   11bd0:	ldr	r3, [fp, #8]
   11bd4:	cmp	r3, r8
   11bd8:	bls	11df8 <__assert_fail@plt+0x6f4>
   11bdc:	mov	r0, #0
   11be0:	str	r0, [sp, #64]	; 0x40
   11be4:	lsl	sl, r8, #2
   11be8:	ldr	r4, [fp, #12]
   11bec:	ldr	r3, [r4, r8, lsl #2]
   11bf0:	mov	r2, #5
   11bf4:	ldr	r1, [r3, #12]
   11bf8:	bl	113bc <dcgettext@plt>
   11bfc:	mov	r5, r0
   11c00:	ldr	r3, [r4, r8, lsl #2]
   11c04:	ldr	r3, [r3]
   11c08:	cmp	r3, #2
   11c0c:	bne	11b78 <__assert_fail@plt+0x474>
   11c10:	ldr	r3, [fp, #24]
   11c14:	cmp	r3, #0
   11c18:	beq	11c78 <__assert_fail@plt+0x574>
   11c1c:	cmp	r3, #4
   11c20:	beq	11b6c <__assert_fail@plt+0x468>
   11c24:	cmp	r3, #3
   11c28:	bne	11b78 <__assert_fail@plt+0x474>
   11c2c:	add	r2, sp, #68	; 0x44
   11c30:	ldrd	r0, [fp, #32]
   11c34:	bl	176e0 <__assert_fail@plt+0x5fdc>
   11c38:	mov	r4, r0
   11c3c:	mov	r2, #5
   11c40:	movw	r1, #58028	; 0xe2ac
   11c44:	movt	r1, #1
   11c48:	mov	r0, #0
   11c4c:	bl	113bc <dcgettext@plt>
   11c50:	str	r5, [sp]
   11c54:	mov	r3, r4
   11c58:	mov	r2, r0
   11c5c:	mov	r1, #1
   11c60:	add	r0, sp, #64	; 0x40
   11c64:	bl	114b8 <__asprintf_chk@plt>
   11c68:	cmn	r0, #1
   11c6c:	moveq	r3, #0
   11c70:	streq	r3, [sp, #64]	; 0x40
   11c74:	b	11b84 <__assert_fail@plt+0x480>
   11c78:	ldr	r3, [fp, #28]
   11c7c:	str	r3, [sp, #60]	; 0x3c
   11c80:	and	r3, r3, #292	; 0x124
   11c84:	str	r3, [sp, #56]	; 0x38
   11c88:	ldr	r7, [fp, #32]
   11c8c:	str	r7, [sp, #36]	; 0x24
   11c90:	ldr	r5, [fp, #36]	; 0x24
   11c94:	str	r5, [sp, #40]	; 0x28
   11c98:	mov	r4, r7
   11c9c:	mov	r6, r5
   11ca0:	str	r8, [sp, #44]	; 0x2c
   11ca4:	str	sl, [sp, #48]	; 0x30
   11ca8:	str	fp, [sp, #52]	; 0x34
   11cac:	mov	r2, #1000	; 0x3e8
   11cb0:	mov	r3, #0
   11cb4:	mov	r0, r7
   11cb8:	mov	r1, r5
   11cbc:	bl	1decc <__assert_fail@plt+0xc7c8>
   11cc0:	mov	r9, r2
   11cc4:	mov	r8, r3
   11cc8:	str	r2, [sp, #20]
   11ccc:	str	r3, [sp, #32]
   11cd0:	mov	r2, #1000	; 0x3e8
   11cd4:	mov	r3, #0
   11cd8:	mov	r0, r7
   11cdc:	mov	r1, r5
   11ce0:	bl	1decc <__assert_fail@plt+0xc7c8>
   11ce4:	mov	r7, r0
   11ce8:	mov	r5, r1
   11cec:	ubfx	r3, r4, #0, #10
   11cf0:	lsr	r4, r4, #10
   11cf4:	orr	r4, r4, r6, lsl #22
   11cf8:	lsr	r6, r6, #10
   11cfc:	orr	sl, r3, r9
   11d00:	mov	fp, r8
   11d04:	orrs	r2, sl, fp
   11d08:	beq	11cac <__assert_fail@plt+0x5a8>
   11d0c:	ldr	r8, [sp, #44]	; 0x2c
   11d10:	strd	sl, [sp, #24]
   11d14:	ldr	sl, [sp, #48]	; 0x30
   11d18:	ldr	fp, [sp, #52]	; 0x34
   11d1c:	ldr	r2, [sp, #20]
   11d20:	ldr	r1, [sp, #32]
   11d24:	orrs	r2, r2, r1
   11d28:	moveq	r2, #1
   11d2c:	movne	r2, #0
   11d30:	orrs	r3, r3, #0
   11d34:	moveq	r3, #1
   11d38:	movne	r3, #0
   11d3c:	cmp	r2, r3
   11d40:	bcs	11dcc <__assert_fail@plt+0x6c8>
   11d44:	ldr	r3, [sp, #56]	; 0x38
   11d48:	orr	r3, r3, #184	; 0xb8
   11d4c:	tst	r3, #32
   11d50:	beq	11de0 <__assert_fail@plt+0x6dc>
   11d54:	mov	r0, #1
   11d58:	mov	r1, #0
   11d5c:	strd	r0, [sp, #8]
   11d60:	strd	r0, [sp]
   11d64:	add	r2, sp, #68	; 0x44
   11d68:	ldr	r0, [sp, #36]	; 0x24
   11d6c:	ldr	r1, [sp, #40]	; 0x28
   11d70:	bl	16c38 <__assert_fail@plt+0x5534>
   11d74:	mov	r4, r0
   11d78:	mov	r2, #5
   11d7c:	movw	r1, #58020	; 0xe2a4
   11d80:	movt	r1, #1
   11d84:	mov	r0, #0
   11d88:	bl	113bc <dcgettext@plt>
   11d8c:	mov	r5, r0
   11d90:	mov	r2, #5
   11d94:	movw	r1, #58028	; 0xe2ac
   11d98:	movt	r1, #1
   11d9c:	mov	r0, #0
   11da0:	bl	113bc <dcgettext@plt>
   11da4:	str	r5, [sp]
   11da8:	mov	r3, r4
   11dac:	mov	r2, r0
   11db0:	mov	r1, #1
   11db4:	add	r0, sp, #64	; 0x40
   11db8:	bl	114b8 <__asprintf_chk@plt>
   11dbc:	cmn	r0, #1
   11dc0:	moveq	r3, #0
   11dc4:	streq	r3, [sp, #64]	; 0x40
   11dc8:	b	11b84 <__assert_fail@plt+0x480>
   11dcc:	cmp	r2, r3
   11dd0:	bls	11de8 <__assert_fail@plt+0x6e4>
   11dd4:	ldr	r3, [sp, #60]	; 0x3c
   11dd8:	and	r3, r3, #260	; 0x104
   11ddc:	orr	r3, r3, #152	; 0x98
   11de0:	orr	r3, r3, #256	; 0x100
   11de4:	b	11d54 <__assert_fail@plt+0x650>
   11de8:	ldr	r3, [sp, #56]	; 0x38
   11dec:	orr	r3, r3, #152	; 0x98
   11df0:	b	11d4c <__assert_fail@plt+0x648>
   11df4:	bl	1b910 <__assert_fail@plt+0xa20c>
   11df8:	add	sp, sp, #724	; 0x2d4
   11dfc:	ldrd	r4, [sp]
   11e00:	ldrd	r6, [sp, #8]
   11e04:	ldrd	r8, [sp, #16]
   11e08:	ldrd	sl, [sp, #24]
   11e0c:	add	sp, sp, #32
   11e10:	pop	{pc}		; (ldr pc, [sp], #4)
   11e14:	strd	r4, [sp, #-12]!
   11e18:	str	lr, [sp, #8]
   11e1c:	sub	sp, sp, #28
   11e20:	mov	r4, r0
   11e24:	movw	r3, #832	; 0x340
   11e28:	movt	r3, #3
   11e2c:	ldr	r0, [r3, #40]	; 0x28
   11e30:	cmp	r0, #0
   11e34:	beq	11e50 <__assert_fail@plt+0x74c>
   11e38:	mov	r5, r1
   11e3c:	strd	r4, [sp]
   11e40:	mov	r1, sp
   11e44:	bl	160a8 <__assert_fail@plt+0x49a4>
   11e48:	cmp	r0, #0
   11e4c:	ldrne	r0, [r0, #16]
   11e50:	add	sp, sp, #28
   11e54:	ldrd	r4, [sp]
   11e58:	add	sp, sp, #8
   11e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e60:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11e64:	strd	r6, [sp, #8]
   11e68:	strd	r8, [sp, #16]
   11e6c:	str	sl, [sp, #24]
   11e70:	str	lr, [sp, #28]
   11e74:	sub	sp, sp, #16
   11e78:	mov	r5, r0
   11e7c:	bl	1153c <strlen@plt>
   11e80:	add	r7, r5, r0
   11e84:	mov	r2, #0
   11e88:	mov	r3, #0
   11e8c:	strd	r2, [sp, #8]
   11e90:	cmp	r5, r7
   11e94:	beq	11f10 <__assert_fail@plt+0x80c>
   11e98:	mov	r4, r5
   11e9c:	mov	r8, r2
   11ea0:	mov	r9, r3
   11ea4:	b	11ec4 <__assert_fail@plt+0x7c0>
   11ea8:	mov	sl, #1
   11eac:	mov	r3, #63	; 0x3f
   11eb0:	strb	r3, [r5], #1
   11eb4:	strd	r8, [sp, #8]
   11eb8:	add	r4, r4, sl
   11ebc:	cmp	r7, r4
   11ec0:	beq	11f14 <__assert_fail@plt+0x810>
   11ec4:	sub	r6, r7, r4
   11ec8:	add	r3, sp, #8
   11ecc:	mov	r2, r6
   11ed0:	mov	r1, r4
   11ed4:	add	r0, sp, #4
   11ed8:	bl	1776c <__assert_fail@plt+0x6068>
   11edc:	mov	sl, r0
   11ee0:	cmp	r6, r0
   11ee4:	bcc	11ea8 <__assert_fail@plt+0x7a4>
   11ee8:	ldr	r0, [sp, #4]
   11eec:	bl	113ec <iswcntrl@plt>
   11ef0:	cmp	r0, #0
   11ef4:	bne	11eac <__assert_fail@plt+0x7a8>
   11ef8:	mov	r2, sl
   11efc:	mov	r1, r4
   11f00:	mov	r0, r5
   11f04:	bl	11344 <memmove@plt>
   11f08:	add	r5, r5, sl
   11f0c:	b	11eb8 <__assert_fail@plt+0x7b4>
   11f10:	mov	r5, r7
   11f14:	mov	r3, #0
   11f18:	strb	r3, [r5]
   11f1c:	add	sp, sp, #16
   11f20:	ldrd	r4, [sp]
   11f24:	ldrd	r6, [sp, #8]
   11f28:	ldrd	r8, [sp, #16]
   11f2c:	ldr	sl, [sp, #24]
   11f30:	add	sp, sp, #28
   11f34:	pop	{pc}		; (ldr pc, [sp], #4)
   11f38:	strd	r4, [sp, #-12]!
   11f3c:	str	lr, [sp, #8]
   11f40:	sub	sp, sp, #20
   11f44:	mvn	r4, #2
   11f48:	mvn	r5, #0
   11f4c:	cmp	r3, r5
   11f50:	cmpeq	r2, r4
   11f54:	movhi	r1, r0
   11f58:	orrls	r1, r0, #1
   11f5c:	cmp	r1, #0
   11f60:	beq	11fc4 <__assert_fail@plt+0x8c0>
   11f64:	mov	r4, r2
   11f68:	mov	r5, r3
   11f6c:	cmp	r0, #0
   11f70:	beq	11fd0 <__assert_fail@plt+0x8cc>
   11f74:	movw	r3, #832	; 0x340
   11f78:	movt	r3, #3
   11f7c:	ldrd	r0, [sp, #48]	; 0x30
   11f80:	strd	r0, [sp, #8]
   11f84:	ldrd	r0, [sp, #40]	; 0x28
   11f88:	strd	r0, [sp]
   11f8c:	ldr	r3, [r3, #28]
   11f90:	ldr	r2, [sp, #32]
   11f94:	add	r2, r2, #1
   11f98:	rsbs	r0, r4, #0
   11f9c:	rsc	r1, r5, #0
   11fa0:	bl	16c38 <__assert_fail@plt+0x5534>
   11fa4:	mov	r3, r0
   11fa8:	sub	r0, r0, #1
   11fac:	mov	r2, #45	; 0x2d
   11fb0:	strb	r2, [r3, #-1]
   11fb4:	add	sp, sp, #20
   11fb8:	ldrd	r4, [sp]
   11fbc:	add	sp, sp, #8
   11fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fc4:	movw	r0, #58036	; 0xe2b4
   11fc8:	movt	r0, #1
   11fcc:	b	11fb4 <__assert_fail@plt+0x8b0>
   11fd0:	movw	r3, #832	; 0x340
   11fd4:	movt	r3, #3
   11fd8:	ldrd	r0, [sp, #48]	; 0x30
   11fdc:	strd	r0, [sp, #8]
   11fe0:	ldrd	r0, [sp, #40]	; 0x28
   11fe4:	strd	r0, [sp]
   11fe8:	ldr	r3, [r3, #28]
   11fec:	ldr	r2, [sp, #32]
   11ff0:	mov	r0, r4
   11ff4:	mov	r1, r5
   11ff8:	bl	16c38 <__assert_fail@plt+0x5534>
   11ffc:	b	11fb4 <__assert_fail@plt+0x8b0>
   12000:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12004:	strd	r6, [sp, #8]
   12008:	strd	r8, [sp, #16]
   1200c:	strd	sl, [sp, #24]
   12010:	str	lr, [sp, #32]
   12014:	vpush	{d8-d11}
   12018:	sub	sp, sp, #924	; 0x39c
   1201c:	mov	r7, r0
   12020:	mov	sl, r1
   12024:	mov	fp, r2
   12028:	mov	r9, r3
   1202c:	ldrb	r6, [sp, #1000]	; 0x3e8
   12030:	ldr	r5, [sp, #1004]	; 0x3ec
   12034:	ldrb	r8, [sp, #1008]	; 0x3f0
   12038:	cmp	r6, #0
   1203c:	beq	12054 <__assert_fail@plt+0x950>
   12040:	movw	r3, #832	; 0x340
   12044:	movt	r3, #3
   12048:	ldrb	r3, [r3, #44]	; 0x2c
   1204c:	cmp	r3, #0
   12050:	bne	12be4 <__assert_fail@plt+0x14e0>
   12054:	ldrb	r3, [sp, #996]	; 0x3e4
   12058:	cmp	r3, #0
   1205c:	beq	12088 <__assert_fail@plt+0x984>
   12060:	movw	r3, #832	; 0x340
   12064:	movt	r3, #3
   12068:	ldrb	r3, [r3, #45]	; 0x2d
   1206c:	cmp	r3, #0
   12070:	bne	12088 <__assert_fail@plt+0x984>
   12074:	movw	r3, #832	; 0x340
   12078:	movt	r3, #3
   1207c:	ldrb	r3, [r3, #46]	; 0x2e
   12080:	cmp	r3, #0
   12084:	beq	12be4 <__assert_fail@plt+0x14e0>
   12088:	ldr	r0, [sp, #992]	; 0x3e0
   1208c:	bl	1188c <__assert_fail@plt+0x188>
   12090:	cmp	r0, #0
   12094:	beq	12be4 <__assert_fail@plt+0x14e0>
   12098:	ldr	r0, [sp, #992]	; 0x3e0
   1209c:	bl	11900 <__assert_fail@plt+0x1fc>
   120a0:	cmp	r0, #0
   120a4:	bne	12be4 <__assert_fail@plt+0x14e0>
   120a8:	clz	r4, r5
   120ac:	lsr	r4, r4, #5
   120b0:	cmp	sl, #0
   120b4:	movne	r3, r4
   120b8:	moveq	r3, #0
   120bc:	cmp	r3, #0
   120c0:	beq	120d0 <__assert_fail@plt+0x9cc>
   120c4:	ldrb	r3, [sl]
   120c8:	cmp	r3, #47	; 0x2f
   120cc:	bne	12be4 <__assert_fail@plt+0x14e0>
   120d0:	cmp	r9, #0
   120d4:	beq	12364 <__assert_fail@plt+0xc60>
   120d8:	cmp	r5, #0
   120dc:	beq	12374 <__assert_fail@plt+0xc70>
   120e0:	add	r1, sp, #864	; 0x360
   120e4:	ldrd	r2, [r5]
   120e8:	strd	r2, [r1]
   120ec:	ldrd	r2, [r5, #8]
   120f0:	strd	r2, [sp, #24]
   120f4:	strd	r2, [r1, #8]
   120f8:	ldrd	r2, [r5, #16]
   120fc:	strd	r2, [r1, #16]
   12100:	ldrd	r2, [r5, #24]
   12104:	strd	r2, [r1, #24]
   12108:	ldrd	r2, [r5, #32]
   1210c:	strd	r2, [r1, #32]
   12110:	ldrd	r2, [r5, #40]	; 0x28
   12114:	strd	r2, [r1, #40]	; 0x28
   12118:	ldrd	r2, [r5, #48]	; 0x30
   1211c:	strd	r2, [r1, #48]	; 0x30
   12120:	ldrd	r2, [sp, #24]
   12124:	orrs	r3, r2, r3
   12128:	bne	12140 <__assert_fail@plt+0xa3c>
   1212c:	movw	r3, #832	; 0x340
   12130:	movt	r3, #3
   12134:	ldrb	r3, [r3, #45]	; 0x2d
   12138:	cmp	r3, #0
   1213c:	beq	1256c <__assert_fail@plt+0xe68>
   12140:	cmp	r5, #0
   12144:	beq	12408 <__assert_fail@plt+0xd04>
   12148:	bl	11a60 <__assert_fail@plt+0x35c>
   1214c:	movw	r0, #58036	; 0xe2b4
   12150:	movt	r0, #1
   12154:	cmp	fp, #0
   12158:	moveq	fp, r0
   1215c:	cmp	r7, #0
   12160:	movne	r0, r7
   12164:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   12168:	mov	r5, r0
   1216c:	str	r0, [sp, #24]
   12170:	cmp	r8, #0
   12174:	beq	121a0 <__assert_fail@plt+0xa9c>
   12178:	bl	1153c <strlen@plt>
   1217c:	cmp	r0, #36	; 0x24
   12180:	bls	121a0 <__assert_fail@plt+0xa9c>
   12184:	sub	r0, r0, #36	; 0x24
   12188:	movw	r1, #58040	; 0xe2b8
   1218c:	movt	r1, #1
   12190:	add	r0, r5, r0
   12194:	bl	116f8 <strspn@plt>
   12198:	cmp	r0, #36	; 0x24
   1219c:	beq	12c04 <__assert_fail@plt+0x1500>
   121a0:	movw	r3, #58036	; 0xe2b4
   121a4:	movt	r3, #1
   121a8:	ldr	r2, [sp, #992]	; 0x3e0
   121ac:	cmp	r2, #0
   121b0:	moveq	r2, r3
   121b4:	str	r2, [sp, #992]	; 0x3e0
   121b8:	mov	r2, #1
   121bc:	mov	r3, #0
   121c0:	add	r1, sp, #744	; 0x2e8
   121c4:	strd	r2, [r1]
   121c8:	add	r1, sp, #736	; 0x2e0
   121cc:	strd	r2, [r1]
   121d0:	add	r3, sp, #904	; 0x388
   121d4:	ldrd	r6, [r3]
   121d8:	strd	r6, [sp, #40]	; 0x28
   121dc:	add	r3, sp, #752	; 0x2f0
   121e0:	strd	r6, [r3]
   121e4:	add	r3, sp, #912	; 0x390
   121e8:	ldrd	r8, [r3]
   121ec:	add	r3, sp, #776	; 0x308
   121f0:	strd	r8, [r3]
   121f4:	add	r3, sp, #760	; 0x2f8
   121f8:	strd	r8, [r3]
   121fc:	mov	r1, #0
   12200:	strb	r1, [sp, #768]	; 0x300
   12204:	mvn	r2, #0
   12208:	mvn	r3, #0
   1220c:	add	r0, sp, #784	; 0x310
   12210:	strd	r2, [r0]
   12214:	strb	r1, [sp, #792]	; 0x318
   12218:	mvn	r2, #2
   1221c:	mvn	r3, #0
   12220:	cmp	r9, r3
   12224:	cmpeq	r8, r2
   12228:	movls	r1, #1
   1222c:	cmp	r7, r3
   12230:	cmpeq	r6, r2
   12234:	movhi	r3, #0
   12238:	andls	r3, r1, #1
   1223c:	cmp	r3, #0
   12240:	bne	12584 <__assert_fail@plt+0xe80>
   12244:	ldr	r3, [sp, #864]	; 0x360
   12248:	str	r3, [sp, #60]	; 0x3c
   1224c:	ldr	ip, [sp, #868]	; 0x364
   12250:	str	r3, [sp, #800]	; 0x320
   12254:	str	ip, [sp, #804]	; 0x324
   12258:	movw	r3, #832	; 0x340
   1225c:	movt	r3, #3
   12260:	ldrd	r2, [r3, #32]
   12264:	add	r1, sp, #808	; 0x328
   12268:	strd	r2, [r1]
   1226c:	add	r3, sp, #872	; 0x368
   12270:	ldrd	r2, [r3]
   12274:	add	r1, sp, #816	; 0x330
   12278:	strd	r2, [sp, #32]
   1227c:	strd	r2, [r1]
   12280:	add	r3, sp, #888	; 0x378
   12284:	ldrd	r6, [r3]
   12288:	mov	r0, r6
   1228c:	mov	r1, r7
   12290:	strd	r0, [sp, #48]	; 0x30
   12294:	add	r3, sp, #824	; 0x338
   12298:	strd	r0, [r3]
   1229c:	add	r3, sp, #880	; 0x370
   122a0:	ldrd	r6, [r3]
   122a4:	add	r3, sp, #840	; 0x348
   122a8:	strd	r6, [r3]
   122ac:	mvn	r2, #2
   122b0:	mvn	r3, #0
   122b4:	cmp	r1, r3
   122b8:	cmpeq	r0, r2
   122bc:	ldrb	r1, [sp, #896]	; 0x380
   122c0:	movhi	r1, #0
   122c4:	andls	r1, r1, #1
   122c8:	str	r1, [sp, #56]	; 0x38
   122cc:	strb	r1, [sp, #832]	; 0x340
   122d0:	add	lr, sp, #848	; 0x350
   122d4:	mvn	r0, #0
   122d8:	mvn	r1, #0
   122dc:	strd	r0, [lr]
   122e0:	mov	lr, #0
   122e4:	strb	lr, [sp, #856]	; 0x358
   122e8:	cmp	r7, r3
   122ec:	cmpeq	r6, r2
   122f0:	movls	lr, #1
   122f4:	ldrd	r0, [sp, #32]
   122f8:	cmp	r1, r3
   122fc:	cmpeq	r0, r2
   12300:	movhi	lr, #0
   12304:	andls	lr, lr, #1
   12308:	cmp	lr, #0
   1230c:	bne	125ac <__assert_fail@plt+0xea8>
   12310:	movw	r3, #832	; 0x340
   12314:	movt	r3, #3
   12318:	ldrb	r3, [r3, #53]	; 0x35
   1231c:	tst	r4, r3
   12320:	bne	125f4 <__assert_fail@plt+0xef0>
   12324:	movw	r3, #832	; 0x340
   12328:	movt	r3, #3
   1232c:	ldr	r3, [r3, #8]
   12330:	cmp	r3, #0
   12334:	beq	12bdc <__assert_fail@plt+0x14d8>
   12338:	mov	r5, #0
   1233c:	movw	r4, #832	; 0x340
   12340:	movt	r4, #3
   12344:	mvn	r8, #2
   12348:	mvn	r9, #0
   1234c:	vldr	d9, [pc, #644]	; 125d8 <__assert_fail@plt+0xed4>
   12350:	vldr	d8, [pc, #648]	; 125e0 <__assert_fail@plt+0xedc>
   12354:	vldr	d10, [pc, #652]	; 125e8 <__assert_fail@plt+0xee4>
   12358:	str	sl, [sp, #32]
   1235c:	str	fp, [sp, #40]	; 0x28
   12360:	b	1289c <__assert_fail@plt+0x1198>
   12364:	cmp	sl, #0
   12368:	movne	r9, sl
   1236c:	moveq	r9, r7
   12370:	b	120d8 <__assert_fail@plt+0x9d4>
   12374:	add	r2, sp, #864	; 0x360
   12378:	mov	r1, r7
   1237c:	mov	r0, r9
   12380:	bl	157e4 <__assert_fail@plt+0x40e0>
   12384:	cmp	r0, #0
   12388:	beq	12460 <__assert_fail@plt+0xd5c>
   1238c:	cmp	r8, #0
   12390:	beq	1241c <__assert_fail@plt+0xd18>
   12394:	bl	1156c <__errno_location@plt>
   12398:	ldr	r3, [r0]
   1239c:	cmp	r3, #2
   123a0:	cmpne	r3, #13
   123a4:	bne	1241c <__assert_fail@plt+0xd18>
   123a8:	movw	r3, #832	; 0x340
   123ac:	movt	r3, #3
   123b0:	ldrb	r3, [r3, #45]	; 0x2d
   123b4:	cmp	r3, #0
   123b8:	beq	12be4 <__assert_fail@plt+0x14e0>
   123bc:	mov	r3, #0
   123c0:	strb	r3, [sp, #896]	; 0x380
   123c4:	mvn	r2, #0
   123c8:	mvn	r3, #0
   123cc:	add	r1, sp, #912	; 0x390
   123d0:	strd	r2, [r1]
   123d4:	add	r1, sp, #904	; 0x388
   123d8:	strd	r2, [r1]
   123dc:	add	r1, sp, #888	; 0x378
   123e0:	strd	r2, [r1]
   123e4:	add	r1, sp, #880	; 0x370
   123e8:	strd	r2, [r1]
   123ec:	add	r1, sp, #872	; 0x368
   123f0:	strd	r2, [r1]
   123f4:	add	r1, sp, #864	; 0x360
   123f8:	strd	r2, [r1]
   123fc:	movw	r3, #58036	; 0xe2b4
   12400:	movt	r3, #1
   12404:	str	r3, [sp, #992]	; 0x3e0
   12408:	movw	r3, #832	; 0x340
   1240c:	movt	r3, #3
   12410:	mov	r2, #1
   12414:	strb	r2, [r3, #52]	; 0x34
   12418:	b	12148 <__assert_fail@plt+0xa44>
   1241c:	bl	1156c <__errno_location@plt>
   12420:	ldr	r4, [r0]
   12424:	mov	r2, r9
   12428:	mov	r1, #3
   1242c:	mov	r0, #0
   12430:	bl	1aa80 <__assert_fail@plt+0x937c>
   12434:	mov	r3, r0
   12438:	movw	r2, #61932	; 0xf1ec
   1243c:	movt	r2, #1
   12440:	mov	r1, r4
   12444:	mov	r0, #0
   12448:	bl	11494 <error@plt>
   1244c:	movw	r3, #832	; 0x340
   12450:	movt	r3, #3
   12454:	mov	r2, #1
   12458:	str	r2, [r3, #48]	; 0x30
   1245c:	b	12be4 <__assert_fail@plt+0x14e0>
   12460:	cmp	r8, #0
   12464:	beq	12548 <__assert_fail@plt+0xe44>
   12468:	movw	r3, #832	; 0x340
   1246c:	movt	r3, #3
   12470:	ldrb	r3, [r3, #45]	; 0x2d
   12474:	cmp	r3, #0
   12478:	bne	124a4 <__assert_fail@plt+0xda0>
   1247c:	add	r3, sp, #872	; 0x368
   12480:	ldrd	r2, [r3]
   12484:	orrs	r3, r2, r3
   12488:	bne	12408 <__assert_fail@plt+0xd04>
   1248c:	movw	r3, #832	; 0x340
   12490:	movt	r3, #3
   12494:	ldrb	r3, [r3, #46]	; 0x2e
   12498:	cmp	r3, #0
   1249c:	bne	12408 <__assert_fail@plt+0xd04>
   124a0:	b	12be4 <__assert_fail@plt+0x14e0>
   124a4:	add	r2, sp, #80	; 0x50
   124a8:	mov	r1, r9
   124ac:	mov	r0, #3
   124b0:	bl	116bc <__xstat64@plt>
   124b4:	cmp	r0, #0
   124b8:	bne	12548 <__assert_fail@plt+0xe44>
   124bc:	ldrd	r0, [sp, #80]	; 0x50
   124c0:	bl	11e14 <__assert_fail@plt+0x710>
   124c4:	cmp	r0, #0
   124c8:	beq	12548 <__assert_fail@plt+0xe44>
   124cc:	ldr	r9, [r0, #8]
   124d0:	cmp	r9, #0
   124d4:	beq	12548 <__assert_fail@plt+0xe44>
   124d8:	mov	r1, r7
   124dc:	ldr	r0, [r9]
   124e0:	bl	11320 <strcmp@plt>
   124e4:	cmp	r0, #0
   124e8:	beq	12548 <__assert_fail@plt+0xe44>
   124ec:	ldrb	r3, [r9, #24]
   124f0:	ubfx	r3, r3, #1, #1
   124f4:	tst	r6, r3
   124f8:	bne	12548 <__assert_fail@plt+0xe44>
   124fc:	mov	r3, #0
   12500:	strb	r3, [sp, #896]	; 0x380
   12504:	mvn	r2, #0
   12508:	mvn	r3, #0
   1250c:	add	r1, sp, #912	; 0x390
   12510:	strd	r2, [r1]
   12514:	add	r1, sp, #904	; 0x388
   12518:	strd	r2, [r1]
   1251c:	add	r1, sp, #888	; 0x378
   12520:	strd	r2, [r1]
   12524:	add	r1, sp, #880	; 0x370
   12528:	strd	r2, [r1]
   1252c:	add	r1, sp, #872	; 0x368
   12530:	strd	r2, [r1]
   12534:	add	r1, sp, #864	; 0x360
   12538:	strd	r2, [r1]
   1253c:	movw	r3, #58036	; 0xe2b4
   12540:	movt	r3, #1
   12544:	str	r3, [sp, #992]	; 0x3e0
   12548:	add	r3, sp, #872	; 0x368
   1254c:	ldrd	r2, [r3]
   12550:	orrs	r3, r2, r3
   12554:	bne	12408 <__assert_fail@plt+0xd04>
   12558:	movw	r3, #832	; 0x340
   1255c:	movt	r3, #3
   12560:	ldrb	r3, [r3, #45]	; 0x2d
   12564:	cmp	r3, #0
   12568:	bne	12408 <__assert_fail@plt+0xd04>
   1256c:	movw	r3, #832	; 0x340
   12570:	movt	r3, #3
   12574:	ldrb	r3, [r3, #46]	; 0x2e
   12578:	cmp	r3, #0
   1257c:	bne	12140 <__assert_fail@plt+0xa3c>
   12580:	b	12be4 <__assert_fail@plt+0x14e0>
   12584:	subs	r2, r6, r8
   12588:	sbc	r3, r7, r9
   1258c:	str	r2, [sp, #784]	; 0x310
   12590:	str	r3, [sp, #788]	; 0x314
   12594:	cmp	r7, r9
   12598:	cmpeq	r6, r8
   1259c:	movcc	r3, #1
   125a0:	movcs	r3, #0
   125a4:	strb	r3, [sp, #792]	; 0x318
   125a8:	b	12244 <__assert_fail@plt+0xb40>
   125ac:	subs	r2, r0, r6
   125b0:	sbc	r3, r1, r7
   125b4:	str	r2, [sp, #848]	; 0x350
   125b8:	str	r3, [sp, #852]	; 0x354
   125bc:	cmp	r1, r7
   125c0:	cmpeq	r0, r6
   125c4:	movcc	r3, #1
   125c8:	movcs	r3, #0
   125cc:	strb	r3, [sp, #856]	; 0x358
   125d0:	b	12310 <__assert_fail@plt+0xc0c>
   125d4:	nop	{0}
   125d8:	andeq	r0, r0, r0
   125dc:	subsmi	r0, r9, r0
   125e0:	andeq	r0, r0, r0
   125e4:	svccc	0x00f00000	; IMB
	...
   125f0:	andeq	lr, r1, r4, lsl r1
   125f4:	mvn	r2, #2
   125f8:	mvn	r3, #0
   125fc:	ldrd	r0, [sp, #40]	; 0x28
   12600:	cmp	r1, r3
   12604:	cmpeq	r0, r2
   12608:	bhi	1262c <__assert_fail@plt+0xf28>
   1260c:	movw	r3, #832	; 0x340
   12610:	movt	r3, #3
   12614:	ldr	r2, [r3, #96]	; 0x60
   12618:	ldr	lr, [r3, #100]	; 0x64
   1261c:	adds	r2, r2, r0
   12620:	adc	lr, lr, r1
   12624:	str	r2, [r3, #96]	; 0x60
   12628:	str	lr, [r3, #100]	; 0x64
   1262c:	mvn	r2, #2
   12630:	mvn	r3, #0
   12634:	cmp	r9, r3
   12638:	cmpeq	r8, r2
   1263c:	bhi	12660 <__assert_fail@plt+0xf5c>
   12640:	movw	r3, #832	; 0x340
   12644:	movt	r3, #3
   12648:	ldr	r2, [r3, #104]	; 0x68
   1264c:	ldr	lr, [r3, #108]	; 0x6c
   12650:	adds	r2, r2, r8
   12654:	adc	lr, lr, r9
   12658:	str	r2, [r3, #104]	; 0x68
   1265c:	str	lr, [r3, #108]	; 0x6c
   12660:	mvn	r2, #2
   12664:	mvn	r3, #0
   12668:	ldrd	r0, [sp, #32]
   1266c:	cmp	r1, r3
   12670:	cmpeq	r0, r2
   12674:	bhi	126ac <__assert_fail@plt+0xfa8>
   12678:	movw	r3, #832	; 0x340
   1267c:	movt	r3, #3
   12680:	ldr	r4, [sp, #60]	; 0x3c
   12684:	mul	r2, r4, r1
   12688:	mla	r2, ip, r0, r2
   1268c:	umull	r4, r5, r4, r0
   12690:	add	r5, r2, r5
   12694:	ldr	r2, [r3, #64]	; 0x40
   12698:	ldr	lr, [r3, #68]	; 0x44
   1269c:	adds	r2, r2, r4
   126a0:	adc	lr, lr, r5
   126a4:	str	r2, [r3, #64]	; 0x40
   126a8:	str	lr, [r3, #68]	; 0x44
   126ac:	mvn	r2, #2
   126b0:	mvn	r3, #0
   126b4:	cmp	r7, r3
   126b8:	cmpeq	r6, r2
   126bc:	bhi	126f4 <__assert_fail@plt+0xff0>
   126c0:	movw	lr, #832	; 0x340
   126c4:	movt	lr, #3
   126c8:	ldr	r3, [sp, #60]	; 0x3c
   126cc:	mul	r4, r3, r7
   126d0:	mla	r4, ip, r6, r4
   126d4:	umull	r2, r3, r3, r6
   126d8:	add	r3, r4, r3
   126dc:	ldr	r4, [lr, #72]	; 0x48
   126e0:	ldr	r5, [lr, #76]	; 0x4c
   126e4:	adds	r4, r4, r2
   126e8:	adc	r5, r5, r3
   126ec:	str	r4, [lr, #72]	; 0x48
   126f0:	str	r5, [lr, #76]	; 0x4c
   126f4:	mvn	r2, #2
   126f8:	mvn	r3, #0
   126fc:	ldrd	r0, [sp, #48]	; 0x30
   12700:	cmp	r1, r3
   12704:	cmpeq	r0, r2
   12708:	bhi	12324 <__assert_fail@plt+0xc20>
   1270c:	ldr	lr, [sp, #60]	; 0x3c
   12710:	mul	r3, lr, r1
   12714:	mla	ip, ip, r0, r3
   12718:	umull	r4, r5, lr, r0
   1271c:	add	r5, ip, r5
   12720:	movw	r3, #832	; 0x340
   12724:	movt	r3, #3
   12728:	ldrb	r3, [r3, #88]	; 0x58
   1272c:	ldr	r2, [sp, #56]	; 0x38
   12730:	cmp	r2, r3
   12734:	beq	127c8 <__assert_fail@plt+0x10c4>
   12738:	cmp	r3, #0
   1273c:	beq	12758 <__assert_fail@plt+0x1054>
   12740:	movw	r0, #832	; 0x340
   12744:	movt	r0, #3
   12748:	ldrd	r2, [r0, #80]	; 0x50
   1274c:	rsbs	r2, r2, #0
   12750:	rsc	r3, r3, #0
   12754:	strd	r2, [r0, #80]	; 0x50
   12758:	ldr	r3, [sp, #56]	; 0x38
   1275c:	cmp	r3, #0
   12760:	beq	1276c <__assert_fail@plt+0x1068>
   12764:	rsbs	r4, r4, #0
   12768:	rsc	r5, r5, #0
   1276c:	movw	r3, #832	; 0x340
   12770:	movt	r3, #3
   12774:	ldrd	r6, [r3, #80]	; 0x50
   12778:	cmp	r7, r5
   1277c:	cmpeq	r6, r4
   12780:	bls	127ec <__assert_fail@plt+0x10e8>
   12784:	mov	r1, r3
   12788:	subs	r2, r6, r4
   1278c:	sbc	r3, r7, r5
   12790:	str	r2, [r1, #80]	; 0x50
   12794:	str	r3, [r1, #84]	; 0x54
   12798:	movw	r3, #832	; 0x340
   1279c:	movt	r3, #3
   127a0:	ldrb	r3, [r3, #88]	; 0x58
   127a4:	cmp	r3, #0
   127a8:	beq	12324 <__assert_fail@plt+0xc20>
   127ac:	movw	r1, #832	; 0x340
   127b0:	movt	r1, #3
   127b4:	ldrd	r2, [r1, #80]	; 0x50
   127b8:	rsbs	r2, r2, #0
   127bc:	rsc	r3, r3, #0
   127c0:	strd	r2, [r1, #80]	; 0x50
   127c4:	b	12324 <__assert_fail@plt+0xc20>
   127c8:	movw	r3, #832	; 0x340
   127cc:	movt	r3, #3
   127d0:	ldr	r2, [r3, #80]	; 0x50
   127d4:	ldr	r1, [r3, #84]	; 0x54
   127d8:	adds	r2, r2, r4
   127dc:	adc	r1, r1, r5
   127e0:	str	r2, [r3, #80]	; 0x50
   127e4:	str	r1, [r3, #84]	; 0x54
   127e8:	b	12324 <__assert_fail@plt+0xc20>
   127ec:	movw	r0, #832	; 0x340
   127f0:	movt	r0, #3
   127f4:	subs	r2, r4, r6
   127f8:	sbc	r3, r5, r7
   127fc:	str	r2, [r0, #80]	; 0x50
   12800:	str	r3, [r0, #84]	; 0x54
   12804:	ldr	r3, [sp, #56]	; 0x38
   12808:	strb	r3, [r0, #88]	; 0x58
   1280c:	b	12798 <__assert_fail@plt+0x1094>
   12810:	ldr	r3, [pc, #-552]	; 125f0 <__assert_fail@plt+0xeec>
   12814:	movw	r2, #1158	; 0x486
   12818:	movw	r1, #57992	; 0xe288
   1281c:	movt	r1, #1
   12820:	movw	r0, #58064	; 0xe2d0
   12824:	movt	r0, #1
   12828:	bl	11704 <__assert_fail@plt>
   1282c:	add	sl, sp, #736	; 0x2e0
   12830:	b	128c8 <__assert_fail@plt+0x11c4>
   12834:	add	sl, sp, #800	; 0x320
   12838:	b	128c8 <__assert_fail@plt+0x11c4>
   1283c:	ldr	r0, [sp, #24]
   12840:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   12844:	str	r0, [sp, #76]	; 0x4c
   12848:	ldr	r0, [sp, #76]	; 0x4c
   1284c:	bl	11abc <__assert_fail@plt+0x3b8>
   12850:	mov	r1, #0
   12854:	ldr	r0, [sp, #76]	; 0x4c
   12858:	bl	17e2c <__assert_fail@plt+0x6728>
   1285c:	ldr	r3, [r4, #12]
   12860:	ldr	r2, [r3, fp]
   12864:	ldr	r3, [r2, #16]
   12868:	cmp	r3, r0
   1286c:	movcs	r0, r3
   12870:	str	r0, [r2, #16]
   12874:	ldr	r3, [r4, #16]
   12878:	sub	r3, r3, #-1073741823	; 0xc0000001
   1287c:	ldr	r2, [r4, #20]
   12880:	ldr	r3, [r2, r3, lsl #2]
   12884:	ldr	r2, [sp, #76]	; 0x4c
   12888:	str	r2, [r3, fp]
   1288c:	add	r5, r5, #1
   12890:	ldr	r3, [r4, #8]
   12894:	cmp	r3, r5
   12898:	bls	12bdc <__assert_fail@plt+0x14d8>
   1289c:	lsl	fp, r5, #2
   128a0:	ldr	r3, [r4, #12]
   128a4:	ldr	r2, [r3, r5, lsl #2]
   128a8:	ldr	r3, [r2, #8]
   128ac:	cmp	r3, #1
   128b0:	beq	1282c <__assert_fail@plt+0x1128>
   128b4:	cmp	r3, #0
   128b8:	beq	12834 <__assert_fail@plt+0x1130>
   128bc:	cmp	r3, #2
   128c0:	bne	12810 <__assert_fail@plt+0x110c>
   128c4:	mov	sl, #0
   128c8:	ldr	r3, [r2]
   128cc:	cmp	r3, #11
   128d0:	ldrls	pc, [pc, r3, lsl #2]
   128d4:	b	12bc0 <__assert_fail@plt+0x14bc>
   128d8:	andeq	r2, r1, ip, lsr r8
   128dc:	andeq	r2, r1, r8, lsl #18
   128e0:	andeq	r2, r1, r8, lsl r9
   128e4:	andeq	r2, r1, r8, asr #18
   128e8:	andeq	r2, r1, r8, ror r9
   128ec:	andeq	r2, r1, r8, lsr #19
   128f0:	andeq	r2, r1, r8, lsl r9
   128f4:	andeq	r2, r1, r8, asr #18
   128f8:	andeq	r2, r1, r8, ror r9
   128fc:	andeq	r2, r1, r8, lsr #19
   12900:			; <UNDEFINED> instruction: 0x00012bb0
   12904:	andeq	r2, r1, r0, lsr #23
   12908:	ldr	r0, [sp, #992]	; 0x3e0
   1290c:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   12910:	str	r0, [sp, #76]	; 0x4c
   12914:	b	12848 <__assert_fail@plt+0x1144>
   12918:	ldrd	r2, [sl, #16]
   1291c:	ldrd	r0, [sl, #8]
   12920:	strd	r0, [sp, #16]
   12924:	ldrd	r0, [sl]
   12928:	strd	r0, [sp, #8]
   1292c:	add	r1, sp, #80	; 0x50
   12930:	str	r1, [sp]
   12934:	mov	r0, #0
   12938:	bl	11f38 <__assert_fail@plt+0x834>
   1293c:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   12940:	str	r0, [sp, #76]	; 0x4c
   12944:	b	12848 <__assert_fail@plt+0x1144>
   12948:	ldrd	r2, [sl, #48]	; 0x30
   1294c:	ldrb	r0, [sl, #56]	; 0x38
   12950:	ldrd	r6, [sl, #8]
   12954:	strd	r6, [sp, #16]
   12958:	ldrd	r6, [sl]
   1295c:	strd	r6, [sp, #8]
   12960:	add	r1, sp, #80	; 0x50
   12964:	str	r1, [sp]
   12968:	bl	11f38 <__assert_fail@plt+0x834>
   1296c:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   12970:	str	r0, [sp, #76]	; 0x4c
   12974:	b	12848 <__assert_fail@plt+0x1144>
   12978:	ldrd	r2, [sl, #24]
   1297c:	ldrb	r0, [sl, #32]
   12980:	ldrd	r6, [sl, #8]
   12984:	strd	r6, [sp, #16]
   12988:	ldrd	r6, [sl]
   1298c:	strd	r6, [sp, #8]
   12990:	add	r1, sp, #80	; 0x50
   12994:	str	r1, [sp]
   12998:	bl	11f38 <__assert_fail@plt+0x834>
   1299c:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   129a0:	str	r0, [sp, #76]	; 0x4c
   129a4:	b	12848 <__assert_fail@plt+0x1144>
   129a8:	ldrd	r0, [sl, #48]	; 0x30
   129ac:	cmp	r1, r9
   129b0:	cmpeq	r0, r8
   129b4:	bhi	12b80 <__assert_fail@plt+0x147c>
   129b8:	ldrd	r6, [sl, #24]
   129bc:	cmp	r7, r9
   129c0:	cmpeq	r6, r8
   129c4:	bhi	12b80 <__assert_fail@plt+0x147c>
   129c8:	ldrb	ip, [sl, #56]	; 0x38
   129cc:	eor	lr, ip, #1
   129d0:	add	r3, pc, #592	; 0x250
   129d4:	ldrd	r2, [r3]
   129d8:	cmp	r1, r3
   129dc:	cmpeq	r0, r2
   129e0:	movhi	r3, #0
   129e4:	andls	r3, lr, #1
   129e8:	cmp	r3, #0
   129ec:	bne	12ab8 <__assert_fail@plt+0x13b4>
   129f0:	cmp	ip, #0
   129f4:	beq	12af0 <__assert_fail@plt+0x13ec>
   129f8:	rsbs	r0, r0, #0
   129fc:	rsc	r1, r1, #0
   12a00:	bl	1de58 <__assert_fail@plt+0xc754>
   12a04:	vmov	d7, r0, r1
   12a08:	vneg.f64	d11, d7
   12a0c:	ldrb	r3, [sl, #32]
   12a10:	cmp	r3, #0
   12a14:	beq	12b6c <__assert_fail@plt+0x1468>
   12a18:	rsbs	r0, r6, #0
   12a1c:	rsc	r1, r7, #0
   12a20:	bl	1de58 <__assert_fail@plt+0xc754>
   12a24:	vmov	d7, r0, r1
   12a28:	vneg.f64	d6, d7
   12a2c:	vadd.f64	d6, d11, d6
   12a30:	vcmp.f64	d6, #0.0
   12a34:	vmrs	APSR_nzcv, fpscr
   12a38:	beq	12b80 <__assert_fail@plt+0x147c>
   12a3c:	vmul.f64	d11, d11, d9
   12a40:	vdiv.f64	d7, d11, d6
   12a44:	vcvt.s32.f64	s12, d7
   12a48:	vcvt.f64.s32	d6, s12
   12a4c:	vsub.f64	d5, d6, d8
   12a50:	vcmpe.f64	d5, d7
   12a54:	vmrs	APSR_nzcv, fpscr
   12a58:	bpl	12a80 <__assert_fail@plt+0x137c>
   12a5c:	vadd.f64	d5, d6, d8
   12a60:	vcmpe.f64	d5, d7
   12a64:	vmrs	APSR_nzcv, fpscr
   12a68:	blt	12a80 <__assert_fail@plt+0x137c>
   12a6c:	vcmpe.f64	d7, d6
   12a70:	vmrs	APSR_nzcv, fpscr
   12a74:	vmovle.f64	d7, d10
   12a78:	vmovgt.f64	d7, d8
   12a7c:	vadd.f64	d7, d7, d6
   12a80:	vcmpe.f64	d7, #0.0
   12a84:	vmrs	APSR_nzcv, fpscr
   12a88:	blt	12b80 <__assert_fail@plt+0x147c>
   12a8c:	vstr	d7, [sp]
   12a90:	movw	r2, #58084	; 0xe2e4
   12a94:	movt	r2, #1
   12a98:	mov	r1, #1
   12a9c:	add	r0, sp, #76	; 0x4c
   12aa0:	bl	114b8 <__asprintf_chk@plt>
   12aa4:	cmn	r0, #1
   12aa8:	bne	12b90 <__assert_fail@plt+0x148c>
   12aac:	mov	r3, #0
   12ab0:	str	r3, [sp, #76]	; 0x4c
   12ab4:	bl	1b910 <__assert_fail@plt+0xa20c>
   12ab8:	adds	r3, r0, r6
   12abc:	str	r3, [sp, #64]	; 0x40
   12ac0:	adc	r3, r1, r7
   12ac4:	str	r3, [sp, #68]	; 0x44
   12ac8:	ldrd	r2, [sp, #64]	; 0x40
   12acc:	orrs	ip, r2, r3
   12ad0:	beq	12af0 <__assert_fail@plt+0x13ec>
   12ad4:	cmp	r1, r3
   12ad8:	cmpeq	r0, r2
   12adc:	movhi	r2, #1
   12ae0:	movls	r2, #0
   12ae4:	ldrb	r3, [sl, #32]
   12ae8:	cmp	r2, r3
   12aec:	beq	12afc <__assert_fail@plt+0x13f8>
   12af0:	bl	1de58 <__assert_fail@plt+0xc754>
   12af4:	vmov	d11, r0, r1
   12af8:	b	12a0c <__assert_fail@plt+0x1308>
   12afc:	adds	r3, r0, r0
   12b00:	adc	r2, r1, r1
   12b04:	adds	r3, r3, r0
   12b08:	adc	r2, r2, r1
   12b0c:	lsl	sl, r2, #5
   12b10:	orr	sl, sl, r3, lsr #27
   12b14:	lsl	r6, r3, #5
   12b18:	adds	r3, r3, r6
   12b1c:	adc	r2, r2, sl
   12b20:	adds	r6, r3, r0
   12b24:	adc	sl, r2, r1
   12b28:	ldrd	r2, [sp, #64]	; 0x40
   12b2c:	mov	r0, r6
   12b30:	mov	r1, sl
   12b34:	bl	1decc <__assert_fail@plt+0xc7c8>
   12b38:	orrs	r3, r2, r3
   12b3c:	movne	r7, #1
   12b40:	moveq	r7, #0
   12b44:	ldrd	r2, [sp, #64]	; 0x40
   12b48:	mov	r0, r6
   12b4c:	mov	r1, sl
   12b50:	bl	1decc <__assert_fail@plt+0xc7c8>
   12b54:	adds	r0, r7, r0
   12b58:	mov	r3, #0
   12b5c:	adc	r1, r3, r1
   12b60:	bl	1de58 <__assert_fail@plt+0xc754>
   12b64:	vmov	d7, r0, r1
   12b68:	b	12a80 <__assert_fail@plt+0x137c>
   12b6c:	mov	r0, r6
   12b70:	mov	r1, r7
   12b74:	bl	1de58 <__assert_fail@plt+0xc754>
   12b78:	vmov	d6, r0, r1
   12b7c:	b	12a2c <__assert_fail@plt+0x1328>
   12b80:	movw	r0, #58036	; 0xe2b4
   12b84:	movt	r0, #1
   12b88:	bl	113c8 <strdup@plt>
   12b8c:	str	r0, [sp, #76]	; 0x4c
   12b90:	ldr	r3, [sp, #76]	; 0x4c
   12b94:	cmp	r3, #0
   12b98:	bne	12848 <__assert_fail@plt+0x1144>
   12b9c:	b	12ab4 <__assert_fail@plt+0x13b0>
   12ba0:	ldr	r0, [sp, #40]	; 0x28
   12ba4:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   12ba8:	str	r0, [sp, #76]	; 0x4c
   12bac:	b	12848 <__assert_fail@plt+0x1144>
   12bb0:	ldr	r0, [sp, #32]
   12bb4:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   12bb8:	str	r0, [sp, #76]	; 0x4c
   12bbc:	b	12848 <__assert_fail@plt+0x1144>
   12bc0:	ldr	r3, [pc, #104]	; 12c30 <__assert_fail@plt+0x152c>
   12bc4:	movw	r2, #1260	; 0x4ec
   12bc8:	movw	r1, #57992	; 0xe288
   12bcc:	movt	r1, #1
   12bd0:	movw	r0, #58092	; 0xe2ec
   12bd4:	movt	r0, #1
   12bd8:	bl	11704 <__assert_fail@plt>
   12bdc:	ldr	r0, [sp, #24]
   12be0:	bl	15784 <__assert_fail@plt+0x4080>
   12be4:	add	sp, sp, #924	; 0x39c
   12be8:	vpop	{d8-d11}
   12bec:	ldrd	r4, [sp]
   12bf0:	ldrd	r6, [sp, #8]
   12bf4:	ldrd	r8, [sp, #16]
   12bf8:	ldrd	sl, [sp, #24]
   12bfc:	add	sp, sp, #32
   12c00:	pop	{pc}		; (ldr pc, [sp], #4)
   12c04:	mov	r1, #0
   12c08:	ldr	r0, [sp, #24]
   12c0c:	bl	14d2c <__assert_fail@plt+0x3628>
   12c10:	subs	r5, r0, #0
   12c14:	beq	121a0 <__assert_fail@plt+0xa9c>
   12c18:	ldr	r0, [sp, #24]
   12c1c:	bl	15784 <__assert_fail@plt+0x4080>
   12c20:	str	r5, [sp, #24]
   12c24:	b	121a0 <__assert_fail@plt+0xa9c>
   12c28:			; <UNDEFINED> instruction: 0xf5c28f5c
   12c2c:	addeq	r5, pc, #40, 24	; 0x2800
   12c30:	andeq	lr, r1, r4, lsl r1
   12c34:	push	{lr}		; (str lr, [sp, #-4]!)
   12c38:	sub	sp, sp, #60	; 0x3c
   12c3c:	subs	r5, r0, #0
   12c40:	beq	12c88 <__assert_fail@plt+0x1584>
   12c44:	movw	r3, #816	; 0x330
   12c48:	movt	r3, #3
   12c4c:	ldr	r4, [r3]
   12c50:	mov	r2, #5
   12c54:	movw	r1, #58116	; 0xe304
   12c58:	movt	r1, #1
   12c5c:	mov	r0, #0
   12c60:	bl	113bc <dcgettext@plt>
   12c64:	movw	r3, #960	; 0x3c0
   12c68:	movt	r3, #3
   12c6c:	ldr	r3, [r3]
   12c70:	mov	r2, r0
   12c74:	mov	r1, #1
   12c78:	mov	r0, r4
   12c7c:	bl	115c0 <__fprintf_chk@plt>
   12c80:	mov	r0, r5
   12c84:	bl	11530 <exit@plt>
   12c88:	mov	r2, #5
   12c8c:	movw	r1, #58156	; 0xe32c
   12c90:	movt	r1, #1
   12c94:	mov	r0, #0
   12c98:	bl	113bc <dcgettext@plt>
   12c9c:	movw	r3, #960	; 0x3c0
   12ca0:	movt	r3, #3
   12ca4:	ldr	r2, [r3]
   12ca8:	mov	r1, r0
   12cac:	mov	r0, #1
   12cb0:	bl	1159c <__printf_chk@plt>
   12cb4:	mov	r2, #5
   12cb8:	movw	r1, #58192	; 0xe350
   12cbc:	movt	r1, #1
   12cc0:	mov	r0, #0
   12cc4:	bl	113bc <dcgettext@plt>
   12cc8:	movw	r4, #820	; 0x334
   12ccc:	movt	r4, #3
   12cd0:	ldr	r1, [r4]
   12cd4:	bl	112f0 <fputs_unlocked@plt>
   12cd8:	mov	r2, #5
   12cdc:	movw	r1, #58292	; 0xe3b4
   12ce0:	movt	r1, #1
   12ce4:	mov	r0, #0
   12ce8:	bl	113bc <dcgettext@plt>
   12cec:	ldr	r1, [r4]
   12cf0:	bl	112f0 <fputs_unlocked@plt>
   12cf4:	mov	r2, #5
   12cf8:	movw	r1, #58368	; 0xe400
   12cfc:	movt	r1, #1
   12d00:	mov	r0, #0
   12d04:	bl	113bc <dcgettext@plt>
   12d08:	ldr	r1, [r4]
   12d0c:	bl	112f0 <fputs_unlocked@plt>
   12d10:	mov	r2, #5
   12d14:	movw	r1, #58780	; 0xe59c
   12d18:	movt	r1, #1
   12d1c:	mov	r0, #0
   12d20:	bl	113bc <dcgettext@plt>
   12d24:	ldr	r1, [r4]
   12d28:	bl	112f0 <fputs_unlocked@plt>
   12d2c:	mov	r2, #5
   12d30:	movw	r1, #59036	; 0xe69c
   12d34:	movt	r1, #1
   12d38:	mov	r0, #0
   12d3c:	bl	113bc <dcgettext@plt>
   12d40:	ldr	r1, [r4]
   12d44:	bl	112f0 <fputs_unlocked@plt>
   12d48:	mov	r2, #5
   12d4c:	movw	r1, #59304	; 0xe7a8
   12d50:	movt	r1, #1
   12d54:	mov	r0, #0
   12d58:	bl	113bc <dcgettext@plt>
   12d5c:	ldr	r1, [r4]
   12d60:	bl	112f0 <fputs_unlocked@plt>
   12d64:	mov	r2, #5
   12d68:	movw	r1, #59436	; 0xe82c
   12d6c:	movt	r1, #1
   12d70:	mov	r0, #0
   12d74:	bl	113bc <dcgettext@plt>
   12d78:	ldr	r1, [r4]
   12d7c:	bl	112f0 <fputs_unlocked@plt>
   12d80:	mov	r2, #5
   12d84:	movw	r1, #59660	; 0xe90c
   12d88:	movt	r1, #1
   12d8c:	mov	r0, #0
   12d90:	bl	113bc <dcgettext@plt>
   12d94:	ldr	r1, [r4]
   12d98:	bl	112f0 <fputs_unlocked@plt>
   12d9c:	mov	r2, #5
   12da0:	movw	r1, #59708	; 0xe93c
   12da4:	movt	r1, #1
   12da8:	mov	r0, #0
   12dac:	bl	113bc <dcgettext@plt>
   12db0:	ldr	r1, [r4]
   12db4:	bl	112f0 <fputs_unlocked@plt>
   12db8:	mov	r2, #5
   12dbc:	movw	r1, #59764	; 0xe974
   12dc0:	movt	r1, #1
   12dc4:	mov	r0, #0
   12dc8:	bl	113bc <dcgettext@plt>
   12dcc:	movw	r2, #59988	; 0xea54
   12dd0:	movt	r2, #1
   12dd4:	mov	r1, r0
   12dd8:	mov	r0, #1
   12ddc:	bl	1159c <__printf_chk@plt>
   12de0:	mov	r2, #5
   12de4:	movw	r1, #59992	; 0xea58
   12de8:	movt	r1, #1
   12dec:	mov	r0, #0
   12df0:	bl	113bc <dcgettext@plt>
   12df4:	ldr	r1, [r4]
   12df8:	bl	112f0 <fputs_unlocked@plt>
   12dfc:	mov	r2, #5
   12e00:	movw	r1, #60204	; 0xeb2c
   12e04:	movt	r1, #1
   12e08:	mov	r0, #0
   12e0c:	bl	113bc <dcgettext@plt>
   12e10:	ldr	r1, [r4]
   12e14:	bl	112f0 <fputs_unlocked@plt>
   12e18:	movw	r3, #57608	; 0xe108
   12e1c:	movt	r3, #1
   12e20:	add	r0, r3, #20
   12e24:	ldr	r1, [r3, #20]
   12e28:	ldr	r3, [r3, #24]
   12e2c:	str	r1, [sp]
   12e30:	str	r3, [sp, #4]
   12e34:	ldrd	r2, [r0, #8]
   12e38:	strd	r2, [sp, #8]
   12e3c:	ldrd	r2, [r0, #16]
   12e40:	strd	r2, [sp, #16]
   12e44:	ldrd	r2, [r0, #24]
   12e48:	strd	r2, [sp, #24]
   12e4c:	ldrd	r2, [r0, #32]
   12e50:	strd	r2, [sp, #32]
   12e54:	ldrd	r2, [r0, #40]	; 0x28
   12e58:	strd	r2, [sp, #40]	; 0x28
   12e5c:	ldrd	r2, [r0, #48]	; 0x30
   12e60:	strd	r2, [sp, #48]	; 0x30
   12e64:	cmp	r1, #0
   12e68:	moveq	r4, sp
   12e6c:	beq	12e98 <__assert_fail@plt+0x1794>
   12e70:	mov	r4, sp
   12e74:	movw	r6, #58112	; 0xe300
   12e78:	movt	r6, #1
   12e7c:	mov	r0, r6
   12e80:	bl	11320 <strcmp@plt>
   12e84:	cmp	r0, #0
   12e88:	beq	12e98 <__assert_fail@plt+0x1794>
   12e8c:	ldr	r1, [r4, #8]!
   12e90:	cmp	r1, #0
   12e94:	bne	12e7c <__assert_fail@plt+0x1778>
   12e98:	ldr	r4, [r4, #4]
   12e9c:	cmp	r4, #0
   12ea0:	beq	12ffc <__assert_fail@plt+0x18f8>
   12ea4:	mov	r2, #5
   12ea8:	movw	r1, #60424	; 0xec08
   12eac:	movt	r1, #1
   12eb0:	mov	r0, #0
   12eb4:	bl	113bc <dcgettext@plt>
   12eb8:	movw	r3, #60448	; 0xec20
   12ebc:	movt	r3, #1
   12ec0:	movw	r2, #60488	; 0xec48
   12ec4:	movt	r2, #1
   12ec8:	mov	r1, r0
   12ecc:	mov	r0, #1
   12ed0:	bl	1159c <__printf_chk@plt>
   12ed4:	mov	r1, #0
   12ed8:	mov	r0, #5
   12edc:	bl	11614 <setlocale@plt>
   12ee0:	cmp	r0, #0
   12ee4:	beq	12f00 <__assert_fail@plt+0x17fc>
   12ee8:	mov	r2, #3
   12eec:	movw	r1, #60504	; 0xec58
   12ef0:	movt	r1, #1
   12ef4:	bl	116d4 <strncmp@plt>
   12ef8:	cmp	r0, #0
   12efc:	bne	12f7c <__assert_fail@plt+0x1878>
   12f00:	mov	r2, #5
   12f04:	movw	r1, #60580	; 0xeca4
   12f08:	movt	r1, #1
   12f0c:	mov	r0, #0
   12f10:	bl	113bc <dcgettext@plt>
   12f14:	movw	r6, #58112	; 0xe300
   12f18:	movt	r6, #1
   12f1c:	mov	r3, r6
   12f20:	movw	r2, #60448	; 0xec20
   12f24:	movt	r2, #1
   12f28:	mov	r1, r0
   12f2c:	mov	r0, #1
   12f30:	bl	1159c <__printf_chk@plt>
   12f34:	mov	r2, #5
   12f38:	movw	r1, #60608	; 0xecc0
   12f3c:	movt	r1, #1
   12f40:	mov	r0, #0
   12f44:	bl	113bc <dcgettext@plt>
   12f48:	mov	r1, r0
   12f4c:	movw	r2, #61300	; 0xef74
   12f50:	movt	r2, #1
   12f54:	movw	r3, #62044	; 0xf25c
   12f58:	movt	r3, #1
   12f5c:	cmp	r4, r6
   12f60:	moveq	r3, r2
   12f64:	mov	r2, r4
   12f68:	mov	r0, #1
   12f6c:	bl	1159c <__printf_chk@plt>
   12f70:	b	12c80 <__assert_fail@plt+0x157c>
   12f74:	movw	r4, #58112	; 0xe300
   12f78:	movt	r4, #1
   12f7c:	mov	r2, #5
   12f80:	movw	r1, #60508	; 0xec5c
   12f84:	movt	r1, #1
   12f88:	mov	r0, #0
   12f8c:	bl	113bc <dcgettext@plt>
   12f90:	movw	r3, #820	; 0x334
   12f94:	movt	r3, #3
   12f98:	ldr	r1, [r3]
   12f9c:	bl	112f0 <fputs_unlocked@plt>
   12fa0:	b	12f00 <__assert_fail@plt+0x17fc>
   12fa4:	mov	r2, #5
   12fa8:	movw	r1, #60580	; 0xeca4
   12fac:	movt	r1, #1
   12fb0:	mov	r0, #0
   12fb4:	bl	113bc <dcgettext@plt>
   12fb8:	movw	r4, #58112	; 0xe300
   12fbc:	movt	r4, #1
   12fc0:	mov	r3, r4
   12fc4:	movw	r2, #60448	; 0xec20
   12fc8:	movt	r2, #1
   12fcc:	mov	r1, r0
   12fd0:	mov	r0, #1
   12fd4:	bl	1159c <__printf_chk@plt>
   12fd8:	mov	r2, #5
   12fdc:	movw	r1, #60608	; 0xecc0
   12fe0:	movt	r1, #1
   12fe4:	mov	r0, #0
   12fe8:	bl	113bc <dcgettext@plt>
   12fec:	mov	r1, r0
   12ff0:	movw	r3, #61300	; 0xef74
   12ff4:	movt	r3, #1
   12ff8:	b	12f64 <__assert_fail@plt+0x1860>
   12ffc:	mov	r2, #5
   13000:	movw	r1, #60424	; 0xec08
   13004:	movt	r1, #1
   13008:	mov	r0, #0
   1300c:	bl	113bc <dcgettext@plt>
   13010:	movw	r3, #60448	; 0xec20
   13014:	movt	r3, #1
   13018:	movw	r2, #60488	; 0xec48
   1301c:	movt	r2, #1
   13020:	mov	r1, r0
   13024:	mov	r0, #1
   13028:	bl	1159c <__printf_chk@plt>
   1302c:	mov	r1, #0
   13030:	mov	r0, #5
   13034:	bl	11614 <setlocale@plt>
   13038:	cmp	r0, #0
   1303c:	beq	12fa4 <__assert_fail@plt+0x18a0>
   13040:	mov	r2, #3
   13044:	movw	r1, #60504	; 0xec58
   13048:	movt	r1, #1
   1304c:	bl	116d4 <strncmp@plt>
   13050:	cmp	r0, #0
   13054:	bne	12f74 <__assert_fail@plt+0x1870>
   13058:	mov	r2, #5
   1305c:	movw	r1, #60580	; 0xeca4
   13060:	movt	r1, #1
   13064:	mov	r0, #0
   13068:	bl	113bc <dcgettext@plt>
   1306c:	movw	r4, #58112	; 0xe300
   13070:	movt	r4, #1
   13074:	mov	r3, r4
   13078:	movw	r2, #60448	; 0xec20
   1307c:	movt	r2, #1
   13080:	mov	r1, r0
   13084:	mov	r0, #1
   13088:	bl	1159c <__printf_chk@plt>
   1308c:	mov	r2, #5
   13090:	movw	r1, #60608	; 0xecc0
   13094:	movt	r1, #1
   13098:	mov	r0, #0
   1309c:	bl	113bc <dcgettext@plt>
   130a0:	mov	r1, r0
   130a4:	movw	r3, #61300	; 0xef74
   130a8:	movt	r3, #1
   130ac:	b	12f64 <__assert_fail@plt+0x1860>
   130b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130b4:	strd	r6, [sp, #8]
   130b8:	strd	r8, [sp, #16]
   130bc:	strd	sl, [sp, #24]
   130c0:	str	lr, [sp, #32]
   130c4:	sub	sp, sp, #4
   130c8:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   130cc:	mov	fp, r0
   130d0:	mov	r6, r0
   130d4:	movw	r8, #380	; 0x17c
   130d8:	movt	r8, #3
   130dc:	movw	sl, #60752	; 0xed50
   130e0:	movt	sl, #1
   130e4:	movw	r9, #60744	; 0xed48
   130e8:	movt	r9, #1
   130ec:	b	131ac <__assert_fail@plt+0x1aa8>
   130f0:	cmp	r4, #12
   130f4:	beq	131f4 <__assert_fail@plt+0x1af0>
   130f8:	rsb	r3, r4, r4, lsl #3
   130fc:	add	r3, r8, r3, lsl #2
   13100:	ldrb	r3, [r3, #24]
   13104:	cmp	r3, #0
   13108:	bne	13148 <__assert_fail@plt+0x1a44>
   1310c:	cmp	r4, #11
   13110:	ldrls	pc, [pc, r4, lsl #2]
   13114:	b	13250 <__assert_fail@plt+0x1b4c>
   13118:	muleq	r1, r4, r1
   1311c:	muleq	r1, r4, r1
   13120:	andeq	r3, r1, r0, lsr r2
   13124:	muleq	r1, r4, r1
   13128:	andeq	r3, r1, r0, asr #4
   1312c:	muleq	r1, r4, r1
   13130:	muleq	r1, r4, r1
   13134:	muleq	r1, r4, r1
   13138:	muleq	r1, r4, r1
   1313c:	muleq	r1, r4, r1
   13140:	muleq	r1, r4, r1
   13144:	muleq	r1, r4, r1
   13148:	mov	r2, #5
   1314c:	movw	r1, #60696	; 0xed18
   13150:	movt	r1, #1
   13154:	mov	r0, #0
   13158:	bl	113bc <dcgettext@plt>
   1315c:	mov	r5, r0
   13160:	movw	r3, #380	; 0x17c
   13164:	movt	r3, #3
   13168:	rsb	r4, r4, r4, lsl #3
   1316c:	add	r4, r3, r4, lsl #2
   13170:	ldr	r0, [r4, #4]
   13174:	bl	1ac4c <__assert_fail@plt+0x9548>
   13178:	mov	r3, r0
   1317c:	mov	r2, r5
   13180:	mov	r1, #0
   13184:	mov	r0, r1
   13188:	bl	11494 <error@plt>
   1318c:	mov	r0, #1
   13190:	bl	12c34 <__assert_fail@plt+0x1530>
   13194:	mov	r1, #0
   13198:	mov	r0, r4
   1319c:	bl	11990 <__assert_fail@plt+0x28c>
   131a0:	mov	r6, r7
   131a4:	cmp	r7, #0
   131a8:	beq	1326c <__assert_fail@plt+0x1b68>
   131ac:	mov	r1, #44	; 0x2c
   131b0:	mov	r0, r6
   131b4:	bl	11548 <strchr@plt>
   131b8:	subs	r7, r0, #0
   131bc:	movne	r3, #0
   131c0:	strbne	r3, [r7], #1
   131c4:	movw	r5, #380	; 0x17c
   131c8:	movt	r5, #3
   131cc:	mov	r4, #0
   131d0:	mov	r1, r6
   131d4:	ldr	r0, [r5, #4]
   131d8:	bl	11320 <strcmp@plt>
   131dc:	cmp	r0, #0
   131e0:	beq	130f0 <__assert_fail@plt+0x19ec>
   131e4:	add	r4, r4, #1
   131e8:	add	r5, r5, #28
   131ec:	cmp	r4, #12
   131f0:	bne	131d0 <__assert_fail@plt+0x1acc>
   131f4:	mov	r2, #5
   131f8:	movw	r1, #60660	; 0xecf4
   131fc:	movt	r1, #1
   13200:	mov	r0, #0
   13204:	bl	113bc <dcgettext@plt>
   13208:	mov	r4, r0
   1320c:	mov	r0, r6
   13210:	bl	1ac4c <__assert_fail@plt+0x9548>
   13214:	mov	r3, r0
   13218:	mov	r2, r4
   1321c:	mov	r1, #0
   13220:	mov	r0, r1
   13224:	bl	11494 <error@plt>
   13228:	mov	r0, #1
   1322c:	bl	12c34 <__assert_fail@plt+0x1530>
   13230:	mov	r1, r9
   13234:	mov	r0, #2
   13238:	bl	11990 <__assert_fail@plt+0x28c>
   1323c:	b	131a0 <__assert_fail@plt+0x1a9c>
   13240:	mov	r1, sl
   13244:	mov	r0, #4
   13248:	bl	11990 <__assert_fail@plt+0x28c>
   1324c:	b	131a0 <__assert_fail@plt+0x1a9c>
   13250:	ldr	r3, [pc, #56]	; 13290 <__assert_fail@plt+0x1b8c>
   13254:	mov	r2, #496	; 0x1f0
   13258:	movw	r1, #57992	; 0xe288
   1325c:	movt	r1, #1
   13260:	movw	r0, #60760	; 0xed58
   13264:	movt	r0, #1
   13268:	bl	11704 <__assert_fail@plt>
   1326c:	mov	r0, fp
   13270:	bl	15784 <__assert_fail@plt+0x4080>
   13274:	add	sp, sp, #4
   13278:	ldrd	r4, [sp]
   1327c:	ldrd	r6, [sp, #8]
   13280:	ldrd	r8, [sp, #16]
   13284:	ldrd	sl, [sp, #24]
   13288:	add	sp, sp, #32
   1328c:	pop	{pc}		; (ldr pc, [sp], #4)
   13290:	andeq	lr, r1, r4, asr r1
   13294:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13298:	strd	r6, [sp, #8]
   1329c:	strd	r8, [sp, #16]
   132a0:	strd	sl, [sp, #24]
   132a4:	str	lr, [sp, #32]
   132a8:	sub	sp, sp, #196	; 0xc4
   132ac:	mov	r5, r0
   132b0:	mov	r4, r1
   132b4:	ldr	r0, [r1]
   132b8:	bl	18950 <__assert_fail@plt+0x724c>
   132bc:	movw	r1, #62044	; 0xf25c
   132c0:	movt	r1, #1
   132c4:	mov	r0, #6
   132c8:	bl	11614 <setlocale@plt>
   132cc:	movw	r6, #60492	; 0xec4c
   132d0:	movt	r6, #1
   132d4:	movw	r1, #60788	; 0xed74
   132d8:	movt	r1, #1
   132dc:	mov	r0, r6
   132e0:	bl	116a4 <bindtextdomain@plt>
   132e4:	mov	r0, r6
   132e8:	bl	113e0 <textdomain@plt>
   132ec:	movw	r0, #21644	; 0x548c
   132f0:	movt	r0, #1
   132f4:	bl	1e0e4 <__assert_fail@plt+0xc9e0>
   132f8:	movw	r3, #832	; 0x340
   132fc:	movt	r3, #3
   13300:	mov	r8, #0
   13304:	str	r8, [r3]
   13308:	str	r8, [r3, #4]
   1330c:	strb	r8, [r3, #45]	; 0x2d
   13310:	strb	r8, [r3, #46]	; 0x2e
   13314:	mvn	r2, #0
   13318:	str	r2, [r3, #28]
   1331c:	strb	r8, [r3, #112]	; 0x70
   13320:	strb	r8, [r3, #52]	; 0x34
   13324:	str	r8, [r3, #48]	; 0x30
   13328:	strb	r8, [r3, #53]	; 0x35
   1332c:	mov	r0, #1
   13330:	mov	r1, #0
   13334:	strd	r0, [r3, #56]	; 0x38
   13338:	mov	r2, #5
   1333c:	movw	r1, #60812	; 0xed8c
   13340:	movt	r1, #1
   13344:	mov	r0, r8
   13348:	bl	113bc <dcgettext@plt>
   1334c:	mov	sl, r0
   13350:	ldr	r7, [pc, #4044]	; 14324 <__assert_fail@plt+0x2c20>
   13354:	movw	r6, #832	; 0x340
   13358:	movt	r6, #3
   1335c:	add	r9, r6, #32
   13360:	mvn	r3, #0
   13364:	str	r3, [sp, #88]	; 0x58
   13368:	add	r3, sp, #88	; 0x58
   1336c:	str	r3, [sp]
   13370:	mov	r3, r7
   13374:	movw	r2, #60856	; 0xedb8
   13378:	movt	r2, #1
   1337c:	mov	r1, r4
   13380:	mov	r0, r5
   13384:	bl	1150c <getopt_long@plt>
   13388:	cmn	r0, #1
   1338c:	beq	13790 <__assert_fail@plt+0x208c>
   13390:	cmp	r0, #105	; 0x69
   13394:	beq	135ec <__assert_fail@plt+0x1ee8>
   13398:	ble	13420 <__assert_fail@plt+0x1d1c>
   1339c:	cmp	r0, #118	; 0x76
   133a0:	beq	13360 <__assert_fail@plt+0x1c5c>
   133a4:	ble	13568 <__assert_fail@plt+0x1e64>
   133a8:	movw	r3, #257	; 0x101
   133ac:	cmp	r0, r3
   133b0:	beq	136c4 <__assert_fail@plt+0x1fc0>
   133b4:	ble	135c4 <__assert_fail@plt+0x1ec0>
   133b8:	movw	r3, #258	; 0x102
   133bc:	cmp	r0, r3
   133c0:	beq	1377c <__assert_fail@plt+0x2078>
   133c4:	movw	r3, #259	; 0x103
   133c8:	cmp	r0, r3
   133cc:	bne	135bc <__assert_fail@plt+0x1eb8>
   133d0:	ldr	r3, [r6, #24]
   133d4:	cmp	r3, #1
   133d8:	beq	136f8 <__assert_fail@plt+0x1ff4>
   133dc:	cmp	r3, #0
   133e0:	moveq	r3, r8
   133e4:	movne	r3, #0
   133e8:	cmp	r3, #0
   133ec:	bne	13724 <__assert_fail@plt+0x2020>
   133f0:	ldrb	r3, [r6, #112]	; 0x70
   133f4:	cmp	r3, #0
   133f8:	bne	13750 <__assert_fail@plt+0x204c>
   133fc:	mov	r3, #4
   13400:	str	r3, [r6, #24]
   13404:	movw	r3, #824	; 0x338
   13408:	movt	r3, #3
   1340c:	ldr	r0, [r3]
   13410:	cmp	r0, #0
   13414:	beq	13360 <__assert_fail@plt+0x1c5c>
   13418:	bl	130b0 <__assert_fail@plt+0x19ac>
   1341c:	b	13360 <__assert_fail@plt+0x1c5c>
   13420:	cmp	r0, #72	; 0x48
   13424:	beq	13630 <__assert_fail@plt+0x1f2c>
   13428:	ble	13460 <__assert_fail@plt+0x1d5c>
   1342c:	cmp	r0, #84	; 0x54
   13430:	beq	13654 <__assert_fail@plt+0x1f50>
   13434:	ble	1354c <__assert_fail@plt+0x1e48>
   13438:	cmp	r0, #97	; 0x61
   1343c:	beq	135e0 <__assert_fail@plt+0x1edc>
   13440:	cmp	r0, #104	; 0x68
   13444:	bne	135bc <__assert_fail@plt+0x1eb8>
   13448:	mov	r3, #176	; 0xb0
   1344c:	str	r3, [r6, #28]
   13450:	mov	r2, #1
   13454:	mov	r3, #0
   13458:	strd	r2, [r6, #32]
   1345c:	b	13360 <__assert_fail@plt+0x1c5c>
   13460:	cmn	r0, #2
   13464:	beq	13788 <__assert_fail@plt+0x2084>
   13468:	ble	134b4 <__assert_fail@plt+0x1db0>
   1346c:	cmp	r0, #66	; 0x42
   13470:	bne	1351c <__assert_fail@plt+0x1e18>
   13474:	movw	r3, #824	; 0x338
   13478:	movt	r3, #3
   1347c:	mov	r2, r9
   13480:	add	r1, r6, #28
   13484:	ldr	r0, [r3]
   13488:	bl	1752c <__assert_fail@plt+0x5e28>
   1348c:	cmp	r0, #0
   13490:	beq	13360 <__assert_fail@plt+0x1c5c>
   13494:	movw	r3, #824	; 0x338
   13498:	movt	r3, #3
   1349c:	ldr	r3, [r3]
   134a0:	str	r3, [sp]
   134a4:	ldr	r3, [pc, #3704]	; 14324 <__assert_fail@plt+0x2c20>
   134a8:	mov	r2, #66	; 0x42
   134ac:	ldr	r1, [sp, #88]	; 0x58
   134b0:	bl	1b994 <__assert_fail@plt+0xa290>
   134b4:	cmn	r0, #3
   134b8:	bne	135bc <__assert_fail@plt+0x1eb8>
   134bc:	movw	r3, #720	; 0x2d0
   134c0:	movt	r3, #3
   134c4:	movw	r0, #820	; 0x334
   134c8:	movt	r0, #3
   134cc:	mov	r4, #0
   134d0:	str	r4, [sp, #12]
   134d4:	movw	r2, #60900	; 0xede4
   134d8:	movt	r2, #1
   134dc:	str	r2, [sp, #8]
   134e0:	movw	r2, #60912	; 0xedf0
   134e4:	movt	r2, #1
   134e8:	str	r2, [sp, #4]
   134ec:	movw	r2, #60928	; 0xee00
   134f0:	movt	r2, #1
   134f4:	str	r2, [sp]
   134f8:	ldr	r3, [r3]
   134fc:	movw	r2, #60488	; 0xec48
   13500:	movt	r2, #1
   13504:	movw	r1, #58112	; 0xe300
   13508:	movt	r1, #1
   1350c:	ldr	r0, [r0]
   13510:	bl	1b3a4 <__assert_fail@plt+0x9ca0>
   13514:	mov	r0, r4
   13518:	bl	11530 <exit@plt>
   1351c:	cmp	r0, #70	; 0x46
   13520:	bne	135bc <__assert_fail@plt+0x1eb8>
   13524:	movw	r3, #824	; 0x338
   13528:	movt	r3, #3
   1352c:	ldr	fp, [r3]
   13530:	mov	r0, #8
   13534:	bl	1b47c <__assert_fail@plt+0x9d78>
   13538:	str	fp, [r0]
   1353c:	ldr	r3, [r6]
   13540:	str	r3, [r0, #4]
   13544:	str	r0, [r6]
   13548:	b	13360 <__assert_fail@plt+0x1c5c>
   1354c:	cmp	r0, #80	; 0x50
   13550:	bne	135bc <__assert_fail@plt+0x1eb8>
   13554:	ldr	r3, [r6, #24]
   13558:	cmp	r3, #4
   1355c:	beq	13698 <__assert_fail@plt+0x1f94>
   13560:	mov	r8, #1
   13564:	b	13360 <__assert_fail@plt+0x1c5c>
   13568:	cmp	r0, #108	; 0x6c
   1356c:	beq	13648 <__assert_fail@plt+0x1f44>
   13570:	ble	13594 <__assert_fail@plt+0x1e90>
   13574:	cmp	r0, #109	; 0x6d
   13578:	bne	135b4 <__assert_fail@plt+0x1eb0>
   1357c:	mov	r3, #0
   13580:	str	r3, [r6, #28]
   13584:	mov	r2, #1048576	; 0x100000
   13588:	mov	r3, #0
   1358c:	strd	r2, [r6, #32]
   13590:	b	13360 <__assert_fail@plt+0x1c5c>
   13594:	cmp	r0, #107	; 0x6b
   13598:	bne	135bc <__assert_fail@plt+0x1eb8>
   1359c:	mov	r3, #0
   135a0:	str	r3, [r6, #28]
   135a4:	mov	r2, #1024	; 0x400
   135a8:	mov	r3, #0
   135ac:	strd	r2, [r6, #32]
   135b0:	b	13360 <__assert_fail@plt+0x1c5c>
   135b4:	cmp	r0, #116	; 0x74
   135b8:	beq	13524 <__assert_fail@plt+0x1e20>
   135bc:	mov	r0, #1
   135c0:	bl	12c34 <__assert_fail@plt+0x1530>
   135c4:	cmp	r0, #120	; 0x78
   135c8:	beq	136d0 <__assert_fail@plt+0x1fcc>
   135cc:	cmp	r0, #256	; 0x100
   135d0:	bne	135bc <__assert_fail@plt+0x1eb8>
   135d4:	mov	r3, #0
   135d8:	strb	r3, [r6, #113]	; 0x71
   135dc:	b	13360 <__assert_fail@plt+0x1c5c>
   135e0:	mov	r3, #1
   135e4:	strb	r3, [r6, #45]	; 0x2d
   135e8:	b	13360 <__assert_fail@plt+0x1c5c>
   135ec:	ldr	r3, [r6, #24]
   135f0:	cmp	r3, #4
   135f4:	beq	13604 <__assert_fail@plt+0x1f00>
   135f8:	mov	r3, #1
   135fc:	str	r3, [r6, #24]
   13600:	b	13360 <__assert_fail@plt+0x1c5c>
   13604:	movw	r3, #60880	; 0xedd0
   13608:	movt	r3, #1
   1360c:	str	r3, [sp]
   13610:	movw	r3, #60876	; 0xedcc
   13614:	movt	r3, #1
   13618:	mov	r2, sl
   1361c:	mov	r1, #0
   13620:	mov	r0, r1
   13624:	bl	11494 <error@plt>
   13628:	mov	r0, #1
   1362c:	bl	12c34 <__assert_fail@plt+0x1530>
   13630:	mov	r3, #144	; 0x90
   13634:	str	r3, [r6, #28]
   13638:	mov	r2, #1
   1363c:	mov	r3, #0
   13640:	strd	r2, [r6, #32]
   13644:	b	13360 <__assert_fail@plt+0x1c5c>
   13648:	mov	r3, #1
   1364c:	strb	r3, [r6, #44]	; 0x2c
   13650:	b	13360 <__assert_fail@plt+0x1c5c>
   13654:	ldr	r3, [r6, #24]
   13658:	cmp	r3, #4
   1365c:	beq	1366c <__assert_fail@plt+0x1f68>
   13660:	mov	r3, #1
   13664:	strb	r3, [r6, #112]	; 0x70
   13668:	b	13360 <__assert_fail@plt+0x1c5c>
   1366c:	movw	r3, #60880	; 0xedd0
   13670:	movt	r3, #1
   13674:	str	r3, [sp]
   13678:	movw	r3, #60892	; 0xeddc
   1367c:	movt	r3, #1
   13680:	mov	r2, sl
   13684:	mov	r1, #0
   13688:	mov	r0, r1
   1368c:	bl	11494 <error@plt>
   13690:	mov	r0, #1
   13694:	bl	12c34 <__assert_fail@plt+0x1530>
   13698:	movw	r3, #60880	; 0xedd0
   1369c:	movt	r3, #1
   136a0:	str	r3, [sp]
   136a4:	movw	r3, #60896	; 0xede0
   136a8:	movt	r3, #1
   136ac:	mov	r2, sl
   136b0:	mov	r1, #0
   136b4:	mov	r0, r1
   136b8:	bl	11494 <error@plt>
   136bc:	mov	r0, #1
   136c0:	bl	12c34 <__assert_fail@plt+0x1530>
   136c4:	mov	r3, #1
   136c8:	strb	r3, [r6, #113]	; 0x71
   136cc:	b	13360 <__assert_fail@plt+0x1c5c>
   136d0:	movw	r3, #824	; 0x338
   136d4:	movt	r3, #3
   136d8:	ldr	fp, [r3]
   136dc:	mov	r0, #8
   136e0:	bl	1b47c <__assert_fail@plt+0x9d78>
   136e4:	str	fp, [r0]
   136e8:	ldr	r3, [r6, #4]
   136ec:	str	r3, [r0, #4]
   136f0:	str	r0, [r6, #4]
   136f4:	b	13360 <__assert_fail@plt+0x1c5c>
   136f8:	movw	r3, #60880	; 0xedd0
   136fc:	movt	r3, #1
   13700:	str	r3, [sp]
   13704:	movw	r3, #60876	; 0xedcc
   13708:	movt	r3, #1
   1370c:	mov	r2, sl
   13710:	mov	r1, #0
   13714:	mov	r0, r1
   13718:	bl	11494 <error@plt>
   1371c:	mov	r0, #1
   13720:	bl	12c34 <__assert_fail@plt+0x1530>
   13724:	movw	r3, #60880	; 0xedd0
   13728:	movt	r3, #1
   1372c:	str	r3, [sp]
   13730:	movw	r3, #60896	; 0xede0
   13734:	movt	r3, #1
   13738:	mov	r2, sl
   1373c:	mov	r1, #0
   13740:	mov	r0, r1
   13744:	bl	11494 <error@plt>
   13748:	mov	r0, #1
   1374c:	bl	12c34 <__assert_fail@plt+0x1530>
   13750:	movw	r3, #60880	; 0xedd0
   13754:	movt	r3, #1
   13758:	str	r3, [sp]
   1375c:	movw	r3, #60892	; 0xeddc
   13760:	movt	r3, #1
   13764:	mov	r2, sl
   13768:	mov	r1, #0
   1376c:	mov	r0, r1
   13770:	bl	11494 <error@plt>
   13774:	mov	r0, #1
   13778:	bl	12c34 <__assert_fail@plt+0x1530>
   1377c:	mov	r3, #1
   13780:	strb	r3, [r6, #53]	; 0x35
   13784:	b	13360 <__assert_fail@plt+0x1c5c>
   13788:	mov	r0, #0
   1378c:	bl	12c34 <__assert_fail@plt+0x1530>
   13790:	movw	r3, #832	; 0x340
   13794:	movt	r3, #3
   13798:	ldr	r3, [r3, #28]
   1379c:	cmn	r3, #1
   137a0:	beq	13808 <__assert_fail@plt+0x2104>
   137a4:	movw	r3, #832	; 0x340
   137a8:	movt	r3, #3
   137ac:	ldr	r3, [r3, #24]
   137b0:	cmp	r3, #4
   137b4:	cmpne	r3, #1
   137b8:	beq	137e0 <__assert_fail@plt+0x20dc>
   137bc:	movw	r3, #832	; 0x340
   137c0:	movt	r3, #3
   137c4:	ldr	r3, [r3, #28]
   137c8:	tst	r3, #16
   137cc:	beq	13870 <__assert_fail@plt+0x216c>
   137d0:	movw	r3, #832	; 0x340
   137d4:	movt	r3, #3
   137d8:	mov	r2, #2
   137dc:	str	r2, [r3, #24]
   137e0:	movw	r3, #832	; 0x340
   137e4:	movt	r3, #3
   137e8:	ldr	r8, [r3]
   137ec:	cmp	r8, #0
   137f0:	beq	13904 <__assert_fail@plt+0x2200>
   137f4:	mov	fp, #0
   137f8:	mov	r9, r3
   137fc:	movw	sl, #60980	; 0xee34
   13800:	movt	sl, #1
   13804:	b	138c8 <__assert_fail@plt+0x21c4>
   13808:	cmp	r8, #0
   1380c:	beq	1384c <__assert_fail@plt+0x2148>
   13810:	movw	r3, #832	; 0x340
   13814:	movt	r3, #3
   13818:	mov	r2, #0
   1381c:	str	r2, [r3, #28]
   13820:	movw	r0, #60948	; 0xee14
   13824:	movt	r0, #1
   13828:	bl	114c4 <getenv@plt>
   1382c:	cmp	r0, #0
   13830:	moveq	r0, #1024	; 0x400
   13834:	movne	r0, #512	; 0x200
   13838:	mov	r1, #0
   1383c:	movw	r3, #832	; 0x340
   13840:	movt	r3, #3
   13844:	strd	r0, [r3, #32]
   13848:	b	137a4 <__assert_fail@plt+0x20a0>
   1384c:	movw	r0, #60964	; 0xee24
   13850:	movt	r0, #1
   13854:	bl	114c4 <getenv@plt>
   13858:	movw	r1, #832	; 0x340
   1385c:	movt	r1, #3
   13860:	add	r2, r1, #32
   13864:	add	r1, r1, #28
   13868:	bl	1752c <__assert_fail@plt+0x5e28>
   1386c:	b	137a4 <__assert_fail@plt+0x20a0>
   13870:	cmp	r8, #0
   13874:	beq	137e0 <__assert_fail@plt+0x20dc>
   13878:	movw	r3, #832	; 0x340
   1387c:	movt	r3, #3
   13880:	mov	r2, #3
   13884:	str	r2, [r3, #24]
   13888:	b	137e0 <__assert_fail@plt+0x20dc>
   1388c:	mov	r2, #5
   13890:	mov	r1, sl
   13894:	bl	113bc <dcgettext@plt>
   13898:	mov	r6, r0
   1389c:	ldr	r0, [r8]
   138a0:	bl	1ac4c <__assert_fail@plt+0x9548>
   138a4:	mov	r3, r0
   138a8:	mov	r2, r6
   138ac:	mov	r1, #0
   138b0:	mov	r0, r1
   138b4:	bl	11494 <error@plt>
   138b8:	mov	fp, #1
   138bc:	ldr	r8, [r8, #4]
   138c0:	cmp	r8, #0
   138c4:	beq	138fc <__assert_fail@plt+0x21f8>
   138c8:	ldr	r6, [r9, #4]
   138cc:	cmp	r6, #0
   138d0:	beq	138bc <__assert_fail@plt+0x21b8>
   138d4:	ldr	r7, [r8]
   138d8:	ldr	r1, [r6]
   138dc:	mov	r0, r7
   138e0:	bl	11320 <strcmp@plt>
   138e4:	cmp	r0, #0
   138e8:	beq	1388c <__assert_fail@plt+0x2188>
   138ec:	ldr	r6, [r6, #4]
   138f0:	cmp	r6, #0
   138f4:	bne	138d8 <__assert_fail@plt+0x21d4>
   138f8:	b	138bc <__assert_fail@plt+0x21b8>
   138fc:	cmp	fp, #0
   13900:	bne	149c4 <__assert_fail@plt+0x32c0>
   13904:	movw	r3, #808	; 0x328
   13908:	movt	r3, #3
   1390c:	ldr	r0, [r3]
   13910:	cmp	r0, r5
   13914:	movge	r3, #0
   13918:	strge	r3, [sp, #52]	; 0x34
   1391c:	blt	13994 <__assert_fail@plt+0x2290>
   13920:	movw	r3, #832	; 0x340
   13924:	movt	r3, #3
   13928:	ldr	r3, [r3]
   1392c:	cmp	r3, #0
   13930:	movne	r0, #1
   13934:	beq	13ab4 <__assert_fail@plt+0x23b0>
   13938:	and	r0, r0, #1
   1393c:	bl	17f9c <__assert_fail@plt+0x6898>
   13940:	movw	r3, #832	; 0x340
   13944:	movt	r3, #3
   13948:	str	r0, [r3, #116]	; 0x74
   1394c:	cmp	r0, #0
   13950:	beq	13b08 <__assert_fail@plt+0x2404>
   13954:	movw	r3, #832	; 0x340
   13958:	movt	r3, #3
   1395c:	ldrb	r3, [r3, #113]	; 0x71
   13960:	cmp	r3, #0
   13964:	bne	13c0c <__assert_fail@plt+0x2508>
   13968:	movw	r3, #832	; 0x340
   1396c:	movt	r3, #3
   13970:	ldr	r3, [r3, #24]
   13974:	cmp	r3, #4
   13978:	ldrls	pc, [pc, r3, lsl #2]
   1397c:	b	13e70 <__assert_fail@plt+0x276c>
   13980:	andeq	r3, r1, r4, lsl ip
   13984:	andeq	r3, r1, r8, ror #26
   13988:	strdeq	r3, [r1], -r0
   1398c:	ldrdeq	r3, [r1], -r8
   13990:	andeq	r3, r1, ip, asr #28
   13994:	mov	r1, #104	; 0x68
   13998:	sub	r0, r5, r0
   1399c:	bl	1b5fc <__assert_fail@plt+0x9ef8>
   139a0:	str	r0, [sp, #52]	; 0x34
   139a4:	movw	r3, #808	; 0x328
   139a8:	movt	r3, #3
   139ac:	ldr	r6, [r3]
   139b0:	mov	fp, r3
   139b4:	movw	r3, #61932	; 0xf1ec
   139b8:	movt	r3, #1
   139bc:	str	r3, [sp, #32]
   139c0:	movw	r3, #832	; 0x340
   139c4:	movt	r3, #3
   139c8:	str	r3, [sp, #36]	; 0x24
   139cc:	b	13a04 <__assert_fail@plt+0x2300>
   139d0:	mov	r2, r7
   139d4:	mov	r1, sl
   139d8:	mov	r0, #3
   139dc:	bl	1141c <__fxstat64@plt>
   139e0:	subs	r8, r0, #0
   139e4:	beq	139f0 <__assert_fail@plt+0x22ec>
   139e8:	bl	1156c <__errno_location@plt>
   139ec:	ldr	r8, [r0]
   139f0:	mov	r0, sl
   139f4:	bl	116ec <close@plt>
   139f8:	cmp	r8, #0
   139fc:	bne	13a74 <__assert_fail@plt+0x2370>
   13a00:	add	r6, r6, #1
   13a04:	cmp	r6, r5
   13a08:	bge	13920 <__assert_fail@plt+0x221c>
   13a0c:	str	r6, [sp, #28]
   13a10:	ldr	r9, [r4, r6, lsl #2]
   13a14:	ldr	r7, [fp]
   13a18:	sub	r7, r6, r7
   13a1c:	mov	r3, #104	; 0x68
   13a20:	ldr	r2, [sp, #52]	; 0x34
   13a24:	mla	r7, r3, r7, r2
   13a28:	mov	r1, #2304	; 0x900
   13a2c:	mov	r0, r9
   13a30:	bl	114ac <open64@plt>
   13a34:	subs	sl, r0, #0
   13a38:	bge	139d0 <__assert_fail@plt+0x22cc>
   13a3c:	bl	1156c <__errno_location@plt>
   13a40:	mov	sl, r0
   13a44:	ldr	r8, [r0]
   13a48:	cmp	r8, #20
   13a4c:	cmpne	r8, #2
   13a50:	beq	139f8 <__assert_fail@plt+0x22f4>
   13a54:	mov	r2, r7
   13a58:	mov	r1, r9
   13a5c:	mov	r0, #3
   13a60:	bl	116bc <__xstat64@plt>
   13a64:	cmp	r0, #0
   13a68:	ldrne	r8, [sl]
   13a6c:	bne	139f8 <__assert_fail@plt+0x22f4>
   13a70:	b	13a00 <__assert_fail@plt+0x22fc>
   13a74:	ldr	r7, [sp, #28]
   13a78:	ldr	r2, [r4, r7, lsl #2]
   13a7c:	mov	r1, #3
   13a80:	mov	r0, #0
   13a84:	bl	1aa80 <__assert_fail@plt+0x937c>
   13a88:	mov	r3, r0
   13a8c:	ldr	r2, [sp, #32]
   13a90:	mov	r1, r8
   13a94:	mov	r0, #0
   13a98:	bl	11494 <error@plt>
   13a9c:	mov	r3, #1
   13aa0:	ldr	r2, [sp, #36]	; 0x24
   13aa4:	str	r3, [r2, #48]	; 0x30
   13aa8:	mov	r3, #0
   13aac:	str	r3, [r4, r7, lsl #2]
   13ab0:	b	13a00 <__assert_fail@plt+0x22fc>
   13ab4:	movw	r3, #832	; 0x340
   13ab8:	movt	r3, #3
   13abc:	ldr	r3, [r3, #4]
   13ac0:	cmp	r3, #0
   13ac4:	movne	r0, #1
   13ac8:	bne	13938 <__assert_fail@plt+0x2234>
   13acc:	movw	r3, #832	; 0x340
   13ad0:	movt	r3, #3
   13ad4:	ldrb	r3, [r3, #112]	; 0x70
   13ad8:	cmp	r3, #0
   13adc:	movne	r0, #1
   13ae0:	bne	13938 <__assert_fail@plt+0x2234>
   13ae4:	movw	r3, #380	; 0x17c
   13ae8:	movt	r3, #3
   13aec:	ldrb	r3, [r3, #52]	; 0x34
   13af0:	cmp	r3, #0
   13af4:	movweq	r3, #832	; 0x340
   13af8:	movteq	r3, #3
   13afc:	ldrbeq	r0, [r3, #44]	; 0x2c
   13b00:	movne	r0, #1
   13b04:	b	13938 <__assert_fail@plt+0x2234>
   13b08:	movw	r3, #808	; 0x328
   13b0c:	movt	r3, #3
   13b10:	ldr	r3, [r3]
   13b14:	cmp	r3, r5
   13b18:	bge	13ba4 <__assert_fail@plt+0x24a0>
   13b1c:	movw	r3, #832	; 0x340
   13b20:	movt	r3, #3
   13b24:	ldrb	r3, [r3, #45]	; 0x2d
   13b28:	cmp	r3, #0
   13b2c:	bne	13bec <__assert_fail@plt+0x24e8>
   13b30:	movw	r3, #832	; 0x340
   13b34:	movt	r3, #3
   13b38:	ldrb	r3, [r3, #44]	; 0x2c
   13b3c:	cmp	r3, #0
   13b40:	bne	13bfc <__assert_fail@plt+0x24f8>
   13b44:	movw	r3, #832	; 0x340
   13b48:	movt	r3, #3
   13b4c:	ldr	r3, [r3]
   13b50:	cmp	r3, #0
   13b54:	beq	13b68 <__assert_fail@plt+0x2464>
   13b58:	mov	r7, #1
   13b5c:	movw	r6, #62044	; 0xf25c
   13b60:	movt	r6, #1
   13b64:	b	13bb0 <__assert_fail@plt+0x24ac>
   13b68:	movw	r3, #832	; 0x340
   13b6c:	movt	r3, #3
   13b70:	ldr	r3, [r3, #4]
   13b74:	cmp	r3, #0
   13b78:	movne	r7, #1
   13b7c:	movwne	r6, #62044	; 0xf25c
   13b80:	movtne	r6, #1
   13b84:	bne	13bb0 <__assert_fail@plt+0x24ac>
   13b88:	mov	r2, #5
   13b8c:	movw	r1, #61028	; 0xee64
   13b90:	movt	r1, #1
   13b94:	bl	113bc <dcgettext@plt>
   13b98:	mov	r6, r0
   13b9c:	mov	r7, #0
   13ba0:	b	13bb0 <__assert_fail@plt+0x24ac>
   13ba4:	mov	r7, #1
   13ba8:	movw	r6, #62044	; 0xf25c
   13bac:	movt	r6, #1
   13bb0:	bl	1156c <__errno_location@plt>
   13bb4:	ldr	r8, [r0]
   13bb8:	mov	r2, #5
   13bbc:	movw	r1, #61040	; 0xee70
   13bc0:	movt	r1, #1
   13bc4:	mov	r0, #0
   13bc8:	bl	113bc <dcgettext@plt>
   13bcc:	str	r0, [sp]
   13bd0:	mov	r3, r6
   13bd4:	movw	r2, #61084	; 0xee9c
   13bd8:	movt	r2, #1
   13bdc:	mov	r1, r8
   13be0:	mov	r0, r7
   13be4:	bl	11494 <error@plt>
   13be8:	b	13954 <__assert_fail@plt+0x2250>
   13bec:	mov	r7, #1
   13bf0:	movw	r6, #62044	; 0xf25c
   13bf4:	movt	r6, #1
   13bf8:	b	13bb0 <__assert_fail@plt+0x24ac>
   13bfc:	mov	r7, #1
   13c00:	movw	r6, #62044	; 0xf25c
   13c04:	movt	r6, #1
   13c08:	b	13bb0 <__assert_fail@plt+0x24ac>
   13c0c:	bl	116b0 <sync@plt>
   13c10:	b	13968 <__assert_fail@plt+0x2264>
   13c14:	mov	r1, #0
   13c18:	mov	r0, r1
   13c1c:	bl	11990 <__assert_fail@plt+0x28c>
   13c20:	movw	r3, #832	; 0x340
   13c24:	movt	r3, #3
   13c28:	ldrb	r3, [r3, #112]	; 0x70
   13c2c:	cmp	r3, #0
   13c30:	bne	13ce0 <__assert_fail@plt+0x25dc>
   13c34:	mov	r1, #0
   13c38:	mov	r0, #2
   13c3c:	bl	11990 <__assert_fail@plt+0x28c>
   13c40:	mov	r1, #0
   13c44:	mov	r0, #3
   13c48:	bl	11990 <__assert_fail@plt+0x28c>
   13c4c:	mov	r1, #0
   13c50:	mov	r0, #4
   13c54:	bl	11990 <__assert_fail@plt+0x28c>
   13c58:	mov	r1, #0
   13c5c:	mov	r0, #5
   13c60:	bl	11990 <__assert_fail@plt+0x28c>
   13c64:	mov	r1, #0
   13c68:	mov	r0, #10
   13c6c:	bl	11990 <__assert_fail@plt+0x28c>
   13c70:	bl	11b2c <__assert_fail@plt+0x428>
   13c74:	ldr	r3, [sp, #52]	; 0x34
   13c78:	cmp	r3, #0
   13c7c:	beq	1437c <__assert_fail@plt+0x2c78>
   13c80:	movw	r3, #832	; 0x340
   13c84:	movt	r3, #3
   13c88:	mov	r2, #1
   13c8c:	strb	r2, [r3, #46]	; 0x2e
   13c90:	movw	r3, #808	; 0x328
   13c94:	movt	r3, #3
   13c98:	ldr	r3, [r3]
   13c9c:	str	r3, [sp, #36]	; 0x24
   13ca0:	cmp	r5, r3
   13ca4:	ble	146c4 <__assert_fail@plt+0x2fc0>
   13ca8:	add	r7, r4, r3, lsl #2
   13cac:	add	r3, r4, r5, lsl #2
   13cb0:	str	r3, [sp, #56]	; 0x38
   13cb4:	movw	r3, #808	; 0x328
   13cb8:	movt	r3, #3
   13cbc:	str	r3, [sp, #68]	; 0x44
   13cc0:	movw	r3, #832	; 0x340
   13cc4:	movt	r3, #3
   13cc8:	str	r3, [sp, #64]	; 0x40
   13ccc:	movw	r3, #61932	; 0xf1ec
   13cd0:	movt	r3, #1
   13cd4:	str	r3, [sp, #84]	; 0x54
   13cd8:	mov	fp, r7
   13cdc:	b	1428c <__assert_fail@plt+0x2b88>
   13ce0:	mov	r1, #0
   13ce4:	mov	r0, #1
   13ce8:	bl	11990 <__assert_fail@plt+0x28c>
   13cec:	b	13c34 <__assert_fail@plt+0x2530>
   13cf0:	mov	r1, #0
   13cf4:	mov	r0, r1
   13cf8:	bl	11990 <__assert_fail@plt+0x28c>
   13cfc:	movw	r3, #832	; 0x340
   13d00:	movt	r3, #3
   13d04:	ldrb	r3, [r3, #112]	; 0x70
   13d08:	cmp	r3, #0
   13d0c:	bne	13d58 <__assert_fail@plt+0x2654>
   13d10:	movw	r1, #60744	; 0xed48
   13d14:	movt	r1, #1
   13d18:	mov	r0, #2
   13d1c:	bl	11990 <__assert_fail@plt+0x28c>
   13d20:	mov	r1, #0
   13d24:	mov	r0, #3
   13d28:	bl	11990 <__assert_fail@plt+0x28c>
   13d2c:	movw	r1, #60752	; 0xed50
   13d30:	movt	r1, #1
   13d34:	mov	r0, #4
   13d38:	bl	11990 <__assert_fail@plt+0x28c>
   13d3c:	mov	r1, #0
   13d40:	mov	r0, #5
   13d44:	bl	11990 <__assert_fail@plt+0x28c>
   13d48:	mov	r1, #0
   13d4c:	mov	r0, #10
   13d50:	bl	11990 <__assert_fail@plt+0x28c>
   13d54:	b	13c70 <__assert_fail@plt+0x256c>
   13d58:	mov	r1, #0
   13d5c:	mov	r0, #1
   13d60:	bl	11990 <__assert_fail@plt+0x28c>
   13d64:	b	13d10 <__assert_fail@plt+0x260c>
   13d68:	mov	r1, #0
   13d6c:	mov	r0, r1
   13d70:	bl	11990 <__assert_fail@plt+0x28c>
   13d74:	movw	r3, #832	; 0x340
   13d78:	movt	r3, #3
   13d7c:	ldrb	r3, [r3, #112]	; 0x70
   13d80:	cmp	r3, #0
   13d84:	bne	13dc8 <__assert_fail@plt+0x26c4>
   13d88:	mov	r1, #0
   13d8c:	mov	r0, #6
   13d90:	bl	11990 <__assert_fail@plt+0x28c>
   13d94:	mov	r1, #0
   13d98:	mov	r0, #7
   13d9c:	bl	11990 <__assert_fail@plt+0x28c>
   13da0:	mov	r1, #0
   13da4:	mov	r0, #8
   13da8:	bl	11990 <__assert_fail@plt+0x28c>
   13dac:	mov	r1, #0
   13db0:	mov	r0, #9
   13db4:	bl	11990 <__assert_fail@plt+0x28c>
   13db8:	mov	r1, #0
   13dbc:	mov	r0, #10
   13dc0:	bl	11990 <__assert_fail@plt+0x28c>
   13dc4:	b	13c70 <__assert_fail@plt+0x256c>
   13dc8:	mov	r1, #0
   13dcc:	mov	r0, #1
   13dd0:	bl	11990 <__assert_fail@plt+0x28c>
   13dd4:	b	13d88 <__assert_fail@plt+0x2684>
   13dd8:	mov	r1, #0
   13ddc:	mov	r0, r1
   13de0:	bl	11990 <__assert_fail@plt+0x28c>
   13de4:	movw	r3, #832	; 0x340
   13de8:	movt	r3, #3
   13dec:	ldrb	r3, [r3, #112]	; 0x70
   13df0:	cmp	r3, #0
   13df4:	bne	13e3c <__assert_fail@plt+0x2738>
   13df8:	mov	r1, #0
   13dfc:	mov	r0, #2
   13e00:	bl	11990 <__assert_fail@plt+0x28c>
   13e04:	mov	r1, #0
   13e08:	mov	r0, #3
   13e0c:	bl	11990 <__assert_fail@plt+0x28c>
   13e10:	mov	r1, #0
   13e14:	mov	r0, #4
   13e18:	bl	11990 <__assert_fail@plt+0x28c>
   13e1c:	movw	r1, #61092	; 0xeea4
   13e20:	movt	r1, #1
   13e24:	mov	r0, #5
   13e28:	bl	11990 <__assert_fail@plt+0x28c>
   13e2c:	mov	r1, #0
   13e30:	mov	r0, #10
   13e34:	bl	11990 <__assert_fail@plt+0x28c>
   13e38:	b	13c70 <__assert_fail@plt+0x256c>
   13e3c:	mov	r1, #0
   13e40:	mov	r0, #1
   13e44:	bl	11990 <__assert_fail@plt+0x28c>
   13e48:	b	13df8 <__assert_fail@plt+0x26f4>
   13e4c:	movw	r3, #832	; 0x340
   13e50:	movt	r3, #3
   13e54:	ldr	r3, [r3, #8]
   13e58:	cmp	r3, #0
   13e5c:	bne	13c70 <__assert_fail@plt+0x256c>
   13e60:	movw	r0, #61104	; 0xeeb0
   13e64:	movt	r0, #1
   13e68:	bl	130b0 <__assert_fail@plt+0x19ac>
   13e6c:	b	13c70 <__assert_fail@plt+0x256c>
   13e70:	ldr	r3, [pc, #1200]	; 14328 <__assert_fail@plt+0x2c24>
   13e74:	movw	r2, #565	; 0x235
   13e78:	movw	r1, #57992	; 0xe288
   13e7c:	movt	r1, #1
   13e80:	movw	r0, #61180	; 0xeefc
   13e84:	movt	r0, #1
   13e88:	bl	11704 <__assert_fail@plt>
   13e8c:	ldr	r3, [sp, #40]	; 0x28
   13e90:	str	r3, [sp, #28]
   13e94:	b	142f0 <__assert_fail@plt+0x2bec>
   13e98:	add	r2, sp, #88	; 0x58
   13e9c:	ldr	r1, [sp, #48]	; 0x30
   13ea0:	mov	r0, #3
   13ea4:	bl	116bc <__xstat64@plt>
   13ea8:	cmp	r0, #0
   13eac:	beq	13ebc <__assert_fail@plt+0x27b8>
   13eb0:	tst	r7, r8
   13eb4:	beq	13ed0 <__assert_fail@plt+0x27cc>
   13eb8:	mov	r9, #0
   13ebc:	cmp	sl, #1
   13ec0:	beq	13ed8 <__assert_fail@plt+0x27d4>
   13ec4:	str	r9, [sp, #32]
   13ec8:	str	sl, [sp, #44]	; 0x2c
   13ecc:	str	r5, [sp, #60]	; 0x3c
   13ed0:	mov	r9, #0
   13ed4:	b	148ec <__assert_fail@plt+0x31e8>
   13ed8:	ldr	fp, [sp, #76]	; 0x4c
   13edc:	mov	r0, r4
   13ee0:	bl	15784 <__assert_fail@plt+0x4080>
   13ee4:	mov	r0, r6
   13ee8:	bl	15784 <__assert_fail@plt+0x4080>
   13eec:	ldr	r0, [sp, #72]	; 0x48
   13ef0:	bl	15784 <__assert_fail@plt+0x4080>
   13ef4:	str	r5, [sp, #60]	; 0x3c
   13ef8:	mov	r3, #0
   13efc:	str	r3, [sp, #16]
   13f00:	str	r3, [sp, #12]
   13f04:	ldr	r0, [sp, #60]	; 0x3c
   13f08:	ldrb	r2, [r0, #24]
   13f0c:	ubfx	r2, r2, #1, #1
   13f10:	str	r2, [sp, #8]
   13f14:	ldrb	r2, [r0, #24]
   13f18:	and	r2, r2, #1
   13f1c:	str	r2, [sp, #4]
   13f20:	ldr	r2, [r0, #12]
   13f24:	str	r2, [sp]
   13f28:	ldr	r2, [sp, #40]	; 0x28
   13f2c:	ldr	r1, [r0, #4]
   13f30:	ldr	r0, [r0]
   13f34:	bl	12000 <__assert_fail@plt+0x8fc>
   13f38:	b	14274 <__assert_fail@plt+0x2b70>
   13f3c:	ldr	sl, [sp, #80]	; 0x50
   13f40:	ldr	fp, [sp, #76]	; 0x4c
   13f44:	ldr	r0, [sp, #72]	; 0x48
   13f48:	bl	15784 <__assert_fail@plt+0x4080>
   13f4c:	ldr	r3, [sp, #60]	; 0x3c
   13f50:	cmp	r3, #0
   13f54:	bne	13ef8 <__assert_fail@plt+0x27f4>
   13f58:	cmp	r9, #0
   13f5c:	bne	13fa4 <__assert_fail@plt+0x28a0>
   13f60:	ldr	r0, [sp, #40]	; 0x28
   13f64:	bl	11680 <canonicalize_file_name@plt>
   13f68:	subs	r7, r0, #0
   13f6c:	beq	13f7c <__assert_fail@plt+0x2878>
   13f70:	ldrb	r3, [r7]
   13f74:	cmp	r3, #47	; 0x2f
   13f78:	beq	13fec <__assert_fail@plt+0x28e8>
   13f7c:	mov	r0, r7
   13f80:	bl	15784 <__assert_fail@plt+0x4080>
   13f84:	ldr	r3, [sp, #64]	; 0x40
   13f88:	ldr	r4, [r3, #116]	; 0x74
   13f8c:	cmp	r4, #0
   13f90:	beq	14330 <__assert_fail@plt+0x2c2c>
   13f94:	mov	r5, #0
   13f98:	mvn	r6, #0
   13f9c:	mvn	r7, #0
   13fa0:	b	141cc <__assert_fail@plt+0x2ac8>
   13fa4:	mov	r2, #5
   13fa8:	movw	r1, #61204	; 0xef14
   13fac:	movt	r1, #1
   13fb0:	mov	r0, #0
   13fb4:	bl	113bc <dcgettext@plt>
   13fb8:	mov	r4, r0
   13fbc:	ldr	r1, [sp, #40]	; 0x28
   13fc0:	mov	r0, #4
   13fc4:	bl	1a95c <__assert_fail@plt+0x9258>
   13fc8:	mov	r3, r0
   13fcc:	mov	r2, r4
   13fd0:	mov	r1, #0
   13fd4:	mov	r0, r1
   13fd8:	bl	11494 <error@plt>
   13fdc:	mov	r3, #1
   13fe0:	ldr	r2, [sp, #64]	; 0x40
   13fe4:	str	r3, [r2, #48]	; 0x30
   13fe8:	b	14274 <__assert_fail@plt+0x2b70>
   13fec:	mov	r0, r7
   13ff0:	bl	1153c <strlen@plt>
   13ff4:	mov	r8, r0
   13ff8:	ldr	r3, [sp, #64]	; 0x40
   13ffc:	ldr	r4, [r3, #116]	; 0x74
   14000:	cmp	r4, #0
   14004:	beq	13f7c <__assert_fail@plt+0x2878>
   14008:	mov	r9, #0
   1400c:	mov	r5, r9
   14010:	movw	r3, #61256	; 0xef48
   14014:	movt	r3, #1
   14018:	str	r3, [sp, #28]
   1401c:	str	sl, [sp, #32]
   14020:	b	14050 <__assert_fail@plt+0x294c>
   14024:	mov	r2, r6
   14028:	mov	r1, r7
   1402c:	mov	r0, sl
   14030:	bl	116d4 <strncmp@plt>
   14034:	cmp	r0, #0
   14038:	moveq	r9, r6
   1403c:	cmp	r0, #0
   14040:	moveq	r5, r4
   14044:	ldr	r4, [r4, #28]
   14048:	cmp	r4, #0
   1404c:	beq	140cc <__assert_fail@plt+0x29c8>
   14050:	ldr	r1, [sp, #28]
   14054:	ldr	r0, [r4, #12]
   14058:	bl	11320 <strcmp@plt>
   1405c:	cmp	r0, #0
   14060:	beq	14044 <__assert_fail@plt+0x2940>
   14064:	cmp	r5, #0
   14068:	beq	14084 <__assert_fail@plt+0x2980>
   1406c:	ldrb	r3, [r5, #24]
   14070:	tst	r3, #1
   14074:	bne	14084 <__assert_fail@plt+0x2980>
   14078:	ldrb	r3, [r4, #24]
   1407c:	tst	r3, #1
   14080:	bne	14044 <__assert_fail@plt+0x2940>
   14084:	ldr	sl, [r4, #4]
   14088:	mov	r0, sl
   1408c:	bl	1153c <strlen@plt>
   14090:	mov	r6, r0
   14094:	cmp	r0, r9
   14098:	cmpcs	r8, r0
   1409c:	bcc	14044 <__assert_fail@plt+0x2940>
   140a0:	cmp	r0, #1
   140a4:	beq	140c0 <__assert_fail@plt+0x29bc>
   140a8:	cmp	r8, r0
   140ac:	beq	14024 <__assert_fail@plt+0x2920>
   140b0:	ldrb	r3, [r7, r0]
   140b4:	cmp	r3, #47	; 0x2f
   140b8:	bne	14044 <__assert_fail@plt+0x2940>
   140bc:	b	14024 <__assert_fail@plt+0x2920>
   140c0:	mov	r9, r0
   140c4:	mov	r5, r4
   140c8:	b	14044 <__assert_fail@plt+0x2940>
   140cc:	ldr	sl, [sp, #32]
   140d0:	mov	r0, r7
   140d4:	bl	15784 <__assert_fail@plt+0x4080>
   140d8:	cmp	r5, #0
   140dc:	beq	13f84 <__assert_fail@plt+0x2880>
   140e0:	add	r2, sp, #88	; 0x58
   140e4:	ldr	r1, [r5, #4]
   140e8:	mov	r0, #3
   140ec:	bl	116bc <__xstat64@plt>
   140f0:	cmp	r0, #0
   140f4:	bne	13f84 <__assert_fail@plt+0x2880>
   140f8:	ldrd	r2, [sl]
   140fc:	ldrd	r0, [sp, #88]	; 0x58
   14100:	cmp	r1, r3
   14104:	cmpeq	r0, r2
   14108:	bne	13f84 <__assert_fail@plt+0x2880>
   1410c:	b	14234 <__assert_fail@plt+0x2b30>
   14110:	add	r2, sp, #88	; 0x58
   14114:	ldr	r1, [r4, #4]
   14118:	mov	r0, #3
   1411c:	bl	116bc <__xstat64@plt>
   14120:	cmp	r0, #0
   14124:	ldrdeq	r2, [sp, #88]	; 0x58
   14128:	strdeq	r2, [r4, #16]
   1412c:	beq	141dc <__assert_fail@plt+0x2ad8>
   14130:	bl	1156c <__errno_location@plt>
   14134:	ldr	r3, [r0]
   14138:	cmp	r3, #5
   1413c:	beq	14150 <__assert_fail@plt+0x2a4c>
   14140:	mvn	r2, #1
   14144:	mvn	r3, #0
   14148:	strd	r2, [r4, #16]
   1414c:	b	141dc <__assert_fail@plt+0x2ad8>
   14150:	ldr	r2, [r4, #4]
   14154:	mov	r1, #3
   14158:	mov	r0, #0
   1415c:	bl	1aa80 <__assert_fail@plt+0x937c>
   14160:	mov	r3, r0
   14164:	ldr	r2, [sp, #84]	; 0x54
   14168:	mov	r1, #5
   1416c:	mov	r0, #0
   14170:	bl	11494 <error@plt>
   14174:	mov	r3, #1
   14178:	ldr	r2, [sp, #64]	; 0x40
   1417c:	str	r3, [r2, #48]	; 0x30
   14180:	b	14140 <__assert_fail@plt+0x2a3c>
   14184:	add	r2, sp, #88	; 0x58
   14188:	ldr	r1, [r4, #4]
   1418c:	mov	r0, #3
   14190:	bl	116bc <__xstat64@plt>
   14194:	cmp	r0, #0
   14198:	bne	141b4 <__assert_fail@plt+0x2ab0>
   1419c:	ldrd	r2, [r4, #16]
   141a0:	ldrd	r0, [sp, #88]	; 0x58
   141a4:	cmp	r1, r3
   141a8:	cmpeq	r0, r2
   141ac:	moveq	r5, r4
   141b0:	beq	141c0 <__assert_fail@plt+0x2abc>
   141b4:	mvn	r2, #1
   141b8:	mvn	r3, #0
   141bc:	strd	r2, [r4, #16]
   141c0:	ldr	r4, [r4, #28]
   141c4:	cmp	r4, #0
   141c8:	beq	1422c <__assert_fail@plt+0x2b28>
   141cc:	ldrd	r2, [r4, #16]
   141d0:	cmp	r3, r7
   141d4:	cmpeq	r2, r6
   141d8:	beq	14110 <__assert_fail@plt+0x2a0c>
   141dc:	ldrd	r0, [sl]
   141e0:	ldrd	r2, [r4, #16]
   141e4:	cmp	r1, r3
   141e8:	cmpeq	r0, r2
   141ec:	bne	141c0 <__assert_fail@plt+0x2abc>
   141f0:	movw	r1, #61256	; 0xef48
   141f4:	movt	r1, #1
   141f8:	ldr	r0, [r4, #12]
   141fc:	bl	11320 <strcmp@plt>
   14200:	cmp	r0, #0
   14204:	beq	141c0 <__assert_fail@plt+0x2abc>
   14208:	cmp	r5, #0
   1420c:	beq	14184 <__assert_fail@plt+0x2a80>
   14210:	ldrb	r3, [r5, #24]
   14214:	tst	r3, #1
   14218:	bne	14184 <__assert_fail@plt+0x2a80>
   1421c:	ldrb	r3, [r4, #24]
   14220:	tst	r3, #1
   14224:	bne	141c0 <__assert_fail@plt+0x2abc>
   14228:	b	14184 <__assert_fail@plt+0x2a80>
   1422c:	cmp	r5, #0
   14230:	beq	14330 <__assert_fail@plt+0x2c2c>
   14234:	mov	r3, #0
   14238:	str	r3, [sp, #16]
   1423c:	str	r3, [sp, #12]
   14240:	ldrb	r3, [r5, #24]
   14244:	ubfx	r3, r3, #1, #1
   14248:	str	r3, [sp, #8]
   1424c:	ldrb	r3, [r5, #24]
   14250:	and	r3, r3, #1
   14254:	str	r3, [sp, #4]
   14258:	ldr	r3, [r5, #12]
   1425c:	str	r3, [sp]
   14260:	ldr	r2, [sp, #40]	; 0x28
   14264:	mov	r3, r2
   14268:	ldr	r1, [r5, #4]
   1426c:	ldr	r0, [r5]
   14270:	bl	12000 <__assert_fail@plt+0x8fc>
   14274:	ldr	r3, [sp, #36]	; 0x24
   14278:	add	r3, r3, #1
   1427c:	str	r3, [sp, #36]	; 0x24
   14280:	ldr	r3, [sp, #56]	; 0x38
   14284:	cmp	fp, r3
   14288:	beq	146c4 <__assert_fail@plt+0x2fc0>
   1428c:	ldr	r1, [fp], #4
   14290:	str	r1, [sp, #40]	; 0x28
   14294:	mov	r4, r1
   14298:	cmp	r1, #0
   1429c:	beq	14274 <__assert_fail@plt+0x2b70>
   142a0:	ldr	r3, [sp, #68]	; 0x44
   142a4:	ldr	r3, [r3]
   142a8:	ldr	r2, [sp, #36]	; 0x24
   142ac:	sub	r3, r2, r3
   142b0:	mov	r2, #104	; 0x68
   142b4:	ldr	r0, [sp, #52]	; 0x34
   142b8:	mla	sl, r2, r3, r0
   142bc:	ldr	r3, [sl, #16]
   142c0:	and	r3, r3, #45056	; 0xb000
   142c4:	cmp	r3, #8192	; 0x2000
   142c8:	bne	13f60 <__assert_fail@plt+0x285c>
   142cc:	mov	r0, r1
   142d0:	bl	11680 <canonicalize_file_name@plt>
   142d4:	subs	r2, r0, #0
   142d8:	str	r2, [sp, #72]	; 0x48
   142dc:	beq	13e8c <__assert_fail@plt+0x2788>
   142e0:	ldrb	r3, [r2]
   142e4:	cmp	r3, #47	; 0x2f
   142e8:	moveq	r4, r2
   142ec:	str	r4, [sp, #28]
   142f0:	ldr	r3, [sp, #64]	; 0x40
   142f4:	ldr	r5, [r3, #116]	; 0x74
   142f8:	cmp	r5, #0
   142fc:	beq	1489c <__assert_fail@plt+0x3198>
   14300:	mov	r9, #0
   14304:	str	r9, [sp, #60]	; 0x3c
   14308:	mvn	r2, #0
   1430c:	str	r2, [sp, #44]	; 0x2c
   14310:	str	r9, [sp, #32]
   14314:	str	sl, [sp, #80]	; 0x50
   14318:	str	fp, [sp, #76]	; 0x4c
   1431c:	mov	fp, r3
   14320:	b	14908 <__assert_fail@plt+0x3204>
   14324:	andeq	lr, r1, r8, ror #2
   14328:	andeq	lr, r1, r8, ror r2
   1432c:	andeq	r0, r3, r8, ror r3
   14330:	mov	r1, sl
   14334:	ldr	r5, [sp, #40]	; 0x28
   14338:	mov	r0, r5
   1433c:	bl	149e4 <__assert_fail@plt+0x32e0>
   14340:	subs	r4, r0, #0
   14344:	beq	14274 <__assert_fail@plt+0x2b70>
   14348:	mov	r0, #0
   1434c:	str	r0, [sp, #16]
   14350:	str	r0, [sp, #12]
   14354:	str	r0, [sp, #8]
   14358:	str	r0, [sp, #4]
   1435c:	str	r0, [sp]
   14360:	mov	r3, r0
   14364:	mov	r2, r5
   14368:	mov	r1, r4
   1436c:	bl	12000 <__assert_fail@plt+0x8fc>
   14370:	mov	r0, r4
   14374:	bl	15784 <__assert_fail@plt+0x4080>
   14378:	b	14274 <__assert_fail@plt+0x2b70>
   1437c:	movw	r3, #832	; 0x340
   14380:	movt	r3, #3
   14384:	ldrb	fp, [r3, #45]	; 0x2d
   14388:	ldr	r5, [r3, #116]	; 0x74
   1438c:	mov	r0, #0
   14390:	b	1439c <__assert_fail@plt+0x2c98>
   14394:	add	r0, r0, #1
   14398:	ldr	r5, [r5, #28]
   1439c:	cmp	r5, #0
   143a0:	bne	14394 <__assert_fail@plt+0x2c90>
   143a4:	movw	r3, #6520	; 0x1978
   143a8:	movt	r3, #1
   143ac:	str	r3, [sp]
   143b0:	movw	r3, #6244	; 0x1864
   143b4:	movt	r3, #1
   143b8:	movw	r2, #6204	; 0x183c
   143bc:	movt	r2, #1
   143c0:	mov	r1, #0
   143c4:	bl	1639c <__assert_fail@plt+0x4c98>
   143c8:	movw	r3, #832	; 0x340
   143cc:	movt	r3, #3
   143d0:	str	r0, [r3, #40]	; 0x28
   143d4:	cmp	r0, #0
   143d8:	beq	143f0 <__assert_fail@plt+0x2cec>
   143dc:	movw	r3, #832	; 0x340
   143e0:	movt	r3, #3
   143e4:	ldr	r4, [r3, #116]	; 0x74
   143e8:	mov	r6, r3
   143ec:	b	1445c <__assert_fail@plt+0x2d58>
   143f0:	bl	1b910 <__assert_fail@plt+0xa20c>
   143f4:	ldr	r7, [r4, #12]
   143f8:	mov	r0, r7
   143fc:	bl	1188c <__assert_fail@plt+0x188>
   14400:	cmp	r0, #0
   14404:	beq	14418 <__assert_fail@plt+0x2d14>
   14408:	mov	r0, r7
   1440c:	bl	11900 <__assert_fail@plt+0x1fc>
   14410:	cmp	r0, #0
   14414:	beq	144a0 <__assert_fail@plt+0x2d9c>
   14418:	ldrd	r2, [r4, #16]
   1441c:	strd	r2, [sp, #88]	; 0x58
   14420:	mov	r0, #24
   14424:	bl	1b47c <__assert_fail@plt+0x9d78>
   14428:	mov	r7, r0
   1442c:	str	r4, [r0, #8]
   14430:	ldrd	r2, [sp, #88]	; 0x58
   14434:	strd	r2, [r0]
   14438:	str	r5, [r0, #12]
   1443c:	mov	r1, r0
   14440:	ldr	r0, [r6, #40]	; 0x28
   14444:	bl	16950 <__assert_fail@plt+0x524c>
   14448:	cmp	r0, #0
   1444c:	beq	145f8 <__assert_fail@plt+0x2ef4>
   14450:	str	r7, [r0, #16]
   14454:	ldr	r4, [r4, #28]
   14458:	mov	r5, r7
   1445c:	cmp	r4, #0
   14460:	beq	145fc <__assert_fail@plt+0x2ef8>
   14464:	ldrb	r3, [r4, #24]
   14468:	tst	r3, #2
   1446c:	beq	1447c <__assert_fail@plt+0x2d78>
   14470:	ldrb	r2, [r6, #44]	; 0x2c
   14474:	cmp	r2, #0
   14478:	bne	14418 <__assert_fail@plt+0x2d14>
   1447c:	tst	r3, #1
   14480:	beq	143f4 <__assert_fail@plt+0x2cf0>
   14484:	ldrb	r3, [r6, #45]	; 0x2d
   14488:	cmp	r3, #0
   1448c:	bne	143f4 <__assert_fail@plt+0x2cf0>
   14490:	ldrb	r3, [r6, #46]	; 0x2e
   14494:	cmp	r3, #0
   14498:	beq	14418 <__assert_fail@plt+0x2d14>
   1449c:	b	143f4 <__assert_fail@plt+0x2cf0>
   144a0:	add	r2, sp, #88	; 0x58
   144a4:	ldr	r1, [r4, #4]
   144a8:	mov	r0, #3
   144ac:	bl	116bc <__xstat64@plt>
   144b0:	cmn	r0, #1
   144b4:	beq	14418 <__assert_fail@plt+0x2d14>
   144b8:	ldrd	r0, [sp, #88]	; 0x58
   144bc:	bl	11e14 <__assert_fail@plt+0x710>
   144c0:	subs	r9, r0, #0
   144c4:	beq	14420 <__assert_fail@plt+0x2d1c>
   144c8:	ldr	r7, [r9, #8]
   144cc:	ldr	r0, [r7, #8]
   144d0:	cmp	r0, #0
   144d4:	moveq	r8, #0
   144d8:	beq	14508 <__assert_fail@plt+0x2e04>
   144dc:	ldr	sl, [r4, #8]
   144e0:	cmp	sl, #0
   144e4:	moveq	r8, #0
   144e8:	beq	14508 <__assert_fail@plt+0x2e04>
   144ec:	bl	1153c <strlen@plt>
   144f0:	mov	r8, r0
   144f4:	mov	r0, sl
   144f8:	bl	1153c <strlen@plt>
   144fc:	cmp	r8, r0
   14500:	movcs	r8, #0
   14504:	movcc	r8, #1
   14508:	ldrb	r3, [r6, #53]	; 0x35
   1450c:	cmp	r3, #0
   14510:	bne	14540 <__assert_fail@plt+0x2e3c>
   14514:	ldrb	r3, [r4, #24]
   14518:	tst	r3, #2
   1451c:	beq	14540 <__assert_fail@plt+0x2e3c>
   14520:	ldrb	r3, [r7, #24]
   14524:	tst	r3, #2
   14528:	beq	14540 <__assert_fail@plt+0x2e3c>
   1452c:	ldr	r1, [r4]
   14530:	ldr	r0, [r7]
   14534:	bl	11320 <strcmp@plt>
   14538:	cmp	r0, #0
   1453c:	bne	14420 <__assert_fail@plt+0x2d1c>
   14540:	ldr	r3, [r4]
   14544:	str	r3, [sp, #32]
   14548:	mov	r1, #47	; 0x2f
   1454c:	mov	r0, r3
   14550:	bl	11548 <strchr@plt>
   14554:	cmp	r0, #0
   14558:	beq	14570 <__assert_fail@plt+0x2e6c>
   1455c:	mov	r1, #47	; 0x2f
   14560:	ldr	r0, [r7]
   14564:	bl	11548 <strchr@plt>
   14568:	cmp	r0, #0
   1456c:	beq	145dc <__assert_fail@plt+0x2ed8>
   14570:	ldr	r3, [r7, #4]
   14574:	str	r3, [sp, #28]
   14578:	mov	r0, r3
   1457c:	bl	1153c <strlen@plt>
   14580:	str	r0, [sp, #36]	; 0x24
   14584:	ldr	sl, [r4, #4]
   14588:	mov	r0, sl
   1458c:	bl	1153c <strlen@plt>
   14590:	eor	r8, r8, #1
   14594:	ldr	r2, [sp, #36]	; 0x24
   14598:	cmp	r2, r0
   1459c:	movls	r8, #0
   145a0:	andhi	r8, r8, #1
   145a4:	cmp	r8, #0
   145a8:	bne	145dc <__assert_fail@plt+0x2ed8>
   145ac:	ldr	r1, [sp, #32]
   145b0:	ldr	r0, [r7]
   145b4:	bl	11320 <strcmp@plt>
   145b8:	cmp	r0, #0
   145bc:	moveq	r7, r4
   145c0:	beq	145e0 <__assert_fail@plt+0x2edc>
   145c4:	ldr	r1, [sp, #28]
   145c8:	mov	r0, sl
   145cc:	bl	11320 <strcmp@plt>
   145d0:	cmp	r0, #0
   145d4:	movne	r7, r4
   145d8:	bne	145e0 <__assert_fail@plt+0x2edc>
   145dc:	str	r4, [r9, #8]
   145e0:	ldr	r4, [r4, #28]
   145e4:	cmp	fp, #0
   145e8:	bne	1445c <__assert_fail@plt+0x2d58>
   145ec:	mov	r0, r7
   145f0:	bl	17f4c <__assert_fail@plt+0x6848>
   145f4:	b	1445c <__assert_fail@plt+0x2d58>
   145f8:	bl	1b910 <__assert_fail@plt+0xa20c>
   145fc:	cmp	fp, #0
   14600:	bne	14664 <__assert_fail@plt+0x2f60>
   14604:	movw	r3, #832	; 0x340
   14608:	movt	r3, #3
   1460c:	mov	r2, #0
   14610:	str	r2, [r3, #116]	; 0x74
   14614:	mov	r2, #1
   14618:	b	14630 <__assert_fail@plt+0x2f2c>
   1461c:	ldr	r3, [r5, #8]
   14620:	str	r4, [r3, #28]
   14624:	ldr	r5, [r5, #12]
   14628:	mov	fp, r2
   1462c:	mov	r4, r3
   14630:	cmp	r5, #0
   14634:	bne	1461c <__assert_fail@plt+0x2f18>
   14638:	cmp	fp, #0
   1463c:	beq	1464c <__assert_fail@plt+0x2f48>
   14640:	movw	r3, #832	; 0x340
   14644:	movt	r3, #3
   14648:	str	r4, [r3, #116]	; 0x74
   1464c:	movw	r4, #832	; 0x340
   14650:	movt	r4, #3
   14654:	ldr	r0, [r4, #40]	; 0x28
   14658:	bl	16568 <__assert_fail@plt+0x4e64>
   1465c:	mov	r3, #0
   14660:	str	r3, [r4, #40]	; 0x28
   14664:	movw	r3, #832	; 0x340
   14668:	movt	r3, #3
   1466c:	ldr	r4, [r3, #116]	; 0x74
   14670:	mov	r6, #1
   14674:	mov	r5, #0
   14678:	b	146bc <__assert_fail@plt+0x2fb8>
   1467c:	str	r6, [sp, #16]
   14680:	str	r5, [sp, #12]
   14684:	ldrb	r3, [r4, #24]
   14688:	ubfx	r3, r3, #1, #1
   1468c:	str	r3, [sp, #8]
   14690:	ldrb	r3, [r4, #24]
   14694:	and	r3, r3, #1
   14698:	str	r3, [sp, #4]
   1469c:	ldr	r3, [r4, #12]
   146a0:	str	r3, [sp]
   146a4:	mov	r3, r5
   146a8:	mov	r2, r5
   146ac:	ldr	r1, [r4, #4]
   146b0:	ldr	r0, [r4]
   146b4:	bl	12000 <__assert_fail@plt+0x8fc>
   146b8:	ldr	r4, [r4, #28]
   146bc:	cmp	r4, #0
   146c0:	bne	1467c <__assert_fail@plt+0x2f78>
   146c4:	movw	r3, #832	; 0x340
   146c8:	movt	r3, #3
   146cc:	ldrb	r3, [r3, #52]	; 0x34
   146d0:	cmp	r3, #0
   146d4:	bne	146fc <__assert_fail@plt+0x2ff8>
   146d8:	movw	r3, #832	; 0x340
   146dc:	movt	r3, #3
   146e0:	ldr	r3, [r3, #48]	; 0x30
   146e4:	cmp	r3, #0
   146e8:	beq	14878 <__assert_fail@plt+0x3174>
   146ec:	movw	r3, #832	; 0x340
   146f0:	movt	r3, #3
   146f4:	ldr	r0, [r3, #48]	; 0x30
   146f8:	bl	11530 <exit@plt>
   146fc:	movw	r3, #832	; 0x340
   14700:	movt	r3, #3
   14704:	ldrb	r3, [r3, #53]	; 0x35
   14708:	cmp	r3, #0
   1470c:	beq	14760 <__assert_fail@plt+0x305c>
   14710:	movw	r3, #380	; 0x17c
   14714:	movt	r3, #3
   14718:	ldrb	ip, [r3, #24]
   1471c:	movw	r1, #58036	; 0xe2b4
   14720:	movt	r1, #1
   14724:	movw	r0, #60780	; 0xed6c
   14728:	movt	r0, #1
   1472c:	mov	r2, #0
   14730:	str	r2, [sp, #16]
   14734:	ldr	r3, [pc, #-1040]	; 1432c <__assert_fail@plt+0x2c28>
   14738:	str	r3, [sp, #12]
   1473c:	str	r2, [sp, #8]
   14740:	str	r2, [sp, #4]
   14744:	str	r2, [sp]
   14748:	mov	r3, r2
   1474c:	cmp	ip, r2
   14750:	moveq	r1, r0
   14754:	movw	r0, #60780	; 0xed6c
   14758:	movt	r0, #1
   1475c:	bl	12000 <__assert_fail@plt+0x8fc>
   14760:	mov	r7, #0
   14764:	movw	r4, #832	; 0x340
   14768:	movt	r4, #3
   1476c:	movw	r6, #820	; 0x334
   14770:	movt	r6, #3
   14774:	b	14850 <__assert_fail@plt+0x314c>
   14778:	ldr	r3, [r4, #8]
   1477c:	sub	r3, r3, #1
   14780:	ldr	r2, [r4, #12]
   14784:	ldr	r1, [r2, r8]
   14788:	ldr	r1, [r1, #16]
   1478c:	str	r1, [sp, #88]	; 0x58
   14790:	ldr	r2, [r2, r8]
   14794:	cmp	r5, r3
   14798:	moveq	r3, #8
   1479c:	movne	r3, #0
   147a0:	ldr	r2, [r2, #20]
   147a4:	add	r1, sp, #88	; 0x58
   147a8:	mov	r0, fp
   147ac:	bl	17b60 <__assert_fail@plt+0x645c>
   147b0:	subs	fp, r0, #0
   147b4:	ldreq	r3, [r4, #20]
   147b8:	ldreq	r3, [r3, sl]
   147bc:	ldreq	r0, [r3, r8]
   147c0:	movne	r0, fp
   147c4:	ldr	r1, [r6]
   147c8:	bl	112f0 <fputs_unlocked@plt>
   147cc:	mov	r0, fp
   147d0:	bl	15784 <__assert_fail@plt+0x4080>
   147d4:	add	r5, r5, #1
   147d8:	ldr	r3, [r4, #8]
   147dc:	cmp	r5, r3
   147e0:	bcs	14828 <__assert_fail@plt+0x3124>
   147e4:	lsl	r8, r5, #2
   147e8:	ldr	r3, [r4, #20]
   147ec:	ldr	r3, [r3, sl]
   147f0:	ldr	fp, [r3, r5, lsl #2]
   147f4:	cmp	r5, #0
   147f8:	beq	14778 <__assert_fail@plt+0x3074>
   147fc:	ldr	r0, [r6]
   14800:	ldr	r3, [r0, #20]
   14804:	ldr	r2, [r0, #24]
   14808:	cmp	r3, r2
   1480c:	addcc	r2, r3, #1
   14810:	strcc	r2, [r0, #20]
   14814:	strbcc	r9, [r3]
   14818:	bcc	14778 <__assert_fail@plt+0x3074>
   1481c:	mov	r1, r9
   14820:	bl	11608 <__overflow@plt>
   14824:	b	14778 <__assert_fail@plt+0x3074>
   14828:	ldr	r0, [r6]
   1482c:	ldr	r3, [r0, #20]
   14830:	ldr	r2, [r0, #24]
   14834:	cmp	r3, r2
   14838:	addcc	r2, r3, #1
   1483c:	strcc	r2, [r0, #20]
   14840:	movcc	r2, #10
   14844:	strbcc	r2, [r3]
   14848:	bcs	1486c <__assert_fail@plt+0x3168>
   1484c:	add	r7, r7, #1
   14850:	ldr	r3, [r4, #16]
   14854:	cmp	r7, r3
   14858:	bcs	146ec <__assert_fail@plt+0x2fe8>
   1485c:	lsl	sl, r7, #2
   14860:	mov	r5, #0
   14864:	mov	r9, #32
   14868:	b	147d8 <__assert_fail@plt+0x30d4>
   1486c:	mov	r1, #10
   14870:	bl	11608 <__overflow@plt>
   14874:	b	1484c <__assert_fail@plt+0x3148>
   14878:	mov	r2, #5
   1487c:	movw	r1, #61264	; 0xef50
   14880:	movt	r1, #1
   14884:	mov	r0, #0
   14888:	bl	113bc <dcgettext@plt>
   1488c:	mov	r2, r0
   14890:	mov	r1, #0
   14894:	mov	r0, #1
   14898:	bl	11494 <error@plt>
   1489c:	ldr	r0, [sp, #72]	; 0x48
   148a0:	bl	15784 <__assert_fail@plt+0x4080>
   148a4:	b	13f60 <__assert_fail@plt+0x285c>
   148a8:	mov	r4, r7
   148ac:	ldr	r3, [r5, #4]
   148b0:	str	r3, [sp, #48]	; 0x30
   148b4:	mov	r0, r3
   148b8:	bl	1153c <strlen@plt>
   148bc:	mov	sl, r0
   148c0:	ldr	r3, [sp, #32]
   148c4:	eor	r7, r3, #1
   148c8:	uxtb	r7, r7
   148cc:	ldr	r3, [sp, #44]	; 0x2c
   148d0:	cmp	r0, r3
   148d4:	movcs	r8, #0
   148d8:	movcc	r8, #1
   148dc:	orrs	r9, r7, r8
   148e0:	bne	13e98 <__assert_fail@plt+0x2794>
   148e4:	mov	r3, #1
   148e8:	str	r3, [sp, #32]
   148ec:	mov	r0, r4
   148f0:	bl	15784 <__assert_fail@plt+0x4080>
   148f4:	mov	r0, r6
   148f8:	bl	15784 <__assert_fail@plt+0x4080>
   148fc:	ldr	r5, [r5, #28]
   14900:	cmp	r5, #0
   14904:	beq	13f3c <__assert_fail@plt+0x2838>
   14908:	ldr	r8, [r5]
   1490c:	mov	r0, r8
   14910:	bl	11680 <canonicalize_file_name@plt>
   14914:	subs	r6, r0, #0
   14918:	beq	14928 <__assert_fail@plt+0x3224>
   1491c:	ldrb	r3, [r6]
   14920:	cmp	r3, #47	; 0x2f
   14924:	moveq	r8, r6
   14928:	mov	r1, r8
   1492c:	ldr	r0, [sp, #28]
   14930:	bl	11320 <strcmp@plt>
   14934:	cmp	r0, #0
   14938:	bne	148f4 <__assert_fail@plt+0x31f0>
   1493c:	ldr	r9, [r5, #4]
   14940:	ldr	r4, [fp, #116]	; 0x74
   14944:	cmp	r4, #0
   14948:	beq	148ac <__assert_fail@plt+0x31a8>
   1494c:	mov	r7, #0
   14950:	mov	r1, r9
   14954:	ldr	r0, [r4, #4]
   14958:	bl	11320 <strcmp@plt>
   1495c:	cmp	r0, #0
   14960:	moveq	r7, r4
   14964:	ldr	r4, [r4, #28]
   14968:	cmp	r4, #0
   1496c:	bne	14950 <__assert_fail@plt+0x324c>
   14970:	cmp	r7, #0
   14974:	beq	148a8 <__assert_fail@plt+0x31a4>
   14978:	ldr	r0, [r7]
   1497c:	bl	11680 <canonicalize_file_name@plt>
   14980:	subs	r4, r0, #0
   14984:	beq	14994 <__assert_fail@plt+0x3290>
   14988:	ldrb	r3, [r4]
   1498c:	cmp	r3, #47	; 0x2f
   14990:	beq	149a8 <__assert_fail@plt+0x32a4>
   14994:	mov	r0, r4
   14998:	bl	15784 <__assert_fail@plt+0x4080>
   1499c:	ldr	r0, [r7]
   149a0:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   149a4:	mov	r4, r0
   149a8:	mov	r1, r8
   149ac:	mov	r0, r4
   149b0:	bl	11320 <strcmp@plt>
   149b4:	cmp	r0, #0
   149b8:	beq	148ac <__assert_fail@plt+0x31a8>
   149bc:	mov	r9, #1
   149c0:	b	148ec <__assert_fail@plt+0x31e8>
   149c4:	mov	r0, #1
   149c8:	add	sp, sp, #196	; 0xc4
   149cc:	ldrd	r4, [sp]
   149d0:	ldrd	r6, [sp, #8]
   149d4:	ldrd	r8, [sp, #16]
   149d8:	ldrd	sl, [sp, #24]
   149dc:	add	sp, sp, #32
   149e0:	pop	{pc}		; (ldr pc, [sp], #4)
   149e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   149e8:	str	r6, [sp, #8]
   149ec:	str	fp, [sp, #12]
   149f0:	str	lr, [sp, #16]
   149f4:	add	fp, sp, #16
   149f8:	sub	sp, sp, #220	; 0xdc
   149fc:	mov	r5, r0
   14a00:	mov	r4, r1
   14a04:	sub	r0, fp, #28
   14a08:	bl	1ac6c <__assert_fail@plt+0x9568>
   14a0c:	cmp	r0, #0
   14a10:	bne	14a98 <__assert_fail@plt+0x3394>
   14a14:	ldr	r3, [r4, #16]
   14a18:	and	r3, r3, #61440	; 0xf000
   14a1c:	cmp	r3, #16384	; 0x4000
   14a20:	beq	14acc <__assert_fail@plt+0x33c8>
   14a24:	mov	r0, r5
   14a28:	bl	1559c <__assert_fail@plt+0x3e98>
   14a2c:	mov	r4, r0
   14a30:	bl	1153c <strlen@plt>
   14a34:	add	r3, r0, #8
   14a38:	bic	r3, r3, #7
   14a3c:	sub	sp, sp, r3
   14a40:	add	r2, r0, #1
   14a44:	mov	r1, r4
   14a48:	mov	r0, sp
   14a4c:	bl	11374 <memcpy@plt>
   14a50:	mov	r5, r0
   14a54:	mov	r0, r4
   14a58:	bl	15784 <__assert_fail@plt+0x4080>
   14a5c:	mov	r0, r5
   14a60:	bl	11404 <chdir@plt>
   14a64:	cmp	r0, #0
   14a68:	blt	14b34 <__assert_fail@plt+0x3430>
   14a6c:	sub	r2, fp, #132	; 0x84
   14a70:	movw	r1, #61784	; 0xf158
   14a74:	movt	r1, #1
   14a78:	mov	r0, #3
   14a7c:	bl	116bc <__xstat64@plt>
   14a80:	cmp	r0, #0
   14a84:	blt	14b7c <__assert_fail@plt+0x3478>
   14a88:	movw	r4, #61828	; 0xf184
   14a8c:	movt	r4, #1
   14a90:	mov	r5, #3
   14a94:	b	14c60 <__assert_fail@plt+0x355c>
   14a98:	bl	1156c <__errno_location@plt>
   14a9c:	ldr	r4, [r0]
   14aa0:	mov	r2, #5
   14aa4:	movw	r1, #61720	; 0xf118
   14aa8:	movt	r1, #1
   14aac:	mov	r0, #0
   14ab0:	bl	113bc <dcgettext@plt>
   14ab4:	mov	r2, r0
   14ab8:	mov	r1, r4
   14abc:	mov	r0, #0
   14ac0:	bl	11494 <error@plt>
   14ac4:	mov	r5, #0
   14ac8:	b	14c34 <__assert_fail@plt+0x3530>
   14acc:	mov	r2, #104	; 0x68
   14ad0:	mov	r1, r4
   14ad4:	sub	r0, fp, #132	; 0x84
   14ad8:	bl	11374 <memcpy@plt>
   14adc:	mov	r0, r5
   14ae0:	bl	11404 <chdir@plt>
   14ae4:	cmp	r0, #0
   14ae8:	bge	14a88 <__assert_fail@plt+0x3384>
   14aec:	bl	1156c <__errno_location@plt>
   14af0:	ldr	r4, [r0]
   14af4:	mov	r2, #5
   14af8:	movw	r1, #61752	; 0xf138
   14afc:	movt	r1, #1
   14b00:	mov	r0, #0
   14b04:	bl	113bc <dcgettext@plt>
   14b08:	mov	r6, r0
   14b0c:	mov	r1, r5
   14b10:	mov	r0, #4
   14b14:	bl	1a95c <__assert_fail@plt+0x9258>
   14b18:	mov	r3, r0
   14b1c:	mov	r2, r6
   14b20:	mov	r1, r4
   14b24:	mov	r0, #0
   14b28:	bl	11494 <error@plt>
   14b2c:	mov	r5, #0
   14b30:	b	14c34 <__assert_fail@plt+0x3530>
   14b34:	bl	1156c <__errno_location@plt>
   14b38:	ldr	r4, [r0]
   14b3c:	mov	r2, #5
   14b40:	movw	r1, #61752	; 0xf138
   14b44:	movt	r1, #1
   14b48:	mov	r0, #0
   14b4c:	bl	113bc <dcgettext@plt>
   14b50:	mov	r6, r0
   14b54:	mov	r1, r5
   14b58:	mov	r0, #4
   14b5c:	bl	1a95c <__assert_fail@plt+0x9258>
   14b60:	mov	r3, r0
   14b64:	mov	r2, r6
   14b68:	mov	r1, r4
   14b6c:	mov	r0, #0
   14b70:	bl	11494 <error@plt>
   14b74:	mov	r5, #0
   14b78:	b	14c34 <__assert_fail@plt+0x3530>
   14b7c:	bl	1156c <__errno_location@plt>
   14b80:	ldr	r4, [r0]
   14b84:	mov	r2, #5
   14b88:	movw	r1, #61788	; 0xf15c
   14b8c:	movt	r1, #1
   14b90:	mov	r0, #0
   14b94:	bl	113bc <dcgettext@plt>
   14b98:	mov	r6, r0
   14b9c:	mov	r1, r5
   14ba0:	mov	r0, #4
   14ba4:	bl	1a95c <__assert_fail@plt+0x9258>
   14ba8:	mov	r3, r0
   14bac:	mov	r2, r6
   14bb0:	mov	r1, r4
   14bb4:	mov	r0, #0
   14bb8:	bl	11494 <error@plt>
   14bbc:	mov	r5, #0
   14bc0:	b	14c0c <__assert_fail@plt+0x3508>
   14bc4:	bl	1156c <__errno_location@plt>
   14bc8:	ldr	r4, [r0]
   14bcc:	mov	r2, #5
   14bd0:	movw	r1, #61832	; 0xf188
   14bd4:	movt	r1, #1
   14bd8:	mov	r0, #0
   14bdc:	bl	113bc <dcgettext@plt>
   14be0:	mov	r5, r0
   14be4:	movw	r1, #61828	; 0xf184
   14be8:	movt	r1, #1
   14bec:	mov	r0, #4
   14bf0:	bl	1a95c <__assert_fail@plt+0x9258>
   14bf4:	mov	r3, r0
   14bf8:	mov	r2, r5
   14bfc:	mov	r1, r4
   14c00:	mov	r0, #0
   14c04:	bl	11494 <error@plt>
   14c08:	mov	r5, #0
   14c0c:	bl	1156c <__errno_location@plt>
   14c10:	mov	r4, r0
   14c14:	ldr	r6, [r0]
   14c18:	sub	r0, fp, #28
   14c1c:	bl	1accc <__assert_fail@plt+0x95c8>
   14c20:	cmp	r0, #0
   14c24:	bne	14d04 <__assert_fail@plt+0x3600>
   14c28:	sub	r0, fp, #28
   14c2c:	bl	1ad00 <__assert_fail@plt+0x95fc>
   14c30:	str	r6, [r4]
   14c34:	mov	r0, r5
   14c38:	sub	sp, fp, #16
   14c3c:	ldrd	r4, [sp]
   14c40:	ldr	r6, [sp, #8]
   14c44:	ldr	fp, [sp, #12]
   14c48:	add	sp, sp, #16
   14c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c50:	mov	r2, #104	; 0x68
   14c54:	sub	r1, fp, #236	; 0xec
   14c58:	sub	r0, fp, #132	; 0x84
   14c5c:	bl	11374 <memcpy@plt>
   14c60:	sub	r2, fp, #236	; 0xec
   14c64:	mov	r1, r4
   14c68:	mov	r0, r5
   14c6c:	bl	116bc <__xstat64@plt>
   14c70:	cmp	r0, #0
   14c74:	blt	14bc4 <__assert_fail@plt+0x34c0>
   14c78:	ldrd	r0, [fp, #-236]	; 0xffffff14
   14c7c:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   14c80:	cmp	r1, r3
   14c84:	cmpeq	r0, r2
   14c88:	bne	14cf8 <__assert_fail@plt+0x35f4>
   14c8c:	ldrd	r0, [fp, #-140]	; 0xffffff74
   14c90:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14c94:	cmp	r1, r3
   14c98:	cmpeq	r0, r2
   14c9c:	beq	14cf8 <__assert_fail@plt+0x35f4>
   14ca0:	mov	r0, r4
   14ca4:	bl	11404 <chdir@plt>
   14ca8:	cmp	r0, #0
   14cac:	bge	14c50 <__assert_fail@plt+0x354c>
   14cb0:	bl	1156c <__errno_location@plt>
   14cb4:	ldr	r4, [r0]
   14cb8:	mov	r2, #5
   14cbc:	movw	r1, #61752	; 0xf138
   14cc0:	movt	r1, #1
   14cc4:	mov	r0, #0
   14cc8:	bl	113bc <dcgettext@plt>
   14ccc:	mov	r5, r0
   14cd0:	movw	r1, #61828	; 0xf184
   14cd4:	movt	r1, #1
   14cd8:	mov	r0, #4
   14cdc:	bl	1a95c <__assert_fail@plt+0x9258>
   14ce0:	mov	r3, r0
   14ce4:	mov	r2, r5
   14ce8:	mov	r1, r4
   14cec:	mov	r0, #0
   14cf0:	bl	11494 <error@plt>
   14cf4:	b	14c08 <__assert_fail@plt+0x3504>
   14cf8:	bl	1b954 <__assert_fail@plt+0xa250>
   14cfc:	mov	r5, r0
   14d00:	b	14c0c <__assert_fail@plt+0x3508>
   14d04:	ldr	r4, [r4]
   14d08:	mov	r2, #5
   14d0c:	movw	r1, #61848	; 0xf198
   14d10:	movt	r1, #1
   14d14:	mov	r0, #0
   14d18:	bl	113bc <dcgettext@plt>
   14d1c:	mov	r2, r0
   14d20:	mov	r1, r4
   14d24:	mov	r0, #1
   14d28:	bl	11494 <error@plt>
   14d2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d30:	strd	r6, [sp, #8]
   14d34:	strd	r8, [sp, #16]
   14d38:	strd	sl, [sp, #24]
   14d3c:	str	lr, [sp, #32]
   14d40:	sub	sp, sp, #3232	; 0xca0
   14d44:	sub	sp, sp, #12
   14d48:	and	sl, r1, #3
   14d4c:	sub	r3, sl, #1
   14d50:	tst	r3, sl
   14d54:	bne	14df4 <__assert_fail@plt+0x36f0>
   14d58:	mov	r8, r0
   14d5c:	mov	r5, r1
   14d60:	cmp	r0, #0
   14d64:	beq	14e08 <__assert_fail@plt+0x3704>
   14d68:	ldrb	r2, [r0]
   14d6c:	cmp	r2, #0
   14d70:	beq	14e1c <__assert_fail@plt+0x3718>
   14d74:	add	r3, sp, #152	; 0x98
   14d78:	str	r3, [sp, #144]	; 0x90
   14d7c:	mov	r3, #1024	; 0x400
   14d80:	str	r3, [sp, #148]	; 0x94
   14d84:	add	r1, sp, #1184	; 0x4a0
   14d88:	str	r1, [sp, #1176]	; 0x498
   14d8c:	str	r3, [sp, #1180]	; 0x49c
   14d90:	add	r1, sp, #2208	; 0x8a0
   14d94:	add	r1, r1, #8
   14d98:	str	r1, [sp, #2208]	; 0x8a0
   14d9c:	str	r3, [sp, #2212]	; 0x8a4
   14da0:	cmp	r2, #47	; 0x2f
   14da4:	addne	r4, sp, #2208	; 0x8a0
   14da8:	addne	r4, r4, #8
   14dac:	beq	14e4c <__assert_fail@plt+0x3748>
   14db0:	ldr	r1, [sp, #2212]	; 0x8a4
   14db4:	mov	r0, r4
   14db8:	bl	11524 <getcwd@plt>
   14dbc:	cmp	r0, #0
   14dc0:	bne	14e34 <__assert_fail@plt+0x3730>
   14dc4:	bl	1156c <__errno_location@plt>
   14dc8:	ldr	r3, [r0]
   14dcc:	cmp	r3, #12
   14dd0:	beq	14e30 <__assert_fail@plt+0x372c>
   14dd4:	cmp	r3, #34	; 0x22
   14dd8:	bne	153a8 <__assert_fail@plt+0x3ca4>
   14ddc:	add	r0, sp, #2208	; 0x8a0
   14de0:	bl	1ad90 <__assert_fail@plt+0x968c>
   14de4:	cmp	r0, #0
   14de8:	beq	14e30 <__assert_fail@plt+0x372c>
   14dec:	ldr	r4, [sp, #2208]	; 0x8a0
   14df0:	b	14db0 <__assert_fail@plt+0x36ac>
   14df4:	bl	1156c <__errno_location@plt>
   14df8:	mov	r3, #22
   14dfc:	str	r3, [r0]
   14e00:	mov	r0, #0
   14e04:	b	153fc <__assert_fail@plt+0x3cf8>
   14e08:	bl	1156c <__errno_location@plt>
   14e0c:	mov	r3, #22
   14e10:	str	r3, [r0]
   14e14:	mov	r0, r8
   14e18:	b	153fc <__assert_fail@plt+0x3cf8>
   14e1c:	bl	1156c <__errno_location@plt>
   14e20:	mov	r3, #2
   14e24:	str	r3, [r0]
   14e28:	mov	r0, #0
   14e2c:	b	153fc <__assert_fail@plt+0x3cf8>
   14e30:	bl	1b910 <__assert_fail@plt+0xa20c>
   14e34:	mov	r1, #0
   14e38:	mov	r0, r4
   14e3c:	bl	113f8 <rawmemchr@plt>
   14e40:	mov	fp, r4
   14e44:	mov	r4, r0
   14e48:	b	14e60 <__assert_fail@plt+0x375c>
   14e4c:	mov	r3, #47	; 0x2f
   14e50:	strb	r3, [sp, #2216]	; 0x8a8
   14e54:	add	fp, sp, #2208	; 0x8a0
   14e58:	add	fp, fp, #8
   14e5c:	add	r4, fp, #1
   14e60:	and	r3, r5, #4
   14e64:	str	r3, [sp, #12]
   14e68:	mov	r3, #0
   14e6c:	str	r3, [sp, #16]
   14e70:	str	r3, [sp, #20]
   14e74:	str	r3, [sp, #24]
   14e78:	movw	r3, #61784	; 0xf158
   14e7c:	movt	r3, #1
   14e80:	str	r3, [sp, #28]
   14e84:	b	15220 <__assert_fail@plt+0x3b1c>
   14e88:	ldrb	r3, [r8, #1]
   14e8c:	cmp	r3, #46	; 0x2e
   14e90:	bne	15294 <__assert_fail@plt+0x3b90>
   14e94:	add	r3, fp, #1
   14e98:	cmp	r4, r3
   14e9c:	bls	1521c <__assert_fail@plt+0x3b18>
   14ea0:	sub	r3, r4, #1
   14ea4:	cmp	fp, r3
   14ea8:	bcs	15360 <__assert_fail@plt+0x3c5c>
   14eac:	ldrb	r2, [r4, #-2]
   14eb0:	cmp	r2, #47	; 0x2f
   14eb4:	moveq	r4, r3
   14eb8:	beq	1521c <__assert_fail@plt+0x3b18>
   14ebc:	sub	r3, r4, #2
   14ec0:	mov	r1, fp
   14ec4:	mov	r4, r3
   14ec8:	cmp	r3, r1
   14ecc:	beq	1521c <__assert_fail@plt+0x3b18>
   14ed0:	ldrb	r2, [r3, #-1]!
   14ed4:	cmp	r2, #47	; 0x2f
   14ed8:	beq	1521c <__assert_fail@plt+0x3b18>
   14edc:	b	14ec4 <__assert_fail@plt+0x37c0>
   14ee0:	bl	1b910 <__assert_fail@plt+0xa20c>
   14ee4:	ldr	r9, [sp, #1176]	; 0x498
   14ee8:	ldr	r6, [sp, #1180]	; 0x49c
   14eec:	sub	r6, r6, #1
   14ef0:	mov	r2, r6
   14ef4:	mov	r1, r9
   14ef8:	mov	r0, fp
   14efc:	bl	11428 <readlink@plt>
   14f00:	cmp	r6, r0
   14f04:	bgt	14f20 <__assert_fail@plt+0x381c>
   14f08:	add	r0, sp, #1168	; 0x490
   14f0c:	add	r0, r0, #8
   14f10:	bl	1ad90 <__assert_fail@plt+0x968c>
   14f14:	cmp	r0, #0
   14f18:	bne	14ee4 <__assert_fail@plt+0x37e0>
   14f1c:	bl	1b910 <__assert_fail@plt+0xa20c>
   14f20:	mov	r7, r0
   14f24:	cmp	r0, #0
   14f28:	blt	15314 <__assert_fail@plt+0x3c10>
   14f2c:	ldr	r3, [sp, #24]
   14f30:	cmp	r3, #19
   14f34:	addle	r3, r3, #1
   14f38:	strle	r3, [sp, #24]
   14f3c:	ble	15024 <__assert_fail@plt+0x3920>
   14f40:	ldrb	r3, [r8]
   14f44:	cmp	r3, #0
   14f48:	beq	15024 <__assert_fail@plt+0x3920>
   14f4c:	sub	r6, r8, r5
   14f50:	mov	r3, #0
   14f54:	strb	r3, [r4, r6]
   14f58:	ldrb	r1, [fp]
   14f5c:	add	r2, sp, #40	; 0x28
   14f60:	ldr	r3, [sp, #28]
   14f64:	cmp	r1, #0
   14f68:	movne	r3, fp
   14f6c:	mov	r1, r3
   14f70:	mov	r0, #3
   14f74:	bl	116bc <__xstat64@plt>
   14f78:	cmp	r0, #0
   14f7c:	bne	14fc4 <__assert_fail@plt+0x38c0>
   14f80:	ldrb	r3, [r8]
   14f84:	strb	r3, [r4, r6]
   14f88:	ldr	r3, [sp, #16]
   14f8c:	cmp	r3, #0
   14f90:	beq	14fdc <__assert_fail@plt+0x38d8>
   14f94:	add	r2, sp, #40	; 0x28
   14f98:	mov	r1, r8
   14f9c:	ldr	r6, [sp, #16]
   14fa0:	mov	r0, r6
   14fa4:	bl	15734 <__assert_fail@plt+0x4030>
   14fa8:	cmp	r0, #0
   14fac:	beq	15014 <__assert_fail@plt+0x3910>
   14fb0:	cmp	sl, #2
   14fb4:	beq	1521c <__assert_fail@plt+0x3b18>
   14fb8:	bl	1156c <__errno_location@plt>
   14fbc:	mov	r3, #40	; 0x28
   14fc0:	str	r3, [r0]
   14fc4:	mov	r6, #1
   14fc8:	ldr	r0, [sp, #16]
   14fcc:	cmp	r0, #0
   14fd0:	beq	153b0 <__assert_fail@plt+0x3cac>
   14fd4:	bl	16568 <__assert_fail@plt+0x4e64>
   14fd8:	b	153b0 <__assert_fail@plt+0x3cac>
   14fdc:	movw	r3, #27504	; 0x6b70
   14fe0:	movt	r3, #1
   14fe4:	str	r3, [sp]
   14fe8:	movw	r3, #27404	; 0x6b0c
   14fec:	movt	r3, #1
   14ff0:	movw	r2, #27332	; 0x6ac4
   14ff4:	movt	r2, #1
   14ff8:	mov	r1, #0
   14ffc:	mov	r0, #7
   15000:	bl	1639c <__assert_fail@plt+0x4c98>
   15004:	subs	r3, r0, #0
   15008:	str	r3, [sp, #16]
   1500c:	bne	14f94 <__assert_fail@plt+0x3890>
   15010:	bl	1b910 <__assert_fail@plt+0xa20c>
   15014:	add	r2, sp, #40	; 0x28
   15018:	mov	r1, r8
   1501c:	mov	r0, r6
   15020:	bl	156b0 <__assert_fail@plt+0x3fac>
   15024:	mov	r3, #0
   15028:	strb	r3, [r9, r7]
   1502c:	ldr	r8, [sp, #144]	; 0x90
   15030:	ldr	r3, [sp, #20]
   15034:	cmp	r3, #0
   15038:	beq	15444 <__assert_fail@plt+0x3d40>
   1503c:	sub	r3, r5, r8
   15040:	str	r3, [sp, #36]	; 0x24
   15044:	mov	r0, r5
   15048:	bl	1153c <strlen@plt>
   1504c:	str	r0, [sp, #32]
   15050:	add	r6, r7, r0
   15054:	ldr	r3, [sp, #148]	; 0x94
   15058:	cmp	r3, r6
   1505c:	bhi	1508c <__assert_fail@plt+0x3988>
   15060:	add	r0, sp, #144	; 0x90
   15064:	bl	1ae14 <__assert_fail@plt+0x9710>
   15068:	cmp	r0, #0
   1506c:	beq	15104 <__assert_fail@plt+0x3a00>
   15070:	ldr	r3, [sp, #148]	; 0x94
   15074:	cmp	r3, r6
   15078:	bls	15060 <__assert_fail@plt+0x395c>
   1507c:	ldr	r8, [sp, #144]	; 0x90
   15080:	ldr	r3, [sp, #20]
   15084:	cmp	r3, #0
   15088:	beq	15094 <__assert_fail@plt+0x3990>
   1508c:	ldr	r3, [sp, #36]	; 0x24
   15090:	add	r5, r8, r3
   15094:	ldr	r3, [sp, #32]
   15098:	add	r2, r3, #1
   1509c:	mov	r1, r5
   150a0:	add	r0, r8, r7
   150a4:	bl	11344 <memmove@plt>
   150a8:	mov	r2, r7
   150ac:	mov	r1, r9
   150b0:	mov	r0, r8
   150b4:	bl	11374 <memcpy@plt>
   150b8:	mov	r5, r0
   150bc:	ldrb	r3, [r9]
   150c0:	cmp	r3, #47	; 0x2f
   150c4:	beq	15108 <__assert_fail@plt+0x3a04>
   150c8:	add	r3, fp, #1
   150cc:	cmp	r4, r3
   150d0:	movls	r3, #1
   150d4:	strls	r3, [sp, #20]
   150d8:	bls	1521c <__assert_fail@plt+0x3b18>
   150dc:	sub	r3, r4, #1
   150e0:	cmp	r3, fp
   150e4:	bls	15368 <__assert_fail@plt+0x3c64>
   150e8:	ldrb	r2, [r4, #-2]
   150ec:	cmp	r2, #47	; 0x2f
   150f0:	bne	1511c <__assert_fail@plt+0x3a18>
   150f4:	mov	r4, r3
   150f8:	mov	r3, #1
   150fc:	str	r3, [sp, #20]
   15100:	b	1521c <__assert_fail@plt+0x3b18>
   15104:	bl	1b910 <__assert_fail@plt+0xa20c>
   15108:	mov	r4, fp
   1510c:	strb	r3, [r4], #1
   15110:	mov	r3, #1
   15114:	str	r3, [sp, #20]
   15118:	b	1521c <__assert_fail@plt+0x3b18>
   1511c:	sub	r3, r4, #2
   15120:	mov	r1, fp
   15124:	mov	r4, r3
   15128:	cmp	r3, r1
   1512c:	beq	15378 <__assert_fail@plt+0x3c74>
   15130:	ldrb	r2, [r3, #-1]!
   15134:	cmp	r2, #47	; 0x2f
   15138:	bne	15124 <__assert_fail@plt+0x3a20>
   1513c:	mov	r3, #1
   15140:	str	r3, [sp, #20]
   15144:	b	1521c <__assert_fail@plt+0x3b18>
   15148:	mov	r3, r1
   1514c:	add	r1, r3, #1
   15150:	ldrb	r2, [r3, #1]
   15154:	cmp	r2, #47	; 0x2f
   15158:	beq	15148 <__assert_fail@plt+0x3a44>
   1515c:	add	r3, r3, #2
   15160:	cmp	r2, #0
   15164:	beq	15194 <__assert_fail@plt+0x3a90>
   15168:	cmp	r2, #46	; 0x2e
   1516c:	bne	151c4 <__assert_fail@plt+0x3ac0>
   15170:	ldrb	r2, [r1, #1]
   15174:	cmp	r2, #0
   15178:	beq	15194 <__assert_fail@plt+0x3a90>
   1517c:	cmp	r2, #46	; 0x2e
   15180:	bne	15320 <__assert_fail@plt+0x3c1c>
   15184:	ldrb	r2, [r1, #2]
   15188:	cmp	r2, #47	; 0x2f
   1518c:	cmpne	r2, #0
   15190:	bne	15320 <__assert_fail@plt+0x3c1c>
   15194:	movw	r3, #61912	; 0xf1d8
   15198:	movt	r3, #1
   1519c:	ldrh	r3, [r3]
   151a0:	strh	r3, [r4]
   151a4:	mov	r3, #512	; 0x200
   151a8:	mov	r2, #0
   151ac:	mov	r1, fp
   151b0:	mvn	r0, #99	; 0x63
   151b4:	bl	1135c <faccessat@plt>
   151b8:	adds	r6, r0, #0
   151bc:	movne	r6, #1
   151c0:	b	151e0 <__assert_fail@plt+0x3adc>
   151c4:	ldr	r3, [sp, #12]
   151c8:	cmp	r3, #0
   151cc:	bne	15330 <__assert_fail@plt+0x3c2c>
   151d0:	bl	1156c <__errno_location@plt>
   151d4:	ldr	r6, [r0]
   151d8:	subs	r6, r6, #22
   151dc:	movne	r6, #1
   151e0:	cmp	r6, #0
   151e4:	beq	1521c <__assert_fail@plt+0x3b18>
   151e8:	cmp	sl, #1
   151ec:	bne	14fc8 <__assert_fail@plt+0x38c4>
   151f0:	bl	1156c <__errno_location@plt>
   151f4:	ldr	r3, [r0]
   151f8:	cmp	r3, #2
   151fc:	bne	14fc8 <__assert_fail@plt+0x38c4>
   15200:	movw	r1, #61912	; 0xf1d8
   15204:	movt	r1, #1
   15208:	mov	r0, r5
   1520c:	bl	116f8 <strspn@plt>
   15210:	ldrb	r3, [r5, r0]
   15214:	cmp	r3, #0
   15218:	bne	14fc8 <__assert_fail@plt+0x38c4>
   1521c:	mov	r8, r5
   15220:	ldrb	r3, [r8]
   15224:	cmp	r3, #0
   15228:	beq	15384 <__assert_fail@plt+0x3c80>
   1522c:	cmp	r3, #47	; 0x2f
   15230:	bne	1524c <__assert_fail@plt+0x3b48>
   15234:	ldrb	r3, [r8, #1]!
   15238:	cmp	r3, #47	; 0x2f
   1523c:	beq	15234 <__assert_fail@plt+0x3b30>
   15240:	cmp	r3, #47	; 0x2f
   15244:	cmpne	r3, #0
   15248:	beq	15384 <__assert_fail@plt+0x3c80>
   1524c:	mov	r5, r8
   15250:	ldrb	r2, [r5, #1]!
   15254:	cmp	r2, #0
   15258:	cmpne	r2, #47	; 0x2f
   1525c:	bne	15250 <__assert_fail@plt+0x3b4c>
   15260:	subs	r6, r5, r8
   15264:	beq	15384 <__assert_fail@plt+0x3c80>
   15268:	cmp	r3, #46	; 0x2e
   1526c:	movne	r2, #0
   15270:	moveq	r2, #1
   15274:	cmp	r6, #1
   15278:	cmpeq	r3, #46	; 0x2e
   1527c:	beq	1521c <__assert_fail@plt+0x3b18>
   15280:	cmp	r6, #2
   15284:	movne	r3, #0
   15288:	andeq	r3, r2, #1
   1528c:	cmp	r3, #0
   15290:	bne	14e88 <__assert_fail@plt+0x3784>
   15294:	ldrb	r3, [r4, #-1]
   15298:	cmp	r3, #47	; 0x2f
   1529c:	beq	152a8 <__assert_fail@plt+0x3ba4>
   152a0:	mov	r3, #47	; 0x2f
   152a4:	strb	r3, [r4], #1
   152a8:	add	r7, r6, #2
   152ac:	ldr	r3, [sp, #2212]	; 0x8a4
   152b0:	add	r3, fp, r3
   152b4:	sub	r3, r3, r4
   152b8:	cmp	r3, r7
   152bc:	bcs	152ec <__assert_fail@plt+0x3be8>
   152c0:	sub	r9, r4, fp
   152c4:	add	r0, sp, #2208	; 0x8a0
   152c8:	bl	1ae14 <__assert_fail@plt+0x9710>
   152cc:	cmp	r0, #0
   152d0:	beq	14ee0 <__assert_fail@plt+0x37dc>
   152d4:	ldr	fp, [sp, #2208]	; 0x8a0
   152d8:	add	r4, fp, r9
   152dc:	ldr	r3, [sp, #2212]	; 0x8a4
   152e0:	sub	r3, r3, r9
   152e4:	cmp	r3, r7
   152e8:	bcc	152c0 <__assert_fail@plt+0x3bbc>
   152ec:	mov	r2, r6
   152f0:	mov	r1, r8
   152f4:	mov	r0, r4
   152f8:	bl	11500 <mempcpy@plt>
   152fc:	mov	r4, r0
   15300:	mov	r3, #0
   15304:	strb	r3, [r0]
   15308:	ldr	r3, [sp, #12]
   1530c:	cmp	r3, #0
   15310:	beq	14ee4 <__assert_fail@plt+0x37e0>
   15314:	cmp	sl, #2
   15318:	movne	r3, r5
   1531c:	beq	1521c <__assert_fail@plt+0x3b18>
   15320:	ldrb	r2, [r3]
   15324:	cmp	r2, #47	; 0x2f
   15328:	beq	1514c <__assert_fail@plt+0x3a48>
   1532c:	b	151c4 <__assert_fail@plt+0x3ac0>
   15330:	ldrb	r3, [r5]
   15334:	cmp	r3, #0
   15338:	movne	r6, #0
   1533c:	bne	151e0 <__assert_fail@plt+0x3adc>
   15340:	mov	r3, #512	; 0x200
   15344:	mov	r2, #0
   15348:	mov	r1, fp
   1534c:	mvn	r0, #99	; 0x63
   15350:	bl	1135c <faccessat@plt>
   15354:	adds	r6, r0, #0
   15358:	movne	r6, #1
   1535c:	b	151e0 <__assert_fail@plt+0x3adc>
   15360:	mov	r4, r3
   15364:	b	1521c <__assert_fail@plt+0x3b18>
   15368:	mov	r4, r3
   1536c:	mov	r3, #1
   15370:	str	r3, [sp, #20]
   15374:	b	1521c <__assert_fail@plt+0x3b18>
   15378:	mov	r3, #1
   1537c:	str	r3, [sp, #20]
   15380:	b	1521c <__assert_fail@plt+0x3b18>
   15384:	add	r3, fp, #1
   15388:	cmp	r4, r3
   1538c:	movls	r6, #0
   15390:	bls	14fc8 <__assert_fail@plt+0x38c4>
   15394:	ldrb	r3, [r4, #-1]
   15398:	cmp	r3, #47	; 0x2f
   1539c:	subeq	r4, r4, #1
   153a0:	mov	r6, #0
   153a4:	b	14fc8 <__assert_fail@plt+0x38c4>
   153a8:	mov	fp, r4
   153ac:	mov	r6, #1
   153b0:	ldr	r0, [sp, #144]	; 0x90
   153b4:	add	r3, sp, #152	; 0x98
   153b8:	cmp	r0, r3
   153bc:	beq	153c4 <__assert_fail@plt+0x3cc0>
   153c0:	bl	15784 <__assert_fail@plt+0x4080>
   153c4:	ldr	r0, [sp, #1176]	; 0x498
   153c8:	add	r3, sp, #1184	; 0x4a0
   153cc:	cmp	r0, r3
   153d0:	beq	153d8 <__assert_fail@plt+0x3cd4>
   153d4:	bl	15784 <__assert_fail@plt+0x4080>
   153d8:	cmp	r6, #0
   153dc:	bne	1541c <__assert_fail@plt+0x3d18>
   153e0:	mov	r3, #0
   153e4:	strb	r3, [r4], #1
   153e8:	sub	r1, r4, fp
   153ec:	add	r0, sp, #2208	; 0x8a0
   153f0:	bl	1ad34 <__assert_fail@plt+0x9630>
   153f4:	cmp	r0, #0
   153f8:	beq	15440 <__assert_fail@plt+0x3d3c>
   153fc:	add	sp, sp, #3232	; 0xca0
   15400:	add	sp, sp, #12
   15404:	ldrd	r4, [sp]
   15408:	ldrd	r6, [sp, #8]
   1540c:	ldrd	r8, [sp, #16]
   15410:	ldrd	sl, [sp, #24]
   15414:	add	sp, sp, #32
   15418:	pop	{pc}		; (ldr pc, [sp], #4)
   1541c:	ldr	r0, [sp, #2208]	; 0x8a0
   15420:	add	r3, sp, #2208	; 0x8a0
   15424:	add	r3, r3, #8
   15428:	cmp	r0, r3
   1542c:	moveq	r0, #0
   15430:	beq	153fc <__assert_fail@plt+0x3cf8>
   15434:	bl	15784 <__assert_fail@plt+0x4080>
   15438:	mov	r0, #0
   1543c:	b	153fc <__assert_fail@plt+0x3cf8>
   15440:	bl	1b910 <__assert_fail@plt+0xa20c>
   15444:	mov	r0, r5
   15448:	bl	1153c <strlen@plt>
   1544c:	str	r0, [sp, #32]
   15450:	add	r6, r7, r0
   15454:	ldr	r3, [sp, #148]	; 0x94
   15458:	cmp	r3, r6
   1545c:	movls	r3, #0
   15460:	strls	r3, [sp, #36]	; 0x24
   15464:	bls	15060 <__assert_fail@plt+0x395c>
   15468:	b	15094 <__assert_fail@plt+0x3990>
   1546c:	movw	r3, #952	; 0x3b8
   15470:	movt	r3, #3
   15474:	str	r0, [r3]
   15478:	bx	lr
   1547c:	movw	r3, #952	; 0x3b8
   15480:	movt	r3, #3
   15484:	strb	r0, [r3, #4]
   15488:	bx	lr
   1548c:	strd	r4, [sp, #-16]!
   15490:	str	r6, [sp, #8]
   15494:	str	lr, [sp, #12]
   15498:	sub	sp, sp, #8
   1549c:	movw	r3, #820	; 0x334
   154a0:	movt	r3, #3
   154a4:	ldr	r0, [r3]
   154a8:	bl	1d3a0 <__assert_fail@plt+0xbc9c>
   154ac:	cmp	r0, #0
   154b0:	beq	154d8 <__assert_fail@plt+0x3dd4>
   154b4:	movw	r3, #952	; 0x3b8
   154b8:	movt	r3, #3
   154bc:	ldrb	r3, [r3, #4]
   154c0:	cmp	r3, #0
   154c4:	beq	15504 <__assert_fail@plt+0x3e00>
   154c8:	bl	1156c <__errno_location@plt>
   154cc:	ldr	r3, [r0]
   154d0:	cmp	r3, #32
   154d4:	bne	15504 <__assert_fail@plt+0x3e00>
   154d8:	movw	r3, #816	; 0x330
   154dc:	movt	r3, #3
   154e0:	ldr	r0, [r3]
   154e4:	bl	1d3a0 <__assert_fail@plt+0xbc9c>
   154e8:	cmp	r0, #0
   154ec:	bne	1558c <__assert_fail@plt+0x3e88>
   154f0:	add	sp, sp, #8
   154f4:	ldrd	r4, [sp]
   154f8:	ldr	r6, [sp, #8]
   154fc:	add	sp, sp, #12
   15500:	pop	{pc}		; (ldr pc, [sp], #4)
   15504:	mov	r2, #5
   15508:	movw	r1, #61916	; 0xf1dc
   1550c:	movt	r1, #1
   15510:	mov	r0, #0
   15514:	bl	113bc <dcgettext@plt>
   15518:	mov	r4, r0
   1551c:	movw	r3, #952	; 0x3b8
   15520:	movt	r3, #3
   15524:	ldr	r5, [r3]
   15528:	cmp	r5, #0
   1552c:	beq	1556c <__assert_fail@plt+0x3e68>
   15530:	bl	1156c <__errno_location@plt>
   15534:	ldr	r6, [r0]
   15538:	mov	r0, r5
   1553c:	bl	1aa48 <__assert_fail@plt+0x9344>
   15540:	str	r4, [sp]
   15544:	mov	r3, r0
   15548:	movw	r2, #61928	; 0xf1e8
   1554c:	movt	r2, #1
   15550:	mov	r1, r6
   15554:	mov	r0, #0
   15558:	bl	11494 <error@plt>
   1555c:	movw	r3, #724	; 0x2d4
   15560:	movt	r3, #3
   15564:	ldr	r0, [r3]
   15568:	bl	11368 <_exit@plt>
   1556c:	bl	1156c <__errno_location@plt>
   15570:	mov	r3, r4
   15574:	movw	r2, #61932	; 0xf1ec
   15578:	movt	r2, #1
   1557c:	ldr	r1, [r0]
   15580:	mov	r0, #0
   15584:	bl	11494 <error@plt>
   15588:	b	1555c <__assert_fail@plt+0x3e58>
   1558c:	movw	r3, #724	; 0x2d4
   15590:	movt	r3, #3
   15594:	ldr	r0, [r3]
   15598:	bl	11368 <_exit@plt>
   1559c:	str	r4, [sp, #-8]!
   155a0:	str	lr, [sp, #4]
   155a4:	bl	1563c <__assert_fail@plt+0x3f38>
   155a8:	cmp	r0, #0
   155ac:	beq	155bc <__assert_fail@plt+0x3eb8>
   155b0:	ldr	r4, [sp]
   155b4:	add	sp, sp, #4
   155b8:	pop	{pc}		; (ldr pc, [sp], #4)
   155bc:	bl	1b910 <__assert_fail@plt+0xa20c>
   155c0:	strd	r4, [sp, #-16]!
   155c4:	str	r6, [sp, #8]
   155c8:	str	lr, [sp, #12]
   155cc:	mov	r4, r0
   155d0:	ldrb	ip, [r0]
   155d4:	cmp	ip, #47	; 0x2f
   155d8:	movne	r5, #0
   155dc:	moveq	r5, #1
   155e0:	bl	1cf94 <__assert_fail@plt+0xb890>
   155e4:	sub	r0, r0, r4
   155e8:	cmp	r0, r5
   155ec:	bls	1562c <__assert_fail@plt+0x3f28>
   155f0:	add	r3, r4, r0
   155f4:	ldrb	r3, [r3, #-1]
   155f8:	cmp	r3, #47	; 0x2f
   155fc:	bne	1562c <__assert_fail@plt+0x3f28>
   15600:	sub	r0, r0, #2
   15604:	add	r3, r4, r0
   15608:	sub	ip, r4, #1
   1560c:	add	ip, ip, r5
   15610:	rsb	r2, r4, #1
   15614:	add	r0, r2, r3
   15618:	cmp	r3, ip
   1561c:	beq	1562c <__assert_fail@plt+0x3f28>
   15620:	ldrb	r1, [r3], #-1
   15624:	cmp	r1, #47	; 0x2f
   15628:	beq	15614 <__assert_fail@plt+0x3f10>
   1562c:	ldrd	r4, [sp]
   15630:	ldr	r6, [sp, #8]
   15634:	add	sp, sp, #12
   15638:	pop	{pc}		; (ldr pc, [sp], #4)
   1563c:	strd	r4, [sp, #-16]!
   15640:	str	r6, [sp, #8]
   15644:	str	lr, [sp, #12]
   15648:	mov	r6, r0
   1564c:	bl	155c0 <__assert_fail@plt+0x3ebc>
   15650:	mov	r4, r0
   15654:	add	r3, r0, #1
   15658:	cmp	r0, #0
   1565c:	movne	r0, r3
   15660:	addeq	r0, r3, #1
   15664:	bl	1c13c <__assert_fail@plt+0xaa38>
   15668:	subs	r5, r0, #0
   1566c:	beq	1569c <__assert_fail@plt+0x3f98>
   15670:	mov	r2, r4
   15674:	mov	r1, r6
   15678:	mov	r0, r5
   1567c:	bl	11374 <memcpy@plt>
   15680:	cmp	r4, #0
   15684:	bne	15694 <__assert_fail@plt+0x3f90>
   15688:	mov	r3, #46	; 0x2e
   1568c:	strb	r3, [r5]
   15690:	mov	r4, #1
   15694:	mov	r3, #0
   15698:	strb	r3, [r5, r4]
   1569c:	mov	r0, r5
   156a0:	ldrd	r4, [sp]
   156a4:	ldr	r6, [sp, #8]
   156a8:	add	sp, sp, #12
   156ac:	pop	{pc}		; (ldr pc, [sp], #4)
   156b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156b4:	strd	r6, [sp, #8]
   156b8:	str	r8, [sp, #16]
   156bc:	str	lr, [sp, #20]
   156c0:	subs	r7, r0, #0
   156c4:	beq	1571c <__assert_fail@plt+0x4018>
   156c8:	mov	r5, r2
   156cc:	mov	r6, r1
   156d0:	mov	r0, #24
   156d4:	bl	1b47c <__assert_fail@plt+0x9d78>
   156d8:	mov	r4, r0
   156dc:	mov	r0, r6
   156e0:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   156e4:	str	r0, [r4]
   156e8:	ldrd	r2, [r5, #96]	; 0x60
   156ec:	strd	r2, [r4, #8]
   156f0:	ldrd	r2, [r5]
   156f4:	strd	r2, [r4, #16]
   156f8:	mov	r1, r4
   156fc:	mov	r0, r7
   15700:	bl	16950 <__assert_fail@plt+0x524c>
   15704:	cmp	r0, #0
   15708:	beq	15730 <__assert_fail@plt+0x402c>
   1570c:	cmp	r4, r0
   15710:	beq	1571c <__assert_fail@plt+0x4018>
   15714:	mov	r0, r4
   15718:	bl	16b70 <__assert_fail@plt+0x546c>
   1571c:	ldrd	r4, [sp]
   15720:	ldrd	r6, [sp, #8]
   15724:	ldr	r8, [sp, #16]
   15728:	add	sp, sp, #20
   1572c:	pop	{pc}		; (ldr pc, [sp], #4)
   15730:	bl	1b910 <__assert_fail@plt+0xa20c>
   15734:	cmp	r0, #0
   15738:	beq	1577c <__assert_fail@plt+0x4078>
   1573c:	strd	r4, [sp, #-12]!
   15740:	str	lr, [sp, #8]
   15744:	sub	sp, sp, #28
   15748:	str	r1, [sp]
   1574c:	ldrd	r4, [r2, #96]	; 0x60
   15750:	strd	r4, [sp, #8]
   15754:	ldrd	r2, [r2]
   15758:	strd	r2, [sp, #16]
   1575c:	mov	r1, sp
   15760:	bl	160a8 <__assert_fail@plt+0x49a4>
   15764:	adds	r0, r0, #0
   15768:	movne	r0, #1
   1576c:	add	sp, sp, #28
   15770:	ldrd	r4, [sp]
   15774:	add	sp, sp, #8
   15778:	pop	{pc}		; (ldr pc, [sp], #4)
   1577c:	mov	r0, #0
   15780:	bx	lr
   15784:	strd	r4, [sp, #-12]!
   15788:	str	lr, [sp, #8]
   1578c:	sub	sp, sp, #12
   15790:	mov	r5, r0
   15794:	bl	1156c <__errno_location@plt>
   15798:	mov	r4, r0
   1579c:	ldr	r3, [r0]
   157a0:	str	r3, [sp]
   157a4:	str	r3, [sp, #4]
   157a8:	mov	r3, #0
   157ac:	str	r3, [r0]
   157b0:	mov	r0, r5
   157b4:	bl	11350 <free@plt>
   157b8:	ldr	r3, [r4]
   157bc:	clz	r3, r3
   157c0:	lsr	r3, r3, #5
   157c4:	add	r2, sp, #8
   157c8:	add	r3, r2, r3, lsl #2
   157cc:	ldr	r3, [r3, #-8]
   157d0:	str	r3, [r4]
   157d4:	add	sp, sp, #12
   157d8:	ldrd	r4, [sp]
   157dc:	add	sp, sp, #8
   157e0:	pop	{pc}		; (ldr pc, [sp], #4)
   157e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   157e8:	strd	r6, [sp, #8]
   157ec:	str	lr, [sp, #16]
   157f0:	sub	sp, sp, #484	; 0x1e4
   157f4:	mov	r6, r0
   157f8:	mov	r4, r2
   157fc:	movw	r3, #728	; 0x2d8
   15800:	movt	r3, #3
   15804:	ldr	r3, [r3]
   15808:	cmp	r3, #0
   1580c:	blt	158b0 <__assert_fail@plt+0x41ac>
   15810:	movw	r3, #728	; 0x2d8
   15814:	movt	r3, #3
   15818:	ldr	r5, [r3]
   1581c:	cmp	r5, #0
   15820:	beq	15914 <__assert_fail@plt+0x4210>
   15824:	mov	r1, sp
   15828:	mov	r0, r6
   1582c:	bl	115a8 <statvfs64@plt>
   15830:	cmp	r0, #0
   15834:	mvnlt	r5, #0
   15838:	blt	159a0 <__assert_fail@plt+0x429c>
   1583c:	ldr	r3, [sp, #4]
   15840:	cmp	r3, #0
   15844:	beq	158ec <__assert_fail@plt+0x41e8>
   15848:	cmn	r3, #1
   1584c:	movne	r2, #0
   15850:	beq	15908 <__assert_fail@plt+0x4204>
   15854:	str	r3, [r4]
   15858:	str	r2, [r4, #4]
   1585c:	ldrd	r2, [sp, #8]
   15860:	strd	r2, [r4, #8]
   15864:	ldrd	r2, [sp, #16]
   15868:	strd	r2, [r4, #16]
   1586c:	ldr	r0, [sp, #24]
   15870:	ldr	r1, [sp, #28]
   15874:	mov	r5, #0
   15878:	and	r3, r1, #-2147483648	; 0x80000000
   1587c:	rsbs	r6, r5, #0
   15880:	rsc	r7, r3, #0
   15884:	orr	r2, r6, r0
   15888:	orr	r3, r7, r1
   1588c:	str	r2, [r4, #24]
   15890:	str	r3, [r4, #28]
   15894:	lsr	r1, r1, #31
   15898:	strb	r1, [r4, #32]
   1589c:	ldrd	r2, [sp, #32]
   158a0:	strd	r2, [r4, #40]	; 0x28
   158a4:	ldrd	r2, [sp, #40]	; 0x28
   158a8:	strd	r2, [r4, #48]	; 0x30
   158ac:	b	159a0 <__assert_fail@plt+0x429c>
   158b0:	mov	r0, sp
   158b4:	bl	113b0 <uname@plt>
   158b8:	cmp	r0, #0
   158bc:	movne	r0, #0
   158c0:	bne	158dc <__assert_fail@plt+0x41d8>
   158c4:	movw	r1, #61936	; 0xf1f0
   158c8:	movt	r1, #1
   158cc:	add	r0, sp, #130	; 0x82
   158d0:	bl	11308 <strverscmp@plt>
   158d4:	mvn	r0, r0
   158d8:	lsr	r0, r0, #31
   158dc:	movw	r3, #728	; 0x2d8
   158e0:	movt	r3, #3
   158e4:	str	r0, [r3]
   158e8:	b	15810 <__assert_fail@plt+0x410c>
   158ec:	ldr	r3, [sp]
   158f0:	cmn	r3, #1
   158f4:	movne	r2, #0
   158f8:	bne	15854 <__assert_fail@plt+0x4150>
   158fc:	mvn	r3, #0
   15900:	mov	r2, r3
   15904:	b	15854 <__assert_fail@plt+0x4150>
   15908:	mvn	r3, #0
   1590c:	mov	r2, r3
   15910:	b	15854 <__assert_fail@plt+0x4150>
   15914:	add	r1, sp, #392	; 0x188
   15918:	mov	r0, r6
   1591c:	bl	11638 <statfs64@plt>
   15920:	cmp	r0, #0
   15924:	blt	159b8 <__assert_fail@plt+0x42b4>
   15928:	ldr	r2, [sp, #452]	; 0x1c4
   1592c:	cmn	r2, #1
   15930:	asrne	r3, r2, #31
   15934:	mvneq	r2, #0
   15938:	mvneq	r3, #0
   1593c:	strd	r2, [r4]
   15940:	add	r3, sp, #400	; 0x190
   15944:	ldrd	r2, [r3]
   15948:	strd	r2, [r4, #8]
   1594c:	add	r3, sp, #408	; 0x198
   15950:	ldrd	r2, [r3]
   15954:	strd	r2, [r4, #16]
   15958:	ldr	r3, [sp, #420]	; 0x1a4
   1595c:	mov	r0, #0
   15960:	and	r1, r3, #-2147483648	; 0x80000000
   15964:	rsbs	r0, r0, #0
   15968:	rsc	r1, r1, #0
   1596c:	ldr	r2, [sp, #416]	; 0x1a0
   15970:	orr	r2, r0, r2
   15974:	orr	r1, r1, r3
   15978:	str	r2, [r4, #24]
   1597c:	str	r1, [r4, #28]
   15980:	lsr	r3, r3, #31
   15984:	strb	r3, [r4, #32]
   15988:	add	r3, sp, #424	; 0x1a8
   1598c:	ldrd	r2, [r3]
   15990:	strd	r2, [r4, #40]	; 0x28
   15994:	add	r3, sp, #432	; 0x1b0
   15998:	ldrd	r2, [r3]
   1599c:	strd	r2, [r4, #48]	; 0x30
   159a0:	mov	r0, r5
   159a4:	add	sp, sp, #484	; 0x1e4
   159a8:	ldrd	r4, [sp]
   159ac:	ldrd	r6, [sp, #8]
   159b0:	add	sp, sp, #16
   159b4:	pop	{pc}		; (ldr pc, [sp], #4)
   159b8:	mvn	r5, #0
   159bc:	b	159a0 <__assert_fail@plt+0x429c>
   159c0:	ror	r0, r0, #3
   159c4:	udiv	r3, r0, r1
   159c8:	mls	r0, r3, r1, r0
   159cc:	bx	lr
   159d0:	cmp	r1, r0
   159d4:	movne	r0, #0
   159d8:	moveq	r0, #1
   159dc:	bx	lr
   159e0:	ldr	r2, [r0, #20]
   159e4:	movw	r3, #61944	; 0xf1f8
   159e8:	movt	r3, #1
   159ec:	cmp	r2, r3
   159f0:	beq	15a8c <__assert_fail@plt+0x4388>
   159f4:	vldr	s15, [r2, #8]
   159f8:	vldr	s14, [pc, #148]	; 15a94 <__assert_fail@plt+0x4390>
   159fc:	vcmpe.f32	s15, s14
   15a00:	vmrs	APSR_nzcv, fpscr
   15a04:	ble	15a64 <__assert_fail@plt+0x4360>
   15a08:	vldr	s14, [pc, #136]	; 15a98 <__assert_fail@plt+0x4394>
   15a0c:	vcmpe.f32	s15, s14
   15a10:	vmrs	APSR_nzcv, fpscr
   15a14:	bpl	15a64 <__assert_fail@plt+0x4360>
   15a18:	vldr	s13, [r2, #12]
   15a1c:	vldr	s14, [pc, #120]	; 15a9c <__assert_fail@plt+0x4398>
   15a20:	vcmpe.f32	s13, s14
   15a24:	vmrs	APSR_nzcv, fpscr
   15a28:	ble	15a64 <__assert_fail@plt+0x4360>
   15a2c:	vldr	s14, [r2]
   15a30:	vcmpe.f32	s14, #0.0
   15a34:	vmrs	APSR_nzcv, fpscr
   15a38:	blt	15a64 <__assert_fail@plt+0x4360>
   15a3c:	vldr	s13, [pc, #80]	; 15a94 <__assert_fail@plt+0x4390>
   15a40:	vadd.f32	s14, s14, s13
   15a44:	vldr	s13, [r2, #4]
   15a48:	vcmpe.f32	s14, s13
   15a4c:	vmrs	APSR_nzcv, fpscr
   15a50:	bpl	15a64 <__assert_fail@plt+0x4360>
   15a54:	vldr	s12, [pc, #68]	; 15aa0 <__assert_fail@plt+0x439c>
   15a58:	vcmpe.f32	s13, s12
   15a5c:	vmrs	APSR_nzcv, fpscr
   15a60:	bls	15a78 <__assert_fail@plt+0x4374>
   15a64:	movw	r3, #61944	; 0xf1f8
   15a68:	movt	r3, #1
   15a6c:	str	r3, [r0, #20]
   15a70:	mov	r0, #0
   15a74:	bx	lr
   15a78:	vcmpe.f32	s15, s14
   15a7c:	vmrs	APSR_nzcv, fpscr
   15a80:	ble	15a64 <__assert_fail@plt+0x4360>
   15a84:	mov	r0, #1
   15a88:	bx	lr
   15a8c:	mov	r0, #1
   15a90:	bx	lr
   15a94:	stclcc	12, cr12, [ip, #820]	; 0x334
   15a98:	svccc	0x00666666
   15a9c:	svccc	0x008ccccd
   15aa0:	svccc	0x00800000
   15aa4:	ldrb	r3, [r1, #16]
   15aa8:	cmp	r3, #0
   15aac:	bne	15ad8 <__assert_fail@plt+0x43d4>
   15ab0:	vmov	s15, r0
   15ab4:	vcvt.f32.u32	s15, s15
   15ab8:	vldr	s13, [r1, #8]
   15abc:	vdiv.f32	s14, s15, s13
   15ac0:	vldr	s15, [pc, #224]	; 15ba8 <__assert_fail@plt+0x44a4>
   15ac4:	vcmpe.f32	s14, s15
   15ac8:	vmrs	APSR_nzcv, fpscr
   15acc:	bge	15b98 <__assert_fail@plt+0x4494>
   15ad0:	vcvt.u32.f32	s15, s14
   15ad4:	vmov	r0, s15
   15ad8:	cmp	r0, #10
   15adc:	movcc	r0, #10
   15ae0:	orr	r0, r0, #1
   15ae4:	cmn	r0, #1
   15ae8:	beq	15afc <__assert_fail@plt+0x43f8>
   15aec:	push	{lr}		; (str lr, [sp, #-4]!)
   15af0:	movw	lr, #43691	; 0xaaab
   15af4:	movt	lr, #43690	; 0xaaaa
   15af8:	b	15b24 <__assert_fail@plt+0x4420>
   15afc:	mov	r0, #0
   15b00:	bx	lr
   15b04:	mov	r3, #3
   15b08:	udiv	r2, r0, r3
   15b0c:	mls	r3, r3, r2, r0
   15b10:	cmp	r3, #0
   15b14:	bne	15b74 <__assert_fail@plt+0x4470>
   15b18:	add	r0, r0, #2
   15b1c:	cmn	r0, #1
   15b20:	beq	15ba0 <__assert_fail@plt+0x449c>
   15b24:	cmp	r0, #9
   15b28:	bls	15b04 <__assert_fail@plt+0x4400>
   15b2c:	umull	r2, r3, lr, r0
   15b30:	lsr	r3, r3, #1
   15b34:	add	r3, r3, r3, lsl #1
   15b38:	cmp	r0, r3
   15b3c:	beq	15b18 <__assert_fail@plt+0x4414>
   15b40:	mov	r1, #16
   15b44:	mov	r2, #9
   15b48:	mov	r3, #3
   15b4c:	add	r2, r2, r1
   15b50:	add	r3, r3, #2
   15b54:	cmp	r2, r0
   15b58:	bcs	15b08 <__assert_fail@plt+0x4404>
   15b5c:	add	r1, r1, #8
   15b60:	udiv	ip, r0, r3
   15b64:	mls	ip, r3, ip, r0
   15b68:	cmp	ip, #0
   15b6c:	bne	15b4c <__assert_fail@plt+0x4448>
   15b70:	b	15b18 <__assert_fail@plt+0x4414>
   15b74:	lsl	r2, r0, #2
   15b78:	lsr	r3, r0, #30
   15b7c:	adds	r3, r3, #0
   15b80:	movne	r3, #1
   15b84:	cmp	r2, #0
   15b88:	movlt	r3, #1
   15b8c:	cmp	r3, #0
   15b90:	movne	r0, #0
   15b94:	pop	{pc}		; (ldr pc, [sp], #4)
   15b98:	mov	r0, #0
   15b9c:	bx	lr
   15ba0:	mov	r0, #0
   15ba4:	b	15b94 <__assert_fail@plt+0x4490>
   15ba8:	svcmi	0x00800000
   15bac:	str	r4, [sp, #-8]!
   15bb0:	str	lr, [sp, #4]
   15bb4:	mov	r4, r0
   15bb8:	mov	r0, r1
   15bbc:	ldr	r3, [r4, #24]
   15bc0:	ldr	r1, [r4, #8]
   15bc4:	blx	r3
   15bc8:	ldr	r3, [r4, #8]
   15bcc:	cmp	r3, r0
   15bd0:	bls	15be8 <__assert_fail@plt+0x44e4>
   15bd4:	ldr	r3, [r4]
   15bd8:	add	r0, r3, r0, lsl #3
   15bdc:	ldr	r4, [sp]
   15be0:	add	sp, sp, #4
   15be4:	pop	{pc}		; (ldr pc, [sp], #4)
   15be8:	bl	116e0 <abort@plt>
   15bec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15bf0:	strd	r6, [sp, #8]
   15bf4:	strd	r8, [sp, #16]
   15bf8:	strd	sl, [sp, #24]
   15bfc:	str	lr, [sp, #32]
   15c00:	sub	sp, sp, #4
   15c04:	ldr	r7, [r1]
   15c08:	ldr	r3, [r1, #4]
   15c0c:	cmp	r7, r3
   15c10:	bcs	15d68 <__assert_fail@plt+0x4664>
   15c14:	mov	fp, r2
   15c18:	mov	r9, r1
   15c1c:	mov	r6, r0
   15c20:	add	r7, r7, #8
   15c24:	mov	sl, #0
   15c28:	b	15cfc <__assert_fail@plt+0x45f8>
   15c2c:	str	r5, [r0]
   15c30:	ldr	r2, [r6, #12]
   15c34:	add	r2, r2, #1
   15c38:	str	r2, [r6, #12]
   15c3c:	str	sl, [r4]
   15c40:	ldr	r2, [r6, #36]	; 0x24
   15c44:	str	r2, [r4, #4]
   15c48:	str	r4, [r6, #36]	; 0x24
   15c4c:	mov	r4, r3
   15c50:	cmp	r3, #0
   15c54:	beq	15c88 <__assert_fail@plt+0x4584>
   15c58:	ldr	r5, [r4]
   15c5c:	mov	r1, r5
   15c60:	mov	r0, r6
   15c64:	bl	15bac <__assert_fail@plt+0x44a8>
   15c68:	ldr	r3, [r4, #4]
   15c6c:	ldr	r2, [r0]
   15c70:	cmp	r2, #0
   15c74:	beq	15c2c <__assert_fail@plt+0x4528>
   15c78:	ldr	r2, [r0, #4]
   15c7c:	str	r2, [r4, #4]
   15c80:	str	r4, [r0, #4]
   15c84:	b	15c4c <__assert_fail@plt+0x4548>
   15c88:	ldr	r4, [r8, #-8]
   15c8c:	str	sl, [r8, #-4]
   15c90:	cmp	fp, #0
   15c94:	bne	15ce8 <__assert_fail@plt+0x45e4>
   15c98:	mov	r1, r4
   15c9c:	mov	r0, r6
   15ca0:	bl	15bac <__assert_fail@plt+0x44a8>
   15ca4:	mov	r5, r0
   15ca8:	ldr	r3, [r0]
   15cac:	cmp	r3, #0
   15cb0:	beq	15d34 <__assert_fail@plt+0x4630>
   15cb4:	ldr	r0, [r6, #36]	; 0x24
   15cb8:	cmp	r0, #0
   15cbc:	beq	15d1c <__assert_fail@plt+0x4618>
   15cc0:	ldr	r3, [r0, #4]
   15cc4:	str	r3, [r6, #36]	; 0x24
   15cc8:	str	r4, [r0]
   15ccc:	ldr	r3, [r5, #4]
   15cd0:	str	r3, [r0, #4]
   15cd4:	str	r0, [r5, #4]
   15cd8:	str	sl, [r8, #-8]
   15cdc:	ldr	r3, [r9, #12]
   15ce0:	sub	r3, r3, #1
   15ce4:	str	r3, [r9, #12]
   15ce8:	add	r2, r7, #8
   15cec:	ldr	r3, [r9, #4]
   15cf0:	cmp	r3, r7
   15cf4:	bls	15d48 <__assert_fail@plt+0x4644>
   15cf8:	mov	r7, r2
   15cfc:	mov	r8, r7
   15d00:	ldr	r3, [r7, #-8]
   15d04:	cmp	r3, #0
   15d08:	beq	15ce8 <__assert_fail@plt+0x45e4>
   15d0c:	ldr	r4, [r7, #-4]
   15d10:	cmp	r4, #0
   15d14:	bne	15c58 <__assert_fail@plt+0x4554>
   15d18:	b	15c88 <__assert_fail@plt+0x4584>
   15d1c:	mov	r0, #8
   15d20:	bl	1c13c <__assert_fail@plt+0xaa38>
   15d24:	cmp	r0, #0
   15d28:	bne	15cc8 <__assert_fail@plt+0x45c4>
   15d2c:	mov	r0, fp
   15d30:	b	15d4c <__assert_fail@plt+0x4648>
   15d34:	str	r4, [r0]
   15d38:	ldr	r3, [r6, #12]
   15d3c:	add	r3, r3, #1
   15d40:	str	r3, [r6, #12]
   15d44:	b	15cd8 <__assert_fail@plt+0x45d4>
   15d48:	mov	r0, #1
   15d4c:	add	sp, sp, #4
   15d50:	ldrd	r4, [sp]
   15d54:	ldrd	r6, [sp, #8]
   15d58:	ldrd	r8, [sp, #16]
   15d5c:	ldrd	sl, [sp, #24]
   15d60:	add	sp, sp, #32
   15d64:	pop	{pc}		; (ldr pc, [sp], #4)
   15d68:	mov	r0, #1
   15d6c:	b	15d4c <__assert_fail@plt+0x4648>
   15d70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d74:	strd	r6, [sp, #8]
   15d78:	str	r8, [sp, #16]
   15d7c:	str	lr, [sp, #20]
   15d80:	mov	r6, r0
   15d84:	mov	r5, r1
   15d88:	mov	r7, r2
   15d8c:	mov	r8, r3
   15d90:	bl	15bac <__assert_fail@plt+0x44a8>
   15d94:	mov	r4, r0
   15d98:	str	r0, [r7]
   15d9c:	ldr	r0, [r0]
   15da0:	cmp	r0, #0
   15da4:	beq	15e20 <__assert_fail@plt+0x471c>
   15da8:	cmp	r0, r5
   15dac:	beq	15e34 <__assert_fail@plt+0x4730>
   15db0:	ldr	r3, [r6, #28]
   15db4:	mov	r1, r0
   15db8:	mov	r0, r5
   15dbc:	blx	r3
   15dc0:	cmp	r0, #0
   15dc4:	bne	15e34 <__assert_fail@plt+0x4730>
   15dc8:	ldr	r0, [r4, #4]
   15dcc:	cmp	r0, #0
   15dd0:	beq	15e20 <__assert_fail@plt+0x471c>
   15dd4:	ldr	r1, [r0]
   15dd8:	cmp	r5, r1
   15ddc:	beq	15e10 <__assert_fail@plt+0x470c>
   15de0:	ldr	r3, [r6, #28]
   15de4:	mov	r0, r5
   15de8:	blx	r3
   15dec:	cmp	r0, #0
   15df0:	bne	15e10 <__assert_fail@plt+0x470c>
   15df4:	ldr	r4, [r4, #4]
   15df8:	ldr	r0, [r4, #4]
   15dfc:	cmp	r0, #0
   15e00:	beq	15e20 <__assert_fail@plt+0x471c>
   15e04:	ldr	r1, [r0]
   15e08:	cmp	r1, r5
   15e0c:	bne	15de0 <__assert_fail@plt+0x46dc>
   15e10:	ldr	r3, [r4, #4]
   15e14:	ldr	r0, [r3]
   15e18:	cmp	r8, #0
   15e1c:	bne	15e74 <__assert_fail@plt+0x4770>
   15e20:	ldrd	r4, [sp]
   15e24:	ldrd	r6, [sp, #8]
   15e28:	ldr	r8, [sp, #16]
   15e2c:	add	sp, sp, #20
   15e30:	pop	{pc}		; (ldr pc, [sp], #4)
   15e34:	ldr	r0, [r4]
   15e38:	cmp	r8, #0
   15e3c:	beq	15e20 <__assert_fail@plt+0x471c>
   15e40:	ldr	r1, [r4, #4]
   15e44:	cmp	r1, #0
   15e48:	moveq	r3, #0
   15e4c:	streq	r3, [r4]
   15e50:	beq	15e20 <__assert_fail@plt+0x471c>
   15e54:	ldrd	r2, [r1]
   15e58:	strd	r2, [r4]
   15e5c:	mov	r3, #0
   15e60:	str	r3, [r1]
   15e64:	ldr	r3, [r6, #36]	; 0x24
   15e68:	str	r3, [r1, #4]
   15e6c:	str	r1, [r6, #36]	; 0x24
   15e70:	b	15e20 <__assert_fail@plt+0x471c>
   15e74:	ldr	r2, [r3, #4]
   15e78:	str	r2, [r4, #4]
   15e7c:	mov	r2, #0
   15e80:	str	r2, [r3]
   15e84:	ldr	r2, [r6, #36]	; 0x24
   15e88:	str	r2, [r3, #4]
   15e8c:	str	r3, [r6, #36]	; 0x24
   15e90:	b	15e20 <__assert_fail@plt+0x471c>
   15e94:	ldr	r0, [r0, #8]
   15e98:	bx	lr
   15e9c:	ldr	r0, [r0, #12]
   15ea0:	bx	lr
   15ea4:	ldr	r0, [r0, #16]
   15ea8:	bx	lr
   15eac:	ldr	r2, [r0]
   15eb0:	ldr	r3, [r0, #4]
   15eb4:	cmp	r2, r3
   15eb8:	bcs	15f28 <__assert_fail@plt+0x4824>
   15ebc:	add	r1, r2, #8
   15ec0:	sub	ip, r3, #1
   15ec4:	sub	ip, ip, r2
   15ec8:	bic	ip, ip, #7
   15ecc:	add	r2, r2, #16
   15ed0:	add	ip, ip, r2
   15ed4:	mov	r0, #0
   15ed8:	b	15ef4 <__assert_fail@plt+0x47f0>
   15edc:	mov	r2, #1
   15ee0:	cmp	r0, r2
   15ee4:	movcc	r0, r2
   15ee8:	add	r1, r1, #8
   15eec:	cmp	r1, ip
   15ef0:	beq	15f24 <__assert_fail@plt+0x4820>
   15ef4:	ldr	r3, [r1, #-8]
   15ef8:	cmp	r3, #0
   15efc:	beq	15ee8 <__assert_fail@plt+0x47e4>
   15f00:	ldr	r3, [r1, #-4]
   15f04:	cmp	r3, #0
   15f08:	beq	15edc <__assert_fail@plt+0x47d8>
   15f0c:	mov	r2, #1
   15f10:	add	r2, r2, #1
   15f14:	ldr	r3, [r3, #4]
   15f18:	cmp	r3, #0
   15f1c:	bne	15f10 <__assert_fail@plt+0x480c>
   15f20:	b	15ee0 <__assert_fail@plt+0x47dc>
   15f24:	bx	lr
   15f28:	mov	r0, #0
   15f2c:	bx	lr
   15f30:	push	{lr}		; (str lr, [sp, #-4]!)
   15f34:	ldr	r2, [r0]
   15f38:	ldr	r3, [r0, #4]
   15f3c:	cmp	r2, r3
   15f40:	bcs	15fa8 <__assert_fail@plt+0x48a4>
   15f44:	add	r1, r2, #8
   15f48:	sub	ip, r3, #1
   15f4c:	sub	ip, ip, r2
   15f50:	bic	ip, ip, #7
   15f54:	add	r2, r2, #16
   15f58:	add	ip, ip, r2
   15f5c:	mov	r2, #0
   15f60:	mov	lr, r2
   15f64:	b	15f74 <__assert_fail@plt+0x4870>
   15f68:	add	r1, r1, #8
   15f6c:	cmp	r1, ip
   15f70:	beq	15fb0 <__assert_fail@plt+0x48ac>
   15f74:	ldr	r3, [r1, #-8]
   15f78:	cmp	r3, #0
   15f7c:	beq	15f68 <__assert_fail@plt+0x4864>
   15f80:	add	lr, lr, #1
   15f84:	add	r2, r2, #1
   15f88:	ldr	r3, [r1, #-4]
   15f8c:	cmp	r3, #0
   15f90:	beq	15f68 <__assert_fail@plt+0x4864>
   15f94:	add	r2, r2, #1
   15f98:	ldr	r3, [r3, #4]
   15f9c:	cmp	r3, #0
   15fa0:	bne	15f94 <__assert_fail@plt+0x4890>
   15fa4:	b	15f68 <__assert_fail@plt+0x4864>
   15fa8:	mov	r2, #0
   15fac:	mov	lr, r2
   15fb0:	ldr	r3, [r0, #12]
   15fb4:	cmp	r3, lr
   15fb8:	movne	r0, #0
   15fbc:	beq	15fc4 <__assert_fail@plt+0x48c0>
   15fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc4:	ldr	r0, [r0, #16]
   15fc8:	cmp	r0, r2
   15fcc:	movne	r0, #0
   15fd0:	moveq	r0, #1
   15fd4:	b	15fc0 <__assert_fail@plt+0x48bc>
   15fd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15fdc:	strd	r6, [sp, #8]
   15fe0:	str	r8, [sp, #16]
   15fe4:	str	lr, [sp, #20]
   15fe8:	sub	sp, sp, #8
   15fec:	mov	r6, r0
   15ff0:	mov	r4, r1
   15ff4:	ldr	r5, [r0, #8]
   15ff8:	ldr	r7, [r0, #12]
   15ffc:	bl	15eac <__assert_fail@plt+0x47a8>
   16000:	mov	r8, r0
   16004:	ldr	r3, [r6, #16]
   16008:	movw	r2, #61964	; 0xf20c
   1600c:	movt	r2, #1
   16010:	mov	r1, #1
   16014:	mov	r0, r4
   16018:	bl	115c0 <__fprintf_chk@plt>
   1601c:	mov	r3, r5
   16020:	movw	r2, #61988	; 0xf224
   16024:	movt	r2, #1
   16028:	mov	r1, #1
   1602c:	mov	r0, r4
   16030:	bl	115c0 <__fprintf_chk@plt>
   16034:	vmov	s15, r7
   16038:	vcvt.f64.u32	d6, s15
   1603c:	vldr	d7, [pc, #92]	; 160a0 <__assert_fail@plt+0x499c>
   16040:	vmul.f64	d6, d6, d7
   16044:	vmov	s15, r5
   16048:	vcvt.f64.u32	d7, s15
   1604c:	vdiv.f64	d5, d6, d7
   16050:	vstr	d5, [sp]
   16054:	mov	r3, r7
   16058:	movw	r2, #62012	; 0xf23c
   1605c:	movt	r2, #1
   16060:	mov	r1, #1
   16064:	mov	r0, r4
   16068:	bl	115c0 <__fprintf_chk@plt>
   1606c:	mov	r3, r8
   16070:	movw	r2, #62048	; 0xf260
   16074:	movt	r2, #1
   16078:	mov	r1, #1
   1607c:	mov	r0, r4
   16080:	bl	115c0 <__fprintf_chk@plt>
   16084:	add	sp, sp, #8
   16088:	ldrd	r4, [sp]
   1608c:	ldrd	r6, [sp, #8]
   16090:	ldr	r8, [sp, #16]
   16094:	add	sp, sp, #20
   16098:	pop	{pc}		; (ldr pc, [sp], #4)
   1609c:	nop	{0}
   160a0:	andeq	r0, r0, r0
   160a4:	subsmi	r0, r9, r0
   160a8:	strd	r4, [sp, #-16]!
   160ac:	str	r6, [sp, #8]
   160b0:	str	lr, [sp, #12]
   160b4:	mov	r6, r0
   160b8:	mov	r5, r1
   160bc:	bl	15bac <__assert_fail@plt+0x44a8>
   160c0:	ldr	r1, [r0]
   160c4:	cmp	r1, #0
   160c8:	beq	1611c <__assert_fail@plt+0x4a18>
   160cc:	mov	r4, r0
   160d0:	cmp	r1, r5
   160d4:	beq	16104 <__assert_fail@plt+0x4a00>
   160d8:	ldr	r3, [r6, #28]
   160dc:	mov	r0, r5
   160e0:	blx	r3
   160e4:	cmp	r0, #0
   160e8:	bne	16104 <__assert_fail@plt+0x4a00>
   160ec:	ldr	r4, [r4, #4]
   160f0:	cmp	r4, #0
   160f4:	beq	16108 <__assert_fail@plt+0x4a04>
   160f8:	ldr	r1, [r4]
   160fc:	cmp	r1, r5
   16100:	bne	160d8 <__assert_fail@plt+0x49d4>
   16104:	ldr	r4, [r4]
   16108:	mov	r0, r4
   1610c:	ldrd	r4, [sp]
   16110:	ldr	r6, [sp, #8]
   16114:	add	sp, sp, #12
   16118:	pop	{pc}		; (ldr pc, [sp], #4)
   1611c:	mov	r4, r1
   16120:	b	16108 <__assert_fail@plt+0x4a04>
   16124:	ldr	r3, [r0, #16]
   16128:	cmp	r3, #0
   1612c:	beq	16184 <__assert_fail@plt+0x4a80>
   16130:	ldr	r2, [r0]
   16134:	ldr	r1, [r0, #4]
   16138:	cmp	r2, r1
   1613c:	bcs	16178 <__assert_fail@plt+0x4a74>
   16140:	ldr	r0, [r2]
   16144:	cmp	r0, #0
   16148:	bxne	lr
   1614c:	mov	r3, r2
   16150:	sub	r1, r1, #1
   16154:	sub	r1, r1, r2
   16158:	bic	r1, r1, #7
   1615c:	add	r2, r2, r1
   16160:	cmp	r3, r2
   16164:	beq	16178 <__assert_fail@plt+0x4a74>
   16168:	ldr	r0, [r3, #8]!
   1616c:	cmp	r0, #0
   16170:	beq	16160 <__assert_fail@plt+0x4a5c>
   16174:	bx	lr
   16178:	str	r4, [sp, #-8]!
   1617c:	str	lr, [sp, #4]
   16180:	bl	116e0 <abort@plt>
   16184:	mov	r0, #0
   16188:	bx	lr
   1618c:	strd	r4, [sp, #-16]!
   16190:	str	r6, [sp, #8]
   16194:	str	lr, [sp, #12]
   16198:	mov	r5, r0
   1619c:	mov	r4, r1
   161a0:	bl	15bac <__assert_fail@plt+0x44a8>
   161a4:	mov	r2, r0
   161a8:	mov	r3, r0
   161ac:	b	161bc <__assert_fail@plt+0x4ab8>
   161b0:	ldr	r3, [r3, #4]
   161b4:	cmp	r3, #0
   161b8:	beq	161d8 <__assert_fail@plt+0x4ad4>
   161bc:	ldr	r1, [r3]
   161c0:	cmp	r1, r4
   161c4:	bne	161b0 <__assert_fail@plt+0x4aac>
   161c8:	ldr	r3, [r3, #4]
   161cc:	cmp	r3, #0
   161d0:	ldrne	r0, [r3]
   161d4:	bne	161fc <__assert_fail@plt+0x4af8>
   161d8:	ldr	r3, [r5, #4]
   161dc:	add	r2, r2, #8
   161e0:	cmp	r3, r2
   161e4:	bls	161f8 <__assert_fail@plt+0x4af4>
   161e8:	ldr	r0, [r2]
   161ec:	cmp	r0, #0
   161f0:	beq	161dc <__assert_fail@plt+0x4ad8>
   161f4:	b	161fc <__assert_fail@plt+0x4af8>
   161f8:	mov	r0, #0
   161fc:	ldrd	r4, [sp]
   16200:	ldr	r6, [sp, #8]
   16204:	add	sp, sp, #12
   16208:	pop	{pc}		; (ldr pc, [sp], #4)
   1620c:	strd	r4, [sp, #-12]!
   16210:	str	lr, [sp, #8]
   16214:	ldr	r4, [r0]
   16218:	ldr	r3, [r0, #4]
   1621c:	cmp	r4, r3
   16220:	bcs	16288 <__assert_fail@plt+0x4b84>
   16224:	mov	r5, r0
   16228:	mov	r0, #0
   1622c:	b	16240 <__assert_fail@plt+0x4b3c>
   16230:	add	r4, r4, #8
   16234:	ldr	r3, [r5, #4]
   16238:	cmp	r3, r4
   1623c:	bls	1627c <__assert_fail@plt+0x4b78>
   16240:	ldr	r3, [r4]
   16244:	cmp	r3, #0
   16248:	beq	16230 <__assert_fail@plt+0x4b2c>
   1624c:	cmp	r2, r0
   16250:	bls	1627c <__assert_fail@plt+0x4b78>
   16254:	add	ip, r1, r0, lsl #2
   16258:	mov	r3, r4
   1625c:	add	r0, r0, #1
   16260:	ldr	lr, [r3]
   16264:	str	lr, [ip], #4
   16268:	ldr	r3, [r3, #4]
   1626c:	cmp	r3, #0
   16270:	beq	16230 <__assert_fail@plt+0x4b2c>
   16274:	cmp	r2, r0
   16278:	bne	1625c <__assert_fail@plt+0x4b58>
   1627c:	ldrd	r4, [sp]
   16280:	add	sp, sp, #8
   16284:	pop	{pc}		; (ldr pc, [sp], #4)
   16288:	mov	r0, #0
   1628c:	b	1627c <__assert_fail@plt+0x4b78>
   16290:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16294:	strd	r6, [sp, #8]
   16298:	strd	r8, [sp, #16]
   1629c:	str	sl, [sp, #24]
   162a0:	str	lr, [sp, #28]
   162a4:	ldr	r8, [r0]
   162a8:	ldr	r3, [r0, #4]
   162ac:	cmp	r8, r3
   162b0:	bcs	16310 <__assert_fail@plt+0x4c0c>
   162b4:	mov	r7, r2
   162b8:	mov	r6, r1
   162bc:	mov	r9, r0
   162c0:	mov	r5, #0
   162c4:	b	162d8 <__assert_fail@plt+0x4bd4>
   162c8:	add	r8, r8, #8
   162cc:	ldr	r3, [r9, #4]
   162d0:	cmp	r3, r8
   162d4:	bls	16314 <__assert_fail@plt+0x4c10>
   162d8:	ldr	r3, [r8]
   162dc:	cmp	r3, #0
   162e0:	beq	162c8 <__assert_fail@plt+0x4bc4>
   162e4:	mov	r4, r8
   162e8:	mov	r1, r7
   162ec:	ldr	r0, [r4]
   162f0:	blx	r6
   162f4:	cmp	r0, #0
   162f8:	beq	16314 <__assert_fail@plt+0x4c10>
   162fc:	add	r5, r5, #1
   16300:	ldr	r4, [r4, #4]
   16304:	cmp	r4, #0
   16308:	bne	162e8 <__assert_fail@plt+0x4be4>
   1630c:	b	162c8 <__assert_fail@plt+0x4bc4>
   16310:	mov	r5, #0
   16314:	mov	r0, r5
   16318:	ldrd	r4, [sp]
   1631c:	ldrd	r6, [sp, #8]
   16320:	ldrd	r8, [sp, #16]
   16324:	ldr	sl, [sp, #24]
   16328:	add	sp, sp, #28
   1632c:	pop	{pc}		; (ldr pc, [sp], #4)
   16330:	ldrb	r2, [r0]
   16334:	cmp	r2, #0
   16338:	beq	16364 <__assert_fail@plt+0x4c60>
   1633c:	mov	r3, #0
   16340:	rsb	r3, r3, r3, lsl #5
   16344:	add	r3, r3, r2
   16348:	udiv	r2, r3, r1
   1634c:	mls	r3, r1, r2, r3
   16350:	ldrb	r2, [r0, #1]!
   16354:	cmp	r2, #0
   16358:	bne	16340 <__assert_fail@plt+0x4c3c>
   1635c:	mov	r0, r3
   16360:	bx	lr
   16364:	mov	r3, #0
   16368:	b	1635c <__assert_fail@plt+0x4c58>
   1636c:	strd	r4, [sp, #-8]!
   16370:	movw	r3, #61944	; 0xf1f8
   16374:	movt	r3, #1
   16378:	ldrd	r4, [r3]
   1637c:	strd	r4, [r0]
   16380:	ldrd	r4, [r3, #8]
   16384:	strd	r4, [r0, #8]
   16388:	ldr	r3, [r3, #16]
   1638c:	str	r3, [r0, #16]
   16390:	ldrd	r4, [sp]
   16394:	add	sp, sp, #8
   16398:	bx	lr
   1639c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163a0:	strd	r6, [sp, #8]
   163a4:	str	r8, [sp, #16]
   163a8:	str	lr, [sp, #20]
   163ac:	mov	r8, r0
   163b0:	mov	r5, r1
   163b4:	subs	r7, r2, #0
   163b8:	movw	r2, #22976	; 0x59c0
   163bc:	movt	r2, #1
   163c0:	cmp	r7, #0
   163c4:	moveq	r7, r2
   163c8:	subs	r6, r3, #0
   163cc:	movw	r3, #22992	; 0x59d0
   163d0:	movt	r3, #1
   163d4:	cmp	r6, #0
   163d8:	moveq	r6, r3
   163dc:	mov	r0, #40	; 0x28
   163e0:	bl	1c13c <__assert_fail@plt+0xaa38>
   163e4:	subs	r4, r0, #0
   163e8:	beq	16468 <__assert_fail@plt+0x4d64>
   163ec:	movw	r3, #61944	; 0xf1f8
   163f0:	movt	r3, #1
   163f4:	cmp	r5, #0
   163f8:	moveq	r5, r3
   163fc:	str	r5, [r4, #20]
   16400:	mov	r0, r4
   16404:	bl	159e0 <__assert_fail@plt+0x42dc>
   16408:	cmp	r0, #0
   1640c:	beq	16480 <__assert_fail@plt+0x4d7c>
   16410:	mov	r1, r5
   16414:	mov	r0, r8
   16418:	bl	15aa4 <__assert_fail@plt+0x43a0>
   1641c:	str	r0, [r4, #8]
   16420:	cmp	r0, #0
   16424:	beq	16480 <__assert_fail@plt+0x4d7c>
   16428:	mov	r1, #8
   1642c:	bl	1c0c8 <__assert_fail@plt+0xa9c4>
   16430:	str	r0, [r4]
   16434:	cmp	r0, #0
   16438:	beq	16480 <__assert_fail@plt+0x4d7c>
   1643c:	ldr	r3, [r4, #8]
   16440:	add	r0, r0, r3, lsl #3
   16444:	str	r0, [r4, #4]
   16448:	mov	r3, #0
   1644c:	str	r3, [r4, #12]
   16450:	str	r3, [r4, #16]
   16454:	str	r7, [r4, #24]
   16458:	str	r6, [r4, #28]
   1645c:	ldr	r2, [sp, #24]
   16460:	str	r2, [r4, #32]
   16464:	str	r3, [r4, #36]	; 0x24
   16468:	mov	r0, r4
   1646c:	ldrd	r4, [sp]
   16470:	ldrd	r6, [sp, #8]
   16474:	ldr	r8, [sp, #16]
   16478:	add	sp, sp, #20
   1647c:	pop	{pc}		; (ldr pc, [sp], #4)
   16480:	mov	r0, r4
   16484:	bl	15784 <__assert_fail@plt+0x4080>
   16488:	mov	r4, #0
   1648c:	b	16468 <__assert_fail@plt+0x4d64>
   16490:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16494:	strd	r6, [sp, #8]
   16498:	str	r8, [sp, #16]
   1649c:	str	lr, [sp, #20]
   164a0:	mov	r5, r0
   164a4:	ldr	r6, [r0]
   164a8:	ldr	r3, [r0, #4]
   164ac:	cmp	r6, r3
   164b0:	bcs	16548 <__assert_fail@plt+0x4e44>
   164b4:	add	r6, r6, #8
   164b8:	mov	r7, #0
   164bc:	b	16528 <__assert_fail@plt+0x4e24>
   164c0:	str	r7, [r4]
   164c4:	ldr	r3, [r4, #4]
   164c8:	ldr	r2, [r5, #36]	; 0x24
   164cc:	str	r2, [r4, #4]
   164d0:	str	r4, [r5, #36]	; 0x24
   164d4:	mov	r4, r3
   164d8:	cmp	r3, #0
   164dc:	beq	164f8 <__assert_fail@plt+0x4df4>
   164e0:	ldr	r3, [r5, #32]
   164e4:	cmp	r3, #0
   164e8:	beq	164c0 <__assert_fail@plt+0x4dbc>
   164ec:	ldr	r0, [r4]
   164f0:	blx	r3
   164f4:	b	164c0 <__assert_fail@plt+0x4dbc>
   164f8:	ldr	r3, [r5, #32]
   164fc:	cmp	r3, #0
   16500:	beq	1650c <__assert_fail@plt+0x4e08>
   16504:	ldr	r0, [r8, #-8]
   16508:	blx	r3
   1650c:	str	r7, [r8, #-8]
   16510:	str	r7, [r8, #-4]
   16514:	add	r2, r6, #8
   16518:	ldr	r3, [r5, #4]
   1651c:	cmp	r3, r6
   16520:	bls	16548 <__assert_fail@plt+0x4e44>
   16524:	mov	r6, r2
   16528:	mov	r8, r6
   1652c:	ldr	r3, [r6, #-8]
   16530:	cmp	r3, #0
   16534:	beq	16514 <__assert_fail@plt+0x4e10>
   16538:	ldr	r4, [r6, #-4]
   1653c:	cmp	r4, #0
   16540:	bne	164e0 <__assert_fail@plt+0x4ddc>
   16544:	b	164f8 <__assert_fail@plt+0x4df4>
   16548:	mov	r3, #0
   1654c:	str	r3, [r5, #12]
   16550:	str	r3, [r5, #16]
   16554:	ldrd	r4, [sp]
   16558:	ldrd	r6, [sp, #8]
   1655c:	ldr	r8, [sp, #16]
   16560:	add	sp, sp, #20
   16564:	pop	{pc}		; (ldr pc, [sp], #4)
   16568:	strd	r4, [sp, #-16]!
   1656c:	str	r6, [sp, #8]
   16570:	str	lr, [sp, #12]
   16574:	mov	r6, r0
   16578:	ldr	r3, [r0, #32]
   1657c:	cmp	r3, #0
   16580:	beq	165e0 <__assert_fail@plt+0x4edc>
   16584:	ldr	r3, [r0, #16]
   16588:	cmp	r3, #0
   1658c:	beq	165e0 <__assert_fail@plt+0x4edc>
   16590:	ldr	r5, [r0]
   16594:	ldr	r3, [r0, #4]
   16598:	cmp	r5, r3
   1659c:	bcc	165b4 <__assert_fail@plt+0x4eb0>
   165a0:	b	165f0 <__assert_fail@plt+0x4eec>
   165a4:	add	r5, r5, #8
   165a8:	ldr	r3, [r6, #4]
   165ac:	cmp	r3, r5
   165b0:	bls	165e0 <__assert_fail@plt+0x4edc>
   165b4:	ldr	r3, [r5]
   165b8:	cmp	r3, #0
   165bc:	beq	165a4 <__assert_fail@plt+0x4ea0>
   165c0:	mov	r4, r5
   165c4:	ldr	r3, [r6, #32]
   165c8:	ldr	r0, [r4]
   165cc:	blx	r3
   165d0:	ldr	r4, [r4, #4]
   165d4:	cmp	r4, #0
   165d8:	bne	165c4 <__assert_fail@plt+0x4ec0>
   165dc:	b	165a4 <__assert_fail@plt+0x4ea0>
   165e0:	ldr	r5, [r6]
   165e4:	ldr	r3, [r6, #4]
   165e8:	cmp	r5, r3
   165ec:	bcc	16640 <__assert_fail@plt+0x4f3c>
   165f0:	ldr	r0, [r6, #36]	; 0x24
   165f4:	cmp	r0, #0
   165f8:	beq	16610 <__assert_fail@plt+0x4f0c>
   165fc:	ldr	r4, [r0, #4]
   16600:	bl	15784 <__assert_fail@plt+0x4080>
   16604:	mov	r0, r4
   16608:	cmp	r4, #0
   1660c:	bne	165fc <__assert_fail@plt+0x4ef8>
   16610:	ldr	r0, [r6]
   16614:	bl	15784 <__assert_fail@plt+0x4080>
   16618:	mov	r0, r6
   1661c:	bl	15784 <__assert_fail@plt+0x4080>
   16620:	ldrd	r4, [sp]
   16624:	ldr	r6, [sp, #8]
   16628:	add	sp, sp, #12
   1662c:	pop	{pc}		; (ldr pc, [sp], #4)
   16630:	add	r5, r5, #8
   16634:	ldr	r3, [r6, #4]
   16638:	cmp	r3, r5
   1663c:	bls	165f0 <__assert_fail@plt+0x4eec>
   16640:	ldr	r0, [r5, #4]
   16644:	cmp	r0, #0
   16648:	beq	16630 <__assert_fail@plt+0x4f2c>
   1664c:	ldr	r4, [r0, #4]
   16650:	bl	15784 <__assert_fail@plt+0x4080>
   16654:	mov	r0, r4
   16658:	cmp	r4, #0
   1665c:	bne	1664c <__assert_fail@plt+0x4f48>
   16660:	b	16630 <__assert_fail@plt+0x4f2c>
   16664:	strd	r4, [sp, #-12]!
   16668:	str	lr, [sp, #8]
   1666c:	sub	sp, sp, #44	; 0x2c
   16670:	mov	r4, r0
   16674:	mov	r0, r1
   16678:	ldr	r1, [r4, #20]
   1667c:	bl	15aa4 <__assert_fail@plt+0x43a0>
   16680:	subs	r5, r0, #0
   16684:	beq	1677c <__assert_fail@plt+0x5078>
   16688:	ldr	r3, [r4, #8]
   1668c:	cmp	r3, r5
   16690:	beq	16794 <__assert_fail@plt+0x5090>
   16694:	mov	r1, #8
   16698:	mov	r0, r5
   1669c:	bl	1c0c8 <__assert_fail@plt+0xa9c4>
   166a0:	str	r0, [sp]
   166a4:	cmp	r0, #0
   166a8:	beq	1679c <__assert_fail@plt+0x5098>
   166ac:	str	r5, [sp, #8]
   166b0:	add	r0, r0, r5, lsl #3
   166b4:	str	r0, [sp, #4]
   166b8:	mov	r2, #0
   166bc:	str	r2, [sp, #12]
   166c0:	str	r2, [sp, #16]
   166c4:	ldr	r3, [r4, #20]
   166c8:	str	r3, [sp, #20]
   166cc:	ldr	r3, [r4, #24]
   166d0:	str	r3, [sp, #24]
   166d4:	ldr	r3, [r4, #28]
   166d8:	str	r3, [sp, #28]
   166dc:	ldr	r3, [r4, #32]
   166e0:	str	r3, [sp, #32]
   166e4:	ldr	r3, [r4, #36]	; 0x24
   166e8:	str	r3, [sp, #36]	; 0x24
   166ec:	mov	r1, r4
   166f0:	mov	r0, sp
   166f4:	bl	15bec <__assert_fail@plt+0x44e8>
   166f8:	subs	r5, r0, #0
   166fc:	bne	16744 <__assert_fail@plt+0x5040>
   16700:	ldr	r3, [sp, #36]	; 0x24
   16704:	str	r3, [r4, #36]	; 0x24
   16708:	mov	r2, #1
   1670c:	mov	r1, sp
   16710:	mov	r0, r4
   16714:	bl	15bec <__assert_fail@plt+0x44e8>
   16718:	cmp	r0, #0
   1671c:	beq	16778 <__assert_fail@plt+0x5074>
   16720:	mov	r2, #0
   16724:	mov	r1, sp
   16728:	mov	r0, r4
   1672c:	bl	15bec <__assert_fail@plt+0x44e8>
   16730:	cmp	r0, #0
   16734:	beq	16778 <__assert_fail@plt+0x5074>
   16738:	ldr	r0, [sp]
   1673c:	bl	15784 <__assert_fail@plt+0x4080>
   16740:	b	16780 <__assert_fail@plt+0x507c>
   16744:	ldr	r0, [r4]
   16748:	bl	15784 <__assert_fail@plt+0x4080>
   1674c:	ldr	r3, [sp]
   16750:	str	r3, [r4]
   16754:	ldr	r3, [sp, #4]
   16758:	str	r3, [r4, #4]
   1675c:	ldr	r3, [sp, #8]
   16760:	str	r3, [r4, #8]
   16764:	ldr	r3, [sp, #12]
   16768:	str	r3, [r4, #12]
   1676c:	ldr	r3, [sp, #36]	; 0x24
   16770:	str	r3, [r4, #36]	; 0x24
   16774:	b	16780 <__assert_fail@plt+0x507c>
   16778:	bl	116e0 <abort@plt>
   1677c:	mov	r5, #0
   16780:	mov	r0, r5
   16784:	add	sp, sp, #44	; 0x2c
   16788:	ldrd	r4, [sp]
   1678c:	add	sp, sp, #8
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	mov	r5, #1
   16798:	b	16780 <__assert_fail@plt+0x507c>
   1679c:	mov	r5, #0
   167a0:	b	16780 <__assert_fail@plt+0x507c>
   167a4:	strd	r4, [sp, #-16]!
   167a8:	str	r6, [sp, #8]
   167ac:	str	lr, [sp, #12]
   167b0:	sub	sp, sp, #8
   167b4:	subs	r5, r1, #0
   167b8:	beq	16804 <__assert_fail@plt+0x5100>
   167bc:	mov	r4, r0
   167c0:	mov	r6, r2
   167c4:	mov	r3, #0
   167c8:	add	r2, sp, #4
   167cc:	mov	r1, r5
   167d0:	bl	15d70 <__assert_fail@plt+0x466c>
   167d4:	cmp	r0, #0
   167d8:	beq	16808 <__assert_fail@plt+0x5104>
   167dc:	cmp	r6, #0
   167e0:	moveq	r0, #0
   167e4:	beq	167f0 <__assert_fail@plt+0x50ec>
   167e8:	str	r0, [r6]
   167ec:	mov	r0, #0
   167f0:	add	sp, sp, #8
   167f4:	ldrd	r4, [sp]
   167f8:	ldr	r6, [sp, #8]
   167fc:	add	sp, sp, #12
   16800:	pop	{pc}		; (ldr pc, [sp], #4)
   16804:	bl	116e0 <abort@plt>
   16808:	vldr	s15, [r4, #12]
   1680c:	vcvt.f32.u32	s14, s15
   16810:	ldr	r3, [r4, #20]
   16814:	vldr	s15, [r4, #8]
   16818:	vcvt.f32.u32	s15, s15
   1681c:	vldr	s13, [r3, #8]
   16820:	vmul.f32	s15, s15, s13
   16824:	vcmpe.f32	s14, s15
   16828:	vmrs	APSR_nzcv, fpscr
   1682c:	bgt	1687c <__assert_fail@plt+0x5178>
   16830:	ldr	r3, [sp, #4]
   16834:	ldr	r2, [r3]
   16838:	cmp	r2, #0
   1683c:	beq	16928 <__assert_fail@plt+0x5224>
   16840:	ldr	r0, [r4, #36]	; 0x24
   16844:	cmp	r0, #0
   16848:	beq	16910 <__assert_fail@plt+0x520c>
   1684c:	ldr	r3, [r0, #4]
   16850:	str	r3, [r4, #36]	; 0x24
   16854:	str	r5, [r0]
   16858:	ldr	r3, [sp, #4]
   1685c:	ldr	r2, [r3, #4]
   16860:	str	r2, [r0, #4]
   16864:	str	r0, [r3, #4]
   16868:	ldr	r3, [r4, #16]
   1686c:	add	r3, r3, #1
   16870:	str	r3, [r4, #16]
   16874:	mov	r0, #1
   16878:	b	167f0 <__assert_fail@plt+0x50ec>
   1687c:	mov	r0, r4
   16880:	bl	159e0 <__assert_fail@plt+0x42dc>
   16884:	ldr	r3, [r4, #20]
   16888:	vldr	s13, [r3, #8]
   1688c:	vldr	s15, [r4, #8]
   16890:	vcvt.f32.u32	s15, s15
   16894:	vldr	s14, [r4, #12]
   16898:	vcvt.f32.u32	s14, s14
   1689c:	vmul.f32	s12, s13, s15
   168a0:	vcmpe.f32	s14, s12
   168a4:	vmrs	APSR_nzcv, fpscr
   168a8:	ble	16830 <__assert_fail@plt+0x512c>
   168ac:	ldrb	r2, [r3, #16]
   168b0:	cmp	r2, #0
   168b4:	vldr	s14, [r3, #12]
   168b8:	vmul.f32	s15, s15, s14
   168bc:	vmuleq.f32	s15, s15, s13
   168c0:	vldr	s14, [pc, #132]	; 1694c <__assert_fail@plt+0x5248>
   168c4:	vcmpe.f32	s15, s14
   168c8:	vmrs	APSR_nzcv, fpscr
   168cc:	mvnge	r0, #0
   168d0:	bge	167f0 <__assert_fail@plt+0x50ec>
   168d4:	vcvt.u32.f32	s15, s15
   168d8:	vmov	r1, s15
   168dc:	mov	r0, r4
   168e0:	bl	16664 <__assert_fail@plt+0x4f60>
   168e4:	cmp	r0, #0
   168e8:	mvneq	r0, #0
   168ec:	beq	167f0 <__assert_fail@plt+0x50ec>
   168f0:	mov	r3, #0
   168f4:	add	r2, sp, #4
   168f8:	mov	r1, r5
   168fc:	mov	r0, r4
   16900:	bl	15d70 <__assert_fail@plt+0x466c>
   16904:	cmp	r0, #0
   16908:	beq	16830 <__assert_fail@plt+0x512c>
   1690c:	bl	116e0 <abort@plt>
   16910:	mov	r0, #8
   16914:	bl	1c13c <__assert_fail@plt+0xaa38>
   16918:	cmp	r0, #0
   1691c:	mvneq	r0, #0
   16920:	beq	167f0 <__assert_fail@plt+0x50ec>
   16924:	b	16854 <__assert_fail@plt+0x5150>
   16928:	str	r5, [r3]
   1692c:	ldr	r3, [r4, #16]
   16930:	add	r3, r3, #1
   16934:	str	r3, [r4, #16]
   16938:	ldr	r3, [r4, #12]
   1693c:	add	r3, r3, #1
   16940:	str	r3, [r4, #12]
   16944:	mov	r0, #1
   16948:	b	167f0 <__assert_fail@plt+0x50ec>
   1694c:	svcmi	0x00800000
   16950:	str	r4, [sp, #-8]!
   16954:	str	lr, [sp, #4]
   16958:	sub	sp, sp, #8
   1695c:	mov	r4, r1
   16960:	add	r2, sp, #4
   16964:	bl	167a4 <__assert_fail@plt+0x50a0>
   16968:	cmn	r0, #1
   1696c:	moveq	r0, #0
   16970:	beq	16980 <__assert_fail@plt+0x527c>
   16974:	cmp	r0, #0
   16978:	ldreq	r0, [sp, #4]
   1697c:	movne	r0, r4
   16980:	add	sp, sp, #8
   16984:	ldr	r4, [sp]
   16988:	add	sp, sp, #4
   1698c:	pop	{pc}		; (ldr pc, [sp], #4)
   16990:	strd	r4, [sp, #-16]!
   16994:	str	r6, [sp, #8]
   16998:	str	lr, [sp, #12]
   1699c:	sub	sp, sp, #8
   169a0:	mov	r4, r0
   169a4:	mov	r3, #1
   169a8:	add	r2, sp, #4
   169ac:	bl	15d70 <__assert_fail@plt+0x466c>
   169b0:	subs	r5, r0, #0
   169b4:	beq	169d4 <__assert_fail@plt+0x52d0>
   169b8:	ldr	r3, [r4, #16]
   169bc:	sub	r3, r3, #1
   169c0:	str	r3, [r4, #16]
   169c4:	ldr	r3, [sp, #4]
   169c8:	ldr	r3, [r3]
   169cc:	cmp	r3, #0
   169d0:	beq	169ec <__assert_fail@plt+0x52e8>
   169d4:	mov	r0, r5
   169d8:	add	sp, sp, #8
   169dc:	ldrd	r4, [sp]
   169e0:	ldr	r6, [sp, #8]
   169e4:	add	sp, sp, #12
   169e8:	pop	{pc}		; (ldr pc, [sp], #4)
   169ec:	ldr	r3, [r4, #12]
   169f0:	sub	r3, r3, #1
   169f4:	str	r3, [r4, #12]
   169f8:	vmov	s15, r3
   169fc:	vcvt.f32.u32	s15, s15
   16a00:	ldr	r3, [r4, #20]
   16a04:	vldr	s14, [r4, #8]
   16a08:	vcvt.f32.u32	s14, s14
   16a0c:	vldr	s13, [r3]
   16a10:	vmul.f32	s14, s14, s13
   16a14:	vcmpe.f32	s15, s14
   16a18:	vmrs	APSR_nzcv, fpscr
   16a1c:	bpl	169d4 <__assert_fail@plt+0x52d0>
   16a20:	mov	r0, r4
   16a24:	bl	159e0 <__assert_fail@plt+0x42dc>
   16a28:	ldr	r3, [r4, #20]
   16a2c:	vldr	s15, [r4, #8]
   16a30:	vcvt.f32.u32	s15, s15
   16a34:	vldr	s14, [r4, #12]
   16a38:	vcvt.f32.u32	s13, s14
   16a3c:	vldr	s14, [r3]
   16a40:	vmul.f32	s14, s15, s14
   16a44:	vcmpe.f32	s13, s14
   16a48:	vmrs	APSR_nzcv, fpscr
   16a4c:	bpl	169d4 <__assert_fail@plt+0x52d0>
   16a50:	ldrb	r2, [r3, #16]
   16a54:	cmp	r2, #0
   16a58:	vldr	s14, [r3, #4]
   16a5c:	vmuleq.f32	s15, s15, s14
   16a60:	vldreq	s14, [r3, #8]
   16a64:	vmul.f32	s15, s15, s14
   16a68:	vcvt.u32.f32	s15, s15
   16a6c:	vmov	r1, s15
   16a70:	mov	r0, r4
   16a74:	bl	16664 <__assert_fail@plt+0x4f60>
   16a78:	cmp	r0, #0
   16a7c:	bne	169d4 <__assert_fail@plt+0x52d0>
   16a80:	ldr	r0, [r4, #36]	; 0x24
   16a84:	cmp	r0, #0
   16a88:	beq	16aa0 <__assert_fail@plt+0x539c>
   16a8c:	ldr	r6, [r0, #4]
   16a90:	bl	15784 <__assert_fail@plt+0x4080>
   16a94:	mov	r0, r6
   16a98:	cmp	r6, #0
   16a9c:	bne	16a8c <__assert_fail@plt+0x5388>
   16aa0:	mov	r3, #0
   16aa4:	str	r3, [r4, #36]	; 0x24
   16aa8:	b	169d4 <__assert_fail@plt+0x52d0>
   16aac:	str	r4, [sp, #-8]!
   16ab0:	str	lr, [sp, #4]
   16ab4:	bl	16990 <__assert_fail@plt+0x528c>
   16ab8:	ldr	r4, [sp]
   16abc:	add	sp, sp, #4
   16ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ac4:	strd	r4, [sp, #-16]!
   16ac8:	str	r6, [sp, #8]
   16acc:	str	lr, [sp, #12]
   16ad0:	mov	r4, r0
   16ad4:	mov	r5, r1
   16ad8:	ldr	r0, [r0]
   16adc:	bl	1d6b0 <__assert_fail@plt+0xbfac>
   16ae0:	ldr	r1, [r4, #8]
   16ae4:	mov	r2, r5
   16ae8:	mov	r3, #0
   16aec:	eor	r0, r0, r1
   16af0:	ldr	r1, [r4, #12]
   16af4:	bl	1decc <__assert_fail@plt+0xc7c8>
   16af8:	mov	r0, r2
   16afc:	ldrd	r4, [sp]
   16b00:	ldr	r6, [sp, #8]
   16b04:	add	sp, sp, #12
   16b08:	pop	{pc}		; (ldr pc, [sp], #4)
   16b0c:	strd	r4, [sp, #-16]!
   16b10:	str	r6, [sp, #8]
   16b14:	str	lr, [sp, #12]
   16b18:	ldrd	r4, [r0, #8]
   16b1c:	ldrd	r2, [r1, #8]
   16b20:	cmp	r5, r3
   16b24:	cmpeq	r4, r2
   16b28:	movne	r0, #0
   16b2c:	beq	16b40 <__assert_fail@plt+0x543c>
   16b30:	ldrd	r4, [sp]
   16b34:	ldr	r6, [sp, #8]
   16b38:	add	sp, sp, #12
   16b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b40:	ldrd	r4, [r0, #16]
   16b44:	ldrd	r2, [r1, #16]
   16b48:	cmp	r5, r3
   16b4c:	cmpeq	r4, r2
   16b50:	movne	r0, #0
   16b54:	bne	16b30 <__assert_fail@plt+0x542c>
   16b58:	ldr	r1, [r1]
   16b5c:	ldr	r0, [r0]
   16b60:	bl	11320 <strcmp@plt>
   16b64:	clz	r0, r0
   16b68:	lsr	r0, r0, #5
   16b6c:	b	16b30 <__assert_fail@plt+0x542c>
   16b70:	str	r4, [sp, #-8]!
   16b74:	str	lr, [sp, #4]
   16b78:	mov	r4, r0
   16b7c:	ldr	r0, [r0]
   16b80:	bl	15784 <__assert_fail@plt+0x4080>
   16b84:	mov	r0, r4
   16b88:	bl	15784 <__assert_fail@plt+0x4080>
   16b8c:	ldr	r4, [sp]
   16b90:	add	sp, sp, #4
   16b94:	pop	{pc}		; (ldr pc, [sp], #4)
   16b98:	str	r4, [sp, #-16]!
   16b9c:	strd	r6, [sp, #4]
   16ba0:	str	lr, [sp, #12]
   16ba4:	vpush	{d8}
   16ba8:	vmov.f64	d8, d0
   16bac:	cmp	r0, #1
   16bb0:	beq	16c18 <__assert_fail@plt+0x5514>
   16bb4:	mov	r4, r0
   16bb8:	vldr	d7, [pc, #112]	; 16c30 <__assert_fail@plt+0x552c>
   16bbc:	vcmpe.f64	d0, d7
   16bc0:	vmrs	APSR_nzcv, fpscr
   16bc4:	bpl	16c18 <__assert_fail@plt+0x5514>
   16bc8:	vmov	r0, r1, d0
   16bcc:	bl	1df18 <__assert_fail@plt+0xc814>
   16bd0:	mov	r6, r0
   16bd4:	mov	r7, r1
   16bd8:	cmp	r4, #0
   16bdc:	movne	r0, #0
   16be0:	bne	16c00 <__assert_fail@plt+0x54fc>
   16be4:	mov	r0, r6
   16be8:	bl	1de58 <__assert_fail@plt+0xc754>
   16bec:	vmov	d7, r0, r1
   16bf0:	vcmp.f64	d7, d8
   16bf4:	vmrs	APSR_nzcv, fpscr
   16bf8:	movne	r0, #1
   16bfc:	moveq	r0, #0
   16c00:	adds	r2, r6, r0
   16c04:	adc	r3, r7, r0, asr #31
   16c08:	mov	r0, r2
   16c0c:	mov	r1, r3
   16c10:	bl	1de58 <__assert_fail@plt+0xc754>
   16c14:	vmov	d8, r0, r1
   16c18:	vmov.f64	d0, d8
   16c1c:	vpop	{d8}
   16c20:	ldr	r4, [sp]
   16c24:	ldrd	r6, [sp, #4]
   16c28:	add	sp, sp, #12
   16c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c30:	andeq	r0, r0, r0
   16c34:	mvnsmi	r0, #0
   16c38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c3c:	strd	r6, [sp, #8]
   16c40:	strd	r8, [sp, #16]
   16c44:	strd	sl, [sp, #24]
   16c48:	str	lr, [sp, #32]
   16c4c:	vpush	{d8-d9}
   16c50:	sub	sp, sp, #124	; 0x7c
   16c54:	mov	r6, r0
   16c58:	mov	r7, r1
   16c5c:	mov	r8, r2
   16c60:	str	r2, [sp, #36]	; 0x24
   16c64:	mov	r9, r3
   16c68:	and	r3, r3, #3
   16c6c:	str	r3, [sp, #8]
   16c70:	ands	r3, r9, #32
   16c74:	str	r3, [sp, #44]	; 0x2c
   16c78:	movne	r3, #1024	; 0x400
   16c7c:	moveq	r3, #1000	; 0x3e8
   16c80:	str	r3, [sp, #40]	; 0x28
   16c84:	bl	1165c <localeconv@plt>
   16c88:	mov	r4, r0
   16c8c:	ldr	r5, [r0]
   16c90:	mov	r0, r5
   16c94:	bl	1153c <strlen@plt>
   16c98:	mov	fp, r0
   16c9c:	sub	r2, r0, #1
   16ca0:	cmp	r2, #16
   16ca4:	movcc	fp, r0
   16ca8:	movcs	fp, #1
   16cac:	movw	r3, #61784	; 0xf158
   16cb0:	movt	r3, #1
   16cb4:	cmp	r2, #15
   16cb8:	movhi	r5, r3
   16cbc:	ldr	sl, [r4, #8]
   16cc0:	ldr	r3, [r4, #4]
   16cc4:	mov	r4, r3
   16cc8:	mov	r0, r3
   16ccc:	bl	1153c <strlen@plt>
   16cd0:	movw	r3, #62044	; 0xf25c
   16cd4:	movt	r3, #1
   16cd8:	mov	r1, r4
   16cdc:	cmp	r0, #16
   16ce0:	movhi	r1, r3
   16ce4:	str	r1, [sp, #20]
   16ce8:	add	r3, r8, #644	; 0x284
   16cec:	add	r3, r3, #3
   16cf0:	str	r3, [sp, #32]
   16cf4:	ldrd	r2, [sp, #184]	; 0xb8
   16cf8:	ldrd	r0, [sp, #176]	; 0xb0
   16cfc:	cmp	r3, r1
   16d00:	cmpeq	r2, r0
   16d04:	bhi	16e88 <__assert_fail@plt+0x5784>
   16d08:	bl	1decc <__assert_fail@plt+0xc7c8>
   16d0c:	orrs	r3, r2, r3
   16d10:	bne	16d54 <__assert_fail@plt+0x5650>
   16d14:	ldrd	r2, [sp, #184]	; 0xb8
   16d18:	ldrd	r0, [sp, #176]	; 0xb0
   16d1c:	bl	1decc <__assert_fail@plt+0xc7c8>
   16d20:	mov	r2, r0
   16d24:	mov	r3, r1
   16d28:	mul	r0, r0, r7
   16d2c:	mla	ip, r6, r1, r0
   16d30:	umull	r0, r1, r2, r6
   16d34:	strd	r0, [sp, #24]
   16d38:	add	r1, ip, r1
   16d3c:	str	r1, [sp, #28]
   16d40:	ldrd	r0, [sp, #24]
   16d44:	bl	1decc <__assert_fail@plt+0xc7c8>
   16d48:	cmp	r1, r7
   16d4c:	cmpeq	r0, r6
   16d50:	beq	17024 <__assert_fail@plt+0x5920>
   16d54:	ldrd	r0, [sp, #176]	; 0xb0
   16d58:	bl	1de58 <__assert_fail@plt+0xc754>
   16d5c:	vmov	d9, r0, r1
   16d60:	ldrd	r0, [sp, #184]	; 0xb8
   16d64:	bl	1de58 <__assert_fail@plt+0xc754>
   16d68:	vmov	d7, r0, r1
   16d6c:	vdiv.f64	d8, d9, d7
   16d70:	mov	r0, r6
   16d74:	mov	r1, r7
   16d78:	bl	1de58 <__assert_fail@plt+0xc754>
   16d7c:	vmov	d7, r0, r1
   16d80:	vmul.f64	d0, d8, d7
   16d84:	tst	r9, #16
   16d88:	beq	16f74 <__assert_fail@plt+0x5870>
   16d8c:	vldr	d7, [pc, #1004]	; 17180 <__assert_fail@plt+0x5a7c>
   16d90:	mov	r7, #0
   16d94:	vldr	s13, [sp, #40]	; 0x28
   16d98:	vcvt.f64.u32	d6, s13
   16d9c:	vmul.f64	d7, d7, d6
   16da0:	add	r7, r7, #1
   16da4:	vmul.f64	d5, d6, d7
   16da8:	vcmpe.f64	d5, d0
   16dac:	vmrs	APSR_nzcv, fpscr
   16db0:	movls	r3, #1
   16db4:	movhi	r3, #0
   16db8:	cmp	r7, #7
   16dbc:	movgt	r3, #0
   16dc0:	andle	r3, r3, #1
   16dc4:	cmp	r3, #0
   16dc8:	bne	16d9c <__assert_fail@plt+0x5698>
   16dcc:	vdiv.f64	d8, d0, d7
   16dd0:	vmov.f64	d0, d8
   16dd4:	ldr	r0, [sp, #8]
   16dd8:	bl	16b98 <__assert_fail@plt+0x5494>
   16ddc:	vstr	d0, [sp]
   16de0:	movw	r3, #62112	; 0xf2a0
   16de4:	movt	r3, #1
   16de8:	mvn	r2, #0
   16dec:	mov	r1, #1
   16df0:	ldr	r4, [sp, #36]	; 0x24
   16df4:	mov	r0, r4
   16df8:	bl	11578 <__sprintf_chk@plt>
   16dfc:	mov	r0, r4
   16e00:	bl	1153c <strlen@plt>
   16e04:	mov	r8, r0
   16e08:	add	fp, fp, #1
   16e0c:	ldr	r3, [sp, #44]	; 0x2c
   16e10:	clz	r3, r3
   16e14:	lsr	r3, r3, #5
   16e18:	add	r3, r3, #1
   16e1c:	add	r3, r3, fp
   16e20:	cmp	r3, r0
   16e24:	bcc	16e40 <__assert_fail@plt+0x573c>
   16e28:	tst	r9, #8
   16e2c:	beq	16fb0 <__assert_fail@plt+0x58ac>
   16e30:	add	r3, r4, r0
   16e34:	ldrb	r3, [r3, #-1]
   16e38:	cmp	r3, #48	; 0x30
   16e3c:	bne	16fb0 <__assert_fail@plt+0x58ac>
   16e40:	vldr	d9, [pc, #832]	; 17188 <__assert_fail@plt+0x5a84>
   16e44:	vmul.f64	d0, d8, d9
   16e48:	ldr	r0, [sp, #8]
   16e4c:	bl	16b98 <__assert_fail@plt+0x5494>
   16e50:	vdiv.f64	d0, d0, d9
   16e54:	vstr	d0, [sp]
   16e58:	movw	r3, #62104	; 0xf298
   16e5c:	movt	r3, #1
   16e60:	mvn	r2, #0
   16e64:	mov	r1, #1
   16e68:	ldr	r4, [sp, #36]	; 0x24
   16e6c:	mov	r0, r4
   16e70:	bl	11578 <__sprintf_chk@plt>
   16e74:	mov	r0, r4
   16e78:	bl	1153c <strlen@plt>
   16e7c:	mov	r8, r0
   16e80:	mov	fp, #0
   16e84:	b	16fb0 <__assert_fail@plt+0x58ac>
   16e88:	ldrd	r2, [sp, #176]	; 0xb0
   16e8c:	orrs	r3, r2, r3
   16e90:	beq	16d54 <__assert_fail@plt+0x5650>
   16e94:	ldrd	r2, [sp, #176]	; 0xb0
   16e98:	ldrd	r0, [sp, #184]	; 0xb8
   16e9c:	bl	1decc <__assert_fail@plt+0xc7c8>
   16ea0:	orrs	r3, r2, r3
   16ea4:	bne	16d54 <__assert_fail@plt+0x5650>
   16ea8:	ldrd	r2, [sp, #176]	; 0xb0
   16eac:	ldrd	r0, [sp, #184]	; 0xb8
   16eb0:	bl	1decc <__assert_fail@plt+0xc7c8>
   16eb4:	strd	r0, [sp, #48]	; 0x30
   16eb8:	mov	r2, r0
   16ebc:	mov	r3, r1
   16ec0:	mov	r0, r6
   16ec4:	mov	r1, r7
   16ec8:	bl	1decc <__assert_fail@plt+0xc7c8>
   16ecc:	lsl	r1, r3, #2
   16ed0:	lsl	r4, r2, #2
   16ed4:	orr	r0, r1, r2, lsr #30
   16ed8:	adds	r4, r4, r2
   16edc:	adc	r3, r0, r3
   16ee0:	adds	r4, r4, r4
   16ee4:	adc	r8, r3, r3
   16ee8:	ldrd	r2, [sp, #48]	; 0x30
   16eec:	mov	r0, r4
   16ef0:	mov	r1, r8
   16ef4:	bl	1decc <__assert_fail@plt+0xc7c8>
   16ef8:	adds	r1, r2, r2
   16efc:	str	r1, [sp, #56]	; 0x38
   16f00:	adc	r3, r3, r3
   16f04:	str	r3, [sp, #60]	; 0x3c
   16f08:	ldrd	r2, [sp, #48]	; 0x30
   16f0c:	mov	r0, r6
   16f10:	mov	r1, r7
   16f14:	bl	1decc <__assert_fail@plt+0xc7c8>
   16f18:	strd	r0, [sp, #24]
   16f1c:	ldrd	r2, [sp, #48]	; 0x30
   16f20:	mov	r0, r4
   16f24:	mov	r1, r8
   16f28:	bl	1decc <__assert_fail@plt+0xc7c8>
   16f2c:	mov	r6, r0
   16f30:	ldrd	r2, [sp, #48]	; 0x30
   16f34:	ldrd	r0, [sp, #56]	; 0x38
   16f38:	cmp	r3, r1
   16f3c:	cmpeq	r2, r0
   16f40:	bls	16f58 <__assert_fail@plt+0x5854>
   16f44:	mov	r3, r0
   16f48:	orrs	r3, r3, r1
   16f4c:	movne	r4, #1
   16f50:	moveq	r4, #0
   16f54:	b	1702c <__assert_fail@plt+0x5928>
   16f58:	ldrd	r2, [sp, #48]	; 0x30
   16f5c:	ldrd	r0, [sp, #56]	; 0x38
   16f60:	cmp	r3, r1
   16f64:	cmpeq	r2, r0
   16f68:	movcc	r4, #3
   16f6c:	movcs	r4, #2
   16f70:	b	1702c <__assert_fail@plt+0x5928>
   16f74:	ldr	r0, [sp, #8]
   16f78:	bl	16b98 <__assert_fail@plt+0x5494>
   16f7c:	vstr	d0, [sp]
   16f80:	movw	r3, #62104	; 0xf298
   16f84:	movt	r3, #1
   16f88:	mvn	r2, #0
   16f8c:	mov	r1, #1
   16f90:	ldr	r4, [sp, #36]	; 0x24
   16f94:	mov	r0, r4
   16f98:	bl	11578 <__sprintf_chk@plt>
   16f9c:	mov	r0, r4
   16fa0:	bl	1153c <strlen@plt>
   16fa4:	mov	r8, r0
   16fa8:	mov	fp, #0
   16fac:	mvn	r7, #0
   16fb0:	ldr	r3, [sp, #32]
   16fb4:	sub	r6, r3, r8
   16fb8:	mov	r2, r8
   16fbc:	ldr	r1, [sp, #36]	; 0x24
   16fc0:	mov	r0, r6
   16fc4:	bl	11344 <memmove@plt>
   16fc8:	sub	r8, r8, fp
   16fcc:	add	r8, r6, r8
   16fd0:	tst	r9, #4
   16fd4:	bne	17374 <__assert_fail@plt+0x5c70>
   16fd8:	tst	r9, #128	; 0x80
   16fdc:	beq	16ff4 <__assert_fail@plt+0x58f0>
   16fe0:	cmp	r7, #0
   16fe4:	blt	17404 <__assert_fail@plt+0x5d00>
   16fe8:	and	r3, r9, #256	; 0x100
   16fec:	orrs	r2, r3, r7
   16ff0:	bne	17464 <__assert_fail@plt+0x5d60>
   16ff4:	mov	r3, #0
   16ff8:	ldr	r2, [sp, #32]
   16ffc:	strb	r3, [r2]
   17000:	mov	r0, r6
   17004:	add	sp, sp, #124	; 0x7c
   17008:	vpop	{d8-d9}
   1700c:	ldrd	r4, [sp]
   17010:	ldrd	r6, [sp, #8]
   17014:	ldrd	r8, [sp, #16]
   17018:	ldrd	sl, [sp, #24]
   1701c:	add	sp, sp, #32
   17020:	pop	{pc}		; (ldr pc, [sp], #4)
   17024:	mov	r4, #0
   17028:	mov	r6, r4
   1702c:	ands	r3, r9, #16
   17030:	str	r3, [sp, #48]	; 0x30
   17034:	beq	171ec <__assert_fail@plt+0x5ae8>
   17038:	ldr	r8, [sp, #40]	; 0x28
   1703c:	mov	r3, #0
   17040:	ldrd	r0, [sp, #24]
   17044:	cmp	r3, r1
   17048:	cmpeq	r8, r0
   1704c:	bhi	17224 <__assert_fail@plt+0x5b20>
   17050:	mov	r7, #0
   17054:	str	r5, [sp, #56]	; 0x38
   17058:	str	fp, [sp, #64]	; 0x40
   1705c:	str	sl, [sp, #68]	; 0x44
   17060:	mov	sl, r8
   17064:	mov	fp, r3
   17068:	b	170a8 <__assert_fail@plt+0x59a4>
   1706c:	add	r4, r4, r5
   17070:	cmp	r4, r8
   17074:	movhi	r4, #3
   17078:	movls	r4, #2
   1707c:	add	r7, r7, #1
   17080:	ldrd	r2, [sp, #24]
   17084:	cmp	fp, r3
   17088:	cmpeq	sl, r2
   1708c:	movls	r3, #1
   17090:	movhi	r3, #0
   17094:	cmp	r7, #7
   17098:	movgt	r3, #0
   1709c:	andle	r3, r3, #1
   170a0:	cmp	r3, #0
   170a4:	beq	170fc <__assert_fail@plt+0x59f8>
   170a8:	mov	r2, sl
   170ac:	mov	r3, fp
   170b0:	ldrd	r0, [sp, #24]
   170b4:	bl	1decc <__assert_fail@plt+0xc7c8>
   170b8:	add	r2, r2, r2, lsl #2
   170bc:	add	r2, r6, r2, lsl #1
   170c0:	udiv	r6, r2, r8
   170c4:	mls	r2, r8, r6, r2
   170c8:	asr	r5, r4, #1
   170cc:	add	r5, r5, r2, lsl #1
   170d0:	mov	r2, sl
   170d4:	mov	r3, fp
   170d8:	ldrd	r0, [sp, #24]
   170dc:	bl	1decc <__assert_fail@plt+0xc7c8>
   170e0:	strd	r0, [sp, #24]
   170e4:	cmp	r8, r5
   170e8:	bls	1706c <__assert_fail@plt+0x5968>
   170ec:	cmn	r4, r5
   170f0:	movne	r4, #1
   170f4:	moveq	r4, #0
   170f8:	b	1707c <__assert_fail@plt+0x5978>
   170fc:	ldr	r5, [sp, #56]	; 0x38
   17100:	ldr	fp, [sp, #64]	; 0x40
   17104:	ldr	sl, [sp, #68]	; 0x44
   17108:	ldrd	r2, [sp, #24]
   1710c:	cmp	r3, #0
   17110:	cmpeq	r2, #9
   17114:	bhi	17230 <__assert_fail@plt+0x5b2c>
   17118:	ldr	r3, [sp, #8]
   1711c:	cmp	r3, #1
   17120:	beq	17190 <__assert_fail@plt+0x5a8c>
   17124:	adds	r3, r4, #0
   17128:	movne	r3, #1
   1712c:	ldr	r2, [sp, #8]
   17130:	cmp	r2, #0
   17134:	movne	r3, #0
   17138:	cmp	r3, #0
   1713c:	beq	174f0 <__assert_fail@plt+0x5dec>
   17140:	add	r6, r6, #1
   17144:	cmp	r6, #10
   17148:	beq	171a8 <__assert_fail@plt+0x5aa4>
   1714c:	ldr	r3, [sp, #36]	; 0x24
   17150:	add	r8, r3, #644	; 0x284
   17154:	add	r8, r8, #2
   17158:	add	r6, r6, #48	; 0x30
   1715c:	strb	r6, [r3, #646]	; 0x286
   17160:	sub	r8, r8, fp
   17164:	mov	r2, fp
   17168:	mov	r1, r5
   1716c:	mov	r0, r8
   17170:	bl	11374 <memcpy@plt>
   17174:	mov	r6, #0
   17178:	mov	r4, r6
   1717c:	b	171f4 <__assert_fail@plt+0x5af0>
   17180:	andeq	r0, r0, r0
   17184:	svccc	0x00f00000	; IMB
   17188:	andeq	r0, r0, r0
   1718c:	eormi	r0, r4, r0
   17190:	and	r3, r6, #1
   17194:	add	r3, r3, r4
   17198:	cmp	r3, #2
   1719c:	movle	r3, #0
   171a0:	movgt	r3, #1
   171a4:	b	17138 <__assert_fail@plt+0x5a34>
   171a8:	ldr	r3, [sp, #24]
   171ac:	adds	r3, r3, #1
   171b0:	str	r3, [sp, #24]
   171b4:	ldr	r3, [sp, #28]
   171b8:	adc	r3, r3, #0
   171bc:	str	r3, [sp, #28]
   171c0:	ldrd	r2, [sp, #24]
   171c4:	cmp	r3, #0
   171c8:	cmpeq	r2, #9
   171cc:	bls	171e0 <__assert_fail@plt+0x5adc>
   171d0:	ldr	r8, [sp, #32]
   171d4:	mov	r4, #0
   171d8:	mov	r6, r4
   171dc:	b	171f4 <__assert_fail@plt+0x5af0>
   171e0:	mov	r4, #0
   171e4:	mov	r6, r4
   171e8:	b	174f8 <__assert_fail@plt+0x5df4>
   171ec:	ldr	r8, [sp, #32]
   171f0:	mvn	r7, #0
   171f4:	ldr	r3, [sp, #8]
   171f8:	cmp	r3, #1
   171fc:	beq	17238 <__assert_fail@plt+0x5b34>
   17200:	ldr	r3, [sp, #8]
   17204:	cmp	r3, #0
   17208:	movne	r6, #0
   1720c:	bne	17264 <__assert_fail@plt+0x5b60>
   17210:	add	r6, r6, r4
   17214:	cmp	r6, #0
   17218:	movle	r6, #0
   1721c:	movgt	r6, #1
   17220:	b	17264 <__assert_fail@plt+0x5b60>
   17224:	ldr	r8, [sp, #32]
   17228:	mov	r7, #0
   1722c:	b	171f4 <__assert_fail@plt+0x5af0>
   17230:	ldr	r8, [sp, #32]
   17234:	b	171f4 <__assert_fail@plt+0x5af0>
   17238:	ldr	r3, [sp, #24]
   1723c:	and	r0, r3, #1
   17240:	mov	r1, #0
   17244:	adds	r2, r0, r4
   17248:	adc	r3, r1, r4, asr #31
   1724c:	orr	r2, r2, r3
   17250:	cmp	r2, r1
   17254:	addne	r6, r6, #1
   17258:	cmp	r6, #5
   1725c:	movle	r6, #0
   17260:	movgt	r6, #1
   17264:	cmp	r6, #0
   17268:	beq	172c0 <__assert_fail@plt+0x5bbc>
   1726c:	ldr	r3, [sp, #24]
   17270:	adds	r3, r3, #1
   17274:	str	r3, [sp, #24]
   17278:	ldr	r3, [sp, #28]
   1727c:	adc	r3, r3, #0
   17280:	str	r3, [sp, #28]
   17284:	ldr	r3, [sp, #48]	; 0x30
   17288:	cmp	r3, #0
   1728c:	beq	172c0 <__assert_fail@plt+0x5bbc>
   17290:	ldr	r2, [sp, #40]	; 0x28
   17294:	mov	r3, #0
   17298:	ldrd	r0, [sp, #24]
   1729c:	cmp	r3, r1
   172a0:	cmpeq	r2, r0
   172a4:	moveq	r3, #1
   172a8:	movne	r3, #0
   172ac:	cmp	r7, #7
   172b0:	movgt	r3, #0
   172b4:	andle	r3, r3, #1
   172b8:	cmp	r3, #0
   172bc:	bne	172e4 <__assert_fail@plt+0x5be0>
   172c0:	mov	r4, #10
   172c4:	mov	r5, #0
   172c8:	mov	fp, r8
   172cc:	strd	r4, [sp, #8]
   172d0:	mov	r5, r9
   172d4:	mov	r9, r8
   172d8:	mov	r8, r7
   172dc:	ldrd	r6, [sp, #24]
   172e0:	b	1732c <__assert_fail@plt+0x5c28>
   172e4:	add	r7, r7, #1
   172e8:	tst	r9, #8
   172ec:	beq	17300 <__assert_fail@plt+0x5bfc>
   172f0:	sub	r6, r8, #1
   172f4:	mov	r3, #49	; 0x31
   172f8:	strb	r3, [r8, #-1]
   172fc:	b	16fd0 <__assert_fail@plt+0x58cc>
   17300:	mov	r3, #48	; 0x30
   17304:	strb	r3, [r8, #-1]
   17308:	mvn	r3, fp
   1730c:	add	r8, r8, r3
   17310:	mov	r2, fp
   17314:	mov	r1, r5
   17318:	mov	r0, r8
   1731c:	bl	11374 <memcpy@plt>
   17320:	b	172f0 <__assert_fail@plt+0x5bec>
   17324:	mov	r6, r0
   17328:	mov	r7, r1
   1732c:	ldrd	r2, [sp, #8]
   17330:	mov	r0, r6
   17334:	mov	r1, r7
   17338:	bl	1decc <__assert_fail@plt+0xc7c8>
   1733c:	add	r2, r2, #48	; 0x30
   17340:	strb	r2, [fp, #-1]!
   17344:	ldrd	r2, [sp, #8]
   17348:	mov	r0, r6
   1734c:	mov	r1, r7
   17350:	bl	1decc <__assert_fail@plt+0xc7c8>
   17354:	cmp	r7, #0
   17358:	cmpeq	r6, #9
   1735c:	bhi	17324 <__assert_fail@plt+0x5c20>
   17360:	mov	r7, r8
   17364:	mov	r8, r9
   17368:	mov	r6, fp
   1736c:	mov	r9, r5
   17370:	b	16fd0 <__assert_fail@plt+0x58cc>
   17374:	sub	r4, r8, r6
   17378:	ldr	r0, [sp, #20]
   1737c:	bl	1153c <strlen@plt>
   17380:	mov	fp, r0
   17384:	mov	r3, #41	; 0x29
   17388:	mov	r2, r4
   1738c:	mov	r1, r6
   17390:	add	r0, sp, #76	; 0x4c
   17394:	bl	11434 <__memcpy_chk@plt>
   17398:	mvn	r5, #0
   1739c:	mov	r6, r8
   173a0:	b	173e4 <__assert_fail@plt+0x5ce0>
   173a4:	cmp	r5, r4
   173a8:	movcs	r5, r4
   173ac:	sub	r6, r6, r5
   173b0:	sub	r4, r4, r5
   173b4:	mov	r2, r5
   173b8:	add	r3, sp, #76	; 0x4c
   173bc:	add	r1, r3, r4
   173c0:	mov	r0, r6
   173c4:	bl	11374 <memcpy@plt>
   173c8:	cmp	r4, #0
   173cc:	beq	16fd8 <__assert_fail@plt+0x58d4>
   173d0:	sub	r6, r6, fp
   173d4:	mov	r2, fp
   173d8:	ldr	r1, [sp, #20]
   173dc:	mov	r0, r6
   173e0:	bl	11374 <memcpy@plt>
   173e4:	ldrb	r3, [sl]
   173e8:	cmp	r3, #0
   173ec:	beq	173a4 <__assert_fail@plt+0x5ca0>
   173f0:	cmp	r3, #255	; 0xff
   173f4:	movne	r5, r3
   173f8:	moveq	r5, r4
   173fc:	add	sl, sl, #1
   17400:	b	173a4 <__assert_fail@plt+0x5ca0>
   17404:	ldrd	r2, [sp, #184]	; 0xb8
   17408:	cmp	r3, #0
   1740c:	cmpeq	r2, #1
   17410:	movls	r7, #0
   17414:	bls	16fe8 <__assert_fail@plt+0x58e4>
   17418:	mov	r7, #1
   1741c:	mov	r2, #1
   17420:	mov	r3, #0
   17424:	ldr	r1, [sp, #40]	; 0x28
   17428:	ldrd	r4, [sp, #184]	; 0xb8
   1742c:	mul	r0, r1, r3
   17430:	umull	r2, r3, r2, r1
   17434:	add	r3, r0, r3
   17438:	cmp	r5, r3
   1743c:	cmpeq	r4, r2
   17440:	bls	16fe8 <__assert_fail@plt+0x58e4>
   17444:	add	r7, r7, #1
   17448:	cmp	r7, #8
   1744c:	bne	1742c <__assert_fail@plt+0x5d28>
   17450:	and	r3, r9, #256	; 0x100
   17454:	tst	r9, #64	; 0x40
   17458:	bne	1746c <__assert_fail@plt+0x5d68>
   1745c:	ldr	r2, [sp, #32]
   17460:	b	17484 <__assert_fail@plt+0x5d80>
   17464:	tst	r9, #64	; 0x40
   17468:	beq	174cc <__assert_fail@plt+0x5dc8>
   1746c:	ldr	r0, [sp, #36]	; 0x24
   17470:	add	r2, r0, #648	; 0x288
   17474:	mov	r1, #32
   17478:	strb	r1, [r0, #647]	; 0x287
   1747c:	cmp	r7, #0
   17480:	beq	174d4 <__assert_fail@plt+0x5dd0>
   17484:	ldr	ip, [sp, #44]	; 0x2c
   17488:	cmp	ip, #0
   1748c:	cmpeq	r7, #1
   17490:	beq	1750c <__assert_fail@plt+0x5e08>
   17494:	mov	r0, r2
   17498:	movw	r1, #62072	; 0xf278
   1749c:	movt	r1, #1
   174a0:	ldrb	r1, [r1, r7]
   174a4:	strb	r1, [r0], #1
   174a8:	str	r0, [sp, #32]
   174ac:	cmp	r3, #0
   174b0:	beq	16ff4 <__assert_fail@plt+0x58f0>
   174b4:	cmp	ip, #0
   174b8:	movne	r3, #105	; 0x69
   174bc:	strbne	r3, [r2, #1]
   174c0:	addne	r2, r2, #2
   174c4:	ldreq	r2, [sp, #32]
   174c8:	b	174e0 <__assert_fail@plt+0x5ddc>
   174cc:	ldr	r2, [sp, #32]
   174d0:	b	1747c <__assert_fail@plt+0x5d78>
   174d4:	cmp	r3, #0
   174d8:	streq	r2, [sp, #32]
   174dc:	beq	16ff4 <__assert_fail@plt+0x58f0>
   174e0:	mov	r3, #66	; 0x42
   174e4:	strb	r3, [r2], #1
   174e8:	str	r2, [sp, #32]
   174ec:	b	16ff4 <__assert_fail@plt+0x58f0>
   174f0:	cmp	r6, #0
   174f4:	bne	1714c <__assert_fail@plt+0x5a48>
   174f8:	tst	r9, #8
   174fc:	beq	1714c <__assert_fail@plt+0x5a48>
   17500:	ldr	r8, [sp, #32]
   17504:	mov	r6, #0
   17508:	b	171f4 <__assert_fail@plt+0x5af0>
   1750c:	mov	r1, r2
   17510:	mov	r2, #107	; 0x6b
   17514:	strb	r2, [r1], #1
   17518:	str	r1, [sp, #32]
   1751c:	cmp	r3, #0
   17520:	beq	16ff4 <__assert_fail@plt+0x58f0>
   17524:	ldr	r2, [sp, #32]
   17528:	b	174e0 <__assert_fail@plt+0x5ddc>
   1752c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17530:	strd	r6, [sp, #8]
   17534:	str	lr, [sp, #16]
   17538:	sub	sp, sp, #20
   1753c:	mov	r7, r1
   17540:	mov	r6, r2
   17544:	subs	r4, r0, #0
   17548:	beq	175cc <__assert_fail@plt+0x5ec8>
   1754c:	ldrb	r3, [r4]
   17550:	cmp	r3, #39	; 0x27
   17554:	addeq	r4, r4, #1
   17558:	moveq	r5, #4
   1755c:	movne	r5, #0
   17560:	movw	r1, #62072	; 0xf278
   17564:	movt	r1, #1
   17568:	mov	r3, #4
   1756c:	add	r2, r1, #12
   17570:	add	r1, r1, #20
   17574:	mov	r0, r4
   17578:	bl	1cb50 <__assert_fail@plt+0xb44c>
   1757c:	cmp	r0, #0
   17580:	blt	1761c <__assert_fail@plt+0x5f18>
   17584:	movw	r3, #62072	; 0xf278
   17588:	movt	r3, #1
   1758c:	add	r3, r3, r0, lsl #2
   17590:	ldr	r3, [r3, #12]
   17594:	orr	r5, r5, r3
   17598:	mov	r2, #1
   1759c:	mov	r3, #0
   175a0:	strd	r2, [r6]
   175a4:	str	r5, [r7]
   175a8:	mov	r0, #0
   175ac:	ldrd	r2, [r6]
   175b0:	orrs	r3, r2, r3
   175b4:	beq	176b8 <__assert_fail@plt+0x5fb4>
   175b8:	add	sp, sp, #20
   175bc:	ldrd	r4, [sp]
   175c0:	ldrd	r6, [sp, #8]
   175c4:	add	sp, sp, #16
   175c8:	pop	{pc}		; (ldr pc, [sp], #4)
   175cc:	movw	r0, #62120	; 0xf2a8
   175d0:	movt	r0, #1
   175d4:	bl	114c4 <getenv@plt>
   175d8:	subs	r4, r0, #0
   175dc:	bne	1754c <__assert_fail@plt+0x5e48>
   175e0:	movw	r0, #62132	; 0xf2b4
   175e4:	movt	r0, #1
   175e8:	bl	114c4 <getenv@plt>
   175ec:	subs	r4, r0, #0
   175f0:	bne	1754c <__assert_fail@plt+0x5e48>
   175f4:	movw	r0, #60948	; 0xee14
   175f8:	movt	r0, #1
   175fc:	bl	114c4 <getenv@plt>
   17600:	cmp	r0, #0
   17604:	moveq	r2, #1024	; 0x400
   17608:	movne	r2, #512	; 0x200
   1760c:	mov	r3, #0
   17610:	strd	r2, [r6]
   17614:	mov	r5, #0
   17618:	b	175a4 <__assert_fail@plt+0x5ea0>
   1761c:	movw	r3, #62144	; 0xf2c0
   17620:	movt	r3, #1
   17624:	str	r3, [sp]
   17628:	mov	r3, r6
   1762c:	mov	r2, #0
   17630:	add	r1, sp, #12
   17634:	mov	r0, r4
   17638:	bl	1bb78 <__assert_fail@plt+0xa474>
   1763c:	cmp	r0, #0
   17640:	bne	17698 <__assert_fail@plt+0x5f94>
   17644:	ldrb	r3, [r4]
   17648:	sub	r3, r3, #48	; 0x30
   1764c:	uxtb	r3, r3
   17650:	cmp	r3, #9
   17654:	bls	175a4 <__assert_fail@plt+0x5ea0>
   17658:	ldr	r2, [sp, #12]
   1765c:	cmp	r2, r4
   17660:	beq	17680 <__assert_fail@plt+0x5f7c>
   17664:	ldrb	r3, [r4, #1]!
   17668:	sub	r3, r3, #48	; 0x30
   1766c:	uxtb	r3, r3
   17670:	cmp	r3, #9
   17674:	bls	175a4 <__assert_fail@plt+0x5ea0>
   17678:	cmp	r2, r4
   1767c:	bne	17664 <__assert_fail@plt+0x5f60>
   17680:	ldrb	r3, [r4, #-1]
   17684:	cmp	r3, #66	; 0x42
   17688:	orrne	r5, r5, #128	; 0x80
   1768c:	beq	176a4 <__assert_fail@plt+0x5fa0>
   17690:	orr	r5, r5, #32
   17694:	b	175a4 <__assert_fail@plt+0x5ea0>
   17698:	mov	r3, #0
   1769c:	str	r3, [r7]
   176a0:	b	175ac <__assert_fail@plt+0x5ea8>
   176a4:	orr	r5, r5, #384	; 0x180
   176a8:	ldrb	r3, [r4, #-2]
   176ac:	cmp	r3, #105	; 0x69
   176b0:	bne	175a4 <__assert_fail@plt+0x5ea0>
   176b4:	b	17690 <__assert_fail@plt+0x5f8c>
   176b8:	movw	r0, #60948	; 0xee14
   176bc:	movt	r0, #1
   176c0:	bl	114c4 <getenv@plt>
   176c4:	cmp	r0, #0
   176c8:	moveq	r2, #1024	; 0x400
   176cc:	movne	r2, #512	; 0x200
   176d0:	mov	r3, #0
   176d4:	strd	r2, [r6]
   176d8:	mov	r0, #4
   176dc:	b	175b8 <__assert_fail@plt+0x5eb4>
   176e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   176e4:	str	r6, [sp, #8]
   176e8:	strd	r8, [sp, #12]
   176ec:	str	lr, [sp, #20]
   176f0:	mov	r4, r0
   176f4:	mov	r5, r1
   176f8:	add	r6, r2, #20
   176fc:	mov	r3, #0
   17700:	strb	r3, [r2, #20]
   17704:	mov	r8, #10
   17708:	mov	r9, #0
   1770c:	b	17718 <__assert_fail@plt+0x6014>
   17710:	mov	r4, r0
   17714:	mov	r5, r1
   17718:	mov	r2, r8
   1771c:	mov	r3, r9
   17720:	mov	r0, r4
   17724:	mov	r1, r5
   17728:	bl	1decc <__assert_fail@plt+0xc7c8>
   1772c:	add	r2, r2, #48	; 0x30
   17730:	strb	r2, [r6, #-1]!
   17734:	mov	r2, r8
   17738:	mov	r3, r9
   1773c:	mov	r0, r4
   17740:	mov	r1, r5
   17744:	bl	1decc <__assert_fail@plt+0xc7c8>
   17748:	cmp	r5, #0
   1774c:	cmpeq	r4, #9
   17750:	bhi	17710 <__assert_fail@plt+0x600c>
   17754:	mov	r0, r6
   17758:	ldrd	r4, [sp]
   1775c:	ldr	r6, [sp, #8]
   17760:	ldrd	r8, [sp, #12]
   17764:	add	sp, sp, #20
   17768:	pop	{pc}		; (ldr pc, [sp], #4)
   1776c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17770:	strd	r6, [sp, #8]
   17774:	str	lr, [sp, #16]
   17778:	sub	sp, sp, #12
   1777c:	mov	r7, r1
   17780:	mov	r5, r2
   17784:	subs	r6, r0, #0
   17788:	addeq	r6, sp, #4
   1778c:	mov	r0, r6
   17790:	bl	1147c <mbrtowc@plt>
   17794:	mov	r4, r0
   17798:	cmp	r5, #0
   1779c:	cmnne	r0, #3
   177a0:	bhi	177bc <__assert_fail@plt+0x60b8>
   177a4:	mov	r0, r4
   177a8:	add	sp, sp, #12
   177ac:	ldrd	r4, [sp]
   177b0:	ldrd	r6, [sp, #8]
   177b4:	add	sp, sp, #16
   177b8:	pop	{pc}		; (ldr pc, [sp], #4)
   177bc:	mov	r0, #0
   177c0:	bl	1d654 <__assert_fail@plt+0xbf50>
   177c4:	cmp	r0, #0
   177c8:	bne	177a4 <__assert_fail@plt+0x60a0>
   177cc:	ldrb	r3, [r7]
   177d0:	str	r3, [r6]
   177d4:	mov	r4, #1
   177d8:	b	177a4 <__assert_fail@plt+0x60a0>
   177dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177e0:	strd	r6, [sp, #8]
   177e4:	strd	r8, [sp, #16]
   177e8:	strd	sl, [sp, #24]
   177ec:	str	lr, [sp, #32]
   177f0:	sub	sp, sp, #20
   177f4:	str	r0, [sp, #8]
   177f8:	mov	sl, r1
   177fc:	mov	r5, r2
   17800:	mov	r9, r3
   17804:	ldr	r6, [sp, #60]	; 0x3c
   17808:	bl	1153c <strlen@plt>
   1780c:	mov	r8, r0
   17810:	tst	r6, #2
   17814:	movne	r3, #0
   17818:	strne	r3, [sp, #4]
   1781c:	beq	1787c <__assert_fail@plt+0x6178>
   17820:	mov	r7, r8
   17824:	mov	fp, #0
   17828:	ldr	r3, [r9]
   1782c:	cmp	r3, r7
   17830:	movcc	r8, r3
   17834:	movcc	r4, #0
   17838:	bcc	17850 <__assert_fail@plt+0x614c>
   1783c:	cmp	r7, r3
   17840:	subcc	r4, r3, r7
   17844:	movcc	r3, r7
   17848:	movcs	r3, r7
   1784c:	movcs	r4, #0
   17850:	str	r3, [r9]
   17854:	ldr	r3, [sp, #56]	; 0x38
   17858:	cmp	r3, #0
   1785c:	beq	17a40 <__assert_fail@plt+0x633c>
   17860:	cmp	r3, #1
   17864:	moveq	r7, #0
   17868:	beq	17a48 <__assert_fail@plt+0x6344>
   1786c:	lsr	r7, r4, #1
   17870:	and	r4, r4, #1
   17874:	add	r4, r4, r7
   17878:	b	17a48 <__assert_fail@plt+0x6344>
   1787c:	bl	11458 <__ctype_get_mb_cur_max@plt>
   17880:	cmp	r0, #1
   17884:	movls	r3, #0
   17888:	strls	r3, [sp, #4]
   1788c:	bls	17820 <__assert_fail@plt+0x611c>
   17890:	mov	r2, #0
   17894:	ldr	r1, [sp, #8]
   17898:	mov	r0, r2
   1789c:	bl	11668 <mbstowcs@plt>
   178a0:	mov	r4, r0
   178a4:	cmn	r0, #1
   178a8:	bne	178d4 <__assert_fail@plt+0x61d0>
   178ac:	tst	r6, #1
   178b0:	moveq	r3, #0
   178b4:	streq	r3, [sp, #4]
   178b8:	moveq	fp, r3
   178bc:	beq	17a70 <__assert_fail@plt+0x636c>
   178c0:	mov	r7, r8
   178c4:	mov	r3, #0
   178c8:	str	r3, [sp, #4]
   178cc:	mov	fp, r3
   178d0:	b	17828 <__assert_fail@plt+0x6124>
   178d4:	add	fp, r0, #1
   178d8:	lsl	r4, fp, #2
   178dc:	mov	r0, r4
   178e0:	bl	1c13c <__assert_fail@plt+0xaa38>
   178e4:	subs	r3, r0, #0
   178e8:	str	r3, [sp, #4]
   178ec:	beq	1792c <__assert_fail@plt+0x6228>
   178f0:	mov	r2, fp
   178f4:	ldr	r1, [sp, #8]
   178f8:	ldr	r0, [sp, #4]
   178fc:	bl	11668 <mbstowcs@plt>
   17900:	cmp	r0, #0
   17904:	beq	17820 <__assert_fail@plt+0x611c>
   17908:	ldr	r7, [sp, #4]
   1790c:	add	r4, r7, r4
   17910:	mov	r3, #0
   17914:	str	r3, [r4, #-4]
   17918:	ldr	r0, [r7]
   1791c:	cmp	r0, r3
   17920:	beq	17b34 <__assert_fail@plt+0x6430>
   17924:	mov	r4, r3
   17928:	b	17954 <__assert_fail@plt+0x6250>
   1792c:	tst	r6, #1
   17930:	moveq	fp, r3
   17934:	mvneq	r4, #0
   17938:	beq	17a70 <__assert_fail@plt+0x636c>
   1793c:	mov	r7, r8
   17940:	ldr	fp, [sp, #4]
   17944:	b	17828 <__assert_fail@plt+0x6124>
   17948:	ldr	r0, [r7, #4]!
   1794c:	cmp	r0, #0
   17950:	beq	17970 <__assert_fail@plt+0x626c>
   17954:	bl	11410 <iswprint@plt>
   17958:	cmp	r0, #0
   1795c:	bne	17948 <__assert_fail@plt+0x6244>
   17960:	movw	r3, #65533	; 0xfffd
   17964:	str	r3, [r7]
   17968:	mov	r4, #1
   1796c:	b	17948 <__assert_fail@plt+0x6244>
   17970:	mov	r1, fp
   17974:	ldr	r0, [sp, #4]
   17978:	bl	11620 <wcswidth@plt>
   1797c:	mov	r7, r0
   17980:	cmp	r4, #0
   17984:	beq	17b44 <__assert_fail@plt+0x6440>
   17988:	mov	r2, #0
   1798c:	ldr	r1, [sp, #4]
   17990:	mov	r0, r2
   17994:	bl	11488 <wcstombs@plt>
   17998:	add	r3, r0, #1
   1799c:	str	r3, [sp, #12]
   179a0:	ldr	r0, [sp, #12]
   179a4:	bl	1c13c <__assert_fail@plt+0xaa38>
   179a8:	subs	fp, r0, #0
   179ac:	beq	179cc <__assert_fail@plt+0x62c8>
   179b0:	ldr	r8, [r9]
   179b4:	ldr	r4, [sp, #4]
   179b8:	ldr	r0, [r4]
   179bc:	cmp	r0, #0
   179c0:	beq	17a14 <__assert_fail@plt+0x6310>
   179c4:	mov	r7, #0
   179c8:	b	179f8 <__assert_fail@plt+0x62f4>
   179cc:	tst	r6, #1
   179d0:	mvneq	r4, #0
   179d4:	bne	17828 <__assert_fail@plt+0x6124>
   179d8:	b	17a70 <__assert_fail@plt+0x636c>
   179dc:	add	r3, r0, r7
   179e0:	cmp	r8, r3
   179e4:	bcc	17a1c <__assert_fail@plt+0x6318>
   179e8:	ldr	r0, [r4, #4]!
   179ec:	mov	r7, r3
   179f0:	cmp	r0, #0
   179f4:	beq	17a1c <__assert_fail@plt+0x6318>
   179f8:	bl	11338 <wcwidth@plt>
   179fc:	cmn	r0, #1
   17a00:	bne	179dc <__assert_fail@plt+0x62d8>
   17a04:	movw	r3, #65533	; 0xfffd
   17a08:	str	r3, [r4]
   17a0c:	mov	r0, #1
   17a10:	b	179dc <__assert_fail@plt+0x62d8>
   17a14:	mov	r7, r0
   17a18:	ldr	r4, [sp, #4]
   17a1c:	mov	r3, #0
   17a20:	str	r3, [r4]
   17a24:	ldr	r2, [sp, #12]
   17a28:	ldr	r1, [sp, #4]
   17a2c:	mov	r0, fp
   17a30:	bl	11488 <wcstombs@plt>
   17a34:	mov	r8, r0
   17a38:	str	fp, [sp, #8]
   17a3c:	b	17828 <__assert_fail@plt+0x6124>
   17a40:	mov	r7, r4
   17a44:	ldr	r4, [sp, #56]	; 0x38
   17a48:	and	r3, r6, #4
   17a4c:	cmp	r3, #0
   17a50:	movne	r4, #0
   17a54:	and	r6, r6, #8
   17a58:	cmp	r6, #0
   17a5c:	movne	r7, #0
   17a60:	cmp	r5, #0
   17a64:	bne	17aa0 <__assert_fail@plt+0x639c>
   17a68:	add	r4, r4, r8
   17a6c:	add	r4, r4, r7
   17a70:	ldr	r0, [sp, #4]
   17a74:	bl	15784 <__assert_fail@plt+0x4080>
   17a78:	mov	r0, fp
   17a7c:	bl	15784 <__assert_fail@plt+0x4080>
   17a80:	mov	r0, r4
   17a84:	add	sp, sp, #20
   17a88:	ldrd	r4, [sp]
   17a8c:	ldrd	r6, [sp, #8]
   17a90:	ldrd	r8, [sp, #16]
   17a94:	ldrd	sl, [sp, #24]
   17a98:	add	sp, sp, #32
   17a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17aa0:	sub	r5, r5, #1
   17aa4:	add	r5, sl, r5
   17aa8:	cmp	r4, #0
   17aac:	cmpne	sl, r5
   17ab0:	bcs	17b24 <__assert_fail@plt+0x6420>
   17ab4:	mov	r0, sl
   17ab8:	mov	r1, #32
   17abc:	strb	r1, [r0], #1
   17ac0:	sub	r3, sl, r0
   17ac4:	rsb	r2, r4, #0
   17ac8:	cmp	r2, r3
   17acc:	cmpne	r5, r0
   17ad0:	bhi	17abc <__assert_fail@plt+0x63b8>
   17ad4:	mov	r3, #0
   17ad8:	strb	r3, [r0]
   17adc:	sub	r2, r5, r0
   17ae0:	cmp	r2, r8
   17ae4:	movcs	r2, r8
   17ae8:	ldr	r1, [sp, #8]
   17aec:	bl	11500 <mempcpy@plt>
   17af0:	cmp	r7, #0
   17af4:	cmpne	r5, r0
   17af8:	bls	17b2c <__assert_fail@plt+0x6428>
   17afc:	mov	r3, r0
   17b00:	mov	r1, #32
   17b04:	strb	r1, [r3], #1
   17b08:	sub	r2, r3, r7
   17b0c:	cmp	r2, r0
   17b10:	cmpne	r5, r3
   17b14:	bhi	17b04 <__assert_fail@plt+0x6400>
   17b18:	mov	r2, #0
   17b1c:	strb	r2, [r3]
   17b20:	b	17a68 <__assert_fail@plt+0x6364>
   17b24:	mov	r0, sl
   17b28:	b	17ad4 <__assert_fail@plt+0x63d0>
   17b2c:	mov	r3, r0
   17b30:	b	17b18 <__assert_fail@plt+0x6414>
   17b34:	mov	r1, fp
   17b38:	ldr	r0, [sp, #4]
   17b3c:	bl	11620 <wcswidth@plt>
   17b40:	mov	r7, r0
   17b44:	ldr	r3, [r9]
   17b48:	cmp	r3, r7
   17b4c:	addcc	r3, r8, #1
   17b50:	strcc	r3, [sp, #12]
   17b54:	bcc	179a0 <__assert_fail@plt+0x629c>
   17b58:	mov	fp, #0
   17b5c:	b	1783c <__assert_fail@plt+0x6138>
   17b60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17b64:	strd	r6, [sp, #8]
   17b68:	strd	r8, [sp, #16]
   17b6c:	strd	sl, [sp, #24]
   17b70:	str	lr, [sp, #32]
   17b74:	sub	sp, sp, #12
   17b78:	mov	fp, r0
   17b7c:	mov	r6, r1
   17b80:	mov	sl, r2
   17b84:	mov	r9, r3
   17b88:	ldr	r8, [r1]
   17b8c:	mov	r0, r8
   17b90:	mov	r7, #0
   17b94:	add	r4, r0, #1
   17b98:	mov	r1, r4
   17b9c:	mov	r0, r7
   17ba0:	bl	1c178 <__assert_fail@plt+0xaa74>
   17ba4:	subs	r5, r0, #0
   17ba8:	beq	17be4 <__assert_fail@plt+0x64e0>
   17bac:	str	r8, [r6]
   17bb0:	str	r9, [sp, #4]
   17bb4:	str	sl, [sp]
   17bb8:	mov	r3, r6
   17bbc:	mov	r2, r4
   17bc0:	mov	r1, r5
   17bc4:	mov	r0, fp
   17bc8:	bl	177dc <__assert_fail@plt+0x60d8>
   17bcc:	cmn	r0, #1
   17bd0:	beq	17c0c <__assert_fail@plt+0x6508>
   17bd4:	mov	r7, r5
   17bd8:	cmp	r4, r0
   17bdc:	bls	17b94 <__assert_fail@plt+0x6490>
   17be0:	b	17bec <__assert_fail@plt+0x64e8>
   17be4:	mov	r0, r7
   17be8:	bl	15784 <__assert_fail@plt+0x4080>
   17bec:	mov	r0, r5
   17bf0:	add	sp, sp, #12
   17bf4:	ldrd	r4, [sp]
   17bf8:	ldrd	r6, [sp, #8]
   17bfc:	ldrd	r8, [sp, #16]
   17c00:	ldrd	sl, [sp, #24]
   17c04:	add	sp, sp, #32
   17c08:	pop	{pc}		; (ldr pc, [sp], #4)
   17c0c:	mov	r0, r5
   17c10:	bl	15784 <__assert_fail@plt+0x4080>
   17c14:	mov	r5, #0
   17c18:	b	17bec <__assert_fail@plt+0x64e8>
   17c1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17c20:	strd	r6, [sp, #8]
   17c24:	strd	r8, [sp, #16]
   17c28:	strd	sl, [sp, #24]
   17c2c:	str	lr, [sp, #32]
   17c30:	sub	sp, sp, #20
   17c34:	mov	r4, r0
   17c38:	mov	sl, r2
   17c3c:	add	r8, r0, r1
   17c40:	bl	11458 <__ctype_get_mb_cur_max@plt>
   17c44:	cmp	r0, #1
   17c48:	bls	17c68 <__assert_fail@plt+0x6564>
   17c4c:	cmp	r4, r8
   17c50:	bcs	17e1c <__assert_fail@plt+0x6718>
   17c54:	mov	r5, #0
   17c58:	mov	r6, #0
   17c5c:	mov	r7, #0
   17c60:	and	r9, sl, #2
   17c64:	b	17cb8 <__assert_fail@plt+0x65b4>
   17c68:	cmp	r4, r8
   17c6c:	movcs	r5, #0
   17c70:	bcs	17d80 <__assert_fail@plt+0x667c>
   17c74:	bl	11518 <__ctype_b_loc@plt>
   17c78:	ldr	r2, [r0]
   17c7c:	mov	r5, #0
   17c80:	and	sl, sl, #2
   17c84:	b	17ddc <__assert_fail@plt+0x66d8>
   17c88:	cmp	r3, #65	; 0x41
   17c8c:	bcc	17cdc <__assert_fail@plt+0x65d8>
   17c90:	cmp	r3, #95	; 0x5f
   17c94:	bls	17ca8 <__assert_fail@plt+0x65a4>
   17c98:	sub	r3, r3, #97	; 0x61
   17c9c:	uxtb	r3, r3
   17ca0:	cmp	r3, #29
   17ca4:	bhi	17cdc <__assert_fail@plt+0x65d8>
   17ca8:	add	r4, r4, #1
   17cac:	add	r5, r5, #1
   17cb0:	cmp	r4, r8
   17cb4:	bcs	17d80 <__assert_fail@plt+0x667c>
   17cb8:	ldrb	r3, [r4]
   17cbc:	cmp	r3, #63	; 0x3f
   17cc0:	bhi	17c88 <__assert_fail@plt+0x6584>
   17cc4:	cmp	r3, #37	; 0x25
   17cc8:	bcs	17ca8 <__assert_fail@plt+0x65a4>
   17ccc:	sub	r3, r3, #32
   17cd0:	uxtb	r3, r3
   17cd4:	cmp	r3, #3
   17cd8:	bls	17ca8 <__assert_fail@plt+0x65a4>
   17cdc:	strd	r6, [sp, #8]
   17ce0:	b	17d24 <__assert_fail@plt+0x6620>
   17ce4:	tst	sl, #1
   17ce8:	bne	17dc8 <__assert_fail@plt+0x66c4>
   17cec:	add	r4, r4, #1
   17cf0:	add	r5, r5, #1
   17cf4:	b	17cb0 <__assert_fail@plt+0x65ac>
   17cf8:	tst	sl, #1
   17cfc:	bne	17dc8 <__assert_fail@plt+0x66c4>
   17d00:	add	r5, r5, #1
   17d04:	mov	r4, r8
   17d08:	b	17cb0 <__assert_fail@plt+0x65ac>
   17d0c:	add	r5, r5, r0
   17d10:	add	r4, r4, fp
   17d14:	add	r0, sp, #8
   17d18:	bl	1138c <mbsinit@plt>
   17d1c:	cmp	r0, #0
   17d20:	bne	17cb0 <__assert_fail@plt+0x65ac>
   17d24:	add	r3, sp, #8
   17d28:	sub	r2, r8, r4
   17d2c:	mov	r1, r4
   17d30:	add	r0, sp, #4
   17d34:	bl	1776c <__assert_fail@plt+0x6068>
   17d38:	mov	fp, r0
   17d3c:	cmn	r0, #1
   17d40:	beq	17ce4 <__assert_fail@plt+0x65e0>
   17d44:	cmn	r0, #2
   17d48:	beq	17cf8 <__assert_fail@plt+0x65f4>
   17d4c:	cmp	r0, #0
   17d50:	movne	fp, r0
   17d54:	moveq	fp, #1
   17d58:	ldr	r0, [sp, #4]
   17d5c:	bl	11338 <wcwidth@plt>
   17d60:	cmp	r0, #0
   17d64:	blt	17da0 <__assert_fail@plt+0x669c>
   17d68:	movw	r3, #65535	; 0xffff
   17d6c:	movt	r3, #32767	; 0x7fff
   17d70:	sub	r3, r3, r5
   17d74:	cmp	r3, r0
   17d78:	bge	17d0c <__assert_fail@plt+0x6608>
   17d7c:	mvn	r5, #-2147483648	; 0x80000000
   17d80:	mov	r0, r5
   17d84:	add	sp, sp, #20
   17d88:	ldrd	r4, [sp]
   17d8c:	ldrd	r6, [sp, #8]
   17d90:	ldrd	r8, [sp, #16]
   17d94:	ldrd	sl, [sp, #24]
   17d98:	add	sp, sp, #32
   17d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17da0:	cmp	r9, #0
   17da4:	bne	17dc8 <__assert_fail@plt+0x66c4>
   17da8:	ldr	r0, [sp, #4]
   17dac:	bl	113ec <iswcntrl@plt>
   17db0:	cmp	r0, #0
   17db4:	bne	17d10 <__assert_fail@plt+0x660c>
   17db8:	cmn	r5, #-2147483647	; 0x80000001
   17dbc:	beq	17d7c <__assert_fail@plt+0x6678>
   17dc0:	add	r5, r5, #1
   17dc4:	b	17d10 <__assert_fail@plt+0x660c>
   17dc8:	mvn	r5, #0
   17dcc:	b	17d80 <__assert_fail@plt+0x667c>
   17dd0:	add	r5, r5, #1
   17dd4:	cmp	r8, r4
   17dd8:	beq	17d80 <__assert_fail@plt+0x667c>
   17ddc:	ldrb	r3, [r4], #1
   17de0:	lsl	r3, r3, #1
   17de4:	ldrh	r3, [r2, r3]
   17de8:	tst	r3, #16384	; 0x4000
   17dec:	beq	17dfc <__assert_fail@plt+0x66f8>
   17df0:	cmn	r5, #-2147483647	; 0x80000001
   17df4:	bne	17dd0 <__assert_fail@plt+0x66cc>
   17df8:	b	17d80 <__assert_fail@plt+0x667c>
   17dfc:	cmp	sl, #0
   17e00:	bne	17e24 <__assert_fail@plt+0x6720>
   17e04:	tst	r3, #2
   17e08:	bne	17dd4 <__assert_fail@plt+0x66d0>
   17e0c:	cmn	r5, #-2147483647	; 0x80000001
   17e10:	beq	17d80 <__assert_fail@plt+0x667c>
   17e14:	add	r5, r5, #1
   17e18:	b	17dd4 <__assert_fail@plt+0x66d0>
   17e1c:	mov	r5, #0
   17e20:	b	17d80 <__assert_fail@plt+0x667c>
   17e24:	mvn	r5, #0
   17e28:	b	17d80 <__assert_fail@plt+0x667c>
   17e2c:	strd	r4, [sp, #-16]!
   17e30:	str	r6, [sp, #8]
   17e34:	str	lr, [sp, #12]
   17e38:	mov	r4, r0
   17e3c:	mov	r5, r1
   17e40:	bl	1153c <strlen@plt>
   17e44:	mov	r2, r5
   17e48:	mov	r1, r0
   17e4c:	mov	r0, r4
   17e50:	bl	17c1c <__assert_fail@plt+0x6518>
   17e54:	ldrd	r4, [sp]
   17e58:	ldr	r6, [sp, #8]
   17e5c:	add	sp, sp, #12
   17e60:	pop	{pc}		; (ldr pc, [sp], #4)
   17e64:	str	r4, [sp, #-8]!
   17e68:	str	lr, [sp, #4]
   17e6c:	mov	r1, #32
   17e70:	bl	11548 <strchr@plt>
   17e74:	cmp	r0, #0
   17e78:	movne	r3, #0
   17e7c:	strbne	r3, [r0]
   17e80:	ldr	r4, [sp]
   17e84:	add	sp, sp, #4
   17e88:	pop	{pc}		; (ldr pc, [sp], #4)
   17e8c:	strd	r4, [sp, #-16]!
   17e90:	str	r6, [sp, #8]
   17e94:	str	lr, [sp, #12]
   17e98:	mov	r4, r0
   17e9c:	bl	1153c <strlen@plt>
   17ea0:	add	r0, r0, #1
   17ea4:	mov	r2, r4
   17ea8:	mov	r3, #0
   17eac:	b	17ec4 <__assert_fail@plt+0x67c0>
   17eb0:	strb	r1, [r2]
   17eb4:	add	r3, r3, #1
   17eb8:	add	r2, r2, #1
   17ebc:	cmp	r0, r3
   17ec0:	bls	17f3c <__assert_fail@plt+0x6838>
   17ec4:	ldrb	r1, [r4, r3]
   17ec8:	cmp	r1, #92	; 0x5c
   17ecc:	bne	17eb0 <__assert_fail@plt+0x67ac>
   17ed0:	add	ip, r3, #4
   17ed4:	cmp	ip, r0
   17ed8:	bcs	17eb0 <__assert_fail@plt+0x67ac>
   17edc:	add	ip, r4, r3
   17ee0:	ldrb	lr, [ip, #1]
   17ee4:	sub	ip, lr, #48	; 0x30
   17ee8:	uxtb	ip, ip
   17eec:	cmp	ip, #3
   17ef0:	bhi	17eb0 <__assert_fail@plt+0x67ac>
   17ef4:	add	ip, r4, r3
   17ef8:	ldrb	r5, [ip, #2]
   17efc:	sub	ip, r5, #48	; 0x30
   17f00:	uxtb	ip, ip
   17f04:	cmp	ip, #7
   17f08:	bhi	17eb0 <__assert_fail@plt+0x67ac>
   17f0c:	add	r6, r3, #3
   17f10:	ldrb	ip, [r4, r6]
   17f14:	sub	ip, ip, #48	; 0x30
   17f18:	uxtb	ip, ip
   17f1c:	cmp	ip, #7
   17f20:	bhi	17eb0 <__assert_fail@plt+0x67ac>
   17f24:	add	r3, r5, lr, lsl #3
   17f28:	sub	r3, r3, #432	; 0x1b0
   17f2c:	add	r3, ip, r3, lsl #3
   17f30:	strb	r3, [r2]
   17f34:	mov	r3, r6
   17f38:	b	17eb4 <__assert_fail@plt+0x67b0>
   17f3c:	ldrd	r4, [sp]
   17f40:	ldr	r6, [sp, #8]
   17f44:	add	sp, sp, #12
   17f48:	pop	{pc}		; (ldr pc, [sp], #4)
   17f4c:	str	r4, [sp, #-8]!
   17f50:	str	lr, [sp, #4]
   17f54:	mov	r4, r0
   17f58:	ldr	r0, [r0]
   17f5c:	bl	15784 <__assert_fail@plt+0x4080>
   17f60:	ldr	r0, [r4, #4]
   17f64:	bl	15784 <__assert_fail@plt+0x4080>
   17f68:	ldr	r0, [r4, #8]
   17f6c:	bl	15784 <__assert_fail@plt+0x4080>
   17f70:	ldrb	r3, [r4, #24]
   17f74:	tst	r3, #4
   17f78:	bne	17f90 <__assert_fail@plt+0x688c>
   17f7c:	mov	r0, r4
   17f80:	bl	15784 <__assert_fail@plt+0x4080>
   17f84:	ldr	r4, [sp]
   17f88:	add	sp, sp, #4
   17f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f90:	ldr	r0, [r4, #12]
   17f94:	bl	15784 <__assert_fail@plt+0x4080>
   17f98:	b	17f7c <__assert_fail@plt+0x6878>
   17f9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17fa0:	strd	r6, [sp, #8]
   17fa4:	strd	r8, [sp, #16]
   17fa8:	strd	sl, [sp, #24]
   17fac:	str	lr, [sp, #32]
   17fb0:	sub	sp, sp, #44	; 0x2c
   17fb4:	movw	r1, #62320	; 0xf370
   17fb8:	movt	r1, #1
   17fbc:	movw	r0, #62164	; 0xf2d4
   17fc0:	movt	r0, #1
   17fc4:	bl	1168c <fopen64@plt>
   17fc8:	subs	r5, r0, #0
   17fcc:	beq	18548 <__assert_fail@plt+0x6e44>
   17fd0:	mov	r3, #0
   17fd4:	str	r3, [sp, #16]
   17fd8:	str	r3, [sp, #20]
   17fdc:	add	r9, sp, #36	; 0x24
   17fe0:	movw	r7, #62188	; 0xf2ec
   17fe4:	movt	r7, #1
   17fe8:	movw	sl, #62208	; 0xf300
   17fec:	movt	sl, #1
   17ff0:	mov	fp, #65280	; 0xff00
   17ff4:	movt	fp, #15
   17ff8:	mov	r3, r5
   17ffc:	mov	r2, #10
   18000:	add	r1, sp, #20
   18004:	add	r0, sp, #16
   18008:	bl	11314 <__getdelim@plt>
   1800c:	cmn	r0, #1
   18010:	beq	1849c <__assert_fail@plt+0x6d98>
   18014:	add	r3, sp, #32
   18018:	str	r3, [sp]
   1801c:	add	r3, sp, #28
   18020:	add	r2, sp, #24
   18024:	mov	r1, r7
   18028:	ldr	r0, [sp, #16]
   1802c:	bl	11650 <sscanf@plt>
   18030:	sub	r0, r0, #2
   18034:	cmp	r0, #1
   18038:	bhi	17ff8 <__assert_fail@plt+0x68f4>
   1803c:	ldr	r4, [sp, #16]
   18040:	ldr	r3, [sp, #32]
   18044:	add	r4, r4, r3
   18048:	mov	r0, r4
   1804c:	bl	17e64 <__assert_fail@plt+0x6760>
   18050:	cmp	r0, #0
   18054:	beq	17ff8 <__assert_fail@plt+0x68f4>
   18058:	add	r6, r0, #1
   1805c:	mov	r0, r6
   18060:	bl	17e64 <__assert_fail@plt+0x6760>
   18064:	cmp	r0, #0
   18068:	beq	17ff8 <__assert_fail@plt+0x68f4>
   1806c:	mov	r1, sl
   18070:	add	r0, r0, #1
   18074:	bl	1c730 <__assert_fail@plt+0xb02c>
   18078:	cmp	r0, #0
   1807c:	beq	17ff8 <__assert_fail@plt+0x68f4>
   18080:	add	r8, r0, #3
   18084:	mov	r0, r8
   18088:	bl	17e64 <__assert_fail@plt+0x6760>
   1808c:	cmp	r0, #0
   18090:	beq	17ff8 <__assert_fail@plt+0x68f4>
   18094:	add	r3, r0, #1
   18098:	str	r3, [sp, #8]
   1809c:	mov	r0, r3
   180a0:	bl	17e64 <__assert_fail@plt+0x6760>
   180a4:	cmp	r0, #0
   180a8:	beq	17ff8 <__assert_fail@plt+0x68f4>
   180ac:	ldr	r0, [sp, #8]
   180b0:	bl	17e8c <__assert_fail@plt+0x6788>
   180b4:	mov	r0, r6
   180b8:	bl	17e8c <__assert_fail@plt+0x6788>
   180bc:	mov	r0, r4
   180c0:	bl	17e8c <__assert_fail@plt+0x6788>
   180c4:	str	r8, [sp, #12]
   180c8:	mov	r0, r8
   180cc:	bl	17e8c <__assert_fail@plt+0x6788>
   180d0:	mov	r0, #32
   180d4:	bl	1b47c <__assert_fail@plt+0x9d78>
   180d8:	mov	r8, r0
   180dc:	ldr	r0, [sp, #8]
   180e0:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   180e4:	str	r0, [r8]
   180e8:	mov	r0, r6
   180ec:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   180f0:	str	r0, [r8, #4]
   180f4:	mov	r0, r4
   180f8:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   180fc:	str	r0, [r8, #8]
   18100:	ldr	r0, [sp, #12]
   18104:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   18108:	mov	r4, r0
   1810c:	str	r0, [r8, #12]
   18110:	ldrb	r3, [r8, #24]
   18114:	orr	r3, r3, #4
   18118:	strb	r3, [r8, #24]
   1811c:	ldr	r1, [sp, #28]
   18120:	ldr	r3, [sp, #24]
   18124:	and	ip, fp, r3, lsl #8
   18128:	bic	r3, r3, #4080	; 0xff0
   1812c:	bic	r3, r3, #15
   18130:	uxtb	r2, r1
   18134:	orr	ip, r2, ip
   18138:	mov	r2, #0
   1813c:	movt	r2, #65520	; 0xfff0
   18140:	and	r2, r2, r1, lsl #12
   18144:	orr	r2, r2, ip
   18148:	orr	r3, r3, r1, lsr #20
   1814c:	str	r2, [r8, #16]
   18150:	str	r3, [r8, #20]
   18154:	movw	r1, #62212	; 0xf304
   18158:	movt	r1, #1
   1815c:	bl	11320 <strcmp@plt>
   18160:	cmp	r0, #0
   18164:	moveq	r0, #1
   18168:	beq	182d4 <__assert_fail@plt+0x6bd0>
   1816c:	movw	r1, #62220	; 0xf30c
   18170:	movt	r1, #1
   18174:	mov	r0, r4
   18178:	bl	11320 <strcmp@plt>
   1817c:	cmp	r0, #0
   18180:	moveq	r0, #1
   18184:	beq	182d4 <__assert_fail@plt+0x6bd0>
   18188:	movw	r1, #62228	; 0xf314
   1818c:	movt	r1, #1
   18190:	mov	r0, r4
   18194:	bl	11320 <strcmp@plt>
   18198:	cmp	r0, #0
   1819c:	moveq	r0, #1
   181a0:	beq	182d4 <__assert_fail@plt+0x6bd0>
   181a4:	movw	r1, #62236	; 0xf31c
   181a8:	movt	r1, #1
   181ac:	mov	r0, r4
   181b0:	bl	11320 <strcmp@plt>
   181b4:	cmp	r0, #0
   181b8:	moveq	r0, #1
   181bc:	beq	182d4 <__assert_fail@plt+0x6bd0>
   181c0:	movw	r1, #62244	; 0xf324
   181c4:	movt	r1, #1
   181c8:	mov	r0, r4
   181cc:	bl	11320 <strcmp@plt>
   181d0:	cmp	r0, #0
   181d4:	moveq	r0, #1
   181d8:	beq	182d4 <__assert_fail@plt+0x6bd0>
   181dc:	movw	r1, #62252	; 0xf32c
   181e0:	movt	r1, #1
   181e4:	mov	r0, r4
   181e8:	bl	11320 <strcmp@plt>
   181ec:	cmp	r0, #0
   181f0:	moveq	r0, #1
   181f4:	beq	182d4 <__assert_fail@plt+0x6bd0>
   181f8:	movw	r1, #62260	; 0xf334
   181fc:	movt	r1, #1
   18200:	mov	r0, r4
   18204:	bl	11320 <strcmp@plt>
   18208:	cmp	r0, #0
   1820c:	moveq	r0, #1
   18210:	beq	182d4 <__assert_fail@plt+0x6bd0>
   18214:	movw	r1, #62272	; 0xf340
   18218:	movt	r1, #1
   1821c:	mov	r0, r4
   18220:	bl	11320 <strcmp@plt>
   18224:	cmp	r0, #0
   18228:	moveq	r0, #1
   1822c:	beq	182d4 <__assert_fail@plt+0x6bd0>
   18230:	movw	r1, #62280	; 0xf348
   18234:	movt	r1, #1
   18238:	mov	r0, r4
   1823c:	bl	11320 <strcmp@plt>
   18240:	cmp	r0, #0
   18244:	moveq	r0, #1
   18248:	beq	182d4 <__assert_fail@plt+0x6bd0>
   1824c:	movw	r1, #62292	; 0xf354
   18250:	movt	r1, #1
   18254:	mov	r0, r4
   18258:	bl	11320 <strcmp@plt>
   1825c:	cmp	r0, #0
   18260:	moveq	r0, #1
   18264:	beq	182d4 <__assert_fail@plt+0x6bd0>
   18268:	movw	r1, #62300	; 0xf35c
   1826c:	movt	r1, #1
   18270:	mov	r0, r4
   18274:	bl	11320 <strcmp@plt>
   18278:	cmp	r0, #0
   1827c:	moveq	r0, #1
   18280:	beq	182d4 <__assert_fail@plt+0x6bd0>
   18284:	movw	r1, #62308	; 0xf364
   18288:	movt	r1, #1
   1828c:	mov	r0, r4
   18290:	bl	11320 <strcmp@plt>
   18294:	cmp	r0, #0
   18298:	moveq	r0, #1
   1829c:	beq	182d4 <__assert_fail@plt+0x6bd0>
   182a0:	movw	r1, #62316	; 0xf36c
   182a4:	movt	r1, #1
   182a8:	mov	r0, r4
   182ac:	bl	11320 <strcmp@plt>
   182b0:	cmp	r0, #0
   182b4:	moveq	r0, #1
   182b8:	beq	182d4 <__assert_fail@plt+0x6bd0>
   182bc:	movw	r1, #62324	; 0xf374
   182c0:	movt	r1, #1
   182c4:	mov	r0, r4
   182c8:	bl	11320 <strcmp@plt>
   182cc:	clz	r0, r0
   182d0:	lsr	r0, r0, #5
   182d4:	ldrb	r3, [r8, #24]
   182d8:	bfi	r3, r0, #0, #1
   182dc:	strb	r3, [r8, #24]
   182e0:	ldr	r6, [r8]
   182e4:	mov	r1, #58	; 0x3a
   182e8:	mov	r0, r6
   182ec:	bl	11548 <strchr@plt>
   182f0:	cmp	r0, #0
   182f4:	movne	r0, #1
   182f8:	beq	18314 <__assert_fail@plt+0x6c10>
   182fc:	ldrb	r3, [r8, #24]
   18300:	bfi	r3, r0, #1, #1
   18304:	strb	r3, [r8, #24]
   18308:	str	r8, [r9]
   1830c:	add	r9, r8, #28
   18310:	b	17ff8 <__assert_fail@plt+0x68f4>
   18314:	ldrb	r3, [r6]
   18318:	cmp	r3, #47	; 0x2f
   1831c:	beq	18438 <__assert_fail@plt+0x6d34>
   18320:	movw	r1, #62356	; 0xf394
   18324:	movt	r1, #1
   18328:	mov	r0, r4
   1832c:	bl	11320 <strcmp@plt>
   18330:	cmp	r0, #0
   18334:	moveq	r0, #1
   18338:	beq	182fc <__assert_fail@plt+0x6bf8>
   1833c:	movw	r1, #62364	; 0xf39c
   18340:	movt	r1, #1
   18344:	mov	r0, r4
   18348:	bl	11320 <strcmp@plt>
   1834c:	cmp	r0, #0
   18350:	moveq	r0, #1
   18354:	beq	182fc <__assert_fail@plt+0x6bf8>
   18358:	movw	r1, #62368	; 0xf3a0
   1835c:	movt	r1, #1
   18360:	mov	r0, r4
   18364:	bl	11320 <strcmp@plt>
   18368:	cmp	r0, #0
   1836c:	moveq	r0, #1
   18370:	beq	182fc <__assert_fail@plt+0x6bf8>
   18374:	movw	r1, #62376	; 0xf3a8
   18378:	movt	r1, #1
   1837c:	mov	r0, r4
   18380:	bl	11320 <strcmp@plt>
   18384:	cmp	r0, #0
   18388:	moveq	r0, #1
   1838c:	beq	182fc <__assert_fail@plt+0x6bf8>
   18390:	movw	r1, #62388	; 0xf3b4
   18394:	movt	r1, #1
   18398:	mov	r0, r4
   1839c:	bl	11320 <strcmp@plt>
   183a0:	cmp	r0, #0
   183a4:	moveq	r0, #1
   183a8:	beq	182fc <__assert_fail@plt+0x6bf8>
   183ac:	movw	r1, #62396	; 0xf3bc
   183b0:	movt	r1, #1
   183b4:	mov	r0, r4
   183b8:	bl	11320 <strcmp@plt>
   183bc:	cmp	r0, #0
   183c0:	moveq	r0, #1
   183c4:	beq	182fc <__assert_fail@plt+0x6bf8>
   183c8:	movw	r1, #62404	; 0xf3c4
   183cc:	movt	r1, #1
   183d0:	mov	r0, r4
   183d4:	bl	11320 <strcmp@plt>
   183d8:	cmp	r0, #0
   183dc:	moveq	r0, #1
   183e0:	beq	182fc <__assert_fail@plt+0x6bf8>
   183e4:	movw	r1, #62412	; 0xf3cc
   183e8:	movt	r1, #1
   183ec:	mov	r0, r4
   183f0:	bl	11320 <strcmp@plt>
   183f4:	cmp	r0, #0
   183f8:	moveq	r0, #1
   183fc:	beq	182fc <__assert_fail@plt+0x6bf8>
   18400:	movw	r1, #62420	; 0xf3d4
   18404:	movt	r1, #1
   18408:	mov	r0, r4
   1840c:	bl	11320 <strcmp@plt>
   18410:	cmp	r0, #0
   18414:	moveq	r0, #1
   18418:	beq	182fc <__assert_fail@plt+0x6bf8>
   1841c:	mov	r1, r6
   18420:	movw	r0, #62428	; 0xf3dc
   18424:	movt	r0, #1
   18428:	bl	11320 <strcmp@plt>
   1842c:	clz	r0, r0
   18430:	lsr	r0, r0, #5
   18434:	b	182fc <__assert_fail@plt+0x6bf8>
   18438:	ldrb	r3, [r6, #1]
   1843c:	cmp	r3, #47	; 0x2f
   18440:	bne	18320 <__assert_fail@plt+0x6c1c>
   18444:	movw	r1, #62332	; 0xf37c
   18448:	movt	r1, #1
   1844c:	mov	r0, r4
   18450:	bl	11320 <strcmp@plt>
   18454:	cmp	r0, #0
   18458:	moveq	r0, #1
   1845c:	beq	182fc <__assert_fail@plt+0x6bf8>
   18460:	movw	r1, #62340	; 0xf384
   18464:	movt	r1, #1
   18468:	mov	r0, r4
   1846c:	bl	11320 <strcmp@plt>
   18470:	cmp	r0, #0
   18474:	moveq	r0, #1
   18478:	beq	182fc <__assert_fail@plt+0x6bf8>
   1847c:	movw	r1, #62348	; 0xf38c
   18480:	movt	r1, #1
   18484:	mov	r0, r4
   18488:	bl	11320 <strcmp@plt>
   1848c:	cmp	r0, #0
   18490:	moveq	r0, #1
   18494:	beq	182fc <__assert_fail@plt+0x6bf8>
   18498:	b	18320 <__assert_fail@plt+0x6c1c>
   1849c:	ldr	r0, [sp, #16]
   184a0:	bl	15784 <__assert_fail@plt+0x4080>
   184a4:	ldr	r3, [r5]
   184a8:	tst	r3, #32
   184ac:	bne	184ec <__assert_fail@plt+0x6de8>
   184b0:	mov	r0, r5
   184b4:	bl	1d42c <__assert_fail@plt+0xbd28>
   184b8:	cmn	r0, #1
   184bc:	beq	18504 <__assert_fail@plt+0x6e00>
   184c0:	mov	r3, #0
   184c4:	str	r3, [r9]
   184c8:	ldr	r6, [sp, #36]	; 0x24
   184cc:	mov	r0, r6
   184d0:	add	sp, sp, #44	; 0x2c
   184d4:	ldrd	r4, [sp]
   184d8:	ldrd	r6, [sp, #8]
   184dc:	ldrd	r8, [sp, #16]
   184e0:	ldrd	sl, [sp, #24]
   184e4:	add	sp, sp, #32
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	bl	1156c <__errno_location@plt>
   184f0:	mov	r4, r0
   184f4:	ldr	r6, [r0]
   184f8:	mov	r0, r5
   184fc:	bl	1d42c <__assert_fail@plt+0xbd28>
   18500:	str	r6, [r4]
   18504:	bl	1156c <__errno_location@plt>
   18508:	mov	r5, r0
   1850c:	ldr	r6, [r0]
   18510:	mov	r3, #0
   18514:	str	r3, [r9]
   18518:	ldr	r0, [sp, #36]	; 0x24
   1851c:	cmp	r0, r3
   18520:	beq	1853c <__assert_fail@plt+0x6e38>
   18524:	ldr	r4, [r0, #28]
   18528:	bl	17f4c <__assert_fail@plt+0x6848>
   1852c:	str	r4, [sp, #36]	; 0x24
   18530:	mov	r0, r4
   18534:	cmp	r4, #0
   18538:	bne	18524 <__assert_fail@plt+0x6e20>
   1853c:	str	r6, [r5]
   18540:	mov	r6, #0
   18544:	b	184cc <__assert_fail@plt+0x6dc8>
   18548:	movw	r1, #62436	; 0xf3e4
   1854c:	movt	r1, #1
   18550:	movw	r0, #62440	; 0xf3e8
   18554:	movt	r0, #1
   18558:	bl	11698 <setmntent@plt>
   1855c:	subs	r6, r0, #0
   18560:	beq	184cc <__assert_fail@plt+0x6dc8>
   18564:	add	r9, sp, #36	; 0x24
   18568:	movw	r8, #62452	; 0xf3f4
   1856c:	movt	r8, #1
   18570:	movw	r7, #62212	; 0xf304
   18574:	movt	r7, #1
   18578:	movw	fp, #62220	; 0xf30c
   1857c:	movt	fp, #1
   18580:	b	185cc <__assert_fail@plt+0x6ec8>
   18584:	ldrb	r3, [r4, #24]
   18588:	bfi	r3, r2, #0, #1
   1858c:	strb	r3, [r4, #24]
   18590:	ldr	sl, [r4]
   18594:	mov	r1, #58	; 0x3a
   18598:	mov	r0, sl
   1859c:	bl	11548 <strchr@plt>
   185a0:	cmp	r0, #0
   185a4:	movne	r0, #1
   185a8:	beq	187b4 <__assert_fail@plt+0x70b0>
   185ac:	ldrb	r3, [r4, #24]
   185b0:	bfi	r3, r0, #1, #1
   185b4:	strb	r3, [r4, #24]
   185b8:	mvn	r2, #0
   185bc:	mvn	r3, #0
   185c0:	strd	r2, [r4, #16]
   185c4:	str	r4, [r9]
   185c8:	add	r9, r4, #28
   185cc:	mov	r0, r6
   185d0:	bl	114a0 <getmntent@plt>
   185d4:	subs	r5, r0, #0
   185d8:	beq	1893c <__assert_fail@plt+0x7238>
   185dc:	mov	r1, r8
   185e0:	mov	r0, r5
   185e4:	bl	11464 <hasmntopt@plt>
   185e8:	mov	sl, r0
   185ec:	mov	r0, #32
   185f0:	bl	1b47c <__assert_fail@plt+0x9d78>
   185f4:	mov	r4, r0
   185f8:	ldr	r0, [r5]
   185fc:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   18600:	str	r0, [r4]
   18604:	ldr	r0, [r5, #4]
   18608:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   1860c:	str	r0, [r4, #4]
   18610:	mov	r3, #0
   18614:	str	r3, [r4, #8]
   18618:	ldr	r0, [r5, #8]
   1861c:	bl	1b8e8 <__assert_fail@plt+0xa1e4>
   18620:	mov	r5, r0
   18624:	str	r0, [r4, #12]
   18628:	ldrb	r3, [r4, #24]
   1862c:	orr	r3, r3, #4
   18630:	strb	r3, [r4, #24]
   18634:	mov	r1, r7
   18638:	bl	11320 <strcmp@plt>
   1863c:	cmp	r0, #0
   18640:	moveq	r2, #1
   18644:	beq	18584 <__assert_fail@plt+0x6e80>
   18648:	mov	r1, fp
   1864c:	mov	r0, r5
   18650:	bl	11320 <strcmp@plt>
   18654:	cmp	r0, #0
   18658:	moveq	r2, #1
   1865c:	beq	18584 <__assert_fail@plt+0x6e80>
   18660:	movw	r1, #62228	; 0xf314
   18664:	movt	r1, #1
   18668:	mov	r0, r5
   1866c:	bl	11320 <strcmp@plt>
   18670:	cmp	r0, #0
   18674:	moveq	r2, #1
   18678:	beq	18584 <__assert_fail@plt+0x6e80>
   1867c:	movw	r1, #62236	; 0xf31c
   18680:	movt	r1, #1
   18684:	mov	r0, r5
   18688:	bl	11320 <strcmp@plt>
   1868c:	cmp	r0, #0
   18690:	moveq	r2, #1
   18694:	beq	18584 <__assert_fail@plt+0x6e80>
   18698:	movw	r1, #62244	; 0xf324
   1869c:	movt	r1, #1
   186a0:	mov	r0, r5
   186a4:	bl	11320 <strcmp@plt>
   186a8:	cmp	r0, #0
   186ac:	moveq	r2, #1
   186b0:	beq	18584 <__assert_fail@plt+0x6e80>
   186b4:	movw	r1, #62252	; 0xf32c
   186b8:	movt	r1, #1
   186bc:	mov	r0, r5
   186c0:	bl	11320 <strcmp@plt>
   186c4:	cmp	r0, #0
   186c8:	moveq	r2, #1
   186cc:	beq	18584 <__assert_fail@plt+0x6e80>
   186d0:	movw	r1, #62260	; 0xf334
   186d4:	movt	r1, #1
   186d8:	mov	r0, r5
   186dc:	bl	11320 <strcmp@plt>
   186e0:	cmp	r0, #0
   186e4:	moveq	r2, #1
   186e8:	beq	18584 <__assert_fail@plt+0x6e80>
   186ec:	movw	r1, #62272	; 0xf340
   186f0:	movt	r1, #1
   186f4:	mov	r0, r5
   186f8:	bl	11320 <strcmp@plt>
   186fc:	cmp	r0, #0
   18700:	moveq	r2, #1
   18704:	beq	18584 <__assert_fail@plt+0x6e80>
   18708:	movw	r1, #62280	; 0xf348
   1870c:	movt	r1, #1
   18710:	mov	r0, r5
   18714:	bl	11320 <strcmp@plt>
   18718:	cmp	r0, #0
   1871c:	moveq	r2, #1
   18720:	beq	18584 <__assert_fail@plt+0x6e80>
   18724:	movw	r1, #62292	; 0xf354
   18728:	movt	r1, #1
   1872c:	mov	r0, r5
   18730:	bl	11320 <strcmp@plt>
   18734:	cmp	r0, #0
   18738:	moveq	r2, #1
   1873c:	beq	18584 <__assert_fail@plt+0x6e80>
   18740:	movw	r1, #62300	; 0xf35c
   18744:	movt	r1, #1
   18748:	mov	r0, r5
   1874c:	bl	11320 <strcmp@plt>
   18750:	cmp	r0, #0
   18754:	moveq	r2, #1
   18758:	beq	18584 <__assert_fail@plt+0x6e80>
   1875c:	movw	r1, #62308	; 0xf364
   18760:	movt	r1, #1
   18764:	mov	r0, r5
   18768:	bl	11320 <strcmp@plt>
   1876c:	cmp	r0, #0
   18770:	moveq	r2, #1
   18774:	beq	18584 <__assert_fail@plt+0x6e80>
   18778:	movw	r1, #62316	; 0xf36c
   1877c:	movt	r1, #1
   18780:	mov	r0, r5
   18784:	bl	11320 <strcmp@plt>
   18788:	cmp	r0, #0
   1878c:	moveq	r2, #1
   18790:	beq	18584 <__assert_fail@plt+0x6e80>
   18794:	movw	r1, #62324	; 0xf374
   18798:	movt	r1, #1
   1879c:	mov	r0, r5
   187a0:	bl	11320 <strcmp@plt>
   187a4:	orrs	r3, sl, r0
   187a8:	moveq	r2, #1
   187ac:	movne	r2, #0
   187b0:	b	18584 <__assert_fail@plt+0x6e80>
   187b4:	ldrb	r3, [sl]
   187b8:	cmp	r3, #47	; 0x2f
   187bc:	beq	188d8 <__assert_fail@plt+0x71d4>
   187c0:	movw	r1, #62356	; 0xf394
   187c4:	movt	r1, #1
   187c8:	mov	r0, r5
   187cc:	bl	11320 <strcmp@plt>
   187d0:	cmp	r0, #0
   187d4:	moveq	r0, #1
   187d8:	beq	185ac <__assert_fail@plt+0x6ea8>
   187dc:	movw	r1, #62364	; 0xf39c
   187e0:	movt	r1, #1
   187e4:	mov	r0, r5
   187e8:	bl	11320 <strcmp@plt>
   187ec:	cmp	r0, #0
   187f0:	moveq	r0, #1
   187f4:	beq	185ac <__assert_fail@plt+0x6ea8>
   187f8:	movw	r1, #62368	; 0xf3a0
   187fc:	movt	r1, #1
   18800:	mov	r0, r5
   18804:	bl	11320 <strcmp@plt>
   18808:	cmp	r0, #0
   1880c:	moveq	r0, #1
   18810:	beq	185ac <__assert_fail@plt+0x6ea8>
   18814:	movw	r1, #62376	; 0xf3a8
   18818:	movt	r1, #1
   1881c:	mov	r0, r5
   18820:	bl	11320 <strcmp@plt>
   18824:	cmp	r0, #0
   18828:	moveq	r0, #1
   1882c:	beq	185ac <__assert_fail@plt+0x6ea8>
   18830:	movw	r1, #62388	; 0xf3b4
   18834:	movt	r1, #1
   18838:	mov	r0, r5
   1883c:	bl	11320 <strcmp@plt>
   18840:	cmp	r0, #0
   18844:	moveq	r0, #1
   18848:	beq	185ac <__assert_fail@plt+0x6ea8>
   1884c:	movw	r1, #62396	; 0xf3bc
   18850:	movt	r1, #1
   18854:	mov	r0, r5
   18858:	bl	11320 <strcmp@plt>
   1885c:	cmp	r0, #0
   18860:	moveq	r0, #1
   18864:	beq	185ac <__assert_fail@plt+0x6ea8>
   18868:	movw	r1, #62404	; 0xf3c4
   1886c:	movt	r1, #1
   18870:	mov	r0, r5
   18874:	bl	11320 <strcmp@plt>
   18878:	cmp	r0, #0
   1887c:	moveq	r0, #1
   18880:	beq	185ac <__assert_fail@plt+0x6ea8>
   18884:	movw	r1, #62412	; 0xf3cc
   18888:	movt	r1, #1
   1888c:	mov	r0, r5
   18890:	bl	11320 <strcmp@plt>
   18894:	cmp	r0, #0
   18898:	moveq	r0, #1
   1889c:	beq	185ac <__assert_fail@plt+0x6ea8>
   188a0:	movw	r1, #62420	; 0xf3d4
   188a4:	movt	r1, #1
   188a8:	mov	r0, r5
   188ac:	bl	11320 <strcmp@plt>
   188b0:	cmp	r0, #0
   188b4:	moveq	r0, #1
   188b8:	beq	185ac <__assert_fail@plt+0x6ea8>
   188bc:	mov	r1, sl
   188c0:	movw	r0, #62428	; 0xf3dc
   188c4:	movt	r0, #1
   188c8:	bl	11320 <strcmp@plt>
   188cc:	clz	r0, r0
   188d0:	lsr	r0, r0, #5
   188d4:	b	185ac <__assert_fail@plt+0x6ea8>
   188d8:	ldrb	r3, [sl, #1]
   188dc:	cmp	r3, #47	; 0x2f
   188e0:	bne	187c0 <__assert_fail@plt+0x70bc>
   188e4:	movw	r1, #62332	; 0xf37c
   188e8:	movt	r1, #1
   188ec:	mov	r0, r5
   188f0:	bl	11320 <strcmp@plt>
   188f4:	cmp	r0, #0
   188f8:	moveq	r0, #1
   188fc:	beq	185ac <__assert_fail@plt+0x6ea8>
   18900:	movw	r1, #62340	; 0xf384
   18904:	movt	r1, #1
   18908:	mov	r0, r5
   1890c:	bl	11320 <strcmp@plt>
   18910:	cmp	r0, #0
   18914:	moveq	r0, #1
   18918:	beq	185ac <__assert_fail@plt+0x6ea8>
   1891c:	movw	r1, #62348	; 0xf38c
   18920:	movt	r1, #1
   18924:	mov	r0, r5
   18928:	bl	11320 <strcmp@plt>
   1892c:	cmp	r0, #0
   18930:	moveq	r0, #1
   18934:	beq	185ac <__assert_fail@plt+0x6ea8>
   18938:	b	187c0 <__assert_fail@plt+0x70bc>
   1893c:	mov	r0, r6
   18940:	bl	115f0 <endmntent@plt>
   18944:	cmp	r0, #0
   18948:	bne	184c0 <__assert_fail@plt+0x6dbc>
   1894c:	b	18504 <__assert_fail@plt+0x6e00>
   18950:	strd	r4, [sp, #-16]!
   18954:	str	r6, [sp, #8]
   18958:	str	lr, [sp, #12]
   1895c:	subs	r4, r0, #0
   18960:	beq	189fc <__assert_fail@plt+0x72f8>
   18964:	mov	r1, #47	; 0x2f
   18968:	mov	r0, r4
   1896c:	bl	1162c <strrchr@plt>
   18970:	subs	r5, r0, #0
   18974:	beq	189d4 <__assert_fail@plt+0x72d0>
   18978:	add	r6, r5, #1
   1897c:	sub	r3, r6, r4
   18980:	cmp	r3, #6
   18984:	ble	189d4 <__assert_fail@plt+0x72d0>
   18988:	mov	r2, #7
   1898c:	movw	r1, #62516	; 0xf434
   18990:	movt	r1, #1
   18994:	sub	r0, r5, #6
   18998:	bl	116d4 <strncmp@plt>
   1899c:	cmp	r0, #0
   189a0:	bne	189d4 <__assert_fail@plt+0x72d0>
   189a4:	mov	r2, #3
   189a8:	movw	r1, #62524	; 0xf43c
   189ac:	movt	r1, #1
   189b0:	mov	r0, r6
   189b4:	bl	116d4 <strncmp@plt>
   189b8:	cmp	r0, #0
   189bc:	movne	r4, r6
   189c0:	bne	189d4 <__assert_fail@plt+0x72d0>
   189c4:	add	r4, r5, #4
   189c8:	movw	r3, #800	; 0x320
   189cc:	movt	r3, #3
   189d0:	str	r4, [r3]
   189d4:	movw	r3, #960	; 0x3c0
   189d8:	movt	r3, #3
   189dc:	str	r4, [r3]
   189e0:	movw	r3, #804	; 0x324
   189e4:	movt	r3, #3
   189e8:	str	r4, [r3]
   189ec:	ldrd	r4, [sp]
   189f0:	ldr	r6, [sp, #8]
   189f4:	add	sp, sp, #12
   189f8:	pop	{pc}		; (ldr pc, [sp], #4)
   189fc:	movw	r3, #816	; 0x330
   18a00:	movt	r3, #3
   18a04:	ldr	r3, [r3]
   18a08:	mov	r2, #55	; 0x37
   18a0c:	mov	r1, #1
   18a10:	movw	r0, #62460	; 0xf3fc
   18a14:	movt	r0, #1
   18a18:	bl	11440 <fwrite@plt>
   18a1c:	bl	116e0 <abort@plt>
   18a20:	mov	r2, #0
   18a24:	mov	r3, #0
   18a28:	strd	r2, [r0]
   18a2c:	strd	r2, [r0, #8]
   18a30:	strd	r2, [r0, #16]
   18a34:	strd	r2, [r0, #24]
   18a38:	strd	r2, [r0, #32]
   18a3c:	strd	r2, [r0, #40]	; 0x28
   18a40:	cmp	r1, #10
   18a44:	beq	18a50 <__assert_fail@plt+0x734c>
   18a48:	str	r1, [r0]
   18a4c:	bx	lr
   18a50:	str	r4, [sp, #-8]!
   18a54:	str	lr, [sp, #4]
   18a58:	bl	116e0 <abort@plt>
   18a5c:	strd	r4, [sp, #-16]!
   18a60:	str	r6, [sp, #8]
   18a64:	str	lr, [sp, #12]
   18a68:	mov	r5, r0
   18a6c:	mov	r6, r1
   18a70:	mov	r2, #5
   18a74:	mov	r1, r0
   18a78:	mov	r0, #0
   18a7c:	bl	113bc <dcgettext@plt>
   18a80:	mov	r4, r0
   18a84:	cmp	r5, r0
   18a88:	beq	18aa0 <__assert_fail@plt+0x739c>
   18a8c:	mov	r0, r4
   18a90:	ldrd	r4, [sp]
   18a94:	ldr	r6, [sp, #8]
   18a98:	add	sp, sp, #12
   18a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18aa0:	bl	1d6e4 <__assert_fail@plt+0xbfe0>
   18aa4:	ldrb	r3, [r0]
   18aa8:	bic	r3, r3, #32
   18aac:	cmp	r3, #85	; 0x55
   18ab0:	bne	18b34 <__assert_fail@plt+0x7430>
   18ab4:	ldrb	r3, [r0, #1]
   18ab8:	bic	r3, r3, #32
   18abc:	cmp	r3, #84	; 0x54
   18ac0:	bne	18af8 <__assert_fail@plt+0x73f4>
   18ac4:	ldrb	r3, [r0, #2]
   18ac8:	bic	r3, r3, #32
   18acc:	cmp	r3, #70	; 0x46
   18ad0:	bne	18af8 <__assert_fail@plt+0x73f4>
   18ad4:	ldrb	r3, [r0, #3]
   18ad8:	cmp	r3, #45	; 0x2d
   18adc:	bne	18af8 <__assert_fail@plt+0x73f4>
   18ae0:	ldrb	r3, [r0, #4]
   18ae4:	cmp	r3, #56	; 0x38
   18ae8:	bne	18af8 <__assert_fail@plt+0x73f4>
   18aec:	ldrb	r3, [r0, #5]
   18af0:	cmp	r3, #0
   18af4:	beq	18b14 <__assert_fail@plt+0x7410>
   18af8:	movw	r4, #58016	; 0xe2a0
   18afc:	movt	r4, #1
   18b00:	movw	r3, #62628	; 0xf4a4
   18b04:	movt	r3, #1
   18b08:	cmp	r6, #9
   18b0c:	movne	r4, r3
   18b10:	b	18a8c <__assert_fail@plt+0x7388>
   18b14:	ldrb	r2, [r4]
   18b18:	movw	r4, #62624	; 0xf4a0
   18b1c:	movt	r4, #1
   18b20:	movw	r3, #62612	; 0xf494
   18b24:	movt	r3, #1
   18b28:	cmp	r2, #96	; 0x60
   18b2c:	movne	r4, r3
   18b30:	b	18a8c <__assert_fail@plt+0x7388>
   18b34:	cmp	r3, #71	; 0x47
   18b38:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b3c:	ldrb	r3, [r0, #1]
   18b40:	bic	r3, r3, #32
   18b44:	cmp	r3, #66	; 0x42
   18b48:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b4c:	ldrb	r3, [r0, #2]
   18b50:	cmp	r3, #49	; 0x31
   18b54:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b58:	ldrb	r3, [r0, #3]
   18b5c:	cmp	r3, #56	; 0x38
   18b60:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b64:	ldrb	r3, [r0, #4]
   18b68:	cmp	r3, #48	; 0x30
   18b6c:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b70:	ldrb	r3, [r0, #5]
   18b74:	cmp	r3, #51	; 0x33
   18b78:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b7c:	ldrb	r3, [r0, #6]
   18b80:	cmp	r3, #48	; 0x30
   18b84:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b88:	ldrb	r3, [r0, #7]
   18b8c:	cmp	r3, #0
   18b90:	bne	18af8 <__assert_fail@plt+0x73f4>
   18b94:	ldrb	r2, [r4]
   18b98:	movw	r4, #62620	; 0xf49c
   18b9c:	movt	r4, #1
   18ba0:	movw	r3, #62616	; 0xf498
   18ba4:	movt	r3, #1
   18ba8:	cmp	r2, #96	; 0x60
   18bac:	movne	r4, r3
   18bb0:	b	18a8c <__assert_fail@plt+0x7388>
   18bb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18bb8:	strd	r6, [sp, #8]
   18bbc:	strd	r8, [sp, #16]
   18bc0:	strd	sl, [sp, #24]
   18bc4:	str	lr, [sp, #32]
   18bc8:	sub	sp, sp, #116	; 0x74
   18bcc:	str	r0, [sp, #64]	; 0x40
   18bd0:	mov	r8, r1
   18bd4:	str	r2, [sp, #48]	; 0x30
   18bd8:	str	r3, [sp, #24]
   18bdc:	ldr	r7, [sp, #152]	; 0x98
   18be0:	bl	11458 <__ctype_get_mb_cur_max@plt>
   18be4:	str	r0, [sp, #76]	; 0x4c
   18be8:	ldr	r3, [sp, #156]	; 0x9c
   18bec:	ubfx	r3, r3, #1, #1
   18bf0:	str	r3, [sp, #32]
   18bf4:	mov	r3, #1
   18bf8:	str	r3, [sp, #40]	; 0x28
   18bfc:	mov	r3, #0
   18c00:	str	r3, [sp, #68]	; 0x44
   18c04:	str	r3, [sp, #36]	; 0x24
   18c08:	str	r3, [sp, #28]
   18c0c:	str	r3, [sp, #52]	; 0x34
   18c10:	str	r3, [sp, #60]	; 0x3c
   18c14:	str	r3, [sp, #72]	; 0x48
   18c18:	movw	r3, #62632	; 0xf4a8
   18c1c:	movt	r3, #1
   18c20:	str	r3, [sp, #80]	; 0x50
   18c24:	mov	r9, r8
   18c28:	mov	sl, r7
   18c2c:	cmp	sl, #10
   18c30:	ldrls	pc, [pc, sl, lsl #2]
   18c34:	b	18df8 <__assert_fail@plt+0x76f4>
   18c38:	muleq	r1, r8, ip
   18c3c:	andeq	r8, r1, ip, ror #24
   18c40:	ldrdeq	r8, [r1], -r0
   18c44:	andeq	r8, r1, r4, ror #24
   18c48:	andeq	r8, r1, r4, lsl #27
   18c4c:	andeq	r8, r1, r8, lsr #25
   18c50:	andeq	sl, r1, r4, ror r0
   18c54:	strdeq	r8, [r1], -ip
   18c58:	andeq	r8, r1, r4, ror #25
   18c5c:	andeq	r8, r1, r4, ror #25
   18c60:	andeq	r8, r1, r4, ror #25
   18c64:	mov	r3, #1
   18c68:	str	r3, [sp, #28]
   18c6c:	mov	r3, #1
   18c70:	str	r3, [sp, #32]
   18c74:	str	r3, [sp, #52]	; 0x34
   18c78:	movw	r3, #62628	; 0xf4a4
   18c7c:	movt	r3, #1
   18c80:	str	r3, [sp, #60]	; 0x3c
   18c84:	mov	fp, #0
   18c88:	mov	sl, #2
   18c8c:	mov	r6, #0
   18c90:	ldr	r8, [sp, #64]	; 0x40
   18c94:	b	1950c <__assert_fail@plt+0x7e08>
   18c98:	mov	fp, sl
   18c9c:	mov	r3, #0
   18ca0:	str	r3, [sp, #32]
   18ca4:	b	18c8c <__assert_fail@plt+0x7588>
   18ca8:	ldr	r3, [sp, #32]
   18cac:	cmp	r3, #0
   18cb0:	bne	18e10 <__assert_fail@plt+0x770c>
   18cb4:	cmp	r9, #0
   18cb8:	beq	18e34 <__assert_fail@plt+0x7730>
   18cbc:	mov	r3, #34	; 0x22
   18cc0:	ldr	r2, [sp, #64]	; 0x40
   18cc4:	strb	r3, [r2]
   18cc8:	mov	fp, #1
   18ccc:	str	fp, [sp, #28]
   18cd0:	str	fp, [sp, #52]	; 0x34
   18cd4:	movw	r3, #58016	; 0xe2a0
   18cd8:	movt	r3, #1
   18cdc:	str	r3, [sp, #60]	; 0x3c
   18ce0:	b	18c8c <__assert_fail@plt+0x7588>
   18ce4:	cmp	sl, #10
   18ce8:	bne	18d1c <__assert_fail@plt+0x7618>
   18cec:	ldr	r3, [sp, #32]
   18cf0:	cmp	r3, #0
   18cf4:	movne	fp, #0
   18cf8:	beq	18d44 <__assert_fail@plt+0x7640>
   18cfc:	ldr	r0, [sp, #168]	; 0xa8
   18d00:	bl	1153c <strlen@plt>
   18d04:	str	r0, [sp, #52]	; 0x34
   18d08:	ldr	r3, [sp, #168]	; 0xa8
   18d0c:	str	r3, [sp, #60]	; 0x3c
   18d10:	mov	r3, #1
   18d14:	str	r3, [sp, #28]
   18d18:	b	18c8c <__assert_fail@plt+0x7588>
   18d1c:	mov	r1, sl
   18d20:	ldr	r0, [sp, #80]	; 0x50
   18d24:	bl	18a5c <__assert_fail@plt+0x7358>
   18d28:	str	r0, [sp, #164]	; 0xa4
   18d2c:	mov	r1, sl
   18d30:	movw	r0, #62628	; 0xf4a4
   18d34:	movt	r0, #1
   18d38:	bl	18a5c <__assert_fail@plt+0x7358>
   18d3c:	str	r0, [sp, #168]	; 0xa8
   18d40:	b	18cec <__assert_fail@plt+0x75e8>
   18d44:	ldr	r3, [sp, #164]	; 0xa4
   18d48:	ldrb	r3, [r3]
   18d4c:	cmp	r3, #0
   18d50:	beq	18d7c <__assert_fail@plt+0x7678>
   18d54:	ldr	r2, [sp, #164]	; 0xa4
   18d58:	mov	fp, #0
   18d5c:	ldr	r1, [sp, #64]	; 0x40
   18d60:	cmp	r9, fp
   18d64:	strbhi	r3, [r1, fp]
   18d68:	add	fp, fp, #1
   18d6c:	ldrb	r3, [r2, #1]!
   18d70:	cmp	r3, #0
   18d74:	bne	18d60 <__assert_fail@plt+0x765c>
   18d78:	b	18cfc <__assert_fail@plt+0x75f8>
   18d7c:	mov	fp, #0
   18d80:	b	18cfc <__assert_fail@plt+0x75f8>
   18d84:	ldr	r3, [sp, #32]
   18d88:	cmp	r3, #0
   18d8c:	bne	18c6c <__assert_fail@plt+0x7568>
   18d90:	mov	r3, #1
   18d94:	str	r3, [sp, #28]
   18d98:	cmp	r9, #0
   18d9c:	beq	18e50 <__assert_fail@plt+0x774c>
   18da0:	mov	r3, #39	; 0x27
   18da4:	ldr	r2, [sp, #64]	; 0x40
   18da8:	strb	r3, [r2]
   18dac:	mov	r3, #0
   18db0:	str	r3, [sp, #32]
   18db4:	mov	fp, #1
   18db8:	str	fp, [sp, #52]	; 0x34
   18dbc:	movw	r3, #62628	; 0xf4a4
   18dc0:	movt	r3, #1
   18dc4:	str	r3, [sp, #60]	; 0x3c
   18dc8:	mov	sl, #2
   18dcc:	b	18c8c <__assert_fail@plt+0x7588>
   18dd0:	ldr	r3, [sp, #32]
   18dd4:	cmp	r3, #0
   18dd8:	beq	18d98 <__assert_fail@plt+0x7694>
   18ddc:	mov	r3, #1
   18de0:	str	r3, [sp, #52]	; 0x34
   18de4:	movw	r3, #62628	; 0xf4a4
   18de8:	movt	r3, #1
   18dec:	str	r3, [sp, #60]	; 0x3c
   18df0:	mov	fp, #0
   18df4:	b	18c8c <__assert_fail@plt+0x7588>
   18df8:	bl	116e0 <abort@plt>
   18dfc:	mov	fp, #0
   18e00:	str	fp, [sp, #32]
   18e04:	mov	r3, #1
   18e08:	str	r3, [sp, #28]
   18e0c:	b	18c8c <__assert_fail@plt+0x7588>
   18e10:	ldr	r3, [sp, #32]
   18e14:	str	r3, [sp, #28]
   18e18:	mov	r3, #1
   18e1c:	str	r3, [sp, #52]	; 0x34
   18e20:	movw	r3, #58016	; 0xe2a0
   18e24:	movt	r3, #1
   18e28:	str	r3, [sp, #60]	; 0x3c
   18e2c:	mov	fp, #0
   18e30:	b	18c8c <__assert_fail@plt+0x7588>
   18e34:	mov	fp, #1
   18e38:	str	fp, [sp, #28]
   18e3c:	str	fp, [sp, #52]	; 0x34
   18e40:	movw	r3, #58016	; 0xe2a0
   18e44:	movt	r3, #1
   18e48:	str	r3, [sp, #60]	; 0x3c
   18e4c:	b	18c8c <__assert_fail@plt+0x7588>
   18e50:	mov	r3, #0
   18e54:	str	r3, [sp, #32]
   18e58:	mov	fp, #1
   18e5c:	str	fp, [sp, #52]	; 0x34
   18e60:	movw	r3, #62628	; 0xf4a4
   18e64:	movt	r3, #1
   18e68:	str	r3, [sp, #60]	; 0x3c
   18e6c:	mov	sl, #2
   18e70:	b	18c8c <__assert_fail@plt+0x7588>
   18e74:	mov	r3, r2
   18e78:	add	r4, r6, r2
   18e7c:	ldr	r2, [sp, #24]
   18e80:	cmp	r3, #1
   18e84:	movls	r3, #0
   18e88:	movhi	r3, #1
   18e8c:	cmn	r2, #1
   18e90:	movne	r3, #0
   18e94:	cmp	r3, #0
   18e98:	beq	18ea8 <__assert_fail@plt+0x77a4>
   18e9c:	ldr	r0, [sp, #48]	; 0x30
   18ea0:	bl	1153c <strlen@plt>
   18ea4:	str	r0, [sp, #24]
   18ea8:	ldr	r3, [sp, #24]
   18eac:	cmp	r4, r3
   18eb0:	bhi	1a09c <__assert_fail@plt+0x8998>
   18eb4:	ldr	r3, [sp, #48]	; 0x30
   18eb8:	add	r4, r3, r6
   18ebc:	ldr	r2, [sp, #52]	; 0x34
   18ec0:	ldr	r1, [sp, #60]	; 0x3c
   18ec4:	mov	r0, r4
   18ec8:	bl	11398 <memcmp@plt>
   18ecc:	cmp	r0, #0
   18ed0:	bne	1a09c <__assert_fail@plt+0x8998>
   18ed4:	ldr	r3, [sp, #32]
   18ed8:	cmp	r3, #0
   18edc:	bne	190ec <__assert_fail@plt+0x79e8>
   18ee0:	ldrb	r4, [r4]
   18ee4:	cmp	r4, #126	; 0x7e
   18ee8:	ldrls	pc, [pc, r4, lsl #2]
   18eec:	b	199a0 <__assert_fail@plt+0x829c>
   18ef0:	andeq	r9, r1, r0, lsr r1
   18ef4:	andeq	r9, r1, r0, lsr #19
   18ef8:	andeq	r9, r1, r0, lsr #19
   18efc:	andeq	r9, r1, r0, lsr #19
   18f00:	andeq	r9, r1, r0, lsr #19
   18f04:	andeq	r9, r1, r0, lsr #19
   18f08:	andeq	r9, r1, r0, lsr #19
   18f0c:	andeq	r9, r1, r8, asr #16
   18f10:	andeq	r9, r1, ip, asr #7
   18f14:	andeq	r9, r1, r0, ror r7
   18f18:	andeq	r9, r1, ip, lsl r8
   18f1c:	andeq	r9, r1, r4, lsl #15
   18f20:	andeq	r9, r1, r0, ror #7
   18f24:	strdeq	r9, [r1], -r4
   18f28:	andeq	r9, r1, r0, lsr #19
   18f2c:	andeq	r9, r1, r0, lsr #19
   18f30:	andeq	r9, r1, r0, lsr #19
   18f34:	andeq	r9, r1, r0, lsr #19
   18f38:	andeq	r9, r1, r0, lsr #19
   18f3c:	andeq	r9, r1, r0, lsr #19
   18f40:	andeq	r9, r1, r0, lsr #19
   18f44:	andeq	r9, r1, r0, lsr #19
   18f48:	andeq	r9, r1, r0, lsr #19
   18f4c:	andeq	r9, r1, r0, lsr #19
   18f50:	andeq	r9, r1, r0, lsr #19
   18f54:	andeq	r9, r1, r0, lsr #19
   18f58:	andeq	r9, r1, r0, lsr #19
   18f5c:	andeq	r9, r1, r0, lsr #19
   18f60:	andeq	r9, r1, r0, lsr #19
   18f64:	andeq	r9, r1, r0, lsr #19
   18f68:	andeq	r9, r1, r0, lsr #19
   18f6c:	andeq	r9, r1, r0, lsr #19
   18f70:			; <UNDEFINED> instruction: 0x000198bc
   18f74:	andeq	r9, r1, r0, ror #17
   18f78:	andeq	r9, r1, r0, ror #17
   18f7c:	andeq	r9, r1, r8, ror r8
   18f80:	andeq	r9, r1, r0, ror #17
   18f84:	andeq	r9, r1, r0, lsl #28
   18f88:	andeq	r9, r1, r0, ror #17
   18f8c:	andeq	r9, r1, r0, lsl #18
   18f90:	andeq	r9, r1, r0, ror #17
   18f94:	andeq	r9, r1, r0, ror #17
   18f98:	andeq	r9, r1, r0, ror #17
   18f9c:	andeq	r9, r1, r0, lsl #28
   18fa0:	andeq	r9, r1, r0, lsl #28
   18fa4:	andeq	r9, r1, r0, lsl #28
   18fa8:	andeq	r9, r1, r0, lsl #28
   18fac:	andeq	r9, r1, r0, lsl #28
   18fb0:	andeq	r9, r1, r0, lsl #28
   18fb4:	andeq	r9, r1, r0, lsl #28
   18fb8:	andeq	r9, r1, r0, lsl #28
   18fbc:	andeq	r9, r1, r0, lsl #28
   18fc0:	andeq	r9, r1, r0, lsl #28
   18fc4:	andeq	r9, r1, r0, lsl #28
   18fc8:	andeq	r9, r1, r0, lsl #28
   18fcc:	andeq	r9, r1, r0, lsl #28
   18fd0:	andeq	r9, r1, r0, lsl #28
   18fd4:	andeq	r9, r1, r0, lsl #28
   18fd8:	andeq	r9, r1, r0, lsl #28
   18fdc:	andeq	r9, r1, r0, ror #17
   18fe0:	andeq	r9, r1, r0, ror #17
   18fe4:	andeq	r9, r1, r0, ror #17
   18fe8:	andeq	r9, r1, r0, ror #17
   18fec:	andeq	r9, r1, r0, ror #4
   18ff0:	andeq	r9, r1, r0, lsr #19
   18ff4:	andeq	r9, r1, r0, lsl #28
   18ff8:	andeq	r9, r1, r0, lsl #28
   18ffc:	andeq	r9, r1, r0, lsl #28
   19000:	andeq	r9, r1, r0, lsl #28
   19004:	andeq	r9, r1, r0, lsl #28
   19008:	andeq	r9, r1, r0, lsl #28
   1900c:	andeq	r9, r1, r0, lsl #28
   19010:	andeq	r9, r1, r0, lsl #28
   19014:	andeq	r9, r1, r0, lsl #28
   19018:	andeq	r9, r1, r0, lsl #28
   1901c:	andeq	r9, r1, r0, lsl #28
   19020:	andeq	r9, r1, r0, lsl #28
   19024:	andeq	r9, r1, r0, lsl #28
   19028:	andeq	r9, r1, r0, lsl #28
   1902c:	andeq	r9, r1, r0, lsl #28
   19030:	andeq	r9, r1, r0, lsl #28
   19034:	andeq	r9, r1, r0, lsl #28
   19038:	andeq	r9, r1, r0, lsl #28
   1903c:	andeq	r9, r1, r0, lsl #28
   19040:	andeq	r9, r1, r0, lsl #28
   19044:	andeq	r9, r1, r0, lsl #28
   19048:	andeq	r9, r1, r0, lsl #28
   1904c:	andeq	r9, r1, r0, lsl #28
   19050:	andeq	r9, r1, r0, lsl #28
   19054:	andeq	r9, r1, r0, lsl #28
   19058:	andeq	r9, r1, r0, lsl #28
   1905c:	andeq	r9, r1, r0, ror #17
   19060:	muleq	r1, r8, r7
   19064:	andeq	r9, r1, r0, lsl #28
   19068:	andeq	r9, r1, r0, ror #17
   1906c:	andeq	r9, r1, r0, lsl #28
   19070:	andeq	r9, r1, r0, ror #17
   19074:	andeq	r9, r1, r0, lsl #28
   19078:	andeq	r9, r1, r0, lsl #28
   1907c:	andeq	r9, r1, r0, lsl #28
   19080:	andeq	r9, r1, r0, lsl #28
   19084:	andeq	r9, r1, r0, lsl #28
   19088:	andeq	r9, r1, r0, lsl #28
   1908c:	andeq	r9, r1, r0, lsl #28
   19090:	andeq	r9, r1, r0, lsl #28
   19094:	andeq	r9, r1, r0, lsl #28
   19098:	andeq	r9, r1, r0, lsl #28
   1909c:	andeq	r9, r1, r0, lsl #28
   190a0:	andeq	r9, r1, r0, lsl #28
   190a4:	andeq	r9, r1, r0, lsl #28
   190a8:	andeq	r9, r1, r0, lsl #28
   190ac:	andeq	r9, r1, r0, lsl #28
   190b0:	andeq	r9, r1, r0, lsl #28
   190b4:	andeq	r9, r1, r0, lsl #28
   190b8:	andeq	r9, r1, r0, lsl #28
   190bc:	andeq	r9, r1, r0, lsl #28
   190c0:	andeq	r9, r1, r0, lsl #28
   190c4:	andeq	r9, r1, r0, lsl #28
   190c8:	andeq	r9, r1, r0, lsl #28
   190cc:	andeq	r9, r1, r0, lsl #28
   190d0:	andeq	r9, r1, r0, lsl #28
   190d4:	andeq	r9, r1, r0, lsl #28
   190d8:	andeq	r9, r1, r0, lsl #28
   190dc:	andeq	r9, r1, r8, asr r8
   190e0:	andeq	r9, r1, r0, ror #17
   190e4:	andeq	r9, r1, r8, asr r8
   190e8:	andeq	r9, r1, r8, ror r8
   190ec:	mov	r8, r9
   190f0:	mov	r7, sl
   190f4:	b	19ff4 <__assert_fail@plt+0x88f0>
   190f8:	ldr	r3, [sp, #28]
   190fc:	cmp	r3, #0
   19100:	bne	19120 <__assert_fail@plt+0x7a1c>
   19104:	ldr	r3, [sp, #156]	; 0x9c
   19108:	tst	r3, #1
   1910c:	bne	19508 <__assert_fail@plt+0x7e04>
   19110:	ldr	r3, [sp, #28]
   19114:	str	r3, [sp, #44]	; 0x2c
   19118:	mov	r5, r3
   1911c:	b	19428 <__assert_fail@plt+0x7d24>
   19120:	ldr	r3, [sp, #32]
   19124:	cmp	r3, #0
   19128:	bne	19fa4 <__assert_fail@plt+0x88a0>
   1912c:	str	r3, [sp, #44]	; 0x2c
   19130:	ldr	r3, [sp, #36]	; 0x24
   19134:	eor	r3, r3, #1
   19138:	cmp	sl, #2
   1913c:	movne	r3, #0
   19140:	andeq	r3, r3, #1
   19144:	cmp	r3, #0
   19148:	beq	191a0 <__assert_fail@plt+0x7a9c>
   1914c:	cmp	r9, fp
   19150:	movhi	r2, #39	; 0x27
   19154:	strbhi	r2, [r8, fp]
   19158:	add	r2, fp, #1
   1915c:	cmp	r9, r2
   19160:	movhi	r1, #36	; 0x24
   19164:	strbhi	r1, [r8, r2]
   19168:	add	r2, fp, #2
   1916c:	cmp	r9, r2
   19170:	movhi	r1, #39	; 0x27
   19174:	strbhi	r1, [r8, r2]
   19178:	add	r2, fp, #3
   1917c:	cmp	r9, r2
   19180:	bls	1a060 <__assert_fail@plt+0x895c>
   19184:	mov	r1, #92	; 0x5c
   19188:	strb	r1, [r8, r2]
   1918c:	add	fp, fp, #4
   19190:	str	r3, [sp, #36]	; 0x24
   19194:	mov	r5, #0
   19198:	mov	r4, #48	; 0x30
   1919c:	b	19474 <__assert_fail@plt+0x7d70>
   191a0:	cmp	r9, fp
   191a4:	bhi	191cc <__assert_fail@plt+0x7ac8>
   191a8:	add	r1, fp, #1
   191ac:	ldr	r2, [sp, #56]	; 0x38
   191b0:	cmp	r2, #0
   191b4:	bne	191f4 <__assert_fail@plt+0x7af0>
   191b8:	mov	r3, r5
   191bc:	ldr	r5, [sp, #56]	; 0x38
   191c0:	mov	fp, r1
   191c4:	mov	r4, #48	; 0x30
   191c8:	b	19428 <__assert_fail@plt+0x7d24>
   191cc:	mov	r2, #92	; 0x5c
   191d0:	strb	r2, [r8, fp]
   191d4:	add	r1, fp, #1
   191d8:	ldr	r2, [sp, #56]	; 0x38
   191dc:	cmp	r2, #0
   191e0:	moveq	r3, r5
   191e4:	moveq	r5, r2
   191e8:	moveq	fp, r1
   191ec:	moveq	r4, #48	; 0x30
   191f0:	beq	19474 <__assert_fail@plt+0x7d70>
   191f4:	add	r2, r6, #1
   191f8:	ldr	r0, [sp, #24]
   191fc:	cmp	r2, r0
   19200:	bcs	1921c <__assert_fail@plt+0x7b18>
   19204:	ldr	r0, [sp, #48]	; 0x30
   19208:	ldrb	r2, [r0, r2]
   1920c:	sub	r2, r2, #48	; 0x30
   19210:	uxtb	r2, r2
   19214:	cmp	r2, #9
   19218:	bls	19234 <__assert_fail@plt+0x7b30>
   1921c:	mov	r2, r3
   19220:	mov	r3, r5
   19224:	mov	r5, r2
   19228:	mov	fp, r1
   1922c:	mov	r4, #48	; 0x30
   19230:	b	1944c <__assert_fail@plt+0x7d48>
   19234:	cmp	r9, r1
   19238:	movhi	r2, #48	; 0x30
   1923c:	strbhi	r2, [r8, r1]
   19240:	add	r2, fp, #2
   19244:	cmp	r9, r2
   19248:	movhi	r1, #48	; 0x30
   1924c:	strbhi	r1, [r8, r2]
   19250:	add	r1, fp, #3
   19254:	b	1921c <__assert_fail@plt+0x7b18>
   19258:	mov	r3, #0
   1925c:	str	r3, [sp, #44]	; 0x2c
   19260:	cmp	sl, #2
   19264:	beq	19280 <__assert_fail@plt+0x7b7c>
   19268:	cmp	sl, #5
   1926c:	beq	19298 <__assert_fail@plt+0x7b94>
   19270:	mov	r5, #0
   19274:	mov	r3, r5
   19278:	mov	r4, #63	; 0x3f
   1927c:	b	19428 <__assert_fail@plt+0x7d24>
   19280:	ldr	r3, [sp, #32]
   19284:	cmp	r3, #0
   19288:	bne	19fb0 <__assert_fail@plt+0x88ac>
   1928c:	mov	r5, r3
   19290:	mov	r4, #63	; 0x3f
   19294:	b	19990 <__assert_fail@plt+0x828c>
   19298:	ldr	r3, [sp, #156]	; 0x9c
   1929c:	tst	r3, #4
   192a0:	beq	19dc8 <__assert_fail@plt+0x86c4>
   192a4:	add	r2, r6, #2
   192a8:	ldr	r3, [sp, #24]
   192ac:	cmp	r2, r3
   192b0:	bcs	19dd8 <__assert_fail@plt+0x86d4>
   192b4:	ldr	r3, [sp, #48]	; 0x30
   192b8:	add	r3, r3, r6
   192bc:	ldrb	r4, [r3, #1]
   192c0:	cmp	r4, #63	; 0x3f
   192c4:	movne	r5, #0
   192c8:	movne	r3, r5
   192cc:	movne	r4, #63	; 0x3f
   192d0:	bne	19428 <__assert_fail@plt+0x7d24>
   192d4:	ldr	r3, [sp, #48]	; 0x30
   192d8:	ldrb	r1, [r3, r2]
   192dc:	sub	r3, r1, #33	; 0x21
   192e0:	cmp	r3, #29
   192e4:	ldrls	pc, [pc, r3, lsl #2]
   192e8:	b	19de8 <__assert_fail@plt+0x86e4>
   192ec:	andeq	r9, r1, r4, ror #6
   192f0:	andeq	r9, r1, r8, ror #27
   192f4:	andeq	r9, r1, r8, ror #27
   192f8:	andeq	r9, r1, r8, ror #27
   192fc:	andeq	r9, r1, r8, ror #27
   19300:	andeq	r9, r1, r8, ror #27
   19304:	andeq	r9, r1, r4, ror #6
   19308:	andeq	r9, r1, r4, ror #6
   1930c:	andeq	r9, r1, r4, ror #6
   19310:	andeq	r9, r1, r8, ror #27
   19314:	andeq	r9, r1, r8, ror #27
   19318:	andeq	r9, r1, r8, ror #27
   1931c:	andeq	r9, r1, r4, ror #6
   19320:	andeq	r9, r1, r8, ror #27
   19324:	andeq	r9, r1, r4, ror #6
   19328:	andeq	r9, r1, r8, ror #27
   1932c:	andeq	r9, r1, r8, ror #27
   19330:	andeq	r9, r1, r8, ror #27
   19334:	andeq	r9, r1, r8, ror #27
   19338:	andeq	r9, r1, r8, ror #27
   1933c:	andeq	r9, r1, r8, ror #27
   19340:	andeq	r9, r1, r8, ror #27
   19344:	andeq	r9, r1, r8, ror #27
   19348:	andeq	r9, r1, r8, ror #27
   1934c:	andeq	r9, r1, r8, ror #27
   19350:	andeq	r9, r1, r8, ror #27
   19354:	andeq	r9, r1, r8, ror #27
   19358:	andeq	r9, r1, r4, ror #6
   1935c:	andeq	r9, r1, r4, ror #6
   19360:	andeq	r9, r1, r4, ror #6
   19364:	ldr	r3, [sp, #32]
   19368:	cmp	r3, #0
   1936c:	bne	1a054 <__assert_fail@plt+0x8950>
   19370:	cmp	r9, fp
   19374:	movhi	r3, #63	; 0x3f
   19378:	strbhi	r3, [r8, fp]
   1937c:	add	r3, fp, #1
   19380:	cmp	r9, r3
   19384:	movhi	r0, #34	; 0x22
   19388:	strbhi	r0, [r8, r3]
   1938c:	add	r3, fp, #2
   19390:	cmp	r9, r3
   19394:	movhi	r0, #34	; 0x22
   19398:	strbhi	r0, [r8, r3]
   1939c:	add	r3, fp, #3
   193a0:	cmp	r9, r3
   193a4:	movhi	r0, #63	; 0x3f
   193a8:	strbhi	r0, [r8, r3]
   193ac:	add	fp, fp, #4
   193b0:	ldr	r3, [sp, #32]
   193b4:	mov	r5, r3
   193b8:	mov	r4, r1
   193bc:	mov	r6, r2
   193c0:	b	19428 <__assert_fail@plt+0x7d24>
   193c4:	mov	r3, #0
   193c8:	str	r3, [sp, #44]	; 0x2c
   193cc:	mov	r4, #8
   193d0:	mov	r3, #98	; 0x62
   193d4:	b	19414 <__assert_fail@plt+0x7d10>
   193d8:	mov	r3, #0
   193dc:	str	r3, [sp, #44]	; 0x2c
   193e0:	mov	r4, #12
   193e4:	mov	r3, #102	; 0x66
   193e8:	b	19414 <__assert_fail@plt+0x7d10>
   193ec:	mov	r3, #0
   193f0:	str	r3, [sp, #44]	; 0x2c
   193f4:	mov	r4, #13
   193f8:	mov	r3, #114	; 0x72
   193fc:	ldr	r2, [sp, #32]
   19400:	cmp	sl, #2
   19404:	movne	r2, #0
   19408:	andeq	r2, r2, #1
   1940c:	cmp	r2, #0
   19410:	bne	19834 <__assert_fail@plt+0x8130>
   19414:	ldr	r2, [sp, #28]
   19418:	cmp	r2, #0
   1941c:	bne	19e1c <__assert_fail@plt+0x8718>
   19420:	mov	r5, r2
   19424:	mov	r3, r2
   19428:	ldr	r2, [sp, #28]
   1942c:	eor	r2, r2, #1
   19430:	cmp	sl, #2
   19434:	orreq	r2, r2, #1
   19438:	eor	r2, r2, #1
   1943c:	ldr	r1, [sp, #32]
   19440:	orr	r2, r1, r2
   19444:	tst	r2, #255	; 0xff
   19448:	beq	19474 <__assert_fail@plt+0x7d70>
   1944c:	ldr	r2, [sp, #160]	; 0xa0
   19450:	cmp	r2, #0
   19454:	beq	19474 <__assert_fail@plt+0x7d70>
   19458:	ubfx	r1, r4, #5, #8
   1945c:	and	r2, r4, #31
   19460:	ldr	r0, [sp, #160]	; 0xa0
   19464:	ldr	r1, [r0, r1, lsl #2]
   19468:	lsr	r2, r1, r2
   1946c:	tst	r2, #1
   19470:	bne	19480 <__assert_fail@plt+0x7d7c>
   19474:	ldr	r2, [sp, #44]	; 0x2c
   19478:	cmp	r2, #0
   1947c:	beq	197d4 <__assert_fail@plt+0x80d0>
   19480:	ldr	r3, [sp, #32]
   19484:	cmp	r3, #0
   19488:	bne	19fd4 <__assert_fail@plt+0x88d0>
   1948c:	ldr	r3, [sp, #36]	; 0x24
   19490:	eor	r3, r3, #1
   19494:	cmp	sl, #2
   19498:	movne	r3, #0
   1949c:	andeq	r3, r3, #1
   194a0:	cmp	r3, #0
   194a4:	beq	194dc <__assert_fail@plt+0x7dd8>
   194a8:	cmp	r9, fp
   194ac:	movhi	r2, #39	; 0x27
   194b0:	strbhi	r2, [r8, fp]
   194b4:	add	r2, fp, #1
   194b8:	cmp	r9, r2
   194bc:	movhi	r1, #36	; 0x24
   194c0:	strbhi	r1, [r8, r2]
   194c4:	add	r2, fp, #2
   194c8:	cmp	r9, r2
   194cc:	movhi	r1, #39	; 0x27
   194d0:	strbhi	r1, [r8, r2]
   194d4:	add	fp, fp, #3
   194d8:	str	r3, [sp, #36]	; 0x24
   194dc:	cmp	r9, fp
   194e0:	movhi	r3, #92	; 0x5c
   194e4:	strbhi	r3, [r8, fp]
   194e8:	add	fp, fp, #1
   194ec:	cmp	fp, r9
   194f0:	strbcc	r4, [r8, fp]
   194f4:	add	fp, fp, #1
   194f8:	cmp	r5, #0
   194fc:	ldr	r3, [sp, #40]	; 0x28
   19500:	moveq	r3, r5
   19504:	str	r3, [sp, #40]	; 0x28
   19508:	add	r6, r6, #1
   1950c:	ldr	r3, [sp, #24]
   19510:	cmn	r3, #1
   19514:	beq	19e44 <__assert_fail@plt+0x8740>
   19518:	ldr	r3, [sp, #24]
   1951c:	subs	r5, r3, r6
   19520:	movne	r5, #1
   19524:	cmp	r5, #0
   19528:	beq	19e58 <__assert_fail@plt+0x8754>
   1952c:	ldr	r3, [sp, #28]
   19530:	cmp	sl, #2
   19534:	moveq	r3, #0
   19538:	andne	r3, r3, #1
   1953c:	str	r3, [sp, #56]	; 0x38
   19540:	ldr	r2, [sp, #52]	; 0x34
   19544:	adds	r7, r2, #0
   19548:	movne	r7, #1
   1954c:	ands	r3, r3, r7
   19550:	str	r3, [sp, #44]	; 0x2c
   19554:	bne	18e74 <__assert_fail@plt+0x7770>
   19558:	ldr	r3, [sp, #48]	; 0x30
   1955c:	ldrb	r4, [r3, r6]
   19560:	cmp	r4, #126	; 0x7e
   19564:	ldrls	pc, [pc, r4, lsl #2]
   19568:	b	199a0 <__assert_fail@plt+0x829c>
   1956c:	strdeq	r9, [r1], -r8
   19570:	andeq	r9, r1, r0, lsr #19
   19574:	andeq	r9, r1, r0, lsr #19
   19578:	andeq	r9, r1, r0, lsr #19
   1957c:	andeq	r9, r1, r0, lsr #19
   19580:	andeq	r9, r1, r0, lsr #19
   19584:	andeq	r9, r1, r0, lsr #19
   19588:	andeq	r9, r1, r0, asr #16
   1958c:	andeq	r9, r1, ip, asr #7
   19590:	andeq	r9, r1, r0, ror r7
   19594:	andeq	r9, r1, r4, lsl r8
   19598:	andeq	r9, r1, r4, lsl #15
   1959c:	andeq	r9, r1, r0, ror #7
   195a0:	strdeq	r9, [r1], -r4
   195a4:	andeq	r9, r1, r0, lsr #19
   195a8:	andeq	r9, r1, r0, lsr #19
   195ac:	andeq	r9, r1, r0, lsr #19
   195b0:	andeq	r9, r1, r0, lsr #19
   195b4:	andeq	r9, r1, r0, lsr #19
   195b8:	andeq	r9, r1, r0, lsr #19
   195bc:	andeq	r9, r1, r0, lsr #19
   195c0:	andeq	r9, r1, r0, lsr #19
   195c4:	andeq	r9, r1, r0, lsr #19
   195c8:	andeq	r9, r1, r0, lsr #19
   195cc:	andeq	r9, r1, r0, lsr #19
   195d0:	andeq	r9, r1, r0, lsr #19
   195d4:	andeq	r9, r1, r0, lsr #19
   195d8:	andeq	r9, r1, r0, lsr #19
   195dc:	andeq	r9, r1, r0, lsr #19
   195e0:	andeq	r9, r1, r0, lsr #19
   195e4:	andeq	r9, r1, r0, lsr #19
   195e8:	andeq	r9, r1, r0, lsr #19
   195ec:			; <UNDEFINED> instruction: 0x000198bc
   195f0:			; <UNDEFINED> instruction: 0x000198b8
   195f4:			; <UNDEFINED> instruction: 0x000198b8
   195f8:	andeq	r9, r1, r8, ror r8
   195fc:			; <UNDEFINED> instruction: 0x000198b8
   19600:	andeq	r9, r1, r0, asr #27
   19604:			; <UNDEFINED> instruction: 0x000198b8
   19608:	andeq	r9, r1, r0, lsl #18
   1960c:			; <UNDEFINED> instruction: 0x000198b8
   19610:			; <UNDEFINED> instruction: 0x000198b8
   19614:			; <UNDEFINED> instruction: 0x000198b8
   19618:	andeq	r9, r1, r0, asr #27
   1961c:	andeq	r9, r1, r0, asr #27
   19620:	andeq	r9, r1, r0, asr #27
   19624:	andeq	r9, r1, r0, asr #27
   19628:	andeq	r9, r1, r0, asr #27
   1962c:	andeq	r9, r1, r0, asr #27
   19630:	andeq	r9, r1, r0, asr #27
   19634:	andeq	r9, r1, r0, asr #27
   19638:	andeq	r9, r1, r0, asr #27
   1963c:	andeq	r9, r1, r0, asr #27
   19640:	andeq	r9, r1, r0, asr #27
   19644:	andeq	r9, r1, r0, asr #27
   19648:	andeq	r9, r1, r0, asr #27
   1964c:	andeq	r9, r1, r0, asr #27
   19650:	andeq	r9, r1, r0, asr #27
   19654:	andeq	r9, r1, r0, asr #27
   19658:			; <UNDEFINED> instruction: 0x000198b8
   1965c:			; <UNDEFINED> instruction: 0x000198b8
   19660:			; <UNDEFINED> instruction: 0x000198b8
   19664:			; <UNDEFINED> instruction: 0x000198b8
   19668:	andeq	r9, r1, r0, ror #4
   1966c:	andeq	r9, r1, r0, lsr #19
   19670:	andeq	r9, r1, r0, asr #27
   19674:	andeq	r9, r1, r0, asr #27
   19678:	andeq	r9, r1, r0, asr #27
   1967c:	andeq	r9, r1, r0, asr #27
   19680:	andeq	r9, r1, r0, asr #27
   19684:	andeq	r9, r1, r0, asr #27
   19688:	andeq	r9, r1, r0, asr #27
   1968c:	andeq	r9, r1, r0, asr #27
   19690:	andeq	r9, r1, r0, asr #27
   19694:	andeq	r9, r1, r0, asr #27
   19698:	andeq	r9, r1, r0, asr #27
   1969c:	andeq	r9, r1, r0, asr #27
   196a0:	andeq	r9, r1, r0, asr #27
   196a4:	andeq	r9, r1, r0, asr #27
   196a8:	andeq	r9, r1, r0, asr #27
   196ac:	andeq	r9, r1, r0, asr #27
   196b0:	andeq	r9, r1, r0, asr #27
   196b4:	andeq	r9, r1, r0, asr #27
   196b8:	andeq	r9, r1, r0, asr #27
   196bc:	andeq	r9, r1, r0, asr #27
   196c0:	andeq	r9, r1, r0, asr #27
   196c4:	andeq	r9, r1, r0, asr #27
   196c8:	andeq	r9, r1, r0, asr #27
   196cc:	andeq	r9, r1, r0, asr #27
   196d0:	andeq	r9, r1, r0, asr #27
   196d4:	andeq	r9, r1, r0, asr #27
   196d8:			; <UNDEFINED> instruction: 0x000198b8
   196dc:	muleq	r1, r8, r7
   196e0:	andeq	r9, r1, r0, asr #27
   196e4:			; <UNDEFINED> instruction: 0x000198b8
   196e8:	andeq	r9, r1, r0, asr #27
   196ec:			; <UNDEFINED> instruction: 0x000198b8
   196f0:	andeq	r9, r1, r0, asr #27
   196f4:	andeq	r9, r1, r0, asr #27
   196f8:	andeq	r9, r1, r0, asr #27
   196fc:	andeq	r9, r1, r0, asr #27
   19700:	andeq	r9, r1, r0, asr #27
   19704:	andeq	r9, r1, r0, asr #27
   19708:	andeq	r9, r1, r0, asr #27
   1970c:	andeq	r9, r1, r0, asr #27
   19710:	andeq	r9, r1, r0, asr #27
   19714:	andeq	r9, r1, r0, asr #27
   19718:	andeq	r9, r1, r0, asr #27
   1971c:	andeq	r9, r1, r0, asr #27
   19720:	andeq	r9, r1, r0, asr #27
   19724:	andeq	r9, r1, r0, asr #27
   19728:	andeq	r9, r1, r0, asr #27
   1972c:	andeq	r9, r1, r0, asr #27
   19730:	andeq	r9, r1, r0, asr #27
   19734:	andeq	r9, r1, r0, asr #27
   19738:	andeq	r9, r1, r0, asr #27
   1973c:	andeq	r9, r1, r0, asr #27
   19740:	andeq	r9, r1, r0, asr #27
   19744:	andeq	r9, r1, r0, asr #27
   19748:	andeq	r9, r1, r0, asr #27
   1974c:	andeq	r9, r1, r0, asr #27
   19750:	andeq	r9, r1, r0, asr #27
   19754:	andeq	r9, r1, r0, asr #27
   19758:	andeq	r9, r1, r8, asr r8
   1975c:			; <UNDEFINED> instruction: 0x000198b8
   19760:	andeq	r9, r1, r8, asr r8
   19764:	andeq	r9, r1, r8, ror r8
   19768:	mov	r3, #0
   1976c:	str	r3, [sp, #44]	; 0x2c
   19770:	mov	r4, #9
   19774:	mov	r3, #116	; 0x74
   19778:	b	193fc <__assert_fail@plt+0x7cf8>
   1977c:	mov	r3, #0
   19780:	str	r3, [sp, #44]	; 0x2c
   19784:	mov	r4, #11
   19788:	mov	r3, #118	; 0x76
   1978c:	b	19414 <__assert_fail@plt+0x7d10>
   19790:	mov	r3, #0
   19794:	str	r3, [sp, #44]	; 0x2c
   19798:	cmp	sl, #2
   1979c:	beq	197c0 <__assert_fail@plt+0x80bc>
   197a0:	ldr	r3, [sp, #28]
   197a4:	ldr	r2, [sp, #32]
   197a8:	and	r3, r3, r2
   197ac:	tst	r7, r3
   197b0:	bne	19e34 <__assert_fail@plt+0x8730>
   197b4:	mov	r4, #92	; 0x5c
   197b8:	mov	r3, r4
   197bc:	b	19414 <__assert_fail@plt+0x7d10>
   197c0:	ldr	r3, [sp, #32]
   197c4:	cmp	r3, #0
   197c8:	bne	19fbc <__assert_fail@plt+0x88b8>
   197cc:	mov	r5, r3
   197d0:	mov	r4, #92	; 0x5c
   197d4:	eor	r3, r3, #1
   197d8:	ldr	r2, [sp, #36]	; 0x24
   197dc:	and	r3, r3, r2
   197e0:	tst	r3, #255	; 0xff
   197e4:	beq	194ec <__assert_fail@plt+0x7de8>
   197e8:	cmp	r9, fp
   197ec:	movhi	r3, #39	; 0x27
   197f0:	strbhi	r3, [r8, fp]
   197f4:	add	r3, fp, #1
   197f8:	cmp	r9, r3
   197fc:	movhi	r2, #39	; 0x27
   19800:	strbhi	r2, [r8, r3]
   19804:	add	fp, fp, #2
   19808:	mov	r3, #0
   1980c:	str	r3, [sp, #36]	; 0x24
   19810:	b	194ec <__assert_fail@plt+0x7de8>
   19814:	mov	r3, #110	; 0x6e
   19818:	b	193fc <__assert_fail@plt+0x7cf8>
   1981c:	mov	r3, #110	; 0x6e
   19820:	b	193fc <__assert_fail@plt+0x7cf8>
   19824:	mov	r3, #0
   19828:	str	r3, [sp, #44]	; 0x2c
   1982c:	mov	r3, #110	; 0x6e
   19830:	b	193fc <__assert_fail@plt+0x7cf8>
   19834:	mov	r8, r9
   19838:	mov	r7, #2
   1983c:	b	19fdc <__assert_fail@plt+0x88d8>
   19840:	mov	r3, #97	; 0x61
   19844:	b	19414 <__assert_fail@plt+0x7d10>
   19848:	mov	r3, #97	; 0x61
   1984c:	b	19414 <__assert_fail@plt+0x7d10>
   19850:	mov	r3, #0
   19854:	str	r3, [sp, #44]	; 0x2c
   19858:	ldr	r3, [sp, #24]
   1985c:	cmn	r3, #1
   19860:	beq	1988c <__assert_fail@plt+0x8188>
   19864:	ldr	r3, [sp, #24]
   19868:	subs	r3, r3, #1
   1986c:	movne	r3, #1
   19870:	cmp	r3, #0
   19874:	bne	19df4 <__assert_fail@plt+0x86f0>
   19878:	cmp	r6, #0
   1987c:	beq	198bc <__assert_fail@plt+0x81b8>
   19880:	mov	r5, #0
   19884:	mov	r3, r5
   19888:	b	19428 <__assert_fail@plt+0x7d24>
   1988c:	ldr	r3, [sp, #48]	; 0x30
   19890:	ldrb	r3, [r3, #1]
   19894:	adds	r3, r3, #0
   19898:	movne	r3, #1
   1989c:	b	19870 <__assert_fail@plt+0x816c>
   198a0:	mov	r3, #0
   198a4:	str	r3, [sp, #44]	; 0x2c
   198a8:	b	19878 <__assert_fail@plt+0x8174>
   198ac:	mov	r3, #0
   198b0:	str	r3, [sp, #44]	; 0x2c
   198b4:	b	198bc <__assert_fail@plt+0x81b8>
   198b8:	ldr	r5, [sp, #44]	; 0x2c
   198bc:	ldr	r3, [sp, #32]
   198c0:	cmp	sl, #2
   198c4:	movne	r3, #0
   198c8:	andeq	r3, r3, #1
   198cc:	cmp	r3, #0
   198d0:	beq	19428 <__assert_fail@plt+0x7d24>
   198d4:	mov	r8, r9
   198d8:	mov	r7, #2
   198dc:	b	19fdc <__assert_fail@plt+0x88d8>
   198e0:	ldr	r5, [sp, #32]
   198e4:	b	198bc <__assert_fail@plt+0x81b8>
   198e8:	mov	r3, #0
   198ec:	str	r3, [sp, #44]	; 0x2c
   198f0:	mov	r5, r3
   198f4:	b	198bc <__assert_fail@plt+0x81b8>
   198f8:	mov	r3, #0
   198fc:	str	r3, [sp, #44]	; 0x2c
   19900:	cmp	sl, #2
   19904:	strne	r5, [sp, #68]	; 0x44
   19908:	movne	r3, #0
   1990c:	movne	r4, #39	; 0x27
   19910:	bne	19428 <__assert_fail@plt+0x7d24>
   19914:	ldr	r3, [sp, #32]
   19918:	cmp	r3, #0
   1991c:	bne	19fc8 <__assert_fail@plt+0x88c4>
   19920:	ldr	r3, [sp, #72]	; 0x48
   19924:	clz	r3, r3
   19928:	lsr	r3, r3, #5
   1992c:	cmp	r9, #0
   19930:	moveq	r3, #0
   19934:	cmp	r3, #0
   19938:	movne	r3, #0
   1993c:	bne	19964 <__assert_fail@plt+0x8260>
   19940:	cmp	r9, fp
   19944:	movhi	r3, #39	; 0x27
   19948:	strbhi	r3, [r8, fp]
   1994c:	add	r3, fp, #1
   19950:	cmp	r9, r3
   19954:	movhi	r2, #92	; 0x5c
   19958:	strbhi	r2, [r8, r3]
   1995c:	mov	r3, r9
   19960:	ldr	r9, [sp, #72]	; 0x48
   19964:	add	r2, fp, #2
   19968:	cmp	r2, r3
   1996c:	movcc	r1, #39	; 0x27
   19970:	strbcc	r1, [r8, r2]
   19974:	add	fp, fp, #3
   19978:	str	r5, [sp, #68]	; 0x44
   1997c:	ldr	r2, [sp, #32]
   19980:	str	r2, [sp, #36]	; 0x24
   19984:	str	r9, [sp, #72]	; 0x48
   19988:	mov	r9, r3
   1998c:	mov	r4, #39	; 0x27
   19990:	mov	r3, #0
   19994:	b	19474 <__assert_fail@plt+0x7d70>
   19998:	mov	r3, #0
   1999c:	str	r3, [sp, #44]	; 0x2c
   199a0:	ldr	r7, [sp, #76]	; 0x4c
   199a4:	cmp	r7, #1
   199a8:	bne	199e0 <__assert_fail@plt+0x82dc>
   199ac:	bl	11518 <__ctype_b_loc@plt>
   199b0:	ldr	r2, [r0]
   199b4:	lsl	r3, r4, #1
   199b8:	ldrh	r5, [r2, r3]
   199bc:	ubfx	r5, r5, #14, #1
   199c0:	mov	ip, r7
   199c4:	eor	r3, r5, #1
   199c8:	ldr	r2, [sp, #28]
   199cc:	and	r3, r3, r2
   199d0:	ands	r3, r3, #255	; 0xff
   199d4:	beq	19428 <__assert_fail@plt+0x7d24>
   199d8:	mov	r5, #0
   199dc:	b	19c3c <__assert_fail@plt+0x8538>
   199e0:	mov	r2, #0
   199e4:	mov	r3, #0
   199e8:	strd	r2, [sp, #104]	; 0x68
   199ec:	ldr	r3, [sp, #24]
   199f0:	cmn	r3, #1
   199f4:	beq	19a18 <__assert_fail@plt+0x8314>
   199f8:	mov	r3, #0
   199fc:	str	r4, [sp, #88]	; 0x58
   19a00:	str	fp, [sp, #92]	; 0x5c
   19a04:	str	r8, [sp, #56]	; 0x38
   19a08:	mov	r8, r3
   19a0c:	str	r9, [sp, #84]	; 0x54
   19a10:	ldr	r9, [sp, #48]	; 0x30
   19a14:	b	19b64 <__assert_fail@plt+0x8460>
   19a18:	ldr	r0, [sp, #48]	; 0x30
   19a1c:	bl	1153c <strlen@plt>
   19a20:	str	r0, [sp, #24]
   19a24:	b	199f8 <__assert_fail@plt+0x82f4>
   19a28:	mov	r1, fp
   19a2c:	ldr	r4, [sp, #88]	; 0x58
   19a30:	mov	r2, r8
   19a34:	mov	ip, r8
   19a38:	ldr	fp, [sp, #92]	; 0x5c
   19a3c:	ldr	r8, [sp, #56]	; 0x38
   19a40:	ldr	r9, [sp, #84]	; 0x54
   19a44:	ldr	r0, [sp, #24]
   19a48:	cmp	r7, r0
   19a4c:	bcs	19c04 <__assert_fail@plt+0x8500>
   19a50:	ldrb	r3, [r1]
   19a54:	cmp	r3, #0
   19a58:	beq	19c0c <__assert_fail@plt+0x8508>
   19a5c:	mov	r3, r1
   19a60:	add	r2, r2, #1
   19a64:	add	r1, r6, r2
   19a68:	cmp	r0, r1
   19a6c:	bls	19c14 <__assert_fail@plt+0x8510>
   19a70:	ldrb	r1, [r3, #1]!
   19a74:	cmp	r1, #0
   19a78:	bne	19a60 <__assert_fail@plt+0x835c>
   19a7c:	mov	ip, r2
   19a80:	mov	r5, #0
   19a84:	b	19c34 <__assert_fail@plt+0x8530>
   19a88:	ldr	r3, [sp, #56]	; 0x38
   19a8c:	str	r3, [sp, #64]	; 0x40
   19a90:	ldr	r8, [sp, #84]	; 0x54
   19a94:	mov	r7, #2
   19a98:	b	19fdc <__assert_fail@plt+0x88d8>
   19a9c:	cmp	r2, r7
   19aa0:	beq	19b40 <__assert_fail@plt+0x843c>
   19aa4:	ldrb	r3, [r2], #1
   19aa8:	sub	r3, r3, #91	; 0x5b
   19aac:	cmp	r3, #33	; 0x21
   19ab0:	ldrls	pc, [pc, r3, lsl #2]
   19ab4:	b	19a9c <__assert_fail@plt+0x8398>
   19ab8:	andeq	r9, r1, r8, lsl #21
   19abc:	andeq	r9, r1, r8, lsl #21
   19ac0:	muleq	r1, ip, sl
   19ac4:	andeq	r9, r1, r8, lsl #21
   19ac8:	muleq	r1, ip, sl
   19acc:	andeq	r9, r1, r8, lsl #21
   19ad0:	muleq	r1, ip, sl
   19ad4:	muleq	r1, ip, sl
   19ad8:	muleq	r1, ip, sl
   19adc:	muleq	r1, ip, sl
   19ae0:	muleq	r1, ip, sl
   19ae4:	muleq	r1, ip, sl
   19ae8:	muleq	r1, ip, sl
   19aec:	muleq	r1, ip, sl
   19af0:	muleq	r1, ip, sl
   19af4:	muleq	r1, ip, sl
   19af8:	muleq	r1, ip, sl
   19afc:	muleq	r1, ip, sl
   19b00:	muleq	r1, ip, sl
   19b04:	muleq	r1, ip, sl
   19b08:	muleq	r1, ip, sl
   19b0c:	muleq	r1, ip, sl
   19b10:	muleq	r1, ip, sl
   19b14:	muleq	r1, ip, sl
   19b18:	muleq	r1, ip, sl
   19b1c:	muleq	r1, ip, sl
   19b20:	muleq	r1, ip, sl
   19b24:	muleq	r1, ip, sl
   19b28:	muleq	r1, ip, sl
   19b2c:	muleq	r1, ip, sl
   19b30:	muleq	r1, ip, sl
   19b34:	muleq	r1, ip, sl
   19b38:	muleq	r1, ip, sl
   19b3c:	andeq	r9, r1, r8, lsl #21
   19b40:	ldr	r0, [sp, #100]	; 0x64
   19b44:	bl	11410 <iswprint@plt>
   19b48:	cmp	r0, #0
   19b4c:	moveq	r5, #0
   19b50:	add	r8, r8, r4
   19b54:	add	r0, sp, #104	; 0x68
   19b58:	bl	1138c <mbsinit@plt>
   19b5c:	cmp	r0, #0
   19b60:	bne	19bd0 <__assert_fail@plt+0x84cc>
   19b64:	add	r7, r6, r8
   19b68:	add	fp, r9, r7
   19b6c:	add	r3, sp, #104	; 0x68
   19b70:	ldr	r2, [sp, #24]
   19b74:	sub	r2, r2, r7
   19b78:	mov	r1, fp
   19b7c:	add	r0, sp, #100	; 0x64
   19b80:	bl	1776c <__assert_fail@plt+0x6068>
   19b84:	subs	r4, r0, #0
   19b88:	beq	19c20 <__assert_fail@plt+0x851c>
   19b8c:	cmn	r4, #1
   19b90:	beq	19be8 <__assert_fail@plt+0x84e4>
   19b94:	cmn	r4, #2
   19b98:	beq	19a28 <__assert_fail@plt+0x8324>
   19b9c:	ldr	r3, [sp, #32]
   19ba0:	cmp	sl, #2
   19ba4:	movne	r3, #0
   19ba8:	andeq	r3, r3, #1
   19bac:	cmp	r3, #0
   19bb0:	beq	19b40 <__assert_fail@plt+0x843c>
   19bb4:	cmp	r4, #1
   19bb8:	bls	19b40 <__assert_fail@plt+0x843c>
   19bbc:	add	r2, r7, #1
   19bc0:	add	r2, r9, r2
   19bc4:	add	r3, r9, r4
   19bc8:	add	r7, r3, r7
   19bcc:	b	19aa4 <__assert_fail@plt+0x83a0>
   19bd0:	ldr	r4, [sp, #88]	; 0x58
   19bd4:	mov	ip, r8
   19bd8:	ldr	fp, [sp, #92]	; 0x5c
   19bdc:	ldr	r8, [sp, #56]	; 0x38
   19be0:	ldr	r9, [sp, #84]	; 0x54
   19be4:	b	19c34 <__assert_fail@plt+0x8530>
   19be8:	ldr	r4, [sp, #88]	; 0x58
   19bec:	mov	ip, r8
   19bf0:	ldr	fp, [sp, #92]	; 0x5c
   19bf4:	ldr	r8, [sp, #56]	; 0x38
   19bf8:	ldr	r9, [sp, #84]	; 0x54
   19bfc:	mov	r5, #0
   19c00:	b	19c34 <__assert_fail@plt+0x8530>
   19c04:	mov	r5, #0
   19c08:	b	19c34 <__assert_fail@plt+0x8530>
   19c0c:	mov	r5, #0
   19c10:	b	19c34 <__assert_fail@plt+0x8530>
   19c14:	mov	ip, r2
   19c18:	mov	r5, #0
   19c1c:	b	19c34 <__assert_fail@plt+0x8530>
   19c20:	ldr	r4, [sp, #88]	; 0x58
   19c24:	mov	ip, r8
   19c28:	ldr	fp, [sp, #92]	; 0x5c
   19c2c:	ldr	r8, [sp, #56]	; 0x38
   19c30:	ldr	r9, [sp, #84]	; 0x54
   19c34:	cmp	ip, #1
   19c38:	bls	199c4 <__assert_fail@plt+0x82c0>
   19c3c:	add	lr, r6, ip
   19c40:	ldr	r3, [sp, #48]	; 0x30
   19c44:	add	r1, r3, r6
   19c48:	mov	r3, #0
   19c4c:	eor	r0, r5, #1
   19c50:	ldr	r2, [sp, #28]
   19c54:	and	r0, r0, r2
   19c58:	uxtb	r0, r0
   19c5c:	str	r0, [sp, #56]	; 0x38
   19c60:	mov	r7, #92	; 0x5c
   19c64:	ldr	ip, [sp, #36]	; 0x24
   19c68:	str	r5, [sp, #84]	; 0x54
   19c6c:	ldr	r2, [sp, #44]	; 0x2c
   19c70:	b	19ce0 <__assert_fail@plt+0x85dc>
   19c74:	cmp	r2, #0
   19c78:	beq	19c88 <__assert_fail@plt+0x8584>
   19c7c:	cmp	r9, fp
   19c80:	strbhi	r7, [r8, fp]
   19c84:	add	fp, fp, #1
   19c88:	add	r5, r6, #1
   19c8c:	cmp	r5, lr
   19c90:	bcs	19d9c <__assert_fail@plt+0x8698>
   19c94:	eor	r2, r3, #1
   19c98:	and	r2, r2, ip
   19c9c:	ands	r2, r2, #255	; 0xff
   19ca0:	beq	19db8 <__assert_fail@plt+0x86b4>
   19ca4:	cmp	r9, fp
   19ca8:	movhi	r2, #39	; 0x27
   19cac:	strbhi	r2, [r8, fp]
   19cb0:	add	r2, fp, #1
   19cb4:	cmp	r9, r2
   19cb8:	movhi	ip, #39	; 0x27
   19cbc:	strbhi	ip, [r8, r2]
   19cc0:	add	fp, fp, #2
   19cc4:	ldr	ip, [sp, #56]	; 0x38
   19cc8:	mov	r2, ip
   19ccc:	mov	r6, r5
   19cd0:	cmp	r9, fp
   19cd4:	strbhi	r4, [r8, fp]
   19cd8:	add	fp, fp, #1
   19cdc:	ldrb	r4, [r1, #1]!
   19ce0:	cmp	r0, #0
   19ce4:	beq	19c74 <__assert_fail@plt+0x8570>
   19ce8:	ldr	r3, [sp, #32]
   19cec:	cmp	r3, #0
   19cf0:	bne	19f84 <__assert_fail@plt+0x8880>
   19cf4:	eor	r3, ip, #1
   19cf8:	cmp	sl, #2
   19cfc:	movne	r3, #0
   19d00:	andeq	r3, r3, #1
   19d04:	cmp	r3, #0
   19d08:	beq	19d40 <__assert_fail@plt+0x863c>
   19d0c:	cmp	r9, fp
   19d10:	movhi	ip, #39	; 0x27
   19d14:	strbhi	ip, [r8, fp]
   19d18:	add	ip, fp, #1
   19d1c:	cmp	r9, ip
   19d20:	movhi	r5, #36	; 0x24
   19d24:	strbhi	r5, [r8, ip]
   19d28:	add	ip, fp, #2
   19d2c:	cmp	r9, ip
   19d30:	movhi	r5, #39	; 0x27
   19d34:	strbhi	r5, [r8, ip]
   19d38:	add	fp, fp, #3
   19d3c:	mov	ip, r3
   19d40:	cmp	r9, fp
   19d44:	strbhi	r7, [r8, fp]
   19d48:	add	r3, fp, #1
   19d4c:	cmp	r9, r3
   19d50:	bls	19d60 <__assert_fail@plt+0x865c>
   19d54:	lsr	r5, r4, #6
   19d58:	add	r5, r5, #48	; 0x30
   19d5c:	strb	r5, [r8, r3]
   19d60:	add	r3, fp, #2
   19d64:	cmp	r9, r3
   19d68:	bls	19d78 <__assert_fail@plt+0x8674>
   19d6c:	ubfx	r5, r4, #3, #3
   19d70:	add	r5, r5, #48	; 0x30
   19d74:	strb	r5, [r8, r3]
   19d78:	add	fp, fp, #3
   19d7c:	and	r4, r4, #7
   19d80:	add	r4, r4, #48	; 0x30
   19d84:	add	r5, r6, #1
   19d88:	cmp	r5, lr
   19d8c:	bcs	19da8 <__assert_fail@plt+0x86a4>
   19d90:	ldr	r3, [sp, #56]	; 0x38
   19d94:	mov	r6, r5
   19d98:	b	19cd0 <__assert_fail@plt+0x85cc>
   19d9c:	str	ip, [sp, #36]	; 0x24
   19da0:	ldr	r5, [sp, #84]	; 0x54
   19da4:	b	197d4 <__assert_fail@plt+0x80d0>
   19da8:	str	ip, [sp, #36]	; 0x24
   19dac:	ldr	r5, [sp, #84]	; 0x54
   19db0:	mov	r3, r0
   19db4:	b	197d4 <__assert_fail@plt+0x80d0>
   19db8:	mov	r6, r5
   19dbc:	b	19cd0 <__assert_fail@plt+0x85cc>
   19dc0:	ldr	r3, [sp, #44]	; 0x2c
   19dc4:	b	19428 <__assert_fail@plt+0x7d24>
   19dc8:	mov	r5, #0
   19dcc:	mov	r3, r5
   19dd0:	mov	r4, #63	; 0x3f
   19dd4:	b	19428 <__assert_fail@plt+0x7d24>
   19dd8:	mov	r5, #0
   19ddc:	mov	r3, r5
   19de0:	mov	r4, #63	; 0x3f
   19de4:	b	19428 <__assert_fail@plt+0x7d24>
   19de8:	mov	r5, #0
   19dec:	mov	r3, r5
   19df0:	b	19428 <__assert_fail@plt+0x7d24>
   19df4:	mov	r5, #0
   19df8:	mov	r3, r5
   19dfc:	b	19428 <__assert_fail@plt+0x7d24>
   19e00:	ldr	r5, [sp, #44]	; 0x2c
   19e04:	ldr	r3, [sp, #32]
   19e08:	b	19428 <__assert_fail@plt+0x7d24>
   19e0c:	ldr	r5, [sp, #44]	; 0x2c
   19e10:	mov	r3, #0
   19e14:	str	r3, [sp, #44]	; 0x2c
   19e18:	b	19428 <__assert_fail@plt+0x7d24>
   19e1c:	mov	r4, r3
   19e20:	mov	r5, #0
   19e24:	b	19480 <__assert_fail@plt+0x7d7c>
   19e28:	mov	r5, #0
   19e2c:	mov	r4, #97	; 0x61
   19e30:	b	19480 <__assert_fail@plt+0x7d7c>
   19e34:	mov	r5, #0
   19e38:	mov	r3, r5
   19e3c:	mov	r4, #92	; 0x5c
   19e40:	b	197d4 <__assert_fail@plt+0x80d0>
   19e44:	ldr	r3, [sp, #48]	; 0x30
   19e48:	ldrb	r5, [r3, r6]
   19e4c:	adds	r5, r5, #0
   19e50:	movne	r5, #1
   19e54:	b	19524 <__assert_fail@plt+0x7e20>
   19e58:	cmp	sl, #2
   19e5c:	movne	r3, #0
   19e60:	moveq	r3, #1
   19e64:	ldr	r1, [sp, #32]
   19e68:	cmp	fp, #0
   19e6c:	andeq	r2, r3, r1
   19e70:	movne	r2, #0
   19e74:	cmp	r2, #0
   19e78:	bne	19f98 <__assert_fail@plt+0x8894>
   19e7c:	eor	r2, r1, #1
   19e80:	uxtb	r2, r2
   19e84:	and	r3, r3, r2
   19e88:	ldr	r1, [sp, #68]	; 0x44
   19e8c:	ands	r3, r1, r3
   19e90:	beq	19f24 <__assert_fail@plt+0x8820>
   19e94:	ldr	r2, [sp, #40]	; 0x28
   19e98:	cmp	r2, #0
   19e9c:	bne	19ed4 <__assert_fail@plt+0x87d0>
   19ea0:	ldr	r2, [sp, #72]	; 0x48
   19ea4:	adds	r2, r2, #0
   19ea8:	movne	r2, #1
   19eac:	cmp	r9, #0
   19eb0:	movne	r2, #0
   19eb4:	str	r2, [sp, #68]	; 0x44
   19eb8:	mov	sl, #2
   19ebc:	ldr	r1, [sp, #40]	; 0x28
   19ec0:	str	r1, [sp, #32]
   19ec4:	cmp	r2, #0
   19ec8:	beq	19f18 <__assert_fail@plt+0x8814>
   19ecc:	ldr	r9, [sp, #72]	; 0x48
   19ed0:	b	18c2c <__assert_fail@plt+0x7528>
   19ed4:	ldr	r3, [sp, #168]	; 0xa8
   19ed8:	str	r3, [sp, #16]
   19edc:	ldr	r3, [sp, #164]	; 0xa4
   19ee0:	str	r3, [sp, #12]
   19ee4:	ldr	r3, [sp, #160]	; 0xa0
   19ee8:	str	r3, [sp, #8]
   19eec:	ldr	r3, [sp, #156]	; 0x9c
   19ef0:	str	r3, [sp, #4]
   19ef4:	mov	r3, #5
   19ef8:	str	r3, [sp]
   19efc:	ldr	r3, [sp, #24]
   19f00:	ldr	r2, [sp, #48]	; 0x30
   19f04:	ldr	r1, [sp, #72]	; 0x48
   19f08:	ldr	r0, [sp, #64]	; 0x40
   19f0c:	bl	18bb4 <__assert_fail@plt+0x74b0>
   19f10:	mov	fp, r0
   19f14:	b	1a034 <__assert_fail@plt+0x8930>
   19f18:	mov	r8, r9
   19f1c:	mov	r2, r3
   19f20:	b	19f28 <__assert_fail@plt+0x8824>
   19f24:	mov	r8, r9
   19f28:	ldr	r3, [sp, #60]	; 0x3c
   19f2c:	cmp	r3, #0
   19f30:	moveq	r2, #0
   19f34:	andne	r2, r2, #1
   19f38:	cmp	r2, #0
   19f3c:	beq	19f6c <__assert_fail@plt+0x8868>
   19f40:	mov	r2, r3
   19f44:	ldrb	r3, [r3]
   19f48:	cmp	r3, #0
   19f4c:	beq	19f6c <__assert_fail@plt+0x8868>
   19f50:	ldr	r1, [sp, #64]	; 0x40
   19f54:	cmp	r8, fp
   19f58:	strbhi	r3, [r1, fp]
   19f5c:	add	fp, fp, #1
   19f60:	ldrb	r3, [r2, #1]!
   19f64:	cmp	r3, #0
   19f68:	bne	19f54 <__assert_fail@plt+0x8850>
   19f6c:	cmp	r8, fp
   19f70:	bls	1a034 <__assert_fail@plt+0x8930>
   19f74:	mov	r3, #0
   19f78:	ldr	r2, [sp, #64]	; 0x40
   19f7c:	strb	r3, [r2, fp]
   19f80:	b	1a034 <__assert_fail@plt+0x8930>
   19f84:	mov	r8, r9
   19f88:	mov	r7, sl
   19f8c:	ldr	r3, [sp, #32]
   19f90:	str	r3, [sp, #28]
   19f94:	b	19fdc <__assert_fail@plt+0x88d8>
   19f98:	mov	r8, r9
   19f9c:	mov	r7, #2
   19fa0:	b	19fdc <__assert_fail@plt+0x88d8>
   19fa4:	mov	r8, r9
   19fa8:	mov	r7, sl
   19fac:	b	19fdc <__assert_fail@plt+0x88d8>
   19fb0:	mov	r8, r9
   19fb4:	mov	r7, sl
   19fb8:	b	19fdc <__assert_fail@plt+0x88d8>
   19fbc:	mov	r8, r9
   19fc0:	mov	r7, sl
   19fc4:	b	19fdc <__assert_fail@plt+0x88d8>
   19fc8:	mov	r8, r9
   19fcc:	mov	r7, sl
   19fd0:	b	19fdc <__assert_fail@plt+0x88d8>
   19fd4:	mov	r8, r9
   19fd8:	mov	r7, sl
   19fdc:	ldr	r3, [sp, #28]
   19fe0:	cmp	r7, #2
   19fe4:	movne	r3, #0
   19fe8:	andeq	r3, r3, #1
   19fec:	cmp	r3, #0
   19ff0:	movne	r7, #4
   19ff4:	ldr	r3, [sp, #168]	; 0xa8
   19ff8:	str	r3, [sp, #16]
   19ffc:	ldr	r3, [sp, #164]	; 0xa4
   1a000:	str	r3, [sp, #12]
   1a004:	mov	r3, #0
   1a008:	str	r3, [sp, #8]
   1a00c:	ldr	r3, [sp, #156]	; 0x9c
   1a010:	bic	r3, r3, #2
   1a014:	str	r3, [sp, #4]
   1a018:	str	r7, [sp]
   1a01c:	ldr	r3, [sp, #24]
   1a020:	ldr	r2, [sp, #48]	; 0x30
   1a024:	mov	r1, r8
   1a028:	ldr	r0, [sp, #64]	; 0x40
   1a02c:	bl	18bb4 <__assert_fail@plt+0x74b0>
   1a030:	mov	fp, r0
   1a034:	mov	r0, fp
   1a038:	add	sp, sp, #116	; 0x74
   1a03c:	ldrd	r4, [sp]
   1a040:	ldrd	r6, [sp, #8]
   1a044:	ldrd	r8, [sp, #16]
   1a048:	ldrd	sl, [sp, #24]
   1a04c:	add	sp, sp, #32
   1a050:	pop	{pc}		; (ldr pc, [sp], #4)
   1a054:	mov	r8, r9
   1a058:	mov	r7, sl
   1a05c:	b	19ff4 <__assert_fail@plt+0x88f0>
   1a060:	add	fp, fp, #4
   1a064:	str	r3, [sp, #36]	; 0x24
   1a068:	mov	r5, #0
   1a06c:	mov	r4, #48	; 0x30
   1a070:	b	19428 <__assert_fail@plt+0x7d24>
   1a074:	mov	r3, #1
   1a078:	str	r3, [sp, #32]
   1a07c:	str	r3, [sp, #28]
   1a080:	str	r3, [sp, #52]	; 0x34
   1a084:	movw	r3, #58016	; 0xe2a0
   1a088:	movt	r3, #1
   1a08c:	str	r3, [sp, #60]	; 0x3c
   1a090:	mov	fp, #0
   1a094:	mov	sl, #5
   1a098:	b	18c8c <__assert_fail@plt+0x7588>
   1a09c:	ldr	r3, [sp, #48]	; 0x30
   1a0a0:	ldrb	r4, [r3, r6]
   1a0a4:	cmp	r4, #126	; 0x7e
   1a0a8:	ldrls	pc, [pc, r4, lsl #2]
   1a0ac:	b	19998 <__assert_fail@plt+0x8294>
   1a0b0:	andeq	r9, r1, r0, lsr #2
   1a0b4:	muleq	r1, r8, r9
   1a0b8:	muleq	r1, r8, r9
   1a0bc:	muleq	r1, r8, r9
   1a0c0:	muleq	r1, r8, r9
   1a0c4:	muleq	r1, r8, r9
   1a0c8:	muleq	r1, r8, r9
   1a0cc:	andeq	r9, r1, r8, lsr #28
   1a0d0:	andeq	r9, r1, r4, asr #7
   1a0d4:	andeq	r9, r1, r8, ror #14
   1a0d8:	andeq	r9, r1, r4, lsr #16
   1a0dc:	andeq	r9, r1, ip, ror r7
   1a0e0:	ldrdeq	r9, [r1], -r8
   1a0e4:	andeq	r9, r1, ip, ror #7
   1a0e8:	muleq	r1, r8, r9
   1a0ec:	muleq	r1, r8, r9
   1a0f0:	muleq	r1, r8, r9
   1a0f4:	muleq	r1, r8, r9
   1a0f8:	muleq	r1, r8, r9
   1a0fc:	muleq	r1, r8, r9
   1a100:	muleq	r1, r8, r9
   1a104:	muleq	r1, r8, r9
   1a108:	muleq	r1, r8, r9
   1a10c:	muleq	r1, r8, r9
   1a110:	muleq	r1, r8, r9
   1a114:	muleq	r1, r8, r9
   1a118:	muleq	r1, r8, r9
   1a11c:	muleq	r1, r8, r9
   1a120:	muleq	r1, r8, r9
   1a124:	muleq	r1, r8, r9
   1a128:	muleq	r1, r8, r9
   1a12c:	muleq	r1, r8, r9
   1a130:	andeq	r9, r1, ip, lsr #17
   1a134:	andeq	r9, r1, r8, ror #17
   1a138:	andeq	r9, r1, r8, ror #17
   1a13c:	andeq	r9, r1, r0, lsr #17
   1a140:	andeq	r9, r1, r8, ror #17
   1a144:	andeq	r9, r1, ip, lsl #28
   1a148:	andeq	r9, r1, r8, ror #17
   1a14c:	strdeq	r9, [r1], -r8
   1a150:	andeq	r9, r1, r8, ror #17
   1a154:	andeq	r9, r1, r8, ror #17
   1a158:	andeq	r9, r1, r8, ror #17
   1a15c:	andeq	r9, r1, ip, lsl #28
   1a160:	andeq	r9, r1, ip, lsl #28
   1a164:	andeq	r9, r1, ip, lsl #28
   1a168:	andeq	r9, r1, ip, lsl #28
   1a16c:	andeq	r9, r1, ip, lsl #28
   1a170:	andeq	r9, r1, ip, lsl #28
   1a174:	andeq	r9, r1, ip, lsl #28
   1a178:	andeq	r9, r1, ip, lsl #28
   1a17c:	andeq	r9, r1, ip, lsl #28
   1a180:	andeq	r9, r1, ip, lsl #28
   1a184:	andeq	r9, r1, ip, lsl #28
   1a188:	andeq	r9, r1, ip, lsl #28
   1a18c:	andeq	r9, r1, ip, lsl #28
   1a190:	andeq	r9, r1, ip, lsl #28
   1a194:	andeq	r9, r1, ip, lsl #28
   1a198:	andeq	r9, r1, ip, lsl #28
   1a19c:	andeq	r9, r1, r8, ror #17
   1a1a0:	andeq	r9, r1, r8, ror #17
   1a1a4:	andeq	r9, r1, r8, ror #17
   1a1a8:	andeq	r9, r1, r8, ror #17
   1a1ac:	andeq	r9, r1, r8, asr r2
   1a1b0:	muleq	r1, r8, r9
   1a1b4:	andeq	r9, r1, ip, lsl #28
   1a1b8:	andeq	r9, r1, ip, lsl #28
   1a1bc:	andeq	r9, r1, ip, lsl #28
   1a1c0:	andeq	r9, r1, ip, lsl #28
   1a1c4:	andeq	r9, r1, ip, lsl #28
   1a1c8:	andeq	r9, r1, ip, lsl #28
   1a1cc:	andeq	r9, r1, ip, lsl #28
   1a1d0:	andeq	r9, r1, ip, lsl #28
   1a1d4:	andeq	r9, r1, ip, lsl #28
   1a1d8:	andeq	r9, r1, ip, lsl #28
   1a1dc:	andeq	r9, r1, ip, lsl #28
   1a1e0:	andeq	r9, r1, ip, lsl #28
   1a1e4:	andeq	r9, r1, ip, lsl #28
   1a1e8:	andeq	r9, r1, ip, lsl #28
   1a1ec:	andeq	r9, r1, ip, lsl #28
   1a1f0:	andeq	r9, r1, ip, lsl #28
   1a1f4:	andeq	r9, r1, ip, lsl #28
   1a1f8:	andeq	r9, r1, ip, lsl #28
   1a1fc:	andeq	r9, r1, ip, lsl #28
   1a200:	andeq	r9, r1, ip, lsl #28
   1a204:	andeq	r9, r1, ip, lsl #28
   1a208:	andeq	r9, r1, ip, lsl #28
   1a20c:	andeq	r9, r1, ip, lsl #28
   1a210:	andeq	r9, r1, ip, lsl #28
   1a214:	andeq	r9, r1, ip, lsl #28
   1a218:	andeq	r9, r1, ip, lsl #28
   1a21c:	andeq	r9, r1, r8, ror #17
   1a220:	muleq	r1, r0, r7
   1a224:	andeq	r9, r1, ip, lsl #28
   1a228:	andeq	r9, r1, r8, ror #17
   1a22c:	andeq	r9, r1, ip, lsl #28
   1a230:	andeq	r9, r1, r8, ror #17
   1a234:	andeq	r9, r1, ip, lsl #28
   1a238:	andeq	r9, r1, ip, lsl #28
   1a23c:	andeq	r9, r1, ip, lsl #28
   1a240:	andeq	r9, r1, ip, lsl #28
   1a244:	andeq	r9, r1, ip, lsl #28
   1a248:	andeq	r9, r1, ip, lsl #28
   1a24c:	andeq	r9, r1, ip, lsl #28
   1a250:	andeq	r9, r1, ip, lsl #28
   1a254:	andeq	r9, r1, ip, lsl #28
   1a258:	andeq	r9, r1, ip, lsl #28
   1a25c:	andeq	r9, r1, ip, lsl #28
   1a260:	andeq	r9, r1, ip, lsl #28
   1a264:	andeq	r9, r1, ip, lsl #28
   1a268:	andeq	r9, r1, ip, lsl #28
   1a26c:	andeq	r9, r1, ip, lsl #28
   1a270:	andeq	r9, r1, ip, lsl #28
   1a274:	andeq	r9, r1, ip, lsl #28
   1a278:	andeq	r9, r1, ip, lsl #28
   1a27c:	andeq	r9, r1, ip, lsl #28
   1a280:	andeq	r9, r1, ip, lsl #28
   1a284:	andeq	r9, r1, ip, lsl #28
   1a288:	andeq	r9, r1, ip, lsl #28
   1a28c:	andeq	r9, r1, ip, lsl #28
   1a290:	andeq	r9, r1, ip, lsl #28
   1a294:	andeq	r9, r1, ip, lsl #28
   1a298:	andeq	r9, r1, ip, lsl #28
   1a29c:	andeq	r9, r1, r0, asr r8
   1a2a0:	andeq	r9, r1, r8, ror #17
   1a2a4:	andeq	r9, r1, r0, asr r8
   1a2a8:	andeq	r9, r1, r0, lsr #17
   1a2ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2b0:	strd	r6, [sp, #8]
   1a2b4:	strd	r8, [sp, #16]
   1a2b8:	strd	sl, [sp, #24]
   1a2bc:	str	lr, [sp, #32]
   1a2c0:	sub	sp, sp, #52	; 0x34
   1a2c4:	mov	r5, r0
   1a2c8:	str	r1, [sp, #24]
   1a2cc:	str	r2, [sp, #28]
   1a2d0:	mov	r4, r3
   1a2d4:	bl	1156c <__errno_location@plt>
   1a2d8:	str	r0, [sp, #32]
   1a2dc:	ldr	r3, [r0]
   1a2e0:	str	r3, [sp, #36]	; 0x24
   1a2e4:	movw	r3, #732	; 0x2dc
   1a2e8:	movt	r3, #3
   1a2ec:	ldr	r6, [r3]
   1a2f0:	cmn	r5, #-2147483647	; 0x80000001
   1a2f4:	movne	r3, #0
   1a2f8:	moveq	r3, #1
   1a2fc:	orrs	r3, r3, r5, lsr #31
   1a300:	bne	1a464 <__assert_fail@plt+0x8d60>
   1a304:	movw	r3, #732	; 0x2dc
   1a308:	movt	r3, #3
   1a30c:	ldr	r2, [r3, #4]
   1a310:	cmp	r2, r5
   1a314:	bgt	1a384 <__assert_fail@plt+0x8c80>
   1a318:	str	r2, [sp, #44]	; 0x2c
   1a31c:	add	r3, r3, #8
   1a320:	cmp	r6, r3
   1a324:	beq	1a468 <__assert_fail@plt+0x8d64>
   1a328:	sub	r2, r5, r2
   1a32c:	mov	r3, #8
   1a330:	str	r3, [sp]
   1a334:	mvn	r3, #-2147483648	; 0x80000000
   1a338:	add	r2, r2, #1
   1a33c:	add	r1, sp, #44	; 0x2c
   1a340:	mov	r0, r6
   1a344:	bl	1b6c8 <__assert_fail@plt+0x9fc4>
   1a348:	mov	r6, r0
   1a34c:	movw	r3, #732	; 0x2dc
   1a350:	movt	r3, #3
   1a354:	str	r0, [r3]
   1a358:	movw	r7, #732	; 0x2dc
   1a35c:	movt	r7, #3
   1a360:	ldr	r0, [r7, #4]
   1a364:	ldr	r2, [sp, #44]	; 0x2c
   1a368:	sub	r2, r2, r0
   1a36c:	lsl	r2, r2, #3
   1a370:	mov	r1, #0
   1a374:	add	r0, r6, r0, lsl #3
   1a378:	bl	11590 <memset@plt>
   1a37c:	ldr	r3, [sp, #44]	; 0x2c
   1a380:	str	r3, [r7, #4]
   1a384:	add	fp, r6, r5, lsl #3
   1a388:	ldr	r8, [r6, r5, lsl #3]
   1a38c:	ldr	r7, [fp, #4]
   1a390:	ldr	r3, [r4, #4]
   1a394:	orr	r9, r3, #1
   1a398:	add	sl, r4, #8
   1a39c:	ldr	r3, [r4, #44]	; 0x2c
   1a3a0:	str	r3, [sp, #16]
   1a3a4:	ldr	r3, [r4, #40]	; 0x28
   1a3a8:	str	r3, [sp, #12]
   1a3ac:	str	sl, [sp, #8]
   1a3b0:	str	r9, [sp, #4]
   1a3b4:	ldr	r3, [r4]
   1a3b8:	str	r3, [sp]
   1a3bc:	ldr	r3, [sp, #28]
   1a3c0:	ldr	r2, [sp, #24]
   1a3c4:	mov	r1, r8
   1a3c8:	mov	r0, r7
   1a3cc:	bl	18bb4 <__assert_fail@plt+0x74b0>
   1a3d0:	cmp	r8, r0
   1a3d4:	bhi	1a438 <__assert_fail@plt+0x8d34>
   1a3d8:	add	r8, r0, #1
   1a3dc:	str	r8, [r6, r5, lsl #3]
   1a3e0:	movw	r3, #964	; 0x3c4
   1a3e4:	movt	r3, #3
   1a3e8:	cmp	r7, r3
   1a3ec:	beq	1a3f8 <__assert_fail@plt+0x8cf4>
   1a3f0:	mov	r0, r7
   1a3f4:	bl	15784 <__assert_fail@plt+0x4080>
   1a3f8:	mov	r0, r8
   1a3fc:	bl	1b4c4 <__assert_fail@plt+0x9dc0>
   1a400:	mov	r7, r0
   1a404:	str	r0, [fp, #4]
   1a408:	ldr	r3, [r4, #44]	; 0x2c
   1a40c:	str	r3, [sp, #16]
   1a410:	ldr	r3, [r4, #40]	; 0x28
   1a414:	str	r3, [sp, #12]
   1a418:	str	sl, [sp, #8]
   1a41c:	str	r9, [sp, #4]
   1a420:	ldr	r3, [r4]
   1a424:	str	r3, [sp]
   1a428:	ldr	r3, [sp, #28]
   1a42c:	ldr	r2, [sp, #24]
   1a430:	mov	r1, r8
   1a434:	bl	18bb4 <__assert_fail@plt+0x74b0>
   1a438:	ldr	r3, [sp, #32]
   1a43c:	ldr	r2, [sp, #36]	; 0x24
   1a440:	str	r2, [r3]
   1a444:	mov	r0, r7
   1a448:	add	sp, sp, #52	; 0x34
   1a44c:	ldrd	r4, [sp]
   1a450:	ldrd	r6, [sp, #8]
   1a454:	ldrd	r8, [sp, #16]
   1a458:	ldrd	sl, [sp, #24]
   1a45c:	add	sp, sp, #32
   1a460:	pop	{pc}		; (ldr pc, [sp], #4)
   1a464:	bl	116e0 <abort@plt>
   1a468:	sub	r2, r5, r2
   1a46c:	mov	r3, #8
   1a470:	str	r3, [sp]
   1a474:	mvn	r3, #-2147483648	; 0x80000000
   1a478:	add	r2, r2, #1
   1a47c:	add	r1, sp, #44	; 0x2c
   1a480:	mov	r0, #0
   1a484:	bl	1b6c8 <__assert_fail@plt+0x9fc4>
   1a488:	mov	r6, r0
   1a48c:	movw	r3, #732	; 0x2dc
   1a490:	movt	r3, #3
   1a494:	str	r0, [r3]
   1a498:	ldrd	r2, [r3, #8]
   1a49c:	strd	r2, [r0]
   1a4a0:	b	1a358 <__assert_fail@plt+0x8c54>
   1a4a4:	strd	r4, [sp, #-16]!
   1a4a8:	str	r6, [sp, #8]
   1a4ac:	str	lr, [sp, #12]
   1a4b0:	mov	r4, r0
   1a4b4:	bl	1156c <__errno_location@plt>
   1a4b8:	mov	r5, r0
   1a4bc:	ldr	r6, [r0]
   1a4c0:	cmp	r4, #0
   1a4c4:	ldr	r3, [pc, #32]	; 1a4ec <__assert_fail@plt+0x8de8>
   1a4c8:	moveq	r4, r3
   1a4cc:	mov	r1, #48	; 0x30
   1a4d0:	mov	r0, r4
   1a4d4:	bl	1b838 <__assert_fail@plt+0xa134>
   1a4d8:	str	r6, [r5]
   1a4dc:	ldrd	r4, [sp]
   1a4e0:	ldr	r6, [sp, #8]
   1a4e4:	add	sp, sp, #12
   1a4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4ec:	andeq	r0, r3, r4, asr #9
   1a4f0:	subs	r3, r0, #0
   1a4f4:	ldr	r2, [pc, #8]	; 1a504 <__assert_fail@plt+0x8e00>
   1a4f8:	moveq	r3, r2
   1a4fc:	ldr	r0, [r3]
   1a500:	bx	lr
   1a504:	andeq	r0, r3, r4, asr #9
   1a508:	subs	r3, r0, #0
   1a50c:	ldr	r2, [pc, #8]	; 1a51c <__assert_fail@plt+0x8e18>
   1a510:	moveq	r3, r2
   1a514:	str	r1, [r3]
   1a518:	bx	lr
   1a51c:	andeq	r0, r3, r4, asr #9
   1a520:	push	{lr}		; (str lr, [sp, #-4]!)
   1a524:	subs	r3, r0, #0
   1a528:	ldr	r0, [pc, #44]	; 1a55c <__assert_fail@plt+0x8e58>
   1a52c:	moveq	r3, r0
   1a530:	add	r3, r3, #8
   1a534:	lsr	lr, r1, #5
   1a538:	and	r1, r1, #31
   1a53c:	ldr	ip, [r3, lr, lsl #2]
   1a540:	lsr	r0, ip, r1
   1a544:	eor	r2, r2, r0
   1a548:	and	r2, r2, #1
   1a54c:	eor	r1, ip, r2, lsl r1
   1a550:	str	r1, [r3, lr, lsl #2]
   1a554:	and	r0, r0, #1
   1a558:	pop	{pc}		; (ldr pc, [sp], #4)
   1a55c:	andeq	r0, r3, r4, asr #9
   1a560:	subs	r3, r0, #0
   1a564:	ldr	r2, [pc, #12]	; 1a578 <__assert_fail@plt+0x8e74>
   1a568:	moveq	r3, r2
   1a56c:	ldr	r0, [r3, #4]
   1a570:	str	r1, [r3, #4]
   1a574:	bx	lr
   1a578:	andeq	r0, r3, r4, asr #9
   1a57c:	subs	r3, r0, #0
   1a580:	ldr	r0, [pc, #44]	; 1a5b4 <__assert_fail@plt+0x8eb0>
   1a584:	moveq	r3, r0
   1a588:	mov	r0, #10
   1a58c:	str	r0, [r3]
   1a590:	cmp	r2, #0
   1a594:	cmpne	r1, #0
   1a598:	beq	1a5a8 <__assert_fail@plt+0x8ea4>
   1a59c:	str	r1, [r3, #40]	; 0x28
   1a5a0:	str	r2, [r3, #44]	; 0x2c
   1a5a4:	bx	lr
   1a5a8:	str	r4, [sp, #-8]!
   1a5ac:	str	lr, [sp, #4]
   1a5b0:	bl	116e0 <abort@plt>
   1a5b4:	andeq	r0, r3, r4, asr #9
   1a5b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a5bc:	strd	r6, [sp, #8]
   1a5c0:	strd	r8, [sp, #16]
   1a5c4:	str	sl, [sp, #24]
   1a5c8:	str	lr, [sp, #28]
   1a5cc:	sub	sp, sp, #24
   1a5d0:	mov	r7, r0
   1a5d4:	mov	r8, r1
   1a5d8:	mov	r9, r2
   1a5dc:	mov	sl, r3
   1a5e0:	ldr	r4, [sp, #56]	; 0x38
   1a5e4:	cmp	r4, #0
   1a5e8:	ldr	r3, [pc, #104]	; 1a658 <__assert_fail@plt+0x8f54>
   1a5ec:	moveq	r4, r3
   1a5f0:	bl	1156c <__errno_location@plt>
   1a5f4:	mov	r5, r0
   1a5f8:	ldr	r6, [r0]
   1a5fc:	ldr	r3, [r4, #44]	; 0x2c
   1a600:	str	r3, [sp, #16]
   1a604:	ldr	r3, [r4, #40]	; 0x28
   1a608:	str	r3, [sp, #12]
   1a60c:	add	r3, r4, #8
   1a610:	str	r3, [sp, #8]
   1a614:	ldr	r3, [r4, #4]
   1a618:	str	r3, [sp, #4]
   1a61c:	ldr	r3, [r4]
   1a620:	str	r3, [sp]
   1a624:	mov	r3, sl
   1a628:	mov	r2, r9
   1a62c:	mov	r1, r8
   1a630:	mov	r0, r7
   1a634:	bl	18bb4 <__assert_fail@plt+0x74b0>
   1a638:	str	r6, [r5]
   1a63c:	add	sp, sp, #24
   1a640:	ldrd	r4, [sp]
   1a644:	ldrd	r6, [sp, #8]
   1a648:	ldrd	r8, [sp, #16]
   1a64c:	ldr	sl, [sp, #24]
   1a650:	add	sp, sp, #28
   1a654:	pop	{pc}		; (ldr pc, [sp], #4)
   1a658:	andeq	r0, r3, r4, asr #9
   1a65c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a660:	strd	r6, [sp, #8]
   1a664:	strd	r8, [sp, #16]
   1a668:	strd	sl, [sp, #24]
   1a66c:	str	lr, [sp, #32]
   1a670:	sub	sp, sp, #44	; 0x2c
   1a674:	mov	r8, r0
   1a678:	mov	sl, r1
   1a67c:	mov	r6, r2
   1a680:	subs	r4, r3, #0
   1a684:	ldr	r3, [pc, #200]	; 1a754 <__assert_fail@plt+0x9050>
   1a688:	moveq	r4, r3
   1a68c:	bl	1156c <__errno_location@plt>
   1a690:	mov	r7, r0
   1a694:	ldr	fp, [r0]
   1a698:	ldr	r5, [r4, #4]
   1a69c:	cmp	r6, #0
   1a6a0:	orreq	r5, r5, #1
   1a6a4:	add	r9, r4, #8
   1a6a8:	ldr	r3, [r4, #44]	; 0x2c
   1a6ac:	str	r3, [sp, #16]
   1a6b0:	ldr	r3, [r4, #40]	; 0x28
   1a6b4:	str	r3, [sp, #12]
   1a6b8:	str	r9, [sp, #8]
   1a6bc:	str	r5, [sp, #4]
   1a6c0:	ldr	r3, [r4]
   1a6c4:	str	r3, [sp]
   1a6c8:	str	sl, [sp, #36]	; 0x24
   1a6cc:	mov	r3, sl
   1a6d0:	str	r8, [sp, #32]
   1a6d4:	mov	r2, r8
   1a6d8:	mov	r1, #0
   1a6dc:	mov	r0, r1
   1a6e0:	bl	18bb4 <__assert_fail@plt+0x74b0>
   1a6e4:	mov	sl, r0
   1a6e8:	add	r8, r0, #1
   1a6ec:	mov	r0, r8
   1a6f0:	bl	1b4c4 <__assert_fail@plt+0x9dc0>
   1a6f4:	str	r0, [sp, #28]
   1a6f8:	ldr	r3, [r4, #44]	; 0x2c
   1a6fc:	str	r3, [sp, #16]
   1a700:	ldr	r3, [r4, #40]	; 0x28
   1a704:	str	r3, [sp, #12]
   1a708:	str	r9, [sp, #8]
   1a70c:	str	r5, [sp, #4]
   1a710:	ldr	r3, [r4]
   1a714:	str	r3, [sp]
   1a718:	ldr	r3, [sp, #36]	; 0x24
   1a71c:	ldr	r2, [sp, #32]
   1a720:	mov	r1, r8
   1a724:	bl	18bb4 <__assert_fail@plt+0x74b0>
   1a728:	str	fp, [r7]
   1a72c:	cmp	r6, #0
   1a730:	strne	sl, [r6]
   1a734:	ldr	r0, [sp, #28]
   1a738:	add	sp, sp, #44	; 0x2c
   1a73c:	ldrd	r4, [sp]
   1a740:	ldrd	r6, [sp, #8]
   1a744:	ldrd	r8, [sp, #16]
   1a748:	ldrd	sl, [sp, #24]
   1a74c:	add	sp, sp, #32
   1a750:	pop	{pc}		; (ldr pc, [sp], #4)
   1a754:	andeq	r0, r3, r4, asr #9
   1a758:	str	r4, [sp, #-8]!
   1a75c:	str	lr, [sp, #4]
   1a760:	mov	r3, r2
   1a764:	mov	r2, #0
   1a768:	bl	1a65c <__assert_fail@plt+0x8f58>
   1a76c:	ldr	r4, [sp]
   1a770:	add	sp, sp, #4
   1a774:	pop	{pc}		; (ldr pc, [sp], #4)
   1a778:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a77c:	strd	r6, [sp, #8]
   1a780:	str	r8, [sp, #16]
   1a784:	str	lr, [sp, #20]
   1a788:	movw	r3, #732	; 0x2dc
   1a78c:	movt	r3, #3
   1a790:	ldr	r7, [r3]
   1a794:	ldr	r3, [r3, #4]
   1a798:	cmp	r3, #1
   1a79c:	ble	1a7c8 <__assert_fail@plt+0x90c4>
   1a7a0:	mov	r4, #1
   1a7a4:	add	r6, r7, #4
   1a7a8:	movw	r5, #732	; 0x2dc
   1a7ac:	movt	r5, #3
   1a7b0:	ldr	r0, [r6, r4, lsl #3]
   1a7b4:	bl	15784 <__assert_fail@plt+0x4080>
   1a7b8:	add	r4, r4, #1
   1a7bc:	ldr	r3, [r5, #4]
   1a7c0:	cmp	r3, r4
   1a7c4:	bgt	1a7b0 <__assert_fail@plt+0x90ac>
   1a7c8:	ldr	r0, [r7, #4]
   1a7cc:	movw	r3, #964	; 0x3c4
   1a7d0:	movt	r3, #3
   1a7d4:	cmp	r0, r3
   1a7d8:	beq	1a7fc <__assert_fail@plt+0x90f8>
   1a7dc:	bl	15784 <__assert_fail@plt+0x4080>
   1a7e0:	movw	r3, #732	; 0x2dc
   1a7e4:	movt	r3, #3
   1a7e8:	mov	r2, #256	; 0x100
   1a7ec:	str	r2, [r3, #8]
   1a7f0:	movw	r2, #964	; 0x3c4
   1a7f4:	movt	r2, #3
   1a7f8:	str	r2, [r3, #12]
   1a7fc:	ldr	r3, [pc, #64]	; 1a844 <__assert_fail@plt+0x9140>
   1a800:	cmp	r7, r3
   1a804:	beq	1a820 <__assert_fail@plt+0x911c>
   1a808:	mov	r0, r7
   1a80c:	bl	15784 <__assert_fail@plt+0x4080>
   1a810:	movw	r3, #732	; 0x2dc
   1a814:	movt	r3, #3
   1a818:	add	r2, r3, #8
   1a81c:	str	r2, [r3]
   1a820:	movw	r3, #732	; 0x2dc
   1a824:	movt	r3, #3
   1a828:	mov	r2, #1
   1a82c:	str	r2, [r3, #4]
   1a830:	ldrd	r4, [sp]
   1a834:	ldrd	r6, [sp, #8]
   1a838:	ldr	r8, [sp, #16]
   1a83c:	add	sp, sp, #20
   1a840:	pop	{pc}		; (ldr pc, [sp], #4)
   1a844:	andeq	r0, r3, r4, ror #5
   1a848:	str	r4, [sp, #-8]!
   1a84c:	str	lr, [sp, #4]
   1a850:	ldr	r3, [pc, #16]	; 1a868 <__assert_fail@plt+0x9164>
   1a854:	mvn	r2, #0
   1a858:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1a85c:	ldr	r4, [sp]
   1a860:	add	sp, sp, #4
   1a864:	pop	{pc}		; (ldr pc, [sp], #4)
   1a868:	andeq	r0, r3, r4, asr #9
   1a86c:	str	r4, [sp, #-8]!
   1a870:	str	lr, [sp, #4]
   1a874:	ldr	r3, [pc, #12]	; 1a888 <__assert_fail@plt+0x9184>
   1a878:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1a87c:	ldr	r4, [sp]
   1a880:	add	sp, sp, #4
   1a884:	pop	{pc}		; (ldr pc, [sp], #4)
   1a888:	andeq	r0, r3, r4, asr #9
   1a88c:	str	r4, [sp, #-8]!
   1a890:	str	lr, [sp, #4]
   1a894:	mov	r1, r0
   1a898:	mov	r0, #0
   1a89c:	bl	1a848 <__assert_fail@plt+0x9144>
   1a8a0:	ldr	r4, [sp]
   1a8a4:	add	sp, sp, #4
   1a8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8ac:	str	r4, [sp, #-8]!
   1a8b0:	str	lr, [sp, #4]
   1a8b4:	mov	r2, r1
   1a8b8:	mov	r1, r0
   1a8bc:	mov	r0, #0
   1a8c0:	bl	1a86c <__assert_fail@plt+0x9168>
   1a8c4:	ldr	r4, [sp]
   1a8c8:	add	sp, sp, #4
   1a8cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8d0:	strd	r4, [sp, #-12]!
   1a8d4:	str	lr, [sp, #8]
   1a8d8:	sub	sp, sp, #52	; 0x34
   1a8dc:	mov	r4, r0
   1a8e0:	mov	r5, r2
   1a8e4:	mov	r0, sp
   1a8e8:	bl	18a20 <__assert_fail@plt+0x731c>
   1a8ec:	mov	r3, sp
   1a8f0:	mvn	r2, #0
   1a8f4:	mov	r1, r5
   1a8f8:	mov	r0, r4
   1a8fc:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1a900:	add	sp, sp, #52	; 0x34
   1a904:	ldrd	r4, [sp]
   1a908:	add	sp, sp, #8
   1a90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a910:	strd	r4, [sp, #-16]!
   1a914:	str	r6, [sp, #8]
   1a918:	str	lr, [sp, #12]
   1a91c:	sub	sp, sp, #48	; 0x30
   1a920:	mov	r4, r0
   1a924:	mov	r5, r2
   1a928:	mov	r6, r3
   1a92c:	mov	r0, sp
   1a930:	bl	18a20 <__assert_fail@plt+0x731c>
   1a934:	mov	r3, sp
   1a938:	mov	r2, r6
   1a93c:	mov	r1, r5
   1a940:	mov	r0, r4
   1a944:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1a948:	add	sp, sp, #48	; 0x30
   1a94c:	ldrd	r4, [sp]
   1a950:	ldr	r6, [sp, #8]
   1a954:	add	sp, sp, #12
   1a958:	pop	{pc}		; (ldr pc, [sp], #4)
   1a95c:	str	r4, [sp, #-8]!
   1a960:	str	lr, [sp, #4]
   1a964:	mov	r2, r1
   1a968:	mov	r1, r0
   1a96c:	mov	r0, #0
   1a970:	bl	1a8d0 <__assert_fail@plt+0x91cc>
   1a974:	ldr	r4, [sp]
   1a978:	add	sp, sp, #4
   1a97c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a980:	str	r4, [sp, #-8]!
   1a984:	str	lr, [sp, #4]
   1a988:	mov	r3, r2
   1a98c:	mov	r2, r1
   1a990:	mov	r1, r0
   1a994:	mov	r0, #0
   1a998:	bl	1a910 <__assert_fail@plt+0x920c>
   1a99c:	ldr	r4, [sp]
   1a9a0:	add	sp, sp, #4
   1a9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9a8:	strd	r4, [sp, #-12]!
   1a9ac:	str	lr, [sp, #8]
   1a9b0:	sub	sp, sp, #52	; 0x34
   1a9b4:	mov	r4, r0
   1a9b8:	mov	r5, r1
   1a9bc:	mov	r1, r2
   1a9c0:	ldr	r0, [pc, #92]	; 1aa24 <__assert_fail@plt+0x9320>
   1a9c4:	ldrd	r2, [r0]
   1a9c8:	strd	r2, [sp]
   1a9cc:	ldrd	r2, [r0, #8]
   1a9d0:	strd	r2, [sp, #8]
   1a9d4:	ldrd	r2, [r0, #16]
   1a9d8:	strd	r2, [sp, #16]
   1a9dc:	ldrd	r2, [r0, #24]
   1a9e0:	strd	r2, [sp, #24]
   1a9e4:	ldrd	r2, [r0, #32]
   1a9e8:	strd	r2, [sp, #32]
   1a9ec:	ldrd	r2, [r0, #40]	; 0x28
   1a9f0:	strd	r2, [sp, #40]	; 0x28
   1a9f4:	mov	r2, #1
   1a9f8:	mov	r0, sp
   1a9fc:	bl	1a520 <__assert_fail@plt+0x8e1c>
   1aa00:	mov	r3, sp
   1aa04:	mov	r2, r5
   1aa08:	mov	r1, r4
   1aa0c:	mov	r0, #0
   1aa10:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1aa14:	add	sp, sp, #52	; 0x34
   1aa18:	ldrd	r4, [sp]
   1aa1c:	add	sp, sp, #8
   1aa20:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa24:	andeq	r0, r3, r4, asr #9
   1aa28:	str	r4, [sp, #-8]!
   1aa2c:	str	lr, [sp, #4]
   1aa30:	mov	r2, r1
   1aa34:	mvn	r1, #0
   1aa38:	bl	1a9a8 <__assert_fail@plt+0x92a4>
   1aa3c:	ldr	r4, [sp]
   1aa40:	add	sp, sp, #4
   1aa44:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa48:	str	r4, [sp, #-8]!
   1aa4c:	str	lr, [sp, #4]
   1aa50:	mov	r1, #58	; 0x3a
   1aa54:	bl	1aa28 <__assert_fail@plt+0x9324>
   1aa58:	ldr	r4, [sp]
   1aa5c:	add	sp, sp, #4
   1aa60:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa64:	str	r4, [sp, #-8]!
   1aa68:	str	lr, [sp, #4]
   1aa6c:	mov	r2, #58	; 0x3a
   1aa70:	bl	1a9a8 <__assert_fail@plt+0x92a4>
   1aa74:	ldr	r4, [sp]
   1aa78:	add	sp, sp, #4
   1aa7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa80:	strd	r4, [sp, #-12]!
   1aa84:	str	lr, [sp, #8]
   1aa88:	sub	sp, sp, #100	; 0x64
   1aa8c:	mov	r4, r0
   1aa90:	mov	r5, r2
   1aa94:	mov	r0, sp
   1aa98:	bl	18a20 <__assert_fail@plt+0x731c>
   1aa9c:	ldrd	r2, [sp]
   1aaa0:	strd	r2, [sp, #48]	; 0x30
   1aaa4:	ldrd	r2, [sp, #8]
   1aaa8:	strd	r2, [sp, #56]	; 0x38
   1aaac:	ldrd	r2, [sp, #16]
   1aab0:	strd	r2, [sp, #64]	; 0x40
   1aab4:	ldrd	r2, [sp, #24]
   1aab8:	strd	r2, [sp, #72]	; 0x48
   1aabc:	ldrd	r2, [sp, #32]
   1aac0:	strd	r2, [sp, #80]	; 0x50
   1aac4:	ldrd	r2, [sp, #40]	; 0x28
   1aac8:	strd	r2, [sp, #88]	; 0x58
   1aacc:	mov	r2, #1
   1aad0:	mov	r1, #58	; 0x3a
   1aad4:	add	r0, sp, #48	; 0x30
   1aad8:	bl	1a520 <__assert_fail@plt+0x8e1c>
   1aadc:	add	r3, sp, #48	; 0x30
   1aae0:	mvn	r2, #0
   1aae4:	mov	r1, r5
   1aae8:	mov	r0, r4
   1aaec:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1aaf0:	add	sp, sp, #100	; 0x64
   1aaf4:	ldrd	r4, [sp]
   1aaf8:	add	sp, sp, #8
   1aafc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab00:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ab04:	strd	r6, [sp, #8]
   1ab08:	str	lr, [sp, #16]
   1ab0c:	sub	sp, sp, #52	; 0x34
   1ab10:	mov	r4, r0
   1ab14:	mov	r5, r3
   1ab18:	ldr	r3, [pc, #92]	; 1ab7c <__assert_fail@plt+0x9478>
   1ab1c:	ldrd	r6, [r3]
   1ab20:	strd	r6, [sp]
   1ab24:	ldrd	r6, [r3, #8]
   1ab28:	strd	r6, [sp, #8]
   1ab2c:	ldrd	r6, [r3, #16]
   1ab30:	strd	r6, [sp, #16]
   1ab34:	ldrd	r6, [r3, #24]
   1ab38:	strd	r6, [sp, #24]
   1ab3c:	ldrd	r6, [r3, #32]
   1ab40:	strd	r6, [sp, #32]
   1ab44:	ldrd	r6, [r3, #40]	; 0x28
   1ab48:	strd	r6, [sp, #40]	; 0x28
   1ab4c:	mov	r0, sp
   1ab50:	bl	1a57c <__assert_fail@plt+0x8e78>
   1ab54:	mov	r3, sp
   1ab58:	ldr	r2, [sp, #72]	; 0x48
   1ab5c:	mov	r1, r5
   1ab60:	mov	r0, r4
   1ab64:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1ab68:	add	sp, sp, #52	; 0x34
   1ab6c:	ldrd	r4, [sp]
   1ab70:	ldrd	r6, [sp, #8]
   1ab74:	add	sp, sp, #16
   1ab78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab7c:	andeq	r0, r3, r4, asr #9
   1ab80:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab84:	sub	sp, sp, #12
   1ab88:	mvn	ip, #0
   1ab8c:	str	ip, [sp]
   1ab90:	bl	1ab00 <__assert_fail@plt+0x93fc>
   1ab94:	add	sp, sp, #12
   1ab98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab9c:	str	r4, [sp, #-8]!
   1aba0:	str	lr, [sp, #4]
   1aba4:	mov	r3, r2
   1aba8:	mov	r2, r1
   1abac:	mov	r1, r0
   1abb0:	mov	r0, #0
   1abb4:	bl	1ab80 <__assert_fail@plt+0x947c>
   1abb8:	ldr	r4, [sp]
   1abbc:	add	sp, sp, #4
   1abc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1abc4:	push	{lr}		; (str lr, [sp, #-4]!)
   1abc8:	sub	sp, sp, #12
   1abcc:	str	r3, [sp]
   1abd0:	mov	r3, r2
   1abd4:	mov	r2, r1
   1abd8:	mov	r1, r0
   1abdc:	mov	r0, #0
   1abe0:	bl	1ab00 <__assert_fail@plt+0x93fc>
   1abe4:	add	sp, sp, #12
   1abe8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abec:	str	r4, [sp, #-8]!
   1abf0:	str	lr, [sp, #4]
   1abf4:	ldr	r3, [pc, #12]	; 1ac08 <__assert_fail@plt+0x9504>
   1abf8:	bl	1a2ac <__assert_fail@plt+0x8ba8>
   1abfc:	ldr	r4, [sp]
   1ac00:	add	sp, sp, #4
   1ac04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac08:	andeq	r0, r3, ip, ror #5
   1ac0c:	str	r4, [sp, #-8]!
   1ac10:	str	lr, [sp, #4]
   1ac14:	mov	r2, r1
   1ac18:	mov	r1, r0
   1ac1c:	mov	r0, #0
   1ac20:	bl	1abec <__assert_fail@plt+0x94e8>
   1ac24:	ldr	r4, [sp]
   1ac28:	add	sp, sp, #4
   1ac2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac30:	str	r4, [sp, #-8]!
   1ac34:	str	lr, [sp, #4]
   1ac38:	mvn	r2, #0
   1ac3c:	bl	1abec <__assert_fail@plt+0x94e8>
   1ac40:	ldr	r4, [sp]
   1ac44:	add	sp, sp, #4
   1ac48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac4c:	str	r4, [sp, #-8]!
   1ac50:	str	lr, [sp, #4]
   1ac54:	mov	r1, r0
   1ac58:	mov	r0, #0
   1ac5c:	bl	1ac30 <__assert_fail@plt+0x952c>
   1ac60:	ldr	r4, [sp]
   1ac64:	add	sp, sp, #4
   1ac68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac6c:	str	r4, [sp, #-8]!
   1ac70:	str	lr, [sp, #4]
   1ac74:	mov	r4, r0
   1ac78:	mov	r3, #0
   1ac7c:	str	r3, [r0, #4]
   1ac80:	mov	r1, #524288	; 0x80000
   1ac84:	movw	r0, #61784	; 0xf158
   1ac88:	movt	r0, #1
   1ac8c:	bl	1d4e8 <__assert_fail@plt+0xbde4>
   1ac90:	str	r0, [r4]
   1ac94:	cmp	r0, #0
   1ac98:	movge	r0, #0
   1ac9c:	blt	1acac <__assert_fail@plt+0x95a8>
   1aca0:	ldr	r4, [sp]
   1aca4:	add	sp, sp, #4
   1aca8:	pop	{pc}		; (ldr pc, [sp], #4)
   1acac:	mov	r1, #0
   1acb0:	mov	r0, r1
   1acb4:	bl	11524 <getcwd@plt>
   1acb8:	str	r0, [r4, #4]
   1acbc:	clz	r0, r0
   1acc0:	lsr	r0, r0, #5
   1acc4:	rsb	r0, r0, #0
   1acc8:	b	1aca0 <__assert_fail@plt+0x959c>
   1accc:	str	r4, [sp, #-8]!
   1acd0:	str	lr, [sp, #4]
   1acd4:	ldr	r3, [r0]
   1acd8:	cmp	r3, #0
   1acdc:	blt	1acf4 <__assert_fail@plt+0x95f0>
   1ace0:	mov	r0, r3
   1ace4:	bl	11674 <fchdir@plt>
   1ace8:	ldr	r4, [sp]
   1acec:	add	sp, sp, #4
   1acf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1acf4:	ldr	r0, [r0, #4]
   1acf8:	bl	1d0f0 <__assert_fail@plt+0xb9ec>
   1acfc:	b	1ace8 <__assert_fail@plt+0x95e4>
   1ad00:	str	r4, [sp, #-8]!
   1ad04:	str	lr, [sp, #4]
   1ad08:	mov	r4, r0
   1ad0c:	ldr	r0, [r0]
   1ad10:	cmp	r0, #0
   1ad14:	bge	1ad2c <__assert_fail@plt+0x9628>
   1ad18:	ldr	r0, [r4, #4]
   1ad1c:	bl	15784 <__assert_fail@plt+0x4080>
   1ad20:	ldr	r4, [sp]
   1ad24:	add	sp, sp, #4
   1ad28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad2c:	bl	116ec <close@plt>
   1ad30:	b	1ad18 <__assert_fail@plt+0x9614>
   1ad34:	strd	r4, [sp, #-16]!
   1ad38:	str	r6, [sp, #8]
   1ad3c:	str	lr, [sp, #12]
   1ad40:	mov	r5, r1
   1ad44:	ldr	r4, [r0], #8
   1ad48:	cmp	r4, r0
   1ad4c:	beq	1ad70 <__assert_fail@plt+0x966c>
   1ad50:	mov	r0, r4
   1ad54:	bl	1c178 <__assert_fail@plt+0xaa74>
   1ad58:	cmp	r0, #0
   1ad5c:	moveq	r0, r4
   1ad60:	ldrd	r4, [sp]
   1ad64:	ldr	r6, [sp, #8]
   1ad68:	add	sp, sp, #12
   1ad6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad70:	mov	r0, r1
   1ad74:	bl	1c13c <__assert_fail@plt+0xaa38>
   1ad78:	cmp	r0, #0
   1ad7c:	beq	1ad60 <__assert_fail@plt+0x965c>
   1ad80:	mov	r2, r5
   1ad84:	mov	r1, r4
   1ad88:	bl	11374 <memcpy@plt>
   1ad8c:	b	1ad60 <__assert_fail@plt+0x965c>
   1ad90:	strd	r4, [sp, #-16]!
   1ad94:	str	r6, [sp, #8]
   1ad98:	str	lr, [sp, #12]
   1ad9c:	mov	r4, r0
   1ada0:	ldr	r5, [r0, #4]
   1ada4:	lsl	r5, r5, #1
   1ada8:	mov	r6, r0
   1adac:	ldr	r0, [r6], #8
   1adb0:	cmp	r0, r6
   1adb4:	beq	1adbc <__assert_fail@plt+0x96b8>
   1adb8:	bl	15784 <__assert_fail@plt+0x4080>
   1adbc:	ldr	r3, [r4, #4]
   1adc0:	cmp	r3, r5
   1adc4:	bhi	1adf4 <__assert_fail@plt+0x96f0>
   1adc8:	mov	r0, r5
   1adcc:	bl	1c13c <__assert_fail@plt+0xaa38>
   1add0:	cmp	r0, #0
   1add4:	strne	r0, [r4]
   1add8:	strne	r5, [r4, #4]
   1addc:	movne	r0, #1
   1ade0:	beq	1ae00 <__assert_fail@plt+0x96fc>
   1ade4:	ldrd	r4, [sp]
   1ade8:	ldr	r6, [sp, #8]
   1adec:	add	sp, sp, #12
   1adf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf4:	bl	1156c <__errno_location@plt>
   1adf8:	mov	r3, #12
   1adfc:	str	r3, [r0]
   1ae00:	str	r6, [r4]
   1ae04:	mov	r3, #1024	; 0x400
   1ae08:	str	r3, [r4, #4]
   1ae0c:	mov	r0, #0
   1ae10:	b	1ade4 <__assert_fail@plt+0x96e0>
   1ae14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ae18:	strd	r6, [sp, #8]
   1ae1c:	str	r8, [sp, #16]
   1ae20:	str	lr, [sp, #20]
   1ae24:	mov	r4, r0
   1ae28:	ldr	r3, [r0, #4]
   1ae2c:	lsl	r6, r3, #1
   1ae30:	mov	r5, r0
   1ae34:	ldr	r0, [r5], #8
   1ae38:	cmp	r0, r5
   1ae3c:	beq	1ae78 <__assert_fail@plt+0x9774>
   1ae40:	cmp	r3, r6
   1ae44:	bhi	1aea0 <__assert_fail@plt+0x979c>
   1ae48:	mov	r1, r6
   1ae4c:	bl	1c178 <__assert_fail@plt+0xaa74>
   1ae50:	subs	r7, r0, #0
   1ae54:	beq	1aeac <__assert_fail@plt+0x97a8>
   1ae58:	str	r7, [r4]
   1ae5c:	str	r6, [r4, #4]
   1ae60:	mov	r0, #1
   1ae64:	ldrd	r4, [sp]
   1ae68:	ldrd	r6, [sp, #8]
   1ae6c:	ldr	r8, [sp, #16]
   1ae70:	add	sp, sp, #20
   1ae74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae78:	mov	r0, r6
   1ae7c:	bl	1c13c <__assert_fail@plt+0xaa38>
   1ae80:	subs	r7, r0, #0
   1ae84:	moveq	r0, #0
   1ae88:	beq	1ae64 <__assert_fail@plt+0x9760>
   1ae8c:	ldr	r2, [r4, #4]
   1ae90:	mov	r1, r5
   1ae94:	mov	r0, r7
   1ae98:	bl	11374 <memcpy@plt>
   1ae9c:	b	1ae58 <__assert_fail@plt+0x9754>
   1aea0:	bl	1156c <__errno_location@plt>
   1aea4:	mov	r3, #12
   1aea8:	str	r3, [r0]
   1aeac:	ldr	r0, [r4]
   1aeb0:	bl	15784 <__assert_fail@plt+0x4080>
   1aeb4:	str	r5, [r4]
   1aeb8:	mov	r3, #1024	; 0x400
   1aebc:	str	r3, [r4, #4]
   1aec0:	mov	r0, #0
   1aec4:	b	1ae64 <__assert_fail@plt+0x9760>
   1aec8:	strd	r4, [sp, #-16]!
   1aecc:	str	r6, [sp, #8]
   1aed0:	str	lr, [sp, #12]
   1aed4:	sub	sp, sp, #32
   1aed8:	mov	r4, r0
   1aedc:	ldr	r5, [sp, #48]	; 0x30
   1aee0:	ldr	r6, [sp, #52]	; 0x34
   1aee4:	cmp	r1, #0
   1aee8:	beq	1afb4 <__assert_fail@plt+0x98b0>
   1aeec:	str	r3, [sp, #4]
   1aef0:	str	r2, [sp]
   1aef4:	mov	r3, r1
   1aef8:	movw	r2, #62736	; 0xf510
   1aefc:	movt	r2, #1
   1af00:	mov	r1, #1
   1af04:	bl	115c0 <__fprintf_chk@plt>
   1af08:	mov	r2, #5
   1af0c:	movw	r1, #62756	; 0xf524
   1af10:	movt	r1, #1
   1af14:	mov	r0, #0
   1af18:	bl	113bc <dcgettext@plt>
   1af1c:	movw	r3, #2022	; 0x7e6
   1af20:	str	r3, [sp]
   1af24:	mov	r3, r0
   1af28:	movw	r2, #63484	; 0xf7fc
   1af2c:	movt	r2, #1
   1af30:	mov	r1, #1
   1af34:	mov	r0, r4
   1af38:	bl	115c0 <__fprintf_chk@plt>
   1af3c:	mov	r1, r4
   1af40:	mov	r0, #10
   1af44:	bl	113a4 <fputc_unlocked@plt>
   1af48:	mov	r2, #5
   1af4c:	movw	r1, #62760	; 0xf528
   1af50:	movt	r1, #1
   1af54:	mov	r0, #0
   1af58:	bl	113bc <dcgettext@plt>
   1af5c:	movw	r3, #62932	; 0xf5d4
   1af60:	movt	r3, #1
   1af64:	mov	r2, r0
   1af68:	mov	r1, #1
   1af6c:	mov	r0, r4
   1af70:	bl	115c0 <__fprintf_chk@plt>
   1af74:	mov	r1, r4
   1af78:	mov	r0, #10
   1af7c:	bl	113a4 <fputc_unlocked@plt>
   1af80:	cmp	r6, #9
   1af84:	ldrls	pc, [pc, r6, lsl #2]
   1af88:	b	1b28c <__assert_fail@plt+0x9b88>
   1af8c:	strdeq	sl, [r1], -r8
   1af90:	ldrdeq	sl, [r1], -r0
   1af94:	andeq	fp, r1, ip
   1af98:	andeq	fp, r1, r0, asr #32
   1af9c:	andeq	fp, r1, ip, ror r0
   1afa0:	andeq	fp, r1, r0, asr #1
   1afa4:	andeq	fp, r1, ip, lsl #2
   1afa8:	andeq	fp, r1, r0, ror #2
   1afac:			; <UNDEFINED> instruction: 0x0001b1bc
   1afb0:	andeq	fp, r1, r0, lsr #4
   1afb4:	str	r3, [sp]
   1afb8:	mov	r3, r2
   1afbc:	movw	r2, #62748	; 0xf51c
   1afc0:	movt	r2, #1
   1afc4:	mov	r1, #1
   1afc8:	bl	115c0 <__fprintf_chk@plt>
   1afcc:	b	1af08 <__assert_fail@plt+0x9804>
   1afd0:	mov	r2, #5
   1afd4:	movw	r1, #62968	; 0xf5f8
   1afd8:	movt	r1, #1
   1afdc:	mov	r0, #0
   1afe0:	bl	113bc <dcgettext@plt>
   1afe4:	ldr	r3, [r5]
   1afe8:	mov	r2, r0
   1afec:	mov	r1, #1
   1aff0:	mov	r0, r4
   1aff4:	bl	115c0 <__fprintf_chk@plt>
   1aff8:	add	sp, sp, #32
   1affc:	ldrd	r4, [sp]
   1b000:	ldr	r6, [sp, #8]
   1b004:	add	sp, sp, #12
   1b008:	pop	{pc}		; (ldr pc, [sp], #4)
   1b00c:	mov	r2, #5
   1b010:	movw	r1, #62984	; 0xf608
   1b014:	movt	r1, #1
   1b018:	mov	r0, #0
   1b01c:	bl	113bc <dcgettext@plt>
   1b020:	ldr	r3, [r5, #4]
   1b024:	str	r3, [sp]
   1b028:	ldr	r3, [r5]
   1b02c:	mov	r2, r0
   1b030:	mov	r1, #1
   1b034:	mov	r0, r4
   1b038:	bl	115c0 <__fprintf_chk@plt>
   1b03c:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b040:	mov	r2, #5
   1b044:	movw	r1, #63008	; 0xf620
   1b048:	movt	r1, #1
   1b04c:	mov	r0, #0
   1b050:	bl	113bc <dcgettext@plt>
   1b054:	ldr	r3, [r5, #8]
   1b058:	str	r3, [sp, #4]
   1b05c:	ldr	r3, [r5, #4]
   1b060:	str	r3, [sp]
   1b064:	ldr	r3, [r5]
   1b068:	mov	r2, r0
   1b06c:	mov	r1, #1
   1b070:	mov	r0, r4
   1b074:	bl	115c0 <__fprintf_chk@plt>
   1b078:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b07c:	mov	r2, #5
   1b080:	movw	r1, #63036	; 0xf63c
   1b084:	movt	r1, #1
   1b088:	mov	r0, #0
   1b08c:	bl	113bc <dcgettext@plt>
   1b090:	ldr	r3, [r5, #12]
   1b094:	str	r3, [sp, #8]
   1b098:	ldr	r3, [r5, #8]
   1b09c:	str	r3, [sp, #4]
   1b0a0:	ldr	r3, [r5, #4]
   1b0a4:	str	r3, [sp]
   1b0a8:	ldr	r3, [r5]
   1b0ac:	mov	r2, r0
   1b0b0:	mov	r1, #1
   1b0b4:	mov	r0, r4
   1b0b8:	bl	115c0 <__fprintf_chk@plt>
   1b0bc:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b0c0:	mov	r2, #5
   1b0c4:	movw	r1, #63068	; 0xf65c
   1b0c8:	movt	r1, #1
   1b0cc:	mov	r0, #0
   1b0d0:	bl	113bc <dcgettext@plt>
   1b0d4:	ldr	r3, [r5, #16]
   1b0d8:	str	r3, [sp, #12]
   1b0dc:	ldr	r3, [r5, #12]
   1b0e0:	str	r3, [sp, #8]
   1b0e4:	ldr	r3, [r5, #8]
   1b0e8:	str	r3, [sp, #4]
   1b0ec:	ldr	r3, [r5, #4]
   1b0f0:	str	r3, [sp]
   1b0f4:	ldr	r3, [r5]
   1b0f8:	mov	r2, r0
   1b0fc:	mov	r1, #1
   1b100:	mov	r0, r4
   1b104:	bl	115c0 <__fprintf_chk@plt>
   1b108:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b10c:	mov	r2, #5
   1b110:	movw	r1, #63104	; 0xf680
   1b114:	movt	r1, #1
   1b118:	mov	r0, #0
   1b11c:	bl	113bc <dcgettext@plt>
   1b120:	ldr	r3, [r5, #20]
   1b124:	str	r3, [sp, #16]
   1b128:	ldr	r3, [r5, #16]
   1b12c:	str	r3, [sp, #12]
   1b130:	ldr	r3, [r5, #12]
   1b134:	str	r3, [sp, #8]
   1b138:	ldr	r3, [r5, #8]
   1b13c:	str	r3, [sp, #4]
   1b140:	ldr	r3, [r5, #4]
   1b144:	str	r3, [sp]
   1b148:	ldr	r3, [r5]
   1b14c:	mov	r2, r0
   1b150:	mov	r1, #1
   1b154:	mov	r0, r4
   1b158:	bl	115c0 <__fprintf_chk@plt>
   1b15c:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b160:	mov	r2, #5
   1b164:	movw	r1, #63144	; 0xf6a8
   1b168:	movt	r1, #1
   1b16c:	mov	r0, #0
   1b170:	bl	113bc <dcgettext@plt>
   1b174:	ldr	r3, [r5, #24]
   1b178:	str	r3, [sp, #20]
   1b17c:	ldr	r3, [r5, #20]
   1b180:	str	r3, [sp, #16]
   1b184:	ldr	r3, [r5, #16]
   1b188:	str	r3, [sp, #12]
   1b18c:	ldr	r3, [r5, #12]
   1b190:	str	r3, [sp, #8]
   1b194:	ldr	r3, [r5, #8]
   1b198:	str	r3, [sp, #4]
   1b19c:	ldr	r3, [r5, #4]
   1b1a0:	str	r3, [sp]
   1b1a4:	ldr	r3, [r5]
   1b1a8:	mov	r2, r0
   1b1ac:	mov	r1, #1
   1b1b0:	mov	r0, r4
   1b1b4:	bl	115c0 <__fprintf_chk@plt>
   1b1b8:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b1bc:	mov	r2, #5
   1b1c0:	movw	r1, #63188	; 0xf6d4
   1b1c4:	movt	r1, #1
   1b1c8:	mov	r0, #0
   1b1cc:	bl	113bc <dcgettext@plt>
   1b1d0:	ldr	r3, [r5, #28]
   1b1d4:	str	r3, [sp, #24]
   1b1d8:	ldr	r3, [r5, #24]
   1b1dc:	str	r3, [sp, #20]
   1b1e0:	ldr	r3, [r5, #20]
   1b1e4:	str	r3, [sp, #16]
   1b1e8:	ldr	r3, [r5, #16]
   1b1ec:	str	r3, [sp, #12]
   1b1f0:	ldr	r3, [r5, #12]
   1b1f4:	str	r3, [sp, #8]
   1b1f8:	ldr	r3, [r5, #8]
   1b1fc:	str	r3, [sp, #4]
   1b200:	ldr	r3, [r5, #4]
   1b204:	str	r3, [sp]
   1b208:	ldr	r3, [r5]
   1b20c:	mov	r2, r0
   1b210:	mov	r1, #1
   1b214:	mov	r0, r4
   1b218:	bl	115c0 <__fprintf_chk@plt>
   1b21c:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b220:	mov	r2, #5
   1b224:	movw	r1, #63236	; 0xf704
   1b228:	movt	r1, #1
   1b22c:	mov	r0, #0
   1b230:	bl	113bc <dcgettext@plt>
   1b234:	ldr	r3, [r5, #32]
   1b238:	str	r3, [sp, #28]
   1b23c:	ldr	r3, [r5, #28]
   1b240:	str	r3, [sp, #24]
   1b244:	ldr	r3, [r5, #24]
   1b248:	str	r3, [sp, #20]
   1b24c:	ldr	r3, [r5, #20]
   1b250:	str	r3, [sp, #16]
   1b254:	ldr	r3, [r5, #16]
   1b258:	str	r3, [sp, #12]
   1b25c:	ldr	r3, [r5, #12]
   1b260:	str	r3, [sp, #8]
   1b264:	ldr	r3, [r5, #8]
   1b268:	str	r3, [sp, #4]
   1b26c:	ldr	r3, [r5, #4]
   1b270:	str	r3, [sp]
   1b274:	ldr	r3, [r5]
   1b278:	mov	r2, r0
   1b27c:	mov	r1, #1
   1b280:	mov	r0, r4
   1b284:	bl	115c0 <__fprintf_chk@plt>
   1b288:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b28c:	mov	r2, #5
   1b290:	movw	r1, #63288	; 0xf738
   1b294:	movt	r1, #1
   1b298:	mov	r0, #0
   1b29c:	bl	113bc <dcgettext@plt>
   1b2a0:	ldr	r3, [r5, #32]
   1b2a4:	str	r3, [sp, #28]
   1b2a8:	ldr	r3, [r5, #28]
   1b2ac:	str	r3, [sp, #24]
   1b2b0:	ldr	r3, [r5, #24]
   1b2b4:	str	r3, [sp, #20]
   1b2b8:	ldr	r3, [r5, #20]
   1b2bc:	str	r3, [sp, #16]
   1b2c0:	ldr	r3, [r5, #16]
   1b2c4:	str	r3, [sp, #12]
   1b2c8:	ldr	r3, [r5, #12]
   1b2cc:	str	r3, [sp, #8]
   1b2d0:	ldr	r3, [r5, #8]
   1b2d4:	str	r3, [sp, #4]
   1b2d8:	ldr	r3, [r5, #4]
   1b2dc:	str	r3, [sp]
   1b2e0:	ldr	r3, [r5]
   1b2e4:	mov	r2, r0
   1b2e8:	mov	r1, #1
   1b2ec:	mov	r0, r4
   1b2f0:	bl	115c0 <__fprintf_chk@plt>
   1b2f4:	b	1aff8 <__assert_fail@plt+0x98f4>
   1b2f8:	strd	r4, [sp, #-12]!
   1b2fc:	str	lr, [sp, #8]
   1b300:	sub	sp, sp, #12
   1b304:	ldr	r5, [sp, #24]
   1b308:	ldr	ip, [r5]
   1b30c:	cmp	ip, #0
   1b310:	beq	1b348 <__assert_fail@plt+0x9c44>
   1b314:	mov	lr, r5
   1b318:	mov	ip, #0
   1b31c:	add	ip, ip, #1
   1b320:	ldr	r4, [lr, #4]!
   1b324:	cmp	r4, #0
   1b328:	bne	1b31c <__assert_fail@plt+0x9c18>
   1b32c:	str	ip, [sp, #4]
   1b330:	str	r5, [sp]
   1b334:	bl	1aec8 <__assert_fail@plt+0x97c4>
   1b338:	add	sp, sp, #12
   1b33c:	ldrd	r4, [sp]
   1b340:	add	sp, sp, #8
   1b344:	pop	{pc}		; (ldr pc, [sp], #4)
   1b348:	mov	ip, #0
   1b34c:	b	1b32c <__assert_fail@plt+0x9c28>
   1b350:	strd	r4, [sp, #-12]!
   1b354:	str	lr, [sp, #8]
   1b358:	sub	sp, sp, #52	; 0x34
   1b35c:	ldr	r5, [sp, #64]	; 0x40
   1b360:	add	r4, sp, #8
   1b364:	mov	ip, #0
   1b368:	ldr	lr, [r5], #4
   1b36c:	str	lr, [r4], #4
   1b370:	cmp	lr, #0
   1b374:	beq	1b384 <__assert_fail@plt+0x9c80>
   1b378:	add	ip, ip, #1
   1b37c:	cmp	ip, #10
   1b380:	bne	1b368 <__assert_fail@plt+0x9c64>
   1b384:	str	ip, [sp, #4]
   1b388:	add	ip, sp, #8
   1b38c:	str	ip, [sp]
   1b390:	bl	1aec8 <__assert_fail@plt+0x97c4>
   1b394:	add	sp, sp, #52	; 0x34
   1b398:	ldrd	r4, [sp]
   1b39c:	add	sp, sp, #8
   1b3a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3a4:	push	{r3}		; (str r3, [sp, #-4]!)
   1b3a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b3ac:	sub	sp, sp, #16
   1b3b0:	add	r3, sp, #24
   1b3b4:	str	r3, [sp, #12]
   1b3b8:	str	r3, [sp]
   1b3bc:	ldr	r3, [sp, #20]
   1b3c0:	bl	1b350 <__assert_fail@plt+0x9c4c>
   1b3c4:	add	sp, sp, #16
   1b3c8:	pop	{lr}		; (ldr lr, [sp], #4)
   1b3cc:	add	sp, sp, #4
   1b3d0:	bx	lr
   1b3d4:	str	r4, [sp, #-8]!
   1b3d8:	str	lr, [sp, #4]
   1b3dc:	movw	r3, #820	; 0x334
   1b3e0:	movt	r3, #3
   1b3e4:	ldr	r1, [r3]
   1b3e8:	mov	r0, #10
   1b3ec:	bl	113a4 <fputc_unlocked@plt>
   1b3f0:	mov	r2, #5
   1b3f4:	movw	r1, #63348	; 0xf774
   1b3f8:	movt	r1, #1
   1b3fc:	mov	r0, #0
   1b400:	bl	113bc <dcgettext@plt>
   1b404:	movw	r2, #63368	; 0xf788
   1b408:	movt	r2, #1
   1b40c:	mov	r1, r0
   1b410:	mov	r0, #1
   1b414:	bl	1159c <__printf_chk@plt>
   1b418:	mov	r2, #5
   1b41c:	movw	r1, #63392	; 0xf7a0
   1b420:	movt	r1, #1
   1b424:	mov	r0, #0
   1b428:	bl	113bc <dcgettext@plt>
   1b42c:	movw	r3, #60448	; 0xec20
   1b430:	movt	r3, #1
   1b434:	movw	r2, #60488	; 0xec48
   1b438:	movt	r2, #1
   1b43c:	mov	r1, r0
   1b440:	mov	r0, #1
   1b444:	bl	1159c <__printf_chk@plt>
   1b448:	mov	r2, #5
   1b44c:	movw	r1, #63412	; 0xf7b4
   1b450:	movt	r1, #1
   1b454:	mov	r0, #0
   1b458:	bl	113bc <dcgettext@plt>
   1b45c:	movw	r2, #63452	; 0xf7dc
   1b460:	movt	r2, #1
   1b464:	mov	r1, r0
   1b468:	mov	r0, #1
   1b46c:	bl	1159c <__printf_chk@plt>
   1b470:	ldr	r4, [sp]
   1b474:	add	sp, sp, #4
   1b478:	pop	{pc}		; (ldr pc, [sp], #4)
   1b47c:	str	r4, [sp, #-8]!
   1b480:	str	lr, [sp, #4]
   1b484:	bl	1c13c <__assert_fail@plt+0xaa38>
   1b488:	cmp	r0, #0
   1b48c:	beq	1b49c <__assert_fail@plt+0x9d98>
   1b490:	ldr	r4, [sp]
   1b494:	add	sp, sp, #4
   1b498:	pop	{pc}		; (ldr pc, [sp], #4)
   1b49c:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b4a0:	str	r4, [sp, #-8]!
   1b4a4:	str	lr, [sp, #4]
   1b4a8:	bl	1c13c <__assert_fail@plt+0xaa38>
   1b4ac:	cmp	r0, #0
   1b4b0:	beq	1b4c0 <__assert_fail@plt+0x9dbc>
   1b4b4:	ldr	r4, [sp]
   1b4b8:	add	sp, sp, #4
   1b4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4c0:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b4c4:	str	r4, [sp, #-8]!
   1b4c8:	str	lr, [sp, #4]
   1b4cc:	bl	1b47c <__assert_fail@plt+0x9d78>
   1b4d0:	ldr	r4, [sp]
   1b4d4:	add	sp, sp, #4
   1b4d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4dc:	strd	r4, [sp, #-16]!
   1b4e0:	str	r6, [sp, #8]
   1b4e4:	str	lr, [sp, #12]
   1b4e8:	mov	r5, r0
   1b4ec:	mov	r4, r1
   1b4f0:	bl	1c178 <__assert_fail@plt+0xaa74>
   1b4f4:	cmp	r0, #0
   1b4f8:	beq	1b50c <__assert_fail@plt+0x9e08>
   1b4fc:	ldrd	r4, [sp]
   1b500:	ldr	r6, [sp, #8]
   1b504:	add	sp, sp, #12
   1b508:	pop	{pc}		; (ldr pc, [sp], #4)
   1b50c:	adds	r4, r4, #0
   1b510:	movne	r4, #1
   1b514:	cmp	r5, #0
   1b518:	moveq	r4, #1
   1b51c:	cmp	r4, #0
   1b520:	beq	1b4fc <__assert_fail@plt+0x9df8>
   1b524:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b528:	str	r4, [sp, #-8]!
   1b52c:	str	lr, [sp, #4]
   1b530:	cmp	r1, #0
   1b534:	orreq	r1, r1, #1
   1b538:	bl	1c178 <__assert_fail@plt+0xaa74>
   1b53c:	cmp	r0, #0
   1b540:	beq	1b550 <__assert_fail@plt+0x9e4c>
   1b544:	ldr	r4, [sp]
   1b548:	add	sp, sp, #4
   1b54c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b550:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b554:	strd	r4, [sp, #-16]!
   1b558:	str	r6, [sp, #8]
   1b55c:	str	lr, [sp, #12]
   1b560:	mov	r4, r0
   1b564:	mov	r6, r1
   1b568:	mov	r5, r2
   1b56c:	bl	1d728 <__assert_fail@plt+0xc024>
   1b570:	cmp	r0, #0
   1b574:	beq	1b588 <__assert_fail@plt+0x9e84>
   1b578:	ldrd	r4, [sp]
   1b57c:	ldr	r6, [sp, #8]
   1b580:	add	sp, sp, #12
   1b584:	pop	{pc}		; (ldr pc, [sp], #4)
   1b588:	cmp	r4, #0
   1b58c:	beq	1b59c <__assert_fail@plt+0x9e98>
   1b590:	cmp	r6, #0
   1b594:	cmpne	r5, #0
   1b598:	beq	1b578 <__assert_fail@plt+0x9e74>
   1b59c:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b5a0:	str	r4, [sp, #-8]!
   1b5a4:	str	lr, [sp, #4]
   1b5a8:	bl	1b554 <__assert_fail@plt+0x9e50>
   1b5ac:	ldr	r4, [sp]
   1b5b0:	add	sp, sp, #4
   1b5b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5b8:	str	r4, [sp, #-8]!
   1b5bc:	str	lr, [sp, #4]
   1b5c0:	mov	ip, r1
   1b5c4:	mov	r3, r2
   1b5c8:	cmp	r2, #0
   1b5cc:	cmpne	r1, #0
   1b5d0:	moveq	r3, #1
   1b5d4:	moveq	ip, r3
   1b5d8:	mov	r2, r3
   1b5dc:	mov	r1, ip
   1b5e0:	bl	1d728 <__assert_fail@plt+0xc024>
   1b5e4:	cmp	r0, #0
   1b5e8:	beq	1b5f8 <__assert_fail@plt+0x9ef4>
   1b5ec:	ldr	r4, [sp]
   1b5f0:	add	sp, sp, #4
   1b5f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5f8:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b5fc:	str	r4, [sp, #-8]!
   1b600:	str	lr, [sp, #4]
   1b604:	mov	r2, r1
   1b608:	mov	r1, r0
   1b60c:	mov	r0, #0
   1b610:	bl	1b554 <__assert_fail@plt+0x9e50>
   1b614:	ldr	r4, [sp]
   1b618:	add	sp, sp, #4
   1b61c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b620:	str	r4, [sp, #-8]!
   1b624:	str	lr, [sp, #4]
   1b628:	mov	r2, r1
   1b62c:	mov	r1, r0
   1b630:	mov	r0, #0
   1b634:	bl	1b5b8 <__assert_fail@plt+0x9eb4>
   1b638:	ldr	r4, [sp]
   1b63c:	add	sp, sp, #4
   1b640:	pop	{pc}		; (ldr pc, [sp], #4)
   1b644:	strd	r4, [sp, #-16]!
   1b648:	str	r6, [sp, #8]
   1b64c:	str	lr, [sp, #12]
   1b650:	mov	r5, r1
   1b654:	ldr	r4, [r1]
   1b658:	cmp	r0, #0
   1b65c:	beq	1b68c <__assert_fail@plt+0x9f88>
   1b660:	lsr	r3, r4, #1
   1b664:	add	r3, r3, #1
   1b668:	adds	r4, r4, r3
   1b66c:	bcs	1b6a8 <__assert_fail@plt+0x9fa4>
   1b670:	mov	r1, r4
   1b674:	bl	1b554 <__assert_fail@plt+0x9e50>
   1b678:	str	r4, [r5]
   1b67c:	ldrd	r4, [sp]
   1b680:	ldr	r6, [sp, #8]
   1b684:	add	sp, sp, #12
   1b688:	pop	{pc}		; (ldr pc, [sp], #4)
   1b68c:	cmp	r4, #0
   1b690:	bne	1b670 <__assert_fail@plt+0x9f6c>
   1b694:	mov	r4, #64	; 0x40
   1b698:	udiv	r4, r4, r2
   1b69c:	cmp	r2, #64	; 0x40
   1b6a0:	addhi	r4, r4, #1
   1b6a4:	b	1b670 <__assert_fail@plt+0x9f6c>
   1b6a8:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b6ac:	str	r4, [sp, #-8]!
   1b6b0:	str	lr, [sp, #4]
   1b6b4:	mov	r2, #1
   1b6b8:	bl	1b644 <__assert_fail@plt+0x9f40>
   1b6bc:	ldr	r4, [sp]
   1b6c0:	add	sp, sp, #4
   1b6c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b6cc:	strd	r6, [sp, #8]
   1b6d0:	str	r8, [sp, #16]
   1b6d4:	str	lr, [sp, #20]
   1b6d8:	mov	r5, r1
   1b6dc:	ldr	lr, [sp, #24]
   1b6e0:	ldr	ip, [r1]
   1b6e4:	asr	r4, ip, #1
   1b6e8:	adds	r4, ip, r4
   1b6ec:	movvs	r1, #1
   1b6f0:	movvc	r1, #0
   1b6f4:	cmp	r1, #0
   1b6f8:	mvnne	r4, #-2147483648	; 0x80000000
   1b6fc:	mvn	r8, r3
   1b700:	lsr	r8, r8, #31
   1b704:	cmp	r3, r4
   1b708:	movge	r1, #0
   1b70c:	andlt	r1, r8, #1
   1b710:	cmp	r1, #0
   1b714:	movne	r4, r3
   1b718:	smull	r6, r7, r4, lr
   1b71c:	asr	r1, r6, #31
   1b720:	cmp	r1, r7
   1b724:	bne	1b73c <__assert_fail@plt+0xa038>
   1b728:	mov	r1, r6
   1b72c:	cmp	r6, #63	; 0x3f
   1b730:	movle	r1, #64	; 0x40
   1b734:	ble	1b740 <__assert_fail@plt+0xa03c>
   1b738:	b	1b74c <__assert_fail@plt+0xa048>
   1b73c:	mvn	r1, #-2147483648	; 0x80000000
   1b740:	sdiv	r4, r1, lr
   1b744:	mls	r6, lr, r4, r1
   1b748:	sub	r1, r1, r6
   1b74c:	cmp	r0, #0
   1b750:	moveq	r6, #0
   1b754:	streq	r6, [r5]
   1b758:	sub	r6, r4, ip
   1b75c:	cmp	r6, r2
   1b760:	bge	1b798 <__assert_fail@plt+0xa094>
   1b764:	adds	r2, ip, r2
   1b768:	mov	r4, r2
   1b76c:	bvs	1b7b4 <__assert_fail@plt+0xa0b0>
   1b770:	cmp	r2, r3
   1b774:	movle	r3, #0
   1b778:	andgt	r3, r8, #1
   1b77c:	cmp	r3, #0
   1b780:	bne	1b7b4 <__assert_fail@plt+0xa0b0>
   1b784:	smull	r2, r3, r2, lr
   1b788:	asr	ip, r2, #31
   1b78c:	mov	r1, r2
   1b790:	cmp	ip, r3
   1b794:	bne	1b7b4 <__assert_fail@plt+0xa0b0>
   1b798:	bl	1b4dc <__assert_fail@plt+0x9dd8>
   1b79c:	str	r4, [r5]
   1b7a0:	ldrd	r4, [sp]
   1b7a4:	ldrd	r6, [sp, #8]
   1b7a8:	ldr	r8, [sp, #16]
   1b7ac:	add	sp, sp, #20
   1b7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7b4:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b7b8:	str	r4, [sp, #-8]!
   1b7bc:	str	lr, [sp, #4]
   1b7c0:	bl	1c0c8 <__assert_fail@plt+0xa9c4>
   1b7c4:	cmp	r0, #0
   1b7c8:	beq	1b7d8 <__assert_fail@plt+0xa0d4>
   1b7cc:	ldr	r4, [sp]
   1b7d0:	add	sp, sp, #4
   1b7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7d8:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b7dc:	str	r4, [sp, #-8]!
   1b7e0:	str	lr, [sp, #4]
   1b7e4:	mov	r1, #1
   1b7e8:	bl	1b7b8 <__assert_fail@plt+0xa0b4>
   1b7ec:	ldr	r4, [sp]
   1b7f0:	add	sp, sp, #4
   1b7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7f8:	str	r4, [sp, #-8]!
   1b7fc:	str	lr, [sp, #4]
   1b800:	bl	1c0c8 <__assert_fail@plt+0xa9c4>
   1b804:	cmp	r0, #0
   1b808:	beq	1b818 <__assert_fail@plt+0xa114>
   1b80c:	ldr	r4, [sp]
   1b810:	add	sp, sp, #4
   1b814:	pop	{pc}		; (ldr pc, [sp], #4)
   1b818:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b81c:	str	r4, [sp, #-8]!
   1b820:	str	lr, [sp, #4]
   1b824:	mov	r1, #1
   1b828:	bl	1b7f8 <__assert_fail@plt+0xa0f4>
   1b82c:	ldr	r4, [sp]
   1b830:	add	sp, sp, #4
   1b834:	pop	{pc}		; (ldr pc, [sp], #4)
   1b838:	strd	r4, [sp, #-16]!
   1b83c:	str	r6, [sp, #8]
   1b840:	str	lr, [sp, #12]
   1b844:	mov	r5, r0
   1b848:	mov	r4, r1
   1b84c:	mov	r0, r1
   1b850:	bl	1b47c <__assert_fail@plt+0x9d78>
   1b854:	mov	r2, r4
   1b858:	mov	r1, r5
   1b85c:	bl	11374 <memcpy@plt>
   1b860:	ldrd	r4, [sp]
   1b864:	ldr	r6, [sp, #8]
   1b868:	add	sp, sp, #12
   1b86c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b870:	strd	r4, [sp, #-16]!
   1b874:	str	r6, [sp, #8]
   1b878:	str	lr, [sp, #12]
   1b87c:	mov	r5, r0
   1b880:	mov	r4, r1
   1b884:	mov	r0, r1
   1b888:	bl	1b4a0 <__assert_fail@plt+0x9d9c>
   1b88c:	mov	r2, r4
   1b890:	mov	r1, r5
   1b894:	bl	11374 <memcpy@plt>
   1b898:	ldrd	r4, [sp]
   1b89c:	ldr	r6, [sp, #8]
   1b8a0:	add	sp, sp, #12
   1b8a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8a8:	strd	r4, [sp, #-16]!
   1b8ac:	str	r6, [sp, #8]
   1b8b0:	str	lr, [sp, #12]
   1b8b4:	mov	r5, r0
   1b8b8:	mov	r4, r1
   1b8bc:	add	r0, r1, #1
   1b8c0:	bl	1b4a0 <__assert_fail@plt+0x9d9c>
   1b8c4:	mov	r2, #0
   1b8c8:	strb	r2, [r0, r4]
   1b8cc:	mov	r2, r4
   1b8d0:	mov	r1, r5
   1b8d4:	bl	11374 <memcpy@plt>
   1b8d8:	ldrd	r4, [sp]
   1b8dc:	ldr	r6, [sp, #8]
   1b8e0:	add	sp, sp, #12
   1b8e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8e8:	str	r4, [sp, #-8]!
   1b8ec:	str	lr, [sp, #4]
   1b8f0:	mov	r4, r0
   1b8f4:	bl	1153c <strlen@plt>
   1b8f8:	add	r1, r0, #1
   1b8fc:	mov	r0, r4
   1b900:	bl	1b838 <__assert_fail@plt+0xa134>
   1b904:	ldr	r4, [sp]
   1b908:	add	sp, sp, #4
   1b90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b910:	str	r4, [sp, #-8]!
   1b914:	str	lr, [sp, #4]
   1b918:	movw	r3, #724	; 0x2d4
   1b91c:	movt	r3, #3
   1b920:	ldr	r4, [r3]
   1b924:	mov	r2, #5
   1b928:	movw	r1, #63532	; 0xf82c
   1b92c:	movt	r1, #1
   1b930:	mov	r0, #0
   1b934:	bl	113bc <dcgettext@plt>
   1b938:	mov	r3, r0
   1b93c:	movw	r2, #61932	; 0xf1ec
   1b940:	movt	r2, #1
   1b944:	mov	r1, #0
   1b948:	mov	r0, r4
   1b94c:	bl	11494 <error@plt>
   1b950:	bl	116e0 <abort@plt>
   1b954:	str	r4, [sp, #-8]!
   1b958:	str	lr, [sp, #4]
   1b95c:	mov	r1, #0
   1b960:	mov	r0, r1
   1b964:	bl	11524 <getcwd@plt>
   1b968:	subs	r4, r0, #0
   1b96c:	beq	1b980 <__assert_fail@plt+0xa27c>
   1b970:	mov	r0, r4
   1b974:	ldr	r4, [sp]
   1b978:	add	sp, sp, #4
   1b97c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b980:	bl	1156c <__errno_location@plt>
   1b984:	ldr	r3, [r0]
   1b988:	cmp	r3, #12
   1b98c:	bne	1b970 <__assert_fail@plt+0xa26c>
   1b990:	bl	1b910 <__assert_fail@plt+0xa20c>
   1b994:	push	{lr}		; (str lr, [sp, #-4]!)
   1b998:	sub	sp, sp, #20
   1b99c:	movw	ip, #724	; 0x2d4
   1b9a0:	movt	ip, #3
   1b9a4:	ldr	r5, [ip]
   1b9a8:	sub	r0, r0, #1
   1b9ac:	cmp	r0, #3
   1b9b0:	ldrls	pc, [pc, r0, lsl #2]
   1b9b4:	b	1b9d4 <__assert_fail@plt+0xa2d0>
   1b9b8:	ldrdeq	fp, [r1], -r8
   1b9bc:	andeq	fp, r1, r8, asr #19
   1b9c0:	andeq	fp, r1, r8, asr #19
   1b9c4:	andeq	fp, r1, r4, ror #19
   1b9c8:	movw	r0, #63612	; 0xf87c
   1b9cc:	movt	r0, #1
   1b9d0:	b	1b9ec <__assert_fail@plt+0xa2e8>
   1b9d4:	bl	116e0 <abort@plt>
   1b9d8:	movw	r0, #63552	; 0xf840
   1b9dc:	movt	r0, #1
   1b9e0:	b	1b9ec <__assert_fail@plt+0xa2e8>
   1b9e4:	movw	r0, #63584	; 0xf860
   1b9e8:	movt	r0, #1
   1b9ec:	cmp	r1, #0
   1b9f0:	blt	1ba34 <__assert_fail@plt+0xa330>
   1b9f4:	ldr	r6, [r3, r1, lsl #4]
   1b9f8:	movw	r4, #63652	; 0xf8a4
   1b9fc:	movt	r4, #1
   1ba00:	mov	r2, #5
   1ba04:	mov	r1, r0
   1ba08:	mov	r0, #0
   1ba0c:	bl	113bc <dcgettext@plt>
   1ba10:	ldr	r3, [sp, #24]
   1ba14:	str	r3, [sp, #4]
   1ba18:	str	r6, [sp]
   1ba1c:	mov	r3, r4
   1ba20:	mov	r2, r0
   1ba24:	mov	r1, #0
   1ba28:	mov	r0, r5
   1ba2c:	bl	11494 <error@plt>
   1ba30:	bl	116e0 <abort@plt>
   1ba34:	movw	r4, #63652	; 0xf8a4
   1ba38:	movt	r4, #1
   1ba3c:	sub	r4, r4, r1
   1ba40:	strb	r2, [sp, #12]
   1ba44:	mov	r3, #0
   1ba48:	strb	r3, [sp, #13]
   1ba4c:	add	r6, sp, #12
   1ba50:	b	1ba00 <__assert_fail@plt+0xa2fc>
   1ba54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba58:	strd	r6, [sp, #8]
   1ba5c:	strd	r8, [sp, #16]
   1ba60:	strd	sl, [sp, #24]
   1ba64:	str	lr, [sp, #32]
   1ba68:	sub	sp, sp, #12
   1ba6c:	str	r0, [sp, #4]
   1ba70:	cmp	r2, #0
   1ba74:	beq	1bb70 <__assert_fail@plt+0xa46c>
   1ba78:	sub	ip, r2, #1
   1ba7c:	ldrd	r2, [r0]
   1ba80:	mov	r0, #0
   1ba84:	mov	r8, r1
   1ba88:	asr	r9, r1, #31
   1ba8c:	str	r1, [sp]
   1ba90:	b	1bae0 <__assert_fail@plt+0xa3dc>
   1ba94:	orrs	r4, r2, r3
   1ba98:	movne	lr, #1
   1ba9c:	b	1baf0 <__assert_fail@plt+0xa3ec>
   1baa0:	mov	sl, r3
   1baa4:	ldr	fp, [sp]
   1baa8:	umull	r6, r7, r1, r2
   1baac:	mov	r4, r7
   1bab0:	mov	r5, #0
   1bab4:	umlal	r4, r5, sl, fp
   1bab8:	cmp	r5, #0
   1babc:	bne	1bb24 <__assert_fail@plt+0xa420>
   1bac0:	cmp	lr, #0
   1bac4:	bne	1bb3c <__assert_fail@plt+0xa438>
   1bac8:	mov	r2, r6
   1bacc:	mov	r3, r4
   1bad0:	orr	r0, r0, lr
   1bad4:	sub	ip, ip, #1
   1bad8:	cmn	ip, #1
   1badc:	beq	1bb4c <__assert_fail@plt+0xa448>
   1bae0:	mov	lr, #0
   1bae4:	cmp	r8, #0
   1bae8:	sbcs	r4, r9, #0
   1baec:	blt	1ba94 <__assert_fail@plt+0xa390>
   1baf0:	cmp	r9, #0
   1baf4:	bne	1bb10 <__assert_fail@plt+0xa40c>
   1baf8:	cmp	r3, #0
   1bafc:	bne	1baa0 <__assert_fail@plt+0xa39c>
   1bb00:	umull	r2, r3, r1, r2
   1bb04:	mov	r6, r2
   1bb08:	mov	r4, r3
   1bb0c:	b	1bac0 <__assert_fail@plt+0xa3bc>
   1bb10:	cmp	r3, #0
   1bb14:	bne	1bb24 <__assert_fail@plt+0xa420>
   1bb18:	mov	sl, r9
   1bb1c:	mov	fp, r2
   1bb20:	b	1baa8 <__assert_fail@plt+0xa3a4>
   1bb24:	mul	r4, r1, r3
   1bb28:	mla	r4, r2, r9, r4
   1bb2c:	umull	r6, r7, r1, r2
   1bb30:	add	r4, r4, r7
   1bb34:	mov	lr, #1
   1bb38:	b	1bac0 <__assert_fail@plt+0xa3bc>
   1bb3c:	mvn	r2, #0
   1bb40:	mvn	r3, #0
   1bb44:	mov	lr, #1
   1bb48:	b	1bad0 <__assert_fail@plt+0xa3cc>
   1bb4c:	ldr	r1, [sp, #4]
   1bb50:	strd	r2, [r1]
   1bb54:	add	sp, sp, #12
   1bb58:	ldrd	r4, [sp]
   1bb5c:	ldrd	r6, [sp, #8]
   1bb60:	ldrd	r8, [sp, #16]
   1bb64:	ldrd	sl, [sp, #24]
   1bb68:	add	sp, sp, #32
   1bb6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb70:	mov	r0, #0
   1bb74:	b	1bb54 <__assert_fail@plt+0xa450>
   1bb78:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1bb7c:	strd	r6, [sp, #8]
   1bb80:	strd	r8, [sp, #16]
   1bb84:	str	lr, [sp, #24]
   1bb88:	sub	sp, sp, #20
   1bb8c:	cmp	r2, #36	; 0x24
   1bb90:	bhi	1bbe4 <__assert_fail@plt+0xa4e0>
   1bb94:	mov	r5, r0
   1bb98:	mov	r6, r1
   1bb9c:	mov	r7, r2
   1bba0:	mov	r9, r3
   1bba4:	cmp	r1, #0
   1bba8:	addeq	r6, sp, #12
   1bbac:	bl	1156c <__errno_location@plt>
   1bbb0:	mov	r8, r0
   1bbb4:	mov	r3, #0
   1bbb8:	str	r3, [r0]
   1bbbc:	ldrb	r4, [r5]
   1bbc0:	bl	11518 <__ctype_b_loc@plt>
   1bbc4:	ldr	r1, [r0]
   1bbc8:	mov	r2, r5
   1bbcc:	lsl	r3, r4, #1
   1bbd0:	ldrh	r3, [r1, r3]
   1bbd4:	tst	r3, #8192	; 0x2000
   1bbd8:	beq	1bc04 <__assert_fail@plt+0xa500>
   1bbdc:	ldrb	r4, [r2, #1]!
   1bbe0:	b	1bbcc <__assert_fail@plt+0xa4c8>
   1bbe4:	movw	r3, #63656	; 0xf8a8
   1bbe8:	movt	r3, #1
   1bbec:	mov	r2, #85	; 0x55
   1bbf0:	movw	r1, #63668	; 0xf8b4
   1bbf4:	movt	r1, #1
   1bbf8:	movw	r0, #63684	; 0xf8c4
   1bbfc:	movt	r0, #1
   1bc00:	bl	11704 <__assert_fail@plt>
   1bc04:	cmp	r4, #45	; 0x2d
   1bc08:	moveq	r4, #4
   1bc0c:	beq	1bda0 <__assert_fail@plt+0xa69c>
   1bc10:	mov	r3, #0
   1bc14:	mov	r2, r7
   1bc18:	mov	r1, r6
   1bc1c:	mov	r0, r5
   1bc20:	bl	11380 <__strtoull_internal@plt>
   1bc24:	strd	r0, [sp]
   1bc28:	ldr	r7, [r6]
   1bc2c:	cmp	r7, r5
   1bc30:	beq	1bc54 <__assert_fail@plt+0xa550>
   1bc34:	ldr	r3, [r8]
   1bc38:	cmp	r3, #0
   1bc3c:	beq	1bd78 <__assert_fail@plt+0xa674>
   1bc40:	cmp	r3, #34	; 0x22
   1bc44:	moveq	r4, #1
   1bc48:	beq	1bd7c <__assert_fail@plt+0xa678>
   1bc4c:	mov	r4, #4
   1bc50:	b	1bda0 <__assert_fail@plt+0xa69c>
   1bc54:	ldr	r3, [sp, #48]	; 0x30
   1bc58:	cmp	r3, #0
   1bc5c:	beq	1c0b8 <__assert_fail@plt+0xa9b4>
   1bc60:	ldrb	r1, [r5]
   1bc64:	cmp	r1, #0
   1bc68:	moveq	r4, #4
   1bc6c:	beq	1bda0 <__assert_fail@plt+0xa69c>
   1bc70:	mov	r0, r3
   1bc74:	bl	11548 <strchr@plt>
   1bc78:	cmp	r0, #0
   1bc7c:	beq	1c0c0 <__assert_fail@plt+0xa9bc>
   1bc80:	mov	r2, #1
   1bc84:	mov	r3, #0
   1bc88:	strd	r2, [sp]
   1bc8c:	ldrb	r5, [r7]
   1bc90:	mov	r4, #0
   1bc94:	mov	r1, r5
   1bc98:	ldr	r0, [sp, #48]	; 0x30
   1bc9c:	bl	11548 <strchr@plt>
   1bca0:	cmp	r0, #0
   1bca4:	beq	1bdbc <__assert_fail@plt+0xa6b8>
   1bca8:	sub	r3, r5, #69	; 0x45
   1bcac:	cmp	r3, #47	; 0x2f
   1bcb0:	ldrls	pc, [pc, r3, lsl #2]
   1bcb4:	b	1bf08 <__assert_fail@plt+0xa804>
   1bcb8:	andeq	fp, r1, ip, asr #27
   1bcbc:	andeq	fp, r1, r8, lsl #30
   1bcc0:	andeq	fp, r1, ip, asr #27
   1bcc4:	andeq	fp, r1, r8, lsl #30
   1bcc8:	andeq	fp, r1, r8, lsl #30
   1bccc:	andeq	fp, r1, r8, lsl #30
   1bcd0:	andeq	fp, r1, ip, asr #27
   1bcd4:	andeq	fp, r1, r8, lsl #30
   1bcd8:	andeq	fp, r1, ip, asr #27
   1bcdc:	andeq	fp, r1, r8, lsl #30
   1bce0:	andeq	fp, r1, r8, lsl #30
   1bce4:	andeq	fp, r1, ip, asr #27
   1bce8:	andeq	fp, r1, r8, lsl #30
   1bcec:	andeq	fp, r1, r8, lsl #30
   1bcf0:	andeq	fp, r1, r8, lsl #30
   1bcf4:	andeq	fp, r1, ip, asr #27
   1bcf8:	andeq	fp, r1, r8, lsl #30
   1bcfc:	andeq	fp, r1, r8, lsl #30
   1bd00:	andeq	fp, r1, r8, lsl #30
   1bd04:	andeq	fp, r1, r8, lsl #30
   1bd08:	andeq	fp, r1, ip, asr #27
   1bd0c:	andeq	fp, r1, ip, asr #27
   1bd10:	andeq	fp, r1, r8, lsl #30
   1bd14:	andeq	fp, r1, r8, lsl #30
   1bd18:	andeq	fp, r1, r8, lsl #30
   1bd1c:	andeq	fp, r1, r8, lsl #30
   1bd20:	andeq	fp, r1, r8, lsl #30
   1bd24:	andeq	fp, r1, r8, lsl #30
   1bd28:	andeq	fp, r1, r8, lsl #30
   1bd2c:	andeq	fp, r1, r8, lsl #30
   1bd30:	andeq	fp, r1, r8, lsl #30
   1bd34:	andeq	fp, r1, r8, lsl #30
   1bd38:	andeq	fp, r1, r8, lsl #30
   1bd3c:	andeq	fp, r1, r8, lsl #30
   1bd40:	andeq	fp, r1, ip, asr #27
   1bd44:	andeq	fp, r1, r8, lsl #30
   1bd48:	andeq	fp, r1, r8, lsl #30
   1bd4c:	andeq	fp, r1, r8, lsl #30
   1bd50:	andeq	fp, r1, ip, asr #27
   1bd54:	andeq	fp, r1, r8, lsl #30
   1bd58:	andeq	fp, r1, ip, asr #27
   1bd5c:	andeq	fp, r1, r8, lsl #30
   1bd60:	andeq	fp, r1, r8, lsl #30
   1bd64:	andeq	fp, r1, r8, lsl #30
   1bd68:	andeq	fp, r1, r8, lsl #30
   1bd6c:	andeq	fp, r1, r8, lsl #30
   1bd70:	andeq	fp, r1, r8, lsl #30
   1bd74:	andeq	fp, r1, ip, asr #27
   1bd78:	mov	r4, #0
   1bd7c:	ldr	r3, [sp, #48]	; 0x30
   1bd80:	cmp	r3, #0
   1bd84:	strdeq	r0, [r9]
   1bd88:	beq	1bda0 <__assert_fail@plt+0xa69c>
   1bd8c:	ldrb	r5, [r7]
   1bd90:	cmp	r5, #0
   1bd94:	bne	1bc94 <__assert_fail@plt+0xa590>
   1bd98:	ldrd	r2, [sp]
   1bd9c:	strd	r2, [r9]
   1bda0:	mov	r0, r4
   1bda4:	add	sp, sp, #20
   1bda8:	ldrd	r4, [sp]
   1bdac:	ldrd	r6, [sp, #8]
   1bdb0:	ldrd	r8, [sp, #16]
   1bdb4:	add	sp, sp, #24
   1bdb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdbc:	ldrd	r2, [sp]
   1bdc0:	strd	r2, [r9]
   1bdc4:	orr	r4, r4, #2
   1bdc8:	b	1bda0 <__assert_fail@plt+0xa69c>
   1bdcc:	mov	r1, #48	; 0x30
   1bdd0:	ldr	r0, [sp, #48]	; 0x30
   1bdd4:	bl	11548 <strchr@plt>
   1bdd8:	cmp	r0, #0
   1bddc:	beq	1bf14 <__assert_fail@plt+0xa810>
   1bde0:	ldrb	r3, [r7, #1]
   1bde4:	cmp	r3, #68	; 0x44
   1bde8:	beq	1bf20 <__assert_fail@plt+0xa81c>
   1bdec:	cmp	r3, #105	; 0x69
   1bdf0:	beq	1bef0 <__assert_fail@plt+0xa7ec>
   1bdf4:	cmp	r3, #66	; 0x42
   1bdf8:	moveq	r7, #2
   1bdfc:	movne	r7, #1
   1be00:	moveq	r1, #1000	; 0x3e8
   1be04:	movne	r1, #1024	; 0x400
   1be08:	sub	r5, r5, #66	; 0x42
   1be0c:	cmp	r5, #53	; 0x35
   1be10:	ldrls	pc, [pc, r5, lsl #2]
   1be14:	b	1c084 <__assert_fail@plt+0xa980>
   1be18:	andeq	fp, r1, r4, ror pc
   1be1c:	andeq	ip, r1, r4, lsl #1
   1be20:	andeq	ip, r1, r4, lsl #1
   1be24:			; <UNDEFINED> instruction: 0x0001bfbc
   1be28:	andeq	ip, r1, r4, lsl #1
   1be2c:	andeq	fp, r1, ip, asr #31
   1be30:	andeq	ip, r1, r4, lsl #1
   1be34:	andeq	ip, r1, r4, lsl #1
   1be38:	andeq	ip, r1, r4, lsl #1
   1be3c:	ldrdeq	fp, [r1], -ip
   1be40:	andeq	ip, r1, r4, lsl #1
   1be44:	andeq	fp, r1, ip, ror #31
   1be48:	andeq	ip, r1, r4, lsl #1
   1be4c:	andeq	ip, r1, r4, lsl #1
   1be50:	strdeq	fp, [r1], -ip
   1be54:	andeq	ip, r1, r4, lsl #1
   1be58:	andeq	ip, r1, r4, lsl #1
   1be5c:	andeq	ip, r1, r4, lsl #1
   1be60:	andeq	ip, r1, ip
   1be64:	andeq	ip, r1, r4, lsl #1
   1be68:	andeq	ip, r1, r4, lsl #1
   1be6c:	andeq	ip, r1, r4, lsl #1
   1be70:	andeq	ip, r1, r4, lsl #1
   1be74:	andeq	ip, r1, r4, rrx
   1be78:	andeq	ip, r1, r4, ror r0
   1be7c:	andeq	ip, r1, r4, lsl #1
   1be80:	andeq	ip, r1, r4, lsl #1
   1be84:	andeq	ip, r1, r4, lsl #1
   1be88:	andeq	ip, r1, r4, lsl #1
   1be8c:	andeq	ip, r1, r4, lsl #1
   1be90:	andeq	ip, r1, r4, lsl #1
   1be94:	andeq	ip, r1, r4, lsl #1
   1be98:	andeq	fp, r1, ip, lsr #30
   1be9c:	muleq	r1, r4, r0
   1bea0:	andeq	ip, r1, r4, lsl #1
   1bea4:	andeq	ip, r1, r4, lsl #1
   1bea8:	andeq	ip, r1, r4, lsl #1
   1beac:	andeq	fp, r1, ip, asr #31
   1beb0:	andeq	ip, r1, r4, lsl #1
   1beb4:	andeq	ip, r1, r4, lsl #1
   1beb8:	andeq	ip, r1, r4, lsl #1
   1bebc:	ldrdeq	fp, [r1], -ip
   1bec0:	andeq	ip, r1, r4, lsl #1
   1bec4:	andeq	fp, r1, ip, ror #31
   1bec8:	andeq	ip, r1, r4, lsl #1
   1becc:	andeq	ip, r1, r4, lsl #1
   1bed0:	andeq	ip, r1, r4, lsl #1
   1bed4:	andeq	ip, r1, r4, lsl #1
   1bed8:	andeq	ip, r1, r4, lsl #1
   1bedc:	andeq	ip, r1, r4, lsl #1
   1bee0:	andeq	ip, r1, ip
   1bee4:	andeq	ip, r1, r4, lsl #1
   1bee8:	andeq	ip, r1, r4, lsl #1
   1beec:	andeq	ip, r1, ip, lsl r0
   1bef0:	ldrb	r3, [r7, #2]
   1bef4:	cmp	r3, #66	; 0x42
   1bef8:	movne	r7, #1
   1befc:	moveq	r7, #3
   1bf00:	mov	r1, #1024	; 0x400
   1bf04:	b	1be08 <__assert_fail@plt+0xa704>
   1bf08:	mov	r7, #1
   1bf0c:	mov	r1, #1024	; 0x400
   1bf10:	b	1be08 <__assert_fail@plt+0xa704>
   1bf14:	mov	r7, #1
   1bf18:	mov	r1, #1024	; 0x400
   1bf1c:	b	1be08 <__assert_fail@plt+0xa704>
   1bf20:	mov	r7, #2
   1bf24:	mov	r1, #1000	; 0x3e8
   1bf28:	b	1be08 <__assert_fail@plt+0xa704>
   1bf2c:	ldr	r3, [sp]
   1bf30:	ldr	ip, [sp, #4]
   1bf34:	lsl	r2, ip, #9
   1bf38:	orr	r2, r2, r3, lsr #23
   1bf3c:	lsl	r3, r3, #9
   1bf40:	mov	r0, #0
   1bf44:	mov	r1, r0
   1bf48:	lsr	r0, ip, #23
   1bf4c:	orrs	r1, r0, r1
   1bf50:	streq	r3, [sp]
   1bf54:	streq	r2, [sp, #4]
   1bf58:	moveq	r0, #0
   1bf5c:	beq	1c098 <__assert_fail@plt+0xa994>
   1bf60:	mvn	r2, #0
   1bf64:	mvn	r3, #0
   1bf68:	strd	r2, [sp]
   1bf6c:	mov	r0, #1
   1bf70:	b	1c098 <__assert_fail@plt+0xa994>
   1bf74:	ldr	r3, [sp]
   1bf78:	ldr	ip, [sp, #4]
   1bf7c:	lsl	r2, ip, #10
   1bf80:	orr	r2, r2, r3, lsr #22
   1bf84:	lsl	r3, r3, #10
   1bf88:	mov	r0, #0
   1bf8c:	mov	r1, r0
   1bf90:	lsr	r0, ip, #22
   1bf94:	orrs	r1, r0, r1
   1bf98:	streq	r3, [sp]
   1bf9c:	streq	r2, [sp, #4]
   1bfa0:	moveq	r0, #0
   1bfa4:	beq	1c098 <__assert_fail@plt+0xa994>
   1bfa8:	mvn	r2, #0
   1bfac:	mvn	r3, #0
   1bfb0:	strd	r2, [sp]
   1bfb4:	mov	r0, #1
   1bfb8:	b	1c098 <__assert_fail@plt+0xa994>
   1bfbc:	mov	r2, #6
   1bfc0:	mov	r0, sp
   1bfc4:	bl	1ba54 <__assert_fail@plt+0xa350>
   1bfc8:	b	1c098 <__assert_fail@plt+0xa994>
   1bfcc:	mov	r2, #3
   1bfd0:	mov	r0, sp
   1bfd4:	bl	1ba54 <__assert_fail@plt+0xa350>
   1bfd8:	b	1c098 <__assert_fail@plt+0xa994>
   1bfdc:	mov	r2, #1
   1bfe0:	mov	r0, sp
   1bfe4:	bl	1ba54 <__assert_fail@plt+0xa350>
   1bfe8:	b	1c098 <__assert_fail@plt+0xa994>
   1bfec:	mov	r2, #2
   1bff0:	mov	r0, sp
   1bff4:	bl	1ba54 <__assert_fail@plt+0xa350>
   1bff8:	b	1c098 <__assert_fail@plt+0xa994>
   1bffc:	mov	r2, #5
   1c000:	mov	r0, sp
   1c004:	bl	1ba54 <__assert_fail@plt+0xa350>
   1c008:	b	1c098 <__assert_fail@plt+0xa994>
   1c00c:	mov	r2, #4
   1c010:	mov	r0, sp
   1c014:	bl	1ba54 <__assert_fail@plt+0xa350>
   1c018:	b	1c098 <__assert_fail@plt+0xa994>
   1c01c:	ldr	r3, [sp]
   1c020:	ldr	r2, [sp, #4]
   1c024:	adds	r3, r3, r3
   1c028:	adc	r2, r2, r2
   1c02c:	mov	r1, #0
   1c030:	mov	r0, r1
   1c034:	ldr	r1, [sp, #4]
   1c038:	lsr	r1, r1, #31
   1c03c:	orrs	r1, r1, r0
   1c040:	streq	r3, [sp]
   1c044:	streq	r2, [sp, #4]
   1c048:	moveq	r0, #0
   1c04c:	beq	1c098 <__assert_fail@plt+0xa994>
   1c050:	mvn	r2, #0
   1c054:	mvn	r3, #0
   1c058:	strd	r2, [sp]
   1c05c:	mov	r0, #1
   1c060:	b	1c098 <__assert_fail@plt+0xa994>
   1c064:	mov	r2, #8
   1c068:	mov	r0, sp
   1c06c:	bl	1ba54 <__assert_fail@plt+0xa350>
   1c070:	b	1c098 <__assert_fail@plt+0xa994>
   1c074:	mov	r2, #7
   1c078:	mov	r0, sp
   1c07c:	bl	1ba54 <__assert_fail@plt+0xa350>
   1c080:	b	1c098 <__assert_fail@plt+0xa994>
   1c084:	ldrd	r2, [sp]
   1c088:	strd	r2, [r9]
   1c08c:	orr	r4, r4, #2
   1c090:	b	1bda0 <__assert_fail@plt+0xa69c>
   1c094:	mov	r0, #0
   1c098:	orr	r4, r4, r0
   1c09c:	ldr	r3, [r6]
   1c0a0:	add	r2, r3, r7
   1c0a4:	str	r2, [r6]
   1c0a8:	ldrb	r3, [r3, r7]
   1c0ac:	cmp	r3, #0
   1c0b0:	orrne	r4, r4, #2
   1c0b4:	b	1bd98 <__assert_fail@plt+0xa694>
   1c0b8:	mov	r4, #4
   1c0bc:	b	1bda0 <__assert_fail@plt+0xa69c>
   1c0c0:	mov	r4, #4
   1c0c4:	b	1bda0 <__assert_fail@plt+0xa69c>
   1c0c8:	strd	r4, [sp, #-16]!
   1c0cc:	str	r6, [sp, #8]
   1c0d0:	str	lr, [sp, #12]
   1c0d4:	cmp	r1, #0
   1c0d8:	cmpne	r0, #0
   1c0dc:	beq	1c118 <__assert_fail@plt+0xaa14>
   1c0e0:	mov	r2, r0
   1c0e4:	mov	r3, r1
   1c0e8:	umull	r4, r5, r0, r1
   1c0ec:	adds	r1, r5, #0
   1c0f0:	movne	r1, #1
   1c0f4:	cmp	r4, #0
   1c0f8:	movlt	r1, #1
   1c0fc:	cmp	r1, #0
   1c100:	beq	1c120 <__assert_fail@plt+0xaa1c>
   1c104:	bl	1156c <__errno_location@plt>
   1c108:	mov	r3, #12
   1c10c:	str	r3, [r0]
   1c110:	mov	r0, #0
   1c114:	b	1c12c <__assert_fail@plt+0xaa28>
   1c118:	mov	r3, #1
   1c11c:	mov	r2, r3
   1c120:	mov	r1, r3
   1c124:	mov	r0, r2
   1c128:	bl	112e4 <calloc@plt>
   1c12c:	ldrd	r4, [sp]
   1c130:	ldr	r6, [sp, #8]
   1c134:	add	sp, sp, #12
   1c138:	pop	{pc}		; (ldr pc, [sp], #4)
   1c13c:	str	r4, [sp, #-8]!
   1c140:	str	lr, [sp, #4]
   1c144:	cmp	r0, #0
   1c148:	beq	1c164 <__assert_fail@plt+0xaa60>
   1c14c:	bge	1c168 <__assert_fail@plt+0xaa64>
   1c150:	bl	1156c <__errno_location@plt>
   1c154:	mov	r3, #12
   1c158:	str	r3, [r0]
   1c15c:	mov	r0, #0
   1c160:	b	1c16c <__assert_fail@plt+0xaa68>
   1c164:	mov	r0, #1
   1c168:	bl	114d0 <malloc@plt>
   1c16c:	ldr	r4, [sp]
   1c170:	add	sp, sp, #4
   1c174:	pop	{pc}		; (ldr pc, [sp], #4)
   1c178:	str	r4, [sp, #-8]!
   1c17c:	str	lr, [sp, #4]
   1c180:	cmp	r0, #0
   1c184:	beq	1c1a8 <__assert_fail@plt+0xaaa4>
   1c188:	cmp	r1, #0
   1c18c:	beq	1c1b4 <__assert_fail@plt+0xaab0>
   1c190:	cmp	r1, #0
   1c194:	blt	1c1c0 <__assert_fail@plt+0xaabc>
   1c198:	bl	113d4 <realloc@plt>
   1c19c:	ldr	r4, [sp]
   1c1a0:	add	sp, sp, #4
   1c1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1a8:	mov	r0, r1
   1c1ac:	bl	1c13c <__assert_fail@plt+0xaa38>
   1c1b0:	b	1c19c <__assert_fail@plt+0xaa98>
   1c1b4:	bl	15784 <__assert_fail@plt+0x4080>
   1c1b8:	mov	r0, #0
   1c1bc:	b	1c19c <__assert_fail@plt+0xaa98>
   1c1c0:	bl	1156c <__errno_location@plt>
   1c1c4:	mov	r3, #12
   1c1c8:	str	r3, [r0]
   1c1cc:	mov	r0, #0
   1c1d0:	b	1c19c <__assert_fail@plt+0xaa98>
   1c1d4:	cmp	r1, #2
   1c1d8:	bls	1c208 <__assert_fail@plt+0xab04>
   1c1dc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1c1e0:	strd	r6, [sp, #8]
   1c1e4:	strd	r8, [sp, #16]
   1c1e8:	str	lr, [sp, #24]
   1c1ec:	mov	r7, #1
   1c1f0:	mov	ip, r7
   1c1f4:	mov	lr, #0
   1c1f8:	mvn	r4, #0
   1c1fc:	mov	r3, r7
   1c200:	mov	r8, r7
   1c204:	b	1c23c <__assert_fail@plt+0xab38>
   1c208:	mov	r3, #1
   1c20c:	str	r3, [r2]
   1c210:	sub	r0, r1, #1
   1c214:	bx	lr
   1c218:	cmp	r6, r5
   1c21c:	beq	1c260 <__assert_fail@plt+0xab5c>
   1c220:	mov	r4, lr
   1c224:	add	lr, lr, #1
   1c228:	mov	r7, r8
   1c22c:	mov	ip, r8
   1c230:	add	r3, ip, lr
   1c234:	cmp	r3, r1
   1c238:	bcs	1c274 <__assert_fail@plt+0xab70>
   1c23c:	ldrb	r6, [r0, r3]
   1c240:	add	r5, r0, ip
   1c244:	ldrb	r5, [r5, r4]
   1c248:	cmp	r6, r5
   1c24c:	bcs	1c218 <__assert_fail@plt+0xab14>
   1c250:	sub	r7, r3, r4
   1c254:	mov	lr, r3
   1c258:	mov	ip, #1
   1c25c:	b	1c230 <__assert_fail@plt+0xab2c>
   1c260:	cmp	ip, r7
   1c264:	addne	ip, ip, #1
   1c268:	addeq	lr, lr, r7
   1c26c:	moveq	ip, #1
   1c270:	b	1c230 <__assert_fail@plt+0xab2c>
   1c274:	str	r7, [r2]
   1c278:	mov	r8, #1
   1c27c:	mov	ip, r8
   1c280:	mov	lr, #0
   1c284:	mvn	r7, #0
   1c288:	mov	r3, r8
   1c28c:	mov	r9, r8
   1c290:	b	1c2b8 <__assert_fail@plt+0xabb4>
   1c294:	cmp	r6, r5
   1c298:	beq	1c2dc <__assert_fail@plt+0xabd8>
   1c29c:	mov	r7, lr
   1c2a0:	add	lr, lr, #1
   1c2a4:	mov	r8, r9
   1c2a8:	mov	ip, r9
   1c2ac:	add	r3, ip, lr
   1c2b0:	cmp	r3, r1
   1c2b4:	bcs	1c2f0 <__assert_fail@plt+0xabec>
   1c2b8:	ldrb	r6, [r0, r3]
   1c2bc:	add	r5, r0, ip
   1c2c0:	ldrb	r5, [r5, r7]
   1c2c4:	cmp	r6, r5
   1c2c8:	bls	1c294 <__assert_fail@plt+0xab90>
   1c2cc:	sub	r8, r3, r7
   1c2d0:	mov	lr, r3
   1c2d4:	mov	ip, #1
   1c2d8:	b	1c2ac <__assert_fail@plt+0xaba8>
   1c2dc:	cmp	ip, r8
   1c2e0:	addne	ip, ip, #1
   1c2e4:	addeq	lr, lr, r8
   1c2e8:	moveq	ip, #1
   1c2ec:	b	1c2ac <__assert_fail@plt+0xaba8>
   1c2f0:	add	r7, r7, #1
   1c2f4:	add	r0, r4, #1
   1c2f8:	cmp	r7, r0
   1c2fc:	strcs	r8, [r2]
   1c300:	movcs	r0, r7
   1c304:	ldrd	r4, [sp]
   1c308:	ldrd	r6, [sp, #8]
   1c30c:	ldrd	r8, [sp, #16]
   1c310:	add	sp, sp, #24
   1c314:	pop	{pc}		; (ldr pc, [sp], #4)
   1c318:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c31c:	strd	r6, [sp, #8]
   1c320:	strd	r8, [sp, #16]
   1c324:	strd	sl, [sp, #24]
   1c328:	str	lr, [sp, #32]
   1c32c:	sub	sp, sp, #1072	; 0x430
   1c330:	sub	sp, sp, #4
   1c334:	mov	r5, r0
   1c338:	mov	r6, r1
   1c33c:	mov	r0, r2
   1c340:	str	r2, [sp]
   1c344:	mov	r4, r3
   1c348:	add	r2, sp, #1056	; 0x420
   1c34c:	add	r2, r2, #12
   1c350:	mov	r1, r3
   1c354:	bl	1c1d4 <__assert_fail@plt+0xaad0>
   1c358:	mov	r7, r0
   1c35c:	add	r3, sp, #40	; 0x28
   1c360:	add	r2, sp, #48	; 0x30
   1c364:	add	r2, r2, #1016	; 0x3f8
   1c368:	str	r4, [r3, #4]!
   1c36c:	cmp	r3, r2
   1c370:	bne	1c368 <__assert_fail@plt+0xac64>
   1c374:	cmp	r4, #0
   1c378:	beq	1c6ec <__assert_fail@plt+0xafe8>
   1c37c:	ldr	r3, [sp]
   1c380:	sub	r2, r3, #1
   1c384:	mov	fp, r3
   1c388:	sub	r1, r4, #1
   1c38c:	str	r1, [sp, #8]
   1c390:	add	r0, r1, r3
   1c394:	ldrb	r1, [r2, #1]!
   1c398:	add	r3, sp, #1072	; 0x430
   1c39c:	add	r1, r3, r1, lsl #2
   1c3a0:	mvn	r3, r2
   1c3a4:	add	r3, r3, r4
   1c3a8:	add	r3, r3, fp
   1c3ac:	str	r3, [r1, #-1028]	; 0xfffffbfc
   1c3b0:	cmp	r2, r0
   1c3b4:	bne	1c394 <__assert_fail@plt+0xac90>
   1c3b8:	ldr	r3, [sp, #1068]	; 0x42c
   1c3bc:	str	r3, [sp, #4]
   1c3c0:	mov	r2, r7
   1c3c4:	ldr	r0, [sp]
   1c3c8:	add	r1, r0, r3
   1c3cc:	bl	11398 <memcmp@plt>
   1c3d0:	cmp	r0, #0
   1c3d4:	beq	1c51c <__assert_fail@plt+0xae18>
   1c3d8:	sub	r3, r4, r7
   1c3dc:	cmp	r3, r7
   1c3e0:	movcc	r3, r7
   1c3e4:	add	r3, r3, #1
   1c3e8:	str	r3, [sp, #12]
   1c3ec:	mov	r8, #0
   1c3f0:	sub	r3, r4, #1
   1c3f4:	str	r3, [sp, #4]
   1c3f8:	sub	r1, r7, #1
   1c3fc:	str	r1, [sp, #8]
   1c400:	ldr	r2, [sp]
   1c404:	add	r1, r2, r1
   1c408:	str	r1, [sp, #16]
   1c40c:	mov	fp, r2
   1c410:	add	r1, r2, r7
   1c414:	str	r1, [sp]
   1c418:	sub	r9, r4, #2
   1c41c:	add	r9, r9, r2
   1c420:	rsb	sl, r2, #1
   1c424:	mov	r0, r6
   1c428:	mov	r6, r4
   1c42c:	mov	r4, r7
   1c430:	b	1c5fc <__assert_fail@plt+0xaef8>
   1c434:	cmp	sl, fp
   1c438:	movcs	ip, sl
   1c43c:	movcc	ip, fp
   1c440:	ldr	r3, [sp, #8]
   1c444:	cmp	ip, r3
   1c448:	bcs	1c56c <__assert_fail@plt+0xae68>
   1c44c:	ldr	r0, [sp]
   1c450:	add	r3, r0, ip
   1c454:	add	r1, r8, ip
   1c458:	add	r2, r5, r1
   1c45c:	ldrb	r0, [r0, ip]
   1c460:	ldrb	r1, [r5, r1]
   1c464:	cmp	r0, r1
   1c468:	bne	1c490 <__assert_fail@plt+0xad8c>
   1c46c:	ldr	r1, [sp, #12]
   1c470:	rsb	lr, r1, #1
   1c474:	add	ip, lr, r3
   1c478:	cmp	r3, r9
   1c47c:	beq	1c56c <__assert_fail@plt+0xae68>
   1c480:	ldrb	r0, [r3, #1]!
   1c484:	ldrb	r1, [r2, #1]!
   1c488:	cmp	r0, r1
   1c48c:	beq	1c474 <__assert_fail@plt+0xad70>
   1c490:	ldr	r3, [sp, #16]
   1c494:	add	r8, r3, r8
   1c498:	add	r8, ip, r8
   1c49c:	mov	sl, r6
   1c4a0:	mov	r0, r7
   1c4a4:	add	r7, r8, r4
   1c4a8:	sub	r2, r7, r0
   1c4ac:	mov	r1, #0
   1c4b0:	add	r0, r5, r0
   1c4b4:	bl	115cc <memchr@plt>
   1c4b8:	adds	r3, r7, #0
   1c4bc:	movne	r3, #1
   1c4c0:	cmp	r0, #0
   1c4c4:	moveq	r0, r3
   1c4c8:	movne	r0, #0
   1c4cc:	cmp	r0, #0
   1c4d0:	beq	1c710 <__assert_fail@plt+0xb00c>
   1c4d4:	add	r3, r5, r7
   1c4d8:	ldrb	r3, [r3, #-1]
   1c4dc:	add	r2, sp, #1072	; 0x430
   1c4e0:	add	r3, r2, r3, lsl #2
   1c4e4:	ldr	r6, [r3, #-1028]	; 0xfffffbfc
   1c4e8:	cmp	r6, #0
   1c4ec:	beq	1c434 <__assert_fail@plt+0xad30>
   1c4f0:	ldr	r3, [sp, #4]
   1c4f4:	cmp	sl, #0
   1c4f8:	cmpne	r3, r6
   1c4fc:	ldrhi	r6, [sp, #20]
   1c500:	add	r8, r8, r6
   1c504:	mov	sl, #0
   1c508:	b	1c4a0 <__assert_fail@plt+0xad9c>
   1c50c:	ldr	lr, [sp, #36]	; 0x24
   1c510:	b	1c5c8 <__assert_fail@plt+0xaec4>
   1c514:	add	r0, r5, r8
   1c518:	b	1c710 <__assert_fail@plt+0xb00c>
   1c51c:	mov	sl, #0
   1c520:	mov	r8, sl
   1c524:	sub	r2, r7, #1
   1c528:	str	r2, [sp, #24]
   1c52c:	str	r7, [sp, #36]	; 0x24
   1c530:	ldr	r1, [sp, #4]
   1c534:	sub	r1, r4, r1
   1c538:	str	r1, [sp, #20]
   1c53c:	ldr	r1, [sp]
   1c540:	add	r2, r1, r2
   1c544:	str	r2, [sp, #28]
   1c548:	str	r5, [sp, #32]
   1c54c:	rsb	r2, r7, #1
   1c550:	str	r2, [sp, #16]
   1c554:	sub	r9, r4, #2
   1c558:	add	r9, r9, fp
   1c55c:	str	fp, [sp, #12]
   1c560:	mov	fp, r7
   1c564:	mov	r0, r6
   1c568:	b	1c4a4 <__assert_fail@plt+0xada0>
   1c56c:	cmp	sl, fp
   1c570:	ldrcs	lr, [sp, #36]	; 0x24
   1c574:	bcs	1c5c8 <__assert_fail@plt+0xaec4>
   1c578:	ldr	r3, [sp, #24]
   1c57c:	add	r2, r8, r3
   1c580:	add	r3, r5, r2
   1c584:	ldr	r0, [sp, #28]
   1c588:	ldrb	r1, [r0]
   1c58c:	ldrb	r2, [r5, r2]
   1c590:	cmp	r1, r2
   1c594:	bne	1c50c <__assert_fail@plt+0xae08>
   1c598:	mov	r2, r0
   1c59c:	add	ip, r8, sl
   1c5a0:	add	ip, ip, r5
   1c5a4:	ldr	r1, [sp, #32]
   1c5a8:	add	r6, r1, r8
   1c5ac:	sub	lr, r3, r6
   1c5b0:	cmp	r3, ip
   1c5b4:	beq	1c5c8 <__assert_fail@plt+0xaec4>
   1c5b8:	ldrb	r0, [r2, #-1]!
   1c5bc:	ldrb	r1, [r3, #-1]!
   1c5c0:	cmp	r0, r1
   1c5c4:	beq	1c5ac <__assert_fail@plt+0xaea8>
   1c5c8:	add	sl, sl, #1
   1c5cc:	cmp	sl, lr
   1c5d0:	bhi	1c514 <__assert_fail@plt+0xae10>
   1c5d4:	ldr	r3, [sp, #4]
   1c5d8:	add	r8, r8, r3
   1c5dc:	ldr	sl, [sp, #20]
   1c5e0:	b	1c4a0 <__assert_fail@plt+0xad9c>
   1c5e4:	add	r0, r5, r8
   1c5e8:	b	1c710 <__assert_fail@plt+0xb00c>
   1c5ec:	rsb	r3, r4, #1
   1c5f0:	add	r8, r3, r8
   1c5f4:	add	r8, ip, r8
   1c5f8:	mov	r0, r7
   1c5fc:	add	r7, r8, r6
   1c600:	sub	r2, r7, r0
   1c604:	mov	r1, #0
   1c608:	add	r0, r5, r0
   1c60c:	bl	115cc <memchr@plt>
   1c610:	clz	r0, r0
   1c614:	lsr	r0, r0, #5
   1c618:	cmp	r7, #0
   1c61c:	moveq	r0, #0
   1c620:	cmp	r0, #0
   1c624:	beq	1c710 <__assert_fail@plt+0xb00c>
   1c628:	add	r3, r5, r7
   1c62c:	ldrb	r3, [r3, #-1]
   1c630:	add	r2, sp, #1072	; 0x430
   1c634:	add	r3, r2, r3, lsl #2
   1c638:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   1c63c:	cmp	r3, #0
   1c640:	addne	r8, r8, r3
   1c644:	bne	1c5f8 <__assert_fail@plt+0xaef4>
   1c648:	ldr	r3, [sp, #4]
   1c64c:	cmp	r4, r3
   1c650:	bcs	1c698 <__assert_fail@plt+0xaf94>
   1c654:	add	r3, r8, r4
   1c658:	add	r2, r5, r3
   1c65c:	ldr	r1, [sp]
   1c660:	ldrb	r1, [r1]
   1c664:	ldrb	r3, [r5, r3]
   1c668:	cmp	r1, r3
   1c66c:	movne	ip, r4
   1c670:	bne	1c5ec <__assert_fail@plt+0xaee8>
   1c674:	ldr	r3, [sp]
   1c678:	add	ip, sl, r3
   1c67c:	cmp	r3, r9
   1c680:	beq	1c698 <__assert_fail@plt+0xaf94>
   1c684:	ldrb	r0, [r3, #1]!
   1c688:	ldrb	r1, [r2, #1]!
   1c68c:	cmp	r0, r1
   1c690:	beq	1c678 <__assert_fail@plt+0xaf74>
   1c694:	b	1c5ec <__assert_fail@plt+0xaee8>
   1c698:	ldr	r3, [sp, #8]
   1c69c:	cmn	r3, #1
   1c6a0:	beq	1c5e4 <__assert_fail@plt+0xaee0>
   1c6a4:	ldr	r3, [sp, #8]
   1c6a8:	add	r3, r8, r3
   1c6ac:	add	r2, r5, r3
   1c6b0:	ldr	r0, [sp, #16]
   1c6b4:	ldrb	r1, [r0]
   1c6b8:	ldrb	r3, [r5, r3]
   1c6bc:	cmp	r1, r3
   1c6c0:	bne	1c6e0 <__assert_fail@plt+0xafdc>
   1c6c4:	mov	r3, r0
   1c6c8:	cmp	r3, fp
   1c6cc:	beq	1c5e4 <__assert_fail@plt+0xaee0>
   1c6d0:	ldrb	r0, [r3, #-1]!
   1c6d4:	ldrb	r1, [r2, #-1]!
   1c6d8:	cmp	r0, r1
   1c6dc:	beq	1c6c8 <__assert_fail@plt+0xafc4>
   1c6e0:	ldr	r3, [sp, #12]
   1c6e4:	add	r8, r8, r3
   1c6e8:	b	1c5f8 <__assert_fail@plt+0xaef4>
   1c6ec:	mov	r2, r7
   1c6f0:	ldr	r1, [sp, #1068]	; 0x42c
   1c6f4:	ldr	r3, [sp]
   1c6f8:	add	r1, r3, r1
   1c6fc:	mov	r0, r3
   1c700:	bl	11398 <memcmp@plt>
   1c704:	cmp	r0, #0
   1c708:	moveq	r0, #0
   1c70c:	bne	1c3d8 <__assert_fail@plt+0xacd4>
   1c710:	add	sp, sp, #1072	; 0x430
   1c714:	add	sp, sp, #4
   1c718:	ldrd	r4, [sp]
   1c71c:	ldrd	r6, [sp, #8]
   1c720:	ldrd	r8, [sp, #16]
   1c724:	ldrd	sl, [sp, #24]
   1c728:	add	sp, sp, #32
   1c72c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c730:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c734:	strd	r6, [sp, #8]
   1c738:	strd	r8, [sp, #16]
   1c73c:	strd	sl, [sp, #24]
   1c740:	str	lr, [sp, #32]
   1c744:	sub	sp, sp, #44	; 0x2c
   1c748:	ldrb	r3, [r0]
   1c74c:	cmp	r3, #0
   1c750:	beq	1c818 <__assert_fail@plt+0xb114>
   1c754:	ldrb	r2, [r1]
   1c758:	cmp	r2, #0
   1c75c:	beq	1c930 <__assert_fail@plt+0xb22c>
   1c760:	mov	r7, r0
   1c764:	add	ip, r1, #1
   1c768:	mov	lr, #1
   1c76c:	mov	r6, ip
   1c770:	cmp	r3, r2
   1c774:	movne	lr, #0
   1c778:	andeq	lr, lr, #1
   1c77c:	ldrb	r3, [r7, #1]!
   1c780:	cmp	r3, #0
   1c784:	beq	1c820 <__assert_fail@plt+0xb11c>
   1c788:	ldrb	r2, [ip], #1
   1c78c:	cmp	r2, #0
   1c790:	bne	1c76c <__assert_fail@plt+0xb068>
   1c794:	cmp	lr, #0
   1c798:	movne	r5, r0
   1c79c:	bne	1c7f8 <__assert_fail@plt+0xb0f4>
   1c7a0:	mov	r4, r0
   1c7a4:	sub	r8, r6, r1
   1c7a8:	ldrb	r1, [r1]
   1c7ac:	add	r0, r0, #1
   1c7b0:	bl	11548 <strchr@plt>
   1c7b4:	mov	r5, r0
   1c7b8:	cmp	r8, #1
   1c7bc:	cmpne	r0, #0
   1c7c0:	beq	1c7f8 <__assert_fail@plt+0xb0f4>
   1c7c4:	sub	r3, r6, r8
   1c7c8:	str	r3, [sp, #8]
   1c7cc:	add	r4, r4, r8
   1c7d0:	cmp	r4, r0
   1c7d4:	subcs	r4, r4, r0
   1c7d8:	movcc	r4, #1
   1c7dc:	cmp	r8, #31
   1c7e0:	bls	1c834 <__assert_fail@plt+0xb130>
   1c7e4:	mov	r3, r8
   1c7e8:	ldr	r2, [sp, #8]
   1c7ec:	mov	r1, r4
   1c7f0:	bl	1c318 <__assert_fail@plt+0xac14>
   1c7f4:	mov	r5, r0
   1c7f8:	mov	r0, r5
   1c7fc:	add	sp, sp, #44	; 0x2c
   1c800:	ldrd	r4, [sp]
   1c804:	ldrd	r6, [sp, #8]
   1c808:	ldrd	r8, [sp, #16]
   1c80c:	ldrd	sl, [sp, #24]
   1c810:	add	sp, sp, #32
   1c814:	pop	{pc}		; (ldr pc, [sp], #4)
   1c818:	mov	r6, r1
   1c81c:	mov	lr, #1
   1c820:	ldrb	r3, [r6]
   1c824:	cmp	r3, #0
   1c828:	movne	r5, #0
   1c82c:	beq	1c794 <__assert_fail@plt+0xb090>
   1c830:	b	1c7f8 <__assert_fail@plt+0xb0f4>
   1c834:	add	r2, sp, #36	; 0x24
   1c838:	mov	r1, r8
   1c83c:	ldr	r6, [sp, #8]
   1c840:	mov	r0, r6
   1c844:	bl	1c1d4 <__assert_fail@plt+0xaad0>
   1c848:	mov	r2, r0
   1c84c:	mov	r7, r0
   1c850:	ldr	r1, [sp, #36]	; 0x24
   1c854:	str	r1, [sp, #12]
   1c858:	add	r1, r6, r1
   1c85c:	mov	r0, r6
   1c860:	bl	11398 <memcmp@plt>
   1c864:	cmp	r0, #0
   1c868:	beq	1c8d8 <__assert_fail@plt+0xb1d4>
   1c86c:	sub	r3, r8, r7
   1c870:	cmp	r3, r7
   1c874:	movcc	r3, r7
   1c878:	add	r3, r3, #1
   1c87c:	str	r3, [sp, #16]
   1c880:	mov	r9, #0
   1c884:	mov	r3, r7
   1c888:	sub	r1, r7, #1
   1c88c:	str	r1, [sp, #12]
   1c890:	ldr	r2, [sp, #8]
   1c894:	add	r1, r2, r1
   1c898:	str	r1, [sp, #20]
   1c89c:	mov	fp, r2
   1c8a0:	add	r1, r2, r7
   1c8a4:	str	r1, [sp, #4]
   1c8a8:	rsb	r1, r7, #1
   1c8ac:	str	r1, [sp, #8]
   1c8b0:	sub	r6, r8, #1
   1c8b4:	add	r6, r6, r2
   1c8b8:	rsb	r7, r2, #1
   1c8bc:	mov	r0, r4
   1c8c0:	mov	r4, r3
   1c8c4:	b	1ca64 <__assert_fail@plt+0xb360>
   1c8c8:	ldr	lr, [sp, #28]
   1c8cc:	b	1c990 <__assert_fail@plt+0xb28c>
   1c8d0:	add	r5, r5, r9
   1c8d4:	b	1c7f8 <__assert_fail@plt+0xb0f4>
   1c8d8:	mov	fp, #0
   1c8dc:	mov	r9, fp
   1c8e0:	mov	sl, r7
   1c8e4:	sub	r2, r7, #1
   1c8e8:	str	r2, [sp, #16]
   1c8ec:	str	r7, [sp, #28]
   1c8f0:	ldr	r3, [sp, #12]
   1c8f4:	sub	r3, r8, r3
   1c8f8:	str	r3, [sp, #20]
   1c8fc:	ldr	r3, [sp, #8]
   1c900:	add	r2, r3, r2
   1c904:	str	r2, [sp, #24]
   1c908:	sub	r6, r8, #1
   1c90c:	add	r6, r6, r3
   1c910:	rsb	r7, r3, #1
   1c914:	mov	r0, r4
   1c918:	str	r8, [sp, #4]
   1c91c:	b	1c9c0 <__assert_fail@plt+0xb2bc>
   1c920:	mov	r5, #0
   1c924:	b	1c7f8 <__assert_fail@plt+0xb0f4>
   1c928:	mov	r5, #0
   1c92c:	b	1c7f8 <__assert_fail@plt+0xb0f4>
   1c930:	mov	r5, r0
   1c934:	b	1c7f8 <__assert_fail@plt+0xb0f4>
   1c938:	cmp	sl, fp
   1c93c:	ldrls	lr, [sp, #28]
   1c940:	bls	1c990 <__assert_fail@plt+0xb28c>
   1c944:	ldr	r3, [sp, #16]
   1c948:	add	r2, r9, r3
   1c94c:	add	r3, r5, r2
   1c950:	ldr	r0, [sp, #24]
   1c954:	ldrb	r1, [r0]
   1c958:	ldrb	r2, [r5, r2]
   1c95c:	cmp	r1, r2
   1c960:	bne	1c8c8 <__assert_fail@plt+0xb1c4>
   1c964:	mov	r2, r0
   1c968:	add	ip, fp, r9
   1c96c:	add	ip, ip, r5
   1c970:	add	r4, r5, r9
   1c974:	sub	lr, r3, r4
   1c978:	cmp	r3, ip
   1c97c:	beq	1c990 <__assert_fail@plt+0xb28c>
   1c980:	ldrb	r0, [r2, #-1]!
   1c984:	ldrb	r1, [r3, #-1]!
   1c988:	cmp	r0, r1
   1c98c:	beq	1c974 <__assert_fail@plt+0xb270>
   1c990:	add	fp, fp, #1
   1c994:	cmp	fp, lr
   1c998:	bhi	1c8d0 <__assert_fail@plt+0xb1cc>
   1c99c:	ldr	r3, [sp, #12]
   1c9a0:	add	r9, r9, r3
   1c9a4:	ldr	fp, [sp, #20]
   1c9a8:	b	1c9bc <__assert_fail@plt+0xb2b8>
   1c9ac:	rsb	r3, sl, #1
   1c9b0:	add	r9, r3, r9
   1c9b4:	add	r9, r9, r0
   1c9b8:	mov	fp, #0
   1c9bc:	mov	r0, r8
   1c9c0:	ldr	r3, [sp, #4]
   1c9c4:	add	r8, r3, r9
   1c9c8:	sub	r2, r8, r0
   1c9cc:	mov	r1, #0
   1c9d0:	add	r0, r5, r0
   1c9d4:	bl	115cc <memchr@plt>
   1c9d8:	adds	r3, r8, #0
   1c9dc:	movne	r3, #1
   1c9e0:	cmp	r0, #0
   1c9e4:	moveq	r0, r3
   1c9e8:	movne	r0, #0
   1c9ec:	cmp	r0, #0
   1c9f0:	beq	1c920 <__assert_fail@plt+0xb21c>
   1c9f4:	cmp	sl, fp
   1c9f8:	movcs	r0, sl
   1c9fc:	movcc	r0, fp
   1ca00:	ldr	r3, [sp, #4]
   1ca04:	cmp	r3, r0
   1ca08:	bls	1c938 <__assert_fail@plt+0xb234>
   1ca0c:	ldr	ip, [sp, #8]
   1ca10:	add	r3, ip, r0
   1ca14:	add	r1, r0, r9
   1ca18:	add	r2, r5, r1
   1ca1c:	ldrb	ip, [ip, r0]
   1ca20:	ldrb	r1, [r5, r1]
   1ca24:	cmp	ip, r1
   1ca28:	bne	1c9ac <__assert_fail@plt+0xb2a8>
   1ca2c:	add	r0, r7, r3
   1ca30:	cmp	r3, r6
   1ca34:	beq	1c938 <__assert_fail@plt+0xb234>
   1ca38:	ldrb	ip, [r3, #1]!
   1ca3c:	ldrb	r1, [r2, #1]!
   1ca40:	cmp	ip, r1
   1ca44:	beq	1ca2c <__assert_fail@plt+0xb328>
   1ca48:	b	1c9ac <__assert_fail@plt+0xb2a8>
   1ca4c:	add	r5, r5, r9
   1ca50:	b	1c7f8 <__assert_fail@plt+0xb0f4>
   1ca54:	ldr	r3, [sp, #8]
   1ca58:	add	r9, r3, r9
   1ca5c:	add	r9, ip, r9
   1ca60:	mov	r0, sl
   1ca64:	add	sl, r8, r9
   1ca68:	sub	r2, sl, r0
   1ca6c:	mov	r1, #0
   1ca70:	add	r0, r5, r0
   1ca74:	bl	115cc <memchr@plt>
   1ca78:	adds	r3, sl, #0
   1ca7c:	movne	r3, #1
   1ca80:	cmp	r0, #0
   1ca84:	moveq	r0, r3
   1ca88:	movne	r0, #0
   1ca8c:	cmp	r0, #0
   1ca90:	beq	1c928 <__assert_fail@plt+0xb224>
   1ca94:	cmp	r8, r4
   1ca98:	bls	1cae0 <__assert_fail@plt+0xb3dc>
   1ca9c:	add	r3, r4, r9
   1caa0:	add	r2, r5, r3
   1caa4:	ldr	r1, [sp, #4]
   1caa8:	ldrb	r1, [r1]
   1caac:	ldrb	r3, [r5, r3]
   1cab0:	cmp	r1, r3
   1cab4:	movne	ip, r4
   1cab8:	bne	1ca54 <__assert_fail@plt+0xb350>
   1cabc:	ldr	r3, [sp, #4]
   1cac0:	add	ip, r7, r3
   1cac4:	cmp	r3, r6
   1cac8:	beq	1cae0 <__assert_fail@plt+0xb3dc>
   1cacc:	ldrb	r0, [r3, #1]!
   1cad0:	ldrb	r1, [r2, #1]!
   1cad4:	cmp	r0, r1
   1cad8:	beq	1cac0 <__assert_fail@plt+0xb3bc>
   1cadc:	b	1ca54 <__assert_fail@plt+0xb350>
   1cae0:	ldr	r3, [sp, #12]
   1cae4:	cmn	r3, #1
   1cae8:	beq	1ca4c <__assert_fail@plt+0xb348>
   1caec:	ldr	r3, [sp, #12]
   1caf0:	add	r3, r9, r3
   1caf4:	add	r2, r5, r3
   1caf8:	ldr	r0, [sp, #20]
   1cafc:	ldrb	r1, [r0]
   1cb00:	ldrb	r3, [r5, r3]
   1cb04:	cmp	r1, r3
   1cb08:	bne	1cb28 <__assert_fail@plt+0xb424>
   1cb0c:	mov	r3, r0
   1cb10:	cmp	r3, fp
   1cb14:	beq	1ca4c <__assert_fail@plt+0xb348>
   1cb18:	ldrb	r0, [r3, #-1]!
   1cb1c:	ldrb	r1, [r2, #-1]!
   1cb20:	cmp	r0, r1
   1cb24:	beq	1cb10 <__assert_fail@plt+0xb40c>
   1cb28:	ldr	r3, [sp, #16]
   1cb2c:	add	r9, r9, r3
   1cb30:	b	1ca60 <__assert_fail@plt+0xb35c>
   1cb34:	str	r4, [sp, #-8]!
   1cb38:	str	lr, [sp, #4]
   1cb3c:	mov	r0, #1
   1cb40:	bl	12c34 <__assert_fail@plt+0x1530>
   1cb44:	ldr	r4, [sp]
   1cb48:	add	sp, sp, #4
   1cb4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cb54:	strd	r6, [sp, #8]
   1cb58:	strd	r8, [sp, #16]
   1cb5c:	strd	sl, [sp, #24]
   1cb60:	str	lr, [sp, #32]
   1cb64:	sub	sp, sp, #12
   1cb68:	str	r0, [sp]
   1cb6c:	mov	r5, r1
   1cb70:	mov	r6, r2
   1cb74:	str	r2, [sp, #4]
   1cb78:	mov	r9, r3
   1cb7c:	bl	1153c <strlen@plt>
   1cb80:	ldr	r4, [r5]
   1cb84:	cmp	r4, #0
   1cb88:	beq	1cc44 <__assert_fail@plt+0xb540>
   1cb8c:	mov	r8, r0
   1cb90:	mov	fp, #0
   1cb94:	mvn	sl, #0
   1cb98:	mov	r7, fp
   1cb9c:	b	1cbbc <__assert_fail@plt+0xb4b8>
   1cba0:	mov	sl, r7
   1cba4:	b	1cc24 <__assert_fail@plt+0xb520>
   1cba8:	add	r7, r7, #1
   1cbac:	ldr	r4, [r5, #4]!
   1cbb0:	add	r6, r6, r9
   1cbb4:	cmp	r4, #0
   1cbb8:	beq	1cc1c <__assert_fail@plt+0xb518>
   1cbbc:	mov	r2, r8
   1cbc0:	ldr	r1, [sp]
   1cbc4:	mov	r0, r4
   1cbc8:	bl	116d4 <strncmp@plt>
   1cbcc:	cmp	r0, #0
   1cbd0:	bne	1cba8 <__assert_fail@plt+0xb4a4>
   1cbd4:	mov	r0, r4
   1cbd8:	bl	1153c <strlen@plt>
   1cbdc:	cmp	r0, r8
   1cbe0:	beq	1cba0 <__assert_fail@plt+0xb49c>
   1cbe4:	cmn	sl, #1
   1cbe8:	moveq	sl, r7
   1cbec:	beq	1cba8 <__assert_fail@plt+0xb4a4>
   1cbf0:	ldr	r3, [sp, #4]
   1cbf4:	cmp	r3, #0
   1cbf8:	moveq	fp, #1
   1cbfc:	beq	1cba8 <__assert_fail@plt+0xb4a4>
   1cc00:	mov	r2, r9
   1cc04:	mov	r1, r6
   1cc08:	mla	r0, r9, sl, r3
   1cc0c:	bl	11398 <memcmp@plt>
   1cc10:	cmp	r0, #0
   1cc14:	movne	fp, #1
   1cc18:	b	1cba8 <__assert_fail@plt+0xb4a4>
   1cc1c:	cmp	fp, #0
   1cc20:	mvnne	sl, #1
   1cc24:	mov	r0, sl
   1cc28:	add	sp, sp, #12
   1cc2c:	ldrd	r4, [sp]
   1cc30:	ldrd	r6, [sp, #8]
   1cc34:	ldrd	r8, [sp, #16]
   1cc38:	ldrd	sl, [sp, #24]
   1cc3c:	add	sp, sp, #32
   1cc40:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc44:	mvn	sl, #0
   1cc48:	b	1cc24 <__assert_fail@plt+0xb520>
   1cc4c:	strd	r4, [sp, #-16]!
   1cc50:	str	r6, [sp, #8]
   1cc54:	str	lr, [sp, #12]
   1cc58:	mov	r6, r0
   1cc5c:	ldr	r0, [r1]
   1cc60:	cmp	r0, #0
   1cc64:	beq	1ccac <__assert_fail@plt+0xb5a8>
   1cc68:	mov	r4, r1
   1cc6c:	mov	r5, #0
   1cc70:	mov	r1, r6
   1cc74:	bl	11320 <strcmp@plt>
   1cc78:	cmp	r0, #0
   1cc7c:	beq	1cc98 <__assert_fail@plt+0xb594>
   1cc80:	add	r5, r5, #1
   1cc84:	ldr	r0, [r4, #4]!
   1cc88:	cmp	r0, #0
   1cc8c:	bne	1cc70 <__assert_fail@plt+0xb56c>
   1cc90:	mvn	r0, #0
   1cc94:	b	1cc9c <__assert_fail@plt+0xb598>
   1cc98:	mov	r0, r5
   1cc9c:	ldrd	r4, [sp]
   1cca0:	ldr	r6, [sp, #8]
   1cca4:	add	sp, sp, #12
   1cca8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccac:	mvn	r0, #0
   1ccb0:	b	1cc9c <__assert_fail@plt+0xb598>
   1ccb4:	strd	r4, [sp, #-16]!
   1ccb8:	str	r6, [sp, #8]
   1ccbc:	str	lr, [sp, #12]
   1ccc0:	sub	sp, sp, #8
   1ccc4:	mov	r6, r0
   1ccc8:	mov	r5, r1
   1cccc:	cmn	r2, #1
   1ccd0:	mov	r2, #5
   1ccd4:	movweq	r1, #63724	; 0xf8ec
   1ccd8:	movteq	r1, #1
   1ccdc:	movwne	r1, #63752	; 0xf908
   1cce0:	movtne	r1, #1
   1cce4:	mov	r0, #0
   1cce8:	bl	113bc <dcgettext@plt>
   1ccec:	mov	r4, r0
   1ccf0:	mov	r2, r5
   1ccf4:	mov	r1, #8
   1ccf8:	mov	r0, #0
   1ccfc:	bl	1a8d0 <__assert_fail@plt+0x91cc>
   1cd00:	mov	r5, r0
   1cd04:	mov	r1, r6
   1cd08:	mov	r0, #1
   1cd0c:	bl	1ac30 <__assert_fail@plt+0x952c>
   1cd10:	str	r0, [sp]
   1cd14:	mov	r3, r5
   1cd18:	mov	r2, r4
   1cd1c:	mov	r1, #0
   1cd20:	mov	r0, r1
   1cd24:	bl	11494 <error@plt>
   1cd28:	add	sp, sp, #8
   1cd2c:	ldrd	r4, [sp]
   1cd30:	ldr	r6, [sp, #8]
   1cd34:	add	sp, sp, #12
   1cd38:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cd40:	strd	r6, [sp, #8]
   1cd44:	strd	r8, [sp, #16]
   1cd48:	strd	sl, [sp, #24]
   1cd4c:	str	lr, [sp, #32]
   1cd50:	sub	sp, sp, #12
   1cd54:	mov	r7, r0
   1cd58:	mov	r4, r1
   1cd5c:	mov	r8, r2
   1cd60:	mov	r2, #5
   1cd64:	movw	r1, #63784	; 0xf928
   1cd68:	movt	r1, #1
   1cd6c:	mov	r0, #0
   1cd70:	bl	113bc <dcgettext@plt>
   1cd74:	movw	r3, #816	; 0x330
   1cd78:	movt	r3, #3
   1cd7c:	ldr	r1, [r3]
   1cd80:	bl	112f0 <fputs_unlocked@plt>
   1cd84:	ldr	r5, [r7]
   1cd88:	cmp	r5, #0
   1cd8c:	beq	1ce38 <__assert_fail@plt+0xb734>
   1cd90:	mov	r3, #0
   1cd94:	str	r3, [sp]
   1cd98:	mov	r6, r3
   1cd9c:	movw	sl, #816	; 0x330
   1cda0:	movt	sl, #3
   1cda4:	movw	fp, #63808	; 0xf940
   1cda8:	movt	fp, #1
   1cdac:	movw	r3, #63816	; 0xf948
   1cdb0:	movt	r3, #1
   1cdb4:	str	r3, [sp, #4]
   1cdb8:	b	1cdf4 <__assert_fail@plt+0xb6f0>
   1cdbc:	ldr	r9, [sl]
   1cdc0:	mov	r0, r5
   1cdc4:	bl	1ac4c <__assert_fail@plt+0x9548>
   1cdc8:	mov	r3, r0
   1cdcc:	mov	r2, fp
   1cdd0:	mov	r1, #1
   1cdd4:	mov	r0, r9
   1cdd8:	bl	115c0 <__fprintf_chk@plt>
   1cddc:	str	r4, [sp]
   1cde0:	add	r6, r6, #1
   1cde4:	ldr	r5, [r7, #4]!
   1cde8:	add	r4, r4, r8
   1cdec:	cmp	r5, #0
   1cdf0:	beq	1ce38 <__assert_fail@plt+0xb734>
   1cdf4:	cmp	r6, #0
   1cdf8:	beq	1cdbc <__assert_fail@plt+0xb6b8>
   1cdfc:	mov	r2, r8
   1ce00:	mov	r1, r4
   1ce04:	ldr	r0, [sp]
   1ce08:	bl	11398 <memcmp@plt>
   1ce0c:	cmp	r0, #0
   1ce10:	bne	1cdbc <__assert_fail@plt+0xb6b8>
   1ce14:	ldr	r9, [sl]
   1ce18:	mov	r0, r5
   1ce1c:	bl	1ac4c <__assert_fail@plt+0x9548>
   1ce20:	mov	r3, r0
   1ce24:	ldr	r2, [sp, #4]
   1ce28:	mov	r1, #1
   1ce2c:	mov	r0, r9
   1ce30:	bl	115c0 <__fprintf_chk@plt>
   1ce34:	b	1cde0 <__assert_fail@plt+0xb6dc>
   1ce38:	movw	r3, #816	; 0x330
   1ce3c:	movt	r3, #3
   1ce40:	ldr	r0, [r3]
   1ce44:	ldr	r3, [r0, #20]
   1ce48:	ldr	r2, [r0, #24]
   1ce4c:	cmp	r3, r2
   1ce50:	addcc	r2, r3, #1
   1ce54:	strcc	r2, [r0, #20]
   1ce58:	movcc	r2, #10
   1ce5c:	strbcc	r2, [r3]
   1ce60:	bcs	1ce80 <__assert_fail@plt+0xb77c>
   1ce64:	add	sp, sp, #12
   1ce68:	ldrd	r4, [sp]
   1ce6c:	ldrd	r6, [sp, #8]
   1ce70:	ldrd	r8, [sp, #16]
   1ce74:	ldrd	sl, [sp, #24]
   1ce78:	add	sp, sp, #32
   1ce7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce80:	mov	r1, #10
   1ce84:	bl	11608 <__overflow@plt>
   1ce88:	b	1ce64 <__assert_fail@plt+0xb760>
   1ce8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ce90:	strd	r6, [sp, #8]
   1ce94:	str	r8, [sp, #16]
   1ce98:	str	lr, [sp, #20]
   1ce9c:	mov	r7, r0
   1cea0:	mov	r5, r1
   1cea4:	mov	r4, r2
   1cea8:	mov	r6, r3
   1ceac:	ldrb	r3, [sp, #32]
   1ceb0:	cmp	r3, #0
   1ceb4:	beq	1cee8 <__assert_fail@plt+0xb7e4>
   1ceb8:	ldr	r3, [sp, #24]
   1cebc:	mov	r2, r6
   1cec0:	mov	r1, r4
   1cec4:	mov	r0, r5
   1cec8:	bl	1cb50 <__assert_fail@plt+0xb44c>
   1cecc:	cmp	r0, #0
   1ced0:	blt	1cef8 <__assert_fail@plt+0xb7f4>
   1ced4:	ldrd	r4, [sp]
   1ced8:	ldrd	r6, [sp, #8]
   1cedc:	ldr	r8, [sp, #16]
   1cee0:	add	sp, sp, #20
   1cee4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cee8:	mov	r1, r2
   1ceec:	mov	r0, r5
   1cef0:	bl	1cc4c <__assert_fail@plt+0xb548>
   1cef4:	b	1cecc <__assert_fail@plt+0xb7c8>
   1cef8:	mov	r2, r0
   1cefc:	mov	r1, r5
   1cf00:	mov	r0, r7
   1cf04:	bl	1ccb4 <__assert_fail@plt+0xb5b0>
   1cf08:	ldr	r2, [sp, #24]
   1cf0c:	mov	r1, r6
   1cf10:	mov	r0, r4
   1cf14:	bl	1cd3c <__assert_fail@plt+0xb638>
   1cf18:	ldr	r3, [sp, #28]
   1cf1c:	blx	r3
   1cf20:	mvn	r0, #0
   1cf24:	b	1ced4 <__assert_fail@plt+0xb7d0>
   1cf28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cf2c:	strd	r6, [sp, #8]
   1cf30:	str	r8, [sp, #16]
   1cf34:	str	lr, [sp, #20]
   1cf38:	ldr	r7, [r1]
   1cf3c:	cmp	r7, #0
   1cf40:	beq	1cf7c <__assert_fail@plt+0xb878>
   1cf44:	mov	r6, r3
   1cf48:	mov	r8, r0
   1cf4c:	mov	r4, r2
   1cf50:	mov	r5, r1
   1cf54:	mov	r2, r6
   1cf58:	mov	r1, r4
   1cf5c:	mov	r0, r8
   1cf60:	bl	11398 <memcmp@plt>
   1cf64:	cmp	r0, #0
   1cf68:	beq	1cf7c <__assert_fail@plt+0xb878>
   1cf6c:	ldr	r7, [r5, #4]!
   1cf70:	add	r4, r4, r6
   1cf74:	cmp	r7, #0
   1cf78:	bne	1cf54 <__assert_fail@plt+0xb850>
   1cf7c:	mov	r0, r7
   1cf80:	ldrd	r4, [sp]
   1cf84:	ldrd	r6, [sp, #8]
   1cf88:	ldr	r8, [sp, #16]
   1cf8c:	add	sp, sp, #20
   1cf90:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf94:	ldrb	r3, [r0]
   1cf98:	cmp	r3, #47	; 0x2f
   1cf9c:	bne	1cfac <__assert_fail@plt+0xb8a8>
   1cfa0:	ldrb	r3, [r0, #1]!
   1cfa4:	cmp	r3, #47	; 0x2f
   1cfa8:	beq	1cfa0 <__assert_fail@plt+0xb89c>
   1cfac:	ldrb	r2, [r0]
   1cfb0:	cmp	r2, #0
   1cfb4:	bxeq	lr
   1cfb8:	push	{lr}		; (str lr, [sp, #-4]!)
   1cfbc:	mov	r1, r0
   1cfc0:	mov	r3, #0
   1cfc4:	mov	lr, #1
   1cfc8:	mov	ip, r3
   1cfcc:	b	1cfe8 <__assert_fail@plt+0xb8e4>
   1cfd0:	cmp	r3, #0
   1cfd4:	movne	r0, r1
   1cfd8:	movne	r3, ip
   1cfdc:	ldrb	r2, [r1, #1]!
   1cfe0:	cmp	r2, #0
   1cfe4:	beq	1cff8 <__assert_fail@plt+0xb8f4>
   1cfe8:	cmp	r2, #47	; 0x2f
   1cfec:	moveq	r3, lr
   1cff0:	bne	1cfd0 <__assert_fail@plt+0xb8cc>
   1cff4:	b	1cfdc <__assert_fail@plt+0xb8d8>
   1cff8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cffc:	str	r4, [sp, #-8]!
   1d000:	str	lr, [sp, #4]
   1d004:	mov	r4, r0
   1d008:	bl	1153c <strlen@plt>
   1d00c:	cmp	r0, #1
   1d010:	bls	1d030 <__assert_fail@plt+0xb92c>
   1d014:	add	r3, r4, r0
   1d018:	ldrb	r3, [r3, #-1]
   1d01c:	cmp	r3, #47	; 0x2f
   1d020:	subeq	r0, r0, #2
   1d024:	addeq	r3, r4, r0
   1d028:	rsbeq	r1, r4, #1
   1d02c:	beq	1d03c <__assert_fail@plt+0xb938>
   1d030:	ldr	r4, [sp]
   1d034:	add	sp, sp, #4
   1d038:	pop	{pc}		; (ldr pc, [sp], #4)
   1d03c:	add	r0, r1, r3
   1d040:	cmp	r3, r4
   1d044:	beq	1d030 <__assert_fail@plt+0xb92c>
   1d048:	ldrb	r2, [r3], #-1
   1d04c:	cmp	r2, #47	; 0x2f
   1d050:	bne	1d030 <__assert_fail@plt+0xb92c>
   1d054:	b	1d03c <__assert_fail@plt+0xb938>
   1d058:	ldr	r0, [r0]
   1d05c:	cmp	r0, #0
   1d060:	bxlt	lr
   1d064:	str	r4, [sp, #-8]!
   1d068:	str	lr, [sp, #4]
   1d06c:	bl	116ec <close@plt>
   1d070:	cmp	r0, #0
   1d074:	bne	1d084 <__assert_fail@plt+0xb980>
   1d078:	ldr	r4, [sp]
   1d07c:	add	sp, sp, #4
   1d080:	pop	{pc}		; (ldr pc, [sp], #4)
   1d084:	movw	r3, #63824	; 0xf950
   1d088:	movt	r3, #1
   1d08c:	mov	r2, #64	; 0x40
   1d090:	movw	r1, #63848	; 0xf968
   1d094:	movt	r1, #1
   1d098:	movw	r0, #63868	; 0xf97c
   1d09c:	movt	r0, #1
   1d0a0:	bl	11704 <__assert_fail@plt>
   1d0a4:	strd	r4, [sp, #-16]!
   1d0a8:	str	r6, [sp, #8]
   1d0ac:	str	lr, [sp, #12]
   1d0b0:	mov	r4, r0
   1d0b4:	mov	r2, #18688	; 0x4900
   1d0b8:	ldr	r0, [r0]
   1d0bc:	bl	11554 <openat64@plt>
   1d0c0:	subs	r5, r0, #0
   1d0c4:	blt	1d0e8 <__assert_fail@plt+0xb9e4>
   1d0c8:	mov	r0, r4
   1d0cc:	bl	1d058 <__assert_fail@plt+0xb954>
   1d0d0:	str	r5, [r4]
   1d0d4:	mov	r0, #0
   1d0d8:	ldrd	r4, [sp]
   1d0dc:	ldr	r6, [sp, #8]
   1d0e0:	add	sp, sp, #12
   1d0e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0e8:	mvn	r0, #0
   1d0ec:	b	1d0d8 <__assert_fail@plt+0xb9d4>
   1d0f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d0f4:	strd	r6, [sp, #8]
   1d0f8:	strd	r8, [sp, #16]
   1d0fc:	str	sl, [sp, #24]
   1d100:	str	lr, [sp, #28]
   1d104:	sub	sp, sp, #8
   1d108:	mov	r6, r0
   1d10c:	bl	11404 <chdir@plt>
   1d110:	subs	r4, r0, #0
   1d114:	beq	1d12c <__assert_fail@plt+0xba28>
   1d118:	bl	1156c <__errno_location@plt>
   1d11c:	mov	sl, r0
   1d120:	ldr	r3, [r0]
   1d124:	cmp	r3, #36	; 0x24
   1d128:	beq	1d14c <__assert_fail@plt+0xba48>
   1d12c:	mov	r0, r4
   1d130:	add	sp, sp, #8
   1d134:	ldrd	r4, [sp]
   1d138:	ldrd	r6, [sp, #8]
   1d13c:	ldrd	r8, [sp, #16]
   1d140:	ldr	sl, [sp, #24]
   1d144:	add	sp, sp, #28
   1d148:	pop	{pc}		; (ldr pc, [sp], #4)
   1d14c:	mov	r0, r6
   1d150:	bl	1153c <strlen@plt>
   1d154:	mvn	r3, #99	; 0x63
   1d158:	str	r3, [sp, #4]
   1d15c:	subs	r7, r0, #0
   1d160:	beq	1d270 <__assert_fail@plt+0xbb6c>
   1d164:	cmp	r7, #4096	; 0x1000
   1d168:	bcc	1d28c <__assert_fail@plt+0xbb88>
   1d16c:	movw	r1, #61912	; 0xf1d8
   1d170:	movt	r1, #1
   1d174:	mov	r0, r6
   1d178:	bl	116f8 <strspn@plt>
   1d17c:	mov	r5, r0
   1d180:	cmp	r0, #2
   1d184:	beq	1d2a8 <__assert_fail@plt+0xbba4>
   1d188:	cmp	r0, #0
   1d18c:	moveq	r5, r6
   1d190:	bne	1d30c <__assert_fail@plt+0xbc08>
   1d194:	ldrb	r3, [r5]
   1d198:	cmp	r3, #47	; 0x2f
   1d19c:	beq	1d32c <__assert_fail@plt+0xbc28>
   1d1a0:	add	r6, r6, r7
   1d1a4:	cmp	r5, r6
   1d1a8:	bhi	1d348 <__assert_fail@plt+0xbc44>
   1d1ac:	sub	r3, r6, r5
   1d1b0:	cmp	r3, #4096	; 0x1000
   1d1b4:	blt	1d22c <__assert_fail@plt+0xbb28>
   1d1b8:	mov	r9, #4096	; 0x1000
   1d1bc:	mov	r7, #47	; 0x2f
   1d1c0:	movw	r8, #61912	; 0xf1d8
   1d1c4:	movt	r8, #1
   1d1c8:	mov	r2, r9
   1d1cc:	mov	r1, r7
   1d1d0:	mov	r0, r5
   1d1d4:	bl	11560 <memrchr@plt>
   1d1d8:	subs	r4, r0, #0
   1d1dc:	beq	1d364 <__assert_fail@plt+0xbc60>
   1d1e0:	mov	r3, #0
   1d1e4:	strb	r3, [r4]
   1d1e8:	sub	r3, r4, r5
   1d1ec:	cmp	r3, #4096	; 0x1000
   1d1f0:	bge	1d374 <__assert_fail@plt+0xbc70>
   1d1f4:	mov	r1, r5
   1d1f8:	add	r0, sp, #4
   1d1fc:	bl	1d0a4 <__assert_fail@plt+0xb9a0>
   1d200:	strb	r7, [r4]
   1d204:	cmp	r0, #0
   1d208:	bne	1d258 <__assert_fail@plt+0xbb54>
   1d20c:	add	r4, r4, #1
   1d210:	mov	r1, r8
   1d214:	mov	r0, r4
   1d218:	bl	116f8 <strspn@plt>
   1d21c:	add	r5, r4, r0
   1d220:	sub	r3, r6, r5
   1d224:	cmp	r3, #4096	; 0x1000
   1d228:	bge	1d1c8 <__assert_fail@plt+0xbac4>
   1d22c:	cmp	r6, r5
   1d230:	bls	1d248 <__assert_fail@plt+0xbb44>
   1d234:	mov	r1, r5
   1d238:	add	r0, sp, #4
   1d23c:	bl	1d0a4 <__assert_fail@plt+0xb9a0>
   1d240:	cmp	r0, #0
   1d244:	bne	1d258 <__assert_fail@plt+0xbb54>
   1d248:	ldr	r0, [sp, #4]
   1d24c:	bl	11674 <fchdir@plt>
   1d250:	subs	r4, r0, #0
   1d254:	beq	1d390 <__assert_fail@plt+0xbc8c>
   1d258:	ldr	r4, [sl]
   1d25c:	add	r0, sp, #4
   1d260:	bl	1d058 <__assert_fail@plt+0xb954>
   1d264:	str	r4, [sl]
   1d268:	mvn	r4, #0
   1d26c:	b	1d12c <__assert_fail@plt+0xba28>
   1d270:	ldr	r3, [pc, #292]	; 1d39c <__assert_fail@plt+0xbc98>
   1d274:	mov	r2, #126	; 0x7e
   1d278:	movw	r1, #63848	; 0xf968
   1d27c:	movt	r1, #1
   1d280:	movw	r0, #63884	; 0xf98c
   1d284:	movt	r0, #1
   1d288:	bl	11704 <__assert_fail@plt>
   1d28c:	ldr	r3, [pc, #264]	; 1d39c <__assert_fail@plt+0xbc98>
   1d290:	mov	r2, #127	; 0x7f
   1d294:	movw	r1, #63848	; 0xf968
   1d298:	movt	r1, #1
   1d29c:	movw	r0, #63892	; 0xf994
   1d2a0:	movt	r0, #1
   1d2a4:	bl	11704 <__assert_fail@plt>
   1d2a8:	sub	r2, r7, #3
   1d2ac:	mov	r1, #47	; 0x2f
   1d2b0:	add	r0, r6, #3
   1d2b4:	bl	115cc <memchr@plt>
   1d2b8:	subs	r4, r0, #0
   1d2bc:	moveq	r3, #36	; 0x24
   1d2c0:	streq	r3, [sl]
   1d2c4:	mvneq	r4, #0
   1d2c8:	beq	1d12c <__assert_fail@plt+0xba28>
   1d2cc:	mov	r3, #0
   1d2d0:	strb	r3, [r4]
   1d2d4:	mov	r1, r6
   1d2d8:	add	r0, sp, #4
   1d2dc:	bl	1d0a4 <__assert_fail@plt+0xb9a0>
   1d2e0:	mov	r3, #47	; 0x2f
   1d2e4:	strb	r3, [r4]
   1d2e8:	cmp	r0, #0
   1d2ec:	bne	1d258 <__assert_fail@plt+0xbb54>
   1d2f0:	add	r4, r4, #1
   1d2f4:	movw	r1, #61912	; 0xf1d8
   1d2f8:	movt	r1, #1
   1d2fc:	mov	r0, r4
   1d300:	bl	116f8 <strspn@plt>
   1d304:	add	r5, r4, r0
   1d308:	b	1d194 <__assert_fail@plt+0xba90>
   1d30c:	movw	r1, #61912	; 0xf1d8
   1d310:	movt	r1, #1
   1d314:	add	r0, sp, #4
   1d318:	bl	1d0a4 <__assert_fail@plt+0xb9a0>
   1d31c:	cmp	r0, #0
   1d320:	addeq	r5, r6, r5
   1d324:	beq	1d194 <__assert_fail@plt+0xba90>
   1d328:	b	1d258 <__assert_fail@plt+0xbb54>
   1d32c:	ldr	r3, [pc, #104]	; 1d39c <__assert_fail@plt+0xbc98>
   1d330:	mov	r2, #162	; 0xa2
   1d334:	movw	r1, #63848	; 0xf968
   1d338:	movt	r1, #1
   1d33c:	movw	r0, #63904	; 0xf9a0
   1d340:	movt	r0, #1
   1d344:	bl	11704 <__assert_fail@plt>
   1d348:	ldr	r3, [pc, #76]	; 1d39c <__assert_fail@plt+0xbc98>
   1d34c:	mov	r2, #163	; 0xa3
   1d350:	movw	r1, #63848	; 0xf968
   1d354:	movt	r1, #1
   1d358:	movw	r0, #63916	; 0xf9ac
   1d35c:	movt	r0, #1
   1d360:	bl	11704 <__assert_fail@plt>
   1d364:	mov	r3, #36	; 0x24
   1d368:	str	r3, [sl]
   1d36c:	mvn	r4, #0
   1d370:	b	1d12c <__assert_fail@plt+0xba28>
   1d374:	ldr	r3, [pc, #32]	; 1d39c <__assert_fail@plt+0xbc98>
   1d378:	mov	r2, #179	; 0xb3
   1d37c:	movw	r1, #63848	; 0xf968
   1d380:	movt	r1, #1
   1d384:	movw	r0, #63932	; 0xf9bc
   1d388:	movt	r0, #1
   1d38c:	bl	11704 <__assert_fail@plt>
   1d390:	add	r0, sp, #4
   1d394:	bl	1d058 <__assert_fail@plt+0xb954>
   1d398:	b	1d12c <__assert_fail@plt+0xba28>
   1d39c:	andeq	pc, r1, ip, asr r9	; <UNPREDICTABLE>
   1d3a0:	strd	r4, [sp, #-16]!
   1d3a4:	str	r6, [sp, #8]
   1d3a8:	str	lr, [sp, #12]
   1d3ac:	mov	r5, r0
   1d3b0:	bl	11470 <__fpending@plt>
   1d3b4:	mov	r6, r0
   1d3b8:	ldr	r4, [r5]
   1d3bc:	and	r4, r4, #32
   1d3c0:	mov	r0, r5
   1d3c4:	bl	1d42c <__assert_fail@plt+0xbd28>
   1d3c8:	cmp	r4, #0
   1d3cc:	bne	1d400 <__assert_fail@plt+0xbcfc>
   1d3d0:	cmp	r0, #0
   1d3d4:	beq	1d3f0 <__assert_fail@plt+0xbcec>
   1d3d8:	cmp	r6, #0
   1d3dc:	bne	1d41c <__assert_fail@plt+0xbd18>
   1d3e0:	bl	1156c <__errno_location@plt>
   1d3e4:	ldr	r0, [r0]
   1d3e8:	subs	r0, r0, #9
   1d3ec:	mvnne	r0, #0
   1d3f0:	ldrd	r4, [sp]
   1d3f4:	ldr	r6, [sp, #8]
   1d3f8:	add	sp, sp, #12
   1d3fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d400:	cmp	r0, #0
   1d404:	bne	1d424 <__assert_fail@plt+0xbd20>
   1d408:	bl	1156c <__errno_location@plt>
   1d40c:	mov	r3, #0
   1d410:	str	r3, [r0]
   1d414:	mvn	r0, #0
   1d418:	b	1d3f0 <__assert_fail@plt+0xbcec>
   1d41c:	mvn	r0, #0
   1d420:	b	1d3f0 <__assert_fail@plt+0xbcec>
   1d424:	mvn	r0, #0
   1d428:	b	1d3f0 <__assert_fail@plt+0xbcec>
   1d42c:	strd	r4, [sp, #-16]!
   1d430:	str	r6, [sp, #8]
   1d434:	str	lr, [sp, #12]
   1d438:	sub	sp, sp, #8
   1d43c:	mov	r4, r0
   1d440:	bl	115b4 <fileno@plt>
   1d444:	cmp	r0, #0
   1d448:	blt	1d4c0 <__assert_fail@plt+0xbdbc>
   1d44c:	mov	r0, r4
   1d450:	bl	114e8 <__freading@plt>
   1d454:	cmp	r0, #0
   1d458:	beq	1d48c <__assert_fail@plt+0xbd88>
   1d45c:	mov	r0, r4
   1d460:	bl	115b4 <fileno@plt>
   1d464:	mov	r3, #1
   1d468:	str	r3, [sp]
   1d46c:	mov	r2, #0
   1d470:	mov	r3, #0
   1d474:	bl	1144c <lseek64@plt>
   1d478:	mvn	r2, #0
   1d47c:	mvn	r3, #0
   1d480:	cmp	r1, r3
   1d484:	cmpeq	r0, r2
   1d488:	beq	1d4cc <__assert_fail@plt+0xbdc8>
   1d48c:	mov	r0, r4
   1d490:	bl	1d524 <__assert_fail@plt+0xbe20>
   1d494:	cmp	r0, #0
   1d498:	beq	1d4cc <__assert_fail@plt+0xbdc8>
   1d49c:	bl	1156c <__errno_location@plt>
   1d4a0:	mov	r5, r0
   1d4a4:	ldr	r6, [r0]
   1d4a8:	mov	r0, r4
   1d4ac:	bl	115d8 <fclose@plt>
   1d4b0:	cmp	r6, #0
   1d4b4:	strne	r6, [r5]
   1d4b8:	mvnne	r0, #0
   1d4bc:	b	1d4d4 <__assert_fail@plt+0xbdd0>
   1d4c0:	mov	r0, r4
   1d4c4:	bl	115d8 <fclose@plt>
   1d4c8:	b	1d4d4 <__assert_fail@plt+0xbdd0>
   1d4cc:	mov	r0, r4
   1d4d0:	bl	115d8 <fclose@plt>
   1d4d4:	add	sp, sp, #8
   1d4d8:	ldrd	r4, [sp]
   1d4dc:	ldr	r6, [sp, #8]
   1d4e0:	add	sp, sp, #12
   1d4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4e8:	push	{r1, r2, r3}
   1d4ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1d4f0:	sub	sp, sp, #8
   1d4f4:	ldr	r1, [sp, #12]
   1d4f8:	tst	r1, #64	; 0x40
   1d4fc:	addne	r3, sp, #20
   1d500:	strne	r3, [sp, #4]
   1d504:	ldrne	r2, [sp, #16]
   1d508:	moveq	r2, #0
   1d50c:	bl	114ac <open64@plt>
   1d510:	bl	1d824 <__assert_fail@plt+0xc120>
   1d514:	add	sp, sp, #8
   1d518:	pop	{lr}		; (ldr lr, [sp], #4)
   1d51c:	add	sp, sp, #12
   1d520:	bx	lr
   1d524:	str	r4, [sp, #-8]!
   1d528:	str	lr, [sp, #4]
   1d52c:	sub	sp, sp, #8
   1d530:	subs	r4, r0, #0
   1d534:	beq	1d548 <__assert_fail@plt+0xbe44>
   1d538:	mov	r0, r4
   1d53c:	bl	114e8 <__freading@plt>
   1d540:	cmp	r0, #0
   1d544:	bne	1d560 <__assert_fail@plt+0xbe5c>
   1d548:	mov	r0, r4
   1d54c:	bl	1132c <fflush@plt>
   1d550:	add	sp, sp, #8
   1d554:	ldr	r4, [sp]
   1d558:	add	sp, sp, #4
   1d55c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d560:	ldr	r3, [r4]
   1d564:	tst	r3, #256	; 0x100
   1d568:	bne	1d578 <__assert_fail@plt+0xbe74>
   1d56c:	mov	r0, r4
   1d570:	bl	1132c <fflush@plt>
   1d574:	b	1d550 <__assert_fail@plt+0xbe4c>
   1d578:	mov	r3, #1
   1d57c:	str	r3, [sp]
   1d580:	mov	r2, #0
   1d584:	mov	r3, #0
   1d588:	mov	r0, r4
   1d58c:	bl	1d594 <__assert_fail@plt+0xbe90>
   1d590:	b	1d56c <__assert_fail@plt+0xbe68>
   1d594:	str	r4, [sp, #-16]!
   1d598:	strd	r6, [sp, #4]
   1d59c:	str	lr, [sp, #12]
   1d5a0:	sub	sp, sp, #8
   1d5a4:	mov	r4, r0
   1d5a8:	mov	r6, r2
   1d5ac:	mov	r7, r3
   1d5b0:	ldr	r2, [r0, #8]
   1d5b4:	ldr	r3, [r0, #4]
   1d5b8:	cmp	r2, r3
   1d5bc:	beq	1d5ec <__assert_fail@plt+0xbee8>
   1d5c0:	ldr	r3, [sp, #24]
   1d5c4:	str	r3, [sp]
   1d5c8:	mov	r2, r6
   1d5cc:	mov	r3, r7
   1d5d0:	mov	r0, r4
   1d5d4:	bl	115e4 <fseeko64@plt>
   1d5d8:	add	sp, sp, #8
   1d5dc:	ldr	r4, [sp]
   1d5e0:	ldrd	r6, [sp, #4]
   1d5e4:	add	sp, sp, #12
   1d5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5ec:	ldr	r2, [r0, #20]
   1d5f0:	ldr	r3, [r0, #16]
   1d5f4:	cmp	r2, r3
   1d5f8:	bne	1d5c0 <__assert_fail@plt+0xbebc>
   1d5fc:	ldr	r3, [r0, #36]	; 0x24
   1d600:	cmp	r3, #0
   1d604:	bne	1d5c0 <__assert_fail@plt+0xbebc>
   1d608:	bl	115b4 <fileno@plt>
   1d60c:	ldr	r3, [sp, #24]
   1d610:	str	r3, [sp]
   1d614:	mov	r2, r6
   1d618:	mov	r3, r7
   1d61c:	bl	1144c <lseek64@plt>
   1d620:	mvn	r2, #0
   1d624:	mvn	r3, #0
   1d628:	cmp	r1, r3
   1d62c:	cmpeq	r0, r2
   1d630:	beq	1d64c <__assert_fail@plt+0xbf48>
   1d634:	ldr	r3, [r4]
   1d638:	bic	r3, r3, #16
   1d63c:	str	r3, [r4]
   1d640:	strd	r0, [r4, #80]	; 0x50
   1d644:	mov	r0, #0
   1d648:	b	1d5d8 <__assert_fail@plt+0xbed4>
   1d64c:	mvn	r0, #0
   1d650:	b	1d5d8 <__assert_fail@plt+0xbed4>
   1d654:	push	{lr}		; (str lr, [sp, #-4]!)
   1d658:	sub	sp, sp, #268	; 0x10c
   1d65c:	movw	r2, #257	; 0x101
   1d660:	add	r1, sp, #4
   1d664:	bl	1d764 <__assert_fail@plt+0xc060>
   1d668:	cmp	r0, #0
   1d66c:	movne	r0, #0
   1d670:	bne	1d6a8 <__assert_fail@plt+0xbfa4>
   1d674:	movw	r1, #63952	; 0xf9d0
   1d678:	movt	r1, #1
   1d67c:	add	r0, sp, #4
   1d680:	bl	11320 <strcmp@plt>
   1d684:	cmp	r0, #0
   1d688:	beq	1d6a4 <__assert_fail@plt+0xbfa0>
   1d68c:	movw	r1, #63956	; 0xf9d4
   1d690:	movt	r1, #1
   1d694:	add	r0, sp, #4
   1d698:	bl	11320 <strcmp@plt>
   1d69c:	adds	r0, r0, #0
   1d6a0:	movne	r0, #1
   1d6a4:	and	r0, r0, #1
   1d6a8:	add	sp, sp, #268	; 0x10c
   1d6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6b0:	ldrb	r3, [r0]
   1d6b4:	cmp	r3, #0
   1d6b8:	beq	1d6dc <__assert_fail@plt+0xbfd8>
   1d6bc:	mov	r2, #0
   1d6c0:	add	r2, r3, r2, ror #23
   1d6c4:	ldrb	r3, [r0, #1]!
   1d6c8:	cmp	r3, #0
   1d6cc:	bne	1d6c0 <__assert_fail@plt+0xbfbc>
   1d6d0:	udiv	r0, r2, r1
   1d6d4:	mls	r0, r1, r0, r2
   1d6d8:	bx	lr
   1d6dc:	mov	r2, #0
   1d6e0:	b	1d6d0 <__assert_fail@plt+0xbfcc>
   1d6e4:	str	r4, [sp, #-8]!
   1d6e8:	str	lr, [sp, #4]
   1d6ec:	mov	r0, #14
   1d6f0:	bl	11644 <nl_langinfo@plt>
   1d6f4:	cmp	r0, #0
   1d6f8:	beq	1d71c <__assert_fail@plt+0xc018>
   1d6fc:	ldrb	r2, [r0]
   1d700:	movw	r3, #63964	; 0xf9dc
   1d704:	movt	r3, #1
   1d708:	cmp	r2, #0
   1d70c:	moveq	r0, r3
   1d710:	ldr	r4, [sp]
   1d714:	add	sp, sp, #4
   1d718:	pop	{pc}		; (ldr pc, [sp], #4)
   1d71c:	movw	r0, #63964	; 0xf9dc
   1d720:	movt	r0, #1
   1d724:	b	1d710 <__assert_fail@plt+0xc00c>
   1d728:	str	r4, [sp, #-8]!
   1d72c:	str	lr, [sp, #4]
   1d730:	umull	r2, r3, r1, r2
   1d734:	cmp	r3, #0
   1d738:	bne	1d750 <__assert_fail@plt+0xc04c>
   1d73c:	mov	r1, r2
   1d740:	bl	1c178 <__assert_fail@plt+0xaa74>
   1d744:	ldr	r4, [sp]
   1d748:	add	sp, sp, #4
   1d74c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d750:	bl	1156c <__errno_location@plt>
   1d754:	mov	r3, #12
   1d758:	str	r3, [r0]
   1d75c:	mov	r0, #0
   1d760:	b	1d744 <__assert_fail@plt+0xc040>
   1d764:	strd	r4, [sp, #-16]!
   1d768:	str	r6, [sp, #8]
   1d76c:	str	lr, [sp, #12]
   1d770:	mov	r6, r1
   1d774:	mov	r4, r2
   1d778:	mov	r1, #0
   1d77c:	bl	11614 <setlocale@plt>
   1d780:	subs	r5, r0, #0
   1d784:	beq	1d7c8 <__assert_fail@plt+0xc0c4>
   1d788:	mov	r0, r5
   1d78c:	bl	1153c <strlen@plt>
   1d790:	cmp	r4, r0
   1d794:	bhi	1d7e4 <__assert_fail@plt+0xc0e0>
   1d798:	cmp	r4, #0
   1d79c:	moveq	r0, #34	; 0x22
   1d7a0:	beq	1d7f8 <__assert_fail@plt+0xc0f4>
   1d7a4:	sub	r4, r4, #1
   1d7a8:	mov	r2, r4
   1d7ac:	mov	r1, r5
   1d7b0:	mov	r0, r6
   1d7b4:	bl	11374 <memcpy@plt>
   1d7b8:	mov	r3, #0
   1d7bc:	strb	r3, [r6, r4]
   1d7c0:	mov	r0, #34	; 0x22
   1d7c4:	b	1d7f8 <__assert_fail@plt+0xc0f4>
   1d7c8:	cmp	r4, #0
   1d7cc:	moveq	r0, #22
   1d7d0:	beq	1d7f8 <__assert_fail@plt+0xc0f4>
   1d7d4:	mov	r3, #0
   1d7d8:	strb	r3, [r6]
   1d7dc:	mov	r0, #22
   1d7e0:	b	1d7f8 <__assert_fail@plt+0xc0f4>
   1d7e4:	add	r2, r0, #1
   1d7e8:	mov	r1, r5
   1d7ec:	mov	r0, r6
   1d7f0:	bl	11374 <memcpy@plt>
   1d7f4:	mov	r0, #0
   1d7f8:	ldrd	r4, [sp]
   1d7fc:	ldr	r6, [sp, #8]
   1d800:	add	sp, sp, #12
   1d804:	pop	{pc}		; (ldr pc, [sp], #4)
   1d808:	str	r4, [sp, #-8]!
   1d80c:	str	lr, [sp, #4]
   1d810:	mov	r1, #0
   1d814:	bl	11614 <setlocale@plt>
   1d818:	ldr	r4, [sp]
   1d81c:	add	sp, sp, #4
   1d820:	pop	{pc}		; (ldr pc, [sp], #4)
   1d824:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d828:	strd	r6, [sp, #8]
   1d82c:	str	r8, [sp, #16]
   1d830:	str	lr, [sp, #20]
   1d834:	mov	r4, r0
   1d838:	cmp	r0, #2
   1d83c:	bls	1d858 <__assert_fail@plt+0xc154>
   1d840:	mov	r0, r4
   1d844:	ldrd	r4, [sp]
   1d848:	ldrd	r6, [sp, #8]
   1d84c:	ldr	r8, [sp, #16]
   1d850:	add	sp, sp, #20
   1d854:	pop	{pc}		; (ldr pc, [sp], #4)
   1d858:	bl	1d880 <__assert_fail@plt+0xc17c>
   1d85c:	mov	r6, r0
   1d860:	bl	1156c <__errno_location@plt>
   1d864:	mov	r5, r0
   1d868:	ldr	r7, [r0]
   1d86c:	mov	r0, r4
   1d870:	bl	116ec <close@plt>
   1d874:	str	r7, [r5]
   1d878:	mov	r4, r6
   1d87c:	b	1d840 <__assert_fail@plt+0xc13c>
   1d880:	str	r4, [sp, #-8]!
   1d884:	str	lr, [sp, #4]
   1d888:	mov	r2, #3
   1d88c:	mov	r1, #0
   1d890:	bl	1d8a0 <__assert_fail@plt+0xc19c>
   1d894:	ldr	r4, [sp]
   1d898:	add	sp, sp, #4
   1d89c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8a0:	push	{r1, r2, r3}
   1d8a4:	strd	r4, [sp, #-16]!
   1d8a8:	str	r6, [sp, #8]
   1d8ac:	str	lr, [sp, #12]
   1d8b0:	sub	sp, sp, #12
   1d8b4:	mov	r5, r0
   1d8b8:	ldr	r1, [sp, #28]
   1d8bc:	add	r3, sp, #32
   1d8c0:	str	r3, [sp, #4]
   1d8c4:	cmp	r1, #0
   1d8c8:	beq	1d910 <__assert_fail@plt+0xc20c>
   1d8cc:	movw	r3, #1030	; 0x406
   1d8d0:	cmp	r1, r3
   1d8d4:	beq	1d94c <__assert_fail@plt+0xc248>
   1d8d8:	cmp	r1, #11
   1d8dc:	beq	1dafc <__assert_fail@plt+0xc3f8>
   1d8e0:	bgt	1da88 <__assert_fail@plt+0xc384>
   1d8e4:	cmp	r1, #3
   1d8e8:	beq	1dafc <__assert_fail@plt+0xc3f8>
   1d8ec:	ble	1da48 <__assert_fail@plt+0xc344>
   1d8f0:	cmp	r1, #8
   1d8f4:	beq	1da68 <__assert_fail@plt+0xc364>
   1d8f8:	ble	1da60 <__assert_fail@plt+0xc35c>
   1d8fc:	cmp	r1, #9
   1d900:	beq	1dafc <__assert_fail@plt+0xc3f8>
   1d904:	cmp	r1, #10
   1d908:	bne	1dac0 <__assert_fail@plt+0xc3bc>
   1d90c:	b	1da68 <__assert_fail@plt+0xc364>
   1d910:	ldr	r3, [sp, #4]
   1d914:	add	r2, r3, #4
   1d918:	str	r2, [sp, #4]
   1d91c:	ldr	r2, [r3]
   1d920:	mov	r1, #0
   1d924:	bl	115fc <fcntl64@plt>
   1d928:	mov	r4, r0
   1d92c:	mov	r0, r4
   1d930:	add	sp, sp, #12
   1d934:	ldrd	r4, [sp]
   1d938:	ldr	r6, [sp, #8]
   1d93c:	ldr	lr, [sp, #12]
   1d940:	add	sp, sp, #16
   1d944:	add	sp, sp, #12
   1d948:	bx	lr
   1d94c:	ldr	r3, [sp, #4]
   1d950:	add	r2, r3, #4
   1d954:	str	r2, [sp, #4]
   1d958:	ldr	r6, [r3]
   1d95c:	movw	r3, #1268	; 0x4f4
   1d960:	movt	r3, #3
   1d964:	ldr	r3, [r3]
   1d968:	cmp	r3, #0
   1d96c:	blt	1d9d4 <__assert_fail@plt+0xc2d0>
   1d970:	mov	r2, r6
   1d974:	movw	r1, #1030	; 0x406
   1d978:	bl	115fc <fcntl64@plt>
   1d97c:	subs	r4, r0, #0
   1d980:	blt	1d998 <__assert_fail@plt+0xc294>
   1d984:	movw	r3, #1268	; 0x4f4
   1d988:	movt	r3, #3
   1d98c:	mov	r2, #1
   1d990:	str	r2, [r3]
   1d994:	b	1d92c <__assert_fail@plt+0xc228>
   1d998:	bl	1156c <__errno_location@plt>
   1d99c:	ldr	r3, [r0]
   1d9a0:	cmp	r3, #22
   1d9a4:	bne	1d984 <__assert_fail@plt+0xc280>
   1d9a8:	mov	r2, r6
   1d9ac:	mov	r1, #0
   1d9b0:	mov	r0, r5
   1d9b4:	bl	115fc <fcntl64@plt>
   1d9b8:	subs	r4, r0, #0
   1d9bc:	blt	1d92c <__assert_fail@plt+0xc228>
   1d9c0:	movw	r3, #1268	; 0x4f4
   1d9c4:	movt	r3, #3
   1d9c8:	mvn	r2, #0
   1d9cc:	str	r2, [r3]
   1d9d0:	b	1d9fc <__assert_fail@plt+0xc2f8>
   1d9d4:	mov	r2, r6
   1d9d8:	mov	r1, #0
   1d9dc:	bl	115fc <fcntl64@plt>
   1d9e0:	subs	r4, r0, #0
   1d9e4:	blt	1d92c <__assert_fail@plt+0xc228>
   1d9e8:	movw	r3, #1268	; 0x4f4
   1d9ec:	movt	r3, #3
   1d9f0:	ldr	r3, [r3]
   1d9f4:	cmn	r3, #1
   1d9f8:	bne	1d92c <__assert_fail@plt+0xc228>
   1d9fc:	mov	r1, #1
   1da00:	mov	r0, r4
   1da04:	bl	115fc <fcntl64@plt>
   1da08:	subs	r2, r0, #0
   1da0c:	blt	1da28 <__assert_fail@plt+0xc324>
   1da10:	orr	r2, r2, #1
   1da14:	mov	r1, #2
   1da18:	mov	r0, r4
   1da1c:	bl	115fc <fcntl64@plt>
   1da20:	cmn	r0, #1
   1da24:	bne	1d92c <__assert_fail@plt+0xc228>
   1da28:	bl	1156c <__errno_location@plt>
   1da2c:	mov	r5, r0
   1da30:	ldr	r6, [r0]
   1da34:	mov	r0, r4
   1da38:	bl	116ec <close@plt>
   1da3c:	str	r6, [r5]
   1da40:	mvn	r4, #0
   1da44:	b	1d92c <__assert_fail@plt+0xc228>
   1da48:	cmp	r1, #1
   1da4c:	beq	1dafc <__assert_fail@plt+0xc3f8>
   1da50:	bgt	1da68 <__assert_fail@plt+0xc364>
   1da54:	cmp	r1, #0
   1da58:	bne	1dac0 <__assert_fail@plt+0xc3bc>
   1da5c:	b	1da68 <__assert_fail@plt+0xc364>
   1da60:	cmp	r1, #4
   1da64:	bne	1dac0 <__assert_fail@plt+0xc3bc>
   1da68:	ldr	r3, [sp, #4]
   1da6c:	add	r2, r3, #4
   1da70:	str	r2, [sp, #4]
   1da74:	ldr	r2, [r3]
   1da78:	mov	r0, r5
   1da7c:	bl	115fc <fcntl64@plt>
   1da80:	mov	r4, r0
   1da84:	b	1d92c <__assert_fail@plt+0xc228>
   1da88:	movw	r3, #1031	; 0x407
   1da8c:	cmp	r1, r3
   1da90:	bgt	1dae0 <__assert_fail@plt+0xc3dc>
   1da94:	movw	r3, #1030	; 0x406
   1da98:	cmp	r1, r3
   1da9c:	bge	1da68 <__assert_fail@plt+0xc364>
   1daa0:	movw	r3, #1025	; 0x401
   1daa4:	cmp	r1, r3
   1daa8:	beq	1dafc <__assert_fail@plt+0xc3f8>
   1daac:	movw	r3, #1026	; 0x402
   1dab0:	cmp	r1, r3
   1dab4:	beq	1da68 <__assert_fail@plt+0xc364>
   1dab8:	cmp	r1, #1024	; 0x400
   1dabc:	beq	1da68 <__assert_fail@plt+0xc364>
   1dac0:	ldr	r3, [sp, #4]
   1dac4:	add	r2, r3, #4
   1dac8:	str	r2, [sp, #4]
   1dacc:	ldr	r2, [r3]
   1dad0:	mov	r0, r5
   1dad4:	bl	115fc <fcntl64@plt>
   1dad8:	mov	r4, r0
   1dadc:	b	1d92c <__assert_fail@plt+0xc228>
   1dae0:	movw	r3, #1033	; 0x409
   1dae4:	cmp	r1, r3
   1dae8:	beq	1da68 <__assert_fail@plt+0xc364>
   1daec:	blt	1dafc <__assert_fail@plt+0xc3f8>
   1daf0:	movw	r3, #1034	; 0x40a
   1daf4:	cmp	r1, r3
   1daf8:	bne	1dac0 <__assert_fail@plt+0xc3bc>
   1dafc:	mov	r0, r5
   1db00:	bl	115fc <fcntl64@plt>
   1db04:	mov	r4, r0
   1db08:	b	1d92c <__assert_fail@plt+0xc228>
   1db0c:	eor	r1, r1, #-2147483648	; 0x80000000
   1db10:	b	1db18 <__assert_fail@plt+0xc414>
   1db14:	eor	r3, r3, #-2147483648	; 0x80000000
   1db18:	push	{r4, r5, lr}
   1db1c:	lsl	r4, r1, #1
   1db20:	lsl	r5, r3, #1
   1db24:	teq	r4, r5
   1db28:	teqeq	r0, r2
   1db2c:	orrsne	ip, r4, r0
   1db30:	orrsne	ip, r5, r2
   1db34:	mvnsne	ip, r4, asr #21
   1db38:	mvnsne	ip, r5, asr #21
   1db3c:	beq	1dd28 <__assert_fail@plt+0xc624>
   1db40:	lsr	r4, r4, #21
   1db44:	rsbs	r5, r4, r5, lsr #21
   1db48:	rsblt	r5, r5, #0
   1db4c:	ble	1db6c <__assert_fail@plt+0xc468>
   1db50:	add	r4, r4, r5
   1db54:	eor	r2, r0, r2
   1db58:	eor	r3, r1, r3
   1db5c:	eor	r0, r2, r0
   1db60:	eor	r1, r3, r1
   1db64:	eor	r2, r0, r2
   1db68:	eor	r3, r1, r3
   1db6c:	cmp	r5, #54	; 0x36
   1db70:	pophi	{r4, r5, pc}
   1db74:	tst	r1, #-2147483648	; 0x80000000
   1db78:	lsl	r1, r1, #12
   1db7c:	mov	ip, #1048576	; 0x100000
   1db80:	orr	r1, ip, r1, lsr #12
   1db84:	beq	1db90 <__assert_fail@plt+0xc48c>
   1db88:	rsbs	r0, r0, #0
   1db8c:	rsc	r1, r1, #0
   1db90:	tst	r3, #-2147483648	; 0x80000000
   1db94:	lsl	r3, r3, #12
   1db98:	orr	r3, ip, r3, lsr #12
   1db9c:	beq	1dba8 <__assert_fail@plt+0xc4a4>
   1dba0:	rsbs	r2, r2, #0
   1dba4:	rsc	r3, r3, #0
   1dba8:	teq	r4, r5
   1dbac:	beq	1dd10 <__assert_fail@plt+0xc60c>
   1dbb0:	sub	r4, r4, #1
   1dbb4:	rsbs	lr, r5, #32
   1dbb8:	blt	1dbd4 <__assert_fail@plt+0xc4d0>
   1dbbc:	lsl	ip, r2, lr
   1dbc0:	adds	r0, r0, r2, lsr r5
   1dbc4:	adc	r1, r1, #0
   1dbc8:	adds	r0, r0, r3, lsl lr
   1dbcc:	adcs	r1, r1, r3, asr r5
   1dbd0:	b	1dbf0 <__assert_fail@plt+0xc4ec>
   1dbd4:	sub	r5, r5, #32
   1dbd8:	add	lr, lr, #32
   1dbdc:	cmp	r2, #1
   1dbe0:	lsl	ip, r3, lr
   1dbe4:	orrcs	ip, ip, #2
   1dbe8:	adds	r0, r0, r3, asr r5
   1dbec:	adcs	r1, r1, r3, asr #31
   1dbf0:	and	r5, r1, #-2147483648	; 0x80000000
   1dbf4:	bpl	1dc04 <__assert_fail@plt+0xc500>
   1dbf8:	rsbs	ip, ip, #0
   1dbfc:	rscs	r0, r0, #0
   1dc00:	rsc	r1, r1, #0
   1dc04:	cmp	r1, #1048576	; 0x100000
   1dc08:	bcc	1dc48 <__assert_fail@plt+0xc544>
   1dc0c:	cmp	r1, #2097152	; 0x200000
   1dc10:	bcc	1dc30 <__assert_fail@plt+0xc52c>
   1dc14:	lsrs	r1, r1, #1
   1dc18:	rrxs	r0, r0
   1dc1c:	rrx	ip, ip
   1dc20:	add	r4, r4, #1
   1dc24:	lsl	r2, r4, #21
   1dc28:	cmn	r2, #4194304	; 0x400000
   1dc2c:	bcs	1dd88 <__assert_fail@plt+0xc684>
   1dc30:	cmp	ip, #-2147483648	; 0x80000000
   1dc34:	lsrseq	ip, r0, #1
   1dc38:	adcs	r0, r0, #0
   1dc3c:	adc	r1, r1, r4, lsl #20
   1dc40:	orr	r1, r1, r5
   1dc44:	pop	{r4, r5, pc}
   1dc48:	lsls	ip, ip, #1
   1dc4c:	adcs	r0, r0, r0
   1dc50:	adc	r1, r1, r1
   1dc54:	tst	r1, #1048576	; 0x100000
   1dc58:	sub	r4, r4, #1
   1dc5c:	bne	1dc30 <__assert_fail@plt+0xc52c>
   1dc60:	teq	r1, #0
   1dc64:	moveq	r1, r0
   1dc68:	moveq	r0, #0
   1dc6c:	clz	r3, r1
   1dc70:	addeq	r3, r3, #32
   1dc74:	sub	r3, r3, #11
   1dc78:	subs	r2, r3, #32
   1dc7c:	bge	1dca0 <__assert_fail@plt+0xc59c>
   1dc80:	adds	r2, r2, #12
   1dc84:	ble	1dc9c <__assert_fail@plt+0xc598>
   1dc88:	add	ip, r2, #20
   1dc8c:	rsb	r2, r2, #12
   1dc90:	lsl	r0, r1, ip
   1dc94:	lsr	r1, r1, r2
   1dc98:	b	1dcb0 <__assert_fail@plt+0xc5ac>
   1dc9c:	add	r2, r2, #20
   1dca0:	rsble	ip, r2, #32
   1dca4:	lsl	r1, r1, r2
   1dca8:	orrle	r1, r1, r0, lsr ip
   1dcac:	lslle	r0, r0, r2
   1dcb0:	subs	r4, r4, r3
   1dcb4:	addge	r1, r1, r4, lsl #20
   1dcb8:	orrge	r1, r1, r5
   1dcbc:	popge	{r4, r5, pc}
   1dcc0:	mvn	r4, r4
   1dcc4:	subs	r4, r4, #31
   1dcc8:	bge	1dd04 <__assert_fail@plt+0xc600>
   1dccc:	adds	r4, r4, #12
   1dcd0:	bgt	1dcec <__assert_fail@plt+0xc5e8>
   1dcd4:	add	r4, r4, #20
   1dcd8:	rsb	r2, r4, #32
   1dcdc:	lsr	r0, r0, r4
   1dce0:	orr	r0, r0, r1, lsl r2
   1dce4:	orr	r1, r5, r1, lsr r4
   1dce8:	pop	{r4, r5, pc}
   1dcec:	rsb	r4, r4, #12
   1dcf0:	rsb	r2, r4, #32
   1dcf4:	lsr	r0, r0, r2
   1dcf8:	orr	r0, r0, r1, lsl r4
   1dcfc:	mov	r1, r5
   1dd00:	pop	{r4, r5, pc}
   1dd04:	lsr	r0, r1, r4
   1dd08:	mov	r1, r5
   1dd0c:	pop	{r4, r5, pc}
   1dd10:	teq	r4, #0
   1dd14:	eor	r3, r3, #1048576	; 0x100000
   1dd18:	eoreq	r1, r1, #1048576	; 0x100000
   1dd1c:	addeq	r4, r4, #1
   1dd20:	subne	r5, r5, #1
   1dd24:	b	1dbb0 <__assert_fail@plt+0xc4ac>
   1dd28:	mvns	ip, r4, asr #21
   1dd2c:	mvnsne	ip, r5, asr #21
   1dd30:	beq	1dd98 <__assert_fail@plt+0xc694>
   1dd34:	teq	r4, r5
   1dd38:	teqeq	r0, r2
   1dd3c:	beq	1dd50 <__assert_fail@plt+0xc64c>
   1dd40:	orrs	ip, r4, r0
   1dd44:	moveq	r1, r3
   1dd48:	moveq	r0, r2
   1dd4c:	pop	{r4, r5, pc}
   1dd50:	teq	r1, r3
   1dd54:	movne	r1, #0
   1dd58:	movne	r0, #0
   1dd5c:	popne	{r4, r5, pc}
   1dd60:	lsrs	ip, r4, #21
   1dd64:	bne	1dd78 <__assert_fail@plt+0xc674>
   1dd68:	lsls	r0, r0, #1
   1dd6c:	adcs	r1, r1, r1
   1dd70:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1dd74:	pop	{r4, r5, pc}
   1dd78:	adds	r4, r4, #4194304	; 0x400000
   1dd7c:	addcc	r1, r1, #1048576	; 0x100000
   1dd80:	popcc	{r4, r5, pc}
   1dd84:	and	r5, r1, #-2147483648	; 0x80000000
   1dd88:	orr	r1, r5, #2130706432	; 0x7f000000
   1dd8c:	orr	r1, r1, #15728640	; 0xf00000
   1dd90:	mov	r0, #0
   1dd94:	pop	{r4, r5, pc}
   1dd98:	mvns	ip, r4, asr #21
   1dd9c:	movne	r1, r3
   1dda0:	movne	r0, r2
   1dda4:	mvnseq	ip, r5, asr #21
   1dda8:	movne	r3, r1
   1ddac:	movne	r2, r0
   1ddb0:	orrs	r4, r0, r1, lsl #12
   1ddb4:	orrseq	r5, r2, r3, lsl #12
   1ddb8:	teqeq	r1, r3
   1ddbc:	orrne	r1, r1, #524288	; 0x80000
   1ddc0:	pop	{r4, r5, pc}
   1ddc4:	teq	r0, #0
   1ddc8:	moveq	r1, #0
   1ddcc:	bxeq	lr
   1ddd0:	push	{r4, r5, lr}
   1ddd4:	mov	r4, #1024	; 0x400
   1ddd8:	add	r4, r4, #50	; 0x32
   1dddc:	mov	r5, #0
   1dde0:	mov	r1, #0
   1dde4:	b	1dc60 <__assert_fail@plt+0xc55c>
   1dde8:	teq	r0, #0
   1ddec:	moveq	r1, #0
   1ddf0:	bxeq	lr
   1ddf4:	push	{r4, r5, lr}
   1ddf8:	mov	r4, #1024	; 0x400
   1ddfc:	add	r4, r4, #50	; 0x32
   1de00:	ands	r5, r0, #-2147483648	; 0x80000000
   1de04:	rsbmi	r0, r0, #0
   1de08:	mov	r1, #0
   1de0c:	b	1dc60 <__assert_fail@plt+0xc55c>
   1de10:	lsls	r2, r0, #1
   1de14:	asr	r1, r2, #3
   1de18:	rrx	r1, r1
   1de1c:	lsl	r0, r2, #28
   1de20:	andsne	r3, r2, #-16777216	; 0xff000000
   1de24:	teqne	r3, #-16777216	; 0xff000000
   1de28:	eorne	r1, r1, #939524096	; 0x38000000
   1de2c:	bxne	lr
   1de30:	bics	r2, r2, #-16777216	; 0xff000000
   1de34:	bxeq	lr
   1de38:	teq	r3, #-16777216	; 0xff000000
   1de3c:	orreq	r1, r1, #524288	; 0x80000
   1de40:	bxeq	lr
   1de44:	push	{r4, r5, lr}
   1de48:	mov	r4, #896	; 0x380
   1de4c:	and	r5, r1, #-2147483648	; 0x80000000
   1de50:	bic	r1, r1, #-2147483648	; 0x80000000
   1de54:	b	1dc60 <__assert_fail@plt+0xc55c>
   1de58:	orrs	r2, r0, r1
   1de5c:	bxeq	lr
   1de60:	push	{r4, r5, lr}
   1de64:	mov	r5, #0
   1de68:	b	1de88 <__assert_fail@plt+0xc784>
   1de6c:	orrs	r2, r0, r1
   1de70:	bxeq	lr
   1de74:	push	{r4, r5, lr}
   1de78:	ands	r5, r1, #-2147483648	; 0x80000000
   1de7c:	bpl	1de88 <__assert_fail@plt+0xc784>
   1de80:	rsbs	r0, r0, #0
   1de84:	rsc	r1, r1, #0
   1de88:	mov	r4, #1024	; 0x400
   1de8c:	add	r4, r4, #50	; 0x32
   1de90:	lsrs	ip, r1, #22
   1de94:	beq	1dc04 <__assert_fail@plt+0xc500>
   1de98:	mov	r2, #3
   1de9c:	lsrs	ip, ip, #3
   1dea0:	addne	r2, r2, #3
   1dea4:	lsrs	ip, ip, #3
   1dea8:	addne	r2, r2, #3
   1deac:	add	r2, r2, ip, lsr #3
   1deb0:	rsb	r3, r2, #32
   1deb4:	lsl	ip, r0, r3
   1deb8:	lsr	r0, r0, r2
   1debc:	orr	r0, r0, r1, lsl r3
   1dec0:	lsr	r1, r1, r2
   1dec4:	add	r4, r4, r2
   1dec8:	b	1dc04 <__assert_fail@plt+0xc500>
   1decc:	cmp	r3, #0
   1ded0:	cmpeq	r2, #0
   1ded4:	bne	1deec <__assert_fail@plt+0xc7e8>
   1ded8:	cmp	r1, #0
   1dedc:	cmpeq	r0, #0
   1dee0:	mvnne	r1, #0
   1dee4:	mvnne	r0, #0
   1dee8:	b	1df08 <__assert_fail@plt+0xc804>
   1deec:	sub	sp, sp, #8
   1def0:	push	{sp, lr}
   1def4:	bl	1df58 <__assert_fail@plt+0xc854>
   1def8:	ldr	lr, [sp, #4]
   1defc:	add	sp, sp, #8
   1df00:	pop	{r2, r3}
   1df04:	bx	lr
   1df08:	push	{r1, lr}
   1df0c:	mov	r0, #8
   1df10:	bl	112fc <raise@plt>
   1df14:	pop	{r1, pc}
   1df18:	vmov	d6, r0, r1
   1df1c:	vldr	d7, [pc, #36]	; 1df48 <__assert_fail@plt+0xc844>
   1df20:	vldr	d5, [pc, #40]	; 1df50 <__assert_fail@plt+0xc84c>
   1df24:	vmul.f64	d7, d6, d7
   1df28:	vcvt.u32.f64	s14, d7
   1df2c:	vcvt.f64.u32	d4, s14
   1df30:	vmov	r1, s14
   1df34:	vmls.f64	d6, d4, d5
   1df38:	vcvt.u32.f64	s15, d6
   1df3c:	vmov	r0, s15
   1df40:	bx	lr
   1df44:	nop			; (mov r0, r0)
   1df48:	andeq	r0, r0, r0
   1df4c:	ldclcc	0, cr0, [r0]
   1df50:	andeq	r0, r0, r0
   1df54:	mvnsmi	r0, r0
   1df58:	cmp	r1, r3
   1df5c:	cmpeq	r0, r2
   1df60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df64:	mov	r4, r0
   1df68:	movcc	r0, #0
   1df6c:	mov	r5, r1
   1df70:	ldr	lr, [sp, #36]	; 0x24
   1df74:	movcc	r1, r0
   1df78:	bcc	1e074 <__assert_fail@plt+0xc970>
   1df7c:	cmp	r3, #0
   1df80:	clzeq	ip, r2
   1df84:	clzne	ip, r3
   1df88:	addeq	ip, ip, #32
   1df8c:	cmp	r5, #0
   1df90:	clzeq	r1, r4
   1df94:	addeq	r1, r1, #32
   1df98:	clzne	r1, r5
   1df9c:	sub	ip, ip, r1
   1dfa0:	sub	sl, ip, #32
   1dfa4:	lsl	r9, r3, ip
   1dfa8:	rsb	fp, ip, #32
   1dfac:	orr	r9, r9, r2, lsl sl
   1dfb0:	orr	r9, r9, r2, lsr fp
   1dfb4:	lsl	r8, r2, ip
   1dfb8:	cmp	r5, r9
   1dfbc:	cmpeq	r4, r8
   1dfc0:	movcc	r0, #0
   1dfc4:	movcc	r1, r0
   1dfc8:	bcc	1dfe4 <__assert_fail@plt+0xc8e0>
   1dfcc:	mov	r0, #1
   1dfd0:	subs	r4, r4, r8
   1dfd4:	lsl	r1, r0, sl
   1dfd8:	orr	r1, r1, r0, lsr fp
   1dfdc:	lsl	r0, r0, ip
   1dfe0:	sbc	r5, r5, r9
   1dfe4:	cmp	ip, #0
   1dfe8:	beq	1e074 <__assert_fail@plt+0xc970>
   1dfec:	lsr	r6, r8, #1
   1dff0:	orr	r6, r6, r9, lsl #31
   1dff4:	lsr	r7, r9, #1
   1dff8:	mov	r2, ip
   1dffc:	b	1e020 <__assert_fail@plt+0xc91c>
   1e000:	subs	r3, r4, r6
   1e004:	sbc	r8, r5, r7
   1e008:	adds	r3, r3, r3
   1e00c:	adc	r8, r8, r8
   1e010:	adds	r4, r3, #1
   1e014:	adc	r5, r8, #0
   1e018:	subs	r2, r2, #1
   1e01c:	beq	1e03c <__assert_fail@plt+0xc938>
   1e020:	cmp	r5, r7
   1e024:	cmpeq	r4, r6
   1e028:	bcs	1e000 <__assert_fail@plt+0xc8fc>
   1e02c:	adds	r4, r4, r4
   1e030:	adc	r5, r5, r5
   1e034:	subs	r2, r2, #1
   1e038:	bne	1e020 <__assert_fail@plt+0xc91c>
   1e03c:	lsr	r3, r4, ip
   1e040:	orr	r3, r3, r5, lsl fp
   1e044:	lsr	r2, r5, ip
   1e048:	orr	r3, r3, r5, lsr sl
   1e04c:	adds	r0, r0, r4
   1e050:	mov	r4, r3
   1e054:	lsl	r3, r2, ip
   1e058:	orr	r3, r3, r4, lsl sl
   1e05c:	lsl	ip, r4, ip
   1e060:	orr	r3, r3, r4, lsr fp
   1e064:	adc	r1, r1, r5
   1e068:	subs	r0, r0, ip
   1e06c:	mov	r5, r2
   1e070:	sbc	r1, r1, r3
   1e074:	cmp	lr, #0
   1e078:	strdne	r4, [lr]
   1e07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e080:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e084:	mov	r7, r0
   1e088:	ldr	r6, [pc, #72]	; 1e0d8 <__assert_fail@plt+0xc9d4>
   1e08c:	ldr	r5, [pc, #72]	; 1e0dc <__assert_fail@plt+0xc9d8>
   1e090:	add	r6, pc, r6
   1e094:	add	r5, pc, r5
   1e098:	sub	r6, r6, r5
   1e09c:	mov	r8, r1
   1e0a0:	mov	r9, r2
   1e0a4:	bl	112c4 <calloc@plt-0x20>
   1e0a8:	asrs	r6, r6, #2
   1e0ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e0b0:	mov	r4, #0
   1e0b4:	add	r4, r4, #1
   1e0b8:	ldr	r3, [r5], #4
   1e0bc:	mov	r2, r9
   1e0c0:	mov	r1, r8
   1e0c4:	mov	r0, r7
   1e0c8:	blx	r3
   1e0cc:	cmp	r6, r4
   1e0d0:	bne	1e0b4 <__assert_fail@plt+0xc9b0>
   1e0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e0d8:	andeq	r1, r1, ip, ror lr
   1e0dc:	andeq	r1, r1, r4, ror lr
   1e0e0:	bx	lr
   1e0e4:	ldr	r3, [pc, #12]	; 1e0f8 <__assert_fail@plt+0xc9f4>
   1e0e8:	mov	r1, #0
   1e0ec:	add	r3, pc, r3
   1e0f0:	ldr	r2, [r3]
   1e0f4:	b	11584 <__cxa_atexit@plt>
   1e0f8:	andeq	r2, r1, r4, lsl #1

Disassembly of section .fini:

0001e0fc <.fini>:
   1e0fc:	push	{r3, lr}
   1e100:	pop	{r3, pc}
