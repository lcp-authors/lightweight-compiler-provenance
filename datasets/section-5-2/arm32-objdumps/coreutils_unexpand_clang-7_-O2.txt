
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010dac <.init>:
   10dac:	push	{r3, lr}
   10db0:	bl	11060 <__assert_fail@plt+0x48>
   10db4:	pop	{r3, pc}

Disassembly of section .plt:

00010db8 <calloc@plt-0x14>:
   10db8:	push	{lr}		; (str lr, [sp, #-4]!)
   10dbc:	ldr	lr, [pc, #4]	; 10dc8 <calloc@plt-0x4>
   10dc0:	add	lr, pc, lr
   10dc4:	ldr	pc, [lr, #8]!
   10dc8:	andeq	r6, r1, r8, lsr r2

00010dcc <calloc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #568]!	; 0x238

00010dd8 <fputs_unlocked@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #560]!	; 0x230

00010de4 <raise@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #552]!	; 0x228

00010df0 <strcmp@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #544]!	; 0x220

00010dfc <posix_fadvise64@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #536]!	; 0x218

00010e08 <fflush@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #528]!	; 0x210

00010e14 <free@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #520]!	; 0x208

00010e20 <_exit@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #512]!	; 0x200

00010e2c <memcpy@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #504]!	; 0x1f8

00010e38 <mbsinit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #496]!	; 0x1f0

00010e44 <fwrite_unlocked@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e50 <memcmp@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #480]!	; 0x1e0

00010e5c <dcgettext@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #472]!	; 0x1d8

00010e68 <realloc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #464]!	; 0x1d0

00010e74 <textdomain@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e80 <iswprint@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #448]!	; 0x1c0

00010e8c <fwrite@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #440]!	; 0x1b8

00010e98 <lseek64@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea4 <__ctype_get_mb_cur_max@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb0 <__fpending@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #416]!	; 0x1a0

00010ebc <mbrtowc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #408]!	; 0x198

00010ec8 <error@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #400]!	; 0x190

00010ed4 <malloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #392]!	; 0x188

00010ee0 <__libc_start_main@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #384]!	; 0x180

00010eec <__freading@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #376]!	; 0x178

00010ef8 <__gmon_start__@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #368]!	; 0x170

00010f04 <getopt_long@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #360]!	; 0x168

00010f10 <__ctype_b_loc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #352]!	; 0x160

00010f1c <exit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #344]!	; 0x158

00010f28 <strlen@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #336]!	; 0x150

00010f34 <__errno_location@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #328]!	; 0x148

00010f40 <__cxa_atexit@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #320]!	; 0x140

00010f4c <memset@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #312]!	; 0x138

00010f58 <__printf_chk@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #304]!	; 0x130

00010f64 <fileno@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #296]!	; 0x128

00010f70 <__fprintf_chk@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #288]!	; 0x120

00010f7c <fclose@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #280]!	; 0x118

00010f88 <fseeko64@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #272]!	; 0x110

00010f94 <__uflow@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #264]!	; 0x108

00010fa0 <__overflow@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #256]!	; 0x100

00010fac <setlocale@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #248]!	; 0xf8

00010fb8 <strrchr@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #240]!	; 0xf0

00010fc4 <nl_langinfo@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #232]!	; 0xe8

00010fd0 <clearerr_unlocked@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #224]!	; 0xe0

00010fdc <fopen64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #216]!	; 0xd8

00010fe8 <bindtextdomain@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #208]!	; 0xd0

00010ff4 <strncmp@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #200]!	; 0xc8

00011000 <abort@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #192]!	; 0xc0

0001100c <strspn@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #184]!	; 0xb8

00011018 <__assert_fail@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #176]!	; 0xb0

Disassembly of section .text:

00011024 <.text>:
   11024:	mov	fp, #0
   11028:	mov	lr, #0
   1102c:	pop	{r1}		; (ldr r1, [sp], #4)
   11030:	mov	r2, sp
   11034:	push	{r2}		; (str r2, [sp, #-4]!)
   11038:	push	{r0}		; (str r0, [sp, #-4]!)
   1103c:	ldr	ip, [pc, #16]	; 11054 <__assert_fail@plt+0x3c>
   11040:	push	{ip}		; (str ip, [sp, #-4]!)
   11044:	ldr	r0, [pc, #12]	; 11058 <__assert_fail@plt+0x40>
   11048:	ldr	r3, [pc, #12]	; 1105c <__assert_fail@plt+0x44>
   1104c:	bl	10ee0 <__libc_start_main@plt>
   11050:	bl	11000 <abort@plt>
   11054:	andeq	r5, r1, r0, asr #10
   11058:			; <UNDEFINED> instruction: 0x000113b0
   1105c:	andeq	r5, r1, r0, ror #9
   11060:	ldr	r3, [pc, #20]	; 1107c <__assert_fail@plt+0x64>
   11064:	ldr	r2, [pc, #20]	; 11080 <__assert_fail@plt+0x68>
   11068:	add	r3, pc, r3
   1106c:	ldr	r2, [r3, r2]
   11070:	cmp	r2, #0
   11074:	bxeq	lr
   11078:	b	10ef8 <__gmon_start__@plt>
   1107c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11080:	ldrdeq	r0, [r0], -r4
   11084:	ldr	r0, [pc, #24]	; 110a4 <__assert_fail@plt+0x8c>
   11088:	ldr	r3, [pc, #24]	; 110a8 <__assert_fail@plt+0x90>
   1108c:	cmp	r3, r0
   11090:	bxeq	lr
   11094:	ldr	r3, [pc, #16]	; 110ac <__assert_fail@plt+0x94>
   11098:	cmp	r3, #0
   1109c:	bxeq	lr
   110a0:	bx	r3
   110a4:	andeq	r7, r2, r0, lsr r1
   110a8:	andeq	r7, r2, r0, lsr r1
   110ac:	andeq	r0, r0, r0
   110b0:	ldr	r0, [pc, #36]	; 110dc <__assert_fail@plt+0xc4>
   110b4:	ldr	r1, [pc, #36]	; 110e0 <__assert_fail@plt+0xc8>
   110b8:	sub	r1, r1, r0
   110bc:	asr	r1, r1, #2
   110c0:	add	r1, r1, r1, lsr #31
   110c4:	asrs	r1, r1, #1
   110c8:	bxeq	lr
   110cc:	ldr	r3, [pc, #16]	; 110e4 <__assert_fail@plt+0xcc>
   110d0:	cmp	r3, #0
   110d4:	bxeq	lr
   110d8:	bx	r3
   110dc:	andeq	r7, r2, r0, lsr r1
   110e0:	andeq	r7, r2, r0, lsr r1
   110e4:	andeq	r0, r0, r0
   110e8:	push	{r4, lr}
   110ec:	ldr	r4, [pc, #24]	; 1110c <__assert_fail@plt+0xf4>
   110f0:	ldrb	r3, [r4]
   110f4:	cmp	r3, #0
   110f8:	popne	{r4, pc}
   110fc:	bl	11084 <__assert_fail@plt+0x6c>
   11100:	mov	r3, #1
   11104:	strb	r3, [r4]
   11108:	pop	{r4, pc}
   1110c:	andeq	r7, r2, r4, asr r1
   11110:	b	110b0 <__assert_fail@plt+0x98>
   11114:	push	{fp, lr}
   11118:	mov	fp, sp
   1111c:	sub	sp, sp, #56	; 0x38
   11120:	mov	r4, r0
   11124:	cmp	r0, #0
   11128:	bne	1136c <__assert_fail@plt+0x354>
   1112c:	movw	r1, #21907	; 0x5593
   11130:	mov	r0, #0
   11134:	mov	r2, #5
   11138:	movt	r1, #1
   1113c:	bl	10e5c <dcgettext@plt>
   11140:	mov	r1, r0
   11144:	movw	r0, #29084	; 0x719c
   11148:	movt	r0, #2
   1114c:	ldr	r2, [r0]
   11150:	mov	r0, #1
   11154:	bl	10f58 <__printf_chk@plt>
   11158:	movw	r1, #21940	; 0x55b4
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10e5c <dcgettext@plt>
   1116c:	movw	r7, #29004	; 0x714c
   11170:	movt	r7, #2
   11174:	ldr	r1, [r7]
   11178:	bl	10dd8 <fputs_unlocked@plt>
   1117c:	movw	r1, #22432	; 0x57a0
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	movt	r1, #1
   1118c:	bl	10e5c <dcgettext@plt>
   11190:	ldr	r1, [r7]
   11194:	bl	10dd8 <fputs_unlocked@plt>
   11198:	movw	r1, #22488	; 0x57d8
   1119c:	mov	r0, #0
   111a0:	mov	r2, #5
   111a4:	movt	r1, #1
   111a8:	bl	10e5c <dcgettext@plt>
   111ac:	ldr	r1, [r7]
   111b0:	bl	10dd8 <fputs_unlocked@plt>
   111b4:	movw	r1, #22006	; 0x55f6
   111b8:	mov	r0, #0
   111bc:	mov	r2, #5
   111c0:	movt	r1, #1
   111c4:	bl	10e5c <dcgettext@plt>
   111c8:	ldr	r1, [r7]
   111cc:	bl	10dd8 <fputs_unlocked@plt>
   111d0:	bl	12314 <__assert_fail@plt+0x12fc>
   111d4:	movw	r1, #22227	; 0x56d3
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	movt	r1, #1
   111e4:	bl	10e5c <dcgettext@plt>
   111e8:	ldr	r1, [r7]
   111ec:	bl	10dd8 <fputs_unlocked@plt>
   111f0:	movw	r1, #22272	; 0x5700
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	movt	r1, #1
   11200:	bl	10e5c <dcgettext@plt>
   11204:	ldr	r1, [r7]
   11208:	bl	10dd8 <fputs_unlocked@plt>
   1120c:	movw	r0, #23040	; 0x5a00
   11210:	mov	r2, #48	; 0x30
   11214:	mov	r6, sp
   11218:	movw	r5, #22326	; 0x5736
   1121c:	movt	r0, #1
   11220:	movt	r5, #1
   11224:	add	r1, r0, #32
   11228:	add	r3, r0, #16
   1122c:	vld1.64	{d18-d19}, [r0], r2
   11230:	vld1.64	{d16-d17}, [r1]
   11234:	vld1.64	{d20-d21}, [r3]
   11238:	add	r1, r6, #32
   1123c:	vldr	d22, [r0]
   11240:	add	r0, r6, #16
   11244:	vst1.64	{d16-d17}, [r1]
   11248:	movw	r1, #22563	; 0x5823
   1124c:	vst1.64	{d20-d21}, [r0]
   11250:	mov	r0, r6
   11254:	vst1.64	{d18-d19}, [r0], r2
   11258:	movt	r1, #1
   1125c:	vstr	d22, [r0]
   11260:	mov	r0, r5
   11264:	bl	10df0 <strcmp@plt>
   11268:	cmp	r0, #0
   1126c:	ldrne	r1, [r6, #8]!
   11270:	cmpne	r1, #0
   11274:	bne	11260 <__assert_fail@plt+0x248>
   11278:	ldr	r6, [r6, #4]
   1127c:	movw	r1, #22658	; 0x5882
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10e5c <dcgettext@plt>
   11290:	movw	r2, #22374	; 0x5766
   11294:	movw	r3, #22681	; 0x5899
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r2, #1
   112a4:	movt	r3, #1
   112a8:	bl	10f58 <__printf_chk@plt>
   112ac:	cmp	r6, #0
   112b0:	mov	r0, #5
   112b4:	mov	r1, #0
   112b8:	moveq	r6, r5
   112bc:	bl	10fac <setlocale@plt>
   112c0:	cmp	r0, #0
   112c4:	beq	112fc <__assert_fail@plt+0x2e4>
   112c8:	movw	r1, #22721	; 0x58c1
   112cc:	mov	r2, #3
   112d0:	movt	r1, #1
   112d4:	bl	10ff4 <strncmp@plt>
   112d8:	cmp	r0, #0
   112dc:	beq	112fc <__assert_fail@plt+0x2e4>
   112e0:	movw	r1, #22725	; 0x58c5
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	movt	r1, #1
   112f0:	bl	10e5c <dcgettext@plt>
   112f4:	ldr	r1, [r7]
   112f8:	bl	10dd8 <fputs_unlocked@plt>
   112fc:	movw	r1, #22796	; 0x590c
   11300:	mov	r0, #0
   11304:	mov	r2, #5
   11308:	movt	r1, #1
   1130c:	bl	10e5c <dcgettext@plt>
   11310:	movw	r2, #22681	; 0x5899
   11314:	mov	r1, r0
   11318:	mov	r0, #1
   1131c:	mov	r3, r5
   11320:	movt	r2, #1
   11324:	bl	10f58 <__printf_chk@plt>
   11328:	movw	r1, #22823	; 0x5927
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10e5c <dcgettext@plt>
   1133c:	movw	r3, #22873	; 0x5959
   11340:	mov	r1, r0
   11344:	movw	r0, #22591	; 0x583f
   11348:	cmp	r6, r5
   1134c:	mov	r2, r6
   11350:	movt	r0, #1
   11354:	movt	r3, #1
   11358:	moveq	r3, r0
   1135c:	mov	r0, #1
   11360:	bl	10f58 <__printf_chk@plt>
   11364:	mov	r0, r4
   11368:	bl	10f1c <exit@plt>
   1136c:	movw	r0, #28992	; 0x7140
   11370:	movw	r1, #21868	; 0x556c
   11374:	mov	r2, #5
   11378:	movt	r0, #2
   1137c:	movt	r1, #1
   11380:	ldr	r5, [r0]
   11384:	mov	r0, #0
   11388:	bl	10e5c <dcgettext@plt>
   1138c:	mov	r2, r0
   11390:	movw	r0, #29084	; 0x719c
   11394:	mov	r1, #1
   11398:	movt	r0, #2
   1139c:	ldr	r3, [r0]
   113a0:	mov	r0, r5
   113a4:	bl	10f70 <__fprintf_chk@plt>
   113a8:	mov	r0, r4
   113ac:	bl	10f1c <exit@plt>
   113b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b4:	add	fp, sp, #28
   113b8:	sub	sp, sp, #36	; 0x24
   113bc:	mov	r5, r0
   113c0:	ldr	r0, [r1]
   113c4:	mov	r4, r1
   113c8:	bl	1266c <__assert_fail@plt+0x1654>
   113cc:	movw	r1, #22873	; 0x5959
   113d0:	mov	r0, #6
   113d4:	movt	r1, #1
   113d8:	bl	10fac <setlocale@plt>
   113dc:	movw	r6, #22378	; 0x576a
   113e0:	movw	r1, #22335	; 0x573f
   113e4:	movt	r6, #1
   113e8:	movt	r1, #1
   113ec:	mov	r0, r6
   113f0:	bl	10fe8 <bindtextdomain@plt>
   113f4:	mov	r0, r6
   113f8:	bl	10e74 <textdomain@plt>
   113fc:	movw	r0, #9088	; 0x2380
   11400:	movt	r0, #1
   11404:	bl	15544 <__assert_fail@plt+0x452c>
   11408:	movw	r8, #22359	; 0x5757
   1140c:	movw	r9, #22944	; 0x59a0
   11410:	mov	sl, #0
   11414:	mov	r0, #0
   11418:	movt	r8, #1
   1141c:	movt	r9, #1
   11420:	b	11428 <__assert_fail@plt+0x410>
   11424:	mov	r0, #1
   11428:	str	r0, [sp, #24]
   1142c:	b	11440 <__assert_fail@plt+0x428>
   11430:	movw	r0, #29016	; 0x7158
   11434:	mov	r1, #1
   11438:	movt	r0, #2
   1143c:	strb	r1, [r0]
   11440:	mov	r0, #0
   11444:	mov	r1, r4
   11448:	mov	r2, r8
   1144c:	mov	r3, r9
   11450:	str	r0, [sp]
   11454:	mov	r0, r5
   11458:	bl	10f04 <getopt_long@plt>
   1145c:	cmp	r0, #96	; 0x60
   11460:	ble	11480 <__assert_fail@plt+0x468>
   11464:	cmp	r0, #97	; 0x61
   11468:	beq	11430 <__assert_fail@plt+0x418>
   1146c:	cmp	r0, #116	; 0x74
   11470:	beq	114cc <__assert_fail@plt+0x4b4>
   11474:	cmp	r0, #256	; 0x100
   11478:	beq	11424 <__assert_fail@plt+0x40c>
   1147c:	b	114f8 <__assert_fail@plt+0x4e0>
   11480:	cmp	r0, #43	; 0x2b
   11484:	bgt	114a4 <__assert_fail@plt+0x48c>
   11488:	cmn	r0, #1
   1148c:	beq	11560 <__assert_fail@plt+0x548>
   11490:	cmn	r0, #3
   11494:	beq	11948 <__assert_fail@plt+0x930>
   11498:	cmn	r0, #2
   1149c:	bne	114f8 <__assert_fail@plt+0x4e0>
   114a0:	b	11990 <__assert_fail@plt+0x978>
   114a4:	cmp	r0, #44	; 0x2c
   114a8:	bne	114f0 <__assert_fail@plt+0x4d8>
   114ac:	tst	sl, #1
   114b0:	mov	sl, #0
   114b4:	beq	11440 <__assert_fail@plt+0x428>
   114b8:	mov	r0, r6
   114bc:	mov	r1, r7
   114c0:	bl	119c4 <__assert_fail@plt+0x9ac>
   114c4:	mov	sl, #0
   114c8:	b	11440 <__assert_fail@plt+0x428>
   114cc:	movw	r0, #29016	; 0x7158
   114d0:	mov	r1, #1
   114d4:	movt	r0, #2
   114d8:	strb	r1, [r0]
   114dc:	movw	r0, #29008	; 0x7150
   114e0:	movt	r0, #2
   114e4:	ldr	r0, [r0]
   114e8:	bl	11ad8 <__assert_fail@plt+0xac0>
   114ec:	b	11440 <__assert_fail@plt+0x428>
   114f0:	cmp	r0, #63	; 0x3f
   114f4:	beq	11998 <__assert_fail@plt+0x980>
   114f8:	ands	r1, sl, #1
   114fc:	moveq	r7, r1
   11500:	moveq	r6, r1
   11504:	movw	r1, #39321	; 0x9999
   11508:	movt	r1, #39321	; 0x9999
   1150c:	subs	r1, r1, r6
   11510:	movw	r1, #39321	; 0x9999
   11514:	movt	r1, #6553	; 0x1999
   11518:	sbcs	r1, r1, r7
   1151c:	bcc	11554 <__assert_fail@plt+0x53c>
   11520:	mov	r1, #10
   11524:	add	r3, r7, r7, lsl #2
   11528:	sub	r0, r0, #48	; 0x30
   1152c:	mov	sl, #1
   11530:	umull	r1, r2, r6, r1
   11534:	add	r2, r2, r3, lsl #1
   11538:	adds	r1, r1, r0
   1153c:	adc	r0, r2, r0, asr #31
   11540:	subs	r2, r1, r6
   11544:	mov	r6, r1
   11548:	sbcs	r2, r0, r7
   1154c:	mov	r7, r0
   11550:	bcs	11440 <__assert_fail@plt+0x428>
   11554:	movw	r1, #22404	; 0x5784
   11558:	movt	r1, #1
   1155c:	b	119a8 <__assert_fail@plt+0x990>
   11560:	ldr	r0, [sp, #24]
   11564:	tst	r0, #1
   11568:	movwne	r1, #29016	; 0x7158
   1156c:	movne	r0, #0
   11570:	movtne	r1, #2
   11574:	strbne	r0, [r1]
   11578:	tst	sl, #1
   1157c:	beq	1158c <__assert_fail@plt+0x574>
   11580:	mov	r0, r6
   11584:	mov	r1, r7
   11588:	bl	119c4 <__assert_fail@plt+0x9ac>
   1158c:	bl	11e70 <__assert_fail@plt+0xe58>
   11590:	movw	r0, #28984	; 0x7138
   11594:	movt	r0, #2
   11598:	ldr	r1, [r0]
   1159c:	mov	r0, #0
   115a0:	cmp	r1, r5
   115a4:	addlt	r0, r4, r1, lsl #2
   115a8:	bl	120ac <__assert_fail@plt+0x1094>
   115ac:	mov	r0, #0
   115b0:	bl	120dc <__assert_fail@plt+0x10c4>
   115b4:	cmp	r0, #0
   115b8:	beq	11930 <__assert_fail@plt+0x918>
   115bc:	mov	r1, r0
   115c0:	movw	r0, #29392	; 0x72d0
   115c4:	movt	r0, #2
   115c8:	mov	r4, r1
   115cc:	ldr	r0, [r0]
   115d0:	bl	14a90 <__assert_fail@plt+0x3a78>
   115d4:	mov	r3, r4
   115d8:	str	r0, [sp, #12]
   115dc:	mov	r8, #0
   115e0:	mov	r0, #0
   115e4:	mov	r4, #1
   115e8:	mov	sl, #0
   115ec:	mov	r6, #1
   115f0:	mov	ip, #0
   115f4:	str	r8, [sp, #32]
   115f8:	str	r0, [sp, #20]
   115fc:	ldmib	r3, {r0, r1}
   11600:	cmp	r0, r1
   11604:	bcs	11824 <__assert_fail@plt+0x80c>
   11608:	add	r1, r0, #1
   1160c:	str	r1, [r3, #4]
   11610:	ldrb	r7, [r0]
   11614:	tst	r4, #1
   11618:	beq	11884 <__assert_fail@plt+0x86c>
   1161c:	str	r6, [sp, #16]
   11620:	mov	r4, ip
   11624:	str	r3, [sp, #24]
   11628:	bl	10f10 <__ctype_b_loc@plt>
   1162c:	ldr	r0, [r0]
   11630:	add	r0, r0, r7, lsl #1
   11634:	ldrh	r0, [r0]
   11638:	ands	r6, r0, #1
   1163c:	beq	11678 <__assert_fail@plt+0x660>
   11640:	mov	r0, r8
   11644:	mov	r1, sl
   11648:	add	r2, sp, #32
   1164c:	add	r3, sp, #31
   11650:	bl	11fa8 <__assert_fail@plt+0xf90>
   11654:	mov	r5, r0
   11658:	ldrb	r0, [sp, #31]
   1165c:	cmp	r0, #0
   11660:	beq	116e8 <__assert_fail@plt+0x6d0>
   11664:	ldr	r3, [sp, #24]
   11668:	mov	r5, r8
   1166c:	mov	r9, sl
   11670:	mov	r2, r4
   11674:	b	11768 <__assert_fail@plt+0x750>
   11678:	cmp	r7, #8
   1167c:	mov	r2, r4
   11680:	bne	116c4 <__assert_fail@plt+0x6ac>
   11684:	ldr	r0, [sp, #32]
   11688:	ldr	r3, [sp, #24]
   1168c:	mov	r7, #8
   11690:	cmp	r0, #0
   11694:	subne	r0, r0, #1
   11698:	subs	r5, r8, #1
   1169c:	str	r0, [sp, #32]
   116a0:	orr	r0, r8, sl
   116a4:	sbc	r9, sl, #0
   116a8:	cmp	r0, #0
   116ac:	moveq	r5, r8
   116b0:	moveq	r9, sl
   116b4:	mov	r8, #1
   116b8:	cmp	r2, #0
   116bc:	bne	11778 <__assert_fail@plt+0x760>
   116c0:	b	117cc <__assert_fail@plt+0x7b4>
   116c4:	ldr	r3, [sp, #24]
   116c8:	adds	r5, r8, #1
   116cc:	mov	r8, #1
   116d0:	adc	r9, sl, #0
   116d4:	orrs	r0, r5, r9
   116d8:	beq	119a0 <__assert_fail@plt+0x988>
   116dc:	cmp	r2, #0
   116e0:	bne	11778 <__assert_fail@plt+0x760>
   116e4:	b	117cc <__assert_fail@plt+0x7b4>
   116e8:	mov	r9, r1
   116ec:	subs	r1, r5, r8
   116f0:	sbcs	r1, r9, sl
   116f4:	bcc	119a0 <__assert_fail@plt+0x988>
   116f8:	mov	ip, r4
   116fc:	cmp	r7, #9
   11700:	bne	11714 <__assert_fail@plt+0x6fc>
   11704:	ldr	r3, [sp, #24]
   11708:	cmp	ip, #0
   1170c:	bne	11750 <__assert_fail@plt+0x738>
   11710:	b	1175c <__assert_fail@plt+0x744>
   11714:	adds	r8, r8, #1
   11718:	ldr	r3, [sp, #16]
   1171c:	adc	sl, sl, #0
   11720:	eor	r1, r8, r5
   11724:	eor	r2, sl, r9
   11728:	orrs	r1, r1, r2
   1172c:	mov	r2, r1
   11730:	mvn	r3, r3
   11734:	movwne	r2, #1
   11738:	orr	r2, r3, r2
   1173c:	tst	r2, #1
   11740:	bne	117f4 <__assert_fail@plt+0x7dc>
   11744:	ldr	r3, [sp, #24]
   11748:	mov	r5, r8
   1174c:	mov	r9, sl
   11750:	ldr	r1, [sp, #12]
   11754:	mov	r2, #9
   11758:	strb	r2, [r1]
   1175c:	ldr	r1, [sp, #20]
   11760:	mov	r7, #9
   11764:	and	r2, r1, #1
   11768:	clz	r0, r0
   1176c:	lsr	r8, r0, #5
   11770:	cmp	r2, #0
   11774:	beq	117cc <__assert_fail@plt+0x7b4>
   11778:	mov	r4, r6
   1177c:	cmp	r2, #1
   11780:	beq	11798 <__assert_fail@plt+0x780>
   11784:	ldr	r0, [sp, #20]
   11788:	tst	r0, #1
   1178c:	ldrne	r0, [sp, #12]
   11790:	movne	r1, #9
   11794:	strbne	r1, [r0]
   11798:	movw	r0, #29004	; 0x714c
   1179c:	mov	r1, #1
   117a0:	mov	r6, r2
   117a4:	movt	r0, #2
   117a8:	ldr	r3, [r0]
   117ac:	ldr	r0, [sp, #12]
   117b0:	bl	10e44 <fwrite_unlocked@plt>
   117b4:	ldr	r3, [sp, #24]
   117b8:	mov	r1, #0
   117bc:	cmp	r0, r6
   117c0:	mov	r6, r4
   117c4:	str	r1, [sp, #20]
   117c8:	bne	118fc <__assert_fail@plt+0x8e4>
   117cc:	movw	r0, #29016	; 0x7158
   117d0:	mov	ip, #0
   117d4:	movt	r0, #2
   117d8:	ldrb	r0, [r0]
   117dc:	orrs	r0, r6, r0
   117e0:	movwne	r0, #1
   117e4:	and	r4, r8, r0
   117e8:	cmn	r7, #1
   117ec:	bgt	11898 <__assert_fail@plt+0x880>
   117f0:	b	11928 <__assert_fail@plt+0x910>
   117f4:	ldr	r0, [sp, #12]
   117f8:	ldr	r3, [sp, #24]
   117fc:	mov	r4, #1
   11800:	mov	r6, #1
   11804:	strb	r7, [r0, ip]
   11808:	clz	r0, r1
   1180c:	ldr	r1, [sp, #20]
   11810:	add	ip, ip, #1
   11814:	lsr	r0, r0, #5
   11818:	orr	r1, r1, r0
   1181c:	str	r1, [sp, #20]
   11820:	b	118c8 <__assert_fail@plt+0x8b0>
   11824:	mov	r0, r3
   11828:	mov	r9, r6
   1182c:	mov	r6, ip
   11830:	mov	r5, r3
   11834:	bl	10f94 <__uflow@plt>
   11838:	mov	r7, r0
   1183c:	cmn	r0, #1
   11840:	bgt	11870 <__assert_fail@plt+0x858>
   11844:	mov	r0, r5
   11848:	bl	120dc <__assert_fail@plt+0x10c4>
   1184c:	mov	ip, r6
   11850:	mov	r3, r0
   11854:	cmp	r0, #0
   11858:	mov	r6, r9
   1185c:	bne	115fc <__assert_fail@plt+0x5e4>
   11860:	mov	r3, #0
   11864:	tst	r4, #1
   11868:	bne	1161c <__assert_fail@plt+0x604>
   1186c:	b	11884 <__assert_fail@plt+0x86c>
   11870:	mov	ip, r6
   11874:	mov	r3, r5
   11878:	mov	r6, r9
   1187c:	tst	r4, #1
   11880:	bne	1161c <__assert_fail@plt+0x604>
   11884:	mov	r4, #0
   11888:	mov	r5, r8
   1188c:	mov	r9, sl
   11890:	cmn	r7, #1
   11894:	ble	11928 <__assert_fail@plt+0x910>
   11898:	movw	r0, #29004	; 0x714c
   1189c:	movt	r0, #2
   118a0:	ldr	r0, [r0]
   118a4:	ldr	r1, [r0, #20]
   118a8:	ldr	r2, [r0, #24]
   118ac:	cmp	r1, r2
   118b0:	bcs	118d4 <__assert_fail@plt+0x8bc>
   118b4:	add	r2, r1, #1
   118b8:	mov	r8, r5
   118bc:	mov	sl, r9
   118c0:	str	r2, [r0, #20]
   118c4:	strb	r7, [r1]
   118c8:	cmp	r7, #10
   118cc:	bne	115fc <__assert_fail@plt+0x5e4>
   118d0:	b	115dc <__assert_fail@plt+0x5c4>
   118d4:	uxtb	r1, r7
   118d8:	mov	r8, r3
   118dc:	mov	sl, ip
   118e0:	bl	10fa0 <__overflow@plt>
   118e4:	mov	ip, sl
   118e8:	mov	r3, r8
   118ec:	cmn	r0, #1
   118f0:	mov	r8, r5
   118f4:	mov	sl, r9
   118f8:	bgt	118c8 <__assert_fail@plt+0x8b0>
   118fc:	bl	10f34 <__errno_location@plt>
   11900:	ldr	r4, [r0]
   11904:	movw	r1, #22930	; 0x5992
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	movt	r1, #1
   11914:	bl	10e5c <dcgettext@plt>
   11918:	mov	r2, r0
   1191c:	mov	r0, #1
   11920:	mov	r1, r4
   11924:	bl	10ec8 <error@plt>
   11928:	ldr	r0, [sp, #12]
   1192c:	bl	125a0 <__assert_fail@plt+0x1588>
   11930:	bl	122c4 <__assert_fail@plt+0x12ac>
   11934:	movw	r0, #29020	; 0x715c
   11938:	movt	r0, #2
   1193c:	ldr	r0, [r0]
   11940:	sub	sp, fp, #28
   11944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11948:	movw	r0, #28904	; 0x70e8
   1194c:	movw	r2, #22388	; 0x5774
   11950:	mov	r1, #0
   11954:	movt	r0, #2
   11958:	movt	r2, #1
   1195c:	str	r1, [sp, #4]
   11960:	movw	r1, #22326	; 0x5736
   11964:	ldr	r3, [r0]
   11968:	movw	r0, #29004	; 0x714c
   1196c:	str	r2, [sp]
   11970:	movw	r2, #22374	; 0x5766
   11974:	movt	r1, #1
   11978:	movt	r0, #2
   1197c:	movt	r2, #1
   11980:	ldr	r0, [r0]
   11984:	bl	1485c <__assert_fail@plt+0x3844>
   11988:	mov	r0, #0
   1198c:	bl	10f1c <exit@plt>
   11990:	mov	r0, #0
   11994:	bl	11114 <__assert_fail@plt+0xfc>
   11998:	mov	r0, #1
   1199c:	bl	11114 <__assert_fail@plt+0xfc>
   119a0:	movw	r1, #22907	; 0x597b
   119a4:	movt	r1, #1
   119a8:	mov	r0, #0
   119ac:	mov	r2, #5
   119b0:	bl	10e5c <dcgettext@plt>
   119b4:	mov	r2, r0
   119b8:	mov	r0, #1
   119bc:	mov	r1, #0
   119c0:	bl	10ec8 <error@plt>
   119c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   119c8:	add	fp, sp, #24
   119cc:	movw	r8, #29024	; 0x7160
   119d0:	mov	r4, r1
   119d4:	mov	r6, r0
   119d8:	mov	r0, #0
   119dc:	movt	r8, #2
   119e0:	ldr	r1, [r8]
   119e4:	cmp	r1, #0
   119e8:	beq	11a04 <__assert_fail@plt+0x9ec>
   119ec:	movw	r2, #29028	; 0x7164
   119f0:	movt	r2, #2
   119f4:	ldr	r2, [r2]
   119f8:	add	r2, r2, r1, lsl #3
   119fc:	ldrd	r2, [r2, #-8]
   11a00:	b	11a0c <__assert_fail@plt+0x9f4>
   11a04:	mov	r2, #0
   11a08:	mov	r3, #0
   11a0c:	subs	r7, r6, r2
   11a10:	mov	r5, r6
   11a14:	sbcs	r7, r4, r3
   11a18:	movwcc	r0, #1
   11a1c:	cmp	r0, #0
   11a20:	mov	r0, r4
   11a24:	movne	r5, r2
   11a28:	movne	r0, r3
   11a2c:	subs	r7, r5, r2
   11a30:	sbc	r5, r0, r3
   11a34:	movw	r0, #29032	; 0x7168
   11a38:	movt	r0, #2
   11a3c:	ldr	r0, [r0]
   11a40:	cmp	r1, r0
   11a44:	bne	11a70 <__assert_fail@plt+0xa58>
   11a48:	movw	r9, #29028	; 0x7164
   11a4c:	movw	r1, #29032	; 0x7168
   11a50:	mov	r2, #8
   11a54:	movt	r9, #2
   11a58:	movt	r1, #2
   11a5c:	ldr	r0, [r9]
   11a60:	bl	14c3c <__assert_fail@plt+0x3c24>
   11a64:	ldr	r1, [r8]
   11a68:	str	r0, [r9]
   11a6c:	b	11a7c <__assert_fail@plt+0xa64>
   11a70:	movw	r0, #29028	; 0x7164
   11a74:	movt	r0, #2
   11a78:	ldr	r0, [r0]
   11a7c:	add	r2, r1, #1
   11a80:	str	r2, [r8]
   11a84:	str	r6, [r0, r1, lsl #3]!
   11a88:	str	r4, [r0, #4]
   11a8c:	movw	r0, #29392	; 0x72d0
   11a90:	movt	r0, #2
   11a94:	ldr	r1, [r0]
   11a98:	subs	r1, r1, r7
   11a9c:	rscs	r1, r5, #0
   11aa0:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   11aa4:	cmp	r5, #0
   11aa8:	bne	11ab4 <__assert_fail@plt+0xa9c>
   11aac:	str	r7, [r0]
   11ab0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ab4:	movw	r1, #23096	; 0x5a38
   11ab8:	mov	r0, #0
   11abc:	mov	r2, #5
   11ac0:	movt	r1, #1
   11ac4:	bl	10e5c <dcgettext@plt>
   11ac8:	mov	r2, r0
   11acc:	mov	r0, #1
   11ad0:	mov	r1, #0
   11ad4:	bl	10ec8 <error@plt>
   11ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11adc:	add	fp, sp, #28
   11ae0:	sub	sp, sp, #12
   11ae4:	mov	r5, r0
   11ae8:	mov	r0, #1
   11aec:	mov	r7, #0
   11af0:	mov	r8, #0
   11af4:	mov	r9, #0
   11af8:	mov	sl, #0
   11afc:	mov	r6, #0
   11b00:	str	r0, [sp, #4]
   11b04:	mov	r0, #0
   11b08:	str	r0, [sp, #8]
   11b0c:	b	11b18 <__assert_fail@plt+0xb00>
   11b10:	mov	r6, #0
   11b14:	add	r5, r5, #1
   11b18:	ldrb	r4, [r5]
   11b1c:	cmp	r4, #44	; 0x2c
   11b20:	beq	11b98 <__assert_fail@plt+0xb80>
   11b24:	cmp	r4, #0
   11b28:	beq	11d7c <__assert_fail@plt+0xd64>
   11b2c:	bl	10f10 <__ctype_b_loc@plt>
   11b30:	ldr	r0, [r0]
   11b34:	ldrb	r0, [r0, r4, lsl #1]
   11b38:	tst	r0, #1
   11b3c:	bne	11b98 <__assert_fail@plt+0xb80>
   11b40:	cmp	r4, #43	; 0x2b
   11b44:	beq	11c04 <__assert_fail@plt+0xbec>
   11b48:	cmp	r4, #47	; 0x2f
   11b4c:	bne	11c60 <__assert_fail@plt+0xc48>
   11b50:	mov	sl, #0
   11b54:	tst	r6, #1
   11b58:	beq	11d64 <__assert_fail@plt+0xd4c>
   11b5c:	movw	r1, #23119	; 0x5a4f
   11b60:	mov	r0, #0
   11b64:	mov	r2, #5
   11b68:	movt	r1, #1
   11b6c:	bl	10e5c <dcgettext@plt>
   11b70:	mov	r6, r0
   11b74:	mov	r0, r5
   11b78:	bl	142a0 <__assert_fail@plt+0x3288>
   11b7c:	mov	r3, r0
   11b80:	mov	r0, #0
   11b84:	mov	r1, #0
   11b88:	mov	r2, r6
   11b8c:	bl	10ec8 <error@plt>
   11b90:	mov	r9, #1
   11b94:	b	11c48 <__assert_fail@plt+0xc30>
   11b98:	tst	r6, #1
   11b9c:	beq	11b10 <__assert_fail@plt+0xaf8>
   11ba0:	tst	r9, #1
   11ba4:	beq	11bc8 <__assert_fail@plt+0xbb0>
   11ba8:	movw	r4, #29040	; 0x7170
   11bac:	movt	r4, #2
   11bb0:	ldrd	r0, [r4]
   11bb4:	orrs	r0, r0, r1
   11bb8:	bne	11da8 <__assert_fail@plt+0xd90>
   11bbc:	stm	r4, {r7, r8}
   11bc0:	mov	r9, #1
   11bc4:	b	11b10 <__assert_fail@plt+0xaf8>
   11bc8:	tst	sl, #1
   11bcc:	beq	11bec <__assert_fail@plt+0xbd4>
   11bd0:	movw	r4, #29048	; 0x7178
   11bd4:	movt	r4, #2
   11bd8:	ldrd	r0, [r4]
   11bdc:	orrs	r0, r0, r1
   11be0:	bne	11e40 <__assert_fail@plt+0xe28>
   11be4:	stm	r4, {r7, r8}
   11be8:	b	11c54 <__assert_fail@plt+0xc3c>
   11bec:	mov	r0, r7
   11bf0:	mov	r1, r8
   11bf4:	bl	119c4 <__assert_fail@plt+0x9ac>
   11bf8:	mov	r9, #0
   11bfc:	mov	sl, #0
   11c00:	b	11b10 <__assert_fail@plt+0xaf8>
   11c04:	tst	r6, #1
   11c08:	beq	11c54 <__assert_fail@plt+0xc3c>
   11c0c:	movw	r1, #23160	; 0x5a78
   11c10:	mov	r0, #0
   11c14:	mov	r2, #5
   11c18:	mov	r9, #0
   11c1c:	movt	r1, #1
   11c20:	bl	10e5c <dcgettext@plt>
   11c24:	mov	r6, r0
   11c28:	mov	r0, r5
   11c2c:	bl	142a0 <__assert_fail@plt+0x3288>
   11c30:	mov	r3, r0
   11c34:	mov	r0, #0
   11c38:	mov	r1, #0
   11c3c:	mov	r2, r6
   11c40:	bl	10ec8 <error@plt>
   11c44:	mov	sl, #1
   11c48:	mov	r0, #0
   11c4c:	str	r0, [sp, #4]
   11c50:	b	11d58 <__assert_fail@plt+0xd40>
   11c54:	mov	sl, #1
   11c58:	mov	r9, #0
   11c5c:	b	11b10 <__assert_fail@plt+0xaf8>
   11c60:	sub	r0, r4, #48	; 0x30
   11c64:	cmp	r0, #9
   11c68:	bhi	11e04 <__assert_fail@plt+0xdec>
   11c6c:	ldr	r2, [sp, #8]
   11c70:	ands	r1, r6, #1
   11c74:	movw	r3, #39321	; 0x9999
   11c78:	movt	r3, #39321	; 0x9999
   11c7c:	moveq	r2, r5
   11c80:	str	r2, [sp, #8]
   11c84:	mov	r2, r1
   11c88:	movne	r1, r7
   11c8c:	movne	r2, r8
   11c90:	subs	r3, r3, r1
   11c94:	movw	r3, #39321	; 0x9999
   11c98:	movt	r3, #6553	; 0x1999
   11c9c:	sbcs	r3, r3, r2
   11ca0:	bcc	11cd4 <__assert_fail@plt+0xcbc>
   11ca4:	mov	r3, #10
   11ca8:	add	r6, r2, r2, lsl #2
   11cac:	mov	r8, r2
   11cb0:	umull	r3, r7, r1, r3
   11cb4:	add	r7, r7, r6, lsl #1
   11cb8:	adds	r3, r3, r0
   11cbc:	mov	r6, #1
   11cc0:	adc	r0, r7, r0, asr #31
   11cc4:	subs	r7, r3, r1
   11cc8:	sbcs	r7, r0, r2
   11ccc:	mov	r7, r1
   11cd0:	bcs	11d6c <__assert_fail@plt+0xd54>
   11cd4:	str	sl, [sp]
   11cd8:	movw	r1, #23201	; 0x5aa1
   11cdc:	ldr	sl, [sp, #8]
   11ce0:	movt	r1, #1
   11ce4:	mov	r0, sl
   11ce8:	bl	1100c <strspn@plt>
   11cec:	mov	r5, r0
   11cf0:	mov	r0, sl
   11cf4:	mov	r1, r5
   11cf8:	bl	14f68 <__assert_fail@plt+0x3f50>
   11cfc:	movw	r1, #23212	; 0x5aac
   11d00:	mov	r6, r0
   11d04:	mov	r0, #0
   11d08:	mov	r2, #5
   11d0c:	str	r0, [sp, #4]
   11d10:	mov	r0, #0
   11d14:	movt	r1, #1
   11d18:	bl	10e5c <dcgettext@plt>
   11d1c:	mov	r4, r8
   11d20:	mov	r8, r0
   11d24:	mov	r0, r6
   11d28:	bl	142a0 <__assert_fail@plt+0x3288>
   11d2c:	mov	r3, r0
   11d30:	mov	r2, r8
   11d34:	mov	r0, #0
   11d38:	mov	r1, #0
   11d3c:	mov	r8, r4
   11d40:	bl	10ec8 <error@plt>
   11d44:	mov	r0, r6
   11d48:	bl	125a0 <__assert_fail@plt+0x1588>
   11d4c:	add	r0, sl, r5
   11d50:	ldr	sl, [sp]
   11d54:	sub	r5, r0, #1
   11d58:	mov	r6, #1
   11d5c:	add	r5, r5, #1
   11d60:	b	11b18 <__assert_fail@plt+0xb00>
   11d64:	mov	r9, #1
   11d68:	b	11b10 <__assert_fail@plt+0xaf8>
   11d6c:	mov	r7, r3
   11d70:	mov	r8, r0
   11d74:	add	r5, r5, #1
   11d78:	b	11b18 <__assert_fail@plt+0xb00>
   11d7c:	ldr	r1, [sp, #4]
   11d80:	and	r0, r1, r6
   11d84:	tst	r0, #1
   11d88:	beq	11db4 <__assert_fail@plt+0xd9c>
   11d8c:	tst	r9, #1
   11d90:	beq	11dc8 <__assert_fail@plt+0xdb0>
   11d94:	movw	r4, #29040	; 0x7170
   11d98:	movt	r4, #2
   11d9c:	ldrd	r0, [r4]
   11da0:	orrs	r0, r0, r1
   11da4:	beq	11de4 <__assert_fail@plt+0xdcc>
   11da8:	movw	r1, #23762	; 0x5cd2
   11dac:	movt	r1, #1
   11db0:	b	11e48 <__assert_fail@plt+0xe30>
   11db4:	tst	r1, #1
   11db8:	subne	sp, fp, #28
   11dbc:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dc0:	mov	r0, #1
   11dc4:	bl	10f1c <exit@plt>
   11dc8:	tst	sl, #1
   11dcc:	beq	11df0 <__assert_fail@plt+0xdd8>
   11dd0:	movw	r4, #29048	; 0x7178
   11dd4:	movt	r4, #2
   11dd8:	ldrd	r0, [r4]
   11ddc:	orrs	r0, r0, r1
   11de0:	bne	11e40 <__assert_fail@plt+0xe28>
   11de4:	stm	r4, {r7, r8}
   11de8:	sub	sp, fp, #28
   11dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11df0:	mov	r0, r7
   11df4:	mov	r1, r8
   11df8:	sub	sp, fp, #28
   11dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e00:	b	119c4 <__assert_fail@plt+0x9ac>
   11e04:	movw	r1, #23237	; 0x5ac5
   11e08:	mov	r0, #0
   11e0c:	mov	r2, #5
   11e10:	movt	r1, #1
   11e14:	bl	10e5c <dcgettext@plt>
   11e18:	mov	r4, r0
   11e1c:	mov	r0, r5
   11e20:	bl	142a0 <__assert_fail@plt+0x3288>
   11e24:	mov	r3, r0
   11e28:	mov	r0, #0
   11e2c:	mov	r1, #0
   11e30:	mov	r2, r4
   11e34:	bl	10ec8 <error@plt>
   11e38:	mov	r0, #1
   11e3c:	bl	10f1c <exit@plt>
   11e40:	movw	r1, #23809	; 0x5d01
   11e44:	movt	r1, #1
   11e48:	mov	r0, #0
   11e4c:	mov	r2, #5
   11e50:	bl	10e5c <dcgettext@plt>
   11e54:	mov	r2, r0
   11e58:	mov	r0, #0
   11e5c:	mov	r1, #0
   11e60:	bl	10ec8 <error@plt>
   11e64:	mov	r0, #1
   11e68:	stm	r4, {r7, r8}
   11e6c:	bl	10f1c <exit@plt>
   11e70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e74:	add	fp, sp, #24
   11e78:	movw	r0, #29024	; 0x7160
   11e7c:	movt	r0, #2
   11e80:	ldr	r1, [r0]
   11e84:	movw	r0, #29028	; 0x7164
   11e88:	movt	r0, #2
   11e8c:	ldr	r0, [r0]
   11e90:	cmp	r1, #0
   11e94:	beq	11edc <__assert_fail@plt+0xec4>
   11e98:	mov	r2, #0
   11e9c:	mov	r3, r0
   11ea0:	mov	r6, #0
   11ea4:	mov	r4, #0
   11ea8:	ldr	r8, [r3]
   11eac:	ldr	r5, [r3, #4]
   11eb0:	orrs	r7, r8, r5
   11eb4:	beq	11f6c <__assert_fail@plt+0xf54>
   11eb8:	subs	r7, r6, r8
   11ebc:	sbcs	r7, r4, r5
   11ec0:	bcs	11f78 <__assert_fail@plt+0xf60>
   11ec4:	add	r2, r2, #1
   11ec8:	add	r3, r3, #8
   11ecc:	mov	r6, r8
   11ed0:	mov	r4, r5
   11ed4:	cmp	r2, r1
   11ed8:	bcc	11ea8 <__assert_fail@plt+0xe90>
   11edc:	movw	r2, #29040	; 0x7170
   11ee0:	movt	r2, #2
   11ee4:	ldrd	r4, [r2]
   11ee8:	movw	r2, #29048	; 0x7178
   11eec:	movt	r2, #2
   11ef0:	ldrd	r2, [r2]
   11ef4:	orrs	r7, r2, r3
   11ef8:	orrsne	r6, r4, r5
   11efc:	bne	11f9c <__assert_fail@plt+0xf84>
   11f00:	cmp	r1, #0
   11f04:	beq	11f2c <__assert_fail@plt+0xf14>
   11f08:	mov	r6, #0
   11f0c:	cmp	r1, #1
   11f10:	bne	11f58 <__assert_fail@plt+0xf40>
   11f14:	orr	r1, r4, r2
   11f18:	orr	r2, r5, r3
   11f1c:	mov	r7, #0
   11f20:	orrs	r1, r1, r2
   11f24:	ldrdeq	r6, [r0]
   11f28:	b	11f5c <__assert_fail@plt+0xf44>
   11f2c:	cmp	r7, #0
   11f30:	orr	r0, r4, r5
   11f34:	mov	r7, #0
   11f38:	movweq	r2, #8
   11f3c:	cmp	r0, #0
   11f40:	movw	r0, #29392	; 0x72d0
   11f44:	movne	r2, r4
   11f48:	movt	r0, #2
   11f4c:	str	r2, [r0]
   11f50:	mov	r6, r2
   11f54:	b	11f5c <__assert_fail@plt+0xf44>
   11f58:	mov	r7, #0
   11f5c:	movw	r0, #29056	; 0x7180
   11f60:	movt	r0, #2
   11f64:	strd	r6, [r0]
   11f68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f6c:	movw	r1, #23856	; 0x5d30
   11f70:	movt	r1, #1
   11f74:	b	11f80 <__assert_fail@plt+0xf68>
   11f78:	movw	r1, #23877	; 0x5d45
   11f7c:	movt	r1, #1
   11f80:	mov	r0, #0
   11f84:	mov	r2, #5
   11f88:	bl	10e5c <dcgettext@plt>
   11f8c:	mov	r2, r0
   11f90:	mov	r0, #1
   11f94:	mov	r1, #0
   11f98:	bl	10ec8 <error@plt>
   11f9c:	movw	r1, #23905	; 0x5d61
   11fa0:	movt	r1, #1
   11fa4:	b	11f80 <__assert_fail@plt+0xf68>
   11fa8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11fac:	add	fp, sp, #24
   11fb0:	mov	r9, r0
   11fb4:	mov	r0, #0
   11fb8:	mov	r8, r1
   11fbc:	strb	r0, [r3]
   11fc0:	movw	r0, #29056	; 0x7180
   11fc4:	movt	r0, #2
   11fc8:	ldrd	r6, [r0]
   11fcc:	orrs	r0, r6, r7
   11fd0:	bne	12034 <__assert_fail@plt+0x101c>
   11fd4:	movw	r0, #29024	; 0x7160
   11fd8:	ldr	r1, [r2]
   11fdc:	movt	r0, #2
   11fe0:	ldr	r0, [r0]
   11fe4:	cmp	r1, r0
   11fe8:	bcs	12020 <__assert_fail@plt+0x1008>
   11fec:	movw	r7, #29028	; 0x7164
   11ff0:	movt	r7, #2
   11ff4:	ldr	r7, [r7]
   11ff8:	add	r4, r7, r1, lsl #3
   11ffc:	ldrd	r6, [r4]
   12000:	subs	r5, r9, r6
   12004:	sbcs	r5, r8, r7
   12008:	bcc	12058 <__assert_fail@plt+0x1040>
   1200c:	add	r1, r1, #1
   12010:	add	r4, r4, #8
   12014:	cmp	r1, r0
   12018:	str	r1, [r2]
   1201c:	bcc	11ffc <__assert_fail@plt+0xfe4>
   12020:	movw	r1, #29040	; 0x7170
   12024:	movt	r1, #2
   12028:	ldrd	r6, [r1]
   1202c:	orrs	r1, r6, r7
   12030:	beq	12064 <__assert_fail@plt+0x104c>
   12034:	mov	r0, r9
   12038:	mov	r1, r8
   1203c:	mov	r2, r6
   12040:	mov	r3, r7
   12044:	bl	1536c <__assert_fail@plt+0x4354>
   12048:	adds	r0, r6, r9
   1204c:	adc	r1, r7, r8
   12050:	subs	r6, r0, r2
   12054:	sbc	r7, r1, r3
   12058:	mov	r0, r6
   1205c:	mov	r1, r7
   12060:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12064:	movw	r1, #29048	; 0x7178
   12068:	movt	r1, #2
   1206c:	ldrd	r6, [r1]
   12070:	orrs	r1, r6, r7
   12074:	beq	12098 <__assert_fail@plt+0x1080>
   12078:	movw	r1, #29028	; 0x7164
   1207c:	movt	r1, #2
   12080:	ldr	r1, [r1]
   12084:	add	r0, r1, r0, lsl #3
   12088:	ldrd	r0, [r0, #-8]
   1208c:	subs	r0, r9, r0
   12090:	sbc	r1, r8, r1
   12094:	b	1203c <__assert_fail@plt+0x1024>
   12098:	mov	r0, #1
   1209c:	mov	r6, #0
   120a0:	mov	r7, #0
   120a4:	strb	r0, [r3]
   120a8:	b	12058 <__assert_fail@plt+0x1040>
   120ac:	movw	r1, #29064	; 0x7188
   120b0:	mov	r2, #0
   120b4:	cmp	r0, #0
   120b8:	movt	r1, #2
   120bc:	strb	r2, [r1]
   120c0:	movw	r1, #28896	; 0x70e0
   120c4:	movt	r1, #2
   120c8:	movne	r1, r0
   120cc:	movw	r0, #29068	; 0x718c
   120d0:	movt	r0, #2
   120d4:	str	r1, [r0]
   120d8:	bx	lr
   120dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120e0:	add	fp, sp, #28
   120e4:	sub	sp, sp, #4
   120e8:	cmp	r0, #0
   120ec:	beq	12188 <__assert_fail@plt+0x1170>
   120f0:	movw	r8, #29072	; 0x7190
   120f4:	movt	r8, #2
   120f8:	ldr	r7, [r8]
   120fc:	cmp	r7, #0
   12100:	beq	122a4 <__assert_fail@plt+0x128c>
   12104:	mov	r5, r0
   12108:	bl	10f34 <__errno_location@plt>
   1210c:	ldr	r1, [r5]
   12110:	mov	r6, r0
   12114:	ldr	r0, [r0]
   12118:	lsl	r1, r1, #26
   1211c:	and	r4, r0, r1, asr #31
   12120:	movw	r1, #24038	; 0x5de6
   12124:	mov	r0, r7
   12128:	movt	r1, #1
   1212c:	bl	10df0 <strcmp@plt>
   12130:	cmp	r0, #0
   12134:	beq	12290 <__assert_fail@plt+0x1278>
   12138:	mov	r0, r5
   1213c:	bl	124a8 <__assert_fail@plt+0x1490>
   12140:	cmp	r0, #0
   12144:	ldrne	r4, [r6]
   12148:	cmp	r4, #0
   1214c:	beq	12188 <__assert_fail@plt+0x1170>
   12150:	ldr	r2, [r8]
   12154:	mov	r0, #0
   12158:	mov	r1, #3
   1215c:	bl	13ff4 <__assert_fail@plt+0x2fdc>
   12160:	movw	r2, #23277	; 0x5aed
   12164:	mov	r3, r0
   12168:	mov	r0, #0
   1216c:	mov	r1, r4
   12170:	movt	r2, #1
   12174:	bl	10ec8 <error@plt>
   12178:	movw	r0, #29020	; 0x715c
   1217c:	mov	r1, #1
   12180:	movt	r0, #2
   12184:	str	r1, [r0]
   12188:	movw	r5, #29068	; 0x718c
   1218c:	movt	r5, #2
   12190:	ldr	r0, [r5]
   12194:	add	r1, r0, #4
   12198:	str	r1, [r5]
   1219c:	ldr	r7, [r0]
   121a0:	cmp	r7, #0
   121a4:	beq	12264 <__assert_fail@plt+0x124c>
   121a8:	movw	sl, #23277	; 0x5aed
   121ac:	movw	r9, #29020	; 0x715c
   121b0:	mov	r8, #1
   121b4:	movt	sl, #1
   121b8:	movt	r9, #2
   121bc:	movw	r1, #24038	; 0x5de6
   121c0:	mov	r0, r7
   121c4:	movt	r1, #1
   121c8:	bl	10df0 <strcmp@plt>
   121cc:	cmp	r0, #0
   121d0:	beq	121f4 <__assert_fail@plt+0x11dc>
   121d4:	movw	r1, #22940	; 0x599c
   121d8:	mov	r0, r7
   121dc:	movt	r1, #1
   121e0:	bl	10fdc <fopen64@plt>
   121e4:	mov	r6, r0
   121e8:	cmp	r6, #0
   121ec:	beq	12214 <__assert_fail@plt+0x11fc>
   121f0:	b	1226c <__assert_fail@plt+0x1254>
   121f4:	movw	r0, #29064	; 0x7188
   121f8:	movt	r0, #2
   121fc:	strb	r8, [r0]
   12200:	movw	r0, #29000	; 0x7148
   12204:	movt	r0, #2
   12208:	ldr	r6, [r0]
   1220c:	cmp	r6, #0
   12210:	bne	1226c <__assert_fail@plt+0x1254>
   12214:	bl	10f34 <__errno_location@plt>
   12218:	ldr	r4, [r0]
   1221c:	mov	r0, #0
   12220:	mov	r1, #3
   12224:	mov	r2, r7
   12228:	mov	r6, #0
   1222c:	bl	13ff4 <__assert_fail@plt+0x2fdc>
   12230:	mov	r3, r0
   12234:	mov	r0, #0
   12238:	mov	r1, r4
   1223c:	mov	r2, sl
   12240:	bl	10ec8 <error@plt>
   12244:	ldr	r0, [r5]
   12248:	str	r8, [r9]
   1224c:	add	r1, r0, #4
   12250:	str	r1, [r5]
   12254:	ldr	r7, [r0]
   12258:	cmp	r7, #0
   1225c:	bne	121bc <__assert_fail@plt+0x11a4>
   12260:	b	12284 <__assert_fail@plt+0x126c>
   12264:	mov	r6, #0
   12268:	b	12284 <__assert_fail@plt+0x126c>
   1226c:	movw	r0, #29072	; 0x7190
   12270:	mov	r1, #2
   12274:	movt	r0, #2
   12278:	str	r7, [r0]
   1227c:	mov	r0, r6
   12280:	bl	1246c <__assert_fail@plt+0x1454>
   12284:	mov	r0, r6
   12288:	sub	sp, fp, #28
   1228c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12290:	mov	r0, r5
   12294:	bl	10fd0 <clearerr_unlocked@plt>
   12298:	cmp	r4, #0
   1229c:	bne	12150 <__assert_fail@plt+0x1138>
   122a0:	b	12188 <__assert_fail@plt+0x1170>
   122a4:	movw	r0, #23280	; 0x5af0
   122a8:	movw	r1, #23290	; 0x5afa
   122ac:	movw	r3, #23310	; 0x5b0e
   122b0:	mov	r2, #340	; 0x154
   122b4:	movt	r0, #1
   122b8:	movt	r1, #1
   122bc:	movt	r3, #1
   122c0:	bl	11018 <__assert_fail@plt>
   122c4:	push	{fp, lr}
   122c8:	mov	fp, sp
   122cc:	movw	r0, #29064	; 0x7188
   122d0:	movt	r0, #2
   122d4:	ldrb	r0, [r0]
   122d8:	cmp	r0, #1
   122dc:	popne	{fp, pc}
   122e0:	movw	r0, #29000	; 0x7148
   122e4:	movt	r0, #2
   122e8:	ldr	r0, [r0]
   122ec:	bl	124a8 <__assert_fail@plt+0x1490>
   122f0:	cmp	r0, #0
   122f4:	bne	122fc <__assert_fail@plt+0x12e4>
   122f8:	pop	{fp, pc}
   122fc:	bl	10f34 <__errno_location@plt>
   12300:	ldr	r1, [r0]
   12304:	movw	r2, #24038	; 0x5de6
   12308:	mov	r0, #1
   1230c:	movt	r2, #1
   12310:	bl	10ec8 <error@plt>
   12314:	push	{r4, sl, fp, lr}
   12318:	add	fp, sp, #8
   1231c:	movw	r1, #23334	; 0x5b26
   12320:	mov	r0, #0
   12324:	mov	r2, #5
   12328:	movt	r1, #1
   1232c:	bl	10e5c <dcgettext@plt>
   12330:	movw	r4, #29004	; 0x714c
   12334:	movt	r4, #2
   12338:	ldr	r1, [r4]
   1233c:	bl	10dd8 <fputs_unlocked@plt>
   12340:	movw	r1, #23397	; 0x5b65
   12344:	mov	r0, #0
   12348:	mov	r2, #5
   1234c:	movt	r1, #1
   12350:	bl	10e5c <dcgettext@plt>
   12354:	ldr	r1, [r4]
   12358:	pop	{r4, sl, fp, lr}
   1235c:	b	10dd8 <fputs_unlocked@plt>
   12360:	movw	r1, #29076	; 0x7194
   12364:	movt	r1, #2
   12368:	str	r0, [r1]
   1236c:	bx	lr
   12370:	movw	r1, #29080	; 0x7198
   12374:	movt	r1, #2
   12378:	strb	r0, [r1]
   1237c:	bx	lr
   12380:	push	{r4, r5, r6, sl, fp, lr}
   12384:	add	fp, sp, #16
   12388:	sub	sp, sp, #8
   1238c:	movw	r0, #29004	; 0x714c
   12390:	movt	r0, #2
   12394:	ldr	r0, [r0]
   12398:	bl	1510c <__assert_fail@plt+0x40f4>
   1239c:	cmp	r0, #0
   123a0:	beq	123c8 <__assert_fail@plt+0x13b0>
   123a4:	movw	r0, #29080	; 0x7198
   123a8:	movt	r0, #2
   123ac:	ldrb	r0, [r0]
   123b0:	cmp	r0, #0
   123b4:	beq	123e8 <__assert_fail@plt+0x13d0>
   123b8:	bl	10f34 <__errno_location@plt>
   123bc:	ldr	r0, [r0]
   123c0:	cmp	r0, #32
   123c4:	bne	123e8 <__assert_fail@plt+0x13d0>
   123c8:	movw	r0, #28992	; 0x7140
   123cc:	movt	r0, #2
   123d0:	ldr	r0, [r0]
   123d4:	bl	1510c <__assert_fail@plt+0x40f4>
   123d8:	cmp	r0, #0
   123dc:	subeq	sp, fp, #16
   123e0:	popeq	{r4, r5, r6, sl, fp, pc}
   123e4:	b	12458 <__assert_fail@plt+0x1440>
   123e8:	movw	r1, #22930	; 0x5992
   123ec:	mov	r0, #0
   123f0:	mov	r2, #5
   123f4:	movt	r1, #1
   123f8:	bl	10e5c <dcgettext@plt>
   123fc:	mov	r4, r0
   12400:	movw	r0, #29076	; 0x7194
   12404:	movt	r0, #2
   12408:	ldr	r6, [r0]
   1240c:	bl	10f34 <__errno_location@plt>
   12410:	ldr	r5, [r0]
   12414:	cmp	r6, #0
   12418:	bne	12434 <__assert_fail@plt+0x141c>
   1241c:	movw	r2, #23277	; 0x5aed
   12420:	mov	r0, #0
   12424:	mov	r1, r5
   12428:	mov	r3, r4
   1242c:	movt	r2, #1
   12430:	b	12454 <__assert_fail@plt+0x143c>
   12434:	mov	r0, r6
   12438:	bl	13f18 <__assert_fail@plt+0x2f00>
   1243c:	movw	r2, #23965	; 0x5d9d
   12440:	mov	r3, r0
   12444:	str	r4, [sp]
   12448:	mov	r0, #0
   1244c:	mov	r1, r5
   12450:	movt	r2, #1
   12454:	bl	10ec8 <error@plt>
   12458:	movw	r0, #28908	; 0x70ec
   1245c:	movt	r0, #2
   12460:	ldr	r0, [r0]
   12464:	bl	10e20 <_exit@plt>
   12468:	b	10dfc <posix_fadvise64@plt>
   1246c:	cmp	r0, #0
   12470:	bxeq	lr
   12474:	push	{r4, sl, fp, lr}
   12478:	add	fp, sp, #8
   1247c:	sub	sp, sp, #16
   12480:	mov	r4, r1
   12484:	bl	10f64 <fileno@plt>
   12488:	mov	r1, #0
   1248c:	mov	r2, #0
   12490:	mov	r3, #0
   12494:	str	r1, [sp]
   12498:	stmib	sp, {r1, r4}
   1249c:	bl	10dfc <posix_fadvise64@plt>
   124a0:	sub	sp, fp, #8
   124a4:	pop	{r4, sl, fp, pc}
   124a8:	push	{r4, r5, r6, sl, fp, lr}
   124ac:	add	fp, sp, #16
   124b0:	sub	sp, sp, #8
   124b4:	mov	r4, r0
   124b8:	bl	10f64 <fileno@plt>
   124bc:	cmn	r0, #1
   124c0:	ble	12534 <__assert_fail@plt+0x151c>
   124c4:	mov	r0, r4
   124c8:	bl	10eec <__freading@plt>
   124cc:	cmp	r0, #0
   124d0:	beq	124fc <__assert_fail@plt+0x14e4>
   124d4:	mov	r0, r4
   124d8:	bl	10f64 <fileno@plt>
   124dc:	mov	r1, #1
   124e0:	mov	r2, #0
   124e4:	mov	r3, #0
   124e8:	str	r1, [sp]
   124ec:	bl	10e98 <lseek64@plt>
   124f0:	and	r0, r0, r1
   124f4:	cmn	r0, #1
   124f8:	beq	12534 <__assert_fail@plt+0x151c>
   124fc:	mov	r0, r4
   12500:	bl	12544 <__assert_fail@plt+0x152c>
   12504:	cmp	r0, #0
   12508:	beq	12534 <__assert_fail@plt+0x151c>
   1250c:	bl	10f34 <__errno_location@plt>
   12510:	ldr	r6, [r0]
   12514:	mov	r5, r0
   12518:	mov	r0, r4
   1251c:	bl	10f7c <fclose@plt>
   12520:	cmp	r6, #0
   12524:	strne	r6, [r5]
   12528:	mvnne	r0, #0
   1252c:	sub	sp, fp, #16
   12530:	pop	{r4, r5, r6, sl, fp, pc}
   12534:	mov	r0, r4
   12538:	sub	sp, fp, #16
   1253c:	pop	{r4, r5, r6, sl, fp, lr}
   12540:	b	10f7c <fclose@plt>
   12544:	push	{r4, sl, fp, lr}
   12548:	add	fp, sp, #8
   1254c:	sub	sp, sp, #8
   12550:	mov	r4, r0
   12554:	cmp	r0, #0
   12558:	beq	12574 <__assert_fail@plt+0x155c>
   1255c:	mov	r0, r4
   12560:	bl	10eec <__freading@plt>
   12564:	cmp	r0, #0
   12568:	ldrbne	r0, [r4, #1]
   1256c:	tstne	r0, #1
   12570:	bne	12584 <__assert_fail@plt+0x156c>
   12574:	mov	r0, r4
   12578:	sub	sp, fp, #8
   1257c:	pop	{r4, sl, fp, lr}
   12580:	b	10e08 <fflush@plt>
   12584:	mov	r0, #1
   12588:	mov	r2, #0
   1258c:	mov	r3, #0
   12590:	str	r0, [sp]
   12594:	mov	r0, r4
   12598:	bl	125c8 <__assert_fail@plt+0x15b0>
   1259c:	b	12574 <__assert_fail@plt+0x155c>
   125a0:	push	{r4, r5, r6, sl, fp, lr}
   125a4:	add	fp, sp, #16
   125a8:	mov	r4, r0
   125ac:	bl	10f34 <__errno_location@plt>
   125b0:	ldr	r6, [r0]
   125b4:	mov	r5, r0
   125b8:	mov	r0, r4
   125bc:	bl	10e14 <free@plt>
   125c0:	str	r6, [r5]
   125c4:	pop	{r4, r5, r6, sl, fp, pc}
   125c8:	push	{r4, r5, r6, r7, fp, lr}
   125cc:	add	fp, sp, #16
   125d0:	sub	sp, sp, #8
   125d4:	mov	r4, r0
   125d8:	ldr	r0, [r0, #4]
   125dc:	mov	r5, r3
   125e0:	mov	r6, r2
   125e4:	ldr	r1, [r4, #8]
   125e8:	cmp	r1, r0
   125ec:	bne	12608 <__assert_fail@plt+0x15f0>
   125f0:	ldrd	r0, [r4, #16]
   125f4:	cmp	r1, r0
   125f8:	bne	12608 <__assert_fail@plt+0x15f0>
   125fc:	ldr	r0, [r4, #36]	; 0x24
   12600:	cmp	r0, #0
   12604:	beq	12620 <__assert_fail@plt+0x1608>
   12608:	mov	r0, r4
   1260c:	mov	r2, r6
   12610:	mov	r3, r5
   12614:	sub	sp, fp, #16
   12618:	pop	{r4, r5, r6, r7, fp, lr}
   1261c:	b	10f88 <fseeko64@plt>
   12620:	ldr	r7, [fp, #8]
   12624:	mov	r0, r4
   12628:	bl	10f64 <fileno@plt>
   1262c:	mov	r2, r6
   12630:	mov	r3, r5
   12634:	str	r7, [sp]
   12638:	bl	10e98 <lseek64@plt>
   1263c:	and	r2, r0, r1
   12640:	cmn	r2, #1
   12644:	mvneq	r0, #0
   12648:	subeq	sp, fp, #16
   1264c:	popeq	{r4, r5, r6, r7, fp, pc}
   12650:	strd	r0, [r4, #80]	; 0x50
   12654:	ldr	r0, [r4]
   12658:	bic	r0, r0, #16
   1265c:	str	r0, [r4]
   12660:	mov	r0, #0
   12664:	sub	sp, fp, #16
   12668:	pop	{r4, r5, r6, r7, fp, pc}
   1266c:	push	{r4, r5, fp, lr}
   12670:	add	fp, sp, #8
   12674:	cmp	r0, #0
   12678:	beq	1270c <__assert_fail@plt+0x16f4>
   1267c:	mov	r1, #47	; 0x2f
   12680:	mov	r4, r0
   12684:	bl	10fb8 <strrchr@plt>
   12688:	cmp	r0, #0
   1268c:	mov	r5, r4
   12690:	addne	r5, r0, #1
   12694:	sub	r0, r5, r4
   12698:	cmp	r0, #7
   1269c:	blt	126f0 <__assert_fail@plt+0x16d8>
   126a0:	movw	r1, #24028	; 0x5ddc
   126a4:	sub	r0, r5, #7
   126a8:	mov	r2, #7
   126ac:	movt	r1, #1
   126b0:	bl	10ff4 <strncmp@plt>
   126b4:	cmp	r0, #0
   126b8:	bne	126f0 <__assert_fail@plt+0x16d8>
   126bc:	movw	r1, #24036	; 0x5de4
   126c0:	mov	r0, r5
   126c4:	mov	r2, #3
   126c8:	movt	r1, #1
   126cc:	bl	10ff4 <strncmp@plt>
   126d0:	cmp	r0, #0
   126d4:	beq	126e0 <__assert_fail@plt+0x16c8>
   126d8:	mov	r4, r5
   126dc:	b	126f0 <__assert_fail@plt+0x16d8>
   126e0:	movw	r0, #28976	; 0x7130
   126e4:	add	r4, r5, #3
   126e8:	movt	r0, #2
   126ec:	str	r4, [r0]
   126f0:	movw	r0, #28980	; 0x7134
   126f4:	movt	r0, #2
   126f8:	str	r4, [r0]
   126fc:	movw	r0, #29084	; 0x719c
   12700:	movt	r0, #2
   12704:	str	r4, [r0]
   12708:	pop	{r4, r5, fp, pc}
   1270c:	movw	r0, #28992	; 0x7140
   12710:	mov	r1, #55	; 0x37
   12714:	mov	r2, #1
   12718:	movt	r0, #2
   1271c:	ldr	r3, [r0]
   12720:	movw	r0, #23972	; 0x5da4
   12724:	movt	r0, #1
   12728:	bl	10e8c <fwrite@plt>
   1272c:	bl	11000 <abort@plt>
   12730:	push	{r4, r5, r6, sl, fp, lr}
   12734:	add	fp, sp, #16
   12738:	mov	r4, r0
   1273c:	movw	r0, #29088	; 0x71a0
   12740:	movt	r0, #2
   12744:	cmp	r4, #0
   12748:	moveq	r4, r0
   1274c:	bl	10f34 <__errno_location@plt>
   12750:	ldr	r6, [r0]
   12754:	mov	r5, r0
   12758:	mov	r0, r4
   1275c:	mov	r1, #48	; 0x30
   12760:	bl	14ef0 <__assert_fail@plt+0x3ed8>
   12764:	str	r6, [r5]
   12768:	pop	{r4, r5, r6, sl, fp, pc}
   1276c:	movw	r1, #29088	; 0x71a0
   12770:	cmp	r0, #0
   12774:	movt	r1, #2
   12778:	movne	r1, r0
   1277c:	ldr	r0, [r1]
   12780:	bx	lr
   12784:	movw	r2, #29088	; 0x71a0
   12788:	cmp	r0, #0
   1278c:	movt	r2, #2
   12790:	movne	r2, r0
   12794:	str	r1, [r2]
   12798:	bx	lr
   1279c:	movw	r3, #29088	; 0x71a0
   127a0:	cmp	r0, #0
   127a4:	movt	r3, #2
   127a8:	movne	r3, r0
   127ac:	ubfx	r0, r1, #5, #3
   127b0:	and	r1, r1, #31
   127b4:	add	r0, r3, r0, lsl #2
   127b8:	ldr	r3, [r0, #8]
   127bc:	eor	r2, r2, r3, lsr r1
   127c0:	and	r2, r2, #1
   127c4:	eor	r2, r3, r2, lsl r1
   127c8:	str	r2, [r0, #8]
   127cc:	mov	r0, #1
   127d0:	and	r0, r0, r3, lsr r1
   127d4:	bx	lr
   127d8:	movw	r2, #29088	; 0x71a0
   127dc:	cmp	r0, #0
   127e0:	movt	r2, #2
   127e4:	movne	r2, r0
   127e8:	ldr	r0, [r2, #4]
   127ec:	str	r1, [r2, #4]
   127f0:	bx	lr
   127f4:	movw	r3, #29088	; 0x71a0
   127f8:	cmp	r0, #0
   127fc:	movt	r3, #2
   12800:	movne	r3, r0
   12804:	cmp	r1, #0
   12808:	mov	r0, #10
   1280c:	cmpne	r2, #0
   12810:	str	r0, [r3]
   12814:	bne	12824 <__assert_fail@plt+0x180c>
   12818:	push	{fp, lr}
   1281c:	mov	fp, sp
   12820:	bl	11000 <abort@plt>
   12824:	str	r1, [r3, #40]	; 0x28
   12828:	str	r2, [r3, #44]	; 0x2c
   1282c:	bx	lr
   12830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12834:	add	fp, sp, #28
   12838:	sub	sp, sp, #20
   1283c:	mov	r7, r0
   12840:	ldr	r0, [fp, #8]
   12844:	movw	r5, #29088	; 0x71a0
   12848:	mov	r8, r3
   1284c:	mov	r9, r2
   12850:	mov	sl, r1
   12854:	movt	r5, #2
   12858:	cmp	r0, #0
   1285c:	movne	r5, r0
   12860:	bl	10f34 <__errno_location@plt>
   12864:	mov	r4, r0
   12868:	ldm	r5, {r0, r1}
   1286c:	ldr	r2, [r5, #40]	; 0x28
   12870:	ldr	r3, [r5, #44]	; 0x2c
   12874:	add	r5, r5, #8
   12878:	ldr	r6, [r4]
   1287c:	stm	sp, {r0, r1, r5}
   12880:	str	r2, [sp, #12]
   12884:	str	r3, [sp, #16]
   12888:	mov	r0, r7
   1288c:	mov	r1, sl
   12890:	mov	r2, r9
   12894:	mov	r3, r8
   12898:	bl	128a8 <__assert_fail@plt+0x1890>
   1289c:	str	r6, [r4]
   128a0:	sub	sp, fp, #28
   128a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128ac:	add	fp, sp, #28
   128b0:	sub	sp, sp, #156	; 0x9c
   128b4:	str	r0, [sp, #80]	; 0x50
   128b8:	ldr	r0, [fp, #12]
   128bc:	mov	r6, r1
   128c0:	mov	r9, r3
   128c4:	str	r2, [fp, #-84]	; 0xffffffac
   128c8:	and	r1, r0, #4
   128cc:	str	r1, [sp, #32]
   128d0:	and	r1, r0, #1
   128d4:	str	r1, [sp, #36]	; 0x24
   128d8:	ubfx	r4, r0, #1, #1
   128dc:	bl	10ea4 <__ctype_get_mb_cur_max@plt>
   128e0:	str	r0, [sp, #40]	; 0x28
   128e4:	ldr	r0, [fp, #24]
   128e8:	ldr	r7, [fp, #8]
   128ec:	mov	r1, #0
   128f0:	mov	r5, #1
   128f4:	str	r1, [fp, #-56]	; 0xffffffc8
   128f8:	mov	r1, #0
   128fc:	str	r1, [sp, #60]	; 0x3c
   12900:	str	r0, [sp, #76]	; 0x4c
   12904:	ldr	r0, [fp, #20]
   12908:	str	r0, [sp, #72]	; 0x48
   1290c:	mov	r0, #0
   12910:	str	r0, [sp, #56]	; 0x38
   12914:	mov	r0, #0
   12918:	str	r0, [sp, #92]	; 0x5c
   1291c:	mov	r0, #0
   12920:	str	r0, [fp, #-76]	; 0xffffffb4
   12924:	mov	r0, #0
   12928:	cmp	r7, #10
   1292c:	bhi	138ac <__assert_fail@plt+0x2894>
   12930:	add	r1, pc, #28
   12934:	mov	sl, r6
   12938:	ldr	r6, [sp, #80]	; 0x50
   1293c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12940:	mov	r8, #0
   12944:	mov	r2, #1
   12948:	mov	r3, #0
   1294c:	mov	lr, r9
   12950:	ldr	pc, [r1, r7, lsl #2]
   12954:	andeq	r2, r1, r8, lsr sl
   12958:	andeq	r2, r1, r4, ror #20
   1295c:	andeq	r2, r1, r8, lsr #20
   12960:	andeq	r2, r1, r0, lsr #20
   12964:	andeq	r2, r1, r8, asr sl
   12968:	andeq	r2, r1, ip, lsr #21
   1296c:	andeq	r2, r1, r8, asr #20
   12970:	andeq	r2, r1, r8, lsl #22
   12974:	andeq	r2, r1, r0, lsl #19
   12978:	andeq	r2, r1, r0, lsl #19
   1297c:	andeq	r2, r1, r8, lsr #19
   12980:	movw	r0, #24118	; 0x5e36
   12984:	mov	r1, r7
   12988:	movt	r0, #1
   1298c:	bl	142b8 <__assert_fail@plt+0x32a0>
   12990:	str	r0, [sp, #72]	; 0x48
   12994:	movw	r0, #23948	; 0x5d8c
   12998:	mov	r1, r7
   1299c:	movt	r0, #1
   129a0:	bl	142b8 <__assert_fail@plt+0x32a0>
   129a4:	str	r0, [sp, #76]	; 0x4c
   129a8:	str	r5, [fp, #-48]	; 0xffffffd0
   129ac:	mov	r8, #0
   129b0:	mov	r5, r7
   129b4:	tst	r4, #1
   129b8:	bne	129f0 <__assert_fail@plt+0x19d8>
   129bc:	ldr	r0, [sp, #72]	; 0x48
   129c0:	ldrb	r0, [r0]
   129c4:	cmp	r0, #0
   129c8:	beq	129f0 <__assert_fail@plt+0x19d8>
   129cc:	ldr	r1, [sp, #72]	; 0x48
   129d0:	mov	r8, #0
   129d4:	add	r1, r1, #1
   129d8:	cmp	r8, sl
   129dc:	strbcc	r0, [r6, r8]
   129e0:	ldrb	r0, [r1, r8]
   129e4:	add	r8, r8, #1
   129e8:	cmp	r0, #0
   129ec:	bne	129d8 <__assert_fail@plt+0x19c0>
   129f0:	ldr	r7, [sp, #76]	; 0x4c
   129f4:	mov	r0, r7
   129f8:	bl	10f28 <strlen@plt>
   129fc:	str	r7, [sp, #92]	; 0x5c
   12a00:	mov	r7, r5
   12a04:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a08:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a0c:	str	r0, [fp, #-76]	; 0xffffffb4
   12a10:	mov	r2, #1
   12a14:	mov	r3, r4
   12a18:	mov	lr, r9
   12a1c:	b	12b08 <__assert_fail@plt+0x1af0>
   12a20:	mov	r0, #1
   12a24:	b	12a64 <__assert_fail@plt+0x1a4c>
   12a28:	tst	r4, #1
   12a2c:	bne	12a64 <__assert_fail@plt+0x1a4c>
   12a30:	mov	r2, r0
   12a34:	b	12a8c <__assert_fail@plt+0x1a74>
   12a38:	mov	r7, #0
   12a3c:	mov	r8, #0
   12a40:	mov	r2, r0
   12a44:	b	12b04 <__assert_fail@plt+0x1aec>
   12a48:	mov	r0, #1
   12a4c:	mov	r8, #0
   12a50:	mov	r7, #5
   12a54:	b	12ac0 <__assert_fail@plt+0x1aa8>
   12a58:	mov	r2, #1
   12a5c:	tst	r4, #1
   12a60:	beq	12a8c <__assert_fail@plt+0x1a74>
   12a64:	mov	r1, #1
   12a68:	mov	r8, #0
   12a6c:	mov	r7, #2
   12a70:	mov	r2, r0
   12a74:	mov	r3, #1
   12a78:	str	r1, [fp, #-76]	; 0xffffffb4
   12a7c:	movw	r1, #23948	; 0x5d8c
   12a80:	movt	r1, #1
   12a84:	str	r1, [sp, #92]	; 0x5c
   12a88:	b	12b08 <__assert_fail@plt+0x1af0>
   12a8c:	cmp	sl, #0
   12a90:	mov	r8, #1
   12a94:	mov	r7, #2
   12a98:	movne	r0, #39	; 0x27
   12a9c:	strbne	r0, [r6]
   12aa0:	movw	r0, #23948	; 0x5d8c
   12aa4:	movt	r0, #1
   12aa8:	b	12af8 <__assert_fail@plt+0x1ae0>
   12aac:	mov	r7, #5
   12ab0:	tst	r4, #1
   12ab4:	beq	12adc <__assert_fail@plt+0x1ac4>
   12ab8:	mov	r0, #1
   12abc:	mov	r8, #0
   12ac0:	str	r0, [fp, #-76]	; 0xffffffb4
   12ac4:	movw	r0, #24116	; 0x5e34
   12ac8:	mov	r2, #1
   12acc:	mov	r3, #1
   12ad0:	movt	r0, #1
   12ad4:	str	r0, [sp, #92]	; 0x5c
   12ad8:	b	12b08 <__assert_fail@plt+0x1af0>
   12adc:	cmp	sl, #0
   12ae0:	mov	r8, #1
   12ae4:	mov	r2, #1
   12ae8:	movne	r0, #34	; 0x22
   12aec:	strbne	r0, [r6]
   12af0:	movw	r0, #24116	; 0x5e34
   12af4:	movt	r0, #1
   12af8:	str	r0, [sp, #92]	; 0x5c
   12afc:	mov	r0, #1
   12b00:	str	r0, [fp, #-76]	; 0xffffffb4
   12b04:	mov	r3, #0
   12b08:	ldr	r0, [fp, #16]
   12b0c:	str	r3, [fp, #-72]	; 0xffffffb8
   12b10:	str	r7, [fp, #-64]	; 0xffffffc0
   12b14:	str	r2, [sp, #84]	; 0x54
   12b18:	cmp	r0, #0
   12b1c:	movwne	r0, #1
   12b20:	and	r0, r0, r3
   12b24:	str	r0, [fp, #-88]	; 0xffffffa8
   12b28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b2c:	cmp	r0, #0
   12b30:	movwne	r0, #1
   12b34:	subs	r4, r7, #2
   12b38:	mov	r7, #0
   12b3c:	and	r1, r0, r3
   12b40:	str	r4, [fp, #-80]	; 0xffffffb0
   12b44:	and	r1, r2, r1
   12b48:	str	r1, [sp, #48]	; 0x30
   12b4c:	clz	r1, r4
   12b50:	lsr	r1, r1, #5
   12b54:	and	r1, r1, r3
   12b58:	eor	r3, r3, #1
   12b5c:	str	r1, [sp, #64]	; 0x40
   12b60:	mov	r1, r4
   12b64:	str	r3, [sp, #88]	; 0x58
   12b68:	movwne	r1, #1
   12b6c:	orr	r3, r1, r3
   12b70:	and	r1, r1, r2
   12b74:	and	r0, r0, r1
   12b78:	str	r3, [sp, #68]	; 0x44
   12b7c:	str	r1, [fp, #-68]	; 0xffffffbc
   12b80:	str	r0, [fp, #-60]	; 0xffffffc4
   12b84:	eor	r0, r2, #1
   12b88:	str	r0, [sp, #52]	; 0x34
   12b8c:	cmn	lr, #1
   12b90:	beq	12ba0 <__assert_fail@plt+0x1b88>
   12b94:	cmp	r7, lr
   12b98:	bne	12bac <__assert_fail@plt+0x1b94>
   12b9c:	b	136d4 <__assert_fail@plt+0x26bc>
   12ba0:	ldrb	r0, [ip, r7]
   12ba4:	cmp	r0, #0
   12ba8:	beq	136dc <__assert_fail@plt+0x26c4>
   12bac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12bb0:	mov	r9, #0
   12bb4:	str	r5, [fp, #-48]	; 0xffffffd0
   12bb8:	cmp	r0, #0
   12bbc:	beq	12bf0 <__assert_fail@plt+0x1bd8>
   12bc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bc4:	add	r4, r7, r0
   12bc8:	cmp	r0, #2
   12bcc:	bcc	12be8 <__assert_fail@plt+0x1bd0>
   12bd0:	cmn	lr, #1
   12bd4:	bne	12be8 <__assert_fail@plt+0x1bd0>
   12bd8:	mov	r0, ip
   12bdc:	bl	10f28 <strlen@plt>
   12be0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12be4:	mov	lr, r0
   12be8:	cmp	r4, lr
   12bec:	bls	12bf8 <__assert_fail@plt+0x1be0>
   12bf0:	mov	r0, #0
   12bf4:	b	12c38 <__assert_fail@plt+0x1c20>
   12bf8:	ldr	r1, [sp, #92]	; 0x5c
   12bfc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c00:	add	r0, ip, r7
   12c04:	mov	r4, lr
   12c08:	bl	10e50 <memcmp@plt>
   12c0c:	ldr	r2, [sp, #88]	; 0x58
   12c10:	cmp	r0, #0
   12c14:	mov	r1, r0
   12c18:	movwne	r1, #1
   12c1c:	orr	r1, r1, r2
   12c20:	tst	r1, #1
   12c24:	beq	1376c <__assert_fail@plt+0x2754>
   12c28:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c2c:	clz	r0, r0
   12c30:	mov	lr, r4
   12c34:	lsr	r0, r0, #5
   12c38:	str	r0, [fp, #-52]	; 0xffffffcc
   12c3c:	ldrb	r5, [ip, r7]
   12c40:	cmp	r5, #126	; 0x7e
   12c44:	bhi	12ffc <__assert_fail@plt+0x1fe4>
   12c48:	add	r3, pc, #16
   12c4c:	mov	r4, #1
   12c50:	mov	r2, #110	; 0x6e
   12c54:	mov	r0, #97	; 0x61
   12c58:	mov	r1, #0
   12c5c:	ldr	pc, [r3, r5, lsl #2]
   12c60:	strdeq	r2, [r1], -r8
   12c64:	strdeq	r2, [r1], -ip
   12c68:	strdeq	r2, [r1], -ip
   12c6c:	strdeq	r2, [r1], -ip
   12c70:	strdeq	r2, [r1], -ip
   12c74:	strdeq	r2, [r1], -ip
   12c78:	strdeq	r2, [r1], -ip
   12c7c:	strheq	r3, [r1], -r0
   12c80:	ldrdeq	r2, [r1], -r8
   12c84:	ldrdeq	r2, [r1], -r0
   12c88:	andeq	r2, r1, r4, ror #29
   12c8c:	andeq	r2, r1, r4, ror #30
   12c90:	andeq	r2, r1, r8, asr #29
   12c94:	andeq	r2, r1, r0, ror #29
   12c98:	strdeq	r2, [r1], -ip
   12c9c:	strdeq	r2, [r1], -ip
   12ca0:	strdeq	r2, [r1], -ip
   12ca4:	strdeq	r2, [r1], -ip
   12ca8:	strdeq	r2, [r1], -ip
   12cac:	strdeq	r2, [r1], -ip
   12cb0:	strdeq	r2, [r1], -ip
   12cb4:	strdeq	r2, [r1], -ip
   12cb8:	strdeq	r2, [r1], -ip
   12cbc:	strdeq	r2, [r1], -ip
   12cc0:	strdeq	r2, [r1], -ip
   12cc4:	strdeq	r2, [r1], -ip
   12cc8:	strdeq	r2, [r1], -ip
   12ccc:	strdeq	r2, [r1], -ip
   12cd0:	strdeq	r2, [r1], -ip
   12cd4:	strdeq	r2, [r1], -ip
   12cd8:	strdeq	r2, [r1], -ip
   12cdc:	strdeq	r2, [r1], -ip
   12ce0:	andeq	r3, r1, r8, rrx
   12ce4:	andeq	r3, r1, ip, rrx
   12ce8:	andeq	r3, r1, ip, rrx
   12cec:	andeq	r2, r1, r0, ror lr
   12cf0:	andeq	r3, r1, ip, rrx
   12cf4:	andeq	r2, r1, ip, asr lr
   12cf8:	andeq	r3, r1, ip, rrx
   12cfc:	andeq	r2, r1, ip, ror #30
   12d00:	andeq	r3, r1, ip, rrx
   12d04:	andeq	r3, r1, ip, rrx
   12d08:	andeq	r3, r1, ip, rrx
   12d0c:	andeq	r2, r1, ip, asr lr
   12d10:	andeq	r2, r1, ip, asr lr
   12d14:	andeq	r2, r1, ip, asr lr
   12d18:	andeq	r2, r1, ip, asr lr
   12d1c:	andeq	r2, r1, ip, asr lr
   12d20:	andeq	r2, r1, ip, asr lr
   12d24:	andeq	r2, r1, ip, asr lr
   12d28:	andeq	r2, r1, ip, asr lr
   12d2c:	andeq	r2, r1, ip, asr lr
   12d30:	andeq	r2, r1, ip, asr lr
   12d34:	andeq	r2, r1, ip, asr lr
   12d38:	andeq	r2, r1, ip, asr lr
   12d3c:	andeq	r2, r1, ip, asr lr
   12d40:	andeq	r2, r1, ip, asr lr
   12d44:	andeq	r2, r1, ip, asr lr
   12d48:	andeq	r2, r1, ip, asr lr
   12d4c:	andeq	r3, r1, ip, rrx
   12d50:	andeq	r3, r1, ip, rrx
   12d54:	andeq	r3, r1, ip, rrx
   12d58:	andeq	r3, r1, ip, rrx
   12d5c:	andeq	r2, r1, r8, lsr pc
   12d60:	strdeq	r2, [r1], -ip
   12d64:	andeq	r2, r1, ip, asr lr
   12d68:	andeq	r2, r1, ip, asr lr
   12d6c:	andeq	r2, r1, ip, asr lr
   12d70:	andeq	r2, r1, ip, asr lr
   12d74:	andeq	r2, r1, ip, asr lr
   12d78:	andeq	r2, r1, ip, asr lr
   12d7c:	andeq	r2, r1, ip, asr lr
   12d80:	andeq	r2, r1, ip, asr lr
   12d84:	andeq	r2, r1, ip, asr lr
   12d88:	andeq	r2, r1, ip, asr lr
   12d8c:	andeq	r2, r1, ip, asr lr
   12d90:	andeq	r2, r1, ip, asr lr
   12d94:	andeq	r2, r1, ip, asr lr
   12d98:	andeq	r2, r1, ip, asr lr
   12d9c:	andeq	r2, r1, ip, asr lr
   12da0:	andeq	r2, r1, ip, asr lr
   12da4:	andeq	r2, r1, ip, asr lr
   12da8:	andeq	r2, r1, ip, asr lr
   12dac:	andeq	r2, r1, ip, asr lr
   12db0:	andeq	r2, r1, ip, asr lr
   12db4:	andeq	r2, r1, ip, asr lr
   12db8:	andeq	r2, r1, ip, asr lr
   12dbc:	andeq	r2, r1, ip, asr lr
   12dc0:	andeq	r2, r1, ip, asr lr
   12dc4:	andeq	r2, r1, ip, asr lr
   12dc8:	andeq	r2, r1, ip, asr lr
   12dcc:	andeq	r3, r1, ip, rrx
   12dd0:	andeq	r2, r1, r4, lsr #29
   12dd4:	andeq	r2, r1, ip, asr lr
   12dd8:	andeq	r3, r1, ip, rrx
   12ddc:	andeq	r2, r1, ip, asr lr
   12de0:	andeq	r3, r1, ip, rrx
   12de4:	andeq	r2, r1, ip, asr lr
   12de8:	andeq	r2, r1, ip, asr lr
   12dec:	andeq	r2, r1, ip, asr lr
   12df0:	andeq	r2, r1, ip, asr lr
   12df4:	andeq	r2, r1, ip, asr lr
   12df8:	andeq	r2, r1, ip, asr lr
   12dfc:	andeq	r2, r1, ip, asr lr
   12e00:	andeq	r2, r1, ip, asr lr
   12e04:	andeq	r2, r1, ip, asr lr
   12e08:	andeq	r2, r1, ip, asr lr
   12e0c:	andeq	r2, r1, ip, asr lr
   12e10:	andeq	r2, r1, ip, asr lr
   12e14:	andeq	r2, r1, ip, asr lr
   12e18:	andeq	r2, r1, ip, asr lr
   12e1c:	andeq	r2, r1, ip, asr lr
   12e20:	andeq	r2, r1, ip, asr lr
   12e24:	andeq	r2, r1, ip, asr lr
   12e28:	andeq	r2, r1, ip, asr lr
   12e2c:	andeq	r2, r1, ip, asr lr
   12e30:	andeq	r2, r1, ip, asr lr
   12e34:	andeq	r2, r1, ip, asr lr
   12e38:	andeq	r2, r1, ip, asr lr
   12e3c:	andeq	r2, r1, ip, asr lr
   12e40:	andeq	r2, r1, ip, asr lr
   12e44:	andeq	r2, r1, ip, asr lr
   12e48:	andeq	r2, r1, ip, asr lr
   12e4c:	andeq	r2, r1, r4, lsl #29
   12e50:	andeq	r3, r1, ip, rrx
   12e54:	andeq	r2, r1, r4, lsl #29
   12e58:	andeq	r2, r1, r0, ror lr
   12e5c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e60:	cmp	r0, #0
   12e64:	beq	130c4 <__assert_fail@plt+0x20ac>
   12e68:	ldr	r0, [fp, #16]
   12e6c:	b	130c8 <__assert_fail@plt+0x20b0>
   12e70:	mov	r4, #0
   12e74:	cmp	r7, #0
   12e78:	beq	13068 <__assert_fail@plt+0x2050>
   12e7c:	mov	r9, #0
   12e80:	b	12e5c <__assert_fail@plt+0x1e44>
   12e84:	mov	r4, #0
   12e88:	cmn	lr, #1
   12e8c:	beq	1304c <__assert_fail@plt+0x2034>
   12e90:	cmp	r7, #0
   12e94:	bne	12e7c <__assert_fail@plt+0x1e64>
   12e98:	cmp	lr, #1
   12e9c:	beq	13068 <__assert_fail@plt+0x2050>
   12ea0:	b	12e7c <__assert_fail@plt+0x1e64>
   12ea4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ea8:	cmp	r0, #2
   12eac:	bne	1308c <__assert_fail@plt+0x2074>
   12eb0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12eb4:	tst	r0, #1
   12eb8:	bne	13788 <__assert_fail@plt+0x2770>
   12ebc:	mov	r9, #0
   12ec0:	mov	r0, #92	; 0x5c
   12ec4:	b	130a0 <__assert_fail@plt+0x2088>
   12ec8:	mov	r0, #102	; 0x66
   12ecc:	b	130b0 <__assert_fail@plt+0x2098>
   12ed0:	mov	r2, #116	; 0x74
   12ed4:	b	12ee4 <__assert_fail@plt+0x1ecc>
   12ed8:	mov	r0, #98	; 0x62
   12edc:	b	130b0 <__assert_fail@plt+0x2098>
   12ee0:	mov	r2, #114	; 0x72
   12ee4:	ldr	r0, [sp, #68]	; 0x44
   12ee8:	tst	r0, #1
   12eec:	mov	r0, r2
   12ef0:	bne	130b0 <__assert_fail@plt+0x2098>
   12ef4:	b	13788 <__assert_fail@plt+0x2770>
   12ef8:	ldr	r0, [sp, #84]	; 0x54
   12efc:	tst	r0, #1
   12f00:	beq	131a0 <__assert_fail@plt+0x2188>
   12f04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f08:	tst	r0, #1
   12f0c:	bne	13898 <__assert_fail@plt+0x2880>
   12f10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f14:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12f18:	cmp	r0, #2
   12f1c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12f20:	movwne	r0, #1
   12f24:	orr	r0, r0, r2
   12f28:	tst	r0, #1
   12f2c:	beq	13570 <__assert_fail@plt+0x2558>
   12f30:	mov	r0, r8
   12f34:	b	135a4 <__assert_fail@plt+0x258c>
   12f38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f3c:	mov	r9, #0
   12f40:	mov	r5, #63	; 0x3f
   12f44:	cmp	r0, #5
   12f48:	beq	13354 <__assert_fail@plt+0x233c>
   12f4c:	cmp	r0, #2
   12f50:	bne	133f8 <__assert_fail@plt+0x23e0>
   12f54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f58:	tst	r0, #1
   12f5c:	beq	133fc <__assert_fail@plt+0x23e4>
   12f60:	b	13788 <__assert_fail@plt+0x2770>
   12f64:	mov	r0, #118	; 0x76
   12f68:	b	130b0 <__assert_fail@plt+0x2098>
   12f6c:	mov	r0, #1
   12f70:	mov	r5, #39	; 0x27
   12f74:	str	r0, [sp, #60]	; 0x3c
   12f78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f7c:	cmp	r0, #2
   12f80:	bne	12ff4 <__assert_fail@plt+0x1fdc>
   12f84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f88:	tst	r0, #1
   12f8c:	bne	13788 <__assert_fail@plt+0x2770>
   12f90:	ldr	r2, [sp, #56]	; 0x38
   12f94:	clz	r1, sl
   12f98:	mov	r9, #0
   12f9c:	lsr	r1, r1, #5
   12fa0:	cmp	r2, #0
   12fa4:	mov	r0, r2
   12fa8:	movwne	r0, #1
   12fac:	orrs	r0, r0, r1
   12fb0:	moveq	r2, sl
   12fb4:	moveq	sl, r0
   12fb8:	cmp	r8, sl
   12fbc:	str	r2, [sp, #56]	; 0x38
   12fc0:	movcc	r0, #39	; 0x27
   12fc4:	strbcc	r0, [r6, r8]
   12fc8:	add	r0, r8, #1
   12fcc:	cmp	r0, sl
   12fd0:	movcc	r1, #92	; 0x5c
   12fd4:	strbcc	r1, [r6, r0]
   12fd8:	add	r0, r8, #2
   12fdc:	add	r8, r8, #3
   12fe0:	cmp	r0, sl
   12fe4:	movcc	r1, #39	; 0x27
   12fe8:	strbcc	r1, [r6, r0]
   12fec:	mov	r0, #0
   12ff0:	str	r0, [fp, #-56]	; 0xffffffc8
   12ff4:	mov	r4, #1
   12ff8:	b	12e5c <__assert_fail@plt+0x1e44>
   12ffc:	ldr	r0, [sp, #40]	; 0x28
   13000:	cmp	r0, #1
   13004:	bne	131cc <__assert_fail@plt+0x21b4>
   13008:	str	lr, [sp, #28]
   1300c:	bl	10f10 <__ctype_b_loc@plt>
   13010:	ldr	r0, [r0]
   13014:	ldr	ip, [fp, #-84]	; 0xffffffac
   13018:	mov	r1, #1
   1301c:	add	r0, r0, r5, lsl #1
   13020:	ldrb	r0, [r0, #1]
   13024:	ubfx	r4, r0, #6, #1
   13028:	ldr	r0, [sp, #52]	; 0x34
   1302c:	mov	r2, r1
   13030:	cmp	r1, #1
   13034:	orr	r0, r4, r0
   13038:	bhi	13404 <__assert_fail@plt+0x23ec>
   1303c:	tst	r0, #1
   13040:	beq	13404 <__assert_fail@plt+0x23ec>
   13044:	ldr	lr, [sp, #28]
   13048:	b	12e5c <__assert_fail@plt+0x1e44>
   1304c:	cmp	r7, #0
   13050:	ldrbeq	r0, [ip, #1]
   13054:	cmpeq	r0, #0
   13058:	beq	13068 <__assert_fail@plt+0x2050>
   1305c:	mvn	lr, #0
   13060:	mov	r9, #0
   13064:	b	12e5c <__assert_fail@plt+0x1e44>
   13068:	mov	r1, #1
   1306c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13070:	cmp	r0, #2
   13074:	bne	13084 <__assert_fail@plt+0x206c>
   13078:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1307c:	tst	r0, #1
   13080:	bne	13788 <__assert_fail@plt+0x2770>
   13084:	mov	r4, r1
   13088:	b	12e5c <__assert_fail@plt+0x1e44>
   1308c:	ldr	r1, [sp, #48]	; 0x30
   13090:	mov	r9, #0
   13094:	mov	r0, #92	; 0x5c
   13098:	cmp	r1, #0
   1309c:	beq	130b0 <__assert_fail@plt+0x2098>
   130a0:	mov	r4, #0
   130a4:	cmp	r9, #0
   130a8:	beq	1363c <__assert_fail@plt+0x2624>
   130ac:	b	13678 <__assert_fail@plt+0x2660>
   130b0:	ldr	r1, [sp, #84]	; 0x54
   130b4:	mov	r4, #0
   130b8:	mov	r9, #0
   130bc:	tst	r1, #1
   130c0:	bne	13100 <__assert_fail@plt+0x20e8>
   130c4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   130c8:	cmp	r0, #0
   130cc:	mov	r0, r5
   130d0:	beq	130f4 <__assert_fail@plt+0x20dc>
   130d4:	ldr	r1, [fp, #16]
   130d8:	ubfx	r0, r5, #5, #3
   130dc:	mov	r2, #1
   130e0:	ldr	r0, [r1, r0, lsl #2]
   130e4:	and	r1, r5, #31
   130e8:	tst	r0, r2, lsl r1
   130ec:	mov	r0, r5
   130f0:	bne	13100 <__assert_fail@plt+0x20e8>
   130f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   130f8:	cmp	r1, #0
   130fc:	beq	13634 <__assert_fail@plt+0x261c>
   13100:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13104:	tst	r1, #1
   13108:	bne	13760 <__assert_fail@plt+0x2748>
   1310c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13110:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13114:	cmp	r1, #2
   13118:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1311c:	movwne	r1, #1
   13120:	orr	r1, r1, r2
   13124:	tst	r1, #1
   13128:	beq	13134 <__assert_fail@plt+0x211c>
   1312c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13130:	b	13170 <__assert_fail@plt+0x2158>
   13134:	cmp	r8, sl
   13138:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1313c:	movcc	r1, #39	; 0x27
   13140:	strbcc	r1, [r6, r8]
   13144:	add	r1, r8, #1
   13148:	cmp	r1, sl
   1314c:	movcc	r2, #36	; 0x24
   13150:	strbcc	r2, [r6, r1]
   13154:	add	r1, r8, #2
   13158:	add	r8, r8, #3
   1315c:	cmp	r1, sl
   13160:	movcc	r2, #39	; 0x27
   13164:	strbcc	r2, [r6, r1]
   13168:	mov	r1, #1
   1316c:	str	r1, [fp, #-56]	; 0xffffffc8
   13170:	cmp	r8, sl
   13174:	movcc	r1, #92	; 0x5c
   13178:	strbcc	r1, [r6, r8]
   1317c:	add	r8, r8, #1
   13180:	cmp	r8, sl
   13184:	and	r5, r5, r4
   13188:	add	r7, r7, #1
   1318c:	strbcc	r0, [r6, r8]
   13190:	add	r8, r8, #1
   13194:	cmn	lr, #1
   13198:	bne	12b94 <__assert_fail@plt+0x1b7c>
   1319c:	b	12ba0 <__assert_fail@plt+0x1b88>
   131a0:	ldr	r0, [sp, #36]	; 0x24
   131a4:	mov	r4, #0
   131a8:	mov	r9, #0
   131ac:	mov	r5, #0
   131b0:	cmp	r0, #0
   131b4:	beq	130c4 <__assert_fail@plt+0x20ac>
   131b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   131bc:	add	r7, r7, #1
   131c0:	cmn	lr, #1
   131c4:	bne	12b94 <__assert_fail@plt+0x1b7c>
   131c8:	b	12ba0 <__assert_fail@plt+0x1b88>
   131cc:	mov	r0, #0
   131d0:	cmn	lr, #1
   131d4:	str	r0, [fp, #-36]	; 0xffffffdc
   131d8:	str	r0, [fp, #-40]	; 0xffffffd8
   131dc:	bne	131f0 <__assert_fail@plt+0x21d8>
   131e0:	mov	r0, ip
   131e4:	bl	10f28 <strlen@plt>
   131e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   131ec:	mov	lr, r0
   131f0:	add	r0, ip, r7
   131f4:	mov	r4, #1
   131f8:	mov	r6, #0
   131fc:	str	lr, [sp, #28]
   13200:	str	r0, [sp, #24]
   13204:	sub	r0, fp, #40	; 0x28
   13208:	mov	r3, r0
   1320c:	str	r6, [sp, #44]	; 0x2c
   13210:	add	r6, r6, r7
   13214:	sub	r0, fp, #44	; 0x2c
   13218:	add	r1, ip, r6
   1321c:	sub	r2, lr, r6
   13220:	bl	151c8 <__assert_fail@plt+0x41b0>
   13224:	cmp	r0, #0
   13228:	beq	136c0 <__assert_fail@plt+0x26a8>
   1322c:	cmn	r0, #1
   13230:	beq	13680 <__assert_fail@plt+0x2668>
   13234:	ldr	lr, [sp, #28]
   13238:	cmn	r0, #2
   1323c:	beq	13688 <__assert_fail@plt+0x2670>
   13240:	ldr	r2, [sp, #64]	; 0x40
   13244:	cmp	r0, #2
   13248:	mov	r1, #0
   1324c:	movwcc	r1, #1
   13250:	eor	r2, r2, #1
   13254:	orrs	r1, r2, r1
   13258:	bne	13318 <__assert_fail@plt+0x2300>
   1325c:	ldr	r1, [sp, #44]	; 0x2c
   13260:	ldr	r2, [sp, #24]
   13264:	add	r1, r2, r1
   13268:	mov	r2, #1
   1326c:	ldrb	r3, [r1, r2]
   13270:	sub	r3, r3, #91	; 0x5b
   13274:	cmp	r3, #33	; 0x21
   13278:	bhi	1330c <__assert_fail@plt+0x22f4>
   1327c:	add	r6, pc, #0
   13280:	ldr	pc, [r6, r3, lsl #2]
   13284:	andeq	r3, r1, r0, lsl #15
   13288:	andeq	r3, r1, r0, lsl #15
   1328c:	andeq	r3, r1, ip, lsl #6
   13290:	andeq	r3, r1, r0, lsl #15
   13294:	andeq	r3, r1, ip, lsl #6
   13298:	andeq	r3, r1, r0, lsl #15
   1329c:	andeq	r3, r1, ip, lsl #6
   132a0:	andeq	r3, r1, ip, lsl #6
   132a4:	andeq	r3, r1, ip, lsl #6
   132a8:	andeq	r3, r1, ip, lsl #6
   132ac:	andeq	r3, r1, ip, lsl #6
   132b0:	andeq	r3, r1, ip, lsl #6
   132b4:	andeq	r3, r1, ip, lsl #6
   132b8:	andeq	r3, r1, ip, lsl #6
   132bc:	andeq	r3, r1, ip, lsl #6
   132c0:	andeq	r3, r1, ip, lsl #6
   132c4:	andeq	r3, r1, ip, lsl #6
   132c8:	andeq	r3, r1, ip, lsl #6
   132cc:	andeq	r3, r1, ip, lsl #6
   132d0:	andeq	r3, r1, ip, lsl #6
   132d4:	andeq	r3, r1, ip, lsl #6
   132d8:	andeq	r3, r1, ip, lsl #6
   132dc:	andeq	r3, r1, ip, lsl #6
   132e0:	andeq	r3, r1, ip, lsl #6
   132e4:	andeq	r3, r1, ip, lsl #6
   132e8:	andeq	r3, r1, ip, lsl #6
   132ec:	andeq	r3, r1, ip, lsl #6
   132f0:	andeq	r3, r1, ip, lsl #6
   132f4:	andeq	r3, r1, ip, lsl #6
   132f8:	andeq	r3, r1, ip, lsl #6
   132fc:	andeq	r3, r1, ip, lsl #6
   13300:	andeq	r3, r1, ip, lsl #6
   13304:	andeq	r3, r1, ip, lsl #6
   13308:	andeq	r3, r1, r0, lsl #15
   1330c:	add	r2, r2, #1
   13310:	cmp	r2, r0
   13314:	bcc	1326c <__assert_fail@plt+0x2254>
   13318:	ldr	r6, [sp, #44]	; 0x2c
   1331c:	add	r6, r0, r6
   13320:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13324:	bl	10e80 <iswprint@plt>
   13328:	cmp	r0, #0
   1332c:	movwne	r0, #1
   13330:	and	r4, r4, r0
   13334:	sub	r0, fp, #40	; 0x28
   13338:	bl	10e38 <mbsinit@plt>
   1333c:	ldr	lr, [sp, #28]
   13340:	ldr	ip, [fp, #-84]	; 0xffffffac
   13344:	sub	r3, fp, #40	; 0x28
   13348:	cmp	r0, #0
   1334c:	beq	1320c <__assert_fail@plt+0x21f4>
   13350:	b	136c8 <__assert_fail@plt+0x26b0>
   13354:	ldr	r0, [sp, #32]
   13358:	cmp	r0, #0
   1335c:	beq	133f8 <__assert_fail@plt+0x23e0>
   13360:	add	r0, r7, #2
   13364:	cmp	r0, lr
   13368:	bcs	133f8 <__assert_fail@plt+0x23e0>
   1336c:	add	r1, ip, r7
   13370:	ldrb	r1, [r1, #1]
   13374:	cmp	r1, #63	; 0x3f
   13378:	bne	133f8 <__assert_fail@plt+0x23e0>
   1337c:	ldrb	r5, [ip, r0]
   13380:	sub	r1, r5, #33	; 0x21
   13384:	cmp	r1, #29
   13388:	bhi	133f8 <__assert_fail@plt+0x23e0>
   1338c:	movw	r3, #20929	; 0x51c1
   13390:	mov	r2, #1
   13394:	movt	r3, #14336	; 0x3800
   13398:	tst	r3, r2, lsl r1
   1339c:	beq	133f8 <__assert_fail@plt+0x23e0>
   133a0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   133a4:	tst	r1, #1
   133a8:	bne	138a0 <__assert_fail@plt+0x2888>
   133ac:	cmp	r8, sl
   133b0:	mov	r7, r0
   133b4:	mov	r4, #0
   133b8:	movcc	r1, #63	; 0x3f
   133bc:	strbcc	r1, [r6, r8]
   133c0:	add	r1, r8, #1
   133c4:	cmp	r1, sl
   133c8:	movcc	r2, #34	; 0x22
   133cc:	strbcc	r2, [r6, r1]
   133d0:	add	r1, r8, #2
   133d4:	cmp	r1, sl
   133d8:	movcc	r2, #34	; 0x22
   133dc:	strbcc	r2, [r6, r1]
   133e0:	add	r1, r8, #3
   133e4:	add	r8, r8, #4
   133e8:	cmp	r1, sl
   133ec:	movcc	r2, #63	; 0x3f
   133f0:	strbcc	r2, [r6, r1]
   133f4:	b	12e5c <__assert_fail@plt+0x1e44>
   133f8:	mov	r5, #63	; 0x3f
   133fc:	mov	r4, #0
   13400:	b	12e5c <__assert_fail@plt+0x1e44>
   13404:	add	r1, r2, r7
   13408:	ldr	lr, [sp, #28]
   1340c:	mov	r3, #0
   13410:	str	r1, [sp, #44]	; 0x2c
   13414:	add	r1, r7, #1
   13418:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1341c:	tst	r0, #1
   13420:	bne	134f4 <__assert_fail@plt+0x24dc>
   13424:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13428:	tst	r2, #1
   1342c:	bne	137e8 <__assert_fail@plt+0x27d0>
   13430:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13434:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13438:	cmp	r7, #2
   1343c:	movwne	r3, #1
   13440:	orr	r3, r3, r2
   13444:	tst	r3, #1
   13448:	bne	13484 <__assert_fail@plt+0x246c>
   1344c:	cmp	r8, sl
   13450:	add	r3, r8, #1
   13454:	movcc	r2, #39	; 0x27
   13458:	strbcc	r2, [r6, r8]
   1345c:	cmp	r3, sl
   13460:	movcc	r2, #36	; 0x24
   13464:	strbcc	r2, [r6, r3]
   13468:	add	r3, r8, #2
   1346c:	add	r8, r8, #3
   13470:	cmp	r3, sl
   13474:	movcc	r2, #39	; 0x27
   13478:	strbcc	r2, [r6, r3]
   1347c:	mov	r2, #1
   13480:	str	r2, [fp, #-56]	; 0xffffffc8
   13484:	cmp	r8, sl
   13488:	movcc	r3, #92	; 0x5c
   1348c:	strbcc	r3, [r6, r8]
   13490:	add	r3, r8, #1
   13494:	cmp	r3, sl
   13498:	andcc	r7, r5, #192	; 0xc0
   1349c:	movcc	r2, #48	; 0x30
   134a0:	orrcc	r7, r2, r7, lsr #6
   134a4:	strbcc	r7, [r6, r3]
   134a8:	add	r3, r8, #2
   134ac:	add	r8, r8, #3
   134b0:	cmp	r3, sl
   134b4:	lsrcc	r7, r5, #3
   134b8:	movcc	r2, #6
   134bc:	bficc	r7, r2, #3, #29
   134c0:	mov	r2, #6
   134c4:	strbcc	r7, [r6, r3]
   134c8:	bfi	r5, r2, #3, #29
   134cc:	mov	r3, #1
   134d0:	b	13518 <__assert_fail@plt+0x2500>
   134d4:	cmp	r8, sl
   134d8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   134dc:	strbcc	r5, [r6, r8]
   134e0:	add	r8, r8, #1
   134e4:	ldrb	r5, [ip, r1]
   134e8:	add	r1, r1, #1
   134ec:	tst	r0, #1
   134f0:	beq	13424 <__assert_fail@plt+0x240c>
   134f4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   134f8:	tst	r2, #1
   134fc:	beq	13510 <__assert_fail@plt+0x24f8>
   13500:	cmp	r8, sl
   13504:	movcc	r7, #92	; 0x5c
   13508:	strbcc	r7, [r6, r8]
   1350c:	add	r8, r8, #1
   13510:	mov	r2, #0
   13514:	str	r2, [fp, #-52]	; 0xffffffcc
   13518:	ldr	r2, [sp, #44]	; 0x2c
   1351c:	and	r9, r3, #1
   13520:	cmp	r2, r1
   13524:	bls	13624 <__assert_fail@plt+0x260c>
   13528:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1352c:	cmp	r9, #0
   13530:	movwne	r9, #1
   13534:	mvn	r7, r2
   13538:	orr	r7, r7, r9
   1353c:	tst	r7, #1
   13540:	bne	134d4 <__assert_fail@plt+0x24bc>
   13544:	cmp	r8, sl
   13548:	movcc	r7, #39	; 0x27
   1354c:	strbcc	r7, [r6, r8]
   13550:	add	r7, r8, #1
   13554:	add	r8, r8, #2
   13558:	cmp	r7, sl
   1355c:	movcc	r2, #39	; 0x27
   13560:	strbcc	r2, [r6, r7]
   13564:	mov	r2, #0
   13568:	str	r2, [fp, #-56]	; 0xffffffc8
   1356c:	b	134d4 <__assert_fail@plt+0x24bc>
   13570:	cmp	r8, sl
   13574:	mov	r2, #1
   13578:	movcc	r0, #39	; 0x27
   1357c:	strbcc	r0, [r6, r8]
   13580:	add	r0, r8, #1
   13584:	cmp	r0, sl
   13588:	movcc	r1, #36	; 0x24
   1358c:	strbcc	r1, [r6, r0]
   13590:	add	r0, r8, #2
   13594:	cmp	r0, sl
   13598:	movcc	r1, #39	; 0x27
   1359c:	strbcc	r1, [r6, r0]
   135a0:	add	r0, r8, #3
   135a4:	cmp	r0, sl
   135a8:	add	r8, r0, #1
   135ac:	str	r2, [fp, #-56]	; 0xffffffc8
   135b0:	movcc	r1, #92	; 0x5c
   135b4:	strbcc	r1, [r6, r0]
   135b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   135bc:	cmp	r1, #2
   135c0:	beq	13614 <__assert_fail@plt+0x25fc>
   135c4:	add	r1, r7, #1
   135c8:	mov	r4, #0
   135cc:	mov	r9, #1
   135d0:	mov	r5, #48	; 0x30
   135d4:	cmp	r1, lr
   135d8:	bcs	12e5c <__assert_fail@plt+0x1e44>
   135dc:	ldrb	r1, [ip, r1]
   135e0:	sub	r1, r1, #48	; 0x30
   135e4:	uxtb	r1, r1
   135e8:	cmp	r1, #9
   135ec:	bhi	12e5c <__assert_fail@plt+0x1e44>
   135f0:	cmp	r8, sl
   135f4:	movcc	r1, #48	; 0x30
   135f8:	strbcc	r1, [r6, r8]
   135fc:	add	r1, r0, #2
   13600:	add	r8, r0, #3
   13604:	cmp	r1, sl
   13608:	movcc	r2, #48	; 0x30
   1360c:	strbcc	r2, [r6, r1]
   13610:	b	12e5c <__assert_fail@plt+0x1e44>
   13614:	mov	r0, #48	; 0x30
   13618:	mov	r9, #1
   1361c:	mov	r4, #0
   13620:	b	130f4 <__assert_fail@plt+0x20dc>
   13624:	cmp	r9, #0
   13628:	sub	r7, r1, #1
   1362c:	mov	r0, r5
   13630:	movwne	r9, #1
   13634:	cmp	r9, #0
   13638:	bne	13678 <__assert_fail@plt+0x2660>
   1363c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13640:	tst	r1, #1
   13644:	beq	13678 <__assert_fail@plt+0x2660>
   13648:	cmp	r8, sl
   1364c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13650:	movcc	r1, #39	; 0x27
   13654:	strbcc	r1, [r6, r8]
   13658:	add	r1, r8, #1
   1365c:	add	r8, r8, #2
   13660:	cmp	r1, sl
   13664:	movcc	r2, #39	; 0x27
   13668:	strbcc	r2, [r6, r1]
   1366c:	mov	r1, #0
   13670:	str	r1, [fp, #-56]	; 0xffffffc8
   13674:	b	13180 <__assert_fail@plt+0x2168>
   13678:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1367c:	b	13180 <__assert_fail@plt+0x2168>
   13680:	mov	r4, #0
   13684:	b	136c0 <__assert_fail@plt+0x26a8>
   13688:	mov	r4, #0
   1368c:	cmp	lr, r6
   13690:	bls	136c0 <__assert_fail@plt+0x26a8>
   13694:	ldr	ip, [fp, #-84]	; 0xffffffac
   13698:	ldr	r6, [sp, #44]	; 0x2c
   1369c:	ldr	r0, [sp, #24]
   136a0:	ldrb	r0, [r0, r6]
   136a4:	cmp	r0, #0
   136a8:	beq	136c8 <__assert_fail@plt+0x26b0>
   136ac:	add	r6, r6, #1
   136b0:	add	r0, r7, r6
   136b4:	cmp	r0, lr
   136b8:	bcc	1369c <__assert_fail@plt+0x2684>
   136bc:	b	136c8 <__assert_fail@plt+0x26b0>
   136c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   136c4:	ldr	r6, [sp, #44]	; 0x2c
   136c8:	mov	r1, r6
   136cc:	ldr	r6, [sp, #80]	; 0x50
   136d0:	b	13028 <__assert_fail@plt+0x2010>
   136d4:	mov	lr, r7
   136d8:	b	136e0 <__assert_fail@plt+0x26c8>
   136dc:	mvn	lr, #0
   136e0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   136e4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   136e8:	eor	r0, r7, #2
   136ec:	orr	r0, r0, r8
   136f0:	clz	r0, r0
   136f4:	lsr	r0, r0, #5
   136f8:	tst	r1, r0
   136fc:	bne	13788 <__assert_fail@plt+0x2770>
   13700:	mov	r0, r1
   13704:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13708:	cmp	r7, #2
   1370c:	movwne	r1, #1
   13710:	orr	r0, r0, r1
   13714:	tst	r0, #1
   13718:	ldreq	r0, [sp, #60]	; 0x3c
   1371c:	eoreq	r0, r0, #1
   13720:	tsteq	r0, #1
   13724:	bne	13834 <__assert_fail@plt+0x281c>
   13728:	mov	r9, lr
   1372c:	tst	r5, #1
   13730:	bne	137f0 <__assert_fail@plt+0x27d8>
   13734:	ldr	r6, [sp, #56]	; 0x38
   13738:	mov	r4, #0
   1373c:	cmp	r6, #0
   13740:	beq	1382c <__assert_fail@plt+0x2814>
   13744:	ldr	r0, [sp, #84]	; 0x54
   13748:	mov	r1, #0
   1374c:	cmp	sl, #0
   13750:	mov	r5, #0
   13754:	str	r1, [fp, #-72]	; 0xffffffb8
   13758:	beq	12928 <__assert_fail@plt+0x1910>
   1375c:	b	13834 <__assert_fail@plt+0x281c>
   13760:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13764:	ldr	r2, [sp, #84]	; 0x54
   13768:	b	13790 <__assert_fail@plt+0x2778>
   1376c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13770:	mov	r2, #1
   13774:	mov	lr, r4
   13778:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1377c:	b	13790 <__assert_fail@plt+0x2778>
   13780:	ldr	r6, [sp, #80]	; 0x50
   13784:	ldr	ip, [fp, #-84]	; 0xffffffac
   13788:	ldr	r2, [sp, #84]	; 0x54
   1378c:	mov	r7, #2
   13790:	mov	r0, #0
   13794:	ldr	r1, [fp, #12]
   13798:	tst	r2, #1
   1379c:	mov	r2, r7
   137a0:	mov	r3, lr
   137a4:	str	r0, [sp, #8]
   137a8:	ldr	r0, [sp, #72]	; 0x48
   137ac:	movwne	r2, #4
   137b0:	cmp	r7, #2
   137b4:	movne	r2, r7
   137b8:	str	r2, [sp]
   137bc:	mov	r2, ip
   137c0:	bic	r1, r1, #2
   137c4:	str	r0, [sp, #12]
   137c8:	ldr	r0, [sp, #76]	; 0x4c
   137cc:	str	r1, [sp, #4]
   137d0:	mov	r1, sl
   137d4:	str	r0, [sp, #16]
   137d8:	mov	r0, r6
   137dc:	bl	128a8 <__assert_fail@plt+0x1890>
   137e0:	mov	r8, r0
   137e4:	b	1388c <__assert_fail@plt+0x2874>
   137e8:	ldr	r2, [sp, #84]	; 0x54
   137ec:	b	13790 <__assert_fail@plt+0x2778>
   137f0:	mov	r0, #5
   137f4:	ldr	r1, [sp, #56]	; 0x38
   137f8:	ldr	r2, [fp, #-84]	; 0xffffffac
   137fc:	mov	r3, r9
   13800:	str	r0, [sp]
   13804:	ldr	r0, [fp, #12]
   13808:	str	r0, [sp, #4]
   1380c:	ldr	r0, [fp, #16]
   13810:	str	r0, [sp, #8]
   13814:	ldr	r0, [sp, #72]	; 0x48
   13818:	str	r0, [sp, #12]
   1381c:	ldr	r0, [sp, #76]	; 0x4c
   13820:	str	r0, [sp, #16]
   13824:	ldr	r0, [sp, #80]	; 0x50
   13828:	b	137dc <__assert_fail@plt+0x27c4>
   1382c:	mov	r0, #0
   13830:	str	r0, [fp, #-72]	; 0xffffffb8
   13834:	ldr	r1, [sp, #92]	; 0x5c
   13838:	cmp	r1, #0
   1383c:	beq	1387c <__assert_fail@plt+0x2864>
   13840:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13844:	ldr	r2, [sp, #80]	; 0x50
   13848:	tst	r0, #1
   1384c:	bne	13880 <__assert_fail@plt+0x2868>
   13850:	ldrb	r0, [r1]
   13854:	cmp	r0, #0
   13858:	beq	13880 <__assert_fail@plt+0x2868>
   1385c:	add	r1, r1, #1
   13860:	cmp	r8, sl
   13864:	strbcc	r0, [r2, r8]
   13868:	add	r8, r8, #1
   1386c:	ldrb	r0, [r1], #1
   13870:	cmp	r0, #0
   13874:	bne	13860 <__assert_fail@plt+0x2848>
   13878:	b	13880 <__assert_fail@plt+0x2868>
   1387c:	ldr	r2, [sp, #80]	; 0x50
   13880:	cmp	r8, sl
   13884:	movcc	r0, #0
   13888:	strbcc	r0, [r2, r8]
   1388c:	mov	r0, r8
   13890:	sub	sp, fp, #28
   13894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13898:	mov	r2, #1
   1389c:	b	13778 <__assert_fail@plt+0x2760>
   138a0:	ldr	r2, [sp, #84]	; 0x54
   138a4:	mov	r7, #5
   138a8:	b	13790 <__assert_fail@plt+0x2778>
   138ac:	bl	11000 <abort@plt>
   138b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b4:	add	fp, sp, #28
   138b8:	sub	sp, sp, #28
   138bc:	movw	r5, #29088	; 0x71a0
   138c0:	cmp	r2, #0
   138c4:	mov	r4, r1
   138c8:	mov	r7, r0
   138cc:	str	r0, [sp, #20]
   138d0:	movt	r5, #2
   138d4:	movne	r5, r2
   138d8:	bl	10f34 <__errno_location@plt>
   138dc:	mov	sl, r0
   138e0:	ldm	r5, {r0, r1}
   138e4:	ldr	r2, [r5, #40]	; 0x28
   138e8:	ldr	r3, [r5, #44]	; 0x2c
   138ec:	add	r9, r5, #8
   138f0:	ldr	r6, [sl]
   138f4:	orr	r8, r1, #1
   138f8:	mov	r1, #0
   138fc:	str	r6, [sp, #24]
   13900:	stm	sp, {r0, r8, r9}
   13904:	str	r2, [sp, #12]
   13908:	str	r3, [sp, #16]
   1390c:	mov	r0, #0
   13910:	mov	r2, r7
   13914:	mov	r3, r4
   13918:	mov	r6, r4
   1391c:	bl	128a8 <__assert_fail@plt+0x1890>
   13920:	add	r7, r0, #1
   13924:	mov	r0, r7
   13928:	bl	14ac0 <__assert_fail@plt+0x3aa8>
   1392c:	mov	r4, r0
   13930:	ldr	r0, [r5]
   13934:	ldr	r2, [r5, #44]	; 0x2c
   13938:	ldr	r1, [r5, #40]	; 0x28
   1393c:	mov	r3, r6
   13940:	stm	sp, {r0, r8, r9}
   13944:	str	r2, [sp, #16]
   13948:	str	r1, [sp, #12]
   1394c:	mov	r0, r4
   13950:	mov	r1, r7
   13954:	ldr	r2, [sp, #20]
   13958:	bl	128a8 <__assert_fail@plt+0x1890>
   1395c:	ldr	r0, [sp, #24]
   13960:	str	r0, [sl]
   13964:	mov	r0, r4
   13968:	sub	sp, fp, #28
   1396c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13974:	add	fp, sp, #28
   13978:	sub	sp, sp, #36	; 0x24
   1397c:	movw	r8, #29088	; 0x71a0
   13980:	cmp	r3, #0
   13984:	mov	r4, r2
   13988:	str	r2, [sp, #24]
   1398c:	mov	r5, r1
   13990:	mov	r6, r0
   13994:	str	r0, [sp, #20]
   13998:	movt	r8, #2
   1399c:	movne	r8, r3
   139a0:	bl	10f34 <__errno_location@plt>
   139a4:	str	r0, [sp, #28]
   139a8:	cmp	r4, #0
   139ac:	add	sl, r8, #8
   139b0:	ldm	r8, {r3, r9}
   139b4:	ldr	r7, [r0]
   139b8:	ldr	r1, [r8, #40]	; 0x28
   139bc:	ldr	r2, [r8, #44]	; 0x2c
   139c0:	mov	r0, #0
   139c4:	orreq	r9, r9, #1
   139c8:	str	r7, [sp, #32]
   139cc:	mov	r7, r5
   139d0:	stm	sp, {r3, r9, sl}
   139d4:	str	r1, [sp, #12]
   139d8:	str	r2, [sp, #16]
   139dc:	mov	r1, #0
   139e0:	mov	r2, r6
   139e4:	mov	r3, r5
   139e8:	bl	128a8 <__assert_fail@plt+0x1890>
   139ec:	add	r4, r0, #1
   139f0:	mov	r5, r0
   139f4:	mov	r0, r4
   139f8:	bl	14ac0 <__assert_fail@plt+0x3aa8>
   139fc:	mov	r6, r0
   13a00:	ldr	r0, [r8]
   13a04:	ldr	r2, [r8, #44]	; 0x2c
   13a08:	ldr	r1, [r8, #40]	; 0x28
   13a0c:	mov	r3, r7
   13a10:	stm	sp, {r0, r9, sl}
   13a14:	str	r2, [sp, #16]
   13a18:	str	r1, [sp, #12]
   13a1c:	mov	r0, r6
   13a20:	mov	r1, r4
   13a24:	ldr	r2, [sp, #20]
   13a28:	bl	128a8 <__assert_fail@plt+0x1890>
   13a2c:	ldr	r0, [sp, #24]
   13a30:	ldr	r1, [sp, #32]
   13a34:	ldr	r2, [sp, #28]
   13a38:	cmp	r0, #0
   13a3c:	str	r1, [r2]
   13a40:	strne	r5, [r0]
   13a44:	mov	r0, r6
   13a48:	sub	sp, fp, #28
   13a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a54:	add	fp, sp, #24
   13a58:	movw	r5, #28916	; 0x70f4
   13a5c:	movw	r8, #28912	; 0x70f0
   13a60:	movt	r5, #2
   13a64:	movt	r8, #2
   13a68:	ldr	r0, [r5]
   13a6c:	ldr	r4, [r8]
   13a70:	cmp	r0, #2
   13a74:	blt	13aa0 <__assert_fail@plt+0x2a88>
   13a78:	add	r7, r4, #12
   13a7c:	mov	r6, #0
   13a80:	ldr	r0, [r7, r6, lsl #3]
   13a84:	bl	125a0 <__assert_fail@plt+0x1588>
   13a88:	ldr	r1, [r5]
   13a8c:	add	r2, r6, #2
   13a90:	add	r0, r6, #1
   13a94:	mov	r6, r0
   13a98:	cmp	r2, r1
   13a9c:	blt	13a80 <__assert_fail@plt+0x2a68>
   13aa0:	ldr	r0, [r4, #4]
   13aa4:	movw	r7, #29136	; 0x71d0
   13aa8:	movt	r7, #2
   13aac:	cmp	r0, r7
   13ab0:	beq	13ac8 <__assert_fail@plt+0x2ab0>
   13ab4:	bl	125a0 <__assert_fail@plt+0x1588>
   13ab8:	movw	r0, #28920	; 0x70f8
   13abc:	mov	r6, #256	; 0x100
   13ac0:	movt	r0, #2
   13ac4:	strd	r6, [r0]
   13ac8:	movw	r6, #28920	; 0x70f8
   13acc:	movt	r6, #2
   13ad0:	cmp	r4, r6
   13ad4:	beq	13ae4 <__assert_fail@plt+0x2acc>
   13ad8:	mov	r0, r4
   13adc:	bl	125a0 <__assert_fail@plt+0x1588>
   13ae0:	str	r6, [r8]
   13ae4:	mov	r0, #1
   13ae8:	str	r0, [r5]
   13aec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13af0:	movw	r3, #29088	; 0x71a0
   13af4:	mvn	r2, #0
   13af8:	movt	r3, #2
   13afc:	b	13b00 <__assert_fail@plt+0x2ae8>
   13b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b04:	add	fp, sp, #28
   13b08:	sub	sp, sp, #44	; 0x2c
   13b0c:	mov	r7, r3
   13b10:	str	r2, [sp, #36]	; 0x24
   13b14:	str	r1, [sp, #32]
   13b18:	mov	r5, r0
   13b1c:	bl	10f34 <__errno_location@plt>
   13b20:	cmp	r5, #0
   13b24:	blt	13c90 <__assert_fail@plt+0x2c78>
   13b28:	cmn	r5, #-2147483647	; 0x80000001
   13b2c:	beq	13c90 <__assert_fail@plt+0x2c78>
   13b30:	movw	r8, #28916	; 0x70f4
   13b34:	movw	r4, #28912	; 0x70f0
   13b38:	str	r0, [sp, #28]
   13b3c:	ldr	r0, [r0]
   13b40:	movt	r8, #2
   13b44:	movt	r4, #2
   13b48:	ldr	r1, [r8]
   13b4c:	ldr	r6, [r4]
   13b50:	str	r0, [sp, #24]
   13b54:	cmp	r1, r5
   13b58:	ble	13b64 <__assert_fail@plt+0x2b4c>
   13b5c:	mov	sl, r6
   13b60:	b	13bcc <__assert_fail@plt+0x2bb4>
   13b64:	movw	r9, #28920	; 0x70f8
   13b68:	mov	r0, #8
   13b6c:	add	r2, r5, #1
   13b70:	str	r1, [fp, #-32]	; 0xffffffe0
   13b74:	mvn	r3, #-2147483648	; 0x80000000
   13b78:	movt	r9, #2
   13b7c:	str	r0, [sp]
   13b80:	sub	r2, r2, r1
   13b84:	sub	r1, fp, #32
   13b88:	subs	r0, r6, r9
   13b8c:	movne	r0, r6
   13b90:	bl	14cc0 <__assert_fail@plt+0x3ca8>
   13b94:	cmp	r6, r9
   13b98:	mov	sl, r0
   13b9c:	str	r0, [r4]
   13ba0:	ldrdeq	r0, [r9]
   13ba4:	stmeq	sl, {r0, r1}
   13ba8:	ldr	r1, [r8]
   13bac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bb0:	add	r0, sl, r1, lsl #3
   13bb4:	sub	r1, r2, r1
   13bb8:	lsl	r2, r1, #3
   13bbc:	mov	r1, #0
   13bc0:	bl	10f4c <memset@plt>
   13bc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13bc8:	str	r0, [r8]
   13bcc:	mov	r9, sl
   13bd0:	ldr	r6, [r9, r5, lsl #3]!
   13bd4:	ldr	r4, [r9, #4]!
   13bd8:	ldm	r7, {r0, r1}
   13bdc:	ldr	r2, [r7, #40]	; 0x28
   13be0:	ldr	r3, [r7, #44]	; 0x2c
   13be4:	orr	r8, r1, #1
   13be8:	add	r1, r7, #8
   13bec:	stm	sp, {r0, r8}
   13bf0:	add	r0, sp, #8
   13bf4:	str	r1, [sp, #20]
   13bf8:	stm	r0, {r1, r2, r3}
   13bfc:	mov	r0, r4
   13c00:	mov	r1, r6
   13c04:	ldr	r2, [sp, #32]
   13c08:	ldr	r3, [sp, #36]	; 0x24
   13c0c:	bl	128a8 <__assert_fail@plt+0x1890>
   13c10:	cmp	r6, r0
   13c14:	bhi	13c78 <__assert_fail@plt+0x2c60>
   13c18:	add	r6, r0, #1
   13c1c:	movw	r0, #29136	; 0x71d0
   13c20:	movt	r0, #2
   13c24:	str	r6, [sl, r5, lsl #3]
   13c28:	cmp	r4, r0
   13c2c:	beq	13c38 <__assert_fail@plt+0x2c20>
   13c30:	mov	r0, r4
   13c34:	bl	125a0 <__assert_fail@plt+0x1588>
   13c38:	mov	r0, r6
   13c3c:	bl	14ac0 <__assert_fail@plt+0x3aa8>
   13c40:	str	r0, [r9]
   13c44:	mov	r4, r0
   13c48:	add	r3, sp, #8
   13c4c:	ldr	r0, [r7]
   13c50:	ldr	r1, [r7, #40]	; 0x28
   13c54:	ldr	r2, [r7, #44]	; 0x2c
   13c58:	stm	sp, {r0, r8}
   13c5c:	ldr	r0, [sp, #20]
   13c60:	stm	r3, {r0, r1, r2}
   13c64:	mov	r0, r4
   13c68:	mov	r1, r6
   13c6c:	ldr	r2, [sp, #32]
   13c70:	ldr	r3, [sp, #36]	; 0x24
   13c74:	bl	128a8 <__assert_fail@plt+0x1890>
   13c78:	ldr	r0, [sp, #28]
   13c7c:	ldr	r1, [sp, #24]
   13c80:	str	r1, [r0]
   13c84:	mov	r0, r4
   13c88:	sub	sp, fp, #28
   13c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c90:	bl	11000 <abort@plt>
   13c94:	movw	r3, #29088	; 0x71a0
   13c98:	movt	r3, #2
   13c9c:	b	13b00 <__assert_fail@plt+0x2ae8>
   13ca0:	movw	r3, #29088	; 0x71a0
   13ca4:	mov	r1, r0
   13ca8:	mov	r0, #0
   13cac:	mvn	r2, #0
   13cb0:	movt	r3, #2
   13cb4:	b	13b00 <__assert_fail@plt+0x2ae8>
   13cb8:	movw	r3, #29088	; 0x71a0
   13cbc:	mov	r2, r1
   13cc0:	mov	r1, r0
   13cc4:	mov	r0, #0
   13cc8:	movt	r3, #2
   13ccc:	b	13b00 <__assert_fail@plt+0x2ae8>
   13cd0:	push	{fp, lr}
   13cd4:	mov	fp, sp
   13cd8:	sub	sp, sp, #48	; 0x30
   13cdc:	vmov.i32	q8, #0	; 0x00000000
   13ce0:	mov	ip, #32
   13ce4:	mov	r3, sp
   13ce8:	mov	lr, r2
   13cec:	cmp	r1, #10
   13cf0:	add	r2, r3, #16
   13cf4:	vst1.64	{d16-d17}, [r3], ip
   13cf8:	vst1.64	{d16-d17}, [r3]
   13cfc:	vst1.64	{d16-d17}, [r2]
   13d00:	beq	13d20 <__assert_fail@plt+0x2d08>
   13d04:	str	r1, [sp]
   13d08:	mov	r3, sp
   13d0c:	mov	r1, lr
   13d10:	mvn	r2, #0
   13d14:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13d18:	mov	sp, fp
   13d1c:	pop	{fp, pc}
   13d20:	bl	11000 <abort@plt>
   13d24:	push	{r4, sl, fp, lr}
   13d28:	add	fp, sp, #8
   13d2c:	sub	sp, sp, #48	; 0x30
   13d30:	mov	ip, r3
   13d34:	mov	r3, sp
   13d38:	vmov.i32	q8, #0	; 0x00000000
   13d3c:	mov	lr, #32
   13d40:	cmp	r1, #10
   13d44:	add	r4, r3, #16
   13d48:	vst1.64	{d16-d17}, [r3], lr
   13d4c:	vst1.64	{d16-d17}, [r3]
   13d50:	vst1.64	{d16-d17}, [r4]
   13d54:	beq	13d74 <__assert_fail@plt+0x2d5c>
   13d58:	str	r1, [sp]
   13d5c:	mov	r1, r2
   13d60:	mov	r3, sp
   13d64:	mov	r2, ip
   13d68:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13d6c:	sub	sp, fp, #8
   13d70:	pop	{r4, sl, fp, pc}
   13d74:	bl	11000 <abort@plt>
   13d78:	push	{fp, lr}
   13d7c:	mov	fp, sp
   13d80:	sub	sp, sp, #48	; 0x30
   13d84:	mov	r3, sp
   13d88:	vmov.i32	q8, #0	; 0x00000000
   13d8c:	mov	ip, #32
   13d90:	cmp	r0, #10
   13d94:	add	r2, r3, #16
   13d98:	vst1.64	{d16-d17}, [r3], ip
   13d9c:	vst1.64	{d16-d17}, [r3]
   13da0:	vst1.64	{d16-d17}, [r2]
   13da4:	beq	13dc4 <__assert_fail@plt+0x2dac>
   13da8:	str	r0, [sp]
   13dac:	mov	r3, sp
   13db0:	mov	r0, #0
   13db4:	mvn	r2, #0
   13db8:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13dbc:	mov	sp, fp
   13dc0:	pop	{fp, pc}
   13dc4:	bl	11000 <abort@plt>
   13dc8:	push	{fp, lr}
   13dcc:	mov	fp, sp
   13dd0:	sub	sp, sp, #48	; 0x30
   13dd4:	mov	r3, sp
   13dd8:	vmov.i32	q8, #0	; 0x00000000
   13ddc:	mov	ip, #32
   13de0:	cmp	r0, #10
   13de4:	add	lr, r3, #16
   13de8:	vst1.64	{d16-d17}, [r3], ip
   13dec:	vst1.64	{d16-d17}, [r3]
   13df0:	vst1.64	{d16-d17}, [lr]
   13df4:	beq	13e10 <__assert_fail@plt+0x2df8>
   13df8:	str	r0, [sp]
   13dfc:	mov	r3, sp
   13e00:	mov	r0, #0
   13e04:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13e08:	mov	sp, fp
   13e0c:	pop	{fp, pc}
   13e10:	bl	11000 <abort@plt>
   13e14:	push	{r4, sl, fp, lr}
   13e18:	add	fp, sp, #8
   13e1c:	sub	sp, sp, #48	; 0x30
   13e20:	mov	lr, r0
   13e24:	movw	r0, #29088	; 0x71a0
   13e28:	mov	r3, #32
   13e2c:	mov	ip, r1
   13e30:	mov	r4, #1
   13e34:	movt	r0, #2
   13e38:	add	r1, r0, #16
   13e3c:	vld1.64	{d16-d17}, [r0], r3
   13e40:	mov	r3, sp
   13e44:	vld1.64	{d18-d19}, [r1]
   13e48:	add	r1, r3, #16
   13e4c:	vld1.64	{d20-d21}, [r0]
   13e50:	add	r0, r3, #32
   13e54:	vst1.64	{d18-d19}, [r1]
   13e58:	mov	r1, r3
   13e5c:	vst1.64	{d20-d21}, [r0]
   13e60:	mov	r0, #28
   13e64:	and	r0, r0, r2, lsr #3
   13e68:	and	r2, r2, #31
   13e6c:	vst1.64	{d16-d17}, [r1], r0
   13e70:	ldr	r0, [r1, #8]
   13e74:	bic	r4, r4, r0, lsr r2
   13e78:	eor	r0, r0, r4, lsl r2
   13e7c:	mov	r2, ip
   13e80:	str	r0, [r1, #8]
   13e84:	mov	r0, #0
   13e88:	mov	r1, lr
   13e8c:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13e90:	sub	sp, fp, #8
   13e94:	pop	{r4, sl, fp, pc}
   13e98:	push	{fp, lr}
   13e9c:	mov	fp, sp
   13ea0:	sub	sp, sp, #48	; 0x30
   13ea4:	mov	ip, r0
   13ea8:	movw	r0, #29088	; 0x71a0
   13eac:	mov	r3, #32
   13eb0:	movt	r0, #2
   13eb4:	add	r2, r0, #16
   13eb8:	vld1.64	{d16-d17}, [r0], r3
   13ebc:	mov	r3, sp
   13ec0:	vld1.64	{d18-d19}, [r2]
   13ec4:	add	r2, r3, #16
   13ec8:	vld1.64	{d20-d21}, [r0]
   13ecc:	add	r0, r3, #32
   13ed0:	vst1.64	{d18-d19}, [r2]
   13ed4:	mov	r2, r3
   13ed8:	vst1.64	{d20-d21}, [r0]
   13edc:	mov	r0, #28
   13ee0:	and	r0, r0, r1, lsr #3
   13ee4:	and	r1, r1, #31
   13ee8:	vst1.64	{d16-d17}, [r2], r0
   13eec:	mov	r0, #1
   13ef0:	ldr	lr, [r2, #8]
   13ef4:	bic	r0, r0, lr, lsr r1
   13ef8:	eor	r0, lr, r0, lsl r1
   13efc:	mov	r1, ip
   13f00:	str	r0, [r2, #8]
   13f04:	mov	r0, #0
   13f08:	mvn	r2, #0
   13f0c:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13f10:	mov	sp, fp
   13f14:	pop	{fp, pc}
   13f18:	push	{fp, lr}
   13f1c:	mov	fp, sp
   13f20:	sub	sp, sp, #48	; 0x30
   13f24:	movw	r2, #29088	; 0x71a0
   13f28:	mov	r3, #32
   13f2c:	mov	r1, r0
   13f30:	movt	r2, #2
   13f34:	add	r0, r2, #16
   13f38:	vld1.64	{d16-d17}, [r2], r3
   13f3c:	mov	r3, sp
   13f40:	vld1.64	{d18-d19}, [r0]
   13f44:	add	r0, r3, #16
   13f48:	vld1.64	{d20-d21}, [r2]
   13f4c:	mov	r2, r3
   13f50:	vst1.64	{d18-d19}, [r0]
   13f54:	add	r0, r3, #32
   13f58:	vst1.64	{d20-d21}, [r0]
   13f5c:	mov	r0, #12
   13f60:	vst1.64	{d16-d17}, [r2], r0
   13f64:	ldr	r0, [r2]
   13f68:	orr	r0, r0, #67108864	; 0x4000000
   13f6c:	str	r0, [r2]
   13f70:	mov	r0, #0
   13f74:	mvn	r2, #0
   13f78:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13f7c:	mov	sp, fp
   13f80:	pop	{fp, pc}
   13f84:	push	{fp, lr}
   13f88:	mov	fp, sp
   13f8c:	sub	sp, sp, #48	; 0x30
   13f90:	mov	ip, r1
   13f94:	mov	r1, r0
   13f98:	movw	r0, #29088	; 0x71a0
   13f9c:	mov	r3, #32
   13fa0:	movt	r0, #2
   13fa4:	add	r2, r0, #16
   13fa8:	vld1.64	{d16-d17}, [r0], r3
   13fac:	mov	r3, sp
   13fb0:	vld1.64	{d18-d19}, [r2]
   13fb4:	add	r2, r3, #16
   13fb8:	vld1.64	{d20-d21}, [r0]
   13fbc:	add	r0, r3, #32
   13fc0:	vst1.64	{d18-d19}, [r2]
   13fc4:	mov	r2, r3
   13fc8:	vst1.64	{d20-d21}, [r0]
   13fcc:	mov	r0, #12
   13fd0:	vst1.64	{d16-d17}, [r2], r0
   13fd4:	ldr	r0, [r2]
   13fd8:	orr	r0, r0, #67108864	; 0x4000000
   13fdc:	str	r0, [r2]
   13fe0:	mov	r0, #0
   13fe4:	mov	r2, ip
   13fe8:	bl	13b00 <__assert_fail@plt+0x2ae8>
   13fec:	mov	sp, fp
   13ff0:	pop	{fp, pc}
   13ff4:	push	{r4, sl, fp, lr}
   13ff8:	add	fp, sp, #8
   13ffc:	sub	sp, sp, #96	; 0x60
   14000:	mov	ip, r2
   14004:	mov	r2, sp
   14008:	vmov.i32	q8, #0	; 0x00000000
   1400c:	mov	r4, #28
   14010:	cmp	r1, #10
   14014:	mov	r3, r2
   14018:	add	lr, r2, #16
   1401c:	vst1.64	{d16-d17}, [r3], r4
   14020:	vst1.64	{d16-d17}, [lr]
   14024:	vst1.32	{d16-d17}, [r3]
   14028:	beq	14078 <__assert_fail@plt+0x3060>
   1402c:	vld1.64	{d16-d17}, [r2], r4
   14030:	vld1.64	{d18-d19}, [lr]
   14034:	add	r3, sp, #48	; 0x30
   14038:	add	r4, r3, #4
   1403c:	vld1.32	{d20-d21}, [r2]
   14040:	add	r2, r3, #20
   14044:	vst1.32	{d16-d17}, [r4]
   14048:	vst1.32	{d18-d19}, [r2]
   1404c:	add	r2, r3, #32
   14050:	vst1.32	{d20-d21}, [r2]
   14054:	str	r1, [sp, #48]	; 0x30
   14058:	mvn	r2, #0
   1405c:	ldr	r1, [sp, #60]	; 0x3c
   14060:	orr	r1, r1, #67108864	; 0x4000000
   14064:	str	r1, [sp, #60]	; 0x3c
   14068:	mov	r1, ip
   1406c:	bl	13b00 <__assert_fail@plt+0x2ae8>
   14070:	sub	sp, fp, #8
   14074:	pop	{r4, sl, fp, pc}
   14078:	bl	11000 <abort@plt>
   1407c:	push	{r4, r5, fp, lr}
   14080:	add	fp, sp, #8
   14084:	sub	sp, sp, #48	; 0x30
   14088:	mov	ip, r3
   1408c:	movw	r3, #29088	; 0x71a0
   14090:	mov	lr, #32
   14094:	cmp	r1, #0
   14098:	mov	r5, sp
   1409c:	movt	r3, #2
   140a0:	cmpne	r2, #0
   140a4:	add	r4, r3, #16
   140a8:	vld1.64	{d16-d17}, [r3], lr
   140ac:	vld1.64	{d18-d19}, [r4]
   140b0:	add	r4, r5, #16
   140b4:	vld1.64	{d20-d21}, [r3]
   140b8:	vst1.64	{d16-d17}, [r5], lr
   140bc:	mov	r3, #10
   140c0:	vst1.64	{d18-d19}, [r4]
   140c4:	vst1.64	{d20-d21}, [r5]
   140c8:	str	r3, [sp]
   140cc:	bne	140d4 <__assert_fail@plt+0x30bc>
   140d0:	bl	11000 <abort@plt>
   140d4:	str	r2, [sp, #44]	; 0x2c
   140d8:	str	r1, [sp, #40]	; 0x28
   140dc:	mov	r3, sp
   140e0:	mov	r1, ip
   140e4:	mvn	r2, #0
   140e8:	bl	13b00 <__assert_fail@plt+0x2ae8>
   140ec:	sub	sp, fp, #8
   140f0:	pop	{r4, r5, fp, pc}
   140f4:	push	{r4, r5, fp, lr}
   140f8:	add	fp, sp, #8
   140fc:	sub	sp, sp, #48	; 0x30
   14100:	mov	lr, r3
   14104:	movw	r3, #29088	; 0x71a0
   14108:	mov	ip, #32
   1410c:	cmp	r1, #0
   14110:	mov	r5, sp
   14114:	movt	r3, #2
   14118:	cmpne	r2, #0
   1411c:	add	r4, r3, #16
   14120:	vld1.64	{d16-d17}, [r3], ip
   14124:	vld1.64	{d18-d19}, [r4]
   14128:	add	r4, r5, #16
   1412c:	vld1.64	{d20-d21}, [r3]
   14130:	vst1.64	{d16-d17}, [r5], ip
   14134:	mov	r3, #10
   14138:	vst1.64	{d18-d19}, [r4]
   1413c:	vst1.64	{d20-d21}, [r5]
   14140:	str	r3, [sp]
   14144:	bne	1414c <__assert_fail@plt+0x3134>
   14148:	bl	11000 <abort@plt>
   1414c:	ldr	ip, [fp, #8]
   14150:	str	r2, [sp, #44]	; 0x2c
   14154:	str	r1, [sp, #40]	; 0x28
   14158:	mov	r3, sp
   1415c:	mov	r1, lr
   14160:	mov	r2, ip
   14164:	bl	13b00 <__assert_fail@plt+0x2ae8>
   14168:	sub	sp, fp, #8
   1416c:	pop	{r4, r5, fp, pc}
   14170:	push	{r4, sl, fp, lr}
   14174:	add	fp, sp, #8
   14178:	sub	sp, sp, #48	; 0x30
   1417c:	mov	ip, r2
   14180:	movw	r2, #29088	; 0x71a0
   14184:	mov	lr, #32
   14188:	cmp	r0, #0
   1418c:	mov	r4, sp
   14190:	movt	r2, #2
   14194:	cmpne	r1, #0
   14198:	add	r3, r2, #16
   1419c:	vld1.64	{d16-d17}, [r2], lr
   141a0:	vld1.64	{d18-d19}, [r3]
   141a4:	add	r3, r4, #16
   141a8:	vld1.64	{d20-d21}, [r2]
   141ac:	vst1.64	{d16-d17}, [r4], lr
   141b0:	mov	r2, #10
   141b4:	vst1.64	{d18-d19}, [r3]
   141b8:	vst1.64	{d20-d21}, [r4]
   141bc:	str	r2, [sp]
   141c0:	bne	141c8 <__assert_fail@plt+0x31b0>
   141c4:	bl	11000 <abort@plt>
   141c8:	str	r1, [sp, #44]	; 0x2c
   141cc:	str	r0, [sp, #40]	; 0x28
   141d0:	mov	r3, sp
   141d4:	mov	r0, #0
   141d8:	mov	r1, ip
   141dc:	mvn	r2, #0
   141e0:	bl	13b00 <__assert_fail@plt+0x2ae8>
   141e4:	sub	sp, fp, #8
   141e8:	pop	{r4, sl, fp, pc}
   141ec:	push	{r4, r5, fp, lr}
   141f0:	add	fp, sp, #8
   141f4:	sub	sp, sp, #48	; 0x30
   141f8:	mov	lr, r2
   141fc:	movw	r2, #29088	; 0x71a0
   14200:	mov	ip, r3
   14204:	mov	r3, #32
   14208:	cmp	r0, #0
   1420c:	mov	r5, sp
   14210:	movt	r2, #2
   14214:	cmpne	r1, #0
   14218:	add	r4, r2, #16
   1421c:	vld1.64	{d16-d17}, [r2], r3
   14220:	vld1.64	{d18-d19}, [r4]
   14224:	add	r4, r5, #16
   14228:	vld1.64	{d20-d21}, [r2]
   1422c:	vst1.64	{d16-d17}, [r5], r3
   14230:	mov	r2, #10
   14234:	vst1.64	{d18-d19}, [r4]
   14238:	vst1.64	{d20-d21}, [r5]
   1423c:	str	r2, [sp]
   14240:	bne	14248 <__assert_fail@plt+0x3230>
   14244:	bl	11000 <abort@plt>
   14248:	str	r1, [sp, #44]	; 0x2c
   1424c:	str	r0, [sp, #40]	; 0x28
   14250:	mov	r3, sp
   14254:	mov	r0, #0
   14258:	mov	r1, lr
   1425c:	mov	r2, ip
   14260:	bl	13b00 <__assert_fail@plt+0x2ae8>
   14264:	sub	sp, fp, #8
   14268:	pop	{r4, r5, fp, pc}
   1426c:	movw	r3, #28928	; 0x7100
   14270:	movt	r3, #2
   14274:	b	13b00 <__assert_fail@plt+0x2ae8>
   14278:	movw	r3, #28928	; 0x7100
   1427c:	mov	r2, r1
   14280:	mov	r1, r0
   14284:	mov	r0, #0
   14288:	movt	r3, #2
   1428c:	b	13b00 <__assert_fail@plt+0x2ae8>
   14290:	movw	r3, #28928	; 0x7100
   14294:	mvn	r2, #0
   14298:	movt	r3, #2
   1429c:	b	13b00 <__assert_fail@plt+0x2ae8>
   142a0:	movw	r3, #28928	; 0x7100
   142a4:	mov	r1, r0
   142a8:	mov	r0, #0
   142ac:	mvn	r2, #0
   142b0:	movt	r3, #2
   142b4:	b	13b00 <__assert_fail@plt+0x2ae8>
   142b8:	push	{r4, r5, fp, lr}
   142bc:	add	fp, sp, #8
   142c0:	mov	r5, r0
   142c4:	mov	r4, r1
   142c8:	mov	r0, #0
   142cc:	mov	r2, #5
   142d0:	mov	r1, r5
   142d4:	bl	10e5c <dcgettext@plt>
   142d8:	cmp	r0, r5
   142dc:	popne	{r4, r5, fp, pc}
   142e0:	bl	15190 <__assert_fail@plt+0x4178>
   142e4:	ldrb	r1, [r0]
   142e8:	and	r1, r1, #223	; 0xdf
   142ec:	cmp	r1, #71	; 0x47
   142f0:	beq	14358 <__assert_fail@plt+0x3340>
   142f4:	cmp	r1, #85	; 0x55
   142f8:	bne	1437c <__assert_fail@plt+0x3364>
   142fc:	ldrb	r1, [r0, #1]
   14300:	and	r1, r1, #223	; 0xdf
   14304:	cmp	r1, #84	; 0x54
   14308:	bne	1437c <__assert_fail@plt+0x3364>
   1430c:	ldrb	r1, [r0, #2]
   14310:	and	r1, r1, #223	; 0xdf
   14314:	cmp	r1, #70	; 0x46
   14318:	ldrbeq	r1, [r0, #3]
   1431c:	cmpeq	r1, #45	; 0x2d
   14320:	bne	1437c <__assert_fail@plt+0x3364>
   14324:	ldrb	r1, [r0, #4]
   14328:	cmp	r1, #56	; 0x38
   1432c:	ldrbeq	r0, [r0, #5]
   14330:	cmpeq	r0, #0
   14334:	bne	1437c <__assert_fail@plt+0x3364>
   14338:	ldrb	r1, [r5]
   1433c:	movw	r2, #24120	; 0x5e38
   14340:	movw	r0, #24124	; 0x5e3c
   14344:	movt	r2, #1
   14348:	movt	r0, #1
   1434c:	cmp	r1, #96	; 0x60
   14350:	moveq	r0, r2
   14354:	pop	{r4, r5, fp, pc}
   14358:	ldrb	r1, [r0, #1]
   1435c:	and	r1, r1, #223	; 0xdf
   14360:	cmp	r1, #66	; 0x42
   14364:	bne	1437c <__assert_fail@plt+0x3364>
   14368:	ldrb	r1, [r0, #2]
   1436c:	cmp	r1, #49	; 0x31
   14370:	ldrbeq	r1, [r0, #3]
   14374:	cmpeq	r1, #56	; 0x38
   14378:	beq	14398 <__assert_fail@plt+0x3380>
   1437c:	movw	r1, #24116	; 0x5e34
   14380:	movw	r0, #23948	; 0x5d8c
   14384:	cmp	r4, #9
   14388:	movt	r1, #1
   1438c:	movt	r0, #1
   14390:	moveq	r0, r1
   14394:	pop	{r4, r5, fp, pc}
   14398:	ldrb	r1, [r0, #4]
   1439c:	cmp	r1, #48	; 0x30
   143a0:	ldrbeq	r1, [r0, #5]
   143a4:	cmpeq	r1, #51	; 0x33
   143a8:	bne	1437c <__assert_fail@plt+0x3364>
   143ac:	ldrb	r1, [r0, #6]
   143b0:	cmp	r1, #48	; 0x30
   143b4:	ldrbeq	r0, [r0, #7]
   143b8:	cmpeq	r0, #0
   143bc:	bne	1437c <__assert_fail@plt+0x3364>
   143c0:	ldrb	r1, [r5]
   143c4:	movw	r2, #24128	; 0x5e40
   143c8:	movw	r0, #24132	; 0x5e44
   143cc:	movt	r2, #1
   143d0:	movt	r0, #1
   143d4:	b	1434c <__assert_fail@plt+0x3334>
   143d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143dc:	add	fp, sp, #24
   143e0:	sub	sp, sp, #32
   143e4:	ldr	r6, [fp, #12]
   143e8:	ldr	r7, [fp, #8]
   143ec:	mov	r4, r2
   143f0:	mov	r8, r0
   143f4:	cmp	r1, #0
   143f8:	beq	14420 <__assert_fail@plt+0x3408>
   143fc:	movw	r2, #24220	; 0x5e9c
   14400:	mov	r5, r1
   14404:	str	r3, [sp, #4]
   14408:	str	r4, [sp]
   1440c:	mov	r0, r8
   14410:	mov	r1, #1
   14414:	movt	r2, #1
   14418:	mov	r3, r5
   1441c:	b	14438 <__assert_fail@plt+0x3420>
   14420:	movw	r2, #24232	; 0x5ea8
   14424:	str	r3, [sp]
   14428:	mov	r0, r8
   1442c:	mov	r1, #1
   14430:	mov	r3, r4
   14434:	movt	r2, #1
   14438:	bl	10f70 <__fprintf_chk@plt>
   1443c:	movw	r1, #24239	; 0x5eaf
   14440:	mov	r0, #0
   14444:	mov	r2, #5
   14448:	movt	r1, #1
   1444c:	bl	10e5c <dcgettext@plt>
   14450:	movw	r2, #24957	; 0x617d
   14454:	mov	r3, r0
   14458:	movw	r0, #2022	; 0x7e6
   1445c:	mov	r1, #1
   14460:	str	r0, [sp]
   14464:	movt	r2, #1
   14468:	mov	r0, r8
   1446c:	bl	10f70 <__fprintf_chk@plt>
   14470:	movw	r4, #22872	; 0x5958
   14474:	mov	r1, r8
   14478:	movt	r4, #1
   1447c:	mov	r0, r4
   14480:	bl	10dd8 <fputs_unlocked@plt>
   14484:	movw	r1, #24243	; 0x5eb3
   14488:	mov	r0, #0
   1448c:	mov	r2, #5
   14490:	movt	r1, #1
   14494:	bl	10e5c <dcgettext@plt>
   14498:	movw	r3, #24414	; 0x5f5e
   1449c:	mov	r2, r0
   144a0:	mov	r0, r8
   144a4:	mov	r1, #1
   144a8:	movt	r3, #1
   144ac:	bl	10f70 <__fprintf_chk@plt>
   144b0:	mov	r0, r4
   144b4:	mov	r1, r8
   144b8:	bl	10dd8 <fputs_unlocked@plt>
   144bc:	cmp	r6, #9
   144c0:	bhi	144fc <__assert_fail@plt+0x34e4>
   144c4:	add	r0, pc, #0
   144c8:	ldr	pc, [r0, r6, lsl #2]
   144cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144d0:	andeq	r4, r1, r8, lsl #10
   144d4:	andeq	r4, r1, r8, lsr r5
   144d8:	andeq	r4, r1, r0, ror #10
   144dc:	andeq	r4, r1, r8, lsl #11
   144e0:			; <UNDEFINED> instruction: 0x000145b0
   144e4:	ldrdeq	r4, [r1], -r8
   144e8:	andeq	r4, r1, r0, lsl r6
   144ec:			; <UNDEFINED> instruction: 0x000146b0
   144f0:	andeq	r4, r1, r8, asr r6
   144f4:	sub	sp, fp, #24
   144f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144fc:	movw	r1, #24767	; 0x60bf
   14500:	movt	r1, #1
   14504:	b	14660 <__assert_fail@plt+0x3648>
   14508:	movw	r1, #24448	; 0x5f80
   1450c:	mov	r0, #0
   14510:	mov	r2, #5
   14514:	movt	r1, #1
   14518:	bl	10e5c <dcgettext@plt>
   1451c:	ldr	r3, [r7]
   14520:	mov	r2, r0
   14524:	mov	r0, r8
   14528:	mov	r1, #1
   1452c:	sub	sp, fp, #24
   14530:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14534:	b	10f70 <__fprintf_chk@plt>
   14538:	movw	r1, #24464	; 0x5f90
   1453c:	mov	r0, #0
   14540:	mov	r2, #5
   14544:	movt	r1, #1
   14548:	bl	10e5c <dcgettext@plt>
   1454c:	mov	r2, r0
   14550:	ldr	r3, [r7]
   14554:	ldr	r0, [r7, #4]
   14558:	str	r0, [sp]
   1455c:	b	1464c <__assert_fail@plt+0x3634>
   14560:	movw	r1, #24487	; 0x5fa7
   14564:	mov	r0, #0
   14568:	mov	r2, #5
   1456c:	movt	r1, #1
   14570:	bl	10e5c <dcgettext@plt>
   14574:	ldr	r3, [r7]
   14578:	mov	r2, r0
   1457c:	ldmib	r7, {r0, r1}
   14580:	stm	sp, {r0, r1}
   14584:	b	1464c <__assert_fail@plt+0x3634>
   14588:	movw	r1, #24515	; 0x5fc3
   1458c:	mov	r0, #0
   14590:	mov	r2, #5
   14594:	movt	r1, #1
   14598:	bl	10e5c <dcgettext@plt>
   1459c:	ldr	r3, [r7]
   145a0:	mov	r2, r0
   145a4:	ldmib	r7, {r0, r1, r7}
   145a8:	stm	sp, {r0, r1, r7}
   145ac:	b	1464c <__assert_fail@plt+0x3634>
   145b0:	movw	r1, #24547	; 0x5fe3
   145b4:	mov	r0, #0
   145b8:	mov	r2, #5
   145bc:	movt	r1, #1
   145c0:	bl	10e5c <dcgettext@plt>
   145c4:	ldr	r3, [r7]
   145c8:	mov	r2, r0
   145cc:	ldmib	r7, {r0, r1, r6, r7}
   145d0:	stm	sp, {r0, r1, r6, r7}
   145d4:	b	1464c <__assert_fail@plt+0x3634>
   145d8:	movw	r1, #24583	; 0x6007
   145dc:	mov	r0, #0
   145e0:	mov	r2, #5
   145e4:	movt	r1, #1
   145e8:	bl	10e5c <dcgettext@plt>
   145ec:	ldr	r3, [r7]
   145f0:	mov	r2, r0
   145f4:	ldmib	r7, {r0, r1, r6}
   145f8:	ldr	r5, [r7, #16]
   145fc:	ldr	r7, [r7, #20]
   14600:	stm	sp, {r0, r1, r6}
   14604:	str	r5, [sp, #12]
   14608:	str	r7, [sp, #16]
   1460c:	b	1464c <__assert_fail@plt+0x3634>
   14610:	movw	r1, #24623	; 0x602f
   14614:	mov	r0, #0
   14618:	mov	r2, #5
   1461c:	movt	r1, #1
   14620:	bl	10e5c <dcgettext@plt>
   14624:	ldr	r3, [r7]
   14628:	mov	r2, r0
   1462c:	ldmib	r7, {r0, r1, r6}
   14630:	ldr	r5, [r7, #16]
   14634:	ldr	r4, [r7, #20]
   14638:	ldr	r7, [r7, #24]
   1463c:	stm	sp, {r0, r1, r6}
   14640:	str	r5, [sp, #12]
   14644:	str	r4, [sp, #16]
   14648:	str	r7, [sp, #20]
   1464c:	mov	r0, r8
   14650:	mov	r1, #1
   14654:	b	14700 <__assert_fail@plt+0x36e8>
   14658:	movw	r1, #24715	; 0x608b
   1465c:	movt	r1, #1
   14660:	mov	r0, #0
   14664:	mov	r2, #5
   14668:	bl	10e5c <dcgettext@plt>
   1466c:	mov	ip, r0
   14670:	ldr	r3, [r7]
   14674:	ldr	r0, [r7, #4]
   14678:	ldr	r1, [r7, #8]
   1467c:	ldr	r6, [r7, #12]
   14680:	ldr	r5, [r7, #16]
   14684:	ldr	r4, [r7, #20]
   14688:	ldr	r2, [r7, #24]
   1468c:	ldr	lr, [r7, #28]
   14690:	ldr	r7, [r7, #32]
   14694:	stm	sp, {r0, r1, r6}
   14698:	str	r5, [sp, #12]
   1469c:	str	r4, [sp, #16]
   146a0:	str	r2, [sp, #20]
   146a4:	str	lr, [sp, #24]
   146a8:	str	r7, [sp, #28]
   146ac:	b	146f4 <__assert_fail@plt+0x36dc>
   146b0:	movw	r1, #24667	; 0x605b
   146b4:	mov	r0, #0
   146b8:	mov	r2, #5
   146bc:	movt	r1, #1
   146c0:	bl	10e5c <dcgettext@plt>
   146c4:	mov	ip, r0
   146c8:	ldr	r3, [r7]
   146cc:	ldmib	r7, {r0, r1, r6}
   146d0:	ldr	r5, [r7, #16]
   146d4:	ldr	r4, [r7, #20]
   146d8:	ldr	r2, [r7, #24]
   146dc:	ldr	r7, [r7, #28]
   146e0:	stm	sp, {r0, r1, r6}
   146e4:	str	r5, [sp, #12]
   146e8:	str	r4, [sp, #16]
   146ec:	str	r2, [sp, #20]
   146f0:	str	r7, [sp, #24]
   146f4:	mov	r0, r8
   146f8:	mov	r1, #1
   146fc:	mov	r2, ip
   14700:	bl	10f70 <__fprintf_chk@plt>
   14704:	sub	sp, fp, #24
   14708:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1470c:	push	{r4, sl, fp, lr}
   14710:	add	fp, sp, #8
   14714:	sub	sp, sp, #8
   14718:	ldr	ip, [fp, #8]
   1471c:	mov	lr, #0
   14720:	ldr	r4, [ip, lr, lsl #2]
   14724:	add	lr, lr, #1
   14728:	cmp	r4, #0
   1472c:	bne	14720 <__assert_fail@plt+0x3708>
   14730:	sub	r4, lr, #1
   14734:	str	ip, [sp]
   14738:	str	r4, [sp, #4]
   1473c:	bl	143d8 <__assert_fail@plt+0x33c0>
   14740:	sub	sp, fp, #8
   14744:	pop	{r4, sl, fp, pc}
   14748:	push	{fp, lr}
   1474c:	mov	fp, sp
   14750:	sub	sp, sp, #48	; 0x30
   14754:	ldr	ip, [fp, #8]
   14758:	ldr	lr, [ip]
   1475c:	cmp	lr, #0
   14760:	str	lr, [sp, #8]
   14764:	beq	14800 <__assert_fail@plt+0x37e8>
   14768:	ldr	lr, [ip, #4]
   1476c:	cmp	lr, #0
   14770:	str	lr, [sp, #12]
   14774:	beq	14808 <__assert_fail@plt+0x37f0>
   14778:	ldr	lr, [ip, #8]
   1477c:	cmp	lr, #0
   14780:	str	lr, [sp, #16]
   14784:	beq	14810 <__assert_fail@plt+0x37f8>
   14788:	ldr	lr, [ip, #12]
   1478c:	cmp	lr, #0
   14790:	str	lr, [sp, #20]
   14794:	beq	14818 <__assert_fail@plt+0x3800>
   14798:	ldr	lr, [ip, #16]
   1479c:	cmp	lr, #0
   147a0:	str	lr, [sp, #24]
   147a4:	beq	14820 <__assert_fail@plt+0x3808>
   147a8:	ldr	lr, [ip, #20]
   147ac:	cmp	lr, #0
   147b0:	str	lr, [sp, #28]
   147b4:	beq	14828 <__assert_fail@plt+0x3810>
   147b8:	ldr	lr, [ip, #24]
   147bc:	cmp	lr, #0
   147c0:	str	lr, [sp, #32]
   147c4:	beq	14830 <__assert_fail@plt+0x3818>
   147c8:	ldr	lr, [ip, #28]
   147cc:	cmp	lr, #0
   147d0:	str	lr, [sp, #36]	; 0x24
   147d4:	beq	14838 <__assert_fail@plt+0x3820>
   147d8:	ldr	lr, [ip, #32]
   147dc:	cmp	lr, #0
   147e0:	str	lr, [sp, #40]	; 0x28
   147e4:	beq	14840 <__assert_fail@plt+0x3828>
   147e8:	ldr	lr, [ip, #36]	; 0x24
   147ec:	mov	ip, #10
   147f0:	cmp	lr, #0
   147f4:	str	lr, [sp, #44]	; 0x2c
   147f8:	movweq	ip, #9
   147fc:	b	14844 <__assert_fail@plt+0x382c>
   14800:	mov	ip, #0
   14804:	b	14844 <__assert_fail@plt+0x382c>
   14808:	mov	ip, #1
   1480c:	b	14844 <__assert_fail@plt+0x382c>
   14810:	mov	ip, #2
   14814:	b	14844 <__assert_fail@plt+0x382c>
   14818:	mov	ip, #3
   1481c:	b	14844 <__assert_fail@plt+0x382c>
   14820:	mov	ip, #4
   14824:	b	14844 <__assert_fail@plt+0x382c>
   14828:	mov	ip, #5
   1482c:	b	14844 <__assert_fail@plt+0x382c>
   14830:	mov	ip, #6
   14834:	b	14844 <__assert_fail@plt+0x382c>
   14838:	mov	ip, #7
   1483c:	b	14844 <__assert_fail@plt+0x382c>
   14840:	mov	ip, #8
   14844:	add	lr, sp, #8
   14848:	str	ip, [sp, #4]
   1484c:	str	lr, [sp]
   14850:	bl	143d8 <__assert_fail@plt+0x33c0>
   14854:	mov	sp, fp
   14858:	pop	{fp, pc}
   1485c:	push	{fp, lr}
   14860:	mov	fp, sp
   14864:	sub	sp, sp, #56	; 0x38
   14868:	add	ip, fp, #8
   1486c:	str	ip, [sp, #12]
   14870:	ldr	lr, [fp, #8]
   14874:	cmp	lr, #0
   14878:	str	lr, [sp, #16]
   1487c:	beq	14918 <__assert_fail@plt+0x3900>
   14880:	ldr	lr, [ip, #4]
   14884:	cmp	lr, #0
   14888:	str	lr, [sp, #20]
   1488c:	beq	14920 <__assert_fail@plt+0x3908>
   14890:	ldr	lr, [ip, #8]
   14894:	cmp	lr, #0
   14898:	str	lr, [sp, #24]
   1489c:	beq	14928 <__assert_fail@plt+0x3910>
   148a0:	ldr	lr, [ip, #12]
   148a4:	cmp	lr, #0
   148a8:	str	lr, [sp, #28]
   148ac:	beq	14930 <__assert_fail@plt+0x3918>
   148b0:	ldr	lr, [ip, #16]
   148b4:	cmp	lr, #0
   148b8:	str	lr, [sp, #32]
   148bc:	beq	14938 <__assert_fail@plt+0x3920>
   148c0:	ldr	lr, [ip, #20]
   148c4:	cmp	lr, #0
   148c8:	str	lr, [sp, #36]	; 0x24
   148cc:	beq	14940 <__assert_fail@plt+0x3928>
   148d0:	ldr	lr, [ip, #24]
   148d4:	cmp	lr, #0
   148d8:	str	lr, [sp, #40]	; 0x28
   148dc:	beq	14948 <__assert_fail@plt+0x3930>
   148e0:	ldr	lr, [ip, #28]
   148e4:	cmp	lr, #0
   148e8:	str	lr, [sp, #44]	; 0x2c
   148ec:	beq	14950 <__assert_fail@plt+0x3938>
   148f0:	ldr	lr, [ip, #32]
   148f4:	cmp	lr, #0
   148f8:	str	lr, [sp, #48]	; 0x30
   148fc:	beq	14958 <__assert_fail@plt+0x3940>
   14900:	ldr	lr, [ip, #36]	; 0x24
   14904:	mov	ip, #10
   14908:	cmp	lr, #0
   1490c:	str	lr, [sp, #52]	; 0x34
   14910:	movweq	ip, #9
   14914:	b	1495c <__assert_fail@plt+0x3944>
   14918:	mov	ip, #0
   1491c:	b	1495c <__assert_fail@plt+0x3944>
   14920:	mov	ip, #1
   14924:	b	1495c <__assert_fail@plt+0x3944>
   14928:	mov	ip, #2
   1492c:	b	1495c <__assert_fail@plt+0x3944>
   14930:	mov	ip, #3
   14934:	b	1495c <__assert_fail@plt+0x3944>
   14938:	mov	ip, #4
   1493c:	b	1495c <__assert_fail@plt+0x3944>
   14940:	mov	ip, #5
   14944:	b	1495c <__assert_fail@plt+0x3944>
   14948:	mov	ip, #6
   1494c:	b	1495c <__assert_fail@plt+0x3944>
   14950:	mov	ip, #7
   14954:	b	1495c <__assert_fail@plt+0x3944>
   14958:	mov	ip, #8
   1495c:	add	lr, sp, #16
   14960:	str	ip, [sp, #4]
   14964:	str	lr, [sp]
   14968:	bl	143d8 <__assert_fail@plt+0x33c0>
   1496c:	mov	sp, fp
   14970:	pop	{fp, pc}
   14974:	push	{fp, lr}
   14978:	mov	fp, sp
   1497c:	movw	r0, #29004	; 0x714c
   14980:	movt	r0, #2
   14984:	ldr	r1, [r0]
   14988:	movw	r0, #22872	; 0x5958
   1498c:	movt	r0, #1
   14990:	bl	10dd8 <fputs_unlocked@plt>
   14994:	movw	r1, #24827	; 0x60fb
   14998:	mov	r0, #0
   1499c:	mov	r2, #5
   149a0:	movt	r1, #1
   149a4:	bl	10e5c <dcgettext@plt>
   149a8:	movw	r2, #24847	; 0x610f
   149ac:	mov	r1, r0
   149b0:	mov	r0, #1
   149b4:	movt	r2, #1
   149b8:	bl	10f58 <__printf_chk@plt>
   149bc:	movw	r1, #24869	; 0x6125
   149c0:	mov	r0, #0
   149c4:	mov	r2, #5
   149c8:	movt	r1, #1
   149cc:	bl	10e5c <dcgettext@plt>
   149d0:	movw	r2, #22374	; 0x5766
   149d4:	movw	r3, #22681	; 0x5899
   149d8:	mov	r1, r0
   149dc:	mov	r0, #1
   149e0:	movt	r2, #1
   149e4:	movt	r3, #1
   149e8:	bl	10f58 <__printf_chk@plt>
   149ec:	movw	r1, #24889	; 0x6139
   149f0:	mov	r0, #0
   149f4:	mov	r2, #5
   149f8:	movt	r1, #1
   149fc:	bl	10e5c <dcgettext@plt>
   14a00:	movw	r2, #24928	; 0x6160
   14a04:	mov	r1, r0
   14a08:	mov	r0, #1
   14a0c:	movt	r2, #1
   14a10:	pop	{fp, lr}
   14a14:	b	10f58 <__printf_chk@plt>
   14a18:	push	{r4, r5, r6, sl, fp, lr}
   14a1c:	add	fp, sp, #16
   14a20:	mov	r4, r2
   14a24:	mov	r5, r1
   14a28:	mov	r6, r0
   14a2c:	bl	15228 <__assert_fail@plt+0x4210>
   14a30:	cmp	r0, #0
   14a34:	popne	{r4, r5, r6, sl, fp, pc}
   14a38:	cmp	r6, #0
   14a3c:	beq	14a50 <__assert_fail@plt+0x3a38>
   14a40:	cmp	r5, #0
   14a44:	cmpne	r4, #0
   14a48:	bne	14a50 <__assert_fail@plt+0x3a38>
   14a4c:	pop	{r4, r5, r6, sl, fp, pc}
   14a50:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14a54:	push	{r4, r5, r6, sl, fp, lr}
   14a58:	add	fp, sp, #16
   14a5c:	mov	r4, r2
   14a60:	mov	r5, r1
   14a64:	mov	r6, r0
   14a68:	bl	15228 <__assert_fail@plt+0x4210>
   14a6c:	cmp	r0, #0
   14a70:	popne	{r4, r5, r6, sl, fp, pc}
   14a74:	cmp	r6, #0
   14a78:	beq	14a8c <__assert_fail@plt+0x3a74>
   14a7c:	cmp	r5, #0
   14a80:	cmpne	r4, #0
   14a84:	bne	14a8c <__assert_fail@plt+0x3a74>
   14a88:	pop	{r4, r5, r6, sl, fp, pc}
   14a8c:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14a90:	push	{fp, lr}
   14a94:	mov	fp, sp
   14a98:	bl	15088 <__assert_fail@plt+0x4070>
   14a9c:	cmp	r0, #0
   14aa0:	popne	{fp, pc}
   14aa4:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14aa8:	push	{fp, lr}
   14aac:	mov	fp, sp
   14ab0:	bl	15088 <__assert_fail@plt+0x4070>
   14ab4:	cmp	r0, #0
   14ab8:	popne	{fp, pc}
   14abc:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14ac0:	push	{fp, lr}
   14ac4:	mov	fp, sp
   14ac8:	bl	15088 <__assert_fail@plt+0x4070>
   14acc:	cmp	r0, #0
   14ad0:	popne	{fp, pc}
   14ad4:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14ad8:	push	{r4, r5, fp, lr}
   14adc:	add	fp, sp, #8
   14ae0:	mov	r4, r1
   14ae4:	mov	r5, r0
   14ae8:	bl	150b8 <__assert_fail@plt+0x40a0>
   14aec:	cmp	r0, #0
   14af0:	popne	{r4, r5, fp, pc}
   14af4:	cmp	r5, #0
   14af8:	beq	14b08 <__assert_fail@plt+0x3af0>
   14afc:	cmp	r4, #0
   14b00:	bne	14b08 <__assert_fail@plt+0x3af0>
   14b04:	pop	{r4, r5, fp, pc}
   14b08:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14b0c:	push	{fp, lr}
   14b10:	mov	fp, sp
   14b14:	cmp	r1, #0
   14b18:	orreq	r1, r1, #1
   14b1c:	bl	150b8 <__assert_fail@plt+0x40a0>
   14b20:	cmp	r0, #0
   14b24:	popne	{fp, pc}
   14b28:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14b2c:	push	{fp, lr}
   14b30:	mov	fp, sp
   14b34:	clz	r3, r2
   14b38:	lsr	ip, r3, #5
   14b3c:	clz	r3, r1
   14b40:	lsr	r3, r3, #5
   14b44:	orrs	r3, r3, ip
   14b48:	movwne	r1, #1
   14b4c:	movwne	r2, #1
   14b50:	bl	15228 <__assert_fail@plt+0x4210>
   14b54:	cmp	r0, #0
   14b58:	popne	{fp, pc}
   14b5c:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14b60:	push	{fp, lr}
   14b64:	mov	fp, sp
   14b68:	mov	r2, r1
   14b6c:	mov	r1, r0
   14b70:	mov	r0, #0
   14b74:	bl	15228 <__assert_fail@plt+0x4210>
   14b78:	cmp	r0, #0
   14b7c:	popne	{fp, pc}
   14b80:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14b84:	push	{fp, lr}
   14b88:	mov	fp, sp
   14b8c:	mov	r2, r1
   14b90:	mov	r1, r0
   14b94:	clz	r0, r2
   14b98:	clz	r3, r1
   14b9c:	lsr	r0, r0, #5
   14ba0:	lsr	r3, r3, #5
   14ba4:	orrs	r0, r3, r0
   14ba8:	movwne	r1, #1
   14bac:	movwne	r2, #1
   14bb0:	mov	r0, #0
   14bb4:	bl	15228 <__assert_fail@plt+0x4210>
   14bb8:	cmp	r0, #0
   14bbc:	popne	{fp, pc}
   14bc0:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14bc4:	push	{r4, r5, r6, sl, fp, lr}
   14bc8:	add	fp, sp, #16
   14bcc:	ldr	r5, [r1]
   14bd0:	mov	r4, r1
   14bd4:	mov	r6, r0
   14bd8:	cmp	r0, #0
   14bdc:	beq	14bf4 <__assert_fail@plt+0x3bdc>
   14be0:	mov	r0, #1
   14be4:	add	r0, r0, r5, lsr #1
   14be8:	adds	r5, r5, r0
   14bec:	bcc	14bfc <__assert_fail@plt+0x3be4>
   14bf0:	b	14c38 <__assert_fail@plt+0x3c20>
   14bf4:	cmp	r5, #0
   14bf8:	movweq	r5, #64	; 0x40
   14bfc:	mov	r0, r6
   14c00:	mov	r1, r5
   14c04:	mov	r2, #1
   14c08:	bl	15228 <__assert_fail@plt+0x4210>
   14c0c:	cmp	r5, #0
   14c10:	mov	r1, r5
   14c14:	movwne	r1, #1
   14c18:	cmp	r0, #0
   14c1c:	bne	14c30 <__assert_fail@plt+0x3c18>
   14c20:	clz	r2, r6
   14c24:	lsr	r2, r2, #5
   14c28:	orrs	r1, r2, r1
   14c2c:	bne	14c38 <__assert_fail@plt+0x3c20>
   14c30:	str	r5, [r4]
   14c34:	pop	{r4, r5, r6, sl, fp, pc}
   14c38:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14c3c:	push	{r4, r5, r6, r7, fp, lr}
   14c40:	add	fp, sp, #16
   14c44:	ldr	r5, [r1]
   14c48:	mov	r6, r2
   14c4c:	mov	r4, r1
   14c50:	mov	r7, r0
   14c54:	cmp	r0, #0
   14c58:	beq	14c70 <__assert_fail@plt+0x3c58>
   14c5c:	mov	r0, #1
   14c60:	add	r0, r0, r5, lsr #1
   14c64:	adds	r5, r5, r0
   14c68:	bcc	14c88 <__assert_fail@plt+0x3c70>
   14c6c:	b	14cbc <__assert_fail@plt+0x3ca4>
   14c70:	cmp	r5, #0
   14c74:	bne	14c88 <__assert_fail@plt+0x3c70>
   14c78:	mov	r0, #64	; 0x40
   14c7c:	cmp	r6, #64	; 0x40
   14c80:	udiv	r5, r0, r6
   14c84:	addhi	r5, r5, #1
   14c88:	mov	r0, r7
   14c8c:	mov	r1, r5
   14c90:	mov	r2, r6
   14c94:	bl	15228 <__assert_fail@plt+0x4210>
   14c98:	cmp	r0, #0
   14c9c:	bne	14cb4 <__assert_fail@plt+0x3c9c>
   14ca0:	cmp	r7, #0
   14ca4:	beq	14cbc <__assert_fail@plt+0x3ca4>
   14ca8:	cmp	r6, #0
   14cac:	cmpne	r5, #0
   14cb0:	bne	14cbc <__assert_fail@plt+0x3ca4>
   14cb4:	str	r5, [r4]
   14cb8:	pop	{r4, r5, r6, r7, fp, pc}
   14cbc:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14cc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cc4:	add	fp, sp, #24
   14cc8:	mov	r8, r1
   14ccc:	ldr	r1, [r1]
   14cd0:	mov	r5, r0
   14cd4:	add	r0, r1, r1, asr #1
   14cd8:	cmp	r0, r1
   14cdc:	mvnvs	r0, #-2147483648	; 0x80000000
   14ce0:	cmp	r0, r3
   14ce4:	mov	r7, r0
   14ce8:	movgt	r7, r3
   14cec:	cmn	r3, #1
   14cf0:	movle	r7, r0
   14cf4:	ldr	r0, [fp, #8]
   14cf8:	cmn	r0, #1
   14cfc:	ble	14d24 <__assert_fail@plt+0x3d0c>
   14d00:	cmp	r0, #0
   14d04:	beq	14d78 <__assert_fail@plt+0x3d60>
   14d08:	cmn	r7, #1
   14d0c:	ble	14d4c <__assert_fail@plt+0x3d34>
   14d10:	mvn	r4, #-2147483648	; 0x80000000
   14d14:	udiv	r6, r4, r0
   14d18:	cmp	r6, r7
   14d1c:	bge	14d78 <__assert_fail@plt+0x3d60>
   14d20:	b	14d88 <__assert_fail@plt+0x3d70>
   14d24:	cmn	r7, #1
   14d28:	ble	14d68 <__assert_fail@plt+0x3d50>
   14d2c:	cmn	r0, #1
   14d30:	beq	14d78 <__assert_fail@plt+0x3d60>
   14d34:	mov	r6, #-2147483648	; 0x80000000
   14d38:	mvn	r4, #-2147483648	; 0x80000000
   14d3c:	sdiv	r6, r6, r0
   14d40:	cmp	r6, r7
   14d44:	bge	14d78 <__assert_fail@plt+0x3d60>
   14d48:	b	14d88 <__assert_fail@plt+0x3d70>
   14d4c:	beq	14d78 <__assert_fail@plt+0x3d60>
   14d50:	mov	r6, #-2147483648	; 0x80000000
   14d54:	mvn	r4, #-2147483648	; 0x80000000
   14d58:	sdiv	r6, r6, r7
   14d5c:	cmp	r6, r0
   14d60:	bge	14d78 <__assert_fail@plt+0x3d60>
   14d64:	b	14d88 <__assert_fail@plt+0x3d70>
   14d68:	mvn	r4, #-2147483648	; 0x80000000
   14d6c:	sdiv	r6, r4, r0
   14d70:	cmp	r7, r6
   14d74:	blt	14d88 <__assert_fail@plt+0x3d70>
   14d78:	mul	r6, r7, r0
   14d7c:	mov	r4, #64	; 0x40
   14d80:	cmp	r6, #63	; 0x3f
   14d84:	bgt	14d90 <__assert_fail@plt+0x3d78>
   14d88:	sdiv	r7, r4, r0
   14d8c:	mul	r6, r7, r0
   14d90:	cmp	r5, #0
   14d94:	moveq	r4, #0
   14d98:	streq	r4, [r8]
   14d9c:	sub	r4, r7, r1
   14da0:	cmp	r4, r2
   14da4:	bge	14e50 <__assert_fail@plt+0x3e38>
   14da8:	add	r7, r1, r2
   14dac:	mov	r6, #0
   14db0:	mov	r2, #0
   14db4:	cmp	r7, r3
   14db8:	movwgt	r6, #1
   14dbc:	cmn	r3, #1
   14dc0:	movwgt	r2, #1
   14dc4:	cmp	r7, r1
   14dc8:	bvs	14e84 <__assert_fail@plt+0x3e6c>
   14dcc:	ands	r1, r2, r6
   14dd0:	bne	14e84 <__assert_fail@plt+0x3e6c>
   14dd4:	cmn	r0, #1
   14dd8:	ble	14e00 <__assert_fail@plt+0x3de8>
   14ddc:	cmp	r0, #0
   14de0:	beq	14e4c <__assert_fail@plt+0x3e34>
   14de4:	cmn	r7, #1
   14de8:	ble	14e24 <__assert_fail@plt+0x3e0c>
   14dec:	mvn	r1, #-2147483648	; 0x80000000
   14df0:	udiv	r1, r1, r0
   14df4:	cmp	r1, r7
   14df8:	bge	14e4c <__assert_fail@plt+0x3e34>
   14dfc:	b	14e84 <__assert_fail@plt+0x3e6c>
   14e00:	cmn	r7, #1
   14e04:	ble	14e3c <__assert_fail@plt+0x3e24>
   14e08:	cmn	r0, #1
   14e0c:	beq	14e4c <__assert_fail@plt+0x3e34>
   14e10:	mov	r1, #-2147483648	; 0x80000000
   14e14:	sdiv	r1, r1, r0
   14e18:	cmp	r1, r7
   14e1c:	bge	14e4c <__assert_fail@plt+0x3e34>
   14e20:	b	14e84 <__assert_fail@plt+0x3e6c>
   14e24:	beq	14e4c <__assert_fail@plt+0x3e34>
   14e28:	mov	r1, #-2147483648	; 0x80000000
   14e2c:	sdiv	r1, r1, r7
   14e30:	cmp	r1, r0
   14e34:	bge	14e4c <__assert_fail@plt+0x3e34>
   14e38:	b	14e84 <__assert_fail@plt+0x3e6c>
   14e3c:	mvn	r1, #-2147483648	; 0x80000000
   14e40:	sdiv	r1, r1, r0
   14e44:	cmp	r7, r1
   14e48:	blt	14e84 <__assert_fail@plt+0x3e6c>
   14e4c:	mul	r6, r7, r0
   14e50:	mov	r0, r5
   14e54:	mov	r1, r6
   14e58:	bl	150b8 <__assert_fail@plt+0x40a0>
   14e5c:	cmp	r6, #0
   14e60:	movwne	r6, #1
   14e64:	cmp	r0, #0
   14e68:	bne	14e7c <__assert_fail@plt+0x3e64>
   14e6c:	clz	r1, r5
   14e70:	lsr	r1, r1, #5
   14e74:	orrs	r1, r1, r6
   14e78:	bne	14e84 <__assert_fail@plt+0x3e6c>
   14e7c:	str	r7, [r8]
   14e80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e84:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14e88:	push	{fp, lr}
   14e8c:	mov	fp, sp
   14e90:	mov	r1, #1
   14e94:	bl	15034 <__assert_fail@plt+0x401c>
   14e98:	cmp	r0, #0
   14e9c:	popne	{fp, pc}
   14ea0:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14ea4:	push	{fp, lr}
   14ea8:	mov	fp, sp
   14eac:	bl	15034 <__assert_fail@plt+0x401c>
   14eb0:	cmp	r0, #0
   14eb4:	popne	{fp, pc}
   14eb8:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14ebc:	push	{fp, lr}
   14ec0:	mov	fp, sp
   14ec4:	mov	r1, #1
   14ec8:	bl	15034 <__assert_fail@plt+0x401c>
   14ecc:	cmp	r0, #0
   14ed0:	popne	{fp, pc}
   14ed4:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14ed8:	push	{fp, lr}
   14edc:	mov	fp, sp
   14ee0:	bl	15034 <__assert_fail@plt+0x401c>
   14ee4:	cmp	r0, #0
   14ee8:	popne	{fp, pc}
   14eec:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14ef0:	push	{r4, r5, r6, sl, fp, lr}
   14ef4:	add	fp, sp, #16
   14ef8:	mov	r5, r0
   14efc:	mov	r0, r1
   14f00:	mov	r4, r1
   14f04:	bl	15088 <__assert_fail@plt+0x4070>
   14f08:	cmp	r0, #0
   14f0c:	beq	14f28 <__assert_fail@plt+0x3f10>
   14f10:	mov	r1, r5
   14f14:	mov	r2, r4
   14f18:	mov	r6, r0
   14f1c:	bl	10e2c <memcpy@plt>
   14f20:	mov	r0, r6
   14f24:	pop	{r4, r5, r6, sl, fp, pc}
   14f28:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14f2c:	push	{r4, r5, r6, sl, fp, lr}
   14f30:	add	fp, sp, #16
   14f34:	mov	r5, r0
   14f38:	mov	r0, r1
   14f3c:	mov	r4, r1
   14f40:	bl	15088 <__assert_fail@plt+0x4070>
   14f44:	cmp	r0, #0
   14f48:	beq	14f64 <__assert_fail@plt+0x3f4c>
   14f4c:	mov	r1, r5
   14f50:	mov	r2, r4
   14f54:	mov	r6, r0
   14f58:	bl	10e2c <memcpy@plt>
   14f5c:	mov	r0, r6
   14f60:	pop	{r4, r5, r6, sl, fp, pc}
   14f64:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14f68:	push	{r4, r5, r6, sl, fp, lr}
   14f6c:	add	fp, sp, #16
   14f70:	mov	r5, r0
   14f74:	add	r0, r1, #1
   14f78:	mov	r4, r1
   14f7c:	bl	15088 <__assert_fail@plt+0x4070>
   14f80:	cmp	r0, #0
   14f84:	beq	14fac <__assert_fail@plt+0x3f94>
   14f88:	mov	r6, r0
   14f8c:	mov	r0, #0
   14f90:	mov	r1, r5
   14f94:	mov	r2, r4
   14f98:	strb	r0, [r6, r4]
   14f9c:	mov	r0, r6
   14fa0:	bl	10e2c <memcpy@plt>
   14fa4:	mov	r0, r6
   14fa8:	pop	{r4, r5, r6, sl, fp, pc}
   14fac:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14fb0:	push	{r4, r5, r6, sl, fp, lr}
   14fb4:	add	fp, sp, #16
   14fb8:	mov	r4, r0
   14fbc:	bl	10f28 <strlen@plt>
   14fc0:	add	r5, r0, #1
   14fc4:	mov	r0, r5
   14fc8:	bl	15088 <__assert_fail@plt+0x4070>
   14fcc:	cmp	r0, #0
   14fd0:	beq	14fec <__assert_fail@plt+0x3fd4>
   14fd4:	mov	r1, r4
   14fd8:	mov	r2, r5
   14fdc:	mov	r6, r0
   14fe0:	bl	10e2c <memcpy@plt>
   14fe4:	mov	r0, r6
   14fe8:	pop	{r4, r5, r6, sl, fp, pc}
   14fec:	bl	14ff0 <__assert_fail@plt+0x3fd8>
   14ff0:	push	{fp, lr}
   14ff4:	mov	fp, sp
   14ff8:	movw	r0, #28908	; 0x70ec
   14ffc:	movw	r1, #25004	; 0x61ac
   15000:	mov	r2, #5
   15004:	movt	r0, #2
   15008:	movt	r1, #1
   1500c:	ldr	r4, [r0]
   15010:	mov	r0, #0
   15014:	bl	10e5c <dcgettext@plt>
   15018:	movw	r2, #23277	; 0x5aed
   1501c:	mov	r3, r0
   15020:	mov	r0, r4
   15024:	mov	r1, #0
   15028:	movt	r2, #1
   1502c:	bl	10ec8 <error@plt>
   15030:	bl	11000 <abort@plt>
   15034:	clz	r2, r1
   15038:	clz	r3, r0
   1503c:	lsr	r2, r2, #5
   15040:	lsr	r3, r3, #5
   15044:	orrs	r2, r3, r2
   15048:	movwne	r1, #1
   1504c:	movwne	r0, #1
   15050:	cmp	r1, #0
   15054:	beq	15084 <__assert_fail@plt+0x406c>
   15058:	mvn	r2, #-2147483648	; 0x80000000
   1505c:	udiv	r2, r2, r1
   15060:	cmp	r2, r0
   15064:	bcs	15084 <__assert_fail@plt+0x406c>
   15068:	push	{fp, lr}
   1506c:	mov	fp, sp
   15070:	bl	10f34 <__errno_location@plt>
   15074:	mov	r1, #12
   15078:	str	r1, [r0]
   1507c:	mov	r0, #0
   15080:	pop	{fp, pc}
   15084:	b	10dcc <calloc@plt>
   15088:	cmp	r0, #0
   1508c:	movweq	r0, #1
   15090:	cmn	r0, #1
   15094:	ble	1509c <__assert_fail@plt+0x4084>
   15098:	b	10ed4 <malloc@plt>
   1509c:	push	{fp, lr}
   150a0:	mov	fp, sp
   150a4:	bl	10f34 <__errno_location@plt>
   150a8:	mov	r1, #12
   150ac:	str	r1, [r0]
   150b0:	mov	r0, #0
   150b4:	pop	{fp, pc}
   150b8:	push	{fp, lr}
   150bc:	mov	fp, sp
   150c0:	cmp	r0, #0
   150c4:	beq	150e0 <__assert_fail@plt+0x40c8>
   150c8:	cmp	r1, #0
   150cc:	beq	150ec <__assert_fail@plt+0x40d4>
   150d0:	cmn	r1, #1
   150d4:	ble	150f8 <__assert_fail@plt+0x40e0>
   150d8:	pop	{fp, lr}
   150dc:	b	10e68 <realloc@plt>
   150e0:	mov	r0, r1
   150e4:	pop	{fp, lr}
   150e8:	b	15088 <__assert_fail@plt+0x4070>
   150ec:	bl	125a0 <__assert_fail@plt+0x1588>
   150f0:	mov	r0, #0
   150f4:	pop	{fp, pc}
   150f8:	bl	10f34 <__errno_location@plt>
   150fc:	mov	r1, #12
   15100:	str	r1, [r0]
   15104:	mov	r0, #0
   15108:	pop	{fp, pc}
   1510c:	push	{r4, r5, r6, sl, fp, lr}
   15110:	add	fp, sp, #16
   15114:	mov	r4, r0
   15118:	bl	10eb0 <__fpending@plt>
   1511c:	ldr	r6, [r4]
   15120:	mov	r5, r0
   15124:	mov	r0, r4
   15128:	bl	124a8 <__assert_fail@plt+0x1490>
   1512c:	tst	r6, #32
   15130:	bne	15168 <__assert_fail@plt+0x4150>
   15134:	cmp	r0, #0
   15138:	mov	r4, r0
   1513c:	mvnne	r4, #0
   15140:	cmp	r5, #0
   15144:	bne	15174 <__assert_fail@plt+0x415c>
   15148:	cmp	r0, #0
   1514c:	beq	15174 <__assert_fail@plt+0x415c>
   15150:	bl	10f34 <__errno_location@plt>
   15154:	ldr	r0, [r0]
   15158:	subs	r4, r0, #9
   1515c:	mvnne	r4, #0
   15160:	mov	r0, r4
   15164:	pop	{r4, r5, r6, sl, fp, pc}
   15168:	mvn	r4, #0
   1516c:	cmp	r0, #0
   15170:	beq	1517c <__assert_fail@plt+0x4164>
   15174:	mov	r0, r4
   15178:	pop	{r4, r5, r6, sl, fp, pc}
   1517c:	bl	10f34 <__errno_location@plt>
   15180:	mov	r1, #0
   15184:	str	r1, [r0]
   15188:	mov	r0, r4
   1518c:	pop	{r4, r5, r6, sl, fp, pc}
   15190:	push	{fp, lr}
   15194:	mov	fp, sp
   15198:	mov	r0, #14
   1519c:	bl	10fc4 <nl_langinfo@plt>
   151a0:	movw	r1, #22873	; 0x5959
   151a4:	cmp	r0, #0
   151a8:	movt	r1, #1
   151ac:	movne	r1, r0
   151b0:	movw	r0, #25021	; 0x61bd
   151b4:	ldrb	r2, [r1]
   151b8:	movt	r0, #1
   151bc:	cmp	r2, #0
   151c0:	movne	r0, r1
   151c4:	pop	{fp, pc}
   151c8:	push	{r4, r5, r6, r7, fp, lr}
   151cc:	add	fp, sp, #16
   151d0:	sub	sp, sp, #8
   151d4:	add	r5, sp, #4
   151d8:	cmp	r0, #0
   151dc:	mov	r7, r2
   151e0:	mov	r4, r1
   151e4:	movne	r5, r0
   151e8:	mov	r0, r5
   151ec:	bl	10ebc <mbrtowc@plt>
   151f0:	mov	r6, r0
   151f4:	cmp	r7, #0
   151f8:	beq	1521c <__assert_fail@plt+0x4204>
   151fc:	cmn	r6, #2
   15200:	bcc	1521c <__assert_fail@plt+0x4204>
   15204:	mov	r0, #0
   15208:	bl	15264 <__assert_fail@plt+0x424c>
   1520c:	cmp	r0, #0
   15210:	ldrbeq	r0, [r4]
   15214:	moveq	r6, #1
   15218:	streq	r0, [r5]
   1521c:	mov	r0, r6
   15220:	sub	sp, fp, #16
   15224:	pop	{r4, r5, r6, r7, fp, pc}
   15228:	cmp	r2, #0
   1522c:	beq	1525c <__assert_fail@plt+0x4244>
   15230:	mvn	r3, #0
   15234:	udiv	r3, r3, r2
   15238:	cmp	r3, r1
   1523c:	bcs	1525c <__assert_fail@plt+0x4244>
   15240:	push	{fp, lr}
   15244:	mov	fp, sp
   15248:	bl	10f34 <__errno_location@plt>
   1524c:	mov	r1, #12
   15250:	str	r1, [r0]
   15254:	mov	r0, #0
   15258:	pop	{fp, pc}
   1525c:	mul	r1, r2, r1
   15260:	b	150b8 <__assert_fail@plt+0x40a0>
   15264:	push	{r4, sl, fp, lr}
   15268:	add	fp, sp, #8
   1526c:	sub	sp, sp, #264	; 0x108
   15270:	add	r1, sp, #7
   15274:	movw	r2, #257	; 0x101
   15278:	bl	152c8 <__assert_fail@plt+0x42b0>
   1527c:	mov	r4, #0
   15280:	cmp	r0, #0
   15284:	bne	152bc <__assert_fail@plt+0x42a4>
   15288:	movw	r1, #25027	; 0x61c3
   1528c:	add	r0, sp, #7
   15290:	movt	r1, #1
   15294:	bl	10df0 <strcmp@plt>
   15298:	cmp	r0, #0
   1529c:	beq	152bc <__assert_fail@plt+0x42a4>
   152a0:	movw	r1, #25029	; 0x61c5
   152a4:	add	r0, sp, #7
   152a8:	movt	r1, #1
   152ac:	bl	10df0 <strcmp@plt>
   152b0:	mov	r4, r0
   152b4:	cmp	r0, #0
   152b8:	movwne	r4, #1
   152bc:	mov	r0, r4
   152c0:	sub	sp, fp, #8
   152c4:	pop	{r4, sl, fp, pc}
   152c8:	push	{r4, r5, r6, r7, fp, lr}
   152cc:	add	fp, sp, #16
   152d0:	mov	r4, r1
   152d4:	mov	r1, #0
   152d8:	mov	r6, r2
   152dc:	bl	10fac <setlocale@plt>
   152e0:	cmp	r0, #0
   152e4:	beq	15314 <__assert_fail@plt+0x42fc>
   152e8:	mov	r7, r0
   152ec:	bl	10f28 <strlen@plt>
   152f0:	cmp	r0, r6
   152f4:	bcs	15334 <__assert_fail@plt+0x431c>
   152f8:	add	r2, r0, #1
   152fc:	mov	r0, r4
   15300:	mov	r1, r7
   15304:	bl	10e2c <memcpy@plt>
   15308:	mov	r5, #0
   1530c:	mov	r0, r5
   15310:	pop	{r4, r5, r6, r7, fp, pc}
   15314:	cmp	r6, #0
   15318:	mov	r5, #22
   1531c:	movne	r0, #0
   15320:	strbne	r0, [r4]
   15324:	movne	r0, r5
   15328:	popne	{r4, r5, r6, r7, fp, pc}
   1532c:	mov	r0, r5
   15330:	pop	{r4, r5, r6, r7, fp, pc}
   15334:	mov	r5, #34	; 0x22
   15338:	cmp	r6, #0
   1533c:	beq	1535c <__assert_fail@plt+0x4344>
   15340:	sub	r6, r6, #1
   15344:	mov	r0, r4
   15348:	mov	r1, r7
   1534c:	mov	r2, r6
   15350:	bl	10e2c <memcpy@plt>
   15354:	mov	r0, #0
   15358:	strb	r0, [r4, r6]
   1535c:	mov	r0, r5
   15360:	pop	{r4, r5, r6, r7, fp, pc}
   15364:	mov	r1, #0
   15368:	b	10fac <setlocale@plt>
   1536c:	cmp	r3, #0
   15370:	cmpeq	r2, #0
   15374:	bne	1538c <__assert_fail@plt+0x4374>
   15378:	cmp	r1, #0
   1537c:	cmpeq	r0, #0
   15380:	mvnne	r1, #0
   15384:	mvnne	r0, #0
   15388:	b	153a8 <__assert_fail@plt+0x4390>
   1538c:	sub	sp, sp, #8
   15390:	push	{sp, lr}
   15394:	bl	153b8 <__assert_fail@plt+0x43a0>
   15398:	ldr	lr, [sp, #4]
   1539c:	add	sp, sp, #8
   153a0:	pop	{r2, r3}
   153a4:	bx	lr
   153a8:	push	{r1, lr}
   153ac:	mov	r0, #8
   153b0:	bl	10de4 <raise@plt>
   153b4:	pop	{r1, pc}
   153b8:	cmp	r1, r3
   153bc:	cmpeq	r0, r2
   153c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c4:	mov	r4, r0
   153c8:	movcc	r0, #0
   153cc:	mov	r5, r1
   153d0:	ldr	lr, [sp, #36]	; 0x24
   153d4:	movcc	r1, r0
   153d8:	bcc	154d4 <__assert_fail@plt+0x44bc>
   153dc:	cmp	r3, #0
   153e0:	clzeq	ip, r2
   153e4:	clzne	ip, r3
   153e8:	addeq	ip, ip, #32
   153ec:	cmp	r5, #0
   153f0:	clzeq	r1, r4
   153f4:	addeq	r1, r1, #32
   153f8:	clzne	r1, r5
   153fc:	sub	ip, ip, r1
   15400:	sub	sl, ip, #32
   15404:	lsl	r9, r3, ip
   15408:	rsb	fp, ip, #32
   1540c:	orr	r9, r9, r2, lsl sl
   15410:	orr	r9, r9, r2, lsr fp
   15414:	lsl	r8, r2, ip
   15418:	cmp	r5, r9
   1541c:	cmpeq	r4, r8
   15420:	movcc	r0, #0
   15424:	movcc	r1, r0
   15428:	bcc	15444 <__assert_fail@plt+0x442c>
   1542c:	mov	r0, #1
   15430:	subs	r4, r4, r8
   15434:	lsl	r1, r0, sl
   15438:	orr	r1, r1, r0, lsr fp
   1543c:	lsl	r0, r0, ip
   15440:	sbc	r5, r5, r9
   15444:	cmp	ip, #0
   15448:	beq	154d4 <__assert_fail@plt+0x44bc>
   1544c:	lsr	r6, r8, #1
   15450:	orr	r6, r6, r9, lsl #31
   15454:	lsr	r7, r9, #1
   15458:	mov	r2, ip
   1545c:	b	15480 <__assert_fail@plt+0x4468>
   15460:	subs	r3, r4, r6
   15464:	sbc	r8, r5, r7
   15468:	adds	r3, r3, r3
   1546c:	adc	r8, r8, r8
   15470:	adds	r4, r3, #1
   15474:	adc	r5, r8, #0
   15478:	subs	r2, r2, #1
   1547c:	beq	1549c <__assert_fail@plt+0x4484>
   15480:	cmp	r5, r7
   15484:	cmpeq	r4, r6
   15488:	bcs	15460 <__assert_fail@plt+0x4448>
   1548c:	adds	r4, r4, r4
   15490:	adc	r5, r5, r5
   15494:	subs	r2, r2, #1
   15498:	bne	15480 <__assert_fail@plt+0x4468>
   1549c:	lsr	r3, r4, ip
   154a0:	orr	r3, r3, r5, lsl fp
   154a4:	lsr	r2, r5, ip
   154a8:	orr	r3, r3, r5, lsr sl
   154ac:	adds	r0, r0, r4
   154b0:	mov	r4, r3
   154b4:	lsl	r3, r2, ip
   154b8:	orr	r3, r3, r4, lsl sl
   154bc:	lsl	ip, r4, ip
   154c0:	orr	r3, r3, r4, lsr fp
   154c4:	adc	r1, r1, r5
   154c8:	subs	r0, r0, ip
   154cc:	mov	r5, r2
   154d0:	sbc	r1, r1, r3
   154d4:	cmp	lr, #0
   154d8:	strdne	r4, [lr]
   154dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154e4:	mov	r7, r0
   154e8:	ldr	r6, [pc, #72]	; 15538 <__assert_fail@plt+0x4520>
   154ec:	ldr	r5, [pc, #72]	; 1553c <__assert_fail@plt+0x4524>
   154f0:	add	r6, pc, r6
   154f4:	add	r5, pc, r5
   154f8:	sub	r6, r6, r5
   154fc:	mov	r8, r1
   15500:	mov	r9, r2
   15504:	bl	10dac <calloc@plt-0x20>
   15508:	asrs	r6, r6, #2
   1550c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15510:	mov	r4, #0
   15514:	add	r4, r4, #1
   15518:	ldr	r3, [r5], #4
   1551c:	mov	r2, r9
   15520:	mov	r1, r8
   15524:	mov	r0, r7
   15528:	blx	r3
   1552c:	cmp	r6, r4
   15530:	bne	15514 <__assert_fail@plt+0x44fc>
   15534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15538:	andeq	r1, r1, r4, lsl sl
   1553c:	andeq	r1, r1, ip, lsl #20
   15540:	bx	lr
   15544:	ldr	r3, [pc, #12]	; 15558 <__assert_fail@plt+0x4540>
   15548:	mov	r1, #0
   1554c:	add	r3, pc, r3
   15550:	ldr	r2, [r3]
   15554:	b	10f40 <__cxa_atexit@plt>
   15558:	andeq	r1, r1, r8, lsl #23

Disassembly of section .fini:

0001555c <.fini>:
   1555c:	push	{r3, lr}
   15560:	pop	{r3, pc}
