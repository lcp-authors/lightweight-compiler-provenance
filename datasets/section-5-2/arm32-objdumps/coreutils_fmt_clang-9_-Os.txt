
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	11148 <__assert_fail@plt+0x48>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <calloc@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <calloc@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r6, r1, r0, lsl #3

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <posix_fadvise64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <memmove@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <free@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <_exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <memcpy@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <mbsinit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <fwrite_unlocked@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <getc_unlocked@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <dcgettext@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <realloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <textdomain@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <iswprint@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <lseek64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <__ctype_get_mb_cur_max@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <__fpending@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <ferror_unlocked@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <mbrtowc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <error@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <malloc@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <__libc_start_main@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <__freading@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <__gmon_start__@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <getopt_long@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <__ctype_b_loc@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <exit@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <bcmp@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <strlen@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <strchr@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <__errno_location@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <__cxa_atexit@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <memset@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <__printf_chk@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <fileno@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <strtoumax@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <__fprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <memchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <fclose@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <fseeko64@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <setlocale@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <strrchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <nl_langinfo@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #24]!

000110ac <clearerr_unlocked@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <fopen64@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <bindtextdomain@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <fputs@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <strncmp@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <abort@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f4 <putchar_unlocked@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4064]!	; 0xfe0

00011100 <__assert_fail@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4056]!	; 0xfd8

Disassembly of section .text:

0001110c <.text>:
   1110c:	mov	fp, #0
   11110:	mov	lr, #0
   11114:	pop	{r1}		; (ldr r1, [sp], #4)
   11118:	mov	r2, sp
   1111c:	push	{r2}		; (str r2, [sp, #-4]!)
   11120:	push	{r0}		; (str r0, [sp, #-4]!)
   11124:	ldr	ip, [pc, #16]	; 1113c <__assert_fail@plt+0x3c>
   11128:	push	{ip}		; (str ip, [sp, #-4]!)
   1112c:	ldr	r0, [pc, #12]	; 11140 <__assert_fail@plt+0x40>
   11130:	ldr	r3, [pc, #12]	; 11144 <__assert_fail@plt+0x44>
   11134:	bl	10fa4 <__libc_start_main@plt>
   11138:	bl	110e8 <abort@plt>
   1113c:	andeq	r5, r1, r8, ror lr
   11140:	muleq	r1, r0, r4
   11144:	andeq	r5, r1, r8, lsl lr
   11148:	ldr	r3, [pc, #20]	; 11164 <__assert_fail@plt+0x64>
   1114c:	ldr	r2, [pc, #20]	; 11168 <__assert_fail@plt+0x68>
   11150:	add	r3, pc, r3
   11154:	ldr	r2, [r3, r2]
   11158:	cmp	r2, #0
   1115c:	bxeq	lr
   11160:	b	10fbc <__gmon_start__@plt>
   11164:	andeq	r5, r1, r8, lsr #29
   11168:	andeq	r0, r0, r4, ror #1
   1116c:	ldr	r0, [pc, #24]	; 1118c <__assert_fail@plt+0x8c>
   11170:	ldr	r3, [pc, #24]	; 11190 <__assert_fail@plt+0x90>
   11174:	cmp	r3, r0
   11178:	bxeq	lr
   1117c:	ldr	r3, [pc, #16]	; 11194 <__assert_fail@plt+0x94>
   11180:	cmp	r3, #0
   11184:	bxeq	lr
   11188:	bx	r3
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r7, r2, r8, lsr r1
   11194:	andeq	r0, r0, r0
   11198:	ldr	r0, [pc, #36]	; 111c4 <__assert_fail@plt+0xc4>
   1119c:	ldr	r1, [pc, #36]	; 111c8 <__assert_fail@plt+0xc8>
   111a0:	sub	r1, r1, r0
   111a4:	asr	r1, r1, #2
   111a8:	add	r1, r1, r1, lsr #31
   111ac:	asrs	r1, r1, #1
   111b0:	bxeq	lr
   111b4:	ldr	r3, [pc, #16]	; 111cc <__assert_fail@plt+0xcc>
   111b8:	cmp	r3, #0
   111bc:	bxeq	lr
   111c0:	bx	r3
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r7, r2, r8, lsr r1
   111cc:	andeq	r0, r0, r0
   111d0:	push	{r4, lr}
   111d4:	ldr	r4, [pc, #24]	; 111f4 <__assert_fail@plt+0xf4>
   111d8:	ldrb	r3, [r4]
   111dc:	cmp	r3, #0
   111e0:	popne	{r4, pc}
   111e4:	bl	1116c <__assert_fail@plt+0x6c>
   111e8:	mov	r3, #1
   111ec:	strb	r3, [r4]
   111f0:	pop	{r4, pc}
   111f4:	andeq	r7, r2, ip, asr r1
   111f8:	b	11198 <__assert_fail@plt+0x98>
   111fc:	push	{fp, lr}
   11200:	mov	fp, sp
   11204:	sub	sp, sp, #56	; 0x38
   11208:	mov	r8, r0
   1120c:	cmp	r0, #0
   11210:	bne	11450 <__assert_fail@plt+0x350>
   11214:	movw	r1, #24267	; 0x5ecb
   11218:	mov	r0, #0
   1121c:	mov	r2, #5
   11220:	movt	r1, #1
   11224:	bl	10f20 <dcgettext@plt>
   11228:	mov	r1, r0
   1122c:	movw	r0, #62108	; 0xf29c
   11230:	movt	r0, #2
   11234:	ldr	r2, [r0]
   11238:	mov	r0, #1
   1123c:	bl	11034 <__printf_chk@plt>
   11240:	movw	r1, #24309	; 0x5ef5
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10f20 <dcgettext@plt>
   11254:	movw	r9, #29012	; 0x7154
   11258:	movt	r9, #2
   1125c:	ldr	r1, [r9]
   11260:	bl	10e90 <fputs_unlocked@plt>
   11264:	movw	r1, #25336	; 0x62f8
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10f20 <dcgettext@plt>
   11278:	ldr	r1, [r9]
   1127c:	bl	10e90 <fputs_unlocked@plt>
   11280:	movw	r1, #25392	; 0x6330
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10f20 <dcgettext@plt>
   11294:	ldr	r1, [r9]
   11298:	bl	10e90 <fputs_unlocked@plt>
   1129c:	movw	r1, #24438	; 0x5f76
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10f20 <dcgettext@plt>
   112b0:	ldr	r1, [r9]
   112b4:	bl	10e90 <fputs_unlocked@plt>
   112b8:	movw	r1, #24716	; 0x608c
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f20 <dcgettext@plt>
   112cc:	ldr	r1, [r9]
   112d0:	bl	10e90 <fputs_unlocked@plt>
   112d4:	movw	r1, #25002	; 0x61aa
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f20 <dcgettext@plt>
   112e8:	ldr	r1, [r9]
   112ec:	bl	10e90 <fputs_unlocked@plt>
   112f0:	movw	r1, #25047	; 0x61d7
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f20 <dcgettext@plt>
   11304:	ldr	r1, [r9]
   11308:	bl	10e90 <fputs_unlocked@plt>
   1130c:	movw	r0, #26104	; 0x65f8
   11310:	mov	r6, sp
   11314:	movt	r0, #1
   11318:	mov	r1, r6
   1131c:	ldm	r0!, {r2, r3, r4, r5}
   11320:	stmia	r1!, {r2, r3, r4, r5}
   11324:	ldm	r0!, {r2, r3, r4, r5, r7}
   11328:	stmia	r1!, {r2, r3, r4, r5, r7}
   1132c:	ldm	r0, {r2, r3, r4, r5, r7}
   11330:	stm	r1, {r2, r3, r4, r5, r7}
   11334:	movw	r1, #25467	; 0x637b
   11338:	movw	r5, #25101	; 0x620d
   1133c:	movt	r1, #1
   11340:	movt	r5, #1
   11344:	mov	r0, r5
   11348:	bl	10ea8 <strcmp@plt>
   1134c:	cmp	r0, #0
   11350:	ldrne	r1, [r6, #8]!
   11354:	cmpne	r1, #0
   11358:	bne	11344 <__assert_fail@plt+0x244>
   1135c:	movw	r1, #25562	; 0x63da
   11360:	ldr	r6, [r6, #4]
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	movt	r1, #1
   11370:	bl	10f20 <dcgettext@plt>
   11374:	movw	r2, #25244	; 0x629c
   11378:	movw	r3, #25585	; 0x63f1
   1137c:	mov	r1, r0
   11380:	mov	r0, #1
   11384:	movt	r2, #1
   11388:	movt	r3, #1
   1138c:	bl	11034 <__printf_chk@plt>
   11390:	cmp	r6, #0
   11394:	mov	r0, #5
   11398:	mov	r1, #0
   1139c:	moveq	r6, r5
   113a0:	bl	11088 <setlocale@plt>
   113a4:	cmp	r0, #0
   113a8:	beq	113e0 <__assert_fail@plt+0x2e0>
   113ac:	movw	r1, #25625	; 0x6419
   113b0:	mov	r2, #3
   113b4:	movt	r1, #1
   113b8:	bl	110dc <strncmp@plt>
   113bc:	cmp	r0, #0
   113c0:	beq	113e0 <__assert_fail@plt+0x2e0>
   113c4:	movw	r1, #25629	; 0x641d
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10f20 <dcgettext@plt>
   113d8:	ldr	r1, [r9]
   113dc:	bl	10e90 <fputs_unlocked@plt>
   113e0:	movw	r1, #25700	; 0x6464
   113e4:	mov	r0, #0
   113e8:	mov	r2, #5
   113ec:	movt	r1, #1
   113f0:	bl	10f20 <dcgettext@plt>
   113f4:	movw	r2, #25585	; 0x63f1
   113f8:	mov	r1, r0
   113fc:	mov	r0, #1
   11400:	mov	r3, r5
   11404:	movt	r2, #1
   11408:	bl	11034 <__printf_chk@plt>
   1140c:	movw	r1, #25727	; 0x647f
   11410:	mov	r0, #0
   11414:	mov	r2, #5
   11418:	movt	r1, #1
   1141c:	bl	10f20 <dcgettext@plt>
   11420:	mov	r1, r0
   11424:	movw	r0, #25495	; 0x6397
   11428:	movw	r3, #25777	; 0x64b1
   1142c:	cmp	r6, r5
   11430:	mov	r2, r6
   11434:	movt	r0, #1
   11438:	movt	r3, #1
   1143c:	moveq	r3, r0
   11440:	mov	r0, #1
   11444:	bl	11034 <__printf_chk@plt>
   11448:	mov	r0, r8
   1144c:	bl	10fe0 <exit@plt>
   11450:	movw	r0, #29000	; 0x7148
   11454:	movw	r1, #24228	; 0x5ea4
   11458:	mov	r2, #5
   1145c:	movt	r0, #2
   11460:	movt	r1, #1
   11464:	ldr	r5, [r0]
   11468:	mov	r0, #0
   1146c:	bl	10f20 <dcgettext@plt>
   11470:	mov	r2, r0
   11474:	movw	r0, #62108	; 0xf29c
   11478:	mov	r1, #1
   1147c:	movt	r0, #2
   11480:	ldr	r3, [r0]
   11484:	mov	r0, r5
   11488:	bl	11058 <__fprintf_chk@plt>
   1148c:	b	11448 <__assert_fail@plt+0x348>
   11490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11494:	add	fp, sp, #28
   11498:	sub	sp, sp, #36	; 0x24
   1149c:	mov	r7, r0
   114a0:	ldr	r0, [r1]
   114a4:	mov	r6, r1
   114a8:	bl	12d2c <__assert_fail@plt+0x1c2c>
   114ac:	movw	r5, #25777	; 0x64b1
   114b0:	mov	r0, #6
   114b4:	movt	r5, #1
   114b8:	mov	r1, r5
   114bc:	bl	11088 <setlocale@plt>
   114c0:	movw	r4, #25248	; 0x62a0
   114c4:	movw	r1, #25105	; 0x6211
   114c8:	movt	r4, #1
   114cc:	movt	r1, #1
   114d0:	mov	r0, r4
   114d4:	bl	110c4 <bindtextdomain@plt>
   114d8:	mov	r0, r4
   114dc:	bl	10f38 <textdomain@plt>
   114e0:	movw	r0, #10856	; 0x2a68
   114e4:	movt	r0, #1
   114e8:	bl	15e7c <__assert_fail@plt+0x4d7c>
   114ec:	movw	r0, #29024	; 0x7160
   114f0:	mov	r4, #0
   114f4:	movw	r1, #29028	; 0x7164
   114f8:	cmp	r7, #2
   114fc:	movt	r0, #2
   11500:	movt	r1, #2
   11504:	strb	r4, [r0]
   11508:	movw	r0, #29025	; 0x7161
   1150c:	movt	r0, #2
   11510:	strb	r4, [r0]
   11514:	movw	r0, #29026	; 0x7162
   11518:	movt	r0, #2
   1151c:	strb	r4, [r0]
   11520:	movw	r0, #29027	; 0x7163
   11524:	movt	r0, #2
   11528:	strb	r4, [r0]
   1152c:	mov	r0, #75	; 0x4b
   11530:	str	r0, [r1]
   11534:	movw	r0, #29032	; 0x7168
   11538:	movt	r0, #2
   1153c:	str	r5, [r0]
   11540:	movw	r0, #29036	; 0x716c
   11544:	movt	r0, #2
   11548:	str	r4, [r0]
   1154c:	movw	r0, #29040	; 0x7170
   11550:	movt	r0, #2
   11554:	str	r4, [r0]
   11558:	movw	r0, #29044	; 0x7174
   1155c:	movt	r0, #2
   11560:	str	r4, [r0]
   11564:	blt	1159c <__assert_fail@plt+0x49c>
   11568:	mov	r5, r6
   1156c:	ldr	sl, [r5, #4]!
   11570:	ldrb	r0, [sl]
   11574:	cmp	r0, #45	; 0x2d
   11578:	bne	1159c <__assert_fail@plt+0x49c>
   1157c:	ldrb	r0, [sl, #1]!
   11580:	sub	r0, r0, #48	; 0x30
   11584:	cmp	r0, #9
   11588:	bhi	1159c <__assert_fail@plt+0x49c>
   1158c:	ldr	r0, [r6]
   11590:	sub	r7, r7, #1
   11594:	str	r0, [r6, #4]
   11598:	b	115a4 <__assert_fail@plt+0x4a4>
   1159c:	mov	r5, r6
   115a0:	mov	sl, #0
   115a4:	movw	r6, #25129	; 0x6229
   115a8:	mov	r9, #0
   115ac:	str	r7, [sp, #32]
   115b0:	str	r5, [sp, #28]
   115b4:	movt	r6, #1
   115b8:	movw	r3, #25944	; 0x6558
   115bc:	mov	r0, r7
   115c0:	mov	r1, r5
   115c4:	mov	r2, r6
   115c8:	str	r4, [sp]
   115cc:	movt	r3, #1
   115d0:	bl	10fc8 <getopt_long@plt>
   115d4:	mov	r8, r0
   115d8:	cmp	r0, #98	; 0x62
   115dc:	ble	11734 <__assert_fail@plt+0x634>
   115e0:	sub	r0, r8, #112	; 0x70
   115e4:	cmp	r0, #7
   115e8:	bhi	116c4 <__assert_fail@plt+0x5c4>
   115ec:	add	r1, pc, #0
   115f0:	ldr	pc, [r1, r0, lsl #2]
   115f4:	andeq	r1, r1, r4, lsl r6
   115f8:	andeq	r1, r1, ip, lsr #20
   115fc:	andeq	r1, r1, ip, lsr #20
   11600:	strdeq	r1, [r1], -ip
   11604:	andeq	r1, r1, r8, lsl #14
   11608:	strdeq	r1, [r1], -r0
   1160c:	andeq	r1, r1, ip, lsr #20
   11610:	andeq	r1, r1, r4, lsr #14
   11614:	movw	r0, #29040	; 0x7170
   11618:	mov	r8, r6
   1161c:	movt	r0, #2
   11620:	str	r4, [r0]
   11624:	movw	r0, #29016	; 0x7158
   11628:	movt	r0, #2
   1162c:	ldr	r6, [r0]
   11630:	ldrb	r0, [r6]
   11634:	cmp	r0, #32
   11638:	bne	11664 <__assert_fail@plt+0x564>
   1163c:	mov	r0, #0
   11640:	add	r1, r6, r0
   11644:	add	r0, r0, #1
   11648:	ldrb	r1, [r1, #1]
   1164c:	cmp	r1, #32
   11650:	beq	11640 <__assert_fail@plt+0x540>
   11654:	movw	r1, #29040	; 0x7170
   11658:	add	r6, r6, r0
   1165c:	movt	r1, #2
   11660:	str	r0, [r1]
   11664:	movw	r0, #29032	; 0x7168
   11668:	ldr	r7, [sp, #32]
   1166c:	ldr	r5, [sp, #28]
   11670:	movt	r0, #2
   11674:	str	r6, [r0]
   11678:	mov	r0, r6
   1167c:	bl	10ff8 <strlen@plt>
   11680:	movw	r1, #29036	; 0x716c
   11684:	movt	r1, #2
   11688:	str	r0, [r1]
   1168c:	add	r1, r6, r0
   11690:	mov	r0, r1
   11694:	cmp	r1, r6
   11698:	bls	116ac <__assert_fail@plt+0x5ac>
   1169c:	mov	r1, r0
   116a0:	ldrb	r2, [r1, #-1]!
   116a4:	cmp	r2, #32
   116a8:	beq	11690 <__assert_fail@plt+0x590>
   116ac:	movw	r1, #29044	; 0x7174
   116b0:	strb	r4, [r0], -r6
   116b4:	mov	r6, r8
   116b8:	movt	r1, #2
   116bc:	str	r0, [r1]
   116c0:	b	115b8 <__assert_fail@plt+0x4b8>
   116c4:	cmp	r8, #99	; 0x63
   116c8:	bne	116d8 <__assert_fail@plt+0x5d8>
   116cc:	movw	r0, #29027	; 0x7163
   116d0:	movt	r0, #2
   116d4:	b	11710 <__assert_fail@plt+0x610>
   116d8:	cmp	r8, #103	; 0x67
   116dc:	bne	11a2c <__assert_fail@plt+0x92c>
   116e0:	movw	r0, #29016	; 0x7158
   116e4:	movt	r0, #2
   116e8:	ldr	r9, [r0]
   116ec:	b	11718 <__assert_fail@plt+0x618>
   116f0:	movw	r0, #29024	; 0x7160
   116f4:	movt	r0, #2
   116f8:	b	11710 <__assert_fail@plt+0x610>
   116fc:	movw	r0, #29025	; 0x7161
   11700:	movt	r0, #2
   11704:	b	11710 <__assert_fail@plt+0x610>
   11708:	movw	r0, #29026	; 0x7162
   1170c:	movt	r0, #2
   11710:	mov	r1, #1
   11714:	strb	r1, [r0]
   11718:	ldr	r7, [sp, #32]
   1171c:	ldr	r5, [sp, #28]
   11720:	b	115b8 <__assert_fail@plt+0x4b8>
   11724:	movw	r0, #29016	; 0x7158
   11728:	movt	r0, #2
   1172c:	ldr	sl, [r0]
   11730:	b	11718 <__assert_fail@plt+0x618>
   11734:	cmn	r8, #1
   11738:	bne	119cc <__assert_fail@plt+0x8cc>
   1173c:	mov	r7, r9
   11740:	cmp	sl, #0
   11744:	beq	117a8 <__assert_fail@plt+0x6a8>
   11748:	movw	r1, #25272	; 0x62b8
   1174c:	mov	r0, #0
   11750:	mov	r2, #5
   11754:	mov	r4, #0
   11758:	movt	r1, #1
   1175c:	bl	10f20 <dcgettext@plt>
   11760:	movw	r6, #25777	; 0x64b1
   11764:	movw	r1, #2500	; 0x9c4
   11768:	mov	r2, #0
   1176c:	mov	r3, #0
   11770:	movt	r6, #1
   11774:	stm	sp, {r1, r4}
   11778:	str	r0, [sp, #12]
   1177c:	mov	r0, sl
   11780:	str	r4, [sp, #16]
   11784:	str	r6, [sp, #8]
   11788:	bl	1528c <__assert_fail@plt+0x418c>
   1178c:	ldr	r8, [sp, #32]
   11790:	ldr	r9, [sp, #28]
   11794:	mov	r4, r0
   11798:	movw	r0, #29028	; 0x7164
   1179c:	movt	r0, #2
   117a0:	str	r4, [r0]
   117a4:	b	117c4 <__assert_fail@plt+0x6c4>
   117a8:	movw	r0, #29028	; 0x7164
   117ac:	ldr	r8, [sp, #32]
   117b0:	ldr	r9, [sp, #28]
   117b4:	movw	r6, #25777	; 0x64b1
   117b8:	movt	r0, #2
   117bc:	movt	r6, #1
   117c0:	ldr	r4, [r0]
   117c4:	cmp	r7, #0
   117c8:	beq	1182c <__assert_fail@plt+0x72c>
   117cc:	movw	r1, #25272	; 0x62b8
   117d0:	mov	r0, #0
   117d4:	mov	r2, #5
   117d8:	mov	r5, #0
   117dc:	movt	r1, #1
   117e0:	bl	10f20 <dcgettext@plt>
   117e4:	asr	r1, r4, #31
   117e8:	str	r4, [sp]
   117ec:	mov	r2, #0
   117f0:	mov	r3, #0
   117f4:	stmib	sp, {r1, r6}
   117f8:	str	r0, [sp, #12]
   117fc:	mov	r0, r7
   11800:	str	r5, [sp, #16]
   11804:	bl	1528c <__assert_fail@plt+0x418c>
   11808:	movw	r1, #29048	; 0x7178
   1180c:	cmp	sl, #0
   11810:	movt	r1, #2
   11814:	str	r0, [r1]
   11818:	bne	11854 <__assert_fail@plt+0x754>
   1181c:	movw	r1, #29028	; 0x7164
   11820:	add	r0, r0, #10
   11824:	movt	r1, #2
   11828:	b	11850 <__assert_fail@plt+0x750>
   1182c:	mov	r0, #187	; 0xbb
   11830:	movw	r1, #34079	; 0x851f
   11834:	mul	r0, r4, r0
   11838:	movt	r1, #20971	; 0x51eb
   1183c:	smmul	r0, r0, r1
   11840:	asr	r1, r0, #6
   11844:	add	r0, r1, r0, lsr #31
   11848:	movw	r1, #29048	; 0x7178
   1184c:	movt	r1, #2
   11850:	str	r0, [r1]
   11854:	movw	sl, #28992	; 0x7140
   11858:	movt	sl, #2
   1185c:	ldr	r0, [sl]
   11860:	cmp	r0, r8
   11864:	bne	118d0 <__assert_fail@plt+0x7d0>
   11868:	movw	r0, #29008	; 0x7150
   1186c:	movw	r1, #26260	; 0x6694
   11870:	movt	r0, #2
   11874:	movt	r1, #1
   11878:	ldr	r0, [r0]
   1187c:	bl	11a68 <__assert_fail@plt+0x968>
   11880:	mov	r6, r0
   11884:	movw	r0, #29008	; 0x7150
   11888:	movt	r0, #2
   1188c:	ldr	r0, [r0]
   11890:	bl	12b90 <__assert_fail@plt+0x1a90>
   11894:	cmp	r0, #0
   11898:	beq	119c0 <__assert_fail@plt+0x8c0>
   1189c:	bl	11010 <__errno_location@plt>
   118a0:	movw	r1, #25313	; 0x62e1
   118a4:	ldr	r4, [r0]
   118a8:	mov	r0, #0
   118ac:	mov	r2, #5
   118b0:	movt	r1, #1
   118b4:	bl	10f20 <dcgettext@plt>
   118b8:	movw	r2, #26191	; 0x664f
   118bc:	mov	r3, r0
   118c0:	mov	r0, #1
   118c4:	mov	r1, r4
   118c8:	movt	r2, #1
   118cc:	bl	10f8c <error@plt>
   118d0:	mov	r6, #1
   118d4:	bge	119c0 <__assert_fail@plt+0x8c0>
   118d8:	movw	r7, #26260	; 0x6694
   118dc:	movw	r5, #25869	; 0x650d
   118e0:	mov	r1, #0
   118e4:	mov	r6, #1
   118e8:	movt	r7, #1
   118ec:	movt	r5, #1
   118f0:	str	r1, [sp, #24]
   118f4:	ldr	r4, [r9, r0, lsl #2]
   118f8:	mov	r1, r7
   118fc:	mov	r0, r4
   11900:	bl	10ea8 <strcmp@plt>
   11904:	cmp	r0, #0
   11908:	beq	11930 <__assert_fail@plt+0x830>
   1190c:	mov	r0, r4
   11910:	mov	r1, r5
   11914:	bl	110b8 <fopen64@plt>
   11918:	cmp	r0, #0
   1191c:	beq	11954 <__assert_fail@plt+0x854>
   11920:	mov	r1, r4
   11924:	bl	11a68 <__assert_fail@plt+0x968>
   11928:	and	r6, r6, r0
   1192c:	b	119a0 <__assert_fail@plt+0x8a0>
   11930:	movw	r0, #29008	; 0x7150
   11934:	mov	r1, r4
   11938:	movt	r0, #2
   1193c:	ldr	r0, [r0]
   11940:	bl	11a68 <__assert_fail@plt+0x968>
   11944:	and	r6, r6, r0
   11948:	mov	r0, #1
   1194c:	str	r0, [sp, #24]
   11950:	b	119a0 <__assert_fail@plt+0x8a0>
   11954:	bl	11010 <__errno_location@plt>
   11958:	movw	r1, #25286	; 0x62c6
   1195c:	ldr	r9, [r0]
   11960:	mov	r0, #0
   11964:	mov	r2, #5
   11968:	mov	r6, #0
   1196c:	movt	r1, #1
   11970:	bl	10f20 <dcgettext@plt>
   11974:	mov	r8, r0
   11978:	mov	r0, #4
   1197c:	mov	r1, r4
   11980:	bl	143e0 <__assert_fail@plt+0x32e0>
   11984:	mov	r1, r9
   11988:	mov	r2, r8
   1198c:	ldr	r9, [sp, #28]
   11990:	ldr	r8, [sp, #32]
   11994:	mov	r3, r0
   11998:	mov	r0, #0
   1199c:	bl	10f8c <error@plt>
   119a0:	ldr	r0, [sl]
   119a4:	add	r0, r0, #1
   119a8:	cmp	r0, r8
   119ac:	str	r0, [sl]
   119b0:	blt	118f4 <__assert_fail@plt+0x7f4>
   119b4:	ldr	r0, [sp, #24]
   119b8:	tst	r0, #1
   119bc:	bne	11884 <__assert_fail@plt+0x784>
   119c0:	eor	r0, r6, #1
   119c4:	sub	sp, fp, #28
   119c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119cc:	cmn	r8, #3
   119d0:	bne	11a1c <__assert_fail@plt+0x91c>
   119d4:	movw	r0, #28912	; 0x70f0
   119d8:	movw	r2, #25258	; 0x62aa
   119dc:	mov	r1, #0
   119e0:	movt	r0, #2
   119e4:	movt	r2, #1
   119e8:	str	r1, [sp, #4]
   119ec:	movw	r1, #25101	; 0x620d
   119f0:	movt	r1, #1
   119f4:	ldr	r3, [r0]
   119f8:	movw	r0, #29012	; 0x7154
   119fc:	str	r2, [sp]
   11a00:	movw	r2, #25244	; 0x629c
   11a04:	movt	r0, #2
   11a08:	movt	r2, #1
   11a0c:	ldr	r0, [r0]
   11a10:	bl	14c1c <__assert_fail@plt+0x3b1c>
   11a14:	mov	r0, #0
   11a18:	bl	10fe0 <exit@plt>
   11a1c:	cmn	r8, #2
   11a20:	bne	11a2c <__assert_fail@plt+0x92c>
   11a24:	mov	r0, #0
   11a28:	bl	111fc <__assert_fail@plt+0xfc>
   11a2c:	sub	r0, r8, #48	; 0x30
   11a30:	cmp	r0, #9
   11a34:	bhi	11a60 <__assert_fail@plt+0x960>
   11a38:	movw	r1, #25150	; 0x623e
   11a3c:	mov	r0, #0
   11a40:	mov	r2, #5
   11a44:	movt	r1, #1
   11a48:	bl	10f20 <dcgettext@plt>
   11a4c:	mov	r2, r0
   11a50:	mov	r0, #0
   11a54:	mov	r1, #0
   11a58:	mov	r3, r8
   11a5c:	bl	10f8c <error@plt>
   11a60:	mov	r0, #1
   11a64:	bl	111fc <__assert_fail@plt+0xfc>
   11a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a6c:	add	fp, sp, #28
   11a70:	push	{r1}		; (str r1, [sp, #-4]!)
   11a74:	mov	r1, #2
   11a78:	mov	r5, r0
   11a7c:	bl	12b54 <__assert_fail@plt+0x1a54>
   11a80:	movw	r0, #29056	; 0x7180
   11a84:	mov	r7, #0
   11a88:	movt	r0, #2
   11a8c:	str	r7, [r0]
   11a90:	movw	r0, #29052	; 0x717c
   11a94:	movt	r0, #2
   11a98:	strb	r7, [r0]
   11a9c:	mov	r0, r5
   11aa0:	bl	12020 <__assert_fail@plt+0xf20>
   11aa4:	mov	r6, r0
   11aa8:	movw	r0, #29060	; 0x7184
   11aac:	movw	r9, #62096	; 0xf290
   11ab0:	movw	r8, #29072	; 0x7190
   11ab4:	movw	sl, #29068	; 0x718c
   11ab8:	movt	r0, #2
   11abc:	movt	r9, #2
   11ac0:	movt	r8, #2
   11ac4:	movt	sl, #2
   11ac8:	str	r6, [r0]
   11acc:	movw	r0, #29076	; 0x7194
   11ad0:	movt	r0, #2
   11ad4:	str	r7, [r0]
   11ad8:	cmn	r6, #1
   11adc:	cmpne	r6, #10
   11ae0:	bne	11b84 <__assert_fail@plt+0xa84>
   11ae4:	ldr	r0, [r8]
   11ae8:	ldr	r1, [sl]
   11aec:	str	r7, [r9]
   11af0:	cmp	r1, r0
   11af4:	bgt	11b04 <__assert_fail@plt+0xa04>
   11af8:	cmn	r6, #1
   11afc:	cmpne	r6, #10
   11b00:	beq	11be0 <__assert_fail@plt+0xae0>
   11b04:	bl	12794 <__assert_fail@plt+0x1694>
   11b08:	ldr	r1, [sl]
   11b0c:	ldr	r0, [r9]
   11b10:	cmp	r1, r0
   11b14:	beq	11b64 <__assert_fail@plt+0xa64>
   11b18:	movw	r2, #29032	; 0x7168
   11b1c:	movt	r2, #2
   11b20:	ldr	r3, [r2]
   11b24:	ldrb	r2, [r3]
   11b28:	cmp	r2, #0
   11b2c:	beq	11b68 <__assert_fail@plt+0xa68>
   11b30:	add	r4, r3, #1
   11b34:	uxtb	r0, r2
   11b38:	bl	110f4 <putchar_unlocked@plt>
   11b3c:	ldr	r0, [r9]
   11b40:	ldr	r1, [sl]
   11b44:	add	r0, r0, #1
   11b48:	cmp	r1, r0
   11b4c:	str	r0, [r9]
   11b50:	beq	11b64 <__assert_fail@plt+0xa64>
   11b54:	ldrb	r2, [r4], #1
   11b58:	cmp	r2, #0
   11b5c:	bne	11b34 <__assert_fail@plt+0xa34>
   11b60:	b	11b68 <__assert_fail@plt+0xa68>
   11b64:	mov	r1, r0
   11b68:	cmn	r6, #1
   11b6c:	beq	11bbc <__assert_fail@plt+0xabc>
   11b70:	cmp	r6, #10
   11b74:	beq	11be0 <__assert_fail@plt+0xae0>
   11b78:	sub	r0, r1, r0
   11b7c:	bl	12794 <__assert_fail@plt+0x1694>
   11b80:	b	11be0 <__assert_fail@plt+0xae0>
   11b84:	movw	r1, #29040	; 0x7170
   11b88:	ldr	r0, [r8]
   11b8c:	movt	r1, #2
   11b90:	ldr	r1, [r1]
   11b94:	cmp	r0, r1
   11b98:	blt	11ae4 <__assert_fail@plt+0x9e4>
   11b9c:	movw	r1, #29036	; 0x716c
   11ba0:	movt	r1, #2
   11ba4:	ldr	r1, [r1]
   11ba8:	add	r2, r1, r0
   11bac:	ldr	r1, [sl]
   11bb0:	cmp	r1, r2
   11bb4:	blt	11ae4 <__assert_fail@plt+0x9e4>
   11bb8:	b	11c20 <__assert_fail@plt+0xb20>
   11bbc:	movw	r2, #29044	; 0x7174
   11bc0:	ldr	r0, [r8]
   11bc4:	movt	r2, #2
   11bc8:	ldr	r2, [r2]
   11bcc:	add	r0, r2, r0
   11bd0:	cmp	r1, r0
   11bd4:	blt	11be0 <__assert_fail@plt+0xae0>
   11bd8:	mov	r0, #10
   11bdc:	bl	110f4 <putchar_unlocked@plt>
   11be0:	cmn	r6, #1
   11be4:	beq	11f38 <__assert_fail@plt+0xe38>
   11be8:	cmp	r6, #10
   11bec:	beq	11c08 <__assert_fail@plt+0xb08>
   11bf0:	mov	r0, r6
   11bf4:	bl	110f4 <putchar_unlocked@plt>
   11bf8:	mov	r0, r5
   11bfc:	bl	10f14 <getc_unlocked@plt>
   11c00:	mov	r6, r0
   11c04:	b	11be0 <__assert_fail@plt+0xae0>
   11c08:	mov	r0, #10
   11c0c:	bl	110f4 <putchar_unlocked@plt>
   11c10:	mov	r0, r5
   11c14:	bl	12020 <__assert_fail@plt+0xf20>
   11c18:	mov	r6, r0
   11c1c:	b	11ad8 <__assert_fail@plt+0x9d8>
   11c20:	movw	r2, #29084	; 0x719c
   11c24:	movt	r2, #2
   11c28:	str	r1, [r2]
   11c2c:	movw	r1, #29080	; 0x7198
   11c30:	movt	r1, #2
   11c34:	str	r0, [r1]
   11c38:	movw	r0, #34088	; 0x8528
   11c3c:	mov	r4, r1
   11c40:	movw	r1, #29088	; 0x71a0
   11c44:	movt	r0, #2
   11c48:	movt	r1, #2
   11c4c:	str	r1, [r0]
   11c50:	movw	r0, #29064	; 0x7188
   11c54:	movw	r1, #34096	; 0x8530
   11c58:	movt	r0, #2
   11c5c:	movt	r1, #2
   11c60:	str	r1, [r0]
   11c64:	mov	r0, r5
   11c68:	mov	r1, r6
   11c6c:	bl	1241c <__assert_fail@plt+0x131c>
   11c70:	ldr	r1, [r8]
   11c74:	ldr	r2, [r4]
   11c78:	mov	r3, r0
   11c7c:	mov	r0, #0
   11c80:	cmp	r1, r2
   11c84:	bne	11cc4 <__assert_fail@plt+0xbc4>
   11c88:	movw	r2, #29036	; 0x716c
   11c8c:	mvn	r0, #0
   11c90:	movt	r2, #2
   11c94:	subs	r0, r3, r0
   11c98:	movwne	r0, #1
   11c9c:	ldr	r2, [r2]
   11ca0:	add	r1, r2, r1
   11ca4:	ldr	r2, [sl]
   11ca8:	cmp	r2, r1
   11cac:	mov	r1, #0
   11cb0:	movwge	r1, #1
   11cb4:	subs	r2, r3, #10
   11cb8:	movwne	r2, #1
   11cbc:	and	r1, r2, r1
   11cc0:	and	r0, r0, r1
   11cc4:	mov	r4, r3
   11cc8:	bl	126c4 <__assert_fail@plt+0x15c4>
   11ccc:	movw	r0, #29025	; 0x7161
   11cd0:	movt	r0, #2
   11cd4:	ldrb	r0, [r0]
   11cd8:	cmp	r0, #0
   11cdc:	beq	11ce8 <__assert_fail@plt+0xbe8>
   11ce0:	mov	r2, r4
   11ce4:	b	11ee4 <__assert_fail@plt+0xde4>
   11ce8:	movw	r0, #29027	; 0x7163
   11cec:	movt	r0, #2
   11cf0:	ldrb	r0, [r0]
   11cf4:	cmp	r0, #1
   11cf8:	bne	11da8 <__assert_fail@plt+0xca8>
   11cfc:	movw	r1, #29080	; 0x7198
   11d00:	ldr	r0, [r8]
   11d04:	mov	r2, r4
   11d08:	movt	r1, #2
   11d0c:	ldr	r1, [r1]
   11d10:	cmp	r0, r1
   11d14:	bne	11ee4 <__assert_fail@plt+0xde4>
   11d18:	movw	r1, #29036	; 0x716c
   11d1c:	movt	r1, #2
   11d20:	ldr	r1, [r1]
   11d24:	add	r0, r1, r0
   11d28:	ldr	r1, [sl]
   11d2c:	cmp	r1, r0
   11d30:	blt	11ee4 <__assert_fail@plt+0xde4>
   11d34:	cmn	r2, #1
   11d38:	cmpne	r2, #10
   11d3c:	beq	11ee4 <__assert_fail@plt+0xde4>
   11d40:	mov	r0, r5
   11d44:	mov	r1, r2
   11d48:	bl	1241c <__assert_fail@plt+0x131c>
   11d4c:	movw	r1, #29080	; 0x7198
   11d50:	mov	r2, r0
   11d54:	ldr	r0, [r8]
   11d58:	movt	r1, #2
   11d5c:	ldr	r1, [r1]
   11d60:	cmp	r0, r1
   11d64:	bne	11ee4 <__assert_fail@plt+0xde4>
   11d68:	movw	r1, #29036	; 0x716c
   11d6c:	movt	r1, #2
   11d70:	ldr	r1, [r1]
   11d74:	add	r1, r1, r0
   11d78:	ldr	r0, [sl]
   11d7c:	cmp	r0, r1
   11d80:	blt	11ee4 <__assert_fail@plt+0xde4>
   11d84:	cmn	r2, #1
   11d88:	cmpne	r2, #10
   11d8c:	beq	11ee4 <__assert_fail@plt+0xde4>
   11d90:	movw	r1, #29056	; 0x7180
   11d94:	movt	r1, #2
   11d98:	ldr	r1, [r1]
   11d9c:	cmp	r0, r1
   11da0:	beq	11d40 <__assert_fail@plt+0xc40>
   11da4:	b	11ee4 <__assert_fail@plt+0xde4>
   11da8:	movw	r2, #29026	; 0x7162
   11dac:	movw	r0, #29080	; 0x7198
   11db0:	movt	r2, #2
   11db4:	movt	r0, #2
   11db8:	ldrb	r2, [r2]
   11dbc:	ldr	r1, [r0]
   11dc0:	ldr	r0, [r8]
   11dc4:	cmp	r2, #0
   11dc8:	mov	r2, r4
   11dcc:	beq	11e7c <__assert_fail@plt+0xd7c>
   11dd0:	cmp	r0, r1
   11dd4:	bne	11ee4 <__assert_fail@plt+0xde4>
   11dd8:	movw	r1, #29036	; 0x716c
   11ddc:	movt	r1, #2
   11de0:	ldr	r1, [r1]
   11de4:	add	r1, r1, r0
   11de8:	ldr	r0, [sl]
   11dec:	cmp	r0, r1
   11df0:	blt	11ee4 <__assert_fail@plt+0xde4>
   11df4:	cmn	r2, #1
   11df8:	cmpne	r2, #10
   11dfc:	beq	11ee4 <__assert_fail@plt+0xde4>
   11e00:	movw	r1, #29084	; 0x719c
   11e04:	movt	r1, #2
   11e08:	ldr	r1, [r1]
   11e0c:	cmp	r0, r1
   11e10:	beq	11ee4 <__assert_fail@plt+0xde4>
   11e14:	mov	r0, r5
   11e18:	mov	r1, r2
   11e1c:	bl	1241c <__assert_fail@plt+0x131c>
   11e20:	movw	r1, #29080	; 0x7198
   11e24:	mov	r2, r0
   11e28:	ldr	r0, [r8]
   11e2c:	movt	r1, #2
   11e30:	ldr	r1, [r1]
   11e34:	cmp	r0, r1
   11e38:	bne	11ee4 <__assert_fail@plt+0xde4>
   11e3c:	movw	r1, #29036	; 0x716c
   11e40:	movt	r1, #2
   11e44:	ldr	r1, [r1]
   11e48:	add	r1, r1, r0
   11e4c:	ldr	r0, [sl]
   11e50:	cmp	r0, r1
   11e54:	blt	11ee4 <__assert_fail@plt+0xde4>
   11e58:	cmn	r2, #1
   11e5c:	cmpne	r2, #10
   11e60:	beq	11ee4 <__assert_fail@plt+0xde4>
   11e64:	movw	r1, #29056	; 0x7180
   11e68:	movt	r1, #2
   11e6c:	ldr	r1, [r1]
   11e70:	cmp	r0, r1
   11e74:	beq	11e14 <__assert_fail@plt+0xd14>
   11e78:	b	11ee4 <__assert_fail@plt+0xde4>
   11e7c:	cmp	r0, r1
   11e80:	bne	11ee4 <__assert_fail@plt+0xde4>
   11e84:	movw	r1, #29036	; 0x716c
   11e88:	movt	r1, #2
   11e8c:	ldr	r1, [r1]
   11e90:	add	r1, r1, r0
   11e94:	ldr	r0, [sl]
   11e98:	cmp	r0, r1
   11e9c:	blt	11ee4 <__assert_fail@plt+0xde4>
   11ea0:	cmn	r2, #1
   11ea4:	cmpne	r2, #10
   11ea8:	beq	11ee4 <__assert_fail@plt+0xde4>
   11eac:	movw	r1, #29056	; 0x7180
   11eb0:	movt	r1, #2
   11eb4:	ldr	r1, [r1]
   11eb8:	cmp	r0, r1
   11ebc:	bne	11ee4 <__assert_fail@plt+0xde4>
   11ec0:	mov	r0, r5
   11ec4:	mov	r1, r2
   11ec8:	bl	1241c <__assert_fail@plt+0x131c>
   11ecc:	movw	r1, #29080	; 0x7198
   11ed0:	mov	r2, r0
   11ed4:	ldr	r0, [r8]
   11ed8:	movt	r1, #2
   11edc:	ldr	r1, [r1]
   11ee0:	b	11e7c <__assert_fail@plt+0xd7c>
   11ee4:	movw	r0, #29064	; 0x7188
   11ee8:	movt	r0, #2
   11eec:	ldr	r6, [r0]
   11ef0:	movw	r0, #34096	; 0x8530
   11ef4:	movt	r0, #2
   11ef8:	cmp	r6, r0
   11efc:	bls	12000 <__assert_fail@plt+0xf00>
   11f00:	ldrb	r0, [r6, #-16]
   11f04:	orr	r0, r0, #10
   11f08:	strb	r0, [r6, #-16]
   11f0c:	movw	r0, #29060	; 0x7184
   11f10:	movt	r0, #2
   11f14:	mov	r4, r0
   11f18:	str	r2, [r0]
   11f1c:	bl	120fc <__assert_fail@plt+0xffc>
   11f20:	mov	r0, r6
   11f24:	bl	12354 <__assert_fail@plt+0x1254>
   11f28:	ldr	r6, [r4]
   11f2c:	movw	r0, #29076	; 0x7194
   11f30:	movt	r0, #2
   11f34:	b	11ad4 <__assert_fail@plt+0x9d4>
   11f38:	movw	r1, #29060	; 0x7184
   11f3c:	mvn	r0, #0
   11f40:	movt	r1, #2
   11f44:	str	r0, [r1]
   11f48:	mov	r0, r5
   11f4c:	bl	10f74 <ferror_unlocked@plt>
   11f50:	mov	r7, r0
   11f54:	cmp	r0, #0
   11f58:	movw	r0, #29008	; 0x7150
   11f5c:	mov	r6, #0
   11f60:	movt	r0, #2
   11f64:	mvneq	r6, #0
   11f68:	ldr	r0, [r0]
   11f6c:	cmp	r0, r5
   11f70:	beq	11f98 <__assert_fail@plt+0xe98>
   11f74:	mov	r0, r5
   11f78:	bl	12b90 <__assert_fail@plt+0x1a90>
   11f7c:	cmp	r7, #0
   11f80:	bne	11fa0 <__assert_fail@plt+0xea0>
   11f84:	cmp	r0, #0
   11f88:	beq	11fa0 <__assert_fail@plt+0xea0>
   11f8c:	bl	11010 <__errno_location@plt>
   11f90:	ldr	r6, [r0]
   11f94:	b	11fa0 <__assert_fail@plt+0xea0>
   11f98:	mov	r0, r5
   11f9c:	bl	110ac <clearerr_unlocked@plt>
   11fa0:	cmp	r6, #0
   11fa4:	bmi	11ff4 <__assert_fail@plt+0xef4>
   11fa8:	beq	11fb8 <__assert_fail@plt+0xeb8>
   11fac:	movw	r5, #26191	; 0x664f
   11fb0:	movt	r5, #1
   11fb4:	b	11fd0 <__assert_fail@plt+0xed0>
   11fb8:	movw	r1, #25860	; 0x6504
   11fbc:	mov	r0, #0
   11fc0:	mov	r2, #5
   11fc4:	movt	r1, #1
   11fc8:	bl	10f20 <dcgettext@plt>
   11fcc:	mov	r5, r0
   11fd0:	ldr	r2, [sp]
   11fd4:	mov	r0, #0
   11fd8:	mov	r1, #3
   11fdc:	bl	14584 <__assert_fail@plt+0x3484>
   11fe0:	mov	r3, r0
   11fe4:	mov	r0, #0
   11fe8:	mov	r1, r6
   11fec:	mov	r2, r5
   11ff0:	bl	10f8c <error@plt>
   11ff4:	lsr	r0, r6, #31
   11ff8:	sub	sp, fp, #28
   11ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12000:	movw	r0, #25871	; 0x650f
   12004:	movw	r1, #25889	; 0x6521
   12008:	movw	r3, #25899	; 0x652b
   1200c:	movw	r2, #623	; 0x26f
   12010:	movt	r0, #1
   12014:	movt	r1, #1
   12018:	movt	r3, #1
   1201c:	bl	11100 <__assert_fail@plt>
   12020:	push	{r4, r5, r6, sl, fp, lr}
   12024:	add	fp, sp, #16
   12028:	movw	r5, #29068	; 0x718c
   1202c:	mov	r4, r0
   12030:	mov	r0, #0
   12034:	movt	r5, #2
   12038:	str	r0, [r5]
   1203c:	mov	r0, r4
   12040:	bl	10f14 <getc_unlocked@plt>
   12044:	mov	r1, r0
   12048:	mov	r0, r4
   1204c:	bl	123ac <__assert_fail@plt+0x12ac>
   12050:	mov	r1, r0
   12054:	movw	r0, #29044	; 0x7174
   12058:	movt	r0, #2
   1205c:	ldr	r0, [r0]
   12060:	cmp	r0, #0
   12064:	beq	120d0 <__assert_fail@plt+0xfd0>
   12068:	ldr	r0, [r5]
   1206c:	movw	r2, #29072	; 0x7190
   12070:	movt	r2, #2
   12074:	str	r0, [r2]
   12078:	movw	r0, #29032	; 0x7168
   1207c:	movt	r0, #2
   12080:	ldr	r2, [r0]
   12084:	ldrb	r0, [r2]
   12088:	cmp	r0, #0
   1208c:	beq	120c4 <__assert_fail@plt+0xfc4>
   12090:	add	r6, r2, #1
   12094:	uxtb	r0, r0
   12098:	cmp	r1, r0
   1209c:	bne	120f4 <__assert_fail@plt+0xff4>
   120a0:	ldr	r0, [r5]
   120a4:	add	r0, r0, #1
   120a8:	str	r0, [r5]
   120ac:	mov	r0, r4
   120b0:	bl	10f14 <getc_unlocked@plt>
   120b4:	mov	r1, r0
   120b8:	ldrb	r0, [r6], #1
   120bc:	cmp	r0, #0
   120c0:	bne	12094 <__assert_fail@plt+0xf94>
   120c4:	mov	r0, r4
   120c8:	pop	{r4, r5, r6, sl, fp, lr}
   120cc:	b	123ac <__assert_fail@plt+0x12ac>
   120d0:	movw	r0, #29040	; 0x7170
   120d4:	ldr	r2, [r5]
   120d8:	movt	r0, #2
   120dc:	ldr	r0, [r0]
   120e0:	cmp	r0, r2
   120e4:	movlt	r2, r0
   120e8:	movw	r0, #29072	; 0x7190
   120ec:	movt	r0, #2
   120f0:	str	r2, [r0]
   120f4:	mov	r0, r1
   120f8:	pop	{r4, r5, r6, sl, fp, pc}
   120fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12100:	add	fp, sp, #28
   12104:	sub	sp, sp, #24
   12108:	movw	r0, #29064	; 0x7188
   1210c:	mov	r5, #0
   12110:	movw	lr, #34096	; 0x8530
   12114:	movt	r0, #2
   12118:	movt	lr, #2
   1211c:	ldr	r0, [r0]
   12120:	str	r5, [r0, #20]
   12124:	ldr	r1, [r0, #4]
   12128:	str	r1, [sp]
   1212c:	movw	r1, #29028	; 0x7164
   12130:	movt	r1, #2
   12134:	ldr	r3, [r1]
   12138:	sub	r1, r0, #28
   1213c:	cmp	r1, lr
   12140:	str	r3, [r0, #4]
   12144:	bcc	12344 <__assert_fail@plt+0x1244>
   12148:	movw	r7, #29048	; 0x7178
   1214c:	movw	r2, #29076	; 0x7194
   12150:	mov	r9, r0
   12154:	movt	r7, #2
   12158:	movt	r2, #2
   1215c:	ldr	r4, [r7]
   12160:	movw	r7, #29056	; 0x7180
   12164:	ldr	r8, [r2]
   12168:	movt	r7, #2
   1216c:	ldr	r2, [r7]
   12170:	movw	r7, #29084	; 0x719c
   12174:	movt	r7, #2
   12178:	str	r2, [sp, #8]
   1217c:	ldr	r2, [r7]
   12180:	str	r2, [sp, #4]
   12184:	ldr	r2, [sp, #4]
   12188:	cmp	r1, lr
   1218c:	mov	r6, r1
   12190:	ldr	r1, [sp, #8]
   12194:	mov	r7, r9
   12198:	mvn	ip, #-2147483648	; 0x80000000
   1219c:	str	r5, [sp, #16]
   121a0:	str	r6, [sp, #20]
   121a4:	sub	r6, r6, lr
   121a8:	clz	r6, r6
   121ac:	lsr	r6, r6, #5
   121b0:	moveq	r1, r2
   121b4:	ldr	r2, [r9, #-24]	; 0xffffffe8
   121b8:	cmp	r8, #0
   121bc:	add	sl, r1, r2
   121c0:	mov	r1, #0
   121c4:	movwgt	r1, #1
   121c8:	str	r2, [sp, #12]
   121cc:	and	r6, r6, r1
   121d0:	mov	r1, r5
   121d4:	add	lr, r0, r1
   121d8:	cmp	r1, #0
   121dc:	beq	12218 <__assert_fail@plt+0x1118>
   121e0:	sub	r5, r4, sl
   121e4:	ldr	r2, [lr, #24]
   121e8:	add	r5, r5, r5, lsl #2
   121ec:	lsl	r5, r5, #1
   121f0:	mul	r5, r5, r5
   121f4:	cmp	r2, r0
   121f8:	beq	1221c <__assert_fail@plt+0x111c>
   121fc:	ldr	r2, [lr, #16]
   12200:	sub	r2, sl, r2
   12204:	add	r2, r2, r2, lsl #2
   12208:	lsl	r2, r2, #1
   1220c:	mul	r2, r2, r2
   12210:	add	r5, r5, r2, lsr #1
   12214:	b	1221c <__assert_fail@plt+0x111c>
   12218:	mov	r5, #0
   1221c:	ldr	r2, [lr, #20]
   12220:	cmp	r6, #0
   12224:	add	r9, r2, r5
   12228:	beq	12240 <__assert_fail@plt+0x1140>
   1222c:	sub	r2, sl, r8
   12230:	add	r2, r2, r2, lsl #2
   12234:	lsl	r2, r2, #1
   12238:	mul	r2, r2, r2
   1223c:	add	r9, r9, r2, lsr #1
   12240:	cmp	r9, ip
   12244:	strlt	sl, [r7, #-12]
   12248:	strlt	lr, [r7, #-4]
   1224c:	movlt	ip, r9
   12250:	cmp	r1, #0
   12254:	beq	12274 <__assert_fail@plt+0x1174>
   12258:	ldr	r2, [lr, #-20]	; 0xffffffec
   1225c:	ldr	r5, [lr, #4]
   12260:	add	r1, r1, #28
   12264:	add	r2, r2, sl
   12268:	add	sl, r2, r5
   1226c:	cmp	sl, r3
   12270:	blt	121d4 <__assert_fail@plt+0x10d4>
   12274:	ldr	r9, [sp, #20]
   12278:	movw	lr, #34096	; 0x8530
   1227c:	movt	lr, #2
   12280:	cmp	r9, lr
   12284:	bls	122dc <__assert_fail@plt+0x11dc>
   12288:	ldrb	r6, [r7, #-44]	; 0xffffffd4
   1228c:	tst	r6, #2
   12290:	bne	122e8 <__assert_fail@plt+0x11e8>
   12294:	ldr	r5, [sp, #16]
   12298:	movw	r1, #3300	; 0xce4
   1229c:	tst	r6, #4
   122a0:	bne	122fc <__assert_fail@plt+0x11fc>
   122a4:	add	r1, lr, #28
   122a8:	cmp	r9, r1
   122ac:	bls	122e0 <__assert_fail@plt+0x11e0>
   122b0:	ldrb	r1, [r7, #-72]	; 0xffffffb8
   122b4:	tst	r1, #8
   122b8:	movw	r1, #4900	; 0x1324
   122bc:	beq	122fc <__assert_fail@plt+0x11fc>
   122c0:	ldr	r1, [r7, #-52]	; 0xffffffcc
   122c4:	movw	r2, #40000	; 0x9c40
   122c8:	add	r1, r1, #2
   122cc:	sdiv	r1, r2, r1
   122d0:	movw	r2, #4900	; 0x1324
   122d4:	add	r1, r1, r2
   122d8:	b	122fc <__assert_fail@plt+0x11fc>
   122dc:	ldr	r5, [sp, #16]
   122e0:	movw	r1, #4900	; 0x1324
   122e4:	b	122fc <__assert_fail@plt+0x11fc>
   122e8:	ldr	r5, [sp, #16]
   122ec:	tst	r6, #8
   122f0:	mov	r1, #2400	; 0x960
   122f4:	movweq	r1, #37220	; 0x9164
   122f8:	movteq	r1, #5
   122fc:	ldrb	r6, [r7, #-16]
   12300:	tst	r6, #1
   12304:	bne	12328 <__assert_fail@plt+0x1228>
   12308:	tst	r6, #8
   1230c:	beq	1232c <__assert_fail@plt+0x122c>
   12310:	ldr	r2, [sp, #12]
   12314:	movw	r6, #22500	; 0x57e4
   12318:	add	r2, r2, #2
   1231c:	sdiv	r2, r6, r2
   12320:	add	r1, r2, r1
   12324:	b	1232c <__assert_fail@plt+0x122c>
   12328:	sub	r1, r1, #1600	; 0x640
   1232c:	add	r1, r1, ip
   12330:	sub	r5, r5, #28
   12334:	str	r1, [r7, #-8]
   12338:	sub	r1, r9, #28
   1233c:	cmp	r1, lr
   12340:	bcs	12184 <__assert_fail@plt+0x1084>
   12344:	ldr	r1, [sp]
   12348:	str	r1, [r0, #4]
   1234c:	sub	sp, fp, #28
   12350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12354:	push	{r4, r5, r6, sl, fp, lr}
   12358:	add	fp, sp, #16
   1235c:	mov	r4, r0
   12360:	movw	r0, #29084	; 0x719c
   12364:	movw	r5, #34096	; 0x8530
   12368:	movt	r0, #2
   1236c:	movt	r5, #2
   12370:	ldr	r1, [r0]
   12374:	mov	r0, r5
   12378:	bl	12970 <__assert_fail@plt+0x1870>
   1237c:	ldr	r5, [r5, #24]
   12380:	cmp	r5, r4
   12384:	beq	123a8 <__assert_fail@plt+0x12a8>
   12388:	movw	r6, #29056	; 0x7180
   1238c:	movt	r6, #2
   12390:	ldr	r1, [r6]
   12394:	mov	r0, r5
   12398:	bl	12970 <__assert_fail@plt+0x1870>
   1239c:	ldr	r5, [r5, #24]
   123a0:	cmp	r5, r4
   123a4:	bne	12390 <__assert_fail@plt+0x1290>
   123a8:	pop	{r4, r5, r6, sl, fp, pc}
   123ac:	push	{r4, r5, r6, r7, fp, lr}
   123b0:	add	fp, sp, #16
   123b4:	movw	r5, #29052	; 0x717c
   123b8:	movw	r7, #29068	; 0x718c
   123bc:	mov	r4, r0
   123c0:	mov	r6, #1
   123c4:	movt	r5, #2
   123c8:	movt	r7, #2
   123cc:	cmp	r1, #9
   123d0:	beq	123e8 <__assert_fail@plt+0x12e8>
   123d4:	cmp	r1, #32
   123d8:	bne	12414 <__assert_fail@plt+0x1314>
   123dc:	ldr	r0, [r7]
   123e0:	add	r0, r0, #1
   123e4:	b	12400 <__assert_fail@plt+0x1300>
   123e8:	ldr	r0, [r7]
   123ec:	strb	r6, [r5]
   123f0:	asr	r1, r0, #31
   123f4:	add	r0, r0, r1, lsr #29
   123f8:	bic	r0, r0, #7
   123fc:	add	r0, r0, #8
   12400:	str	r0, [r7]
   12404:	mov	r0, r4
   12408:	bl	10f14 <getc_unlocked@plt>
   1240c:	mov	r1, r0
   12410:	b	123cc <__assert_fail@plt+0x12cc>
   12414:	mov	r0, r1
   12418:	pop	{r4, r5, r6, r7, fp, pc}
   1241c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12420:	add	fp, sp, #28
   12424:	sub	sp, sp, #20
   12428:	movw	r2, #29088	; 0x71a0
   1242c:	mov	r8, r0
   12430:	movw	r0, #29064	; 0x7188
   12434:	mov	r5, r1
   12438:	movw	r1, #5000	; 0x1388
   1243c:	movw	r4, #34088	; 0x8528
   12440:	movt	r0, #2
   12444:	movt	r2, #2
   12448:	movt	r4, #2
   1244c:	add	r7, r2, r1
   12450:	movw	r2, #34096	; 0x8530
   12454:	ldr	r0, [r0]
   12458:	movw	r1, #27944	; 0x6d28
   1245c:	movt	r2, #2
   12460:	add	r1, r2, r1
   12464:	stm	sp, {r1, r7, r8}
   12468:	ldr	r1, [r4]
   1246c:	str	r1, [r0]
   12470:	cmp	r1, r7
   12474:	bne	12488 <__assert_fail@plt+0x1388>
   12478:	mov	r0, #1
   1247c:	bl	126c4 <__assert_fail@plt+0x15c4>
   12480:	bl	1282c <__assert_fail@plt+0x172c>
   12484:	ldr	r1, [r4]
   12488:	add	r0, r1, #1
   1248c:	str	r0, [r4]
   12490:	mov	r0, r8
   12494:	strb	r5, [r1]
   12498:	bl	10f14 <getc_unlocked@plt>
   1249c:	mov	r5, r0
   124a0:	bl	10fd4 <__ctype_b_loc@plt>
   124a4:	mov	r6, r0
   124a8:	cmn	r5, #1
   124ac:	beq	124cc <__assert_fail@plt+0x13cc>
   124b0:	ldr	r0, [r6]
   124b4:	add	r0, r0, r5, lsl #1
   124b8:	ldrb	r0, [r0, #1]
   124bc:	tst	r0, #32
   124c0:	bne	124cc <__assert_fail@plt+0x13cc>
   124c4:	ldr	r1, [r4]
   124c8:	b	12470 <__assert_fail@plt+0x1370>
   124cc:	movw	r0, #29064	; 0x7188
   124d0:	ldr	sl, [r4]
   124d4:	mov	r2, #6
   124d8:	movt	r0, #2
   124dc:	ldr	r8, [r0]
   124e0:	movw	r0, #29068	; 0x718c
   124e4:	movt	r0, #2
   124e8:	mov	r1, r0
   124ec:	ldr	r9, [r8]
   124f0:	sub	r4, sl, r9
   124f4:	str	r4, [r8, #4]
   124f8:	ldr	r0, [r0]
   124fc:	add	r0, r0, r4
   12500:	str	r0, [r1]
   12504:	str	r0, [sp, #16]
   12508:	ldrb	r0, [sl, #-1]!
   1250c:	ldrb	r1, [r9]
   12510:	str	r0, [sp, #12]
   12514:	movw	r0, #25927	; 0x6547
   12518:	movt	r0, #1
   1251c:	bl	11064 <memchr@plt>
   12520:	ldrb	r1, [r8, #12]
   12524:	cmp	r0, #0
   12528:	movwne	r0, #1
   1252c:	bic	r1, r1, #1
   12530:	orr	r7, r1, r0
   12534:	ldr	r1, [sp, #12]
   12538:	str	r8, [sp, #12]
   1253c:	strb	r7, [r8, #12]
   12540:	ldr	r0, [r6]
   12544:	ldrb	r0, [r0, r1, lsl #1]
   12548:	lsr	r0, r0, #2
   1254c:	bfi	r7, r0, #2, #1
   12550:	sub	r0, r4, #1
   12554:	cmp	r0, #1
   12558:	strb	r7, [r8, #12]
   1255c:	blt	12594 <__assert_fail@plt+0x1494>
   12560:	movw	r6, #25933	; 0x654d
   12564:	movw	r4, #34088	; 0x8528
   12568:	movt	r6, #1
   1256c:	movt	r4, #2
   12570:	ldrb	r1, [sl]
   12574:	mov	r0, r6
   12578:	mov	r2, #5
   1257c:	bl	11064 <memchr@plt>
   12580:	cmp	r0, #0
   12584:	subne	sl, sl, #1
   12588:	cmpne	sl, r9
   1258c:	bhi	12570 <__assert_fail@plt+0x1470>
   12590:	b	1259c <__assert_fail@plt+0x149c>
   12594:	movw	r4, #34088	; 0x8528
   12598:	movt	r4, #2
   1259c:	ldrb	r1, [sl]
   125a0:	movw	r0, #25938	; 0x6552
   125a4:	mov	r2, #4
   125a8:	movt	r0, #1
   125ac:	bl	11064 <memchr@plt>
   125b0:	cmp	r0, #0
   125b4:	and	r1, r7, #253	; 0xfd
   125b8:	ldr	r8, [sp, #8]
   125bc:	movwne	r0, #1
   125c0:	orr	r0, r1, r0, lsl #1
   125c4:	ldr	r1, [sp, #12]
   125c8:	strb	r0, [r1, #12]
   125cc:	mov	r0, r8
   125d0:	mov	r1, r5
   125d4:	bl	123ac <__assert_fail@plt+0x12ac>
   125d8:	mov	r5, r0
   125dc:	movw	r0, #29068	; 0x718c
   125e0:	ldr	r1, [sp, #16]
   125e4:	ldr	r7, [sp, #4]
   125e8:	movt	r0, #2
   125ec:	cmn	r5, #1
   125f0:	ldr	r0, [r0]
   125f4:	sub	r2, r0, r1
   125f8:	movw	r0, #29064	; 0x7188
   125fc:	movt	r0, #2
   12600:	ldr	r0, [r0]
   12604:	str	r2, [r0, #8]
   12608:	ldrb	r1, [r0, #12]
   1260c:	beq	12624 <__assert_fail@plt+0x1524>
   12610:	mov	r3, #0
   12614:	tst	r1, #2
   12618:	beq	1263c <__assert_fail@plt+0x153c>
   1261c:	cmp	r5, #10
   12620:	bne	12630 <__assert_fail@plt+0x1530>
   12624:	orr	r1, r1, #8
   12628:	strb	r1, [r0, #12]
   1262c:	b	12664 <__assert_fail@plt+0x1564>
   12630:	cmp	r2, #1
   12634:	mov	r3, #0
   12638:	movwgt	r3, #1
   1263c:	and	r1, r1, #247	; 0xf7
   12640:	cmp	r5, #10
   12644:	orr	r1, r1, r3, lsl #3
   12648:	strb	r1, [r0, #12]
   1264c:	beq	12664 <__assert_fail@plt+0x1564>
   12650:	movw	r2, #29024	; 0x7160
   12654:	movt	r2, #2
   12658:	ldrb	r2, [r2]
   1265c:	cmp	r2, #1
   12660:	bne	12674 <__assert_fail@plt+0x1574>
   12664:	tst	r1, #8
   12668:	mov	r1, #2
   1266c:	movweq	r1, #1
   12670:	str	r1, [r0, #8]
   12674:	ldr	r1, [sp]
   12678:	cmp	r0, r1
   1267c:	bne	12698 <__assert_fail@plt+0x1598>
   12680:	mov	r0, #1
   12684:	bl	126c4 <__assert_fail@plt+0x15c4>
   12688:	bl	1282c <__assert_fail@plt+0x172c>
   1268c:	movw	r0, #29064	; 0x7188
   12690:	movt	r0, #2
   12694:	ldr	r0, [r0]
   12698:	movw	r1, #29064	; 0x7188
   1269c:	cmp	r5, #10
   126a0:	add	r0, r0, #28
   126a4:	movt	r1, #2
   126a8:	cmnne	r5, #1
   126ac:	str	r0, [r1]
   126b0:	bne	12468 <__assert_fail@plt+0x1368>
   126b4:	mov	r0, r8
   126b8:	sub	sp, fp, #28
   126bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c0:	b	12020 <__assert_fail@plt+0xf20>
   126c4:	movw	r1, #29025	; 0x7161
   126c8:	movt	r1, #2
   126cc:	ldrb	r1, [r1]
   126d0:	cmp	r1, #1
   126d4:	movw	r1, #29056	; 0x7180
   126d8:	movt	r1, #2
   126dc:	beq	12754 <__assert_fail@plt+0x1654>
   126e0:	movw	r2, #29027	; 0x7163
   126e4:	movt	r2, #2
   126e8:	ldrb	r2, [r2]
   126ec:	cmp	r2, #1
   126f0:	bne	12714 <__assert_fail@plt+0x1614>
   126f4:	movw	r2, #29068	; 0x718c
   126f8:	movw	r3, #29084	; 0x719c
   126fc:	cmp	r0, #0
   12700:	movt	r2, #2
   12704:	movt	r3, #2
   12708:	movne	r3, r2
   1270c:	ldr	r0, [r3]
   12710:	b	12760 <__assert_fail@plt+0x1660>
   12714:	movw	r2, #29026	; 0x7162
   12718:	movt	r2, #2
   1271c:	ldrb	r2, [r2]
   12720:	cmp	r2, #1
   12724:	bne	12754 <__assert_fail@plt+0x1654>
   12728:	cmp	r0, #0
   1272c:	beq	12768 <__assert_fail@plt+0x1668>
   12730:	movw	r0, #29068	; 0x718c
   12734:	movw	r2, #29084	; 0x719c
   12738:	movt	r0, #2
   1273c:	movt	r2, #2
   12740:	ldr	r0, [r0]
   12744:	ldr	r2, [r2]
   12748:	cmp	r0, r2
   1274c:	bne	12760 <__assert_fail@plt+0x1660>
   12750:	b	12774 <__assert_fail@plt+0x1674>
   12754:	movw	r0, #29084	; 0x719c
   12758:	movt	r0, #2
   1275c:	ldr	r0, [r0]
   12760:	str	r0, [r1]
   12764:	bx	lr
   12768:	movw	r0, #29084	; 0x719c
   1276c:	movt	r0, #2
   12770:	ldr	r0, [r0]
   12774:	ldr	r2, [r1]
   12778:	cmp	r2, r0
   1277c:	bxne	lr
   12780:	cmp	r0, #0
   12784:	mov	r2, #0
   12788:	movweq	r2, #3
   1278c:	mov	r0, r2
   12790:	b	12760 <__assert_fail@plt+0x1660>
   12794:	push	{r4, r5, r6, sl, fp, lr}
   12798:	add	fp, sp, #16
   1279c:	movw	r4, #62096	; 0xf290
   127a0:	movt	r4, #2
   127a4:	ldr	r1, [r4]
   127a8:	add	r5, r1, r0
   127ac:	movw	r0, #29052	; 0x717c
   127b0:	movt	r0, #2
   127b4:	ldrb	r0, [r0]
   127b8:	cmp	r0, #1
   127bc:	bne	12804 <__assert_fail@plt+0x1704>
   127c0:	asr	r0, r5, #31
   127c4:	add	r0, r5, r0, lsr #29
   127c8:	bic	r6, r0, #7
   127cc:	add	r0, r1, #1
   127d0:	cmp	r0, r6
   127d4:	bge	12804 <__assert_fail@plt+0x1704>
   127d8:	cmp	r1, r6
   127dc:	bge	12804 <__assert_fail@plt+0x1704>
   127e0:	mov	r0, #9
   127e4:	bl	110f4 <putchar_unlocked@plt>
   127e8:	ldr	r0, [r4]
   127ec:	asr	r1, r0, #31
   127f0:	add	r0, r0, r1, lsr #29
   127f4:	bic	r0, r0, #7
   127f8:	add	r1, r0, #8
   127fc:	str	r1, [r4]
   12800:	b	127d8 <__assert_fail@plt+0x16d8>
   12804:	cmp	r1, r5
   12808:	popge	{r4, r5, r6, sl, fp, pc}
   1280c:	mov	r0, #32
   12810:	bl	110f4 <putchar_unlocked@plt>
   12814:	ldr	r0, [r4]
   12818:	add	r0, r0, #1
   1281c:	cmp	r0, r5
   12820:	str	r0, [r4]
   12824:	blt	1280c <__assert_fail@plt+0x170c>
   12828:	pop	{r4, r5, r6, sl, fp, pc}
   1282c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12830:	add	fp, sp, #24
   12834:	movw	r9, #29064	; 0x7188
   12838:	movw	r8, #34096	; 0x8530
   1283c:	movt	r9, #2
   12840:	movt	r8, #2
   12844:	ldr	r6, [r9]
   12848:	cmp	r6, r8
   1284c:	beq	128ac <__assert_fail@plt+0x17ac>
   12850:	bl	120fc <__assert_fail@plt+0xffc>
   12854:	ldr	r4, [r8, #24]
   12858:	cmp	r4, r6
   1285c:	beq	128e4 <__assert_fail@plt+0x17e4>
   12860:	ldr	r3, [r4, #20]
   12864:	mvn	r2, #-2147483648	; 0x80000000
   12868:	mov	r5, r6
   1286c:	mov	r1, r2
   12870:	ldr	r0, [r4, #24]
   12874:	ldr	r7, [r0, #20]
   12878:	sub	r3, r3, r7
   1287c:	cmp	r3, r2
   12880:	movlt	r1, r3
   12884:	cmn	r1, #-2147483639	; 0x80000009
   12888:	addlt	r1, r1, #9
   1288c:	cmp	r3, r2
   12890:	mov	r3, r7
   12894:	movlt	r5, r4
   12898:	cmp	r0, r6
   1289c:	mov	r4, r0
   128a0:	mov	r2, r1
   128a4:	bne	12870 <__assert_fail@plt+0x1770>
   128a8:	b	128e8 <__assert_fail@plt+0x17e8>
   128ac:	movw	r5, #34088	; 0x8528
   128b0:	movw	r4, #29088	; 0x71a0
   128b4:	mov	r1, #1
   128b8:	movt	r5, #2
   128bc:	movt	r4, #2
   128c0:	ldr	r0, [r5]
   128c4:	sub	r2, r0, r4
   128c8:	movw	r0, #29012	; 0x7154
   128cc:	movt	r0, #2
   128d0:	ldr	r3, [r0]
   128d4:	mov	r0, r4
   128d8:	bl	10f08 <fwrite_unlocked@plt>
   128dc:	str	r4, [r5]
   128e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128e4:	mov	r5, r6
   128e8:	mov	r0, r5
   128ec:	bl	12354 <__assert_fail@plt+0x1254>
   128f0:	movw	r4, #34088	; 0x8528
   128f4:	ldr	r1, [r5]
   128f8:	movw	r6, #29088	; 0x71a0
   128fc:	movt	r4, #2
   12900:	movt	r6, #2
   12904:	ldr	r7, [r4]
   12908:	mov	r0, r6
   1290c:	sub	r2, r7, r1
   12910:	bl	10ecc <memmove@plt>
   12914:	ldr	r0, [r5]
   12918:	sub	r0, r6, r0
   1291c:	ldr	r6, [r9]
   12920:	add	r1, r7, r0
   12924:	str	r1, [r4]
   12928:	cmp	r5, r6
   1292c:	bhi	1294c <__assert_fail@plt+0x184c>
   12930:	mov	r1, r5
   12934:	ldr	r2, [r1]
   12938:	add	r2, r2, r0
   1293c:	str	r2, [r1], #28
   12940:	ldr	r6, [r9]
   12944:	cmp	r1, r6
   12948:	bls	12934 <__assert_fail@plt+0x1834>
   1294c:	sub	r0, r6, r5
   12950:	mov	r1, r5
   12954:	add	r2, r0, #28
   12958:	mov	r0, r8
   1295c:	bl	10ecc <memmove@plt>
   12960:	sub	r0, r8, r5
   12964:	add	r0, r6, r0
   12968:	str	r0, [r9]
   1296c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12970:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12974:	add	fp, sp, #24
   12978:	movw	r8, #62096	; 0xf290
   1297c:	mov	r4, r0
   12980:	mov	r0, #0
   12984:	mov	r5, r1
   12988:	movt	r8, #2
   1298c:	str	r0, [r8]
   12990:	movw	r0, #29080	; 0x7198
   12994:	movt	r0, #2
   12998:	ldr	r0, [r0]
   1299c:	bl	12794 <__assert_fail@plt+0x1694>
   129a0:	movw	r0, #29012	; 0x7154
   129a4:	movt	r0, #2
   129a8:	ldr	r1, [r0]
   129ac:	movw	r0, #29032	; 0x7168
   129b0:	movt	r0, #2
   129b4:	ldr	r0, [r0]
   129b8:	bl	10e90 <fputs_unlocked@plt>
   129bc:	movw	r0, #29044	; 0x7174
   129c0:	ldr	r1, [r8]
   129c4:	movt	r0, #2
   129c8:	ldr	r0, [r0]
   129cc:	add	r0, r1, r0
   129d0:	str	r0, [r8]
   129d4:	sub	r0, r5, r0
   129d8:	bl	12794 <__assert_fail@plt+0x1694>
   129dc:	ldr	r0, [r4, #24]
   129e0:	sub	r5, r0, #28
   129e4:	ldr	r7, [r4, #4]
   129e8:	mov	r0, #0
   129ec:	cmp	r7, #0
   129f0:	beq	12a0c <__assert_fail@plt+0x190c>
   129f4:	ldr	r6, [r4]
   129f8:	ldrb	r0, [r6], #1
   129fc:	bl	110f4 <putchar_unlocked@plt>
   12a00:	subs	r7, r7, #1
   12a04:	bne	129f8 <__assert_fail@plt+0x18f8>
   12a08:	ldr	r0, [r4, #4]
   12a0c:	ldr	r1, [r8]
   12a10:	cmp	r4, r5
   12a14:	add	r0, r1, r0
   12a18:	str	r0, [r8]
   12a1c:	beq	12a30 <__assert_fail@plt+0x1930>
   12a20:	ldr	r0, [r4, #8]
   12a24:	bl	12794 <__assert_fail@plt+0x1694>
   12a28:	add	r4, r4, #28
   12a2c:	b	129e4 <__assert_fail@plt+0x18e4>
   12a30:	movw	r1, #29076	; 0x7194
   12a34:	movt	r1, #2
   12a38:	str	r0, [r1]
   12a3c:	mov	r0, #10
   12a40:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12a44:	b	110f4 <putchar_unlocked@plt>
   12a48:	movw	r1, #62100	; 0xf294
   12a4c:	movt	r1, #2
   12a50:	str	r0, [r1]
   12a54:	bx	lr
   12a58:	movw	r1, #62104	; 0xf298
   12a5c:	movt	r1, #2
   12a60:	strb	r0, [r1]
   12a64:	bx	lr
   12a68:	push	{r4, r5, r6, sl, fp, lr}
   12a6c:	add	fp, sp, #16
   12a70:	sub	sp, sp, #8
   12a74:	movw	r0, #29012	; 0x7154
   12a78:	movt	r0, #2
   12a7c:	ldr	r0, [r0]
   12a80:	bl	15a24 <__assert_fail@plt+0x4924>
   12a84:	cmp	r0, #0
   12a88:	beq	12ab0 <__assert_fail@plt+0x19b0>
   12a8c:	movw	r0, #62104	; 0xf298
   12a90:	movt	r0, #2
   12a94:	ldrb	r0, [r0]
   12a98:	cmp	r0, #0
   12a9c:	beq	12ad0 <__assert_fail@plt+0x19d0>
   12aa0:	bl	11010 <__errno_location@plt>
   12aa4:	ldr	r0, [r0]
   12aa8:	cmp	r0, #32
   12aac:	bne	12ad0 <__assert_fail@plt+0x19d0>
   12ab0:	movw	r0, #29000	; 0x7148
   12ab4:	movt	r0, #2
   12ab8:	ldr	r0, [r0]
   12abc:	bl	15a24 <__assert_fail@plt+0x4924>
   12ac0:	cmp	r0, #0
   12ac4:	subeq	sp, fp, #16
   12ac8:	popeq	{r4, r5, r6, sl, fp, pc}
   12acc:	b	12b40 <__assert_fail@plt+0x1a40>
   12ad0:	movw	r1, #26175	; 0x663f
   12ad4:	mov	r0, #0
   12ad8:	mov	r2, #5
   12adc:	movt	r1, #1
   12ae0:	bl	10f20 <dcgettext@plt>
   12ae4:	mov	r4, r0
   12ae8:	movw	r0, #62100	; 0xf294
   12aec:	movt	r0, #2
   12af0:	ldr	r6, [r0]
   12af4:	bl	11010 <__errno_location@plt>
   12af8:	ldr	r5, [r0]
   12afc:	cmp	r6, #0
   12b00:	bne	12b1c <__assert_fail@plt+0x1a1c>
   12b04:	movw	r2, #26191	; 0x664f
   12b08:	mov	r0, #0
   12b0c:	mov	r1, r5
   12b10:	mov	r3, r4
   12b14:	movt	r2, #1
   12b18:	b	12b3c <__assert_fail@plt+0x1a3c>
   12b1c:	mov	r0, r6
   12b20:	bl	144d8 <__assert_fail@plt+0x33d8>
   12b24:	movw	r2, #26187	; 0x664b
   12b28:	mov	r3, r0
   12b2c:	str	r4, [sp]
   12b30:	mov	r0, #0
   12b34:	mov	r1, r5
   12b38:	movt	r2, #1
   12b3c:	bl	10f8c <error@plt>
   12b40:	movw	r0, #28916	; 0x70f4
   12b44:	movt	r0, #2
   12b48:	ldr	r0, [r0]
   12b4c:	bl	10ee4 <_exit@plt>
   12b50:	b	10eb4 <posix_fadvise64@plt>
   12b54:	cmp	r0, #0
   12b58:	bxeq	lr
   12b5c:	push	{r4, sl, fp, lr}
   12b60:	add	fp, sp, #8
   12b64:	sub	sp, sp, #16
   12b68:	mov	r4, r1
   12b6c:	bl	11040 <fileno@plt>
   12b70:	mov	r1, #0
   12b74:	mov	r2, #0
   12b78:	mov	r3, #0
   12b7c:	str	r1, [sp]
   12b80:	stmib	sp, {r1, r4}
   12b84:	bl	10eb4 <posix_fadvise64@plt>
   12b88:	sub	sp, fp, #8
   12b8c:	pop	{r4, sl, fp, pc}
   12b90:	push	{r4, r5, r6, sl, fp, lr}
   12b94:	add	fp, sp, #16
   12b98:	sub	sp, sp, #8
   12b9c:	mov	r4, r0
   12ba0:	bl	11040 <fileno@plt>
   12ba4:	cmn	r0, #1
   12ba8:	ble	12c1c <__assert_fail@plt+0x1b1c>
   12bac:	mov	r0, r4
   12bb0:	bl	10fb0 <__freading@plt>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12be4 <__assert_fail@plt+0x1ae4>
   12bbc:	mov	r0, r4
   12bc0:	bl	11040 <fileno@plt>
   12bc4:	mov	r1, #1
   12bc8:	mov	r2, #0
   12bcc:	mov	r3, #0
   12bd0:	str	r1, [sp]
   12bd4:	bl	10f50 <lseek64@plt>
   12bd8:	and	r0, r0, r1
   12bdc:	cmn	r0, #1
   12be0:	beq	12c1c <__assert_fail@plt+0x1b1c>
   12be4:	mov	r0, r4
   12be8:	bl	12c2c <__assert_fail@plt+0x1b2c>
   12bec:	cmp	r0, #0
   12bf0:	beq	12c1c <__assert_fail@plt+0x1b1c>
   12bf4:	bl	11010 <__errno_location@plt>
   12bf8:	ldr	r6, [r0]
   12bfc:	mov	r5, r0
   12c00:	mov	r0, r4
   12c04:	bl	11070 <fclose@plt>
   12c08:	cmp	r6, #0
   12c0c:	strne	r6, [r5]
   12c10:	mvnne	r0, #0
   12c14:	sub	sp, fp, #16
   12c18:	pop	{r4, r5, r6, sl, fp, pc}
   12c1c:	mov	r0, r4
   12c20:	sub	sp, fp, #16
   12c24:	pop	{r4, r5, r6, sl, fp, lr}
   12c28:	b	11070 <fclose@plt>
   12c2c:	push	{r4, sl, fp, lr}
   12c30:	add	fp, sp, #8
   12c34:	sub	sp, sp, #8
   12c38:	mov	r4, r0
   12c3c:	cmp	r0, #0
   12c40:	beq	12c78 <__assert_fail@plt+0x1b78>
   12c44:	mov	r0, r4
   12c48:	bl	10fb0 <__freading@plt>
   12c4c:	cmp	r0, #0
   12c50:	beq	12c78 <__assert_fail@plt+0x1b78>
   12c54:	ldrb	r0, [r4, #1]
   12c58:	tst	r0, #1
   12c5c:	beq	12c78 <__assert_fail@plt+0x1b78>
   12c60:	mov	r0, #1
   12c64:	mov	r2, #0
   12c68:	mov	r3, #0
   12c6c:	str	r0, [sp]
   12c70:	mov	r0, r4
   12c74:	bl	12c88 <__assert_fail@plt+0x1b88>
   12c78:	mov	r0, r4
   12c7c:	sub	sp, fp, #8
   12c80:	pop	{r4, sl, fp, lr}
   12c84:	b	10ec0 <fflush@plt>
   12c88:	push	{r4, r5, r6, r7, fp, lr}
   12c8c:	add	fp, sp, #16
   12c90:	sub	sp, sp, #8
   12c94:	mov	r4, r0
   12c98:	ldr	r0, [r0, #4]
   12c9c:	mov	r5, r3
   12ca0:	mov	r6, r2
   12ca4:	ldr	r1, [r4, #8]
   12ca8:	cmp	r1, r0
   12cac:	bne	12cc8 <__assert_fail@plt+0x1bc8>
   12cb0:	ldrd	r0, [r4, #16]
   12cb4:	cmp	r1, r0
   12cb8:	bne	12cc8 <__assert_fail@plt+0x1bc8>
   12cbc:	ldr	r0, [r4, #36]	; 0x24
   12cc0:	cmp	r0, #0
   12cc4:	beq	12ce0 <__assert_fail@plt+0x1be0>
   12cc8:	mov	r0, r4
   12ccc:	mov	r2, r6
   12cd0:	mov	r3, r5
   12cd4:	sub	sp, fp, #16
   12cd8:	pop	{r4, r5, r6, r7, fp, lr}
   12cdc:	b	1107c <fseeko64@plt>
   12ce0:	ldr	r7, [fp, #8]
   12ce4:	mov	r0, r4
   12ce8:	bl	11040 <fileno@plt>
   12cec:	mov	r2, r6
   12cf0:	mov	r3, r5
   12cf4:	str	r7, [sp]
   12cf8:	bl	10f50 <lseek64@plt>
   12cfc:	and	r2, r0, r1
   12d00:	cmn	r2, #1
   12d04:	beq	12d20 <__assert_fail@plt+0x1c20>
   12d08:	strd	r0, [r4, #80]	; 0x50
   12d0c:	ldr	r0, [r4]
   12d10:	bic	r0, r0, #16
   12d14:	str	r0, [r4]
   12d18:	mov	r0, #0
   12d1c:	b	12d24 <__assert_fail@plt+0x1c24>
   12d20:	mvn	r0, #0
   12d24:	sub	sp, fp, #16
   12d28:	pop	{r4, r5, r6, r7, fp, pc}
   12d2c:	push	{r4, r5, fp, lr}
   12d30:	add	fp, sp, #8
   12d34:	cmp	r0, #0
   12d38:	beq	12dcc <__assert_fail@plt+0x1ccc>
   12d3c:	mov	r1, #47	; 0x2f
   12d40:	mov	r4, r0
   12d44:	bl	11094 <strrchr@plt>
   12d48:	cmp	r0, #0
   12d4c:	mov	r5, r4
   12d50:	addne	r5, r0, #1
   12d54:	sub	r0, r5, r4
   12d58:	cmp	r0, #7
   12d5c:	blt	12db0 <__assert_fail@plt+0x1cb0>
   12d60:	movw	r1, #26250	; 0x668a
   12d64:	sub	r0, r5, #7
   12d68:	mov	r2, #7
   12d6c:	movt	r1, #1
   12d70:	bl	110dc <strncmp@plt>
   12d74:	cmp	r0, #0
   12d78:	bne	12db0 <__assert_fail@plt+0x1cb0>
   12d7c:	movw	r1, #26258	; 0x6692
   12d80:	mov	r0, r5
   12d84:	mov	r2, #3
   12d88:	movt	r1, #1
   12d8c:	bl	110dc <strncmp@plt>
   12d90:	cmp	r0, #0
   12d94:	beq	12da0 <__assert_fail@plt+0x1ca0>
   12d98:	mov	r4, r5
   12d9c:	b	12db0 <__assert_fail@plt+0x1cb0>
   12da0:	movw	r0, #28984	; 0x7138
   12da4:	add	r4, r5, #3
   12da8:	movt	r0, #2
   12dac:	str	r4, [r0]
   12db0:	movw	r0, #28988	; 0x713c
   12db4:	movt	r0, #2
   12db8:	str	r4, [r0]
   12dbc:	movw	r0, #62108	; 0xf29c
   12dc0:	movt	r0, #2
   12dc4:	str	r4, [r0]
   12dc8:	pop	{r4, r5, fp, pc}
   12dcc:	movw	r0, #29000	; 0x7148
   12dd0:	movt	r0, #2
   12dd4:	ldr	r1, [r0]
   12dd8:	movw	r0, #26194	; 0x6652
   12ddc:	movt	r0, #1
   12de0:	bl	110d0 <fputs@plt>
   12de4:	bl	110e8 <abort@plt>
   12de8:	push	{r4, r5, r6, sl, fp, lr}
   12dec:	add	fp, sp, #16
   12df0:	mov	r4, r0
   12df4:	movw	r0, #62112	; 0xf2a0
   12df8:	movt	r0, #2
   12dfc:	cmp	r4, #0
   12e00:	moveq	r4, r0
   12e04:	bl	11010 <__errno_location@plt>
   12e08:	ldr	r6, [r0]
   12e0c:	mov	r5, r0
   12e10:	mov	r0, r4
   12e14:	mov	r1, #48	; 0x30
   12e18:	bl	15074 <__assert_fail@plt+0x3f74>
   12e1c:	str	r6, [r5]
   12e20:	pop	{r4, r5, r6, sl, fp, pc}
   12e24:	movw	r1, #62112	; 0xf2a0
   12e28:	cmp	r0, #0
   12e2c:	movt	r1, #2
   12e30:	movne	r1, r0
   12e34:	ldr	r0, [r1]
   12e38:	bx	lr
   12e3c:	movw	r2, #62112	; 0xf2a0
   12e40:	cmp	r0, #0
   12e44:	movt	r2, #2
   12e48:	movne	r2, r0
   12e4c:	str	r1, [r2]
   12e50:	bx	lr
   12e54:	movw	r3, #62112	; 0xf2a0
   12e58:	cmp	r0, #0
   12e5c:	and	r2, r2, #1
   12e60:	movt	r3, #2
   12e64:	movne	r3, r0
   12e68:	ubfx	r0, r1, #5, #3
   12e6c:	and	r1, r1, #31
   12e70:	add	ip, r3, r0, lsl #2
   12e74:	mov	r0, #1
   12e78:	ldr	r3, [ip, #8]
   12e7c:	and	r0, r0, r3, lsr r1
   12e80:	eor	r2, r0, r2
   12e84:	eor	r1, r3, r2, lsl r1
   12e88:	str	r1, [ip, #8]
   12e8c:	bx	lr
   12e90:	movw	r2, #62112	; 0xf2a0
   12e94:	cmp	r0, #0
   12e98:	movt	r2, #2
   12e9c:	movne	r2, r0
   12ea0:	ldr	r0, [r2, #4]
   12ea4:	str	r1, [r2, #4]
   12ea8:	bx	lr
   12eac:	push	{fp, lr}
   12eb0:	mov	fp, sp
   12eb4:	movw	r3, #62112	; 0xf2a0
   12eb8:	cmp	r0, #0
   12ebc:	movt	r3, #2
   12ec0:	movne	r3, r0
   12ec4:	cmp	r1, #0
   12ec8:	mov	r0, #10
   12ecc:	cmpne	r2, #0
   12ed0:	str	r0, [r3]
   12ed4:	bne	12edc <__assert_fail@plt+0x1ddc>
   12ed8:	bl	110e8 <abort@plt>
   12edc:	str	r1, [r3, #40]	; 0x28
   12ee0:	str	r2, [r3, #44]	; 0x2c
   12ee4:	pop	{fp, pc}
   12ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eec:	add	fp, sp, #28
   12ef0:	sub	sp, sp, #20
   12ef4:	mov	r7, r0
   12ef8:	ldr	r0, [fp, #8]
   12efc:	movw	r5, #62112	; 0xf2a0
   12f00:	mov	r8, r3
   12f04:	mov	r9, r2
   12f08:	mov	sl, r1
   12f0c:	movt	r5, #2
   12f10:	cmp	r0, #0
   12f14:	movne	r5, r0
   12f18:	bl	11010 <__errno_location@plt>
   12f1c:	ldr	r2, [r5, #40]	; 0x28
   12f20:	ldr	r3, [r5, #44]	; 0x2c
   12f24:	mov	r4, r0
   12f28:	ldm	r5, {r0, r1}
   12f2c:	add	r5, r5, #8
   12f30:	ldr	r6, [r4]
   12f34:	stm	sp, {r0, r1, r5}
   12f38:	mov	r0, r7
   12f3c:	mov	r1, sl
   12f40:	str	r2, [sp, #12]
   12f44:	str	r3, [sp, #16]
   12f48:	mov	r2, r9
   12f4c:	mov	r3, r8
   12f50:	bl	12f60 <__assert_fail@plt+0x1e60>
   12f54:	str	r6, [r4]
   12f58:	sub	sp, fp, #28
   12f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f64:	add	fp, sp, #28
   12f68:	sub	sp, sp, #156	; 0x9c
   12f6c:	mov	r5, r0
   12f70:	add	r0, r2, #1
   12f74:	mov	r6, r1
   12f78:	mov	sl, r3
   12f7c:	str	r2, [fp, #-80]	; 0xffffffb0
   12f80:	str	r0, [sp, #72]	; 0x48
   12f84:	ldr	r0, [fp, #12]
   12f88:	and	r1, r0, #1
   12f8c:	str	r1, [sp, #32]
   12f90:	and	r1, r0, #4
   12f94:	str	r1, [sp, #28]
   12f98:	ubfx	r9, r0, #1, #1
   12f9c:	bl	10f5c <__ctype_get_mb_cur_max@plt>
   12fa0:	str	r0, [sp, #40]	; 0x28
   12fa4:	ldr	r0, [fp, #24]
   12fa8:	ldr	r7, [fp, #8]
   12fac:	mov	r1, #0
   12fb0:	mov	lr, #0
   12fb4:	str	r5, [fp, #-84]	; 0xffffffac
   12fb8:	str	r1, [sp, #60]	; 0x3c
   12fbc:	mov	r1, #1
   12fc0:	str	r1, [fp, #-48]	; 0xffffffd0
   12fc4:	str	r0, [sp, #80]	; 0x50
   12fc8:	ldr	r0, [fp, #20]
   12fcc:	str	r0, [sp, #76]	; 0x4c
   12fd0:	mov	r0, #0
   12fd4:	str	r0, [sp, #56]	; 0x38
   12fd8:	mov	r0, #0
   12fdc:	str	r0, [fp, #-88]	; 0xffffffa8
   12fe0:	mov	r0, #0
   12fe4:	str	r0, [fp, #-72]	; 0xffffffb8
   12fe8:	mov	r0, #0
   12fec:	cmp	r7, #10
   12ff0:	bhi	13fcc <__assert_fail@plt+0x2ecc>
   12ff4:	add	r1, pc, #24
   12ff8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12ffc:	mov	ip, r6
   13000:	mov	r8, #0
   13004:	mov	r2, #1
   13008:	mov	r6, #0
   1300c:	mov	r3, sl
   13010:	ldr	pc, [r1, r7, lsl #2]
   13014:	andeq	r3, r1, r0, lsl #2
   13018:	andeq	r3, r1, r4, asr r1
   1301c:	andeq	r3, r1, r4, lsl r1
   13020:	strdeq	r3, [r1], -r8
   13024:	andeq	r3, r1, r8, asr #2
   13028:	andeq	r3, r1, ip, ror r1
   1302c:	andeq	r3, r1, r4, lsr #2
   13030:	andeq	r3, r1, r0, lsl #4
   13034:	andeq	r3, r1, r0, asr #32
   13038:	andeq	r3, r1, r0, asr #32
   1303c:	andeq	r3, r1, r0, lsl #1
   13040:	movw	r0, #26338	; 0x66e2
   13044:	mov	r1, r7
   13048:	mov	r6, r5
   1304c:	mov	r4, ip
   13050:	mov	r5, lr
   13054:	movt	r0, #1
   13058:	bl	14730 <__assert_fail@plt+0x3630>
   1305c:	str	r0, [sp, #76]	; 0x4c
   13060:	movw	r0, #26340	; 0x66e4
   13064:	mov	r1, r7
   13068:	movt	r0, #1
   1306c:	bl	14730 <__assert_fail@plt+0x3630>
   13070:	mov	lr, r5
   13074:	mov	r5, r6
   13078:	mov	ip, r4
   1307c:	str	r0, [sp, #80]	; 0x50
   13080:	mov	r8, #0
   13084:	tst	r9, #1
   13088:	str	lr, [sp, #44]	; 0x2c
   1308c:	bne	130c4 <__assert_fail@plt+0x1fc4>
   13090:	ldr	r0, [sp, #76]	; 0x4c
   13094:	ldrb	r0, [r0]
   13098:	cmp	r0, #0
   1309c:	beq	130c4 <__assert_fail@plt+0x1fc4>
   130a0:	ldr	r1, [sp, #76]	; 0x4c
   130a4:	mov	r8, #0
   130a8:	add	r1, r1, #1
   130ac:	cmp	r8, ip
   130b0:	strbcc	r0, [r5, r8]
   130b4:	ldrb	r0, [r1, r8]
   130b8:	add	r8, r8, #1
   130bc:	cmp	r0, #0
   130c0:	bne	130ac <__assert_fail@plt+0x1fac>
   130c4:	ldr	r6, [sp, #80]	; 0x50
   130c8:	mov	r4, ip
   130cc:	mov	r0, r6
   130d0:	bl	10ff8 <strlen@plt>
   130d4:	mov	ip, r4
   130d8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   130dc:	ldr	lr, [sp, #44]	; 0x2c
   130e0:	str	r6, [fp, #-88]	; 0xffffffa8
   130e4:	str	r0, [fp, #-72]	; 0xffffffb8
   130e8:	mov	r2, #1
   130ec:	mov	r6, r9
   130f0:	mov	r3, sl
   130f4:	b	13200 <__assert_fail@plt+0x2100>
   130f8:	mov	r0, #1
   130fc:	b	13154 <__assert_fail@plt+0x2054>
   13100:	mov	r7, #0
   13104:	mov	r8, #0
   13108:	mov	r2, r0
   1310c:	mov	r6, #0
   13110:	b	13200 <__assert_fail@plt+0x2100>
   13114:	tst	r9, #1
   13118:	bne	13154 <__assert_fail@plt+0x2054>
   1311c:	mov	r2, r0
   13120:	b	131ac <__assert_fail@plt+0x20ac>
   13124:	mov	r0, #1
   13128:	mov	r8, #0
   1312c:	mov	r7, #5
   13130:	mov	r2, #1
   13134:	str	r0, [fp, #-72]	; 0xffffffb8
   13138:	movw	r0, #25936	; 0x6550
   1313c:	movt	r0, #1
   13140:	str	r0, [fp, #-88]	; 0xffffffa8
   13144:	b	13174 <__assert_fail@plt+0x2074>
   13148:	mov	r2, #1
   1314c:	tst	r9, #1
   13150:	beq	131ac <__assert_fail@plt+0x20ac>
   13154:	mov	r1, #1
   13158:	mov	r8, #0
   1315c:	mov	r7, #2
   13160:	mov	r2, r0
   13164:	str	r1, [fp, #-72]	; 0xffffffb8
   13168:	movw	r1, #26340	; 0x66e4
   1316c:	movt	r1, #1
   13170:	str	r1, [fp, #-88]	; 0xffffffa8
   13174:	mov	r6, #1
   13178:	b	13200 <__assert_fail@plt+0x2100>
   1317c:	tst	r9, #1
   13180:	beq	131d0 <__assert_fail@plt+0x20d0>
   13184:	mov	r0, #1
   13188:	mov	r8, #0
   1318c:	mov	r2, #1
   13190:	mov	r6, #1
   13194:	mov	r7, #5
   13198:	str	r0, [fp, #-72]	; 0xffffffb8
   1319c:	movw	r0, #25936	; 0x6550
   131a0:	movt	r0, #1
   131a4:	str	r0, [fp, #-88]	; 0xffffffa8
   131a8:	b	13200 <__assert_fail@plt+0x2100>
   131ac:	cmp	ip, #0
   131b0:	mov	r8, #1
   131b4:	mov	r6, #0
   131b8:	mov	r7, #2
   131bc:	movne	r0, #39	; 0x27
   131c0:	strbne	r0, [r5]
   131c4:	movw	r0, #26340	; 0x66e4
   131c8:	movt	r0, #1
   131cc:	b	131f4 <__assert_fail@plt+0x20f4>
   131d0:	cmp	ip, #0
   131d4:	mov	r8, #1
   131d8:	mov	r2, #1
   131dc:	mov	r7, #5
   131e0:	mov	r6, #0
   131e4:	movne	r0, #34	; 0x22
   131e8:	strbne	r0, [r5]
   131ec:	movw	r0, #25936	; 0x6550
   131f0:	movt	r0, #1
   131f4:	str	r0, [fp, #-88]	; 0xffffffa8
   131f8:	mov	r0, #1
   131fc:	str	r0, [fp, #-72]	; 0xffffffb8
   13200:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13204:	str	r7, [fp, #-68]	; 0xffffffbc
   13208:	str	r6, [fp, #-76]	; 0xffffffb4
   1320c:	str	r2, [sp, #84]	; 0x54
   13210:	cmp	r0, #0
   13214:	movwne	r0, #1
   13218:	and	r1, r0, r6
   1321c:	and	r1, r2, r1
   13220:	str	r1, [sp, #48]	; 0x30
   13224:	sub	r1, r7, #2
   13228:	clz	r1, r1
   1322c:	lsr	r1, r1, #5
   13230:	and	r1, r1, r6
   13234:	str	r1, [sp, #64]	; 0x40
   13238:	subs	r1, r7, #2
   1323c:	eor	r7, r6, #1
   13240:	movwne	r1, #1
   13244:	str	r7, [sp, #92]	; 0x5c
   13248:	orr	r7, r1, r7
   1324c:	and	r1, r1, r2
   13250:	and	r0, r0, r1
   13254:	str	r7, [sp, #68]	; 0x44
   13258:	mov	r7, #0
   1325c:	str	r0, [fp, #-60]	; 0xffffffc4
   13260:	orr	r0, r1, r6
   13264:	ldr	r1, [fp, #16]
   13268:	eor	r0, r0, #1
   1326c:	clz	r1, r1
   13270:	lsr	r1, r1, #5
   13274:	orr	r0, r1, r0
   13278:	str	r0, [fp, #-64]	; 0xffffffc0
   1327c:	eor	r0, r2, #1
   13280:	str	r0, [sp, #52]	; 0x34
   13284:	cmn	r3, #1
   13288:	beq	13298 <__assert_fail@plt+0x2198>
   1328c:	cmp	r7, r3
   13290:	bne	132a4 <__assert_fail@plt+0x21a4>
   13294:	b	13e00 <__assert_fail@plt+0x2d00>
   13298:	ldrb	r0, [r4, r7]
   1329c:	cmp	r0, #0
   132a0:	beq	13e08 <__assert_fail@plt+0x2d08>
   132a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   132a8:	cmp	r0, #0
   132ac:	beq	132f4 <__assert_fail@plt+0x21f4>
   132b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132b4:	add	r5, r7, r0
   132b8:	cmp	r0, #2
   132bc:	bcc	13308 <__assert_fail@plt+0x2208>
   132c0:	mov	r0, #0
   132c4:	cmn	r3, #1
   132c8:	str	r0, [fp, #-56]	; 0xffffffc8
   132cc:	bne	13310 <__assert_fail@plt+0x2210>
   132d0:	mov	r0, r4
   132d4:	mov	r4, ip
   132d8:	mov	r6, lr
   132dc:	bl	10ff8 <strlen@plt>
   132e0:	mov	ip, r4
   132e4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   132e8:	mov	lr, r6
   132ec:	mov	r3, r0
   132f0:	b	13310 <__assert_fail@plt+0x2210>
   132f4:	mov	r0, #0
   132f8:	mov	sl, r3
   132fc:	str	r0, [fp, #-56]	; 0xffffffc8
   13300:	mov	r0, #0
   13304:	b	1337c <__assert_fail@plt+0x227c>
   13308:	mov	r0, #0
   1330c:	str	r0, [fp, #-56]	; 0xffffffc8
   13310:	cmp	r5, r3
   13314:	bls	13328 <__assert_fail@plt+0x2228>
   13318:	ldr	r5, [fp, #-84]	; 0xffffffac
   1331c:	mov	r0, #0
   13320:	mov	sl, r3
   13324:	b	1337c <__assert_fail@plt+0x227c>
   13328:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1332c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13330:	add	r0, r4, r7
   13334:	mov	r5, lr
   13338:	mov	r6, ip
   1333c:	mov	sl, r3
   13340:	bl	10fec <bcmp@plt>
   13344:	ldr	r2, [sp, #92]	; 0x5c
   13348:	cmp	r0, #0
   1334c:	ldr	r3, [fp, #-84]	; 0xffffffac
   13350:	mov	r1, r0
   13354:	movwne	r1, #1
   13358:	orr	r1, r1, r2
   1335c:	tst	r1, #1
   13360:	beq	13e8c <__assert_fail@plt+0x2d8c>
   13364:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13368:	clz	r0, r0
   1336c:	mov	lr, r5
   13370:	mov	ip, r6
   13374:	mov	r5, r3
   13378:	lsr	r0, r0, #5
   1337c:	str	r0, [fp, #-52]	; 0xffffffcc
   13380:	ldrb	r6, [r4, r7]
   13384:	cmp	r6, #126	; 0x7e
   13388:	bhi	138b0 <__assert_fail@plt+0x27b0>
   1338c:	add	r3, pc, #16
   13390:	mov	r9, #1
   13394:	mov	r2, #110	; 0x6e
   13398:	mov	r0, #97	; 0x61
   1339c:	mov	r1, #0
   133a0:	ldr	pc, [r3, r6, lsl #2]
   133a4:	andeq	r3, r1, r4, lsl r7
   133a8:			; <UNDEFINED> instruction: 0x000138b0
   133ac:			; <UNDEFINED> instruction: 0x000138b0
   133b0:			; <UNDEFINED> instruction: 0x000138b0
   133b4:			; <UNDEFINED> instruction: 0x000138b0
   133b8:			; <UNDEFINED> instruction: 0x000138b0
   133bc:			; <UNDEFINED> instruction: 0x000138b0
   133c0:	andeq	r3, r1, r0, lsr r9
   133c4:	strdeq	r3, [r1], -r4
   133c8:	andeq	r3, r1, ip, ror #13
   133cc:	andeq	r3, r1, r0, lsl #14
   133d0:	andeq	r3, r1, r8, lsl r8
   133d4:	andeq	r3, r1, r4, ror #13
   133d8:	strdeq	r3, [r1], -ip
   133dc:			; <UNDEFINED> instruction: 0x000138b0
   133e0:			; <UNDEFINED> instruction: 0x000138b0
   133e4:			; <UNDEFINED> instruction: 0x000138b0
   133e8:			; <UNDEFINED> instruction: 0x000138b0
   133ec:			; <UNDEFINED> instruction: 0x000138b0
   133f0:			; <UNDEFINED> instruction: 0x000138b0
   133f4:			; <UNDEFINED> instruction: 0x000138b0
   133f8:			; <UNDEFINED> instruction: 0x000138b0
   133fc:			; <UNDEFINED> instruction: 0x000138b0
   13400:			; <UNDEFINED> instruction: 0x000138b0
   13404:			; <UNDEFINED> instruction: 0x000138b0
   13408:			; <UNDEFINED> instruction: 0x000138b0
   1340c:			; <UNDEFINED> instruction: 0x000138b0
   13410:			; <UNDEFINED> instruction: 0x000138b0
   13414:			; <UNDEFINED> instruction: 0x000138b0
   13418:			; <UNDEFINED> instruction: 0x000138b0
   1341c:			; <UNDEFINED> instruction: 0x000138b0
   13420:			; <UNDEFINED> instruction: 0x000138b0
   13424:	muleq	r1, r4, r6
   13428:	muleq	r1, r8, r6
   1342c:	muleq	r1, r8, r6
   13430:	andeq	r3, r1, ip, ror r6
   13434:	muleq	r1, r8, r6
   13438:	andeq	r3, r1, r0, lsr #11
   1343c:	muleq	r1, r8, r6
   13440:	andeq	r3, r1, r0, lsr #16
   13444:	muleq	r1, r8, r6
   13448:	muleq	r1, r8, r6
   1344c:	muleq	r1, r8, r6
   13450:	andeq	r3, r1, r0, lsr #11
   13454:	andeq	r3, r1, r0, lsr #11
   13458:	andeq	r3, r1, r0, lsr #11
   1345c:	andeq	r3, r1, r0, lsr #11
   13460:	andeq	r3, r1, r0, lsr #11
   13464:	andeq	r3, r1, r0, lsr #11
   13468:	andeq	r3, r1, r0, lsr #11
   1346c:	andeq	r3, r1, r0, lsr #11
   13470:	andeq	r3, r1, r0, lsr #11
   13474:	andeq	r3, r1, r0, lsr #11
   13478:	andeq	r3, r1, r0, lsr #11
   1347c:	andeq	r3, r1, r0, lsr #11
   13480:	andeq	r3, r1, r0, lsr #11
   13484:	andeq	r3, r1, r0, lsr #11
   13488:	andeq	r3, r1, r0, lsr #11
   1348c:	andeq	r3, r1, r0, lsr #11
   13490:	muleq	r1, r8, r6
   13494:	muleq	r1, r8, r6
   13498:	muleq	r1, r8, r6
   1349c:	muleq	r1, r8, r6
   134a0:	andeq	r3, r1, ip, ror #15
   134a4:			; <UNDEFINED> instruction: 0x000138b0
   134a8:	andeq	r3, r1, r0, lsr #11
   134ac:	andeq	r3, r1, r0, lsr #11
   134b0:	andeq	r3, r1, r0, lsr #11
   134b4:	andeq	r3, r1, r0, lsr #11
   134b8:	andeq	r3, r1, r0, lsr #11
   134bc:	andeq	r3, r1, r0, lsr #11
   134c0:	andeq	r3, r1, r0, lsr #11
   134c4:	andeq	r3, r1, r0, lsr #11
   134c8:	andeq	r3, r1, r0, lsr #11
   134cc:	andeq	r3, r1, r0, lsr #11
   134d0:	andeq	r3, r1, r0, lsr #11
   134d4:	andeq	r3, r1, r0, lsr #11
   134d8:	andeq	r3, r1, r0, lsr #11
   134dc:	andeq	r3, r1, r0, lsr #11
   134e0:	andeq	r3, r1, r0, lsr #11
   134e4:	andeq	r3, r1, r0, lsr #11
   134e8:	andeq	r3, r1, r0, lsr #11
   134ec:	andeq	r3, r1, r0, lsr #11
   134f0:	andeq	r3, r1, r0, lsr #11
   134f4:	andeq	r3, r1, r0, lsr #11
   134f8:	andeq	r3, r1, r0, lsr #11
   134fc:	andeq	r3, r1, r0, lsr #11
   13500:	andeq	r3, r1, r0, lsr #11
   13504:	andeq	r3, r1, r0, lsr #11
   13508:	andeq	r3, r1, r0, lsr #11
   1350c:	andeq	r3, r1, r0, lsr #11
   13510:	muleq	r1, r8, r6
   13514:	andeq	r3, r1, r0, asr #13
   13518:	andeq	r3, r1, r0, lsr #11
   1351c:	muleq	r1, r8, r6
   13520:	andeq	r3, r1, r0, lsr #11
   13524:	muleq	r1, r8, r6
   13528:	andeq	r3, r1, r0, lsr #11
   1352c:	andeq	r3, r1, r0, lsr #11
   13530:	andeq	r3, r1, r0, lsr #11
   13534:	andeq	r3, r1, r0, lsr #11
   13538:	andeq	r3, r1, r0, lsr #11
   1353c:	andeq	r3, r1, r0, lsr #11
   13540:	andeq	r3, r1, r0, lsr #11
   13544:	andeq	r3, r1, r0, lsr #11
   13548:	andeq	r3, r1, r0, lsr #11
   1354c:	andeq	r3, r1, r0, lsr #11
   13550:	andeq	r3, r1, r0, lsr #11
   13554:	andeq	r3, r1, r0, lsr #11
   13558:	andeq	r3, r1, r0, lsr #11
   1355c:	andeq	r3, r1, r0, lsr #11
   13560:	andeq	r3, r1, r0, lsr #11
   13564:	andeq	r3, r1, r0, lsr #11
   13568:	andeq	r3, r1, r0, lsr #11
   1356c:	andeq	r3, r1, r0, lsr #11
   13570:	andeq	r3, r1, r0, lsr #11
   13574:	andeq	r3, r1, r0, lsr #11
   13578:	andeq	r3, r1, r0, lsr #11
   1357c:	andeq	r3, r1, r0, lsr #11
   13580:	andeq	r3, r1, r0, lsr #11
   13584:	andeq	r3, r1, r0, lsr #11
   13588:	andeq	r3, r1, r0, lsr #11
   1358c:	andeq	r3, r1, r0, lsr #11
   13590:	andeq	r3, r1, r4, asr r6
   13594:	muleq	r1, r8, r6
   13598:	andeq	r3, r1, r4, asr r6
   1359c:	andeq	r3, r1, ip, ror r6
   135a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135a4:	tst	r0, #1
   135a8:	bne	135d4 <__assert_fail@plt+0x24d4>
   135ac:	ldr	r1, [fp, #16]
   135b0:	ubfx	r0, r6, #5, #3
   135b4:	mov	r2, #1
   135b8:	ldr	r0, [r1, r0, lsl #2]
   135bc:	and	r1, r6, #31
   135c0:	tst	r0, r2, lsl r1
   135c4:	beq	135d4 <__assert_fail@plt+0x24d4>
   135c8:	mov	r0, r6
   135cc:	mov	r1, r9
   135d0:	b	135e8 <__assert_fail@plt+0x24e8>
   135d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   135d8:	mov	r1, r9
   135dc:	cmp	r0, #0
   135e0:	mov	r0, r6
   135e4:	beq	13d34 <__assert_fail@plt+0x2c34>
   135e8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   135ec:	tst	r2, #1
   135f0:	bne	13ed0 <__assert_fail@plt+0x2dd0>
   135f4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   135f8:	subs	r2, r2, #2
   135fc:	movwne	r2, #1
   13600:	orr	r2, r2, lr
   13604:	tst	r2, #1
   13608:	bne	13640 <__assert_fail@plt+0x2540>
   1360c:	cmp	r8, ip
   13610:	mov	lr, #1
   13614:	movcc	r2, #39	; 0x27
   13618:	strbcc	r2, [r5, r8]
   1361c:	add	r2, r8, #1
   13620:	cmp	r2, ip
   13624:	movcc	r3, #36	; 0x24
   13628:	strbcc	r3, [r5, r2]
   1362c:	add	r2, r8, #2
   13630:	add	r8, r8, #3
   13634:	cmp	r2, ip
   13638:	movcc	r3, #39	; 0x27
   1363c:	strbcc	r3, [r5, r2]
   13640:	cmp	r8, ip
   13644:	movcc	r2, #92	; 0x5c
   13648:	strbcc	r2, [r5, r8]
   1364c:	add	r8, r8, #1
   13650:	b	13d74 <__assert_fail@plt+0x2c74>
   13654:	cmp	sl, #1
   13658:	beq	1367c <__assert_fail@plt+0x257c>
   1365c:	mov	r9, #0
   13660:	cmn	sl, #1
   13664:	bne	13688 <__assert_fail@plt+0x2588>
   13668:	ldrb	r0, [r4, #1]
   1366c:	cmp	r0, #0
   13670:	beq	1367c <__assert_fail@plt+0x257c>
   13674:	mvn	sl, #0
   13678:	b	13688 <__assert_fail@plt+0x2588>
   1367c:	mov	r9, #0
   13680:	cmp	r7, #0
   13684:	beq	13694 <__assert_fail@plt+0x2594>
   13688:	mov	r0, #0
   1368c:	str	r0, [fp, #-56]	; 0xffffffc8
   13690:	b	135a0 <__assert_fail@plt+0x24a0>
   13694:	mov	r1, #1
   13698:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1369c:	cmp	r0, #2
   136a0:	bne	136b8 <__assert_fail@plt+0x25b8>
   136a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   136a8:	mov	r9, r1
   136ac:	tst	r0, #1
   136b0:	beq	135a0 <__assert_fail@plt+0x24a0>
   136b4:	b	13ed0 <__assert_fail@plt+0x2dd0>
   136b8:	mov	r9, r1
   136bc:	b	135a0 <__assert_fail@plt+0x24a0>
   136c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136c4:	cmp	r0, #2
   136c8:	bne	1390c <__assert_fail@plt+0x280c>
   136cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   136d0:	tst	r0, #1
   136d4:	bne	13ed0 <__assert_fail@plt+0x2dd0>
   136d8:	mov	r0, #0
   136dc:	str	r0, [fp, #-56]	; 0xffffffc8
   136e0:	b	13924 <__assert_fail@plt+0x2824>
   136e4:	mov	r0, #102	; 0x66
   136e8:	b	13930 <__assert_fail@plt+0x2830>
   136ec:	mov	r2, #116	; 0x74
   136f0:	b	13700 <__assert_fail@plt+0x2600>
   136f4:	mov	r0, #98	; 0x62
   136f8:	b	13930 <__assert_fail@plt+0x2830>
   136fc:	mov	r2, #114	; 0x72
   13700:	ldr	r0, [sp, #68]	; 0x44
   13704:	tst	r0, #1
   13708:	mov	r0, r2
   1370c:	bne	13930 <__assert_fail@plt+0x2830>
   13710:	b	13ed0 <__assert_fail@plt+0x2dd0>
   13714:	ldr	r0, [sp, #84]	; 0x54
   13718:	tst	r0, #1
   1371c:	beq	13950 <__assert_fail@plt+0x2850>
   13720:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13724:	tst	r0, #1
   13728:	bne	13fbc <__assert_fail@plt+0x2ebc>
   1372c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13730:	mov	r2, sl
   13734:	subs	r0, r0, #2
   13738:	movwne	r0, #1
   1373c:	orr	r0, r0, lr
   13740:	tst	r0, #1
   13744:	bne	1377c <__assert_fail@plt+0x267c>
   13748:	cmp	r8, ip
   1374c:	mov	lr, #1
   13750:	movcc	r0, #39	; 0x27
   13754:	strbcc	r0, [r5, r8]
   13758:	add	r0, r8, #1
   1375c:	cmp	r0, ip
   13760:	movcc	r1, #36	; 0x24
   13764:	strbcc	r1, [r5, r0]
   13768:	add	r0, r8, #2
   1376c:	add	r8, r8, #3
   13770:	cmp	r0, ip
   13774:	movcc	r1, #39	; 0x27
   13778:	strbcc	r1, [r5, r0]
   1377c:	mov	r1, #1
   13780:	cmp	r8, ip
   13784:	mov	r9, #0
   13788:	mov	r6, #48	; 0x30
   1378c:	str	r1, [fp, #-56]	; 0xffffffc8
   13790:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13794:	movcc	r0, #92	; 0x5c
   13798:	strbcc	r0, [r5, r8]
   1379c:	add	r0, r8, #1
   137a0:	cmp	r1, #2
   137a4:	beq	13aac <__assert_fail@plt+0x29ac>
   137a8:	add	r1, r7, #1
   137ac:	cmp	r1, r2
   137b0:	bcs	13aac <__assert_fail@plt+0x29ac>
   137b4:	ldrb	r1, [r4, r1]
   137b8:	sub	r1, r1, #48	; 0x30
   137bc:	uxtb	r1, r1
   137c0:	cmp	r1, #9
   137c4:	bhi	13aac <__assert_fail@plt+0x29ac>
   137c8:	cmp	r0, ip
   137cc:	movcc	r1, #48	; 0x30
   137d0:	strbcc	r1, [r5, r0]
   137d4:	add	r0, r8, #2
   137d8:	add	r8, r8, #3
   137dc:	cmp	r0, ip
   137e0:	movcc	r1, #48	; 0x30
   137e4:	strbcc	r1, [r5, r0]
   137e8:	b	135a0 <__assert_fail@plt+0x24a0>
   137ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   137f0:	mov	r6, #63	; 0x3f
   137f4:	cmp	r0, #5
   137f8:	beq	13ab4 <__assert_fail@plt+0x29b4>
   137fc:	mov	r1, #0
   13800:	cmp	r0, #2
   13804:	str	r1, [fp, #-56]	; 0xffffffc8
   13808:	bne	13b68 <__assert_fail@plt+0x2a68>
   1380c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13810:	mov	r9, #0
   13814:	b	136ac <__assert_fail@plt+0x25ac>
   13818:	mov	r0, #118	; 0x76
   1381c:	b	13930 <__assert_fail@plt+0x2830>
   13820:	mov	r0, #1
   13824:	mov	r6, #39	; 0x27
   13828:	str	r0, [sp, #60]	; 0x3c
   1382c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13830:	cmp	r0, #2
   13834:	bne	138a8 <__assert_fail@plt+0x27a8>
   13838:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1383c:	tst	r0, #1
   13840:	bne	13ed0 <__assert_fail@plt+0x2dd0>
   13844:	ldr	r2, [sp, #56]	; 0x38
   13848:	clz	r1, ip
   1384c:	mov	lr, #0
   13850:	lsr	r1, r1, #5
   13854:	cmp	r2, #0
   13858:	mov	r0, r2
   1385c:	movwne	r0, #1
   13860:	orrs	r0, r0, r1
   13864:	moveq	r2, ip
   13868:	moveq	ip, r0
   1386c:	cmp	r8, ip
   13870:	str	r2, [sp, #56]	; 0x38
   13874:	movcc	r0, #39	; 0x27
   13878:	strbcc	r0, [r5, r8]
   1387c:	add	r0, r8, #1
   13880:	cmp	r0, ip
   13884:	movcc	r1, #92	; 0x5c
   13888:	strbcc	r1, [r5, r0]
   1388c:	add	r0, r8, #2
   13890:	add	r8, r8, #3
   13894:	cmp	r0, ip
   13898:	movcc	r1, #39	; 0x27
   1389c:	strbcc	r1, [r5, r0]
   138a0:	mov	r0, #0
   138a4:	str	r0, [fp, #-56]	; 0xffffffc8
   138a8:	mov	r9, #1
   138ac:	b	135a0 <__assert_fail@plt+0x24a0>
   138b0:	ldr	r0, [sp, #40]	; 0x28
   138b4:	str	lr, [sp, #44]	; 0x2c
   138b8:	str	ip, [sp, #88]	; 0x58
   138bc:	cmp	r0, #1
   138c0:	bne	13970 <__assert_fail@plt+0x2870>
   138c4:	str	sl, [sp, #36]	; 0x24
   138c8:	bl	10fd4 <__ctype_b_loc@plt>
   138cc:	ldr	r0, [r0]
   138d0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   138d4:	mov	r1, #1
   138d8:	add	r0, r0, r6, lsl #1
   138dc:	ldrb	r0, [r0, #1]
   138e0:	ubfx	r9, r0, #6, #1
   138e4:	ldr	r0, [sp, #52]	; 0x34
   138e8:	ldr	lr, [sp, #44]	; 0x2c
   138ec:	cmp	r1, #1
   138f0:	orr	r3, r9, r0
   138f4:	bhi	13b70 <__assert_fail@plt+0x2a70>
   138f8:	tst	r3, #1
   138fc:	beq	13b70 <__assert_fail@plt+0x2a70>
   13900:	ldr	sl, [sp, #36]	; 0x24
   13904:	ldr	ip, [sp, #88]	; 0x58
   13908:	b	135a0 <__assert_fail@plt+0x24a0>
   1390c:	ldr	r1, [sp, #48]	; 0x30
   13910:	mov	r0, #0
   13914:	str	r0, [fp, #-56]	; 0xffffffc8
   13918:	mov	r0, #92	; 0x5c
   1391c:	cmp	r1, #0
   13920:	beq	13930 <__assert_fail@plt+0x2830>
   13924:	mov	r6, #92	; 0x5c
   13928:	mov	r9, #0
   1392c:	b	13d34 <__assert_fail@plt+0x2c34>
   13930:	mov	r1, #0
   13934:	mov	r9, #0
   13938:	str	r1, [fp, #-56]	; 0xffffffc8
   1393c:	ldr	r1, [sp, #84]	; 0x54
   13940:	tst	r1, #1
   13944:	mov	r1, #0
   13948:	beq	135a0 <__assert_fail@plt+0x24a0>
   1394c:	b	135e8 <__assert_fail@plt+0x24e8>
   13950:	ldr	r0, [sp, #32]
   13954:	mov	r6, #0
   13958:	mov	r9, #0
   1395c:	cmp	r0, #0
   13960:	mov	r0, #0
   13964:	str	r0, [fp, #-56]	; 0xffffffc8
   13968:	beq	135a0 <__assert_fail@plt+0x24a0>
   1396c:	b	13d8c <__assert_fail@plt+0x2c8c>
   13970:	mov	r0, #0
   13974:	cmn	sl, #1
   13978:	sub	r3, fp, #40	; 0x28
   1397c:	str	r0, [fp, #-36]	; 0xffffffdc
   13980:	str	r0, [fp, #-40]	; 0xffffffd8
   13984:	bne	1399c <__assert_fail@plt+0x289c>
   13988:	mov	r0, r4
   1398c:	bl	10ff8 <strlen@plt>
   13990:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13994:	sub	r3, fp, #40	; 0x28
   13998:	mov	sl, r0
   1399c:	ldr	r0, [sp, #72]	; 0x48
   139a0:	mov	r9, #1
   139a4:	mov	r1, #0
   139a8:	str	sl, [sp, #36]	; 0x24
   139ac:	add	r0, r0, r7
   139b0:	str	r0, [sp, #20]
   139b4:	add	r0, r1, r7
   139b8:	str	r1, [sp, #24]
   139bc:	add	r1, r4, r0
   139c0:	mov	r4, r0
   139c4:	sub	r2, sl, r0
   139c8:	sub	r0, fp, #44	; 0x2c
   139cc:	bl	15b04 <__assert_fail@plt+0x4a04>
   139d0:	cmp	r0, #0
   139d4:	beq	13de0 <__assert_fail@plt+0x2ce0>
   139d8:	cmn	r0, #1
   139dc:	beq	13d98 <__assert_fail@plt+0x2c98>
   139e0:	ldr	r2, [sp, #36]	; 0x24
   139e4:	cmn	r0, #2
   139e8:	beq	13da0 <__assert_fail@plt+0x2ca0>
   139ec:	ldr	r2, [sp, #64]	; 0x40
   139f0:	ldr	ip, [sp, #88]	; 0x58
   139f4:	ldr	r4, [sp, #84]	; 0x54
   139f8:	ldr	lr, [fp, #-48]	; 0xffffffd0
   139fc:	cmp	r0, #2
   13a00:	mov	r1, #0
   13a04:	movwcc	r1, #1
   13a08:	eor	r2, r2, #1
   13a0c:	orrs	r1, r2, r1
   13a10:	bne	13a60 <__assert_fail@plt+0x2960>
   13a14:	ldr	r1, [sp, #24]
   13a18:	ldr	r2, [sp, #20]
   13a1c:	add	r1, r2, r1
   13a20:	sub	r2, r0, #1
   13a24:	ldrb	r3, [r1]
   13a28:	sub	r5, r3, #94	; 0x5e
   13a2c:	cmp	r5, #30
   13a30:	bhi	13a48 <__assert_fail@plt+0x2948>
   13a34:	mov	r4, #1
   13a38:	mov	sl, #1073741829	; 0x40000005
   13a3c:	tst	sl, r4, lsl r5
   13a40:	ldr	r4, [sp, #84]	; 0x54
   13a44:	bne	13ea8 <__assert_fail@plt+0x2da8>
   13a48:	sub	r3, r3, #91	; 0x5b
   13a4c:	cmp	r3, #2
   13a50:	bcc	13ea8 <__assert_fail@plt+0x2da8>
   13a54:	add	r1, r1, #1
   13a58:	subs	r2, r2, #1
   13a5c:	bne	13a24 <__assert_fail@plt+0x2924>
   13a60:	ldr	r5, [sp, #24]
   13a64:	str	lr, [fp, #-48]	; 0xffffffd0
   13a68:	add	r5, r0, r5
   13a6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13a70:	bl	10f44 <iswprint@plt>
   13a74:	cmp	r0, #0
   13a78:	sub	r4, fp, #40	; 0x28
   13a7c:	movwne	r0, #1
   13a80:	and	r9, r9, r0
   13a84:	mov	r0, r4
   13a88:	bl	10efc <mbsinit@plt>
   13a8c:	mov	r1, r5
   13a90:	mov	r3, r4
   13a94:	ldr	sl, [sp, #36]	; 0x24
   13a98:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a9c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13aa0:	cmp	r0, #0
   13aa4:	beq	139b4 <__assert_fail@plt+0x28b4>
   13aa8:	b	138e4 <__assert_fail@plt+0x27e4>
   13aac:	mov	r8, r0
   13ab0:	b	135a0 <__assert_fail@plt+0x24a0>
   13ab4:	mov	r0, #0
   13ab8:	str	r0, [fp, #-56]	; 0xffffffc8
   13abc:	ldr	r0, [sp, #28]
   13ac0:	cmp	r0, #0
   13ac4:	beq	13b68 <__assert_fail@plt+0x2a68>
   13ac8:	add	r0, r7, #2
   13acc:	mov	r1, sl
   13ad0:	cmp	r0, sl
   13ad4:	bcs	13b68 <__assert_fail@plt+0x2a68>
   13ad8:	add	r1, r7, r4
   13adc:	ldrb	r1, [r1, #1]
   13ae0:	cmp	r1, #63	; 0x3f
   13ae4:	bne	13b68 <__assert_fail@plt+0x2a68>
   13ae8:	ldrb	r9, [r4, r0]
   13aec:	sub	r2, r9, #33	; 0x21
   13af0:	cmp	r2, #29
   13af4:	bhi	13b68 <__assert_fail@plt+0x2a68>
   13af8:	mov	r1, r4
   13afc:	movw	r4, #20929	; 0x51c1
   13b00:	mov	r3, #1
   13b04:	movt	r4, #14336	; 0x3800
   13b08:	tst	r4, r3, lsl r2
   13b0c:	beq	13df4 <__assert_fail@plt+0x2cf4>
   13b10:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b14:	tst	r2, #1
   13b18:	bne	13fc4 <__assert_fail@plt+0x2ec4>
   13b1c:	cmp	r8, ip
   13b20:	mov	r4, r1
   13b24:	mov	r7, r0
   13b28:	mov	r6, r9
   13b2c:	movcc	r2, #63	; 0x3f
   13b30:	strbcc	r2, [r5, r8]
   13b34:	add	r2, r8, #1
   13b38:	cmp	r2, ip
   13b3c:	movcc	r3, #34	; 0x22
   13b40:	strbcc	r3, [r5, r2]
   13b44:	add	r2, r8, #2
   13b48:	cmp	r2, ip
   13b4c:	movcc	r3, #34	; 0x22
   13b50:	strbcc	r3, [r5, r2]
   13b54:	add	r2, r8, #3
   13b58:	add	r8, r8, #4
   13b5c:	cmp	r2, ip
   13b60:	movcc	r3, #63	; 0x3f
   13b64:	strbcc	r3, [r5, r2]
   13b68:	mov	r9, #0
   13b6c:	b	135a0 <__assert_fail@plt+0x24a0>
   13b70:	ldr	sl, [sp, #36]	; 0x24
   13b74:	add	r0, r1, r7
   13b78:	mov	r2, #0
   13b7c:	str	r3, [sp, #24]
   13b80:	str	r0, [fp, #-56]	; 0xffffffc8
   13b84:	tst	r3, #1
   13b88:	beq	13bb4 <__assert_fail@plt+0x2ab4>
   13b8c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b90:	tst	r0, #1
   13b94:	beq	13c7c <__assert_fail@plt+0x2b7c>
   13b98:	ldr	r1, [sp, #88]	; 0x58
   13b9c:	mov	r0, r3
   13ba0:	cmp	r8, r1
   13ba4:	movcc	r1, #92	; 0x5c
   13ba8:	strbcc	r1, [r5, r8]
   13bac:	add	r8, r8, #1
   13bb0:	b	13c80 <__assert_fail@plt+0x2b80>
   13bb4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13bb8:	tst	r1, #1
   13bbc:	bne	13ecc <__assert_fail@plt+0x2dcc>
   13bc0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13bc4:	subs	r2, r1, #2
   13bc8:	movwne	r2, #1
   13bcc:	orr	r2, r2, lr
   13bd0:	tst	r2, #1
   13bd4:	bne	13c18 <__assert_fail@plt+0x2b18>
   13bd8:	ldr	r1, [sp, #88]	; 0x58
   13bdc:	add	r2, r8, #1
   13be0:	mov	lr, #1
   13be4:	cmp	r8, r1
   13be8:	movcc	r1, #39	; 0x27
   13bec:	strbcc	r1, [r5, r8]
   13bf0:	ldr	r1, [sp, #88]	; 0x58
   13bf4:	cmp	r2, r1
   13bf8:	movcc	r1, #36	; 0x24
   13bfc:	strbcc	r1, [r5, r2]
   13c00:	ldr	r1, [sp, #88]	; 0x58
   13c04:	add	r2, r8, #2
   13c08:	add	r8, r8, #3
   13c0c:	cmp	r2, r1
   13c10:	movcc	r1, #39	; 0x27
   13c14:	strbcc	r1, [r5, r2]
   13c18:	ldr	r1, [sp, #88]	; 0x58
   13c1c:	add	r2, r8, #1
   13c20:	mov	r0, r3
   13c24:	cmp	r8, r1
   13c28:	movcc	r1, #92	; 0x5c
   13c2c:	strbcc	r1, [r5, r8]
   13c30:	ldr	r1, [sp, #88]	; 0x58
   13c34:	cmp	r2, r1
   13c38:	bcs	13c4c <__assert_fail@plt+0x2b4c>
   13c3c:	uxtb	r3, r6
   13c40:	mov	r1, #48	; 0x30
   13c44:	orr	r3, r1, r3, lsr #6
   13c48:	strb	r3, [r5, r2]
   13c4c:	ldr	r1, [sp, #88]	; 0x58
   13c50:	add	r2, r8, #2
   13c54:	add	r8, r8, #3
   13c58:	cmp	r2, r1
   13c5c:	lsrcc	r3, r6, #3
   13c60:	movcc	r1, #6
   13c64:	bficc	r3, r1, #3, #29
   13c68:	mov	r1, #6
   13c6c:	bfi	r6, r1, #3, #29
   13c70:	strbcc	r3, [r5, r2]
   13c74:	mov	r2, #1
   13c78:	b	13c88 <__assert_fail@plt+0x2b88>
   13c7c:	mov	r0, r3
   13c80:	mov	r1, #0
   13c84:	str	r1, [fp, #-52]	; 0xffffffcc
   13c88:	mov	ip, r2
   13c8c:	and	r1, r2, #1
   13c90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c94:	add	r3, r7, #1
   13c98:	cmp	r2, r3
   13c9c:	bls	13d24 <__assert_fail@plt+0x2c24>
   13ca0:	cmp	r1, #0
   13ca4:	mvn	r5, lr
   13ca8:	movwne	r1, #1
   13cac:	orr	r5, r5, r1
   13cb0:	tst	r5, #1
   13cb4:	bne	13cf8 <__assert_fail@plt+0x2bf8>
   13cb8:	ldr	r1, [sp, #88]	; 0x58
   13cbc:	ldr	r5, [fp, #-84]	; 0xffffffac
   13cc0:	mov	r2, r4
   13cc4:	ldr	r4, [sp, #88]	; 0x58
   13cc8:	ldr	r0, [sp, #24]
   13ccc:	mov	lr, #0
   13cd0:	cmp	r8, r1
   13cd4:	movcc	r1, #39	; 0x27
   13cd8:	strbcc	r1, [r5, r8]
   13cdc:	add	r1, r8, #1
   13ce0:	add	r8, r8, #2
   13ce4:	cmp	r1, r4
   13ce8:	movcc	r4, #39	; 0x27
   13cec:	strbcc	r4, [r5, r1]
   13cf0:	mov	r4, r2
   13cf4:	b	13cfc <__assert_fail@plt+0x2bfc>
   13cf8:	ldr	r5, [fp, #-84]	; 0xffffffac
   13cfc:	ldr	r1, [sp, #88]	; 0x58
   13d00:	mov	r2, ip
   13d04:	cmp	r8, r1
   13d08:	ldr	r1, [sp, #72]	; 0x48
   13d0c:	strbcc	r6, [r5, r8]
   13d10:	add	r8, r8, #1
   13d14:	ldrb	r6, [r1, r7]
   13d18:	mov	r7, r3
   13d1c:	mov	r3, r0
   13d20:	b	13b84 <__assert_fail@plt+0x2a84>
   13d24:	ldr	ip, [sp, #88]	; 0x58
   13d28:	cmp	r1, #0
   13d2c:	movwne	r1, #1
   13d30:	str	r1, [fp, #-56]	; 0xffffffc8
   13d34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d38:	cmp	r0, #0
   13d3c:	bne	13d6c <__assert_fail@plt+0x2c6c>
   13d40:	tst	lr, #1
   13d44:	beq	13d6c <__assert_fail@plt+0x2c6c>
   13d48:	cmp	r8, ip
   13d4c:	mov	lr, #0
   13d50:	movcc	r0, #39	; 0x27
   13d54:	strbcc	r0, [r5, r8]
   13d58:	add	r0, r8, #1
   13d5c:	add	r8, r8, #2
   13d60:	cmp	r0, ip
   13d64:	movcc	r1, #39	; 0x27
   13d68:	strbcc	r1, [r5, r0]
   13d6c:	mov	r1, r9
   13d70:	mov	r0, r6
   13d74:	cmp	r8, ip
   13d78:	strbcc	r0, [r5, r8]
   13d7c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13d80:	add	r8, r8, #1
   13d84:	and	r0, r0, r1
   13d88:	str	r0, [fp, #-48]	; 0xffffffd0
   13d8c:	mov	r3, sl
   13d90:	add	r7, r7, #1
   13d94:	b	13284 <__assert_fail@plt+0x2184>
   13d98:	mov	r9, #0
   13d9c:	b	13de0 <__assert_fail@plt+0x2ce0>
   13da0:	mov	r9, #0
   13da4:	cmp	r2, r4
   13da8:	bls	13de0 <__assert_fail@plt+0x2ce0>
   13dac:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13db0:	ldr	r1, [sp, #24]
   13db4:	add	r0, r4, r7
   13db8:	mov	r3, r1
   13dbc:	ldrb	r1, [r0, r1]
   13dc0:	cmp	r1, #0
   13dc4:	beq	13dec <__assert_fail@plt+0x2cec>
   13dc8:	add	r3, r3, #1
   13dcc:	add	r1, r7, r3
   13dd0:	cmp	r1, r2
   13dd4:	mov	r1, r3
   13dd8:	bcc	13db8 <__assert_fail@plt+0x2cb8>
   13ddc:	b	138e4 <__assert_fail@plt+0x27e4>
   13de0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13de4:	ldr	r1, [sp, #24]
   13de8:	b	138e4 <__assert_fail@plt+0x27e4>
   13dec:	mov	r1, r3
   13df0:	b	138e4 <__assert_fail@plt+0x27e4>
   13df4:	mov	r9, #0
   13df8:	mov	r4, r1
   13dfc:	b	135a0 <__assert_fail@plt+0x24a0>
   13e00:	mov	sl, r7
   13e04:	b	13e0c <__assert_fail@plt+0x2d0c>
   13e08:	mvn	sl, #0
   13e0c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13e10:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13e14:	eor	r0, r1, #2
   13e18:	orr	r0, r0, r8
   13e1c:	clz	r0, r0
   13e20:	lsr	r0, r0, #5
   13e24:	tst	r2, r0
   13e28:	bne	13ed0 <__assert_fail@plt+0x2dd0>
   13e2c:	subs	r0, r1, #2
   13e30:	movwne	r0, #1
   13e34:	orr	r0, r2, r0
   13e38:	tst	r0, #1
   13e3c:	ldreq	r0, [sp, #60]	; 0x3c
   13e40:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   13e44:	eoreq	r0, r0, #1
   13e48:	tsteq	r0, #1
   13e4c:	bne	13f64 <__assert_fail@plt+0x2e64>
   13e50:	tst	r1, #1
   13e54:	bne	13f30 <__assert_fail@plt+0x2e30>
   13e58:	ldr	r6, [sp, #56]	; 0x38
   13e5c:	mov	r9, #0
   13e60:	cmp	r6, #0
   13e64:	beq	13f5c <__assert_fail@plt+0x2e5c>
   13e68:	ldr	r0, [sp, #84]	; 0x54
   13e6c:	mov	r1, #0
   13e70:	mov	r7, #2
   13e74:	cmp	ip, #0
   13e78:	str	r1, [fp, #-48]	; 0xffffffd0
   13e7c:	mov	r1, #0
   13e80:	str	r1, [fp, #-76]	; 0xffffffb4
   13e84:	beq	12fec <__assert_fail@plt+0x1eec>
   13e88:	b	13f64 <__assert_fail@plt+0x2e64>
   13e8c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13e90:	ldr	r1, [fp, #12]
   13e94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13e98:	mov	r5, r3
   13e9c:	mov	ip, r6
   13ea0:	mov	r3, sl
   13ea4:	b	13ef4 <__assert_fail@plt+0x2df4>
   13ea8:	tst	r4, #1
   13eac:	ldr	r5, [fp, #-84]	; 0xffffffac
   13eb0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13eb4:	ldr	r1, [fp, #12]
   13eb8:	ldr	r3, [sp, #36]	; 0x24
   13ebc:	mov	r0, #2
   13ec0:	movwne	r0, #4
   13ec4:	mov	r2, r0
   13ec8:	b	13ef4 <__assert_fail@plt+0x2df4>
   13ecc:	ldr	ip, [sp, #88]	; 0x58
   13ed0:	ldr	r1, [sp, #84]	; 0x54
   13ed4:	mov	r0, #2
   13ed8:	tst	r1, #1
   13edc:	movwne	r0, #4
   13ee0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ee4:	ldr	r1, [fp, #12]
   13ee8:	mov	r3, sl
   13eec:	cmp	r2, #2
   13ef0:	moveq	r2, r0
   13ef4:	mov	r0, #0
   13ef8:	bic	r1, r1, #2
   13efc:	str	r2, [sp]
   13f00:	mov	r2, r4
   13f04:	str	r0, [sp, #8]
   13f08:	ldr	r0, [sp, #76]	; 0x4c
   13f0c:	str	r1, [sp, #4]
   13f10:	mov	r1, ip
   13f14:	str	r0, [sp, #12]
   13f18:	ldr	r0, [sp, #80]	; 0x50
   13f1c:	str	r0, [sp, #16]
   13f20:	mov	r0, r5
   13f24:	bl	12f60 <__assert_fail@plt+0x1e60>
   13f28:	mov	r8, r0
   13f2c:	b	13fb0 <__assert_fail@plt+0x2eb0>
   13f30:	mov	r0, #5
   13f34:	ldr	r1, [sp, #56]	; 0x38
   13f38:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13f3c:	mov	r3, sl
   13f40:	str	r0, [sp]
   13f44:	ldr	r0, [fp, #12]
   13f48:	str	r0, [sp, #4]
   13f4c:	ldr	r0, [fp, #16]
   13f50:	str	r0, [sp, #8]
   13f54:	ldr	r0, [sp, #76]	; 0x4c
   13f58:	b	13f14 <__assert_fail@plt+0x2e14>
   13f5c:	mov	r0, #0
   13f60:	str	r0, [fp, #-76]	; 0xffffffb4
   13f64:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13f68:	cmp	r1, #0
   13f6c:	beq	13fa4 <__assert_fail@plt+0x2ea4>
   13f70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f74:	tst	r0, #1
   13f78:	bne	13fa4 <__assert_fail@plt+0x2ea4>
   13f7c:	ldrb	r0, [r1]
   13f80:	cmp	r0, #0
   13f84:	beq	13fa4 <__assert_fail@plt+0x2ea4>
   13f88:	add	r1, r1, #1
   13f8c:	cmp	r8, ip
   13f90:	strbcc	r0, [r5, r8]
   13f94:	add	r8, r8, #1
   13f98:	ldrb	r0, [r1], #1
   13f9c:	cmp	r0, #0
   13fa0:	bne	13f8c <__assert_fail@plt+0x2e8c>
   13fa4:	cmp	r8, ip
   13fa8:	movcc	r0, #0
   13fac:	strbcc	r0, [r5, r8]
   13fb0:	mov	r0, r8
   13fb4:	sub	sp, fp, #28
   13fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fbc:	mov	r0, #4
   13fc0:	b	13ee0 <__assert_fail@plt+0x2de0>
   13fc4:	mov	r4, r1
   13fc8:	b	13ed0 <__assert_fail@plt+0x2dd0>
   13fcc:	bl	110e8 <abort@plt>
   13fd0:	mov	r3, r2
   13fd4:	mov	r2, #0
   13fd8:	b	13fdc <__assert_fail@plt+0x2edc>
   13fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fe0:	add	fp, sp, #28
   13fe4:	sub	sp, sp, #36	; 0x24
   13fe8:	movw	r8, #62112	; 0xf2a0
   13fec:	cmp	r3, #0
   13ff0:	mov	r4, r2
   13ff4:	str	r2, [sp, #24]
   13ff8:	mov	r5, r1
   13ffc:	mov	r6, r0
   14000:	str	r0, [sp, #20]
   14004:	movt	r8, #2
   14008:	movne	r8, r3
   1400c:	bl	11010 <__errno_location@plt>
   14010:	str	r0, [sp, #28]
   14014:	ldr	r1, [r8, #40]	; 0x28
   14018:	ldr	r2, [r8, #44]	; 0x2c
   1401c:	ldr	r7, [r0]
   14020:	cmp	r4, #0
   14024:	add	sl, r8, #8
   14028:	mov	r0, #0
   1402c:	ldm	r8, {r3, r9}
   14030:	orreq	r9, r9, #1
   14034:	stm	sp, {r3, r9, sl}
   14038:	str	r1, [sp, #12]
   1403c:	str	r2, [sp, #16]
   14040:	mov	r1, #0
   14044:	mov	r2, r6
   14048:	mov	r3, r5
   1404c:	str	r7, [sp, #32]
   14050:	mov	r7, r5
   14054:	bl	12f60 <__assert_fail@plt+0x1e60>
   14058:	add	r4, r0, #1
   1405c:	mov	r5, r0
   14060:	mov	r0, r4
   14064:	bl	14d54 <__assert_fail@plt+0x3c54>
   14068:	mov	r6, r0
   1406c:	ldr	r0, [r8]
   14070:	ldr	r2, [r8, #44]	; 0x2c
   14074:	ldr	r1, [r8, #40]	; 0x28
   14078:	mov	r3, r7
   1407c:	stm	sp, {r0, r9, sl}
   14080:	str	r2, [sp, #16]
   14084:	ldr	r2, [sp, #20]
   14088:	str	r1, [sp, #12]
   1408c:	mov	r0, r6
   14090:	mov	r1, r4
   14094:	bl	12f60 <__assert_fail@plt+0x1e60>
   14098:	ldr	r0, [sp, #24]
   1409c:	ldr	r1, [sp, #32]
   140a0:	ldr	r2, [sp, #28]
   140a4:	cmp	r0, #0
   140a8:	str	r1, [r2]
   140ac:	strne	r5, [r0]
   140b0:	mov	r0, r6
   140b4:	sub	sp, fp, #28
   140b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   140c0:	add	fp, sp, #24
   140c4:	movw	r5, #28924	; 0x70fc
   140c8:	movw	r8, #28920	; 0x70f8
   140cc:	movt	r5, #2
   140d0:	movt	r8, #2
   140d4:	ldr	r0, [r5]
   140d8:	ldr	r4, [r8]
   140dc:	cmp	r0, #2
   140e0:	blt	1410c <__assert_fail@plt+0x300c>
   140e4:	add	r7, r4, #12
   140e8:	mov	r6, #0
   140ec:	ldr	r0, [r7, r6, lsl #3]
   140f0:	bl	15aa4 <__assert_fail@plt+0x49a4>
   140f4:	ldr	r1, [r5]
   140f8:	add	r2, r6, #2
   140fc:	add	r0, r6, #1
   14100:	mov	r6, r0
   14104:	cmp	r2, r1
   14108:	blt	140ec <__assert_fail@plt+0x2fec>
   1410c:	ldr	r0, [r4, #4]
   14110:	movw	r9, #62160	; 0xf2d0
   14114:	movw	r7, #28928	; 0x7100
   14118:	movt	r9, #2
   1411c:	movt	r7, #2
   14120:	cmp	r0, r9
   14124:	beq	14134 <__assert_fail@plt+0x3034>
   14128:	bl	15aa4 <__assert_fail@plt+0x49a4>
   1412c:	mov	r0, #256	; 0x100
   14130:	stm	r7, {r0, r9}
   14134:	cmp	r4, r7
   14138:	beq	14148 <__assert_fail@plt+0x3048>
   1413c:	mov	r0, r4
   14140:	bl	15aa4 <__assert_fail@plt+0x49a4>
   14144:	str	r7, [r8]
   14148:	mov	r0, #1
   1414c:	str	r0, [r5]
   14150:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14154:	movw	r3, #62112	; 0xf2a0
   14158:	mvn	r2, #0
   1415c:	movt	r3, #2
   14160:	b	14164 <__assert_fail@plt+0x3064>
   14164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14168:	add	fp, sp, #28
   1416c:	sub	sp, sp, #44	; 0x2c
   14170:	mov	r7, r3
   14174:	str	r2, [sp, #36]	; 0x24
   14178:	str	r1, [sp, #32]
   1417c:	mov	r5, r0
   14180:	bl	11010 <__errno_location@plt>
   14184:	cmp	r5, #0
   14188:	bmi	142f8 <__assert_fail@plt+0x31f8>
   1418c:	cmn	r5, #-2147483647	; 0x80000001
   14190:	beq	142f8 <__assert_fail@plt+0x31f8>
   14194:	movw	r8, #28924	; 0x70fc
   14198:	movw	r4, #28920	; 0x70f8
   1419c:	str	r0, [sp, #28]
   141a0:	ldr	r0, [r0]
   141a4:	movt	r8, #2
   141a8:	movt	r4, #2
   141ac:	ldr	r1, [r8]
   141b0:	ldr	r6, [r4]
   141b4:	str	r0, [sp, #24]
   141b8:	cmp	r1, r5
   141bc:	ble	141c8 <__assert_fail@plt+0x30c8>
   141c0:	mov	sl, r6
   141c4:	b	14234 <__assert_fail@plt+0x3134>
   141c8:	movw	r9, #28928	; 0x7100
   141cc:	mov	r0, #8
   141d0:	str	r1, [fp, #-32]	; 0xffffffe0
   141d4:	sub	r1, r5, r1
   141d8:	mvn	r3, #-2147483648	; 0x80000000
   141dc:	movt	r9, #2
   141e0:	str	r0, [sp]
   141e4:	add	r2, r1, #1
   141e8:	sub	r1, fp, #32
   141ec:	subs	r0, r6, r9
   141f0:	movne	r0, r6
   141f4:	bl	14e84 <__assert_fail@plt+0x3d84>
   141f8:	mov	sl, r0
   141fc:	cmp	r6, r9
   14200:	str	r0, [r4]
   14204:	bne	14210 <__assert_fail@plt+0x3110>
   14208:	ldrd	r0, [r9]
   1420c:	stm	sl, {r0, r1}
   14210:	ldr	r1, [r8]
   14214:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14218:	add	r0, sl, r1, lsl #3
   1421c:	sub	r1, r2, r1
   14220:	lsl	r2, r1, #3
   14224:	mov	r1, #0
   14228:	bl	11028 <memset@plt>
   1422c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14230:	str	r0, [r8]
   14234:	mov	r9, sl
   14238:	ldm	r7, {r0, r1}
   1423c:	orr	r8, r1, #1
   14240:	add	r1, r7, #8
   14244:	ldr	r2, [r7, #40]	; 0x28
   14248:	ldr	r3, [r7, #44]	; 0x2c
   1424c:	ldr	r6, [r9, r5, lsl #3]!
   14250:	str	r1, [sp, #20]
   14254:	ldr	r4, [r9, #4]!
   14258:	stm	sp, {r0, r8}
   1425c:	add	r0, sp, #8
   14260:	stm	r0, {r1, r2, r3}
   14264:	ldr	r2, [sp, #32]
   14268:	ldr	r3, [sp, #36]	; 0x24
   1426c:	mov	r1, r6
   14270:	mov	r0, r4
   14274:	bl	12f60 <__assert_fail@plt+0x1e60>
   14278:	cmp	r6, r0
   1427c:	bhi	142e0 <__assert_fail@plt+0x31e0>
   14280:	add	r6, r0, #1
   14284:	movw	r0, #62160	; 0xf2d0
   14288:	movt	r0, #2
   1428c:	str	r6, [sl, r5, lsl #3]
   14290:	cmp	r4, r0
   14294:	beq	142a0 <__assert_fail@plt+0x31a0>
   14298:	mov	r0, r4
   1429c:	bl	15aa4 <__assert_fail@plt+0x49a4>
   142a0:	mov	r0, r6
   142a4:	bl	14d54 <__assert_fail@plt+0x3c54>
   142a8:	str	r0, [r9]
   142ac:	mov	r4, r0
   142b0:	add	r3, sp, #8
   142b4:	ldr	r0, [r7]
   142b8:	ldr	r1, [r7, #40]	; 0x28
   142bc:	ldr	r2, [r7, #44]	; 0x2c
   142c0:	stm	sp, {r0, r8}
   142c4:	ldr	r0, [sp, #20]
   142c8:	stm	r3, {r0, r1, r2}
   142cc:	ldr	r2, [sp, #32]
   142d0:	ldr	r3, [sp, #36]	; 0x24
   142d4:	mov	r0, r4
   142d8:	mov	r1, r6
   142dc:	bl	12f60 <__assert_fail@plt+0x1e60>
   142e0:	ldr	r0, [sp, #28]
   142e4:	ldr	r1, [sp, #24]
   142e8:	str	r1, [r0]
   142ec:	mov	r0, r4
   142f0:	sub	sp, fp, #28
   142f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f8:	bl	110e8 <abort@plt>
   142fc:	movw	r3, #62112	; 0xf2a0
   14300:	movt	r3, #2
   14304:	b	14164 <__assert_fail@plt+0x3064>
   14308:	movw	r3, #62112	; 0xf2a0
   1430c:	mov	r1, r0
   14310:	mov	r0, #0
   14314:	mvn	r2, #0
   14318:	movt	r3, #2
   1431c:	b	14164 <__assert_fail@plt+0x3064>
   14320:	movw	r3, #62112	; 0xf2a0
   14324:	mov	r2, r1
   14328:	mov	r1, r0
   1432c:	mov	r0, #0
   14330:	movt	r3, #2
   14334:	b	14164 <__assert_fail@plt+0x3064>
   14338:	push	{fp, lr}
   1433c:	mov	fp, sp
   14340:	sub	sp, sp, #48	; 0x30
   14344:	vmov.i32	q8, #0	; 0x00000000
   14348:	mov	ip, #32
   1434c:	mov	r3, sp
   14350:	mov	lr, r2
   14354:	cmp	r1, #10
   14358:	add	r2, r3, #16
   1435c:	vst1.64	{d16-d17}, [r3], ip
   14360:	vst1.64	{d16-d17}, [r2]
   14364:	vst1.64	{d16-d17}, [r3]
   14368:	beq	14388 <__assert_fail@plt+0x3288>
   1436c:	str	r1, [sp]
   14370:	mov	r3, sp
   14374:	mov	r1, lr
   14378:	mvn	r2, #0
   1437c:	bl	14164 <__assert_fail@plt+0x3064>
   14380:	mov	sp, fp
   14384:	pop	{fp, pc}
   14388:	bl	110e8 <abort@plt>
   1438c:	push	{r4, sl, fp, lr}
   14390:	add	fp, sp, #8
   14394:	sub	sp, sp, #48	; 0x30
   14398:	vmov.i32	q8, #0	; 0x00000000
   1439c:	mov	ip, r3
   143a0:	mov	r3, sp
   143a4:	mov	lr, #32
   143a8:	cmp	r1, #10
   143ac:	add	r4, r3, #16
   143b0:	vst1.64	{d16-d17}, [r3], lr
   143b4:	vst1.64	{d16-d17}, [r4]
   143b8:	vst1.64	{d16-d17}, [r3]
   143bc:	beq	143dc <__assert_fail@plt+0x32dc>
   143c0:	str	r1, [sp]
   143c4:	mov	r1, r2
   143c8:	mov	r3, sp
   143cc:	mov	r2, ip
   143d0:	bl	14164 <__assert_fail@plt+0x3064>
   143d4:	sub	sp, fp, #8
   143d8:	pop	{r4, sl, fp, pc}
   143dc:	bl	110e8 <abort@plt>
   143e0:	mov	r2, r1
   143e4:	mov	r1, r0
   143e8:	mov	r0, #0
   143ec:	b	14338 <__assert_fail@plt+0x3238>
   143f0:	mov	r3, r2
   143f4:	mov	r2, r1
   143f8:	mov	r1, r0
   143fc:	mov	r0, #0
   14400:	b	1438c <__assert_fail@plt+0x328c>
   14404:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14408:	add	fp, sp, #24
   1440c:	sub	sp, sp, #48	; 0x30
   14410:	movw	r8, #62112	; 0xf2a0
   14414:	mov	lr, r0
   14418:	mov	r3, sp
   1441c:	mov	ip, r1
   14420:	movt	r8, #2
   14424:	mov	r1, r3
   14428:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1442c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14430:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14434:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14438:	ubfx	r0, r2, #5, #3
   1443c:	and	r2, r2, #31
   14440:	mov	r4, #1
   14444:	add	r0, r3, r0, lsl #2
   14448:	ldr	r1, [r0, #8]
   1444c:	bic	r4, r4, r1, lsr r2
   14450:	eor	r1, r1, r4, lsl r2
   14454:	mov	r2, ip
   14458:	str	r1, [r0, #8]
   1445c:	mov	r0, #0
   14460:	mov	r1, lr
   14464:	bl	14164 <__assert_fail@plt+0x3064>
   14468:	sub	sp, fp, #24
   1446c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14470:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14474:	add	fp, sp, #24
   14478:	sub	sp, sp, #48	; 0x30
   1447c:	movw	lr, #62112	; 0xf2a0
   14480:	mov	ip, r0
   14484:	mov	r3, sp
   14488:	movt	lr, #2
   1448c:	mov	r2, r3
   14490:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14494:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14498:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   1449c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   144a0:	ubfx	r0, r1, #5, #3
   144a4:	and	r1, r1, #31
   144a8:	mov	r7, #1
   144ac:	add	r0, r3, r0, lsl #2
   144b0:	ldr	r2, [r0, #8]
   144b4:	bic	r7, r7, r2, lsr r1
   144b8:	eor	r1, r2, r7, lsl r1
   144bc:	mvn	r2, #0
   144c0:	str	r1, [r0, #8]
   144c4:	mov	r0, #0
   144c8:	mov	r1, ip
   144cc:	bl	14164 <__assert_fail@plt+0x3064>
   144d0:	sub	sp, fp, #24
   144d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144d8:	push	{r4, r5, r6, r7, fp, lr}
   144dc:	add	fp, sp, #16
   144e0:	sub	sp, sp, #48	; 0x30
   144e4:	movw	lr, #62112	; 0xf2a0
   144e8:	mov	ip, r0
   144ec:	mov	r3, sp
   144f0:	movt	lr, #2
   144f4:	mov	r2, r3
   144f8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   144fc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14500:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14504:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14508:	mov	r1, ip
   1450c:	mvn	r2, #0
   14510:	ldr	r0, [sp, #12]
   14514:	orr	r0, r0, #67108864	; 0x4000000
   14518:	str	r0, [sp, #12]
   1451c:	mov	r0, #0
   14520:	bl	14164 <__assert_fail@plt+0x3064>
   14524:	sub	sp, fp, #16
   14528:	pop	{r4, r5, r6, r7, fp, pc}
   1452c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14530:	add	fp, sp, #24
   14534:	sub	sp, sp, #48	; 0x30
   14538:	movw	r8, #62112	; 0xf2a0
   1453c:	mov	ip, r1
   14540:	mov	lr, r0
   14544:	mov	r3, sp
   14548:	movt	r8, #2
   1454c:	mov	r2, r3
   14550:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14554:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14558:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1455c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14560:	mov	r1, lr
   14564:	mov	r2, ip
   14568:	ldr	r0, [sp, #12]
   1456c:	orr	r0, r0, #67108864	; 0x4000000
   14570:	str	r0, [sp, #12]
   14574:	mov	r0, #0
   14578:	bl	14164 <__assert_fail@plt+0x3064>
   1457c:	sub	sp, fp, #24
   14580:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14584:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14588:	add	fp, sp, #24
   1458c:	sub	sp, sp, #96	; 0x60
   14590:	vmov.i32	q8, #0	; 0x00000000
   14594:	mov	lr, sp
   14598:	mov	ip, r2
   1459c:	cmp	r1, #10
   145a0:	add	r3, lr, #16
   145a4:	mov	r2, lr
   145a8:	vst1.64	{d16-d17}, [r3]
   145ac:	mov	r3, #28
   145b0:	vst1.64	{d16-d17}, [r2], r3
   145b4:	vst1.32	{d16-d17}, [r2]
   145b8:	beq	145f8 <__assert_fail@plt+0x34f8>
   145bc:	str	r1, [sp, #48]	; 0x30
   145c0:	add	r3, sp, #48	; 0x30
   145c4:	ldm	lr!, {r2, r4, r5, r6, r7}
   145c8:	add	r1, r3, #4
   145cc:	stmia	r1!, {r2, r4, r5, r6, r7}
   145d0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   145d4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   145d8:	mvn	r2, #0
   145dc:	ldr	r1, [sp, #60]	; 0x3c
   145e0:	orr	r1, r1, #67108864	; 0x4000000
   145e4:	str	r1, [sp, #60]	; 0x3c
   145e8:	mov	r1, ip
   145ec:	bl	14164 <__assert_fail@plt+0x3064>
   145f0:	sub	sp, fp, #24
   145f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145f8:	bl	110e8 <abort@plt>
   145fc:	push	{fp, lr}
   14600:	mov	fp, sp
   14604:	sub	sp, sp, #8
   14608:	mvn	ip, #0
   1460c:	str	ip, [sp]
   14610:	bl	1461c <__assert_fail@plt+0x351c>
   14614:	mov	sp, fp
   14618:	pop	{fp, pc}
   1461c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14620:	add	fp, sp, #24
   14624:	sub	sp, sp, #48	; 0x30
   14628:	movw	ip, #62112	; 0xf2a0
   1462c:	mov	lr, r3
   14630:	mov	r3, sp
   14634:	cmp	r1, #0
   14638:	movt	ip, #2
   1463c:	cmpne	r2, #0
   14640:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14644:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14648:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1464c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14650:	mov	r3, #10
   14654:	str	r3, [sp]
   14658:	bne	14660 <__assert_fail@plt+0x3560>
   1465c:	bl	110e8 <abort@plt>
   14660:	ldr	ip, [fp, #8]
   14664:	str	r2, [sp, #44]	; 0x2c
   14668:	str	r1, [sp, #40]	; 0x28
   1466c:	mov	r3, sp
   14670:	mov	r1, lr
   14674:	mov	r2, ip
   14678:	bl	14164 <__assert_fail@plt+0x3064>
   1467c:	sub	sp, fp, #24
   14680:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14684:	push	{fp, lr}
   14688:	mov	fp, sp
   1468c:	sub	sp, sp, #8
   14690:	mov	r3, r2
   14694:	mov	r2, r1
   14698:	mov	r1, r0
   1469c:	mvn	r0, #0
   146a0:	str	r0, [sp]
   146a4:	mov	r0, #0
   146a8:	bl	1461c <__assert_fail@plt+0x351c>
   146ac:	mov	sp, fp
   146b0:	pop	{fp, pc}
   146b4:	push	{fp, lr}
   146b8:	mov	fp, sp
   146bc:	sub	sp, sp, #8
   146c0:	mov	ip, r2
   146c4:	mov	r2, r1
   146c8:	mov	r1, r0
   146cc:	str	r3, [sp]
   146d0:	mov	r0, #0
   146d4:	mov	r3, ip
   146d8:	bl	1461c <__assert_fail@plt+0x351c>
   146dc:	mov	sp, fp
   146e0:	pop	{fp, pc}
   146e4:	movw	r3, #28936	; 0x7108
   146e8:	movt	r3, #2
   146ec:	b	14164 <__assert_fail@plt+0x3064>
   146f0:	movw	r3, #28936	; 0x7108
   146f4:	mov	r2, r1
   146f8:	mov	r1, r0
   146fc:	mov	r0, #0
   14700:	movt	r3, #2
   14704:	b	14164 <__assert_fail@plt+0x3064>
   14708:	movw	r3, #28936	; 0x7108
   1470c:	mvn	r2, #0
   14710:	movt	r3, #2
   14714:	b	14164 <__assert_fail@plt+0x3064>
   14718:	movw	r3, #28936	; 0x7108
   1471c:	mov	r1, r0
   14720:	mov	r0, #0
   14724:	mvn	r2, #0
   14728:	movt	r3, #2
   1472c:	b	14164 <__assert_fail@plt+0x3064>
   14730:	push	{r4, r5, fp, lr}
   14734:	add	fp, sp, #8
   14738:	mov	r5, r0
   1473c:	mov	r4, r1
   14740:	mov	r0, #0
   14744:	mov	r2, #5
   14748:	mov	r1, r5
   1474c:	bl	10f20 <dcgettext@plt>
   14750:	cmp	r0, r5
   14754:	popne	{r4, r5, fp, pc}
   14758:	bl	15acc <__assert_fail@plt+0x49cc>
   1475c:	ldrb	r1, [r0]
   14760:	and	r1, r1, #223	; 0xdf
   14764:	cmp	r1, #71	; 0x47
   14768:	beq	147d0 <__assert_fail@plt+0x36d0>
   1476c:	cmp	r1, #85	; 0x55
   14770:	bne	14828 <__assert_fail@plt+0x3728>
   14774:	ldrb	r1, [r0, #1]
   14778:	and	r1, r1, #223	; 0xdf
   1477c:	cmp	r1, #84	; 0x54
   14780:	bne	14828 <__assert_fail@plt+0x3728>
   14784:	ldrb	r1, [r0, #2]
   14788:	and	r1, r1, #223	; 0xdf
   1478c:	cmp	r1, #70	; 0x46
   14790:	bne	14828 <__assert_fail@plt+0x3728>
   14794:	ldrb	r1, [r0, #3]
   14798:	cmp	r1, #45	; 0x2d
   1479c:	bne	14828 <__assert_fail@plt+0x3728>
   147a0:	ldrb	r1, [r0, #4]
   147a4:	cmp	r1, #56	; 0x38
   147a8:	bne	14828 <__assert_fail@plt+0x3728>
   147ac:	ldrb	r0, [r0, #5]
   147b0:	cmp	r0, #0
   147b4:	bne	14828 <__assert_fail@plt+0x3728>
   147b8:	ldrb	r1, [r5]
   147bc:	movw	r2, #26342	; 0x66e6
   147c0:	movw	r0, #26346	; 0x66ea
   147c4:	movt	r2, #1
   147c8:	movt	r0, #1
   147cc:	b	14858 <__assert_fail@plt+0x3758>
   147d0:	ldrb	r1, [r0, #1]
   147d4:	and	r1, r1, #223	; 0xdf
   147d8:	cmp	r1, #66	; 0x42
   147dc:	bne	14828 <__assert_fail@plt+0x3728>
   147e0:	ldrb	r1, [r0, #2]
   147e4:	cmp	r1, #49	; 0x31
   147e8:	bne	14828 <__assert_fail@plt+0x3728>
   147ec:	ldrb	r1, [r0, #3]
   147f0:	cmp	r1, #56	; 0x38
   147f4:	bne	14828 <__assert_fail@plt+0x3728>
   147f8:	ldrb	r1, [r0, #4]
   147fc:	cmp	r1, #48	; 0x30
   14800:	bne	14828 <__assert_fail@plt+0x3728>
   14804:	ldrb	r1, [r0, #5]
   14808:	cmp	r1, #51	; 0x33
   1480c:	bne	14828 <__assert_fail@plt+0x3728>
   14810:	ldrb	r1, [r0, #6]
   14814:	cmp	r1, #48	; 0x30
   14818:	bne	14828 <__assert_fail@plt+0x3728>
   1481c:	ldrb	r0, [r0, #7]
   14820:	cmp	r0, #0
   14824:	beq	14844 <__assert_fail@plt+0x3744>
   14828:	movw	r1, #25936	; 0x6550
   1482c:	movw	r0, #26340	; 0x66e4
   14830:	cmp	r4, #9
   14834:	movt	r1, #1
   14838:	movt	r0, #1
   1483c:	moveq	r0, r1
   14840:	pop	{r4, r5, fp, pc}
   14844:	ldrb	r1, [r5]
   14848:	movw	r2, #26350	; 0x66ee
   1484c:	movw	r0, #26354	; 0x66f2
   14850:	movt	r2, #1
   14854:	movt	r0, #1
   14858:	cmp	r1, #96	; 0x60
   1485c:	moveq	r0, r2
   14860:	pop	{r4, r5, fp, pc}
   14864:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14868:	add	fp, sp, #24
   1486c:	sub	sp, sp, #32
   14870:	ldr	r6, [fp, #12]
   14874:	ldr	r7, [fp, #8]
   14878:	mov	r4, r2
   1487c:	mov	r8, r0
   14880:	cmp	r1, #0
   14884:	beq	148ac <__assert_fail@plt+0x37ac>
   14888:	movw	r2, #26444	; 0x674c
   1488c:	mov	r5, r1
   14890:	str	r3, [sp, #4]
   14894:	str	r4, [sp]
   14898:	mov	r0, r8
   1489c:	mov	r1, #1
   148a0:	movt	r2, #1
   148a4:	mov	r3, r5
   148a8:	b	148c4 <__assert_fail@plt+0x37c4>
   148ac:	movw	r2, #26456	; 0x6758
   148b0:	str	r3, [sp]
   148b4:	mov	r0, r8
   148b8:	mov	r1, #1
   148bc:	mov	r3, r4
   148c0:	movt	r2, #1
   148c4:	bl	11058 <__fprintf_chk@plt>
   148c8:	movw	r1, #26463	; 0x675f
   148cc:	mov	r0, #0
   148d0:	mov	r2, #5
   148d4:	movt	r1, #1
   148d8:	bl	10f20 <dcgettext@plt>
   148dc:	movw	r2, #27181	; 0x6a2d
   148e0:	mov	r3, r0
   148e4:	movw	r0, #2022	; 0x7e6
   148e8:	mov	r1, #1
   148ec:	movt	r2, #1
   148f0:	str	r0, [sp]
   148f4:	mov	r0, r8
   148f8:	bl	11058 <__fprintf_chk@plt>
   148fc:	movw	r4, #25776	; 0x64b0
   14900:	mov	r1, r8
   14904:	movt	r4, #1
   14908:	mov	r0, r4
   1490c:	bl	10e90 <fputs_unlocked@plt>
   14910:	movw	r1, #26467	; 0x6763
   14914:	mov	r0, #0
   14918:	mov	r2, #5
   1491c:	movt	r1, #1
   14920:	bl	10f20 <dcgettext@plt>
   14924:	movw	r3, #26638	; 0x680e
   14928:	mov	r2, r0
   1492c:	mov	r0, r8
   14930:	mov	r1, #1
   14934:	movt	r3, #1
   14938:	bl	11058 <__fprintf_chk@plt>
   1493c:	mov	r0, r4
   14940:	mov	r1, r8
   14944:	bl	10e90 <fputs_unlocked@plt>
   14948:	cmp	r6, #9
   1494c:	bhi	149b0 <__assert_fail@plt+0x38b0>
   14950:	add	r0, pc, #0
   14954:	ldr	pc, [r0, r6, lsl #2]
   14958:	andeq	r4, r1, r8, lsl #23
   1495c:	andeq	r4, r1, r0, lsl #19
   14960:			; <UNDEFINED> instruction: 0x000149bc
   14964:	andeq	r4, r1, r4, ror #19
   14968:	andeq	r4, r1, ip, lsl #20
   1496c:	andeq	r4, r1, r4, lsr sl
   14970:	andeq	r4, r1, ip, asr sl
   14974:	muleq	r1, r4, sl
   14978:	andeq	r4, r1, r4, lsr fp
   1497c:	ldrdeq	r4, [r1], -ip
   14980:	movw	r1, #26672	; 0x6830
   14984:	mov	r0, #0
   14988:	mov	r2, #5
   1498c:	movt	r1, #1
   14990:	bl	10f20 <dcgettext@plt>
   14994:	ldr	r3, [r7]
   14998:	mov	r2, r0
   1499c:	mov	r0, r8
   149a0:	mov	r1, #1
   149a4:	sub	sp, fp, #24
   149a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   149ac:	b	11058 <__fprintf_chk@plt>
   149b0:	movw	r1, #26991	; 0x696f
   149b4:	movt	r1, #1
   149b8:	b	14ae4 <__assert_fail@plt+0x39e4>
   149bc:	movw	r1, #26688	; 0x6840
   149c0:	mov	r0, #0
   149c4:	mov	r2, #5
   149c8:	movt	r1, #1
   149cc:	bl	10f20 <dcgettext@plt>
   149d0:	mov	r2, r0
   149d4:	ldr	r3, [r7]
   149d8:	ldr	r0, [r7, #4]
   149dc:	str	r0, [sp]
   149e0:	b	14ad0 <__assert_fail@plt+0x39d0>
   149e4:	movw	r1, #26711	; 0x6857
   149e8:	mov	r0, #0
   149ec:	mov	r2, #5
   149f0:	movt	r1, #1
   149f4:	bl	10f20 <dcgettext@plt>
   149f8:	mov	r2, r0
   149fc:	ldr	r3, [r7]
   14a00:	ldmib	r7, {r0, r1}
   14a04:	stm	sp, {r0, r1}
   14a08:	b	14ad0 <__assert_fail@plt+0x39d0>
   14a0c:	movw	r1, #26739	; 0x6873
   14a10:	mov	r0, #0
   14a14:	mov	r2, #5
   14a18:	movt	r1, #1
   14a1c:	bl	10f20 <dcgettext@plt>
   14a20:	ldr	r3, [r7]
   14a24:	mov	r2, r0
   14a28:	ldmib	r7, {r0, r1, r7}
   14a2c:	stm	sp, {r0, r1, r7}
   14a30:	b	14ad0 <__assert_fail@plt+0x39d0>
   14a34:	movw	r1, #26771	; 0x6893
   14a38:	mov	r0, #0
   14a3c:	mov	r2, #5
   14a40:	movt	r1, #1
   14a44:	bl	10f20 <dcgettext@plt>
   14a48:	ldr	r3, [r7]
   14a4c:	mov	r2, r0
   14a50:	ldmib	r7, {r0, r1, r6, r7}
   14a54:	stm	sp, {r0, r1, r6, r7}
   14a58:	b	14ad0 <__assert_fail@plt+0x39d0>
   14a5c:	movw	r1, #26807	; 0x68b7
   14a60:	mov	r0, #0
   14a64:	mov	r2, #5
   14a68:	movt	r1, #1
   14a6c:	bl	10f20 <dcgettext@plt>
   14a70:	mov	r2, r0
   14a74:	ldr	r3, [r7]
   14a78:	ldmib	r7, {r0, r1, r6}
   14a7c:	ldr	r5, [r7, #16]
   14a80:	ldr	r7, [r7, #20]
   14a84:	stm	sp, {r0, r1, r6}
   14a88:	str	r5, [sp, #12]
   14a8c:	str	r7, [sp, #16]
   14a90:	b	14ad0 <__assert_fail@plt+0x39d0>
   14a94:	movw	r1, #26847	; 0x68df
   14a98:	mov	r0, #0
   14a9c:	mov	r2, #5
   14aa0:	movt	r1, #1
   14aa4:	bl	10f20 <dcgettext@plt>
   14aa8:	mov	r2, r0
   14aac:	ldr	r3, [r7]
   14ab0:	ldmib	r7, {r0, r1, r6}
   14ab4:	ldr	r5, [r7, #16]
   14ab8:	ldr	r4, [r7, #20]
   14abc:	ldr	r7, [r7, #24]
   14ac0:	stm	sp, {r0, r1, r6}
   14ac4:	str	r5, [sp, #12]
   14ac8:	str	r4, [sp, #16]
   14acc:	str	r7, [sp, #20]
   14ad0:	mov	r0, r8
   14ad4:	mov	r1, #1
   14ad8:	b	14b84 <__assert_fail@plt+0x3a84>
   14adc:	movw	r1, #26939	; 0x693b
   14ae0:	movt	r1, #1
   14ae4:	mov	r0, #0
   14ae8:	mov	r2, #5
   14aec:	bl	10f20 <dcgettext@plt>
   14af0:	mov	ip, r0
   14af4:	ldr	r3, [r7]
   14af8:	ldr	r0, [r7, #4]
   14afc:	ldr	r1, [r7, #8]
   14b00:	ldr	r6, [r7, #12]
   14b04:	ldr	r5, [r7, #16]
   14b08:	ldr	r4, [r7, #20]
   14b0c:	ldr	r2, [r7, #24]
   14b10:	ldr	lr, [r7, #28]
   14b14:	ldr	r7, [r7, #32]
   14b18:	stm	sp, {r0, r1, r6}
   14b1c:	str	r5, [sp, #12]
   14b20:	str	r4, [sp, #16]
   14b24:	str	r2, [sp, #20]
   14b28:	str	lr, [sp, #24]
   14b2c:	str	r7, [sp, #28]
   14b30:	b	14b78 <__assert_fail@plt+0x3a78>
   14b34:	movw	r1, #26891	; 0x690b
   14b38:	mov	r0, #0
   14b3c:	mov	r2, #5
   14b40:	movt	r1, #1
   14b44:	bl	10f20 <dcgettext@plt>
   14b48:	mov	ip, r0
   14b4c:	ldr	r3, [r7]
   14b50:	ldmib	r7, {r0, r1, r6}
   14b54:	ldr	r5, [r7, #16]
   14b58:	ldr	r4, [r7, #20]
   14b5c:	ldr	r2, [r7, #24]
   14b60:	ldr	r7, [r7, #28]
   14b64:	stm	sp, {r0, r1, r6}
   14b68:	str	r5, [sp, #12]
   14b6c:	str	r4, [sp, #16]
   14b70:	str	r2, [sp, #20]
   14b74:	str	r7, [sp, #24]
   14b78:	mov	r0, r8
   14b7c:	mov	r1, #1
   14b80:	mov	r2, ip
   14b84:	bl	11058 <__fprintf_chk@plt>
   14b88:	sub	sp, fp, #24
   14b8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b90:	push	{r4, sl, fp, lr}
   14b94:	add	fp, sp, #8
   14b98:	sub	sp, sp, #8
   14b9c:	ldr	ip, [fp, #8]
   14ba0:	mov	lr, #0
   14ba4:	ldr	r4, [ip, lr, lsl #2]
   14ba8:	add	lr, lr, #1
   14bac:	cmp	r4, #0
   14bb0:	bne	14ba4 <__assert_fail@plt+0x3aa4>
   14bb4:	sub	r4, lr, #1
   14bb8:	str	ip, [sp]
   14bbc:	str	r4, [sp, #4]
   14bc0:	bl	14864 <__assert_fail@plt+0x3764>
   14bc4:	sub	sp, fp, #8
   14bc8:	pop	{r4, sl, fp, pc}
   14bcc:	push	{r4, r5, fp, lr}
   14bd0:	add	fp, sp, #8
   14bd4:	sub	sp, sp, #48	; 0x30
   14bd8:	ldr	r4, [fp, #8]
   14bdc:	mov	ip, #0
   14be0:	add	lr, sp, #8
   14be4:	ldr	r5, [r4]
   14be8:	cmp	r5, #0
   14bec:	str	r5, [lr, ip, lsl #2]
   14bf0:	beq	14c08 <__assert_fail@plt+0x3b08>
   14bf4:	add	ip, ip, #1
   14bf8:	add	r4, r4, #4
   14bfc:	cmp	ip, #10
   14c00:	bne	14be4 <__assert_fail@plt+0x3ae4>
   14c04:	mov	ip, #10
   14c08:	str	lr, [sp]
   14c0c:	str	ip, [sp, #4]
   14c10:	bl	14864 <__assert_fail@plt+0x3764>
   14c14:	sub	sp, fp, #8
   14c18:	pop	{r4, r5, fp, pc}
   14c1c:	push	{fp, lr}
   14c20:	mov	fp, sp
   14c24:	sub	sp, sp, #8
   14c28:	add	ip, fp, #8
   14c2c:	str	ip, [sp, #4]
   14c30:	str	ip, [sp]
   14c34:	bl	14bcc <__assert_fail@plt+0x3acc>
   14c38:	mov	sp, fp
   14c3c:	pop	{fp, pc}
   14c40:	push	{fp, lr}
   14c44:	mov	fp, sp
   14c48:	movw	r0, #29012	; 0x7154
   14c4c:	movt	r0, #2
   14c50:	ldr	r1, [r0]
   14c54:	movw	r0, #25776	; 0x64b0
   14c58:	movt	r0, #1
   14c5c:	bl	10e90 <fputs_unlocked@plt>
   14c60:	movw	r1, #27051	; 0x69ab
   14c64:	mov	r0, #0
   14c68:	mov	r2, #5
   14c6c:	movt	r1, #1
   14c70:	bl	10f20 <dcgettext@plt>
   14c74:	movw	r2, #27071	; 0x69bf
   14c78:	mov	r1, r0
   14c7c:	mov	r0, #1
   14c80:	movt	r2, #1
   14c84:	bl	11034 <__printf_chk@plt>
   14c88:	movw	r1, #27093	; 0x69d5
   14c8c:	mov	r0, #0
   14c90:	mov	r2, #5
   14c94:	movt	r1, #1
   14c98:	bl	10f20 <dcgettext@plt>
   14c9c:	movw	r2, #25244	; 0x629c
   14ca0:	movw	r3, #25585	; 0x63f1
   14ca4:	mov	r1, r0
   14ca8:	mov	r0, #1
   14cac:	movt	r2, #1
   14cb0:	movt	r3, #1
   14cb4:	bl	11034 <__printf_chk@plt>
   14cb8:	movw	r1, #27113	; 0x69e9
   14cbc:	mov	r0, #0
   14cc0:	mov	r2, #5
   14cc4:	movt	r1, #1
   14cc8:	bl	10f20 <dcgettext@plt>
   14ccc:	movw	r2, #27152	; 0x6a10
   14cd0:	mov	r1, r0
   14cd4:	mov	r0, #1
   14cd8:	movt	r2, #1
   14cdc:	pop	{fp, lr}
   14ce0:	b	11034 <__printf_chk@plt>
   14ce4:	b	14ce8 <__assert_fail@plt+0x3be8>
   14ce8:	push	{r4, r5, r6, sl, fp, lr}
   14cec:	add	fp, sp, #16
   14cf0:	mov	r4, r2
   14cf4:	mov	r5, r1
   14cf8:	mov	r6, r0
   14cfc:	bl	15b68 <__assert_fail@plt+0x4a68>
   14d00:	cmp	r0, #0
   14d04:	popne	{r4, r5, r6, sl, fp, pc}
   14d08:	cmp	r6, #0
   14d0c:	beq	14d20 <__assert_fail@plt+0x3c20>
   14d10:	cmp	r5, #0
   14d14:	cmpne	r4, #0
   14d18:	bne	14d20 <__assert_fail@plt+0x3c20>
   14d1c:	pop	{r4, r5, r6, sl, fp, pc}
   14d20:	bl	15150 <__assert_fail@plt+0x4050>
   14d24:	push	{fp, lr}
   14d28:	mov	fp, sp
   14d2c:	bl	159a4 <__assert_fail@plt+0x48a4>
   14d30:	cmp	r0, #0
   14d34:	popne	{fp, pc}
   14d38:	bl	15150 <__assert_fail@plt+0x4050>
   14d3c:	push	{fp, lr}
   14d40:	mov	fp, sp
   14d44:	bl	159a4 <__assert_fail@plt+0x48a4>
   14d48:	cmp	r0, #0
   14d4c:	popne	{fp, pc}
   14d50:	bl	15150 <__assert_fail@plt+0x4050>
   14d54:	push	{fp, lr}
   14d58:	mov	fp, sp
   14d5c:	bl	159a4 <__assert_fail@plt+0x48a4>
   14d60:	cmp	r0, #0
   14d64:	popne	{fp, pc}
   14d68:	bl	15150 <__assert_fail@plt+0x4050>
   14d6c:	push	{r4, r5, fp, lr}
   14d70:	add	fp, sp, #8
   14d74:	mov	r4, r1
   14d78:	mov	r5, r0
   14d7c:	bl	159d4 <__assert_fail@plt+0x48d4>
   14d80:	cmp	r0, #0
   14d84:	popne	{r4, r5, fp, pc}
   14d88:	cmp	r5, #0
   14d8c:	beq	14d9c <__assert_fail@plt+0x3c9c>
   14d90:	cmp	r4, #0
   14d94:	bne	14d9c <__assert_fail@plt+0x3c9c>
   14d98:	pop	{r4, r5, fp, pc}
   14d9c:	bl	15150 <__assert_fail@plt+0x4050>
   14da0:	push	{fp, lr}
   14da4:	mov	fp, sp
   14da8:	cmp	r1, #0
   14dac:	orreq	r1, r1, #1
   14db0:	bl	159d4 <__assert_fail@plt+0x48d4>
   14db4:	cmp	r0, #0
   14db8:	popne	{fp, pc}
   14dbc:	bl	15150 <__assert_fail@plt+0x4050>
   14dc0:	push	{fp, lr}
   14dc4:	mov	fp, sp
   14dc8:	clz	r3, r2
   14dcc:	lsr	ip, r3, #5
   14dd0:	clz	r3, r1
   14dd4:	lsr	r3, r3, #5
   14dd8:	orrs	r3, r3, ip
   14ddc:	movwne	r1, #1
   14de0:	movwne	r2, #1
   14de4:	bl	15b68 <__assert_fail@plt+0x4a68>
   14de8:	cmp	r0, #0
   14dec:	popne	{fp, pc}
   14df0:	bl	15150 <__assert_fail@plt+0x4050>
   14df4:	push	{fp, lr}
   14df8:	mov	fp, sp
   14dfc:	mov	r2, r1
   14e00:	mov	r1, r0
   14e04:	mov	r0, #0
   14e08:	bl	15b68 <__assert_fail@plt+0x4a68>
   14e0c:	cmp	r0, #0
   14e10:	popne	{fp, pc}
   14e14:	bl	15150 <__assert_fail@plt+0x4050>
   14e18:	mov	r2, r1
   14e1c:	mov	r1, r0
   14e20:	mov	r0, #0
   14e24:	b	14dc0 <__assert_fail@plt+0x3cc0>
   14e28:	mov	r2, #1
   14e2c:	b	14e30 <__assert_fail@plt+0x3d30>
   14e30:	push	{r4, r5, fp, lr}
   14e34:	add	fp, sp, #8
   14e38:	ldr	r5, [r1]
   14e3c:	mov	r4, r1
   14e40:	cmp	r0, #0
   14e44:	beq	14e5c <__assert_fail@plt+0x3d5c>
   14e48:	mov	r1, #1
   14e4c:	add	r1, r1, r5, lsr #1
   14e50:	adds	r5, r5, r1
   14e54:	bcc	14e74 <__assert_fail@plt+0x3d74>
   14e58:	bl	15150 <__assert_fail@plt+0x4050>
   14e5c:	cmp	r5, #0
   14e60:	bne	14e74 <__assert_fail@plt+0x3d74>
   14e64:	mov	r1, #64	; 0x40
   14e68:	cmp	r2, #64	; 0x40
   14e6c:	udiv	r5, r1, r2
   14e70:	addhi	r5, r5, #1
   14e74:	mov	r1, r5
   14e78:	bl	14ce8 <__assert_fail@plt+0x3be8>
   14e7c:	str	r5, [r4]
   14e80:	pop	{r4, r5, fp, pc}
   14e84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e88:	add	fp, sp, #24
   14e8c:	ldr	r6, [r1]
   14e90:	mov	r8, r1
   14e94:	ldr	r4, [fp, #8]
   14e98:	add	r1, r6, r6, asr #1
   14e9c:	cmp	r1, r6
   14ea0:	mvnvs	r1, #-2147483648	; 0x80000000
   14ea4:	cmp	r1, r3
   14ea8:	mov	r5, r1
   14eac:	movgt	r5, r3
   14eb0:	cmn	r3, #1
   14eb4:	movle	r5, r1
   14eb8:	cmn	r4, #1
   14ebc:	ble	14edc <__assert_fail@plt+0x3ddc>
   14ec0:	cmp	r4, #0
   14ec4:	beq	14f30 <__assert_fail@plt+0x3e30>
   14ec8:	cmn	r5, #1
   14ecc:	ble	14f04 <__assert_fail@plt+0x3e04>
   14ed0:	mvn	r7, #-2147483648	; 0x80000000
   14ed4:	udiv	r1, r7, r4
   14ed8:	b	14ef8 <__assert_fail@plt+0x3df8>
   14edc:	cmn	r5, #1
   14ee0:	ble	14f20 <__assert_fail@plt+0x3e20>
   14ee4:	cmn	r4, #1
   14ee8:	beq	14f30 <__assert_fail@plt+0x3e30>
   14eec:	mov	r1, #-2147483648	; 0x80000000
   14ef0:	mvn	r7, #-2147483648	; 0x80000000
   14ef4:	sdiv	r1, r1, r4
   14ef8:	cmp	r1, r5
   14efc:	bge	14f30 <__assert_fail@plt+0x3e30>
   14f00:	b	14f40 <__assert_fail@plt+0x3e40>
   14f04:	beq	14f30 <__assert_fail@plt+0x3e30>
   14f08:	mov	r1, #-2147483648	; 0x80000000
   14f0c:	mvn	r7, #-2147483648	; 0x80000000
   14f10:	sdiv	r1, r1, r5
   14f14:	cmp	r1, r4
   14f18:	bge	14f30 <__assert_fail@plt+0x3e30>
   14f1c:	b	14f40 <__assert_fail@plt+0x3e40>
   14f20:	mvn	r7, #-2147483648	; 0x80000000
   14f24:	sdiv	r1, r7, r4
   14f28:	cmp	r5, r1
   14f2c:	blt	14f40 <__assert_fail@plt+0x3e40>
   14f30:	mul	r1, r5, r4
   14f34:	mov	r7, #64	; 0x40
   14f38:	cmp	r1, #63	; 0x3f
   14f3c:	bgt	14f48 <__assert_fail@plt+0x3e48>
   14f40:	sdiv	r5, r7, r4
   14f44:	mul	r1, r5, r4
   14f48:	cmp	r0, #0
   14f4c:	moveq	r7, #0
   14f50:	streq	r7, [r8]
   14f54:	sub	r7, r5, r6
   14f58:	cmp	r7, r2
   14f5c:	bge	15000 <__assert_fail@plt+0x3f00>
   14f60:	add	r5, r6, r2
   14f64:	mov	r2, #0
   14f68:	mov	r1, #0
   14f6c:	cmp	r5, r3
   14f70:	movwgt	r2, #1
   14f74:	cmn	r3, #1
   14f78:	movwgt	r1, #1
   14f7c:	cmp	r5, r6
   14f80:	bvs	14fe8 <__assert_fail@plt+0x3ee8>
   14f84:	ands	r1, r1, r2
   14f88:	bne	14fe8 <__assert_fail@plt+0x3ee8>
   14f8c:	cmn	r4, #1
   14f90:	ble	14fb0 <__assert_fail@plt+0x3eb0>
   14f94:	cmp	r4, #0
   14f98:	beq	14ffc <__assert_fail@plt+0x3efc>
   14f9c:	cmn	r5, #1
   14fa0:	ble	14fd4 <__assert_fail@plt+0x3ed4>
   14fa4:	mvn	r1, #-2147483648	; 0x80000000
   14fa8:	udiv	r1, r1, r4
   14fac:	b	14fc8 <__assert_fail@plt+0x3ec8>
   14fb0:	cmn	r5, #1
   14fb4:	ble	14fec <__assert_fail@plt+0x3eec>
   14fb8:	cmn	r4, #1
   14fbc:	beq	14ffc <__assert_fail@plt+0x3efc>
   14fc0:	mov	r1, #-2147483648	; 0x80000000
   14fc4:	sdiv	r1, r1, r4
   14fc8:	cmp	r1, r5
   14fcc:	bge	14ffc <__assert_fail@plt+0x3efc>
   14fd0:	b	14fe8 <__assert_fail@plt+0x3ee8>
   14fd4:	beq	14ffc <__assert_fail@plt+0x3efc>
   14fd8:	mov	r1, #-2147483648	; 0x80000000
   14fdc:	sdiv	r1, r1, r5
   14fe0:	cmp	r1, r4
   14fe4:	bge	14ffc <__assert_fail@plt+0x3efc>
   14fe8:	bl	15150 <__assert_fail@plt+0x4050>
   14fec:	mvn	r1, #-2147483648	; 0x80000000
   14ff0:	sdiv	r1, r1, r4
   14ff4:	cmp	r5, r1
   14ff8:	blt	14fe8 <__assert_fail@plt+0x3ee8>
   14ffc:	mul	r1, r5, r4
   15000:	bl	14d6c <__assert_fail@plt+0x3c6c>
   15004:	str	r5, [r8]
   15008:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1500c:	push	{fp, lr}
   15010:	mov	fp, sp
   15014:	mov	r1, #1
   15018:	bl	15950 <__assert_fail@plt+0x4850>
   1501c:	cmp	r0, #0
   15020:	popne	{fp, pc}
   15024:	bl	15150 <__assert_fail@plt+0x4050>
   15028:	push	{fp, lr}
   1502c:	mov	fp, sp
   15030:	bl	15950 <__assert_fail@plt+0x4850>
   15034:	cmp	r0, #0
   15038:	popne	{fp, pc}
   1503c:	bl	15150 <__assert_fail@plt+0x4050>
   15040:	push	{fp, lr}
   15044:	mov	fp, sp
   15048:	mov	r1, #1
   1504c:	bl	15950 <__assert_fail@plt+0x4850>
   15050:	cmp	r0, #0
   15054:	popne	{fp, pc}
   15058:	bl	15150 <__assert_fail@plt+0x4050>
   1505c:	push	{fp, lr}
   15060:	mov	fp, sp
   15064:	bl	15950 <__assert_fail@plt+0x4850>
   15068:	cmp	r0, #0
   1506c:	popne	{fp, pc}
   15070:	bl	15150 <__assert_fail@plt+0x4050>
   15074:	push	{r4, r5, fp, lr}
   15078:	add	fp, sp, #8
   1507c:	mov	r5, r0
   15080:	mov	r0, r1
   15084:	mov	r4, r1
   15088:	bl	159a4 <__assert_fail@plt+0x48a4>
   1508c:	cmp	r0, #0
   15090:	beq	150a4 <__assert_fail@plt+0x3fa4>
   15094:	mov	r1, r5
   15098:	mov	r2, r4
   1509c:	pop	{r4, r5, fp, lr}
   150a0:	b	10ef0 <memcpy@plt>
   150a4:	bl	15150 <__assert_fail@plt+0x4050>
   150a8:	push	{r4, r5, fp, lr}
   150ac:	add	fp, sp, #8
   150b0:	mov	r5, r0
   150b4:	mov	r0, r1
   150b8:	mov	r4, r1
   150bc:	bl	159a4 <__assert_fail@plt+0x48a4>
   150c0:	cmp	r0, #0
   150c4:	beq	150d8 <__assert_fail@plt+0x3fd8>
   150c8:	mov	r1, r5
   150cc:	mov	r2, r4
   150d0:	pop	{r4, r5, fp, lr}
   150d4:	b	10ef0 <memcpy@plt>
   150d8:	bl	15150 <__assert_fail@plt+0x4050>
   150dc:	push	{r4, r5, fp, lr}
   150e0:	add	fp, sp, #8
   150e4:	mov	r5, r0
   150e8:	add	r0, r1, #1
   150ec:	mov	r4, r1
   150f0:	bl	159a4 <__assert_fail@plt+0x48a4>
   150f4:	cmp	r0, #0
   150f8:	beq	15114 <__assert_fail@plt+0x4014>
   150fc:	mov	r1, #0
   15100:	mov	r2, r4
   15104:	strb	r1, [r0, r4]
   15108:	mov	r1, r5
   1510c:	pop	{r4, r5, fp, lr}
   15110:	b	10ef0 <memcpy@plt>
   15114:	bl	15150 <__assert_fail@plt+0x4050>
   15118:	push	{r4, r5, fp, lr}
   1511c:	add	fp, sp, #8
   15120:	mov	r4, r0
   15124:	bl	10ff8 <strlen@plt>
   15128:	add	r5, r0, #1
   1512c:	mov	r0, r5
   15130:	bl	159a4 <__assert_fail@plt+0x48a4>
   15134:	cmp	r0, #0
   15138:	beq	1514c <__assert_fail@plt+0x404c>
   1513c:	mov	r1, r4
   15140:	mov	r2, r5
   15144:	pop	{r4, r5, fp, lr}
   15148:	b	10ef0 <memcpy@plt>
   1514c:	bl	15150 <__assert_fail@plt+0x4050>
   15150:	push	{fp, lr}
   15154:	mov	fp, sp
   15158:	movw	r0, #28916	; 0x70f4
   1515c:	movw	r1, #27228	; 0x6a5c
   15160:	mov	r2, #5
   15164:	movt	r0, #2
   15168:	movt	r1, #1
   1516c:	ldr	r4, [r0]
   15170:	mov	r0, #0
   15174:	bl	10f20 <dcgettext@plt>
   15178:	movw	r2, #26191	; 0x664f
   1517c:	mov	r3, r0
   15180:	mov	r0, r4
   15184:	mov	r1, #0
   15188:	movt	r2, #1
   1518c:	bl	10f8c <error@plt>
   15190:	bl	110e8 <abort@plt>
   15194:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15198:	add	fp, sp, #24
   1519c:	sub	sp, sp, #16
   151a0:	mov	r8, r0
   151a4:	ldr	r0, [fp, #16]
   151a8:	mov	r5, r3
   151ac:	mov	r6, r2
   151b0:	mov	r2, r1
   151b4:	add	r3, sp, #8
   151b8:	mov	r1, #0
   151bc:	str	r0, [sp]
   151c0:	mov	r0, r8
   151c4:	bl	15294 <__assert_fail@plt+0x4194>
   151c8:	cmp	r0, #0
   151cc:	bne	15260 <__assert_fail@plt+0x4160>
   151d0:	ldr	r4, [sp, #8]
   151d4:	ldr	r7, [sp, #12]
   151d8:	subs	r0, r4, r6
   151dc:	sbcs	r0, r7, r5
   151e0:	bcc	15204 <__assert_fail@plt+0x4104>
   151e4:	ldr	r1, [fp, #8]
   151e8:	ldr	r0, [fp, #12]
   151ec:	subs	r1, r1, r4
   151f0:	sbcs	r0, r0, r7
   151f4:	movcs	r0, r4
   151f8:	movcs	r1, r7
   151fc:	subcs	sp, fp, #24
   15200:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15204:	bl	11010 <__errno_location@plt>
   15208:	subs	r1, r4, #1073741824	; 0x40000000
   1520c:	sbcs	r1, r7, #0
   15210:	bcc	1521c <__assert_fail@plt+0x411c>
   15214:	mov	r1, #75	; 0x4b
   15218:	b	15220 <__assert_fail@plt+0x4120>
   1521c:	mov	r1, #34	; 0x22
   15220:	str	r1, [r0]
   15224:	ldr	r6, [r0]
   15228:	ldr	r4, [fp, #24]
   1522c:	ldr	r5, [fp, #20]
   15230:	mov	r0, r8
   15234:	bl	14718 <__assert_fail@plt+0x3618>
   15238:	subs	r1, r6, #22
   1523c:	movw	r2, #26187	; 0x664b
   15240:	str	r0, [sp]
   15244:	mov	r3, r5
   15248:	movne	r1, r6
   1524c:	cmp	r4, #0
   15250:	movt	r2, #1
   15254:	movweq	r4, #1
   15258:	mov	r0, r4
   1525c:	bl	10f8c <error@plt>
   15260:	cmp	r0, #1
   15264:	beq	1527c <__assert_fail@plt+0x417c>
   15268:	cmp	r0, #3
   1526c:	bne	15284 <__assert_fail@plt+0x4184>
   15270:	bl	11010 <__errno_location@plt>
   15274:	mov	r1, #0
   15278:	b	15220 <__assert_fail@plt+0x4120>
   1527c:	bl	11010 <__errno_location@plt>
   15280:	b	15214 <__assert_fail@plt+0x4114>
   15284:	bl	11010 <__errno_location@plt>
   15288:	b	15224 <__assert_fail@plt+0x4124>
   1528c:	mov	r1, #10
   15290:	b	15194 <__assert_fail@plt+0x4094>
   15294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15298:	add	fp, sp, #28
   1529c:	sub	sp, sp, #20
   152a0:	cmp	r2, #37	; 0x25
   152a4:	bcs	15930 <__assert_fail@plt+0x4830>
   152a8:	mov	r8, r3
   152ac:	mov	r5, r2
   152b0:	mov	r6, r1
   152b4:	mov	r4, r0
   152b8:	bl	11010 <__errno_location@plt>
   152bc:	mov	r7, r0
   152c0:	mov	r0, #0
   152c4:	str	r0, [r7]
   152c8:	bl	10fd4 <__ctype_b_loc@plt>
   152cc:	ldr	r1, [r0]
   152d0:	mov	r2, r4
   152d4:	ldrb	r0, [r2], #1
   152d8:	add	r3, r1, r0, lsl #1
   152dc:	ldrb	r3, [r3, #1]
   152e0:	tst	r3, #32
   152e4:	bne	152d4 <__assert_fail@plt+0x41d4>
   152e8:	cmp	r6, #0
   152ec:	add	sl, sp, #16
   152f0:	movne	sl, r6
   152f4:	mov	r6, #4
   152f8:	cmp	r0, #45	; 0x2d
   152fc:	beq	15924 <__assert_fail@plt+0x4824>
   15300:	mov	r0, r4
   15304:	mov	r1, sl
   15308:	mov	r2, r5
   1530c:	str	r8, [sp, #12]
   15310:	bl	1104c <strtoumax@plt>
   15314:	ldr	r5, [sl]
   15318:	cmp	r5, r4
   1531c:	beq	15344 <__assert_fail@plt+0x4244>
   15320:	mov	r8, r0
   15324:	ldr	r0, [r7]
   15328:	mov	r9, r1
   1532c:	cmp	r0, #0
   15330:	beq	15378 <__assert_fail@plt+0x4278>
   15334:	cmp	r0, #34	; 0x22
   15338:	bne	15924 <__assert_fail@plt+0x4824>
   1533c:	mov	r6, #1
   15340:	b	1537c <__assert_fail@plt+0x427c>
   15344:	ldr	r0, [fp, #8]
   15348:	cmp	r0, #0
   1534c:	beq	15924 <__assert_fail@plt+0x4824>
   15350:	ldrb	r1, [r4]
   15354:	cmp	r1, #0
   15358:	beq	15924 <__assert_fail@plt+0x4824>
   1535c:	bl	11004 <strchr@plt>
   15360:	cmp	r0, #0
   15364:	beq	15924 <__assert_fail@plt+0x4824>
   15368:	mov	r6, #0
   1536c:	mov	r8, #1
   15370:	mov	r9, #0
   15374:	b	15388 <__assert_fail@plt+0x4288>
   15378:	mov	r6, r0
   1537c:	ldr	r0, [fp, #8]
   15380:	cmp	r0, #0
   15384:	beq	1591c <__assert_fail@plt+0x481c>
   15388:	ldrb	r7, [r5]
   1538c:	cmp	r7, #0
   15390:	beq	1591c <__assert_fail@plt+0x481c>
   15394:	ldr	r0, [fp, #8]
   15398:	mov	r1, r7
   1539c:	bl	11004 <strchr@plt>
   153a0:	cmp	r0, #0
   153a4:	beq	154ac <__assert_fail@plt+0x43ac>
   153a8:	sub	r0, r7, #69	; 0x45
   153ac:	mov	r1, #1
   153b0:	mov	r3, #0
   153b4:	mov	r4, #1024	; 0x400
   153b8:	cmp	r0, #21
   153bc:	str	r1, [sp, #8]
   153c0:	bhi	153d8 <__assert_fail@plt+0x42d8>
   153c4:	movw	r2, #35141	; 0x8945
   153c8:	mov	r1, #1
   153cc:	movt	r2, #48	; 0x30
   153d0:	tst	r2, r1, lsl r0
   153d4:	bne	153f4 <__assert_fail@plt+0x42f4>
   153d8:	sub	r0, r7, #103	; 0x67
   153dc:	cmp	r0, #13
   153e0:	bhi	15428 <__assert_fail@plt+0x4328>
   153e4:	mov	r1, #1
   153e8:	movw	r2, #8273	; 0x2051
   153ec:	tst	r2, r1, lsl r0
   153f0:	beq	15428 <__assert_fail@plt+0x4328>
   153f4:	ldr	r0, [fp, #8]
   153f8:	mov	r1, #48	; 0x30
   153fc:	bl	11004 <strchr@plt>
   15400:	cmp	r0, #0
   15404:	beq	15424 <__assert_fail@plt+0x4324>
   15408:	ldrb	r0, [r5, #1]
   1540c:	cmp	r0, #66	; 0x42
   15410:	cmpne	r0, #68	; 0x44
   15414:	bne	1553c <__assert_fail@plt+0x443c>
   15418:	mov	r4, #1000	; 0x3e8
   1541c:	mov	r0, #2
   15420:	str	r0, [sp, #8]
   15424:	mov	r3, #0
   15428:	cmp	r7, #89	; 0x59
   1542c:	stm	sp, {r5, r6}
   15430:	bgt	154b8 <__assert_fail@plt+0x43b8>
   15434:	sub	r0, r7, #66	; 0x42
   15438:	cmp	r0, #14
   1543c:	bhi	15560 <__assert_fail@plt+0x4460>
   15440:	add	r1, pc, #0
   15444:	ldr	pc, [r1, r0, lsl #2]
   15448:	andeq	r5, r1, r4, lsl #9
   1544c:	andeq	r5, r1, r0, lsl r8
   15450:	andeq	r5, r1, r0, lsl r8
   15454:	andeq	r5, r1, r4, lsr #16
   15458:	andeq	r5, r1, r0, lsl r8
   1545c:	andeq	r5, r1, r4, lsl r6
   15460:	andeq	r5, r1, r0, lsl r8
   15464:	andeq	r5, r1, r0, lsl r8
   15468:	andeq	r5, r1, r0, lsl r8
   1546c:	andeq	r5, r1, r0, lsl #13
   15470:	andeq	r5, r1, r0, lsl r8
   15474:	andeq	r5, r1, r4, asr #13
   15478:	andeq	r5, r1, r0, lsl r8
   1547c:	andeq	r5, r1, r0, lsl r8
   15480:	muleq	r1, r0, r8
   15484:	mov	r1, #0
   15488:	lsl	r3, r9, #10
   1548c:	lsl	r0, r8, #10
   15490:	lsr	r2, r9, #22
   15494:	cmp	r1, r9, lsr #22
   15498:	orr	r3, r3, r8, lsr #22
   1549c:	mvnne	r0, #0
   154a0:	movwne	r2, #1
   154a4:	cmp	r1, r9, lsr #22
   154a8:	b	1552c <__assert_fail@plt+0x442c>
   154ac:	ldr	r0, [sp, #12]
   154b0:	orr	r6, r6, #2
   154b4:	b	15920 <__assert_fail@plt+0x4820>
   154b8:	cmp	r7, #115	; 0x73
   154bc:	bgt	155dc <__assert_fail@plt+0x44dc>
   154c0:	sub	r0, r7, #98	; 0x62
   154c4:	cmp	r0, #11
   154c8:	bhi	1579c <__assert_fail@plt+0x469c>
   154cc:	add	r1, pc, #4
   154d0:	mov	r2, #0
   154d4:	ldr	pc, [r1, r0, lsl #2]
   154d8:	andeq	r5, r1, r8, lsl #10
   154dc:	strdeq	r5, [r1], -r8
   154e0:	andeq	r5, r1, r0, lsl r8
   154e4:	andeq	r5, r1, r0, lsl r8
   154e8:	andeq	r5, r1, r0, lsl r8
   154ec:	andeq	r5, r1, r4, lsl r6
   154f0:	andeq	r5, r1, r0, lsl r8
   154f4:	andeq	r5, r1, r0, lsl r8
   154f8:	andeq	r5, r1, r0, lsl r8
   154fc:	andeq	r5, r1, r0, lsl #13
   15500:	andeq	r5, r1, r0, lsl r8
   15504:	andeq	r5, r1, r4, asr #13
   15508:	mov	r1, #0
   1550c:	lsl	r3, r9, #9
   15510:	lsl	r0, r8, #9
   15514:	lsr	r2, r9, #23
   15518:	cmp	r1, r9, lsr #23
   1551c:	orr	r3, r3, r8, lsr #23
   15520:	mvnne	r0, #0
   15524:	movwne	r2, #1
   15528:	cmp	r1, r9, lsr #23
   1552c:	mvnne	r3, #0
   15530:	mov	r8, r0
   15534:	mov	r9, r3
   15538:	b	158f8 <__assert_fail@plt+0x47f8>
   1553c:	cmp	r0, #105	; 0x69
   15540:	mov	r3, #0
   15544:	bne	15428 <__assert_fail@plt+0x4328>
   15548:	ldrb	r0, [r5, #2]
   1554c:	mov	r1, #1
   15550:	cmp	r0, #66	; 0x42
   15554:	movweq	r1, #3
   15558:	str	r1, [sp, #8]
   1555c:	b	15428 <__assert_fail@plt+0x4328>
   15560:	cmp	r7, #84	; 0x54
   15564:	beq	15730 <__assert_fail@plt+0x4630>
   15568:	cmp	r7, #89	; 0x59
   1556c:	bne	15810 <__assert_fail@plt+0x4710>
   15570:	mvn	r0, #0
   15574:	mvn	r1, #0
   15578:	mov	r2, r4
   1557c:	mov	r5, r3
   15580:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   15584:	mov	ip, r5
   15588:	mvn	lr, #0
   1558c:	mov	r2, #0
   15590:	mvn	r3, #7
   15594:	mov	r5, r8
   15598:	mov	r7, r9
   1559c:	umull	r8, r6, r5, r4
   155a0:	mvn	r9, #0
   155a4:	mla	r6, r5, ip, r6
   155a8:	subs	r5, r0, r5
   155ac:	sbcs	r5, r1, r7
   155b0:	mov	r5, #0
   155b4:	movwcc	r5, #1
   155b8:	cmp	r5, #0
   155bc:	mlaeq	r9, r7, r4, r6
   155c0:	movne	r8, lr
   155c4:	orrne	r2, r2, #1
   155c8:	adds	r3, r3, #1
   155cc:	mov	r5, r8
   155d0:	mov	r7, r9
   155d4:	bcc	1559c <__assert_fail@plt+0x449c>
   155d8:	b	158f8 <__assert_fail@plt+0x47f8>
   155dc:	cmp	r7, #116	; 0x74
   155e0:	beq	15730 <__assert_fail@plt+0x4630>
   155e4:	cmp	r7, #119	; 0x77
   155e8:	bne	15810 <__assert_fail@plt+0x4710>
   155ec:	lsl	r1, r9, #1
   155f0:	cmp	r9, #0
   155f4:	lsl	r0, r8, #1
   155f8:	lsr	r2, r9, #31
   155fc:	orr	r1, r1, r8, lsr #31
   15600:	mvnmi	r0, #0
   15604:	mvnmi	r1, #0
   15608:	mov	r8, r0
   1560c:	mov	r9, r1
   15610:	b	158f8 <__assert_fail@plt+0x47f8>
   15614:	mvn	r0, #0
   15618:	mvn	r1, #0
   1561c:	mov	r2, r4
   15620:	mov	r5, r3
   15624:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   15628:	mov	ip, r5
   1562c:	mvn	lr, #0
   15630:	mov	r2, #0
   15634:	mvn	r3, #2
   15638:	mov	r6, r8
   1563c:	mov	r5, r9
   15640:	umull	r8, r7, r6, r4
   15644:	mvn	r9, #0
   15648:	mla	r7, r6, ip, r7
   1564c:	subs	r6, r0, r6
   15650:	sbcs	r6, r1, r5
   15654:	mov	r6, #0
   15658:	movwcc	r6, #1
   1565c:	cmp	r6, #0
   15660:	mlaeq	r9, r5, r4, r7
   15664:	movne	r8, lr
   15668:	orrne	r2, r2, #1
   1566c:	adds	r3, r3, #1
   15670:	mov	r6, r8
   15674:	mov	r5, r9
   15678:	bcc	15640 <__assert_fail@plt+0x4540>
   1567c:	b	158f8 <__assert_fail@plt+0x47f8>
   15680:	mvn	r0, #0
   15684:	mvn	r1, #0
   15688:	mov	r2, r4
   1568c:	mov	r5, r3
   15690:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   15694:	subs	r0, r0, r8
   15698:	mov	r2, #0
   1569c:	sbcs	r0, r1, r9
   156a0:	umull	r0, r1, r8, r4
   156a4:	movwcc	r2, #1
   156a8:	cmp	r2, #0
   156ac:	mla	r1, r8, r5, r1
   156b0:	mvnne	r0, #0
   156b4:	mla	r9, r9, r4, r1
   156b8:	mvnne	r9, #0
   156bc:	mov	r8, r0
   156c0:	b	158f8 <__assert_fail@plt+0x47f8>
   156c4:	mvn	r0, #0
   156c8:	mvn	r1, #0
   156cc:	mov	r2, r4
   156d0:	mov	r5, r3
   156d4:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   156d8:	mov	ip, r5
   156dc:	mvn	lr, #0
   156e0:	mov	r2, #0
   156e4:	mvn	r3, #1
   156e8:	mov	r6, r8
   156ec:	mov	r5, r9
   156f0:	umull	r8, r7, r6, r4
   156f4:	mvn	r9, #0
   156f8:	mla	r7, r6, ip, r7
   156fc:	subs	r6, r0, r6
   15700:	sbcs	r6, r1, r5
   15704:	mov	r6, #0
   15708:	movwcc	r6, #1
   1570c:	cmp	r6, #0
   15710:	mlaeq	r9, r5, r4, r7
   15714:	movne	r8, lr
   15718:	orrne	r2, r2, #1
   1571c:	adds	r3, r3, #1
   15720:	mov	r6, r8
   15724:	mov	r5, r9
   15728:	bcc	156f0 <__assert_fail@plt+0x45f0>
   1572c:	b	158f8 <__assert_fail@plt+0x47f8>
   15730:	mvn	r0, #0
   15734:	mvn	r1, #0
   15738:	mov	r2, r4
   1573c:	mov	r5, r3
   15740:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   15744:	mov	ip, r5
   15748:	mvn	lr, #0
   1574c:	mov	r2, #0
   15750:	mvn	r3, #3
   15754:	mov	r6, r8
   15758:	mov	r5, r9
   1575c:	umull	r8, r7, r6, r4
   15760:	mvn	r9, #0
   15764:	mla	r7, r6, ip, r7
   15768:	subs	r6, r0, r6
   1576c:	sbcs	r6, r1, r5
   15770:	mov	r6, #0
   15774:	movwcc	r6, #1
   15778:	cmp	r6, #0
   1577c:	mlaeq	r9, r5, r4, r7
   15780:	movne	r8, lr
   15784:	orrne	r2, r2, #1
   15788:	adds	r3, r3, #1
   1578c:	mov	r6, r8
   15790:	mov	r5, r9
   15794:	bcc	1575c <__assert_fail@plt+0x465c>
   15798:	b	158f8 <__assert_fail@plt+0x47f8>
   1579c:	cmp	r7, #90	; 0x5a
   157a0:	bne	15810 <__assert_fail@plt+0x4710>
   157a4:	mvn	r0, #0
   157a8:	mvn	r1, #0
   157ac:	mov	r2, r4
   157b0:	mov	r5, r3
   157b4:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   157b8:	mov	ip, r5
   157bc:	mvn	lr, #0
   157c0:	mov	r2, #0
   157c4:	mvn	r3, #6
   157c8:	mov	r5, r8
   157cc:	mov	r7, r9
   157d0:	umull	r8, r6, r5, r4
   157d4:	mvn	r9, #0
   157d8:	mla	r6, r5, ip, r6
   157dc:	subs	r5, r0, r5
   157e0:	sbcs	r5, r1, r7
   157e4:	mov	r5, #0
   157e8:	movwcc	r5, #1
   157ec:	cmp	r5, #0
   157f0:	mlaeq	r9, r7, r4, r6
   157f4:	movne	r8, lr
   157f8:	orrne	r2, r2, #1
   157fc:	adds	r3, r3, #1
   15800:	mov	r5, r8
   15804:	mov	r7, r9
   15808:	bcc	157d0 <__assert_fail@plt+0x46d0>
   1580c:	b	158f8 <__assert_fail@plt+0x47f8>
   15810:	ldr	r0, [sp, #12]
   15814:	strd	r8, [r0]
   15818:	ldr	r6, [sp, #4]
   1581c:	orr	r6, r6, #2
   15820:	b	15924 <__assert_fail@plt+0x4824>
   15824:	mvn	r0, #0
   15828:	mvn	r1, #0
   1582c:	mov	r2, r4
   15830:	mov	r5, r3
   15834:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   15838:	mov	ip, r5
   1583c:	mvn	lr, #0
   15840:	mov	r2, #0
   15844:	mvn	r3, #5
   15848:	mov	r5, r8
   1584c:	mov	r7, r9
   15850:	umull	r8, r6, r5, r4
   15854:	mvn	r9, #0
   15858:	mla	r6, r5, ip, r6
   1585c:	subs	r5, r0, r5
   15860:	sbcs	r5, r1, r7
   15864:	mov	r5, #0
   15868:	movwcc	r5, #1
   1586c:	cmp	r5, #0
   15870:	mlaeq	r9, r7, r4, r6
   15874:	movne	r8, lr
   15878:	orrne	r2, r2, #1
   1587c:	adds	r3, r3, #1
   15880:	mov	r5, r8
   15884:	mov	r7, r9
   15888:	bcc	15850 <__assert_fail@plt+0x4750>
   1588c:	b	158f8 <__assert_fail@plt+0x47f8>
   15890:	mvn	r0, #0
   15894:	mvn	r1, #0
   15898:	mov	r2, r4
   1589c:	mov	r5, r3
   158a0:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   158a4:	mov	ip, r5
   158a8:	mvn	lr, #0
   158ac:	mov	r2, #0
   158b0:	mvn	r3, #4
   158b4:	mov	r5, r8
   158b8:	mov	r7, r9
   158bc:	umull	r8, r6, r5, r4
   158c0:	mvn	r9, #0
   158c4:	mla	r6, r5, ip, r6
   158c8:	subs	r5, r0, r5
   158cc:	sbcs	r5, r1, r7
   158d0:	mov	r5, #0
   158d4:	movwcc	r5, #1
   158d8:	cmp	r5, #0
   158dc:	mlaeq	r9, r7, r4, r6
   158e0:	movne	r8, lr
   158e4:	orrne	r2, r2, #1
   158e8:	adds	r3, r3, #1
   158ec:	mov	r5, r8
   158f0:	mov	r7, r9
   158f4:	bcc	158bc <__assert_fail@plt+0x47bc>
   158f8:	ldr	r1, [sp]
   158fc:	ldr	r3, [sp, #8]
   15900:	ldr	r6, [sp, #4]
   15904:	add	r0, r1, r3
   15908:	orr	r6, r2, r6
   1590c:	str	r0, [sl]
   15910:	ldrb	r0, [r1, r3]
   15914:	cmp	r0, #0
   15918:	orrne	r6, r6, #2
   1591c:	ldr	r0, [sp, #12]
   15920:	strd	r8, [r0]
   15924:	mov	r0, r6
   15928:	sub	sp, fp, #28
   1592c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15930:	movw	r0, #27245	; 0x6a6d
   15934:	movw	r1, #27283	; 0x6a93
   15938:	movw	r3, #27299	; 0x6aa3
   1593c:	mov	r2, #85	; 0x55
   15940:	movt	r0, #1
   15944:	movt	r1, #1
   15948:	movt	r3, #1
   1594c:	bl	11100 <__assert_fail@plt>
   15950:	clz	r2, r1
   15954:	clz	r3, r0
   15958:	lsr	r2, r2, #5
   1595c:	lsr	r3, r3, #5
   15960:	orrs	r2, r3, r2
   15964:	movwne	r1, #1
   15968:	movwne	r0, #1
   1596c:	cmp	r1, #0
   15970:	beq	159a0 <__assert_fail@plt+0x48a0>
   15974:	mvn	r2, #-2147483648	; 0x80000000
   15978:	udiv	r2, r2, r1
   1597c:	cmp	r2, r0
   15980:	bcs	159a0 <__assert_fail@plt+0x48a0>
   15984:	push	{fp, lr}
   15988:	mov	fp, sp
   1598c:	bl	11010 <__errno_location@plt>
   15990:	mov	r1, #12
   15994:	str	r1, [r0]
   15998:	mov	r0, #0
   1599c:	pop	{fp, pc}
   159a0:	b	10e84 <calloc@plt>
   159a4:	cmp	r0, #0
   159a8:	movweq	r0, #1
   159ac:	cmn	r0, #1
   159b0:	ble	159b8 <__assert_fail@plt+0x48b8>
   159b4:	b	10f98 <malloc@plt>
   159b8:	push	{fp, lr}
   159bc:	mov	fp, sp
   159c0:	bl	11010 <__errno_location@plt>
   159c4:	mov	r1, #12
   159c8:	str	r1, [r0]
   159cc:	mov	r0, #0
   159d0:	pop	{fp, pc}
   159d4:	push	{fp, lr}
   159d8:	mov	fp, sp
   159dc:	cmp	r0, #0
   159e0:	beq	159fc <__assert_fail@plt+0x48fc>
   159e4:	cmp	r1, #0
   159e8:	beq	15a08 <__assert_fail@plt+0x4908>
   159ec:	cmn	r1, #1
   159f0:	ble	15a10 <__assert_fail@plt+0x4910>
   159f4:	pop	{fp, lr}
   159f8:	b	10f2c <realloc@plt>
   159fc:	mov	r0, r1
   15a00:	pop	{fp, lr}
   15a04:	b	159a4 <__assert_fail@plt+0x48a4>
   15a08:	bl	15aa4 <__assert_fail@plt+0x49a4>
   15a0c:	b	15a1c <__assert_fail@plt+0x491c>
   15a10:	bl	11010 <__errno_location@plt>
   15a14:	mov	r1, #12
   15a18:	str	r1, [r0]
   15a1c:	mov	r0, #0
   15a20:	pop	{fp, pc}
   15a24:	push	{r4, r5, r6, sl, fp, lr}
   15a28:	add	fp, sp, #16
   15a2c:	mov	r4, r0
   15a30:	bl	10f68 <__fpending@plt>
   15a34:	mov	r5, r0
   15a38:	mov	r0, r4
   15a3c:	bl	10f74 <ferror_unlocked@plt>
   15a40:	mov	r6, r0
   15a44:	mov	r0, r4
   15a48:	bl	12b90 <__assert_fail@plt+0x1a90>
   15a4c:	cmp	r6, #0
   15a50:	beq	15a70 <__assert_fail@plt+0x4970>
   15a54:	mvn	r4, #0
   15a58:	cmp	r0, #0
   15a5c:	bne	15a9c <__assert_fail@plt+0x499c>
   15a60:	bl	11010 <__errno_location@plt>
   15a64:	mov	r1, #0
   15a68:	str	r1, [r0]
   15a6c:	b	15a9c <__assert_fail@plt+0x499c>
   15a70:	cmp	r0, #0
   15a74:	mov	r4, r0
   15a78:	mvnne	r4, #0
   15a7c:	cmp	r5, #0
   15a80:	bne	15a9c <__assert_fail@plt+0x499c>
   15a84:	cmp	r0, #0
   15a88:	beq	15a9c <__assert_fail@plt+0x499c>
   15a8c:	bl	11010 <__errno_location@plt>
   15a90:	ldr	r0, [r0]
   15a94:	subs	r4, r0, #9
   15a98:	mvnne	r4, #0
   15a9c:	mov	r0, r4
   15aa0:	pop	{r4, r5, r6, sl, fp, pc}
   15aa4:	push	{r4, r5, r6, sl, fp, lr}
   15aa8:	add	fp, sp, #16
   15aac:	mov	r4, r0
   15ab0:	bl	11010 <__errno_location@plt>
   15ab4:	ldr	r6, [r0]
   15ab8:	mov	r5, r0
   15abc:	mov	r0, r4
   15ac0:	bl	10ed8 <free@plt>
   15ac4:	str	r6, [r5]
   15ac8:	pop	{r4, r5, r6, sl, fp, pc}
   15acc:	push	{fp, lr}
   15ad0:	mov	fp, sp
   15ad4:	mov	r0, #14
   15ad8:	bl	110a0 <nl_langinfo@plt>
   15adc:	movw	r1, #25777	; 0x64b1
   15ae0:	cmp	r0, #0
   15ae4:	movt	r1, #1
   15ae8:	movne	r1, r0
   15aec:	movw	r0, #27378	; 0x6af2
   15af0:	ldrb	r2, [r1]
   15af4:	movt	r0, #1
   15af8:	cmp	r2, #0
   15afc:	movne	r0, r1
   15b00:	pop	{fp, pc}
   15b04:	push	{r4, r5, r6, r7, fp, lr}
   15b08:	add	fp, sp, #16
   15b0c:	sub	sp, sp, #8
   15b10:	cmp	r0, #0
   15b14:	add	r5, sp, #4
   15b18:	mov	r7, r2
   15b1c:	mov	r4, r1
   15b20:	movne	r5, r0
   15b24:	mov	r0, r5
   15b28:	bl	10f80 <mbrtowc@plt>
   15b2c:	mov	r6, r0
   15b30:	cmp	r7, #0
   15b34:	beq	15b5c <__assert_fail@plt+0x4a5c>
   15b38:	cmn	r6, #2
   15b3c:	bcc	15b5c <__assert_fail@plt+0x4a5c>
   15b40:	mov	r0, #0
   15b44:	bl	15ba4 <__assert_fail@plt+0x4aa4>
   15b48:	cmp	r0, #0
   15b4c:	bne	15b5c <__assert_fail@plt+0x4a5c>
   15b50:	ldrb	r0, [r4]
   15b54:	mov	r6, #1
   15b58:	str	r0, [r5]
   15b5c:	mov	r0, r6
   15b60:	sub	sp, fp, #16
   15b64:	pop	{r4, r5, r6, r7, fp, pc}
   15b68:	cmp	r2, #0
   15b6c:	beq	15b9c <__assert_fail@plt+0x4a9c>
   15b70:	mvn	r3, #0
   15b74:	udiv	r3, r3, r2
   15b78:	cmp	r3, r1
   15b7c:	bcs	15b9c <__assert_fail@plt+0x4a9c>
   15b80:	push	{fp, lr}
   15b84:	mov	fp, sp
   15b88:	bl	11010 <__errno_location@plt>
   15b8c:	mov	r1, #12
   15b90:	str	r1, [r0]
   15b94:	mov	r0, #0
   15b98:	pop	{fp, pc}
   15b9c:	mul	r1, r2, r1
   15ba0:	b	159d4 <__assert_fail@plt+0x48d4>
   15ba4:	push	{r4, sl, fp, lr}
   15ba8:	add	fp, sp, #8
   15bac:	sub	sp, sp, #264	; 0x108
   15bb0:	add	r1, sp, #7
   15bb4:	movw	r2, #257	; 0x101
   15bb8:	bl	15c10 <__assert_fail@plt+0x4b10>
   15bbc:	mov	r4, #0
   15bc0:	cmp	r0, #0
   15bc4:	bne	15c04 <__assert_fail@plt+0x4b04>
   15bc8:	movw	r1, #27384	; 0x6af8
   15bcc:	add	r0, sp, #7
   15bd0:	mov	r2, #2
   15bd4:	movt	r1, #1
   15bd8:	bl	10fec <bcmp@plt>
   15bdc:	cmp	r0, #0
   15be0:	beq	15c04 <__assert_fail@plt+0x4b04>
   15be4:	movw	r1, #27386	; 0x6afa
   15be8:	add	r0, sp, #7
   15bec:	mov	r2, #6
   15bf0:	movt	r1, #1
   15bf4:	bl	10fec <bcmp@plt>
   15bf8:	cmp	r0, #0
   15bfc:	mov	r4, r0
   15c00:	movwne	r4, #1
   15c04:	mov	r0, r4
   15c08:	sub	sp, fp, #8
   15c0c:	pop	{r4, sl, fp, pc}
   15c10:	push	{r4, r5, r6, r7, fp, lr}
   15c14:	add	fp, sp, #16
   15c18:	mov	r4, r1
   15c1c:	mov	r1, #0
   15c20:	mov	r6, r2
   15c24:	bl	11088 <setlocale@plt>
   15c28:	cmp	r0, #0
   15c2c:	beq	15c58 <__assert_fail@plt+0x4b58>
   15c30:	mov	r7, r0
   15c34:	bl	10ff8 <strlen@plt>
   15c38:	cmp	r0, r6
   15c3c:	bcs	15c6c <__assert_fail@plt+0x4b6c>
   15c40:	add	r2, r0, #1
   15c44:	mov	r0, r4
   15c48:	mov	r1, r7
   15c4c:	bl	10ef0 <memcpy@plt>
   15c50:	mov	r5, #0
   15c54:	b	15c94 <__assert_fail@plt+0x4b94>
   15c58:	cmp	r6, #0
   15c5c:	mov	r5, #22
   15c60:	movne	r0, #0
   15c64:	strbne	r0, [r4]
   15c68:	b	15c94 <__assert_fail@plt+0x4b94>
   15c6c:	mov	r5, #34	; 0x22
   15c70:	cmp	r6, #0
   15c74:	beq	15c94 <__assert_fail@plt+0x4b94>
   15c78:	sub	r6, r6, #1
   15c7c:	mov	r0, r4
   15c80:	mov	r1, r7
   15c84:	mov	r2, r6
   15c88:	bl	10ef0 <memcpy@plt>
   15c8c:	mov	r0, #0
   15c90:	strb	r0, [r4, r6]
   15c94:	mov	r0, r5
   15c98:	pop	{r4, r5, r6, r7, fp, pc}
   15c9c:	mov	r1, #0
   15ca0:	b	11088 <setlocale@plt>
   15ca4:	cmp	r3, #0
   15ca8:	cmpeq	r2, #0
   15cac:	bne	15cc4 <__assert_fail@plt+0x4bc4>
   15cb0:	cmp	r1, #0
   15cb4:	cmpeq	r0, #0
   15cb8:	mvnne	r1, #0
   15cbc:	mvnne	r0, #0
   15cc0:	b	15ce0 <__assert_fail@plt+0x4be0>
   15cc4:	sub	sp, sp, #8
   15cc8:	push	{sp, lr}
   15ccc:	bl	15cf0 <__assert_fail@plt+0x4bf0>
   15cd0:	ldr	lr, [sp, #4]
   15cd4:	add	sp, sp, #8
   15cd8:	pop	{r2, r3}
   15cdc:	bx	lr
   15ce0:	push	{r1, lr}
   15ce4:	mov	r0, #8
   15ce8:	bl	10e9c <raise@plt>
   15cec:	pop	{r1, pc}
   15cf0:	cmp	r1, r3
   15cf4:	cmpeq	r0, r2
   15cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cfc:	mov	r4, r0
   15d00:	movcc	r0, #0
   15d04:	mov	r5, r1
   15d08:	ldr	lr, [sp, #36]	; 0x24
   15d0c:	movcc	r1, r0
   15d10:	bcc	15e0c <__assert_fail@plt+0x4d0c>
   15d14:	cmp	r3, #0
   15d18:	clzeq	ip, r2
   15d1c:	clzne	ip, r3
   15d20:	addeq	ip, ip, #32
   15d24:	cmp	r5, #0
   15d28:	clzeq	r1, r4
   15d2c:	addeq	r1, r1, #32
   15d30:	clzne	r1, r5
   15d34:	sub	ip, ip, r1
   15d38:	sub	sl, ip, #32
   15d3c:	lsl	r9, r3, ip
   15d40:	rsb	fp, ip, #32
   15d44:	orr	r9, r9, r2, lsl sl
   15d48:	orr	r9, r9, r2, lsr fp
   15d4c:	lsl	r8, r2, ip
   15d50:	cmp	r5, r9
   15d54:	cmpeq	r4, r8
   15d58:	movcc	r0, #0
   15d5c:	movcc	r1, r0
   15d60:	bcc	15d7c <__assert_fail@plt+0x4c7c>
   15d64:	mov	r0, #1
   15d68:	subs	r4, r4, r8
   15d6c:	lsl	r1, r0, sl
   15d70:	orr	r1, r1, r0, lsr fp
   15d74:	lsl	r0, r0, ip
   15d78:	sbc	r5, r5, r9
   15d7c:	cmp	ip, #0
   15d80:	beq	15e0c <__assert_fail@plt+0x4d0c>
   15d84:	lsr	r6, r8, #1
   15d88:	orr	r6, r6, r9, lsl #31
   15d8c:	lsr	r7, r9, #1
   15d90:	mov	r2, ip
   15d94:	b	15db8 <__assert_fail@plt+0x4cb8>
   15d98:	subs	r3, r4, r6
   15d9c:	sbc	r8, r5, r7
   15da0:	adds	r3, r3, r3
   15da4:	adc	r8, r8, r8
   15da8:	adds	r4, r3, #1
   15dac:	adc	r5, r8, #0
   15db0:	subs	r2, r2, #1
   15db4:	beq	15dd4 <__assert_fail@plt+0x4cd4>
   15db8:	cmp	r5, r7
   15dbc:	cmpeq	r4, r6
   15dc0:	bcs	15d98 <__assert_fail@plt+0x4c98>
   15dc4:	adds	r4, r4, r4
   15dc8:	adc	r5, r5, r5
   15dcc:	subs	r2, r2, #1
   15dd0:	bne	15db8 <__assert_fail@plt+0x4cb8>
   15dd4:	lsr	r3, r4, ip
   15dd8:	orr	r3, r3, r5, lsl fp
   15ddc:	lsr	r2, r5, ip
   15de0:	orr	r3, r3, r5, lsr sl
   15de4:	adds	r0, r0, r4
   15de8:	mov	r4, r3
   15dec:	lsl	r3, r2, ip
   15df0:	orr	r3, r3, r4, lsl sl
   15df4:	lsl	ip, r4, ip
   15df8:	orr	r3, r3, r4, lsr fp
   15dfc:	adc	r1, r1, r5
   15e00:	subs	r0, r0, ip
   15e04:	mov	r5, r2
   15e08:	sbc	r1, r1, r3
   15e0c:	cmp	lr, #0
   15e10:	strdne	r4, [lr]
   15e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e1c:	mov	r7, r0
   15e20:	ldr	r6, [pc, #72]	; 15e70 <__assert_fail@plt+0x4d70>
   15e24:	ldr	r5, [pc, #72]	; 15e74 <__assert_fail@plt+0x4d74>
   15e28:	add	r6, pc, r6
   15e2c:	add	r5, pc, r5
   15e30:	sub	r6, r6, r5
   15e34:	mov	r8, r1
   15e38:	mov	r9, r2
   15e3c:	bl	10e64 <calloc@plt-0x20>
   15e40:	asrs	r6, r6, #2
   15e44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e48:	mov	r4, #0
   15e4c:	add	r4, r4, #1
   15e50:	ldr	r3, [r5], #4
   15e54:	mov	r2, r9
   15e58:	mov	r1, r8
   15e5c:	mov	r0, r7
   15e60:	blx	r3
   15e64:	cmp	r6, r4
   15e68:	bne	15e4c <__assert_fail@plt+0x4d4c>
   15e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e70:	ldrdeq	r1, [r1], -ip
   15e74:	ldrdeq	r1, [r1], -r4
   15e78:	bx	lr
   15e7c:	ldr	r3, [pc, #12]	; 15e90 <__assert_fail@plt+0x4d90>
   15e80:	mov	r1, #0
   15e84:	add	r3, pc, r3
   15e88:	ldr	r2, [r3]
   15e8c:	b	1101c <__cxa_atexit@plt>
   15e90:	andeq	r1, r1, r0, ror #4

Disassembly of section .fini:

00015e94 <.fini>:
   15e94:	push	{r3, lr}
   15e98:	pop	{r3, pc}
