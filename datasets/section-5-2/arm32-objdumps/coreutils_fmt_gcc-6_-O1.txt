
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	10f80 <__assert_fail@plt+0x48>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r7, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <fflush@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <__memmove_chk@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <__strtoull_internal@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <fwrite_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <memcmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <fputc_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <dcgettext@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <realloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <textdomain@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <iswprint@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <fwrite@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <lseek64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <__ctype_get_mb_cur_max@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <__fpending@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <mbrtowc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <error@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <malloc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <__libc_start_main@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <__freading@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__gmon_start__@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <getopt_long@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__ctype_b_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <exit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <__errno_location@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <__cxa_atexit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <memset@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <__printf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__fprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <__uflow@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <__overflow@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <setlocale@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <strrchr@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <nl_langinfo@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <clearerr_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <fopen64@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #420]!	; 0x1a4

00010f38 <__assert_fail@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #412]!	; 0x19c

Disassembly of section .text:

00010f44 <.text>:
   10f44:	mov	fp, #0
   10f48:	mov	lr, #0
   10f4c:	pop	{r1}		; (ldr r1, [sp], #4)
   10f50:	mov	r2, sp
   10f54:	push	{r2}		; (str r2, [sp, #-4]!)
   10f58:	push	{r0}		; (str r0, [sp, #-4]!)
   10f5c:	ldr	ip, [pc, #16]	; 10f74 <__assert_fail@plt+0x3c>
   10f60:	push	{ip}		; (str ip, [sp, #-4]!)
   10f64:	ldr	r0, [pc, #12]	; 10f78 <__assert_fail@plt+0x40>
   10f68:	ldr	r3, [pc, #12]	; 10f7c <__assert_fail@plt+0x44>
   10f6c:	bl	10e00 <__libc_start_main@plt>
   10f70:	bl	10f2c <abort@plt>
   10f74:	strdeq	r6, [r1], -r8
   10f78:	andeq	r2, r1, ip, lsl #8
   10f7c:	muleq	r1, r8, r3
   10f80:	ldr	r3, [pc, #20]	; 10f9c <__assert_fail@plt+0x64>
   10f84:	ldr	r2, [pc, #20]	; 10fa0 <__assert_fail@plt+0x68>
   10f88:	add	r3, pc, r3
   10f8c:	ldr	r2, [r3, r2]
   10f90:	cmp	r2, #0
   10f94:	bxeq	lr
   10f98:	b	10e18 <__gmon_start__@plt>
   10f9c:	andeq	r7, r1, r0, ror r0
   10fa0:	andeq	r0, r0, r0, ror #1
   10fa4:	ldr	r3, [pc, #28]	; 10fc8 <__assert_fail@plt+0x90>
   10fa8:	ldr	r0, [pc, #28]	; 10fcc <__assert_fail@plt+0x94>
   10fac:	sub	r3, r3, r0
   10fb0:	cmp	r3, #6
   10fb4:	bxls	lr
   10fb8:	ldr	r3, [pc, #16]	; 10fd0 <__assert_fail@plt+0x98>
   10fbc:	cmp	r3, #0
   10fc0:	bxeq	lr
   10fc4:	bx	r3
   10fc8:	andeq	r8, r2, r7, lsr r1
   10fcc:	andeq	r8, r2, r4, lsr r1
   10fd0:	andeq	r0, r0, r0
   10fd4:	ldr	r1, [pc, #36]	; 11000 <__assert_fail@plt+0xc8>
   10fd8:	ldr	r0, [pc, #36]	; 11004 <__assert_fail@plt+0xcc>
   10fdc:	sub	r1, r1, r0
   10fe0:	asr	r1, r1, #2
   10fe4:	add	r1, r1, r1, lsr #31
   10fe8:	asrs	r1, r1, #1
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0xd0>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	r8, r2, r4, lsr r1
   11004:	andeq	r8, r2, r4, lsr r1
   11008:	andeq	r0, r0, r0
   1100c:	push	{r4, lr}
   11010:	ldr	r4, [pc, #24]	; 11030 <__assert_fail@plt+0xf8>
   11014:	ldrb	r3, [r4]
   11018:	cmp	r3, #0
   1101c:	popne	{r4, pc}
   11020:	bl	10fa4 <__assert_fail@plt+0x6c>
   11024:	mov	r3, #1
   11028:	strb	r3, [r4]
   1102c:	pop	{r4, pc}
   11030:	andeq	r8, r2, ip, asr r1
   11034:	ldr	r0, [pc, #40]	; 11064 <__assert_fail@plt+0x12c>
   11038:	ldr	r3, [r0]
   1103c:	cmp	r3, #0
   11040:	bne	11048 <__assert_fail@plt+0x110>
   11044:	b	10fd4 <__assert_fail@plt+0x9c>
   11048:	ldr	r3, [pc, #24]	; 11068 <__assert_fail@plt+0x130>
   1104c:	cmp	r3, #0
   11050:	beq	11044 <__assert_fail@plt+0x10c>
   11054:	push	{r4, lr}
   11058:	blx	r3
   1105c:	pop	{r4, lr}
   11060:	b	10fd4 <__assert_fail@plt+0x9c>
   11064:	andeq	r7, r2, r4, lsl pc
   11068:	andeq	r0, r0, r0
   1106c:	ldr	r3, [pc, #184]	; 1112c <__assert_fail@plt+0x1f4>
   11070:	ldrb	r3, [r3]
   11074:	cmp	r3, #0
   11078:	bne	110a8 <__assert_fail@plt+0x170>
   1107c:	ldr	r3, [pc, #168]	; 1112c <__assert_fail@plt+0x1f4>
   11080:	ldrb	r3, [r3, #12]
   11084:	cmp	r3, #0
   11088:	beq	110b8 <__assert_fail@plt+0x180>
   1108c:	cmp	r0, #0
   11090:	ldr	r3, [pc, #148]	; 1112c <__assert_fail@plt+0x1f4>
   11094:	ldrne	r2, [r3, #16]
   11098:	ldreq	r2, [r3, #8]
   1109c:	ldr	r3, [pc, #136]	; 1112c <__assert_fail@plt+0x1f4>
   110a0:	str	r2, [r3, #4]
   110a4:	bx	lr
   110a8:	ldr	r3, [pc, #124]	; 1112c <__assert_fail@plt+0x1f4>
   110ac:	ldr	r2, [r3, #8]
   110b0:	str	r2, [r3, #4]
   110b4:	bx	lr
   110b8:	ldr	r3, [pc, #108]	; 1112c <__assert_fail@plt+0x1f4>
   110bc:	ldrb	r3, [r3, #20]
   110c0:	cmp	r3, #0
   110c4:	beq	1111c <__assert_fail@plt+0x1e4>
   110c8:	cmp	r0, #0
   110cc:	beq	110f0 <__assert_fail@plt+0x1b8>
   110d0:	ldr	r3, [pc, #84]	; 1112c <__assert_fail@plt+0x1f4>
   110d4:	ldr	r2, [r3, #16]
   110d8:	ldr	r3, [r3, #8]
   110dc:	cmp	r2, r3
   110e0:	beq	110f0 <__assert_fail@plt+0x1b8>
   110e4:	ldr	r3, [pc, #64]	; 1112c <__assert_fail@plt+0x1f4>
   110e8:	str	r2, [r3, #4]
   110ec:	bx	lr
   110f0:	ldr	r2, [pc, #52]	; 1112c <__assert_fail@plt+0x1f4>
   110f4:	ldr	r3, [r2, #4]
   110f8:	ldr	r2, [r2, #8]
   110fc:	cmp	r3, r2
   11100:	bxne	lr
   11104:	cmp	r3, #0
   11108:	moveq	r3, #3
   1110c:	movne	r3, #0
   11110:	ldr	r2, [pc, #20]	; 1112c <__assert_fail@plt+0x1f4>
   11114:	str	r3, [r2, #4]
   11118:	bx	lr
   1111c:	ldr	r3, [pc, #8]	; 1112c <__assert_fail@plt+0x1f4>
   11120:	ldr	r2, [r3, #8]
   11124:	str	r2, [r3, #4]
   11128:	bx	lr
   1112c:	andeq	r8, r2, r0, ror #2
   11130:	ldr	r3, [pc, #72]	; 11180 <__assert_fail@plt+0x248>
   11134:	ldr	r2, [r3, #24]
   11138:	ldr	r3, [r3, #28]
   1113c:	cmp	r2, r3
   11140:	beq	1114c <__assert_fail@plt+0x214>
   11144:	mov	r0, #0
   11148:	bx	lr
   1114c:	ldr	r3, [pc, #44]	; 11180 <__assert_fail@plt+0x248>
   11150:	ldr	r1, [r3, #32]
   11154:	add	r2, r2, r1
   11158:	ldr	r3, [r3, #16]
   1115c:	cmp	r2, r3
   11160:	bgt	11178 <__assert_fail@plt+0x240>
   11164:	cmp	r0, #10
   11168:	cmnne	r0, #1
   1116c:	movne	r0, #1
   11170:	moveq	r0, #0
   11174:	bx	lr
   11178:	mov	r0, #0
   1117c:	bx	lr
   11180:	andeq	r8, r2, r0, ror #2
   11184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11188:	sub	sp, sp, #28
   1118c:	ldr	r3, [pc, #492]	; 11380 <__assert_fail@plt+0x448>
   11190:	ldr	r4, [r3, #36]	; 0x24
   11194:	mov	r2, #0
   11198:	str	r2, [r4, #20]
   1119c:	ldr	r2, [r4, #4]
   111a0:	str	r2, [sp, #20]
   111a4:	ldr	r9, [r3, #40]	; 0x28
   111a8:	str	r9, [r4, #4]
   111ac:	sub	r5, r4, #28
   111b0:	add	r3, r3, #44	; 0x2c
   111b4:	cmp	r5, r3
   111b8:	bcc	11370 <__assert_fail@plt+0x438>
   111bc:	sub	r3, r3, #44	; 0x2c
   111c0:	ldr	r2, [r3, #4]
   111c4:	str	r2, [sp, #12]
   111c8:	ldr	r3, [r3, #8]
   111cc:	str	r3, [sp, #8]
   111d0:	ldr	r3, [pc, #428]	; 11384 <__assert_fail@plt+0x44c>
   111d4:	ldr	sl, [r3, #3492]	; 0xda4
   111d8:	ldr	fp, [r3, #3496]	; 0xda8
   111dc:	ldr	r3, [pc, #412]	; 11380 <__assert_fail@plt+0x448>
   111e0:	add	r8, r3, #44	; 0x2c
   111e4:	add	r3, r3, #72	; 0x48
   111e8:	str	r3, [sp, #16]
   111ec:	b	11300 <__assert_fail@plt+0x3c8>
   111f0:	mov	r3, #0
   111f4:	ldr	r2, [r1, #20]
   111f8:	add	r3, r3, r2
   111fc:	cmp	r5, r8
   11200:	beq	11278 <__assert_fail@plt+0x340>
   11204:	cmp	r3, r6
   11208:	strlt	r1, [r5, #24]
   1120c:	strlt	r0, [r5, #16]
   11210:	movlt	r6, r3
   11214:	cmp	r4, r1
   11218:	beq	11294 <__assert_fail@plt+0x35c>
   1121c:	ldr	r3, [r1, #-20]	; 0xffffffec
   11220:	ldr	r2, [r1, #4]
   11224:	add	r3, r3, r2
   11228:	add	r0, r0, r3
   1122c:	cmp	r9, r0
   11230:	ble	11294 <__assert_fail@plt+0x35c>
   11234:	add	r1, r1, #28
   11238:	cmp	r4, r1
   1123c:	beq	111f0 <__assert_fail@plt+0x2b8>
   11240:	sub	r3, sl, r0
   11244:	add	r3, r3, r3, lsl #2
   11248:	lsl	r3, r3, #1
   1124c:	mul	r3, r3, r3
   11250:	ldr	r2, [r1, #24]
   11254:	cmp	r4, r2
   11258:	beq	111f4 <__assert_fail@plt+0x2bc>
   1125c:	ldr	r2, [r1, #16]
   11260:	sub	r2, r0, r2
   11264:	add	r2, r2, r2, lsl #2
   11268:	lsl	r2, r2, #1
   1126c:	mul	r2, r2, r2
   11270:	add	r3, r3, r2, asr #1
   11274:	b	111f4 <__assert_fail@plt+0x2bc>
   11278:	cmp	fp, #0
   1127c:	subgt	r2, r0, fp
   11280:	addgt	r2, r2, r2, lsl #2
   11284:	lslgt	r2, r2, #1
   11288:	mulgt	r2, r2, r2
   1128c:	addgt	r3, r3, r2, asr #1
   11290:	b	11204 <__assert_fail@plt+0x2cc>
   11294:	cmp	r5, r8
   11298:	ldrls	r7, [pc, #232]	; 11388 <__assert_fail@plt+0x450>
   1129c:	bls	112c0 <__assert_fail@plt+0x388>
   112a0:	ldrb	r7, [r5, #-16]
   112a4:	tst	r7, #2
   112a8:	beq	11328 <__assert_fail@plt+0x3f0>
   112ac:	and	r7, r7, #8
   112b0:	ldr	r3, [pc, #212]	; 1138c <__assert_fail@plt+0x454>
   112b4:	cmp	r7, #0
   112b8:	movne	r3, #2400	; 0x960
   112bc:	mov	r7, r3
   112c0:	ldrb	r3, [r5, #12]
   112c4:	tst	r3, #1
   112c8:	subne	r7, r7, #1600	; 0x640
   112cc:	bne	112ec <__assert_fail@plt+0x3b4>
   112d0:	tst	r3, #8
   112d4:	beq	112ec <__assert_fail@plt+0x3b4>
   112d8:	ldr	r3, [sp, #4]
   112dc:	add	r1, r3, #2
   112e0:	ldr	r0, [pc, #168]	; 11390 <__assert_fail@plt+0x458>
   112e4:	bl	15fe4 <__assert_fail@plt+0x50ac>
   112e8:	add	r7, r7, r0
   112ec:	add	r6, r6, r7
   112f0:	str	r6, [r5, #20]
   112f4:	sub	r5, r5, #28
   112f8:	cmp	r5, r8
   112fc:	bcc	11370 <__assert_fail@plt+0x438>
   11300:	ldr	r0, [sp, #12]
   11304:	ldr	r3, [sp, #8]
   11308:	cmp	r5, r8
   1130c:	moveq	r0, r3
   11310:	ldr	r3, [r5, #4]
   11314:	str	r3, [sp, #4]
   11318:	add	r0, r0, r3
   1131c:	mov	r1, r5
   11320:	mvn	r6, #-2147483648	; 0x80000000
   11324:	b	11234 <__assert_fail@plt+0x2fc>
   11328:	tst	r7, #4
   1132c:	ldrne	r7, [pc, #96]	; 11394 <__assert_fail@plt+0x45c>
   11330:	bne	112c0 <__assert_fail@plt+0x388>
   11334:	ldr	r3, [sp, #16]
   11338:	cmp	r5, r3
   1133c:	ldrls	r7, [pc, #68]	; 11388 <__assert_fail@plt+0x450>
   11340:	bls	112c0 <__assert_fail@plt+0x388>
   11344:	ldrb	r3, [r5, #-44]	; 0xffffffd4
   11348:	tst	r3, #8
   1134c:	ldreq	r7, [pc, #52]	; 11388 <__assert_fail@plt+0x450>
   11350:	beq	112c0 <__assert_fail@plt+0x388>
   11354:	ldr	r1, [r5, #-24]	; 0xffffffe8
   11358:	add	r1, r1, #2
   1135c:	ldr	r0, [pc, #52]	; 11398 <__assert_fail@plt+0x460>
   11360:	bl	15fe4 <__assert_fail@plt+0x50ac>
   11364:	add	r0, r0, #4864	; 0x1300
   11368:	add	r7, r0, #36	; 0x24
   1136c:	b	112c0 <__assert_fail@plt+0x388>
   11370:	ldr	r3, [sp, #20]
   11374:	str	r3, [r4, #4]
   11378:	add	sp, sp, #28
   1137c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11380:	andeq	r8, r2, r0, ror #2
   11384:	andeq	lr, r2, r8, asr #2
   11388:	andeq	r1, r0, r4, lsr #6
   1138c:	andeq	r9, r5, r4, ror #2
   11390:	andeq	r5, r0, r4, ror #15
   11394:	andeq	r0, r0, r4, ror #25
   11398:	andeq	r9, r0, r0, asr #24
   1139c:	push	{r4, r5, r6, r7, r8, lr}
   113a0:	mov	r4, r0
   113a4:	mov	r0, r1
   113a8:	ldr	r7, [pc, #112]	; 11420 <__assert_fail@plt+0x4e8>
   113ac:	mov	r6, #1
   113b0:	ldr	r5, [pc, #108]	; 11424 <__assert_fail@plt+0x4ec>
   113b4:	b	113e0 <__assert_fail@plt+0x4a8>
   113b8:	ldr	r3, [r5, #16]
   113bc:	add	r3, r3, #1
   113c0:	str	r3, [r5, #16]
   113c4:	ldr	r3, [r4, #4]
   113c8:	ldr	r2, [r4, #8]
   113cc:	cmp	r3, r2
   113d0:	bcs	11414 <__assert_fail@plt+0x4dc>
   113d4:	add	r2, r3, #1
   113d8:	str	r2, [r4, #4]
   113dc:	ldrb	r0, [r3]
   113e0:	cmp	r0, #32
   113e4:	beq	113b8 <__assert_fail@plt+0x480>
   113e8:	cmp	r0, #9
   113ec:	popne	{r4, r5, r6, r7, r8, pc}
   113f0:	strb	r6, [r7, #3500]	; 0xdac
   113f4:	ldr	r3, [r5, #16]
   113f8:	add	r2, r3, #7
   113fc:	cmp	r3, #0
   11400:	movlt	r3, r2
   11404:	bic	r3, r3, #7
   11408:	add	r3, r3, #8
   1140c:	str	r3, [r5, #16]
   11410:	b	113c4 <__assert_fail@plt+0x48c>
   11414:	mov	r0, r4
   11418:	bl	10ec0 <__uflow@plt>
   1141c:	b	113e0 <__assert_fail@plt+0x4a8>
   11420:	andeq	lr, r2, r8, asr #2
   11424:	andeq	r8, r2, r0, ror #2
   11428:	push	{r4, r5, r6, lr}
   1142c:	mov	r4, r0
   11430:	mov	r2, #0
   11434:	ldr	r3, [pc, #232]	; 11524 <__assert_fail@plt+0x5ec>
   11438:	str	r2, [r3, #16]
   1143c:	ldr	r3, [r0, #4]
   11440:	ldr	r2, [r0, #8]
   11444:	cmp	r3, r2
   11448:	bcs	114a0 <__assert_fail@plt+0x568>
   1144c:	add	r2, r3, #1
   11450:	str	r2, [r0, #4]
   11454:	ldrb	r1, [r3]
   11458:	mov	r0, r4
   1145c:	bl	1139c <__assert_fail@plt+0x464>
   11460:	ldr	r3, [pc, #192]	; 11528 <__assert_fail@plt+0x5f0>
   11464:	ldr	r3, [r3, #3504]	; 0xdb0
   11468:	cmp	r3, #0
   1146c:	beq	114ac <__assert_fail@plt+0x574>
   11470:	ldr	r3, [pc, #172]	; 11524 <__assert_fail@plt+0x5ec>
   11474:	ldr	r2, [r3, #16]
   11478:	str	r2, [r3, #24]
   1147c:	ldr	r3, [pc, #164]	; 11528 <__assert_fail@plt+0x5f0>
   11480:	ldr	r5, [r3, #3512]	; 0xdb8
   11484:	ldrb	r3, [r5]
   11488:	cmp	r3, #0
   1148c:	beq	11514 <__assert_fail@plt+0x5dc>
   11490:	cmp	r0, r3
   11494:	popne	{r4, r5, r6, pc}
   11498:	ldr	r6, [pc, #132]	; 11524 <__assert_fail@plt+0x5ec>
   1149c:	b	114e8 <__assert_fail@plt+0x5b0>
   114a0:	bl	10ec0 <__uflow@plt>
   114a4:	mov	r1, r0
   114a8:	b	11458 <__assert_fail@plt+0x520>
   114ac:	ldr	r2, [pc, #112]	; 11524 <__assert_fail@plt+0x5ec>
   114b0:	ldr	r3, [r2, #16]
   114b4:	ldr	r1, [pc, #108]	; 11528 <__assert_fail@plt+0x5f0>
   114b8:	ldr	r1, [r1, #3508]	; 0xdb4
   114bc:	cmp	r3, r1
   114c0:	movge	r3, r1
   114c4:	str	r3, [r2, #24]
   114c8:	pop	{r4, r5, r6, pc}
   114cc:	mov	r0, r4
   114d0:	bl	10ec0 <__uflow@plt>
   114d4:	ldrb	r3, [r5, #1]!
   114d8:	cmp	r3, #0
   114dc:	beq	11514 <__assert_fail@plt+0x5dc>
   114e0:	cmp	r3, r0
   114e4:	popne	{r4, r5, r6, pc}
   114e8:	ldr	r3, [r6, #16]
   114ec:	add	r3, r3, #1
   114f0:	str	r3, [r6, #16]
   114f4:	ldr	r3, [r4, #4]
   114f8:	ldr	r2, [r4, #8]
   114fc:	cmp	r3, r2
   11500:	bcs	114cc <__assert_fail@plt+0x594>
   11504:	add	r2, r3, #1
   11508:	str	r2, [r4, #4]
   1150c:	ldrb	r0, [r3]
   11510:	b	114d4 <__assert_fail@plt+0x59c>
   11514:	mov	r1, r0
   11518:	mov	r0, r4
   1151c:	bl	1139c <__assert_fail@plt+0x464>
   11520:	pop	{r4, r5, r6, pc}
   11524:	andeq	r8, r2, r0, ror #2
   11528:	andeq	lr, r2, r8, asr #2
   1152c:	push	{r4, r5, r6, r7, r8, lr}
   11530:	mov	r7, r0
   11534:	ldr	r5, [r0]
   11538:	ldr	r4, [r0, #4]
   1153c:	cmp	r4, #0
   11540:	beq	11580 <__assert_fail@plt+0x648>
   11544:	ldr	r6, [pc, #76]	; 11598 <__assert_fail@plt+0x660>
   11548:	b	11554 <__assert_fail@plt+0x61c>
   1154c:	subs	r4, r4, #1
   11550:	beq	11580 <__assert_fail@plt+0x648>
   11554:	ldrb	r1, [r5], #1
   11558:	ldr	r0, [r6]
   1155c:	ldr	r3, [r0, #20]
   11560:	ldr	r2, [r0, #24]
   11564:	cmp	r3, r2
   11568:	addcc	r2, r3, #1
   1156c:	strcc	r2, [r0, #20]
   11570:	strbcc	r1, [r3]
   11574:	bcc	1154c <__assert_fail@plt+0x614>
   11578:	bl	10ecc <__overflow@plt>
   1157c:	b	1154c <__assert_fail@plt+0x614>
   11580:	ldr	r2, [pc, #20]	; 1159c <__assert_fail@plt+0x664>
   11584:	ldr	r3, [r7, #4]
   11588:	ldr	r1, [r2, #3516]	; 0xdbc
   1158c:	add	r3, r3, r1
   11590:	str	r3, [r2, #3516]	; 0xdbc
   11594:	pop	{r4, r5, r6, r7, r8, pc}
   11598:	andeq	r8, r2, r4, asr r1
   1159c:	andeq	lr, r2, r8, asr #2
   115a0:	push	{r4, r5, r6, r7, r8, lr}
   115a4:	ldr	r3, [pc, #248]	; 116a4 <__assert_fail@plt+0x76c>
   115a8:	ldr	r2, [r3, #3516]	; 0xdbc
   115ac:	add	r4, r2, r0
   115b0:	ldrb	r3, [r3, #3500]	; 0xdac
   115b4:	cmp	r3, #0
   115b8:	bne	115dc <__assert_fail@plt+0x6a4>
   115bc:	ldr	r3, [pc, #224]	; 116a4 <__assert_fail@plt+0x76c>
   115c0:	ldr	r3, [r3, #3516]	; 0xdbc
   115c4:	cmp	r4, r3
   115c8:	ldrgt	r7, [pc, #216]	; 116a8 <__assert_fail@plt+0x770>
   115cc:	movgt	r6, #32
   115d0:	ldrgt	r5, [pc, #204]	; 116a4 <__assert_fail@plt+0x76c>
   115d4:	bgt	11674 <__assert_fail@plt+0x73c>
   115d8:	pop	{r4, r5, r6, r7, r8, pc}
   115dc:	add	r5, r4, #7
   115e0:	cmp	r4, #0
   115e4:	movge	r5, r4
   115e8:	bic	r5, r5, #7
   115ec:	add	r3, r2, #1
   115f0:	cmp	r5, r3
   115f4:	ble	115bc <__assert_fail@plt+0x684>
   115f8:	cmp	r2, r5
   115fc:	bge	115bc <__assert_fail@plt+0x684>
   11600:	ldr	r7, [pc, #160]	; 116a8 <__assert_fail@plt+0x770>
   11604:	mov	r8, #9
   11608:	ldr	r6, [pc, #148]	; 116a4 <__assert_fail@plt+0x76c>
   1160c:	b	11634 <__assert_fail@plt+0x6fc>
   11610:	ldr	r3, [r6, #3516]	; 0xdbc
   11614:	add	r2, r3, #7
   11618:	cmp	r3, #0
   1161c:	movlt	r3, r2
   11620:	bic	r3, r3, #7
   11624:	add	r3, r3, #8
   11628:	str	r3, [r6, #3516]	; 0xdbc
   1162c:	cmp	r5, r3
   11630:	ble	115bc <__assert_fail@plt+0x684>
   11634:	ldr	r0, [r7]
   11638:	ldr	r3, [r0, #20]
   1163c:	ldr	r2, [r0, #24]
   11640:	cmp	r3, r2
   11644:	addcc	r2, r3, #1
   11648:	strcc	r2, [r0, #20]
   1164c:	strbcc	r8, [r3]
   11650:	bcc	11610 <__assert_fail@plt+0x6d8>
   11654:	mov	r1, r8
   11658:	bl	10ecc <__overflow@plt>
   1165c:	b	11610 <__assert_fail@plt+0x6d8>
   11660:	ldr	r3, [r5, #3516]	; 0xdbc
   11664:	add	r3, r3, #1
   11668:	str	r3, [r5, #3516]	; 0xdbc
   1166c:	cmp	r4, r3
   11670:	ble	116a0 <__assert_fail@plt+0x768>
   11674:	ldr	r0, [r7]
   11678:	ldr	r3, [r0, #20]
   1167c:	ldr	r2, [r0, #24]
   11680:	cmp	r3, r2
   11684:	addcc	r2, r3, #1
   11688:	strcc	r2, [r0, #20]
   1168c:	strbcc	r6, [r3]
   11690:	bcc	11660 <__assert_fail@plt+0x728>
   11694:	mov	r1, r6
   11698:	bl	10ecc <__overflow@plt>
   1169c:	b	11660 <__assert_fail@plt+0x728>
   116a0:	pop	{r4, r5, r6, r7, r8, pc}
   116a4:	andeq	lr, r2, r8, asr #2
   116a8:	andeq	r8, r2, r4, asr r1
   116ac:	push	{r4, r5, r6, lr}
   116b0:	mov	r4, r0
   116b4:	mov	r6, r1
   116b8:	ldr	r5, [pc, #176]	; 11770 <__assert_fail@plt+0x838>
   116bc:	mov	r3, #0
   116c0:	str	r3, [r5, #3516]	; 0xdbc
   116c4:	ldr	r3, [pc, #168]	; 11774 <__assert_fail@plt+0x83c>
   116c8:	ldr	r0, [r3, #28]
   116cc:	bl	115a0 <__assert_fail@plt+0x668>
   116d0:	ldr	r3, [pc, #160]	; 11778 <__assert_fail@plt+0x840>
   116d4:	ldr	r1, [r3]
   116d8:	ldr	r0, [r5, #3512]	; 0xdb8
   116dc:	bl	10cd4 <fputs_unlocked@plt>
   116e0:	ldr	r0, [r5, #3516]	; 0xdbc
   116e4:	ldr	r3, [r5, #3504]	; 0xdb0
   116e8:	add	r0, r0, r3
   116ec:	str	r0, [r5, #3516]	; 0xdbc
   116f0:	sub	r0, r6, r0
   116f4:	bl	115a0 <__assert_fail@plt+0x668>
   116f8:	ldr	r5, [r4, #24]
   116fc:	sub	r5, r5, #28
   11700:	cmp	r4, r5
   11704:	beq	11724 <__assert_fail@plt+0x7ec>
   11708:	mov	r0, r4
   1170c:	bl	1152c <__assert_fail@plt+0x5f4>
   11710:	ldr	r0, [r4, #8]
   11714:	bl	115a0 <__assert_fail@plt+0x668>
   11718:	add	r4, r4, #28
   1171c:	cmp	r5, r4
   11720:	bne	11708 <__assert_fail@plt+0x7d0>
   11724:	mov	r0, r5
   11728:	bl	1152c <__assert_fail@plt+0x5f4>
   1172c:	ldr	r3, [pc, #60]	; 11770 <__assert_fail@plt+0x838>
   11730:	ldr	r2, [r3, #3516]	; 0xdbc
   11734:	str	r2, [r3, #3496]	; 0xda8
   11738:	ldr	r3, [pc, #56]	; 11778 <__assert_fail@plt+0x840>
   1173c:	ldr	r0, [r3]
   11740:	ldr	r3, [r0, #20]
   11744:	ldr	r2, [r0, #24]
   11748:	cmp	r3, r2
   1174c:	bcs	11764 <__assert_fail@plt+0x82c>
   11750:	add	r2, r3, #1
   11754:	str	r2, [r0, #20]
   11758:	mov	r2, #10
   1175c:	strb	r2, [r3]
   11760:	pop	{r4, r5, r6, pc}
   11764:	mov	r1, #10
   11768:	bl	10ecc <__overflow@plt>
   1176c:	pop	{r4, r5, r6, pc}
   11770:	andeq	lr, r2, r8, asr #2
   11774:	andeq	r8, r2, r0, ror #2
   11778:	andeq	r8, r2, r4, asr r1
   1177c:	push	{r4, r5, r6, lr}
   11780:	mov	r5, r0
   11784:	ldr	r4, [pc, #52]	; 117c0 <__assert_fail@plt+0x888>
   11788:	ldr	r1, [r4, #8]
   1178c:	add	r0, r4, #44	; 0x2c
   11790:	bl	116ac <__assert_fail@plt+0x774>
   11794:	ldr	r4, [r4, #68]	; 0x44
   11798:	cmp	r4, r5
   1179c:	popeq	{r4, r5, r6, pc}
   117a0:	ldr	r6, [pc, #24]	; 117c0 <__assert_fail@plt+0x888>
   117a4:	ldr	r1, [r6, #4]
   117a8:	mov	r0, r4
   117ac:	bl	116ac <__assert_fail@plt+0x774>
   117b0:	ldr	r4, [r4, #24]
   117b4:	cmp	r5, r4
   117b8:	bne	117a4 <__assert_fail@plt+0x86c>
   117bc:	pop	{r4, r5, r6, pc}
   117c0:	andeq	r8, r2, r0, ror #2
   117c4:	push	{r4, r5, r6, r7, r8, lr}
   117c8:	ldr	r3, [pc, #324]	; 11914 <__assert_fail@plt+0x9dc>
   117cc:	ldr	r5, [r3, #36]	; 0x24
   117d0:	add	r3, r3, #44	; 0x2c
   117d4:	cmp	r5, r3
   117d8:	beq	118dc <__assert_fail@plt+0x9a4>
   117dc:	bl	11184 <__assert_fail@plt+0x24c>
   117e0:	ldr	r3, [pc, #300]	; 11914 <__assert_fail@plt+0x9dc>
   117e4:	ldr	r1, [r3, #68]	; 0x44
   117e8:	cmp	r5, r1
   117ec:	beq	1190c <__assert_fail@plt+0x9d4>
   117f0:	mov	r4, r5
   117f4:	mvn	r3, #-2147483648	; 0x80000000
   117f8:	ldr	r0, [r1, #24]
   117fc:	ldr	r2, [r1, #20]
   11800:	ldr	ip, [r0, #20]
   11804:	sub	r2, r2, ip
   11808:	cmp	r2, r3
   1180c:	movge	r1, r4
   11810:	cmp	r2, r3
   11814:	movlt	r3, r2
   11818:	mov	r4, r1
   1181c:	cmn	r3, #-2147483638	; 0x8000000a
   11820:	addle	r3, r3, #9
   11824:	mov	r1, r0
   11828:	cmp	r5, r0
   1182c:	bne	117f8 <__assert_fail@plt+0x8c0>
   11830:	mov	r0, r4
   11834:	bl	1177c <__assert_fail@plt+0x844>
   11838:	ldr	r1, [r4]
   1183c:	ldr	r7, [pc, #212]	; 11918 <__assert_fail@plt+0x9e0>
   11840:	mov	r0, r7
   11844:	ldr	r6, [r0, #3520]!	; 0xdc0
   11848:	add	r5, r0, #4
   1184c:	ldr	r3, [pc, #200]	; 1191c <__assert_fail@plt+0x9e4>
   11850:	sub	r2, r6, r1
   11854:	mov	r0, r5
   11858:	bl	10d10 <__memmove_chk@plt>
   1185c:	ldr	r0, [r4]
   11860:	sub	r0, r5, r0
   11864:	add	r6, r6, r0
   11868:	str	r6, [r7, #3520]	; 0xdc0
   1186c:	ldr	r3, [pc, #160]	; 11914 <__assert_fail@plt+0x9dc>
   11870:	ldr	r5, [r3, #36]	; 0x24
   11874:	cmp	r5, r4
   11878:	bcc	11898 <__assert_fail@plt+0x960>
   1187c:	add	r3, r4, #28
   11880:	ldr	r1, [r3, #-28]	; 0xffffffe4
   11884:	add	r1, r1, r0
   11888:	str	r1, [r3, #-28]	; 0xffffffe4
   1188c:	cmp	r5, r3
   11890:	add	r3, r3, #28
   11894:	bcs	11880 <__assert_fail@plt+0x948>
   11898:	sub	r2, r5, r4
   1189c:	asr	r3, r2, #2
   118a0:	ldr	r2, [pc, #120]	; 11920 <__assert_fail@plt+0x9e8>
   118a4:	mul	r2, r2, r3
   118a8:	add	r2, r2, #1
   118ac:	rsb	r2, r2, r2, lsl #3
   118b0:	ldr	r6, [pc, #92]	; 11914 <__assert_fail@plt+0x9dc>
   118b4:	add	r7, r6, #44	; 0x2c
   118b8:	ldr	r3, [pc, #100]	; 11924 <__assert_fail@plt+0x9ec>
   118bc:	lsl	r2, r2, #2
   118c0:	mov	r1, r4
   118c4:	mov	r0, r7
   118c8:	bl	10d10 <__memmove_chk@plt>
   118cc:	sub	r1, r4, r7
   118d0:	sub	r1, r5, r1
   118d4:	str	r1, [r6, #36]	; 0x24
   118d8:	pop	{r4, r5, r6, r7, r8, pc}
   118dc:	ldr	r5, [pc, #52]	; 11918 <__assert_fail@plt+0x9e0>
   118e0:	add	r4, r5, #3520	; 0xdc0
   118e4:	add	r4, r4, #4
   118e8:	ldr	r2, [r5, #3520]	; 0xdc0
   118ec:	ldr	r3, [pc, #52]	; 11928 <__assert_fail@plt+0x9f0>
   118f0:	ldr	r3, [r3]
   118f4:	sub	r2, r2, r4
   118f8:	mov	r1, #1
   118fc:	mov	r0, r4
   11900:	bl	10d58 <fwrite_unlocked@plt>
   11904:	str	r4, [r5, #3520]	; 0xdc0
   11908:	pop	{r4, r5, r6, r7, r8, pc}
   1190c:	mov	r4, r1
   11910:	b	11830 <__assert_fail@plt+0x8f8>
   11914:	andeq	r8, r2, r0, ror #2
   11918:	andeq	lr, r2, r8, asr #2
   1191c:	andeq	r1, r0, r8, lsl #7
   11920:			; <UNDEFINED> instruction: 0xb6db6db7
   11924:	andeq	r6, r0, r0, ror #26
   11928:	andeq	r8, r2, r4, asr r1
   1192c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11930:	sub	sp, sp, #20
   11934:	mov	r8, r0
   11938:	mov	r5, r1
   1193c:	ldr	sl, [pc, #628]	; 11bb8 <__assert_fail@plt+0xc80>
   11940:	ldr	r6, [pc, #628]	; 11bbc <__assert_fail@plt+0xc84>
   11944:	add	fp, r6, #8512	; 0x2140
   11948:	add	fp, fp, #12
   1194c:	add	r3, sl, #27904	; 0x6d00
   11950:	add	r3, r3, #84	; 0x54
   11954:	str	r3, [sp, #12]
   11958:	b	11b94 <__assert_fail@plt+0xc5c>
   1195c:	mov	r0, r4
   11960:	bl	1106c <__assert_fail@plt+0x134>
   11964:	bl	117c4 <__assert_fail@plt+0x88c>
   11968:	b	119a4 <__assert_fail@plt+0xa6c>
   1196c:	mov	r0, r8
   11970:	bl	10ec0 <__uflow@plt>
   11974:	mov	r5, r0
   11978:	cmn	r5, #1
   1197c:	beq	119d4 <__assert_fail@plt+0xa9c>
   11980:	bl	10e30 <__ctype_b_loc@plt>
   11984:	ldr	r2, [r0]
   11988:	lsl	r3, r5, #1
   1198c:	ldrh	r3, [r2, r3]
   11990:	tst	r3, #8192	; 0x2000
   11994:	bne	119d4 <__assert_fail@plt+0xa9c>
   11998:	ldr	r3, [r6, #3520]	; 0xdc0
   1199c:	cmp	r3, fp
   119a0:	beq	1195c <__assert_fail@plt+0xa24>
   119a4:	ldr	r3, [r6, #3520]	; 0xdc0
   119a8:	add	r2, r3, #1
   119ac:	str	r2, [r6, #3520]	; 0xdc0
   119b0:	strb	r5, [r3]
   119b4:	ldr	r3, [r8, #4]
   119b8:	ldr	r2, [r8, #8]
   119bc:	cmp	r3, r2
   119c0:	bcs	1196c <__assert_fail@plt+0xa34>
   119c4:	add	r2, r3, #1
   119c8:	str	r2, [r8, #4]
   119cc:	ldrb	r5, [r3]
   119d0:	b	11978 <__assert_fail@plt+0xa40>
   119d4:	ldr	r3, [sl, #36]	; 0x24
   119d8:	mov	r2, r3
   119dc:	ldr	r9, [r3]
   119e0:	ldr	r3, [r6, #3520]	; 0xdc0
   119e4:	sub	r3, r3, r9
   119e8:	str	r2, [sp, #4]
   119ec:	str	r3, [r2, #4]
   119f0:	ldr	r2, [sl, #16]
   119f4:	add	r1, r3, r2
   119f8:	str	r1, [sp, #8]
   119fc:	str	r1, [sl, #16]
   11a00:	sub	r3, r3, #1
   11a04:	add	r7, r9, r3
   11a08:	ldrb	r4, [r9, r3]
   11a0c:	ldrb	r1, [r9]
   11a10:	ldr	r0, [pc, #424]	; 11bc0 <__assert_fail@plt+0xc88>
   11a14:	bl	10e54 <strchr@plt>
   11a18:	ldr	r2, [sp, #4]
   11a1c:	ldrb	r3, [r2, #12]
   11a20:	bic	r3, r3, #1
   11a24:	cmp	r0, #0
   11a28:	moveq	r0, r3
   11a2c:	orrne	r0, r3, #1
   11a30:	strb	r0, [r2, #12]
   11a34:	bl	10e30 <__ctype_b_loc@plt>
   11a38:	ldr	r3, [r0]
   11a3c:	lsl	r4, r4, #1
   11a40:	ldrh	r3, [r3, r4]
   11a44:	ldr	r1, [sp, #4]
   11a48:	ldrb	r2, [r1, #12]
   11a4c:	bic	r2, r2, #4
   11a50:	and	r3, r3, #4
   11a54:	orr	r3, r3, r2
   11a58:	strb	r3, [r1, #12]
   11a5c:	cmp	r9, r7
   11a60:	bcs	11a90 <__assert_fail@plt+0xb58>
   11a64:	mov	r4, r7
   11a68:	mov	r7, r4
   11a6c:	sub	r4, r4, #1
   11a70:	ldrb	r1, [r7]
   11a74:	ldr	r0, [pc, #328]	; 11bc4 <__assert_fail@plt+0xc8c>
   11a78:	bl	10e54 <strchr@plt>
   11a7c:	cmp	r0, #0
   11a80:	beq	11a90 <__assert_fail@plt+0xb58>
   11a84:	mov	r7, r4
   11a88:	cmp	r4, r9
   11a8c:	bne	11a68 <__assert_fail@plt+0xb30>
   11a90:	ldrb	r1, [r7]
   11a94:	ldr	r0, [pc, #300]	; 11bc8 <__assert_fail@plt+0xc90>
   11a98:	bl	10e54 <strchr@plt>
   11a9c:	ldr	r2, [sp, #4]
   11aa0:	ldrb	r3, [r2, #12]
   11aa4:	bic	r3, r3, #2
   11aa8:	cmp	r0, #0
   11aac:	movne	r0, #2
   11ab0:	moveq	r0, #0
   11ab4:	orr	r0, r0, r3
   11ab8:	strb	r0, [r2, #12]
   11abc:	mov	r1, r5
   11ac0:	mov	r0, r8
   11ac4:	bl	1139c <__assert_fail@plt+0x464>
   11ac8:	mov	r5, r0
   11acc:	ldr	r3, [sl, #36]	; 0x24
   11ad0:	ldr	r2, [sl, #16]
   11ad4:	ldr	r1, [sp, #8]
   11ad8:	sub	r2, r2, r1
   11adc:	str	r2, [r3, #8]
   11ae0:	cmn	r0, #1
   11ae4:	beq	11b4c <__assert_fail@plt+0xc14>
   11ae8:	ldrb	r1, [r3, #12]
   11aec:	tst	r1, #2
   11af0:	moveq	r1, #0
   11af4:	beq	11b0c <__assert_fail@plt+0xbd4>
   11af8:	cmp	r0, #10
   11afc:	movne	r1, #0
   11b00:	moveq	r1, #1
   11b04:	cmp	r2, #1
   11b08:	orrgt	r1, r1, #1
   11b0c:	ldrb	r2, [r3, #12]
   11b10:	and	r1, r1, #1
   11b14:	bic	r2, r2, #8
   11b18:	orr	r2, r2, r1, lsl #3
   11b1c:	strb	r2, [r3, #12]
   11b20:	cmp	r5, #10
   11b24:	beq	11b58 <__assert_fail@plt+0xc20>
   11b28:	ldr	r2, [pc, #156]	; 11bcc <__assert_fail@plt+0xc94>
   11b2c:	ldrb	r2, [r2, #340]	; 0x154
   11b30:	cmp	r2, #0
   11b34:	beq	11b70 <__assert_fail@plt+0xc38>
   11b38:	b	11b58 <__assert_fail@plt+0xc20>
   11b3c:	mov	r0, #1
   11b40:	bl	1106c <__assert_fail@plt+0x134>
   11b44:	bl	117c4 <__assert_fail@plt+0x88c>
   11b48:	b	11b7c <__assert_fail@plt+0xc44>
   11b4c:	ldrb	r2, [r3, #12]
   11b50:	orr	r2, r2, #8
   11b54:	strb	r2, [r3, #12]
   11b58:	ldrb	r2, [r3, #12]
   11b5c:	and	r2, r2, #8
   11b60:	cmp	r2, #0
   11b64:	movne	r2, #2
   11b68:	moveq	r2, #1
   11b6c:	str	r2, [r3, #8]
   11b70:	ldr	r2, [sp, #12]
   11b74:	cmp	r3, r2
   11b78:	beq	11b3c <__assert_fail@plt+0xc04>
   11b7c:	ldr	r3, [sl, #36]	; 0x24
   11b80:	add	r3, r3, #28
   11b84:	str	r3, [sl, #36]	; 0x24
   11b88:	cmp	r5, #10
   11b8c:	cmnne	r5, #1
   11b90:	beq	11ba8 <__assert_fail@plt+0xc70>
   11b94:	ldr	r3, [sl, #36]	; 0x24
   11b98:	ldr	r2, [r6, #3520]	; 0xdc0
   11b9c:	str	r2, [r3]
   11ba0:	mov	r4, #1
   11ba4:	b	11998 <__assert_fail@plt+0xa60>
   11ba8:	mov	r0, r8
   11bac:	bl	11428 <__assert_fail@plt+0x4f0>
   11bb0:	add	sp, sp, #20
   11bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb8:	andeq	r8, r2, r0, ror #2
   11bbc:	andeq	lr, r2, r8, asr #2
   11bc0:	andeq	r6, r1, r8, lsl #10
   11bc4:	andeq	r6, r1, r0, lsl r5
   11bc8:	andeq	r6, r1, r8, lsl r5
   11bcc:	andeq	r0, r3, r0, asr #2
   11bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd4:	sub	sp, sp, #20
   11bd8:	mov	r5, r0
   11bdc:	str	r1, [sp, #12]
   11be0:	mov	r1, #2
   11be4:	bl	12acc <__assert_fail@plt+0x1b94>
   11be8:	mov	r3, #0
   11bec:	ldr	r2, [pc, #1136]	; 12064 <__assert_fail@plt+0x112c>
   11bf0:	strb	r3, [r2, #3500]	; 0xdac
   11bf4:	ldr	r2, [pc, #1132]	; 12068 <__assert_fail@plt+0x1130>
   11bf8:	str	r3, [r2, #4]
   11bfc:	mov	r0, r5
   11c00:	bl	11428 <__assert_fail@plt+0x4f0>
   11c04:	ldr	r3, [pc, #1120]	; 1206c <__assert_fail@plt+0x1134>
   11c08:	str	r0, [r3, #344]	; 0x158
   11c0c:	ldr	r7, [pc, #1104]	; 12064 <__assert_fail@plt+0x112c>
   11c10:	mov	fp, #0
   11c14:	str	fp, [sp, #4]
   11c18:	ldr	r9, [pc, #1096]	; 12068 <__assert_fail@plt+0x1130>
   11c1c:	ldr	r6, [pc, #1100]	; 12070 <__assert_fail@plt+0x1138>
   11c20:	mov	sl, #10
   11c24:	add	r3, r9, #44	; 0x2c
   11c28:	str	r3, [sp, #8]
   11c2c:	b	11f7c <__assert_fail@plt+0x1044>
   11c30:	bl	115a0 <__assert_fail@plt+0x668>
   11c34:	ldr	r8, [r7, #3512]	; 0xdb8
   11c38:	ldr	r3, [r7, #3516]	; 0xdbc
   11c3c:	ldr	r0, [r9, #16]
   11c40:	cmp	r3, r0
   11c44:	beq	11ca4 <__assert_fail@plt+0xd6c>
   11c48:	ldrb	r1, [r8]
   11c4c:	cmp	r1, #0
   11c50:	bne	11c7c <__assert_fail@plt+0xd44>
   11c54:	b	11ca8 <__assert_fail@plt+0xd70>
   11c58:	ldr	r3, [r7, #3516]	; 0xdbc
   11c5c:	add	r3, r3, #1
   11c60:	str	r3, [r7, #3516]	; 0xdbc
   11c64:	ldr	r0, [r9, #16]
   11c68:	cmp	r3, r0
   11c6c:	beq	11ca8 <__assert_fail@plt+0xd70>
   11c70:	ldrb	r1, [r8, #1]!
   11c74:	cmp	r1, #0
   11c78:	beq	11ca8 <__assert_fail@plt+0xd70>
   11c7c:	ldr	r0, [r6]
   11c80:	ldr	r3, [r0, #20]
   11c84:	ldr	r2, [r0, #24]
   11c88:	cmp	r3, r2
   11c8c:	addcc	r2, r3, #1
   11c90:	strcc	r2, [r0, #20]
   11c94:	strbcc	r1, [r3]
   11c98:	bcc	11c58 <__assert_fail@plt+0xd20>
   11c9c:	bl	10ecc <__overflow@plt>
   11ca0:	b	11c58 <__assert_fail@plt+0xd20>
   11ca4:	mov	r3, r0
   11ca8:	cmp	r4, #10
   11cac:	cmnne	r4, #1
   11cb0:	bne	11d14 <__assert_fail@plt+0xddc>
   11cb4:	cmn	r4, #1
   11cb8:	movne	r1, r4
   11cbc:	bne	11d38 <__assert_fail@plt+0xe00>
   11cc0:	ldr	r3, [r9, #24]
   11cc4:	ldr	r2, [r7, #3504]	; 0xdb0
   11cc8:	add	r3, r3, r2
   11ccc:	ldr	r2, [r9, #16]
   11cd0:	cmp	r3, r2
   11cd4:	movgt	r1, r4
   11cd8:	bgt	11d38 <__assert_fail@plt+0xe00>
   11cdc:	ldr	r0, [r6]
   11ce0:	ldr	r3, [r0, #20]
   11ce4:	ldr	r2, [r0, #24]
   11ce8:	cmp	r3, r2
   11cec:	addcc	r2, r3, #1
   11cf0:	strcc	r2, [r0, #20]
   11cf4:	strbcc	sl, [r3]
   11cf8:	movcc	r1, r4
   11cfc:	bcc	11d38 <__assert_fail@plt+0xe00>
   11d00:	mov	r1, sl
   11d04:	bl	10ecc <__overflow@plt>
   11d08:	mov	r1, r4
   11d0c:	b	11d38 <__assert_fail@plt+0xe00>
   11d10:	mov	r3, r0
   11d14:	sub	r0, r0, r3
   11d18:	bl	115a0 <__assert_fail@plt+0x668>
   11d1c:	b	11cb4 <__assert_fail@plt+0xd7c>
   11d20:	uxtb	r1, r1
   11d24:	bl	10ecc <__overflow@plt>
   11d28:	b	11d64 <__assert_fail@plt+0xe2c>
   11d2c:	mov	r0, r5
   11d30:	bl	10ec0 <__uflow@plt>
   11d34:	mov	r1, r0
   11d38:	cmp	r1, #10
   11d3c:	cmnne	r1, #1
   11d40:	beq	11d84 <__assert_fail@plt+0xe4c>
   11d44:	ldr	r0, [r6]
   11d48:	ldr	r3, [r0, #20]
   11d4c:	ldr	r2, [r0, #24]
   11d50:	cmp	r3, r2
   11d54:	addcc	r2, r3, #1
   11d58:	strcc	r2, [r0, #20]
   11d5c:	strbcc	r1, [r3]
   11d60:	bcs	11d20 <__assert_fail@plt+0xde8>
   11d64:	ldr	r3, [r5, #4]
   11d68:	ldr	r2, [r5, #8]
   11d6c:	cmp	r3, r2
   11d70:	bcs	11d2c <__assert_fail@plt+0xdf4>
   11d74:	add	r2, r3, #1
   11d78:	str	r2, [r5, #4]
   11d7c:	ldrb	r1, [r3]
   11d80:	b	11d38 <__assert_fail@plt+0xe00>
   11d84:	mov	r4, r1
   11d88:	cmn	r4, #1
   11d8c:	beq	11e34 <__assert_fail@plt+0xefc>
   11d90:	ldr	r0, [r6]
   11d94:	ldr	r3, [r0, #20]
   11d98:	ldr	r2, [r0, #24]
   11d9c:	cmp	r3, r2
   11da0:	addcc	r2, r3, #1
   11da4:	strcc	r2, [r0, #20]
   11da8:	strbcc	sl, [r3]
   11dac:	bcs	11eb8 <__assert_fail@plt+0xf80>
   11db0:	mov	r0, r5
   11db4:	bl	11428 <__assert_fail@plt+0x4f0>
   11db8:	mov	r4, r0
   11dbc:	cmn	r4, #1
   11dc0:	cmpne	r4, #10
   11dc4:	beq	11dec <__assert_fail@plt+0xeb4>
   11dc8:	ldr	r3, [r9, #24]
   11dcc:	ldr	r2, [r7, #3508]	; 0xdb4
   11dd0:	cmp	r3, r2
   11dd4:	blt	11dec <__assert_fail@plt+0xeb4>
   11dd8:	ldr	r1, [r9, #16]
   11ddc:	ldr	r2, [r9, #32]
   11de0:	add	r2, r3, r2
   11de4:	cmp	r2, r1
   11de8:	ble	11ec4 <__assert_fail@plt+0xf8c>
   11dec:	str	fp, [r7, #3516]	; 0xdbc
   11df0:	ldr	r0, [r9, #24]
   11df4:	ldr	r3, [r9, #16]
   11df8:	cmp	r3, r0
   11dfc:	bgt	11c30 <__assert_fail@plt+0xcf8>
   11e00:	cmp	r4, #10
   11e04:	cmnne	r4, #1
   11e08:	beq	11d88 <__assert_fail@plt+0xe50>
   11e0c:	bl	115a0 <__assert_fail@plt+0x668>
   11e10:	ldr	r8, [r7, #3512]	; 0xdb8
   11e14:	ldr	r3, [r7, #3516]	; 0xdbc
   11e18:	ldr	r0, [r9, #16]
   11e1c:	cmp	r3, r0
   11e20:	beq	11d10 <__assert_fail@plt+0xdd8>
   11e24:	ldrb	r1, [r8]
   11e28:	cmp	r1, #0
   11e2c:	bne	11c7c <__assert_fail@plt+0xd44>
   11e30:	b	11d14 <__assert_fail@plt+0xddc>
   11e34:	mvn	r2, #0
   11e38:	ldr	r3, [pc, #556]	; 1206c <__assert_fail@plt+0x1134>
   11e3c:	str	r2, [r3, #344]	; 0x158
   11e40:	ldr	r3, [r5]
   11e44:	tst	r3, #32
   11e48:	moveq	r4, r2
   11e4c:	movne	r4, #0
   11e50:	ldr	r3, [pc, #540]	; 12074 <__assert_fail@plt+0x113c>
   11e54:	ldr	r3, [r3]
   11e58:	cmp	r5, r3
   11e5c:	beq	12034 <__assert_fail@plt+0x10fc>
   11e60:	mov	r0, r5
   11e64:	bl	12b00 <__assert_fail@plt+0x1bc8>
   11e68:	adds	r0, r0, #0
   11e6c:	movne	r0, #1
   11e70:	ands	r3, r0, r4, lsr #31
   11e74:	bne	12040 <__assert_fail@plt+0x1108>
   11e78:	cmp	r4, #0
   11e7c:	blt	11eac <__assert_fail@plt+0xf74>
   11e80:	ldrne	r5, [pc, #496]	; 12078 <__assert_fail@plt+0x1140>
   11e84:	beq	1204c <__assert_fail@plt+0x1114>
   11e88:	ldr	r2, [sp, #12]
   11e8c:	mov	r1, #3
   11e90:	mov	r0, #0
   11e94:	bl	1469c <__assert_fail@plt+0x3764>
   11e98:	mov	r3, r0
   11e9c:	mov	r2, r5
   11ea0:	mov	r1, r4
   11ea4:	mov	r0, #0
   11ea8:	bl	10de8 <error@plt>
   11eac:	lsr	r0, r4, #31
   11eb0:	add	sp, sp, #20
   11eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eb8:	mov	r1, sl
   11ebc:	bl	10ecc <__overflow@plt>
   11ec0:	b	11db0 <__assert_fail@plt+0xe78>
   11ec4:	str	r3, [r9, #28]
   11ec8:	str	r1, [r9, #8]
   11ecc:	add	r3, r7, #3520	; 0xdc0
   11ed0:	add	r3, r3, #4
   11ed4:	str	r3, [r7, #3520]	; 0xdc0
   11ed8:	ldr	r3, [sp, #8]
   11edc:	str	r3, [r9, #36]	; 0x24
   11ee0:	mov	r1, r4
   11ee4:	mov	r0, r5
   11ee8:	bl	1192c <__assert_fail@plt+0x9f4>
   11eec:	mov	r4, r0
   11ef0:	bl	11130 <__assert_fail@plt+0x1f8>
   11ef4:	bl	1106c <__assert_fail@plt+0x134>
   11ef8:	ldrb	r3, [r9]
   11efc:	cmp	r3, #0
   11f00:	bne	11f4c <__assert_fail@plt+0x1014>
   11f04:	ldrb	r3, [r9, #12]
   11f08:	cmp	r3, #0
   11f0c:	beq	11f90 <__assert_fail@plt+0x1058>
   11f10:	mov	r0, r4
   11f14:	bl	11130 <__assert_fail@plt+0x1f8>
   11f18:	cmp	r0, #0
   11f1c:	beq	11f4c <__assert_fail@plt+0x1014>
   11f20:	mov	r1, r4
   11f24:	mov	r0, r5
   11f28:	bl	1192c <__assert_fail@plt+0x9f4>
   11f2c:	mov	r4, r0
   11f30:	bl	11130 <__assert_fail@plt+0x1f8>
   11f34:	cmp	r0, #0
   11f38:	beq	11f4c <__assert_fail@plt+0x1014>
   11f3c:	ldr	r2, [r9, #16]
   11f40:	ldr	r3, [r9, #4]
   11f44:	cmp	r2, r3
   11f48:	beq	11f20 <__assert_fail@plt+0xfe8>
   11f4c:	ldr	r8, [r9, #36]	; 0x24
   11f50:	ldr	r3, [sp, #8]
   11f54:	cmp	r8, r3
   11f58:	bls	12020 <__assert_fail@plt+0x10e8>
   11f5c:	ldrb	r3, [r8, #-16]
   11f60:	orr	r3, r3, #10
   11f64:	strb	r3, [r8, #-16]
   11f68:	ldr	r3, [pc, #252]	; 1206c <__assert_fail@plt+0x1134>
   11f6c:	str	r4, [r3, #344]	; 0x158
   11f70:	bl	11184 <__assert_fail@plt+0x24c>
   11f74:	mov	r0, r8
   11f78:	bl	1177c <__assert_fail@plt+0x844>
   11f7c:	ldr	r3, [sp, #4]
   11f80:	str	r3, [r7, #3496]	; 0xda8
   11f84:	ldr	r3, [pc, #224]	; 1206c <__assert_fail@plt+0x1134>
   11f88:	ldr	r4, [r3, #344]	; 0x158
   11f8c:	b	11dbc <__assert_fail@plt+0xe84>
   11f90:	ldrb	r3, [r9, #20]
   11f94:	cmp	r3, #0
   11f98:	beq	11ffc <__assert_fail@plt+0x10c4>
   11f9c:	mov	r0, r4
   11fa0:	bl	11130 <__assert_fail@plt+0x1f8>
   11fa4:	cmp	r0, #0
   11fa8:	beq	11f4c <__assert_fail@plt+0x1014>
   11fac:	ldr	r2, [r9, #16]
   11fb0:	ldr	r3, [r9, #8]
   11fb4:	cmp	r2, r3
   11fb8:	beq	11f4c <__assert_fail@plt+0x1014>
   11fbc:	mov	r1, r4
   11fc0:	mov	r0, r5
   11fc4:	bl	1192c <__assert_fail@plt+0x9f4>
   11fc8:	mov	r4, r0
   11fcc:	bl	11130 <__assert_fail@plt+0x1f8>
   11fd0:	cmp	r0, #0
   11fd4:	beq	11f4c <__assert_fail@plt+0x1014>
   11fd8:	ldr	r2, [r9, #16]
   11fdc:	ldr	r3, [r9, #4]
   11fe0:	cmp	r2, r3
   11fe4:	beq	11fbc <__assert_fail@plt+0x1084>
   11fe8:	b	11f4c <__assert_fail@plt+0x1014>
   11fec:	mov	r1, r4
   11ff0:	mov	r0, r5
   11ff4:	bl	1192c <__assert_fail@plt+0x9f4>
   11ff8:	mov	r4, r0
   11ffc:	mov	r0, r4
   12000:	bl	11130 <__assert_fail@plt+0x1f8>
   12004:	cmp	r0, #0
   12008:	beq	11f4c <__assert_fail@plt+0x1014>
   1200c:	ldr	r2, [r9, #16]
   12010:	ldr	r3, [r9, #4]
   12014:	cmp	r2, r3
   12018:	beq	11fec <__assert_fail@plt+0x10b4>
   1201c:	b	11f4c <__assert_fail@plt+0x1014>
   12020:	ldr	r3, [pc, #84]	; 1207c <__assert_fail@plt+0x1144>
   12024:	ldr	r2, [pc, #84]	; 12080 <__assert_fail@plt+0x1148>
   12028:	ldr	r1, [pc, #84]	; 12084 <__assert_fail@plt+0x114c>
   1202c:	ldr	r0, [pc, #84]	; 12088 <__assert_fail@plt+0x1150>
   12030:	bl	10f38 <__assert_fail@plt>
   12034:	mov	r0, r5
   12038:	bl	10efc <clearerr_unlocked@plt>
   1203c:	b	11e78 <__assert_fail@plt+0xf40>
   12040:	bl	10e60 <__errno_location@plt>
   12044:	ldr	r4, [r0]
   12048:	b	11e78 <__assert_fail@plt+0xf40>
   1204c:	mov	r2, #5
   12050:	ldr	r1, [pc, #52]	; 1208c <__assert_fail@plt+0x1154>
   12054:	mov	r0, #0
   12058:	bl	10d7c <dcgettext@plt>
   1205c:	mov	r5, r0
   12060:	b	11e88 <__assert_fail@plt+0xf50>
   12064:	andeq	lr, r2, r8, asr #2
   12068:	andeq	r8, r2, r0, ror #2
   1206c:	andeq	r0, r3, r0, asr #2
   12070:	andeq	r8, r2, r4, asr r1
   12074:	andeq	r8, r2, r0, asr r1
   12078:	andeq	r6, r1, ip, lsl #24
   1207c:	andeq	r6, r1, r0, lsr #8
   12080:	andeq	r0, r0, pc, ror #4
   12084:	andeq	r6, r1, ip, lsl r5
   12088:	andeq	r6, r1, r8, lsr #10
   1208c:	andeq	r6, r1, ip, lsr r5
   12090:	push	{lr}		; (str lr, [sp, #-4]!)
   12094:	sub	sp, sp, #60	; 0x3c
   12098:	subs	r6, r0, #0
   1209c:	beq	120d8 <__assert_fail@plt+0x11a0>
   120a0:	ldr	r3, [pc, #776]	; 123b0 <__assert_fail@plt+0x1478>
   120a4:	ldr	r4, [r3]
   120a8:	mov	r2, #5
   120ac:	ldr	r1, [pc, #768]	; 123b4 <__assert_fail@plt+0x147c>
   120b0:	mov	r0, #0
   120b4:	bl	10d7c <dcgettext@plt>
   120b8:	ldr	r3, [pc, #760]	; 123b8 <__assert_fail@plt+0x1480>
   120bc:	ldr	r3, [r3]
   120c0:	mov	r2, r0
   120c4:	mov	r1, #1
   120c8:	mov	r0, r4
   120cc:	bl	10e9c <__fprintf_chk@plt>
   120d0:	mov	r0, r6
   120d4:	bl	10e3c <exit@plt>
   120d8:	mov	r2, #5
   120dc:	ldr	r1, [pc, #728]	; 123bc <__assert_fail@plt+0x1484>
   120e0:	mov	r0, #0
   120e4:	bl	10d7c <dcgettext@plt>
   120e8:	ldr	r3, [pc, #712]	; 123b8 <__assert_fail@plt+0x1480>
   120ec:	ldr	r2, [r3]
   120f0:	mov	r1, r0
   120f4:	mov	r0, #1
   120f8:	bl	10e84 <__printf_chk@plt>
   120fc:	mov	r2, #5
   12100:	ldr	r1, [pc, #696]	; 123c0 <__assert_fail@plt+0x1488>
   12104:	mov	r0, #0
   12108:	bl	10d7c <dcgettext@plt>
   1210c:	ldr	r4, [pc, #688]	; 123c4 <__assert_fail@plt+0x148c>
   12110:	ldr	r1, [r4]
   12114:	bl	10cd4 <fputs_unlocked@plt>
   12118:	mov	r2, #5
   1211c:	ldr	r1, [pc, #676]	; 123c8 <__assert_fail@plt+0x1490>
   12120:	mov	r0, #0
   12124:	bl	10d7c <dcgettext@plt>
   12128:	ldr	r1, [r4]
   1212c:	bl	10cd4 <fputs_unlocked@plt>
   12130:	mov	r2, #5
   12134:	ldr	r1, [pc, #656]	; 123cc <__assert_fail@plt+0x1494>
   12138:	mov	r0, #0
   1213c:	bl	10d7c <dcgettext@plt>
   12140:	ldr	r1, [r4]
   12144:	bl	10cd4 <fputs_unlocked@plt>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #636]	; 123d0 <__assert_fail@plt+0x1498>
   12150:	mov	r0, #0
   12154:	bl	10d7c <dcgettext@plt>
   12158:	ldr	r1, [r4]
   1215c:	bl	10cd4 <fputs_unlocked@plt>
   12160:	mov	r2, #5
   12164:	ldr	r1, [pc, #616]	; 123d4 <__assert_fail@plt+0x149c>
   12168:	mov	r0, #0
   1216c:	bl	10d7c <dcgettext@plt>
   12170:	ldr	r1, [r4]
   12174:	bl	10cd4 <fputs_unlocked@plt>
   12178:	mov	r2, #5
   1217c:	ldr	r1, [pc, #596]	; 123d8 <__assert_fail@plt+0x14a0>
   12180:	mov	r0, #0
   12184:	bl	10d7c <dcgettext@plt>
   12188:	ldr	r1, [r4]
   1218c:	bl	10cd4 <fputs_unlocked@plt>
   12190:	mov	r2, #5
   12194:	ldr	r1, [pc, #576]	; 123dc <__assert_fail@plt+0x14a4>
   12198:	mov	r0, #0
   1219c:	bl	10d7c <dcgettext@plt>
   121a0:	ldr	r1, [r4]
   121a4:	bl	10cd4 <fputs_unlocked@plt>
   121a8:	mov	ip, sp
   121ac:	ldr	lr, [pc, #556]	; 123e0 <__assert_fail@plt+0x14a8>
   121b0:	ldm	lr!, {r0, r1, r2, r3}
   121b4:	stmia	ip!, {r0, r1, r2, r3}
   121b8:	ldm	lr!, {r0, r1, r2, r3}
   121bc:	stmia	ip!, {r0, r1, r2, r3}
   121c0:	ldm	lr!, {r0, r1, r2, r3}
   121c4:	stmia	ip!, {r0, r1, r2, r3}
   121c8:	ldm	lr, {r0, r1}
   121cc:	stm	ip, {r0, r1}
   121d0:	ldr	r1, [sp]
   121d4:	cmp	r1, #0
   121d8:	moveq	r4, sp
   121dc:	beq	12204 <__assert_fail@plt+0x12cc>
   121e0:	mov	r4, sp
   121e4:	ldr	r5, [pc, #504]	; 123e4 <__assert_fail@plt+0x14ac>
   121e8:	mov	r0, r5
   121ec:	bl	10cec <strcmp@plt>
   121f0:	cmp	r0, #0
   121f4:	beq	12204 <__assert_fail@plt+0x12cc>
   121f8:	ldr	r1, [r4, #8]!
   121fc:	cmp	r1, #0
   12200:	bne	121e8 <__assert_fail@plt+0x12b0>
   12204:	ldr	r4, [r4, #4]
   12208:	cmp	r4, #0
   1220c:	beq	12320 <__assert_fail@plt+0x13e8>
   12210:	mov	r2, #5
   12214:	ldr	r1, [pc, #460]	; 123e8 <__assert_fail@plt+0x14b0>
   12218:	mov	r0, #0
   1221c:	bl	10d7c <dcgettext@plt>
   12220:	ldr	r3, [pc, #452]	; 123ec <__assert_fail@plt+0x14b4>
   12224:	ldr	r2, [pc, #452]	; 123f0 <__assert_fail@plt+0x14b8>
   12228:	mov	r1, r0
   1222c:	mov	r0, #1
   12230:	bl	10e84 <__printf_chk@plt>
   12234:	mov	r1, #0
   12238:	mov	r0, #5
   1223c:	bl	10ed8 <setlocale@plt>
   12240:	cmp	r0, #0
   12244:	beq	1225c <__assert_fail@plt+0x1324>
   12248:	mov	r2, #3
   1224c:	ldr	r1, [pc, #416]	; 123f4 <__assert_fail@plt+0x14bc>
   12250:	bl	10f20 <strncmp@plt>
   12254:	cmp	r0, #0
   12258:	bne	122bc <__assert_fail@plt+0x1384>
   1225c:	mov	r2, #5
   12260:	ldr	r1, [pc, #400]	; 123f8 <__assert_fail@plt+0x14c0>
   12264:	mov	r0, #0
   12268:	bl	10d7c <dcgettext@plt>
   1226c:	ldr	r5, [pc, #368]	; 123e4 <__assert_fail@plt+0x14ac>
   12270:	mov	r3, r5
   12274:	ldr	r2, [pc, #368]	; 123ec <__assert_fail@plt+0x14b4>
   12278:	mov	r1, r0
   1227c:	mov	r0, #1
   12280:	bl	10e84 <__printf_chk@plt>
   12284:	mov	r2, #5
   12288:	ldr	r1, [pc, #364]	; 123fc <__assert_fail@plt+0x14c4>
   1228c:	mov	r0, #0
   12290:	bl	10d7c <dcgettext@plt>
   12294:	mov	r1, r0
   12298:	ldr	r2, [pc, #352]	; 12400 <__assert_fail@plt+0x14c8>
   1229c:	ldr	r3, [pc, #352]	; 12404 <__assert_fail@plt+0x14cc>
   122a0:	cmp	r4, r5
   122a4:	movne	r3, r2
   122a8:	mov	r2, r4
   122ac:	mov	r0, #1
   122b0:	bl	10e84 <__printf_chk@plt>
   122b4:	b	120d0 <__assert_fail@plt+0x1198>
   122b8:	ldr	r4, [pc, #292]	; 123e4 <__assert_fail@plt+0x14ac>
   122bc:	mov	r2, #5
   122c0:	ldr	r1, [pc, #320]	; 12408 <__assert_fail@plt+0x14d0>
   122c4:	mov	r0, #0
   122c8:	bl	10d7c <dcgettext@plt>
   122cc:	ldr	r3, [pc, #240]	; 123c4 <__assert_fail@plt+0x148c>
   122d0:	ldr	r1, [r3]
   122d4:	bl	10cd4 <fputs_unlocked@plt>
   122d8:	b	1225c <__assert_fail@plt+0x1324>
   122dc:	mov	r2, #5
   122e0:	ldr	r1, [pc, #272]	; 123f8 <__assert_fail@plt+0x14c0>
   122e4:	mov	r0, #0
   122e8:	bl	10d7c <dcgettext@plt>
   122ec:	ldr	r4, [pc, #240]	; 123e4 <__assert_fail@plt+0x14ac>
   122f0:	mov	r3, r4
   122f4:	ldr	r2, [pc, #240]	; 123ec <__assert_fail@plt+0x14b4>
   122f8:	mov	r1, r0
   122fc:	mov	r0, #1
   12300:	bl	10e84 <__printf_chk@plt>
   12304:	mov	r2, #5
   12308:	ldr	r1, [pc, #236]	; 123fc <__assert_fail@plt+0x14c4>
   1230c:	mov	r0, #0
   12310:	bl	10d7c <dcgettext@plt>
   12314:	mov	r1, r0
   12318:	ldr	r3, [pc, #228]	; 12404 <__assert_fail@plt+0x14cc>
   1231c:	b	122a8 <__assert_fail@plt+0x1370>
   12320:	mov	r2, #5
   12324:	ldr	r1, [pc, #188]	; 123e8 <__assert_fail@plt+0x14b0>
   12328:	mov	r0, #0
   1232c:	bl	10d7c <dcgettext@plt>
   12330:	ldr	r3, [pc, #180]	; 123ec <__assert_fail@plt+0x14b4>
   12334:	ldr	r2, [pc, #180]	; 123f0 <__assert_fail@plt+0x14b8>
   12338:	mov	r1, r0
   1233c:	mov	r0, #1
   12340:	bl	10e84 <__printf_chk@plt>
   12344:	mov	r1, #0
   12348:	mov	r0, #5
   1234c:	bl	10ed8 <setlocale@plt>
   12350:	cmp	r0, #0
   12354:	beq	122dc <__assert_fail@plt+0x13a4>
   12358:	mov	r2, #3
   1235c:	ldr	r1, [pc, #144]	; 123f4 <__assert_fail@plt+0x14bc>
   12360:	bl	10f20 <strncmp@plt>
   12364:	cmp	r0, #0
   12368:	bne	122b8 <__assert_fail@plt+0x1380>
   1236c:	mov	r2, #5
   12370:	ldr	r1, [pc, #128]	; 123f8 <__assert_fail@plt+0x14c0>
   12374:	mov	r0, #0
   12378:	bl	10d7c <dcgettext@plt>
   1237c:	ldr	r4, [pc, #96]	; 123e4 <__assert_fail@plt+0x14ac>
   12380:	mov	r3, r4
   12384:	ldr	r2, [pc, #96]	; 123ec <__assert_fail@plt+0x14b4>
   12388:	mov	r1, r0
   1238c:	mov	r0, #1
   12390:	bl	10e84 <__printf_chk@plt>
   12394:	mov	r2, #5
   12398:	ldr	r1, [pc, #92]	; 123fc <__assert_fail@plt+0x14c4>
   1239c:	mov	r0, #0
   123a0:	bl	10d7c <dcgettext@plt>
   123a4:	mov	r1, r0
   123a8:	ldr	r3, [pc, #84]	; 12404 <__assert_fail@plt+0x14cc>
   123ac:	b	122a8 <__assert_fail@plt+0x1370>
   123b0:	andeq	r8, r2, r8, asr #2
   123b4:	andeq	r6, r1, ip, asr #10
   123b8:	andeq	r0, r3, r4, lsr #5
   123bc:	andeq	r6, r1, r4, ror r5
   123c0:	andeq	r6, r1, r0, lsr #11
   123c4:	andeq	r8, r2, r4, asr r1
   123c8:	andeq	r6, r1, r4, lsr #12
   123cc:	andeq	r6, r1, ip, asr r6
   123d0:	andeq	r6, r1, r8, lsr #13
   123d4:	andeq	r6, r1, r0, asr #15
   123d8:	andeq	r6, r1, r0, ror #17
   123dc:	andeq	r6, r1, r0, lsl r9
   123e0:	andeq	r6, r1, r0, lsr r4
   123e4:	andeq	r6, r1, r8, asr #10
   123e8:	andeq	r6, r1, r8, asr #18
   123ec:	andeq	r6, r1, r0, ror #18
   123f0:	andeq	r6, r1, r8, lsl #19
   123f4:	muleq	r1, r8, r9
   123f8:	andeq	r6, r1, r4, ror #19
   123fc:	andeq	r6, r1, r0, lsl #20
   12400:	andeq	r6, r1, r0, lsr #12
   12404:	andeq	r6, r1, r8, lsr #22
   12408:	muleq	r1, ip, r9
   1240c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12410:	sub	sp, sp, #36	; 0x24
   12414:	mov	r6, r0
   12418:	mov	r5, r1
   1241c:	ldr	r0, [r1]
   12420:	bl	12cb4 <__assert_fail@plt+0x1d7c>
   12424:	ldr	r4, [pc, #1284]	; 12930 <__assert_fail@plt+0x19f8>
   12428:	mov	r1, r4
   1242c:	mov	r0, #6
   12430:	bl	10ed8 <setlocale@plt>
   12434:	ldr	r7, [pc, #1272]	; 12934 <__assert_fail@plt+0x19fc>
   12438:	ldr	r1, [pc, #1272]	; 12938 <__assert_fail@plt+0x1a00>
   1243c:	mov	r0, r7
   12440:	bl	10f14 <bindtextdomain@plt>
   12444:	mov	r0, r7
   12448:	bl	10d94 <textdomain@plt>
   1244c:	ldr	r0, [pc, #1256]	; 1293c <__assert_fail@plt+0x1a04>
   12450:	bl	163fc <__assert_fail@plt+0x54c4>
   12454:	mov	r3, #0
   12458:	ldr	r2, [pc, #1248]	; 12940 <__assert_fail@plt+0x1a08>
   1245c:	strb	r3, [r2, #340]	; 0x154
   12460:	ldr	r2, [pc, #1244]	; 12944 <__assert_fail@plt+0x1a0c>
   12464:	strb	r3, [r2]
   12468:	strb	r3, [r2, #20]
   1246c:	strb	r3, [r2, #12]
   12470:	mov	r1, #75	; 0x4b
   12474:	str	r1, [r2, #40]	; 0x28
   12478:	ldr	r1, [pc, #1224]	; 12948 <__assert_fail@plt+0x1a10>
   1247c:	str	r4, [r1, #3512]	; 0xdb8
   12480:	str	r3, [r2, #32]
   12484:	str	r3, [r1, #3508]	; 0xdb4
   12488:	str	r3, [r1, #3504]	; 0xdb0
   1248c:	cmp	r6, #1
   12490:	movle	r7, #0
   12494:	ble	124ac <__assert_fail@plt+0x1574>
   12498:	ldr	r7, [r5, #4]
   1249c:	ldrb	r3, [r7]
   124a0:	cmp	r3, #45	; 0x2d
   124a4:	movne	r7, #0
   124a8:	beq	12510 <__assert_fail@plt+0x15d8>
   124ac:	mov	fp, #0
   124b0:	ldr	sl, [pc, #1172]	; 1294c <__assert_fail@plt+0x1a14>
   124b4:	ldr	r9, [pc, #1164]	; 12948 <__assert_fail@plt+0x1a10>
   124b8:	ldr	r8, [pc, #1156]	; 12944 <__assert_fail@plt+0x1a0c>
   124bc:	mov	r3, #0
   124c0:	str	r3, [sp]
   124c4:	ldr	r3, [pc, #1156]	; 12950 <__assert_fail@plt+0x1a18>
   124c8:	ldr	r2, [pc, #1156]	; 12954 <__assert_fail@plt+0x1a1c>
   124cc:	mov	r1, r5
   124d0:	mov	r0, r6
   124d4:	bl	10e24 <getopt_long@plt>
   124d8:	cmn	r0, #1
   124dc:	beq	126bc <__assert_fail@plt+0x1784>
   124e0:	cmp	r0, #112	; 0x70
   124e4:	beq	12620 <__assert_fail@plt+0x16e8>
   124e8:	bgt	1258c <__assert_fail@plt+0x1654>
   124ec:	cmn	r0, #2
   124f0:	beq	126b4 <__assert_fail@plt+0x177c>
   124f4:	ble	12534 <__assert_fail@plt+0x15fc>
   124f8:	cmp	r0, #99	; 0x63
   124fc:	beq	125f8 <__assert_fail@plt+0x16c0>
   12500:	cmp	r0, #103	; 0x67
   12504:	bne	12574 <__assert_fail@plt+0x163c>
   12508:	ldr	fp, [sl]
   1250c:	b	124bc <__assert_fail@plt+0x1584>
   12510:	ldrb	r3, [r7, #1]
   12514:	sub	r3, r3, #48	; 0x30
   12518:	cmp	r3, #9
   1251c:	movhi	r7, #0
   12520:	addls	r7, r7, #1
   12524:	ldrls	r3, [r5]
   12528:	strls	r3, [r5, #4]!
   1252c:	subls	r6, r6, #1
   12530:	b	124ac <__assert_fail@plt+0x1574>
   12534:	mov	r4, r0
   12538:	cmn	r0, #3
   1253c:	bne	12578 <__assert_fail@plt+0x1640>
   12540:	mov	r4, #0
   12544:	str	r4, [sp, #4]
   12548:	ldr	r3, [pc, #1032]	; 12958 <__assert_fail@plt+0x1a20>
   1254c:	str	r3, [sp]
   12550:	ldr	r3, [pc, #1028]	; 1295c <__assert_fail@plt+0x1a24>
   12554:	ldr	r3, [r3]
   12558:	ldr	r2, [pc, #1024]	; 12960 <__assert_fail@plt+0x1a28>
   1255c:	ldr	r1, [pc, #1024]	; 12964 <__assert_fail@plt+0x1a2c>
   12560:	ldr	r0, [pc, #1024]	; 12968 <__assert_fail@plt+0x1a30>
   12564:	ldr	r0, [r0]
   12568:	bl	14cd0 <__assert_fail@plt+0x3d98>
   1256c:	mov	r0, r4
   12570:	bl	10e3c <exit@plt>
   12574:	mov	r4, r0
   12578:	sub	r3, r4, #48	; 0x30
   1257c:	cmp	r3, #9
   12580:	bls	125d0 <__assert_fail@plt+0x1698>
   12584:	mov	r0, #1
   12588:	bl	12090 <__assert_fail@plt+0x1158>
   1258c:	cmp	r0, #116	; 0x74
   12590:	beq	12604 <__assert_fail@plt+0x16cc>
   12594:	ble	125b0 <__assert_fail@plt+0x1678>
   12598:	cmp	r0, #117	; 0x75
   1259c:	beq	12610 <__assert_fail@plt+0x16d8>
   125a0:	cmp	r0, #119	; 0x77
   125a4:	bne	125c8 <__assert_fail@plt+0x1690>
   125a8:	ldr	r7, [sl]
   125ac:	b	124bc <__assert_fail@plt+0x1584>
   125b0:	cmp	r0, #115	; 0x73
   125b4:	moveq	r3, #1
   125b8:	strbeq	r3, [r8]
   125bc:	beq	124bc <__assert_fail@plt+0x1584>
   125c0:	mov	r4, r0
   125c4:	b	12578 <__assert_fail@plt+0x1640>
   125c8:	mov	r4, r0
   125cc:	b	12578 <__assert_fail@plt+0x1640>
   125d0:	mov	r2, #5
   125d4:	ldr	r1, [pc, #912]	; 1296c <__assert_fail@plt+0x1a34>
   125d8:	mov	r0, #0
   125dc:	bl	10d7c <dcgettext@plt>
   125e0:	mov	r3, r4
   125e4:	mov	r2, r0
   125e8:	mov	r1, #0
   125ec:	mov	r0, r1
   125f0:	bl	10de8 <error@plt>
   125f4:	b	12584 <__assert_fail@plt+0x164c>
   125f8:	mov	r3, #1
   125fc:	strb	r3, [r8, #12]
   12600:	b	124bc <__assert_fail@plt+0x1584>
   12604:	mov	r3, #1
   12608:	strb	r3, [r8, #20]
   1260c:	b	124bc <__assert_fail@plt+0x1584>
   12610:	mov	r3, #1
   12614:	ldr	r2, [pc, #804]	; 12940 <__assert_fail@plt+0x1a08>
   12618:	strb	r3, [r2, #340]	; 0x154
   1261c:	b	124bc <__assert_fail@plt+0x1584>
   12620:	ldr	r4, [sl]
   12624:	mov	r3, #0
   12628:	str	r3, [r9, #3508]	; 0xdb4
   1262c:	ldrb	r3, [r4]
   12630:	cmp	r3, #32
   12634:	bne	12658 <__assert_fail@plt+0x1720>
   12638:	mov	r3, r4
   1263c:	rsb	r4, r4, #1
   12640:	add	r1, r3, r4
   12644:	ldrb	r2, [r3, #1]!
   12648:	cmp	r2, #32
   1264c:	beq	12640 <__assert_fail@plt+0x1708>
   12650:	str	r1, [r9, #3508]	; 0xdb4
   12654:	mov	r4, r3
   12658:	str	r4, [r9, #3512]	; 0xdb8
   1265c:	mov	r0, r4
   12660:	bl	10e48 <strlen@plt>
   12664:	str	r0, [r8, #32]
   12668:	add	r0, r4, r0
   1266c:	cmp	r0, r4
   12670:	bls	126a0 <__assert_fail@plt+0x1768>
   12674:	ldrb	r3, [r0, #-1]
   12678:	cmp	r3, #32
   1267c:	bne	126a0 <__assert_fail@plt+0x1768>
   12680:	sub	r3, r0, #1
   12684:	mov	r1, r4
   12688:	mov	r0, r3
   1268c:	cmp	r3, r1
   12690:	beq	126a0 <__assert_fail@plt+0x1768>
   12694:	ldrb	r2, [r3, #-1]!
   12698:	cmp	r2, #32
   1269c:	beq	12688 <__assert_fail@plt+0x1750>
   126a0:	mov	r3, #0
   126a4:	strb	r3, [r0]
   126a8:	sub	r0, r0, r4
   126ac:	str	r0, [r9, #3504]	; 0xdb0
   126b0:	b	124bc <__assert_fail@plt+0x1584>
   126b4:	mov	r0, #0
   126b8:	bl	12090 <__assert_fail@plt+0x1158>
   126bc:	cmp	r7, #0
   126c0:	beq	12904 <__assert_fail@plt+0x19cc>
   126c4:	mov	r2, #5
   126c8:	ldr	r1, [pc, #672]	; 12970 <__assert_fail@plt+0x1a38>
   126cc:	mov	r0, #0
   126d0:	bl	10d7c <dcgettext@plt>
   126d4:	mov	r3, #0
   126d8:	str	r3, [sp, #16]
   126dc:	str	r0, [sp, #12]
   126e0:	ldr	r3, [pc, #584]	; 12930 <__assert_fail@plt+0x19f8>
   126e4:	str	r3, [sp, #8]
   126e8:	ldr	r2, [pc, #644]	; 12974 <__assert_fail@plt+0x1a3c>
   126ec:	mov	r3, #0
   126f0:	strd	r2, [sp]
   126f4:	mov	r2, #0
   126f8:	mov	r3, #0
   126fc:	mov	r0, r7
   12700:	bl	154b8 <__assert_fail@plt+0x4580>
   12704:	mov	r4, r0
   12708:	ldr	r3, [pc, #564]	; 12944 <__assert_fail@plt+0x1a0c>
   1270c:	str	r0, [r3, #40]	; 0x28
   12710:	cmp	fp, #0
   12714:	beq	1290c <__assert_fail@plt+0x19d4>
   12718:	mov	r2, #5
   1271c:	ldr	r1, [pc, #588]	; 12970 <__assert_fail@plt+0x1a38>
   12720:	mov	r0, #0
   12724:	bl	10d7c <dcgettext@plt>
   12728:	mov	r3, #0
   1272c:	str	r3, [sp, #16]
   12730:	str	r0, [sp, #12]
   12734:	ldr	r3, [pc, #500]	; 12930 <__assert_fail@plt+0x19f8>
   12738:	str	r3, [sp, #8]
   1273c:	mov	r2, r4
   12740:	asr	r3, r4, #31
   12744:	strd	r2, [sp]
   12748:	mov	r2, #0
   1274c:	mov	r3, #0
   12750:	mov	r0, fp
   12754:	bl	154b8 <__assert_fail@plt+0x4580>
   12758:	ldr	r3, [pc, #488]	; 12948 <__assert_fail@plt+0x1a10>
   1275c:	str	r0, [r3, #3492]	; 0xda4
   12760:	ldr	r3, [pc, #528]	; 12978 <__assert_fail@plt+0x1a40>
   12764:	ldr	r3, [r3]
   12768:	cmp	r6, r3
   1276c:	beq	12790 <__assert_fail@plt+0x1858>
   12770:	movle	sl, #1
   12774:	ble	1289c <__assert_fail@plt+0x1964>
   12778:	mov	r8, #0
   1277c:	mov	sl, #1
   12780:	ldr	fp, [pc, #500]	; 1297c <__assert_fail@plt+0x1a44>
   12784:	ldr	r9, [pc, #500]	; 12980 <__assert_fail@plt+0x1a48>
   12788:	ldr	r7, [pc, #488]	; 12978 <__assert_fail@plt+0x1a40>
   1278c:	b	1281c <__assert_fail@plt+0x18e4>
   12790:	ldr	r1, [pc, #484]	; 1297c <__assert_fail@plt+0x1a44>
   12794:	ldr	r3, [pc, #484]	; 12980 <__assert_fail@plt+0x1a48>
   12798:	ldr	r0, [r3]
   1279c:	bl	11bd0 <__assert_fail@plt+0xc98>
   127a0:	mov	sl, r0
   127a4:	ldr	r3, [pc, #468]	; 12980 <__assert_fail@plt+0x1a48>
   127a8:	ldr	r0, [r3]
   127ac:	bl	12b00 <__assert_fail@plt+0x1bc8>
   127b0:	cmp	r0, #0
   127b4:	beq	1289c <__assert_fail@plt+0x1964>
   127b8:	bl	10e60 <__errno_location@plt>
   127bc:	ldr	r4, [r0]
   127c0:	mov	r2, #5
   127c4:	ldr	r1, [pc, #440]	; 12984 <__assert_fail@plt+0x1a4c>
   127c8:	mov	r0, #0
   127cc:	bl	10d7c <dcgettext@plt>
   127d0:	mov	r3, r0
   127d4:	ldr	r2, [pc, #428]	; 12988 <__assert_fail@plt+0x1a50>
   127d8:	mov	r1, r4
   127dc:	mov	r0, #1
   127e0:	bl	10de8 <error@plt>
   127e4:	ldr	r1, [pc, #416]	; 1298c <__assert_fail@plt+0x1a54>
   127e8:	mov	r0, r4
   127ec:	bl	10f08 <fopen64@plt>
   127f0:	cmp	r0, #0
   127f4:	beq	12850 <__assert_fail@plt+0x1918>
   127f8:	mov	r1, r4
   127fc:	bl	11bd0 <__assert_fail@plt+0xc98>
   12800:	and	sl, sl, r0
   12804:	uxtb	sl, sl
   12808:	ldr	r3, [r7]
   1280c:	add	r3, r3, #1
   12810:	str	r3, [r7]
   12814:	cmp	r6, r3
   12818:	ble	12894 <__assert_fail@plt+0x195c>
   1281c:	ldr	r4, [r5, r3, lsl #2]
   12820:	mov	r1, fp
   12824:	mov	r0, r4
   12828:	bl	10cec <strcmp@plt>
   1282c:	cmp	r0, #0
   12830:	bne	127e4 <__assert_fail@plt+0x18ac>
   12834:	mov	r1, r4
   12838:	ldr	r0, [r9]
   1283c:	bl	11bd0 <__assert_fail@plt+0xc98>
   12840:	and	sl, sl, r0
   12844:	uxtb	sl, sl
   12848:	mov	r8, #1
   1284c:	b	12808 <__assert_fail@plt+0x18d0>
   12850:	bl	10e60 <__errno_location@plt>
   12854:	ldr	sl, [r0]
   12858:	mov	r2, #5
   1285c:	ldr	r1, [pc, #300]	; 12990 <__assert_fail@plt+0x1a58>
   12860:	mov	r0, #0
   12864:	bl	10d7c <dcgettext@plt>
   12868:	str	r0, [sp, #28]
   1286c:	mov	r1, r4
   12870:	mov	r0, #4
   12874:	bl	145d0 <__assert_fail@plt+0x3698>
   12878:	mov	r3, r0
   1287c:	ldr	r2, [sp, #28]
   12880:	mov	r1, sl
   12884:	mov	r0, #0
   12888:	bl	10de8 <error@plt>
   1288c:	mov	sl, #0
   12890:	b	12808 <__assert_fail@plt+0x18d0>
   12894:	cmp	r8, #0
   12898:	bne	127a4 <__assert_fail@plt+0x186c>
   1289c:	eor	r0, sl, #1
   128a0:	uxtb	r0, r0
   128a4:	add	sp, sp, #36	; 0x24
   128a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ac:	mov	r2, #5
   128b0:	ldr	r1, [pc, #184]	; 12970 <__assert_fail@plt+0x1a38>
   128b4:	mov	r0, #0
   128b8:	bl	10d7c <dcgettext@plt>
   128bc:	mov	r3, #0
   128c0:	str	r3, [sp, #16]
   128c4:	str	r0, [sp, #12]
   128c8:	ldr	r3, [pc, #96]	; 12930 <__assert_fail@plt+0x19f8>
   128cc:	str	r3, [sp, #8]
   128d0:	mov	r2, #75	; 0x4b
   128d4:	mov	r3, #0
   128d8:	strd	r2, [sp]
   128dc:	mov	r2, #0
   128e0:	mov	r3, #0
   128e4:	mov	r0, fp
   128e8:	bl	154b8 <__assert_fail@plt+0x4580>
   128ec:	ldr	r3, [pc, #84]	; 12948 <__assert_fail@plt+0x1a10>
   128f0:	str	r0, [r3, #3492]	; 0xda4
   128f4:	add	r0, r0, #10
   128f8:	ldr	r3, [pc, #68]	; 12944 <__assert_fail@plt+0x1a0c>
   128fc:	str	r0, [r3, #40]	; 0x28
   12900:	b	12760 <__assert_fail@plt+0x1828>
   12904:	cmp	fp, #0
   12908:	bne	128ac <__assert_fail@plt+0x1974>
   1290c:	ldr	r3, [pc, #48]	; 12944 <__assert_fail@plt+0x1a0c>
   12910:	ldr	r3, [r3, #40]	; 0x28
   12914:	mov	r1, #200	; 0xc8
   12918:	mov	r0, #187	; 0xbb
   1291c:	mul	r0, r0, r3
   12920:	bl	15fe4 <__assert_fail@plt+0x50ac>
   12924:	ldr	r3, [pc, #28]	; 12948 <__assert_fail@plt+0x1a10>
   12928:	str	r0, [r3, #3492]	; 0xda4
   1292c:	b	12760 <__assert_fail@plt+0x1828>
   12930:	andeq	r6, r1, r0, lsr #12
   12934:	andeq	r6, r1, ip, lsl #19
   12938:	andeq	r6, r1, r4, lsr sl
   1293c:			; <UNDEFINED> instruction: 0x000129b4
   12940:	andeq	r0, r3, r0, asr #2
   12944:	andeq	r8, r2, r0, ror #2
   12948:	andeq	lr, r2, r8, asr #2
   1294c:	andeq	r8, r2, r8, asr r1
   12950:	andeq	r6, r1, r8, ror #8
   12954:			; <UNDEFINED> instruction: 0x00016abc
   12958:	andeq	r6, r1, ip, lsr #21
   1295c:	andeq	r8, r2, ip, ror #1
   12960:	andeq	r6, r1, r8, lsl #19
   12964:	andeq	r6, r1, r8, asr #10
   12968:	andeq	r8, r2, r4, asr r1
   1296c:	andeq	r6, r1, ip, asr #20
   12970:	ldrdeq	r6, [r1], -r4
   12974:	andeq	r0, r0, r4, asr #19
   12978:	andeq	r8, r2, r0, asr #2
   1297c:	andeq	r6, r1, r4, ror #21
   12980:	andeq	r8, r2, r0, asr r1
   12984:	andeq	r6, r1, r8, lsl #22
   12988:	andeq	r6, r1, ip, lsl #24
   1298c:	andeq	r6, r1, r8, ror #21
   12990:	andeq	r6, r1, ip, ror #21
   12994:	ldr	r3, [pc, #4]	; 129a0 <__assert_fail@plt+0x1a68>
   12998:	str	r0, [r3]
   1299c:	bx	lr
   129a0:	muleq	r3, ip, r2
   129a4:	ldr	r3, [pc, #4]	; 129b0 <__assert_fail@plt+0x1a78>
   129a8:	strb	r0, [r3, #4]
   129ac:	bx	lr
   129b0:	muleq	r3, ip, r2
   129b4:	push	{r4, r5, r6, lr}
   129b8:	sub	sp, sp, #8
   129bc:	ldr	r3, [pc, #200]	; 12a8c <__assert_fail@plt+0x1b54>
   129c0:	ldr	r0, [r3]
   129c4:	bl	15b28 <__assert_fail@plt+0x4bf0>
   129c8:	cmp	r0, #0
   129cc:	beq	129f0 <__assert_fail@plt+0x1ab8>
   129d0:	ldr	r3, [pc, #184]	; 12a90 <__assert_fail@plt+0x1b58>
   129d4:	ldrb	r3, [r3, #4]
   129d8:	cmp	r3, #0
   129dc:	beq	12a0c <__assert_fail@plt+0x1ad4>
   129e0:	bl	10e60 <__errno_location@plt>
   129e4:	ldr	r3, [r0]
   129e8:	cmp	r3, #32
   129ec:	bne	12a0c <__assert_fail@plt+0x1ad4>
   129f0:	ldr	r3, [pc, #156]	; 12a94 <__assert_fail@plt+0x1b5c>
   129f4:	ldr	r0, [r3]
   129f8:	bl	15b28 <__assert_fail@plt+0x4bf0>
   129fc:	cmp	r0, #0
   12a00:	bne	12a80 <__assert_fail@plt+0x1b48>
   12a04:	add	sp, sp, #8
   12a08:	pop	{r4, r5, r6, pc}
   12a0c:	mov	r2, #5
   12a10:	ldr	r1, [pc, #128]	; 12a98 <__assert_fail@plt+0x1b60>
   12a14:	mov	r0, #0
   12a18:	bl	10d7c <dcgettext@plt>
   12a1c:	mov	r4, r0
   12a20:	ldr	r3, [pc, #104]	; 12a90 <__assert_fail@plt+0x1b58>
   12a24:	ldr	r5, [r3]
   12a28:	cmp	r5, #0
   12a2c:	beq	12a64 <__assert_fail@plt+0x1b2c>
   12a30:	bl	10e60 <__errno_location@plt>
   12a34:	ldr	r6, [r0]
   12a38:	mov	r0, r5
   12a3c:	bl	1467c <__assert_fail@plt+0x3744>
   12a40:	str	r4, [sp]
   12a44:	mov	r3, r0
   12a48:	ldr	r2, [pc, #76]	; 12a9c <__assert_fail@plt+0x1b64>
   12a4c:	mov	r1, r6
   12a50:	mov	r0, #0
   12a54:	bl	10de8 <error@plt>
   12a58:	ldr	r3, [pc, #64]	; 12aa0 <__assert_fail@plt+0x1b68>
   12a5c:	ldr	r0, [r3]
   12a60:	bl	10d28 <_exit@plt>
   12a64:	bl	10e60 <__errno_location@plt>
   12a68:	mov	r3, r4
   12a6c:	ldr	r2, [pc, #48]	; 12aa4 <__assert_fail@plt+0x1b6c>
   12a70:	ldr	r1, [r0]
   12a74:	mov	r0, #0
   12a78:	bl	10de8 <error@plt>
   12a7c:	b	12a58 <__assert_fail@plt+0x1b20>
   12a80:	ldr	r3, [pc, #24]	; 12aa0 <__assert_fail@plt+0x1b68>
   12a84:	ldr	r0, [r3]
   12a88:	bl	10d28 <_exit@plt>
   12a8c:	andeq	r8, r2, r4, asr r1
   12a90:	muleq	r3, ip, r2
   12a94:	andeq	r8, r2, r8, asr #2
   12a98:	strdeq	r6, [r1], -ip
   12a9c:	andeq	r6, r1, r8, lsl #24
   12aa0:	strdeq	r8, [r2], -r0
   12aa4:	andeq	r6, r1, ip, lsl #24
   12aa8:	push	{r4, r5, lr}
   12aac:	sub	sp, sp, #20
   12ab0:	ldr	r1, [sp, #40]	; 0x28
   12ab4:	str	r1, [sp, #8]
   12ab8:	ldrd	r4, [sp, #32]
   12abc:	strd	r4, [sp]
   12ac0:	bl	10cf8 <posix_fadvise64@plt>
   12ac4:	add	sp, sp, #20
   12ac8:	pop	{r4, r5, pc}
   12acc:	cmp	r0, #0
   12ad0:	bxeq	lr
   12ad4:	push	{r4, lr}
   12ad8:	sub	sp, sp, #16
   12adc:	mov	r4, r1
   12ae0:	bl	10e90 <fileno@plt>
   12ae4:	str	r4, [sp, #8]
   12ae8:	mov	r2, #0
   12aec:	mov	r3, #0
   12af0:	strd	r2, [sp]
   12af4:	bl	10cf8 <posix_fadvise64@plt>
   12af8:	add	sp, sp, #16
   12afc:	pop	{r4, pc}
   12b00:	push	{r4, r5, r6, lr}
   12b04:	sub	sp, sp, #8
   12b08:	mov	r4, r0
   12b0c:	bl	10e90 <fileno@plt>
   12b10:	cmp	r0, #0
   12b14:	blt	12b8c <__assert_fail@plt+0x1c54>
   12b18:	mov	r0, r4
   12b1c:	bl	10e0c <__freading@plt>
   12b20:	cmp	r0, #0
   12b24:	beq	12b58 <__assert_fail@plt+0x1c20>
   12b28:	mov	r0, r4
   12b2c:	bl	10e90 <fileno@plt>
   12b30:	mov	r3, #1
   12b34:	str	r3, [sp]
   12b38:	mov	r2, #0
   12b3c:	mov	r3, #0
   12b40:	bl	10db8 <lseek64@plt>
   12b44:	mvn	r2, #0
   12b48:	mvn	r3, #0
   12b4c:	cmp	r1, r3
   12b50:	cmpeq	r0, r2
   12b54:	beq	12b98 <__assert_fail@plt+0x1c60>
   12b58:	mov	r0, r4
   12b5c:	bl	12ba8 <__assert_fail@plt+0x1c70>
   12b60:	cmp	r0, #0
   12b64:	beq	12b98 <__assert_fail@plt+0x1c60>
   12b68:	bl	10e60 <__errno_location@plt>
   12b6c:	mov	r5, r0
   12b70:	ldr	r6, [r0]
   12b74:	mov	r0, r4
   12b78:	bl	10ea8 <fclose@plt>
   12b7c:	cmp	r6, #0
   12b80:	strne	r6, [r5]
   12b84:	mvnne	r0, #0
   12b88:	b	12ba0 <__assert_fail@plt+0x1c68>
   12b8c:	mov	r0, r4
   12b90:	bl	10ea8 <fclose@plt>
   12b94:	b	12ba0 <__assert_fail@plt+0x1c68>
   12b98:	mov	r0, r4
   12b9c:	bl	10ea8 <fclose@plt>
   12ba0:	add	sp, sp, #8
   12ba4:	pop	{r4, r5, r6, pc}
   12ba8:	push	{r4, lr}
   12bac:	sub	sp, sp, #8
   12bb0:	subs	r4, r0, #0
   12bb4:	beq	12bc8 <__assert_fail@plt+0x1c90>
   12bb8:	mov	r0, r4
   12bbc:	bl	10e0c <__freading@plt>
   12bc0:	cmp	r0, #0
   12bc4:	bne	12bd8 <__assert_fail@plt+0x1ca0>
   12bc8:	mov	r0, r4
   12bcc:	bl	10d04 <fflush@plt>
   12bd0:	add	sp, sp, #8
   12bd4:	pop	{r4, pc}
   12bd8:	ldr	r3, [r4]
   12bdc:	tst	r3, #256	; 0x100
   12be0:	bne	12bf0 <__assert_fail@plt+0x1cb8>
   12be4:	mov	r0, r4
   12be8:	bl	10d04 <fflush@plt>
   12bec:	b	12bd0 <__assert_fail@plt+0x1c98>
   12bf0:	mov	r3, #1
   12bf4:	str	r3, [sp]
   12bf8:	mov	r2, #0
   12bfc:	mov	r3, #0
   12c00:	mov	r0, r4
   12c04:	bl	12c0c <__assert_fail@plt+0x1cd4>
   12c08:	b	12be4 <__assert_fail@plt+0x1cac>
   12c0c:	push	{r4, r5, r6, r7, lr}
   12c10:	sub	sp, sp, #12
   12c14:	mov	r4, r0
   12c18:	mov	r6, r2
   12c1c:	mov	r7, r3
   12c20:	ldr	r5, [sp, #32]
   12c24:	ldr	r2, [r0, #8]
   12c28:	ldr	r3, [r0, #4]
   12c2c:	cmp	r2, r3
   12c30:	beq	12c50 <__assert_fail@plt+0x1d18>
   12c34:	str	r5, [sp]
   12c38:	mov	r2, r6
   12c3c:	mov	r3, r7
   12c40:	mov	r0, r4
   12c44:	bl	10eb4 <fseeko64@plt>
   12c48:	add	sp, sp, #12
   12c4c:	pop	{r4, r5, r6, r7, pc}
   12c50:	ldr	r2, [r0, #20]
   12c54:	ldr	r3, [r0, #16]
   12c58:	cmp	r2, r3
   12c5c:	bne	12c34 <__assert_fail@plt+0x1cfc>
   12c60:	ldr	r3, [r0, #36]	; 0x24
   12c64:	cmp	r3, #0
   12c68:	bne	12c34 <__assert_fail@plt+0x1cfc>
   12c6c:	bl	10e90 <fileno@plt>
   12c70:	str	r5, [sp]
   12c74:	mov	r2, r6
   12c78:	mov	r3, r7
   12c7c:	bl	10db8 <lseek64@plt>
   12c80:	mvn	r2, #0
   12c84:	mvn	r3, #0
   12c88:	cmp	r1, r3
   12c8c:	cmpeq	r0, r2
   12c90:	beq	12cac <__assert_fail@plt+0x1d74>
   12c94:	ldr	r3, [r4]
   12c98:	bic	r3, r3, #16
   12c9c:	str	r3, [r4]
   12ca0:	strd	r0, [r4, #80]	; 0x50
   12ca4:	mov	r0, #0
   12ca8:	b	12c48 <__assert_fail@plt+0x1d10>
   12cac:	mvn	r0, #0
   12cb0:	b	12c48 <__assert_fail@plt+0x1d10>
   12cb4:	push	{r4, r5, r6, lr}
   12cb8:	subs	r4, r0, #0
   12cbc:	beq	12d34 <__assert_fail@plt+0x1dfc>
   12cc0:	mov	r1, #47	; 0x2f
   12cc4:	mov	r0, r4
   12cc8:	bl	10ee4 <strrchr@plt>
   12ccc:	cmp	r0, #0
   12cd0:	addne	r5, r0, #1
   12cd4:	moveq	r5, r4
   12cd8:	sub	r3, r5, r4
   12cdc:	cmp	r3, #6
   12ce0:	ble	12d20 <__assert_fail@plt+0x1de8>
   12ce4:	mov	r2, #7
   12ce8:	ldr	r1, [pc, #96]	; 12d50 <__assert_fail@plt+0x1e18>
   12cec:	sub	r0, r5, #7
   12cf0:	bl	10f20 <strncmp@plt>
   12cf4:	cmp	r0, #0
   12cf8:	bne	12d20 <__assert_fail@plt+0x1de8>
   12cfc:	mov	r2, #3
   12d00:	ldr	r1, [pc, #76]	; 12d54 <__assert_fail@plt+0x1e1c>
   12d04:	mov	r0, r5
   12d08:	bl	10f20 <strncmp@plt>
   12d0c:	cmp	r0, #0
   12d10:	addeq	r4, r5, #3
   12d14:	ldreq	r3, [pc, #60]	; 12d58 <__assert_fail@plt+0x1e20>
   12d18:	streq	r4, [r3]
   12d1c:	movne	r4, r5
   12d20:	ldr	r3, [pc, #52]	; 12d5c <__assert_fail@plt+0x1e24>
   12d24:	str	r4, [r3]
   12d28:	ldr	r3, [pc, #48]	; 12d60 <__assert_fail@plt+0x1e28>
   12d2c:	str	r4, [r3]
   12d30:	pop	{r4, r5, r6, pc}
   12d34:	ldr	r3, [pc, #40]	; 12d64 <__assert_fail@plt+0x1e2c>
   12d38:	ldr	r3, [r3]
   12d3c:	mov	r2, #55	; 0x37
   12d40:	mov	r1, #1
   12d44:	ldr	r0, [pc, #28]	; 12d68 <__assert_fail@plt+0x1e30>
   12d48:	bl	10dac <fwrite@plt>
   12d4c:	bl	10f2c <abort@plt>
   12d50:	andeq	r6, r1, r8, asr #24
   12d54:	andeq	r6, r1, r0, asr ip
   12d58:	andeq	r8, r2, r8, lsr r1
   12d5c:	andeq	r0, r3, r4, lsr #5
   12d60:	andeq	r8, r2, ip, lsr r1
   12d64:	andeq	r8, r2, r8, asr #2
   12d68:	andeq	r6, r1, r0, lsl ip
   12d6c:	push	{r4, r5, r6, lr}
   12d70:	mov	r5, r0
   12d74:	mov	r4, r1
   12d78:	mov	r2, #48	; 0x30
   12d7c:	mov	r1, #0
   12d80:	bl	10e78 <memset@plt>
   12d84:	cmp	r4, #10
   12d88:	beq	12d98 <__assert_fail@plt+0x1e60>
   12d8c:	str	r4, [r5]
   12d90:	mov	r0, r5
   12d94:	pop	{r4, r5, r6, pc}
   12d98:	bl	10f2c <abort@plt>
   12d9c:	push	{r4, r5, r6, lr}
   12da0:	mov	r4, r0
   12da4:	mov	r5, r1
   12da8:	mov	r2, #5
   12dac:	mov	r1, r0
   12db0:	mov	r0, #0
   12db4:	bl	10d7c <dcgettext@plt>
   12db8:	cmp	r4, r0
   12dbc:	popne	{r4, r5, r6, pc}
   12dc0:	bl	15bf8 <__assert_fail@plt+0x4cc0>
   12dc4:	ldrb	r3, [r0]
   12dc8:	bic	r3, r3, #32
   12dcc:	cmp	r3, #85	; 0x55
   12dd0:	beq	12e4c <__assert_fail@plt+0x1f14>
   12dd4:	cmp	r3, #71	; 0x47
   12dd8:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12ddc:	ldrb	r3, [r0, #1]
   12de0:	bic	r3, r3, #32
   12de4:	cmp	r3, #66	; 0x42
   12de8:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12dec:	ldrb	r3, [r0, #2]
   12df0:	cmp	r3, #49	; 0x31
   12df4:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12df8:	ldrb	r3, [r0, #3]
   12dfc:	cmp	r3, #56	; 0x38
   12e00:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e04:	ldrb	r3, [r0, #4]
   12e08:	cmp	r3, #48	; 0x30
   12e0c:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e10:	ldrb	r3, [r0, #5]
   12e14:	cmp	r3, #51	; 0x33
   12e18:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e1c:	ldrb	r3, [r0, #6]
   12e20:	cmp	r3, #48	; 0x30
   12e24:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e28:	ldrb	r3, [r0, #7]
   12e2c:	cmp	r3, #0
   12e30:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e34:	ldrb	r2, [r4]
   12e38:	ldr	r3, [pc, #124]	; 12ebc <__assert_fail@plt+0x1f84>
   12e3c:	ldr	r0, [pc, #124]	; 12ec0 <__assert_fail@plt+0x1f88>
   12e40:	cmp	r2, #96	; 0x60
   12e44:	movne	r0, r3
   12e48:	pop	{r4, r5, r6, pc}
   12e4c:	ldrb	r3, [r0, #1]
   12e50:	bic	r3, r3, #32
   12e54:	cmp	r3, #84	; 0x54
   12e58:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e5c:	ldrb	r3, [r0, #2]
   12e60:	bic	r3, r3, #32
   12e64:	cmp	r3, #70	; 0x46
   12e68:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e6c:	ldrb	r3, [r0, #3]
   12e70:	cmp	r3, #45	; 0x2d
   12e74:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e78:	ldrb	r3, [r0, #4]
   12e7c:	cmp	r3, #56	; 0x38
   12e80:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e84:	ldrb	r3, [r0, #5]
   12e88:	cmp	r3, #0
   12e8c:	bne	12ea8 <__assert_fail@plt+0x1f70>
   12e90:	ldrb	r2, [r4]
   12e94:	ldr	r3, [pc, #40]	; 12ec4 <__assert_fail@plt+0x1f8c>
   12e98:	ldr	r0, [pc, #40]	; 12ec8 <__assert_fail@plt+0x1f90>
   12e9c:	cmp	r2, #96	; 0x60
   12ea0:	movne	r0, r3
   12ea4:	pop	{r4, r5, r6, pc}
   12ea8:	ldr	r3, [pc, #28]	; 12ecc <__assert_fail@plt+0x1f94>
   12eac:	ldr	r0, [pc, #28]	; 12ed0 <__assert_fail@plt+0x1f98>
   12eb0:	cmp	r5, #9
   12eb4:	movne	r0, r3
   12eb8:	pop	{r4, r5, r6, pc}
   12ebc:	andeq	r6, r1, ip, lsr #25
   12ec0:			; <UNDEFINED> instruction: 0x00016cb4
   12ec4:	andeq	r6, r1, r8, lsr #25
   12ec8:			; <UNDEFINED> instruction: 0x00016cb8
   12ecc:			; <UNDEFINED> instruction: 0x00016cb0
   12ed0:	andeq	r6, r1, ip, lsl #10
   12ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed8:	sub	sp, sp, #116	; 0x74
   12edc:	str	r0, [sp, #36]	; 0x24
   12ee0:	mov	sl, r1
   12ee4:	str	r2, [sp, #52]	; 0x34
   12ee8:	str	r3, [sp, #28]
   12eec:	ldr	r8, [sp, #152]	; 0x98
   12ef0:	bl	10dc4 <__ctype_get_mb_cur_max@plt>
   12ef4:	str	r0, [sp, #84]	; 0x54
   12ef8:	ldr	r3, [sp, #156]	; 0x9c
   12efc:	lsr	r3, r3, #1
   12f00:	and	r3, r3, #1
   12f04:	str	r3, [sp, #32]
   12f08:	mov	r3, #1
   12f0c:	str	r3, [sp, #40]	; 0x28
   12f10:	mov	r3, #0
   12f14:	str	r3, [sp, #80]	; 0x50
   12f18:	str	r3, [sp, #44]	; 0x2c
   12f1c:	str	r3, [sp, #48]	; 0x30
   12f20:	str	r3, [sp, #60]	; 0x3c
   12f24:	str	r3, [sp, #72]	; 0x48
   12f28:	str	r3, [sp, #76]	; 0x4c
   12f2c:	mov	r7, sl
   12f30:	mov	sl, r8
   12f34:	cmp	sl, #10
   12f38:	ldrls	pc, [pc, sl, lsl #2]
   12f3c:	b	130f4 <__assert_fail@plt+0x21bc>
   12f40:	andeq	r2, r1, r4, lsr #31
   12f44:	andeq	r2, r1, r4, ror pc
   12f48:	ldrdeq	r3, [r1], -r0
   12f4c:	andeq	r2, r1, ip, ror #30
   12f50:	andeq	r3, r1, r4, lsl #1
   12f54:			; <UNDEFINED> instruction: 0x00012fb4
   12f58:	andeq	r4, r1, r0, lsr #32
   12f5c:	strdeq	r3, [r1], -r8
   12f60:	strdeq	r2, [r1], -r0
   12f64:	strdeq	r2, [r1], -r0
   12f68:	strdeq	r2, [r1], -r0
   12f6c:	mov	r3, #1
   12f70:	str	r3, [sp, #48]	; 0x30
   12f74:	mov	r3, #1
   12f78:	str	r3, [sp, #32]
   12f7c:	str	r3, [sp, #60]	; 0x3c
   12f80:	ldr	r3, [pc, #4068]	; 13f6c <__assert_fail@plt+0x3034>
   12f84:	str	r3, [sp, #72]	; 0x48
   12f88:	mov	fp, #0
   12f8c:	mov	sl, #2
   12f90:	mov	r6, #0
   12f94:	ldr	r3, [sp, #48]	; 0x30
   12f98:	eor	r3, r3, #1
   12f9c:	str	r3, [sp, #68]	; 0x44
   12fa0:	b	13888 <__assert_fail@plt+0x2950>
   12fa4:	mov	r3, #0
   12fa8:	str	r3, [sp, #32]
   12fac:	mov	fp, r3
   12fb0:	b	12f90 <__assert_fail@plt+0x2058>
   12fb4:	ldr	r3, [sp, #32]
   12fb8:	cmp	r3, #0
   12fbc:	bne	13110 <__assert_fail@plt+0x21d8>
   12fc0:	cmp	r7, #0
   12fc4:	beq	13130 <__assert_fail@plt+0x21f8>
   12fc8:	ldr	r3, [sp, #36]	; 0x24
   12fcc:	mov	r2, #34	; 0x22
   12fd0:	strb	r2, [r3]
   12fd4:	mov	r3, #1
   12fd8:	str	r3, [sp, #48]	; 0x30
   12fdc:	str	r3, [sp, #60]	; 0x3c
   12fe0:	ldr	r3, [pc, #3980]	; 13f74 <__assert_fail@plt+0x303c>
   12fe4:	str	r3, [sp, #72]	; 0x48
   12fe8:	mov	fp, #1
   12fec:	b	12f90 <__assert_fail@plt+0x2058>
   12ff0:	cmp	sl, #10
   12ff4:	beq	13018 <__assert_fail@plt+0x20e0>
   12ff8:	mov	r1, sl
   12ffc:	ldr	r0, [pc, #3948]	; 13f70 <__assert_fail@plt+0x3038>
   13000:	bl	12d9c <__assert_fail@plt+0x1e64>
   13004:	str	r0, [sp, #164]	; 0xa4
   13008:	mov	r1, sl
   1300c:	ldr	r0, [pc, #3928]	; 13f6c <__assert_fail@plt+0x3034>
   13010:	bl	12d9c <__assert_fail@plt+0x1e64>
   13014:	str	r0, [sp, #168]	; 0xa8
   13018:	ldr	r3, [sp, #32]
   1301c:	cmp	r3, #0
   13020:	movne	fp, #0
   13024:	bne	1305c <__assert_fail@plt+0x2124>
   13028:	ldr	r3, [sp, #164]	; 0xa4
   1302c:	ldrb	r3, [r3]
   13030:	cmp	r3, #0
   13034:	beq	1307c <__assert_fail@plt+0x2144>
   13038:	ldr	r2, [sp, #164]	; 0xa4
   1303c:	mov	fp, #0
   13040:	ldr	r1, [sp, #36]	; 0x24
   13044:	cmp	r7, fp
   13048:	strbhi	r3, [r1, fp]
   1304c:	add	fp, fp, #1
   13050:	ldrb	r3, [r2, #1]!
   13054:	cmp	r3, #0
   13058:	bne	13044 <__assert_fail@plt+0x210c>
   1305c:	ldr	r0, [sp, #168]	; 0xa8
   13060:	bl	10e48 <strlen@plt>
   13064:	str	r0, [sp, #60]	; 0x3c
   13068:	ldr	r3, [sp, #168]	; 0xa8
   1306c:	str	r3, [sp, #72]	; 0x48
   13070:	mov	r3, #1
   13074:	str	r3, [sp, #48]	; 0x30
   13078:	b	12f90 <__assert_fail@plt+0x2058>
   1307c:	mov	fp, #0
   13080:	b	1305c <__assert_fail@plt+0x2124>
   13084:	ldr	r3, [sp, #32]
   13088:	cmp	r3, #0
   1308c:	bne	1314c <__assert_fail@plt+0x2214>
   13090:	mov	r3, #1
   13094:	str	r3, [sp, #48]	; 0x30
   13098:	cmp	r7, #0
   1309c:	beq	13168 <__assert_fail@plt+0x2230>
   130a0:	ldr	r3, [sp, #36]	; 0x24
   130a4:	mov	r2, #39	; 0x27
   130a8:	strb	r2, [r3]
   130ac:	mov	r3, #0
   130b0:	str	r3, [sp, #32]
   130b4:	mov	r3, #1
   130b8:	str	r3, [sp, #60]	; 0x3c
   130bc:	ldr	r3, [pc, #3752]	; 13f6c <__assert_fail@plt+0x3034>
   130c0:	str	r3, [sp, #72]	; 0x48
   130c4:	mov	fp, #1
   130c8:	mov	sl, #2
   130cc:	b	12f90 <__assert_fail@plt+0x2058>
   130d0:	ldr	r3, [sp, #32]
   130d4:	cmp	r3, #0
   130d8:	beq	13098 <__assert_fail@plt+0x2160>
   130dc:	mov	r3, #1
   130e0:	str	r3, [sp, #60]	; 0x3c
   130e4:	ldr	r3, [pc, #3712]	; 13f6c <__assert_fail@plt+0x3034>
   130e8:	str	r3, [sp, #72]	; 0x48
   130ec:	mov	fp, #0
   130f0:	b	12f90 <__assert_fail@plt+0x2058>
   130f4:	bl	10f2c <abort@plt>
   130f8:	mov	r3, #0
   130fc:	str	r3, [sp, #32]
   13100:	mov	r3, #1
   13104:	str	r3, [sp, #48]	; 0x30
   13108:	mov	fp, #0
   1310c:	b	12f90 <__assert_fail@plt+0x2058>
   13110:	ldr	r3, [sp, #32]
   13114:	str	r3, [sp, #48]	; 0x30
   13118:	mov	r3, #1
   1311c:	str	r3, [sp, #60]	; 0x3c
   13120:	ldr	r3, [pc, #3660]	; 13f74 <__assert_fail@plt+0x303c>
   13124:	str	r3, [sp, #72]	; 0x48
   13128:	mov	fp, #0
   1312c:	b	12f90 <__assert_fail@plt+0x2058>
   13130:	mov	r3, #1
   13134:	str	r3, [sp, #48]	; 0x30
   13138:	str	r3, [sp, #60]	; 0x3c
   1313c:	ldr	r3, [pc, #3632]	; 13f74 <__assert_fail@plt+0x303c>
   13140:	str	r3, [sp, #72]	; 0x48
   13144:	mov	fp, #1
   13148:	b	12f90 <__assert_fail@plt+0x2058>
   1314c:	mov	r3, #1
   13150:	str	r3, [sp, #60]	; 0x3c
   13154:	ldr	r3, [pc, #3600]	; 13f6c <__assert_fail@plt+0x3034>
   13158:	str	r3, [sp, #72]	; 0x48
   1315c:	mov	fp, #0
   13160:	mov	sl, #2
   13164:	b	12f90 <__assert_fail@plt+0x2058>
   13168:	mov	r3, #0
   1316c:	str	r3, [sp, #32]
   13170:	mov	r3, #1
   13174:	str	r3, [sp, #60]	; 0x3c
   13178:	ldr	r3, [pc, #3564]	; 13f6c <__assert_fail@plt+0x3034>
   1317c:	str	r3, [sp, #72]	; 0x48
   13180:	mov	fp, #1
   13184:	mov	sl, #2
   13188:	b	12f90 <__assert_fail@plt+0x2058>
   1318c:	mov	r3, #0
   13190:	str	r3, [sp, #56]	; 0x38
   13194:	ldr	r3, [sp, #52]	; 0x34
   13198:	add	r2, r3, r6
   1319c:	str	r2, [sp, #64]	; 0x40
   131a0:	ldrb	r4, [r3, r6]
   131a4:	cmp	r4, #126	; 0x7e
   131a8:	ldrls	pc, [pc, r4, lsl #2]
   131ac:	b	139e8 <__assert_fail@plt+0x2ab0>
   131b0:	andeq	r3, r1, r8, asr #7
   131b4:	andeq	r3, r1, r8, ror #19
   131b8:	andeq	r3, r1, r8, ror #19
   131bc:	andeq	r3, r1, r8, ror #19
   131c0:	andeq	r3, r1, r8, ror #19
   131c4:	andeq	r3, r1, r8, ror #19
   131c8:	andeq	r3, r1, r8, ror #19
   131cc:	andeq	r3, r1, r4, lsr #14
   131d0:	andeq	r3, r1, r0, asr #7
   131d4:	ldrdeq	r3, [r1], -ip
   131d8:	ldrdeq	r3, [r1], -r4
   131dc:	andeq	r3, r1, r4, asr #12
   131e0:	andeq	r3, r1, ip, lsr r6
   131e4:			; <UNDEFINED> instruction: 0x000133b8
   131e8:	andeq	r3, r1, r8, ror #19
   131ec:	andeq	r3, r1, r8, ror #19
   131f0:	andeq	r3, r1, r8, ror #19
   131f4:	andeq	r3, r1, r8, ror #19
   131f8:	andeq	r3, r1, r8, ror #19
   131fc:	andeq	r3, r1, r8, ror #19
   13200:	andeq	r3, r1, r8, ror #19
   13204:	andeq	r3, r1, r8, ror #19
   13208:	andeq	r3, r1, r8, ror #19
   1320c:	andeq	r3, r1, r8, ror #19
   13210:	andeq	r3, r1, r8, ror #19
   13214:	andeq	r3, r1, r8, ror #19
   13218:	andeq	r3, r1, r8, ror #19
   1321c:	andeq	r3, r1, r8, ror #19
   13220:	andeq	r3, r1, r8, ror #19
   13224:	andeq	r3, r1, r8, ror #19
   13228:	andeq	r3, r1, r8, ror #19
   1322c:	andeq	r3, r1, r8, ror #19
   13230:	andeq	r3, r1, r8, ror r7
   13234:	andeq	r3, r1, r4, ror r7
   13238:	andeq	r3, r1, r4, ror r7
   1323c:	andeq	r3, r1, ip, asr #14
   13240:	andeq	r3, r1, r4, ror r7
   13244:			; <UNDEFINED> instruction: 0x00013dbc
   13248:	andeq	r3, r1, r4, ror r7
   1324c:	andeq	r3, r1, ip, asr #18
   13250:	andeq	r3, r1, r4, ror r7
   13254:	andeq	r3, r1, r4, ror r7
   13258:	andeq	r3, r1, r4, ror r7
   1325c:			; <UNDEFINED> instruction: 0x00013dbc
   13260:			; <UNDEFINED> instruction: 0x00013dbc
   13264:			; <UNDEFINED> instruction: 0x00013dbc
   13268:			; <UNDEFINED> instruction: 0x00013dbc
   1326c:			; <UNDEFINED> instruction: 0x00013dbc
   13270:			; <UNDEFINED> instruction: 0x00013dbc
   13274:			; <UNDEFINED> instruction: 0x00013dbc
   13278:			; <UNDEFINED> instruction: 0x00013dbc
   1327c:			; <UNDEFINED> instruction: 0x00013dbc
   13280:			; <UNDEFINED> instruction: 0x00013dbc
   13284:			; <UNDEFINED> instruction: 0x00013dbc
   13288:			; <UNDEFINED> instruction: 0x00013dbc
   1328c:			; <UNDEFINED> instruction: 0x00013dbc
   13290:			; <UNDEFINED> instruction: 0x00013dbc
   13294:			; <UNDEFINED> instruction: 0x00013dbc
   13298:			; <UNDEFINED> instruction: 0x00013dbc
   1329c:	andeq	r3, r1, r4, ror r7
   132a0:	andeq	r3, r1, r4, ror r7
   132a4:	andeq	r3, r1, r4, ror r7
   132a8:	andeq	r3, r1, r4, ror r7
   132ac:	ldrdeq	r3, [r1], -r0
   132b0:	andeq	r3, r1, r8, ror #19
   132b4:			; <UNDEFINED> instruction: 0x00013dbc
   132b8:			; <UNDEFINED> instruction: 0x00013dbc
   132bc:			; <UNDEFINED> instruction: 0x00013dbc
   132c0:			; <UNDEFINED> instruction: 0x00013dbc
   132c4:			; <UNDEFINED> instruction: 0x00013dbc
   132c8:			; <UNDEFINED> instruction: 0x00013dbc
   132cc:			; <UNDEFINED> instruction: 0x00013dbc
   132d0:			; <UNDEFINED> instruction: 0x00013dbc
   132d4:			; <UNDEFINED> instruction: 0x00013dbc
   132d8:			; <UNDEFINED> instruction: 0x00013dbc
   132dc:			; <UNDEFINED> instruction: 0x00013dbc
   132e0:			; <UNDEFINED> instruction: 0x00013dbc
   132e4:			; <UNDEFINED> instruction: 0x00013dbc
   132e8:			; <UNDEFINED> instruction: 0x00013dbc
   132ec:			; <UNDEFINED> instruction: 0x00013dbc
   132f0:			; <UNDEFINED> instruction: 0x00013dbc
   132f4:			; <UNDEFINED> instruction: 0x00013dbc
   132f8:			; <UNDEFINED> instruction: 0x00013dbc
   132fc:			; <UNDEFINED> instruction: 0x00013dbc
   13300:			; <UNDEFINED> instruction: 0x00013dbc
   13304:			; <UNDEFINED> instruction: 0x00013dbc
   13308:			; <UNDEFINED> instruction: 0x00013dbc
   1330c:			; <UNDEFINED> instruction: 0x00013dbc
   13310:			; <UNDEFINED> instruction: 0x00013dbc
   13314:			; <UNDEFINED> instruction: 0x00013dbc
   13318:			; <UNDEFINED> instruction: 0x00013dbc
   1331c:	andeq	r3, r1, r4, ror r7
   13320:	andeq	r3, r1, ip, asr #12
   13324:			; <UNDEFINED> instruction: 0x00013dbc
   13328:	andeq	r3, r1, r4, ror r7
   1332c:			; <UNDEFINED> instruction: 0x00013dbc
   13330:	andeq	r3, r1, r4, ror r7
   13334:			; <UNDEFINED> instruction: 0x00013dbc
   13338:			; <UNDEFINED> instruction: 0x00013dbc
   1333c:			; <UNDEFINED> instruction: 0x00013dbc
   13340:			; <UNDEFINED> instruction: 0x00013dbc
   13344:			; <UNDEFINED> instruction: 0x00013dbc
   13348:			; <UNDEFINED> instruction: 0x00013dbc
   1334c:			; <UNDEFINED> instruction: 0x00013dbc
   13350:			; <UNDEFINED> instruction: 0x00013dbc
   13354:			; <UNDEFINED> instruction: 0x00013dbc
   13358:			; <UNDEFINED> instruction: 0x00013dbc
   1335c:			; <UNDEFINED> instruction: 0x00013dbc
   13360:			; <UNDEFINED> instruction: 0x00013dbc
   13364:			; <UNDEFINED> instruction: 0x00013dbc
   13368:			; <UNDEFINED> instruction: 0x00013dbc
   1336c:			; <UNDEFINED> instruction: 0x00013dbc
   13370:			; <UNDEFINED> instruction: 0x00013dbc
   13374:			; <UNDEFINED> instruction: 0x00013dbc
   13378:			; <UNDEFINED> instruction: 0x00013dbc
   1337c:			; <UNDEFINED> instruction: 0x00013dbc
   13380:			; <UNDEFINED> instruction: 0x00013dbc
   13384:			; <UNDEFINED> instruction: 0x00013dbc
   13388:			; <UNDEFINED> instruction: 0x00013dbc
   1338c:			; <UNDEFINED> instruction: 0x00013dbc
   13390:			; <UNDEFINED> instruction: 0x00013dbc
   13394:			; <UNDEFINED> instruction: 0x00013dbc
   13398:			; <UNDEFINED> instruction: 0x00013dbc
   1339c:	andeq	r3, r1, ip, lsr #14
   133a0:	andeq	r3, r1, r4, ror r7
   133a4:	andeq	r3, r1, ip, lsr #14
   133a8:	andeq	r3, r1, ip, asr #14
   133ac:	mov	r3, #0
   133b0:	str	r3, [sp, #56]	; 0x38
   133b4:	b	13194 <__assert_fail@plt+0x225c>
   133b8:	mov	r3, #114	; 0x72
   133bc:	b	136e0 <__assert_fail@plt+0x27a8>
   133c0:	mov	r3, #98	; 0x62
   133c4:	b	136f8 <__assert_fail@plt+0x27c0>
   133c8:	ldr	r3, [sp, #48]	; 0x30
   133cc:	cmp	r3, #0
   133d0:	beq	134b8 <__assert_fail@plt+0x2580>
   133d4:	ldr	r3, [sp, #32]
   133d8:	cmp	r3, #0
   133dc:	bne	13f40 <__assert_fail@plt+0x3008>
   133e0:	ldr	r3, [sp, #44]	; 0x2c
   133e4:	eor	r3, r3, #1
   133e8:	cmp	sl, #2
   133ec:	movne	r3, #0
   133f0:	andeq	r3, r3, #1
   133f4:	cmp	r3, #0
   133f8:	moveq	r2, fp
   133fc:	beq	13440 <__assert_fail@plt+0x2508>
   13400:	cmp	r7, fp
   13404:	ldrhi	r2, [sp, #36]	; 0x24
   13408:	movhi	r1, #39	; 0x27
   1340c:	strbhi	r1, [r2, fp]
   13410:	add	r2, fp, #1
   13414:	cmp	r7, r2
   13418:	ldrhi	r1, [sp, #36]	; 0x24
   1341c:	movhi	r0, #36	; 0x24
   13420:	strbhi	r0, [r1, r2]
   13424:	add	r2, fp, #2
   13428:	cmp	r7, r2
   1342c:	ldrhi	r1, [sp, #36]	; 0x24
   13430:	movhi	r0, #39	; 0x27
   13434:	strbhi	r0, [r1, r2]
   13438:	add	r2, fp, #3
   1343c:	str	r3, [sp, #44]	; 0x2c
   13440:	cmp	r7, r2
   13444:	ldrhi	r3, [sp, #36]	; 0x24
   13448:	movhi	r1, #92	; 0x5c
   1344c:	strbhi	r1, [r3, r2]
   13450:	add	fp, r2, #1
   13454:	cmp	r5, #0
   13458:	beq	13dc4 <__assert_fail@plt+0x2e8c>
   1345c:	add	r3, r6, #1
   13460:	ldr	r1, [sp, #28]
   13464:	cmp	r1, r3
   13468:	bls	13dd4 <__assert_fail@plt+0x2e9c>
   1346c:	ldr	r1, [sp, #52]	; 0x34
   13470:	ldrb	r3, [r1, r3]
   13474:	sub	r3, r3, #48	; 0x30
   13478:	uxtb	r3, r3
   1347c:	cmp	r3, #9
   13480:	bhi	13de0 <__assert_fail@plt+0x2ea8>
   13484:	cmp	r7, fp
   13488:	movhi	r3, #48	; 0x30
   1348c:	ldrhi	r1, [sp, #36]	; 0x24
   13490:	strbhi	r3, [r1, fp]
   13494:	add	r3, r2, #2
   13498:	cmp	r7, r3
   1349c:	movhi	r1, #48	; 0x30
   134a0:	ldrhi	r0, [sp, #36]	; 0x24
   134a4:	strbhi	r1, [r0, r3]
   134a8:	add	fp, r2, #3
   134ac:	ldr	r8, [sp, #32]
   134b0:	mov	r4, #48	; 0x30
   134b4:	b	13790 <__assert_fail@plt+0x2858>
   134b8:	ldr	r3, [sp, #156]	; 0x9c
   134bc:	tst	r3, #1
   134c0:	bne	13884 <__assert_fail@plt+0x294c>
   134c4:	ldr	r5, [sp, #48]	; 0x30
   134c8:	mov	r8, r5
   134cc:	b	13790 <__assert_fail@plt+0x2858>
   134d0:	cmp	sl, #2
   134d4:	beq	134ec <__assert_fail@plt+0x25b4>
   134d8:	cmp	sl, #5
   134dc:	beq	13504 <__assert_fail@plt+0x25cc>
   134e0:	mov	r8, #0
   134e4:	mov	r5, r8
   134e8:	b	13790 <__assert_fail@plt+0x2858>
   134ec:	ldr	r3, [sp, #32]
   134f0:	cmp	r3, #0
   134f4:	bne	13f54 <__assert_fail@plt+0x301c>
   134f8:	mov	r8, r3
   134fc:	mov	r5, r3
   13500:	b	13790 <__assert_fail@plt+0x2858>
   13504:	ldr	r3, [sp, #156]	; 0x9c
   13508:	tst	r3, #4
   1350c:	beq	13dec <__assert_fail@plt+0x2eb4>
   13510:	add	r3, r6, #2
   13514:	ldr	r2, [sp, #28]
   13518:	cmp	r2, r3
   1351c:	bls	13df8 <__assert_fail@plt+0x2ec0>
   13520:	ldr	r2, [sp, #52]	; 0x34
   13524:	add	r2, r2, r6
   13528:	ldrb	r2, [r2, #1]
   1352c:	cmp	r2, #63	; 0x3f
   13530:	movne	r8, #0
   13534:	movne	r5, r8
   13538:	bne	13790 <__assert_fail@plt+0x2858>
   1353c:	ldr	r2, [sp, #52]	; 0x34
   13540:	ldrb	r2, [r2, r3]
   13544:	sub	r1, r2, #33	; 0x21
   13548:	cmp	r1, #29
   1354c:	ldrls	pc, [pc, r1, lsl #2]
   13550:	b	13e04 <__assert_fail@plt+0x2ecc>
   13554:	andeq	r3, r1, ip, asr #11
   13558:	andeq	r3, r1, r4, lsl #28
   1355c:	andeq	r3, r1, r4, lsl #28
   13560:	andeq	r3, r1, r4, lsl #28
   13564:	andeq	r3, r1, r4, lsl #28
   13568:	andeq	r3, r1, r4, lsl #28
   1356c:	andeq	r3, r1, ip, asr #11
   13570:	andeq	r3, r1, ip, asr #11
   13574:	andeq	r3, r1, ip, asr #11
   13578:	andeq	r3, r1, r4, lsl #28
   1357c:	andeq	r3, r1, r4, lsl #28
   13580:	andeq	r3, r1, r4, lsl #28
   13584:	andeq	r3, r1, ip, asr #11
   13588:	andeq	r3, r1, r4, lsl #28
   1358c:	andeq	r3, r1, ip, asr #11
   13590:	andeq	r3, r1, r4, lsl #28
   13594:	andeq	r3, r1, r4, lsl #28
   13598:	andeq	r3, r1, r4, lsl #28
   1359c:	andeq	r3, r1, r4, lsl #28
   135a0:	andeq	r3, r1, r4, lsl #28
   135a4:	andeq	r3, r1, r4, lsl #28
   135a8:	andeq	r3, r1, r4, lsl #28
   135ac:	andeq	r3, r1, r4, lsl #28
   135b0:	andeq	r3, r1, r4, lsl #28
   135b4:	andeq	r3, r1, r4, lsl #28
   135b8:	andeq	r3, r1, r4, lsl #28
   135bc:	andeq	r3, r1, r4, lsl #28
   135c0:	andeq	r3, r1, ip, asr #11
   135c4:	andeq	r3, r1, ip, asr #11
   135c8:	andeq	r3, r1, ip, asr #11
   135cc:	ldr	r1, [sp, #32]
   135d0:	cmp	r1, #0
   135d4:	bne	14014 <__assert_fail@plt+0x30dc>
   135d8:	cmp	r7, fp
   135dc:	movhi	r1, #63	; 0x3f
   135e0:	ldrhi	r0, [sp, #36]	; 0x24
   135e4:	strbhi	r1, [r0, fp]
   135e8:	add	r1, fp, #1
   135ec:	cmp	r7, r1
   135f0:	ldrhi	r0, [sp, #36]	; 0x24
   135f4:	movhi	ip, #34	; 0x22
   135f8:	strbhi	ip, [r0, r1]
   135fc:	add	r1, fp, #2
   13600:	cmp	r7, r1
   13604:	ldrhi	r0, [sp, #36]	; 0x24
   13608:	movhi	ip, #34	; 0x22
   1360c:	strbhi	ip, [r0, r1]
   13610:	add	r1, fp, #3
   13614:	cmp	r7, r1
   13618:	movhi	r0, #63	; 0x3f
   1361c:	ldrhi	ip, [sp, #36]	; 0x24
   13620:	strbhi	r0, [ip, r1]
   13624:	add	fp, fp, #4
   13628:	ldr	r5, [sp, #32]
   1362c:	mov	r8, r5
   13630:	mov	r4, r2
   13634:	mov	r6, r3
   13638:	b	13790 <__assert_fail@plt+0x2858>
   1363c:	mov	r3, #102	; 0x66
   13640:	b	136f8 <__assert_fail@plt+0x27c0>
   13644:	mov	r3, #118	; 0x76
   13648:	b	136f8 <__assert_fail@plt+0x27c0>
   1364c:	cmp	sl, #2
   13650:	beq	136bc <__assert_fail@plt+0x2784>
   13654:	ldr	r3, [sp, #48]	; 0x30
   13658:	ldr	r2, [sp, #32]
   1365c:	and	r3, r3, r2
   13660:	tst	r9, r3
   13664:	moveq	r3, r4
   13668:	beq	136f8 <__assert_fail@plt+0x27c0>
   1366c:	mov	r8, #0
   13670:	mov	r5, r8
   13674:	eor	r5, r5, #1
   13678:	ldr	r3, [sp, #44]	; 0x2c
   1367c:	and	r5, r5, r3
   13680:	tst	r5, #255	; 0xff
   13684:	beq	13864 <__assert_fail@plt+0x292c>
   13688:	cmp	r7, fp
   1368c:	ldrhi	r3, [sp, #36]	; 0x24
   13690:	movhi	r2, #39	; 0x27
   13694:	strbhi	r2, [r3, fp]
   13698:	add	r3, fp, #1
   1369c:	cmp	r7, r3
   136a0:	ldrhi	r2, [sp, #36]	; 0x24
   136a4:	movhi	r1, #39	; 0x27
   136a8:	strbhi	r1, [r2, r3]
   136ac:	add	fp, fp, #2
   136b0:	mov	r3, #0
   136b4:	str	r3, [sp, #44]	; 0x2c
   136b8:	b	13864 <__assert_fail@plt+0x292c>
   136bc:	ldr	r3, [sp, #32]
   136c0:	cmp	r3, #0
   136c4:	bne	13f60 <__assert_fail@plt+0x3028>
   136c8:	mov	r8, r3
   136cc:	mov	r5, r3
   136d0:	b	13674 <__assert_fail@plt+0x273c>
   136d4:	mov	r3, #110	; 0x6e
   136d8:	b	136e0 <__assert_fail@plt+0x27a8>
   136dc:	mov	r3, #116	; 0x74
   136e0:	ldr	r2, [sp, #32]
   136e4:	cmp	sl, #2
   136e8:	movne	r2, #0
   136ec:	andeq	r2, r2, #1
   136f0:	cmp	r2, #0
   136f4:	bne	13718 <__assert_fail@plt+0x27e0>
   136f8:	ldr	r2, [sp, #48]	; 0x30
   136fc:	cmp	r2, #0
   13700:	moveq	r8, r2
   13704:	moveq	r5, r2
   13708:	beq	13790 <__assert_fail@plt+0x2858>
   1370c:	mov	r4, r3
   13710:	mov	r8, #0
   13714:	b	137e8 <__assert_fail@plt+0x28b0>
   13718:	mov	r8, sl
   1371c:	mov	sl, r7
   13720:	b	13f8c <__assert_fail@plt+0x3054>
   13724:	mov	r3, #97	; 0x61
   13728:	b	136f8 <__assert_fail@plt+0x27c0>
   1372c:	ldr	r3, [sp, #28]
   13730:	cmn	r3, #1
   13734:	beq	13760 <__assert_fail@plt+0x2828>
   13738:	ldr	r3, [sp, #28]
   1373c:	subs	r3, r3, #1
   13740:	movne	r3, #1
   13744:	cmp	r3, #0
   13748:	bne	13e10 <__assert_fail@plt+0x2ed8>
   1374c:	cmp	r6, #0
   13750:	beq	13778 <__assert_fail@plt+0x2840>
   13754:	mov	r8, #0
   13758:	mov	r5, r8
   1375c:	b	13790 <__assert_fail@plt+0x2858>
   13760:	ldr	r3, [sp, #52]	; 0x34
   13764:	ldrb	r3, [r3, #1]
   13768:	adds	r3, r3, #0
   1376c:	movne	r3, #1
   13770:	b	13744 <__assert_fail@plt+0x280c>
   13774:	mov	r8, #0
   13778:	ldr	r5, [sp, #32]
   1377c:	cmp	sl, #2
   13780:	movne	r5, #0
   13784:	andeq	r5, r5, #1
   13788:	cmp	r5, #0
   1378c:	bne	13940 <__assert_fail@plt+0x2a08>
   13790:	ldr	r3, [sp, #68]	; 0x44
   13794:	cmp	sl, #2
   13798:	orreq	r3, r3, #1
   1379c:	eor	r3, r3, #1
   137a0:	ldr	r2, [sp, #32]
   137a4:	orr	r3, r2, r3
   137a8:	tst	r3, #255	; 0xff
   137ac:	beq	137dc <__assert_fail@plt+0x28a4>
   137b0:	ldr	r3, [sp, #160]	; 0xa0
   137b4:	cmp	r3, #0
   137b8:	beq	137dc <__assert_fail@plt+0x28a4>
   137bc:	lsr	r2, r4, #5
   137c0:	uxtb	r2, r2
   137c4:	and	r3, r4, #31
   137c8:	ldr	r1, [sp, #160]	; 0xa0
   137cc:	ldr	r2, [r1, r2, lsl #2]
   137d0:	lsr	r3, r2, r3
   137d4:	tst	r3, #1
   137d8:	bne	137e8 <__assert_fail@plt+0x28b0>
   137dc:	ldr	r3, [sp, #56]	; 0x38
   137e0:	cmp	r3, #0
   137e4:	beq	13674 <__assert_fail@plt+0x273c>
   137e8:	ldr	r3, [sp, #32]
   137ec:	cmp	r3, #0
   137f0:	bne	13ffc <__assert_fail@plt+0x30c4>
   137f4:	ldr	r3, [sp, #44]	; 0x2c
   137f8:	eor	r3, r3, #1
   137fc:	cmp	sl, #2
   13800:	movne	r3, #0
   13804:	andeq	r3, r3, #1
   13808:	cmp	r3, #0
   1380c:	beq	13850 <__assert_fail@plt+0x2918>
   13810:	cmp	r7, fp
   13814:	ldrhi	r2, [sp, #36]	; 0x24
   13818:	movhi	r1, #39	; 0x27
   1381c:	strbhi	r1, [r2, fp]
   13820:	add	r2, fp, #1
   13824:	cmp	r7, r2
   13828:	ldrhi	r1, [sp, #36]	; 0x24
   1382c:	movhi	r0, #36	; 0x24
   13830:	strbhi	r0, [r1, r2]
   13834:	add	r2, fp, #2
   13838:	cmp	r7, r2
   1383c:	ldrhi	r1, [sp, #36]	; 0x24
   13840:	movhi	r0, #39	; 0x27
   13844:	strbhi	r0, [r1, r2]
   13848:	add	fp, fp, #3
   1384c:	str	r3, [sp, #44]	; 0x2c
   13850:	cmp	r7, fp
   13854:	ldrhi	r3, [sp, #36]	; 0x24
   13858:	movhi	r2, #92	; 0x5c
   1385c:	strbhi	r2, [r3, fp]
   13860:	add	fp, fp, #1
   13864:	cmp	fp, r7
   13868:	ldrcc	r3, [sp, #36]	; 0x24
   1386c:	strbcc	r4, [r3, fp]
   13870:	add	fp, fp, #1
   13874:	ldr	r3, [sp, #40]	; 0x28
   13878:	cmp	r8, #0
   1387c:	moveq	r3, #0
   13880:	str	r3, [sp, #40]	; 0x28
   13884:	add	r6, r6, #1
   13888:	ldr	r3, [sp, #28]
   1388c:	cmn	r3, #1
   13890:	beq	13e1c <__assert_fail@plt+0x2ee4>
   13894:	ldr	r3, [sp, #28]
   13898:	subs	r8, r3, r6
   1389c:	movne	r8, #1
   138a0:	cmp	r8, #0
   138a4:	beq	13e30 <__assert_fail@plt+0x2ef8>
   138a8:	ldr	r5, [sp, #48]	; 0x30
   138ac:	cmp	sl, #2
   138b0:	moveq	r5, #0
   138b4:	andne	r5, r5, #1
   138b8:	ldr	r3, [sp, #60]	; 0x3c
   138bc:	adds	r9, r3, #0
   138c0:	movne	r9, #1
   138c4:	ands	r2, r5, r9
   138c8:	str	r2, [sp, #56]	; 0x38
   138cc:	beq	13194 <__assert_fail@plt+0x225c>
   138d0:	add	r4, r6, r3
   138d4:	ldr	r2, [sp, #28]
   138d8:	cmp	r3, #1
   138dc:	movls	r3, #0
   138e0:	movhi	r3, #1
   138e4:	cmn	r2, #1
   138e8:	movne	r3, #0
   138ec:	cmp	r3, #0
   138f0:	beq	13900 <__assert_fail@plt+0x29c8>
   138f4:	ldr	r0, [sp, #52]	; 0x34
   138f8:	bl	10e48 <strlen@plt>
   138fc:	str	r0, [sp, #28]
   13900:	ldr	r3, [sp, #28]
   13904:	cmp	r3, r4
   13908:	bcc	1318c <__assert_fail@plt+0x2254>
   1390c:	ldr	r2, [sp, #60]	; 0x3c
   13910:	ldr	r1, [sp, #72]	; 0x48
   13914:	ldr	r3, [sp, #52]	; 0x34
   13918:	add	r0, r3, r6
   1391c:	bl	10d64 <memcmp@plt>
   13920:	cmp	r0, #0
   13924:	bne	133ac <__assert_fail@plt+0x2474>
   13928:	ldr	r3, [sp, #32]
   1392c:	cmp	r3, #0
   13930:	beq	13194 <__assert_fail@plt+0x225c>
   13934:	mov	r8, sl
   13938:	mov	sl, r7
   1393c:	b	13f8c <__assert_fail@plt+0x3054>
   13940:	mov	r8, sl
   13944:	mov	sl, r7
   13948:	b	13f8c <__assert_fail@plt+0x3054>
   1394c:	cmp	sl, #2
   13950:	strne	r8, [sp, #80]	; 0x50
   13954:	movne	r5, #0
   13958:	bne	13790 <__assert_fail@plt+0x2858>
   1395c:	ldr	r3, [sp, #32]
   13960:	cmp	r3, #0
   13964:	bne	13f78 <__assert_fail@plt+0x3040>
   13968:	ldr	r2, [sp, #76]	; 0x4c
   1396c:	adds	r3, r7, #0
   13970:	movne	r3, #1
   13974:	cmp	r2, #0
   13978:	movne	r3, #0
   1397c:	cmp	r3, #0
   13980:	movne	r3, #0
   13984:	bne	139b4 <__assert_fail@plt+0x2a7c>
   13988:	cmp	r7, fp
   1398c:	ldrhi	r3, [sp, #36]	; 0x24
   13990:	movhi	r2, #39	; 0x27
   13994:	strbhi	r2, [r3, fp]
   13998:	add	r3, fp, #1
   1399c:	cmp	r7, r3
   139a0:	ldrhi	r2, [sp, #36]	; 0x24
   139a4:	movhi	r1, #92	; 0x5c
   139a8:	strbhi	r1, [r2, r3]
   139ac:	mov	r3, r7
   139b0:	ldr	r7, [sp, #76]	; 0x4c
   139b4:	add	r2, fp, #2
   139b8:	cmp	r2, r3
   139bc:	ldrcc	r1, [sp, #36]	; 0x24
   139c0:	movcc	r0, #39	; 0x27
   139c4:	strbcc	r0, [r1, r2]
   139c8:	add	fp, fp, #3
   139cc:	ldr	r2, [sp, #32]
   139d0:	mov	r5, r2
   139d4:	str	r8, [sp, #80]	; 0x50
   139d8:	str	r2, [sp, #44]	; 0x2c
   139dc:	str	r7, [sp, #76]	; 0x4c
   139e0:	mov	r7, r3
   139e4:	b	13790 <__assert_fail@plt+0x2858>
   139e8:	ldr	r5, [sp, #84]	; 0x54
   139ec:	cmp	r5, #1
   139f0:	beq	13a20 <__assert_fail@plt+0x2ae8>
   139f4:	mov	r3, #0
   139f8:	str	r3, [sp, #104]	; 0x68
   139fc:	str	r3, [sp, #108]	; 0x6c
   13a00:	ldr	r3, [sp, #28]
   13a04:	cmn	r3, #1
   13a08:	beq	13a54 <__assert_fail@plt+0x2b1c>
   13a0c:	mov	r3, #0
   13a10:	str	r4, [sp, #88]	; 0x58
   13a14:	str	fp, [sp, #92]	; 0x5c
   13a18:	mov	fp, r3
   13a1c:	b	13b7c <__assert_fail@plt+0x2c44>
   13a20:	bl	10e30 <__ctype_b_loc@plt>
   13a24:	ldr	r2, [r0]
   13a28:	lsl	r3, r4, #1
   13a2c:	ldrh	r8, [r2, r3]
   13a30:	lsr	r8, r8, #14
   13a34:	and	r8, r8, #1
   13a38:	mov	r2, r5
   13a3c:	eor	r5, r8, #1
   13a40:	ldr	r3, [sp, #48]	; 0x30
   13a44:	and	r5, r5, r3
   13a48:	ands	r5, r5, #255	; 0xff
   13a4c:	beq	13790 <__assert_fail@plt+0x2858>
   13a50:	b	13c14 <__assert_fail@plt+0x2cdc>
   13a54:	ldr	r0, [sp, #52]	; 0x34
   13a58:	bl	10e48 <strlen@plt>
   13a5c:	str	r0, [sp, #28]
   13a60:	b	13a0c <__assert_fail@plt+0x2ad4>
   13a64:	mov	r2, fp
   13a68:	mov	r1, r4
   13a6c:	ldr	r4, [sp, #88]	; 0x58
   13a70:	ldr	fp, [sp, #92]	; 0x5c
   13a74:	ldr	r0, [sp, #28]
   13a78:	cmp	r0, r5
   13a7c:	bls	13c48 <__assert_fail@plt+0x2d10>
   13a80:	ldrb	r3, [r1]
   13a84:	cmp	r3, #0
   13a88:	beq	13c50 <__assert_fail@plt+0x2d18>
   13a8c:	mov	r3, r1
   13a90:	add	r2, r2, #1
   13a94:	add	r1, r6, r2
   13a98:	cmp	r0, r1
   13a9c:	bls	13c58 <__assert_fail@plt+0x2d20>
   13aa0:	ldrb	r1, [r3, #1]!
   13aa4:	cmp	r1, #0
   13aa8:	bne	13a90 <__assert_fail@plt+0x2b58>
   13aac:	mov	r8, #0
   13ab0:	b	13c0c <__assert_fail@plt+0x2cd4>
   13ab4:	cmp	r4, r5
   13ab8:	beq	13b58 <__assert_fail@plt+0x2c20>
   13abc:	ldrb	r3, [r4, #1]!
   13ac0:	sub	r3, r3, #91	; 0x5b
   13ac4:	cmp	r3, #33	; 0x21
   13ac8:	ldrls	pc, [pc, r3, lsl #2]
   13acc:	b	13ab4 <__assert_fail@plt+0x2b7c>
   13ad0:	andeq	r3, r1, r4, lsl #31
   13ad4:	andeq	r3, r1, r4, lsl #31
   13ad8:			; <UNDEFINED> instruction: 0x00013ab4
   13adc:	andeq	r3, r1, r4, lsl #31
   13ae0:			; <UNDEFINED> instruction: 0x00013ab4
   13ae4:	andeq	r3, r1, r4, lsl #31
   13ae8:			; <UNDEFINED> instruction: 0x00013ab4
   13aec:			; <UNDEFINED> instruction: 0x00013ab4
   13af0:			; <UNDEFINED> instruction: 0x00013ab4
   13af4:			; <UNDEFINED> instruction: 0x00013ab4
   13af8:			; <UNDEFINED> instruction: 0x00013ab4
   13afc:			; <UNDEFINED> instruction: 0x00013ab4
   13b00:			; <UNDEFINED> instruction: 0x00013ab4
   13b04:			; <UNDEFINED> instruction: 0x00013ab4
   13b08:			; <UNDEFINED> instruction: 0x00013ab4
   13b0c:			; <UNDEFINED> instruction: 0x00013ab4
   13b10:			; <UNDEFINED> instruction: 0x00013ab4
   13b14:			; <UNDEFINED> instruction: 0x00013ab4
   13b18:			; <UNDEFINED> instruction: 0x00013ab4
   13b1c:			; <UNDEFINED> instruction: 0x00013ab4
   13b20:			; <UNDEFINED> instruction: 0x00013ab4
   13b24:			; <UNDEFINED> instruction: 0x00013ab4
   13b28:			; <UNDEFINED> instruction: 0x00013ab4
   13b2c:			; <UNDEFINED> instruction: 0x00013ab4
   13b30:			; <UNDEFINED> instruction: 0x00013ab4
   13b34:			; <UNDEFINED> instruction: 0x00013ab4
   13b38:			; <UNDEFINED> instruction: 0x00013ab4
   13b3c:			; <UNDEFINED> instruction: 0x00013ab4
   13b40:			; <UNDEFINED> instruction: 0x00013ab4
   13b44:			; <UNDEFINED> instruction: 0x00013ab4
   13b48:			; <UNDEFINED> instruction: 0x00013ab4
   13b4c:			; <UNDEFINED> instruction: 0x00013ab4
   13b50:			; <UNDEFINED> instruction: 0x00013ab4
   13b54:	andeq	r3, r1, r4, lsl #31
   13b58:	ldr	r0, [sp, #100]	; 0x64
   13b5c:	bl	10da0 <iswprint@plt>
   13b60:	cmp	r0, #0
   13b64:	moveq	r8, #0
   13b68:	add	fp, fp, r9
   13b6c:	add	r0, sp, #104	; 0x68
   13b70:	bl	10d4c <mbsinit@plt>
   13b74:	cmp	r0, #0
   13b78:	bne	13bec <__assert_fail@plt+0x2cb4>
   13b7c:	add	r5, r6, fp
   13b80:	ldr	r3, [sp, #52]	; 0x34
   13b84:	add	r4, r3, r5
   13b88:	add	r3, sp, #104	; 0x68
   13b8c:	ldr	r2, [sp, #28]
   13b90:	sub	r2, r2, r5
   13b94:	mov	r1, r4
   13b98:	add	r0, sp, #100	; 0x64
   13b9c:	bl	15c2c <__assert_fail@plt+0x4cf4>
   13ba0:	subs	r9, r0, #0
   13ba4:	beq	13c60 <__assert_fail@plt+0x2d28>
   13ba8:	cmn	r9, #1
   13bac:	beq	13bfc <__assert_fail@plt+0x2cc4>
   13bb0:	cmn	r9, #2
   13bb4:	beq	13a64 <__assert_fail@plt+0x2b2c>
   13bb8:	ldr	r3, [sp, #32]
   13bbc:	cmp	sl, #2
   13bc0:	movne	r3, #0
   13bc4:	andeq	r3, r3, #1
   13bc8:	cmp	r3, #0
   13bcc:	beq	13b58 <__assert_fail@plt+0x2c20>
   13bd0:	cmp	r9, #1
   13bd4:	bls	13b58 <__assert_fail@plt+0x2c20>
   13bd8:	sub	r3, r9, #1
   13bdc:	add	r5, r3, r5
   13be0:	ldr	r3, [sp, #52]	; 0x34
   13be4:	add	r5, r3, r5
   13be8:	b	13abc <__assert_fail@plt+0x2b84>
   13bec:	ldr	r4, [sp, #88]	; 0x58
   13bf0:	mov	r2, fp
   13bf4:	ldr	fp, [sp, #92]	; 0x5c
   13bf8:	b	13c0c <__assert_fail@plt+0x2cd4>
   13bfc:	ldr	r4, [sp, #88]	; 0x58
   13c00:	mov	r2, fp
   13c04:	ldr	fp, [sp, #92]	; 0x5c
   13c08:	mov	r8, #0
   13c0c:	cmp	r2, #1
   13c10:	bls	13a3c <__assert_fail@plt+0x2b04>
   13c14:	add	r1, r6, r2
   13c18:	ldr	ip, [sp, #64]	; 0x40
   13c1c:	mov	r5, #0
   13c20:	eor	r3, r8, #1
   13c24:	ldr	r2, [sp, #48]	; 0x30
   13c28:	and	r3, r3, r2
   13c2c:	uxtb	r3, r3
   13c30:	ldr	r9, [sp, #32]
   13c34:	ldr	lr, [sp, #44]	; 0x2c
   13c38:	ldr	r2, [sp, #56]	; 0x38
   13c3c:	str	r8, [sp, #56]	; 0x38
   13c40:	ldr	r0, [sp, #36]	; 0x24
   13c44:	b	13ce0 <__assert_fail@plt+0x2da8>
   13c48:	mov	r8, #0
   13c4c:	b	13c0c <__assert_fail@plt+0x2cd4>
   13c50:	mov	r8, #0
   13c54:	b	13c0c <__assert_fail@plt+0x2cd4>
   13c58:	mov	r8, #0
   13c5c:	b	13c0c <__assert_fail@plt+0x2cd4>
   13c60:	ldr	r4, [sp, #88]	; 0x58
   13c64:	mov	r2, fp
   13c68:	ldr	fp, [sp, #92]	; 0x5c
   13c6c:	b	13c0c <__assert_fail@plt+0x2cd4>
   13c70:	cmp	r2, #0
   13c74:	beq	13c88 <__assert_fail@plt+0x2d50>
   13c78:	cmp	r7, fp
   13c7c:	movhi	r2, #92	; 0x5c
   13c80:	strbhi	r2, [r0, fp]
   13c84:	add	fp, fp, #1
   13c88:	add	r8, r6, #1
   13c8c:	cmp	r1, r8
   13c90:	bls	13d98 <__assert_fail@plt+0x2e60>
   13c94:	eor	r2, r5, #1
   13c98:	and	r2, r2, lr
   13c9c:	ands	r2, r2, #255	; 0xff
   13ca0:	beq	13db4 <__assert_fail@plt+0x2e7c>
   13ca4:	cmp	r7, fp
   13ca8:	movhi	r2, #39	; 0x27
   13cac:	strbhi	r2, [r0, fp]
   13cb0:	add	r2, fp, #1
   13cb4:	cmp	r7, r2
   13cb8:	movhi	lr, #39	; 0x27
   13cbc:	strbhi	lr, [r0, r2]
   13cc0:	add	fp, fp, #2
   13cc4:	mov	r6, r8
   13cc8:	mov	r2, r3
   13ccc:	mov	lr, r3
   13cd0:	cmp	r7, fp
   13cd4:	strbhi	r4, [r0, fp]
   13cd8:	add	fp, fp, #1
   13cdc:	ldrb	r4, [ip, #1]!
   13ce0:	cmp	r3, #0
   13ce4:	beq	13c70 <__assert_fail@plt+0x2d38>
   13ce8:	cmp	r9, #0
   13cec:	bne	13ff0 <__assert_fail@plt+0x30b8>
   13cf0:	eor	r5, lr, #1
   13cf4:	cmp	sl, #2
   13cf8:	movne	r5, #0
   13cfc:	andeq	r5, r5, #1
   13d00:	cmp	r5, #0
   13d04:	beq	13d3c <__assert_fail@plt+0x2e04>
   13d08:	cmp	r7, fp
   13d0c:	movhi	lr, #39	; 0x27
   13d10:	strbhi	lr, [r0, fp]
   13d14:	add	lr, fp, #1
   13d18:	cmp	r7, lr
   13d1c:	movhi	r8, #36	; 0x24
   13d20:	strbhi	r8, [r0, lr]
   13d24:	add	lr, fp, #2
   13d28:	cmp	r7, lr
   13d2c:	movhi	r8, #39	; 0x27
   13d30:	strbhi	r8, [r0, lr]
   13d34:	add	fp, fp, #3
   13d38:	mov	lr, r5
   13d3c:	cmp	r7, fp
   13d40:	movhi	r5, #92	; 0x5c
   13d44:	strbhi	r5, [r0, fp]
   13d48:	add	r5, fp, #1
   13d4c:	cmp	r7, r5
   13d50:	lsrhi	r8, r4, #6
   13d54:	addhi	r8, r8, #48	; 0x30
   13d58:	strbhi	r8, [r0, r5]
   13d5c:	add	r8, fp, #2
   13d60:	cmp	r7, r8
   13d64:	lsrhi	r5, r4, #3
   13d68:	andhi	r5, r5, #7
   13d6c:	addhi	r5, r5, #48	; 0x30
   13d70:	strbhi	r5, [r0, r8]
   13d74:	add	fp, fp, #3
   13d78:	and	r4, r4, #7
   13d7c:	add	r4, r4, #48	; 0x30
   13d80:	add	r5, r6, #1
   13d84:	cmp	r1, r5
   13d88:	bls	13da4 <__assert_fail@plt+0x2e6c>
   13d8c:	mov	r6, r5
   13d90:	mov	r5, r3
   13d94:	b	13cd0 <__assert_fail@plt+0x2d98>
   13d98:	str	lr, [sp, #44]	; 0x2c
   13d9c:	ldr	r8, [sp, #56]	; 0x38
   13da0:	b	13674 <__assert_fail@plt+0x273c>
   13da4:	str	lr, [sp, #44]	; 0x2c
   13da8:	ldr	r8, [sp, #56]	; 0x38
   13dac:	mov	r5, r3
   13db0:	b	13674 <__assert_fail@plt+0x273c>
   13db4:	mov	r6, r8
   13db8:	b	13cd0 <__assert_fail@plt+0x2d98>
   13dbc:	mov	r5, #0
   13dc0:	b	13790 <__assert_fail@plt+0x2858>
   13dc4:	mov	r8, r5
   13dc8:	ldr	r5, [sp, #48]	; 0x30
   13dcc:	mov	r4, #48	; 0x30
   13dd0:	b	13790 <__assert_fail@plt+0x2858>
   13dd4:	ldr	r8, [sp, #32]
   13dd8:	mov	r4, #48	; 0x30
   13ddc:	b	13790 <__assert_fail@plt+0x2858>
   13de0:	ldr	r8, [sp, #32]
   13de4:	mov	r4, #48	; 0x30
   13de8:	b	13790 <__assert_fail@plt+0x2858>
   13dec:	mov	r8, #0
   13df0:	mov	r5, r8
   13df4:	b	13790 <__assert_fail@plt+0x2858>
   13df8:	mov	r8, #0
   13dfc:	mov	r5, r8
   13e00:	b	13790 <__assert_fail@plt+0x2858>
   13e04:	mov	r8, #0
   13e08:	mov	r5, r8
   13e0c:	b	13790 <__assert_fail@plt+0x2858>
   13e10:	mov	r8, #0
   13e14:	mov	r5, r8
   13e18:	b	13790 <__assert_fail@plt+0x2858>
   13e1c:	ldr	r3, [sp, #52]	; 0x34
   13e20:	ldrb	r8, [r3, r6]
   13e24:	adds	r8, r8, #0
   13e28:	movne	r8, #1
   13e2c:	b	138a0 <__assert_fail@plt+0x2968>
   13e30:	cmp	sl, #2
   13e34:	movne	r3, #0
   13e38:	moveq	r3, #1
   13e3c:	ldr	r1, [sp, #32]
   13e40:	mov	r2, r1
   13e44:	and	r2, r2, r3
   13e48:	cmp	fp, #0
   13e4c:	movne	r2, #0
   13e50:	andeq	r2, r2, #1
   13e54:	cmp	r2, #0
   13e58:	bne	14008 <__assert_fail@plt+0x30d0>
   13e5c:	eor	r2, r1, #1
   13e60:	and	r3, r3, r2
   13e64:	ldr	r1, [sp, #80]	; 0x50
   13e68:	tst	r1, r3
   13e6c:	beq	13ee4 <__assert_fail@plt+0x2fac>
   13e70:	ldr	r3, [sp, #40]	; 0x28
   13e74:	cmp	r3, #0
   13e78:	bne	13ea0 <__assert_fail@plt+0x2f68>
   13e7c:	ldr	r1, [sp, #76]	; 0x4c
   13e80:	clz	r3, r7
   13e84:	lsr	r3, r3, #5
   13e88:	cmp	r1, #0
   13e8c:	moveq	r3, #0
   13e90:	cmp	r3, #0
   13e94:	beq	13ee4 <__assert_fail@plt+0x2fac>
   13e98:	ldr	r7, [sp, #76]	; 0x4c
   13e9c:	b	12f34 <__assert_fail@plt+0x1ffc>
   13ea0:	ldr	r3, [sp, #168]	; 0xa8
   13ea4:	str	r3, [sp, #16]
   13ea8:	ldr	r3, [sp, #164]	; 0xa4
   13eac:	str	r3, [sp, #12]
   13eb0:	ldr	r3, [sp, #160]	; 0xa0
   13eb4:	str	r3, [sp, #8]
   13eb8:	ldr	r3, [sp, #156]	; 0x9c
   13ebc:	str	r3, [sp, #4]
   13ec0:	mov	r3, #5
   13ec4:	str	r3, [sp]
   13ec8:	ldr	r3, [sp, #28]
   13ecc:	ldr	r2, [sp, #52]	; 0x34
   13ed0:	ldr	r1, [sp, #76]	; 0x4c
   13ed4:	ldr	r0, [sp, #36]	; 0x24
   13ed8:	bl	12ed4 <__assert_fail@plt+0x1f9c>
   13edc:	mov	fp, r0
   13ee0:	b	13fe4 <__assert_fail@plt+0x30ac>
   13ee4:	mov	sl, r7
   13ee8:	ldr	r3, [sp, #72]	; 0x48
   13eec:	cmp	r3, #0
   13ef0:	moveq	r2, #0
   13ef4:	andne	r2, r2, #1
   13ef8:	cmp	r2, #0
   13efc:	beq	13f2c <__assert_fail@plt+0x2ff4>
   13f00:	mov	r2, r3
   13f04:	ldrb	r3, [r3]
   13f08:	cmp	r3, #0
   13f0c:	beq	13f2c <__assert_fail@plt+0x2ff4>
   13f10:	ldr	r1, [sp, #36]	; 0x24
   13f14:	cmp	sl, fp
   13f18:	strbhi	r3, [r1, fp]
   13f1c:	add	fp, fp, #1
   13f20:	ldrb	r3, [r2, #1]!
   13f24:	cmp	r3, #0
   13f28:	bne	13f14 <__assert_fail@plt+0x2fdc>
   13f2c:	cmp	sl, fp
   13f30:	movhi	r3, #0
   13f34:	ldrhi	r2, [sp, #36]	; 0x24
   13f38:	strbhi	r3, [r2, fp]
   13f3c:	b	13fe4 <__assert_fail@plt+0x30ac>
   13f40:	mov	r8, sl
   13f44:	mov	sl, r7
   13f48:	ldr	r3, [sp, #32]
   13f4c:	str	r3, [sp, #48]	; 0x30
   13f50:	b	13f8c <__assert_fail@plt+0x3054>
   13f54:	mov	r8, sl
   13f58:	mov	sl, r7
   13f5c:	b	13f8c <__assert_fail@plt+0x3054>
   13f60:	mov	r8, sl
   13f64:	mov	sl, r7
   13f68:	b	13f8c <__assert_fail@plt+0x3054>
   13f6c:			; <UNDEFINED> instruction: 0x00016cb0
   13f70:			; <UNDEFINED> instruction: 0x00016cbc
   13f74:	andeq	r6, r1, ip, lsl #10
   13f78:	mov	r8, sl
   13f7c:	mov	sl, r7
   13f80:	b	13f8c <__assert_fail@plt+0x3054>
   13f84:	mov	r8, sl
   13f88:	mov	sl, r7
   13f8c:	ldr	r3, [sp, #48]	; 0x30
   13f90:	cmp	r8, #2
   13f94:	movne	r3, #0
   13f98:	andeq	r3, r3, #1
   13f9c:	cmp	r3, #0
   13fa0:	movne	r8, #4
   13fa4:	ldr	r3, [sp, #168]	; 0xa8
   13fa8:	str	r3, [sp, #16]
   13fac:	ldr	r3, [sp, #164]	; 0xa4
   13fb0:	str	r3, [sp, #12]
   13fb4:	mov	r3, #0
   13fb8:	str	r3, [sp, #8]
   13fbc:	ldr	r3, [sp, #156]	; 0x9c
   13fc0:	bic	r3, r3, #2
   13fc4:	str	r3, [sp, #4]
   13fc8:	str	r8, [sp]
   13fcc:	ldr	r3, [sp, #28]
   13fd0:	ldr	r2, [sp, #52]	; 0x34
   13fd4:	mov	r1, sl
   13fd8:	ldr	r0, [sp, #36]	; 0x24
   13fdc:	bl	12ed4 <__assert_fail@plt+0x1f9c>
   13fe0:	mov	fp, r0
   13fe4:	mov	r0, fp
   13fe8:	add	sp, sp, #116	; 0x74
   13fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff0:	mov	r8, sl
   13ff4:	mov	sl, r7
   13ff8:	b	13f8c <__assert_fail@plt+0x3054>
   13ffc:	mov	r8, sl
   14000:	mov	sl, r7
   14004:	b	13f8c <__assert_fail@plt+0x3054>
   14008:	mov	r8, sl
   1400c:	mov	sl, r7
   14010:	b	13f8c <__assert_fail@plt+0x3054>
   14014:	mov	r8, sl
   14018:	mov	sl, r7
   1401c:	b	13fa4 <__assert_fail@plt+0x306c>
   14020:	mov	r3, #1
   14024:	str	r3, [sp, #32]
   14028:	str	r3, [sp, #48]	; 0x30
   1402c:	str	r3, [sp, #60]	; 0x3c
   14030:	ldr	r3, [pc, #-196]	; 13f74 <__assert_fail@plt+0x303c>
   14034:	str	r3, [sp, #72]	; 0x48
   14038:	mov	fp, #0
   1403c:	mov	sl, #5
   14040:	b	12f90 <__assert_fail@plt+0x2058>
   14044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14048:	sub	sp, sp, #52	; 0x34
   1404c:	mov	r5, r0
   14050:	str	r1, [sp, #24]
   14054:	str	r2, [sp, #28]
   14058:	mov	r4, r3
   1405c:	bl	10e60 <__errno_location@plt>
   14060:	str	r0, [sp, #32]
   14064:	ldr	r3, [r0]
   14068:	str	r3, [sp, #36]	; 0x24
   1406c:	ldr	r3, [pc, #396]	; 14200 <__assert_fail@plt+0x32c8>
   14070:	ldr	r6, [r3]
   14074:	cmn	r5, #-2147483647	; 0x80000001
   14078:	movne	r3, #0
   1407c:	moveq	r3, #1
   14080:	orrs	r3, r3, r5, lsr #31
   14084:	bne	141c4 <__assert_fail@plt+0x328c>
   14088:	ldr	r3, [pc, #368]	; 14200 <__assert_fail@plt+0x32c8>
   1408c:	ldr	r2, [r3, #4]
   14090:	cmp	r5, r2
   14094:	blt	140fc <__assert_fail@plt+0x31c4>
   14098:	str	r2, [sp, #44]	; 0x2c
   1409c:	add	r3, r3, #8
   140a0:	cmp	r6, r3
   140a4:	beq	141c8 <__assert_fail@plt+0x3290>
   140a8:	sub	r2, r5, r2
   140ac:	mov	r3, #8
   140b0:	str	r3, [sp]
   140b4:	mvn	r3, #-2147483648	; 0x80000000
   140b8:	add	r2, r2, #1
   140bc:	add	r1, sp, #44	; 0x2c
   140c0:	mov	r0, r6
   140c4:	bl	14f48 <__assert_fail@plt+0x4010>
   140c8:	mov	r6, r0
   140cc:	ldr	r3, [pc, #300]	; 14200 <__assert_fail@plt+0x32c8>
   140d0:	str	r0, [r3]
   140d4:	ldr	r7, [pc, #292]	; 14200 <__assert_fail@plt+0x32c8>
   140d8:	ldr	r0, [r7, #4]
   140dc:	ldr	r2, [sp, #44]	; 0x2c
   140e0:	sub	r2, r2, r0
   140e4:	lsl	r2, r2, #3
   140e8:	mov	r1, #0
   140ec:	add	r0, r6, r0, lsl #3
   140f0:	bl	10e78 <memset@plt>
   140f4:	ldr	r3, [sp, #44]	; 0x2c
   140f8:	str	r3, [r7, #4]
   140fc:	add	fp, r6, r5, lsl #3
   14100:	ldr	r8, [r6, r5, lsl #3]
   14104:	ldr	r7, [fp, #4]
   14108:	ldr	r9, [r4, #4]
   1410c:	orr	r9, r9, #1
   14110:	add	sl, r4, #8
   14114:	ldr	r3, [r4, #44]	; 0x2c
   14118:	str	r3, [sp, #16]
   1411c:	ldr	r3, [r4, #40]	; 0x28
   14120:	str	r3, [sp, #12]
   14124:	str	sl, [sp, #8]
   14128:	str	r9, [sp, #4]
   1412c:	ldr	r3, [r4]
   14130:	str	r3, [sp]
   14134:	ldr	r3, [sp, #28]
   14138:	ldr	r2, [sp, #24]
   1413c:	mov	r1, r8
   14140:	mov	r0, r7
   14144:	bl	12ed4 <__assert_fail@plt+0x1f9c>
   14148:	cmp	r8, r0
   1414c:	bhi	141ac <__assert_fail@plt+0x3274>
   14150:	add	r8, r0, #1
   14154:	str	r8, [r6, r5, lsl #3]
   14158:	ldr	r3, [pc, #164]	; 14204 <__assert_fail@plt+0x32cc>
   1415c:	cmp	r7, r3
   14160:	beq	1416c <__assert_fail@plt+0x3234>
   14164:	mov	r0, r7
   14168:	bl	15ba0 <__assert_fail@plt+0x4c68>
   1416c:	mov	r0, r8
   14170:	bl	14dc4 <__assert_fail@plt+0x3e8c>
   14174:	mov	r7, r0
   14178:	str	r0, [fp, #4]
   1417c:	ldr	r3, [r4, #44]	; 0x2c
   14180:	str	r3, [sp, #16]
   14184:	ldr	r3, [r4, #40]	; 0x28
   14188:	str	r3, [sp, #12]
   1418c:	str	sl, [sp, #8]
   14190:	str	r9, [sp, #4]
   14194:	ldr	r3, [r4]
   14198:	str	r3, [sp]
   1419c:	ldr	r3, [sp, #28]
   141a0:	ldr	r2, [sp, #24]
   141a4:	mov	r1, r8
   141a8:	bl	12ed4 <__assert_fail@plt+0x1f9c>
   141ac:	ldr	r3, [sp, #32]
   141b0:	ldr	r2, [sp, #36]	; 0x24
   141b4:	str	r2, [r3]
   141b8:	mov	r0, r7
   141bc:	add	sp, sp, #52	; 0x34
   141c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c4:	bl	10f2c <abort@plt>
   141c8:	sub	r2, r5, r2
   141cc:	mov	r3, #8
   141d0:	str	r3, [sp]
   141d4:	mvn	r3, #-2147483648	; 0x80000000
   141d8:	add	r2, r2, #1
   141dc:	add	r1, sp, #44	; 0x2c
   141e0:	mov	r0, #0
   141e4:	bl	14f48 <__assert_fail@plt+0x4010>
   141e8:	mov	r6, r0
   141ec:	ldr	r3, [pc, #12]	; 14200 <__assert_fail@plt+0x32c8>
   141f0:	str	r0, [r3], #8
   141f4:	ldm	r3, {r0, r1}
   141f8:	stm	r6, {r0, r1}
   141fc:	b	140d4 <__assert_fail@plt+0x319c>
   14200:	strdeq	r8, [r2], -r4
   14204:	andeq	r0, r3, r8, lsr #5
   14208:	push	{r4, r5, r6, lr}
   1420c:	mov	r4, r0
   14210:	bl	10e60 <__errno_location@plt>
   14214:	mov	r5, r0
   14218:	ldr	r6, [r0]
   1421c:	cmp	r4, #0
   14220:	ldr	r3, [pc, #20]	; 1423c <__assert_fail@plt+0x3304>
   14224:	moveq	r4, r3
   14228:	mov	r1, #48	; 0x30
   1422c:	mov	r0, r4
   14230:	bl	152b0 <__assert_fail@plt+0x4378>
   14234:	str	r6, [r5]
   14238:	pop	{r4, r5, r6, pc}
   1423c:	andeq	r0, r3, r8, lsr #7
   14240:	subs	r3, r0, #0
   14244:	ldr	r2, [pc, #8]	; 14254 <__assert_fail@plt+0x331c>
   14248:	moveq	r3, r2
   1424c:	ldr	r0, [r3]
   14250:	bx	lr
   14254:	andeq	r0, r3, r8, lsr #7
   14258:	subs	r3, r0, #0
   1425c:	ldr	r2, [pc, #8]	; 1426c <__assert_fail@plt+0x3334>
   14260:	moveq	r3, r2
   14264:	str	r1, [r3]
   14268:	bx	lr
   1426c:	andeq	r0, r3, r8, lsr #7
   14270:	push	{lr}		; (str lr, [sp, #-4]!)
   14274:	subs	r3, r0, #0
   14278:	ldr	r0, [pc, #44]	; 142ac <__assert_fail@plt+0x3374>
   1427c:	moveq	r3, r0
   14280:	add	r3, r3, #8
   14284:	lsr	lr, r1, #5
   14288:	and	r1, r1, #31
   1428c:	ldr	ip, [r3, lr, lsl #2]
   14290:	lsr	r0, ip, r1
   14294:	eor	r2, r2, r0
   14298:	and	r2, r2, #1
   1429c:	eor	r1, ip, r2, lsl r1
   142a0:	str	r1, [r3, lr, lsl #2]
   142a4:	and	r0, r0, #1
   142a8:	pop	{pc}		; (ldr pc, [sp], #4)
   142ac:	andeq	r0, r3, r8, lsr #7
   142b0:	subs	r3, r0, #0
   142b4:	ldr	r2, [pc, #12]	; 142c8 <__assert_fail@plt+0x3390>
   142b8:	moveq	r3, r2
   142bc:	ldr	r0, [r3, #4]
   142c0:	str	r1, [r3, #4]
   142c4:	bx	lr
   142c8:	andeq	r0, r3, r8, lsr #7
   142cc:	subs	r3, r0, #0
   142d0:	ldr	r0, [pc, #40]	; 14300 <__assert_fail@plt+0x33c8>
   142d4:	moveq	r3, r0
   142d8:	mov	r0, #10
   142dc:	str	r0, [r3]
   142e0:	cmp	r2, #0
   142e4:	cmpne	r1, #0
   142e8:	beq	142f8 <__assert_fail@plt+0x33c0>
   142ec:	str	r1, [r3, #40]	; 0x28
   142f0:	str	r2, [r3, #44]	; 0x2c
   142f4:	bx	lr
   142f8:	push	{r4, lr}
   142fc:	bl	10f2c <abort@plt>
   14300:	andeq	r0, r3, r8, lsr #7
   14304:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14308:	sub	sp, sp, #24
   1430c:	mov	r7, r0
   14310:	mov	r8, r1
   14314:	mov	r9, r2
   14318:	mov	sl, r3
   1431c:	ldr	r4, [sp, #56]	; 0x38
   14320:	cmp	r4, #0
   14324:	ldr	r3, [pc, #84]	; 14380 <__assert_fail@plt+0x3448>
   14328:	moveq	r4, r3
   1432c:	bl	10e60 <__errno_location@plt>
   14330:	mov	r5, r0
   14334:	ldr	r6, [r0]
   14338:	ldr	r3, [r4, #44]	; 0x2c
   1433c:	str	r3, [sp, #16]
   14340:	ldr	r3, [r4, #40]	; 0x28
   14344:	str	r3, [sp, #12]
   14348:	add	r3, r4, #8
   1434c:	str	r3, [sp, #8]
   14350:	ldr	r3, [r4, #4]
   14354:	str	r3, [sp, #4]
   14358:	ldr	r3, [r4]
   1435c:	str	r3, [sp]
   14360:	mov	r3, sl
   14364:	mov	r2, r9
   14368:	mov	r1, r8
   1436c:	mov	r0, r7
   14370:	bl	12ed4 <__assert_fail@plt+0x1f9c>
   14374:	str	r6, [r5]
   14378:	add	sp, sp, #24
   1437c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14380:	andeq	r0, r3, r8, lsr #7
   14384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14388:	sub	sp, sp, #44	; 0x2c
   1438c:	str	r0, [sp, #28]
   14390:	str	r1, [sp, #32]
   14394:	mov	r6, r2
   14398:	subs	r4, r3, #0
   1439c:	ldr	r3, [pc, #172]	; 14450 <__assert_fail@plt+0x3518>
   143a0:	moveq	r4, r3
   143a4:	bl	10e60 <__errno_location@plt>
   143a8:	mov	r7, r0
   143ac:	ldr	fp, [r0]
   143b0:	ldr	r5, [r4, #4]
   143b4:	cmp	r6, #0
   143b8:	orreq	r5, r5, #1
   143bc:	add	r9, r4, #8
   143c0:	ldr	r3, [r4, #44]	; 0x2c
   143c4:	str	r3, [sp, #16]
   143c8:	ldr	r3, [r4, #40]	; 0x28
   143cc:	str	r3, [sp, #12]
   143d0:	str	r9, [sp, #8]
   143d4:	str	r5, [sp, #4]
   143d8:	ldr	r3, [r4]
   143dc:	str	r3, [sp]
   143e0:	ldr	r3, [sp, #32]
   143e4:	ldr	r2, [sp, #28]
   143e8:	mov	r1, #0
   143ec:	mov	r0, r1
   143f0:	bl	12ed4 <__assert_fail@plt+0x1f9c>
   143f4:	mov	sl, r0
   143f8:	add	r8, r0, #1
   143fc:	mov	r0, r8
   14400:	bl	14dc4 <__assert_fail@plt+0x3e8c>
   14404:	str	r0, [sp, #36]	; 0x24
   14408:	ldr	r3, [r4, #44]	; 0x2c
   1440c:	str	r3, [sp, #16]
   14410:	ldr	r3, [r4, #40]	; 0x28
   14414:	str	r3, [sp, #12]
   14418:	str	r9, [sp, #8]
   1441c:	str	r5, [sp, #4]
   14420:	ldr	r3, [r4]
   14424:	str	r3, [sp]
   14428:	ldr	r3, [sp, #32]
   1442c:	ldr	r2, [sp, #28]
   14430:	mov	r1, r8
   14434:	bl	12ed4 <__assert_fail@plt+0x1f9c>
   14438:	str	fp, [r7]
   1443c:	cmp	r6, #0
   14440:	strne	sl, [r6]
   14444:	ldr	r0, [sp, #36]	; 0x24
   14448:	add	sp, sp, #44	; 0x2c
   1444c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14450:	andeq	r0, r3, r8, lsr #7
   14454:	push	{r4, lr}
   14458:	mov	r3, r2
   1445c:	mov	r2, #0
   14460:	bl	14384 <__assert_fail@plt+0x344c>
   14464:	pop	{r4, pc}
   14468:	push	{r4, r5, r6, r7, r8, lr}
   1446c:	ldr	r3, [pc, #140]	; 14500 <__assert_fail@plt+0x35c8>
   14470:	ldr	r7, [r3]
   14474:	ldr	r3, [r3, #4]
   14478:	cmp	r3, #1
   1447c:	ble	144a8 <__assert_fail@plt+0x3570>
   14480:	mov	r5, r7
   14484:	mov	r4, #1
   14488:	ldr	r6, [pc, #112]	; 14500 <__assert_fail@plt+0x35c8>
   1448c:	ldr	r0, [r5, #12]
   14490:	bl	15ba0 <__assert_fail@plt+0x4c68>
   14494:	add	r4, r4, #1
   14498:	add	r5, r5, #8
   1449c:	ldr	r3, [r6, #4]
   144a0:	cmp	r3, r4
   144a4:	bgt	1448c <__assert_fail@plt+0x3554>
   144a8:	ldr	r0, [r7, #4]
   144ac:	ldr	r3, [pc, #80]	; 14504 <__assert_fail@plt+0x35cc>
   144b0:	cmp	r0, r3
   144b4:	beq	144d0 <__assert_fail@plt+0x3598>
   144b8:	bl	15ba0 <__assert_fail@plt+0x4c68>
   144bc:	ldr	r3, [pc, #60]	; 14500 <__assert_fail@plt+0x35c8>
   144c0:	mov	r2, #256	; 0x100
   144c4:	str	r2, [r3, #8]
   144c8:	ldr	r2, [pc, #52]	; 14504 <__assert_fail@plt+0x35cc>
   144cc:	str	r2, [r3, #12]
   144d0:	ldr	r3, [pc, #48]	; 14508 <__assert_fail@plt+0x35d0>
   144d4:	cmp	r7, r3
   144d8:	beq	144f0 <__assert_fail@plt+0x35b8>
   144dc:	mov	r0, r7
   144e0:	bl	15ba0 <__assert_fail@plt+0x4c68>
   144e4:	ldr	r3, [pc, #20]	; 14500 <__assert_fail@plt+0x35c8>
   144e8:	add	r2, r3, #8
   144ec:	str	r2, [r3]
   144f0:	mov	r2, #1
   144f4:	ldr	r3, [pc, #4]	; 14500 <__assert_fail@plt+0x35c8>
   144f8:	str	r2, [r3, #4]
   144fc:	pop	{r4, r5, r6, r7, r8, pc}
   14500:	strdeq	r8, [r2], -r4
   14504:	andeq	r0, r3, r8, lsr #5
   14508:	strdeq	r8, [r2], -ip
   1450c:	push	{r4, lr}
   14510:	ldr	r3, [pc, #8]	; 14520 <__assert_fail@plt+0x35e8>
   14514:	mvn	r2, #0
   14518:	bl	14044 <__assert_fail@plt+0x310c>
   1451c:	pop	{r4, pc}
   14520:	andeq	r0, r3, r8, lsr #7
   14524:	push	{r4, lr}
   14528:	ldr	r3, [pc, #4]	; 14534 <__assert_fail@plt+0x35fc>
   1452c:	bl	14044 <__assert_fail@plt+0x310c>
   14530:	pop	{r4, pc}
   14534:	andeq	r0, r3, r8, lsr #7
   14538:	push	{r4, lr}
   1453c:	mov	r1, r0
   14540:	mov	r0, #0
   14544:	bl	1450c <__assert_fail@plt+0x35d4>
   14548:	pop	{r4, pc}
   1454c:	push	{r4, lr}
   14550:	mov	r2, r1
   14554:	mov	r1, r0
   14558:	mov	r0, #0
   1455c:	bl	14524 <__assert_fail@plt+0x35ec>
   14560:	pop	{r4, pc}
   14564:	push	{r4, r5, lr}
   14568:	sub	sp, sp, #52	; 0x34
   1456c:	mov	r4, r0
   14570:	mov	r5, r2
   14574:	mov	r0, sp
   14578:	bl	12d6c <__assert_fail@plt+0x1e34>
   1457c:	mov	r3, sp
   14580:	mvn	r2, #0
   14584:	mov	r1, r5
   14588:	mov	r0, r4
   1458c:	bl	14044 <__assert_fail@plt+0x310c>
   14590:	add	sp, sp, #52	; 0x34
   14594:	pop	{r4, r5, pc}
   14598:	push	{r4, r5, r6, lr}
   1459c:	sub	sp, sp, #48	; 0x30
   145a0:	mov	r4, r0
   145a4:	mov	r5, r2
   145a8:	mov	r6, r3
   145ac:	mov	r0, sp
   145b0:	bl	12d6c <__assert_fail@plt+0x1e34>
   145b4:	mov	r3, sp
   145b8:	mov	r2, r6
   145bc:	mov	r1, r5
   145c0:	mov	r0, r4
   145c4:	bl	14044 <__assert_fail@plt+0x310c>
   145c8:	add	sp, sp, #48	; 0x30
   145cc:	pop	{r4, r5, r6, pc}
   145d0:	push	{r4, lr}
   145d4:	mov	r2, r1
   145d8:	mov	r1, r0
   145dc:	mov	r0, #0
   145e0:	bl	14564 <__assert_fail@plt+0x362c>
   145e4:	pop	{r4, pc}
   145e8:	push	{r4, lr}
   145ec:	mov	r3, r2
   145f0:	mov	r2, r1
   145f4:	mov	r1, r0
   145f8:	mov	r0, #0
   145fc:	bl	14598 <__assert_fail@plt+0x3660>
   14600:	pop	{r4, pc}
   14604:	push	{r4, r5, r6, lr}
   14608:	sub	sp, sp, #48	; 0x30
   1460c:	mov	r4, r0
   14610:	mov	r5, r1
   14614:	mov	r6, r2
   14618:	mov	ip, sp
   1461c:	ldr	lr, [pc, #64]	; 14664 <__assert_fail@plt+0x372c>
   14620:	ldm	lr!, {r0, r1, r2, r3}
   14624:	stmia	ip!, {r0, r1, r2, r3}
   14628:	ldm	lr!, {r0, r1, r2, r3}
   1462c:	stmia	ip!, {r0, r1, r2, r3}
   14630:	ldm	lr, {r0, r1, r2, r3}
   14634:	stm	ip, {r0, r1, r2, r3}
   14638:	mov	r2, #1
   1463c:	mov	r1, r6
   14640:	mov	r0, sp
   14644:	bl	14270 <__assert_fail@plt+0x3338>
   14648:	mov	r3, sp
   1464c:	mov	r2, r5
   14650:	mov	r1, r4
   14654:	mov	r0, #0
   14658:	bl	14044 <__assert_fail@plt+0x310c>
   1465c:	add	sp, sp, #48	; 0x30
   14660:	pop	{r4, r5, r6, pc}
   14664:	andeq	r0, r3, r8, lsr #7
   14668:	push	{r4, lr}
   1466c:	mov	r2, r1
   14670:	mvn	r1, #0
   14674:	bl	14604 <__assert_fail@plt+0x36cc>
   14678:	pop	{r4, pc}
   1467c:	push	{r4, lr}
   14680:	mov	r1, #58	; 0x3a
   14684:	bl	14668 <__assert_fail@plt+0x3730>
   14688:	pop	{r4, pc}
   1468c:	push	{r4, lr}
   14690:	mov	r2, #58	; 0x3a
   14694:	bl	14604 <__assert_fail@plt+0x36cc>
   14698:	pop	{r4, pc}
   1469c:	push	{r4, r5, lr}
   146a0:	sub	sp, sp, #100	; 0x64
   146a4:	mov	r4, r0
   146a8:	mov	r5, r2
   146ac:	mov	r0, sp
   146b0:	bl	12d6c <__assert_fail@plt+0x1e34>
   146b4:	add	lr, sp, #48	; 0x30
   146b8:	mov	ip, sp
   146bc:	ldm	ip!, {r0, r1, r2, r3}
   146c0:	stmia	lr!, {r0, r1, r2, r3}
   146c4:	ldm	ip!, {r0, r1, r2, r3}
   146c8:	stmia	lr!, {r0, r1, r2, r3}
   146cc:	ldm	ip, {r0, r1, r2, r3}
   146d0:	stm	lr, {r0, r1, r2, r3}
   146d4:	mov	r2, #1
   146d8:	mov	r1, #58	; 0x3a
   146dc:	add	r0, sp, #48	; 0x30
   146e0:	bl	14270 <__assert_fail@plt+0x3338>
   146e4:	add	r3, sp, #48	; 0x30
   146e8:	mvn	r2, #0
   146ec:	mov	r1, r5
   146f0:	mov	r0, r4
   146f4:	bl	14044 <__assert_fail@plt+0x310c>
   146f8:	add	sp, sp, #100	; 0x64
   146fc:	pop	{r4, r5, pc}
   14700:	push	{r4, r5, r6, r7, lr}
   14704:	sub	sp, sp, #52	; 0x34
   14708:	mov	r4, r0
   1470c:	mov	r6, r1
   14710:	mov	r7, r2
   14714:	mov	r5, r3
   14718:	mov	ip, sp
   1471c:	ldr	lr, [pc, #64]	; 14764 <__assert_fail@plt+0x382c>
   14720:	ldm	lr!, {r0, r1, r2, r3}
   14724:	stmia	ip!, {r0, r1, r2, r3}
   14728:	ldm	lr!, {r0, r1, r2, r3}
   1472c:	stmia	ip!, {r0, r1, r2, r3}
   14730:	ldm	lr, {r0, r1, r2, r3}
   14734:	stm	ip, {r0, r1, r2, r3}
   14738:	mov	r2, r7
   1473c:	mov	r1, r6
   14740:	mov	r0, sp
   14744:	bl	142cc <__assert_fail@plt+0x3394>
   14748:	mov	r3, sp
   1474c:	ldr	r2, [sp, #72]	; 0x48
   14750:	mov	r1, r5
   14754:	mov	r0, r4
   14758:	bl	14044 <__assert_fail@plt+0x310c>
   1475c:	add	sp, sp, #52	; 0x34
   14760:	pop	{r4, r5, r6, r7, pc}
   14764:	andeq	r0, r3, r8, lsr #7
   14768:	push	{lr}		; (str lr, [sp, #-4]!)
   1476c:	sub	sp, sp, #12
   14770:	mvn	ip, #0
   14774:	str	ip, [sp]
   14778:	bl	14700 <__assert_fail@plt+0x37c8>
   1477c:	add	sp, sp, #12
   14780:	pop	{pc}		; (ldr pc, [sp], #4)
   14784:	push	{r4, lr}
   14788:	mov	r3, r2
   1478c:	mov	r2, r1
   14790:	mov	r1, r0
   14794:	mov	r0, #0
   14798:	bl	14768 <__assert_fail@plt+0x3830>
   1479c:	pop	{r4, pc}
   147a0:	push	{lr}		; (str lr, [sp, #-4]!)
   147a4:	sub	sp, sp, #12
   147a8:	str	r3, [sp]
   147ac:	mov	r3, r2
   147b0:	mov	r2, r1
   147b4:	mov	r1, r0
   147b8:	mov	r0, #0
   147bc:	bl	14700 <__assert_fail@plt+0x37c8>
   147c0:	add	sp, sp, #12
   147c4:	pop	{pc}		; (ldr pc, [sp], #4)
   147c8:	push	{r4, lr}
   147cc:	ldr	r3, [pc, #4]	; 147d8 <__assert_fail@plt+0x38a0>
   147d0:	bl	14044 <__assert_fail@plt+0x310c>
   147d4:	pop	{r4, pc}
   147d8:	andeq	r8, r2, r4, lsl #2
   147dc:	push	{r4, lr}
   147e0:	mov	r2, r1
   147e4:	mov	r1, r0
   147e8:	mov	r0, #0
   147ec:	bl	147c8 <__assert_fail@plt+0x3890>
   147f0:	pop	{r4, pc}
   147f4:	push	{r4, lr}
   147f8:	mvn	r2, #0
   147fc:	bl	147c8 <__assert_fail@plt+0x3890>
   14800:	pop	{r4, pc}
   14804:	push	{r4, lr}
   14808:	mov	r1, r0
   1480c:	mov	r0, #0
   14810:	bl	147f4 <__assert_fail@plt+0x38bc>
   14814:	pop	{r4, pc}
   14818:	push	{r4, r5, r6, lr}
   1481c:	sub	sp, sp, #32
   14820:	mov	r4, r0
   14824:	ldr	r5, [sp, #48]	; 0x30
   14828:	ldr	r6, [sp, #52]	; 0x34
   1482c:	cmp	r1, #0
   14830:	beq	148e8 <__assert_fail@plt+0x39b0>
   14834:	str	r3, [sp, #4]
   14838:	str	r2, [sp]
   1483c:	mov	r3, r1
   14840:	ldr	r2, [pc, #940]	; 14bf4 <__assert_fail@plt+0x3cbc>
   14844:	mov	r1, #1
   14848:	bl	10e9c <__fprintf_chk@plt>
   1484c:	mov	r2, #5
   14850:	ldr	r1, [pc, #928]	; 14bf8 <__assert_fail@plt+0x3cc0>
   14854:	mov	r0, #0
   14858:	bl	10d7c <dcgettext@plt>
   1485c:	ldr	r3, [pc, #920]	; 14bfc <__assert_fail@plt+0x3cc4>
   14860:	str	r3, [sp]
   14864:	mov	r3, r0
   14868:	ldr	r2, [pc, #912]	; 14c00 <__assert_fail@plt+0x3cc8>
   1486c:	mov	r1, #1
   14870:	mov	r0, r4
   14874:	bl	10e9c <__fprintf_chk@plt>
   14878:	mov	r1, r4
   1487c:	mov	r0, #10
   14880:	bl	10d70 <fputc_unlocked@plt>
   14884:	mov	r2, #5
   14888:	ldr	r1, [pc, #884]	; 14c04 <__assert_fail@plt+0x3ccc>
   1488c:	mov	r0, #0
   14890:	bl	10d7c <dcgettext@plt>
   14894:	ldr	r3, [pc, #876]	; 14c08 <__assert_fail@plt+0x3cd0>
   14898:	mov	r2, r0
   1489c:	mov	r1, #1
   148a0:	mov	r0, r4
   148a4:	bl	10e9c <__fprintf_chk@plt>
   148a8:	mov	r1, r4
   148ac:	mov	r0, #10
   148b0:	bl	10d70 <fputc_unlocked@plt>
   148b4:	cmp	r6, #9
   148b8:	ldrls	pc, [pc, r6, lsl #2]
   148bc:	b	14b8c <__assert_fail@plt+0x3c54>
   148c0:	andeq	r4, r1, r4, lsr #18
   148c4:	andeq	r4, r1, r0, lsl #18
   148c8:	andeq	r4, r1, ip, lsr #18
   148cc:	andeq	r4, r1, ip, asr r9
   148d0:	muleq	r1, r4, r9
   148d4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d8:	andeq	r4, r1, ip, lsl sl
   148dc:	andeq	r4, r1, ip, ror #20
   148e0:	andeq	r4, r1, r4, asr #21
   148e4:	andeq	r4, r1, r4, lsr #22
   148e8:	str	r3, [sp]
   148ec:	mov	r3, r2
   148f0:	ldr	r2, [pc, #788]	; 14c0c <__assert_fail@plt+0x3cd4>
   148f4:	mov	r1, #1
   148f8:	bl	10e9c <__fprintf_chk@plt>
   148fc:	b	1484c <__assert_fail@plt+0x3914>
   14900:	mov	r2, #5
   14904:	ldr	r1, [pc, #772]	; 14c10 <__assert_fail@plt+0x3cd8>
   14908:	mov	r0, #0
   1490c:	bl	10d7c <dcgettext@plt>
   14910:	ldr	r3, [r5]
   14914:	mov	r2, r0
   14918:	mov	r1, #1
   1491c:	mov	r0, r4
   14920:	bl	10e9c <__fprintf_chk@plt>
   14924:	add	sp, sp, #32
   14928:	pop	{r4, r5, r6, pc}
   1492c:	mov	r2, #5
   14930:	ldr	r1, [pc, #732]	; 14c14 <__assert_fail@plt+0x3cdc>
   14934:	mov	r0, #0
   14938:	bl	10d7c <dcgettext@plt>
   1493c:	ldr	r3, [r5]
   14940:	ldr	r2, [r5, #4]
   14944:	str	r2, [sp]
   14948:	mov	r2, r0
   1494c:	mov	r1, #1
   14950:	mov	r0, r4
   14954:	bl	10e9c <__fprintf_chk@plt>
   14958:	b	14924 <__assert_fail@plt+0x39ec>
   1495c:	mov	r2, #5
   14960:	ldr	r1, [pc, #688]	; 14c18 <__assert_fail@plt+0x3ce0>
   14964:	mov	r0, #0
   14968:	bl	10d7c <dcgettext@plt>
   1496c:	ldr	r3, [r5]
   14970:	ldr	r2, [r5, #8]
   14974:	str	r2, [sp, #4]
   14978:	ldr	r2, [r5, #4]
   1497c:	str	r2, [sp]
   14980:	mov	r2, r0
   14984:	mov	r1, #1
   14988:	mov	r0, r4
   1498c:	bl	10e9c <__fprintf_chk@plt>
   14990:	b	14924 <__assert_fail@plt+0x39ec>
   14994:	mov	r2, #5
   14998:	ldr	r1, [pc, #636]	; 14c1c <__assert_fail@plt+0x3ce4>
   1499c:	mov	r0, #0
   149a0:	bl	10d7c <dcgettext@plt>
   149a4:	ldr	r3, [r5]
   149a8:	ldr	r2, [r5, #12]
   149ac:	str	r2, [sp, #8]
   149b0:	ldr	r2, [r5, #8]
   149b4:	str	r2, [sp, #4]
   149b8:	ldr	r2, [r5, #4]
   149bc:	str	r2, [sp]
   149c0:	mov	r2, r0
   149c4:	mov	r1, #1
   149c8:	mov	r0, r4
   149cc:	bl	10e9c <__fprintf_chk@plt>
   149d0:	b	14924 <__assert_fail@plt+0x39ec>
   149d4:	mov	r2, #5
   149d8:	ldr	r1, [pc, #576]	; 14c20 <__assert_fail@plt+0x3ce8>
   149dc:	mov	r0, #0
   149e0:	bl	10d7c <dcgettext@plt>
   149e4:	ldr	r3, [r5]
   149e8:	ldr	r2, [r5, #16]
   149ec:	str	r2, [sp, #12]
   149f0:	ldr	r2, [r5, #12]
   149f4:	str	r2, [sp, #8]
   149f8:	ldr	r2, [r5, #8]
   149fc:	str	r2, [sp, #4]
   14a00:	ldr	r2, [r5, #4]
   14a04:	str	r2, [sp]
   14a08:	mov	r2, r0
   14a0c:	mov	r1, #1
   14a10:	mov	r0, r4
   14a14:	bl	10e9c <__fprintf_chk@plt>
   14a18:	b	14924 <__assert_fail@plt+0x39ec>
   14a1c:	mov	r2, #5
   14a20:	ldr	r1, [pc, #508]	; 14c24 <__assert_fail@plt+0x3cec>
   14a24:	mov	r0, #0
   14a28:	bl	10d7c <dcgettext@plt>
   14a2c:	ldr	r3, [r5]
   14a30:	ldr	r2, [r5, #20]
   14a34:	str	r2, [sp, #16]
   14a38:	ldr	r2, [r5, #16]
   14a3c:	str	r2, [sp, #12]
   14a40:	ldr	r2, [r5, #12]
   14a44:	str	r2, [sp, #8]
   14a48:	ldr	r2, [r5, #8]
   14a4c:	str	r2, [sp, #4]
   14a50:	ldr	r2, [r5, #4]
   14a54:	str	r2, [sp]
   14a58:	mov	r2, r0
   14a5c:	mov	r1, #1
   14a60:	mov	r0, r4
   14a64:	bl	10e9c <__fprintf_chk@plt>
   14a68:	b	14924 <__assert_fail@plt+0x39ec>
   14a6c:	mov	r2, #5
   14a70:	ldr	r1, [pc, #432]	; 14c28 <__assert_fail@plt+0x3cf0>
   14a74:	mov	r0, #0
   14a78:	bl	10d7c <dcgettext@plt>
   14a7c:	ldr	r3, [r5]
   14a80:	ldr	r2, [r5, #24]
   14a84:	str	r2, [sp, #20]
   14a88:	ldr	r2, [r5, #20]
   14a8c:	str	r2, [sp, #16]
   14a90:	ldr	r2, [r5, #16]
   14a94:	str	r2, [sp, #12]
   14a98:	ldr	r2, [r5, #12]
   14a9c:	str	r2, [sp, #8]
   14aa0:	ldr	r2, [r5, #8]
   14aa4:	str	r2, [sp, #4]
   14aa8:	ldr	r2, [r5, #4]
   14aac:	str	r2, [sp]
   14ab0:	mov	r2, r0
   14ab4:	mov	r1, #1
   14ab8:	mov	r0, r4
   14abc:	bl	10e9c <__fprintf_chk@plt>
   14ac0:	b	14924 <__assert_fail@plt+0x39ec>
   14ac4:	mov	r2, #5
   14ac8:	ldr	r1, [pc, #348]	; 14c2c <__assert_fail@plt+0x3cf4>
   14acc:	mov	r0, #0
   14ad0:	bl	10d7c <dcgettext@plt>
   14ad4:	ldr	r3, [r5]
   14ad8:	ldr	r2, [r5, #28]
   14adc:	str	r2, [sp, #24]
   14ae0:	ldr	r2, [r5, #24]
   14ae4:	str	r2, [sp, #20]
   14ae8:	ldr	r2, [r5, #20]
   14aec:	str	r2, [sp, #16]
   14af0:	ldr	r2, [r5, #16]
   14af4:	str	r2, [sp, #12]
   14af8:	ldr	r2, [r5, #12]
   14afc:	str	r2, [sp, #8]
   14b00:	ldr	r2, [r5, #8]
   14b04:	str	r2, [sp, #4]
   14b08:	ldr	r2, [r5, #4]
   14b0c:	str	r2, [sp]
   14b10:	mov	r2, r0
   14b14:	mov	r1, #1
   14b18:	mov	r0, r4
   14b1c:	bl	10e9c <__fprintf_chk@plt>
   14b20:	b	14924 <__assert_fail@plt+0x39ec>
   14b24:	mov	r2, #5
   14b28:	ldr	r1, [pc, #256]	; 14c30 <__assert_fail@plt+0x3cf8>
   14b2c:	mov	r0, #0
   14b30:	bl	10d7c <dcgettext@plt>
   14b34:	ldr	r3, [r5]
   14b38:	ldr	r2, [r5, #32]
   14b3c:	str	r2, [sp, #28]
   14b40:	ldr	r2, [r5, #28]
   14b44:	str	r2, [sp, #24]
   14b48:	ldr	r2, [r5, #24]
   14b4c:	str	r2, [sp, #20]
   14b50:	ldr	r2, [r5, #20]
   14b54:	str	r2, [sp, #16]
   14b58:	ldr	r2, [r5, #16]
   14b5c:	str	r2, [sp, #12]
   14b60:	ldr	r2, [r5, #12]
   14b64:	str	r2, [sp, #8]
   14b68:	ldr	r2, [r5, #8]
   14b6c:	str	r2, [sp, #4]
   14b70:	ldr	r2, [r5, #4]
   14b74:	str	r2, [sp]
   14b78:	mov	r2, r0
   14b7c:	mov	r1, #1
   14b80:	mov	r0, r4
   14b84:	bl	10e9c <__fprintf_chk@plt>
   14b88:	b	14924 <__assert_fail@plt+0x39ec>
   14b8c:	mov	r2, #5
   14b90:	ldr	r1, [pc, #156]	; 14c34 <__assert_fail@plt+0x3cfc>
   14b94:	mov	r0, #0
   14b98:	bl	10d7c <dcgettext@plt>
   14b9c:	ldr	r3, [r5]
   14ba0:	ldr	r2, [r5, #32]
   14ba4:	str	r2, [sp, #28]
   14ba8:	ldr	r2, [r5, #28]
   14bac:	str	r2, [sp, #24]
   14bb0:	ldr	r2, [r5, #24]
   14bb4:	str	r2, [sp, #20]
   14bb8:	ldr	r2, [r5, #20]
   14bbc:	str	r2, [sp, #16]
   14bc0:	ldr	r2, [r5, #16]
   14bc4:	str	r2, [sp, #12]
   14bc8:	ldr	r2, [r5, #12]
   14bcc:	str	r2, [sp, #8]
   14bd0:	ldr	r2, [r5, #8]
   14bd4:	str	r2, [sp, #4]
   14bd8:	ldr	r2, [r5, #4]
   14bdc:	str	r2, [sp]
   14be0:	mov	r2, r0
   14be4:	mov	r1, #1
   14be8:	mov	r0, r4
   14bec:	bl	10e9c <__fprintf_chk@plt>
   14bf0:	b	14924 <__assert_fail@plt+0x39ec>
   14bf4:	andeq	r6, r1, r4, lsr #26
   14bf8:	andeq	r6, r1, r8, lsr sp
   14bfc:	andeq	r0, r0, r6, ror #15
   14c00:	andeq	r7, r1, r0, lsl r0
   14c04:	andeq	r6, r1, ip, lsr sp
   14c08:	andeq	r6, r1, r8, ror #27
   14c0c:	andeq	r6, r1, r0, lsr sp
   14c10:	andeq	r6, r1, ip, lsl #28
   14c14:	andeq	r6, r1, ip, lsl lr
   14c18:	andeq	r6, r1, r4, lsr lr
   14c1c:	andeq	r6, r1, r0, asr lr
   14c20:	andeq	r6, r1, r0, ror lr
   14c24:	muleq	r1, r4, lr
   14c28:			; <UNDEFINED> instruction: 0x00016ebc
   14c2c:	andeq	r6, r1, r8, ror #29
   14c30:	andeq	r6, r1, r8, lsl pc
   14c34:	andeq	r6, r1, ip, asr #30
   14c38:	push	{r4, r5, lr}
   14c3c:	sub	sp, sp, #12
   14c40:	ldr	r5, [sp, #24]
   14c44:	ldr	ip, [r5]
   14c48:	cmp	ip, #0
   14c4c:	beq	14c7c <__assert_fail@plt+0x3d44>
   14c50:	mov	lr, r5
   14c54:	mov	ip, #0
   14c58:	add	ip, ip, #1
   14c5c:	ldr	r4, [lr, #4]!
   14c60:	cmp	r4, #0
   14c64:	bne	14c58 <__assert_fail@plt+0x3d20>
   14c68:	str	ip, [sp, #4]
   14c6c:	str	r5, [sp]
   14c70:	bl	14818 <__assert_fail@plt+0x38e0>
   14c74:	add	sp, sp, #12
   14c78:	pop	{r4, r5, pc}
   14c7c:	mov	ip, #0
   14c80:	b	14c68 <__assert_fail@plt+0x3d30>
   14c84:	push	{r4, r5, lr}
   14c88:	sub	sp, sp, #52	; 0x34
   14c8c:	ldr	r4, [sp, #64]	; 0x40
   14c90:	sub	r4, r4, #4
   14c94:	add	r5, sp, #4
   14c98:	mov	ip, #0
   14c9c:	ldr	lr, [r4, #4]!
   14ca0:	str	lr, [r5, #4]!
   14ca4:	cmp	lr, #0
   14ca8:	beq	14cb8 <__assert_fail@plt+0x3d80>
   14cac:	add	ip, ip, #1
   14cb0:	cmp	ip, #10
   14cb4:	bne	14c9c <__assert_fail@plt+0x3d64>
   14cb8:	str	ip, [sp, #4]
   14cbc:	add	ip, sp, #8
   14cc0:	str	ip, [sp]
   14cc4:	bl	14818 <__assert_fail@plt+0x38e0>
   14cc8:	add	sp, sp, #52	; 0x34
   14ccc:	pop	{r4, r5, pc}
   14cd0:	push	{r3}		; (str r3, [sp, #-4]!)
   14cd4:	push	{lr}		; (str lr, [sp, #-4]!)
   14cd8:	sub	sp, sp, #16
   14cdc:	add	r3, sp, #24
   14ce0:	str	r3, [sp, #12]
   14ce4:	str	r3, [sp]
   14ce8:	ldr	r3, [sp, #20]
   14cec:	bl	14c84 <__assert_fail@plt+0x3d4c>
   14cf0:	add	sp, sp, #16
   14cf4:	pop	{lr}		; (ldr lr, [sp], #4)
   14cf8:	add	sp, sp, #4
   14cfc:	bx	lr
   14d00:	push	{r4, lr}
   14d04:	ldr	r3, [pc, #112]	; 14d7c <__assert_fail@plt+0x3e44>
   14d08:	ldr	r1, [r3]
   14d0c:	mov	r0, #10
   14d10:	bl	10d70 <fputc_unlocked@plt>
   14d14:	mov	r2, #5
   14d18:	ldr	r1, [pc, #96]	; 14d80 <__assert_fail@plt+0x3e48>
   14d1c:	mov	r0, #0
   14d20:	bl	10d7c <dcgettext@plt>
   14d24:	ldr	r2, [pc, #88]	; 14d84 <__assert_fail@plt+0x3e4c>
   14d28:	mov	r1, r0
   14d2c:	mov	r0, #1
   14d30:	bl	10e84 <__printf_chk@plt>
   14d34:	mov	r2, #5
   14d38:	ldr	r1, [pc, #72]	; 14d88 <__assert_fail@plt+0x3e50>
   14d3c:	mov	r0, #0
   14d40:	bl	10d7c <dcgettext@plt>
   14d44:	ldr	r3, [pc, #64]	; 14d8c <__assert_fail@plt+0x3e54>
   14d48:	ldr	r2, [pc, #64]	; 14d90 <__assert_fail@plt+0x3e58>
   14d4c:	mov	r1, r0
   14d50:	mov	r0, #1
   14d54:	bl	10e84 <__printf_chk@plt>
   14d58:	mov	r2, #5
   14d5c:	ldr	r1, [pc, #48]	; 14d94 <__assert_fail@plt+0x3e5c>
   14d60:	mov	r0, #0
   14d64:	bl	10d7c <dcgettext@plt>
   14d68:	ldr	r2, [pc, #40]	; 14d98 <__assert_fail@plt+0x3e60>
   14d6c:	mov	r1, r0
   14d70:	mov	r0, #1
   14d74:	bl	10e84 <__printf_chk@plt>
   14d78:	pop	{r4, pc}
   14d7c:	andeq	r8, r2, r4, asr r1
   14d80:	andeq	r6, r1, r8, lsl #31
   14d84:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14d88:			; <UNDEFINED> instruction: 0x00016fb4
   14d8c:	andeq	r6, r1, r0, ror #18
   14d90:	andeq	r6, r1, r8, lsl #19
   14d94:	andeq	r6, r1, r8, asr #31
   14d98:	strdeq	r6, [r1], -r0
   14d9c:	push	{r4, lr}
   14da0:	bl	15aa8 <__assert_fail@plt+0x4b70>
   14da4:	cmp	r0, #0
   14da8:	popne	{r4, pc}
   14dac:	bl	15340 <__assert_fail@plt+0x4408>
   14db0:	push	{r4, lr}
   14db4:	bl	15aa8 <__assert_fail@plt+0x4b70>
   14db8:	cmp	r0, #0
   14dbc:	popne	{r4, pc}
   14dc0:	bl	15340 <__assert_fail@plt+0x4408>
   14dc4:	push	{r4, lr}
   14dc8:	bl	14d9c <__assert_fail@plt+0x3e64>
   14dcc:	pop	{r4, pc}
   14dd0:	push	{r4, r5, r6, lr}
   14dd4:	mov	r5, r0
   14dd8:	mov	r4, r1
   14ddc:	bl	15ad8 <__assert_fail@plt+0x4ba0>
   14de0:	cmp	r0, #0
   14de4:	popne	{r4, r5, r6, pc}
   14de8:	adds	r4, r4, #0
   14dec:	movne	r4, #1
   14df0:	cmp	r5, #0
   14df4:	orreq	r4, r4, #1
   14df8:	cmp	r4, #0
   14dfc:	popeq	{r4, r5, r6, pc}
   14e00:	bl	15340 <__assert_fail@plt+0x4408>
   14e04:	push	{r4, lr}
   14e08:	cmp	r1, #0
   14e0c:	orreq	r1, r1, #1
   14e10:	bl	15ad8 <__assert_fail@plt+0x4ba0>
   14e14:	cmp	r0, #0
   14e18:	popne	{r4, pc}
   14e1c:	bl	15340 <__assert_fail@plt+0x4408>
   14e20:	push	{r4, r5, r6, lr}
   14e24:	mov	r6, r0
   14e28:	mov	r5, r1
   14e2c:	mov	r4, r2
   14e30:	bl	15c84 <__assert_fail@plt+0x4d4c>
   14e34:	cmp	r0, #0
   14e38:	popne	{r4, r5, r6, pc}
   14e3c:	cmp	r6, #0
   14e40:	beq	14e50 <__assert_fail@plt+0x3f18>
   14e44:	cmp	r5, #0
   14e48:	cmpne	r4, #0
   14e4c:	popeq	{r4, r5, r6, pc}
   14e50:	bl	15340 <__assert_fail@plt+0x4408>
   14e54:	push	{r4, lr}
   14e58:	bl	14e20 <__assert_fail@plt+0x3ee8>
   14e5c:	pop	{r4, pc}
   14e60:	push	{r4, lr}
   14e64:	mov	ip, r1
   14e68:	mov	r3, r2
   14e6c:	cmp	r2, #0
   14e70:	cmpne	r1, #0
   14e74:	moveq	r3, #1
   14e78:	moveq	ip, r3
   14e7c:	mov	r2, r3
   14e80:	mov	r1, ip
   14e84:	bl	15c84 <__assert_fail@plt+0x4d4c>
   14e88:	cmp	r0, #0
   14e8c:	popne	{r4, pc}
   14e90:	bl	15340 <__assert_fail@plt+0x4408>
   14e94:	push	{r4, lr}
   14e98:	mov	r2, r1
   14e9c:	mov	r1, r0
   14ea0:	mov	r0, #0
   14ea4:	bl	14e20 <__assert_fail@plt+0x3ee8>
   14ea8:	pop	{r4, pc}
   14eac:	push	{r4, lr}
   14eb0:	mov	r2, r1
   14eb4:	mov	r1, r0
   14eb8:	mov	r0, #0
   14ebc:	bl	14e60 <__assert_fail@plt+0x3f28>
   14ec0:	pop	{r4, pc}
   14ec4:	push	{r4, r5, r6, r7, r8, lr}
   14ec8:	mov	r5, r1
   14ecc:	mov	r6, r2
   14ed0:	ldr	r4, [r1]
   14ed4:	subs	r7, r0, #0
   14ed8:	beq	14ef4 <__assert_fail@plt+0x3fbc>
   14edc:	lsr	r2, r4, #1
   14ee0:	add	r3, r2, #1
   14ee4:	mvn	r3, r3
   14ee8:	cmp	r4, r3
   14eec:	bls	14f18 <__assert_fail@plt+0x3fe0>
   14ef0:	bl	15340 <__assert_fail@plt+0x4408>
   14ef4:	cmp	r4, #0
   14ef8:	bne	14f20 <__assert_fail@plt+0x3fe8>
   14efc:	mov	r1, r2
   14f00:	mov	r0, #64	; 0x40
   14f04:	bl	15dd8 <__assert_fail@plt+0x4ea0>
   14f08:	cmp	r0, #0
   14f0c:	movne	r4, r0
   14f10:	addeq	r4, r0, #1
   14f14:	b	14f20 <__assert_fail@plt+0x3fe8>
   14f18:	add	r4, r4, #1
   14f1c:	add	r4, r4, r2
   14f20:	mov	r2, r6
   14f24:	mov	r1, r4
   14f28:	mov	r0, r7
   14f2c:	bl	14e20 <__assert_fail@plt+0x3ee8>
   14f30:	str	r4, [r5]
   14f34:	pop	{r4, r5, r6, r7, r8, pc}
   14f38:	push	{r4, lr}
   14f3c:	mov	r2, #1
   14f40:	bl	14ec4 <__assert_fail@plt+0x3f8c>
   14f44:	pop	{r4, pc}
   14f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f4c:	sub	sp, sp, #12
   14f50:	mov	fp, r0
   14f54:	mov	sl, r1
   14f58:	mov	r9, r2
   14f5c:	mov	r7, r3
   14f60:	ldr	r6, [sp, #48]	; 0x30
   14f64:	ldr	r5, [r1]
   14f68:	asrs	r4, r5, #1
   14f6c:	bmi	150c8 <__assert_fail@plt+0x4190>
   14f70:	cmp	r5, #0
   14f74:	blt	150dc <__assert_fail@plt+0x41a4>
   14f78:	mvn	r3, #-2147483648	; 0x80000000
   14f7c:	sub	r3, r3, r4
   14f80:	cmp	r5, r3
   14f84:	movle	r3, #0
   14f88:	movgt	r3, #1
   14f8c:	cmp	r3, #0
   14f90:	addeq	r4, r4, r5
   14f94:	mvnne	r4, #-2147483648	; 0x80000000
   14f98:	mvn	r8, r7
   14f9c:	lsr	r8, r8, #31
   14fa0:	cmp	r7, r4
   14fa4:	movge	r3, #0
   14fa8:	andlt	r3, r8, #1
   14fac:	cmp	r3, #0
   14fb0:	movne	r4, r7
   14fb4:	cmp	r6, #0
   14fb8:	blt	150f0 <__assert_fail@plt+0x41b8>
   14fbc:	cmp	r6, #0
   14fc0:	beq	1519c <__assert_fail@plt+0x4264>
   14fc4:	cmp	r4, #0
   14fc8:	blt	1514c <__assert_fail@plt+0x4214>
   14fcc:	mov	r1, r6
   14fd0:	mvn	r0, #-2147483648	; 0x80000000
   14fd4:	bl	15fe4 <__assert_fail@plt+0x50ac>
   14fd8:	cmp	r0, r4
   14fdc:	movge	r0, #0
   14fe0:	movlt	r0, #1
   14fe4:	cmp	r0, #0
   14fe8:	mvnne	r3, #-2147483648	; 0x80000000
   14fec:	strne	r3, [sp, #4]
   14ff0:	beq	15184 <__assert_fail@plt+0x424c>
   14ff4:	mov	r1, r6
   14ff8:	ldr	r0, [sp, #4]
   14ffc:	bl	15fe4 <__assert_fail@plt+0x50ac>
   15000:	mov	r4, r0
   15004:	mov	r1, r6
   15008:	ldr	r0, [sp, #4]
   1500c:	bl	16204 <__assert_fail@plt+0x52cc>
   15010:	ldr	r3, [sp, #4]
   15014:	sub	r1, r3, r1
   15018:	cmp	fp, #0
   1501c:	moveq	r3, #0
   15020:	streq	r3, [sl]
   15024:	sub	r3, r4, r5
   15028:	cmp	r3, r9
   1502c:	bge	150b4 <__assert_fail@plt+0x417c>
   15030:	cmp	r9, #0
   15034:	blt	151a8 <__assert_fail@plt+0x4270>
   15038:	cmp	r5, #0
   1503c:	blt	151bc <__assert_fail@plt+0x4284>
   15040:	mvn	r3, #-2147483648	; 0x80000000
   15044:	sub	r3, r3, r9
   15048:	cmp	r5, r3
   1504c:	movle	r3, #0
   15050:	movgt	r3, #1
   15054:	cmp	r3, #0
   15058:	bne	15264 <__assert_fail@plt+0x432c>
   1505c:	add	r5, r5, r9
   15060:	mov	r4, r5
   15064:	cmp	r7, r5
   15068:	movge	r7, #0
   1506c:	andlt	r7, r8, #1
   15070:	cmp	r7, #0
   15074:	bne	15264 <__assert_fail@plt+0x432c>
   15078:	cmp	r6, #0
   1507c:	blt	151d0 <__assert_fail@plt+0x4298>
   15080:	cmp	r6, #0
   15084:	beq	150b0 <__assert_fail@plt+0x4178>
   15088:	cmp	r5, #0
   1508c:	blt	1522c <__assert_fail@plt+0x42f4>
   15090:	mov	r1, r6
   15094:	mvn	r0, #-2147483648	; 0x80000000
   15098:	bl	15fe4 <__assert_fail@plt+0x50ac>
   1509c:	cmp	r5, r0
   150a0:	movle	r0, #0
   150a4:	movgt	r0, #1
   150a8:	cmp	r0, #0
   150ac:	bne	15264 <__assert_fail@plt+0x432c>
   150b0:	mul	r1, r5, r6
   150b4:	mov	r0, fp
   150b8:	bl	14dd0 <__assert_fail@plt+0x3e98>
   150bc:	str	r4, [sl]
   150c0:	add	sp, sp, #12
   150c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150c8:	rsb	r3, r4, #-2147483648	; 0x80000000
   150cc:	cmp	r5, r3
   150d0:	movge	r3, #0
   150d4:	movlt	r3, #1
   150d8:	b	14f8c <__assert_fail@plt+0x4054>
   150dc:	rsb	r3, r5, #-2147483648	; 0x80000000
   150e0:	cmp	r4, r3
   150e4:	movge	r3, #0
   150e8:	movlt	r3, #1
   150ec:	b	14f8c <__assert_fail@plt+0x4054>
   150f0:	cmp	r4, #0
   150f4:	blt	1511c <__assert_fail@plt+0x41e4>
   150f8:	cmn	r6, #1
   150fc:	beq	15138 <__assert_fail@plt+0x4200>
   15100:	mov	r1, r6
   15104:	mov	r0, #-2147483648	; 0x80000000
   15108:	bl	15fe4 <__assert_fail@plt+0x50ac>
   1510c:	cmp	r0, r4
   15110:	movge	r0, #0
   15114:	movlt	r0, #1
   15118:	b	14fe4 <__assert_fail@plt+0x40ac>
   1511c:	mov	r1, r6
   15120:	mvn	r0, #-2147483648	; 0x80000000
   15124:	bl	15fe4 <__assert_fail@plt+0x50ac>
   15128:	cmp	r0, r4
   1512c:	movle	r0, #0
   15130:	movgt	r0, #1
   15134:	b	14fe4 <__assert_fail@plt+0x40ac>
   15138:	add	r0, r4, #-2147483648	; 0x80000000
   1513c:	cmp	r0, #0
   15140:	movle	r0, #0
   15144:	movgt	r0, #1
   15148:	b	14fe4 <__assert_fail@plt+0x40ac>
   1514c:	cmn	r4, #1
   15150:	beq	15170 <__assert_fail@plt+0x4238>
   15154:	mov	r1, r4
   15158:	mov	r0, #-2147483648	; 0x80000000
   1515c:	bl	15fe4 <__assert_fail@plt+0x50ac>
   15160:	cmp	r6, r0
   15164:	movle	r0, #0
   15168:	movgt	r0, #1
   1516c:	b	14fe4 <__assert_fail@plt+0x40ac>
   15170:	add	r0, r6, #-2147483648	; 0x80000000
   15174:	cmp	r0, #0
   15178:	movle	r0, #0
   1517c:	movgt	r0, #1
   15180:	b	14fe4 <__assert_fail@plt+0x40ac>
   15184:	mul	r1, r6, r4
   15188:	cmp	r1, #63	; 0x3f
   1518c:	movle	r3, #64	; 0x40
   15190:	strle	r3, [sp, #4]
   15194:	bgt	15018 <__assert_fail@plt+0x40e0>
   15198:	b	14ff4 <__assert_fail@plt+0x40bc>
   1519c:	mov	r3, #64	; 0x40
   151a0:	str	r3, [sp, #4]
   151a4:	b	14ff4 <__assert_fail@plt+0x40bc>
   151a8:	rsb	r3, r9, #-2147483648	; 0x80000000
   151ac:	cmp	r5, r3
   151b0:	movge	r3, #0
   151b4:	movlt	r3, #1
   151b8:	b	15054 <__assert_fail@plt+0x411c>
   151bc:	rsb	r3, r5, #-2147483648	; 0x80000000
   151c0:	cmp	r9, r3
   151c4:	movge	r3, #0
   151c8:	movlt	r3, #1
   151cc:	b	15054 <__assert_fail@plt+0x411c>
   151d0:	cmp	r5, #0
   151d4:	blt	151fc <__assert_fail@plt+0x42c4>
   151d8:	cmn	r6, #1
   151dc:	beq	15218 <__assert_fail@plt+0x42e0>
   151e0:	mov	r1, r6
   151e4:	mov	r0, #-2147483648	; 0x80000000
   151e8:	bl	15fe4 <__assert_fail@plt+0x50ac>
   151ec:	cmp	r5, r0
   151f0:	movle	r0, #0
   151f4:	movgt	r0, #1
   151f8:	b	150a8 <__assert_fail@plt+0x4170>
   151fc:	mov	r1, r6
   15200:	mvn	r0, #-2147483648	; 0x80000000
   15204:	bl	15fe4 <__assert_fail@plt+0x50ac>
   15208:	cmp	r5, r0
   1520c:	movge	r0, #0
   15210:	movlt	r0, #1
   15214:	b	150a8 <__assert_fail@plt+0x4170>
   15218:	add	r0, r5, #-2147483648	; 0x80000000
   1521c:	cmp	r0, #0
   15220:	movle	r0, #0
   15224:	movgt	r0, #1
   15228:	b	150a8 <__assert_fail@plt+0x4170>
   1522c:	cmn	r5, #1
   15230:	beq	15250 <__assert_fail@plt+0x4318>
   15234:	mov	r1, r5
   15238:	mov	r0, #-2147483648	; 0x80000000
   1523c:	bl	15fe4 <__assert_fail@plt+0x50ac>
   15240:	cmp	r6, r0
   15244:	movle	r0, #0
   15248:	movgt	r0, #1
   1524c:	b	150a8 <__assert_fail@plt+0x4170>
   15250:	add	r0, r6, #-2147483648	; 0x80000000
   15254:	cmp	r0, #0
   15258:	movle	r0, #0
   1525c:	movgt	r0, #1
   15260:	b	150a8 <__assert_fail@plt+0x4170>
   15264:	bl	15340 <__assert_fail@plt+0x4408>
   15268:	push	{r4, lr}
   1526c:	bl	15a58 <__assert_fail@plt+0x4b20>
   15270:	cmp	r0, #0
   15274:	popne	{r4, pc}
   15278:	bl	15340 <__assert_fail@plt+0x4408>
   1527c:	push	{r4, lr}
   15280:	mov	r1, #1
   15284:	bl	15268 <__assert_fail@plt+0x4330>
   15288:	pop	{r4, pc}
   1528c:	push	{r4, lr}
   15290:	bl	15a58 <__assert_fail@plt+0x4b20>
   15294:	cmp	r0, #0
   15298:	popne	{r4, pc}
   1529c:	bl	15340 <__assert_fail@plt+0x4408>
   152a0:	push	{r4, lr}
   152a4:	mov	r1, #1
   152a8:	bl	1528c <__assert_fail@plt+0x4354>
   152ac:	pop	{r4, pc}
   152b0:	push	{r4, r5, r6, lr}
   152b4:	mov	r5, r0
   152b8:	mov	r4, r1
   152bc:	mov	r0, r1
   152c0:	bl	14d9c <__assert_fail@plt+0x3e64>
   152c4:	mov	r2, r4
   152c8:	mov	r1, r5
   152cc:	bl	10d34 <memcpy@plt>
   152d0:	pop	{r4, r5, r6, pc}
   152d4:	push	{r4, r5, r6, lr}
   152d8:	mov	r5, r0
   152dc:	mov	r4, r1
   152e0:	mov	r0, r1
   152e4:	bl	14db0 <__assert_fail@plt+0x3e78>
   152e8:	mov	r2, r4
   152ec:	mov	r1, r5
   152f0:	bl	10d34 <memcpy@plt>
   152f4:	pop	{r4, r5, r6, pc}
   152f8:	push	{r4, r5, r6, lr}
   152fc:	mov	r5, r0
   15300:	mov	r4, r1
   15304:	add	r0, r1, #1
   15308:	bl	14db0 <__assert_fail@plt+0x3e78>
   1530c:	mov	r2, #0
   15310:	strb	r2, [r0, r4]
   15314:	mov	r2, r4
   15318:	mov	r1, r5
   1531c:	bl	10d34 <memcpy@plt>
   15320:	pop	{r4, r5, r6, pc}
   15324:	push	{r4, lr}
   15328:	mov	r4, r0
   1532c:	bl	10e48 <strlen@plt>
   15330:	add	r1, r0, #1
   15334:	mov	r0, r4
   15338:	bl	152b0 <__assert_fail@plt+0x4378>
   1533c:	pop	{r4, pc}
   15340:	push	{r4, lr}
   15344:	ldr	r3, [pc, #40]	; 15374 <__assert_fail@plt+0x443c>
   15348:	ldr	r4, [r3]
   1534c:	mov	r2, #5
   15350:	ldr	r1, [pc, #32]	; 15378 <__assert_fail@plt+0x4440>
   15354:	mov	r0, #0
   15358:	bl	10d7c <dcgettext@plt>
   1535c:	mov	r3, r0
   15360:	ldr	r2, [pc, #20]	; 1537c <__assert_fail@plt+0x4444>
   15364:	mov	r1, #0
   15368:	mov	r0, r4
   1536c:	bl	10de8 <error@plt>
   15370:	bl	10f2c <abort@plt>
   15374:	strdeq	r8, [r2], -r0
   15378:	andeq	r7, r1, r0, asr #32
   1537c:	andeq	r6, r1, ip, lsl #24
   15380:	push	{r4, r5, r6, r7, lr}
   15384:	sub	sp, sp, #20
   15388:	mov	r7, r0
   1538c:	mov	r4, r2
   15390:	mov	r5, r3
   15394:	ldr	r6, [sp, #56]	; 0x38
   15398:	ldr	r3, [sp, #48]	; 0x30
   1539c:	str	r3, [sp]
   153a0:	add	r3, sp, #8
   153a4:	mov	r2, r1
   153a8:	mov	r1, #0
   153ac:	bl	155d8 <__assert_fail@plt+0x46a0>
   153b0:	cmp	r0, #0
   153b4:	bne	15434 <__assert_fail@plt+0x44fc>
   153b8:	ldrd	r0, [sp, #8]
   153bc:	ldrd	r2, [sp, #40]	; 0x28
   153c0:	cmp	r1, r3
   153c4:	cmpeq	r0, r2
   153c8:	movhi	r3, #1
   153cc:	movls	r3, #0
   153d0:	cmp	r1, r5
   153d4:	cmpeq	r0, r4
   153d8:	orrcc	r3, r3, #1
   153dc:	cmp	r3, #0
   153e0:	beq	154ac <__assert_fail@plt+0x4574>
   153e4:	mvn	r2, #-1073741824	; 0xc0000000
   153e8:	mov	r3, #0
   153ec:	cmp	r1, r3
   153f0:	cmpeq	r0, r2
   153f4:	bls	15424 <__assert_fail@plt+0x44ec>
   153f8:	bl	10e60 <__errno_location@plt>
   153fc:	mov	r3, #75	; 0x4b
   15400:	str	r3, [r0]
   15404:	cmp	r6, #0
   15408:	bne	15484 <__assert_fail@plt+0x454c>
   1540c:	mov	r6, #1
   15410:	bl	10e60 <__errno_location@plt>
   15414:	ldr	r4, [r0]
   15418:	cmp	r4, #22
   1541c:	moveq	r4, #0
   15420:	b	1548c <__assert_fail@plt+0x4554>
   15424:	bl	10e60 <__errno_location@plt>
   15428:	mov	r3, #34	; 0x22
   1542c:	str	r3, [r0]
   15430:	b	15404 <__assert_fail@plt+0x44cc>
   15434:	cmp	r0, #1
   15438:	beq	15450 <__assert_fail@plt+0x4518>
   1543c:	cmp	r0, #3
   15440:	beq	15474 <__assert_fail@plt+0x453c>
   15444:	cmp	r6, #0
   15448:	moveq	r6, #1
   1544c:	b	15410 <__assert_fail@plt+0x44d8>
   15450:	bl	10e60 <__errno_location@plt>
   15454:	mov	r3, #75	; 0x4b
   15458:	str	r3, [r0]
   1545c:	cmp	r6, #0
   15460:	bne	15410 <__assert_fail@plt+0x44d8>
   15464:	bl	10e60 <__errno_location@plt>
   15468:	ldr	r4, [r0]
   1546c:	mov	r6, #1
   15470:	b	1548c <__assert_fail@plt+0x4554>
   15474:	bl	10e60 <__errno_location@plt>
   15478:	mov	r3, #0
   1547c:	str	r3, [r0]
   15480:	b	1545c <__assert_fail@plt+0x4524>
   15484:	bl	10e60 <__errno_location@plt>
   15488:	ldr	r4, [r0]
   1548c:	mov	r0, r7
   15490:	bl	14804 <__assert_fail@plt+0x38cc>
   15494:	str	r0, [sp]
   15498:	ldr	r3, [sp, #52]	; 0x34
   1549c:	ldr	r2, [pc, #16]	; 154b4 <__assert_fail@plt+0x457c>
   154a0:	mov	r1, r4
   154a4:	mov	r0, r6
   154a8:	bl	10de8 <error@plt>
   154ac:	add	sp, sp, #20
   154b0:	pop	{r4, r5, r6, r7, pc}
   154b4:	andeq	r6, r1, r8, lsl #24
   154b8:	push	{r4, r5, lr}
   154bc:	sub	sp, sp, #28
   154c0:	ldr	r1, [sp, #56]	; 0x38
   154c4:	str	r1, [sp, #16]
   154c8:	ldr	r1, [sp, #52]	; 0x34
   154cc:	str	r1, [sp, #12]
   154d0:	ldr	r1, [sp, #48]	; 0x30
   154d4:	str	r1, [sp, #8]
   154d8:	ldrd	r4, [sp, #40]	; 0x28
   154dc:	strd	r4, [sp]
   154e0:	mov	r1, #10
   154e4:	bl	15380 <__assert_fail@plt+0x4448>
   154e8:	add	sp, sp, #28
   154ec:	pop	{r4, r5, pc}
   154f0:	push	{r4, r5, r6, lr}
   154f4:	mov	r5, r0
   154f8:	subs	r4, r1, #0
   154fc:	blt	15550 <__assert_fail@plt+0x4618>
   15500:	cmp	r4, #0
   15504:	moveq	r3, #0
   15508:	beq	15534 <__assert_fail@plt+0x45fc>
   1550c:	mov	r2, r4
   15510:	asr	r3, r4, #31
   15514:	mvn	r0, #0
   15518:	mvn	r1, #0
   1551c:	bl	16224 <__assert_fail@plt+0x52ec>
   15520:	ldrd	r2, [r5]
   15524:	cmp	r1, r3
   15528:	cmpeq	r0, r2
   1552c:	movcc	r3, #1
   15530:	movcs	r3, #0
   15534:	cmp	r3, #0
   15538:	beq	15570 <__assert_fail@plt+0x4638>
   1553c:	mvn	r2, #0
   15540:	mvn	r3, #0
   15544:	strd	r2, [r5]
   15548:	mov	r0, #1
   1554c:	pop	{r4, r5, r6, pc}
   15550:	mov	r1, r4
   15554:	mov	r0, #0
   15558:	bl	15fe4 <__assert_fail@plt+0x50ac>
   1555c:	ldrd	r2, [r5]
   15560:	orrs	r3, r2, r3
   15564:	movne	r3, #1
   15568:	moveq	r3, #0
   1556c:	b	15534 <__assert_fail@plt+0x45fc>
   15570:	asr	r3, r4, #31
   15574:	ldr	r1, [r5, #4]
   15578:	ldr	r2, [r5]
   1557c:	mul	r3, r3, r2
   15580:	mla	r1, r4, r1, r3
   15584:	umull	r2, r3, r2, r4
   15588:	add	r3, r1, r3
   1558c:	strd	r2, [r5]
   15590:	mov	r0, #0
   15594:	pop	{r4, r5, r6, pc}
   15598:	push	{r4, r5, r6, r7, r8, lr}
   1559c:	subs	r4, r2, #0
   155a0:	beq	155d0 <__assert_fail@plt+0x4698>
   155a4:	mov	r7, r1
   155a8:	mov	r6, r0
   155ac:	mov	r5, #0
   155b0:	mov	r1, r7
   155b4:	mov	r0, r6
   155b8:	bl	154f0 <__assert_fail@plt+0x45b8>
   155bc:	orr	r5, r5, r0
   155c0:	subs	r4, r4, #1
   155c4:	bne	155b0 <__assert_fail@plt+0x4678>
   155c8:	mov	r0, r5
   155cc:	pop	{r4, r5, r6, r7, r8, pc}
   155d0:	mov	r5, #0
   155d4:	b	155c8 <__assert_fail@plt+0x4690>
   155d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   155dc:	sub	sp, sp, #20
   155e0:	cmp	r2, #36	; 0x24
   155e4:	bhi	15624 <__assert_fail@plt+0x46ec>
   155e8:	mov	r5, r0
   155ec:	mov	r6, r1
   155f0:	mov	r7, r2
   155f4:	mov	r9, r3
   155f8:	cmp	r1, #0
   155fc:	addeq	r6, sp, #12
   15600:	bl	10e60 <__errno_location@plt>
   15604:	mov	r8, r0
   15608:	mov	r3, #0
   1560c:	str	r3, [r0]
   15610:	ldrb	r4, [r5]
   15614:	bl	10e30 <__ctype_b_loc@plt>
   15618:	ldr	r1, [r0]
   1561c:	mov	r2, r5
   15620:	b	1563c <__assert_fail@plt+0x4704>
   15624:	ldr	r3, [pc, #1056]	; 15a4c <__assert_fail@plt+0x4b14>
   15628:	mov	r2, #85	; 0x55
   1562c:	ldr	r1, [pc, #1052]	; 15a50 <__assert_fail@plt+0x4b18>
   15630:	ldr	r0, [pc, #1052]	; 15a54 <__assert_fail@plt+0x4b1c>
   15634:	bl	10f38 <__assert_fail@plt>
   15638:	ldrb	r4, [r2, #1]!
   1563c:	lsl	r3, r4, #1
   15640:	ldrh	r3, [r1, r3]
   15644:	tst	r3, #8192	; 0x2000
   15648:	bne	15638 <__assert_fail@plt+0x4700>
   1564c:	cmp	r4, #45	; 0x2d
   15650:	moveq	r4, #4
   15654:	bne	15664 <__assert_fail@plt+0x472c>
   15658:	mov	r0, r4
   1565c:	add	sp, sp, #20
   15660:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15664:	mov	r3, #0
   15668:	mov	r2, r7
   1566c:	mov	r1, r6
   15670:	mov	r0, r5
   15674:	bl	10d40 <__strtoull_internal@plt>
   15678:	strd	r0, [sp]
   1567c:	ldr	r7, [r6]
   15680:	cmp	r5, r7
   15684:	beq	156a8 <__assert_fail@plt+0x4770>
   15688:	ldr	r3, [r8]
   1568c:	cmp	r3, #0
   15690:	beq	156f0 <__assert_fail@plt+0x47b8>
   15694:	cmp	r3, #34	; 0x22
   15698:	moveq	r4, #1
   1569c:	beq	156f4 <__assert_fail@plt+0x47bc>
   156a0:	mov	r4, #4
   156a4:	b	15658 <__assert_fail@plt+0x4720>
   156a8:	ldr	r3, [sp, #48]	; 0x30
   156ac:	cmp	r3, #0
   156b0:	moveq	r4, #4
   156b4:	beq	15658 <__assert_fail@plt+0x4720>
   156b8:	ldrb	r1, [r7]
   156bc:	cmp	r1, #0
   156c0:	moveq	r4, #4
   156c4:	beq	15658 <__assert_fail@plt+0x4720>
   156c8:	mov	r0, r3
   156cc:	bl	10e54 <strchr@plt>
   156d0:	cmp	r0, #0
   156d4:	moveq	r4, #4
   156d8:	beq	15658 <__assert_fail@plt+0x4720>
   156dc:	mov	r2, #1
   156e0:	mov	r3, #0
   156e4:	strd	r2, [sp]
   156e8:	mov	r4, #0
   156ec:	b	15700 <__assert_fail@plt+0x47c8>
   156f0:	mov	r4, #0
   156f4:	ldr	r3, [sp, #48]	; 0x30
   156f8:	cmp	r3, #0
   156fc:	beq	157f0 <__assert_fail@plt+0x48b8>
   15700:	ldrb	r5, [r7]
   15704:	cmp	r5, #0
   15708:	beq	15988 <__assert_fail@plt+0x4a50>
   1570c:	mov	r1, r5
   15710:	ldr	r0, [sp, #48]	; 0x30
   15714:	bl	10e54 <strchr@plt>
   15718:	cmp	r0, #0
   1571c:	beq	157f8 <__assert_fail@plt+0x48c0>
   15720:	sub	r3, r5, #69	; 0x45
   15724:	cmp	r3, #47	; 0x2f
   15728:	ldrls	pc, [pc, r3, lsl #2]
   1572c:	b	15864 <__assert_fail@plt+0x492c>
   15730:	andeq	r5, r1, r8, lsl #16
   15734:	andeq	r5, r1, r4, ror #16
   15738:	andeq	r5, r1, r8, lsl #16
   1573c:	andeq	r5, r1, r4, ror #16
   15740:	andeq	r5, r1, r4, ror #16
   15744:	andeq	r5, r1, r4, ror #16
   15748:	andeq	r5, r1, r8, lsl #16
   1574c:	andeq	r5, r1, r4, ror #16
   15750:	andeq	r5, r1, r8, lsl #16
   15754:	andeq	r5, r1, r4, ror #16
   15758:	andeq	r5, r1, r4, ror #16
   1575c:	andeq	r5, r1, r8, lsl #16
   15760:	andeq	r5, r1, r4, ror #16
   15764:	andeq	r5, r1, r4, ror #16
   15768:	andeq	r5, r1, r4, ror #16
   1576c:	andeq	r5, r1, r8, lsl #16
   15770:	andeq	r5, r1, r4, ror #16
   15774:	andeq	r5, r1, r4, ror #16
   15778:	andeq	r5, r1, r4, ror #16
   1577c:	andeq	r5, r1, r4, ror #16
   15780:	andeq	r5, r1, r8, lsl #16
   15784:	andeq	r5, r1, r8, lsl #16
   15788:	andeq	r5, r1, r4, ror #16
   1578c:	andeq	r5, r1, r4, ror #16
   15790:	andeq	r5, r1, r4, ror #16
   15794:	andeq	r5, r1, r4, ror #16
   15798:	andeq	r5, r1, r4, ror #16
   1579c:	andeq	r5, r1, r4, ror #16
   157a0:	andeq	r5, r1, r4, ror #16
   157a4:	andeq	r5, r1, r4, ror #16
   157a8:	andeq	r5, r1, r4, ror #16
   157ac:	andeq	r5, r1, r4, ror #16
   157b0:	andeq	r5, r1, r4, ror #16
   157b4:	andeq	r5, r1, r4, ror #16
   157b8:	andeq	r5, r1, r8, lsl #16
   157bc:	andeq	r5, r1, r4, ror #16
   157c0:	andeq	r5, r1, r4, ror #16
   157c4:	andeq	r5, r1, r4, ror #16
   157c8:	andeq	r5, r1, r8, lsl #16
   157cc:	andeq	r5, r1, r4, ror #16
   157d0:	andeq	r5, r1, r8, lsl #16
   157d4:	andeq	r5, r1, r4, ror #16
   157d8:	andeq	r5, r1, r4, ror #16
   157dc:	andeq	r5, r1, r4, ror #16
   157e0:	andeq	r5, r1, r4, ror #16
   157e4:	andeq	r5, r1, r4, ror #16
   157e8:	andeq	r5, r1, r4, ror #16
   157ec:	andeq	r5, r1, r8, lsl #16
   157f0:	strd	r0, [r9]
   157f4:	b	15658 <__assert_fail@plt+0x4720>
   157f8:	ldrd	r2, [sp]
   157fc:	strd	r2, [r9]
   15800:	orr	r4, r4, #2
   15804:	b	15658 <__assert_fail@plt+0x4720>
   15808:	mov	r1, #48	; 0x30
   1580c:	ldr	r0, [sp, #48]	; 0x30
   15810:	bl	10e54 <strchr@plt>
   15814:	cmp	r0, #0
   15818:	beq	15954 <__assert_fail@plt+0x4a1c>
   1581c:	ldrb	r3, [r7, #1]
   15820:	cmp	r3, #68	; 0x44
   15824:	beq	15840 <__assert_fail@plt+0x4908>
   15828:	cmp	r3, #105	; 0x69
   1582c:	beq	1584c <__assert_fail@plt+0x4914>
   15830:	cmp	r3, #66	; 0x42
   15834:	movne	r7, #1
   15838:	movne	r1, #1024	; 0x400
   1583c:	bne	1586c <__assert_fail@plt+0x4934>
   15840:	mov	r7, #2
   15844:	mov	r1, #1000	; 0x3e8
   15848:	b	1586c <__assert_fail@plt+0x4934>
   1584c:	ldrb	r7, [r7, #2]
   15850:	cmp	r7, #66	; 0x42
   15854:	movne	r7, #1
   15858:	moveq	r7, #3
   1585c:	mov	r1, #1024	; 0x400
   15860:	b	1586c <__assert_fail@plt+0x4934>
   15864:	mov	r7, #1
   15868:	mov	r1, #1024	; 0x400
   1586c:	sub	r5, r5, #66	; 0x42
   15870:	cmp	r5, #53	; 0x35
   15874:	ldrls	pc, [pc, r5, lsl #2]
   15878:	b	15a34 <__assert_fail@plt+0x4afc>
   1587c:	muleq	r1, r4, r9
   15880:	andeq	r5, r1, r4, lsr sl
   15884:	andeq	r5, r1, r4, lsr sl
   15888:	andeq	r5, r1, r4, lsr #19
   1588c:	andeq	r5, r1, r4, lsr sl
   15890:			; <UNDEFINED> instruction: 0x000159b4
   15894:	andeq	r5, r1, r4, lsr sl
   15898:	andeq	r5, r1, r4, lsr sl
   1589c:	andeq	r5, r1, r4, lsr sl
   158a0:	andeq	r5, r1, r4, asr #19
   158a4:	andeq	r5, r1, r4, lsr sl
   158a8:	ldrdeq	r5, [r1], -r4
   158ac:	andeq	r5, r1, r4, lsr sl
   158b0:	andeq	r5, r1, r4, lsr sl
   158b4:	andeq	r5, r1, r4, ror #19
   158b8:	andeq	r5, r1, r4, lsr sl
   158bc:	andeq	r5, r1, r4, lsr sl
   158c0:	andeq	r5, r1, r4, lsr sl
   158c4:	strdeq	r5, [r1], -r4
   158c8:	andeq	r5, r1, r4, lsr sl
   158cc:	andeq	r5, r1, r4, lsr sl
   158d0:	andeq	r5, r1, r4, lsr sl
   158d4:	andeq	r5, r1, r4, lsr sl
   158d8:	andeq	r5, r1, r4, lsl sl
   158dc:	andeq	r5, r1, r4, lsr #20
   158e0:	andeq	r5, r1, r4, lsr sl
   158e4:	andeq	r5, r1, r4, lsr sl
   158e8:	andeq	r5, r1, r4, lsr sl
   158ec:	andeq	r5, r1, r4, lsr sl
   158f0:	andeq	r5, r1, r4, lsr sl
   158f4:	andeq	r5, r1, r4, lsr sl
   158f8:	andeq	r5, r1, r4, lsr sl
   158fc:	andeq	r5, r1, r0, ror #18
   15900:	andeq	r5, r1, r4, asr #20
   15904:	andeq	r5, r1, r4, lsr sl
   15908:	andeq	r5, r1, r4, lsr sl
   1590c:	andeq	r5, r1, r4, lsr sl
   15910:			; <UNDEFINED> instruction: 0x000159b4
   15914:	andeq	r5, r1, r4, lsr sl
   15918:	andeq	r5, r1, r4, lsr sl
   1591c:	andeq	r5, r1, r4, lsr sl
   15920:	andeq	r5, r1, r4, asr #19
   15924:	andeq	r5, r1, r4, lsr sl
   15928:	ldrdeq	r5, [r1], -r4
   1592c:	andeq	r5, r1, r4, lsr sl
   15930:	andeq	r5, r1, r4, lsr sl
   15934:	andeq	r5, r1, r4, lsr sl
   15938:	andeq	r5, r1, r4, lsr sl
   1593c:	andeq	r5, r1, r4, lsr sl
   15940:	andeq	r5, r1, r4, lsr sl
   15944:	strdeq	r5, [r1], -r4
   15948:	andeq	r5, r1, r4, lsr sl
   1594c:	andeq	r5, r1, r4, lsr sl
   15950:	andeq	r5, r1, r4, lsl #20
   15954:	mov	r7, #1
   15958:	mov	r1, #1024	; 0x400
   1595c:	b	1586c <__assert_fail@plt+0x4934>
   15960:	mov	r1, #512	; 0x200
   15964:	mov	r0, sp
   15968:	bl	154f0 <__assert_fail@plt+0x45b8>
   1596c:	orr	r4, r4, r0
   15970:	ldr	r3, [r6]
   15974:	add	r2, r3, r7
   15978:	str	r2, [r6]
   1597c:	ldrb	r3, [r3, r7]
   15980:	cmp	r3, #0
   15984:	orrne	r4, r4, #2
   15988:	ldrd	r2, [sp]
   1598c:	strd	r2, [r9]
   15990:	b	15658 <__assert_fail@plt+0x4720>
   15994:	mov	r1, #1024	; 0x400
   15998:	mov	r0, sp
   1599c:	bl	154f0 <__assert_fail@plt+0x45b8>
   159a0:	b	1596c <__assert_fail@plt+0x4a34>
   159a4:	mov	r2, #6
   159a8:	mov	r0, sp
   159ac:	bl	15598 <__assert_fail@plt+0x4660>
   159b0:	b	1596c <__assert_fail@plt+0x4a34>
   159b4:	mov	r2, #3
   159b8:	mov	r0, sp
   159bc:	bl	15598 <__assert_fail@plt+0x4660>
   159c0:	b	1596c <__assert_fail@plt+0x4a34>
   159c4:	mov	r2, #1
   159c8:	mov	r0, sp
   159cc:	bl	15598 <__assert_fail@plt+0x4660>
   159d0:	b	1596c <__assert_fail@plt+0x4a34>
   159d4:	mov	r2, #2
   159d8:	mov	r0, sp
   159dc:	bl	15598 <__assert_fail@plt+0x4660>
   159e0:	b	1596c <__assert_fail@plt+0x4a34>
   159e4:	mov	r2, #5
   159e8:	mov	r0, sp
   159ec:	bl	15598 <__assert_fail@plt+0x4660>
   159f0:	b	1596c <__assert_fail@plt+0x4a34>
   159f4:	mov	r2, #4
   159f8:	mov	r0, sp
   159fc:	bl	15598 <__assert_fail@plt+0x4660>
   15a00:	b	1596c <__assert_fail@plt+0x4a34>
   15a04:	mov	r1, #2
   15a08:	mov	r0, sp
   15a0c:	bl	154f0 <__assert_fail@plt+0x45b8>
   15a10:	b	1596c <__assert_fail@plt+0x4a34>
   15a14:	mov	r2, #8
   15a18:	mov	r0, sp
   15a1c:	bl	15598 <__assert_fail@plt+0x4660>
   15a20:	b	1596c <__assert_fail@plt+0x4a34>
   15a24:	mov	r2, #7
   15a28:	mov	r0, sp
   15a2c:	bl	15598 <__assert_fail@plt+0x4660>
   15a30:	b	1596c <__assert_fail@plt+0x4a34>
   15a34:	ldrd	r2, [sp]
   15a38:	strd	r2, [r9]
   15a3c:	orr	r4, r4, #2
   15a40:	b	15658 <__assert_fail@plt+0x4720>
   15a44:	mov	r0, #0
   15a48:	b	1596c <__assert_fail@plt+0x4a34>
   15a4c:	andeq	r7, r1, r4, asr r0
   15a50:	andeq	r7, r1, r0, rrx
   15a54:	andeq	r7, r1, r0, ror r0
   15a58:	push	{r4, lr}
   15a5c:	mov	r2, r0
   15a60:	mov	r3, r1
   15a64:	cmp	r1, #0
   15a68:	cmpne	r0, #0
   15a6c:	moveq	r3, #1
   15a70:	moveq	r2, r3
   15a74:	umull	r0, r1, r2, r3
   15a78:	cmp	r0, #0
   15a7c:	cmpge	r1, #0
   15a80:	bne	15a94 <__assert_fail@plt+0x4b5c>
   15a84:	mov	r1, r3
   15a88:	mov	r0, r2
   15a8c:	bl	10cc8 <calloc@plt>
   15a90:	pop	{r4, pc}
   15a94:	bl	10e60 <__errno_location@plt>
   15a98:	mov	r3, #12
   15a9c:	str	r3, [r0]
   15aa0:	mov	r0, #0
   15aa4:	pop	{r4, pc}
   15aa8:	push	{r4, lr}
   15aac:	cmp	r0, #0
   15ab0:	moveq	r0, #1
   15ab4:	cmp	r0, #0
   15ab8:	blt	15ac4 <__assert_fail@plt+0x4b8c>
   15abc:	bl	10df4 <malloc@plt>
   15ac0:	pop	{r4, pc}
   15ac4:	bl	10e60 <__errno_location@plt>
   15ac8:	mov	r3, #12
   15acc:	str	r3, [r0]
   15ad0:	mov	r0, #0
   15ad4:	pop	{r4, pc}
   15ad8:	push	{r4, lr}
   15adc:	cmp	r0, #0
   15ae0:	beq	15afc <__assert_fail@plt+0x4bc4>
   15ae4:	cmp	r1, #0
   15ae8:	beq	15b08 <__assert_fail@plt+0x4bd0>
   15aec:	cmp	r1, #0
   15af0:	blt	15b14 <__assert_fail@plt+0x4bdc>
   15af4:	bl	10d88 <realloc@plt>
   15af8:	pop	{r4, pc}
   15afc:	mov	r0, r1
   15b00:	bl	15aa8 <__assert_fail@plt+0x4b70>
   15b04:	pop	{r4, pc}
   15b08:	bl	15ba0 <__assert_fail@plt+0x4c68>
   15b0c:	mov	r0, #0
   15b10:	pop	{r4, pc}
   15b14:	bl	10e60 <__errno_location@plt>
   15b18:	mov	r3, #12
   15b1c:	str	r3, [r0]
   15b20:	mov	r0, #0
   15b24:	pop	{r4, pc}
   15b28:	push	{r4, r5, r6, lr}
   15b2c:	mov	r5, r0
   15b30:	bl	10dd0 <__fpending@plt>
   15b34:	mov	r6, r0
   15b38:	ldr	r4, [r5]
   15b3c:	and	r4, r4, #32
   15b40:	mov	r0, r5
   15b44:	bl	12b00 <__assert_fail@plt+0x1bc8>
   15b48:	cmp	r4, #0
   15b4c:	bne	15b74 <__assert_fail@plt+0x4c3c>
   15b50:	cmp	r0, #0
   15b54:	popeq	{r4, r5, r6, pc}
   15b58:	cmp	r6, #0
   15b5c:	bne	15b90 <__assert_fail@plt+0x4c58>
   15b60:	bl	10e60 <__errno_location@plt>
   15b64:	ldr	r0, [r0]
   15b68:	subs	r0, r0, #9
   15b6c:	mvnne	r0, #0
   15b70:	pop	{r4, r5, r6, pc}
   15b74:	cmp	r0, #0
   15b78:	bne	15b98 <__assert_fail@plt+0x4c60>
   15b7c:	bl	10e60 <__errno_location@plt>
   15b80:	mov	r3, #0
   15b84:	str	r3, [r0]
   15b88:	mvn	r0, #0
   15b8c:	pop	{r4, r5, r6, pc}
   15b90:	mvn	r0, #0
   15b94:	pop	{r4, r5, r6, pc}
   15b98:	mvn	r0, #0
   15b9c:	pop	{r4, r5, r6, pc}
   15ba0:	push	{r4, r5, lr}
   15ba4:	sub	sp, sp, #12
   15ba8:	mov	r5, r0
   15bac:	bl	10e60 <__errno_location@plt>
   15bb0:	mov	r4, r0
   15bb4:	ldr	r3, [r0]
   15bb8:	str	r3, [sp]
   15bbc:	str	r3, [sp, #4]
   15bc0:	mov	r3, #0
   15bc4:	str	r3, [r0]
   15bc8:	mov	r0, r5
   15bcc:	bl	10d1c <free@plt>
   15bd0:	ldr	r3, [r4]
   15bd4:	cmp	r3, #0
   15bd8:	moveq	r3, #4
   15bdc:	movne	r3, #0
   15be0:	add	r2, sp, #8
   15be4:	add	r3, r2, r3
   15be8:	ldr	r3, [r3, #-8]
   15bec:	str	r3, [r4]
   15bf0:	add	sp, sp, #12
   15bf4:	pop	{r4, r5, pc}
   15bf8:	push	{r4, lr}
   15bfc:	mov	r0, #14
   15c00:	bl	10ef0 <nl_langinfo@plt>
   15c04:	cmp	r0, #0
   15c08:	beq	15c20 <__assert_fail@plt+0x4ce8>
   15c0c:	ldrb	r2, [r0]
   15c10:	ldr	r3, [pc, #16]	; 15c28 <__assert_fail@plt+0x4cf0>
   15c14:	cmp	r2, #0
   15c18:	moveq	r0, r3
   15c1c:	pop	{r4, pc}
   15c20:	ldr	r0, [pc]	; 15c28 <__assert_fail@plt+0x4cf0>
   15c24:	pop	{r4, pc}
   15c28:	muleq	r1, r8, r0
   15c2c:	push	{r4, r5, r6, r7, lr}
   15c30:	sub	sp, sp, #12
   15c34:	mov	r7, r1
   15c38:	mov	r5, r2
   15c3c:	subs	r6, r0, #0
   15c40:	addeq	r6, sp, #4
   15c44:	mov	r0, r6
   15c48:	bl	10ddc <mbrtowc@plt>
   15c4c:	mov	r4, r0
   15c50:	cmp	r5, #0
   15c54:	cmnne	r0, #3
   15c58:	bhi	15c68 <__assert_fail@plt+0x4d30>
   15c5c:	mov	r0, r4
   15c60:	add	sp, sp, #12
   15c64:	pop	{r4, r5, r6, r7, pc}
   15c68:	mov	r0, #0
   15c6c:	bl	15cd0 <__assert_fail@plt+0x4d98>
   15c70:	cmp	r0, #0
   15c74:	ldrbeq	r3, [r7]
   15c78:	streq	r3, [r6]
   15c7c:	moveq	r4, #1
   15c80:	b	15c5c <__assert_fail@plt+0x4d24>
   15c84:	push	{r4, r5, r6, lr}
   15c88:	mov	r6, r0
   15c8c:	mov	r5, r1
   15c90:	subs	r4, r2, #0
   15c94:	beq	15cc0 <__assert_fail@plt+0x4d88>
   15c98:	mov	r1, r4
   15c9c:	mvn	r0, #0
   15ca0:	bl	15dd8 <__assert_fail@plt+0x4ea0>
   15ca4:	cmp	r0, r5
   15ca8:	bcs	15cc0 <__assert_fail@plt+0x4d88>
   15cac:	bl	10e60 <__errno_location@plt>
   15cb0:	mov	r3, #12
   15cb4:	str	r3, [r0]
   15cb8:	mov	r0, #0
   15cbc:	pop	{r4, r5, r6, pc}
   15cc0:	mul	r1, r5, r4
   15cc4:	mov	r0, r6
   15cc8:	bl	15ad8 <__assert_fail@plt+0x4ba0>
   15ccc:	pop	{r4, r5, r6, pc}
   15cd0:	push	{lr}		; (str lr, [sp, #-4]!)
   15cd4:	sub	sp, sp, #268	; 0x10c
   15cd8:	ldr	r2, [pc, #68]	; 15d24 <__assert_fail@plt+0x4dec>
   15cdc:	add	r1, sp, #4
   15ce0:	bl	15d30 <__assert_fail@plt+0x4df8>
   15ce4:	cmp	r0, #0
   15ce8:	movne	r0, #0
   15cec:	bne	15d1c <__assert_fail@plt+0x4de4>
   15cf0:	ldr	r1, [pc, #48]	; 15d28 <__assert_fail@plt+0x4df0>
   15cf4:	add	r0, sp, #4
   15cf8:	bl	10cec <strcmp@plt>
   15cfc:	cmp	r0, #0
   15d00:	moveq	r0, #0
   15d04:	beq	15d1c <__assert_fail@plt+0x4de4>
   15d08:	ldr	r1, [pc, #28]	; 15d2c <__assert_fail@plt+0x4df4>
   15d0c:	add	r0, sp, #4
   15d10:	bl	10cec <strcmp@plt>
   15d14:	adds	r0, r0, #0
   15d18:	movne	r0, #1
   15d1c:	add	sp, sp, #268	; 0x10c
   15d20:	pop	{pc}		; (ldr pc, [sp], #4)
   15d24:	andeq	r0, r0, r1, lsl #2
   15d28:	andeq	r7, r1, r0, lsr #1
   15d2c:	andeq	r7, r1, r4, lsr #1
   15d30:	push	{r4, r5, r6, lr}
   15d34:	mov	r6, r1
   15d38:	mov	r4, r2
   15d3c:	mov	r1, #0
   15d40:	bl	10ed8 <setlocale@plt>
   15d44:	subs	r5, r0, #0
   15d48:	beq	15d6c <__assert_fail@plt+0x4e34>
   15d4c:	mov	r0, r5
   15d50:	bl	10e48 <strlen@plt>
   15d54:	cmp	r4, r0
   15d58:	bhi	15d84 <__assert_fail@plt+0x4e4c>
   15d5c:	cmp	r4, #0
   15d60:	bne	15d9c <__assert_fail@plt+0x4e64>
   15d64:	mov	r0, #34	; 0x22
   15d68:	pop	{r4, r5, r6, pc}
   15d6c:	cmp	r4, #0
   15d70:	beq	15dc0 <__assert_fail@plt+0x4e88>
   15d74:	mov	r3, #0
   15d78:	strb	r3, [r6]
   15d7c:	mov	r0, #22
   15d80:	pop	{r4, r5, r6, pc}
   15d84:	add	r2, r0, #1
   15d88:	mov	r1, r5
   15d8c:	mov	r0, r6
   15d90:	bl	10d34 <memcpy@plt>
   15d94:	mov	r0, #0
   15d98:	pop	{r4, r5, r6, pc}
   15d9c:	sub	r4, r4, #1
   15da0:	mov	r2, r4
   15da4:	mov	r1, r5
   15da8:	mov	r0, r6
   15dac:	bl	10d34 <memcpy@plt>
   15db0:	mov	r3, #0
   15db4:	strb	r3, [r6, r4]
   15db8:	mov	r0, #34	; 0x22
   15dbc:	pop	{r4, r5, r6, pc}
   15dc0:	mov	r0, #22
   15dc4:	pop	{r4, r5, r6, pc}
   15dc8:	push	{r4, lr}
   15dcc:	mov	r1, #0
   15dd0:	bl	10ed8 <setlocale@plt>
   15dd4:	pop	{r4, pc}
   15dd8:	subs	r2, r1, #1
   15ddc:	bxeq	lr
   15de0:	bcc	15fb8 <__assert_fail@plt+0x5080>
   15de4:	cmp	r0, r1
   15de8:	bls	15f9c <__assert_fail@plt+0x5064>
   15dec:	tst	r1, r2
   15df0:	beq	15fa8 <__assert_fail@plt+0x5070>
   15df4:	clz	r3, r0
   15df8:	clz	r2, r1
   15dfc:	sub	r3, r2, r3
   15e00:	rsbs	r3, r3, #31
   15e04:	addne	r3, r3, r3, lsl #1
   15e08:	mov	r2, #0
   15e0c:	addne	pc, pc, r3, lsl #2
   15e10:	nop			; (mov r0, r0)
   15e14:	cmp	r0, r1, lsl #31
   15e18:	adc	r2, r2, r2
   15e1c:	subcs	r0, r0, r1, lsl #31
   15e20:	cmp	r0, r1, lsl #30
   15e24:	adc	r2, r2, r2
   15e28:	subcs	r0, r0, r1, lsl #30
   15e2c:	cmp	r0, r1, lsl #29
   15e30:	adc	r2, r2, r2
   15e34:	subcs	r0, r0, r1, lsl #29
   15e38:	cmp	r0, r1, lsl #28
   15e3c:	adc	r2, r2, r2
   15e40:	subcs	r0, r0, r1, lsl #28
   15e44:	cmp	r0, r1, lsl #27
   15e48:	adc	r2, r2, r2
   15e4c:	subcs	r0, r0, r1, lsl #27
   15e50:	cmp	r0, r1, lsl #26
   15e54:	adc	r2, r2, r2
   15e58:	subcs	r0, r0, r1, lsl #26
   15e5c:	cmp	r0, r1, lsl #25
   15e60:	adc	r2, r2, r2
   15e64:	subcs	r0, r0, r1, lsl #25
   15e68:	cmp	r0, r1, lsl #24
   15e6c:	adc	r2, r2, r2
   15e70:	subcs	r0, r0, r1, lsl #24
   15e74:	cmp	r0, r1, lsl #23
   15e78:	adc	r2, r2, r2
   15e7c:	subcs	r0, r0, r1, lsl #23
   15e80:	cmp	r0, r1, lsl #22
   15e84:	adc	r2, r2, r2
   15e88:	subcs	r0, r0, r1, lsl #22
   15e8c:	cmp	r0, r1, lsl #21
   15e90:	adc	r2, r2, r2
   15e94:	subcs	r0, r0, r1, lsl #21
   15e98:	cmp	r0, r1, lsl #20
   15e9c:	adc	r2, r2, r2
   15ea0:	subcs	r0, r0, r1, lsl #20
   15ea4:	cmp	r0, r1, lsl #19
   15ea8:	adc	r2, r2, r2
   15eac:	subcs	r0, r0, r1, lsl #19
   15eb0:	cmp	r0, r1, lsl #18
   15eb4:	adc	r2, r2, r2
   15eb8:	subcs	r0, r0, r1, lsl #18
   15ebc:	cmp	r0, r1, lsl #17
   15ec0:	adc	r2, r2, r2
   15ec4:	subcs	r0, r0, r1, lsl #17
   15ec8:	cmp	r0, r1, lsl #16
   15ecc:	adc	r2, r2, r2
   15ed0:	subcs	r0, r0, r1, lsl #16
   15ed4:	cmp	r0, r1, lsl #15
   15ed8:	adc	r2, r2, r2
   15edc:	subcs	r0, r0, r1, lsl #15
   15ee0:	cmp	r0, r1, lsl #14
   15ee4:	adc	r2, r2, r2
   15ee8:	subcs	r0, r0, r1, lsl #14
   15eec:	cmp	r0, r1, lsl #13
   15ef0:	adc	r2, r2, r2
   15ef4:	subcs	r0, r0, r1, lsl #13
   15ef8:	cmp	r0, r1, lsl #12
   15efc:	adc	r2, r2, r2
   15f00:	subcs	r0, r0, r1, lsl #12
   15f04:	cmp	r0, r1, lsl #11
   15f08:	adc	r2, r2, r2
   15f0c:	subcs	r0, r0, r1, lsl #11
   15f10:	cmp	r0, r1, lsl #10
   15f14:	adc	r2, r2, r2
   15f18:	subcs	r0, r0, r1, lsl #10
   15f1c:	cmp	r0, r1, lsl #9
   15f20:	adc	r2, r2, r2
   15f24:	subcs	r0, r0, r1, lsl #9
   15f28:	cmp	r0, r1, lsl #8
   15f2c:	adc	r2, r2, r2
   15f30:	subcs	r0, r0, r1, lsl #8
   15f34:	cmp	r0, r1, lsl #7
   15f38:	adc	r2, r2, r2
   15f3c:	subcs	r0, r0, r1, lsl #7
   15f40:	cmp	r0, r1, lsl #6
   15f44:	adc	r2, r2, r2
   15f48:	subcs	r0, r0, r1, lsl #6
   15f4c:	cmp	r0, r1, lsl #5
   15f50:	adc	r2, r2, r2
   15f54:	subcs	r0, r0, r1, lsl #5
   15f58:	cmp	r0, r1, lsl #4
   15f5c:	adc	r2, r2, r2
   15f60:	subcs	r0, r0, r1, lsl #4
   15f64:	cmp	r0, r1, lsl #3
   15f68:	adc	r2, r2, r2
   15f6c:	subcs	r0, r0, r1, lsl #3
   15f70:	cmp	r0, r1, lsl #2
   15f74:	adc	r2, r2, r2
   15f78:	subcs	r0, r0, r1, lsl #2
   15f7c:	cmp	r0, r1, lsl #1
   15f80:	adc	r2, r2, r2
   15f84:	subcs	r0, r0, r1, lsl #1
   15f88:	cmp	r0, r1
   15f8c:	adc	r2, r2, r2
   15f90:	subcs	r0, r0, r1
   15f94:	mov	r0, r2
   15f98:	bx	lr
   15f9c:	moveq	r0, #1
   15fa0:	movne	r0, #0
   15fa4:	bx	lr
   15fa8:	clz	r2, r1
   15fac:	rsb	r2, r2, #31
   15fb0:	lsr	r0, r0, r2
   15fb4:	bx	lr
   15fb8:	cmp	r0, #0
   15fbc:	mvnne	r0, #0
   15fc0:	b	16260 <__assert_fail@plt+0x5328>
   15fc4:	cmp	r1, #0
   15fc8:	beq	15fb8 <__assert_fail@plt+0x5080>
   15fcc:	push	{r0, r1, lr}
   15fd0:	bl	15dd8 <__assert_fail@plt+0x4ea0>
   15fd4:	pop	{r1, r2, lr}
   15fd8:	mul	r3, r2, r0
   15fdc:	sub	r1, r1, r3
   15fe0:	bx	lr
   15fe4:	cmp	r1, #0
   15fe8:	beq	161f4 <__assert_fail@plt+0x52bc>
   15fec:	eor	ip, r0, r1
   15ff0:	rsbmi	r1, r1, #0
   15ff4:	subs	r2, r1, #1
   15ff8:	beq	161c0 <__assert_fail@plt+0x5288>
   15ffc:	movs	r3, r0
   16000:	rsbmi	r3, r0, #0
   16004:	cmp	r3, r1
   16008:	bls	161cc <__assert_fail@plt+0x5294>
   1600c:	tst	r1, r2
   16010:	beq	161dc <__assert_fail@plt+0x52a4>
   16014:	clz	r2, r3
   16018:	clz	r0, r1
   1601c:	sub	r2, r0, r2
   16020:	rsbs	r2, r2, #31
   16024:	addne	r2, r2, r2, lsl #1
   16028:	mov	r0, #0
   1602c:	addne	pc, pc, r2, lsl #2
   16030:	nop			; (mov r0, r0)
   16034:	cmp	r3, r1, lsl #31
   16038:	adc	r0, r0, r0
   1603c:	subcs	r3, r3, r1, lsl #31
   16040:	cmp	r3, r1, lsl #30
   16044:	adc	r0, r0, r0
   16048:	subcs	r3, r3, r1, lsl #30
   1604c:	cmp	r3, r1, lsl #29
   16050:	adc	r0, r0, r0
   16054:	subcs	r3, r3, r1, lsl #29
   16058:	cmp	r3, r1, lsl #28
   1605c:	adc	r0, r0, r0
   16060:	subcs	r3, r3, r1, lsl #28
   16064:	cmp	r3, r1, lsl #27
   16068:	adc	r0, r0, r0
   1606c:	subcs	r3, r3, r1, lsl #27
   16070:	cmp	r3, r1, lsl #26
   16074:	adc	r0, r0, r0
   16078:	subcs	r3, r3, r1, lsl #26
   1607c:	cmp	r3, r1, lsl #25
   16080:	adc	r0, r0, r0
   16084:	subcs	r3, r3, r1, lsl #25
   16088:	cmp	r3, r1, lsl #24
   1608c:	adc	r0, r0, r0
   16090:	subcs	r3, r3, r1, lsl #24
   16094:	cmp	r3, r1, lsl #23
   16098:	adc	r0, r0, r0
   1609c:	subcs	r3, r3, r1, lsl #23
   160a0:	cmp	r3, r1, lsl #22
   160a4:	adc	r0, r0, r0
   160a8:	subcs	r3, r3, r1, lsl #22
   160ac:	cmp	r3, r1, lsl #21
   160b0:	adc	r0, r0, r0
   160b4:	subcs	r3, r3, r1, lsl #21
   160b8:	cmp	r3, r1, lsl #20
   160bc:	adc	r0, r0, r0
   160c0:	subcs	r3, r3, r1, lsl #20
   160c4:	cmp	r3, r1, lsl #19
   160c8:	adc	r0, r0, r0
   160cc:	subcs	r3, r3, r1, lsl #19
   160d0:	cmp	r3, r1, lsl #18
   160d4:	adc	r0, r0, r0
   160d8:	subcs	r3, r3, r1, lsl #18
   160dc:	cmp	r3, r1, lsl #17
   160e0:	adc	r0, r0, r0
   160e4:	subcs	r3, r3, r1, lsl #17
   160e8:	cmp	r3, r1, lsl #16
   160ec:	adc	r0, r0, r0
   160f0:	subcs	r3, r3, r1, lsl #16
   160f4:	cmp	r3, r1, lsl #15
   160f8:	adc	r0, r0, r0
   160fc:	subcs	r3, r3, r1, lsl #15
   16100:	cmp	r3, r1, lsl #14
   16104:	adc	r0, r0, r0
   16108:	subcs	r3, r3, r1, lsl #14
   1610c:	cmp	r3, r1, lsl #13
   16110:	adc	r0, r0, r0
   16114:	subcs	r3, r3, r1, lsl #13
   16118:	cmp	r3, r1, lsl #12
   1611c:	adc	r0, r0, r0
   16120:	subcs	r3, r3, r1, lsl #12
   16124:	cmp	r3, r1, lsl #11
   16128:	adc	r0, r0, r0
   1612c:	subcs	r3, r3, r1, lsl #11
   16130:	cmp	r3, r1, lsl #10
   16134:	adc	r0, r0, r0
   16138:	subcs	r3, r3, r1, lsl #10
   1613c:	cmp	r3, r1, lsl #9
   16140:	adc	r0, r0, r0
   16144:	subcs	r3, r3, r1, lsl #9
   16148:	cmp	r3, r1, lsl #8
   1614c:	adc	r0, r0, r0
   16150:	subcs	r3, r3, r1, lsl #8
   16154:	cmp	r3, r1, lsl #7
   16158:	adc	r0, r0, r0
   1615c:	subcs	r3, r3, r1, lsl #7
   16160:	cmp	r3, r1, lsl #6
   16164:	adc	r0, r0, r0
   16168:	subcs	r3, r3, r1, lsl #6
   1616c:	cmp	r3, r1, lsl #5
   16170:	adc	r0, r0, r0
   16174:	subcs	r3, r3, r1, lsl #5
   16178:	cmp	r3, r1, lsl #4
   1617c:	adc	r0, r0, r0
   16180:	subcs	r3, r3, r1, lsl #4
   16184:	cmp	r3, r1, lsl #3
   16188:	adc	r0, r0, r0
   1618c:	subcs	r3, r3, r1, lsl #3
   16190:	cmp	r3, r1, lsl #2
   16194:	adc	r0, r0, r0
   16198:	subcs	r3, r3, r1, lsl #2
   1619c:	cmp	r3, r1, lsl #1
   161a0:	adc	r0, r0, r0
   161a4:	subcs	r3, r3, r1, lsl #1
   161a8:	cmp	r3, r1
   161ac:	adc	r0, r0, r0
   161b0:	subcs	r3, r3, r1
   161b4:	cmp	ip, #0
   161b8:	rsbmi	r0, r0, #0
   161bc:	bx	lr
   161c0:	teq	ip, r0
   161c4:	rsbmi	r0, r0, #0
   161c8:	bx	lr
   161cc:	movcc	r0, #0
   161d0:	asreq	r0, ip, #31
   161d4:	orreq	r0, r0, #1
   161d8:	bx	lr
   161dc:	clz	r2, r1
   161e0:	rsb	r2, r2, #31
   161e4:	cmp	ip, #0
   161e8:	lsr	r0, r3, r2
   161ec:	rsbmi	r0, r0, #0
   161f0:	bx	lr
   161f4:	cmp	r0, #0
   161f8:	mvngt	r0, #-2147483648	; 0x80000000
   161fc:	movlt	r0, #-2147483648	; 0x80000000
   16200:	b	16260 <__assert_fail@plt+0x5328>
   16204:	cmp	r1, #0
   16208:	beq	161f4 <__assert_fail@plt+0x52bc>
   1620c:	push	{r0, r1, lr}
   16210:	bl	15fec <__assert_fail@plt+0x50b4>
   16214:	pop	{r1, r2, lr}
   16218:	mul	r3, r2, r0
   1621c:	sub	r1, r1, r3
   16220:	bx	lr
   16224:	cmp	r3, #0
   16228:	cmpeq	r2, #0
   1622c:	bne	16244 <__assert_fail@plt+0x530c>
   16230:	cmp	r1, #0
   16234:	cmpeq	r0, #0
   16238:	mvnne	r1, #0
   1623c:	mvnne	r0, #0
   16240:	b	16260 <__assert_fail@plt+0x5328>
   16244:	sub	sp, sp, #8
   16248:	push	{sp, lr}
   1624c:	bl	16270 <__assert_fail@plt+0x5338>
   16250:	ldr	lr, [sp, #4]
   16254:	add	sp, sp, #8
   16258:	pop	{r2, r3}
   1625c:	bx	lr
   16260:	push	{r1, lr}
   16264:	mov	r0, #8
   16268:	bl	10ce0 <raise@plt>
   1626c:	pop	{r1, pc}
   16270:	cmp	r1, r3
   16274:	push	{r4, r5, r6, r7, r8, r9, lr}
   16278:	cmpeq	r0, r2
   1627c:	mov	r4, r0
   16280:	mov	r5, r1
   16284:	ldr	r9, [sp, #28]
   16288:	movcc	r0, #0
   1628c:	movcc	r1, #0
   16290:	bcc	16388 <__assert_fail@plt+0x5450>
   16294:	cmp	r3, #0
   16298:	clzeq	ip, r2
   1629c:	clzne	ip, r3
   162a0:	addeq	ip, ip, #32
   162a4:	cmp	r5, #0
   162a8:	clzeq	r1, r4
   162ac:	addeq	r1, r1, #32
   162b0:	clzne	r1, r5
   162b4:	sub	ip, ip, r1
   162b8:	sub	lr, ip, #32
   162bc:	lsl	r7, r3, ip
   162c0:	rsb	r8, ip, #32
   162c4:	orr	r7, r7, r2, lsl lr
   162c8:	orr	r7, r7, r2, lsr r8
   162cc:	lsl	r6, r2, ip
   162d0:	cmp	r5, r7
   162d4:	cmpeq	r4, r6
   162d8:	movcc	r0, #0
   162dc:	movcc	r1, #0
   162e0:	bcc	162fc <__assert_fail@plt+0x53c4>
   162e4:	mov	r3, #1
   162e8:	subs	r4, r4, r6
   162ec:	lsl	r1, r3, lr
   162f0:	lsl	r0, r3, ip
   162f4:	orr	r1, r1, r3, lsr r8
   162f8:	sbc	r5, r5, r7
   162fc:	cmp	ip, #0
   16300:	beq	16388 <__assert_fail@plt+0x5450>
   16304:	lsrs	r3, r7, #1
   16308:	rrx	r2, r6
   1630c:	mov	r6, ip
   16310:	b	16334 <__assert_fail@plt+0x53fc>
   16314:	subs	r4, r4, r2
   16318:	sbc	r5, r5, r3
   1631c:	adds	r4, r4, r4
   16320:	adc	r5, r5, r5
   16324:	adds	r4, r4, #1
   16328:	adc	r5, r5, #0
   1632c:	subs	r6, r6, #1
   16330:	beq	16350 <__assert_fail@plt+0x5418>
   16334:	cmp	r5, r3
   16338:	cmpeq	r4, r2
   1633c:	bcs	16314 <__assert_fail@plt+0x53dc>
   16340:	adds	r4, r4, r4
   16344:	adc	r5, r5, r5
   16348:	subs	r6, r6, #1
   1634c:	bne	16334 <__assert_fail@plt+0x53fc>
   16350:	lsr	r6, r4, ip
   16354:	lsr	r7, r5, ip
   16358:	orr	r6, r6, r5, lsl r8
   1635c:	adds	r2, r0, r4
   16360:	orr	r6, r6, r5, lsr lr
   16364:	adc	r3, r1, r5
   16368:	lsl	r1, r7, ip
   1636c:	orr	r1, r1, r6, lsl lr
   16370:	lsl	r0, r6, ip
   16374:	orr	r1, r1, r6, lsr r8
   16378:	subs	r0, r2, r0
   1637c:	mov	r4, r6
   16380:	mov	r5, r7
   16384:	sbc	r1, r3, r1
   16388:	cmp	r9, #0
   1638c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16390:	strd	r4, [r9]
   16394:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16398:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1639c:	mov	r7, r0
   163a0:	ldr	r6, [pc, #72]	; 163f0 <__assert_fail@plt+0x54b8>
   163a4:	ldr	r5, [pc, #72]	; 163f4 <__assert_fail@plt+0x54bc>
   163a8:	add	r6, pc, r6
   163ac:	add	r5, pc, r5
   163b0:	sub	r6, r6, r5
   163b4:	mov	r8, r1
   163b8:	mov	r9, r2
   163bc:	bl	10ca8 <calloc@plt-0x20>
   163c0:	asrs	r6, r6, #2
   163c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   163c8:	mov	r4, #0
   163cc:	add	r4, r4, #1
   163d0:	ldr	r3, [r5], #4
   163d4:	mov	r2, r9
   163d8:	mov	r1, r8
   163dc:	mov	r0, r7
   163e0:	blx	r3
   163e4:	cmp	r6, r4
   163e8:	bne	163cc <__assert_fail@plt+0x5494>
   163ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163f0:	andeq	r1, r1, r0, ror #22
   163f4:	andeq	r1, r1, r8, asr fp
   163f8:	bx	lr
   163fc:	ldr	r3, [pc, #12]	; 16410 <__assert_fail@plt+0x54d8>
   16400:	mov	r1, #0
   16404:	add	r3, pc, r3
   16408:	ldr	r2, [r3]
   1640c:	b	10e6c <__cxa_atexit@plt>
   16410:	ldrdeq	r1, [r1], -ip

Disassembly of section .fini:

00016414 <.fini>:
   16414:	push	{r3, lr}
   16418:	pop	{r3, pc}
