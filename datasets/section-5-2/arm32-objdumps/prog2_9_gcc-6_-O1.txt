
../repos/prog2/9:     file format elf32-littlearm


Disassembly of section .init:

000109c4 <.init>:
   109c4:	push	{r3, lr}
   109c8:	bl	10af8 <_start@@Base+0x3c>
   109cc:	pop	{r3, pc}

Disassembly of section .plt:

000109d0 <calloc@plt-0x14>:
   109d0:	push	{lr}		; (str lr, [sp, #-4]!)
   109d4:	ldr	lr, [pc, #4]	; 109e0 <calloc@plt-0x4>
   109d8:	add	lr, pc, lr
   109dc:	ldr	pc, [lr, #8]!
   109e0:	andeq	r1, r1, r0, lsr #12

000109e4 <calloc@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #69632	; 0x11000
   109ec:	ldr	pc, [ip, #1568]!	; 0x620

000109f0 <strcmp@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #69632	; 0x11000
   109f8:	ldr	pc, [ip, #1560]!	; 0x618

000109fc <printf@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #69632	; 0x11000
   10a04:	ldr	pc, [ip, #1552]!	; 0x610

00010a08 <__isoc99_fscanf@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #69632	; 0x11000
   10a10:	ldr	pc, [ip, #1544]!	; 0x608

00010a14 <fopen@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #69632	; 0x11000
   10a1c:	ldr	pc, [ip, #1536]!	; 0x600

00010a20 <fflush@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #69632	; 0x11000
   10a28:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a2c <free@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #69632	; 0x11000
   10a34:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a38 <fgets@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #69632	; 0x11000
   10a40:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a44 <strdup@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a50 <puts@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a5c <malloc@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a68 <__libc_start_main@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a74 <__gmon_start__@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #69632	; 0x11000
   10a7c:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a80 <feof@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #69632	; 0x11000
   10a88:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a8c <strlen@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #69632	; 0x11000
   10a94:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a98 <putchar@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #69632	; 0x11000
   10aa0:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa4 <fclose@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #69632	; 0x11000
   10aac:	ldr	pc, [ip, #1440]!	; 0x5a0

00010ab0 <abort@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #69632	; 0x11000
   10ab8:	ldr	pc, [ip, #1432]!	; 0x598

Disassembly of section .text:

00010abc <_start@@Base>:
   10abc:	mov	fp, #0
   10ac0:	mov	lr, #0
   10ac4:	pop	{r1}		; (ldr r1, [sp], #4)
   10ac8:	mov	r2, sp
   10acc:	push	{r2}		; (str r2, [sp, #-4]!)
   10ad0:	push	{r0}		; (str r0, [sp, #-4]!)
   10ad4:	ldr	ip, [pc, #16]	; 10aec <_start@@Base+0x30>
   10ad8:	push	{ip}		; (str ip, [sp, #-4]!)
   10adc:	ldr	r0, [pc, #12]	; 10af0 <_start@@Base+0x34>
   10ae0:	ldr	r3, [pc, #12]	; 10af4 <_start@@Base+0x38>
   10ae4:	bl	10a68 <__libc_start_main@plt>
   10ae8:	bl	10ab0 <abort@plt>
   10aec:	andeq	r1, r1, r8, ror #9
   10af0:	andeq	r0, r1, r0, lsr #30
   10af4:	andeq	r1, r1, r8, lsl #9
   10af8:	ldr	r3, [pc, #20]	; 10b14 <_start@@Base+0x58>
   10afc:	ldr	r2, [pc, #20]	; 10b18 <_start@@Base+0x5c>
   10b00:	add	r3, pc, r3
   10b04:	ldr	r2, [r3, r2]
   10b08:	cmp	r2, #0
   10b0c:	bxeq	lr
   10b10:	b	10a74 <__gmon_start__@plt>
   10b14:	strdeq	r1, [r1], -r8
   10b18:	andeq	r0, r0, r4, asr r0
   10b1c:	ldr	r3, [pc, #28]	; 10b40 <_start@@Base+0x84>
   10b20:	ldr	r0, [pc, #28]	; 10b44 <_start@@Base+0x88>
   10b24:	sub	r3, r3, r0
   10b28:	cmp	r3, #6
   10b2c:	bxls	lr
   10b30:	ldr	r3, [pc, #16]	; 10b48 <_start@@Base+0x8c>
   10b34:	cmp	r3, #0
   10b38:	bxeq	lr
   10b3c:	bx	r3
   10b40:	andeq	r2, r2, r3, rrx
   10b44:	andeq	r2, r2, r0, rrx
   10b48:	andeq	r0, r0, r0
   10b4c:	ldr	r1, [pc, #36]	; 10b78 <_start@@Base+0xbc>
   10b50:	ldr	r0, [pc, #36]	; 10b7c <_start@@Base+0xc0>
   10b54:	sub	r1, r1, r0
   10b58:	asr	r1, r1, #2
   10b5c:	add	r1, r1, r1, lsr #31
   10b60:	asrs	r1, r1, #1
   10b64:	bxeq	lr
   10b68:	ldr	r3, [pc, #16]	; 10b80 <_start@@Base+0xc4>
   10b6c:	cmp	r3, #0
   10b70:	bxeq	lr
   10b74:	bx	r3
   10b78:	andeq	r2, r2, r0, rrx
   10b7c:	andeq	r2, r2, r0, rrx
   10b80:	andeq	r0, r0, r0
   10b84:	push	{r4, lr}
   10b88:	ldr	r4, [pc, #24]	; 10ba8 <_start@@Base+0xec>
   10b8c:	ldrb	r3, [r4]
   10b90:	cmp	r3, #0
   10b94:	popne	{r4, pc}
   10b98:	bl	10b1c <_start@@Base+0x60>
   10b9c:	mov	r3, #1
   10ba0:	strb	r3, [r4]
   10ba4:	pop	{r4, pc}
   10ba8:	andeq	r2, r2, r4, rrx
   10bac:	ldr	r0, [pc, #40]	; 10bdc <_start@@Base+0x120>
   10bb0:	ldr	r3, [r0]
   10bb4:	cmp	r3, #0
   10bb8:	bne	10bc0 <_start@@Base+0x104>
   10bbc:	b	10b4c <_start@@Base+0x90>
   10bc0:	ldr	r3, [pc, #24]	; 10be0 <_start@@Base+0x124>
   10bc4:	cmp	r3, #0
   10bc8:	beq	10bbc <_start@@Base+0x100>
   10bcc:	push	{r4, lr}
   10bd0:	blx	r3
   10bd4:	pop	{r4, lr}
   10bd8:	b	10b4c <_start@@Base+0x90>
   10bdc:	andeq	r1, r2, r4, lsl pc
   10be0:	andeq	r0, r0, r0

00010be4 <fp_insere@@Base>:
   10be4:	push	{r4, r5, r6, lr}
   10be8:	subs	r5, r0, #0
   10bec:	beq	10c94 <fp_insere@@Base+0xb0>
   10bf0:	ldr	r0, [r5]
   10bf4:	ldr	r3, [r5, #4]
   10bf8:	cmp	r0, r3
   10bfc:	beq	10c9c <fp_insere@@Base+0xb8>
   10c00:	mov	r0, r2
   10c04:	bl	11270 <elemento_cria@@Base>
   10c08:	mov	r6, r0
   10c0c:	ldr	r3, [r5]
   10c10:	cmp	r3, #0
   10c14:	ble	10c8c <fp_insere@@Base+0xa8>
   10c18:	mov	r4, #0
   10c1c:	ldr	r3, [r5, #8]
   10c20:	mov	r1, r6
   10c24:	ldr	r0, [r3, r4, lsl #2]
   10c28:	bl	112a4 <maior_que@@Base>
   10c2c:	cmp	r0, #0
   10c30:	beq	10c44 <fp_insere@@Base+0x60>
   10c34:	add	r4, r4, #1
   10c38:	ldr	r3, [r5]
   10c3c:	cmp	r3, r4
   10c40:	bgt	10c1c <fp_insere@@Base+0x38>
   10c44:	ldr	r2, [r5]
   10c48:	cmp	r2, r4
   10c4c:	blt	10c70 <fp_insere@@Base+0x8c>
   10c50:	lsl	r1, r2, #2
   10c54:	ldr	r3, [r5, #8]
   10c58:	ldr	r0, [r3, r1]!
   10c5c:	str	r0, [r3, #4]
   10c60:	sub	r2, r2, #1
   10c64:	sub	r1, r1, #4
   10c68:	cmp	r2, r4
   10c6c:	bge	10c54 <fp_insere@@Base+0x70>
   10c70:	ldr	r3, [r5, #8]
   10c74:	str	r6, [r3, r4, lsl #2]
   10c78:	ldr	r3, [r5]
   10c7c:	add	r3, r3, #1
   10c80:	str	r3, [r5]
   10c84:	mov	r0, #1
   10c88:	pop	{r4, r5, r6, pc}
   10c8c:	mov	r4, #0
   10c90:	b	10c44 <fp_insere@@Base+0x60>
   10c94:	mvn	r0, #0
   10c98:	pop	{r4, r5, r6, pc}
   10c9c:	mov	r0, #0
   10ca0:	pop	{r4, r5, r6, pc}

00010ca4 <fp_remove@@Base>:
   10ca4:	cmp	r0, #0
   10ca8:	beq	10d00 <fp_remove@@Base+0x5c>
   10cac:	ldr	r1, [r0]
   10cb0:	cmp	r1, #0
   10cb4:	beq	10d08 <fp_remove@@Base+0x64>
   10cb8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cbc:	ldr	r3, [r0, #8]
   10cc0:	ldr	lr, [r3]
   10cc4:	ble	10cf0 <fp_remove@@Base+0x4c>
   10cc8:	mov	r2, #4
   10ccc:	mov	r3, #0
   10cd0:	ldr	r1, [r0, #8]
   10cd4:	ldr	ip, [r1, r2]
   10cd8:	str	ip, [r1, r3, lsl #2]
   10cdc:	add	r3, r3, #1
   10ce0:	ldr	r1, [r0]
   10ce4:	add	r2, r2, #4
   10ce8:	cmp	r1, r3
   10cec:	bgt	10cd0 <fp_remove@@Base+0x2c>
   10cf0:	sub	r1, r1, #1
   10cf4:	str	r1, [r0]
   10cf8:	ldr	r0, [lr, #4]
   10cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   10d00:	mov	r0, #0
   10d04:	bx	lr
   10d08:	mov	r0, #0
   10d0c:	bx	lr

00010d10 <fp_carrega@@Base>:
   10d10:	push	{r4, r5, r6, r7, r8, lr}
   10d14:	sub	sp, sp, #264	; 0x108
   10d18:	mov	r5, r0
   10d1c:	mov	r0, r1
   10d20:	ldr	r1, [pc, #132]	; 10dac <fp_carrega@@Base+0x9c>
   10d24:	bl	10a14 <fopen@plt>
   10d28:	subs	r4, r0, #0
   10d2c:	ldrne	r8, [pc, #124]	; 10db0 <fp_carrega@@Base+0xa0>
   10d30:	movne	r7, #256	; 0x100
   10d34:	movne	r6, #0
   10d38:	bne	10d8c <fp_carrega@@Base+0x7c>
   10d3c:	ldr	r0, [pc, #112]	; 10db4 <fp_carrega@@Base+0xa4>
   10d40:	bl	10a50 <puts@plt>
   10d44:	b	10da4 <fp_carrega@@Base+0x94>
   10d48:	add	r2, sp, #4
   10d4c:	mov	r1, r8
   10d50:	mov	r0, r4
   10d54:	bl	10a08 <__isoc99_fscanf@plt>
   10d58:	mov	r2, r4
   10d5c:	mov	r1, r7
   10d60:	add	r0, sp, #8
   10d64:	bl	10a38 <fgets@plt>
   10d68:	add	r0, sp, #8
   10d6c:	bl	10a8c <strlen@plt>
   10d70:	add	r3, sp, #264	; 0x108
   10d74:	add	r0, r3, r0
   10d78:	strb	r6, [r0, #-257]	; 0xfffffeff
   10d7c:	ldr	r2, [sp, #4]
   10d80:	add	r1, sp, #8
   10d84:	mov	r0, r5
   10d88:	bl	10be4 <fp_insere@@Base>
   10d8c:	mov	r0, r4
   10d90:	bl	10a80 <feof@plt>
   10d94:	cmp	r0, #0
   10d98:	beq	10d48 <fp_carrega@@Base+0x38>
   10d9c:	mov	r0, r4
   10da0:	bl	10aa4 <fclose@plt>
   10da4:	add	sp, sp, #264	; 0x108
   10da8:	pop	{r4, r5, r6, r7, r8, pc}
   10dac:	strdeq	r1, [r1], -r8
   10db0:	andeq	r1, r1, r0, lsr #10
   10db4:	strdeq	r1, [r1], -ip

00010db8 <heap_insere@@Base>:
   10db8:	push	{r4, r5, r6, r7, r8, lr}
   10dbc:	ldr	lr, [r0]
   10dc0:	ldr	ip, [r0, #4]
   10dc4:	cmp	lr, ip
   10dc8:	moveq	r4, #0
   10dcc:	beq	10e60 <heap_insere@@Base+0xa8>
   10dd0:	mov	r7, r1
   10dd4:	mov	r5, r0
   10dd8:	mov	r1, r2
   10ddc:	mov	r0, r3
   10de0:	bl	11270 <elemento_cria@@Base>
   10de4:	mov	r6, r0
   10de8:	ldr	r3, [r5]
   10dec:	cmp	r3, #0
   10df0:	movle	r4, #0
   10df4:	ble	10e4c <heap_insere@@Base+0x94>
   10df8:	mov	r4, #0
   10dfc:	ldr	r3, [r5, #8]
   10e00:	mov	r1, r6
   10e04:	ldr	r0, [r3, r4, lsl #2]
   10e08:	blx	r7
   10e0c:	cmp	r0, #1
   10e10:	beq	10e24 <heap_insere@@Base+0x6c>
   10e14:	add	r4, r4, #1
   10e18:	ldr	r3, [r5]
   10e1c:	cmp	r3, r4
   10e20:	bgt	10dfc <heap_insere@@Base+0x44>
   10e24:	cmp	r4, #0
   10e28:	ble	10e4c <heap_insere@@Base+0x94>
   10e2c:	lsl	r1, r4, #2
   10e30:	mov	r2, r4
   10e34:	ldr	r3, [r5, #8]
   10e38:	ldr	r0, [r3, r1]!
   10e3c:	str	r0, [r3, #4]
   10e40:	sub	r1, r1, #4
   10e44:	subs	r2, r2, #1
   10e48:	bne	10e34 <heap_insere@@Base+0x7c>
   10e4c:	ldr	r3, [r5, #8]
   10e50:	str	r6, [r3, r4, lsl #2]
   10e54:	ldr	r3, [r5]
   10e58:	add	r3, r3, #1
   10e5c:	str	r3, [r5]
   10e60:	mov	r0, r4
   10e64:	pop	{r4, r5, r6, r7, r8, pc}

00010e68 <heap_remove@@Base>:
   10e68:	mov	r0, #0
   10e6c:	bx	lr

00010e70 <heap_carrega@@Base>:
   10e70:	push	{r4, r5, r6, r7, r8, r9, lr}
   10e74:	sub	sp, sp, #268	; 0x10c
   10e78:	mov	r5, r0
   10e7c:	mov	r6, r1
   10e80:	ldr	r1, [pc, #140]	; 10f14 <heap_carrega@@Base+0xa4>
   10e84:	mov	r0, r2
   10e88:	bl	10a14 <fopen@plt>
   10e8c:	subs	r4, r0, #0
   10e90:	ldrne	r9, [pc, #128]	; 10f18 <heap_carrega@@Base+0xa8>
   10e94:	movne	r8, #256	; 0x100
   10e98:	movne	r7, #0
   10e9c:	bne	10ef4 <heap_carrega@@Base+0x84>
   10ea0:	ldr	r0, [pc, #116]	; 10f1c <heap_carrega@@Base+0xac>
   10ea4:	bl	10a50 <puts@plt>
   10ea8:	b	10f0c <heap_carrega@@Base+0x9c>
   10eac:	add	r2, sp, #4
   10eb0:	mov	r1, r9
   10eb4:	mov	r0, r4
   10eb8:	bl	10a08 <__isoc99_fscanf@plt>
   10ebc:	mov	r2, r4
   10ec0:	mov	r1, r8
   10ec4:	add	r0, sp, #8
   10ec8:	bl	10a38 <fgets@plt>
   10ecc:	add	r0, sp, #8
   10ed0:	bl	10a8c <strlen@plt>
   10ed4:	add	r3, sp, #264	; 0x108
   10ed8:	add	r0, r3, r0
   10edc:	strb	r7, [r0, #-257]	; 0xfffffeff
   10ee0:	ldr	r3, [sp, #4]
   10ee4:	add	r2, sp, #8
   10ee8:	mov	r1, r6
   10eec:	mov	r0, r5
   10ef0:	bl	10db8 <heap_insere@@Base>
   10ef4:	mov	r0, r4
   10ef8:	bl	10a80 <feof@plt>
   10efc:	cmp	r0, #0
   10f00:	beq	10eac <heap_carrega@@Base+0x3c>
   10f04:	mov	r0, r4
   10f08:	bl	10aa4 <fclose@plt>
   10f0c:	add	sp, sp, #268	; 0x10c
   10f10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10f14:	strdeq	r1, [r1], -r8
   10f18:	andeq	r1, r1, r0, lsr #10
   10f1c:	strdeq	r1, [r1], -ip

00010f20 <main@@Base>:
   10f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f24:	mov	r0, #42	; 0x2a
   10f28:	bl	111c8 <vetor_cria@@Base>
   10f2c:	mov	r4, r0
   10f30:	ldr	r0, [pc, #576]	; 11178 <main@@Base+0x258>
   10f34:	bl	10a50 <puts@plt>
   10f38:	ldr	r1, [pc, #572]	; 1117c <main@@Base+0x25c>
   10f3c:	mov	r0, r4
   10f40:	bl	10d10 <fp_carrega@@Base>
   10f44:	ldr	r3, [pc, #564]	; 11180 <main@@Base+0x260>
   10f48:	ldr	r1, [r3]
   10f4c:	ldr	r0, [pc, #560]	; 11184 <main@@Base+0x264>
   10f50:	bl	109fc <printf@plt>
   10f54:	mov	r0, r4
   10f58:	bl	11370 <vetor_imprime@@Base>
   10f5c:	ldr	r3, [r4]
   10f60:	cmp	r3, #42	; 0x2a
   10f64:	beq	10f7c <main@@Base+0x5c>
   10f68:	ldr	r0, [pc, #536]	; 11188 <main@@Base+0x268>
   10f6c:	bl	10a50 <puts@plt>
   10f70:	mov	r6, #1
   10f74:	mov	r0, r6
   10f78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f7c:	mov	r0, r4
   10f80:	bl	10ca4 <fp_remove@@Base>
   10f84:	mov	r1, r0
   10f88:	ldr	r0, [pc, #508]	; 1118c <main@@Base+0x26c>
   10f8c:	bl	109f0 <strcmp@plt>
   10f90:	cmp	r0, #0
   10f94:	bne	11148 <main@@Base+0x228>
   10f98:	ldr	r5, [pc, #480]	; 11180 <main@@Base+0x260>
   10f9c:	mov	r6, #0
   10fa0:	str	r6, [r5]
   10fa4:	mov	r0, r4
   10fa8:	bl	10ca4 <fp_remove@@Base>
   10fac:	ldr	r1, [r5]
   10fb0:	ldr	r0, [pc, #472]	; 11190 <main@@Base+0x270>
   10fb4:	bl	109fc <printf@plt>
   10fb8:	str	r6, [r5]
   10fbc:	ldr	r7, [pc, #464]	; 11194 <main@@Base+0x274>
   10fc0:	mov	r2, #99	; 0x63
   10fc4:	mov	r1, r7
   10fc8:	mov	r0, r4
   10fcc:	bl	10be4 <fp_insere@@Base>
   10fd0:	ldr	r1, [r5]
   10fd4:	ldr	r0, [pc, #444]	; 11198 <main@@Base+0x278>
   10fd8:	bl	109fc <printf@plt>
   10fdc:	mov	r0, r4
   10fe0:	bl	10ca4 <fp_remove@@Base>
   10fe4:	str	r6, [r5]
   10fe8:	mov	r2, r6
   10fec:	mov	r1, r7
   10ff0:	mov	r0, r4
   10ff4:	bl	10be4 <fp_insere@@Base>
   10ff8:	ldr	r1, [r5]
   10ffc:	ldr	r0, [pc, #408]	; 1119c <main@@Base+0x27c>
   11000:	bl	109fc <printf@plt>
   11004:	mov	r0, r4
   11008:	bl	10ca4 <fp_remove@@Base>
   1100c:	str	r6, [r5]
   11010:	mov	r2, #42	; 0x2a
   11014:	mov	r1, r7
   11018:	mov	r0, r4
   1101c:	bl	10be4 <fp_insere@@Base>
   11020:	ldr	r1, [r5]
   11024:	ldr	r0, [pc, #372]	; 111a0 <main@@Base+0x280>
   11028:	bl	109fc <printf@plt>
   1102c:	ldr	r0, [pc, #368]	; 111a4 <main@@Base+0x284>
   11030:	bl	10a50 <puts@plt>
   11034:	mov	r0, #42	; 0x2a
   11038:	bl	1121c <vetor_criaHeap@@Base>
   1103c:	mov	r4, r0
   11040:	ldr	r2, [pc, #308]	; 1117c <main@@Base+0x25c>
   11044:	ldr	r1, [pc, #348]	; 111a8 <main@@Base+0x288>
   11048:	bl	10e70 <heap_carrega@@Base>
   1104c:	ldr	r1, [r5]
   11050:	ldr	r0, [pc, #340]	; 111ac <main@@Base+0x28c>
   11054:	bl	109fc <printf@plt>
   11058:	mov	r0, r4
   1105c:	bl	113fc <vetor_imprimeHeap@@Base>
   11060:	ldr	r3, [r4]
   11064:	cmp	r3, #42	; 0x2a
   11068:	bne	11158 <main@@Base+0x238>
   1106c:	mov	r1, #0
   11070:	ldr	r0, [pc, #276]	; 1118c <main@@Base+0x26c>
   11074:	bl	109f0 <strcmp@plt>
   11078:	subs	r6, r0, #0
   1107c:	bne	11168 <main@@Base+0x248>
   11080:	ldr	r5, [pc, #248]	; 11180 <main@@Base+0x260>
   11084:	mov	r7, #0
   11088:	str	r7, [r5]
   1108c:	mov	r1, r7
   11090:	ldr	r0, [pc, #280]	; 111b0 <main@@Base+0x290>
   11094:	bl	109fc <printf@plt>
   11098:	str	r7, [r5]
   1109c:	ldr	r9, [pc, #240]	; 11194 <main@@Base+0x274>
   110a0:	ldr	r8, [pc, #256]	; 111a8 <main@@Base+0x288>
   110a4:	mov	r3, #99	; 0x63
   110a8:	mov	r2, r9
   110ac:	mov	r1, r8
   110b0:	mov	r0, r4
   110b4:	bl	10db8 <heap_insere@@Base>
   110b8:	ldr	r1, [r5]
   110bc:	ldr	r0, [pc, #240]	; 111b4 <main@@Base+0x294>
   110c0:	bl	109fc <printf@plt>
   110c4:	str	r7, [r5]
   110c8:	mov	r3, r7
   110cc:	mov	r2, r9
   110d0:	mov	r1, r8
   110d4:	mov	r0, r4
   110d8:	bl	10db8 <heap_insere@@Base>
   110dc:	ldr	r1, [r5]
   110e0:	ldr	r0, [pc, #208]	; 111b8 <main@@Base+0x298>
   110e4:	bl	109fc <printf@plt>
   110e8:	str	r7, [r5]
   110ec:	mov	r3, #42	; 0x2a
   110f0:	mov	r2, r9
   110f4:	mov	r1, r8
   110f8:	mov	r0, r4
   110fc:	bl	10db8 <heap_insere@@Base>
   11100:	ldr	r1, [r5]
   11104:	ldr	r0, [pc, #148]	; 111a0 <main@@Base+0x280>
   11108:	bl	109fc <printf@plt>
   1110c:	mov	r0, #42	; 0x2a
   11110:	bl	1121c <vetor_criaHeap@@Base>
   11114:	ldr	r2, [pc, #96]	; 1117c <main@@Base+0x25c>
   11118:	ldr	r1, [pc, #156]	; 111bc <main@@Base+0x29c>
   1111c:	bl	10e70 <heap_carrega@@Base>
   11120:	ldr	r1, [r5]
   11124:	ldr	r0, [pc, #128]	; 111ac <main@@Base+0x28c>
   11128:	bl	109fc <printf@plt>
   1112c:	mov	r4, #42	; 0x2a
   11130:	mov	r5, r7
   11134:	mov	r0, r5
   11138:	bl	10a50 <puts@plt>
   1113c:	subs	r4, r4, #1
   11140:	bne	11134 <main@@Base+0x214>
   11144:	b	10f74 <main@@Base+0x54>
   11148:	ldr	r0, [pc, #112]	; 111c0 <main@@Base+0x2a0>
   1114c:	bl	10a50 <puts@plt>
   11150:	mov	r6, #1
   11154:	b	10f74 <main@@Base+0x54>
   11158:	ldr	r0, [pc, #100]	; 111c4 <main@@Base+0x2a4>
   1115c:	bl	10a50 <puts@plt>
   11160:	mov	r6, #1
   11164:	b	10f74 <main@@Base+0x54>
   11168:	ldr	r0, [pc, #80]	; 111c0 <main@@Base+0x2a0>
   1116c:	bl	10a50 <puts@plt>
   11170:	mov	r6, #1
   11174:	b	10f74 <main@@Base+0x54>
   11178:	andeq	r1, r1, r4, lsr #10
   1117c:	andeq	r1, r1, ip, asr r5
   11180:	andeq	r2, r2, r8, rrx
   11184:	andeq	r1, r1, r8, ror #10
   11188:	andeq	r1, r1, r0, lsr #11
   1118c:	andeq	r1, r1, r8, asr #11
   11190:	andeq	r1, r1, r0, lsr #12
   11194:	andeq	r1, r1, r4, asr r6
   11198:	andeq	r1, r1, r4, ror #12
   1119c:	andeq	r1, r1, ip, lsr #13
   111a0:	strdeq	r1, [r1], -r4
   111a4:	andeq	r1, r1, ip, lsr r7
   111a8:	andeq	r1, r1, r4, lsr #5
   111ac:	andeq	r1, r1, r4, ror r7
   111b0:	ldrdeq	r1, [r1], -r4
   111b4:	andeq	r1, r1, r8, lsl #16
   111b8:	andeq	r1, r1, r0, asr r8
   111bc:	andeq	r1, r1, ip, lsl #6
   111c0:	ldrdeq	r1, [r1], -ip
   111c4:	andeq	r1, r1, ip, lsr #15

000111c8 <vetor_cria@@Base>:
   111c8:	push	{r4, r5, r6, lr}
   111cc:	mov	r5, r0
   111d0:	mov	r0, #12
   111d4:	bl	10a5c <malloc@plt>
   111d8:	subs	r4, r0, #0
   111dc:	beq	11204 <vetor_cria@@Base+0x3c>
   111e0:	mov	r3, #0
   111e4:	str	r3, [r4]
   111e8:	str	r5, [r4, #4]
   111ec:	mov	r1, #4
   111f0:	mov	r0, r5
   111f4:	bl	109e4 <calloc@plt>
   111f8:	str	r0, [r4, #8]
   111fc:	cmp	r0, #0
   11200:	beq	1120c <vetor_cria@@Base+0x44>
   11204:	mov	r0, r4
   11208:	pop	{r4, r5, r6, pc}
   1120c:	mov	r0, r4
   11210:	bl	10a2c <free@plt>
   11214:	mov	r4, #0
   11218:	b	11204 <vetor_cria@@Base+0x3c>

0001121c <vetor_criaHeap@@Base>:
   1121c:	push	{r4, r5, r6, lr}
   11220:	mov	r5, r0
   11224:	mov	r0, #12
   11228:	bl	10a5c <malloc@plt>
   1122c:	subs	r4, r0, #0
   11230:	beq	11258 <vetor_criaHeap@@Base+0x3c>
   11234:	mov	r3, #0
   11238:	str	r3, [r4]
   1123c:	str	r5, [r4, #4]
   11240:	mov	r1, #4
   11244:	add	r0, r5, #1
   11248:	bl	109e4 <calloc@plt>
   1124c:	str	r0, [r4, #8]
   11250:	cmp	r0, #0
   11254:	beq	11260 <vetor_criaHeap@@Base+0x44>
   11258:	mov	r0, r4
   1125c:	pop	{r4, r5, r6, pc}
   11260:	mov	r0, r4
   11264:	bl	10a2c <free@plt>
   11268:	mov	r4, #0
   1126c:	b	11258 <vetor_criaHeap@@Base+0x3c>

00011270 <elemento_cria@@Base>:
   11270:	push	{r4, r5, r6, lr}
   11274:	mov	r5, r0
   11278:	mov	r6, r1
   1127c:	mov	r0, #8
   11280:	bl	10a5c <malloc@plt>
   11284:	subs	r4, r0, #0
   11288:	beq	1129c <elemento_cria@@Base+0x2c>
   1128c:	mov	r0, r6
   11290:	bl	10a44 <strdup@plt>
   11294:	str	r0, [r4, #4]
   11298:	str	r5, [r4]
   1129c:	mov	r0, r4
   112a0:	pop	{r4, r5, r6, pc}

000112a4 <maior_que@@Base>:
   112a4:	push	{r4, r5, r6, lr}
   112a8:	cmp	r1, #0
   112ac:	cmpne	r0, #0
   112b0:	beq	112f0 <maior_que@@Base+0x4c>
   112b4:	mov	r5, r0
   112b8:	mov	r4, r1
   112bc:	ldr	r3, [pc, #60]	; 11300 <maior_que@@Base+0x5c>
   112c0:	ldr	r0, [r3]
   112c4:	bl	10a20 <fflush@plt>
   112c8:	ldr	r2, [pc, #52]	; 11304 <maior_que@@Base+0x60>
   112cc:	ldr	r3, [r2]
   112d0:	add	r3, r3, #1
   112d4:	str	r3, [r2]
   112d8:	ldr	r0, [r5]
   112dc:	ldr	r3, [r4]
   112e0:	cmp	r0, r3
   112e4:	movle	r0, #0
   112e8:	movgt	r0, #1
   112ec:	pop	{r4, r5, r6, pc}
   112f0:	ldr	r0, [pc, #16]	; 11308 <maior_que@@Base+0x64>
   112f4:	bl	10a50 <puts@plt>
   112f8:	mov	r0, #0
   112fc:	pop	{r4, r5, r6, pc}
   11300:	andeq	r2, r2, r0, rrx
   11304:	andeq	r2, r2, r8, rrx
   11308:	muleq	r1, r8, r8

0001130c <maior_que_HeapSort@@Base>:
   1130c:	push	{r4, r5, r6, lr}
   11310:	cmp	r1, #0
   11314:	cmpne	r0, #0
   11318:	beq	11354 <maior_que_HeapSort@@Base+0x48>
   1131c:	mov	r4, r0
   11320:	mov	r5, r1
   11324:	ldr	r3, [pc, #56]	; 11364 <maior_que_HeapSort@@Base+0x58>
   11328:	ldr	r0, [r3]
   1132c:	bl	10a20 <fflush@plt>
   11330:	ldr	r2, [pc, #48]	; 11368 <maior_que_HeapSort@@Base+0x5c>
   11334:	ldr	r3, [r2]
   11338:	add	r3, r3, #1
   1133c:	str	r3, [r2]
   11340:	ldr	r1, [r5, #4]
   11344:	ldr	r0, [r4, #4]
   11348:	bl	109f0 <strcmp@plt>
   1134c:	lsr	r0, r0, #31
   11350:	pop	{r4, r5, r6, pc}
   11354:	ldr	r0, [pc, #16]	; 1136c <maior_que_HeapSort@@Base+0x60>
   11358:	bl	10a50 <puts@plt>
   1135c:	mov	r0, #0
   11360:	pop	{r4, r5, r6, pc}
   11364:	andeq	r2, r2, r0, rrx
   11368:	andeq	r2, r2, r8, rrx
   1136c:	muleq	r1, r8, r8

00011370 <vetor_imprime@@Base>:
   11370:	push	{r4, r5, r6, lr}
   11374:	ldr	r3, [r0]
   11378:	cmp	r3, #0
   1137c:	ble	113e4 <vetor_imprime@@Base+0x74>
   11380:	mov	r5, r0
   11384:	ldr	r3, [r0, #8]
   11388:	ldr	r3, [r3]
   1138c:	ldr	r2, [r3]
   11390:	ldr	r1, [r3, #4]
   11394:	ldr	r0, [pc, #84]	; 113f0 <vetor_imprime@@Base+0x80>
   11398:	bl	109fc <printf@plt>
   1139c:	ldr	r3, [r5]
   113a0:	cmp	r3, #1
   113a4:	movgt	r4, #1
   113a8:	ldrgt	r6, [pc, #68]	; 113f4 <vetor_imprime@@Base+0x84>
   113ac:	ble	113d8 <vetor_imprime@@Base+0x68>
   113b0:	ldr	r3, [r5, #8]
   113b4:	ldr	r3, [r3, r4, lsl #2]
   113b8:	ldr	r2, [r3]
   113bc:	ldr	r1, [r3, #4]
   113c0:	mov	r0, r6
   113c4:	bl	109fc <printf@plt>
   113c8:	add	r4, r4, #1
   113cc:	ldr	r3, [r5]
   113d0:	cmp	r3, r4
   113d4:	bgt	113b0 <vetor_imprime@@Base+0x40>
   113d8:	mov	r0, #10
   113dc:	bl	10a98 <putchar@plt>
   113e0:	pop	{r4, r5, r6, pc}
   113e4:	ldr	r0, [pc, #12]	; 113f8 <vetor_imprime@@Base+0x88>
   113e8:	bl	10a50 <puts@plt>
   113ec:	pop	{r4, r5, r6, pc}
   113f0:	andeq	r1, r1, r4, lsr #17
   113f4:	ldrdeq	r1, [r1], -ip
   113f8:	andeq	r1, r1, r4, asr #17

000113fc <vetor_imprimeHeap@@Base>:
   113fc:	push	{r4, r5, r6, lr}
   11400:	ldr	r3, [r0]
   11404:	cmp	r3, #0
   11408:	ble	11470 <vetor_imprimeHeap@@Base+0x74>
   1140c:	mov	r5, r0
   11410:	ldr	r3, [r0, #8]
   11414:	ldr	r3, [r3, #4]
   11418:	ldr	r2, [r3]
   1141c:	ldr	r1, [r3, #4]
   11420:	ldr	r0, [pc, #84]	; 1147c <vetor_imprimeHeap@@Base+0x80>
   11424:	bl	109fc <printf@plt>
   11428:	ldr	r3, [r5]
   1142c:	cmp	r3, #2
   11430:	movgt	r4, #2
   11434:	ldrgt	r6, [pc, #68]	; 11480 <vetor_imprimeHeap@@Base+0x84>
   11438:	ble	11464 <vetor_imprimeHeap@@Base+0x68>
   1143c:	ldr	r3, [r5, #8]
   11440:	ldr	r3, [r3, r4, lsl #2]
   11444:	ldr	r2, [r3]
   11448:	ldr	r1, [r3, #4]
   1144c:	mov	r0, r6
   11450:	bl	109fc <printf@plt>
   11454:	add	r4, r4, #1
   11458:	ldr	r3, [r5]
   1145c:	cmp	r3, r4
   11460:	bgt	1143c <vetor_imprimeHeap@@Base+0x40>
   11464:	mov	r0, #10
   11468:	bl	10a98 <putchar@plt>
   1146c:	pop	{r4, r5, r6, pc}
   11470:	ldr	r0, [pc, #12]	; 11484 <vetor_imprimeHeap@@Base+0x88>
   11474:	bl	10a50 <puts@plt>
   11478:	pop	{r4, r5, r6, pc}
   1147c:	andeq	r1, r1, r4, lsr #17
   11480:	ldrdeq	r1, [r1], -ip
   11484:	andeq	r1, r1, r4, asr #17

00011488 <__libc_csu_init@@Base>:
   11488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1148c:	mov	r7, r0
   11490:	ldr	r6, [pc, #72]	; 114e0 <__libc_csu_init@@Base+0x58>
   11494:	ldr	r5, [pc, #72]	; 114e4 <__libc_csu_init@@Base+0x5c>
   11498:	add	r6, pc, r6
   1149c:	add	r5, pc, r5
   114a0:	sub	r6, r6, r5
   114a4:	mov	r8, r1
   114a8:	mov	r9, r2
   114ac:	bl	109c4 <calloc@plt-0x20>
   114b0:	asrs	r6, r6, #2
   114b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   114b8:	mov	r4, #0
   114bc:	add	r4, r4, #1
   114c0:	ldr	r3, [r5], #4
   114c4:	mov	r2, r9
   114c8:	mov	r1, r8
   114cc:	mov	r0, r7
   114d0:	blx	r3
   114d4:	cmp	r6, r4
   114d8:	bne	114bc <__libc_csu_init@@Base+0x34>
   114dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114e0:	andeq	r0, r1, r0, ror sl
   114e4:	andeq	r0, r1, r8, ror #20

000114e8 <__libc_csu_fini@@Base>:
   114e8:	bx	lr

Disassembly of section .fini:

000114ec <.fini>:
   114ec:	push	{r3, lr}
   114f0:	pop	{r3, pc}
