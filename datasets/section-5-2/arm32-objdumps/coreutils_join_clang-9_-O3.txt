
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00011064 <.init>:
   11064:	push	{r3, lr}
   11068:	bl	11390 <__assert_fail@plt+0x48>
   1106c:	pop	{r3, pc}

Disassembly of section .plt:

00011070 <fdopen@plt-0x14>:
   11070:	push	{lr}		; (str lr, [sp, #-4]!)
   11074:	ldr	lr, [pc, #4]	; 11080 <fdopen@plt-0x4>
   11078:	add	lr, pc, lr
   1107c:	ldr	pc, [lr, #8]!
   11080:	andeq	r9, r1, r0, lsl #31

00011084 <fdopen@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #102400	; 0x19000
   1108c:	ldr	pc, [ip, #3968]!	; 0xf80

00011090 <calloc@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #102400	; 0x19000
   11098:	ldr	pc, [ip, #3960]!	; 0xf78

0001109c <fputs_unlocked@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #102400	; 0x19000
   110a4:	ldr	pc, [ip, #3952]!	; 0xf70

000110a8 <raise@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #102400	; 0x19000
   110b0:	ldr	pc, [ip, #3944]!	; 0xf68

000110b4 <strcmp@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #102400	; 0x19000
   110bc:	ldr	pc, [ip, #3936]!	; 0xf60

000110c0 <posix_fadvise64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #102400	; 0x19000
   110c8:	ldr	pc, [ip, #3928]!	; 0xf58

000110cc <fflush@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #102400	; 0x19000
   110d4:	ldr	pc, [ip, #3920]!	; 0xf50

000110d8 <free@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #102400	; 0x19000
   110e0:	ldr	pc, [ip, #3912]!	; 0xf48

000110e4 <_exit@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #102400	; 0x19000
   110ec:	ldr	pc, [ip, #3904]!	; 0xf40

000110f0 <memcpy@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #102400	; 0x19000
   110f8:	ldr	pc, [ip, #3896]!	; 0xf38

000110fc <__strtoull_internal@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #102400	; 0x19000
   11104:	ldr	pc, [ip, #3888]!	; 0xf30

00011108 <mbsinit@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #102400	; 0x19000
   11110:	ldr	pc, [ip, #3880]!	; 0xf28

00011114 <fwrite_unlocked@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #102400	; 0x19000
   1111c:	ldr	pc, [ip, #3872]!	; 0xf20

00011120 <memcmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #102400	; 0x19000
   11128:	ldr	pc, [ip, #3864]!	; 0xf18

0001112c <dcgettext@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #102400	; 0x19000
   11134:	ldr	pc, [ip, #3856]!	; 0xf10

00011138 <realloc@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #102400	; 0x19000
   11140:	ldr	pc, [ip, #3848]!	; 0xf08

00011144 <textdomain@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #102400	; 0x19000
   1114c:	ldr	pc, [ip, #3840]!	; 0xf00

00011150 <iswprint@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #102400	; 0x19000
   11158:	ldr	pc, [ip, #3832]!	; 0xef8

0001115c <fwrite@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #102400	; 0x19000
   11164:	ldr	pc, [ip, #3824]!	; 0xef0

00011168 <lseek64@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #102400	; 0x19000
   11170:	ldr	pc, [ip, #3816]!	; 0xee8

00011174 <__ctype_get_mb_cur_max@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #102400	; 0x19000
   1117c:	ldr	pc, [ip, #3808]!	; 0xee0

00011180 <__fpending@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #102400	; 0x19000
   11188:	ldr	pc, [ip, #3800]!	; 0xed8

0001118c <mbrtowc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #102400	; 0x19000
   11194:	ldr	pc, [ip, #3792]!	; 0xed0

00011198 <error@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #102400	; 0x19000
   111a0:	ldr	pc, [ip, #3784]!	; 0xec8

000111a4 <strcoll@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #102400	; 0x19000
   111ac:	ldr	pc, [ip, #3776]!	; 0xec0

000111b0 <malloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #102400	; 0x19000
   111b8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111bc <__libc_start_main@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #102400	; 0x19000
   111c4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c8 <__freading@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #102400	; 0x19000
   111d0:	ldr	pc, [ip, #3752]!	; 0xea8

000111d4 <__ctype_toupper_loc@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #102400	; 0x19000
   111dc:	ldr	pc, [ip, #3744]!	; 0xea0

000111e0 <__gmon_start__@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #102400	; 0x19000
   111e8:	ldr	pc, [ip, #3736]!	; 0xe98

000111ec <getopt_long@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #102400	; 0x19000
   111f4:	ldr	pc, [ip, #3728]!	; 0xe90

000111f8 <__ctype_b_loc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #102400	; 0x19000
   11200:	ldr	pc, [ip, #3720]!	; 0xe88

00011204 <exit@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #102400	; 0x19000
   1120c:	ldr	pc, [ip, #3712]!	; 0xe80

00011210 <bcmp@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #102400	; 0x19000
   11218:	ldr	pc, [ip, #3704]!	; 0xe78

0001121c <strtoul@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #102400	; 0x19000
   11224:	ldr	pc, [ip, #3696]!	; 0xe70

00011228 <strlen@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #102400	; 0x19000
   11230:	ldr	pc, [ip, #3688]!	; 0xe68

00011234 <strchr@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #102400	; 0x19000
   1123c:	ldr	pc, [ip, #3680]!	; 0xe60

00011240 <__errno_location@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #102400	; 0x19000
   11248:	ldr	pc, [ip, #3672]!	; 0xe58

0001124c <__cxa_atexit@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #102400	; 0x19000
   11254:	ldr	pc, [ip, #3664]!	; 0xe50

00011258 <memset@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #102400	; 0x19000
   11260:	ldr	pc, [ip, #3656]!	; 0xe48

00011264 <__printf_chk@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #102400	; 0x19000
   1126c:	ldr	pc, [ip, #3648]!	; 0xe40

00011270 <fileno@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #102400	; 0x19000
   11278:	ldr	pc, [ip, #3640]!	; 0xe38

0001127c <__fprintf_chk@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #102400	; 0x19000
   11284:	ldr	pc, [ip, #3632]!	; 0xe30

00011288 <memchr@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #102400	; 0x19000
   11290:	ldr	pc, [ip, #3624]!	; 0xe28

00011294 <fclose@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #102400	; 0x19000
   1129c:	ldr	pc, [ip, #3616]!	; 0xe20

000112a0 <fseeko64@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ac <fcntl64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3600]!	; 0xe10

000112b8 <__uflow@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3592]!	; 0xe08

000112c4 <__overflow@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3584]!	; 0xe00

000112d0 <setlocale@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112dc <strrchr@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e8 <nl_langinfo@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3560]!	; 0xde8

000112f4 <fopen64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3552]!	; 0xde0

00011300 <strpbrk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3544]!	; 0xdd8

0001130c <bindtextdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3536]!	; 0xdd0

00011318 <strncmp@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3528]!	; 0xdc8

00011324 <abort@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011330 <close@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3512]!	; 0xdb8

0001133c <putchar_unlocked@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3504]!	; 0xdb0

00011348 <__assert_fail@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3496]!	; 0xda8

Disassembly of section .text:

00011354 <.text>:
   11354:	mov	fp, #0
   11358:	mov	lr, #0
   1135c:	pop	{r1}		; (ldr r1, [sp], #4)
   11360:	mov	r2, sp
   11364:	push	{r2}		; (str r2, [sp, #-4]!)
   11368:	push	{r0}		; (str r0, [sp, #-4]!)
   1136c:	ldr	ip, [pc, #16]	; 11384 <__assert_fail@plt+0x3c>
   11370:	push	{ip}		; (str ip, [sp, #-4]!)
   11374:	ldr	r0, [pc, #12]	; 11388 <__assert_fail@plt+0x40>
   11378:	ldr	r3, [pc, #12]	; 1138c <__assert_fail@plt+0x44>
   1137c:	bl	111bc <__libc_start_main@plt>
   11380:	bl	11324 <abort@plt>
   11384:	andeq	r9, r1, ip
   11388:	andeq	r1, r1, r0, lsr r7
   1138c:	andeq	r8, r1, ip, lsr #31
   11390:	ldr	r3, [pc, #20]	; 113ac <__assert_fail@plt+0x64>
   11394:	ldr	r2, [pc, #20]	; 113b0 <__assert_fail@plt+0x68>
   11398:	add	r3, pc, r3
   1139c:	ldr	r2, [r3, r2]
   113a0:	cmp	r2, #0
   113a4:	bxeq	lr
   113a8:	b	111e0 <__gmon_start__@plt>
   113ac:	andeq	r9, r1, r0, ror #24
   113b0:	strdeq	r0, [r0], -ip
   113b4:	ldr	r0, [pc, #24]	; 113d4 <__assert_fail@plt+0x8c>
   113b8:	ldr	r3, [pc, #24]	; 113d8 <__assert_fail@plt+0x90>
   113bc:	cmp	r3, r0
   113c0:	bxeq	lr
   113c4:	ldr	r3, [pc, #16]	; 113dc <__assert_fail@plt+0x94>
   113c8:	cmp	r3, #0
   113cc:	bxeq	lr
   113d0:	bx	r3
   113d4:	andeq	fp, r2, r0, ror #2
   113d8:	andeq	fp, r2, r0, ror #2
   113dc:	andeq	r0, r0, r0
   113e0:	ldr	r0, [pc, #36]	; 1140c <__assert_fail@plt+0xc4>
   113e4:	ldr	r1, [pc, #36]	; 11410 <__assert_fail@plt+0xc8>
   113e8:	sub	r1, r1, r0
   113ec:	asr	r1, r1, #2
   113f0:	add	r1, r1, r1, lsr #31
   113f4:	asrs	r1, r1, #1
   113f8:	bxeq	lr
   113fc:	ldr	r3, [pc, #16]	; 11414 <__assert_fail@plt+0xcc>
   11400:	cmp	r3, #0
   11404:	bxeq	lr
   11408:	bx	r3
   1140c:	andeq	fp, r2, r0, ror #2
   11410:	andeq	fp, r2, r0, ror #2
   11414:	andeq	r0, r0, r0
   11418:	push	{r4, lr}
   1141c:	ldr	r4, [pc, #24]	; 1143c <__assert_fail@plt+0xf4>
   11420:	ldrb	r3, [r4]
   11424:	cmp	r3, #0
   11428:	popne	{r4, pc}
   1142c:	bl	113b4 <__assert_fail@plt+0x6c>
   11430:	mov	r3, #1
   11434:	strb	r3, [r4]
   11438:	pop	{r4, pc}
   1143c:	andeq	fp, r2, r4, lsl #3
   11440:	b	113e0 <__assert_fail@plt+0x98>
   11444:	push	{fp, lr}
   11448:	mov	fp, sp
   1144c:	sub	sp, sp, #56	; 0x38
   11450:	mov	r4, r0
   11454:	cmp	r0, #0
   11458:	bne	116ec <__assert_fail@plt+0x3a4>
   1145c:	movw	r1, #36955	; 0x905b
   11460:	mov	r0, #0
   11464:	mov	r2, #5
   11468:	movt	r1, #1
   1146c:	bl	1112c <dcgettext@plt>
   11470:	mov	r1, r0
   11474:	movw	r0, #45560	; 0xb1f8
   11478:	movt	r0, #2
   1147c:	ldr	r2, [r0]
   11480:	mov	r0, #1
   11484:	bl	11264 <__printf_chk@plt>
   11488:	movw	r1, #36990	; 0x907e
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	1112c <dcgettext@plt>
   1149c:	movw	r7, #45436	; 0xb17c
   114a0:	movt	r7, #2
   114a4:	ldr	r1, [r7]
   114a8:	bl	1109c <fputs_unlocked@plt>
   114ac:	movw	r1, #37140	; 0x9114
   114b0:	mov	r0, #0
   114b4:	mov	r2, #5
   114b8:	movt	r1, #1
   114bc:	bl	1112c <dcgettext@plt>
   114c0:	ldr	r1, [r7]
   114c4:	bl	1109c <fputs_unlocked@plt>
   114c8:	movw	r1, #37200	; 0x9150
   114cc:	mov	r0, #0
   114d0:	mov	r2, #5
   114d4:	movt	r1, #1
   114d8:	bl	1112c <dcgettext@plt>
   114dc:	ldr	r1, [r7]
   114e0:	bl	1109c <fputs_unlocked@plt>
   114e4:	movw	r1, #37423	; 0x922f
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	movt	r1, #1
   114f4:	bl	1112c <dcgettext@plt>
   114f8:	ldr	r1, [r7]
   114fc:	bl	1109c <fputs_unlocked@plt>
   11500:	movw	r1, #37695	; 0x933f
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	1112c <dcgettext@plt>
   11514:	ldr	r1, [r7]
   11518:	bl	1109c <fputs_unlocked@plt>
   1151c:	movw	r1, #38226	; 0x9552
   11520:	mov	r0, #0
   11524:	mov	r2, #5
   11528:	movt	r1, #1
   1152c:	bl	1112c <dcgettext@plt>
   11530:	ldr	r1, [r7]
   11534:	bl	1109c <fputs_unlocked@plt>
   11538:	movw	r1, #38287	; 0x958f
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	movt	r1, #1
   11548:	bl	1112c <dcgettext@plt>
   1154c:	ldr	r1, [r7]
   11550:	bl	1109c <fputs_unlocked@plt>
   11554:	movw	r1, #38332	; 0x95bc
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	movt	r1, #1
   11564:	bl	1112c <dcgettext@plt>
   11568:	ldr	r1, [r7]
   1156c:	bl	1109c <fputs_unlocked@plt>
   11570:	movw	r1, #38386	; 0x95f2
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	movt	r1, #1
   11580:	bl	1112c <dcgettext@plt>
   11584:	ldr	r1, [r7]
   11588:	bl	1109c <fputs_unlocked@plt>
   1158c:	movw	r0, #40168	; 0x9ce8
   11590:	mov	r2, #48	; 0x30
   11594:	mov	r6, sp
   11598:	movw	r5, #39204	; 0x9924
   1159c:	movt	r0, #1
   115a0:	movt	r5, #1
   115a4:	add	r1, r0, #32
   115a8:	add	r3, r0, #16
   115ac:	vld1.64	{d18-d19}, [r0], r2
   115b0:	vld1.64	{d16-d17}, [r1]
   115b4:	vld1.64	{d20-d21}, [r3]
   115b8:	vldr	d22, [r0]
   115bc:	add	r1, r6, #32
   115c0:	add	r0, r6, #16
   115c4:	vst1.64	{d16-d17}, [r1]
   115c8:	movw	r1, #39504	; 0x9a50
   115cc:	vst1.64	{d20-d21}, [r0]
   115d0:	mov	r0, r6
   115d4:	movt	r1, #1
   115d8:	vst1.64	{d18-d19}, [r0], r2
   115dc:	vstr	d22, [r0]
   115e0:	mov	r0, r5
   115e4:	bl	110b4 <strcmp@plt>
   115e8:	cmp	r0, #0
   115ec:	ldrne	r1, [r6, #8]!
   115f0:	cmpne	r1, #0
   115f4:	bne	115e0 <__assert_fail@plt+0x298>
   115f8:	movw	r1, #39599	; 0x9aaf
   115fc:	ldr	r6, [r6, #4]
   11600:	mov	r0, #0
   11604:	mov	r2, #5
   11608:	movt	r1, #1
   1160c:	bl	1112c <dcgettext@plt>
   11610:	movw	r2, #39371	; 0x99cb
   11614:	movw	r3, #39622	; 0x9ac6
   11618:	mov	r1, r0
   1161c:	mov	r0, #1
   11620:	movt	r2, #1
   11624:	movt	r3, #1
   11628:	bl	11264 <__printf_chk@plt>
   1162c:	cmp	r6, #0
   11630:	mov	r0, #5
   11634:	mov	r1, #0
   11638:	moveq	r6, r5
   1163c:	bl	112d0 <setlocale@plt>
   11640:	cmp	r0, #0
   11644:	beq	1167c <__assert_fail@plt+0x334>
   11648:	movw	r1, #39662	; 0x9aee
   1164c:	mov	r2, #3
   11650:	movt	r1, #1
   11654:	bl	11318 <strncmp@plt>
   11658:	cmp	r0, #0
   1165c:	beq	1167c <__assert_fail@plt+0x334>
   11660:	movw	r1, #39666	; 0x9af2
   11664:	mov	r0, #0
   11668:	mov	r2, #5
   1166c:	movt	r1, #1
   11670:	bl	1112c <dcgettext@plt>
   11674:	ldr	r1, [r7]
   11678:	bl	1109c <fputs_unlocked@plt>
   1167c:	movw	r1, #39737	; 0x9b39
   11680:	mov	r0, #0
   11684:	mov	r2, #5
   11688:	movt	r1, #1
   1168c:	bl	1112c <dcgettext@plt>
   11690:	movw	r2, #39622	; 0x9ac6
   11694:	mov	r1, r0
   11698:	mov	r0, #1
   1169c:	mov	r3, r5
   116a0:	movt	r2, #1
   116a4:	bl	11264 <__printf_chk@plt>
   116a8:	movw	r1, #39764	; 0x9b54
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	1112c <dcgettext@plt>
   116bc:	mov	r1, r0
   116c0:	movw	r0, #39532	; 0x9a6c
   116c4:	movw	r3, #39914	; 0x9bea
   116c8:	cmp	r6, r5
   116cc:	mov	r2, r6
   116d0:	movt	r0, #1
   116d4:	movt	r3, #1
   116d8:	moveq	r3, r0
   116dc:	mov	r0, #1
   116e0:	bl	11264 <__printf_chk@plt>
   116e4:	mov	r0, r4
   116e8:	bl	11204 <exit@plt>
   116ec:	movw	r0, #45424	; 0xb170
   116f0:	movw	r1, #36916	; 0x9034
   116f4:	mov	r2, #5
   116f8:	movt	r0, #2
   116fc:	movt	r1, #1
   11700:	ldr	r5, [r0]
   11704:	mov	r0, #0
   11708:	bl	1112c <dcgettext@plt>
   1170c:	mov	r2, r0
   11710:	movw	r0, #45560	; 0xb1f8
   11714:	mov	r1, #1
   11718:	movt	r0, #2
   1171c:	ldr	r3, [r0]
   11720:	mov	r0, r5
   11724:	bl	1127c <__fprintf_chk@plt>
   11728:	mov	r0, r4
   1172c:	bl	11204 <exit@plt>
   11730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11734:	add	fp, sp, #28
   11738:	sub	sp, sp, #84	; 0x54
   1173c:	mov	r6, #0
   11740:	mov	r9, r0
   11744:	mov	sl, r1
   11748:	str	r6, [sp, #48]	; 0x30
   1174c:	str	r6, [sp, #36]	; 0x24
   11750:	str	r6, [sp, #32]
   11754:	str	r6, [sp, #28]
   11758:	ldr	r0, [r1]
   1175c:	bl	1445c <__assert_fail@plt+0x3114>
   11760:	movw	r1, #39914	; 0x9bea
   11764:	mov	r0, #6
   11768:	movt	r1, #1
   1176c:	bl	112d0 <setlocale@plt>
   11770:	movw	r5, #39375	; 0x99cf
   11774:	movw	r1, #39209	; 0x9929
   11778:	movt	r5, #1
   1177c:	movt	r1, #1
   11780:	mov	r0, r5
   11784:	bl	1130c <bindtextdomain@plt>
   11788:	mov	r0, r5
   1178c:	bl	11144 <textdomain@plt>
   11790:	mov	r0, #3
   11794:	bl	1417c <__assert_fail@plt+0x2e34>
   11798:	movw	r4, #45448	; 0xb188
   1179c:	movt	r4, #2
   117a0:	strb	r0, [r4]
   117a4:	movw	r0, #15832	; 0x3dd8
   117a8:	movt	r0, #1
   117ac:	bl	19010 <__assert_fail@plt+0x7cc8>
   117b0:	movw	r0, #12436	; 0x3094
   117b4:	movt	r0, #1
   117b8:	bl	19010 <__assert_fail@plt+0x7cc8>
   117bc:	movw	r2, #39233	; 0x9941
   117c0:	movw	r3, #40040	; 0x9c68
   117c4:	mov	r5, #1
   117c8:	mov	r0, r9
   117cc:	mov	r1, sl
   117d0:	str	r6, [sp]
   117d4:	movt	r2, #1
   117d8:	movt	r3, #1
   117dc:	strh	r5, [r4, #1]
   117e0:	str	r6, [r4, #12]
   117e4:	strh	r6, [r4, #9]
   117e8:	bl	111ec <getopt_long@plt>
   117ec:	movw	r4, #45416	; 0xb168
   117f0:	movw	r8, #45324	; 0xb10c
   117f4:	cmn	r0, #1
   117f8:	movt	r4, #2
   117fc:	movt	r8, #2
   11800:	beq	11eb0 <__assert_fail@plt+0xb68>
   11804:	movw	r7, #39233	; 0x9941
   11808:	movt	r7, #1
   1180c:	cmp	r0, #255	; 0xff
   11810:	str	r6, [sp, #52]	; 0x34
   11814:	ble	11860 <__assert_fail@plt+0x518>
   11818:	b	11aa0 <__assert_fail@plt+0x758>
   1181c:	movw	r0, #45448	; 0xb188
   11820:	movt	r0, #2
   11824:	str	r5, [r0, #12]
   11828:	mov	r0, #0
   1182c:	movw	r3, #40040	; 0x9c68
   11830:	str	r0, [sp, #48]	; 0x30
   11834:	mov	r0, r9
   11838:	mov	r1, sl
   1183c:	mov	r2, r7
   11840:	str	r6, [sp]
   11844:	movt	r3, #1
   11848:	bl	111ec <getopt_long@plt>
   1184c:	cmn	r0, #1
   11850:	beq	11eb0 <__assert_fail@plt+0xb68>
   11854:	cmp	r0, #255	; 0xff
   11858:	str	r6, [sp, #52]	; 0x34
   1185c:	bgt	11aa0 <__assert_fail@plt+0x758>
   11860:	add	r0, r0, #3
   11864:	cmp	r0, #125	; 0x7d
   11868:	bhi	1308c <__assert_fail@plt+0x1d44>
   1186c:	add	r1, pc, #0
   11870:	ldr	pc, [r1, r0, lsl #2]
   11874:	andeq	r2, r1, r0, ror #28
   11878:	andeq	r2, r1, r8, lsr #29
   1187c:	andeq	r3, r1, ip, lsl #1
   11880:	andeq	r3, r1, ip, lsl #1
   11884:	andeq	r1, r1, ip, ror #20
   11888:	andeq	r3, r1, ip, lsl #1
   1188c:	andeq	r3, r1, ip, lsl #1
   11890:	andeq	r3, r1, ip, lsl #1
   11894:	andeq	r3, r1, ip, lsl #1
   11898:	andeq	r3, r1, ip, lsl #1
   1189c:	andeq	r3, r1, ip, lsl #1
   118a0:	andeq	r3, r1, ip, lsl #1
   118a4:	andeq	r3, r1, ip, lsl #1
   118a8:	andeq	r3, r1, ip, lsl #1
   118ac:	andeq	r3, r1, ip, lsl #1
   118b0:	andeq	r3, r1, ip, lsl #1
   118b4:	andeq	r3, r1, ip, lsl #1
   118b8:	andeq	r3, r1, ip, lsl #1
   118bc:	andeq	r3, r1, ip, lsl #1
   118c0:	andeq	r3, r1, ip, lsl #1
   118c4:	andeq	r3, r1, ip, lsl #1
   118c8:	andeq	r3, r1, ip, lsl #1
   118cc:	andeq	r3, r1, ip, lsl #1
   118d0:	andeq	r3, r1, ip, lsl #1
   118d4:	andeq	r3, r1, ip, lsl #1
   118d8:	andeq	r3, r1, ip, lsl #1
   118dc:	andeq	r3, r1, ip, lsl #1
   118e0:	andeq	r3, r1, ip, lsl #1
   118e4:	andeq	r3, r1, ip, lsl #1
   118e8:	andeq	r3, r1, ip, lsl #1
   118ec:	andeq	r3, r1, ip, lsl #1
   118f0:	andeq	r3, r1, ip, lsl #1
   118f4:	andeq	r3, r1, ip, lsl #1
   118f8:	andeq	r3, r1, ip, lsl #1
   118fc:	andeq	r3, r1, ip, lsl #1
   11900:	andeq	r3, r1, ip, lsl #1
   11904:	andeq	r3, r1, ip, lsl #1
   11908:	andeq	r3, r1, ip, lsl #1
   1190c:	andeq	r3, r1, ip, lsl #1
   11910:	andeq	r3, r1, ip, lsl #1
   11914:	andeq	r3, r1, ip, lsl #1
   11918:	andeq	r3, r1, ip, lsl #1
   1191c:	andeq	r3, r1, ip, lsl #1
   11920:	andeq	r3, r1, ip, lsl #1
   11924:	andeq	r3, r1, ip, lsl #1
   11928:	andeq	r3, r1, ip, lsl #1
   1192c:	andeq	r3, r1, ip, lsl #1
   11930:	andeq	r3, r1, ip, lsl #1
   11934:	andeq	r3, r1, ip, lsl #1
   11938:	andeq	r3, r1, ip, lsl #1
   1193c:	andeq	r3, r1, ip, lsl #1
   11940:	andeq	r3, r1, ip, lsl #1
   11944:			; <UNDEFINED> instruction: 0x00011bb0
   11948:	andeq	r1, r1, ip, lsl #24
   1194c:	andeq	r3, r1, ip, lsl #1
   11950:	andeq	r3, r1, ip, lsl #1
   11954:	andeq	r3, r1, ip, lsl #1
   11958:	andeq	r3, r1, ip, lsl #1
   1195c:	andeq	r3, r1, ip, lsl #1
   11960:	andeq	r3, r1, ip, lsl #1
   11964:	andeq	r3, r1, ip, lsl #1
   11968:	andeq	r3, r1, ip, lsl #1
   1196c:	andeq	r3, r1, ip, lsl #1
   11970:	andeq	r3, r1, ip, lsl #1
   11974:	andeq	r3, r1, ip, lsl #1
   11978:	andeq	r3, r1, ip, lsl #1
   1197c:	andeq	r3, r1, ip, lsl #1
   11980:	andeq	r3, r1, ip, lsl #1
   11984:	andeq	r3, r1, ip, lsl #1
   11988:	andeq	r3, r1, ip, lsl #1
   1198c:	andeq	r3, r1, ip, lsl #1
   11990:	andeq	r3, r1, ip, lsl #1
   11994:	andeq	r3, r1, ip, lsl #1
   11998:	andeq	r3, r1, ip, lsl #1
   1199c:	andeq	r3, r1, ip, lsl #1
   119a0:	andeq	r3, r1, ip, lsl #1
   119a4:	andeq	r3, r1, ip, lsl #1
   119a8:	andeq	r3, r1, ip, lsl #1
   119ac:	andeq	r3, r1, ip, lsl #1
   119b0:	andeq	r3, r1, ip, lsl #1
   119b4:	andeq	r3, r1, ip, lsl #1
   119b8:	andeq	r3, r1, ip, lsl #1
   119bc:	andeq	r3, r1, ip, lsl #1
   119c0:	andeq	r3, r1, ip, lsl #1
   119c4:	andeq	r3, r1, ip, lsl #1
   119c8:	andeq	r3, r1, ip, lsl #1
   119cc:	andeq	r3, r1, ip, lsl #1
   119d0:	andeq	r3, r1, ip, lsl #1
   119d4:	andeq	r3, r1, ip, lsl #1
   119d8:	andeq	r3, r1, ip, lsl #1
   119dc:	andeq	r3, r1, ip, lsl #1
   119e0:	andeq	r3, r1, ip, lsl #1
   119e4:	andeq	r3, r1, ip, lsl #1
   119e8:	andeq	r3, r1, ip, lsl #1
   119ec:	andeq	r3, r1, ip, lsl #1
   119f0:	andeq	r3, r1, ip, lsl #1
   119f4:	andeq	r3, r1, ip, lsl #1
   119f8:	andeq	r3, r1, ip, lsl #1
   119fc:	andeq	r3, r1, ip, lsl #1
   11a00:	andeq	r3, r1, ip, lsl #1
   11a04:	andeq	r1, r1, ip, lsl sp
   11a08:	andeq	r3, r1, ip, lsl #1
   11a0c:	andeq	r3, r1, ip, lsl #1
   11a10:	andeq	r3, r1, ip, lsl #1
   11a14:	muleq	r1, r4, ip
   11a18:	andeq	r3, r1, ip, lsl #1
   11a1c:	andeq	r3, r1, ip, lsl #1
   11a20:	andeq	r3, r1, ip, lsl #1
   11a24:	andeq	r1, r1, r8, asr #25
   11a28:	andeq	r1, r1, r8, asr #21
   11a2c:	andeq	r3, r1, ip, lsl #1
   11a30:	andeq	r3, r1, ip, lsl #1
   11a34:	andeq	r3, r1, ip, lsl #1
   11a38:	andeq	r3, r1, ip, lsl #1
   11a3c:	ldrdeq	r1, [r1], -r8
   11a40:	andeq	r3, r1, ip, lsl #1
   11a44:	andeq	r3, r1, ip, lsl #1
   11a48:	andeq	r3, r1, ip, lsl #1
   11a4c:	andeq	r3, r1, ip, lsl #1
   11a50:	andeq	r1, r1, ip, asr fp
   11a54:	andeq	r3, r1, ip, lsl #1
   11a58:	andeq	r1, r1, r0, lsl sp
   11a5c:	andeq	r3, r1, ip, lsl #1
   11a60:	andeq	r3, r1, ip, lsl #1
   11a64:	andeq	r3, r1, ip, lsl #1
   11a68:	andeq	r1, r1, r8, ror #24
   11a6c:	movw	r0, #45440	; 0xb180
   11a70:	add	r1, sp, #48	; 0x30
   11a74:	add	r2, sp, #32
   11a78:	add	r3, sp, #28
   11a7c:	movt	r0, #2
   11a80:	str	r1, [sp]
   11a84:	add	r1, sp, #52	; 0x34
   11a88:	str	r1, [sp, #4]
   11a8c:	add	r1, sp, #40	; 0x28
   11a90:	ldr	r0, [r0]
   11a94:	bl	13268 <__assert_fail@plt+0x1f20>
   11a98:	ldr	r0, [sp, #52]	; 0x34
   11a9c:	b	1182c <__assert_fail@plt+0x4e4>
   11aa0:	cmp	r0, #256	; 0x100
   11aa4:	beq	1181c <__assert_fail@plt+0x4d4>
   11aa8:	movw	r1, #257	; 0x101
   11aac:	cmp	r0, r1
   11ab0:	bne	11c78 <__assert_fail@plt+0x930>
   11ab4:	movw	r0, #45448	; 0xb188
   11ab8:	mov	r1, #2
   11abc:	movt	r0, #2
   11ac0:	str	r1, [r0, #12]
   11ac4:	b	11828 <__assert_fail@plt+0x4e0>
   11ac8:	movw	r0, #45440	; 0xb180
   11acc:	movt	r0, #2
   11ad0:	ldr	r5, [r0]
   11ad4:	ldrb	r0, [r5]
   11ad8:	sub	r1, r0, #49	; 0x31
   11adc:	uxtb	r1, r1
   11ae0:	cmp	r1, #1
   11ae4:	bhi	11b0c <__assert_fail@plt+0x7c4>
   11ae8:	ldrb	r1, [r5, #1]
   11aec:	cmp	r1, #0
   11af0:	bne	11b0c <__assert_fail@plt+0x7c4>
   11af4:	ldr	r1, [r4]
   11af8:	add	r1, sl, r1, lsl #2
   11afc:	ldr	r1, [r1, #-4]
   11b00:	add	r1, r1, #2
   11b04:	cmp	r5, r1
   11b08:	beq	11e7c <__assert_fail@plt+0xb34>
   11b0c:	movw	r0, #39914	; 0x9bea
   11b10:	mov	r1, #0
   11b14:	mov	r2, #10
   11b18:	sub	r3, fp, #40	; 0x28
   11b1c:	movt	r0, #1
   11b20:	str	r0, [sp]
   11b24:	mov	r0, r5
   11b28:	bl	17b84 <__assert_fail@plt+0x683c>
   11b2c:	cmp	r0, #1
   11b30:	beq	11b4c <__assert_fail@plt+0x804>
   11b34:	ldr	r7, [fp, #-40]	; 0xffffffd8
   11b38:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b3c:	cmp	r0, #0
   11b40:	bne	11e24 <__assert_fail@plt+0xadc>
   11b44:	cmp	r1, #0
   11b48:	beq	11e24 <__assert_fail@plt+0xadc>
   11b4c:	mvn	r7, #0
   11b50:	str	r6, [fp, #-36]	; 0xffffffdc
   11b54:	str	r7, [fp, #-40]	; 0xffffffd8
   11b58:	b	11e34 <__assert_fail@plt+0xaec>
   11b5c:	movw	r0, #45440	; 0xb180
   11b60:	movt	r0, #2
   11b64:	ldr	r0, [r0]
   11b68:	ldrb	r1, [r0]
   11b6c:	cmp	r1, #0
   11b70:	beq	11d78 <__assert_fail@plt+0xa30>
   11b74:	ldrb	r2, [r0, #1]
   11b78:	cmp	r2, #0
   11b7c:	beq	11b98 <__assert_fail@plt+0x850>
   11b80:	movw	r1, #39327	; 0x999f
   11b84:	movt	r1, #1
   11b88:	bl	110b4 <strcmp@plt>
   11b8c:	mov	r1, #0
   11b90:	cmp	r0, #0
   11b94:	bne	12f8c <__assert_fail@plt+0x1c44>
   11b98:	ldr	r0, [r8, #8]
   11b9c:	cmp	r0, #0
   11ba0:	bmi	11d88 <__assert_fail@plt+0xa40>
   11ba4:	cmp	r0, r1
   11ba8:	beq	11d88 <__assert_fail@plt+0xa40>
   11bac:	b	12f98 <__assert_fail@plt+0x1c50>
   11bb0:	movw	r0, #45440	; 0xb180
   11bb4:	mov	r1, #0
   11bb8:	mov	r2, #10
   11bbc:	sub	r3, fp, #40	; 0x28
   11bc0:	movt	r0, #2
   11bc4:	ldr	r7, [r0]
   11bc8:	movw	r0, #39914	; 0x9bea
   11bcc:	movt	r0, #1
   11bd0:	str	r0, [sp]
   11bd4:	mov	r0, r7
   11bd8:	bl	17b84 <__assert_fail@plt+0x683c>
   11bdc:	cmp	r0, #1
   11be0:	beq	11bfc <__assert_fail@plt+0x8b4>
   11be4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11be8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11bec:	cmp	r0, #0
   11bf0:	bne	11dc0 <__assert_fail@plt+0xa78>
   11bf4:	cmp	r1, #0
   11bf8:	beq	11dc0 <__assert_fail@plt+0xa78>
   11bfc:	mvn	r5, #0
   11c00:	str	r6, [fp, #-36]	; 0xffffffdc
   11c04:	str	r5, [fp, #-40]	; 0xffffffd8
   11c08:	b	11dd0 <__assert_fail@plt+0xa88>
   11c0c:	movw	r0, #45440	; 0xb180
   11c10:	mov	r1, #0
   11c14:	mov	r2, #10
   11c18:	sub	r3, fp, #40	; 0x28
   11c1c:	movt	r0, #2
   11c20:	ldr	r7, [r0]
   11c24:	movw	r0, #39914	; 0x9bea
   11c28:	movt	r0, #1
   11c2c:	str	r0, [sp]
   11c30:	mov	r0, r7
   11c34:	bl	17b84 <__assert_fail@plt+0x683c>
   11c38:	cmp	r0, #1
   11c3c:	beq	11c58 <__assert_fail@plt+0x910>
   11c40:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11c44:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11c48:	cmp	r0, #0
   11c4c:	bne	11dec <__assert_fail@plt+0xaa4>
   11c50:	cmp	r1, #0
   11c54:	beq	11dec <__assert_fail@plt+0xaa4>
   11c58:	mvn	r5, #0
   11c5c:	str	r6, [fp, #-36]	; 0xffffffdc
   11c60:	str	r5, [fp, #-40]	; 0xffffffd8
   11c64:	b	11dfc <__assert_fail@plt+0xab4>
   11c68:	movw	r0, #45448	; 0xb188
   11c6c:	movt	r0, #2
   11c70:	strb	r5, [r0, #7]
   11c74:	b	11828 <__assert_fail@plt+0x4e0>
   11c78:	movw	r1, #258	; 0x102
   11c7c:	cmp	r0, r1
   11c80:	bne	1308c <__assert_fail@plt+0x1d44>
   11c84:	movw	r0, #45448	; 0xb188
   11c88:	movt	r0, #2
   11c8c:	strb	r5, [r0, #8]
   11c90:	b	11828 <__assert_fail@plt+0x4e0>
   11c94:	movw	r0, #45448	; 0xb188
   11c98:	movt	r0, #2
   11c9c:	ldr	r0, [r0, #16]
   11ca0:	cmp	r0, #0
   11ca4:	beq	11d90 <__assert_fail@plt+0xa48>
   11ca8:	movw	r1, #45440	; 0xb180
   11cac:	movt	r1, #2
   11cb0:	ldr	r7, [r1]
   11cb4:	mov	r1, r7
   11cb8:	bl	110b4 <strcmp@plt>
   11cbc:	cmp	r0, #0
   11cc0:	beq	11d9c <__assert_fail@plt+0xa54>
   11cc4:	b	12fa4 <__assert_fail@plt+0x1c5c>
   11cc8:	movw	r0, #45448	; 0xb188
   11ccc:	movt	r0, #2
   11cd0:	strb	r5, [r0, #5]
   11cd4:	b	11828 <__assert_fail@plt+0x4e0>
   11cd8:	movw	r0, #45440	; 0xb180
   11cdc:	movw	r1, #39322	; 0x999a
   11ce0:	movt	r0, #2
   11ce4:	movt	r1, #1
   11ce8:	ldr	r7, [r0]
   11cec:	mov	r0, r7
   11cf0:	bl	110b4 <strcmp@plt>
   11cf4:	cmp	r0, #0
   11cf8:	beq	11dac <__assert_fail@plt+0xa64>
   11cfc:	mov	r0, r7
   11d00:	bl	1310c <__assert_fail@plt+0x1dc4>
   11d04:	mov	r0, #3
   11d08:	str	r0, [sp, #52]	; 0x34
   11d0c:	b	11e70 <__assert_fail@plt+0xb28>
   11d10:	movw	r0, #45448	; 0xb188
   11d14:	movt	r0, #2
   11d18:	strb	r6, [r0, #1]
   11d1c:	movw	r0, #45440	; 0xb180
   11d20:	movw	r1, #39914	; 0x9bea
   11d24:	mov	r2, #10
   11d28:	sub	r3, fp, #40	; 0x28
   11d2c:	movt	r0, #2
   11d30:	movt	r1, #1
   11d34:	ldr	r0, [r0]
   11d38:	str	r1, [sp]
   11d3c:	mov	r1, #0
   11d40:	bl	17304 <__assert_fail@plt+0x5fbc>
   11d44:	cmp	r0, #0
   11d48:	bne	12eb0 <__assert_fail@plt+0x1b68>
   11d4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11d50:	sub	r1, r0, #1
   11d54:	cmp	r1, #2
   11d58:	bcs	12eb0 <__assert_fail@plt+0x1b68>
   11d5c:	movw	r1, #45448	; 0xb188
   11d60:	cmp	r0, #1
   11d64:	mov	r0, #4
   11d68:	movt	r1, #2
   11d6c:	movweq	r0, #3
   11d70:	strb	r5, [r1, r0]
   11d74:	b	11828 <__assert_fail@plt+0x4e0>
   11d78:	mov	r1, #10
   11d7c:	ldr	r0, [r8, #8]
   11d80:	cmp	r0, #0
   11d84:	bpl	11ba4 <__assert_fail@plt+0x85c>
   11d88:	str	r1, [r8, #8]
   11d8c:	b	11828 <__assert_fail@plt+0x4e0>
   11d90:	movw	r0, #45440	; 0xb180
   11d94:	movt	r0, #2
   11d98:	ldr	r7, [r0]
   11d9c:	movw	r0, #45448	; 0xb188
   11da0:	movt	r0, #2
   11da4:	str	r7, [r0, #16]
   11da8:	b	11db8 <__assert_fail@plt+0xa70>
   11dac:	movw	r0, #45448	; 0xb188
   11db0:	movt	r0, #2
   11db4:	strb	r5, [r0, #6]
   11db8:	mov	r0, #0
   11dbc:	b	11e70 <__assert_fail@plt+0xb28>
   11dc0:	cmp	r0, #0
   11dc4:	bne	12fb0 <__assert_fail@plt+0x1c68>
   11dc8:	orrs	r0, r5, r1
   11dcc:	beq	12fb0 <__assert_fail@plt+0x1c68>
   11dd0:	ldr	r4, [r8]
   11dd4:	sub	r0, r5, #1
   11dd8:	cmn	r4, #1
   11ddc:	cmpne	r4, r0
   11de0:	bne	12ffc <__assert_fail@plt+0x1cb4>
   11de4:	str	r0, [r8]
   11de8:	b	11e14 <__assert_fail@plt+0xacc>
   11dec:	cmp	r0, #0
   11df0:	bne	12fb0 <__assert_fail@plt+0x1c68>
   11df4:	orrs	r0, r5, r1
   11df8:	beq	12fb0 <__assert_fail@plt+0x1c68>
   11dfc:	ldr	r4, [r8, #4]
   11e00:	sub	r0, r5, #1
   11e04:	cmn	r4, #1
   11e08:	cmpne	r4, r0
   11e0c:	bne	12ffc <__assert_fail@plt+0x1cb4>
   11e10:	str	r0, [r8, #4]
   11e14:	movw	r4, #45416	; 0xb168
   11e18:	mov	r0, #0
   11e1c:	mov	r5, #1
   11e20:	b	11e6c <__assert_fail@plt+0xb24>
   11e24:	cmp	r0, #0
   11e28:	bne	12fd0 <__assert_fail@plt+0x1c88>
   11e2c:	orrs	r0, r7, r1
   11e30:	beq	12fd0 <__assert_fail@plt+0x1c88>
   11e34:	ldr	r4, [r8]
   11e38:	sub	r0, r7, #1
   11e3c:	cmn	r4, #1
   11e40:	cmpne	r4, r0
   11e44:	bne	12eec <__assert_fail@plt+0x1ba4>
   11e48:	str	r0, [r8]
   11e4c:	mov	r5, #1
   11e50:	ldr	r4, [r8, #4]
   11e54:	cmn	r4, #1
   11e58:	cmpne	r4, r0
   11e5c:	bne	12eec <__assert_fail@plt+0x1ba4>
   11e60:	movw	r4, #45416	; 0xb168
   11e64:	str	r0, [r8, #4]
   11e68:	mov	r0, #0
   11e6c:	movt	r4, #2
   11e70:	movw	r7, #39233	; 0x9941
   11e74:	movt	r7, #1
   11e78:	b	1182c <__assert_fail@plt+0x4e4>
   11e7c:	subs	r0, r0, #50	; 0x32
   11e80:	add	r1, sp, #32
   11e84:	mov	r5, #1
   11e88:	clz	r0, r0
   11e8c:	lsr	r0, r0, #5
   11e90:	orr	r0, r1, r0, lsl #2
   11e94:	ldr	r1, [r0]
   11e98:	add	r1, r1, #1
   11e9c:	str	r1, [r0]
   11ea0:	mov	r0, #1
   11ea4:	movweq	r0, #2
   11ea8:	str	r0, [sp, #52]	; 0x34
   11eac:	b	1182c <__assert_fail@plt+0x4e4>
   11eb0:	ldr	r0, [r4]
   11eb4:	str	r6, [sp, #48]	; 0x30
   11eb8:	cmp	r0, r9
   11ebc:	bge	11f04 <__assert_fail@plt+0xbbc>
   11ec0:	add	r8, sp, #48	; 0x30
   11ec4:	add	r6, sp, #40	; 0x28
   11ec8:	add	r7, sp, #32
   11ecc:	add	r5, sp, #28
   11ed0:	add	r1, r0, #1
   11ed4:	mov	r2, r7
   11ed8:	mov	r3, r5
   11edc:	str	r1, [r4]
   11ee0:	add	r1, sp, #52	; 0x34
   11ee4:	ldr	r0, [sl, r0, lsl #2]
   11ee8:	str	r1, [sp, #4]
   11eec:	mov	r1, r6
   11ef0:	str	r8, [sp]
   11ef4:	bl	13268 <__assert_fail@plt+0x1f20>
   11ef8:	ldr	r0, [r4]
   11efc:	cmp	r0, r9
   11f00:	blt	11ed0 <__assert_fail@plt+0xb88>
   11f04:	ldr	r0, [sp, #28]
   11f08:	cmp	r0, #2
   11f0c:	bne	12f18 <__assert_fail@plt+0x1bd0>
   11f10:	ldr	r0, [sp, #32]
   11f14:	movw	r9, #45448	; 0xb188
   11f18:	movw	r8, #45324	; 0xb10c
   11f1c:	movt	r9, #2
   11f20:	movt	r8, #2
   11f24:	cmp	r0, #0
   11f28:	beq	11f58 <__assert_fail@plt+0xc10>
   11f2c:	ldr	r4, [r8]
   11f30:	add	r0, r4, #1
   11f34:	cmp	r0, #2
   11f38:	bcs	12ff0 <__assert_fail@plt+0x1ca8>
   11f3c:	mov	r0, #0
   11f40:	str	r0, [r8]
   11f44:	ldr	r4, [r8, #4]
   11f48:	add	r1, r4, #1
   11f4c:	cmp	r1, #2
   11f50:	bcs	12ff0 <__assert_fail@plt+0x1ca8>
   11f54:	str	r0, [r8, #4]
   11f58:	ldr	r0, [sp, #36]	; 0x24
   11f5c:	ldr	r4, [r8]
   11f60:	cmp	r0, #0
   11f64:	beq	11f94 <__assert_fail@plt+0xc4c>
   11f68:	cmp	r4, #1
   11f6c:	cmnne	r4, #1
   11f70:	bne	12ff8 <__assert_fail@plt+0x1cb0>
   11f74:	mov	r0, #1
   11f78:	str	r0, [r8]
   11f7c:	ldr	r4, [r8, #4]
   11f80:	cmn	r4, #1
   11f84:	cmpne	r4, #1
   11f88:	bne	12ff8 <__assert_fail@plt+0x1cb0>
   11f8c:	str	r0, [r8, #4]
   11f90:	b	11fac <__assert_fail@plt+0xc64>
   11f94:	cmn	r4, #1
   11f98:	moveq	r0, #0
   11f9c:	streq	r0, [r8]
   11fa0:	ldr	r0, [r8, #4]
   11fa4:	cmn	r0, #1
   11fa8:	beq	12e58 <__assert_fail@plt+0x1b10>
   11fac:	ldr	r4, [r9, #28]
   11fb0:	movw	r1, #40332	; 0x9d8c
   11fb4:	movt	r1, #1
   11fb8:	mov	r0, r4
   11fbc:	bl	110b4 <strcmp@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fe8 <__assert_fail@plt+0xca0>
   11fc8:	movw	r1, #39862	; 0x9bb6
   11fcc:	mov	r0, r4
   11fd0:	movt	r1, #1
   11fd4:	bl	13ffc <__assert_fail@plt+0x2cb4>
   11fd8:	mov	sl, r0
   11fdc:	cmp	sl, #0
   11fe0:	bne	11ffc <__assert_fail@plt+0xcb4>
   11fe4:	b	12f4c <__assert_fail@plt+0x1c04>
   11fe8:	movw	r0, #45432	; 0xb178
   11fec:	movt	r0, #2
   11ff0:	ldr	sl, [r0]
   11ff4:	cmp	sl, #0
   11ff8:	beq	12f4c <__assert_fail@plt+0x1c04>
   11ffc:	ldr	r5, [r9, #32]
   12000:	movw	r1, #40332	; 0x9d8c
   12004:	movt	r1, #1
   12008:	mov	r0, r5
   1200c:	bl	110b4 <strcmp@plt>
   12010:	cmp	r0, #0
   12014:	beq	121d4 <__assert_fail@plt+0xe8c>
   12018:	movw	r1, #39862	; 0x9bb6
   1201c:	mov	r0, r5
   12020:	movt	r1, #1
   12024:	bl	13ffc <__assert_fail@plt+0x2cb4>
   12028:	mov	r4, r0
   1202c:	cmp	r4, #0
   12030:	beq	12f5c <__assert_fail@plt+0x1c14>
   12034:	cmp	sl, r4
   12038:	beq	13028 <__assert_fail@plt+0x1ce0>
   1203c:	mov	r0, sl
   12040:	mov	r1, #2
   12044:	bl	13ec8 <__assert_fail@plt+0x2b80>
   12048:	mov	r0, r4
   1204c:	mov	r1, #2
   12050:	str	r4, [sp, #20]
   12054:	bl	13ec8 <__assert_fail@plt+0x2b80>
   12058:	sub	r0, fp, #40	; 0x28
   1205c:	mov	r6, #0
   12060:	mov	r2, #4
   12064:	add	r1, r0, #4
   12068:	mov	r0, #0
   1206c:	str	r6, [fp, #-32]	; 0xffffffe0
   12070:	str	r6, [fp, #-36]	; 0xffffffdc
   12074:	str	r6, [fp, #-40]	; 0xffffffd8
   12078:	str	r1, [sp, #24]
   1207c:	bl	16d50 <__assert_fail@plt+0x5a08>
   12080:	str	r0, [fp, #-32]	; 0xffffffe0
   12084:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12088:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1208c:	cmp	r1, r2
   12090:	strcc	r6, [r0, r1, lsl #2]
   12094:	addcc	r0, r1, #1
   12098:	cmpcc	r0, r2
   1209c:	bcc	121ec <__assert_fail@plt+0xea4>
   120a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   120a4:	mov	r2, #1
   120a8:	add	r1, r0, r1, lsl #2
   120ac:	mov	r0, sl
   120b0:	bl	137b8 <__assert_fail@plt+0x2470>
   120b4:	cmp	r0, #0
   120b8:	beq	120c8 <__assert_fail@plt+0xd80>
   120bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   120c0:	add	r0, r0, #1
   120c4:	str	r0, [fp, #-40]	; 0xffffffd8
   120c8:	sub	r0, fp, #52	; 0x34
   120cc:	mov	r6, #0
   120d0:	mov	r2, #4
   120d4:	add	r1, r0, #4
   120d8:	mov	r0, #0
   120dc:	str	r6, [fp, #-44]	; 0xffffffd4
   120e0:	str	r6, [fp, #-48]	; 0xffffffd0
   120e4:	str	r6, [fp, #-52]	; 0xffffffcc
   120e8:	str	r1, [sp, #16]
   120ec:	bl	16d50 <__assert_fail@plt+0x5a08>
   120f0:	str	r0, [fp, #-44]	; 0xffffffd4
   120f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   120f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   120fc:	cmp	r1, r2
   12100:	strcc	r6, [r0, r1, lsl #2]
   12104:	addcc	r0, r1, #1
   12108:	cmpcc	r0, r2
   1210c:	bcc	12280 <__assert_fail@plt+0xf38>
   12110:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12114:	mov	r2, #2
   12118:	add	r1, r0, r1, lsl #2
   1211c:	ldr	r0, [sp, #20]
   12120:	bl	137b8 <__assert_fail@plt+0x2470>
   12124:	cmp	r0, #0
   12128:	beq	12178 <__assert_fail@plt+0xe30>
   1212c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12130:	add	r0, r0, #1
   12134:	str	r0, [fp, #-52]	; 0xffffffcc
   12138:	ldrb	r0, [r9, #6]
   1213c:	cmp	r0, #1
   12140:	beq	12184 <__assert_fail@plt+0xe3c>
   12144:	ldrb	r0, [r9, #8]
   12148:	cmp	r0, #1
   1214c:	bne	12558 <__assert_fail@plt+0x1210>
   12150:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12154:	cmp	r0, #0
   12158:	beq	12314 <__assert_fail@plt+0xfcc>
   1215c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12160:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12164:	ldr	r0, [r0]
   12168:	cmp	r1, #0
   1216c:	bne	12324 <__assert_fail@plt+0xfdc>
   12170:	add	r1, r9, #80	; 0x50
   12174:	b	1232c <__assert_fail@plt+0xfe4>
   12178:	ldrb	r0, [r9, #6]
   1217c:	cmp	r0, #1
   12180:	bne	12144 <__assert_fail@plt+0xdfc>
   12184:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12188:	mov	r0, #0
   1218c:	cmp	r1, #0
   12190:	mov	r1, #0
   12194:	beq	121a4 <__assert_fail@plt+0xe5c>
   12198:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1219c:	ldr	r1, [r1]
   121a0:	ldr	r1, [r1, #12]
   121a4:	str	r1, [r9, #20]
   121a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   121ac:	cmp	r1, #0
   121b0:	beq	121c0 <__assert_fail@plt+0xe78>
   121b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   121b8:	ldr	r0, [r0]
   121bc:	ldr	r0, [r0, #12]
   121c0:	str	r0, [r9, #24]
   121c4:	ldrb	r0, [r9, #8]
   121c8:	cmp	r0, #1
   121cc:	beq	12150 <__assert_fail@plt+0xe08>
   121d0:	b	12558 <__assert_fail@plt+0x1210>
   121d4:	movw	r0, #45432	; 0xb178
   121d8:	movt	r0, #2
   121dc:	ldr	r4, [r0]
   121e0:	cmp	r4, #0
   121e4:	bne	12034 <__assert_fail@plt+0xcec>
   121e8:	b	12f5c <__assert_fail@plt+0x1c14>
   121ec:	mvn	r7, r1
   121f0:	sub	r3, r2, r1
   121f4:	add	r7, r2, r7
   121f8:	sub	r3, r3, #2
   121fc:	ands	r7, r7, #3
   12200:	beq	1221c <__assert_fail@plt+0xed4>
   12204:	mov	r6, #0
   12208:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1220c:	subs	r7, r7, #1
   12210:	str	r6, [r4, r0, lsl #2]
   12214:	add	r0, r0, #1
   12218:	bne	12208 <__assert_fail@plt+0xec0>
   1221c:	cmp	r3, #3
   12220:	bcc	120a0 <__assert_fail@plt+0xd58>
   12224:	sub	r2, r0, r2
   12228:	lsl	r0, r0, #2
   1222c:	mov	r3, #0
   12230:	mov	r7, #0
   12234:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12238:	add	r6, r6, r0
   1223c:	str	r3, [r6, -r7, lsl #2]
   12240:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12244:	add	r6, r6, r0
   12248:	sub	r6, r6, r7, lsl #2
   1224c:	str	r3, [r6, #4]
   12250:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12254:	add	r6, r6, r0
   12258:	sub	r6, r6, r7, lsl #2
   1225c:	str	r3, [r6, #8]
   12260:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12264:	add	r6, r6, r0
   12268:	sub	r6, r6, r7, lsl #2
   1226c:	sub	r7, r7, #4
   12270:	cmp	r2, r7
   12274:	str	r3, [r6, #12]
   12278:	bne	12234 <__assert_fail@plt+0xeec>
   1227c:	b	120a0 <__assert_fail@plt+0xd58>
   12280:	mvn	r7, r1
   12284:	sub	r3, r2, r1
   12288:	add	r7, r2, r7
   1228c:	sub	r3, r3, #2
   12290:	ands	r7, r7, #3
   12294:	beq	122b0 <__assert_fail@plt+0xf68>
   12298:	mov	r6, #0
   1229c:	ldr	r4, [fp, #-44]	; 0xffffffd4
   122a0:	subs	r7, r7, #1
   122a4:	str	r6, [r4, r0, lsl #2]
   122a8:	add	r0, r0, #1
   122ac:	bne	1229c <__assert_fail@plt+0xf54>
   122b0:	cmp	r3, #3
   122b4:	bcc	12110 <__assert_fail@plt+0xdc8>
   122b8:	sub	r2, r0, r2
   122bc:	lsl	r0, r0, #2
   122c0:	mov	r3, #0
   122c4:	mov	r7, #0
   122c8:	ldr	r6, [fp, #-44]	; 0xffffffd4
   122cc:	add	r6, r6, r0
   122d0:	str	r3, [r6, -r7, lsl #2]
   122d4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   122d8:	add	r6, r6, r0
   122dc:	sub	r6, r6, r7, lsl #2
   122e0:	str	r3, [r6, #4]
   122e4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   122e8:	add	r6, r6, r0
   122ec:	sub	r6, r6, r7, lsl #2
   122f0:	str	r3, [r6, #8]
   122f4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   122f8:	add	r6, r6, r0
   122fc:	sub	r6, r6, r7, lsl #2
   12300:	sub	r7, r7, #4
   12304:	cmp	r2, r7
   12308:	str	r3, [r6, #12]
   1230c:	bne	122c8 <__assert_fail@plt+0xf80>
   12310:	b	12110 <__assert_fail@plt+0xdc8>
   12314:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12318:	cmp	r0, #0
   1231c:	beq	12558 <__assert_fail@plt+0x1210>
   12320:	add	r0, r9, #80	; 0x50
   12324:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12328:	ldr	r1, [r1]
   1232c:	bl	1350c <__assert_fail@plt+0x21c4>
   12330:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12334:	mov	r1, #0
   12338:	str	r1, [r9, #44]	; 0x2c
   1233c:	str	r1, [r9, #48]	; 0x30
   12340:	cmp	r0, #0
   12344:	beq	12448 <__assert_fail@plt+0x1100>
   12348:	str	r1, [fp, #-40]	; 0xffffffd8
   1234c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12350:	cmp	r0, #0
   12354:	bne	12420 <__assert_fail@plt+0x10d8>
   12358:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1235c:	ldr	r1, [sp, #24]
   12360:	mov	r2, #4
   12364:	bl	16d50 <__assert_fail@plt+0x5a08>
   12368:	str	r0, [fp, #-32]	; 0xffffffe0
   1236c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12370:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12374:	cmp	r1, r2
   12378:	bcs	12420 <__assert_fail@plt+0x10d8>
   1237c:	mov	r3, #0
   12380:	str	r3, [r0, r1, lsl #2]
   12384:	add	r0, r1, #1
   12388:	cmp	r0, r2
   1238c:	bcs	12420 <__assert_fail@plt+0x10d8>
   12390:	mvn	r7, r1
   12394:	sub	r3, r2, r1
   12398:	add	r7, r2, r7
   1239c:	sub	r3, r3, #2
   123a0:	ands	r7, r7, #3
   123a4:	beq	123c0 <__assert_fail@plt+0x1078>
   123a8:	mov	r6, #0
   123ac:	ldr	r4, [fp, #-32]	; 0xffffffe0
   123b0:	subs	r7, r7, #1
   123b4:	str	r6, [r4, r0, lsl #2]
   123b8:	add	r0, r0, #1
   123bc:	bne	123ac <__assert_fail@plt+0x1064>
   123c0:	cmp	r3, #3
   123c4:	bcc	12420 <__assert_fail@plt+0x10d8>
   123c8:	sub	r2, r0, r2
   123cc:	lsl	r0, r0, #2
   123d0:	mov	r3, #0
   123d4:	mov	r7, #0
   123d8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   123dc:	add	r6, r6, r0
   123e0:	str	r3, [r6, -r7, lsl #2]
   123e4:	ldr	r6, [fp, #-32]	; 0xffffffe0
   123e8:	add	r6, r6, r0
   123ec:	sub	r6, r6, r7, lsl #2
   123f0:	str	r3, [r6, #4]
   123f4:	ldr	r6, [fp, #-32]	; 0xffffffe0
   123f8:	add	r6, r6, r0
   123fc:	sub	r6, r6, r7, lsl #2
   12400:	str	r3, [r6, #8]
   12404:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12408:	add	r6, r6, r0
   1240c:	sub	r6, r6, r7, lsl #2
   12410:	sub	r7, r7, #4
   12414:	cmp	r2, r7
   12418:	str	r3, [r6, #12]
   1241c:	bne	123d8 <__assert_fail@plt+0x1090>
   12420:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12424:	mov	r2, #1
   12428:	add	r1, r0, r1, lsl #2
   1242c:	mov	r0, sl
   12430:	bl	137b8 <__assert_fail@plt+0x2470>
   12434:	cmp	r0, #0
   12438:	beq	12448 <__assert_fail@plt+0x1100>
   1243c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12440:	add	r0, r0, #1
   12444:	str	r0, [fp, #-40]	; 0xffffffd8
   12448:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1244c:	cmp	r0, #0
   12450:	beq	12558 <__assert_fail@plt+0x1210>
   12454:	mov	r1, #0
   12458:	str	r1, [fp, #-52]	; 0xffffffcc
   1245c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12460:	cmp	r0, #0
   12464:	bne	12530 <__assert_fail@plt+0x11e8>
   12468:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1246c:	ldr	r1, [sp, #16]
   12470:	mov	r2, #4
   12474:	bl	16d50 <__assert_fail@plt+0x5a08>
   12478:	str	r0, [fp, #-44]	; 0xffffffd4
   1247c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12480:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12484:	cmp	r1, r2
   12488:	bcs	12530 <__assert_fail@plt+0x11e8>
   1248c:	mov	r3, #0
   12490:	str	r3, [r0, r1, lsl #2]
   12494:	add	r0, r1, #1
   12498:	cmp	r0, r2
   1249c:	bcs	12530 <__assert_fail@plt+0x11e8>
   124a0:	mvn	r7, r1
   124a4:	sub	r3, r2, r1
   124a8:	add	r7, r2, r7
   124ac:	sub	r3, r3, #2
   124b0:	ands	r7, r7, #3
   124b4:	beq	124d0 <__assert_fail@plt+0x1188>
   124b8:	mov	r6, #0
   124bc:	ldr	r4, [fp, #-44]	; 0xffffffd4
   124c0:	subs	r7, r7, #1
   124c4:	str	r6, [r4, r0, lsl #2]
   124c8:	add	r0, r0, #1
   124cc:	bne	124bc <__assert_fail@plt+0x1174>
   124d0:	cmp	r3, #3
   124d4:	bcc	12530 <__assert_fail@plt+0x11e8>
   124d8:	sub	r2, r0, r2
   124dc:	lsl	r0, r0, #2
   124e0:	mov	r3, #0
   124e4:	mov	r7, #0
   124e8:	ldr	r6, [fp, #-44]	; 0xffffffd4
   124ec:	add	r6, r6, r0
   124f0:	str	r3, [r6, -r7, lsl #2]
   124f4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   124f8:	add	r6, r6, r0
   124fc:	sub	r6, r6, r7, lsl #2
   12500:	str	r3, [r6, #4]
   12504:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12508:	add	r6, r6, r0
   1250c:	sub	r6, r6, r7, lsl #2
   12510:	str	r3, [r6, #8]
   12514:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12518:	add	r6, r6, r0
   1251c:	sub	r6, r6, r7, lsl #2
   12520:	sub	r7, r7, #4
   12524:	cmp	r2, r7
   12528:	str	r3, [r6, #12]
   1252c:	bne	124e8 <__assert_fail@plt+0x11a0>
   12530:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12534:	mov	r2, #2
   12538:	add	r1, r0, r1, lsl #2
   1253c:	ldr	r0, [sp, #20]
   12540:	bl	137b8 <__assert_fail@plt+0x2470>
   12544:	cmp	r0, #0
   12548:	beq	12558 <__assert_fail@plt+0x1210>
   1254c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12550:	add	r0, r0, #1
   12554:	str	r0, [fp, #-52]	; 0xffffffcc
   12558:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1255c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12560:	cmp	r1, #0
   12564:	cmpne	r0, #0
   12568:	beq	12b48 <__assert_fail@plt+0x1800>
   1256c:	add	r0, r9, #80	; 0x50
   12570:	mov	r6, #0
   12574:	mov	r5, #1
   12578:	str	sl, [sp, #8]
   1257c:	str	r0, [sp, #12]
   12580:	b	1259c <__assert_fail@plt+0x1254>
   12584:	strb	r5, [r9, #2]
   12588:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1258c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12590:	cmp	r1, #0
   12594:	cmpne	r0, #0
   12598:	beq	12b48 <__assert_fail@plt+0x1800>
   1259c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   125a0:	ldm	r8, {r2, r3}
   125a4:	ldr	r1, [r0]
   125a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   125ac:	ldr	r0, [r0]
   125b0:	bl	136b0 <__assert_fail@plt+0x2368>
   125b4:	cmn	r0, #1
   125b8:	ble	1288c <__assert_fail@plt+0x1544>
   125bc:	cmp	r0, #0
   125c0:	beq	126dc <__assert_fail@plt+0x1394>
   125c4:	ldrb	r0, [r9, #4]
   125c8:	cmp	r0, #1
   125cc:	bne	125e0 <__assert_fail@plt+0x1298>
   125d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   125d4:	ldr	r1, [r0]
   125d8:	ldr	r0, [sp, #12]
   125dc:	bl	1350c <__assert_fail@plt+0x21c4>
   125e0:	mov	r1, #0
   125e4:	str	r1, [fp, #-52]	; 0xffffffcc
   125e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125ec:	cmp	r0, #0
   125f0:	bne	12624 <__assert_fail@plt+0x12dc>
   125f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   125f8:	ldr	r1, [sp, #16]
   125fc:	mov	r2, #4
   12600:	bl	16d50 <__assert_fail@plt+0x5a08>
   12604:	str	r0, [fp, #-44]	; 0xffffffd4
   12608:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1260c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12610:	cmp	r1, r2
   12614:	strcc	r6, [r0, r1, lsl #2]
   12618:	addcc	r0, r1, #1
   1261c:	cmpcc	r0, r2
   12620:	bcc	12a30 <__assert_fail@plt+0x16e8>
   12624:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12628:	mov	r2, #2
   1262c:	add	r1, r0, r1, lsl #2
   12630:	ldr	r0, [sp, #20]
   12634:	bl	137b8 <__assert_fail@plt+0x2470>
   12638:	cmp	r0, #0
   1263c:	beq	12584 <__assert_fail@plt+0x123c>
   12640:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12644:	add	r0, r0, #1
   12648:	str	r0, [fp, #-52]	; 0xffffffcc
   1264c:	b	12584 <__assert_fail@plt+0x123c>
   12650:	mvn	r7, r1
   12654:	sub	r3, r2, r1
   12658:	add	r7, r2, r7
   1265c:	sub	r3, r3, #2
   12660:	ands	r7, r7, #3
   12664:	beq	1267c <__assert_fail@plt+0x1334>
   12668:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1266c:	subs	r7, r7, #1
   12670:	str	r6, [r4, r0, lsl #2]
   12674:	add	r0, r0, #1
   12678:	bne	12668 <__assert_fail@plt+0x1320>
   1267c:	cmp	r3, #3
   12680:	bcc	1271c <__assert_fail@plt+0x13d4>
   12684:	sub	r2, r0, r2
   12688:	lsl	r0, r0, #2
   1268c:	mov	r3, #0
   12690:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12694:	add	r7, r7, r0
   12698:	str	r6, [r7, -r3, lsl #2]
   1269c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   126a0:	add	r7, r7, r0
   126a4:	sub	r7, r7, r3, lsl #2
   126a8:	str	r6, [r7, #4]
   126ac:	ldr	r7, [fp, #-32]	; 0xffffffe0
   126b0:	add	r7, r7, r0
   126b4:	sub	r7, r7, r3, lsl #2
   126b8:	str	r6, [r7, #8]
   126bc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   126c0:	add	r7, r7, r0
   126c4:	sub	r7, r7, r3, lsl #2
   126c8:	sub	r3, r3, #4
   126cc:	cmp	r2, r3
   126d0:	str	r6, [r7, #12]
   126d4:	bne	12690 <__assert_fail@plt+0x1348>
   126d8:	b	1271c <__assert_fail@plt+0x13d4>
   126dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   126e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   126e4:	cmp	r1, r0
   126e8:	bne	1271c <__assert_fail@plt+0x13d4>
   126ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   126f0:	ldr	r1, [sp, #24]
   126f4:	mov	r2, #4
   126f8:	bl	16d50 <__assert_fail@plt+0x5a08>
   126fc:	str	r0, [fp, #-32]	; 0xffffffe0
   12700:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12704:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12708:	cmp	r1, r2
   1270c:	strcc	r6, [r0, r1, lsl #2]
   12710:	addcc	r0, r1, #1
   12714:	cmpcc	r0, r2
   12718:	bcc	12650 <__assert_fail@plt+0x1308>
   1271c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12720:	mov	r2, #1
   12724:	mov	r9, #1
   12728:	add	r1, r0, r1, lsl #2
   1272c:	mov	r0, sl
   12730:	bl	137b8 <__assert_fail@plt+0x2470>
   12734:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12738:	cmp	r0, #0
   1273c:	add	r2, r1, #1
   12740:	str	r2, [fp, #-40]	; 0xffffffd8
   12744:	beq	1276c <__assert_fail@plt+0x1424>
   12748:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1274c:	ldm	r8, {r2, r3}
   12750:	ldr	r0, [r0, r1, lsl #2]
   12754:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12758:	ldr	r1, [r1]
   1275c:	bl	136b0 <__assert_fail@plt+0x2368>
   12760:	cmp	r0, #0
   12764:	beq	126dc <__assert_fail@plt+0x1394>
   12768:	mov	r9, #0
   1276c:	ldr	sl, [sp, #16]
   12770:	ldr	r5, [sp, #20]
   12774:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12778:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1277c:	cmp	r1, r0
   12780:	bne	127b4 <__assert_fail@plt+0x146c>
   12784:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12788:	mov	r1, sl
   1278c:	mov	r2, #4
   12790:	bl	16d50 <__assert_fail@plt+0x5a08>
   12794:	str	r0, [fp, #-44]	; 0xffffffd4
   12798:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1279c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   127a0:	cmp	r1, r2
   127a4:	strcc	r6, [r0, r1, lsl #2]
   127a8:	addcc	r0, r1, #1
   127ac:	cmpcc	r0, r2
   127b0:	bcc	12800 <__assert_fail@plt+0x14b8>
   127b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   127b8:	mov	r2, #2
   127bc:	add	r1, r0, r1, lsl #2
   127c0:	mov	r0, r5
   127c4:	bl	137b8 <__assert_fail@plt+0x2470>
   127c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   127cc:	cmp	r0, #0
   127d0:	add	r2, r1, #1
   127d4:	str	r2, [fp, #-52]	; 0xffffffcc
   127d8:	beq	12918 <__assert_fail@plt+0x15d0>
   127dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   127e0:	ldm	r8, {r2, r3}
   127e4:	ldr	r1, [r0, r1, lsl #2]
   127e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127ec:	ldr	r0, [r0]
   127f0:	bl	136b0 <__assert_fail@plt+0x2368>
   127f4:	cmp	r0, #0
   127f8:	beq	12774 <__assert_fail@plt+0x142c>
   127fc:	b	12920 <__assert_fail@plt+0x15d8>
   12800:	mvn	r7, r1
   12804:	sub	r3, r2, r1
   12808:	add	r7, r2, r7
   1280c:	sub	r3, r3, #2
   12810:	ands	r7, r7, #3
   12814:	beq	1282c <__assert_fail@plt+0x14e4>
   12818:	ldr	r4, [fp, #-44]	; 0xffffffd4
   1281c:	subs	r7, r7, #1
   12820:	str	r6, [r4, r0, lsl #2]
   12824:	add	r0, r0, #1
   12828:	bne	12818 <__assert_fail@plt+0x14d0>
   1282c:	cmp	r3, #3
   12830:	bcc	127b4 <__assert_fail@plt+0x146c>
   12834:	sub	r2, r0, r2
   12838:	lsl	r0, r0, #2
   1283c:	mov	r3, #0
   12840:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12844:	add	r7, r7, r0
   12848:	str	r6, [r7, -r3, lsl #2]
   1284c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12850:	add	r7, r7, r0
   12854:	sub	r7, r7, r3, lsl #2
   12858:	str	r6, [r7, #4]
   1285c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12860:	add	r7, r7, r0
   12864:	sub	r7, r7, r3, lsl #2
   12868:	str	r6, [r7, #8]
   1286c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12870:	add	r7, r7, r0
   12874:	sub	r7, r7, r3, lsl #2
   12878:	sub	r3, r3, #4
   1287c:	cmp	r2, r3
   12880:	str	r6, [r7, #12]
   12884:	bne	12840 <__assert_fail@plt+0x14f8>
   12888:	b	127b4 <__assert_fail@plt+0x146c>
   1288c:	ldrb	r0, [r9, #3]
   12890:	cmp	r0, #1
   12894:	bne	128a8 <__assert_fail@plt+0x1560>
   12898:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1289c:	ldr	r1, [sp, #12]
   128a0:	ldr	r0, [r0]
   128a4:	bl	1350c <__assert_fail@plt+0x21c4>
   128a8:	mov	r1, #0
   128ac:	str	r1, [fp, #-40]	; 0xffffffd8
   128b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   128b4:	cmp	r0, #0
   128b8:	bne	128ec <__assert_fail@plt+0x15a4>
   128bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   128c0:	ldr	r1, [sp, #24]
   128c4:	mov	r2, #4
   128c8:	bl	16d50 <__assert_fail@plt+0x5a08>
   128cc:	str	r0, [fp, #-32]	; 0xffffffe0
   128d0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   128d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   128d8:	cmp	r1, r2
   128dc:	strcc	r6, [r0, r1, lsl #2]
   128e0:	addcc	r0, r1, #1
   128e4:	cmpcc	r0, r2
   128e8:	bcc	12abc <__assert_fail@plt+0x1774>
   128ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   128f0:	mov	r2, #1
   128f4:	add	r1, r0, r1, lsl #2
   128f8:	mov	r0, sl
   128fc:	bl	137b8 <__assert_fail@plt+0x2470>
   12900:	cmp	r0, #0
   12904:	beq	12584 <__assert_fail@plt+0x123c>
   12908:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1290c:	add	r0, r0, #1
   12910:	str	r0, [fp, #-40]	; 0xffffffd8
   12914:	b	12584 <__assert_fail@plt+0x123c>
   12918:	mov	sl, #1
   1291c:	b	12924 <__assert_fail@plt+0x15dc>
   12920:	mov	sl, #0
   12924:	movw	r0, #45448	; 0xb188
   12928:	mov	r5, #1
   1292c:	movt	r0, #2
   12930:	ldrb	r0, [r0, #1]
   12934:	cmp	r0, #1
   12938:	bne	129b0 <__assert_fail@plt+0x1668>
   1293c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12940:	cmp	r0, #1
   12944:	beq	129b0 <__assert_fail@plt+0x1668>
   12948:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1294c:	mov	r7, #0
   12950:	mov	r1, #1
   12954:	cmp	r2, #1
   12958:	bne	1297c <__assert_fail@plt+0x1634>
   1295c:	add	r7, r7, #1
   12960:	sub	r2, r0, #1
   12964:	cmp	r7, r2
   12968:	mov	r2, r1
   1296c:	bcs	129b0 <__assert_fail@plt+0x1668>
   12970:	mov	r1, #1
   12974:	cmp	r2, #1
   12978:	beq	1295c <__assert_fail@plt+0x1614>
   1297c:	mov	r4, #0
   12980:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12984:	ldr	r1, [r0, r4, lsl #2]
   12988:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1298c:	ldr	r0, [r0, r7, lsl #2]
   12990:	bl	1350c <__assert_fail@plt+0x21c4>
   12994:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12998:	add	r4, r4, #1
   1299c:	sub	r0, r1, #1
   129a0:	cmp	r4, r0
   129a4:	bcc	12980 <__assert_fail@plt+0x1638>
   129a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   129ac:	b	1295c <__assert_fail@plt+0x1614>
   129b0:	mov	r0, #0
   129b4:	cmp	r9, #0
   129b8:	mov	r1, #0
   129bc:	bne	129e8 <__assert_fail@plt+0x16a0>
   129c0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   129c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   129c8:	mvn	r3, #3
   129cc:	add	r1, r3, r1, lsl #2
   129d0:	ldr	r7, [r2]
   129d4:	ldr	r3, [r2, r1]
   129d8:	str	r3, [r2]
   129dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   129e0:	str	r7, [r2, r1]
   129e4:	mov	r1, #1
   129e8:	cmp	sl, #0
   129ec:	str	r1, [fp, #-40]	; 0xffffffd8
   129f0:	bne	12a1c <__assert_fail@plt+0x16d4>
   129f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   129f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   129fc:	mvn	r2, #3
   12a00:	add	r0, r2, r0, lsl #2
   12a04:	ldr	r3, [r1]
   12a08:	ldr	r2, [r1, r0]
   12a0c:	str	r2, [r1]
   12a10:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12a14:	str	r3, [r1, r0]
   12a18:	mov	r0, #1
   12a1c:	ldr	sl, [sp, #8]
   12a20:	movw	r9, #45448	; 0xb188
   12a24:	str	r0, [fp, #-52]	; 0xffffffcc
   12a28:	movt	r9, #2
   12a2c:	b	12588 <__assert_fail@plt+0x1240>
   12a30:	mvn	r7, r1
   12a34:	sub	r3, r2, r1
   12a38:	add	r7, r2, r7
   12a3c:	sub	r3, r3, #2
   12a40:	ands	r7, r7, #3
   12a44:	beq	12a5c <__assert_fail@plt+0x1714>
   12a48:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12a4c:	subs	r7, r7, #1
   12a50:	str	r6, [r4, r0, lsl #2]
   12a54:	add	r0, r0, #1
   12a58:	bne	12a48 <__assert_fail@plt+0x1700>
   12a5c:	cmp	r3, #3
   12a60:	bcc	12624 <__assert_fail@plt+0x12dc>
   12a64:	sub	r2, r0, r2
   12a68:	lsl	r0, r0, #2
   12a6c:	mov	r3, #0
   12a70:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12a74:	add	r7, r7, r0
   12a78:	str	r6, [r7, -r3, lsl #2]
   12a7c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12a80:	add	r7, r7, r0
   12a84:	sub	r7, r7, r3, lsl #2
   12a88:	str	r6, [r7, #4]
   12a8c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12a90:	add	r7, r7, r0
   12a94:	sub	r7, r7, r3, lsl #2
   12a98:	str	r6, [r7, #8]
   12a9c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12aa0:	add	r7, r7, r0
   12aa4:	sub	r7, r7, r3, lsl #2
   12aa8:	sub	r3, r3, #4
   12aac:	cmp	r2, r3
   12ab0:	str	r6, [r7, #12]
   12ab4:	bne	12a70 <__assert_fail@plt+0x1728>
   12ab8:	b	12624 <__assert_fail@plt+0x12dc>
   12abc:	mvn	r7, r1
   12ac0:	sub	r3, r2, r1
   12ac4:	add	r7, r2, r7
   12ac8:	sub	r3, r3, #2
   12acc:	ands	r7, r7, #3
   12ad0:	beq	12ae8 <__assert_fail@plt+0x17a0>
   12ad4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12ad8:	subs	r7, r7, #1
   12adc:	str	r6, [r4, r0, lsl #2]
   12ae0:	add	r0, r0, #1
   12ae4:	bne	12ad4 <__assert_fail@plt+0x178c>
   12ae8:	cmp	r3, #3
   12aec:	bcc	128ec <__assert_fail@plt+0x15a4>
   12af0:	sub	r2, r0, r2
   12af4:	lsl	r0, r0, #2
   12af8:	mov	r3, #0
   12afc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12b00:	add	r7, r7, r0
   12b04:	str	r6, [r7, -r3, lsl #2]
   12b08:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12b0c:	add	r7, r7, r0
   12b10:	sub	r7, r7, r3, lsl #2
   12b14:	str	r6, [r7, #4]
   12b18:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12b1c:	add	r7, r7, r0
   12b20:	sub	r7, r7, r3, lsl #2
   12b24:	str	r6, [r7, #8]
   12b28:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12b2c:	add	r7, r7, r0
   12b30:	sub	r7, r7, r3, lsl #2
   12b34:	sub	r3, r3, #4
   12b38:	cmp	r2, r3
   12b3c:	str	r6, [r7, #12]
   12b40:	bne	12afc <__assert_fail@plt+0x17b4>
   12b44:	b	128ec <__assert_fail@plt+0x15a4>
   12b48:	ldr	r2, [r9, #12]
   12b4c:	mov	r8, #0
   12b50:	str	r8, [sp, #56]	; 0x38
   12b54:	cmp	r2, #2
   12b58:	beq	12b78 <__assert_fail@plt+0x1830>
   12b5c:	ldrb	r2, [r9, #9]
   12b60:	ldrb	r3, [r9, #10]
   12b64:	clz	r3, r3
   12b68:	clz	r2, r2
   12b6c:	lsr	r3, r3, #5
   12b70:	lsr	r2, r2, #5
   12b74:	orr	r8, r2, r3
   12b78:	cmp	r1, #0
   12b7c:	ldrbne	r1, [r9, #3]
   12b80:	orrsne	r2, r8, r1
   12b84:	bne	12d10 <__assert_fail@plt+0x19c8>
   12b88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12b8c:	cmp	r0, #0
   12b90:	ldrbne	r0, [r9, #4]
   12b94:	orrsne	r1, r8, r0
   12b98:	bne	12db4 <__assert_fail@plt+0x1a6c>
   12b9c:	ldr	r6, [sp, #56]	; 0x38
   12ba0:	cmp	r6, #0
   12ba4:	beq	12bc4 <__assert_fail@plt+0x187c>
   12ba8:	ldr	r0, [r6, #20]
   12bac:	bl	140ac <__assert_fail@plt+0x2d64>
   12bb0:	mov	r4, #0
   12bb4:	str	r4, [r6, #20]
   12bb8:	ldr	r0, [r6, #8]
   12bbc:	bl	140ac <__assert_fail@plt+0x2d64>
   12bc0:	str	r4, [r6, #8]
   12bc4:	mov	r0, r6
   12bc8:	bl	140ac <__assert_fail@plt+0x2d64>
   12bcc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c38 <__assert_fail@plt+0x18f0>
   12bd8:	mov	r6, #0
   12bdc:	mov	r7, #0
   12be0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12be4:	ldr	r4, [r0, r7, lsl #2]
   12be8:	cmp	r4, #0
   12bec:	bne	12c18 <__assert_fail@plt+0x18d0>
   12bf0:	ldr	r0, [r0, r7, lsl #2]
   12bf4:	bl	140ac <__assert_fail@plt+0x2d64>
   12bf8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12bfc:	add	r7, r7, #1
   12c00:	cmp	r7, r0
   12c04:	bcs	12c38 <__assert_fail@plt+0x18f0>
   12c08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12c0c:	ldr	r4, [r0, r7, lsl #2]
   12c10:	cmp	r4, #0
   12c14:	beq	12bf0 <__assert_fail@plt+0x18a8>
   12c18:	ldr	r0, [r4, #20]
   12c1c:	bl	140ac <__assert_fail@plt+0x2d64>
   12c20:	str	r6, [r4, #20]
   12c24:	ldr	r0, [r4, #8]
   12c28:	bl	140ac <__assert_fail@plt+0x2d64>
   12c2c:	str	r6, [r4, #8]
   12c30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12c34:	b	12bf0 <__assert_fail@plt+0x18a8>
   12c38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12c3c:	bl	140ac <__assert_fail@plt+0x2d64>
   12c40:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c44:	cmp	r0, #0
   12c48:	beq	12cac <__assert_fail@plt+0x1964>
   12c4c:	mov	r6, #0
   12c50:	mov	r7, #0
   12c54:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12c58:	ldr	r4, [r0, r7, lsl #2]
   12c5c:	cmp	r4, #0
   12c60:	bne	12c8c <__assert_fail@plt+0x1944>
   12c64:	ldr	r0, [r0, r7, lsl #2]
   12c68:	bl	140ac <__assert_fail@plt+0x2d64>
   12c6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c70:	add	r7, r7, #1
   12c74:	cmp	r7, r0
   12c78:	bcs	12cac <__assert_fail@plt+0x1964>
   12c7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12c80:	ldr	r4, [r0, r7, lsl #2]
   12c84:	cmp	r4, #0
   12c88:	beq	12c64 <__assert_fail@plt+0x191c>
   12c8c:	ldr	r0, [r4, #20]
   12c90:	bl	140ac <__assert_fail@plt+0x2d64>
   12c94:	str	r6, [r4, #20]
   12c98:	ldr	r0, [r4, #8]
   12c9c:	bl	140ac <__assert_fail@plt+0x2d64>
   12ca0:	str	r6, [r4, #8]
   12ca4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12ca8:	b	12c64 <__assert_fail@plt+0x191c>
   12cac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12cb0:	bl	140ac <__assert_fail@plt+0x2d64>
   12cb4:	mov	r0, sl
   12cb8:	bl	13f04 <__assert_fail@plt+0x2bbc>
   12cbc:	cmp	r0, #0
   12cc0:	bne	12f4c <__assert_fail@plt+0x1c04>
   12cc4:	ldr	r0, [sp, #20]
   12cc8:	bl	13f04 <__assert_fail@plt+0x2bbc>
   12ccc:	cmp	r0, #0
   12cd0:	bne	12f5c <__assert_fail@plt+0x1c14>
   12cd4:	ldrb	r0, [r9, #9]
   12cd8:	ldrb	r1, [r9, #10]
   12cdc:	orrs	r0, r1, r0
   12ce0:	moveq	r0, #0
   12ce4:	subeq	sp, fp, #28
   12ce8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cec:	movw	r1, #39475	; 0x9a33
   12cf0:	movt	r1, #1
   12cf4:	mov	r0, #0
   12cf8:	mov	r2, #5
   12cfc:	bl	1112c <dcgettext@plt>
   12d00:	mov	r2, r0
   12d04:	mov	r0, #1
   12d08:	mov	r1, #0
   12d0c:	bl	11198 <error@plt>
   12d10:	cmp	r1, #0
   12d14:	beq	12d2c <__assert_fail@plt+0x19e4>
   12d18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d1c:	add	r1, r9, #80	; 0x50
   12d20:	ldr	r0, [r0]
   12d24:	bl	1350c <__assert_fail@plt+0x21c4>
   12d28:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12d2c:	cmp	r0, #0
   12d30:	add	r1, sp, #56	; 0x38
   12d34:	mov	r2, #1
   12d38:	movne	r0, #1
   12d3c:	strbne	r0, [r9, #2]
   12d40:	mov	r0, sl
   12d44:	bl	137b8 <__assert_fail@plt+0x2470>
   12d48:	cmp	r0, #0
   12d4c:	beq	12b88 <__assert_fail@plt+0x1840>
   12d50:	add	r6, r9, #80	; 0x50
   12d54:	add	r7, sp, #56	; 0x38
   12d58:	ldrb	r0, [r9, #3]
   12d5c:	cmp	r0, #1
   12d60:	bne	12d98 <__assert_fail@plt+0x1a50>
   12d64:	b	12d8c <__assert_fail@plt+0x1a44>
   12d68:	mov	r0, sl
   12d6c:	mov	r1, r7
   12d70:	mov	r2, #1
   12d74:	bl	137b8 <__assert_fail@plt+0x2470>
   12d78:	cmp	r0, #0
   12d7c:	beq	12b88 <__assert_fail@plt+0x1840>
   12d80:	ldrb	r0, [r9, #3]
   12d84:	cmp	r0, #1
   12d88:	bne	12d98 <__assert_fail@plt+0x1a50>
   12d8c:	ldr	r0, [sp, #56]	; 0x38
   12d90:	mov	r1, r6
   12d94:	bl	1350c <__assert_fail@plt+0x21c4>
   12d98:	ldrb	r0, [r9, #9]
   12d9c:	cmp	r0, #0
   12da0:	beq	12d68 <__assert_fail@plt+0x1a20>
   12da4:	ldrb	r0, [r9, #3]
   12da8:	cmp	r0, #1
   12dac:	beq	12d68 <__assert_fail@plt+0x1a20>
   12db0:	b	12b88 <__assert_fail@plt+0x1840>
   12db4:	cmp	r0, #0
   12db8:	beq	12dcc <__assert_fail@plt+0x1a84>
   12dbc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12dc0:	ldr	r1, [r0]
   12dc4:	add	r0, r9, #80	; 0x50
   12dc8:	bl	1350c <__assert_fail@plt+0x21c4>
   12dcc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12dd0:	add	r1, sp, #56	; 0x38
   12dd4:	mov	r2, #2
   12dd8:	cmp	r0, #0
   12ddc:	movne	r0, #1
   12de0:	strbne	r0, [r9, #2]
   12de4:	ldr	r0, [sp, #20]
   12de8:	bl	137b8 <__assert_fail@plt+0x2470>
   12dec:	cmp	r0, #0
   12df0:	beq	12b9c <__assert_fail@plt+0x1854>
   12df4:	add	r6, r9, #80	; 0x50
   12df8:	add	r7, sp, #56	; 0x38
   12dfc:	ldrb	r0, [r9, #4]
   12e00:	cmp	r0, #1
   12e04:	bne	12e3c <__assert_fail@plt+0x1af4>
   12e08:	b	12e30 <__assert_fail@plt+0x1ae8>
   12e0c:	ldr	r0, [sp, #20]
   12e10:	mov	r1, r7
   12e14:	mov	r2, #2
   12e18:	bl	137b8 <__assert_fail@plt+0x2470>
   12e1c:	cmp	r0, #0
   12e20:	beq	12b9c <__assert_fail@plt+0x1854>
   12e24:	ldrb	r0, [r9, #4]
   12e28:	cmp	r0, #1
   12e2c:	bne	12e3c <__assert_fail@plt+0x1af4>
   12e30:	ldr	r1, [sp, #56]	; 0x38
   12e34:	mov	r0, r6
   12e38:	bl	1350c <__assert_fail@plt+0x21c4>
   12e3c:	ldrb	r0, [r9, #10]
   12e40:	cmp	r0, #0
   12e44:	beq	12e0c <__assert_fail@plt+0x1ac4>
   12e48:	ldrb	r0, [r9, #4]
   12e4c:	cmp	r0, #1
   12e50:	beq	12e0c <__assert_fail@plt+0x1ac4>
   12e54:	b	12b9c <__assert_fail@plt+0x1854>
   12e58:	mov	r0, #0
   12e5c:	b	11f8c <__assert_fail@plt+0xc44>
   12e60:	movw	r0, #45336	; 0xb118
   12e64:	movw	r2, #39385	; 0x99d9
   12e68:	mov	r1, #0
   12e6c:	movt	r0, #2
   12e70:	movt	r2, #1
   12e74:	str	r1, [sp, #4]
   12e78:	movw	r1, #39204	; 0x9924
   12e7c:	movt	r1, #1
   12e80:	ldr	r3, [r0]
   12e84:	movw	r0, #45436	; 0xb17c
   12e88:	str	r2, [sp]
   12e8c:	movw	r2, #39371	; 0x99cb
   12e90:	movt	r0, #2
   12e94:	movt	r2, #1
   12e98:	ldr	r0, [r0]
   12e9c:	bl	16970 <__assert_fail@plt+0x5628>
   12ea0:	mov	r0, #0
   12ea4:	bl	11204 <exit@plt>
   12ea8:	mov	r0, #0
   12eac:	bl	11444 <__assert_fail@plt+0xfc>
   12eb0:	movw	r1, #39253	; 0x9955
   12eb4:	movt	r1, #1
   12eb8:	mov	r0, #0
   12ebc:	mov	r2, #5
   12ec0:	bl	1112c <dcgettext@plt>
   12ec4:	mov	r4, r0
   12ec8:	movw	r0, #45440	; 0xb180
   12ecc:	movt	r0, #2
   12ed0:	ldr	r0, [r0]
   12ed4:	bl	16420 <__assert_fail@plt+0x50d8>
   12ed8:	mov	r3, r0
   12edc:	mov	r0, #1
   12ee0:	mov	r1, #0
   12ee4:	mov	r2, r4
   12ee8:	bl	11198 <error@plt>
   12eec:	movw	r1, #39877	; 0x9bc5
   12ef0:	mov	r0, #0
   12ef4:	mov	r2, #5
   12ef8:	movt	r1, #1
   12efc:	bl	1112c <dcgettext@plt>
   12f00:	mov	r2, r0
   12f04:	str	r7, [sp]
   12f08:	add	r3, r4, #1
   12f0c:	mov	r0, #1
   12f10:	mov	r1, #0
   12f14:	bl	11198 <error@plt>
   12f18:	cmp	r0, #0
   12f1c:	bne	13054 <__assert_fail@plt+0x1d0c>
   12f20:	movw	r1, #39398	; 0x99e6
   12f24:	mov	r0, #0
   12f28:	mov	r2, #5
   12f2c:	movt	r1, #1
   12f30:	bl	1112c <dcgettext@plt>
   12f34:	mov	r2, r0
   12f38:	mov	r0, #0
   12f3c:	mov	r1, #0
   12f40:	bl	11198 <error@plt>
   12f44:	mov	r0, #1
   12f48:	bl	11444 <__assert_fail@plt+0xfc>
   12f4c:	bl	11240 <__errno_location@plt>
   12f50:	ldr	r4, [r0]
   12f54:	ldr	r2, [r9, #28]
   12f58:	b	12f68 <__assert_fail@plt+0x1c20>
   12f5c:	bl	11240 <__errno_location@plt>
   12f60:	ldr	r4, [r0]
   12f64:	ldr	r2, [r9, #32]
   12f68:	mov	r0, #0
   12f6c:	mov	r1, #3
   12f70:	bl	16174 <__assert_fail@plt+0x4e2c>
   12f74:	movw	r2, #39978	; 0x9c2a
   12f78:	mov	r3, r0
   12f7c:	mov	r0, #1
   12f80:	mov	r1, r4
   12f84:	movt	r2, #1
   12f88:	bl	11198 <error@plt>
   12f8c:	movw	r1, #39330	; 0x99a2
   12f90:	movt	r1, #1
   12f94:	b	12eb8 <__assert_fail@plt+0x1b70>
   12f98:	movw	r1, #39353	; 0x99b9
   12f9c:	movt	r1, #1
   12fa0:	b	12cf4 <__assert_fail@plt+0x19ac>
   12fa4:	movw	r1, #39278	; 0x996e
   12fa8:	movt	r1, #1
   12fac:	b	12cf4 <__assert_fail@plt+0x19ac>
   12fb0:	movw	r1, #39253	; 0x9955
   12fb4:	mov	r0, #0
   12fb8:	mov	r2, #5
   12fbc:	movt	r1, #1
   12fc0:	bl	1112c <dcgettext@plt>
   12fc4:	mov	r4, r0
   12fc8:	mov	r0, r7
   12fcc:	b	12ed4 <__assert_fail@plt+0x1b8c>
   12fd0:	movw	r1, #39253	; 0x9955
   12fd4:	mov	r0, #0
   12fd8:	mov	r2, #5
   12fdc:	movt	r1, #1
   12fe0:	bl	1112c <dcgettext@plt>
   12fe4:	mov	r4, r0
   12fe8:	mov	r0, r5
   12fec:	b	12ed4 <__assert_fail@plt+0x1b8c>
   12ff0:	mov	r5, #1
   12ff4:	b	12ffc <__assert_fail@plt+0x1cb4>
   12ff8:	mov	r5, #2
   12ffc:	movw	r1, #39877	; 0x9bc5
   13000:	mov	r0, #0
   13004:	mov	r2, #5
   13008:	movt	r1, #1
   1300c:	bl	1112c <dcgettext@plt>
   13010:	mov	r2, r0
   13014:	str	r5, [sp]
   13018:	add	r3, r4, #1
   1301c:	mov	r0, #1
   13020:	mov	r1, #0
   13024:	bl	11198 <error@plt>
   13028:	bl	11240 <__errno_location@plt>
   1302c:	movw	r1, #39439	; 0x9a0f
   13030:	ldr	r4, [r0]
   13034:	mov	r0, #0
   13038:	mov	r2, #5
   1303c:	movt	r1, #1
   13040:	bl	1112c <dcgettext@plt>
   13044:	mov	r2, r0
   13048:	mov	r0, #1
   1304c:	mov	r1, r4
   13050:	bl	11198 <error@plt>
   13054:	movw	r1, #39414	; 0x99f6
   13058:	mov	r0, #0
   1305c:	mov	r2, #5
   13060:	movt	r1, #1
   13064:	bl	1112c <dcgettext@plt>
   13068:	mov	r5, r0
   1306c:	add	r0, sl, r9, lsl #2
   13070:	ldr	r0, [r0, #-4]
   13074:	bl	16420 <__assert_fail@plt+0x50d8>
   13078:	mov	r3, r0
   1307c:	mov	r0, #0
   13080:	mov	r1, #0
   13084:	mov	r2, r5
   13088:	bl	11198 <error@plt>
   1308c:	mov	r0, #1
   13090:	bl	11444 <__assert_fail@plt+0xfc>
   13094:	push	{r4, r5, r6, sl, fp, lr}
   13098:	add	fp, sp, #16
   1309c:	movw	r4, #45448	; 0xb188
   130a0:	movt	r4, #2
   130a4:	ldr	r5, [r4, #36]	; 0x24
   130a8:	cmp	r5, #0
   130ac:	beq	130d4 <__assert_fail@plt+0x1d8c>
   130b0:	ldr	r0, [r5, #20]
   130b4:	bl	140ac <__assert_fail@plt+0x2d64>
   130b8:	mov	r6, #0
   130bc:	str	r6, [r5, #20]
   130c0:	ldr	r0, [r5, #8]
   130c4:	bl	140ac <__assert_fail@plt+0x2d64>
   130c8:	str	r6, [r5, #8]
   130cc:	ldr	r0, [r4, #36]	; 0x24
   130d0:	bl	140ac <__assert_fail@plt+0x2d64>
   130d4:	ldr	r5, [r4, #40]	; 0x28
   130d8:	cmp	r5, #0
   130dc:	beq	13108 <__assert_fail@plt+0x1dc0>
   130e0:	ldr	r0, [r5, #20]
   130e4:	bl	140ac <__assert_fail@plt+0x2d64>
   130e8:	mov	r6, #0
   130ec:	str	r6, [r5, #20]
   130f0:	ldr	r0, [r5, #8]
   130f4:	bl	140ac <__assert_fail@plt+0x2d64>
   130f8:	str	r6, [r5, #8]
   130fc:	ldr	r0, [r4, #40]	; 0x28
   13100:	pop	{r4, r5, r6, sl, fp, lr}
   13104:	b	140ac <__assert_fail@plt+0x2d64>
   13108:	pop	{r4, r5, r6, sl, fp, pc}
   1310c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13110:	add	fp, sp, #28
   13114:	sub	sp, sp, #20
   13118:	movw	r9, #45320	; 0xb108
   1311c:	mov	r6, r0
   13120:	mov	sl, #0
   13124:	movt	r9, #2
   13128:	b	13164 <__assert_fail@plt+0x1e1c>
   1312c:	mvn	r1, #0
   13130:	str	sl, [sp, #12]
   13134:	str	r1, [sp, #8]
   13138:	sub	r5, r8, #48	; 0x30
   1313c:	sub	r7, r1, #1
   13140:	mov	r0, #12
   13144:	bl	16ba4 <__assert_fail@plt+0x585c>
   13148:	ldr	r1, [r9]
   1314c:	cmp	r4, #0
   13150:	mov	r6, r4
   13154:	stm	r0, {r5, r7, sl}
   13158:	str	r0, [r1, #8]
   1315c:	str	r0, [r9]
   13160:	beq	13220 <__assert_fail@plt+0x1ed8>
   13164:	movw	r1, #39911	; 0x9be7
   13168:	mov	r0, r6
   1316c:	movt	r1, #1
   13170:	bl	11300 <strpbrk@plt>
   13174:	cmp	r0, #0
   13178:	mov	r4, #0
   1317c:	strbne	sl, [r0], #1
   13180:	ldrb	r8, [r6]
   13184:	movne	r4, r0
   13188:	sub	r0, r8, #49	; 0x31
   1318c:	cmp	r0, #2
   13190:	bcs	131f8 <__assert_fail@plt+0x1eb0>
   13194:	ldrb	r0, [r6, #1]
   13198:	cmp	r0, #46	; 0x2e
   1319c:	bne	13214 <__assert_fail@plt+0x1ecc>
   131a0:	movw	r0, #39914	; 0x9bea
   131a4:	add	r6, r6, #2
   131a8:	mov	r1, #0
   131ac:	mov	r2, #10
   131b0:	add	r3, sp, #8
   131b4:	movt	r0, #1
   131b8:	str	r0, [sp]
   131bc:	mov	r0, r6
   131c0:	bl	17b84 <__assert_fail@plt+0x683c>
   131c4:	cmp	r0, #1
   131c8:	beq	1312c <__assert_fail@plt+0x1de4>
   131cc:	ldr	r1, [sp, #8]
   131d0:	ldr	r2, [sp, #12]
   131d4:	cmp	r0, #0
   131d8:	bne	131e4 <__assert_fail@plt+0x1e9c>
   131dc:	cmp	r2, #0
   131e0:	bne	1312c <__assert_fail@plt+0x1de4>
   131e4:	cmp	r0, #0
   131e8:	bne	13234 <__assert_fail@plt+0x1eec>
   131ec:	orrs	r0, r1, r2
   131f0:	bne	13138 <__assert_fail@plt+0x1df0>
   131f4:	b	13234 <__assert_fail@plt+0x1eec>
   131f8:	cmp	r8, #48	; 0x30
   131fc:	bne	13228 <__assert_fail@plt+0x1ee0>
   13200:	ldrb	r0, [r6, #1]
   13204:	mov	r5, #0
   13208:	mov	r7, #0
   1320c:	cmp	r0, #0
   13210:	beq	13140 <__assert_fail@plt+0x1df8>
   13214:	movw	r1, #39915	; 0x9beb
   13218:	movt	r1, #1
   1321c:	b	1323c <__assert_fail@plt+0x1ef4>
   13220:	sub	sp, fp, #28
   13224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13228:	movw	r1, #39943	; 0x9c07
   1322c:	movt	r1, #1
   13230:	b	1323c <__assert_fail@plt+0x1ef4>
   13234:	movw	r1, #39253	; 0x9955
   13238:	movt	r1, #1
   1323c:	mov	r0, #0
   13240:	mov	r2, #5
   13244:	bl	1112c <dcgettext@plt>
   13248:	mov	r4, r0
   1324c:	mov	r0, r6
   13250:	bl	16420 <__assert_fail@plt+0x50d8>
   13254:	mov	r3, r0
   13258:	mov	r0, #1
   1325c:	mov	r1, #0
   13260:	mov	r2, r4
   13264:	bl	11198 <error@plt>
   13268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1326c:	add	fp, sp, #28
   13270:	sub	sp, sp, #20
   13274:	mov	r4, r0
   13278:	ldr	r0, [r3]
   1327c:	movw	r9, #45448	; 0xb188
   13280:	mov	r5, r3
   13284:	mov	r6, r1
   13288:	movt	r9, #2
   1328c:	cmp	r0, #2
   13290:	bne	133b0 <__assert_fail@plt+0x2068>
   13294:	ldr	r7, [r6]
   13298:	clz	r0, r7
   1329c:	lsr	r1, r0, #5
   132a0:	ldr	r0, [r6, r1, lsl #2]
   132a4:	cmp	r0, #3
   132a8:	bhi	13394 <__assert_fail@plt+0x204c>
   132ac:	add	r1, r9, r1, lsl #2
   132b0:	ldr	r8, [r1, #28]
   132b4:	add	r1, pc, #0
   132b8:	ldr	pc, [r1, r0, lsl #2]
   132bc:	andeq	r3, r1, ip, ror #8
   132c0:	andeq	r3, r1, ip, asr #5
   132c4:	andeq	r3, r1, ip, lsr #6
   132c8:	andeq	r3, r1, ip, lsl #7
   132cc:	ldr	r0, [r2]
   132d0:	add	r3, sp, #8
   132d4:	mov	r1, #0
   132d8:	sub	r0, r0, #1
   132dc:	str	r0, [r2]
   132e0:	movw	r0, #39914	; 0x9bea
   132e4:	mov	r2, #10
   132e8:	movt	r0, #1
   132ec:	str	r0, [sp]
   132f0:	mov	r0, r8
   132f4:	bl	17b84 <__assert_fail@plt+0x683c>
   132f8:	cmp	r0, #1
   132fc:	beq	13318 <__assert_fail@plt+0x1fd0>
   13300:	ldr	sl, [sp, #8]
   13304:	ldr	r1, [sp, #12]
   13308:	cmp	r0, #0
   1330c:	bne	133ec <__assert_fail@plt+0x20a4>
   13310:	cmp	r1, #0
   13314:	beq	133ec <__assert_fail@plt+0x20a4>
   13318:	mov	r0, #0
   1331c:	mvn	sl, #0
   13320:	str	r0, [sp, #12]
   13324:	str	sl, [sp, #8]
   13328:	b	133fc <__assert_fail@plt+0x20b4>
   1332c:	ldr	r0, [r2, #4]
   13330:	add	r3, sp, #8
   13334:	mov	r1, #0
   13338:	sub	r0, r0, #1
   1333c:	str	r0, [r2, #4]
   13340:	movw	r0, #39914	; 0x9bea
   13344:	mov	r2, #10
   13348:	movt	r0, #1
   1334c:	str	r0, [sp]
   13350:	mov	r0, r8
   13354:	bl	17b84 <__assert_fail@plt+0x683c>
   13358:	cmp	r0, #1
   1335c:	beq	13378 <__assert_fail@plt+0x2030>
   13360:	ldr	sl, [sp, #8]
   13364:	ldr	r1, [sp, #12]
   13368:	cmp	r0, #0
   1336c:	bne	1342c <__assert_fail@plt+0x20e4>
   13370:	cmp	r1, #0
   13374:	beq	1342c <__assert_fail@plt+0x20e4>
   13378:	mov	r0, #0
   1337c:	mvn	sl, #0
   13380:	str	r0, [sp, #12]
   13384:	str	sl, [sp, #8]
   13388:	b	1343c <__assert_fail@plt+0x20f4>
   1338c:	mov	r0, r8
   13390:	bl	1310c <__assert_fail@plt+0x1dc4>
   13394:	mov	r0, #1
   13398:	cmp	r7, #0
   1339c:	beq	133b0 <__assert_fail@plt+0x2068>
   133a0:	ldr	r1, [r6, #4]
   133a4:	str	r1, [r6]
   133a8:	ldr	r1, [r9, #32]
   133ac:	str	r1, [r9, #28]
   133b0:	ldr	r1, [fp, #8]
   133b4:	ldr	r2, [r1]
   133b8:	str	r2, [r6, r0, lsl #2]
   133bc:	add	r2, r9, r0, lsl #2
   133c0:	add	r0, r0, #1
   133c4:	str	r4, [r2, #28]
   133c8:	str	r0, [r5]
   133cc:	ldr	r0, [r1]
   133d0:	cmp	r0, #3
   133d4:	bne	133e4 <__assert_fail@plt+0x209c>
   133d8:	ldr	r0, [fp, #12]
   133dc:	mov	r1, #3
   133e0:	str	r1, [r0]
   133e4:	sub	sp, fp, #28
   133e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ec:	cmp	r0, #0
   133f0:	bne	134d8 <__assert_fail@plt+0x2190>
   133f4:	orrs	r0, sl, r1
   133f8:	beq	134d8 <__assert_fail@plt+0x2190>
   133fc:	movw	r1, #45324	; 0xb10c
   13400:	sub	r0, sl, #1
   13404:	movt	r1, #2
   13408:	ldr	r8, [r1]
   1340c:	cmn	r8, #1
   13410:	cmpne	r8, r0
   13414:	bne	134ac <__assert_fail@plt+0x2164>
   13418:	str	r0, [r1]
   1341c:	mov	r0, #1
   13420:	cmp	r7, #0
   13424:	bne	133a0 <__assert_fail@plt+0x2058>
   13428:	b	133b0 <__assert_fail@plt+0x2068>
   1342c:	cmp	r0, #0
   13430:	bne	134d8 <__assert_fail@plt+0x2190>
   13434:	orrs	r0, sl, r1
   13438:	beq	134d8 <__assert_fail@plt+0x2190>
   1343c:	movw	r1, #45324	; 0xb10c
   13440:	sub	r0, sl, #1
   13444:	movt	r1, #2
   13448:	ldr	r8, [r1, #4]
   1344c:	cmn	r8, #1
   13450:	cmpne	r8, r0
   13454:	bne	134ac <__assert_fail@plt+0x2164>
   13458:	str	r0, [r1, #4]
   1345c:	mov	r0, #1
   13460:	cmp	r7, #0
   13464:	bne	133a0 <__assert_fail@plt+0x2058>
   13468:	b	133b0 <__assert_fail@plt+0x2068>
   1346c:	movw	r1, #39981	; 0x9c2d
   13470:	mov	r0, #0
   13474:	mov	r2, #5
   13478:	movt	r1, #1
   1347c:	bl	1112c <dcgettext@plt>
   13480:	mov	r5, r0
   13484:	mov	r0, #4
   13488:	mov	r1, r4
   1348c:	bl	15ef8 <__assert_fail@plt+0x4bb0>
   13490:	mov	r3, r0
   13494:	mov	r0, #0
   13498:	mov	r1, #0
   1349c:	mov	r2, r5
   134a0:	bl	11198 <error@plt>
   134a4:	mov	r0, #1
   134a8:	bl	11444 <__assert_fail@plt+0xfc>
   134ac:	movw	r1, #39877	; 0x9bc5
   134b0:	mov	r0, #0
   134b4:	mov	r2, #5
   134b8:	movt	r1, #1
   134bc:	bl	1112c <dcgettext@plt>
   134c0:	mov	r2, r0
   134c4:	add	r3, r8, #1
   134c8:	mov	r0, #1
   134cc:	mov	r1, #0
   134d0:	str	sl, [sp]
   134d4:	bl	11198 <error@plt>
   134d8:	movw	r1, #39253	; 0x9955
   134dc:	mov	r0, #0
   134e0:	mov	r2, #5
   134e4:	movt	r1, #1
   134e8:	bl	1112c <dcgettext@plt>
   134ec:	mov	r4, r0
   134f0:	mov	r0, r8
   134f4:	bl	16420 <__assert_fail@plt+0x50d8>
   134f8:	mov	r3, r0
   134fc:	mov	r0, #1
   13500:	mov	r1, #0
   13504:	mov	r2, r4
   13508:	bl	11198 <error@plt>
   1350c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13510:	add	fp, sp, #28
   13514:	sub	sp, sp, #4
   13518:	movw	r5, #45448	; 0xb188
   1351c:	movw	r7, #45324	; 0xb10c
   13520:	mov	r9, r1
   13524:	mov	r4, r0
   13528:	movt	r5, #2
   1352c:	movt	r7, #2
   13530:	ldr	r8, [r5, #60]	; 0x3c
   13534:	cmp	r8, #0
   13538:	beq	13628 <__assert_fail@plt+0x22e0>
   1353c:	ldr	r2, [r8]
   13540:	add	r0, r5, #80	; 0x50
   13544:	mov	r5, r4
   13548:	mov	r1, r9
   1354c:	ldr	sl, [r7, #8]
   13550:	cmp	r4, r0
   13554:	moveq	r5, r9
   13558:	cmp	r2, #1
   1355c:	moveq	r1, r4
   13560:	cmp	r2, #0
   13564:	moveq	r1, r5
   13568:	cmp	r4, r0
   1356c:	addeq	r7, r7, #4
   13570:	cmp	r2, #0
   13574:	mov	r0, r7
   13578:	addne	r0, r8, #4
   1357c:	ldr	r0, [r0]
   13580:	bl	13c6c <__assert_fail@plt+0x2924>
   13584:	ldr	r8, [r8, #8]
   13588:	uxtb	r6, sl
   1358c:	cmp	sl, #0
   13590:	movw	sl, #45436	; 0xb17c
   13594:	movt	sl, #2
   13598:	movwmi	r6, #32
   1359c:	cmp	r8, #0
   135a0:	beq	13608 <__assert_fail@plt+0x22c0>
   135a4:	ldr	r0, [sl]
   135a8:	ldr	r1, [r0, #20]
   135ac:	ldr	r2, [r0, #24]
   135b0:	cmp	r1, r2
   135b4:	bcs	135fc <__assert_fail@plt+0x22b4>
   135b8:	add	r2, r1, #1
   135bc:	str	r2, [r0, #20]
   135c0:	strb	r6, [r1]
   135c4:	ldr	r0, [r8]
   135c8:	mov	r1, r9
   135cc:	cmp	r0, #1
   135d0:	moveq	r1, r4
   135d4:	cmp	r0, #0
   135d8:	mov	r0, r7
   135dc:	addne	r0, r8, #4
   135e0:	moveq	r1, r5
   135e4:	ldr	r0, [r0]
   135e8:	bl	13c6c <__assert_fail@plt+0x2924>
   135ec:	ldr	r8, [r8, #8]
   135f0:	cmp	r8, #0
   135f4:	bne	135a4 <__assert_fail@plt+0x225c>
   135f8:	b	13608 <__assert_fail@plt+0x22c0>
   135fc:	mov	r1, r6
   13600:	bl	112c4 <__overflow@plt>
   13604:	b	135c4 <__assert_fail@plt+0x227c>
   13608:	movw	r0, #45448	; 0xb188
   1360c:	mov	r1, #10
   13610:	movt	r0, #2
   13614:	ldrb	r0, [r0, #7]
   13618:	cmp	r0, #0
   1361c:	ldr	r0, [sl]
   13620:	movwne	r1, #0
   13624:	b	13684 <__assert_fail@plt+0x233c>
   13628:	add	r0, r5, #80	; 0x50
   1362c:	mov	r1, r4
   13630:	cmp	r4, r0
   13634:	mov	r0, r7
   13638:	addeq	r0, r0, #4
   1363c:	moveq	r1, r9
   13640:	ldr	r0, [r0]
   13644:	bl	13c6c <__assert_fail@plt+0x2924>
   13648:	ldr	r2, [r5, #20]
   1364c:	ldr	r1, [r7]
   13650:	mov	r0, r4
   13654:	bl	13cc8 <__assert_fail@plt+0x2980>
   13658:	ldr	r2, [r5, #24]
   1365c:	ldr	r1, [r7, #4]
   13660:	mov	r0, r9
   13664:	bl	13cc8 <__assert_fail@plt+0x2980>
   13668:	ldrb	r0, [r5, #7]
   1366c:	mov	r1, #10
   13670:	cmp	r0, #0
   13674:	movw	r0, #45436	; 0xb17c
   13678:	movt	r0, #2
   1367c:	movwne	r1, #0
   13680:	ldr	r0, [r0]
   13684:	ldr	r2, [r0, #20]
   13688:	ldr	r3, [r0, #24]
   1368c:	cmp	r2, r3
   13690:	addcc	r3, r2, #1
   13694:	strcc	r3, [r0, #20]
   13698:	strbcc	r1, [r2]
   1369c:	subcc	sp, fp, #28
   136a0:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a4:	sub	sp, fp, #28
   136a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136ac:	b	112c4 <__overflow@plt>
   136b0:	push	{r4, r5, fp, lr}
   136b4:	add	fp, sp, #8
   136b8:	mov	r5, r0
   136bc:	ldr	r0, [r0, #12]
   136c0:	mov	ip, #0
   136c4:	mov	r4, #0
   136c8:	cmp	r0, r2
   136cc:	mov	r0, #0
   136d0:	bhi	13720 <__assert_fail@plt+0x23d8>
   136d4:	ldr	r2, [r1, #12]
   136d8:	mov	r5, #0
   136dc:	cmp	r2, r3
   136e0:	bhi	1373c <__assert_fail@plt+0x23f4>
   136e4:	cmp	r4, #0
   136e8:	beq	13750 <__assert_fail@plt+0x2408>
   136ec:	cmp	r5, #0
   136f0:	beq	13760 <__assert_fail@plt+0x2418>
   136f4:	movw	r1, #45448	; 0xb188
   136f8:	movt	r1, #2
   136fc:	ldrb	r2, [r1, #5]
   13700:	cmp	r2, #1
   13704:	bne	13768 <__assert_fail@plt+0x2420>
   13708:	cmp	r4, r5
   1370c:	mov	r2, r5
   13710:	mov	r1, ip
   13714:	movcc	r2, r4
   13718:	bl	14408 <__assert_fail@plt+0x30c0>
   1371c:	b	1379c <__assert_fail@plt+0x2454>
   13720:	ldr	r5, [r5, #20]
   13724:	ldr	r0, [r5, r2, lsl #3]!
   13728:	ldr	r4, [r5, #4]
   1372c:	ldr	r2, [r1, #12]
   13730:	mov	r5, #0
   13734:	cmp	r2, r3
   13738:	bls	136e4 <__assert_fail@plt+0x239c>
   1373c:	ldr	r1, [r1, #20]
   13740:	ldr	ip, [r1, r3, lsl #3]!
   13744:	ldr	r5, [r1, #4]
   13748:	cmp	r4, #0
   1374c:	bne	136ec <__assert_fail@plt+0x23a4>
   13750:	cmp	r5, #0
   13754:	mvnne	r5, #0
   13758:	mov	r0, r5
   1375c:	pop	{r4, r5, fp, pc}
   13760:	mov	r0, #1
   13764:	pop	{r4, r5, fp, pc}
   13768:	ldrb	r1, [r1]
   1376c:	cmp	r1, #0
   13770:	beq	13788 <__assert_fail@plt+0x2440>
   13774:	mov	r1, r4
   13778:	mov	r2, ip
   1377c:	mov	r3, r5
   13780:	pop	{r4, r5, fp, lr}
   13784:	b	17124 <__assert_fail@plt+0x5ddc>
   13788:	cmp	r4, r5
   1378c:	mov	r2, r5
   13790:	mov	r1, ip
   13794:	movcc	r2, r4
   13798:	bl	11120 <memcmp@plt>
   1379c:	cmp	r0, #0
   137a0:	popne	{r4, r5, fp, pc}
   137a4:	subs	r0, r4, r5
   137a8:	movwne	r0, #1
   137ac:	cmp	r4, r5
   137b0:	mvncc	r0, #0
   137b4:	pop	{r4, r5, fp, pc}
   137b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137bc:	add	fp, sp, #28
   137c0:	sub	sp, sp, #44	; 0x2c
   137c4:	movw	r9, #45448	; 0xb188
   137c8:	sub	r7, r2, #1
   137cc:	mov	r5, r1
   137d0:	mov	r4, r0
   137d4:	mov	r6, r2
   137d8:	movt	r9, #2
   137dc:	ldr	r0, [r5]
   137e0:	add	r8, r9, r7, lsl #2
   137e4:	ldr	r1, [r8, #44]	; 0x2c
   137e8:	cmp	r0, r1
   137ec:	beq	13808 <__assert_fail@plt+0x24c0>
   137f0:	mov	sl, r0
   137f4:	cmp	sl, #0
   137f8:	beq	1381c <__assert_fail@plt+0x24d4>
   137fc:	mov	r0, #0
   13800:	str	r0, [sl, #12]
   13804:	b	13830 <__assert_fail@plt+0x24e8>
   13808:	ldr	sl, [r8, #36]	; 0x24
   1380c:	str	r0, [r8, #36]	; 0x24
   13810:	str	sl, [r5]
   13814:	cmp	sl, #0
   13818:	bne	137fc <__assert_fail@plt+0x24b4>
   1381c:	mov	r0, #1
   13820:	mov	r1, #24
   13824:	bl	16fb8 <__assert_fail@plt+0x5c70>
   13828:	mov	sl, r0
   1382c:	str	r0, [r5]
   13830:	ldrb	r0, [r9, #7]
   13834:	mov	r2, #10
   13838:	mov	r1, r4
   1383c:	cmp	r0, #0
   13840:	mov	r0, sl
   13844:	movwne	r2, #0
   13848:	bl	142fc <__assert_fail@plt+0x2fb4>
   1384c:	cmp	r0, #0
   13850:	beq	1395c <__assert_fail@plt+0x2614>
   13854:	add	r1, r9, r7, lsl #3
   13858:	str	r6, [sp, #28]
   1385c:	str	r7, [sp, #36]	; 0x24
   13860:	ldr	r0, [r1, #64]!	; 0x40
   13864:	str	r1, [sp, #24]
   13868:	adds	r0, r0, #1
   1386c:	str	r0, [r1]
   13870:	ldr	r0, [r1, #4]
   13874:	adc	r0, r0, #0
   13878:	str	r0, [r1, #4]
   1387c:	ldmib	sl, {r0, r6}
   13880:	add	r4, r6, r0
   13884:	sub	r1, r4, #1
   13888:	cmp	r6, r1
   1388c:	str	r1, [fp, #-32]	; 0xffffffe0
   13890:	beq	13b38 <__assert_fail@plt+0x27f0>
   13894:	movw	r1, #45324	; 0xb10c
   13898:	str	r8, [sp, #32]
   1389c:	movt	r1, #2
   138a0:	ldr	r7, [r1, #8]
   138a4:	cmp	r7, #0
   138a8:	bmi	13990 <__assert_fail@plt+0x2648>
   138ac:	cmp	r7, #10
   138b0:	beq	13990 <__assert_fail@plt+0x2648>
   138b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   138b8:	mov	r1, r7
   138bc:	sub	r2, r0, r6
   138c0:	mov	r0, r6
   138c4:	bl	11288 <memchr@plt>
   138c8:	cmp	r0, #0
   138cc:	beq	13ae4 <__assert_fail@plt+0x279c>
   138d0:	ldr	r9, [sl, #12]
   138d4:	mov	r4, r0
   138d8:	add	r5, sl, #16
   138dc:	ldr	r0, [r5]
   138e0:	sub	r8, r4, r6
   138e4:	cmp	r9, r0
   138e8:	bcc	13954 <__assert_fail@plt+0x260c>
   138ec:	ldr	r0, [sl, #20]
   138f0:	mov	r1, r5
   138f4:	mov	r2, #8
   138f8:	bl	16d50 <__assert_fail@plt+0x5a08>
   138fc:	movw	r1, #45324	; 0xb10c
   13900:	str	r0, [sl, #20]
   13904:	movt	r1, #2
   13908:	ldr	r9, [sl, #12]
   1390c:	ldr	r7, [r1, #8]
   13910:	str	r6, [r0, r9, lsl #3]!
   13914:	add	r6, r4, #1
   13918:	add	r9, r9, #1
   1391c:	mov	r1, r7
   13920:	str	r8, [r0, #4]
   13924:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13928:	str	r9, [sl, #12]
   1392c:	sub	r2, r0, r6
   13930:	mov	r0, r6
   13934:	bl	11288 <memchr@plt>
   13938:	mov	r4, r0
   1393c:	cmp	r0, #0
   13940:	beq	13ae4 <__assert_fail@plt+0x279c>
   13944:	ldr	r0, [r5]
   13948:	sub	r8, r4, r6
   1394c:	cmp	r9, r0
   13950:	bcs	138ec <__assert_fail@plt+0x25a4>
   13954:	ldr	r0, [sl, #20]
   13958:	b	13910 <__assert_fail@plt+0x25c8>
   1395c:	ldrb	r0, [r4]
   13960:	tst	r0, #32
   13964:	bne	13c40 <__assert_fail@plt+0x28f8>
   13968:	ldr	r0, [sl, #20]
   1396c:	bl	140ac <__assert_fail@plt+0x2d64>
   13970:	mov	r4, #0
   13974:	str	r4, [sl, #20]
   13978:	ldr	r0, [sl, #8]
   1397c:	bl	140ac <__assert_fail@plt+0x2d64>
   13980:	str	r4, [sl, #8]
   13984:	mov	r0, r4
   13988:	sub	sp, fp, #28
   1398c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13990:	cmn	r7, #1
   13994:	bgt	13ae4 <__assert_fail@plt+0x279c>
   13998:	sub	r5, r0, #1
   1399c:	bl	111f8 <__ctype_b_loc@plt>
   139a0:	mov	ip, r0
   139a4:	ldr	r0, [r0]
   139a8:	ldrb	r1, [r6]
   139ac:	cmp	r1, #10
   139b0:	bne	139cc <__assert_fail@plt+0x2684>
   139b4:	subs	r5, r5, #1
   139b8:	add	r6, r6, #1
   139bc:	beq	13b38 <__assert_fail@plt+0x27f0>
   139c0:	ldrb	r1, [r6]
   139c4:	cmp	r1, #10
   139c8:	beq	139b4 <__assert_fail@plt+0x266c>
   139cc:	add	r1, r0, r1, lsl #1
   139d0:	ldrh	r1, [r1]
   139d4:	ands	r1, r1, #1
   139d8:	bne	139b4 <__assert_fail@plt+0x266c>
   139dc:	sub	r5, r4, #3
   139e0:	sub	r4, r4, #2
   139e4:	add	r1, sl, #16
   139e8:	mov	r3, r6
   139ec:	mov	r7, r3
   139f0:	cmp	r4, r3
   139f4:	beq	13a20 <__assert_fail@plt+0x26d8>
   139f8:	ldrb	r2, [r7, #1]
   139fc:	add	r3, r7, #1
   13a00:	mov	r9, #0
   13a04:	cmp	r2, #10
   13a08:	beq	13a28 <__assert_fail@plt+0x26e0>
   13a0c:	add	r2, r0, r2, lsl #1
   13a10:	ldrh	r2, [r2]
   13a14:	ands	r2, r2, #1
   13a18:	beq	139ec <__assert_fail@plt+0x26a4>
   13a1c:	b	13a28 <__assert_fail@plt+0x26e0>
   13a20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13a24:	mov	r9, #1
   13a28:	ldr	r2, [sl, #12]
   13a2c:	ldr	r0, [sl, #16]
   13a30:	sub	r3, r3, r6
   13a34:	cmp	r2, r0
   13a38:	bcs	13a44 <__assert_fail@plt+0x26fc>
   13a3c:	ldr	r0, [sl, #20]
   13a40:	b	13a70 <__assert_fail@plt+0x2728>
   13a44:	ldr	r0, [sl, #20]
   13a48:	mov	r2, #8
   13a4c:	str	ip, [sp, #20]
   13a50:	mov	r8, r1
   13a54:	str	r3, [sp, #16]
   13a58:	bl	16d50 <__assert_fail@plt+0x5a08>
   13a5c:	str	r0, [sl, #20]
   13a60:	ldr	r3, [sp, #16]
   13a64:	ldr	ip, [sp, #20]
   13a68:	mov	r1, r8
   13a6c:	ldr	r2, [sl, #12]
   13a70:	str	r6, [r0, r2, lsl #3]!
   13a74:	cmp	r9, #0
   13a78:	movw	r9, #45448	; 0xb188
   13a7c:	ldr	r8, [sp, #32]
   13a80:	movt	r9, #2
   13a84:	str	r3, [r0, #4]
   13a88:	add	r0, r2, #1
   13a8c:	str	r0, [sl, #12]
   13a90:	bne	13b38 <__assert_fail@plt+0x27f0>
   13a94:	cmp	r5, r7
   13a98:	beq	13ae0 <__assert_fail@plt+0x2798>
   13a9c:	ldr	r0, [ip]
   13aa0:	ldrb	r2, [r7, #2]
   13aa4:	cmp	r2, #10
   13aa8:	bne	13ac4 <__assert_fail@plt+0x277c>
   13aac:	add	r7, r7, #1
   13ab0:	cmp	r5, r7
   13ab4:	beq	13ae0 <__assert_fail@plt+0x2798>
   13ab8:	ldrb	r2, [r7, #2]
   13abc:	cmp	r2, #10
   13ac0:	beq	13aac <__assert_fail@plt+0x2764>
   13ac4:	add	r2, r0, r2, lsl #1
   13ac8:	ldrh	r2, [r2]
   13acc:	ands	r2, r2, #1
   13ad0:	bne	13aac <__assert_fail@plt+0x2764>
   13ad4:	add	r6, r7, #2
   13ad8:	cmp	r5, r7
   13adc:	bne	139e8 <__assert_fail@plt+0x26a0>
   13ae0:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13ae4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13ae8:	mov	r1, sl
   13aec:	sub	r4, r0, r6
   13af0:	ldr	r0, [r1, #16]!
   13af4:	ldr	r2, [r1, #-4]
   13af8:	cmp	r2, r0
   13afc:	bcs	13b08 <__assert_fail@plt+0x27c0>
   13b00:	ldr	r0, [sl, #20]
   13b04:	b	13b1c <__assert_fail@plt+0x27d4>
   13b08:	ldr	r0, [sl, #20]
   13b0c:	mov	r2, #8
   13b10:	bl	16d50 <__assert_fail@plt+0x5a08>
   13b14:	str	r0, [sl, #20]
   13b18:	ldr	r2, [sl, #12]
   13b1c:	ldr	r8, [sp, #32]
   13b20:	movw	r9, #45448	; 0xb188
   13b24:	str	r6, [r0, r2, lsl #3]!
   13b28:	movt	r9, #2
   13b2c:	str	r4, [r0, #4]
   13b30:	add	r0, r2, #1
   13b34:	str	r0, [sl, #12]
   13b38:	ldr	r0, [r8, #44]	; 0x2c
   13b3c:	cmp	r0, #0
   13b40:	beq	13c2c <__assert_fail@plt+0x28e4>
   13b44:	ldr	r1, [r9, #12]
   13b48:	cmp	r1, #1
   13b4c:	beq	13b64 <__assert_fail@plt+0x281c>
   13b50:	cmp	r1, #2
   13b54:	beq	13c2c <__assert_fail@plt+0x28e4>
   13b58:	ldrb	r1, [r9, #2]
   13b5c:	cmp	r1, #1
   13b60:	bne	13c2c <__assert_fail@plt+0x28e4>
   13b64:	ldr	r1, [sp, #36]	; 0x24
   13b68:	add	r4, r9, r1
   13b6c:	ldrb	r1, [r4, #9]
   13b70:	cmp	r1, #0
   13b74:	bne	13c2c <__assert_fail@plt+0x28e4>
   13b78:	ldr	r2, [sp, #28]
   13b7c:	movw	r1, #45324	; 0xb10c
   13b80:	movt	r1, #2
   13b84:	cmp	r2, #1
   13b88:	addne	r1, r1, #4
   13b8c:	ldr	r2, [r1]
   13b90:	mov	r1, sl
   13b94:	mov	r3, r2
   13b98:	bl	136b0 <__assert_fail@plt+0x2368>
   13b9c:	cmp	r0, #1
   13ba0:	blt	13c2c <__assert_fail@plt+0x28e4>
   13ba4:	ldr	r0, [sl, #4]
   13ba8:	cmp	r0, #0
   13bac:	beq	13bd8 <__assert_fail@plt+0x2890>
   13bb0:	ldr	r1, [sl, #8]
   13bb4:	sub	r2, r0, #1
   13bb8:	ldr	r7, [sp, #24]
   13bbc:	mvn	r5, #-2147483648	; 0x80000000
   13bc0:	ldrb	r1, [r1, r2]
   13bc4:	cmp	r1, #10
   13bc8:	moveq	r0, r2
   13bcc:	cmn	r0, #-2147483646	; 0x80000002
   13bd0:	movls	r5, r0
   13bd4:	b	13be4 <__assert_fail@plt+0x289c>
   13bd8:	ldr	r7, [sp, #24]
   13bdc:	mov	r0, #0
   13be0:	mov	r5, r0
   13be4:	movw	r1, #40009	; 0x9c49
   13be8:	ldr	r6, [r9, #12]
   13bec:	mov	r0, #0
   13bf0:	mov	r2, #5
   13bf4:	movt	r1, #1
   13bf8:	bl	1112c <dcgettext@plt>
   13bfc:	mov	r2, r0
   13c00:	ldrd	r0, [r7]
   13c04:	ldr	r3, [r8, #28]
   13c08:	ldr	r7, [sl, #8]
   13c0c:	stm	sp, {r0, r1, r5, r7}
   13c10:	sub	r0, r6, #1
   13c14:	mov	r1, #0
   13c18:	clz	r0, r0
   13c1c:	lsr	r0, r0, #5
   13c20:	bl	11198 <error@plt>
   13c24:	mov	r0, #1
   13c28:	strb	r0, [r4, #9]
   13c2c:	mov	r4, #1
   13c30:	str	sl, [r8, #44]	; 0x2c
   13c34:	mov	r0, r4
   13c38:	sub	sp, fp, #28
   13c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c40:	bl	11240 <__errno_location@plt>
   13c44:	movw	r1, #39998	; 0x9c3e
   13c48:	ldr	r4, [r0]
   13c4c:	mov	r0, #0
   13c50:	mov	r2, #5
   13c54:	movt	r1, #1
   13c58:	bl	1112c <dcgettext@plt>
   13c5c:	mov	r2, r0
   13c60:	mov	r0, #1
   13c64:	mov	r1, r4
   13c68:	bl	11198 <error@plt>
   13c6c:	ldr	r2, [r1, #12]
   13c70:	cmp	r2, r0
   13c74:	bls	13ca4 <__assert_fail@plt+0x295c>
   13c78:	ldr	r1, [r1, #20]
   13c7c:	add	r2, r1, r0, lsl #3
   13c80:	ldr	r2, [r2, #4]
   13c84:	cmp	r2, #0
   13c88:	beq	13ca4 <__assert_fail@plt+0x295c>
   13c8c:	ldr	r0, [r1, r0, lsl #3]
   13c90:	movw	r1, #45436	; 0xb17c
   13c94:	movt	r1, #2
   13c98:	ldr	r3, [r1]
   13c9c:	mov	r1, #1
   13ca0:	b	11114 <fwrite_unlocked@plt>
   13ca4:	movw	r0, #45448	; 0xb188
   13ca8:	movt	r0, #2
   13cac:	ldr	r0, [r0, #16]
   13cb0:	cmp	r0, #0
   13cb4:	bxeq	lr
   13cb8:	movw	r1, #45436	; 0xb17c
   13cbc:	movt	r1, #2
   13cc0:	ldr	r1, [r1]
   13cc4:	b	1109c <fputs_unlocked@plt>
   13cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ccc:	add	fp, sp, #28
   13cd0:	sub	sp, sp, #4
   13cd4:	mov	r5, r0
   13cd8:	movw	r0, #45448	; 0xb188
   13cdc:	mov	r4, r2
   13ce0:	mov	sl, r1
   13ce4:	movt	r0, #2
   13ce8:	ldrb	r0, [r0, #6]
   13cec:	cmp	r0, #0
   13cf0:	movw	r0, #45324	; 0xb10c
   13cf4:	movt	r0, #2
   13cf8:	ldreq	r4, [r5, #12]
   13cfc:	ldr	r9, [r0, #8]
   13d00:	cmp	r9, #0
   13d04:	movwmi	r9, #32
   13d08:	cmp	sl, #0
   13d0c:	cmpne	r4, #0
   13d10:	bne	13d4c <__assert_fail@plt+0x2a04>
   13d14:	add	r6, sl, #1
   13d18:	cmp	r6, r4
   13d1c:	bcs	13d44 <__assert_fail@plt+0x29fc>
   13d20:	uxtb	r7, r9
   13d24:	mov	r0, r7
   13d28:	bl	1133c <putchar_unlocked@plt>
   13d2c:	mov	r0, r6
   13d30:	mov	r1, r5
   13d34:	bl	13c6c <__assert_fail@plt+0x2924>
   13d38:	add	r6, r6, #1
   13d3c:	cmp	r4, r6
   13d40:	bne	13d24 <__assert_fail@plt+0x29dc>
   13d44:	sub	sp, fp, #28
   13d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d4c:	movw	r8, #45436	; 0xb17c
   13d50:	uxtb	r0, r9
   13d54:	mov	r6, #1
   13d58:	movt	r8, #2
   13d5c:	str	r0, [sp]
   13d60:	ldr	r0, [r8]
   13d64:	sub	r7, r6, #1
   13d68:	ldr	r1, [r0, #20]
   13d6c:	ldr	r2, [r0, #24]
   13d70:	cmp	r1, r2
   13d74:	bcs	13dac <__assert_fail@plt+0x2a64>
   13d78:	add	r2, r1, #1
   13d7c:	str	r2, [r0, #20]
   13d80:	strb	r9, [r1]
   13d84:	mov	r0, r7
   13d88:	mov	r1, r5
   13d8c:	bl	13c6c <__assert_fail@plt+0x2924>
   13d90:	cmp	r6, sl
   13d94:	bcs	13d14 <__assert_fail@plt+0x29cc>
   13d98:	add	r0, r6, #1
   13d9c:	cmp	r6, r4
   13da0:	mov	r6, r0
   13da4:	bcc	13d60 <__assert_fail@plt+0x2a18>
   13da8:	b	13d14 <__assert_fail@plt+0x29cc>
   13dac:	ldr	r1, [sp]
   13db0:	bl	112c4 <__overflow@plt>
   13db4:	b	13d84 <__assert_fail@plt+0x2a3c>
   13db8:	movw	r1, #45552	; 0xb1f0
   13dbc:	movt	r1, #2
   13dc0:	str	r0, [r1, #4]
   13dc4:	bx	lr
   13dc8:	movw	r1, #45552	; 0xb1f0
   13dcc:	movt	r1, #2
   13dd0:	strb	r0, [r1]
   13dd4:	bx	lr
   13dd8:	push	{r4, r5, r6, sl, fp, lr}
   13ddc:	add	fp, sp, #16
   13de0:	sub	sp, sp, #8
   13de4:	movw	r0, #45436	; 0xb17c
   13de8:	movt	r0, #2
   13dec:	ldr	r0, [r0]
   13df0:	bl	18910 <__assert_fail@plt+0x75c8>
   13df4:	cmp	r0, #0
   13df8:	beq	13e20 <__assert_fail@plt+0x2ad8>
   13dfc:	movw	r5, #45552	; 0xb1f0
   13e00:	movt	r5, #2
   13e04:	ldrb	r0, [r5]
   13e08:	cmp	r0, #0
   13e0c:	beq	13e4c <__assert_fail@plt+0x2b04>
   13e10:	bl	11240 <__errno_location@plt>
   13e14:	ldr	r0, [r0]
   13e18:	cmp	r0, #32
   13e1c:	bne	13e4c <__assert_fail@plt+0x2b04>
   13e20:	movw	r0, #45424	; 0xb170
   13e24:	movt	r0, #2
   13e28:	ldr	r0, [r0]
   13e2c:	bl	18910 <__assert_fail@plt+0x75c8>
   13e30:	cmp	r0, #0
   13e34:	subeq	sp, fp, #16
   13e38:	popeq	{r4, r5, r6, sl, fp, pc}
   13e3c:	movw	r0, #45340	; 0xb11c
   13e40:	movt	r0, #2
   13e44:	ldr	r0, [r0]
   13e48:	bl	110e4 <_exit@plt>
   13e4c:	movw	r1, #40239	; 0x9d2f
   13e50:	mov	r0, #0
   13e54:	mov	r2, #5
   13e58:	movt	r1, #1
   13e5c:	bl	1112c <dcgettext@plt>
   13e60:	ldr	r6, [r5, #4]
   13e64:	mov	r4, r0
   13e68:	bl	11240 <__errno_location@plt>
   13e6c:	ldr	r5, [r0]
   13e70:	cmp	r6, #0
   13e74:	bne	13e90 <__assert_fail@plt+0x2b48>
   13e78:	movw	r2, #39978	; 0x9c2a
   13e7c:	mov	r0, #0
   13e80:	mov	r1, r5
   13e84:	mov	r3, r4
   13e88:	movt	r2, #1
   13e8c:	b	13eb0 <__assert_fail@plt+0x2b68>
   13e90:	mov	r0, r6
   13e94:	bl	16098 <__assert_fail@plt+0x4d50>
   13e98:	movw	r2, #40251	; 0x9d3b
   13e9c:	mov	r3, r0
   13ea0:	str	r4, [sp]
   13ea4:	mov	r0, #0
   13ea8:	mov	r1, r5
   13eac:	movt	r2, #1
   13eb0:	bl	11198 <error@plt>
   13eb4:	movw	r0, #45340	; 0xb11c
   13eb8:	movt	r0, #2
   13ebc:	ldr	r0, [r0]
   13ec0:	bl	110e4 <_exit@plt>
   13ec4:	b	110c0 <posix_fadvise64@plt>
   13ec8:	cmp	r0, #0
   13ecc:	bxeq	lr
   13ed0:	push	{r4, sl, fp, lr}
   13ed4:	add	fp, sp, #8
   13ed8:	sub	sp, sp, #16
   13edc:	mov	r4, r1
   13ee0:	bl	11270 <fileno@plt>
   13ee4:	mov	r1, #0
   13ee8:	mov	r2, #0
   13eec:	mov	r3, #0
   13ef0:	str	r1, [sp]
   13ef4:	stmib	sp, {r1, r4}
   13ef8:	bl	110c0 <posix_fadvise64@plt>
   13efc:	sub	sp, fp, #8
   13f00:	pop	{r4, sl, fp, pc}
   13f04:	push	{r4, r5, r6, sl, fp, lr}
   13f08:	add	fp, sp, #16
   13f0c:	sub	sp, sp, #8
   13f10:	mov	r4, r0
   13f14:	bl	11270 <fileno@plt>
   13f18:	cmn	r0, #1
   13f1c:	ble	13f90 <__assert_fail@plt+0x2c48>
   13f20:	mov	r0, r4
   13f24:	bl	111c8 <__freading@plt>
   13f28:	cmp	r0, #0
   13f2c:	beq	13f58 <__assert_fail@plt+0x2c10>
   13f30:	mov	r0, r4
   13f34:	bl	11270 <fileno@plt>
   13f38:	mov	r1, #1
   13f3c:	mov	r2, #0
   13f40:	mov	r3, #0
   13f44:	str	r1, [sp]
   13f48:	bl	11168 <lseek64@plt>
   13f4c:	and	r0, r0, r1
   13f50:	cmn	r0, #1
   13f54:	beq	13f90 <__assert_fail@plt+0x2c48>
   13f58:	mov	r0, r4
   13f5c:	bl	13fa0 <__assert_fail@plt+0x2c58>
   13f60:	cmp	r0, #0
   13f64:	beq	13f90 <__assert_fail@plt+0x2c48>
   13f68:	bl	11240 <__errno_location@plt>
   13f6c:	ldr	r6, [r0]
   13f70:	mov	r5, r0
   13f74:	mov	r0, r4
   13f78:	bl	11294 <fclose@plt>
   13f7c:	cmp	r6, #0
   13f80:	strne	r6, [r5]
   13f84:	mvnne	r0, #0
   13f88:	sub	sp, fp, #16
   13f8c:	pop	{r4, r5, r6, sl, fp, pc}
   13f90:	mov	r0, r4
   13f94:	sub	sp, fp, #16
   13f98:	pop	{r4, r5, r6, sl, fp, lr}
   13f9c:	b	11294 <fclose@plt>
   13fa0:	push	{r4, sl, fp, lr}
   13fa4:	add	fp, sp, #8
   13fa8:	sub	sp, sp, #8
   13fac:	mov	r4, r0
   13fb0:	cmp	r0, #0
   13fb4:	beq	13fec <__assert_fail@plt+0x2ca4>
   13fb8:	mov	r0, r4
   13fbc:	bl	111c8 <__freading@plt>
   13fc0:	cmp	r0, #0
   13fc4:	beq	13fec <__assert_fail@plt+0x2ca4>
   13fc8:	ldrb	r0, [r4, #1]
   13fcc:	tst	r0, #1
   13fd0:	beq	13fec <__assert_fail@plt+0x2ca4>
   13fd4:	mov	r0, #1
   13fd8:	mov	r2, #0
   13fdc:	mov	r3, #0
   13fe0:	str	r0, [sp]
   13fe4:	mov	r0, r4
   13fe8:	bl	140d4 <__assert_fail@plt+0x2d8c>
   13fec:	mov	r0, r4
   13ff0:	sub	sp, fp, #8
   13ff4:	pop	{r4, sl, fp, lr}
   13ff8:	b	110cc <fflush@plt>
   13ffc:	push	{r4, r5, r6, r7, fp, lr}
   14000:	add	fp, sp, #16
   14004:	mov	r5, r1
   14008:	bl	112f4 <fopen64@plt>
   1400c:	mov	r4, #0
   14010:	cmp	r0, #0
   14014:	beq	1407c <__assert_fail@plt+0x2d34>
   14018:	mov	r6, r0
   1401c:	bl	11270 <fileno@plt>
   14020:	cmp	r0, #2
   14024:	bhi	14084 <__assert_fail@plt+0x2d3c>
   14028:	bl	164d8 <__assert_fail@plt+0x5190>
   1402c:	cmn	r0, #1
   14030:	ble	1408c <__assert_fail@plt+0x2d44>
   14034:	mov	r7, r0
   14038:	mov	r0, r6
   1403c:	bl	13f04 <__assert_fail@plt+0x2bbc>
   14040:	cmp	r0, #0
   14044:	bne	14060 <__assert_fail@plt+0x2d18>
   14048:	mov	r0, r7
   1404c:	mov	r1, r5
   14050:	bl	11084 <fdopen@plt>
   14054:	mov	r4, r0
   14058:	cmp	r0, #0
   1405c:	bne	1407c <__assert_fail@plt+0x2d34>
   14060:	bl	11240 <__errno_location@plt>
   14064:	ldr	r5, [r0]
   14068:	mov	r4, r0
   1406c:	mov	r0, r7
   14070:	bl	11330 <close@plt>
   14074:	str	r5, [r4]
   14078:	mov	r4, #0
   1407c:	mov	r0, r4
   14080:	pop	{r4, r5, r6, r7, fp, pc}
   14084:	mov	r0, r6
   14088:	pop	{r4, r5, r6, r7, fp, pc}
   1408c:	bl	11240 <__errno_location@plt>
   14090:	ldr	r7, [r0]
   14094:	mov	r5, r0
   14098:	mov	r0, r6
   1409c:	bl	13f04 <__assert_fail@plt+0x2bbc>
   140a0:	mov	r0, r4
   140a4:	str	r7, [r5]
   140a8:	pop	{r4, r5, r6, r7, fp, pc}
   140ac:	push	{r4, r5, r6, sl, fp, lr}
   140b0:	add	fp, sp, #16
   140b4:	mov	r4, r0
   140b8:	bl	11240 <__errno_location@plt>
   140bc:	ldr	r6, [r0]
   140c0:	mov	r5, r0
   140c4:	mov	r0, r4
   140c8:	bl	110d8 <free@plt>
   140cc:	str	r6, [r5]
   140d0:	pop	{r4, r5, r6, sl, fp, pc}
   140d4:	push	{r4, r5, r6, r7, fp, lr}
   140d8:	add	fp, sp, #16
   140dc:	sub	sp, sp, #8
   140e0:	mov	r4, r0
   140e4:	ldr	r0, [r0, #4]
   140e8:	mov	r5, r3
   140ec:	mov	r6, r2
   140f0:	ldr	r1, [r4, #8]
   140f4:	cmp	r1, r0
   140f8:	bne	14114 <__assert_fail@plt+0x2dcc>
   140fc:	ldrd	r0, [r4, #16]
   14100:	cmp	r1, r0
   14104:	bne	14114 <__assert_fail@plt+0x2dcc>
   14108:	ldr	r0, [r4, #36]	; 0x24
   1410c:	cmp	r0, #0
   14110:	beq	1412c <__assert_fail@plt+0x2de4>
   14114:	mov	r0, r4
   14118:	mov	r2, r6
   1411c:	mov	r3, r5
   14120:	sub	sp, fp, #16
   14124:	pop	{r4, r5, r6, r7, fp, lr}
   14128:	b	112a0 <fseeko64@plt>
   1412c:	ldr	r7, [fp, #8]
   14130:	mov	r0, r4
   14134:	bl	11270 <fileno@plt>
   14138:	mov	r2, r6
   1413c:	mov	r3, r5
   14140:	str	r7, [sp]
   14144:	bl	11168 <lseek64@plt>
   14148:	and	r2, r0, r1
   1414c:	cmn	r2, #1
   14150:	beq	14170 <__assert_fail@plt+0x2e28>
   14154:	strd	r0, [r4, #80]	; 0x50
   14158:	ldr	r0, [r4]
   1415c:	bic	r0, r0, #16
   14160:	str	r0, [r4]
   14164:	mov	r0, #0
   14168:	sub	sp, fp, #16
   1416c:	pop	{r4, r5, r6, r7, fp, pc}
   14170:	mvn	r0, #0
   14174:	sub	sp, fp, #16
   14178:	pop	{r4, r5, r6, r7, fp, pc}
   1417c:	push	{r4, sl, fp, lr}
   14180:	add	fp, sp, #8
   14184:	sub	sp, sp, #264	; 0x108
   14188:	add	r1, sp, #7
   1418c:	movw	r2, #257	; 0x101
   14190:	bl	16438 <__assert_fail@plt+0x50f0>
   14194:	mov	r4, #0
   14198:	cmp	r0, #0
   1419c:	bne	141dc <__assert_fail@plt+0x2e94>
   141a0:	movw	r1, #40258	; 0x9d42
   141a4:	add	r0, sp, #7
   141a8:	mov	r2, #2
   141ac:	movt	r1, #1
   141b0:	bl	11210 <bcmp@plt>
   141b4:	cmp	r0, #0
   141b8:	beq	141dc <__assert_fail@plt+0x2e94>
   141bc:	movw	r1, #40260	; 0x9d44
   141c0:	add	r0, sp, #7
   141c4:	mov	r2, #6
   141c8:	movt	r1, #1
   141cc:	bl	11210 <bcmp@plt>
   141d0:	cmp	r0, #0
   141d4:	mov	r4, r0
   141d8:	movwne	r4, #1
   141dc:	mov	r0, r4
   141e0:	sub	sp, fp, #8
   141e4:	pop	{r4, sl, fp, pc}
   141e8:	mov	r1, #0
   141ec:	str	r1, [r0]
   141f0:	str	r1, [r0, #4]
   141f4:	str	r1, [r0, #8]
   141f8:	bx	lr
   141fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14200:	add	fp, sp, #28
   14204:	sub	sp, sp, #4
   14208:	mov	r9, r0
   1420c:	ldrb	r0, [r1]
   14210:	tst	r0, #16
   14214:	bne	142ec <__assert_fail@plt+0x2fa4>
   14218:	ldr	r4, [r9, #8]
   1421c:	ldr	r0, [r9]
   14220:	mov	r5, r1
   14224:	mov	r8, #1
   14228:	add	sl, r4, r0
   1422c:	mov	r6, r4
   14230:	ldmib	r5, {r0, r1}
   14234:	cmp	r0, r1
   14238:	bcc	14258 <__assert_fail@plt+0x2f10>
   1423c:	b	142a0 <__assert_fail@plt+0x2f58>
   14240:	strb	r7, [r6], #1
   14244:	cmp	r7, #10
   14248:	beq	142d8 <__assert_fail@plt+0x2f90>
   1424c:	ldmib	r5, {r0, r1}
   14250:	cmp	r0, r1
   14254:	bcs	142a0 <__assert_fail@plt+0x2f58>
   14258:	add	r1, r0, #1
   1425c:	str	r1, [r5, #4]
   14260:	ldrb	r7, [r0]
   14264:	cmp	r6, sl
   14268:	bne	14240 <__assert_fail@plt+0x2ef8>
   1426c:	ldr	r6, [r9]
   14270:	mov	r0, r4
   14274:	mov	r1, r9
   14278:	mov	r2, #1
   1427c:	mvn	r3, #0
   14280:	str	r8, [sp]
   14284:	bl	16dd4 <__assert_fail@plt+0x5a8c>
   14288:	str	r0, [r9, #8]
   1428c:	mov	r4, r0
   14290:	add	r6, r0, r6
   14294:	ldr	r0, [r9]
   14298:	add	sl, r4, r0
   1429c:	b	14240 <__assert_fail@plt+0x2ef8>
   142a0:	mov	r0, r5
   142a4:	bl	112b8 <__uflow@plt>
   142a8:	mov	r7, r0
   142ac:	cmn	r0, #1
   142b0:	bne	14264 <__assert_fail@plt+0x2f1c>
   142b4:	cmp	r6, r4
   142b8:	beq	142ec <__assert_fail@plt+0x2fa4>
   142bc:	ldrb	r0, [r5]
   142c0:	tst	r0, #32
   142c4:	bne	142ec <__assert_fail@plt+0x2fa4>
   142c8:	ldrb	r0, [r6, #-1]
   142cc:	mov	r7, #10
   142d0:	cmp	r0, #10
   142d4:	bne	14264 <__assert_fail@plt+0x2f1c>
   142d8:	sub	r0, r6, r4
   142dc:	str	r0, [r9, #4]
   142e0:	mov	r0, r9
   142e4:	sub	sp, fp, #28
   142e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	mov	r9, #0
   142f0:	mov	r0, r9
   142f4:	sub	sp, fp, #28
   142f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14300:	add	fp, sp, #28
   14304:	sub	sp, sp, #4
   14308:	mov	sl, r0
   1430c:	ldrb	r0, [r1]
   14310:	tst	r0, #16
   14314:	bne	143f0 <__assert_fail@plt+0x30a8>
   14318:	ldr	r4, [sl, #8]
   1431c:	ldr	r0, [sl]
   14320:	mov	r8, r2
   14324:	mov	r6, r1
   14328:	add	r9, r4, r0
   1432c:	mov	r7, r4
   14330:	ldmib	r6, {r0, r1}
   14334:	cmp	r0, r1
   14338:	bcc	14358 <__assert_fail@plt+0x3010>
   1433c:	b	143a4 <__assert_fail@plt+0x305c>
   14340:	strb	r5, [r7], #1
   14344:	cmp	r5, r8
   14348:	beq	143dc <__assert_fail@plt+0x3094>
   1434c:	ldmib	r6, {r0, r1}
   14350:	cmp	r0, r1
   14354:	bcs	143a4 <__assert_fail@plt+0x305c>
   14358:	add	r1, r0, #1
   1435c:	str	r1, [r6, #4]
   14360:	ldrb	r5, [r0]
   14364:	cmp	r7, r9
   14368:	bne	14340 <__assert_fail@plt+0x2ff8>
   1436c:	ldr	r7, [sl]
   14370:	mov	r0, #1
   14374:	mov	r1, sl
   14378:	mov	r2, #1
   1437c:	mvn	r3, #0
   14380:	str	r0, [sp]
   14384:	mov	r0, r4
   14388:	bl	16dd4 <__assert_fail@plt+0x5a8c>
   1438c:	str	r0, [sl, #8]
   14390:	mov	r4, r0
   14394:	add	r7, r0, r7
   14398:	ldr	r0, [sl]
   1439c:	add	r9, r4, r0
   143a0:	b	14340 <__assert_fail@plt+0x2ff8>
   143a4:	mov	r0, r6
   143a8:	bl	112b8 <__uflow@plt>
   143ac:	mov	r5, r0
   143b0:	cmn	r0, #1
   143b4:	bne	14364 <__assert_fail@plt+0x301c>
   143b8:	cmp	r7, r4
   143bc:	beq	143f0 <__assert_fail@plt+0x30a8>
   143c0:	ldrb	r0, [r6]
   143c4:	tst	r0, #32
   143c8:	bne	143f0 <__assert_fail@plt+0x30a8>
   143cc:	ldrb	r0, [r7, #-1]
   143d0:	mov	r5, r8
   143d4:	cmp	r0, r8
   143d8:	bne	14364 <__assert_fail@plt+0x301c>
   143dc:	sub	r0, r7, r4
   143e0:	str	r0, [sl, #4]
   143e4:	mov	r0, sl
   143e8:	sub	sp, fp, #28
   143ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143f0:	mov	sl, #0
   143f4:	mov	r0, sl
   143f8:	sub	sp, fp, #28
   143fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14400:	ldr	r0, [r0, #8]
   14404:	b	140ac <__assert_fail@plt+0x2d64>
   14408:	push	{r4, r5, r6, sl, fp, lr}
   1440c:	add	fp, sp, #16
   14410:	cmp	r2, #0
   14414:	beq	14454 <__assert_fail@plt+0x310c>
   14418:	mov	r4, r2
   1441c:	mov	r5, r1
   14420:	mov	r6, r0
   14424:	bl	111d4 <__ctype_toupper_loc@plt>
   14428:	ldr	r1, [r0]
   1442c:	ldrb	r0, [r5]
   14430:	ldrb	r2, [r6]
   14434:	ldr	r0, [r1, r0, lsl #2]
   14438:	ldr	r2, [r1, r2, lsl #2]
   1443c:	subs	r0, r2, r0
   14440:	bne	14458 <__assert_fail@plt+0x3110>
   14444:	add	r6, r6, #1
   14448:	add	r5, r5, #1
   1444c:	subs	r4, r4, #1
   14450:	bne	1442c <__assert_fail@plt+0x30e4>
   14454:	mov	r0, #0
   14458:	pop	{r4, r5, r6, sl, fp, pc}
   1445c:	push	{r4, r5, fp, lr}
   14460:	add	fp, sp, #8
   14464:	cmp	r0, #0
   14468:	beq	144fc <__assert_fail@plt+0x31b4>
   1446c:	mov	r1, #47	; 0x2f
   14470:	mov	r4, r0
   14474:	bl	112dc <strrchr@plt>
   14478:	cmp	r0, #0
   1447c:	mov	r5, r4
   14480:	addne	r5, r0, #1
   14484:	sub	r0, r5, r4
   14488:	cmp	r0, #7
   1448c:	blt	144e0 <__assert_fail@plt+0x3198>
   14490:	movw	r1, #40322	; 0x9d82
   14494:	sub	r0, r5, #7
   14498:	mov	r2, #7
   1449c:	movt	r1, #1
   144a0:	bl	11318 <strncmp@plt>
   144a4:	cmp	r0, #0
   144a8:	bne	144e0 <__assert_fail@plt+0x3198>
   144ac:	movw	r1, #40330	; 0x9d8a
   144b0:	mov	r0, r5
   144b4:	mov	r2, #3
   144b8:	movt	r1, #1
   144bc:	bl	11318 <strncmp@plt>
   144c0:	cmp	r0, #0
   144c4:	beq	144d0 <__assert_fail@plt+0x3188>
   144c8:	mov	r4, r5
   144cc:	b	144e0 <__assert_fail@plt+0x3198>
   144d0:	movw	r0, #45408	; 0xb160
   144d4:	add	r4, r5, #3
   144d8:	movt	r0, #2
   144dc:	str	r4, [r0]
   144e0:	movw	r0, #45412	; 0xb164
   144e4:	movt	r0, #2
   144e8:	str	r4, [r0]
   144ec:	movw	r0, #45560	; 0xb1f8
   144f0:	movt	r0, #2
   144f4:	str	r4, [r0]
   144f8:	pop	{r4, r5, fp, pc}
   144fc:	movw	r0, #45424	; 0xb170
   14500:	mov	r1, #55	; 0x37
   14504:	mov	r2, #1
   14508:	movt	r0, #2
   1450c:	ldr	r3, [r0]
   14510:	movw	r0, #40266	; 0x9d4a
   14514:	movt	r0, #1
   14518:	bl	1115c <fwrite@plt>
   1451c:	bl	11324 <abort@plt>
   14520:	push	{r4, r5, r6, sl, fp, lr}
   14524:	add	fp, sp, #16
   14528:	mov	r4, r0
   1452c:	movw	r0, #45568	; 0xb200
   14530:	movt	r0, #2
   14534:	cmp	r4, #0
   14538:	moveq	r4, r0
   1453c:	bl	11240 <__errno_location@plt>
   14540:	ldr	r6, [r0]
   14544:	mov	r5, r0
   14548:	mov	r0, r4
   1454c:	mov	r1, #48	; 0x30
   14550:	bl	17004 <__assert_fail@plt+0x5cbc>
   14554:	str	r6, [r5]
   14558:	pop	{r4, r5, r6, sl, fp, pc}
   1455c:	movw	r1, #45568	; 0xb200
   14560:	cmp	r0, #0
   14564:	movt	r1, #2
   14568:	movne	r1, r0
   1456c:	ldr	r0, [r1]
   14570:	bx	lr
   14574:	movw	r2, #45568	; 0xb200
   14578:	cmp	r0, #0
   1457c:	movt	r2, #2
   14580:	movne	r2, r0
   14584:	str	r1, [r2]
   14588:	bx	lr
   1458c:	movw	r3, #45568	; 0xb200
   14590:	cmp	r0, #0
   14594:	and	r2, r2, #1
   14598:	movt	r3, #2
   1459c:	movne	r3, r0
   145a0:	ubfx	r0, r1, #5, #3
   145a4:	and	r1, r1, #31
   145a8:	add	ip, r3, r0, lsl #2
   145ac:	mov	r0, #1
   145b0:	ldr	r3, [ip, #8]
   145b4:	and	r0, r0, r3, lsr r1
   145b8:	eor	r2, r0, r2
   145bc:	eor	r1, r3, r2, lsl r1
   145c0:	str	r1, [ip, #8]
   145c4:	bx	lr
   145c8:	movw	r2, #45568	; 0xb200
   145cc:	cmp	r0, #0
   145d0:	movt	r2, #2
   145d4:	movne	r2, r0
   145d8:	ldr	r0, [r2, #4]
   145dc:	str	r1, [r2, #4]
   145e0:	bx	lr
   145e4:	push	{fp, lr}
   145e8:	mov	fp, sp
   145ec:	movw	r3, #45568	; 0xb200
   145f0:	cmp	r0, #0
   145f4:	movt	r3, #2
   145f8:	movne	r3, r0
   145fc:	cmp	r1, #0
   14600:	mov	r0, #10
   14604:	cmpne	r2, #0
   14608:	str	r0, [r3]
   1460c:	bne	14614 <__assert_fail@plt+0x32cc>
   14610:	bl	11324 <abort@plt>
   14614:	str	r1, [r3, #40]	; 0x28
   14618:	str	r2, [r3, #44]	; 0x2c
   1461c:	pop	{fp, pc}
   14620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14624:	add	fp, sp, #28
   14628:	sub	sp, sp, #20
   1462c:	mov	r7, r0
   14630:	ldr	r0, [fp, #8]
   14634:	movw	r5, #45568	; 0xb200
   14638:	mov	r8, r3
   1463c:	mov	r9, r2
   14640:	mov	sl, r1
   14644:	movt	r5, #2
   14648:	cmp	r0, #0
   1464c:	movne	r5, r0
   14650:	bl	11240 <__errno_location@plt>
   14654:	ldr	r2, [r5, #40]	; 0x28
   14658:	ldr	r3, [r5, #44]	; 0x2c
   1465c:	mov	r4, r0
   14660:	ldm	r5, {r0, r1}
   14664:	add	r5, r5, #8
   14668:	ldr	r6, [r4]
   1466c:	stm	sp, {r0, r1, r5}
   14670:	mov	r0, r7
   14674:	mov	r1, sl
   14678:	str	r2, [sp, #12]
   1467c:	str	r3, [sp, #16]
   14680:	mov	r2, r9
   14684:	mov	r3, r8
   14688:	bl	14698 <__assert_fail@plt+0x3350>
   1468c:	str	r6, [r4]
   14690:	sub	sp, fp, #28
   14694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1469c:	add	fp, sp, #28
   146a0:	sub	sp, sp, #156	; 0x9c
   146a4:	str	r0, [fp, #-84]	; 0xffffffac
   146a8:	add	r0, r2, #1
   146ac:	mov	r6, r1
   146b0:	mov	r7, r3
   146b4:	str	r2, [fp, #-80]	; 0xffffffb0
   146b8:	str	r0, [sp, #80]	; 0x50
   146bc:	ldr	r0, [fp, #12]
   146c0:	and	r1, r0, #1
   146c4:	str	r1, [sp, #36]	; 0x24
   146c8:	and	r1, r0, #4
   146cc:	str	r1, [sp, #32]
   146d0:	ubfx	r8, r0, #1, #1
   146d4:	bl	11174 <__ctype_get_mb_cur_max@plt>
   146d8:	str	r0, [sp, #40]	; 0x28
   146dc:	ldr	r0, [fp, #24]
   146e0:	ldr	r4, [fp, #8]
   146e4:	mov	r1, #0
   146e8:	str	r1, [fp, #-52]	; 0xffffffcc
   146ec:	mov	r1, #0
   146f0:	str	r1, [sp, #60]	; 0x3c
   146f4:	mov	r1, #1
   146f8:	str	r1, [sp, #84]	; 0x54
   146fc:	str	r0, [sp, #76]	; 0x4c
   14700:	ldr	r0, [fp, #20]
   14704:	str	r0, [sp, #72]	; 0x48
   14708:	mov	r0, #0
   1470c:	str	r0, [sp, #56]	; 0x38
   14710:	mov	r0, #0
   14714:	str	r0, [fp, #-88]	; 0xffffffa8
   14718:	mov	r0, #0
   1471c:	str	r0, [fp, #-72]	; 0xffffffb8
   14720:	mov	r0, #0
   14724:	cmp	r4, #10
   14728:	bhi	15a44 <__assert_fail@plt+0x46fc>
   1472c:	add	r1, pc, #24
   14730:	ldr	ip, [fp, #-84]	; 0xffffffac
   14734:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14738:	mov	r5, r6
   1473c:	mov	r9, #0
   14740:	mov	r2, #1
   14744:	mov	r3, #0
   14748:	ldr	pc, [r1, r4, lsl #2]
   1474c:	andeq	r4, r1, r4, lsl r8
   14750:	andeq	r4, r1, r0, asr r8
   14754:	andeq	r4, r1, r4, lsr #16
   14758:	andeq	r4, r1, ip, lsl #16
   1475c:	andeq	r4, r1, r4, asr #16
   14760:	andeq	r4, r1, r8, lsr #17
   14764:	andeq	r4, r1, r4, lsr r8
   14768:	andeq	r4, r1, r0, lsr #22
   1476c:	andeq	r4, r1, r8, ror r7
   14770:	andeq	r4, r1, r8, ror r7
   14774:			; <UNDEFINED> instruction: 0x000149b0
   14778:	movw	r6, #40412	; 0x9ddc
   1477c:	mov	r0, #0
   14780:	mov	r2, #5
   14784:	movt	r6, #1
   14788:	mov	r1, r6
   1478c:	bl	1112c <dcgettext@plt>
   14790:	cmp	r0, r6
   14794:	str	r0, [sp, #72]	; 0x48
   14798:	bne	14988 <__assert_fail@plt+0x3640>
   1479c:	bl	18b74 <__assert_fail@plt+0x782c>
   147a0:	ldrb	r1, [r0]
   147a4:	and	r1, r1, #223	; 0xdf
   147a8:	cmp	r1, #71	; 0x47
   147ac:	beq	14908 <__assert_fail@plt+0x35c0>
   147b0:	cmp	r1, #85	; 0x55
   147b4:	bne	1496c <__assert_fail@plt+0x3624>
   147b8:	ldrb	r1, [r0, #1]
   147bc:	and	r1, r1, #223	; 0xdf
   147c0:	cmp	r1, #84	; 0x54
   147c4:	bne	1496c <__assert_fail@plt+0x3624>
   147c8:	ldrb	r1, [r0, #2]
   147cc:	and	r1, r1, #223	; 0xdf
   147d0:	cmp	r1, #70	; 0x46
   147d4:	bne	1496c <__assert_fail@plt+0x3624>
   147d8:	ldrb	r1, [r0, #3]
   147dc:	cmp	r1, #45	; 0x2d
   147e0:	bne	1496c <__assert_fail@plt+0x3624>
   147e4:	ldrb	r1, [r0, #4]
   147e8:	cmp	r1, #56	; 0x38
   147ec:	bne	1496c <__assert_fail@plt+0x3624>
   147f0:	ldrb	r0, [r0, #5]
   147f4:	cmp	r0, #0
   147f8:	movw	r0, #40416	; 0x9de0
   147fc:	movt	r0, #1
   14800:	str	r0, [sp, #72]	; 0x48
   14804:	bne	1496c <__assert_fail@plt+0x3624>
   14808:	b	14988 <__assert_fail@plt+0x3640>
   1480c:	mov	r0, #1
   14810:	b	14850 <__assert_fail@plt+0x3508>
   14814:	mov	r4, #0
   14818:	mov	r9, #0
   1481c:	mov	r2, r0
   14820:	b	148a0 <__assert_fail@plt+0x3558>
   14824:	tst	r8, #1
   14828:	bne	14850 <__assert_fail@plt+0x3508>
   1482c:	mov	r2, r0
   14830:	b	14878 <__assert_fail@plt+0x3530>
   14834:	mov	r0, #1
   14838:	mov	r9, #0
   1483c:	mov	r4, #5
   14840:	b	148bc <__assert_fail@plt+0x3574>
   14844:	mov	r2, #1
   14848:	tst	r8, #1
   1484c:	beq	14878 <__assert_fail@plt+0x3530>
   14850:	mov	r1, #1
   14854:	mov	r9, #0
   14858:	mov	r4, #2
   1485c:	mov	r2, r0
   14860:	mov	r3, #1
   14864:	str	r1, [fp, #-72]	; 0xffffffb8
   14868:	movw	r1, #40414	; 0x9dde
   1486c:	movt	r1, #1
   14870:	str	r1, [fp, #-88]	; 0xffffffa8
   14874:	b	14b20 <__assert_fail@plt+0x37d8>
   14878:	cmp	r5, #0
   1487c:	mov	r9, #1
   14880:	mov	r4, #2
   14884:	movne	r0, #39	; 0x27
   14888:	strbne	r0, [ip]
   1488c:	movw	r0, #40414	; 0x9dde
   14890:	movt	r0, #1
   14894:	str	r0, [fp, #-88]	; 0xffffffa8
   14898:	mov	r0, #1
   1489c:	str	r0, [fp, #-72]	; 0xffffffb8
   148a0:	mov	r3, #0
   148a4:	b	14b20 <__assert_fail@plt+0x37d8>
   148a8:	mov	r4, #5
   148ac:	tst	r8, #1
   148b0:	beq	148d8 <__assert_fail@plt+0x3590>
   148b4:	mov	r0, #1
   148b8:	mov	r9, #0
   148bc:	str	r0, [fp, #-72]	; 0xffffffb8
   148c0:	movw	r0, #40410	; 0x9dda
   148c4:	mov	r2, #1
   148c8:	mov	r3, #1
   148cc:	movt	r0, #1
   148d0:	str	r0, [fp, #-88]	; 0xffffffa8
   148d4:	b	14b20 <__assert_fail@plt+0x37d8>
   148d8:	cmp	r5, #0
   148dc:	mov	r3, #0
   148e0:	mov	r9, #1
   148e4:	mov	r2, #1
   148e8:	movne	r0, #34	; 0x22
   148ec:	strbne	r0, [ip]
   148f0:	movw	r0, #40410	; 0x9dda
   148f4:	movt	r0, #1
   148f8:	str	r0, [fp, #-88]	; 0xffffffa8
   148fc:	mov	r0, #1
   14900:	str	r0, [fp, #-72]	; 0xffffffb8
   14904:	b	14b20 <__assert_fail@plt+0x37d8>
   14908:	ldrb	r1, [r0, #1]
   1490c:	and	r1, r1, #223	; 0xdf
   14910:	cmp	r1, #66	; 0x42
   14914:	bne	1496c <__assert_fail@plt+0x3624>
   14918:	ldrb	r1, [r0, #2]
   1491c:	cmp	r1, #49	; 0x31
   14920:	bne	1496c <__assert_fail@plt+0x3624>
   14924:	ldrb	r1, [r0, #3]
   14928:	cmp	r1, #56	; 0x38
   1492c:	bne	1496c <__assert_fail@plt+0x3624>
   14930:	ldrb	r1, [r0, #4]
   14934:	cmp	r1, #48	; 0x30
   14938:	bne	1496c <__assert_fail@plt+0x3624>
   1493c:	ldrb	r1, [r0, #5]
   14940:	cmp	r1, #51	; 0x33
   14944:	bne	1496c <__assert_fail@plt+0x3624>
   14948:	ldrb	r1, [r0, #6]
   1494c:	cmp	r1, #48	; 0x30
   14950:	bne	1496c <__assert_fail@plt+0x3624>
   14954:	ldrb	r0, [r0, #7]
   14958:	cmp	r0, #0
   1495c:	movw	r0, #40424	; 0x9de8
   14960:	movt	r0, #1
   14964:	str	r0, [sp, #72]	; 0x48
   14968:	beq	14988 <__assert_fail@plt+0x3640>
   1496c:	movw	r1, #40410	; 0x9dda
   14970:	movw	r0, #40414	; 0x9dde
   14974:	cmp	r4, #9
   14978:	movt	r1, #1
   1497c:	movt	r0, #1
   14980:	moveq	r0, r1
   14984:	str	r0, [sp, #72]	; 0x48
   14988:	movw	r6, #40414	; 0x9dde
   1498c:	mov	r0, #0
   14990:	mov	r2, #5
   14994:	movt	r6, #1
   14998:	mov	r1, r6
   1499c:	bl	1112c <dcgettext@plt>
   149a0:	cmp	r0, r6
   149a4:	str	r0, [sp, #76]	; 0x4c
   149a8:	beq	149f4 <__assert_fail@plt+0x36ac>
   149ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   149b0:	mov	r9, #0
   149b4:	tst	r8, #1
   149b8:	bne	14afc <__assert_fail@plt+0x37b4>
   149bc:	ldr	r0, [sp, #72]	; 0x48
   149c0:	ldrb	r0, [r0]
   149c4:	cmp	r0, #0
   149c8:	beq	14afc <__assert_fail@plt+0x37b4>
   149cc:	ldr	r1, [sp, #72]	; 0x48
   149d0:	mov	r9, #0
   149d4:	add	r1, r1, #1
   149d8:	cmp	r9, r5
   149dc:	strbcc	r0, [ip, r9]
   149e0:	ldrb	r0, [r1, r9]
   149e4:	add	r9, r9, #1
   149e8:	cmp	r0, #0
   149ec:	bne	149d8 <__assert_fail@plt+0x3690>
   149f0:	b	14afc <__assert_fail@plt+0x37b4>
   149f4:	bl	18b74 <__assert_fail@plt+0x782c>
   149f8:	ldrb	r1, [r0]
   149fc:	and	r1, r1, #223	; 0xdf
   14a00:	cmp	r1, #71	; 0x47
   14a04:	beq	14a74 <__assert_fail@plt+0x372c>
   14a08:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a0c:	cmp	r1, #85	; 0x55
   14a10:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a14:	ldrb	r1, [r0, #1]
   14a18:	and	r1, r1, #223	; 0xdf
   14a1c:	cmp	r1, #84	; 0x54
   14a20:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a24:	ldrb	r1, [r0, #2]
   14a28:	and	r1, r1, #223	; 0xdf
   14a2c:	cmp	r1, #70	; 0x46
   14a30:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a34:	ldrb	r1, [r0, #3]
   14a38:	cmp	r1, #45	; 0x2d
   14a3c:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a40:	ldrb	r1, [r0, #4]
   14a44:	cmp	r1, #56	; 0x38
   14a48:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a4c:	ldrb	r0, [r0, #5]
   14a50:	cmp	r0, #0
   14a54:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a58:	movw	r0, #40420	; 0x9de4
   14a5c:	movt	r0, #1
   14a60:	str	r0, [sp, #76]	; 0x4c
   14a64:	mov	r9, #0
   14a68:	tst	r8, #1
   14a6c:	beq	149bc <__assert_fail@plt+0x3674>
   14a70:	b	14afc <__assert_fail@plt+0x37b4>
   14a74:	ldrb	r1, [r0, #1]
   14a78:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a7c:	and	r1, r1, #223	; 0xdf
   14a80:	cmp	r1, #66	; 0x42
   14a84:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a88:	ldrb	r1, [r0, #2]
   14a8c:	cmp	r1, #49	; 0x31
   14a90:	bne	14ad0 <__assert_fail@plt+0x3788>
   14a94:	ldrb	r1, [r0, #3]
   14a98:	cmp	r1, #56	; 0x38
   14a9c:	bne	14ad0 <__assert_fail@plt+0x3788>
   14aa0:	ldrb	r1, [r0, #4]
   14aa4:	cmp	r1, #48	; 0x30
   14aa8:	bne	14ad0 <__assert_fail@plt+0x3788>
   14aac:	ldrb	r1, [r0, #5]
   14ab0:	cmp	r1, #51	; 0x33
   14ab4:	bne	14ad0 <__assert_fail@plt+0x3788>
   14ab8:	ldrb	r1, [r0, #6]
   14abc:	cmp	r1, #48	; 0x30
   14ac0:	bne	14ad0 <__assert_fail@plt+0x3788>
   14ac4:	ldrb	r0, [r0, #7]
   14ac8:	cmp	r0, #0
   14acc:	beq	158e4 <__assert_fail@plt+0x459c>
   14ad0:	movw	r0, #40414	; 0x9dde
   14ad4:	cmp	r4, #9
   14ad8:	movt	r0, #1
   14adc:	mov	r1, r0
   14ae0:	movw	r0, #40410	; 0x9dda
   14ae4:	movt	r0, #1
   14ae8:	moveq	r1, r0
   14aec:	str	r1, [sp, #76]	; 0x4c
   14af0:	mov	r9, #0
   14af4:	tst	r8, #1
   14af8:	beq	149bc <__assert_fail@plt+0x3674>
   14afc:	ldr	r6, [sp, #76]	; 0x4c
   14b00:	mov	r0, r6
   14b04:	bl	11228 <strlen@plt>
   14b08:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b0c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14b10:	str	r0, [fp, #-72]	; 0xffffffb8
   14b14:	str	r6, [fp, #-88]	; 0xffffffa8
   14b18:	mov	r2, #1
   14b1c:	mov	r3, r8
   14b20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14b24:	str	r4, [fp, #-64]	; 0xffffffc0
   14b28:	mov	sl, #0
   14b2c:	str	r3, [fp, #-76]	; 0xffffffb4
   14b30:	str	r2, [sp, #88]	; 0x58
   14b34:	cmp	r0, #0
   14b38:	movwne	r0, #1
   14b3c:	and	r1, r0, r3
   14b40:	and	r1, r2, r1
   14b44:	str	r1, [sp, #48]	; 0x30
   14b48:	sub	r1, r4, #2
   14b4c:	clz	r1, r1
   14b50:	lsr	r1, r1, #5
   14b54:	and	r1, r1, r3
   14b58:	str	r1, [sp, #44]	; 0x2c
   14b5c:	subs	r1, r4, #2
   14b60:	eor	r4, r3, #1
   14b64:	movwne	r1, #1
   14b68:	str	r4, [sp, #92]	; 0x5c
   14b6c:	orr	r4, r1, r4
   14b70:	and	r1, r1, r2
   14b74:	and	r0, r0, r1
   14b78:	str	r4, [sp, #64]	; 0x40
   14b7c:	ldr	r4, [sp, #84]	; 0x54
   14b80:	str	r0, [fp, #-60]	; 0xffffffc4
   14b84:	orr	r0, r1, r3
   14b88:	ldr	r1, [fp, #16]
   14b8c:	eor	r0, r0, #1
   14b90:	clz	r1, r1
   14b94:	lsr	r1, r1, #5
   14b98:	orr	r0, r1, r0
   14b9c:	str	r0, [fp, #-68]	; 0xffffffbc
   14ba0:	eor	r0, r2, #1
   14ba4:	str	r0, [sp, #52]	; 0x34
   14ba8:	cmn	r7, #1
   14bac:	beq	14bbc <__assert_fail@plt+0x3874>
   14bb0:	cmp	sl, r7
   14bb4:	bne	14bc8 <__assert_fail@plt+0x3880>
   14bb8:	b	1585c <__assert_fail@plt+0x4514>
   14bbc:	ldrb	r0, [lr, sl]
   14bc0:	cmp	r0, #0
   14bc4:	beq	15864 <__assert_fail@plt+0x451c>
   14bc8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14bcc:	cmp	r0, #0
   14bd0:	beq	14c30 <__assert_fail@plt+0x38e8>
   14bd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14bd8:	mov	r6, r5
   14bdc:	add	r5, sl, r0
   14be0:	cmp	r0, #2
   14be4:	bcc	14c50 <__assert_fail@plt+0x3908>
   14be8:	mov	r0, #0
   14bec:	cmn	r7, #1
   14bf0:	str	r0, [fp, #-56]	; 0xffffffc8
   14bf4:	bne	14c0c <__assert_fail@plt+0x38c4>
   14bf8:	mov	r0, lr
   14bfc:	bl	11228 <strlen@plt>
   14c00:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14c04:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c08:	mov	r7, r0
   14c0c:	cmp	r5, r7
   14c10:	bls	14c60 <__assert_fail@plt+0x3918>
   14c14:	mov	r0, #0
   14c18:	mov	r5, r6
   14c1c:	str	r0, [fp, #-48]	; 0xffffffd0
   14c20:	ldrb	r6, [lr, sl]
   14c24:	cmp	r6, #126	; 0x7e
   14c28:	bls	14cb0 <__assert_fail@plt+0x3968>
   14c2c:	b	1520c <__assert_fail@plt+0x3ec4>
   14c30:	mov	r0, #0
   14c34:	str	r0, [fp, #-56]	; 0xffffffc8
   14c38:	mov	r0, #0
   14c3c:	str	r0, [fp, #-48]	; 0xffffffd0
   14c40:	ldrb	r6, [lr, sl]
   14c44:	cmp	r6, #126	; 0x7e
   14c48:	bls	14cb0 <__assert_fail@plt+0x3968>
   14c4c:	b	1520c <__assert_fail@plt+0x3ec4>
   14c50:	mov	r0, #0
   14c54:	str	r0, [fp, #-56]	; 0xffffffc8
   14c58:	cmp	r5, r7
   14c5c:	bhi	14c14 <__assert_fail@plt+0x38cc>
   14c60:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14c64:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14c68:	add	r0, lr, sl
   14c6c:	bl	11210 <bcmp@plt>
   14c70:	ldr	r2, [sp, #92]	; 0x5c
   14c74:	cmp	r0, #0
   14c78:	mov	r1, r0
   14c7c:	mov	r5, r6
   14c80:	movwne	r1, #1
   14c84:	orr	r1, r1, r2
   14c88:	tst	r1, #1
   14c8c:	beq	15924 <__assert_fail@plt+0x45dc>
   14c90:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c94:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14c98:	clz	r0, r0
   14c9c:	lsr	r0, r0, #5
   14ca0:	str	r0, [fp, #-48]	; 0xffffffd0
   14ca4:	ldrb	r6, [lr, sl]
   14ca8:	cmp	r6, #126	; 0x7e
   14cac:	bhi	1520c <__assert_fail@plt+0x3ec4>
   14cb0:	add	r3, pc, #16
   14cb4:	mov	r8, #1
   14cb8:	mov	r2, #110	; 0x6e
   14cbc:	mov	r0, #97	; 0x61
   14cc0:	mov	r1, #0
   14cc4:	ldr	pc, [r3, r6, lsl #2]
   14cc8:	andeq	r4, r1, r4, asr #31
   14ccc:	andeq	r5, r1, ip, lsl #4
   14cd0:	andeq	r5, r1, ip, lsl #4
   14cd4:	andeq	r5, r1, ip, lsl #4
   14cd8:	andeq	r5, r1, ip, lsl #4
   14cdc:	andeq	r5, r1, ip, lsl #4
   14ce0:	andeq	r5, r1, ip, lsl #4
   14ce4:	andeq	r5, r1, r0, asr #5
   14ce8:	andeq	r4, r1, r4, lsr #31
   14cec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14cf0:			; <UNDEFINED> instruction: 0x00014fb0
   14cf4:	andeq	r5, r1, r0, ror #1
   14cf8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14cfc:	andeq	r4, r1, ip, lsr #31
   14d00:	andeq	r5, r1, ip, lsl #4
   14d04:	andeq	r5, r1, ip, lsl #4
   14d08:	andeq	r5, r1, ip, lsl #4
   14d0c:	andeq	r5, r1, ip, lsl #4
   14d10:	andeq	r5, r1, ip, lsl #4
   14d14:	andeq	r5, r1, ip, lsl #4
   14d18:	andeq	r5, r1, ip, lsl #4
   14d1c:	andeq	r5, r1, ip, lsl #4
   14d20:	andeq	r5, r1, ip, lsl #4
   14d24:	andeq	r5, r1, ip, lsl #4
   14d28:	andeq	r5, r1, ip, lsl #4
   14d2c:	andeq	r5, r1, ip, lsl #4
   14d30:	andeq	r5, r1, ip, lsl #4
   14d34:	andeq	r5, r1, ip, lsl #4
   14d38:	andeq	r5, r1, ip, lsl #4
   14d3c:	andeq	r5, r1, ip, lsl #4
   14d40:	andeq	r5, r1, ip, lsl #4
   14d44:	andeq	r5, r1, ip, lsl #4
   14d48:	andeq	r4, r1, r8, lsr pc
   14d4c:	andeq	r4, r1, ip, lsr pc
   14d50:	andeq	r4, r1, ip, lsr pc
   14d54:	andeq	r4, r1, ip, lsr #30
   14d58:	andeq	r4, r1, ip, lsr pc
   14d5c:	andeq	r4, r1, r4, asr #29
   14d60:	andeq	r4, r1, ip, lsr pc
   14d64:	andeq	r5, r1, r8, ror #1
   14d68:	andeq	r4, r1, ip, lsr pc
   14d6c:	andeq	r4, r1, ip, lsr pc
   14d70:	andeq	r4, r1, ip, lsr pc
   14d74:	andeq	r4, r1, r4, asr #29
   14d78:	andeq	r4, r1, r4, asr #29
   14d7c:	andeq	r4, r1, r4, asr #29
   14d80:	andeq	r4, r1, r4, asr #29
   14d84:	andeq	r4, r1, r4, asr #29
   14d88:	andeq	r4, r1, r4, asr #29
   14d8c:	andeq	r4, r1, r4, asr #29
   14d90:	andeq	r4, r1, r4, asr #29
   14d94:	andeq	r4, r1, r4, asr #29
   14d98:	andeq	r4, r1, r4, asr #29
   14d9c:	andeq	r4, r1, r4, asr #29
   14da0:	andeq	r4, r1, r4, asr #29
   14da4:	andeq	r4, r1, r4, asr #29
   14da8:	andeq	r4, r1, r4, asr #29
   14dac:	andeq	r4, r1, r4, asr #29
   14db0:	andeq	r4, r1, r4, asr #29
   14db4:	andeq	r4, r1, ip, lsr pc
   14db8:	andeq	r4, r1, ip, lsr pc
   14dbc:	andeq	r4, r1, ip, lsr pc
   14dc0:	andeq	r4, r1, ip, lsr pc
   14dc4:	andeq	r5, r1, ip, lsr #1
   14dc8:	andeq	r5, r1, ip, lsl #4
   14dcc:	andeq	r4, r1, r4, asr #29
   14dd0:	andeq	r4, r1, r4, asr #29
   14dd4:	andeq	r4, r1, r4, asr #29
   14dd8:	andeq	r4, r1, r4, asr #29
   14ddc:	andeq	r4, r1, r4, asr #29
   14de0:	andeq	r4, r1, r4, asr #29
   14de4:	andeq	r4, r1, r4, asr #29
   14de8:	andeq	r4, r1, r4, asr #29
   14dec:	andeq	r4, r1, r4, asr #29
   14df0:	andeq	r4, r1, r4, asr #29
   14df4:	andeq	r4, r1, r4, asr #29
   14df8:	andeq	r4, r1, r4, asr #29
   14dfc:	andeq	r4, r1, r4, asr #29
   14e00:	andeq	r4, r1, r4, asr #29
   14e04:	andeq	r4, r1, r4, asr #29
   14e08:	andeq	r4, r1, r4, asr #29
   14e0c:	andeq	r4, r1, r4, asr #29
   14e10:	andeq	r4, r1, r4, asr #29
   14e14:	andeq	r4, r1, r4, asr #29
   14e18:	andeq	r4, r1, r4, asr #29
   14e1c:	andeq	r4, r1, r4, asr #29
   14e20:	andeq	r4, r1, r4, asr #29
   14e24:	andeq	r4, r1, r4, asr #29
   14e28:	andeq	r4, r1, r4, asr #29
   14e2c:	andeq	r4, r1, r4, asr #29
   14e30:	andeq	r4, r1, r4, asr #29
   14e34:	andeq	r4, r1, ip, lsr pc
   14e38:	andeq	r4, r1, r0, ror pc
   14e3c:	andeq	r4, r1, r4, asr #29
   14e40:	andeq	r4, r1, ip, lsr pc
   14e44:	andeq	r4, r1, r4, asr #29
   14e48:	andeq	r4, r1, ip, lsr pc
   14e4c:	andeq	r4, r1, r4, asr #29
   14e50:	andeq	r4, r1, r4, asr #29
   14e54:	andeq	r4, r1, r4, asr #29
   14e58:	andeq	r4, r1, r4, asr #29
   14e5c:	andeq	r4, r1, r4, asr #29
   14e60:	andeq	r4, r1, r4, asr #29
   14e64:	andeq	r4, r1, r4, asr #29
   14e68:	andeq	r4, r1, r4, asr #29
   14e6c:	andeq	r4, r1, r4, asr #29
   14e70:	andeq	r4, r1, r4, asr #29
   14e74:	andeq	r4, r1, r4, asr #29
   14e78:	andeq	r4, r1, r4, asr #29
   14e7c:	andeq	r4, r1, r4, asr #29
   14e80:	andeq	r4, r1, r4, asr #29
   14e84:	andeq	r4, r1, r4, asr #29
   14e88:	andeq	r4, r1, r4, asr #29
   14e8c:	andeq	r4, r1, r4, asr #29
   14e90:	andeq	r4, r1, r4, asr #29
   14e94:	andeq	r4, r1, r4, asr #29
   14e98:	andeq	r4, r1, r4, asr #29
   14e9c:	andeq	r4, r1, r4, asr #29
   14ea0:	andeq	r4, r1, r4, asr #29
   14ea4:	andeq	r4, r1, r4, asr #29
   14ea8:	andeq	r4, r1, r4, asr #29
   14eac:	andeq	r4, r1, r4, asr #29
   14eb0:	andeq	r4, r1, r4, asr #29
   14eb4:	andeq	r4, r1, r4, lsl #30
   14eb8:	andeq	r4, r1, ip, lsr pc
   14ebc:	andeq	r4, r1, r4, lsl #30
   14ec0:	andeq	r4, r1, ip, lsr #30
   14ec4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14ec8:	tst	r0, #1
   14ecc:	bne	15184 <__assert_fail@plt+0x3e3c>
   14ed0:	ldr	r1, [fp, #16]
   14ed4:	ubfx	r0, r6, #5, #3
   14ed8:	mov	r2, #1
   14edc:	ldr	r0, [r1, r0, lsl #2]
   14ee0:	and	r1, r6, #31
   14ee4:	tst	r0, r2, lsl r1
   14ee8:	beq	15184 <__assert_fail@plt+0x3e3c>
   14eec:	mov	r0, r6
   14ef0:	mov	r1, r8
   14ef4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ef8:	tst	r2, #1
   14efc:	beq	151a4 <__assert_fail@plt+0x3e5c>
   14f00:	b	15900 <__assert_fail@plt+0x45b8>
   14f04:	cmp	r7, #1
   14f08:	beq	14f2c <__assert_fail@plt+0x3be4>
   14f0c:	mov	r8, #0
   14f10:	cmn	r7, #1
   14f14:	bne	15170 <__assert_fail@plt+0x3e28>
   14f18:	ldrb	r0, [lr, #1]
   14f1c:	cmp	r0, #0
   14f20:	beq	14f2c <__assert_fail@plt+0x3be4>
   14f24:	mvn	r7, #0
   14f28:	b	15170 <__assert_fail@plt+0x3e28>
   14f2c:	mov	r8, #0
   14f30:	cmp	sl, #0
   14f34:	bne	15170 <__assert_fail@plt+0x3e28>
   14f38:	mov	r1, #1
   14f3c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f40:	cmp	r0, #2
   14f44:	bne	14f5c <__assert_fail@plt+0x3c14>
   14f48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14f4c:	mov	r8, r1
   14f50:	tst	r0, #1
   14f54:	beq	14ec4 <__assert_fail@plt+0x3b7c>
   14f58:	b	15900 <__assert_fail@plt+0x45b8>
   14f5c:	mov	r8, r1
   14f60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f64:	tst	r0, #1
   14f68:	beq	14ed0 <__assert_fail@plt+0x3b88>
   14f6c:	b	15184 <__assert_fail@plt+0x3e3c>
   14f70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f74:	cmp	r0, #2
   14f78:	bne	15238 <__assert_fail@plt+0x3ef0>
   14f7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14f80:	tst	r0, #1
   14f84:	bne	15900 <__assert_fail@plt+0x45b8>
   14f88:	mov	r0, #0
   14f8c:	str	r0, [fp, #-56]	; 0xffffffc8
   14f90:	b	15250 <__assert_fail@plt+0x3f08>
   14f94:	mov	r0, #102	; 0x66
   14f98:	b	152c0 <__assert_fail@plt+0x3f78>
   14f9c:	mov	r2, #116	; 0x74
   14fa0:	b	14fb0 <__assert_fail@plt+0x3c68>
   14fa4:	mov	r0, #98	; 0x62
   14fa8:	b	152c0 <__assert_fail@plt+0x3f78>
   14fac:	mov	r2, #114	; 0x72
   14fb0:	ldr	r0, [sp, #64]	; 0x40
   14fb4:	tst	r0, #1
   14fb8:	mov	r0, r2
   14fbc:	bne	152c0 <__assert_fail@plt+0x3f78>
   14fc0:	b	15900 <__assert_fail@plt+0x45b8>
   14fc4:	ldr	r0, [sp, #88]	; 0x58
   14fc8:	tst	r0, #1
   14fcc:	beq	152e0 <__assert_fail@plt+0x3f98>
   14fd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14fd4:	tst	r0, #1
   14fd8:	bne	15a3c <__assert_fail@plt+0x46f4>
   14fdc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14fe0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14fe4:	subs	r0, r0, #2
   14fe8:	movwne	r0, #1
   14fec:	orr	r0, r0, r1
   14ff0:	tst	r0, #1
   14ff4:	bne	15030 <__assert_fail@plt+0x3ce8>
   14ff8:	cmp	r9, r5
   14ffc:	movcc	r0, #39	; 0x27
   15000:	strbcc	r0, [ip, r9]
   15004:	add	r0, r9, #1
   15008:	cmp	r0, r5
   1500c:	movcc	r1, #36	; 0x24
   15010:	strbcc	r1, [ip, r0]
   15014:	add	r0, r9, #2
   15018:	add	r9, r9, #3
   1501c:	cmp	r0, r5
   15020:	movcc	r1, #39	; 0x27
   15024:	strbcc	r1, [ip, r0]
   15028:	mov	r0, #1
   1502c:	str	r0, [fp, #-52]	; 0xffffffcc
   15030:	mov	r1, #1
   15034:	cmp	r9, r5
   15038:	mov	r8, #0
   1503c:	mov	r6, #48	; 0x30
   15040:	str	r1, [fp, #-56]	; 0xffffffc8
   15044:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15048:	movcc	r0, #92	; 0x5c
   1504c:	strbcc	r0, [ip, r9]
   15050:	add	r0, r9, #1
   15054:	cmp	r1, #2
   15058:	beq	154ac <__assert_fail@plt+0x4164>
   1505c:	add	r1, sl, #1
   15060:	cmp	r1, r7
   15064:	bcs	154ac <__assert_fail@plt+0x4164>
   15068:	ldrb	r1, [lr, r1]
   1506c:	sub	r1, r1, #48	; 0x30
   15070:	uxtb	r1, r1
   15074:	cmp	r1, #9
   15078:	bhi	154ac <__assert_fail@plt+0x4164>
   1507c:	cmp	r0, r5
   15080:	movcc	r1, #48	; 0x30
   15084:	strbcc	r1, [ip, r0]
   15088:	add	r0, r9, #2
   1508c:	add	r9, r9, #3
   15090:	cmp	r0, r5
   15094:	movcc	r1, #48	; 0x30
   15098:	strbcc	r1, [ip, r0]
   1509c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   150a0:	tst	r0, #1
   150a4:	beq	14ed0 <__assert_fail@plt+0x3b88>
   150a8:	b	15184 <__assert_fail@plt+0x3e3c>
   150ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   150b0:	mov	r6, #63	; 0x3f
   150b4:	cmp	r0, #5
   150b8:	beq	154c0 <__assert_fail@plt+0x4178>
   150bc:	mov	r1, #0
   150c0:	cmp	r0, #2
   150c4:	str	r1, [fp, #-56]	; 0xffffffc8
   150c8:	bne	15588 <__assert_fail@plt+0x4240>
   150cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   150d0:	mov	r8, #0
   150d4:	tst	r0, #1
   150d8:	beq	14ec4 <__assert_fail@plt+0x3b7c>
   150dc:	b	15900 <__assert_fail@plt+0x45b8>
   150e0:	mov	r0, #118	; 0x76
   150e4:	b	152c0 <__assert_fail@plt+0x3f78>
   150e8:	mov	r0, #1
   150ec:	mov	r6, #39	; 0x27
   150f0:	str	r0, [sp, #60]	; 0x3c
   150f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   150f8:	cmp	r0, #2
   150fc:	bne	15300 <__assert_fail@plt+0x3fb8>
   15100:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15104:	tst	r0, #1
   15108:	bne	15900 <__assert_fail@plt+0x45b8>
   1510c:	ldr	r2, [sp, #56]	; 0x38
   15110:	clz	r1, r5
   15114:	mov	r8, #1
   15118:	lsr	r1, r1, #5
   1511c:	cmp	r2, #0
   15120:	mov	r0, r2
   15124:	movwne	r0, #1
   15128:	orrs	r0, r0, r1
   1512c:	moveq	r2, r5
   15130:	moveq	r5, r0
   15134:	cmp	r9, r5
   15138:	str	r2, [sp, #56]	; 0x38
   1513c:	movcc	r0, #39	; 0x27
   15140:	strbcc	r0, [ip, r9]
   15144:	add	r0, r9, #1
   15148:	cmp	r0, r5
   1514c:	movcc	r1, #92	; 0x5c
   15150:	strbcc	r1, [ip, r0]
   15154:	add	r0, r9, #2
   15158:	add	r9, r9, #3
   1515c:	cmp	r0, r5
   15160:	movcc	r1, #39	; 0x27
   15164:	strbcc	r1, [ip, r0]
   15168:	mov	r0, #0
   1516c:	str	r0, [fp, #-52]	; 0xffffffcc
   15170:	mov	r0, #0
   15174:	str	r0, [fp, #-56]	; 0xffffffc8
   15178:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1517c:	tst	r0, #1
   15180:	beq	14ed0 <__assert_fail@plt+0x3b88>
   15184:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15188:	mov	r1, r8
   1518c:	cmp	r0, #0
   15190:	mov	r0, r6
   15194:	beq	15258 <__assert_fail@plt+0x3f10>
   15198:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1519c:	tst	r2, #1
   151a0:	bne	15900 <__assert_fail@plt+0x45b8>
   151a4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   151a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   151ac:	subs	r2, r2, #2
   151b0:	movwne	r2, #1
   151b4:	orr	r2, r2, r3
   151b8:	tst	r2, #1
   151bc:	bne	151f8 <__assert_fail@plt+0x3eb0>
   151c0:	cmp	r9, r5
   151c4:	movcc	r2, #39	; 0x27
   151c8:	strbcc	r2, [ip, r9]
   151cc:	add	r2, r9, #1
   151d0:	cmp	r2, r5
   151d4:	movcc	r3, #36	; 0x24
   151d8:	strbcc	r3, [ip, r2]
   151dc:	add	r2, r9, #2
   151e0:	add	r9, r9, #3
   151e4:	cmp	r2, r5
   151e8:	movcc	r3, #39	; 0x27
   151ec:	strbcc	r3, [ip, r2]
   151f0:	mov	r2, #1
   151f4:	str	r2, [fp, #-52]	; 0xffffffcc
   151f8:	cmp	r9, r5
   151fc:	movcc	r2, #92	; 0x5c
   15200:	strbcc	r2, [ip, r9]
   15204:	add	r9, r9, #1
   15208:	b	152a0 <__assert_fail@plt+0x3f58>
   1520c:	ldr	r0, [sp, #40]	; 0x28
   15210:	cmp	r0, #1
   15214:	bne	15314 <__assert_fail@plt+0x3fcc>
   15218:	bl	111f8 <__ctype_b_loc@plt>
   1521c:	ldr	r0, [r0]
   15220:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15224:	mov	r1, #1
   15228:	add	r0, r0, r6, lsl #1
   1522c:	ldrb	r0, [r0, #1]
   15230:	ubfx	r8, r0, #6, #1
   15234:	b	1566c <__assert_fail@plt+0x4324>
   15238:	ldr	r1, [sp, #48]	; 0x30
   1523c:	mov	r0, #0
   15240:	str	r0, [fp, #-56]	; 0xffffffc8
   15244:	mov	r0, #92	; 0x5c
   15248:	cmp	r1, #0
   1524c:	beq	152c0 <__assert_fail@plt+0x3f78>
   15250:	mov	r6, #92	; 0x5c
   15254:	mov	r8, #0
   15258:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1525c:	cmp	r0, #0
   15260:	bne	15298 <__assert_fail@plt+0x3f50>
   15264:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15268:	tst	r0, #1
   1526c:	beq	15298 <__assert_fail@plt+0x3f50>
   15270:	cmp	r9, r5
   15274:	movcc	r0, #39	; 0x27
   15278:	strbcc	r0, [ip, r9]
   1527c:	add	r0, r9, #1
   15280:	add	r9, r9, #2
   15284:	cmp	r0, r5
   15288:	movcc	r1, #39	; 0x27
   1528c:	strbcc	r1, [ip, r0]
   15290:	mov	r0, #0
   15294:	str	r0, [fp, #-52]	; 0xffffffcc
   15298:	mov	r1, r8
   1529c:	mov	r0, r6
   152a0:	cmp	r9, r5
   152a4:	and	r4, r4, r1
   152a8:	strbcc	r0, [ip, r9]
   152ac:	add	r9, r9, #1
   152b0:	add	sl, sl, #1
   152b4:	cmn	r7, #1
   152b8:	bne	14bb0 <__assert_fail@plt+0x3868>
   152bc:	b	14bbc <__assert_fail@plt+0x3874>
   152c0:	mov	r1, #0
   152c4:	mov	r8, #0
   152c8:	str	r1, [fp, #-56]	; 0xffffffc8
   152cc:	ldr	r1, [sp, #88]	; 0x58
   152d0:	tst	r1, #1
   152d4:	mov	r1, #0
   152d8:	beq	14ec4 <__assert_fail@plt+0x3b7c>
   152dc:	b	15198 <__assert_fail@plt+0x3e50>
   152e0:	ldr	r0, [sp, #36]	; 0x24
   152e4:	mov	r6, #0
   152e8:	mov	r8, #0
   152ec:	cmp	r0, #0
   152f0:	mov	r0, #0
   152f4:	str	r0, [fp, #-56]	; 0xffffffc8
   152f8:	bne	152b0 <__assert_fail@plt+0x3f68>
   152fc:	b	14ec4 <__assert_fail@plt+0x3b7c>
   15300:	mov	r8, #1
   15304:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15308:	tst	r0, #1
   1530c:	beq	14ed0 <__assert_fail@plt+0x3b88>
   15310:	b	15184 <__assert_fail@plt+0x3e3c>
   15314:	mov	r0, #0
   15318:	cmn	r7, #1
   1531c:	str	r0, [fp, #-36]	; 0xffffffdc
   15320:	str	r0, [fp, #-40]	; 0xffffffd8
   15324:	bne	15338 <__assert_fail@plt+0x3ff0>
   15328:	mov	r0, lr
   1532c:	bl	11228 <strlen@plt>
   15330:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15334:	mov	r7, r0
   15338:	ldr	r0, [sp, #44]	; 0x2c
   1533c:	str	r4, [sp, #84]	; 0x54
   15340:	str	r5, [sp, #28]
   15344:	cmp	r0, #0
   15348:	beq	1559c <__assert_fail@plt+0x4254>
   1534c:	ldr	r0, [sp, #80]	; 0x50
   15350:	mov	r8, #1
   15354:	mov	r5, #0
   15358:	add	r0, r0, sl
   1535c:	str	r0, [sp, #24]
   15360:	sub	r0, fp, #40	; 0x28
   15364:	mov	r3, r0
   15368:	b	153a4 <__assert_fail@plt+0x405c>
   1536c:	ldr	r5, [sp, #68]	; 0x44
   15370:	add	r5, r0, r5
   15374:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15378:	bl	11150 <iswprint@plt>
   1537c:	cmp	r0, #0
   15380:	sub	r4, fp, #40	; 0x28
   15384:	movwne	r0, #1
   15388:	and	r8, r8, r0
   1538c:	mov	r0, r4
   15390:	bl	11108 <mbsinit@plt>
   15394:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15398:	mov	r3, r4
   1539c:	cmp	r0, #0
   153a0:	bne	15660 <__assert_fail@plt+0x4318>
   153a4:	str	r5, [sp, #68]	; 0x44
   153a8:	add	r5, r5, sl
   153ac:	sub	r0, fp, #44	; 0x2c
   153b0:	add	r1, lr, r5
   153b4:	sub	r2, r7, r5
   153b8:	bl	18bac <__assert_fail@plt+0x7864>
   153bc:	cmn	r0, #2
   153c0:	beq	15620 <__assert_fail@plt+0x42d8>
   153c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   153c8:	cmn	r0, #1
   153cc:	beq	15614 <__assert_fail@plt+0x42cc>
   153d0:	cmp	r0, #0
   153d4:	beq	15618 <__assert_fail@plt+0x42d0>
   153d8:	cmp	r0, #2
   153dc:	bcc	1536c <__assert_fail@plt+0x4024>
   153e0:	ldr	r1, [sp, #68]	; 0x44
   153e4:	ldr	r2, [sp, #24]
   153e8:	add	r1, r2, r1
   153ec:	sub	r2, r0, #1
   153f0:	ldrb	r3, [r1]
   153f4:	sub	r3, r3, #91	; 0x5b
   153f8:	cmp	r3, #33	; 0x21
   153fc:	bls	1541c <__assert_fail@plt+0x40d4>
   15400:	add	r1, r1, #1
   15404:	subs	r2, r2, #1
   15408:	beq	1536c <__assert_fail@plt+0x4024>
   1540c:	ldrb	r3, [r1]
   15410:	sub	r3, r3, #91	; 0x5b
   15414:	cmp	r3, #33	; 0x21
   15418:	bhi	15400 <__assert_fail@plt+0x40b8>
   1541c:	add	r5, pc, #0
   15420:	ldr	pc, [r5, r3, lsl #2]
   15424:	andeq	r5, r1, r8, lsr r9
   15428:	andeq	r5, r1, r8, lsr r9
   1542c:	andeq	r5, r1, r0, lsl #8
   15430:	andeq	r5, r1, r8, lsr r9
   15434:	andeq	r5, r1, r0, lsl #8
   15438:	andeq	r5, r1, r8, lsr r9
   1543c:	andeq	r5, r1, r0, lsl #8
   15440:	andeq	r5, r1, r0, lsl #8
   15444:	andeq	r5, r1, r0, lsl #8
   15448:	andeq	r5, r1, r0, lsl #8
   1544c:	andeq	r5, r1, r0, lsl #8
   15450:	andeq	r5, r1, r0, lsl #8
   15454:	andeq	r5, r1, r0, lsl #8
   15458:	andeq	r5, r1, r0, lsl #8
   1545c:	andeq	r5, r1, r0, lsl #8
   15460:	andeq	r5, r1, r0, lsl #8
   15464:	andeq	r5, r1, r0, lsl #8
   15468:	andeq	r5, r1, r0, lsl #8
   1546c:	andeq	r5, r1, r0, lsl #8
   15470:	andeq	r5, r1, r0, lsl #8
   15474:	andeq	r5, r1, r0, lsl #8
   15478:	andeq	r5, r1, r0, lsl #8
   1547c:	andeq	r5, r1, r0, lsl #8
   15480:	andeq	r5, r1, r0, lsl #8
   15484:	andeq	r5, r1, r0, lsl #8
   15488:	andeq	r5, r1, r0, lsl #8
   1548c:	andeq	r5, r1, r0, lsl #8
   15490:	andeq	r5, r1, r0, lsl #8
   15494:	andeq	r5, r1, r0, lsl #8
   15498:	andeq	r5, r1, r0, lsl #8
   1549c:	andeq	r5, r1, r0, lsl #8
   154a0:	andeq	r5, r1, r0, lsl #8
   154a4:	andeq	r5, r1, r0, lsl #8
   154a8:	andeq	r5, r1, r8, lsr r9
   154ac:	mov	r9, r0
   154b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   154b4:	tst	r0, #1
   154b8:	beq	14ed0 <__assert_fail@plt+0x3b88>
   154bc:	b	15184 <__assert_fail@plt+0x3e3c>
   154c0:	mov	r0, #0
   154c4:	str	r0, [fp, #-56]	; 0xffffffc8
   154c8:	ldr	r0, [sp, #32]
   154cc:	cmp	r0, #0
   154d0:	beq	15588 <__assert_fail@plt+0x4240>
   154d4:	add	r0, sl, #2
   154d8:	mov	r1, r7
   154dc:	cmp	r0, r7
   154e0:	bcs	15588 <__assert_fail@plt+0x4240>
   154e4:	add	r1, sl, lr
   154e8:	ldrb	r1, [r1, #1]
   154ec:	cmp	r1, #63	; 0x3f
   154f0:	bne	15588 <__assert_fail@plt+0x4240>
   154f4:	ldrb	r8, [lr, r0]
   154f8:	sub	r2, r8, #33	; 0x21
   154fc:	cmp	r2, #29
   15500:	bhi	15588 <__assert_fail@plt+0x4240>
   15504:	mov	r1, r4
   15508:	movw	r4, #20929	; 0x51c1
   1550c:	mov	r3, #1
   15510:	movt	r4, #14336	; 0x3800
   15514:	tst	r4, r3, lsl r2
   15518:	beq	15844 <__assert_fail@plt+0x44fc>
   1551c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15520:	tst	r2, #1
   15524:	bne	15900 <__assert_fail@plt+0x45b8>
   15528:	cmp	r9, r5
   1552c:	mov	r6, r8
   15530:	mov	r4, r1
   15534:	mov	sl, r0
   15538:	mov	r8, #0
   1553c:	movcc	r2, #63	; 0x3f
   15540:	strbcc	r2, [ip, r9]
   15544:	add	r2, r9, #1
   15548:	cmp	r2, r5
   1554c:	movcc	r3, #34	; 0x22
   15550:	strbcc	r3, [ip, r2]
   15554:	add	r2, r9, #2
   15558:	cmp	r2, r5
   1555c:	movcc	r3, #34	; 0x22
   15560:	strbcc	r3, [ip, r2]
   15564:	add	r2, r9, #3
   15568:	add	r9, r9, #4
   1556c:	cmp	r2, r5
   15570:	movcc	r3, #63	; 0x3f
   15574:	strbcc	r3, [ip, r2]
   15578:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1557c:	tst	r0, #1
   15580:	beq	14ed0 <__assert_fail@plt+0x3b88>
   15584:	b	15184 <__assert_fail@plt+0x3e3c>
   15588:	mov	r8, #0
   1558c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15590:	tst	r0, #1
   15594:	beq	14ed0 <__assert_fail@plt+0x3b88>
   15598:	b	15184 <__assert_fail@plt+0x3e3c>
   1559c:	mov	r8, #1
   155a0:	mov	r5, #0
   155a4:	sub	r4, fp, #40	; 0x28
   155a8:	str	r5, [sp, #68]	; 0x44
   155ac:	add	r5, r5, sl
   155b0:	sub	r0, fp, #44	; 0x2c
   155b4:	mov	r3, r4
   155b8:	add	r1, lr, r5
   155bc:	sub	r2, r7, r5
   155c0:	bl	18bac <__assert_fail@plt+0x7864>
   155c4:	cmn	r0, #2
   155c8:	beq	15620 <__assert_fail@plt+0x42d8>
   155cc:	cmn	r0, #1
   155d0:	beq	15614 <__assert_fail@plt+0x42cc>
   155d4:	ldr	r5, [sp, #68]	; 0x44
   155d8:	cmp	r0, #0
   155dc:	beq	1565c <__assert_fail@plt+0x4314>
   155e0:	add	r5, r0, r5
   155e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   155e8:	bl	11150 <iswprint@plt>
   155ec:	cmp	r0, #0
   155f0:	sub	r4, fp, #40	; 0x28
   155f4:	movwne	r0, #1
   155f8:	and	r8, r8, r0
   155fc:	mov	r0, r4
   15600:	bl	11108 <mbsinit@plt>
   15604:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15608:	cmp	r0, #0
   1560c:	beq	155a8 <__assert_fail@plt+0x4260>
   15610:	b	15660 <__assert_fail@plt+0x4318>
   15614:	mov	r8, #0
   15618:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1561c:	b	15654 <__assert_fail@plt+0x430c>
   15620:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15624:	mov	r8, #0
   15628:	cmp	r5, r7
   1562c:	bcs	15654 <__assert_fail@plt+0x430c>
   15630:	ldrb	r0, [lr, r5]
   15634:	cmp	r0, #0
   15638:	beq	15654 <__assert_fail@plt+0x430c>
   1563c:	ldr	r0, [sp, #68]	; 0x44
   15640:	add	r0, r0, #1
   15644:	add	r5, r0, sl
   15648:	str	r0, [sp, #68]	; 0x44
   1564c:	cmp	r5, r7
   15650:	bcc	15630 <__assert_fail@plt+0x42e8>
   15654:	ldr	r5, [sp, #68]	; 0x44
   15658:	b	15660 <__assert_fail@plt+0x4318>
   1565c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15660:	mov	r1, r5
   15664:	ldr	r5, [sp, #28]
   15668:	ldr	r4, [sp, #84]	; 0x54
   1566c:	ldr	r0, [sp, #52]	; 0x34
   15670:	ldr	ip, [fp, #-84]	; 0xffffffac
   15674:	cmp	r1, #1
   15678:	orr	r2, r8, r0
   1567c:	mov	r0, r1
   15680:	bhi	1568c <__assert_fail@plt+0x4344>
   15684:	tst	r2, #1
   15688:	bne	14ec4 <__assert_fail@plt+0x3b7c>
   1568c:	add	r0, r0, sl
   15690:	str	r2, [sp, #84]	; 0x54
   15694:	str	r0, [fp, #-56]	; 0xffffffc8
   15698:	mov	r0, #0
   1569c:	tst	r2, #1
   156a0:	bne	15780 <__assert_fail@plt+0x4438>
   156a4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   156a8:	tst	r1, #1
   156ac:	bne	15900 <__assert_fail@plt+0x45b8>
   156b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   156b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   156b8:	subs	r2, r1, #2
   156bc:	movwne	r2, #1
   156c0:	orr	r2, r2, r0
   156c4:	tst	r2, #1
   156c8:	bne	15704 <__assert_fail@plt+0x43bc>
   156cc:	cmp	r9, r5
   156d0:	add	r2, r9, #1
   156d4:	mov	r0, #1
   156d8:	movcc	r1, #39	; 0x27
   156dc:	str	r0, [fp, #-52]	; 0xffffffcc
   156e0:	strbcc	r1, [ip, r9]
   156e4:	cmp	r2, r5
   156e8:	movcc	r1, #36	; 0x24
   156ec:	strbcc	r1, [ip, r2]
   156f0:	add	r2, r9, #2
   156f4:	add	r9, r9, #3
   156f8:	cmp	r2, r5
   156fc:	movcc	r1, #39	; 0x27
   15700:	strbcc	r1, [ip, r2]
   15704:	cmp	r9, r5
   15708:	add	r2, r9, #1
   1570c:	movcc	r1, #92	; 0x5c
   15710:	strbcc	r1, [ip, r9]
   15714:	cmp	r2, r5
   15718:	bcs	1572c <__assert_fail@plt+0x43e4>
   1571c:	uxtb	r3, r6
   15720:	mov	r1, #48	; 0x30
   15724:	orr	r3, r1, r3, lsr #6
   15728:	strb	r3, [ip, r2]
   1572c:	add	r2, r9, #2
   15730:	add	r9, r9, #3
   15734:	cmp	r2, r5
   15738:	lsrcc	r3, r6, #3
   1573c:	movcc	r1, #6
   15740:	bficc	r3, r1, #3, #29
   15744:	mov	r1, #6
   15748:	bfi	r6, r1, #3, #29
   1574c:	strbcc	r3, [ip, r2]
   15750:	mov	r2, #1
   15754:	b	157b4 <__assert_fail@plt+0x446c>
   15758:	ldr	r1, [sp, #80]	; 0x50
   1575c:	cmp	r9, r2
   15760:	mov	r5, r2
   15764:	ldr	r2, [sp, #84]	; 0x54
   15768:	strbcc	r6, [ip, r9]
   1576c:	add	r9, r9, #1
   15770:	ldrb	r6, [r1, sl]
   15774:	mov	sl, r3
   15778:	tst	r2, #1
   1577c:	beq	156a4 <__assert_fail@plt+0x435c>
   15780:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15784:	tst	r1, #1
   15788:	beq	157a8 <__assert_fail@plt+0x4460>
   1578c:	cmp	r9, r5
   15790:	mov	r2, r0
   15794:	movcc	r1, #92	; 0x5c
   15798:	strbcc	r1, [ip, r9]
   1579c:	add	r9, r9, #1
   157a0:	mov	r1, #0
   157a4:	b	157b0 <__assert_fail@plt+0x4468>
   157a8:	mov	r1, #0
   157ac:	mov	r2, r0
   157b0:	str	r1, [fp, #-48]	; 0xffffffd0
   157b4:	mov	r0, r2
   157b8:	and	r1, r2, #1
   157bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   157c0:	add	r3, sl, #1
   157c4:	cmp	r2, r3
   157c8:	bls	15828 <__assert_fail@plt+0x44e0>
   157cc:	mov	r2, r5
   157d0:	ldr	r5, [fp, #-52]	; 0xffffffcc
   157d4:	cmp	r1, #0
   157d8:	movwne	r1, #1
   157dc:	mvn	r5, r5
   157e0:	orr	r5, r5, r1
   157e4:	tst	r5, #1
   157e8:	bne	15758 <__assert_fail@plt+0x4410>
   157ec:	cmp	r9, r2
   157f0:	movcc	r5, r4
   157f4:	movcc	r4, #39	; 0x27
   157f8:	strbcc	r4, [ip, r9]
   157fc:	movcc	r4, r5
   15800:	add	r5, r9, #1
   15804:	add	r9, r9, #2
   15808:	cmp	r5, r2
   1580c:	movcc	r1, r4
   15810:	movcc	r4, #39	; 0x27
   15814:	strbcc	r4, [ip, r5]
   15818:	movcc	r4, r1
   1581c:	mov	r1, #0
   15820:	str	r1, [fp, #-52]	; 0xffffffcc
   15824:	b	15758 <__assert_fail@plt+0x4410>
   15828:	cmp	r1, #0
   1582c:	movwne	r1, #1
   15830:	str	r1, [fp, #-56]	; 0xffffffc8
   15834:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15838:	cmp	r0, #0
   1583c:	beq	15264 <__assert_fail@plt+0x3f1c>
   15840:	b	15298 <__assert_fail@plt+0x3f50>
   15844:	mov	r8, #0
   15848:	mov	r4, r1
   1584c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15850:	tst	r0, #1
   15854:	beq	14ed0 <__assert_fail@plt+0x3b88>
   15858:	b	15184 <__assert_fail@plt+0x3e3c>
   1585c:	mov	r7, sl
   15860:	b	15868 <__assert_fail@plt+0x4520>
   15864:	mvn	r7, #0
   15868:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1586c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15870:	ldr	r2, [sp, #88]	; 0x58
   15874:	eor	r0, r1, #2
   15878:	orr	r0, r0, r9
   1587c:	clz	r0, r0
   15880:	lsr	r0, r0, #5
   15884:	tst	r3, r0
   15888:	bne	15900 <__assert_fail@plt+0x45b8>
   1588c:	subs	r0, r1, #2
   15890:	movwne	r0, #1
   15894:	orr	r0, r3, r0
   15898:	tst	r0, #1
   1589c:	ldreq	r0, [sp, #60]	; 0x3c
   158a0:	eoreq	r0, r0, #1
   158a4:	tsteq	r0, #1
   158a8:	bne	159dc <__assert_fail@plt+0x4694>
   158ac:	tst	r4, #1
   158b0:	bne	159a0 <__assert_fail@plt+0x4658>
   158b4:	ldr	r6, [sp, #56]	; 0x38
   158b8:	mov	r8, #0
   158bc:	cmp	r6, #0
   158c0:	beq	159d8 <__assert_fail@plt+0x4690>
   158c4:	mov	r1, #0
   158c8:	mov	r4, #2
   158cc:	cmp	r5, #0
   158d0:	mov	r0, r2
   158d4:	mov	r3, #0
   158d8:	str	r1, [sp, #84]	; 0x54
   158dc:	beq	14724 <__assert_fail@plt+0x33dc>
   158e0:	b	159dc <__assert_fail@plt+0x4694>
   158e4:	movw	r0, #40428	; 0x9dec
   158e8:	movt	r0, #1
   158ec:	str	r0, [sp, #76]	; 0x4c
   158f0:	mov	r9, #0
   158f4:	tst	r8, #1
   158f8:	beq	149bc <__assert_fail@plt+0x3674>
   158fc:	b	14afc <__assert_fail@plt+0x37b4>
   15900:	ldr	r1, [sp, #88]	; 0x58
   15904:	mov	r0, #2
   15908:	tst	r1, #1
   1590c:	movwne	r0, #4
   15910:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15914:	ldr	r1, [fp, #12]
   15918:	cmp	r2, #2
   1591c:	moveq	r2, r0
   15920:	b	15958 <__assert_fail@plt+0x4610>
   15924:	ldr	ip, [fp, #-84]	; 0xffffffac
   15928:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1592c:	ldr	r1, [fp, #12]
   15930:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15934:	b	15958 <__assert_fail@plt+0x4610>
   15938:	ldr	r1, [sp, #88]	; 0x58
   1593c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15940:	ldr	r5, [sp, #28]
   15944:	mov	r0, #2
   15948:	tst	r1, #1
   1594c:	ldr	r1, [fp, #12]
   15950:	movwne	r0, #4
   15954:	mov	r2, r0
   15958:	mov	r0, #0
   1595c:	bic	r1, r1, #2
   15960:	str	r2, [sp]
   15964:	mov	r2, lr
   15968:	str	r0, [sp, #8]
   1596c:	ldr	r0, [sp, #72]	; 0x48
   15970:	str	r1, [sp, #4]
   15974:	mov	r1, r5
   15978:	str	r0, [sp, #12]
   1597c:	ldr	r0, [sp, #76]	; 0x4c
   15980:	str	r0, [sp, #16]
   15984:	mov	r0, ip
   15988:	mov	r3, r7
   1598c:	bl	14698 <__assert_fail@plt+0x3350>
   15990:	mov	r9, r0
   15994:	mov	r0, r9
   15998:	sub	sp, fp, #28
   1599c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a0:	mov	r0, #5
   159a4:	ldr	r1, [sp, #56]	; 0x38
   159a8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   159ac:	str	r0, [sp]
   159b0:	ldr	r0, [fp, #12]
   159b4:	str	r0, [sp, #4]
   159b8:	ldr	r0, [fp, #16]
   159bc:	str	r0, [sp, #8]
   159c0:	ldr	r0, [sp, #72]	; 0x48
   159c4:	str	r0, [sp, #12]
   159c8:	ldr	r0, [sp, #76]	; 0x4c
   159cc:	str	r0, [sp, #16]
   159d0:	ldr	r0, [fp, #-84]	; 0xffffffac
   159d4:	b	15988 <__assert_fail@plt+0x4640>
   159d8:	mov	r3, #0
   159dc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   159e0:	cmp	r1, #0
   159e4:	beq	15a20 <__assert_fail@plt+0x46d8>
   159e8:	ldr	r2, [fp, #-84]	; 0xffffffac
   159ec:	tst	r3, #1
   159f0:	bne	15a24 <__assert_fail@plt+0x46dc>
   159f4:	ldrb	r0, [r1]
   159f8:	cmp	r0, #0
   159fc:	beq	15a24 <__assert_fail@plt+0x46dc>
   15a00:	add	r1, r1, #1
   15a04:	cmp	r9, r5
   15a08:	strbcc	r0, [r2, r9]
   15a0c:	add	r9, r9, #1
   15a10:	ldrb	r0, [r1], #1
   15a14:	cmp	r0, #0
   15a18:	bne	15a04 <__assert_fail@plt+0x46bc>
   15a1c:	b	15a24 <__assert_fail@plt+0x46dc>
   15a20:	ldr	r2, [fp, #-84]	; 0xffffffac
   15a24:	cmp	r9, r5
   15a28:	movcc	r0, #0
   15a2c:	strbcc	r0, [r2, r9]
   15a30:	mov	r0, r9
   15a34:	sub	sp, fp, #28
   15a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a3c:	mov	r0, #4
   15a40:	b	15910 <__assert_fail@plt+0x45c8>
   15a44:	bl	11324 <abort@plt>
   15a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a4c:	add	fp, sp, #28
   15a50:	sub	sp, sp, #28
   15a54:	movw	r5, #45568	; 0xb200
   15a58:	cmp	r2, #0
   15a5c:	mov	r4, r1
   15a60:	mov	r7, r0
   15a64:	str	r0, [sp, #20]
   15a68:	movt	r5, #2
   15a6c:	movne	r5, r2
   15a70:	bl	11240 <__errno_location@plt>
   15a74:	mov	sl, r0
   15a78:	ldr	r2, [r5, #40]	; 0x28
   15a7c:	ldr	r3, [r5, #44]	; 0x2c
   15a80:	ldm	r5, {r0, r1}
   15a84:	orr	r8, r1, #1
   15a88:	add	r9, r5, #8
   15a8c:	mov	r1, #0
   15a90:	ldr	r6, [sl]
   15a94:	stm	sp, {r0, r8, r9}
   15a98:	mov	r0, #0
   15a9c:	str	r2, [sp, #12]
   15aa0:	str	r3, [sp, #16]
   15aa4:	mov	r2, r7
   15aa8:	mov	r3, r4
   15aac:	str	r6, [sp, #24]
   15ab0:	mov	r6, r4
   15ab4:	bl	14698 <__assert_fail@plt+0x3350>
   15ab8:	add	r7, r0, #1
   15abc:	mov	r0, r7
   15ac0:	bl	16bd4 <__assert_fail@plt+0x588c>
   15ac4:	mov	r4, r0
   15ac8:	ldr	r0, [r5]
   15acc:	ldr	r2, [r5, #44]	; 0x2c
   15ad0:	ldr	r1, [r5, #40]	; 0x28
   15ad4:	mov	r3, r6
   15ad8:	stm	sp, {r0, r8, r9}
   15adc:	str	r2, [sp, #16]
   15ae0:	ldr	r2, [sp, #20]
   15ae4:	str	r1, [sp, #12]
   15ae8:	mov	r0, r4
   15aec:	mov	r1, r7
   15af0:	bl	14698 <__assert_fail@plt+0x3350>
   15af4:	ldr	r0, [sp, #24]
   15af8:	str	r0, [sl]
   15afc:	mov	r0, r4
   15b00:	sub	sp, fp, #28
   15b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b0c:	add	fp, sp, #28
   15b10:	sub	sp, sp, #36	; 0x24
   15b14:	movw	r8, #45568	; 0xb200
   15b18:	cmp	r3, #0
   15b1c:	mov	r4, r2
   15b20:	str	r2, [sp, #24]
   15b24:	mov	r5, r1
   15b28:	mov	r6, r0
   15b2c:	str	r0, [sp, #20]
   15b30:	movt	r8, #2
   15b34:	movne	r8, r3
   15b38:	bl	11240 <__errno_location@plt>
   15b3c:	str	r0, [sp, #28]
   15b40:	ldr	r1, [r8, #40]	; 0x28
   15b44:	ldr	r2, [r8, #44]	; 0x2c
   15b48:	ldr	r7, [r0]
   15b4c:	cmp	r4, #0
   15b50:	add	sl, r8, #8
   15b54:	mov	r0, #0
   15b58:	ldm	r8, {r3, r9}
   15b5c:	orreq	r9, r9, #1
   15b60:	stm	sp, {r3, r9, sl}
   15b64:	str	r1, [sp, #12]
   15b68:	str	r2, [sp, #16]
   15b6c:	mov	r1, #0
   15b70:	mov	r2, r6
   15b74:	mov	r3, r5
   15b78:	str	r7, [sp, #32]
   15b7c:	mov	r7, r5
   15b80:	bl	14698 <__assert_fail@plt+0x3350>
   15b84:	add	r4, r0, #1
   15b88:	mov	r5, r0
   15b8c:	mov	r0, r4
   15b90:	bl	16bd4 <__assert_fail@plt+0x588c>
   15b94:	mov	r6, r0
   15b98:	ldr	r0, [r8]
   15b9c:	ldr	r2, [r8, #44]	; 0x2c
   15ba0:	ldr	r1, [r8, #40]	; 0x28
   15ba4:	mov	r3, r7
   15ba8:	stm	sp, {r0, r9, sl}
   15bac:	str	r2, [sp, #16]
   15bb0:	ldr	r2, [sp, #20]
   15bb4:	str	r1, [sp, #12]
   15bb8:	mov	r0, r6
   15bbc:	mov	r1, r4
   15bc0:	bl	14698 <__assert_fail@plt+0x3350>
   15bc4:	ldr	r0, [sp, #24]
   15bc8:	ldr	r1, [sp, #32]
   15bcc:	ldr	r2, [sp, #28]
   15bd0:	cmp	r0, #0
   15bd4:	str	r1, [r2]
   15bd8:	strne	r5, [r0]
   15bdc:	mov	r0, r6
   15be0:	sub	sp, fp, #28
   15be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15be8:	push	{r4, r5, r6, r7, fp, lr}
   15bec:	add	fp, sp, #16
   15bf0:	movw	r4, #45392	; 0xb150
   15bf4:	movt	r4, #2
   15bf8:	ldrd	r6, [r4]
   15bfc:	cmp	r7, #2
   15c00:	blt	15c2c <__assert_fail@plt+0x48e4>
   15c04:	add	r5, r6, #12
   15c08:	mov	r7, #0
   15c0c:	ldr	r0, [r5, r7, lsl #3]
   15c10:	bl	140ac <__assert_fail@plt+0x2d64>
   15c14:	ldr	r1, [r4, #4]
   15c18:	add	r2, r7, #2
   15c1c:	add	r0, r7, #1
   15c20:	mov	r7, r0
   15c24:	cmp	r2, r1
   15c28:	blt	15c0c <__assert_fail@plt+0x48c4>
   15c2c:	ldr	r0, [r6, #4]
   15c30:	movw	r5, #45616	; 0xb230
   15c34:	movt	r5, #2
   15c38:	cmp	r0, r5
   15c3c:	beq	15c50 <__assert_fail@plt+0x4908>
   15c40:	bl	140ac <__assert_fail@plt+0x2d64>
   15c44:	mov	r0, #256	; 0x100
   15c48:	str	r0, [r4, #8]
   15c4c:	str	r5, [r4, #12]
   15c50:	add	r5, r4, #8
   15c54:	cmp	r6, r5
   15c58:	beq	15c68 <__assert_fail@plt+0x4920>
   15c5c:	mov	r0, r6
   15c60:	bl	140ac <__assert_fail@plt+0x2d64>
   15c64:	str	r5, [r4]
   15c68:	mov	r0, #1
   15c6c:	str	r0, [r4, #4]
   15c70:	pop	{r4, r5, r6, r7, fp, pc}
   15c74:	movw	r3, #45568	; 0xb200
   15c78:	mvn	r2, #0
   15c7c:	movt	r3, #2
   15c80:	b	15c84 <__assert_fail@plt+0x493c>
   15c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c88:	add	fp, sp, #28
   15c8c:	sub	sp, sp, #44	; 0x2c
   15c90:	mov	r7, r3
   15c94:	str	r2, [sp, #36]	; 0x24
   15c98:	str	r1, [sp, #32]
   15c9c:	mov	r5, r0
   15ca0:	bl	11240 <__errno_location@plt>
   15ca4:	cmp	r5, #0
   15ca8:	bmi	15e10 <__assert_fail@plt+0x4ac8>
   15cac:	cmn	r5, #-2147483647	; 0x80000001
   15cb0:	beq	15e10 <__assert_fail@plt+0x4ac8>
   15cb4:	movw	r8, #45392	; 0xb150
   15cb8:	mov	r4, r0
   15cbc:	ldr	r0, [r0]
   15cc0:	movt	r8, #2
   15cc4:	str	r4, [sp, #28]
   15cc8:	ldr	r1, [r8, #4]
   15ccc:	ldr	r6, [r8]
   15cd0:	str	r0, [sp, #24]
   15cd4:	cmp	r1, r5
   15cd8:	ble	15ce4 <__assert_fail@plt+0x499c>
   15cdc:	mov	sl, r6
   15ce0:	b	15d4c <__assert_fail@plt+0x4a04>
   15ce4:	mov	r0, #8
   15ce8:	add	r9, r8, #8
   15cec:	str	r1, [fp, #-32]	; 0xffffffe0
   15cf0:	sub	r1, r5, r1
   15cf4:	mvn	r3, #-2147483648	; 0x80000000
   15cf8:	str	r0, [sp]
   15cfc:	subs	r0, r6, r9
   15d00:	add	r2, r1, #1
   15d04:	sub	r1, fp, #32
   15d08:	movne	r0, r6
   15d0c:	bl	16dd4 <__assert_fail@plt+0x5a8c>
   15d10:	mov	sl, r0
   15d14:	cmp	r6, r9
   15d18:	str	r0, [r8]
   15d1c:	bne	15d28 <__assert_fail@plt+0x49e0>
   15d20:	ldrd	r0, [r8, #8]
   15d24:	stm	sl, {r0, r1}
   15d28:	ldr	r1, [r8, #4]
   15d2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15d30:	add	r0, sl, r1, lsl #3
   15d34:	sub	r1, r2, r1
   15d38:	lsl	r2, r1, #3
   15d3c:	mov	r1, #0
   15d40:	bl	11258 <memset@plt>
   15d44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15d48:	str	r0, [r8, #4]
   15d4c:	mov	r9, sl
   15d50:	ldm	r7, {r0, r1}
   15d54:	orr	r8, r1, #1
   15d58:	add	r1, r7, #8
   15d5c:	ldr	r2, [r7, #40]	; 0x28
   15d60:	ldr	r3, [r7, #44]	; 0x2c
   15d64:	ldr	r6, [r9, r5, lsl #3]!
   15d68:	str	r1, [sp, #20]
   15d6c:	ldr	r4, [r9, #4]!
   15d70:	stm	sp, {r0, r8}
   15d74:	add	r0, sp, #8
   15d78:	stm	r0, {r1, r2, r3}
   15d7c:	ldr	r2, [sp, #32]
   15d80:	ldr	r3, [sp, #36]	; 0x24
   15d84:	mov	r1, r6
   15d88:	mov	r0, r4
   15d8c:	bl	14698 <__assert_fail@plt+0x3350>
   15d90:	cmp	r6, r0
   15d94:	bhi	15df8 <__assert_fail@plt+0x4ab0>
   15d98:	add	r6, r0, #1
   15d9c:	movw	r0, #45616	; 0xb230
   15da0:	movt	r0, #2
   15da4:	str	r6, [sl, r5, lsl #3]
   15da8:	cmp	r4, r0
   15dac:	beq	15db8 <__assert_fail@plt+0x4a70>
   15db0:	mov	r0, r4
   15db4:	bl	140ac <__assert_fail@plt+0x2d64>
   15db8:	mov	r0, r6
   15dbc:	bl	16bd4 <__assert_fail@plt+0x588c>
   15dc0:	str	r0, [r9]
   15dc4:	mov	r4, r0
   15dc8:	add	r3, sp, #8
   15dcc:	ldr	r0, [r7]
   15dd0:	ldr	r1, [r7, #40]	; 0x28
   15dd4:	ldr	r2, [r7, #44]	; 0x2c
   15dd8:	stm	sp, {r0, r8}
   15ddc:	ldr	r0, [sp, #20]
   15de0:	stm	r3, {r0, r1, r2}
   15de4:	ldr	r2, [sp, #32]
   15de8:	ldr	r3, [sp, #36]	; 0x24
   15dec:	mov	r0, r4
   15df0:	mov	r1, r6
   15df4:	bl	14698 <__assert_fail@plt+0x3350>
   15df8:	ldr	r1, [sp, #24]
   15dfc:	ldr	r0, [sp, #28]
   15e00:	str	r1, [r0]
   15e04:	mov	r0, r4
   15e08:	sub	sp, fp, #28
   15e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e10:	bl	11324 <abort@plt>
   15e14:	movw	r3, #45568	; 0xb200
   15e18:	movt	r3, #2
   15e1c:	b	15c84 <__assert_fail@plt+0x493c>
   15e20:	movw	r3, #45568	; 0xb200
   15e24:	mov	r1, r0
   15e28:	mov	r0, #0
   15e2c:	mvn	r2, #0
   15e30:	movt	r3, #2
   15e34:	b	15c84 <__assert_fail@plt+0x493c>
   15e38:	movw	r3, #45568	; 0xb200
   15e3c:	mov	r2, r1
   15e40:	mov	r1, r0
   15e44:	mov	r0, #0
   15e48:	movt	r3, #2
   15e4c:	b	15c84 <__assert_fail@plt+0x493c>
   15e50:	push	{fp, lr}
   15e54:	mov	fp, sp
   15e58:	sub	sp, sp, #48	; 0x30
   15e5c:	vmov.i32	q8, #0	; 0x00000000
   15e60:	mov	ip, #32
   15e64:	mov	r3, sp
   15e68:	mov	lr, r2
   15e6c:	cmp	r1, #10
   15e70:	add	r2, r3, #16
   15e74:	vst1.64	{d16-d17}, [r3], ip
   15e78:	vst1.64	{d16-d17}, [r2]
   15e7c:	vst1.64	{d16-d17}, [r3]
   15e80:	beq	15ea0 <__assert_fail@plt+0x4b58>
   15e84:	str	r1, [sp]
   15e88:	mov	r3, sp
   15e8c:	mov	r1, lr
   15e90:	mvn	r2, #0
   15e94:	bl	15c84 <__assert_fail@plt+0x493c>
   15e98:	mov	sp, fp
   15e9c:	pop	{fp, pc}
   15ea0:	bl	11324 <abort@plt>
   15ea4:	push	{r4, sl, fp, lr}
   15ea8:	add	fp, sp, #8
   15eac:	sub	sp, sp, #48	; 0x30
   15eb0:	vmov.i32	q8, #0	; 0x00000000
   15eb4:	mov	ip, r3
   15eb8:	mov	r3, sp
   15ebc:	mov	lr, #32
   15ec0:	cmp	r1, #10
   15ec4:	add	r4, r3, #16
   15ec8:	vst1.64	{d16-d17}, [r3], lr
   15ecc:	vst1.64	{d16-d17}, [r4]
   15ed0:	vst1.64	{d16-d17}, [r3]
   15ed4:	beq	15ef4 <__assert_fail@plt+0x4bac>
   15ed8:	str	r1, [sp]
   15edc:	mov	r1, r2
   15ee0:	mov	r3, sp
   15ee4:	mov	r2, ip
   15ee8:	bl	15c84 <__assert_fail@plt+0x493c>
   15eec:	sub	sp, fp, #8
   15ef0:	pop	{r4, sl, fp, pc}
   15ef4:	bl	11324 <abort@plt>
   15ef8:	push	{fp, lr}
   15efc:	mov	fp, sp
   15f00:	sub	sp, sp, #48	; 0x30
   15f04:	vmov.i32	q8, #0	; 0x00000000
   15f08:	mov	r3, sp
   15f0c:	mov	ip, #32
   15f10:	cmp	r0, #10
   15f14:	add	r2, r3, #16
   15f18:	vst1.64	{d16-d17}, [r3], ip
   15f1c:	vst1.64	{d16-d17}, [r2]
   15f20:	vst1.64	{d16-d17}, [r3]
   15f24:	beq	15f44 <__assert_fail@plt+0x4bfc>
   15f28:	str	r0, [sp]
   15f2c:	mov	r3, sp
   15f30:	mov	r0, #0
   15f34:	mvn	r2, #0
   15f38:	bl	15c84 <__assert_fail@plt+0x493c>
   15f3c:	mov	sp, fp
   15f40:	pop	{fp, pc}
   15f44:	bl	11324 <abort@plt>
   15f48:	push	{fp, lr}
   15f4c:	mov	fp, sp
   15f50:	sub	sp, sp, #48	; 0x30
   15f54:	vmov.i32	q8, #0	; 0x00000000
   15f58:	mov	r3, sp
   15f5c:	mov	ip, #32
   15f60:	cmp	r0, #10
   15f64:	add	lr, r3, #16
   15f68:	vst1.64	{d16-d17}, [r3], ip
   15f6c:	vst1.64	{d16-d17}, [lr]
   15f70:	vst1.64	{d16-d17}, [r3]
   15f74:	beq	15f90 <__assert_fail@plt+0x4c48>
   15f78:	str	r0, [sp]
   15f7c:	mov	r3, sp
   15f80:	mov	r0, #0
   15f84:	bl	15c84 <__assert_fail@plt+0x493c>
   15f88:	mov	sp, fp
   15f8c:	pop	{fp, pc}
   15f90:	bl	11324 <abort@plt>
   15f94:	push	{r4, sl, fp, lr}
   15f98:	add	fp, sp, #8
   15f9c:	sub	sp, sp, #48	; 0x30
   15fa0:	mov	lr, r0
   15fa4:	movw	r0, #45568	; 0xb200
   15fa8:	mov	ip, r1
   15fac:	mov	r1, #32
   15fb0:	mov	r4, #1
   15fb4:	movt	r0, #2
   15fb8:	add	r3, r0, #16
   15fbc:	vld1.64	{d16-d17}, [r0], r1
   15fc0:	vld1.64	{d20-d21}, [r0]
   15fc4:	vld1.64	{d18-d19}, [r3]
   15fc8:	mov	r3, sp
   15fcc:	add	r0, r3, #32
   15fd0:	add	r1, r3, #16
   15fd4:	vst1.64	{d20-d21}, [r0]
   15fd8:	mov	r0, #28
   15fdc:	vst1.64	{d18-d19}, [r1]
   15fe0:	mov	r1, r3
   15fe4:	and	r0, r0, r2, lsr #3
   15fe8:	and	r2, r2, #31
   15fec:	vst1.64	{d16-d17}, [r1], r0
   15ff0:	ldr	r0, [r1, #8]
   15ff4:	bic	r4, r4, r0, lsr r2
   15ff8:	eor	r0, r0, r4, lsl r2
   15ffc:	mov	r2, ip
   16000:	str	r0, [r1, #8]
   16004:	mov	r0, #0
   16008:	mov	r1, lr
   1600c:	bl	15c84 <__assert_fail@plt+0x493c>
   16010:	sub	sp, fp, #8
   16014:	pop	{r4, sl, fp, pc}
   16018:	push	{fp, lr}
   1601c:	mov	fp, sp
   16020:	sub	sp, sp, #48	; 0x30
   16024:	mov	ip, r0
   16028:	movw	r0, #45568	; 0xb200
   1602c:	mov	r2, #32
   16030:	movt	r0, #2
   16034:	add	r3, r0, #16
   16038:	vld1.64	{d16-d17}, [r0], r2
   1603c:	vld1.64	{d20-d21}, [r0]
   16040:	vld1.64	{d18-d19}, [r3]
   16044:	mov	r3, sp
   16048:	add	r0, r3, #32
   1604c:	add	r2, r3, #16
   16050:	vst1.64	{d20-d21}, [r0]
   16054:	mov	r0, #28
   16058:	vst1.64	{d18-d19}, [r2]
   1605c:	mov	r2, r3
   16060:	and	r0, r0, r1, lsr #3
   16064:	and	r1, r1, #31
   16068:	vst1.64	{d16-d17}, [r2], r0
   1606c:	mov	r0, #1
   16070:	ldr	lr, [r2, #8]
   16074:	bic	r0, r0, lr, lsr r1
   16078:	eor	r0, lr, r0, lsl r1
   1607c:	mov	r1, ip
   16080:	str	r0, [r2, #8]
   16084:	mov	r0, #0
   16088:	mvn	r2, #0
   1608c:	bl	15c84 <__assert_fail@plt+0x493c>
   16090:	mov	sp, fp
   16094:	pop	{fp, pc}
   16098:	push	{fp, lr}
   1609c:	mov	fp, sp
   160a0:	sub	sp, sp, #48	; 0x30
   160a4:	mov	r1, r0
   160a8:	movw	r0, #45568	; 0xb200
   160ac:	mov	r3, #32
   160b0:	movt	r0, #2
   160b4:	add	r2, r0, #16
   160b8:	vld1.64	{d16-d17}, [r0], r3
   160bc:	mov	r3, sp
   160c0:	vld1.64	{d18-d19}, [r2]
   160c4:	vld1.64	{d20-d21}, [r0]
   160c8:	add	r2, r3, #16
   160cc:	add	r0, r3, #32
   160d0:	vst1.64	{d18-d19}, [r2]
   160d4:	vst1.64	{d20-d21}, [r0]
   160d8:	mov	r0, #12
   160dc:	mov	r2, r3
   160e0:	vst1.64	{d16-d17}, [r2], r0
   160e4:	ldr	r0, [r2]
   160e8:	orr	r0, r0, #67108864	; 0x4000000
   160ec:	str	r0, [r2]
   160f0:	mov	r0, #0
   160f4:	mvn	r2, #0
   160f8:	bl	15c84 <__assert_fail@plt+0x493c>
   160fc:	mov	sp, fp
   16100:	pop	{fp, pc}
   16104:	push	{fp, lr}
   16108:	mov	fp, sp
   1610c:	sub	sp, sp, #48	; 0x30
   16110:	mov	ip, r1
   16114:	mov	r1, r0
   16118:	movw	r0, #45568	; 0xb200
   1611c:	mov	r2, #32
   16120:	movt	r0, #2
   16124:	add	r3, r0, #16
   16128:	vld1.64	{d16-d17}, [r0], r2
   1612c:	vld1.64	{d18-d19}, [r3]
   16130:	vld1.64	{d20-d21}, [r0]
   16134:	mov	r3, sp
   16138:	add	r2, r3, #16
   1613c:	add	r0, r3, #32
   16140:	vst1.64	{d18-d19}, [r2]
   16144:	vst1.64	{d20-d21}, [r0]
   16148:	mov	r0, #12
   1614c:	mov	r2, r3
   16150:	vst1.64	{d16-d17}, [r2], r0
   16154:	ldr	r0, [r2]
   16158:	orr	r0, r0, #67108864	; 0x4000000
   1615c:	str	r0, [r2]
   16160:	mov	r0, #0
   16164:	mov	r2, ip
   16168:	bl	15c84 <__assert_fail@plt+0x493c>
   1616c:	mov	sp, fp
   16170:	pop	{fp, pc}
   16174:	push	{r4, sl, fp, lr}
   16178:	add	fp, sp, #8
   1617c:	sub	sp, sp, #96	; 0x60
   16180:	vmov.i32	q8, #0	; 0x00000000
   16184:	mov	ip, r2
   16188:	mov	r2, sp
   1618c:	mov	r4, #28
   16190:	cmp	r1, #10
   16194:	mov	r3, r2
   16198:	add	lr, r2, #16
   1619c:	vst1.64	{d16-d17}, [r3], r4
   161a0:	vst1.64	{d16-d17}, [lr]
   161a4:	vst1.32	{d16-d17}, [r3]
   161a8:	beq	161f8 <__assert_fail@plt+0x4eb0>
   161ac:	vld1.64	{d16-d17}, [r2], r4
   161b0:	vld1.64	{d18-d19}, [lr]
   161b4:	add	r3, sp, #48	; 0x30
   161b8:	vld1.32	{d20-d21}, [r2]
   161bc:	add	r2, r3, #20
   161c0:	add	r4, r3, #4
   161c4:	vst1.32	{d18-d19}, [r2]
   161c8:	add	r2, r3, #32
   161cc:	vst1.32	{d16-d17}, [r4]
   161d0:	vst1.32	{d20-d21}, [r2]
   161d4:	str	r1, [sp, #48]	; 0x30
   161d8:	mvn	r2, #0
   161dc:	ldr	r1, [sp, #60]	; 0x3c
   161e0:	orr	r1, r1, #67108864	; 0x4000000
   161e4:	str	r1, [sp, #60]	; 0x3c
   161e8:	mov	r1, ip
   161ec:	bl	15c84 <__assert_fail@plt+0x493c>
   161f0:	sub	sp, fp, #8
   161f4:	pop	{r4, sl, fp, pc}
   161f8:	bl	11324 <abort@plt>
   161fc:	push	{r4, r5, r6, sl, fp, lr}
   16200:	add	fp, sp, #16
   16204:	sub	sp, sp, #48	; 0x30
   16208:	mov	ip, r3
   1620c:	movw	r3, #45568	; 0xb200
   16210:	mov	r6, #32
   16214:	cmp	r1, #0
   16218:	mov	r4, sp
   1621c:	movt	r3, #2
   16220:	cmpne	r2, #0
   16224:	add	r5, r4, #16
   16228:	add	lr, r3, #16
   1622c:	vld1.64	{d16-d17}, [r3], r6
   16230:	vld1.64	{d18-d19}, [lr]
   16234:	vld1.64	{d20-d21}, [r3]
   16238:	mov	r3, #10
   1623c:	vst1.64	{d16-d17}, [r4], r6
   16240:	vst1.64	{d18-d19}, [r5]
   16244:	vst1.64	{d20-d21}, [r4]
   16248:	str	r3, [sp]
   1624c:	bne	16254 <__assert_fail@plt+0x4f0c>
   16250:	bl	11324 <abort@plt>
   16254:	str	r2, [sp, #44]	; 0x2c
   16258:	str	r1, [sp, #40]	; 0x28
   1625c:	mov	r3, sp
   16260:	mov	r1, ip
   16264:	mvn	r2, #0
   16268:	bl	15c84 <__assert_fail@plt+0x493c>
   1626c:	sub	sp, fp, #16
   16270:	pop	{r4, r5, r6, sl, fp, pc}
   16274:	push	{r4, r5, r6, sl, fp, lr}
   16278:	add	fp, sp, #16
   1627c:	sub	sp, sp, #48	; 0x30
   16280:	mov	lr, r3
   16284:	movw	r3, #45568	; 0xb200
   16288:	mov	r6, #32
   1628c:	cmp	r1, #0
   16290:	mov	r4, sp
   16294:	movt	r3, #2
   16298:	cmpne	r2, #0
   1629c:	add	r5, r4, #16
   162a0:	add	ip, r3, #16
   162a4:	vld1.64	{d16-d17}, [r3], r6
   162a8:	vld1.64	{d18-d19}, [ip]
   162ac:	vld1.64	{d20-d21}, [r3]
   162b0:	mov	r3, #10
   162b4:	vst1.64	{d16-d17}, [r4], r6
   162b8:	vst1.64	{d18-d19}, [r5]
   162bc:	vst1.64	{d20-d21}, [r4]
   162c0:	str	r3, [sp]
   162c4:	bne	162cc <__assert_fail@plt+0x4f84>
   162c8:	bl	11324 <abort@plt>
   162cc:	ldr	ip, [fp, #8]
   162d0:	str	r2, [sp, #44]	; 0x2c
   162d4:	str	r1, [sp, #40]	; 0x28
   162d8:	mov	r3, sp
   162dc:	mov	r1, lr
   162e0:	mov	r2, ip
   162e4:	bl	15c84 <__assert_fail@plt+0x493c>
   162e8:	sub	sp, fp, #16
   162ec:	pop	{r4, r5, r6, sl, fp, pc}
   162f0:	push	{r4, sl, fp, lr}
   162f4:	add	fp, sp, #8
   162f8:	sub	sp, sp, #48	; 0x30
   162fc:	movw	r3, #45568	; 0xb200
   16300:	mov	lr, #32
   16304:	mov	ip, r2
   16308:	cmp	r0, #0
   1630c:	movt	r3, #2
   16310:	cmpne	r1, #0
   16314:	add	r2, r3, #16
   16318:	vld1.64	{d16-d17}, [r3], lr
   1631c:	vld1.64	{d20-d21}, [r3]
   16320:	vld1.64	{d18-d19}, [r2]
   16324:	mov	r2, sp
   16328:	add	r4, r2, #16
   1632c:	vst1.64	{d16-d17}, [r2], lr
   16330:	vst1.64	{d20-d21}, [r2]
   16334:	mov	r2, #10
   16338:	vst1.64	{d18-d19}, [r4]
   1633c:	str	r2, [sp]
   16340:	bne	16348 <__assert_fail@plt+0x5000>
   16344:	bl	11324 <abort@plt>
   16348:	str	r1, [sp, #44]	; 0x2c
   1634c:	str	r0, [sp, #40]	; 0x28
   16350:	mov	r3, sp
   16354:	mov	r0, #0
   16358:	mov	r1, ip
   1635c:	mvn	r2, #0
   16360:	bl	15c84 <__assert_fail@plt+0x493c>
   16364:	sub	sp, fp, #8
   16368:	pop	{r4, sl, fp, pc}
   1636c:	push	{r4, r5, fp, lr}
   16370:	add	fp, sp, #8
   16374:	sub	sp, sp, #48	; 0x30
   16378:	mov	ip, r3
   1637c:	movw	r3, #45568	; 0xb200
   16380:	mov	r4, #32
   16384:	mov	lr, r2
   16388:	cmp	r0, #0
   1638c:	movt	r3, #2
   16390:	cmpne	r1, #0
   16394:	add	r2, r3, #16
   16398:	vld1.64	{d16-d17}, [r3], r4
   1639c:	vld1.64	{d20-d21}, [r3]
   163a0:	vld1.64	{d18-d19}, [r2]
   163a4:	mov	r2, sp
   163a8:	add	r5, r2, #16
   163ac:	vst1.64	{d16-d17}, [r2], r4
   163b0:	vst1.64	{d20-d21}, [r2]
   163b4:	mov	r2, #10
   163b8:	vst1.64	{d18-d19}, [r5]
   163bc:	str	r2, [sp]
   163c0:	bne	163c8 <__assert_fail@plt+0x5080>
   163c4:	bl	11324 <abort@plt>
   163c8:	str	r1, [sp, #44]	; 0x2c
   163cc:	str	r0, [sp, #40]	; 0x28
   163d0:	mov	r3, sp
   163d4:	mov	r0, #0
   163d8:	mov	r1, lr
   163dc:	mov	r2, ip
   163e0:	bl	15c84 <__assert_fail@plt+0x493c>
   163e4:	sub	sp, fp, #8
   163e8:	pop	{r4, r5, fp, pc}
   163ec:	movw	r3, #45344	; 0xb120
   163f0:	movt	r3, #2
   163f4:	b	15c84 <__assert_fail@plt+0x493c>
   163f8:	movw	r3, #45344	; 0xb120
   163fc:	mov	r2, r1
   16400:	mov	r1, r0
   16404:	mov	r0, #0
   16408:	movt	r3, #2
   1640c:	b	15c84 <__assert_fail@plt+0x493c>
   16410:	movw	r3, #45344	; 0xb120
   16414:	mvn	r2, #0
   16418:	movt	r3, #2
   1641c:	b	15c84 <__assert_fail@plt+0x493c>
   16420:	movw	r3, #45344	; 0xb120
   16424:	mov	r1, r0
   16428:	mov	r0, #0
   1642c:	mvn	r2, #0
   16430:	movt	r3, #2
   16434:	b	15c84 <__assert_fail@plt+0x493c>
   16438:	push	{r4, r5, r6, r7, fp, lr}
   1643c:	add	fp, sp, #16
   16440:	mov	r4, r1
   16444:	mov	r1, #0
   16448:	mov	r6, r2
   1644c:	bl	112d0 <setlocale@plt>
   16450:	cmp	r0, #0
   16454:	beq	16484 <__assert_fail@plt+0x513c>
   16458:	mov	r7, r0
   1645c:	bl	11228 <strlen@plt>
   16460:	cmp	r0, r6
   16464:	bcs	164a0 <__assert_fail@plt+0x5158>
   16468:	add	r2, r0, #1
   1646c:	mov	r0, r4
   16470:	mov	r1, r7
   16474:	bl	110f0 <memcpy@plt>
   16478:	mov	r5, #0
   1647c:	mov	r0, r5
   16480:	pop	{r4, r5, r6, r7, fp, pc}
   16484:	mov	r5, #22
   16488:	cmp	r6, #0
   1648c:	beq	164c8 <__assert_fail@plt+0x5180>
   16490:	mov	r0, #0
   16494:	strb	r0, [r4]
   16498:	mov	r0, r5
   1649c:	pop	{r4, r5, r6, r7, fp, pc}
   164a0:	mov	r5, #34	; 0x22
   164a4:	cmp	r6, #0
   164a8:	beq	164c8 <__assert_fail@plt+0x5180>
   164ac:	sub	r6, r6, #1
   164b0:	mov	r0, r4
   164b4:	mov	r1, r7
   164b8:	mov	r2, r6
   164bc:	bl	110f0 <memcpy@plt>
   164c0:	mov	r0, #0
   164c4:	strb	r0, [r4, r6]
   164c8:	mov	r0, r5
   164cc:	pop	{r4, r5, r6, r7, fp, pc}
   164d0:	mov	r1, #0
   164d4:	b	112d0 <setlocale@plt>
   164d8:	mov	r1, #0
   164dc:	mov	r2, #3
   164e0:	b	18994 <__assert_fail@plt+0x764c>
   164e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164e8:	add	fp, sp, #24
   164ec:	sub	sp, sp, #32
   164f0:	ldr	r6, [fp, #12]
   164f4:	ldr	r7, [fp, #8]
   164f8:	mov	r4, r2
   164fc:	mov	r8, r0
   16500:	cmp	r1, #0
   16504:	beq	1652c <__assert_fail@plt+0x51e4>
   16508:	movw	r2, #40516	; 0x9e44
   1650c:	mov	r5, r1
   16510:	str	r3, [sp, #4]
   16514:	str	r4, [sp]
   16518:	mov	r0, r8
   1651c:	mov	r1, #1
   16520:	movt	r2, #1
   16524:	mov	r3, r5
   16528:	b	16544 <__assert_fail@plt+0x51fc>
   1652c:	movw	r2, #40528	; 0x9e50
   16530:	str	r3, [sp]
   16534:	mov	r0, r8
   16538:	mov	r1, #1
   1653c:	mov	r3, r4
   16540:	movt	r2, #1
   16544:	bl	1127c <__fprintf_chk@plt>
   16548:	movw	r1, #40535	; 0x9e57
   1654c:	mov	r0, #0
   16550:	mov	r2, #5
   16554:	movt	r1, #1
   16558:	bl	1112c <dcgettext@plt>
   1655c:	movw	r2, #41253	; 0xa125
   16560:	mov	r3, r0
   16564:	movw	r0, #2022	; 0x7e6
   16568:	mov	r1, #1
   1656c:	movt	r2, #1
   16570:	str	r0, [sp]
   16574:	mov	r0, r8
   16578:	bl	1127c <__fprintf_chk@plt>
   1657c:	movw	r4, #39813	; 0x9b85
   16580:	mov	r1, r8
   16584:	movt	r4, #1
   16588:	mov	r0, r4
   1658c:	bl	1109c <fputs_unlocked@plt>
   16590:	movw	r1, #40539	; 0x9e5b
   16594:	mov	r0, #0
   16598:	mov	r2, #5
   1659c:	movt	r1, #1
   165a0:	bl	1112c <dcgettext@plt>
   165a4:	movw	r3, #40710	; 0x9f06
   165a8:	mov	r2, r0
   165ac:	mov	r0, r8
   165b0:	mov	r1, #1
   165b4:	movt	r3, #1
   165b8:	bl	1127c <__fprintf_chk@plt>
   165bc:	mov	r0, r4
   165c0:	mov	r1, r8
   165c4:	bl	1109c <fputs_unlocked@plt>
   165c8:	cmp	r6, #9
   165cc:	bhi	16608 <__assert_fail@plt+0x52c0>
   165d0:	add	r0, pc, #0
   165d4:	ldr	pc, [r0, r6, lsl #2]
   165d8:	andeq	r6, r1, r0, lsl #12
   165dc:	andeq	r6, r1, r4, lsl r6
   165e0:	andeq	r6, r1, r4, asr #12
   165e4:	andeq	r6, r1, ip, ror #12
   165e8:	muleq	r1, r4, r6
   165ec:			; <UNDEFINED> instruction: 0x000166bc
   165f0:	andeq	r6, r1, r4, ror #13
   165f4:	andeq	r6, r1, ip, lsl r7
   165f8:	andeq	r6, r1, r4, asr #15
   165fc:	andeq	r6, r1, ip, ror #14
   16600:	sub	sp, fp, #24
   16604:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16608:	movw	r1, #41063	; 0xa067
   1660c:	movt	r1, #1
   16610:	b	16774 <__assert_fail@plt+0x542c>
   16614:	movw	r1, #40744	; 0x9f28
   16618:	mov	r0, #0
   1661c:	mov	r2, #5
   16620:	movt	r1, #1
   16624:	bl	1112c <dcgettext@plt>
   16628:	ldr	r3, [r7]
   1662c:	mov	r2, r0
   16630:	mov	r0, r8
   16634:	mov	r1, #1
   16638:	sub	sp, fp, #24
   1663c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16640:	b	1127c <__fprintf_chk@plt>
   16644:	movw	r1, #40760	; 0x9f38
   16648:	mov	r0, #0
   1664c:	mov	r2, #5
   16650:	movt	r1, #1
   16654:	bl	1112c <dcgettext@plt>
   16658:	mov	r2, r0
   1665c:	ldr	r3, [r7]
   16660:	ldr	r0, [r7, #4]
   16664:	str	r0, [sp]
   16668:	b	16758 <__assert_fail@plt+0x5410>
   1666c:	movw	r1, #40783	; 0x9f4f
   16670:	mov	r0, #0
   16674:	mov	r2, #5
   16678:	movt	r1, #1
   1667c:	bl	1112c <dcgettext@plt>
   16680:	mov	r2, r0
   16684:	ldr	r3, [r7]
   16688:	ldmib	r7, {r0, r1}
   1668c:	stm	sp, {r0, r1}
   16690:	b	16758 <__assert_fail@plt+0x5410>
   16694:	movw	r1, #40811	; 0x9f6b
   16698:	mov	r0, #0
   1669c:	mov	r2, #5
   166a0:	movt	r1, #1
   166a4:	bl	1112c <dcgettext@plt>
   166a8:	ldr	r3, [r7]
   166ac:	mov	r2, r0
   166b0:	ldmib	r7, {r0, r1, r7}
   166b4:	stm	sp, {r0, r1, r7}
   166b8:	b	16758 <__assert_fail@plt+0x5410>
   166bc:	movw	r1, #40843	; 0x9f8b
   166c0:	mov	r0, #0
   166c4:	mov	r2, #5
   166c8:	movt	r1, #1
   166cc:	bl	1112c <dcgettext@plt>
   166d0:	ldr	r3, [r7]
   166d4:	mov	r2, r0
   166d8:	ldmib	r7, {r0, r1, r6, r7}
   166dc:	stm	sp, {r0, r1, r6, r7}
   166e0:	b	16758 <__assert_fail@plt+0x5410>
   166e4:	movw	r1, #40879	; 0x9faf
   166e8:	mov	r0, #0
   166ec:	mov	r2, #5
   166f0:	movt	r1, #1
   166f4:	bl	1112c <dcgettext@plt>
   166f8:	mov	r2, r0
   166fc:	ldr	r3, [r7]
   16700:	ldmib	r7, {r0, r1, r6}
   16704:	ldr	r5, [r7, #16]
   16708:	ldr	r7, [r7, #20]
   1670c:	stm	sp, {r0, r1, r6}
   16710:	str	r5, [sp, #12]
   16714:	str	r7, [sp, #16]
   16718:	b	16758 <__assert_fail@plt+0x5410>
   1671c:	movw	r1, #40919	; 0x9fd7
   16720:	mov	r0, #0
   16724:	mov	r2, #5
   16728:	movt	r1, #1
   1672c:	bl	1112c <dcgettext@plt>
   16730:	mov	r2, r0
   16734:	ldr	r3, [r7]
   16738:	ldmib	r7, {r0, r1, r6}
   1673c:	ldr	r5, [r7, #16]
   16740:	ldr	r4, [r7, #20]
   16744:	ldr	r7, [r7, #24]
   16748:	stm	sp, {r0, r1, r6}
   1674c:	str	r5, [sp, #12]
   16750:	str	r4, [sp, #16]
   16754:	str	r7, [sp, #20]
   16758:	mov	r0, r8
   1675c:	mov	r1, #1
   16760:	bl	1127c <__fprintf_chk@plt>
   16764:	sub	sp, fp, #24
   16768:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1676c:	movw	r1, #41011	; 0xa033
   16770:	movt	r1, #1
   16774:	mov	r0, #0
   16778:	mov	r2, #5
   1677c:	bl	1112c <dcgettext@plt>
   16780:	mov	ip, r0
   16784:	ldr	r3, [r7]
   16788:	ldr	r0, [r7, #4]
   1678c:	ldr	r1, [r7, #8]
   16790:	ldr	r6, [r7, #12]
   16794:	ldr	r5, [r7, #16]
   16798:	ldr	r4, [r7, #20]
   1679c:	ldr	r2, [r7, #24]
   167a0:	ldr	lr, [r7, #28]
   167a4:	ldr	r7, [r7, #32]
   167a8:	stm	sp, {r0, r1, r6}
   167ac:	str	r5, [sp, #12]
   167b0:	str	r4, [sp, #16]
   167b4:	str	r2, [sp, #20]
   167b8:	str	lr, [sp, #24]
   167bc:	str	r7, [sp, #28]
   167c0:	b	16808 <__assert_fail@plt+0x54c0>
   167c4:	movw	r1, #40963	; 0xa003
   167c8:	mov	r0, #0
   167cc:	mov	r2, #5
   167d0:	movt	r1, #1
   167d4:	bl	1112c <dcgettext@plt>
   167d8:	mov	ip, r0
   167dc:	ldr	r3, [r7]
   167e0:	ldmib	r7, {r0, r1, r6}
   167e4:	ldr	r5, [r7, #16]
   167e8:	ldr	r4, [r7, #20]
   167ec:	ldr	r2, [r7, #24]
   167f0:	ldr	r7, [r7, #28]
   167f4:	stm	sp, {r0, r1, r6}
   167f8:	str	r5, [sp, #12]
   167fc:	str	r4, [sp, #16]
   16800:	str	r2, [sp, #20]
   16804:	str	r7, [sp, #24]
   16808:	mov	r0, r8
   1680c:	mov	r1, #1
   16810:	mov	r2, ip
   16814:	bl	1127c <__fprintf_chk@plt>
   16818:	sub	sp, fp, #24
   1681c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16820:	push	{r4, sl, fp, lr}
   16824:	add	fp, sp, #8
   16828:	sub	sp, sp, #8
   1682c:	ldr	ip, [fp, #8]
   16830:	mov	lr, #0
   16834:	ldr	r4, [ip, lr, lsl #2]
   16838:	add	lr, lr, #1
   1683c:	cmp	r4, #0
   16840:	bne	16834 <__assert_fail@plt+0x54ec>
   16844:	sub	r4, lr, #1
   16848:	str	ip, [sp]
   1684c:	str	r4, [sp, #4]
   16850:	bl	164e4 <__assert_fail@plt+0x519c>
   16854:	sub	sp, fp, #8
   16858:	pop	{r4, sl, fp, pc}
   1685c:	push	{fp, lr}
   16860:	mov	fp, sp
   16864:	sub	sp, sp, #48	; 0x30
   16868:	ldr	ip, [fp, #8]
   1686c:	ldr	lr, [ip]
   16870:	cmp	lr, #0
   16874:	str	lr, [sp, #8]
   16878:	beq	16914 <__assert_fail@plt+0x55cc>
   1687c:	ldr	lr, [ip, #4]
   16880:	cmp	lr, #0
   16884:	str	lr, [sp, #12]
   16888:	beq	1691c <__assert_fail@plt+0x55d4>
   1688c:	ldr	lr, [ip, #8]
   16890:	cmp	lr, #0
   16894:	str	lr, [sp, #16]
   16898:	beq	16924 <__assert_fail@plt+0x55dc>
   1689c:	ldr	lr, [ip, #12]
   168a0:	cmp	lr, #0
   168a4:	str	lr, [sp, #20]
   168a8:	beq	1692c <__assert_fail@plt+0x55e4>
   168ac:	ldr	lr, [ip, #16]
   168b0:	cmp	lr, #0
   168b4:	str	lr, [sp, #24]
   168b8:	beq	16934 <__assert_fail@plt+0x55ec>
   168bc:	ldr	lr, [ip, #20]
   168c0:	cmp	lr, #0
   168c4:	str	lr, [sp, #28]
   168c8:	beq	1693c <__assert_fail@plt+0x55f4>
   168cc:	ldr	lr, [ip, #24]
   168d0:	cmp	lr, #0
   168d4:	str	lr, [sp, #32]
   168d8:	beq	16944 <__assert_fail@plt+0x55fc>
   168dc:	ldr	lr, [ip, #28]
   168e0:	cmp	lr, #0
   168e4:	str	lr, [sp, #36]	; 0x24
   168e8:	beq	1694c <__assert_fail@plt+0x5604>
   168ec:	ldr	lr, [ip, #32]
   168f0:	cmp	lr, #0
   168f4:	str	lr, [sp, #40]	; 0x28
   168f8:	beq	16954 <__assert_fail@plt+0x560c>
   168fc:	ldr	lr, [ip, #36]	; 0x24
   16900:	mov	ip, #10
   16904:	cmp	lr, #0
   16908:	str	lr, [sp, #44]	; 0x2c
   1690c:	movweq	ip, #9
   16910:	b	16958 <__assert_fail@plt+0x5610>
   16914:	mov	ip, #0
   16918:	b	16958 <__assert_fail@plt+0x5610>
   1691c:	mov	ip, #1
   16920:	b	16958 <__assert_fail@plt+0x5610>
   16924:	mov	ip, #2
   16928:	b	16958 <__assert_fail@plt+0x5610>
   1692c:	mov	ip, #3
   16930:	b	16958 <__assert_fail@plt+0x5610>
   16934:	mov	ip, #4
   16938:	b	16958 <__assert_fail@plt+0x5610>
   1693c:	mov	ip, #5
   16940:	b	16958 <__assert_fail@plt+0x5610>
   16944:	mov	ip, #6
   16948:	b	16958 <__assert_fail@plt+0x5610>
   1694c:	mov	ip, #7
   16950:	b	16958 <__assert_fail@plt+0x5610>
   16954:	mov	ip, #8
   16958:	add	lr, sp, #8
   1695c:	str	ip, [sp, #4]
   16960:	str	lr, [sp]
   16964:	bl	164e4 <__assert_fail@plt+0x519c>
   16968:	mov	sp, fp
   1696c:	pop	{fp, pc}
   16970:	push	{fp, lr}
   16974:	mov	fp, sp
   16978:	sub	sp, sp, #56	; 0x38
   1697c:	add	ip, fp, #8
   16980:	str	ip, [sp, #12]
   16984:	ldr	lr, [fp, #8]
   16988:	cmp	lr, #0
   1698c:	str	lr, [sp, #16]
   16990:	beq	16a2c <__assert_fail@plt+0x56e4>
   16994:	ldr	lr, [ip, #4]
   16998:	cmp	lr, #0
   1699c:	str	lr, [sp, #20]
   169a0:	beq	16a34 <__assert_fail@plt+0x56ec>
   169a4:	ldr	lr, [ip, #8]
   169a8:	cmp	lr, #0
   169ac:	str	lr, [sp, #24]
   169b0:	beq	16a3c <__assert_fail@plt+0x56f4>
   169b4:	ldr	lr, [ip, #12]
   169b8:	cmp	lr, #0
   169bc:	str	lr, [sp, #28]
   169c0:	beq	16a44 <__assert_fail@plt+0x56fc>
   169c4:	ldr	lr, [ip, #16]
   169c8:	cmp	lr, #0
   169cc:	str	lr, [sp, #32]
   169d0:	beq	16a4c <__assert_fail@plt+0x5704>
   169d4:	ldr	lr, [ip, #20]
   169d8:	cmp	lr, #0
   169dc:	str	lr, [sp, #36]	; 0x24
   169e0:	beq	16a54 <__assert_fail@plt+0x570c>
   169e4:	ldr	lr, [ip, #24]
   169e8:	cmp	lr, #0
   169ec:	str	lr, [sp, #40]	; 0x28
   169f0:	beq	16a5c <__assert_fail@plt+0x5714>
   169f4:	ldr	lr, [ip, #28]
   169f8:	cmp	lr, #0
   169fc:	str	lr, [sp, #44]	; 0x2c
   16a00:	beq	16a64 <__assert_fail@plt+0x571c>
   16a04:	ldr	lr, [ip, #32]
   16a08:	cmp	lr, #0
   16a0c:	str	lr, [sp, #48]	; 0x30
   16a10:	beq	16a6c <__assert_fail@plt+0x5724>
   16a14:	ldr	lr, [ip, #36]	; 0x24
   16a18:	mov	ip, #10
   16a1c:	cmp	lr, #0
   16a20:	str	lr, [sp, #52]	; 0x34
   16a24:	movweq	ip, #9
   16a28:	b	16a70 <__assert_fail@plt+0x5728>
   16a2c:	mov	ip, #0
   16a30:	b	16a70 <__assert_fail@plt+0x5728>
   16a34:	mov	ip, #1
   16a38:	b	16a70 <__assert_fail@plt+0x5728>
   16a3c:	mov	ip, #2
   16a40:	b	16a70 <__assert_fail@plt+0x5728>
   16a44:	mov	ip, #3
   16a48:	b	16a70 <__assert_fail@plt+0x5728>
   16a4c:	mov	ip, #4
   16a50:	b	16a70 <__assert_fail@plt+0x5728>
   16a54:	mov	ip, #5
   16a58:	b	16a70 <__assert_fail@plt+0x5728>
   16a5c:	mov	ip, #6
   16a60:	b	16a70 <__assert_fail@plt+0x5728>
   16a64:	mov	ip, #7
   16a68:	b	16a70 <__assert_fail@plt+0x5728>
   16a6c:	mov	ip, #8
   16a70:	add	lr, sp, #16
   16a74:	str	ip, [sp, #4]
   16a78:	str	lr, [sp]
   16a7c:	bl	164e4 <__assert_fail@plt+0x519c>
   16a80:	mov	sp, fp
   16a84:	pop	{fp, pc}
   16a88:	push	{fp, lr}
   16a8c:	mov	fp, sp
   16a90:	movw	r0, #45436	; 0xb17c
   16a94:	movt	r0, #2
   16a98:	ldr	r1, [r0]
   16a9c:	movw	r0, #39813	; 0x9b85
   16aa0:	movt	r0, #1
   16aa4:	bl	1109c <fputs_unlocked@plt>
   16aa8:	movw	r1, #41123	; 0xa0a3
   16aac:	mov	r0, #0
   16ab0:	mov	r2, #5
   16ab4:	movt	r1, #1
   16ab8:	bl	1112c <dcgettext@plt>
   16abc:	movw	r2, #41143	; 0xa0b7
   16ac0:	mov	r1, r0
   16ac4:	mov	r0, #1
   16ac8:	movt	r2, #1
   16acc:	bl	11264 <__printf_chk@plt>
   16ad0:	movw	r1, #41165	; 0xa0cd
   16ad4:	mov	r0, #0
   16ad8:	mov	r2, #5
   16adc:	movt	r1, #1
   16ae0:	bl	1112c <dcgettext@plt>
   16ae4:	movw	r2, #39371	; 0x99cb
   16ae8:	movw	r3, #39622	; 0x9ac6
   16aec:	mov	r1, r0
   16af0:	mov	r0, #1
   16af4:	movt	r2, #1
   16af8:	movt	r3, #1
   16afc:	bl	11264 <__printf_chk@plt>
   16b00:	movw	r1, #41185	; 0xa0e1
   16b04:	mov	r0, #0
   16b08:	mov	r2, #5
   16b0c:	movt	r1, #1
   16b10:	bl	1112c <dcgettext@plt>
   16b14:	movw	r2, #41224	; 0xa108
   16b18:	mov	r1, r0
   16b1c:	mov	r0, #1
   16b20:	movt	r2, #1
   16b24:	pop	{fp, lr}
   16b28:	b	11264 <__printf_chk@plt>
   16b2c:	push	{r4, r5, r6, sl, fp, lr}
   16b30:	add	fp, sp, #16
   16b34:	mov	r4, r2
   16b38:	mov	r5, r1
   16b3c:	mov	r6, r0
   16b40:	bl	18dfc <__assert_fail@plt+0x7ab4>
   16b44:	cmp	r0, #0
   16b48:	popne	{r4, r5, r6, sl, fp, pc}
   16b4c:	cmp	r6, #0
   16b50:	beq	16b64 <__assert_fail@plt+0x581c>
   16b54:	cmp	r5, #0
   16b58:	cmpne	r4, #0
   16b5c:	bne	16b64 <__assert_fail@plt+0x581c>
   16b60:	pop	{r4, r5, r6, sl, fp, pc}
   16b64:	bl	170e0 <__assert_fail@plt+0x5d98>
   16b68:	push	{r4, r5, r6, sl, fp, lr}
   16b6c:	add	fp, sp, #16
   16b70:	mov	r4, r2
   16b74:	mov	r5, r1
   16b78:	mov	r6, r0
   16b7c:	bl	18dfc <__assert_fail@plt+0x7ab4>
   16b80:	cmp	r0, #0
   16b84:	popne	{r4, r5, r6, sl, fp, pc}
   16b88:	cmp	r6, #0
   16b8c:	beq	16ba0 <__assert_fail@plt+0x5858>
   16b90:	cmp	r5, #0
   16b94:	cmpne	r4, #0
   16b98:	bne	16ba0 <__assert_fail@plt+0x5858>
   16b9c:	pop	{r4, r5, r6, sl, fp, pc}
   16ba0:	bl	170e0 <__assert_fail@plt+0x5d98>
   16ba4:	push	{fp, lr}
   16ba8:	mov	fp, sp
   16bac:	bl	1888c <__assert_fail@plt+0x7544>
   16bb0:	cmp	r0, #0
   16bb4:	popne	{fp, pc}
   16bb8:	bl	170e0 <__assert_fail@plt+0x5d98>
   16bbc:	push	{fp, lr}
   16bc0:	mov	fp, sp
   16bc4:	bl	1888c <__assert_fail@plt+0x7544>
   16bc8:	cmp	r0, #0
   16bcc:	popne	{fp, pc}
   16bd0:	bl	170e0 <__assert_fail@plt+0x5d98>
   16bd4:	push	{fp, lr}
   16bd8:	mov	fp, sp
   16bdc:	bl	1888c <__assert_fail@plt+0x7544>
   16be0:	cmp	r0, #0
   16be4:	popne	{fp, pc}
   16be8:	bl	170e0 <__assert_fail@plt+0x5d98>
   16bec:	push	{r4, r5, fp, lr}
   16bf0:	add	fp, sp, #8
   16bf4:	mov	r4, r1
   16bf8:	mov	r5, r0
   16bfc:	bl	188bc <__assert_fail@plt+0x7574>
   16c00:	cmp	r0, #0
   16c04:	popne	{r4, r5, fp, pc}
   16c08:	cmp	r5, #0
   16c0c:	beq	16c1c <__assert_fail@plt+0x58d4>
   16c10:	cmp	r4, #0
   16c14:	bne	16c1c <__assert_fail@plt+0x58d4>
   16c18:	pop	{r4, r5, fp, pc}
   16c1c:	bl	170e0 <__assert_fail@plt+0x5d98>
   16c20:	push	{fp, lr}
   16c24:	mov	fp, sp
   16c28:	cmp	r1, #0
   16c2c:	orreq	r1, r1, #1
   16c30:	bl	188bc <__assert_fail@plt+0x7574>
   16c34:	cmp	r0, #0
   16c38:	popne	{fp, pc}
   16c3c:	bl	170e0 <__assert_fail@plt+0x5d98>
   16c40:	push	{fp, lr}
   16c44:	mov	fp, sp
   16c48:	clz	r3, r2
   16c4c:	lsr	ip, r3, #5
   16c50:	clz	r3, r1
   16c54:	lsr	r3, r3, #5
   16c58:	orrs	r3, r3, ip
   16c5c:	movwne	r1, #1
   16c60:	movwne	r2, #1
   16c64:	bl	18dfc <__assert_fail@plt+0x7ab4>
   16c68:	cmp	r0, #0
   16c6c:	popne	{fp, pc}
   16c70:	bl	170e0 <__assert_fail@plt+0x5d98>
   16c74:	push	{fp, lr}
   16c78:	mov	fp, sp
   16c7c:	mov	r2, r1
   16c80:	mov	r1, r0
   16c84:	mov	r0, #0
   16c88:	bl	18dfc <__assert_fail@plt+0x7ab4>
   16c8c:	cmp	r0, #0
   16c90:	popne	{fp, pc}
   16c94:	bl	170e0 <__assert_fail@plt+0x5d98>
   16c98:	push	{fp, lr}
   16c9c:	mov	fp, sp
   16ca0:	mov	r2, r1
   16ca4:	mov	r1, r0
   16ca8:	clz	r0, r2
   16cac:	clz	r3, r1
   16cb0:	lsr	r0, r0, #5
   16cb4:	lsr	r3, r3, #5
   16cb8:	orrs	r0, r3, r0
   16cbc:	mov	r0, #0
   16cc0:	movwne	r1, #1
   16cc4:	movwne	r2, #1
   16cc8:	bl	18dfc <__assert_fail@plt+0x7ab4>
   16ccc:	cmp	r0, #0
   16cd0:	popne	{fp, pc}
   16cd4:	bl	170e0 <__assert_fail@plt+0x5d98>
   16cd8:	push	{r4, r5, r6, sl, fp, lr}
   16cdc:	add	fp, sp, #16
   16ce0:	ldr	r5, [r1]
   16ce4:	mov	r4, r1
   16ce8:	mov	r6, r0
   16cec:	cmp	r0, #0
   16cf0:	beq	16d08 <__assert_fail@plt+0x59c0>
   16cf4:	mov	r0, #1
   16cf8:	add	r0, r0, r5, lsr #1
   16cfc:	adds	r5, r5, r0
   16d00:	bcc	16d10 <__assert_fail@plt+0x59c8>
   16d04:	b	16d4c <__assert_fail@plt+0x5a04>
   16d08:	cmp	r5, #0
   16d0c:	movweq	r5, #64	; 0x40
   16d10:	mov	r0, r6
   16d14:	mov	r1, r5
   16d18:	mov	r2, #1
   16d1c:	bl	18dfc <__assert_fail@plt+0x7ab4>
   16d20:	cmp	r5, #0
   16d24:	mov	r1, r5
   16d28:	movwne	r1, #1
   16d2c:	cmp	r0, #0
   16d30:	bne	16d44 <__assert_fail@plt+0x59fc>
   16d34:	clz	r2, r6
   16d38:	lsr	r2, r2, #5
   16d3c:	orrs	r1, r2, r1
   16d40:	bne	16d4c <__assert_fail@plt+0x5a04>
   16d44:	str	r5, [r4]
   16d48:	pop	{r4, r5, r6, sl, fp, pc}
   16d4c:	bl	170e0 <__assert_fail@plt+0x5d98>
   16d50:	push	{r4, r5, r6, r7, fp, lr}
   16d54:	add	fp, sp, #16
   16d58:	ldr	r5, [r1]
   16d5c:	mov	r6, r2
   16d60:	mov	r4, r1
   16d64:	mov	r7, r0
   16d68:	cmp	r0, #0
   16d6c:	beq	16d84 <__assert_fail@plt+0x5a3c>
   16d70:	mov	r0, #1
   16d74:	add	r0, r0, r5, lsr #1
   16d78:	adds	r5, r5, r0
   16d7c:	bcc	16d9c <__assert_fail@plt+0x5a54>
   16d80:	b	16dd0 <__assert_fail@plt+0x5a88>
   16d84:	cmp	r5, #0
   16d88:	bne	16d9c <__assert_fail@plt+0x5a54>
   16d8c:	mov	r0, #64	; 0x40
   16d90:	cmp	r6, #64	; 0x40
   16d94:	udiv	r5, r0, r6
   16d98:	addhi	r5, r5, #1
   16d9c:	mov	r0, r7
   16da0:	mov	r1, r5
   16da4:	mov	r2, r6
   16da8:	bl	18dfc <__assert_fail@plt+0x7ab4>
   16dac:	cmp	r0, #0
   16db0:	bne	16dc8 <__assert_fail@plt+0x5a80>
   16db4:	cmp	r7, #0
   16db8:	beq	16dd0 <__assert_fail@plt+0x5a88>
   16dbc:	cmp	r6, #0
   16dc0:	cmpne	r5, #0
   16dc4:	bne	16dd0 <__assert_fail@plt+0x5a88>
   16dc8:	str	r5, [r4]
   16dcc:	pop	{r4, r5, r6, r7, fp, pc}
   16dd0:	bl	170e0 <__assert_fail@plt+0x5d98>
   16dd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16dd8:	add	fp, sp, #24
   16ddc:	mov	r8, r1
   16de0:	ldr	r1, [r1]
   16de4:	mov	r5, r0
   16de8:	add	r0, r1, r1, asr #1
   16dec:	cmp	r0, r1
   16df0:	mvnvs	r0, #-2147483648	; 0x80000000
   16df4:	cmp	r0, r3
   16df8:	mov	r7, r0
   16dfc:	movgt	r7, r3
   16e00:	cmn	r3, #1
   16e04:	movle	r7, r0
   16e08:	ldr	r0, [fp, #8]
   16e0c:	cmn	r0, #1
   16e10:	ble	16e38 <__assert_fail@plt+0x5af0>
   16e14:	cmp	r0, #0
   16e18:	beq	16e8c <__assert_fail@plt+0x5b44>
   16e1c:	cmn	r7, #1
   16e20:	ble	16e60 <__assert_fail@plt+0x5b18>
   16e24:	mvn	r4, #-2147483648	; 0x80000000
   16e28:	udiv	r6, r4, r0
   16e2c:	cmp	r6, r7
   16e30:	bge	16e8c <__assert_fail@plt+0x5b44>
   16e34:	b	16e9c <__assert_fail@plt+0x5b54>
   16e38:	cmn	r7, #1
   16e3c:	ble	16e7c <__assert_fail@plt+0x5b34>
   16e40:	cmn	r0, #1
   16e44:	beq	16e8c <__assert_fail@plt+0x5b44>
   16e48:	mov	r6, #-2147483648	; 0x80000000
   16e4c:	mvn	r4, #-2147483648	; 0x80000000
   16e50:	sdiv	r6, r6, r0
   16e54:	cmp	r6, r7
   16e58:	bge	16e8c <__assert_fail@plt+0x5b44>
   16e5c:	b	16e9c <__assert_fail@plt+0x5b54>
   16e60:	beq	16e8c <__assert_fail@plt+0x5b44>
   16e64:	mov	r6, #-2147483648	; 0x80000000
   16e68:	mvn	r4, #-2147483648	; 0x80000000
   16e6c:	sdiv	r6, r6, r7
   16e70:	cmp	r6, r0
   16e74:	bge	16e8c <__assert_fail@plt+0x5b44>
   16e78:	b	16e9c <__assert_fail@plt+0x5b54>
   16e7c:	mvn	r4, #-2147483648	; 0x80000000
   16e80:	sdiv	r6, r4, r0
   16e84:	cmp	r7, r6
   16e88:	blt	16e9c <__assert_fail@plt+0x5b54>
   16e8c:	mul	r6, r7, r0
   16e90:	mov	r4, #64	; 0x40
   16e94:	cmp	r6, #63	; 0x3f
   16e98:	bgt	16ea4 <__assert_fail@plt+0x5b5c>
   16e9c:	sdiv	r7, r4, r0
   16ea0:	mul	r6, r7, r0
   16ea4:	cmp	r5, #0
   16ea8:	moveq	r4, #0
   16eac:	streq	r4, [r8]
   16eb0:	sub	r4, r7, r1
   16eb4:	cmp	r4, r2
   16eb8:	bge	16f64 <__assert_fail@plt+0x5c1c>
   16ebc:	add	r7, r1, r2
   16ec0:	mov	r6, #0
   16ec4:	mov	r2, #0
   16ec8:	cmp	r7, r3
   16ecc:	movwgt	r6, #1
   16ed0:	cmn	r3, #1
   16ed4:	movwgt	r2, #1
   16ed8:	cmp	r7, r1
   16edc:	bvs	16f98 <__assert_fail@plt+0x5c50>
   16ee0:	ands	r1, r2, r6
   16ee4:	bne	16f98 <__assert_fail@plt+0x5c50>
   16ee8:	cmn	r0, #1
   16eec:	ble	16f14 <__assert_fail@plt+0x5bcc>
   16ef0:	cmp	r0, #0
   16ef4:	beq	16f60 <__assert_fail@plt+0x5c18>
   16ef8:	cmn	r7, #1
   16efc:	ble	16f38 <__assert_fail@plt+0x5bf0>
   16f00:	mvn	r1, #-2147483648	; 0x80000000
   16f04:	udiv	r1, r1, r0
   16f08:	cmp	r1, r7
   16f0c:	bge	16f60 <__assert_fail@plt+0x5c18>
   16f10:	b	16f98 <__assert_fail@plt+0x5c50>
   16f14:	cmn	r7, #1
   16f18:	ble	16f50 <__assert_fail@plt+0x5c08>
   16f1c:	cmn	r0, #1
   16f20:	beq	16f60 <__assert_fail@plt+0x5c18>
   16f24:	mov	r1, #-2147483648	; 0x80000000
   16f28:	sdiv	r1, r1, r0
   16f2c:	cmp	r1, r7
   16f30:	bge	16f60 <__assert_fail@plt+0x5c18>
   16f34:	b	16f98 <__assert_fail@plt+0x5c50>
   16f38:	beq	16f60 <__assert_fail@plt+0x5c18>
   16f3c:	mov	r1, #-2147483648	; 0x80000000
   16f40:	sdiv	r1, r1, r7
   16f44:	cmp	r1, r0
   16f48:	bge	16f60 <__assert_fail@plt+0x5c18>
   16f4c:	b	16f98 <__assert_fail@plt+0x5c50>
   16f50:	mvn	r1, #-2147483648	; 0x80000000
   16f54:	sdiv	r1, r1, r0
   16f58:	cmp	r7, r1
   16f5c:	blt	16f98 <__assert_fail@plt+0x5c50>
   16f60:	mul	r6, r7, r0
   16f64:	mov	r0, r5
   16f68:	mov	r1, r6
   16f6c:	bl	188bc <__assert_fail@plt+0x7574>
   16f70:	cmp	r6, #0
   16f74:	movwne	r6, #1
   16f78:	cmp	r0, #0
   16f7c:	bne	16f90 <__assert_fail@plt+0x5c48>
   16f80:	clz	r1, r5
   16f84:	lsr	r1, r1, #5
   16f88:	orrs	r1, r1, r6
   16f8c:	bne	16f98 <__assert_fail@plt+0x5c50>
   16f90:	str	r7, [r8]
   16f94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f98:	bl	170e0 <__assert_fail@plt+0x5d98>
   16f9c:	push	{fp, lr}
   16fa0:	mov	fp, sp
   16fa4:	mov	r1, #1
   16fa8:	bl	18838 <__assert_fail@plt+0x74f0>
   16fac:	cmp	r0, #0
   16fb0:	popne	{fp, pc}
   16fb4:	bl	170e0 <__assert_fail@plt+0x5d98>
   16fb8:	push	{fp, lr}
   16fbc:	mov	fp, sp
   16fc0:	bl	18838 <__assert_fail@plt+0x74f0>
   16fc4:	cmp	r0, #0
   16fc8:	popne	{fp, pc}
   16fcc:	bl	170e0 <__assert_fail@plt+0x5d98>
   16fd0:	push	{fp, lr}
   16fd4:	mov	fp, sp
   16fd8:	mov	r1, #1
   16fdc:	bl	18838 <__assert_fail@plt+0x74f0>
   16fe0:	cmp	r0, #0
   16fe4:	popne	{fp, pc}
   16fe8:	bl	170e0 <__assert_fail@plt+0x5d98>
   16fec:	push	{fp, lr}
   16ff0:	mov	fp, sp
   16ff4:	bl	18838 <__assert_fail@plt+0x74f0>
   16ff8:	cmp	r0, #0
   16ffc:	popne	{fp, pc}
   17000:	bl	170e0 <__assert_fail@plt+0x5d98>
   17004:	push	{r4, r5, fp, lr}
   17008:	add	fp, sp, #8
   1700c:	mov	r5, r0
   17010:	mov	r0, r1
   17014:	mov	r4, r1
   17018:	bl	1888c <__assert_fail@plt+0x7544>
   1701c:	cmp	r0, #0
   17020:	beq	17034 <__assert_fail@plt+0x5cec>
   17024:	mov	r1, r5
   17028:	mov	r2, r4
   1702c:	pop	{r4, r5, fp, lr}
   17030:	b	110f0 <memcpy@plt>
   17034:	bl	170e0 <__assert_fail@plt+0x5d98>
   17038:	push	{r4, r5, fp, lr}
   1703c:	add	fp, sp, #8
   17040:	mov	r5, r0
   17044:	mov	r0, r1
   17048:	mov	r4, r1
   1704c:	bl	1888c <__assert_fail@plt+0x7544>
   17050:	cmp	r0, #0
   17054:	beq	17068 <__assert_fail@plt+0x5d20>
   17058:	mov	r1, r5
   1705c:	mov	r2, r4
   17060:	pop	{r4, r5, fp, lr}
   17064:	b	110f0 <memcpy@plt>
   17068:	bl	170e0 <__assert_fail@plt+0x5d98>
   1706c:	push	{r4, r5, fp, lr}
   17070:	add	fp, sp, #8
   17074:	mov	r5, r0
   17078:	add	r0, r1, #1
   1707c:	mov	r4, r1
   17080:	bl	1888c <__assert_fail@plt+0x7544>
   17084:	cmp	r0, #0
   17088:	beq	170a4 <__assert_fail@plt+0x5d5c>
   1708c:	mov	r1, #0
   17090:	mov	r2, r4
   17094:	strb	r1, [r0, r4]
   17098:	mov	r1, r5
   1709c:	pop	{r4, r5, fp, lr}
   170a0:	b	110f0 <memcpy@plt>
   170a4:	bl	170e0 <__assert_fail@plt+0x5d98>
   170a8:	push	{r4, r5, fp, lr}
   170ac:	add	fp, sp, #8
   170b0:	mov	r4, r0
   170b4:	bl	11228 <strlen@plt>
   170b8:	add	r5, r0, #1
   170bc:	mov	r0, r5
   170c0:	bl	1888c <__assert_fail@plt+0x7544>
   170c4:	cmp	r0, #0
   170c8:	beq	170dc <__assert_fail@plt+0x5d94>
   170cc:	mov	r1, r4
   170d0:	mov	r2, r5
   170d4:	pop	{r4, r5, fp, lr}
   170d8:	b	110f0 <memcpy@plt>
   170dc:	bl	170e0 <__assert_fail@plt+0x5d98>
   170e0:	push	{fp, lr}
   170e4:	mov	fp, sp
   170e8:	movw	r0, #45340	; 0xb11c
   170ec:	movw	r1, #41300	; 0xa154
   170f0:	mov	r2, #5
   170f4:	movt	r0, #2
   170f8:	movt	r1, #1
   170fc:	ldr	r4, [r0]
   17100:	mov	r0, #0
   17104:	bl	1112c <dcgettext@plt>
   17108:	movw	r2, #39978	; 0x9c2a
   1710c:	mov	r3, r0
   17110:	mov	r0, r4
   17114:	mov	r1, #0
   17118:	movt	r2, #1
   1711c:	bl	11198 <error@plt>
   17120:	bl	11324 <abort@plt>
   17124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17128:	add	fp, sp, #28
   1712c:	sub	sp, sp, #4
   17130:	mov	r9, r3
   17134:	mov	r6, r2
   17138:	mov	r7, r1
   1713c:	mov	r4, r0
   17140:	bl	18c10 <__assert_fail@plt+0x78c8>
   17144:	mov	r8, r0
   17148:	bl	11240 <__errno_location@plt>
   1714c:	ldr	r5, [r0]
   17150:	cmp	r5, #0
   17154:	beq	17208 <__assert_fail@plt+0x5ec0>
   17158:	movw	r1, #41317	; 0xa165
   1715c:	mov	r0, #0
   17160:	mov	r2, #5
   17164:	movt	r1, #1
   17168:	bl	1112c <dcgettext@plt>
   1716c:	mov	r2, r0
   17170:	mov	r0, #0
   17174:	mov	r1, r5
   17178:	bl	11198 <error@plt>
   1717c:	movw	r1, #41342	; 0xa17e
   17180:	mov	r0, #0
   17184:	mov	r2, #5
   17188:	movt	r1, #1
   1718c:	bl	1112c <dcgettext@plt>
   17190:	mov	r2, r0
   17194:	mov	r0, #0
   17198:	mov	r1, #0
   1719c:	bl	11198 <error@plt>
   171a0:	movw	r0, #45340	; 0xb11c
   171a4:	movw	r1, #41385	; 0xa1a9
   171a8:	mov	r2, #5
   171ac:	movt	r0, #2
   171b0:	movt	r1, #1
   171b4:	ldr	sl, [r0]
   171b8:	mov	r0, #0
   171bc:	bl	1112c <dcgettext@plt>
   171c0:	mov	r5, r0
   171c4:	mov	r0, #0
   171c8:	mov	r1, #8
   171cc:	mov	r2, r4
   171d0:	mov	r3, r7
   171d4:	bl	15ea4 <__assert_fail@plt+0x4b5c>
   171d8:	mov	r4, r0
   171dc:	mov	r0, #1
   171e0:	mov	r1, #8
   171e4:	mov	r2, r6
   171e8:	mov	r3, r9
   171ec:	bl	15ea4 <__assert_fail@plt+0x4b5c>
   171f0:	str	r0, [sp]
   171f4:	mov	r0, sl
   171f8:	mov	r1, #0
   171fc:	mov	r2, r5
   17200:	mov	r3, r4
   17204:	bl	11198 <error@plt>
   17208:	mov	r0, r8
   1720c:	sub	sp, fp, #28
   17210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17218:	add	fp, sp, #28
   1721c:	sub	sp, sp, #4
   17220:	mov	r6, r3
   17224:	mov	r9, r2
   17228:	mov	r4, r1
   1722c:	mov	r7, r0
   17230:	bl	18d2c <__assert_fail@plt+0x79e4>
   17234:	mov	r8, r0
   17238:	bl	11240 <__errno_location@plt>
   1723c:	ldr	r5, [r0]
   17240:	cmp	r5, #0
   17244:	beq	172f8 <__assert_fail@plt+0x5fb0>
   17248:	movw	r1, #41317	; 0xa165
   1724c:	mov	r0, #0
   17250:	mov	r2, #5
   17254:	movt	r1, #1
   17258:	bl	1112c <dcgettext@plt>
   1725c:	mov	r2, r0
   17260:	mov	r0, #0
   17264:	mov	r1, r5
   17268:	bl	11198 <error@plt>
   1726c:	movw	r1, #41342	; 0xa17e
   17270:	mov	r0, #0
   17274:	mov	r2, #5
   17278:	movt	r1, #1
   1727c:	bl	1112c <dcgettext@plt>
   17280:	mov	r2, r0
   17284:	mov	r0, #0
   17288:	mov	r1, #0
   1728c:	bl	11198 <error@plt>
   17290:	movw	r0, #45340	; 0xb11c
   17294:	movw	r1, #41385	; 0xa1a9
   17298:	mov	r2, #5
   1729c:	movt	r0, #2
   172a0:	movt	r1, #1
   172a4:	ldr	sl, [r0]
   172a8:	mov	r0, #0
   172ac:	bl	1112c <dcgettext@plt>
   172b0:	mov	r5, r0
   172b4:	sub	r3, r4, #1
   172b8:	mov	r0, #0
   172bc:	mov	r1, #8
   172c0:	mov	r2, r7
   172c4:	bl	15ea4 <__assert_fail@plt+0x4b5c>
   172c8:	mov	r4, r0
   172cc:	sub	r3, r6, #1
   172d0:	mov	r0, #1
   172d4:	mov	r1, #8
   172d8:	mov	r2, r9
   172dc:	bl	15ea4 <__assert_fail@plt+0x4b5c>
   172e0:	str	r0, [sp]
   172e4:	mov	r0, sl
   172e8:	mov	r1, #0
   172ec:	mov	r2, r5
   172f0:	mov	r3, r4
   172f4:	bl	11198 <error@plt>
   172f8:	mov	r0, r8
   172fc:	sub	sp, fp, #28
   17300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17308:	add	fp, sp, #28
   1730c:	sub	sp, sp, #20
   17310:	cmp	r2, #37	; 0x25
   17314:	bcs	17b64 <__assert_fail@plt+0x681c>
   17318:	ldr	r9, [fp, #8]
   1731c:	mov	r5, r2
   17320:	mov	r4, r1
   17324:	mov	r7, r0
   17328:	str	r3, [sp, #12]
   1732c:	bl	11240 <__errno_location@plt>
   17330:	mov	r8, r0
   17334:	mov	r0, #0
   17338:	str	r0, [r8]
   1733c:	bl	111f8 <__ctype_b_loc@plt>
   17340:	ldr	r1, [r0]
   17344:	mov	r2, r7
   17348:	ldrb	r0, [r2], #1
   1734c:	add	r3, r1, r0, lsl #1
   17350:	ldrb	r3, [r3, #1]
   17354:	tst	r3, #32
   17358:	bne	17348 <__assert_fail@plt+0x6000>
   1735c:	cmp	r4, #0
   17360:	add	r6, sp, #16
   17364:	mov	sl, #4
   17368:	movne	r6, r4
   1736c:	cmp	r0, #45	; 0x2d
   17370:	bne	17380 <__assert_fail@plt+0x6038>
   17374:	mov	r0, sl
   17378:	sub	sp, fp, #28
   1737c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17380:	mov	r0, r7
   17384:	mov	r1, r6
   17388:	mov	r2, r5
   1738c:	bl	1121c <strtoul@plt>
   17390:	ldr	r5, [r6]
   17394:	cmp	r5, r7
   17398:	beq	173d0 <__assert_fail@plt+0x6088>
   1739c:	mov	r4, r0
   173a0:	ldr	r0, [r8]
   173a4:	cmp	r0, #0
   173a8:	beq	17534 <__assert_fail@plt+0x61ec>
   173ac:	cmp	r0, #34	; 0x22
   173b0:	bne	17374 <__assert_fail@plt+0x602c>
   173b4:	mov	sl, #1
   173b8:	cmp	r9, #0
   173bc:	beq	17b50 <__assert_fail@plt+0x6808>
   173c0:	ldrb	r7, [r5]
   173c4:	cmp	r7, #0
   173c8:	bne	17408 <__assert_fail@plt+0x60c0>
   173cc:	b	17b50 <__assert_fail@plt+0x6808>
   173d0:	cmp	r9, #0
   173d4:	beq	17374 <__assert_fail@plt+0x602c>
   173d8:	ldrb	r1, [r7]
   173dc:	cmp	r1, #0
   173e0:	beq	17374 <__assert_fail@plt+0x602c>
   173e4:	mov	r0, r9
   173e8:	bl	11234 <strchr@plt>
   173ec:	cmp	r0, #0
   173f0:	beq	17374 <__assert_fail@plt+0x602c>
   173f4:	mov	r4, #1
   173f8:	mov	sl, #0
   173fc:	ldrb	r7, [r5]
   17400:	cmp	r7, #0
   17404:	beq	17b50 <__assert_fail@plt+0x6808>
   17408:	mov	r0, r9
   1740c:	mov	r1, r7
   17410:	bl	11234 <strchr@plt>
   17414:	cmp	r0, #0
   17418:	beq	176d0 <__assert_fail@plt+0x6388>
   1741c:	sub	r0, r7, #69	; 0x45
   17420:	mov	lr, #1
   17424:	mov	r8, #1024	; 0x400
   17428:	cmp	r0, #47	; 0x2f
   1742c:	bhi	17584 <__assert_fail@plt+0x623c>
   17430:	add	r1, pc, #0
   17434:	ldr	pc, [r1, r0, lsl #2]
   17438:	strdeq	r7, [r1], -r8
   1743c:	andeq	r7, r1, r4, lsl #11
   17440:	strdeq	r7, [r1], -r8
   17444:	andeq	r7, r1, r4, lsl #11
   17448:	andeq	r7, r1, r4, lsl #11
   1744c:	andeq	r7, r1, r4, lsl #11
   17450:	strdeq	r7, [r1], -r8
   17454:	andeq	r7, r1, r4, lsl #11
   17458:	strdeq	r7, [r1], -r8
   1745c:	andeq	r7, r1, r4, lsl #11
   17460:	andeq	r7, r1, r4, lsl #11
   17464:	strdeq	r7, [r1], -r8
   17468:	andeq	r7, r1, r4, lsl #11
   1746c:	andeq	r7, r1, r4, lsl #11
   17470:	andeq	r7, r1, r4, lsl #11
   17474:	strdeq	r7, [r1], -r8
   17478:	andeq	r7, r1, r4, lsl #11
   1747c:	andeq	r7, r1, r4, lsl #11
   17480:	andeq	r7, r1, r4, lsl #11
   17484:	andeq	r7, r1, r4, lsl #11
   17488:	strdeq	r7, [r1], -r8
   1748c:	strdeq	r7, [r1], -r8
   17490:	andeq	r7, r1, r4, lsl #11
   17494:	andeq	r7, r1, r4, lsl #11
   17498:	andeq	r7, r1, r4, lsl #11
   1749c:	andeq	r7, r1, r4, lsl #11
   174a0:	andeq	r7, r1, r4, lsl #11
   174a4:	andeq	r7, r1, r4, lsl #11
   174a8:	andeq	r7, r1, r4, lsl #11
   174ac:	andeq	r7, r1, r4, lsl #11
   174b0:	andeq	r7, r1, r4, lsl #11
   174b4:	andeq	r7, r1, r4, lsl #11
   174b8:	andeq	r7, r1, r4, lsl #11
   174bc:	andeq	r7, r1, r4, lsl #11
   174c0:	strdeq	r7, [r1], -r8
   174c4:	andeq	r7, r1, r4, lsl #11
   174c8:	andeq	r7, r1, r4, lsl #11
   174cc:	andeq	r7, r1, r4, lsl #11
   174d0:	strdeq	r7, [r1], -r8
   174d4:	andeq	r7, r1, r4, lsl #11
   174d8:	strdeq	r7, [r1], -r8
   174dc:	andeq	r7, r1, r4, lsl #11
   174e0:	andeq	r7, r1, r4, lsl #11
   174e4:	andeq	r7, r1, r4, lsl #11
   174e8:	andeq	r7, r1, r4, lsl #11
   174ec:	andeq	r7, r1, r4, lsl #11
   174f0:	andeq	r7, r1, r4, lsl #11
   174f4:	strdeq	r7, [r1], -r8
   174f8:	mov	r0, r9
   174fc:	mov	r1, #48	; 0x30
   17500:	bl	11234 <strchr@plt>
   17504:	cmp	r0, #0
   17508:	beq	17544 <__assert_fail@plt+0x61fc>
   1750c:	ldrb	r0, [r5, #1]
   17510:	cmp	r0, #66	; 0x42
   17514:	cmpne	r0, #68	; 0x44
   17518:	bne	17558 <__assert_fail@plt+0x6210>
   1751c:	mov	lr, #2
   17520:	mov	r8, #1000	; 0x3e8
   17524:	sub	r1, r7, #66	; 0x42
   17528:	cmp	r1, #53	; 0x35
   1752c:	bls	17590 <__assert_fail@plt+0x6248>
   17530:	b	176d0 <__assert_fail@plt+0x6388>
   17534:	mov	sl, r0
   17538:	cmp	r9, #0
   1753c:	bne	173c0 <__assert_fail@plt+0x6078>
   17540:	b	17b50 <__assert_fail@plt+0x6808>
   17544:	mov	lr, #1
   17548:	sub	r1, r7, #66	; 0x42
   1754c:	cmp	r1, #53	; 0x35
   17550:	bls	17590 <__assert_fail@plt+0x6248>
   17554:	b	176d0 <__assert_fail@plt+0x6388>
   17558:	cmp	r0, #105	; 0x69
   1755c:	bne	17580 <__assert_fail@plt+0x6238>
   17560:	ldrb	r0, [r5, #2]
   17564:	mov	lr, #1
   17568:	cmp	r0, #66	; 0x42
   1756c:	movweq	lr, #3
   17570:	sub	r1, r7, #66	; 0x42
   17574:	cmp	r1, #53	; 0x35
   17578:	bls	17590 <__assert_fail@plt+0x6248>
   1757c:	b	176d0 <__assert_fail@plt+0x6388>
   17580:	mov	lr, #1
   17584:	sub	r1, r7, #66	; 0x42
   17588:	cmp	r1, #53	; 0x35
   1758c:	bhi	176d0 <__assert_fail@plt+0x6388>
   17590:	add	r2, pc, #4
   17594:	mov	r0, #0
   17598:	ldr	pc, [r2, r1, lsl #2]
   1759c:	muleq	r1, r8, r8
   175a0:	ldrdeq	r7, [r1], -r0
   175a4:	ldrdeq	r7, [r1], -r0
   175a8:			; <UNDEFINED> instruction: 0x000178b4
   175ac:	ldrdeq	r7, [r1], -r0
   175b0:	andeq	r7, r1, r4, ror r6
   175b4:	ldrdeq	r7, [r1], -r0
   175b8:	ldrdeq	r7, [r1], -r0
   175bc:	ldrdeq	r7, [r1], -r0
   175c0:	andeq	r7, r1, r8, ror #13
   175c4:	ldrdeq	r7, [r1], -r0
   175c8:	andeq	r7, r1, r8, lsl #14
   175cc:	ldrdeq	r7, [r1], -r0
   175d0:	ldrdeq	r7, [r1], -r0
   175d4:	andeq	r7, r1, ip, ror #18
   175d8:	ldrdeq	r7, [r1], -r0
   175dc:	ldrdeq	r7, [r1], -r0
   175e0:	ldrdeq	r7, [r1], -r0
   175e4:	andeq	r7, r1, r8, asr #14
   175e8:	ldrdeq	r7, [r1], -r0
   175ec:	ldrdeq	r7, [r1], -r0
   175f0:	ldrdeq	r7, [r1], -r0
   175f4:	ldrdeq	r7, [r1], -r0
   175f8:	andeq	r7, r1, r8, lsl #20
   175fc:	andeq	r7, r1, r0, asr #15
   17600:	ldrdeq	r7, [r1], -r0
   17604:	ldrdeq	r7, [r1], -r0
   17608:	ldrdeq	r7, [r1], -r0
   1760c:	ldrdeq	r7, [r1], -r0
   17610:	ldrdeq	r7, [r1], -r0
   17614:	ldrdeq	r7, [r1], -r0
   17618:	ldrdeq	r7, [r1], -r0
   1761c:	andeq	r7, r1, r0, lsl #22
   17620:	andeq	r7, r1, r8, lsr fp
   17624:	ldrdeq	r7, [r1], -r0
   17628:	ldrdeq	r7, [r1], -r0
   1762c:	ldrdeq	r7, [r1], -r0
   17630:	andeq	r7, r1, r4, ror r6
   17634:	ldrdeq	r7, [r1], -r0
   17638:	ldrdeq	r7, [r1], -r0
   1763c:	ldrdeq	r7, [r1], -r0
   17640:	andeq	r7, r1, r8, ror #13
   17644:	ldrdeq	r7, [r1], -r0
   17648:	andeq	r7, r1, r8, lsl #14
   1764c:	ldrdeq	r7, [r1], -r0
   17650:	ldrdeq	r7, [r1], -r0
   17654:	ldrdeq	r7, [r1], -r0
   17658:	ldrdeq	r7, [r1], -r0
   1765c:	ldrdeq	r7, [r1], -r0
   17660:	ldrdeq	r7, [r1], -r0
   17664:	andeq	r7, r1, r8, asr #14
   17668:	ldrdeq	r7, [r1], -r0
   1766c:	ldrdeq	r7, [r1], -r0
   17670:	andeq	r7, r1, r4, lsr #22
   17674:	mvn	r0, #0
   17678:	mul	r1, r4, r8
   1767c:	mov	r7, #0
   17680:	udiv	r0, r0, r8
   17684:	cmp	r0, r4
   17688:	mvncc	r1, #0
   1768c:	cmp	r0, r1
   17690:	mul	r2, r1, r8
   17694:	mvncc	r2, #0
   17698:	cmp	r0, r2
   1769c:	mul	r3, r2, r8
   176a0:	mov	r2, #0
   176a4:	mvncc	r3, #0
   176a8:	movwcc	r7, #1
   176ac:	cmp	r0, r1
   176b0:	mov	r1, #0
   176b4:	movwcc	r1, #1
   176b8:	cmp	r0, r4
   176bc:	mov	r4, r3
   176c0:	movwcc	r2, #1
   176c4:	orr	r0, r2, r1
   176c8:	orr	r0, r0, r7
   176cc:	b	17b38 <__assert_fail@plt+0x67f0>
   176d0:	ldr	r0, [sp, #12]
   176d4:	orr	sl, sl, #2
   176d8:	str	r4, [r0]
   176dc:	mov	r0, sl
   176e0:	sub	sp, fp, #28
   176e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e8:	mvn	r0, #0
   176ec:	mul	r1, r4, r8
   176f0:	udiv	r0, r0, r8
   176f4:	cmp	r0, r4
   176f8:	mov	r0, #0
   176fc:	mvncc	r1, #0
   17700:	movwcc	r0, #1
   17704:	b	17b34 <__assert_fail@plt+0x67ec>
   17708:	mvn	r0, #0
   1770c:	mul	r1, r4, r8
   17710:	mov	r3, #0
   17714:	udiv	r0, r0, r8
   17718:	cmp	r0, r4
   1771c:	mvncc	r1, #0
   17720:	cmp	r0, r1
   17724:	mul	r2, r1, r8
   17728:	mov	r1, #0
   1772c:	mvncc	r2, #0
   17730:	movwcc	r3, #1
   17734:	cmp	r0, r4
   17738:	movwcc	r1, #1
   1773c:	mov	r4, r2
   17740:	orr	r0, r1, r3
   17744:	b	17b38 <__assert_fail@plt+0x67f0>
   17748:	mvn	r0, #0
   1774c:	mul	r1, r4, r8
   17750:	mov	r7, #0
   17754:	udiv	r0, r0, r8
   17758:	cmp	r0, r4
   1775c:	mvncc	r1, #0
   17760:	cmp	r0, r1
   17764:	mul	r2, r1, r8
   17768:	mvncc	r2, #0
   1776c:	cmp	r0, r2
   17770:	mul	r3, r2, r8
   17774:	mvncc	r3, #0
   17778:	cmp	r0, r3
   1777c:	mul	ip, r3, r8
   17780:	mov	r3, #0
   17784:	mvncc	ip, #0
   17788:	movwcc	r7, #1
   1778c:	cmp	r0, r2
   17790:	mov	r2, #0
   17794:	movwcc	r2, #1
   17798:	cmp	r0, r1
   1779c:	mov	r1, #0
   177a0:	movwcc	r1, #1
   177a4:	cmp	r0, r4
   177a8:	mov	r4, ip
   177ac:	movwcc	r3, #1
   177b0:	orr	r0, r3, r1
   177b4:	orr	r0, r0, r2
   177b8:	orr	r0, r0, r7
   177bc:	b	17b38 <__assert_fail@plt+0x67f0>
   177c0:	mvn	r0, #0
   177c4:	str	lr, [sp, #8]
   177c8:	mul	lr, r4, r8
   177cc:	udiv	r0, r0, r8
   177d0:	cmp	r0, r4
   177d4:	mvncc	lr, #0
   177d8:	cmp	r0, lr
   177dc:	mul	r9, lr, r8
   177e0:	mvncc	r9, #0
   177e4:	cmp	r0, r9
   177e8:	mul	r7, r9, r8
   177ec:	mvncc	r7, #0
   177f0:	cmp	r0, r7
   177f4:	mul	r3, r7, r8
   177f8:	mvncc	r3, #0
   177fc:	cmp	r0, r3
   17800:	mul	r1, r3, r8
   17804:	mvncc	r1, #0
   17808:	cmp	r0, r1
   1780c:	mul	r2, r1, r8
   17810:	mvncc	r2, #0
   17814:	cmp	r0, r2
   17818:	mul	ip, r2, r8
   1781c:	mov	r8, #0
   17820:	mov	r2, #0
   17824:	mvncc	ip, #0
   17828:	movwcc	r8, #1
   1782c:	cmp	r0, r1
   17830:	mov	r1, #0
   17834:	movwcc	r1, #1
   17838:	cmp	r0, r3
   1783c:	mov	r3, #0
   17840:	movwcc	r3, #1
   17844:	cmp	r0, r7
   17848:	mov	r7, #0
   1784c:	movwcc	r7, #1
   17850:	cmp	r0, r9
   17854:	mov	r9, #0
   17858:	movwcc	r9, #1
   1785c:	cmp	r0, lr
   17860:	mov	lr, #0
   17864:	movwcc	lr, #1
   17868:	cmp	r0, r4
   1786c:	mov	r4, ip
   17870:	movwcc	r2, #1
   17874:	orr	r0, r2, lr
   17878:	ldr	lr, [sp, #8]
   1787c:	orr	r0, r0, r9
   17880:	orr	r0, r0, r7
   17884:	orr	r0, r0, r3
   17888:	orr	r0, r0, r1
   1788c:	orr	r0, r0, r8
   17890:	and	r0, r0, #1
   17894:	b	17b38 <__assert_fail@plt+0x67f0>
   17898:	mov	r1, #0
   1789c:	lsr	r0, r4, #22
   178a0:	cmp	r1, r4, lsr #22
   178a4:	lsl	r4, r4, #10
   178a8:	movwne	r0, #1
   178ac:	mvnne	r4, #0
   178b0:	b	17b38 <__assert_fail@plt+0x67f0>
   178b4:	mvn	r0, #0
   178b8:	mul	ip, r4, r8
   178bc:	str	lr, [sp, #8]
   178c0:	mov	r9, #0
   178c4:	udiv	r0, r0, r8
   178c8:	cmp	r0, r4
   178cc:	mvncc	ip, #0
   178d0:	cmp	r0, ip
   178d4:	mul	r2, ip, r8
   178d8:	mvncc	r2, #0
   178dc:	cmp	r0, r2
   178e0:	mul	r3, r2, r8
   178e4:	mvncc	r3, #0
   178e8:	cmp	r0, r3
   178ec:	mul	r7, r3, r8
   178f0:	mvncc	r7, #0
   178f4:	cmp	r0, r7
   178f8:	mul	r1, r7, r8
   178fc:	mvncc	r1, #0
   17900:	cmp	r0, r1
   17904:	mul	lr, r1, r8
   17908:	mov	r8, #0
   1790c:	mov	r1, #0
   17910:	mvncc	lr, #0
   17914:	movwcc	r8, #1
   17918:	cmp	r0, r7
   1791c:	mov	r7, #0
   17920:	movwcc	r7, #1
   17924:	cmp	r0, r3
   17928:	mov	r3, #0
   1792c:	movwcc	r3, #1
   17930:	cmp	r0, r2
   17934:	mov	r2, #0
   17938:	movwcc	r2, #1
   1793c:	cmp	r0, ip
   17940:	movwcc	r1, #1
   17944:	cmp	r0, r4
   17948:	mov	r4, lr
   1794c:	ldr	lr, [sp, #8]
   17950:	movwcc	r9, #1
   17954:	orr	r0, r9, r1
   17958:	orr	r0, r0, r2
   1795c:	orr	r0, r0, r3
   17960:	orr	r0, r0, r7
   17964:	orr	r0, r0, r8
   17968:	b	17b38 <__assert_fail@plt+0x67f0>
   1796c:	mvn	r0, #0
   17970:	mul	r1, r4, r8
   17974:	udiv	r0, r0, r8
   17978:	cmp	r0, r4
   1797c:	mvncc	r1, #0
   17980:	cmp	r0, r1
   17984:	mul	r2, r1, r8
   17988:	mvncc	r2, #0
   1798c:	cmp	r0, r2
   17990:	mul	r3, r2, r8
   17994:	mvncc	r3, #0
   17998:	cmp	r0, r3
   1799c:	mul	r7, r3, r8
   179a0:	mvncc	r7, #0
   179a4:	cmp	r0, r7
   179a8:	mul	ip, r7, r8
   179ac:	mov	r8, lr
   179b0:	mov	lr, #0
   179b4:	mov	r7, #0
   179b8:	mvncc	ip, #0
   179bc:	movwcc	lr, #1
   179c0:	cmp	r0, r3
   179c4:	mov	r3, #0
   179c8:	movwcc	r3, #1
   179cc:	cmp	r0, r2
   179d0:	mov	r2, #0
   179d4:	movwcc	r2, #1
   179d8:	cmp	r0, r1
   179dc:	mov	r1, #0
   179e0:	movwcc	r1, #1
   179e4:	cmp	r0, r4
   179e8:	mov	r4, ip
   179ec:	movwcc	r7, #1
   179f0:	orr	r0, r7, r1
   179f4:	orr	r0, r0, r2
   179f8:	orr	r0, r0, r3
   179fc:	orr	r0, r0, lr
   17a00:	mov	lr, r8
   17a04:	b	17b38 <__assert_fail@plt+0x67f0>
   17a08:	mvn	r0, #0
   17a0c:	str	lr, [sp, #8]
   17a10:	mul	lr, r4, r8
   17a14:	udiv	r0, r0, r8
   17a18:	cmp	r0, r4
   17a1c:	mvncc	lr, #0
   17a20:	cmp	r0, lr
   17a24:	mul	r9, lr, r8
   17a28:	mvncc	r9, #0
   17a2c:	cmp	r0, r9
   17a30:	mul	r7, r9, r8
   17a34:	mvncc	r7, #0
   17a38:	cmp	r0, r7
   17a3c:	mul	r3, r7, r8
   17a40:	mvncc	r3, #0
   17a44:	cmp	r0, r3
   17a48:	mul	r1, r3, r8
   17a4c:	mvncc	r1, #0
   17a50:	cmp	r0, r1
   17a54:	mul	r2, r1, r8
   17a58:	mvncc	r2, #0
   17a5c:	cmp	r0, r2
   17a60:	mul	ip, r2, r8
   17a64:	mvncc	ip, #0
   17a68:	cmp	r0, ip
   17a6c:	mul	r8, ip, r8
   17a70:	mov	ip, #0
   17a74:	mvncc	r8, #0
   17a78:	str	r8, [sp, #4]
   17a7c:	mov	r8, #0
   17a80:	movwcc	r8, #1
   17a84:	cmp	r0, r2
   17a88:	mov	r2, #0
   17a8c:	movwcc	r2, #1
   17a90:	cmp	r0, r1
   17a94:	mov	r1, #0
   17a98:	movwcc	r1, #1
   17a9c:	cmp	r0, r3
   17aa0:	mov	r3, #0
   17aa4:	movwcc	r3, #1
   17aa8:	cmp	r0, r7
   17aac:	mov	r7, #0
   17ab0:	movwcc	r7, #1
   17ab4:	cmp	r0, r9
   17ab8:	mov	r9, #0
   17abc:	movwcc	r9, #1
   17ac0:	cmp	r0, lr
   17ac4:	mov	lr, #0
   17ac8:	movwcc	lr, #1
   17acc:	cmp	r0, r4
   17ad0:	ldr	r4, [sp, #4]
   17ad4:	movwcc	ip, #1
   17ad8:	orr	r0, ip, lr
   17adc:	ldr	lr, [sp, #8]
   17ae0:	orr	r0, r0, r9
   17ae4:	orr	r0, r0, r7
   17ae8:	orr	r0, r0, r3
   17aec:	orr	r0, r0, r1
   17af0:	orr	r0, r0, r2
   17af4:	orr	r0, r0, r8
   17af8:	and	r0, r0, #1
   17afc:	b	17b38 <__assert_fail@plt+0x67f0>
   17b00:	movw	r0, #65535	; 0xffff
   17b04:	movt	r0, #63	; 0x3f
   17b08:	orr	r1, r0, #4194304	; 0x400000
   17b0c:	mov	r0, #0
   17b10:	cmp	r4, r1
   17b14:	lsl	r4, r4, #9
   17b18:	movwhi	r0, #1
   17b1c:	mvnhi	r4, #0
   17b20:	b	17b38 <__assert_fail@plt+0x67f0>
   17b24:	cmp	r4, #0
   17b28:	lsl	r1, r4, #1
   17b2c:	lsr	r0, r4, #31
   17b30:	mvnmi	r1, #0
   17b34:	mov	r4, r1
   17b38:	add	r1, r5, lr
   17b3c:	orr	sl, r0, sl
   17b40:	str	r1, [r6]
   17b44:	ldrb	r1, [r5, lr]
   17b48:	cmp	r1, #0
   17b4c:	orrne	sl, sl, #2
   17b50:	ldr	r0, [sp, #12]
   17b54:	str	r4, [r0]
   17b58:	mov	r0, sl
   17b5c:	sub	sp, fp, #28
   17b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b64:	movw	r0, #41422	; 0xa1ce
   17b68:	movw	r1, #41460	; 0xa1f4
   17b6c:	movw	r3, #41476	; 0xa204
   17b70:	mov	r2, #85	; 0x55
   17b74:	movt	r0, #1
   17b78:	movt	r1, #1
   17b7c:	movt	r3, #1
   17b80:	bl	11348 <__assert_fail@plt>
   17b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b88:	add	fp, sp, #28
   17b8c:	sub	sp, sp, #44	; 0x2c
   17b90:	cmp	r2, #37	; 0x25
   17b94:	bcs	18818 <__assert_fail@plt+0x74d0>
   17b98:	ldr	sl, [fp, #8]
   17b9c:	mov	r6, r2
   17ba0:	mov	r7, r1
   17ba4:	mov	r4, r0
   17ba8:	str	r3, [sp, #36]	; 0x24
   17bac:	bl	11240 <__errno_location@plt>
   17bb0:	mov	r5, r0
   17bb4:	mov	r0, #0
   17bb8:	str	r0, [r5]
   17bbc:	bl	111f8 <__ctype_b_loc@plt>
   17bc0:	ldr	r1, [r0]
   17bc4:	mov	r2, r4
   17bc8:	ldrb	r0, [r2], #1
   17bcc:	add	r3, r1, r0, lsl #1
   17bd0:	ldrb	r3, [r3, #1]
   17bd4:	tst	r3, #32
   17bd8:	bne	17bc8 <__assert_fail@plt+0x6880>
   17bdc:	cmp	r7, #0
   17be0:	sub	r9, fp, #32
   17be4:	mov	r8, #4
   17be8:	movne	r9, r7
   17bec:	cmp	r0, #45	; 0x2d
   17bf0:	beq	17fb0 <__assert_fail@plt+0x6c68>
   17bf4:	mov	r0, r4
   17bf8:	mov	r1, r9
   17bfc:	mov	r2, r6
   17c00:	mov	r3, #0
   17c04:	bl	110fc <__strtoull_internal@plt>
   17c08:	mov	r7, r1
   17c0c:	ldr	r1, [r9]
   17c10:	cmp	r1, r4
   17c14:	beq	17c4c <__assert_fail@plt+0x6904>
   17c18:	mov	r6, r0
   17c1c:	ldr	r0, [r5]
   17c20:	cmp	r0, #0
   17c24:	beq	17f68 <__assert_fail@plt+0x6c20>
   17c28:	cmp	r0, #34	; 0x22
   17c2c:	bne	17fb0 <__assert_fail@plt+0x6c68>
   17c30:	mov	r8, #1
   17c34:	cmp	sl, #0
   17c38:	beq	18804 <__assert_fail@plt+0x74bc>
   17c3c:	ldrb	r4, [r1]
   17c40:	cmp	r4, #0
   17c44:	bne	17c90 <__assert_fail@plt+0x6948>
   17c48:	b	18804 <__assert_fail@plt+0x74bc>
   17c4c:	cmp	sl, #0
   17c50:	beq	17fb0 <__assert_fail@plt+0x6c68>
   17c54:	mov	r5, r1
   17c58:	ldrb	r1, [r4]
   17c5c:	cmp	r1, #0
   17c60:	beq	17fb0 <__assert_fail@plt+0x6c68>
   17c64:	mov	r0, sl
   17c68:	bl	11234 <strchr@plt>
   17c6c:	cmp	r0, #0
   17c70:	beq	17fb0 <__assert_fail@plt+0x6c68>
   17c74:	mov	r1, r5
   17c78:	mov	r8, #0
   17c7c:	mov	r6, #1
   17c80:	mov	r7, #0
   17c84:	ldrb	r4, [r1]
   17c88:	cmp	r4, #0
   17c8c:	beq	18804 <__assert_fail@plt+0x74bc>
   17c90:	str	r1, [sp, #32]
   17c94:	mov	r0, sl
   17c98:	mov	r1, r4
   17c9c:	bl	11234 <strchr@plt>
   17ca0:	cmp	r0, #0
   17ca4:	beq	17fa4 <__assert_fail@plt+0x6c5c>
   17ca8:	sub	r0, r4, #69	; 0x45
   17cac:	mov	r1, #1
   17cb0:	mov	r3, #0
   17cb4:	mov	r5, #1024	; 0x400
   17cb8:	cmp	r0, #47	; 0x2f
   17cbc:	str	r1, [sp, #28]
   17cc0:	bhi	17dc4 <__assert_fail@plt+0x6a7c>
   17cc4:	add	r1, pc, #0
   17cc8:	ldr	pc, [r1, r0, lsl #2]
   17ccc:	andeq	r7, r1, ip, lsl #27
   17cd0:	andeq	r7, r1, r4, asr #27
   17cd4:	andeq	r7, r1, ip, lsl #27
   17cd8:	andeq	r7, r1, r4, asr #27
   17cdc:	andeq	r7, r1, r4, asr #27
   17ce0:	andeq	r7, r1, r4, asr #27
   17ce4:	andeq	r7, r1, ip, lsl #27
   17ce8:	andeq	r7, r1, r4, asr #27
   17cec:	andeq	r7, r1, ip, lsl #27
   17cf0:	andeq	r7, r1, r4, asr #27
   17cf4:	andeq	r7, r1, r4, asr #27
   17cf8:	andeq	r7, r1, ip, lsl #27
   17cfc:	andeq	r7, r1, r4, asr #27
   17d00:	andeq	r7, r1, r4, asr #27
   17d04:	andeq	r7, r1, r4, asr #27
   17d08:	andeq	r7, r1, ip, lsl #27
   17d0c:	andeq	r7, r1, r4, asr #27
   17d10:	andeq	r7, r1, r4, asr #27
   17d14:	andeq	r7, r1, r4, asr #27
   17d18:	andeq	r7, r1, r4, asr #27
   17d1c:	andeq	r7, r1, ip, lsl #27
   17d20:	andeq	r7, r1, ip, lsl #27
   17d24:	andeq	r7, r1, r4, asr #27
   17d28:	andeq	r7, r1, r4, asr #27
   17d2c:	andeq	r7, r1, r4, asr #27
   17d30:	andeq	r7, r1, r4, asr #27
   17d34:	andeq	r7, r1, r4, asr #27
   17d38:	andeq	r7, r1, r4, asr #27
   17d3c:	andeq	r7, r1, r4, asr #27
   17d40:	andeq	r7, r1, r4, asr #27
   17d44:	andeq	r7, r1, r4, asr #27
   17d48:	andeq	r7, r1, r4, asr #27
   17d4c:	andeq	r7, r1, r4, asr #27
   17d50:	andeq	r7, r1, r4, asr #27
   17d54:	andeq	r7, r1, ip, lsl #27
   17d58:	andeq	r7, r1, r4, asr #27
   17d5c:	andeq	r7, r1, r4, asr #27
   17d60:	andeq	r7, r1, r4, asr #27
   17d64:	andeq	r7, r1, ip, lsl #27
   17d68:	andeq	r7, r1, r4, asr #27
   17d6c:	andeq	r7, r1, ip, lsl #27
   17d70:	andeq	r7, r1, r4, asr #27
   17d74:	andeq	r7, r1, r4, asr #27
   17d78:	andeq	r7, r1, r4, asr #27
   17d7c:	andeq	r7, r1, r4, asr #27
   17d80:	andeq	r7, r1, r4, asr #27
   17d84:	andeq	r7, r1, r4, asr #27
   17d88:	andeq	r7, r1, ip, lsl #27
   17d8c:	mov	r0, sl
   17d90:	mov	r1, #48	; 0x30
   17d94:	bl	11234 <strchr@plt>
   17d98:	cmp	r0, #0
   17d9c:	beq	17dc0 <__assert_fail@plt+0x6a78>
   17da0:	ldr	r1, [sp, #32]
   17da4:	ldrb	r0, [r1, #1]
   17da8:	cmp	r0, #66	; 0x42
   17dac:	cmpne	r0, #68	; 0x44
   17db0:	bne	17f78 <__assert_fail@plt+0x6c30>
   17db4:	mov	r5, #1000	; 0x3e8
   17db8:	mov	r0, #2
   17dbc:	str	r0, [sp, #28]
   17dc0:	mov	r3, #0
   17dc4:	sub	r0, r4, #66	; 0x42
   17dc8:	cmp	r0, #53	; 0x35
   17dcc:	bhi	17fa4 <__assert_fail@plt+0x6c5c>
   17dd0:	add	r1, pc, #0
   17dd4:	ldr	pc, [r1, r0, lsl #2]
   17dd8:	andeq	r8, r1, r4, lsl r3
   17ddc:	andeq	r7, r1, r4, lsr #31
   17de0:	andeq	r7, r1, r4, lsr #31
   17de4:	andeq	r8, r1, ip, lsr r3
   17de8:	andeq	r7, r1, r4, lsr #31
   17dec:			; <UNDEFINED> instruction: 0x00017eb0
   17df0:	andeq	r7, r1, r4, lsr #31
   17df4:	andeq	r7, r1, r4, lsr #31
   17df8:	andeq	r7, r1, r4, lsr #31
   17dfc:			; <UNDEFINED> instruction: 0x00017fbc
   17e00:	andeq	r7, r1, r4, lsr #31
   17e04:	andeq	r8, r1, r4
   17e08:	andeq	r7, r1, r4, lsr #31
   17e0c:	andeq	r7, r1, r4, lsr #31
   17e10:	muleq	r1, r0, r4
   17e14:	andeq	r7, r1, r4, lsr #31
   17e18:	andeq	r7, r1, r4, lsr #31
   17e1c:	andeq	r7, r1, r4, lsr #31
   17e20:	muleq	r1, r0, r0
   17e24:	andeq	r7, r1, r4, lsr #31
   17e28:	andeq	r7, r1, r4, lsr #31
   17e2c:	andeq	r7, r1, r4, lsr #31
   17e30:	andeq	r7, r1, r4, lsr #31
   17e34:			; <UNDEFINED> instruction: 0x000185b8
   17e38:	andeq	r8, r1, r8, ror r1
   17e3c:	andeq	r7, r1, r4, lsr #31
   17e40:	andeq	r7, r1, r4, lsr #31
   17e44:	andeq	r7, r1, r4, lsr #31
   17e48:	andeq	r7, r1, r4, lsr #31
   17e4c:	andeq	r7, r1, r4, lsr #31
   17e50:	andeq	r7, r1, r4, lsr #31
   17e54:	andeq	r7, r1, r4, lsr #31
   17e58:	andeq	r8, r1, ip, lsl #15
   17e5c:	andeq	r8, r1, r4, ror #15
   17e60:	andeq	r7, r1, r4, lsr #31
   17e64:	andeq	r7, r1, r4, lsr #31
   17e68:	andeq	r7, r1, r4, lsr #31
   17e6c:			; <UNDEFINED> instruction: 0x00017eb0
   17e70:	andeq	r7, r1, r4, lsr #31
   17e74:	andeq	r7, r1, r4, lsr #31
   17e78:	andeq	r7, r1, r4, lsr #31
   17e7c:			; <UNDEFINED> instruction: 0x00017fbc
   17e80:	andeq	r7, r1, r4, lsr #31
   17e84:	andeq	r8, r1, r4
   17e88:	andeq	r7, r1, r4, lsr #31
   17e8c:	andeq	r7, r1, r4, lsr #31
   17e90:	andeq	r7, r1, r4, lsr #31
   17e94:	andeq	r7, r1, r4, lsr #31
   17e98:	andeq	r7, r1, r4, lsr #31
   17e9c:	andeq	r7, r1, r4, lsr #31
   17ea0:	muleq	r1, r0, r0
   17ea4:	andeq	r7, r1, r4, lsr #31
   17ea8:	andeq	r7, r1, r4, lsr #31
   17eac:	andeq	r8, r1, r0, asr #15
   17eb0:	mvn	r0, #0
   17eb4:	mvn	r1, #0
   17eb8:	mov	r2, r5
   17ebc:	mov	sl, r3
   17ec0:	bl	18e38 <__assert_fail@plt+0x7af0>
   17ec4:	subs	r3, r0, r6
   17ec8:	umull	r4, r2, r6, r5
   17ecc:	mov	lr, #0
   17ed0:	str	r1, [sp, #20]
   17ed4:	sbcs	r3, r1, r7
   17ed8:	movwcc	lr, #1
   17edc:	mla	ip, r6, sl, r2
   17ee0:	mov	r2, r1
   17ee4:	mov	r2, #0
   17ee8:	cmp	lr, #0
   17eec:	mla	r7, r7, r5, ip
   17ef0:	mvnne	r4, #0
   17ef4:	mvnne	r7, #0
   17ef8:	subs	r6, r0, r4
   17efc:	sbcs	r6, r1, r7
   17f00:	umull	r3, r6, r4, r5
   17f04:	movwcc	r2, #1
   17f08:	cmp	r2, #0
   17f0c:	mvnne	r3, #0
   17f10:	cmp	r2, #0
   17f14:	str	r6, [sp, #16]
   17f18:	umull	r6, ip, r3, r5
   17f1c:	mla	r1, r3, sl, ip
   17f20:	ldr	ip, [sp, #16]
   17f24:	str	r1, [sp, #12]
   17f28:	mla	r4, r4, sl, ip
   17f2c:	mla	r4, r7, r5, r4
   17f30:	mvnne	r4, #0
   17f34:	subs	r0, r0, r3
   17f38:	ldr	r0, [sp, #20]
   17f3c:	ldr	r7, [sp, #12]
   17f40:	sbcs	r0, r0, r4
   17f44:	mov	r0, #0
   17f48:	mla	r7, r4, r5, r7
   17f4c:	movwcc	r0, #1
   17f50:	cmp	r0, #0
   17f54:	mov	r1, r0
   17f58:	orr	r0, lr, r2
   17f5c:	mvnne	r7, #0
   17f60:	mvnne	r6, #0
   17f64:	b	185b0 <__assert_fail@plt+0x7268>
   17f68:	mov	r8, r0
   17f6c:	cmp	sl, #0
   17f70:	bne	17c3c <__assert_fail@plt+0x68f4>
   17f74:	b	18804 <__assert_fail@plt+0x74bc>
   17f78:	cmp	r0, #105	; 0x69
   17f7c:	mov	r3, #0
   17f80:	bne	17dc4 <__assert_fail@plt+0x6a7c>
   17f84:	ldrb	r0, [r1, #2]
   17f88:	mov	r1, #1
   17f8c:	cmp	r0, #66	; 0x42
   17f90:	movweq	r1, #3
   17f94:	str	r1, [sp, #28]
   17f98:	sub	r0, r4, #66	; 0x42
   17f9c:	cmp	r0, #53	; 0x35
   17fa0:	bls	17dd0 <__assert_fail@plt+0x6a88>
   17fa4:	ldr	r0, [sp, #36]	; 0x24
   17fa8:	orr	r8, r8, #2
   17fac:	strd	r6, [r0]
   17fb0:	mov	r0, r8
   17fb4:	sub	sp, fp, #28
   17fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fbc:	mvn	r0, #0
   17fc0:	mvn	r1, #0
   17fc4:	mov	r2, r5
   17fc8:	mov	r4, r3
   17fcc:	bl	18e38 <__assert_fail@plt+0x7af0>
   17fd0:	subs	r0, r0, r6
   17fd4:	mov	r2, #0
   17fd8:	sbcs	r0, r1, r7
   17fdc:	umull	r0, r1, r6, r5
   17fe0:	movwcc	r2, #1
   17fe4:	cmp	r2, #0
   17fe8:	mla	r1, r6, r4, r1
   17fec:	mov	r3, r2
   17ff0:	mvnne	r0, #0
   17ff4:	mla	r7, r7, r5, r1
   17ff8:	mvnne	r7, #0
   17ffc:	mov	r6, r0
   18000:	b	187e4 <__assert_fail@plt+0x749c>
   18004:	mvn	r0, #0
   18008:	mvn	r1, #0
   1800c:	mov	r2, r5
   18010:	str	r3, [sp, #24]
   18014:	bl	18e38 <__assert_fail@plt+0x7af0>
   18018:	subs	r3, r0, r6
   1801c:	mov	ip, r0
   18020:	umull	r4, r0, r6, r5
   18024:	mov	sl, #0
   18028:	sbcs	r3, r1, r7
   1802c:	mov	r3, #0
   18030:	movwcc	r3, #1
   18034:	cmp	r3, #0
   18038:	str	r0, [sp, #20]
   1803c:	ldr	r0, [sp, #24]
   18040:	mvnne	r4, #0
   18044:	cmp	r3, #0
   18048:	umull	lr, r2, r4, r5
   1804c:	mla	r2, r4, r0, r2
   18050:	str	r2, [sp, #16]
   18054:	ldr	r2, [sp, #20]
   18058:	mla	r6, r6, r0, r2
   1805c:	ldr	r0, [sp, #16]
   18060:	mla	r6, r7, r5, r6
   18064:	mvnne	r6, #0
   18068:	mla	r7, r6, r5, r0
   1806c:	subs	r0, ip, r4
   18070:	sbcs	r0, r1, r6
   18074:	movwcc	sl, #1
   18078:	cmp	sl, #0
   1807c:	orr	r3, r3, sl
   18080:	mvnne	lr, #0
   18084:	mvnne	r7, #0
   18088:	mov	r6, lr
   1808c:	b	187e4 <__assert_fail@plt+0x749c>
   18090:	mvn	r0, #0
   18094:	mvn	r1, #0
   18098:	mov	r2, r5
   1809c:	mov	sl, r3
   180a0:	bl	18e38 <__assert_fail@plt+0x7af0>
   180a4:	subs	r3, r0, r6
   180a8:	mov	ip, r1
   180ac:	umull	r2, lr, r6, r5
   180b0:	str	r0, [sp, #20]
   180b4:	sbcs	r3, r1, r7
   180b8:	mov	r1, #0
   180bc:	str	ip, [sp, #16]
   180c0:	movwcc	r1, #1
   180c4:	mla	r6, r6, sl, lr
   180c8:	mov	lr, #0
   180cc:	cmp	r1, #0
   180d0:	mla	r7, r7, r5, r6
   180d4:	mvnne	r2, #0
   180d8:	cmp	r1, #0
   180dc:	umull	r3, r4, r2, r5
   180e0:	mvnne	r7, #0
   180e4:	mla	r4, r2, sl, r4
   180e8:	subs	r2, r0, r2
   180ec:	sbcs	r2, ip, r7
   180f0:	mla	r4, r7, r5, r4
   180f4:	mov	r2, #0
   180f8:	movwcc	lr, #1
   180fc:	cmp	lr, #0
   18100:	mvnne	r3, #0
   18104:	mvnne	r4, #0
   18108:	subs	r7, r0, r3
   1810c:	mov	r0, r5
   18110:	sbcs	r7, ip, r4
   18114:	umull	r5, r7, r3, r5
   18118:	movwcc	r2, #1
   1811c:	cmp	r2, #0
   18120:	mla	r3, r3, sl, r7
   18124:	mvnne	r5, #0
   18128:	cmp	r2, #0
   1812c:	mla	r3, r4, r0, r3
   18130:	umull	r6, ip, r5, r0
   18134:	mvnne	r3, #0
   18138:	mla	ip, r5, sl, ip
   1813c:	mla	r7, r3, r0, ip
   18140:	ldr	r0, [sp, #20]
   18144:	subs	r0, r0, r5
   18148:	ldr	r0, [sp, #16]
   1814c:	sbcs	r0, r0, r3
   18150:	mov	r0, #0
   18154:	movwcc	r0, #1
   18158:	cmp	r0, #0
   1815c:	mov	r3, r0
   18160:	orr	r0, r1, lr
   18164:	orr	r0, r0, r2
   18168:	mvnne	r7, #0
   1816c:	mvnne	r6, #0
   18170:	orr	r3, r0, r3
   18174:	b	187e4 <__assert_fail@plt+0x749c>
   18178:	mvn	r0, #0
   1817c:	mvn	r1, #0
   18180:	mov	r2, r5
   18184:	mov	r4, r3
   18188:	str	r3, [sp, #24]
   1818c:	bl	18e38 <__assert_fail@plt+0x7af0>
   18190:	umull	r3, r2, r6, r5
   18194:	mla	r2, r6, r4, r2
   18198:	subs	r6, r0, r6
   1819c:	sbcs	r6, r1, r7
   181a0:	mov	r6, #0
   181a4:	mla	r2, r7, r5, r2
   181a8:	mov	r7, #0
   181ac:	movwcc	r6, #1
   181b0:	cmp	r6, #0
   181b4:	str	r6, [sp, #20]
   181b8:	mvnne	r3, #0
   181bc:	mvnne	r2, #0
   181c0:	subs	r4, r0, r3
   181c4:	umull	r6, ip, r3, r5
   181c8:	sbcs	r4, r1, r2
   181cc:	ldr	r4, [sp, #24]
   181d0:	movwcc	r7, #1
   181d4:	cmp	r7, #0
   181d8:	mov	lr, r7
   181dc:	str	r7, [sp, #16]
   181e0:	mvnne	r6, #0
   181e4:	cmp	lr, #0
   181e8:	mov	lr, #0
   181ec:	umull	sl, r7, r6, r5
   181f0:	mla	r3, r3, r4, ip
   181f4:	mla	r2, r2, r5, r3
   181f8:	mvnne	r2, #0
   181fc:	subs	r3, r0, r6
   18200:	mla	r7, r6, r4, r7
   18204:	mov	r4, r0
   18208:	mov	r0, #0
   1820c:	mla	r7, r2, r5, r7
   18210:	sbcs	r2, r1, r2
   18214:	mov	r3, r4
   18218:	movwcc	r0, #1
   1821c:	str	r3, [sp, #4]
   18220:	cmp	r0, #0
   18224:	str	r0, [sp, #12]
   18228:	mov	r0, r1
   1822c:	mvnne	sl, #0
   18230:	mvnne	r7, #0
   18234:	str	r0, [sp, #8]
   18238:	subs	r2, r4, sl
   1823c:	ldr	r4, [sp, #24]
   18240:	sbcs	r2, r1, r7
   18244:	umull	r6, r2, sl, r5
   18248:	movwcc	lr, #1
   1824c:	cmp	lr, #0
   18250:	mvnne	r6, #0
   18254:	mla	r2, sl, r4, r2
   18258:	cmp	lr, #0
   1825c:	umull	r1, ip, r6, r5
   18260:	mla	r2, r7, r5, r2
   18264:	mvnne	r2, #0
   18268:	mla	ip, r6, r4, ip
   1826c:	subs	r6, r3, r6
   18270:	mla	r7, r2, r5, ip
   18274:	sbcs	r2, r0, r2
   18278:	mov	ip, #0
   1827c:	mov	r2, #0
   18280:	movwcc	ip, #1
   18284:	cmp	ip, #0
   18288:	mvnne	r1, #0
   1828c:	mvnne	r7, #0
   18290:	subs	r6, r3, r1
   18294:	ldr	r3, [sp, #24]
   18298:	sbcs	r6, r0, r7
   1829c:	umull	r0, sl, r1, r5
   182a0:	movwcc	r2, #1
   182a4:	cmp	r2, #0
   182a8:	mvnne	r0, #0
   182ac:	mla	r1, r1, r3, sl
   182b0:	cmp	r2, #0
   182b4:	umull	r6, r4, r0, r5
   182b8:	mla	r1, r7, r5, r1
   182bc:	mvnne	r1, #0
   182c0:	mla	r4, r0, r3, r4
   182c4:	ldr	r3, [sp, #4]
   182c8:	mla	r7, r1, r5, r4
   182cc:	ldr	r5, [sp, #16]
   182d0:	subs	r0, r3, r0
   182d4:	ldr	r0, [sp, #8]
   182d8:	sbcs	r0, r0, r1
   182dc:	mov	r0, #0
   182e0:	movwcc	r0, #1
   182e4:	cmp	r0, #0
   182e8:	mov	r1, r0
   182ec:	ldr	r0, [sp, #20]
   182f0:	mvnne	r7, #0
   182f4:	mvnne	r6, #0
   182f8:	orr	r0, r0, r5
   182fc:	ldr	r5, [sp, #12]
   18300:	orr	r0, r0, r5
   18304:	orr	r0, r0, lr
   18308:	orr	r0, r0, ip
   1830c:	orr	r0, r0, r2
   18310:	b	18780 <__assert_fail@plt+0x7438>
   18314:	mov	r1, #0
   18318:	lsl	r2, r7, #10
   1831c:	lsl	r0, r6, #10
   18320:	lsr	r3, r7, #22
   18324:	cmp	r1, r7, lsr #22
   18328:	orr	r2, r2, r6, lsr #22
   1832c:	mvnne	r0, #0
   18330:	movwne	r3, #1
   18334:	cmp	r1, r7, lsr #22
   18338:	b	187b0 <__assert_fail@plt+0x7468>
   1833c:	mvn	r0, #0
   18340:	mvn	r1, #0
   18344:	mov	r2, r5
   18348:	mov	sl, r3
   1834c:	bl	18e38 <__assert_fail@plt+0x7af0>
   18350:	subs	r2, r0, r6
   18354:	mov	ip, r0
   18358:	mov	r0, #0
   1835c:	sbcs	r2, r1, r7
   18360:	umull	r4, r2, r6, r5
   18364:	movwcc	r0, #1
   18368:	cmp	r0, #0
   1836c:	mla	r2, r6, sl, r2
   18370:	str	r0, [sp, #20]
   18374:	mvnne	r4, #0
   18378:	cmp	r0, #0
   1837c:	mla	r2, r7, r5, r2
   18380:	mov	r0, #0
   18384:	umull	lr, r3, r4, r5
   18388:	mvnne	r2, #0
   1838c:	mla	r3, r4, sl, r3
   18390:	mla	r6, r2, r5, r3
   18394:	subs	r3, ip, r4
   18398:	mov	r3, r1
   1839c:	sbcs	r2, r1, r2
   183a0:	str	r3, [sp, #8]
   183a4:	movwcc	r0, #1
   183a8:	cmp	r0, #0
   183ac:	str	r0, [sp, #16]
   183b0:	mov	r0, ip
   183b4:	mvnne	lr, #0
   183b8:	mvnne	r6, #0
   183bc:	str	r0, [sp, #12]
   183c0:	subs	r2, ip, lr
   183c4:	umull	r7, r4, lr, r5
   183c8:	sbcs	r2, r1, r6
   183cc:	mov	r2, #0
   183d0:	movwcc	r2, #1
   183d4:	mla	r4, lr, sl, r4
   183d8:	cmp	r2, #0
   183dc:	mla	r6, r6, r5, r4
   183e0:	mov	r4, #0
   183e4:	mvnne	r7, #0
   183e8:	cmp	r2, #0
   183ec:	umull	r1, ip, r7, r5
   183f0:	mvnne	r6, #0
   183f4:	mla	ip, r7, sl, ip
   183f8:	subs	r7, r0, r7
   183fc:	sbcs	r7, r3, r6
   18400:	mla	lr, r6, r5, ip
   18404:	mov	ip, #0
   18408:	movwcc	ip, #1
   1840c:	cmp	ip, #0
   18410:	mvnne	r1, #0
   18414:	mvnne	lr, #0
   18418:	subs	r7, r0, r1
   1841c:	sbcs	r7, r3, lr
   18420:	umull	r0, r7, r1, r5
   18424:	movwcc	r4, #1
   18428:	cmp	r4, #0
   1842c:	mla	r1, r1, sl, r7
   18430:	mvnne	r0, #0
   18434:	cmp	r4, #0
   18438:	mla	r1, lr, r5, r1
   1843c:	umull	r6, r3, r0, r5
   18440:	mvnne	r1, #0
   18444:	mla	r3, r0, sl, r3
   18448:	mla	r7, r1, r5, r3
   1844c:	ldr	r3, [sp, #12]
   18450:	subs	r0, r3, r0
   18454:	ldr	r0, [sp, #8]
   18458:	ldr	r3, [sp, #16]
   1845c:	sbcs	r0, r0, r1
   18460:	mov	r0, #0
   18464:	movwcc	r0, #1
   18468:	cmp	r0, #0
   1846c:	mov	r1, r0
   18470:	ldr	r0, [sp, #20]
   18474:	mvnne	r7, #0
   18478:	mvnne	r6, #0
   1847c:	orr	r0, r0, r3
   18480:	orr	r0, r0, r2
   18484:	orr	r0, r0, ip
   18488:	orr	r0, r0, r4
   1848c:	b	185b0 <__assert_fail@plt+0x7268>
   18490:	mvn	r0, #0
   18494:	mvn	r1, #0
   18498:	mov	r2, r5
   1849c:	mov	sl, r3
   184a0:	bl	18e38 <__assert_fail@plt+0x7af0>
   184a4:	umull	r3, r2, r6, r5
   184a8:	mov	lr, r1
   184ac:	mov	r1, r0
   184b0:	mla	r2, r6, sl, r2
   184b4:	subs	r6, r0, r6
   184b8:	mov	r0, #0
   184bc:	sbcs	r6, lr, r7
   184c0:	mla	r2, r7, r5, r2
   184c4:	movwcc	r0, #1
   184c8:	cmp	r0, #0
   184cc:	str	r0, [sp, #20]
   184d0:	mov	r0, r1
   184d4:	mvnne	r3, #0
   184d8:	mvnne	r2, #0
   184dc:	str	r0, [sp, #16]
   184e0:	subs	r4, r1, r3
   184e4:	umull	r7, ip, r3, r5
   184e8:	sbcs	r4, lr, r2
   184ec:	mov	r4, #0
   184f0:	movwcc	r4, #1
   184f4:	mla	r3, r3, sl, ip
   184f8:	mov	ip, #0
   184fc:	cmp	r4, #0
   18500:	mla	r2, r2, r5, r3
   18504:	mvnne	r7, #0
   18508:	cmp	r4, #0
   1850c:	umull	r1, r6, r7, r5
   18510:	mvnne	r2, #0
   18514:	mla	r6, r7, sl, r6
   18518:	mla	r3, r2, r5, r6
   1851c:	subs	r6, r0, r7
   18520:	sbcs	r2, lr, r2
   18524:	mov	r2, #0
   18528:	movwcc	ip, #1
   1852c:	cmp	ip, #0
   18530:	mvnne	r1, #0
   18534:	mvnne	r3, #0
   18538:	subs	r6, r0, r1
   1853c:	sbcs	r6, lr, r3
   18540:	umull	r0, r6, r1, r5
   18544:	movwcc	r2, #1
   18548:	cmp	r2, #0
   1854c:	mvnne	r0, #0
   18550:	cmp	r2, #0
   18554:	str	r6, [sp, #12]
   18558:	umull	r6, r7, r0, r5
   1855c:	mla	r7, r0, sl, r7
   18560:	str	r7, [sp, #8]
   18564:	ldr	r7, [sp, #12]
   18568:	mla	r1, r1, sl, r7
   1856c:	mla	r1, r3, r5, r1
   18570:	ldr	r3, [sp, #8]
   18574:	mvnne	r1, #0
   18578:	mla	r7, r1, r5, r3
   1857c:	ldr	r3, [sp, #16]
   18580:	subs	r0, r3, r0
   18584:	sbcs	r0, lr, r1
   18588:	mov	r0, #0
   1858c:	movwcc	r0, #1
   18590:	cmp	r0, #0
   18594:	mov	r1, r0
   18598:	ldr	r0, [sp, #20]
   1859c:	mvnne	r7, #0
   185a0:	mvnne	r6, #0
   185a4:	orr	r0, r0, r4
   185a8:	orr	r0, r0, ip
   185ac:	orr	r0, r0, r2
   185b0:	orr	r3, r0, r1
   185b4:	b	187e4 <__assert_fail@plt+0x749c>
   185b8:	mvn	r0, #0
   185bc:	mvn	r1, #0
   185c0:	mov	r2, r5
   185c4:	mov	sl, r3
   185c8:	bl	18e38 <__assert_fail@plt+0x7af0>
   185cc:	mov	ip, r1
   185d0:	subs	r1, r0, r6
   185d4:	umull	r3, lr, r6, r5
   185d8:	mov	r2, r5
   185dc:	sbcs	r1, ip, r7
   185e0:	mov	r1, #0
   185e4:	str	ip, [sp, #4]
   185e8:	movwcc	r1, #1
   185ec:	mla	r6, r6, sl, lr
   185f0:	cmp	r1, #0
   185f4:	mla	r7, r7, r2, r6
   185f8:	str	r1, [sp, #20]
   185fc:	mvnne	r3, #0
   18600:	cmp	r1, #0
   18604:	mov	r1, r0
   18608:	umull	r4, r5, r3, r5
   1860c:	mvnne	r7, #0
   18610:	mov	lr, r1
   18614:	mla	r5, r3, sl, r5
   18618:	subs	r3, r0, r3
   1861c:	sbcs	r0, ip, r7
   18620:	mov	r0, #0
   18624:	mla	r5, r7, r2, r5
   18628:	movwcc	r0, #1
   1862c:	cmp	r0, #0
   18630:	str	r0, [sp, #16]
   18634:	mvnne	r4, #0
   18638:	mvnne	r5, #0
   1863c:	subs	r0, r1, r4
   18640:	mov	r1, #0
   18644:	sbcs	r0, ip, r5
   18648:	umull	r3, r0, r4, r2
   1864c:	movwcc	r1, #1
   18650:	cmp	r1, #0
   18654:	mla	r0, r4, sl, r0
   18658:	mov	r4, lr
   1865c:	str	r1, [sp, #12]
   18660:	mvnne	r3, #0
   18664:	cmp	r1, #0
   18668:	mla	r0, r5, r2, r0
   1866c:	str	r4, [sp]
   18670:	umull	r7, r6, r3, r2
   18674:	mvnne	r0, #0
   18678:	mla	r6, r3, sl, r6
   1867c:	subs	r3, lr, r3
   18680:	mov	r3, #0
   18684:	mla	r5, r0, r2, r6
   18688:	sbcs	r0, ip, r0
   1868c:	mov	r0, #0
   18690:	movwcc	r0, #1
   18694:	cmp	r0, #0
   18698:	str	r0, [sp, #8]
   1869c:	mvnne	r7, #0
   186a0:	mvnne	r5, #0
   186a4:	subs	r0, lr, r7
   186a8:	sbcs	r0, ip, r5
   186ac:	umull	r6, r0, r7, r2
   186b0:	movwcc	r3, #1
   186b4:	cmp	r3, #0
   186b8:	mla	r7, r7, sl, r0
   186bc:	mov	r0, ip
   186c0:	mvnne	r6, #0
   186c4:	cmp	r3, #0
   186c8:	mla	r7, r5, r2, r7
   186cc:	mov	r5, #0
   186d0:	umull	r1, lr, r6, r2
   186d4:	mvnne	r7, #0
   186d8:	mla	lr, r6, sl, lr
   186dc:	subs	r6, r4, r6
   186e0:	mla	lr, r7, r2, lr
   186e4:	sbcs	r7, ip, r7
   186e8:	mov	ip, #0
   186ec:	movwcc	ip, #1
   186f0:	cmp	ip, #0
   186f4:	mvnne	r1, #0
   186f8:	mvnne	lr, #0
   186fc:	subs	r7, r4, r1
   18700:	sbcs	r7, r0, lr
   18704:	umull	r0, r7, r1, r2
   18708:	movwcc	r5, #1
   1870c:	cmp	r5, #0
   18710:	mla	r1, r1, sl, r7
   18714:	mvnne	r0, #0
   18718:	cmp	r5, #0
   1871c:	mla	r1, lr, r2, r1
   18720:	umull	r6, r4, r0, r2
   18724:	mvnne	r1, #0
   18728:	mla	r4, r0, sl, r4
   1872c:	mla	r7, r1, r2, r4
   18730:	ldr	r2, [sp]
   18734:	subs	r0, r2, r0
   18738:	ldr	r0, [sp, #4]
   1873c:	ldr	r2, [sp, #16]
   18740:	sbcs	r0, r0, r1
   18744:	mov	r0, #0
   18748:	movwcc	r0, #1
   1874c:	cmp	r0, #0
   18750:	mov	r1, r0
   18754:	ldr	r0, [sp, #20]
   18758:	mvnne	r7, #0
   1875c:	mvnne	r6, #0
   18760:	orr	r0, r0, r2
   18764:	ldr	r2, [sp, #12]
   18768:	orr	r0, r0, r2
   1876c:	ldr	r2, [sp, #8]
   18770:	orr	r0, r0, r2
   18774:	orr	r0, r0, r3
   18778:	orr	r0, r0, ip
   1877c:	orr	r0, r0, r5
   18780:	orr	r0, r0, r1
   18784:	and	r3, r0, #1
   18788:	b	187e4 <__assert_fail@plt+0x749c>
   1878c:	mov	r1, #0
   18790:	lsl	r2, r7, #9
   18794:	lsl	r0, r6, #9
   18798:	lsr	r3, r7, #23
   1879c:	cmp	r1, r7, lsr #23
   187a0:	orr	r2, r2, r6, lsr #23
   187a4:	mvnne	r0, #0
   187a8:	movwne	r3, #1
   187ac:	cmp	r1, r7, lsr #23
   187b0:	mvnne	r2, #0
   187b4:	mov	r6, r0
   187b8:	mov	r7, r2
   187bc:	b	187e4 <__assert_fail@plt+0x749c>
   187c0:	lsl	r1, r7, #1
   187c4:	cmp	r7, #0
   187c8:	lsl	r0, r6, #1
   187cc:	lsr	r3, r7, #31
   187d0:	orr	r1, r1, r6, lsr #31
   187d4:	mvnmi	r0, #0
   187d8:	mvnmi	r1, #0
   187dc:	mov	r6, r0
   187e0:	mov	r7, r1
   187e4:	ldr	r1, [sp, #32]
   187e8:	ldr	r2, [sp, #28]
   187ec:	orr	r8, r3, r8
   187f0:	add	r0, r1, r2
   187f4:	str	r0, [r9]
   187f8:	ldrb	r0, [r1, r2]
   187fc:	cmp	r0, #0
   18800:	orrne	r8, r8, #2
   18804:	ldr	r0, [sp, #36]	; 0x24
   18808:	strd	r6, [r0]
   1880c:	mov	r0, r8
   18810:	sub	sp, fp, #28
   18814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18818:	movw	r0, #41422	; 0xa1ce
   1881c:	movw	r1, #41460	; 0xa1f4
   18820:	movw	r3, #41557	; 0xa255
   18824:	mov	r2, #85	; 0x55
   18828:	movt	r0, #1
   1882c:	movt	r1, #1
   18830:	movt	r3, #1
   18834:	bl	11348 <__assert_fail@plt>
   18838:	clz	r2, r1
   1883c:	clz	r3, r0
   18840:	lsr	r2, r2, #5
   18844:	lsr	r3, r3, #5
   18848:	orrs	r2, r3, r2
   1884c:	movwne	r1, #1
   18850:	movwne	r0, #1
   18854:	cmp	r1, #0
   18858:	beq	18888 <__assert_fail@plt+0x7540>
   1885c:	mvn	r2, #-2147483648	; 0x80000000
   18860:	udiv	r2, r2, r1
   18864:	cmp	r2, r0
   18868:	bcs	18888 <__assert_fail@plt+0x7540>
   1886c:	push	{fp, lr}
   18870:	mov	fp, sp
   18874:	bl	11240 <__errno_location@plt>
   18878:	mov	r1, #12
   1887c:	str	r1, [r0]
   18880:	mov	r0, #0
   18884:	pop	{fp, pc}
   18888:	b	11090 <calloc@plt>
   1888c:	cmp	r0, #0
   18890:	movweq	r0, #1
   18894:	cmn	r0, #1
   18898:	ble	188a0 <__assert_fail@plt+0x7558>
   1889c:	b	111b0 <malloc@plt>
   188a0:	push	{fp, lr}
   188a4:	mov	fp, sp
   188a8:	bl	11240 <__errno_location@plt>
   188ac:	mov	r1, #12
   188b0:	str	r1, [r0]
   188b4:	mov	r0, #0
   188b8:	pop	{fp, pc}
   188bc:	push	{fp, lr}
   188c0:	mov	fp, sp
   188c4:	cmp	r0, #0
   188c8:	beq	188e4 <__assert_fail@plt+0x759c>
   188cc:	cmp	r1, #0
   188d0:	beq	188f0 <__assert_fail@plt+0x75a8>
   188d4:	cmn	r1, #1
   188d8:	ble	188fc <__assert_fail@plt+0x75b4>
   188dc:	pop	{fp, lr}
   188e0:	b	11138 <realloc@plt>
   188e4:	mov	r0, r1
   188e8:	pop	{fp, lr}
   188ec:	b	1888c <__assert_fail@plt+0x7544>
   188f0:	bl	140ac <__assert_fail@plt+0x2d64>
   188f4:	mov	r0, #0
   188f8:	pop	{fp, pc}
   188fc:	bl	11240 <__errno_location@plt>
   18900:	mov	r1, #12
   18904:	str	r1, [r0]
   18908:	mov	r0, #0
   1890c:	pop	{fp, pc}
   18910:	push	{r4, r5, r6, sl, fp, lr}
   18914:	add	fp, sp, #16
   18918:	mov	r4, r0
   1891c:	bl	11180 <__fpending@plt>
   18920:	ldr	r6, [r4]
   18924:	mov	r5, r0
   18928:	mov	r0, r4
   1892c:	bl	13f04 <__assert_fail@plt+0x2bbc>
   18930:	tst	r6, #32
   18934:	bne	1896c <__assert_fail@plt+0x7624>
   18938:	cmp	r0, #0
   1893c:	mov	r4, r0
   18940:	mvnne	r4, #0
   18944:	cmp	r5, #0
   18948:	bne	18978 <__assert_fail@plt+0x7630>
   1894c:	cmp	r0, #0
   18950:	beq	18978 <__assert_fail@plt+0x7630>
   18954:	bl	11240 <__errno_location@plt>
   18958:	ldr	r0, [r0]
   1895c:	subs	r4, r0, #9
   18960:	mvnne	r4, #0
   18964:	mov	r0, r4
   18968:	pop	{r4, r5, r6, sl, fp, pc}
   1896c:	mvn	r4, #0
   18970:	cmp	r0, #0
   18974:	beq	18980 <__assert_fail@plt+0x7638>
   18978:	mov	r0, r4
   1897c:	pop	{r4, r5, r6, sl, fp, pc}
   18980:	bl	11240 <__errno_location@plt>
   18984:	mov	r1, #0
   18988:	str	r1, [r0]
   1898c:	mov	r0, r4
   18990:	pop	{r4, r5, r6, sl, fp, pc}
   18994:	sub	sp, sp, #8
   18998:	push	{r4, r5, r6, r7, fp, lr}
   1899c:	add	fp, sp, #16
   189a0:	sub	sp, sp, #8
   189a4:	mov	r5, r0
   189a8:	add	r0, fp, #8
   189ac:	cmp	r1, #11
   189b0:	str	r2, [fp, #8]
   189b4:	str	r3, [fp, #12]
   189b8:	str	r0, [sp, #4]
   189bc:	bhi	189f8 <__assert_fail@plt+0x76b0>
   189c0:	mov	r0, #1
   189c4:	movw	r2, #1300	; 0x514
   189c8:	tst	r2, r0, lsl r1
   189cc:	bne	18ab8 <__assert_fail@plt+0x7770>
   189d0:	movw	r2, #2570	; 0xa0a
   189d4:	tst	r2, r0, lsl r1
   189d8:	bne	18a20 <__assert_fail@plt+0x76d8>
   189dc:	cmp	r1, #0
   189e0:	bne	189f8 <__assert_fail@plt+0x76b0>
   189e4:	ldr	r0, [sp, #4]
   189e8:	add	r1, r0, #4
   189ec:	str	r1, [sp, #4]
   189f0:	mov	r1, #0
   189f4:	b	18ac4 <__assert_fail@plt+0x777c>
   189f8:	sub	r0, r1, #1024	; 0x400
   189fc:	cmp	r0, #10
   18a00:	bhi	18ab8 <__assert_fail@plt+0x7770>
   18a04:	mov	r2, #1
   18a08:	movw	r3, #645	; 0x285
   18a0c:	tst	r3, r2, lsl r0
   18a10:	bne	18ab8 <__assert_fail@plt+0x7770>
   18a14:	movw	r3, #1282	; 0x502
   18a18:	tst	r3, r2, lsl r0
   18a1c:	beq	18a2c <__assert_fail@plt+0x76e4>
   18a20:	mov	r0, r5
   18a24:	bl	112ac <fcntl64@plt>
   18a28:	b	18ad0 <__assert_fail@plt+0x7788>
   18a2c:	cmp	r0, #6
   18a30:	bne	18ab8 <__assert_fail@plt+0x7770>
   18a34:	ldr	r0, [sp, #4]
   18a38:	movw	r7, #45872	; 0xb330
   18a3c:	movt	r7, #2
   18a40:	add	r1, r0, #4
   18a44:	str	r1, [sp, #4]
   18a48:	ldr	r6, [r0]
   18a4c:	ldr	r0, [r7]
   18a50:	cmp	r0, #0
   18a54:	bmi	18af4 <__assert_fail@plt+0x77ac>
   18a58:	mov	r0, r5
   18a5c:	movw	r1, #1030	; 0x406
   18a60:	mov	r2, r6
   18a64:	bl	112ac <fcntl64@plt>
   18a68:	mov	r4, r0
   18a6c:	cmn	r0, #1
   18a70:	bgt	18ae8 <__assert_fail@plt+0x77a0>
   18a74:	bl	11240 <__errno_location@plt>
   18a78:	ldr	r0, [r0]
   18a7c:	cmp	r0, #22
   18a80:	bne	18ae8 <__assert_fail@plt+0x77a0>
   18a84:	mov	r0, r5
   18a88:	mov	r1, #0
   18a8c:	mov	r2, r6
   18a90:	bl	112ac <fcntl64@plt>
   18a94:	mov	r4, r0
   18a98:	cmp	r0, #0
   18a9c:	bmi	18ad4 <__assert_fail@plt+0x778c>
   18aa0:	mvn	r0, #0
   18aa4:	str	r0, [r7]
   18aa8:	mov	r0, #1
   18aac:	cmp	r0, #0
   18ab0:	bne	18b20 <__assert_fail@plt+0x77d8>
   18ab4:	b	18ad4 <__assert_fail@plt+0x778c>
   18ab8:	ldr	r0, [sp, #4]
   18abc:	add	r2, r0, #4
   18ac0:	str	r2, [sp, #4]
   18ac4:	ldr	r2, [r0]
   18ac8:	mov	r0, r5
   18acc:	bl	112ac <fcntl64@plt>
   18ad0:	mov	r4, r0
   18ad4:	mov	r0, r4
   18ad8:	sub	sp, fp, #16
   18adc:	pop	{r4, r5, r6, r7, fp, lr}
   18ae0:	add	sp, sp, #8
   18ae4:	bx	lr
   18ae8:	mov	r0, #1
   18aec:	str	r0, [r7]
   18af0:	b	18ad4 <__assert_fail@plt+0x778c>
   18af4:	mov	r0, r5
   18af8:	mov	r1, #0
   18afc:	mov	r2, r6
   18b00:	bl	112ac <fcntl64@plt>
   18b04:	mov	r4, r0
   18b08:	ldr	r0, [r7]
   18b0c:	add	r0, r0, #1
   18b10:	clz	r0, r0
   18b14:	lsr	r0, r0, #5
   18b18:	cmp	r0, #0
   18b1c:	beq	18ad4 <__assert_fail@plt+0x778c>
   18b20:	cmp	r4, #0
   18b24:	bmi	18ad4 <__assert_fail@plt+0x778c>
   18b28:	mov	r0, r4
   18b2c:	mov	r1, #1
   18b30:	bl	112ac <fcntl64@plt>
   18b34:	cmp	r0, #0
   18b38:	bmi	18b54 <__assert_fail@plt+0x780c>
   18b3c:	orr	r2, r0, #1
   18b40:	mov	r0, r4
   18b44:	mov	r1, #2
   18b48:	bl	112ac <fcntl64@plt>
   18b4c:	cmn	r0, #1
   18b50:	bne	18ad4 <__assert_fail@plt+0x778c>
   18b54:	bl	11240 <__errno_location@plt>
   18b58:	ldr	r6, [r0]
   18b5c:	mov	r5, r0
   18b60:	mov	r0, r4
   18b64:	bl	11330 <close@plt>
   18b68:	str	r6, [r5]
   18b6c:	mvn	r4, #0
   18b70:	b	18ad4 <__assert_fail@plt+0x778c>
   18b74:	push	{fp, lr}
   18b78:	mov	fp, sp
   18b7c:	mov	r0, #14
   18b80:	bl	112e8 <nl_langinfo@plt>
   18b84:	movw	r1, #39914	; 0x9bea
   18b88:	cmp	r0, #0
   18b8c:	movt	r1, #1
   18b90:	movne	r1, r0
   18b94:	movw	r0, #41636	; 0xa2a4
   18b98:	ldrb	r2, [r1]
   18b9c:	movt	r0, #1
   18ba0:	cmp	r2, #0
   18ba4:	movne	r0, r1
   18ba8:	pop	{fp, pc}
   18bac:	push	{r4, r5, r6, r7, fp, lr}
   18bb0:	add	fp, sp, #16
   18bb4:	sub	sp, sp, #8
   18bb8:	cmp	r0, #0
   18bbc:	add	r5, sp, #4
   18bc0:	mov	r7, r2
   18bc4:	mov	r4, r1
   18bc8:	movne	r5, r0
   18bcc:	mov	r0, r5
   18bd0:	bl	1118c <mbrtowc@plt>
   18bd4:	mov	r6, r0
   18bd8:	cmp	r7, #0
   18bdc:	beq	18c04 <__assert_fail@plt+0x78bc>
   18be0:	cmn	r6, #2
   18be4:	bcc	18c04 <__assert_fail@plt+0x78bc>
   18be8:	mov	r0, #0
   18bec:	bl	1417c <__assert_fail@plt+0x2e34>
   18bf0:	cmp	r0, #0
   18bf4:	bne	18c04 <__assert_fail@plt+0x78bc>
   18bf8:	ldrb	r0, [r4]
   18bfc:	mov	r6, #1
   18c00:	str	r0, [r5]
   18c04:	mov	r0, r6
   18c08:	sub	sp, fp, #16
   18c0c:	pop	{r4, r5, r6, r7, fp, pc}
   18c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c14:	add	fp, sp, #28
   18c18:	sub	sp, sp, #28
   18c1c:	mov	r4, r3
   18c20:	mov	r6, r2
   18c24:	mov	r5, r1
   18c28:	mov	r7, r0
   18c2c:	cmp	r1, r3
   18c30:	bne	18c4c <__assert_fail@plt+0x7904>
   18c34:	mov	r0, r7
   18c38:	mov	r1, r6
   18c3c:	mov	r2, r5
   18c40:	bl	11210 <bcmp@plt>
   18c44:	cmp	r0, #0
   18c48:	beq	18d14 <__assert_fail@plt+0x79cc>
   18c4c:	ldrb	r0, [r6, r4]
   18c50:	mov	r9, #0
   18c54:	str	r4, [sp, #24]
   18c58:	add	r8, r4, #1
   18c5c:	str	r5, [sp, #16]
   18c60:	add	sl, r5, #1
   18c64:	str	r0, [sp, #8]
   18c68:	ldrb	r0, [r7, r5]
   18c6c:	strb	r9, [r7, r5]
   18c70:	strb	r9, [r6, r4]
   18c74:	str	r0, [sp, #4]
   18c78:	bl	11240 <__errno_location@plt>
   18c7c:	mov	r4, r7
   18c80:	mov	r5, r0
   18c84:	mov	r7, r6
   18c88:	str	r6, [sp, #20]
   18c8c:	str	r4, [sp, #12]
   18c90:	mov	r0, r4
   18c94:	mov	r1, r7
   18c98:	str	r9, [r5]
   18c9c:	bl	111a4 <strcoll@plt>
   18ca0:	cmp	r0, #0
   18ca4:	bne	18cf4 <__assert_fail@plt+0x79ac>
   18ca8:	mov	r0, r4
   18cac:	bl	11228 <strlen@plt>
   18cb0:	add	r6, r0, #1
   18cb4:	mov	r0, r7
   18cb8:	sub	sl, sl, r6
   18cbc:	bl	11228 <strlen@plt>
   18cc0:	add	r0, r0, #1
   18cc4:	cmp	sl, #0
   18cc8:	sub	r8, r8, r0
   18ccc:	beq	18ce8 <__assert_fail@plt+0x79a0>
   18cd0:	add	r4, r4, r6
   18cd4:	add	r7, r7, r0
   18cd8:	cmp	r8, #0
   18cdc:	bne	18c90 <__assert_fail@plt+0x7948>
   18ce0:	mov	r0, #1
   18ce4:	b	18cf4 <__assert_fail@plt+0x79ac>
   18ce8:	cmp	r8, #0
   18cec:	mvnne	r8, #0
   18cf0:	mov	r0, r8
   18cf4:	ldr	r1, [sp, #24]
   18cf8:	ldr	r2, [sp, #20]
   18cfc:	ldr	r3, [sp, #16]
   18d00:	ldmib	sp, {r5, r6, r7}
   18d04:	strb	r5, [r7, r3]
   18d08:	strb	r6, [r2, r1]
   18d0c:	sub	sp, fp, #28
   18d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d14:	bl	11240 <__errno_location@plt>
   18d18:	mov	r1, r0
   18d1c:	mov	r0, #0
   18d20:	str	r0, [r1]
   18d24:	sub	sp, fp, #28
   18d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d30:	add	fp, sp, #28
   18d34:	sub	sp, sp, #4
   18d38:	mov	sl, r3
   18d3c:	mov	r5, r2
   18d40:	mov	r6, r1
   18d44:	mov	r7, r0
   18d48:	cmp	r1, r3
   18d4c:	bne	18d68 <__assert_fail@plt+0x7a20>
   18d50:	mov	r0, r7
   18d54:	mov	r1, r5
   18d58:	mov	r2, r6
   18d5c:	bl	11210 <bcmp@plt>
   18d60:	cmp	r0, #0
   18d64:	beq	18de4 <__assert_fail@plt+0x7a9c>
   18d68:	bl	11240 <__errno_location@plt>
   18d6c:	mov	r8, r0
   18d70:	mov	r9, #0
   18d74:	mov	r0, r7
   18d78:	mov	r1, r5
   18d7c:	str	r9, [r8]
   18d80:	bl	111a4 <strcoll@plt>
   18d84:	cmp	r0, #0
   18d88:	bne	18dc8 <__assert_fail@plt+0x7a80>
   18d8c:	mov	r0, r7
   18d90:	bl	11228 <strlen@plt>
   18d94:	add	r4, r0, #1
   18d98:	mov	r0, r5
   18d9c:	sub	r6, r6, r4
   18da0:	bl	11228 <strlen@plt>
   18da4:	add	r0, r0, #1
   18da8:	cmp	r6, #0
   18dac:	sub	sl, sl, r0
   18db0:	beq	18dd0 <__assert_fail@plt+0x7a88>
   18db4:	add	r7, r7, r4
   18db8:	add	r5, r5, r0
   18dbc:	cmp	sl, #0
   18dc0:	bne	18d74 <__assert_fail@plt+0x7a2c>
   18dc4:	mov	r0, #1
   18dc8:	sub	sp, fp, #28
   18dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd0:	cmp	sl, #0
   18dd4:	mvnne	sl, #0
   18dd8:	mov	r0, sl
   18ddc:	sub	sp, fp, #28
   18de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18de4:	bl	11240 <__errno_location@plt>
   18de8:	mov	r1, r0
   18dec:	mov	r0, #0
   18df0:	str	r0, [r1]
   18df4:	sub	sp, fp, #28
   18df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dfc:	cmp	r2, #0
   18e00:	beq	18e30 <__assert_fail@plt+0x7ae8>
   18e04:	mvn	r3, #0
   18e08:	udiv	r3, r3, r2
   18e0c:	cmp	r3, r1
   18e10:	bcs	18e30 <__assert_fail@plt+0x7ae8>
   18e14:	push	{fp, lr}
   18e18:	mov	fp, sp
   18e1c:	bl	11240 <__errno_location@plt>
   18e20:	mov	r1, #12
   18e24:	str	r1, [r0]
   18e28:	mov	r0, #0
   18e2c:	pop	{fp, pc}
   18e30:	mul	r1, r2, r1
   18e34:	b	188bc <__assert_fail@plt+0x7574>
   18e38:	cmp	r3, #0
   18e3c:	cmpeq	r2, #0
   18e40:	bne	18e58 <__assert_fail@plt+0x7b10>
   18e44:	cmp	r1, #0
   18e48:	cmpeq	r0, #0
   18e4c:	mvnne	r1, #0
   18e50:	mvnne	r0, #0
   18e54:	b	18e74 <__assert_fail@plt+0x7b2c>
   18e58:	sub	sp, sp, #8
   18e5c:	push	{sp, lr}
   18e60:	bl	18e84 <__assert_fail@plt+0x7b3c>
   18e64:	ldr	lr, [sp, #4]
   18e68:	add	sp, sp, #8
   18e6c:	pop	{r2, r3}
   18e70:	bx	lr
   18e74:	push	{r1, lr}
   18e78:	mov	r0, #8
   18e7c:	bl	110a8 <raise@plt>
   18e80:	pop	{r1, pc}
   18e84:	cmp	r1, r3
   18e88:	cmpeq	r0, r2
   18e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e90:	mov	r4, r0
   18e94:	movcc	r0, #0
   18e98:	mov	r5, r1
   18e9c:	ldr	lr, [sp, #36]	; 0x24
   18ea0:	movcc	r1, r0
   18ea4:	bcc	18fa0 <__assert_fail@plt+0x7c58>
   18ea8:	cmp	r3, #0
   18eac:	clzeq	ip, r2
   18eb0:	clzne	ip, r3
   18eb4:	addeq	ip, ip, #32
   18eb8:	cmp	r5, #0
   18ebc:	clzeq	r1, r4
   18ec0:	addeq	r1, r1, #32
   18ec4:	clzne	r1, r5
   18ec8:	sub	ip, ip, r1
   18ecc:	sub	sl, ip, #32
   18ed0:	lsl	r9, r3, ip
   18ed4:	rsb	fp, ip, #32
   18ed8:	orr	r9, r9, r2, lsl sl
   18edc:	orr	r9, r9, r2, lsr fp
   18ee0:	lsl	r8, r2, ip
   18ee4:	cmp	r5, r9
   18ee8:	cmpeq	r4, r8
   18eec:	movcc	r0, #0
   18ef0:	movcc	r1, r0
   18ef4:	bcc	18f10 <__assert_fail@plt+0x7bc8>
   18ef8:	mov	r0, #1
   18efc:	subs	r4, r4, r8
   18f00:	lsl	r1, r0, sl
   18f04:	orr	r1, r1, r0, lsr fp
   18f08:	lsl	r0, r0, ip
   18f0c:	sbc	r5, r5, r9
   18f10:	cmp	ip, #0
   18f14:	beq	18fa0 <__assert_fail@plt+0x7c58>
   18f18:	lsr	r6, r8, #1
   18f1c:	orr	r6, r6, r9, lsl #31
   18f20:	lsr	r7, r9, #1
   18f24:	mov	r2, ip
   18f28:	b	18f4c <__assert_fail@plt+0x7c04>
   18f2c:	subs	r3, r4, r6
   18f30:	sbc	r8, r5, r7
   18f34:	adds	r3, r3, r3
   18f38:	adc	r8, r8, r8
   18f3c:	adds	r4, r3, #1
   18f40:	adc	r5, r8, #0
   18f44:	subs	r2, r2, #1
   18f48:	beq	18f68 <__assert_fail@plt+0x7c20>
   18f4c:	cmp	r5, r7
   18f50:	cmpeq	r4, r6
   18f54:	bcs	18f2c <__assert_fail@plt+0x7be4>
   18f58:	adds	r4, r4, r4
   18f5c:	adc	r5, r5, r5
   18f60:	subs	r2, r2, #1
   18f64:	bne	18f4c <__assert_fail@plt+0x7c04>
   18f68:	lsr	r3, r4, ip
   18f6c:	orr	r3, r3, r5, lsl fp
   18f70:	lsr	r2, r5, ip
   18f74:	orr	r3, r3, r5, lsr sl
   18f78:	adds	r0, r0, r4
   18f7c:	mov	r4, r3
   18f80:	lsl	r3, r2, ip
   18f84:	orr	r3, r3, r4, lsl sl
   18f88:	lsl	ip, r4, ip
   18f8c:	orr	r3, r3, r4, lsr fp
   18f90:	adc	r1, r1, r5
   18f94:	subs	r0, r0, ip
   18f98:	mov	r5, r2
   18f9c:	sbc	r1, r1, r3
   18fa0:	cmp	lr, #0
   18fa4:	strdne	r4, [lr]
   18fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18fb0:	mov	r7, r0
   18fb4:	ldr	r6, [pc, #72]	; 19004 <__assert_fail@plt+0x7cbc>
   18fb8:	ldr	r5, [pc, #72]	; 19008 <__assert_fail@plt+0x7cc0>
   18fbc:	add	r6, pc, r6
   18fc0:	add	r5, pc, r5
   18fc4:	sub	r6, r6, r5
   18fc8:	mov	r8, r1
   18fcc:	mov	r9, r2
   18fd0:	bl	11064 <fdopen@plt-0x20>
   18fd4:	asrs	r6, r6, #2
   18fd8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fdc:	mov	r4, #0
   18fe0:	add	r4, r4, #1
   18fe4:	ldr	r3, [r5], #4
   18fe8:	mov	r2, r9
   18fec:	mov	r1, r8
   18ff0:	mov	r0, r7
   18ff4:	blx	r3
   18ff8:	cmp	r6, r4
   18ffc:	bne	18fe0 <__assert_fail@plt+0x7c98>
   19000:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19004:	andeq	r1, r1, r8, asr #30
   19008:	andeq	r1, r1, r0, asr #30
   1900c:	bx	lr
   19010:	ldr	r3, [pc, #12]	; 19024 <__assert_fail@plt+0x7cdc>
   19014:	mov	r1, #0
   19018:	add	r3, pc, r3
   1901c:	ldr	r2, [r3]
   19020:	b	1124c <__cxa_atexit@plt>
   19024:	andeq	r2, r1, r4, ror #1

Disassembly of section .fini:

00019028 <.fini>:
   19028:	push	{r3, lr}
   1902c:	pop	{r3, pc}
