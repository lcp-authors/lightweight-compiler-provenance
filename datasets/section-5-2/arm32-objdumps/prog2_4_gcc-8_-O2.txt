
../repos/prog2/4:     file format elf32-littlearm


Disassembly of section .init:

00010958 <.init>:
   10958:	push	{r3, lr}
   1095c:	bl	10b18 <_start@@Base+0x3c>
   10960:	pop	{r3, pc}

Disassembly of section .plt:

00010964 <strcmp@plt-0x14>:
   10964:	push	{lr}		; (str lr, [sp, #-4]!)
   10968:	ldr	lr, [pc, #4]	; 10974 <strcmp@plt-0x4>
   1096c:	add	lr, pc, lr
   10970:	ldr	pc, [lr, #8]!
   10974:	andeq	r2, r1, ip, lsl #13

00010978 <strcmp@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #73728	; 0x12000
   10980:	ldr	pc, [ip, #1676]!	; 0x68c

00010984 <printf@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #73728	; 0x12000
   1098c:	ldr	pc, [ip, #1668]!	; 0x684

00010990 <free@plt>:
   10990:	add	ip, pc, #0, 12
   10994:	add	ip, ip, #73728	; 0x12000
   10998:	ldr	pc, [ip, #1660]!	; 0x67c

0001099c <memcpy@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #73728	; 0x12000
   109a4:	ldr	pc, [ip, #1652]!	; 0x674

000109a8 <strdup@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #73728	; 0x12000
   109b0:	ldr	pc, [ip, #1644]!	; 0x66c

000109b4 <strcpy@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #73728	; 0x12000
   109bc:	ldr	pc, [ip, #1636]!	; 0x664

000109c0 <puts@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #73728	; 0x12000
   109c8:	ldr	pc, [ip, #1628]!	; 0x65c

000109cc <malloc@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #73728	; 0x12000
   109d4:	ldr	pc, [ip, #1620]!	; 0x654

000109d8 <__libc_start_main@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #73728	; 0x12000
   109e0:	ldr	pc, [ip, #1612]!	; 0x64c

000109e4 <__gmon_start__@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #73728	; 0x12000
   109ec:	ldr	pc, [ip, #1604]!	; 0x644

000109f0 <strlen@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #73728	; 0x12000
   109f8:	ldr	pc, [ip, #1596]!	; 0x63c

000109fc <setvbuf@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #73728	; 0x12000
   10a04:	ldr	pc, [ip, #1588]!	; 0x634

00010a08 <putchar@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #73728	; 0x12000
   10a10:	ldr	pc, [ip, #1580]!	; 0x62c

00010a14 <abort@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #73728	; 0x12000
   10a1c:	ldr	pc, [ip, #1572]!	; 0x624

Disassembly of section .text:

00010a20 <main@@Base>:
   10a20:	str	r4, [sp, #-8]!
   10a24:	mov	r3, #0
   10a28:	mov	r2, #2
   10a2c:	ldr	r4, [pc, #148]	; 10ac8 <main@@Base+0xa8>
   10a30:	mov	r1, r3
   10a34:	str	lr, [sp, #4]
   10a38:	ldr	r0, [pc, #140]	; 10acc <main@@Base+0xac>
   10a3c:	add	r4, pc, r4
   10a40:	ldr	r0, [r4, r0]
   10a44:	ldr	r0, [r0]
   10a48:	bl	109fc <setvbuf@plt>
   10a4c:	ldr	r0, [pc, #124]	; 10ad0 <main@@Base+0xb0>
   10a50:	mov	r3, #0
   10a54:	mov	r2, #2
   10a58:	mov	r1, r3
   10a5c:	ldr	r0, [r4, r0]
   10a60:	ldr	r0, [r0]
   10a64:	bl	109fc <setvbuf@plt>
   10a68:	bl	10d0c <teste_lista_nova@@Base>
   10a6c:	mov	r4, r0
   10a70:	bl	10db0 <teste_lista_insere@@Base>
   10a74:	add	r4, r4, r0
   10a78:	bl	11178 <teste_lista_remove@@Base>
   10a7c:	add	r4, r4, r0
   10a80:	bl	11364 <teste_lista_pesquisa@@Base>
   10a84:	add	r4, r4, r0
   10a88:	bl	1152c <teste_lista_ordena@@Base>
   10a8c:	add	r4, r4, r0
   10a90:	bl	11780 <teste_lista_inverte@@Base>
   10a94:	adds	r1, r4, r0
   10a98:	bne	10ab8 <main@@Base+0x98>
   10a9c:	ldr	r0, [pc, #48]	; 10ad4 <main@@Base+0xb4>
   10aa0:	add	r0, pc, r0
   10aa4:	bl	109c0 <puts@plt>
   10aa8:	ldr	r4, [sp]
   10aac:	add	sp, sp, #4
   10ab0:	mov	r0, #0
   10ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   10ab8:	ldr	r0, [pc, #24]	; 10ad8 <main@@Base+0xb8>
   10abc:	add	r0, pc, r0
   10ac0:	bl	10984 <printf@plt>
   10ac4:	b	10aa8 <main@@Base+0x88>
   10ac8:			; <UNDEFINED> instruction: 0x000125bc
   10acc:	andeq	r0, r0, ip, asr #32
   10ad0:	andeq	r0, r0, r4, asr #32
   10ad4:	strdeq	r1, [r0], -ip
   10ad8:	strdeq	r1, [r0], -r8

00010adc <_start@@Base>:
   10adc:	mov	fp, #0
   10ae0:	mov	lr, #0
   10ae4:	pop	{r1}		; (ldr r1, [sp], #4)
   10ae8:	mov	r2, sp
   10aec:	push	{r2}		; (str r2, [sp, #-4]!)
   10af0:	push	{r0}		; (str r0, [sp, #-4]!)
   10af4:	ldr	ip, [pc, #16]	; 10b0c <_start@@Base+0x30>
   10af8:	push	{ip}		; (str ip, [sp, #-4]!)
   10afc:	ldr	r0, [pc, #12]	; 10b10 <_start@@Base+0x34>
   10b00:	ldr	r3, [pc, #12]	; 10b14 <_start@@Base+0x38>
   10b04:	bl	109d8 <__libc_start_main@plt>
   10b08:	bl	10a14 <abort@plt>
   10b0c:	muleq	r1, r4, lr
   10b10:	andeq	r0, r1, r0, lsr #20
   10b14:	andeq	r1, r1, r4, lsr lr
   10b18:	ldr	r3, [pc, #20]	; 10b34 <_start@@Base+0x58>
   10b1c:	ldr	r2, [pc, #20]	; 10b38 <_start@@Base+0x5c>
   10b20:	add	r3, pc, r3
   10b24:	ldr	r2, [r3, r2]
   10b28:	cmp	r2, #0
   10b2c:	bxeq	lr
   10b30:	b	109e4 <__gmon_start__@plt>
   10b34:	ldrdeq	r2, [r1], -r8
   10b38:	andeq	r0, r0, r8, asr #32
   10b3c:	ldr	r0, [pc, #24]	; 10b5c <_start@@Base+0x80>
   10b40:	ldr	r3, [pc, #24]	; 10b60 <_start@@Base+0x84>
   10b44:	cmp	r3, r0
   10b48:	bxeq	lr
   10b4c:	ldr	r3, [pc, #16]	; 10b64 <_start@@Base+0x88>
   10b50:	cmp	r3, #0
   10b54:	bxeq	lr
   10b58:	bx	r3
   10b5c:	andeq	r3, r2, r8, asr r0
   10b60:	andeq	r3, r2, r8, asr r0
   10b64:	andeq	r0, r0, r0
   10b68:	ldr	r0, [pc, #36]	; 10b94 <_start@@Base+0xb8>
   10b6c:	ldr	r1, [pc, #36]	; 10b98 <_start@@Base+0xbc>
   10b70:	sub	r1, r1, r0
   10b74:	asr	r1, r1, #2
   10b78:	add	r1, r1, r1, lsr #31
   10b7c:	asrs	r1, r1, #1
   10b80:	bxeq	lr
   10b84:	ldr	r3, [pc, #16]	; 10b9c <_start@@Base+0xc0>
   10b88:	cmp	r3, #0
   10b8c:	bxeq	lr
   10b90:	bx	r3
   10b94:	andeq	r3, r2, r8, asr r0
   10b98:	andeq	r3, r2, r8, asr r0
   10b9c:	andeq	r0, r0, r0
   10ba0:	push	{r4, lr}
   10ba4:	ldr	r4, [pc, #24]	; 10bc4 <_start@@Base+0xe8>
   10ba8:	ldrb	r3, [r4]
   10bac:	cmp	r3, #0
   10bb0:	popne	{r4, pc}
   10bb4:	bl	10b3c <_start@@Base+0x60>
   10bb8:	mov	r3, #1
   10bbc:	strb	r3, [r4]
   10bc0:	pop	{r4, pc}
   10bc4:	andeq	r3, r2, r8, asr r0
   10bc8:	b	10b68 <_start@@Base+0x8c>

00010bcc <_l@@Base>:
   10bcc:	push	{r0, r1, r2, r3}
   10bd0:	mov	r0, #12
   10bd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10bd8:	mov	r4, #0
   10bdc:	strd	r6, [sp, #8]
   10be0:	str	r8, [sp, #16]
   10be4:	str	lr, [sp, #20]
   10be8:	sub	sp, sp, #8
   10bec:	ldr	r7, [sp, #32]
   10bf0:	bl	109cc <malloc@plt>
   10bf4:	add	r3, sp, #36	; 0x24
   10bf8:	mov	r8, r0
   10bfc:	str	r4, [r0]
   10c00:	str	r3, [sp, #4]
   10c04:	cmp	r7, r4
   10c08:	stmib	r0, {r4, r7}
   10c0c:	bgt	10c4c <_l@@Base+0x80>
   10c10:	b	10c7c <_l@@Base+0xb0>
   10c14:	bl	109cc <malloc@plt>
   10c18:	str	r0, [r5, #4]
   10c1c:	str	r5, [r0, #8]
   10c20:	mov	r5, r0
   10c24:	mov	r0, r6
   10c28:	add	r4, r4, #1
   10c2c:	bl	109f0 <strlen@plt>
   10c30:	add	r0, r0, #1
   10c34:	bl	109cc <malloc@plt>
   10c38:	mov	r1, r6
   10c3c:	str	r0, [r5]
   10c40:	bl	109b4 <strcpy@plt>
   10c44:	cmp	r7, r4
   10c48:	beq	10c7c <_l@@Base+0xb0>
   10c4c:	ldr	r3, [sp, #4]
   10c50:	cmp	r4, #0
   10c54:	mov	r0, #12
   10c58:	add	r2, r3, #4
   10c5c:	ldr	r6, [r3]
   10c60:	str	r2, [sp, #4]
   10c64:	bne	10c14 <_l@@Base+0x48>
   10c68:	bl	109cc <malloc@plt>
   10c6c:	mov	r5, r0
   10c70:	str	r0, [r8]
   10c74:	str	r4, [r0, #8]
   10c78:	b	10c24 <_l@@Base+0x58>
   10c7c:	mov	r3, #0
   10c80:	mov	r0, r8
   10c84:	str	r5, [r8, #4]
   10c88:	str	r3, [r5, #4]
   10c8c:	add	sp, sp, #8
   10c90:	ldrd	r4, [sp]
   10c94:	ldrd	r6, [sp, #8]
   10c98:	ldr	r8, [sp, #16]
   10c9c:	ldr	lr, [sp, #20]
   10ca0:	add	sp, sp, #24
   10ca4:	add	sp, sp, #16
   10ca8:	bx	lr

00010cac <_f@@Base>:
   10cac:	cmp	r0, #0
   10cb0:	beq	10cfc <_f@@Base+0x50>
   10cb4:	ldr	r2, [r0]
   10cb8:	cmp	r1, #0
   10cbc:	movle	r3, #0
   10cc0:	movgt	r3, #1
   10cc4:	cmp	r2, #0
   10cc8:	moveq	r3, #0
   10ccc:	cmp	r3, #0
   10cd0:	beq	10cec <_f@@Base+0x40>
   10cd4:	mov	r3, #0
   10cd8:	ldr	r2, [r2, #4]
   10cdc:	add	r3, r3, #1
   10ce0:	cmp	r2, #0
   10ce4:	cmpne	r1, r3
   10ce8:	bgt	10cd8 <_f@@Base+0x2c>
   10cec:	cmp	r1, r3
   10cf0:	beq	10d00 <_f@@Base+0x54>
   10cf4:	ldr	r0, [pc, #12]	; 10d08 <_f@@Base+0x5c>
   10cf8:	add	r0, pc, r0
   10cfc:	bx	lr
   10d00:	ldr	r0, [r2]
   10d04:	bx	lr
   10d08:	andeq	r1, r0, r0, ror r5

00010d0c <teste_lista_nova@@Base>:
   10d0c:	ldr	r0, [pc, #140]	; 10da0 <teste_lista_nova@@Base+0x94>
   10d10:	strd	r4, [sp, #-16]!
   10d14:	str	r6, [sp, #8]
   10d18:	str	lr, [sp, #12]
   10d1c:	add	r0, pc, r0
   10d20:	bl	10984 <printf@plt>
   10d24:	bl	119f4 <lista_nova@@Base>
   10d28:	subs	r5, r0, #0
   10d2c:	beq	10d84 <teste_lista_nova@@Base+0x78>
   10d30:	ldr	r4, [r5, #8]
   10d34:	cmp	r4, #0
   10d38:	bne	10d60 <teste_lista_nova@@Base+0x54>
   10d3c:	bl	11a2c <lista_apaga@@Base>
   10d40:	ldr	r0, [pc, #92]	; 10da4 <teste_lista_nova@@Base+0x98>
   10d44:	add	r0, pc, r0
   10d48:	bl	109c0 <puts@plt>
   10d4c:	mov	r0, r4
   10d50:	ldrd	r4, [sp]
   10d54:	ldr	r6, [sp, #8]
   10d58:	add	sp, sp, #12
   10d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   10d60:	ldr	r0, [pc, #64]	; 10da8 <teste_lista_nova@@Base+0x9c>
   10d64:	mov	r4, #1
   10d68:	add	r0, pc, r0
   10d6c:	bl	10984 <printf@plt>
   10d70:	mov	r0, r5
   10d74:	bl	11a2c <lista_apaga@@Base>
   10d78:	mov	r0, #10
   10d7c:	bl	10a08 <putchar@plt>
   10d80:	b	10d4c <teste_lista_nova@@Base+0x40>
   10d84:	ldr	r0, [pc, #32]	; 10dac <teste_lista_nova@@Base+0xa0>
   10d88:	mov	r4, #1
   10d8c:	add	r0, pc, r0
   10d90:	bl	10984 <printf@plt>
   10d94:	mov	r0, #10
   10d98:	bl	10a08 <putchar@plt>
   10d9c:	b	10d4c <teste_lista_nova@@Base+0x40>
   10da0:	andeq	r1, r0, r0, lsl #3
   10da4:	andeq	r1, r0, r0, lsl #3
   10da8:	andeq	r1, r0, r0, ror #2
   10dac:	andeq	r1, r0, r0, lsr #2

00010db0 <teste_lista_insere@@Base>:
   10db0:	ldr	r2, [pc, #872]	; 11120 <teste_lista_insere@@Base+0x370>
   10db4:	mov	r0, #2
   10db8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10dbc:	strd	r6, [sp, #8]
   10dc0:	str	r8, [sp, #16]
   10dc4:	str	lr, [sp, #20]
   10dc8:	add	r2, pc, r2
   10dcc:	mov	r1, r2
   10dd0:	bl	10bcc <_l@@Base>
   10dd4:	mov	r4, r0
   10dd8:	ldr	r0, [pc, #836]	; 11124 <teste_lista_insere@@Base+0x374>
   10ddc:	add	r0, pc, r0
   10de0:	bl	10984 <printf@plt>
   10de4:	ldr	r1, [pc, #828]	; 11128 <teste_lista_insere@@Base+0x378>
   10de8:	mov	r0, r4
   10dec:	ldr	r3, [r4]
   10df0:	add	r1, pc, r1
   10df4:	ldr	r2, [r3, #4]
   10df8:	bl	11ac8 <lista_insere@@Base>
   10dfc:	cmp	r0, #0
   10e00:	beq	11070 <teste_lista_insere@@Base+0x2c0>
   10e04:	ldr	r3, [r4, #8]
   10e08:	cmp	r3, #3
   10e0c:	moveq	r5, #0
   10e10:	bne	10edc <teste_lista_insere@@Base+0x12c>
   10e14:	ldr	r7, [pc, #784]	; 1112c <teste_lista_insere@@Base+0x37c>
   10e18:	ldr	r6, [r4]
   10e1c:	add	r7, pc, r7
   10e20:	mov	r1, r7
   10e24:	ldr	r0, [r6]
   10e28:	bl	10978 <strcmp@plt>
   10e2c:	cmp	r0, #0
   10e30:	bne	10e50 <teste_lista_insere@@Base+0xa0>
   10e34:	ldr	r1, [pc, #756]	; 11130 <teste_lista_insere@@Base+0x380>
   10e38:	ldr	r8, [r6, #4]
   10e3c:	add	r1, pc, r1
   10e40:	ldr	r0, [r8]
   10e44:	bl	10978 <strcmp@plt>
   10e48:	cmp	r0, #0
   10e4c:	beq	11034 <teste_lista_insere@@Base+0x284>
   10e50:	ldr	r0, [pc, #732]	; 11134 <teste_lista_insere@@Base+0x384>
   10e54:	add	r5, r5, #1
   10e58:	add	r0, pc, r0
   10e5c:	bl	10984 <printf@plt>
   10e60:	ldr	r6, [r4]
   10e64:	mov	r2, r6
   10e68:	mov	r0, r4
   10e6c:	ldr	r1, [pc, #708]	; 11138 <teste_lista_insere@@Base+0x388>
   10e70:	add	r1, pc, r1
   10e74:	bl	11ac8 <lista_insere@@Base>
   10e78:	ldr	r3, [r4]
   10e7c:	cmp	r3, r0
   10e80:	beq	10e94 <teste_lista_insere@@Base+0xe4>
   10e84:	ldr	r0, [pc, #688]	; 1113c <teste_lista_insere@@Base+0x38c>
   10e88:	add	r5, r5, #1
   10e8c:	add	r0, pc, r0
   10e90:	bl	10984 <printf@plt>
   10e94:	ldr	r3, [r4, #8]
   10e98:	cmp	r3, #4
   10e9c:	beq	10efc <teste_lista_insere@@Base+0x14c>
   10ea0:	ldr	r0, [pc, #664]	; 11140 <teste_lista_insere@@Base+0x390>
   10ea4:	add	r5, r5, #1
   10ea8:	add	r0, pc, r0
   10eac:	bl	10984 <printf@plt>
   10eb0:	ldr	r3, [r4, #8]
   10eb4:	cmp	r3, #4
   10eb8:	beq	10efc <teste_lista_insere@@Base+0x14c>
   10ebc:	mov	r0, #10
   10ec0:	bl	10a08 <putchar@plt>
   10ec4:	mov	r0, r5
   10ec8:	ldrd	r4, [sp]
   10ecc:	ldrd	r6, [sp, #8]
   10ed0:	ldr	r8, [sp, #16]
   10ed4:	add	sp, sp, #20
   10ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   10edc:	mov	r5, #1
   10ee0:	ldr	r0, [pc, #604]	; 11144 <teste_lista_insere@@Base+0x394>
   10ee4:	add	r0, pc, r0
   10ee8:	bl	10984 <printf@plt>
   10eec:	ldr	r3, [r4, #8]
   10ef0:	cmp	r3, #3
   10ef4:	beq	10e14 <teste_lista_insere@@Base+0x64>
   10ef8:	b	10ebc <teste_lista_insere@@Base+0x10c>
   10efc:	ldr	r7, [pc, #580]	; 11148 <teste_lista_insere@@Base+0x398>
   10f00:	ldr	r6, [r4]
   10f04:	add	r7, pc, r7
   10f08:	mov	r1, r7
   10f0c:	ldr	r0, [r6]
   10f10:	bl	10978 <strcmp@plt>
   10f14:	cmp	r0, #0
   10f18:	bne	10f54 <teste_lista_insere@@Base+0x1a4>
   10f1c:	ldr	r8, [pc, #552]	; 1114c <teste_lista_insere@@Base+0x39c>
   10f20:	ldr	r6, [r6, #4]
   10f24:	add	r8, pc, r8
   10f28:	mov	r1, r8
   10f2c:	ldr	r0, [r6]
   10f30:	bl	10978 <strcmp@plt>
   10f34:	cmp	r0, #0
   10f38:	bne	10f54 <teste_lista_insere@@Base+0x1a4>
   10f3c:	ldr	r6, [r6, #4]
   10f40:	mov	r1, r7
   10f44:	ldr	r0, [r6]
   10f48:	bl	10978 <strcmp@plt>
   10f4c:	cmp	r0, #0
   10f50:	beq	110e4 <teste_lista_insere@@Base+0x334>
   10f54:	ldr	r0, [pc, #500]	; 11150 <teste_lista_insere@@Base+0x3a0>
   10f58:	add	r5, r5, #1
   10f5c:	add	r0, pc, r0
   10f60:	bl	10984 <printf@plt>
   10f64:	ldr	r1, [pc, #488]	; 11154 <teste_lista_insere@@Base+0x3a4>
   10f68:	mov	r2, #0
   10f6c:	mov	r0, r4
   10f70:	add	r1, pc, r1
   10f74:	bl	11ac8 <lista_insere@@Base>
   10f78:	ldr	r3, [r4, #8]
   10f7c:	cmp	r3, #5
   10f80:	bne	11050 <teste_lista_insere@@Base+0x2a0>
   10f84:	ldr	r3, [r4]
   10f88:	ldr	r1, [pc, #456]	; 11158 <teste_lista_insere@@Base+0x3a8>
   10f8c:	ldr	r3, [r3, #4]
   10f90:	add	r1, pc, r1
   10f94:	ldr	r3, [r3, #4]
   10f98:	ldr	r3, [r3, #4]
   10f9c:	ldr	r3, [r3, #4]
   10fa0:	ldr	r0, [r3]
   10fa4:	bl	10978 <strcmp@plt>
   10fa8:	cmp	r0, #0
   10fac:	bne	11100 <teste_lista_insere@@Base+0x350>
   10fb0:	ldr	r6, [pc, #420]	; 1115c <teste_lista_insere@@Base+0x3ac>
   10fb4:	mov	r0, r4
   10fb8:	bl	11a2c <lista_apaga@@Base>
   10fbc:	bl	119f4 <lista_nova@@Base>
   10fc0:	mov	r4, r0
   10fc4:	mov	r2, #0
   10fc8:	add	r6, pc, r6
   10fcc:	mov	r1, r6
   10fd0:	bl	11ac8 <lista_insere@@Base>
   10fd4:	ldr	r3, [r4, #8]
   10fd8:	cmp	r3, #1
   10fdc:	beq	11098 <teste_lista_insere@@Base+0x2e8>
   10fe0:	ldr	r0, [pc, #376]	; 11160 <teste_lista_insere@@Base+0x3b0>
   10fe4:	add	r5, r5, #1
   10fe8:	add	r0, pc, r0
   10fec:	bl	10984 <printf@plt>
   10ff0:	mov	r0, r4
   10ff4:	bl	11a1c <lista_tamanho@@Base>
   10ff8:	cmp	r0, #1
   10ffc:	bne	10ebc <teste_lista_insere@@Base+0x10c>
   11000:	ldr	r3, [r4]
   11004:	mov	r1, r6
   11008:	ldr	r0, [r3]
   1100c:	bl	10978 <strcmp@plt>
   11010:	cmp	r0, #0
   11014:	beq	11114 <teste_lista_insere@@Base+0x364>
   11018:	ldr	r0, [pc, #324]	; 11164 <teste_lista_insere@@Base+0x3b4>
   1101c:	add	r5, r5, #1
   11020:	add	r0, pc, r0
   11024:	bl	10984 <printf@plt>
   11028:	mov	r0, r4
   1102c:	bl	11a2c <lista_apaga@@Base>
   11030:	b	10ebc <teste_lista_insere@@Base+0x10c>
   11034:	ldr	r3, [r8, #4]
   11038:	mov	r1, r7
   1103c:	ldr	r0, [r3]
   11040:	bl	10978 <strcmp@plt>
   11044:	cmp	r0, #0
   11048:	beq	10e64 <teste_lista_insere@@Base+0xb4>
   1104c:	b	10e50 <teste_lista_insere@@Base+0xa0>
   11050:	ldr	r0, [pc, #272]	; 11168 <teste_lista_insere@@Base+0x3b8>
   11054:	add	r5, r5, #1
   11058:	add	r0, pc, r0
   1105c:	bl	10984 <printf@plt>
   11060:	ldr	r3, [r4, #8]
   11064:	cmp	r3, #5
   11068:	bne	10ebc <teste_lista_insere@@Base+0x10c>
   1106c:	b	10f84 <teste_lista_insere@@Base+0x1d4>
   11070:	ldr	r0, [pc, #244]	; 1116c <teste_lista_insere@@Base+0x3bc>
   11074:	add	r0, pc, r0
   11078:	bl	10984 <printf@plt>
   1107c:	ldr	r3, [r4, #8]
   11080:	cmp	r3, #3
   11084:	bne	11090 <teste_lista_insere@@Base+0x2e0>
   11088:	mov	r5, #1
   1108c:	b	10e14 <teste_lista_insere@@Base+0x64>
   11090:	mov	r5, #2
   11094:	b	10ee0 <teste_lista_insere@@Base+0x130>
   11098:	mov	r0, r4
   1109c:	bl	11a1c <lista_tamanho@@Base>
   110a0:	cmp	r0, #1
   110a4:	bne	110c8 <teste_lista_insere@@Base+0x318>
   110a8:	ldr	r3, [r4]
   110ac:	mov	r1, r6
   110b0:	ldr	r0, [r3]
   110b4:	bl	10978 <strcmp@plt>
   110b8:	cmp	r0, #0
   110bc:	bne	11018 <teste_lista_insere@@Base+0x268>
   110c0:	mov	r0, r4
   110c4:	bl	11a2c <lista_apaga@@Base>
   110c8:	cmp	r5, #0
   110cc:	bne	10ebc <teste_lista_insere@@Base+0x10c>
   110d0:	ldr	r0, [pc, #152]	; 11170 <teste_lista_insere@@Base+0x3c0>
   110d4:	mov	r5, #0
   110d8:	add	r0, pc, r0
   110dc:	bl	109c0 <puts@plt>
   110e0:	b	10ec4 <teste_lista_insere@@Base+0x114>
   110e4:	ldr	r3, [r6, #4]
   110e8:	mov	r1, r8
   110ec:	ldr	r0, [r3]
   110f0:	bl	10978 <strcmp@plt>
   110f4:	cmp	r0, #0
   110f8:	beq	10f64 <teste_lista_insere@@Base+0x1b4>
   110fc:	b	10f54 <teste_lista_insere@@Base+0x1a4>
   11100:	ldr	r0, [pc, #108]	; 11174 <teste_lista_insere@@Base+0x3c4>
   11104:	add	r5, r5, #1
   11108:	add	r0, pc, r0
   1110c:	bl	10984 <printf@plt>
   11110:	b	10fb0 <teste_lista_insere@@Base+0x200>
   11114:	mov	r0, r4
   11118:	bl	11a2c <lista_apaga@@Base>
   1111c:	b	10ebc <teste_lista_insere@@Base+0x10c>
   11120:	andeq	r1, r0, r4, lsr #2
   11124:	andeq	r1, r0, r4, lsl r1
   11128:	andeq	r1, r0, r4, lsl r1
   1112c:	ldrdeq	r1, [r0], -r0
   11130:	andeq	r1, r0, r8, asr #1
   11134:	andeq	r1, r0, r0, ror #1
   11138:	muleq	r0, r4, r0
   1113c:	andeq	r1, r0, r4, ror #1
   11140:	strdeq	r1, [r0], -r8
   11144:	andeq	r1, r0, r0, ror r1
   11148:	andeq	r1, r0, r0
   1114c:	andeq	r0, r0, r8, asr #31
   11150:	ldrdeq	r0, [r0], -ip
   11154:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   11158:	andeq	r0, r0, r4, ror pc
   1115c:	andeq	r0, r0, ip, lsr pc
   11160:	andeq	r1, r0, r0, lsr r0
   11164:	andeq	r0, r0, r8, lsl pc
   11168:	andeq	r0, r0, r4, lsl #31
   1116c:	muleq	r0, r8, lr
   11170:	andeq	r0, r0, ip, ror #27
   11174:	andeq	r0, r0, r0, lsr lr

00011178 <teste_lista_remove@@Base>:
   11178:	ldr	r2, [pc, #424]	; 11328 <teste_lista_remove@@Base+0x1b0>
   1117c:	mov	r0, #5
   11180:	strd	r4, [sp, #-16]!
   11184:	ldr	r1, [pc, #416]	; 1132c <teste_lista_remove@@Base+0x1b4>
   11188:	str	r6, [sp, #8]
   1118c:	str	lr, [sp, #12]
   11190:	sub	sp, sp, #8
   11194:	add	r2, pc, r2
   11198:	ldr	r3, [pc, #400]	; 11330 <teste_lista_remove@@Base+0x1b8>
   1119c:	add	r1, pc, r1
   111a0:	stm	sp, {r1, r2}
   111a4:	ldr	r2, [pc, #392]	; 11334 <teste_lista_remove@@Base+0x1bc>
   111a8:	add	r3, pc, r3
   111ac:	ldr	r1, [pc, #388]	; 11338 <teste_lista_remove@@Base+0x1c0>
   111b0:	add	r2, pc, r2
   111b4:	add	r1, pc, r1
   111b8:	bl	10bcc <_l@@Base>
   111bc:	mov	r4, r0
   111c0:	ldr	r0, [pc, #372]	; 1133c <teste_lista_remove@@Base+0x1c4>
   111c4:	add	r0, pc, r0
   111c8:	bl	10984 <printf@plt>
   111cc:	ldr	r3, [r4]
   111d0:	mov	r0, r4
   111d4:	ldr	r3, [r3, #4]
   111d8:	ldr	r3, [r3, #4]
   111dc:	ldr	r1, [r3, #4]
   111e0:	bl	11ba8 <lista_remove@@Base>
   111e4:	ldr	r3, [r4, #4]
   111e8:	cmp	r3, r0
   111ec:	moveq	r5, #0
   111f0:	beq	11204 <teste_lista_remove@@Base+0x8c>
   111f4:	ldr	r0, [pc, #324]	; 11340 <teste_lista_remove@@Base+0x1c8>
   111f8:	mov	r5, #1
   111fc:	add	r0, pc, r0
   11200:	bl	10984 <printf@plt>
   11204:	ldr	r3, [r4, #8]
   11208:	cmp	r3, #4
   1120c:	beq	11220 <teste_lista_remove@@Base+0xa8>
   11210:	ldr	r0, [pc, #300]	; 11344 <teste_lista_remove@@Base+0x1cc>
   11214:	add	r5, r5, #1
   11218:	add	r0, pc, r0
   1121c:	bl	10984 <printf@plt>
   11220:	ldr	r1, [pc, #288]	; 11348 <teste_lista_remove@@Base+0x1d0>
   11224:	ldr	r6, [r4]
   11228:	add	r1, pc, r1
   1122c:	ldr	r0, [r6]
   11230:	bl	10978 <strcmp@plt>
   11234:	cmp	r0, #0
   11238:	bne	11258 <teste_lista_remove@@Base+0xe0>
   1123c:	ldr	r1, [pc, #264]	; 1134c <teste_lista_remove@@Base+0x1d4>
   11240:	ldr	r6, [r6, #4]
   11244:	add	r1, pc, r1
   11248:	ldr	r0, [r6]
   1124c:	bl	10978 <strcmp@plt>
   11250:	cmp	r0, #0
   11254:	beq	112b4 <teste_lista_remove@@Base+0x13c>
   11258:	ldr	r0, [pc, #240]	; 11350 <teste_lista_remove@@Base+0x1d8>
   1125c:	add	r5, r5, #1
   11260:	add	r0, pc, r0
   11264:	bl	10984 <printf@plt>
   11268:	mov	r1, #0
   1126c:	mov	r0, r4
   11270:	bl	11ba8 <lista_remove@@Base>
   11274:	cmp	r0, #0
   11278:	beq	1131c <teste_lista_remove@@Base+0x1a4>
   1127c:	ldr	r0, [pc, #208]	; 11354 <teste_lista_remove@@Base+0x1dc>
   11280:	add	r5, r5, #1
   11284:	add	r0, pc, r0
   11288:	bl	10984 <printf@plt>
   1128c:	mov	r0, r4
   11290:	bl	11a2c <lista_apaga@@Base>
   11294:	mov	r0, #10
   11298:	bl	10a08 <putchar@plt>
   1129c:	mov	r0, r5
   112a0:	add	sp, sp, #8
   112a4:	ldrd	r4, [sp]
   112a8:	ldr	r6, [sp, #8]
   112ac:	add	sp, sp, #12
   112b0:	pop	{pc}		; (ldr pc, [sp], #4)
   112b4:	ldr	r1, [pc, #156]	; 11358 <teste_lista_remove@@Base+0x1e0>
   112b8:	ldr	r6, [r6, #4]
   112bc:	add	r1, pc, r1
   112c0:	ldr	r0, [r6]
   112c4:	bl	10978 <strcmp@plt>
   112c8:	cmp	r0, #0
   112cc:	bne	11258 <teste_lista_remove@@Base+0xe0>
   112d0:	ldr	r1, [pc, #132]	; 1135c <teste_lista_remove@@Base+0x1e4>
   112d4:	ldr	r3, [r6, #4]
   112d8:	add	r1, pc, r1
   112dc:	ldr	r0, [r3]
   112e0:	bl	10978 <strcmp@plt>
   112e4:	subs	r1, r0, #0
   112e8:	bne	11258 <teste_lista_remove@@Base+0xe0>
   112ec:	mov	r0, r4
   112f0:	bl	11ba8 <lista_remove@@Base>
   112f4:	cmp	r0, #0
   112f8:	bne	1127c <teste_lista_remove@@Base+0x104>
   112fc:	mov	r0, r4
   11300:	bl	11a2c <lista_apaga@@Base>
   11304:	cmp	r5, #0
   11308:	bne	11294 <teste_lista_remove@@Base+0x11c>
   1130c:	ldr	r0, [pc, #76]	; 11360 <teste_lista_remove@@Base+0x1e8>
   11310:	add	r0, pc, r0
   11314:	bl	109c0 <puts@plt>
   11318:	b	1129c <teste_lista_remove@@Base+0x124>
   1131c:	mov	r0, r4
   11320:	bl	11a2c <lista_apaga@@Base>
   11324:	b	11294 <teste_lista_remove@@Base+0x11c>
   11328:	andeq	r0, r0, r8, lsl #30
   1132c:	andeq	r0, r0, r4, lsl #30
   11330:	andeq	r0, r0, r8, ror #29
   11334:	andeq	r0, r0, r4, ror #29
   11338:	andeq	r0, r0, r4, ror #29
   1133c:	andeq	r0, r0, r0, ror #29
   11340:			; <UNDEFINED> instruction: 0x00000ebc
   11344:	ldrdeq	r0, [r0], -ip
   11348:	andeq	r0, r0, r0, ror lr
   1134c:	andeq	r0, r0, r0, asr lr
   11350:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11354:	andeq	r0, r0, r4, ror #29
   11358:	ldrdeq	r0, [r0], -r4
   1135c:	andeq	r0, r0, r4, asr #27
   11360:			; <UNDEFINED> instruction: 0x00000bb4

00011364 <teste_lista_pesquisa@@Base>:
   11364:	ldr	ip, [pc, #400]	; 114fc <teste_lista_pesquisa@@Base+0x198>
   11368:	mov	r0, #7
   1136c:	strd	r4, [sp, #-12]!
   11370:	ldr	r5, [pc, #392]	; 11500 <teste_lista_pesquisa@@Base+0x19c>
   11374:	str	lr, [sp, #8]
   11378:	sub	sp, sp, #20
   1137c:	add	ip, pc, ip
   11380:	mov	r3, ip
   11384:	mov	r2, ip
   11388:	add	r5, pc, r5
   1138c:	mov	r1, ip
   11390:	str	ip, [sp]
   11394:	stmib	sp, {r5, ip}
   11398:	str	ip, [sp, #12]
   1139c:	bl	10bcc <_l@@Base>
   113a0:	mov	r4, r0
   113a4:	ldr	r0, [pc, #344]	; 11504 <teste_lista_pesquisa@@Base+0x1a0>
   113a8:	add	r0, pc, r0
   113ac:	bl	10984 <printf@plt>
   113b0:	mov	r1, r5
   113b4:	mov	r0, r4
   113b8:	mov	r2, #0
   113bc:	bl	11c34 <lista_pesquisa@@Base>
   113c0:	ldr	r3, [r4]
   113c4:	ldr	r3, [r3, #4]
   113c8:	ldr	r3, [r3, #4]
   113cc:	ldr	r3, [r3, #4]
   113d0:	ldr	r3, [r3, #4]
   113d4:	cmp	r3, r0
   113d8:	moveq	r5, #0
   113dc:	beq	113f0 <teste_lista_pesquisa@@Base+0x8c>
   113e0:	ldr	r0, [pc, #288]	; 11508 <teste_lista_pesquisa@@Base+0x1a4>
   113e4:	mov	r5, #1
   113e8:	add	r0, pc, r0
   113ec:	bl	10984 <printf@plt>
   113f0:	ldr	r1, [pc, #276]	; 1150c <teste_lista_pesquisa@@Base+0x1a8>
   113f4:	mov	r2, #0
   113f8:	mov	r0, r4
   113fc:	add	r1, pc, r1
   11400:	bl	11c34 <lista_pesquisa@@Base>
   11404:	cmp	r0, #0
   11408:	beq	1141c <teste_lista_pesquisa@@Base+0xb8>
   1140c:	ldr	r0, [pc, #252]	; 11510 <teste_lista_pesquisa@@Base+0x1ac>
   11410:	add	r5, r5, #1
   11414:	add	r0, pc, r0
   11418:	bl	10984 <printf@plt>
   1141c:	ldr	r1, [pc, #240]	; 11514 <teste_lista_pesquisa@@Base+0x1b0>
   11420:	mov	r2, #1
   11424:	mov	r0, r4
   11428:	add	r1, pc, r1
   1142c:	bl	11c34 <lista_pesquisa@@Base>
   11430:	ldr	r3, [r4]
   11434:	ldr	r3, [r3, #4]
   11438:	ldr	r3, [r3, #4]
   1143c:	ldr	r3, [r3, #4]
   11440:	ldr	r3, [r3, #4]
   11444:	ldr	r3, [r3, #4]
   11448:	ldr	r3, [r3, #4]
   1144c:	cmp	r3, r0
   11450:	beq	114b4 <teste_lista_pesquisa@@Base+0x150>
   11454:	ldr	r0, [pc, #188]	; 11518 <teste_lista_pesquisa@@Base+0x1b4>
   11458:	add	r5, r5, #1
   1145c:	add	r0, pc, r0
   11460:	bl	10984 <printf@plt>
   11464:	ldr	r1, [pc, #176]	; 1151c <teste_lista_pesquisa@@Base+0x1b8>
   11468:	mov	r2, #1
   1146c:	mov	r0, r4
   11470:	add	r1, pc, r1
   11474:	bl	11c34 <lista_pesquisa@@Base>
   11478:	cmp	r0, #0
   1147c:	beq	114f0 <teste_lista_pesquisa@@Base+0x18c>
   11480:	ldr	r0, [pc, #152]	; 11520 <teste_lista_pesquisa@@Base+0x1bc>
   11484:	add	r5, r5, #1
   11488:	add	r0, pc, r0
   1148c:	bl	10984 <printf@plt>
   11490:	mov	r0, r4
   11494:	bl	11a2c <lista_apaga@@Base>
   11498:	mov	r0, #10
   1149c:	bl	10a08 <putchar@plt>
   114a0:	mov	r0, r5
   114a4:	add	sp, sp, #20
   114a8:	ldrd	r4, [sp]
   114ac:	add	sp, sp, #8
   114b0:	pop	{pc}		; (ldr pc, [sp], #4)
   114b4:	ldr	r1, [pc, #104]	; 11524 <teste_lista_pesquisa@@Base+0x1c0>
   114b8:	mov	r2, #1
   114bc:	mov	r0, r4
   114c0:	add	r1, pc, r1
   114c4:	bl	11c34 <lista_pesquisa@@Base>
   114c8:	cmp	r0, #0
   114cc:	bne	11480 <teste_lista_pesquisa@@Base+0x11c>
   114d0:	mov	r0, r4
   114d4:	bl	11a2c <lista_apaga@@Base>
   114d8:	cmp	r5, #0
   114dc:	bne	11498 <teste_lista_pesquisa@@Base+0x134>
   114e0:	ldr	r0, [pc, #64]	; 11528 <teste_lista_pesquisa@@Base+0x1c4>
   114e4:	add	r0, pc, r0
   114e8:	bl	109c0 <puts@plt>
   114ec:	b	114a0 <teste_lista_pesquisa@@Base+0x13c>
   114f0:	mov	r0, r4
   114f4:	bl	11a2c <lista_apaga@@Base>
   114f8:	b	11498 <teste_lista_pesquisa@@Base+0x134>
   114fc:	andeq	r0, r0, r0, ror fp
   11500:	andeq	r0, r0, r4, lsl lr
   11504:	strdeq	r0, [r0], -r8
   11508:	andeq	r0, r0, ip, asr #27
   1150c:	andeq	r0, r0, r0, lsl #28
   11510:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11514:	andeq	r0, r0, r4, asr #21
   11518:	andeq	r0, r0, r8, asr sp
   1151c:	andeq	r0, r0, ip, lsl #27
   11520:	andeq	r0, r0, ip, ror sp
   11524:	andeq	r0, r0, ip, lsr sp
   11528:	andeq	r0, r0, r0, ror #19

0001152c <teste_lista_ordena@@Base>:
   1152c:	ldr	r2, [pc, #508]	; 11730 <teste_lista_ordena@@Base+0x204>
   11530:	mov	r0, #5
   11534:	strd	r4, [sp, #-16]!
   11538:	ldr	r1, [pc, #500]	; 11734 <teste_lista_ordena@@Base+0x208>
   1153c:	str	r6, [sp, #8]
   11540:	str	lr, [sp, #12]
   11544:	sub	sp, sp, #8
   11548:	add	r2, pc, r2
   1154c:	ldr	r3, [pc, #484]	; 11738 <teste_lista_ordena@@Base+0x20c>
   11550:	add	r1, pc, r1
   11554:	stm	sp, {r1, r2}
   11558:	ldr	r2, [pc, #476]	; 1173c <teste_lista_ordena@@Base+0x210>
   1155c:	add	r3, pc, r3
   11560:	ldr	r1, [pc, #472]	; 11740 <teste_lista_ordena@@Base+0x214>
   11564:	add	r2, pc, r2
   11568:	add	r1, pc, r1
   1156c:	bl	10bcc <_l@@Base>
   11570:	mov	r5, r0
   11574:	ldr	r0, [pc, #456]	; 11744 <teste_lista_ordena@@Base+0x218>
   11578:	add	r0, pc, r0
   1157c:	bl	10984 <printf@plt>
   11580:	mov	r0, #0
   11584:	bl	11cec <lista_ordena@@Base>
   11588:	cmn	r0, #1
   1158c:	moveq	r4, #0
   11590:	beq	115a4 <teste_lista_ordena@@Base+0x78>
   11594:	ldr	r0, [pc, #428]	; 11748 <teste_lista_ordena@@Base+0x21c>
   11598:	mov	r4, #1
   1159c:	add	r0, pc, r0
   115a0:	bl	10984 <printf@plt>
   115a4:	mov	r0, r5
   115a8:	bl	11cec <lista_ordena@@Base>
   115ac:	ldr	r1, [pc, #408]	; 1174c <teste_lista_ordena@@Base+0x220>
   115b0:	ldr	r6, [r5]
   115b4:	add	r1, pc, r1
   115b8:	ldr	r0, [r6]
   115bc:	bl	10978 <strcmp@plt>
   115c0:	cmp	r0, #0
   115c4:	bne	115e4 <teste_lista_ordena@@Base+0xb8>
   115c8:	ldr	r1, [pc, #384]	; 11750 <teste_lista_ordena@@Base+0x224>
   115cc:	ldr	r6, [r6, #4]
   115d0:	add	r1, pc, r1
   115d4:	ldr	r0, [r6]
   115d8:	bl	10978 <strcmp@plt>
   115dc:	cmp	r0, #0
   115e0:	beq	116d8 <teste_lista_ordena@@Base+0x1ac>
   115e4:	ldr	r0, [pc, #360]	; 11754 <teste_lista_ordena@@Base+0x228>
   115e8:	add	r4, r4, #1
   115ec:	add	r0, pc, r0
   115f0:	bl	10984 <printf@plt>
   115f4:	ldr	r1, [pc, #348]	; 11758 <teste_lista_ordena@@Base+0x22c>
   115f8:	ldr	r6, [r5, #4]
   115fc:	add	r1, pc, r1
   11600:	ldr	r0, [r6]
   11604:	bl	10978 <strcmp@plt>
   11608:	cmp	r0, #0
   1160c:	bne	1162c <teste_lista_ordena@@Base+0x100>
   11610:	ldr	r1, [pc, #324]	; 1175c <teste_lista_ordena@@Base+0x230>
   11614:	ldr	r6, [r6, #8]
   11618:	add	r1, pc, r1
   1161c:	ldr	r0, [r6]
   11620:	bl	10978 <strcmp@plt>
   11624:	cmp	r0, #0
   11628:	beq	11664 <teste_lista_ordena@@Base+0x138>
   1162c:	ldr	r0, [pc, #300]	; 11760 <teste_lista_ordena@@Base+0x234>
   11630:	add	r4, r4, #1
   11634:	add	r0, pc, r0
   11638:	bl	10984 <printf@plt>
   1163c:	mov	r0, r5
   11640:	bl	11a2c <lista_apaga@@Base>
   11644:	mov	r0, #10
   11648:	bl	10a08 <putchar@plt>
   1164c:	mov	r0, r4
   11650:	add	sp, sp, #8
   11654:	ldrd	r4, [sp]
   11658:	ldr	r6, [sp, #8]
   1165c:	add	sp, sp, #12
   11660:	pop	{pc}		; (ldr pc, [sp], #4)
   11664:	ldr	r1, [pc, #248]	; 11764 <teste_lista_ordena@@Base+0x238>
   11668:	ldr	r6, [r6, #8]
   1166c:	add	r1, pc, r1
   11670:	ldr	r0, [r6]
   11674:	bl	10978 <strcmp@plt>
   11678:	cmp	r0, #0
   1167c:	bne	1162c <teste_lista_ordena@@Base+0x100>
   11680:	ldr	r1, [pc, #224]	; 11768 <teste_lista_ordena@@Base+0x23c>
   11684:	ldr	r6, [r6, #8]
   11688:	add	r1, pc, r1
   1168c:	ldr	r0, [r6]
   11690:	bl	10978 <strcmp@plt>
   11694:	cmp	r0, #0
   11698:	bne	1162c <teste_lista_ordena@@Base+0x100>
   1169c:	ldr	r1, [pc, #200]	; 1176c <teste_lista_ordena@@Base+0x240>
   116a0:	ldr	r3, [r6, #8]
   116a4:	add	r1, pc, r1
   116a8:	ldr	r0, [r3]
   116ac:	bl	10978 <strcmp@plt>
   116b0:	cmp	r0, #0
   116b4:	bne	1162c <teste_lista_ordena@@Base+0x100>
   116b8:	mov	r0, r5
   116bc:	bl	11a2c <lista_apaga@@Base>
   116c0:	cmp	r4, #0
   116c4:	bne	11644 <teste_lista_ordena@@Base+0x118>
   116c8:	ldr	r0, [pc, #160]	; 11770 <teste_lista_ordena@@Base+0x244>
   116cc:	add	r0, pc, r0
   116d0:	bl	109c0 <puts@plt>
   116d4:	b	1164c <teste_lista_ordena@@Base+0x120>
   116d8:	ldr	r1, [pc, #148]	; 11774 <teste_lista_ordena@@Base+0x248>
   116dc:	ldr	r6, [r6, #4]
   116e0:	add	r1, pc, r1
   116e4:	ldr	r0, [r6]
   116e8:	bl	10978 <strcmp@plt>
   116ec:	cmp	r0, #0
   116f0:	bne	115e4 <teste_lista_ordena@@Base+0xb8>
   116f4:	ldr	r1, [pc, #124]	; 11778 <teste_lista_ordena@@Base+0x24c>
   116f8:	ldr	r6, [r6, #4]
   116fc:	add	r1, pc, r1
   11700:	ldr	r0, [r6]
   11704:	bl	10978 <strcmp@plt>
   11708:	cmp	r0, #0
   1170c:	bne	115e4 <teste_lista_ordena@@Base+0xb8>
   11710:	ldr	r1, [pc, #100]	; 1177c <teste_lista_ordena@@Base+0x250>
   11714:	ldr	r3, [r6, #4]
   11718:	add	r1, pc, r1
   1171c:	ldr	r0, [r3]
   11720:	bl	10978 <strcmp@plt>
   11724:	cmp	r0, #0
   11728:	beq	115f4 <teste_lista_ordena@@Base+0xc8>
   1172c:	b	115e4 <teste_lista_ordena@@Base+0xb8>
   11730:	andeq	r0, r0, r8, lsl #26
   11734:	andeq	r0, r0, r4, lsl #26
   11738:	andeq	r0, r0, r8, ror #25
   1173c:	andeq	r0, r0, r4, ror #25
   11740:	andeq	r0, r0, r4, ror #25
   11744:	andeq	r0, r0, r0, ror #25
   11748:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1174c:	muleq	r0, r8, ip
   11750:	andeq	r0, r0, r8, ror ip
   11754:			; <UNDEFINED> instruction: 0x00000cb0
   11758:	andeq	r0, r0, r8, asr #24
   1175c:	andeq	r0, r0, r8, lsr ip
   11760:	andeq	r0, r0, r8, lsr #25
   11764:	andeq	r0, r0, r8, ror #23
   11768:	andeq	r0, r0, r0, asr #23
   1176c:	andeq	r0, r0, r8, lsr #23
   11770:	strdeq	r0, [r0], -r8
   11774:	andeq	r0, r0, r4, ror fp
   11778:	andeq	r0, r0, r4, asr fp
   1177c:	andeq	r0, r0, ip, lsr #22

00011780 <teste_lista_inverte@@Base>:
   11780:	ldr	r2, [pc, #536]	; 119a0 <teste_lista_inverte@@Base+0x220>
   11784:	mov	r0, #5
   11788:	strd	r4, [sp, #-16]!
   1178c:	ldr	r1, [pc, #528]	; 119a4 <teste_lista_inverte@@Base+0x224>
   11790:	str	r6, [sp, #8]
   11794:	str	lr, [sp, #12]
   11798:	sub	sp, sp, #8
   1179c:	add	r2, pc, r2
   117a0:	ldr	r3, [pc, #512]	; 119a8 <teste_lista_inverte@@Base+0x228>
   117a4:	add	r1, pc, r1
   117a8:	stm	sp, {r1, r2}
   117ac:	ldr	r2, [pc, #504]	; 119ac <teste_lista_inverte@@Base+0x22c>
   117b0:	add	r3, pc, r3
   117b4:	ldr	r1, [pc, #500]	; 119b0 <teste_lista_inverte@@Base+0x230>
   117b8:	add	r2, pc, r2
   117bc:	add	r1, pc, r1
   117c0:	bl	10bcc <_l@@Base>
   117c4:	mov	r5, r0
   117c8:	ldr	r0, [pc, #484]	; 119b4 <teste_lista_inverte@@Base+0x234>
   117cc:	add	r0, pc, r0
   117d0:	bl	10984 <printf@plt>
   117d4:	mov	r0, #0
   117d8:	bl	11d98 <lista_inverte@@Base>
   117dc:	cmn	r0, #1
   117e0:	moveq	r4, #0
   117e4:	beq	117f8 <teste_lista_inverte@@Base+0x78>
   117e8:	ldr	r0, [pc, #456]	; 119b8 <teste_lista_inverte@@Base+0x238>
   117ec:	mov	r4, #1
   117f0:	add	r0, pc, r0
   117f4:	bl	10984 <printf@plt>
   117f8:	mov	r0, r5
   117fc:	bl	11d98 <lista_inverte@@Base>
   11800:	ldr	r3, [r5, #8]
   11804:	cmp	r3, #5
   11808:	beq	1181c <teste_lista_inverte@@Base+0x9c>
   1180c:	ldr	r0, [pc, #424]	; 119bc <teste_lista_inverte@@Base+0x23c>
   11810:	add	r4, r4, #1
   11814:	add	r0, pc, r0
   11818:	bl	10984 <printf@plt>
   1181c:	ldr	r1, [pc, #412]	; 119c0 <teste_lista_inverte@@Base+0x240>
   11820:	ldr	r6, [r5]
   11824:	add	r1, pc, r1
   11828:	ldr	r0, [r6]
   1182c:	bl	10978 <strcmp@plt>
   11830:	cmp	r0, #0
   11834:	bne	11854 <teste_lista_inverte@@Base+0xd4>
   11838:	ldr	r1, [pc, #388]	; 119c4 <teste_lista_inverte@@Base+0x244>
   1183c:	ldr	r6, [r6, #4]
   11840:	add	r1, pc, r1
   11844:	ldr	r0, [r6]
   11848:	bl	10978 <strcmp@plt>
   1184c:	cmp	r0, #0
   11850:	beq	11948 <teste_lista_inverte@@Base+0x1c8>
   11854:	ldr	r0, [pc, #364]	; 119c8 <teste_lista_inverte@@Base+0x248>
   11858:	add	r4, r4, #1
   1185c:	add	r0, pc, r0
   11860:	bl	10984 <printf@plt>
   11864:	ldr	r1, [pc, #352]	; 119cc <teste_lista_inverte@@Base+0x24c>
   11868:	ldr	r6, [r5, #4]
   1186c:	add	r1, pc, r1
   11870:	ldr	r0, [r6]
   11874:	bl	10978 <strcmp@plt>
   11878:	cmp	r0, #0
   1187c:	bne	1189c <teste_lista_inverte@@Base+0x11c>
   11880:	ldr	r1, [pc, #328]	; 119d0 <teste_lista_inverte@@Base+0x250>
   11884:	ldr	r6, [r6, #8]
   11888:	add	r1, pc, r1
   1188c:	ldr	r0, [r6]
   11890:	bl	10978 <strcmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118d4 <teste_lista_inverte@@Base+0x154>
   1189c:	ldr	r0, [pc, #304]	; 119d4 <teste_lista_inverte@@Base+0x254>
   118a0:	add	r4, r4, #1
   118a4:	add	r0, pc, r0
   118a8:	bl	10984 <printf@plt>
   118ac:	mov	r0, r5
   118b0:	bl	11a2c <lista_apaga@@Base>
   118b4:	mov	r0, #10
   118b8:	bl	10a08 <putchar@plt>
   118bc:	mov	r0, r4
   118c0:	add	sp, sp, #8
   118c4:	ldrd	r4, [sp]
   118c8:	ldr	r6, [sp, #8]
   118cc:	add	sp, sp, #12
   118d0:	pop	{pc}		; (ldr pc, [sp], #4)
   118d4:	ldr	r1, [pc, #252]	; 119d8 <teste_lista_inverte@@Base+0x258>
   118d8:	ldr	r6, [r6, #8]
   118dc:	add	r1, pc, r1
   118e0:	ldr	r0, [r6]
   118e4:	bl	10978 <strcmp@plt>
   118e8:	cmp	r0, #0
   118ec:	bne	1189c <teste_lista_inverte@@Base+0x11c>
   118f0:	ldr	r1, [pc, #228]	; 119dc <teste_lista_inverte@@Base+0x25c>
   118f4:	ldr	r6, [r6, #8]
   118f8:	add	r1, pc, r1
   118fc:	ldr	r0, [r6]
   11900:	bl	10978 <strcmp@plt>
   11904:	cmp	r0, #0
   11908:	bne	1189c <teste_lista_inverte@@Base+0x11c>
   1190c:	ldr	r1, [pc, #204]	; 119e0 <teste_lista_inverte@@Base+0x260>
   11910:	ldr	r3, [r6, #8]
   11914:	add	r1, pc, r1
   11918:	ldr	r0, [r3]
   1191c:	bl	10978 <strcmp@plt>
   11920:	cmp	r0, #0
   11924:	bne	1189c <teste_lista_inverte@@Base+0x11c>
   11928:	mov	r0, r5
   1192c:	bl	11a2c <lista_apaga@@Base>
   11930:	cmp	r4, #0
   11934:	bne	118b4 <teste_lista_inverte@@Base+0x134>
   11938:	ldr	r0, [pc, #164]	; 119e4 <teste_lista_inverte@@Base+0x264>
   1193c:	add	r0, pc, r0
   11940:	bl	109c0 <puts@plt>
   11944:	b	118bc <teste_lista_inverte@@Base+0x13c>
   11948:	ldr	r1, [pc, #152]	; 119e8 <teste_lista_inverte@@Base+0x268>
   1194c:	ldr	r6, [r6, #4]
   11950:	add	r1, pc, r1
   11954:	ldr	r0, [r6]
   11958:	bl	10978 <strcmp@plt>
   1195c:	cmp	r0, #0
   11960:	bne	11854 <teste_lista_inverte@@Base+0xd4>
   11964:	ldr	r1, [pc, #128]	; 119ec <teste_lista_inverte@@Base+0x26c>
   11968:	ldr	r6, [r6, #4]
   1196c:	add	r1, pc, r1
   11970:	ldr	r0, [r6]
   11974:	bl	10978 <strcmp@plt>
   11978:	cmp	r0, #0
   1197c:	bne	11854 <teste_lista_inverte@@Base+0xd4>
   11980:	ldr	r1, [pc, #104]	; 119f0 <teste_lista_inverte@@Base+0x270>
   11984:	ldr	r3, [r6, #4]
   11988:	add	r1, pc, r1
   1198c:	ldr	r0, [r3]
   11990:	bl	10978 <strcmp@plt>
   11994:	cmp	r0, #0
   11998:	beq	11864 <teste_lista_inverte@@Base+0xe4>
   1199c:	b	11854 <teste_lista_inverte@@Base+0xd4>
   119a0:			; <UNDEFINED> instruction: 0x00000ab4
   119a4:			; <UNDEFINED> instruction: 0x00000ab0
   119a8:	muleq	r0, r4, sl
   119ac:	muleq	r0, r0, sl
   119b0:	muleq	r0, r0, sl
   119b4:	andeq	r0, r0, r0, asr fp
   119b8:	andeq	r0, r0, ip, ror sl
   119bc:	andeq	r0, r0, ip, lsl fp
   119c0:	andeq	r0, r0, ip, lsr #20
   119c4:	andeq	r0, r0, r4, lsl sl
   119c8:	andeq	r0, r0, r0, lsl #22
   119cc:	andeq	r0, r0, r0, ror #19
   119d0:	andeq	r0, r0, r0, asr #19
   119d4:	andeq	r0, r0, r8, lsr sl
   119d8:	andeq	r0, r0, r8, ror #18
   119dc:	andeq	r0, r0, ip, asr r9
   119e0:	andeq	r0, r0, ip, lsr r9
   119e4:	andeq	r0, r0, r8, lsl #11
   119e8:	strdeq	r0, [r0], -r4
   119ec:	ldrdeq	r0, [r0], -ip
   119f0:	andeq	r0, r0, r4, asr #17

000119f4 <lista_nova@@Base>:
   119f4:	mov	r0, #12
   119f8:	str	r4, [sp, #-8]!
   119fc:	str	lr, [sp, #4]
   11a00:	bl	109cc <malloc@plt>
   11a04:	cmp	r0, #0
   11a08:	ldr	r4, [sp]
   11a0c:	add	sp, sp, #4
   11a10:	movne	r3, #0
   11a14:	strne	r3, [r0, #8]
   11a18:	pop	{pc}		; (ldr pc, [sp], #4)

00011a1c <lista_tamanho@@Base>:
   11a1c:	cmp	r0, #0
   11a20:	ldrne	r0, [r0, #8]
   11a24:	mvneq	r0, #0
   11a28:	bx	lr

00011a2c <lista_apaga@@Base>:
   11a2c:	strd	r4, [sp, #-16]!
   11a30:	str	r6, [sp, #8]
   11a34:	subs	r6, r0, #0
   11a38:	str	lr, [sp, #12]
   11a3c:	beq	11aa0 <lista_apaga@@Base+0x74>
   11a40:	bl	11a1c <lista_tamanho@@Base>
   11a44:	cmp	r0, #0
   11a48:	beq	11a88 <lista_apaga@@Base+0x5c>
   11a4c:	ldr	r5, [r6]
   11a50:	cmp	r5, #0
   11a54:	beq	11a88 <lista_apaga@@Base+0x5c>
   11a58:	ldr	r4, [r5, #4]
   11a5c:	cmp	r4, #0
   11a60:	bne	11a6c <lista_apaga@@Base+0x40>
   11a64:	b	11a88 <lista_apaga@@Base+0x5c>
   11a68:	ldr	r4, [r4, #4]
   11a6c:	ldr	r0, [r5]
   11a70:	bl	10990 <free@plt>
   11a74:	mov	r0, r5
   11a78:	mov	r5, r4
   11a7c:	bl	10990 <free@plt>
   11a80:	cmp	r4, #0
   11a84:	bne	11a68 <lista_apaga@@Base+0x3c>
   11a88:	mov	r0, r6
   11a8c:	ldrd	r4, [sp]
   11a90:	ldr	r6, [sp, #8]
   11a94:	ldr	lr, [sp, #12]
   11a98:	add	sp, sp, #16
   11a9c:	b	10990 <free@plt>
   11aa0:	ldrd	r4, [sp]
   11aa4:	ldr	r6, [sp, #8]
   11aa8:	add	sp, sp, #12
   11aac:	pop	{pc}		; (ldr pc, [sp], #4)

00011ab0 <lista_inicio@@Base>:
   11ab0:	cmp	r0, #0
   11ab4:	ldrne	r0, [r0]
   11ab8:	bx	lr

00011abc <lista_fim@@Base>:
   11abc:	cmp	r0, #0
   11ac0:	ldrne	r0, [r0, #4]
   11ac4:	bx	lr

00011ac8 <lista_insere@@Base>:
   11ac8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11acc:	subs	r5, r0, #0
   11ad0:	moveq	r4, r5
   11ad4:	strd	r6, [sp, #8]
   11ad8:	str	r8, [sp, #16]
   11adc:	str	lr, [sp, #20]
   11ae0:	beq	11b58 <lista_insere@@Base+0x90>
   11ae4:	mov	r0, #12
   11ae8:	mov	r6, r1
   11aec:	mov	r7, r2
   11af0:	bl	109cc <malloc@plt>
   11af4:	mov	r4, r0
   11af8:	mov	r0, r6
   11afc:	bl	109f0 <strlen@plt>
   11b00:	add	r8, r0, #1
   11b04:	mov	r0, r8
   11b08:	bl	109cc <malloc@plt>
   11b0c:	mov	r2, r8
   11b10:	mov	r1, r6
   11b14:	str	r0, [r4]
   11b18:	bl	1099c <memcpy@plt>
   11b1c:	ldr	r3, [r5, #8]
   11b20:	cmp	r3, #0
   11b24:	beq	11b70 <lista_insere@@Base+0xa8>
   11b28:	cmp	r7, #0
   11b2c:	beq	11b84 <lista_insere@@Base+0xbc>
   11b30:	ldr	r2, [r5]
   11b34:	cmp	r2, r7
   11b38:	beq	11b9c <lista_insere@@Base+0xd4>
   11b3c:	ldr	r2, [r7, #8]
   11b40:	str	r4, [r2, #4]
   11b44:	str	r7, [r4, #4]
   11b48:	str	r2, [r4, #8]
   11b4c:	str	r4, [r7, #8]
   11b50:	add	r3, r3, #1
   11b54:	str	r3, [r5, #8]
   11b58:	mov	r0, r4
   11b5c:	ldrd	r4, [sp]
   11b60:	ldrd	r6, [sp, #8]
   11b64:	ldr	r8, [sp, #16]
   11b68:	add	sp, sp, #20
   11b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b70:	str	r4, [r5]
   11b74:	str	r3, [r4, #4]
   11b78:	str	r4, [r5, #4]
   11b7c:	str	r3, [r4, #8]
   11b80:	b	11b50 <lista_insere@@Base+0x88>
   11b84:	ldr	r2, [r5, #4]
   11b88:	str	r7, [r4, #4]
   11b8c:	str	r2, [r4, #8]
   11b90:	str	r4, [r2, #4]
   11b94:	str	r4, [r5, #4]
   11b98:	b	11b50 <lista_insere@@Base+0x88>
   11b9c:	str	r4, [r5]
   11ba0:	stmib	r4, {r2, r4}
   11ba4:	b	11b50 <lista_insere@@Base+0x88>

00011ba8 <lista_remove@@Base>:
   11ba8:	strd	r4, [sp, #-16]!
   11bac:	subs	r4, r1, #0
   11bb0:	str	r6, [sp, #8]
   11bb4:	str	lr, [sp, #12]
   11bb8:	beq	11c2c <lista_remove@@Base+0x84>
   11bbc:	ldr	r3, [r0]
   11bc0:	ldr	r6, [r4, #4]
   11bc4:	cmp	r3, r4
   11bc8:	moveq	r3, #0
   11bcc:	streq	r3, [r6, #8]
   11bd0:	streq	r6, [r0]
   11bd4:	beq	11bf8 <lista_remove@@Base+0x50>
   11bd8:	ldr	r2, [r0, #4]
   11bdc:	ldr	r3, [r4, #8]
   11be0:	cmp	r2, r4
   11be4:	moveq	r2, #0
   11be8:	strne	r6, [r3, #4]
   11bec:	streq	r2, [r3, #4]
   11bf0:	strne	r3, [r6, #8]
   11bf4:	streq	r3, [r0, #4]
   11bf8:	mov	r5, r0
   11bfc:	ldr	r0, [r4]
   11c00:	bl	10990 <free@plt>
   11c04:	mov	r0, r4
   11c08:	bl	10990 <free@plt>
   11c0c:	ldr	r3, [r5, #8]
   11c10:	sub	r3, r3, #1
   11c14:	str	r3, [r5, #8]
   11c18:	mov	r0, r6
   11c1c:	ldrd	r4, [sp]
   11c20:	ldr	r6, [sp, #8]
   11c24:	add	sp, sp, #12
   11c28:	pop	{pc}		; (ldr pc, [sp], #4)
   11c2c:	mov	r6, r4
   11c30:	b	11c18 <lista_remove@@Base+0x70>

00011c34 <lista_pesquisa@@Base>:
   11c34:	cmp	r0, #0
   11c38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11c3c:	strd	r6, [sp, #8]
   11c40:	str	r8, [sp, #16]
   11c44:	str	lr, [sp, #20]
   11c48:	beq	11c98 <lista_pesquisa@@Base+0x64>
   11c4c:	cmp	r2, #0
   11c50:	mov	r6, r1
   11c54:	mov	r5, r2
   11c58:	beq	11cb4 <lista_pesquisa@@Base+0x80>
   11c5c:	cmp	r2, #1
   11c60:	bne	11c98 <lista_pesquisa@@Base+0x64>
   11c64:	ldmib	r0, {r4, r7}
   11c68:	cmp	r7, #0
   11c6c:	ble	11c98 <lista_pesquisa@@Base+0x64>
   11c70:	mov	r5, #0
   11c74:	mov	r1, r6
   11c78:	ldr	r0, [r4]
   11c7c:	add	r5, r5, #1
   11c80:	bl	10978 <strcmp@plt>
   11c84:	cmp	r0, #0
   11c88:	beq	11c9c <lista_pesquisa@@Base+0x68>
   11c8c:	cmp	r5, r7
   11c90:	ldr	r4, [r4, #8]
   11c94:	bne	11c74 <lista_pesquisa@@Base+0x40>
   11c98:	mov	r4, #0
   11c9c:	mov	r0, r4
   11ca0:	ldrd	r4, [sp]
   11ca4:	ldrd	r6, [sp, #8]
   11ca8:	ldr	r8, [sp, #16]
   11cac:	add	sp, sp, #20
   11cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11cb4:	ldr	r4, [r0]
   11cb8:	ldr	r7, [r0, #8]
   11cbc:	cmp	r7, #0
   11cc0:	ble	11c98 <lista_pesquisa@@Base+0x64>
   11cc4:	mov	r1, r6
   11cc8:	ldr	r0, [r4]
   11ccc:	add	r5, r5, #1
   11cd0:	bl	10978 <strcmp@plt>
   11cd4:	cmp	r0, #0
   11cd8:	beq	11c9c <lista_pesquisa@@Base+0x68>
   11cdc:	cmp	r5, r7
   11ce0:	ldr	r4, [r4, #4]
   11ce4:	bne	11cc4 <lista_pesquisa@@Base+0x90>
   11ce8:	b	11c98 <lista_pesquisa@@Base+0x64>

00011cec <lista_ordena@@Base>:
   11cec:	cmp	r0, #0
   11cf0:	beq	11d90 <lista_ordena@@Base+0xa4>
   11cf4:	ldr	r3, [r0, #8]
   11cf8:	cmp	r3, #0
   11cfc:	beq	11d88 <lista_ordena@@Base+0x9c>
   11d00:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11d04:	strd	r6, [sp, #8]
   11d08:	strd	r8, [sp, #16]
   11d0c:	str	sl, [sp, #24]
   11d10:	ldm	r0, {r8, sl}
   11d14:	str	lr, [sp, #28]
   11d18:	cmp	r8, sl
   11d1c:	movne	r9, r8
   11d20:	beq	11d6c <lista_ordena@@Base+0x80>
   11d24:	mov	r4, r9
   11d28:	ldr	r7, [r9, #4]
   11d2c:	b	11d44 <lista_ordena@@Base+0x58>
   11d30:	cmp	r4, r8
   11d34:	str	r5, [r4]
   11d38:	ldrne	r4, [r4, #8]
   11d3c:	str	r6, [r7]
   11d40:	ldrne	r7, [r4, #4]
   11d44:	ldr	r6, [r4]
   11d48:	ldr	r5, [r7]
   11d4c:	mov	r0, r6
   11d50:	mov	r1, r5
   11d54:	bl	10978 <strcmp@plt>
   11d58:	cmp	r0, #0
   11d5c:	bgt	11d30 <lista_ordena@@Base+0x44>
   11d60:	ldr	r9, [r9, #4]
   11d64:	cmp	r9, sl
   11d68:	bne	11d24 <lista_ordena@@Base+0x38>
   11d6c:	ldrd	r4, [sp]
   11d70:	mov	r0, #0
   11d74:	ldrd	r6, [sp, #8]
   11d78:	ldrd	r8, [sp, #16]
   11d7c:	ldr	sl, [sp, #24]
   11d80:	add	sp, sp, #28
   11d84:	pop	{pc}		; (ldr pc, [sp], #4)
   11d88:	mov	r0, #0
   11d8c:	bx	lr
   11d90:	mvn	r0, #0
   11d94:	bx	lr

00011d98 <lista_inverte@@Base>:
   11d98:	cmp	r0, #0
   11d9c:	beq	11e2c <lista_inverte@@Base+0x94>
   11da0:	ldr	r3, [r0, #8]
   11da4:	cmp	r3, #0
   11da8:	beq	11e24 <lista_inverte@@Base+0x8c>
   11dac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11db0:	cmp	r3, #1
   11db4:	ldrd	r4, [r0]
   11db8:	strd	r6, [sp, #8]
   11dbc:	str	r8, [sp, #16]
   11dc0:	add	r8, r3, r3, lsr #31
   11dc4:	str	lr, [sp, #20]
   11dc8:	asr	r8, r8, #1
   11dcc:	ble	11e0c <lista_inverte@@Base+0x74>
   11dd0:	mov	r6, #0
   11dd4:	ldr	r0, [r4]
   11dd8:	add	r6, r6, #1
   11ddc:	bl	109a8 <strdup@plt>
   11de0:	mov	r7, r0
   11de4:	ldr	r0, [r5]
   11de8:	bl	109a8 <strdup@plt>
   11dec:	str	r0, [r4]
   11df0:	mov	r0, r7
   11df4:	bl	109a8 <strdup@plt>
   11df8:	cmp	r6, r8
   11dfc:	ldr	r4, [r4, #4]
   11e00:	str	r0, [r5]
   11e04:	ldr	r5, [r5, #8]
   11e08:	blt	11dd4 <lista_inverte@@Base+0x3c>
   11e0c:	mov	r0, #0
   11e10:	ldrd	r4, [sp]
   11e14:	ldrd	r6, [sp, #8]
   11e18:	ldr	r8, [sp, #16]
   11e1c:	add	sp, sp, #20
   11e20:	pop	{pc}		; (ldr pc, [sp], #4)
   11e24:	mov	r0, #0
   11e28:	bx	lr
   11e2c:	mvn	r0, #0
   11e30:	bx	lr

00011e34 <__libc_csu_init@@Base>:
   11e34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e38:	mov	r7, r0
   11e3c:	ldr	r6, [pc, #72]	; 11e8c <__libc_csu_init@@Base+0x58>
   11e40:	ldr	r5, [pc, #72]	; 11e90 <__libc_csu_init@@Base+0x5c>
   11e44:	add	r6, pc, r6
   11e48:	add	r5, pc, r5
   11e4c:	sub	r6, r6, r5
   11e50:	mov	r8, r1
   11e54:	mov	r9, r2
   11e58:	bl	10958 <strcmp@plt-0x20>
   11e5c:	asrs	r6, r6, #2
   11e60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e64:	mov	r4, #0
   11e68:	add	r4, r4, #1
   11e6c:	ldr	r3, [r5], #4
   11e70:	mov	r2, r9
   11e74:	mov	r1, r8
   11e78:	mov	r0, r7
   11e7c:	blx	r3
   11e80:	cmp	r6, r4
   11e84:	bne	11e68 <__libc_csu_init@@Base+0x34>
   11e88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e8c:	andeq	r1, r1, r8, asr #1
   11e90:	andeq	r1, r1, r0, asr #1

00011e94 <__libc_csu_fini@@Base>:
   11e94:	bx	lr

Disassembly of section .fini:

00011e98 <.fini>:
   11e98:	push	{r3, lr}
   11e9c:	pop	{r3, pc}
