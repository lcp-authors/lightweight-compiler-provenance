
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000117e8 <.init>:
   117e8:	push	{r3, lr}
   117ec:	bl	11cfc <__assert_fail@plt+0x50>
   117f0:	pop	{r3, pc}

Disassembly of section .plt:

000117f4 <pthread_mutex_unlock@plt-0x14>:
   117f4:	push	{lr}		; (str lr, [sp, #-4]!)
   117f8:	ldr	lr, [pc, #4]	; 11804 <pthread_mutex_unlock@plt-0x4>
   117fc:	add	lr, pc, lr
   11800:	ldr	pc, [lr, #8]!
   11804:	strdeq	r2, [r3], -ip

00011808 <pthread_mutex_unlock@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #204800	; 0x32000
   11810:	ldr	pc, [ip, #2044]!	; 0x7fc

00011814 <fdopen@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #204800	; 0x32000
   1181c:	ldr	pc, [ip, #2036]!	; 0x7f4

00011820 <calloc@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #204800	; 0x32000
   11828:	ldr	pc, [ip, #2028]!	; 0x7ec

0001182c <wctype@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #204800	; 0x32000
   11834:	ldr	pc, [ip, #2020]!	; 0x7e4

00011838 <raise@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #204800	; 0x32000
   11840:	ldr	pc, [ip, #2012]!	; 0x7dc

00011844 <wcrtomb@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #204800	; 0x32000
   1184c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011850 <iswctype@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #204800	; 0x32000
   11858:	ldr	pc, [ip, #1996]!	; 0x7cc

0001185c <strcmp@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #204800	; 0x32000
   11864:	ldr	pc, [ip, #1988]!	; 0x7c4

00011868 <printf@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #204800	; 0x32000
   11870:	ldr	pc, [ip, #1980]!	; 0x7bc

00011874 <pthread_mutex_destroy@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #204800	; 0x32000
   1187c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011880 <fflush@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #204800	; 0x32000
   11888:	ldr	pc, [ip, #1964]!	; 0x7ac

0001188c <wcwidth@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #204800	; 0x32000
   11894:	ldr	pc, [ip, #1956]!	; 0x7a4

00011898 <getuid@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #204800	; 0x32000
   118a0:	ldr	pc, [ip, #1948]!	; 0x79c

000118a4 <memmove@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #204800	; 0x32000
   118ac:	ldr	pc, [ip, #1940]!	; 0x794

000118b0 <free@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #204800	; 0x32000
   118b8:	ldr	pc, [ip, #1932]!	; 0x78c

000118bc <pthread_mutex_lock@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #204800	; 0x32000
   118c4:	ldr	pc, [ip, #1924]!	; 0x784

000118c8 <ferror@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #204800	; 0x32000
   118d0:	ldr	pc, [ip, #1916]!	; 0x77c

000118d4 <strndup@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #204800	; 0x32000
   118dc:	ldr	pc, [ip, #1908]!	; 0x774

000118e0 <_exit@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #204800	; 0x32000
   118e8:	ldr	pc, [ip, #1900]!	; 0x76c

000118ec <memcpy@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #204800	; 0x32000
   118f4:	ldr	pc, [ip, #1892]!	; 0x764

000118f8 <pthread_mutex_init@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #204800	; 0x32000
   11900:	ldr	pc, [ip, #1884]!	; 0x75c

00011904 <__strtoull_internal@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #204800	; 0x32000
   1190c:	ldr	pc, [ip, #1876]!	; 0x754

00011910 <towlower@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #204800	; 0x32000
   11918:	ldr	pc, [ip, #1868]!	; 0x74c

0001191c <mbsinit@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #204800	; 0x32000
   11924:	ldr	pc, [ip, #1860]!	; 0x744

00011928 <time@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #204800	; 0x32000
   11930:	ldr	pc, [ip, #1852]!	; 0x73c

00011934 <memcmp@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #204800	; 0x32000
   1193c:	ldr	pc, [ip, #1844]!	; 0x734

00011940 <dcgettext@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #204800	; 0x32000
   11948:	ldr	pc, [ip, #1836]!	; 0x72c

0001194c <realloc@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #204800	; 0x32000
   11954:	ldr	pc, [ip, #1828]!	; 0x724

00011958 <textdomain@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #204800	; 0x32000
   11960:	ldr	pc, [ip, #1820]!	; 0x71c

00011964 <iswcntrl@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #204800	; 0x32000
   1196c:	ldr	pc, [ip, #1812]!	; 0x714

00011970 <geteuid@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #204800	; 0x32000
   11978:	ldr	pc, [ip, #1804]!	; 0x70c

0001197c <iswprint@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #204800	; 0x32000
   11984:	ldr	pc, [ip, #1796]!	; 0x704

00011988 <setgroups@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #204800	; 0x32000
   11990:	ldr	pc, [ip, #1788]!	; 0x6fc

00011994 <__fxstat64@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #204800	; 0x32000
   1199c:	ldr	pc, [ip, #1780]!	; 0x6f4

000119a0 <fwrite@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #204800	; 0x32000
   119a8:	ldr	pc, [ip, #1772]!	; 0x6ec

000119ac <lseek64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #204800	; 0x32000
   119b4:	ldr	pc, [ip, #1764]!	; 0x6e4

000119b8 <__ctype_get_mb_cur_max@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #204800	; 0x32000
   119c0:	ldr	pc, [ip, #1756]!	; 0x6dc

000119c4 <fread@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #204800	; 0x32000
   119cc:	ldr	pc, [ip, #1748]!	; 0x6d4

000119d0 <__fpending@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #204800	; 0x32000
   119d8:	ldr	pc, [ip, #1740]!	; 0x6cc

000119dc <mbrtowc@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #204800	; 0x32000
   119e4:	ldr	pc, [ip, #1732]!	; 0x6c4

000119e8 <error@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #204800	; 0x32000
   119f0:	ldr	pc, [ip, #1724]!	; 0x6bc

000119f4 <fnmatch@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #204800	; 0x32000
   119fc:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a00 <open64@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #204800	; 0x32000
   11a08:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a0c <getenv@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #204800	; 0x32000
   11a14:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a18 <setgid@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #204800	; 0x32000
   11a20:	ldr	pc, [ip, #1692]!	; 0x69c

00011a24 <malloc@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #204800	; 0x32000
   11a2c:	ldr	pc, [ip, #1684]!	; 0x694

00011a30 <__libc_start_main@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #204800	; 0x32000
   11a38:	ldr	pc, [ip, #1676]!	; 0x68c

00011a3c <strftime@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #204800	; 0x32000
   11a44:	ldr	pc, [ip, #1668]!	; 0x684

00011a48 <__freading@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #204800	; 0x32000
   11a50:	ldr	pc, [ip, #1660]!	; 0x67c

00011a54 <localtime@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #204800	; 0x32000
   11a5c:	ldr	pc, [ip, #1652]!	; 0x674

00011a60 <__ctype_tolower_loc@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #204800	; 0x32000
   11a68:	ldr	pc, [ip, #1644]!	; 0x66c

00011a6c <__ctype_toupper_loc@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #204800	; 0x32000
   11a74:	ldr	pc, [ip, #1636]!	; 0x664

00011a78 <__gmon_start__@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #204800	; 0x32000
   11a80:	ldr	pc, [ip, #1628]!	; 0x65c

00011a84 <getopt_long@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #204800	; 0x32000
   11a8c:	ldr	pc, [ip, #1620]!	; 0x654

00011a90 <__ctype_b_loc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #204800	; 0x32000
   11a98:	ldr	pc, [ip, #1612]!	; 0x64c

00011a9c <exit@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #204800	; 0x32000
   11aa4:	ldr	pc, [ip, #1604]!	; 0x644

00011aa8 <feof@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #204800	; 0x32000
   11ab0:	ldr	pc, [ip, #1596]!	; 0x63c

00011ab4 <strtoul@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #204800	; 0x32000
   11abc:	ldr	pc, [ip, #1588]!	; 0x634

00011ac0 <strlen@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #204800	; 0x32000
   11ac8:	ldr	pc, [ip, #1580]!	; 0x62c

00011acc <strchr@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #204800	; 0x32000
   11ad4:	ldr	pc, [ip, #1572]!	; 0x624

00011ad8 <fprintf@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #204800	; 0x32000
   11ae0:	ldr	pc, [ip, #1564]!	; 0x61c

00011ae4 <ungetc@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #204800	; 0x32000
   11aec:	ldr	pc, [ip, #1556]!	; 0x614

00011af0 <__errno_location@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #204800	; 0x32000
   11af8:	ldr	pc, [ip, #1548]!	; 0x60c

00011afc <iswalnum@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #204800	; 0x32000
   11b04:	ldr	pc, [ip, #1540]!	; 0x604

00011b08 <strncasecmp@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #204800	; 0x32000
   11b10:	ldr	pc, [ip, #1532]!	; 0x5fc

00011b14 <__cxa_atexit@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #204800	; 0x32000
   11b1c:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b20 <getgid@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #204800	; 0x32000
   11b28:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b2c <memset@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #204800	; 0x32000
   11b34:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b38 <btowc@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #204800	; 0x32000
   11b40:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b44 <fgetc@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #204800	; 0x32000
   11b4c:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b50 <fileno@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #204800	; 0x32000
   11b58:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b5c <difftime@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #204800	; 0x32000
   11b64:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b68 <memchr@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #204800	; 0x32000
   11b70:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b74 <fclose@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #204800	; 0x32000
   11b7c:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b80 <strnlen@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #204800	; 0x32000
   11b88:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b8c <fseeko64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #204800	; 0x32000
   11b94:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b98 <fcntl64@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #204800	; 0x32000
   11ba0:	ldr	pc, [ip, #1436]!	; 0x59c

00011ba4 <setlocale@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #204800	; 0x32000
   11bac:	ldr	pc, [ip, #1428]!	; 0x594

00011bb0 <strrchr@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #204800	; 0x32000
   11bb8:	ldr	pc, [ip, #1420]!	; 0x58c

00011bbc <nl_langinfo@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #204800	; 0x32000
   11bc4:	ldr	pc, [ip, #1412]!	; 0x584

00011bc8 <fputc@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #204800	; 0x32000
   11bd0:	ldr	pc, [ip, #1404]!	; 0x57c

00011bd4 <setuid@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #204800	; 0x32000
   11bdc:	ldr	pc, [ip, #1396]!	; 0x574

00011be0 <localeconv@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #204800	; 0x32000
   11be8:	ldr	pc, [ip, #1388]!	; 0x56c

00011bec <clearerr@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #204800	; 0x32000
   11bf4:	ldr	pc, [ip, #1380]!	; 0x564

00011bf8 <sprintf@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #204800	; 0x32000
   11c00:	ldr	pc, [ip, #1372]!	; 0x55c

00011c04 <putc@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #204800	; 0x32000
   11c0c:	ldr	pc, [ip, #1364]!	; 0x554

00011c10 <strpbrk@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #204800	; 0x32000
   11c18:	ldr	pc, [ip, #1356]!	; 0x54c

00011c1c <bindtextdomain@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #204800	; 0x32000
   11c24:	ldr	pc, [ip, #1348]!	; 0x544

00011c28 <getdelim@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #204800	; 0x32000
   11c30:	ldr	pc, [ip, #1340]!	; 0x53c

00011c34 <__xstat64@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #204800	; 0x32000
   11c3c:	ldr	pc, [ip, #1332]!	; 0x534

00011c40 <isatty@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #204800	; 0x32000
   11c48:	ldr	pc, [ip, #1324]!	; 0x52c

00011c4c <towupper@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #204800	; 0x32000
   11c54:	ldr	pc, [ip, #1316]!	; 0x524

00011c58 <fputs@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #204800	; 0x32000
   11c60:	ldr	pc, [ip, #1308]!	; 0x51c

00011c64 <strncmp@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #204800	; 0x32000
   11c6c:	ldr	pc, [ip, #1300]!	; 0x514

00011c70 <abort@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #204800	; 0x32000
   11c78:	ldr	pc, [ip, #1292]!	; 0x50c

00011c7c <getc@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #204800	; 0x32000
   11c84:	ldr	pc, [ip, #1284]!	; 0x504

00011c88 <close@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #204800	; 0x32000
   11c90:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c94 <__lxstat64@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #204800	; 0x32000
   11c9c:	ldr	pc, [ip, #1268]!	; 0x4f4

00011ca0 <dcngettext@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #204800	; 0x32000
   11ca8:	ldr	pc, [ip, #1260]!	; 0x4ec

00011cac <__assert_fail@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #204800	; 0x32000
   11cb4:	ldr	pc, [ip, #1252]!	; 0x4e4

Disassembly of section .text:

00011cc0 <.text>:
   11cc0:	mov	fp, #0
   11cc4:	mov	lr, #0
   11cc8:	pop	{r1}		; (ldr r1, [sp], #4)
   11ccc:	mov	r2, sp
   11cd0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cd4:	push	{r0}		; (str r0, [sp, #-4]!)
   11cd8:	ldr	ip, [pc, #16]	; 11cf0 <__assert_fail@plt+0x44>
   11cdc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce0:	ldr	r0, [pc, #12]	; 11cf4 <__assert_fail@plt+0x48>
   11ce4:	ldr	r3, [pc, #12]	; 11cf8 <__assert_fail@plt+0x4c>
   11ce8:	bl	11a30 <__libc_start_main@plt>
   11cec:	bl	11c70 <abort@plt>
   11cf0:	andeq	r1, r3, r8, lsl pc
   11cf4:			; <UNDEFINED> instruction: 0x00011db0
   11cf8:			; <UNDEFINED> instruction: 0x00031eb8
   11cfc:	ldr	r3, [pc, #20]	; 11d18 <__assert_fail@plt+0x6c>
   11d00:	ldr	r2, [pc, #20]	; 11d1c <__assert_fail@plt+0x70>
   11d04:	add	r3, pc, r3
   11d08:	ldr	r2, [r3, r2]
   11d0c:	cmp	r2, #0
   11d10:	bxeq	lr
   11d14:	b	11a78 <__gmon_start__@plt>
   11d18:	strdeq	r2, [r3], -r4
   11d1c:	muleq	r0, ip, r1
   11d20:	ldr	r0, [pc, #24]	; 11d40 <__assert_fail@plt+0x94>
   11d24:	ldr	r3, [pc, #24]	; 11d44 <__assert_fail@plt+0x98>
   11d28:	cmp	r3, r0
   11d2c:	bxeq	lr
   11d30:	ldr	r3, [pc, #16]	; 11d48 <__assert_fail@plt+0x9c>
   11d34:	cmp	r3, #0
   11d38:	bxeq	lr
   11d3c:	bx	r3
   11d40:	strdeq	r4, [r4], -ip
   11d44:	strdeq	r4, [r4], -ip
   11d48:	andeq	r0, r0, r0
   11d4c:	ldr	r0, [pc, #36]	; 11d78 <__assert_fail@plt+0xcc>
   11d50:	ldr	r1, [pc, #36]	; 11d7c <__assert_fail@plt+0xd0>
   11d54:	sub	r1, r1, r0
   11d58:	asr	r1, r1, #2
   11d5c:	add	r1, r1, r1, lsr #31
   11d60:	asrs	r1, r1, #1
   11d64:	bxeq	lr
   11d68:	ldr	r3, [pc, #16]	; 11d80 <__assert_fail@plt+0xd4>
   11d6c:	cmp	r3, #0
   11d70:	bxeq	lr
   11d74:	bx	r3
   11d78:	strdeq	r4, [r4], -ip
   11d7c:	strdeq	r4, [r4], -ip
   11d80:	andeq	r0, r0, r0
   11d84:	push	{r4, lr}
   11d88:	ldr	r4, [pc, #24]	; 11da8 <__assert_fail@plt+0xfc>
   11d8c:	ldrb	r3, [r4]
   11d90:	cmp	r3, #0
   11d94:	popne	{r4, pc}
   11d98:	bl	11d20 <__assert_fail@plt+0x74>
   11d9c:	mov	r3, #1
   11da0:	strb	r3, [r4]
   11da4:	pop	{r4, pc}
   11da8:	andeq	r4, r4, ip, lsl r2
   11dac:	b	11d4c <__assert_fail@plt+0xa0>
   11db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11db4:	add	fp, sp, #28
   11db8:	sub	sp, sp, #4
   11dbc:	vpush	{d8-d12}
   11dc0:	sub	sp, sp, #184	; 0xb8
   11dc4:	sub	sp, sp, #3072	; 0xc00
   11dc8:	str	r0, [sp, #220]	; 0xdc
   11dcc:	movw	r0, #8004	; 0x1f44
   11dd0:	str	r1, [sp, #144]	; 0x90
   11dd4:	mov	r1, #131072	; 0x20000
   11dd8:	movt	r0, #3
   11ddc:	bl	1571c <__assert_fail@plt+0x3a70>
   11de0:	cmp	r0, #0
   11de4:	blt	11e08 <__assert_fail@plt+0x15c>
   11de8:	mov	r1, #2
   11dec:	mov	r2, #1
   11df0:	mov	r4, r0
   11df4:	bl	1b960 <__assert_fail@plt+0x9cb4>
   11df8:	cmp	r0, #0
   11dfc:	beq	11e4c <__assert_fail@plt+0x1a0>
   11e00:	mov	r0, r4
   11e04:	bl	11c88 <close@plt>
   11e08:	movw	r0, #8028	; 0x1f5c
   11e0c:	mov	r1, #131072	; 0x20000
   11e10:	movt	r0, #3
   11e14:	bl	1571c <__assert_fail@plt+0x3a70>
   11e18:	cmp	r0, #0
   11e1c:	blt	11e40 <__assert_fail@plt+0x194>
   11e20:	mov	r1, #2
   11e24:	mov	r2, #1
   11e28:	mov	r4, r0
   11e2c:	bl	1b960 <__assert_fail@plt+0x9cb4>
   11e30:	cmp	r0, #0
   11e34:	beq	11e5c <__assert_fail@plt+0x1b0>
   11e38:	mov	r0, r4
   11e3c:	bl	11c88 <close@plt>
   11e40:	mvn	r0, #0
   11e44:	str	r0, [sp, #128]	; 0x80
   11e48:	b	11e7c <__assert_fail@plt+0x1d0>
   11e4c:	movw	r0, #11240	; 0x2be8
   11e50:	str	r4, [sp, #128]	; 0x80
   11e54:	movt	r0, #3
   11e58:	b	11e6c <__assert_fail@plt+0x1c0>
   11e5c:	movw	r0, #11240	; 0x2be8
   11e60:	str	r4, [sp, #128]	; 0x80
   11e64:	movt	r0, #3
   11e68:	add	r0, r0, #4
   11e6c:	ldr	r0, [r0]
   11e70:	movw	r1, #16928	; 0x4220
   11e74:	movt	r1, #4
   11e78:	str	r0, [r1, #12]
   11e7c:	bl	11970 <geteuid@plt>
   11e80:	mov	r5, r0
   11e84:	bl	11898 <getuid@plt>
   11e88:	mov	r6, r0
   11e8c:	bl	11b20 <getgid@plt>
   11e90:	mov	r4, r0
   11e94:	cmp	r5, #0
   11e98:	bne	11eb4 <__assert_fail@plt+0x208>
   11e9c:	sub	r1, fp, #728	; 0x2d8
   11ea0:	mov	r0, #1
   11ea4:	str	r4, [fp, #-728]	; 0xfffffd28
   11ea8:	bl	11988 <setgroups@plt>
   11eac:	cmp	r0, #0
   11eb0:	bne	13ac4 <__assert_fail@plt+0x1e18>
   11eb4:	bl	11af0 <__errno_location@plt>
   11eb8:	cmp	r6, r5
   11ebc:	str	r0, [sp, #204]	; 0xcc
   11ec0:	cmpne	r6, #0
   11ec4:	beq	11ef8 <__assert_fail@plt+0x24c>
   11ec8:	ldr	r1, [sp, #204]	; 0xcc
   11ecc:	mov	r0, #0
   11ed0:	str	r0, [r1]
   11ed4:	bl	11898 <getuid@plt>
   11ed8:	bl	11bd4 <setuid@plt>
   11edc:	cmp	r0, #0
   11ee0:	bne	13ae8 <__assert_fail@plt+0x1e3c>
   11ee4:	mov	r0, #0
   11ee8:	mov	r5, #0
   11eec:	bl	11bd4 <setuid@plt>
   11ef0:	cmp	r0, #0
   11ef4:	beq	13b04 <__assert_fail@plt+0x1e58>
   11ef8:	ldr	r1, [sp, #204]	; 0xcc
   11efc:	mov	r0, #0
   11f00:	str	r0, [r1]
   11f04:	mov	r0, r4
   11f08:	bl	11a18 <setgid@plt>
   11f0c:	cmp	r0, #0
   11f10:	bne	139fc <__assert_fail@plt+0x1d50>
   11f14:	ldr	r5, [sp, #144]	; 0x90
   11f18:	ldr	r0, [r5]
   11f1c:	cmp	r0, #0
   11f20:	movweq	r0, #9546	; 0x254a
   11f24:	movteq	r0, #3
   11f28:	bl	17f30 <__assert_fail@plt+0x6284>
   11f2c:	movw	r1, #11207	; 0x2bc7
   11f30:	mov	r0, #6
   11f34:	movt	r1, #3
   11f38:	bl	11ba4 <setlocale@plt>
   11f3c:	movw	r4, #11769	; 0x2df9
   11f40:	movw	r1, #8186	; 0x1ffa
   11f44:	movt	r4, #3
   11f48:	movt	r1, #3
   11f4c:	mov	r0, r4
   11f50:	bl	11c1c <bindtextdomain@plt>
   11f54:	mov	r0, r4
   11f58:	bl	11958 <textdomain@plt>
   11f5c:	mov	r0, #0
   11f60:	bl	17ff4 <__assert_fail@plt+0x6348>
   11f64:	movw	sl, #16928	; 0x4220
   11f68:	movt	sl, #4
   11f6c:	str	r0, [sl, #16]
   11f70:	movw	r0, #22064	; 0x5630
   11f74:	movt	r0, #1
   11f78:	bl	31f1c <__assert_fail@plt+0x20270>
   11f7c:	cmp	r0, #0
   11f80:	bne	139d0 <__assert_fail@plt+0x1d24>
   11f84:	movw	r0, #15232	; 0x3b80
   11f88:	movt	r0, #1
   11f8c:	bl	31f1c <__assert_fail@plt+0x20270>
   11f90:	cmp	r0, #0
   11f94:	bne	139d0 <__assert_fail@plt+0x1d24>
   11f98:	mov	r0, #1
   11f9c:	vmov.i32	q8, #0	; 0x00000000
   11fa0:	strb	r0, [sl]
   11fa4:	add	r0, sl, #40	; 0x28
   11fa8:	str	r0, [sp, #136]	; 0x88
   11fac:	vst1.64	{d16-d17}, [r0]
   11fb0:	movw	r0, #8245	; 0x2035
   11fb4:	movt	r0, #3
   11fb8:	bl	11a0c <getenv@plt>
   11fbc:	str	r0, [sp, #176]	; 0xb0
   11fc0:	mov	r0, #0
   11fc4:	movw	r4, #8257	; 0x2041
   11fc8:	movw	r6, #11252	; 0x2bf4
   11fcc:	sub	lr, fp, #1024	; 0x400
   11fd0:	mov	r8, #0
   11fd4:	mvn	r9, #0
   11fd8:	str	r0, [sp, #112]	; 0x70
   11fdc:	mov	r0, #0
   11fe0:	sub	r7, lr, #356	; 0x164
   11fe4:	movt	r4, #3
   11fe8:	movt	r6, #3
   11fec:	str	r8, [sl, #20]
   11ff0:	str	r0, [sp, #184]	; 0xb8
   11ff4:	mov	r0, #0
   11ff8:	str	r0, [sp, #108]	; 0x6c
   11ffc:	mov	r0, #0
   12000:	str	r0, [sp, #156]	; 0x9c
   12004:	mov	r0, #0
   12008:	str	r0, [sp, #212]	; 0xd4
   1200c:	mov	r0, #0
   12010:	str	r0, [sp, #116]	; 0x74
   12014:	mov	r0, #0
   12018:	str	r0, [sp, #224]	; 0xe0
   1201c:	mov	r0, #0
   12020:	str	r0, [sp, #180]	; 0xb4
   12024:	mov	r0, #0
   12028:	b	12030 <__assert_fail@plt+0x384>
   1202c:	mov	r0, #1
   12030:	str	r0, [sp, #228]	; 0xe4
   12034:	b	12040 <__assert_fail@plt+0x394>
   12038:	mov	r0, #1
   1203c:	strb	r0, [sl, #8]
   12040:	ldr	r0, [sp, #220]	; 0xdc
   12044:	mov	r1, r5
   12048:	mov	r2, r4
   1204c:	mov	r3, r6
   12050:	str	r9, [fp, #-1380]	; 0xfffffa9c
   12054:	str	r7, [sp]
   12058:	bl	11a84 <getopt_long@plt>
   1205c:	sub	r1, r0, #48	; 0x30
   12060:	cmp	r1, #209	; 0xd1
   12064:	bhi	12530 <__assert_fail@plt+0x884>
   12068:	add	r0, pc, #0
   1206c:	ldr	pc, [r0, r1, lsl #2]
   12070:			; <UNDEFINED> instruction: 0x000123b8
   12074:	andeq	r3, r1, r8, asr #17
   12078:	andeq	r3, r1, r8, asr #17
   1207c:	andeq	r3, r1, r8, asr #17
   12080:	andeq	r3, r1, r8, asr #17
   12084:	andeq	r3, r1, r8, asr #17
   12088:	andeq	r3, r1, r8, asr #17
   1208c:	andeq	r3, r1, r8, asr #17
   12090:	andeq	r3, r1, r8, asr #17
   12094:	andeq	r3, r1, r8, asr #17
   12098:	andeq	r3, r1, r8, asr #17
   1209c:	andeq	r3, r1, r8, asr #17
   120a0:	andeq	r3, r1, r8, asr #17
   120a4:	andeq	r3, r1, r8, asr #17
   120a8:	andeq	r3, r1, r8, asr #17
   120ac:	andeq	r3, r1, r8, asr #17
   120b0:	andeq	r3, r1, r8, asr #17
   120b4:	andeq	r2, r1, ip, lsr #32
   120b8:	andeq	r3, r1, r8, asr #17
   120bc:	andeq	r3, r1, r8, asr #17
   120c0:	andeq	r3, r1, r8, asr #17
   120c4:	andeq	r2, r1, ip, asr #9
   120c8:	andeq	r3, r1, r8, asr #17
   120cc:	andeq	r3, r1, r8, asr #17
   120d0:	andeq	r2, r1, r8, lsr r0
   120d4:	andeq	r3, r1, r8, asr #17
   120d8:	andeq	r3, r1, r8, asr #17
   120dc:	andeq	r3, r1, r8, asr #17
   120e0:	andeq	r2, r1, r4, lsr r4
   120e4:	andeq	r3, r1, r8, asr #17
   120e8:	andeq	r3, r1, r8, asr #17
   120ec:	andeq	r3, r1, r8, asr #17
   120f0:	andeq	r2, r1, r8, lsr r0
   120f4:	andeq	r3, r1, r8, asr #17
   120f8:	andeq	r3, r1, r8, asr #17
   120fc:	andeq	r2, r1, ip, lsr r4
   12100:	andeq	r3, r1, r8, asr #17
   12104:	andeq	r3, r1, r8, asr #17
   12108:	andeq	r3, r1, r8, asr #17
   1210c:	andeq	r3, r1, r8, asr #17
   12110:	andeq	r3, r1, r8, asr #17
   12114:	andeq	r3, r1, r8, asr #17
   12118:	andeq	r3, r1, r8, asr #17
   1211c:	andeq	r3, r1, r8, asr #17
   12120:	andeq	r3, r1, r8, asr #17
   12124:	andeq	r3, r1, r8, asr #17
   12128:	andeq	r3, r1, r8, asr #17
   1212c:	andeq	r3, r1, r8, asr #17
   12130:	andeq	r3, r1, r8, asr #17
   12134:	andeq	r3, r1, r8, asr #17
   12138:	andeq	r2, r1, ip, lsl r4
   1213c:	andeq	r2, r1, r0, ror #8
   12140:	andeq	r2, r1, r0, lsl #8
   12144:	andeq	r2, r1, ip, ror #8
   12148:	andeq	r3, r1, r8, asr #17
   1214c:	andeq	r3, r1, r8, asr #17
   12150:	ldrdeq	r3, [r1], -r0
   12154:	ldrdeq	r2, [r1], -r8
   12158:	andeq	r3, r1, r8, asr #17
   1215c:	andeq	r3, r1, r8, asr #17
   12160:	andeq	r2, r1, r8, asr #7
   12164:	andeq	r2, r1, r0, asr #32
   12168:	andeq	r3, r1, r8, asr #17
   1216c:	andeq	r3, r1, r8, asr #17
   12170:	andeq	r2, r1, r8, lsr #8
   12174:	andeq	r3, r1, r8, asr #17
   12178:	andeq	r2, r1, r4, ror #9
   1217c:	andeq	r2, r1, r0, asr #32
   12180:	andeq	r3, r1, r8, asr #17
   12184:	andeq	r3, r1, r8, asr #17
   12188:	andeq	r2, r1, r4, ror #10
   1218c:	strdeq	r2, [r1], -r0
   12190:	andeq	r3, r1, r8, asr #17
   12194:	andeq	r3, r1, r8, asr #17
   12198:	andeq	r3, r1, r8, asr #17
   1219c:	andeq	r3, r1, r8, asr #17
   121a0:	andeq	r3, r1, r8, asr #17
   121a4:	andeq	r3, r1, r8, asr #17
   121a8:	andeq	r3, r1, r8, asr #17
   121ac:	andeq	r3, r1, r8, asr #17
   121b0:	andeq	r3, r1, r8, asr #17
   121b4:	andeq	r3, r1, r8, asr #17
   121b8:	andeq	r3, r1, r8, asr #17
   121bc:	andeq	r3, r1, r8, asr #17
   121c0:	andeq	r3, r1, r8, asr #17
   121c4:	andeq	r3, r1, r8, asr #17
   121c8:	andeq	r3, r1, r8, asr #17
   121cc:	andeq	r3, r1, r8, asr #17
   121d0:	andeq	r3, r1, r8, asr #17
   121d4:	andeq	r3, r1, r8, asr #17
   121d8:	andeq	r3, r1, r8, asr #17
   121dc:	andeq	r3, r1, r8, asr #17
   121e0:	andeq	r3, r1, r8, asr #17
   121e4:	andeq	r3, r1, r8, asr #17
   121e8:	andeq	r3, r1, r8, asr #17
   121ec:	andeq	r3, r1, r8, asr #17
   121f0:	andeq	r3, r1, r8, asr #17
   121f4:	andeq	r3, r1, r8, asr #17
   121f8:	andeq	r3, r1, r8, asr #17
   121fc:	andeq	r3, r1, r8, asr #17
   12200:	andeq	r3, r1, r8, asr #17
   12204:	andeq	r3, r1, r8, asr #17
   12208:	andeq	r3, r1, r8, asr #17
   1220c:	andeq	r3, r1, r8, asr #17
   12210:	andeq	r3, r1, r8, asr #17
   12214:	andeq	r3, r1, r8, asr #17
   12218:	andeq	r3, r1, r8, asr #17
   1221c:	andeq	r3, r1, r8, asr #17
   12220:	andeq	r3, r1, r8, asr #17
   12224:	andeq	r3, r1, r8, asr #17
   12228:	andeq	r3, r1, r8, asr #17
   1222c:	andeq	r3, r1, r8, asr #17
   12230:	andeq	r3, r1, r8, asr #17
   12234:	andeq	r3, r1, r8, asr #17
   12238:	andeq	r3, r1, r8, asr #17
   1223c:	andeq	r3, r1, r8, asr #17
   12240:	andeq	r3, r1, r8, asr #17
   12244:	andeq	r3, r1, r8, asr #17
   12248:	andeq	r3, r1, r8, asr #17
   1224c:	andeq	r3, r1, r8, asr #17
   12250:	andeq	r3, r1, r8, asr #17
   12254:	andeq	r3, r1, r8, asr #17
   12258:	andeq	r3, r1, r8, asr #17
   1225c:	andeq	r3, r1, r8, asr #17
   12260:	andeq	r3, r1, r8, asr #17
   12264:	andeq	r3, r1, r8, asr #17
   12268:	andeq	r3, r1, r8, asr #17
   1226c:	andeq	r3, r1, r8, asr #17
   12270:	andeq	r3, r1, r8, asr #17
   12274:	andeq	r3, r1, r8, asr #17
   12278:	andeq	r3, r1, r8, asr #17
   1227c:	andeq	r3, r1, r8, asr #17
   12280:	andeq	r3, r1, r8, asr #17
   12284:	andeq	r3, r1, r8, asr #17
   12288:	andeq	r3, r1, r8, asr #17
   1228c:	andeq	r3, r1, r8, asr #17
   12290:	andeq	r3, r1, r8, asr #17
   12294:	andeq	r3, r1, r8, asr #17
   12298:	andeq	r3, r1, r8, asr #17
   1229c:	andeq	r3, r1, r8, asr #17
   122a0:	andeq	r3, r1, r8, asr #17
   122a4:	andeq	r3, r1, r8, asr #17
   122a8:	andeq	r3, r1, r8, asr #17
   122ac:	andeq	r3, r1, r8, asr #17
   122b0:	andeq	r3, r1, r8, asr #17
   122b4:	andeq	r3, r1, r8, asr #17
   122b8:	andeq	r3, r1, r8, asr #17
   122bc:	andeq	r3, r1, r8, asr #17
   122c0:	andeq	r3, r1, r8, asr #17
   122c4:	andeq	r3, r1, r8, asr #17
   122c8:	andeq	r3, r1, r8, asr #17
   122cc:	andeq	r3, r1, r8, asr #17
   122d0:	andeq	r3, r1, r8, asr #17
   122d4:	andeq	r3, r1, r8, asr #17
   122d8:	andeq	r3, r1, r8, asr #17
   122dc:	andeq	r3, r1, r8, asr #17
   122e0:	andeq	r3, r1, r8, asr #17
   122e4:	andeq	r3, r1, r8, asr #17
   122e8:	andeq	r3, r1, r8, asr #17
   122ec:	andeq	r3, r1, r8, asr #17
   122f0:	andeq	r3, r1, r8, asr #17
   122f4:	andeq	r3, r1, r8, asr #17
   122f8:	andeq	r3, r1, r8, asr #17
   122fc:	andeq	r3, r1, r8, asr #17
   12300:	andeq	r3, r1, r8, asr #17
   12304:	andeq	r3, r1, r8, asr #17
   12308:	andeq	r3, r1, r8, asr #17
   1230c:	andeq	r3, r1, r8, asr #17
   12310:	andeq	r3, r1, r8, asr #17
   12314:	andeq	r3, r1, r8, asr #17
   12318:	andeq	r3, r1, r8, asr #17
   1231c:	andeq	r3, r1, r8, asr #17
   12320:	andeq	r3, r1, r8, asr #17
   12324:	andeq	r3, r1, r8, asr #17
   12328:	andeq	r3, r1, r8, asr #17
   1232c:	andeq	r3, r1, r8, asr #17
   12330:	andeq	r3, r1, r8, asr #17
   12334:	andeq	r3, r1, r8, asr #17
   12338:	andeq	r3, r1, r8, asr #17
   1233c:	andeq	r3, r1, r8, asr #17
   12340:	andeq	r3, r1, r8, asr #17
   12344:	andeq	r3, r1, r8, asr #17
   12348:	andeq	r3, r1, r8, asr #17
   1234c:	andeq	r3, r1, r8, asr #17
   12350:	andeq	r3, r1, r8, asr #17
   12354:	andeq	r3, r1, r8, asr #17
   12358:	andeq	r3, r1, r8, asr #17
   1235c:	andeq	r3, r1, r8, asr #17
   12360:	andeq	r3, r1, r8, asr #17
   12364:	andeq	r3, r1, r8, asr #17
   12368:	andeq	r3, r1, r8, asr #17
   1236c:	andeq	r3, r1, r8, asr #17
   12370:	andeq	r3, r1, r8, asr #17
   12374:	andeq	r3, r1, r8, asr #17
   12378:	andeq	r3, r1, r8, asr #17
   1237c:	andeq	r3, r1, r8, asr #17
   12380:	andeq	r3, r1, r8, asr #17
   12384:	andeq	r3, r1, r8, asr #17
   12388:	andeq	r3, r1, r8, asr #17
   1238c:	andeq	r3, r1, r8, asr #17
   12390:	andeq	r3, r1, r8, asr #17
   12394:	andeq	r3, r1, r8, asr #17
   12398:	andeq	r3, r1, r8, asr #17
   1239c:	andeq	r3, r1, r8, asr #17
   123a0:	andeq	r3, r1, r8, asr #17
   123a4:	andeq	r3, r1, r8, asr #17
   123a8:	andeq	r3, r1, r8, asr #17
   123ac:	andeq	r3, r1, r8, asr #17
   123b0:	andeq	r2, r1, r8, asr #8
   123b4:	andeq	r2, r1, r8, ror r4
   123b8:	mov	r0, #1
   123bc:	strb	r8, [sl]
   123c0:	strb	r0, [sl, #4]
   123c4:	b	12040 <__assert_fail@plt+0x394>
   123c8:	movw	r0, #16920	; 0x4218
   123cc:	ldr	r3, [sp, #136]	; 0x88
   123d0:	sub	r1, fp, #728	; 0x2d8
   123d4:	mov	r2, #10
   123d8:	str	r8, [sp]
   123dc:	movt	r0, #4
   123e0:	ldr	r0, [r0]
   123e4:	str	r0, [fp, #-728]	; 0xfffffd28
   123e8:	bl	1ac58 <__assert_fail@plt+0x8fac>
   123ec:	cmp	r0, #0
   123f0:	bne	138d8 <__assert_fail@plt+0x1c2c>
   123f4:	mov	r0, #1
   123f8:	str	r0, [sp, #212]	; 0xd4
   123fc:	b	12040 <__assert_fail@plt+0x394>
   12400:	movw	r0, #16920	; 0x4218
   12404:	movt	r0, #4
   12408:	ldr	r0, [r0]
   1240c:	cmp	r0, #0
   12410:	str	r0, [sp, #176]	; 0xb0
   12414:	bne	12040 <__assert_fail@plt+0x394>
   12418:	b	138fc <__assert_fail@plt+0x1c50>
   1241c:	mov	r0, #1
   12420:	str	r0, [sp, #156]	; 0x9c
   12424:	b	12040 <__assert_fail@plt+0x394>
   12428:	mov	r0, #1
   1242c:	str	r0, [sp, #184]	; 0xb8
   12430:	b	12040 <__assert_fail@plt+0x394>
   12434:	strb	r8, [sl, #8]
   12438:	b	12040 <__assert_fail@plt+0x394>
   1243c:	mov	r0, #1
   12440:	str	r0, [sp, #180]	; 0xb4
   12444:	b	12040 <__assert_fail@plt+0x394>
   12448:	movw	r0, #16920	; 0x4218
   1244c:	movt	r0, #4
   12450:	ldr	r0, [r0]
   12454:	bl	14d78 <__assert_fail@plt+0x30cc>
   12458:	str	r0, [sp, #224]	; 0xe0
   1245c:	b	12040 <__assert_fail@plt+0x394>
   12460:	mov	r0, #1
   12464:	str	r0, [sp, #108]	; 0x6c
   12468:	b	12040 <__assert_fail@plt+0x394>
   1246c:	mov	r0, #1
   12470:	str	r0, [sl, #20]
   12474:	b	12040 <__assert_fail@plt+0x394>
   12478:	movw	r0, #16920	; 0x4218
   1247c:	movt	r0, #4
   12480:	ldr	r5, [r0]
   12484:	ldrb	r0, [r5]
   12488:	cmp	r0, #0
   1248c:	beq	1391c <__assert_fail@plt+0x1c70>
   12490:	ldr	r0, [sp, #204]	; 0xcc
   12494:	sub	r1, fp, #728	; 0x2d8
   12498:	mov	r2, #10
   1249c:	str	r8, [r0]
   124a0:	mov	r0, r5
   124a4:	bl	11ab4 <strtoul@plt>
   124a8:	cmp	r0, #0
   124ac:	beq	124fc <__assert_fail@plt+0x850>
   124b0:	cmn	r0, #1
   124b4:	bne	1250c <__assert_fail@plt+0x860>
   124b8:	ldr	r1, [sp, #204]	; 0xcc
   124bc:	ldr	r1, [r1]
   124c0:	cmp	r1, #34	; 0x22
   124c4:	bne	1250c <__assert_fail@plt+0x860>
   124c8:	b	13940 <__assert_fail@plt+0x1c94>
   124cc:	mov	r0, #2
   124d0:	str	r0, [sl, #20]
   124d4:	b	12040 <__assert_fail@plt+0x394>
   124d8:	mov	r0, #1
   124dc:	str	r0, [sp, #112]	; 0x70
   124e0:	b	12040 <__assert_fail@plt+0x394>
   124e4:	mov	r0, #1
   124e8:	str	r0, [sp, #116]	; 0x74
   124ec:	b	12040 <__assert_fail@plt+0x394>
   124f0:	mov	r0, #0
   124f4:	str	r0, [sp, #156]	; 0x9c
   124f8:	b	12040 <__assert_fail@plt+0x394>
   124fc:	ldr	r1, [sp, #204]	; 0xcc
   12500:	ldr	r1, [r1]
   12504:	cmp	r1, #22
   12508:	beq	13948 <__assert_fail@plt+0x1c9c>
   1250c:	ldr	r1, [fp, #-728]	; 0xfffffd28
   12510:	ldrb	r1, [r1]
   12514:	cmp	r1, #0
   12518:	bne	13988 <__assert_fail@plt+0x1cdc>
   1251c:	ldr	r5, [sp, #144]	; 0x90
   12520:	movw	r1, #16808	; 0x41a8
   12524:	movt	r1, #4
   12528:	str	r0, [r1]
   1252c:	b	12040 <__assert_fail@plt+0x394>
   12530:	cmn	r0, #1
   12534:	bne	138c8 <__assert_fail@plt+0x1c1c>
   12538:	ldr	r0, [sp, #128]	; 0x80
   1253c:	cmp	r0, #0
   12540:	blt	12578 <__assert_fail@plt+0x8cc>
   12544:	ldr	r9, [sp, #176]	; 0xb0
   12548:	ldr	r7, [sp, #180]	; 0xb4
   1254c:	cmp	r9, #0
   12550:	beq	12580 <__assert_fail@plt+0x8d4>
   12554:	bl	11c88 <close@plt>
   12558:	mvn	r0, #0
   1255c:	str	r0, [sp, #128]	; 0x80
   12560:	b	12580 <__assert_fail@plt+0x8d4>
   12564:	movw	r0, #9546	; 0x254a
   12568:	movt	r0, #3
   1256c:	bl	1488c <__assert_fail@plt+0x2be0>
   12570:	mov	r5, #0
   12574:	b	13870 <__assert_fail@plt+0x1bc4>
   12578:	ldr	r7, [sp, #180]	; 0xb4
   1257c:	ldr	r9, [sp, #176]	; 0xb0
   12580:	ldr	r0, [sp, #108]	; 0x6c
   12584:	orrs	r0, r7, r0
   12588:	ldr	r0, [sp, #184]	; 0xb8
   1258c:	movweq	r0, #1
   12590:	cmp	r7, #0
   12594:	str	r0, [sp, #184]	; 0xb8
   12598:	movw	r0, #16904	; 0x4208
   1259c:	movt	r0, #4
   125a0:	beq	125c0 <__assert_fail@plt+0x914>
   125a4:	ldr	r0, [r0]
   125a8:	ldr	r1, [sp, #220]	; 0xdc
   125ac:	subs	r0, r0, r1
   125b0:	ldr	r1, [sp, #212]	; 0xd4
   125b4:	moveq	r1, r0
   125b8:	str	r1, [sp, #212]	; 0xd4
   125bc:	b	125d8 <__assert_fail@plt+0x92c>
   125c0:	ldr	r0, [r0]
   125c4:	ldr	r1, [sp, #220]	; 0xdc
   125c8:	cmp	r0, r1
   125cc:	ldreq	r0, [sp, #108]	; 0x6c
   125d0:	cmpeq	r0, #0
   125d4:	beq	13b54 <__assert_fail@plt+0x1ea8>
   125d8:	mov	r0, #1
   125dc:	bl	11c40 <isatty@plt>
   125e0:	sub	r0, r0, #1
   125e4:	cmp	r9, #0
   125e8:	clz	r0, r0
   125ec:	lsr	r0, r0, #5
   125f0:	strb	r0, [sl, #9]
   125f4:	beq	12618 <__assert_fail@plt+0x96c>
   125f8:	movw	r1, #14632	; 0x3928
   125fc:	add	r0, sp, #344	; 0x158
   12600:	add	r3, sp, #348	; 0x15c
   12604:	mov	r2, #1
   12608:	str	r0, [sp]
   1260c:	movt	r1, #3
   12610:	mov	r0, r9
   12614:	bl	1546c <__assert_fail@plt+0x37c0>
   12618:	ldr	r2, [sp, #228]	; 0xe4
   1261c:	movw	r0, #17948	; 0x461c
   12620:	movw	r1, #17788	; 0x457c
   12624:	add	r6, sp, #352	; 0x160
   12628:	vldr	d9, [pc, #944]	; 129e0 <__assert_fail@plt+0xd34>
   1262c:	vldr	d12, [pc, #948]	; 129e8 <__assert_fail@plt+0xd3c>
   12630:	vmov.i32	q5, #0	; 0x00000000
   12634:	mov	r4, #0
   12638:	str	r7, [sp, #180]	; 0xb4
   1263c:	str	r9, [sp, #176]	; 0xb0
   12640:	movt	r0, #1
   12644:	movt	r1, #1
   12648:	cmp	r2, #0
   1264c:	movw	r2, #17020	; 0x427c
   12650:	moveq	r1, r0
   12654:	movw	r0, #16984	; 0x4258
   12658:	movt	r2, #1
   1265c:	str	r1, [sp, #100]	; 0x64
   12660:	ldr	r1, [sp, #112]	; 0x70
   12664:	movt	r0, #1
   12668:	cmp	r1, #0
   1266c:	movne	r2, r0
   12670:	movw	r0, #16800	; 0x41a0
   12674:	str	r2, [sp, #200]	; 0xc8
   12678:	movw	r2, #16892	; 0x41fc
   1267c:	movt	r0, #1
   12680:	movt	r2, #1
   12684:	movne	r2, r0
   12688:	ldr	r0, [sp, #224]	; 0xe0
   1268c:	cmp	r1, #0
   12690:	str	r2, [sp, #196]	; 0xc4
   12694:	orrne	r0, r0, #4194304	; 0x400000
   12698:	str	r0, [sp, #224]	; 0xe0
   1269c:	ldr	r0, [sp, #184]	; 0xb8
   126a0:	orr	r0, r0, r7
   126a4:	str	r0, [sp, #20]
   126a8:	add	r0, r6, #276	; 0x114
   126ac:	str	r0, [sp, #88]	; 0x58
   126b0:	add	r0, r6, #148	; 0x94
   126b4:	str	r0, [sp, #84]	; 0x54
   126b8:	add	r0, r6, #260	; 0x104
   126bc:	str	r0, [sp, #80]	; 0x50
   126c0:	add	r0, r6, #132	; 0x84
   126c4:	str	r0, [sp, #76]	; 0x4c
   126c8:	add	r0, r6, #244	; 0xf4
   126cc:	str	r0, [sp, #72]	; 0x48
   126d0:	add	r0, r6, #116	; 0x74
   126d4:	str	r0, [sp, #68]	; 0x44
   126d8:	add	r0, r6, #228	; 0xe4
   126dc:	str	r0, [sp, #64]	; 0x40
   126e0:	add	r0, r6, #100	; 0x64
   126e4:	str	r0, [sp, #60]	; 0x3c
   126e8:	add	r0, r6, #212	; 0xd4
   126ec:	str	r0, [sp, #56]	; 0x38
   126f0:	add	r0, r6, #84	; 0x54
   126f4:	str	r0, [sp, #52]	; 0x34
   126f8:	add	r0, r6, #196	; 0xc4
   126fc:	str	r0, [sp, #48]	; 0x30
   12700:	add	r0, r6, #68	; 0x44
   12704:	str	r0, [sp, #44]	; 0x2c
   12708:	add	r0, r6, #180	; 0xb4
   1270c:	str	r0, [sp, #40]	; 0x28
   12710:	add	r0, r6, #52	; 0x34
   12714:	str	r0, [sp, #36]	; 0x24
   12718:	add	r0, r6, #164	; 0xa4
   1271c:	str	r0, [sp, #32]
   12720:	add	r0, r6, #292	; 0x124
   12724:	str	r0, [sp, #104]	; 0x68
   12728:	add	r0, r6, #36	; 0x24
   1272c:	str	r0, [sp, #120]	; 0x78
   12730:	add	r0, r6, #16
   12734:	str	r0, [sp, #28]
   12738:	add	r0, sp, #240	; 0xf0
   1273c:	add	r1, r0, #80	; 0x50
   12740:	add	r0, r0, #48	; 0x30
   12744:	str	r0, [sp, #92]	; 0x5c
   12748:	mov	r0, #0
   1274c:	str	r1, [sp, #96]	; 0x60
   12750:	str	r0, [sp, #24]
   12754:	ldr	r0, [sp, #212]	; 0xd4
   12758:	cmp	r0, #0
   1275c:	beq	12774 <__assert_fail@plt+0xac8>
   12760:	add	r3, sl, #40	; 0x28
   12764:	ldm	r3, {r0, r1, r2, r3}
   12768:	subs	r0, r2, r0
   1276c:	sbcs	r0, r3, r1
   12770:	bcs	137cc <__assert_fail@plt+0x1b20>
   12774:	add	r0, sl, #88	; 0x58
   12778:	add	r2, sl, #56	; 0x38
   1277c:	cmp	r9, #0
   12780:	vst1.64	{d10-d11}, [r0]
   12784:	add	r0, sl, #72	; 0x48
   12788:	vst1.64	{d10-d11}, [r2]
   1278c:	str	r2, [sp, #148]	; 0x94
   12790:	vst1.64	{d10-d11}, [r0]
   12794:	beq	12800 <__assert_fail@plt+0xb54>
   12798:	ldr	r1, [sp, #344]	; 0x158
   1279c:	mov	r5, #0
   127a0:	cmp	r1, #0
   127a4:	beq	12828 <__assert_fail@plt+0xb7c>
   127a8:	cmp	r1, #1
   127ac:	bne	12834 <__assert_fail@plt+0xb88>
   127b0:	ldr	r2, [sp, #348]	; 0x15c
   127b4:	mov	r0, r9
   127b8:	movw	r7, #8004	; 0x1f44
   127bc:	movt	r7, #3
   127c0:	ldrb	r2, [r0, r2]!
   127c4:	cmp	r2, #46	; 0x2e
   127c8:	beq	12848 <__assert_fail@plt+0xb9c>
   127cc:	cmp	r2, #45	; 0x2d
   127d0:	bne	1283c <__assert_fail@plt+0xb90>
   127d4:	ldr	r0, [sp, #24]
   127d8:	tst	r0, #1
   127dc:	bne	13884 <__assert_fail@plt+0x1bd8>
   127e0:	mov	r0, #0
   127e4:	movw	r7, #8423	; 0x20e7
   127e8:	mov	r4, #0
   127ec:	str	r0, [sp, #172]	; 0xac
   127f0:	mov	r0, #1
   127f4:	movt	r7, #3
   127f8:	str	r0, [sp, #24]
   127fc:	b	12878 <__assert_fail@plt+0xbcc>
   12800:	ldr	r0, [sp, #128]	; 0x80
   12804:	cmn	r0, #1
   12808:	beq	137cc <__assert_fail@plt+0x1b20>
   1280c:	ldr	r7, [sl, #12]
   12810:	mov	r4, r0
   12814:	mov	r1, #0
   12818:	mvn	r0, #0
   1281c:	str	r1, [sp, #172]	; 0xac
   12820:	str	r0, [sp, #128]	; 0x80
   12824:	b	12878 <__assert_fail@plt+0xbcc>
   12828:	movw	r7, #8004	; 0x1f44
   1282c:	movt	r7, #3
   12830:	b	12848 <__assert_fail@plt+0xb9c>
   12834:	ldr	r0, [sp, #348]	; 0x15c
   12838:	add	r0, r9, r0
   1283c:	bl	118d4 <strndup@plt>
   12840:	mov	r7, r0
   12844:	mov	r5, r0
   12848:	mov	r0, r7
   1284c:	mov	r1, #131072	; 0x20000
   12850:	str	r5, [sp, #172]	; 0xac
   12854:	bl	1571c <__assert_fail@plt+0x3a70>
   12858:	cmp	r0, #0
   1285c:	blt	1383c <__assert_fail@plt+0x1b90>
   12860:	mov	r1, #2
   12864:	mov	r2, #1
   12868:	mov	r4, r0
   1286c:	bl	1b960 <__assert_fail@plt+0x9cb4>
   12870:	cmp	r0, #0
   12874:	bne	13834 <__assert_fail@plt+0x1b88>
   12878:	mov	r0, #3
   1287c:	mov	r1, r4
   12880:	add	r2, sp, #240	; 0xf0
   12884:	bl	11994 <__fxstat64@plt>
   12888:	cmp	r0, #0
   1288c:	str	r7, [sp, #188]	; 0xbc
   12890:	beq	128dc <__assert_fail@plt+0xc30>
   12894:	ldr	r0, [sp, #204]	; 0xcc
   12898:	mov	r1, #8
   1289c:	mov	r2, r7
   128a0:	ldr	r5, [r0]
   128a4:	mov	r0, #0
   128a8:	str	r0, [sp, #192]	; 0xc0
   128ac:	mov	r0, #0
   128b0:	bl	198dc <__assert_fail@plt+0x7c30>
   128b4:	movw	r2, #14644	; 0x3934
   128b8:	mov	r3, r0
   128bc:	mov	r0, #0
   128c0:	mov	r1, r5
   128c4:	movt	r2, #3
   128c8:	bl	119e8 <error@plt>
   128cc:	mov	r0, #0
   128d0:	mov	r9, #0
   128d4:	str	r0, [sp, #140]	; 0x8c
   128d8:	b	12a24 <__assert_fail@plt+0xd78>
   128dc:	ldr	r0, [sp, #92]	; 0x5c
   128e0:	ldr	r9, [r0]
   128e4:	ldr	r0, [r0, #4]
   128e8:	str	r0, [sp, #140]	; 0x8c
   128ec:	ldr	r0, [sp, #96]	; 0x60
   128f0:	ldrd	r0, [r0]
   128f4:	str	r0, [sp, #232]	; 0xe8
   128f8:	sub	r0, fp, #728	; 0x2d8
   128fc:	str	r1, [sp, #236]	; 0xec
   12900:	bl	11928 <time@plt>
   12904:	cmn	r0, #1
   12908:	beq	129f0 <__assert_fail@plt+0xd44>
   1290c:	ldr	r1, [sp, #320]	; 0x140
   12910:	ldr	r0, [fp, #-728]	; 0xfffffd28
   12914:	bl	11b5c <difftime@plt>
   12918:	movw	r0, #16808	; 0x41a8
   1291c:	movw	r1, #20864	; 0x5180
   12920:	vmov.f64	d8, d0
   12924:	movt	r0, #4
   12928:	movt	r1, #1
   1292c:	ldr	r0, [r0]
   12930:	mul	r0, r0, r1
   12934:	vmov	s0, r0
   12938:	vcvt.f64.u32	d16, s0
   1293c:	vcmpe.f64	d8, d16
   12940:	vmrs	APSR_nzcv, fpscr
   12944:	ble	12a1c <__assert_fail@plt+0xd70>
   12948:	movw	r1, #8455	; 0x2107
   1294c:	mov	r0, #0
   12950:	mov	r2, #5
   12954:	movt	r1, #3
   12958:	bl	11940 <dcgettext@plt>
   1295c:	ldr	r2, [sp, #188]	; 0xbc
   12960:	str	r0, [sp, #228]	; 0xe4
   12964:	mov	r0, #0
   12968:	mov	r1, #8
   1296c:	bl	198dc <__assert_fail@plt+0x7c30>
   12970:	mov	r8, r0
   12974:	movw	r0, #16808	; 0x41a8
   12978:	movw	r5, #11620	; 0x2d64
   1297c:	mov	r2, #5
   12980:	movt	r0, #4
   12984:	movt	r5, #3
   12988:	ldr	r6, [r0]
   1298c:	mov	r0, #0
   12990:	mov	r1, r5
   12994:	bl	11940 <dcgettext@plt>
   12998:	mov	r7, r0
   1299c:	mov	r0, #0
   129a0:	mov	r1, r5
   129a4:	mov	r2, #5
   129a8:	bl	11940 <dcgettext@plt>
   129ac:	ldr	r2, [sp, #228]	; 0xe4
   129b0:	vdiv.f64	d16, d8, d9
   129b4:	str	r0, [sp, #16]
   129b8:	mov	r0, #0
   129bc:	mov	r1, #0
   129c0:	mov	r3, r8
   129c4:	str	r6, [sp]
   129c8:	add	r6, sp, #352	; 0x160
   129cc:	str	r7, [sp, #4]
   129d0:	vstr	d16, [sp, #8]
   129d4:	bl	119e8 <error@plt>
   129d8:	b	12a1c <__assert_fail@plt+0xd70>
   129dc:	nop	{0}
   129e0:	andeq	r0, r0, r0
   129e4:	rscsmi	r1, r5, r0, lsl #16
   129e8:	andeq	r0, r0, r0
   129ec:	subsmi	r0, r9, r0
   129f0:	ldr	r0, [sp, #204]	; 0xcc
   129f4:	movw	r1, #8431	; 0x20ef
   129f8:	mov	r2, #5
   129fc:	movt	r1, #3
   12a00:	ldr	r5, [r0]
   12a04:	mov	r0, #0
   12a08:	bl	11940 <dcgettext@plt>
   12a0c:	mov	r2, r0
   12a10:	mov	r0, #0
   12a14:	mov	r1, r5
   12a18:	bl	119e8 <error@plt>
   12a1c:	mov	r0, #1
   12a20:	str	r0, [sp, #192]	; 0xc0
   12a24:	movw	r1, #11749	; 0x2de5
   12a28:	mov	r0, r4
   12a2c:	movt	r1, #3
   12a30:	bl	11814 <fdopen@plt>
   12a34:	cmp	r0, #0
   12a38:	beq	13820 <__assert_fail@plt+0x1b74>
   12a3c:	mov	r4, r0
   12a40:	movw	r0, #16904	; 0x4208
   12a44:	movt	r0, #4
   12a48:	ldr	r7, [r0]
   12a4c:	mov	r0, #0
   12a50:	str	r0, [sl, #24]
   12a54:	str	r0, [sl, #28]
   12a58:	str	r0, [sl, #32]
   12a5c:	str	r0, [sp, #384]	; 0x180
   12a60:	str	r0, [sp, #356]	; 0x164
   12a64:	strb	r0, [sl, #10]
   12a68:	str	r0, [sp, #360]	; 0x168
   12a6c:	ldr	r0, [sp, #188]	; 0xbc
   12a70:	str	r0, [sp, #380]	; 0x17c
   12a74:	mov	r0, #128	; 0x80
   12a78:	str	r4, [sp, #376]	; 0x178
   12a7c:	str	r0, [sp, #368]	; 0x170
   12a80:	ldr	r0, [sl, #20]
   12a84:	str	r0, [sp, #168]	; 0xa8
   12a88:	mov	r0, #128	; 0x80
   12a8c:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12a90:	mov	r1, #1
   12a94:	mov	r2, #2
   12a98:	mov	r3, r4
   12a9c:	mov	r5, r0
   12aa0:	str	r0, [sp, #364]	; 0x16c
   12aa4:	str	r4, [sp, #208]	; 0xd0
   12aa8:	bl	119c4 <fread@plt>
   12aac:	mov	r4, r0
   12ab0:	ldr	r0, [sp, #192]	; 0xc0
   12ab4:	cmp	r0, #0
   12ab8:	mov	r1, r0
   12abc:	add	r0, sp, #232	; 0xe8
   12ac0:	movne	r1, r0
   12ac4:	cmp	r4, #3
   12ac8:	str	r1, [sp, #152]	; 0x98
   12acc:	bcs	139b0 <__assert_fail@plt+0x1d04>
   12ad0:	cmp	r4, #2
   12ad4:	ldrbeq	r0, [r5, #1]
   12ad8:	cmpeq	r0, #0
   12adc:	beq	12f2c <__assert_fail@plt+0x1280>
   12ae0:	ldr	r3, [sp, #208]	; 0xd0
   12ae4:	add	r0, r5, r4
   12ae8:	rsb	r2, r4, #10
   12aec:	mov	r1, #1
   12af0:	bl	119c4 <fread@plt>
   12af4:	add	r5, r0, r4
   12af8:	ldr	r4, [sp, #364]	; 0x16c
   12afc:	cmp	r5, #10
   12b00:	bcc	12b20 <__assert_fail@plt+0xe74>
   12b04:	movw	r1, #11625	; 0x2d69
   12b08:	mov	r0, r4
   12b0c:	mov	r2, #10
   12b10:	movt	r1, #3
   12b14:	bl	11934 <memcmp@plt>
   12b18:	cmp	r0, #0
   12b1c:	beq	12f04 <__assert_fail@plt+0x1258>
   12b20:	ldr	r0, [sp, #368]	; 0x170
   12b24:	cmp	r0, #255	; 0xff
   12b28:	bhi	12b4c <__assert_fail@plt+0xea0>
   12b2c:	ldr	r1, [sp, #28]
   12b30:	mov	r0, #256	; 0x100
   12b34:	mov	r2, #1
   12b38:	str	r0, [sp, #368]	; 0x170
   12b3c:	mov	r0, r4
   12b40:	bl	1a79c <__assert_fail@plt+0x8af0>
   12b44:	mov	r4, r0
   12b48:	str	r0, [sp, #364]	; 0x16c
   12b4c:	cmp	r5, #255	; 0xff
   12b50:	bgt	12b78 <__assert_fail@plt+0xecc>
   12b54:	ldr	r3, [sp, #376]	; 0x178
   12b58:	add	r0, r4, r5
   12b5c:	rsb	r2, r5, #256	; 0x100
   12b60:	mov	r1, #1
   12b64:	bl	119c4 <fread@plt>
   12b68:	add	r0, r0, r5
   12b6c:	cmp	r0, #256	; 0x100
   12b70:	bne	13a08 <__assert_fail@plt+0x1d5c>
   12b74:	ldr	r4, [sp, #364]	; 0x16c
   12b78:	ldr	r1, [sp, #120]	; 0x78
   12b7c:	add	r0, r4, #256	; 0x100
   12b80:	cmp	r1, r0
   12b84:	ldrcc	r0, [sp, #104]	; 0x68
   12b88:	cmpcc	r4, r0
   12b8c:	bcc	12c84 <__assert_fail@plt+0xfd8>
   12b90:	mov	r0, r4
   12b94:	mov	r1, #224	; 0xe0
   12b98:	vld2.8	{d16-d19}, [r0], r1
   12b9c:	ldr	r1, [sp, #120]	; 0x78
   12ba0:	vst1.32	{d16-d17}, [r1]
   12ba4:	ldr	r1, [sp, #32]
   12ba8:	vst1.32	{d18-d19}, [r1]
   12bac:	add	r1, r4, #32
   12bb0:	vld2.8	{d16-d19}, [r1]
   12bb4:	ldr	r1, [sp, #36]	; 0x24
   12bb8:	vst1.32	{d16-d17}, [r1]
   12bbc:	ldr	r1, [sp, #40]	; 0x28
   12bc0:	vst1.32	{d18-d19}, [r1]
   12bc4:	add	r1, r4, #64	; 0x40
   12bc8:	vld2.8	{d16-d19}, [r1]
   12bcc:	ldr	r1, [sp, #44]	; 0x2c
   12bd0:	vst1.32	{d16-d17}, [r1]
   12bd4:	ldr	r1, [sp, #48]	; 0x30
   12bd8:	vst1.32	{d18-d19}, [r1]
   12bdc:	add	r1, r4, #96	; 0x60
   12be0:	vld2.8	{d16-d19}, [r1]
   12be4:	ldr	r1, [sp, #52]	; 0x34
   12be8:	vst1.32	{d16-d17}, [r1]
   12bec:	ldr	r1, [sp, #56]	; 0x38
   12bf0:	vst1.32	{d18-d19}, [r1]
   12bf4:	add	r1, r4, #128	; 0x80
   12bf8:	vld2.8	{d16-d19}, [r1]
   12bfc:	ldr	r1, [sp, #60]	; 0x3c
   12c00:	vorr	q10, q8, q8
   12c04:	vorr	q8, q9, q9
   12c08:	vst1.32	{d20-d21}, [r1]
   12c0c:	ldr	r1, [sp, #64]	; 0x40
   12c10:	vst1.32	{d16-d17}, [r1]
   12c14:	add	r1, r4, #160	; 0xa0
   12c18:	vld2.8	{d16-d19}, [r1]
   12c1c:	ldr	r1, [sp, #68]	; 0x44
   12c20:	vorr	q10, q8, q8
   12c24:	vorr	q8, q9, q9
   12c28:	vst1.32	{d20-d21}, [r1]
   12c2c:	ldr	r1, [sp, #72]	; 0x48
   12c30:	vst1.32	{d16-d17}, [r1]
   12c34:	add	r1, r4, #192	; 0xc0
   12c38:	vld2.8	{d16-d19}, [r1]
   12c3c:	ldr	r1, [sp, #76]	; 0x4c
   12c40:	vorr	q10, q8, q8
   12c44:	vorr	q8, q9, q9
   12c48:	vst1.32	{d20-d21}, [r1]
   12c4c:	ldr	r1, [sp, #80]	; 0x50
   12c50:	vst1.32	{d16-d17}, [r1]
   12c54:	vld2.8	{d16-d19}, [r0]
   12c58:	ldr	r0, [sp, #84]	; 0x54
   12c5c:	vorr	q10, q8, q8
   12c60:	vorr	q8, q9, q9
   12c64:	vst1.32	{d20-d21}, [r0]
   12c68:	ldr	r0, [sp, #88]	; 0x58
   12c6c:	vst1.32	{d16-d17}, [r0]
   12c70:	mov	r0, #1
   12c74:	str	r0, [sp, #132]	; 0x84
   12c78:	mov	r0, #0
   12c7c:	str	r0, [sp, #160]	; 0xa0
   12c80:	b	12cc0 <__assert_fail@plt+0x1014>
   12c84:	mov	r1, #0
   12c88:	add	r0, r4, #1
   12c8c:	str	r1, [sp, #160]	; 0xa0
   12c90:	mov	r1, #0
   12c94:	ldrb	r3, [r0, #-1]
   12c98:	add	r2, r6, r1
   12c9c:	add	r1, r1, #1
   12ca0:	cmp	r1, #128	; 0x80
   12ca4:	strb	r3, [r2, #36]	; 0x24
   12ca8:	ldrb	r3, [r0]
   12cac:	add	r0, r0, #2
   12cb0:	strb	r3, [r2, #164]	; 0xa4
   12cb4:	bne	12c94 <__assert_fail@plt+0xfe8>
   12cb8:	mov	r0, #1
   12cbc:	str	r0, [sp, #132]	; 0x84
   12cc0:	movw	r4, #16020	; 0x3e94
   12cc4:	movw	r0, #9621	; 0x2595
   12cc8:	movt	r4, #1
   12ccc:	movt	r0, #3
   12cd0:	str	r0, [sp, #124]	; 0x7c
   12cd4:	ldr	r0, [sp, #220]	; 0xdc
   12cd8:	sub	r0, r0, r7
   12cdc:	str	r0, [sp, #228]	; 0xe4
   12ce0:	mov	r0, #12
   12ce4:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12ce8:	str	r4, [r0]
   12cec:	mov	r4, #0
   12cf0:	mov	r5, r0
   12cf4:	add	r6, sl, #24
   12cf8:	str	r9, [sp, #164]	; 0xa4
   12cfc:	str	r4, [r0, #4]
   12d00:	str	r4, [r0, #8]
   12d04:	ldr	r0, [sl, #28]
   12d08:	mov	r1, r6
   12d0c:	str	r6, [sp, #216]	; 0xd8
   12d10:	cmp	r0, #0
   12d14:	addne	r1, r0, #8
   12d18:	ldr	r0, [sp, #156]	; 0x9c
   12d1c:	str	r5, [r1]
   12d20:	str	r5, [sl, #28]
   12d24:	cmp	r0, #0
   12d28:	beq	12d60 <__assert_fail@plt+0x10b4>
   12d2c:	mov	r0, #12
   12d30:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12d34:	mov	r5, r0
   12d38:	movw	r0, #16588	; 0x40cc
   12d3c:	mov	r1, r6
   12d40:	movt	r0, #1
   12d44:	stm	r5, {r0, r4}
   12d48:	str	r4, [r5, #8]
   12d4c:	ldr	r0, [sl, #28]
   12d50:	cmp	r0, #0
   12d54:	addne	r1, r0, #8
   12d58:	str	r5, [r1]
   12d5c:	str	r5, [sl, #28]
   12d60:	ldr	r0, [sp, #228]	; 0xe4
   12d64:	cmp	r0, #1
   12d68:	blt	13088 <__assert_fail@plt+0x13dc>
   12d6c:	ldr	r0, [sp, #144]	; 0x90
   12d70:	add	r1, r0, r7, lsl #2
   12d74:	ldr	r0, [sp, #116]	; 0x74
   12d78:	cmp	r0, #0
   12d7c:	beq	12e58 <__assert_fail@plt+0x11ac>
   12d80:	mov	r6, #0
   12d84:	mov	r0, #1
   12d88:	mov	r9, r1
   12d8c:	strb	r0, [sl, #10]
   12d90:	mov	r0, #32
   12d94:	ldr	r5, [r1, r6, lsl #2]
   12d98:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12d9c:	ldr	r8, [sp, #224]	; 0xe0
   12da0:	mov	r7, r0
   12da4:	add	r0, r0, #16
   12da8:	vst1.32	{d10-d11}, [r0]
   12dac:	mov	r4, r7
   12db0:	mov	r0, #20
   12db4:	vst1.32	{d10-d11}, [r4], r0
   12db8:	mov	r0, r8
   12dbc:	bl	1d518 <__assert_fail@plt+0xb86c>
   12dc0:	mov	r0, #100	; 0x64
   12dc4:	str	r0, [r7, #4]
   12dc8:	mov	r0, #100	; 0x64
   12dcc:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12dd0:	str	r0, [r7]
   12dd4:	mov	r0, #0
   12dd8:	str	r8, [r7, #12]
   12ddc:	str	r0, [r7, #16]
   12de0:	mov	r0, #0
   12de4:	str	r0, [r4]
   12de8:	mov	r0, r5
   12dec:	mov	r4, #0
   12df0:	bl	11ac0 <strlen@plt>
   12df4:	mov	r1, r0
   12df8:	mov	r0, r5
   12dfc:	mov	r2, r7
   12e00:	bl	1bda0 <__assert_fail@plt+0xa0f4>
   12e04:	cmp	r0, #0
   12e08:	bne	138b0 <__assert_fail@plt+0x1c04>
   12e0c:	mov	r0, #12
   12e10:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12e14:	mov	r5, r0
   12e18:	movw	r0, #16620	; 0x40ec
   12e1c:	add	r6, r6, #1
   12e20:	movt	r0, #1
   12e24:	stm	r5, {r0, r7}
   12e28:	str	r4, [r5, #8]
   12e2c:	ldr	r0, [sl, #28]
   12e30:	add	r1, r0, #8
   12e34:	cmp	r0, #0
   12e38:	ldr	r0, [sp, #228]	; 0xe4
   12e3c:	addeq	r1, sl, #24
   12e40:	str	r5, [r1]
   12e44:	mov	r1, r9
   12e48:	str	r5, [sl, #28]
   12e4c:	cmp	r6, r0
   12e50:	blt	12d84 <__assert_fail@plt+0x10d8>
   12e54:	b	13088 <__assert_fail@plt+0x13dc>
   12e58:	ldr	r0, [sp, #112]	; 0x70
   12e5c:	cmp	r0, #0
   12e60:	beq	12fec <__assert_fail@plt+0x1340>
   12e64:	ldr	r0, [sp, #220]	; 0xdc
   12e68:	sub	r9, r0, r7
   12e6c:	mov	r0, #1
   12e70:	mov	r8, r1
   12e74:	strb	r0, [sl, #10]
   12e78:	ldr	r7, [r1]
   12e7c:	movw	r1, #10406	; 0x28a6
   12e80:	movt	r1, #3
   12e84:	mov	r0, r7
   12e88:	bl	11c10 <strpbrk@plt>
   12e8c:	cmp	r0, #0
   12e90:	beq	12eb4 <__assert_fail@plt+0x1208>
   12e94:	mov	r0, #12
   12e98:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12e9c:	mov	r5, r0
   12ea0:	movw	r0, #16704	; 0x4140
   12ea4:	movt	r0, #1
   12ea8:	stm	r5, {r0, r7}
   12eac:	str	r4, [r5, #8]
   12eb0:	b	12edc <__assert_fail@plt+0x1230>
   12eb4:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   12eb8:	cmp	r0, #1
   12ebc:	ldr	r6, [sp, #200]	; 0xc8
   12ec0:	ldr	r0, [sp, #196]	; 0xc4
   12ec4:	moveq	r6, r0
   12ec8:	mov	r0, #12
   12ecc:	bl	1a5f0 <__assert_fail@plt+0x8944>
   12ed0:	stm	r0, {r6, r7}
   12ed4:	mov	r5, r0
   12ed8:	str	r4, [r0, #8]
   12edc:	ldr	r0, [sl, #28]
   12ee0:	mov	r1, r8
   12ee4:	add	r1, r8, #4
   12ee8:	cmp	r0, #0
   12eec:	streq	r5, [sl, #24]
   12ef0:	strne	r5, [r0, #8]
   12ef4:	subs	r9, r9, #1
   12ef8:	str	r5, [sl, #28]
   12efc:	bne	12e6c <__assert_fail@plt+0x11c0>
   12f00:	b	13088 <__assert_fail@plt+0x13dc>
   12f04:	mov	r0, #0
   12f08:	movw	r4, #15408	; 0x3c30
   12f0c:	str	r0, [sp, #160]	; 0xa0
   12f10:	movw	r0, #9553	; 0x2551
   12f14:	movt	r4, #1
   12f18:	movt	r0, #3
   12f1c:	str	r0, [sp, #124]	; 0x7c
   12f20:	mov	r0, #0
   12f24:	str	r0, [sp, #132]	; 0x84
   12f28:	b	12cd4 <__assert_fail@plt+0x1028>
   12f2c:	bl	11a90 <__ctype_b_loc@plt>
   12f30:	ldrb	r1, [r5]
   12f34:	ldr	r0, [r0]
   12f38:	add	r0, r0, r1, lsl #1
   12f3c:	ldrb	r0, [r0, #1]
   12f40:	tst	r0, #8
   12f44:	beq	12ae0 <__assert_fail@plt+0xe34>
   12f48:	sub	r6, r1, #48	; 0x30
   12f4c:	cmp	r1, #50	; 0x32
   12f50:	bcc	132a8 <__assert_fail@plt+0x15fc>
   12f54:	movw	r1, #9908	; 0x26b4
   12f58:	mov	r0, #0
   12f5c:	mov	r2, #5
   12f60:	mov	r4, #0
   12f64:	movt	r1, #3
   12f68:	bl	11940 <dcgettext@plt>
   12f6c:	ldr	r7, [sp, #188]	; 0xbc
   12f70:	mov	r8, r0
   12f74:	mov	r0, #0
   12f78:	mov	r1, #8
   12f7c:	mov	r2, r7
   12f80:	bl	198dc <__assert_fail@plt+0x7c30>
   12f84:	mov	r3, r0
   12f88:	ldrb	r0, [r5, #1]
   12f8c:	mov	r1, #0
   12f90:	mov	r2, r8
   12f94:	str	r0, [sp]
   12f98:	mov	r0, #0
   12f9c:	bl	119e8 <error@plt>
   12fa0:	movw	r1, #9244	; 0x241c
   12fa4:	mov	r0, #0
   12fa8:	mov	r2, #5
   12fac:	movt	r1, #3
   12fb0:	bl	11940 <dcgettext@plt>
   12fb4:	mov	r5, r0
   12fb8:	mov	r0, #0
   12fbc:	mov	r1, #8
   12fc0:	mov	r2, r7
   12fc4:	bl	198dc <__assert_fail@plt+0x7c30>
   12fc8:	mov	r3, r0
   12fcc:	mov	r0, #0
   12fd0:	mov	r1, #0
   12fd4:	mov	r2, r5
   12fd8:	str	r6, [sp]
   12fdc:	bl	119e8 <error@plt>
   12fe0:	ldr	r7, [sp, #180]	; 0xb4
   12fe4:	add	r6, sp, #352	; 0x160
   12fe8:	b	13778 <__assert_fail@plt+0x1acc>
   12fec:	ldr	r6, [sp, #228]	; 0xe4
   12ff0:	mov	r0, #1
   12ff4:	mov	r8, r1
   12ff8:	strb	r0, [sl, #10]
   12ffc:	ldr	r7, [r1]
   13000:	movw	r1, #10406	; 0x28a6
   13004:	movt	r1, #3
   13008:	mov	r0, r7
   1300c:	bl	11c10 <strpbrk@plt>
   13010:	cmp	r0, #0
   13014:	beq	13038 <__assert_fail@plt+0x138c>
   13018:	mov	r0, #12
   1301c:	bl	1a5f0 <__assert_fail@plt+0x8944>
   13020:	mov	r5, r0
   13024:	movw	r0, #16752	; 0x4170
   13028:	movt	r0, #1
   1302c:	stm	r5, {r0, r7}
   13030:	str	r4, [r5, #8]
   13034:	b	13064 <__assert_fail@plt+0x13b8>
   13038:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   1303c:	cmp	r0, #1
   13040:	ldr	r9, [sp, #200]	; 0xc8
   13044:	ldr	r0, [sp, #196]	; 0xc4
   13048:	moveq	r9, r0
   1304c:	mov	r0, #12
   13050:	bl	1a5f0 <__assert_fail@plt+0x8944>
   13054:	str	r9, [r0]
   13058:	str	r7, [r0, #4]
   1305c:	mov	r5, r0
   13060:	str	r4, [r0, #8]
   13064:	ldr	r0, [sl, #28]
   13068:	mov	r1, r8
   1306c:	add	r1, r8, #4
   13070:	cmp	r0, #0
   13074:	streq	r5, [sl, #24]
   13078:	strne	r5, [r0, #8]
   1307c:	subs	r6, r6, #1
   13080:	str	r5, [sl, #28]
   13084:	bne	12ff0 <__assert_fail@plt+0x1344>
   13088:	ldr	r0, [sp, #168]	; 0xa8
   1308c:	cmp	r0, #2
   13090:	beq	130cc <__assert_fail@plt+0x1420>
   13094:	ldr	r7, [sp, #180]	; 0xb4
   13098:	ldr	r9, [sp, #164]	; 0xa4
   1309c:	cmp	r0, #1
   130a0:	bne	13140 <__assert_fail@plt+0x1494>
   130a4:	mov	r0, #1
   130a8:	strb	r0, [sl, #10]
   130ac:	mov	r0, #12
   130b0:	ldrb	r4, [sl, #8]
   130b4:	bl	1a5f0 <__assert_fail@plt+0x8944>
   130b8:	cmp	r4, #0
   130bc:	beq	130f8 <__assert_fail@plt+0x144c>
   130c0:	movw	r1, #17108	; 0x42d4
   130c4:	movt	r1, #1
   130c8:	b	13100 <__assert_fail@plt+0x1454>
   130cc:	mov	r0, #1
   130d0:	strb	r0, [sl, #10]
   130d4:	mov	r0, #12
   130d8:	ldrb	r4, [sl, #8]
   130dc:	bl	1a5f0 <__assert_fail@plt+0x8944>
   130e0:	ldr	r7, [sp, #180]	; 0xb4
   130e4:	cmp	r4, #0
   130e8:	beq	1310c <__assert_fail@plt+0x1460>
   130ec:	movw	r1, #17212	; 0x433c
   130f0:	movt	r1, #1
   130f4:	b	13114 <__assert_fail@plt+0x1468>
   130f8:	movw	r1, #17056	; 0x42a0
   130fc:	movt	r1, #1
   13100:	str	r1, [r0]
   13104:	mov	r4, #0
   13108:	b	13120 <__assert_fail@plt+0x1474>
   1310c:	movw	r1, #17160	; 0x4308
   13110:	movt	r1, #1
   13114:	ldr	r9, [sp, #164]	; 0xa4
   13118:	mov	r4, #0
   1311c:	str	r1, [r0]
   13120:	ldr	r1, [sl, #28]
   13124:	str	r4, [r0, #4]
   13128:	str	r4, [r0, #8]
   1312c:	add	r2, r1, #8
   13130:	cmp	r1, #0
   13134:	addeq	r2, sl, #24
   13138:	str	r0, [r2]
   1313c:	str	r0, [sl, #28]
   13140:	cmp	r7, #0
   13144:	beq	1317c <__assert_fail@plt+0x14d0>
   13148:	mov	r0, #12
   1314c:	bl	1a5f0 <__assert_fail@plt+0x8944>
   13150:	movw	r1, #17264	; 0x4370
   13154:	movt	r1, #1
   13158:	str	r1, [r0]
   1315c:	ldr	r1, [sp, #148]	; 0x94
   13160:	stmib	r0, {r1, r4}
   13164:	ldr	r1, [sl, #28]
   13168:	add	r2, r1, #8
   1316c:	cmp	r1, #0
   13170:	addeq	r2, sl, #24
   13174:	str	r0, [r2]
   13178:	str	r0, [sl, #28]
   1317c:	ldr	r0, [sp, #184]	; 0xb8
   13180:	add	r6, sp, #352	; 0x160
   13184:	cmp	r0, #0
   13188:	beq	131d4 <__assert_fail@plt+0x1528>
   1318c:	ldrb	r4, [sl]
   13190:	mov	r0, #12
   13194:	bl	1a5f0 <__assert_fail@plt+0x8944>
   13198:	movw	r1, #17632	; 0x44e0
   1319c:	movw	r2, #17532	; 0x447c
   131a0:	cmp	r4, #0
   131a4:	mov	r4, #0
   131a8:	movt	r1, #1
   131ac:	movt	r2, #1
   131b0:	movne	r1, r2
   131b4:	stm	r0, {r1, r4}
   131b8:	str	r4, [r0, #8]
   131bc:	ldr	r1, [sl, #28]
   131c0:	ldr	r2, [sp, #216]	; 0xd8
   131c4:	cmp	r1, #0
   131c8:	addne	r2, r1, #8
   131cc:	str	r0, [r2]
   131d0:	str	r0, [sl, #28]
   131d4:	mov	r0, #12
   131d8:	bl	1a5f0 <__assert_fail@plt+0x8944>
   131dc:	ldr	r1, [sp, #212]	; 0xd4
   131e0:	cmp	r1, #0
   131e4:	beq	131f4 <__assert_fail@plt+0x1548>
   131e8:	movw	r1, #17700	; 0x4524
   131ec:	movt	r1, #1
   131f0:	b	131fc <__assert_fail@plt+0x1550>
   131f4:	movw	r1, #17756	; 0x455c
   131f8:	movt	r1, #1
   131fc:	str	r1, [r0]
   13200:	ldr	r1, [sp, #136]	; 0x88
   13204:	str	r1, [r0, #4]
   13208:	ldr	r1, [sl, #28]
   1320c:	str	r4, [r0, #8]
   13210:	cmp	r1, #0
   13214:	addne	r1, r1, #8
   13218:	strne	r1, [sp, #216]	; 0xd8
   1321c:	ldr	r1, [sp, #216]	; 0xd8
   13220:	str	r0, [r1]
   13224:	str	r0, [sl, #28]
   13228:	ldr	r0, [sp, #228]	; 0xe4
   1322c:	cmp	r0, #2
   13230:	movw	r0, #18112	; 0x46c0
   13234:	movt	r0, #1
   13238:	ldrge	r0, [r5, #8]
   1323c:	strge	r0, [sl, #32]
   13240:	ldrge	r0, [sp, #100]	; 0x64
   13244:	cmp	r7, #0
   13248:	str	r0, [sl, #36]	; 0x24
   1324c:	beq	13270 <__assert_fail@plt+0x15c4>
   13250:	movw	r1, #9625	; 0x2599
   13254:	mov	r0, #0
   13258:	mov	r2, #5
   1325c:	movt	r1, #3
   13260:	bl	11940 <dcgettext@plt>
   13264:	ldr	r1, [sp, #380]	; 0x17c
   13268:	ldr	r2, [sp, #124]	; 0x7c
   1326c:	bl	11868 <printf@plt>
   13270:	ldr	r0, [sp, #376]	; 0x178
   13274:	bl	11c7c <getc@plt>
   13278:	ldr	r1, [sp, #160]	; 0xa0
   1327c:	str	r0, [sp, #352]	; 0x160
   13280:	cmp	r1, #0
   13284:	cmnne	r0, #1
   13288:	bne	13298 <__assert_fail@plt+0x15ec>
   1328c:	cmn	r0, #1
   13290:	bne	13394 <__assert_fail@plt+0x16e8>
   13294:	b	133b4 <__assert_fail@plt+0x1708>
   13298:	ldr	r1, [sp, #376]	; 0x178
   1329c:	bl	11ae4 <ungetc@plt>
   132a0:	str	r4, [sp, #352]	; 0x160
   132a4:	b	13394 <__assert_fail@plt+0x16e8>
   132a8:	cmp	r6, #1
   132ac:	bne	132e8 <__assert_fail@plt+0x163c>
   132b0:	ldr	r0, [sl, #20]
   132b4:	cmp	r0, #2
   132b8:	bne	1330c <__assert_fail@plt+0x1660>
   132bc:	movw	r1, #9317	; 0x2465
   132c0:	mov	r0, #0
   132c4:	mov	r2, #5
   132c8:	mov	r4, #0
   132cc:	movt	r1, #3
   132d0:	bl	11940 <dcgettext@plt>
   132d4:	mov	r2, r0
   132d8:	mov	r0, #0
   132dc:	mov	r1, #0
   132e0:	bl	119e8 <error@plt>
   132e4:	b	12fe0 <__assert_fail@plt+0x1334>
   132e8:	mov	r0, #1
   132ec:	movw	r4, #15408	; 0x3c30
   132f0:	str	r0, [sp, #160]	; 0xa0
   132f4:	mov	r0, #0
   132f8:	movt	r4, #1
   132fc:	str	r0, [sp, #132]	; 0x84
   13300:	movw	r0, #9545	; 0x2549
   13304:	movt	r0, #3
   13308:	b	12cd0 <__assert_fail@plt+0x1024>
   1330c:	mov	r0, #0
   13310:	str	r0, [sp, #132]	; 0x84
   13314:	mov	r0, #1
   13318:	str	r0, [sp, #160]	; 0xa0
   1331c:	ldr	r0, [sp, #20]
   13320:	cmp	r0, #0
   13324:	ldrne	r0, [sp, #168]	; 0xa8
   13328:	cmpne	r0, #1
   1332c:	beq	13374 <__assert_fail@plt+0x16c8>
   13330:	movw	r1, #9489	; 0x2511
   13334:	mov	r0, #0
   13338:	mov	r2, #5
   1333c:	str	r0, [sp, #132]	; 0x84
   13340:	mov	r0, #0
   13344:	movt	r1, #3
   13348:	bl	11940 <dcgettext@plt>
   1334c:	ldr	r2, [sp, #188]	; 0xbc
   13350:	mov	r5, r0
   13354:	mov	r0, #0
   13358:	mov	r1, #8
   1335c:	bl	198dc <__assert_fail@plt+0x7c30>
   13360:	mov	r3, r0
   13364:	mov	r0, #0
   13368:	mov	r1, #0
   1336c:	mov	r2, r5
   13370:	bl	119e8 <error@plt>
   13374:	movw	r0, #9545	; 0x2549
   13378:	movw	r4, #15408	; 0x3c30
   1337c:	movt	r0, #3
   13380:	movt	r4, #1
   13384:	str	r0, [sp, #124]	; 0x7c
   13388:	mov	r0, #1
   1338c:	str	r0, [sp, #168]	; 0xa8
   13390:	b	12cd4 <__assert_fail@plt+0x1028>
   13394:	ldr	r1, [sl, #36]	; 0x24
   13398:	mov	r0, r6
   1339c:	blx	r1
   133a0:	cmp	r0, #8
   133a4:	beq	133b4 <__assert_fail@plt+0x1708>
   133a8:	ldr	r0, [sp, #352]	; 0x160
   133ac:	cmn	r0, #1
   133b0:	bne	13394 <__assert_fail@plt+0x16e8>
   133b4:	cmp	r7, #0
   133b8:	beq	1372c <__assert_fail@plt+0x1a80>
   133bc:	ldr	r0, [sp, #132]	; 0x84
   133c0:	cmp	r0, #0
   133c4:	beq	13448 <__assert_fail@plt+0x179c>
   133c8:	movw	r1, #9659	; 0x25bb
   133cc:	mov	r0, #0
   133d0:	mov	r2, #5
   133d4:	movt	r1, #3
   133d8:	bl	11940 <dcgettext@plt>
   133dc:	movw	r1, #9714	; 0x25f2
   133e0:	mov	r4, r0
   133e4:	mov	r0, #0
   133e8:	mov	r2, #5
   133ec:	movt	r1, #3
   133f0:	bl	11940 <dcgettext@plt>
   133f4:	mov	r1, r0
   133f8:	ldr	r0, [sp, #384]	; 0x180
   133fc:	cmp	r0, #2
   13400:	beq	13420 <__assert_fail@plt+0x1774>
   13404:	cmp	r0, #1
   13408:	bne	13430 <__assert_fail@plt+0x1784>
   1340c:	movw	r0, #14644	; 0x3934
   13410:	mov	r1, r4
   13414:	movt	r0, #3
   13418:	bl	11868 <printf@plt>
   1341c:	b	13448 <__assert_fail@plt+0x179c>
   13420:	movw	r0, #14644	; 0x3934
   13424:	movt	r0, #3
   13428:	bl	11868 <printf@plt>
   1342c:	b	13448 <__assert_fail@plt+0x179c>
   13430:	movw	r1, #9766	; 0x2626
   13434:	mov	r0, #0
   13438:	mov	r2, #5
   1343c:	movt	r1, #3
   13440:	bl	11940 <dcgettext@plt>
   13444:	bl	11868 <printf@plt>
   13448:	ldr	r0, [sp, #140]	; 0x8c
   1344c:	orrs	r0, r9, r0
   13450:	ldreq	r0, [sp, #152]	; 0x98
   13454:	cmpeq	r0, #0
   13458:	beq	1372c <__assert_fail@plt+0x1a80>
   1345c:	ldr	r0, [sp, #192]	; 0xc0
   13460:	cmp	r0, #0
   13464:	beq	1350c <__assert_fail@plt+0x1860>
   13468:	ldr	r0, [sp, #152]	; 0x98
   1346c:	bl	11a54 <localtime@plt>
   13470:	cmp	r0, #0
   13474:	beq	1350c <__assert_fail@plt+0x1860>
   13478:	movw	r2, #10576	; 0x2950
   1347c:	mov	r4, r0
   13480:	sub	r5, fp, #728	; 0x2d8
   13484:	mov	r1, #20
   13488:	mov	r0, r5
   1348c:	movt	r2, #3
   13490:	mov	r3, r4
   13494:	bl	11a3c <strftime@plt>
   13498:	cmp	r0, #19
   1349c:	bne	13a44 <__assert_fail@plt+0x1d98>
   134a0:	ldrb	r0, [fp, #-709]	; 0xfffffd3b
   134a4:	cmp	r0, #0
   134a8:	bne	13a64 <__assert_fail@plt+0x1db8>
   134ac:	ldrb	r0, [fp, #-710]	; 0xfffffd3a
   134b0:	cmp	r0, #0
   134b4:	beq	13a84 <__assert_fail@plt+0x1dd8>
   134b8:	movw	r1, #10733	; 0x29ed
   134bc:	mov	r0, #0
   134c0:	mov	r2, #5
   134c4:	movt	r1, #3
   134c8:	bl	11940 <dcgettext@plt>
   134cc:	ldr	r1, [sp, #152]	; 0x98
   134d0:	ldr	r2, [r1, #4]
   134d4:	mov	r1, r5
   134d8:	bl	11868 <printf@plt>
   134dc:	movw	r2, #10772	; 0x2a14
   134e0:	mov	r0, r5
   134e4:	mov	r1, #20
   134e8:	mov	r3, r4
   134ec:	movt	r2, #3
   134f0:	bl	11a3c <strftime@plt>
   134f4:	cmp	r0, #5
   134f8:	bne	13aa4 <__assert_fail@plt+0x1df8>
   134fc:	movw	r0, #12975	; 0x32af
   13500:	mov	r1, r5
   13504:	movt	r0, #3
   13508:	bl	11868 <printf@plt>
   1350c:	movw	r1, #10788	; 0x2a24
   13510:	movw	r2, #10819	; 0x2a43
   13514:	mov	r0, #5
   13518:	mov	r3, r9
   1351c:	str	r0, [sp]
   13520:	mov	r0, #0
   13524:	movt	r1, #3
   13528:	movt	r2, #3
   1352c:	bl	11ca0 <dcngettext@plt>
   13530:	sub	r5, fp, #728	; 0x2d8
   13534:	mov	r6, #1
   13538:	mov	r8, #0
   1353c:	mov	r4, r0
   13540:	mov	r0, r9
   13544:	mov	r1, #0
   13548:	mov	r3, #0
   1354c:	mov	r2, r5
   13550:	str	r6, [sp]
   13554:	str	r8, [sp, #4]
   13558:	str	r6, [sp, #8]
   1355c:	str	r8, [sp, #12]
   13560:	bl	15768 <__assert_fail@plt+0x3abc>
   13564:	mov	r1, r0
   13568:	mov	r0, r4
   1356c:	bl	11868 <printf@plt>
   13570:	ldrb	r0, [sl, #10]
   13574:	movw	r1, #10875	; 0x2a7b
   13578:	mov	r2, #5
   1357c:	movt	r1, #3
   13580:	cmp	r0, #0
   13584:	movw	r0, #10851	; 0x2a63
   13588:	movt	r0, #3
   1358c:	movne	r1, r0
   13590:	mov	r0, #0
   13594:	bl	11940 <dcgettext@plt>
   13598:	mov	r4, r0
   1359c:	ldrd	r0, [sl, #64]	; 0x40
   135a0:	mov	r2, r5
   135a4:	mov	r3, #0
   135a8:	stm	sp, {r6, r8}
   135ac:	str	r6, [sp, #8]
   135b0:	str	r8, [sp, #12]
   135b4:	bl	15768 <__assert_fail@plt+0x3abc>
   135b8:	mov	r1, r0
   135bc:	mov	r0, r4
   135c0:	bl	11868 <printf@plt>
   135c4:	movw	r1, #10894	; 0x2a8e
   135c8:	mov	r0, #0
   135cc:	mov	r2, #5
   135d0:	movt	r1, #3
   135d4:	bl	11940 <dcgettext@plt>
   135d8:	str	r0, [sp, #216]	; 0xd8
   135dc:	ldrd	r0, [sl, #72]	; 0x48
   135e0:	mov	r2, r5
   135e4:	mov	r3, #0
   135e8:	stm	sp, {r6, r8}
   135ec:	str	r6, [sp, #8]
   135f0:	str	r8, [sp, #12]
   135f4:	bl	15768 <__assert_fail@plt+0x3abc>
   135f8:	mov	r5, r0
   135fc:	ldrd	r0, [sl, #80]	; 0x50
   13600:	sub	lr, fp, #1024	; 0x400
   13604:	mov	r3, #0
   13608:	stm	sp, {r6, r8}
   1360c:	str	r6, [sp, #8]
   13610:	str	r8, [sp, #12]
   13614:	sub	r2, lr, #356	; 0x164
   13618:	bl	15768 <__assert_fail@plt+0x3abc>
   1361c:	mov	r4, r0
   13620:	ldrd	r0, [sl, #88]	; 0x58
   13624:	add	r2, sp, #1296	; 0x510
   13628:	mov	r3, #0
   1362c:	stm	sp, {r6, r8}
   13630:	str	r6, [sp, #8]
   13634:	str	r8, [sp, #12]
   13638:	bl	15768 <__assert_fail@plt+0x3abc>
   1363c:	mov	r9, r7
   13640:	mov	r7, r0
   13644:	ldrd	r0, [sl, #96]	; 0x60
   13648:	add	r2, sp, #644	; 0x284
   1364c:	mov	r3, #0
   13650:	stm	sp, {r6, r8}
   13654:	str	r6, [sp, #8]
   13658:	add	r6, sp, #352	; 0x160
   1365c:	str	r8, [sp, #12]
   13660:	bl	15768 <__assert_fail@plt+0x3abc>
   13664:	str	r0, [sp]
   13668:	ldr	r0, [sp, #216]	; 0xd8
   1366c:	mov	r3, r7
   13670:	mov	r1, r5
   13674:	mov	r2, r4
   13678:	mov	r7, r9
   1367c:	bl	11868 <printf@plt>
   13680:	ldr	r0, [sp, #228]	; 0xe4
   13684:	cmp	r0, #0
   13688:	bne	13718 <__assert_fail@plt+0x1a6c>
   1368c:	ldrb	r0, [sl, #10]
   13690:	cmp	r0, #1
   13694:	bne	136a8 <__assert_fail@plt+0x19fc>
   13698:	movw	r1, #11074	; 0x2b42
   1369c:	mov	r0, #0
   136a0:	movt	r1, #3
   136a4:	b	1370c <__assert_fail@plt+0x1a60>
   136a8:	ldrd	r0, [sl, #72]	; 0x48
   136ac:	orrs	r0, r0, r1
   136b0:	beq	13700 <__assert_fail@plt+0x1a54>
   136b4:	movw	r1, #11162	; 0x2b9a
   136b8:	mov	r0, #0
   136bc:	mov	r2, #5
   136c0:	movt	r1, #3
   136c4:	bl	11940 <dcgettext@plt>
   136c8:	mov	r4, r0
   136cc:	ldrd	r0, [sl, #72]	; 0x48
   136d0:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   136d4:	ldr	r2, [sp, #164]	; 0xa4
   136d8:	vmov	d17, r0, r1
   136dc:	mov	r0, r4
   136e0:	vmov	s0, r2
   136e4:	vcvt.f64.u32	d16, s0
   136e8:	vsub.f64	d16, d17, d16
   136ec:	vmul.f64	d16, d16, d12
   136f0:	vdiv.f64	d16, d16, d17
   136f4:	vmov	r2, r3, d16
   136f8:	bl	11868 <printf@plt>
   136fc:	b	13718 <__assert_fail@plt+0x1a6c>
   13700:	movw	r1, #11208	; 0x2bc8
   13704:	mov	r0, #0
   13708:	movt	r1, #3
   1370c:	mov	r2, #5
   13710:	bl	11940 <dcgettext@plt>
   13714:	bl	11868 <printf@plt>
   13718:	movw	r0, #16916	; 0x4214
   1371c:	movt	r0, #4
   13720:	ldr	r1, [r0]
   13724:	mov	r0, #10
   13728:	bl	11c04 <putc@plt>
   1372c:	ldr	r0, [sp, #376]	; 0x178
   13730:	bl	118c8 <ferror@plt>
   13734:	cmp	r0, #0
   13738:	beq	13774 <__assert_fail@plt+0x1ac8>
   1373c:	ldr	r0, [sp, #204]	; 0xcc
   13740:	ldr	r2, [sp, #380]	; 0x17c
   13744:	mov	r1, #8
   13748:	mov	r4, #0
   1374c:	ldr	r5, [r0]
   13750:	mov	r0, #0
   13754:	bl	198dc <__assert_fail@plt+0x7c30>
   13758:	movw	r2, #14644	; 0x3934
   1375c:	mov	r3, r0
   13760:	mov	r0, #0
   13764:	mov	r1, r5
   13768:	movt	r2, #3
   1376c:	bl	119e8 <error@plt>
   13770:	b	13778 <__assert_fail@plt+0x1acc>
   13774:	ldr	r4, [sl, #48]	; 0x30
   13778:	ldr	r0, [sp, #208]	; 0xd0
   1377c:	ldr	r9, [sp, #176]	; 0xb0
   13780:	bl	11b74 <fclose@plt>
   13784:	cmn	r0, #1
   13788:	beq	13820 <__assert_fail@plt+0x1b74>
   1378c:	ldr	r0, [sp, #172]	; 0xac
   13790:	cmp	r0, #0
   13794:	beq	1379c <__assert_fail@plt+0x1af0>
   13798:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1379c:	cmp	r9, #0
   137a0:	beq	137cc <__assert_fail@plt+0x1b20>
   137a4:	movw	r1, #14632	; 0x3928
   137a8:	add	r0, sp, #344	; 0x158
   137ac:	mov	r2, #0
   137b0:	add	r3, sp, #348	; 0x15c
   137b4:	str	r0, [sp]
   137b8:	mov	r0, r9
   137bc:	movt	r1, #3
   137c0:	bl	1546c <__assert_fail@plt+0x37c0>
   137c4:	cmp	r0, #0
   137c8:	bne	12754 <__assert_fail@plt+0xaa8>
   137cc:	ldr	r0, [sp, #108]	; 0x6c
   137d0:	cmp	r0, #0
   137d4:	beq	137e8 <__assert_fail@plt+0x1b3c>
   137d8:	movw	r0, #8523	; 0x214b
   137dc:	mov	r1, r4
   137e0:	movt	r0, #3
   137e4:	bl	11868 <printf@plt>
   137e8:	mov	r5, #0
   137ec:	cmp	r4, #0
   137f0:	bne	13870 <__assert_fail@plt+0x1bc4>
   137f4:	ldr	r0, [sp, #212]	; 0xd4
   137f8:	ldrd	r2, [sl, #40]	; 0x28
   137fc:	orrs	r1, r2, r3
   13800:	clz	r0, r0
   13804:	lsr	r0, r0, #5
   13808:	movwne	r1, #1
   1380c:	orr	r0, r0, r1
   13810:	clz	r1, r7
   13814:	lsr	r1, r1, #5
   13818:	and	r5, r1, r0
   1381c:	b	13870 <__assert_fail@plt+0x1bc4>
   13820:	ldr	r0, [sp, #204]	; 0xcc
   13824:	ldr	r2, [sp, #188]	; 0xbc
   13828:	mov	r5, #0
   1382c:	mov	r1, #8
   13830:	b	1384c <__assert_fail@plt+0x1ba0>
   13834:	mov	r0, r4
   13838:	bl	11c88 <close@plt>
   1383c:	ldr	r0, [sp, #204]	; 0xcc
   13840:	mov	r5, #0
   13844:	mov	r1, #8
   13848:	mov	r2, r7
   1384c:	ldr	r4, [r0]
   13850:	mov	r0, #0
   13854:	bl	198dc <__assert_fail@plt+0x7c30>
   13858:	movw	r2, #14644	; 0x3934
   1385c:	mov	r3, r0
   13860:	mov	r0, #0
   13864:	mov	r1, r4
   13868:	movt	r2, #3
   1386c:	bl	119e8 <error@plt>
   13870:	mov	r0, r5
   13874:	sub	sp, fp, #72	; 0x48
   13878:	vpop	{d8-d12}
   1387c:	add	sp, sp, #4
   13880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13884:	movw	r1, #8360	; 0x20a8
   13888:	mov	r0, #0
   1388c:	mov	r2, #5
   13890:	mov	r5, #0
   13894:	movt	r1, #3
   13898:	bl	11940 <dcgettext@plt>
   1389c:	mov	r2, r0
   138a0:	mov	r0, #0
   138a4:	mov	r1, #0
   138a8:	bl	119e8 <error@plt>
   138ac:	b	13870 <__assert_fail@plt+0x1bc4>
   138b0:	movw	r2, #14644	; 0x3934
   138b4:	mov	r3, r0
   138b8:	mov	r0, #1
   138bc:	mov	r1, #0
   138c0:	movt	r2, #3
   138c4:	bl	119e8 <error@plt>
   138c8:	mov	r0, #1
   138cc:	bl	13b90 <__assert_fail@plt+0x1ee4>
   138d0:	mov	r0, #0
   138d4:	bl	13b90 <__assert_fail@plt+0x1ee4>
   138d8:	movw	r1, #16920	; 0x4218
   138dc:	movw	r3, #11252	; 0x2bf4
   138e0:	movt	r1, #4
   138e4:	movt	r3, #3
   138e8:	ldr	r2, [r1]
   138ec:	ldr	r1, [fp, #-1380]	; 0xfffffa9c
   138f0:	str	r2, [sp]
   138f4:	mov	r2, #108	; 0x6c
   138f8:	bl	1ab94 <__assert_fail@plt+0x8ee8>
   138fc:	movw	r0, #8278	; 0x2056
   13900:	movw	r1, #8293	; 0x2065
   13904:	movw	r3, #8302	; 0x206e
   13908:	movw	r2, #1613	; 0x64d
   1390c:	movt	r0, #3
   13910:	movt	r1, #3
   13914:	movt	r3, #3
   13918:	bl	11cac <__assert_fail@plt>
   1391c:	movw	r1, #9133	; 0x23ad
   13920:	mov	r0, #0
   13924:	mov	r2, #5
   13928:	movt	r1, #3
   1392c:	bl	11940 <dcgettext@plt>
   13930:	mov	r2, r0
   13934:	mov	r0, #1
   13938:	mov	r1, #0
   1393c:	bl	119e8 <error@plt>
   13940:	mov	r4, #34	; 0x22
   13944:	b	1394c <__assert_fail@plt+0x1ca0>
   13948:	mov	r4, #22
   1394c:	movw	r1, #9194	; 0x23ea
   13950:	mov	r0, #0
   13954:	mov	r2, #5
   13958:	movt	r1, #3
   1395c:	bl	11940 <dcgettext@plt>
   13960:	mov	r6, r0
   13964:	mov	r0, #0
   13968:	mov	r1, #8
   1396c:	mov	r2, r5
   13970:	bl	198dc <__assert_fail@plt+0x7c30>
   13974:	mov	r3, r0
   13978:	mov	r0, #1
   1397c:	mov	r1, r4
   13980:	mov	r2, r6
   13984:	bl	119e8 <error@plt>
   13988:	movw	r1, #9194	; 0x23ea
   1398c:	mov	r0, #0
   13990:	mov	r2, #5
   13994:	movt	r1, #3
   13998:	bl	11940 <dcgettext@plt>
   1399c:	mov	r4, r0
   139a0:	mov	r0, #0
   139a4:	mov	r1, #8
   139a8:	mov	r2, r5
   139ac:	b	13a2c <__assert_fail@plt+0x1d80>
   139b0:	movw	r0, #9824	; 0x2660
   139b4:	movw	r1, #8293	; 0x2065
   139b8:	movw	r3, #9833	; 0x2669
   139bc:	movw	r2, #935	; 0x3a7
   139c0:	movt	r0, #3
   139c4:	movt	r1, #3
   139c8:	movt	r3, #3
   139cc:	bl	11cac <__assert_fail@plt>
   139d0:	ldr	r0, [sp, #204]	; 0xcc
   139d4:	movw	r1, #8210	; 0x2012
   139d8:	mov	r2, #5
   139dc:	movt	r1, #3
   139e0:	ldr	r4, [r0]
   139e4:	mov	r0, #0
   139e8:	bl	11940 <dcgettext@plt>
   139ec:	mov	r2, r0
   139f0:	mov	r0, #1
   139f4:	mov	r1, r4
   139f8:	bl	119e8 <error@plt>
   139fc:	movw	r1, #8153	; 0x1fd9
   13a00:	movt	r1, #3
   13a04:	b	13af0 <__assert_fail@plt+0x1e44>
   13a08:	movw	r1, #9566	; 0x255e
   13a0c:	mov	r0, #0
   13a10:	mov	r2, #5
   13a14:	movt	r1, #3
   13a18:	bl	11940 <dcgettext@plt>
   13a1c:	ldr	r2, [sp, #188]	; 0xbc
   13a20:	mov	r4, r0
   13a24:	mov	r0, #0
   13a28:	mov	r1, #8
   13a2c:	bl	198dc <__assert_fail@plt+0x7c30>
   13a30:	mov	r3, r0
   13a34:	mov	r0, #1
   13a38:	mov	r1, #0
   13a3c:	mov	r2, r4
   13a40:	bl	119e8 <error@plt>
   13a44:	movw	r0, #10594	; 0x2962
   13a48:	movw	r1, #8293	; 0x2065
   13a4c:	movw	r3, #10620	; 0x297c
   13a50:	movw	r2, #845	; 0x34d
   13a54:	movt	r0, #3
   13a58:	movt	r1, #3
   13a5c:	movt	r3, #3
   13a60:	bl	11cac <__assert_fail@plt>
   13a64:	movw	r0, #10675	; 0x29b3
   13a68:	movw	r1, #8293	; 0x2065
   13a6c:	movw	r3, #10620	; 0x297c
   13a70:	movw	r2, #846	; 0x34e
   13a74:	movt	r0, #3
   13a78:	movt	r1, #3
   13a7c:	movt	r3, #3
   13a80:	bl	11cac <__assert_fail@plt>
   13a84:	movw	r0, #10704	; 0x29d0
   13a88:	movw	r1, #8293	; 0x2065
   13a8c:	movw	r3, #10620	; 0x297c
   13a90:	movw	r2, #847	; 0x34f
   13a94:	movt	r0, #3
   13a98:	movt	r1, #3
   13a9c:	movt	r3, #3
   13aa0:	bl	11cac <__assert_fail@plt>
   13aa4:	movw	r0, #10775	; 0x2a17
   13aa8:	movw	r1, #8293	; 0x2065
   13aac:	movw	r3, #10620	; 0x297c
   13ab0:	movw	r2, #851	; 0x353
   13ab4:	movt	r0, #3
   13ab8:	movt	r1, #3
   13abc:	movt	r3, #3
   13ac0:	bl	11cac <__assert_fail@plt>
   13ac4:	movw	r1, #8056	; 0x1f78
   13ac8:	mov	r0, #0
   13acc:	mov	r2, #5
   13ad0:	movt	r1, #3
   13ad4:	bl	11940 <dcgettext@plt>
   13ad8:	mov	r4, r0
   13adc:	bl	11af0 <__errno_location@plt>
   13ae0:	str	r0, [sp, #204]	; 0xcc
   13ae4:	b	13b24 <__assert_fail@plt+0x1e78>
   13ae8:	movw	r1, #8088	; 0x1f98
   13aec:	movt	r1, #3
   13af0:	mov	r0, #0
   13af4:	mov	r2, #5
   13af8:	bl	11940 <dcgettext@plt>
   13afc:	mov	r4, r0
   13b00:	b	13b24 <__assert_fail@plt+0x1e78>
   13b04:	movw	r1, #8121	; 0x1fb9
   13b08:	mov	r0, #0
   13b0c:	mov	r2, #5
   13b10:	movt	r1, #3
   13b14:	bl	11940 <dcgettext@plt>
   13b18:	mov	r4, r0
   13b1c:	ldr	r0, [sp, #204]	; 0xcc
   13b20:	str	r5, [r0]
   13b24:	ldr	r0, [sp, #204]	; 0xcc
   13b28:	mov	r1, #8
   13b2c:	mov	r2, r4
   13b30:	ldr	r5, [r0]
   13b34:	mov	r0, #0
   13b38:	bl	198dc <__assert_fail@plt+0x7c30>
   13b3c:	movw	r2, #14644	; 0x3934
   13b40:	mov	r3, r0
   13b44:	mov	r0, #1
   13b48:	mov	r1, r5
   13b4c:	movt	r2, #3
   13b50:	bl	119e8 <error@plt>
   13b54:	movw	r1, #8334	; 0x208e
   13b58:	mov	r0, #0
   13b5c:	mov	r2, #5
   13b60:	movt	r1, #3
   13b64:	bl	11940 <dcgettext@plt>
   13b68:	mov	r2, r0
   13b6c:	mov	r0, #0
   13b70:	mov	r1, #0
   13b74:	bl	119e8 <error@plt>
   13b78:	mov	r0, #1
   13b7c:	bl	13b90 <__assert_fail@plt+0x1ee4>
   13b80:	movw	r0, #16928	; 0x4220
   13b84:	movt	r0, #4
   13b88:	ldr	r0, [r0, #16]
   13b8c:	b	1bba8 <__assert_fail@plt+0x9efc>
   13b90:	push	{fp, lr}
   13b94:	mov	fp, sp
   13b98:	cmp	r0, #0
   13b9c:	bne	13bec <__assert_fail@plt+0x1f40>
   13ba0:	movw	r5, #16916	; 0x4214
   13ba4:	movw	r1, #8717	; 0x220d
   13ba8:	mov	r0, #0
   13bac:	mov	r2, #5
   13bb0:	movt	r5, #4
   13bb4:	movt	r1, #3
   13bb8:	ldr	r4, [r5]
   13bbc:	bl	11940 <dcgettext@plt>
   13bc0:	movw	r6, #17040	; 0x4290
   13bc4:	mov	r1, r0
   13bc8:	mov	r0, r4
   13bcc:	movt	r6, #4
   13bd0:	ldr	r2, [r6]
   13bd4:	bl	11ad8 <fprintf@plt>
   13bd8:	ldr	r0, [r5]
   13bdc:	ldr	r1, [r6]
   13be0:	bl	1550c <__assert_fail@plt+0x3860>
   13be4:	mov	r0, #0
   13be8:	bl	11a9c <exit@plt>
   13bec:	mov	r4, r0
   13bf0:	movw	r0, #16912	; 0x4210
   13bf4:	movw	r1, #8678	; 0x21e6
   13bf8:	mov	r2, #5
   13bfc:	movt	r0, #4
   13c00:	movt	r1, #3
   13c04:	ldr	r5, [r0]
   13c08:	mov	r0, #0
   13c0c:	bl	11940 <dcgettext@plt>
   13c10:	mov	r1, r0
   13c14:	movw	r0, #17040	; 0x4290
   13c18:	movt	r0, #4
   13c1c:	ldr	r2, [r0]
   13c20:	mov	r0, r5
   13c24:	bl	11ad8 <fprintf@plt>
   13c28:	mov	r0, r4
   13c2c:	bl	11a9c <exit@plt>
   13c30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c34:	add	fp, sp, #24
   13c38:	sub	sp, sp, #8
   13c3c:	mov	r4, r0
   13c40:	ldr	r0, [r0]
   13c44:	cmp	r0, #128	; 0x80
   13c48:	bne	13c84 <__assert_fail@plt+0x1fd8>
   13c4c:	ldr	r5, [r4, #24]
   13c50:	mov	r0, r5
   13c54:	bl	11b44 <fgetc@plt>
   13c58:	mov	r6, r0
   13c5c:	mov	r0, r5
   13c60:	bl	11b44 <fgetc@plt>
   13c64:	ldr	r1, [r4, #4]
   13c68:	uxtb	r0, r0
   13c6c:	orr	r0, r0, r6, lsl #8
   13c70:	sxtah	r6, r1, r0
   13c74:	cmp	r6, #0
   13c78:	str	r6, [r4, #4]
   13c7c:	bge	13ca0 <__assert_fail@plt+0x1ff4>
   13c80:	b	13df8 <__assert_fail@plt+0x214c>
   13c84:	ldr	r1, [r4, #4]
   13c88:	addlt	r6, r1, r0
   13c8c:	addge	r0, r0, r1
   13c90:	subge	r6, r0, #256	; 0x100
   13c94:	cmp	r6, #0
   13c98:	str	r6, [r4, #4]
   13c9c:	blt	13df8 <__assert_fail@plt+0x214c>
   13ca0:	ldr	r0, [r4, #8]
   13ca4:	cmp	r6, r0
   13ca8:	bgt	13df8 <__assert_fail@plt+0x214c>
   13cac:	ldr	r3, [r4, #24]
   13cb0:	mov	r0, #0
   13cb4:	mov	r1, sp
   13cb8:	mov	r2, #0
   13cbc:	str	r0, [sp, #4]
   13cc0:	str	r0, [sp]
   13cc4:	add	r0, sp, #4
   13cc8:	bl	11c28 <getdelim@plt>
   13ccc:	cmp	r0, #0
   13cd0:	blt	13dec <__assert_fail@plt+0x2140>
   13cd4:	ldr	r1, [sp, #4]
   13cd8:	cmp	r1, #0
   13cdc:	beq	13e34 <__assert_fail@plt+0x2188>
   13ce0:	ldr	r2, [r4, #16]
   13ce4:	add	r8, r0, #1
   13ce8:	mov	r5, r0
   13cec:	ldr	r0, [r4, #12]
   13cf0:	add	r7, r8, r6
   13cf4:	cmp	r7, r2
   13cf8:	bls	13d18 <__assert_fail@plt+0x206c>
   13cfc:	mov	r1, r7
   13d00:	bl	1bd04 <__assert_fail@plt+0xa058>
   13d04:	cmp	r0, #0
   13d08:	beq	13dec <__assert_fail@plt+0x2140>
   13d0c:	str	r0, [r4, #12]
   13d10:	str	r7, [r4, #16]
   13d14:	ldr	r1, [sp, #4]
   13d18:	add	r0, r0, r6
   13d1c:	mov	r2, r8
   13d20:	bl	118ec <memcpy@plt>
   13d24:	ldr	r0, [sp, #4]
   13d28:	bl	1bba8 <__assert_fail@plt+0x9efc>
   13d2c:	cmp	r5, #1
   13d30:	blt	13dec <__assert_fail@plt+0x2140>
   13d34:	ldr	r0, [r4, #24]
   13d38:	bl	11c7c <getc@plt>
   13d3c:	str	r0, [r4]
   13d40:	ldr	r0, [r4, #4]
   13d44:	add	r0, r0, r5
   13d48:	subs	r1, r0, #1
   13d4c:	str	r1, [r4, #8]
   13d50:	bgt	13d94 <__assert_fail@plt+0x20e8>
   13d54:	movw	r1, #10045	; 0x273d
   13d58:	mov	r0, #0
   13d5c:	mov	r2, #5
   13d60:	movt	r1, #3
   13d64:	bl	11940 <dcgettext@plt>
   13d68:	ldr	r2, [r4, #28]
   13d6c:	mov	r5, r0
   13d70:	mov	r0, #0
   13d74:	mov	r1, #8
   13d78:	bl	198dc <__assert_fail@plt+0x7c30>
   13d7c:	mov	r3, r0
   13d80:	mov	r0, #1
   13d84:	mov	r1, #0
   13d88:	mov	r2, r5
   13d8c:	bl	119e8 <error@plt>
   13d90:	ldr	r1, [r4, #8]
   13d94:	ldr	r0, [r4, #12]
   13d98:	add	r2, r0, r1
   13d9c:	ldrb	r3, [r2, #-1]
   13da0:	cmp	r3, #0
   13da4:	beq	13e54 <__assert_fail@plt+0x21a8>
   13da8:	ldrb	r1, [r0, r1]
   13dac:	cmp	r1, #0
   13db0:	bne	13e74 <__assert_fail@plt+0x21c8>
   13db4:	ldrb	r1, [r2, #1]
   13db8:	cmp	r1, #0
   13dbc:	streq	r0, [r4, #20]
   13dc0:	moveq	r0, #1
   13dc4:	subeq	sp, fp, #24
   13dc8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13dcc:	movw	r0, #10169	; 0x27b9
   13dd0:	movw	r1, #8293	; 0x2065
   13dd4:	movw	r3, #10099	; 0x2773
   13dd8:	movw	r2, #570	; 0x23a
   13ddc:	movt	r0, #3
   13de0:	movt	r1, #3
   13de4:	movt	r3, #3
   13de8:	bl	11cac <__assert_fail@plt>
   13dec:	mov	r0, #8
   13df0:	sub	sp, fp, #24
   13df4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13df8:	movw	r1, #10045	; 0x273d
   13dfc:	mov	r0, #0
   13e00:	mov	r2, #5
   13e04:	movt	r1, #3
   13e08:	bl	11940 <dcgettext@plt>
   13e0c:	ldr	r2, [r4, #28]
   13e10:	mov	r5, r0
   13e14:	mov	r0, #0
   13e18:	mov	r1, #8
   13e1c:	bl	198dc <__assert_fail@plt+0x7c30>
   13e20:	mov	r3, r0
   13e24:	mov	r0, #1
   13e28:	mov	r1, #0
   13e2c:	mov	r2, r5
   13e30:	bl	119e8 <error@plt>
   13e34:	movw	r0, #10182	; 0x27c6
   13e38:	movw	r1, #8293	; 0x2065
   13e3c:	movw	r3, #10192	; 0x27d0
   13e40:	mov	r2, #245	; 0xf5
   13e44:	movt	r0, #3
   13e48:	movt	r1, #3
   13e4c:	movt	r3, #3
   13e50:	bl	11cac <__assert_fail@plt>
   13e54:	movw	r0, #10086	; 0x2766
   13e58:	movw	r1, #8293	; 0x2065
   13e5c:	movw	r3, #10099	; 0x2773
   13e60:	mov	r2, #568	; 0x238
   13e64:	movt	r0, #3
   13e68:	movt	r1, #3
   13e6c:	movt	r3, #3
   13e70:	bl	11cac <__assert_fail@plt>
   13e74:	movw	r0, #10156	; 0x27ac
   13e78:	movw	r1, #8293	; 0x2065
   13e7c:	movw	r3, #10099	; 0x2773
   13e80:	movw	r2, #569	; 0x239
   13e84:	movt	r0, #3
   13e88:	movt	r1, #3
   13e8c:	movt	r3, #3
   13e90:	bl	11cac <__assert_fail@plt>
   13e94:	push	{r4, r5, r6, r7, fp, lr}
   13e98:	add	fp, sp, #16
   13e9c:	mov	r4, r0
   13ea0:	ldr	r0, [r0]
   13ea4:	cmn	r0, #1
   13ea8:	moveq	r0, #8
   13eac:	popeq	{r4, r5, r6, r7, fp, pc}
   13eb0:	cmp	r0, #30
   13eb4:	bne	13f20 <__assert_fail@plt+0x2274>
   13eb8:	ldr	r5, [r4, #4]
   13ebc:	ldr	r2, [r4, #8]
   13ec0:	ldr	r0, [r4, #24]
   13ec4:	ldr	r1, [r4, #28]
   13ec8:	sub	r3, r5, #14
   13ecc:	cmp	r5, #13
   13ed0:	str	r3, [r4, #4]
   13ed4:	subgt	r2, r2, r3
   13ed8:	add	r3, r4, #32
   13edc:	bl	1473c <__assert_fail@plt+0x2a90>
   13ee0:	rsb	r1, r5, #14
   13ee4:	cmp	r0, r1
   13ee8:	blt	1408c <__assert_fail@plt+0x23e0>
   13eec:	ldr	r1, [r4, #4]
   13ef0:	add	r6, r1, r0
   13ef4:	cmn	r6, #1
   13ef8:	str	r6, [r4, #4]
   13efc:	bgt	13f38 <__assert_fail@plt+0x228c>
   13f00:	movw	r0, #10385	; 0x2891
   13f04:	movw	r1, #8293	; 0x2065
   13f08:	movw	r3, #10333	; 0x285d
   13f0c:	mov	r2, #480	; 0x1e0
   13f10:	movt	r0, #3
   13f14:	movt	r1, #3
   13f18:	movt	r3, #3
   13f1c:	bl	11cac <__assert_fail@plt>
   13f20:	ldr	r1, [r4, #4]
   13f24:	add	r0, r0, r1
   13f28:	sub	r6, r0, #14
   13f2c:	cmp	r6, #0
   13f30:	str	r6, [r4, #4]
   13f34:	blt	140ac <__assert_fail@plt+0x2400>
   13f38:	ldr	r0, [r4, #24]
   13f3c:	bl	11c7c <getc@plt>
   13f40:	cmp	r0, #31
   13f44:	str	r0, [r4]
   13f48:	blt	14034 <__assert_fail@plt+0x2388>
   13f4c:	add	r5, r4, #16
   13f50:	cmp	r0, #127	; 0x7f
   13f54:	bgt	13f98 <__assert_fail@plt+0x22ec>
   13f58:	cmn	r6, #1
   13f5c:	beq	14084 <__assert_fail@plt+0x23d8>
   13f60:	ldr	r1, [r5]
   13f64:	add	r7, r6, #1
   13f68:	cmp	r1, r7
   13f6c:	bcs	13fd4 <__assert_fail@plt+0x2328>
   13f70:	str	r7, [r4, #16]
   13f74:	mov	r1, r5
   13f78:	mov	r2, #1
   13f7c:	ldr	r0, [r4, #12]
   13f80:	bl	1a79c <__assert_fail@plt+0x8af0>
   13f84:	str	r0, [r4, #12]
   13f88:	mov	r1, r0
   13f8c:	ldr	r0, [r4]
   13f90:	add	r1, r1, r6
   13f94:	b	14010 <__assert_fail@plt+0x2364>
   13f98:	cmn	r6, #2
   13f9c:	bcs	14084 <__assert_fail@plt+0x23d8>
   13fa0:	ldr	r1, [r5]
   13fa4:	add	r7, r6, #2
   13fa8:	cmp	r1, r7
   13fac:	bcs	13fe0 <__assert_fail@plt+0x2334>
   13fb0:	str	r7, [r4, #16]
   13fb4:	mov	r1, r5
   13fb8:	mov	r2, #1
   13fbc:	ldr	r0, [r4, #12]
   13fc0:	bl	1a79c <__assert_fail@plt+0x8af0>
   13fc4:	str	r0, [r4, #12]
   13fc8:	mov	r1, r0
   13fcc:	ldr	r0, [r4]
   13fd0:	b	13fe4 <__assert_fail@plt+0x2338>
   13fd4:	ldr	r1, [r4, #12]
   13fd8:	add	r1, r1, r6
   13fdc:	b	14010 <__assert_fail@plt+0x2364>
   13fe0:	ldr	r1, [r4, #12]
   13fe4:	and	r0, r0, #127	; 0x7f
   13fe8:	str	r0, [r4]
   13fec:	add	r0, r4, r0
   13ff0:	ldrb	r0, [r0, #36]	; 0x24
   13ff4:	strb	r0, [r1, r6]
   13ff8:	ldr	r0, [r4]
   13ffc:	ldr	r1, [r4, #12]
   14000:	add	r0, r4, r0
   14004:	add	r1, r1, r6
   14008:	ldrb	r0, [r0, #164]	; 0xa4
   1400c:	add	r1, r1, #1
   14010:	strb	r0, [r1]
   14014:	mov	r6, r7
   14018:	ldr	r0, [r4, #24]
   1401c:	bl	11c7c <getc@plt>
   14020:	cmp	r0, #30
   14024:	str	r0, [r4]
   14028:	bgt	13f50 <__assert_fail@plt+0x22a4>
   1402c:	cmn	r6, #1
   14030:	beq	14084 <__assert_fail@plt+0x23d8>
   14034:	mov	r1, r4
   14038:	add	r2, r6, #1
   1403c:	mov	r5, r4
   14040:	ldr	r0, [r1, #16]!
   14044:	cmp	r0, r2
   14048:	bcs	14064 <__assert_fail@plt+0x23b8>
   1404c:	ldr	r0, [r5, #12]!
   14050:	str	r2, [r5, #4]
   14054:	mov	r2, #1
   14058:	bl	1a79c <__assert_fail@plt+0x8af0>
   1405c:	str	r0, [r5]
   14060:	b	14068 <__assert_fail@plt+0x23bc>
   14064:	ldr	r0, [r5, #12]!
   14068:	mov	r1, #0
   1406c:	strb	r1, [r0, r6]
   14070:	str	r6, [r4, #8]
   14074:	ldr	r0, [r5]
   14078:	str	r0, [r4, #20]
   1407c:	mov	r0, #1
   14080:	pop	{r4, r5, r6, r7, fp, pc}
   14084:	mov	r0, r4
   14088:	bl	14708 <__assert_fail@plt+0x2a5c>
   1408c:	movw	r0, #10318	; 0x284e
   14090:	movw	r1, #8293	; 0x2065
   14094:	movw	r3, #10333	; 0x285d
   14098:	movw	r2, #478	; 0x1de
   1409c:	movt	r0, #3
   140a0:	movt	r1, #3
   140a4:	movt	r3, #3
   140a8:	bl	11cac <__assert_fail@plt>
   140ac:	movw	r0, #10385	; 0x2891
   140b0:	movw	r1, #8293	; 0x2065
   140b4:	movw	r3, #10333	; 0x285d
   140b8:	movw	r2, #485	; 0x1e5
   140bc:	movt	r0, #3
   140c0:	movt	r1, #3
   140c4:	movt	r3, #3
   140c8:	bl	11cac <__assert_fail@plt>
   140cc:	push	{r4, sl, fp, lr}
   140d0:	add	fp, sp, #8
   140d4:	mov	r4, r0
   140d8:	ldr	r0, [r0, #12]
   140dc:	bl	15578 <__assert_fail@plt+0x38cc>
   140e0:	str	r0, [r4, #20]
   140e4:	mov	r0, #1
   140e8:	pop	{r4, sl, fp, pc}
   140ec:	push	{r4, r5, fp, lr}
   140f0:	add	fp, sp, #8
   140f4:	sub	sp, sp, #8
   140f8:	ldr	r5, [r0, #20]
   140fc:	mov	r4, r1
   14100:	mov	r0, r5
   14104:	bl	11ac0 <strlen@plt>
   14108:	mov	r2, r0
   1410c:	mov	r0, #0
   14110:	mov	r1, r5
   14114:	mov	r3, #0
   14118:	str	r0, [sp, #4]
   1411c:	mov	r0, r4
   14120:	str	r2, [sp]
   14124:	bl	20f5c <__assert_fail@plt+0xf2b0>
   14128:	mov	r1, #2
   1412c:	cmp	r0, #0
   14130:	movwlt	r1, #4
   14134:	mov	r0, r1
   14138:	sub	sp, fp, #8
   1413c:	pop	{r4, r5, fp, pc}
   14140:	push	{fp, lr}
   14144:	mov	fp, sp
   14148:	mov	r2, r1
   1414c:	ldr	r1, [r0, #20]
   14150:	mov	r0, r2
   14154:	mov	r2, #16
   14158:	bl	119f4 <fnmatch@plt>
   1415c:	mov	r1, #4
   14160:	cmp	r0, #0
   14164:	movweq	r1, #2
   14168:	mov	r0, r1
   1416c:	pop	{fp, pc}
   14170:	push	{fp, lr}
   14174:	mov	fp, sp
   14178:	mov	r2, r1
   1417c:	ldr	r1, [r0, #20]
   14180:	mov	r0, r2
   14184:	mov	r2, #0
   14188:	bl	119f4 <fnmatch@plt>
   1418c:	mov	r1, #4
   14190:	cmp	r0, #0
   14194:	movweq	r1, #2
   14198:	mov	r0, r1
   1419c:	pop	{fp, pc}
   141a0:	push	{r4, r5, fp, lr}
   141a4:	add	fp, sp, #8
   141a8:	mov	r4, r1
   141ac:	mov	r5, r0
   141b0:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   141b4:	cmp	r0, #1
   141b8:	bne	141dc <__assert_fail@plt+0x2530>
   141bc:	ldr	r0, [r5, #20]
   141c0:	mov	r1, r4
   141c4:	bl	2f5d8 <__assert_fail@plt+0x1d92c>
   141c8:	mov	r1, #2
   141cc:	cmp	r0, #0
   141d0:	movweq	r1, #4
   141d4:	mov	r0, r1
   141d8:	pop	{r4, r5, fp, pc}
   141dc:	movw	r0, #10412	; 0x28ac
   141e0:	movw	r1, #8293	; 0x2065
   141e4:	movw	r3, #10428	; 0x28bc
   141e8:	movw	r2, #714	; 0x2ca
   141ec:	movt	r0, #3
   141f0:	movt	r1, #3
   141f4:	movt	r3, #3
   141f8:	bl	11cac <__assert_fail@plt>
   141fc:	push	{r4, r5, fp, lr}
   14200:	add	fp, sp, #8
   14204:	mov	r4, r1
   14208:	mov	r5, r0
   1420c:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   14210:	cmp	r0, #1
   14214:	bne	14238 <__assert_fail@plt+0x258c>
   14218:	ldr	r0, [r5, #20]
   1421c:	mov	r1, r4
   14220:	bl	30580 <__assert_fail@plt+0x1e8d4>
   14224:	mov	r1, #2
   14228:	cmp	r0, #0
   1422c:	movweq	r1, #4
   14230:	mov	r0, r1
   14234:	pop	{r4, r5, fp, pc}
   14238:	movw	r0, #10412	; 0x28ac
   1423c:	movw	r1, #8293	; 0x2065
   14240:	movw	r3, #10501	; 0x2905
   14244:	movw	r2, #690	; 0x2b2
   14248:	movt	r0, #3
   1424c:	movt	r1, #3
   14250:	movt	r3, #3
   14254:	bl	11cac <__assert_fail@plt>
   14258:	push	{fp, lr}
   1425c:	mov	fp, sp
   14260:	ldr	r0, [r0, #20]
   14264:	bl	162f0 <__assert_fail@plt+0x4644>
   14268:	mov	r1, #2
   1426c:	cmp	r0, #0
   14270:	movweq	r1, #4
   14274:	mov	r0, r1
   14278:	pop	{fp, pc}
   1427c:	push	{fp, lr}
   14280:	mov	fp, sp
   14284:	ldr	r0, [r0, #20]
   14288:	bl	171a0 <__assert_fail@plt+0x54f4>
   1428c:	mov	r1, #2
   14290:	cmp	r0, #0
   14294:	movweq	r1, #4
   14298:	mov	r0, r1
   1429c:	pop	{fp, pc}
   142a0:	push	{fp, lr}
   142a4:	mov	fp, sp
   142a8:	sub	sp, sp, #104	; 0x68
   142ac:	ldr	r1, [r0, #12]
   142b0:	mov	r2, sp
   142b4:	mov	r0, #3
   142b8:	bl	11c34 <__xstat64@plt>
   142bc:	mov	r1, #4
   142c0:	cmp	r0, #0
   142c4:	movweq	r1, #1
   142c8:	mov	r0, r1
   142cc:	mov	sp, fp
   142d0:	pop	{fp, pc}
   142d4:	push	{fp, lr}
   142d8:	mov	fp, sp
   142dc:	sub	sp, sp, #104	; 0x68
   142e0:	ldr	r1, [r0, #12]
   142e4:	mov	r2, sp
   142e8:	mov	r0, #3
   142ec:	bl	11c94 <__lxstat64@plt>
   142f0:	mov	r1, #4
   142f4:	cmp	r0, #0
   142f8:	movweq	r1, #1
   142fc:	mov	r0, r1
   14300:	mov	sp, fp
   14304:	pop	{fp, pc}
   14308:	push	{fp, lr}
   1430c:	mov	fp, sp
   14310:	sub	sp, sp, #104	; 0x68
   14314:	ldr	r1, [r0, #12]
   14318:	mov	r2, sp
   1431c:	mov	r0, #3
   14320:	bl	11c34 <__xstat64@plt>
   14324:	mov	r1, #1
   14328:	cmp	r0, #0
   1432c:	movweq	r1, #4
   14330:	mov	r0, r1
   14334:	mov	sp, fp
   14338:	pop	{fp, pc}
   1433c:	push	{fp, lr}
   14340:	mov	fp, sp
   14344:	sub	sp, sp, #104	; 0x68
   14348:	ldr	r1, [r0, #12]
   1434c:	mov	r2, sp
   14350:	mov	r0, #3
   14354:	bl	11c94 <__lxstat64@plt>
   14358:	mov	r1, #1
   1435c:	cmp	r0, #0
   14360:	movweq	r1, #4
   14364:	mov	r0, r1
   14368:	mov	sp, fp
   1436c:	pop	{fp, pc}
   14370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14374:	add	fp, sp, #28
   14378:	sub	sp, sp, #4
   1437c:	ldr	r5, [r0, #12]
   14380:	mov	r8, r1
   14384:	mov	r0, r5
   14388:	bl	11ac0 <strlen@plt>
   1438c:	vldr	s1, [pc, #224]	; 14474 <__assert_fail@plt+0x27c8>
   14390:	add	r1, r8, #8
   14394:	vld1.64	{d16-d17}, [r1]
   14398:	vldr	s0, [pc, #216]	; 14478 <__assert_fail@plt+0x27cc>
   1439c:	vmov	s2, r0
   143a0:	vmov.f32	s3, s1
   143a4:	vadd.i64	q8, q0, q8
   143a8:	vst1.64	{d16-d17}, [r1]
   143ac:	ldrb	r1, [r5]
   143b0:	cmp	r1, #0
   143b4:	beq	14468 <__assert_fail@plt+0x27bc>
   143b8:	add	r5, r5, #1
   143bc:	mov	r4, #0
   143c0:	mov	r9, #1
   143c4:	mov	r6, #0
   143c8:	mov	sl, #0
   143cc:	sxtb	r0, r1
   143d0:	uxtb	r7, r1
   143d4:	mov	r2, #1
   143d8:	cmp	r0, #0
   143dc:	mov	r0, #1
   143e0:	movwlt	sl, #1
   143e4:	cmp	r7, #10
   143e8:	beq	1440c <__assert_fail@plt+0x2760>
   143ec:	bl	11a90 <__ctype_b_loc@plt>
   143f0:	ldr	r0, [r0]
   143f4:	add	r0, r0, r7, lsl #1
   143f8:	ldrb	r0, [r0, #1]
   143fc:	tst	r0, #32
   14400:	mov	r0, r4
   14404:	movne	r6, r9
   14408:	mov	r2, r6
   1440c:	ldrb	r1, [r5], #1
   14410:	mov	r4, r0
   14414:	mov	r6, r2
   14418:	cmp	r1, #0
   1441c:	bne	143cc <__assert_fail@plt+0x2720>
   14420:	cmp	sl, #0
   14424:	beq	14438 <__assert_fail@plt+0x278c>
   14428:	ldrd	r4, [r8, #40]	; 0x28
   1442c:	adds	r4, r4, #1
   14430:	adc	r5, r5, #0
   14434:	strd	r4, [r8, #40]	; 0x28
   14438:	cmp	r2, #0
   1443c:	beq	14450 <__assert_fail@plt+0x27a4>
   14440:	ldrd	r2, [r8, #24]
   14444:	adds	r2, r2, #1
   14448:	adc	r3, r3, #0
   1444c:	strd	r2, [r8, #24]
   14450:	cmp	r0, #0
   14454:	beq	14468 <__assert_fail@plt+0x27bc>
   14458:	ldrd	r0, [r8, #32]
   1445c:	adds	r0, r0, #1
   14460:	adc	r1, r1, #0
   14464:	strd	r0, [r8, #32]
   14468:	mov	r0, #1
   1446c:	sub	sp, fp, #28
   14470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14474:	andeq	r0, r0, r0
   14478:	andeq	r0, r0, r1
   1447c:	push	{r4, r5, fp, lr}
   14480:	add	fp, sp, #8
   14484:	sub	sp, sp, #8
   14488:	movw	r5, #16916	; 0x4214
   1448c:	movw	r4, #16928	; 0x4220
   14490:	ldr	r0, [r0, #12]
   14494:	movw	r3, #14644	; 0x3934
   14498:	movt	r5, #4
   1449c:	movt	r4, #4
   144a0:	movt	r3, #3
   144a4:	ldr	ip, [r5]
   144a8:	ldrb	r2, [r4, #9]
   144ac:	ldr	r1, [r4, #16]
   144b0:	str	r0, [sp]
   144b4:	mov	r0, ip
   144b8:	bl	1493c <__assert_fail@plt+0x2c90>
   144bc:	ldrb	r1, [r4, #4]
   144c0:	mov	r0, #10
   144c4:	cmp	r1, #0
   144c8:	ldr	r1, [r5]
   144cc:	movwne	r0, #0
   144d0:	bl	11c04 <putc@plt>
   144d4:	mov	r0, #1
   144d8:	sub	sp, fp, #8
   144dc:	pop	{r4, r5, fp, pc}
   144e0:	push	{r4, sl, fp, lr}
   144e4:	add	fp, sp, #8
   144e8:	movw	r4, #16916	; 0x4214
   144ec:	ldr	r0, [r0, #12]
   144f0:	movt	r4, #4
   144f4:	ldr	r1, [r4]
   144f8:	bl	11c58 <fputs@plt>
   144fc:	movw	r0, #16928	; 0x4220
   14500:	movt	r0, #4
   14504:	ldrb	r1, [r0, #4]
   14508:	mov	r0, #10
   1450c:	cmp	r1, #0
   14510:	ldr	r1, [r4]
   14514:	movwne	r0, #0
   14518:	bl	11c04 <putc@plt>
   1451c:	mov	r0, #1
   14520:	pop	{r4, sl, fp, pc}
   14524:	push	{r4, r5, fp, lr}
   14528:	add	fp, sp, #8
   1452c:	ldr	r0, [r1, #8]
   14530:	ldr	r2, [r1, #12]
   14534:	ldr	ip, [r1]
   14538:	ldr	r3, [r1, #4]
   1453c:	adds	r4, r0, #1
   14540:	mov	r0, #8
   14544:	adc	r5, r2, #0
   14548:	strd	r4, [r1, #8]
   1454c:	subs	r1, r4, ip
   14550:	sbcs	r1, r5, r3
   14554:	movwcc	r0, #1
   14558:	pop	{r4, r5, fp, pc}
   1455c:	ldr	r0, [r1, #8]
   14560:	ldr	r3, [r1, #12]
   14564:	adds	r0, r0, #1
   14568:	str	r0, [r1, #8]
   1456c:	adc	r3, r3, #0
   14570:	mov	r0, #1
   14574:	str	r3, [r1, #12]
   14578:	bx	lr
   1457c:	push	{r4, r5, r6, r7, fp, lr}
   14580:	add	fp, sp, #16
   14584:	movw	r6, #16928	; 0x4220
   14588:	mov	r4, r0
   1458c:	movt	r6, #4
   14590:	ldr	r5, [r6, #24]
   14594:	ldr	r7, [r6, #32]
   14598:	cmp	r5, r7
   1459c:	beq	145e0 <__assert_fail@plt+0x2934>
   145a0:	ldr	r2, [r5]
   145a4:	ldr	r1, [r5, #4]
   145a8:	mov	r0, r4
   145ac:	blx	r2
   145b0:	ldr	r5, [r5, #8]
   145b4:	mov	r1, r0
   145b8:	cmp	r5, r7
   145bc:	andsne	r0, r1, #3
   145c0:	bne	145a0 <__assert_fail@plt+0x28f4>
   145c4:	mov	r0, #4
   145c8:	cmp	r1, #1
   145cc:	beq	14610 <__assert_fail@plt+0x2964>
   145d0:	tst	r1, #12
   145d4:	mov	r0, r1
   145d8:	popne	{r4, r5, r6, r7, fp, pc}
   145dc:	ldr	r5, [r6, #32]
   145e0:	cmp	r5, #0
   145e4:	beq	14614 <__assert_fail@plt+0x2968>
   145e8:	ldr	r2, [r5]
   145ec:	ldr	r1, [r5, #4]
   145f0:	mov	r0, r4
   145f4:	blx	r2
   145f8:	ldr	r5, [r5, #8]
   145fc:	cmp	r5, #0
   14600:	andsne	r1, r0, #1
   14604:	bne	145e8 <__assert_fail@plt+0x293c>
   14608:	cmp	r0, #1
   1460c:	moveq	r0, #2
   14610:	pop	{r4, r5, r6, r7, fp, pc}
   14614:	mov	r0, #2
   14618:	pop	{r4, r5, r6, r7, fp, pc}
   1461c:	push	{r4, r5, r6, r7, fp, lr}
   14620:	add	fp, sp, #16
   14624:	movw	r5, #16928	; 0x4220
   14628:	movt	r5, #4
   1462c:	ldr	r6, [r5, #24]
   14630:	ldr	r7, [r5, #32]
   14634:	cmp	r6, r7
   14638:	moveq	r0, #5
   1463c:	popeq	{r4, r5, r6, r7, fp, pc}
   14640:	mov	r4, r0
   14644:	ldr	r2, [r6]
   14648:	ldr	r1, [r6, #4]
   1464c:	mov	r0, r4
   14650:	blx	r2
   14654:	ldr	r6, [r6, #8]
   14658:	mov	r1, r0
   1465c:	cmp	r6, r7
   14660:	andsne	r0, r1, #5
   14664:	bne	14644 <__assert_fail@plt+0x2998>
   14668:	mov	r0, #4
   1466c:	cmp	r1, #1
   14670:	beq	146b4 <__assert_fail@plt+0x2a08>
   14674:	tst	r1, #12
   14678:	mov	r0, r1
   1467c:	popne	{r4, r5, r6, r7, fp, pc}
   14680:	ldr	r5, [r5, #32]
   14684:	cmp	r5, #0
   14688:	beq	146b8 <__assert_fail@plt+0x2a0c>
   1468c:	ldr	r2, [r5]
   14690:	ldr	r1, [r5, #4]
   14694:	mov	r0, r4
   14698:	blx	r2
   1469c:	ldr	r5, [r5, #8]
   146a0:	cmp	r5, #0
   146a4:	andsne	r1, r0, #1
   146a8:	bne	1468c <__assert_fail@plt+0x29e0>
   146ac:	cmp	r0, #1
   146b0:	moveq	r0, #2
   146b4:	pop	{r4, r5, r6, r7, fp, pc}
   146b8:	mov	r0, #2
   146bc:	pop	{r4, r5, r6, r7, fp, pc}
   146c0:	push	{r4, r5, fp, lr}
   146c4:	add	fp, sp, #8
   146c8:	mov	r4, r0
   146cc:	movw	r0, #16928	; 0x4220
   146d0:	movt	r0, #4
   146d4:	ldr	r5, [r0, #24]
   146d8:	cmp	r5, #0
   146dc:	moveq	r0, #3
   146e0:	popeq	{r4, r5, fp, pc}
   146e4:	ldr	r2, [r5]
   146e8:	ldr	r1, [r5, #4]
   146ec:	mov	r0, r4
   146f0:	blx	r2
   146f4:	ldr	r5, [r5, #8]
   146f8:	cmp	r5, #0
   146fc:	andsne	r1, r0, #3
   14700:	bne	146e4 <__assert_fail@plt+0x2a38>
   14704:	pop	{r4, r5, fp, pc}
   14708:	push	{fp, lr}
   1470c:	mov	fp, sp
   14710:	movw	r1, #10249	; 0x2809
   14714:	mov	r4, r0
   14718:	mov	r0, #0
   1471c:	mov	r2, #5
   14720:	movt	r1, #3
   14724:	bl	11940 <dcgettext@plt>
   14728:	ldr	r3, [r4, #28]
   1472c:	mov	r2, r0
   14730:	mov	r0, #1
   14734:	mov	r1, #0
   14738:	bl	119e8 <error@plt>
   1473c:	push	{r4, r5, r6, r7, fp, lr}
   14740:	add	fp, sp, #16
   14744:	sub	sp, sp, #8
   14748:	mov	r4, r3
   1474c:	mov	r6, r2
   14750:	mov	r5, r1
   14754:	mov	r7, r0
   14758:	bl	11bec <clearerr@plt>
   1475c:	add	r0, sp, #4
   14760:	mov	r1, #4
   14764:	mov	r2, #1
   14768:	mov	r3, r7
   1476c:	bl	119c4 <fread@plt>
   14770:	cmp	r0, #1
   14774:	bne	14810 <__assert_fail@plt+0x2b64>
   14778:	ldr	r1, [r4]
   1477c:	ldr	r0, [sp, #4]
   14780:	rev	r7, r0
   14784:	cmp	r1, #2
   14788:	beq	147e8 <__assert_fail@plt+0x2b3c>
   1478c:	cmp	r1, #0
   14790:	bne	147ec <__assert_fail@plt+0x2b40>
   14794:	cmp	r0, r6
   14798:	ble	147f4 <__assert_fail@plt+0x2b48>
   1479c:	cmp	r7, r6
   147a0:	bgt	147ec <__assert_fail@plt+0x2b40>
   147a4:	movw	r1, #11685	; 0x2da5
   147a8:	mov	r0, #0
   147ac:	mov	r2, #5
   147b0:	movt	r1, #3
   147b4:	bl	11940 <dcgettext@plt>
   147b8:	mov	r6, r0
   147bc:	mov	r0, #0
   147c0:	mov	r1, #8
   147c4:	mov	r2, r5
   147c8:	bl	198dc <__assert_fail@plt+0x7c30>
   147cc:	mov	r3, r0
   147d0:	mov	r0, #0
   147d4:	mov	r1, #0
   147d8:	mov	r2, r6
   147dc:	bl	119e8 <error@plt>
   147e0:	mov	r0, #2
   147e4:	str	r0, [r4]
   147e8:	mov	r0, r7
   147ec:	sub	sp, fp, #16
   147f0:	pop	{r4, r5, r6, r7, fp, pc}
   147f4:	cmp	r7, r6
   147f8:	movgt	r1, #1
   147fc:	strgt	r1, [r4]
   14800:	subgt	sp, fp, #16
   14804:	popgt	{r4, r5, r6, r7, fp, pc}
   14808:	sub	sp, fp, #16
   1480c:	pop	{r4, r5, r6, r7, fp, pc}
   14810:	mov	r0, #0
   14814:	mov	r1, #8
   14818:	mov	r2, r5
   1481c:	bl	198dc <__assert_fail@plt+0x7c30>
   14820:	mov	r4, r0
   14824:	mov	r0, r7
   14828:	bl	11aa8 <feof@plt>
   1482c:	cmp	r0, #0
   14830:	bne	14864 <__assert_fail@plt+0x2bb8>
   14834:	bl	11af0 <__errno_location@plt>
   14838:	ldr	r5, [r0]
   1483c:	movw	r1, #11656	; 0x2d88
   14840:	mov	r0, #0
   14844:	mov	r2, #5
   14848:	movt	r1, #3
   1484c:	bl	11940 <dcgettext@plt>
   14850:	mov	r2, r0
   14854:	mov	r0, #1
   14858:	mov	r1, r5
   1485c:	mov	r3, r4
   14860:	bl	119e8 <error@plt>
   14864:	movw	r1, #11635	; 0x2d73
   14868:	mov	r0, #0
   1486c:	mov	r2, #5
   14870:	movt	r1, #3
   14874:	bl	11940 <dcgettext@plt>
   14878:	mov	r2, r0
   1487c:	mov	r0, #1
   14880:	mov	r1, #0
   14884:	mov	r3, r4
   14888:	bl	119e8 <error@plt>
   1488c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14890:	add	fp, sp, #24
   14894:	sub	sp, sp, #16
   14898:	mov	r8, r0
   1489c:	movw	r0, #16912	; 0x4210
   148a0:	movt	r0, #4
   148a4:	ldr	r0, [r0]
   148a8:	bl	1bb40 <__assert_fail@plt+0x9e94>
   148ac:	movw	r0, #16916	; 0x4214
   148b0:	movw	r1, #11779	; 0x2e03
   148b4:	mov	r2, #5
   148b8:	mov	r9, #0
   148bc:	movt	r0, #4
   148c0:	movt	r1, #3
   148c4:	ldr	r6, [r0]
   148c8:	movw	r0, #16812	; 0x41ac
   148cc:	movt	r0, #4
   148d0:	ldr	r5, [r0]
   148d4:	mov	r0, #0
   148d8:	bl	11940 <dcgettext@plt>
   148dc:	movw	r1, #11794	; 0x2e12
   148e0:	mov	r7, r0
   148e4:	mov	r0, #0
   148e8:	mov	r2, #5
   148ec:	movt	r1, #3
   148f0:	bl	11940 <dcgettext@plt>
   148f4:	movw	r1, #11809	; 0x2e21
   148f8:	mov	r4, r0
   148fc:	mov	r0, #0
   14900:	mov	r2, #5
   14904:	movt	r1, #3
   14908:	bl	11940 <dcgettext@plt>
   1490c:	movw	r2, #11765	; 0x2df5
   14910:	str	r0, [sp, #8]
   14914:	mov	r0, r6
   14918:	mov	r1, r8
   1491c:	mov	r3, r5
   14920:	str	r7, [sp]
   14924:	str	r4, [sp, #4]
   14928:	str	r9, [sp, #12]
   1492c:	movt	r2, #3
   14930:	bl	1a3d8 <__assert_fail@plt+0x872c>
   14934:	sub	sp, fp, #24
   14938:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1493c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14940:	add	fp, sp, #28
   14944:	sub	sp, sp, #12
   14948:	sub	sp, sp, #8192	; 0x2000
   1494c:	ldr	r7, [fp, #8]
   14950:	mov	r9, r3
   14954:	mov	sl, r0
   14958:	cmp	r2, #0
   1495c:	beq	149fc <__assert_fail@plt+0x2d50>
   14960:	add	r4, sp, #8
   14964:	mov	r8, r1
   14968:	str	r1, [sp]
   1496c:	mov	r1, #8192	; 0x2000
   14970:	mov	r2, r7
   14974:	mvn	r3, #0
   14978:	mov	r0, r4
   1497c:	bl	180f4 <__assert_fail@plt+0x6448>
   14980:	mov	r5, r0
   14984:	cmp	r0, #8192	; 0x2000
   14988:	mov	r6, r4
   1498c:	bcc	149b8 <__assert_fail@plt+0x2d0c>
   14990:	add	r4, r5, #1
   14994:	mov	r0, r4
   14998:	bl	1a5f0 <__assert_fail@plt+0x8944>
   1499c:	mov	r1, r4
   149a0:	mov	r2, r7
   149a4:	mvn	r3, #0
   149a8:	mov	r6, r0
   149ac:	str	r8, [sp]
   149b0:	add	r4, sp, #8
   149b4:	bl	180f4 <__assert_fail@plt+0x6448>
   149b8:	mov	r0, r6
   149bc:	mov	r1, r5
   149c0:	bl	14a14 <__assert_fail@plt+0x2d68>
   149c4:	mov	r1, #0
   149c8:	mov	r2, r6
   149cc:	strb	r1, [r6, r0]
   149d0:	mov	r0, sl
   149d4:	mov	r1, r9
   149d8:	bl	11ad8 <fprintf@plt>
   149dc:	mov	r5, r0
   149e0:	cmp	r6, r4
   149e4:	beq	149f0 <__assert_fail@plt+0x2d44>
   149e8:	mov	r0, r6
   149ec:	bl	1bba8 <__assert_fail@plt+0x9efc>
   149f0:	mov	r0, r5
   149f4:	sub	sp, fp, #28
   149f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149fc:	mov	r0, sl
   14a00:	mov	r1, r9
   14a04:	mov	r2, r7
   14a08:	sub	sp, fp, #28
   14a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a10:	b	11ad8 <fprintf@plt>
   14a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a18:	add	fp, sp, #28
   14a1c:	sub	sp, sp, #20
   14a20:	mov	r5, r1
   14a24:	mov	r4, r0
   14a28:	add	sl, r0, r1
   14a2c:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   14a30:	cmp	r0, #2
   14a34:	bcs	14a78 <__assert_fail@plt+0x2dcc>
   14a38:	cmp	r5, #1
   14a3c:	blt	14a6c <__assert_fail@plt+0x2dc0>
   14a40:	bl	11a90 <__ctype_b_loc@plt>
   14a44:	mov	r1, #63	; 0x3f
   14a48:	ldrb	r2, [r4]
   14a4c:	ldr	r3, [r0]
   14a50:	add	r2, r3, r2, lsl #1
   14a54:	ldrb	r2, [r2, #1]
   14a58:	tst	r2, #64	; 0x40
   14a5c:	strbeq	r1, [r4]
   14a60:	add	r4, r4, #1
   14a64:	cmp	r4, sl
   14a68:	bcc	14a48 <__assert_fail@plt+0x2d9c>
   14a6c:	mov	r0, r5
   14a70:	sub	sp, fp, #28
   14a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a78:	cmp	r5, #1
   14a7c:	mov	r9, r4
   14a80:	blt	14d68 <__assert_fail@plt+0x30bc>
   14a84:	mov	r3, #0
   14a88:	add	r6, sp, #4
   14a8c:	add	r5, sp, #8
   14a90:	mov	r9, r4
   14a94:	mov	r7, r4
   14a98:	ldrb	r0, [r7]
   14a9c:	sub	r1, r0, #32
   14aa0:	cmp	r1, #94	; 0x5e
   14aa4:	bhi	14c40 <__assert_fail@plt+0x2f94>
   14aa8:	add	r2, pc, #0
   14aac:	ldr	pc, [r2, r1, lsl #2]
   14ab0:	andeq	r4, r1, ip, lsr #24
   14ab4:	andeq	r4, r1, ip, lsr #24
   14ab8:	andeq	r4, r1, ip, lsr #24
   14abc:	andeq	r4, r1, ip, lsr #24
   14ac0:	andeq	r4, r1, r0, asr #24
   14ac4:	andeq	r4, r1, ip, lsr #24
   14ac8:	andeq	r4, r1, ip, lsr #24
   14acc:	andeq	r4, r1, ip, lsr #24
   14ad0:	andeq	r4, r1, ip, lsr #24
   14ad4:	andeq	r4, r1, ip, lsr #24
   14ad8:	andeq	r4, r1, ip, lsr #24
   14adc:	andeq	r4, r1, ip, lsr #24
   14ae0:	andeq	r4, r1, ip, lsr #24
   14ae4:	andeq	r4, r1, ip, lsr #24
   14ae8:	andeq	r4, r1, ip, lsr #24
   14aec:	andeq	r4, r1, ip, lsr #24
   14af0:	andeq	r4, r1, ip, lsr #24
   14af4:	andeq	r4, r1, ip, lsr #24
   14af8:	andeq	r4, r1, ip, lsr #24
   14afc:	andeq	r4, r1, ip, lsr #24
   14b00:	andeq	r4, r1, ip, lsr #24
   14b04:	andeq	r4, r1, ip, lsr #24
   14b08:	andeq	r4, r1, ip, lsr #24
   14b0c:	andeq	r4, r1, ip, lsr #24
   14b10:	andeq	r4, r1, ip, lsr #24
   14b14:	andeq	r4, r1, ip, lsr #24
   14b18:	andeq	r4, r1, ip, lsr #24
   14b1c:	andeq	r4, r1, ip, lsr #24
   14b20:	andeq	r4, r1, ip, lsr #24
   14b24:	andeq	r4, r1, ip, lsr #24
   14b28:	andeq	r4, r1, ip, lsr #24
   14b2c:	andeq	r4, r1, ip, lsr #24
   14b30:	andeq	r4, r1, r0, asr #24
   14b34:	andeq	r4, r1, ip, lsr #24
   14b38:	andeq	r4, r1, ip, lsr #24
   14b3c:	andeq	r4, r1, ip, lsr #24
   14b40:	andeq	r4, r1, ip, lsr #24
   14b44:	andeq	r4, r1, ip, lsr #24
   14b48:	andeq	r4, r1, ip, lsr #24
   14b4c:	andeq	r4, r1, ip, lsr #24
   14b50:	andeq	r4, r1, ip, lsr #24
   14b54:	andeq	r4, r1, ip, lsr #24
   14b58:	andeq	r4, r1, ip, lsr #24
   14b5c:	andeq	r4, r1, ip, lsr #24
   14b60:	andeq	r4, r1, ip, lsr #24
   14b64:	andeq	r4, r1, ip, lsr #24
   14b68:	andeq	r4, r1, ip, lsr #24
   14b6c:	andeq	r4, r1, ip, lsr #24
   14b70:	andeq	r4, r1, ip, lsr #24
   14b74:	andeq	r4, r1, ip, lsr #24
   14b78:	andeq	r4, r1, ip, lsr #24
   14b7c:	andeq	r4, r1, ip, lsr #24
   14b80:	andeq	r4, r1, ip, lsr #24
   14b84:	andeq	r4, r1, ip, lsr #24
   14b88:	andeq	r4, r1, ip, lsr #24
   14b8c:	andeq	r4, r1, ip, lsr #24
   14b90:	andeq	r4, r1, ip, lsr #24
   14b94:	andeq	r4, r1, ip, lsr #24
   14b98:	andeq	r4, r1, ip, lsr #24
   14b9c:	andeq	r4, r1, ip, lsr #24
   14ba0:	andeq	r4, r1, ip, lsr #24
   14ba4:	andeq	r4, r1, ip, lsr #24
   14ba8:	andeq	r4, r1, ip, lsr #24
   14bac:	andeq	r4, r1, ip, lsr #24
   14bb0:	andeq	r4, r1, r0, asr #24
   14bb4:	andeq	r4, r1, ip, lsr #24
   14bb8:	andeq	r4, r1, ip, lsr #24
   14bbc:	andeq	r4, r1, ip, lsr #24
   14bc0:	andeq	r4, r1, ip, lsr #24
   14bc4:	andeq	r4, r1, ip, lsr #24
   14bc8:	andeq	r4, r1, ip, lsr #24
   14bcc:	andeq	r4, r1, ip, lsr #24
   14bd0:	andeq	r4, r1, ip, lsr #24
   14bd4:	andeq	r4, r1, ip, lsr #24
   14bd8:	andeq	r4, r1, ip, lsr #24
   14bdc:	andeq	r4, r1, ip, lsr #24
   14be0:	andeq	r4, r1, ip, lsr #24
   14be4:	andeq	r4, r1, ip, lsr #24
   14be8:	andeq	r4, r1, ip, lsr #24
   14bec:	andeq	r4, r1, ip, lsr #24
   14bf0:	andeq	r4, r1, ip, lsr #24
   14bf4:	andeq	r4, r1, ip, lsr #24
   14bf8:	andeq	r4, r1, ip, lsr #24
   14bfc:	andeq	r4, r1, ip, lsr #24
   14c00:	andeq	r4, r1, ip, lsr #24
   14c04:	andeq	r4, r1, ip, lsr #24
   14c08:	andeq	r4, r1, ip, lsr #24
   14c0c:	andeq	r4, r1, ip, lsr #24
   14c10:	andeq	r4, r1, ip, lsr #24
   14c14:	andeq	r4, r1, ip, lsr #24
   14c18:	andeq	r4, r1, ip, lsr #24
   14c1c:	andeq	r4, r1, ip, lsr #24
   14c20:	andeq	r4, r1, ip, lsr #24
   14c24:	andeq	r4, r1, ip, lsr #24
   14c28:	andeq	r4, r1, ip, lsr #24
   14c2c:	strb	r0, [r9], #1
   14c30:	add	r7, r7, #1
   14c34:	cmp	r7, sl
   14c38:	bcc	14a98 <__assert_fail@plt+0x2dec>
   14c3c:	b	14d68 <__assert_fail@plt+0x30bc>
   14c40:	str	r3, [sp, #12]
   14c44:	str	r3, [sp, #8]
   14c48:	sub	r2, sl, r7
   14c4c:	mov	r0, r6
   14c50:	mov	r1, r7
   14c54:	mov	r3, r5
   14c58:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   14c5c:	cmp	r0, #0
   14c60:	beq	14c7c <__assert_fail@plt+0x2fd0>
   14c64:	mov	r5, r0
   14c68:	cmn	r0, #2
   14c6c:	beq	14d40 <__assert_fail@plt+0x3094>
   14c70:	cmn	r5, #1
   14c74:	bne	14c80 <__assert_fail@plt+0x2fd4>
   14c78:	b	14d48 <__assert_fail@plt+0x309c>
   14c7c:	mov	r5, #1
   14c80:	ldr	r0, [sp, #4]
   14c84:	add	r8, r7, r5
   14c88:	bl	1188c <wcwidth@plt>
   14c8c:	cmp	r0, #0
   14c90:	blt	14d0c <__assert_fail@plt+0x3060>
   14c94:	cmp	r5, #16
   14c98:	bcc	14ce8 <__assert_fail@plt+0x303c>
   14c9c:	cmp	r9, r8
   14ca0:	addcc	r0, r9, r5
   14ca4:	cmpcc	r7, r0
   14ca8:	bcc	14ce8 <__assert_fail@plt+0x303c>
   14cac:	bic	ip, r5, #15
   14cb0:	mov	lr, r6
   14cb4:	mov	r6, r9
   14cb8:	add	r2, r7, ip
   14cbc:	add	r1, r9, ip
   14cc0:	sub	r0, r5, ip
   14cc4:	mov	r3, ip
   14cc8:	vld1.8	{d16-d17}, [r7]!
   14ccc:	subs	r3, r3, #16
   14cd0:	vst1.8	{d16-d17}, [r6]!
   14cd4:	bne	14cc8 <__assert_fail@plt+0x301c>
   14cd8:	cmp	r5, ip
   14cdc:	mov	r6, lr
   14ce0:	bne	14cf4 <__assert_fail@plt+0x3048>
   14ce4:	b	14d04 <__assert_fail@plt+0x3058>
   14ce8:	mov	r0, r5
   14cec:	mov	r1, r9
   14cf0:	mov	r2, r7
   14cf4:	ldrb	r3, [r2], #1
   14cf8:	subs	r0, r0, #1
   14cfc:	strb	r3, [r1], #1
   14d00:	bne	14cf4 <__assert_fail@plt+0x3048>
   14d04:	add	r9, r9, r5
   14d08:	b	14d14 <__assert_fail@plt+0x3068>
   14d0c:	mov	r0, #63	; 0x3f
   14d10:	strb	r0, [r9], #1
   14d14:	add	r5, sp, #8
   14d18:	mov	r0, r5
   14d1c:	bl	1191c <mbsinit@plt>
   14d20:	cmp	r0, #0
   14d24:	mov	r7, r8
   14d28:	beq	14c48 <__assert_fail@plt+0x2f9c>
   14d2c:	mov	r7, r8
   14d30:	mov	r3, #0
   14d34:	cmp	r7, sl
   14d38:	bcc	14a98 <__assert_fail@plt+0x2dec>
   14d3c:	b	14d68 <__assert_fail@plt+0x30bc>
   14d40:	mov	r8, sl
   14d44:	b	14d4c <__assert_fail@plt+0x30a0>
   14d48:	add	r8, r7, #1
   14d4c:	mov	r0, #63	; 0x3f
   14d50:	add	r5, sp, #8
   14d54:	strb	r0, [r9], #1
   14d58:	mov	r7, r8
   14d5c:	mov	r3, #0
   14d60:	cmp	r7, sl
   14d64:	bcc	14a98 <__assert_fail@plt+0x2dec>
   14d68:	sub	r5, r9, r4
   14d6c:	mov	r0, r5
   14d70:	sub	sp, fp, #28
   14d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d7c:	add	fp, sp, #28
   14d80:	sub	sp, sp, #28
   14d84:	mov	r4, r0
   14d88:	movw	r0, #12039	; 0x2f07
   14d8c:	movt	r0, #3
   14d90:	mov	r1, r4
   14d94:	bl	1185c <strcmp@plt>
   14d98:	cmp	r0, #0
   14d9c:	beq	15318 <__assert_fail@plt+0x366c>
   14da0:	movw	r0, #12039	; 0x2f07
   14da4:	movt	r0, #3
   14da8:	bl	19eac <__assert_fail@plt+0x8200>
   14dac:	mov	r5, r0
   14db0:	movw	r0, #12117	; 0x2f55
   14db4:	mov	r1, r4
   14db8:	movt	r0, #3
   14dbc:	bl	1185c <strcmp@plt>
   14dc0:	cmp	r0, #0
   14dc4:	beq	15320 <__assert_fail@plt+0x3674>
   14dc8:	mov	r0, r5
   14dcc:	bl	11ac0 <strlen@plt>
   14dd0:	mov	r5, r0
   14dd4:	movw	r0, #12117	; 0x2f55
   14dd8:	movt	r0, #3
   14ddc:	bl	19eac <__assert_fail@plt+0x8200>
   14de0:	mov	r6, r0
   14de4:	movw	r0, #12057	; 0x2f19
   14de8:	mov	r1, r4
   14dec:	movt	r0, #3
   14df0:	bl	1185c <strcmp@plt>
   14df4:	cmp	r0, #0
   14df8:	beq	15328 <__assert_fail@plt+0x367c>
   14dfc:	mov	r0, r6
   14e00:	bl	11ac0 <strlen@plt>
   14e04:	mov	r6, r0
   14e08:	movw	r0, #12057	; 0x2f19
   14e0c:	movt	r0, #3
   14e10:	bl	19eac <__assert_fail@plt+0x8200>
   14e14:	mov	r7, r0
   14e18:	movw	r0, #12063	; 0x2f1f
   14e1c:	mov	r1, r4
   14e20:	movt	r0, #3
   14e24:	bl	1185c <strcmp@plt>
   14e28:	cmp	r0, #0
   14e2c:	beq	15330 <__assert_fail@plt+0x3684>
   14e30:	mov	r0, r7
   14e34:	bl	11ac0 <strlen@plt>
   14e38:	mov	sl, r0
   14e3c:	movw	r0, #12063	; 0x2f1f
   14e40:	movt	r0, #3
   14e44:	bl	19eac <__assert_fail@plt+0x8200>
   14e48:	mov	r7, r0
   14e4c:	movw	r0, #12100	; 0x2f44
   14e50:	mov	r1, r4
   14e54:	movt	r0, #3
   14e58:	bl	1185c <strcmp@plt>
   14e5c:	cmp	r0, #0
   14e60:	beq	15338 <__assert_fail@plt+0x368c>
   14e64:	mov	r0, r7
   14e68:	bl	11ac0 <strlen@plt>
   14e6c:	mov	r8, r0
   14e70:	movw	r0, #12100	; 0x2f44
   14e74:	movt	r0, #3
   14e78:	bl	19eac <__assert_fail@plt+0x8200>
   14e7c:	mov	r7, r0
   14e80:	movw	r0, #12071	; 0x2f27
   14e84:	mov	r1, r4
   14e88:	movt	r0, #3
   14e8c:	bl	1185c <strcmp@plt>
   14e90:	cmp	r0, #0
   14e94:	beq	15340 <__assert_fail@plt+0x3694>
   14e98:	mov	r0, r7
   14e9c:	bl	11ac0 <strlen@plt>
   14ea0:	mov	r9, r0
   14ea4:	movw	r0, #12071	; 0x2f27
   14ea8:	movt	r0, #3
   14eac:	bl	19eac <__assert_fail@plt+0x8200>
   14eb0:	mov	r7, r0
   14eb4:	movw	r0, #12067	; 0x2f23
   14eb8:	mov	r1, r4
   14ebc:	movt	r0, #3
   14ec0:	bl	1185c <strcmp@plt>
   14ec4:	cmp	r0, #0
   14ec8:	beq	15348 <__assert_fail@plt+0x369c>
   14ecc:	mov	r0, r7
   14ed0:	bl	11ac0 <strlen@plt>
   14ed4:	str	r0, [sp, #24]
   14ed8:	movw	r0, #12067	; 0x2f23
   14edc:	movt	r0, #3
   14ee0:	bl	19eac <__assert_fail@plt+0x8200>
   14ee4:	mov	r7, r0
   14ee8:	movw	r0, #12081	; 0x2f31
   14eec:	mov	r1, r4
   14ef0:	movt	r0, #3
   14ef4:	bl	1185c <strcmp@plt>
   14ef8:	cmp	r0, #0
   14efc:	beq	15350 <__assert_fail@plt+0x36a4>
   14f00:	mov	r0, r7
   14f04:	bl	11ac0 <strlen@plt>
   14f08:	str	r0, [sp, #20]
   14f0c:	movw	r0, #12081	; 0x2f31
   14f10:	movt	r0, #3
   14f14:	bl	19eac <__assert_fail@plt+0x8200>
   14f18:	mov	r7, r0
   14f1c:	movw	r0, #12093	; 0x2f3d
   14f20:	mov	r1, r4
   14f24:	movt	r0, #3
   14f28:	bl	1185c <strcmp@plt>
   14f2c:	cmp	r0, #0
   14f30:	beq	15358 <__assert_fail@plt+0x36ac>
   14f34:	mov	r0, r7
   14f38:	bl	11ac0 <strlen@plt>
   14f3c:	str	r0, [sp, #16]
   14f40:	movw	r0, #12093	; 0x2f3d
   14f44:	movt	r0, #3
   14f48:	bl	19eac <__assert_fail@plt+0x8200>
   14f4c:	mov	r7, r0
   14f50:	movw	r0, #12099	; 0x2f43
   14f54:	mov	r1, r4
   14f58:	movt	r0, #3
   14f5c:	bl	1185c <strcmp@plt>
   14f60:	cmp	r0, #0
   14f64:	beq	15360 <__assert_fail@plt+0x36b4>
   14f68:	mov	r0, r7
   14f6c:	bl	11ac0 <strlen@plt>
   14f70:	str	r0, [sp, #12]
   14f74:	movw	r0, #12099	; 0x2f43
   14f78:	movt	r0, #3
   14f7c:	bl	19eac <__assert_fail@plt+0x8200>
   14f80:	mov	r7, r0
   14f84:	movw	r0, #12105	; 0x2f49
   14f88:	mov	r1, r4
   14f8c:	movt	r0, #3
   14f90:	bl	1185c <strcmp@plt>
   14f94:	cmp	r0, #0
   14f98:	beq	15368 <__assert_fail@plt+0x36bc>
   14f9c:	mov	r0, r7
   14fa0:	bl	11ac0 <strlen@plt>
   14fa4:	str	r0, [sp, #8]
   14fa8:	movw	r0, #12105	; 0x2f49
   14fac:	movt	r0, #3
   14fb0:	bl	19eac <__assert_fail@plt+0x8200>
   14fb4:	mov	r7, r0
   14fb8:	movw	r0, #12120	; 0x2f58
   14fbc:	mov	r1, r4
   14fc0:	movt	r0, #3
   14fc4:	bl	1185c <strcmp@plt>
   14fc8:	cmp	r0, #0
   14fcc:	beq	15370 <__assert_fail@plt+0x36c4>
   14fd0:	mov	r0, r7
   14fd4:	bl	11ac0 <strlen@plt>
   14fd8:	mov	r7, r0
   14fdc:	movw	r0, #12120	; 0x2f58
   14fe0:	movt	r0, #3
   14fe4:	bl	19eac <__assert_fail@plt+0x8200>
   14fe8:	str	r0, [sp, #4]
   14fec:	movw	r0, #12140	; 0x2f6c
   14ff0:	mov	r1, r4
   14ff4:	movt	r0, #3
   14ff8:	bl	1185c <strcmp@plt>
   14ffc:	mov	r1, #12
   15000:	cmp	r0, #0
   15004:	beq	15374 <__assert_fail@plt+0x36c8>
   15008:	add	r0, r5, r6
   1500c:	ldr	r1, [sp, #24]
   15010:	add	r0, r0, sl
   15014:	add	r0, r0, r8
   15018:	add	r0, r0, r9
   1501c:	add	r0, r0, r1
   15020:	ldr	r1, [sp, #20]
   15024:	add	r0, r0, r1
   15028:	ldr	r1, [sp, #16]
   1502c:	add	r0, r0, r1
   15030:	ldr	r1, [sp, #12]
   15034:	add	r0, r0, r1
   15038:	ldr	r1, [sp, #8]
   1503c:	add	r0, r0, r1
   15040:	add	r5, r0, r7
   15044:	ldr	r0, [sp, #4]
   15048:	bl	11ac0 <strlen@plt>
   1504c:	add	r5, r5, r0
   15050:	movw	r0, #12140	; 0x2f6c
   15054:	movt	r0, #3
   15058:	bl	19eac <__assert_fail@plt+0x8200>
   1505c:	bl	11ac0 <strlen@plt>
   15060:	add	r0, r5, r0
   15064:	add	r0, r0, #27
   15068:	bl	1a5f0 <__assert_fail@plt+0x8944>
   1506c:	mov	r9, r0
   15070:	movw	r0, #12039	; 0x2f07
   15074:	movt	r0, #3
   15078:	bl	19eac <__assert_fail@plt+0x8200>
   1507c:	mov	r7, r0
   15080:	bl	11ac0 <strlen@plt>
   15084:	mov	r6, r0
   15088:	add	r2, r0, #1
   1508c:	mov	r0, r9
   15090:	mov	r1, r7
   15094:	bl	118ec <memcpy@plt>
   15098:	movw	r0, #12117	; 0x2f55
   1509c:	movw	sl, #8236	; 0x202c
   150a0:	mov	r7, r9
   150a4:	mov	r8, #0
   150a8:	strh	sl, [r7, r6]!
   150ac:	movt	r0, #3
   150b0:	strb	r8, [r7, #2]!
   150b4:	bl	19eac <__assert_fail@plt+0x8200>
   150b8:	mov	r6, r0
   150bc:	bl	11ac0 <strlen@plt>
   150c0:	mov	r5, r0
   150c4:	add	r2, r0, #1
   150c8:	mov	r0, r7
   150cc:	mov	r1, r6
   150d0:	bl	118ec <memcpy@plt>
   150d4:	movw	r0, #12057	; 0x2f19
   150d8:	strh	sl, [r7, r5]!
   150dc:	movt	r0, #3
   150e0:	strb	r8, [r7, #2]!
   150e4:	bl	19eac <__assert_fail@plt+0x8200>
   150e8:	mov	r5, r0
   150ec:	bl	11ac0 <strlen@plt>
   150f0:	mov	r6, r0
   150f4:	add	r2, r0, #1
   150f8:	mov	r0, r7
   150fc:	mov	r1, r5
   15100:	bl	118ec <memcpy@plt>
   15104:	movw	r0, #12063	; 0x2f1f
   15108:	strh	sl, [r7, r6]!
   1510c:	movt	r0, #3
   15110:	strb	r8, [r7, #2]!
   15114:	bl	19eac <__assert_fail@plt+0x8200>
   15118:	mov	r5, r0
   1511c:	bl	11ac0 <strlen@plt>
   15120:	mov	r6, r0
   15124:	add	r2, r0, #1
   15128:	mov	r0, r7
   1512c:	mov	r1, r5
   15130:	bl	118ec <memcpy@plt>
   15134:	movw	r0, #12100	; 0x2f44
   15138:	strh	sl, [r7, r6]!
   1513c:	movt	r0, #3
   15140:	strb	r8, [r7, #2]!
   15144:	bl	19eac <__assert_fail@plt+0x8200>
   15148:	mov	r5, r0
   1514c:	bl	11ac0 <strlen@plt>
   15150:	mov	r6, r0
   15154:	add	r2, r0, #1
   15158:	mov	r0, r7
   1515c:	mov	r1, r5
   15160:	bl	118ec <memcpy@plt>
   15164:	movw	r0, #12071	; 0x2f27
   15168:	strh	sl, [r7, r6]!
   1516c:	movt	r0, #3
   15170:	strb	r8, [r7, #2]!
   15174:	bl	19eac <__assert_fail@plt+0x8200>
   15178:	mov	r5, r0
   1517c:	bl	11ac0 <strlen@plt>
   15180:	mov	r6, r0
   15184:	add	r2, r0, #1
   15188:	mov	r0, r7
   1518c:	mov	r1, r5
   15190:	bl	118ec <memcpy@plt>
   15194:	movw	r0, #12067	; 0x2f23
   15198:	strh	sl, [r7, r6]!
   1519c:	movt	r0, #3
   151a0:	strb	r8, [r7, #2]!
   151a4:	bl	19eac <__assert_fail@plt+0x8200>
   151a8:	mov	r5, r0
   151ac:	bl	11ac0 <strlen@plt>
   151b0:	mov	r6, r0
   151b4:	add	r2, r0, #1
   151b8:	mov	r0, r7
   151bc:	mov	r1, r5
   151c0:	bl	118ec <memcpy@plt>
   151c4:	movw	r0, #12081	; 0x2f31
   151c8:	strh	sl, [r7, r6]!
   151cc:	movt	r0, #3
   151d0:	strb	r8, [r7, #2]!
   151d4:	bl	19eac <__assert_fail@plt+0x8200>
   151d8:	mov	r5, r0
   151dc:	bl	11ac0 <strlen@plt>
   151e0:	mov	r6, r0
   151e4:	add	r2, r0, #1
   151e8:	mov	r0, r7
   151ec:	mov	r1, r5
   151f0:	bl	118ec <memcpy@plt>
   151f4:	movw	r0, #12093	; 0x2f3d
   151f8:	strh	sl, [r7, r6]!
   151fc:	movt	r0, #3
   15200:	strb	r8, [r7, #2]!
   15204:	bl	19eac <__assert_fail@plt+0x8200>
   15208:	mov	r5, r0
   1520c:	bl	11ac0 <strlen@plt>
   15210:	mov	r6, r0
   15214:	add	r2, r0, #1
   15218:	mov	r0, r7
   1521c:	mov	r1, r5
   15220:	bl	118ec <memcpy@plt>
   15224:	movw	r0, #12099	; 0x2f43
   15228:	strh	sl, [r7, r6]!
   1522c:	movt	r0, #3
   15230:	strb	r8, [r7, #2]!
   15234:	bl	19eac <__assert_fail@plt+0x8200>
   15238:	mov	r5, r0
   1523c:	bl	11ac0 <strlen@plt>
   15240:	mov	r6, r0
   15244:	add	r2, r0, #1
   15248:	mov	r0, r7
   1524c:	mov	r1, r5
   15250:	bl	118ec <memcpy@plt>
   15254:	movw	r0, #12105	; 0x2f49
   15258:	strh	sl, [r7, r6]!
   1525c:	movt	r0, #3
   15260:	strb	r8, [r7, #2]!
   15264:	bl	19eac <__assert_fail@plt+0x8200>
   15268:	mov	r5, r0
   1526c:	bl	11ac0 <strlen@plt>
   15270:	mov	r6, r0
   15274:	add	r2, r0, #1
   15278:	mov	r0, r7
   1527c:	mov	r1, r5
   15280:	bl	118ec <memcpy@plt>
   15284:	movw	r0, #12120	; 0x2f58
   15288:	strh	sl, [r7, r6]!
   1528c:	movt	r0, #3
   15290:	strb	r8, [r7, #2]!
   15294:	bl	19eac <__assert_fail@plt+0x8200>
   15298:	mov	r5, r0
   1529c:	bl	11ac0 <strlen@plt>
   152a0:	mov	r6, r0
   152a4:	add	r2, r0, #1
   152a8:	mov	r0, r7
   152ac:	mov	r1, r5
   152b0:	bl	118ec <memcpy@plt>
   152b4:	movw	r0, #12140	; 0x2f6c
   152b8:	strh	sl, [r7, r6]!
   152bc:	movt	r0, #3
   152c0:	strb	r8, [r7, #2]!
   152c4:	bl	19eac <__assert_fail@plt+0x8200>
   152c8:	mov	r5, r0
   152cc:	bl	11ac0 <strlen@plt>
   152d0:	add	r2, r0, #1
   152d4:	mov	r0, r7
   152d8:	mov	r1, r5
   152dc:	bl	118ec <memcpy@plt>
   152e0:	movw	r1, #11983	; 0x2ecf
   152e4:	mov	r0, #0
   152e8:	mov	r2, #5
   152ec:	movt	r1, #3
   152f0:	bl	11940 <dcgettext@plt>
   152f4:	mov	r5, r0
   152f8:	mov	r0, r4
   152fc:	bl	19eac <__assert_fail@plt+0x8200>
   15300:	mov	r3, r0
   15304:	mov	r0, #1
   15308:	mov	r1, #0
   1530c:	mov	r2, r5
   15310:	str	r9, [sp]
   15314:	bl	119e8 <error@plt>
   15318:	mov	r1, #0
   1531c:	b	15374 <__assert_fail@plt+0x36c8>
   15320:	mov	r1, #1
   15324:	b	15374 <__assert_fail@plt+0x36c8>
   15328:	mov	r1, #2
   1532c:	b	15374 <__assert_fail@plt+0x36c8>
   15330:	mov	r1, #3
   15334:	b	15374 <__assert_fail@plt+0x36c8>
   15338:	mov	r1, #4
   1533c:	b	15374 <__assert_fail@plt+0x36c8>
   15340:	mov	r1, #5
   15344:	b	15374 <__assert_fail@plt+0x36c8>
   15348:	mov	r1, #6
   1534c:	b	15374 <__assert_fail@plt+0x36c8>
   15350:	mov	r1, #7
   15354:	b	15374 <__assert_fail@plt+0x36c8>
   15358:	mov	r1, #8
   1535c:	b	15374 <__assert_fail@plt+0x36c8>
   15360:	mov	r1, #9
   15364:	b	15374 <__assert_fail@plt+0x36c8>
   15368:	mov	r1, #10
   1536c:	b	15374 <__assert_fail@plt+0x36c8>
   15370:	mov	r1, #11
   15374:	add	r0, r1, r1, lsl #1
   15378:	movw	r1, #11824	; 0x2e30
   1537c:	movt	r1, #3
   15380:	add	r0, r1, r0, lsl #2
   15384:	ldr	r0, [r0, #8]
   15388:	sub	sp, fp, #28
   1538c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15390:	mov	r1, r0
   15394:	mov	r0, #0
   15398:	cmp	r1, #12
   1539c:	addls	r0, r1, r1, lsl #1
   153a0:	movwls	r1, #11824	; 0x2e30
   153a4:	movtls	r1, #3
   153a8:	ldrls	r0, [r1, r0, lsl #2]
   153ac:	bx	lr
   153b0:	mov	r1, r0
   153b4:	mvn	r0, #0
   153b8:	cmp	r1, #12
   153bc:	bxhi	lr
   153c0:	add	r0, r1, r1, lsl #1
   153c4:	movw	r1, #11824	; 0x2e30
   153c8:	movt	r1, #3
   153cc:	add	r0, r1, r0, lsl #2
   153d0:	ldr	r0, [r0, #8]
   153d4:	bx	lr
   153d8:	mov	r1, r0
   153dc:	mov	r0, #0
   153e0:	cmp	r1, #12
   153e4:	bxhi	lr
   153e8:	add	r0, r1, r1, lsl #1
   153ec:	movw	r1, #11824	; 0x2e30
   153f0:	movt	r1, #3
   153f4:	add	r0, r1, r0, lsl #2
   153f8:	ldr	r0, [r0, #4]
   153fc:	bx	lr
   15400:	push	{r4, sl, fp, lr}
   15404:	add	fp, sp, #8
   15408:	mov	lr, r0
   1540c:	mvn	r0, #0
   15410:	cmp	lr, #12
   15414:	bhi	15468 <__assert_fail@plt+0x37bc>
   15418:	cmp	lr, #0
   1541c:	popeq	{r4, sl, fp, pc}
   15420:	movw	r3, #11824	; 0x2e30
   15424:	add	r2, lr, lr, lsl #1
   15428:	movt	r3, #3
   1542c:	add	r2, r3, r2, lsl #2
   15430:	ldr	ip, [r2, #8]
   15434:	add	r2, r3, #4
   15438:	mov	r3, #0
   1543c:	ldr	r4, [r2]
   15440:	tst	r4, r1
   15444:	beq	15458 <__assert_fail@plt+0x37ac>
   15448:	ldr	r4, [r2, #4]
   1544c:	cmp	ip, r4
   15450:	moveq	r0, r3
   15454:	popeq	{r4, sl, fp, pc}
   15458:	add	r3, r3, #1
   1545c:	add	r2, r2, #12
   15460:	cmp	r3, lr
   15464:	bcc	1543c <__assert_fail@plt+0x3790>
   15468:	pop	{r4, sl, fp, pc}
   1546c:	push	{r4, r5, fp, lr}
   15470:	add	fp, sp, #8
   15474:	ldr	r5, [fp, #8]
   15478:	cmp	r2, #0
   1547c:	beq	154c0 <__assert_fail@plt+0x3814>
   15480:	mov	r2, #0
   15484:	str	r2, [r3]
   15488:	str	r2, [r5]
   1548c:	ldr	r2, [r3]
   15490:	add	r4, r0, r2
   15494:	ldrb	r0, [r1]
   15498:	cmp	r0, #0
   1549c:	beq	154f8 <__assert_fail@plt+0x384c>
   154a0:	mov	r0, r4
   154a4:	bl	11c10 <strpbrk@plt>
   154a8:	cmp	r0, #0
   154ac:	beq	154f8 <__assert_fail@plt+0x384c>
   154b0:	sub	r0, r0, r4
   154b4:	str	r0, [r5]
   154b8:	mov	r0, #1
   154bc:	pop	{r4, r5, fp, pc}
   154c0:	ldr	r2, [r5]
   154c4:	ldr	r4, [r3]
   154c8:	add	r2, r4, r2
   154cc:	str	r2, [r3]
   154d0:	ldrb	r4, [r0, r2]
   154d4:	cmp	r4, #0
   154d8:	moveq	r0, #0
   154dc:	popeq	{r4, r5, fp, pc}
   154e0:	add	r2, r2, #1
   154e4:	str	r2, [r3]
   154e8:	add	r4, r0, r2
   154ec:	ldrb	r0, [r1]
   154f0:	cmp	r0, #0
   154f4:	bne	154a0 <__assert_fail@plt+0x37f4>
   154f8:	mov	r0, r4
   154fc:	bl	11ac0 <strlen@plt>
   15500:	str	r0, [r5]
   15504:	mov	r0, #1
   15508:	pop	{r4, r5, fp, pc}
   1550c:	push	{r4, r5, fp, lr}
   15510:	add	fp, sp, #8
   15514:	sub	sp, sp, #16
   15518:	mov	r4, r1
   1551c:	movw	r1, #12144	; 0x2f70
   15520:	mov	r5, r0
   15524:	mov	r0, #0
   15528:	mov	r2, #5
   1552c:	movt	r1, #3
   15530:	bl	11940 <dcgettext@plt>
   15534:	movw	r2, #12389	; 0x3065
   15538:	movw	r3, #11765	; 0x2df5
   1553c:	mov	r1, r0
   15540:	movw	r0, #12436	; 0x3094
   15544:	movt	r2, #3
   15548:	movt	r0, #3
   1554c:	movt	r3, #3
   15550:	str	r2, [sp, #4]
   15554:	movw	r2, #12350	; 0x303e
   15558:	str	r3, [sp]
   1555c:	str	r0, [sp, #8]
   15560:	mov	r0, r5
   15564:	mov	r3, r4
   15568:	movt	r2, #3
   1556c:	bl	11ad8 <fprintf@plt>
   15570:	sub	sp, fp, #8
   15574:	pop	{r4, r5, fp, pc}
   15578:	sub	r0, r0, #1
   1557c:	ldrb	r3, [r0, #1]!
   15580:	cmp	r3, #47	; 0x2f
   15584:	beq	1557c <__assert_fail@plt+0x38d0>
   15588:	mov	r2, #0
   1558c:	mov	r1, r0
   15590:	uxtb	r3, r3
   15594:	cmp	r3, #47	; 0x2f
   15598:	beq	155c0 <__assert_fail@plt+0x3914>
   1559c:	cmp	r3, #0
   155a0:	bxeq	lr
   155a4:	tst	r2, #1
   155a8:	mov	r2, #0
   155ac:	movne	r0, r1
   155b0:	ldrb	r3, [r1, #1]!
   155b4:	uxtb	r3, r3
   155b8:	cmp	r3, #47	; 0x2f
   155bc:	bne	1559c <__assert_fail@plt+0x38f0>
   155c0:	ldrb	r3, [r1, #1]!
   155c4:	mov	r2, #1
   155c8:	uxtb	r3, r3
   155cc:	cmp	r3, #47	; 0x2f
   155d0:	bne	1559c <__assert_fail@plt+0x38f0>
   155d4:	b	155c0 <__assert_fail@plt+0x3914>
   155d8:	push	{r4, sl, fp, lr}
   155dc:	add	fp, sp, #8
   155e0:	mov	r4, r0
   155e4:	bl	11ac0 <strlen@plt>
   155e8:	mov	r1, r0
   155ec:	sub	r2, r4, #1
   155f0:	mov	r0, r1
   155f4:	cmp	r1, #2
   155f8:	popcc	{r4, sl, fp, pc}
   155fc:	ldrb	r3, [r2, r0]
   15600:	sub	r1, r0, #1
   15604:	cmp	r3, #47	; 0x2f
   15608:	beq	155f0 <__assert_fail@plt+0x3944>
   1560c:	pop	{r4, sl, fp, pc}
   15610:	movw	r1, #17032	; 0x4288
   15614:	movt	r1, #4
   15618:	str	r0, [r1, #4]
   1561c:	bx	lr
   15620:	movw	r1, #17032	; 0x4288
   15624:	movt	r1, #4
   15628:	strb	r0, [r1]
   1562c:	bx	lr
   15630:	push	{r4, r5, r6, sl, fp, lr}
   15634:	add	fp, sp, #16
   15638:	sub	sp, sp, #8
   1563c:	movw	r0, #16916	; 0x4214
   15640:	movt	r0, #4
   15644:	ldr	r0, [r0]
   15648:	bl	31564 <__assert_fail@plt+0x1f8b8>
   1564c:	cmp	r0, #0
   15650:	beq	15678 <__assert_fail@plt+0x39cc>
   15654:	movw	r5, #17032	; 0x4288
   15658:	movt	r5, #4
   1565c:	ldrb	r0, [r5]
   15660:	cmp	r0, #0
   15664:	beq	156a4 <__assert_fail@plt+0x39f8>
   15668:	bl	11af0 <__errno_location@plt>
   1566c:	ldr	r0, [r0]
   15670:	cmp	r0, #32
   15674:	bne	156a4 <__assert_fail@plt+0x39f8>
   15678:	movw	r0, #16912	; 0x4210
   1567c:	movt	r0, #4
   15680:	ldr	r0, [r0]
   15684:	bl	31564 <__assert_fail@plt+0x1f8b8>
   15688:	cmp	r0, #0
   1568c:	subeq	sp, fp, #16
   15690:	popeq	{r4, r5, r6, sl, fp, pc}
   15694:	movw	r0, #16816	; 0x41b0
   15698:	movt	r0, #4
   1569c:	ldr	r0, [r0]
   156a0:	bl	118e0 <_exit@plt>
   156a4:	movw	r1, #12458	; 0x30aa
   156a8:	mov	r0, #0
   156ac:	mov	r2, #5
   156b0:	movt	r1, #3
   156b4:	bl	11940 <dcgettext@plt>
   156b8:	ldr	r6, [r5, #4]
   156bc:	mov	r4, r0
   156c0:	bl	11af0 <__errno_location@plt>
   156c4:	ldr	r5, [r0]
   156c8:	cmp	r6, #0
   156cc:	bne	156e8 <__assert_fail@plt+0x3a3c>
   156d0:	movw	r2, #14644	; 0x3934
   156d4:	mov	r0, #0
   156d8:	mov	r1, r5
   156dc:	mov	r3, r4
   156e0:	movt	r2, #3
   156e4:	b	15708 <__assert_fail@plt+0x3a5c>
   156e8:	mov	r0, r6
   156ec:	bl	19b24 <__assert_fail@plt+0x7e78>
   156f0:	movw	r2, #12470	; 0x30b6
   156f4:	mov	r3, r0
   156f8:	str	r4, [sp]
   156fc:	mov	r0, #0
   15700:	mov	r1, r5
   15704:	movt	r2, #3
   15708:	bl	119e8 <error@plt>
   1570c:	movw	r0, #16816	; 0x41b0
   15710:	movt	r0, #4
   15714:	ldr	r0, [r0]
   15718:	bl	118e0 <_exit@plt>
   1571c:	sub	sp, sp, #8
   15720:	push	{fp, lr}
   15724:	mov	fp, sp
   15728:	sub	sp, sp, #8
   1572c:	str	r2, [fp, #8]
   15730:	mov	r2, #0
   15734:	tst	r1, #64	; 0x40
   15738:	str	r3, [fp, #12]
   1573c:	addne	r2, fp, #8
   15740:	orrne	r2, r2, #4
   15744:	strne	r2, [sp, #4]
   15748:	ldrne	r2, [fp, #8]
   1574c:	bl	11a00 <open64@plt>
   15750:	bl	19ef4 <__assert_fail@plt+0x8248>
   15754:	mov	sp, fp
   15758:	pop	{fp, lr}
   1575c:	add	sp, sp, #8
   15760:	bx	lr
   15764:	andeq	r0, r0, r0
   15768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1576c:	add	fp, sp, #28
   15770:	sub	sp, sp, #4
   15774:	vpush	{d8-d9}
   15778:	sub	sp, sp, #96	; 0x60
   1577c:	mov	r7, r3
   15780:	mov	r6, r2
   15784:	mov	r9, r1
   15788:	str	r0, [sp, #36]	; 0x24
   1578c:	bl	11be0 <localeconv@plt>
   15790:	ldr	r5, [r0]
   15794:	mov	r4, r0
   15798:	mov	r0, r5
   1579c:	bl	11ac0 <strlen@plt>
   157a0:	movw	r2, #8421	; 0x20e5
   157a4:	sub	r1, r0, #1
   157a8:	cmp	r1, #16
   157ac:	movt	r2, #3
   157b0:	movcc	r2, r5
   157b4:	ldr	r5, [r4, #4]
   157b8:	ldr	r4, [r4, #8]
   157bc:	movcs	r0, #1
   157c0:	str	r0, [sp, #8]
   157c4:	str	r2, [sp, #4]
   157c8:	mov	r0, r5
   157cc:	bl	11ac0 <strlen@plt>
   157d0:	movw	r3, #11207	; 0x2bc7
   157d4:	cmp	r0, #17
   157d8:	movw	r0, #647	; 0x287
   157dc:	ldr	r2, [fp, #16]
   157e0:	ldr	sl, [fp, #8]
   157e4:	ldr	r8, [fp, #12]
   157e8:	str	r6, [sp, #20]
   157ec:	str	r7, [sp, #28]
   157f0:	str	r4, [sp, #12]
   157f4:	movt	r3, #3
   157f8:	add	r1, r6, r0
   157fc:	movcc	r3, r5
   15800:	ands	r0, r7, #32
   15804:	ldr	r5, [fp, #20]
   15808:	str	r1, [sp, #24]
   1580c:	str	r0, [sp, #16]
   15810:	mov	r0, #1000	; 0x3e8
   15814:	str	r3, [sp, #44]	; 0x2c
   15818:	movwne	r0, #1024	; 0x400
   1581c:	str	r0, [sp, #32]
   15820:	and	r0, r7, #3
   15824:	str	r0, [sp, #40]	; 0x28
   15828:	subs	r0, sl, r2
   1582c:	sbcs	r0, r8, r5
   15830:	bcs	15924 <__assert_fail@plt+0x3c78>
   15834:	orrs	r0, sl, r8
   15838:	mov	r4, r9
   1583c:	beq	15a0c <__assert_fail@plt+0x3d60>
   15840:	ldr	r5, [fp, #20]
   15844:	mov	r0, r2
   15848:	mov	r2, sl
   1584c:	mov	r3, r8
   15850:	mov	r1, r5
   15854:	bl	31d00 <__assert_fail@plt+0x20054>
   15858:	ldr	r2, [fp, #16]
   1585c:	mov	r6, r0
   15860:	mov	r3, r1
   15864:	umull	r0, r1, r0, sl
   15868:	mla	r1, r6, r8, r1
   1586c:	mla	r1, r3, sl, r1
   15870:	subs	r0, r2, r0
   15874:	sbc	r1, r5, r1
   15878:	orrs	r0, r0, r1
   1587c:	bne	15a0c <__assert_fail@plt+0x3d60>
   15880:	ldr	r5, [sp, #36]	; 0x24
   15884:	mov	r1, r4
   15888:	mov	r2, r6
   1588c:	mov	r8, r3
   15890:	mov	r0, r5
   15894:	bl	31d00 <__assert_fail@plt+0x20054>
   15898:	mov	r7, r0
   1589c:	mov	r9, r1
   158a0:	umull	r0, r1, r0, r6
   158a4:	mov	r2, #10
   158a8:	mov	r3, r8
   158ac:	mla	r1, r7, r8, r1
   158b0:	subs	r0, r5, r0
   158b4:	mla	r1, r9, r6, r1
   158b8:	umull	sl, r0, r0, r2
   158bc:	mov	r2, r6
   158c0:	sbc	r1, r4, r1
   158c4:	add	r1, r1, r1, lsl #2
   158c8:	add	r5, r0, r1, lsl #1
   158cc:	mov	r0, sl
   158d0:	mov	r1, r5
   158d4:	bl	31d00 <__assert_fail@plt+0x20054>
   158d8:	mov	r4, r0
   158dc:	umull	r0, r2, r0, r6
   158e0:	mla	r2, r4, r8, r2
   158e4:	subs	r0, sl, r0
   158e8:	mla	r1, r1, r6, r2
   158ec:	mov	r2, #2
   158f0:	sbc	r1, r5, r1
   158f4:	subs	r3, r6, r0, lsl #1
   158f8:	lsl	r1, r1, #1
   158fc:	orr	r1, r1, r0, lsr #31
   15900:	sbcs	r3, r8, r1
   15904:	orr	r5, r1, r0, lsl #1
   15908:	movwcc	r2, #3
   1590c:	cmp	r5, #0
   15910:	movwne	r5, #1
   15914:	rsbs	r0, r6, r0, lsl #1
   15918:	sbcs	r0, r1, r8
   1591c:	movcs	r5, r2
   15920:	b	1599c <__assert_fail@plt+0x3cf0>
   15924:	mov	r0, sl
   15928:	mov	r1, r8
   1592c:	mov	r3, r5
   15930:	bl	31d00 <__assert_fail@plt+0x20054>
   15934:	ldr	r2, [fp, #16]
   15938:	mov	r6, r0
   1593c:	mov	r3, r1
   15940:	mov	r4, r9
   15944:	umull	r0, r1, r0, r2
   15948:	mla	r1, r6, r5, r1
   1594c:	subs	r0, sl, r0
   15950:	mla	r1, r3, r2, r1
   15954:	sbc	r1, r8, r1
   15958:	orrs	r0, r0, r1
   1595c:	bne	15a0c <__assert_fail@plt+0x3d60>
   15960:	ldr	r5, [sp, #36]	; 0x24
   15964:	mov	r2, r6
   15968:	umull	r7, r0, r6, r5
   1596c:	mla	r0, r6, r4, r0
   15970:	mla	r9, r3, r5, r0
   15974:	mov	r0, r7
   15978:	mov	r1, r9
   1597c:	bl	31d00 <__assert_fail@plt+0x20054>
   15980:	ldr	r2, [fp, #16]
   15984:	eor	r1, r1, r4
   15988:	eor	r0, r0, r5
   1598c:	orrs	r0, r0, r1
   15990:	bne	15a0c <__assert_fail@plt+0x3d60>
   15994:	mov	r5, #0
   15998:	mov	r4, #0
   1599c:	ldr	r0, [sp, #28]
   159a0:	ldr	r2, [sp, #32]
   159a4:	mvn	r6, #0
   159a8:	ands	r8, r0, #16
   159ac:	beq	159c0 <__assert_fail@plt+0x3d14>
   159b0:	subs	r0, r7, r2
   159b4:	mov	r6, #0
   159b8:	sbcs	r0, r9, #0
   159bc:	bcs	15d18 <__assert_fail@plt+0x406c>
   159c0:	ldr	r0, [sp, #24]
   159c4:	mov	sl, r7
   159c8:	str	r0, [sp, #36]	; 0x24
   159cc:	ldr	r0, [sp, #40]	; 0x28
   159d0:	cmp	r0, #0
   159d4:	beq	15e64 <__assert_fail@plt+0x41b8>
   159d8:	cmp	r0, #1
   159dc:	bne	15d0c <__assert_fail@plt+0x4060>
   159e0:	rsbs	r1, r5, #0
   159e4:	mov	r0, #0
   159e8:	and	r3, sl, #1
   159ec:	ldr	r5, [sp, #36]	; 0x24
   159f0:	sbc	r0, r0, #0
   159f4:	eor	r1, r3, r1
   159f8:	orrs	r0, r1, r0
   159fc:	addne	r4, r4, #1
   15a00:	cmp	r4, #5
   15a04:	bgt	15e74 <__assert_fail@plt+0x41c8>
   15a08:	b	15ec8 <__assert_fail@plt+0x421c>
   15a0c:	ldr	r9, [fp, #20]
   15a10:	mov	r0, r2
   15a14:	mov	r1, r9
   15a18:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15a1c:	vmov	d8, r0, r1
   15a20:	ldr	r0, [sp, #36]	; 0x24
   15a24:	mov	r1, r4
   15a28:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15a2c:	mov	r6, r0
   15a30:	mov	r7, r1
   15a34:	mov	r0, sl
   15a38:	mov	r1, r8
   15a3c:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15a40:	vmov	d17, r6, r7
   15a44:	ldr	r7, [sp, #28]
   15a48:	vmov	d16, r0, r1
   15a4c:	vdiv.f64	d16, d16, d8
   15a50:	vmul.f64	d8, d16, d17
   15a54:	tst	r7, #16
   15a58:	bne	15acc <__assert_fail@plt+0x3e20>
   15a5c:	ldr	r0, [sp, #40]	; 0x28
   15a60:	ldr	sl, [sp, #20]
   15a64:	cmp	r0, #1
   15a68:	beq	15c6c <__assert_fail@plt+0x3fc0>
   15a6c:	vldr	d16, [pc, #980]	; 15e48 <__assert_fail@plt+0x419c>
   15a70:	ldr	r8, [sp, #24]
   15a74:	vcmpe.f64	d8, d16
   15a78:	vmrs	APSR_nzcv, fpscr
   15a7c:	bpl	15c70 <__assert_fail@plt+0x3fc4>
   15a80:	mov	r6, r0
   15a84:	vmov	r0, r1, d8
   15a88:	bl	31d50 <__assert_fail@plt+0x200a4>
   15a8c:	mov	r4, r0
   15a90:	mov	r5, r1
   15a94:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15a98:	vmov	d16, r0, r1
   15a9c:	clz	r0, r6
   15aa0:	mov	r2, #0
   15aa4:	vcmp.f64	d8, d16
   15aa8:	lsr	r0, r0, #5
   15aac:	vmrs	APSR_nzcv, fpscr
   15ab0:	movwne	r2, #1
   15ab4:	and	r0, r0, r2
   15ab8:	adds	r0, r0, r4
   15abc:	adc	r1, r5, #0
   15ac0:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15ac4:	vmov	d8, r0, r1
   15ac8:	b	15c70 <__assert_fail@plt+0x3fc4>
   15acc:	ldr	r0, [sp, #32]
   15ad0:	vmov.f64	d16, #112	; 0x3f800000  1.0
   15ad4:	mov	r6, #0
   15ad8:	vmov	s0, r0
   15adc:	vcvt.f64.u32	d17, s0
   15ae0:	ldr	sl, [sp, #20]
   15ae4:	add	r6, r6, #1
   15ae8:	vmul.f64	d16, d16, d17
   15aec:	cmp	r6, #7
   15af0:	vmulls.f64	d18, d16, d17
   15af4:	vcmpels.f64	d18, d8
   15af8:	vmrsls	APSR_nzcv, fpscr
   15afc:	bls	15ae4 <__assert_fail@plt+0x3e38>
   15b00:	ldr	r0, [sp, #40]	; 0x28
   15b04:	ldr	r8, [sp, #24]
   15b08:	ldr	r5, [sp, #8]
   15b0c:	vdiv.f64	d8, d8, d16
   15b10:	vmov.f64	d16, d8
   15b14:	cmp	r0, #1
   15b18:	beq	15b7c <__assert_fail@plt+0x3ed0>
   15b1c:	vldr	d16, [pc, #804]	; 15e48 <__assert_fail@plt+0x419c>
   15b20:	vcmpe.f64	d8, d16
   15b24:	vmov.f64	d16, d8
   15b28:	vmrs	APSR_nzcv, fpscr
   15b2c:	bpl	15b7c <__assert_fail@plt+0x3ed0>
   15b30:	vmov	r0, r1, d8
   15b34:	bl	31d50 <__assert_fail@plt+0x200a4>
   15b38:	mov	r4, r0
   15b3c:	mov	r5, r1
   15b40:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15b44:	vmov	d16, r0, r1
   15b48:	ldr	r0, [sp, #40]	; 0x28
   15b4c:	mov	r2, #0
   15b50:	vcmp.f64	d8, d16
   15b54:	vmrs	APSR_nzcv, fpscr
   15b58:	movwne	r2, #1
   15b5c:	clz	r0, r0
   15b60:	lsr	r0, r0, #5
   15b64:	and	r0, r0, r2
   15b68:	adds	r0, r0, r4
   15b6c:	adc	r1, r5, #0
   15b70:	ldr	r5, [sp, #8]
   15b74:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15b78:	vmov	d16, r0, r1
   15b7c:	movw	r1, #12483	; 0x30c3
   15b80:	vmov	r2, r3, d16
   15b84:	mov	r0, sl
   15b88:	movt	r1, #3
   15b8c:	bl	11bf8 <sprintf@plt>
   15b90:	ldr	r1, [sp, #16]
   15b94:	mov	r0, #3
   15b98:	cmp	r1, #0
   15b9c:	movwne	r0, #2
   15ba0:	add	r4, r0, r5
   15ba4:	mov	r0, sl
   15ba8:	bl	11ac0 <strlen@plt>
   15bac:	cmp	r4, r0
   15bb0:	bcc	15bd4 <__assert_fail@plt+0x3f28>
   15bb4:	mov	r2, r0
   15bb8:	add	r5, r5, #1
   15bbc:	tst	r7, #8
   15bc0:	beq	15c98 <__assert_fail@plt+0x3fec>
   15bc4:	add	r0, sl, r2
   15bc8:	ldrb	r0, [r0, #-1]
   15bcc:	cmp	r0, #48	; 0x30
   15bd0:	bne	15c98 <__assert_fail@plt+0x3fec>
   15bd4:	ldr	r0, [sp, #40]	; 0x28
   15bd8:	vmov.f64	d9, #36	; 0x41200000  10.0
   15bdc:	vmul.f64	d8, d8, d9
   15be0:	cmp	r0, #1
   15be4:	beq	15c40 <__assert_fail@plt+0x3f94>
   15be8:	vldr	d16, [pc, #600]	; 15e48 <__assert_fail@plt+0x419c>
   15bec:	vcmpe.f64	d8, d16
   15bf0:	vmrs	APSR_nzcv, fpscr
   15bf4:	bpl	15c40 <__assert_fail@plt+0x3f94>
   15bf8:	vmov	r0, r1, d8
   15bfc:	bl	31d50 <__assert_fail@plt+0x200a4>
   15c00:	mov	r4, r0
   15c04:	mov	r5, r1
   15c08:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15c0c:	vmov	d16, r0, r1
   15c10:	ldr	r0, [sp, #40]	; 0x28
   15c14:	mov	r2, #0
   15c18:	vcmp.f64	d8, d16
   15c1c:	vmrs	APSR_nzcv, fpscr
   15c20:	movwne	r2, #1
   15c24:	clz	r0, r0
   15c28:	lsr	r0, r0, #5
   15c2c:	and	r0, r0, r2
   15c30:	adds	r0, r0, r4
   15c34:	adc	r1, r5, #0
   15c38:	bl	31c8c <__assert_fail@plt+0x1ffe0>
   15c3c:	vmov	d8, r0, r1
   15c40:	movw	r1, #12477	; 0x30bd
   15c44:	vdiv.f64	d16, d8, d9
   15c48:	mov	r0, sl
   15c4c:	vmov	r2, r3, d16
   15c50:	movt	r1, #3
   15c54:	bl	11bf8 <sprintf@plt>
   15c58:	mov	r0, sl
   15c5c:	bl	11ac0 <strlen@plt>
   15c60:	mov	r2, r0
   15c64:	mov	r5, #0
   15c68:	b	15c98 <__assert_fail@plt+0x3fec>
   15c6c:	ldr	r8, [sp, #24]
   15c70:	movw	r1, #12477	; 0x30bd
   15c74:	vmov	r2, r3, d8
   15c78:	mov	r0, sl
   15c7c:	movt	r1, #3
   15c80:	bl	11bf8 <sprintf@plt>
   15c84:	mov	r0, sl
   15c88:	bl	11ac0 <strlen@plt>
   15c8c:	mov	r2, r0
   15c90:	mov	r5, #0
   15c94:	mvn	r6, #0
   15c98:	sub	r4, r8, r2
   15c9c:	mov	r1, sl
   15ca0:	mov	r0, r4
   15ca4:	bl	118a4 <memmove@plt>
   15ca8:	sub	r5, r8, r5
   15cac:	tst	r7, #4
   15cb0:	bne	15f1c <__assert_fail@plt+0x4270>
   15cb4:	ldr	r3, [sp, #32]
   15cb8:	ldr	r5, [fp, #16]
   15cbc:	tst	r7, #128	; 0x80
   15cc0:	beq	16038 <__assert_fail@plt+0x438c>
   15cc4:	cmn	r6, #1
   15cc8:	bgt	15dd8 <__assert_fail@plt+0x412c>
   15ccc:	subs	r0, r5, #2
   15cd0:	mov	r6, #0
   15cd4:	sbcs	r0, r9, #0
   15cd8:	bcc	15dd8 <__assert_fail@plt+0x412c>
   15cdc:	mov	r0, #0
   15ce0:	mov	r1, #1
   15ce4:	mov	r6, #0
   15ce8:	cmp	r6, #7
   15cec:	beq	15dd4 <__assert_fail@plt+0x4128>
   15cf0:	umull	r1, r2, r1, r3
   15cf4:	add	r6, r6, #1
   15cf8:	mla	r0, r0, r3, r2
   15cfc:	subs	r2, r1, r5
   15d00:	sbcs	r2, r0, r9
   15d04:	bcc	15ce8 <__assert_fail@plt+0x403c>
   15d08:	b	15dd8 <__assert_fail@plt+0x412c>
   15d0c:	ldr	r8, [sp, #24]
   15d10:	ldr	r5, [sp, #36]	; 0x24
   15d14:	b	15ecc <__assert_fail@plt+0x4220>
   15d18:	mov	r6, #0
   15d1c:	mov	r0, r7
   15d20:	mov	r1, r9
   15d24:	mov	r3, #0
   15d28:	bl	31d00 <__assert_fail@plt+0x20054>
   15d2c:	ldr	r2, [sp, #32]
   15d30:	mov	sl, r0
   15d34:	mov	r9, r1
   15d38:	mls	r0, r0, r2, r7
   15d3c:	add	r0, r0, r0, lsl #2
   15d40:	add	r0, r4, r0, lsl #1
   15d44:	udiv	r4, r0, r2
   15d48:	mls	r0, r4, r2, r0
   15d4c:	lsl	r0, r0, #1
   15d50:	add	r0, r0, r5, lsr #1
   15d54:	cmp	r0, r2
   15d58:	bcs	15d7c <__assert_fail@plt+0x40d0>
   15d5c:	add	r1, r0, r5
   15d60:	cmn	r0, r5
   15d64:	movwne	r1, #1
   15d68:	mov	r5, r1
   15d6c:	add	r6, r6, #1
   15d70:	cmp	r6, #7
   15d74:	bls	15d98 <__assert_fail@plt+0x40ec>
   15d78:	b	15da8 <__assert_fail@plt+0x40fc>
   15d7c:	add	r0, r0, r5
   15d80:	mov	r5, #2
   15d84:	cmp	r2, r0
   15d88:	movwcc	r5, #3
   15d8c:	add	r6, r6, #1
   15d90:	cmp	r6, #7
   15d94:	bhi	15da8 <__assert_fail@plt+0x40fc>
   15d98:	subs	r0, sl, r2
   15d9c:	mov	r7, sl
   15da0:	sbcs	r0, r9, #0
   15da4:	bcs	15d1c <__assert_fail@plt+0x4070>
   15da8:	rsbs	r0, sl, #9
   15dac:	rscs	r0, r9, #0
   15db0:	bcc	15e50 <__assert_fail@plt+0x41a4>
   15db4:	ldr	r0, [sp, #40]	; 0x28
   15db8:	cmp	r0, #1
   15dbc:	bne	16054 <__assert_fail@plt+0x43a8>
   15dc0:	and	r0, r4, #1
   15dc4:	add	r0, r5, r0
   15dc8:	cmp	r0, #2
   15dcc:	bhi	16064 <__assert_fail@plt+0x43b8>
   15dd0:	b	16098 <__assert_fail@plt+0x43ec>
   15dd4:	mov	r6, #8
   15dd8:	and	r0, r7, #256	; 0x100
   15ddc:	tst	r7, #64	; 0x40
   15de0:	orrsne	r1, r6, r0
   15de4:	movne	r1, #32
   15de8:	addne	r8, sl, #648	; 0x288
   15dec:	strbne	r1, [sl, #647]	; 0x287
   15df0:	cmp	r6, #0
   15df4:	beq	15e1c <__assert_fail@plt+0x4170>
   15df8:	ldr	r1, [sp, #16]
   15dfc:	cmp	r1, #0
   15e00:	moveq	r1, #107	; 0x6b
   15e04:	cmpeq	r6, #1
   15e08:	beq	15e18 <__assert_fail@plt+0x416c>
   15e0c:	movw	r1, #12564	; 0x3114
   15e10:	movt	r1, #3
   15e14:	ldrb	r1, [r1, r6]
   15e18:	strb	r1, [r8], #1
   15e1c:	cmp	r0, #0
   15e20:	beq	16038 <__assert_fail@plt+0x438c>
   15e24:	ldr	r0, [sp, #16]
   15e28:	cmp	r0, #0
   15e2c:	cmpne	r6, #0
   15e30:	movne	r0, #105	; 0x69
   15e34:	strbne	r0, [r8], #1
   15e38:	mov	r0, #66	; 0x42
   15e3c:	strb	r0, [r8], #1
   15e40:	b	16038 <__assert_fail@plt+0x438c>
   15e44:	nop	{0}
   15e48:	andeq	r0, r0, r0
   15e4c:	mvnsmi	r0, #0
   15e50:	ldr	r0, [sp, #24]
   15e54:	str	r0, [sp, #36]	; 0x24
   15e58:	ldr	r0, [sp, #40]	; 0x28
   15e5c:	cmp	r0, #0
   15e60:	bne	159d8 <__assert_fail@plt+0x3d2c>
   15e64:	add	r0, r4, r5
   15e68:	ldr	r5, [sp, #36]	; 0x24
   15e6c:	cmp	r0, #1
   15e70:	blt	15ec8 <__assert_fail@plt+0x421c>
   15e74:	adds	sl, sl, #1
   15e78:	adc	r9, r9, #0
   15e7c:	cmp	r6, #7
   15e80:	bgt	15ec8 <__assert_fail@plt+0x421c>
   15e84:	cmp	r8, #0
   15e88:	beq	15ec8 <__assert_fail@plt+0x421c>
   15e8c:	eor	r0, sl, r2
   15e90:	orrs	r0, r0, r9
   15e94:	ldreq	r0, [sp, #28]
   15e98:	addeq	r6, r6, #1
   15e9c:	moveq	r9, #0
   15ea0:	moveq	sl, #1
   15ea4:	tsteq	r0, #8
   15ea8:	bne	15ec8 <__assert_fail@plt+0x421c>
   15eac:	ldr	r2, [sp, #8]
   15eb0:	mov	r0, #48	; 0x30
   15eb4:	ldr	r1, [sp, #4]
   15eb8:	strb	r0, [r5, #-1]!
   15ebc:	sub	r5, r5, r2
   15ec0:	mov	r0, r5
   15ec4:	bl	118ec <memcpy@plt>
   15ec8:	ldr	r8, [sp, #24]
   15ecc:	mov	r4, r5
   15ed0:	mov	r0, sl
   15ed4:	mov	r1, r9
   15ed8:	mov	r2, #10
   15edc:	mov	r3, #0
   15ee0:	bl	31d00 <__assert_fail@plt+0x20054>
   15ee4:	add	r2, r0, r0, lsl #2
   15ee8:	sub	r2, sl, r2, lsl #1
   15eec:	orr	r2, r2, #48	; 0x30
   15ef0:	strb	r2, [r4, #-1]!
   15ef4:	rsbs	r2, sl, #9
   15ef8:	mov	sl, r0
   15efc:	rscs	r2, r9, #0
   15f00:	mov	r9, r1
   15f04:	bcc	15ed0 <__assert_fail@plt+0x4224>
   15f08:	ldr	r7, [sp, #28]
   15f0c:	ldr	r9, [fp, #20]
   15f10:	ldr	sl, [sp, #20]
   15f14:	tst	r7, #4
   15f18:	beq	15cb4 <__assert_fail@plt+0x4008>
   15f1c:	ldr	r0, [sp, #44]	; 0x2c
   15f20:	mov	r7, r5
   15f24:	str	r6, [sp, #8]
   15f28:	sub	r5, r5, r4
   15f2c:	bl	11ac0 <strlen@plt>
   15f30:	add	r8, sp, #48	; 0x30
   15f34:	str	r0, [sp, #40]	; 0x28
   15f38:	mov	r1, r4
   15f3c:	mov	r2, r5
   15f40:	mov	r0, r8
   15f44:	bl	118ec <memcpy@plt>
   15f48:	ldr	r0, [sp, #12]
   15f4c:	ldrb	r6, [r0]
   15f50:	cmp	r6, #255	; 0xff
   15f54:	mov	r9, r6
   15f58:	moveq	r9, r5
   15f5c:	cmp	r6, #0
   15f60:	mvneq	r9, #0
   15f64:	cmp	r9, r5
   15f68:	movhi	r9, r5
   15f6c:	sub	r4, r7, r9
   15f70:	sub	r7, r5, r9
   15f74:	mov	r2, r9
   15f78:	add	r1, r8, r7
   15f7c:	mov	r0, r4
   15f80:	bl	118ec <memcpy@plt>
   15f84:	cmp	r7, #0
   15f88:	beq	16014 <__assert_fail@plt+0x4368>
   15f8c:	clz	r0, r6
   15f90:	ldr	r8, [sp, #12]
   15f94:	lsr	sl, r0, #5
   15f98:	ldr	r0, [sp, #40]	; 0x28
   15f9c:	rsb	r0, r0, #0
   15fa0:	str	r0, [sp, #36]	; 0x24
   15fa4:	ldr	r0, [sp, #36]	; 0x24
   15fa8:	ldr	r1, [sp, #44]	; 0x2c
   15fac:	ldr	r2, [sp, #40]	; 0x28
   15fb0:	add	r4, r4, r0
   15fb4:	mov	r0, r4
   15fb8:	bl	118ec <memcpy@plt>
   15fbc:	tst	sl, #1
   15fc0:	add	r0, sp, #48	; 0x30
   15fc4:	addeq	r8, r8, #1
   15fc8:	ldrb	r6, [r8]
   15fcc:	cmp	r6, #255	; 0xff
   15fd0:	mov	r5, r6
   15fd4:	moveq	r5, r7
   15fd8:	cmp	r6, #0
   15fdc:	moveq	r5, r9
   15fe0:	cmp	r7, r5
   15fe4:	movcc	r5, r7
   15fe8:	sub	r7, r7, r5
   15fec:	sub	r4, r4, r5
   15ff0:	mov	r2, r5
   15ff4:	add	r1, r0, r7
   15ff8:	mov	r0, r4
   15ffc:	bl	118ec <memcpy@plt>
   16000:	clz	r0, r6
   16004:	cmp	r7, #0
   16008:	mov	r9, r5
   1600c:	lsr	sl, r0, #5
   16010:	bne	15fa4 <__assert_fail@plt+0x42f8>
   16014:	ldr	r8, [sp, #24]
   16018:	ldr	sl, [sp, #20]
   1601c:	ldr	r7, [sp, #28]
   16020:	ldr	r3, [sp, #32]
   16024:	ldr	r9, [fp, #20]
   16028:	ldr	r5, [fp, #16]
   1602c:	ldr	r6, [sp, #8]
   16030:	tst	r7, #128	; 0x80
   16034:	bne	15cc4 <__assert_fail@plt+0x4018>
   16038:	mov	r0, #0
   1603c:	strb	r0, [r8]
   16040:	mov	r0, r4
   16044:	sub	sp, fp, #48	; 0x30
   16048:	vpop	{d8-d9}
   1604c:	add	sp, sp, #4
   16050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16054:	cmp	r0, #0
   16058:	bne	16098 <__assert_fail@plt+0x43ec>
   1605c:	cmp	r5, #0
   16060:	beq	16098 <__assert_fail@plt+0x43ec>
   16064:	adds	r0, sl, #1
   16068:	add	r4, r4, #1
   1606c:	mov	r5, #0
   16070:	adc	r1, r9, #0
   16074:	cmp	r4, #10
   16078:	bne	16098 <__assert_fail@plt+0x43ec>
   1607c:	rsbs	r3, r0, #9
   16080:	mov	r4, #0
   16084:	mov	sl, r0
   16088:	mov	r9, r1
   1608c:	mov	r5, #0
   16090:	rscs	r3, r1, #0
   16094:	bcc	16104 <__assert_fail@plt+0x4458>
   16098:	ldr	r0, [sp, #28]
   1609c:	tst	r0, #8
   160a0:	beq	160c8 <__assert_fail@plt+0x441c>
   160a4:	cmp	r4, #0
   160a8:	bne	160c8 <__assert_fail@plt+0x441c>
   160ac:	ldr	r0, [sp, #24]
   160b0:	str	r0, [sp, #36]	; 0x24
   160b4:	mov	r4, #0
   160b8:	ldr	r0, [sp, #40]	; 0x28
   160bc:	cmp	r0, #0
   160c0:	bne	159d8 <__assert_fail@plt+0x3d2c>
   160c4:	b	15e64 <__assert_fail@plt+0x41b8>
   160c8:	ldr	r1, [sp, #20]
   160cc:	ldr	r2, [sp, #8]
   160d0:	add	r0, r4, #48	; 0x30
   160d4:	strb	r0, [r1, #646]!	; 0x286
   160d8:	sub	r0, r1, r2
   160dc:	ldr	r1, [sp, #4]
   160e0:	str	r0, [sp, #36]	; 0x24
   160e4:	bl	118ec <memcpy@plt>
   160e8:	ldr	r2, [sp, #32]
   160ec:	mov	r5, #0
   160f0:	mov	r4, #0
   160f4:	ldr	r0, [sp, #40]	; 0x28
   160f8:	cmp	r0, #0
   160fc:	bne	159d8 <__assert_fail@plt+0x3d2c>
   16100:	b	15e64 <__assert_fail@plt+0x41b8>
   16104:	ldr	r0, [sp, #24]
   16108:	mov	r5, #0
   1610c:	mov	sl, #10
   16110:	mov	r9, #0
   16114:	str	r0, [sp, #36]	; 0x24
   16118:	ldr	r0, [sp, #40]	; 0x28
   1611c:	cmp	r0, #0
   16120:	bne	159d8 <__assert_fail@plt+0x3d2c>
   16124:	b	15e64 <__assert_fail@plt+0x41b8>
   16128:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1612c:	add	fp, sp, #24
   16130:	sub	sp, sp, #8
   16134:	mov	r4, r2
   16138:	mov	r8, r1
   1613c:	cmp	r0, #0
   16140:	bne	1616c <__assert_fail@plt+0x44c0>
   16144:	movw	r0, #12489	; 0x30c9
   16148:	movt	r0, #3
   1614c:	bl	11a0c <getenv@plt>
   16150:	cmp	r0, #0
   16154:	bne	1616c <__assert_fail@plt+0x44c0>
   16158:	movw	r0, #12500	; 0x30d4
   1615c:	movt	r0, #3
   16160:	bl	11a0c <getenv@plt>
   16164:	cmp	r0, #0
   16168:	beq	16298 <__assert_fail@plt+0x45ec>
   1616c:	mov	r6, r0
   16170:	movw	r7, #12588	; 0x312c
   16174:	movw	r1, #12576	; 0x3120
   16178:	mov	r3, #4
   1617c:	ldrb	r5, [r6], #1
   16180:	movt	r7, #3
   16184:	movt	r1, #3
   16188:	mov	r2, r7
   1618c:	cmp	r5, #39	; 0x27
   16190:	movne	r6, r0
   16194:	mov	r0, r6
   16198:	bl	31150 <__assert_fail@plt+0x1f4a4>
   1619c:	sub	r1, r5, #39	; 0x27
   161a0:	cmp	r0, #0
   161a4:	clz	r1, r1
   161a8:	lsr	r1, r1, #5
   161ac:	lsl	r5, r1, #2
   161b0:	blt	161e8 <__assert_fail@plt+0x453c>
   161b4:	ldr	r0, [r7, r0, lsl #2]
   161b8:	mov	r2, #1
   161bc:	mov	r1, #0
   161c0:	str	r2, [r4]
   161c4:	str	r1, [r4, #4]
   161c8:	orr	r1, r0, r5
   161cc:	mov	r0, #0
   161d0:	str	r1, [r8]
   161d4:	ldrd	r2, [r4]
   161d8:	orrs	r1, r2, r3
   161dc:	beq	16224 <__assert_fail@plt+0x4578>
   161e0:	sub	sp, fp, #24
   161e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161e8:	movw	r0, #12510	; 0x30de
   161ec:	add	r1, sp, #4
   161f0:	mov	r2, #0
   161f4:	mov	r3, r4
   161f8:	mov	r7, #0
   161fc:	movt	r0, #3
   16200:	str	r0, [sp]
   16204:	mov	r0, r6
   16208:	bl	1ac58 <__assert_fail@plt+0x8fac>
   1620c:	cmp	r0, #0
   16210:	beq	16254 <__assert_fail@plt+0x45a8>
   16214:	str	r7, [r8]
   16218:	ldrd	r2, [r4]
   1621c:	orrs	r1, r2, r3
   16220:	bne	161e0 <__assert_fail@plt+0x4534>
   16224:	movw	r0, #12546	; 0x3102
   16228:	movt	r0, #3
   1622c:	bl	11a0c <getenv@plt>
   16230:	cmp	r0, #0
   16234:	mov	r2, #512	; 0x200
   16238:	mov	r0, #4
   1623c:	mov	r1, #0
   16240:	movweq	r2, #1024	; 0x400
   16244:	str	r2, [r4]
   16248:	str	r1, [r4, #4]
   1624c:	sub	sp, fp, #24
   16250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16254:	ldrb	r0, [r6]
   16258:	sub	r0, r0, #48	; 0x30
   1625c:	uxtb	r0, r0
   16260:	cmp	r0, #10
   16264:	bcc	16290 <__assert_fail@plt+0x45e4>
   16268:	ldr	r0, [sp, #4]
   1626c:	cmp	r0, r6
   16270:	beq	162c0 <__assert_fail@plt+0x4614>
   16274:	ldrb	r2, [r6, #1]
   16278:	add	r1, r6, #1
   1627c:	mov	r6, r1
   16280:	sub	r2, r2, #48	; 0x30
   16284:	uxtb	r2, r2
   16288:	cmp	r2, #10
   1628c:	bcs	1626c <__assert_fail@plt+0x45c0>
   16290:	mov	r1, r5
   16294:	b	161cc <__assert_fail@plt+0x4520>
   16298:	movw	r0, #12546	; 0x3102
   1629c:	movt	r0, #3
   162a0:	bl	11a0c <getenv@plt>
   162a4:	mov	r2, #512	; 0x200
   162a8:	cmp	r0, #0
   162ac:	mov	r1, #0
   162b0:	movweq	r2, #1024	; 0x400
   162b4:	str	r2, [r4]
   162b8:	str	r1, [r4, #4]
   162bc:	b	161cc <__assert_fail@plt+0x4520>
   162c0:	ldrb	r2, [r0, #-1]
   162c4:	orr	r1, r5, #384	; 0x180
   162c8:	cmp	r2, #66	; 0x42
   162cc:	mov	r2, r1
   162d0:	orrne	r2, r5, #128	; 0x80
   162d4:	bne	162e8 <__assert_fail@plt+0x463c>
   162d8:	ldrb	r0, [r0, #-2]
   162dc:	cmp	r0, #105	; 0x69
   162e0:	orreq	r1, r2, #32
   162e4:	b	161cc <__assert_fail@plt+0x4520>
   162e8:	orr	r1, r2, #32
   162ec:	b	161cc <__assert_fail@plt+0x4520>
   162f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162f4:	add	fp, sp, #28
   162f8:	sub	sp, sp, #388	; 0x184
   162fc:	mov	r5, r1
   16300:	mov	r9, r0
   16304:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   16308:	cmp	r0, #2
   1630c:	str	r5, [sp, #20]
   16310:	bcc	16360 <__assert_fail@plt+0x46b4>
   16314:	sub	r6, fp, #88	; 0x58
   16318:	mov	r7, #0
   1631c:	mov	r0, r6
   16320:	str	r7, [fp, #-80]	; 0xffffffb0
   16324:	str	r7, [fp, #-84]	; 0xffffffac
   16328:	strb	r7, [fp, #-88]	; 0xffffffa8
   1632c:	str	r5, [fp, #-72]	; 0xffffffb8
   16330:	strb	r7, [fp, #-76]	; 0xffffffb4
   16334:	bl	17cdc <__assert_fail@plt+0x6030>
   16338:	ldrb	r5, [fp, #-64]	; 0xffffffc0
   1633c:	ldr	r4, [fp, #-60]	; 0xffffffc4
   16340:	cmp	r5, #0
   16344:	beq	163c8 <__assert_fail@plt+0x471c>
   16348:	cmp	r4, #0
   1634c:	bne	163c8 <__assert_fail@plt+0x471c>
   16350:	mov	r4, r9
   16354:	mov	r0, r4
   16358:	sub	sp, fp, #28
   1635c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16360:	ldrb	r4, [r5]
   16364:	cmp	r4, #0
   16368:	beq	16580 <__assert_fail@plt+0x48d4>
   1636c:	bl	11a90 <__ctype_b_loc@plt>
   16370:	ldr	r8, [r0]
   16374:	str	r0, [sp]
   16378:	add	r0, r8, r4, lsl #1
   1637c:	ldrb	r0, [r0, #1]
   16380:	tst	r0, #1
   16384:	beq	16394 <__assert_fail@plt+0x46e8>
   16388:	bl	11a60 <__ctype_tolower_loc@plt>
   1638c:	ldr	r0, [r0]
   16390:	ldrb	r4, [r0, r4, lsl #2]
   16394:	ldrb	r6, [r9]
   16398:	cmp	r6, #0
   1639c:	beq	16590 <__assert_fail@plt+0x48e4>
   163a0:	mov	r0, #0
   163a4:	mov	sl, r9
   163a8:	mov	r9, r5
   163ac:	mov	r1, #0
   163b0:	mov	r7, #0
   163b4:	str	r4, [sp, #8]
   163b8:	str	r0, [sp, #4]
   163bc:	mov	r0, #1
   163c0:	str	r0, [sp, #12]
   163c4:	b	16484 <__assert_fail@plt+0x47d8>
   163c8:	ldr	r0, [sp, #20]
   163cc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   163d0:	str	r7, [fp, #-136]	; 0xffffff78
   163d4:	str	r7, [fp, #-140]	; 0xffffff74
   163d8:	strb	r7, [fp, #-144]	; 0xffffff70
   163dc:	str	r0, [fp, #-128]	; 0xffffff80
   163e0:	add	r0, r6, #32
   163e4:	strb	r7, [fp, #-132]	; 0xffffff7c
   163e8:	cmp	r1, r0
   163ec:	beq	165a0 <__assert_fail@plt+0x48f4>
   163f0:	ldr	r6, [fp, #-68]	; 0xffffffbc
   163f4:	mov	r7, r1
   163f8:	b	165b8 <__assert_fail@plt+0x490c>
   163fc:	ldr	r0, [sp, #12]
   16400:	tst	r0, #1
   16404:	beq	16498 <__assert_fail@plt+0x47ec>
   16408:	cmp	r9, #0
   1640c:	beq	1643c <__assert_fail@plt+0x4790>
   16410:	ldr	r0, [sp, #4]
   16414:	mov	r4, r1
   16418:	sub	r1, r1, r0
   1641c:	mov	r0, r9
   16420:	bl	11b80 <strnlen@plt>
   16424:	ldrb	r0, [r9, r0]!
   16428:	str	r4, [sp, #4]
   1642c:	cmp	r0, #0
   16430:	beq	1643c <__assert_fail@plt+0x4790>
   16434:	str	r4, [sp, #4]
   16438:	b	16498 <__assert_fail@plt+0x47ec>
   1643c:	mov	r0, r5
   16440:	bl	11ac0 <strlen@plt>
   16444:	mov	r2, r0
   16448:	mov	r0, sl
   1644c:	mov	r1, r5
   16450:	sub	r3, fp, #88	; 0x58
   16454:	mov	r6, sl
   16458:	bl	16ebc <__assert_fail@plt+0x5210>
   1645c:	cmp	r0, #0
   16460:	bne	169f8 <__assert_fail@plt+0x4d4c>
   16464:	ldr	r1, [sp, #12]
   16468:	ldrb	r6, [r6]
   1646c:	mov	r9, #0
   16470:	and	r1, r1, r0
   16474:	ldr	r0, [sp]
   16478:	str	r1, [sp, #12]
   1647c:	ldr	r8, [r0]
   16480:	b	16498 <__assert_fail@plt+0x47ec>
   16484:	add	r0, r7, r7, lsl #2
   16488:	str	r1, [sp, #16]
   1648c:	cmp	r1, r0
   16490:	cmpcs	r7, #10
   16494:	bcs	163fc <__assert_fail@plt+0x4750>
   16498:	uxtb	r4, r6
   1649c:	add	r0, r8, r4, lsl #1
   164a0:	ldrb	r0, [r0, #1]
   164a4:	tst	r0, #1
   164a8:	beq	164b8 <__assert_fail@plt+0x480c>
   164ac:	bl	11a60 <__ctype_tolower_loc@plt>
   164b0:	ldr	r0, [r0]
   164b4:	ldr	r4, [r0, r4, lsl #2]
   164b8:	ldr	r0, [sp, #8]
   164bc:	cmp	r4, r0
   164c0:	bne	16558 <__assert_fail@plt+0x48ac>
   164c4:	mov	r4, #1
   164c8:	ldrb	r6, [r5, r4]
   164cc:	cmp	r6, #0
   164d0:	beq	169a8 <__assert_fail@plt+0x4cfc>
   164d4:	ldrb	r5, [sl, r4]
   164d8:	cmp	r5, #0
   164dc:	beq	169b8 <__assert_fail@plt+0x4d0c>
   164e0:	add	r0, r8, r5, lsl #1
   164e4:	ldrb	r0, [r0, #1]
   164e8:	tst	r0, #1
   164ec:	bne	16514 <__assert_fail@plt+0x4868>
   164f0:	add	r0, r8, r6, lsl #1
   164f4:	ldrb	r0, [r0, #1]
   164f8:	tst	r0, #1
   164fc:	bne	16530 <__assert_fail@plt+0x4884>
   16500:	cmp	r5, r6
   16504:	ldr	r5, [sp, #20]
   16508:	add	r4, r4, #1
   1650c:	beq	164c8 <__assert_fail@plt+0x481c>
   16510:	b	1654c <__assert_fail@plt+0x48a0>
   16514:	bl	11a60 <__ctype_tolower_loc@plt>
   16518:	ldr	r0, [r0]
   1651c:	ldr	r5, [r0, r5, lsl #2]
   16520:	add	r0, r8, r6, lsl #1
   16524:	ldrb	r0, [r0, #1]
   16528:	tst	r0, #1
   1652c:	beq	16500 <__assert_fail@plt+0x4854>
   16530:	bl	11a60 <__ctype_tolower_loc@plt>
   16534:	ldr	r0, [r0]
   16538:	ldr	r6, [r0, r6, lsl #2]
   1653c:	cmp	r5, r6
   16540:	ldr	r5, [sp, #20]
   16544:	add	r4, r4, #1
   16548:	beq	164c8 <__assert_fail@plt+0x481c>
   1654c:	ldr	r0, [sp, #16]
   16550:	add	r0, r0, r4
   16554:	b	16560 <__assert_fail@plt+0x48b4>
   16558:	ldr	r0, [sp, #16]
   1655c:	add	r0, r0, #1
   16560:	str	r0, [sp, #16]
   16564:	ldrb	r6, [sl, #1]!
   16568:	add	r7, r7, #1
   1656c:	mov	r4, #0
   16570:	ldr	r1, [sp, #16]
   16574:	cmp	r6, #0
   16578:	bne	16484 <__assert_fail@plt+0x47d8>
   1657c:	b	169ac <__assert_fail@plt+0x4d00>
   16580:	mov	r4, r9
   16584:	mov	r0, r4
   16588:	sub	sp, fp, #28
   1658c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16590:	mov	r4, #0
   16594:	mov	r0, r4
   16598:	sub	sp, fp, #28
   1659c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a0:	ldr	r6, [fp, #-68]	; 0xffffffbc
   165a4:	sub	r0, fp, #184	; 0xb8
   165a8:	add	r7, r0, #16
   165ac:	mov	r0, r7
   165b0:	mov	r2, r6
   165b4:	bl	118ec <memcpy@plt>
   165b8:	cmp	r5, #0
   165bc:	str	r6, [fp, #-180]	; 0xffffff4c
   165c0:	str	r7, [fp, #-184]	; 0xffffff48
   165c4:	strb	r5, [fp, #-176]	; 0xffffff50
   165c8:	beq	165dc <__assert_fail@plt+0x4930>
   165cc:	mov	r0, r4
   165d0:	str	r4, [fp, #-172]	; 0xffffff54
   165d4:	bl	11910 <towlower@plt>
   165d8:	str	r0, [fp, #-172]	; 0xffffff54
   165dc:	mov	r4, #0
   165e0:	add	r0, sp, #176	; 0xb0
   165e4:	str	r4, [sp, #184]	; 0xb8
   165e8:	str	r4, [sp, #180]	; 0xb4
   165ec:	strb	r4, [sp, #176]	; 0xb0
   165f0:	str	r9, [sp, #192]	; 0xc0
   165f4:	strb	r4, [sp, #188]	; 0xbc
   165f8:	bl	17cdc <__assert_fail@plt+0x6030>
   165fc:	ldrb	r0, [sp, #200]	; 0xc8
   16600:	cmp	r0, #0
   16604:	beq	16614 <__assert_fail@plt+0x4968>
   16608:	ldr	r0, [sp, #204]	; 0xcc
   1660c:	cmp	r0, #0
   16610:	beq	169ac <__assert_fail@plt+0x4d00>
   16614:	add	r0, sp, #24
   16618:	mov	r7, #0
   1661c:	sub	r5, fp, #144	; 0x90
   16620:	mov	r1, #0
   16624:	mov	r8, #0
   16628:	add	r0, r0, #4
   1662c:	str	r0, [sp]
   16630:	add	r0, sp, #136	; 0x88
   16634:	add	sl, r0, #16
   16638:	add	r0, sp, #176	; 0xb0
   1663c:	add	r0, r0, #32
   16640:	str	r0, [sp, #16]
   16644:	mov	r0, #1
   16648:	str	r0, [sp, #4]
   1664c:	mov	r0, #0
   16650:	str	r0, [sp, #8]
   16654:	add	r0, r1, r1, lsl #2
   16658:	mov	r6, r8
   1665c:	str	r1, [sp, #12]
   16660:	cmp	r8, r0
   16664:	bcc	16718 <__assert_fail@plt+0x4a6c>
   16668:	ldr	r0, [sp, #4]
   1666c:	tst	r0, #1
   16670:	beq	16718 <__assert_fail@plt+0x4a6c>
   16674:	cmp	r1, #10
   16678:	bcc	16718 <__assert_fail@plt+0x4a6c>
   1667c:	ldr	r1, [sp, #8]
   16680:	subs	r0, r6, r1
   16684:	beq	166c8 <__assert_fail@plt+0x4a1c>
   16688:	sub	r4, r1, r6
   1668c:	mov	r0, r5
   16690:	bl	17cdc <__assert_fail@plt+0x6030>
   16694:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16698:	cmp	r0, #0
   1669c:	beq	166ac <__assert_fail@plt+0x4a00>
   166a0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   166a4:	cmp	r0, #0
   166a8:	beq	166c8 <__assert_fail@plt+0x4a1c>
   166ac:	strb	r7, [fp, #-132]	; 0xffffff7c
   166b0:	adds	r4, r4, #1
   166b4:	ldr	r0, [fp, #-128]	; 0xffffff80
   166b8:	ldr	r1, [fp, #-124]	; 0xffffff84
   166bc:	add	r0, r0, r1
   166c0:	str	r0, [fp, #-128]	; 0xffffff80
   166c4:	bne	1668c <__assert_fail@plt+0x49e0>
   166c8:	mov	r0, r5
   166cc:	bl	17cdc <__assert_fail@plt+0x6030>
   166d0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   166d4:	cmp	r0, #0
   166d8:	beq	16714 <__assert_fail@plt+0x4a68>
   166dc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   166e0:	str	r6, [sp, #8]
   166e4:	cmp	r0, #0
   166e8:	bne	16718 <__assert_fail@plt+0x4a6c>
   166ec:	ldr	r1, [sp, #20]
   166f0:	mov	r0, r9
   166f4:	add	r2, sp, #80	; 0x50
   166f8:	bl	16a0c <__assert_fail@plt+0x4d60>
   166fc:	mov	r1, #0
   16700:	cmp	r0, #0
   16704:	str	r6, [sp, #8]
   16708:	str	r1, [sp, #4]
   1670c:	beq	16718 <__assert_fail@plt+0x4a6c>
   16710:	b	169e8 <__assert_fail@plt+0x4d3c>
   16714:	str	r6, [sp, #8]
   16718:	ldr	r0, [sp, #192]	; 0xc0
   1671c:	ldr	r1, [sp, #16]
   16720:	ldr	r4, [sp, #196]	; 0xc4
   16724:	cmp	r0, r1
   16728:	bne	16740 <__assert_fail@plt+0x4a94>
   1672c:	ldr	r1, [sp, #16]
   16730:	mov	r0, sl
   16734:	mov	r2, r4
   16738:	bl	118ec <memcpy@plt>
   1673c:	mov	r0, sl
   16740:	str	r4, [sp, #140]	; 0x8c
   16744:	str	r0, [sp, #136]	; 0x88
   16748:	ldrb	r0, [sp, #200]	; 0xc8
   1674c:	add	r8, r6, #1
   16750:	cmp	r0, #0
   16754:	strb	r0, [sp, #144]	; 0x90
   16758:	beq	16780 <__assert_fail@plt+0x4ad4>
   1675c:	ldr	r0, [sp, #204]	; 0xcc
   16760:	str	r0, [sp, #148]	; 0x94
   16764:	bl	11910 <towlower@plt>
   16768:	str	r0, [sp, #148]	; 0x94
   1676c:	ldrb	r0, [sp, #144]	; 0x90
   16770:	cmp	r0, #0
   16774:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   16778:	cmpne	r0, #0
   1677c:	bne	167a8 <__assert_fail@plt+0x4afc>
   16780:	ldr	r2, [sp, #140]	; 0x8c
   16784:	ldr	r0, [fp, #-180]	; 0xffffff4c
   16788:	cmp	r2, r0
   1678c:	bne	16960 <__assert_fail@plt+0x4cb4>
   16790:	ldr	r1, [fp, #-184]	; 0xffffff48
   16794:	ldr	r0, [sp, #136]	; 0x88
   16798:	bl	11934 <memcmp@plt>
   1679c:	cmp	r0, #0
   167a0:	bne	16960 <__assert_fail@plt+0x4cb4>
   167a4:	b	167b8 <__assert_fail@plt+0x4b0c>
   167a8:	ldr	r0, [fp, #-172]	; 0xffffff54
   167ac:	ldr	r1, [sp, #148]	; 0x94
   167b0:	cmp	r1, r0
   167b4:	bne	16960 <__assert_fail@plt+0x4cb4>
   167b8:	add	r1, sp, #176	; 0xb0
   167bc:	mov	r2, #48	; 0x30
   167c0:	add	r3, sp, #80	; 0x50
   167c4:	add	r0, r1, #16
   167c8:	vld1.64	{d16-d17}, [r1], r2
   167cc:	ldr	r2, [sp, #16]
   167d0:	vld1.64	{d18-d19}, [r0]
   167d4:	add	r0, r3, #16
   167d8:	vld1.64	{d20-d21}, [r2]
   167dc:	vldr	d22, [r1]
   167e0:	mov	r1, #12
   167e4:	vst1.64	{d18-d19}, [r0]
   167e8:	add	r0, r3, #32
   167ec:	vst1.64	{d20-d21}, [r0]
   167f0:	mov	r0, r3
   167f4:	vst1.64	{d16-d17}, [r0], r1
   167f8:	strb	r7, [r0]
   167fc:	ldr	r0, [sp, #20]
   16800:	vstr	d22, [sp, #128]	; 0x80
   16804:	ldr	r1, [sp, #100]	; 0x64
   16808:	str	r0, [sp, #40]	; 0x28
   1680c:	ldr	r0, [sp, #96]	; 0x60
   16810:	strb	r7, [sp, #24]
   16814:	add	r0, r0, r1
   16818:	str	r0, [sp, #96]	; 0x60
   1681c:	ldr	r0, [sp]
   16820:	str	r7, [r0]
   16824:	str	r7, [r0, #4]
   16828:	add	r0, sp, #24
   1682c:	strb	r7, [sp, #36]	; 0x24
   16830:	bl	17cdc <__assert_fail@plt+0x6030>
   16834:	ldrb	r0, [sp, #48]	; 0x30
   16838:	cmp	r0, #0
   1683c:	beq	1684c <__assert_fail@plt+0x4ba0>
   16840:	ldr	r0, [sp, #52]	; 0x34
   16844:	cmp	r0, #0
   16848:	beq	16a08 <__assert_fail@plt+0x4d5c>
   1684c:	strb	r7, [sp, #36]	; 0x24
   16850:	mov	r5, sl
   16854:	ldr	r0, [sp, #40]	; 0x28
   16858:	ldr	r1, [sp, #44]	; 0x2c
   1685c:	add	r0, r0, r1
   16860:	str	r0, [sp, #40]	; 0x28
   16864:	add	r0, sp, #24
   16868:	bl	17cdc <__assert_fail@plt+0x6030>
   1686c:	ldrb	r0, [sp, #48]	; 0x30
   16870:	cmp	r0, #0
   16874:	beq	16884 <__assert_fail@plt+0x4bd8>
   16878:	ldr	r0, [sp, #52]	; 0x34
   1687c:	cmp	r0, #0
   16880:	beq	169c8 <__assert_fail@plt+0x4d1c>
   16884:	add	r8, r6, #2
   16888:	add	r0, sp, #80	; 0x50
   1688c:	bl	17cdc <__assert_fail@plt+0x6030>
   16890:	ldr	r0, [sp, #108]	; 0x6c
   16894:	ldrb	r1, [sp, #104]	; 0x68
   16898:	cmp	r0, #0
   1689c:	bne	168a8 <__assert_fail@plt+0x4bfc>
   168a0:	cmp	r1, #0
   168a4:	bne	169d8 <__assert_fail@plt+0x4d2c>
   168a8:	cmp	r1, #0
   168ac:	ldrbne	r1, [sp, #48]	; 0x30
   168b0:	cmpne	r1, #0
   168b4:	bne	168f0 <__assert_fail@plt+0x4c44>
   168b8:	ldr	r4, [sp, #100]	; 0x64
   168bc:	ldr	r0, [sp, #44]	; 0x2c
   168c0:	cmp	r4, r0
   168c4:	bne	16958 <__assert_fail@plt+0x4cac>
   168c8:	ldr	sl, [sp, #40]	; 0x28
   168cc:	ldr	r6, [sp, #96]	; 0x60
   168d0:	mov	r2, r4
   168d4:	mov	r0, r6
   168d8:	mov	r1, sl
   168dc:	bl	11934 <memcmp@plt>
   168e0:	cmp	r0, #0
   168e4:	mov	r0, r4
   168e8:	beq	16918 <__assert_fail@plt+0x4c6c>
   168ec:	b	16958 <__assert_fail@plt+0x4cac>
   168f0:	bl	11910 <towlower@plt>
   168f4:	mov	r4, r0
   168f8:	ldr	r0, [sp, #52]	; 0x34
   168fc:	bl	11910 <towlower@plt>
   16900:	cmp	r4, r0
   16904:	bne	16958 <__assert_fail@plt+0x4cac>
   16908:	ldr	sl, [sp, #40]	; 0x28
   1690c:	ldr	r4, [sp, #44]	; 0x2c
   16910:	ldr	r6, [sp, #96]	; 0x60
   16914:	ldr	r0, [sp, #100]	; 0x64
   16918:	add	r0, r6, r0
   1691c:	strb	r7, [sp, #92]	; 0x5c
   16920:	strb	r7, [sp, #36]	; 0x24
   16924:	str	r0, [sp, #96]	; 0x60
   16928:	add	r0, sl, r4
   1692c:	str	r0, [sp, #40]	; 0x28
   16930:	add	r0, sp, #24
   16934:	bl	17cdc <__assert_fail@plt+0x6030>
   16938:	ldrb	r0, [sp, #48]	; 0x30
   1693c:	add	r8, r8, #1
   16940:	cmp	r0, #0
   16944:	beq	16888 <__assert_fail@plt+0x4bdc>
   16948:	ldr	r0, [sp, #52]	; 0x34
   1694c:	cmp	r0, #0
   16950:	bne	16888 <__assert_fail@plt+0x4bdc>
   16954:	b	169c8 <__assert_fail@plt+0x4d1c>
   16958:	mov	sl, r5
   1695c:	sub	r5, fp, #144	; 0x90
   16960:	mov	r4, #0
   16964:	ldr	r6, [sp, #12]
   16968:	strb	r4, [sp, #188]	; 0xbc
   1696c:	ldr	r0, [sp, #192]	; 0xc0
   16970:	ldr	r1, [sp, #196]	; 0xc4
   16974:	add	r6, r6, #1
   16978:	add	r0, r0, r1
   1697c:	str	r0, [sp, #192]	; 0xc0
   16980:	add	r0, sp, #176	; 0xb0
   16984:	bl	17cdc <__assert_fail@plt+0x6030>
   16988:	ldrb	r0, [sp, #200]	; 0xc8
   1698c:	mov	r1, r6
   16990:	cmp	r0, #0
   16994:	beq	16654 <__assert_fail@plt+0x49a8>
   16998:	ldr	r0, [sp, #204]	; 0xcc
   1699c:	cmp	r0, #0
   169a0:	bne	16654 <__assert_fail@plt+0x49a8>
   169a4:	b	169ac <__assert_fail@plt+0x4d00>
   169a8:	mov	r4, sl
   169ac:	mov	r0, r4
   169b0:	sub	sp, fp, #28
   169b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b8:	mov	r4, #0
   169bc:	mov	r0, r4
   169c0:	sub	sp, fp, #28
   169c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169c8:	ldr	r4, [sp, #192]	; 0xc0
   169cc:	mov	r0, r4
   169d0:	sub	sp, fp, #28
   169d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169d8:	mov	r4, #0
   169dc:	mov	r0, r4
   169e0:	sub	sp, fp, #28
   169e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169e8:	ldr	r4, [sp, #80]	; 0x50
   169ec:	mov	r0, r4
   169f0:	sub	sp, fp, #28
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f8:	ldr	r4, [fp, #-88]	; 0xffffffa8
   169fc:	mov	r0, r4
   16a00:	sub	sp, fp, #28
   16a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a08:	bl	11c70 <abort@plt>
   16a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a10:	add	fp, sp, #28
   16a14:	sub	sp, sp, #172	; 0xac
   16a18:	mov	r6, r0
   16a1c:	mov	r0, r1
   16a20:	mov	r8, r2
   16a24:	mov	r4, r1
   16a28:	bl	170ec <__assert_fail@plt+0x5440>
   16a2c:	mov	r7, r0
   16a30:	movw	r0, #47662	; 0xba2e
   16a34:	mov	r5, #0
   16a38:	movt	r0, #744	; 0x2e8
   16a3c:	cmp	r7, r0
   16a40:	bhi	16a74 <__assert_fail@plt+0x4dc8>
   16a44:	mov	r0, #44	; 0x2c
   16a48:	mul	r0, r7, r0
   16a4c:	cmp	r0, #4016	; 0xfb0
   16a50:	bhi	16a80 <__assert_fail@plt+0x4dd4>
   16a54:	add	r0, r0, #22
   16a58:	bic	r0, r0, #7
   16a5c:	sub	r0, sp, r0
   16a60:	add	r1, r0, #15
   16a64:	bic	r9, r1, #15
   16a68:	mov	sp, r0
   16a6c:	cmp	r9, #0
   16a70:	bne	16a90 <__assert_fail@plt+0x4de4>
   16a74:	mov	r0, r5
   16a78:	sub	sp, fp, #28
   16a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a80:	bl	31748 <__assert_fail@plt+0x1fa9c>
   16a84:	mov	r9, r0
   16a88:	cmp	r9, #0
   16a8c:	beq	16a74 <__assert_fail@plt+0x4dc8>
   16a90:	str	r6, [fp, #-192]	; 0xffffff40
   16a94:	mov	r6, #0
   16a98:	str	r8, [fp, #-200]	; 0xffffff38
   16a9c:	str	r6, [fp, #-80]	; 0xffffffb0
   16aa0:	str	r6, [fp, #-84]	; 0xffffffac
   16aa4:	strb	r6, [fp, #-88]	; 0xffffffa8
   16aa8:	str	r4, [fp, #-72]	; 0xffffffb8
   16aac:	sub	r4, fp, #88	; 0x58
   16ab0:	strb	r6, [fp, #-76]	; 0xffffffb4
   16ab4:	mov	r0, r4
   16ab8:	bl	17cdc <__assert_fail@plt+0x6030>
   16abc:	add	r0, r7, r7, lsl #2
   16ac0:	str	r7, [fp, #-188]	; 0xffffff44
   16ac4:	add	sl, r9, r0, lsl #3
   16ac8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16acc:	cmp	r0, #0
   16ad0:	beq	16ae0 <__assert_fail@plt+0x4e34>
   16ad4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16ad8:	cmp	r0, #0
   16adc:	beq	16b6c <__assert_fail@plt+0x4ec0>
   16ae0:	add	r7, r9, #16
   16ae4:	add	r5, r4, #32
   16ae8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16aec:	cmp	r0, r5
   16af0:	bne	16b08 <__assert_fail@plt+0x4e5c>
   16af4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16af8:	mov	r0, r7
   16afc:	mov	r1, r5
   16b00:	bl	118ec <memcpy@plt>
   16b04:	mov	r0, r7
   16b08:	str	r0, [r7, #-16]
   16b0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16b10:	str	r0, [r7, #-12]
   16b14:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16b18:	cmp	r0, #0
   16b1c:	strb	r0, [r7, #-8]
   16b20:	beq	16b34 <__assert_fail@plt+0x4e88>
   16b24:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16b28:	str	r0, [r7, #-4]
   16b2c:	bl	11910 <towlower@plt>
   16b30:	str	r0, [r7, #-4]
   16b34:	strb	r6, [fp, #-76]	; 0xffffffb4
   16b38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16b3c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16b40:	add	r0, r0, r1
   16b44:	str	r0, [fp, #-72]	; 0xffffffb8
   16b48:	mov	r0, r4
   16b4c:	bl	17cdc <__assert_fail@plt+0x6030>
   16b50:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16b54:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16b58:	add	r7, r7, #40	; 0x28
   16b5c:	cmp	r1, #0
   16b60:	beq	16ae8 <__assert_fail@plt+0x4e3c>
   16b64:	cmp	r0, #0
   16b68:	bne	16ae8 <__assert_fail@plt+0x4e3c>
   16b6c:	mov	r0, #1
   16b70:	str	r0, [sl, #4]
   16b74:	ldr	r0, [fp, #-188]	; 0xffffff44
   16b78:	cmp	r0, #3
   16b7c:	bcc	16c78 <__assert_fail@plt+0x4fcc>
   16b80:	mov	r5, #2
   16b84:	mov	r7, #0
   16b88:	add	r0, r5, r5, lsl #2
   16b8c:	add	r0, r9, r0, lsl #3
   16b90:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   16b94:	sub	r6, r0, #40	; 0x28
   16b98:	sub	r4, r0, #36	; 0x24
   16b9c:	cmp	r1, #0
   16ba0:	beq	16c0c <__assert_fail@plt+0x4f60>
   16ba4:	sub	r8, r0, #28
   16ba8:	b	16bb4 <__assert_fail@plt+0x4f08>
   16bac:	ldr	r0, [sl, r7, lsl #2]
   16bb0:	sub	r7, r7, r0
   16bb4:	add	r0, r7, r7, lsl #2
   16bb8:	add	r1, r9, r0, lsl #3
   16bbc:	ldrb	r2, [r1, #8]
   16bc0:	cmp	r2, #0
   16bc4:	beq	16bdc <__assert_fail@plt+0x4f30>
   16bc8:	ldr	r0, [r1, #12]
   16bcc:	ldr	r1, [r8]
   16bd0:	cmp	r1, r0
   16bd4:	bne	16c00 <__assert_fail@plt+0x4f54>
   16bd8:	b	16c5c <__assert_fail@plt+0x4fb0>
   16bdc:	ldr	r1, [r1, #4]
   16be0:	ldr	r2, [r4]
   16be4:	cmp	r2, r1
   16be8:	bne	16c00 <__assert_fail@plt+0x4f54>
   16bec:	ldr	r1, [r9, r0, lsl #3]
   16bf0:	ldr	r0, [r6]
   16bf4:	bl	11934 <memcmp@plt>
   16bf8:	cmp	r0, #0
   16bfc:	beq	16c5c <__assert_fail@plt+0x4fb0>
   16c00:	cmp	r7, #0
   16c04:	bne	16bac <__assert_fail@plt+0x4f00>
   16c08:	b	16c50 <__assert_fail@plt+0x4fa4>
   16c0c:	ldr	r4, [r4]
   16c10:	b	16c1c <__assert_fail@plt+0x4f70>
   16c14:	ldr	r0, [sl, r7, lsl #2]
   16c18:	sub	r7, r7, r0
   16c1c:	add	r0, r7, r7, lsl #2
   16c20:	add	r1, r9, r0, lsl #3
   16c24:	ldr	r1, [r1, #4]
   16c28:	cmp	r4, r1
   16c2c:	bne	16c48 <__assert_fail@plt+0x4f9c>
   16c30:	ldr	r1, [r9, r0, lsl #3]
   16c34:	ldr	r0, [r6]
   16c38:	mov	r2, r4
   16c3c:	bl	11934 <memcmp@plt>
   16c40:	cmp	r0, #0
   16c44:	beq	16c5c <__assert_fail@plt+0x4fb0>
   16c48:	cmp	r7, #0
   16c4c:	bne	16c14 <__assert_fail@plt+0x4f68>
   16c50:	mov	r7, #0
   16c54:	mov	r0, r5
   16c58:	b	16c64 <__assert_fail@plt+0x4fb8>
   16c5c:	add	r7, r7, #1
   16c60:	sub	r0, r5, r7
   16c64:	str	r0, [sl, r5, lsl #2]
   16c68:	ldr	r0, [fp, #-188]	; 0xffffff44
   16c6c:	add	r5, r5, #1
   16c70:	cmp	r5, r0
   16c74:	bne	16b88 <__assert_fail@plt+0x4edc>
   16c78:	ldr	r0, [fp, #-200]	; 0xffffff38
   16c7c:	mov	r1, #0
   16c80:	str	r1, [r0]
   16c84:	ldr	r0, [fp, #-192]	; 0xffffff40
   16c88:	str	r1, [fp, #-80]	; 0xffffffb0
   16c8c:	str	r1, [fp, #-84]	; 0xffffffac
   16c90:	strb	r1, [fp, #-88]	; 0xffffffa8
   16c94:	str	r1, [fp, #-136]	; 0xffffff78
   16c98:	str	r1, [fp, #-140]	; 0xffffff74
   16c9c:	str	r0, [fp, #-72]	; 0xffffffb8
   16ca0:	str	r0, [fp, #-128]	; 0xffffff80
   16ca4:	sub	r0, fp, #144	; 0x90
   16ca8:	strb	r1, [fp, #-144]	; 0xffffff70
   16cac:	strb	r1, [fp, #-76]	; 0xffffffb4
   16cb0:	strb	r1, [fp, #-132]	; 0xffffff7c
   16cb4:	bl	17cdc <__assert_fail@plt+0x6030>
   16cb8:	ldrb	r6, [fp, #-120]	; 0xffffff88
   16cbc:	ldr	r8, [fp, #-116]	; 0xffffff8c
   16cc0:	cmp	r6, #0
   16cc4:	beq	16cd0 <__assert_fail@plt+0x5024>
   16cc8:	cmp	r8, #0
   16ccc:	beq	16ea0 <__assert_fail@plt+0x51f4>
   16cd0:	sub	r0, fp, #184	; 0xb8
   16cd4:	sub	r4, fp, #88	; 0x58
   16cd8:	mov	r7, #0
   16cdc:	add	r0, r0, #16
   16ce0:	str	r0, [fp, #-196]	; 0xffffff3c
   16ce4:	sub	r0, fp, #144	; 0x90
   16ce8:	add	r0, r0, #32
   16cec:	str	r0, [fp, #-192]	; 0xffffff40
   16cf0:	ldr	r0, [fp, #-128]	; 0xffffff80
   16cf4:	ldr	r1, [fp, #-192]	; 0xffffff40
   16cf8:	ldr	r5, [fp, #-124]	; 0xffffff84
   16cfc:	cmp	r0, r1
   16d00:	bne	16d20 <__assert_fail@plt+0x5074>
   16d04:	ldr	r4, [fp, #-196]	; 0xffffff3c
   16d08:	ldr	r1, [fp, #-192]	; 0xffffff40
   16d0c:	mov	r2, r5
   16d10:	mov	r0, r4
   16d14:	bl	118ec <memcpy@plt>
   16d18:	mov	r0, r4
   16d1c:	sub	r4, fp, #88	; 0x58
   16d20:	tst	r6, #255	; 0xff
   16d24:	str	r5, [fp, #-180]	; 0xffffff4c
   16d28:	str	r0, [fp, #-184]	; 0xffffff48
   16d2c:	strb	r6, [fp, #-176]	; 0xffffff50
   16d30:	beq	16d60 <__assert_fail@plt+0x50b4>
   16d34:	mov	r0, r8
   16d38:	str	r8, [fp, #-172]	; 0xffffff54
   16d3c:	bl	11910 <towlower@plt>
   16d40:	str	r0, [fp, #-172]	; 0xffffff54
   16d44:	add	r0, r7, r7, lsl #2
   16d48:	add	r0, r9, r0, lsl #3
   16d4c:	ldrb	r1, [r0, #8]
   16d50:	cmp	r1, #0
   16d54:	ldrbne	r1, [fp, #-176]	; 0xffffff50
   16d58:	cmpne	r1, #0
   16d5c:	bne	16e38 <__assert_fail@plt+0x518c>
   16d60:	add	r0, r7, r7, lsl #2
   16d64:	mov	r6, #0
   16d68:	add	r1, r9, r0, lsl #3
   16d6c:	ldr	r2, [r1, #4]
   16d70:	ldr	r1, [fp, #-180]	; 0xffffff4c
   16d74:	cmp	r2, r1
   16d78:	bne	16d90 <__assert_fail@plt+0x50e4>
   16d7c:	ldr	r0, [r9, r0, lsl #3]
   16d80:	ldr	r1, [fp, #-184]	; 0xffffff48
   16d84:	bl	11934 <memcmp@plt>
   16d88:	cmp	r0, #0
   16d8c:	beq	16e4c <__assert_fail@plt+0x51a0>
   16d90:	cmp	r7, #0
   16d94:	beq	16de8 <__assert_fail@plt+0x513c>
   16d98:	ldr	r5, [sl, r7, lsl #2]
   16d9c:	sub	r7, r7, r5
   16da0:	cmp	r5, #0
   16da4:	beq	16e70 <__assert_fail@plt+0x51c4>
   16da8:	mov	r0, r4
   16dac:	bl	17cdc <__assert_fail@plt+0x6030>
   16db0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16db4:	cmp	r0, #0
   16db8:	beq	16dc8 <__assert_fail@plt+0x511c>
   16dbc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16dc0:	cmp	r0, #0
   16dc4:	beq	16eb8 <__assert_fail@plt+0x520c>
   16dc8:	strb	r6, [fp, #-76]	; 0xffffffb4
   16dcc:	subs	r5, r5, #1
   16dd0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16dd4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16dd8:	add	r0, r0, r1
   16ddc:	str	r0, [fp, #-72]	; 0xffffffb8
   16de0:	bne	16da8 <__assert_fail@plt+0x50fc>
   16de4:	b	16e70 <__assert_fail@plt+0x51c4>
   16de8:	mov	r0, r4
   16dec:	bl	17cdc <__assert_fail@plt+0x6030>
   16df0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16df4:	cmp	r0, #0
   16df8:	beq	16e08 <__assert_fail@plt+0x515c>
   16dfc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e00:	cmp	r0, #0
   16e04:	beq	16eb8 <__assert_fail@plt+0x520c>
   16e08:	mov	r7, #0
   16e0c:	strb	r7, [fp, #-76]	; 0xffffffb4
   16e10:	strb	r7, [fp, #-132]	; 0xffffff7c
   16e14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e18:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e1c:	add	r0, r0, r1
   16e20:	ldr	r1, [fp, #-124]	; 0xffffff84
   16e24:	str	r0, [fp, #-72]	; 0xffffffb8
   16e28:	ldr	r0, [fp, #-128]	; 0xffffff80
   16e2c:	add	r0, r0, r1
   16e30:	str	r0, [fp, #-128]	; 0xffffff80
   16e34:	b	16e70 <__assert_fail@plt+0x51c4>
   16e38:	ldr	r0, [r0, #12]
   16e3c:	ldr	r1, [fp, #-172]	; 0xffffff54
   16e40:	mov	r6, #0
   16e44:	cmp	r0, r1
   16e48:	bne	16d90 <__assert_fail@plt+0x50e4>
   16e4c:	strb	r6, [fp, #-132]	; 0xffffff7c
   16e50:	add	r7, r7, #1
   16e54:	ldr	r0, [fp, #-128]	; 0xffffff80
   16e58:	ldr	r1, [fp, #-124]	; 0xffffff84
   16e5c:	add	r0, r0, r1
   16e60:	str	r0, [fp, #-128]	; 0xffffff80
   16e64:	ldr	r0, [fp, #-188]	; 0xffffff44
   16e68:	cmp	r7, r0
   16e6c:	beq	16e94 <__assert_fail@plt+0x51e8>
   16e70:	sub	r0, fp, #144	; 0x90
   16e74:	bl	17cdc <__assert_fail@plt+0x6030>
   16e78:	ldrb	r6, [fp, #-120]	; 0xffffff88
   16e7c:	ldr	r8, [fp, #-116]	; 0xffffff8c
   16e80:	cmp	r6, #0
   16e84:	beq	16cf0 <__assert_fail@plt+0x5044>
   16e88:	cmp	r8, #0
   16e8c:	bne	16cf0 <__assert_fail@plt+0x5044>
   16e90:	b	16ea0 <__assert_fail@plt+0x51f4>
   16e94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e98:	ldr	r1, [fp, #-200]	; 0xffffff38
   16e9c:	str	r0, [r1]
   16ea0:	mov	r0, r9
   16ea4:	bl	317b8 <__assert_fail@plt+0x1fb0c>
   16ea8:	mov	r5, #1
   16eac:	mov	r0, r5
   16eb0:	sub	sp, fp, #28
   16eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb8:	bl	11c70 <abort@plt>
   16ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ec0:	add	fp, sp, #28
   16ec4:	sub	sp, sp, #28
   16ec8:	mov	r4, #0
   16ecc:	cmn	r2, #-536870911	; 0xe0000001
   16ed0:	bhi	16f10 <__assert_fail@plt+0x5264>
   16ed4:	str	r0, [fp, #-48]	; 0xffffffd0
   16ed8:	lsl	r0, r2, #2
   16edc:	mov	r5, r3
   16ee0:	mov	r8, r2
   16ee4:	mov	r9, r1
   16ee8:	cmp	r0, #4016	; 0xfb0
   16eec:	bhi	16f1c <__assert_fail@plt+0x5270>
   16ef0:	add	r0, r0, #22
   16ef4:	bic	r0, r0, #7
   16ef8:	sub	r0, sp, r0
   16efc:	add	r1, r0, #15
   16f00:	bic	sl, r1, #15
   16f04:	mov	sp, r0
   16f08:	cmp	sl, #0
   16f0c:	bne	16f2c <__assert_fail@plt+0x5280>
   16f10:	mov	r0, r4
   16f14:	sub	sp, fp, #28
   16f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f1c:	bl	31748 <__assert_fail@plt+0x1fa9c>
   16f20:	mov	sl, r0
   16f24:	cmp	sl, #0
   16f28:	beq	16f10 <__assert_fail@plt+0x5264>
   16f2c:	mov	r0, #1
   16f30:	cmp	r8, #3
   16f34:	str	r5, [fp, #-52]	; 0xffffffcc
   16f38:	str	r0, [sl, #4]
   16f3c:	bcc	16fdc <__assert_fail@plt+0x5330>
   16f40:	bl	11a90 <__ctype_b_loc@plt>
   16f44:	ldr	r5, [r0]
   16f48:	mov	r4, #0
   16f4c:	mov	r7, #2
   16f50:	str	r8, [fp, #-36]	; 0xffffffdc
   16f54:	add	r0, r9, r7
   16f58:	ldrb	r6, [r0, #-1]
   16f5c:	add	r0, r5, r6, lsl #1
   16f60:	ldrb	r0, [r0, #1]
   16f64:	tst	r0, #1
   16f68:	beq	16f84 <__assert_fail@plt+0x52d8>
   16f6c:	bl	11a60 <__ctype_tolower_loc@plt>
   16f70:	ldr	r0, [r0]
   16f74:	ldrb	r6, [r0, r6, lsl #2]
   16f78:	b	16f84 <__assert_fail@plt+0x52d8>
   16f7c:	ldr	r0, [sl, r4, lsl #2]
   16f80:	sub	r4, r4, r0
   16f84:	ldrb	r8, [r9, r4]
   16f88:	add	r0, r5, r8, lsl #1
   16f8c:	ldrb	r0, [r0, #1]
   16f90:	tst	r0, #1
   16f94:	beq	16fa4 <__assert_fail@plt+0x52f8>
   16f98:	bl	11a60 <__ctype_tolower_loc@plt>
   16f9c:	ldr	r0, [r0]
   16fa0:	ldr	r8, [r0, r8, lsl #2]
   16fa4:	cmp	r6, r8
   16fa8:	beq	16fc0 <__assert_fail@plt+0x5314>
   16fac:	cmp	r4, #0
   16fb0:	bne	16f7c <__assert_fail@plt+0x52d0>
   16fb4:	mov	r4, #0
   16fb8:	mov	r0, r7
   16fbc:	b	16fc8 <__assert_fail@plt+0x531c>
   16fc0:	add	r4, r4, #1
   16fc4:	sub	r0, r7, r4
   16fc8:	ldr	r8, [fp, #-36]	; 0xffffffdc
   16fcc:	str	r0, [sl, r7, lsl #2]
   16fd0:	add	r7, r7, #1
   16fd4:	cmp	r7, r8
   16fd8:	bne	16f54 <__assert_fail@plt+0x52a8>
   16fdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16fe0:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16fe4:	mov	r5, #0
   16fe8:	str	r5, [r0]
   16fec:	ldrb	r6, [r7]
   16ff0:	cmp	r6, #0
   16ff4:	beq	170d4 <__assert_fail@plt+0x5428>
   16ff8:	bl	11a90 <__ctype_b_loc@plt>
   16ffc:	ldr	r1, [r0]
   17000:	str	r7, [fp, #-40]	; 0xffffffd8
   17004:	str	r1, [fp, #-44]	; 0xffffffd4
   17008:	ldrb	r4, [r9, r5]
   1700c:	add	r0, r1, r4, lsl #1
   17010:	ldrb	r0, [r0, #1]
   17014:	tst	r0, #1
   17018:	beq	1702c <__assert_fail@plt+0x5380>
   1701c:	bl	11a60 <__ctype_tolower_loc@plt>
   17020:	ldr	r0, [r0]
   17024:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17028:	ldr	r4, [r0, r4, lsl #2]
   1702c:	uxtb	r6, r6
   17030:	add	r0, r1, r6, lsl #1
   17034:	ldrb	r0, [r0, #1]
   17038:	tst	r0, #1
   1703c:	beq	17050 <__assert_fail@plt+0x53a4>
   17040:	bl	11a60 <__ctype_tolower_loc@plt>
   17044:	ldr	r0, [r0]
   17048:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1704c:	ldr	r6, [r0, r6, lsl #2]
   17050:	cmp	r4, r6
   17054:	bne	17078 <__assert_fail@plt+0x53cc>
   17058:	add	r5, r5, #1
   1705c:	cmp	r5, r8
   17060:	beq	170c8 <__assert_fail@plt+0x541c>
   17064:	add	r7, r7, #1
   17068:	ldrb	r6, [r7]
   1706c:	cmp	r6, #0
   17070:	bne	17008 <__assert_fail@plt+0x535c>
   17074:	b	170d4 <__assert_fail@plt+0x5428>
   17078:	cmp	r5, #0
   1707c:	beq	170a4 <__assert_fail@plt+0x53f8>
   17080:	ldr	r0, [sl, r5, lsl #2]
   17084:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17088:	add	r2, r2, r0
   1708c:	sub	r5, r5, r0
   17090:	str	r2, [fp, #-40]	; 0xffffffd8
   17094:	ldrb	r6, [r7]
   17098:	cmp	r6, #0
   1709c:	bne	17008 <__assert_fail@plt+0x535c>
   170a0:	b	170d4 <__assert_fail@plt+0x5428>
   170a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   170a8:	add	r7, r7, #1
   170ac:	mov	r5, #0
   170b0:	add	r0, r0, #1
   170b4:	str	r0, [fp, #-40]	; 0xffffffd8
   170b8:	ldrb	r6, [r7]
   170bc:	cmp	r6, #0
   170c0:	bne	17008 <__assert_fail@plt+0x535c>
   170c4:	b	170d4 <__assert_fail@plt+0x5428>
   170c8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   170cc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   170d0:	str	r1, [r0]
   170d4:	mov	r0, sl
   170d8:	bl	317b8 <__assert_fail@plt+0x1fb0c>
   170dc:	mov	r4, #1
   170e0:	mov	r0, r4
   170e4:	sub	sp, fp, #28
   170e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170ec:	push	{r4, r5, r6, sl, fp, lr}
   170f0:	add	fp, sp, #16
   170f4:	sub	sp, sp, #56	; 0x38
   170f8:	mov	r5, r0
   170fc:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   17100:	cmp	r0, #2
   17104:	bcc	17190 <__assert_fail@plt+0x54e4>
   17108:	mov	r4, #0
   1710c:	mov	r0, sp
   17110:	str	r4, [sp, #8]
   17114:	str	r4, [sp, #4]
   17118:	strb	r4, [sp]
   1711c:	str	r5, [sp, #16]
   17120:	strb	r4, [sp, #12]
   17124:	bl	17cdc <__assert_fail@plt+0x6030>
   17128:	ldrb	r0, [sp, #24]
   1712c:	cmp	r0, #0
   17130:	beq	17140 <__assert_fail@plt+0x5494>
   17134:	ldr	r0, [sp, #28]
   17138:	cmp	r0, #0
   1713c:	beq	17184 <__assert_fail@plt+0x54d8>
   17140:	mov	r6, #0
   17144:	mov	r5, sp
   17148:	mov	r4, #0
   1714c:	strb	r6, [sp, #12]
   17150:	ldr	r0, [sp, #16]
   17154:	ldr	r1, [sp, #20]
   17158:	add	r0, r0, r1
   1715c:	str	r0, [sp, #16]
   17160:	mov	r0, r5
   17164:	bl	17cdc <__assert_fail@plt+0x6030>
   17168:	ldrb	r1, [sp, #24]
   1716c:	ldr	r0, [sp, #28]
   17170:	add	r4, r4, #1
   17174:	cmp	r1, #0
   17178:	beq	1714c <__assert_fail@plt+0x54a0>
   1717c:	cmp	r0, #0
   17180:	bne	1714c <__assert_fail@plt+0x54a0>
   17184:	mov	r0, r4
   17188:	sub	sp, fp, #16
   1718c:	pop	{r4, r5, r6, sl, fp, pc}
   17190:	mov	r0, r5
   17194:	sub	sp, fp, #16
   17198:	pop	{r4, r5, r6, sl, fp, lr}
   1719c:	b	11ac0 <strlen@plt>
   171a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a4:	add	fp, sp, #28
   171a8:	sub	sp, sp, #308	; 0x134
   171ac:	mov	r5, r1
   171b0:	mov	r6, r0
   171b4:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   171b8:	cmp	r0, #2
   171bc:	bcc	17208 <__assert_fail@plt+0x555c>
   171c0:	mov	r4, #0
   171c4:	sub	r0, fp, #88	; 0x58
   171c8:	str	r4, [fp, #-80]	; 0xffffffb0
   171cc:	str	r4, [fp, #-84]	; 0xffffffac
   171d0:	strb	r4, [fp, #-88]	; 0xffffffa8
   171d4:	str	r5, [fp, #-72]	; 0xffffffb8
   171d8:	strb	r4, [fp, #-76]	; 0xffffffb4
   171dc:	bl	17cdc <__assert_fail@plt+0x6030>
   171e0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   171e4:	cmp	r0, #0
   171e8:	beq	17328 <__assert_fail@plt+0x567c>
   171ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171f0:	cmp	r0, #0
   171f4:	bne	17328 <__assert_fail@plt+0x567c>
   171f8:	mov	r4, r6
   171fc:	mov	r0, r4
   17200:	sub	sp, fp, #28
   17204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17208:	ldrb	r7, [r5]
   1720c:	cmp	r7, #0
   17210:	beq	17694 <__assert_fail@plt+0x59e8>
   17214:	ldrb	r9, [r6]
   17218:	cmp	r9, #0
   1721c:	beq	176a4 <__assert_fail@plt+0x59f8>
   17220:	mov	r3, #1
   17224:	mov	ip, #0
   17228:	mov	lr, r5
   1722c:	mov	r8, #0
   17230:	mov	sl, #0
   17234:	str	r7, [sp, #16]
   17238:	add	r0, sl, sl, lsl #2
   1723c:	cmp	r8, r0
   17240:	bcc	172d0 <__assert_fail@plt+0x5624>
   17244:	tst	r3, #1
   17248:	beq	172d0 <__assert_fail@plt+0x5624>
   1724c:	cmp	sl, #10
   17250:	bcc	172d0 <__assert_fail@plt+0x5624>
   17254:	cmp	lr, #0
   17258:	str	r3, [sp, #20]
   1725c:	beq	17290 <__assert_fail@plt+0x55e4>
   17260:	sub	r1, r8, ip
   17264:	mov	r0, lr
   17268:	mov	r7, lr
   1726c:	bl	11b80 <strnlen@plt>
   17270:	mov	lr, r7
   17274:	mov	ip, r8
   17278:	ldrb	r0, [lr, r0]!
   1727c:	cmp	r0, #0
   17280:	beq	17290 <__assert_fail@plt+0x55e4>
   17284:	ldr	r3, [sp, #20]
   17288:	mov	ip, r8
   1728c:	b	172cc <__assert_fail@plt+0x5620>
   17290:	mov	r0, r5
   17294:	mov	r4, ip
   17298:	bl	11ac0 <strlen@plt>
   1729c:	mov	r2, r0
   172a0:	mov	r0, r6
   172a4:	mov	r1, r5
   172a8:	sub	r3, fp, #88	; 0x58
   172ac:	bl	17b54 <__assert_fail@plt+0x5ea8>
   172b0:	cmp	r0, #0
   172b4:	bne	176f4 <__assert_fail@plt+0x5a48>
   172b8:	ldr	r3, [sp, #20]
   172bc:	ldrb	r9, [r6]
   172c0:	mov	lr, #0
   172c4:	mov	ip, r4
   172c8:	and	r3, r3, r0
   172cc:	ldr	r7, [sp, #16]
   172d0:	uxtb	r0, r9
   172d4:	cmp	r0, r7
   172d8:	bne	1730c <__assert_fail@plt+0x5660>
   172dc:	mov	r0, #1
   172e0:	ldrb	r1, [r5, r0]
   172e4:	cmp	r1, #0
   172e8:	beq	176b4 <__assert_fail@plt+0x5a08>
   172ec:	ldrb	r2, [r6, r0]
   172f0:	cmp	r2, #0
   172f4:	beq	176c4 <__assert_fail@plt+0x5a18>
   172f8:	add	r0, r0, #1
   172fc:	cmp	r2, r1
   17300:	beq	172e0 <__assert_fail@plt+0x5634>
   17304:	add	r8, r8, r0
   17308:	b	17310 <__assert_fail@plt+0x5664>
   1730c:	add	r8, r8, #1
   17310:	ldrb	r9, [r6, #1]!
   17314:	add	sl, sl, #1
   17318:	mov	r4, #0
   1731c:	cmp	r9, #0
   17320:	bne	17238 <__assert_fail@plt+0x558c>
   17324:	b	17698 <__assert_fail@plt+0x59ec>
   17328:	add	r0, sp, #136	; 0x88
   1732c:	str	r4, [fp, #-136]	; 0xffffff78
   17330:	str	r4, [fp, #-140]	; 0xffffff74
   17334:	strb	r4, [fp, #-144]	; 0xffffff70
   17338:	str	r5, [fp, #-128]	; 0xffffff80
   1733c:	str	r4, [sp, #144]	; 0x90
   17340:	str	r4, [sp, #140]	; 0x8c
   17344:	str	r6, [sp, #152]	; 0x98
   17348:	strb	r4, [sp, #136]	; 0x88
   1734c:	str	r5, [sp, #16]
   17350:	strb	r4, [fp, #-132]	; 0xffffff7c
   17354:	strb	r4, [sp, #148]	; 0x94
   17358:	bl	17cdc <__assert_fail@plt+0x6030>
   1735c:	ldrb	r0, [sp, #160]	; 0xa0
   17360:	cmp	r0, #0
   17364:	beq	17374 <__assert_fail@plt+0x56c8>
   17368:	ldr	r0, [sp, #164]	; 0xa4
   1736c:	cmp	r0, #0
   17370:	beq	17698 <__assert_fail@plt+0x59ec>
   17374:	add	r0, sp, #24
   17378:	mov	r8, #1
   1737c:	mov	sl, #0
   17380:	sub	r5, fp, #144	; 0x90
   17384:	mov	r1, #0
   17388:	mov	r7, #0
   1738c:	mov	r9, #0
   17390:	add	r0, r0, #4
   17394:	str	r0, [sp, #12]
   17398:	add	r0, sp, #136	; 0x88
   1739c:	add	r0, r0, #16
   173a0:	str	r0, [sp, #8]
   173a4:	add	r0, r9, r9, lsl #2
   173a8:	mov	r4, r7
   173ac:	cmp	r7, r0
   173b0:	bcc	17458 <__assert_fail@plt+0x57ac>
   173b4:	tst	r8, #1
   173b8:	beq	17458 <__assert_fail@plt+0x57ac>
   173bc:	cmp	r9, #10
   173c0:	bcc	17458 <__assert_fail@plt+0x57ac>
   173c4:	subs	r0, r4, r1
   173c8:	beq	1740c <__assert_fail@plt+0x5760>
   173cc:	sub	r7, r1, r4
   173d0:	mov	r0, r5
   173d4:	bl	17cdc <__assert_fail@plt+0x6030>
   173d8:	ldrb	r0, [fp, #-120]	; 0xffffff88
   173dc:	cmp	r0, #0
   173e0:	beq	173f0 <__assert_fail@plt+0x5744>
   173e4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   173e8:	cmp	r0, #0
   173ec:	beq	1740c <__assert_fail@plt+0x5760>
   173f0:	strb	sl, [fp, #-132]	; 0xffffff7c
   173f4:	adds	r7, r7, #1
   173f8:	ldr	r0, [fp, #-128]	; 0xffffff80
   173fc:	ldr	r1, [fp, #-124]	; 0xffffff84
   17400:	add	r0, r0, r1
   17404:	str	r0, [fp, #-128]	; 0xffffff80
   17408:	bne	173d0 <__assert_fail@plt+0x5724>
   1740c:	mov	r0, r5
   17410:	bl	17cdc <__assert_fail@plt+0x6030>
   17414:	ldrb	r0, [fp, #-120]	; 0xffffff88
   17418:	cmp	r0, #0
   1741c:	beq	17454 <__assert_fail@plt+0x57a8>
   17420:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17424:	mov	r1, r4
   17428:	cmp	r0, #0
   1742c:	bne	17458 <__assert_fail@plt+0x57ac>
   17430:	ldr	r1, [sp, #16]
   17434:	mov	r0, r6
   17438:	add	r2, sp, #80	; 0x50
   1743c:	bl	17718 <__assert_fail@plt+0x5a6c>
   17440:	mov	r8, #0
   17444:	cmp	r0, #0
   17448:	mov	r1, r4
   1744c:	beq	17458 <__assert_fail@plt+0x57ac>
   17450:	b	17704 <__assert_fail@plt+0x5a58>
   17454:	mov	r1, r4
   17458:	ldrb	r0, [sp, #160]	; 0xa0
   1745c:	add	r7, r4, #1
   17460:	str	r1, [sp, #20]
   17464:	cmp	r0, #0
   17468:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1746c:	cmpne	r0, #0
   17470:	bne	1749c <__assert_fail@plt+0x57f0>
   17474:	ldr	r2, [sp, #156]	; 0x9c
   17478:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1747c:	cmp	r2, r0
   17480:	bne	17650 <__assert_fail@plt+0x59a4>
   17484:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17488:	ldr	r0, [sp, #152]	; 0x98
   1748c:	bl	11934 <memcmp@plt>
   17490:	cmp	r0, #0
   17494:	bne	17650 <__assert_fail@plt+0x59a4>
   17498:	b	174ac <__assert_fail@plt+0x5800>
   1749c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   174a0:	ldr	r1, [sp, #164]	; 0xa4
   174a4:	cmp	r1, r0
   174a8:	bne	17650 <__assert_fail@plt+0x59a4>
   174ac:	add	r2, sp, #136	; 0x88
   174b0:	mov	r1, #48	; 0x30
   174b4:	add	r3, sp, #80	; 0x50
   174b8:	str	r9, [sp]
   174bc:	str	r8, [sp, #4]
   174c0:	mov	r0, r2
   174c4:	add	r2, r2, #32
   174c8:	vld1.64	{d16-d17}, [r0], r1
   174cc:	ldr	r1, [sp, #8]
   174d0:	vld1.64	{d20-d21}, [r2]
   174d4:	vld1.64	{d18-d19}, [r1]
   174d8:	add	r1, r3, #16
   174dc:	vldr	d22, [r0]
   174e0:	add	r0, r3, #32
   174e4:	vst1.64	{d20-d21}, [r0]
   174e8:	mov	r0, r3
   174ec:	vst1.64	{d18-d19}, [r1]
   174f0:	mov	r1, #12
   174f4:	vst1.64	{d16-d17}, [r0], r1
   174f8:	strb	sl, [r0]
   174fc:	ldr	r0, [sp, #16]
   17500:	vstr	d22, [sp, #128]	; 0x80
   17504:	ldr	r1, [sp, #100]	; 0x64
   17508:	str	r0, [sp, #40]	; 0x28
   1750c:	ldr	r0, [sp, #96]	; 0x60
   17510:	strb	sl, [sp, #24]
   17514:	add	r0, r0, r1
   17518:	str	r0, [sp, #96]	; 0x60
   1751c:	ldr	r0, [sp, #12]
   17520:	str	sl, [r0]
   17524:	str	sl, [r0, #4]
   17528:	add	r0, sp, #24
   1752c:	strb	sl, [sp, #36]	; 0x24
   17530:	bl	17cdc <__assert_fail@plt+0x6030>
   17534:	ldrb	r0, [sp, #48]	; 0x30
   17538:	cmp	r0, #0
   1753c:	beq	1754c <__assert_fail@plt+0x58a0>
   17540:	ldr	r0, [sp, #52]	; 0x34
   17544:	cmp	r0, #0
   17548:	beq	17714 <__assert_fail@plt+0x5a68>
   1754c:	strb	sl, [sp, #36]	; 0x24
   17550:	ldr	r0, [sp, #40]	; 0x28
   17554:	ldr	r1, [sp, #44]	; 0x2c
   17558:	add	r0, r0, r1
   1755c:	str	r0, [sp, #40]	; 0x28
   17560:	add	r0, sp, #24
   17564:	bl	17cdc <__assert_fail@plt+0x6030>
   17568:	ldrb	r0, [sp, #48]	; 0x30
   1756c:	cmp	r0, #0
   17570:	beq	17580 <__assert_fail@plt+0x58d4>
   17574:	ldr	r0, [sp, #52]	; 0x34
   17578:	cmp	r0, #0
   1757c:	beq	176d4 <__assert_fail@plt+0x5a28>
   17580:	add	r7, r4, #2
   17584:	add	r0, sp, #80	; 0x50
   17588:	bl	17cdc <__assert_fail@plt+0x6030>
   1758c:	ldr	r0, [sp, #108]	; 0x6c
   17590:	ldrb	r1, [sp, #104]	; 0x68
   17594:	cmp	r0, #0
   17598:	bne	175a4 <__assert_fail@plt+0x58f8>
   1759c:	cmp	r1, #0
   175a0:	bne	176e4 <__assert_fail@plt+0x5a38>
   175a4:	cmp	r1, #0
   175a8:	ldrbne	r1, [sp, #48]	; 0x30
   175ac:	cmpne	r1, #0
   175b0:	bne	175ec <__assert_fail@plt+0x5940>
   175b4:	ldr	r4, [sp, #100]	; 0x64
   175b8:	ldr	r0, [sp, #44]	; 0x2c
   175bc:	cmp	r4, r0
   175c0:	bne	17648 <__assert_fail@plt+0x599c>
   175c4:	ldr	r8, [sp, #40]	; 0x28
   175c8:	ldr	r9, [sp, #96]	; 0x60
   175cc:	mov	r2, r4
   175d0:	mov	r0, r9
   175d4:	mov	r1, r8
   175d8:	bl	11934 <memcmp@plt>
   175dc:	cmp	r0, #0
   175e0:	mov	r0, r4
   175e4:	beq	17608 <__assert_fail@plt+0x595c>
   175e8:	b	17648 <__assert_fail@plt+0x599c>
   175ec:	ldr	r1, [sp, #52]	; 0x34
   175f0:	cmp	r0, r1
   175f4:	bne	17648 <__assert_fail@plt+0x599c>
   175f8:	ldr	r8, [sp, #40]	; 0x28
   175fc:	ldr	r4, [sp, #44]	; 0x2c
   17600:	ldr	r9, [sp, #96]	; 0x60
   17604:	ldr	r0, [sp, #100]	; 0x64
   17608:	add	r0, r9, r0
   1760c:	strb	sl, [sp, #92]	; 0x5c
   17610:	strb	sl, [sp, #36]	; 0x24
   17614:	str	r0, [sp, #96]	; 0x60
   17618:	add	r0, r8, r4
   1761c:	str	r0, [sp, #40]	; 0x28
   17620:	add	r0, sp, #24
   17624:	bl	17cdc <__assert_fail@plt+0x6030>
   17628:	ldrb	r0, [sp, #48]	; 0x30
   1762c:	add	r7, r7, #1
   17630:	cmp	r0, #0
   17634:	beq	17584 <__assert_fail@plt+0x58d8>
   17638:	ldr	r0, [sp, #52]	; 0x34
   1763c:	cmp	r0, #0
   17640:	bne	17584 <__assert_fail@plt+0x58d8>
   17644:	b	176d4 <__assert_fail@plt+0x5a28>
   17648:	ldr	r8, [sp, #4]
   1764c:	ldr	r9, [sp]
   17650:	mov	r4, #0
   17654:	add	r9, r9, #1
   17658:	strb	r4, [sp, #148]	; 0x94
   1765c:	ldr	r0, [sp, #152]	; 0x98
   17660:	ldr	r1, [sp, #156]	; 0x9c
   17664:	add	r0, r0, r1
   17668:	str	r0, [sp, #152]	; 0x98
   1766c:	add	r0, sp, #136	; 0x88
   17670:	bl	17cdc <__assert_fail@plt+0x6030>
   17674:	ldrb	r0, [sp, #160]	; 0xa0
   17678:	ldr	r1, [sp, #20]
   1767c:	cmp	r0, #0
   17680:	beq	173a4 <__assert_fail@plt+0x56f8>
   17684:	ldr	r0, [sp, #164]	; 0xa4
   17688:	cmp	r0, #0
   1768c:	bne	173a4 <__assert_fail@plt+0x56f8>
   17690:	b	17698 <__assert_fail@plt+0x59ec>
   17694:	mov	r4, r6
   17698:	mov	r0, r4
   1769c:	sub	sp, fp, #28
   176a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176a4:	mov	r4, #0
   176a8:	mov	r0, r4
   176ac:	sub	sp, fp, #28
   176b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176b4:	mov	r4, r6
   176b8:	mov	r0, r4
   176bc:	sub	sp, fp, #28
   176c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176c4:	mov	r4, #0
   176c8:	mov	r0, r4
   176cc:	sub	sp, fp, #28
   176d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d4:	ldr	r4, [sp, #152]	; 0x98
   176d8:	mov	r0, r4
   176dc:	sub	sp, fp, #28
   176e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e4:	mov	r4, #0
   176e8:	mov	r0, r4
   176ec:	sub	sp, fp, #28
   176f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176f4:	ldr	r4, [fp, #-88]	; 0xffffffa8
   176f8:	mov	r0, r4
   176fc:	sub	sp, fp, #28
   17700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17704:	ldr	r4, [sp, #80]	; 0x50
   17708:	mov	r0, r4
   1770c:	sub	sp, fp, #28
   17710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17714:	bl	11c70 <abort@plt>
   17718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1771c:	add	fp, sp, #28
   17720:	sub	sp, sp, #132	; 0x84
   17724:	mov	r7, r0
   17728:	mov	r0, r1
   1772c:	mov	r6, r2
   17730:	mov	r4, r1
   17734:	bl	170ec <__assert_fail@plt+0x5440>
   17738:	mov	sl, r0
   1773c:	movw	r0, #47662	; 0xba2e
   17740:	mov	r5, #0
   17744:	movt	r0, #744	; 0x2e8
   17748:	cmp	sl, r0
   1774c:	bhi	17780 <__assert_fail@plt+0x5ad4>
   17750:	mov	r0, #44	; 0x2c
   17754:	mul	r0, sl, r0
   17758:	cmp	r0, #4016	; 0xfb0
   1775c:	bhi	1778c <__assert_fail@plt+0x5ae0>
   17760:	add	r0, r0, #22
   17764:	bic	r0, r0, #7
   17768:	sub	r0, sp, r0
   1776c:	add	r1, r0, #15
   17770:	bic	r9, r1, #15
   17774:	mov	sp, r0
   17778:	cmp	r9, #0
   1777c:	bne	1779c <__assert_fail@plt+0x5af0>
   17780:	mov	r0, r5
   17784:	sub	sp, fp, #28
   17788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1778c:	bl	31748 <__assert_fail@plt+0x1fa9c>
   17790:	mov	r9, r0
   17794:	cmp	r9, #0
   17798:	beq	17780 <__assert_fail@plt+0x5ad4>
   1779c:	str	r6, [fp, #-152]	; 0xffffff68
   177a0:	mov	r6, #0
   177a4:	str	r7, [fp, #-156]	; 0xffffff64
   177a8:	str	r6, [fp, #-80]	; 0xffffffb0
   177ac:	str	r6, [fp, #-84]	; 0xffffffac
   177b0:	strb	r6, [fp, #-88]	; 0xffffffa8
   177b4:	str	r4, [fp, #-72]	; 0xffffffb8
   177b8:	sub	r4, fp, #88	; 0x58
   177bc:	strb	r6, [fp, #-76]	; 0xffffffb4
   177c0:	mov	r0, r4
   177c4:	bl	17cdc <__assert_fail@plt+0x6030>
   177c8:	add	r0, sl, sl, lsl #2
   177cc:	add	r8, r9, r0, lsl #3
   177d0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   177d4:	cmp	r0, #0
   177d8:	beq	177e8 <__assert_fail@plt+0x5b3c>
   177dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   177e0:	cmp	r0, #0
   177e4:	beq	17868 <__assert_fail@plt+0x5bbc>
   177e8:	add	r7, r9, #16
   177ec:	add	r5, r4, #32
   177f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177f4:	cmp	r0, r5
   177f8:	bne	17810 <__assert_fail@plt+0x5b64>
   177fc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17800:	mov	r0, r7
   17804:	mov	r1, r5
   17808:	bl	118ec <memcpy@plt>
   1780c:	mov	r0, r7
   17810:	str	r0, [r7, #-16]
   17814:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17818:	str	r0, [r7, #-12]
   1781c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17820:	strb	r0, [r7, #-8]
   17824:	cmp	r0, #0
   17828:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   1782c:	strne	r0, [r7, #-4]
   17830:	strb	r6, [fp, #-76]	; 0xffffffb4
   17834:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17838:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1783c:	add	r0, r0, r1
   17840:	str	r0, [fp, #-72]	; 0xffffffb8
   17844:	mov	r0, r4
   17848:	bl	17cdc <__assert_fail@plt+0x6030>
   1784c:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   17850:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17854:	add	r7, r7, #40	; 0x28
   17858:	cmp	r1, #0
   1785c:	beq	177f0 <__assert_fail@plt+0x5b44>
   17860:	cmp	r0, #0
   17864:	bne	177f0 <__assert_fail@plt+0x5b44>
   17868:	mov	r0, #1
   1786c:	cmp	sl, #3
   17870:	str	sl, [fp, #-148]	; 0xffffff6c
   17874:	str	r0, [r8, #4]
   17878:	bcc	17974 <__assert_fail@plt+0x5cc8>
   1787c:	mov	sl, #2
   17880:	mov	r7, #0
   17884:	add	r0, sl, sl, lsl #2
   17888:	add	r0, r9, r0, lsl #3
   1788c:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   17890:	sub	r6, r0, #40	; 0x28
   17894:	sub	r4, r0, #36	; 0x24
   17898:	cmp	r1, #0
   1789c:	beq	17908 <__assert_fail@plt+0x5c5c>
   178a0:	sub	r5, r0, #28
   178a4:	b	178b0 <__assert_fail@plt+0x5c04>
   178a8:	ldr	r0, [r8, r7, lsl #2]
   178ac:	sub	r7, r7, r0
   178b0:	add	r0, r7, r7, lsl #2
   178b4:	add	r1, r9, r0, lsl #3
   178b8:	ldrb	r2, [r1, #8]
   178bc:	cmp	r2, #0
   178c0:	beq	178d8 <__assert_fail@plt+0x5c2c>
   178c4:	ldr	r0, [r1, #12]
   178c8:	ldr	r1, [r5]
   178cc:	cmp	r1, r0
   178d0:	bne	178fc <__assert_fail@plt+0x5c50>
   178d4:	b	17958 <__assert_fail@plt+0x5cac>
   178d8:	ldr	r1, [r1, #4]
   178dc:	ldr	r2, [r4]
   178e0:	cmp	r2, r1
   178e4:	bne	178fc <__assert_fail@plt+0x5c50>
   178e8:	ldr	r1, [r9, r0, lsl #3]
   178ec:	ldr	r0, [r6]
   178f0:	bl	11934 <memcmp@plt>
   178f4:	cmp	r0, #0
   178f8:	beq	17958 <__assert_fail@plt+0x5cac>
   178fc:	cmp	r7, #0
   17900:	bne	178a8 <__assert_fail@plt+0x5bfc>
   17904:	b	1794c <__assert_fail@plt+0x5ca0>
   17908:	ldr	r4, [r4]
   1790c:	b	17918 <__assert_fail@plt+0x5c6c>
   17910:	ldr	r0, [r8, r7, lsl #2]
   17914:	sub	r7, r7, r0
   17918:	add	r0, r7, r7, lsl #2
   1791c:	add	r1, r9, r0, lsl #3
   17920:	ldr	r1, [r1, #4]
   17924:	cmp	r4, r1
   17928:	bne	17944 <__assert_fail@plt+0x5c98>
   1792c:	ldr	r1, [r9, r0, lsl #3]
   17930:	ldr	r0, [r6]
   17934:	mov	r2, r4
   17938:	bl	11934 <memcmp@plt>
   1793c:	cmp	r0, #0
   17940:	beq	17958 <__assert_fail@plt+0x5cac>
   17944:	cmp	r7, #0
   17948:	bne	17910 <__assert_fail@plt+0x5c64>
   1794c:	mov	r7, #0
   17950:	mov	r0, sl
   17954:	b	17960 <__assert_fail@plt+0x5cb4>
   17958:	add	r7, r7, #1
   1795c:	sub	r0, sl, r7
   17960:	str	r0, [r8, sl, lsl #2]
   17964:	ldr	r0, [fp, #-148]	; 0xffffff6c
   17968:	add	sl, sl, #1
   1796c:	cmp	sl, r0
   17970:	bne	17884 <__assert_fail@plt+0x5bd8>
   17974:	ldr	r0, [fp, #-152]	; 0xffffff68
   17978:	mov	r6, #0
   1797c:	str	r6, [r0]
   17980:	ldr	r0, [fp, #-156]	; 0xffffff64
   17984:	str	r6, [fp, #-80]	; 0xffffffb0
   17988:	str	r6, [fp, #-84]	; 0xffffffac
   1798c:	strb	r6, [fp, #-88]	; 0xffffffa8
   17990:	str	r6, [fp, #-136]	; 0xffffff78
   17994:	str	r6, [fp, #-140]	; 0xffffff74
   17998:	str	r0, [fp, #-72]	; 0xffffffb8
   1799c:	str	r0, [fp, #-128]	; 0xffffff80
   179a0:	sub	r0, fp, #144	; 0x90
   179a4:	strb	r6, [fp, #-144]	; 0xffffff70
   179a8:	strb	r6, [fp, #-76]	; 0xffffffb4
   179ac:	strb	r6, [fp, #-132]	; 0xffffff7c
   179b0:	bl	17cdc <__assert_fail@plt+0x6030>
   179b4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   179b8:	ldrb	r1, [fp, #-120]	; 0xffffff88
   179bc:	cmp	r0, #0
   179c0:	bne	179cc <__assert_fail@plt+0x5d20>
   179c4:	cmp	r1, #0
   179c8:	bne	17b38 <__assert_fail@plt+0x5e8c>
   179cc:	clz	r1, r1
   179d0:	sub	r4, fp, #88	; 0x58
   179d4:	mov	sl, #0
   179d8:	lsr	r1, r1, #5
   179dc:	add	r2, sl, sl, lsl #2
   179e0:	tst	r1, #1
   179e4:	add	r3, r9, r2, lsl #3
   179e8:	bne	17a10 <__assert_fail@plt+0x5d64>
   179ec:	ldrb	r1, [r3, #8]
   179f0:	cmp	r1, #0
   179f4:	beq	17a10 <__assert_fail@plt+0x5d64>
   179f8:	ldr	r1, [r3, #12]
   179fc:	cmp	r1, r0
   17a00:	bne	17a3c <__assert_fail@plt+0x5d90>
   17a04:	ldr	r7, [fp, #-128]	; 0xffffff80
   17a08:	ldr	r5, [fp, #-124]	; 0xffffff84
   17a0c:	b	17a94 <__assert_fail@plt+0x5de8>
   17a10:	ldr	r5, [r3, #4]
   17a14:	ldr	r0, [fp, #-124]	; 0xffffff84
   17a18:	cmp	r5, r0
   17a1c:	bne	17a3c <__assert_fail@plt+0x5d90>
   17a20:	ldr	r7, [fp, #-128]	; 0xffffff80
   17a24:	ldr	r0, [r9, r2, lsl #3]
   17a28:	mov	r2, r5
   17a2c:	mov	r1, r7
   17a30:	bl	11934 <memcmp@plt>
   17a34:	cmp	r0, #0
   17a38:	beq	17a94 <__assert_fail@plt+0x5de8>
   17a3c:	cmp	sl, #0
   17a40:	beq	17ab4 <__assert_fail@plt+0x5e08>
   17a44:	ldr	r5, [r8, sl, lsl #2]
   17a48:	sub	sl, sl, r5
   17a4c:	cmp	r5, #0
   17a50:	beq	17b00 <__assert_fail@plt+0x5e54>
   17a54:	mov	r0, r4
   17a58:	bl	17cdc <__assert_fail@plt+0x6030>
   17a5c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17a60:	cmp	r0, #0
   17a64:	beq	17a74 <__assert_fail@plt+0x5dc8>
   17a68:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17a6c:	cmp	r0, #0
   17a70:	beq	17b50 <__assert_fail@plt+0x5ea4>
   17a74:	strb	r6, [fp, #-76]	; 0xffffffb4
   17a78:	subs	r5, r5, #1
   17a7c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17a80:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17a84:	add	r0, r0, r1
   17a88:	str	r0, [fp, #-72]	; 0xffffffb8
   17a8c:	bne	17a54 <__assert_fail@plt+0x5da8>
   17a90:	b	17b00 <__assert_fail@plt+0x5e54>
   17a94:	add	r0, r7, r5
   17a98:	strb	r6, [fp, #-132]	; 0xffffff7c
   17a9c:	add	sl, sl, #1
   17aa0:	str	r0, [fp, #-128]	; 0xffffff80
   17aa4:	ldr	r0, [fp, #-148]	; 0xffffff6c
   17aa8:	cmp	sl, r0
   17aac:	bne	17b00 <__assert_fail@plt+0x5e54>
   17ab0:	b	17b2c <__assert_fail@plt+0x5e80>
   17ab4:	mov	r0, r4
   17ab8:	bl	17cdc <__assert_fail@plt+0x6030>
   17abc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17ac0:	cmp	r0, #0
   17ac4:	beq	17ad4 <__assert_fail@plt+0x5e28>
   17ac8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17acc:	cmp	r0, #0
   17ad0:	beq	17b50 <__assert_fail@plt+0x5ea4>
   17ad4:	mov	sl, #0
   17ad8:	strb	sl, [fp, #-76]	; 0xffffffb4
   17adc:	strb	sl, [fp, #-132]	; 0xffffff7c
   17ae0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17ae4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17ae8:	add	r0, r0, r1
   17aec:	ldr	r1, [fp, #-124]	; 0xffffff84
   17af0:	str	r0, [fp, #-72]	; 0xffffffb8
   17af4:	ldr	r0, [fp, #-128]	; 0xffffff80
   17af8:	add	r0, r0, r1
   17afc:	str	r0, [fp, #-128]	; 0xffffff80
   17b00:	sub	r0, fp, #144	; 0x90
   17b04:	bl	17cdc <__assert_fail@plt+0x6030>
   17b08:	ldrb	r2, [fp, #-120]	; 0xffffff88
   17b0c:	clz	r0, r2
   17b10:	lsr	r1, r0, #5
   17b14:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17b18:	cmp	r0, #0
   17b1c:	bne	179dc <__assert_fail@plt+0x5d30>
   17b20:	cmp	r2, #0
   17b24:	beq	179dc <__assert_fail@plt+0x5d30>
   17b28:	b	17b38 <__assert_fail@plt+0x5e8c>
   17b2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b30:	ldr	r1, [fp, #-152]	; 0xffffff68
   17b34:	str	r0, [r1]
   17b38:	mov	r0, r9
   17b3c:	bl	317b8 <__assert_fail@plt+0x1fb0c>
   17b40:	mov	r5, #1
   17b44:	mov	r0, r5
   17b48:	sub	sp, fp, #28
   17b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b50:	bl	11c70 <abort@plt>
   17b54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b58:	add	fp, sp, #24
   17b5c:	mov	r4, #0
   17b60:	cmn	r2, #-536870911	; 0xe0000001
   17b64:	bhi	17cb8 <__assert_fail@plt+0x600c>
   17b68:	mov	r7, r0
   17b6c:	lsl	r0, r2, #2
   17b70:	mov	r8, r3
   17b74:	mov	r5, r2
   17b78:	mov	r6, r1
   17b7c:	cmp	r0, #4016	; 0xfb0
   17b80:	bhi	17cac <__assert_fail@plt+0x6000>
   17b84:	add	r0, r0, #22
   17b88:	bic	r0, r0, #7
   17b8c:	sub	r1, sp, r0
   17b90:	add	r0, r1, #15
   17b94:	bic	r0, r0, #15
   17b98:	mov	sp, r1
   17b9c:	cmp	r0, #0
   17ba0:	beq	17cb8 <__assert_fail@plt+0x600c>
   17ba4:	mov	r1, #1
   17ba8:	cmp	r5, #3
   17bac:	str	r1, [r0, #4]
   17bb0:	bcc	17c24 <__assert_fail@plt+0x5f78>
   17bb4:	mov	r1, #2
   17bb8:	mov	r2, #0
   17bbc:	add	r3, r6, r1
   17bc0:	ldrb	r4, [r6, r2]
   17bc4:	ldrb	r3, [r3, #-1]
   17bc8:	cmp	r3, r4
   17bcc:	bne	17be8 <__assert_fail@plt+0x5f3c>
   17bd0:	b	17c0c <__assert_fail@plt+0x5f60>
   17bd4:	ldr	r4, [r0, r2, lsl #2]
   17bd8:	sub	r2, r2, r4
   17bdc:	ldrb	r4, [r6, r2]
   17be0:	cmp	r3, r4
   17be4:	beq	17c0c <__assert_fail@plt+0x5f60>
   17be8:	cmp	r2, #0
   17bec:	bne	17bd4 <__assert_fail@plt+0x5f28>
   17bf0:	mov	r2, #0
   17bf4:	mov	r3, r1
   17bf8:	str	r3, [r0, r1, lsl #2]
   17bfc:	add	r1, r1, #1
   17c00:	cmp	r1, r5
   17c04:	bne	17bbc <__assert_fail@plt+0x5f10>
   17c08:	b	17c24 <__assert_fail@plt+0x5f78>
   17c0c:	add	r2, r2, #1
   17c10:	sub	r3, r1, r2
   17c14:	str	r3, [r0, r1, lsl #2]
   17c18:	add	r1, r1, #1
   17c1c:	cmp	r1, r5
   17c20:	bne	17bbc <__assert_fail@plt+0x5f10>
   17c24:	mov	r1, #0
   17c28:	str	r1, [r8]
   17c2c:	ldrb	r3, [r7]
   17c30:	cmp	r3, #0
   17c34:	beq	17cc8 <__assert_fail@plt+0x601c>
   17c38:	mov	r2, r7
   17c3c:	ldrb	r4, [r6, r1]
   17c40:	uxtb	r3, r3
   17c44:	cmp	r4, r3
   17c48:	bne	17c6c <__assert_fail@plt+0x5fc0>
   17c4c:	add	r1, r1, #1
   17c50:	cmp	r1, r5
   17c54:	beq	17cc4 <__assert_fail@plt+0x6018>
   17c58:	add	r7, r7, #1
   17c5c:	ldrb	r3, [r7]
   17c60:	cmp	r3, #0
   17c64:	bne	17c3c <__assert_fail@plt+0x5f90>
   17c68:	b	17cc8 <__assert_fail@plt+0x601c>
   17c6c:	cmp	r1, #0
   17c70:	beq	17c90 <__assert_fail@plt+0x5fe4>
   17c74:	ldr	r3, [r0, r1, lsl #2]
   17c78:	sub	r1, r1, r3
   17c7c:	add	r2, r2, r3
   17c80:	ldrb	r3, [r7]
   17c84:	cmp	r3, #0
   17c88:	bne	17c3c <__assert_fail@plt+0x5f90>
   17c8c:	b	17cc8 <__assert_fail@plt+0x601c>
   17c90:	add	r7, r7, #1
   17c94:	add	r2, r2, #1
   17c98:	mov	r1, #0
   17c9c:	ldrb	r3, [r7]
   17ca0:	cmp	r3, #0
   17ca4:	bne	17c3c <__assert_fail@plt+0x5f90>
   17ca8:	b	17cc8 <__assert_fail@plt+0x601c>
   17cac:	bl	31748 <__assert_fail@plt+0x1fa9c>
   17cb0:	cmp	r0, #0
   17cb4:	bne	17ba4 <__assert_fail@plt+0x5ef8>
   17cb8:	mov	r0, r4
   17cbc:	sub	sp, fp, #24
   17cc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17cc4:	str	r2, [r8]
   17cc8:	bl	317b8 <__assert_fail@plt+0x1fb0c>
   17ccc:	mov	r4, #1
   17cd0:	mov	r0, r4
   17cd4:	sub	sp, fp, #24
   17cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17cdc:	push	{r4, r5, r6, r7, fp, lr}
   17ce0:	add	fp, sp, #16
   17ce4:	mov	r4, r0
   17ce8:	ldrb	r0, [r0, #12]
   17cec:	cmp	r0, #0
   17cf0:	popne	{r4, r5, r6, r7, fp, pc}
   17cf4:	ldrb	r0, [r4]
   17cf8:	ldr	r6, [r4, #16]
   17cfc:	cmp	r0, #0
   17d00:	beq	17d68 <__assert_fail@plt+0x60bc>
   17d04:	add	r5, r4, #4
   17d08:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   17d0c:	mov	r1, r0
   17d10:	mov	r0, r6
   17d14:	bl	19ec4 <__assert_fail@plt+0x8218>
   17d18:	add	r7, r4, #28
   17d1c:	mov	r2, r0
   17d20:	mov	r1, r6
   17d24:	mov	r3, r5
   17d28:	mov	r0, r7
   17d2c:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   17d30:	cmn	r0, #2
   17d34:	str	r0, [r4, #20]
   17d38:	beq	17df4 <__assert_fail@plt+0x6148>
   17d3c:	cmp	r0, #0
   17d40:	beq	17da8 <__assert_fail@plt+0x60fc>
   17d44:	cmn	r0, #1
   17d48:	bne	17dcc <__assert_fail@plt+0x6120>
   17d4c:	mov	r0, #0
   17d50:	strb	r0, [r4, #24]
   17d54:	mov	r0, #1
   17d58:	str	r0, [r4, #20]
   17d5c:	mov	r0, #1
   17d60:	strb	r0, [r4, #12]
   17d64:	pop	{r4, r5, r6, r7, fp, pc}
   17d68:	ldrb	r0, [r6]
   17d6c:	movw	r2, #14664	; 0x3948
   17d70:	movt	r2, #3
   17d74:	ubfx	r1, r0, #5, #3
   17d78:	ldr	r1, [r2, r1, lsl #2]
   17d7c:	and	r2, r0, #31
   17d80:	mov	r0, #1
   17d84:	tst	r1, r0, lsl r2
   17d88:	beq	17e14 <__assert_fail@plt+0x6168>
   17d8c:	str	r0, [r4, #20]
   17d90:	ldrb	r1, [r6]
   17d94:	strb	r0, [r4, #24]
   17d98:	str	r1, [r4, #28]
   17d9c:	mov	r0, #1
   17da0:	strb	r0, [r4, #12]
   17da4:	pop	{r4, r5, r6, r7, fp, pc}
   17da8:	mov	r0, #1
   17dac:	str	r0, [r4, #20]
   17db0:	ldr	r0, [r4, #16]
   17db4:	ldrb	r0, [r0]
   17db8:	cmp	r0, #0
   17dbc:	bne	17e34 <__assert_fail@plt+0x6188>
   17dc0:	ldr	r0, [r7]
   17dc4:	cmp	r0, #0
   17dc8:	bne	17e54 <__assert_fail@plt+0x61a8>
   17dcc:	mov	r0, #1
   17dd0:	strb	r0, [r4, #24]
   17dd4:	mov	r0, r5
   17dd8:	bl	1191c <mbsinit@plt>
   17ddc:	cmp	r0, #0
   17de0:	movne	r0, #0
   17de4:	strbne	r0, [r4]
   17de8:	mov	r0, #1
   17dec:	strb	r0, [r4, #12]
   17df0:	pop	{r4, r5, r6, r7, fp, pc}
   17df4:	ldr	r0, [r4, #16]
   17df8:	bl	11ac0 <strlen@plt>
   17dfc:	str	r0, [r4, #20]
   17e00:	mov	r0, #0
   17e04:	strb	r0, [r4, #24]
   17e08:	mov	r0, #1
   17e0c:	strb	r0, [r4, #12]
   17e10:	pop	{r4, r5, r6, r7, fp, pc}
   17e14:	add	r5, r4, #4
   17e18:	mov	r0, r5
   17e1c:	bl	1191c <mbsinit@plt>
   17e20:	cmp	r0, #0
   17e24:	beq	17e74 <__assert_fail@plt+0x61c8>
   17e28:	mov	r0, #1
   17e2c:	strb	r0, [r4]
   17e30:	b	17d08 <__assert_fail@plt+0x605c>
   17e34:	movw	r0, #12679	; 0x3187
   17e38:	movw	r1, #12619	; 0x314b
   17e3c:	movw	r3, #12631	; 0x3157
   17e40:	mov	r2, #171	; 0xab
   17e44:	movt	r0, #3
   17e48:	movt	r1, #3
   17e4c:	movt	r3, #3
   17e50:	bl	11cac <__assert_fail@plt>
   17e54:	movw	r0, #12702	; 0x319e
   17e58:	movw	r1, #12619	; 0x314b
   17e5c:	movw	r3, #12631	; 0x3157
   17e60:	mov	r2, #172	; 0xac
   17e64:	movt	r0, #3
   17e68:	movt	r1, #3
   17e6c:	movt	r3, #3
   17e70:	bl	11cac <__assert_fail@plt>
   17e74:	movw	r0, #12596	; 0x3134
   17e78:	movw	r1, #12619	; 0x314b
   17e7c:	movw	r3, #12631	; 0x3157
   17e80:	mov	r2, #143	; 0x8f
   17e84:	movt	r0, #3
   17e88:	movt	r1, #3
   17e8c:	movt	r3, #3
   17e90:	bl	11cac <__assert_fail@plt>
   17e94:	ldr	r2, [r0, #16]
   17e98:	add	r1, r2, r1
   17e9c:	str	r1, [r0, #16]
   17ea0:	bx	lr
   17ea4:	push	{r4, r5, r6, sl, fp, lr}
   17ea8:	add	fp, sp, #16
   17eac:	mov	r5, r1
   17eb0:	ldrb	r1, [r1]
   17eb4:	mov	r4, r0
   17eb8:	strb	r1, [r0], #4
   17ebc:	cmp	r1, #0
   17ec0:	beq	17ed0 <__assert_fail@plt+0x6224>
   17ec4:	ldmib	r5, {r1, r2}
   17ec8:	stm	r0, {r1, r2}
   17ecc:	b	17edc <__assert_fail@plt+0x6230>
   17ed0:	mov	r1, #0
   17ed4:	str	r1, [r0]
   17ed8:	str	r1, [r0, #4]
   17edc:	ldrb	r0, [r5, #12]
   17ee0:	strb	r0, [r4, #12]
   17ee4:	add	r0, r5, #32
   17ee8:	ldr	r1, [r5, #16]
   17eec:	cmp	r1, r0
   17ef0:	beq	17efc <__assert_fail@plt+0x6250>
   17ef4:	mov	r6, r1
   17ef8:	b	17f0c <__assert_fail@plt+0x6260>
   17efc:	ldr	r2, [r5, #20]
   17f00:	add	r6, r4, #32
   17f04:	mov	r0, r6
   17f08:	bl	118ec <memcpy@plt>
   17f0c:	str	r6, [r4, #16]
   17f10:	ldr	r0, [r5, #20]
   17f14:	str	r0, [r4, #20]
   17f18:	ldrb	r0, [r5, #24]
   17f1c:	strb	r0, [r4, #24]
   17f20:	cmp	r0, #0
   17f24:	ldrne	r0, [r5, #28]
   17f28:	strne	r0, [r4, #28]
   17f2c:	pop	{r4, r5, r6, sl, fp, pc}
   17f30:	push	{r4, r5, fp, lr}
   17f34:	add	fp, sp, #8
   17f38:	cmp	r0, #0
   17f3c:	beq	17fd0 <__assert_fail@plt+0x6324>
   17f40:	mov	r1, #47	; 0x2f
   17f44:	mov	r4, r0
   17f48:	bl	11bb0 <strrchr@plt>
   17f4c:	cmp	r0, #0
   17f50:	mov	r5, r4
   17f54:	addne	r5, r0, #1
   17f58:	sub	r0, r5, r4
   17f5c:	cmp	r0, #7
   17f60:	blt	17fb4 <__assert_fail@plt+0x6308>
   17f64:	movw	r1, #12776	; 0x31e8
   17f68:	sub	r0, r5, #7
   17f6c:	mov	r2, #7
   17f70:	movt	r1, #3
   17f74:	bl	11c64 <strncmp@plt>
   17f78:	cmp	r0, #0
   17f7c:	bne	17fb4 <__assert_fail@plt+0x6308>
   17f80:	movw	r1, #12784	; 0x31f0
   17f84:	mov	r0, r5
   17f88:	mov	r2, #3
   17f8c:	movt	r1, #3
   17f90:	bl	11c64 <strncmp@plt>
   17f94:	cmp	r0, #0
   17f98:	beq	17fa4 <__assert_fail@plt+0x62f8>
   17f9c:	mov	r4, r5
   17fa0:	b	17fb4 <__assert_fail@plt+0x6308>
   17fa4:	movw	r0, #16896	; 0x4200
   17fa8:	add	r4, r5, #3
   17fac:	movt	r0, #4
   17fb0:	str	r4, [r0]
   17fb4:	movw	r0, #16900	; 0x4204
   17fb8:	movt	r0, #4
   17fbc:	str	r4, [r0]
   17fc0:	movw	r0, #17040	; 0x4290
   17fc4:	movt	r0, #4
   17fc8:	str	r4, [r0]
   17fcc:	pop	{r4, r5, fp, pc}
   17fd0:	movw	r0, #16912	; 0x4210
   17fd4:	mov	r1, #55	; 0x37
   17fd8:	mov	r2, #1
   17fdc:	movt	r0, #4
   17fe0:	ldr	r3, [r0]
   17fe4:	movw	r0, #12720	; 0x31b0
   17fe8:	movt	r0, #3
   17fec:	bl	119a0 <fwrite@plt>
   17ff0:	bl	11c70 <abort@plt>
   17ff4:	push	{r4, r5, r6, sl, fp, lr}
   17ff8:	add	fp, sp, #16
   17ffc:	mov	r4, r0
   18000:	movw	r0, #17048	; 0x4298
   18004:	movt	r0, #4
   18008:	cmp	r4, #0
   1800c:	moveq	r4, r0
   18010:	bl	11af0 <__errno_location@plt>
   18014:	ldr	r6, [r0]
   18018:	mov	r5, r0
   1801c:	mov	r0, r4
   18020:	mov	r1, #48	; 0x30
   18024:	bl	1aa50 <__assert_fail@plt+0x8da4>
   18028:	str	r6, [r5]
   1802c:	pop	{r4, r5, r6, sl, fp, pc}
   18030:	movw	r1, #17048	; 0x4298
   18034:	cmp	r0, #0
   18038:	movt	r1, #4
   1803c:	movne	r1, r0
   18040:	ldr	r0, [r1]
   18044:	bx	lr
   18048:	movw	r2, #17048	; 0x4298
   1804c:	cmp	r0, #0
   18050:	movt	r2, #4
   18054:	movne	r2, r0
   18058:	str	r1, [r2]
   1805c:	bx	lr
   18060:	movw	r3, #17048	; 0x4298
   18064:	cmp	r0, #0
   18068:	movt	r3, #4
   1806c:	movne	r3, r0
   18070:	ubfx	r0, r1, #5, #3
   18074:	and	r1, r1, #31
   18078:	add	r0, r3, r0, lsl #2
   1807c:	ldr	r3, [r0, #8]
   18080:	eor	r2, r2, r3, lsr r1
   18084:	and	r2, r2, #1
   18088:	eor	r2, r3, r2, lsl r1
   1808c:	str	r2, [r0, #8]
   18090:	mov	r0, #1
   18094:	and	r0, r0, r3, lsr r1
   18098:	bx	lr
   1809c:	movw	r2, #17048	; 0x4298
   180a0:	cmp	r0, #0
   180a4:	movt	r2, #4
   180a8:	movne	r2, r0
   180ac:	ldr	r0, [r2, #4]
   180b0:	str	r1, [r2, #4]
   180b4:	bx	lr
   180b8:	movw	r3, #17048	; 0x4298
   180bc:	cmp	r0, #0
   180c0:	movt	r3, #4
   180c4:	movne	r3, r0
   180c8:	cmp	r1, #0
   180cc:	mov	r0, #10
   180d0:	cmpne	r2, #0
   180d4:	str	r0, [r3]
   180d8:	bne	180e8 <__assert_fail@plt+0x643c>
   180dc:	push	{fp, lr}
   180e0:	mov	fp, sp
   180e4:	bl	11c70 <abort@plt>
   180e8:	str	r1, [r3, #40]	; 0x28
   180ec:	str	r2, [r3, #44]	; 0x2c
   180f0:	bx	lr
   180f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180f8:	add	fp, sp, #28
   180fc:	sub	sp, sp, #20
   18100:	mov	r7, r0
   18104:	ldr	r0, [fp, #8]
   18108:	movw	r5, #17048	; 0x4298
   1810c:	mov	r8, r3
   18110:	mov	r9, r2
   18114:	mov	sl, r1
   18118:	movt	r5, #4
   1811c:	cmp	r0, #0
   18120:	movne	r5, r0
   18124:	bl	11af0 <__errno_location@plt>
   18128:	mov	r4, r0
   1812c:	ldm	r5, {r0, r1}
   18130:	ldr	r2, [r5, #40]	; 0x28
   18134:	ldr	r3, [r5, #44]	; 0x2c
   18138:	add	r5, r5, #8
   1813c:	ldr	r6, [r4]
   18140:	stm	sp, {r0, r1, r5}
   18144:	str	r2, [sp, #12]
   18148:	str	r3, [sp, #16]
   1814c:	mov	r0, r7
   18150:	mov	r1, sl
   18154:	mov	r2, r9
   18158:	mov	r3, r8
   1815c:	bl	1816c <__assert_fail@plt+0x64c0>
   18160:	str	r6, [r4]
   18164:	sub	sp, fp, #28
   18168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1816c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18170:	add	fp, sp, #28
   18174:	sub	sp, sp, #156	; 0x9c
   18178:	str	r0, [sp, #76]	; 0x4c
   1817c:	ldr	r0, [fp, #12]
   18180:	mov	r6, r1
   18184:	str	r3, [sp, #84]	; 0x54
   18188:	str	r2, [fp, #-84]	; 0xffffffac
   1818c:	and	r1, r0, #4
   18190:	str	r1, [sp, #24]
   18194:	and	r1, r0, #1
   18198:	str	r1, [sp, #28]
   1819c:	ubfx	r8, r0, #1, #1
   181a0:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   181a4:	str	r0, [sp, #32]
   181a8:	ldr	r0, [fp, #24]
   181ac:	ldr	r7, [fp, #8]
   181b0:	mov	r1, #0
   181b4:	mov	r2, #0
   181b8:	mov	r4, #1
   181bc:	str	r1, [sp, #52]	; 0x34
   181c0:	str	r0, [sp, #72]	; 0x48
   181c4:	ldr	r0, [fp, #20]
   181c8:	str	r0, [sp, #68]	; 0x44
   181cc:	mov	r0, #0
   181d0:	str	r0, [sp, #48]	; 0x30
   181d4:	mov	r0, #0
   181d8:	str	r0, [sp, #92]	; 0x5c
   181dc:	mov	r0, #0
   181e0:	str	r0, [fp, #-76]	; 0xffffffb4
   181e4:	mov	r0, #0
   181e8:	cmp	r7, #10
   181ec:	bhi	194d4 <__assert_fail@plt+0x7828>
   181f0:	add	r1, pc, #28
   181f4:	mov	sl, r6
   181f8:	ldr	r6, [sp, #76]	; 0x4c
   181fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   18200:	ldr	lr, [sp, #84]	; 0x54
   18204:	mov	r9, #0
   18208:	mov	r3, #1
   1820c:	mov	r5, #0
   18210:	ldr	pc, [r1, r7, lsl #2]
   18214:	andeq	r8, r1, r4, ror #5
   18218:	andeq	r8, r1, r0, lsr #6
   1821c:	strdeq	r8, [r1], -r4
   18220:	ldrdeq	r8, [r1], -ip
   18224:	andeq	r8, r1, r4, lsl r3
   18228:	andeq	r8, r1, r8, asr #6
   1822c:	andeq	r8, r1, r4, lsl #6
   18230:	andeq	r8, r1, r4, asr r5
   18234:	andeq	r8, r1, r0, asr #4
   18238:	andeq	r8, r1, r0, asr #4
   1823c:	andeq	r8, r1, r8, ror #9
   18240:	mov	r9, r4
   18244:	movw	r4, #12866	; 0x3242
   18248:	mov	r5, r8
   1824c:	mov	r8, r2
   18250:	mov	r0, #0
   18254:	mov	r2, #5
   18258:	movt	r4, #3
   1825c:	mov	r1, r4
   18260:	bl	11940 <dcgettext@plt>
   18264:	cmp	r0, r4
   18268:	str	r0, [sp, #68]	; 0x44
   1826c:	bne	183fc <__assert_fail@plt+0x6750>
   18270:	bl	31710 <__assert_fail@plt+0x1fa64>
   18274:	ldrb	r1, [r0]
   18278:	and	r1, r1, #223	; 0xdf
   1827c:	cmp	r1, #71	; 0x47
   18280:	beq	183c8 <__assert_fail@plt+0x671c>
   18284:	cmp	r1, #85	; 0x55
   18288:	bne	183e0 <__assert_fail@plt+0x6734>
   1828c:	ldrb	r1, [r0, #1]
   18290:	and	r1, r1, #223	; 0xdf
   18294:	cmp	r1, #84	; 0x54
   18298:	bne	183e0 <__assert_fail@plt+0x6734>
   1829c:	ldrb	r1, [r0, #2]
   182a0:	and	r1, r1, #223	; 0xdf
   182a4:	cmp	r1, #70	; 0x46
   182a8:	bne	183e0 <__assert_fail@plt+0x6734>
   182ac:	ldrb	r1, [r0, #3]
   182b0:	cmp	r1, #45	; 0x2d
   182b4:	ldrbeq	r1, [r0, #4]
   182b8:	cmpeq	r1, #56	; 0x38
   182bc:	bne	183e0 <__assert_fail@plt+0x6734>
   182c0:	ldrb	r0, [r0, #5]
   182c4:	cmp	r0, #0
   182c8:	movw	r0, #12868	; 0x3244
   182cc:	movt	r0, #3
   182d0:	str	r0, [sp, #68]	; 0x44
   182d4:	bne	183e0 <__assert_fail@plt+0x6734>
   182d8:	b	183fc <__assert_fail@plt+0x6750>
   182dc:	mov	r0, #1
   182e0:	b	18320 <__assert_fail@plt+0x6674>
   182e4:	mov	r7, #0
   182e8:	mov	r9, #0
   182ec:	mov	r3, r0
   182f0:	b	183c0 <__assert_fail@plt+0x6714>
   182f4:	tst	r8, #1
   182f8:	bne	18320 <__assert_fail@plt+0x6674>
   182fc:	mov	r3, r0
   18300:	b	18378 <__assert_fail@plt+0x66cc>
   18304:	mov	r0, #1
   18308:	mov	r9, #0
   1830c:	mov	r7, #5
   18310:	b	1835c <__assert_fail@plt+0x66b0>
   18314:	mov	r3, #1
   18318:	tst	r8, #1
   1831c:	beq	18378 <__assert_fail@plt+0x66cc>
   18320:	mov	r1, #1
   18324:	mov	r9, #0
   18328:	mov	r7, #2
   1832c:	mov	r3, r0
   18330:	mov	r5, #1
   18334:	str	r1, [fp, #-76]	; 0xffffffb4
   18338:	movw	r1, #10097	; 0x2771
   1833c:	movt	r1, #3
   18340:	str	r1, [sp, #92]	; 0x5c
   18344:	b	18554 <__assert_fail@plt+0x68a8>
   18348:	mov	r7, #5
   1834c:	tst	r8, #1
   18350:	beq	18398 <__assert_fail@plt+0x66ec>
   18354:	mov	r0, #1
   18358:	mov	r9, #0
   1835c:	str	r0, [fp, #-76]	; 0xffffffb4
   18360:	movw	r0, #12864	; 0x3240
   18364:	mov	r3, #1
   18368:	mov	r5, #1
   1836c:	movt	r0, #3
   18370:	str	r0, [sp, #92]	; 0x5c
   18374:	b	18554 <__assert_fail@plt+0x68a8>
   18378:	cmp	sl, #0
   1837c:	mov	r9, #1
   18380:	mov	r7, #2
   18384:	movne	r0, #39	; 0x27
   18388:	strbne	r0, [r6]
   1838c:	movw	r0, #10097	; 0x2771
   18390:	movt	r0, #3
   18394:	b	183b4 <__assert_fail@plt+0x6708>
   18398:	cmp	sl, #0
   1839c:	mov	r9, #1
   183a0:	mov	r3, #1
   183a4:	movne	r0, #34	; 0x22
   183a8:	strbne	r0, [r6]
   183ac:	movw	r0, #12864	; 0x3240
   183b0:	movt	r0, #3
   183b4:	str	r0, [sp, #92]	; 0x5c
   183b8:	mov	r0, #1
   183bc:	str	r0, [fp, #-76]	; 0xffffffb4
   183c0:	mov	r5, #0
   183c4:	b	18554 <__assert_fail@plt+0x68a8>
   183c8:	ldrb	r1, [r0, #1]
   183cc:	and	r1, r1, #223	; 0xdf
   183d0:	cmp	r1, #66	; 0x42
   183d4:	ldrbeq	r1, [r0, #2]
   183d8:	cmpeq	r1, #49	; 0x31
   183dc:	beq	192fc <__assert_fail@plt+0x7650>
   183e0:	movw	r0, #10097	; 0x2771
   183e4:	movw	r1, #12864	; 0x3240
   183e8:	cmp	r7, #9
   183ec:	movt	r0, #3
   183f0:	movt	r1, #3
   183f4:	moveq	r0, r1
   183f8:	str	r0, [sp, #68]	; 0x44
   183fc:	movw	r4, #10097	; 0x2771
   18400:	mov	r0, #0
   18404:	mov	r2, #5
   18408:	movt	r4, #3
   1840c:	mov	r1, r4
   18410:	bl	11940 <dcgettext@plt>
   18414:	cmp	r0, r4
   18418:	str	r0, [sp, #72]	; 0x48
   1841c:	beq	1842c <__assert_fail@plt+0x6780>
   18420:	mov	r4, r9
   18424:	mov	r2, r8
   18428:	b	184e4 <__assert_fail@plt+0x6838>
   1842c:	bl	31710 <__assert_fail@plt+0x1fa64>
   18430:	ldrb	r1, [r0]
   18434:	mov	r4, r9
   18438:	and	r1, r1, #223	; 0xdf
   1843c:	cmp	r1, #71	; 0x47
   18440:	beq	1849c <__assert_fail@plt+0x67f0>
   18444:	cmp	r1, #85	; 0x55
   18448:	mov	r2, r8
   1844c:	bne	184c4 <__assert_fail@plt+0x6818>
   18450:	ldrb	r1, [r0, #1]
   18454:	and	r1, r1, #223	; 0xdf
   18458:	cmp	r1, #84	; 0x54
   1845c:	bne	184c4 <__assert_fail@plt+0x6818>
   18460:	ldrb	r1, [r0, #2]
   18464:	and	r1, r1, #223	; 0xdf
   18468:	cmp	r1, #70	; 0x46
   1846c:	ldrbeq	r1, [r0, #3]
   18470:	cmpeq	r1, #45	; 0x2d
   18474:	bne	184c4 <__assert_fail@plt+0x6818>
   18478:	ldrb	r1, [r0, #4]
   1847c:	cmp	r1, #56	; 0x38
   18480:	ldrbeq	r0, [r0, #5]
   18484:	cmpeq	r0, #0
   18488:	bne	184c4 <__assert_fail@plt+0x6818>
   1848c:	movw	r0, #12872	; 0x3248
   18490:	movt	r0, #3
   18494:	str	r0, [sp, #72]	; 0x48
   18498:	b	184e4 <__assert_fail@plt+0x6838>
   1849c:	ldrb	r1, [r0, #1]
   184a0:	mov	r2, r8
   184a4:	and	r1, r1, #223	; 0xdf
   184a8:	cmp	r1, #66	; 0x42
   184ac:	bne	184c4 <__assert_fail@plt+0x6818>
   184b0:	ldrb	r1, [r0, #2]
   184b4:	cmp	r1, #49	; 0x31
   184b8:	ldrbeq	r1, [r0, #3]
   184bc:	cmpeq	r1, #56	; 0x38
   184c0:	beq	19340 <__assert_fail@plt+0x7694>
   184c4:	movw	r0, #10097	; 0x2771
   184c8:	cmp	r7, #9
   184cc:	movt	r0, #3
   184d0:	mov	r1, r0
   184d4:	movw	r0, #12864	; 0x3240
   184d8:	movt	r0, #3
   184dc:	moveq	r1, r0
   184e0:	str	r1, [sp, #72]	; 0x48
   184e4:	mov	r8, r5
   184e8:	mov	r9, #0
   184ec:	tst	r8, #1
   184f0:	mov	r5, r8
   184f4:	str	r2, [fp, #-48]	; 0xffffffd0
   184f8:	bne	18530 <__assert_fail@plt+0x6884>
   184fc:	ldr	r0, [sp, #68]	; 0x44
   18500:	ldrb	r0, [r0]
   18504:	cmp	r0, #0
   18508:	beq	18530 <__assert_fail@plt+0x6884>
   1850c:	ldr	r1, [sp, #68]	; 0x44
   18510:	mov	r9, #0
   18514:	add	r1, r1, #1
   18518:	cmp	r9, sl
   1851c:	strbcc	r0, [r6, r9]
   18520:	ldrb	r0, [r1, r9]
   18524:	add	r9, r9, #1
   18528:	cmp	r0, #0
   1852c:	bne	18518 <__assert_fail@plt+0x686c>
   18530:	ldr	r8, [sp, #72]	; 0x48
   18534:	mov	r0, r8
   18538:	bl	11ac0 <strlen@plt>
   1853c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18540:	ldr	lr, [sp, #84]	; 0x54
   18544:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18548:	str	r0, [fp, #-76]	; 0xffffffb4
   1854c:	str	r8, [sp, #92]	; 0x5c
   18550:	mov	r3, #1
   18554:	ldr	r0, [fp, #16]
   18558:	str	r7, [fp, #-64]	; 0xffffffc0
   1855c:	str	r5, [fp, #-72]	; 0xffffffb8
   18560:	str	r3, [sp, #80]	; 0x50
   18564:	cmp	r0, #0
   18568:	movwne	r0, #1
   1856c:	and	r0, r0, r5
   18570:	str	r0, [fp, #-88]	; 0xffffffa8
   18574:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18578:	cmp	r0, #0
   1857c:	movwne	r0, #1
   18580:	subs	r7, r7, #2
   18584:	and	r1, r0, r5
   18588:	str	r7, [fp, #-80]	; 0xffffffb0
   1858c:	and	r1, r3, r1
   18590:	str	r1, [sp, #40]	; 0x28
   18594:	clz	r1, r7
   18598:	lsr	r1, r1, #5
   1859c:	and	r1, r1, r5
   185a0:	eor	r5, r5, #1
   185a4:	str	r1, [sp, #36]	; 0x24
   185a8:	mov	r1, r7
   185ac:	str	r5, [sp, #88]	; 0x58
   185b0:	mov	r7, #0
   185b4:	movwne	r1, #1
   185b8:	orr	r5, r1, r5
   185bc:	and	r1, r1, r3
   185c0:	and	r0, r0, r1
   185c4:	str	r5, [sp, #60]	; 0x3c
   185c8:	str	r1, [fp, #-68]	; 0xffffffbc
   185cc:	str	r0, [fp, #-60]	; 0xffffffc4
   185d0:	eor	r0, r3, #1
   185d4:	str	r0, [sp, #44]	; 0x2c
   185d8:	cmn	lr, #1
   185dc:	beq	185ec <__assert_fail@plt+0x6940>
   185e0:	cmp	r7, lr
   185e4:	bne	185f8 <__assert_fail@plt+0x694c>
   185e8:	b	19270 <__assert_fail@plt+0x75c4>
   185ec:	ldrb	r0, [ip, r7]
   185f0:	cmp	r0, #0
   185f4:	beq	19278 <__assert_fail@plt+0x75cc>
   185f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   185fc:	mov	r8, #0
   18600:	str	r4, [fp, #-52]	; 0xffffffcc
   18604:	str	r2, [fp, #-48]	; 0xffffffd0
   18608:	cmp	r0, #0
   1860c:	beq	18640 <__assert_fail@plt+0x6994>
   18610:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18614:	add	r4, r7, r0
   18618:	cmp	r0, #2
   1861c:	bcc	18638 <__assert_fail@plt+0x698c>
   18620:	cmn	lr, #1
   18624:	bne	18638 <__assert_fail@plt+0x698c>
   18628:	mov	r0, ip
   1862c:	bl	11ac0 <strlen@plt>
   18630:	ldr	ip, [fp, #-84]	; 0xffffffac
   18634:	mov	lr, r0
   18638:	cmp	r4, lr
   1863c:	bls	18658 <__assert_fail@plt+0x69ac>
   18640:	mov	r0, #0
   18644:	str	r0, [fp, #-56]	; 0xffffffc8
   18648:	ldrb	r5, [ip, r7]
   1864c:	cmp	r5, #126	; 0x7e
   18650:	bls	186a8 <__assert_fail@plt+0x69fc>
   18654:	b	18ab0 <__assert_fail@plt+0x6e04>
   18658:	ldr	r1, [sp, #92]	; 0x5c
   1865c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18660:	add	r0, ip, r7
   18664:	mov	r4, lr
   18668:	bl	11934 <memcmp@plt>
   1866c:	ldr	r2, [sp, #88]	; 0x58
   18670:	cmp	r0, #0
   18674:	mov	r1, r0
   18678:	movwne	r1, #1
   1867c:	orr	r1, r1, r2
   18680:	tst	r1, #1
   18684:	beq	19384 <__assert_fail@plt+0x76d8>
   18688:	ldr	ip, [fp, #-84]	; 0xffffffac
   1868c:	clz	r0, r0
   18690:	mov	lr, r4
   18694:	lsr	r0, r0, #5
   18698:	str	r0, [fp, #-56]	; 0xffffffc8
   1869c:	ldrb	r5, [ip, r7]
   186a0:	cmp	r5, #126	; 0x7e
   186a4:	bhi	18ab0 <__assert_fail@plt+0x6e04>
   186a8:	add	r3, pc, #16
   186ac:	mov	r4, #1
   186b0:	mov	r2, #110	; 0x6e
   186b4:	mov	r0, #97	; 0x61
   186b8:	mov	r1, #0
   186bc:	ldr	pc, [r3, r5, lsl #2]
   186c0:	muleq	r1, r0, r9
   186c4:			; <UNDEFINED> instruction: 0x00018ab0
   186c8:			; <UNDEFINED> instruction: 0x00018ab0
   186cc:			; <UNDEFINED> instruction: 0x00018ab0
   186d0:			; <UNDEFINED> instruction: 0x00018ab0
   186d4:			; <UNDEFINED> instruction: 0x00018ab0
   186d8:			; <UNDEFINED> instruction: 0x00018ab0
   186dc:	andeq	r8, r1, ip, lsl #23
   186e0:	andeq	r8, r1, r0, ror r9
   186e4:	andeq	r8, r1, r8, asr r9
   186e8:	andeq	r8, r1, ip, ror r9
   186ec:	andeq	r8, r1, ip, lsl #20
   186f0:	andeq	r8, r1, r0, asr r9
   186f4:	andeq	r8, r1, r8, ror r9
   186f8:			; <UNDEFINED> instruction: 0x00018ab0
   186fc:			; <UNDEFINED> instruction: 0x00018ab0
   18700:			; <UNDEFINED> instruction: 0x00018ab0
   18704:			; <UNDEFINED> instruction: 0x00018ab0
   18708:			; <UNDEFINED> instruction: 0x00018ab0
   1870c:			; <UNDEFINED> instruction: 0x00018ab0
   18710:			; <UNDEFINED> instruction: 0x00018ab0
   18714:			; <UNDEFINED> instruction: 0x00018ab0
   18718:			; <UNDEFINED> instruction: 0x00018ab0
   1871c:			; <UNDEFINED> instruction: 0x00018ab0
   18720:			; <UNDEFINED> instruction: 0x00018ab0
   18724:			; <UNDEFINED> instruction: 0x00018ab0
   18728:			; <UNDEFINED> instruction: 0x00018ab0
   1872c:			; <UNDEFINED> instruction: 0x00018ab0
   18730:			; <UNDEFINED> instruction: 0x00018ab0
   18734:			; <UNDEFINED> instruction: 0x00018ab0
   18738:			; <UNDEFINED> instruction: 0x00018ab0
   1873c:			; <UNDEFINED> instruction: 0x00018ab0
   18740:	andeq	r8, r1, r8, lsl #22
   18744:	andeq	r8, r1, ip, lsl #22
   18748:	andeq	r8, r1, ip, lsl #22
   1874c:	ldrdeq	r8, [r1], -ip
   18750:	andeq	r8, r1, ip, lsl #22
   18754:			; <UNDEFINED> instruction: 0x000188bc
   18758:	andeq	r8, r1, ip, lsl #22
   1875c:	andeq	r8, r1, r4, lsl sl
   18760:	andeq	r8, r1, ip, lsl #22
   18764:	andeq	r8, r1, ip, lsl #22
   18768:	andeq	r8, r1, ip, lsl #22
   1876c:			; <UNDEFINED> instruction: 0x000188bc
   18770:			; <UNDEFINED> instruction: 0x000188bc
   18774:			; <UNDEFINED> instruction: 0x000188bc
   18778:			; <UNDEFINED> instruction: 0x000188bc
   1877c:			; <UNDEFINED> instruction: 0x000188bc
   18780:			; <UNDEFINED> instruction: 0x000188bc
   18784:			; <UNDEFINED> instruction: 0x000188bc
   18788:			; <UNDEFINED> instruction: 0x000188bc
   1878c:			; <UNDEFINED> instruction: 0x000188bc
   18790:			; <UNDEFINED> instruction: 0x000188bc
   18794:			; <UNDEFINED> instruction: 0x000188bc
   18798:			; <UNDEFINED> instruction: 0x000188bc
   1879c:			; <UNDEFINED> instruction: 0x000188bc
   187a0:			; <UNDEFINED> instruction: 0x000188bc
   187a4:			; <UNDEFINED> instruction: 0x000188bc
   187a8:			; <UNDEFINED> instruction: 0x000188bc
   187ac:	andeq	r8, r1, ip, lsl #22
   187b0:	andeq	r8, r1, ip, lsl #22
   187b4:	andeq	r8, r1, ip, lsl #22
   187b8:	andeq	r8, r1, ip, lsl #22
   187bc:	ldrdeq	r8, [r1], -r0
   187c0:			; <UNDEFINED> instruction: 0x00018ab0
   187c4:			; <UNDEFINED> instruction: 0x000188bc
   187c8:			; <UNDEFINED> instruction: 0x000188bc
   187cc:			; <UNDEFINED> instruction: 0x000188bc
   187d0:			; <UNDEFINED> instruction: 0x000188bc
   187d4:			; <UNDEFINED> instruction: 0x000188bc
   187d8:			; <UNDEFINED> instruction: 0x000188bc
   187dc:			; <UNDEFINED> instruction: 0x000188bc
   187e0:			; <UNDEFINED> instruction: 0x000188bc
   187e4:			; <UNDEFINED> instruction: 0x000188bc
   187e8:			; <UNDEFINED> instruction: 0x000188bc
   187ec:			; <UNDEFINED> instruction: 0x000188bc
   187f0:			; <UNDEFINED> instruction: 0x000188bc
   187f4:			; <UNDEFINED> instruction: 0x000188bc
   187f8:			; <UNDEFINED> instruction: 0x000188bc
   187fc:			; <UNDEFINED> instruction: 0x000188bc
   18800:			; <UNDEFINED> instruction: 0x000188bc
   18804:			; <UNDEFINED> instruction: 0x000188bc
   18808:			; <UNDEFINED> instruction: 0x000188bc
   1880c:			; <UNDEFINED> instruction: 0x000188bc
   18810:			; <UNDEFINED> instruction: 0x000188bc
   18814:			; <UNDEFINED> instruction: 0x000188bc
   18818:			; <UNDEFINED> instruction: 0x000188bc
   1881c:			; <UNDEFINED> instruction: 0x000188bc
   18820:			; <UNDEFINED> instruction: 0x000188bc
   18824:			; <UNDEFINED> instruction: 0x000188bc
   18828:			; <UNDEFINED> instruction: 0x000188bc
   1882c:	andeq	r8, r1, ip, lsl #22
   18830:	andeq	r8, r1, ip, lsl r9
   18834:			; <UNDEFINED> instruction: 0x000188bc
   18838:	andeq	r8, r1, ip, lsl #22
   1883c:			; <UNDEFINED> instruction: 0x000188bc
   18840:	andeq	r8, r1, ip, lsl #22
   18844:			; <UNDEFINED> instruction: 0x000188bc
   18848:			; <UNDEFINED> instruction: 0x000188bc
   1884c:			; <UNDEFINED> instruction: 0x000188bc
   18850:			; <UNDEFINED> instruction: 0x000188bc
   18854:			; <UNDEFINED> instruction: 0x000188bc
   18858:			; <UNDEFINED> instruction: 0x000188bc
   1885c:			; <UNDEFINED> instruction: 0x000188bc
   18860:			; <UNDEFINED> instruction: 0x000188bc
   18864:			; <UNDEFINED> instruction: 0x000188bc
   18868:			; <UNDEFINED> instruction: 0x000188bc
   1886c:			; <UNDEFINED> instruction: 0x000188bc
   18870:			; <UNDEFINED> instruction: 0x000188bc
   18874:			; <UNDEFINED> instruction: 0x000188bc
   18878:			; <UNDEFINED> instruction: 0x000188bc
   1887c:			; <UNDEFINED> instruction: 0x000188bc
   18880:			; <UNDEFINED> instruction: 0x000188bc
   18884:			; <UNDEFINED> instruction: 0x000188bc
   18888:			; <UNDEFINED> instruction: 0x000188bc
   1888c:			; <UNDEFINED> instruction: 0x000188bc
   18890:			; <UNDEFINED> instruction: 0x000188bc
   18894:			; <UNDEFINED> instruction: 0x000188bc
   18898:			; <UNDEFINED> instruction: 0x000188bc
   1889c:			; <UNDEFINED> instruction: 0x000188bc
   188a0:			; <UNDEFINED> instruction: 0x000188bc
   188a4:			; <UNDEFINED> instruction: 0x000188bc
   188a8:			; <UNDEFINED> instruction: 0x000188bc
   188ac:	strdeq	r8, [r1], -ip
   188b0:	andeq	r8, r1, ip, lsl #22
   188b4:	strdeq	r8, [r1], -ip
   188b8:	ldrdeq	r8, [r1], -ip
   188bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   188c0:	cmp	r0, #0
   188c4:	beq	18ba0 <__assert_fail@plt+0x6ef4>
   188c8:	ldr	r0, [fp, #16]
   188cc:	cmp	r0, #0
   188d0:	mov	r0, r5
   188d4:	bne	18bb0 <__assert_fail@plt+0x6f04>
   188d8:	b	18bd0 <__assert_fail@plt+0x6f24>
   188dc:	mov	r4, #0
   188e0:	cmp	r7, #0
   188e4:	beq	18b08 <__assert_fail@plt+0x6e5c>
   188e8:	mov	r8, #0
   188ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   188f0:	cmp	r0, #0
   188f4:	bne	188c8 <__assert_fail@plt+0x6c1c>
   188f8:	b	18ba0 <__assert_fail@plt+0x6ef4>
   188fc:	mov	r4, #0
   18900:	cmn	lr, #1
   18904:	beq	18ae0 <__assert_fail@plt+0x6e34>
   18908:	cmp	r7, #0
   1890c:	bne	188e8 <__assert_fail@plt+0x6c3c>
   18910:	cmp	lr, #1
   18914:	beq	18b08 <__assert_fail@plt+0x6e5c>
   18918:	b	188e8 <__assert_fail@plt+0x6c3c>
   1891c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18920:	cmp	r0, #2
   18924:	bne	18b38 <__assert_fail@plt+0x6e8c>
   18928:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1892c:	tst	r0, #1
   18930:	bne	19398 <__assert_fail@plt+0x76ec>
   18934:	mov	r8, #0
   18938:	mov	r0, #92	; 0x5c
   1893c:	mov	r4, #0
   18940:	cmp	r8, #0
   18944:	beq	18b58 <__assert_fail@plt+0x6eac>
   18948:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1894c:	b	18c4c <__assert_fail@plt+0x6fa0>
   18950:	mov	r0, #102	; 0x66
   18954:	b	18b8c <__assert_fail@plt+0x6ee0>
   18958:	mov	r2, #116	; 0x74
   1895c:	ldr	r0, [sp, #60]	; 0x3c
   18960:	tst	r0, #1
   18964:	mov	r0, r2
   18968:	bne	18b8c <__assert_fail@plt+0x6ee0>
   1896c:	b	19398 <__assert_fail@plt+0x76ec>
   18970:	mov	r0, #98	; 0x62
   18974:	b	18b8c <__assert_fail@plt+0x6ee0>
   18978:	mov	r2, #114	; 0x72
   1897c:	ldr	r0, [sp, #60]	; 0x3c
   18980:	tst	r0, #1
   18984:	mov	r0, r2
   18988:	bne	18b8c <__assert_fail@plt+0x6ee0>
   1898c:	b	19398 <__assert_fail@plt+0x76ec>
   18990:	ldr	r0, [sp, #80]	; 0x50
   18994:	tst	r0, #1
   18998:	beq	18c74 <__assert_fail@plt+0x6fc8>
   1899c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   189a0:	tst	r0, #1
   189a4:	bne	194c0 <__assert_fail@plt+0x7814>
   189a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   189ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   189b0:	cmp	r0, #2
   189b4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   189b8:	movwne	r0, #1
   189bc:	orr	r0, r0, r2
   189c0:	tst	r0, #1
   189c4:	beq	18f6c <__assert_fail@plt+0x72c0>
   189c8:	mov	r0, r9
   189cc:	b	18fa0 <__assert_fail@plt+0x72f4>
   189d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   189d4:	mov	r8, #0
   189d8:	mov	r5, #63	; 0x3f
   189dc:	cmp	r0, #5
   189e0:	beq	18e28 <__assert_fail@plt+0x717c>
   189e4:	cmp	r0, #2
   189e8:	bne	18ed8 <__assert_fail@plt+0x722c>
   189ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   189f0:	tst	r0, #1
   189f4:	bne	19398 <__assert_fail@plt+0x76ec>
   189f8:	mov	r4, #0
   189fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18a00:	cmp	r0, #0
   18a04:	bne	188c8 <__assert_fail@plt+0x6c1c>
   18a08:	b	18ba0 <__assert_fail@plt+0x6ef4>
   18a0c:	mov	r0, #118	; 0x76
   18a10:	b	18b8c <__assert_fail@plt+0x6ee0>
   18a14:	mov	r0, #1
   18a18:	mov	r5, #39	; 0x27
   18a1c:	str	r0, [sp, #52]	; 0x34
   18a20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18a24:	cmp	r0, #2
   18a28:	bne	18a9c <__assert_fail@plt+0x6df0>
   18a2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18a30:	tst	r0, #1
   18a34:	bne	19398 <__assert_fail@plt+0x76ec>
   18a38:	ldr	r2, [sp, #48]	; 0x30
   18a3c:	clz	r1, sl
   18a40:	mov	r8, #0
   18a44:	lsr	r1, r1, #5
   18a48:	cmp	r2, #0
   18a4c:	mov	r0, r2
   18a50:	movwne	r0, #1
   18a54:	orrs	r0, r0, r1
   18a58:	moveq	r2, sl
   18a5c:	moveq	sl, r0
   18a60:	cmp	r9, sl
   18a64:	str	r2, [sp, #48]	; 0x30
   18a68:	movcc	r0, #39	; 0x27
   18a6c:	strbcc	r0, [r6, r9]
   18a70:	add	r0, r9, #1
   18a74:	cmp	r0, sl
   18a78:	movcc	r1, #92	; 0x5c
   18a7c:	strbcc	r1, [r6, r0]
   18a80:	add	r0, r9, #2
   18a84:	add	r9, r9, #3
   18a88:	cmp	r0, sl
   18a8c:	movcc	r1, #39	; 0x27
   18a90:	strbcc	r1, [r6, r0]
   18a94:	mov	r0, #0
   18a98:	str	r0, [fp, #-48]	; 0xffffffd0
   18a9c:	mov	r4, #1
   18aa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18aa4:	cmp	r0, #0
   18aa8:	bne	188c8 <__assert_fail@plt+0x6c1c>
   18aac:	b	18ba0 <__assert_fail@plt+0x6ef4>
   18ab0:	ldr	r0, [sp, #32]
   18ab4:	cmp	r0, #1
   18ab8:	bne	18ca4 <__assert_fail@plt+0x6ff8>
   18abc:	str	lr, [sp, #84]	; 0x54
   18ac0:	bl	11a90 <__ctype_b_loc@plt>
   18ac4:	ldr	r0, [r0]
   18ac8:	ldr	ip, [fp, #-84]	; 0xffffffac
   18acc:	mov	r1, #1
   18ad0:	add	r0, r0, r5, lsl #1
   18ad4:	ldrb	r0, [r0, #1]
   18ad8:	ubfx	r4, r0, #6, #1
   18adc:	b	1909c <__assert_fail@plt+0x73f0>
   18ae0:	cmp	r7, #0
   18ae4:	ldrbeq	r0, [ip, #1]
   18ae8:	cmpeq	r0, #0
   18aec:	beq	18b08 <__assert_fail@plt+0x6e5c>
   18af0:	mvn	lr, #0
   18af4:	mov	r8, #0
   18af8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18afc:	cmp	r0, #0
   18b00:	bne	188c8 <__assert_fail@plt+0x6c1c>
   18b04:	b	18ba0 <__assert_fail@plt+0x6ef4>
   18b08:	mov	r1, #1
   18b0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18b10:	cmp	r0, #2
   18b14:	bne	18b24 <__assert_fail@plt+0x6e78>
   18b18:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18b1c:	tst	r0, #1
   18b20:	bne	19398 <__assert_fail@plt+0x76ec>
   18b24:	mov	r4, r1
   18b28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18b2c:	cmp	r0, #0
   18b30:	bne	188c8 <__assert_fail@plt+0x6c1c>
   18b34:	b	18ba0 <__assert_fail@plt+0x6ef4>
   18b38:	ldr	r1, [sp, #40]	; 0x28
   18b3c:	mov	r8, #0
   18b40:	mov	r0, #92	; 0x5c
   18b44:	cmp	r1, #0
   18b48:	beq	18b8c <__assert_fail@plt+0x6ee0>
   18b4c:	mov	r4, #0
   18b50:	cmp	r8, #0
   18b54:	bne	18948 <__assert_fail@plt+0x6c9c>
   18b58:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18b5c:	tst	r2, #1
   18b60:	beq	18c4c <__assert_fail@plt+0x6fa0>
   18b64:	cmp	r9, sl
   18b68:	movcc	r1, #39	; 0x27
   18b6c:	strbcc	r1, [r6, r9]
   18b70:	add	r1, r9, #1
   18b74:	add	r9, r9, #2
   18b78:	cmp	r1, sl
   18b7c:	movcc	r2, #39	; 0x27
   18b80:	strbcc	r2, [r6, r1]
   18b84:	mov	r2, #0
   18b88:	b	18c4c <__assert_fail@plt+0x6fa0>
   18b8c:	ldr	r1, [sp, #80]	; 0x50
   18b90:	mov	r4, #0
   18b94:	mov	r8, #0
   18b98:	tst	r1, #1
   18b9c:	bne	18bdc <__assert_fail@plt+0x6f30>
   18ba0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18ba4:	cmp	r0, #0
   18ba8:	mov	r0, r5
   18bac:	beq	18bd0 <__assert_fail@plt+0x6f24>
   18bb0:	ldr	r1, [fp, #16]
   18bb4:	ubfx	r0, r5, #5, #3
   18bb8:	mov	r2, #1
   18bbc:	ldr	r0, [r1, r0, lsl #2]
   18bc0:	and	r1, r5, #31
   18bc4:	tst	r0, r2, lsl r1
   18bc8:	mov	r0, r5
   18bcc:	bne	18bdc <__assert_fail@plt+0x6f30>
   18bd0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18bd4:	cmp	r1, #0
   18bd8:	beq	19034 <__assert_fail@plt+0x7388>
   18bdc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18be0:	tst	r1, #1
   18be4:	bne	19378 <__assert_fail@plt+0x76cc>
   18be8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18bec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18bf0:	cmp	r1, #2
   18bf4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18bf8:	movwne	r1, #1
   18bfc:	orr	r1, r1, r2
   18c00:	tst	r1, #1
   18c04:	bne	18c3c <__assert_fail@plt+0x6f90>
   18c08:	cmp	r9, sl
   18c0c:	movcc	r1, #39	; 0x27
   18c10:	strbcc	r1, [r6, r9]
   18c14:	add	r1, r9, #1
   18c18:	cmp	r1, sl
   18c1c:	movcc	r2, #36	; 0x24
   18c20:	strbcc	r2, [r6, r1]
   18c24:	add	r1, r9, #2
   18c28:	add	r9, r9, #3
   18c2c:	cmp	r1, sl
   18c30:	movcc	r2, #39	; 0x27
   18c34:	strbcc	r2, [r6, r1]
   18c38:	mov	r2, #1
   18c3c:	cmp	r9, sl
   18c40:	movcc	r1, #92	; 0x5c
   18c44:	strbcc	r1, [r6, r9]
   18c48:	add	r9, r9, #1
   18c4c:	cmp	r9, sl
   18c50:	add	r7, r7, #1
   18c54:	strbcc	r0, [r6, r9]
   18c58:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18c5c:	add	r9, r9, #1
   18c60:	and	r0, r0, r4
   18c64:	mov	r4, r0
   18c68:	cmn	lr, #1
   18c6c:	bne	185e0 <__assert_fail@plt+0x6934>
   18c70:	b	185ec <__assert_fail@plt+0x6940>
   18c74:	ldr	r0, [sp, #28]
   18c78:	mov	r4, #0
   18c7c:	mov	r8, #0
   18c80:	mov	r5, #0
   18c84:	cmp	r0, #0
   18c88:	beq	18ba0 <__assert_fail@plt+0x6ef4>
   18c8c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   18c90:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18c94:	add	r7, r7, #1
   18c98:	cmn	lr, #1
   18c9c:	bne	185e0 <__assert_fail@plt+0x6934>
   18ca0:	b	185ec <__assert_fail@plt+0x6940>
   18ca4:	mov	r0, #0
   18ca8:	cmn	lr, #1
   18cac:	str	r0, [fp, #-36]	; 0xffffffdc
   18cb0:	str	r0, [fp, #-40]	; 0xffffffd8
   18cb4:	bne	18cc8 <__assert_fail@plt+0x701c>
   18cb8:	mov	r0, ip
   18cbc:	bl	11ac0 <strlen@plt>
   18cc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   18cc4:	mov	lr, r0
   18cc8:	ldr	r0, [sp, #36]	; 0x24
   18ccc:	str	sl, [sp, #56]	; 0x38
   18cd0:	str	lr, [sp, #84]	; 0x54
   18cd4:	cmp	r0, #0
   18cd8:	beq	18ef0 <__assert_fail@plt+0x7244>
   18cdc:	add	r0, ip, r7
   18ce0:	mov	r4, #1
   18ce4:	mov	r6, #0
   18ce8:	sub	sl, fp, #40	; 0x28
   18cec:	str	r0, [sp, #20]
   18cf0:	str	r6, [sp, #64]	; 0x40
   18cf4:	add	r6, r6, r7
   18cf8:	sub	r0, fp, #44	; 0x2c
   18cfc:	mov	r3, sl
   18d00:	add	r1, ip, r6
   18d04:	sub	r2, lr, r6
   18d08:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   18d0c:	cmn	r0, #2
   18d10:	beq	1904c <__assert_fail@plt+0x73a0>
   18d14:	ldr	sl, [sp, #56]	; 0x38
   18d18:	cmn	r0, #1
   18d1c:	beq	19040 <__assert_fail@plt+0x7394>
   18d20:	cmp	r0, #0
   18d24:	beq	19044 <__assert_fail@plt+0x7398>
   18d28:	cmp	r0, #2
   18d2c:	bcc	18dec <__assert_fail@plt+0x7140>
   18d30:	ldr	r1, [sp, #64]	; 0x40
   18d34:	ldr	r2, [sp, #20]
   18d38:	add	r1, r2, r1
   18d3c:	mov	r2, #1
   18d40:	ldrb	r3, [r1, r2]
   18d44:	sub	r3, r3, #91	; 0x5b
   18d48:	cmp	r3, #33	; 0x21
   18d4c:	bhi	18de0 <__assert_fail@plt+0x7134>
   18d50:	add	r6, pc, #0
   18d54:	ldr	pc, [r6, r3, lsl #2]
   18d58:	andeq	r9, r1, r4, lsr #7
   18d5c:	andeq	r9, r1, r4, lsr #7
   18d60:	andeq	r8, r1, r0, ror #27
   18d64:	andeq	r9, r1, r4, lsr #7
   18d68:	andeq	r8, r1, r0, ror #27
   18d6c:	andeq	r9, r1, r4, lsr #7
   18d70:	andeq	r8, r1, r0, ror #27
   18d74:	andeq	r8, r1, r0, ror #27
   18d78:	andeq	r8, r1, r0, ror #27
   18d7c:	andeq	r8, r1, r0, ror #27
   18d80:	andeq	r8, r1, r0, ror #27
   18d84:	andeq	r8, r1, r0, ror #27
   18d88:	andeq	r8, r1, r0, ror #27
   18d8c:	andeq	r8, r1, r0, ror #27
   18d90:	andeq	r8, r1, r0, ror #27
   18d94:	andeq	r8, r1, r0, ror #27
   18d98:	andeq	r8, r1, r0, ror #27
   18d9c:	andeq	r8, r1, r0, ror #27
   18da0:	andeq	r8, r1, r0, ror #27
   18da4:	andeq	r8, r1, r0, ror #27
   18da8:	andeq	r8, r1, r0, ror #27
   18dac:	andeq	r8, r1, r0, ror #27
   18db0:	andeq	r8, r1, r0, ror #27
   18db4:	andeq	r8, r1, r0, ror #27
   18db8:	andeq	r8, r1, r0, ror #27
   18dbc:	andeq	r8, r1, r0, ror #27
   18dc0:	andeq	r8, r1, r0, ror #27
   18dc4:	andeq	r8, r1, r0, ror #27
   18dc8:	andeq	r8, r1, r0, ror #27
   18dcc:	andeq	r8, r1, r0, ror #27
   18dd0:	andeq	r8, r1, r0, ror #27
   18dd4:	andeq	r8, r1, r0, ror #27
   18dd8:	andeq	r8, r1, r0, ror #27
   18ddc:	andeq	r9, r1, r4, lsr #7
   18de0:	add	r2, r2, #1
   18de4:	cmp	r2, r0
   18de8:	bcc	18d40 <__assert_fail@plt+0x7094>
   18dec:	ldr	r6, [sp, #64]	; 0x40
   18df0:	add	r6, r0, r6
   18df4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18df8:	bl	1197c <iswprint@plt>
   18dfc:	cmp	r0, #0
   18e00:	sub	sl, fp, #40	; 0x28
   18e04:	movwne	r0, #1
   18e08:	and	r4, r4, r0
   18e0c:	mov	r0, sl
   18e10:	bl	1191c <mbsinit@plt>
   18e14:	ldr	ip, [fp, #-84]	; 0xffffffac
   18e18:	ldr	lr, [sp, #84]	; 0x54
   18e1c:	cmp	r0, #0
   18e20:	beq	18cf0 <__assert_fail@plt+0x7044>
   18e24:	b	19090 <__assert_fail@plt+0x73e4>
   18e28:	ldr	r0, [sp, #24]
   18e2c:	cmp	r0, #0
   18e30:	beq	18ed8 <__assert_fail@plt+0x722c>
   18e34:	add	r0, r7, #2
   18e38:	cmp	r0, lr
   18e3c:	bcs	18ed8 <__assert_fail@plt+0x722c>
   18e40:	add	r1, ip, r7
   18e44:	ldrb	r1, [r1, #1]
   18e48:	cmp	r1, #63	; 0x3f
   18e4c:	bne	18ed8 <__assert_fail@plt+0x722c>
   18e50:	ldrb	r5, [ip, r0]
   18e54:	sub	r1, r5, #33	; 0x21
   18e58:	cmp	r1, #29
   18e5c:	bhi	18ed8 <__assert_fail@plt+0x722c>
   18e60:	movw	r3, #20929	; 0x51c1
   18e64:	mov	r2, #1
   18e68:	movt	r3, #14336	; 0x3800
   18e6c:	tst	r3, r2, lsl r1
   18e70:	beq	18ed8 <__assert_fail@plt+0x722c>
   18e74:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18e78:	tst	r1, #1
   18e7c:	bne	194c8 <__assert_fail@plt+0x781c>
   18e80:	cmp	r9, sl
   18e84:	mov	r7, r0
   18e88:	mov	r4, #0
   18e8c:	movcc	r1, #63	; 0x3f
   18e90:	strbcc	r1, [r6, r9]
   18e94:	add	r1, r9, #1
   18e98:	cmp	r1, sl
   18e9c:	movcc	r2, #34	; 0x22
   18ea0:	strbcc	r2, [r6, r1]
   18ea4:	add	r1, r9, #2
   18ea8:	cmp	r1, sl
   18eac:	movcc	r2, #34	; 0x22
   18eb0:	strbcc	r2, [r6, r1]
   18eb4:	add	r1, r9, #3
   18eb8:	add	r9, r9, #4
   18ebc:	cmp	r1, sl
   18ec0:	movcc	r2, #63	; 0x3f
   18ec4:	strbcc	r2, [r6, r1]
   18ec8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ecc:	cmp	r0, #0
   18ed0:	bne	188c8 <__assert_fail@plt+0x6c1c>
   18ed4:	b	18ba0 <__assert_fail@plt+0x6ef4>
   18ed8:	mov	r5, #63	; 0x3f
   18edc:	mov	r4, #0
   18ee0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ee4:	cmp	r0, #0
   18ee8:	bne	188c8 <__assert_fail@plt+0x6c1c>
   18eec:	b	18ba0 <__assert_fail@plt+0x6ef4>
   18ef0:	mov	r4, #1
   18ef4:	mov	r6, #0
   18ef8:	sub	sl, fp, #40	; 0x28
   18efc:	str	r6, [sp, #64]	; 0x40
   18f00:	add	r6, r6, r7
   18f04:	sub	r0, fp, #44	; 0x2c
   18f08:	mov	r3, sl
   18f0c:	add	r1, ip, r6
   18f10:	sub	r2, lr, r6
   18f14:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   18f18:	cmn	r0, #2
   18f1c:	beq	1904c <__assert_fail@plt+0x73a0>
   18f20:	cmn	r0, #1
   18f24:	beq	19040 <__assert_fail@plt+0x7394>
   18f28:	ldr	r6, [sp, #64]	; 0x40
   18f2c:	cmp	r0, #0
   18f30:	beq	1908c <__assert_fail@plt+0x73e0>
   18f34:	add	r6, r0, r6
   18f38:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18f3c:	bl	1197c <iswprint@plt>
   18f40:	cmp	r0, #0
   18f44:	sub	sl, fp, #40	; 0x28
   18f48:	movwne	r0, #1
   18f4c:	and	r4, r4, r0
   18f50:	mov	r0, sl
   18f54:	bl	1191c <mbsinit@plt>
   18f58:	ldr	ip, [fp, #-84]	; 0xffffffac
   18f5c:	ldr	lr, [sp, #84]	; 0x54
   18f60:	cmp	r0, #0
   18f64:	beq	18efc <__assert_fail@plt+0x7250>
   18f68:	b	19090 <__assert_fail@plt+0x73e4>
   18f6c:	cmp	r9, sl
   18f70:	mov	r2, #1
   18f74:	movcc	r0, #39	; 0x27
   18f78:	strbcc	r0, [r6, r9]
   18f7c:	add	r0, r9, #1
   18f80:	cmp	r0, sl
   18f84:	movcc	r1, #36	; 0x24
   18f88:	strbcc	r1, [r6, r0]
   18f8c:	add	r0, r9, #2
   18f90:	cmp	r0, sl
   18f94:	movcc	r1, #39	; 0x27
   18f98:	strbcc	r1, [r6, r0]
   18f9c:	add	r0, r9, #3
   18fa0:	cmp	r0, sl
   18fa4:	add	r9, r0, #1
   18fa8:	str	r2, [fp, #-48]	; 0xffffffd0
   18fac:	movcc	r1, #92	; 0x5c
   18fb0:	strbcc	r1, [r6, r0]
   18fb4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18fb8:	cmp	r1, #2
   18fbc:	beq	1901c <__assert_fail@plt+0x7370>
   18fc0:	add	r1, r7, #1
   18fc4:	mov	r4, #0
   18fc8:	mov	r8, #1
   18fcc:	mov	r5, #48	; 0x30
   18fd0:	cmp	r1, lr
   18fd4:	bcs	188bc <__assert_fail@plt+0x6c10>
   18fd8:	ldrb	r1, [ip, r1]
   18fdc:	sub	r1, r1, #48	; 0x30
   18fe0:	uxtb	r1, r1
   18fe4:	cmp	r1, #9
   18fe8:	bhi	188bc <__assert_fail@plt+0x6c10>
   18fec:	cmp	r9, sl
   18ff0:	movcc	r1, #48	; 0x30
   18ff4:	strbcc	r1, [r6, r9]
   18ff8:	add	r1, r0, #2
   18ffc:	add	r9, r0, #3
   19000:	cmp	r1, sl
   19004:	movcc	r2, #48	; 0x30
   19008:	strbcc	r2, [r6, r1]
   1900c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19010:	cmp	r0, #0
   19014:	bne	188c8 <__assert_fail@plt+0x6c1c>
   19018:	b	18ba0 <__assert_fail@plt+0x6ef4>
   1901c:	mov	r0, #48	; 0x30
   19020:	mov	r8, #1
   19024:	mov	r4, #0
   19028:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1902c:	cmp	r1, #0
   19030:	bne	18bdc <__assert_fail@plt+0x6f30>
   19034:	cmp	r8, #0
   19038:	beq	18b58 <__assert_fail@plt+0x6eac>
   1903c:	b	18948 <__assert_fail@plt+0x6c9c>
   19040:	mov	r4, #0
   19044:	ldr	ip, [fp, #-84]	; 0xffffffac
   19048:	b	19084 <__assert_fail@plt+0x73d8>
   1904c:	ldr	r1, [sp, #84]	; 0x54
   19050:	ldr	ip, [fp, #-84]	; 0xffffffac
   19054:	mov	r4, #0
   19058:	cmp	r6, r1
   1905c:	bcs	19084 <__assert_fail@plt+0x73d8>
   19060:	ldrb	r0, [ip, r6]
   19064:	cmp	r0, #0
   19068:	beq	19084 <__assert_fail@plt+0x73d8>
   1906c:	ldr	r0, [sp, #64]	; 0x40
   19070:	add	r0, r0, #1
   19074:	add	r6, r0, r7
   19078:	str	r0, [sp, #64]	; 0x40
   1907c:	cmp	r6, r1
   19080:	bcc	19060 <__assert_fail@plt+0x73b4>
   19084:	ldr	r6, [sp, #64]	; 0x40
   19088:	b	19090 <__assert_fail@plt+0x73e4>
   1908c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19090:	mov	r1, r6
   19094:	ldr	r6, [sp, #76]	; 0x4c
   19098:	ldr	sl, [sp, #56]	; 0x38
   1909c:	ldr	r0, [sp, #44]	; 0x2c
   190a0:	cmp	r1, #1
   190a4:	orr	r2, r4, r0
   190a8:	mov	r0, r1
   190ac:	bhi	190cc <__assert_fail@plt+0x7420>
   190b0:	tst	r2, #1
   190b4:	beq	190cc <__assert_fail@plt+0x7420>
   190b8:	ldr	lr, [sp, #84]	; 0x54
   190bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   190c0:	cmp	r0, #0
   190c4:	bne	188c8 <__assert_fail@plt+0x6c1c>
   190c8:	b	18ba0 <__assert_fail@plt+0x6ef4>
   190cc:	str	r2, [sp, #64]	; 0x40
   190d0:	add	r0, r0, r7
   190d4:	add	r1, r7, #1
   190d8:	ldr	lr, [sp, #84]	; 0x54
   190dc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   190e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   190e4:	mov	r3, #0
   190e8:	str	r0, [sp, #56]	; 0x38
   190ec:	ldr	r0, [sp, #64]	; 0x40
   190f0:	tst	r0, #1
   190f4:	bne	191dc <__assert_fail@plt+0x7530>
   190f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   190fc:	tst	r0, #1
   19100:	bne	1937c <__assert_fail@plt+0x76d0>
   19104:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19108:	cmp	r7, #2
   1910c:	movwne	r3, #1
   19110:	orr	r3, r3, r2
   19114:	tst	r3, #1
   19118:	bne	19150 <__assert_fail@plt+0x74a4>
   1911c:	cmp	r9, sl
   19120:	add	r3, r9, #1
   19124:	movcc	r2, #39	; 0x27
   19128:	strbcc	r2, [r6, r9]
   1912c:	cmp	r3, sl
   19130:	movcc	r2, #36	; 0x24
   19134:	strbcc	r2, [r6, r3]
   19138:	add	r3, r9, #2
   1913c:	add	r9, r9, #3
   19140:	cmp	r3, sl
   19144:	movcc	r2, #39	; 0x27
   19148:	strbcc	r2, [r6, r3]
   1914c:	mov	r2, #1
   19150:	cmp	r9, sl
   19154:	mov	r0, r2
   19158:	movcc	r3, #92	; 0x5c
   1915c:	strbcc	r3, [r6, r9]
   19160:	add	r3, r9, #1
   19164:	cmp	r3, sl
   19168:	andcc	r7, r5, #192	; 0xc0
   1916c:	movcc	r2, #48	; 0x30
   19170:	orrcc	r7, r2, r7, lsr #6
   19174:	strbcc	r7, [r6, r3]
   19178:	add	r3, r9, #2
   1917c:	add	r9, r9, #3
   19180:	cmp	r3, sl
   19184:	lsrcc	r7, r5, #3
   19188:	movcc	r2, #6
   1918c:	bficc	r7, r2, #3, #29
   19190:	mov	r2, #6
   19194:	strbcc	r7, [r6, r3]
   19198:	bfi	r5, r2, #3, #29
   1919c:	mov	r3, #1
   191a0:	mov	r2, r0
   191a4:	ldr	r0, [sp, #56]	; 0x38
   191a8:	and	r8, r3, #1
   191ac:	cmp	r0, r1
   191b0:	bhi	19210 <__assert_fail@plt+0x7564>
   191b4:	b	19250 <__assert_fail@plt+0x75a4>
   191b8:	cmp	r9, sl
   191bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   191c0:	strbcc	r5, [r6, r9]
   191c4:	add	r9, r9, #1
   191c8:	ldrb	r5, [ip, r1]
   191cc:	add	r1, r1, #1
   191d0:	ldr	r0, [sp, #64]	; 0x40
   191d4:	tst	r0, #1
   191d8:	beq	190f8 <__assert_fail@plt+0x744c>
   191dc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   191e0:	tst	r7, #1
   191e4:	beq	191f8 <__assert_fail@plt+0x754c>
   191e8:	cmp	r9, sl
   191ec:	movcc	r7, #92	; 0x5c
   191f0:	strbcc	r7, [r6, r9]
   191f4:	add	r9, r9, #1
   191f8:	mov	r7, #0
   191fc:	str	r7, [fp, #-56]	; 0xffffffc8
   19200:	ldr	r0, [sp, #56]	; 0x38
   19204:	and	r8, r3, #1
   19208:	cmp	r0, r1
   1920c:	bls	19250 <__assert_fail@plt+0x75a4>
   19210:	cmp	r8, #0
   19214:	mvn	r7, r2
   19218:	movwne	r8, #1
   1921c:	orr	r7, r7, r8
   19220:	tst	r7, #1
   19224:	bne	191b8 <__assert_fail@plt+0x750c>
   19228:	cmp	r9, sl
   1922c:	movcc	r7, #39	; 0x27
   19230:	strbcc	r7, [r6, r9]
   19234:	add	r7, r9, #1
   19238:	add	r9, r9, #2
   1923c:	cmp	r7, sl
   19240:	movcc	r2, #39	; 0x27
   19244:	strbcc	r2, [r6, r7]
   19248:	mov	r2, #0
   1924c:	b	191b8 <__assert_fail@plt+0x750c>
   19250:	cmp	r8, #0
   19254:	sub	r7, r1, #1
   19258:	mov	r0, r5
   1925c:	str	r2, [fp, #-48]	; 0xffffffd0
   19260:	movwne	r8, #1
   19264:	cmp	r8, #0
   19268:	beq	18b58 <__assert_fail@plt+0x6eac>
   1926c:	b	18948 <__assert_fail@plt+0x6c9c>
   19270:	mov	lr, r7
   19274:	b	1927c <__assert_fail@plt+0x75d0>
   19278:	mvn	lr, #0
   1927c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19280:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19284:	eor	r0, r7, #2
   19288:	orr	r0, r0, r9
   1928c:	clz	r0, r0
   19290:	lsr	r0, r0, #5
   19294:	tst	r1, r0
   19298:	bne	19398 <__assert_fail@plt+0x76ec>
   1929c:	mov	r0, r1
   192a0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   192a4:	cmp	r7, #2
   192a8:	movwne	r1, #1
   192ac:	orr	r0, r0, r1
   192b0:	tst	r0, #1
   192b4:	ldreq	r0, [sp, #52]	; 0x34
   192b8:	streq	lr, [sp, #84]	; 0x54
   192bc:	eoreq	r0, r0, #1
   192c0:	tsteq	r0, #1
   192c4:	bne	1945c <__assert_fail@plt+0x77b0>
   192c8:	tst	r4, #1
   192cc:	bne	19418 <__assert_fail@plt+0x776c>
   192d0:	ldr	r6, [sp, #48]	; 0x30
   192d4:	mov	r8, #0
   192d8:	cmp	r6, #0
   192dc:	beq	19454 <__assert_fail@plt+0x77a8>
   192e0:	ldr	r0, [sp, #80]	; 0x50
   192e4:	mov	r1, #0
   192e8:	cmp	sl, #0
   192ec:	mov	r4, #0
   192f0:	str	r1, [fp, #-72]	; 0xffffffb8
   192f4:	beq	181e8 <__assert_fail@plt+0x653c>
   192f8:	b	1945c <__assert_fail@plt+0x77b0>
   192fc:	ldrb	r1, [r0, #3]
   19300:	cmp	r1, #56	; 0x38
   19304:	ldrbeq	r1, [r0, #4]
   19308:	cmpeq	r1, #48	; 0x30
   1930c:	bne	183e0 <__assert_fail@plt+0x6734>
   19310:	ldrb	r1, [r0, #5]
   19314:	cmp	r1, #51	; 0x33
   19318:	ldrbeq	r1, [r0, #6]
   1931c:	cmpeq	r1, #48	; 0x30
   19320:	bne	183e0 <__assert_fail@plt+0x6734>
   19324:	ldrb	r0, [r0, #7]
   19328:	cmp	r0, #0
   1932c:	movw	r0, #12876	; 0x324c
   19330:	movt	r0, #3
   19334:	str	r0, [sp, #68]	; 0x44
   19338:	bne	183e0 <__assert_fail@plt+0x6734>
   1933c:	b	183fc <__assert_fail@plt+0x6750>
   19340:	ldrb	r1, [r0, #4]
   19344:	cmp	r1, #48	; 0x30
   19348:	ldrbeq	r1, [r0, #5]
   1934c:	cmpeq	r1, #51	; 0x33
   19350:	bne	184c4 <__assert_fail@plt+0x6818>
   19354:	ldrb	r1, [r0, #6]
   19358:	cmp	r1, #48	; 0x30
   1935c:	ldrbeq	r0, [r0, #7]
   19360:	cmpeq	r0, #0
   19364:	bne	184c4 <__assert_fail@plt+0x6818>
   19368:	movw	r0, #12880	; 0x3250
   1936c:	movt	r0, #3
   19370:	str	r0, [sp, #72]	; 0x48
   19374:	b	184e4 <__assert_fail@plt+0x6838>
   19378:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1937c:	ldr	r2, [sp, #80]	; 0x50
   19380:	b	193b8 <__assert_fail@plt+0x770c>
   19384:	ldr	ip, [fp, #-84]	; 0xffffffac
   19388:	mov	r2, #1
   1938c:	mov	lr, r4
   19390:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19394:	b	193b8 <__assert_fail@plt+0x770c>
   19398:	ldr	r2, [sp, #80]	; 0x50
   1939c:	mov	r7, #2
   193a0:	b	193b8 <__assert_fail@plt+0x770c>
   193a4:	ldr	r6, [sp, #76]	; 0x4c
   193a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   193ac:	ldr	lr, [sp, #84]	; 0x54
   193b0:	ldr	r2, [sp, #80]	; 0x50
   193b4:	mov	r7, #2
   193b8:	mov	r0, #0
   193bc:	ldr	r1, [fp, #12]
   193c0:	tst	r2, #1
   193c4:	mov	r2, r7
   193c8:	mov	r3, lr
   193cc:	str	r0, [sp, #8]
   193d0:	ldr	r0, [sp, #68]	; 0x44
   193d4:	movwne	r2, #4
   193d8:	cmp	r7, #2
   193dc:	movne	r2, r7
   193e0:	str	r2, [sp]
   193e4:	mov	r2, ip
   193e8:	bic	r1, r1, #2
   193ec:	str	r0, [sp, #12]
   193f0:	ldr	r0, [sp, #72]	; 0x48
   193f4:	str	r1, [sp, #4]
   193f8:	mov	r1, sl
   193fc:	str	r0, [sp, #16]
   19400:	mov	r0, r6
   19404:	bl	1816c <__assert_fail@plt+0x64c0>
   19408:	mov	r9, r0
   1940c:	mov	r0, r9
   19410:	sub	sp, fp, #28
   19414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19418:	mov	r0, #5
   1941c:	ldr	r1, [sp, #48]	; 0x30
   19420:	ldr	r2, [fp, #-84]	; 0xffffffac
   19424:	ldr	r3, [sp, #84]	; 0x54
   19428:	str	r0, [sp]
   1942c:	ldr	r0, [fp, #12]
   19430:	str	r0, [sp, #4]
   19434:	ldr	r0, [fp, #16]
   19438:	str	r0, [sp, #8]
   1943c:	ldr	r0, [sp, #68]	; 0x44
   19440:	str	r0, [sp, #12]
   19444:	ldr	r0, [sp, #72]	; 0x48
   19448:	str	r0, [sp, #16]
   1944c:	ldr	r0, [sp, #76]	; 0x4c
   19450:	b	19404 <__assert_fail@plt+0x7758>
   19454:	mov	r0, #0
   19458:	str	r0, [fp, #-72]	; 0xffffffb8
   1945c:	ldr	r1, [sp, #92]	; 0x5c
   19460:	cmp	r1, #0
   19464:	beq	194a4 <__assert_fail@plt+0x77f8>
   19468:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1946c:	ldr	r2, [sp, #76]	; 0x4c
   19470:	tst	r0, #1
   19474:	bne	194a8 <__assert_fail@plt+0x77fc>
   19478:	ldrb	r0, [r1]
   1947c:	cmp	r0, #0
   19480:	beq	194a8 <__assert_fail@plt+0x77fc>
   19484:	add	r1, r1, #1
   19488:	cmp	r9, sl
   1948c:	strbcc	r0, [r2, r9]
   19490:	add	r9, r9, #1
   19494:	ldrb	r0, [r1], #1
   19498:	cmp	r0, #0
   1949c:	bne	19488 <__assert_fail@plt+0x77dc>
   194a0:	b	194a8 <__assert_fail@plt+0x77fc>
   194a4:	ldr	r2, [sp, #76]	; 0x4c
   194a8:	cmp	r9, sl
   194ac:	movcc	r0, #0
   194b0:	strbcc	r0, [r2, r9]
   194b4:	mov	r0, r9
   194b8:	sub	sp, fp, #28
   194bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194c0:	mov	r2, #1
   194c4:	b	19390 <__assert_fail@plt+0x76e4>
   194c8:	ldr	r2, [sp, #80]	; 0x50
   194cc:	mov	r7, #5
   194d0:	b	193b8 <__assert_fail@plt+0x770c>
   194d4:	bl	11c70 <abort@plt>
   194d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194dc:	add	fp, sp, #28
   194e0:	sub	sp, sp, #28
   194e4:	movw	r5, #17048	; 0x4298
   194e8:	cmp	r2, #0
   194ec:	mov	r4, r1
   194f0:	mov	r7, r0
   194f4:	str	r0, [sp, #20]
   194f8:	movt	r5, #4
   194fc:	movne	r5, r2
   19500:	bl	11af0 <__errno_location@plt>
   19504:	mov	sl, r0
   19508:	ldm	r5, {r0, r1}
   1950c:	ldr	r2, [r5, #40]	; 0x28
   19510:	ldr	r3, [r5, #44]	; 0x2c
   19514:	add	r9, r5, #8
   19518:	ldr	r6, [sl]
   1951c:	orr	r8, r1, #1
   19520:	mov	r1, #0
   19524:	str	r6, [sp, #24]
   19528:	stm	sp, {r0, r8, r9}
   1952c:	str	r2, [sp, #12]
   19530:	str	r3, [sp, #16]
   19534:	mov	r0, #0
   19538:	mov	r2, r7
   1953c:	mov	r3, r4
   19540:	mov	r6, r4
   19544:	bl	1816c <__assert_fail@plt+0x64c0>
   19548:	add	r7, r0, #1
   1954c:	mov	r0, r7
   19550:	bl	1a620 <__assert_fail@plt+0x8974>
   19554:	mov	r4, r0
   19558:	ldr	r0, [r5]
   1955c:	ldr	r2, [r5, #44]	; 0x2c
   19560:	ldr	r1, [r5, #40]	; 0x28
   19564:	mov	r3, r6
   19568:	stm	sp, {r0, r8, r9}
   1956c:	str	r2, [sp, #16]
   19570:	str	r1, [sp, #12]
   19574:	mov	r0, r4
   19578:	mov	r1, r7
   1957c:	ldr	r2, [sp, #20]
   19580:	bl	1816c <__assert_fail@plt+0x64c0>
   19584:	ldr	r0, [sp, #24]
   19588:	str	r0, [sl]
   1958c:	mov	r0, r4
   19590:	sub	sp, fp, #28
   19594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1959c:	add	fp, sp, #28
   195a0:	sub	sp, sp, #36	; 0x24
   195a4:	movw	r8, #17048	; 0x4298
   195a8:	cmp	r3, #0
   195ac:	mov	r4, r2
   195b0:	str	r2, [sp, #24]
   195b4:	mov	r5, r1
   195b8:	mov	r6, r0
   195bc:	str	r0, [sp, #20]
   195c0:	movt	r8, #4
   195c4:	movne	r8, r3
   195c8:	bl	11af0 <__errno_location@plt>
   195cc:	str	r0, [sp, #28]
   195d0:	cmp	r4, #0
   195d4:	add	sl, r8, #8
   195d8:	ldm	r8, {r3, r9}
   195dc:	ldr	r7, [r0]
   195e0:	ldr	r1, [r8, #40]	; 0x28
   195e4:	ldr	r2, [r8, #44]	; 0x2c
   195e8:	mov	r0, #0
   195ec:	orreq	r9, r9, #1
   195f0:	str	r7, [sp, #32]
   195f4:	mov	r7, r5
   195f8:	stm	sp, {r3, r9, sl}
   195fc:	str	r1, [sp, #12]
   19600:	str	r2, [sp, #16]
   19604:	mov	r1, #0
   19608:	mov	r2, r6
   1960c:	mov	r3, r5
   19610:	bl	1816c <__assert_fail@plt+0x64c0>
   19614:	add	r4, r0, #1
   19618:	mov	r5, r0
   1961c:	mov	r0, r4
   19620:	bl	1a620 <__assert_fail@plt+0x8974>
   19624:	mov	r6, r0
   19628:	ldr	r0, [r8]
   1962c:	ldr	r2, [r8, #44]	; 0x2c
   19630:	ldr	r1, [r8, #40]	; 0x28
   19634:	mov	r3, r7
   19638:	stm	sp, {r0, r9, sl}
   1963c:	str	r2, [sp, #16]
   19640:	str	r1, [sp, #12]
   19644:	mov	r0, r6
   19648:	mov	r1, r4
   1964c:	ldr	r2, [sp, #20]
   19650:	bl	1816c <__assert_fail@plt+0x64c0>
   19654:	ldr	r0, [sp, #24]
   19658:	ldr	r1, [sp, #32]
   1965c:	ldr	r2, [sp, #28]
   19660:	cmp	r0, #0
   19664:	str	r1, [r2]
   19668:	strne	r5, [r0]
   1966c:	mov	r0, r6
   19670:	sub	sp, fp, #28
   19674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19678:	push	{r4, r5, r6, r7, fp, lr}
   1967c:	add	fp, sp, #16
   19680:	movw	r4, #16872	; 0x41e8
   19684:	movt	r4, #4
   19688:	ldrd	r6, [r4]
   1968c:	cmp	r7, #2
   19690:	blt	196bc <__assert_fail@plt+0x7a10>
   19694:	add	r5, r6, #12
   19698:	mov	r7, #0
   1969c:	ldr	r0, [r5, r7, lsl #3]
   196a0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   196a4:	ldr	r1, [r4, #4]
   196a8:	add	r2, r7, #2
   196ac:	add	r0, r7, #1
   196b0:	mov	r7, r0
   196b4:	cmp	r2, r1
   196b8:	blt	1969c <__assert_fail@plt+0x79f0>
   196bc:	ldr	r0, [r6, #4]
   196c0:	movw	r5, #17096	; 0x42c8
   196c4:	movt	r5, #4
   196c8:	cmp	r0, r5
   196cc:	beq	196e0 <__assert_fail@plt+0x7a34>
   196d0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   196d4:	mov	r0, #256	; 0x100
   196d8:	str	r0, [r4, #8]
   196dc:	str	r5, [r4, #12]
   196e0:	add	r5, r4, #8
   196e4:	cmp	r6, r5
   196e8:	beq	196f8 <__assert_fail@plt+0x7a4c>
   196ec:	mov	r0, r6
   196f0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   196f4:	str	r5, [r4]
   196f8:	mov	r0, #1
   196fc:	str	r0, [r4, #4]
   19700:	pop	{r4, r5, r6, r7, fp, pc}
   19704:	movw	r3, #17048	; 0x4298
   19708:	mvn	r2, #0
   1970c:	movt	r3, #4
   19710:	b	19714 <__assert_fail@plt+0x7a68>
   19714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19718:	add	fp, sp, #28
   1971c:	sub	sp, sp, #44	; 0x2c
   19720:	mov	r7, r3
   19724:	str	r2, [sp, #36]	; 0x24
   19728:	str	r1, [sp, #32]
   1972c:	mov	r5, r0
   19730:	bl	11af0 <__errno_location@plt>
   19734:	cmp	r5, #0
   19738:	blt	1989c <__assert_fail@plt+0x7bf0>
   1973c:	cmn	r5, #-2147483647	; 0x80000001
   19740:	beq	1989c <__assert_fail@plt+0x7bf0>
   19744:	movw	r8, #16872	; 0x41e8
   19748:	mov	r4, r0
   1974c:	movt	r8, #4
   19750:	ldr	r6, [r8]
   19754:	ldr	r1, [r8, #4]
   19758:	ldr	r0, [r0]
   1975c:	str	r4, [sp, #28]
   19760:	cmp	r1, r5
   19764:	str	r0, [sp, #24]
   19768:	ble	19774 <__assert_fail@plt+0x7ac8>
   1976c:	mov	sl, r6
   19770:	b	197d8 <__assert_fail@plt+0x7b2c>
   19774:	mov	r0, #8
   19778:	add	r9, r8, #8
   1977c:	add	r2, r5, #1
   19780:	str	r1, [fp, #-32]	; 0xffffffe0
   19784:	mvn	r3, #-2147483648	; 0x80000000
   19788:	str	r0, [sp]
   1978c:	subs	r0, r6, r9
   19790:	sub	r2, r2, r1
   19794:	sub	r1, fp, #32
   19798:	movne	r0, r6
   1979c:	bl	1a820 <__assert_fail@plt+0x8b74>
   197a0:	str	r0, [r8]
   197a4:	cmp	r6, r9
   197a8:	mov	sl, r0
   197ac:	ldrdeq	r0, [r8, #8]
   197b0:	stmeq	sl, {r0, r1}
   197b4:	ldr	r1, [r8, #4]
   197b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   197bc:	add	r0, sl, r1, lsl #3
   197c0:	sub	r1, r2, r1
   197c4:	lsl	r2, r1, #3
   197c8:	mov	r1, #0
   197cc:	bl	11b2c <memset@plt>
   197d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   197d4:	str	r0, [r8, #4]
   197d8:	mov	r9, sl
   197dc:	ldr	r6, [r9, r5, lsl #3]!
   197e0:	ldr	r4, [r9, #4]!
   197e4:	ldm	r7, {r0, r1}
   197e8:	ldr	r2, [r7, #40]	; 0x28
   197ec:	ldr	r3, [r7, #44]	; 0x2c
   197f0:	orr	r8, r1, #1
   197f4:	add	r1, r7, #8
   197f8:	stm	sp, {r0, r8}
   197fc:	add	r0, sp, #8
   19800:	str	r1, [sp, #20]
   19804:	stm	r0, {r1, r2, r3}
   19808:	mov	r0, r4
   1980c:	mov	r1, r6
   19810:	ldr	r2, [sp, #32]
   19814:	ldr	r3, [sp, #36]	; 0x24
   19818:	bl	1816c <__assert_fail@plt+0x64c0>
   1981c:	cmp	r6, r0
   19820:	bhi	19884 <__assert_fail@plt+0x7bd8>
   19824:	add	r6, r0, #1
   19828:	movw	r0, #17096	; 0x42c8
   1982c:	movt	r0, #4
   19830:	str	r6, [sl, r5, lsl #3]
   19834:	cmp	r4, r0
   19838:	beq	19844 <__assert_fail@plt+0x7b98>
   1983c:	mov	r0, r4
   19840:	bl	1bba8 <__assert_fail@plt+0x9efc>
   19844:	mov	r0, r6
   19848:	bl	1a620 <__assert_fail@plt+0x8974>
   1984c:	str	r0, [r9]
   19850:	mov	r4, r0
   19854:	add	r3, sp, #8
   19858:	ldr	r0, [r7]
   1985c:	ldr	r1, [r7, #40]	; 0x28
   19860:	ldr	r2, [r7, #44]	; 0x2c
   19864:	stm	sp, {r0, r8}
   19868:	ldr	r0, [sp, #20]
   1986c:	stm	r3, {r0, r1, r2}
   19870:	mov	r0, r4
   19874:	mov	r1, r6
   19878:	ldr	r2, [sp, #32]
   1987c:	ldr	r3, [sp, #36]	; 0x24
   19880:	bl	1816c <__assert_fail@plt+0x64c0>
   19884:	ldr	r1, [sp, #24]
   19888:	ldr	r0, [sp, #28]
   1988c:	str	r1, [r0]
   19890:	mov	r0, r4
   19894:	sub	sp, fp, #28
   19898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1989c:	bl	11c70 <abort@plt>
   198a0:	movw	r3, #17048	; 0x4298
   198a4:	movt	r3, #4
   198a8:	b	19714 <__assert_fail@plt+0x7a68>
   198ac:	movw	r3, #17048	; 0x4298
   198b0:	mov	r1, r0
   198b4:	mov	r0, #0
   198b8:	mvn	r2, #0
   198bc:	movt	r3, #4
   198c0:	b	19714 <__assert_fail@plt+0x7a68>
   198c4:	movw	r3, #17048	; 0x4298
   198c8:	mov	r2, r1
   198cc:	mov	r1, r0
   198d0:	mov	r0, #0
   198d4:	movt	r3, #4
   198d8:	b	19714 <__assert_fail@plt+0x7a68>
   198dc:	push	{fp, lr}
   198e0:	mov	fp, sp
   198e4:	sub	sp, sp, #48	; 0x30
   198e8:	vmov.i32	q8, #0	; 0x00000000
   198ec:	mov	ip, #32
   198f0:	mov	r3, sp
   198f4:	mov	lr, r2
   198f8:	cmp	r1, #10
   198fc:	add	r2, r3, #16
   19900:	vst1.64	{d16-d17}, [r3], ip
   19904:	vst1.64	{d16-d17}, [r3]
   19908:	vst1.64	{d16-d17}, [r2]
   1990c:	beq	1992c <__assert_fail@plt+0x7c80>
   19910:	str	r1, [sp]
   19914:	mov	r3, sp
   19918:	mov	r1, lr
   1991c:	mvn	r2, #0
   19920:	bl	19714 <__assert_fail@plt+0x7a68>
   19924:	mov	sp, fp
   19928:	pop	{fp, pc}
   1992c:	bl	11c70 <abort@plt>
   19930:	push	{r4, sl, fp, lr}
   19934:	add	fp, sp, #8
   19938:	sub	sp, sp, #48	; 0x30
   1993c:	mov	ip, r3
   19940:	mov	r3, sp
   19944:	vmov.i32	q8, #0	; 0x00000000
   19948:	mov	lr, #32
   1994c:	cmp	r1, #10
   19950:	add	r4, r3, #16
   19954:	vst1.64	{d16-d17}, [r3], lr
   19958:	vst1.64	{d16-d17}, [r3]
   1995c:	vst1.64	{d16-d17}, [r4]
   19960:	beq	19980 <__assert_fail@plt+0x7cd4>
   19964:	str	r1, [sp]
   19968:	mov	r1, r2
   1996c:	mov	r3, sp
   19970:	mov	r2, ip
   19974:	bl	19714 <__assert_fail@plt+0x7a68>
   19978:	sub	sp, fp, #8
   1997c:	pop	{r4, sl, fp, pc}
   19980:	bl	11c70 <abort@plt>
   19984:	push	{fp, lr}
   19988:	mov	fp, sp
   1998c:	sub	sp, sp, #48	; 0x30
   19990:	mov	r3, sp
   19994:	vmov.i32	q8, #0	; 0x00000000
   19998:	mov	ip, #32
   1999c:	cmp	r0, #10
   199a0:	add	r2, r3, #16
   199a4:	vst1.64	{d16-d17}, [r3], ip
   199a8:	vst1.64	{d16-d17}, [r3]
   199ac:	vst1.64	{d16-d17}, [r2]
   199b0:	beq	199d0 <__assert_fail@plt+0x7d24>
   199b4:	str	r0, [sp]
   199b8:	mov	r3, sp
   199bc:	mov	r0, #0
   199c0:	mvn	r2, #0
   199c4:	bl	19714 <__assert_fail@plt+0x7a68>
   199c8:	mov	sp, fp
   199cc:	pop	{fp, pc}
   199d0:	bl	11c70 <abort@plt>
   199d4:	push	{fp, lr}
   199d8:	mov	fp, sp
   199dc:	sub	sp, sp, #48	; 0x30
   199e0:	mov	r3, sp
   199e4:	vmov.i32	q8, #0	; 0x00000000
   199e8:	mov	ip, #32
   199ec:	cmp	r0, #10
   199f0:	add	lr, r3, #16
   199f4:	vst1.64	{d16-d17}, [r3], ip
   199f8:	vst1.64	{d16-d17}, [r3]
   199fc:	vst1.64	{d16-d17}, [lr]
   19a00:	beq	19a1c <__assert_fail@plt+0x7d70>
   19a04:	str	r0, [sp]
   19a08:	mov	r3, sp
   19a0c:	mov	r0, #0
   19a10:	bl	19714 <__assert_fail@plt+0x7a68>
   19a14:	mov	sp, fp
   19a18:	pop	{fp, pc}
   19a1c:	bl	11c70 <abort@plt>
   19a20:	push	{r4, sl, fp, lr}
   19a24:	add	fp, sp, #8
   19a28:	sub	sp, sp, #48	; 0x30
   19a2c:	mov	lr, r0
   19a30:	movw	r0, #17048	; 0x4298
   19a34:	mov	r3, #32
   19a38:	mov	ip, r1
   19a3c:	mov	r4, #1
   19a40:	movt	r0, #4
   19a44:	add	r1, r0, #16
   19a48:	vld1.64	{d16-d17}, [r0], r3
   19a4c:	mov	r3, sp
   19a50:	vld1.64	{d18-d19}, [r1]
   19a54:	add	r1, r3, #16
   19a58:	vld1.64	{d20-d21}, [r0]
   19a5c:	add	r0, r3, #32
   19a60:	vst1.64	{d18-d19}, [r1]
   19a64:	mov	r1, r3
   19a68:	vst1.64	{d20-d21}, [r0]
   19a6c:	mov	r0, #28
   19a70:	and	r0, r0, r2, lsr #3
   19a74:	and	r2, r2, #31
   19a78:	vst1.64	{d16-d17}, [r1], r0
   19a7c:	ldr	r0, [r1, #8]
   19a80:	bic	r4, r4, r0, lsr r2
   19a84:	eor	r0, r0, r4, lsl r2
   19a88:	mov	r2, ip
   19a8c:	str	r0, [r1, #8]
   19a90:	mov	r0, #0
   19a94:	mov	r1, lr
   19a98:	bl	19714 <__assert_fail@plt+0x7a68>
   19a9c:	sub	sp, fp, #8
   19aa0:	pop	{r4, sl, fp, pc}
   19aa4:	push	{fp, lr}
   19aa8:	mov	fp, sp
   19aac:	sub	sp, sp, #48	; 0x30
   19ab0:	mov	ip, r0
   19ab4:	movw	r0, #17048	; 0x4298
   19ab8:	mov	r3, #32
   19abc:	movt	r0, #4
   19ac0:	add	r2, r0, #16
   19ac4:	vld1.64	{d16-d17}, [r0], r3
   19ac8:	mov	r3, sp
   19acc:	vld1.64	{d18-d19}, [r2]
   19ad0:	add	r2, r3, #16
   19ad4:	vld1.64	{d20-d21}, [r0]
   19ad8:	add	r0, r3, #32
   19adc:	vst1.64	{d18-d19}, [r2]
   19ae0:	mov	r2, r3
   19ae4:	vst1.64	{d20-d21}, [r0]
   19ae8:	mov	r0, #28
   19aec:	and	r0, r0, r1, lsr #3
   19af0:	and	r1, r1, #31
   19af4:	vst1.64	{d16-d17}, [r2], r0
   19af8:	mov	r0, #1
   19afc:	ldr	lr, [r2, #8]
   19b00:	bic	r0, r0, lr, lsr r1
   19b04:	eor	r0, lr, r0, lsl r1
   19b08:	mov	r1, ip
   19b0c:	str	r0, [r2, #8]
   19b10:	mov	r0, #0
   19b14:	mvn	r2, #0
   19b18:	bl	19714 <__assert_fail@plt+0x7a68>
   19b1c:	mov	sp, fp
   19b20:	pop	{fp, pc}
   19b24:	push	{fp, lr}
   19b28:	mov	fp, sp
   19b2c:	sub	sp, sp, #48	; 0x30
   19b30:	movw	r2, #17048	; 0x4298
   19b34:	mov	r3, #32
   19b38:	mov	r1, r0
   19b3c:	movt	r2, #4
   19b40:	add	r0, r2, #16
   19b44:	vld1.64	{d16-d17}, [r2], r3
   19b48:	mov	r3, sp
   19b4c:	vld1.64	{d18-d19}, [r0]
   19b50:	add	r0, r3, #16
   19b54:	vld1.64	{d20-d21}, [r2]
   19b58:	mov	r2, r3
   19b5c:	vst1.64	{d18-d19}, [r0]
   19b60:	add	r0, r3, #32
   19b64:	vst1.64	{d20-d21}, [r0]
   19b68:	mov	r0, #12
   19b6c:	vst1.64	{d16-d17}, [r2], r0
   19b70:	ldr	r0, [r2]
   19b74:	orr	r0, r0, #67108864	; 0x4000000
   19b78:	str	r0, [r2]
   19b7c:	mov	r0, #0
   19b80:	mvn	r2, #0
   19b84:	bl	19714 <__assert_fail@plt+0x7a68>
   19b88:	mov	sp, fp
   19b8c:	pop	{fp, pc}
   19b90:	push	{fp, lr}
   19b94:	mov	fp, sp
   19b98:	sub	sp, sp, #48	; 0x30
   19b9c:	mov	ip, r1
   19ba0:	mov	r1, r0
   19ba4:	movw	r0, #17048	; 0x4298
   19ba8:	mov	r3, #32
   19bac:	movt	r0, #4
   19bb0:	add	r2, r0, #16
   19bb4:	vld1.64	{d16-d17}, [r0], r3
   19bb8:	mov	r3, sp
   19bbc:	vld1.64	{d18-d19}, [r2]
   19bc0:	add	r2, r3, #16
   19bc4:	vld1.64	{d20-d21}, [r0]
   19bc8:	add	r0, r3, #32
   19bcc:	vst1.64	{d18-d19}, [r2]
   19bd0:	mov	r2, r3
   19bd4:	vst1.64	{d20-d21}, [r0]
   19bd8:	mov	r0, #12
   19bdc:	vst1.64	{d16-d17}, [r2], r0
   19be0:	ldr	r0, [r2]
   19be4:	orr	r0, r0, #67108864	; 0x4000000
   19be8:	str	r0, [r2]
   19bec:	mov	r0, #0
   19bf0:	mov	r2, ip
   19bf4:	bl	19714 <__assert_fail@plt+0x7a68>
   19bf8:	mov	sp, fp
   19bfc:	pop	{fp, pc}
   19c00:	push	{r4, sl, fp, lr}
   19c04:	add	fp, sp, #8
   19c08:	sub	sp, sp, #96	; 0x60
   19c0c:	mov	ip, r2
   19c10:	mov	r2, sp
   19c14:	vmov.i32	q8, #0	; 0x00000000
   19c18:	mov	r4, #28
   19c1c:	cmp	r1, #10
   19c20:	mov	r3, r2
   19c24:	add	lr, r2, #16
   19c28:	vst1.64	{d16-d17}, [r3], r4
   19c2c:	vst1.64	{d16-d17}, [lr]
   19c30:	vst1.32	{d16-d17}, [r3]
   19c34:	beq	19c84 <__assert_fail@plt+0x7fd8>
   19c38:	vld1.64	{d16-d17}, [r2], r4
   19c3c:	vld1.64	{d18-d19}, [lr]
   19c40:	add	r3, sp, #48	; 0x30
   19c44:	add	r4, r3, #4
   19c48:	vld1.32	{d20-d21}, [r2]
   19c4c:	add	r2, r3, #20
   19c50:	vst1.32	{d16-d17}, [r4]
   19c54:	vst1.32	{d18-d19}, [r2]
   19c58:	add	r2, r3, #32
   19c5c:	vst1.32	{d20-d21}, [r2]
   19c60:	str	r1, [sp, #48]	; 0x30
   19c64:	mvn	r2, #0
   19c68:	ldr	r1, [sp, #60]	; 0x3c
   19c6c:	orr	r1, r1, #67108864	; 0x4000000
   19c70:	str	r1, [sp, #60]	; 0x3c
   19c74:	mov	r1, ip
   19c78:	bl	19714 <__assert_fail@plt+0x7a68>
   19c7c:	sub	sp, fp, #8
   19c80:	pop	{r4, sl, fp, pc}
   19c84:	bl	11c70 <abort@plt>
   19c88:	push	{r4, r5, fp, lr}
   19c8c:	add	fp, sp, #8
   19c90:	sub	sp, sp, #48	; 0x30
   19c94:	mov	ip, r3
   19c98:	movw	r3, #17048	; 0x4298
   19c9c:	mov	lr, #32
   19ca0:	cmp	r1, #0
   19ca4:	mov	r5, sp
   19ca8:	movt	r3, #4
   19cac:	cmpne	r2, #0
   19cb0:	add	r4, r3, #16
   19cb4:	vld1.64	{d16-d17}, [r3], lr
   19cb8:	vld1.64	{d18-d19}, [r4]
   19cbc:	add	r4, r5, #16
   19cc0:	vld1.64	{d20-d21}, [r3]
   19cc4:	vst1.64	{d16-d17}, [r5], lr
   19cc8:	mov	r3, #10
   19ccc:	vst1.64	{d18-d19}, [r4]
   19cd0:	vst1.64	{d20-d21}, [r5]
   19cd4:	str	r3, [sp]
   19cd8:	bne	19ce0 <__assert_fail@plt+0x8034>
   19cdc:	bl	11c70 <abort@plt>
   19ce0:	str	r2, [sp, #44]	; 0x2c
   19ce4:	str	r1, [sp, #40]	; 0x28
   19ce8:	mov	r3, sp
   19cec:	mov	r1, ip
   19cf0:	mvn	r2, #0
   19cf4:	bl	19714 <__assert_fail@plt+0x7a68>
   19cf8:	sub	sp, fp, #8
   19cfc:	pop	{r4, r5, fp, pc}
   19d00:	push	{r4, r5, fp, lr}
   19d04:	add	fp, sp, #8
   19d08:	sub	sp, sp, #48	; 0x30
   19d0c:	mov	lr, r3
   19d10:	movw	r3, #17048	; 0x4298
   19d14:	mov	ip, #32
   19d18:	cmp	r1, #0
   19d1c:	mov	r5, sp
   19d20:	movt	r3, #4
   19d24:	cmpne	r2, #0
   19d28:	add	r4, r3, #16
   19d2c:	vld1.64	{d16-d17}, [r3], ip
   19d30:	vld1.64	{d18-d19}, [r4]
   19d34:	add	r4, r5, #16
   19d38:	vld1.64	{d20-d21}, [r3]
   19d3c:	vst1.64	{d16-d17}, [r5], ip
   19d40:	mov	r3, #10
   19d44:	vst1.64	{d18-d19}, [r4]
   19d48:	vst1.64	{d20-d21}, [r5]
   19d4c:	str	r3, [sp]
   19d50:	bne	19d58 <__assert_fail@plt+0x80ac>
   19d54:	bl	11c70 <abort@plt>
   19d58:	ldr	ip, [fp, #8]
   19d5c:	str	r2, [sp, #44]	; 0x2c
   19d60:	str	r1, [sp, #40]	; 0x28
   19d64:	mov	r3, sp
   19d68:	mov	r1, lr
   19d6c:	mov	r2, ip
   19d70:	bl	19714 <__assert_fail@plt+0x7a68>
   19d74:	sub	sp, fp, #8
   19d78:	pop	{r4, r5, fp, pc}
   19d7c:	push	{r4, sl, fp, lr}
   19d80:	add	fp, sp, #8
   19d84:	sub	sp, sp, #48	; 0x30
   19d88:	mov	ip, r2
   19d8c:	movw	r2, #17048	; 0x4298
   19d90:	mov	lr, #32
   19d94:	cmp	r0, #0
   19d98:	mov	r4, sp
   19d9c:	movt	r2, #4
   19da0:	cmpne	r1, #0
   19da4:	add	r3, r2, #16
   19da8:	vld1.64	{d16-d17}, [r2], lr
   19dac:	vld1.64	{d18-d19}, [r3]
   19db0:	add	r3, r4, #16
   19db4:	vld1.64	{d20-d21}, [r2]
   19db8:	vst1.64	{d16-d17}, [r4], lr
   19dbc:	mov	r2, #10
   19dc0:	vst1.64	{d18-d19}, [r3]
   19dc4:	vst1.64	{d20-d21}, [r4]
   19dc8:	str	r2, [sp]
   19dcc:	bne	19dd4 <__assert_fail@plt+0x8128>
   19dd0:	bl	11c70 <abort@plt>
   19dd4:	str	r1, [sp, #44]	; 0x2c
   19dd8:	str	r0, [sp, #40]	; 0x28
   19ddc:	mov	r3, sp
   19de0:	mov	r0, #0
   19de4:	mov	r1, ip
   19de8:	mvn	r2, #0
   19dec:	bl	19714 <__assert_fail@plt+0x7a68>
   19df0:	sub	sp, fp, #8
   19df4:	pop	{r4, sl, fp, pc}
   19df8:	push	{r4, r5, fp, lr}
   19dfc:	add	fp, sp, #8
   19e00:	sub	sp, sp, #48	; 0x30
   19e04:	mov	lr, r2
   19e08:	movw	r2, #17048	; 0x4298
   19e0c:	mov	ip, r3
   19e10:	mov	r3, #32
   19e14:	cmp	r0, #0
   19e18:	mov	r5, sp
   19e1c:	movt	r2, #4
   19e20:	cmpne	r1, #0
   19e24:	add	r4, r2, #16
   19e28:	vld1.64	{d16-d17}, [r2], r3
   19e2c:	vld1.64	{d18-d19}, [r4]
   19e30:	add	r4, r5, #16
   19e34:	vld1.64	{d20-d21}, [r2]
   19e38:	vst1.64	{d16-d17}, [r5], r3
   19e3c:	mov	r2, #10
   19e40:	vst1.64	{d18-d19}, [r4]
   19e44:	vst1.64	{d20-d21}, [r5]
   19e48:	str	r2, [sp]
   19e4c:	bne	19e54 <__assert_fail@plt+0x81a8>
   19e50:	bl	11c70 <abort@plt>
   19e54:	str	r1, [sp, #44]	; 0x2c
   19e58:	str	r0, [sp, #40]	; 0x28
   19e5c:	mov	r3, sp
   19e60:	mov	r0, #0
   19e64:	mov	r1, lr
   19e68:	mov	r2, ip
   19e6c:	bl	19714 <__assert_fail@plt+0x7a68>
   19e70:	sub	sp, fp, #8
   19e74:	pop	{r4, r5, fp, pc}
   19e78:	movw	r3, #16824	; 0x41b8
   19e7c:	movt	r3, #4
   19e80:	b	19714 <__assert_fail@plt+0x7a68>
   19e84:	movw	r3, #16824	; 0x41b8
   19e88:	mov	r2, r1
   19e8c:	mov	r1, r0
   19e90:	mov	r0, #0
   19e94:	movt	r3, #4
   19e98:	b	19714 <__assert_fail@plt+0x7a68>
   19e9c:	movw	r3, #16824	; 0x41b8
   19ea0:	mvn	r2, #0
   19ea4:	movt	r3, #4
   19ea8:	b	19714 <__assert_fail@plt+0x7a68>
   19eac:	movw	r3, #16824	; 0x41b8
   19eb0:	mov	r1, r0
   19eb4:	mov	r0, #0
   19eb8:	mvn	r2, #0
   19ebc:	movt	r3, #4
   19ec0:	b	19714 <__assert_fail@plt+0x7a68>
   19ec4:	push	{r4, r5, fp, lr}
   19ec8:	add	fp, sp, #8
   19ecc:	mov	r4, r1
   19ed0:	mov	r1, #0
   19ed4:	mov	r5, r0
   19ed8:	mov	r2, r4
   19edc:	bl	11b68 <memchr@plt>
   19ee0:	rsb	r1, r5, #1
   19ee4:	cmp	r0, #0
   19ee8:	addne	r4, r1, r0
   19eec:	mov	r0, r4
   19ef0:	pop	{r4, r5, fp, pc}
   19ef4:	push	{r4, r5, r6, r7, fp, lr}
   19ef8:	add	fp, sp, #16
   19efc:	mov	r4, r0
   19f00:	cmp	r0, #2
   19f04:	movhi	r0, r4
   19f08:	pophi	{r4, r5, r6, r7, fp, pc}
   19f0c:	mov	r0, r4
   19f10:	bl	31934 <__assert_fail@plt+0x1fc88>
   19f14:	mov	r5, r0
   19f18:	bl	11af0 <__errno_location@plt>
   19f1c:	ldr	r7, [r0]
   19f20:	mov	r6, r0
   19f24:	mov	r0, r4
   19f28:	bl	11c88 <close@plt>
   19f2c:	mov	r0, r5
   19f30:	str	r7, [r6]
   19f34:	pop	{r4, r5, r6, r7, fp, pc}
   19f38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19f3c:	add	fp, sp, #24
   19f40:	sub	sp, sp, #32
   19f44:	ldr	r7, [fp, #12]
   19f48:	ldr	r6, [fp, #8]
   19f4c:	mov	r4, r2
   19f50:	mov	r5, r0
   19f54:	cmp	r1, #0
   19f58:	beq	19f78 <__assert_fail@plt+0x82cc>
   19f5c:	mov	r2, r1
   19f60:	movw	r1, #12968	; 0x32a8
   19f64:	str	r3, [sp]
   19f68:	mov	r0, r5
   19f6c:	mov	r3, r4
   19f70:	movt	r1, #3
   19f74:	b	19f88 <__assert_fail@plt+0x82dc>
   19f78:	movw	r1, #12980	; 0x32b4
   19f7c:	mov	r0, r5
   19f80:	mov	r2, r4
   19f84:	movt	r1, #3
   19f88:	bl	11ad8 <fprintf@plt>
   19f8c:	movw	r1, #12987	; 0x32bb
   19f90:	mov	r0, #0
   19f94:	mov	r2, #5
   19f98:	movt	r1, #3
   19f9c:	bl	11940 <dcgettext@plt>
   19fa0:	movw	r1, #13683	; 0x3573
   19fa4:	mov	r2, r0
   19fa8:	mov	r0, r5
   19fac:	movw	r3, #2022	; 0x7e6
   19fb0:	movt	r1, #3
   19fb4:	bl	11ad8 <fprintf@plt>
   19fb8:	mov	r0, #10
   19fbc:	mov	r1, r5
   19fc0:	bl	11bc8 <fputc@plt>
   19fc4:	movw	r1, #12991	; 0x32bf
   19fc8:	mov	r0, #0
   19fcc:	mov	r2, #5
   19fd0:	movt	r1, #3
   19fd4:	bl	11940 <dcgettext@plt>
   19fd8:	movw	r2, #13162	; 0x336a
   19fdc:	mov	r1, r0
   19fe0:	mov	r0, r5
   19fe4:	movt	r2, #3
   19fe8:	bl	11ad8 <fprintf@plt>
   19fec:	mov	r0, #10
   19ff0:	mov	r1, r5
   19ff4:	bl	11bc8 <fputc@plt>
   19ff8:	cmp	r7, #9
   19ffc:	bhi	1a038 <__assert_fail@plt+0x838c>
   1a000:	add	r0, pc, #0
   1a004:	ldr	pc, [r0, r7, lsl #2]
   1a008:	andeq	sl, r1, r0, lsr r0
   1a00c:	andeq	sl, r1, r4, asr #32
   1a010:	andeq	sl, r1, r0, ror r0
   1a014:	muleq	r1, ip, r0
   1a018:	ldrdeq	sl, [r1], -r0
   1a01c:	andeq	sl, r1, r8, lsl #2
   1a020:	andeq	sl, r1, r8, asr #2
   1a024:	muleq	r1, r0, r1
   1a028:	andeq	sl, r1, ip, lsr #4
   1a02c:	ldrdeq	sl, [r1], -r4
   1a030:	sub	sp, fp, #24
   1a034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a038:	movw	r1, #13515	; 0x34cb
   1a03c:	movt	r1, #3
   1a040:	b	1a1dc <__assert_fail@plt+0x8530>
   1a044:	movw	r1, #13196	; 0x338c
   1a048:	mov	r0, #0
   1a04c:	mov	r2, #5
   1a050:	movt	r1, #3
   1a054:	bl	11940 <dcgettext@plt>
   1a058:	ldr	r2, [r6]
   1a05c:	mov	r1, r0
   1a060:	mov	r0, r5
   1a064:	sub	sp, fp, #24
   1a068:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a06c:	b	11ad8 <fprintf@plt>
   1a070:	movw	r1, #13212	; 0x339c
   1a074:	mov	r0, #0
   1a078:	mov	r2, #5
   1a07c:	movt	r1, #3
   1a080:	bl	11940 <dcgettext@plt>
   1a084:	ldm	r6, {r2, r3}
   1a088:	mov	r1, r0
   1a08c:	mov	r0, r5
   1a090:	sub	sp, fp, #24
   1a094:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a098:	b	11ad8 <fprintf@plt>
   1a09c:	movw	r1, #13235	; 0x33b3
   1a0a0:	mov	r0, #0
   1a0a4:	mov	r2, #5
   1a0a8:	movt	r1, #3
   1a0ac:	bl	11940 <dcgettext@plt>
   1a0b0:	mov	r1, r0
   1a0b4:	ldm	r6, {r2, r3}
   1a0b8:	ldr	r0, [r6, #8]
   1a0bc:	str	r0, [sp]
   1a0c0:	mov	r0, r5
   1a0c4:	bl	11ad8 <fprintf@plt>
   1a0c8:	sub	sp, fp, #24
   1a0cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a0d0:	movw	r1, #13263	; 0x33cf
   1a0d4:	mov	r0, #0
   1a0d8:	mov	r2, #5
   1a0dc:	movt	r1, #3
   1a0e0:	bl	11940 <dcgettext@plt>
   1a0e4:	ldm	r6, {r2, r3}
   1a0e8:	mov	r1, r0
   1a0ec:	ldr	r0, [r6, #8]
   1a0f0:	ldr	r7, [r6, #12]
   1a0f4:	stm	sp, {r0, r7}
   1a0f8:	mov	r0, r5
   1a0fc:	bl	11ad8 <fprintf@plt>
   1a100:	sub	sp, fp, #24
   1a104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a108:	movw	r1, #13295	; 0x33ef
   1a10c:	mov	r0, #0
   1a110:	mov	r2, #5
   1a114:	movt	r1, #3
   1a118:	bl	11940 <dcgettext@plt>
   1a11c:	ldm	r6, {r2, r3}
   1a120:	mov	r1, r0
   1a124:	ldr	r0, [r6, #8]
   1a128:	ldr	r7, [r6, #12]
   1a12c:	ldr	r6, [r6, #16]
   1a130:	stm	sp, {r0, r7}
   1a134:	str	r6, [sp, #8]
   1a138:	mov	r0, r5
   1a13c:	bl	11ad8 <fprintf@plt>
   1a140:	sub	sp, fp, #24
   1a144:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a148:	movw	r1, #13331	; 0x3413
   1a14c:	mov	r0, #0
   1a150:	mov	r2, #5
   1a154:	movt	r1, #3
   1a158:	bl	11940 <dcgettext@plt>
   1a15c:	ldm	r6, {r2, r3}
   1a160:	mov	r1, r0
   1a164:	ldr	r0, [r6, #8]
   1a168:	ldr	r7, [r6, #12]
   1a16c:	ldr	r4, [r6, #16]
   1a170:	ldr	r6, [r6, #20]
   1a174:	stm	sp, {r0, r7}
   1a178:	str	r4, [sp, #8]
   1a17c:	str	r6, [sp, #12]
   1a180:	mov	r0, r5
   1a184:	bl	11ad8 <fprintf@plt>
   1a188:	sub	sp, fp, #24
   1a18c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a190:	movw	r1, #13371	; 0x343b
   1a194:	mov	r0, #0
   1a198:	mov	r2, #5
   1a19c:	movt	r1, #3
   1a1a0:	bl	11940 <dcgettext@plt>
   1a1a4:	ldm	r6, {r2, r3}
   1a1a8:	mov	ip, r0
   1a1ac:	ldr	r0, [r6, #8]
   1a1b0:	ldr	r7, [r6, #12]
   1a1b4:	ldr	r4, [r6, #16]
   1a1b8:	ldr	r1, [r6, #20]
   1a1bc:	ldr	r6, [r6, #24]
   1a1c0:	stm	sp, {r0, r7}
   1a1c4:	str	r4, [sp, #8]
   1a1c8:	str	r1, [sp, #12]
   1a1cc:	str	r6, [sp, #16]
   1a1d0:	b	1a274 <__assert_fail@plt+0x85c8>
   1a1d4:	movw	r1, #13463	; 0x3497
   1a1d8:	movt	r1, #3
   1a1dc:	mov	r0, #0
   1a1e0:	mov	r2, #5
   1a1e4:	bl	11940 <dcgettext@plt>
   1a1e8:	mov	ip, r0
   1a1ec:	ldr	r2, [r6]
   1a1f0:	ldr	r3, [r6, #4]
   1a1f4:	ldr	r0, [r6, #8]
   1a1f8:	ldr	r7, [r6, #12]
   1a1fc:	ldr	r4, [r6, #16]
   1a200:	ldr	r1, [r6, #20]
   1a204:	ldr	lr, [r6, #24]
   1a208:	ldr	r8, [r6, #28]
   1a20c:	ldr	r6, [r6, #32]
   1a210:	stm	sp, {r0, r7}
   1a214:	str	r4, [sp, #8]
   1a218:	str	r1, [sp, #12]
   1a21c:	str	lr, [sp, #16]
   1a220:	str	r8, [sp, #20]
   1a224:	str	r6, [sp, #24]
   1a228:	b	1a274 <__assert_fail@plt+0x85c8>
   1a22c:	movw	r1, #13415	; 0x3467
   1a230:	mov	r0, #0
   1a234:	mov	r2, #5
   1a238:	movt	r1, #3
   1a23c:	bl	11940 <dcgettext@plt>
   1a240:	ldm	r6, {r2, r3}
   1a244:	mov	ip, r0
   1a248:	ldr	r0, [r6, #8]
   1a24c:	ldr	r7, [r6, #12]
   1a250:	ldr	r4, [r6, #16]
   1a254:	ldr	r1, [r6, #20]
   1a258:	ldr	lr, [r6, #24]
   1a25c:	ldr	r6, [r6, #28]
   1a260:	stm	sp, {r0, r7}
   1a264:	str	r4, [sp, #8]
   1a268:	str	r1, [sp, #12]
   1a26c:	str	lr, [sp, #16]
   1a270:	str	r6, [sp, #20]
   1a274:	mov	r0, r5
   1a278:	mov	r1, ip
   1a27c:	bl	11ad8 <fprintf@plt>
   1a280:	sub	sp, fp, #24
   1a284:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a288:	push	{r4, sl, fp, lr}
   1a28c:	add	fp, sp, #8
   1a290:	sub	sp, sp, #8
   1a294:	ldr	ip, [fp, #8]
   1a298:	mov	lr, #0
   1a29c:	ldr	r4, [ip, lr, lsl #2]
   1a2a0:	add	lr, lr, #1
   1a2a4:	cmp	r4, #0
   1a2a8:	bne	1a29c <__assert_fail@plt+0x85f0>
   1a2ac:	sub	r4, lr, #1
   1a2b0:	str	ip, [sp]
   1a2b4:	str	r4, [sp, #4]
   1a2b8:	bl	19f38 <__assert_fail@plt+0x828c>
   1a2bc:	sub	sp, fp, #8
   1a2c0:	pop	{r4, sl, fp, pc}
   1a2c4:	push	{fp, lr}
   1a2c8:	mov	fp, sp
   1a2cc:	sub	sp, sp, #48	; 0x30
   1a2d0:	ldr	ip, [fp, #8]
   1a2d4:	ldr	lr, [ip]
   1a2d8:	cmp	lr, #0
   1a2dc:	str	lr, [sp, #8]
   1a2e0:	beq	1a37c <__assert_fail@plt+0x86d0>
   1a2e4:	ldr	lr, [ip, #4]
   1a2e8:	cmp	lr, #0
   1a2ec:	str	lr, [sp, #12]
   1a2f0:	beq	1a384 <__assert_fail@plt+0x86d8>
   1a2f4:	ldr	lr, [ip, #8]
   1a2f8:	cmp	lr, #0
   1a2fc:	str	lr, [sp, #16]
   1a300:	beq	1a38c <__assert_fail@plt+0x86e0>
   1a304:	ldr	lr, [ip, #12]
   1a308:	cmp	lr, #0
   1a30c:	str	lr, [sp, #20]
   1a310:	beq	1a394 <__assert_fail@plt+0x86e8>
   1a314:	ldr	lr, [ip, #16]
   1a318:	cmp	lr, #0
   1a31c:	str	lr, [sp, #24]
   1a320:	beq	1a39c <__assert_fail@plt+0x86f0>
   1a324:	ldr	lr, [ip, #20]
   1a328:	cmp	lr, #0
   1a32c:	str	lr, [sp, #28]
   1a330:	beq	1a3a4 <__assert_fail@plt+0x86f8>
   1a334:	ldr	lr, [ip, #24]
   1a338:	cmp	lr, #0
   1a33c:	str	lr, [sp, #32]
   1a340:	beq	1a3ac <__assert_fail@plt+0x8700>
   1a344:	ldr	lr, [ip, #28]
   1a348:	cmp	lr, #0
   1a34c:	str	lr, [sp, #36]	; 0x24
   1a350:	beq	1a3b4 <__assert_fail@plt+0x8708>
   1a354:	ldr	lr, [ip, #32]
   1a358:	cmp	lr, #0
   1a35c:	str	lr, [sp, #40]	; 0x28
   1a360:	beq	1a3bc <__assert_fail@plt+0x8710>
   1a364:	ldr	lr, [ip, #36]	; 0x24
   1a368:	mov	ip, #10
   1a36c:	cmp	lr, #0
   1a370:	str	lr, [sp, #44]	; 0x2c
   1a374:	movweq	ip, #9
   1a378:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a37c:	mov	ip, #0
   1a380:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a384:	mov	ip, #1
   1a388:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a38c:	mov	ip, #2
   1a390:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a394:	mov	ip, #3
   1a398:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a39c:	mov	ip, #4
   1a3a0:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a3a4:	mov	ip, #5
   1a3a8:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a3ac:	mov	ip, #6
   1a3b0:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a3b4:	mov	ip, #7
   1a3b8:	b	1a3c0 <__assert_fail@plt+0x8714>
   1a3bc:	mov	ip, #8
   1a3c0:	add	lr, sp, #8
   1a3c4:	str	ip, [sp, #4]
   1a3c8:	str	lr, [sp]
   1a3cc:	bl	19f38 <__assert_fail@plt+0x828c>
   1a3d0:	mov	sp, fp
   1a3d4:	pop	{fp, pc}
   1a3d8:	push	{fp, lr}
   1a3dc:	mov	fp, sp
   1a3e0:	sub	sp, sp, #56	; 0x38
   1a3e4:	add	ip, fp, #8
   1a3e8:	str	ip, [sp, #12]
   1a3ec:	ldr	lr, [fp, #8]
   1a3f0:	cmp	lr, #0
   1a3f4:	str	lr, [sp, #16]
   1a3f8:	beq	1a494 <__assert_fail@plt+0x87e8>
   1a3fc:	ldr	lr, [ip, #4]
   1a400:	cmp	lr, #0
   1a404:	str	lr, [sp, #20]
   1a408:	beq	1a49c <__assert_fail@plt+0x87f0>
   1a40c:	ldr	lr, [ip, #8]
   1a410:	cmp	lr, #0
   1a414:	str	lr, [sp, #24]
   1a418:	beq	1a4a4 <__assert_fail@plt+0x87f8>
   1a41c:	ldr	lr, [ip, #12]
   1a420:	cmp	lr, #0
   1a424:	str	lr, [sp, #28]
   1a428:	beq	1a4ac <__assert_fail@plt+0x8800>
   1a42c:	ldr	lr, [ip, #16]
   1a430:	cmp	lr, #0
   1a434:	str	lr, [sp, #32]
   1a438:	beq	1a4b4 <__assert_fail@plt+0x8808>
   1a43c:	ldr	lr, [ip, #20]
   1a440:	cmp	lr, #0
   1a444:	str	lr, [sp, #36]	; 0x24
   1a448:	beq	1a4bc <__assert_fail@plt+0x8810>
   1a44c:	ldr	lr, [ip, #24]
   1a450:	cmp	lr, #0
   1a454:	str	lr, [sp, #40]	; 0x28
   1a458:	beq	1a4c4 <__assert_fail@plt+0x8818>
   1a45c:	ldr	lr, [ip, #28]
   1a460:	cmp	lr, #0
   1a464:	str	lr, [sp, #44]	; 0x2c
   1a468:	beq	1a4cc <__assert_fail@plt+0x8820>
   1a46c:	ldr	lr, [ip, #32]
   1a470:	cmp	lr, #0
   1a474:	str	lr, [sp, #48]	; 0x30
   1a478:	beq	1a4d4 <__assert_fail@plt+0x8828>
   1a47c:	ldr	lr, [ip, #36]	; 0x24
   1a480:	mov	ip, #10
   1a484:	cmp	lr, #0
   1a488:	str	lr, [sp, #52]	; 0x34
   1a48c:	movweq	ip, #9
   1a490:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a494:	mov	ip, #0
   1a498:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a49c:	mov	ip, #1
   1a4a0:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a4a4:	mov	ip, #2
   1a4a8:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a4ac:	mov	ip, #3
   1a4b0:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a4b4:	mov	ip, #4
   1a4b8:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a4bc:	mov	ip, #5
   1a4c0:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a4c4:	mov	ip, #6
   1a4c8:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a4cc:	mov	ip, #7
   1a4d0:	b	1a4d8 <__assert_fail@plt+0x882c>
   1a4d4:	mov	ip, #8
   1a4d8:	add	lr, sp, #16
   1a4dc:	str	ip, [sp, #4]
   1a4e0:	str	lr, [sp]
   1a4e4:	bl	19f38 <__assert_fail@plt+0x828c>
   1a4e8:	mov	sp, fp
   1a4ec:	pop	{fp, pc}
   1a4f0:	push	{fp, lr}
   1a4f4:	mov	fp, sp
   1a4f8:	movw	r0, #16916	; 0x4214
   1a4fc:	movt	r0, #4
   1a500:	ldr	r1, [r0]
   1a504:	mov	r0, #10
   1a508:	bl	11bc8 <fputc@plt>
   1a50c:	movw	r1, #13575	; 0x3507
   1a510:	mov	r0, #0
   1a514:	mov	r2, #5
   1a518:	movt	r1, #3
   1a51c:	bl	11940 <dcgettext@plt>
   1a520:	movw	r1, #12436	; 0x3094
   1a524:	movt	r1, #3
   1a528:	bl	11868 <printf@plt>
   1a52c:	movw	r1, #13595	; 0x351b
   1a530:	mov	r0, #0
   1a534:	mov	r2, #5
   1a538:	movt	r1, #3
   1a53c:	bl	11940 <dcgettext@plt>
   1a540:	movw	r1, #11765	; 0x2df5
   1a544:	movw	r2, #12350	; 0x303e
   1a548:	movt	r1, #3
   1a54c:	movt	r2, #3
   1a550:	bl	11868 <printf@plt>
   1a554:	movw	r1, #13615	; 0x352f
   1a558:	mov	r0, #0
   1a55c:	mov	r2, #5
   1a560:	movt	r1, #3
   1a564:	bl	11940 <dcgettext@plt>
   1a568:	movw	r1, #13654	; 0x3556
   1a56c:	movt	r1, #3
   1a570:	pop	{fp, lr}
   1a574:	b	11868 <printf@plt>
   1a578:	push	{r4, r5, r6, sl, fp, lr}
   1a57c:	add	fp, sp, #16
   1a580:	mov	r4, r2
   1a584:	mov	r5, r1
   1a588:	mov	r6, r0
   1a58c:	bl	1bd58 <__assert_fail@plt+0xa0ac>
   1a590:	cmp	r0, #0
   1a594:	popne	{r4, r5, r6, sl, fp, pc}
   1a598:	cmp	r6, #0
   1a59c:	beq	1a5b0 <__assert_fail@plt+0x8904>
   1a5a0:	cmp	r5, #0
   1a5a4:	cmpne	r4, #0
   1a5a8:	bne	1a5b0 <__assert_fail@plt+0x8904>
   1a5ac:	pop	{r4, r5, r6, sl, fp, pc}
   1a5b0:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a5b4:	push	{r4, r5, r6, sl, fp, lr}
   1a5b8:	add	fp, sp, #16
   1a5bc:	mov	r4, r2
   1a5c0:	mov	r5, r1
   1a5c4:	mov	r6, r0
   1a5c8:	bl	1bd58 <__assert_fail@plt+0xa0ac>
   1a5cc:	cmp	r0, #0
   1a5d0:	popne	{r4, r5, r6, sl, fp, pc}
   1a5d4:	cmp	r6, #0
   1a5d8:	beq	1a5ec <__assert_fail@plt+0x8940>
   1a5dc:	cmp	r5, #0
   1a5e0:	cmpne	r4, #0
   1a5e4:	bne	1a5ec <__assert_fail@plt+0x8940>
   1a5e8:	pop	{r4, r5, r6, sl, fp, pc}
   1a5ec:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a5f0:	push	{fp, lr}
   1a5f4:	mov	fp, sp
   1a5f8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1a5fc:	cmp	r0, #0
   1a600:	popne	{fp, pc}
   1a604:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a608:	push	{fp, lr}
   1a60c:	mov	fp, sp
   1a610:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1a614:	cmp	r0, #0
   1a618:	popne	{fp, pc}
   1a61c:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a620:	push	{fp, lr}
   1a624:	mov	fp, sp
   1a628:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1a62c:	cmp	r0, #0
   1a630:	popne	{fp, pc}
   1a634:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a638:	push	{r4, r5, fp, lr}
   1a63c:	add	fp, sp, #8
   1a640:	mov	r4, r1
   1a644:	mov	r5, r0
   1a648:	bl	1bd04 <__assert_fail@plt+0xa058>
   1a64c:	cmp	r0, #0
   1a650:	popne	{r4, r5, fp, pc}
   1a654:	cmp	r5, #0
   1a658:	beq	1a668 <__assert_fail@plt+0x89bc>
   1a65c:	cmp	r4, #0
   1a660:	bne	1a668 <__assert_fail@plt+0x89bc>
   1a664:	pop	{r4, r5, fp, pc}
   1a668:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a66c:	push	{fp, lr}
   1a670:	mov	fp, sp
   1a674:	cmp	r1, #0
   1a678:	orreq	r1, r1, #1
   1a67c:	bl	1bd04 <__assert_fail@plt+0xa058>
   1a680:	cmp	r0, #0
   1a684:	popne	{fp, pc}
   1a688:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a68c:	push	{fp, lr}
   1a690:	mov	fp, sp
   1a694:	clz	r3, r2
   1a698:	lsr	ip, r3, #5
   1a69c:	clz	r3, r1
   1a6a0:	lsr	r3, r3, #5
   1a6a4:	orrs	r3, r3, ip
   1a6a8:	movwne	r1, #1
   1a6ac:	movwne	r2, #1
   1a6b0:	bl	1bd58 <__assert_fail@plt+0xa0ac>
   1a6b4:	cmp	r0, #0
   1a6b8:	popne	{fp, pc}
   1a6bc:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a6c0:	push	{fp, lr}
   1a6c4:	mov	fp, sp
   1a6c8:	mov	r2, r1
   1a6cc:	mov	r1, r0
   1a6d0:	mov	r0, #0
   1a6d4:	bl	1bd58 <__assert_fail@plt+0xa0ac>
   1a6d8:	cmp	r0, #0
   1a6dc:	popne	{fp, pc}
   1a6e0:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a6e4:	push	{fp, lr}
   1a6e8:	mov	fp, sp
   1a6ec:	mov	r2, r1
   1a6f0:	mov	r1, r0
   1a6f4:	clz	r0, r2
   1a6f8:	clz	r3, r1
   1a6fc:	lsr	r0, r0, #5
   1a700:	lsr	r3, r3, #5
   1a704:	orrs	r0, r3, r0
   1a708:	movwne	r1, #1
   1a70c:	movwne	r2, #1
   1a710:	mov	r0, #0
   1a714:	bl	1bd58 <__assert_fail@plt+0xa0ac>
   1a718:	cmp	r0, #0
   1a71c:	popne	{fp, pc}
   1a720:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a724:	push	{r4, r5, r6, sl, fp, lr}
   1a728:	add	fp, sp, #16
   1a72c:	ldr	r5, [r1]
   1a730:	mov	r4, r1
   1a734:	mov	r6, r0
   1a738:	cmp	r0, #0
   1a73c:	beq	1a754 <__assert_fail@plt+0x8aa8>
   1a740:	mov	r0, #1
   1a744:	add	r0, r0, r5, lsr #1
   1a748:	adds	r5, r5, r0
   1a74c:	bcc	1a75c <__assert_fail@plt+0x8ab0>
   1a750:	b	1a798 <__assert_fail@plt+0x8aec>
   1a754:	cmp	r5, #0
   1a758:	movweq	r5, #64	; 0x40
   1a75c:	mov	r0, r6
   1a760:	mov	r1, r5
   1a764:	mov	r2, #1
   1a768:	bl	1bd58 <__assert_fail@plt+0xa0ac>
   1a76c:	cmp	r5, #0
   1a770:	mov	r1, r5
   1a774:	movwne	r1, #1
   1a778:	cmp	r0, #0
   1a77c:	bne	1a790 <__assert_fail@plt+0x8ae4>
   1a780:	clz	r2, r6
   1a784:	lsr	r2, r2, #5
   1a788:	orrs	r1, r2, r1
   1a78c:	bne	1a798 <__assert_fail@plt+0x8aec>
   1a790:	str	r5, [r4]
   1a794:	pop	{r4, r5, r6, sl, fp, pc}
   1a798:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a79c:	push	{r4, r5, r6, r7, fp, lr}
   1a7a0:	add	fp, sp, #16
   1a7a4:	ldr	r5, [r1]
   1a7a8:	mov	r6, r2
   1a7ac:	mov	r4, r1
   1a7b0:	mov	r7, r0
   1a7b4:	cmp	r0, #0
   1a7b8:	beq	1a7d0 <__assert_fail@plt+0x8b24>
   1a7bc:	mov	r0, #1
   1a7c0:	add	r0, r0, r5, lsr #1
   1a7c4:	adds	r5, r5, r0
   1a7c8:	bcc	1a7e8 <__assert_fail@plt+0x8b3c>
   1a7cc:	b	1a81c <__assert_fail@plt+0x8b70>
   1a7d0:	cmp	r5, #0
   1a7d4:	bne	1a7e8 <__assert_fail@plt+0x8b3c>
   1a7d8:	mov	r0, #64	; 0x40
   1a7dc:	cmp	r6, #64	; 0x40
   1a7e0:	udiv	r5, r0, r6
   1a7e4:	addhi	r5, r5, #1
   1a7e8:	mov	r0, r7
   1a7ec:	mov	r1, r5
   1a7f0:	mov	r2, r6
   1a7f4:	bl	1bd58 <__assert_fail@plt+0xa0ac>
   1a7f8:	cmp	r0, #0
   1a7fc:	bne	1a814 <__assert_fail@plt+0x8b68>
   1a800:	cmp	r7, #0
   1a804:	beq	1a81c <__assert_fail@plt+0x8b70>
   1a808:	cmp	r6, #0
   1a80c:	cmpne	r5, #0
   1a810:	bne	1a81c <__assert_fail@plt+0x8b70>
   1a814:	str	r5, [r4]
   1a818:	pop	{r4, r5, r6, r7, fp, pc}
   1a81c:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a820:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a824:	add	fp, sp, #24
   1a828:	mov	r8, r1
   1a82c:	ldr	r1, [r1]
   1a830:	mov	r5, r0
   1a834:	add	r0, r1, r1, asr #1
   1a838:	cmp	r0, r1
   1a83c:	mvnvs	r0, #-2147483648	; 0x80000000
   1a840:	cmp	r0, r3
   1a844:	mov	r7, r0
   1a848:	movgt	r7, r3
   1a84c:	cmn	r3, #1
   1a850:	movle	r7, r0
   1a854:	ldr	r0, [fp, #8]
   1a858:	cmn	r0, #1
   1a85c:	ble	1a884 <__assert_fail@plt+0x8bd8>
   1a860:	cmp	r0, #0
   1a864:	beq	1a8d8 <__assert_fail@plt+0x8c2c>
   1a868:	cmn	r7, #1
   1a86c:	ble	1a8ac <__assert_fail@plt+0x8c00>
   1a870:	mvn	r4, #-2147483648	; 0x80000000
   1a874:	udiv	r6, r4, r0
   1a878:	cmp	r6, r7
   1a87c:	bge	1a8d8 <__assert_fail@plt+0x8c2c>
   1a880:	b	1a8e8 <__assert_fail@plt+0x8c3c>
   1a884:	cmn	r7, #1
   1a888:	ble	1a8c8 <__assert_fail@plt+0x8c1c>
   1a88c:	cmn	r0, #1
   1a890:	beq	1a8d8 <__assert_fail@plt+0x8c2c>
   1a894:	mov	r6, #-2147483648	; 0x80000000
   1a898:	mvn	r4, #-2147483648	; 0x80000000
   1a89c:	sdiv	r6, r6, r0
   1a8a0:	cmp	r6, r7
   1a8a4:	bge	1a8d8 <__assert_fail@plt+0x8c2c>
   1a8a8:	b	1a8e8 <__assert_fail@plt+0x8c3c>
   1a8ac:	beq	1a8d8 <__assert_fail@plt+0x8c2c>
   1a8b0:	mov	r6, #-2147483648	; 0x80000000
   1a8b4:	mvn	r4, #-2147483648	; 0x80000000
   1a8b8:	sdiv	r6, r6, r7
   1a8bc:	cmp	r6, r0
   1a8c0:	bge	1a8d8 <__assert_fail@plt+0x8c2c>
   1a8c4:	b	1a8e8 <__assert_fail@plt+0x8c3c>
   1a8c8:	mvn	r4, #-2147483648	; 0x80000000
   1a8cc:	sdiv	r6, r4, r0
   1a8d0:	cmp	r7, r6
   1a8d4:	blt	1a8e8 <__assert_fail@plt+0x8c3c>
   1a8d8:	mul	r6, r7, r0
   1a8dc:	mov	r4, #64	; 0x40
   1a8e0:	cmp	r6, #63	; 0x3f
   1a8e4:	bgt	1a8f0 <__assert_fail@plt+0x8c44>
   1a8e8:	sdiv	r7, r4, r0
   1a8ec:	mul	r6, r7, r0
   1a8f0:	cmp	r5, #0
   1a8f4:	moveq	r4, #0
   1a8f8:	streq	r4, [r8]
   1a8fc:	sub	r4, r7, r1
   1a900:	cmp	r4, r2
   1a904:	bge	1a9b0 <__assert_fail@plt+0x8d04>
   1a908:	add	r7, r1, r2
   1a90c:	mov	r6, #0
   1a910:	mov	r2, #0
   1a914:	cmp	r7, r3
   1a918:	movwgt	r6, #1
   1a91c:	cmn	r3, #1
   1a920:	movwgt	r2, #1
   1a924:	cmp	r7, r1
   1a928:	bvs	1a9e4 <__assert_fail@plt+0x8d38>
   1a92c:	ands	r1, r2, r6
   1a930:	bne	1a9e4 <__assert_fail@plt+0x8d38>
   1a934:	cmn	r0, #1
   1a938:	ble	1a960 <__assert_fail@plt+0x8cb4>
   1a93c:	cmp	r0, #0
   1a940:	beq	1a9ac <__assert_fail@plt+0x8d00>
   1a944:	cmn	r7, #1
   1a948:	ble	1a984 <__assert_fail@plt+0x8cd8>
   1a94c:	mvn	r1, #-2147483648	; 0x80000000
   1a950:	udiv	r1, r1, r0
   1a954:	cmp	r1, r7
   1a958:	bge	1a9ac <__assert_fail@plt+0x8d00>
   1a95c:	b	1a9e4 <__assert_fail@plt+0x8d38>
   1a960:	cmn	r7, #1
   1a964:	ble	1a99c <__assert_fail@plt+0x8cf0>
   1a968:	cmn	r0, #1
   1a96c:	beq	1a9ac <__assert_fail@plt+0x8d00>
   1a970:	mov	r1, #-2147483648	; 0x80000000
   1a974:	sdiv	r1, r1, r0
   1a978:	cmp	r1, r7
   1a97c:	bge	1a9ac <__assert_fail@plt+0x8d00>
   1a980:	b	1a9e4 <__assert_fail@plt+0x8d38>
   1a984:	beq	1a9ac <__assert_fail@plt+0x8d00>
   1a988:	mov	r1, #-2147483648	; 0x80000000
   1a98c:	sdiv	r1, r1, r7
   1a990:	cmp	r1, r0
   1a994:	bge	1a9ac <__assert_fail@plt+0x8d00>
   1a998:	b	1a9e4 <__assert_fail@plt+0x8d38>
   1a99c:	mvn	r1, #-2147483648	; 0x80000000
   1a9a0:	sdiv	r1, r1, r0
   1a9a4:	cmp	r7, r1
   1a9a8:	blt	1a9e4 <__assert_fail@plt+0x8d38>
   1a9ac:	mul	r6, r7, r0
   1a9b0:	mov	r0, r5
   1a9b4:	mov	r1, r6
   1a9b8:	bl	1bd04 <__assert_fail@plt+0xa058>
   1a9bc:	cmp	r6, #0
   1a9c0:	movwne	r6, #1
   1a9c4:	cmp	r0, #0
   1a9c8:	bne	1a9dc <__assert_fail@plt+0x8d30>
   1a9cc:	clz	r1, r5
   1a9d0:	lsr	r1, r1, #5
   1a9d4:	orrs	r1, r1, r6
   1a9d8:	bne	1a9e4 <__assert_fail@plt+0x8d38>
   1a9dc:	str	r7, [r8]
   1a9e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a9e4:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1a9e8:	push	{fp, lr}
   1a9ec:	mov	fp, sp
   1a9f0:	mov	r1, #1
   1a9f4:	bl	1b90c <__assert_fail@plt+0x9c60>
   1a9f8:	cmp	r0, #0
   1a9fc:	popne	{fp, pc}
   1aa00:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1aa04:	push	{fp, lr}
   1aa08:	mov	fp, sp
   1aa0c:	bl	1b90c <__assert_fail@plt+0x9c60>
   1aa10:	cmp	r0, #0
   1aa14:	popne	{fp, pc}
   1aa18:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1aa1c:	push	{fp, lr}
   1aa20:	mov	fp, sp
   1aa24:	mov	r1, #1
   1aa28:	bl	1b90c <__assert_fail@plt+0x9c60>
   1aa2c:	cmp	r0, #0
   1aa30:	popne	{fp, pc}
   1aa34:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1aa38:	push	{fp, lr}
   1aa3c:	mov	fp, sp
   1aa40:	bl	1b90c <__assert_fail@plt+0x9c60>
   1aa44:	cmp	r0, #0
   1aa48:	popne	{fp, pc}
   1aa4c:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1aa50:	push	{r4, r5, r6, sl, fp, lr}
   1aa54:	add	fp, sp, #16
   1aa58:	mov	r5, r0
   1aa5c:	mov	r0, r1
   1aa60:	mov	r4, r1
   1aa64:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1aa68:	cmp	r0, #0
   1aa6c:	beq	1aa88 <__assert_fail@plt+0x8ddc>
   1aa70:	mov	r1, r5
   1aa74:	mov	r2, r4
   1aa78:	mov	r6, r0
   1aa7c:	bl	118ec <memcpy@plt>
   1aa80:	mov	r0, r6
   1aa84:	pop	{r4, r5, r6, sl, fp, pc}
   1aa88:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1aa8c:	push	{r4, r5, r6, sl, fp, lr}
   1aa90:	add	fp, sp, #16
   1aa94:	mov	r5, r0
   1aa98:	mov	r0, r1
   1aa9c:	mov	r4, r1
   1aaa0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1aaa4:	cmp	r0, #0
   1aaa8:	beq	1aac4 <__assert_fail@plt+0x8e18>
   1aaac:	mov	r1, r5
   1aab0:	mov	r2, r4
   1aab4:	mov	r6, r0
   1aab8:	bl	118ec <memcpy@plt>
   1aabc:	mov	r0, r6
   1aac0:	pop	{r4, r5, r6, sl, fp, pc}
   1aac4:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1aac8:	push	{r4, r5, r6, sl, fp, lr}
   1aacc:	add	fp, sp, #16
   1aad0:	mov	r5, r0
   1aad4:	add	r0, r1, #1
   1aad8:	mov	r4, r1
   1aadc:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1aae0:	cmp	r0, #0
   1aae4:	beq	1ab0c <__assert_fail@plt+0x8e60>
   1aae8:	mov	r6, r0
   1aaec:	mov	r0, #0
   1aaf0:	mov	r1, r5
   1aaf4:	mov	r2, r4
   1aaf8:	strb	r0, [r6, r4]
   1aafc:	mov	r0, r6
   1ab00:	bl	118ec <memcpy@plt>
   1ab04:	mov	r0, r6
   1ab08:	pop	{r4, r5, r6, sl, fp, pc}
   1ab0c:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1ab10:	push	{r4, r5, r6, sl, fp, lr}
   1ab14:	add	fp, sp, #16
   1ab18:	mov	r4, r0
   1ab1c:	bl	11ac0 <strlen@plt>
   1ab20:	add	r5, r0, #1
   1ab24:	mov	r0, r5
   1ab28:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1ab2c:	cmp	r0, #0
   1ab30:	beq	1ab4c <__assert_fail@plt+0x8ea0>
   1ab34:	mov	r1, r4
   1ab38:	mov	r2, r5
   1ab3c:	mov	r6, r0
   1ab40:	bl	118ec <memcpy@plt>
   1ab44:	mov	r0, r6
   1ab48:	pop	{r4, r5, r6, sl, fp, pc}
   1ab4c:	bl	1ab50 <__assert_fail@plt+0x8ea4>
   1ab50:	push	{fp, lr}
   1ab54:	mov	fp, sp
   1ab58:	movw	r0, #16816	; 0x41b0
   1ab5c:	movw	r1, #13730	; 0x35a2
   1ab60:	mov	r2, #5
   1ab64:	movt	r0, #4
   1ab68:	movt	r1, #3
   1ab6c:	ldr	r4, [r0]
   1ab70:	mov	r0, #0
   1ab74:	bl	11940 <dcgettext@plt>
   1ab78:	movw	r2, #14644	; 0x3934
   1ab7c:	mov	r3, r0
   1ab80:	mov	r0, r4
   1ab84:	mov	r1, #0
   1ab88:	movt	r2, #3
   1ab8c:	bl	119e8 <error@plt>
   1ab90:	bl	11c70 <abort@plt>
   1ab94:	push	{fp, lr}
   1ab98:	mov	fp, sp
   1ab9c:	sub	sp, sp, #8
   1aba0:	movw	ip, #16816	; 0x41b0
   1aba4:	movt	ip, #4
   1aba8:	ldr	ip, [ip]
   1abac:	str	ip, [sp, #4]
   1abb0:	ldr	ip, [fp, #8]
   1abb4:	str	ip, [sp]
   1abb8:	bl	1abc0 <__assert_fail@plt+0x8f14>
   1abbc:	bl	11c70 <abort@plt>
   1abc0:	push	{r4, r5, r6, r7, fp, lr}
   1abc4:	add	fp, sp, #16
   1abc8:	sub	sp, sp, #16
   1abcc:	sub	r0, r0, #1
   1abd0:	cmp	r0, #4
   1abd4:	bcs	1ac54 <__assert_fail@plt+0x8fa8>
   1abd8:	mov	r5, r1
   1abdc:	movw	r1, #13844	; 0x3614
   1abe0:	ldr	r4, [fp, #12]
   1abe4:	ldr	r6, [fp, #8]
   1abe8:	movt	r1, #3
   1abec:	cmn	r5, #1
   1abf0:	ldr	r1, [r1, r0, lsl #2]
   1abf4:	ble	1ac08 <__assert_fail@plt+0x8f5c>
   1abf8:	ldr	r7, [r3, r5, lsl #4]
   1abfc:	movw	r5, #13747	; 0x35b3
   1ac00:	movt	r5, #3
   1ac04:	b	1ac24 <__assert_fail@plt+0x8f78>
   1ac08:	mov	r0, #0
   1ac0c:	add	r7, sp, #14
   1ac10:	strb	r0, [sp, #15]
   1ac14:	movw	r0, #13747	; 0x35b3
   1ac18:	strb	r2, [sp, #14]
   1ac1c:	movt	r0, #3
   1ac20:	sub	r5, r0, r5
   1ac24:	mov	r0, #0
   1ac28:	mov	r2, #5
   1ac2c:	bl	11940 <dcgettext@plt>
   1ac30:	mov	r2, r0
   1ac34:	mov	r0, r4
   1ac38:	mov	r1, #0
   1ac3c:	mov	r3, r5
   1ac40:	str	r7, [sp]
   1ac44:	str	r6, [sp, #4]
   1ac48:	bl	119e8 <error@plt>
   1ac4c:	sub	sp, fp, #16
   1ac50:	pop	{r4, r5, r6, r7, fp, pc}
   1ac54:	bl	11c70 <abort@plt>
   1ac58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac5c:	add	fp, sp, #28
   1ac60:	sub	sp, sp, #44	; 0x2c
   1ac64:	cmp	r2, #37	; 0x25
   1ac68:	bcs	1b8ec <__assert_fail@plt+0x9c40>
   1ac6c:	ldr	sl, [fp, #8]
   1ac70:	mov	r6, r2
   1ac74:	mov	r7, r1
   1ac78:	mov	r4, r0
   1ac7c:	str	r3, [sp, #36]	; 0x24
   1ac80:	bl	11af0 <__errno_location@plt>
   1ac84:	mov	r5, r0
   1ac88:	mov	r0, #0
   1ac8c:	str	r0, [r5]
   1ac90:	bl	11a90 <__ctype_b_loc@plt>
   1ac94:	ldr	r1, [r0]
   1ac98:	mov	r2, r4
   1ac9c:	ldrb	r0, [r2], #1
   1aca0:	add	r3, r1, r0, lsl #1
   1aca4:	ldrb	r3, [r3, #1]
   1aca8:	tst	r3, #32
   1acac:	bne	1ac9c <__assert_fail@plt+0x8ff0>
   1acb0:	sub	r9, fp, #32
   1acb4:	cmp	r7, #0
   1acb8:	mov	r8, #4
   1acbc:	movne	r9, r7
   1acc0:	cmp	r0, #45	; 0x2d
   1acc4:	beq	1b084 <__assert_fail@plt+0x93d8>
   1acc8:	mov	r0, r4
   1accc:	mov	r1, r9
   1acd0:	mov	r2, r6
   1acd4:	mov	r3, #0
   1acd8:	bl	11904 <__strtoull_internal@plt>
   1acdc:	mov	r7, r1
   1ace0:	ldr	r1, [r9]
   1ace4:	cmp	r1, r4
   1ace8:	beq	1ad20 <__assert_fail@plt+0x9074>
   1acec:	mov	r6, r0
   1acf0:	ldr	r0, [r5]
   1acf4:	cmp	r0, #0
   1acf8:	beq	1b03c <__assert_fail@plt+0x9390>
   1acfc:	cmp	r0, #34	; 0x22
   1ad00:	bne	1b084 <__assert_fail@plt+0x93d8>
   1ad04:	mov	r8, #1
   1ad08:	cmp	sl, #0
   1ad0c:	beq	1b8d8 <__assert_fail@plt+0x9c2c>
   1ad10:	ldrb	r4, [r1]
   1ad14:	cmp	r4, #0
   1ad18:	bne	1ad64 <__assert_fail@plt+0x90b8>
   1ad1c:	b	1b8d8 <__assert_fail@plt+0x9c2c>
   1ad20:	cmp	sl, #0
   1ad24:	beq	1b084 <__assert_fail@plt+0x93d8>
   1ad28:	mov	r5, r1
   1ad2c:	ldrb	r1, [r4]
   1ad30:	cmp	r1, #0
   1ad34:	beq	1b084 <__assert_fail@plt+0x93d8>
   1ad38:	mov	r0, sl
   1ad3c:	bl	11acc <strchr@plt>
   1ad40:	cmp	r0, #0
   1ad44:	beq	1b084 <__assert_fail@plt+0x93d8>
   1ad48:	mov	r1, r5
   1ad4c:	mov	r8, #0
   1ad50:	mov	r6, #1
   1ad54:	mov	r7, #0
   1ad58:	ldrb	r4, [r1]
   1ad5c:	cmp	r4, #0
   1ad60:	beq	1b8d8 <__assert_fail@plt+0x9c2c>
   1ad64:	str	r1, [sp, #32]
   1ad68:	mov	r0, sl
   1ad6c:	mov	r1, r4
   1ad70:	bl	11acc <strchr@plt>
   1ad74:	cmp	r0, #0
   1ad78:	beq	1b078 <__assert_fail@plt+0x93cc>
   1ad7c:	sub	r0, r4, #69	; 0x45
   1ad80:	mov	r1, #1
   1ad84:	mov	r3, #0
   1ad88:	mov	r5, #1024	; 0x400
   1ad8c:	cmp	r0, #47	; 0x2f
   1ad90:	str	r1, [sp, #28]
   1ad94:	bhi	1ae98 <__assert_fail@plt+0x91ec>
   1ad98:	add	r1, pc, #0
   1ad9c:	ldr	pc, [r1, r0, lsl #2]
   1ada0:	andeq	sl, r1, r0, ror #28
   1ada4:	muleq	r1, r8, lr
   1ada8:	andeq	sl, r1, r0, ror #28
   1adac:	muleq	r1, r8, lr
   1adb0:	muleq	r1, r8, lr
   1adb4:	muleq	r1, r8, lr
   1adb8:	andeq	sl, r1, r0, ror #28
   1adbc:	muleq	r1, r8, lr
   1adc0:	andeq	sl, r1, r0, ror #28
   1adc4:	muleq	r1, r8, lr
   1adc8:	muleq	r1, r8, lr
   1adcc:	andeq	sl, r1, r0, ror #28
   1add0:	muleq	r1, r8, lr
   1add4:	muleq	r1, r8, lr
   1add8:	muleq	r1, r8, lr
   1addc:	andeq	sl, r1, r0, ror #28
   1ade0:	muleq	r1, r8, lr
   1ade4:	muleq	r1, r8, lr
   1ade8:	muleq	r1, r8, lr
   1adec:	muleq	r1, r8, lr
   1adf0:	andeq	sl, r1, r0, ror #28
   1adf4:	andeq	sl, r1, r0, ror #28
   1adf8:	muleq	r1, r8, lr
   1adfc:	muleq	r1, r8, lr
   1ae00:	muleq	r1, r8, lr
   1ae04:	muleq	r1, r8, lr
   1ae08:	muleq	r1, r8, lr
   1ae0c:	muleq	r1, r8, lr
   1ae10:	muleq	r1, r8, lr
   1ae14:	muleq	r1, r8, lr
   1ae18:	muleq	r1, r8, lr
   1ae1c:	muleq	r1, r8, lr
   1ae20:	muleq	r1, r8, lr
   1ae24:	muleq	r1, r8, lr
   1ae28:	andeq	sl, r1, r0, ror #28
   1ae2c:	muleq	r1, r8, lr
   1ae30:	muleq	r1, r8, lr
   1ae34:	muleq	r1, r8, lr
   1ae38:	andeq	sl, r1, r0, ror #28
   1ae3c:	muleq	r1, r8, lr
   1ae40:	andeq	sl, r1, r0, ror #28
   1ae44:	muleq	r1, r8, lr
   1ae48:	muleq	r1, r8, lr
   1ae4c:	muleq	r1, r8, lr
   1ae50:	muleq	r1, r8, lr
   1ae54:	muleq	r1, r8, lr
   1ae58:	muleq	r1, r8, lr
   1ae5c:	andeq	sl, r1, r0, ror #28
   1ae60:	mov	r0, sl
   1ae64:	mov	r1, #48	; 0x30
   1ae68:	bl	11acc <strchr@plt>
   1ae6c:	cmp	r0, #0
   1ae70:	beq	1ae94 <__assert_fail@plt+0x91e8>
   1ae74:	ldr	r1, [sp, #32]
   1ae78:	ldrb	r0, [r1, #1]
   1ae7c:	cmp	r0, #66	; 0x42
   1ae80:	cmpne	r0, #68	; 0x44
   1ae84:	bne	1b04c <__assert_fail@plt+0x93a0>
   1ae88:	mov	r5, #1000	; 0x3e8
   1ae8c:	mov	r0, #2
   1ae90:	str	r0, [sp, #28]
   1ae94:	mov	r3, #0
   1ae98:	sub	r0, r4, #66	; 0x42
   1ae9c:	cmp	r0, #53	; 0x35
   1aea0:	bhi	1b078 <__assert_fail@plt+0x93cc>
   1aea4:	add	r1, pc, #0
   1aea8:	ldr	pc, [r1, r0, lsl #2]
   1aeac:	andeq	fp, r1, r8, ror #7
   1aeb0:	andeq	fp, r1, r8, ror r0
   1aeb4:	andeq	fp, r1, r8, ror r0
   1aeb8:	andeq	fp, r1, r0, lsl r4
   1aebc:	andeq	fp, r1, r8, ror r0
   1aec0:	andeq	sl, r1, r4, lsl #31
   1aec4:	andeq	fp, r1, r8, ror r0
   1aec8:	andeq	fp, r1, r8, ror r0
   1aecc:	andeq	fp, r1, r8, ror r0
   1aed0:	muleq	r1, r0, r0
   1aed4:	andeq	fp, r1, r8, ror r0
   1aed8:	ldrdeq	fp, [r1], -r8
   1aedc:	andeq	fp, r1, r8, ror r0
   1aee0:	andeq	fp, r1, r8, ror r0
   1aee4:	andeq	fp, r1, r4, ror #10
   1aee8:	andeq	fp, r1, r8, ror r0
   1aeec:	andeq	fp, r1, r8, ror r0
   1aef0:	andeq	fp, r1, r8, ror r0
   1aef4:	andeq	fp, r1, r4, ror #2
   1aef8:	andeq	fp, r1, r8, ror r0
   1aefc:	andeq	fp, r1, r8, ror r0
   1af00:	andeq	fp, r1, r8, ror r0
   1af04:	andeq	fp, r1, r8, ror r0
   1af08:	andeq	fp, r1, ip, lsl #13
   1af0c:	andeq	fp, r1, ip, asr #4
   1af10:	andeq	fp, r1, r8, ror r0
   1af14:	andeq	fp, r1, r8, ror r0
   1af18:	andeq	fp, r1, r8, ror r0
   1af1c:	andeq	fp, r1, r8, ror r0
   1af20:	andeq	fp, r1, r8, ror r0
   1af24:	andeq	fp, r1, r8, ror r0
   1af28:	andeq	fp, r1, r8, ror r0
   1af2c:	andeq	fp, r1, r0, ror #16
   1af30:			; <UNDEFINED> instruction: 0x0001b8b8
   1af34:	andeq	fp, r1, r8, ror r0
   1af38:	andeq	fp, r1, r8, ror r0
   1af3c:	andeq	fp, r1, r8, ror r0
   1af40:	andeq	sl, r1, r4, lsl #31
   1af44:	andeq	fp, r1, r8, ror r0
   1af48:	andeq	fp, r1, r8, ror r0
   1af4c:	andeq	fp, r1, r8, ror r0
   1af50:	muleq	r1, r0, r0
   1af54:	andeq	fp, r1, r8, ror r0
   1af58:	ldrdeq	fp, [r1], -r8
   1af5c:	andeq	fp, r1, r8, ror r0
   1af60:	andeq	fp, r1, r8, ror r0
   1af64:	andeq	fp, r1, r8, ror r0
   1af68:	andeq	fp, r1, r8, ror r0
   1af6c:	andeq	fp, r1, r8, ror r0
   1af70:	andeq	fp, r1, r8, ror r0
   1af74:	andeq	fp, r1, r4, ror #2
   1af78:	andeq	fp, r1, r8, ror r0
   1af7c:	andeq	fp, r1, r8, ror r0
   1af80:	muleq	r1, r4, r8
   1af84:	mvn	r0, #0
   1af88:	mvn	r1, #0
   1af8c:	mov	r2, r5
   1af90:	mov	sl, r3
   1af94:	bl	31d00 <__assert_fail@plt+0x20054>
   1af98:	subs	r3, r0, r6
   1af9c:	mov	lr, #0
   1afa0:	umull	r4, r2, r6, r5
   1afa4:	str	r1, [sp, #20]
   1afa8:	sbcs	r3, r1, r7
   1afac:	mla	ip, r6, sl, r2
   1afb0:	mov	r2, r1
   1afb4:	movwcc	lr, #1
   1afb8:	mla	r7, r7, r5, ip
   1afbc:	mov	r2, #0
   1afc0:	cmp	lr, #0
   1afc4:	mvnne	r4, #0
   1afc8:	mvnne	r7, #0
   1afcc:	subs	r6, r0, r4
   1afd0:	sbcs	r6, r1, r7
   1afd4:	movwcc	r2, #1
   1afd8:	umull	r3, r6, r4, r5
   1afdc:	cmp	r2, #0
   1afe0:	str	r6, [sp, #16]
   1afe4:	mvnne	r3, #0
   1afe8:	cmp	r2, #0
   1afec:	umull	r6, ip, r3, r5
   1aff0:	mla	r1, r3, sl, ip
   1aff4:	ldr	ip, [sp, #16]
   1aff8:	str	r1, [sp, #12]
   1affc:	mla	r4, r4, sl, ip
   1b000:	mla	r4, r7, r5, r4
   1b004:	ldr	r7, [sp, #12]
   1b008:	mvnne	r4, #0
   1b00c:	subs	r0, r0, r3
   1b010:	ldr	r0, [sp, #20]
   1b014:	mla	r7, r4, r5, r7
   1b018:	sbcs	r0, r0, r4
   1b01c:	mov	r0, #0
   1b020:	movwcc	r0, #1
   1b024:	cmp	r0, #0
   1b028:	mov	r1, r0
   1b02c:	orr	r0, lr, r2
   1b030:	mvnne	r7, #0
   1b034:	mvnne	r6, #0
   1b038:	b	1b684 <__assert_fail@plt+0x99d8>
   1b03c:	mov	r8, r0
   1b040:	cmp	sl, #0
   1b044:	bne	1ad10 <__assert_fail@plt+0x9064>
   1b048:	b	1b8d8 <__assert_fail@plt+0x9c2c>
   1b04c:	cmp	r0, #105	; 0x69
   1b050:	mov	r3, #0
   1b054:	bne	1ae98 <__assert_fail@plt+0x91ec>
   1b058:	ldrb	r0, [r1, #2]
   1b05c:	mov	r1, #1
   1b060:	cmp	r0, #66	; 0x42
   1b064:	movweq	r1, #3
   1b068:	str	r1, [sp, #28]
   1b06c:	sub	r0, r4, #66	; 0x42
   1b070:	cmp	r0, #53	; 0x35
   1b074:	bls	1aea4 <__assert_fail@plt+0x91f8>
   1b078:	ldr	r0, [sp, #36]	; 0x24
   1b07c:	orr	r8, r8, #2
   1b080:	strd	r6, [r0]
   1b084:	mov	r0, r8
   1b088:	sub	sp, fp, #28
   1b08c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b090:	mvn	r0, #0
   1b094:	mvn	r1, #0
   1b098:	mov	r2, r5
   1b09c:	mov	r4, r3
   1b0a0:	bl	31d00 <__assert_fail@plt+0x20054>
   1b0a4:	subs	r0, r0, r6
   1b0a8:	mov	r2, #0
   1b0ac:	sbcs	r0, r1, r7
   1b0b0:	movwcc	r2, #1
   1b0b4:	umull	r0, r1, r6, r5
   1b0b8:	mla	r1, r6, r4, r1
   1b0bc:	cmp	r2, #0
   1b0c0:	mov	r3, r2
   1b0c4:	mla	r7, r7, r5, r1
   1b0c8:	mvnne	r0, #0
   1b0cc:	mvnne	r7, #0
   1b0d0:	mov	r6, r0
   1b0d4:	b	1b8b8 <__assert_fail@plt+0x9c0c>
   1b0d8:	mvn	r0, #0
   1b0dc:	mvn	r1, #0
   1b0e0:	mov	r2, r5
   1b0e4:	str	r3, [sp, #24]
   1b0e8:	bl	31d00 <__assert_fail@plt+0x20054>
   1b0ec:	subs	r3, r0, r6
   1b0f0:	mov	ip, r0
   1b0f4:	umull	r4, r0, r6, r5
   1b0f8:	mov	sl, #0
   1b0fc:	sbcs	r3, r1, r7
   1b100:	str	r0, [sp, #20]
   1b104:	ldr	r0, [sp, #24]
   1b108:	mov	r3, #0
   1b10c:	movwcc	r3, #1
   1b110:	cmp	r3, #0
   1b114:	mvnne	r4, #0
   1b118:	cmp	r3, #0
   1b11c:	umull	lr, r2, r4, r5
   1b120:	mla	r2, r4, r0, r2
   1b124:	str	r2, [sp, #16]
   1b128:	ldr	r2, [sp, #20]
   1b12c:	mla	r6, r6, r0, r2
   1b130:	ldr	r0, [sp, #16]
   1b134:	mla	r6, r7, r5, r6
   1b138:	mvnne	r6, #0
   1b13c:	mla	r7, r6, r5, r0
   1b140:	subs	r0, ip, r4
   1b144:	sbcs	r0, r1, r6
   1b148:	movwcc	sl, #1
   1b14c:	cmp	sl, #0
   1b150:	orr	r3, r3, sl
   1b154:	mvnne	lr, #0
   1b158:	mvnne	r7, #0
   1b15c:	mov	r6, lr
   1b160:	b	1b8b8 <__assert_fail@plt+0x9c0c>
   1b164:	mvn	r0, #0
   1b168:	mvn	r1, #0
   1b16c:	mov	r2, r5
   1b170:	mov	sl, r3
   1b174:	bl	31d00 <__assert_fail@plt+0x20054>
   1b178:	subs	r3, r0, r6
   1b17c:	mov	ip, r1
   1b180:	umull	r2, lr, r6, r5
   1b184:	str	r0, [sp, #20]
   1b188:	sbcs	r3, r1, r7
   1b18c:	mov	r1, #0
   1b190:	mla	r6, r6, sl, lr
   1b194:	mov	lr, #0
   1b198:	str	ip, [sp, #16]
   1b19c:	movwcc	r1, #1
   1b1a0:	mla	r7, r7, r5, r6
   1b1a4:	cmp	r1, #0
   1b1a8:	mvnne	r2, #0
   1b1ac:	cmp	r1, #0
   1b1b0:	umull	r3, r4, r2, r5
   1b1b4:	mvnne	r7, #0
   1b1b8:	mla	r4, r2, sl, r4
   1b1bc:	subs	r2, r0, r2
   1b1c0:	sbcs	r2, ip, r7
   1b1c4:	mla	r4, r7, r5, r4
   1b1c8:	movwcc	lr, #1
   1b1cc:	mov	r2, #0
   1b1d0:	cmp	lr, #0
   1b1d4:	mvnne	r3, #0
   1b1d8:	mvnne	r4, #0
   1b1dc:	subs	r7, r0, r3
   1b1e0:	mov	r0, r5
   1b1e4:	sbcs	r7, ip, r4
   1b1e8:	movwcc	r2, #1
   1b1ec:	umull	r5, r7, r3, r5
   1b1f0:	cmp	r2, #0
   1b1f4:	mla	r3, r3, sl, r7
   1b1f8:	mvnne	r5, #0
   1b1fc:	mla	r3, r4, r0, r3
   1b200:	cmp	r2, #0
   1b204:	umull	r6, ip, r5, r0
   1b208:	mvnne	r3, #0
   1b20c:	mla	ip, r5, sl, ip
   1b210:	mla	r7, r3, r0, ip
   1b214:	ldr	r0, [sp, #20]
   1b218:	subs	r0, r0, r5
   1b21c:	ldr	r0, [sp, #16]
   1b220:	sbcs	r0, r0, r3
   1b224:	mov	r0, #0
   1b228:	movwcc	r0, #1
   1b22c:	cmp	r0, #0
   1b230:	mov	r3, r0
   1b234:	orr	r0, r1, lr
   1b238:	orr	r0, r0, r2
   1b23c:	mvnne	r7, #0
   1b240:	mvnne	r6, #0
   1b244:	orr	r3, r0, r3
   1b248:	b	1b8b8 <__assert_fail@plt+0x9c0c>
   1b24c:	mvn	r0, #0
   1b250:	mvn	r1, #0
   1b254:	mov	r2, r5
   1b258:	mov	r4, r3
   1b25c:	str	r3, [sp, #24]
   1b260:	bl	31d00 <__assert_fail@plt+0x20054>
   1b264:	umull	r3, r2, r6, r5
   1b268:	mla	r2, r6, r4, r2
   1b26c:	subs	r6, r0, r6
   1b270:	sbcs	r6, r1, r7
   1b274:	mla	r2, r7, r5, r2
   1b278:	mov	r7, #0
   1b27c:	mov	r6, #0
   1b280:	movwcc	r6, #1
   1b284:	cmp	r6, #0
   1b288:	str	r6, [sp, #20]
   1b28c:	mvnne	r3, #0
   1b290:	mvnne	r2, #0
   1b294:	subs	r4, r0, r3
   1b298:	umull	r6, ip, r3, r5
   1b29c:	sbcs	r4, r1, r2
   1b2a0:	ldr	r4, [sp, #24]
   1b2a4:	movwcc	r7, #1
   1b2a8:	cmp	r7, #0
   1b2ac:	mov	lr, r7
   1b2b0:	str	r7, [sp, #16]
   1b2b4:	mvnne	r6, #0
   1b2b8:	cmp	lr, #0
   1b2bc:	mov	lr, #0
   1b2c0:	umull	sl, r7, r6, r5
   1b2c4:	mla	r3, r3, r4, ip
   1b2c8:	mla	r7, r6, r4, r7
   1b2cc:	mov	r4, r0
   1b2d0:	mla	r2, r2, r5, r3
   1b2d4:	mvnne	r2, #0
   1b2d8:	subs	r3, r0, r6
   1b2dc:	mov	r0, #0
   1b2e0:	mla	r7, r2, r5, r7
   1b2e4:	sbcs	r2, r1, r2
   1b2e8:	mov	r3, r4
   1b2ec:	movwcc	r0, #1
   1b2f0:	str	r3, [sp, #4]
   1b2f4:	cmp	r0, #0
   1b2f8:	str	r0, [sp, #12]
   1b2fc:	mov	r0, r1
   1b300:	mvnne	sl, #0
   1b304:	mvnne	r7, #0
   1b308:	str	r0, [sp, #8]
   1b30c:	subs	r2, r4, sl
   1b310:	ldr	r4, [sp, #24]
   1b314:	sbcs	r2, r1, r7
   1b318:	movwcc	lr, #1
   1b31c:	umull	r6, r2, sl, r5
   1b320:	cmp	lr, #0
   1b324:	mvnne	r6, #0
   1b328:	mla	r2, sl, r4, r2
   1b32c:	cmp	lr, #0
   1b330:	umull	r1, ip, r6, r5
   1b334:	mla	r2, r7, r5, r2
   1b338:	mla	ip, r6, r4, ip
   1b33c:	mvnne	r2, #0
   1b340:	subs	r6, r3, r6
   1b344:	mla	r7, r2, r5, ip
   1b348:	sbcs	r2, r0, r2
   1b34c:	mov	ip, #0
   1b350:	movwcc	ip, #1
   1b354:	mov	r2, #0
   1b358:	cmp	ip, #0
   1b35c:	mvnne	r1, #0
   1b360:	mvnne	r7, #0
   1b364:	subs	r6, r3, r1
   1b368:	ldr	r3, [sp, #24]
   1b36c:	sbcs	r6, r0, r7
   1b370:	umull	r0, sl, r1, r5
   1b374:	movwcc	r2, #1
   1b378:	cmp	r2, #0
   1b37c:	mvnne	r0, #0
   1b380:	mla	r1, r1, r3, sl
   1b384:	cmp	r2, #0
   1b388:	umull	r6, r4, r0, r5
   1b38c:	mla	r1, r7, r5, r1
   1b390:	mla	r4, r0, r3, r4
   1b394:	ldr	r3, [sp, #4]
   1b398:	mvnne	r1, #0
   1b39c:	mla	r7, r1, r5, r4
   1b3a0:	ldr	r5, [sp, #16]
   1b3a4:	subs	r0, r3, r0
   1b3a8:	ldr	r0, [sp, #8]
   1b3ac:	sbcs	r0, r0, r1
   1b3b0:	mov	r0, #0
   1b3b4:	movwcc	r0, #1
   1b3b8:	cmp	r0, #0
   1b3bc:	mov	r1, r0
   1b3c0:	ldr	r0, [sp, #20]
   1b3c4:	mvnne	r7, #0
   1b3c8:	mvnne	r6, #0
   1b3cc:	orr	r0, r0, r5
   1b3d0:	ldr	r5, [sp, #12]
   1b3d4:	orr	r0, r0, r5
   1b3d8:	orr	r0, r0, lr
   1b3dc:	orr	r0, r0, ip
   1b3e0:	orr	r0, r0, r2
   1b3e4:	b	1b854 <__assert_fail@plt+0x9ba8>
   1b3e8:	mov	r1, #0
   1b3ec:	lsl	r2, r7, #10
   1b3f0:	lsl	r0, r6, #10
   1b3f4:	lsr	r3, r7, #22
   1b3f8:	cmp	r1, r7, lsr #22
   1b3fc:	orr	r2, r2, r6, lsr #22
   1b400:	mvnne	r0, #0
   1b404:	movwne	r3, #1
   1b408:	cmp	r1, r7, lsr #22
   1b40c:	b	1b884 <__assert_fail@plt+0x9bd8>
   1b410:	mvn	r0, #0
   1b414:	mvn	r1, #0
   1b418:	mov	r2, r5
   1b41c:	mov	sl, r3
   1b420:	bl	31d00 <__assert_fail@plt+0x20054>
   1b424:	subs	r2, r0, r6
   1b428:	mov	ip, r0
   1b42c:	mov	r0, #0
   1b430:	sbcs	r2, r1, r7
   1b434:	movwcc	r0, #1
   1b438:	umull	r4, r2, r6, r5
   1b43c:	cmp	r0, #0
   1b440:	mla	r2, r6, sl, r2
   1b444:	str	r0, [sp, #20]
   1b448:	mvnne	r4, #0
   1b44c:	cmp	r0, #0
   1b450:	mla	r2, r7, r5, r2
   1b454:	mov	r0, #0
   1b458:	umull	lr, r3, r4, r5
   1b45c:	mvnne	r2, #0
   1b460:	mla	r3, r4, sl, r3
   1b464:	mla	r6, r2, r5, r3
   1b468:	subs	r3, ip, r4
   1b46c:	sbcs	r2, r1, r2
   1b470:	mov	r3, r1
   1b474:	movwcc	r0, #1
   1b478:	str	r3, [sp, #8]
   1b47c:	cmp	r0, #0
   1b480:	str	r0, [sp, #16]
   1b484:	mov	r0, ip
   1b488:	mvnne	lr, #0
   1b48c:	mvnne	r6, #0
   1b490:	str	r0, [sp, #12]
   1b494:	subs	r2, ip, lr
   1b498:	umull	r7, r4, lr, r5
   1b49c:	sbcs	r2, r1, r6
   1b4a0:	mla	r4, lr, sl, r4
   1b4a4:	mov	r2, #0
   1b4a8:	mla	r6, r6, r5, r4
   1b4ac:	mov	r4, #0
   1b4b0:	movwcc	r2, #1
   1b4b4:	cmp	r2, #0
   1b4b8:	mvnne	r7, #0
   1b4bc:	cmp	r2, #0
   1b4c0:	umull	r1, ip, r7, r5
   1b4c4:	mvnne	r6, #0
   1b4c8:	mla	ip, r7, sl, ip
   1b4cc:	subs	r7, r0, r7
   1b4d0:	mla	lr, r6, r5, ip
   1b4d4:	sbcs	r7, r3, r6
   1b4d8:	mov	ip, #0
   1b4dc:	movwcc	ip, #1
   1b4e0:	cmp	ip, #0
   1b4e4:	mvnne	r1, #0
   1b4e8:	mvnne	lr, #0
   1b4ec:	subs	r7, r0, r1
   1b4f0:	sbcs	r7, r3, lr
   1b4f4:	movwcc	r4, #1
   1b4f8:	umull	r0, r7, r1, r5
   1b4fc:	cmp	r4, #0
   1b500:	mla	r1, r1, sl, r7
   1b504:	mvnne	r0, #0
   1b508:	mla	r1, lr, r5, r1
   1b50c:	cmp	r4, #0
   1b510:	umull	r6, r3, r0, r5
   1b514:	mvnne	r1, #0
   1b518:	mla	r3, r0, sl, r3
   1b51c:	mla	r7, r1, r5, r3
   1b520:	ldr	r3, [sp, #12]
   1b524:	subs	r0, r3, r0
   1b528:	ldr	r3, [sp, #16]
   1b52c:	ldr	r0, [sp, #8]
   1b530:	sbcs	r0, r0, r1
   1b534:	mov	r0, #0
   1b538:	movwcc	r0, #1
   1b53c:	cmp	r0, #0
   1b540:	mov	r1, r0
   1b544:	ldr	r0, [sp, #20]
   1b548:	mvnne	r7, #0
   1b54c:	mvnne	r6, #0
   1b550:	orr	r0, r0, r3
   1b554:	orr	r0, r0, r2
   1b558:	orr	r0, r0, ip
   1b55c:	orr	r0, r0, r4
   1b560:	b	1b684 <__assert_fail@plt+0x99d8>
   1b564:	mvn	r0, #0
   1b568:	mvn	r1, #0
   1b56c:	mov	r2, r5
   1b570:	mov	sl, r3
   1b574:	bl	31d00 <__assert_fail@plt+0x20054>
   1b578:	umull	r3, r2, r6, r5
   1b57c:	mov	lr, r1
   1b580:	mov	r1, r0
   1b584:	mla	r2, r6, sl, r2
   1b588:	subs	r6, r0, r6
   1b58c:	mov	r0, #0
   1b590:	sbcs	r6, lr, r7
   1b594:	mla	r2, r7, r5, r2
   1b598:	movwcc	r0, #1
   1b59c:	cmp	r0, #0
   1b5a0:	str	r0, [sp, #20]
   1b5a4:	mov	r0, r1
   1b5a8:	mvnne	r3, #0
   1b5ac:	mvnne	r2, #0
   1b5b0:	str	r0, [sp, #16]
   1b5b4:	subs	r4, r1, r3
   1b5b8:	umull	r7, ip, r3, r5
   1b5bc:	sbcs	r4, lr, r2
   1b5c0:	mla	r3, r3, sl, ip
   1b5c4:	mov	ip, #0
   1b5c8:	mov	r4, #0
   1b5cc:	mla	r2, r2, r5, r3
   1b5d0:	movwcc	r4, #1
   1b5d4:	cmp	r4, #0
   1b5d8:	mvnne	r7, #0
   1b5dc:	cmp	r4, #0
   1b5e0:	umull	r1, r6, r7, r5
   1b5e4:	mvnne	r2, #0
   1b5e8:	mla	r6, r7, sl, r6
   1b5ec:	mla	r3, r2, r5, r6
   1b5f0:	subs	r6, r0, r7
   1b5f4:	sbcs	r2, lr, r2
   1b5f8:	movwcc	ip, #1
   1b5fc:	mov	r2, #0
   1b600:	cmp	ip, #0
   1b604:	mvnne	r1, #0
   1b608:	mvnne	r3, #0
   1b60c:	subs	r6, r0, r1
   1b610:	sbcs	r6, lr, r3
   1b614:	movwcc	r2, #1
   1b618:	umull	r0, r6, r1, r5
   1b61c:	cmp	r2, #0
   1b620:	str	r6, [sp, #12]
   1b624:	mvnne	r0, #0
   1b628:	cmp	r2, #0
   1b62c:	umull	r6, r7, r0, r5
   1b630:	mla	r7, r0, sl, r7
   1b634:	str	r7, [sp, #8]
   1b638:	ldr	r7, [sp, #12]
   1b63c:	mla	r1, r1, sl, r7
   1b640:	mla	r1, r3, r5, r1
   1b644:	ldr	r3, [sp, #8]
   1b648:	mvnne	r1, #0
   1b64c:	mla	r7, r1, r5, r3
   1b650:	ldr	r3, [sp, #16]
   1b654:	subs	r0, r3, r0
   1b658:	sbcs	r0, lr, r1
   1b65c:	mov	r0, #0
   1b660:	movwcc	r0, #1
   1b664:	cmp	r0, #0
   1b668:	mov	r1, r0
   1b66c:	ldr	r0, [sp, #20]
   1b670:	mvnne	r7, #0
   1b674:	mvnne	r6, #0
   1b678:	orr	r0, r0, r4
   1b67c:	orr	r0, r0, ip
   1b680:	orr	r0, r0, r2
   1b684:	orr	r3, r0, r1
   1b688:	b	1b8b8 <__assert_fail@plt+0x9c0c>
   1b68c:	mvn	r0, #0
   1b690:	mvn	r1, #0
   1b694:	mov	r2, r5
   1b698:	mov	sl, r3
   1b69c:	bl	31d00 <__assert_fail@plt+0x20054>
   1b6a0:	mov	ip, r1
   1b6a4:	subs	r1, r0, r6
   1b6a8:	umull	r3, lr, r6, r5
   1b6ac:	mov	r2, r5
   1b6b0:	sbcs	r1, ip, r7
   1b6b4:	mla	r6, r6, sl, lr
   1b6b8:	str	ip, [sp, #4]
   1b6bc:	mov	r1, #0
   1b6c0:	mla	r7, r7, r2, r6
   1b6c4:	movwcc	r1, #1
   1b6c8:	cmp	r1, #0
   1b6cc:	str	r1, [sp, #20]
   1b6d0:	mvnne	r3, #0
   1b6d4:	cmp	r1, #0
   1b6d8:	mov	r1, r0
   1b6dc:	umull	r4, r5, r3, r5
   1b6e0:	mvnne	r7, #0
   1b6e4:	mov	lr, r1
   1b6e8:	mla	r5, r3, sl, r5
   1b6ec:	subs	r3, r0, r3
   1b6f0:	sbcs	r0, ip, r7
   1b6f4:	mla	r5, r7, r2, r5
   1b6f8:	mov	r0, #0
   1b6fc:	movwcc	r0, #1
   1b700:	cmp	r0, #0
   1b704:	str	r0, [sp, #16]
   1b708:	mvnne	r4, #0
   1b70c:	mvnne	r5, #0
   1b710:	subs	r0, r1, r4
   1b714:	mov	r1, #0
   1b718:	sbcs	r0, ip, r5
   1b71c:	movwcc	r1, #1
   1b720:	umull	r3, r0, r4, r2
   1b724:	cmp	r1, #0
   1b728:	mla	r0, r4, sl, r0
   1b72c:	mov	r4, lr
   1b730:	str	r1, [sp, #12]
   1b734:	mvnne	r3, #0
   1b738:	mla	r0, r5, r2, r0
   1b73c:	cmp	r1, #0
   1b740:	str	r4, [sp]
   1b744:	umull	r7, r6, r3, r2
   1b748:	mvnne	r0, #0
   1b74c:	mla	r6, r3, sl, r6
   1b750:	subs	r3, lr, r3
   1b754:	mla	r5, r0, r2, r6
   1b758:	sbcs	r0, ip, r0
   1b75c:	mov	r3, #0
   1b760:	mov	r0, #0
   1b764:	movwcc	r0, #1
   1b768:	cmp	r0, #0
   1b76c:	str	r0, [sp, #8]
   1b770:	mvnne	r7, #0
   1b774:	mvnne	r5, #0
   1b778:	subs	r0, lr, r7
   1b77c:	sbcs	r0, ip, r5
   1b780:	movwcc	r3, #1
   1b784:	umull	r6, r0, r7, r2
   1b788:	cmp	r3, #0
   1b78c:	mla	r7, r7, sl, r0
   1b790:	mov	r0, ip
   1b794:	mvnne	r6, #0
   1b798:	mla	r7, r5, r2, r7
   1b79c:	cmp	r3, #0
   1b7a0:	mov	r5, #0
   1b7a4:	umull	r1, lr, r6, r2
   1b7a8:	mvnne	r7, #0
   1b7ac:	mla	lr, r6, sl, lr
   1b7b0:	subs	r6, r4, r6
   1b7b4:	mla	lr, r7, r2, lr
   1b7b8:	sbcs	r7, ip, r7
   1b7bc:	mov	ip, #0
   1b7c0:	movwcc	ip, #1
   1b7c4:	cmp	ip, #0
   1b7c8:	mvnne	r1, #0
   1b7cc:	mvnne	lr, #0
   1b7d0:	subs	r7, r4, r1
   1b7d4:	sbcs	r7, r0, lr
   1b7d8:	movwcc	r5, #1
   1b7dc:	umull	r0, r7, r1, r2
   1b7e0:	cmp	r5, #0
   1b7e4:	mla	r1, r1, sl, r7
   1b7e8:	mvnne	r0, #0
   1b7ec:	mla	r1, lr, r2, r1
   1b7f0:	cmp	r5, #0
   1b7f4:	umull	r6, r4, r0, r2
   1b7f8:	mvnne	r1, #0
   1b7fc:	mla	r4, r0, sl, r4
   1b800:	mla	r7, r1, r2, r4
   1b804:	ldr	r2, [sp]
   1b808:	subs	r0, r2, r0
   1b80c:	ldr	r2, [sp, #16]
   1b810:	ldr	r0, [sp, #4]
   1b814:	sbcs	r0, r0, r1
   1b818:	mov	r0, #0
   1b81c:	movwcc	r0, #1
   1b820:	cmp	r0, #0
   1b824:	mov	r1, r0
   1b828:	ldr	r0, [sp, #20]
   1b82c:	mvnne	r7, #0
   1b830:	mvnne	r6, #0
   1b834:	orr	r0, r0, r2
   1b838:	ldr	r2, [sp, #12]
   1b83c:	orr	r0, r0, r2
   1b840:	ldr	r2, [sp, #8]
   1b844:	orr	r0, r0, r2
   1b848:	orr	r0, r0, r3
   1b84c:	orr	r0, r0, ip
   1b850:	orr	r0, r0, r5
   1b854:	orr	r0, r0, r1
   1b858:	and	r3, r0, #1
   1b85c:	b	1b8b8 <__assert_fail@plt+0x9c0c>
   1b860:	mov	r1, #0
   1b864:	lsl	r2, r7, #9
   1b868:	lsl	r0, r6, #9
   1b86c:	lsr	r3, r7, #23
   1b870:	cmp	r1, r7, lsr #23
   1b874:	orr	r2, r2, r6, lsr #23
   1b878:	mvnne	r0, #0
   1b87c:	movwne	r3, #1
   1b880:	cmp	r1, r7, lsr #23
   1b884:	mvnne	r2, #0
   1b888:	mov	r6, r0
   1b88c:	mov	r7, r2
   1b890:	b	1b8b8 <__assert_fail@plt+0x9c0c>
   1b894:	lsl	r1, r7, #1
   1b898:	lsl	r0, r6, #1
   1b89c:	cmp	r7, #0
   1b8a0:	lsr	r3, r7, #31
   1b8a4:	orr	r1, r1, r6, lsr #31
   1b8a8:	mvnlt	r0, #0
   1b8ac:	mvnlt	r1, #0
   1b8b0:	mov	r6, r0
   1b8b4:	mov	r7, r1
   1b8b8:	ldr	r1, [sp, #32]
   1b8bc:	ldr	r2, [sp, #28]
   1b8c0:	orr	r8, r3, r8
   1b8c4:	add	r0, r1, r2
   1b8c8:	str	r0, [r9]
   1b8cc:	ldrb	r0, [r1, r2]
   1b8d0:	cmp	r0, #0
   1b8d4:	orrne	r8, r8, #2
   1b8d8:	ldr	r0, [sp, #36]	; 0x24
   1b8dc:	strd	r6, [r0]
   1b8e0:	mov	r0, r8
   1b8e4:	sub	sp, fp, #28
   1b8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8ec:	movw	r0, #13860	; 0x3624
   1b8f0:	movw	r1, #13898	; 0x364a
   1b8f4:	movw	r3, #13910	; 0x3656
   1b8f8:	mov	r2, #84	; 0x54
   1b8fc:	movt	r0, #3
   1b900:	movt	r1, #3
   1b904:	movt	r3, #3
   1b908:	bl	11cac <__assert_fail@plt>
   1b90c:	clz	r2, r1
   1b910:	clz	r3, r0
   1b914:	lsr	r2, r2, #5
   1b918:	lsr	r3, r3, #5
   1b91c:	orrs	r2, r3, r2
   1b920:	movwne	r1, #1
   1b924:	movwne	r0, #1
   1b928:	cmp	r1, #0
   1b92c:	beq	1b95c <__assert_fail@plt+0x9cb0>
   1b930:	mvn	r2, #-2147483648	; 0x80000000
   1b934:	udiv	r2, r2, r1
   1b938:	cmp	r2, r0
   1b93c:	bcs	1b95c <__assert_fail@plt+0x9cb0>
   1b940:	push	{fp, lr}
   1b944:	mov	fp, sp
   1b948:	bl	11af0 <__errno_location@plt>
   1b94c:	mov	r1, #12
   1b950:	str	r1, [r0]
   1b954:	mov	r0, #0
   1b958:	pop	{fp, pc}
   1b95c:	b	11820 <calloc@plt>
   1b960:	sub	sp, sp, #8
   1b964:	push	{r4, r5, r6, r7, fp, lr}
   1b968:	add	fp, sp, #16
   1b96c:	sub	sp, sp, #8
   1b970:	mov	r5, r0
   1b974:	add	r0, fp, #8
   1b978:	cmp	r1, #11
   1b97c:	str	r3, [fp, #12]
   1b980:	str	r2, [fp, #8]
   1b984:	str	r0, [sp, #4]
   1b988:	bhi	1b9c4 <__assert_fail@plt+0x9d18>
   1b98c:	mov	r0, #1
   1b990:	movw	r2, #1300	; 0x514
   1b994:	tst	r2, r0, lsl r1
   1b998:	bne	1ba84 <__assert_fail@plt+0x9dd8>
   1b99c:	movw	r2, #2570	; 0xa0a
   1b9a0:	tst	r2, r0, lsl r1
   1b9a4:	bne	1b9ec <__assert_fail@plt+0x9d40>
   1b9a8:	cmp	r1, #0
   1b9ac:	bne	1b9c4 <__assert_fail@plt+0x9d18>
   1b9b0:	ldr	r0, [sp, #4]
   1b9b4:	add	r1, r0, #4
   1b9b8:	str	r1, [sp, #4]
   1b9bc:	mov	r1, #0
   1b9c0:	b	1ba90 <__assert_fail@plt+0x9de4>
   1b9c4:	sub	r0, r1, #1024	; 0x400
   1b9c8:	cmp	r0, #10
   1b9cc:	bhi	1ba84 <__assert_fail@plt+0x9dd8>
   1b9d0:	mov	r2, #1
   1b9d4:	movw	r3, #645	; 0x285
   1b9d8:	tst	r3, r2, lsl r0
   1b9dc:	bne	1ba84 <__assert_fail@plt+0x9dd8>
   1b9e0:	movw	r3, #1282	; 0x502
   1b9e4:	tst	r3, r2, lsl r0
   1b9e8:	beq	1b9f8 <__assert_fail@plt+0x9d4c>
   1b9ec:	mov	r0, r5
   1b9f0:	bl	11b98 <fcntl64@plt>
   1b9f4:	b	1ba9c <__assert_fail@plt+0x9df0>
   1b9f8:	cmp	r0, #6
   1b9fc:	bne	1ba84 <__assert_fail@plt+0x9dd8>
   1ba00:	ldr	r0, [sp, #4]
   1ba04:	movw	r7, #17352	; 0x43c8
   1ba08:	movt	r7, #4
   1ba0c:	add	r1, r0, #4
   1ba10:	str	r1, [sp, #4]
   1ba14:	ldr	r6, [r0]
   1ba18:	ldr	r0, [r7]
   1ba1c:	cmp	r0, #0
   1ba20:	blt	1bac0 <__assert_fail@plt+0x9e14>
   1ba24:	mov	r0, r5
   1ba28:	movw	r1, #1030	; 0x406
   1ba2c:	mov	r2, r6
   1ba30:	bl	11b98 <fcntl64@plt>
   1ba34:	mov	r4, r0
   1ba38:	cmn	r0, #1
   1ba3c:	bgt	1bab4 <__assert_fail@plt+0x9e08>
   1ba40:	bl	11af0 <__errno_location@plt>
   1ba44:	ldr	r0, [r0]
   1ba48:	cmp	r0, #22
   1ba4c:	bne	1bab4 <__assert_fail@plt+0x9e08>
   1ba50:	mov	r0, r5
   1ba54:	mov	r1, #0
   1ba58:	mov	r2, r6
   1ba5c:	bl	11b98 <fcntl64@plt>
   1ba60:	mov	r4, r0
   1ba64:	cmp	r0, #0
   1ba68:	blt	1baa0 <__assert_fail@plt+0x9df4>
   1ba6c:	mvn	r0, #0
   1ba70:	str	r0, [r7]
   1ba74:	mov	r0, #1
   1ba78:	cmp	r0, #0
   1ba7c:	bne	1baec <__assert_fail@plt+0x9e40>
   1ba80:	b	1baa0 <__assert_fail@plt+0x9df4>
   1ba84:	ldr	r0, [sp, #4]
   1ba88:	add	r2, r0, #4
   1ba8c:	str	r2, [sp, #4]
   1ba90:	ldr	r2, [r0]
   1ba94:	mov	r0, r5
   1ba98:	bl	11b98 <fcntl64@plt>
   1ba9c:	mov	r4, r0
   1baa0:	mov	r0, r4
   1baa4:	sub	sp, fp, #16
   1baa8:	pop	{r4, r5, r6, r7, fp, lr}
   1baac:	add	sp, sp, #8
   1bab0:	bx	lr
   1bab4:	mov	r0, #1
   1bab8:	str	r0, [r7]
   1babc:	b	1baa0 <__assert_fail@plt+0x9df4>
   1bac0:	mov	r0, r5
   1bac4:	mov	r1, #0
   1bac8:	mov	r2, r6
   1bacc:	bl	11b98 <fcntl64@plt>
   1bad0:	mov	r4, r0
   1bad4:	ldr	r0, [r7]
   1bad8:	add	r0, r0, #1
   1badc:	clz	r0, r0
   1bae0:	lsr	r0, r0, #5
   1bae4:	cmp	r0, #0
   1bae8:	beq	1baa0 <__assert_fail@plt+0x9df4>
   1baec:	cmp	r4, #0
   1baf0:	blt	1baa0 <__assert_fail@plt+0x9df4>
   1baf4:	mov	r0, r4
   1baf8:	mov	r1, #1
   1bafc:	bl	11b98 <fcntl64@plt>
   1bb00:	cmp	r0, #0
   1bb04:	blt	1bb20 <__assert_fail@plt+0x9e74>
   1bb08:	orr	r2, r0, #1
   1bb0c:	mov	r0, r4
   1bb10:	mov	r1, #2
   1bb14:	bl	11b98 <fcntl64@plt>
   1bb18:	cmn	r0, #1
   1bb1c:	bne	1baa0 <__assert_fail@plt+0x9df4>
   1bb20:	bl	11af0 <__errno_location@plt>
   1bb24:	ldr	r6, [r0]
   1bb28:	mov	r5, r0
   1bb2c:	mov	r0, r4
   1bb30:	bl	11c88 <close@plt>
   1bb34:	str	r6, [r5]
   1bb38:	mvn	r4, #0
   1bb3c:	b	1baa0 <__assert_fail@plt+0x9df4>
   1bb40:	push	{r4, sl, fp, lr}
   1bb44:	add	fp, sp, #8
   1bb48:	sub	sp, sp, #8
   1bb4c:	mov	r4, r0
   1bb50:	cmp	r0, #0
   1bb54:	beq	1bb70 <__assert_fail@plt+0x9ec4>
   1bb58:	mov	r0, r4
   1bb5c:	bl	11a48 <__freading@plt>
   1bb60:	cmp	r0, #0
   1bb64:	ldrbne	r0, [r4, #1]
   1bb68:	tstne	r0, #1
   1bb6c:	bne	1bb80 <__assert_fail@plt+0x9ed4>
   1bb70:	mov	r0, r4
   1bb74:	sub	sp, fp, #8
   1bb78:	pop	{r4, sl, fp, lr}
   1bb7c:	b	11880 <fflush@plt>
   1bb80:	mov	r0, #1
   1bb84:	mov	r2, #0
   1bb88:	mov	r3, #0
   1bb8c:	str	r0, [sp]
   1bb90:	mov	r0, r4
   1bb94:	bl	1bbd0 <__assert_fail@plt+0x9f24>
   1bb98:	mov	r0, r4
   1bb9c:	sub	sp, fp, #8
   1bba0:	pop	{r4, sl, fp, lr}
   1bba4:	b	11880 <fflush@plt>
   1bba8:	push	{r4, r5, r6, sl, fp, lr}
   1bbac:	add	fp, sp, #16
   1bbb0:	mov	r4, r0
   1bbb4:	bl	11af0 <__errno_location@plt>
   1bbb8:	ldr	r6, [r0]
   1bbbc:	mov	r5, r0
   1bbc0:	mov	r0, r4
   1bbc4:	bl	118b0 <free@plt>
   1bbc8:	str	r6, [r5]
   1bbcc:	pop	{r4, r5, r6, sl, fp, pc}
   1bbd0:	push	{r4, r5, r6, r7, fp, lr}
   1bbd4:	add	fp, sp, #16
   1bbd8:	sub	sp, sp, #8
   1bbdc:	mov	r4, r0
   1bbe0:	ldr	r0, [r0, #4]
   1bbe4:	mov	r5, r3
   1bbe8:	mov	r6, r2
   1bbec:	ldr	r1, [r4, #8]
   1bbf0:	cmp	r1, r0
   1bbf4:	bne	1bc10 <__assert_fail@plt+0x9f64>
   1bbf8:	ldrd	r0, [r4, #16]
   1bbfc:	cmp	r1, r0
   1bc00:	bne	1bc10 <__assert_fail@plt+0x9f64>
   1bc04:	ldr	r0, [r4, #36]	; 0x24
   1bc08:	cmp	r0, #0
   1bc0c:	beq	1bc28 <__assert_fail@plt+0x9f7c>
   1bc10:	mov	r0, r4
   1bc14:	mov	r2, r6
   1bc18:	mov	r3, r5
   1bc1c:	sub	sp, fp, #16
   1bc20:	pop	{r4, r5, r6, r7, fp, lr}
   1bc24:	b	11b8c <fseeko64@plt>
   1bc28:	ldr	r7, [fp, #8]
   1bc2c:	mov	r0, r4
   1bc30:	bl	11b50 <fileno@plt>
   1bc34:	mov	r2, r6
   1bc38:	mov	r3, r5
   1bc3c:	str	r7, [sp]
   1bc40:	bl	119ac <lseek64@plt>
   1bc44:	and	r2, r0, r1
   1bc48:	cmn	r2, #1
   1bc4c:	mvneq	r0, #0
   1bc50:	subeq	sp, fp, #16
   1bc54:	popeq	{r4, r5, r6, r7, fp, pc}
   1bc58:	strd	r0, [r4, #80]	; 0x50
   1bc5c:	ldr	r0, [r4]
   1bc60:	bic	r0, r0, #16
   1bc64:	str	r0, [r4]
   1bc68:	mov	r0, #0
   1bc6c:	sub	sp, fp, #16
   1bc70:	pop	{r4, r5, r6, r7, fp, pc}
   1bc74:	cmp	r0, #0
   1bc78:	movweq	r0, #1
   1bc7c:	cmn	r0, #1
   1bc80:	ble	1bc88 <__assert_fail@plt+0x9fdc>
   1bc84:	b	11a24 <malloc@plt>
   1bc88:	push	{fp, lr}
   1bc8c:	mov	fp, sp
   1bc90:	bl	11af0 <__errno_location@plt>
   1bc94:	mov	r1, #12
   1bc98:	str	r1, [r0]
   1bc9c:	mov	r0, #0
   1bca0:	pop	{fp, pc}
   1bca4:	push	{r4, r5, r6, r7, fp, lr}
   1bca8:	add	fp, sp, #16
   1bcac:	sub	sp, sp, #8
   1bcb0:	add	r5, sp, #4
   1bcb4:	cmp	r0, #0
   1bcb8:	mov	r7, r2
   1bcbc:	mov	r4, r1
   1bcc0:	movne	r5, r0
   1bcc4:	mov	r0, r5
   1bcc8:	bl	119dc <mbrtowc@plt>
   1bccc:	mov	r6, r0
   1bcd0:	cmp	r7, #0
   1bcd4:	beq	1bcf8 <__assert_fail@plt+0xa04c>
   1bcd8:	cmn	r6, #2
   1bcdc:	bcc	1bcf8 <__assert_fail@plt+0xa04c>
   1bce0:	mov	r0, #0
   1bce4:	bl	316ac <__assert_fail@plt+0x1fa00>
   1bce8:	cmp	r0, #0
   1bcec:	ldrbeq	r0, [r4]
   1bcf0:	moveq	r6, #1
   1bcf4:	streq	r0, [r5]
   1bcf8:	mov	r0, r6
   1bcfc:	sub	sp, fp, #16
   1bd00:	pop	{r4, r5, r6, r7, fp, pc}
   1bd04:	push	{fp, lr}
   1bd08:	mov	fp, sp
   1bd0c:	cmp	r0, #0
   1bd10:	beq	1bd2c <__assert_fail@plt+0xa080>
   1bd14:	cmp	r1, #0
   1bd18:	beq	1bd38 <__assert_fail@plt+0xa08c>
   1bd1c:	cmn	r1, #1
   1bd20:	ble	1bd44 <__assert_fail@plt+0xa098>
   1bd24:	pop	{fp, lr}
   1bd28:	b	1194c <realloc@plt>
   1bd2c:	mov	r0, r1
   1bd30:	pop	{fp, lr}
   1bd34:	b	1bc74 <__assert_fail@plt+0x9fc8>
   1bd38:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1bd3c:	mov	r0, #0
   1bd40:	pop	{fp, pc}
   1bd44:	bl	11af0 <__errno_location@plt>
   1bd48:	mov	r1, #12
   1bd4c:	str	r1, [r0]
   1bd50:	mov	r0, #0
   1bd54:	pop	{fp, pc}
   1bd58:	cmp	r2, #0
   1bd5c:	beq	1bd8c <__assert_fail@plt+0xa0e0>
   1bd60:	mvn	r3, #0
   1bd64:	udiv	r3, r3, r2
   1bd68:	cmp	r3, r1
   1bd6c:	bcs	1bd8c <__assert_fail@plt+0xa0e0>
   1bd70:	push	{fp, lr}
   1bd74:	mov	fp, sp
   1bd78:	bl	11af0 <__errno_location@plt>
   1bd7c:	mov	r1, #12
   1bd80:	str	r1, [r0]
   1bd84:	mov	r0, #0
   1bd88:	pop	{fp, pc}
   1bd8c:	mul	r1, r2, r1
   1bd90:	b	1bd04 <__assert_fail@plt+0xa058>
	...
   1bda0:	push	{fp, lr}
   1bda4:	mov	fp, sp
   1bda8:	mov	lr, r0
   1bdac:	movw	r0, #17356	; 0x43cc
   1bdb0:	mov	ip, r1
   1bdb4:	ldrb	r1, [r2, #28]
   1bdb8:	movt	r0, #4
   1bdbc:	ldr	r3, [r0]
   1bdc0:	mov	r0, #16
   1bdc4:	and	r1, r1, #111	; 0x6f
   1bdc8:	and	r0, r0, r3, lsr #21
   1bdcc:	orr	r0, r1, r0
   1bdd0:	mov	r1, lr
   1bdd4:	orr	r0, r0, #128	; 0x80
   1bdd8:	strb	r0, [r2, #28]
   1bddc:	mov	r0, r2
   1bde0:	mov	r2, ip
   1bde4:	bl	1be20 <__assert_fail@plt+0xa174>
   1bde8:	cmp	r0, #0
   1bdec:	moveq	r0, #0
   1bdf0:	popeq	{fp, pc}
   1bdf4:	movw	r1, #14376	; 0x3828
   1bdf8:	mov	r2, #5
   1bdfc:	movt	r1, #3
   1be00:	ldr	r0, [r1, r0, lsl #2]
   1be04:	movw	r1, #13992	; 0x36a8
   1be08:	movt	r1, #3
   1be0c:	add	r1, r1, r0
   1be10:	mov	r0, #0
   1be14:	pop	{fp, lr}
   1be18:	b	11940 <dcgettext@plt>
   1be1c:	nop	{0}
   1be20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be24:	add	fp, sp, #28
   1be28:	sub	sp, sp, #140	; 0x8c
   1be2c:	mov	r9, r0
   1be30:	mov	r0, #0
   1be34:	mov	sl, r3
   1be38:	mov	r7, r2
   1be3c:	mov	r8, r1
   1be40:	str	r0, [fp, #-52]	; 0xffffffcc
   1be44:	str	r0, [r9, #8]
   1be48:	str	r3, [r9, #12]
   1be4c:	str	r0, [r9, #24]
   1be50:	ldrb	r0, [r9, #28]
   1be54:	and	r0, r0, #144	; 0x90
   1be58:	strb	r0, [r9, #28]
   1be5c:	ldr	r0, [r9, #4]
   1be60:	ldr	r6, [r9]
   1be64:	cmp	r0, #159	; 0x9f
   1be68:	bls	1c7f8 <__assert_fail@plt+0xab4c>
   1be6c:	mov	r0, #160	; 0xa0
   1be70:	mov	r1, #0
   1be74:	mov	r2, #160	; 0xa0
   1be78:	str	r0, [r9, #8]
   1be7c:	mov	r0, r6
   1be80:	bl	11b2c <memset@plt>
   1be84:	mov	r0, #31
   1be88:	str	r0, [r6, #64]	; 0x40
   1be8c:	movw	r0, #43689	; 0xaaa9
   1be90:	movt	r0, #2730	; 0xaaa
   1be94:	cmp	r7, r0
   1be98:	bhi	1c1b8 <__assert_fail@plt+0xa50c>
   1be9c:	add	r0, r7, #1
   1bea0:	str	r0, [r6, #4]
   1bea4:	str	r0, [sp, #28]
   1bea8:	lsl	r0, r0, #3
   1beac:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1beb0:	str	r0, [r6]
   1beb4:	mov	r0, #1
   1beb8:	mov	r4, r0
   1bebc:	lsl	r0, r0, #1
   1bec0:	cmp	r4, r7
   1bec4:	bls	1beb8 <__assert_fail@plt+0xa20c>
   1bec8:	mov	r0, #12
   1becc:	mov	r1, r4
   1bed0:	bl	1b90c <__assert_fail@plt+0x9c60>
   1bed4:	str	r0, [r6, #32]
   1bed8:	sub	r0, r4, #1
   1bedc:	str	r0, [r6, #68]	; 0x44
   1bee0:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   1bee4:	str	r0, [r6, #92]	; 0x5c
   1bee8:	mov	r0, #14
   1beec:	bl	11bbc <nl_langinfo@plt>
   1bef0:	ldrb	r1, [r0]
   1bef4:	orr	r1, r1, #32
   1bef8:	cmp	r1, #117	; 0x75
   1befc:	bne	1bf48 <__assert_fail@plt+0xa29c>
   1bf00:	ldrb	r1, [r0, #1]
   1bf04:	orr	r1, r1, #32
   1bf08:	cmp	r1, #116	; 0x74
   1bf0c:	bne	1bf48 <__assert_fail@plt+0xa29c>
   1bf10:	ldrb	r1, [r0, #2]
   1bf14:	orr	r1, r1, #32
   1bf18:	cmp	r1, #102	; 0x66
   1bf1c:	bne	1bf48 <__assert_fail@plt+0xa29c>
   1bf20:	ldrb	r1, [r0, #3]!
   1bf24:	cmp	r1, #45	; 0x2d
   1bf28:	movw	r1, #14492	; 0x389c
   1bf2c:	addeq	r0, r0, #1
   1bf30:	movt	r1, #3
   1bf34:	bl	1185c <strcmp@plt>
   1bf38:	cmp	r0, #0
   1bf3c:	ldrbeq	r0, [r6, #88]	; 0x58
   1bf40:	orreq	r0, r0, #4
   1bf44:	strbeq	r0, [r6, #88]	; 0x58
   1bf48:	ldrb	r0, [r6, #88]	; 0x58
   1bf4c:	and	r1, r0, #247	; 0xf7
   1bf50:	strb	r1, [r6, #88]	; 0x58
   1bf54:	ldr	r1, [r6, #92]	; 0x5c
   1bf58:	cmp	r1, #2
   1bf5c:	blt	1c1a4 <__assert_fail@plt+0xa4f8>
   1bf60:	tst	r0, #4
   1bf64:	bne	1c198 <__assert_fail@plt+0xa4ec>
   1bf68:	mov	r0, #32
   1bf6c:	mov	r1, #1
   1bf70:	mov	r5, #1
   1bf74:	bl	1b90c <__assert_fail@plt+0x9c60>
   1bf78:	cmp	r0, #0
   1bf7c:	str	r0, [r6, #60]	; 0x3c
   1bf80:	beq	1c1b8 <__assert_fail@plt+0xa50c>
   1bf84:	mov	r4, #0
   1bf88:	mov	r0, r4
   1bf8c:	bl	11b38 <btowc@plt>
   1bf90:	cmn	r0, #1
   1bf94:	ldrne	r1, [r6, #60]	; 0x3c
   1bf98:	ldrne	r2, [r1]
   1bf9c:	orrne	r2, r2, r5, lsl r4
   1bfa0:	strne	r2, [r1]
   1bfa4:	cmp	r4, r0
   1bfa8:	add	r4, r4, #1
   1bfac:	ldrbne	r0, [r6, #88]	; 0x58
   1bfb0:	orrne	r0, r0, #8
   1bfb4:	strbne	r0, [r6, #88]	; 0x58
   1bfb8:	cmp	r4, #32
   1bfbc:	bne	1bf88 <__assert_fail@plt+0xa2dc>
   1bfc0:	mov	r4, #32
   1bfc4:	mov	r5, #1
   1bfc8:	mov	r0, r4
   1bfcc:	bl	11b38 <btowc@plt>
   1bfd0:	cmn	r0, #1
   1bfd4:	ldrne	r2, [r6, #60]	; 0x3c
   1bfd8:	subne	r1, r4, #32
   1bfdc:	ldrne	r3, [r2, #4]
   1bfe0:	orrne	r1, r3, r5, lsl r1
   1bfe4:	strne	r1, [r2, #4]
   1bfe8:	cmp	r0, r4
   1bfec:	sub	r1, r4, #31
   1bff0:	ldrbne	r0, [r6, #88]	; 0x58
   1bff4:	orrne	r0, r0, #8
   1bff8:	strbne	r0, [r6, #88]	; 0x58
   1bffc:	add	r0, r4, #1
   1c000:	cmp	r1, #32
   1c004:	mov	r4, r0
   1c008:	bne	1bfc8 <__assert_fail@plt+0xa31c>
   1c00c:	mov	r4, #64	; 0x40
   1c010:	mov	r5, #1
   1c014:	mov	r0, r4
   1c018:	bl	11b38 <btowc@plt>
   1c01c:	cmn	r0, #1
   1c020:	ldrne	r2, [r6, #60]	; 0x3c
   1c024:	subne	r1, r4, #64	; 0x40
   1c028:	ldrne	r3, [r2, #8]
   1c02c:	orrne	r1, r3, r5, lsl r1
   1c030:	strne	r1, [r2, #8]
   1c034:	cmp	r0, r4
   1c038:	sub	r1, r4, #63	; 0x3f
   1c03c:	ldrbne	r0, [r6, #88]	; 0x58
   1c040:	orrne	r0, r0, #8
   1c044:	strbne	r0, [r6, #88]	; 0x58
   1c048:	add	r0, r4, #1
   1c04c:	cmp	r1, #32
   1c050:	mov	r4, r0
   1c054:	bne	1c014 <__assert_fail@plt+0xa368>
   1c058:	mov	r4, #96	; 0x60
   1c05c:	mov	r5, #1
   1c060:	mov	r0, r4
   1c064:	bl	11b38 <btowc@plt>
   1c068:	cmn	r0, #1
   1c06c:	ldrne	r2, [r6, #60]	; 0x3c
   1c070:	subne	r1, r4, #96	; 0x60
   1c074:	ldrne	r3, [r2, #12]
   1c078:	orrne	r1, r3, r5, lsl r1
   1c07c:	strne	r1, [r2, #12]
   1c080:	cmp	r0, r4
   1c084:	sub	r1, r4, #95	; 0x5f
   1c088:	ldrbne	r0, [r6, #88]	; 0x58
   1c08c:	orrne	r0, r0, #8
   1c090:	strbne	r0, [r6, #88]	; 0x58
   1c094:	add	r0, r4, #1
   1c098:	cmp	r1, #32
   1c09c:	mov	r4, r0
   1c0a0:	bne	1c060 <__assert_fail@plt+0xa3b4>
   1c0a4:	mov	r4, #128	; 0x80
   1c0a8:	mov	r5, #1
   1c0ac:	mov	r0, r4
   1c0b0:	bl	11b38 <btowc@plt>
   1c0b4:	cmn	r0, #1
   1c0b8:	ldrne	r1, [r6, #60]	; 0x3c
   1c0bc:	subne	r0, r4, #128	; 0x80
   1c0c0:	ldrne	r2, [r1, #16]
   1c0c4:	orrne	r0, r2, r5, lsl r0
   1c0c8:	strne	r0, [r1, #16]
   1c0cc:	sub	r1, r4, #127	; 0x7f
   1c0d0:	add	r0, r4, #1
   1c0d4:	cmp	r1, #32
   1c0d8:	mov	r4, r0
   1c0dc:	bne	1c0ac <__assert_fail@plt+0xa400>
   1c0e0:	mov	r4, #160	; 0xa0
   1c0e4:	mov	r5, #1
   1c0e8:	mov	r0, r4
   1c0ec:	bl	11b38 <btowc@plt>
   1c0f0:	cmn	r0, #1
   1c0f4:	ldrne	r1, [r6, #60]	; 0x3c
   1c0f8:	subne	r0, r4, #160	; 0xa0
   1c0fc:	ldrne	r2, [r1, #20]
   1c100:	orrne	r0, r2, r5, lsl r0
   1c104:	strne	r0, [r1, #20]
   1c108:	sub	r1, r4, #159	; 0x9f
   1c10c:	add	r0, r4, #1
   1c110:	cmp	r1, #32
   1c114:	mov	r4, r0
   1c118:	bne	1c0e8 <__assert_fail@plt+0xa43c>
   1c11c:	mov	r4, #192	; 0xc0
   1c120:	mov	r5, #1
   1c124:	mov	r0, r4
   1c128:	bl	11b38 <btowc@plt>
   1c12c:	cmn	r0, #1
   1c130:	ldrne	r1, [r6, #60]	; 0x3c
   1c134:	subne	r0, r4, #192	; 0xc0
   1c138:	ldrne	r2, [r1, #24]
   1c13c:	orrne	r0, r2, r5, lsl r0
   1c140:	strne	r0, [r1, #24]
   1c144:	sub	r1, r4, #191	; 0xbf
   1c148:	add	r0, r4, #1
   1c14c:	cmp	r1, #32
   1c150:	mov	r4, r0
   1c154:	bne	1c124 <__assert_fail@plt+0xa478>
   1c158:	mov	r4, #224	; 0xe0
   1c15c:	mov	r5, #1
   1c160:	mov	r0, r4
   1c164:	bl	11b38 <btowc@plt>
   1c168:	cmn	r0, #1
   1c16c:	ldrne	r1, [r6, #60]	; 0x3c
   1c170:	subne	r0, r4, #224	; 0xe0
   1c174:	ldrne	r2, [r1, #28]
   1c178:	orrne	r0, r2, r5, lsl r0
   1c17c:	strne	r0, [r1, #28]
   1c180:	sub	r1, r4, #223	; 0xdf
   1c184:	add	r0, r4, #1
   1c188:	cmp	r1, #32
   1c18c:	mov	r4, r0
   1c190:	bne	1c160 <__assert_fail@plt+0xa4b4>
   1c194:	b	1c1a4 <__assert_fail@plt+0xa4f8>
   1c198:	movw	r0, #14444	; 0x386c
   1c19c:	movt	r0, #3
   1c1a0:	str	r0, [r6, #60]	; 0x3c
   1c1a4:	ldr	r0, [r6]
   1c1a8:	cmp	r0, #0
   1c1ac:	ldrne	r0, [r6, #32]
   1c1b0:	cmpne	r0, #0
   1c1b4:	bne	1c1e0 <__assert_fail@plt+0xa534>
   1c1b8:	mov	r4, #12
   1c1bc:	mov	r0, r6
   1c1c0:	str	r4, [fp, #-52]	; 0xffffffcc
   1c1c4:	bl	1e06c <__assert_fail@plt+0xc3c0>
   1c1c8:	mov	r0, #0
   1c1cc:	str	r0, [r9]
   1c1d0:	str	r0, [r9, #4]
   1c1d4:	mov	r0, r4
   1c1d8:	sub	sp, fp, #28
   1c1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1e0:	movw	r0, #0
   1c1e4:	movw	r1, #0
   1c1e8:	mov	r4, #0
   1c1ec:	movt	r0, #0
   1c1f0:	movt	r1, #0
   1c1f4:	str	r4, [fp, #-52]	; 0xffffffcc
   1c1f8:	orrs	r0, r1, r0
   1c1fc:	str	r0, [sp, #8]
   1c200:	beq	1c218 <__assert_fail@plt+0xa56c>
   1c204:	add	r0, r6, #136	; 0x88
   1c208:	mov	r1, #0
   1c20c:	bl	118f8 <pthread_mutex_init@plt>
   1c210:	cmp	r0, #0
   1c214:	bne	1c1b8 <__assert_fail@plt+0xa50c>
   1c218:	add	r1, sp, #32
   1c21c:	vmov.i32	q8, #0	; 0x00000000
   1c220:	str	r9, [sp, #16]
   1c224:	ldr	r9, [r9, #20]
   1c228:	mov	r5, r8
   1c22c:	add	r0, r1, #64	; 0x40
   1c230:	vst1.32	{d16-d17}, [r0]
   1c234:	add	r0, r1, #52	; 0x34
   1c238:	vst1.32	{d16-d17}, [r0]
   1c23c:	add	r0, r1, #36	; 0x24
   1c240:	vst1.32	{d16-d17}, [r0]
   1c244:	add	r0, r1, #20
   1c248:	vst1.32	{d16-d17}, [r0]
   1c24c:	add	r0, r1, #4
   1c250:	add	r1, r1, #44	; 0x2c
   1c254:	vst1.32	{d16-d17}, [r0]
   1c258:	str	r8, [sp, #32]
   1c25c:	ubfx	r0, sl, #22, #1
   1c260:	str	sl, [sp, #24]
   1c264:	vdup.32	q8, r7
   1c268:	str	r6, [sp, #20]
   1c26c:	strb	r0, [sp, #104]	; 0x68
   1c270:	and	r0, sl, #4194304	; 0x400000
   1c274:	str	r9, [sp, #96]	; 0x60
   1c278:	orrs	sl, r0, r9
   1c27c:	str	r0, [sp, #12]
   1c280:	movwne	sl, #1
   1c284:	cmp	r7, #1
   1c288:	strb	sl, [sp, #107]	; 0x6b
   1c28c:	ldr	r0, [r6, #92]	; 0x5c
   1c290:	str	r0, [sp, #112]	; 0x70
   1c294:	ldrb	r2, [r6, #88]	; 0x58
   1c298:	vst1.32	{d16-d17}, [r1]
   1c29c:	ubfx	r1, r2, #3, #1
   1c2a0:	strb	r1, [sp, #106]	; 0x6a
   1c2a4:	ubfx	r1, r2, #2, #1
   1c2a8:	strb	r1, [sp, #105]	; 0x69
   1c2ac:	blt	1c320 <__assert_fail@plt+0xa674>
   1c2b0:	ldr	r6, [sp, #28]
   1c2b4:	cmp	r0, #2
   1c2b8:	blt	1c2e0 <__assert_fail@plt+0xa634>
   1c2bc:	mov	r8, #12
   1c2c0:	cmn	r6, #-1073741823	; 0xc0000001
   1c2c4:	bhi	1c7ec <__assert_fail@plt+0xab40>
   1c2c8:	lsl	r1, r6, #2
   1c2cc:	mov	r0, #0
   1c2d0:	bl	1bd04 <__assert_fail@plt+0xa058>
   1c2d4:	cmp	r0, #0
   1c2d8:	beq	1c7ec <__assert_fail@plt+0xab40>
   1c2dc:	str	r0, [sp, #40]	; 0x28
   1c2e0:	cmp	sl, #0
   1c2e4:	mov	r4, #0
   1c2e8:	mov	sl, #0
   1c2ec:	beq	1c310 <__assert_fail@plt+0xa664>
   1c2f0:	mov	r0, #0
   1c2f4:	mov	r1, r6
   1c2f8:	bl	1bd04 <__assert_fail@plt+0xa058>
   1c2fc:	cmp	r0, #0
   1c300:	beq	1c7e8 <__assert_fail@plt+0xab3c>
   1c304:	mov	r4, r0
   1c308:	mov	sl, #1
   1c30c:	str	r0, [sp, #36]	; 0x24
   1c310:	ldr	r0, [sp, #20]
   1c314:	str	r6, [sp, #68]	; 0x44
   1c318:	ldr	r0, [r0, #92]	; 0x5c
   1c31c:	b	1c324 <__assert_fail@plt+0xa678>
   1c320:	mov	r6, #0
   1c324:	ldr	r1, [sp, #12]
   1c328:	cmp	sl, #0
   1c32c:	moveq	r4, r5
   1c330:	str	r4, [sp, #36]	; 0x24
   1c334:	cmp	r1, #0
   1c338:	beq	1c41c <__assert_fail@plt+0xa770>
   1c33c:	cmp	r0, #2
   1c340:	blt	1c434 <__assert_fail@plt+0xa788>
   1c344:	add	r0, sp, #32
   1c348:	bl	21210 <__assert_fail@plt+0xf564>
   1c34c:	ldr	r9, [sp, #20]
   1c350:	cmp	r0, #0
   1c354:	bne	1c414 <__assert_fail@plt+0xa768>
   1c358:	add	sl, sp, #32
   1c35c:	ldr	r0, [sp, #64]	; 0x40
   1c360:	cmp	r0, r7
   1c364:	bge	1c530 <__assert_fail@plt+0xa884>
   1c368:	ldr	r0, [r9, #92]	; 0x5c
   1c36c:	ldr	r2, [sp, #60]	; 0x3c
   1c370:	ldr	r1, [sp, #68]	; 0x44
   1c374:	add	r0, r0, r2
   1c378:	cmp	r1, r0
   1c37c:	bgt	1c530 <__assert_fail@plt+0xa884>
   1c380:	ldr	r0, [sp, #112]	; 0x70
   1c384:	lsl	r6, r1, #1
   1c388:	cmp	r0, #2
   1c38c:	blt	1c3dc <__assert_fail@plt+0xa730>
   1c390:	mov	r8, #12
   1c394:	cmn	r6, #-1073741823	; 0xc0000001
   1c398:	bhi	1c7ec <__assert_fail@plt+0xab40>
   1c39c:	ldr	r0, [sp, #40]	; 0x28
   1c3a0:	lsl	r4, r1, #3
   1c3a4:	mov	r1, r4
   1c3a8:	bl	1bd04 <__assert_fail@plt+0xa058>
   1c3ac:	cmp	r0, #0
   1c3b0:	beq	1c7ec <__assert_fail@plt+0xab40>
   1c3b4:	str	r0, [sp, #40]	; 0x28
   1c3b8:	ldr	r0, [sp, #44]	; 0x2c
   1c3bc:	cmp	r0, #0
   1c3c0:	beq	1c3dc <__assert_fail@plt+0xa730>
   1c3c4:	mov	r1, r4
   1c3c8:	bl	1bd04 <__assert_fail@plt+0xa058>
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c7ec <__assert_fail@plt+0xab40>
   1c3d4:	ldr	r9, [sp, #20]
   1c3d8:	str	r0, [sp, #44]	; 0x2c
   1c3dc:	ldrb	r0, [sp, #107]	; 0x6b
   1c3e0:	cmp	r0, #0
   1c3e4:	beq	1c400 <__assert_fail@plt+0xa754>
   1c3e8:	ldr	r0, [sp, #36]	; 0x24
   1c3ec:	mov	r1, r6
   1c3f0:	bl	1bd04 <__assert_fail@plt+0xa058>
   1c3f4:	cmp	r0, #0
   1c3f8:	beq	1c7e8 <__assert_fail@plt+0xab3c>
   1c3fc:	str	r0, [sp, #36]	; 0x24
   1c400:	mov	r0, sl
   1c404:	str	r6, [sp, #68]	; 0x44
   1c408:	bl	21210 <__assert_fail@plt+0xf564>
   1c40c:	cmp	r0, #0
   1c410:	beq	1c35c <__assert_fail@plt+0xa6b0>
   1c414:	mov	r8, r0
   1c418:	b	1c7ec <__assert_fail@plt+0xab40>
   1c41c:	cmp	r0, #2
   1c420:	blt	1c4a0 <__assert_fail@plt+0xa7f4>
   1c424:	add	r0, sp, #32
   1c428:	bl	218d0 <__assert_fail@plt+0xfc24>
   1c42c:	ldr	r9, [sp, #20]
   1c430:	b	1c530 <__assert_fail@plt+0xa884>
   1c434:	cmp	r6, r7
   1c438:	movgt	r6, r7
   1c43c:	cmp	r6, #1
   1c440:	blt	1c50c <__assert_fail@plt+0xa860>
   1c444:	mov	r0, #0
   1c448:	mov	r4, #0
   1c44c:	b	1c45c <__assert_fail@plt+0xa7b0>
   1c450:	ldr	r5, [sp, #32]
   1c454:	ldr	r0, [sp, #56]	; 0x38
   1c458:	ldr	r9, [sp, #96]	; 0x60
   1c45c:	add	r0, r5, r0
   1c460:	cmp	r9, #0
   1c464:	ldrb	r5, [r0, r4]
   1c468:	ldrbne	r5, [r9, r5]
   1c46c:	add	r0, r5, #128	; 0x80
   1c470:	lsr	r0, r0, #7
   1c474:	cmp	r0, #2
   1c478:	bhi	1c488 <__assert_fail@plt+0xa7dc>
   1c47c:	bl	11a6c <__ctype_toupper_loc@plt>
   1c480:	ldr	r0, [r0]
   1c484:	ldr	r5, [r0, r5, lsl #2]
   1c488:	ldr	r0, [sp, #36]	; 0x24
   1c48c:	strb	r5, [r0, r4]
   1c490:	add	r4, r4, #1
   1c494:	cmp	r4, r6
   1c498:	blt	1c450 <__assert_fail@plt+0xa7a4>
   1c49c:	b	1c510 <__assert_fail@plt+0xa864>
   1c4a0:	cmp	r9, #0
   1c4a4:	beq	1c510 <__assert_fail@plt+0xa864>
   1c4a8:	cmp	r6, r7
   1c4ac:	movgt	r6, r7
   1c4b0:	cmp	r6, #1
   1c4b4:	blt	1c520 <__assert_fail@plt+0xa874>
   1c4b8:	ldrb	r0, [r5]
   1c4bc:	cmp	r6, #1
   1c4c0:	ldrb	r0, [r9, r0]
   1c4c4:	ldr	r9, [sp, #20]
   1c4c8:	strb	r0, [r4]
   1c4cc:	mov	r0, #1
   1c4d0:	beq	1c528 <__assert_fail@plt+0xa87c>
   1c4d4:	mov	r0, #1
   1c4d8:	ldr	r1, [sp, #32]
   1c4dc:	ldr	r3, [sp, #56]	; 0x38
   1c4e0:	ldr	r7, [sp, #96]	; 0x60
   1c4e4:	ldr	r2, [sp, #36]	; 0x24
   1c4e8:	add	r1, r1, r3
   1c4ec:	ldrb	r1, [r1, r0]
   1c4f0:	ldrb	r1, [r7, r1]
   1c4f4:	strb	r1, [r2, r0]
   1c4f8:	add	r0, r0, #1
   1c4fc:	cmp	r0, r6
   1c500:	blt	1c4d8 <__assert_fail@plt+0xa82c>
   1c504:	mov	r0, r6
   1c508:	b	1c528 <__assert_fail@plt+0xa87c>
   1c50c:	mov	r6, #0
   1c510:	ldr	r9, [sp, #20]
   1c514:	str	r6, [sp, #64]	; 0x40
   1c518:	str	r6, [sp, #60]	; 0x3c
   1c51c:	b	1c530 <__assert_fail@plt+0xa884>
   1c520:	ldr	r9, [sp, #20]
   1c524:	mov	r0, #0
   1c528:	str	r0, [sp, #64]	; 0x40
   1c52c:	str	r0, [sp, #60]	; 0x3c
   1c530:	ldr	sl, [sp, #16]
   1c534:	mov	r5, #0
   1c538:	ldr	r4, [sp, #24]
   1c53c:	sub	r8, fp, #48	; 0x30
   1c540:	add	r6, sp, #32
   1c544:	str	r5, [fp, #-52]	; 0xffffffcc
   1c548:	mov	r0, r8
   1c54c:	mov	r1, r6
   1c550:	str	r5, [sl, #24]
   1c554:	orr	r2, r4, #8388608	; 0x800000
   1c558:	ldr	r7, [sl]
   1c55c:	str	r4, [r7, #128]	; 0x80
   1c560:	bl	21e48 <__assert_fail@plt+0x1019c>
   1c564:	ldr	r1, [sp, #72]	; 0x48
   1c568:	mov	r2, r8
   1c56c:	mov	r3, r4
   1c570:	str	r5, [sp]
   1c574:	add	r0, r1, r0
   1c578:	mov	r1, sl
   1c57c:	str	r0, [sp, #72]	; 0x48
   1c580:	sub	r0, fp, #52	; 0x34
   1c584:	str	r0, [sp, #4]
   1c588:	mov	r0, r6
   1c58c:	bl	21ac0 <__assert_fail@plt+0xfe14>
   1c590:	mov	r4, r0
   1c594:	cmp	r0, #0
   1c598:	bne	1c5a8 <__assert_fail@plt+0xa8fc>
   1c59c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c5a0:	cmp	r0, #0
   1c5a4:	bne	1c884 <__assert_fail@plt+0xabd8>
   1c5a8:	ldr	r1, [r7, #64]	; 0x40
   1c5ac:	cmp	r1, #31
   1c5b0:	beq	1c81c <__assert_fail@plt+0xab70>
   1c5b4:	ldr	r0, [r7, #56]	; 0x38
   1c5b8:	add	r2, r1, #1
   1c5bc:	add	r0, r0, r1, lsl #5
   1c5c0:	mov	r1, #0
   1c5c4:	vmov.i32	q8, #0	; 0x00000000
   1c5c8:	str	r2, [r7, #64]	; 0x40
   1c5cc:	add	r6, r0, #4
   1c5d0:	mov	r2, #2
   1c5d4:	str	r1, [r0, #20]
   1c5d8:	str	r1, [r0, #24]
   1c5dc:	str	r2, [r0, #28]
   1c5e0:	mov	r0, #28
   1c5e4:	mov	r1, r6
   1c5e8:	vst1.32	{d16-d17}, [r1], r0
   1c5ec:	mvn	r0, #0
   1c5f0:	str	r0, [r1]
   1c5f4:	cmp	r4, #0
   1c5f8:	mov	r0, r6
   1c5fc:	beq	1c650 <__assert_fail@plt+0xa9a4>
   1c600:	ldr	r1, [r7, #64]	; 0x40
   1c604:	cmp	r1, #31
   1c608:	beq	1c854 <__assert_fail@plt+0xaba8>
   1c60c:	ldr	r0, [r7, #56]	; 0x38
   1c610:	add	r2, r1, #1
   1c614:	add	r0, r0, r1, lsl #5
   1c618:	mov	r1, #0
   1c61c:	mvn	r3, #0
   1c620:	cmp	r6, #0
   1c624:	str	r2, [r7, #64]	; 0x40
   1c628:	str	r1, [r0, #4]!
   1c62c:	mov	r2, #16
   1c630:	add	ip, r0, #20
   1c634:	stmib	r0, {r4, r6}
   1c638:	str	r1, [r0, #12]
   1c63c:	str	r1, [r0, #16]
   1c640:	stm	ip, {r1, r2, r3}
   1c644:	str	r0, [r4]
   1c648:	beq	1c87c <__assert_fail@plt+0xabd0>
   1c64c:	str	r0, [r6]
   1c650:	cmp	r6, #0
   1c654:	cmpne	r0, #0
   1c658:	beq	1c87c <__assert_fail@plt+0xabd0>
   1c65c:	str	r0, [r9, #52]	; 0x34
   1c660:	ldr	r8, [sl]
   1c664:	ldr	r0, [r8, #4]
   1c668:	lsl	r0, r0, #2
   1c66c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1c670:	str	r0, [r8, #12]
   1c674:	ldr	r0, [r8, #4]
   1c678:	lsl	r0, r0, #2
   1c67c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1c680:	str	r0, [r8, #16]
   1c684:	ldr	r0, [r8, #4]
   1c688:	add	r0, r0, r0, lsl #1
   1c68c:	lsl	r0, r0, #2
   1c690:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1c694:	str	r0, [r8, #20]
   1c698:	ldr	r0, [r8, #4]
   1c69c:	add	r0, r0, r0, lsl #1
   1c6a0:	lsl	r0, r0, #2
   1c6a4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1c6a8:	str	r0, [r8, #24]
   1c6ac:	ldr	r1, [r8, #12]
   1c6b0:	cmp	r1, #0
   1c6b4:	ldrne	r1, [r8, #16]
   1c6b8:	cmpne	r1, #0
   1c6bc:	beq	1c6d0 <__assert_fail@plt+0xaa24>
   1c6c0:	cmp	r0, #0
   1c6c4:	ldrne	r0, [r8, #20]
   1c6c8:	cmpne	r0, #0
   1c6cc:	bne	1c77c <__assert_fail@plt+0xaad0>
   1c6d0:	mov	r0, #12
   1c6d4:	str	r0, [fp, #-52]	; 0xffffffcc
   1c6d8:	ldr	r9, [sp, #20]
   1c6dc:	ldr	r4, [sl]
   1c6e0:	ldr	r0, [r4, #56]	; 0x38
   1c6e4:	cmp	r0, #0
   1c6e8:	beq	1c700 <__assert_fail@plt+0xaa54>
   1c6ec:	ldr	r5, [r0]
   1c6f0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1c6f4:	cmp	r5, #0
   1c6f8:	mov	r0, r5
   1c6fc:	bne	1c6ec <__assert_fail@plt+0xaa40>
   1c700:	mov	r0, #31
   1c704:	mov	r5, #0
   1c708:	str	r0, [r4, #64]	; 0x40
   1c70c:	str	r5, [r4, #52]	; 0x34
   1c710:	str	r5, [r4, #56]	; 0x38
   1c714:	ldr	r0, [r4, #16]
   1c718:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1c71c:	str	r5, [r4, #16]
   1c720:	ldr	r0, [sp, #40]	; 0x28
   1c724:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1c728:	ldr	r0, [sp, #44]	; 0x2c
   1c72c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1c730:	ldrb	r0, [sp, #107]	; 0x6b
   1c734:	cmp	r0, #0
   1c738:	beq	1c744 <__assert_fail@plt+0xaa98>
   1c73c:	ldr	r0, [sp, #36]	; 0x24
   1c740:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1c744:	ldr	r0, [sp, #8]
   1c748:	cmp	r0, #0
   1c74c:	beq	1c758 <__assert_fail@plt+0xaaac>
   1c750:	add	r0, r9, #136	; 0x88
   1c754:	bl	11874 <pthread_mutex_destroy@plt>
   1c758:	mov	r0, r9
   1c75c:	bl	1e06c <__assert_fail@plt+0xc3c0>
   1c760:	mov	r0, #0
   1c764:	str	r0, [sl]
   1c768:	str	r0, [sl, #4]
   1c76c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1c770:	mov	r0, r4
   1c774:	sub	sp, fp, #28
   1c778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c77c:	ldr	r0, [sl, #24]
   1c780:	lsl	r0, r0, #2
   1c784:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1c788:	cmp	r0, #0
   1c78c:	str	r0, [r8, #132]	; 0x84
   1c790:	str	r8, [sp, #28]
   1c794:	beq	1c7e0 <__assert_fail@plt+0xab34>
   1c798:	ldr	r1, [sl, #24]
   1c79c:	cmp	r1, #0
   1c7a0:	beq	1c8c4 <__assert_fail@plt+0xac18>
   1c7a4:	mov	r2, #0
   1c7a8:	cmp	r1, #4
   1c7ac:	bcc	1c8b4 <__assert_fail@plt+0xac08>
   1c7b0:	add	r3, pc, #984	; 0x3d8
   1c7b4:	bic	r2, r1, #3
   1c7b8:	vmov.i32	q8, #4	; 0x00000004
   1c7bc:	mov	r7, r0
   1c7c0:	vld1.64	{d18-d19}, [r3 :128]
   1c7c4:	mov	r3, r2
   1c7c8:	vadd.i32	q10, q9, q8
   1c7cc:	vst1.32	{d18-d19}, [r7]!
   1c7d0:	subs	r3, r3, #4
   1c7d4:	vorr	q9, q10, q10
   1c7d8:	bne	1c7c8 <__assert_fail@plt+0xab1c>
   1c7dc:	b	1c8bc <__assert_fail@plt+0xac10>
   1c7e0:	add	r8, r8, #52	; 0x34
   1c7e4:	b	1caa4 <__assert_fail@plt+0xadf8>
   1c7e8:	mov	r8, #12
   1c7ec:	ldr	sl, [sp, #16]
   1c7f0:	str	r8, [fp, #-52]	; 0xffffffcc
   1c7f4:	b	1c6d8 <__assert_fail@plt+0xaa2c>
   1c7f8:	mov	r0, r6
   1c7fc:	mov	r1, #160	; 0xa0
   1c800:	mov	r4, #160	; 0xa0
   1c804:	bl	1bd04 <__assert_fail@plt+0xa058>
   1c808:	cmp	r0, #0
   1c80c:	beq	1c844 <__assert_fail@plt+0xab98>
   1c810:	mov	r6, r0
   1c814:	stm	r9, {r0, r4}
   1c818:	b	1be6c <__assert_fail@plt+0xa1c0>
   1c81c:	mov	r0, #996	; 0x3e4
   1c820:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1c824:	cmp	r0, #0
   1c828:	beq	1c8a0 <__assert_fail@plt+0xabf4>
   1c82c:	ldr	r1, [r7, #56]	; 0x38
   1c830:	str	r1, [r0]
   1c834:	mov	r1, #0
   1c838:	str	r1, [r7, #64]	; 0x40
   1c83c:	str	r0, [r7, #56]	; 0x38
   1c840:	b	1c5b8 <__assert_fail@plt+0xa90c>
   1c844:	mov	r4, #12
   1c848:	mov	r0, r4
   1c84c:	sub	sp, fp, #28
   1c850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c854:	mov	r0, #996	; 0x3e4
   1c858:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1c85c:	cmp	r0, #0
   1c860:	beq	1c87c <__assert_fail@plt+0xabd0>
   1c864:	ldr	r1, [r7, #56]	; 0x38
   1c868:	str	r1, [r0]
   1c86c:	mov	r1, #0
   1c870:	str	r1, [r7, #64]	; 0x40
   1c874:	str	r0, [r7, #56]	; 0x38
   1c878:	b	1c610 <__assert_fail@plt+0xa964>
   1c87c:	mov	r0, #12
   1c880:	str	r0, [fp, #-52]	; 0xffffffcc
   1c884:	mov	r0, #0
   1c888:	str	r0, [r9, #52]	; 0x34
   1c88c:	ldr	r4, [sl]
   1c890:	ldr	r0, [r4, #56]	; 0x38
   1c894:	cmp	r0, #0
   1c898:	bne	1c6ec <__assert_fail@plt+0xaa40>
   1c89c:	b	1c700 <__assert_fail@plt+0xaa54>
   1c8a0:	mov	r6, #0
   1c8a4:	cmp	r4, #0
   1c8a8:	mov	r0, r6
   1c8ac:	bne	1c600 <__assert_fail@plt+0xa954>
   1c8b0:	b	1c650 <__assert_fail@plt+0xa9a4>
   1c8b4:	str	r2, [r0, r2, lsl #2]
   1c8b8:	add	r2, r2, #1
   1c8bc:	cmp	r1, r2
   1c8c0:	bne	1c8b4 <__assert_fail@plt+0xac08>
   1c8c4:	ldr	r2, [r8, #52]!	; 0x34
   1c8c8:	ldrb	r1, [r2, #24]
   1c8cc:	cmp	r1, #17
   1c8d0:	beq	1c900 <__assert_fail@plt+0xac54>
   1c8d4:	cmp	r1, #4
   1c8d8:	bne	1c954 <__assert_fail@plt+0xaca8>
   1c8dc:	ldr	r1, [r2, #20]
   1c8e0:	ldr	r7, [sp, #28]
   1c8e4:	mov	r3, #1
   1c8e8:	ldr	r0, [r0, r1, lsl #2]
   1c8ec:	str	r0, [r2, #20]
   1c8f0:	ldr	r1, [r7, #80]	; 0x50
   1c8f4:	orr	r0, r1, r3, lsl r0
   1c8f8:	str	r0, [r7, #80]	; 0x50
   1c8fc:	b	1c954 <__assert_fail@plt+0xaca8>
   1c900:	ldr	r1, [r2, #4]
   1c904:	cmp	r1, #0
   1c908:	beq	1c954 <__assert_fail@plt+0xaca8>
   1c90c:	ldrb	r3, [r1, #24]
   1c910:	cmp	r3, #17
   1c914:	bne	1c954 <__assert_fail@plt+0xaca8>
   1c918:	ldr	r3, [r1, #4]
   1c91c:	ldr	r1, [r1, #20]
   1c920:	cmp	r3, #0
   1c924:	str	r3, [r2, #4]
   1c928:	strne	r2, [r3]
   1c92c:	cmp	r1, #31
   1c930:	ldr	r3, [r2, #20]
   1c934:	ldr	r3, [r0, r3, lsl #2]
   1c938:	str	r3, [r0, r1, lsl #2]
   1c93c:	bgt	1c954 <__assert_fail@plt+0xaca8>
   1c940:	ldr	r7, [sp, #28]
   1c944:	mov	r3, #1
   1c948:	ldr	r0, [r7, #80]	; 0x50
   1c94c:	bic	r0, r0, r3, lsl r1
   1c950:	b	1c8f8 <__assert_fail@plt+0xac4c>
   1c954:	mov	r0, #1
   1c958:	b	1c97c <__assert_fail@plt+0xacd0>
   1c95c:	ldr	r2, [r7, #20]
   1c960:	ldr	r3, [sp, #28]
   1c964:	ldr	r1, [r1, r2, lsl #2]
   1c968:	str	r1, [r7, #20]
   1c96c:	ldr	r2, [r3, #80]	; 0x50
   1c970:	orr	r1, r2, r0, lsl r1
   1c974:	mov	r2, r7
   1c978:	str	r1, [r3, #80]	; 0x50
   1c97c:	ldr	r7, [r2, #4]
   1c980:	cmp	r7, #0
   1c984:	bne	1c9b4 <__assert_fail@plt+0xad08>
   1c988:	mov	r3, #0
   1c98c:	ldr	r7, [r2, #8]
   1c990:	mov	r1, r2
   1c994:	cmp	r7, r3
   1c998:	cmpne	r7, #0
   1c99c:	bne	1c9b4 <__assert_fail@plt+0xad08>
   1c9a0:	ldr	r2, [r1]
   1c9a4:	mov	r3, r1
   1c9a8:	cmp	r2, #0
   1c9ac:	bne	1c98c <__assert_fail@plt+0xace0>
   1c9b0:	b	1ca50 <__assert_fail@plt+0xada4>
   1c9b4:	ldrb	r1, [r7, #24]
   1c9b8:	cmp	r1, #17
   1c9bc:	beq	1c9e4 <__assert_fail@plt+0xad38>
   1c9c0:	cmp	r1, #4
   1c9c4:	mov	r2, r7
   1c9c8:	bne	1c97c <__assert_fail@plt+0xacd0>
   1c9cc:	ldr	r1, [sp, #28]
   1c9d0:	mov	r2, r7
   1c9d4:	ldr	r1, [r1, #132]	; 0x84
   1c9d8:	cmp	r1, #0
   1c9dc:	beq	1c97c <__assert_fail@plt+0xacd0>
   1c9e0:	b	1c95c <__assert_fail@plt+0xacb0>
   1c9e4:	ldr	r3, [r7, #4]
   1c9e8:	mov	r2, r7
   1c9ec:	cmp	r3, #0
   1c9f0:	beq	1c97c <__assert_fail@plt+0xacd0>
   1c9f4:	ldrb	r1, [r3, #24]
   1c9f8:	mov	r2, r7
   1c9fc:	cmp	r1, #17
   1ca00:	bne	1c97c <__assert_fail@plt+0xacd0>
   1ca04:	ldr	r1, [r3, #4]
   1ca08:	ldr	r2, [sp, #28]
   1ca0c:	ldr	r3, [r3, #20]
   1ca10:	cmp	r1, #0
   1ca14:	str	r1, [r7, #4]
   1ca18:	strne	r7, [r1]
   1ca1c:	cmp	r3, #31
   1ca20:	ldr	r1, [r7, #20]
   1ca24:	ldr	r2, [r2, #132]	; 0x84
   1ca28:	ldr	r1, [r2, r1, lsl #2]
   1ca2c:	str	r1, [r2, r3, lsl #2]
   1ca30:	mov	r2, r7
   1ca34:	bgt	1c97c <__assert_fail@plt+0xacd0>
   1ca38:	ldr	r2, [sp, #28]
   1ca3c:	ldr	r1, [r2, #80]	; 0x50
   1ca40:	bic	r1, r1, r0, lsl r3
   1ca44:	str	r1, [r2, #80]	; 0x50
   1ca48:	mov	r2, r7
   1ca4c:	b	1c97c <__assert_fail@plt+0xacd0>
   1ca50:	ldr	r1, [sl, #24]
   1ca54:	cmp	r1, #0
   1ca58:	beq	1ca8c <__assert_fail@plt+0xade0>
   1ca5c:	ldr	r0, [sp, #28]
   1ca60:	mov	r2, #0
   1ca64:	ldr	r0, [r0, #132]	; 0x84
   1ca68:	ldr	r3, [r0, r2, lsl #2]
   1ca6c:	cmp	r2, r3
   1ca70:	bne	1ca80 <__assert_fail@plt+0xadd4>
   1ca74:	add	r2, r2, #1
   1ca78:	cmp	r2, r1
   1ca7c:	bcc	1ca68 <__assert_fail@plt+0xadbc>
   1ca80:	cmp	r2, r1
   1ca84:	beq	1ca94 <__assert_fail@plt+0xade8>
   1ca88:	b	1caa4 <__assert_fail@plt+0xadf8>
   1ca8c:	ldr	r0, [sp, #28]
   1ca90:	ldr	r0, [r0, #132]	; 0x84
   1ca94:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1ca98:	ldr	r1, [sp, #28]
   1ca9c:	mov	r0, #0
   1caa0:	str	r0, [r1, #132]	; 0x84
   1caa4:	ldr	r0, [r8]
   1caa8:	mov	r7, #0
   1caac:	sub	r9, fp, #48	; 0x30
   1cab0:	mov	r4, r0
   1cab4:	ldr	r0, [r0, #4]
   1cab8:	cmp	r0, #0
   1cabc:	bne	1cab0 <__assert_fail@plt+0xae04>
   1cac0:	ldr	r0, [r4, #8]
   1cac4:	cmp	r0, #0
   1cac8:	bne	1cab0 <__assert_fail@plt+0xae04>
   1cacc:	mov	r3, #0
   1cad0:	cmp	r3, #0
   1cad4:	str	r7, [fp, #-48]	; 0xffffffd0
   1cad8:	beq	1cb28 <__assert_fail@plt+0xae7c>
   1cadc:	ldrb	r0, [r3, #24]
   1cae0:	cmp	r0, #17
   1cae4:	bne	1cb28 <__assert_fail@plt+0xae7c>
   1cae8:	ldrb	r2, [sl, #28]
   1caec:	ldr	r1, [sl]
   1caf0:	mov	r0, r9
   1caf4:	bl	263c8 <__assert_fail@plt+0x1471c>
   1caf8:	cmp	r0, #0
   1cafc:	str	r0, [r4, #4]
   1cb00:	strne	r4, [r0]
   1cb04:	ldr	r3, [r4, #8]
   1cb08:	cmp	r3, #0
   1cb0c:	bne	1cb34 <__assert_fail@plt+0xae88>
   1cb10:	b	1cb5c <__assert_fail@plt+0xaeb0>
   1cb14:	ldr	r3, [r1, #4]
   1cb18:	mov	r4, r1
   1cb1c:	cmp	r3, #0
   1cb20:	str	r7, [fp, #-48]	; 0xffffffd0
   1cb24:	bne	1cadc <__assert_fail@plt+0xae30>
   1cb28:	ldr	r3, [r4, #8]
   1cb2c:	cmp	r3, #0
   1cb30:	beq	1cb5c <__assert_fail@plt+0xaeb0>
   1cb34:	ldrb	r0, [r3, #24]
   1cb38:	cmp	r0, #17
   1cb3c:	bne	1cb5c <__assert_fail@plt+0xaeb0>
   1cb40:	ldrb	r2, [sl, #28]
   1cb44:	ldr	r1, [sl]
   1cb48:	mov	r0, r9
   1cb4c:	bl	263c8 <__assert_fail@plt+0x1471c>
   1cb50:	cmp	r0, #0
   1cb54:	str	r0, [r4, #8]
   1cb58:	strne	r4, [r0]
   1cb5c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1cb60:	cmp	r0, #0
   1cb64:	bne	1c6d4 <__assert_fail@plt+0xaa28>
   1cb68:	ldr	r1, [r4]
   1cb6c:	cmp	r1, #0
   1cb70:	beq	1cba0 <__assert_fail@plt+0xaef4>
   1cb74:	ldr	r0, [r1, #8]
   1cb78:	cmp	r0, r4
   1cb7c:	cmpne	r0, #0
   1cb80:	beq	1cb14 <__assert_fail@plt+0xae68>
   1cb84:	b	1cab0 <__assert_fail@plt+0xae04>
   1cb88:	nop	{0}
   1cb8c:	nop	{0}
   1cb90:	andeq	r0, r0, r0
   1cb94:	andeq	r0, r0, r1
   1cb98:	andeq	r0, r0, r2
   1cb9c:	andeq	r0, r0, r3
   1cba0:	ldr	r0, [sp, #28]
   1cba4:	ldr	r0, [r0, #52]	; 0x34
   1cba8:	mov	r4, r0
   1cbac:	ldr	r0, [r0, #4]
   1cbb0:	cmp	r0, #0
   1cbb4:	bne	1cba8 <__assert_fail@plt+0xaefc>
   1cbb8:	ldr	r0, [r4, #8]
   1cbbc:	cmp	r0, #0
   1cbc0:	bne	1cba8 <__assert_fail@plt+0xaefc>
   1cbc4:	ldr	r2, [r4, #24]
   1cbc8:	uxtb	r0, r2
   1cbcc:	cmp	r0, #16
   1cbd0:	bne	1cc14 <__assert_fail@plt+0xaf68>
   1cbd4:	ldr	r0, [r4, #4]
   1cbd8:	ldr	r1, [r0, #12]
   1cbdc:	str	r1, [r4, #12]
   1cbe0:	ldr	r0, [r0, #28]
   1cbe4:	str	r0, [r4, #28]
   1cbe8:	ldr	r1, [r4]
   1cbec:	cmp	r1, #0
   1cbf0:	beq	1cc64 <__assert_fail@plt+0xafb8>
   1cbf4:	ldr	r0, [r1, #8]
   1cbf8:	cmp	r0, r4
   1cbfc:	mov	r4, r1
   1cc00:	beq	1cbc4 <__assert_fail@plt+0xaf18>
   1cc04:	cmp	r0, #0
   1cc08:	mov	r4, r1
   1cc0c:	beq	1cbc4 <__assert_fail@plt+0xaf18>
   1cc10:	b	1cba8 <__assert_fail@plt+0xaefc>
   1cc14:	str	r4, [r4, #12]
   1cc18:	ldr	r0, [sp, #28]
   1cc1c:	ldr	r1, [r4, #20]
   1cc20:	bl	266b0 <__assert_fail@plt+0x14a04>
   1cc24:	cmn	r0, #1
   1cc28:	str	r0, [r4, #28]
   1cc2c:	beq	1c6d0 <__assert_fail@plt+0xaa24>
   1cc30:	ldrb	r1, [r4, #24]
   1cc34:	cmp	r1, #12
   1cc38:	bne	1cc58 <__assert_fail@plt+0xafac>
   1cc3c:	ldr	r1, [sp, #28]
   1cc40:	ldr	r2, [r4, #20]
   1cc44:	ldr	r1, [r1]
   1cc48:	add	r0, r1, r0, lsl #3
   1cc4c:	ldr	r1, [r0, #4]
   1cc50:	bfi	r1, r2, #8, #10
   1cc54:	str	r1, [r0, #4]
   1cc58:	ldr	r1, [r4]
   1cc5c:	cmp	r1, #0
   1cc60:	bne	1cbf4 <__assert_fail@plt+0xaf48>
   1cc64:	ldr	r4, [r8]
   1cc68:	ldrb	r0, [r4, #24]
   1cc6c:	cmp	r0, #16
   1cc70:	beq	1cc8c <__assert_fail@plt+0xafe0>
   1cc74:	ldr	r8, [sp, #28]
   1cc78:	cmp	r0, #11
   1cc7c:	bne	1cca8 <__assert_fail@plt+0xaffc>
   1cc80:	ldr	r0, [r4, #4]
   1cc84:	str	r4, [r0, #16]
   1cc88:	b	1ccc8 <__assert_fail@plt+0xb01c>
   1cc8c:	ldmib	r4, {r0, r1}
   1cc90:	ldr	r8, [sp, #28]
   1cc94:	ldr	r2, [r1, #12]
   1cc98:	str	r2, [r0, #16]
   1cc9c:	ldr	r2, [r4, #16]
   1cca0:	str	r2, [r1, #16]
   1cca4:	b	1ccc8 <__assert_fail@plt+0xb01c>
   1cca8:	ldr	r0, [r4, #4]
   1ccac:	cmp	r0, #0
   1ccb0:	ldrne	r1, [r4, #16]
   1ccb4:	strne	r1, [r0, #16]
   1ccb8:	ldr	r1, [r4, #8]
   1ccbc:	cmp	r1, #0
   1ccc0:	ldrne	r2, [r4, #16]
   1ccc4:	strne	r2, [r1, #16]
   1ccc8:	mov	r1, r4
   1cccc:	b	1ccec <__assert_fail@plt+0xb040>
   1ccd0:	ldr	r3, [r1, #16]
   1ccd4:	str	r3, [r2, #16]
   1ccd8:	b	1ccec <__assert_fail@plt+0xb040>
   1ccdc:	ldmib	r1, {r0, r2}
   1cce0:	ldr	r3, [r2, #12]
   1cce4:	str	r3, [r0, #16]
   1cce8:	b	1ccd0 <__assert_fail@plt+0xb024>
   1ccec:	cmp	r0, #0
   1ccf0:	bne	1cd20 <__assert_fail@plt+0xb074>
   1ccf4:	mov	r3, #0
   1ccf8:	ldr	r0, [r1, #8]
   1ccfc:	mov	r2, r1
   1cd00:	cmp	r0, r3
   1cd04:	cmpne	r0, #0
   1cd08:	bne	1cd20 <__assert_fail@plt+0xb074>
   1cd0c:	ldr	r1, [r2]
   1cd10:	mov	r3, r2
   1cd14:	cmp	r1, #0
   1cd18:	bne	1ccf8 <__assert_fail@plt+0xb04c>
   1cd1c:	b	1cd64 <__assert_fail@plt+0xb0b8>
   1cd20:	mov	r1, r0
   1cd24:	ldrb	r0, [r0, #24]
   1cd28:	cmp	r0, #16
   1cd2c:	beq	1ccdc <__assert_fail@plt+0xb030>
   1cd30:	cmp	r0, #11
   1cd34:	bne	1cd44 <__assert_fail@plt+0xb098>
   1cd38:	ldr	r0, [r1, #4]
   1cd3c:	str	r1, [r0, #16]
   1cd40:	b	1ccec <__assert_fail@plt+0xb040>
   1cd44:	ldr	r0, [r1, #4]
   1cd48:	cmp	r0, #0
   1cd4c:	ldrne	r2, [r1, #16]
   1cd50:	strne	r2, [r0, #16]
   1cd54:	ldr	r2, [r1, #8]
   1cd58:	cmp	r2, #0
   1cd5c:	beq	1ccec <__assert_fail@plt+0xb040>
   1cd60:	b	1ccd0 <__assert_fail@plt+0xb024>
   1cd64:	mov	r0, r8
   1cd68:	mov	r1, r4
   1cd6c:	bl	26230 <__assert_fail@plt+0x14584>
   1cd70:	cmp	r0, #0
   1cd74:	bne	1c6d4 <__assert_fail@plt+0xaa28>
   1cd78:	ldr	r7, [r4, #4]
   1cd7c:	cmp	r7, #0
   1cd80:	bne	1cdb0 <__assert_fail@plt+0xb104>
   1cd84:	mov	r1, #0
   1cd88:	ldr	r7, [r4, #8]
   1cd8c:	mov	r0, r4
   1cd90:	cmp	r7, r1
   1cd94:	cmpne	r7, #0
   1cd98:	bne	1cdb0 <__assert_fail@plt+0xb104>
   1cd9c:	ldr	r4, [r0]
   1cda0:	mov	r1, r0
   1cda4:	cmp	r4, #0
   1cda8:	bne	1cd88 <__assert_fail@plt+0xb0dc>
   1cdac:	b	1cdcc <__assert_fail@plt+0xb120>
   1cdb0:	mov	r0, r8
   1cdb4:	mov	r1, r7
   1cdb8:	bl	26230 <__assert_fail@plt+0x14584>
   1cdbc:	cmp	r0, #0
   1cdc0:	mov	r4, r7
   1cdc4:	beq	1cd78 <__assert_fail@plt+0xb0cc>
   1cdc8:	b	1c6d4 <__assert_fail@plt+0xaa28>
   1cdcc:	ldr	r0, [r8, #8]
   1cdd0:	cmp	r0, #0
   1cdd4:	beq	1ce84 <__assert_fail@plt+0xb1d8>
   1cdd8:	mov	r5, #0
   1cddc:	sub	r4, fp, #48	; 0x30
   1cde0:	mov	r7, #0
   1cde4:	ldr	r0, [r8, #24]
   1cde8:	add	r6, r7, r7, lsl #1
   1cdec:	add	r0, r0, r6, lsl #2
   1cdf0:	ldr	r0, [r0, #4]
   1cdf4:	cmp	r0, #0
   1cdf8:	beq	1ce04 <__assert_fail@plt+0xb158>
   1cdfc:	mov	r1, r5
   1ce00:	b	1ce44 <__assert_fail@plt+0xb198>
   1ce04:	mov	r0, r4
   1ce08:	mov	r1, r8
   1ce0c:	mov	r2, r7
   1ce10:	mov	r3, #1
   1ce14:	bl	26888 <__assert_fail@plt+0x14bdc>
   1ce18:	cmp	r0, #0
   1ce1c:	bne	1c6d4 <__assert_fail@plt+0xaa28>
   1ce20:	ldr	r0, [r8, #24]
   1ce24:	mov	r1, r5
   1ce28:	add	r0, r0, r6, lsl #2
   1ce2c:	ldr	r0, [r0, #4]
   1ce30:	cmp	r0, #0
   1ce34:	bne	1ce44 <__assert_fail@plt+0xb198>
   1ce38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ce3c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1ce40:	mov	r1, #1
   1ce44:	ldr	r2, [r8, #8]
   1ce48:	add	r0, r7, #1
   1ce4c:	subs	r3, r0, r2
   1ce50:	mov	r7, r3
   1ce54:	movwne	r3, #1
   1ce58:	movne	r7, r0
   1ce5c:	tst	r1, #1
   1ce60:	and	r5, r1, r3
   1ce64:	cmpeq	r0, r2
   1ce68:	bne	1cde4 <__assert_fail@plt+0xb138>
   1ce6c:	add	r0, r0, r0, lsl #1
   1ce70:	lsl	r0, r0, #2
   1ce74:	ldrb	r1, [sl, #28]
   1ce78:	tst	r1, #16
   1ce7c:	beq	1ce94 <__assert_fail@plt+0xb1e8>
   1ce80:	b	1ceac <__assert_fail@plt+0xb200>
   1ce84:	mov	r0, #0
   1ce88:	ldrb	r1, [sl, #28]
   1ce8c:	tst	r1, #16
   1ce90:	bne	1ceac <__assert_fail@plt+0xb200>
   1ce94:	ldr	r1, [sp, #16]
   1ce98:	ldr	r1, [r1, #24]
   1ce9c:	cmp	r1, #0
   1cea0:	ldrbne	r1, [r8, #88]	; 0x58
   1cea4:	tstne	r1, #1
   1cea8:	bne	1ceb8 <__assert_fail@plt+0xb20c>
   1ceac:	ldr	r1, [r8, #76]	; 0x4c
   1ceb0:	cmp	r1, #0
   1ceb4:	beq	1cfe4 <__assert_fail@plt+0xb338>
   1ceb8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1cebc:	cmp	r0, #0
   1cec0:	str	r0, [r8, #28]
   1cec4:	beq	1d4ac <__assert_fail@plt+0xb800>
   1cec8:	ldr	r1, [r8, #8]
   1cecc:	cmp	r1, #0
   1ced0:	beq	1cfe4 <__assert_fail@plt+0xb338>
   1ced4:	mov	r1, #0
   1ced8:	str	r1, [r0]
   1cedc:	str	r1, [r0, #4]
   1cee0:	str	r1, [r0, #8]
   1cee4:	ldr	r0, [r8, #8]
   1cee8:	cmp	r0, #2
   1ceec:	bcc	1cf1c <__assert_fail@plt+0xb270>
   1cef0:	mov	r2, #1
   1cef4:	mov	r3, #12
   1cef8:	ldr	r0, [r8, #28]
   1cefc:	add	r2, r2, #1
   1cf00:	str	r1, [r0, r3]!
   1cf04:	add	r3, r3, #12
   1cf08:	str	r1, [r0, #4]
   1cf0c:	str	r1, [r0, #8]
   1cf10:	ldr	r0, [r8, #8]
   1cf14:	cmp	r2, r0
   1cf18:	bcc	1cef8 <__assert_fail@plt+0xb24c>
   1cf1c:	cmp	r0, #0
   1cf20:	beq	1cfe4 <__assert_fail@plt+0xb338>
   1cf24:	ldr	ip, [r8, #24]
   1cf28:	mov	sl, #0
   1cf2c:	add	r9, sl, sl, lsl #1
   1cf30:	add	r2, ip, r9, lsl #2
   1cf34:	ldr	r3, [r2, #4]
   1cf38:	cmp	r3, #1
   1cf3c:	blt	1cfd8 <__assert_fail@plt+0xb32c>
   1cf40:	ldr	r1, [r2, #8]
   1cf44:	mov	r6, #0
   1cf48:	str	r1, [sp, #24]
   1cf4c:	ldr	r0, [r1, r6, lsl #2]
   1cf50:	ldr	r5, [r8, #28]
   1cf54:	add	r0, r0, r0, lsl #1
   1cf58:	mov	r3, r5
   1cf5c:	ldr	r7, [r3, r0, lsl #2]!
   1cf60:	mov	r4, r3
   1cf64:	ldr	r2, [r4, #4]!
   1cf68:	cmp	r7, r2
   1cf6c:	bne	1cfac <__assert_fail@plt+0xb300>
   1cf70:	mov	r1, #2
   1cf74:	add	r8, r5, r0, lsl #2
   1cf78:	add	r1, r1, r7, lsl #1
   1cf7c:	str	r1, [r3]
   1cf80:	lsl	r1, r1, #2
   1cf84:	ldr	r0, [r8, #8]!
   1cf88:	bl	1bd04 <__assert_fail@plt+0xa058>
   1cf8c:	cmp	r0, #0
   1cf90:	beq	1d4ac <__assert_fail@plt+0xb800>
   1cf94:	str	r0, [r8]
   1cf98:	ldr	r8, [sp, #28]
   1cf9c:	ldr	r1, [sp, #24]
   1cfa0:	ldr	r2, [r4]
   1cfa4:	ldr	ip, [r8, #24]
   1cfa8:	b	1cfb4 <__assert_fail@plt+0xb308>
   1cfac:	add	r0, r5, r0, lsl #2
   1cfb0:	ldr	r0, [r0, #8]
   1cfb4:	add	r3, r2, #1
   1cfb8:	add	r6, r6, #1
   1cfbc:	str	r3, [r4]
   1cfc0:	str	sl, [r0, r2, lsl #2]
   1cfc4:	add	r0, ip, r9, lsl #2
   1cfc8:	ldr	r0, [r0, #4]
   1cfcc:	cmp	r6, r0
   1cfd0:	blt	1cf4c <__assert_fail@plt+0xb2a0>
   1cfd4:	ldr	r0, [r8, #8]
   1cfd8:	add	sl, sl, #1
   1cfdc:	cmp	sl, r0
   1cfe0:	bcc	1cf2c <__assert_fail@plt+0xb280>
   1cfe4:	mov	r0, #0
   1cfe8:	ldr	r1, [sp, #16]
   1cfec:	str	r0, [fp, #-52]	; 0xffffffcc
   1cff0:	ldr	r0, [sp, #12]
   1cff4:	cmp	r0, #0
   1cff8:	bne	1d1c8 <__assert_fail@plt+0xb51c>
   1cffc:	ldr	r0, [sp, #20]
   1d000:	ldrb	r2, [r0, #88]	; 0x58
   1d004:	ands	r0, r2, #4
   1d008:	beq	1d1c8 <__assert_fail@plt+0xb51c>
   1d00c:	ldr	r0, [r1, #20]
   1d010:	cmp	r0, #0
   1d014:	bne	1d1c8 <__assert_fail@plt+0xb51c>
   1d018:	ldr	r0, [sp, #20]
   1d01c:	mov	r9, #0
   1d020:	ldr	r7, [r0, #8]
   1d024:	cmp	r7, #0
   1d028:	beq	1d198 <__assert_fail@plt+0xb4ec>
   1d02c:	ldr	r3, [r0]
   1d030:	mov	r8, #0
   1d034:	mov	ip, #1
   1d038:	mov	lr, #139	; 0x8b
   1d03c:	mov	r6, #0
   1d040:	mov	r4, #0
   1d044:	add	r5, r3, r4, lsl #3
   1d048:	ldrb	r1, [r5, #4]
   1d04c:	sub	r1, r1, #1
   1d050:	cmp	r1, #11
   1d054:	bhi	1d514 <__assert_fail@plt+0xb868>
   1d058:	add	r0, pc, #0
   1d05c:	ldr	pc, [r0, r1, lsl #2]
   1d060:	strdeq	sp, [r1], -r4
   1d064:	muleq	r1, r0, r0
   1d068:	andeq	sp, r1, r0, lsr #1
   1d06c:	muleq	r1, r0, r0
   1d070:	andeq	sp, r1, r8, lsl r1
   1d074:	andeq	sp, r1, r8, asr #3
   1d078:	andeq	sp, r1, r4, lsl r5
   1d07c:	muleq	r1, r0, r0
   1d080:	muleq	r1, r0, r0
   1d084:	muleq	r1, r0, r0
   1d088:	muleq	r1, r0, r0
   1d08c:	ldrdeq	sp, [r1], -r4
   1d090:	add	r4, r4, #1
   1d094:	cmp	r4, r7
   1d098:	bcc	1d044 <__assert_fail@plt+0xb398>
   1d09c:	b	1d128 <__assert_fail@plt+0xb47c>
   1d0a0:	ldr	r5, [r3, r4, lsl #3]
   1d0a4:	ldr	r0, [r5, #16]
   1d0a8:	cmp	r0, #0
   1d0ac:	bne	1d1c8 <__assert_fail@plt+0xb51c>
   1d0b0:	ldr	r0, [r5, #20]
   1d0b4:	cmp	r0, #0
   1d0b8:	ldreq	r0, [r5, #24]
   1d0bc:	cmpeq	r0, #0
   1d0c0:	bne	1d1c8 <__assert_fail@plt+0xb51c>
   1d0c4:	ldr	r0, [r5, #28]
   1d0c8:	cmp	r0, #0
   1d0cc:	beq	1d090 <__assert_fail@plt+0xb3e4>
   1d0d0:	b	1d1c8 <__assert_fail@plt+0xb51c>
   1d0d4:	ldr	r0, [r3, r4, lsl #3]
   1d0d8:	sub	r0, r0, #16
   1d0dc:	ror	r1, r0, #4
   1d0e0:	cmp	r1, #7
   1d0e4:	bhi	1d1c8 <__assert_fail@plt+0xb51c>
   1d0e8:	tst	lr, ip, lsl r1
   1d0ec:	bne	1d090 <__assert_fail@plt+0xb3e4>
   1d0f0:	b	1d1c8 <__assert_fail@plt+0xb51c>
   1d0f4:	ldrsb	r0, [r5]
   1d0f8:	cmp	r0, #0
   1d0fc:	mov	r0, #0
   1d100:	movwlt	r0, #1
   1d104:	orr	r6, r6, r0
   1d108:	add	r4, r4, #1
   1d10c:	cmp	r4, r7
   1d110:	bcc	1d044 <__assert_fail@plt+0xb398>
   1d114:	b	1d128 <__assert_fail@plt+0xb47c>
   1d118:	mov	r8, #1
   1d11c:	add	r4, r4, #1
   1d120:	cmp	r4, r7
   1d124:	bcc	1d044 <__assert_fail@plt+0xb398>
   1d128:	orr	r0, r6, r8
   1d12c:	tst	r0, #1
   1d130:	beq	1d19c <__assert_fail@plt+0xb4f0>
   1d134:	mov	r2, #0
   1d138:	mov	r7, #7
   1d13c:	b	1d144 <__assert_fail@plt+0xb498>
   1d140:	ldr	r3, [r1]
   1d144:	add	r3, r3, r2, lsl #3
   1d148:	ldr	r6, [r3, #4]
   1d14c:	uxtb	r1, r6
   1d150:	cmp	r1, #5
   1d154:	beq	1d174 <__assert_fail@plt+0xb4c8>
   1d158:	cmp	r1, #1
   1d15c:	bne	1d17c <__assert_fail@plt+0xb4d0>
   1d160:	ldrsb	r0, [r3]
   1d164:	cmn	r0, #1
   1d168:	bicle	r0, r6, #2097152	; 0x200000
   1d16c:	strle	r0, [r3, #4]
   1d170:	b	1d17c <__assert_fail@plt+0xb4d0>
   1d174:	bfi	r6, r7, #0, #8
   1d178:	str	r6, [r3, #4]
   1d17c:	ldr	r1, [sp, #20]
   1d180:	add	r2, r2, #1
   1d184:	ldr	r0, [r1, #8]
   1d188:	cmp	r2, r0
   1d18c:	bcc	1d140 <__assert_fail@plt+0xb494>
   1d190:	ldrb	r2, [r1, #88]	; 0x58
   1d194:	b	1d19c <__assert_fail@plt+0xb4f0>
   1d198:	mov	r8, #0
   1d19c:	ldr	r3, [sp, #20]
   1d1a0:	mov	r0, #1
   1d1a4:	and	r1, r2, #249	; 0xf9
   1d1a8:	str	r0, [r3, #92]	; 0x5c
   1d1ac:	ldr	r0, [r3, #76]	; 0x4c
   1d1b0:	cmp	r0, #0
   1d1b4:	movwgt	r9, #1
   1d1b8:	orr	r0, r8, r9
   1d1bc:	and	r0, r0, #1
   1d1c0:	orr	r0, r1, r0, lsl #1
   1d1c4:	strb	r0, [r3, #88]	; 0x58
   1d1c8:	ldr	r7, [sp, #20]
   1d1cc:	ldr	r1, [r7, #52]	; 0x34
   1d1d0:	ldr	r0, [r7, #24]
   1d1d4:	ldr	r1, [r1, #12]
   1d1d8:	ldr	r1, [r1, #28]
   1d1dc:	str	r1, [r7, #72]	; 0x48
   1d1e0:	add	r1, r1, r1, lsl #1
   1d1e4:	add	r5, r0, r1, lsl #2
   1d1e8:	mov	r4, r5
   1d1ec:	ldr	sl, [r4, #4]!
   1d1f0:	str	sl, [fp, #-44]	; 0xffffffd4
   1d1f4:	ldr	r0, [r4]
   1d1f8:	cmp	r0, #1
   1d1fc:	blt	1d350 <__assert_fail@plt+0xb6a4>
   1d200:	lsl	r0, sl, #2
   1d204:	str	sl, [fp, #-48]	; 0xffffffd0
   1d208:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1d20c:	cmp	r0, #0
   1d210:	str	r0, [fp, #-40]	; 0xffffffd8
   1d214:	beq	1d4f8 <__assert_fail@plt+0xb84c>
   1d218:	mov	r6, r0
   1d21c:	ldr	r0, [r4]
   1d220:	ldr	r1, [r5, #8]
   1d224:	lsl	r2, r0, #2
   1d228:	mov	r0, r6
   1d22c:	bl	118ec <memcpy@plt>
   1d230:	mov	r0, #0
   1d234:	cmp	sl, #1
   1d238:	str	r0, [fp, #-32]	; 0xffffffe0
   1d23c:	ldrge	r0, [sp, #20]
   1d240:	ldrge	r0, [r0, #76]	; 0x4c
   1d244:	cmpge	r0, #1
   1d248:	blt	1d364 <__assert_fail@plt+0xb6b8>
   1d24c:	mov	r0, #0
   1d250:	sub	r8, fp, #48	; 0x30
   1d254:	mov	r9, #1
   1d258:	b	1d260 <__assert_fail@plt+0xb5b4>
   1d25c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1d260:	ldr	r2, [sp, #20]
   1d264:	ldr	r1, [r6, r0, lsl #2]
   1d268:	ldr	r2, [r2]
   1d26c:	add	r3, r2, r1, lsl #3
   1d270:	ldrb	r3, [r3, #4]
   1d274:	cmp	r3, #4
   1d278:	bne	1d340 <__assert_fail@plt+0xb694>
   1d27c:	mov	r3, #0
   1d280:	cmp	sl, #1
   1d284:	blt	1d2b8 <__assert_fail@plt+0xb60c>
   1d288:	ldr	r5, [r6, r3, lsl #2]
   1d28c:	add	r4, r2, r5, lsl #3
   1d290:	ldrb	r4, [r4, #4]
   1d294:	cmp	r4, #9
   1d298:	bne	1d2ac <__assert_fail@plt+0xb600>
   1d29c:	ldr	r4, [r2, r1, lsl #3]
   1d2a0:	ldr	r5, [r2, r5, lsl #3]
   1d2a4:	cmp	r5, r4
   1d2a8:	beq	1d2b8 <__assert_fail@plt+0xb60c>
   1d2ac:	add	r3, r3, #1
   1d2b0:	cmp	r3, sl
   1d2b4:	blt	1d288 <__assert_fail@plt+0xb5dc>
   1d2b8:	cmp	r3, sl
   1d2bc:	beq	1d340 <__assert_fail@plt+0xb694>
   1d2c0:	ldr	r2, [sp, #20]
   1d2c4:	add	r1, r1, r1, lsl #1
   1d2c8:	cmp	sl, #1
   1d2cc:	ldr	r2, [r2, #20]
   1d2d0:	add	r1, r2, r1, lsl #2
   1d2d4:	ldr	r1, [r1, #8]
   1d2d8:	ldr	r1, [r1]
   1d2dc:	blt	1d318 <__assert_fail@plt+0xb66c>
   1d2e0:	mov	r2, #0
   1d2e4:	subs	r3, sl, #1
   1d2e8:	beq	1d30c <__assert_fail@plt+0xb660>
   1d2ec:	add	r5, r2, r3
   1d2f0:	lsr	r4, r5, #1
   1d2f4:	ldr	r7, [r6, r4, lsl #2]
   1d2f8:	cmp	r7, r1
   1d2fc:	movge	r3, r4
   1d300:	addlt	r2, r9, r5, lsr #1
   1d304:	cmp	r2, r3
   1d308:	bcc	1d2ec <__assert_fail@plt+0xb640>
   1d30c:	ldr	r2, [r6, r2, lsl #2]
   1d310:	cmp	r2, r1
   1d314:	beq	1d340 <__assert_fail@plt+0xb694>
   1d318:	ldr	r0, [sp, #20]
   1d31c:	add	r1, r1, r1, lsl #1
   1d320:	ldr	r0, [r0, #24]
   1d324:	add	r1, r0, r1, lsl #2
   1d328:	mov	r0, r8
   1d32c:	bl	26f6c <__assert_fail@plt+0x152c0>
   1d330:	cmp	r0, #0
   1d334:	bne	1d4b4 <__assert_fail@plt+0xb808>
   1d338:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1d33c:	mov	r0, #0
   1d340:	add	r0, r0, #1
   1d344:	cmp	r0, sl
   1d348:	blt	1d25c <__assert_fail@plt+0xb5b0>
   1d34c:	b	1d364 <__assert_fail@plt+0xb6b8>
   1d350:	mov	r0, #0
   1d354:	str	r0, [fp, #-44]	; 0xffffffd4
   1d358:	str	r0, [fp, #-48]	; 0xffffffd0
   1d35c:	str	r0, [fp, #-40]	; 0xffffffd8
   1d360:	str	r0, [fp, #-32]	; 0xffffffe0
   1d364:	ldr	r7, [sp, #20]
   1d368:	sub	r0, fp, #32
   1d36c:	sub	r2, fp, #48	; 0x30
   1d370:	mov	r3, #0
   1d374:	mov	r1, r7
   1d378:	bl	2725c <__assert_fail@plt+0x155b0>
   1d37c:	ldr	r8, [sp, #16]
   1d380:	cmp	r0, #0
   1d384:	str	r0, [r7, #36]	; 0x24
   1d388:	beq	1d408 <__assert_fail@plt+0xb75c>
   1d38c:	ldrsb	r1, [r0, #52]	; 0x34
   1d390:	cmn	r1, #1
   1d394:	ble	1d3a8 <__assert_fail@plt+0xb6fc>
   1d398:	str	r0, [r7, #40]	; 0x28
   1d39c:	str	r0, [r7, #44]	; 0x2c
   1d3a0:	str	r0, [r7, #48]	; 0x30
   1d3a4:	b	1d41c <__assert_fail@plt+0xb770>
   1d3a8:	sub	r4, fp, #32
   1d3ac:	sub	r6, fp, #48	; 0x30
   1d3b0:	mov	r1, r7
   1d3b4:	mov	r3, #1
   1d3b8:	mov	r0, r4
   1d3bc:	mov	r2, r6
   1d3c0:	bl	2725c <__assert_fail@plt+0x155b0>
   1d3c4:	str	r0, [r7, #40]	; 0x28
   1d3c8:	mov	r0, r4
   1d3cc:	mov	r1, r7
   1d3d0:	mov	r2, r6
   1d3d4:	mov	r3, #2
   1d3d8:	bl	2725c <__assert_fail@plt+0x155b0>
   1d3dc:	str	r0, [r7, #44]	; 0x2c
   1d3e0:	mov	r0, r4
   1d3e4:	mov	r1, r7
   1d3e8:	mov	r2, r6
   1d3ec:	mov	r3, #6
   1d3f0:	bl	2725c <__assert_fail@plt+0x155b0>
   1d3f4:	str	r0, [r7, #48]	; 0x30
   1d3f8:	ldr	r1, [r7, #40]	; 0x28
   1d3fc:	cmp	r1, #0
   1d400:	cmpne	r0, #0
   1d404:	bne	1d410 <__assert_fail@plt+0xb764>
   1d408:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d40c:	b	1d428 <__assert_fail@plt+0xb77c>
   1d410:	ldr	r0, [r7, #44]	; 0x2c
   1d414:	cmp	r0, #0
   1d418:	beq	1d408 <__assert_fail@plt+0xb75c>
   1d41c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d420:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1d424:	mov	r0, #0
   1d428:	str	r0, [fp, #-52]	; 0xffffffcc
   1d42c:	ldr	r5, [r8]
   1d430:	ldr	r0, [r5, #56]	; 0x38
   1d434:	cmp	r0, #0
   1d438:	beq	1d450 <__assert_fail@plt+0xb7a4>
   1d43c:	ldr	r4, [r0]
   1d440:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1d444:	cmp	r4, #0
   1d448:	mov	r0, r4
   1d44c:	bne	1d43c <__assert_fail@plt+0xb790>
   1d450:	mov	r0, #31
   1d454:	mov	r4, #0
   1d458:	str	r0, [r5, #64]	; 0x40
   1d45c:	str	r4, [r5, #52]	; 0x34
   1d460:	str	r4, [r5, #56]	; 0x38
   1d464:	ldr	r0, [r5, #16]
   1d468:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1d46c:	str	r4, [r5, #16]
   1d470:	ldr	r0, [sp, #40]	; 0x28
   1d474:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1d478:	ldr	r0, [sp, #44]	; 0x2c
   1d47c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1d480:	ldrb	r0, [sp, #107]	; 0x6b
   1d484:	cmp	r0, #0
   1d488:	beq	1d494 <__assert_fail@plt+0xb7e8>
   1d48c:	ldr	r0, [sp, #36]	; 0x24
   1d490:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1d494:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1d498:	cmp	r0, #0
   1d49c:	bne	1d4c0 <__assert_fail@plt+0xb814>
   1d4a0:	mov	r0, r4
   1d4a4:	sub	sp, fp, #28
   1d4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4ac:	ldr	sl, [sp, #16]
   1d4b0:	b	1c6d0 <__assert_fail@plt+0xaa24>
   1d4b4:	ldr	r8, [sp, #16]
   1d4b8:	ldr	r7, [sp, #20]
   1d4bc:	b	1d428 <__assert_fail@plt+0xb77c>
   1d4c0:	ldr	r0, [sp, #8]
   1d4c4:	cmp	r0, #0
   1d4c8:	beq	1d4d4 <__assert_fail@plt+0xb828>
   1d4cc:	add	r0, r7, #136	; 0x88
   1d4d0:	bl	11874 <pthread_mutex_destroy@plt>
   1d4d4:	mov	r0, r7
   1d4d8:	bl	1e06c <__assert_fail@plt+0xc3c0>
   1d4dc:	mov	r0, #0
   1d4e0:	str	r0, [r8]
   1d4e4:	str	r0, [r8, #4]
   1d4e8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1d4ec:	mov	r0, r4
   1d4f0:	sub	sp, fp, #28
   1d4f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4f8:	ldr	r8, [sp, #16]
   1d4fc:	mov	r0, #0
   1d500:	str	r0, [fp, #-48]	; 0xffffffd0
   1d504:	str	r0, [fp, #-44]	; 0xffffffd4
   1d508:	mov	r0, #12
   1d50c:	str	r0, [fp, #-32]	; 0xffffffe0
   1d510:	b	1d428 <__assert_fail@plt+0xb77c>
   1d514:	bl	11c70 <abort@plt>
   1d518:	movw	r2, #17356	; 0x43cc
   1d51c:	movt	r2, #4
   1d520:	ldr	r1, [r2]
   1d524:	str	r0, [r2]
   1d528:	mov	r0, r1
   1d52c:	bx	lr
   1d530:	push	{r4, r5, r6, sl, fp, lr}
   1d534:	add	fp, sp, #16
   1d538:	ldr	r5, [r0, #16]
   1d53c:	ldr	r6, [r0]
   1d540:	mov	r4, r0
   1d544:	mov	r1, #0
   1d548:	mov	r2, #256	; 0x100
   1d54c:	mov	r0, r5
   1d550:	bl	11b2c <memset@plt>
   1d554:	ldr	r1, [r6, #36]	; 0x24
   1d558:	mov	r0, r4
   1d55c:	mov	r2, r5
   1d560:	bl	1d5cc <__assert_fail@plt+0xb920>
   1d564:	ldr	r0, [r6, #36]	; 0x24
   1d568:	ldr	r1, [r6, #40]	; 0x28
   1d56c:	cmp	r0, r1
   1d570:	beq	1d584 <__assert_fail@plt+0xb8d8>
   1d574:	mov	r0, r4
   1d578:	mov	r2, r5
   1d57c:	bl	1d5cc <__assert_fail@plt+0xb920>
   1d580:	ldr	r0, [r6, #36]	; 0x24
   1d584:	ldr	r1, [r6, #44]	; 0x2c
   1d588:	cmp	r0, r1
   1d58c:	beq	1d5a0 <__assert_fail@plt+0xb8f4>
   1d590:	mov	r0, r4
   1d594:	mov	r2, r5
   1d598:	bl	1d5cc <__assert_fail@plt+0xb920>
   1d59c:	ldr	r0, [r6, #36]	; 0x24
   1d5a0:	ldr	r1, [r6, #48]	; 0x30
   1d5a4:	cmp	r0, r1
   1d5a8:	beq	1d5b8 <__assert_fail@plt+0xb90c>
   1d5ac:	mov	r0, r4
   1d5b0:	mov	r2, r5
   1d5b4:	bl	1d5cc <__assert_fail@plt+0xb920>
   1d5b8:	ldrb	r0, [r4, #28]
   1d5bc:	orr	r0, r0, #8
   1d5c0:	strb	r0, [r4, #28]
   1d5c4:	mov	r0, #0
   1d5c8:	pop	{r4, r5, r6, sl, fp, pc}
   1d5cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5d0:	add	fp, sp, #28
   1d5d4:	sub	sp, sp, #332	; 0x14c
   1d5d8:	ldr	r8, [r0]
   1d5dc:	mov	r9, r0
   1d5e0:	mov	r5, r2
   1d5e4:	mov	r2, #0
   1d5e8:	str	r2, [sp, #20]
   1d5ec:	ldr	r0, [r8, #92]	; 0x5c
   1d5f0:	cmp	r0, #1
   1d5f4:	ldrbeq	r0, [r9, #14]
   1d5f8:	ubfxeq	r0, r0, #6, #1
   1d5fc:	streq	r0, [sp, #20]
   1d600:	ldr	r0, [r1, #8]
   1d604:	cmp	r0, #1
   1d608:	blt	1ddc4 <__assert_fail@plt+0xc118>
   1d60c:	add	r0, r5, #224	; 0xe0
   1d610:	mov	sl, #1
   1d614:	mov	r2, #0
   1d618:	str	r9, [sp, #16]
   1d61c:	str	r1, [sp, #24]
   1d620:	str	r0, [sp, #52]	; 0x34
   1d624:	add	r0, r5, #192	; 0xc0
   1d628:	str	r0, [sp, #48]	; 0x30
   1d62c:	add	r0, r5, #160	; 0xa0
   1d630:	str	r0, [sp, #44]	; 0x2c
   1d634:	add	r0, r5, #128	; 0x80
   1d638:	str	r0, [sp, #40]	; 0x28
   1d63c:	add	r0, r5, #96	; 0x60
   1d640:	str	r0, [sp, #36]	; 0x24
   1d644:	add	r0, r5, #64	; 0x40
   1d648:	str	r0, [sp, #32]
   1d64c:	add	r0, r5, #32
   1d650:	str	r0, [sp, #12]
   1d654:	add	r0, r5, #31
   1d658:	str	r0, [sp, #8]
   1d65c:	add	r0, sp, #56	; 0x38
   1d660:	add	r0, r0, #1
   1d664:	str	r0, [sp, #4]
   1d668:	ldr	r0, [r1, #12]
   1d66c:	str	r2, [sp, #28]
   1d670:	ldr	r4, [r0, r2, lsl #2]
   1d674:	ldr	r2, [r8]
   1d678:	add	r0, r2, r4, lsl #3
   1d67c:	ldrb	r6, [r0, #4]
   1d680:	sub	r0, r6, #1
   1d684:	cmp	r0, #6
   1d688:	bhi	1ddac <__assert_fail@plt+0xc100>
   1d68c:	add	r1, pc, #0
   1d690:	ldr	pc, [r1, r0, lsl #2]
   1d694:			; <UNDEFINED> instruction: 0x0001d6b0
   1d698:	andeq	sp, r1, ip, asr #27
   1d69c:			; <UNDEFINED> instruction: 0x0001d7b0
   1d6a0:	andeq	sp, r1, ip, lsr #27
   1d6a4:	andeq	sp, r1, ip, asr #27
   1d6a8:	andeq	sp, r1, r0, ror #20
   1d6ac:	andeq	sp, r1, ip, asr #27
   1d6b0:	ldr	r0, [sp, #20]
   1d6b4:	ldrb	r6, [r2, r4, lsl #3]
   1d6b8:	cmp	r0, #0
   1d6bc:	strb	sl, [r5, r6]
   1d6c0:	beq	1d6d4 <__assert_fail@plt+0xba28>
   1d6c4:	bl	11a60 <__ctype_tolower_loc@plt>
   1d6c8:	ldr	r0, [r0]
   1d6cc:	ldr	r0, [r0, r6, lsl #2]
   1d6d0:	strb	sl, [r5, r0]
   1d6d4:	ldrb	r0, [r9, #14]
   1d6d8:	tst	r0, #64	; 0x40
   1d6dc:	beq	1ddac <__assert_fail@plt+0xc100>
   1d6e0:	ldr	r0, [r8, #92]	; 0x5c
   1d6e4:	cmp	r0, #2
   1d6e8:	blt	1ddac <__assert_fail@plt+0xc100>
   1d6ec:	ldr	r0, [r8]
   1d6f0:	add	r1, r4, #1
   1d6f4:	movw	r7, #1
   1d6f8:	add	r6, sp, #56	; 0x38
   1d6fc:	movt	r7, #32
   1d700:	ldrb	r0, [r0, r4, lsl #3]
   1d704:	strb	r0, [sp, #56]	; 0x38
   1d708:	ldr	r0, [r8, #8]
   1d70c:	cmp	r1, r0
   1d710:	ldr	r0, [sp, #4]
   1d714:	bcs	1d758 <__assert_fail@plt+0xbaac>
   1d718:	ldr	r0, [sp, #4]
   1d71c:	ldr	r1, [r8]
   1d720:	add	r3, r7, #254	; 0xfe
   1d724:	add	r1, r1, r4, lsl #3
   1d728:	ldr	r2, [r1, #12]
   1d72c:	and	r2, r2, r3
   1d730:	cmp	r2, r7
   1d734:	bne	1d758 <__assert_fail@plt+0xbaac>
   1d738:	ldrb	r1, [r1, #8]
   1d73c:	add	r3, r4, #2
   1d740:	strb	r1, [r0], #1
   1d744:	add	r1, r4, #1
   1d748:	ldr	r2, [r8, #8]
   1d74c:	mov	r4, r1
   1d750:	cmp	r3, r2
   1d754:	bcc	1d71c <__assert_fail@plt+0xba70>
   1d758:	mov	r1, #0
   1d75c:	sub	r4, r0, r6
   1d760:	sub	r7, fp, #48	; 0x30
   1d764:	sub	r0, fp, #36	; 0x24
   1d768:	str	r1, [fp, #-44]	; 0xffffffd4
   1d76c:	str	r1, [fp, #-48]	; 0xffffffd0
   1d770:	mov	r1, r6
   1d774:	mov	r2, r4
   1d778:	mov	r3, r7
   1d77c:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   1d780:	cmp	r0, r4
   1d784:	bne	1ddac <__assert_fail@plt+0xc100>
   1d788:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d78c:	bl	11910 <towlower@plt>
   1d790:	mov	r1, r0
   1d794:	mov	r0, r6
   1d798:	mov	r2, r7
   1d79c:	bl	11844 <wcrtomb@plt>
   1d7a0:	cmn	r0, #1
   1d7a4:	ldrbne	r0, [sp, #56]	; 0x38
   1d7a8:	strbne	sl, [r5, r0]
   1d7ac:	b	1ddac <__assert_fail@plt+0xc100>
   1d7b0:	ldr	r0, [sp, #20]
   1d7b4:	cmp	r0, #0
   1d7b8:	beq	1dc0c <__assert_fail@plt+0xbf60>
   1d7bc:	ldr	r0, [r2, r4, lsl #3]
   1d7c0:	mov	r6, #0
   1d7c4:	ldr	r7, [r0]
   1d7c8:	tst	r7, sl, lsl r6
   1d7cc:	beq	1d7fc <__assert_fail@plt+0xbb50>
   1d7d0:	add	r1, r6, #128	; 0x80
   1d7d4:	mov	r0, r5
   1d7d8:	lsr	r1, r1, #7
   1d7dc:	strb	sl, [r0, r6]!
   1d7e0:	cmp	r1, #2
   1d7e4:	bhi	1d7f8 <__assert_fail@plt+0xbb4c>
   1d7e8:	bl	11a60 <__ctype_tolower_loc@plt>
   1d7ec:	ldr	r0, [r0]
   1d7f0:	ldr	r0, [r0, r6, lsl #2]
   1d7f4:	add	r0, r5, r0
   1d7f8:	strb	sl, [r0]
   1d7fc:	add	r6, r6, #1
   1d800:	cmp	r6, #32
   1d804:	bne	1d7c8 <__assert_fail@plt+0xbb1c>
   1d808:	ldr	r0, [r8]
   1d80c:	ldr	r6, [sp, #12]
   1d810:	mov	r9, #0
   1d814:	ldr	r0, [r0, r4, lsl #3]
   1d818:	ldr	r7, [r0, #4]
   1d81c:	tst	r7, sl, lsl r9
   1d820:	beq	1d854 <__assert_fail@plt+0xbba8>
   1d824:	add	r1, r9, #160	; 0xa0
   1d828:	mov	r0, r6
   1d82c:	lsr	r1, r1, #7
   1d830:	strb	sl, [r0, r9]!
   1d834:	cmp	r1, #2
   1d838:	bhi	1d850 <__assert_fail@plt+0xbba4>
   1d83c:	bl	11a60 <__ctype_tolower_loc@plt>
   1d840:	ldr	r0, [r0]
   1d844:	add	r0, r0, r9, lsl #2
   1d848:	ldr	r0, [r0, #128]	; 0x80
   1d84c:	add	r0, r5, r0
   1d850:	strb	sl, [r0]
   1d854:	add	r9, r9, #1
   1d858:	cmp	r9, #32
   1d85c:	bne	1d81c <__assert_fail@plt+0xbb70>
   1d860:	ldr	r0, [r8]
   1d864:	ldr	r9, [sp, #16]
   1d868:	mov	r6, #0
   1d86c:	ldr	r0, [r0, r4, lsl #3]
   1d870:	ldr	r7, [r0, #8]
   1d874:	tst	r7, sl, lsl r6
   1d878:	beq	1d8ac <__assert_fail@plt+0xbc00>
   1d87c:	ldr	r0, [sp, #32]
   1d880:	add	r1, r6, #192	; 0xc0
   1d884:	lsr	r1, r1, #7
   1d888:	cmp	r1, #2
   1d88c:	strb	sl, [r0, r6]!
   1d890:	bhi	1d8a8 <__assert_fail@plt+0xbbfc>
   1d894:	bl	11a60 <__ctype_tolower_loc@plt>
   1d898:	ldr	r0, [r0]
   1d89c:	add	r0, r0, r6, lsl #2
   1d8a0:	ldr	r0, [r0, #256]	; 0x100
   1d8a4:	add	r0, r5, r0
   1d8a8:	strb	sl, [r0]
   1d8ac:	add	r6, r6, #1
   1d8b0:	cmp	r6, #32
   1d8b4:	bne	1d874 <__assert_fail@plt+0xbbc8>
   1d8b8:	ldr	r0, [r8]
   1d8bc:	mov	r6, #0
   1d8c0:	ldr	r0, [r0, r4, lsl #3]
   1d8c4:	ldr	r7, [r0, #12]
   1d8c8:	tst	r7, sl, lsl r6
   1d8cc:	beq	1d900 <__assert_fail@plt+0xbc54>
   1d8d0:	ldr	r0, [sp, #36]	; 0x24
   1d8d4:	add	r1, r6, #224	; 0xe0
   1d8d8:	lsr	r1, r1, #7
   1d8dc:	cmp	r1, #2
   1d8e0:	strb	sl, [r0, r6]!
   1d8e4:	bhi	1d8fc <__assert_fail@plt+0xbc50>
   1d8e8:	bl	11a60 <__ctype_tolower_loc@plt>
   1d8ec:	ldr	r0, [r0]
   1d8f0:	add	r0, r0, r6, lsl #2
   1d8f4:	ldr	r0, [r0, #384]	; 0x180
   1d8f8:	add	r0, r5, r0
   1d8fc:	strb	sl, [r0]
   1d900:	add	r6, r6, #1
   1d904:	cmp	r6, #32
   1d908:	bne	1d8c8 <__assert_fail@plt+0xbc1c>
   1d90c:	ldr	r0, [r8]
   1d910:	mov	r6, #0
   1d914:	ldr	r0, [r0, r4, lsl #3]
   1d918:	ldr	r7, [r0, #16]
   1d91c:	tst	r7, sl, lsl r6
   1d920:	beq	1d954 <__assert_fail@plt+0xbca8>
   1d924:	ldr	r0, [sp, #40]	; 0x28
   1d928:	add	r1, r6, #256	; 0x100
   1d92c:	lsr	r1, r1, #7
   1d930:	cmp	r1, #2
   1d934:	strb	sl, [r0, r6]!
   1d938:	bhi	1d950 <__assert_fail@plt+0xbca4>
   1d93c:	bl	11a60 <__ctype_tolower_loc@plt>
   1d940:	ldr	r0, [r0]
   1d944:	add	r0, r0, r6, lsl #2
   1d948:	ldr	r0, [r0, #512]	; 0x200
   1d94c:	add	r0, r5, r0
   1d950:	strb	sl, [r0]
   1d954:	add	r6, r6, #1
   1d958:	cmp	r6, #32
   1d95c:	bne	1d91c <__assert_fail@plt+0xbc70>
   1d960:	ldr	r0, [r8]
   1d964:	mov	r6, #0
   1d968:	ldr	r0, [r0, r4, lsl #3]
   1d96c:	ldr	r7, [r0, #20]
   1d970:	tst	r7, sl, lsl r6
   1d974:	beq	1d9a8 <__assert_fail@plt+0xbcfc>
   1d978:	ldr	r0, [sp, #44]	; 0x2c
   1d97c:	add	r1, r6, #288	; 0x120
   1d980:	lsr	r1, r1, #7
   1d984:	cmp	r1, #2
   1d988:	strb	sl, [r0, r6]!
   1d98c:	bhi	1d9a4 <__assert_fail@plt+0xbcf8>
   1d990:	bl	11a60 <__ctype_tolower_loc@plt>
   1d994:	ldr	r0, [r0]
   1d998:	add	r0, r0, r6, lsl #2
   1d99c:	ldr	r0, [r0, #640]	; 0x280
   1d9a0:	add	r0, r5, r0
   1d9a4:	strb	sl, [r0]
   1d9a8:	add	r6, r6, #1
   1d9ac:	cmp	r6, #32
   1d9b0:	bne	1d970 <__assert_fail@plt+0xbcc4>
   1d9b4:	ldr	r0, [r8]
   1d9b8:	mov	r6, #0
   1d9bc:	ldr	r0, [r0, r4, lsl #3]
   1d9c0:	ldr	r7, [r0, #24]
   1d9c4:	tst	r7, sl, lsl r6
   1d9c8:	beq	1d9fc <__assert_fail@plt+0xbd50>
   1d9cc:	ldr	r0, [sp, #48]	; 0x30
   1d9d0:	add	r1, r6, #320	; 0x140
   1d9d4:	lsr	r1, r1, #7
   1d9d8:	cmp	r1, #2
   1d9dc:	strb	sl, [r0, r6]!
   1d9e0:	bhi	1d9f8 <__assert_fail@plt+0xbd4c>
   1d9e4:	bl	11a60 <__ctype_tolower_loc@plt>
   1d9e8:	ldr	r0, [r0]
   1d9ec:	add	r0, r0, r6, lsl #2
   1d9f0:	ldr	r0, [r0, #768]	; 0x300
   1d9f4:	add	r0, r5, r0
   1d9f8:	strb	sl, [r0]
   1d9fc:	add	r6, r6, #1
   1da00:	cmp	r6, #32
   1da04:	bne	1d9c4 <__assert_fail@plt+0xbd18>
   1da08:	ldr	r0, [r8]
   1da0c:	mov	r6, #0
   1da10:	ldr	r0, [r0, r4, lsl #3]
   1da14:	ldr	r4, [r0, #28]
   1da18:	tst	r4, sl, lsl r6
   1da1c:	beq	1da50 <__assert_fail@plt+0xbda4>
   1da20:	ldr	r0, [sp, #52]	; 0x34
   1da24:	add	r1, r6, #352	; 0x160
   1da28:	lsr	r1, r1, #7
   1da2c:	cmp	r1, #2
   1da30:	strb	sl, [r0, r6]!
   1da34:	bhi	1da4c <__assert_fail@plt+0xbda0>
   1da38:	bl	11a60 <__ctype_tolower_loc@plt>
   1da3c:	ldr	r0, [r0]
   1da40:	add	r0, r0, r6, lsl #2
   1da44:	ldr	r0, [r0, #896]	; 0x380
   1da48:	add	r0, r5, r0
   1da4c:	strb	sl, [r0]
   1da50:	add	r6, r6, #1
   1da54:	cmp	r6, #32
   1da58:	bne	1da18 <__assert_fail@plt+0xbd6c>
   1da5c:	b	1ddac <__assert_fail@plt+0xc100>
   1da60:	ldr	r0, [r8, #92]	; 0x5c
   1da64:	ldr	r4, [r2, r4, lsl #3]
   1da68:	cmp	r0, #2
   1da6c:	blt	1dadc <__assert_fail@plt+0xbe30>
   1da70:	ldr	r0, [r4, #36]	; 0x24
   1da74:	cmp	r0, #0
   1da78:	bne	1da90 <__assert_fail@plt+0xbde4>
   1da7c:	ldrb	r0, [r4, #16]
   1da80:	tst	r0, #1
   1da84:	ldreq	r0, [r4, #32]
   1da88:	cmpeq	r0, #0
   1da8c:	beq	1dadc <__assert_fail@plt+0xbe30>
   1da90:	mov	r6, #0
   1da94:	add	r4, sp, #56	; 0x38
   1da98:	sub	r7, fp, #48	; 0x30
   1da9c:	strb	r6, [fp, #-48]	; 0xffffffd0
   1daa0:	mov	r0, #0
   1daa4:	mov	r1, r7
   1daa8:	mov	r2, #1
   1daac:	mov	r3, r4
   1dab0:	str	r6, [sp, #60]	; 0x3c
   1dab4:	str	r6, [sp, #56]	; 0x38
   1dab8:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   1dabc:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1dac0:	cmn	r0, #2
   1dac4:	add	r0, r1, #1
   1dac8:	strbeq	sl, [r5, r1]
   1dacc:	tst	r0, #255	; 0xff
   1dad0:	strb	r0, [fp, #-48]	; 0xffffffd0
   1dad4:	bne	1daa0 <__assert_fail@plt+0xbdf4>
   1dad8:	b	1ddac <__assert_fail@plt+0xc100>
   1dadc:	ldr	r0, [r4, #20]
   1dae0:	cmp	r0, #1
   1dae4:	blt	1ddac <__assert_fail@plt+0xc100>
   1dae8:	ldr	r0, [sp, #20]
   1daec:	mov	r7, #0
   1daf0:	cmp	r0, #0
   1daf4:	beq	1db8c <__assert_fail@plt+0xbee0>
   1daf8:	mov	r0, #0
   1dafc:	sub	r2, fp, #48	; 0x30
   1db00:	str	r0, [fp, #-44]	; 0xffffffd4
   1db04:	str	r0, [fp, #-48]	; 0xffffffd0
   1db08:	ldr	r0, [r4]
   1db0c:	ldr	r1, [r0, r7, lsl #2]
   1db10:	add	r0, sp, #56	; 0x38
   1db14:	bl	11844 <wcrtomb@plt>
   1db18:	cmn	r0, #1
   1db1c:	beq	1db38 <__assert_fail@plt+0xbe8c>
   1db20:	ldrb	r6, [sp, #56]	; 0x38
   1db24:	strb	sl, [r5, r6]
   1db28:	bl	11a60 <__ctype_tolower_loc@plt>
   1db2c:	ldr	r0, [r0]
   1db30:	ldr	r0, [r0, r6, lsl #2]
   1db34:	strb	sl, [r5, r0]
   1db38:	ldrb	r0, [r9, #14]
   1db3c:	tst	r0, #64	; 0x40
   1db40:	beq	1db78 <__assert_fail@plt+0xbecc>
   1db44:	ldr	r0, [r8, #92]	; 0x5c
   1db48:	cmp	r0, #2
   1db4c:	blt	1db78 <__assert_fail@plt+0xbecc>
   1db50:	ldr	r0, [r4]
   1db54:	ldr	r0, [r0, r7, lsl #2]
   1db58:	bl	11910 <towlower@plt>
   1db5c:	mov	r1, r0
   1db60:	add	r0, sp, #56	; 0x38
   1db64:	sub	r2, fp, #48	; 0x30
   1db68:	bl	11844 <wcrtomb@plt>
   1db6c:	cmn	r0, #1
   1db70:	ldrbne	r0, [sp, #56]	; 0x38
   1db74:	strbne	sl, [r5, r0]
   1db78:	ldr	r0, [r4, #20]
   1db7c:	add	r7, r7, #1
   1db80:	cmp	r7, r0
   1db84:	blt	1daf8 <__assert_fail@plt+0xbe4c>
   1db88:	b	1ddac <__assert_fail@plt+0xc100>
   1db8c:	mov	r0, #0
   1db90:	sub	r2, fp, #48	; 0x30
   1db94:	str	r0, [fp, #-44]	; 0xffffffd4
   1db98:	str	r0, [fp, #-48]	; 0xffffffd0
   1db9c:	ldr	r0, [r4]
   1dba0:	ldr	r1, [r0, r7, lsl #2]
   1dba4:	add	r0, sp, #56	; 0x38
   1dba8:	bl	11844 <wcrtomb@plt>
   1dbac:	cmn	r0, #1
   1dbb0:	ldrbne	r0, [sp, #56]	; 0x38
   1dbb4:	strbne	sl, [r5, r0]
   1dbb8:	ldrb	r0, [r9, #14]
   1dbbc:	tst	r0, #64	; 0x40
   1dbc0:	beq	1dbf8 <__assert_fail@plt+0xbf4c>
   1dbc4:	ldr	r0, [r8, #92]	; 0x5c
   1dbc8:	cmp	r0, #2
   1dbcc:	blt	1dbf8 <__assert_fail@plt+0xbf4c>
   1dbd0:	ldr	r0, [r4]
   1dbd4:	ldr	r0, [r0, r7, lsl #2]
   1dbd8:	bl	11910 <towlower@plt>
   1dbdc:	mov	r1, r0
   1dbe0:	add	r0, sp, #56	; 0x38
   1dbe4:	sub	r2, fp, #48	; 0x30
   1dbe8:	bl	11844 <wcrtomb@plt>
   1dbec:	cmn	r0, #1
   1dbf0:	ldrbne	r0, [sp, #56]	; 0x38
   1dbf4:	strbne	sl, [r5, r0]
   1dbf8:	ldr	r0, [r4, #20]
   1dbfc:	add	r7, r7, #1
   1dc00:	cmp	r7, r0
   1dc04:	blt	1db8c <__assert_fail@plt+0xbee0>
   1dc08:	b	1ddac <__assert_fail@plt+0xc100>
   1dc0c:	ldr	r1, [sp, #8]
   1dc10:	mov	r0, #0
   1dc14:	b	1dc24 <__assert_fail@plt+0xbf78>
   1dc18:	ldr	r2, [r8]
   1dc1c:	add	r0, r0, #4
   1dc20:	add	r1, r1, #32
   1dc24:	ldr	r2, [r2, r4, lsl #3]
   1dc28:	ldr	r2, [r2, r0]
   1dc2c:	tst	r2, #1
   1dc30:	strbne	sl, [r1, #-31]	; 0xffffffe1
   1dc34:	tst	r2, #2
   1dc38:	addne	r3, r5, r0, lsl #3
   1dc3c:	strbne	sl, [r3, #1]
   1dc40:	tst	r2, #4
   1dc44:	addne	r3, r5, r0, lsl #3
   1dc48:	strbne	sl, [r3, #2]
   1dc4c:	tst	r2, #8
   1dc50:	addne	r3, r5, r0, lsl #3
   1dc54:	strbne	sl, [r3, #3]
   1dc58:	tst	r2, #16
   1dc5c:	addne	r3, r5, r0, lsl #3
   1dc60:	strbne	sl, [r3, #4]
   1dc64:	tst	r2, #32
   1dc68:	addne	r3, r5, r0, lsl #3
   1dc6c:	strbne	sl, [r3, #5]
   1dc70:	tst	r2, #64	; 0x40
   1dc74:	addne	r3, r5, r0, lsl #3
   1dc78:	strbne	sl, [r3, #6]
   1dc7c:	tst	r2, #128	; 0x80
   1dc80:	addne	r3, r5, r0, lsl #3
   1dc84:	strbne	sl, [r3, #7]
   1dc88:	tst	r2, #256	; 0x100
   1dc8c:	addne	r3, r5, r0, lsl #3
   1dc90:	strbne	sl, [r3, #8]
   1dc94:	tst	r2, #512	; 0x200
   1dc98:	addne	r3, r5, r0, lsl #3
   1dc9c:	strbne	sl, [r3, #9]
   1dca0:	tst	r2, #1024	; 0x400
   1dca4:	addne	r3, r5, r0, lsl #3
   1dca8:	strbne	sl, [r3, #10]
   1dcac:	tst	r2, #2048	; 0x800
   1dcb0:	addne	r3, r5, r0, lsl #3
   1dcb4:	strbne	sl, [r3, #11]
   1dcb8:	tst	r2, #4096	; 0x1000
   1dcbc:	addne	r3, r5, r0, lsl #3
   1dcc0:	strbne	sl, [r3, #12]
   1dcc4:	tst	r2, #8192	; 0x2000
   1dcc8:	addne	r3, r5, r0, lsl #3
   1dccc:	strbne	sl, [r3, #13]
   1dcd0:	tst	r2, #16384	; 0x4000
   1dcd4:	addne	r3, r5, r0, lsl #3
   1dcd8:	strbne	sl, [r3, #14]
   1dcdc:	tst	r2, #32768	; 0x8000
   1dce0:	addne	r3, r5, r0, lsl #3
   1dce4:	strbne	sl, [r3, #15]
   1dce8:	tst	r2, #65536	; 0x10000
   1dcec:	addne	r3, r5, r0, lsl #3
   1dcf0:	strbne	sl, [r3, #16]
   1dcf4:	tst	r2, #131072	; 0x20000
   1dcf8:	addne	r3, r5, r0, lsl #3
   1dcfc:	strbne	sl, [r3, #17]
   1dd00:	tst	r2, #262144	; 0x40000
   1dd04:	addne	r3, r5, r0, lsl #3
   1dd08:	strbne	sl, [r3, #18]
   1dd0c:	tst	r2, #524288	; 0x80000
   1dd10:	addne	r3, r5, r0, lsl #3
   1dd14:	strbne	sl, [r3, #19]
   1dd18:	tst	r2, #1048576	; 0x100000
   1dd1c:	addne	r3, r5, r0, lsl #3
   1dd20:	strbne	sl, [r3, #20]
   1dd24:	tst	r2, #2097152	; 0x200000
   1dd28:	addne	r3, r5, r0, lsl #3
   1dd2c:	strbne	sl, [r3, #21]
   1dd30:	tst	r2, #4194304	; 0x400000
   1dd34:	addne	r3, r5, r0, lsl #3
   1dd38:	strbne	sl, [r3, #22]
   1dd3c:	tst	r2, #8388608	; 0x800000
   1dd40:	addne	r3, r5, r0, lsl #3
   1dd44:	strbne	sl, [r3, #23]
   1dd48:	tst	r2, #16777216	; 0x1000000
   1dd4c:	addne	r3, r5, r0, lsl #3
   1dd50:	strbne	sl, [r3, #24]
   1dd54:	tst	r2, #33554432	; 0x2000000
   1dd58:	addne	r3, r5, r0, lsl #3
   1dd5c:	strbne	sl, [r3, #25]
   1dd60:	tst	r2, #67108864	; 0x4000000
   1dd64:	addne	r3, r5, r0, lsl #3
   1dd68:	strbne	sl, [r3, #26]
   1dd6c:	tst	r2, #134217728	; 0x8000000
   1dd70:	addne	r3, r5, r0, lsl #3
   1dd74:	strbne	sl, [r3, #27]
   1dd78:	tst	r2, #268435456	; 0x10000000
   1dd7c:	addne	r3, r5, r0, lsl #3
   1dd80:	strbne	sl, [r3, #28]
   1dd84:	tst	r2, #536870912	; 0x20000000
   1dd88:	addne	r3, r5, r0, lsl #3
   1dd8c:	strbne	sl, [r3, #29]
   1dd90:	tst	r2, #1073741824	; 0x40000000
   1dd94:	addne	r3, r5, r0, lsl #3
   1dd98:	strbne	sl, [r3, #30]
   1dd9c:	cmn	r2, #1
   1dda0:	strble	sl, [r1]
   1dda4:	cmp	r0, #28
   1dda8:	bne	1dc18 <__assert_fail@plt+0xbf6c>
   1ddac:	ldr	r1, [sp, #24]
   1ddb0:	ldr	r2, [sp, #28]
   1ddb4:	ldr	r0, [r1, #8]
   1ddb8:	add	r2, r2, #1
   1ddbc:	cmp	r2, r0
   1ddc0:	blt	1d668 <__assert_fail@plt+0xb9bc>
   1ddc4:	sub	sp, fp, #28
   1ddc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddcc:	mov	r0, r5
   1ddd0:	mov	r1, #1
   1ddd4:	mov	r2, #256	; 0x100
   1ddd8:	bl	11b2c <memset@plt>
   1dddc:	cmp	r6, #2
   1dde0:	ldrbeq	r0, [r9, #28]
   1dde4:	orreq	r0, r0, #1
   1dde8:	strbeq	r0, [r9, #28]
   1ddec:	sub	sp, fp, #28
   1ddf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddf4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ddf8:	add	fp, sp, #24
   1ddfc:	mov	r4, r0
   1de00:	mov	r0, #0
   1de04:	mov	r6, r2
   1de08:	mov	r5, r1
   1de0c:	str	r0, [r4]
   1de10:	str	r0, [r4, #4]
   1de14:	str	r0, [r4, #8]
   1de18:	mov	r0, #256	; 0x100
   1de1c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1de20:	cmp	r0, #0
   1de24:	str	r0, [r4, #16]
   1de28:	beq	1df60 <__assert_fail@plt+0xc2b4>
   1de2c:	movw	r0, #45820	; 0xb2fc
   1de30:	tst	r6, #1
   1de34:	and	r1, r6, #2
   1de38:	mov	r8, r4
   1de3c:	movt	r0, #3
   1de40:	movweq	r0, #710	; 0x2c6
   1de44:	movteq	r0, #257	; 0x101
   1de48:	tst	r6, #4
   1de4c:	orr	r7, r0, r1, lsl #21
   1de50:	bne	1de64 <__assert_fail@plt+0xc1b8>
   1de54:	ldrb	r0, [r8, #28]!
   1de58:	and	r0, r0, #127	; 0x7f
   1de5c:	strb	r0, [r8]
   1de60:	b	1de84 <__assert_fail@plt+0xc1d8>
   1de64:	ldrb	r0, [r8, #28]!
   1de68:	mvn	r1, #127	; 0x7f
   1de6c:	orr	r0, r0, r1
   1de70:	movw	r1, #45758	; 0xb2be
   1de74:	movt	r1, #323	; 0x143
   1de78:	strb	r0, [r8]
   1de7c:	and	r1, r7, r1
   1de80:	orr	r7, r1, #256	; 0x100
   1de84:	and	r1, r6, #8
   1de88:	and	r0, r0, #239	; 0xef
   1de8c:	mov	r9, #0
   1de90:	orr	r0, r0, r1, lsl #1
   1de94:	str	r9, [r4, #20]
   1de98:	strb	r0, [r4, #28]
   1de9c:	mov	r0, r5
   1dea0:	bl	11ac0 <strlen@plt>
   1dea4:	mov	r2, r0
   1dea8:	mov	r0, r4
   1deac:	mov	r1, r5
   1deb0:	mov	r3, r7
   1deb4:	bl	1be20 <__assert_fail@plt+0xa174>
   1deb8:	mov	r5, r0
   1debc:	cmp	r0, #16
   1dec0:	movweq	r5, #8
   1dec4:	cmp	r5, #0
   1dec8:	bne	1df6c <__assert_fail@plt+0xc2c0>
   1decc:	ldr	r5, [r4, #16]
   1ded0:	ldr	r6, [r4]
   1ded4:	mov	r1, #0
   1ded8:	mov	r2, #256	; 0x100
   1dedc:	mov	r0, r5
   1dee0:	bl	11b2c <memset@plt>
   1dee4:	ldr	r1, [r6, #36]	; 0x24
   1dee8:	mov	r0, r4
   1deec:	mov	r2, r5
   1def0:	bl	1d5cc <__assert_fail@plt+0xb920>
   1def4:	ldr	r0, [r6, #36]	; 0x24
   1def8:	ldr	r1, [r6, #40]	; 0x28
   1defc:	cmp	r0, r1
   1df00:	beq	1df14 <__assert_fail@plt+0xc268>
   1df04:	mov	r0, r4
   1df08:	mov	r2, r5
   1df0c:	bl	1d5cc <__assert_fail@plt+0xb920>
   1df10:	ldr	r0, [r6, #36]	; 0x24
   1df14:	ldr	r1, [r6, #44]	; 0x2c
   1df18:	cmp	r0, r1
   1df1c:	beq	1df30 <__assert_fail@plt+0xc284>
   1df20:	mov	r0, r4
   1df24:	mov	r2, r5
   1df28:	bl	1d5cc <__assert_fail@plt+0xb920>
   1df2c:	ldr	r0, [r6, #36]	; 0x24
   1df30:	ldr	r1, [r6, #48]	; 0x30
   1df34:	cmp	r0, r1
   1df38:	beq	1df48 <__assert_fail@plt+0xc29c>
   1df3c:	mov	r0, r4
   1df40:	mov	r2, r5
   1df44:	bl	1d5cc <__assert_fail@plt+0xb920>
   1df48:	ldrb	r0, [r8]
   1df4c:	mov	r5, #0
   1df50:	orr	r0, r0, #8
   1df54:	strb	r0, [r8]
   1df58:	mov	r0, r5
   1df5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df60:	mov	r5, #12
   1df64:	mov	r0, r5
   1df68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df6c:	ldr	r0, [r4, #16]
   1df70:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1df74:	mov	r0, r5
   1df78:	str	r9, [r4, #16]
   1df7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df80:	push	{r4, r5, r6, r7, fp, lr}
   1df84:	add	fp, sp, #16
   1df88:	cmp	r0, #17
   1df8c:	bcs	1e000 <__assert_fail@plt+0xc354>
   1df90:	movw	r1, #14376	; 0x3828
   1df94:	mov	r4, r2
   1df98:	mov	r2, #5
   1df9c:	mov	r5, r3
   1dfa0:	movt	r1, #3
   1dfa4:	ldr	r0, [r1, r0, lsl #2]
   1dfa8:	movw	r1, #13992	; 0x36a8
   1dfac:	movt	r1, #3
   1dfb0:	add	r1, r1, r0
   1dfb4:	mov	r0, #0
   1dfb8:	bl	11940 <dcgettext@plt>
   1dfbc:	mov	r6, r0
   1dfc0:	bl	11ac0 <strlen@plt>
   1dfc4:	add	r7, r0, #1
   1dfc8:	cmp	r5, #0
   1dfcc:	beq	1dfe8 <__assert_fail@plt+0xc33c>
   1dfd0:	cmp	r7, r5
   1dfd4:	mov	r2, r7
   1dfd8:	bhi	1dff0 <__assert_fail@plt+0xc344>
   1dfdc:	mov	r0, r4
   1dfe0:	mov	r1, r6
   1dfe4:	bl	118ec <memcpy@plt>
   1dfe8:	mov	r0, r7
   1dfec:	pop	{r4, r5, r6, r7, fp, pc}
   1dff0:	sub	r2, r5, #1
   1dff4:	mov	r0, #0
   1dff8:	strb	r0, [r4, r2]
   1dffc:	b	1dfdc <__assert_fail@plt+0xc330>
   1e000:	bl	11c70 <abort@plt>
   1e004:	push	{r4, r5, fp, lr}
   1e008:	add	fp, sp, #8
   1e00c:	ldr	r5, [r0]
   1e010:	mov	r4, r0
   1e014:	cmp	r5, #0
   1e018:	beq	1e044 <__assert_fail@plt+0xc398>
   1e01c:	movw	r0, #0
   1e020:	movw	r1, #0
   1e024:	movt	r0, #0
   1e028:	movt	r1, #0
   1e02c:	orrs	r0, r1, r0
   1e030:	beq	1e03c <__assert_fail@plt+0xc390>
   1e034:	add	r0, r5, #136	; 0x88
   1e038:	bl	11874 <pthread_mutex_destroy@plt>
   1e03c:	mov	r0, r5
   1e040:	bl	1e06c <__assert_fail@plt+0xc3c0>
   1e044:	mov	r5, #0
   1e048:	str	r5, [r4]
   1e04c:	str	r5, [r4, #4]
   1e050:	ldr	r0, [r4, #16]
   1e054:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e058:	str	r5, [r4, #16]
   1e05c:	ldr	r0, [r4, #20]
   1e060:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e064:	str	r5, [r4, #20]
   1e068:	pop	{r4, r5, fp, pc}
   1e06c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e070:	add	fp, sp, #28
   1e074:	sub	sp, sp, #4
   1e078:	mov	sl, r0
   1e07c:	ldr	r0, [r0]
   1e080:	cmp	r0, #0
   1e084:	ldrne	r1, [sl, #8]
   1e088:	cmpne	r1, #0
   1e08c:	beq	1e104 <__assert_fail@plt+0xc458>
   1e090:	movw	r7, #255	; 0xff
   1e094:	mov	r6, #0
   1e098:	movt	r7, #4
   1e09c:	b	1e0a4 <__assert_fail@plt+0xc3f8>
   1e0a0:	ldr	r0, [sl]
   1e0a4:	add	r1, r0, r6, lsl #3
   1e0a8:	ldr	r1, [r1, #4]
   1e0ac:	and	r1, r1, r7
   1e0b0:	cmp	r1, #3
   1e0b4:	beq	1e0ec <__assert_fail@plt+0xc440>
   1e0b8:	cmp	r1, #6
   1e0bc:	bne	1e0f4 <__assert_fail@plt+0xc448>
   1e0c0:	ldr	r5, [r0, r6, lsl #3]
   1e0c4:	ldr	r0, [r5]
   1e0c8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e0cc:	ldr	r0, [r5, #4]
   1e0d0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e0d4:	ldr	r0, [r5, #8]
   1e0d8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e0dc:	ldr	r0, [r5, #12]
   1e0e0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e0e4:	mov	r0, r5
   1e0e8:	b	1e0f0 <__assert_fail@plt+0xc444>
   1e0ec:	ldr	r0, [r0, r6, lsl #3]
   1e0f0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e0f4:	ldr	r0, [sl, #8]
   1e0f8:	add	r6, r6, #1
   1e0fc:	cmp	r6, r0
   1e100:	bcc	1e0a0 <__assert_fail@plt+0xc3f4>
   1e104:	ldr	r0, [sl, #12]
   1e108:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e10c:	ldr	r0, [sl, #8]
   1e110:	cmp	r0, #0
   1e114:	beq	1e180 <__assert_fail@plt+0xc4d4>
   1e118:	add	r7, sl, #20
   1e11c:	add	r8, sl, #28
   1e120:	add	r9, sl, #24
   1e124:	mov	r5, #0
   1e128:	mov	r6, #8
   1e12c:	ldr	r0, [r9]
   1e130:	cmp	r0, #0
   1e134:	beq	1e140 <__assert_fail@plt+0xc494>
   1e138:	ldr	r0, [r0, r6]
   1e13c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e140:	ldr	r0, [r8]
   1e144:	cmp	r0, #0
   1e148:	beq	1e154 <__assert_fail@plt+0xc4a8>
   1e14c:	ldr	r0, [r0, r6]
   1e150:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e154:	ldr	r0, [r7]
   1e158:	cmp	r0, #0
   1e15c:	beq	1e168 <__assert_fail@plt+0xc4bc>
   1e160:	ldr	r0, [r0, r6]
   1e164:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e168:	ldr	r0, [sl, #8]
   1e16c:	add	r5, r5, #1
   1e170:	add	r6, r6, #12
   1e174:	cmp	r5, r0
   1e178:	bcc	1e12c <__assert_fail@plt+0xc480>
   1e17c:	b	1e18c <__assert_fail@plt+0xc4e0>
   1e180:	add	r8, sl, #28
   1e184:	add	r9, sl, #24
   1e188:	add	r7, sl, #20
   1e18c:	ldr	r0, [r7]
   1e190:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e194:	ldr	r0, [r9]
   1e198:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e19c:	ldr	r0, [r8]
   1e1a0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e1a4:	ldr	r0, [sl]
   1e1a8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e1ac:	ldr	r5, [sl, #32]
   1e1b0:	cmp	r5, #0
   1e1b4:	beq	1e214 <__assert_fail@plt+0xc568>
   1e1b8:	mov	r6, #0
   1e1bc:	b	1e1c8 <__assert_fail@plt+0xc51c>
   1e1c0:	ldr	r5, [sl, #32]
   1e1c4:	add	r6, r6, #1
   1e1c8:	add	r0, r6, r6, lsl #1
   1e1cc:	ldr	r0, [r5, r0, lsl #2]!
   1e1d0:	add	r7, r5, #8
   1e1d4:	cmp	r0, #1
   1e1d8:	blt	1e1fc <__assert_fail@plt+0xc550>
   1e1dc:	mov	r4, #0
   1e1e0:	ldr	r0, [r7]
   1e1e4:	ldr	r0, [r0, r4, lsl #2]
   1e1e8:	bl	211b0 <__assert_fail@plt+0xf504>
   1e1ec:	ldr	r0, [r5]
   1e1f0:	add	r4, r4, #1
   1e1f4:	cmp	r4, r0
   1e1f8:	blt	1e1e0 <__assert_fail@plt+0xc534>
   1e1fc:	ldr	r0, [r7]
   1e200:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e204:	ldr	r0, [sl, #68]	; 0x44
   1e208:	cmp	r6, r0
   1e20c:	bcc	1e1c0 <__assert_fail@plt+0xc514>
   1e210:	ldr	r5, [sl, #32]
   1e214:	mov	r0, r5
   1e218:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e21c:	ldr	r0, [sl, #60]	; 0x3c
   1e220:	movw	r1, #14444	; 0x386c
   1e224:	movt	r1, #3
   1e228:	cmp	r0, r1
   1e22c:	beq	1e234 <__assert_fail@plt+0xc588>
   1e230:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e234:	ldr	r0, [sl, #132]	; 0x84
   1e238:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e23c:	mov	r0, sl
   1e240:	sub	sp, fp, #28
   1e244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e248:	b	1bba8 <__assert_fail@plt+0x9efc>
   1e24c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e250:	add	fp, sp, #28
   1e254:	sub	sp, sp, #28
   1e258:	ldr	sl, [fp, #8]
   1e25c:	mov	r7, #2
   1e260:	cmp	sl, #7
   1e264:	bhi	1e338 <__assert_fail@plt+0xc68c>
   1e268:	mov	r5, r0
   1e26c:	ldr	r0, [r0]
   1e270:	mov	r6, r3
   1e274:	mov	r9, r2
   1e278:	mov	r4, r1
   1e27c:	tst	sl, #4
   1e280:	str	r0, [sp, #24]
   1e284:	bne	1e29c <__assert_fail@plt+0xc5f0>
   1e288:	mov	r0, r4
   1e28c:	bl	11ac0 <strlen@plt>
   1e290:	mov	r7, r0
   1e294:	mov	r8, #0
   1e298:	b	1e2a4 <__assert_fail@plt+0xc5f8>
   1e29c:	ldr	r8, [r6]
   1e2a0:	ldr	r7, [r6, #4]
   1e2a4:	movw	r0, #0
   1e2a8:	movw	r1, #0
   1e2ac:	movt	r0, #0
   1e2b0:	movt	r1, #0
   1e2b4:	orrs	r0, r1, r0
   1e2b8:	str	r0, [sp, #20]
   1e2bc:	beq	1e2cc <__assert_fail@plt+0xc620>
   1e2c0:	ldr	r0, [sp, #24]
   1e2c4:	add	r0, r0, #136	; 0x88
   1e2c8:	bl	118bc <pthread_mutex_lock@plt>
   1e2cc:	ldrb	r0, [r5, #28]
   1e2d0:	tst	r0, #16
   1e2d4:	bne	1e2e8 <__assert_fail@plt+0xc63c>
   1e2d8:	str	r7, [sp]
   1e2dc:	stmib	sp, {r7, r9}
   1e2e0:	str	r6, [sp, #12]
   1e2e4:	b	1e2fc <__assert_fail@plt+0xc650>
   1e2e8:	mov	r0, #0
   1e2ec:	str	r7, [sp]
   1e2f0:	str	r7, [sp, #4]
   1e2f4:	str	r0, [sp, #8]
   1e2f8:	str	r0, [sp, #12]
   1e2fc:	mov	r0, r5
   1e300:	mov	r1, r4
   1e304:	mov	r2, r7
   1e308:	mov	r3, r8
   1e30c:	str	sl, [sp, #16]
   1e310:	bl	1e344 <__assert_fail@plt+0xc698>
   1e314:	mov	r7, r0
   1e318:	ldr	r0, [sp, #20]
   1e31c:	cmp	r0, #0
   1e320:	beq	1e330 <__assert_fail@plt+0xc684>
   1e324:	ldr	r0, [sp, #24]
   1e328:	add	r0, r0, #136	; 0x88
   1e32c:	bl	11808 <pthread_mutex_unlock@plt>
   1e330:	cmp	r7, #0
   1e334:	movwne	r7, #1
   1e338:	mov	r0, r7
   1e33c:	sub	sp, fp, #28
   1e340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e348:	add	fp, sp, #28
   1e34c:	sub	sp, sp, #412	; 0x19c
   1e350:	ldr	r8, [r0]
   1e354:	str	r2, [sp, #76]	; 0x4c
   1e358:	str	r1, [sp, #100]	; 0x64
   1e35c:	mov	r7, r0
   1e360:	add	r0, sp, #104	; 0x68
   1e364:	mov	r1, #0
   1e368:	mov	r2, #136	; 0x88
   1e36c:	mov	r6, r3
   1e370:	mov	r4, #0
   1e374:	bl	11b2c <memset@plt>
   1e378:	str	r8, [sp, #188]	; 0xbc
   1e37c:	ldr	sl, [fp, #16]
   1e380:	ldr	ip, [fp, #8]
   1e384:	mov	r5, #0
   1e388:	ldr	r1, [r7, #16]
   1e38c:	cmp	r1, #0
   1e390:	beq	1e3ac <__assert_fail@plt+0xc700>
   1e394:	ldrb	r2, [r7, #28]
   1e398:	and	r2, r2, #9
   1e39c:	cmp	r2, #8
   1e3a0:	movne	r1, #0
   1e3a4:	subs	r5, r6, ip
   1e3a8:	movne	r5, r1
   1e3ac:	ldr	r2, [r7, #24]
   1e3b0:	ldr	r1, [r7, #8]
   1e3b4:	mov	r9, #1
   1e3b8:	mvn	r3, r2
   1e3bc:	cmp	r2, sl
   1e3c0:	addcc	r4, r3, sl
   1e3c4:	cmp	r1, #0
   1e3c8:	beq	20960 <__assert_fail@plt+0xecb4>
   1e3cc:	ldr	r1, [r8, #36]	; 0x24
   1e3d0:	cmp	r1, #0
   1e3d4:	ldrne	r2, [r8, #40]	; 0x28
   1e3d8:	cmpne	r2, #0
   1e3dc:	beq	20960 <__assert_fail@plt+0xecb4>
   1e3e0:	ldr	r3, [r8, #44]	; 0x2c
   1e3e4:	cmp	r3, #0
   1e3e8:	movne	r0, r7
   1e3ec:	ldrne	r7, [r8, #48]	; 0x30
   1e3f0:	cmpne	r7, #0
   1e3f4:	beq	20960 <__assert_fail@plt+0xecb4>
   1e3f8:	ldr	r1, [r1, #8]
   1e3fc:	ldr	lr, [r0, #20]
   1e400:	mov	r7, r0
   1e404:	cmp	r1, #0
   1e408:	bne	1e418 <__assert_fail@plt+0xc76c>
   1e40c:	ldr	r1, [r2, #8]
   1e410:	cmp	r1, #0
   1e414:	beq	1fb04 <__assert_fail@plt+0xde58>
   1e418:	mov	r1, ip
   1e41c:	subs	r0, sl, r4
   1e420:	str	r1, [sp, #80]	; 0x50
   1e424:	str	r4, [sp, #28]
   1e428:	str	r0, [sp, #68]	; 0x44
   1e42c:	mov	r0, #1
   1e430:	str	r0, [sp, #52]	; 0x34
   1e434:	bne	1e448 <__assert_fail@plt+0xc79c>
   1e438:	ldr	r0, [r8, #76]	; 0x4c
   1e43c:	cmp	r0, #0
   1e440:	movwne	r0, #1
   1e444:	str	r0, [sp, #52]	; 0x34
   1e448:	ldr	r0, [r7, #12]
   1e44c:	ldr	r2, [r8, #92]	; 0x5c
   1e450:	ldr	r3, [sp, #100]	; 0x64
   1e454:	ldr	r1, [r8, #8]
   1e458:	str	lr, [sp, #168]	; 0xa8
   1e45c:	str	r3, [sp, #104]	; 0x68
   1e460:	str	r2, [sp, #184]	; 0xb8
   1e464:	ubfx	r3, r0, #22, #1
   1e468:	and	r0, r0, #4194304	; 0x400000
   1e46c:	ldr	r4, [sp, #76]	; 0x4c
   1e470:	str	r8, [sp, #96]	; 0x60
   1e474:	orrs	sl, lr, r0
   1e478:	strb	r3, [sp, #176]	; 0xb0
   1e47c:	add	r3, sp, #104	; 0x68
   1e480:	movwne	sl, #1
   1e484:	add	r3, r3, #44	; 0x2c
   1e488:	strb	sl, [sp, #179]	; 0xb3
   1e48c:	ldrb	r0, [r8, #88]	; 0x58
   1e490:	vdup.32	q8, r4
   1e494:	add	r8, r1, #1
   1e498:	vst1.32	{d16-d17}, [r3]
   1e49c:	cmp	r2, r8
   1e4a0:	movgt	r8, r2
   1e4a4:	ubfx	r3, r0, #3, #1
   1e4a8:	strb	r3, [sp, #178]	; 0xb2
   1e4ac:	ubfx	r0, r0, #2, #1
   1e4b0:	str	r7, [sp, #64]	; 0x40
   1e4b4:	str	r5, [sp, #92]	; 0x5c
   1e4b8:	str	lr, [sp, #88]	; 0x58
   1e4bc:	strb	r0, [sp, #177]	; 0xb1
   1e4c0:	add	r0, r4, #1
   1e4c4:	cmp	r0, r8
   1e4c8:	movlt	r8, r0
   1e4cc:	cmp	r2, #2
   1e4d0:	blt	1e504 <__assert_fail@plt+0xc858>
   1e4d4:	mov	r9, #12
   1e4d8:	cmn	r8, #-1073741823	; 0xc0000001
   1e4dc:	bhi	2090c <__assert_fail@plt+0xec60>
   1e4e0:	lsl	r1, r8, #2
   1e4e4:	mov	r0, #0
   1e4e8:	bl	1bd04 <__assert_fail@plt+0xa058>
   1e4ec:	ldr	lr, [sp, #88]	; 0x58
   1e4f0:	ldr	r5, [sp, #92]	; 0x5c
   1e4f4:	cmp	r0, #0
   1e4f8:	beq	2090c <__assert_fail@plt+0xec60>
   1e4fc:	ldr	r7, [sp, #64]	; 0x40
   1e500:	str	r0, [sp, #112]	; 0x70
   1e504:	ldr	r4, [sp, #96]	; 0x60
   1e508:	mov	r9, r7
   1e50c:	mov	r7, #1
   1e510:	cmp	sl, #0
   1e514:	beq	1e53c <__assert_fail@plt+0xc890>
   1e518:	mov	r0, #0
   1e51c:	mov	r1, r8
   1e520:	mov	r7, #0
   1e524:	bl	1bd04 <__assert_fail@plt+0xa058>
   1e528:	cmp	r0, #0
   1e52c:	beq	20704 <__assert_fail@plt+0xea58>
   1e530:	ldr	r5, [sp, #92]	; 0x5c
   1e534:	ldr	lr, [sp, #88]	; 0x58
   1e538:	str	r0, [sp, #108]	; 0x6c
   1e53c:	add	r1, r4, #96	; 0x60
   1e540:	str	r8, [sp, #140]	; 0x8c
   1e544:	ldr	r0, [fp, #12]
   1e548:	cmp	r7, #0
   1e54c:	str	r1, [sp, #172]	; 0xac
   1e550:	ldrb	r1, [r4, #88]	; 0x58
   1e554:	ubfx	r1, r1, #4, #1
   1e558:	strb	r1, [sp, #182]	; 0xb6
   1e55c:	mov	r1, #0
   1e560:	beq	1e57c <__assert_fail@plt+0xc8d0>
   1e564:	ldr	r1, [sp, #100]	; 0x64
   1e568:	str	r1, [sp, #108]	; 0x6c
   1e56c:	ldr	r1, [r4, #92]	; 0x5c
   1e570:	cmp	r1, #1
   1e574:	ldr	r1, [sp, #76]	; 0x4c
   1e578:	movwgt	r1, #0
   1e57c:	str	r1, [sp, #136]	; 0x88
   1e580:	str	r1, [sp, #132]	; 0x84
   1e584:	str	r0, [sp, #160]	; 0xa0
   1e588:	str	r0, [sp, #156]	; 0x9c
   1e58c:	ldrb	r0, [r9, #28]
   1e590:	lsr	r0, r0, #7
   1e594:	strb	r0, [sp, #181]	; 0xb5
   1e598:	mvn	r0, #0
   1e59c:	ldr	r4, [r4, #76]	; 0x4c
   1e5a0:	str	r0, [sp, #196]	; 0xc4
   1e5a4:	ldr	r0, [fp, #24]
   1e5a8:	lsl	sl, r4, #1
   1e5ac:	cmp	r4, #1
   1e5b0:	str	r0, [sp, #192]	; 0xc0
   1e5b4:	blt	1e604 <__assert_fail@plt+0xc958>
   1e5b8:	movw	r0, #43690	; 0xaaaa
   1e5bc:	mov	r9, #12
   1e5c0:	movt	r0, #2730	; 0xaaa
   1e5c4:	cmp	sl, r0
   1e5c8:	bhi	2090c <__assert_fail@plt+0xec60>
   1e5cc:	add	r0, r4, r4, lsl #1
   1e5d0:	lsl	r0, r0, #4
   1e5d4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1e5d8:	mov	r7, r0
   1e5dc:	str	r0, [sp, #220]	; 0xdc
   1e5e0:	lsl	r0, r4, #3
   1e5e4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1e5e8:	cmp	r0, #0
   1e5ec:	str	r0, [sp, #236]	; 0xec
   1e5f0:	beq	2090c <__assert_fail@plt+0xec60>
   1e5f4:	ldr	r5, [sp, #92]	; 0x5c
   1e5f8:	ldr	lr, [sp, #88]	; 0x58
   1e5fc:	cmp	r7, #0
   1e600:	beq	2090c <__assert_fail@plt+0xec60>
   1e604:	mov	r0, #1
   1e608:	str	r0, [sp, #224]	; 0xe0
   1e60c:	ldr	r0, [sp, #68]	; 0x44
   1e610:	str	sl, [sp, #216]	; 0xd8
   1e614:	str	sl, [sp, #232]	; 0xe8
   1e618:	cmp	r0, #1
   1e61c:	bhi	1e630 <__assert_fail@plt+0xc984>
   1e620:	ldr	r0, [sp, #96]	; 0x60
   1e624:	ldrb	r0, [r0, #88]	; 0x58
   1e628:	tst	r0, #2
   1e62c:	beq	1e65c <__assert_fail@plt+0xc9b0>
   1e630:	mov	r9, #12
   1e634:	cmn	r8, #-1073741822	; 0xc0000002
   1e638:	bhi	2090c <__assert_fail@plt+0xec60>
   1e63c:	mov	r0, #4
   1e640:	add	r0, r0, r8, lsl #2
   1e644:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1e648:	ldr	lr, [sp, #88]	; 0x58
   1e64c:	ldr	r5, [sp, #92]	; 0x5c
   1e650:	cmp	r0, #0
   1e654:	str	r0, [sp, #204]	; 0xcc
   1e658:	beq	2090c <__assert_fail@plt+0xec60>
   1e65c:	ldr	r1, [fp, #24]
   1e660:	ldr	r2, [sp, #80]	; 0x50
   1e664:	str	r6, [fp, #-200]	; 0xffffff38
   1e668:	mov	r8, #1
   1e66c:	mov	r4, r6
   1e670:	mov	r0, #4
   1e674:	tst	r1, #1
   1e678:	mov	r1, #4
   1e67c:	mov	r7, r2
   1e680:	movweq	r1, #6
   1e684:	cmp	r2, r6
   1e688:	str	r1, [sp, #164]	; 0xa4
   1e68c:	ldr	r1, [sp, #96]	; 0x60
   1e690:	mvnlt	r8, #0
   1e694:	movlt	r7, r6
   1e698:	movlt	r4, r2
   1e69c:	cmp	r5, #0
   1e6a0:	ldr	r1, [r1, #92]	; 0x5c
   1e6a4:	str	r1, [sp, #60]	; 0x3c
   1e6a8:	beq	1e6ec <__assert_fail@plt+0xca40>
   1e6ac:	cmp	r1, #1
   1e6b0:	beq	1e6d0 <__assert_fail@plt+0xca24>
   1e6b4:	ldr	r0, [sp, #64]	; 0x40
   1e6b8:	ldr	r0, [r0, #12]
   1e6bc:	and	r0, r0, #4194304	; 0x400000
   1e6c0:	orr	r0, lr, r0
   1e6c4:	clz	r0, r0
   1e6c8:	lsr	r0, r0, #5
   1e6cc:	lsl	r0, r0, #2
   1e6d0:	cmp	lr, #0
   1e6d4:	mov	r1, lr
   1e6d8:	movwne	r1, #1
   1e6dc:	cmp	r2, r6
   1e6e0:	orrge	r1, r1, #2
   1e6e4:	orr	r0, r1, r0
   1e6e8:	b	1e6f0 <__assert_fail@plt+0xca44>
   1e6ec:	mov	r0, #8
   1e6f0:	add	r1, sp, #104	; 0x68
   1e6f4:	cmp	r2, r6
   1e6f8:	sub	r0, r0, #4
   1e6fc:	str	r7, [sp, #48]	; 0x30
   1e700:	str	r4, [sp, #44]	; 0x2c
   1e704:	str	r8, [sp, #84]	; 0x54
   1e708:	add	r1, r1, #32
   1e70c:	str	r0, [sp, #80]	; 0x50
   1e710:	str	r1, [sp, #24]
   1e714:	sub	r1, fp, #200	; 0xc8
   1e718:	movwlt	r1, #0
   1e71c:	cmp	r1, #0
   1e720:	str	r1, [sp, #36]	; 0x24
   1e724:	movwne	r1, #1
   1e728:	str	r1, [sp, #40]	; 0x28
   1e72c:	sub	r1, fp, #192	; 0xc0
   1e730:	add	r1, r1, #16
   1e734:	str	r1, [sp, #32]
   1e738:	b	1ebe8 <__assert_fail@plt+0xcf3c>
   1e73c:	mov	r1, #0
   1e740:	sub	r0, fp, #188	; 0xbc
   1e744:	str	r6, [fp, #-192]	; 0xffffff40
   1e748:	stm	r0, {r1, r5, r8}
   1e74c:	ldr	r0, [sp, #32]
   1e750:	str	r1, [r0]
   1e754:	str	r1, [r0, #4]
   1e758:	str	r1, [r0, #8]
   1e75c:	add	r0, sp, #104	; 0x68
   1e760:	sub	r1, fp, #192	; 0xc0
   1e764:	bl	2d680 <__assert_fail@plt+0x1b9d4>
   1e768:	mov	r9, r0
   1e76c:	mov	r0, #0
   1e770:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e774:	cmp	r9, #0
   1e778:	bne	1ea78 <__assert_fail@plt+0xcdcc>
   1e77c:	ldr	r0, [r6]
   1e780:	mov	r7, #0
   1e784:	cmp	r0, #0
   1e788:	beq	1e868 <__assert_fail@plt+0xcbbc>
   1e78c:	b	1f948 <__assert_fail@plt+0xdc9c>
   1e790:	ldr	r1, [r7]
   1e794:	cmp	r1, #0
   1e798:	bne	1f888 <__assert_fail@plt+0xdbdc>
   1e79c:	cmp	r3, #1
   1e7a0:	blt	1e868 <__assert_fail@plt+0xcbbc>
   1e7a4:	ldr	r0, [sp, #204]	; 0xcc
   1e7a8:	lsl	r4, r3, #2
   1e7ac:	add	sl, r3, #1
   1e7b0:	sub	r0, r0, #4
   1e7b4:	ldr	r1, [r0, r4]
   1e7b8:	cmp	r1, #0
   1e7bc:	ldrbne	r2, [r1, #52]	; 0x34
   1e7c0:	tstne	r2, #16
   1e7c4:	bne	1e7dc <__assert_fail@plt+0xcb30>
   1e7c8:	sub	sl, sl, #1
   1e7cc:	sub	r4, r4, #4
   1e7d0:	cmp	sl, #2
   1e7d4:	bge	1e7b4 <__assert_fail@plt+0xcb08>
   1e7d8:	b	1e868 <__assert_fail@plt+0xcbbc>
   1e7dc:	sub	r5, sl, #2
   1e7e0:	add	r9, sp, #104	; 0x68
   1e7e4:	mov	r0, r9
   1e7e8:	mov	r2, r5
   1e7ec:	bl	287cc <__assert_fail@plt+0x16b20>
   1e7f0:	mov	r8, r0
   1e7f4:	mov	r0, r7
   1e7f8:	mov	r1, #0
   1e7fc:	mov	r2, r4
   1e800:	bl	11b2c <memset@plt>
   1e804:	ldr	r0, [sp, #32]
   1e808:	mov	r1, #0
   1e80c:	str	r6, [fp, #-192]	; 0xffffff40
   1e810:	str	r7, [fp, #-188]	; 0xffffff44
   1e814:	str	r8, [fp, #-184]	; 0xffffff48
   1e818:	str	r5, [fp, #-180]	; 0xffffff4c
   1e81c:	str	r8, [sp, #56]	; 0x38
   1e820:	mov	r4, r5
   1e824:	str	r1, [r0]
   1e828:	str	r1, [r0, #4]
   1e82c:	str	r1, [r0, #8]
   1e830:	mov	r0, r9
   1e834:	sub	r1, fp, #192	; 0xc0
   1e838:	bl	2d680 <__assert_fail@plt+0x1b9d4>
   1e83c:	mov	r9, r0
   1e840:	mov	r0, #0
   1e844:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e848:	cmp	r9, #0
   1e84c:	bne	1ea70 <__assert_fail@plt+0xcdc4>
   1e850:	ldr	r0, [r6]
   1e854:	mov	r3, r4
   1e858:	cmp	r0, #0
   1e85c:	beq	1e790 <__assert_fail@plt+0xcae4>
   1e860:	sub	r3, sl, #2
   1e864:	b	1f888 <__assert_fail@plt+0xdbdc>
   1e868:	mov	r0, r6
   1e86c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e870:	mov	r0, r7
   1e874:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e878:	ldr	r8, [sp, #84]	; 0x54
   1e87c:	add	r0, sp, #104	; 0x68
   1e880:	bl	28970 <__assert_fail@plt+0x16cc4>
   1e884:	ldr	r0, [fp, #-200]	; 0xffffff38
   1e888:	ldr	r4, [sp, #44]	; 0x2c
   1e88c:	ldr	r7, [sp, #48]	; 0x30
   1e890:	mov	r9, #1
   1e894:	add	r6, r0, r8
   1e898:	cmp	r6, r4
   1e89c:	str	r6, [fp, #-200]	; 0xffffff38
   1e8a0:	blt	2090c <__assert_fail@plt+0xec60>
   1e8a4:	ldr	r5, [sp, #92]	; 0x5c
   1e8a8:	ldr	lr, [sp, #88]	; 0x58
   1e8ac:	cmp	r7, r6
   1e8b0:	bge	1ebe8 <__assert_fail@plt+0xcf3c>
   1e8b4:	b	2090c <__assert_fail@plt+0xec60>
   1e8b8:	ldrb	r0, [sp, #182]	; 0xb6
   1e8bc:	cmp	r0, #0
   1e8c0:	bne	1eab0 <__assert_fail@plt+0xce04>
   1e8c4:	cmp	r7, #10
   1e8c8:	bne	1ea10 <__assert_fail@plt+0xcd64>
   1e8cc:	ldrb	r3, [sp, #181]	; 0xb5
   1e8d0:	cmp	r3, #0
   1e8d4:	movwne	r3, #2
   1e8d8:	tst	r3, #1
   1e8dc:	bne	1ea0c <__assert_fail@plt+0xcd60>
   1e8e0:	cmp	r3, #0
   1e8e4:	beq	1ea10 <__assert_fail@plt+0xcd64>
   1e8e8:	ands	r1, r3, #2
   1e8ec:	and	r0, r3, #4
   1e8f0:	cmpne	r0, #0
   1e8f4:	bne	1e940 <__assert_fail@plt+0xcc94>
   1e8f8:	cmp	r1, #0
   1e8fc:	bne	1e950 <__assert_fail@plt+0xcca4>
   1e900:	ldr	r6, [r4, #36]	; 0x24
   1e904:	cmp	r0, #0
   1e908:	beq	1ea10 <__assert_fail@plt+0xcd64>
   1e90c:	ldr	r2, [r6, #40]	; 0x28
   1e910:	sub	r0, fp, #196	; 0xc4
   1e914:	mov	r1, r4
   1e918:	mov	r6, lr
   1e91c:	bl	2725c <__assert_fail@plt+0x155b0>
   1e920:	mov	lr, r6
   1e924:	mov	r6, r0
   1e928:	cmp	r6, #0
   1e92c:	bne	1edb4 <__assert_fail@plt+0xd108>
   1e930:	b	20704 <__assert_fail@plt+0xea58>
   1e934:	ldr	r8, [sp, #84]	; 0x54
   1e938:	ldr	r1, [sp, #72]	; 0x48
   1e93c:	b	1f638 <__assert_fail@plt+0xd98c>
   1e940:	ldr	r6, [r4, #48]	; 0x30
   1e944:	cmp	r6, #0
   1e948:	bne	1edb4 <__assert_fail@plt+0xd108>
   1e94c:	b	20704 <__assert_fail@plt+0xea58>
   1e950:	ldr	r6, [r4, #44]	; 0x2c
   1e954:	cmp	r6, #0
   1e958:	bne	1edb4 <__assert_fail@plt+0xd108>
   1e95c:	b	20704 <__assert_fail@plt+0xea58>
   1e960:	mov	ip, r4
   1e964:	cmn	ip, #1
   1e968:	beq	1e87c <__assert_fail@plt+0xcbd0>
   1e96c:	b	1f650 <__assert_fail@plt+0xd9a4>
   1e970:	mov	r9, r0
   1e974:	mov	r0, r7
   1e978:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1e97c:	cmp	r9, #0
   1e980:	beq	1f948 <__assert_fail@plt+0xdc9c>
   1e984:	b	1ea80 <__assert_fail@plt+0xcdd4>
   1e988:	ldr	r8, [sp, #84]	; 0x54
   1e98c:	cmn	r7, #1
   1e990:	ble	1ea1c <__assert_fail@plt+0xcd70>
   1e994:	mov	r0, #1
   1e998:	mov	ip, lr
   1e99c:	str	r0, [sp, #56]	; 0x38
   1e9a0:	ldr	r0, [sp, #52]	; 0x34
   1e9a4:	cmp	r0, #0
   1e9a8:	beq	1ea60 <__assert_fail@plt+0xcdb4>
   1e9ac:	b	1edf8 <__assert_fail@plt+0xd14c>
   1e9b0:	ldr	r0, [r6, #8]
   1e9b4:	cmp	r0, #1
   1e9b8:	blt	1eb94 <__assert_fail@plt+0xcee8>
   1e9bc:	ldr	r4, [sp, #188]	; 0xbc
   1e9c0:	mov	r7, #0
   1e9c4:	b	1eaf8 <__assert_fail@plt+0xce4c>
   1e9c8:	ldr	r1, [sp, #76]	; 0x4c
   1e9cc:	mov	r0, #0
   1e9d0:	mov	r6, r7
   1e9d4:	cmp	r7, r1
   1e9d8:	ldr	r1, [sp, #100]	; 0x64
   1e9dc:	ldrblt	r0, [r1, r7]
   1e9e0:	cmp	lr, #0
   1e9e4:	ldrbne	r0, [lr, r0]
   1e9e8:	ldrb	r0, [r5, r0]
   1e9ec:	cmp	r0, #0
   1e9f0:	bne	1ed50 <__assert_fail@plt+0xd0a4>
   1e9f4:	b	209f4 <__assert_fail@plt+0xed48>
   1e9f8:	ldr	r0, [sp, #192]	; 0xc0
   1e9fc:	and	r0, r0, #2
   1ea00:	eor	r3, r0, #10
   1ea04:	tst	r3, #1
   1ea08:	beq	1e8e0 <__assert_fail@plt+0xcc34>
   1ea0c:	ldr	r6, [r4, #40]	; 0x28
   1ea10:	cmp	r6, #0
   1ea14:	bne	1edb4 <__assert_fail@plt+0xd108>
   1ea18:	b	20704 <__assert_fail@plt+0xea58>
   1ea1c:	add	r0, sp, #104	; 0x68
   1ea20:	mov	r1, r6
   1ea24:	mov	r2, lr
   1ea28:	mov	r4, lr
   1ea2c:	bl	287cc <__assert_fail@plt+0x16b20>
   1ea30:	clz	r1, r0
   1ea34:	cmp	r0, #0
   1ea38:	mov	ip, r4
   1ea3c:	mov	lr, r4
   1ea40:	lsr	r2, r1, #5
   1ea44:	ldr	r1, [sp, #52]	; 0x34
   1ea48:	movwne	r0, #1
   1ea4c:	mvneq	ip, #0
   1ea50:	str	r0, [sp, #56]	; 0x38
   1ea54:	orr	r1, r1, r2
   1ea58:	cmp	r1, #0
   1ea5c:	bne	1edf8 <__assert_fail@plt+0xd14c>
   1ea60:	mov	ip, lr
   1ea64:	cmn	ip, #1
   1ea68:	beq	1e87c <__assert_fail@plt+0xcbd0>
   1ea6c:	b	1f650 <__assert_fail@plt+0xd9a4>
   1ea70:	str	r7, [sp, #20]
   1ea74:	b	1ea80 <__assert_fail@plt+0xcdd4>
   1ea78:	mov	r0, #0
   1ea7c:	str	r0, [sp, #20]
   1ea80:	mov	r0, r6
   1ea84:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1ea88:	ldr	r0, [sp, #20]
   1ea8c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1ea90:	ldr	r7, [sp, #68]	; 0x44
   1ea94:	ldr	r6, [sp, #64]	; 0x40
   1ea98:	ldr	r8, [sp, #84]	; 0x54
   1ea9c:	cmp	r9, #0
   1eaa0:	beq	1f978 <__assert_fail@plt+0xdccc>
   1eaa4:	cmp	r9, #1
   1eaa8:	beq	1e87c <__assert_fail@plt+0xcbd0>
   1eaac:	b	2090c <__assert_fail@plt+0xec60>
   1eab0:	mov	r0, r7
   1eab4:	mov	r9, lr
   1eab8:	bl	11afc <iswalnum@plt>
   1eabc:	mov	lr, r9
   1eac0:	cmp	r7, #95	; 0x5f
   1eac4:	beq	1ea0c <__assert_fail@plt+0xcd60>
   1eac8:	cmp	r0, #0
   1eacc:	beq	1e8c4 <__assert_fail@plt+0xcc18>
   1ead0:	b	1ea0c <__assert_fail@plt+0xcd60>
   1ead4:	ldr	r0, [sp, #236]	; 0xec
   1ead8:	lsl	r1, r9, #3
   1eadc:	bl	1bd04 <__assert_fail@plt+0xa058>
   1eae0:	cmp	r0, #0
   1eae4:	beq	1ebe0 <__assert_fail@plt+0xcf34>
   1eae8:	str	r0, [sp, #236]	; 0xec
   1eaec:	lsl	r0, r9, #1
   1eaf0:	str	r0, [sp, #232]	; 0xe8
   1eaf4:	b	1eb44 <__assert_fail@plt+0xce98>
   1eaf8:	ldr	r1, [r6, #12]
   1eafc:	ldr	r5, [r1, r7, lsl #2]
   1eb00:	ldr	r1, [r4]
   1eb04:	add	r2, r1, r5, lsl #3
   1eb08:	ldrb	r2, [r2, #4]
   1eb0c:	cmp	r2, #8
   1eb10:	bne	1eb88 <__assert_fail@plt+0xcedc>
   1eb14:	ldr	r1, [r1, r5, lsl #3]
   1eb18:	cmp	r1, #31
   1eb1c:	bgt	1eb88 <__assert_fail@plt+0xcedc>
   1eb20:	ldr	r2, [r4, #80]	; 0x50
   1eb24:	mov	r3, #1
   1eb28:	tst	r2, r3, lsl r1
   1eb2c:	beq	1eb88 <__assert_fail@plt+0xcedc>
   1eb30:	ldr	r9, [sp, #228]	; 0xe4
   1eb34:	ldr	r0, [sp, #232]	; 0xe8
   1eb38:	mov	r8, lr
   1eb3c:	cmp	r9, r0
   1eb40:	beq	1ead4 <__assert_fail@plt+0xce28>
   1eb44:	mov	r0, #1
   1eb48:	mov	r1, #24
   1eb4c:	bl	1b90c <__assert_fail@plt+0x9c60>
   1eb50:	ldr	r1, [sp, #228]	; 0xe4
   1eb54:	ldr	r2, [sp, #236]	; 0xec
   1eb58:	str	r0, [r2, r1, lsl #2]
   1eb5c:	ldr	r0, [sp, #236]	; 0xec
   1eb60:	ldr	r0, [r0, r1, lsl #2]
   1eb64:	cmp	r0, #0
   1eb68:	beq	1ebe0 <__assert_fail@plt+0xcf34>
   1eb6c:	add	r1, r1, #1
   1eb70:	str	r5, [r0, #4]
   1eb74:	mov	lr, r8
   1eb78:	str	r1, [sp, #228]	; 0xe4
   1eb7c:	mov	r1, #0
   1eb80:	str	r1, [r0]
   1eb84:	ldr	r0, [r6, #8]
   1eb88:	add	r7, r7, #1
   1eb8c:	cmp	r7, r0
   1eb90:	blt	1eaf8 <__assert_fail@plt+0xce4c>
   1eb94:	mov	sl, #0
   1eb98:	str	sl, [fp, #-196]	; 0xffffff3c
   1eb9c:	ldrb	r0, [r6, #52]	; 0x34
   1eba0:	tst	r0, #64	; 0x40
   1eba4:	beq	1edd8 <__assert_fail@plt+0xd12c>
   1eba8:	add	r1, r6, #4
   1ebac:	add	r0, sp, #104	; 0x68
   1ebb0:	mov	r4, lr
   1ebb4:	bl	28c00 <__assert_fail@plt+0x16f54>
   1ebb8:	mov	sl, #0
   1ebbc:	mov	lr, r4
   1ebc0:	cmp	r0, #0
   1ebc4:	str	r0, [fp, #-196]	; 0xffffff3c
   1ebc8:	beq	1edd8 <__assert_fail@plt+0xd12c>
   1ebcc:	ldr	r8, [sp, #84]	; 0x54
   1ebd0:	mov	ip, r0
   1ebd4:	cmn	ip, #1
   1ebd8:	beq	1e87c <__assert_fail@plt+0xcbd0>
   1ebdc:	b	1f650 <__assert_fail@plt+0xd9a4>
   1ebe0:	mov	ip, #12
   1ebe4:	b	1f658 <__assert_fail@plt+0xd9ac>
   1ebe8:	ldr	r1, [sp, #80]	; 0x50
   1ebec:	cmp	r1, #4
   1ebf0:	bhi	1ec60 <__assert_fail@plt+0xcfb4>
   1ebf4:	add	r0, pc, #0
   1ebf8:	ldr	pc, [r0, r1, lsl #2]
   1ebfc:	andeq	lr, r1, r0, lsl ip
   1ec00:	andeq	lr, r1, r0, lsl ip
   1ec04:	andeq	lr, r1, r8, ror #25
   1ec08:	andeq	lr, r1, r8, lsl sp
   1ec0c:	andeq	lr, r1, r0, asr sp
   1ec10:	mov	r9, #1
   1ec14:	cmp	r6, r4
   1ec18:	blt	2090c <__assert_fail@plt+0xec60>
   1ec1c:	cmp	lr, #0
   1ec20:	beq	1f798 <__assert_fail@plt+0xdaec>
   1ec24:	ldr	r1, [sp, #76]	; 0x4c
   1ec28:	mov	r0, #0
   1ec2c:	cmp	r6, r1
   1ec30:	ldrlt	r0, [sp, #100]	; 0x64
   1ec34:	ldrblt	r0, [r0, r6]
   1ec38:	ldrb	r0, [lr, r0]
   1ec3c:	ldrb	r0, [r5, r0]
   1ec40:	cmp	r0, #0
   1ec44:	bne	1ed50 <__assert_fail@plt+0xd0a4>
   1ec48:	sub	r0, r6, #1
   1ec4c:	cmp	r6, r4
   1ec50:	mov	r6, r0
   1ec54:	str	r0, [fp, #-200]	; 0xffffff38
   1ec58:	bgt	1ec28 <__assert_fail@plt+0xcf7c>
   1ec5c:	b	2090c <__assert_fail@plt+0xec60>
   1ec60:	ldr	r0, [sp, #128]	; 0x80
   1ec64:	ldr	r2, [sp, #136]	; 0x88
   1ec68:	sub	r1, r6, r0
   1ec6c:	cmp	r1, r2
   1ec70:	bcs	1ecb4 <__assert_fail@plt+0xd008>
   1ec74:	ldr	r3, [sp, #132]	; 0x84
   1ec78:	mov	r2, #0
   1ec7c:	cmp	r1, r3
   1ec80:	ldrcc	r2, [sp, #108]	; 0x6c
   1ec84:	ldrbcc	r2, [r2, r1]
   1ec88:	ldrb	r1, [r5, r2]
   1ec8c:	cmp	r1, #0
   1ec90:	bne	1ed50 <__assert_fail@plt+0xd0a4>
   1ec94:	add	r6, r6, r8
   1ec98:	mov	r9, #1
   1ec9c:	cmp	r6, r4
   1eca0:	str	r6, [fp, #-200]	; 0xffffff38
   1eca4:	blt	2090c <__assert_fail@plt+0xec60>
   1eca8:	cmp	r6, r7
   1ecac:	ble	1ec64 <__assert_fail@plt+0xcfb8>
   1ecb0:	b	2090c <__assert_fail@plt+0xec60>
   1ecb4:	ldr	r2, [fp, #24]
   1ecb8:	add	r0, sp, #104	; 0x68
   1ecbc:	mov	r1, r6
   1ecc0:	bl	27d5c <__assert_fail@plt+0x160b0>
   1ecc4:	cmp	r0, #0
   1ecc8:	bne	20714 <__assert_fail@plt+0xea68>
   1eccc:	ldr	r0, [sp, #128]	; 0x80
   1ecd0:	ldr	r6, [fp, #-200]	; 0xffffff38
   1ecd4:	ldr	r5, [sp, #92]	; 0x5c
   1ecd8:	ldr	r7, [sp, #48]	; 0x30
   1ecdc:	ldr	r4, [sp, #44]	; 0x2c
   1ece0:	sub	r1, r6, r0
   1ece4:	b	1ec74 <__assert_fail@plt+0xcfc8>
   1ece8:	ldr	r1, [sp, #100]	; 0x64
   1ecec:	cmp	r6, r7
   1ecf0:	bge	1ed48 <__assert_fail@plt+0xd09c>
   1ecf4:	ldrb	r0, [r1, r6]
   1ecf8:	ldrb	r0, [r5, r0]
   1ecfc:	cmp	r0, #0
   1ed00:	bne	1ed48 <__assert_fail@plt+0xd09c>
   1ed04:	add	r6, r6, #1
   1ed08:	cmp	r6, r7
   1ed0c:	str	r6, [fp, #-200]	; 0xffffff38
   1ed10:	blt	1ecf4 <__assert_fail@plt+0xd048>
   1ed14:	b	1ed48 <__assert_fail@plt+0xd09c>
   1ed18:	cmp	r6, r7
   1ed1c:	bge	1ed48 <__assert_fail@plt+0xd09c>
   1ed20:	ldr	r1, [sp, #100]	; 0x64
   1ed24:	ldrb	r0, [r1, r6]
   1ed28:	ldrb	r0, [lr, r0]
   1ed2c:	ldrb	r0, [r5, r0]
   1ed30:	cmp	r0, #0
   1ed34:	bne	1ed48 <__assert_fail@plt+0xd09c>
   1ed38:	add	r6, r6, #1
   1ed3c:	cmp	r6, r7
   1ed40:	str	r6, [fp, #-200]	; 0xffffff38
   1ed44:	blt	1ed24 <__assert_fail@plt+0xd078>
   1ed48:	cmp	r6, r7
   1ed4c:	beq	1e9c8 <__assert_fail@plt+0xcd1c>
   1ed50:	ldr	r2, [fp, #24]
   1ed54:	add	r0, sp, #104	; 0x68
   1ed58:	mov	r1, r6
   1ed5c:	bl	27d5c <__assert_fail@plt+0x160b0>
   1ed60:	cmp	r0, #0
   1ed64:	bne	20714 <__assert_fail@plt+0xea68>
   1ed68:	ldr	r0, [sp, #60]	; 0x3c
   1ed6c:	cmp	r0, #1
   1ed70:	ldrne	r0, [sp, #132]	; 0x84
   1ed74:	cmpne	r0, #0
   1ed78:	bne	1f6bc <__assert_fail@plt+0xda10>
   1ed7c:	mov	r0, #0
   1ed80:	str	r0, [sp, #212]	; 0xd4
   1ed84:	str	r0, [sp, #224]	; 0xe0
   1ed88:	str	r0, [sp, #208]	; 0xd0
   1ed8c:	str	r0, [fp, #-196]	; 0xffffff3c
   1ed90:	ldr	r4, [sp, #188]	; 0xbc
   1ed94:	ldr	lr, [sp, #144]	; 0x90
   1ed98:	ldr	r6, [r4, #36]	; 0x24
   1ed9c:	ldrsb	r0, [r6, #52]	; 0x34
   1eda0:	cmn	r0, #1
   1eda4:	ble	1f6d0 <__assert_fail@plt+0xda24>
   1eda8:	ldr	r5, [sp, #40]	; 0x28
   1edac:	cmp	r6, #0
   1edb0:	beq	20704 <__assert_fail@plt+0xea58>
   1edb4:	ldr	r0, [sp, #204]	; 0xcc
   1edb8:	mov	sl, r5
   1edbc:	cmp	r0, #0
   1edc0:	beq	1edd8 <__assert_fail@plt+0xd12c>
   1edc4:	str	r6, [r0, lr, lsl #2]
   1edc8:	mov	sl, r5
   1edcc:	ldr	r0, [r4, #76]	; 0x4c
   1edd0:	cmp	r0, #0
   1edd4:	bne	1e9b0 <__assert_fail@plt+0xcd04>
   1edd8:	ldrb	r0, [r6, #52]	; 0x34
   1eddc:	sxtb	r7, r0
   1ede0:	tst	r0, #16
   1ede4:	bne	1e988 <__assert_fail@plt+0xccdc>
   1ede8:	ldr	r8, [sp, #84]	; 0x54
   1edec:	mov	r0, #0
   1edf0:	mvn	ip, #0
   1edf4:	str	r0, [sp, #56]	; 0x38
   1edf8:	ldr	r4, [sp, #144]	; 0x90
   1edfc:	ldr	r0, [sp, #160]	; 0xa0
   1ee00:	cmp	r0, r4
   1ee04:	ble	1f624 <__assert_fail@plt+0xd978>
   1ee08:	ldr	r1, [sp, #36]	; 0x24
   1ee0c:	b	1f4fc <__assert_fail@plt+0xd850>
   1ee10:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1ee14:	cmp	r0, #0
   1ee18:	bne	20704 <__assert_fail@plt+0xea58>
   1ee1c:	ldr	r0, [sp, #56]	; 0x38
   1ee20:	ldr	r1, [sp, #52]	; 0x34
   1ee24:	clz	r0, r0
   1ee28:	lsr	r0, r0, #5
   1ee2c:	orr	r0, r1, r0
   1ee30:	cmp	r0, #1
   1ee34:	bne	1e934 <__assert_fail@plt+0xcc88>
   1ee38:	ldr	r0, [sp, #204]	; 0xcc
   1ee3c:	cmp	r0, #0
   1ee40:	beq	1e934 <__assert_fail@plt+0xcc88>
   1ee44:	mov	r5, lr
   1ee48:	b	1eeb4 <__assert_fail@plt+0xd208>
   1ee4c:	ldr	r4, [sp, #144]	; 0x90
   1ee50:	ldr	r8, [sp, #84]	; 0x54
   1ee54:	cmn	r7, #1
   1ee58:	bgt	1ee80 <__assert_fail@plt+0xd1d4>
   1ee5c:	add	r0, sp, #104	; 0x68
   1ee60:	mov	r1, r6
   1ee64:	mov	r2, r4
   1ee68:	mov	r9, ip
   1ee6c:	mov	r5, lr
   1ee70:	bl	287cc <__assert_fail@plt+0x16b20>
   1ee74:	mov	lr, r5
   1ee78:	cmp	r0, #0
   1ee7c:	beq	1ef1c <__assert_fail@plt+0xd270>
   1ee80:	ldr	r0, [sp, #52]	; 0x34
   1ee84:	cmp	r0, #0
   1ee88:	beq	1e960 <__assert_fail@plt+0xccb4>
   1ee8c:	mov	r0, #1
   1ee90:	mov	r1, #0
   1ee94:	mov	ip, r4
   1ee98:	str	r0, [sp, #56]	; 0x38
   1ee9c:	ldr	r0, [sp, #160]	; 0xa0
   1eea0:	cmp	r0, r4
   1eea4:	bgt	1f4fc <__assert_fail@plt+0xd850>
   1eea8:	b	1f638 <__assert_fail@plt+0xd98c>
   1eeac:	ldr	r0, [sp, #204]	; 0xcc
   1eeb0:	mov	ip, r4
   1eeb4:	ldr	r2, [sp, #144]	; 0x90
   1eeb8:	ldr	r1, [sp, #208]	; 0xd0
   1eebc:	add	r2, r2, #1
   1eec0:	sub	r3, r2, #1
   1eec4:	cmp	r3, r1
   1eec8:	bge	1f62c <__assert_fail@plt+0xd980>
   1eecc:	str	r2, [sp, #144]	; 0x90
   1eed0:	ldr	r3, [r0, r2, lsl #2]
   1eed4:	add	r2, r2, #1
   1eed8:	cmp	r3, #0
   1eedc:	beq	1eec0 <__assert_fail@plt+0xd214>
   1eee0:	sub	r0, fp, #196	; 0xc4
   1eee4:	add	r1, sp, #104	; 0x68
   1eee8:	mov	r2, #0
   1eeec:	mov	r4, ip
   1eef0:	bl	29848 <__assert_fail@plt+0x17b9c>
   1eef4:	cmp	r0, #0
   1eef8:	mov	r6, r0
   1eefc:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   1ef00:	cmpeq	r0, #0
   1ef04:	beq	1eeac <__assert_fail@plt+0xd200>
   1ef08:	cmp	r6, #0
   1ef0c:	mov	ip, r4
   1ef10:	mov	lr, r5
   1ef14:	bne	1f5e4 <__assert_fail@plt+0xd938>
   1ef18:	b	1e934 <__assert_fail@plt+0xcc88>
   1ef1c:	ldr	r1, [sp, #72]	; 0x48
   1ef20:	mov	ip, r9
   1ef24:	ldr	r0, [sp, #160]	; 0xa0
   1ef28:	cmp	r0, r4
   1ef2c:	bgt	1f4fc <__assert_fail@plt+0xd850>
   1ef30:	b	1f638 <__assert_fail@plt+0xd98c>
   1ef34:	add	r1, r4, #2
   1ef38:	add	r0, sp, #104	; 0x68
   1ef3c:	mov	r4, ip
   1ef40:	mov	r5, lr
   1ef44:	bl	29638 <__assert_fail@plt+0x1798c>
   1ef48:	cmp	r0, #0
   1ef4c:	str	r0, [fp, #-196]	; 0xffffff3c
   1ef50:	bne	20704 <__assert_fail@plt+0xea58>
   1ef54:	ldrb	r7, [r8, #52]	; 0x34
   1ef58:	mov	lr, r5
   1ef5c:	mov	ip, r4
   1ef60:	tst	r7, #32
   1ef64:	beq	1f53c <__assert_fail@plt+0xd890>
   1ef68:	ldr	r0, [r8, #8]
   1ef6c:	cmp	r0, #1
   1ef70:	blt	1f3a4 <__assert_fail@plt+0xd6f8>
   1ef74:	ldr	r0, [sp, #188]	; 0xbc
   1ef78:	mov	r6, #0
   1ef7c:	str	r0, [sp, #20]
   1ef80:	stmib	sp, {sl, lr}
   1ef84:	str	r8, [sp, #12]
   1ef88:	b	1f368 <__assert_fail@plt+0xd6bc>
   1ef8c:	movw	r0, #65280	; 0xff00
   1ef90:	movt	r0, #3
   1ef94:	tst	r7, r0
   1ef98:	beq	1f0bc <__assert_fail@plt+0xd410>
   1ef9c:	ldr	r0, [sp, #144]	; 0x90
   1efa0:	cmn	r0, #1
   1efa4:	ble	1efe8 <__assert_fail@plt+0xd33c>
   1efa8:	ldr	r1, [sp, #152]	; 0x98
   1efac:	mov	r8, sl
   1efb0:	cmp	r1, r0
   1efb4:	beq	1f2d0 <__assert_fail@plt+0xd624>
   1efb8:	ldr	r1, [sp, #184]	; 0xb8
   1efbc:	cmp	r1, #2
   1efc0:	blt	1f000 <__assert_fail@plt+0xd354>
   1efc4:	ldr	r1, [sp, #112]	; 0x70
   1efc8:	mov	sl, r8
   1efcc:	ldr	r4, [r1, r0, lsl #2]
   1efd0:	cmn	r4, #1
   1efd4:	bne	1f03c <__assert_fail@plt+0xd390>
   1efd8:	sub	r2, r0, #1
   1efdc:	cmp	r0, #0
   1efe0:	mov	r0, r2
   1efe4:	bgt	1efcc <__assert_fail@plt+0xd320>
   1efe8:	ldr	r1, [sp, #164]	; 0xa4
   1efec:	and	r0, r1, #1
   1eff0:	tst	r7, #1024	; 0x400
   1eff4:	eor	r2, r0, #1
   1eff8:	bne	1f070 <__assert_fail@plt+0xd3c4>
   1effc:	b	1f078 <__assert_fail@plt+0xd3cc>
   1f000:	ldr	r1, [sp, #108]	; 0x6c
   1f004:	ldr	r2, [sp, #172]	; 0xac
   1f008:	mov	sl, r8
   1f00c:	ldrb	r0, [r1, r0]
   1f010:	ubfx	r1, r0, #5, #3
   1f014:	and	r5, r0, #31
   1f018:	ldr	r3, [r2, r1, lsl #2]
   1f01c:	mov	r1, #1
   1f020:	mov	r2, #0
   1f024:	tst	r3, r1, lsl r5
   1f028:	bne	1f078 <__assert_fail@plt+0xd3cc>
   1f02c:	mov	r1, #0
   1f030:	cmp	r0, #10
   1f034:	beq	1f054 <__assert_fail@plt+0xd3a8>
   1f038:	b	1f060 <__assert_fail@plt+0xd3b4>
   1f03c:	ldrb	r0, [sp, #182]	; 0xb6
   1f040:	cmp	r0, #0
   1f044:	bne	1f304 <__assert_fail@plt+0xd658>
   1f048:	mov	r1, #0
   1f04c:	cmp	r4, #10
   1f050:	bne	1f060 <__assert_fail@plt+0xd3b4>
   1f054:	ldrb	r1, [sp, #181]	; 0xb5
   1f058:	cmp	r1, #0
   1f05c:	movwne	r1, #2
   1f060:	and	r0, r1, #1
   1f064:	tst	r7, #1024	; 0x400
   1f068:	eor	r2, r0, #1
   1f06c:	beq	1f078 <__assert_fail@plt+0xd3cc>
   1f070:	cmp	r0, #0
   1f074:	beq	1f390 <__assert_fail@plt+0xd6e4>
   1f078:	ldr	r0, [sp, #20]
   1f07c:	ldr	r4, [sp, #16]
   1f080:	cmp	r2, #0
   1f084:	ldr	r0, [r0]
   1f088:	add	r0, r0, r4, lsl #3
   1f08c:	ldr	r0, [r0, #4]
   1f090:	bne	1f09c <__assert_fail@plt+0xd3f0>
   1f094:	ands	r2, r0, #2048	; 0x800
   1f098:	bne	1f390 <__assert_fail@plt+0xd6e4>
   1f09c:	tst	r1, #2
   1f0a0:	bne	1f0ac <__assert_fail@plt+0xd400>
   1f0a4:	ands	r2, r0, #8192	; 0x2000
   1f0a8:	bne	1f390 <__assert_fail@plt+0xd6e4>
   1f0ac:	tst	r1, #8
   1f0b0:	bne	1f0bc <__assert_fail@plt+0xd410>
   1f0b4:	ands	r0, r0, #32768	; 0x8000
   1f0b8:	bne	1f390 <__assert_fail@plt+0xd6e4>
   1f0bc:	ldr	r3, [sp, #144]	; 0x90
   1f0c0:	ldr	r0, [sp, #20]
   1f0c4:	ldr	r1, [sp, #16]
   1f0c8:	add	r2, sp, #104	; 0x68
   1f0cc:	mov	r5, ip
   1f0d0:	bl	2b3b0 <__assert_fail@plt+0x19704>
   1f0d4:	ldmib	sp, {sl, lr}
   1f0d8:	mov	ip, r5
   1f0dc:	cmp	r0, #0
   1f0e0:	beq	1f390 <__assert_fail@plt+0xd6e4>
   1f0e4:	ldr	r1, [sp, #224]	; 0xe0
   1f0e8:	cmp	r1, r0
   1f0ec:	movlt	r1, r0
   1f0f0:	str	r1, [sp, #224]	; 0xe0
   1f0f4:	ldr	r3, [sp, #144]	; 0x90
   1f0f8:	ldr	r2, [sp, #140]	; 0x8c
   1f0fc:	ldr	r1, [sp, #152]	; 0x98
   1f100:	ldr	r4, [sp, #208]	; 0xd0
   1f104:	add	r3, r3, r0
   1f108:	cmp	r2, r3
   1f10c:	mov	r8, r3
   1f110:	cmple	r2, r1
   1f114:	blt	1f128 <__assert_fail@plt+0xd47c>
   1f118:	ldr	r0, [sp, #132]	; 0x84
   1f11c:	cmp	r0, r3
   1f120:	cmple	r0, r1
   1f124:	bge	1f140 <__assert_fail@plt+0xd494>
   1f128:	add	r1, r3, #1
   1f12c:	add	r0, sp, #104	; 0x68
   1f130:	bl	29638 <__assert_fail@plt+0x1798c>
   1f134:	mov	r3, r8
   1f138:	cmp	r0, #0
   1f13c:	bne	1f484 <__assert_fail@plt+0xd7d8>
   1f140:	cmp	r3, r4
   1f144:	ble	1f16c <__assert_fail@plt+0xd4c0>
   1f148:	sub	r0, r3, r4
   1f14c:	mov	r1, #0
   1f150:	lsl	r2, r0, #2
   1f154:	ldr	r0, [sp, #204]	; 0xcc
   1f158:	add	r0, r0, r4, lsl #2
   1f15c:	add	r0, r0, #4
   1f160:	bl	11b2c <memset@plt>
   1f164:	mov	r3, r8
   1f168:	str	r8, [sp, #208]	; 0xd0
   1f16c:	mov	r0, #0
   1f170:	ldr	r1, [sp, #20]
   1f174:	ldr	r2, [sp, #16]
   1f178:	str	r0, [fp, #-48]	; 0xffffffd0
   1f17c:	ldr	r0, [sp, #204]	; 0xcc
   1f180:	ldr	r7, [r0, r3, lsl #2]
   1f184:	ldr	r0, [r1, #12]
   1f188:	ldr	r1, [r1, #24]
   1f18c:	ldr	r0, [r0, r2, lsl #2]
   1f190:	cmp	r7, #0
   1f194:	add	r0, r0, r0, lsl #1
   1f198:	add	r2, r1, r0, lsl #2
   1f19c:	beq	1f1c0 <__assert_fail@plt+0xd514>
   1f1a0:	ldr	r1, [r7, #40]	; 0x28
   1f1a4:	sub	r0, fp, #192	; 0xc0
   1f1a8:	bl	29a9c <__assert_fail@plt+0x17df0>
   1f1ac:	mov	r3, r8
   1f1b0:	cmp	r0, #0
   1f1b4:	str	r0, [fp, #-48]	; 0xffffffd0
   1f1b8:	beq	1f1d0 <__assert_fail@plt+0xd524>
   1f1bc:	b	1f488 <__assert_fail@plt+0xd7dc>
   1f1c0:	vldr	d16, [r2]
   1f1c4:	ldr	r0, [r2, #8]
   1f1c8:	str	r0, [fp, #-184]	; 0xffffff48
   1f1cc:	vstr	d16, [fp, #-192]	; 0xffffff40
   1f1d0:	cmp	r3, #0
   1f1d4:	ble	1f218 <__assert_fail@plt+0xd56c>
   1f1d8:	ldr	r1, [sp, #152]	; 0x98
   1f1dc:	sub	r0, r3, #1
   1f1e0:	cmp	r1, r0
   1f1e4:	beq	1f2f4 <__assert_fail@plt+0xd648>
   1f1e8:	ldr	r1, [sp, #184]	; 0xb8
   1f1ec:	cmp	r1, #2
   1f1f0:	blt	1f220 <__assert_fail@plt+0xd574>
   1f1f4:	ldr	r0, [sp, #112]	; 0x70
   1f1f8:	mov	r1, r3
   1f1fc:	sub	r0, r0, #4
   1f200:	ldr	r4, [r0, r1, lsl #2]
   1f204:	cmn	r4, #1
   1f208:	bne	1f254 <__assert_fail@plt+0xd5a8>
   1f20c:	sub	r1, r1, #1
   1f210:	cmp	r1, #0
   1f214:	bgt	1f200 <__assert_fail@plt+0xd554>
   1f218:	ldr	r3, [sp, #164]	; 0xa4
   1f21c:	b	1f278 <__assert_fail@plt+0xd5cc>
   1f220:	ldr	r1, [sp, #108]	; 0x6c
   1f224:	ldr	r2, [sp, #172]	; 0xac
   1f228:	mov	r3, #1
   1f22c:	ldrb	r0, [r1, r0]
   1f230:	ubfx	r1, r0, #5, #3
   1f234:	ldr	r1, [r2, r1, lsl #2]
   1f238:	and	r2, r0, #31
   1f23c:	tst	r1, r3, lsl r2
   1f240:	bne	1f278 <__assert_fail@plt+0xd5cc>
   1f244:	mov	r3, #0
   1f248:	cmp	r0, #10
   1f24c:	beq	1f26c <__assert_fail@plt+0xd5c0>
   1f250:	b	1f278 <__assert_fail@plt+0xd5cc>
   1f254:	ldrb	r0, [sp, #182]	; 0xb6
   1f258:	cmp	r0, #0
   1f25c:	bne	1f338 <__assert_fail@plt+0xd68c>
   1f260:	mov	r3, #0
   1f264:	cmp	r4, #10
   1f268:	bne	1f278 <__assert_fail@plt+0xd5cc>
   1f26c:	ldrb	r3, [sp, #181]	; 0xb5
   1f270:	cmp	r3, #0
   1f274:	movwne	r3, #2
   1f278:	ldr	r1, [sp, #20]
   1f27c:	sub	r0, fp, #48	; 0x30
   1f280:	sub	r2, fp, #192	; 0xc0
   1f284:	bl	2725c <__assert_fail@plt+0x155b0>
   1f288:	ldr	r1, [sp, #204]	; 0xcc
   1f28c:	mov	r2, r8
   1f290:	cmp	r7, #0
   1f294:	str	r0, [r1, r8, lsl #2]
   1f298:	beq	1f2a8 <__assert_fail@plt+0xd5fc>
   1f29c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1f2a0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1f2a4:	mov	r2, r8
   1f2a8:	ldr	r0, [sp, #204]	; 0xcc
   1f2ac:	mov	ip, r5
   1f2b0:	ldr	r0, [r0, r2, lsl #2]
   1f2b4:	ldmib	sp, {sl, lr}
   1f2b8:	cmp	r0, #0
   1f2bc:	bne	1f390 <__assert_fail@plt+0xd6e4>
   1f2c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f2c4:	cmp	r0, #0
   1f2c8:	beq	1f390 <__assert_fail@plt+0xd6e4>
   1f2cc:	b	1f490 <__assert_fail@plt+0xd7e4>
   1f2d0:	ldr	r0, [sp, #192]	; 0xc0
   1f2d4:	mov	sl, r8
   1f2d8:	and	r0, r0, #2
   1f2dc:	eor	r1, r0, #10
   1f2e0:	and	r0, r1, #1
   1f2e4:	tst	r7, #1024	; 0x400
   1f2e8:	eor	r2, r0, #1
   1f2ec:	bne	1f070 <__assert_fail@plt+0xd3c4>
   1f2f0:	b	1f078 <__assert_fail@plt+0xd3cc>
   1f2f4:	ldr	r0, [sp, #192]	; 0xc0
   1f2f8:	and	r0, r0, #2
   1f2fc:	eor	r3, r0, #10
   1f300:	b	1f278 <__assert_fail@plt+0xd5cc>
   1f304:	mov	r0, r4
   1f308:	mov	r5, ip
   1f30c:	bl	11afc <iswalnum@plt>
   1f310:	mov	r1, #1
   1f314:	mov	r2, #0
   1f318:	cmp	r4, #95	; 0x5f
   1f31c:	beq	1f358 <__assert_fail@plt+0xd6ac>
   1f320:	ldr	lr, [sp, #8]
   1f324:	cmp	r0, #0
   1f328:	mov	ip, r5
   1f32c:	mov	sl, r8
   1f330:	beq	1f048 <__assert_fail@plt+0xd39c>
   1f334:	b	1f078 <__assert_fail@plt+0xd3cc>
   1f338:	mov	r0, r4
   1f33c:	bl	11afc <iswalnum@plt>
   1f340:	mov	r3, #1
   1f344:	cmp	r4, #95	; 0x5f
   1f348:	beq	1f278 <__assert_fail@plt+0xd5cc>
   1f34c:	cmp	r0, #0
   1f350:	beq	1f260 <__assert_fail@plt+0xd5b4>
   1f354:	b	1f278 <__assert_fail@plt+0xd5cc>
   1f358:	ldr	lr, [sp, #8]
   1f35c:	mov	ip, r5
   1f360:	mov	sl, r8
   1f364:	b	1f078 <__assert_fail@plt+0xd3cc>
   1f368:	ldr	r0, [r8, #12]
   1f36c:	ldr	r2, [r0, r6, lsl #2]
   1f370:	ldr	r0, [sp, #20]
   1f374:	ldr	r0, [r0]
   1f378:	mov	r1, r2
   1f37c:	str	r2, [sp, #16]
   1f380:	add	r0, r0, r2, lsl #3
   1f384:	ldr	r7, [r0, #4]
   1f388:	tst	r7, #1048576	; 0x100000
   1f38c:	bne	1ef8c <__assert_fail@plt+0xd2e0>
   1f390:	ldr	r8, [sp, #12]
   1f394:	add	r6, r6, #1
   1f398:	ldr	r0, [r8, #8]
   1f39c:	cmp	r6, r0
   1f3a0:	blt	1f368 <__assert_fail@plt+0xd6bc>
   1f3a4:	mov	r0, #0
   1f3a8:	str	r0, [fp, #-196]	; 0xffffff3c
   1f3ac:	b	1f53c <__assert_fail@plt+0xd890>
   1f3b0:	ldr	r0, [sp, #144]	; 0x90
   1f3b4:	mov	r5, r8
   1f3b8:	cmp	r0, #0
   1f3bc:	ble	1f404 <__assert_fail@plt+0xd758>
   1f3c0:	ldr	r2, [sp, #152]	; 0x98
   1f3c4:	sub	r1, r0, #1
   1f3c8:	mov	r8, sl
   1f3cc:	cmp	r2, r1
   1f3d0:	beq	1f4ac <__assert_fail@plt+0xd800>
   1f3d4:	ldr	r2, [sp, #184]	; 0xb8
   1f3d8:	cmp	r2, #2
   1f3dc:	blt	1f40c <__assert_fail@plt+0xd760>
   1f3e0:	ldr	r1, [sp, #112]	; 0x70
   1f3e4:	mov	sl, r8
   1f3e8:	sub	r1, r1, #4
   1f3ec:	ldr	r4, [r1, r0, lsl #2]
   1f3f0:	cmn	r4, #1
   1f3f4:	bne	1f444 <__assert_fail@plt+0xd798>
   1f3f8:	sub	r0, r0, #1
   1f3fc:	cmp	r0, #0
   1f400:	bgt	1f3ec <__assert_fail@plt+0xd740>
   1f404:	ldr	r1, [sp, #164]	; 0xa4
   1f408:	b	1f468 <__assert_fail@plt+0xd7bc>
   1f40c:	ldr	r0, [sp, #108]	; 0x6c
   1f410:	ldr	r2, [sp, #172]	; 0xac
   1f414:	mov	sl, r8
   1f418:	ldrb	r0, [r0, r1]
   1f41c:	ubfx	r1, r0, #5, #3
   1f420:	and	r3, r0, #31
   1f424:	ldr	r2, [r2, r1, lsl #2]
   1f428:	mov	r1, #1
   1f42c:	tst	r2, r1, lsl r3
   1f430:	bne	1f468 <__assert_fail@plt+0xd7bc>
   1f434:	mov	r1, #0
   1f438:	cmp	r0, #10
   1f43c:	beq	1f45c <__assert_fail@plt+0xd7b0>
   1f440:	b	1f468 <__assert_fail@plt+0xd7bc>
   1f444:	ldrb	r0, [sp, #182]	; 0xb6
   1f448:	cmp	r0, #0
   1f44c:	bne	1f4b8 <__assert_fail@plt+0xd80c>
   1f450:	mov	r1, #0
   1f454:	cmp	r4, #10
   1f458:	bne	1f468 <__assert_fail@plt+0xd7bc>
   1f45c:	ldrb	r1, [sp, #181]	; 0xb5
   1f460:	cmp	r1, #0
   1f464:	movwne	r1, #2
   1f468:	bfi	r6, r1, #8, #1
   1f46c:	mov	r8, r5
   1f470:	ldr	r6, [r7, r6, lsl #2]
   1f474:	ldr	r0, [sp, #204]	; 0xcc
   1f478:	cmp	r0, #0
   1f47c:	bne	1f5b8 <__assert_fail@plt+0xd90c>
   1f480:	b	1f5dc <__assert_fail@plt+0xd930>
   1f484:	str	r0, [fp, #-48]	; 0xffffffd0
   1f488:	ldmib	sp, {sl, lr}
   1f48c:	mov	ip, r5
   1f490:	ldr	r8, [sp, #12]
   1f494:	str	r0, [fp, #-196]	; 0xffffff3c
   1f498:	mov	r6, #0
   1f49c:	ldr	r0, [sp, #204]	; 0xcc
   1f4a0:	cmp	r0, #0
   1f4a4:	bne	1f5b8 <__assert_fail@plt+0xd90c>
   1f4a8:	b	1f5dc <__assert_fail@plt+0xd930>
   1f4ac:	mov	r1, #10
   1f4b0:	mov	sl, r8
   1f4b4:	b	1f468 <__assert_fail@plt+0xd7bc>
   1f4b8:	mov	r0, r4
   1f4bc:	str	lr, [sp, #8]
   1f4c0:	str	ip, [sp, #20]
   1f4c4:	bl	11afc <iswalnum@plt>
   1f4c8:	mov	r1, #1
   1f4cc:	cmp	r4, #95	; 0x5f
   1f4d0:	beq	1f4ec <__assert_fail@plt+0xd840>
   1f4d4:	ldr	ip, [sp, #20]
   1f4d8:	ldr	lr, [sp, #8]
   1f4dc:	cmp	r0, #0
   1f4e0:	mov	sl, r8
   1f4e4:	beq	1f450 <__assert_fail@plt+0xd7a4>
   1f4e8:	b	1f468 <__assert_fail@plt+0xd7bc>
   1f4ec:	ldr	ip, [sp, #20]
   1f4f0:	ldr	lr, [sp, #8]
   1f4f4:	mov	sl, r8
   1f4f8:	b	1f468 <__assert_fail@plt+0xd7bc>
   1f4fc:	str	r1, [sp, #72]	; 0x48
   1f500:	ldr	r1, [sp, #140]	; 0x8c
   1f504:	ldr	r0, [sp, #152]	; 0x98
   1f508:	add	r9, r4, #1
   1f50c:	mov	r8, r6
   1f510:	cmp	r9, r1
   1f514:	blt	1f520 <__assert_fail@plt+0xd874>
   1f518:	cmp	r1, r0
   1f51c:	blt	1ef34 <__assert_fail@plt+0xd288>
   1f520:	ldr	r1, [sp, #132]	; 0x84
   1f524:	cmp	r9, r1
   1f528:	blt	1f534 <__assert_fail@plt+0xd888>
   1f52c:	cmp	r1, r0
   1f530:	blt	1ef34 <__assert_fail@plt+0xd288>
   1f534:	tst	r7, #32
   1f538:	bne	1ef68 <__assert_fail@plt+0xd2bc>
   1f53c:	ldr	r1, [sp, #144]	; 0x90
   1f540:	ldr	r0, [sp, #108]	; 0x6c
   1f544:	add	r2, r1, #1
   1f548:	str	r2, [sp, #144]	; 0x90
   1f54c:	ldrb	r6, [r0, r1]
   1f550:	ldr	r0, [r8, #44]	; 0x2c
   1f554:	cmp	r0, #0
   1f558:	bne	1f5a8 <__assert_fail@plt+0xd8fc>
   1f55c:	ldr	r7, [r8, #48]	; 0x30
   1f560:	cmp	r7, #0
   1f564:	bne	1f3b0 <__assert_fail@plt+0xd704>
   1f568:	ldr	r0, [sp, #188]	; 0xbc
   1f56c:	mov	r1, r8
   1f570:	mov	r4, ip
   1f574:	mov	r5, lr
   1f578:	bl	2b8f8 <__assert_fail@plt+0x19c4c>
   1f57c:	mov	lr, r5
   1f580:	mov	ip, r4
   1f584:	cmp	r0, #0
   1f588:	bne	1f550 <__assert_fail@plt+0xd8a4>
   1f58c:	mov	r0, #12
   1f590:	mov	r6, #0
   1f594:	str	r0, [fp, #-196]	; 0xffffff3c
   1f598:	ldr	r0, [sp, #204]	; 0xcc
   1f59c:	cmp	r0, #0
   1f5a0:	bne	1f5b8 <__assert_fail@plt+0xd90c>
   1f5a4:	b	1f5dc <__assert_fail@plt+0xd930>
   1f5a8:	ldr	r6, [r0, r6, lsl #2]
   1f5ac:	ldr	r0, [sp, #204]	; 0xcc
   1f5b0:	cmp	r0, #0
   1f5b4:	beq	1f5dc <__assert_fail@plt+0xd930>
   1f5b8:	sub	r0, fp, #196	; 0xc4
   1f5bc:	add	r1, sp, #104	; 0x68
   1f5c0:	mov	r2, r6
   1f5c4:	mov	r4, ip
   1f5c8:	mov	r5, lr
   1f5cc:	bl	29848 <__assert_fail@plt+0x17b9c>
   1f5d0:	mov	lr, r5
   1f5d4:	mov	ip, r4
   1f5d8:	mov	r6, r0
   1f5dc:	cmp	r6, #0
   1f5e0:	beq	1ee10 <__assert_fail@plt+0xd164>
   1f5e4:	sub	r0, r8, r6
   1f5e8:	clz	r0, r0
   1f5ec:	lsr	r0, r0, #5
   1f5f0:	ands	sl, sl, r0
   1f5f4:	ldrb	r0, [r6, #52]	; 0x34
   1f5f8:	movne	lr, r9
   1f5fc:	sxtb	r7, r0
   1f600:	tst	r0, #16
   1f604:	bne	1ee4c <__assert_fail@plt+0xd1a0>
   1f608:	ldr	r4, [sp, #144]	; 0x90
   1f60c:	ldr	r8, [sp, #84]	; 0x54
   1f610:	ldr	r1, [sp, #72]	; 0x48
   1f614:	ldr	r0, [sp, #160]	; 0xa0
   1f618:	cmp	r0, r4
   1f61c:	bgt	1f4fc <__assert_fail@plt+0xd850>
   1f620:	b	1f638 <__assert_fail@plt+0xd98c>
   1f624:	ldr	r1, [sp, #36]	; 0x24
   1f628:	b	1f638 <__assert_fail@plt+0xd98c>
   1f62c:	ldr	r8, [sp, #84]	; 0x54
   1f630:	ldr	r1, [sp, #72]	; 0x48
   1f634:	mov	lr, r5
   1f638:	cmp	r1, #0
   1f63c:	ldrne	r0, [r1]
   1f640:	addne	r0, r0, lr
   1f644:	strne	r0, [r1]
   1f648:	cmn	ip, #1
   1f64c:	beq	1e87c <__assert_fail@plt+0xcbd0>
   1f650:	cmn	ip, #2
   1f654:	beq	20704 <__assert_fail@plt+0xea58>
   1f658:	ldr	r7, [sp, #68]	; 0x44
   1f65c:	ldr	r6, [sp, #64]	; 0x40
   1f660:	mov	r8, ip
   1f664:	str	ip, [sp, #196]	; 0xc4
   1f668:	cmp	r7, #2
   1f66c:	bcc	1f72c <__assert_fail@plt+0xda80>
   1f670:	ldrb	r0, [r6, #28]
   1f674:	ands	r0, r0, #16
   1f678:	bne	1f72c <__assert_fail@plt+0xda80>
   1f67c:	ldr	r0, [sp, #204]	; 0xcc
   1f680:	mov	r2, ip
   1f684:	ldr	r1, [r0, ip, lsl #2]
   1f688:	add	r0, sp, #104	; 0x68
   1f68c:	bl	287cc <__assert_fail@plt+0x16b20>
   1f690:	ldr	sl, [sp, #96]	; 0x60
   1f694:	str	r0, [sp, #200]	; 0xc8
   1f698:	mov	r5, r0
   1f69c:	ldrb	r0, [sl, #88]	; 0x58
   1f6a0:	tst	r0, #1
   1f6a4:	bne	1f7d0 <__assert_fail@plt+0xdb24>
   1f6a8:	ldr	r0, [sl, #76]	; 0x4c
   1f6ac:	mov	r1, r8
   1f6b0:	cmp	r0, #0
   1f6b4:	bne	1f75c <__assert_fail@plt+0xdab0>
   1f6b8:	b	1f978 <__assert_fail@plt+0xdccc>
   1f6bc:	ldr	r0, [sp, #112]	; 0x70
   1f6c0:	ldr	r0, [r0]
   1f6c4:	cmn	r0, #1
   1f6c8:	bne	1ed7c <__assert_fail@plt+0xd0d0>
   1f6cc:	b	1e884 <__assert_fail@plt+0xcbd8>
   1f6d0:	ldr	r5, [sp, #40]	; 0x28
   1f6d4:	cmp	lr, #0
   1f6d8:	ble	1f71c <__assert_fail@plt+0xda70>
   1f6dc:	ldr	r1, [sp, #152]	; 0x98
   1f6e0:	sub	r0, lr, #1
   1f6e4:	cmp	r1, r0
   1f6e8:	beq	1e9f8 <__assert_fail@plt+0xcd4c>
   1f6ec:	ldr	r1, [sp, #184]	; 0xb8
   1f6f0:	cmp	r1, #2
   1f6f4:	blt	1f768 <__assert_fail@plt+0xdabc>
   1f6f8:	ldr	r0, [sp, #112]	; 0x70
   1f6fc:	mov	r1, lr
   1f700:	sub	r0, r0, #4
   1f704:	ldr	r7, [r0, r1, lsl #2]
   1f708:	cmn	r7, #1
   1f70c:	bne	1e8b8 <__assert_fail@plt+0xcc0c>
   1f710:	sub	r1, r1, #1
   1f714:	cmp	r1, #0
   1f718:	bgt	1f704 <__assert_fail@plt+0xda58>
   1f71c:	ldr	r3, [sp, #164]	; 0xa4
   1f720:	tst	r3, #1
   1f724:	beq	1e8e0 <__assert_fail@plt+0xcc34>
   1f728:	b	1ea0c <__assert_fail@plt+0xcd60>
   1f72c:	ldr	sl, [sp, #96]	; 0x60
   1f730:	ldr	r0, [sl, #76]	; 0x4c
   1f734:	cmp	r0, #0
   1f738:	beq	1f978 <__assert_fail@plt+0xdccc>
   1f73c:	ldr	r0, [sp, #204]	; 0xcc
   1f740:	mov	r2, ip
   1f744:	ldr	r1, [r0, ip, lsl #2]
   1f748:	add	r0, sp, #104	; 0x68
   1f74c:	bl	287cc <__assert_fail@plt+0x16b20>
   1f750:	mov	r1, r8
   1f754:	mov	r5, r0
   1f758:	str	r0, [sp, #200]	; 0xc8
   1f75c:	cmn	r1, #-1073741823	; 0xc0000001
   1f760:	bcc	1f7dc <__assert_fail@plt+0xdb30>
   1f764:	b	20704 <__assert_fail@plt+0xea58>
   1f768:	ldr	r1, [sp, #108]	; 0x6c
   1f76c:	ldr	r2, [sp, #172]	; 0xac
   1f770:	mov	r3, #1
   1f774:	ldrb	r0, [r1, r0]
   1f778:	ubfx	r1, r0, #5, #3
   1f77c:	ldr	r1, [r2, r1, lsl #2]
   1f780:	and	r2, r0, #31
   1f784:	tst	r1, r3, lsl r2
   1f788:	bne	1ea0c <__assert_fail@plt+0xcd60>
   1f78c:	cmp	r0, #10
   1f790:	beq	1e8cc <__assert_fail@plt+0xcc20>
   1f794:	b	1ea10 <__assert_fail@plt+0xcd64>
   1f798:	ldr	r1, [sp, #76]	; 0x4c
   1f79c:	mov	r0, #0
   1f7a0:	cmp	r6, r1
   1f7a4:	ldrlt	r0, [sp, #100]	; 0x64
   1f7a8:	ldrblt	r0, [r0, r6]
   1f7ac:	ldrb	r0, [r5, r0]
   1f7b0:	cmp	r0, #0
   1f7b4:	bne	1ed50 <__assert_fail@plt+0xd0a4>
   1f7b8:	sub	r0, r6, #1
   1f7bc:	cmp	r6, r4
   1f7c0:	mov	r6, r0
   1f7c4:	str	r0, [fp, #-200]	; 0xffffff38
   1f7c8:	bgt	1f79c <__assert_fail@plt+0xdaf0>
   1f7cc:	b	2090c <__assert_fail@plt+0xec60>
   1f7d0:	mov	r1, r8
   1f7d4:	cmn	r1, #-1073741823	; 0xc0000001
   1f7d8:	bcs	20704 <__assert_fail@plt+0xea58>
   1f7dc:	ldr	r0, [sp, #188]	; 0xbc
   1f7e0:	str	r0, [sp, #72]	; 0x48
   1f7e4:	mov	r0, #4
   1f7e8:	add	r4, r0, r1, lsl #2
   1f7ec:	mov	r0, r4
   1f7f0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1f7f4:	mov	r6, r0
   1f7f8:	cmp	r0, #0
   1f7fc:	beq	2096c <__assert_fail@plt+0xecc0>
   1f800:	ldr	r0, [sp, #72]	; 0x48
   1f804:	str	r5, [sp, #56]	; 0x38
   1f808:	ldr	r0, [r0, #76]	; 0x4c
   1f80c:	cmp	r0, #0
   1f810:	beq	1e73c <__assert_fail@plt+0xca90>
   1f814:	mov	r0, r4
   1f818:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1f81c:	cmp	r0, #0
   1f820:	beq	2096c <__assert_fail@plt+0xecc0>
   1f824:	mov	r1, #0
   1f828:	mov	r2, r4
   1f82c:	mov	r7, r0
   1f830:	bl	11b2c <memset@plt>
   1f834:	ldr	r0, [sp, #32]
   1f838:	mov	r1, #0
   1f83c:	str	r6, [fp, #-192]	; 0xffffff40
   1f840:	str	r7, [fp, #-188]	; 0xffffff44
   1f844:	str	r5, [fp, #-184]	; 0xffffff48
   1f848:	str	r8, [fp, #-180]	; 0xffffff4c
   1f84c:	str	r1, [r0]
   1f850:	str	r1, [r0, #4]
   1f854:	str	r1, [r0, #8]
   1f858:	add	r0, sp, #104	; 0x68
   1f85c:	sub	r1, fp, #192	; 0xc0
   1f860:	bl	2d680 <__assert_fail@plt+0x1b9d4>
   1f864:	mov	r9, r0
   1f868:	mov	r0, #0
   1f86c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1f870:	cmp	r9, #0
   1f874:	bne	1ea70 <__assert_fail@plt+0xcdc4>
   1f878:	ldr	r0, [r6]
   1f87c:	mov	r3, r8
   1f880:	cmp	r0, #0
   1f884:	beq	1e790 <__assert_fail@plt+0xcae4>
   1f888:	mov	r1, #0
   1f88c:	cmp	r3, #0
   1f890:	mov	r9, #0
   1f894:	mov	r8, r3
   1f898:	str	r1, [sp, #20]
   1f89c:	blt	1f938 <__assert_fail@plt+0xdc8c>
   1f8a0:	mov	r5, #0
   1f8a4:	ldr	r2, [r7, r5, lsl #2]
   1f8a8:	cmp	r0, #0
   1f8ac:	bne	1f8d8 <__assert_fail@plt+0xdc2c>
   1f8b0:	str	r2, [r6, r5, lsl #2]
   1f8b4:	cmp	r5, r3
   1f8b8:	bge	1f934 <__assert_fail@plt+0xdc88>
   1f8bc:	add	r0, r6, r5, lsl #2
   1f8c0:	add	r1, r5, #1
   1f8c4:	ldr	r0, [r0, #4]
   1f8c8:	mov	r5, r1
   1f8cc:	ldr	r2, [r7, r5, lsl #2]
   1f8d0:	cmp	r0, #0
   1f8d4:	beq	1f8b0 <__assert_fail@plt+0xdc04>
   1f8d8:	cmp	r2, #0
   1f8dc:	beq	1f92c <__assert_fail@plt+0xdc80>
   1f8e0:	sub	sl, fp, #48	; 0x30
   1f8e4:	add	r1, r0, #4
   1f8e8:	add	r2, r2, #4
   1f8ec:	mov	r0, sl
   1f8f0:	bl	29a9c <__assert_fail@plt+0x17df0>
   1f8f4:	cmp	r0, #0
   1f8f8:	str	r0, [fp, #-196]	; 0xffffff3c
   1f8fc:	bne	1e970 <__assert_fail@plt+0xccc4>
   1f900:	ldr	r1, [sp, #72]	; 0x48
   1f904:	sub	r0, fp, #196	; 0xc4
   1f908:	mov	r2, sl
   1f90c:	bl	2b110 <__assert_fail@plt+0x19464>
   1f910:	str	r0, [r6, r5, lsl #2]
   1f914:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f918:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1f91c:	ldr	r9, [fp, #-196]	; 0xffffff3c
   1f920:	mov	r3, r8
   1f924:	cmp	r9, #0
   1f928:	bne	1f938 <__assert_fail@plt+0xdc8c>
   1f92c:	cmp	r5, r3
   1f930:	blt	1f8bc <__assert_fail@plt+0xdc10>
   1f934:	mov	r9, #0
   1f938:	mov	r0, r7
   1f93c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1f940:	cmp	r9, #0
   1f944:	bne	1ea80 <__assert_fail@plt+0xcdd4>
   1f948:	ldr	r0, [sp, #204]	; 0xcc
   1f94c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1f950:	ldr	r0, [sp, #56]	; 0x38
   1f954:	str	r0, [sp, #200]	; 0xc8
   1f958:	mov	r0, #0
   1f95c:	str	r6, [sp, #204]	; 0xcc
   1f960:	str	r8, [sp, #196]	; 0xc4
   1f964:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1f968:	mov	r0, #0
   1f96c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1f970:	ldr	r7, [sp, #68]	; 0x44
   1f974:	ldr	r6, [sp, #64]	; 0x40
   1f978:	cmp	r7, #0
   1f97c:	beq	20908 <__assert_fail@plt+0xec5c>
   1f980:	ldr	r1, [fp, #16]
   1f984:	ldr	r5, [fp, #20]
   1f988:	cmp	r7, #1
   1f98c:	beq	1f9ac <__assert_fail@plt+0xdd00>
   1f990:	ldr	r0, [sp, #28]
   1f994:	mvn	r0, r0
   1f998:	add	r0, r0, r1
   1f99c:	mov	r1, #255	; 0xff
   1f9a0:	lsl	r2, r0, #3
   1f9a4:	add	r0, r5, #8
   1f9a8:	bl	11b2c <memset@plt>
   1f9ac:	ldr	r1, [sp, #196]	; 0xc4
   1f9b0:	mov	r0, #0
   1f9b4:	cmp	r7, #2
   1f9b8:	sub	r4, fp, #48	; 0x30
   1f9bc:	stm	r5, {r0, r1}
   1f9c0:	bcc	20840 <__assert_fail@plt+0xeb94>
   1f9c4:	ldrb	r0, [r6, #28]
   1f9c8:	ands	r0, r0, #16
   1f9cc:	bne	20840 <__assert_fail@plt+0xeb94>
   1f9d0:	ldr	r0, [sp, #96]	; 0x60
   1f9d4:	ldrb	r1, [r0, #88]	; 0x58
   1f9d8:	mov	r0, #0
   1f9dc:	tst	r1, #1
   1f9e0:	mov	r1, #0
   1f9e4:	beq	1f9fc <__assert_fail@plt+0xdd50>
   1f9e8:	ldr	r1, [sp, #96]	; 0x60
   1f9ec:	ldr	r2, [r1, #76]	; 0x4c
   1f9f0:	mov	r1, #0
   1f9f4:	cmp	r2, #0
   1f9f8:	movwgt	r1, #1
   1f9fc:	movw	r2, #14480	; 0x3890
   1fa00:	ldr	r6, [r6]
   1fa04:	cmp	r1, #0
   1fa08:	mov	r8, #0
   1fa0c:	movt	r2, #3
   1fa10:	vldr	d16, [r2]
   1fa14:	ldr	r2, [r2, #8]
   1fa18:	str	r2, [fp, #-40]	; 0xffffffd8
   1fa1c:	mov	r2, #16
   1fa20:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1fa24:	str	r2, [fp, #-188]	; 0xffffff44
   1fa28:	sub	r2, fp, #192	; 0xc0
   1fa2c:	str	r0, [fp, #-192]	; 0xffffff40
   1fa30:	add	r9, r2, #12
   1fa34:	str	r9, [fp, #-184]	; 0xffffff48
   1fa38:	beq	1fa58 <__assert_fail@plt+0xddac>
   1fa3c:	mov	r0, #48	; 0x30
   1fa40:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   1fa44:	cmp	r0, #0
   1fa48:	str	r0, [fp, #-40]	; 0xffffffd8
   1fa4c:	beq	20704 <__assert_fail@plt+0xea58>
   1fa50:	ldr	r0, [fp, #-192]	; 0xffffff40
   1fa54:	mov	r8, r4
   1fa58:	ldr	r4, [r6, #72]	; 0x48
   1fa5c:	cmp	r0, r7
   1fa60:	bcs	1fb38 <__assert_fail@plt+0xde8c>
   1fa64:	sub	r0, fp, #192	; 0xc0
   1fa68:	mov	r1, r7
   1fa6c:	mov	r2, r9
   1fa70:	mov	r3, #8
   1fa74:	bl	315ec <__assert_fail@plt+0x1f940>
   1fa78:	cmp	r0, #0
   1fa7c:	bne	1fb3c <__assert_fail@plt+0xde90>
   1fa80:	ldr	r0, [fp, #-184]	; 0xffffff48
   1fa84:	mov	r4, r9
   1fa88:	cmp	r0, r9
   1fa8c:	beq	1fa94 <__assert_fail@plt+0xdde8>
   1fa90:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fa94:	mov	r0, #16
   1fa98:	mov	r9, #12
   1fa9c:	cmp	r8, #0
   1faa0:	str	r0, [fp, #-188]	; 0xffffff44
   1faa4:	mov	r0, #0
   1faa8:	str	r0, [fp, #-192]	; 0xffffff40
   1faac:	str	r4, [fp, #-184]	; 0xffffff48
   1fab0:	beq	2090c <__assert_fail@plt+0xec60>
   1fab4:	ldr	r1, [r8]
   1fab8:	ldr	r0, [r8, #8]
   1fabc:	cmp	r1, #1
   1fac0:	blt	207a4 <__assert_fail@plt+0xeaf8>
   1fac4:	mov	r5, #0
   1fac8:	mov	r6, #0
   1facc:	add	r0, r0, r5
   1fad0:	ldr	r0, [r0, #20]
   1fad4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fad8:	ldr	r0, [r8, #8]
   1fadc:	add	r0, r0, r5
   1fae0:	ldr	r0, [r0, #8]
   1fae4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fae8:	ldr	r1, [r8]
   1faec:	ldr	r0, [r8, #8]
   1faf0:	add	r6, r6, #1
   1faf4:	add	r5, r5, #24
   1faf8:	cmp	r6, r1
   1fafc:	blt	1facc <__assert_fail@plt+0xde20>
   1fb00:	b	207a4 <__assert_fail@plt+0xeaf8>
   1fb04:	ldr	r1, [r3, #8]
   1fb08:	cmp	r1, #0
   1fb0c:	beq	1fb1c <__assert_fail@plt+0xde70>
   1fb10:	ldrsb	r1, [r7, #28]
   1fb14:	cmp	r1, #0
   1fb18:	blt	1e418 <__assert_fail@plt+0xc76c>
   1fb1c:	mov	r1, #0
   1fb20:	cmp	r6, #0
   1fb24:	beq	206fc <__assert_fail@plt+0xea50>
   1fb28:	cmp	ip, #0
   1fb2c:	mov	r6, #0
   1fb30:	bne	20960 <__assert_fail@plt+0xecb4>
   1fb34:	b	1e41c <__assert_fail@plt+0xc770>
   1fb38:	str	r7, [fp, #-192]	; 0xffffff40
   1fb3c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1fb40:	lsl	r2, r7, #3
   1fb44:	mov	r1, r5
   1fb48:	str	r2, [sp, #76]	; 0x4c
   1fb4c:	str	r0, [sp, #80]	; 0x50
   1fb50:	bl	118ec <memcpy@plt>
   1fb54:	ldr	r3, [r5]
   1fb58:	ldr	r0, [r5, #4]
   1fb5c:	mov	sl, #0
   1fb60:	cmp	r3, r0
   1fb64:	ble	1fbf0 <__assert_fail@plt+0xdf44>
   1fb68:	mov	r0, sl
   1fb6c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fb70:	ldr	r0, [fp, #-184]	; 0xffffff48
   1fb74:	cmp	r0, r9
   1fb78:	beq	1fb80 <__assert_fail@plt+0xded4>
   1fb7c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fb80:	mov	r0, #16
   1fb84:	cmp	r8, #0
   1fb88:	str	r0, [fp, #-188]	; 0xffffff44
   1fb8c:	mov	r0, #0
   1fb90:	str	r0, [fp, #-192]	; 0xffffff40
   1fb94:	str	r9, [fp, #-184]	; 0xffffff48
   1fb98:	beq	20840 <__assert_fail@plt+0xeb94>
   1fb9c:	ldr	r1, [r8]
   1fba0:	ldr	r0, [r8, #8]
   1fba4:	mov	r6, r5
   1fba8:	cmp	r1, #1
   1fbac:	blt	20838 <__assert_fail@plt+0xeb8c>
   1fbb0:	mov	r4, #0
   1fbb4:	mov	r5, #0
   1fbb8:	add	r0, r0, r4
   1fbbc:	ldr	r0, [r0, #20]
   1fbc0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fbc4:	ldr	r0, [r8, #8]
   1fbc8:	add	r0, r0, r4
   1fbcc:	ldr	r0, [r0, #8]
   1fbd0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fbd4:	ldr	r1, [r8]
   1fbd8:	ldr	r0, [r8, #8]
   1fbdc:	add	r5, r5, #1
   1fbe0:	add	r4, r4, #24
   1fbe4:	cmp	r5, r1
   1fbe8:	blt	1fbb8 <__assert_fail@plt+0xdf0c>
   1fbec:	b	20838 <__assert_fail@plt+0xeb8c>
   1fbf0:	lsl	r0, r7, #4
   1fbf4:	mov	lr, #1
   1fbf8:	mov	sl, #0
   1fbfc:	str	r6, [sp, #64]	; 0x40
   1fc00:	str	r0, [sp, #56]	; 0x38
   1fc04:	mov	r0, #0
   1fc08:	str	r0, [sp, #72]	; 0x48
   1fc0c:	mov	r0, #0
   1fc10:	str	r0, [sp, #92]	; 0x5c
   1fc14:	ldr	r0, [r6]
   1fc18:	add	r1, r0, r4, lsl #3
   1fc1c:	ldr	r1, [r1, #4]
   1fc20:	uxtb	r2, r1
   1fc24:	cmp	r2, #9
   1fc28:	beq	1fc58 <__assert_fail@plt+0xdfac>
   1fc2c:	cmp	r2, #8
   1fc30:	bne	1fcc8 <__assert_fail@plt+0xe01c>
   1fc34:	ldr	r0, [r0, r4, lsl #3]
   1fc38:	add	r0, r0, #1
   1fc3c:	cmp	r0, r7
   1fc40:	bge	1fcc8 <__assert_fail@plt+0xe01c>
   1fc44:	mov	r1, r5
   1fc48:	str	r3, [r1, r0, lsl #3]!
   1fc4c:	mvn	r0, #0
   1fc50:	str	r0, [r1, #4]
   1fc54:	b	1fcc8 <__assert_fail@plt+0xe01c>
   1fc58:	ldr	r0, [r0, r4, lsl #3]
   1fc5c:	add	r0, r0, #1
   1fc60:	cmp	r0, r7
   1fc64:	bge	1fcc8 <__assert_fail@plt+0xe01c>
   1fc68:	ldr	r2, [r5, r0, lsl #3]
   1fc6c:	cmp	r2, r3
   1fc70:	bge	1fc88 <__assert_fail@plt+0xdfdc>
   1fc74:	add	r0, r5, r0, lsl #3
   1fc78:	mov	r1, r5
   1fc7c:	str	r3, [r0, #4]
   1fc80:	ldr	r0, [sp, #80]	; 0x50
   1fc84:	b	1fca8 <__assert_fail@plt+0xdffc>
   1fc88:	tst	r1, #524288	; 0x80000
   1fc8c:	beq	1fcc0 <__assert_fail@plt+0xe014>
   1fc90:	ldr	r1, [sp, #80]	; 0x50
   1fc94:	ldr	r1, [r1, r0, lsl #3]
   1fc98:	cmn	r1, #1
   1fc9c:	beq	1fcc0 <__assert_fail@plt+0xe014>
   1fca0:	ldr	r1, [sp, #80]	; 0x50
   1fca4:	mov	r0, r5
   1fca8:	ldr	r2, [sp, #76]	; 0x4c
   1fcac:	mov	r6, r3
   1fcb0:	bl	118ec <memcpy@plt>
   1fcb4:	mov	r3, r6
   1fcb8:	mov	lr, #1
   1fcbc:	b	1fcc8 <__assert_fail@plt+0xe01c>
   1fcc0:	add	r0, r5, r0, lsl #3
   1fcc4:	str	r3, [r0, #4]
   1fcc8:	ldr	r0, [r5, #4]
   1fccc:	cmp	r3, r0
   1fcd0:	ldreq	r0, [sp, #200]	; 0xc8
   1fcd4:	cmpeq	r4, r0
   1fcd8:	beq	1fd38 <__assert_fail@plt+0xe08c>
   1fcdc:	cmp	r8, #0
   1fce0:	beq	1fe10 <__assert_fail@plt+0xe164>
   1fce4:	ldr	r0, [sp, #92]	; 0x5c
   1fce8:	cmp	r0, #1
   1fcec:	blt	1fe10 <__assert_fail@plt+0xe164>
   1fcf0:	mov	r6, r3
   1fcf4:	subs	r1, r0, #1
   1fcf8:	beq	1fd24 <__assert_fail@plt+0xe078>
   1fcfc:	mov	r0, #0
   1fd00:	add	r2, r0, r1
   1fd04:	lsr	r3, r2, #1
   1fd08:	ldr	r7, [sl, r3, lsl #2]
   1fd0c:	cmp	r7, r4
   1fd10:	movge	r1, r3
   1fd14:	addlt	r0, lr, r2, lsr #1
   1fd18:	cmp	r0, r1
   1fd1c:	bcc	1fd00 <__assert_fail@plt+0xe054>
   1fd20:	b	1fd28 <__assert_fail@plt+0xe07c>
   1fd24:	mov	r0, #0
   1fd28:	ldr	r0, [sl, r0, lsl #2]
   1fd2c:	ldr	r7, [sp, #68]	; 0x44
   1fd30:	cmp	r0, r4
   1fd34:	bne	1fe0c <__assert_fail@plt+0xe160>
   1fd38:	cmp	r8, #0
   1fd3c:	beq	207b4 <__assert_fail@plt+0xeb08>
   1fd40:	mov	r0, #0
   1fd44:	ldr	r1, [r5, r0, lsl #3]
   1fd48:	cmp	r1, #0
   1fd4c:	blt	1fd60 <__assert_fail@plt+0xe0b4>
   1fd50:	add	r1, r5, r0, lsl #3
   1fd54:	ldr	r1, [r1, #4]
   1fd58:	cmn	r1, #1
   1fd5c:	beq	1fd70 <__assert_fail@plt+0xe0c4>
   1fd60:	add	r0, r0, #1
   1fd64:	cmp	r0, r7
   1fd68:	bcc	1fd44 <__assert_fail@plt+0xe098>
   1fd6c:	b	207b4 <__assert_fail@plt+0xeb08>
   1fd70:	ldr	r0, [r8]
   1fd74:	cmp	r0, #0
   1fd78:	beq	207b4 <__assert_fail@plt+0xeb08>
   1fd7c:	sub	r1, r0, #1
   1fd80:	mov	r0, r5
   1fd84:	str	r9, [sp, #60]	; 0x3c
   1fd88:	ldr	r6, [sp, #76]	; 0x4c
   1fd8c:	str	r1, [r8]
   1fd90:	add	r5, r1, r1, lsl #1
   1fd94:	ldr	r4, [r8, #8]
   1fd98:	mov	r2, r6
   1fd9c:	ldr	r9, [r4, r5, lsl #3]!
   1fda0:	ldr	r1, [r4, #8]
   1fda4:	bl	118ec <memcpy@plt>
   1fda8:	ldr	r0, [r4, #8]
   1fdac:	mov	r2, r6
   1fdb0:	add	r1, r0, r7, lsl #3
   1fdb4:	ldr	r0, [sp, #80]	; 0x50
   1fdb8:	bl	118ec <memcpy@plt>
   1fdbc:	mov	r0, sl
   1fdc0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fdc4:	ldr	r0, [r8, #8]
   1fdc8:	add	r0, r0, r5, lsl #3
   1fdcc:	ldr	r0, [r0, #8]
   1fdd0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   1fdd4:	ldr	r0, [r8, #8]
   1fdd8:	add	r0, r0, r5, lsl #3
   1fddc:	ldr	r4, [r0, #4]
   1fde0:	ldr	sl, [r0, #20]
   1fde4:	cmn	r4, #1
   1fde8:	ble	207ac <__assert_fail@plt+0xeb00>
   1fdec:	ldr	r1, [r0, #12]
   1fdf0:	ldr	r0, [r0, #16]
   1fdf4:	mov	r3, r9
   1fdf8:	ldr	r9, [sp, #60]	; 0x3c
   1fdfc:	mov	lr, #1
   1fe00:	str	r1, [sp, #72]	; 0x48
   1fe04:	str	r0, [sp, #92]	; 0x5c
   1fe08:	b	1fe10 <__assert_fail@plt+0xe164>
   1fe0c:	mov	r3, r6
   1fe10:	ldr	r5, [sp, #188]	; 0xbc
   1fe14:	str	r3, [sp, #84]	; 0x54
   1fe18:	ldr	r0, [r5]
   1fe1c:	add	r1, r0, r4, lsl #3
   1fe20:	ldr	r1, [r1, #4]
   1fe24:	tst	r1, #8
   1fe28:	bne	1fee8 <__assert_fail@plt+0xe23c>
   1fe2c:	tst	r1, #1048576	; 0x100000
   1fe30:	str	sl, [sp, #88]	; 0x58
   1fe34:	bne	1ff6c <__assert_fail@plt+0xe2c0>
   1fe38:	uxtb	r1, r1
   1fe3c:	cmp	r1, #4
   1fe40:	bne	1ff90 <__assert_fail@plt+0xe2e4>
   1fe44:	ldr	r0, [r0, r4, lsl #3]
   1fe48:	mov	r6, #0
   1fe4c:	add	r0, r0, #1
   1fe50:	cmp	r0, r7
   1fe54:	ldrlt	r1, [fp, #20]
   1fe58:	ldrlt	r2, [r1, r0, lsl #3]!
   1fe5c:	ldrlt	r1, [r1, #4]
   1fe60:	sublt	r6, r1, r2
   1fe64:	cmp	r8, #0
   1fe68:	beq	20240 <__assert_fail@plt+0xe594>
   1fe6c:	cmp	r0, r7
   1fe70:	bge	20094 <__assert_fail@plt+0xe3e8>
   1fe74:	ldr	r2, [fp, #20]
   1fe78:	ldr	r1, [r2, r0, lsl #3]
   1fe7c:	cmn	r1, #1
   1fe80:	beq	20094 <__assert_fail@plt+0xe3e8>
   1fe84:	add	r0, r2, r0, lsl #3
   1fe88:	ldr	r0, [r0, #4]
   1fe8c:	cmn	r0, #1
   1fe90:	beq	20094 <__assert_fail@plt+0xe3e8>
   1fe94:	cmp	r6, #0
   1fe98:	beq	20270 <__assert_fail@plt+0xe5c4>
   1fe9c:	ldr	r0, [sp, #132]	; 0x84
   1fea0:	sub	r0, r0, r3
   1fea4:	cmp	r0, r6
   1fea8:	blt	20094 <__assert_fail@plt+0xe3e8>
   1feac:	ldr	r2, [sp, #108]	; 0x6c
   1feb0:	str	r9, [sp, #60]	; 0x3c
   1feb4:	mov	r9, r3
   1feb8:	add	r0, r2, r1
   1febc:	add	r1, r2, r3
   1fec0:	mov	r2, r6
   1fec4:	bl	11934 <memcmp@plt>
   1fec8:	cmp	r0, #0
   1fecc:	beq	20500 <__assert_fail@plt+0xe854>
   1fed0:	ldr	sl, [sp, #60]	; 0x3c
   1fed4:	ldr	r0, [r8]
   1fed8:	mov	r5, #0
   1fedc:	cmp	r0, #0
   1fee0:	bne	200a8 <__assert_fail@plt+0xe3fc>
   1fee4:	b	2070c <__assert_fail@plt+0xea60>
   1fee8:	ldr	r0, [sp, #204]	; 0xcc
   1feec:	ldr	r5, [r5, #20]
   1fef0:	ldr	r6, [r0, r3, lsl #2]
   1fef4:	ldr	r3, [sp, #92]	; 0x5c
   1fef8:	cmp	r3, #1
   1fefc:	blt	1ff48 <__assert_fail@plt+0xe29c>
   1ff00:	mov	r0, #0
   1ff04:	subs	r1, r3, #1
   1ff08:	beq	1ff2c <__assert_fail@plt+0xe280>
   1ff0c:	add	r2, r0, r1
   1ff10:	lsr	r3, r2, #1
   1ff14:	ldr	r7, [sl, r3, lsl #2]
   1ff18:	cmp	r7, r4
   1ff1c:	movge	r1, r3
   1ff20:	addlt	r0, lr, r2, lsr #1
   1ff24:	cmp	r0, r1
   1ff28:	bcc	1ff0c <__assert_fail@plt+0xe260>
   1ff2c:	ldr	r0, [sl, r0, lsl #2]
   1ff30:	ldr	r7, [sp, #68]	; 0x44
   1ff34:	ldr	r3, [sp, #92]	; 0x5c
   1ff38:	cmp	r0, r4
   1ff3c:	bne	1ff48 <__assert_fail@plt+0xe29c>
   1ff40:	str	sl, [sp, #88]	; 0x58
   1ff44:	b	20070 <__assert_fail@plt+0xe3c4>
   1ff48:	ldr	r0, [sp, #72]	; 0x48
   1ff4c:	cmp	r0, #0
   1ff50:	beq	2004c <__assert_fail@plt+0xe3a0>
   1ff54:	cmp	r3, #0
   1ff58:	str	sl, [sp, #88]	; 0x58
   1ff5c:	bne	20528 <__assert_fail@plt+0xe87c>
   1ff60:	str	r4, [sl]
   1ff64:	mov	r3, #1
   1ff68:	b	20070 <__assert_fail@plt+0xe3c4>
   1ff6c:	mov	r0, r5
   1ff70:	mov	r1, r4
   1ff74:	add	r2, sp, #104	; 0x68
   1ff78:	bl	2b3b0 <__assert_fail@plt+0x19704>
   1ff7c:	mov	lr, #1
   1ff80:	mov	r1, r0
   1ff84:	ldr	r3, [sp, #84]	; 0x54
   1ff88:	cmp	r1, #0
   1ff8c:	bne	1ffb8 <__assert_fail@plt+0xe30c>
   1ff90:	ldr	r0, [r5]
   1ff94:	mov	r2, r3
   1ff98:	add	r1, r0, r4, lsl #3
   1ff9c:	add	r0, sp, #104	; 0x68
   1ffa0:	bl	2b6c8 <__assert_fail@plt+0x19a1c>
   1ffa4:	ldr	r3, [sp, #84]	; 0x54
   1ffa8:	mov	lr, #1
   1ffac:	mov	r1, #1
   1ffb0:	cmp	r0, #0
   1ffb4:	beq	2008c <__assert_fail@plt+0xe3e0>
   1ffb8:	ldr	r0, [r5, #12]
   1ffbc:	add	r3, r1, r3
   1ffc0:	cmp	r8, #0
   1ffc4:	ldr	r6, [r0, r4, lsl #2]
   1ffc8:	beq	20254 <__assert_fail@plt+0xe5a8>
   1ffcc:	ldr	r0, [sp, #196]	; 0xc4
   1ffd0:	cmp	r3, r0
   1ffd4:	bgt	20094 <__assert_fail@plt+0xe3e8>
   1ffd8:	ldr	r0, [sp, #204]	; 0xcc
   1ffdc:	ldr	r0, [r0, r3, lsl #2]
   1ffe0:	cmp	r0, #0
   1ffe4:	beq	20094 <__assert_fail@plt+0xe3e8>
   1ffe8:	ldr	r1, [r0, #8]
   1ffec:	cmp	r1, #1
   1fff0:	blt	20094 <__assert_fail@plt+0xe3e8>
   1fff4:	ldr	r0, [r0, #12]
   1fff8:	mov	r2, #0
   1fffc:	mov	r4, r3
   20000:	subs	r1, r1, #1
   20004:	str	r2, [sp, #92]	; 0x5c
   20008:	mov	r2, #0
   2000c:	beq	20034 <__assert_fail@plt+0xe388>
   20010:	mov	r2, #0
   20014:	add	r3, r2, r1
   20018:	lsr	r7, r3, #1
   2001c:	ldr	r5, [r0, r7, lsl #2]
   20020:	cmp	r5, r6
   20024:	movge	r1, r7
   20028:	addlt	r2, lr, r3, lsr #1
   2002c:	cmp	r2, r1
   20030:	bcc	20014 <__assert_fail@plt+0xe368>
   20034:	ldr	r0, [r0, r2, lsl #2]
   20038:	ldr	r7, [sp, #68]	; 0x44
   2003c:	mov	r3, r4
   20040:	cmp	r0, r6
   20044:	bne	2008c <__assert_fail@plt+0xe3e0>
   20048:	b	204d8 <__assert_fail@plt+0xe82c>
   2004c:	mov	r0, #4
   20050:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20054:	cmp	r0, #0
   20058:	beq	209fc <__assert_fail@plt+0xed50>
   2005c:	str	r0, [sp, #88]	; 0x58
   20060:	str	r4, [r0]
   20064:	mov	r0, #1
   20068:	mov	r3, #1
   2006c:	str	r0, [sp, #72]	; 0x48
   20070:	add	r0, r4, r4, lsl #1
   20074:	add	r1, r5, r0, lsl #2
   20078:	ldr	sl, [r1, #4]
   2007c:	cmp	sl, #1
   20080:	ldrge	r2, [r6, #8]
   20084:	subsge	r2, r2, #1
   20088:	bge	20154 <__assert_fail@plt+0xe4a8>
   2008c:	cmp	r8, #0
   20090:	beq	2071c <__assert_fail@plt+0xea70>
   20094:	mov	sl, r9
   20098:	ldr	r0, [r8]
   2009c:	mov	r5, #0
   200a0:	cmp	r0, #0
   200a4:	beq	2070c <__assert_fail@plt+0xea60>
   200a8:	sub	r0, r0, #1
   200ac:	ldr	r9, [sp, #76]	; 0x4c
   200b0:	str	r0, [r8]
   200b4:	add	r6, r0, r0, lsl #1
   200b8:	ldr	r4, [r8, #8]
   200bc:	mov	r2, r9
   200c0:	ldr	r0, [r4, r6, lsl #3]!
   200c4:	str	r0, [sp, #84]	; 0x54
   200c8:	ldr	r1, [r4, #8]
   200cc:	ldr	r0, [fp, #20]
   200d0:	bl	118ec <memcpy@plt>
   200d4:	ldr	r0, [r4, #8]
   200d8:	mov	r2, r9
   200dc:	add	r1, r0, r7, lsl #3
   200e0:	ldr	r0, [sp, #80]	; 0x50
   200e4:	bl	118ec <memcpy@plt>
   200e8:	ldr	r0, [sp, #88]	; 0x58
   200ec:	bl	1bba8 <__assert_fail@plt+0x9efc>
   200f0:	ldr	r0, [r8, #8]
   200f4:	add	r0, r0, r6, lsl #3
   200f8:	ldr	r0, [r0, #8]
   200fc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20100:	ldr	r0, [r8, #8]
   20104:	add	r0, r0, r6, lsl #3
   20108:	ldr	r4, [r0, #4]
   2010c:	ldr	r1, [r0, #20]
   20110:	cmn	r4, #1
   20114:	str	r1, [sp, #88]	; 0x58
   20118:	ble	2070c <__assert_fail@plt+0xea60>
   2011c:	ldr	r1, [r0, #12]
   20120:	ldr	r0, [r0, #16]
   20124:	mov	r9, sl
   20128:	ldr	r5, [fp, #20]
   2012c:	ldr	sl, [sp, #88]	; 0x58
   20130:	ldr	r3, [sp, #84]	; 0x54
   20134:	mov	lr, #1
   20138:	str	r1, [sp, #72]	; 0x48
   2013c:	str	r0, [sp, #92]	; 0x5c
   20140:	ldr	r0, [r5, #4]
   20144:	ldr	r6, [sp, #64]	; 0x40
   20148:	cmp	r3, r0
   2014c:	ble	1fc14 <__assert_fail@plt+0xdf68>
   20150:	b	1fb68 <__assert_fail@plt+0xdebc>
   20154:	str	r3, [sp, #92]	; 0x5c
   20158:	ldr	r0, [r1, #8]
   2015c:	ldr	r3, [r6, #12]
   20160:	cmp	r2, #0
   20164:	str	r0, [sp, #100]	; 0x64
   20168:	beq	201f8 <__assert_fail@plt+0xe54c>
   2016c:	mov	r7, #0
   20170:	mvn	r5, #0
   20174:	str	r9, [sp, #60]	; 0x3c
   20178:	ldr	r0, [sp, #100]	; 0x64
   2017c:	mov	lr, r2
   20180:	mov	r6, #0
   20184:	mov	r9, #1
   20188:	ldr	r4, [r0, r7, lsl #2]
   2018c:	add	r1, r6, r2
   20190:	lsr	r0, r1, #1
   20194:	ldr	ip, [r3, r0, lsl #2]
   20198:	cmp	ip, r4
   2019c:	movge	r2, r0
   201a0:	addlt	r6, r9, r1, lsr #1
   201a4:	cmp	r6, r2
   201a8:	bcc	2018c <__assert_fail@plt+0xe4e0>
   201ac:	ldr	r0, [r3, r6, lsl #2]
   201b0:	cmp	r0, r4
   201b4:	bne	201c8 <__assert_fail@plt+0xe51c>
   201b8:	cmn	r5, #1
   201bc:	mov	r6, r5
   201c0:	mov	r5, r4
   201c4:	bne	202a0 <__assert_fail@plt+0xe5f4>
   201c8:	add	r7, r7, #1
   201cc:	mov	r2, lr
   201d0:	cmp	r7, sl
   201d4:	blt	20178 <__assert_fail@plt+0xe4cc>
   201d8:	ldr	r7, [sp, #68]	; 0x44
   201dc:	ldr	r9, [sp, #60]	; 0x3c
   201e0:	ldr	r3, [sp, #84]	; 0x54
   201e4:	mov	r6, r5
   201e8:	mov	lr, #1
   201ec:	cmn	r6, #1
   201f0:	bgt	204e0 <__assert_fail@plt+0xe834>
   201f4:	b	20264 <__assert_fail@plt+0xe5b8>
   201f8:	ldr	r4, [r3]
   201fc:	mov	r2, #0
   20200:	mvn	r6, #0
   20204:	ldr	r0, [sp, #100]	; 0x64
   20208:	ldr	r3, [r0, r2, lsl #2]
   2020c:	cmp	r4, r3
   20210:	bne	20224 <__assert_fail@plt+0xe578>
   20214:	cmn	r6, #1
   20218:	mov	r3, r4
   2021c:	beq	20228 <__assert_fail@plt+0xe57c>
   20220:	b	2029c <__assert_fail@plt+0xe5f0>
   20224:	mov	r3, r6
   20228:	add	r2, r2, #1
   2022c:	mov	r6, r3
   20230:	cmp	r2, sl
   20234:	blt	20204 <__assert_fail@plt+0xe558>
   20238:	mov	r6, r3
   2023c:	b	204d0 <__assert_fail@plt+0xe824>
   20240:	cmp	r6, #0
   20244:	beq	20270 <__assert_fail@plt+0xe5c4>
   20248:	ldr	r0, [r5, #12]
   2024c:	add	r3, r6, r3
   20250:	ldr	r6, [r0, r4, lsl #2]
   20254:	mov	r0, #0
   20258:	str	r0, [sp, #92]	; 0x5c
   2025c:	cmn	r6, #1
   20260:	bgt	204e0 <__assert_fail@plt+0xe834>
   20264:	cmn	r6, #2
   20268:	bne	2008c <__assert_fail@plt+0xe3e0>
   2026c:	b	20a04 <__assert_fail@plt+0xed58>
   20270:	ldr	r0, [sp, #72]	; 0x48
   20274:	str	r6, [sp, #100]	; 0x64
   20278:	cmp	r0, #0
   2027c:	beq	2040c <__assert_fail@plt+0xe760>
   20280:	ldr	r1, [sp, #92]	; 0x5c
   20284:	cmp	r1, #0
   20288:	bne	20614 <__assert_fail@plt+0xe968>
   2028c:	mov	r0, #1
   20290:	str	r4, [sl]
   20294:	str	r0, [sp, #92]	; 0x5c
   20298:	b	2043c <__assert_fail@plt+0xe790>
   2029c:	str	r9, [sp, #60]	; 0x3c
   202a0:	ldr	r0, [sp, #92]	; 0x5c
   202a4:	ldr	r5, [sp, #88]	; 0x58
   202a8:	ldr	r9, [sp, #60]	; 0x3c
   202ac:	mov	lr, #1
   202b0:	cmp	r0, #1
   202b4:	blt	20314 <__assert_fail@plt+0xe668>
   202b8:	ldr	r0, [sp, #92]	; 0x5c
   202bc:	subs	r1, r0, #1
   202c0:	beq	202ec <__assert_fail@plt+0xe640>
   202c4:	mov	r0, #0
   202c8:	add	r2, r0, r1
   202cc:	lsr	r3, r2, #1
   202d0:	ldr	r7, [r5, r3, lsl #2]
   202d4:	cmp	r7, r6
   202d8:	movge	r1, r3
   202dc:	addlt	r0, lr, r2, lsr #1
   202e0:	cmp	r0, r1
   202e4:	bcc	202c8 <__assert_fail@plt+0xe61c>
   202e8:	b	202f0 <__assert_fail@plt+0xe644>
   202ec:	mov	r0, #0
   202f0:	ldr	r0, [r5, r0, lsl #2]
   202f4:	cmp	r0, r6
   202f8:	bne	20314 <__assert_fail@plt+0xe668>
   202fc:	ldr	r7, [sp, #68]	; 0x44
   20300:	ldr	r3, [sp, #84]	; 0x54
   20304:	mov	r6, r4
   20308:	cmn	r6, #1
   2030c:	bgt	204e0 <__assert_fail@plt+0xe834>
   20310:	b	20264 <__assert_fail@plt+0xe5b8>
   20314:	ldr	r7, [sp, #68]	; 0x44
   20318:	ldr	r3, [sp, #84]	; 0x54
   2031c:	cmp	r8, #0
   20320:	beq	204d8 <__assert_fail@plt+0xe82c>
   20324:	ldr	r5, [r8]
   20328:	ldr	r0, [r8, #4]
   2032c:	add	r1, r5, #1
   20330:	cmp	r1, r0
   20334:	str	r1, [r8]
   20338:	bne	2036c <__assert_fail@plt+0xe6c0>
   2033c:	ldr	r0, [r8, #8]
   20340:	add	r1, r1, r1, lsl #1
   20344:	lsl	r1, r1, #4
   20348:	bl	1bd04 <__assert_fail@plt+0xa058>
   2034c:	cmp	r0, #0
   20350:	beq	20a04 <__assert_fail@plt+0xed58>
   20354:	str	r0, [r8, #8]
   20358:	ldr	r3, [sp, #84]	; 0x54
   2035c:	ldr	r1, [r8, #4]
   20360:	lsl	r1, r1, #1
   20364:	str	r1, [r8, #4]
   20368:	b	20370 <__assert_fail@plt+0xe6c4>
   2036c:	ldr	r0, [r8, #8]
   20370:	add	r5, r5, r5, lsl #1
   20374:	str	r3, [r0, r5, lsl #3]!
   20378:	str	r4, [r0, #4]
   2037c:	ldr	r0, [sp, #56]	; 0x38
   20380:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20384:	ldr	r1, [r8, #8]
   20388:	cmp	r0, #0
   2038c:	add	r4, r1, r5, lsl #3
   20390:	str	r0, [r4, #8]!
   20394:	beq	20a04 <__assert_fail@plt+0xed58>
   20398:	ldr	sl, [sp, #76]	; 0x4c
   2039c:	ldr	r1, [fp, #20]
   203a0:	mov	r2, sl
   203a4:	bl	118ec <memcpy@plt>
   203a8:	ldr	r0, [r4]
   203ac:	ldr	r1, [sp, #80]	; 0x50
   203b0:	mov	r2, sl
   203b4:	add	r0, r0, r7, lsl #3
   203b8:	bl	118ec <memcpy@plt>
   203bc:	ldr	r0, [r8, #8]
   203c0:	add	r5, r0, r5, lsl #3
   203c4:	ldr	r0, [sp, #92]	; 0x5c
   203c8:	mov	r7, r5
   203cc:	str	r0, [r7, #16]!
   203d0:	cmp	r0, #1
   203d4:	sub	sl, r7, #4
   203d8:	blt	204bc <__assert_fail@plt+0xe810>
   203dc:	lsl	r4, r0, #2
   203e0:	str	r0, [sl]
   203e4:	mov	r0, r4
   203e8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   203ec:	cmp	r0, #0
   203f0:	str	r0, [r5, #20]
   203f4:	beq	20a8c <__assert_fail@plt+0xede0>
   203f8:	ldr	r1, [sp, #88]	; 0x58
   203fc:	mov	r2, r4
   20400:	bl	118ec <memcpy@plt>
   20404:	ldr	r7, [sp, #68]	; 0x44
   20408:	b	204d0 <__assert_fail@plt+0xe824>
   2040c:	mov	r0, #4
   20410:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20414:	cmp	r0, #0
   20418:	beq	209fc <__assert_fail@plt+0xed50>
   2041c:	mov	sl, r0
   20420:	str	r4, [r0]
   20424:	mov	r0, #1
   20428:	str	r0, [sp, #92]	; 0x5c
   2042c:	mov	r0, #1
   20430:	str	r0, [sp, #72]	; 0x48
   20434:	ldr	r3, [sp, #84]	; 0x54
   20438:	mov	lr, #1
   2043c:	ldr	r0, [sp, #204]	; 0xcc
   20440:	str	sl, [sp, #88]	; 0x58
   20444:	ldr	r0, [r0, r3, lsl #2]
   20448:	ldr	r1, [r0, #8]
   2044c:	cmp	r1, #1
   20450:	blt	1ff90 <__assert_fail@plt+0xe2e4>
   20454:	ldr	r2, [r5, #20]
   20458:	add	r3, r4, r4, lsl #1
   2045c:	ldr	ip, [r0, #12]
   20460:	add	r2, r2, r3, lsl #2
   20464:	ldr	r2, [r2, #8]
   20468:	ldr	r6, [r2]
   2046c:	subs	r2, r1, #1
   20470:	mov	r1, #0
   20474:	beq	20498 <__assert_fail@plt+0xe7ec>
   20478:	add	r3, r1, r2
   2047c:	lsr	r7, r3, #1
   20480:	ldr	r0, [ip, r7, lsl #2]
   20484:	cmp	r0, r6
   20488:	movge	r2, r7
   2048c:	addlt	r1, lr, r3, lsr #1
   20490:	cmp	r1, r2
   20494:	bcc	20478 <__assert_fail@plt+0xe7cc>
   20498:	ldr	r0, [ip, r1, lsl #2]
   2049c:	ldr	r7, [sp, #68]	; 0x44
   204a0:	ldr	r1, [sp, #100]	; 0x64
   204a4:	cmp	r0, r6
   204a8:	bne	1ff84 <__assert_fail@plt+0xe2d8>
   204ac:	ldr	r3, [sp, #84]	; 0x54
   204b0:	cmn	r6, #1
   204b4:	bgt	204e0 <__assert_fail@plt+0xe834>
   204b8:	b	20264 <__assert_fail@plt+0xe5b8>
   204bc:	ldr	r7, [sp, #68]	; 0x44
   204c0:	mov	r0, #0
   204c4:	str	r0, [sl]
   204c8:	str	r0, [sl, #4]
   204cc:	str	r0, [sl, #8]
   204d0:	ldr	r3, [sp, #84]	; 0x54
   204d4:	mov	lr, #1
   204d8:	cmn	r6, #1
   204dc:	ble	20264 <__assert_fail@plt+0xe5b8>
   204e0:	ldr	r5, [fp, #20]
   204e4:	ldr	sl, [sp, #88]	; 0x58
   204e8:	mov	r4, r6
   204ec:	ldr	r0, [r5, #4]
   204f0:	ldr	r6, [sp, #64]	; 0x40
   204f4:	cmp	r3, r0
   204f8:	ble	1fc14 <__assert_fail@plt+0xdf68>
   204fc:	b	1fb68 <__assert_fail@plt+0xdebc>
   20500:	ldr	r0, [r5, #12]
   20504:	add	r9, r6, r9
   20508:	mov	lr, #1
   2050c:	mov	r3, r9
   20510:	ldr	r9, [sp, #60]	; 0x3c
   20514:	ldr	r6, [r0, r4, lsl #2]
   20518:	ldr	r0, [sp, #196]	; 0xc4
   2051c:	cmp	r3, r0
   20520:	ble	1ffd8 <__assert_fail@plt+0xe32c>
   20524:	b	20094 <__assert_fail@plt+0xe3e8>
   20528:	ldr	r0, [sp, #72]	; 0x48
   2052c:	str	r6, [sp, #100]	; 0x64
   20530:	mov	r6, r9
   20534:	cmp	r0, r3
   20538:	bne	20568 <__assert_fail@plt+0xe8bc>
   2053c:	ldr	r0, [sp, #92]	; 0x5c
   20540:	lsl	r1, r0, #3
   20544:	ldr	r0, [sp, #88]	; 0x58
   20548:	bl	1bd04 <__assert_fail@plt+0xa058>
   2054c:	cmp	r0, #0
   20550:	mov	r9, r6
   20554:	beq	20a04 <__assert_fail@plt+0xed58>
   20558:	ldr	r1, [sp, #92]	; 0x5c
   2055c:	str	r0, [sp, #88]	; 0x58
   20560:	lsl	r1, r1, #1
   20564:	str	r1, [sp, #72]	; 0x48
   20568:	ldr	r0, [sp, #88]	; 0x58
   2056c:	ldr	r0, [r0]
   20570:	cmp	r0, r4
   20574:	ble	205b8 <__assert_fail@plt+0xe90c>
   20578:	ldr	r2, [sp, #92]	; 0x5c
   2057c:	cmp	r2, #1
   20580:	blt	205f4 <__assert_fail@plt+0xe948>
   20584:	ldr	r0, [sp, #88]	; 0x58
   20588:	ldr	r2, [sp, #92]	; 0x5c
   2058c:	add	r1, r0, r2, lsl #2
   20590:	add	r0, r2, #1
   20594:	mov	r2, r1
   20598:	ldr	r3, [r2, #-4]!
   2059c:	sub	r0, r0, #1
   205a0:	cmp	r0, #1
   205a4:	str	r3, [r1]
   205a8:	mov	r1, r2
   205ac:	bgt	20598 <__assert_fail@plt+0xe8ec>
   205b0:	sub	r2, r0, #1
   205b4:	b	205f4 <__assert_fail@plt+0xe948>
   205b8:	ldr	r0, [sp, #88]	; 0x58
   205bc:	ldr	r2, [sp, #92]	; 0x5c
   205c0:	add	r0, r0, r2, lsl #2
   205c4:	ldr	r1, [r0, #-4]
   205c8:	cmp	r1, r4
   205cc:	ble	205f4 <__assert_fail@plt+0xe948>
   205d0:	ldr	r2, [sp, #92]	; 0x5c
   205d4:	sub	r2, r2, #2
   205d8:	str	r1, [r0]
   205dc:	sub	r2, r2, #1
   205e0:	ldr	r1, [r0, #-8]
   205e4:	sub	r0, r0, #4
   205e8:	cmp	r1, r4
   205ec:	bgt	205d8 <__assert_fail@plt+0xe92c>
   205f0:	add	r2, r2, #2
   205f4:	ldr	r3, [sp, #92]	; 0x5c
   205f8:	ldr	r0, [sp, #88]	; 0x58
   205fc:	mov	r9, r6
   20600:	ldr	r7, [sp, #68]	; 0x44
   20604:	ldr	r6, [sp, #100]	; 0x64
   20608:	add	r3, r3, #1
   2060c:	str	r4, [r0, r2, lsl #2]
   20610:	b	20070 <__assert_fail@plt+0xe3c4>
   20614:	ldr	r0, [sp, #72]	; 0x48
   20618:	mov	r6, r9
   2061c:	cmp	r0, r1
   20620:	bne	20650 <__assert_fail@plt+0xe9a4>
   20624:	ldr	r0, [sp, #92]	; 0x5c
   20628:	lsl	r1, r0, #3
   2062c:	ldr	r0, [sp, #88]	; 0x58
   20630:	bl	1bd04 <__assert_fail@plt+0xa058>
   20634:	cmp	r0, #0
   20638:	mov	r9, r6
   2063c:	beq	20a04 <__assert_fail@plt+0xed58>
   20640:	ldr	r1, [sp, #92]	; 0x5c
   20644:	str	r0, [sp, #88]	; 0x58
   20648:	lsl	r1, r1, #1
   2064c:	str	r1, [sp, #72]	; 0x48
   20650:	ldr	r0, [sp, #88]	; 0x58
   20654:	ldr	r0, [r0]
   20658:	cmp	r0, r4
   2065c:	ble	206a0 <__assert_fail@plt+0xe9f4>
   20660:	ldr	r2, [sp, #92]	; 0x5c
   20664:	cmp	r2, #1
   20668:	blt	206dc <__assert_fail@plt+0xea30>
   2066c:	ldr	r0, [sp, #88]	; 0x58
   20670:	ldr	r2, [sp, #92]	; 0x5c
   20674:	add	r1, r0, r2, lsl #2
   20678:	add	r0, r2, #1
   2067c:	mov	r2, r1
   20680:	ldr	r3, [r2, #-4]!
   20684:	sub	r0, r0, #1
   20688:	cmp	r0, #1
   2068c:	str	r3, [r1]
   20690:	mov	r1, r2
   20694:	bgt	20680 <__assert_fail@plt+0xe9d4>
   20698:	sub	r2, r0, #1
   2069c:	b	206dc <__assert_fail@plt+0xea30>
   206a0:	ldr	r0, [sp, #88]	; 0x58
   206a4:	ldr	r2, [sp, #92]	; 0x5c
   206a8:	add	r0, r0, r2, lsl #2
   206ac:	ldr	r1, [r0, #-4]
   206b0:	cmp	r1, r4
   206b4:	ble	206dc <__assert_fail@plt+0xea30>
   206b8:	ldr	r2, [sp, #92]	; 0x5c
   206bc:	sub	r2, r2, #2
   206c0:	str	r1, [r0]
   206c4:	sub	r2, r2, #1
   206c8:	ldr	r1, [r0, #-8]
   206cc:	sub	r0, r0, #4
   206d0:	cmp	r1, r4
   206d4:	bgt	206c0 <__assert_fail@plt+0xea14>
   206d8:	add	r2, r2, #2
   206dc:	ldr	r1, [sp, #92]	; 0x5c
   206e0:	ldr	sl, [sp, #88]	; 0x58
   206e4:	ldr	r7, [sp, #68]	; 0x44
   206e8:	mov	r9, r6
   206ec:	add	r1, r1, #1
   206f0:	str	r4, [sl, r2, lsl #2]
   206f4:	str	r1, [sp, #92]	; 0x5c
   206f8:	b	20434 <__assert_fail@plt+0xe788>
   206fc:	mov	r6, #0
   20700:	b	1e41c <__assert_fail@plt+0xc770>
   20704:	mov	r9, #12
   20708:	b	2090c <__assert_fail@plt+0xec60>
   2070c:	mov	r9, sl
   20710:	b	20720 <__assert_fail@plt+0xea74>
   20714:	mov	r9, r0
   20718:	b	2090c <__assert_fail@plt+0xec60>
   2071c:	mov	r5, #1
   20720:	ldr	r0, [sp, #88]	; 0x58
   20724:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20728:	ldr	r0, [fp, #-184]	; 0xffffff48
   2072c:	cmp	r0, r9
   20730:	beq	20738 <__assert_fail@plt+0xea8c>
   20734:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20738:	mov	r0, #16
   2073c:	cmp	r5, #0
   20740:	str	r0, [fp, #-188]	; 0xffffff44
   20744:	mov	r0, #0
   20748:	str	r0, [fp, #-192]	; 0xffffff40
   2074c:	str	r9, [fp, #-184]	; 0xffffff48
   20750:	mov	r9, #1
   20754:	bne	2090c <__assert_fail@plt+0xec60>
   20758:	ldr	r1, [r8]
   2075c:	ldr	r0, [r8, #8]
   20760:	cmp	r1, #1
   20764:	blt	207a4 <__assert_fail@plt+0xeaf8>
   20768:	mov	r5, #0
   2076c:	mov	r6, #0
   20770:	add	r0, r0, r5
   20774:	ldr	r0, [r0, #20]
   20778:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2077c:	ldr	r0, [r8, #8]
   20780:	add	r0, r0, r5
   20784:	ldr	r0, [r0, #8]
   20788:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2078c:	ldr	r1, [r8]
   20790:	ldr	r0, [r8, #8]
   20794:	add	r6, r6, #1
   20798:	add	r5, r5, #24
   2079c:	cmp	r6, r1
   207a0:	blt	20770 <__assert_fail@plt+0xeac4>
   207a4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   207a8:	b	2090c <__assert_fail@plt+0xec60>
   207ac:	ldr	r5, [fp, #20]
   207b0:	ldr	r9, [sp, #60]	; 0x3c
   207b4:	mov	r0, sl
   207b8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   207bc:	ldr	r0, [fp, #-184]	; 0xffffff48
   207c0:	cmp	r0, r9
   207c4:	beq	207cc <__assert_fail@plt+0xeb20>
   207c8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   207cc:	mov	r0, #16
   207d0:	cmp	r8, #0
   207d4:	str	r0, [fp, #-188]	; 0xffffff44
   207d8:	mov	r0, #0
   207dc:	str	r0, [fp, #-192]	; 0xffffff40
   207e0:	str	r9, [fp, #-184]	; 0xffffff48
   207e4:	beq	20840 <__assert_fail@plt+0xeb94>
   207e8:	ldr	r1, [r8]
   207ec:	ldr	r0, [r8, #8]
   207f0:	mov	r6, r5
   207f4:	cmp	r1, #1
   207f8:	blt	20838 <__assert_fail@plt+0xeb8c>
   207fc:	mov	r4, #0
   20800:	mov	r5, #0
   20804:	add	r0, r0, r4
   20808:	ldr	r0, [r0, #20]
   2080c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20810:	ldr	r0, [r8, #8]
   20814:	add	r0, r0, r4
   20818:	ldr	r0, [r0, #8]
   2081c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20820:	ldr	r1, [r8]
   20824:	ldr	r0, [r8, #8]
   20828:	add	r5, r5, #1
   2082c:	add	r4, r4, #24
   20830:	cmp	r5, r1
   20834:	blt	20804 <__assert_fail@plt+0xeb58>
   20838:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2083c:	mov	r5, r6
   20840:	ldrb	r0, [sp, #180]	; 0xb4
   20844:	cmp	r0, #0
   20848:	bne	20984 <__assert_fail@plt+0xecd8>
   2084c:	ldr	r1, [fp, #-200]	; 0xffffff38
   20850:	ldr	r4, [sp, #28]
   20854:	add	r0, r5, #4
   20858:	mov	r2, r7
   2085c:	ldr	r3, [r0, #-4]
   20860:	cmn	r3, #1
   20864:	addne	r3, r3, r1
   20868:	strne	r3, [r0, #-4]
   2086c:	ldrne	r3, [r0]
   20870:	addne	r3, r3, r1
   20874:	strne	r3, [r0]
   20878:	add	r0, r0, #8
   2087c:	subs	r2, r2, #1
   20880:	bne	2085c <__assert_fail@plt+0xebb0>
   20884:	cmp	r4, #1
   20888:	blt	2089c <__assert_fail@plt+0xebf0>
   2088c:	add	r0, r5, r7, lsl #3
   20890:	lsl	r2, r4, #3
   20894:	mov	r1, #255	; 0xff
   20898:	bl	11b2c <memset@plt>
   2089c:	ldr	r0, [sp, #96]	; 0x60
   208a0:	mov	r9, #0
   208a4:	ldr	r0, [r0, #132]	; 0x84
   208a8:	cmp	r0, #0
   208ac:	beq	2090c <__assert_fail@plt+0xec60>
   208b0:	cmp	r7, #2
   208b4:	bcc	2090c <__assert_fail@plt+0xec60>
   208b8:	ldr	r1, [fp, #16]
   208bc:	ldr	r2, [sp, #28]
   208c0:	mov	r6, r5
   208c4:	sub	r1, r1, #1
   208c8:	sub	r1, r1, r2
   208cc:	mov	r2, #0
   208d0:	ldr	r3, [r0, r2, lsl #2]
   208d4:	cmp	r2, r3
   208d8:	beq	208fc <__assert_fail@plt+0xec50>
   208dc:	add	r3, r6, r3, lsl #3
   208e0:	add	r7, r6, r2, lsl #3
   208e4:	ldr	r3, [r3, #8]
   208e8:	str	r3, [r7, #8]
   208ec:	ldr	r3, [r0, r2, lsl #2]
   208f0:	add	r3, r6, r3, lsl #3
   208f4:	ldr	r3, [r3, #12]
   208f8:	str	r3, [r7, #12]
   208fc:	add	r2, r2, #1
   20900:	cmp	r1, r2
   20904:	bne	208d0 <__assert_fail@plt+0xec24>
   20908:	mov	r9, #0
   2090c:	ldr	r0, [sp, #204]	; 0xcc
   20910:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20914:	ldr	r0, [sp, #96]	; 0x60
   20918:	ldr	r0, [r0, #76]	; 0x4c
   2091c:	cmp	r0, #0
   20920:	beq	2093c <__assert_fail@plt+0xec90>
   20924:	add	r0, sp, #104	; 0x68
   20928:	bl	28970 <__assert_fail@plt+0x16cc4>
   2092c:	ldr	r0, [sp, #236]	; 0xec
   20930:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20934:	ldr	r0, [sp, #220]	; 0xdc
   20938:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2093c:	ldr	r0, [sp, #112]	; 0x70
   20940:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20944:	ldr	r0, [sp, #116]	; 0x74
   20948:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2094c:	ldrb	r0, [sp, #179]	; 0xb3
   20950:	cmp	r0, #0
   20954:	beq	20960 <__assert_fail@plt+0xecb4>
   20958:	ldr	r0, [sp, #108]	; 0x6c
   2095c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20960:	mov	r0, r9
   20964:	sub	sp, fp, #28
   20968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2096c:	mov	r0, r6
   20970:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20974:	mov	r0, #0
   20978:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2097c:	mov	r9, #12
   20980:	b	2090c <__assert_fail@plt+0xec60>
   20984:	ldr	ip, [sp, #24]
   20988:	ldr	r4, [sp, #28]
   2098c:	add	r0, r5, #4
   20990:	mov	r1, r7
   20994:	ldr	r2, [r0, #-4]
   20998:	cmn	r2, #1
   2099c:	beq	209e4 <__assert_fail@plt+0xed38>
   209a0:	ldr	r7, [sp, #132]	; 0x84
   209a4:	ldr	r3, [sp, #116]	; 0x74
   209a8:	mov	r6, ip
   209ac:	cmp	r2, r7
   209b0:	addne	r6, r3, r2, lsl #2
   209b4:	ldr	r2, [r6]
   209b8:	str	r2, [r0, #-4]
   209bc:	ldr	r6, [r0]
   209c0:	cmp	r6, r7
   209c4:	mov	r7, ip
   209c8:	addne	r7, r3, r6, lsl #2
   209cc:	ldr	r3, [r7]
   209d0:	ldr	r7, [fp, #-200]	; 0xffffff38
   209d4:	add	r2, r2, r7
   209d8:	add	r3, r3, r7
   209dc:	ldr	r7, [sp, #68]	; 0x44
   209e0:	stmda	r0, {r2, r3}
   209e4:	add	r0, r0, #8
   209e8:	subs	r1, r1, #1
   209ec:	bne	20994 <__assert_fail@plt+0xece8>
   209f0:	b	20884 <__assert_fail@plt+0xebd8>
   209f4:	mov	r9, #1
   209f8:	b	2090c <__assert_fail@plt+0xec60>
   209fc:	mov	r0, #0
   20a00:	str	r0, [sp, #88]	; 0x58
   20a04:	ldr	r0, [sp, #88]	; 0x58
   20a08:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20a0c:	ldr	r0, [fp, #-184]	; 0xffffff48
   20a10:	cmp	r0, r9
   20a14:	beq	20a1c <__assert_fail@plt+0xed70>
   20a18:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20a1c:	mov	r0, #16
   20a20:	cmp	r8, #0
   20a24:	str	r0, [fp, #-188]	; 0xffffff44
   20a28:	mov	r0, #0
   20a2c:	str	r0, [fp, #-192]	; 0xffffff40
   20a30:	str	r9, [fp, #-184]	; 0xffffff48
   20a34:	mov	r9, #12
   20a38:	beq	2090c <__assert_fail@plt+0xec60>
   20a3c:	ldr	r1, [r8]
   20a40:	ldr	r0, [r8, #8]
   20a44:	cmp	r1, #1
   20a48:	blt	207a4 <__assert_fail@plt+0xeaf8>
   20a4c:	mov	r5, #0
   20a50:	mov	r6, #0
   20a54:	add	r0, r0, r5
   20a58:	ldr	r0, [r0, #20]
   20a5c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20a60:	ldr	r0, [r8, #8]
   20a64:	add	r0, r0, r5
   20a68:	ldr	r0, [r0, #8]
   20a6c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20a70:	ldr	r1, [r8]
   20a74:	ldr	r0, [r8, #8]
   20a78:	add	r6, r6, #1
   20a7c:	add	r5, r5, #24
   20a80:	cmp	r6, r1
   20a84:	blt	20a54 <__assert_fail@plt+0xeda8>
   20a88:	b	207a4 <__assert_fail@plt+0xeaf8>
   20a8c:	mov	r0, #0
   20a90:	str	r0, [r7]
   20a94:	str	r0, [sl]
   20a98:	b	20a04 <__assert_fail@plt+0xed58>
   20a9c:	push	{fp, lr}
   20aa0:	mov	fp, sp
   20aa4:	sub	sp, sp, #16
   20aa8:	mov	ip, #1
   20aac:	str	r2, [sp, #4]
   20ab0:	str	ip, [sp, #12]
   20ab4:	mov	ip, #0
   20ab8:	str	ip, [sp]
   20abc:	ldr	ip, [fp, #8]
   20ac0:	str	ip, [sp, #8]
   20ac4:	bl	20ad0 <__assert_fail@plt+0xee24>
   20ac8:	mov	sp, fp
   20acc:	pop	{fp, pc}
   20ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ad4:	add	fp, sp, #28
   20ad8:	sub	sp, sp, #44	; 0x2c
   20adc:	mvn	r4, #0
   20ae0:	cmp	r3, #0
   20ae4:	blt	20e34 <__assert_fail@plt+0xf188>
   20ae8:	mov	r6, r3
   20aec:	mov	r8, r2
   20af0:	cmp	r3, r2
   20af4:	bgt	20e34 <__assert_fail@plt+0xf188>
   20af8:	mov	r5, r0
   20afc:	ldr	r0, [fp, #8]
   20b00:	mov	r7, r8
   20b04:	str	r1, [sp, #24]
   20b08:	movw	r1, #0
   20b0c:	ldr	sl, [r5]
   20b10:	movt	r1, #0
   20b14:	add	r0, r0, r6
   20b18:	cmp	r0, r8
   20b1c:	bicle	r7, r0, r0, asr #31
   20b20:	movw	r0, #0
   20b24:	movt	r0, #0
   20b28:	orrs	r4, r1, r0
   20b2c:	beq	20b38 <__assert_fail@plt+0xee8c>
   20b30:	add	r0, sl, #136	; 0x88
   20b34:	bl	118bc <pthread_mutex_lock@plt>
   20b38:	ldrb	r0, [r5, #28]
   20b3c:	ldr	r9, [fp, #16]
   20b40:	cmp	r7, r6
   20b44:	ubfx	r1, r0, #5, #2
   20b48:	str	r4, [sp, #28]
   20b4c:	str	r6, [sp, #36]	; 0x24
   20b50:	str	r1, [sp, #20]
   20b54:	ble	20bf0 <__assert_fail@plt+0xef44>
   20b58:	tst	r0, #8
   20b5c:	bne	20bf0 <__assert_fail@plt+0xef44>
   20b60:	ldr	r6, [r5, #16]
   20b64:	cmp	r6, #0
   20b68:	beq	20bf0 <__assert_fail@plt+0xef44>
   20b6c:	ldr	r4, [r5]
   20b70:	mov	r0, r6
   20b74:	mov	r1, #0
   20b78:	mov	r2, #256	; 0x100
   20b7c:	bl	11b2c <memset@plt>
   20b80:	ldr	r1, [r4, #36]	; 0x24
   20b84:	mov	r0, r5
   20b88:	mov	r2, r6
   20b8c:	bl	1d5cc <__assert_fail@plt+0xb920>
   20b90:	ldr	r0, [r4, #36]	; 0x24
   20b94:	ldr	r1, [r4, #40]	; 0x28
   20b98:	cmp	r0, r1
   20b9c:	beq	20bb0 <__assert_fail@plt+0xef04>
   20ba0:	mov	r0, r5
   20ba4:	mov	r2, r6
   20ba8:	bl	1d5cc <__assert_fail@plt+0xb920>
   20bac:	ldr	r0, [r4, #36]	; 0x24
   20bb0:	ldr	r1, [r4, #44]	; 0x2c
   20bb4:	cmp	r0, r1
   20bb8:	beq	20bcc <__assert_fail@plt+0xef20>
   20bbc:	mov	r0, r5
   20bc0:	mov	r2, r6
   20bc4:	bl	1d5cc <__assert_fail@plt+0xb920>
   20bc8:	ldr	r0, [r4, #36]	; 0x24
   20bcc:	ldr	r1, [r4, #48]	; 0x30
   20bd0:	cmp	r0, r1
   20bd4:	beq	20be4 <__assert_fail@plt+0xef38>
   20bd8:	mov	r0, r5
   20bdc:	mov	r2, r6
   20be0:	bl	1d5cc <__assert_fail@plt+0xb920>
   20be4:	ldrb	r0, [r5, #28]
   20be8:	orr	r0, r0, #8
   20bec:	strb	r0, [r5, #28]
   20bf0:	str	sl, [sp, #32]
   20bf4:	mov	sl, #1
   20bf8:	mov	r4, #0
   20bfc:	cmp	r9, #0
   20c00:	str	r5, [fp, #-32]	; 0xffffffe0
   20c04:	beq	20c44 <__assert_fail@plt+0xef98>
   20c08:	ldr	r6, [sp, #36]	; 0x24
   20c0c:	ands	r1, r0, #16
   20c10:	bne	20c80 <__assert_fail@plt+0xefd4>
   20c14:	and	r0, r0, #6
   20c18:	cmp	r0, #4
   20c1c:	bne	20c70 <__assert_fail@plt+0xefc4>
   20c20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20c24:	ldr	sl, [r9]
   20c28:	ldr	r0, [r0, #24]
   20c2c:	cmp	sl, r0
   20c30:	bhi	20c78 <__assert_fail@plt+0xefcc>
   20c34:	cmp	sl, #1
   20c38:	movwlt	r9, #0
   20c3c:	movwlt	sl, #1
   20c40:	b	20c7c <__assert_fail@plt+0xefd0>
   20c44:	ldr	r6, [sp, #36]	; 0x24
   20c48:	lsl	r0, sl, #3
   20c4c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20c50:	cmp	r0, #0
   20c54:	bne	20c90 <__assert_fail@plt+0xefe4>
   20c58:	ldr	r5, [sp, #32]
   20c5c:	mvn	r4, #1
   20c60:	ldr	r0, [sp, #28]
   20c64:	cmp	r0, #0
   20c68:	bne	20e2c <__assert_fail@plt+0xf180>
   20c6c:	b	20e34 <__assert_fail@plt+0xf188>
   20c70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20c74:	ldr	r0, [r0, #24]
   20c78:	add	sl, r0, #1
   20c7c:	mov	r4, r9
   20c80:	lsl	r0, sl, #3
   20c84:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20c88:	cmp	r0, #0
   20c8c:	beq	20c58 <__assert_fail@plt+0xefac>
   20c90:	mov	r9, r0
   20c94:	ldr	r0, [fp, #12]
   20c98:	str	r7, [sp]
   20c9c:	mov	r2, r8
   20ca0:	mov	r3, r6
   20ca4:	stmib	sp, {r0, sl}
   20ca8:	str	r9, [sp, #12]
   20cac:	ldr	r0, [sp, #20]
   20cb0:	ldr	r1, [sp, #24]
   20cb4:	str	r0, [sp, #16]
   20cb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20cbc:	bl	1e344 <__assert_fail@plt+0xc698>
   20cc0:	cmp	r0, #0
   20cc4:	beq	20cd8 <__assert_fail@plt+0xf02c>
   20cc8:	mvn	r4, #1
   20ccc:	cmp	r0, #1
   20cd0:	mvneq	r4, #0
   20cd4:	b	20e14 <__assert_fail@plt+0xf168>
   20cd8:	cmp	r4, #0
   20cdc:	beq	20df8 <__assert_fail@plt+0xf14c>
   20ce0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20ce4:	add	r6, sl, #1
   20ce8:	ldrb	r0, [r0, #28]
   20cec:	ubfx	r0, r0, #1, #2
   20cf0:	cmp	r0, #1
   20cf4:	beq	20d5c <__assert_fail@plt+0xf0b0>
   20cf8:	mov	r8, #2
   20cfc:	cmp	r0, #0
   20d00:	bne	20d6c <__assert_fail@plt+0xf0c0>
   20d04:	lsl	r7, r6, #2
   20d08:	mov	r0, r7
   20d0c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20d10:	mov	r8, #0
   20d14:	cmp	r0, #0
   20d18:	str	r0, [r4, #4]
   20d1c:	beq	20f4c <__assert_fail@plt+0xf2a0>
   20d20:	mov	r0, r7
   20d24:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20d28:	cmp	r0, #0
   20d2c:	str	r0, [r4, #8]
   20d30:	beq	20f44 <__assert_fail@plt+0xf298>
   20d34:	str	r6, [r4]
   20d38:	mov	r8, #1
   20d3c:	cmp	sl, #1
   20d40:	bge	20d74 <__assert_fail@plt+0xf0c8>
   20d44:	mov	sl, #0
   20d48:	ldr	r0, [r4]
   20d4c:	ldr	r6, [sp, #36]	; 0x24
   20d50:	cmp	sl, r0
   20d54:	bcs	20ddc <__assert_fail@plt+0xf130>
   20d58:	b	20dbc <__assert_fail@plt+0xf110>
   20d5c:	ldr	r0, [r4]
   20d60:	mov	r8, #1
   20d64:	cmp	r6, r0
   20d68:	bhi	20ef4 <__assert_fail@plt+0xf248>
   20d6c:	cmp	sl, #1
   20d70:	blt	20d44 <__assert_fail@plt+0xf098>
   20d74:	ldmib	r4, {r6, r7}
   20d78:	mov	r2, #0
   20d7c:	cmp	sl, #3
   20d80:	bhi	20e40 <__assert_fail@plt+0xf194>
   20d84:	add	r0, r9, r2, lsl #3
   20d88:	add	r0, r0, #4
   20d8c:	ldr	r1, [r0, #-4]
   20d90:	str	r1, [r6, r2, lsl #2]
   20d94:	ldr	r1, [r0]
   20d98:	add	r0, r0, #8
   20d9c:	str	r1, [r7, r2, lsl #2]
   20da0:	add	r2, r2, #1
   20da4:	cmp	sl, r2
   20da8:	bne	20d8c <__assert_fail@plt+0xf0e0>
   20dac:	ldr	r0, [r4]
   20db0:	ldr	r6, [sp, #36]	; 0x24
   20db4:	cmp	sl, r0
   20db8:	bcs	20ddc <__assert_fail@plt+0xf130>
   20dbc:	ldmib	r4, {r0, r1}
   20dc0:	mvn	r2, #0
   20dc4:	str	r2, [r1, sl, lsl #2]
   20dc8:	str	r2, [r0, sl, lsl #2]
   20dcc:	add	sl, sl, #1
   20dd0:	ldr	r3, [r4]
   20dd4:	cmp	sl, r3
   20dd8:	bcc	20dc4 <__assert_fail@plt+0xf118>
   20ddc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   20de0:	cmp	r8, #0
   20de4:	ldrb	r0, [r1, #28]
   20de8:	and	r0, r0, #249	; 0xf9
   20dec:	orr	r0, r0, r8, lsl #1
   20df0:	strb	r0, [r1, #28]
   20df4:	beq	20e10 <__assert_fail@plt+0xf164>
   20df8:	ldr	r0, [fp, #20]
   20dfc:	cmp	r0, #0
   20e00:	ldreq	r4, [r9]
   20e04:	ldrne	r0, [r9, #4]
   20e08:	subne	r4, r0, r6
   20e0c:	b	20e14 <__assert_fail@plt+0xf168>
   20e10:	mvn	r4, #1
   20e14:	ldr	r5, [sp, #32]
   20e18:	mov	r0, r9
   20e1c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20e20:	ldr	r0, [sp, #28]
   20e24:	cmp	r0, #0
   20e28:	beq	20e34 <__assert_fail@plt+0xf188>
   20e2c:	add	r0, r5, #136	; 0x88
   20e30:	bl	11808 <pthread_mutex_unlock@plt>
   20e34:	mov	r0, r4
   20e38:	sub	sp, fp, #28
   20e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e40:	add	ip, r7, sl, lsl #2
   20e44:	mov	lr, #0
   20e48:	add	r5, r9, sl, lsl #3
   20e4c:	str	r8, [sp, #24]
   20e50:	mov	r8, #0
   20e54:	add	r3, r6, sl, lsl #2
   20e58:	mov	r1, #0
   20e5c:	mov	r0, #0
   20e60:	mov	r2, #0
   20e64:	cmp	r9, ip
   20e68:	movwcc	lr, #1
   20e6c:	cmp	r5, r7
   20e70:	movwhi	r8, #1
   20e74:	cmp	r9, r3
   20e78:	movwcc	r1, #1
   20e7c:	cmp	r5, r6
   20e80:	mov	r5, #0
   20e84:	movwhi	r5, #1
   20e88:	cmp	r7, r3
   20e8c:	mov	r3, #0
   20e90:	movwcc	r3, #1
   20e94:	cmp	r6, ip
   20e98:	movwcc	r0, #1
   20e9c:	tst	r0, r3
   20ea0:	bne	20eec <__assert_fail@plt+0xf240>
   20ea4:	ands	r0, r5, r1
   20ea8:	bne	20eec <__assert_fail@plt+0xf240>
   20eac:	ands	r0, r8, lr
   20eb0:	ldr	r8, [sp, #24]
   20eb4:	bne	20d84 <__assert_fail@plt+0xf0d8>
   20eb8:	bic	r2, sl, #3
   20ebc:	mov	r1, r7
   20ec0:	mov	r0, r6
   20ec4:	mov	r5, r9
   20ec8:	mov	r3, r2
   20ecc:	vld2.32	{d16-d19}, [r5]!
   20ed0:	subs	r3, r3, #4
   20ed4:	vst1.32	{d16-d17}, [r0]!
   20ed8:	vst1.32	{d18-d19}, [r1]!
   20edc:	bne	20ecc <__assert_fail@plt+0xf220>
   20ee0:	cmp	sl, r2
   20ee4:	bne	20d84 <__assert_fail@plt+0xf0d8>
   20ee8:	b	20dac <__assert_fail@plt+0xf100>
   20eec:	ldr	r8, [sp, #24]
   20ef0:	b	20d84 <__assert_fail@plt+0xf0d8>
   20ef4:	ldr	r0, [r4, #4]
   20ef8:	lsl	r7, r6, #2
   20efc:	mov	r1, r7
   20f00:	bl	1bd04 <__assert_fail@plt+0xa058>
   20f04:	mov	r8, #0
   20f08:	cmp	r0, #0
   20f0c:	beq	20f4c <__assert_fail@plt+0xf2a0>
   20f10:	mov	r5, r0
   20f14:	ldr	r0, [r4, #8]
   20f18:	mov	r1, r7
   20f1c:	bl	1bd04 <__assert_fail@plt+0xa058>
   20f20:	cmp	r0, #0
   20f24:	beq	20f54 <__assert_fail@plt+0xf2a8>
   20f28:	str	r6, [r4]
   20f2c:	str	r5, [r4, #4]
   20f30:	str	r0, [r4, #8]
   20f34:	mov	r8, #1
   20f38:	cmp	sl, #1
   20f3c:	bge	20d74 <__assert_fail@plt+0xf0c8>
   20f40:	b	20d44 <__assert_fail@plt+0xf098>
   20f44:	ldr	r0, [r4, #4]
   20f48:	bl	1bba8 <__assert_fail@plt+0x9efc>
   20f4c:	ldr	r6, [sp, #36]	; 0x24
   20f50:	b	20ddc <__assert_fail@plt+0xf130>
   20f54:	mov	r0, r5
   20f58:	b	20f48 <__assert_fail@plt+0xf29c>
   20f5c:	push	{fp, lr}
   20f60:	mov	fp, sp
   20f64:	sub	sp, sp, #16
   20f68:	mov	ip, #0
   20f6c:	str	r2, [sp, #4]
   20f70:	str	ip, [sp, #12]
   20f74:	ldr	ip, [fp, #12]
   20f78:	str	ip, [sp, #8]
   20f7c:	ldr	ip, [fp, #8]
   20f80:	str	ip, [sp]
   20f84:	bl	20ad0 <__assert_fail@plt+0xee24>
   20f88:	mov	sp, fp
   20f8c:	pop	{fp, pc}
   20f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f94:	add	fp, sp, #28
   20f98:	sub	sp, sp, #20
   20f9c:	ldr	r4, [fp, #8]
   20fa0:	mov	r8, r1
   20fa4:	mov	r1, r0
   20fa8:	mov	r6, r2
   20fac:	orr	r0, r4, r2
   20fb0:	ldr	r2, [fp, #20]
   20fb4:	orr	r0, r0, r2
   20fb8:	cmp	r0, #0
   20fbc:	blt	2107c <__assert_fail@plt+0xf3d0>
   20fc0:	adds	sl, r6, r4
   20fc4:	bvs	2107c <__assert_fail@plt+0xf3d0>
   20fc8:	mov	r5, #0
   20fcc:	cmp	r4, #1
   20fd0:	blt	21028 <__assert_fail@plt+0xf37c>
   20fd4:	mov	r9, r3
   20fd8:	cmp	r6, #1
   20fdc:	blt	21030 <__assert_fail@plt+0xf384>
   20fe0:	mov	r0, sl
   20fe4:	mov	r5, r1
   20fe8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   20fec:	cmp	r0, #0
   20ff0:	beq	2107c <__assert_fail@plt+0xf3d0>
   20ff4:	mov	r1, r8
   20ff8:	mov	r2, r6
   20ffc:	mov	r7, r0
   21000:	bl	118ec <memcpy@plt>
   21004:	add	r0, r7, r6
   21008:	mov	r1, r9
   2100c:	mov	r2, r4
   21010:	bl	118ec <memcpy@plt>
   21014:	ldr	r2, [fp, #20]
   21018:	mov	r1, r5
   2101c:	mov	r4, r7
   21020:	mov	r5, #0
   21024:	b	21038 <__assert_fail@plt+0xf38c>
   21028:	mov	r7, r8
   2102c:	b	21034 <__assert_fail@plt+0xf388>
   21030:	mov	r7, r9
   21034:	mov	r4, #0
   21038:	ldr	r0, [fp, #16]
   2103c:	ldr	r3, [fp, #12]
   21040:	mov	r6, #1
   21044:	str	r2, [sp, #4]
   21048:	mov	r2, sl
   2104c:	str	r5, [sp]
   21050:	str	r6, [sp, #12]
   21054:	str	r0, [sp, #8]
   21058:	mov	r0, r1
   2105c:	mov	r1, r7
   21060:	bl	20ad0 <__assert_fail@plt+0xee24>
   21064:	mov	r5, r0
   21068:	mov	r0, r4
   2106c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21070:	mov	r0, r5
   21074:	sub	sp, fp, #28
   21078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2107c:	mvn	r0, #1
   21080:	sub	sp, fp, #28
   21084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2108c:	add	fp, sp, #28
   21090:	sub	sp, sp, #20
   21094:	ldr	r4, [fp, #8]
   21098:	mov	r8, r1
   2109c:	mov	r1, r0
   210a0:	mov	r6, r2
   210a4:	orr	r0, r4, r2
   210a8:	ldr	r2, [fp, #24]
   210ac:	orr	r0, r0, r2
   210b0:	cmp	r0, #0
   210b4:	blt	21174 <__assert_fail@plt+0xf4c8>
   210b8:	adds	sl, r6, r4
   210bc:	bvs	21174 <__assert_fail@plt+0xf4c8>
   210c0:	mov	r5, #0
   210c4:	cmp	r4, #1
   210c8:	blt	21120 <__assert_fail@plt+0xf474>
   210cc:	mov	r9, r3
   210d0:	cmp	r6, #1
   210d4:	blt	21128 <__assert_fail@plt+0xf47c>
   210d8:	mov	r0, sl
   210dc:	mov	r5, r1
   210e0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   210e4:	cmp	r0, #0
   210e8:	beq	21174 <__assert_fail@plt+0xf4c8>
   210ec:	mov	r1, r8
   210f0:	mov	r2, r6
   210f4:	mov	r7, r0
   210f8:	bl	118ec <memcpy@plt>
   210fc:	add	r0, r7, r6
   21100:	mov	r1, r9
   21104:	mov	r2, r4
   21108:	bl	118ec <memcpy@plt>
   2110c:	ldr	r2, [fp, #24]
   21110:	mov	r1, r5
   21114:	mov	r4, r7
   21118:	mov	r5, #0
   2111c:	b	21130 <__assert_fail@plt+0xf484>
   21120:	mov	r7, r8
   21124:	b	2112c <__assert_fail@plt+0xf480>
   21128:	mov	r7, r9
   2112c:	mov	r4, #0
   21130:	ldr	r0, [fp, #20]
   21134:	ldr	r6, [fp, #16]
   21138:	ldr	r3, [fp, #12]
   2113c:	str	r2, [sp, #4]
   21140:	mov	r2, sl
   21144:	str	r5, [sp, #12]
   21148:	str	r0, [sp, #8]
   2114c:	mov	r0, r1
   21150:	mov	r1, r7
   21154:	str	r6, [sp]
   21158:	bl	20ad0 <__assert_fail@plt+0xee24>
   2115c:	mov	r5, r0
   21160:	mov	r0, r4
   21164:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21168:	mov	r0, r5
   2116c:	sub	sp, fp, #28
   21170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21174:	mvn	r0, #1
   21178:	sub	sp, fp, #28
   2117c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21180:	ldrb	ip, [r0, #28]
   21184:	cmp	r2, #0
   21188:	bic	ip, ip, #6
   2118c:	orrne	ip, ip, #2
   21190:	strb	ip, [r0, #28]
   21194:	ldr	r0, [sp]
   21198:	moveq	r0, r2
   2119c:	cmp	r2, #0
   211a0:	moveq	r3, r2
   211a4:	stm	r1, {r2, r3}
   211a8:	str	r0, [r1, #8]
   211ac:	bx	lr
   211b0:	push	{r4, sl, fp, lr}
   211b4:	add	fp, sp, #8
   211b8:	mov	r4, r0
   211bc:	ldr	r0, [r0, #24]
   211c0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   211c4:	ldr	r0, [r4, #36]	; 0x24
   211c8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   211cc:	ldr	r0, [r4, #40]	; 0x28
   211d0:	add	r1, r4, #4
   211d4:	cmp	r0, r1
   211d8:	beq	211ec <__assert_fail@plt+0xf540>
   211dc:	ldr	r0, [r0, #8]
   211e0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   211e4:	ldr	r0, [r4, #40]	; 0x28
   211e8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   211ec:	ldr	r0, [r4, #12]
   211f0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   211f4:	ldr	r0, [r4, #48]	; 0x30
   211f8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   211fc:	ldr	r0, [r4, #44]	; 0x2c
   21200:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21204:	mov	r0, r4
   21208:	pop	{r4, sl, fp, lr}
   2120c:	b	1bba8 <__assert_fail@plt+0x9efc>
   21210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21214:	add	fp, sp, #28
   21218:	sub	sp, sp, #92	; 0x5c
   2121c:	mov	r9, r0
   21220:	ldrb	r0, [r0, #74]	; 0x4a
   21224:	ldr	r2, [r9, #36]	; 0x24
   21228:	ldr	r1, [r9, #48]	; 0x30
   2122c:	ldr	r4, [r9, #28]
   21230:	cmp	r2, r1
   21234:	movgt	r2, r1
   21238:	cmp	r0, #0
   2123c:	str	r2, [sp]
   21240:	bne	21260 <__assert_fail@plt+0xf5b4>
   21244:	mov	r7, r9
   21248:	ldr	r0, [r7, #64]!	; 0x40
   2124c:	cmp	r0, #0
   21250:	bne	21260 <__assert_fail@plt+0xf5b4>
   21254:	ldrb	r0, [r9, #76]	; 0x4c
   21258:	cmp	r0, #0
   2125c:	beq	21268 <__assert_fail@plt+0xf5bc>
   21260:	ldr	r6, [r9, #32]
   21264:	b	21444 <__assert_fail@plt+0xf798>
   21268:	ldr	r0, [sp]
   2126c:	cmp	r0, r4
   21270:	ble	21280 <__assert_fail@plt+0xf5d4>
   21274:	add	r8, r9, #16
   21278:	mov	sl, r4
   2127c:	b	212d8 <__assert_fail@plt+0xf62c>
   21280:	mov	sl, r4
   21284:	str	r4, [sp, #4]
   21288:	b	21554 <__assert_fail@plt+0xf8a8>
   2128c:	add	r0, r4, #1
   21290:	cmp	r0, #2
   21294:	bcc	212a8 <__assert_fail@plt+0xf5fc>
   21298:	ldr	r0, [r9, #36]	; 0x24
   2129c:	ldr	r1, [r9, #48]	; 0x30
   212a0:	cmp	r0, r1
   212a4:	blt	21430 <__assert_fail@plt+0xf784>
   212a8:	ldr	r0, [r9, #4]
   212ac:	ldr	r1, [sp, #4]
   212b0:	cmn	r4, #1
   212b4:	strb	sl, [r0, r1]
   212b8:	ldr	r0, [r9, #8]
   212bc:	str	sl, [r0, r1, lsl #2]
   212c0:	add	sl, r1, #1
   212c4:	bne	21410 <__assert_fail@plt+0xf764>
   212c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   212cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   212d0:	stm	r8, {r0, r1}
   212d4:	b	21410 <__assert_fail@plt+0xf764>
   212d8:	ldr	r5, [r9, #24]
   212dc:	ldr	r4, [r9]
   212e0:	str	sl, [sp, #4]
   212e4:	add	r0, r5, sl
   212e8:	ldrb	sl, [r4, r0]
   212ec:	tst	sl, #128	; 0x80
   212f0:	bne	21338 <__assert_fail@plt+0xf68c>
   212f4:	mov	r0, r8
   212f8:	bl	1191c <mbsinit@plt>
   212fc:	cmp	r0, #0
   21300:	beq	21338 <__assert_fail@plt+0xf68c>
   21304:	mov	r0, sl
   21308:	bl	11c4c <towupper@plt>
   2130c:	cmp	r0, #128	; 0x80
   21310:	bcs	21330 <__assert_fail@plt+0xf684>
   21314:	ldr	r2, [sp, #4]
   21318:	ldr	r1, [r9, #4]
   2131c:	strb	r0, [r1, r2]
   21320:	add	sl, r2, #1
   21324:	ldr	r1, [r9, #8]
   21328:	str	r0, [r1, r2, lsl #2]
   2132c:	b	21410 <__assert_fail@plt+0xf764>
   21330:	ldr	r4, [r9]
   21334:	ldr	r5, [r9, #24]
   21338:	ldm	r8, {r0, r1}
   2133c:	mov	r3, r8
   21340:	str	r1, [fp, #-36]	; 0xffffffdc
   21344:	str	r0, [fp, #-40]	; 0xffffffd8
   21348:	ldm	sp, {r0, r1}
   2134c:	sub	r2, r0, r1
   21350:	add	r0, r4, r5
   21354:	add	r1, r0, r1
   21358:	add	r0, sp, #12
   2135c:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   21360:	mov	r4, r0
   21364:	sub	r0, r0, #1
   21368:	cmn	r0, #4
   2136c:	bhi	2128c <__assert_fail@plt+0xf5e0>
   21370:	ldr	r0, [sp, #12]
   21374:	bl	11c4c <towupper@plt>
   21378:	mov	r5, r0
   2137c:	ldr	r0, [sp, #12]
   21380:	cmp	r5, r0
   21384:	bne	213a8 <__assert_fail@plt+0xf6fc>
   21388:	ldr	r1, [r9]
   2138c:	ldr	r2, [r9, #24]
   21390:	ldr	r0, [r9, #4]
   21394:	ldr	r6, [sp, #4]
   21398:	add	r1, r1, r2
   2139c:	add	r0, r0, r6
   213a0:	add	r1, r1, r6
   213a4:	b	213d4 <__assert_fail@plt+0xf728>
   213a8:	add	sl, sp, #16
   213ac:	mov	r1, r5
   213b0:	sub	r2, fp, #40	; 0x28
   213b4:	mov	r0, sl
   213b8:	bl	11844 <wcrtomb@plt>
   213bc:	cmp	r4, r0
   213c0:	bne	21424 <__assert_fail@plt+0xf778>
   213c4:	ldr	r0, [r9, #4]
   213c8:	ldr	r6, [sp, #4]
   213cc:	mov	r1, sl
   213d0:	add	r0, r0, r6
   213d4:	mov	r2, r4
   213d8:	bl	118ec <memcpy@plt>
   213dc:	ldr	r0, [r9, #8]
   213e0:	add	sl, r6, #1
   213e4:	str	r5, [r0, r6, lsl #2]
   213e8:	add	r5, r4, r6
   213ec:	cmp	sl, r5
   213f0:	bge	21410 <__assert_fail@plt+0xf764>
   213f4:	add	r0, r0, r6, lsl #2
   213f8:	mvn	r1, #3
   213fc:	add	r2, r1, r4, lsl #2
   21400:	add	r0, r0, #4
   21404:	mov	r1, #255	; 0xff
   21408:	bl	11b2c <memset@plt>
   2140c:	mov	sl, r5
   21410:	ldr	r0, [sp]
   21414:	str	sl, [sp, #4]
   21418:	cmp	r0, sl
   2141c:	bgt	212d8 <__assert_fail@plt+0xf62c>
   21420:	b	21554 <__assert_fail@plt+0xf8a8>
   21424:	ldr	r6, [sp, #4]
   21428:	mov	sl, r6
   2142c:	b	2145c <__assert_fail@plt+0xf7b0>
   21430:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21434:	ldr	r1, [fp, #-36]	; 0xffffffdc
   21438:	stm	r8, {r0, r1}
   2143c:	ldr	sl, [sp, #4]
   21440:	b	21554 <__assert_fail@plt+0xf8a8>
   21444:	ldr	r0, [sp]
   21448:	cmp	r4, r0
   2144c:	bge	2154c <__assert_fail@plt+0xf8a0>
   21450:	add	r7, r9, #64	; 0x40
   21454:	add	r8, r9, #16
   21458:	mov	sl, r4
   2145c:	ldm	r8, {r0, r1}
   21460:	str	r6, [sp, #4]
   21464:	str	r0, [fp, #-40]	; 0xffffffd8
   21468:	ldr	r0, [sp]
   2146c:	str	r1, [fp, #-36]	; 0xffffffdc
   21470:	sub	r2, r0, sl
   21474:	ldr	r0, [r7]
   21478:	cmp	r0, #0
   2147c:	bne	2156c <__assert_fail@plt+0xf8c0>
   21480:	ldr	r0, [r9]
   21484:	ldr	r1, [r9, #24]
   21488:	add	r0, r0, r1
   2148c:	add	r4, r0, r6
   21490:	add	r0, sp, #8
   21494:	mov	r1, r4
   21498:	mov	r3, r8
   2149c:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   214a0:	sub	r6, r0, #1
   214a4:	mov	r5, r0
   214a8:	cmn	r6, #4
   214ac:	bhi	215bc <__assert_fail@plt+0xf910>
   214b0:	ldr	r0, [sp, #8]
   214b4:	bl	11c4c <towupper@plt>
   214b8:	mov	r7, r0
   214bc:	ldr	r0, [sp, #8]
   214c0:	cmp	r7, r0
   214c4:	bne	214d4 <__assert_fail@plt+0xf828>
   214c8:	ldr	r0, [r9, #4]
   214cc:	mov	r1, r4
   214d0:	b	214f4 <__assert_fail@plt+0xf848>
   214d4:	add	r0, sp, #16
   214d8:	sub	r2, fp, #40	; 0x28
   214dc:	mov	r1, r7
   214e0:	bl	11844 <wcrtomb@plt>
   214e4:	cmp	r0, r5
   214e8:	bne	21638 <__assert_fail@plt+0xf98c>
   214ec:	ldr	r0, [r9, #4]
   214f0:	add	r1, sp, #16
   214f4:	add	r0, r0, sl
   214f8:	mov	r2, r5
   214fc:	bl	118ec <memcpy@plt>
   21500:	ldrb	r0, [r9, #76]	; 0x4c
   21504:	ldr	r6, [sp, #4]
   21508:	cmp	r0, #0
   2150c:	bne	216cc <__assert_fail@plt+0xfa20>
   21510:	ldr	r0, [r9, #8]
   21514:	add	r4, r5, sl
   21518:	add	r1, sl, #1
   2151c:	add	r6, r5, r6
   21520:	cmp	r1, r4
   21524:	str	r7, [r0, sl, lsl #2]
   21528:	bge	21544 <__assert_fail@plt+0xf898>
   2152c:	add	r0, r0, r1, lsl #2
   21530:	mvn	r1, #3
   21534:	add	r2, r1, r5, lsl #2
   21538:	mov	r1, #255	; 0xff
   2153c:	bl	11b2c <memset@plt>
   21540:	b	21444 <__assert_fail@plt+0xf798>
   21544:	mov	r4, r1
   21548:	b	21444 <__assert_fail@plt+0xf798>
   2154c:	str	r6, [sp, #4]
   21550:	mov	sl, r4
   21554:	ldr	r0, [sp, #4]
   21558:	str	sl, [r9, #28]
   2155c:	str	r0, [r9, #32]
   21560:	mov	r0, #0
   21564:	sub	sp, fp, #28
   21568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2156c:	cmp	r2, #1
   21570:	add	r4, sp, #16
   21574:	ldrge	r1, [r9, #80]	; 0x50
   21578:	cmpge	r1, #1
   2157c:	blt	21490 <__assert_fail@plt+0xf7e4>
   21580:	ldr	r7, [r9, #24]
   21584:	ldr	r3, [r9]
   21588:	add	r4, sp, #16
   2158c:	add	r7, r6, r7
   21590:	add	r3, r3, r7
   21594:	mov	r7, #0
   21598:	ldrb	r5, [r3, r7]
   2159c:	ldrb	r5, [r0, r5]
   215a0:	strb	r5, [r4, r7]
   215a4:	add	r7, r7, #1
   215a8:	cmp	r7, r2
   215ac:	bge	21490 <__assert_fail@plt+0xf7e4>
   215b0:	cmp	r7, r1
   215b4:	blt	21598 <__assert_fail@plt+0xf8ec>
   215b8:	b	21490 <__assert_fail@plt+0xf7e4>
   215bc:	add	r0, r5, #1
   215c0:	cmp	r0, #2
   215c4:	bcc	215d8 <__assert_fail@plt+0xf92c>
   215c8:	ldr	r0, [r9, #36]	; 0x24
   215cc:	ldr	r1, [r9, #48]	; 0x30
   215d0:	cmp	r0, r1
   215d4:	blt	21738 <__assert_fail@plt+0xfa8c>
   215d8:	ldr	r2, [r9, #24]
   215dc:	ldr	r6, [sp, #4]
   215e0:	ldr	r0, [r9]
   215e4:	ldr	r1, [r9, #64]	; 0x40
   215e8:	add	r4, sl, #1
   215ec:	add	r2, r2, r6
   215f0:	cmp	r1, #0
   215f4:	ldrb	r0, [r0, r2]
   215f8:	ldrbne	r0, [r1, r0]
   215fc:	ldr	r1, [r9, #4]
   21600:	strb	r0, [r1, sl]
   21604:	ldrb	r1, [r9, #76]	; 0x4c
   21608:	cmp	r1, #0
   2160c:	ldrne	r1, [r9, #12]
   21610:	strne	r6, [r1, sl, lsl #2]
   21614:	add	r6, r6, #1
   21618:	cmn	r5, #1
   2161c:	ldr	r1, [r9, #8]
   21620:	str	r0, [r1, sl, lsl #2]
   21624:	bne	21444 <__assert_fail@plt+0xf798>
   21628:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2162c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   21630:	stm	r8, {r0, r1}
   21634:	b	21444 <__assert_fail@plt+0xf798>
   21638:	mov	r3, r0
   2163c:	cmn	r0, #1
   21640:	beq	214c8 <__assert_fail@plt+0xf81c>
   21644:	ldr	r1, [r9, #36]	; 0x24
   21648:	add	r4, r3, sl
   2164c:	cmp	r4, r1
   21650:	bhi	21738 <__assert_fail@plt+0xfa8c>
   21654:	ldr	r0, [r9, #12]
   21658:	cmp	r0, #0
   2165c:	bne	2167c <__assert_fail@plt+0xf9d0>
   21660:	lsl	r0, r1, #2
   21664:	mov	r8, r3
   21668:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2166c:	mov	r3, r8
   21670:	cmp	r0, #0
   21674:	str	r0, [r9, #12]
   21678:	beq	21748 <__assert_fail@plt+0xfa9c>
   2167c:	ldrb	r1, [r9, #76]	; 0x4c
   21680:	cmp	r1, #0
   21684:	bne	2176c <__assert_fail@plt+0xfac0>
   21688:	cmp	sl, #0
   2168c:	beq	21764 <__assert_fail@plt+0xfab8>
   21690:	mov	r1, #0
   21694:	cmp	sl, #4
   21698:	bcc	21754 <__assert_fail@plt+0xfaa8>
   2169c:	add	r2, pc, #524	; 0x20c
   216a0:	bic	r1, sl, #3
   216a4:	vmov.i32	q8, #4	; 0x00000004
   216a8:	vld1.64	{d18-d19}, [r2 :128]
   216ac:	mov	ip, r1
   216b0:	mov	r2, r0
   216b4:	vadd.i32	q10, q9, q8
   216b8:	vst1.32	{d18-d19}, [r2]!
   216bc:	subs	ip, ip, #4
   216c0:	vorr	q9, q10, q10
   216c4:	bne	216b4 <__assert_fail@plt+0xfa08>
   216c8:	b	2175c <__assert_fail@plt+0xfab0>
   216cc:	ldr	r0, [r9, #12]
   216d0:	mov	r1, #0
   216d4:	cmp	r5, #4
   216d8:	bcc	21714 <__assert_fail@plt+0xfa68>
   216dc:	add	r3, pc, #460	; 0x1cc
   216e0:	bic	r1, r5, #3
   216e4:	add	r2, r0, sl, lsl #2
   216e8:	vdup.32	q8, r6
   216ec:	vmov.i32	q10, #4	; 0x00000004
   216f0:	vld1.64	{d18-d19}, [r3 :128]
   216f4:	mov	r3, r1
   216f8:	vadd.i32	q11, q9, q8
   216fc:	vadd.i32	q9, q9, q10
   21700:	subs	r3, r3, #4
   21704:	vst1.32	{d22-d23}, [r2]!
   21708:	bne	216f8 <__assert_fail@plt+0xfa4c>
   2170c:	cmp	r5, r1
   21710:	beq	21510 <__assert_fail@plt+0xf864>
   21714:	add	r2, r6, r1
   21718:	sub	r3, r5, r1
   2171c:	add	r1, sl, r1
   21720:	add	r0, r0, r1, lsl #2
   21724:	str	r2, [r0], #4
   21728:	add	r2, r2, #1
   2172c:	subs	r3, r3, #1
   21730:	bne	21724 <__assert_fail@plt+0xfa78>
   21734:	b	21510 <__assert_fail@plt+0xf864>
   21738:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2173c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   21740:	stm	r8, {r0, r1}
   21744:	b	21554 <__assert_fail@plt+0xf8a8>
   21748:	mov	r0, #12
   2174c:	sub	sp, fp, #28
   21750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21754:	str	r1, [r0, r1, lsl #2]
   21758:	add	r1, r1, #1
   2175c:	cmp	sl, r1
   21760:	bne	21754 <__assert_fail@plt+0xfaa8>
   21764:	mov	r0, #1
   21768:	strb	r0, [r9, #76]	; 0x4c
   2176c:	ldr	r0, [r9, #4]
   21770:	add	r1, sp, #16
   21774:	mov	r2, r3
   21778:	mov	r8, r3
   2177c:	add	r0, r0, sl
   21780:	bl	118ec <memcpy@plt>
   21784:	ldr	lr, [r9, #8]
   21788:	ldr	ip, [sp, #4]
   2178c:	cmp	r8, #2
   21790:	str	r7, [lr, sl, lsl #2]
   21794:	ldr	r2, [r9, #12]
   21798:	str	ip, [r2, sl, lsl #2]
   2179c:	bcc	21870 <__assert_fail@plt+0xfbc4>
   217a0:	sub	r0, r8, #1
   217a4:	mov	r1, #1
   217a8:	cmp	r0, #4
   217ac:	bcs	217b8 <__assert_fail@plt+0xfb0c>
   217b0:	ldr	ip, [sp, #4]
   217b4:	b	21840 <__assert_fail@plt+0xfb94>
   217b8:	str	r0, [sp]
   217bc:	add	r3, r8, sl
   217c0:	add	r0, sl, #1
   217c4:	add	r7, lr, r0, lsl #2
   217c8:	add	ip, lr, r3, lsl #2
   217cc:	add	r0, r2, r0, lsl #2
   217d0:	cmp	r0, ip
   217d4:	ldr	ip, [sp, #4]
   217d8:	addcc	r3, r2, r3, lsl #2
   217dc:	cmpcc	r7, r3
   217e0:	bcc	21840 <__assert_fail@plt+0xfb94>
   217e4:	add	r1, pc, #212	; 0xd4
   217e8:	vdup.32	q8, ip
   217ec:	vdup.32	q9, r6
   217f0:	vdup.32	q10, r5
   217f4:	vmov.i32	q12, #4	; 0x00000004
   217f8:	vmov.i8	q13, #255	; 0xff
   217fc:	vld1.64	{d22-d23}, [r1 :128]
   21800:	ldr	r1, [sp]
   21804:	bic	ip, r1, #3
   21808:	orr	r1, ip, #1
   2180c:	mov	r3, ip
   21810:	vcgt.u32	q14, q10, q11
   21814:	subs	r3, r3, #4
   21818:	vbsl	q14, q11, q9
   2181c:	vadd.i32	q11, q11, q12
   21820:	vadd.i32	q14, q14, q8
   21824:	vst1.32	{d28-d29}, [r0]!
   21828:	vst1.32	{d26-d27}, [r7]!
   2182c:	bne	21810 <__assert_fail@plt+0xfb64>
   21830:	ldr	r0, [sp]
   21834:	cmp	r0, ip
   21838:	ldr	ip, [sp, #4]
   2183c:	beq	21870 <__assert_fail@plt+0xfbc4>
   21840:	add	r2, r2, sl, lsl #2
   21844:	add	r0, lr, sl, lsl #2
   21848:	mvn	r3, #0
   2184c:	cmp	r1, r5
   21850:	mov	r7, r6
   21854:	movcc	r7, r1
   21858:	add	r7, r7, ip
   2185c:	str	r7, [r2, r1, lsl #2]
   21860:	str	r3, [r0, r1, lsl #2]
   21864:	add	r1, r1, #1
   21868:	cmp	r8, r1
   2186c:	bne	2184c <__assert_fail@plt+0xfba0>
   21870:	ldr	r0, [r9, #48]	; 0x30
   21874:	ldr	r2, [r9, #52]	; 0x34
   21878:	sub	r1, r8, r5
   2187c:	mov	r6, ip
   21880:	add	r6, r5, r6
   21884:	add	r0, r0, r1
   21888:	cmp	r2, ip
   2188c:	str	r0, [r9, #48]	; 0x30
   21890:	ldrgt	r2, [r9, #56]	; 0x38
   21894:	addgt	r1, r2, r1
   21898:	strgt	r1, [r9, #56]	; 0x38
   2189c:	ldr	r1, [r9, #36]	; 0x24
   218a0:	cmp	r1, r0
   218a4:	movgt	r1, r0
   218a8:	str	r1, [sp]
   218ac:	b	21444 <__assert_fail@plt+0xf798>
   218b0:	andeq	r0, r0, r0
   218b4:	andeq	r0, r0, r1
   218b8:	andeq	r0, r0, r2
   218bc:	andeq	r0, r0, r3
   218c0:	andeq	r0, r0, r1
   218c4:	andeq	r0, r0, r2
   218c8:	andeq	r0, r0, r3
   218cc:	andeq	r0, r0, r4
   218d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218d4:	add	fp, sp, #28
   218d8:	sub	sp, sp, #68	; 0x44
   218dc:	mov	r4, r0
   218e0:	ldr	r6, [r0, #28]
   218e4:	ldr	r7, [r0, #36]	; 0x24
   218e8:	ldr	r0, [r0, #48]	; 0x30
   218ec:	cmp	r7, r0
   218f0:	movgt	r7, r0
   218f4:	cmp	r7, r6
   218f8:	ble	21a94 <__assert_fail@plt+0xfde8>
   218fc:	add	r8, r4, #16
   21900:	mov	r5, sp
   21904:	ldm	r8, {r9, sl}
   21908:	ldr	r0, [r4, #64]	; 0x40
   2190c:	sub	r2, r7, r6
   21910:	cmp	r0, #0
   21914:	bne	219e4 <__assert_fail@plt+0xfd38>
   21918:	ldr	r0, [r4]
   2191c:	ldr	r1, [r4, #24]
   21920:	add	r0, r0, r1
   21924:	add	r1, r0, r6
   21928:	mov	r0, r5
   2192c:	mov	r3, r8
   21930:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   21934:	add	r1, r0, #1
   21938:	cmp	r1, #2
   2193c:	bcc	21958 <__assert_fail@plt+0xfcac>
   21940:	cmn	r0, #2
   21944:	bne	21994 <__assert_fail@plt+0xfce8>
   21948:	ldr	r0, [r4, #36]	; 0x24
   2194c:	ldr	r1, [r4, #48]	; 0x30
   21950:	cmp	r0, r1
   21954:	blt	21aa8 <__assert_fail@plt+0xfdfc>
   21958:	ldr	r1, [r4, #24]
   2195c:	ldr	r0, [r4]
   21960:	mov	r2, sl
   21964:	mov	sl, r5
   21968:	add	r1, r1, r6
   2196c:	ldrb	r1, [r0, r1]
   21970:	str	r1, [sp]
   21974:	ldr	r0, [r4, #64]	; 0x40
   21978:	cmp	r0, #0
   2197c:	ldrbne	r1, [r0, r1]
   21980:	mov	r0, #1
   21984:	strne	r1, [sp]
   21988:	str	r9, [r8]
   2198c:	str	r2, [r8, #4]
   21990:	b	2199c <__assert_fail@plt+0xfcf0>
   21994:	ldr	r1, [sp]
   21998:	mov	sl, r5
   2199c:	ldr	r3, [r4, #8]
   219a0:	add	r5, r0, r6
   219a4:	str	r1, [r3, r6, lsl #2]
   219a8:	add	r1, r6, #1
   219ac:	cmp	r1, r5
   219b0:	bge	219d0 <__assert_fail@plt+0xfd24>
   219b4:	mvn	r1, #3
   219b8:	add	r2, r1, r0, lsl #2
   219bc:	add	r0, r3, r6, lsl #2
   219c0:	mov	r1, #255	; 0xff
   219c4:	add	r0, r0, #4
   219c8:	bl	11b2c <memset@plt>
   219cc:	mov	r1, r5
   219d0:	cmp	r7, r1
   219d4:	mov	r6, r1
   219d8:	mov	r5, sl
   219dc:	bgt	21904 <__assert_fail@plt+0xfc58>
   219e0:	b	21a98 <__assert_fail@plt+0xfdec>
   219e4:	cmp	r2, #1
   219e8:	add	r1, sp, #4
   219ec:	blt	21928 <__assert_fail@plt+0xfc7c>
   219f0:	ldr	r1, [r4, #80]	; 0x50
   219f4:	cmp	r1, #1
   219f8:	add	r1, sp, #4
   219fc:	blt	21928 <__assert_fail@plt+0xfc7c>
   21a00:	ldm	r4, {r1, r3}
   21a04:	mov	lr, r5
   21a08:	ldr	r5, [r4, #24]
   21a0c:	cmp	r2, #2
   21a10:	add	r5, r6, r5
   21a14:	ldrb	r1, [r1, r5]
   21a18:	mov	r5, lr
   21a1c:	ldrb	r0, [r0, r1]
   21a20:	add	r1, sp, #4
   21a24:	strb	r0, [r3, r6]
   21a28:	strb	r0, [sp, #4]
   21a2c:	blt	21928 <__assert_fail@plt+0xfc7c>
   21a30:	ldr	r0, [r4, #80]	; 0x50
   21a34:	add	r1, sp, #4
   21a38:	cmp	r0, #2
   21a3c:	blt	21928 <__assert_fail@plt+0xfc7c>
   21a40:	mov	r0, #1
   21a44:	ldm	r4, {r1, ip}
   21a48:	ldr	r5, [r4, #24]
   21a4c:	ldr	r3, [r4, #64]	; 0x40
   21a50:	add	r1, r1, r5
   21a54:	add	r1, r1, r6
   21a58:	ldrb	r1, [r1, r0]
   21a5c:	ldrb	r1, [r3, r1]
   21a60:	add	r3, ip, r6
   21a64:	strb	r1, [r3, r0]
   21a68:	add	r3, sp, #4
   21a6c:	strb	r1, [r3, r0]
   21a70:	add	r0, r0, #1
   21a74:	cmp	r0, r2
   21a78:	bge	21a88 <__assert_fail@plt+0xfddc>
   21a7c:	ldr	r1, [r4, #80]	; 0x50
   21a80:	cmp	r0, r1
   21a84:	blt	21a44 <__assert_fail@plt+0xfd98>
   21a88:	add	r1, sp, #4
   21a8c:	mov	r5, lr
   21a90:	b	21928 <__assert_fail@plt+0xfc7c>
   21a94:	mov	r1, r6
   21a98:	str	r1, [r4, #28]
   21a9c:	str	r1, [r4, #32]
   21aa0:	sub	sp, fp, #28
   21aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21aa8:	stm	r8, {r9, sl}
   21aac:	mov	r1, r6
   21ab0:	str	r1, [r4, #28]
   21ab4:	str	r1, [r4, #32]
   21ab8:	sub	sp, fp, #28
   21abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ac4:	add	fp, sp, #28
   21ac8:	sub	sp, sp, #28
   21acc:	ldr	r8, [r1]
   21ad0:	mov	r7, r0
   21ad4:	ldr	r6, [fp, #12]
   21ad8:	mov	r5, r2
   21adc:	str	r1, [sp, #20]
   21ae0:	str	r3, [sp, #24]
   21ae4:	ldr	r0, [r8, #84]	; 0x54
   21ae8:	str	r6, [sp, #4]
   21aec:	str	r0, [sp, #16]
   21af0:	ldr	r0, [fp, #8]
   21af4:	str	r0, [sp]
   21af8:	mov	r0, r7
   21afc:	bl	22698 <__assert_fail@plt+0x109ec>
   21b00:	mov	r4, r0
   21b04:	cmp	r0, #0
   21b08:	bne	21b18 <__assert_fail@plt+0xfe6c>
   21b0c:	ldr	r0, [r6]
   21b10:	cmp	r0, #0
   21b14:	bne	21e3c <__assert_fail@plt+0x10190>
   21b18:	ldrb	r0, [r5, #4]
   21b1c:	cmp	r0, #10
   21b20:	movne	r0, r4
   21b24:	subne	sp, fp, #28
   21b28:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b2c:	ldr	r0, [sp, #24]
   21b30:	mov	r9, #0
   21b34:	orr	sl, r0, #8388608	; 0x800000
   21b38:	ldr	r0, [fp, #8]
   21b3c:	str	sl, [sp, #12]
   21b40:	cmp	r0, #0
   21b44:	bne	21be8 <__assert_fail@plt+0xff3c>
   21b48:	b	21ca0 <__assert_fail@plt+0xfff4>
   21b4c:	cmp	r0, #9
   21b50:	mov	r6, #0
   21b54:	beq	21c18 <__assert_fail@plt+0xff6c>
   21b58:	ldr	r0, [sp, #16]
   21b5c:	ldr	sl, [r8, #84]	; 0x54
   21b60:	ldr	r1, [sp, #20]
   21b64:	ldr	r3, [sp, #24]
   21b68:	mov	r2, r5
   21b6c:	str	r0, [r8, #84]	; 0x54
   21b70:	ldr	r0, [fp, #8]
   21b74:	str	r0, [sp]
   21b78:	ldr	r0, [fp, #12]
   21b7c:	str	r0, [sp, #4]
   21b80:	mov	r0, r7
   21b84:	bl	22698 <__assert_fail@plt+0x109ec>
   21b88:	mov	r6, r0
   21b8c:	cmp	r0, #0
   21b90:	bne	21ba4 <__assert_fail@plt+0xfef8>
   21b94:	ldr	r0, [fp, #12]
   21b98:	ldr	r0, [r0]
   21b9c:	cmp	r0, #0
   21ba0:	bne	21d8c <__assert_fail@plt+0x100e0>
   21ba4:	ldr	r0, [r8, #84]	; 0x54
   21ba8:	orr	r0, r0, sl
   21bac:	ldr	sl, [sp, #12]
   21bb0:	str	r0, [r8, #84]	; 0x54
   21bb4:	ldr	r1, [r8, #64]	; 0x40
   21bb8:	cmp	r1, #31
   21bbc:	bne	21c24 <__assert_fail@plt+0xff78>
   21bc0:	mov	r0, #996	; 0x3e4
   21bc4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   21bc8:	cmp	r0, #0
   21bcc:	beq	21e30 <__assert_fail@plt+0x10184>
   21bd0:	ldr	r1, [r8, #56]	; 0x38
   21bd4:	str	r1, [r0]
   21bd8:	mov	r1, #0
   21bdc:	str	r1, [r8, #64]	; 0x40
   21be0:	str	r0, [r8, #56]	; 0x38
   21be4:	b	21c28 <__assert_fail@plt+0xff7c>
   21be8:	mov	r0, r5
   21bec:	mov	r1, r7
   21bf0:	mov	r2, sl
   21bf4:	bl	21e48 <__assert_fail@plt+0x1019c>
   21bf8:	ldr	r1, [r7, #40]	; 0x28
   21bfc:	mov	r6, #0
   21c00:	add	r0, r1, r0
   21c04:	str	r0, [r7, #40]	; 0x28
   21c08:	ldrb	r0, [r5, #4]
   21c0c:	orr	r1, r0, #8
   21c10:	cmp	r1, #10
   21c14:	bne	21b4c <__assert_fail@plt+0xfea0>
   21c18:	ldr	r1, [r8, #64]	; 0x40
   21c1c:	cmp	r1, #31
   21c20:	beq	21bc0 <__assert_fail@plt+0xff14>
   21c24:	ldr	r0, [r8, #56]	; 0x38
   21c28:	add	r2, r1, #1
   21c2c:	add	r0, r0, r1, lsl #5
   21c30:	mov	r1, #10
   21c34:	cmp	r4, #0
   21c38:	str	r2, [r8, #64]	; 0x40
   21c3c:	str	r9, [r0, #4]!
   21c40:	stmib	r0, {r4, r6, r9}
   21c44:	str	r9, [r0, #16]
   21c48:	str	r9, [r0, #20]
   21c4c:	str	r1, [r0, #24]
   21c50:	mvn	r1, #0
   21c54:	str	r1, [r0, #28]
   21c58:	strne	r0, [r4]
   21c5c:	cmp	r6, #0
   21c60:	mov	r4, r0
   21c64:	strne	r0, [r6]
   21c68:	ldrb	r1, [r5, #4]
   21c6c:	cmp	r1, #10
   21c70:	beq	21be8 <__assert_fail@plt+0xff3c>
   21c74:	b	21d84 <__assert_fail@plt+0x100d8>
   21c78:	mov	r0, #996	; 0x3e4
   21c7c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   21c80:	cmp	r0, #0
   21c84:	beq	21e30 <__assert_fail@plt+0x10184>
   21c88:	ldr	r1, [r8, #56]	; 0x38
   21c8c:	str	r1, [r0]
   21c90:	mov	r1, #0
   21c94:	str	r1, [r8, #64]	; 0x40
   21c98:	str	r0, [r8, #56]	; 0x38
   21c9c:	b	21d38 <__assert_fail@plt+0x1008c>
   21ca0:	mov	r0, r5
   21ca4:	mov	r1, r7
   21ca8:	mov	r2, sl
   21cac:	bl	21e48 <__assert_fail@plt+0x1019c>
   21cb0:	ldr	r1, [r7, #40]	; 0x28
   21cb4:	mov	r6, #0
   21cb8:	add	r0, r1, r0
   21cbc:	str	r0, [r7, #40]	; 0x28
   21cc0:	ldrb	r0, [r5, #4]
   21cc4:	orr	r0, r0, #8
   21cc8:	cmp	r0, #10
   21ccc:	beq	21d28 <__assert_fail@plt+0x1007c>
   21cd0:	ldr	r0, [sp, #16]
   21cd4:	ldr	sl, [r8, #84]	; 0x54
   21cd8:	ldr	r1, [sp, #20]
   21cdc:	ldr	r3, [sp, #24]
   21ce0:	mov	r2, r5
   21ce4:	str	r0, [r8, #84]	; 0x54
   21ce8:	ldr	r0, [fp, #12]
   21cec:	str	r9, [sp]
   21cf0:	str	r0, [sp, #4]
   21cf4:	mov	r0, r7
   21cf8:	bl	22698 <__assert_fail@plt+0x109ec>
   21cfc:	mov	r6, r0
   21d00:	cmp	r0, #0
   21d04:	bne	21d18 <__assert_fail@plt+0x1006c>
   21d08:	ldr	r0, [fp, #12]
   21d0c:	ldr	r0, [r0]
   21d10:	cmp	r0, #0
   21d14:	bne	21d8c <__assert_fail@plt+0x100e0>
   21d18:	ldr	r0, [r8, #84]	; 0x54
   21d1c:	orr	r0, r0, sl
   21d20:	ldr	sl, [sp, #12]
   21d24:	str	r0, [r8, #84]	; 0x54
   21d28:	ldr	r1, [r8, #64]	; 0x40
   21d2c:	cmp	r1, #31
   21d30:	beq	21c78 <__assert_fail@plt+0xffcc>
   21d34:	ldr	r0, [r8, #56]	; 0x38
   21d38:	add	r2, r1, #1
   21d3c:	add	r0, r0, r1, lsl #5
   21d40:	mov	r1, #10
   21d44:	cmp	r4, #0
   21d48:	str	r2, [r8, #64]	; 0x40
   21d4c:	str	r9, [r0, #4]!
   21d50:	stmib	r0, {r4, r6, r9}
   21d54:	str	r9, [r0, #16]
   21d58:	str	r9, [r0, #20]
   21d5c:	str	r1, [r0, #24]
   21d60:	mvn	r1, #0
   21d64:	str	r1, [r0, #28]
   21d68:	strne	r0, [r4]
   21d6c:	cmp	r6, #0
   21d70:	mov	r4, r0
   21d74:	strne	r0, [r6]
   21d78:	ldrb	r1, [r5, #4]
   21d7c:	cmp	r1, #10
   21d80:	beq	21ca0 <__assert_fail@plt+0xfff4>
   21d84:	sub	sp, fp, #28
   21d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d8c:	cmp	r4, #0
   21d90:	beq	21e3c <__assert_fail@plt+0x10190>
   21d94:	movw	r5, #255	; 0xff
   21d98:	movt	r5, #4
   21d9c:	mov	r6, r4
   21da0:	ldr	r4, [r4, #4]
   21da4:	cmp	r4, #0
   21da8:	bne	21d9c <__assert_fail@plt+0x100f0>
   21dac:	ldr	r4, [r6, #8]
   21db0:	cmp	r4, #0
   21db4:	bne	21d9c <__assert_fail@plt+0x100f0>
   21db8:	ldr	r0, [r6, #24]
   21dbc:	and	r0, r0, r5
   21dc0:	cmp	r0, #3
   21dc4:	beq	21dfc <__assert_fail@plt+0x10150>
   21dc8:	cmp	r0, #6
   21dcc:	bne	21e04 <__assert_fail@plt+0x10158>
   21dd0:	ldr	r4, [r6, #20]
   21dd4:	ldr	r0, [r4]
   21dd8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21ddc:	ldr	r0, [r4, #4]
   21de0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21de4:	ldr	r0, [r4, #8]
   21de8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21dec:	ldr	r0, [r4, #12]
   21df0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21df4:	mov	r0, r4
   21df8:	b	21e00 <__assert_fail@plt+0x10154>
   21dfc:	ldr	r0, [r6, #20]
   21e00:	bl	1bba8 <__assert_fail@plt+0x9efc>
   21e04:	ldr	r0, [r6]
   21e08:	cmp	r0, #0
   21e0c:	beq	21e3c <__assert_fail@plt+0x10190>
   21e10:	ldr	r4, [r0, #8]
   21e14:	cmp	r4, r6
   21e18:	mov	r6, r0
   21e1c:	beq	21db8 <__assert_fail@plt+0x1010c>
   21e20:	cmp	r4, #0
   21e24:	mov	r6, r0
   21e28:	beq	21db8 <__assert_fail@plt+0x1010c>
   21e2c:	b	21d9c <__assert_fail@plt+0x100f0>
   21e30:	ldr	r1, [fp, #12]
   21e34:	mov	r0, #12
   21e38:	str	r0, [r1]
   21e3c:	mov	r0, #0
   21e40:	sub	sp, fp, #28
   21e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21e4c:	add	fp, sp, #24
   21e50:	sub	sp, sp, #8
   21e54:	mov	r9, r0
   21e58:	mov	r7, r1
   21e5c:	ldr	r0, [r1, #40]	; 0x28
   21e60:	ldr	r1, [r1, #56]	; 0x38
   21e64:	cmp	r1, r0
   21e68:	ble	21f50 <__assert_fail@plt+0x102a4>
   21e6c:	ldr	r1, [r7, #4]
   21e70:	mov	r5, r9
   21e74:	mov	r8, r2
   21e78:	ldrb	r6, [r1, r0]
   21e7c:	strb	r6, [r5], #4
   21e80:	ldr	r0, [r5]
   21e84:	bic	r1, r0, #6291456	; 0x600000
   21e88:	str	r1, [r5]
   21e8c:	ldr	r3, [r7, #80]	; 0x50
   21e90:	cmp	r3, #2
   21e94:	blt	21eb8 <__assert_fail@plt+0x1020c>
   21e98:	ldr	r2, [r7, #28]
   21e9c:	ldr	r1, [r7, #40]	; 0x28
   21ea0:	cmp	r1, r2
   21ea4:	beq	21eb8 <__assert_fail@plt+0x1020c>
   21ea8:	ldr	r2, [r7, #8]
   21eac:	ldr	r1, [r2, r1, lsl #2]
   21eb0:	cmn	r1, #1
   21eb4:	beq	22394 <__assert_fail@plt+0x106e8>
   21eb8:	movw	r1, #65280	; 0xff00
   21ebc:	cmp	r6, #92	; 0x5c
   21ec0:	movt	r1, #65439	; 0xff9f
   21ec4:	bne	21f68 <__assert_fail@plt+0x102bc>
   21ec8:	ldr	r6, [r7, #40]	; 0x28
   21ecc:	ldr	r4, [r7, #48]	; 0x30
   21ed0:	add	r2, r6, #1
   21ed4:	cmp	r2, r4
   21ed8:	bge	21fbc <__assert_fail@plt+0x10310>
   21edc:	ldrb	r4, [r7, #75]	; 0x4b
   21ee0:	cmp	r4, #0
   21ee4:	bne	22628 <__assert_fail@plt+0x1097c>
   21ee8:	ldr	r3, [r7, #4]
   21eec:	ldrb	r6, [r3, r2]
   21ef0:	and	r0, r0, r1
   21ef4:	strb	r6, [r9]
   21ef8:	orr	r4, r0, #1
   21efc:	str	r4, [r9, #4]
   21f00:	ldr	r0, [r7, #80]	; 0x50
   21f04:	cmp	r0, #2
   21f08:	blt	221e0 <__assert_fail@plt+0x10534>
   21f0c:	ldr	r0, [r7, #8]
   21f10:	ldr	r1, [r7, #40]	; 0x28
   21f14:	add	r0, r0, r1, lsl #2
   21f18:	ldr	r4, [r0, #4]
   21f1c:	mov	r0, r4
   21f20:	bl	11afc <iswalnum@plt>
   21f24:	sub	r1, r4, #95	; 0x5f
   21f28:	cmp	r0, #0
   21f2c:	clz	r1, r1
   21f30:	movwne	r0, #1
   21f34:	lsr	r1, r1, #5
   21f38:	orr	r0, r1, r0
   21f3c:	ldr	r1, [r5]
   21f40:	bic	r1, r1, #4194304	; 0x400000
   21f44:	orr	r0, r1, r0, lsl #22
   21f48:	uxtb	r1, r6
   21f4c:	b	22204 <__assert_fail@plt+0x10558>
   21f50:	mov	r0, #2
   21f54:	mov	r4, #0
   21f58:	strb	r0, [r9, #4]
   21f5c:	mov	r0, r4
   21f60:	sub	sp, fp, #24
   21f64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21f68:	and	r0, r0, r1
   21f6c:	orr	r4, r0, #1
   21f70:	str	r4, [r5]
   21f74:	ldr	r0, [r7, #80]	; 0x50
   21f78:	cmp	r0, #2
   21f7c:	blt	21fc8 <__assert_fail@plt+0x1031c>
   21f80:	ldr	r0, [r7, #8]
   21f84:	ldr	r1, [r7, #40]	; 0x28
   21f88:	ldr	r4, [r0, r1, lsl #2]
   21f8c:	mov	r0, r4
   21f90:	bl	11afc <iswalnum@plt>
   21f94:	sub	r1, r4, #95	; 0x5f
   21f98:	cmp	r0, #0
   21f9c:	clz	r1, r1
   21fa0:	movwne	r0, #1
   21fa4:	lsr	r1, r1, #5
   21fa8:	orr	r0, r1, r0
   21fac:	ldr	r1, [r5]
   21fb0:	bic	r1, r1, #4194304	; 0x400000
   21fb4:	orr	r0, r1, r0, lsl #22
   21fb8:	b	21fe8 <__assert_fail@plt+0x1033c>
   21fbc:	and	r0, r0, r1
   21fc0:	orr	r0, r0, #36	; 0x24
   21fc4:	b	223a8 <__assert_fail@plt+0x106fc>
   21fc8:	bl	11a90 <__ctype_b_loc@plt>
   21fcc:	ldr	r0, [r0]
   21fd0:	cmp	r6, #95	; 0x5f
   21fd4:	add	r0, r0, r6, lsl #1
   21fd8:	ldrh	r0, [r0]
   21fdc:	ubfx	r0, r0, #3, #1
   21fe0:	movweq	r0, #1
   21fe4:	orr	r0, r4, r0, lsl #22
   21fe8:	sub	r1, r6, #10
   21fec:	mov	r4, #1
   21ff0:	str	r0, [r5]
   21ff4:	cmp	r1, #115	; 0x73
   21ff8:	bhi	2261c <__assert_fail@plt+0x10970>
   21ffc:	add	r2, pc, #0
   22000:	ldr	pc, [r2, r1, lsl #2]
   22004:	ldrdeq	r2, [r2], -r4
   22008:	andeq	r2, r2, ip, lsl r6
   2200c:	andeq	r2, r2, ip, lsl r6
   22010:	andeq	r2, r2, ip, lsl r6
   22014:	andeq	r2, r2, ip, lsl r6
   22018:	andeq	r2, r2, ip, lsl r6
   2201c:	andeq	r2, r2, ip, lsl r6
   22020:	andeq	r2, r2, ip, lsl r6
   22024:	andeq	r2, r2, ip, lsl r6
   22028:	andeq	r2, r2, ip, lsl r6
   2202c:	andeq	r2, r2, ip, lsl r6
   22030:	andeq	r2, r2, ip, lsl r6
   22034:	andeq	r2, r2, ip, lsl r6
   22038:	andeq	r2, r2, ip, lsl r6
   2203c:	andeq	r2, r2, ip, lsl r6
   22040:	andeq	r2, r2, ip, lsl r6
   22044:	andeq	r2, r2, ip, lsl r6
   22048:	andeq	r2, r2, ip, lsl r6
   2204c:	andeq	r2, r2, ip, lsl r6
   22050:	andeq	r2, r2, ip, lsl r6
   22054:	andeq	r2, r2, ip, lsl r6
   22058:	andeq	r2, r2, ip, lsl r6
   2205c:	andeq	r2, r2, ip, lsl r6
   22060:	andeq	r2, r2, ip, lsl r6
   22064:	andeq	r2, r2, ip, lsl r6
   22068:	andeq	r2, r2, ip, lsl r6
   2206c:			; <UNDEFINED> instruction: 0x000223bc
   22070:	andeq	r2, r2, ip, lsl r6
   22074:	andeq	r2, r2, ip, lsl r6
   22078:	andeq	r2, r2, ip, lsl r6
   2207c:	andeq	r2, r2, r4, lsl r4
   22080:	andeq	r2, r2, r0, lsr #8
   22084:	andeq	r2, r2, ip, lsr #8
   22088:	andeq	r2, r2, r4, lsr r4
   2208c:	andeq	r2, r2, ip, lsl r6
   22090:	andeq	r2, r2, ip, lsl r6
   22094:	andeq	r2, r2, r4, asr #8
   22098:	andeq	r2, r2, ip, lsl r6
   2209c:	andeq	r2, r2, ip, lsl r6
   220a0:	andeq	r2, r2, ip, lsl r6
   220a4:	andeq	r2, r2, ip, lsl r6
   220a8:	andeq	r2, r2, ip, lsl r6
   220ac:	andeq	r2, r2, ip, lsl r6
   220b0:	andeq	r2, r2, ip, lsl r6
   220b4:	andeq	r2, r2, ip, lsl r6
   220b8:	andeq	r2, r2, ip, lsl r6
   220bc:	andeq	r2, r2, ip, lsl r6
   220c0:	andeq	r2, r2, ip, lsl r6
   220c4:	andeq	r2, r2, ip, lsl r6
   220c8:	andeq	r2, r2, ip, lsl r6
   220cc:	andeq	r2, r2, ip, lsl r6
   220d0:	andeq	r2, r2, ip, lsl r6
   220d4:	andeq	r2, r2, ip, lsl r6
   220d8:	andeq	r2, r2, ip, asr #8
   220dc:	andeq	r2, r2, ip, lsl r6
   220e0:	andeq	r2, r2, ip, lsl r6
   220e4:	andeq	r2, r2, ip, lsl r6
   220e8:	andeq	r2, r2, ip, lsl r6
   220ec:	andeq	r2, r2, ip, lsl r6
   220f0:	andeq	r2, r2, ip, lsl r6
   220f4:	andeq	r2, r2, ip, lsl r6
   220f8:	andeq	r2, r2, ip, lsl r6
   220fc:	andeq	r2, r2, ip, lsl r6
   22100:	andeq	r2, r2, ip, lsl r6
   22104:	andeq	r2, r2, ip, lsl r6
   22108:	andeq	r2, r2, ip, lsl r6
   2210c:	andeq	r2, r2, ip, lsl r6
   22110:	andeq	r2, r2, ip, lsl r6
   22114:	andeq	r2, r2, ip, lsl r6
   22118:	andeq	r2, r2, ip, lsl r6
   2211c:	andeq	r2, r2, ip, lsl r6
   22120:	andeq	r2, r2, ip, lsl r6
   22124:	andeq	r2, r2, ip, lsl r6
   22128:	andeq	r2, r2, ip, lsl r6
   2212c:	andeq	r2, r2, ip, lsl r6
   22130:	andeq	r2, r2, ip, lsl r6
   22134:	andeq	r2, r2, ip, lsl r6
   22138:	andeq	r2, r2, ip, lsl r6
   2213c:	andeq	r2, r2, ip, lsl r6
   22140:	andeq	r2, r2, ip, lsl r6
   22144:	andeq	r2, r2, ip, lsl r6
   22148:	andeq	r2, r2, ip, asr r4
   2214c:	andeq	r2, r2, ip, lsl r6
   22150:	andeq	r2, r2, ip, lsl r6
   22154:	andeq	r2, r2, r4, ror #8
   22158:	andeq	r2, r2, ip, lsl r6
   2215c:	andeq	r2, r2, ip, lsl r6
   22160:	andeq	r2, r2, ip, lsl r6
   22164:	andeq	r2, r2, ip, lsl r6
   22168:	andeq	r2, r2, ip, lsl r6
   2216c:	andeq	r2, r2, ip, lsl r6
   22170:	andeq	r2, r2, ip, lsl r6
   22174:	andeq	r2, r2, ip, lsl r6
   22178:	andeq	r2, r2, ip, lsl r6
   2217c:	andeq	r2, r2, ip, lsl r6
   22180:	andeq	r2, r2, ip, lsl r6
   22184:	andeq	r2, r2, ip, lsl r6
   22188:	andeq	r2, r2, ip, lsl r6
   2218c:	andeq	r2, r2, ip, lsl r6
   22190:	andeq	r2, r2, ip, lsl r6
   22194:	andeq	r2, r2, ip, lsl r6
   22198:	andeq	r2, r2, ip, lsl r6
   2219c:	andeq	r2, r2, ip, lsl r6
   221a0:	andeq	r2, r2, ip, lsl r6
   221a4:	andeq	r2, r2, ip, lsl r6
   221a8:	andeq	r2, r2, ip, lsl r6
   221ac:	andeq	r2, r2, ip, lsl r6
   221b0:	andeq	r2, r2, ip, lsl r6
   221b4:	andeq	r2, r2, ip, lsl r6
   221b8:	andeq	r2, r2, ip, lsl r6
   221bc:	andeq	r2, r2, ip, lsl r6
   221c0:	andeq	r2, r2, ip, lsl r6
   221c4:	andeq	r2, r2, ip, lsl r6
   221c8:	muleq	r2, r4, r4
   221cc:	andeq	r2, r2, r4, lsr #9
   221d0:			; <UNDEFINED> instruction: 0x000224b8
   221d4:	tst	r8, #2048	; 0x800
   221d8:	bne	224b0 <__assert_fail@plt+0x10804>
   221dc:	b	2261c <__assert_fail@plt+0x10970>
   221e0:	bl	11a90 <__ctype_b_loc@plt>
   221e4:	ldr	r0, [r0]
   221e8:	uxtb	r1, r6
   221ec:	cmp	r1, #95	; 0x5f
   221f0:	add	r0, r0, r1, lsl #1
   221f4:	ldrh	r0, [r0]
   221f8:	ubfx	r0, r0, #3, #1
   221fc:	movweq	r0, #1
   22200:	orr	r0, r4, r0, lsl #22
   22204:	mvn	r2, #38	; 0x26
   22208:	mov	r4, #2
   2220c:	str	r0, [r5]
   22210:	uxtab	r2, r2, r6
   22214:	cmp	r2, #86	; 0x56
   22218:	bhi	2261c <__assert_fail@plt+0x10970>
   2221c:	add	r3, pc, #0
   22220:	ldr	pc, [r3, r2, lsl #2]
   22224:	strdeq	r2, [r2], -r4
   22228:	andeq	r2, r2, r4, lsl #10
   2222c:	andeq	r2, r2, r4, lsl r5
   22230:	andeq	r2, r2, ip, lsl r6
   22234:	andeq	r2, r2, r4, lsr #10
   22238:	andeq	r2, r2, ip, lsl r6
   2223c:	andeq	r2, r2, ip, lsl r6
   22240:	andeq	r2, r2, ip, lsl r6
   22244:	andeq	r2, r2, ip, lsl r6
   22248:	andeq	r2, r2, ip, lsl r6
   2224c:	andeq	r2, r2, r0, lsl #7
   22250:	andeq	r2, r2, r0, lsl #7
   22254:	andeq	r2, r2, r0, lsl #7
   22258:	andeq	r2, r2, r0, lsl #7
   2225c:	andeq	r2, r2, r0, lsl #7
   22260:	andeq	r2, r2, r0, lsl #7
   22264:	andeq	r2, r2, r0, lsl #7
   22268:	andeq	r2, r2, r0, lsl #7
   2226c:	andeq	r2, r2, r0, lsl #7
   22270:	andeq	r2, r2, ip, lsl r6
   22274:	andeq	r2, r2, ip, lsl r6
   22278:	andeq	r2, r2, ip, lsr r5
   2227c:	andeq	r2, r2, ip, lsl r6
   22280:	andeq	r2, r2, ip, asr #10
   22284:	andeq	r2, r2, ip, asr r5
   22288:	andeq	r2, r2, ip, lsl r6
   2228c:	andeq	r2, r2, ip, lsl r6
   22290:	andeq	r2, r2, r4, ror r5
   22294:	andeq	r2, r2, ip, lsl r6
   22298:	andeq	r2, r2, ip, lsl r6
   2229c:	andeq	r2, r2, ip, lsl r6
   222a0:	andeq	r2, r2, ip, lsl r6
   222a4:	andeq	r2, r2, ip, lsl r6
   222a8:	andeq	r2, r2, ip, lsl r6
   222ac:	andeq	r2, r2, ip, lsl r6
   222b0:	andeq	r2, r2, ip, lsl r6
   222b4:	andeq	r2, r2, ip, lsl r6
   222b8:	andeq	r2, r2, ip, lsl r6
   222bc:	andeq	r2, r2, ip, lsl r6
   222c0:	andeq	r2, r2, ip, lsl r6
   222c4:	andeq	r2, r2, ip, lsl r6
   222c8:	andeq	r2, r2, ip, lsl r6
   222cc:	andeq	r2, r2, ip, lsl r6
   222d0:	andeq	r2, r2, ip, lsl r6
   222d4:	andeq	r2, r2, r4, lsl #11
   222d8:	andeq	r2, r2, ip, lsl r6
   222dc:	andeq	r2, r2, ip, lsl r6
   222e0:	andeq	r2, r2, ip, lsl r6
   222e4:	muleq	r2, r4, r5
   222e8:	andeq	r2, r2, ip, lsl r6
   222ec:	andeq	r2, r2, ip, lsl r6
   222f0:	andeq	r2, r2, ip, lsl r6
   222f4:	andeq	r2, r2, ip, lsl r6
   222f8:	andeq	r2, r2, ip, lsl r6
   222fc:	andeq	r2, r2, ip, lsl r6
   22300:	andeq	r2, r2, ip, lsl r6
   22304:	andeq	r2, r2, ip, lsl r6
   22308:	andeq	r2, r2, r4, lsr #11
   2230c:	andeq	r2, r2, ip, lsl r6
   22310:			; <UNDEFINED> instruction: 0x000225b4
   22314:	andeq	r2, r2, ip, lsl r6
   22318:	andeq	r2, r2, ip, lsl r6
   2231c:	andeq	r2, r2, ip, lsl r6
   22320:	andeq	r2, r2, ip, lsl r6
   22324:	andeq	r2, r2, ip, lsl r6
   22328:	andeq	r2, r2, ip, lsl r6
   2232c:	andeq	r2, r2, ip, lsl r6
   22330:	andeq	r2, r2, ip, lsl r6
   22334:	andeq	r2, r2, ip, lsl r6
   22338:	andeq	r2, r2, ip, lsl r6
   2233c:	andeq	r2, r2, ip, lsl r6
   22340:	andeq	r2, r2, ip, lsl r6
   22344:	andeq	r2, r2, ip, lsl r6
   22348:	andeq	r2, r2, ip, lsl r6
   2234c:	andeq	r2, r2, ip, lsl r6
   22350:	andeq	r2, r2, ip, lsl r6
   22354:	andeq	r2, r2, r4, asr #11
   22358:	andeq	r2, r2, ip, lsl r6
   2235c:	andeq	r2, r2, ip, lsl r6
   22360:	andeq	r2, r2, ip, lsl r6
   22364:	ldrdeq	r2, [r2], -r4
   22368:	andeq	r2, r2, ip, lsl r6
   2236c:	andeq	r2, r2, ip, lsl r6
   22370:	andeq	r2, r2, ip, lsl r6
   22374:	andeq	r2, r2, r4, ror #11
   22378:	strdeq	r2, [r2], -r8
   2237c:	andeq	r2, r2, r4, lsl #12
   22380:	tst	r8, #16384	; 0x4000
   22384:	bne	2261c <__assert_fail@plt+0x10970>
   22388:	sub	r1, r1, #49	; 0x31
   2238c:	mov	r2, #4
   22390:	b	2247c <__assert_fail@plt+0x107d0>
   22394:	movw	r1, #65280	; 0xff00
   22398:	movt	r1, #65439	; 0xff9f
   2239c:	and	r0, r0, r1
   223a0:	orr	r0, r0, #1
   223a4:	orr	r0, r0, #2097152	; 0x200000
   223a8:	str	r0, [r5]
   223ac:	mov	r4, #1
   223b0:	mov	r0, r4
   223b4:	sub	sp, fp, #24
   223b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   223bc:	tst	r8, #8
   223c0:	bne	2240c <__assert_fail@plt+0x10760>
   223c4:	ldr	r1, [r7, #40]	; 0x28
   223c8:	ldr	r2, [r7, #48]	; 0x30
   223cc:	add	r1, r1, #1
   223d0:	cmp	r1, r2
   223d4:	beq	2240c <__assert_fail@plt+0x10760>
   223d8:	str	r1, [r7, #40]	; 0x28
   223dc:	mov	r0, sp
   223e0:	mov	r1, r7
   223e4:	mov	r2, r8
   223e8:	bl	21e48 <__assert_fail@plt+0x1019c>
   223ec:	ldr	r0, [r7, #40]	; 0x28
   223f0:	sub	r0, r0, #1
   223f4:	str	r0, [r7, #40]	; 0x28
   223f8:	ldrb	r0, [sp, #4]
   223fc:	sub	r0, r0, #9
   22400:	cmp	r0, #1
   22404:	bhi	2261c <__assert_fail@plt+0x10970>
   22408:	ldr	r0, [r5]
   2240c:	mov	r1, #32
   22410:	b	22478 <__assert_fail@plt+0x107cc>
   22414:	tst	r8, #8192	; 0x2000
   22418:	bne	2250c <__assert_fail@plt+0x10860>
   2241c:	b	2261c <__assert_fail@plt+0x10970>
   22420:	tst	r8, #8192	; 0x2000
   22424:	bne	2251c <__assert_fail@plt+0x10870>
   22428:	b	2261c <__assert_fail@plt+0x10970>
   2242c:	mov	r1, #11
   22430:	b	22614 <__assert_fail@plt+0x10968>
   22434:	movw	r1, #1026	; 0x402
   22438:	tst	r8, r1
   2243c:	bne	2261c <__assert_fail@plt+0x10970>
   22440:	b	22534 <__assert_fail@plt+0x10888>
   22444:	mov	r1, #5
   22448:	b	22614 <__assert_fail@plt+0x10968>
   2244c:	movw	r1, #1026	; 0x402
   22450:	tst	r8, r1
   22454:	bne	2261c <__assert_fail@plt+0x10970>
   22458:	b	2256c <__assert_fail@plt+0x108c0>
   2245c:	mov	r1, #20
   22460:	b	22614 <__assert_fail@plt+0x10968>
   22464:	movw	r1, #8
   22468:	movt	r1, #128	; 0x80
   2246c:	tst	r8, r1
   22470:	beq	224c8 <__assert_fail@plt+0x1081c>
   22474:	mov	r1, #16
   22478:	mov	r2, #12
   2247c:	bfi	r0, r2, #0, #8
   22480:	str	r1, [r9]
   22484:	str	r0, [r9, #4]
   22488:	mov	r0, r4
   2248c:	sub	sp, fp, #24
   22490:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22494:	and	r1, r8, #4608	; 0x1200
   22498:	cmp	r1, #4608	; 0x1200
   2249c:	beq	225f0 <__assert_fail@plt+0x10944>
   224a0:	b	2261c <__assert_fail@plt+0x10970>
   224a4:	and	r1, r8, #33792	; 0x8400
   224a8:	cmp	r1, #32768	; 0x8000
   224ac:	bne	2261c <__assert_fail@plt+0x10970>
   224b0:	mov	r1, #10
   224b4:	b	22614 <__assert_fail@plt+0x10968>
   224b8:	and	r1, r8, #4608	; 0x1200
   224bc:	cmp	r1, #4608	; 0x1200
   224c0:	beq	22610 <__assert_fail@plt+0x10964>
   224c4:	b	2261c <__assert_fail@plt+0x10970>
   224c8:	ldr	r1, [r7, #40]	; 0x28
   224cc:	cmp	r1, #0
   224d0:	beq	22474 <__assert_fail@plt+0x107c8>
   224d4:	tst	r8, #2048	; 0x800
   224d8:	beq	2261c <__assert_fail@plt+0x10970>
   224dc:	ldr	r2, [r7, #4]
   224e0:	add	r1, r2, r1
   224e4:	ldrb	r1, [r1, #-1]
   224e8:	cmp	r1, #10
   224ec:	beq	22474 <__assert_fail@plt+0x107c8>
   224f0:	b	2261c <__assert_fail@plt+0x10970>
   224f4:	tst	r8, #524288	; 0x80000
   224f8:	bne	2261c <__assert_fail@plt+0x10970>
   224fc:	mov	r1, #128	; 0x80
   22500:	b	22478 <__assert_fail@plt+0x107cc>
   22504:	tst	r8, #8192	; 0x2000
   22508:	bne	2261c <__assert_fail@plt+0x10970>
   2250c:	mov	r1, #8
   22510:	b	22614 <__assert_fail@plt+0x10968>
   22514:	tst	r8, #8192	; 0x2000
   22518:	bne	2261c <__assert_fail@plt+0x10970>
   2251c:	mov	r1, #9
   22520:	b	22614 <__assert_fail@plt+0x10968>
   22524:	movw	r1, #1026	; 0x402
   22528:	and	r1, r8, r1
   2252c:	cmp	r1, #2
   22530:	bne	2261c <__assert_fail@plt+0x10970>
   22534:	mov	r1, #18
   22538:	b	22614 <__assert_fail@plt+0x10968>
   2253c:	tst	r8, #524288	; 0x80000
   22540:	bne	2261c <__assert_fail@plt+0x10970>
   22544:	mov	r1, #6
   22548:	b	22478 <__assert_fail@plt+0x107cc>
   2254c:	tst	r8, #524288	; 0x80000
   22550:	bne	2261c <__assert_fail@plt+0x10970>
   22554:	mov	r1, #9
   22558:	b	22478 <__assert_fail@plt+0x107cc>
   2255c:	movw	r1, #1026	; 0x402
   22560:	and	r1, r8, r1
   22564:	cmp	r1, #2
   22568:	bne	2261c <__assert_fail@plt+0x10970>
   2256c:	mov	r1, #19
   22570:	b	22614 <__assert_fail@plt+0x10968>
   22574:	tst	r8, #524288	; 0x80000
   22578:	bne	2261c <__assert_fail@plt+0x10970>
   2257c:	mov	r1, #512	; 0x200
   22580:	b	22478 <__assert_fail@plt+0x107cc>
   22584:	tst	r8, #524288	; 0x80000
   22588:	bne	2261c <__assert_fail@plt+0x10970>
   2258c:	mov	r1, #35	; 0x23
   22590:	b	22614 <__assert_fail@plt+0x10968>
   22594:	tst	r8, #524288	; 0x80000
   22598:	bne	2261c <__assert_fail@plt+0x10970>
   2259c:	mov	r1, #33	; 0x21
   225a0:	b	22614 <__assert_fail@plt+0x10968>
   225a4:	tst	r8, #524288	; 0x80000
   225a8:	bne	2261c <__assert_fail@plt+0x10970>
   225ac:	mov	r1, #64	; 0x40
   225b0:	b	22478 <__assert_fail@plt+0x107cc>
   225b4:	tst	r8, #524288	; 0x80000
   225b8:	bne	2261c <__assert_fail@plt+0x10970>
   225bc:	mov	r1, #256	; 0x100
   225c0:	b	22478 <__assert_fail@plt+0x107cc>
   225c4:	tst	r8, #524288	; 0x80000
   225c8:	bne	2261c <__assert_fail@plt+0x10970>
   225cc:	mov	r1, #34	; 0x22
   225d0:	b	22614 <__assert_fail@plt+0x10968>
   225d4:	tst	r8, #524288	; 0x80000
   225d8:	bne	2261c <__assert_fail@plt+0x10970>
   225dc:	mov	r1, #32
   225e0:	b	22614 <__assert_fail@plt+0x10968>
   225e4:	and	r1, r8, #4608	; 0x1200
   225e8:	cmp	r1, #512	; 0x200
   225ec:	bne	2261c <__assert_fail@plt+0x10970>
   225f0:	mov	r1, #23
   225f4:	b	22614 <__assert_fail@plt+0x10968>
   225f8:	tst	r8, #33792	; 0x8400
   225fc:	bne	2261c <__assert_fail@plt+0x10970>
   22600:	b	224b0 <__assert_fail@plt+0x10804>
   22604:	and	r1, r8, #4608	; 0x1200
   22608:	cmp	r1, #512	; 0x200
   2260c:	bne	2261c <__assert_fail@plt+0x10970>
   22610:	mov	r1, #24
   22614:	bfi	r0, r1, #0, #8
   22618:	str	r0, [r5]
   2261c:	mov	r0, r4
   22620:	sub	sp, fp, #24
   22624:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22628:	cmp	r3, #2
   2262c:	blt	2265c <__assert_fail@plt+0x109b0>
   22630:	ldr	r3, [r7, #8]
   22634:	ldr	r4, [r3, r2, lsl #2]
   22638:	cmn	r4, #1
   2263c:	beq	21ee8 <__assert_fail@plt+0x1023c>
   22640:	ldr	r4, [r7, #28]
   22644:	add	r6, r6, #2
   22648:	cmp	r4, r6
   2264c:	beq	2265c <__assert_fail@plt+0x109b0>
   22650:	ldr	r3, [r3, r6, lsl #2]
   22654:	cmn	r3, #1
   22658:	beq	21ee8 <__assert_fail@plt+0x1023c>
   2265c:	ldrb	r3, [r7, #76]	; 0x4c
   22660:	mov	r6, r2
   22664:	ldr	r4, [r7, #24]
   22668:	ldr	ip, [r7]
   2266c:	cmp	r3, #0
   22670:	ldrne	r6, [r7, #12]
   22674:	ldrne	r6, [r6, r2, lsl #2]
   22678:	cmp	r3, #0
   2267c:	add	r6, r4, r6
   22680:	add	r6, ip, r6
   22684:	ldrsb	r6, [r6]
   22688:	beq	21ef0 <__assert_fail@plt+0x10244>
   2268c:	cmn	r6, #1
   22690:	ble	21ee8 <__assert_fail@plt+0x1023c>
   22694:	b	21ef0 <__assert_fail@plt+0x10244>
   22698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2269c:	add	fp, sp, #28
   226a0:	sub	sp, sp, #12
   226a4:	mov	r4, r1
   226a8:	ldr	r8, [r1]
   226ac:	ldr	r1, [fp, #8]
   226b0:	ldr	r5, [fp, #12]
   226b4:	mov	r7, r2
   226b8:	str	r0, [sp, #8]
   226bc:	mov	sl, r3
   226c0:	mov	r9, r1
   226c4:	str	r1, [sp]
   226c8:	mov	r1, r4
   226cc:	str	r5, [sp, #4]
   226d0:	bl	22b00 <__assert_fail@plt+0x10e54>
   226d4:	mov	r3, r5
   226d8:	mov	r5, r0
   226dc:	mov	r0, #0
   226e0:	cmp	r5, #0
   226e4:	bne	226f4 <__assert_fail@plt+0x10a48>
   226e8:	ldr	r1, [r3]
   226ec:	cmp	r1, #0
   226f0:	bne	228f4 <__assert_fail@plt+0x10c48>
   226f4:	cmp	r9, #0
   226f8:	bne	2280c <__assert_fail@plt+0x10b60>
   226fc:	mov	r9, #0
   22700:	ldrb	r0, [r7, #4]
   22704:	orr	r0, r0, #8
   22708:	cmp	r0, #10
   2270c:	bne	2272c <__assert_fail@plt+0x10a80>
   22710:	b	228f0 <__assert_fail@plt+0x10c44>
   22714:	cmp	r5, #0
   22718:	moveq	r5, r6
   2271c:	ldrb	r0, [r7, #4]
   22720:	orr	r0, r0, #8
   22724:	cmp	r0, #10
   22728:	beq	228f0 <__assert_fail@plt+0x10c44>
   2272c:	ldr	r0, [sp, #8]
   22730:	str	r3, [sp, #4]
   22734:	mov	r1, r4
   22738:	mov	r2, r7
   2273c:	mov	r3, sl
   22740:	str	r9, [sp]
   22744:	bl	22b00 <__assert_fail@plt+0x10e54>
   22748:	ldr	r3, [fp, #12]
   2274c:	cmp	r5, #0
   22750:	mov	r2, r5
   22754:	mov	r6, r0
   22758:	movwne	r2, #1
   2275c:	cmp	r0, #0
   22760:	bne	22770 <__assert_fail@plt+0x10ac4>
   22764:	ldr	r1, [r3]
   22768:	cmp	r1, #0
   2276c:	bne	228fc <__assert_fail@plt+0x10c50>
   22770:	cmp	r5, #0
   22774:	cmpne	r6, #0
   22778:	beq	22714 <__assert_fail@plt+0x10a68>
   2277c:	ldr	r1, [r8, #64]	; 0x40
   22780:	cmp	r1, #31
   22784:	beq	227d8 <__assert_fail@plt+0x10b2c>
   22788:	ldr	r0, [r8, #56]	; 0x38
   2278c:	add	r2, r1, #1
   22790:	add	r0, r0, r1, lsl #5
   22794:	mov	r1, #16
   22798:	str	r2, [r8, #64]	; 0x40
   2279c:	str	r9, [r0, #4]!
   227a0:	stmib	r0, {r5, r6, r9}
   227a4:	str	r9, [r0, #16]
   227a8:	str	r9, [r0, #20]
   227ac:	str	r1, [r0, #24]
   227b0:	mvn	r1, #0
   227b4:	str	r1, [r0, #28]
   227b8:	str	r0, [r5]
   227bc:	str	r0, [r6]
   227c0:	mov	r5, r0
   227c4:	ldrb	r0, [r7, #4]
   227c8:	orr	r0, r0, #8
   227cc:	cmp	r0, #10
   227d0:	bne	2272c <__assert_fail@plt+0x10a80>
   227d4:	b	228f0 <__assert_fail@plt+0x10c44>
   227d8:	mov	r0, #996	; 0x3e4
   227dc:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   227e0:	cmp	r0, #0
   227e4:	beq	229a8 <__assert_fail@plt+0x10cfc>
   227e8:	ldr	r1, [r8, #56]	; 0x38
   227ec:	ldr	r3, [fp, #12]
   227f0:	str	r1, [r0]
   227f4:	mov	r1, #0
   227f8:	str	r1, [r8, #64]	; 0x40
   227fc:	str	r0, [r8, #56]	; 0x38
   22800:	b	2278c <__assert_fail@plt+0x10ae0>
   22804:	cmp	r5, #0
   22808:	moveq	r5, r6
   2280c:	ldrb	r0, [r7, #4]
   22810:	orr	r1, r0, #8
   22814:	cmp	r1, #10
   22818:	cmpne	r0, #9
   2281c:	beq	228f0 <__assert_fail@plt+0x10c44>
   22820:	ldr	r0, [sp, #8]
   22824:	str	r3, [sp, #4]
   22828:	mov	r1, r4
   2282c:	mov	r2, r7
   22830:	mov	r3, sl
   22834:	str	r9, [sp]
   22838:	bl	22b00 <__assert_fail@plt+0x10e54>
   2283c:	ldr	r3, [fp, #12]
   22840:	cmp	r5, #0
   22844:	mov	r2, r5
   22848:	mov	r6, r0
   2284c:	movwne	r2, #1
   22850:	cmp	r0, #0
   22854:	bne	22864 <__assert_fail@plt+0x10bb8>
   22858:	ldr	r1, [r3]
   2285c:	cmp	r1, #0
   22860:	bne	228fc <__assert_fail@plt+0x10c50>
   22864:	cmp	r5, #0
   22868:	cmpne	r6, #0
   2286c:	beq	22804 <__assert_fail@plt+0x10b58>
   22870:	ldr	r1, [r8, #64]	; 0x40
   22874:	cmp	r1, #31
   22878:	beq	228c4 <__assert_fail@plt+0x10c18>
   2287c:	ldr	r0, [r8, #56]	; 0x38
   22880:	add	r2, r1, #1
   22884:	add	r0, r0, r1, lsl #5
   22888:	mov	r1, #0
   2288c:	str	r2, [r8, #64]	; 0x40
   22890:	str	r1, [r0, #4]!
   22894:	stmib	r0, {r5, r6}
   22898:	str	r1, [r0, #12]
   2289c:	str	r1, [r0, #16]
   228a0:	str	r1, [r0, #20]
   228a4:	mov	r1, #16
   228a8:	str	r1, [r0, #24]
   228ac:	mvn	r1, #0
   228b0:	str	r1, [r0, #28]
   228b4:	str	r0, [r5]
   228b8:	str	r0, [r6]
   228bc:	mov	r5, r0
   228c0:	b	2280c <__assert_fail@plt+0x10b60>
   228c4:	mov	r0, #996	; 0x3e4
   228c8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   228cc:	cmp	r0, #0
   228d0:	beq	229a8 <__assert_fail@plt+0x10cfc>
   228d4:	ldr	r1, [r8, #56]	; 0x38
   228d8:	ldr	r3, [fp, #12]
   228dc:	str	r1, [r0]
   228e0:	mov	r1, #0
   228e4:	str	r1, [r8, #64]	; 0x40
   228e8:	str	r0, [r8, #56]	; 0x38
   228ec:	b	22880 <__assert_fail@plt+0x10bd4>
   228f0:	mov	r0, r5
   228f4:	sub	sp, fp, #28
   228f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228fc:	mov	r0, #0
   22900:	cmp	r2, #0
   22904:	beq	228f4 <__assert_fail@plt+0x10c48>
   22908:	movw	r6, #255	; 0xff
   2290c:	movt	r6, #4
   22910:	mov	r7, r5
   22914:	ldr	r5, [r5, #4]
   22918:	cmp	r5, #0
   2291c:	bne	22910 <__assert_fail@plt+0x10c64>
   22920:	ldr	r5, [r7, #8]
   22924:	cmp	r5, #0
   22928:	bne	22910 <__assert_fail@plt+0x10c64>
   2292c:	ldr	r1, [r7, #24]
   22930:	and	r1, r1, r6
   22934:	cmp	r1, #3
   22938:	beq	22970 <__assert_fail@plt+0x10cc4>
   2293c:	cmp	r1, #6
   22940:	bne	2297c <__assert_fail@plt+0x10cd0>
   22944:	ldr	r4, [r7, #20]
   22948:	ldr	r0, [r4]
   2294c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22950:	ldr	r0, [r4, #4]
   22954:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22958:	ldr	r0, [r4, #8]
   2295c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22960:	ldr	r0, [r4, #12]
   22964:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22968:	mov	r0, r4
   2296c:	b	22974 <__assert_fail@plt+0x10cc8>
   22970:	ldr	r0, [r7, #20]
   22974:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22978:	mov	r0, #0
   2297c:	ldr	r1, [r7]
   22980:	cmp	r1, #0
   22984:	beq	228f4 <__assert_fail@plt+0x10c48>
   22988:	ldr	r5, [r1, #8]
   2298c:	cmp	r5, r7
   22990:	mov	r7, r1
   22994:	beq	2292c <__assert_fail@plt+0x10c80>
   22998:	cmp	r5, #0
   2299c:	mov	r7, r1
   229a0:	beq	2292c <__assert_fail@plt+0x10c80>
   229a4:	b	22910 <__assert_fail@plt+0x10c64>
   229a8:	ldr	r1, [fp, #12]
   229ac:	movw	r8, #255	; 0xff
   229b0:	movt	r8, #4
   229b4:	mov	r7, r6
   229b8:	ldr	r6, [r6, #4]
   229bc:	cmp	r6, #0
   229c0:	bne	229b4 <__assert_fail@plt+0x10d08>
   229c4:	ldr	r6, [r7, #8]
   229c8:	cmp	r6, #0
   229cc:	bne	229b4 <__assert_fail@plt+0x10d08>
   229d0:	ldr	r0, [r7, #24]
   229d4:	and	r0, r0, r8
   229d8:	cmp	r0, #3
   229dc:	beq	22a14 <__assert_fail@plt+0x10d68>
   229e0:	cmp	r0, #6
   229e4:	bne	22a20 <__assert_fail@plt+0x10d74>
   229e8:	ldr	r4, [r7, #20]
   229ec:	ldr	r0, [r4]
   229f0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   229f4:	ldr	r0, [r4, #4]
   229f8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   229fc:	ldr	r0, [r4, #8]
   22a00:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22a04:	ldr	r0, [r4, #12]
   22a08:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22a0c:	mov	r0, r4
   22a10:	b	22a18 <__assert_fail@plt+0x10d6c>
   22a14:	ldr	r0, [r7, #20]
   22a18:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22a1c:	ldr	r1, [fp, #12]
   22a20:	ldr	r0, [r7]
   22a24:	cmp	r0, #0
   22a28:	beq	22a4c <__assert_fail@plt+0x10da0>
   22a2c:	ldr	r6, [r0, #8]
   22a30:	cmp	r6, r7
   22a34:	mov	r7, r0
   22a38:	beq	229d0 <__assert_fail@plt+0x10d24>
   22a3c:	cmp	r6, #0
   22a40:	mov	r7, r0
   22a44:	beq	229d0 <__assert_fail@plt+0x10d24>
   22a48:	b	229b4 <__assert_fail@plt+0x10d08>
   22a4c:	mov	r6, r5
   22a50:	ldr	r5, [r5, #4]
   22a54:	cmp	r5, #0
   22a58:	bne	22a4c <__assert_fail@plt+0x10da0>
   22a5c:	ldr	r5, [r6, #8]
   22a60:	cmp	r5, #0
   22a64:	bne	22a4c <__assert_fail@plt+0x10da0>
   22a68:	ldr	r0, [r6, #24]
   22a6c:	and	r0, r0, r8
   22a70:	cmp	r0, #3
   22a74:	beq	22aac <__assert_fail@plt+0x10e00>
   22a78:	cmp	r0, #6
   22a7c:	bne	22ab8 <__assert_fail@plt+0x10e0c>
   22a80:	ldr	r4, [r6, #20]
   22a84:	ldr	r0, [r4]
   22a88:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22a8c:	ldr	r0, [r4, #4]
   22a90:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22a94:	ldr	r0, [r4, #8]
   22a98:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22a9c:	ldr	r0, [r4, #12]
   22aa0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22aa4:	mov	r0, r4
   22aa8:	b	22ab0 <__assert_fail@plt+0x10e04>
   22aac:	ldr	r0, [r6, #20]
   22ab0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   22ab4:	ldr	r1, [fp, #12]
   22ab8:	ldr	r0, [r6]
   22abc:	cmp	r0, #0
   22ac0:	beq	22ae4 <__assert_fail@plt+0x10e38>
   22ac4:	ldr	r5, [r0, #8]
   22ac8:	cmp	r5, r6
   22acc:	mov	r6, r0
   22ad0:	beq	22a68 <__assert_fail@plt+0x10dbc>
   22ad4:	cmp	r5, #0
   22ad8:	mov	r6, r0
   22adc:	beq	22a68 <__assert_fail@plt+0x10dbc>
   22ae0:	b	22a4c <__assert_fail@plt+0x10da0>
   22ae4:	mov	r0, #12
   22ae8:	str	r0, [r1]
   22aec:	mov	r0, #0
   22af0:	sub	sp, fp, #28
   22af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22af8:	nop	{0}
   22afc:	nop	{0}
   22b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b04:	add	fp, sp, #28
   22b08:	sub	sp, sp, #148	; 0x94
   22b0c:	str	r0, [sp, #24]
   22b10:	ldr	r0, [r2, #4]
   22b14:	mov	r7, r1
   22b18:	mov	lr, r2
   22b1c:	mvn	r1, #0
   22b20:	mov	r6, r3
   22b24:	mov	sl, #0
   22b28:	ldr	r2, [fp, #12]
   22b2c:	ldr	r8, [r7]
   22b30:	uxtab	r1, r1, r0
   22b34:	cmp	r1, #35	; 0x23
   22b38:	str	r2, [sp, #16]
   22b3c:	str	lr, [sp, #44]	; 0x2c
   22b40:	bhi	22c6c <__assert_fail@plt+0x10fc0>
   22b44:	add	r2, pc, #0
   22b48:	ldr	pc, [r2, r1, lsl #2]
   22b4c:	andeq	r2, r2, r0, lsr pc
   22b50:	andeq	r4, r2, r4, lsl sl
   22b54:	andeq	r2, r2, ip, ror #24
   22b58:	strdeq	r2, [r2], -r0
   22b5c:	andeq	r2, r2, r0, ror sp
   22b60:	andeq	r2, r2, ip, ror #24
   22b64:	andeq	r2, r2, ip, ror #24
   22b68:	ldrdeq	r2, [r2], -r8
   22b6c:	andeq	r2, r2, ip, ror ip
   22b70:	andeq	r4, r2, r4, lsl sl
   22b74:	andeq	r2, r2, ip, ror #24
   22b78:	andeq	r2, r2, r8, ror #28
   22b7c:	andeq	r2, r2, ip, ror #24
   22b80:	andeq	r2, r2, ip, ror #24
   22b84:	andeq	r2, r2, ip, ror #24
   22b88:	andeq	r2, r2, ip, ror #24
   22b8c:	andeq	r2, r2, ip, ror #24
   22b90:	andeq	r2, r2, ip, ror #24
   22b94:	andeq	r2, r2, ip, ror #24
   22b98:	andeq	r3, r2, r8, lsl #2
   22b9c:	andeq	r2, r2, ip, ror #24
   22ba0:	andeq	r2, r2, ip, ror #24
   22ba4:	andeq	r2, r2, r4, ror #24
   22ba8:	andeq	r2, r2, ip, lsl #25
   22bac:	andeq	r2, r2, ip, ror #24
   22bb0:	andeq	r2, r2, ip, ror #24
   22bb4:	andeq	r2, r2, ip, ror #24
   22bb8:	andeq	r2, r2, ip, ror #24
   22bbc:	andeq	r2, r2, ip, ror #24
   22bc0:	andeq	r2, r2, ip, ror #24
   22bc4:	andeq	r2, r2, ip, ror #24
   22bc8:	ldrdeq	r2, [r2], -ip
   22bcc:	ldrdeq	r2, [r2], -ip
   22bd0:	andeq	r2, r2, r0, lsl #24
   22bd4:	andeq	r2, r2, r0, lsl #24
   22bd8:	andeq	r3, r2, r0, lsl #2
   22bdc:	ldr	r1, [sp, #24]
   22be0:	mvn	r2, #32
   22be4:	movw	r3, #14500	; 0x38a4
   22be8:	uxtab	r0, r2, r0
   22bec:	movw	r2, #14494	; 0x389e
   22bf0:	movt	r3, #3
   22bf4:	clz	r0, r0
   22bf8:	movt	r2, #3
   22bfc:	b	22c20 <__assert_fail@plt+0x10f74>
   22c00:	ldr	r1, [sp, #24]
   22c04:	mvn	r2, #34	; 0x22
   22c08:	movw	r3, #11207	; 0x2bc7
   22c0c:	uxtab	r0, r2, r0
   22c10:	movw	r2, #14502	; 0x38a6
   22c14:	movt	r3, #3
   22c18:	clz	r0, r0
   22c1c:	movt	r2, #3
   22c20:	lsr	r0, r0, #5
   22c24:	ldr	r1, [r1, #64]	; 0x40
   22c28:	str	r0, [sp]
   22c2c:	ldr	r4, [sp, #16]
   22c30:	str	r4, [sp, #4]
   22c34:	mov	r0, r8
   22c38:	bl	25094 <__assert_fail@plt+0x133e8>
   22c3c:	mov	r7, r0
   22c40:	cmp	r0, #0
   22c44:	bne	22c5c <__assert_fail@plt+0x10fb0>
   22c48:	ldr	r0, [r4]
   22c4c:	cmp	r0, #0
   22c50:	ldr	lr, [sp, #44]	; 0x2c
   22c54:	beq	23c20 <__assert_fail@plt+0x11f74>
   22c58:	b	24a14 <__assert_fail@plt+0x12d68>
   22c5c:	ldr	lr, [sp, #44]	; 0x2c
   22c60:	b	23c20 <__assert_fail@plt+0x11f74>
   22c64:	tst	r6, #16777216	; 0x1000000
   22c68:	bne	22ce8 <__assert_fail@plt+0x1103c>
   22c6c:	tst	r6, #32
   22c70:	bne	22ce8 <__assert_fail@plt+0x1103c>
   22c74:	tst	r6, #16
   22c78:	bne	23184 <__assert_fail@plt+0x114d8>
   22c7c:	tst	r6, #131072	; 0x20000
   22c80:	uxtbeq	r1, r0
   22c84:	cmpeq	r1, #9
   22c88:	beq	231cc <__assert_fail@plt+0x11520>
   22c8c:	mov	r1, #1
   22c90:	bfi	r0, r1, #0, #8
   22c94:	str	r0, [lr, #4]
   22c98:	ldr	r1, [r8, #64]	; 0x40
   22c9c:	cmp	r1, #31
   22ca0:	beq	24b8c <__assert_fail@plt+0x12ee0>
   22ca4:	ldr	r0, [r8, #56]	; 0x38
   22ca8:	add	r2, r1, #1
   22cac:	add	r7, r0, r1, lsl #5
   22cb0:	mov	r0, #0
   22cb4:	str	r2, [r8, #64]	; 0x40
   22cb8:	str	r0, [r7, #4]!
   22cbc:	str	r0, [r7, #4]
   22cc0:	str	r0, [r7, #8]
   22cc4:	ldm	lr, {r1, r2}
   22cc8:	str	r0, [r7, #12]
   22ccc:	str	r0, [r7, #16]
   22cd0:	mvn	r0, #0
   22cd4:	str	r0, [r7, #28]
   22cd8:	bic	r0, r2, #786432	; 0xc0000
   22cdc:	str	r1, [r7, #20]
   22ce0:	str	r0, [r7, #24]
   22ce4:	b	23c20 <__assert_fail@plt+0x11f74>
   22ce8:	mov	r0, #13
   22cec:	b	23b14 <__assert_fail@plt+0x11e68>
   22cf0:	ldr	r0, [lr]
   22cf4:	ldr	r2, [r8, #84]	; 0x54
   22cf8:	mov	r1, #1
   22cfc:	tst	r2, r1, lsl r0
   22d00:	beq	24bd0 <__assert_fail@plt+0x12f24>
   22d04:	lsl	r0, r1, r0
   22d08:	ldr	r1, [r8, #64]	; 0x40
   22d0c:	ldr	r2, [r8, #80]	; 0x50
   22d10:	orr	r0, r2, r0
   22d14:	cmp	r1, #31
   22d18:	str	r0, [r8, #80]	; 0x50
   22d1c:	beq	24c48 <__assert_fail@plt+0x12f9c>
   22d20:	ldr	r0, [r8, #56]	; 0x38
   22d24:	add	r2, r1, #1
   22d28:	add	r7, r0, r1, lsl #5
   22d2c:	mov	r0, #0
   22d30:	str	r2, [r8, #64]	; 0x40
   22d34:	str	r0, [r7, #4]!
   22d38:	str	r0, [r7, #4]
   22d3c:	str	r0, [r7, #8]
   22d40:	ldm	lr, {r1, r2}
   22d44:	str	r0, [r7, #12]
   22d48:	str	r0, [r7, #16]
   22d4c:	mvn	r0, #0
   22d50:	str	r0, [r7, #28]
   22d54:	bic	r0, r2, #786432	; 0xc0000
   22d58:	str	r1, [r7, #20]
   22d5c:	str	r0, [r7, #24]
   22d60:	ldr	r0, [r8, #76]	; 0x4c
   22d64:	add	r0, r0, #1
   22d68:	str	r0, [r8, #76]	; 0x4c
   22d6c:	b	22dc8 <__assert_fail@plt+0x1111c>
   22d70:	ldr	r1, [r8, #64]	; 0x40
   22d74:	cmp	r1, #31
   22d78:	beq	24bd8 <__assert_fail@plt+0x12f2c>
   22d7c:	ldr	r0, [r8, #56]	; 0x38
   22d80:	add	r2, r1, #1
   22d84:	add	r7, r0, r1, lsl #5
   22d88:	mov	r0, #0
   22d8c:	str	r2, [r8, #64]	; 0x40
   22d90:	str	r0, [r7, #4]!
   22d94:	str	r0, [r7, #4]
   22d98:	str	r0, [r7, #8]
   22d9c:	ldm	lr, {r1, r2}
   22da0:	str	r0, [r7, #12]
   22da4:	str	r0, [r7, #16]
   22da8:	mvn	r0, #0
   22dac:	str	r0, [r7, #28]
   22db0:	bic	r0, r2, #786432	; 0xc0000
   22db4:	str	r1, [r7, #20]
   22db8:	str	r0, [r7, #24]
   22dbc:	ldr	r0, [r8, #92]	; 0x5c
   22dc0:	cmp	r0, #2
   22dc4:	blt	23c20 <__assert_fail@plt+0x11f74>
   22dc8:	ldrb	r0, [r8, #88]	; 0x58
   22dcc:	orr	r0, r0, #2
   22dd0:	strb	r0, [r8, #88]	; 0x58
   22dd4:	b	23c20 <__assert_fail@plt+0x11f74>
   22dd8:	ldr	r4, [r7, #24]
   22ddc:	mov	sl, r6
   22de0:	orr	r2, r6, #8388608	; 0x800000
   22de4:	ldr	r6, [sp, #24]
   22de8:	ldr	r5, [fp, #8]
   22dec:	add	r0, r4, #1
   22df0:	mov	r1, r6
   22df4:	str	r0, [r7, #24]
   22df8:	mov	r0, lr
   22dfc:	bl	21e48 <__assert_fail@plt+0x1019c>
   22e00:	ldr	r1, [r6, #40]	; 0x28
   22e04:	ldr	lr, [sp, #44]	; 0x2c
   22e08:	mov	r9, #0
   22e0c:	add	r0, r1, r0
   22e10:	str	r0, [r6, #40]	; 0x28
   22e14:	ldrb	r0, [lr, #4]
   22e18:	cmp	r0, #9
   22e1c:	beq	23bb4 <__assert_fail@plt+0x11f08>
   22e20:	add	r0, r5, #1
   22e24:	mov	r1, r7
   22e28:	mov	r2, lr
   22e2c:	mov	r3, sl
   22e30:	mov	r6, lr
   22e34:	str	r0, [sp]
   22e38:	ldr	r5, [sp, #16]
   22e3c:	str	r5, [sp, #4]
   22e40:	ldr	r0, [sp, #24]
   22e44:	bl	21ac0 <__assert_fail@plt+0xfe14>
   22e48:	mov	r9, r0
   22e4c:	ldr	r0, [r5]
   22e50:	cmp	r0, #0
   22e54:	beq	23ba4 <__assert_fail@plt+0x11ef8>
   22e58:	mov	sl, #0
   22e5c:	mov	r0, sl
   22e60:	sub	sp, fp, #28
   22e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e68:	ldr	r0, [lr]
   22e6c:	ldr	r7, [sp, #24]
   22e70:	movw	r1, #783	; 0x30f
   22e74:	tst	r0, r1
   22e78:	beq	22ec0 <__assert_fail@plt+0x11214>
   22e7c:	ldrb	r0, [r8, #88]	; 0x58
   22e80:	tst	r0, #16
   22e84:	bne	22ebc <__assert_fail@plt+0x11210>
   22e88:	orr	r1, r0, #16
   22e8c:	tst	r0, #8
   22e90:	strb	r1, [r8, #88]	; 0x58
   22e94:	bne	24e8c <__assert_fail@plt+0x131e0>
   22e98:	add	r1, pc, #832	; 0x340
   22e9c:	tst	r0, #4
   22ea0:	vld1.64	{d16-d17}, [r1 :128]
   22ea4:	add	r1, r8, #96	; 0x60
   22ea8:	vst1.32	{d16-d17}, [r1]
   22eac:	beq	24e98 <__assert_fail@plt+0x131ec>
   22eb0:	vmov.i32	q8, #0	; 0x00000000
   22eb4:	add	r0, r8, #112	; 0x70
   22eb8:	vst1.32	{d16-d17}, [r0]
   22ebc:	ldr	r0, [lr]
   22ec0:	cmp	r0, #512	; 0x200
   22ec4:	beq	23a08 <__assert_fail@plt+0x11d5c>
   22ec8:	cmp	r0, #256	; 0x100
   22ecc:	bne	23b28 <__assert_fail@plt+0x11e7c>
   22ed0:	mov	r0, #6
   22ed4:	mov	r4, r8
   22ed8:	str	r0, [lr]
   22edc:	ldr	r1, [r4, #64]!	; 0x40
   22ee0:	cmp	r1, #31
   22ee4:	beq	24dd8 <__assert_fail@plt+0x1312c>
   22ee8:	ldr	r0, [r8, #56]	; 0x38
   22eec:	add	r2, r1, #1
   22ef0:	add	r5, r0, r1, lsl #5
   22ef4:	mov	r0, #0
   22ef8:	str	r2, [r4]
   22efc:	str	r0, [r5, #4]!
   22f00:	str	r0, [r5, #4]
   22f04:	str	r0, [r5, #8]
   22f08:	ldm	lr, {r1, r2}
   22f0c:	str	r0, [r5, #12]
   22f10:	str	r0, [r5, #16]
   22f14:	mvn	r0, #0
   22f18:	str	r0, [r5, #28]
   22f1c:	bic	r0, r2, #786432	; 0xc0000
   22f20:	str	r1, [r5, #20]
   22f24:	str	r0, [r5, #24]
   22f28:	mov	r0, #9
   22f2c:	b	23a64 <__assert_fail@plt+0x11db8>
   22f30:	ldr	r1, [r8, #64]	; 0x40
   22f34:	cmp	r1, #31
   22f38:	beq	24c04 <__assert_fail@plt+0x12f58>
   22f3c:	ldr	r0, [r8, #56]	; 0x38
   22f40:	ldr	r3, [sp, #24]
   22f44:	add	r2, r1, #1
   22f48:	add	r4, r0, r1, lsl #5
   22f4c:	mov	r0, #0
   22f50:	str	r2, [r8, #64]	; 0x40
   22f54:	str	r0, [r4, #4]!
   22f58:	str	r0, [r4, #4]
   22f5c:	str	r0, [r4, #8]
   22f60:	ldm	lr, {r1, r2}
   22f64:	str	r0, [r4, #12]
   22f68:	str	r0, [r4, #16]
   22f6c:	mvn	r0, #0
   22f70:	str	r0, [r4, #28]
   22f74:	bic	r0, r2, #786432	; 0xc0000
   22f78:	str	r1, [r4, #20]
   22f7c:	str	r0, [r4, #24]
   22f80:	ldr	r0, [r8, #92]	; 0x5c
   22f84:	cmp	r0, #2
   22f88:	blt	231c4 <__assert_fail@plt+0x11518>
   22f8c:	ldr	r0, [r3, #40]	; 0x28
   22f90:	ldr	r1, [r3, #56]	; 0x38
   22f94:	cmp	r1, r0
   22f98:	ble	231c4 <__assert_fail@plt+0x11518>
   22f9c:	mov	r5, #0
   22fa0:	mvn	sl, #0
   22fa4:	mov	r9, r6
   22fa8:	ldr	r6, [sp, #24]
   22fac:	ldr	r1, [r6, #28]
   22fb0:	cmp	r0, r1
   22fb4:	beq	24a20 <__assert_fail@plt+0x12d74>
   22fb8:	ldr	r1, [r6, #8]
   22fbc:	ldr	r0, [r1, r0, lsl #2]
   22fc0:	cmn	r0, #1
   22fc4:	bne	24a20 <__assert_fail@plt+0x12d74>
   22fc8:	mov	r0, lr
   22fcc:	mov	r1, r6
   22fd0:	mov	r2, r9
   22fd4:	bl	21e48 <__assert_fail@plt+0x1019c>
   22fd8:	ldr	r1, [r6, #40]	; 0x28
   22fdc:	add	r0, r1, r0
   22fe0:	str	r0, [r6, #40]	; 0x28
   22fe4:	ldr	r1, [r8, #64]	; 0x40
   22fe8:	cmp	r1, #31
   22fec:	beq	23098 <__assert_fail@plt+0x113ec>
   22ff0:	ldr	r0, [r8, #56]	; 0x38
   22ff4:	ldr	lr, [sp, #44]	; 0x2c
   22ff8:	add	r2, r1, #1
   22ffc:	add	r6, r0, r1, lsl #5
   23000:	str	r2, [r8, #64]	; 0x40
   23004:	str	r5, [r6, #4]!
   23008:	str	r5, [r6, #4]
   2300c:	str	r5, [r6, #8]
   23010:	ldm	lr, {r0, r1}
   23014:	str	r5, [r6, #12]
   23018:	str	r5, [r6, #16]
   2301c:	str	sl, [r6, #28]
   23020:	str	r0, [r6, #20]
   23024:	bic	r0, r1, #786432	; 0xc0000
   23028:	str	r0, [r6, #24]
   2302c:	ldr	r1, [r8, #64]	; 0x40
   23030:	cmp	r1, #31
   23034:	beq	230d4 <__assert_fail@plt+0x11428>
   23038:	ldr	r0, [r8, #56]	; 0x38
   2303c:	add	r2, r1, #1
   23040:	add	r7, r0, r1, lsl #5
   23044:	mov	r0, #16
   23048:	cmp	r6, #0
   2304c:	str	r2, [r8, #64]	; 0x40
   23050:	str	r5, [r7, #4]!
   23054:	stmib	r7, {r4, r6}
   23058:	str	r5, [r7, #12]
   2305c:	str	r5, [r7, #16]
   23060:	str	r5, [r7, #20]
   23064:	str	r0, [r7, #24]
   23068:	str	sl, [r7, #28]
   2306c:	str	r7, [r4]
   23070:	beq	24e70 <__assert_fail@plt+0x131c4>
   23074:	ldr	r1, [sp, #24]
   23078:	str	r7, [r6]
   2307c:	mov	r4, r7
   23080:	mov	r6, r9
   23084:	ldr	r0, [r1, #40]	; 0x28
   23088:	ldr	r1, [r1, #56]	; 0x38
   2308c:	cmp	r1, r0
   23090:	bgt	22fa4 <__assert_fail@plt+0x112f8>
   23094:	b	23c20 <__assert_fail@plt+0x11f74>
   23098:	mov	r0, #996	; 0x3e4
   2309c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   230a0:	cmp	r0, #0
   230a4:	beq	230c0 <__assert_fail@plt+0x11414>
   230a8:	ldr	r1, [r8, #56]	; 0x38
   230ac:	str	r1, [r0]
   230b0:	mov	r1, #0
   230b4:	str	r1, [r8, #64]	; 0x40
   230b8:	str	r0, [r8, #56]	; 0x38
   230bc:	b	22ff4 <__assert_fail@plt+0x11348>
   230c0:	ldr	lr, [sp, #44]	; 0x2c
   230c4:	mov	r6, #0
   230c8:	ldr	r1, [r8, #64]	; 0x40
   230cc:	cmp	r1, #31
   230d0:	bne	23038 <__assert_fail@plt+0x1138c>
   230d4:	mov	r0, #996	; 0x3e4
   230d8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   230dc:	ldr	lr, [sp, #44]	; 0x2c
   230e0:	cmp	r0, #0
   230e4:	beq	24e70 <__assert_fail@plt+0x131c4>
   230e8:	ldr	r1, [r8, #56]	; 0x38
   230ec:	str	r1, [r0]
   230f0:	mov	r1, #0
   230f4:	str	r1, [r8, #64]	; 0x40
   230f8:	str	r0, [r8, #56]	; 0x38
   230fc:	b	2303c <__assert_fail@plt+0x11390>
   23100:	mov	r0, #5
   23104:	b	23b14 <__assert_fail@plt+0x11e68>
   23108:	mov	sl, #0
   2310c:	mov	r0, #32
   23110:	mov	r1, #1
   23114:	str	sl, [fp, #-32]	; 0xffffffe0
   23118:	bl	1b90c <__assert_fail@plt+0x9c60>
   2311c:	mov	r4, r0
   23120:	mov	r0, #40	; 0x28
   23124:	mov	r1, #1
   23128:	bl	1b90c <__assert_fail@plt+0x9c60>
   2312c:	mov	r5, r0
   23130:	cmp	r4, #0
   23134:	cmpne	r5, #0
   23138:	beq	24c34 <__assert_fail@plt+0x12f88>
   2313c:	str	r5, [sp, #48]	; 0x30
   23140:	mov	r2, r6
   23144:	ldr	r5, [sp, #44]	; 0x2c
   23148:	ldr	r7, [sp, #24]
   2314c:	mov	r0, r5
   23150:	mov	r1, r7
   23154:	bl	2549c <__assert_fail@plt+0x137f0>
   23158:	mov	r3, r0
   2315c:	ldr	r0, [r5, #4]
   23160:	mov	r2, r5
   23164:	uxtb	r1, r0
   23168:	cmp	r1, #25
   2316c:	beq	231f0 <__assert_fail@plt+0x11544>
   23170:	ldr	sl, [sp, #48]	; 0x30
   23174:	cmp	r1, #2
   23178:	beq	24bc8 <__assert_fail@plt+0x12f1c>
   2317c:	mov	r1, #0
   23180:	b	23248 <__assert_fail@plt+0x1159c>
   23184:	ldr	r4, [sp, #24]
   23188:	mov	r0, lr
   2318c:	mov	r2, r6
   23190:	mov	r5, lr
   23194:	mov	r1, r4
   23198:	bl	21e48 <__assert_fail@plt+0x1019c>
   2319c:	ldr	r1, [r4, #40]	; 0x28
   231a0:	mov	r2, r5
   231a4:	mov	r3, r6
   231a8:	add	r0, r1, r0
   231ac:	mov	r1, r7
   231b0:	str	r0, [r4, #40]	; 0x28
   231b4:	mov	r0, r4
   231b8:	sub	sp, fp, #28
   231bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231c0:	b	22b00 <__assert_fail@plt+0x10e54>
   231c4:	mov	r7, r4
   231c8:	b	23c20 <__assert_fail@plt+0x11f74>
   231cc:	mov	r0, #16
   231d0:	b	23b14 <__assert_fail@plt+0x11e68>
   231d4:	nop	{0}
   231d8:	nop	{0}
   231dc:	nop	{0}
   231e0:	andeq	r0, r0, r0
   231e4:	mvnseq	r0, #0
   231e8:			; <UNDEFINED> instruction: 0x87fffffe
   231ec:			; <UNDEFINED> instruction: 0x07fffffe
   231f0:	ldr	sl, [sp, #48]	; 0x30
   231f4:	tst	r6, #256	; 0x100
   231f8:	mov	r1, r7
   231fc:	ldrb	r0, [sl, #16]
   23200:	orr	r0, r0, #1
   23204:	strb	r0, [sl, #16]
   23208:	ldrne	r0, [r4]
   2320c:	orrne	r0, r0, #1024	; 0x400
   23210:	strne	r0, [r4]
   23214:	ldr	r0, [r7, #40]	; 0x28
   23218:	add	r0, r0, r3
   2321c:	str	r0, [r7, #40]	; 0x28
   23220:	mov	r0, r2
   23224:	mov	r2, r6
   23228:	bl	2549c <__assert_fail@plt+0x137f0>
   2322c:	ldr	r2, [sp, #44]	; 0x2c
   23230:	mov	r3, r0
   23234:	ldr	r0, [r2, #4]
   23238:	uxtb	r1, r0
   2323c:	cmp	r1, #2
   23240:	beq	24bc8 <__assert_fail@plt+0x12f1c>
   23244:	mov	r1, #1
   23248:	str	r1, [sp, #36]	; 0x24
   2324c:	uxtb	r1, r0
   23250:	str	r4, [sp, #52]	; 0x34
   23254:	str	r6, [sp, #40]	; 0x28
   23258:	cmp	r1, #21
   2325c:	ldr	r5, [sp, #40]	; 0x28
   23260:	moveq	r1, #1
   23264:	bfieq	r0, r1, #0, #8
   23268:	mov	r1, r7
   2326c:	streq	r0, [r2, #4]
   23270:	mov	r0, #3
   23274:	str	r0, [fp, #-40]	; 0xffffffd8
   23278:	sub	r0, fp, #80	; 0x50
   2327c:	str	r0, [fp, #-36]	; 0xffffffdc
   23280:	mov	r0, #1
   23284:	str	r5, [sp]
   23288:	str	r0, [sp, #4]
   2328c:	sub	r0, fp, #40	; 0x28
   23290:	bl	25644 <__assert_fail@plt+0x13998>
   23294:	cmp	r0, #0
   23298:	bne	24bb8 <__assert_fail@plt+0x12f0c>
   2329c:	and	r0, r5, #65536	; 0x10000
   232a0:	str	r0, [sp, #32]
   232a4:	mov	r0, #0
   232a8:	str	r0, [sp, #28]
   232ac:	mov	r0, #0
   232b0:	str	r0, [sp, #20]
   232b4:	ldr	r6, [sp, #24]
   232b8:	ldr	r7, [sp, #44]	; 0x2c
   232bc:	mov	r0, r7
   232c0:	mov	r1, r6
   232c4:	mov	r2, r5
   232c8:	bl	2549c <__assert_fail@plt+0x137f0>
   232cc:	ldr	r5, [fp, #-40]	; 0xffffffd8
   232d0:	ldr	r4, [sp, #52]	; 0x34
   232d4:	mov	r9, r0
   232d8:	cmp	r5, #2
   232dc:	beq	234e0 <__assert_fail@plt+0x11834>
   232e0:	cmp	r5, #4
   232e4:	bne	23324 <__assert_fail@plt+0x11678>
   232e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   232ec:	ldr	r0, [r6, #64]	; 0x40
   232f0:	mov	r2, sl
   232f4:	sub	r3, fp, #32
   232f8:	str	r1, [sp]
   232fc:	ldr	r1, [sp, #40]	; 0x28
   23300:	str	r1, [sp, #4]
   23304:	mov	r1, r4
   23308:	bl	25948 <__assert_fail@plt+0x13c9c>
   2330c:	ldr	r1, [sp, #16]
   23310:	ldr	lr, [sp, #44]	; 0x2c
   23314:	cmp	r0, #0
   23318:	str	r0, [r1]
   2331c:	beq	23520 <__assert_fail@plt+0x11874>
   23320:	b	24c88 <__assert_fail@plt+0x12fdc>
   23324:	ldr	lr, [sp, #44]	; 0x2c
   23328:	mov	r7, r9
   2332c:	mov	r9, #7
   23330:	ldrb	r0, [lr, #4]
   23334:	cmp	r0, #22
   23338:	beq	23348 <__assert_fail@plt+0x1169c>
   2333c:	cmp	r0, #2
   23340:	bne	23498 <__assert_fail@plt+0x117ec>
   23344:	b	24c78 <__assert_fail@plt+0x12fcc>
   23348:	ldr	r4, [sp, #24]
   2334c:	ldr	r2, [sp, #40]	; 0x28
   23350:	mov	r6, r7
   23354:	ldr	r0, [r4, #40]	; 0x28
   23358:	mov	r1, r4
   2335c:	add	r0, r0, r7
   23360:	str	r0, [r4, #40]	; 0x28
   23364:	add	r0, sp, #56	; 0x38
   23368:	bl	2549c <__assert_fail@plt+0x137f0>
   2336c:	mov	r3, r0
   23370:	ldrb	r0, [sp, #60]	; 0x3c
   23374:	cmp	r0, #21
   23378:	beq	23480 <__assert_fail@plt+0x117d4>
   2337c:	cmp	r0, #2
   23380:	beq	24c78 <__assert_fail@plt+0x12fcc>
   23384:	ldr	r7, [sp, #40]	; 0x28
   23388:	mov	r0, #3
   2338c:	add	r2, sp, #56	; 0x38
   23390:	str	r0, [fp, #-48]	; 0xffffffd0
   23394:	add	r0, sp, #64	; 0x40
   23398:	str	r0, [fp, #-44]	; 0xffffffd4
   2339c:	mov	r0, #1
   233a0:	str	r0, [sp, #4]
   233a4:	sub	r0, fp, #48	; 0x30
   233a8:	str	r7, [sp]
   233ac:	ldr	r4, [sp, #24]
   233b0:	mov	r1, r4
   233b4:	bl	25644 <__assert_fail@plt+0x13998>
   233b8:	cmp	r0, #0
   233bc:	bne	24bb8 <__assert_fail@plt+0x12f0c>
   233c0:	ldr	r0, [sp, #44]	; 0x2c
   233c4:	mov	r1, r4
   233c8:	mov	r2, r7
   233cc:	bl	2549c <__assert_fail@plt+0x137f0>
   233d0:	ldr	r4, [fp, #-48]	; 0xffffffd0
   233d4:	mov	r9, #11
   233d8:	str	r0, [sp, #12]
   233dc:	cmp	r4, #2
   233e0:	cmpne	r4, #4
   233e4:	beq	24c78 <__assert_fail@plt+0x12fcc>
   233e8:	cmp	r5, #3
   233ec:	bne	23400 <__assert_fail@plt+0x11754>
   233f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   233f4:	bl	11ac0 <strlen@plt>
   233f8:	cmp	r0, #1
   233fc:	bhi	24c74 <__assert_fail@plt+0x12fc8>
   23400:	cmp	r4, #3
   23404:	bne	23418 <__assert_fail@plt+0x1176c>
   23408:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2340c:	bl	11ac0 <strlen@plt>
   23410:	cmp	r0, #1
   23414:	bhi	24c74 <__assert_fail@plt+0x12fc8>
   23418:	ldr	lr, [sp, #44]	; 0x2c
   2341c:	cmp	r5, #3
   23420:	beq	235ec <__assert_fail@plt+0x11940>
   23424:	mov	r7, #0
   23428:	cmp	r5, #0
   2342c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   23430:	cmp	r4, #3
   23434:	beq	235fc <__assert_fail@plt+0x11950>
   23438:	mov	sl, #0
   2343c:	cmp	r4, #0
   23440:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   23444:	cmp	r5, #3
   23448:	cmpne	r5, #0
   2344c:	bne	23610 <__assert_fail@plt+0x11964>
   23450:	ldr	r0, [r8, #92]	; 0x5c
   23454:	cmp	r0, #2
   23458:	blt	23614 <__assert_fail@plt+0x11968>
   2345c:	mov	r0, r7
   23460:	bl	11b38 <btowc@plt>
   23464:	ldr	lr, [sp, #44]	; 0x2c
   23468:	mov	r7, r0
   2346c:	cmp	r4, #3
   23470:	cmpne	r4, #0
   23474:	beq	23620 <__assert_fail@plt+0x11974>
   23478:	ldr	sl, [fp, #-44]	; 0xffffffd4
   2347c:	b	23650 <__assert_fail@plt+0x119a4>
   23480:	ldr	r0, [r4, #40]	; 0x28
   23484:	ldr	lr, [sp, #44]	; 0x2c
   23488:	sub	r0, r0, r6
   2348c:	str	r0, [r4, #40]	; 0x28
   23490:	mov	r0, #1
   23494:	strb	r0, [lr, #4]
   23498:	cmp	r5, #1
   2349c:	beq	23578 <__assert_fail@plt+0x118cc>
   234a0:	ldr	r6, [sp, #24]
   234a4:	ldr	r4, [sp, #52]	; 0x34
   234a8:	ldr	sl, [sp, #48]	; 0x30
   234ac:	cmp	r5, #2
   234b0:	mov	r9, r7
   234b4:	beq	234e0 <__assert_fail@plt+0x11834>
   234b8:	cmp	r5, #3
   234bc:	bne	235bc <__assert_fail@plt+0x11910>
   234c0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   234c4:	mov	r0, r7
   234c8:	bl	11ac0 <strlen@plt>
   234cc:	cmp	r0, #1
   234d0:	mov	r3, #1
   234d4:	bne	24c74 <__assert_fail@plt+0x12fc8>
   234d8:	ldrb	r0, [r7]
   234dc:	b	234fc <__assert_fail@plt+0x11850>
   234e0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   234e4:	mov	r0, r7
   234e8:	bl	11ac0 <strlen@plt>
   234ec:	cmp	r0, #1
   234f0:	bne	24c74 <__assert_fail@plt+0x12fc8>
   234f4:	ldrb	r0, [r7]
   234f8:	mov	r3, #1
   234fc:	ubfx	r1, r0, #5, #3
   23500:	and	r0, r0, #31
   23504:	ldr	r2, [r4, r1, lsl #2]
   23508:	orr	r0, r2, r3, lsl r0
   2350c:	str	r0, [r4, r1, lsl #2]
   23510:	mov	r1, #0
   23514:	ldr	r0, [sp, #16]
   23518:	ldr	lr, [sp, #44]	; 0x2c
   2351c:	str	r1, [r0]
   23520:	ldrb	r0, [lr, #4]
   23524:	cmp	r0, #21
   23528:	beq	237ac <__assert_fail@plt+0x11b00>
   2352c:	cmp	r0, #2
   23530:	beq	24bc0 <__assert_fail@plt+0x12f14>
   23534:	mov	r0, #3
   23538:	ldr	r5, [sp, #40]	; 0x28
   2353c:	mov	r1, r6
   23540:	mov	r2, lr
   23544:	mov	r3, r9
   23548:	mov	r7, lr
   2354c:	str	r0, [fp, #-40]	; 0xffffffd8
   23550:	sub	r0, fp, #80	; 0x50
   23554:	str	r0, [fp, #-36]	; 0xffffffdc
   23558:	mov	r0, #0
   2355c:	str	r0, [sp, #4]
   23560:	sub	r0, fp, #40	; 0x28
   23564:	str	r5, [sp]
   23568:	bl	25644 <__assert_fail@plt+0x13998>
   2356c:	cmp	r0, #0
   23570:	beq	232bc <__assert_fail@plt+0x11610>
   23574:	b	24bb8 <__assert_fail@plt+0x12f0c>
   23578:	ldr	sl, [sp, #48]	; 0x30
   2357c:	ldr	r0, [sp, #28]
   23580:	ldr	r4, [sp, #52]	; 0x34
   23584:	ldr	r1, [sl, #20]
   23588:	cmp	r0, r1
   2358c:	beq	23718 <__assert_fail@plt+0x11a6c>
   23590:	ldr	r0, [sl]
   23594:	ldr	r6, [sp, #24]
   23598:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2359c:	add	r2, r1, #1
   235a0:	mov	r9, r7
   235a4:	str	r2, [sl, #20]
   235a8:	str	r3, [r0, r1, lsl #2]
   235ac:	ldrb	r0, [lr, #4]
   235b0:	cmp	r0, #21
   235b4:	bne	2352c <__assert_fail@plt+0x11880>
   235b8:	b	237ac <__assert_fail@plt+0x11b00>
   235bc:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   235c0:	mov	r3, #1
   235c4:	ubfx	r1, r0, #5, #3
   235c8:	ldr	lr, [sp, #44]	; 0x2c
   235cc:	and	r0, r0, #31
   235d0:	ldr	r2, [r4, r1, lsl #2]
   235d4:	orr	r0, r2, r3, lsl r0
   235d8:	str	r0, [r4, r1, lsl #2]
   235dc:	ldrb	r0, [lr, #4]
   235e0:	cmp	r0, #21
   235e4:	bne	2352c <__assert_fail@plt+0x11880>
   235e8:	b	237ac <__assert_fail@plt+0x11b00>
   235ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   235f0:	ldrb	r7, [r0]
   235f4:	cmp	r4, #3
   235f8:	bne	23438 <__assert_fail@plt+0x1178c>
   235fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   23600:	ldrb	sl, [r0]
   23604:	cmp	r5, #3
   23608:	cmpne	r5, #0
   2360c:	beq	23450 <__assert_fail@plt+0x117a4>
   23610:	ldr	r7, [fp, #-36]	; 0xffffffdc
   23614:	cmp	r4, #3
   23618:	cmpne	r4, #0
   2361c:	bne	23478 <__assert_fail@plt+0x117cc>
   23620:	ldr	r0, [r8, #92]	; 0x5c
   23624:	cmp	r0, #2
   23628:	blt	23650 <__assert_fail@plt+0x119a4>
   2362c:	mov	r0, sl
   23630:	bl	11b38 <btowc@plt>
   23634:	ldr	lr, [sp, #44]	; 0x2c
   23638:	mov	sl, r0
   2363c:	cmn	r7, #1
   23640:	mov	r9, #3
   23644:	cmnne	sl, #1
   23648:	beq	24c78 <__assert_fail@plt+0x12fcc>
   2364c:	b	23660 <__assert_fail@plt+0x119b4>
   23650:	cmn	r7, #1
   23654:	mov	r9, #3
   23658:	cmnne	sl, #1
   2365c:	beq	24c78 <__assert_fail@plt+0x12fcc>
   23660:	ldr	r0, [sp, #32]
   23664:	cmp	r0, #0
   23668:	beq	23678 <__assert_fail@plt+0x119cc>
   2366c:	cmp	r7, sl
   23670:	mov	r9, #11
   23674:	bhi	24c78 <__assert_fail@plt+0x12fcc>
   23678:	ldr	r0, [r8, #92]	; 0x5c
   2367c:	cmp	r0, #2
   23680:	blt	236bc <__assert_fail@plt+0x11a10>
   23684:	ldr	r4, [sp, #48]	; 0x30
   23688:	ldr	r1, [sp, #20]
   2368c:	mov	r5, #1
   23690:	ldr	r0, [r4, #32]
   23694:	cmp	r1, r0
   23698:	beq	23758 <__assert_fail@plt+0x11aac>
   2369c:	ldmib	r4, {r6, r9}
   236a0:	str	r7, [r6, r0, lsl #2]
   236a4:	ldr	r0, [r4, #32]
   236a8:	add	r1, r0, #1
   236ac:	str	r1, [r4, #32]
   236b0:	ldr	r4, [sp, #52]	; 0x34
   236b4:	str	sl, [r9, r0, lsl #2]
   236b8:	b	236c4 <__assert_fail@plt+0x11a18>
   236bc:	ldr	r4, [sp, #52]	; 0x34
   236c0:	mov	r5, #1
   236c4:	ldr	r6, [sp, #24]
   236c8:	ldr	r9, [sp, #12]
   236cc:	mov	r0, #0
   236d0:	cmp	r7, r0
   236d4:	cmpls	r0, sl
   236d8:	ubfxls	r1, r0, #5, #3
   236dc:	andls	r3, r0, #31
   236e0:	add	r0, r0, #1
   236e4:	ldrls	r2, [r4, r1, lsl #2]
   236e8:	orrls	r2, r2, r5, lsl r3
   236ec:	strls	r2, [r4, r1, lsl #2]
   236f0:	cmp	r0, #256	; 0x100
   236f4:	bne	236d0 <__assert_fail@plt+0x11a24>
   236f8:	ldr	r0, [sp, #16]
   236fc:	ldr	sl, [sp, #48]	; 0x30
   23700:	mov	r1, #0
   23704:	str	r1, [r0]
   23708:	ldrb	r0, [lr, #4]
   2370c:	cmp	r0, #21
   23710:	bne	2352c <__assert_fail@plt+0x11880>
   23714:	b	237ac <__assert_fail@plt+0x11b00>
   23718:	ldr	r1, [sp, #28]
   2371c:	mov	r0, #1
   23720:	orr	r1, r0, r1, lsl #1
   23724:	ldr	r0, [sl]
   23728:	str	r1, [sp, #28]
   2372c:	lsl	r1, r1, #2
   23730:	bl	1bd04 <__assert_fail@plt+0xa058>
   23734:	cmp	r0, #0
   23738:	beq	25060 <__assert_fail@plt+0x133b4>
   2373c:	ldr	sl, [sp, #48]	; 0x30
   23740:	ldr	r6, [sp, #24]
   23744:	ldr	lr, [sp, #44]	; 0x2c
   23748:	ldr	r4, [sp, #52]	; 0x34
   2374c:	str	r0, [sl]
   23750:	ldr	r1, [sl, #20]
   23754:	b	23598 <__assert_fail@plt+0x118ec>
   23758:	ldr	r0, [sp, #20]
   2375c:	orr	r0, r5, r0, lsl #1
   23760:	lsl	r9, r0, #2
   23764:	str	r0, [sp, #20]
   23768:	ldr	r0, [r4, #4]
   2376c:	mov	r1, r9
   23770:	bl	1bd04 <__assert_fail@plt+0xa058>
   23774:	mov	r6, r0
   23778:	ldr	r0, [r4, #8]
   2377c:	mov	r1, r9
   23780:	bl	1bd04 <__assert_fail@plt+0xa058>
   23784:	mov	r9, r0
   23788:	cmp	r6, #0
   2378c:	cmpne	r9, #0
   23790:	beq	2507c <__assert_fail@plt+0x133d0>
   23794:	ldr	r4, [sp, #48]	; 0x30
   23798:	mov	r5, #1
   2379c:	stmib	r4, {r6, r9}
   237a0:	ldr	r0, [r4, #32]
   237a4:	ldr	lr, [sp, #44]	; 0x2c
   237a8:	b	236a0 <__assert_fail@plt+0x119f4>
   237ac:	ldr	r0, [r6, #40]	; 0x28
   237b0:	add	r0, r0, r9
   237b4:	str	r0, [r6, #40]	; 0x28
   237b8:	ldr	r0, [sp, #36]	; 0x24
   237bc:	cmp	r0, #0
   237c0:	beq	23800 <__assert_fail@plt+0x11b54>
   237c4:	vld1.32	{d16-d17}, [r4]
   237c8:	mov	r0, r4
   237cc:	vmvn	q8, q8
   237d0:	vst1.32	{d16-d17}, [r0]!
   237d4:	vld1.32	{d16-d17}, [r0]
   237d8:	vmvn	q8, q8
   237dc:	vst1.32	{d16-d17}, [r0]
   237e0:	ldr	r0, [r8, #92]	; 0x5c
   237e4:	cmp	r0, #2
   237e8:	bge	2380c <__assert_fail@plt+0x11b60>
   237ec:	ldr	r1, [sl, #20]
   237f0:	ldr	r6, [sp, #40]	; 0x28
   237f4:	cmp	r1, #0
   237f8:	bne	238b8 <__assert_fail@plt+0x11c0c>
   237fc:	b	23894 <__assert_fail@plt+0x11be8>
   23800:	ldr	r0, [r8, #92]	; 0x5c
   23804:	cmp	r0, #2
   23808:	blt	237ec <__assert_fail@plt+0x11b40>
   2380c:	ldm	r4, {r1, r2, r3, r7}
   23810:	ldr	r6, [r8, #60]	; 0x3c
   23814:	ldr	r5, [r6]
   23818:	and	r1, r1, r5
   2381c:	str	r1, [r4]
   23820:	ldr	r1, [r6, #4]
   23824:	and	r1, r2, r1
   23828:	str	r1, [r4, #4]
   2382c:	ldr	r1, [r6, #8]
   23830:	and	r1, r3, r1
   23834:	str	r1, [r4, #8]
   23838:	ldr	r1, [r6, #12]
   2383c:	and	r1, r7, r1
   23840:	str	r1, [r4, #12]
   23844:	ldr	r1, [r4, #16]
   23848:	ldr	r2, [r6, #16]
   2384c:	and	r1, r1, r2
   23850:	str	r1, [r4, #16]
   23854:	ldr	r1, [r6, #20]
   23858:	ldr	r2, [r4, #20]
   2385c:	and	r1, r2, r1
   23860:	str	r1, [r4, #20]
   23864:	ldr	r1, [r6, #24]
   23868:	ldr	r2, [r4, #24]
   2386c:	and	r1, r2, r1
   23870:	str	r1, [r4, #24]
   23874:	ldr	r1, [r6, #28]
   23878:	ldr	r2, [r4, #28]
   2387c:	and	r1, r2, r1
   23880:	str	r1, [r4, #28]
   23884:	ldr	r1, [sl, #20]
   23888:	ldr	r6, [sp, #40]	; 0x28
   2388c:	cmp	r1, #0
   23890:	bne	238b8 <__assert_fail@plt+0x11c0c>
   23894:	ldr	r1, [sl, #24]
   23898:	cmp	r1, #0
   2389c:	bne	238b8 <__assert_fail@plt+0x11c0c>
   238a0:	ldr	r1, [sl, #28]
   238a4:	cmp	r1, #0
   238a8:	bne	238b8 <__assert_fail@plt+0x11c0c>
   238ac:	ldr	r1, [sl, #32]
   238b0:	cmp	r1, #0
   238b4:	beq	24af0 <__assert_fail@plt+0x12e44>
   238b8:	ldrb	r0, [r8, #88]	; 0x58
   238bc:	orr	r0, r0, #2
   238c0:	strb	r0, [r8, #88]	; 0x58
   238c4:	ldr	r1, [r8, #64]	; 0x40
   238c8:	cmp	r1, #31
   238cc:	beq	24cdc <__assert_fail@plt+0x13030>
   238d0:	ldr	r0, [r8, #56]	; 0x38
   238d4:	add	r2, r1, #1
   238d8:	add	r0, r0, r1, lsl #5
   238dc:	mov	r1, #6
   238e0:	vmov.i32	q8, #0	; 0x00000000
   238e4:	str	r2, [r8, #64]	; 0x40
   238e8:	mov	r2, #0
   238ec:	add	r9, r0, #4
   238f0:	str	r2, [r0, #20]
   238f4:	str	sl, [r0, #24]
   238f8:	str	r1, [r0, #28]
   238fc:	mov	r0, #28
   23900:	mov	r1, r9
   23904:	vst1.32	{d16-d17}, [r1], r0
   23908:	mvn	r0, #0
   2390c:	str	r0, [r1]
   23910:	ldr	r0, [r4]
   23914:	cmp	r0, #0
   23918:	bne	23970 <__assert_fail@plt+0x11cc4>
   2391c:	ldr	r0, [r4, #4]
   23920:	cmp	r0, #0
   23924:	bne	23970 <__assert_fail@plt+0x11cc4>
   23928:	ldr	r0, [r4, #8]
   2392c:	cmp	r0, #0
   23930:	bne	23970 <__assert_fail@plt+0x11cc4>
   23934:	ldr	r0, [r4, #12]
   23938:	cmp	r0, #0
   2393c:	bne	23970 <__assert_fail@plt+0x11cc4>
   23940:	ldr	r0, [r4, #16]
   23944:	cmp	r0, #0
   23948:	bne	23970 <__assert_fail@plt+0x11cc4>
   2394c:	ldr	r0, [r4, #20]
   23950:	cmp	r0, #0
   23954:	bne	23970 <__assert_fail@plt+0x11cc4>
   23958:	ldr	r0, [r4, #24]
   2395c:	cmp	r0, #0
   23960:	bne	23970 <__assert_fail@plt+0x11cc4>
   23964:	ldr	r0, [r4, #28]
   23968:	cmp	r0, #0
   2396c:	beq	24d90 <__assert_fail@plt+0x130e4>
   23970:	ldr	r1, [r8, #64]	; 0x40
   23974:	cmp	r1, #31
   23978:	beq	24d08 <__assert_fail@plt+0x1305c>
   2397c:	ldr	r0, [r8, #56]	; 0x38
   23980:	add	r2, r1, #1
   23984:	add	r0, r0, r1, lsl #5
   23988:	mov	r1, #3
   2398c:	vmov.i32	q8, #0	; 0x00000000
   23990:	str	r2, [r8, #64]	; 0x40
   23994:	mov	r2, #0
   23998:	add	r5, r0, #4
   2399c:	str	r2, [r0, #20]
   239a0:	str	r4, [r0, #24]
   239a4:	str	r1, [r0, #28]
   239a8:	mov	r0, #28
   239ac:	mov	r1, r5
   239b0:	vst1.32	{d16-d17}, [r1], r0
   239b4:	mvn	r0, #0
   239b8:	str	r0, [r1]
   239bc:	ldr	r1, [r8, #64]	; 0x40
   239c0:	cmp	r1, #31
   239c4:	beq	24d34 <__assert_fail@plt+0x13088>
   239c8:	ldr	r0, [r8, #56]	; 0x38
   239cc:	add	r2, r1, #1
   239d0:	add	r7, r0, r1, lsl #5
   239d4:	mov	r0, #0
   239d8:	mov	r1, #10
   239dc:	str	r2, [r8, #64]	; 0x40
   239e0:	str	r0, [r7, #4]!
   239e4:	mvn	r2, #0
   239e8:	add	r3, r7, #20
   239ec:	stmib	r7, {r5, r9}
   239f0:	str	r0, [r7, #12]
   239f4:	str	r0, [r7, #16]
   239f8:	stm	r3, {r0, r1, r2}
   239fc:	str	r7, [r5]
   23a00:	str	r7, [r9]
   23a04:	b	23c20 <__assert_fail@plt+0x11f74>
   23a08:	mov	r0, #5
   23a0c:	mov	r4, r8
   23a10:	str	r0, [lr]
   23a14:	ldr	r1, [r4, #64]!	; 0x40
   23a18:	cmp	r1, #31
   23a1c:	beq	24e0c <__assert_fail@plt+0x13160>
   23a20:	ldr	r0, [r8, #56]	; 0x38
   23a24:	add	r2, r1, #1
   23a28:	add	r5, r0, r1, lsl #5
   23a2c:	mov	r0, #0
   23a30:	str	r2, [r4]
   23a34:	str	r0, [r5, #4]!
   23a38:	str	r0, [r5, #4]
   23a3c:	str	r0, [r5, #8]
   23a40:	ldm	lr, {r1, r2}
   23a44:	str	r0, [r5, #12]
   23a48:	str	r0, [r5, #16]
   23a4c:	mvn	r0, #0
   23a50:	str	r0, [r5, #28]
   23a54:	bic	r0, r2, #786432	; 0xc0000
   23a58:	str	r1, [r5, #20]
   23a5c:	str	r0, [r5, #24]
   23a60:	mov	r0, #10
   23a64:	str	r0, [lr]
   23a68:	mov	r9, r6
   23a6c:	ldr	r1, [r4]
   23a70:	cmp	r1, #31
   23a74:	beq	24da4 <__assert_fail@plt+0x130f8>
   23a78:	ldr	r0, [r8, #56]	; 0x38
   23a7c:	add	r2, r1, #1
   23a80:	add	r6, r0, r1, lsl #5
   23a84:	mov	r0, #0
   23a88:	str	r2, [r4]
   23a8c:	str	r0, [r6, #4]!
   23a90:	str	r0, [r6, #4]
   23a94:	str	r0, [r6, #8]
   23a98:	ldm	lr, {r1, r2}
   23a9c:	str	r0, [r6, #12]
   23aa0:	str	r0, [r6, #16]
   23aa4:	mvn	r0, #0
   23aa8:	str	r0, [r6, #28]
   23aac:	bic	r0, r2, #786432	; 0xc0000
   23ab0:	str	r1, [r6, #20]
   23ab4:	str	r0, [r6, #24]
   23ab8:	ldr	r1, [r4]
   23abc:	cmp	r1, #31
   23ac0:	beq	24f3c <__assert_fail@plt+0x13290>
   23ac4:	ldr	r0, [r8, #56]	; 0x38
   23ac8:	add	r2, r1, #1
   23acc:	cmp	r5, #0
   23ad0:	str	r2, [r4]
   23ad4:	add	r4, r0, r1, lsl #5
   23ad8:	mov	r0, #0
   23adc:	mov	r1, #10
   23ae0:	mvn	r2, #0
   23ae4:	str	r0, [r4, #4]!
   23ae8:	add	r3, r4, #20
   23aec:	stmib	r4, {r5, r6}
   23af0:	str	r0, [r4, #12]
   23af4:	str	r0, [r4, #16]
   23af8:	stm	r3, {r0, r1, r2}
   23afc:	strne	r4, [r5]
   23b00:	cmp	r6, #0
   23b04:	strne	r4, [r6]
   23b08:	cmpne	r5, #0
   23b0c:	bne	23b78 <__assert_fail@plt+0x11ecc>
   23b10:	mov	r0, #12
   23b14:	ldr	r1, [sp, #16]
   23b18:	str	r0, [r1]
   23b1c:	mov	r0, sl
   23b20:	sub	sp, fp, #28
   23b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b28:	ldr	r1, [r8, #64]	; 0x40
   23b2c:	mov	r9, r6
   23b30:	cmp	r1, #31
   23b34:	beq	24e40 <__assert_fail@plt+0x13194>
   23b38:	ldr	r0, [r8, #56]	; 0x38
   23b3c:	add	r2, r1, #1
   23b40:	add	r4, r0, r1, lsl #5
   23b44:	mov	r0, #0
   23b48:	str	r2, [r8, #64]	; 0x40
   23b4c:	str	r0, [r4, #4]!
   23b50:	str	r0, [r4, #4]
   23b54:	str	r0, [r4, #8]
   23b58:	ldm	lr, {r1, r2}
   23b5c:	str	r0, [r4, #12]
   23b60:	str	r0, [r4, #16]
   23b64:	mvn	r0, #0
   23b68:	str	r0, [r4, #28]
   23b6c:	bic	r0, r2, #786432	; 0xc0000
   23b70:	str	r1, [r4, #20]
   23b74:	str	r0, [r4, #24]
   23b78:	mov	r0, lr
   23b7c:	mov	r1, r7
   23b80:	mov	r2, r9
   23b84:	bl	21e48 <__assert_fail@plt+0x1019c>
   23b88:	ldr	r1, [r7, #40]	; 0x28
   23b8c:	mov	sl, r4
   23b90:	add	r0, r1, r0
   23b94:	str	r0, [r7, #40]	; 0x28
   23b98:	mov	r0, sl
   23b9c:	sub	sp, fp, #28
   23ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ba4:	ldrb	r0, [r6, #4]
   23ba8:	cmp	r0, #9
   23bac:	bne	24f68 <__assert_fail@plt+0x132bc>
   23bb0:	mov	lr, r6
   23bb4:	cmp	r4, #8
   23bb8:	ldrls	r0, [r8, #84]	; 0x54
   23bbc:	movls	r1, #1
   23bc0:	orrls	r0, r0, r1, lsl r4
   23bc4:	strls	r0, [r8, #84]	; 0x54
   23bc8:	ldr	r1, [r8, #64]	; 0x40
   23bcc:	cmp	r1, #31
   23bd0:	beq	24d60 <__assert_fail@plt+0x130b4>
   23bd4:	ldr	r0, [r8, #56]	; 0x38
   23bd8:	mov	r6, sl
   23bdc:	add	r0, r0, r1, lsl #5
   23be0:	add	r2, r1, #1
   23be4:	mov	r1, #0
   23be8:	mvn	r3, #0
   23bec:	cmp	r9, #0
   23bf0:	mov	r7, r0
   23bf4:	str	r2, [r8, #64]	; 0x40
   23bf8:	mov	r2, #17
   23bfc:	str	r1, [r7, #4]!
   23c00:	add	ip, r7, #20
   23c04:	str	r9, [r7, #4]
   23c08:	str	r1, [r7, #8]
   23c0c:	str	r1, [r7, #12]
   23c10:	str	r1, [r7, #16]
   23c14:	stm	ip, {r1, r2, r3}
   23c18:	strne	r7, [r9]
   23c1c:	str	r4, [r0, #24]
   23c20:	mov	r4, r6
   23c24:	ldr	r6, [sp, #24]
   23c28:	mov	r0, lr
   23c2c:	mov	r2, r4
   23c30:	mov	r1, r6
   23c34:	bl	21e48 <__assert_fail@plt+0x1019c>
   23c38:	ldr	r1, [r6, #40]	; 0x28
   23c3c:	ldr	ip, [sp, #44]	; 0x2c
   23c40:	add	r0, r1, r0
   23c44:	str	r0, [r6, #40]	; 0x28
   23c48:	add	r0, r8, #56	; 0x38
   23c4c:	add	r8, r8, #64	; 0x40
   23c50:	str	r0, [sp, #20]
   23c54:	and	r0, r4, #2097152	; 0x200000
   23c58:	str	r0, [sp, #12]
   23c5c:	str	r4, [sp, #40]	; 0x28
   23c60:	and	r0, r4, #16777216	; 0x1000000
   23c64:	mov	r4, #0
   23c68:	str	r0, [sp, #28]
   23c6c:	b	2494c <__assert_fail@plt+0x12ca0>
   23c70:	movw	r2, #2048	; 0x800
   23c74:	mov	r1, #1
   23c78:	movt	r2, #140	; 0x8c
   23c7c:	tst	r2, r1, lsl r0
   23c80:	beq	24a14 <__assert_fail@plt+0x12d68>
   23c84:	cmp	r0, #23
   23c88:	str	sl, [sp, #36]	; 0x24
   23c8c:	bne	23ca0 <__assert_fail@plt+0x11ff4>
   23c90:	ldm	ip, {r5, sl}
   23c94:	ldr	r7, [r6, #40]	; 0x28
   23c98:	mvn	r2, #0
   23c9c:	b	23cd4 <__assert_fail@plt+0x12028>
   23ca0:	cmp	r0, #19
   23ca4:	sub	r0, r0, #18
   23ca8:	mvn	r5, #0
   23cac:	clz	r0, r0
   23cb0:	movweq	r5, #1
   23cb4:	lsr	r9, r0, #5
   23cb8:	b	23ee8 <__assert_fail@plt+0x1223c>
   23cbc:	add	r0, r9, r9, lsl #2
   23cc0:	add	r0, r1, r0, lsl #1
   23cc4:	movw	r1, #32816	; 0x8030
   23cc8:	sub	r2, r0, #48	; 0x30
   23ccc:	cmp	r0, r1
   23cd0:	movwgt	r2, #32768	; 0x8000
   23cd4:	mov	r9, r2
   23cd8:	ldr	r2, [sp, #40]	; 0x28
   23cdc:	mov	r0, ip
   23ce0:	mov	r1, r6
   23ce4:	bl	21e48 <__assert_fail@plt+0x1019c>
   23ce8:	ldr	r1, [r6, #40]	; 0x28
   23cec:	ldr	ip, [sp, #44]	; 0x2c
   23cf0:	add	r0, r1, r0
   23cf4:	str	r0, [r6, #40]	; 0x28
   23cf8:	ldrb	r0, [ip, #4]
   23cfc:	ldrb	r1, [ip]
   23d00:	cmp	r0, #24
   23d04:	beq	23d4c <__assert_fail@plt+0x120a0>
   23d08:	cmp	r0, #2
   23d0c:	beq	23dbc <__assert_fail@plt+0x12110>
   23d10:	cmp	r1, #44	; 0x2c
   23d14:	beq	23d4c <__assert_fail@plt+0x120a0>
   23d18:	mvn	r2, #1
   23d1c:	cmp	r1, #48	; 0x30
   23d20:	bcc	23cd4 <__assert_fail@plt+0x12028>
   23d24:	cmp	r0, #1
   23d28:	bne	23cd4 <__assert_fail@plt+0x12028>
   23d2c:	cmn	r9, #2
   23d30:	beq	23cd4 <__assert_fail@plt+0x12028>
   23d34:	cmp	r1, #57	; 0x39
   23d38:	bhi	23cd4 <__assert_fail@plt+0x12028>
   23d3c:	cmn	r9, #1
   23d40:	bne	23cbc <__assert_fail@plt+0x12010>
   23d44:	sub	r2, r1, #48	; 0x30
   23d48:	b	23cd4 <__assert_fail@plt+0x12028>
   23d4c:	cmn	r9, #1
   23d50:	bne	23d9c <__assert_fail@plt+0x120f0>
   23d54:	cmp	r1, #44	; 0x2c
   23d58:	moveq	r9, #0
   23d5c:	cmpeq	r0, #1
   23d60:	beq	23df4 <__assert_fail@plt+0x12148>
   23d64:	ldr	r0, [sp, #16]
   23d68:	mov	r1, #10
   23d6c:	str	r1, [r0]
   23d70:	ldr	sl, [sp, #36]	; 0x24
   23d74:	mov	r7, #0
   23d78:	clz	r0, r7
   23d7c:	cmp	r7, #0
   23d80:	lsr	r0, r0, #5
   23d84:	bne	24940 <__assert_fail@plt+0x12c94>
   23d88:	ldr	r1, [sp, #16]
   23d8c:	ldr	r1, [r1]
   23d90:	cmp	r1, #0
   23d94:	beq	24940 <__assert_fail@plt+0x12c94>
   23d98:	b	24a2c <__assert_fail@plt+0x12d80>
   23d9c:	cmn	r9, #2
   23da0:	mov	r2, r9
   23da4:	beq	23dbc <__assert_fail@plt+0x12110>
   23da8:	cmp	r0, #24
   23dac:	beq	23e00 <__assert_fail@plt+0x12154>
   23db0:	cmp	r0, #1
   23db4:	cmpeq	r1, #44	; 0x2c
   23db8:	beq	23df4 <__assert_fail@plt+0x12148>
   23dbc:	ldr	r1, [sp, #12]
   23dc0:	cmp	r1, #0
   23dc4:	beq	2449c <__assert_fail@plt+0x127f0>
   23dc8:	mov	r0, #1
   23dcc:	str	r7, [r6, #40]	; 0x28
   23dd0:	bfi	sl, r0, #0, #8
   23dd4:	stm	ip, {r5, sl}
   23dd8:	ldr	sl, [sp, #36]	; 0x24
   23ddc:	mov	r7, sl
   23de0:	clz	r0, r7
   23de4:	cmp	r7, #0
   23de8:	lsr	r0, r0, #5
   23dec:	beq	23d88 <__assert_fail@plt+0x120dc>
   23df0:	b	24940 <__assert_fail@plt+0x12c94>
   23df4:	mvn	r2, #0
   23df8:	str	sl, [sp, #52]	; 0x34
   23dfc:	b	23e2c <__assert_fail@plt+0x12180>
   23e00:	ldr	sl, [sp, #36]	; 0x24
   23e04:	mov	r5, r9
   23e08:	cmp	r0, #24
   23e0c:	beq	23ed4 <__assert_fail@plt+0x12228>
   23e10:	b	244e4 <__assert_fail@plt+0x12838>
   23e14:	add	r0, sl, sl, lsl #2
   23e18:	add	r0, r1, r0, lsl #1
   23e1c:	movw	r1, #32816	; 0x8030
   23e20:	sub	r2, r0, #48	; 0x30
   23e24:	cmp	r0, r1
   23e28:	movwgt	r2, #32768	; 0x8000
   23e2c:	mov	sl, r2
   23e30:	ldr	r2, [sp, #40]	; 0x28
   23e34:	mov	r0, ip
   23e38:	mov	r1, r6
   23e3c:	bl	21e48 <__assert_fail@plt+0x1019c>
   23e40:	ldr	r1, [r6, #40]	; 0x28
   23e44:	ldr	ip, [sp, #44]	; 0x2c
   23e48:	add	r0, r1, r0
   23e4c:	str	r0, [r6, #40]	; 0x28
   23e50:	ldrb	r0, [ip, #4]
   23e54:	cmp	r0, #24
   23e58:	beq	23ea4 <__assert_fail@plt+0x121f8>
   23e5c:	cmp	r0, #2
   23e60:	beq	2448c <__assert_fail@plt+0x127e0>
   23e64:	ldrb	r1, [ip]
   23e68:	cmp	r1, #44	; 0x2c
   23e6c:	beq	23ea4 <__assert_fail@plt+0x121f8>
   23e70:	mvn	r2, #1
   23e74:	cmp	r1, #48	; 0x30
   23e78:	bcc	23e2c <__assert_fail@plt+0x12180>
   23e7c:	cmp	r0, #1
   23e80:	bne	23e2c <__assert_fail@plt+0x12180>
   23e84:	cmn	sl, #2
   23e88:	beq	23e2c <__assert_fail@plt+0x12180>
   23e8c:	cmp	r1, #57	; 0x39
   23e90:	bhi	23e2c <__assert_fail@plt+0x12180>
   23e94:	cmn	sl, #1
   23e98:	bne	23e14 <__assert_fail@plt+0x12168>
   23e9c:	sub	r2, r1, #48	; 0x30
   23ea0:	b	23e2c <__assert_fail@plt+0x12180>
   23ea4:	cmn	sl, #2
   23ea8:	beq	2448c <__assert_fail@plt+0x127e0>
   23eac:	cmn	sl, #1
   23eb0:	mov	r5, sl
   23eb4:	beq	23ec8 <__assert_fail@plt+0x1221c>
   23eb8:	ldr	sl, [sp, #36]	; 0x24
   23ebc:	cmp	r9, r5
   23ec0:	ble	23ecc <__assert_fail@plt+0x12220>
   23ec4:	b	244e4 <__assert_fail@plt+0x12838>
   23ec8:	ldr	sl, [sp, #36]	; 0x24
   23ecc:	cmp	r0, #24
   23ed0:	bne	244e4 <__assert_fail@plt+0x12838>
   23ed4:	cmn	r5, #1
   23ed8:	mov	r0, r5
   23edc:	moveq	r0, r9
   23ee0:	cmp	r0, #32768	; 0x8000
   23ee4:	bge	244f0 <__assert_fail@plt+0x12844>
   23ee8:	ldr	r2, [sp, #40]	; 0x28
   23eec:	mov	r0, ip
   23ef0:	mov	r1, r6
   23ef4:	bl	21e48 <__assert_fail@plt+0x1019c>
   23ef8:	ldr	r1, [r6, #40]	; 0x28
   23efc:	mov	r7, #0
   23f00:	cmp	sl, #0
   23f04:	add	r0, r1, r0
   23f08:	str	r0, [r6, #40]	; 0x28
   23f0c:	beq	24378 <__assert_fail@plt+0x126cc>
   23f10:	ldr	lr, [sp, #20]
   23f14:	orrs	r0, r5, r9
   23f18:	beq	24390 <__assert_fail@plt+0x126e4>
   23f1c:	mov	r0, #0
   23f20:	cmp	r9, #1
   23f24:	mov	r7, sl
   23f28:	str	r0, [sp, #32]
   23f2c:	ldr	ip, [sp, #44]	; 0x2c
   23f30:	str	r5, [sp, #48]	; 0x30
   23f34:	bge	24438 <__assert_fail@plt+0x1278c>
   23f38:	ldrb	r0, [r7, #24]
   23f3c:	cmp	r0, #17
   23f40:	bne	23fb0 <__assert_fail@plt+0x12304>
   23f44:	ldr	r0, [r7, #20]
   23f48:	mov	r2, r7
   23f4c:	mov	r1, r2
   23f50:	ldr	r2, [r2, #4]
   23f54:	cmp	r2, #0
   23f58:	bne	23f4c <__assert_fail@plt+0x122a0>
   23f5c:	ldr	r2, [r1, #8]
   23f60:	cmp	r2, #0
   23f64:	bne	23f4c <__assert_fail@plt+0x122a0>
   23f68:	ldr	r2, [r1, #24]
   23f6c:	uxtb	r3, r2
   23f70:	cmp	r3, #17
   23f74:	ldreq	r3, [r1, #20]
   23f78:	cmpeq	r3, r0
   23f7c:	orreq	r2, r2, #524288	; 0x80000
   23f80:	streq	r2, [r1, #24]
   23f84:	ldr	r3, [r1]
   23f88:	cmp	r3, #0
   23f8c:	beq	23fb0 <__assert_fail@plt+0x12304>
   23f90:	ldr	r2, [r3, #8]
   23f94:	cmp	r2, r1
   23f98:	mov	r1, r3
   23f9c:	beq	23f68 <__assert_fail@plt+0x122bc>
   23fa0:	cmp	r2, #0
   23fa4:	mov	r1, r3
   23fa8:	beq	23f68 <__assert_fail@plt+0x122bc>
   23fac:	b	23f4c <__assert_fail@plt+0x122a0>
   23fb0:	ldr	r1, [r8]
   23fb4:	cmn	r5, #1
   23fb8:	mov	r6, #10
   23fbc:	movweq	r6, #11
   23fc0:	cmp	r1, #31
   23fc4:	beq	24458 <__assert_fail@plt+0x127ac>
   23fc8:	ldr	r0, [lr]
   23fcc:	add	r2, r1, #1
   23fd0:	add	sl, r0, r1, lsl #5
   23fd4:	mvn	r0, #0
   23fd8:	str	r2, [r8]
   23fdc:	str	r4, [sl, #4]!
   23fe0:	str	r7, [sl, #4]
   23fe4:	str	r4, [sl, #8]
   23fe8:	str	r4, [sl, #12]
   23fec:	str	r4, [sl, #16]
   23ff0:	str	r4, [sl, #20]
   23ff4:	str	r6, [sl, #24]
   23ff8:	str	r0, [sl, #28]
   23ffc:	add	r0, r9, #2
   24000:	str	sl, [r7]
   24004:	cmp	r0, r5
   24008:	bgt	242e4 <__assert_fail@plt+0x12638>
   2400c:	mov	r6, sl
   24010:	ldr	r1, [r8]
   24014:	str	r0, [sp, #52]	; 0x34
   24018:	cmp	r1, #31
   2401c:	beq	24228 <__assert_fail@plt+0x1257c>
   24020:	ldr	r0, [lr]
   24024:	add	r3, r1, #1
   24028:	add	r9, r0, r1, lsl #5
   2402c:	add	r2, r7, #20
   24030:	sub	r5, fp, #80	; 0x50
   24034:	str	r3, [r8]
   24038:	str	r4, [r9, #4]!
   2403c:	str	r4, [r9, #4]
   24040:	str	r4, [r9, #8]
   24044:	ldm	r2, {r0, r1}
   24048:	mvn	r2, #0
   2404c:	str	r4, [r9, #12]
   24050:	str	r4, [r9, #16]
   24054:	str	r2, [r9, #28]
   24058:	str	r0, [r9, #20]
   2405c:	bic	r0, r1, #786432	; 0xc0000
   24060:	str	r0, [r9, #24]
   24064:	mov	r0, r9
   24068:	str	r9, [fp, #-80]	; 0xffffffb0
   2406c:	b	240b0 <__assert_fail@plt+0x12404>
   24070:	add	r3, r1, #1
   24074:	add	r0, r0, r1, lsl #5
   24078:	add	r2, r7, #20
   2407c:	str	r3, [r8]
   24080:	str	r4, [r0, #4]!
   24084:	mvn	r3, #0
   24088:	str	r4, [r0, #4]
   2408c:	str	r4, [r0, #8]
   24090:	ldm	r2, {r1, r2}
   24094:	str	r4, [r0, #12]
   24098:	str	r4, [r0, #16]
   2409c:	str	r3, [r0, #28]
   240a0:	str	r1, [r0, #20]
   240a4:	bic	r1, r2, #786432	; 0xc0000
   240a8:	str	r1, [r0, #24]
   240ac:	str	r0, [r5]
   240b0:	str	sl, [r0]
   240b4:	ldr	r0, [r5]
   240b8:	ldr	r1, [r0, #24]
   240bc:	orr	r1, r1, #262144	; 0x40000
   240c0:	str	r1, [r0, #24]
   240c4:	ldr	r0, [r7, #4]
   240c8:	ldr	sl, [r5]
   240cc:	cmp	r0, #0
   240d0:	beq	240f0 <__assert_fail@plt+0x12444>
   240d4:	add	r5, sl, #4
   240d8:	mov	r7, r0
   240dc:	ldr	r1, [r8]
   240e0:	cmp	r1, #31
   240e4:	beq	24130 <__assert_fail@plt+0x12484>
   240e8:	ldr	r0, [lr]
   240ec:	b	24070 <__assert_fail@plt+0x123c4>
   240f0:	mov	r1, #0
   240f4:	mov	r0, r7
   240f8:	ldr	r7, [r7, #8]
   240fc:	cmp	r7, r1
   24100:	cmpne	r7, #0
   24104:	bne	24120 <__assert_fail@plt+0x12474>
   24108:	ldr	r7, [r0]
   2410c:	ldr	sl, [sl]
   24110:	mov	r1, r0
   24114:	cmp	r7, #0
   24118:	bne	240f4 <__assert_fail@plt+0x12448>
   2411c:	b	24160 <__assert_fail@plt+0x124b4>
   24120:	add	r5, sl, #8
   24124:	ldr	r1, [r8]
   24128:	cmp	r1, #31
   2412c:	bne	240e8 <__assert_fail@plt+0x1243c>
   24130:	mov	r0, #996	; 0x3e4
   24134:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24138:	cmp	r0, #0
   2413c:	beq	24294 <__assert_fail@plt+0x125e8>
   24140:	ldr	lr, [sp, #20]
   24144:	ldr	ip, [sp, #44]	; 0x2c
   24148:	ldr	r1, [lr]
   2414c:	str	r1, [r0]
   24150:	mov	r1, #0
   24154:	str	r0, [lr]
   24158:	str	r1, [r8]
   2415c:	b	24070 <__assert_fail@plt+0x123c4>
   24160:	mov	r7, r9
   24164:	ldr	r1, [r8]
   24168:	cmp	r1, #31
   2416c:	beq	242b0 <__assert_fail@plt+0x12604>
   24170:	ldr	r0, [lr]
   24174:	add	r2, r1, #1
   24178:	add	r5, r0, r1, lsl #5
   2417c:	mov	r0, #16
   24180:	cmp	r7, #0
   24184:	str	r2, [r8]
   24188:	str	r4, [r5, #4]!
   2418c:	stmib	r5, {r6, r7}
   24190:	str	r4, [r5, #12]
   24194:	str	r4, [r5, #16]
   24198:	str	r4, [r5, #20]
   2419c:	str	r0, [r5, #24]
   241a0:	mvn	r0, #0
   241a4:	str	r0, [r5, #28]
   241a8:	str	r5, [r6]
   241ac:	beq	24918 <__assert_fail@plt+0x12c6c>
   241b0:	str	r5, [r7]
   241b4:	ldr	r1, [r8]
   241b8:	cmp	r1, #31
   241bc:	beq	24258 <__assert_fail@plt+0x125ac>
   241c0:	ldr	r0, [lr]
   241c4:	add	r2, r1, #1
   241c8:	add	r6, r0, r1, lsl #5
   241cc:	mov	r0, #10
   241d0:	ldr	r1, [sp, #52]	; 0x34
   241d4:	str	r2, [r8]
   241d8:	str	r4, [r6, #4]!
   241dc:	str	r5, [r6, #4]
   241e0:	str	r4, [r6, #8]
   241e4:	str	r4, [r6, #12]
   241e8:	str	r4, [r6, #16]
   241ec:	str	r4, [r6, #20]
   241f0:	str	r0, [r6, #24]
   241f4:	mvn	r0, #0
   241f8:	str	r0, [r6, #28]
   241fc:	ldr	r0, [sp, #48]	; 0x30
   24200:	str	r6, [r5]
   24204:	cmp	r1, r0
   24208:	bge	242e0 <__assert_fail@plt+0x12634>
   2420c:	ldr	sl, [r7]
   24210:	mov	r0, r1
   24214:	add	r0, r1, #1
   24218:	ldr	r1, [r8]
   2421c:	str	r0, [sp, #52]	; 0x34
   24220:	cmp	r1, #31
   24224:	bne	24020 <__assert_fail@plt+0x12374>
   24228:	mov	r0, #996	; 0x3e4
   2422c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24230:	cmp	r0, #0
   24234:	beq	24288 <__assert_fail@plt+0x125dc>
   24238:	ldr	lr, [sp, #20]
   2423c:	ldr	ip, [sp, #44]	; 0x2c
   24240:	ldr	r1, [lr]
   24244:	str	r1, [r0]
   24248:	mov	r1, #0
   2424c:	str	r0, [lr]
   24250:	str	r1, [r8]
   24254:	b	24024 <__assert_fail@plt+0x12378>
   24258:	mov	r0, #996	; 0x3e4
   2425c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24260:	ldr	lr, [sp, #20]
   24264:	ldr	ip, [sp, #44]	; 0x2c
   24268:	cmp	r0, #0
   2426c:	beq	24918 <__assert_fail@plt+0x12c6c>
   24270:	ldr	r1, [lr]
   24274:	str	r1, [r0]
   24278:	mov	r1, #0
   2427c:	str	r0, [lr]
   24280:	str	r1, [r8]
   24284:	b	241c4 <__assert_fail@plt+0x12518>
   24288:	mov	r7, #0
   2428c:	str	r7, [fp, #-80]	; 0xffffffb0
   24290:	b	2429c <__assert_fail@plt+0x125f0>
   24294:	mov	r7, #0
   24298:	str	r7, [r5]
   2429c:	ldr	ip, [sp, #44]	; 0x2c
   242a0:	ldr	lr, [sp, #20]
   242a4:	ldr	r1, [r8]
   242a8:	cmp	r1, #31
   242ac:	bne	24170 <__assert_fail@plt+0x124c4>
   242b0:	mov	r0, #996	; 0x3e4
   242b4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   242b8:	ldr	lr, [sp, #20]
   242bc:	ldr	ip, [sp, #44]	; 0x2c
   242c0:	cmp	r0, #0
   242c4:	beq	24918 <__assert_fail@plt+0x12c6c>
   242c8:	ldr	r1, [lr]
   242cc:	str	r1, [r0]
   242d0:	mov	r1, #0
   242d4:	str	r0, [lr]
   242d8:	str	r1, [r8]
   242dc:	b	24174 <__assert_fail@plt+0x124c8>
   242e0:	mov	sl, r6
   242e4:	ldr	r5, [sp, #32]
   242e8:	ldr	r6, [sp, #24]
   242ec:	cmp	r5, #0
   242f0:	beq	24360 <__assert_fail@plt+0x126b4>
   242f4:	ldr	r1, [r8]
   242f8:	cmp	r1, #31
   242fc:	beq	244b4 <__assert_fail@plt+0x12808>
   24300:	ldr	r0, [lr]
   24304:	add	r2, r1, #1
   24308:	add	r7, r0, r1, lsl #5
   2430c:	mov	r0, #0
   24310:	mov	r1, #16
   24314:	str	r2, [r8]
   24318:	str	r0, [r7, #4]!
   2431c:	stmib	r7, {r5, sl}
   24320:	str	r0, [r7, #12]
   24324:	str	r0, [r7, #16]
   24328:	str	r0, [r7, #20]
   2432c:	str	r1, [r7, #24]
   24330:	mvn	r1, #0
   24334:	str	r1, [r7, #28]
   24338:	str	r7, [r5]
   2433c:	str	r7, [sl]
   24340:	ldr	r1, [sp, #28]
   24344:	cmp	r1, #0
   24348:	beq	2494c <__assert_fail@plt+0x12ca0>
   2434c:	ldrb	r1, [ip, #4]
   24350:	cmp	r1, #23
   24354:	cmpne	r1, #11
   24358:	bne	2494c <__assert_fail@plt+0x12ca0>
   2435c:	b	24960 <__assert_fail@plt+0x12cb4>
   24360:	mov	r0, #0
   24364:	mov	r7, sl
   24368:	ldr	r1, [sp, #28]
   2436c:	cmp	r1, #0
   24370:	beq	2494c <__assert_fail@plt+0x12ca0>
   24374:	b	2434c <__assert_fail@plt+0x126a0>
   24378:	ldr	ip, [sp, #44]	; 0x2c
   2437c:	clz	r0, r7
   24380:	cmp	r7, #0
   24384:	lsr	r0, r0, #5
   24388:	beq	23d88 <__assert_fail@plt+0x120dc>
   2438c:	b	24940 <__assert_fail@plt+0x12c94>
   24390:	ldr	ip, [sp, #44]	; 0x2c
   24394:	mov	r0, sl
   24398:	mov	r5, r0
   2439c:	ldr	r0, [r0, #4]
   243a0:	cmp	r0, #0
   243a4:	bne	24398 <__assert_fail@plt+0x126ec>
   243a8:	ldr	r0, [r5, #8]
   243ac:	cmp	r0, #0
   243b0:	bne	24398 <__assert_fail@plt+0x126ec>
   243b4:	ldr	r0, [r5, #24]
   243b8:	movw	r1, #255	; 0xff
   243bc:	movt	r1, #4
   243c0:	and	r0, r0, r1
   243c4:	cmp	r0, #3
   243c8:	beq	24400 <__assert_fail@plt+0x12754>
   243cc:	cmp	r0, #6
   243d0:	bne	2440c <__assert_fail@plt+0x12760>
   243d4:	ldr	r9, [r5, #20]
   243d8:	ldr	r0, [r9]
   243dc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   243e0:	ldr	r0, [r9, #4]
   243e4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   243e8:	ldr	r0, [r9, #8]
   243ec:	bl	1bba8 <__assert_fail@plt+0x9efc>
   243f0:	ldr	r0, [r9, #12]
   243f4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   243f8:	mov	r0, r9
   243fc:	b	24404 <__assert_fail@plt+0x12758>
   24400:	ldr	r0, [r5, #20]
   24404:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24408:	ldr	ip, [sp, #44]	; 0x2c
   2440c:	ldr	r1, [r5]
   24410:	cmp	r1, #0
   24414:	beq	24930 <__assert_fail@plt+0x12c84>
   24418:	ldr	r0, [r1, #8]
   2441c:	cmp	r0, r5
   24420:	mov	r5, r1
   24424:	beq	243b4 <__assert_fail@plt+0x12708>
   24428:	cmp	r0, #0
   2442c:	mov	r5, r1
   24430:	beq	243b4 <__assert_fail@plt+0x12708>
   24434:	b	24398 <__assert_fail@plt+0x126ec>
   24438:	mov	r5, sl
   2443c:	str	r9, [sp, #8]
   24440:	beq	24750 <__assert_fail@plt+0x12aa4>
   24444:	ldr	r9, [sp, #36]	; 0x24
   24448:	mov	r0, #2
   2444c:	ldr	r5, [r9]
   24450:	mov	sl, r9
   24454:	b	24590 <__assert_fail@plt+0x128e4>
   24458:	mov	r0, #996	; 0x3e4
   2445c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24460:	ldr	lr, [sp, #20]
   24464:	ldr	ip, [sp, #44]	; 0x2c
   24468:	cmp	r0, #0
   2446c:	beq	24918 <__assert_fail@plt+0x12c6c>
   24470:	ldr	r1, [lr]
   24474:	ldr	r5, [sp, #48]	; 0x30
   24478:	str	r1, [r0]
   2447c:	mov	r1, #0
   24480:	str	r0, [lr]
   24484:	str	r1, [r8]
   24488:	b	23fcc <__assert_fail@plt+0x12320>
   2448c:	ldr	sl, [sp, #52]	; 0x34
   24490:	ldr	r1, [sp, #12]
   24494:	cmp	r1, #0
   24498:	bne	23dc8 <__assert_fail@plt+0x1211c>
   2449c:	ldr	r1, [sp, #16]
   244a0:	cmp	r0, #2
   244a4:	mov	r0, #10
   244a8:	movweq	r0, #9
   244ac:	str	r0, [r1]
   244b0:	b	23d70 <__assert_fail@plt+0x120c4>
   244b4:	mov	r0, #996	; 0x3e4
   244b8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   244bc:	cmp	r0, #0
   244c0:	beq	24500 <__assert_fail@plt+0x12854>
   244c4:	ldr	r2, [sp, #20]
   244c8:	ldr	ip, [sp, #44]	; 0x2c
   244cc:	ldr	r1, [r2]
   244d0:	str	r1, [r0]
   244d4:	mov	r1, #0
   244d8:	str	r0, [r2]
   244dc:	str	r1, [r8]
   244e0:	b	24304 <__assert_fail@plt+0x12658>
   244e4:	ldr	r0, [sp, #16]
   244e8:	mov	r1, #10
   244ec:	b	244f8 <__assert_fail@plt+0x1284c>
   244f0:	ldr	r0, [sp, #16]
   244f4:	mov	r1, #15
   244f8:	str	r1, [r0]
   244fc:	b	23d74 <__assert_fail@plt+0x120c8>
   24500:	ldr	ip, [sp, #44]	; 0x2c
   24504:	b	23d70 <__assert_fail@plt+0x120c4>
   24508:	mov	r0, #996	; 0x3e4
   2450c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24510:	cmp	r0, #0
   24514:	beq	24538 <__assert_fail@plt+0x1288c>
   24518:	ldr	lr, [sp, #20]
   2451c:	ldr	ip, [sp, #44]	; 0x2c
   24520:	ldr	r1, [lr]
   24524:	str	r1, [r0]
   24528:	mov	r1, #0
   2452c:	str	r0, [lr]
   24530:	str	r1, [r8]
   24534:	b	245a4 <__assert_fail@plt+0x128f8>
   24538:	mov	sl, #0
   2453c:	str	sl, [fp, #-80]	; 0xffffffb0
   24540:	b	2454c <__assert_fail@plt+0x128a0>
   24544:	mov	sl, #0
   24548:	str	sl, [r6]
   2454c:	ldr	ip, [sp, #44]	; 0x2c
   24550:	ldr	lr, [sp, #20]
   24554:	ldr	r1, [r8]
   24558:	cmp	r1, #31
   2455c:	bne	246f0 <__assert_fail@plt+0x12a44>
   24560:	mov	r0, #996	; 0x3e4
   24564:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24568:	ldr	lr, [sp, #20]
   2456c:	ldr	ip, [sp, #44]	; 0x2c
   24570:	cmp	r0, #0
   24574:	beq	24918 <__assert_fail@plt+0x12c6c>
   24578:	ldr	r1, [lr]
   2457c:	str	r1, [r0]
   24580:	mov	r1, #0
   24584:	str	r0, [lr]
   24588:	str	r1, [r8]
   2458c:	b	246f4 <__assert_fail@plt+0x12a48>
   24590:	ldr	r1, [r8]
   24594:	str	r0, [sp, #52]	; 0x34
   24598:	cmp	r1, #31
   2459c:	beq	24508 <__assert_fail@plt+0x1285c>
   245a0:	ldr	r0, [lr]
   245a4:	add	r3, r1, #1
   245a8:	add	r7, r0, r1, lsl #5
   245ac:	add	r2, sl, #20
   245b0:	sub	r6, fp, #80	; 0x50
   245b4:	str	r3, [r8]
   245b8:	str	r4, [r7, #4]!
   245bc:	str	r4, [r7, #4]
   245c0:	str	r4, [r7, #8]
   245c4:	ldm	r2, {r0, r1}
   245c8:	mvn	r2, #0
   245cc:	str	r4, [r7, #12]
   245d0:	str	r4, [r7, #16]
   245d4:	str	r2, [r7, #28]
   245d8:	str	r0, [r7, #20]
   245dc:	bic	r0, r1, #786432	; 0xc0000
   245e0:	str	r0, [r7, #24]
   245e4:	mov	r0, r7
   245e8:	str	r7, [fp, #-80]	; 0xffffffb0
   245ec:	b	24630 <__assert_fail@plt+0x12984>
   245f0:	add	r3, r1, #1
   245f4:	add	r0, r0, r1, lsl #5
   245f8:	add	r2, sl, #20
   245fc:	str	r3, [r8]
   24600:	str	r4, [r0, #4]!
   24604:	mvn	r3, #0
   24608:	str	r4, [r0, #4]
   2460c:	str	r4, [r0, #8]
   24610:	ldm	r2, {r1, r2}
   24614:	str	r4, [r0, #12]
   24618:	str	r4, [r0, #16]
   2461c:	str	r3, [r0, #28]
   24620:	str	r1, [r0, #20]
   24624:	bic	r1, r2, #786432	; 0xc0000
   24628:	str	r1, [r0, #24]
   2462c:	str	r0, [r6]
   24630:	str	r5, [r0]
   24634:	ldr	r0, [r6]
   24638:	ldr	r1, [r0, #24]
   2463c:	orr	r1, r1, #262144	; 0x40000
   24640:	str	r1, [r0, #24]
   24644:	ldr	r0, [sl, #4]
   24648:	ldr	r5, [r6]
   2464c:	cmp	r0, #0
   24650:	beq	24670 <__assert_fail@plt+0x129c4>
   24654:	add	r6, r5, #4
   24658:	mov	sl, r0
   2465c:	ldr	r1, [r8]
   24660:	cmp	r1, #31
   24664:	beq	246b0 <__assert_fail@plt+0x12a04>
   24668:	ldr	r0, [lr]
   2466c:	b	245f0 <__assert_fail@plt+0x12944>
   24670:	mov	r1, #0
   24674:	mov	r0, sl
   24678:	ldr	sl, [sl, #8]
   2467c:	cmp	sl, r1
   24680:	cmpne	sl, #0
   24684:	bne	246a0 <__assert_fail@plt+0x129f4>
   24688:	ldr	sl, [r0]
   2468c:	ldr	r5, [r5]
   24690:	mov	r1, r0
   24694:	cmp	sl, #0
   24698:	bne	24674 <__assert_fail@plt+0x129c8>
   2469c:	b	246e0 <__assert_fail@plt+0x12a34>
   246a0:	add	r6, r5, #8
   246a4:	ldr	r1, [r8]
   246a8:	cmp	r1, #31
   246ac:	bne	24668 <__assert_fail@plt+0x129bc>
   246b0:	mov	r0, #996	; 0x3e4
   246b4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   246b8:	cmp	r0, #0
   246bc:	beq	24544 <__assert_fail@plt+0x12898>
   246c0:	ldr	lr, [sp, #20]
   246c4:	ldr	ip, [sp, #44]	; 0x2c
   246c8:	ldr	r1, [lr]
   246cc:	str	r1, [r0]
   246d0:	mov	r1, #0
   246d4:	str	r0, [lr]
   246d8:	str	r1, [r8]
   246dc:	b	245f0 <__assert_fail@plt+0x12944>
   246e0:	mov	sl, r7
   246e4:	ldr	r1, [r8]
   246e8:	cmp	r1, #31
   246ec:	beq	24560 <__assert_fail@plt+0x128b4>
   246f0:	ldr	r0, [lr]
   246f4:	add	r2, r1, #1
   246f8:	add	r1, r0, r1, lsl #5
   246fc:	mov	r0, #16
   24700:	cmp	sl, #0
   24704:	str	r2, [r8]
   24708:	str	r4, [r1, #4]!
   2470c:	stmib	r1, {r9, sl}
   24710:	str	r4, [r1, #12]
   24714:	str	r4, [r1, #16]
   24718:	str	r4, [r1, #20]
   2471c:	str	r0, [r1, #24]
   24720:	mvn	r0, #0
   24724:	str	r0, [r1, #28]
   24728:	str	r1, [r9]
   2472c:	beq	24918 <__assert_fail@plt+0x12c6c>
   24730:	mov	r5, r1
   24734:	str	r1, [sl]
   24738:	ldr	r2, [sp, #52]	; 0x34
   2473c:	ldr	r1, [sp, #8]
   24740:	mov	r9, r5
   24744:	add	r0, r2, #1
   24748:	cmp	r2, r1
   2474c:	blt	24590 <__assert_fail@plt+0x128e4>
   24750:	ldr	r1, [sp, #48]	; 0x30
   24754:	ldr	r2, [sp, #8]
   24758:	mov	r0, #0
   2475c:	cmp	r2, r1
   24760:	bne	2477c <__assert_fail@plt+0x12ad0>
   24764:	ldr	r6, [sp, #24]
   24768:	mov	r7, r5
   2476c:	ldr	r1, [sp, #28]
   24770:	cmp	r1, #0
   24774:	beq	2494c <__assert_fail@plt+0x12ca0>
   24778:	b	2434c <__assert_fail@plt+0x126a0>
   2477c:	mov	r9, sl
   24780:	ldr	r1, [r8]
   24784:	str	r5, [sp, #32]
   24788:	ldr	r6, [r9], #20
   2478c:	cmp	r1, #31
   24790:	beq	248d8 <__assert_fail@plt+0x12c2c>
   24794:	ldr	r0, [lr]
   24798:	add	r2, r1, #1
   2479c:	add	r7, r0, r1, lsl #5
   247a0:	str	r2, [r8]
   247a4:	str	r4, [r7, #4]!
   247a8:	mvn	r2, #0
   247ac:	str	r4, [r7, #4]
   247b0:	str	r4, [r7, #8]
   247b4:	ldm	r9, {r0, r1}
   247b8:	str	r4, [r7, #12]
   247bc:	str	r4, [r7, #16]
   247c0:	str	r2, [r7, #28]
   247c4:	sub	r9, fp, #80	; 0x50
   247c8:	str	r0, [r7, #20]
   247cc:	bic	r0, r1, #786432	; 0xc0000
   247d0:	str	r0, [r7, #24]
   247d4:	mov	r0, r7
   247d8:	str	r7, [fp, #-80]	; 0xffffffb0
   247dc:	b	24820 <__assert_fail@plt+0x12b74>
   247e0:	add	r3, r1, #1
   247e4:	add	r0, r0, r1, lsl #5
   247e8:	add	r2, sl, #20
   247ec:	str	r3, [r8]
   247f0:	str	r4, [r0, #4]!
   247f4:	mvn	r3, #0
   247f8:	str	r4, [r0, #4]
   247fc:	str	r4, [r0, #8]
   24800:	ldm	r2, {r1, r2}
   24804:	str	r4, [r0, #12]
   24808:	str	r4, [r0, #16]
   2480c:	str	r3, [r0, #28]
   24810:	str	r1, [r0, #20]
   24814:	bic	r1, r2, #786432	; 0xc0000
   24818:	str	r1, [r0, #24]
   2481c:	str	r0, [r9]
   24820:	str	r6, [r0]
   24824:	ldr	r0, [r9]
   24828:	ldr	r1, [r0, #24]
   2482c:	orr	r1, r1, #262144	; 0x40000
   24830:	str	r1, [r0, #24]
   24834:	ldr	r0, [sl, #4]
   24838:	ldr	r6, [r9]
   2483c:	cmp	r0, #0
   24840:	beq	24860 <__assert_fail@plt+0x12bb4>
   24844:	add	r9, r6, #4
   24848:	mov	sl, r0
   2484c:	ldr	r1, [r8]
   24850:	cmp	r1, #31
   24854:	beq	248a8 <__assert_fail@plt+0x12bfc>
   24858:	ldr	r0, [lr]
   2485c:	b	247e0 <__assert_fail@plt+0x12b34>
   24860:	ldr	r5, [sp, #48]	; 0x30
   24864:	ldr	r9, [sp, #8]
   24868:	mov	r1, #0
   2486c:	mov	r0, sl
   24870:	ldr	sl, [sl, #8]
   24874:	cmp	sl, r1
   24878:	cmpne	sl, #0
   2487c:	bne	24898 <__assert_fail@plt+0x12bec>
   24880:	ldr	sl, [r0]
   24884:	ldr	r6, [r6]
   24888:	mov	r1, r0
   2488c:	cmp	sl, #0
   24890:	bne	2486c <__assert_fail@plt+0x12bc0>
   24894:	b	23f38 <__assert_fail@plt+0x1228c>
   24898:	add	r9, r6, #8
   2489c:	ldr	r1, [r8]
   248a0:	cmp	r1, #31
   248a4:	bne	24858 <__assert_fail@plt+0x12bac>
   248a8:	mov	r0, #996	; 0x3e4
   248ac:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   248b0:	cmp	r0, #0
   248b4:	beq	24910 <__assert_fail@plt+0x12c64>
   248b8:	ldr	lr, [sp, #20]
   248bc:	ldr	ip, [sp, #44]	; 0x2c
   248c0:	ldr	r1, [lr]
   248c4:	str	r1, [r0]
   248c8:	mov	r1, #0
   248cc:	str	r0, [lr]
   248d0:	str	r1, [r8]
   248d4:	b	247e0 <__assert_fail@plt+0x12b34>
   248d8:	mov	r0, #996	; 0x3e4
   248dc:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   248e0:	cmp	r0, #0
   248e4:	beq	24908 <__assert_fail@plt+0x12c5c>
   248e8:	ldr	lr, [sp, #20]
   248ec:	ldr	ip, [sp, #44]	; 0x2c
   248f0:	ldr	r1, [lr]
   248f4:	str	r1, [r0]
   248f8:	mov	r1, #0
   248fc:	str	r0, [lr]
   24900:	str	r1, [r8]
   24904:	b	24798 <__assert_fail@plt+0x12aec>
   24908:	str	r4, [fp, #-80]	; 0xffffffb0
   2490c:	b	24914 <__assert_fail@plt+0x12c68>
   24910:	str	r4, [r9]
   24914:	ldr	ip, [sp, #44]	; 0x2c
   24918:	ldr	r0, [sp, #16]
   2491c:	ldr	r6, [sp, #24]
   24920:	ldr	sl, [sp, #36]	; 0x24
   24924:	mov	r1, #12
   24928:	mov	r7, #0
   2492c:	str	r1, [r0]
   24930:	clz	r0, r7
   24934:	cmp	r7, #0
   24938:	lsr	r0, r0, #5
   2493c:	beq	23d88 <__assert_fail@plt+0x120dc>
   24940:	ldr	r1, [sp, #28]
   24944:	cmp	r1, #0
   24948:	bne	2434c <__assert_fail@plt+0x126a0>
   2494c:	ldrb	r0, [ip, #4]
   24950:	mov	sl, r7
   24954:	cmp	r0, #23
   24958:	bls	23c70 <__assert_fail@plt+0x11fc4>
   2495c:	b	24a14 <__assert_fail@plt+0x12d68>
   24960:	ldr	r8, [sp, #16]
   24964:	movw	r6, #255	; 0xff
   24968:	cmp	r0, #0
   2496c:	movt	r6, #4
   24970:	bne	24a08 <__assert_fail@plt+0x12d5c>
   24974:	mov	r5, r7
   24978:	ldr	r7, [r7, #4]
   2497c:	cmp	r7, #0
   24980:	bne	24974 <__assert_fail@plt+0x12cc8>
   24984:	ldr	r7, [r5, #8]
   24988:	cmp	r7, #0
   2498c:	bne	24974 <__assert_fail@plt+0x12cc8>
   24990:	ldr	r0, [r5, #24]
   24994:	and	r0, r0, r6
   24998:	cmp	r0, #3
   2499c:	beq	249d4 <__assert_fail@plt+0x12d28>
   249a0:	cmp	r0, #6
   249a4:	bne	249dc <__assert_fail@plt+0x12d30>
   249a8:	ldr	r4, [r5, #20]
   249ac:	ldr	r0, [r4]
   249b0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   249b4:	ldr	r0, [r4, #4]
   249b8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   249bc:	ldr	r0, [r4, #8]
   249c0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   249c4:	ldr	r0, [r4, #12]
   249c8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   249cc:	mov	r0, r4
   249d0:	b	249d8 <__assert_fail@plt+0x12d2c>
   249d4:	ldr	r0, [r5, #20]
   249d8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   249dc:	ldr	r0, [r5]
   249e0:	cmp	r0, #0
   249e4:	beq	24a08 <__assert_fail@plt+0x12d5c>
   249e8:	ldr	r7, [r0, #8]
   249ec:	cmp	r7, r5
   249f0:	mov	r5, r0
   249f4:	beq	24990 <__assert_fail@plt+0x12ce4>
   249f8:	cmp	r7, #0
   249fc:	mov	r5, r0
   24a00:	beq	24990 <__assert_fail@plt+0x12ce4>
   24a04:	b	24974 <__assert_fail@plt+0x12cc8>
   24a08:	mov	r0, #13
   24a0c:	mov	sl, #0
   24a10:	str	r0, [r8]
   24a14:	mov	r0, sl
   24a18:	sub	sp, fp, #28
   24a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a20:	mov	r7, r4
   24a24:	mov	r6, r9
   24a28:	b	23c20 <__assert_fail@plt+0x11f74>
   24a2c:	cmp	sl, #0
   24a30:	beq	24ae0 <__assert_fail@plt+0x12e34>
   24a34:	movw	r6, #255	; 0xff
   24a38:	movt	r6, #4
   24a3c:	mov	r5, sl
   24a40:	ldr	sl, [sl, #4]
   24a44:	cmp	sl, #0
   24a48:	bne	24a3c <__assert_fail@plt+0x12d90>
   24a4c:	ldr	sl, [r5, #8]
   24a50:	cmp	sl, #0
   24a54:	bne	24a3c <__assert_fail@plt+0x12d90>
   24a58:	ldr	r0, [r5, #24]
   24a5c:	and	r0, r0, r6
   24a60:	cmp	r0, #3
   24a64:	beq	24a9c <__assert_fail@plt+0x12df0>
   24a68:	cmp	r0, #6
   24a6c:	bne	24aa4 <__assert_fail@plt+0x12df8>
   24a70:	ldr	r4, [r5, #20]
   24a74:	ldr	r0, [r4]
   24a78:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24a7c:	ldr	r0, [r4, #4]
   24a80:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24a84:	ldr	r0, [r4, #8]
   24a88:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24a8c:	ldr	r0, [r4, #12]
   24a90:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24a94:	mov	r0, r4
   24a98:	b	24aa0 <__assert_fail@plt+0x12df4>
   24a9c:	ldr	r0, [r5, #20]
   24aa0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24aa4:	ldr	r0, [r5]
   24aa8:	cmp	r0, #0
   24aac:	beq	24ad0 <__assert_fail@plt+0x12e24>
   24ab0:	ldr	sl, [r0, #8]
   24ab4:	cmp	sl, r5
   24ab8:	mov	r5, r0
   24abc:	beq	24a58 <__assert_fail@plt+0x12dac>
   24ac0:	cmp	sl, #0
   24ac4:	mov	r5, r0
   24ac8:	beq	24a58 <__assert_fail@plt+0x12dac>
   24acc:	b	24a3c <__assert_fail@plt+0x12d90>
   24ad0:	mov	sl, #0
   24ad4:	mov	r0, sl
   24ad8:	sub	sp, fp, #28
   24adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ae0:	mov	sl, #0
   24ae4:	mov	r0, sl
   24ae8:	sub	sp, fp, #28
   24aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24af0:	cmp	r0, #2
   24af4:	blt	24b10 <__assert_fail@plt+0x12e64>
   24af8:	ldr	r0, [sl, #36]	; 0x24
   24afc:	cmp	r0, #0
   24b00:	bne	238b8 <__assert_fail@plt+0x11c0c>
   24b04:	ldrb	r0, [sl, #16]
   24b08:	tst	r0, #1
   24b0c:	bne	238b8 <__assert_fail@plt+0x11c0c>
   24b10:	ldr	r0, [sl]
   24b14:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24b18:	ldr	r0, [sl, #4]
   24b1c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24b20:	ldr	r0, [sl, #8]
   24b24:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24b28:	ldr	r0, [sl, #12]
   24b2c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24b30:	mov	r0, sl
   24b34:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24b38:	ldr	r1, [r8, #64]	; 0x40
   24b3c:	cmp	r1, #31
   24b40:	beq	25038 <__assert_fail@plt+0x1338c>
   24b44:	ldr	r0, [r8, #56]	; 0x38
   24b48:	add	r2, r1, #1
   24b4c:	add	r0, r0, r1, lsl #5
   24b50:	ldr	lr, [sp, #44]	; 0x2c
   24b54:	mov	r1, #3
   24b58:	vmov.i32	q8, #0	; 0x00000000
   24b5c:	str	r2, [r8, #64]	; 0x40
   24b60:	mov	r2, #0
   24b64:	add	r7, r0, #4
   24b68:	str	r2, [r0, #20]
   24b6c:	str	r4, [r0, #24]
   24b70:	str	r1, [r0, #28]
   24b74:	mov	r0, #28
   24b78:	mov	r1, r7
   24b7c:	vst1.32	{d16-d17}, [r1], r0
   24b80:	mvn	r0, #0
   24b84:	str	r0, [r1]
   24b88:	b	23c20 <__assert_fail@plt+0x11f74>
   24b8c:	mov	r0, #996	; 0x3e4
   24b90:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24b94:	cmp	r0, #0
   24b98:	beq	24e70 <__assert_fail@plt+0x131c4>
   24b9c:	ldr	r1, [r8, #56]	; 0x38
   24ba0:	ldr	lr, [sp, #44]	; 0x2c
   24ba4:	str	r1, [r0]
   24ba8:	mov	r1, #0
   24bac:	str	r1, [r8, #64]	; 0x40
   24bb0:	str	r0, [r8, #56]	; 0x38
   24bb4:	b	22ca8 <__assert_fail@plt+0x10ffc>
   24bb8:	mov	r9, r0
   24bbc:	b	24c78 <__assert_fail@plt+0x12fcc>
   24bc0:	mov	r9, #7
   24bc4:	b	24c78 <__assert_fail@plt+0x12fcc>
   24bc8:	mov	r0, #2
   24bcc:	b	25070 <__assert_fail@plt+0x133c4>
   24bd0:	mov	r0, #6
   24bd4:	b	23b14 <__assert_fail@plt+0x11e68>
   24bd8:	mov	r0, #996	; 0x3e4
   24bdc:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24be0:	cmp	r0, #0
   24be4:	beq	24e70 <__assert_fail@plt+0x131c4>
   24be8:	ldr	r1, [r8, #56]	; 0x38
   24bec:	ldr	lr, [sp, #44]	; 0x2c
   24bf0:	str	r1, [r0]
   24bf4:	mov	r1, #0
   24bf8:	str	r1, [r8, #64]	; 0x40
   24bfc:	str	r0, [r8, #56]	; 0x38
   24c00:	b	22d80 <__assert_fail@plt+0x110d4>
   24c04:	mov	r0, #996	; 0x3e4
   24c08:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24c0c:	cmp	r0, #0
   24c10:	beq	24e70 <__assert_fail@plt+0x131c4>
   24c14:	ldr	r1, [r8, #56]	; 0x38
   24c18:	ldr	r3, [sp, #24]
   24c1c:	ldr	lr, [sp, #44]	; 0x2c
   24c20:	str	r1, [r0]
   24c24:	mov	r1, #0
   24c28:	str	r1, [r8, #64]	; 0x40
   24c2c:	str	r0, [r8, #56]	; 0x38
   24c30:	b	22f44 <__assert_fail@plt+0x11298>
   24c34:	mov	r0, r4
   24c38:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24c3c:	mov	r0, r5
   24c40:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24c44:	b	23b10 <__assert_fail@plt+0x11e64>
   24c48:	mov	r0, #996	; 0x3e4
   24c4c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24c50:	cmp	r0, #0
   24c54:	beq	24e70 <__assert_fail@plt+0x131c4>
   24c58:	ldr	r1, [r8, #56]	; 0x38
   24c5c:	ldr	lr, [sp, #44]	; 0x2c
   24c60:	str	r1, [r0]
   24c64:	mov	r1, #0
   24c68:	str	r1, [r8, #64]	; 0x40
   24c6c:	str	r0, [r8, #56]	; 0x38
   24c70:	b	22d24 <__assert_fail@plt+0x11078>
   24c74:	mov	r9, #3
   24c78:	ldr	r0, [sp, #16]
   24c7c:	ldr	r4, [sp, #52]	; 0x34
   24c80:	ldr	sl, [sp, #48]	; 0x30
   24c84:	str	r9, [r0]
   24c88:	ldr	r6, [sp, #40]	; 0x28
   24c8c:	mov	r0, r4
   24c90:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24c94:	ldr	r0, [sl]
   24c98:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24c9c:	ldr	r0, [sl, #4]
   24ca0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24ca4:	ldr	r0, [sl, #8]
   24ca8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24cac:	ldr	r0, [sl, #12]
   24cb0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24cb4:	mov	r0, sl
   24cb8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24cbc:	ldr	r0, [sp, #16]
   24cc0:	mov	r7, #0
   24cc4:	mov	sl, #0
   24cc8:	ldr	r0, [r0]
   24ccc:	cmp	r0, #0
   24cd0:	ldr	lr, [sp, #44]	; 0x2c
   24cd4:	beq	23c20 <__assert_fail@plt+0x11f74>
   24cd8:	b	24a14 <__assert_fail@plt+0x12d68>
   24cdc:	mov	r0, #996	; 0x3e4
   24ce0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24ce4:	cmp	r0, #0
   24ce8:	beq	2506c <__assert_fail@plt+0x133c0>
   24cec:	ldr	r1, [r8, #56]	; 0x38
   24cf0:	ldr	lr, [sp, #44]	; 0x2c
   24cf4:	str	r1, [r0]
   24cf8:	mov	r1, #0
   24cfc:	str	r1, [r8, #64]	; 0x40
   24d00:	str	r0, [r8, #56]	; 0x38
   24d04:	b	238d4 <__assert_fail@plt+0x11c28>
   24d08:	mov	r0, #996	; 0x3e4
   24d0c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24d10:	cmp	r0, #0
   24d14:	beq	2506c <__assert_fail@plt+0x133c0>
   24d18:	ldr	r1, [r8, #56]	; 0x38
   24d1c:	ldr	lr, [sp, #44]	; 0x2c
   24d20:	str	r1, [r0]
   24d24:	mov	r1, #0
   24d28:	str	r1, [r8, #64]	; 0x40
   24d2c:	str	r0, [r8, #56]	; 0x38
   24d30:	b	23980 <__assert_fail@plt+0x11cd4>
   24d34:	mov	r0, #996	; 0x3e4
   24d38:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24d3c:	cmp	r0, #0
   24d40:	beq	2506c <__assert_fail@plt+0x133c0>
   24d44:	ldr	r1, [r8, #56]	; 0x38
   24d48:	ldr	lr, [sp, #44]	; 0x2c
   24d4c:	str	r1, [r0]
   24d50:	mov	r1, #0
   24d54:	str	r1, [r8, #64]	; 0x40
   24d58:	str	r0, [r8, #56]	; 0x38
   24d5c:	b	239cc <__assert_fail@plt+0x11d20>
   24d60:	mov	r0, #996	; 0x3e4
   24d64:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24d68:	cmp	r0, #0
   24d6c:	beq	24e70 <__assert_fail@plt+0x131c4>
   24d70:	ldr	r1, [r8, #56]	; 0x38
   24d74:	ldr	lr, [sp, #44]	; 0x2c
   24d78:	mov	r6, sl
   24d7c:	str	r1, [r0]
   24d80:	mov	r1, #0
   24d84:	str	r1, [r8, #64]	; 0x40
   24d88:	str	r0, [r8, #56]	; 0x38
   24d8c:	b	23bdc <__assert_fail@plt+0x11f30>
   24d90:	mov	r0, r4
   24d94:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24d98:	ldr	lr, [sp, #44]	; 0x2c
   24d9c:	mov	r7, r9
   24da0:	b	23c20 <__assert_fail@plt+0x11f74>
   24da4:	mov	r0, #996	; 0x3e4
   24da8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24dac:	cmp	r0, #0
   24db0:	beq	24f20 <__assert_fail@plt+0x13274>
   24db4:	ldr	r1, [r8, #56]	; 0x38
   24db8:	ldr	r7, [sp, #24]
   24dbc:	ldr	lr, [sp, #44]	; 0x2c
   24dc0:	mov	sl, #0
   24dc4:	str	r1, [r0]
   24dc8:	mov	r1, #0
   24dcc:	str	r1, [r8, #64]	; 0x40
   24dd0:	str	r0, [r8, #56]	; 0x38
   24dd4:	b	23a7c <__assert_fail@plt+0x11dd0>
   24dd8:	mov	r0, #996	; 0x3e4
   24ddc:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24de0:	cmp	r0, #0
   24de4:	beq	25014 <__assert_fail@plt+0x13368>
   24de8:	ldr	r1, [r8, #56]	; 0x38
   24dec:	ldr	r7, [sp, #24]
   24df0:	ldr	lr, [sp, #44]	; 0x2c
   24df4:	mov	sl, #0
   24df8:	str	r1, [r0]
   24dfc:	mov	r1, #0
   24e00:	str	r1, [r8, #64]	; 0x40
   24e04:	str	r0, [r8, #56]	; 0x38
   24e08:	b	22eec <__assert_fail@plt+0x11240>
   24e0c:	mov	r0, #996	; 0x3e4
   24e10:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24e14:	cmp	r0, #0
   24e18:	beq	25020 <__assert_fail@plt+0x13374>
   24e1c:	ldr	r1, [r8, #56]	; 0x38
   24e20:	ldr	r7, [sp, #24]
   24e24:	ldr	lr, [sp, #44]	; 0x2c
   24e28:	mov	sl, #0
   24e2c:	str	r1, [r0]
   24e30:	mov	r1, #0
   24e34:	str	r1, [r8, #64]	; 0x40
   24e38:	str	r0, [r8, #56]	; 0x38
   24e3c:	b	23a24 <__assert_fail@plt+0x11d78>
   24e40:	mov	r0, #996	; 0x3e4
   24e44:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24e48:	cmp	r0, #0
   24e4c:	beq	24e70 <__assert_fail@plt+0x131c4>
   24e50:	ldr	r1, [r8, #56]	; 0x38
   24e54:	ldr	r7, [sp, #24]
   24e58:	ldr	lr, [sp, #44]	; 0x2c
   24e5c:	str	r1, [r0]
   24e60:	mov	r1, #0
   24e64:	str	r1, [r8, #64]	; 0x40
   24e68:	str	r0, [r8, #56]	; 0x38
   24e6c:	b	23b3c <__assert_fail@plt+0x11e90>
   24e70:	mov	r0, #12
   24e74:	ldr	r1, [sp, #16]
   24e78:	mov	sl, #0
   24e7c:	str	r0, [r1]
   24e80:	mov	r0, sl
   24e84:	sub	sp, fp, #28
   24e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e8c:	mov	r4, #0
   24e90:	mov	r9, #0
   24e94:	b	24ea0 <__assert_fail@plt+0x131f4>
   24e98:	mov	r9, #4
   24e9c:	mov	r4, #128	; 0x80
   24ea0:	bl	11a90 <__ctype_b_loc@plt>
   24ea4:	ldr	r0, [r0]
   24ea8:	ldr	r7, [sp, #24]
   24eac:	ldr	lr, [sp, #44]	; 0x2c
   24eb0:	mov	r1, #1
   24eb4:	mov	sl, #0
   24eb8:	add	r5, r0, r4, lsl #1
   24ebc:	add	r0, r8, r9, lsl #2
   24ec0:	mov	ip, r6
   24ec4:	mov	r3, #0
   24ec8:	add	r2, r0, #96	; 0x60
   24ecc:	mov	r0, r5
   24ed0:	add	r6, r4, r3
   24ed4:	cmp	r6, #95	; 0x5f
   24ed8:	beq	24ee8 <__assert_fail@plt+0x1323c>
   24edc:	ldrh	r6, [r0]
   24ee0:	ands	r6, r6, #8
   24ee4:	beq	24ef4 <__assert_fail@plt+0x13248>
   24ee8:	ldr	r6, [r2]
   24eec:	orr	r6, r6, r1, lsl r3
   24ef0:	str	r6, [r2]
   24ef4:	add	r3, r3, #1
   24ef8:	add	r0, r0, #2
   24efc:	cmp	r3, #32
   24f00:	bne	24ed0 <__assert_fail@plt+0x13224>
   24f04:	add	r9, r9, #1
   24f08:	add	r5, r5, #64	; 0x40
   24f0c:	add	r4, r4, #32
   24f10:	mov	r6, ip
   24f14:	cmp	r9, #8
   24f18:	bne	24ebc <__assert_fail@plt+0x13210>
   24f1c:	b	22ebc <__assert_fail@plt+0x11210>
   24f20:	ldr	r7, [sp, #24]
   24f24:	ldr	lr, [sp, #44]	; 0x2c
   24f28:	mov	r6, #0
   24f2c:	mov	sl, #0
   24f30:	ldr	r1, [r4]
   24f34:	cmp	r1, #31
   24f38:	bne	23ac4 <__assert_fail@plt+0x11e18>
   24f3c:	mov	r0, #996	; 0x3e4
   24f40:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   24f44:	ldr	lr, [sp, #44]	; 0x2c
   24f48:	cmp	r0, #0
   24f4c:	beq	23b10 <__assert_fail@plt+0x11e64>
   24f50:	ldr	r1, [r8, #56]	; 0x38
   24f54:	str	r1, [r0]
   24f58:	mov	r1, #0
   24f5c:	str	r1, [r8, #64]	; 0x40
   24f60:	str	r0, [r8, #56]	; 0x38
   24f64:	b	23ac8 <__assert_fail@plt+0x11e1c>
   24f68:	cmp	r9, #0
   24f6c:	beq	2500c <__assert_fail@plt+0x13360>
   24f70:	movw	r5, #255	; 0xff
   24f74:	movt	r5, #4
   24f78:	mov	r6, r9
   24f7c:	ldr	r9, [r9, #4]
   24f80:	cmp	r9, #0
   24f84:	bne	24f78 <__assert_fail@plt+0x132cc>
   24f88:	ldr	r9, [r6, #8]
   24f8c:	cmp	r9, #0
   24f90:	bne	24f78 <__assert_fail@plt+0x132cc>
   24f94:	ldr	r0, [r6, #24]
   24f98:	and	r0, r0, r5
   24f9c:	cmp	r0, #3
   24fa0:	beq	24fd8 <__assert_fail@plt+0x1332c>
   24fa4:	cmp	r0, #6
   24fa8:	bne	24fe0 <__assert_fail@plt+0x13334>
   24fac:	ldr	r4, [r6, #20]
   24fb0:	ldr	r0, [r4]
   24fb4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24fb8:	ldr	r0, [r4, #4]
   24fbc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24fc0:	ldr	r0, [r4, #8]
   24fc4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24fc8:	ldr	r0, [r4, #12]
   24fcc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24fd0:	mov	r0, r4
   24fd4:	b	24fdc <__assert_fail@plt+0x13330>
   24fd8:	ldr	r0, [r6, #20]
   24fdc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   24fe0:	ldr	r0, [r6]
   24fe4:	cmp	r0, #0
   24fe8:	beq	2500c <__assert_fail@plt+0x13360>
   24fec:	ldr	r9, [r0, #8]
   24ff0:	cmp	r9, r6
   24ff4:	mov	r6, r0
   24ff8:	beq	24f94 <__assert_fail@plt+0x132e8>
   24ffc:	cmp	r9, #0
   25000:	mov	r6, r0
   25004:	beq	24f94 <__assert_fail@plt+0x132e8>
   25008:	b	24f78 <__assert_fail@plt+0x132cc>
   2500c:	mov	r0, #8
   25010:	b	24e74 <__assert_fail@plt+0x131c8>
   25014:	mov	r5, #0
   25018:	mov	r0, #9
   2501c:	b	25028 <__assert_fail@plt+0x1337c>
   25020:	mov	r5, #0
   25024:	mov	r0, #10
   25028:	ldr	r7, [sp, #24]
   2502c:	ldr	lr, [sp, #44]	; 0x2c
   25030:	mov	sl, #0
   25034:	b	23a64 <__assert_fail@plt+0x11db8>
   25038:	mov	r0, #996	; 0x3e4
   2503c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   25040:	cmp	r0, #0
   25044:	beq	2506c <__assert_fail@plt+0x133c0>
   25048:	ldr	r1, [r8, #56]	; 0x38
   2504c:	str	r1, [r0]
   25050:	mov	r1, #0
   25054:	str	r1, [r8, #64]	; 0x40
   25058:	str	r0, [r8, #56]	; 0x38
   2505c:	b	24b48 <__assert_fail@plt+0x12e9c>
   25060:	ldr	r6, [sp, #40]	; 0x28
   25064:	ldr	r4, [sp, #52]	; 0x34
   25068:	ldr	sl, [sp, #48]	; 0x30
   2506c:	mov	r0, #12
   25070:	ldr	r1, [sp, #16]
   25074:	str	r0, [r1]
   25078:	b	24c8c <__assert_fail@plt+0x12fe0>
   2507c:	mov	r0, r6
   25080:	bl	1bba8 <__assert_fail@plt+0x9efc>
   25084:	mov	r0, r9
   25088:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2508c:	mov	r9, #12
   25090:	b	24c78 <__assert_fail@plt+0x12fcc>
   25094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25098:	add	fp, sp, #28
   2509c:	sub	sp, sp, #12
   250a0:	mov	r9, r1
   250a4:	mov	r6, r0
   250a8:	mov	r4, #0
   250ac:	mov	r0, #32
   250b0:	mov	r1, #1
   250b4:	mov	sl, r3
   250b8:	mov	r5, r2
   250bc:	str	r4, [sp, #8]
   250c0:	bl	1b90c <__assert_fail@plt+0x9c60>
   250c4:	ldr	r1, [fp, #12]
   250c8:	cmp	r0, #0
   250cc:	beq	25384 <__assert_fail@plt+0x136d8>
   250d0:	mov	r7, r0
   250d4:	mov	r0, #40	; 0x28
   250d8:	mov	r1, #1
   250dc:	bl	1b90c <__assert_fail@plt+0x9c60>
   250e0:	cmp	r0, #0
   250e4:	beq	25398 <__assert_fail@plt+0x136ec>
   250e8:	mov	r8, r0
   250ec:	ldrb	r0, [r0, #16]
   250f0:	ldr	r1, [fp, #8]
   250f4:	mov	r4, #0
   250f8:	add	r3, sp, #8
   250fc:	str	r5, [sp]
   25100:	mov	r2, r8
   25104:	str	r4, [sp, #4]
   25108:	and	r0, r0, #254	; 0xfe
   2510c:	orr	r0, r0, r1
   25110:	mov	r1, r7
   25114:	strb	r0, [r8, #16]
   25118:	mov	r0, r9
   2511c:	bl	25948 <__assert_fail@plt+0x13c9c>
   25120:	cmp	r0, #0
   25124:	bne	253bc <__assert_fail@plt+0x13710>
   25128:	ldrb	r0, [sl]
   2512c:	cmp	r0, #0
   25130:	beq	2515c <__assert_fail@plt+0x134b0>
   25134:	add	r1, sl, #1
   25138:	mov	r2, #1
   2513c:	ubfx	r3, r0, #5, #3
   25140:	and	r0, r0, #31
   25144:	ldr	r5, [r7, r3, lsl #2]
   25148:	orr	r0, r5, r2, lsl r0
   2514c:	str	r0, [r7, r3, lsl #2]
   25150:	ldrb	r0, [r1], #1
   25154:	cmp	r0, #0
   25158:	bne	2513c <__assert_fail@plt+0x13490>
   2515c:	ldr	r0, [fp, #8]
   25160:	cmp	r0, #0
   25164:	bne	25278 <__assert_fail@plt+0x135cc>
   25168:	ldr	r0, [r6, #92]	; 0x5c
   2516c:	cmp	r0, #2
   25170:	bge	252a0 <__assert_fail@plt+0x135f4>
   25174:	ldr	r1, [r6, #64]	; 0x40
   25178:	cmp	r1, #31
   2517c:	beq	25324 <__assert_fail@plt+0x13678>
   25180:	ldr	r0, [r6, #56]	; 0x38
   25184:	add	r2, r1, #1
   25188:	add	r0, r0, r1, lsl #5
   2518c:	mov	r1, #3
   25190:	vmov.i32	q8, #0	; 0x00000000
   25194:	str	r2, [r6, #64]	; 0x40
   25198:	mov	r2, #0
   2519c:	add	r5, r0, #4
   251a0:	str	r2, [r0, #20]
   251a4:	str	r7, [r0, #24]
   251a8:	str	r1, [r0, #28]
   251ac:	mov	r0, #28
   251b0:	mov	r1, r5
   251b4:	vst1.32	{d16-d17}, [r1], r0
   251b8:	mvn	r0, #0
   251bc:	str	r0, [r1]
   251c0:	ldr	r0, [r6, #92]	; 0x5c
   251c4:	cmp	r0, #2
   251c8:	blt	2534c <__assert_fail@plt+0x136a0>
   251cc:	ldrb	r0, [r6, #88]	; 0x58
   251d0:	orr	r0, r0, #2
   251d4:	strb	r0, [r6, #88]	; 0x58
   251d8:	ldr	r1, [r6, #64]	; 0x40
   251dc:	cmp	r1, #31
   251e0:	beq	25404 <__assert_fail@plt+0x13758>
   251e4:	ldr	r0, [r6, #56]	; 0x38
   251e8:	add	r0, r0, r1, lsl #5
   251ec:	add	r2, r1, #1
   251f0:	mov	r1, #6
   251f4:	mov	r4, #0
   251f8:	vmov.i32	q8, #0	; 0x00000000
   251fc:	add	r7, r0, #4
   25200:	str	r2, [r6, #64]	; 0x40
   25204:	str	r4, [r0, #20]
   25208:	str	r8, [r0, #24]
   2520c:	str	r1, [r0, #28]
   25210:	mov	r0, #28
   25214:	mov	r1, r7
   25218:	vst1.32	{d16-d17}, [r1], r0
   2521c:	mvn	r0, #0
   25220:	str	r0, [r1]
   25224:	ldr	r1, [r6, #64]	; 0x40
   25228:	cmp	r1, #31
   2522c:	beq	25474 <__assert_fail@plt+0x137c8>
   25230:	ldr	r0, [r6, #56]	; 0x38
   25234:	add	r2, r1, #1
   25238:	add	r4, r0, r1, lsl #5
   2523c:	mov	r0, #0
   25240:	mov	r1, #10
   25244:	str	r2, [r6, #64]	; 0x40
   25248:	str	r0, [r4, #4]!
   2524c:	mvn	r2, #0
   25250:	add	r3, r4, #20
   25254:	stmib	r4, {r5, r7}
   25258:	str	r0, [r4, #12]
   2525c:	str	r0, [r4, #16]
   25260:	stm	r3, {r0, r1, r2}
   25264:	str	r4, [r5]
   25268:	str	r4, [r7]
   2526c:	mov	r0, r4
   25270:	sub	sp, fp, #28
   25274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25278:	vld1.32	{d16-d17}, [r7]
   2527c:	mov	r0, r7
   25280:	vmvn	q8, q8
   25284:	vst1.32	{d16-d17}, [r0]!
   25288:	vld1.32	{d16-d17}, [r0]
   2528c:	vmvn	q8, q8
   25290:	vst1.32	{d16-d17}, [r0]
   25294:	ldr	r0, [r6, #92]	; 0x5c
   25298:	cmp	r0, #2
   2529c:	blt	25174 <__assert_fail@plt+0x134c8>
   252a0:	ldm	r7, {r0, r1, r2, ip}
   252a4:	ldr	r5, [r6, #60]	; 0x3c
   252a8:	ldr	r3, [r5]
   252ac:	and	r0, r0, r3
   252b0:	str	r0, [r7]
   252b4:	ldr	r0, [r5, #4]
   252b8:	and	r0, r1, r0
   252bc:	str	r0, [r7, #4]
   252c0:	ldr	r0, [r5, #8]
   252c4:	and	r0, r2, r0
   252c8:	str	r0, [r7, #8]
   252cc:	ldr	r0, [r5, #12]
   252d0:	and	r0, ip, r0
   252d4:	str	r0, [r7, #12]
   252d8:	ldr	r0, [r7, #16]
   252dc:	ldr	r1, [r5, #16]
   252e0:	and	r0, r0, r1
   252e4:	str	r0, [r7, #16]
   252e8:	ldr	r0, [r5, #20]
   252ec:	ldr	r1, [r7, #20]
   252f0:	and	r0, r1, r0
   252f4:	str	r0, [r7, #20]
   252f8:	ldr	r0, [r5, #24]
   252fc:	ldr	r1, [r7, #24]
   25300:	and	r0, r1, r0
   25304:	str	r0, [r7, #24]
   25308:	ldr	r0, [r5, #28]
   2530c:	ldr	r1, [r7, #28]
   25310:	and	r0, r1, r0
   25314:	str	r0, [r7, #28]
   25318:	ldr	r1, [r6, #64]	; 0x40
   2531c:	cmp	r1, #31
   25320:	bne	25180 <__assert_fail@plt+0x134d4>
   25324:	mov	r0, #996	; 0x3e4
   25328:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2532c:	cmp	r0, #0
   25330:	beq	2542c <__assert_fail@plt+0x13780>
   25334:	ldr	r1, [r6, #56]	; 0x38
   25338:	str	r1, [r0]
   2533c:	mov	r1, #0
   25340:	str	r1, [r6, #64]	; 0x40
   25344:	str	r0, [r6, #56]	; 0x38
   25348:	b	25184 <__assert_fail@plt+0x134d8>
   2534c:	ldr	r0, [r8]
   25350:	bl	1bba8 <__assert_fail@plt+0x9efc>
   25354:	ldr	r0, [r8, #4]
   25358:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2535c:	ldr	r0, [r8, #8]
   25360:	bl	1bba8 <__assert_fail@plt+0x9efc>
   25364:	ldr	r0, [r8, #12]
   25368:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2536c:	mov	r0, r8
   25370:	bl	1bba8 <__assert_fail@plt+0x9efc>
   25374:	mov	r4, r5
   25378:	mov	r0, r4
   2537c:	sub	sp, fp, #28
   25380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25384:	mov	r0, #12
   25388:	str	r0, [r1]
   2538c:	mov	r0, r4
   25390:	sub	sp, fp, #28
   25394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25398:	mov	r0, r7
   2539c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   253a0:	ldr	r1, [fp, #12]
   253a4:	mov	r0, #12
   253a8:	mov	r4, #0
   253ac:	str	r0, [r1]
   253b0:	mov	r0, r4
   253b4:	sub	sp, fp, #28
   253b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253bc:	mov	r5, r0
   253c0:	mov	r0, r7
   253c4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   253c8:	ldr	r0, [r8]
   253cc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   253d0:	ldr	r0, [r8, #4]
   253d4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   253d8:	ldr	r0, [r8, #8]
   253dc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   253e0:	ldr	r0, [r8, #12]
   253e4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   253e8:	mov	r0, r8
   253ec:	bl	1bba8 <__assert_fail@plt+0x9efc>
   253f0:	ldr	r0, [fp, #12]
   253f4:	str	r5, [r0]
   253f8:	mov	r0, r4
   253fc:	sub	sp, fp, #28
   25400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25404:	mov	r0, #996	; 0x3e4
   25408:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2540c:	cmp	r0, #0
   25410:	beq	2542c <__assert_fail@plt+0x13780>
   25414:	ldr	r1, [r6, #56]	; 0x38
   25418:	str	r1, [r0]
   2541c:	mov	r1, #0
   25420:	str	r1, [r6, #64]	; 0x40
   25424:	str	r0, [r6, #56]	; 0x38
   25428:	b	251e8 <__assert_fail@plt+0x1353c>
   2542c:	mov	r0, r7
   25430:	bl	1bba8 <__assert_fail@plt+0x9efc>
   25434:	ldr	r0, [r8]
   25438:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2543c:	ldr	r0, [r8, #4]
   25440:	bl	1bba8 <__assert_fail@plt+0x9efc>
   25444:	ldr	r0, [r8, #8]
   25448:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2544c:	ldr	r0, [r8, #12]
   25450:	bl	1bba8 <__assert_fail@plt+0x9efc>
   25454:	mov	r0, r8
   25458:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2545c:	ldr	r1, [fp, #12]
   25460:	mov	r0, #12
   25464:	str	r0, [r1]
   25468:	mov	r0, r4
   2546c:	sub	sp, fp, #28
   25470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25474:	mov	r0, #996	; 0x3e4
   25478:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2547c:	cmp	r0, #0
   25480:	beq	25378 <__assert_fail@plt+0x136cc>
   25484:	ldr	r1, [r6, #56]	; 0x38
   25488:	str	r1, [r0]
   2548c:	mov	r1, #0
   25490:	str	r1, [r6, #64]	; 0x40
   25494:	str	r0, [r6, #56]	; 0x38
   25498:	b	25234 <__assert_fail@plt+0x13588>
   2549c:	push	{fp, lr}
   254a0:	mov	fp, sp
   254a4:	ldr	ip, [r1, #40]	; 0x28
   254a8:	ldr	r3, [r1, #56]	; 0x38
   254ac:	cmp	r3, ip
   254b0:	ble	25530 <__assert_fail@plt+0x13884>
   254b4:	ldr	r3, [r1, #4]
   254b8:	ldrb	lr, [r3, ip]
   254bc:	strb	lr, [r0]
   254c0:	ldr	r3, [r1, #80]	; 0x50
   254c4:	cmp	r3, #2
   254c8:	blt	254ec <__assert_fail@plt+0x13840>
   254cc:	ldr	r3, [r1, #28]
   254d0:	ldr	ip, [r1, #40]	; 0x28
   254d4:	cmp	ip, r3
   254d8:	beq	254ec <__assert_fail@plt+0x13840>
   254dc:	ldr	r3, [r1, #8]
   254e0:	ldr	r3, [r3, ip, lsl #2]
   254e4:	cmn	r3, #1
   254e8:	beq	25604 <__assert_fail@plt+0x13958>
   254ec:	tst	r2, #1
   254f0:	beq	25544 <__assert_fail@plt+0x13898>
   254f4:	cmp	lr, #92	; 0x5c
   254f8:	bne	25544 <__assert_fail@plt+0x13898>
   254fc:	ldr	r2, [r1, #40]	; 0x28
   25500:	ldr	r3, [r1, #48]	; 0x30
   25504:	add	r2, r2, #1
   25508:	cmp	r2, r3
   2550c:	bge	25604 <__assert_fail@plt+0x13958>
   25510:	str	r2, [r1, #40]	; 0x28
   25514:	ldr	r1, [r1, #4]
   25518:	ldrb	r2, [r1, r2]
   2551c:	mov	r1, #1
   25520:	strb	r1, [r0, #4]
   25524:	strb	r2, [r0]
   25528:	mov	r0, r1
   2552c:	pop	{fp, pc}
   25530:	mov	r1, #2
   25534:	strb	r1, [r0, #4]
   25538:	mov	r1, #0
   2553c:	mov	r0, r1
   25540:	pop	{fp, pc}
   25544:	cmp	lr, #92	; 0x5c
   25548:	bgt	255a8 <__assert_fail@plt+0x138fc>
   2554c:	cmp	lr, #45	; 0x2d
   25550:	beq	255cc <__assert_fail@plt+0x13920>
   25554:	cmp	lr, #91	; 0x5b
   25558:	bne	25604 <__assert_fail@plt+0x13958>
   2555c:	ldr	r3, [r1, #40]	; 0x28
   25560:	ldr	ip, [r1, #48]	; 0x30
   25564:	add	r3, r3, #1
   25568:	cmp	r3, ip
   2556c:	bge	255f4 <__assert_fail@plt+0x13948>
   25570:	ldr	r1, [r1, #4]
   25574:	ldrb	r1, [r1, r3]
   25578:	cmp	r1, #61	; 0x3d
   2557c:	strb	r1, [r0]
   25580:	beq	25614 <__assert_fail@plt+0x13968>
   25584:	cmp	r1, #58	; 0x3a
   25588:	beq	25628 <__assert_fail@plt+0x1397c>
   2558c:	cmp	r1, #46	; 0x2e
   25590:	bne	255fc <__assert_fail@plt+0x13950>
   25594:	mov	r1, #26
   25598:	strb	r1, [r0, #4]
   2559c:	mov	r1, #2
   255a0:	mov	r0, r1
   255a4:	pop	{fp, pc}
   255a8:	cmp	lr, #93	; 0x5d
   255ac:	beq	255e0 <__assert_fail@plt+0x13934>
   255b0:	cmp	lr, #94	; 0x5e
   255b4:	bne	25604 <__assert_fail@plt+0x13958>
   255b8:	mov	r1, #25
   255bc:	strb	r1, [r0, #4]
   255c0:	mov	r1, #1
   255c4:	mov	r0, r1
   255c8:	pop	{fp, pc}
   255cc:	mov	r1, #22
   255d0:	strb	r1, [r0, #4]
   255d4:	mov	r1, #1
   255d8:	mov	r0, r1
   255dc:	pop	{fp, pc}
   255e0:	mov	r1, #21
   255e4:	strb	r1, [r0, #4]
   255e8:	mov	r1, #1
   255ec:	mov	r0, r1
   255f0:	pop	{fp, pc}
   255f4:	mov	r1, #0
   255f8:	strb	r1, [r0]
   255fc:	mov	r1, #91	; 0x5b
   25600:	strb	r1, [r0]
   25604:	mov	r1, #1
   25608:	strb	r1, [r0, #4]
   2560c:	mov	r0, r1
   25610:	pop	{fp, pc}
   25614:	mov	r1, #28
   25618:	strb	r1, [r0, #4]
   2561c:	mov	r1, #2
   25620:	mov	r0, r1
   25624:	pop	{fp, pc}
   25628:	tst	r2, #4
   2562c:	beq	255fc <__assert_fail@plt+0x13950>
   25630:	mov	r1, #30
   25634:	strb	r1, [r0, #4]
   25638:	mov	r1, #2
   2563c:	mov	r0, r1
   25640:	pop	{fp, pc}
   25644:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25648:	add	fp, sp, #24
   2564c:	sub	sp, sp, #8
   25650:	mov	r5, r2
   25654:	ldr	r2, [r1, #80]	; 0x50
   25658:	mov	r9, r0
   2565c:	ldr	r0, [r1, #40]	; 0x28
   25660:	cmp	r2, #1
   25664:	beq	256d4 <__assert_fail@plt+0x13a28>
   25668:	ldr	r4, [r1, #28]
   2566c:	add	r2, r0, #1
   25670:	cmp	r2, r4
   25674:	bge	256d4 <__assert_fail@plt+0x13a28>
   25678:	ldr	ip, [r1, #8]
   2567c:	mov	r2, #1
   25680:	add	r6, ip, r0, lsl #2
   25684:	ldr	r7, [r6, r2, lsl #2]
   25688:	cmn	r7, #1
   2568c:	bne	256a4 <__assert_fail@plt+0x139f8>
   25690:	add	r2, r2, #1
   25694:	add	r7, r0, r2
   25698:	cmp	r7, r4
   2569c:	blt	25684 <__assert_fail@plt+0x139d8>
   256a0:	b	256ac <__assert_fail@plt+0x13a00>
   256a4:	cmp	r2, #2
   256a8:	bcc	256d4 <__assert_fail@plt+0x13a28>
   256ac:	mov	r3, #1
   256b0:	str	r3, [r9]
   256b4:	ldr	r0, [ip, r0, lsl #2]
   256b8:	str	r0, [r9, #4]
   256bc:	ldr	r0, [r1, #40]	; 0x28
   256c0:	add	r0, r0, r2
   256c4:	str	r0, [r1, #40]	; 0x28
   256c8:	mov	r0, #0
   256cc:	sub	sp, fp, #24
   256d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   256d4:	add	r2, r0, r3
   256d8:	str	r2, [r1, #40]	; 0x28
   256dc:	ldrb	r6, [r5, #4]
   256e0:	sub	r0, r6, #22
   256e4:	cmp	r0, #8
   256e8:	bhi	25930 <__assert_fail@plt+0x13c84>
   256ec:	add	r3, pc, #0
   256f0:	ldr	pc, [r3, r0, lsl #2]
   256f4:	andeq	r5, r2, r8, lsl #18
   256f8:	andeq	r5, r2, r0, lsr r9
   256fc:	andeq	r5, r2, r0, lsr r9
   25700:	andeq	r5, r2, r0, lsr r9
   25704:	andeq	r5, r2, r8, lsl r7
   25708:	andeq	r5, r2, r0, lsr r9
   2570c:	andeq	r5, r2, r8, lsl r7
   25710:	andeq	r5, r2, r0, lsr r9
   25714:	andeq	r5, r2, r8, lsl r7
   25718:	ldr	r3, [r1, #56]	; 0x38
   2571c:	mov	r0, #7
   25720:	cmp	r3, r2
   25724:	ble	25940 <__assert_fail@plt+0x13c94>
   25728:	ldrb	r3, [r5]
   2572c:	mov	r2, #0
   25730:	uxtb	r7, r6
   25734:	cmp	r7, #30
   25738:	bne	25760 <__assert_fail@plt+0x13ab4>
   2573c:	b	25754 <__assert_fail@plt+0x13aa8>
   25740:	ldrb	r6, [r5, #4]
   25744:	add	r2, r2, #1
   25748:	uxtb	r7, r6
   2574c:	cmp	r7, #30
   25750:	bne	25760 <__assert_fail@plt+0x13ab4>
   25754:	ldrb	r7, [r1, #75]	; 0x4b
   25758:	cmp	r7, #0
   2575c:	bne	257b0 <__assert_fail@plt+0x13b04>
   25760:	ldr	r4, [r1, #40]	; 0x28
   25764:	ldr	r7, [r1, #4]
   25768:	add	r6, r4, #1
   2576c:	str	r6, [r1, #40]	; 0x28
   25770:	ldrb	r4, [r7, r4]
   25774:	ldr	r7, [r1, #56]	; 0x38
   25778:	cmp	r7, r6
   2577c:	ble	25940 <__assert_fail@plt+0x13c94>
   25780:	uxtb	r7, r4
   25784:	cmp	r7, r3
   25788:	bne	2579c <__assert_fail@plt+0x13af0>
   2578c:	ldr	r7, [r1, #4]
   25790:	ldrb	r7, [r7, r6]
   25794:	cmp	r7, #93	; 0x5d
   25798:	beq	258a8 <__assert_fail@plt+0x13bfc>
   2579c:	ldr	r7, [r9, #4]
   257a0:	cmp	r2, #30
   257a4:	strb	r4, [r7, r2]
   257a8:	bls	25740 <__assert_fail@plt+0x13a94>
   257ac:	b	25940 <__assert_fail@plt+0x13c94>
   257b0:	ldrb	r7, [r1, #76]	; 0x4c
   257b4:	cmp	r7, #0
   257b8:	beq	2585c <__assert_fail@plt+0x13bb0>
   257bc:	ldr	lr, [r1, #28]
   257c0:	ldr	ip, [r1, #40]	; 0x28
   257c4:	cmp	ip, lr
   257c8:	beq	257dc <__assert_fail@plt+0x13b30>
   257cc:	ldr	r4, [r1, #8]
   257d0:	ldr	r4, [r4, ip, lsl #2]
   257d4:	cmn	r4, #1
   257d8:	beq	25888 <__assert_fail@plt+0x13bdc>
   257dc:	ldr	r6, [r1, #12]
   257e0:	ldr	r7, [r1, #24]
   257e4:	ldr	r4, [r1]
   257e8:	ldr	r6, [r6, ip, lsl #2]
   257ec:	add	r6, r7, r6
   257f0:	add	r4, r4, r6
   257f4:	ldrsb	r4, [r4]
   257f8:	cmn	r4, #1
   257fc:	ble	25888 <__assert_fail@plt+0x13bdc>
   25800:	ldr	r7, [r1, #80]	; 0x50
   25804:	mov	r6, #1
   25808:	cmp	r7, #1
   2580c:	beq	25844 <__assert_fail@plt+0x13b98>
   25810:	add	r7, ip, #1
   25814:	cmp	r7, lr
   25818:	bge	25844 <__assert_fail@plt+0x13b98>
   2581c:	ldr	r6, [r1, #8]
   25820:	add	r8, r6, ip, lsl #2
   25824:	mov	r6, #1
   25828:	ldr	r7, [r8, r6, lsl #2]
   2582c:	cmn	r7, #1
   25830:	bne	25844 <__assert_fail@plt+0x13b98>
   25834:	add	r6, r6, #1
   25838:	add	r7, ip, r6
   2583c:	cmp	r7, lr
   25840:	blt	25828 <__assert_fail@plt+0x13b7c>
   25844:	add	r6, r6, ip
   25848:	str	r6, [r1, #40]	; 0x28
   2584c:	ldr	r7, [r1, #56]	; 0x38
   25850:	cmp	r7, r6
   25854:	bgt	25780 <__assert_fail@plt+0x13ad4>
   25858:	b	25940 <__assert_fail@plt+0x13c94>
   2585c:	ldr	r7, [r1, #40]	; 0x28
   25860:	ldr	r4, [r1, #24]
   25864:	ldr	ip, [r1]
   25868:	add	r6, r7, #1
   2586c:	add	r7, r7, r4
   25870:	str	r6, [r1, #40]	; 0x28
   25874:	ldrb	r4, [ip, r7]
   25878:	ldr	r7, [r1, #56]	; 0x38
   2587c:	cmp	r7, r6
   25880:	bgt	25780 <__assert_fail@plt+0x13ad4>
   25884:	b	25940 <__assert_fail@plt+0x13c94>
   25888:	add	r6, ip, #1
   2588c:	str	r6, [r1, #40]	; 0x28
   25890:	ldr	r7, [r1, #4]
   25894:	ldrb	r4, [r7, ip]
   25898:	ldr	r7, [r1, #56]	; 0x38
   2589c:	cmp	r7, r6
   258a0:	bgt	25780 <__assert_fail@plt+0x13ad4>
   258a4:	b	25940 <__assert_fail@plt+0x13c94>
   258a8:	add	r0, r6, #1
   258ac:	str	r0, [r1, #40]	; 0x28
   258b0:	mov	r0, #0
   258b4:	ldr	r1, [r9, #4]
   258b8:	strb	r0, [r1, r2]
   258bc:	ldrb	r1, [r5, #4]
   258c0:	cmp	r1, #30
   258c4:	beq	258e8 <__assert_fail@plt+0x13c3c>
   258c8:	cmp	r1, #28
   258cc:	beq	258f8 <__assert_fail@plt+0x13c4c>
   258d0:	cmp	r1, #26
   258d4:	bne	25940 <__assert_fail@plt+0x13c94>
   258d8:	mov	r1, #3
   258dc:	str	r1, [r9]
   258e0:	sub	sp, fp, #24
   258e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   258e8:	mov	r1, #4
   258ec:	str	r1, [r9]
   258f0:	sub	sp, fp, #24
   258f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   258f8:	mov	r1, #2
   258fc:	str	r1, [r9]
   25900:	sub	sp, fp, #24
   25904:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25908:	ldr	r0, [fp, #12]
   2590c:	cmp	r0, #0
   25910:	bne	25930 <__assert_fail@plt+0x13c84>
   25914:	ldr	r2, [fp, #8]
   25918:	mov	r0, sp
   2591c:	bl	2549c <__assert_fail@plt+0x137f0>
   25920:	ldrb	r1, [sp, #4]
   25924:	mov	r0, #11
   25928:	cmp	r1, #21
   2592c:	bne	25940 <__assert_fail@plt+0x13c94>
   25930:	mov	r0, #0
   25934:	str	r0, [r9]
   25938:	ldrb	r1, [r5]
   2593c:	strb	r1, [r9, #4]
   25940:	sub	sp, fp, #24
   25944:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25948:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2594c:	add	fp, sp, #24
   25950:	mov	r8, r0
   25954:	ldrb	r0, [fp, #14]
   25958:	ldr	r6, [fp, #8]
   2595c:	mov	r5, r3
   25960:	mov	r7, r2
   25964:	mov	r4, r1
   25968:	tst	r0, #64	; 0x40
   2596c:	beq	259a8 <__assert_fail@plt+0x13cfc>
   25970:	movw	r1, #14508	; 0x38ac
   25974:	mov	r0, r6
   25978:	movt	r1, #3
   2597c:	bl	1185c <strcmp@plt>
   25980:	cmp	r0, #0
   25984:	beq	259a0 <__assert_fail@plt+0x13cf4>
   25988:	movw	r1, #14514	; 0x38b2
   2598c:	mov	r0, r6
   25990:	movt	r1, #3
   25994:	bl	1185c <strcmp@plt>
   25998:	cmp	r0, #0
   2599c:	bne	259a8 <__assert_fail@plt+0x13cfc>
   259a0:	movw	r6, #14520	; 0x38b8
   259a4:	movt	r6, #3
   259a8:	ldr	r0, [r5]
   259ac:	ldr	r1, [r7, #36]	; 0x24
   259b0:	cmp	r0, r1
   259b4:	beq	25f04 <__assert_fail@plt+0x14258>
   259b8:	mov	r0, r6
   259bc:	bl	1182c <wctype@plt>
   259c0:	ldr	r2, [r7, #36]	; 0x24
   259c4:	ldr	r1, [r7, #12]
   259c8:	add	r3, r2, #1
   259cc:	str	r3, [r7, #36]	; 0x24
   259d0:	str	r0, [r1, r2, lsl #2]
   259d4:	movw	r1, #14494	; 0x389e
   259d8:	mov	r0, r6
   259dc:	movt	r1, #3
   259e0:	bl	1185c <strcmp@plt>
   259e4:	cmp	r0, #0
   259e8:	beq	25b4c <__assert_fail@plt+0x13ea0>
   259ec:	movw	r1, #14526	; 0x38be
   259f0:	mov	r0, r6
   259f4:	movt	r1, #3
   259f8:	bl	1185c <strcmp@plt>
   259fc:	cmp	r0, #0
   25a00:	beq	25ba8 <__assert_fail@plt+0x13efc>
   25a04:	movw	r1, #14514	; 0x38b2
   25a08:	mov	r0, r6
   25a0c:	movt	r1, #3
   25a10:	bl	1185c <strcmp@plt>
   25a14:	cmp	r0, #0
   25a18:	beq	25c04 <__assert_fail@plt+0x13f58>
   25a1c:	movw	r1, #14502	; 0x38a6
   25a20:	mov	r0, r6
   25a24:	movt	r1, #3
   25a28:	bl	1185c <strcmp@plt>
   25a2c:	cmp	r0, #0
   25a30:	beq	25c60 <__assert_fail@plt+0x13fb4>
   25a34:	movw	r1, #14520	; 0x38b8
   25a38:	mov	r0, r6
   25a3c:	movt	r1, #3
   25a40:	bl	1185c <strcmp@plt>
   25a44:	cmp	r0, #0
   25a48:	beq	25cbc <__assert_fail@plt+0x14010>
   25a4c:	movw	r1, #14551	; 0x38d7
   25a50:	mov	r0, r6
   25a54:	movt	r1, #3
   25a58:	bl	1185c <strcmp@plt>
   25a5c:	cmp	r0, #0
   25a60:	beq	25d18 <__assert_fail@plt+0x1406c>
   25a64:	movw	r1, #8619	; 0x21ab
   25a68:	mov	r0, r6
   25a6c:	movt	r1, #3
   25a70:	bl	1185c <strcmp@plt>
   25a74:	cmp	r0, #0
   25a78:	beq	25d74 <__assert_fail@plt+0x140c8>
   25a7c:	movw	r1, #14508	; 0x38ac
   25a80:	mov	r0, r6
   25a84:	movt	r1, #3
   25a88:	bl	1185c <strcmp@plt>
   25a8c:	cmp	r0, #0
   25a90:	beq	25dc4 <__assert_fail@plt+0x14118>
   25a94:	movw	r1, #14532	; 0x38c4
   25a98:	mov	r0, r6
   25a9c:	movt	r1, #3
   25aa0:	bl	1185c <strcmp@plt>
   25aa4:	cmp	r0, #0
   25aa8:	beq	25e14 <__assert_fail@plt+0x14168>
   25aac:	movw	r1, #14538	; 0x38ca
   25ab0:	mov	r0, r6
   25ab4:	movt	r1, #3
   25ab8:	bl	1185c <strcmp@plt>
   25abc:	cmp	r0, #0
   25ac0:	beq	25e64 <__assert_fail@plt+0x141b8>
   25ac4:	movw	r1, #14544	; 0x38d0
   25ac8:	mov	r0, r6
   25acc:	movt	r1, #3
   25ad0:	bl	1185c <strcmp@plt>
   25ad4:	cmp	r0, #0
   25ad8:	beq	25eb4 <__assert_fail@plt+0x14208>
   25adc:	movw	r1, #14550	; 0x38d6
   25ae0:	mov	r0, r6
   25ae4:	movt	r1, #3
   25ae8:	bl	1185c <strcmp@plt>
   25aec:	mov	r1, r0
   25af0:	mov	r0, #4
   25af4:	cmp	r1, #0
   25af8:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   25afc:	bl	11a90 <__ctype_b_loc@plt>
   25b00:	ldr	r1, [r0]
   25b04:	mov	r2, #0
   25b08:	mov	r3, #1
   25b0c:	cmp	r8, #0
   25b10:	bne	2606c <__assert_fail@plt+0x143c0>
   25b14:	ldrb	r0, [r1, #1]
   25b18:	tst	r0, #16
   25b1c:	beq	25b34 <__assert_fail@plt+0x13e88>
   25b20:	ubfx	r0, r2, #5, #3
   25b24:	and	r6, r2, #31
   25b28:	ldr	r7, [r4, r0, lsl #2]
   25b2c:	orr	r7, r7, r3, lsl r6
   25b30:	str	r7, [r4, r0, lsl #2]
   25b34:	add	r2, r2, #1
   25b38:	add	r1, r1, #2
   25b3c:	mov	r0, #0
   25b40:	cmp	r2, #256	; 0x100
   25b44:	bne	25b14 <__assert_fail@plt+0x13e68>
   25b48:	b	25f00 <__assert_fail@plt+0x14254>
   25b4c:	bl	11a90 <__ctype_b_loc@plt>
   25b50:	ldr	r1, [r0]
   25b54:	cmp	r8, #0
   25b58:	bne	25fa8 <__assert_fail@plt+0x142fc>
   25b5c:	mov	r0, #0
   25b60:	mov	r2, #1
   25b64:	ldrb	r3, [r1]
   25b68:	tst	r3, #8
   25b6c:	bne	25b90 <__assert_fail@plt+0x13ee4>
   25b70:	add	r0, r0, #1
   25b74:	add	r1, r1, #2
   25b78:	cmp	r0, #256	; 0x100
   25b7c:	moveq	r0, #0
   25b80:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25b84:	ldrb	r3, [r1]
   25b88:	tst	r3, #8
   25b8c:	beq	25b70 <__assert_fail@plt+0x13ec4>
   25b90:	ubfx	r3, r0, #5, #3
   25b94:	and	r6, r0, #31
   25b98:	ldr	r7, [r4, r3, lsl #2]
   25b9c:	orr	r7, r7, r2, lsl r6
   25ba0:	str	r7, [r4, r3, lsl #2]
   25ba4:	b	25b70 <__assert_fail@plt+0x13ec4>
   25ba8:	bl	11a90 <__ctype_b_loc@plt>
   25bac:	ldr	r1, [r0]
   25bb0:	cmp	r8, #0
   25bb4:	bne	26028 <__assert_fail@plt+0x1437c>
   25bb8:	mov	r0, #0
   25bbc:	mov	r2, #1
   25bc0:	ldrb	r3, [r1]
   25bc4:	tst	r3, #2
   25bc8:	bne	25bec <__assert_fail@plt+0x13f40>
   25bcc:	add	r0, r0, #1
   25bd0:	add	r1, r1, #2
   25bd4:	cmp	r0, #256	; 0x100
   25bd8:	moveq	r0, #0
   25bdc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25be0:	ldrb	r3, [r1]
   25be4:	tst	r3, #2
   25be8:	beq	25bcc <__assert_fail@plt+0x13f20>
   25bec:	ubfx	r3, r0, #5, #3
   25bf0:	and	r6, r0, #31
   25bf4:	ldr	r7, [r4, r3, lsl #2]
   25bf8:	orr	r7, r7, r2, lsl r6
   25bfc:	str	r7, [r4, r3, lsl #2]
   25c00:	b	25bcc <__assert_fail@plt+0x13f20>
   25c04:	bl	11a90 <__ctype_b_loc@plt>
   25c08:	ldr	r1, [r0]
   25c0c:	cmp	r8, #0
   25c10:	bne	260e4 <__assert_fail@plt+0x14438>
   25c14:	mov	r0, #0
   25c18:	mov	r2, #1
   25c1c:	ldrb	r3, [r1, #1]
   25c20:	tst	r3, #2
   25c24:	bne	25c48 <__assert_fail@plt+0x13f9c>
   25c28:	add	r0, r0, #1
   25c2c:	add	r1, r1, #2
   25c30:	cmp	r0, #256	; 0x100
   25c34:	moveq	r0, #0
   25c38:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25c3c:	ldrb	r3, [r1, #1]
   25c40:	tst	r3, #2
   25c44:	beq	25c28 <__assert_fail@plt+0x13f7c>
   25c48:	ubfx	r3, r0, #5, #3
   25c4c:	and	r6, r0, #31
   25c50:	ldr	r7, [r4, r3, lsl #2]
   25c54:	orr	r7, r7, r2, lsl r6
   25c58:	str	r7, [r4, r3, lsl #2]
   25c5c:	b	25c28 <__assert_fail@plt+0x13f7c>
   25c60:	bl	11a90 <__ctype_b_loc@plt>
   25c64:	ldr	r1, [r0]
   25c68:	cmp	r8, #0
   25c6c:	bne	26164 <__assert_fail@plt+0x144b8>
   25c70:	mov	r0, #0
   25c74:	mov	r2, #1
   25c78:	ldrb	r3, [r1, #1]
   25c7c:	tst	r3, #32
   25c80:	bne	25ca4 <__assert_fail@plt+0x13ff8>
   25c84:	add	r0, r0, #1
   25c88:	add	r1, r1, #2
   25c8c:	cmp	r0, #256	; 0x100
   25c90:	moveq	r0, #0
   25c94:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25c98:	ldrb	r3, [r1, #1]
   25c9c:	tst	r3, #32
   25ca0:	beq	25c84 <__assert_fail@plt+0x13fd8>
   25ca4:	ubfx	r3, r0, #5, #3
   25ca8:	and	r6, r0, #31
   25cac:	ldr	r7, [r4, r3, lsl #2]
   25cb0:	orr	r7, r7, r2, lsl r6
   25cb4:	str	r7, [r4, r3, lsl #2]
   25cb8:	b	25c84 <__assert_fail@plt+0x13fd8>
   25cbc:	bl	11a90 <__ctype_b_loc@plt>
   25cc0:	ldr	r1, [r0]
   25cc4:	cmp	r8, #0
   25cc8:	bne	261a8 <__assert_fail@plt+0x144fc>
   25ccc:	mov	r0, #0
   25cd0:	mov	r2, #1
   25cd4:	ldrb	r3, [r1, #1]
   25cd8:	tst	r3, #4
   25cdc:	bne	25d00 <__assert_fail@plt+0x14054>
   25ce0:	add	r0, r0, #1
   25ce4:	add	r1, r1, #2
   25ce8:	cmp	r0, #256	; 0x100
   25cec:	moveq	r0, #0
   25cf0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25cf4:	ldrb	r3, [r1, #1]
   25cf8:	tst	r3, #4
   25cfc:	beq	25ce0 <__assert_fail@plt+0x14034>
   25d00:	ubfx	r3, r0, #5, #3
   25d04:	and	r6, r0, #31
   25d08:	ldr	r7, [r4, r3, lsl #2]
   25d0c:	orr	r7, r7, r2, lsl r6
   25d10:	str	r7, [r4, r3, lsl #2]
   25d14:	b	25ce0 <__assert_fail@plt+0x14034>
   25d18:	bl	11a90 <__ctype_b_loc@plt>
   25d1c:	ldr	r1, [r0]
   25d20:	cmp	r8, #0
   25d24:	bne	261ec <__assert_fail@plt+0x14540>
   25d28:	mov	r0, #0
   25d2c:	mov	r2, #1
   25d30:	ldrb	r3, [r1, #1]
   25d34:	tst	r3, #8
   25d38:	bne	25d5c <__assert_fail@plt+0x140b0>
   25d3c:	add	r0, r0, #1
   25d40:	add	r1, r1, #2
   25d44:	cmp	r0, #256	; 0x100
   25d48:	moveq	r0, #0
   25d4c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25d50:	ldrb	r3, [r1, #1]
   25d54:	tst	r3, #8
   25d58:	beq	25d3c <__assert_fail@plt+0x14090>
   25d5c:	ubfx	r3, r0, #5, #3
   25d60:	and	r6, r0, #31
   25d64:	ldr	r7, [r4, r3, lsl #2]
   25d68:	orr	r7, r7, r2, lsl r6
   25d6c:	str	r7, [r4, r3, lsl #2]
   25d70:	b	25d3c <__assert_fail@plt+0x14090>
   25d74:	bl	11a90 <__ctype_b_loc@plt>
   25d78:	ldr	r1, [r0]
   25d7c:	mov	r2, #0
   25d80:	mov	r3, #1
   25d84:	cmp	r8, #0
   25d88:	bne	25f30 <__assert_fail@plt+0x14284>
   25d8c:	ldrb	r0, [r1, #1]
   25d90:	tst	r0, #64	; 0x40
   25d94:	beq	25dac <__assert_fail@plt+0x14100>
   25d98:	ubfx	r0, r2, #5, #3
   25d9c:	and	r6, r2, #31
   25da0:	ldr	r7, [r4, r0, lsl #2]
   25da4:	orr	r7, r7, r3, lsl r6
   25da8:	str	r7, [r4, r0, lsl #2]
   25dac:	add	r2, r2, #1
   25db0:	add	r1, r1, #2
   25db4:	mov	r0, #0
   25db8:	cmp	r2, #256	; 0x100
   25dbc:	bne	25d8c <__assert_fail@plt+0x140e0>
   25dc0:	b	25f00 <__assert_fail@plt+0x14254>
   25dc4:	bl	11a90 <__ctype_b_loc@plt>
   25dc8:	ldr	r1, [r0]
   25dcc:	mov	r2, #0
   25dd0:	mov	r3, #1
   25dd4:	cmp	r8, #0
   25dd8:	bne	25f6c <__assert_fail@plt+0x142c0>
   25ddc:	ldrb	r0, [r1, #1]
   25de0:	tst	r0, #1
   25de4:	beq	25dfc <__assert_fail@plt+0x14150>
   25de8:	ubfx	r0, r2, #5, #3
   25dec:	and	r6, r2, #31
   25df0:	ldr	r7, [r4, r0, lsl #2]
   25df4:	orr	r7, r7, r3, lsl r6
   25df8:	str	r7, [r4, r0, lsl #2]
   25dfc:	add	r2, r2, #1
   25e00:	add	r1, r1, #2
   25e04:	mov	r0, #0
   25e08:	cmp	r2, #256	; 0x100
   25e0c:	bne	25ddc <__assert_fail@plt+0x14130>
   25e10:	b	25f00 <__assert_fail@plt+0x14254>
   25e14:	bl	11a90 <__ctype_b_loc@plt>
   25e18:	ldr	r1, [r0]
   25e1c:	mov	r2, #0
   25e20:	mov	r3, #1
   25e24:	cmp	r8, #0
   25e28:	bne	25fec <__assert_fail@plt+0x14340>
   25e2c:	ldrb	r0, [r1]
   25e30:	tst	r0, #1
   25e34:	beq	25e4c <__assert_fail@plt+0x141a0>
   25e38:	ubfx	r0, r2, #5, #3
   25e3c:	and	r6, r2, #31
   25e40:	ldr	r7, [r4, r0, lsl #2]
   25e44:	orr	r7, r7, r3, lsl r6
   25e48:	str	r7, [r4, r0, lsl #2]
   25e4c:	add	r2, r2, #1
   25e50:	add	r1, r1, #2
   25e54:	mov	r0, #0
   25e58:	cmp	r2, #256	; 0x100
   25e5c:	bne	25e2c <__assert_fail@plt+0x14180>
   25e60:	b	25f00 <__assert_fail@plt+0x14254>
   25e64:	bl	11a90 <__ctype_b_loc@plt>
   25e68:	ldr	r1, [r0]
   25e6c:	mov	r2, #0
   25e70:	mov	r3, #1
   25e74:	cmp	r8, #0
   25e78:	bne	260a8 <__assert_fail@plt+0x143fc>
   25e7c:	ldrsh	r0, [r1]
   25e80:	cmn	r0, #1
   25e84:	bgt	25e9c <__assert_fail@plt+0x141f0>
   25e88:	ubfx	r0, r2, #5, #3
   25e8c:	and	r6, r2, #31
   25e90:	ldr	r7, [r4, r0, lsl #2]
   25e94:	orr	r7, r7, r3, lsl r6
   25e98:	str	r7, [r4, r0, lsl #2]
   25e9c:	add	r2, r2, #1
   25ea0:	add	r1, r1, #2
   25ea4:	mov	r0, #0
   25ea8:	cmp	r2, #256	; 0x100
   25eac:	bne	25e7c <__assert_fail@plt+0x141d0>
   25eb0:	b	25f00 <__assert_fail@plt+0x14254>
   25eb4:	bl	11a90 <__ctype_b_loc@plt>
   25eb8:	ldr	r1, [r0]
   25ebc:	mov	r2, #0
   25ec0:	mov	r3, #1
   25ec4:	cmp	r8, #0
   25ec8:	bne	26128 <__assert_fail@plt+0x1447c>
   25ecc:	ldrb	r0, [r1]
   25ed0:	tst	r0, #4
   25ed4:	beq	25eec <__assert_fail@plt+0x14240>
   25ed8:	ubfx	r0, r2, #5, #3
   25edc:	and	r6, r2, #31
   25ee0:	ldr	r7, [r4, r0, lsl #2]
   25ee4:	orr	r7, r7, r3, lsl r6
   25ee8:	str	r7, [r4, r0, lsl #2]
   25eec:	add	r2, r2, #1
   25ef0:	add	r1, r1, #2
   25ef4:	mov	r0, #0
   25ef8:	cmp	r2, #256	; 0x100
   25efc:	bne	25ecc <__assert_fail@plt+0x14220>
   25f00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25f04:	mov	r1, #1
   25f08:	orr	r9, r1, r0, lsl #1
   25f0c:	ldr	r0, [r7, #12]
   25f10:	lsl	r1, r9, #2
   25f14:	bl	1bd04 <__assert_fail@plt+0xa058>
   25f18:	cmp	r0, #0
   25f1c:	moveq	r0, #12
   25f20:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25f24:	str	r0, [r7, #12]
   25f28:	str	r9, [r5]
   25f2c:	b	259b8 <__assert_fail@plt+0x13d0c>
   25f30:	ldrb	r0, [r1, #1]
   25f34:	tst	r0, #64	; 0x40
   25f38:	beq	25f54 <__assert_fail@plt+0x142a8>
   25f3c:	ldrb	r0, [r8, r2]
   25f40:	ubfx	r7, r0, #5, #3
   25f44:	and	r0, r0, #31
   25f48:	ldr	r6, [r4, r7, lsl #2]
   25f4c:	orr	r0, r6, r3, lsl r0
   25f50:	str	r0, [r4, r7, lsl #2]
   25f54:	add	r2, r2, #1
   25f58:	add	r1, r1, #2
   25f5c:	mov	r0, #0
   25f60:	cmp	r2, #256	; 0x100
   25f64:	bne	25f30 <__assert_fail@plt+0x14284>
   25f68:	b	25f00 <__assert_fail@plt+0x14254>
   25f6c:	ldrb	r0, [r1, #1]
   25f70:	tst	r0, #1
   25f74:	beq	25f90 <__assert_fail@plt+0x142e4>
   25f78:	ldrb	r0, [r8, r2]
   25f7c:	ubfx	r7, r0, #5, #3
   25f80:	and	r0, r0, #31
   25f84:	ldr	r6, [r4, r7, lsl #2]
   25f88:	orr	r0, r6, r3, lsl r0
   25f8c:	str	r0, [r4, r7, lsl #2]
   25f90:	add	r2, r2, #1
   25f94:	add	r1, r1, #2
   25f98:	mov	r0, #0
   25f9c:	cmp	r2, #256	; 0x100
   25fa0:	bne	25f6c <__assert_fail@plt+0x142c0>
   25fa4:	b	25f00 <__assert_fail@plt+0x14254>
   25fa8:	mov	r2, #0
   25fac:	mov	r3, #1
   25fb0:	ldrb	r0, [r1]
   25fb4:	tst	r0, #8
   25fb8:	beq	25fd4 <__assert_fail@plt+0x14328>
   25fbc:	ldrb	r0, [r8, r2]
   25fc0:	ubfx	r7, r0, #5, #3
   25fc4:	and	r0, r0, #31
   25fc8:	ldr	r6, [r4, r7, lsl #2]
   25fcc:	orr	r0, r6, r3, lsl r0
   25fd0:	str	r0, [r4, r7, lsl #2]
   25fd4:	add	r2, r2, #1
   25fd8:	add	r1, r1, #2
   25fdc:	mov	r0, #0
   25fe0:	cmp	r2, #256	; 0x100
   25fe4:	bne	25fb0 <__assert_fail@plt+0x14304>
   25fe8:	b	25f00 <__assert_fail@plt+0x14254>
   25fec:	ldrb	r0, [r1]
   25ff0:	tst	r0, #1
   25ff4:	beq	26010 <__assert_fail@plt+0x14364>
   25ff8:	ldrb	r0, [r8, r2]
   25ffc:	ubfx	r7, r0, #5, #3
   26000:	and	r0, r0, #31
   26004:	ldr	r6, [r4, r7, lsl #2]
   26008:	orr	r0, r6, r3, lsl r0
   2600c:	str	r0, [r4, r7, lsl #2]
   26010:	add	r2, r2, #1
   26014:	add	r1, r1, #2
   26018:	mov	r0, #0
   2601c:	cmp	r2, #256	; 0x100
   26020:	bne	25fec <__assert_fail@plt+0x14340>
   26024:	b	25f00 <__assert_fail@plt+0x14254>
   26028:	mov	r2, #0
   2602c:	mov	r3, #1
   26030:	ldrb	r0, [r1]
   26034:	tst	r0, #2
   26038:	beq	26054 <__assert_fail@plt+0x143a8>
   2603c:	ldrb	r0, [r8, r2]
   26040:	ubfx	r7, r0, #5, #3
   26044:	and	r0, r0, #31
   26048:	ldr	r6, [r4, r7, lsl #2]
   2604c:	orr	r0, r6, r3, lsl r0
   26050:	str	r0, [r4, r7, lsl #2]
   26054:	add	r2, r2, #1
   26058:	add	r1, r1, #2
   2605c:	mov	r0, #0
   26060:	cmp	r2, #256	; 0x100
   26064:	bne	26030 <__assert_fail@plt+0x14384>
   26068:	b	25f00 <__assert_fail@plt+0x14254>
   2606c:	ldrb	r0, [r1, #1]
   26070:	tst	r0, #16
   26074:	beq	26090 <__assert_fail@plt+0x143e4>
   26078:	ldrb	r0, [r8, r2]
   2607c:	ubfx	r7, r0, #5, #3
   26080:	and	r0, r0, #31
   26084:	ldr	r6, [r4, r7, lsl #2]
   26088:	orr	r0, r6, r3, lsl r0
   2608c:	str	r0, [r4, r7, lsl #2]
   26090:	add	r2, r2, #1
   26094:	add	r1, r1, #2
   26098:	mov	r0, #0
   2609c:	cmp	r2, #256	; 0x100
   260a0:	bne	2606c <__assert_fail@plt+0x143c0>
   260a4:	b	25f00 <__assert_fail@plt+0x14254>
   260a8:	ldrsh	r0, [r1]
   260ac:	cmn	r0, #1
   260b0:	bgt	260cc <__assert_fail@plt+0x14420>
   260b4:	ldrb	r0, [r8, r2]
   260b8:	ubfx	r7, r0, #5, #3
   260bc:	and	r0, r0, #31
   260c0:	ldr	r6, [r4, r7, lsl #2]
   260c4:	orr	r0, r6, r3, lsl r0
   260c8:	str	r0, [r4, r7, lsl #2]
   260cc:	add	r2, r2, #1
   260d0:	add	r1, r1, #2
   260d4:	mov	r0, #0
   260d8:	cmp	r2, #256	; 0x100
   260dc:	bne	260a8 <__assert_fail@plt+0x143fc>
   260e0:	b	25f00 <__assert_fail@plt+0x14254>
   260e4:	mov	r2, #0
   260e8:	mov	r3, #1
   260ec:	ldrb	r0, [r1, #1]
   260f0:	tst	r0, #2
   260f4:	beq	26110 <__assert_fail@plt+0x14464>
   260f8:	ldrb	r0, [r8, r2]
   260fc:	ubfx	r7, r0, #5, #3
   26100:	and	r0, r0, #31
   26104:	ldr	r6, [r4, r7, lsl #2]
   26108:	orr	r0, r6, r3, lsl r0
   2610c:	str	r0, [r4, r7, lsl #2]
   26110:	add	r2, r2, #1
   26114:	add	r1, r1, #2
   26118:	mov	r0, #0
   2611c:	cmp	r2, #256	; 0x100
   26120:	bne	260ec <__assert_fail@plt+0x14440>
   26124:	b	25f00 <__assert_fail@plt+0x14254>
   26128:	ldrb	r0, [r1]
   2612c:	tst	r0, #4
   26130:	beq	2614c <__assert_fail@plt+0x144a0>
   26134:	ldrb	r0, [r8, r2]
   26138:	ubfx	r7, r0, #5, #3
   2613c:	and	r0, r0, #31
   26140:	ldr	r6, [r4, r7, lsl #2]
   26144:	orr	r0, r6, r3, lsl r0
   26148:	str	r0, [r4, r7, lsl #2]
   2614c:	add	r2, r2, #1
   26150:	add	r1, r1, #2
   26154:	mov	r0, #0
   26158:	cmp	r2, #256	; 0x100
   2615c:	bne	26128 <__assert_fail@plt+0x1447c>
   26160:	b	25f00 <__assert_fail@plt+0x14254>
   26164:	mov	r2, #0
   26168:	mov	r3, #1
   2616c:	ldrb	r0, [r1, #1]
   26170:	tst	r0, #32
   26174:	beq	26190 <__assert_fail@plt+0x144e4>
   26178:	ldrb	r0, [r8, r2]
   2617c:	ubfx	r7, r0, #5, #3
   26180:	and	r0, r0, #31
   26184:	ldr	r6, [r4, r7, lsl #2]
   26188:	orr	r0, r6, r3, lsl r0
   2618c:	str	r0, [r4, r7, lsl #2]
   26190:	add	r2, r2, #1
   26194:	add	r1, r1, #2
   26198:	mov	r0, #0
   2619c:	cmp	r2, #256	; 0x100
   261a0:	bne	2616c <__assert_fail@plt+0x144c0>
   261a4:	b	25f00 <__assert_fail@plt+0x14254>
   261a8:	mov	r2, #0
   261ac:	mov	r3, #1
   261b0:	ldrb	r0, [r1, #1]
   261b4:	tst	r0, #4
   261b8:	beq	261d4 <__assert_fail@plt+0x14528>
   261bc:	ldrb	r0, [r8, r2]
   261c0:	ubfx	r7, r0, #5, #3
   261c4:	and	r0, r0, #31
   261c8:	ldr	r6, [r4, r7, lsl #2]
   261cc:	orr	r0, r6, r3, lsl r0
   261d0:	str	r0, [r4, r7, lsl #2]
   261d4:	add	r2, r2, #1
   261d8:	add	r1, r1, #2
   261dc:	mov	r0, #0
   261e0:	cmp	r2, #256	; 0x100
   261e4:	bne	261b0 <__assert_fail@plt+0x14504>
   261e8:	b	25f00 <__assert_fail@plt+0x14254>
   261ec:	mov	r2, #0
   261f0:	mov	r3, #1
   261f4:	ldrb	r0, [r1, #1]
   261f8:	tst	r0, #8
   261fc:	beq	26218 <__assert_fail@plt+0x1456c>
   26200:	ldrb	r0, [r8, r2]
   26204:	ubfx	r7, r0, #5, #3
   26208:	and	r0, r0, #31
   2620c:	ldr	r6, [r4, r7, lsl #2]
   26210:	orr	r0, r6, r3, lsl r0
   26214:	str	r0, [r4, r7, lsl #2]
   26218:	add	r2, r2, #1
   2621c:	add	r1, r1, #2
   26220:	mov	r0, #0
   26224:	cmp	r2, #256	; 0x100
   26228:	bne	261f4 <__assert_fail@plt+0x14548>
   2622c:	b	25f00 <__assert_fail@plt+0x14254>
   26230:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26234:	add	fp, sp, #24
   26238:	ldrb	r3, [r1, #24]
   2623c:	ldr	r2, [r1, #28]
   26240:	mov	r4, #0
   26244:	sub	r3, r3, #2
   26248:	cmp	r3, #14
   2624c:	bhi	26370 <__assert_fail@plt+0x146c4>
   26250:	add	r7, pc, #0
   26254:	ldr	pc, [r7, r3, lsl #2]
   26258:	andeq	r6, r2, r4, lsr #7
   2625c:	andeq	r6, r2, r0, ror r3
   26260:	andeq	r6, r2, r8, lsl #7
   26264:	andeq	r6, r2, r0, ror r3
   26268:	andeq	r6, r2, r0, ror r3
   2626c:	andeq	r6, r2, r0, ror r3
   26270:	muleq	r2, r4, r2
   26274:	muleq	r2, r4, r2
   26278:	andeq	r6, r2, r8, ror #5
   2627c:	andeq	r6, r2, r8, ror #5
   26280:	muleq	r2, r4, r2
   26284:	andeq	r6, r2, r0, ror r3
   26288:	andeq	r6, r2, r0, ror r3
   2628c:	andeq	r6, r2, r0, ror r3
   26290:	andeq	r6, r2, r4, lsr #7
   26294:	ldr	r1, [r1, #16]
   26298:	ldr	r5, [r1, #28]
   2629c:	ldr	r6, [r0, #20]
   262a0:	add	r0, r2, r2, lsl #1
   262a4:	mov	r1, #1
   262a8:	str	r1, [r6, r0, lsl #2]!
   262ac:	mov	r0, #4
   262b0:	mov	r7, r6
   262b4:	str	r1, [r7, #4]!
   262b8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   262bc:	cmp	r0, #0
   262c0:	str	r0, [r6, #8]
   262c4:	strne	r5, [r0]
   262c8:	movne	r0, r4
   262cc:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   262d0:	mov	r0, #0
   262d4:	str	r0, [r7]
   262d8:	str	r0, [r6]
   262dc:	mov	r4, #12
   262e0:	mov	r0, r4
   262e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   262e8:	ldrb	r3, [r0, #88]	; 0x58
   262ec:	add	r6, r1, #16
   262f0:	add	r5, r2, r2, lsl #1
   262f4:	orr	r3, r3, #1
   262f8:	strb	r3, [r0, #88]	; 0x58
   262fc:	mov	r3, r6
   26300:	ldr	r7, [r1, #4]
   26304:	ldr	r1, [r1, #8]
   26308:	cmp	r1, #0
   2630c:	addne	r3, r1, #12
   26310:	cmp	r7, #0
   26314:	ldr	r1, [r3]
   26318:	addne	r6, r7, #12
   2631c:	ldr	r8, [r1, #28]
   26320:	ldr	r1, [r6]
   26324:	ldr	r6, [r0, #20]
   26328:	mov	r0, #2
   2632c:	ldr	r9, [r1, #28]
   26330:	mov	r7, r6
   26334:	str	r0, [r7, r5, lsl #2]!
   26338:	mov	r0, #8
   2633c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   26340:	cmp	r0, #0
   26344:	str	r0, [r7, #8]
   26348:	beq	262dc <__assert_fail@plt+0x14630>
   2634c:	add	r1, r6, r5, lsl #2
   26350:	cmp	r9, r8
   26354:	add	r1, r1, #4
   26358:	bne	263ac <__assert_fail@plt+0x14700>
   2635c:	mov	r2, #1
   26360:	str	r2, [r1]
   26364:	str	r9, [r0]
   26368:	mov	r0, r4
   2636c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26370:	ldr	r1, [r1, #16]
   26374:	ldr	r0, [r0, #12]
   26378:	ldr	r1, [r1, #28]
   2637c:	str	r1, [r0, r2, lsl #2]
   26380:	mov	r0, r4
   26384:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26388:	ldr	r7, [r1, #16]
   2638c:	ldr	r3, [r0, #12]
   26390:	ldr	r5, [r7, #28]
   26394:	str	r5, [r3, r2, lsl #2]
   26398:	ldrb	r1, [r1, #24]
   2639c:	cmp	r1, #4
   263a0:	beq	2629c <__assert_fail@plt+0x145f0>
   263a4:	mov	r0, r4
   263a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   263ac:	mov	r2, #2
   263b0:	str	r2, [r1]
   263b4:	stmge	r0, {r8, r9}
   263b8:	strlt	r9, [r0]
   263bc:	strlt	r8, [r0, #4]
   263c0:	mov	r0, r4
   263c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   263c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263cc:	add	fp, sp, #28
   263d0:	sub	sp, sp, #4
   263d4:	ldr	r6, [r3, #4]
   263d8:	tst	r2, #16
   263dc:	mov	r9, r3
   263e0:	mov	r7, r1
   263e4:	mov	r8, r0
   263e8:	cmpne	r6, #0
   263ec:	bne	265a4 <__assert_fail@plt+0x148f8>
   263f0:	ldr	r1, [r7, #64]	; 0x40
   263f4:	cmp	r1, #31
   263f8:	beq	265cc <__assert_fail@plt+0x14920>
   263fc:	ldr	r0, [r7, #56]	; 0x38
   26400:	add	r2, r1, #1
   26404:	add	r0, r0, r1, lsl #5
   26408:	mov	r1, #0
   2640c:	vmov.i32	q8, #0	; 0x00000000
   26410:	str	r2, [r7, #64]	; 0x40
   26414:	add	sl, r0, #4
   26418:	mov	r2, #8
   2641c:	str	r1, [r0, #20]
   26420:	str	r1, [r0, #24]
   26424:	str	r2, [r0, #28]
   26428:	mov	r0, #28
   2642c:	mov	r1, sl
   26430:	vst1.32	{d16-d17}, [r1], r0
   26434:	mvn	r0, #0
   26438:	str	r0, [r1]
   2643c:	ldr	r1, [r7, #64]	; 0x40
   26440:	cmp	r1, #31
   26444:	beq	2662c <__assert_fail@plt+0x14980>
   26448:	ldr	r0, [r7, #56]	; 0x38
   2644c:	add	r2, r1, #1
   26450:	add	r0, r0, r1, lsl #5
   26454:	mov	r1, #0
   26458:	vmov.i32	q8, #0	; 0x00000000
   2645c:	str	r2, [r7, #64]	; 0x40
   26460:	add	r5, r0, #4
   26464:	mov	r2, #9
   26468:	str	r1, [r0, #20]
   2646c:	str	r1, [r0, #24]
   26470:	str	r2, [r0, #28]
   26474:	mov	r0, #28
   26478:	mov	r1, r5
   2647c:	vst1.32	{d16-d17}, [r1], r0
   26480:	mvn	r0, #0
   26484:	str	r0, [r1]
   26488:	cmp	r6, #0
   2648c:	mov	r4, r5
   26490:	beq	264e4 <__assert_fail@plt+0x14838>
   26494:	ldr	r1, [r7, #64]	; 0x40
   26498:	cmp	r1, #31
   2649c:	beq	265f4 <__assert_fail@plt+0x14948>
   264a0:	ldr	r0, [r7, #56]	; 0x38
   264a4:	add	r2, r1, #1
   264a8:	add	r4, r0, r1, lsl #5
   264ac:	mov	r0, #0
   264b0:	mov	r1, #16
   264b4:	cmp	r5, #0
   264b8:	str	r2, [r7, #64]	; 0x40
   264bc:	str	r0, [r4, #4]!
   264c0:	mvn	r2, #0
   264c4:	add	r3, r4, #20
   264c8:	str	r6, [r4, #4]
   264cc:	str	r5, [r4, #8]
   264d0:	str	r0, [r4, #12]
   264d4:	str	r0, [r4, #16]
   264d8:	stm	r3, {r0, r1, r2}
   264dc:	str	r4, [r6]
   264e0:	strne	r4, [r5]
   264e4:	ldr	r1, [r7, #64]	; 0x40
   264e8:	cmp	r1, #31
   264ec:	beq	26678 <__assert_fail@plt+0x149cc>
   264f0:	ldr	r0, [r7, #56]	; 0x38
   264f4:	add	r2, r1, #1
   264f8:	add	r6, r0, r1, lsl #5
   264fc:	mov	r0, #0
   26500:	mov	r1, #16
   26504:	cmp	sl, #0
   26508:	str	r2, [r7, #64]	; 0x40
   2650c:	str	r0, [r6, #4]!
   26510:	mvn	r2, #0
   26514:	add	r3, r6, #20
   26518:	str	sl, [r6, #4]
   2651c:	str	r4, [r6, #8]
   26520:	str	r0, [r6, #12]
   26524:	str	r0, [r6, #16]
   26528:	stm	r3, {r0, r1, r2}
   2652c:	strne	r6, [sl]
   26530:	cmp	r4, #0
   26534:	strne	r6, [r4]
   26538:	cmp	r5, #0
   2653c:	beq	2654c <__assert_fail@plt+0x148a0>
   26540:	cmp	sl, #0
   26544:	cmpne	r4, #0
   26548:	bne	26564 <__assert_fail@plt+0x148b8>
   2654c:	mov	r0, #12
   26550:	mov	r6, #0
   26554:	str	r0, [r8]
   26558:	mov	r0, r6
   2655c:	sub	sp, fp, #28
   26560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26564:	cmp	r6, #0
   26568:	beq	2654c <__assert_fail@plt+0x148a0>
   2656c:	ldr	r0, [r9, #20]
   26570:	str	r0, [r5, #20]
   26574:	str	r0, [sl, #20]
   26578:	ldr	r1, [r9, #24]
   2657c:	ldr	r0, [r5, #24]
   26580:	lsr	r1, r1, #19
   26584:	bfi	r0, r1, #19, #1
   26588:	str	r0, [r5, #24]
   2658c:	ldr	r0, [sl, #24]
   26590:	bfi	r0, r1, #19, #1
   26594:	str	r0, [sl, #24]
   26598:	mov	r0, r6
   2659c:	sub	sp, fp, #28
   265a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265a4:	ldr	r0, [r9, #20]
   265a8:	cmp	r0, #31
   265ac:	bgt	265c0 <__assert_fail@plt+0x14914>
   265b0:	ldr	r1, [r7, #80]	; 0x50
   265b4:	mov	r2, #1
   265b8:	tst	r1, r2, lsl r0
   265bc:	bne	263f0 <__assert_fail@plt+0x14744>
   265c0:	mov	r0, r6
   265c4:	sub	sp, fp, #28
   265c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265cc:	mov	r0, #996	; 0x3e4
   265d0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   265d4:	cmp	r0, #0
   265d8:	beq	2661c <__assert_fail@plt+0x14970>
   265dc:	ldr	r1, [r7, #56]	; 0x38
   265e0:	str	r1, [r0]
   265e4:	mov	r1, #0
   265e8:	str	r1, [r7, #64]	; 0x40
   265ec:	str	r0, [r7, #56]	; 0x38
   265f0:	b	26400 <__assert_fail@plt+0x14754>
   265f4:	mov	r0, #996	; 0x3e4
   265f8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   265fc:	cmp	r0, #0
   26600:	beq	26668 <__assert_fail@plt+0x149bc>
   26604:	ldr	r1, [r7, #56]	; 0x38
   26608:	str	r1, [r0]
   2660c:	mov	r1, #0
   26610:	str	r1, [r7, #64]	; 0x40
   26614:	str	r0, [r7, #56]	; 0x38
   26618:	b	264a4 <__assert_fail@plt+0x147f8>
   2661c:	mov	sl, #0
   26620:	ldr	r1, [r7, #64]	; 0x40
   26624:	cmp	r1, #31
   26628:	bne	26448 <__assert_fail@plt+0x1479c>
   2662c:	mov	r0, #996	; 0x3e4
   26630:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   26634:	cmp	r0, #0
   26638:	beq	26654 <__assert_fail@plt+0x149a8>
   2663c:	ldr	r1, [r7, #56]	; 0x38
   26640:	str	r1, [r0]
   26644:	mov	r1, #0
   26648:	str	r1, [r7, #64]	; 0x40
   2664c:	str	r0, [r7, #56]	; 0x38
   26650:	b	2644c <__assert_fail@plt+0x147a0>
   26654:	mov	r5, #0
   26658:	cmp	r6, #0
   2665c:	mov	r4, r5
   26660:	bne	26494 <__assert_fail@plt+0x147e8>
   26664:	b	264e4 <__assert_fail@plt+0x14838>
   26668:	mov	r4, #0
   2666c:	ldr	r1, [r7, #64]	; 0x40
   26670:	cmp	r1, #31
   26674:	bne	264f0 <__assert_fail@plt+0x14844>
   26678:	mov	r0, #996	; 0x3e4
   2667c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   26680:	cmp	r0, #0
   26684:	beq	266a0 <__assert_fail@plt+0x149f4>
   26688:	ldr	r1, [r7, #56]	; 0x38
   2668c:	str	r1, [r0]
   26690:	mov	r1, #0
   26694:	str	r1, [r7, #64]	; 0x40
   26698:	str	r0, [r7, #56]	; 0x38
   2669c:	b	264f4 <__assert_fail@plt+0x14848>
   266a0:	mov	r6, #0
   266a4:	cmp	r5, #0
   266a8:	bne	26540 <__assert_fail@plt+0x14894>
   266ac:	b	2654c <__assert_fail@plt+0x148a0>
   266b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266b4:	add	fp, sp, #28
   266b8:	sub	sp, sp, #12
   266bc:	mov	r4, r0
   266c0:	ldr	r7, [r0, #4]
   266c4:	ldr	r0, [r0, #8]
   266c8:	mov	r5, r2
   266cc:	mov	r9, r1
   266d0:	cmp	r0, r7
   266d4:	bcs	267a0 <__assert_fail@plt+0x14af4>
   266d8:	ldr	r1, [r4]
   266dc:	str	r9, [r1, r0, lsl #3]!
   266e0:	str	r5, [r1, #4]
   266e4:	ldr	r0, [r4]
   266e8:	ldr	r1, [r4, #8]
   266ec:	add	r0, r0, r1, lsl #3
   266f0:	ldr	r1, [r0, #4]
   266f4:	bfc	r1, #8, #10
   266f8:	str	r1, [r0, #4]
   266fc:	uxtb	r1, r5
   26700:	cmp	r1, #5
   26704:	bne	26718 <__assert_fail@plt+0x14a6c>
   26708:	ldr	r2, [r4, #92]	; 0x5c
   2670c:	mov	r0, #1048576	; 0x100000
   26710:	cmp	r2, #1
   26714:	bgt	26728 <__assert_fail@plt+0x14a7c>
   26718:	sub	r0, r1, #6
   2671c:	clz	r0, r0
   26720:	lsr	r0, r0, #5
   26724:	lsl	r0, r0, #20
   26728:	ldr	r1, [r4]
   2672c:	ldr	r2, [r4, #8]
   26730:	add	r1, r1, r2, lsl #3
   26734:	ldr	r2, [r1, #4]
   26738:	bic	r2, r2, #1048576	; 0x100000
   2673c:	orr	r0, r2, r0
   26740:	mvn	r2, #0
   26744:	str	r0, [r1, #4]
   26748:	ldr	r0, [r4, #8]
   2674c:	ldr	r1, [r4, #12]
   26750:	str	r2, [r1, r0, lsl #2]
   26754:	mov	r2, #0
   26758:	ldr	r0, [r4, #8]
   2675c:	ldr	r1, [r4, #20]
   26760:	add	r0, r0, r0, lsl #1
   26764:	str	r2, [r1, r0, lsl #2]!
   26768:	str	r2, [r1, #4]
   2676c:	str	r2, [r1, #8]
   26770:	ldr	r0, [r4, #8]
   26774:	ldr	r1, [r4, #24]
   26778:	add	r0, r0, r0, lsl #1
   2677c:	str	r2, [r1, r0, lsl #2]!
   26780:	str	r2, [r1, #4]
   26784:	str	r2, [r1, #8]
   26788:	ldr	r6, [r4, #8]
   2678c:	add	r0, r6, #1
   26790:	str	r0, [r4, #8]
   26794:	mov	r0, r6
   26798:	sub	sp, fp, #28
   2679c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267a0:	movw	r0, #21845	; 0x5555
   267a4:	lsl	r1, r7, #1
   267a8:	mvn	r6, #0
   267ac:	movt	r0, #5461	; 0x1555
   267b0:	cmp	r1, r0
   267b4:	bhi	26794 <__assert_fail@plt+0x14ae8>
   267b8:	ldr	r0, [r4]
   267bc:	str	r1, [sp, #8]
   267c0:	lsl	r1, r7, #4
   267c4:	bl	1bd04 <__assert_fail@plt+0xa058>
   267c8:	cmp	r0, #0
   267cc:	beq	26794 <__assert_fail@plt+0x14ae8>
   267d0:	str	r0, [r4]
   267d4:	lsl	r8, r7, #3
   267d8:	ldr	r0, [r4, #12]
   267dc:	mov	r1, r8
   267e0:	bl	1bd04 <__assert_fail@plt+0xa058>
   267e4:	str	r0, [sp, #4]
   267e8:	ldr	r0, [r4, #16]
   267ec:	mov	r1, r8
   267f0:	bl	1bd04 <__assert_fail@plt+0xa058>
   267f4:	mov	r2, r0
   267f8:	ldr	r0, [r4, #20]
   267fc:	add	r1, r7, r7, lsl #1
   26800:	lsl	r8, r1, #3
   26804:	mov	r7, r2
   26808:	mov	r1, r8
   2680c:	bl	1bd04 <__assert_fail@plt+0xa058>
   26810:	mov	sl, r0
   26814:	ldr	r0, [r4, #24]
   26818:	mov	r1, r8
   2681c:	bl	1bd04 <__assert_fail@plt+0xa058>
   26820:	mov	r8, r0
   26824:	ldr	r0, [sp, #4]
   26828:	cmp	r0, #0
   2682c:	beq	2683c <__assert_fail@plt+0x14b90>
   26830:	cmp	r7, #0
   26834:	cmpne	sl, #0
   26838:	bne	26864 <__assert_fail@plt+0x14bb8>
   2683c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   26840:	mov	r0, r7
   26844:	bl	1bba8 <__assert_fail@plt+0x9efc>
   26848:	mov	r0, sl
   2684c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   26850:	mov	r0, r8
   26854:	bl	1bba8 <__assert_fail@plt+0x9efc>
   26858:	mov	r0, r6
   2685c:	sub	sp, fp, #28
   26860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26864:	cmp	r8, #0
   26868:	beq	2683c <__assert_fail@plt+0x14b90>
   2686c:	add	r1, r4, #12
   26870:	stm	r1, {r0, r7, sl}
   26874:	str	r8, [r4, #24]
   26878:	ldr	r0, [sp, #8]
   2687c:	str	r0, [r4, #4]
   26880:	ldr	r0, [r4, #8]
   26884:	b	266d8 <__assert_fail@plt+0x14a2c>
   26888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2688c:	add	fp, sp, #28
   26890:	sub	sp, sp, #44	; 0x2c
   26894:	mov	r8, r0
   26898:	ldr	r0, [r1, #20]
   2689c:	add	r4, r2, r2, lsl #1
   268a0:	mov	r5, r1
   268a4:	mov	r1, #0
   268a8:	mov	r9, r3
   268ac:	mov	r6, r2
   268b0:	add	r0, r0, r4, lsl #2
   268b4:	ldr	r0, [r0, #4]
   268b8:	str	r1, [sp, #36]	; 0x24
   268bc:	add	r0, r0, #1
   268c0:	str	r0, [sp, #32]
   268c4:	lsl	r0, r0, #2
   268c8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   268cc:	cmp	r0, #0
   268d0:	str	r0, [sp, #40]	; 0x28
   268d4:	beq	26a9c <__assert_fail@plt+0x14df0>
   268d8:	mov	r1, #1
   268dc:	str	r6, [r0]
   268e0:	str	r1, [sp, #36]	; 0x24
   268e4:	mvn	r1, #0
   268e8:	ldr	r0, [r5, #24]
   268ec:	add	r0, r0, r4, lsl #2
   268f0:	str	r1, [r0, #4]
   268f4:	ldr	r2, [r5]
   268f8:	add	r0, r2, r6, lsl #3
   268fc:	ldr	r0, [r0, #4]
   26900:	ubfx	r1, r0, #8, #10
   26904:	cmp	r1, #0
   26908:	beq	26964 <__assert_fail@plt+0x14cb8>
   2690c:	ldr	r3, [r5, #20]
   26910:	add	r3, r3, r4, lsl #2
   26914:	ldr	r7, [r3, #4]
   26918:	cmp	r7, #0
   2691c:	beq	26964 <__assert_fail@plt+0x14cb8>
   26920:	ldr	r3, [r3, #8]
   26924:	ldr	r3, [r3]
   26928:	add	r2, r2, r3, lsl #3
   2692c:	ldrb	r2, [r2, #6]
   26930:	tst	r2, #4
   26934:	bne	26964 <__assert_fail@plt+0x14cb8>
   26938:	str	r1, [sp]
   2693c:	mov	r0, r5
   26940:	mov	r1, r6
   26944:	mov	r2, r6
   26948:	mov	r3, r6
   2694c:	bl	26aa8 <__assert_fail@plt+0x14dfc>
   26950:	cmp	r0, #0
   26954:	bne	26a94 <__assert_fail@plt+0x14de8>
   26958:	ldr	r0, [r5]
   2695c:	add	r0, r0, r6, lsl #3
   26960:	ldr	r0, [r0, #4]
   26964:	tst	r0, #8
   26968:	beq	26a68 <__assert_fail@plt+0x14dbc>
   2696c:	ldr	r0, [r5, #20]
   26970:	add	r1, r0, r4, lsl #2
   26974:	ldr	r1, [r1, #4]
   26978:	cmp	r1, #1
   2697c:	blt	26a68 <__assert_fail@plt+0x14dbc>
   26980:	str	r8, [sp, #12]
   26984:	mov	r8, #0
   26988:	add	r7, sp, #16
   2698c:	add	sl, sp, #32
   26990:	mov	r6, #0
   26994:	str	r9, [sp, #8]
   26998:	add	r0, r0, r4, lsl #2
   2699c:	ldr	r0, [r0, #8]
   269a0:	ldr	r2, [r0, r6, lsl #2]
   269a4:	ldr	r0, [r5, #24]
   269a8:	add	r9, r2, r2, lsl #1
   269ac:	add	r0, r0, r9, lsl #2
   269b0:	ldr	r1, [r0, #4]
   269b4:	cmn	r1, #1
   269b8:	beq	26a20 <__assert_fail@plt+0x14d74>
   269bc:	cmp	r1, #0
   269c0:	bne	269e0 <__assert_fail@plt+0x14d34>
   269c4:	mov	r0, r7
   269c8:	mov	r1, r5
   269cc:	mov	r3, #0
   269d0:	bl	26888 <__assert_fail@plt+0x14bdc>
   269d4:	cmp	r0, #0
   269d8:	beq	269f0 <__assert_fail@plt+0x14d44>
   269dc:	b	26a94 <__assert_fail@plt+0x14de8>
   269e0:	vldr	d16, [r0]
   269e4:	ldr	r0, [r0, #8]
   269e8:	str	r0, [sp, #24]
   269ec:	vstr	d16, [sp, #16]
   269f0:	mov	r0, sl
   269f4:	mov	r1, r7
   269f8:	bl	26f6c <__assert_fail@plt+0x152c0>
   269fc:	cmp	r0, #0
   26a00:	bne	26a94 <__assert_fail@plt+0x14de8>
   26a04:	ldr	r0, [r5, #24]
   26a08:	add	r0, r0, r9, lsl #2
   26a0c:	ldr	r0, [r0, #4]
   26a10:	cmp	r0, #0
   26a14:	bne	26a24 <__assert_fail@plt+0x14d78>
   26a18:	ldr	r0, [sp, #24]
   26a1c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   26a20:	mov	r8, #1
   26a24:	ldr	r0, [r5, #20]
   26a28:	add	r6, r6, #1
   26a2c:	add	r1, r0, r4, lsl #2
   26a30:	ldr	r1, [r1, #4]
   26a34:	cmp	r6, r1
   26a38:	blt	26998 <__assert_fail@plt+0x14cec>
   26a3c:	tst	r8, #1
   26a40:	ldr	r8, [sp, #12]
   26a44:	ldr	r0, [sp, #8]
   26a48:	beq	26a68 <__assert_fail@plt+0x14dbc>
   26a4c:	cmp	r0, #0
   26a50:	bne	26a68 <__assert_fail@plt+0x14dbc>
   26a54:	ldr	r0, [r5, #24]
   26a58:	mov	r1, #0
   26a5c:	add	r0, r0, r4, lsl #2
   26a60:	str	r1, [r0, #4]
   26a64:	b	26a80 <__assert_fail@plt+0x14dd4>
   26a68:	ldr	r0, [r5, #24]
   26a6c:	vldr	d16, [sp, #32]
   26a70:	ldr	r1, [sp, #40]	; 0x28
   26a74:	add	r0, r0, r4, lsl #2
   26a78:	str	r1, [r0, #8]
   26a7c:	vstr	d16, [r0]
   26a80:	ldr	r0, [sp, #40]	; 0x28
   26a84:	vldr	d16, [sp, #32]
   26a88:	str	r0, [r8, #8]
   26a8c:	mov	r0, #0
   26a90:	vstr	d16, [r8]
   26a94:	sub	sp, fp, #28
   26a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a9c:	mov	r0, #12
   26aa0:	sub	sp, fp, #28
   26aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26aac:	add	fp, sp, #28
   26ab0:	sub	sp, sp, #20
   26ab4:	mov	r9, r0
   26ab8:	ldr	r0, [fp, #8]
   26abc:	mov	sl, r2
   26ac0:	mov	r8, r1
   26ac4:	str	r3, [sp, #8]
   26ac8:	str	r0, [sp, #16]
   26acc:	ldr	r2, [r9]
   26ad0:	add	r3, r2, r8, lsl #3
   26ad4:	ldrb	r0, [r3, #4]!
   26ad8:	cmp	r0, #4
   26adc:	bne	26bcc <__assert_fail@plt+0x14f20>
   26ae0:	ldr	r0, [r9, #12]
   26ae4:	ldr	r1, [r9, #20]
   26ae8:	add	r6, sl, sl, lsl #1
   26aec:	ldr	r4, [r0, r8, lsl #2]
   26af0:	add	r0, r1, r6, lsl #2
   26af4:	mov	r1, #0
   26af8:	str	r1, [r0, #4]
   26afc:	mov	r0, r9
   26b00:	ldr	r1, [r2, r4, lsl #3]!
   26b04:	ldr	r2, [r2, #4]
   26b08:	bl	266b0 <__assert_fail@plt+0x14a04>
   26b0c:	mov	r7, r0
   26b10:	mov	r0, #12
   26b14:	cmn	r7, #1
   26b18:	str	r0, [sp, #12]
   26b1c:	beq	26f40 <__assert_fail@plt+0x15294>
   26b20:	ldr	r1, [r9]
   26b24:	movw	r0, #65280	; 0xff00
   26b28:	movw	r3, #255	; 0xff
   26b2c:	movt	r0, #3
   26b30:	movt	r3, #65532	; 0xfffc
   26b34:	mov	ip, r0
   26b38:	ldr	r0, [sp, #16]
   26b3c:	add	r1, r1, r7, lsl #3
   26b40:	ldr	r2, [r1, #4]
   26b44:	and	r0, ip, r0, lsl #8
   26b48:	and	r2, r2, r3
   26b4c:	orr	r0, r2, r0
   26b50:	str	r0, [r1, #4]
   26b54:	ldr	r0, [r9]
   26b58:	add	r1, r0, r4, lsl #3
   26b5c:	add	r0, r0, r7, lsl #3
   26b60:	ldr	r1, [r1, #4]
   26b64:	ldr	r2, [r0, #4]
   26b68:	and	r1, r1, ip
   26b6c:	orr	r1, r1, r2
   26b70:	str	r1, [r0, #4]
   26b74:	ldr	r0, [r9]
   26b78:	add	r0, r0, r7, lsl #3
   26b7c:	ldr	r1, [r0, #4]
   26b80:	orr	r1, r1, #262144	; 0x40000
   26b84:	str	r1, [r0, #4]
   26b88:	ldr	r0, [r9, #16]
   26b8c:	str	r4, [r0, r7, lsl #2]
   26b90:	ldr	r0, [r9, #12]
   26b94:	ldr	r1, [r0, r8, lsl #2]
   26b98:	str	r1, [r0, sl, lsl #2]
   26b9c:	mov	r1, r7
   26ba0:	ldr	r0, [r9, #20]
   26ba4:	add	r0, r0, r6, lsl #2
   26ba8:	bl	27114 <__assert_fail@plt+0x15468>
   26bac:	mov	r1, #0
   26bb0:	cmp	r0, #0
   26bb4:	mov	r8, r4
   26bb8:	mov	sl, r7
   26bbc:	beq	26f40 <__assert_fail@plt+0x15294>
   26bc0:	cmp	r1, #0
   26bc4:	beq	26acc <__assert_fail@plt+0x14e20>
   26bc8:	b	26f30 <__assert_fail@plt+0x15284>
   26bcc:	ldr	r0, [r9, #20]
   26bd0:	add	ip, r8, r8, lsl #1
   26bd4:	add	r7, r0, ip, lsl #2
   26bd8:	ldr	r1, [r7, #4]
   26bdc:	cmp	r1, #0
   26be0:	beq	26f4c <__assert_fail@plt+0x152a0>
   26be4:	ldr	r7, [r7, #8]
   26be8:	add	r6, sl, sl, lsl #1
   26bec:	cmp	r1, #1
   26bf0:	add	r0, r0, r6, lsl #2
   26bf4:	ldr	r5, [r7]
   26bf8:	mov	r7, #0
   26bfc:	str	r7, [r0, #4]
   26c00:	bne	26c3c <__assert_fail@plt+0x14f90>
   26c04:	ldr	r1, [sp, #8]
   26c08:	cmp	r8, r1
   26c0c:	bne	26e3c <__assert_fail@plt+0x15190>
   26c10:	cmp	sl, r8
   26c14:	beq	26e3c <__assert_fail@plt+0x15190>
   26c18:	mov	r1, r5
   26c1c:	bl	27114 <__assert_fail@plt+0x15468>
   26c20:	ldr	r8, [sp, #8]
   26c24:	cmp	r0, #0
   26c28:	mov	r1, #1
   26c2c:	movwne	r1, #2
   26c30:	cmp	r1, #0
   26c34:	beq	26acc <__assert_fail@plt+0x14e20>
   26c38:	b	26f30 <__assert_fail@plt+0x15284>
   26c3c:	ldr	r1, [r9, #8]
   26c40:	ldr	r8, [sp, #16]
   26c44:	str	r6, [sp, #4]
   26c48:	sub	r3, r1, #1
   26c4c:	cmp	r3, #1
   26c50:	blt	26ca0 <__assert_fail@plt+0x14ff4>
   26c54:	add	r3, r2, r3, lsl #3
   26c58:	ldr	r6, [r3, #4]
   26c5c:	ands	r3, r6, #262144	; 0x40000
   26c60:	beq	26ca0 <__assert_fail@plt+0x14ff4>
   26c64:	ldr	r4, [r9, #16]
   26c68:	sub	r3, r2, #12
   26c6c:	sub	r4, r4, #4
   26c70:	ldr	r7, [r4, r1, lsl #2]
   26c74:	cmp	r7, r5
   26c78:	ubfxeq	r7, r6, #8, #10
   26c7c:	cmpeq	r7, r8
   26c80:	beq	26f04 <__assert_fail@plt+0x15258>
   26c84:	sub	r7, r1, #2
   26c88:	cmp	r7, #1
   26c8c:	blt	26ca0 <__assert_fail@plt+0x14ff4>
   26c90:	ldr	r6, [r3, r1, lsl #3]
   26c94:	sub	r1, r1, #1
   26c98:	ands	r7, r6, #262144	; 0x40000
   26c9c:	bne	26c70 <__assert_fail@plt+0x14fc4>
   26ca0:	ldr	r1, [r2, r5, lsl #3]!
   26ca4:	mov	r0, r9
   26ca8:	mov	sl, ip
   26cac:	ldr	r2, [r2, #4]
   26cb0:	bl	266b0 <__assert_fail@plt+0x14a04>
   26cb4:	mov	r4, r0
   26cb8:	mov	r0, #12
   26cbc:	cmn	r4, #1
   26cc0:	str	r0, [sp, #12]
   26cc4:	beq	26f40 <__assert_fail@plt+0x15294>
   26cc8:	ldr	r1, [r9]
   26ccc:	movw	r0, #65280	; 0xff00
   26cd0:	movw	r7, #255	; 0xff
   26cd4:	ldr	r6, [sp, #4]
   26cd8:	movt	r0, #3
   26cdc:	movt	r7, #65532	; 0xfffc
   26ce0:	mov	r3, r0
   26ce4:	and	r0, r0, r8, lsl #8
   26ce8:	add	r1, r1, r4, lsl #3
   26cec:	ldr	r2, [r1, #4]
   26cf0:	and	r2, r2, r7
   26cf4:	orr	r0, r2, r0
   26cf8:	str	r0, [r1, #4]
   26cfc:	ldr	r0, [r9]
   26d00:	add	r1, r0, r5, lsl #3
   26d04:	add	r0, r0, r4, lsl #3
   26d08:	ldr	r1, [r1, #4]
   26d0c:	ldr	r2, [r0, #4]
   26d10:	and	r1, r1, r3
   26d14:	orr	r1, r1, r2
   26d18:	str	r1, [r0, #4]
   26d1c:	ldr	r0, [r9]
   26d20:	add	r0, r0, r4, lsl #3
   26d24:	ldr	r1, [r0, #4]
   26d28:	orr	r1, r1, #262144	; 0x40000
   26d2c:	str	r1, [r0, #4]
   26d30:	mov	r1, r4
   26d34:	ldr	r0, [r9, #16]
   26d38:	str	r5, [r0, r4, lsl #2]
   26d3c:	ldr	r0, [r9, #20]
   26d40:	add	r0, r0, r6, lsl #2
   26d44:	bl	27114 <__assert_fail@plt+0x15468>
   26d48:	cmp	r0, #0
   26d4c:	beq	26f40 <__assert_fail@plt+0x15294>
   26d50:	ldr	r0, [sp, #16]
   26d54:	ldr	r3, [sp, #8]
   26d58:	mov	r1, r5
   26d5c:	mov	r2, r4
   26d60:	str	r0, [sp]
   26d64:	mov	r0, r9
   26d68:	bl	26aa8 <__assert_fail@plt+0x14dfc>
   26d6c:	cmp	r0, #0
   26d70:	bne	26f5c <__assert_fail@plt+0x152b0>
   26d74:	ldr	r1, [r9, #20]
   26d78:	ldr	r0, [r9]
   26d7c:	add	r1, r1, sl, lsl #2
   26d80:	ldr	r1, [r1, #8]
   26d84:	ldr	r8, [r1, #4]
   26d88:	ldr	r1, [r0, r8, lsl #3]!
   26d8c:	ldr	r2, [r0, #4]
   26d90:	mov	r0, r9
   26d94:	bl	266b0 <__assert_fail@plt+0x14a04>
   26d98:	mov	sl, r0
   26d9c:	mov	r0, #12
   26da0:	cmn	sl, #1
   26da4:	str	r0, [sp, #12]
   26da8:	beq	26f40 <__assert_fail@plt+0x15294>
   26dac:	ldr	r1, [r9]
   26db0:	movw	r0, #65280	; 0xff00
   26db4:	movw	r7, #255	; 0xff
   26db8:	movt	r0, #3
   26dbc:	movt	r7, #65532	; 0xfffc
   26dc0:	mov	r3, r0
   26dc4:	ldr	r0, [sp, #16]
   26dc8:	add	r1, r1, sl, lsl #3
   26dcc:	ldr	r2, [r1, #4]
   26dd0:	and	r0, r3, r0, lsl #8
   26dd4:	and	r2, r2, r7
   26dd8:	orr	r0, r2, r0
   26ddc:	str	r0, [r1, #4]
   26de0:	ldr	r0, [r9]
   26de4:	add	r1, r0, r8, lsl #3
   26de8:	add	r0, r0, sl, lsl #3
   26dec:	ldr	r1, [r1, #4]
   26df0:	ldr	r2, [r0, #4]
   26df4:	and	r1, r1, r3
   26df8:	orr	r1, r1, r2
   26dfc:	str	r1, [r0, #4]
   26e00:	ldr	r0, [r9]
   26e04:	add	r0, r0, sl, lsl #3
   26e08:	ldr	r1, [r0, #4]
   26e0c:	orr	r1, r1, #262144	; 0x40000
   26e10:	str	r1, [r0, #4]
   26e14:	mov	r1, sl
   26e18:	ldr	r0, [r9, #16]
   26e1c:	str	r8, [r0, sl, lsl #2]
   26e20:	ldr	r0, [r9, #20]
   26e24:	add	r0, r0, r6, lsl #2
   26e28:	bl	27114 <__assert_fail@plt+0x15468>
   26e2c:	mov	r1, #0
   26e30:	cmp	r0, #0
   26e34:	bne	26bc0 <__assert_fail@plt+0x14f14>
   26e38:	b	26f40 <__assert_fail@plt+0x15294>
   26e3c:	ldr	r1, [r2, r5, lsl #3]!
   26e40:	ldr	r4, [r3]
   26e44:	mov	r0, r9
   26e48:	ldr	r2, [r2, #4]
   26e4c:	bl	266b0 <__assert_fail@plt+0x14a04>
   26e50:	mov	sl, r0
   26e54:	ubfx	r0, r4, #8, #10
   26e58:	mov	r1, #12
   26e5c:	cmn	sl, #1
   26e60:	str	r1, [sp, #12]
   26e64:	beq	26f40 <__assert_fail@plt+0x15294>
   26e68:	ldr	r1, [sp, #16]
   26e6c:	movw	r7, #255	; 0xff
   26e70:	movt	r7, #65532	; 0xfffc
   26e74:	orr	r1, r0, r1
   26e78:	movw	r0, #65280	; 0xff00
   26e7c:	movt	r0, #3
   26e80:	str	r1, [sp, #16]
   26e84:	mov	r3, r0
   26e88:	and	r0, r0, r1, lsl #8
   26e8c:	ldr	r1, [r9]
   26e90:	add	r1, r1, sl, lsl #3
   26e94:	ldr	r2, [r1, #4]
   26e98:	and	r2, r2, r7
   26e9c:	orr	r0, r2, r0
   26ea0:	str	r0, [r1, #4]
   26ea4:	ldr	r0, [r9]
   26ea8:	add	r1, r0, r5, lsl #3
   26eac:	add	r0, r0, sl, lsl #3
   26eb0:	ldr	r1, [r1, #4]
   26eb4:	ldr	r2, [r0, #4]
   26eb8:	and	r1, r1, r3
   26ebc:	orr	r1, r1, r2
   26ec0:	str	r1, [r0, #4]
   26ec4:	ldr	r0, [r9]
   26ec8:	add	r0, r0, sl, lsl #3
   26ecc:	ldr	r1, [r0, #4]
   26ed0:	orr	r1, r1, #262144	; 0x40000
   26ed4:	str	r1, [r0, #4]
   26ed8:	mov	r1, sl
   26edc:	ldr	r0, [r9, #16]
   26ee0:	str	r5, [r0, sl, lsl #2]
   26ee4:	ldr	r0, [r9, #20]
   26ee8:	add	r0, r0, r6, lsl #2
   26eec:	bl	27114 <__assert_fail@plt+0x15468>
   26ef0:	mov	r1, #0
   26ef4:	cmp	r0, #0
   26ef8:	mov	r8, r5
   26efc:	bne	26bc0 <__assert_fail@plt+0x14f14>
   26f00:	b	26f40 <__assert_fail@plt+0x15294>
   26f04:	sub	r1, r1, #1
   26f08:	mov	sl, ip
   26f0c:	bl	27114 <__assert_fail@plt+0x15468>
   26f10:	ldr	r6, [sp, #4]
   26f14:	cmp	r0, #0
   26f18:	bne	26d74 <__assert_fail@plt+0x150c8>
   26f1c:	mov	r0, #12
   26f20:	str	r0, [sp, #12]
   26f24:	ldr	r0, [sp, #12]
   26f28:	sub	sp, fp, #28
   26f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f30:	mov	r0, #12
   26f34:	cmp	r1, #2
   26f38:	str	r0, [sp, #12]
   26f3c:	beq	26f58 <__assert_fail@plt+0x152ac>
   26f40:	ldr	r0, [sp, #12]
   26f44:	sub	sp, fp, #28
   26f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f4c:	ldr	r0, [r9, #12]
   26f50:	ldr	r1, [r0, r8, lsl #2]
   26f54:	str	r1, [r0, sl, lsl #2]
   26f58:	mov	r0, #0
   26f5c:	str	r0, [sp, #12]
   26f60:	ldr	r0, [sp, #12]
   26f64:	sub	sp, fp, #28
   26f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26f70:	add	fp, sp, #24
   26f74:	mov	r8, #0
   26f78:	cmp	r1, #0
   26f7c:	beq	270ec <__assert_fail@plt+0x15440>
   26f80:	mov	r5, r0
   26f84:	ldr	r0, [r1, #4]
   26f88:	mov	r9, r1
   26f8c:	cmp	r0, #0
   26f90:	beq	270ec <__assert_fail@plt+0x15440>
   26f94:	ldr	r1, [r5, #4]
   26f98:	ldr	r2, [r5]
   26f9c:	add	r3, r1, r0, lsl #1
   26fa0:	cmp	r2, r3
   26fa4:	bge	26fd4 <__assert_fail@plt+0x15328>
   26fa8:	add	r7, r2, r0
   26fac:	ldr	r0, [r5, #8]
   26fb0:	lsl	r1, r7, #3
   26fb4:	bl	1bd04 <__assert_fail@plt+0xa058>
   26fb8:	cmp	r0, #0
   26fbc:	beq	27108 <__assert_fail@plt+0x1545c>
   26fc0:	str	r0, [r5, #8]
   26fc4:	lsl	r0, r7, #1
   26fc8:	str	r0, [r5]
   26fcc:	ldr	r1, [r5, #4]
   26fd0:	ldr	r0, [r9, #4]
   26fd4:	cmp	r1, #0
   26fd8:	beq	270f4 <__assert_fail@plt+0x15448>
   26fdc:	add	r7, r1, r0, lsl #1
   26fe0:	sub	r1, r1, #1
   26fe4:	sub	r0, r0, #1
   26fe8:	orr	r2, r0, r1
   26fec:	cmp	r2, #0
   26ff0:	blt	27054 <__assert_fail@plt+0x153a8>
   26ff4:	ldr	r2, [r9, #8]
   26ff8:	ldr	r3, [r5, #8]
   26ffc:	ldr	r4, [r2, r0, lsl #2]
   27000:	ldr	r6, [r3, r1, lsl #2]
   27004:	cmp	r6, r4
   27008:	bne	27024 <__assert_fail@plt+0x15378>
   2700c:	sub	r1, r1, #1
   27010:	sub	r0, r0, #1
   27014:	orr	r6, r0, r1
   27018:	cmn	r6, #1
   2701c:	bgt	26ffc <__assert_fail@plt+0x15350>
   27020:	b	27054 <__assert_fail@plt+0x153a8>
   27024:	bge	27044 <__assert_fail@plt+0x15398>
   27028:	sub	r7, r7, #1
   2702c:	sub	r0, r0, #1
   27030:	str	r4, [r3, r7, lsl #2]
   27034:	orr	r6, r0, r1
   27038:	cmn	r6, #1
   2703c:	bgt	26ffc <__assert_fail@plt+0x15350>
   27040:	b	27054 <__assert_fail@plt+0x153a8>
   27044:	sub	r1, r1, #1
   27048:	orr	r6, r0, r1
   2704c:	cmn	r6, #1
   27050:	bgt	26ffc <__assert_fail@plt+0x15350>
   27054:	cmp	r0, #0
   27058:	blt	27078 <__assert_fail@plt+0x153cc>
   2705c:	add	r2, r0, #1
   27060:	ldr	r0, [r5, #8]
   27064:	ldr	r1, [r9, #8]
   27068:	sub	r7, r7, r2
   2706c:	lsl	r2, r2, #2
   27070:	add	r0, r0, r7, lsl #2
   27074:	bl	118ec <memcpy@plt>
   27078:	ldr	r0, [r5, #4]
   2707c:	ldr	r2, [r9, #4]
   27080:	sub	r1, r0, #1
   27084:	add	r3, r1, r2, lsl #1
   27088:	sub	r2, r3, r7
   2708c:	adds	r2, r2, #1
   27090:	beq	270ec <__assert_fail@plt+0x15440>
   27094:	add	r0, r2, r0
   27098:	str	r0, [r5, #4]
   2709c:	ldr	r0, [r5, #8]
   270a0:	ldr	r6, [r0, r1, lsl #2]
   270a4:	ldr	r5, [r0, r3, lsl #2]
   270a8:	cmp	r5, r6
   270ac:	ble	270c8 <__assert_fail@plt+0x1541c>
   270b0:	add	r6, r2, r1
   270b4:	subs	r2, r2, #1
   270b8:	sub	r3, r3, #1
   270bc:	str	r5, [r0, r6, lsl #2]
   270c0:	bne	270a0 <__assert_fail@plt+0x153f4>
   270c4:	b	270ec <__assert_fail@plt+0x15440>
   270c8:	add	r5, r2, r1
   270cc:	cmp	r1, #0
   270d0:	str	r6, [r0, r5, lsl #2]
   270d4:	sub	r6, r1, #1
   270d8:	mov	r1, r6
   270dc:	bgt	270a0 <__assert_fail@plt+0x153f4>
   270e0:	add	r1, r0, r7, lsl #2
   270e4:	lsl	r2, r2, #2
   270e8:	bl	118ec <memcpy@plt>
   270ec:	mov	r0, r8
   270f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   270f4:	str	r0, [r5, #4]
   270f8:	ldr	r0, [r5, #8]
   270fc:	ldr	r2, [r9, #4]
   27100:	ldr	r1, [r9, #8]
   27104:	b	270e4 <__assert_fail@plt+0x15438>
   27108:	mov	r8, #12
   2710c:	mov	r0, r8
   27110:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27114:	push	{r4, r5, r6, sl, fp, lr}
   27118:	add	fp, sp, #16
   2711c:	ldr	r2, [r0]
   27120:	mov	r5, r1
   27124:	mov	r4, r0
   27128:	cmp	r2, #0
   2712c:	beq	2715c <__assert_fail@plt+0x154b0>
   27130:	ldr	r1, [r4, #4]
   27134:	cmp	r1, #0
   27138:	bne	27198 <__assert_fail@plt+0x154ec>
   2713c:	ldr	r0, [r4, #8]
   27140:	str	r5, [r0]
   27144:	ldr	r0, [r4, #4]
   27148:	mov	r6, #1
   2714c:	add	r0, r0, #1
   27150:	str	r0, [r4, #4]
   27154:	mov	r0, r6
   27158:	pop	{r4, r5, r6, sl, fp, pc}
   2715c:	mov	r6, #1
   27160:	mov	r0, #4
   27164:	str	r6, [r4]
   27168:	str	r6, [r4, #4]
   2716c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   27170:	cmp	r0, #0
   27174:	str	r0, [r4, #8]
   27178:	strne	r5, [r0]
   2717c:	movne	r0, r6
   27180:	popne	{r4, r5, r6, sl, fp, pc}
   27184:	mov	r6, #0
   27188:	mov	r0, r6
   2718c:	str	r6, [r4]
   27190:	str	r6, [r4, #4]
   27194:	pop	{r4, r5, r6, sl, fp, pc}
   27198:	cmp	r2, r1
   2719c:	bne	271d4 <__assert_fail@plt+0x15528>
   271a0:	lsl	r0, r2, #1
   271a4:	lsl	r1, r2, #3
   271a8:	str	r0, [r4]
   271ac:	ldr	r0, [r4, #8]
   271b0:	bl	1bd04 <__assert_fail@plt+0xa058>
   271b4:	cmp	r0, #0
   271b8:	beq	27250 <__assert_fail@plt+0x155a4>
   271bc:	str	r0, [r4, #8]
   271c0:	ldr	r1, [r4, #4]
   271c4:	ldr	r2, [r0]
   271c8:	cmp	r2, r5
   271cc:	bgt	271e4 <__assert_fail@plt+0x15538>
   271d0:	b	27218 <__assert_fail@plt+0x1556c>
   271d4:	ldr	r0, [r4, #8]
   271d8:	ldr	r2, [r0]
   271dc:	cmp	r2, r5
   271e0:	ble	27218 <__assert_fail@plt+0x1556c>
   271e4:	cmp	r1, #1
   271e8:	blt	27248 <__assert_fail@plt+0x1559c>
   271ec:	add	r2, r0, r1, lsl #2
   271f0:	add	r1, r1, #1
   271f4:	mov	r3, r2
   271f8:	ldr	r6, [r3, #-4]!
   271fc:	sub	r1, r1, #1
   27200:	cmp	r1, #1
   27204:	str	r6, [r2]
   27208:	mov	r2, r3
   2720c:	bgt	271f8 <__assert_fail@plt+0x1554c>
   27210:	sub	r1, r1, #1
   27214:	b	27248 <__assert_fail@plt+0x1559c>
   27218:	add	r2, r0, r1, lsl #2
   2721c:	ldr	r3, [r2, #-4]
   27220:	cmp	r3, r5
   27224:	ble	27248 <__assert_fail@plt+0x1559c>
   27228:	sub	r1, r1, #2
   2722c:	str	r3, [r2]
   27230:	sub	r1, r1, #1
   27234:	ldr	r3, [r2, #-8]
   27238:	sub	r2, r2, #4
   2723c:	cmp	r3, r5
   27240:	bgt	2722c <__assert_fail@plt+0x15580>
   27244:	add	r1, r1, #2
   27248:	str	r5, [r0, r1, lsl #2]
   2724c:	b	27144 <__assert_fail@plt+0x15498>
   27250:	mov	r6, #0
   27254:	mov	r0, r6
   27258:	pop	{r4, r5, r6, sl, fp, pc}
   2725c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27260:	add	fp, sp, #28
   27264:	sub	sp, sp, #28
   27268:	ldr	lr, [r2, #4]
   2726c:	mov	sl, r0
   27270:	cmp	lr, #0
   27274:	beq	27418 <__assert_fail@plt+0x1576c>
   27278:	mov	r9, r3
   2727c:	add	r7, lr, r3
   27280:	cmp	lr, #1
   27284:	str	r2, [sp, #20]
   27288:	blt	272f8 <__assert_fail@plt+0x1564c>
   2728c:	ldr	r6, [r2, #8]
   27290:	mov	r2, #0
   27294:	cmp	lr, #4
   27298:	bcc	272e0 <__assert_fail@plt+0x15634>
   2729c:	mov	r0, #0
   272a0:	bic	r2, lr, #3
   272a4:	vdup.32	q8, r0
   272a8:	mov	r3, r2
   272ac:	mov	r0, r6
   272b0:	vmov.32	d16[0], r7
   272b4:	vld1.32	{d18-d19}, [r0]!
   272b8:	subs	r3, r3, #4
   272bc:	vadd.i32	q8, q9, q8
   272c0:	bne	272b4 <__assert_fail@plt+0x15608>
   272c4:	vext.8	q9, q8, q8, #8
   272c8:	cmp	lr, r2
   272cc:	vadd.i32	q8, q8, q9
   272d0:	vdup.32	q9, d16[1]
   272d4:	vadd.i32	q8, q8, q9
   272d8:	vmov.32	r7, d16[0]
   272dc:	beq	272f8 <__assert_fail@plt+0x1564c>
   272e0:	add	r0, r6, r2, lsl #2
   272e4:	sub	r2, lr, r2
   272e8:	ldr	r3, [r0], #4
   272ec:	subs	r2, r2, #1
   272f0:	add	r7, r3, r7
   272f4:	bne	272e8 <__assert_fail@plt+0x1563c>
   272f8:	ldr	r2, [r1, #32]
   272fc:	str	r1, [sp, #12]
   27300:	ldr	r1, [r1, #68]	; 0x44
   27304:	and	r1, r1, r7
   27308:	add	r3, r1, r1, lsl #1
   2730c:	ldr	r1, [r2, r3, lsl #2]
   27310:	cmp	r1, #1
   27314:	blt	273a8 <__assert_fail@plt+0x156fc>
   27318:	ldr	r0, [sp, #20]
   2731c:	cmp	r0, #0
   27320:	beq	273a8 <__assert_fail@plt+0x156fc>
   27324:	add	r2, r2, r3, lsl #2
   27328:	sub	ip, lr, #1
   2732c:	mov	r6, #0
   27330:	ldr	r2, [r2, #8]
   27334:	ldr	r8, [r2, r6, lsl #2]
   27338:	ldr	r3, [r8]
   2733c:	cmp	r3, r7
   27340:	bne	2739c <__assert_fail@plt+0x156f0>
   27344:	ldrb	r3, [r8, #52]	; 0x34
   27348:	and	r3, r3, #15
   2734c:	cmp	r3, r9
   27350:	bne	2739c <__assert_fail@plt+0x156f0>
   27354:	ldr	r4, [r8, #40]	; 0x28
   27358:	cmp	r4, #0
   2735c:	beq	2739c <__assert_fail@plt+0x156f0>
   27360:	ldr	r3, [r4, #4]
   27364:	cmp	r3, lr
   27368:	bne	2739c <__assert_fail@plt+0x156f0>
   2736c:	mov	r3, ip
   27370:	add	r5, r3, #1
   27374:	cmp	r5, #1
   27378:	blt	27bb8 <__assert_fail@plt+0x15f0c>
   2737c:	ldr	r0, [sp, #20]
   27380:	ldr	r5, [r0, #8]
   27384:	ldr	r0, [r4, #8]
   27388:	ldr	r5, [r5, r3, lsl #2]
   2738c:	ldr	r0, [r0, r3, lsl #2]
   27390:	sub	r3, r3, #1
   27394:	cmp	r0, r5
   27398:	beq	27370 <__assert_fail@plt+0x156c4>
   2739c:	add	r6, r6, #1
   273a0:	cmp	r6, r1
   273a4:	blt	27334 <__assert_fail@plt+0x15688>
   273a8:	mov	r0, #56	; 0x38
   273ac:	mov	r1, #1
   273b0:	bl	1b90c <__assert_fail@plt+0x9c60>
   273b4:	cmp	r0, #0
   273b8:	beq	27bf0 <__assert_fail@plt+0x15f44>
   273bc:	ldr	ip, [sp, #20]
   273c0:	str	sl, [sp]
   273c4:	add	lr, r0, #4
   273c8:	mov	r8, r0
   273cc:	str	lr, [sp, #8]
   273d0:	ldr	sl, [ip, #4]
   273d4:	cmp	sl, #1
   273d8:	str	sl, [r0, #8]
   273dc:	blt	2742c <__assert_fail@plt+0x15780>
   273e0:	lsl	r0, sl, #2
   273e4:	str	sl, [r8, #4]
   273e8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   273ec:	cmp	r0, #0
   273f0:	str	r0, [r8, #12]
   273f4:	beq	27c08 <__assert_fail@plt+0x15f5c>
   273f8:	ldr	r4, [sp, #20]
   273fc:	ldr	sl, [r4, #4]
   27400:	ldr	r1, [r4, #8]
   27404:	lsl	r2, sl, #2
   27408:	bl	118ec <memcpy@plt>
   2740c:	ldr	lr, [sp, #8]
   27410:	mov	ip, r4
   27414:	b	2743c <__assert_fail@plt+0x15790>
   27418:	mov	r8, #0
   2741c:	str	r8, [sl]
   27420:	mov	r0, r8
   27424:	sub	sp, fp, #28
   27428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2742c:	mov	r0, #0
   27430:	str	r0, [lr]
   27434:	str	r0, [lr, #4]
   27438:	str	r0, [lr, #8]
   2743c:	mov	r2, r8
   27440:	and	r1, r9, #15
   27444:	cmp	sl, #1
   27448:	ldrb	r0, [r2, #52]!	; 0x34
   2744c:	and	r0, r0, #240	; 0xf0
   27450:	str	lr, [r2, #-12]
   27454:	str	r2, [sp, #24]
   27458:	orr	r0, r0, r1
   2745c:	strb	r0, [r2]
   27460:	ldr	r0, [sp, #12]
   27464:	blt	27ba4 <__assert_fail@plt+0x15ef8>
   27468:	and	r1, r9, #4
   2746c:	tst	r9, #1
   27470:	str	r1, [sp, #4]
   27474:	and	r1, r9, #2
   27478:	bne	27648 <__assert_fail@plt+0x1599c>
   2747c:	cmp	r1, #0
   27480:	bne	27814 <__assert_fail@plt+0x15b68>
   27484:	movw	r1, #65280	; 0xff00
   27488:	mov	r6, #0
   2748c:	mov	r9, #0
   27490:	movt	r1, #3
   27494:	add	r1, r1, #255	; 0xff
   27498:	str	r1, [sp, #16]
   2749c:	b	27594 <__assert_fail@plt+0x158e8>
   274a0:	mov	r0, #12
   274a4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   274a8:	cmp	r0, #0
   274ac:	beq	27bc4 <__assert_fail@plt+0x15f18>
   274b0:	ldr	ip, [sp, #20]
   274b4:	str	r0, [r8, #40]	; 0x28
   274b8:	mov	r5, r0
   274bc:	ldr	sl, [ip, #4]
   274c0:	cmp	sl, #0
   274c4:	str	sl, [r0, #4]
   274c8:	ble	27500 <__assert_fail@plt+0x15854>
   274cc:	lsl	r0, sl, #2
   274d0:	str	sl, [r5]
   274d4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   274d8:	cmp	r0, #0
   274dc:	str	r0, [r5, #8]
   274e0:	beq	27bd4 <__assert_fail@plt+0x15f28>
   274e4:	ldr	r5, [sp, #20]
   274e8:	ldr	sl, [r5, #4]
   274ec:	ldr	r1, [r5, #8]
   274f0:	lsl	r2, sl, #2
   274f4:	bl	118ec <memcpy@plt>
   274f8:	mov	ip, r5
   274fc:	b	27510 <__assert_fail@plt+0x15864>
   27500:	mov	r0, #0
   27504:	str	r0, [r5]
   27508:	str	r0, [r5, #4]
   2750c:	str	r0, [r5, #8]
   27510:	ldr	r1, [sp, #24]
   27514:	ldr	lr, [sp, #8]
   27518:	mov	r9, #0
   2751c:	ldrb	r0, [r1]
   27520:	orr	r0, r0, #128	; 0x80
   27524:	strb	r0, [r1]
   27528:	ldr	r0, [sp, #12]
   2752c:	tst	r4, #4352	; 0x1100
   27530:	beq	27624 <__assert_fail@plt+0x15978>
   27534:	sub	r1, r6, r9
   27538:	cmp	r1, #0
   2753c:	ldrge	r2, [r8, #8]
   27540:	cmpge	r2, r1
   27544:	bgt	2755c <__assert_fail@plt+0x158b0>
   27548:	add	r9, r9, #1
   2754c:	add	r6, r6, #1
   27550:	cmp	r6, sl
   27554:	blt	27594 <__assert_fail@plt+0x158e8>
   27558:	b	27ba4 <__assert_fail@plt+0x15ef8>
   2755c:	sub	r2, r2, #1
   27560:	cmp	r2, r1
   27564:	str	r2, [r8, #8]
   27568:	ble	27548 <__assert_fail@plt+0x1589c>
   2756c:	ldr	r2, [r8, #12]
   27570:	add	r3, r2, r1, lsl #2
   27574:	ldr	r3, [r3, #4]
   27578:	str	r3, [r2, r1, lsl #2]
   2757c:	add	r1, r1, #1
   27580:	ldr	r3, [r8, #8]
   27584:	cmp	r1, r3
   27588:	blt	27570 <__assert_fail@plt+0x158c4>
   2758c:	ldr	sl, [ip, #4]
   27590:	b	27548 <__assert_fail@plt+0x1589c>
   27594:	ldr	r1, [ip, #8]
   27598:	ldr	r2, [r0]
   2759c:	ldr	r1, [r1, r6, lsl #2]
   275a0:	add	r1, r2, r1, lsl #3
   275a4:	ldr	r4, [r1, #4]
   275a8:	ldr	r1, [sp, #16]
   275ac:	and	r1, r4, r1
   275b0:	cmp	r1, #1
   275b4:	beq	27638 <__assert_fail@plt+0x1598c>
   275b8:	ldr	r5, [sp, #24]
   275bc:	mov	r2, #32
   275c0:	movw	r1, #65280	; 0xff00
   275c4:	and	r2, r2, r4, lsr #15
   275c8:	movt	r1, #3
   275cc:	and	r1, r4, r1
   275d0:	ldrb	r3, [r5]
   275d4:	orr	r2, r3, r2
   275d8:	uxtb	r3, r4
   275dc:	cmp	r3, #4
   275e0:	strb	r2, [r5]
   275e4:	beq	275f8 <__assert_fail@plt+0x1594c>
   275e8:	cmp	r3, #2
   275ec:	bne	27608 <__assert_fail@plt+0x1595c>
   275f0:	mov	r3, #16
   275f4:	b	275fc <__assert_fail@plt+0x15950>
   275f8:	mov	r3, #64	; 0x40
   275fc:	orr	r2, r2, r3
   27600:	ldr	r3, [sp, #24]
   27604:	strb	r2, [r3]
   27608:	cmp	r1, #0
   2760c:	beq	27638 <__assert_fail@plt+0x1598c>
   27610:	ldr	r1, [r8, #40]	; 0x28
   27614:	cmp	r1, lr
   27618:	beq	274a0 <__assert_fail@plt+0x157f4>
   2761c:	tst	r4, #4352	; 0x1100
   27620:	bne	27534 <__assert_fail@plt+0x15888>
   27624:	ldr	r1, [sp, #4]
   27628:	cmp	r1, #0
   2762c:	bne	27638 <__assert_fail@plt+0x1598c>
   27630:	ands	r1, r4, #16384	; 0x4000
   27634:	bne	27534 <__assert_fail@plt+0x15888>
   27638:	add	r6, r6, #1
   2763c:	cmp	r6, sl
   27640:	blt	27594 <__assert_fail@plt+0x158e8>
   27644:	b	27ba4 <__assert_fail@plt+0x15ef8>
   27648:	cmp	r1, #0
   2764c:	bne	279d8 <__assert_fail@plt+0x15d2c>
   27650:	movw	r1, #65280	; 0xff00
   27654:	mov	r6, #0
   27658:	mov	r9, #0
   2765c:	movt	r1, #3
   27660:	add	r1, r1, #255	; 0xff
   27664:	str	r1, [sp, #16]
   27668:	b	27760 <__assert_fail@plt+0x15ab4>
   2766c:	mov	r0, #12
   27670:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   27674:	cmp	r0, #0
   27678:	beq	27bc4 <__assert_fail@plt+0x15f18>
   2767c:	ldr	ip, [sp, #20]
   27680:	str	r0, [r8, #40]	; 0x28
   27684:	mov	r5, r0
   27688:	ldr	sl, [ip, #4]
   2768c:	cmp	sl, #0
   27690:	str	sl, [r0, #4]
   27694:	ble	276cc <__assert_fail@plt+0x15a20>
   27698:	lsl	r0, sl, #2
   2769c:	str	sl, [r5]
   276a0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   276a4:	cmp	r0, #0
   276a8:	str	r0, [r5, #8]
   276ac:	beq	27bd4 <__assert_fail@plt+0x15f28>
   276b0:	ldr	r5, [sp, #20]
   276b4:	ldr	sl, [r5, #4]
   276b8:	ldr	r1, [r5, #8]
   276bc:	lsl	r2, sl, #2
   276c0:	bl	118ec <memcpy@plt>
   276c4:	mov	ip, r5
   276c8:	b	276dc <__assert_fail@plt+0x15a30>
   276cc:	mov	r0, #0
   276d0:	str	r0, [r5]
   276d4:	str	r0, [r5, #4]
   276d8:	str	r0, [r5, #8]
   276dc:	ldr	r1, [sp, #24]
   276e0:	ldr	lr, [sp, #8]
   276e4:	mov	r9, #0
   276e8:	ldrb	r0, [r1]
   276ec:	orr	r0, r0, #128	; 0x80
   276f0:	strb	r0, [r1]
   276f4:	ldr	r0, [sp, #12]
   276f8:	tst	r4, #4608	; 0x1200
   276fc:	beq	277f0 <__assert_fail@plt+0x15b44>
   27700:	sub	r1, r6, r9
   27704:	cmp	r1, #0
   27708:	ldrge	r2, [r8, #8]
   2770c:	cmpge	r2, r1
   27710:	bgt	27728 <__assert_fail@plt+0x15a7c>
   27714:	add	r9, r9, #1
   27718:	add	r6, r6, #1
   2771c:	cmp	r6, sl
   27720:	blt	27760 <__assert_fail@plt+0x15ab4>
   27724:	b	27ba4 <__assert_fail@plt+0x15ef8>
   27728:	sub	r2, r2, #1
   2772c:	cmp	r2, r1
   27730:	str	r2, [r8, #8]
   27734:	ble	27714 <__assert_fail@plt+0x15a68>
   27738:	ldr	r2, [r8, #12]
   2773c:	add	r3, r2, r1, lsl #2
   27740:	ldr	r3, [r3, #4]
   27744:	str	r3, [r2, r1, lsl #2]
   27748:	add	r1, r1, #1
   2774c:	ldr	r3, [r8, #8]
   27750:	cmp	r1, r3
   27754:	blt	2773c <__assert_fail@plt+0x15a90>
   27758:	ldr	sl, [ip, #4]
   2775c:	b	27714 <__assert_fail@plt+0x15a68>
   27760:	ldr	r1, [ip, #8]
   27764:	ldr	r2, [r0]
   27768:	ldr	r1, [r1, r6, lsl #2]
   2776c:	add	r1, r2, r1, lsl #3
   27770:	ldr	r4, [r1, #4]
   27774:	ldr	r1, [sp, #16]
   27778:	and	r1, r4, r1
   2777c:	cmp	r1, #1
   27780:	beq	27804 <__assert_fail@plt+0x15b58>
   27784:	ldr	r5, [sp, #24]
   27788:	mov	r2, #32
   2778c:	movw	r1, #65280	; 0xff00
   27790:	and	r2, r2, r4, lsr #15
   27794:	movt	r1, #3
   27798:	and	r1, r4, r1
   2779c:	ldrb	r3, [r5]
   277a0:	orr	r2, r3, r2
   277a4:	uxtb	r3, r4
   277a8:	cmp	r3, #4
   277ac:	strb	r2, [r5]
   277b0:	beq	277c4 <__assert_fail@plt+0x15b18>
   277b4:	cmp	r3, #2
   277b8:	bne	277d4 <__assert_fail@plt+0x15b28>
   277bc:	mov	r3, #16
   277c0:	b	277c8 <__assert_fail@plt+0x15b1c>
   277c4:	mov	r3, #64	; 0x40
   277c8:	orr	r2, r2, r3
   277cc:	ldr	r3, [sp, #24]
   277d0:	strb	r2, [r3]
   277d4:	cmp	r1, #0
   277d8:	beq	27804 <__assert_fail@plt+0x15b58>
   277dc:	ldr	r1, [r8, #40]	; 0x28
   277e0:	cmp	r1, lr
   277e4:	beq	2766c <__assert_fail@plt+0x159c0>
   277e8:	tst	r4, #4608	; 0x1200
   277ec:	bne	27700 <__assert_fail@plt+0x15a54>
   277f0:	ldr	r1, [sp, #4]
   277f4:	cmp	r1, #0
   277f8:	bne	27804 <__assert_fail@plt+0x15b58>
   277fc:	ands	r1, r4, #16384	; 0x4000
   27800:	bne	27700 <__assert_fail@plt+0x15a54>
   27804:	add	r6, r6, #1
   27808:	cmp	r6, sl
   2780c:	blt	27760 <__assert_fail@plt+0x15ab4>
   27810:	b	27ba4 <__assert_fail@plt+0x15ef8>
   27814:	movw	r1, #65280	; 0xff00
   27818:	mov	r6, #0
   2781c:	mov	r9, #0
   27820:	movt	r1, #3
   27824:	add	r1, r1, #255	; 0xff
   27828:	str	r1, [sp, #16]
   2782c:	b	27924 <__assert_fail@plt+0x15c78>
   27830:	mov	r0, #12
   27834:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   27838:	cmp	r0, #0
   2783c:	beq	27bc4 <__assert_fail@plt+0x15f18>
   27840:	ldr	ip, [sp, #20]
   27844:	str	r0, [r8, #40]	; 0x28
   27848:	mov	r5, r0
   2784c:	ldr	sl, [ip, #4]
   27850:	cmp	sl, #0
   27854:	str	sl, [r0, #4]
   27858:	ble	27890 <__assert_fail@plt+0x15be4>
   2785c:	lsl	r0, sl, #2
   27860:	str	sl, [r5]
   27864:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   27868:	cmp	r0, #0
   2786c:	str	r0, [r5, #8]
   27870:	beq	27bd4 <__assert_fail@plt+0x15f28>
   27874:	ldr	r5, [sp, #20]
   27878:	ldr	sl, [r5, #4]
   2787c:	ldr	r1, [r5, #8]
   27880:	lsl	r2, sl, #2
   27884:	bl	118ec <memcpy@plt>
   27888:	mov	ip, r5
   2788c:	b	278a0 <__assert_fail@plt+0x15bf4>
   27890:	mov	r0, #0
   27894:	str	r0, [r5]
   27898:	str	r0, [r5, #4]
   2789c:	str	r0, [r5, #8]
   278a0:	ldr	r1, [sp, #24]
   278a4:	ldr	lr, [sp, #8]
   278a8:	mov	r9, #0
   278ac:	ldrb	r0, [r1]
   278b0:	orr	r0, r0, #128	; 0x80
   278b4:	strb	r0, [r1]
   278b8:	ldr	r0, [sp, #12]
   278bc:	tst	r4, #256	; 0x100
   278c0:	beq	279b4 <__assert_fail@plt+0x15d08>
   278c4:	sub	r1, r6, r9
   278c8:	cmp	r1, #0
   278cc:	ldrge	r2, [r8, #8]
   278d0:	cmpge	r2, r1
   278d4:	bgt	278ec <__assert_fail@plt+0x15c40>
   278d8:	add	r9, r9, #1
   278dc:	add	r6, r6, #1
   278e0:	cmp	r6, sl
   278e4:	blt	27924 <__assert_fail@plt+0x15c78>
   278e8:	b	27ba4 <__assert_fail@plt+0x15ef8>
   278ec:	sub	r2, r2, #1
   278f0:	cmp	r2, r1
   278f4:	str	r2, [r8, #8]
   278f8:	ble	278d8 <__assert_fail@plt+0x15c2c>
   278fc:	ldr	r2, [r8, #12]
   27900:	add	r3, r2, r1, lsl #2
   27904:	ldr	r3, [r3, #4]
   27908:	str	r3, [r2, r1, lsl #2]
   2790c:	add	r1, r1, #1
   27910:	ldr	r3, [r8, #8]
   27914:	cmp	r1, r3
   27918:	blt	27900 <__assert_fail@plt+0x15c54>
   2791c:	ldr	sl, [ip, #4]
   27920:	b	278d8 <__assert_fail@plt+0x15c2c>
   27924:	ldr	r1, [ip, #8]
   27928:	ldr	r2, [r0]
   2792c:	ldr	r1, [r1, r6, lsl #2]
   27930:	add	r1, r2, r1, lsl #3
   27934:	ldr	r4, [r1, #4]
   27938:	ldr	r1, [sp, #16]
   2793c:	and	r1, r4, r1
   27940:	cmp	r1, #1
   27944:	beq	279c8 <__assert_fail@plt+0x15d1c>
   27948:	ldr	r5, [sp, #24]
   2794c:	mov	r2, #32
   27950:	movw	r1, #65280	; 0xff00
   27954:	and	r2, r2, r4, lsr #15
   27958:	movt	r1, #3
   2795c:	and	r1, r4, r1
   27960:	ldrb	r3, [r5]
   27964:	orr	r2, r3, r2
   27968:	uxtb	r3, r4
   2796c:	cmp	r3, #4
   27970:	strb	r2, [r5]
   27974:	beq	27988 <__assert_fail@plt+0x15cdc>
   27978:	cmp	r3, #2
   2797c:	bne	27998 <__assert_fail@plt+0x15cec>
   27980:	mov	r3, #16
   27984:	b	2798c <__assert_fail@plt+0x15ce0>
   27988:	mov	r3, #64	; 0x40
   2798c:	orr	r2, r2, r3
   27990:	ldr	r3, [sp, #24]
   27994:	strb	r2, [r3]
   27998:	cmp	r1, #0
   2799c:	beq	279c8 <__assert_fail@plt+0x15d1c>
   279a0:	ldr	r1, [r8, #40]	; 0x28
   279a4:	cmp	r1, lr
   279a8:	beq	27830 <__assert_fail@plt+0x15b84>
   279ac:	tst	r4, #256	; 0x100
   279b0:	bne	278c4 <__assert_fail@plt+0x15c18>
   279b4:	ldr	r1, [sp, #4]
   279b8:	cmp	r1, #0
   279bc:	bne	279c8 <__assert_fail@plt+0x15d1c>
   279c0:	ands	r1, r4, #16384	; 0x4000
   279c4:	bne	278c4 <__assert_fail@plt+0x15c18>
   279c8:	add	r6, r6, #1
   279cc:	cmp	r6, sl
   279d0:	blt	27924 <__assert_fail@plt+0x15c78>
   279d4:	b	27ba4 <__assert_fail@plt+0x15ef8>
   279d8:	movw	r1, #65280	; 0xff00
   279dc:	mov	r9, #0
   279e0:	mov	r5, #0
   279e4:	movt	r1, #3
   279e8:	add	r1, r1, #255	; 0xff
   279ec:	str	r1, [sp, #16]
   279f0:	ldr	r1, [ip, #8]
   279f4:	ldr	r2, [r0]
   279f8:	ldr	r1, [r1, r9, lsl #2]
   279fc:	add	r1, r2, r1, lsl #3
   27a00:	ldr	r6, [r1, #4]
   27a04:	ldr	r1, [sp, #16]
   27a08:	and	r1, r6, r1
   27a0c:	cmp	r1, #1
   27a10:	beq	27a94 <__assert_fail@plt+0x15de8>
   27a14:	ldr	r4, [sp, #24]
   27a18:	mov	r2, #32
   27a1c:	movw	r1, #65280	; 0xff00
   27a20:	and	r2, r2, r6, lsr #15
   27a24:	movt	r1, #3
   27a28:	and	r1, r6, r1
   27a2c:	ldrb	r3, [r4]
   27a30:	orr	r2, r3, r2
   27a34:	uxtb	r3, r6
   27a38:	cmp	r3, #2
   27a3c:	strb	r2, [r4]
   27a40:	beq	27a54 <__assert_fail@plt+0x15da8>
   27a44:	cmp	r3, #4
   27a48:	bne	27a64 <__assert_fail@plt+0x15db8>
   27a4c:	mov	r3, #64	; 0x40
   27a50:	b	27a58 <__assert_fail@plt+0x15dac>
   27a54:	mov	r3, #16
   27a58:	orr	r2, r2, r3
   27a5c:	ldr	r3, [sp, #24]
   27a60:	strb	r2, [r3]
   27a64:	cmp	r1, #0
   27a68:	beq	27a94 <__assert_fail@plt+0x15de8>
   27a6c:	ldr	r1, [r8, #40]	; 0x28
   27a70:	cmp	r1, lr
   27a74:	beq	27aa4 <__assert_fail@plt+0x15df8>
   27a78:	tst	r6, #512	; 0x200
   27a7c:	bne	27b38 <__assert_fail@plt+0x15e8c>
   27a80:	ldr	r1, [sp, #4]
   27a84:	cmp	r1, #0
   27a88:	bne	27a94 <__assert_fail@plt+0x15de8>
   27a8c:	ands	r1, r6, #16384	; 0x4000
   27a90:	bne	27b38 <__assert_fail@plt+0x15e8c>
   27a94:	add	r9, r9, #1
   27a98:	cmp	r9, sl
   27a9c:	blt	279f0 <__assert_fail@plt+0x15d44>
   27aa0:	b	27ba4 <__assert_fail@plt+0x15ef8>
   27aa4:	mov	r0, #12
   27aa8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   27aac:	cmp	r0, #0
   27ab0:	beq	27bc4 <__assert_fail@plt+0x15f18>
   27ab4:	ldr	ip, [sp, #20]
   27ab8:	str	r0, [r8, #40]	; 0x28
   27abc:	mov	r5, r0
   27ac0:	ldr	sl, [ip, #4]
   27ac4:	cmp	sl, #1
   27ac8:	str	sl, [r0, #4]
   27acc:	blt	27b04 <__assert_fail@plt+0x15e58>
   27ad0:	lsl	r0, sl, #2
   27ad4:	str	sl, [r5]
   27ad8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   27adc:	cmp	r0, #0
   27ae0:	str	r0, [r5, #8]
   27ae4:	beq	27bd4 <__assert_fail@plt+0x15f28>
   27ae8:	ldr	r4, [sp, #20]
   27aec:	ldr	sl, [r4, #4]
   27af0:	ldr	r1, [r4, #8]
   27af4:	lsl	r2, sl, #2
   27af8:	bl	118ec <memcpy@plt>
   27afc:	mov	ip, r4
   27b00:	b	27b14 <__assert_fail@plt+0x15e68>
   27b04:	mov	r0, #0
   27b08:	str	r0, [r5]
   27b0c:	str	r0, [r5, #4]
   27b10:	str	r0, [r5, #8]
   27b14:	ldr	r1, [sp, #24]
   27b18:	ldr	lr, [sp, #8]
   27b1c:	mov	r5, #0
   27b20:	ldrb	r0, [r1]
   27b24:	orr	r0, r0, #128	; 0x80
   27b28:	strb	r0, [r1]
   27b2c:	ldr	r0, [sp, #12]
   27b30:	tst	r6, #512	; 0x200
   27b34:	beq	27a80 <__assert_fail@plt+0x15dd4>
   27b38:	sub	r1, r9, r5
   27b3c:	cmp	r1, #0
   27b40:	ldrge	r2, [r8, #8]
   27b44:	cmpge	r2, r1
   27b48:	bgt	27b60 <__assert_fail@plt+0x15eb4>
   27b4c:	add	r5, r5, #1
   27b50:	add	r9, r9, #1
   27b54:	cmp	r9, sl
   27b58:	blt	279f0 <__assert_fail@plt+0x15d44>
   27b5c:	b	27ba4 <__assert_fail@plt+0x15ef8>
   27b60:	sub	r2, r2, #1
   27b64:	cmp	r2, r1
   27b68:	str	r2, [r8, #8]
   27b6c:	ble	27b4c <__assert_fail@plt+0x15ea0>
   27b70:	ldr	r2, [r8, #12]
   27b74:	add	r3, r2, r1, lsl #2
   27b78:	ldr	r3, [r3, #4]
   27b7c:	str	r3, [r2, r1, lsl #2]
   27b80:	add	r1, r1, #1
   27b84:	ldr	r3, [r8, #8]
   27b88:	cmp	r1, r3
   27b8c:	blt	27b74 <__assert_fail@plt+0x15ec8>
   27b90:	ldr	sl, [ip, #4]
   27b94:	add	r5, r5, #1
   27b98:	add	r9, r9, #1
   27b9c:	cmp	r9, sl
   27ba0:	blt	279f0 <__assert_fail@plt+0x15d44>
   27ba4:	mov	r1, r8
   27ba8:	mov	r2, r7
   27bac:	bl	27c20 <__assert_fail@plt+0x15f74>
   27bb0:	cmp	r0, #0
   27bb4:	bne	27bc4 <__assert_fail@plt+0x15f18>
   27bb8:	mov	r0, r8
   27bbc:	sub	sp, fp, #28
   27bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bc4:	mov	r0, r8
   27bc8:	bl	211b0 <__assert_fail@plt+0xf504>
   27bcc:	ldr	sl, [sp]
   27bd0:	b	27bf0 <__assert_fail@plt+0x15f44>
   27bd4:	ldr	sl, [sp]
   27bd8:	add	r0, r5, #4
   27bdc:	mov	r1, #0
   27be0:	str	r1, [r0]
   27be4:	mov	r0, r8
   27be8:	str	r1, [r5]
   27bec:	bl	211b0 <__assert_fail@plt+0xf504>
   27bf0:	mov	r0, #12
   27bf4:	mov	r8, #0
   27bf8:	str	r0, [sl]
   27bfc:	mov	r0, r8
   27c00:	sub	sp, fp, #28
   27c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c08:	mov	r0, #0
   27c0c:	str	r0, [r8, #4]
   27c10:	str	r0, [r8, #8]
   27c14:	mov	r0, r8
   27c18:	bl	1bba8 <__assert_fail@plt+0x9efc>
   27c1c:	b	27bcc <__assert_fail@plt+0x15f20>
   27c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c24:	add	fp, sp, #28
   27c28:	sub	sp, sp, #4
   27c2c:	str	r2, [r1]
   27c30:	mov	r4, r1
   27c34:	mov	r7, r0
   27c38:	mov	r0, #0
   27c3c:	mov	r9, r2
   27c40:	ldr	r1, [r1, #8]
   27c44:	str	r1, [r4, #16]
   27c48:	str	r0, [r4, #20]
   27c4c:	lsl	r0, r1, #2
   27c50:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   27c54:	mov	r8, #12
   27c58:	cmp	r0, #0
   27c5c:	str	r0, [r4, #24]
   27c60:	beq	27d20 <__assert_fail@plt+0x16074>
   27c64:	ldr	r1, [r4, #8]
   27c68:	cmp	r1, #1
   27c6c:	blt	27ce0 <__assert_fail@plt+0x16034>
   27c70:	mov	r5, #0
   27c74:	mov	sl, #2
   27c78:	ldr	r2, [r4, #12]
   27c7c:	ldr	r6, [r2, r5, lsl #2]
   27c80:	ldr	r2, [r7]
   27c84:	add	r2, r2, r6, lsl #3
   27c88:	ldrb	r2, [r2, #4]
   27c8c:	tst	r2, #8
   27c90:	bne	27cd4 <__assert_fail@plt+0x16028>
   27c94:	ldr	r2, [r4, #16]
   27c98:	ldr	r1, [r4, #20]
   27c9c:	cmp	r2, r1
   27ca0:	bne	27cc4 <__assert_fail@plt+0x16018>
   27ca4:	add	r1, sl, r2, lsl #1
   27ca8:	str	r1, [r4, #16]
   27cac:	lsl	r1, r1, #2
   27cb0:	bl	1bd04 <__assert_fail@plt+0xa058>
   27cb4:	cmp	r0, #0
   27cb8:	beq	27d20 <__assert_fail@plt+0x16074>
   27cbc:	str	r0, [r4, #24]
   27cc0:	ldr	r1, [r4, #20]
   27cc4:	add	r2, r1, #1
   27cc8:	str	r2, [r4, #20]
   27ccc:	str	r6, [r0, r1, lsl #2]
   27cd0:	ldr	r1, [r4, #8]
   27cd4:	add	r5, r5, #1
   27cd8:	cmp	r5, r1
   27cdc:	blt	27c78 <__assert_fail@plt+0x15fcc>
   27ce0:	ldr	r1, [r7, #68]	; 0x44
   27ce4:	ldr	r0, [r7, #32]
   27ce8:	and	r1, r1, r9
   27cec:	mov	r5, r0
   27cf0:	add	r2, r1, r1, lsl #1
   27cf4:	ldr	r1, [r5, r2, lsl #2]!
   27cf8:	mov	r6, r5
   27cfc:	ldr	r3, [r6, #4]!
   27d00:	cmp	r3, r1
   27d04:	ble	27d2c <__assert_fail@plt+0x16080>
   27d08:	add	r0, r0, r2, lsl #2
   27d0c:	ldr	r0, [r0, #8]
   27d10:	add	r2, r1, #1
   27d14:	mov	r8, #0
   27d18:	str	r2, [r5]
   27d1c:	str	r4, [r0, r1, lsl #2]
   27d20:	mov	r0, r8
   27d24:	sub	sp, fp, #28
   27d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d2c:	add	r7, r0, r2, lsl #2
   27d30:	mov	r2, #2
   27d34:	ldr	r0, [r7, #8]!
   27d38:	add	r9, r2, r1, lsl #1
   27d3c:	lsl	r1, r9, #2
   27d40:	bl	1bd04 <__assert_fail@plt+0xa058>
   27d44:	cmp	r0, #0
   27d48:	beq	27d20 <__assert_fail@plt+0x16074>
   27d4c:	str	r0, [r7]
   27d50:	str	r9, [r6]
   27d54:	ldr	r1, [r5]
   27d58:	b	27d10 <__assert_fail@plt+0x16064>
   27d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d60:	add	fp, sp, #28
   27d64:	sub	sp, sp, #36	; 0x24
   27d68:	mov	r4, r0
   27d6c:	ldr	r0, [r0, #24]
   27d70:	mov	r6, r2
   27d74:	mov	r9, r1
   27d78:	cmp	r0, r1
   27d7c:	ble	27f98 <__assert_fail@plt+0x162ec>
   27d80:	ldr	r0, [r4, #80]	; 0x50
   27d84:	mov	r1, #4
   27d88:	mov	r5, r9
   27d8c:	cmp	r0, #2
   27d90:	movge	r0, #0
   27d94:	strge	r0, [r4, #16]
   27d98:	strge	r0, [r4, #20]
   27d9c:	mov	r0, #0
   27da0:	tst	r6, #1
   27da4:	str	r0, [r4, #24]
   27da8:	str	r0, [r4, #28]
   27dac:	str	r0, [r4, #32]
   27db0:	strb	r0, [r4, #76]	; 0x4c
   27db4:	movweq	r1, #6
   27db8:	ldr	r2, [r4, #44]	; 0x2c
   27dbc:	ldr	r3, [r4, #52]	; 0x34
   27dc0:	str	r2, [r4, #48]	; 0x30
   27dc4:	str	r3, [r4, #56]	; 0x38
   27dc8:	str	r1, [r4, #60]	; 0x3c
   27dcc:	ldrb	r1, [r4, #75]	; 0x4b
   27dd0:	cmp	r1, #0
   27dd4:	ldreq	r1, [r4]
   27dd8:	streq	r1, [r4, #4]
   27ddc:	cmp	r5, #0
   27de0:	beq	27f14 <__assert_fail@plt+0x16268>
   27de4:	ldr	r1, [r4, #32]
   27de8:	cmp	r5, r1
   27dec:	bge	27fa8 <__assert_fail@plt+0x162fc>
   27df0:	ldrb	r0, [r4, #76]	; 0x4c
   27df4:	cmp	r0, #0
   27df8:	bne	28158 <__assert_fail@plt+0x164ac>
   27dfc:	cmp	r5, #0
   27e00:	ble	27e44 <__assert_fail@plt+0x16198>
   27e04:	ldr	r1, [r4, #48]	; 0x30
   27e08:	sub	r0, r5, #1
   27e0c:	cmp	r1, r0
   27e10:	beq	28220 <__assert_fail@plt+0x16574>
   27e14:	ldr	r1, [r4, #80]	; 0x50
   27e18:	cmp	r1, #2
   27e1c:	blt	27e5c <__assert_fail@plt+0x161b0>
   27e20:	ldr	r0, [r4, #8]
   27e24:	mov	r1, r5
   27e28:	sub	r0, r0, #4
   27e2c:	ldr	r6, [r0, r1, lsl #2]
   27e30:	cmn	r6, #1
   27e34:	bne	27e90 <__assert_fail@plt+0x161e4>
   27e38:	sub	r1, r1, #1
   27e3c:	cmp	r1, #0
   27e40:	bgt	27e2c <__assert_fail@plt+0x16180>
   27e44:	ldr	r1, [r4, #60]	; 0x3c
   27e48:	str	r1, [r4, #60]	; 0x3c
   27e4c:	ldr	r0, [r4, #80]	; 0x50
   27e50:	cmp	r0, #2
   27e54:	bge	27ec4 <__assert_fail@plt+0x16218>
   27e58:	b	27edc <__assert_fail@plt+0x16230>
   27e5c:	ldr	r1, [r4, #4]
   27e60:	ldr	r2, [r4, #68]	; 0x44
   27e64:	ldrb	r0, [r1, r0]
   27e68:	ubfx	r1, r0, #5, #3
   27e6c:	and	r3, r0, #31
   27e70:	ldr	r2, [r2, r1, lsl #2]
   27e74:	mov	r1, #1
   27e78:	tst	r2, r1, lsl r3
   27e7c:	bne	27eb4 <__assert_fail@plt+0x16208>
   27e80:	mov	r1, #0
   27e84:	cmp	r0, #10
   27e88:	beq	27ea8 <__assert_fail@plt+0x161fc>
   27e8c:	b	27eb4 <__assert_fail@plt+0x16208>
   27e90:	ldrb	r0, [r4, #78]	; 0x4e
   27e94:	cmp	r0, #0
   27e98:	bne	2841c <__assert_fail@plt+0x16770>
   27e9c:	mov	r1, #0
   27ea0:	cmp	r6, #10
   27ea4:	bne	27eb4 <__assert_fail@plt+0x16208>
   27ea8:	ldrb	r1, [r4, #77]	; 0x4d
   27eac:	cmp	r1, #0
   27eb0:	movwne	r1, #2
   27eb4:	str	r1, [r4, #60]	; 0x3c
   27eb8:	ldr	r0, [r4, #80]	; 0x50
   27ebc:	cmp	r0, #2
   27ec0:	blt	27edc <__assert_fail@plt+0x16230>
   27ec4:	ldr	r2, [r4, #28]
   27ec8:	ldr	r0, [r4, #8]
   27ecc:	sub	r2, r2, r5
   27ed0:	add	r1, r0, r5, lsl #2
   27ed4:	lsl	r2, r2, #2
   27ed8:	bl	118a4 <memmove@plt>
   27edc:	ldrb	r0, [r4, #75]	; 0x4b
   27ee0:	cmp	r0, #0
   27ee4:	bne	28208 <__assert_fail@plt+0x1655c>
   27ee8:	ldr	r0, [r4, #28]
   27eec:	ldr	r1, [r4, #32]
   27ef0:	sub	r0, r0, r5
   27ef4:	sub	r1, r1, r5
   27ef8:	str	r0, [r4, #28]
   27efc:	str	r1, [r4, #32]
   27f00:	ldrb	r0, [r4, #75]	; 0x4b
   27f04:	cmp	r0, #0
   27f08:	ldreq	r0, [r4, #4]
   27f0c:	addeq	r0, r0, r5
   27f10:	streq	r0, [r4, #4]
   27f14:	str	r9, [r4, #24]
   27f18:	ldr	r0, [r4, #48]	; 0x30
   27f1c:	ldr	r3, [r4, #80]	; 0x50
   27f20:	ldr	r2, [r4, #56]	; 0x38
   27f24:	sub	r1, r0, r5
   27f28:	cmp	r3, #2
   27f2c:	sub	r0, r2, r5
   27f30:	str	r1, [r4, #48]	; 0x30
   27f34:	str	r0, [r4, #56]	; 0x38
   27f38:	blt	27f60 <__assert_fail@plt+0x162b4>
   27f3c:	ldrb	r0, [r4, #72]	; 0x48
   27f40:	cmp	r0, #0
   27f44:	beq	27f80 <__assert_fail@plt+0x162d4>
   27f48:	mov	r0, r4
   27f4c:	bl	21210 <__assert_fail@plt+0xf564>
   27f50:	cmp	r0, #0
   27f54:	beq	27f88 <__assert_fail@plt+0x162dc>
   27f58:	sub	sp, fp, #28
   27f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f60:	ldrb	r0, [r4, #75]	; 0x4b
   27f64:	cmp	r0, #0
   27f68:	bne	2823c <__assert_fail@plt+0x16590>
   27f6c:	str	r1, [r4, #28]
   27f70:	mov	r0, #0
   27f74:	str	r0, [r4, #40]	; 0x28
   27f78:	sub	sp, fp, #28
   27f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f80:	mov	r0, r4
   27f84:	bl	218d0 <__assert_fail@plt+0xfc24>
   27f88:	mov	r0, #0
   27f8c:	str	r0, [r4, #40]	; 0x28
   27f90:	sub	sp, fp, #28
   27f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f98:	sub	r5, r9, r0
   27f9c:	cmp	r5, #0
   27fa0:	bne	27de4 <__assert_fail@plt+0x16138>
   27fa4:	b	27f14 <__assert_fail@plt+0x16268>
   27fa8:	ldrb	r2, [r4, #76]	; 0x4c
   27fac:	ldr	lr, [r4, #28]
   27fb0:	cmp	r2, #0
   27fb4:	bne	28590 <__assert_fail@plt+0x168e4>
   27fb8:	mov	r2, #0
   27fbc:	str	r2, [r4, #28]
   27fc0:	ldr	r3, [r4, #80]	; 0x50
   27fc4:	cmp	r3, #2
   27fc8:	blt	282cc <__assert_fail@plt+0x16620>
   27fcc:	ldrb	r2, [r4, #73]	; 0x49
   27fd0:	cmp	r2, #0
   27fd4:	beq	28090 <__assert_fail@plt+0x163e4>
   27fd8:	ldr	r7, [r4]
   27fdc:	sub	r3, r5, r3
   27fe0:	add	ip, r7, r0
   27fe4:	add	r3, ip, r3
   27fe8:	add	r8, ip, r5
   27fec:	cmp	r3, r7
   27ff0:	movcc	r3, r7
   27ff4:	mov	r7, r8
   27ff8:	sub	r7, r7, #1
   27ffc:	cmp	r7, r3
   28000:	bcc	28090 <__assert_fail@plt+0x163e4>
   28004:	ldrb	r2, [r7]
   28008:	and	r2, r2, #192	; 0xc0
   2800c:	cmp	r2, #128	; 0x80
   28010:	beq	27ff8 <__assert_fail@plt+0x1634c>
   28014:	ldr	r0, [r4, #48]	; 0x30
   28018:	mov	sl, lr
   2801c:	mov	r1, r7
   28020:	add	r3, ip, r0
   28024:	ldr	r0, [r4, #64]	; 0x40
   28028:	sub	r2, r3, r7
   2802c:	cmp	r0, #0
   28030:	bne	2875c <__assert_fail@plt+0x16ab0>
   28034:	mov	r0, #0
   28038:	add	r3, sp, #24
   2803c:	str	r0, [sp, #28]
   28040:	str	r0, [sp, #24]
   28044:	add	r0, sp, #20
   28048:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   2804c:	sub	r1, r8, r7
   28050:	mvn	r7, #0
   28054:	cmp	r0, r1
   28058:	bcc	2807c <__assert_fail@plt+0x163d0>
   2805c:	cmn	r0, #3
   28060:	bhi	2807c <__assert_fail@plt+0x163d0>
   28064:	mov	r2, #0
   28068:	sub	r0, r0, r1
   2806c:	str	r2, [r4, #16]
   28070:	str	r2, [r4, #20]
   28074:	str	r0, [r4, #28]
   28078:	ldr	r7, [sp, #20]
   2807c:	cmn	r7, #1
   28080:	bne	2813c <__assert_fail@plt+0x16490>
   28084:	ldr	r0, [r4, #24]
   28088:	ldr	r1, [r4, #32]
   2808c:	mov	lr, sl
   28090:	add	r8, r1, r0
   28094:	cmp	r8, r9
   28098:	bge	2843c <__assert_fail@plt+0x16790>
   2809c:	add	sl, r4, #16
   280a0:	str	lr, [sp]
   280a4:	ldr	r0, [r4]
   280a8:	ldr	r2, [r4, #44]	; 0x2c
   280ac:	mov	r3, sl
   280b0:	add	r1, r0, r8
   280b4:	ldr	r0, [sl]
   280b8:	sub	r7, r2, r8
   280bc:	mov	r2, r7
   280c0:	str	r0, [sp, #8]
   280c4:	ldr	r0, [sl, #4]
   280c8:	str	r0, [sp, #4]
   280cc:	add	r0, sp, #24
   280d0:	bl	1bca4 <__assert_fail@plt+0x9ff8>
   280d4:	sub	r1, r0, #1
   280d8:	cmn	r1, #3
   280dc:	bcs	280f4 <__assert_fail@plt+0x16448>
   280e0:	ldr	r7, [sp, #24]
   280e4:	add	r8, r0, r8
   280e8:	cmp	r8, r9
   280ec:	blt	280a4 <__assert_fail@plt+0x163f8>
   280f0:	b	28128 <__assert_fail@plt+0x1647c>
   280f4:	cmp	r7, #0
   280f8:	mov	r1, #0
   280fc:	ldr	r3, [sp, #4]
   28100:	ldr	r2, [sp, #8]
   28104:	cmpne	r0, #0
   28108:	ldrne	r0, [r4]
   2810c:	ldrbne	r1, [r0, r8]
   28110:	stm	sl, {r2, r3}
   28114:	mov	r0, #1
   28118:	mov	r7, r1
   2811c:	add	r8, r0, r8
   28120:	cmp	r8, r9
   28124:	blt	280a4 <__assert_fail@plt+0x163f8>
   28128:	ldr	lr, [sp]
   2812c:	sub	r0, r8, r9
   28130:	cmn	r7, #1
   28134:	str	r0, [r4, #28]
   28138:	beq	28444 <__assert_fail@plt+0x16798>
   2813c:	ldrb	r0, [r4, #78]	; 0x4e
   28140:	cmp	r0, #0
   28144:	bne	2872c <__assert_fail@plt+0x16a80>
   28148:	mov	r1, #0
   2814c:	cmp	r7, #10
   28150:	beq	28568 <__assert_fail@plt+0x168bc>
   28154:	b	28574 <__assert_fail@plt+0x168c8>
   28158:	ldr	ip, [r4, #12]
   2815c:	ldr	r0, [r4, #28]
   28160:	mov	r1, #0
   28164:	add	r2, r1, r0
   28168:	add	r2, r2, r2, lsr #31
   2816c:	asr	r7, r2, #1
   28170:	ldr	r3, [ip, r7, lsl #2]
   28174:	mov	r2, r7
   28178:	cmp	r3, r5
   2817c:	bgt	2818c <__assert_fail@plt+0x164e0>
   28180:	bge	28198 <__assert_fail@plt+0x164ec>
   28184:	add	r1, r7, #1
   28188:	mov	r2, r0
   2818c:	cmp	r1, r2
   28190:	mov	r0, r2
   28194:	blt	28164 <__assert_fail@plt+0x164b8>
   28198:	mov	r8, #0
   2819c:	cmp	r3, r5
   281a0:	movwlt	r8, #1
   281a4:	add	sl, r7, r8
   281a8:	cmp	sl, #0
   281ac:	ble	281f0 <__assert_fail@plt+0x16544>
   281b0:	ldr	r1, [r4, #48]	; 0x30
   281b4:	sub	r0, sl, #1
   281b8:	cmp	r1, r0
   281bc:	beq	285b8 <__assert_fail@plt+0x1690c>
   281c0:	ldr	r1, [r4, #80]	; 0x50
   281c4:	cmp	r1, #2
   281c8:	blt	28328 <__assert_fail@plt+0x1667c>
   281cc:	ldr	r0, [r4, #8]
   281d0:	mov	r1, sl
   281d4:	sub	r0, r0, #4
   281d8:	ldr	r6, [r0, r1, lsl #2]
   281dc:	cmn	r6, #1
   281e0:	bne	2835c <__assert_fail@plt+0x166b0>
   281e4:	sub	r1, r1, #1
   281e8:	cmp	r1, #0
   281ec:	bgt	281d8 <__assert_fail@plt+0x1652c>
   281f0:	ldr	r1, [r4, #60]	; 0x3c
   281f4:	str	r1, [r4, #60]	; 0x3c
   281f8:	cmp	sl, r5
   281fc:	ldr	r2, [r4, #28]
   28200:	beq	28390 <__assert_fail@plt+0x166e4>
   28204:	b	285d0 <__assert_fail@plt+0x16924>
   28208:	ldr	r2, [r4, #28]
   2820c:	ldr	r0, [r4, #4]
   28210:	add	r1, r0, r5
   28214:	sub	r2, r2, r5
   28218:	bl	118a4 <memmove@plt>
   2821c:	b	27ee8 <__assert_fail@plt+0x1623c>
   28220:	and	r0, r6, #2
   28224:	eor	r1, r0, #10
   28228:	str	r1, [r4, #60]	; 0x3c
   2822c:	ldr	r0, [r4, #80]	; 0x50
   28230:	cmp	r0, #2
   28234:	bge	27ec4 <__assert_fail@plt+0x16218>
   28238:	b	27edc <__assert_fail@plt+0x16230>
   2823c:	ldrb	r0, [r4, #72]	; 0x48
   28240:	cmp	r0, #0
   28244:	beq	28490 <__assert_fail@plt+0x167e4>
   28248:	ldr	r6, [r4, #36]	; 0x24
   2824c:	ldr	r5, [r4, #28]
   28250:	cmp	r6, r1
   28254:	movgt	r6, r1
   28258:	cmp	r5, r6
   2825c:	blt	28268 <__assert_fail@plt+0x165bc>
   28260:	b	282b4 <__assert_fail@plt+0x16608>
   28264:	ldr	r9, [r4, #24]
   28268:	ldr	r1, [r4]
   2826c:	ldr	r0, [r4, #64]	; 0x40
   28270:	add	r1, r1, r9
   28274:	cmp	r0, #0
   28278:	ldrb	r7, [r1, r5]
   2827c:	ldrbne	r7, [r0, r7]
   28280:	add	r0, r7, #128	; 0x80
   28284:	lsr	r0, r0, #7
   28288:	cmp	r0, #2
   2828c:	bhi	2829c <__assert_fail@plt+0x165f0>
   28290:	bl	11a6c <__ctype_toupper_loc@plt>
   28294:	ldr	r0, [r0]
   28298:	ldr	r7, [r0, r7, lsl #2]
   2829c:	ldr	r0, [r4, #4]
   282a0:	strb	r7, [r0, r5]
   282a4:	add	r5, r5, #1
   282a8:	cmp	r5, r6
   282ac:	blt	28264 <__assert_fail@plt+0x165b8>
   282b0:	mov	r5, r6
   282b4:	str	r5, [r4, #28]
   282b8:	str	r5, [r4, #32]
   282bc:	mov	r0, #0
   282c0:	str	r0, [r4, #40]	; 0x28
   282c4:	sub	sp, fp, #28
   282c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282cc:	ldr	r3, [r4]
   282d0:	add	r0, r5, r0
   282d4:	ldr	r1, [r4, #64]	; 0x40
   282d8:	add	r0, r3, r0
   282dc:	cmp	r1, #0
   282e0:	ldrb	r0, [r0, #-1]
   282e4:	str	r2, [r4, #32]
   282e8:	ldrbne	r0, [r1, r0]
   282ec:	ldr	r1, [r4, #68]	; 0x44
   282f0:	ubfx	r2, r0, #5, #3
   282f4:	and	r3, r0, #31
   282f8:	ldr	r2, [r1, r2, lsl #2]
   282fc:	mov	r1, #1
   28300:	tst	r2, r1, lsl r3
   28304:	bne	28320 <__assert_fail@plt+0x16674>
   28308:	mov	r1, #0
   2830c:	cmp	r0, #10
   28310:	bne	28320 <__assert_fail@plt+0x16674>
   28314:	ldrb	r1, [r4, #77]	; 0x4d
   28318:	cmp	r1, #0
   2831c:	movwne	r1, #2
   28320:	str	r1, [r4, #60]	; 0x3c
   28324:	b	27f00 <__assert_fail@plt+0x16254>
   28328:	ldr	r1, [r4, #4]
   2832c:	ldr	r2, [r4, #68]	; 0x44
   28330:	ldrb	r0, [r1, r0]
   28334:	ubfx	r1, r0, #5, #3
   28338:	and	r3, r0, #31
   2833c:	ldr	r2, [r2, r1, lsl #2]
   28340:	mov	r1, #1
   28344:	tst	r2, r1, lsl r3
   28348:	bne	28380 <__assert_fail@plt+0x166d4>
   2834c:	mov	r1, #0
   28350:	cmp	r0, #10
   28354:	beq	28374 <__assert_fail@plt+0x166c8>
   28358:	b	28380 <__assert_fail@plt+0x166d4>
   2835c:	ldrb	r0, [r4, #78]	; 0x4e
   28360:	cmp	r0, #0
   28364:	bne	2870c <__assert_fail@plt+0x16a60>
   28368:	mov	r1, #0
   2836c:	cmp	r6, #10
   28370:	bne	28380 <__assert_fail@plt+0x166d4>
   28374:	ldrb	r1, [r4, #77]	; 0x4d
   28378:	cmp	r1, #0
   2837c:	movwne	r1, #2
   28380:	str	r1, [r4, #60]	; 0x3c
   28384:	cmp	sl, r5
   28388:	ldr	r2, [r4, #28]
   2838c:	bne	285d0 <__assert_fail@plt+0x16924>
   28390:	cmp	r2, r5
   28394:	ble	285d0 <__assert_fail@plt+0x16924>
   28398:	ldr	r0, [r4, #12]
   2839c:	ldr	r0, [r0, r5, lsl #2]
   283a0:	cmp	r0, r5
   283a4:	bne	285d0 <__assert_fail@plt+0x16924>
   283a8:	ldr	r0, [r4, #8]
   283ac:	sub	r2, r2, r5
   283b0:	lsl	r2, r2, #2
   283b4:	add	r1, r0, r5, lsl #2
   283b8:	bl	118a4 <memmove@plt>
   283bc:	ldr	r2, [r4, #28]
   283c0:	ldr	r0, [r4, #4]
   283c4:	add	r1, r0, r5
   283c8:	sub	r2, r2, r5
   283cc:	bl	118a4 <memmove@plt>
   283d0:	ldr	r0, [r4, #28]
   283d4:	ldr	r1, [r4, #32]
   283d8:	sub	r0, r0, r5
   283dc:	sub	r1, r1, r5
   283e0:	cmp	r0, #1
   283e4:	str	r0, [r4, #28]
   283e8:	str	r1, [r4, #32]
   283ec:	blt	27f00 <__assert_fail@plt+0x16254>
   283f0:	ldr	r0, [r4, #12]
   283f4:	mov	r2, #0
   283f8:	add	r1, r0, r5, lsl #2
   283fc:	ldr	r3, [r1, r2, lsl #2]
   28400:	sub	r3, r3, r5
   28404:	str	r3, [r0, r2, lsl #2]
   28408:	add	r2, r2, #1
   2840c:	ldr	r3, [r4, #28]
   28410:	cmp	r2, r3
   28414:	blt	283fc <__assert_fail@plt+0x16750>
   28418:	b	27f00 <__assert_fail@plt+0x16254>
   2841c:	mov	r0, r6
   28420:	bl	11afc <iswalnum@plt>
   28424:	mov	r1, #1
   28428:	cmp	r6, #95	; 0x5f
   2842c:	beq	27eb4 <__assert_fail@plt+0x16208>
   28430:	cmp	r0, #0
   28434:	beq	27e9c <__assert_fail@plt+0x161f0>
   28438:	b	27eb4 <__assert_fail@plt+0x16208>
   2843c:	sub	r0, r8, r9
   28440:	str	r0, [r4, #28]
   28444:	cmp	lr, #0
   28448:	ble	28488 <__assert_fail@plt+0x167dc>
   2844c:	ldr	r1, [r4, #48]	; 0x30
   28450:	sub	r0, lr, #1
   28454:	cmp	r1, r0
   28458:	beq	28700 <__assert_fail@plt+0x16a54>
   2845c:	ldr	r1, [r4, #80]	; 0x50
   28460:	cmp	r1, #2
   28464:	blt	2851c <__assert_fail@plt+0x16870>
   28468:	ldr	r0, [r4, #8]
   2846c:	sub	r0, r0, #4
   28470:	ldr	r6, [r0, lr, lsl #2]
   28474:	cmn	r6, #1
   28478:	bne	28550 <__assert_fail@plt+0x168a4>
   2847c:	sub	lr, lr, #1
   28480:	cmp	lr, #0
   28484:	bgt	28470 <__assert_fail@plt+0x167c4>
   28488:	ldr	r1, [r4, #60]	; 0x3c
   2848c:	b	28574 <__assert_fail@plt+0x168c8>
   28490:	ldr	r3, [r4, #64]	; 0x40
   28494:	cmp	r3, #0
   28498:	beq	27f88 <__assert_fail@plt+0x162dc>
   2849c:	ldr	r0, [r4, #36]	; 0x24
   284a0:	ldr	r2, [r4, #28]
   284a4:	cmp	r0, r1
   284a8:	movgt	r0, r1
   284ac:	cmp	r2, r0
   284b0:	bge	28504 <__assert_fail@plt+0x16858>
   284b4:	ldr	r7, [r4]
   284b8:	add	r1, r2, r9
   284bc:	ldr	r6, [r4, #4]
   284c0:	ldrb	r1, [r7, r1]
   284c4:	ldrb	r1, [r3, r1]
   284c8:	strb	r1, [r6, r2]
   284cc:	add	r1, r2, #1
   284d0:	cmp	r1, r0
   284d4:	bge	28500 <__assert_fail@plt+0x16854>
   284d8:	ldm	r4, {r2, r3}
   284dc:	ldr	r7, [r4, #24]
   284e0:	ldr	r6, [r4, #64]	; 0x40
   284e4:	add	r2, r2, r7
   284e8:	ldrb	r2, [r2, r1]
   284ec:	ldrb	r2, [r6, r2]
   284f0:	strb	r2, [r3, r1]
   284f4:	add	r1, r1, #1
   284f8:	cmp	r1, r0
   284fc:	blt	284d8 <__assert_fail@plt+0x1682c>
   28500:	mov	r2, r0
   28504:	str	r2, [r4, #28]
   28508:	str	r2, [r4, #32]
   2850c:	mov	r0, #0
   28510:	str	r0, [r4, #40]	; 0x28
   28514:	sub	sp, fp, #28
   28518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2851c:	ldr	r1, [r4, #4]
   28520:	ldr	r2, [r4, #68]	; 0x44
   28524:	ldrb	r0, [r1, r0]
   28528:	ubfx	r1, r0, #5, #3
   2852c:	and	r3, r0, #31
   28530:	ldr	r2, [r2, r1, lsl #2]
   28534:	mov	r1, #1
   28538:	tst	r2, r1, lsl r3
   2853c:	bne	28574 <__assert_fail@plt+0x168c8>
   28540:	mov	r1, #0
   28544:	cmp	r0, #10
   28548:	beq	28568 <__assert_fail@plt+0x168bc>
   2854c:	b	28574 <__assert_fail@plt+0x168c8>
   28550:	ldrb	r0, [r4, #78]	; 0x4e
   28554:	cmp	r0, #0
   28558:	bne	287a4 <__assert_fail@plt+0x16af8>
   2855c:	mov	r1, #0
   28560:	cmp	r6, #10
   28564:	bne	28574 <__assert_fail@plt+0x168c8>
   28568:	ldrb	r1, [r4, #77]	; 0x4d
   2856c:	cmp	r1, #0
   28570:	movwne	r1, #2
   28574:	str	r1, [r4, #60]	; 0x3c
   28578:	mov	r0, #0
   2857c:	ldr	r2, [r4, #28]
   28580:	cmp	r2, #0
   28584:	bne	286b8 <__assert_fail@plt+0x16a0c>
   28588:	str	r0, [r4, #32]
   2858c:	b	27f00 <__assert_fail@plt+0x16254>
   28590:	mov	r2, #0
   28594:	strb	r2, [r4, #76]	; 0x4c
   28598:	sub	r2, r5, r9
   2859c:	ldr	r3, [r4, #44]	; 0x2c
   285a0:	ldr	r7, [r4, #52]	; 0x34
   285a4:	add	r3, r2, r3
   285a8:	add	r2, r2, r7
   285ac:	str	r3, [r4, #48]	; 0x30
   285b0:	str	r2, [r4, #56]	; 0x38
   285b4:	b	27fb8 <__assert_fail@plt+0x1630c>
   285b8:	and	r0, r6, #2
   285bc:	eor	r1, r0, #10
   285c0:	str	r1, [r4, #60]	; 0x3c
   285c4:	cmp	sl, r5
   285c8:	ldr	r2, [r4, #28]
   285cc:	beq	28390 <__assert_fail@plt+0x166e4>
   285d0:	mov	r0, #0
   285d4:	strb	r0, [r4, #76]	; 0x4c
   285d8:	sub	r0, r5, r9
   285dc:	ldr	r1, [r4, #44]	; 0x2c
   285e0:	ldr	r3, [r4, #52]	; 0x34
   285e4:	add	r1, r0, r1
   285e8:	add	r0, r0, r3
   285ec:	str	r1, [r4, #48]	; 0x30
   285f0:	str	r0, [r4, #56]	; 0x38
   285f4:	add	r0, r7, r8
   285f8:	sub	r1, r0, #1
   285fc:	add	r0, r1, #1
   28600:	cmp	r0, #1
   28604:	blt	2861c <__assert_fail@plt+0x16970>
   28608:	ldr	r3, [r4, #12]
   2860c:	ldr	r3, [r3, r1, lsl #2]
   28610:	sub	r1, r1, #1
   28614:	cmp	r3, r5
   28618:	beq	285fc <__assert_fail@plt+0x16950>
   2861c:	cmp	r0, r2
   28620:	bge	28640 <__assert_fail@plt+0x16994>
   28624:	ldr	r1, [r4, #8]
   28628:	ldr	r3, [r1, r0, lsl #2]
   2862c:	cmn	r3, #1
   28630:	bne	28640 <__assert_fail@plt+0x16994>
   28634:	add	r0, r0, #1
   28638:	cmp	r0, r2
   2863c:	blt	28628 <__assert_fail@plt+0x1697c>
   28640:	cmp	r0, r2
   28644:	bne	28658 <__assert_fail@plt+0x169ac>
   28648:	mov	r0, #0
   2864c:	str	r0, [r4, #28]
   28650:	str	r0, [r4, #32]
   28654:	b	27f00 <__assert_fail@plt+0x16254>
   28658:	ldr	r1, [r4, #12]
   2865c:	ldr	r0, [r1, r0, lsl #2]
   28660:	subs	r2, r0, r5
   28664:	str	r2, [r4, #28]
   28668:	beq	286ac <__assert_fail@plt+0x16a00>
   2866c:	cmp	r2, #1
   28670:	blt	28694 <__assert_fail@plt+0x169e8>
   28674:	ldr	r0, [r4, #8]
   28678:	mov	r1, #0
   2867c:	mvn	r3, #0
   28680:	str	r3, [r0, r1, lsl #2]
   28684:	add	r1, r1, #1
   28688:	ldr	r2, [r4, #28]
   2868c:	cmp	r1, r2
   28690:	blt	28680 <__assert_fail@plt+0x169d4>
   28694:	ldr	r0, [r4, #4]
   28698:	mov	r1, #255	; 0xff
   2869c:	bl	11b2c <memset@plt>
   286a0:	ldr	r0, [r4, #28]
   286a4:	str	r0, [r4, #32]
   286a8:	b	27f00 <__assert_fail@plt+0x16254>
   286ac:	mov	r0, #0
   286b0:	str	r0, [r4, #32]
   286b4:	b	27f00 <__assert_fail@plt+0x16254>
   286b8:	cmp	r2, #1
   286bc:	blt	286e0 <__assert_fail@plt+0x16a34>
   286c0:	ldr	r0, [r4, #8]
   286c4:	mov	r1, #0
   286c8:	mvn	r3, #0
   286cc:	str	r3, [r0, r1, lsl #2]
   286d0:	add	r1, r1, #1
   286d4:	ldr	r2, [r4, #28]
   286d8:	cmp	r1, r2
   286dc:	blt	286cc <__assert_fail@plt+0x16a20>
   286e0:	ldrb	r0, [r4, #75]	; 0x4b
   286e4:	cmp	r0, #0
   286e8:	beq	28750 <__assert_fail@plt+0x16aa4>
   286ec:	ldr	r0, [r4, #4]
   286f0:	mov	r1, #255	; 0xff
   286f4:	bl	11b2c <memset@plt>
   286f8:	ldr	r0, [r4, #28]
   286fc:	b	28588 <__assert_fail@plt+0x168dc>
   28700:	and	r0, r6, #2
   28704:	eor	r1, r0, #10
   28708:	b	28574 <__assert_fail@plt+0x168c8>
   2870c:	mov	r0, r6
   28710:	bl	11afc <iswalnum@plt>
   28714:	mov	r1, #1
   28718:	cmp	r6, #95	; 0x5f
   2871c:	beq	28380 <__assert_fail@plt+0x166d4>
   28720:	cmp	r0, #0
   28724:	beq	28368 <__assert_fail@plt+0x166bc>
   28728:	b	28380 <__assert_fail@plt+0x166d4>
   2872c:	mov	r0, r7
   28730:	bl	11afc <iswalnum@plt>
   28734:	mov	r1, #1
   28738:	cmp	r7, #95	; 0x5f
   2873c:	beq	28574 <__assert_fail@plt+0x168c8>
   28740:	cmp	r0, #0
   28744:	mov	r2, r7
   28748:	beq	28148 <__assert_fail@plt+0x1649c>
   2874c:	b	28574 <__assert_fail@plt+0x168c8>
   28750:	mov	r0, r2
   28754:	str	r2, [r4, #32]
   28758:	b	27f00 <__assert_fail@plt+0x16254>
   2875c:	cmp	r2, #1
   28760:	blt	287c4 <__assert_fail@plt+0x16b18>
   28764:	sub	r1, r7, #1
   28768:	sub	r1, r1, r3
   2876c:	mvn	r3, #1
   28770:	cmn	r1, #7
   28774:	mvnle	r1, #6
   28778:	sub	ip, r3, r1
   2877c:	add	r1, sp, #14
   28780:	ldrb	r3, [r7, ip]
   28784:	sub	lr, ip, #1
   28788:	ldrb	r3, [r0, r3]
   2878c:	strb	r3, [r1, ip]
   28790:	add	r3, ip, #1
   28794:	mov	ip, lr
   28798:	cmp	r3, #1
   2879c:	bgt	28780 <__assert_fail@plt+0x16ad4>
   287a0:	b	28034 <__assert_fail@plt+0x16388>
   287a4:	mov	r0, r6
   287a8:	bl	11afc <iswalnum@plt>
   287ac:	mov	r1, #1
   287b0:	cmp	r6, #95	; 0x5f
   287b4:	beq	28574 <__assert_fail@plt+0x168c8>
   287b8:	cmp	r0, #0
   287bc:	beq	2855c <__assert_fail@plt+0x168b0>
   287c0:	b	28574 <__assert_fail@plt+0x168c8>
   287c4:	add	r1, sp, #14
   287c8:	b	28034 <__assert_fail@plt+0x16388>
   287cc:	push	{r4, r5, r6, sl, fp, lr}
   287d0:	add	fp, sp, #16
   287d4:	mov	r3, r2
   287d8:	ldr	r2, [r0, #88]	; 0x58
   287dc:	mov	r5, r1
   287e0:	mov	r4, r0
   287e4:	mov	r1, r3
   287e8:	bl	28a18 <__assert_fail@plt+0x16d6c>
   287ec:	ldr	r1, [r5, #8]
   287f0:	cmp	r1, #1
   287f4:	blt	28968 <__assert_fail@plt+0x16cbc>
   287f8:	ldr	r3, [r5, #12]
   287fc:	ldr	r5, [r4, #84]	; 0x54
   28800:	movw	lr, #65280	; 0xff00
   28804:	and	ip, r0, #8
   28808:	and	r2, r0, #2
   2880c:	tst	r0, #1
   28810:	movt	lr, #3
   28814:	ldr	r5, [r5]
   28818:	bne	28870 <__assert_fail@plt+0x16bc4>
   2881c:	cmp	r2, #0
   28820:	bne	288d4 <__assert_fail@plt+0x16c28>
   28824:	mov	r2, #0
   28828:	ldr	r0, [r3, r2, lsl #2]
   2882c:	add	r4, r5, r0, lsl #3
   28830:	ldr	r4, [r4, #4]
   28834:	uxtb	r6, r4
   28838:	cmp	r6, #2
   2883c:	bne	28860 <__assert_fail@plt+0x16bb4>
   28840:	tst	r4, lr
   28844:	beq	2896c <__assert_fail@plt+0x16cc0>
   28848:	tst	r4, #9216	; 0x2400
   2884c:	bne	28860 <__assert_fail@plt+0x16bb4>
   28850:	cmp	ip, #0
   28854:	bne	2896c <__assert_fail@plt+0x16cc0>
   28858:	ands	r4, r4, #32768	; 0x8000
   2885c:	beq	2896c <__assert_fail@plt+0x16cc0>
   28860:	add	r2, r2, #1
   28864:	cmp	r2, r1
   28868:	blt	28828 <__assert_fail@plt+0x16b7c>
   2886c:	b	28968 <__assert_fail@plt+0x16cbc>
   28870:	cmp	r2, #0
   28874:	bne	28920 <__assert_fail@plt+0x16c74>
   28878:	mov	r2, #0
   2887c:	ldr	r0, [r3, r2, lsl #2]
   28880:	add	r4, r5, r0, lsl #3
   28884:	ldr	r4, [r4, #4]
   28888:	uxtb	r6, r4
   2888c:	cmp	r6, #2
   28890:	bne	288a4 <__assert_fail@plt+0x16bf8>
   28894:	tst	r4, lr
   28898:	beq	2896c <__assert_fail@plt+0x16cc0>
   2889c:	tst	r4, #10240	; 0x2800
   288a0:	beq	288b4 <__assert_fail@plt+0x16c08>
   288a4:	add	r2, r2, #1
   288a8:	cmp	r2, r1
   288ac:	blt	2887c <__assert_fail@plt+0x16bd0>
   288b0:	b	28968 <__assert_fail@plt+0x16cbc>
   288b4:	cmp	ip, #0
   288b8:	bne	2896c <__assert_fail@plt+0x16cc0>
   288bc:	ands	r4, r4, #32768	; 0x8000
   288c0:	popeq	{r4, r5, r6, sl, fp, pc}
   288c4:	add	r2, r2, #1
   288c8:	cmp	r2, r1
   288cc:	blt	2887c <__assert_fail@plt+0x16bd0>
   288d0:	b	28968 <__assert_fail@plt+0x16cbc>
   288d4:	mov	r2, #0
   288d8:	ldr	r0, [r3, r2, lsl #2]
   288dc:	add	r4, r5, r0, lsl #3
   288e0:	ldr	r4, [r4, #4]
   288e4:	uxtb	r6, r4
   288e8:	cmp	r6, #2
   288ec:	bne	28910 <__assert_fail@plt+0x16c64>
   288f0:	tst	r4, lr
   288f4:	beq	2896c <__assert_fail@plt+0x16cc0>
   288f8:	tst	r4, #1024	; 0x400
   288fc:	bne	28910 <__assert_fail@plt+0x16c64>
   28900:	cmp	ip, #0
   28904:	bne	2896c <__assert_fail@plt+0x16cc0>
   28908:	ands	r4, r4, #32768	; 0x8000
   2890c:	beq	2896c <__assert_fail@plt+0x16cc0>
   28910:	add	r2, r2, #1
   28914:	cmp	r2, r1
   28918:	blt	288d8 <__assert_fail@plt+0x16c2c>
   2891c:	b	28968 <__assert_fail@plt+0x16cbc>
   28920:	mov	r2, #0
   28924:	ldr	r0, [r3, r2, lsl #2]
   28928:	add	r4, r5, r0, lsl #3
   2892c:	ldr	r4, [r4, #4]
   28930:	uxtb	r6, r4
   28934:	cmp	r6, #2
   28938:	bne	2895c <__assert_fail@plt+0x16cb0>
   2893c:	tst	r4, lr
   28940:	beq	2896c <__assert_fail@plt+0x16cc0>
   28944:	tst	r4, #2048	; 0x800
   28948:	bne	2895c <__assert_fail@plt+0x16cb0>
   2894c:	cmp	ip, #0
   28950:	bne	2896c <__assert_fail@plt+0x16cc0>
   28954:	ands	r4, r4, #32768	; 0x8000
   28958:	beq	2896c <__assert_fail@plt+0x16cc0>
   2895c:	add	r2, r2, #1
   28960:	cmp	r2, r1
   28964:	blt	28924 <__assert_fail@plt+0x16c78>
   28968:	mov	r0, #0
   2896c:	pop	{r4, r5, r6, sl, fp, pc}
   28970:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28974:	add	fp, sp, #24
   28978:	mov	r8, r0
   2897c:	ldr	r0, [r0, #124]	; 0x7c
   28980:	cmp	r0, #1
   28984:	blt	28a08 <__assert_fail@plt+0x16d5c>
   28988:	mov	r7, #0
   2898c:	ldr	r0, [r8, #132]	; 0x84
   28990:	ldr	r5, [r0, r7, lsl #2]
   28994:	ldr	r0, [r5, #16]
   28998:	cmp	r0, #1
   2899c:	blt	289cc <__assert_fail@plt+0x16d20>
   289a0:	mov	r4, #0
   289a4:	ldr	r0, [r5, #20]
   289a8:	ldr	r6, [r0, r4, lsl #2]
   289ac:	ldr	r0, [r6, #16]
   289b0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   289b4:	mov	r0, r6
   289b8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   289bc:	ldr	r0, [r5, #16]
   289c0:	add	r4, r4, #1
   289c4:	cmp	r4, r0
   289c8:	blt	289a4 <__assert_fail@plt+0x16cf8>
   289cc:	ldr	r0, [r5, #20]
   289d0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   289d4:	ldr	r0, [r5, #8]
   289d8:	cmp	r0, #0
   289dc:	beq	289f0 <__assert_fail@plt+0x16d44>
   289e0:	ldr	r0, [r0, #8]
   289e4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   289e8:	ldr	r0, [r5, #8]
   289ec:	bl	1bba8 <__assert_fail@plt+0x9efc>
   289f0:	mov	r0, r5
   289f4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   289f8:	ldr	r0, [r8, #124]	; 0x7c
   289fc:	add	r7, r7, #1
   28a00:	cmp	r7, r0
   28a04:	blt	2898c <__assert_fail@plt+0x16ce0>
   28a08:	mov	r0, #0
   28a0c:	str	r0, [r8, #108]	; 0x6c
   28a10:	str	r0, [r8, #124]	; 0x7c
   28a14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28a18:	push	{r4, r5, fp, lr}
   28a1c:	add	fp, sp, #8
   28a20:	mov	r4, r0
   28a24:	cmn	r1, #1
   28a28:	ldrle	r0, [r4, #60]	; 0x3c
   28a2c:	pople	{r4, r5, fp, pc}
   28a30:	ldr	r0, [r4, #48]	; 0x30
   28a34:	cmp	r0, r1
   28a38:	beq	28ad4 <__assert_fail@plt+0x16e28>
   28a3c:	ldr	r0, [r4, #80]	; 0x50
   28a40:	cmp	r0, #2
   28a44:	blt	28a94 <__assert_fail@plt+0x16de8>
   28a48:	ldr	r0, [r4, #8]
   28a4c:	ldr	r5, [r0, r1, lsl #2]
   28a50:	cmn	r5, #1
   28a54:	bne	28a78 <__assert_fail@plt+0x16dcc>
   28a58:	cmp	r1, #0
   28a5c:	sub	r2, r1, #1
   28a60:	ldrle	r0, [r4, #60]	; 0x3c
   28a64:	mov	r1, r2
   28a68:	pople	{r4, r5, fp, pc}
   28a6c:	ldr	r5, [r0, r1, lsl #2]
   28a70:	cmn	r5, #1
   28a74:	beq	28a58 <__assert_fail@plt+0x16dac>
   28a78:	ldrb	r0, [r4, #78]	; 0x4e
   28a7c:	cmp	r0, #0
   28a80:	bne	28ae0 <__assert_fail@plt+0x16e34>
   28a84:	mov	r0, #0
   28a88:	cmp	r5, #10
   28a8c:	beq	28ac4 <__assert_fail@plt+0x16e18>
   28a90:	b	28ad0 <__assert_fail@plt+0x16e24>
   28a94:	ldr	r0, [r4, #4]
   28a98:	ldr	r2, [r4, #68]	; 0x44
   28a9c:	ldrb	r1, [r0, r1]
   28aa0:	ubfx	r0, r1, #5, #3
   28aa4:	and	r3, r1, #31
   28aa8:	ldr	r2, [r2, r0, lsl #2]
   28aac:	mov	r0, #1
   28ab0:	tst	r2, r0, lsl r3
   28ab4:	bne	28ad0 <__assert_fail@plt+0x16e24>
   28ab8:	mov	r0, #0
   28abc:	cmp	r1, #10
   28ac0:	popne	{r4, r5, fp, pc}
   28ac4:	ldrb	r0, [r4, #77]	; 0x4d
   28ac8:	cmp	r0, #0
   28acc:	movwne	r0, #2
   28ad0:	pop	{r4, r5, fp, pc}
   28ad4:	and	r0, r2, #2
   28ad8:	eor	r0, r0, #10
   28adc:	pop	{r4, r5, fp, pc}
   28ae0:	mov	r0, r5
   28ae4:	bl	11afc <iswalnum@plt>
   28ae8:	mov	r1, r0
   28aec:	mov	r0, #1
   28af0:	cmp	r5, #95	; 0x5f
   28af4:	beq	28ad0 <__assert_fail@plt+0x16e24>
   28af8:	cmp	r1, #0
   28afc:	beq	28a84 <__assert_fail@plt+0x16dd8>
   28b00:	b	28ad0 <__assert_fail@plt+0x16e24>
   28b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b08:	add	fp, sp, #28
   28b0c:	sub	sp, sp, #4
   28b10:	mov	sl, r0
   28b14:	ldr	r0, [r1, #4]
   28b18:	cmp	r0, #1
   28b1c:	blt	28be8 <__assert_fail@plt+0x16f3c>
   28b20:	ldr	r7, [sl, #84]	; 0x54
   28b24:	mov	r8, r2
   28b28:	mov	r5, r1
   28b2c:	mov	r4, #0
   28b30:	b	28b58 <__assert_fail@plt+0x16eac>
   28b34:	ldr	r0, [sl, #132]	; 0x84
   28b38:	lsl	r1, r9, #3
   28b3c:	bl	1bd04 <__assert_fail@plt+0xa058>
   28b40:	cmp	r0, #0
   28b44:	beq	28bf4 <__assert_fail@plt+0x16f48>
   28b48:	lsl	r1, r9, #1
   28b4c:	str	r1, [sl, #128]	; 0x80
   28b50:	str	r0, [sl, #132]	; 0x84
   28b54:	b	28ba0 <__assert_fail@plt+0x16ef4>
   28b58:	ldr	r1, [r5, #8]
   28b5c:	ldr	r6, [r1, r4, lsl #2]
   28b60:	ldr	r1, [r7]
   28b64:	add	r2, r1, r6, lsl #3
   28b68:	ldrb	r2, [r2, #4]
   28b6c:	cmp	r2, #8
   28b70:	bne	28bdc <__assert_fail@plt+0x16f30>
   28b74:	ldr	r1, [r1, r6, lsl #3]
   28b78:	cmp	r1, #31
   28b7c:	bgt	28bdc <__assert_fail@plt+0x16f30>
   28b80:	ldr	r2, [r7, #80]	; 0x50
   28b84:	mov	r3, #1
   28b88:	tst	r2, r3, lsl r1
   28b8c:	beq	28bdc <__assert_fail@plt+0x16f30>
   28b90:	ldr	r9, [sl, #124]	; 0x7c
   28b94:	ldr	r0, [sl, #128]	; 0x80
   28b98:	cmp	r9, r0
   28b9c:	beq	28b34 <__assert_fail@plt+0x16e88>
   28ba0:	mov	r0, #1
   28ba4:	mov	r1, #24
   28ba8:	bl	1b90c <__assert_fail@plt+0x9c60>
   28bac:	ldr	r1, [sl, #124]	; 0x7c
   28bb0:	ldr	r2, [sl, #132]	; 0x84
   28bb4:	str	r0, [r2, r1, lsl #2]
   28bb8:	ldr	r0, [sl, #132]	; 0x84
   28bbc:	ldr	r0, [r0, r1, lsl #2]
   28bc0:	cmp	r0, #0
   28bc4:	beq	28bf4 <__assert_fail@plt+0x16f48>
   28bc8:	add	r1, r1, #1
   28bcc:	str	r6, [r0, #4]
   28bd0:	str	r1, [sl, #124]	; 0x7c
   28bd4:	str	r8, [r0]
   28bd8:	ldr	r0, [r5, #4]
   28bdc:	add	r4, r4, #1
   28be0:	cmp	r4, r0
   28be4:	blt	28b58 <__assert_fail@plt+0x16eac>
   28be8:	mov	r0, #0
   28bec:	sub	sp, fp, #28
   28bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bf4:	mov	r0, #12
   28bf8:	sub	sp, fp, #28
   28bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c04:	add	fp, sp, #28
   28c08:	sub	sp, sp, #76	; 0x4c
   28c0c:	mov	r9, r0
   28c10:	ldr	r0, [r1, #4]
   28c14:	cmp	r0, #1
   28c18:	blt	295dc <__assert_fail@plt+0x17930>
   28c1c:	ldr	r2, [r9, #84]	; 0x54
   28c20:	ldr	r5, [r9, #40]	; 0x28
   28c24:	mov	r3, #0
   28c28:	str	r9, [sp, #40]	; 0x28
   28c2c:	str	r1, [sp, #16]
   28c30:	str	r5, [sp, #52]	; 0x34
   28c34:	str	r2, [sp, #20]
   28c38:	b	28c80 <__assert_fail@plt+0x16fd4>
   28c3c:	ldr	r0, [r9, #88]	; 0x58
   28c40:	and	r0, r0, #2
   28c44:	eor	r1, r0, #10
   28c48:	and	r0, r1, #1
   28c4c:	tst	r6, #1024	; 0x400
   28c50:	eor	r2, r0, #1
   28c54:	bne	28d14 <__assert_fail@plt+0x17068>
   28c58:	b	28d8c <__assert_fail@plt+0x170e0>
   28c5c:	mov	r0, r4
   28c60:	bl	11afc <iswalnum@plt>
   28c64:	mov	r1, #1
   28c68:	mov	r2, #0
   28c6c:	cmp	r4, #95	; 0x5f
   28c70:	beq	28d8c <__assert_fail@plt+0x170e0>
   28c74:	cmp	r0, #0
   28c78:	beq	28d64 <__assert_fail@plt+0x170b8>
   28c7c:	b	28d8c <__assert_fail@plt+0x170e0>
   28c80:	ldr	r0, [r1, #8]
   28c84:	str	r3, [sp, #24]
   28c88:	ldr	r3, [r0, r3, lsl #2]
   28c8c:	ldr	r0, [r2]
   28c90:	add	r7, r0, r3, lsl #3
   28c94:	mov	r1, r3
   28c98:	str	r3, [sp, #48]	; 0x30
   28c9c:	ldr	r6, [r7, #4]!
   28ca0:	uxtb	r0, r6
   28ca4:	cmp	r0, #4
   28ca8:	bne	295c0 <__assert_fail@plt+0x17914>
   28cac:	movw	r0, #65280	; 0xff00
   28cb0:	movt	r0, #3
   28cb4:	tst	r6, r0
   28cb8:	beq	28dc0 <__assert_fail@plt+0x17114>
   28cbc:	cmn	r5, #1
   28cc0:	ble	28d00 <__assert_fail@plt+0x17054>
   28cc4:	ldr	r0, [r9, #48]	; 0x30
   28cc8:	cmp	r0, r5
   28ccc:	beq	28c3c <__assert_fail@plt+0x16f90>
   28cd0:	ldr	r0, [r9, #80]	; 0x50
   28cd4:	cmp	r0, #2
   28cd8:	blt	28d20 <__assert_fail@plt+0x17074>
   28cdc:	ldr	r0, [r9, #8]
   28ce0:	mov	r1, r5
   28ce4:	ldr	r4, [r0, r1, lsl #2]
   28ce8:	cmn	r4, #1
   28cec:	bne	28d58 <__assert_fail@plt+0x170ac>
   28cf0:	sub	r2, r1, #1
   28cf4:	cmp	r1, #0
   28cf8:	mov	r1, r2
   28cfc:	bgt	28ce4 <__assert_fail@plt+0x17038>
   28d00:	ldr	r1, [r9, #60]	; 0x3c
   28d04:	and	r0, r1, #1
   28d08:	tst	r6, #1024	; 0x400
   28d0c:	eor	r2, r0, #1
   28d10:	beq	28d8c <__assert_fail@plt+0x170e0>
   28d14:	cmp	r0, #0
   28d18:	beq	295c0 <__assert_fail@plt+0x17914>
   28d1c:	b	28d8c <__assert_fail@plt+0x170e0>
   28d20:	ldr	r0, [r9, #4]
   28d24:	ldr	r1, [r9, #68]	; 0x44
   28d28:	ldrb	r0, [r0, r5]
   28d2c:	ubfx	r2, r0, #5, #3
   28d30:	and	r4, r0, #31
   28d34:	ldr	r3, [r1, r2, lsl #2]
   28d38:	mov	r1, #1
   28d3c:	mov	r2, #0
   28d40:	tst	r3, r1, lsl r4
   28d44:	bne	28d8c <__assert_fail@plt+0x170e0>
   28d48:	mov	r1, #0
   28d4c:	cmp	r0, #10
   28d50:	beq	28d70 <__assert_fail@plt+0x170c4>
   28d54:	b	28d7c <__assert_fail@plt+0x170d0>
   28d58:	ldrb	r0, [r9, #78]	; 0x4e
   28d5c:	cmp	r0, #0
   28d60:	bne	28c5c <__assert_fail@plt+0x16fb0>
   28d64:	mov	r1, #0
   28d68:	cmp	r4, #10
   28d6c:	bne	28d7c <__assert_fail@plt+0x170d0>
   28d70:	ldrb	r1, [r9, #77]	; 0x4d
   28d74:	cmp	r1, #0
   28d78:	movwne	r1, #2
   28d7c:	and	r0, r1, #1
   28d80:	tst	r6, #1024	; 0x400
   28d84:	eor	r2, r0, #1
   28d88:	bne	28d14 <__assert_fail@plt+0x17068>
   28d8c:	ldr	r0, [r7]
   28d90:	cmp	r2, #0
   28d94:	bne	28da0 <__assert_fail@plt+0x170f4>
   28d98:	ands	r2, r0, #2048	; 0x800
   28d9c:	bne	295c0 <__assert_fail@plt+0x17914>
   28da0:	tst	r1, #2
   28da4:	bne	28db0 <__assert_fail@plt+0x17104>
   28da8:	ands	r2, r0, #8192	; 0x2000
   28dac:	bne	295c0 <__assert_fail@plt+0x17914>
   28db0:	tst	r1, #8
   28db4:	bne	28dc0 <__assert_fail@plt+0x17114>
   28db8:	ands	r0, r0, #32768	; 0x8000
   28dbc:	bne	295c0 <__assert_fail@plt+0x17914>
   28dc0:	ldr	r2, [r9, #108]	; 0x6c
   28dc4:	ldr	r0, [r9, #84]	; 0x54
   28dc8:	ldr	ip, [r9, #4]
   28dcc:	cmp	r2, #1
   28dd0:	str	r0, [sp, #28]
   28dd4:	str	r2, [sp, #12]
   28dd8:	blt	28e68 <__assert_fail@plt+0x171bc>
   28ddc:	ldr	r1, [r9, #116]	; 0x74
   28de0:	mov	r0, #0
   28de4:	mov	r4, #1
   28de8:	add	r3, r2, r0
   28dec:	add	r3, r3, r3, lsr #31
   28df0:	asr	r7, r3, #1
   28df4:	add	r6, r7, r7, lsl #1
   28df8:	add	r6, r1, r6, lsl #3
   28dfc:	ldr	r6, [r6, #4]
   28e00:	cmp	r6, r5
   28e04:	addlt	r0, r4, r3, asr #1
   28e08:	movge	r2, r7
   28e0c:	cmp	r0, r2
   28e10:	blt	28de8 <__assert_fail@plt+0x1713c>
   28e14:	ldr	r1, [sp, #12]
   28e18:	ldr	r7, [sp, #28]
   28e1c:	cmp	r0, r1
   28e20:	bge	28e7c <__assert_fail@plt+0x171d0>
   28e24:	cmn	r0, #1
   28e28:	beq	28e7c <__assert_fail@plt+0x171d0>
   28e2c:	ldr	r1, [r9, #116]	; 0x74
   28e30:	add	r0, r0, r0, lsl #1
   28e34:	add	r0, r1, r0, lsl #3
   28e38:	ldr	r1, [r0, #4]
   28e3c:	cmp	r1, r5
   28e40:	bne	28e7c <__assert_fail@plt+0x171d0>
   28e44:	ldr	r1, [r0]
   28e48:	ldr	r2, [sp, #48]	; 0x30
   28e4c:	cmp	r1, r2
   28e50:	beq	292e8 <__assert_fail@plt+0x1763c>
   28e54:	ldrb	r1, [r0, #20]
   28e58:	add	r0, r0, #24
   28e5c:	cmp	r1, #0
   28e60:	bne	28e44 <__assert_fail@plt+0x17198>
   28e64:	b	28e7c <__assert_fail@plt+0x171d0>
   28e68:	mov	r0, #0
   28e6c:	ldr	r1, [sp, #12]
   28e70:	ldr	r7, [sp, #28]
   28e74:	cmp	r0, r1
   28e78:	blt	28e24 <__assert_fail@plt+0x17178>
   28e7c:	ldr	r0, [r9, #124]	; 0x7c
   28e80:	cmp	r0, #1
   28e84:	blt	292e8 <__assert_fail@plt+0x1763c>
   28e88:	ldr	r0, [r7]
   28e8c:	ldr	r1, [sp, #48]	; 0x30
   28e90:	mov	r2, #0
   28e94:	ldr	r1, [r0, r1, lsl #3]
   28e98:	str	r1, [sp, #36]	; 0x24
   28e9c:	b	28ea4 <__assert_fail@plt+0x171f8>
   28ea0:	ldr	r0, [r7]
   28ea4:	ldr	r1, [r9, #132]	; 0x84
   28ea8:	str	r2, [sp, #32]
   28eac:	ldr	lr, [r1, r2, lsl #2]
   28eb0:	ldr	r1, [lr, #4]
   28eb4:	ldr	r0, [r0, r1, lsl #3]
   28eb8:	ldr	r1, [sp, #36]	; 0x24
   28ebc:	cmp	r0, r1
   28ec0:	bne	29284 <__assert_fail@plt+0x175d8>
   28ec4:	ldr	r0, [lr, #16]
   28ec8:	ldr	r2, [lr]
   28ecc:	mov	r8, #0
   28ed0:	str	lr, [sp, #44]	; 0x2c
   28ed4:	cmp	r0, #1
   28ed8:	blt	28ee8 <__assert_fail@plt+0x1723c>
   28edc:	ldr	r6, [sp, #52]	; 0x34
   28ee0:	mov	r7, r2
   28ee4:	b	291d8 <__assert_fail@plt+0x1752c>
   28ee8:	ldr	r6, [sp, #52]	; 0x34
   28eec:	ldr	r7, [sp, #28]
   28ef0:	cmp	r8, r0
   28ef4:	blt	29280 <__assert_fail@plt+0x175d4>
   28ef8:	ldr	r5, [sp, #52]	; 0x34
   28efc:	cmp	r8, #0
   28f00:	addne	r2, r2, #1
   28f04:	cmp	r2, r5
   28f08:	bgt	29284 <__assert_fail@plt+0x175d8>
   28f0c:	b	290a8 <__assert_fail@plt+0x173fc>
   28f10:	ldr	r0, [sp, #40]	; 0x28
   28f14:	cmn	r4, #1
   28f18:	beq	29140 <__assert_fail@plt+0x17494>
   28f1c:	ldr	r1, [lr, #8]
   28f20:	str	r6, [fp, #-48]	; 0xffffffd0
   28f24:	mov	r6, ip
   28f28:	cmp	r1, #0
   28f2c:	beq	28f48 <__assert_fail@plt+0x1729c>
   28f30:	ldr	r3, [lr]
   28f34:	ldr	r2, [lr, #4]
   28f38:	mov	r7, #9
   28f3c:	stm	sp, {r4, sl}
   28f40:	str	r7, [sp, #8]
   28f44:	b	28f8c <__assert_fail@plt+0x172e0>
   28f48:	ldr	r0, [lr]
   28f4c:	add	r1, sl, #1
   28f50:	mov	r9, #12
   28f54:	sub	r1, r1, r0
   28f58:	mov	r0, #12
   28f5c:	bl	1b90c <__assert_fail@plt+0x9c60>
   28f60:	ldr	r2, [sp, #44]	; 0x2c
   28f64:	cmp	r0, #0
   28f68:	str	r0, [r2, #8]
   28f6c:	beq	295e0 <__assert_fail@plt+0x17934>
   28f70:	mov	r1, r0
   28f74:	ldr	r3, [r2]
   28f78:	ldr	r2, [r2, #4]
   28f7c:	stm	sp, {r4, sl}
   28f80:	mov	r0, #9
   28f84:	str	r0, [sp, #8]
   28f88:	ldr	r0, [sp, #40]	; 0x28
   28f8c:	bl	29efc <__assert_fail@plt+0x18250>
   28f90:	mov	ip, r6
   28f94:	ldr	lr, [sp, #44]	; 0x2c
   28f98:	ldr	r6, [fp, #-48]	; 0xffffffd0
   28f9c:	ldr	r5, [sp, #52]	; 0x34
   28fa0:	mov	r9, r0
   28fa4:	cmp	r0, #1
   28fa8:	mov	r7, r8
   28fac:	beq	29148 <__assert_fail@plt+0x1749c>
   28fb0:	cmp	r9, #0
   28fb4:	bne	295e0 <__assert_fail@plt+0x17934>
   28fb8:	ldr	r1, [lr, #12]
   28fbc:	ldr	r0, [lr, #16]
   28fc0:	ldr	r5, [sp, #52]	; 0x34
   28fc4:	cmp	r0, r1
   28fc8:	beq	2907c <__assert_fail@plt+0x173d0>
   28fcc:	mov	r0, #1
   28fd0:	mov	r1, #20
   28fd4:	bl	1b90c <__assert_fail@plt+0x9c60>
   28fd8:	ldr	r6, [sp, #40]	; 0x28
   28fdc:	cmp	r0, #0
   28fe0:	beq	295f8 <__assert_fail@plt+0x1794c>
   28fe4:	ldr	r1, [sp, #44]	; 0x2c
   28fe8:	mov	r2, r0
   28fec:	ldr	r0, [r1, #16]
   28ff0:	ldr	r3, [r1, #20]
   28ff4:	str	r2, [r3, r0, lsl #2]
   28ff8:	stm	r2, {r4, sl}
   28ffc:	add	r0, r0, #1
   29000:	ldr	r3, [sp, #48]	; 0x30
   29004:	str	r0, [r1, #16]
   29008:	mov	r0, r6
   2900c:	str	r5, [sp]
   29010:	bl	29d28 <__assert_fail@plt+0x1807c>
   29014:	cmp	r0, #1
   29018:	bhi	295f0 <__assert_fail@plt+0x17944>
   2901c:	ldr	ip, [r6, #4]
   29020:	ldr	r7, [sp, #28]
   29024:	ldr	lr, [sp, #44]	; 0x2c
   29028:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2902c:	ldr	r9, [sp, #40]	; 0x28
   29030:	add	r2, sl, #1
   29034:	cmp	sl, r5
   29038:	blt	290a8 <__assert_fail@plt+0x173fc>
   2903c:	b	29284 <__assert_fail@plt+0x175d8>
   29040:	ldr	r0, [r9, #48]	; 0x30
   29044:	cmp	r6, r0
   29048:	bge	29284 <__assert_fail@plt+0x175d8>
   2904c:	add	r4, r6, #1
   29050:	mov	r0, r9
   29054:	mov	r8, r6
   29058:	mov	r1, r4
   2905c:	bl	29638 <__assert_fail@plt+0x1798c>
   29060:	cmp	r0, #0
   29064:	bne	295f0 <__assert_fail@plt+0x17944>
   29068:	ldr	ip, [r9, #4]
   2906c:	ldr	lr, [sp, #44]	; 0x2c
   29070:	mov	r6, r8
   29074:	mov	r1, r9
   29078:	b	290c8 <__assert_fail@plt+0x1741c>
   2907c:	mov	r1, #1
   29080:	mov	r7, lr
   29084:	orr	r6, r1, r0, lsl #1
   29088:	ldr	r0, [lr, #20]
   2908c:	lsl	r1, r6, #2
   29090:	bl	1bd04 <__assert_fail@plt+0xa058>
   29094:	cmp	r0, #0
   29098:	beq	295f8 <__assert_fail@plt+0x1794c>
   2909c:	str	r6, [r7, #12]
   290a0:	str	r0, [r7, #20]
   290a4:	b	28fcc <__assert_fail@plt+0x17320>
   290a8:	ldr	r0, [lr]
   290ac:	mov	sl, r2
   290b0:	cmp	r2, r0
   290b4:	ble	290e0 <__assert_fail@plt+0x17434>
   290b8:	ldr	r0, [r9, #28]
   290bc:	cmp	r6, r0
   290c0:	bge	29040 <__assert_fail@plt+0x17394>
   290c4:	add	r4, r6, #1
   290c8:	add	r1, ip, sl
   290cc:	ldrb	r0, [ip, r6]
   290d0:	ldrb	r1, [r1, #-1]
   290d4:	cmp	r0, r1
   290d8:	beq	290e4 <__assert_fail@plt+0x17438>
   290dc:	b	29284 <__assert_fail@plt+0x175d8>
   290e0:	mov	r4, r6
   290e4:	ldr	r0, [r9, #100]	; 0x64
   290e8:	mov	r6, r4
   290ec:	ldr	r2, [r0, sl, lsl #2]
   290f0:	cmp	r2, #0
   290f4:	beq	29148 <__assert_fail@plt+0x1749c>
   290f8:	ldr	r0, [r2, #8]
   290fc:	cmp	r0, #1
   29100:	blt	29148 <__assert_fail@plt+0x1749c>
   29104:	ldr	r1, [r7]
   29108:	ldr	r2, [r2, #12]
   2910c:	ldr	r5, [sp, #36]	; 0x24
   29110:	mov	r8, r7
   29114:	mov	r3, #0
   29118:	ldr	r4, [r2, r3, lsl #2]
   2911c:	add	r7, r1, r4, lsl #3
   29120:	ldrb	r7, [r7, #4]
   29124:	cmp	r7, #9
   29128:	ldreq	r7, [r1, r4, lsl #3]
   2912c:	cmpeq	r7, r5
   29130:	beq	28f10 <__assert_fail@plt+0x17264>
   29134:	add	r3, r3, #1
   29138:	cmp	r3, r0
   2913c:	blt	29118 <__assert_fail@plt+0x1746c>
   29140:	ldr	r5, [sp, #52]	; 0x34
   29144:	mov	r7, r8
   29148:	ldr	r9, [sp, #40]	; 0x28
   2914c:	add	r2, sl, #1
   29150:	cmp	sl, r5
   29154:	blt	290a8 <__assert_fail@plt+0x173fc>
   29158:	b	29284 <__assert_fail@plt+0x175d8>
   2915c:	ldr	r2, [r9, #48]	; 0x30
   29160:	cmp	r5, r2
   29164:	bgt	292b8 <__assert_fail@plt+0x1760c>
   29168:	ldr	r0, [r9, #36]	; 0x24
   2916c:	ldr	r3, [r9, #104]	; 0x68
   29170:	cmp	r0, r5
   29174:	cmple	r0, r2
   29178:	blt	29188 <__assert_fail@plt+0x174dc>
   2917c:	cmp	r1, r5
   29180:	cmple	r1, r2
   29184:	bge	291a4 <__assert_fail@plt+0x174f8>
   29188:	ldr	r0, [sp, #40]	; 0x28
   2918c:	add	r1, r5, #1
   29190:	mov	r9, r3
   29194:	bl	29638 <__assert_fail@plt+0x1798c>
   29198:	mov	r3, r9
   2919c:	cmp	r0, #0
   291a0:	bne	295f0 <__assert_fail@plt+0x17944>
   291a4:	ldr	r9, [sp, #40]	; 0x28
   291a8:	cmp	r5, r3
   291ac:	ble	291d0 <__assert_fail@plt+0x17524>
   291b0:	sub	r0, r5, r3
   291b4:	mov	r1, #0
   291b8:	lsl	r2, r0, #2
   291bc:	ldr	r0, [r9, #100]	; 0x64
   291c0:	add	r0, r0, r3, lsl #2
   291c4:	add	r0, r0, #4
   291c8:	bl	11b2c <memset@plt>
   291cc:	str	r5, [r9, #104]	; 0x68
   291d0:	ldr	ip, [r9, #4]
   291d4:	b	29204 <__assert_fail@plt+0x17558>
   291d8:	ldr	r1, [lr, #20]
   291dc:	ldr	sl, [r1, r8, lsl #2]
   291e0:	ldr	r1, [sl, #4]
   291e4:	sub	r4, r1, r7
   291e8:	str	r1, [fp, #-48]	; 0xffffffd0
   291ec:	cmp	r4, #1
   291f0:	blt	29224 <__assert_fail@plt+0x17578>
   291f4:	ldr	r1, [r9, #28]
   291f8:	add	r5, r4, r6
   291fc:	cmp	r5, r1
   29200:	bgt	2915c <__assert_fail@plt+0x174b0>
   29204:	add	r0, ip, r6
   29208:	add	r1, ip, r7
   2920c:	mov	r2, r4
   29210:	mov	r5, ip
   29214:	bl	11934 <memcmp@plt>
   29218:	ldr	lr, [sp, #44]	; 0x2c
   2921c:	cmp	r0, #0
   29220:	bne	2929c <__assert_fail@plt+0x175f0>
   29224:	ldr	r0, [sp, #52]	; 0x34
   29228:	ldr	r3, [sp, #48]	; 0x30
   2922c:	mov	r1, lr
   29230:	mov	r2, sl
   29234:	mov	r5, lr
   29238:	str	r0, [sp]
   2923c:	mov	r0, r9
   29240:	bl	29d28 <__assert_fail@plt+0x1807c>
   29244:	cmp	r0, #1
   29248:	bhi	295f0 <__assert_fail@plt+0x17944>
   2924c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   29250:	ldr	r0, [r5, #16]
   29254:	ldr	ip, [r9, #4]
   29258:	add	r8, r8, #1
   2925c:	add	r6, r4, r6
   29260:	mov	lr, r5
   29264:	mov	r1, r9
   29268:	cmp	r8, r0
   2926c:	mov	r7, r2
   29270:	blt	291d8 <__assert_fail@plt+0x1752c>
   29274:	ldr	r7, [sp, #28]
   29278:	cmp	r8, r0
   2927c:	bge	28ef8 <__assert_fail@plt+0x1724c>
   29280:	ldr	r5, [sp, #52]	; 0x34
   29284:	ldr	r2, [sp, #32]
   29288:	ldr	r0, [r9, #124]	; 0x7c
   2928c:	add	r2, r2, #1
   29290:	cmp	r2, r0
   29294:	blt	28ea0 <__assert_fail@plt+0x171f4>
   29298:	b	292cc <__assert_fail@plt+0x17620>
   2929c:	ldr	r0, [lr, #16]
   292a0:	mov	ip, r5
   292a4:	mov	r2, r7
   292a8:	ldr	r7, [sp, #28]
   292ac:	cmp	r8, r0
   292b0:	blt	29280 <__assert_fail@plt+0x175d4>
   292b4:	b	28ef8 <__assert_fail@plt+0x1724c>
   292b8:	mov	r2, r7
   292bc:	ldr	r7, [sp, #28]
   292c0:	cmp	r8, r0
   292c4:	blt	29280 <__assert_fail@plt+0x175d4>
   292c8:	b	28ef8 <__assert_fail@plt+0x1724c>
   292cc:	mov	r1, #0
   292d0:	ldr	r0, [r9, #108]	; 0x6c
   292d4:	str	r1, [fp, #-32]	; 0xffffffe0
   292d8:	ldr	r1, [sp, #12]
   292dc:	cmp	r1, r0
   292e0:	bge	295c0 <__assert_fail@plt+0x17914>
   292e4:	b	29330 <__assert_fail@plt+0x17684>
   292e8:	mov	r0, #0
   292ec:	str	r0, [fp, #-32]	; 0xffffffe0
   292f0:	b	295c0 <__assert_fail@plt+0x17914>
   292f4:	ldr	r0, [r3, #88]	; 0x58
   292f8:	and	r0, r0, #2
   292fc:	eor	sl, r0, #10
   29300:	b	29464 <__assert_fail@plt+0x177b8>
   29304:	mov	r0, r4
   29308:	bl	11afc <iswalnum@plt>
   2930c:	mov	sl, #1
   29310:	cmp	r4, #95	; 0x5f
   29314:	beq	29328 <__assert_fail@plt+0x1767c>
   29318:	ldr	r3, [sp, #40]	; 0x28
   2931c:	cmp	r0, #0
   29320:	beq	2944c <__assert_fail@plt+0x177a0>
   29324:	b	29464 <__assert_fail@plt+0x177b8>
   29328:	ldr	r3, [sp, #40]	; 0x28
   2932c:	b	29464 <__assert_fail@plt+0x177b8>
   29330:	ldr	r0, [r9, #116]	; 0x74
   29334:	mov	r5, r1
   29338:	add	r1, r1, r1, lsl #1
   2933c:	ldr	r3, [sp, #48]	; 0x30
   29340:	ldr	r2, [r0, r1, lsl #3]
   29344:	cmp	r2, r3
   29348:	bne	295a4 <__assert_fail@plt+0x178f8>
   2934c:	add	r0, r0, r1, lsl #3
   29350:	ldr	r2, [sp, #52]	; 0x34
   29354:	ldr	r1, [r0, #4]
   29358:	cmp	r1, r2
   2935c:	bne	295a4 <__assert_fail@plt+0x178f8>
   29360:	ldr	r2, [r0, #8]
   29364:	ldr	r6, [r0, #12]
   29368:	ldr	r0, [sp, #20]
   2936c:	ldr	r8, [r0, #24]
   29370:	cmp	r6, r2
   29374:	bne	29390 <__assert_fail@plt+0x176e4>
   29378:	ldr	r1, [sp, #48]	; 0x30
   2937c:	ldr	r0, [r0, #20]
   29380:	add	r1, r1, r1, lsl #1
   29384:	add	r0, r0, r1, lsl #2
   29388:	ldr	r0, [r0, #8]
   2938c:	b	2939c <__assert_fail@plt+0x176f0>
   29390:	ldr	r0, [r0, #12]
   29394:	ldr	r1, [sp, #48]	; 0x30
   29398:	add	r0, r0, r1, lsl #2
   2939c:	ldr	r9, [r0]
   293a0:	ldr	r0, [sp, #52]	; 0x34
   293a4:	str	r2, [fp, #-48]	; 0xffffffd0
   293a8:	add	r0, r6, r0
   293ac:	sub	r7, r0, r2
   293b0:	cmp	r7, #0
   293b4:	ble	293fc <__assert_fail@plt+0x17750>
   293b8:	ldr	r3, [sp, #40]	; 0x28
   293bc:	sub	r0, r7, #1
   293c0:	ldr	r1, [r3, #48]	; 0x30
   293c4:	cmp	r1, r0
   293c8:	beq	292f4 <__assert_fail@plt+0x17648>
   293cc:	ldr	r1, [r3, #80]	; 0x50
   293d0:	cmp	r1, #2
   293d4:	blt	29408 <__assert_fail@plt+0x1775c>
   293d8:	ldr	r0, [r3, #8]
   293dc:	mov	r1, r7
   293e0:	sub	r0, r0, #4
   293e4:	ldr	r4, [r0, r1, lsl #2]
   293e8:	cmn	r4, #1
   293ec:	bne	2943c <__assert_fail@plt+0x17790>
   293f0:	sub	r1, r1, #1
   293f4:	cmp	r1, #0
   293f8:	bgt	293e4 <__assert_fail@plt+0x17738>
   293fc:	ldr	r3, [sp, #40]	; 0x28
   29400:	ldr	sl, [r3, #60]	; 0x3c
   29404:	b	29464 <__assert_fail@plt+0x177b8>
   29408:	ldr	r1, [r3, #4]
   2940c:	ldr	r2, [r3, #68]	; 0x44
   29410:	mov	sl, #1
   29414:	ldrb	r0, [r1, r0]
   29418:	ubfx	r1, r0, #5, #3
   2941c:	ldr	r1, [r2, r1, lsl #2]
   29420:	and	r2, r0, #31
   29424:	tst	r1, sl, lsl r2
   29428:	bne	29464 <__assert_fail@plt+0x177b8>
   2942c:	mov	sl, #0
   29430:	cmp	r0, #10
   29434:	beq	29458 <__assert_fail@plt+0x177ac>
   29438:	b	29464 <__assert_fail@plt+0x177b8>
   2943c:	ldr	r3, [sp, #40]	; 0x28
   29440:	ldrb	r0, [r3, #78]	; 0x4e
   29444:	cmp	r0, #0
   29448:	bne	29304 <__assert_fail@plt+0x17658>
   2944c:	mov	sl, #0
   29450:	cmp	r4, #10
   29454:	bne	29464 <__assert_fail@plt+0x177b8>
   29458:	ldrb	sl, [r3, #77]	; 0x4d
   2945c:	cmp	sl, #0
   29460:	movwne	sl, #2
   29464:	ldr	r0, [r3, #100]	; 0x64
   29468:	ldr	r2, [sp, #52]	; 0x34
   2946c:	add	r1, r9, r9, lsl #1
   29470:	mov	r4, r3
   29474:	add	r8, r8, r1, lsl #2
   29478:	ldr	r2, [r0, r2, lsl #2]
   2947c:	ldr	r0, [r0, r7, lsl #2]
   29480:	cmp	r2, #0
   29484:	ldrne	r2, [r2, #8]
   29488:	moveq	r2, #0
   2948c:	cmp	r0, #0
   29490:	str	r2, [sp, #44]	; 0x2c
   29494:	beq	29500 <__assert_fail@plt+0x17854>
   29498:	ldr	r1, [r0, #40]	; 0x28
   2949c:	sub	r4, fp, #44	; 0x2c
   294a0:	mov	r2, r8
   294a4:	mov	r0, r4
   294a8:	bl	29a9c <__assert_fail@plt+0x17df0>
   294ac:	cmp	r0, #0
   294b0:	str	r0, [fp, #-32]	; 0xffffffe0
   294b4:	bne	29600 <__assert_fail@plt+0x17954>
   294b8:	ldr	r1, [sp, #20]
   294bc:	sub	r0, fp, #32
   294c0:	mov	r2, r4
   294c4:	mov	r3, sl
   294c8:	bl	2725c <__assert_fail@plt+0x155b0>
   294cc:	ldr	r4, [sp, #40]	; 0x28
   294d0:	ldr	r1, [r4, #100]	; 0x64
   294d4:	str	r0, [r1, r7, lsl #2]
   294d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   294dc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   294e0:	ldr	r0, [r4, #100]	; 0x64
   294e4:	ldr	r1, [r0, r7, lsl #2]
   294e8:	cmp	r1, #0
   294ec:	bne	29548 <__assert_fail@plt+0x1789c>
   294f0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   294f4:	cmp	r9, #0
   294f8:	beq	29548 <__assert_fail@plt+0x1789c>
   294fc:	b	295e4 <__assert_fail@plt+0x17938>
   29500:	ldr	r1, [sp, #20]
   29504:	sub	r0, fp, #32
   29508:	mov	r2, r8
   2950c:	mov	r3, sl
   29510:	bl	2725c <__assert_fail@plt+0x155b0>
   29514:	ldr	r1, [r4, #100]	; 0x64
   29518:	str	r0, [r1, r7, lsl #2]
   2951c:	ldr	r0, [r4, #100]	; 0x64
   29520:	ldr	r1, [r0, r7, lsl #2]
   29524:	cmp	r1, #0
   29528:	bne	29548 <__assert_fail@plt+0x1789c>
   2952c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   29530:	ldr	r1, [fp, #-48]	; 0xffffffd0
   29534:	cmp	r9, #0
   29538:	bne	295e4 <__assert_fail@plt+0x17938>
   2953c:	cmp	r6, r1
   29540:	bne	295a4 <__assert_fail@plt+0x178f8>
   29544:	b	29554 <__assert_fail@plt+0x178a8>
   29548:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2954c:	cmp	r6, r1
   29550:	bne	295a4 <__assert_fail@plt+0x178f8>
   29554:	ldr	r1, [sp, #52]	; 0x34
   29558:	ldr	r0, [r0, r1, lsl #2]
   2955c:	ldr	r1, [sp, #44]	; 0x2c
   29560:	ldr	r0, [r0, #8]
   29564:	cmp	r0, r1
   29568:	ble	295a4 <__assert_fail@plt+0x178f8>
   2956c:	ldr	r4, [sp, #40]	; 0x28
   29570:	ldr	r2, [sp, #52]	; 0x34
   29574:	mov	r1, r8
   29578:	mov	r0, r4
   2957c:	bl	28b04 <__assert_fail@plt+0x16e58>
   29580:	cmp	r0, #0
   29584:	str	r0, [fp, #-32]	; 0xffffffe0
   29588:	bne	29618 <__assert_fail@plt+0x1796c>
   2958c:	mov	r0, r4
   29590:	mov	r1, r8
   29594:	bl	28c00 <__assert_fail@plt+0x16f54>
   29598:	cmp	r0, #0
   2959c:	str	r0, [fp, #-32]	; 0xffffffe0
   295a0:	bne	29628 <__assert_fail@plt+0x1797c>
   295a4:	ldr	r9, [sp, #40]	; 0x28
   295a8:	mov	r1, r5
   295ac:	add	r1, r5, #1
   295b0:	ldr	r5, [sp, #52]	; 0x34
   295b4:	ldr	r0, [r9, #108]	; 0x6c
   295b8:	cmp	r1, r0
   295bc:	blt	29330 <__assert_fail@plt+0x17684>
   295c0:	ldr	r1, [sp, #16]
   295c4:	ldr	r3, [sp, #24]
   295c8:	ldr	r2, [sp, #20]
   295cc:	ldr	r0, [r1, #4]
   295d0:	add	r3, r3, #1
   295d4:	cmp	r3, r0
   295d8:	blt	28c80 <__assert_fail@plt+0x16fd4>
   295dc:	mov	r9, #0
   295e0:	str	r9, [fp, #-32]	; 0xffffffe0
   295e4:	mov	r0, r9
   295e8:	sub	sp, fp, #28
   295ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   295f0:	mov	r9, r0
   295f4:	b	295e0 <__assert_fail@plt+0x17934>
   295f8:	mov	r9, #12
   295fc:	b	295e0 <__assert_fail@plt+0x17934>
   29600:	mov	r9, r0
   29604:	ldr	r0, [fp, #-36]	; 0xffffffdc
   29608:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2960c:	mov	r0, r9
   29610:	sub	sp, fp, #28
   29614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29618:	mov	r9, r0
   2961c:	mov	r0, r9
   29620:	sub	sp, fp, #28
   29624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29628:	mov	r9, r0
   2962c:	mov	r0, r9
   29630:	sub	sp, fp, #28
   29634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29638:	push	{r4, r5, r6, r7, fp, lr}
   2963c:	add	fp, sp, #16
   29640:	mov	r4, r0
   29644:	ldr	r0, [r0, #36]	; 0x24
   29648:	mov	r5, #12
   2964c:	cmn	r0, #-536870910	; 0xe0000002
   29650:	bhi	29840 <__assert_fail@plt+0x17b94>
   29654:	ldr	r6, [r4, #48]	; 0x30
   29658:	ldr	r2, [r4, #80]	; 0x50
   2965c:	cmp	r6, r0, lsl #1
   29660:	lslge	r6, r0, #1
   29664:	cmp	r6, r1
   29668:	movle	r6, r1
   2966c:	cmp	r2, #2
   29670:	blt	296b8 <__assert_fail@plt+0x17a0c>
   29674:	cmn	r6, #-1073741823	; 0xc0000001
   29678:	bhi	29840 <__assert_fail@plt+0x17b94>
   2967c:	ldr	r0, [r4, #8]
   29680:	lsl	r7, r6, #2
   29684:	mov	r1, r7
   29688:	bl	1bd04 <__assert_fail@plt+0xa058>
   2968c:	cmp	r0, #0
   29690:	beq	29840 <__assert_fail@plt+0x17b94>
   29694:	str	r0, [r4, #8]
   29698:	ldr	r0, [r4, #12]
   2969c:	cmp	r0, #0
   296a0:	beq	296b8 <__assert_fail@plt+0x17a0c>
   296a4:	mov	r1, r7
   296a8:	bl	1bd04 <__assert_fail@plt+0xa058>
   296ac:	cmp	r0, #0
   296b0:	beq	29840 <__assert_fail@plt+0x17b94>
   296b4:	str	r0, [r4, #12]
   296b8:	ldrb	r0, [r4, #75]	; 0x4b
   296bc:	cmp	r0, #0
   296c0:	beq	296dc <__assert_fail@plt+0x17a30>
   296c4:	ldr	r0, [r4, #4]
   296c8:	mov	r1, r6
   296cc:	bl	1bd04 <__assert_fail@plt+0xa058>
   296d0:	cmp	r0, #0
   296d4:	beq	29840 <__assert_fail@plt+0x17b94>
   296d8:	str	r0, [r4, #4]
   296dc:	str	r6, [r4, #36]	; 0x24
   296e0:	ldr	r0, [r4, #100]	; 0x64
   296e4:	cmp	r0, #0
   296e8:	beq	29704 <__assert_fail@plt+0x17a58>
   296ec:	mov	r1, #4
   296f0:	add	r1, r1, r6, lsl #2
   296f4:	bl	1bd04 <__assert_fail@plt+0xa058>
   296f8:	cmp	r0, #0
   296fc:	beq	29840 <__assert_fail@plt+0x17b94>
   29700:	str	r0, [r4, #100]	; 0x64
   29704:	ldrb	r1, [r4, #72]	; 0x48
   29708:	ldr	r0, [r4, #80]	; 0x50
   2970c:	cmp	r1, #0
   29710:	beq	29730 <__assert_fail@plt+0x17a84>
   29714:	cmp	r0, #2
   29718:	blt	29744 <__assert_fail@plt+0x17a98>
   2971c:	mov	r0, r4
   29720:	bl	21210 <__assert_fail@plt+0xf564>
   29724:	cmp	r0, #0
   29728:	popne	{r4, r5, r6, r7, fp, pc}
   2972c:	b	2983c <__assert_fail@plt+0x17b90>
   29730:	cmp	r0, #2
   29734:	blt	297bc <__assert_fail@plt+0x17b10>
   29738:	mov	r0, r4
   2973c:	bl	218d0 <__assert_fail@plt+0xfc24>
   29740:	b	2983c <__assert_fail@plt+0x17b90>
   29744:	ldr	r6, [r4, #36]	; 0x24
   29748:	ldr	r0, [r4, #48]	; 0x30
   2974c:	ldr	r5, [r4, #28]
   29750:	cmp	r6, r0
   29754:	movgt	r6, r0
   29758:	cmp	r5, r6
   2975c:	bge	297b0 <__assert_fail@plt+0x17b04>
   29760:	ldr	r1, [r4]
   29764:	ldr	r2, [r4, #24]
   29768:	ldr	r0, [r4, #64]	; 0x40
   2976c:	add	r1, r1, r2
   29770:	cmp	r0, #0
   29774:	ldrb	r7, [r1, r5]
   29778:	ldrbne	r7, [r0, r7]
   2977c:	add	r0, r7, #128	; 0x80
   29780:	lsr	r0, r0, #7
   29784:	cmp	r0, #2
   29788:	bhi	29798 <__assert_fail@plt+0x17aec>
   2978c:	bl	11a6c <__ctype_toupper_loc@plt>
   29790:	ldr	r0, [r0]
   29794:	ldr	r7, [r0, r7, lsl #2]
   29798:	ldr	r0, [r4, #4]
   2979c:	strb	r7, [r0, r5]
   297a0:	add	r5, r5, #1
   297a4:	cmp	r5, r6
   297a8:	blt	29760 <__assert_fail@plt+0x17ab4>
   297ac:	mov	r5, r6
   297b0:	str	r5, [r4, #28]
   297b4:	str	r5, [r4, #32]
   297b8:	b	2983c <__assert_fail@plt+0x17b90>
   297bc:	ldr	r2, [r4, #64]	; 0x40
   297c0:	cmp	r2, #0
   297c4:	beq	2983c <__assert_fail@plt+0x17b90>
   297c8:	ldr	r0, [r4, #36]	; 0x24
   297cc:	ldr	r3, [r4, #48]	; 0x30
   297d0:	ldr	r1, [r4, #28]
   297d4:	cmp	r0, r3
   297d8:	movgt	r0, r3
   297dc:	cmp	r1, r0
   297e0:	bge	29834 <__assert_fail@plt+0x17b88>
   297e4:	ldm	r4, {r3, r7}
   297e8:	ldr	r6, [r4, #24]
   297ec:	add	r6, r6, r1
   297f0:	ldrb	r3, [r3, r6]
   297f4:	ldrb	r2, [r2, r3]
   297f8:	strb	r2, [r7, r1]
   297fc:	add	r1, r1, #1
   29800:	cmp	r1, r0
   29804:	bge	29830 <__assert_fail@plt+0x17b84>
   29808:	ldm	r4, {r2, r3}
   2980c:	ldr	r7, [r4, #24]
   29810:	ldr	r6, [r4, #64]	; 0x40
   29814:	add	r2, r2, r7
   29818:	ldrb	r2, [r2, r1]
   2981c:	ldrb	r2, [r6, r2]
   29820:	strb	r2, [r3, r1]
   29824:	add	r1, r1, #1
   29828:	cmp	r1, r0
   2982c:	blt	29808 <__assert_fail@plt+0x17b5c>
   29830:	mov	r1, r0
   29834:	str	r1, [r4, #28]
   29838:	str	r1, [r4, #32]
   2983c:	mov	r5, #0
   29840:	mov	r0, r5
   29844:	pop	{r4, r5, r6, r7, fp, pc}
   29848:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2984c:	add	fp, sp, #24
   29850:	sub	sp, sp, #16
   29854:	mov	r9, r0
   29858:	mov	r4, r1
   2985c:	ldr	r5, [r1, #40]	; 0x28
   29860:	ldr	r7, [r1, #84]	; 0x54
   29864:	ldr	r0, [r1, #100]	; 0x64
   29868:	ldr	r1, [r1, #104]	; 0x68
   2986c:	mov	r6, r2
   29870:	cmp	r5, r1
   29874:	ble	29894 <__assert_fail@plt+0x17be8>
   29878:	str	r6, [r0, r5, lsl #2]
   2987c:	str	r5, [r4, #104]	; 0x68
   29880:	cmp	r6, #0
   29884:	ldrne	r0, [r7, #76]	; 0x4c
   29888:	cmpne	r0, #0
   2988c:	beq	299e8 <__assert_fail@plt+0x17d3c>
   29890:	b	299f4 <__assert_fail@plt+0x17d48>
   29894:	ldr	r1, [r0, r5, lsl #2]
   29898:	cmp	r1, #0
   2989c:	beq	29918 <__assert_fail@plt+0x17c6c>
   298a0:	ldr	r2, [r1, #40]	; 0x28
   298a4:	cmp	r6, #0
   298a8:	beq	29964 <__assert_fail@plt+0x17cb8>
   298ac:	ldr	r8, [r6, #40]	; 0x28
   298b0:	mov	r0, sp
   298b4:	mov	r1, r8
   298b8:	bl	29a9c <__assert_fail@plt+0x17df0>
   298bc:	cmp	r0, #0
   298c0:	str	r0, [r9]
   298c4:	bne	29a6c <__assert_fail@plt+0x17dc0>
   298c8:	ldr	r0, [r4, #40]	; 0x28
   298cc:	cmp	r0, #0
   298d0:	ble	29910 <__assert_fail@plt+0x17c64>
   298d4:	ldr	r2, [r4, #48]	; 0x30
   298d8:	sub	r1, r0, #1
   298dc:	cmp	r2, r1
   298e0:	beq	29a5c <__assert_fail@plt+0x17db0>
   298e4:	ldr	r2, [r4, #80]	; 0x50
   298e8:	cmp	r2, #2
   298ec:	blt	29930 <__assert_fail@plt+0x17c84>
   298f0:	ldr	r1, [r4, #8]
   298f4:	sub	r1, r1, #4
   298f8:	ldr	r6, [r1, r0, lsl #2]
   298fc:	cmn	r6, #1
   29900:	bne	29988 <__assert_fail@plt+0x17cdc>
   29904:	sub	r0, r0, #1
   29908:	cmp	r0, #0
   2990c:	bgt	298f8 <__assert_fail@plt+0x17c4c>
   29910:	ldr	r3, [r4, #60]	; 0x3c
   29914:	b	299ac <__assert_fail@plt+0x17d00>
   29918:	str	r6, [r0, r5, lsl #2]
   2991c:	cmp	r6, #0
   29920:	ldrne	r0, [r7, #76]	; 0x4c
   29924:	cmpne	r0, #0
   29928:	beq	299e8 <__assert_fail@plt+0x17d3c>
   2992c:	b	299f4 <__assert_fail@plt+0x17d48>
   29930:	ldr	r0, [r4, #4]
   29934:	ldr	r2, [r4, #68]	; 0x44
   29938:	mov	r3, #1
   2993c:	ldrb	r0, [r0, r1]
   29940:	ubfx	r1, r0, #5, #3
   29944:	ldr	r1, [r2, r1, lsl #2]
   29948:	and	r2, r0, #31
   2994c:	tst	r1, r3, lsl r2
   29950:	bne	299ac <__assert_fail@plt+0x17d00>
   29954:	mov	r3, #0
   29958:	cmp	r0, #10
   2995c:	beq	299a0 <__assert_fail@plt+0x17cf4>
   29960:	b	299ac <__assert_fail@plt+0x17d00>
   29964:	ldr	r0, [r2, #8]
   29968:	vldr	d16, [r2]
   2996c:	mov	r8, #0
   29970:	str	r0, [sp, #8]
   29974:	mov	r0, r5
   29978:	vstr	d16, [sp]
   2997c:	cmp	r0, #0
   29980:	bgt	298d4 <__assert_fail@plt+0x17c28>
   29984:	b	29910 <__assert_fail@plt+0x17c64>
   29988:	ldrb	r0, [r4, #78]	; 0x4e
   2998c:	cmp	r0, #0
   29990:	bne	29a7c <__assert_fail@plt+0x17dd0>
   29994:	mov	r3, #0
   29998:	cmp	r6, #10
   2999c:	bne	299ac <__assert_fail@plt+0x17d00>
   299a0:	ldrb	r3, [r4, #77]	; 0x4d
   299a4:	cmp	r3, #0
   299a8:	movwne	r3, #2
   299ac:	mov	r2, sp
   299b0:	mov	r0, r9
   299b4:	mov	r1, r7
   299b8:	bl	2725c <__assert_fail@plt+0x155b0>
   299bc:	mov	r6, r0
   299c0:	ldr	r0, [r4, #100]	; 0x64
   299c4:	cmp	r8, #0
   299c8:	str	r6, [r0, r5, lsl #2]
   299cc:	beq	299d8 <__assert_fail@plt+0x17d2c>
   299d0:	ldr	r0, [sp, #8]
   299d4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   299d8:	cmp	r6, #0
   299dc:	ldrne	r0, [r7, #76]	; 0x4c
   299e0:	cmpne	r0, #0
   299e4:	bne	299f4 <__assert_fail@plt+0x17d48>
   299e8:	mov	r0, r6
   299ec:	sub	sp, fp, #24
   299f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   299f4:	add	r7, r6, #4
   299f8:	mov	r0, r4
   299fc:	mov	r2, r5
   29a00:	mov	r1, r7
   29a04:	bl	28b04 <__assert_fail@plt+0x16e58>
   29a08:	cmp	r0, #0
   29a0c:	str	r0, [r9]
   29a10:	bne	29a4c <__assert_fail@plt+0x17da0>
   29a14:	ldrb	r0, [r6, #52]	; 0x34
   29a18:	tst	r0, #64	; 0x40
   29a1c:	beq	299e8 <__assert_fail@plt+0x17d3c>
   29a20:	mov	r0, r4
   29a24:	mov	r1, r7
   29a28:	bl	28c00 <__assert_fail@plt+0x16f54>
   29a2c:	str	r0, [r9]
   29a30:	cmp	r0, #0
   29a34:	mov	r6, #0
   29a38:	ldreq	r0, [r4, #100]	; 0x64
   29a3c:	ldreq	r6, [r0, r5, lsl #2]
   29a40:	mov	r0, r6
   29a44:	sub	sp, fp, #24
   29a48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a4c:	mov	r6, #0
   29a50:	mov	r0, r6
   29a54:	sub	sp, fp, #24
   29a58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a5c:	ldr	r0, [r4, #88]	; 0x58
   29a60:	and	r0, r0, #2
   29a64:	eor	r3, r0, #10
   29a68:	b	299ac <__assert_fail@plt+0x17d00>
   29a6c:	mov	r6, #0
   29a70:	mov	r0, r6
   29a74:	sub	sp, fp, #24
   29a78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a7c:	mov	r0, r6
   29a80:	bl	11afc <iswalnum@plt>
   29a84:	mov	r3, #1
   29a88:	cmp	r6, #95	; 0x5f
   29a8c:	beq	299ac <__assert_fail@plt+0x17d00>
   29a90:	cmp	r0, #0
   29a94:	beq	29994 <__assert_fail@plt+0x17ce8>
   29a98:	b	299ac <__assert_fail@plt+0x17d00>
   29a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29aa0:	add	fp, sp, #28
   29aa4:	sub	sp, sp, #20
   29aa8:	mov	sl, r2
   29aac:	cmp	r1, #0
   29ab0:	str	r0, [sp, #16]
   29ab4:	beq	29b1c <__assert_fail@plt+0x17e70>
   29ab8:	ldr	r0, [r1, #4]
   29abc:	mov	r8, r1
   29ac0:	cmp	sl, #0
   29ac4:	beq	29ad8 <__assert_fail@plt+0x17e2c>
   29ac8:	cmp	r0, #1
   29acc:	ldrge	r1, [sl, #4]
   29ad0:	cmpge	r1, #1
   29ad4:	bge	29b98 <__assert_fail@plt+0x17eec>
   29ad8:	cmp	r0, #1
   29adc:	blt	29b1c <__assert_fail@plt+0x17e70>
   29ae0:	ldr	r1, [sp, #16]
   29ae4:	str	r0, [r1, #4]
   29ae8:	ldr	r1, [r8, #4]
   29aec:	cmp	r1, #1
   29af0:	blt	29b7c <__assert_fail@plt+0x17ed0>
   29af4:	ldr	r4, [sp, #16]
   29af8:	str	r0, [r4]
   29afc:	lsl	r0, r0, #2
   29b00:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   29b04:	cmp	r0, #0
   29b08:	str	r0, [r4, #8]
   29b0c:	beq	29d0c <__assert_fail@plt+0x18060>
   29b10:	ldr	r2, [r8, #4]
   29b14:	ldr	r1, [r8, #8]
   29b18:	b	29b68 <__assert_fail@plt+0x17ebc>
   29b1c:	cmp	sl, #0
   29b20:	beq	29b7c <__assert_fail@plt+0x17ed0>
   29b24:	ldr	r0, [sl, #4]
   29b28:	cmp	r0, #1
   29b2c:	blt	29b7c <__assert_fail@plt+0x17ed0>
   29b30:	ldr	r1, [sp, #16]
   29b34:	str	r0, [r1, #4]
   29b38:	ldr	r1, [sl, #4]
   29b3c:	cmp	r1, #1
   29b40:	blt	29b7c <__assert_fail@plt+0x17ed0>
   29b44:	ldr	r4, [sp, #16]
   29b48:	str	r0, [r4]
   29b4c:	lsl	r0, r0, #2
   29b50:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   29b54:	cmp	r0, #0
   29b58:	str	r0, [r4, #8]
   29b5c:	beq	29d0c <__assert_fail@plt+0x18060>
   29b60:	ldr	r2, [sl, #4]
   29b64:	ldr	r1, [sl, #8]
   29b68:	lsl	r2, r2, #2
   29b6c:	bl	118ec <memcpy@plt>
   29b70:	mov	r0, #0
   29b74:	sub	sp, fp, #28
   29b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b7c:	ldr	r1, [sp, #16]
   29b80:	mov	r0, #0
   29b84:	str	r0, [r1]
   29b88:	str	r0, [r1, #4]
   29b8c:	str	r0, [r1, #8]
   29b90:	sub	sp, fp, #28
   29b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b98:	ldr	r4, [sp, #16]
   29b9c:	add	r0, r1, r0
   29ba0:	str	r0, [r4]
   29ba4:	lsl	r0, r0, #2
   29ba8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   29bac:	cmp	r0, #0
   29bb0:	str	r0, [r4, #8]
   29bb4:	beq	29d1c <__assert_fail@plt+0x18070>
   29bb8:	ldr	r9, [sl, #4]
   29bbc:	ldr	lr, [r8, #4]
   29bc0:	mov	r1, #0
   29bc4:	mov	r7, #0
   29bc8:	cmp	r9, #0
   29bcc:	movwgt	r1, #1
   29bd0:	cmp	lr, #1
   29bd4:	blt	29ca0 <__assert_fail@plt+0x17ff4>
   29bd8:	mov	r2, #0
   29bdc:	mov	ip, #0
   29be0:	str	r2, [sp, #8]
   29be4:	mov	r2, #0
   29be8:	str	r2, [sp, #12]
   29bec:	mov	r2, #0
   29bf0:	ldr	r4, [sp, #12]
   29bf4:	mov	r7, ip
   29bf8:	tst	r1, #1
   29bfc:	beq	29cd0 <__assert_fail@plt+0x18024>
   29c00:	ldr	r1, [sl, #8]
   29c04:	ldr	r5, [r1, r7, lsl #2]
   29c08:	ldr	r1, [r8, #8]
   29c0c:	ldr	r3, [r1, r2, lsl #2]
   29c10:	cmp	r3, r5
   29c14:	ble	29c3c <__assert_fail@plt+0x17f90>
   29c18:	add	r7, r7, #1
   29c1c:	mov	r1, #0
   29c20:	str	r5, [r0, r4, lsl #2]
   29c24:	add	r4, r4, #1
   29c28:	cmp	r9, r7
   29c2c:	movwgt	r1, #1
   29c30:	cmp	lr, r2
   29c34:	bgt	29bf8 <__assert_fail@plt+0x17f4c>
   29c38:	b	29ca4 <__assert_fail@plt+0x17ff8>
   29c3c:	str	r3, [r0, r4, lsl #2]
   29c40:	ldr	r6, [sp, #8]
   29c44:	add	r1, r7, #1
   29c48:	mov	ip, r7
   29c4c:	add	r2, r2, #1
   29c50:	ldr	r9, [sl, #4]
   29c54:	ldr	lr, [r8, #4]
   29c58:	moveq	ip, r1
   29c5c:	str	r1, [sp, #4]
   29c60:	mov	r1, #0
   29c64:	sub	r6, r6, #1
   29c68:	cmp	r9, ip
   29c6c:	str	r6, [sp, #8]
   29c70:	add	r6, r4, #1
   29c74:	movwgt	r1, #1
   29c78:	cmp	lr, r2
   29c7c:	str	r6, [sp, #12]
   29c80:	bgt	29bf0 <__assert_fail@plt+0x17f44>
   29c84:	ldr	r2, [sp, #4]
   29c88:	cmp	r3, r5
   29c8c:	add	r4, r4, #1
   29c90:	moveq	r7, r2
   29c94:	cmp	r1, #0
   29c98:	bne	29cac <__assert_fail@plt+0x18000>
   29c9c:	b	29cf8 <__assert_fail@plt+0x1804c>
   29ca0:	mov	r4, #0
   29ca4:	cmp	r1, #0
   29ca8:	beq	29cf8 <__assert_fail@plt+0x1804c>
   29cac:	ldr	r1, [sl, #8]
   29cb0:	sub	r2, r9, r7
   29cb4:	add	r0, r0, r4, lsl #2
   29cb8:	lsl	r2, r2, #2
   29cbc:	add	r1, r1, r7, lsl #2
   29cc0:	bl	118ec <memcpy@plt>
   29cc4:	sub	r0, r4, r7
   29cc8:	add	r4, r0, r9
   29ccc:	b	29cf8 <__assert_fail@plt+0x1804c>
   29cd0:	ldr	r1, [r8, #8]
   29cd4:	add	r0, r0, r4, lsl #2
   29cd8:	add	r1, r1, r2, lsl #2
   29cdc:	sub	r2, lr, r2
   29ce0:	lsl	r2, r2, #2
   29ce4:	bl	118ec <memcpy@plt>
   29ce8:	ldr	r0, [r8, #4]
   29cec:	ldr	r1, [sp, #8]
   29cf0:	add	r0, r0, r1
   29cf4:	add	r4, r0, r4
   29cf8:	ldr	r0, [sp, #16]
   29cfc:	str	r4, [r0, #4]
   29d00:	mov	r0, #0
   29d04:	sub	sp, fp, #28
   29d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d0c:	ldr	r1, [sp, #16]
   29d10:	mov	r0, #0
   29d14:	str	r0, [r1]
   29d18:	str	r0, [r1, #4]
   29d1c:	mov	r0, #12
   29d20:	sub	sp, fp, #28
   29d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d2c:	add	fp, sp, #28
   29d30:	sub	sp, sp, #12
   29d34:	mov	r6, r2
   29d38:	mov	r7, r3
   29d3c:	ldr	r2, [r2]
   29d40:	ldr	r9, [fp, #8]
   29d44:	mov	r4, r0
   29d48:	mov	r0, #8
   29d4c:	mov	r8, r1
   29d50:	ldr	r3, [r6, #4]
   29d54:	str	r0, [sp, #8]
   29d58:	add	r1, r6, #8
   29d5c:	mov	r0, r4
   29d60:	stm	sp, {r7, r9}
   29d64:	bl	29efc <__assert_fail@plt+0x18250>
   29d68:	mov	r5, r0
   29d6c:	cmp	r0, #0
   29d70:	beq	29d80 <__assert_fail@plt+0x180d4>
   29d74:	mov	r0, r5
   29d78:	sub	sp, fp, #28
   29d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d80:	ldr	r0, [r4, #108]	; 0x6c
   29d84:	ldr	r1, [r4, #112]	; 0x70
   29d88:	ldr	sl, [r6, #4]
   29d8c:	ldr	r5, [r8]
   29d90:	cmp	r0, r1
   29d94:	blt	29de4 <__assert_fail@plt+0x18138>
   29d98:	ldr	r0, [r4, #116]	; 0x74
   29d9c:	add	r1, r1, r1, lsl #1
   29da0:	lsl	r1, r1, #4
   29da4:	bl	1bd04 <__assert_fail@plt+0xa058>
   29da8:	cmp	r0, #0
   29dac:	beq	29ee4 <__assert_fail@plt+0x18238>
   29db0:	str	r0, [r4, #116]	; 0x74
   29db4:	ldr	r1, [r4, #108]	; 0x6c
   29db8:	ldr	r2, [r4, #112]	; 0x70
   29dbc:	add	r1, r1, r1, lsl #1
   29dc0:	add	r0, r0, r1, lsl #3
   29dc4:	add	r1, r2, r2, lsl #1
   29dc8:	lsl	r2, r1, #3
   29dcc:	mov	r1, #0
   29dd0:	bl	11b2c <memset@plt>
   29dd4:	ldr	r1, [r4, #112]	; 0x70
   29dd8:	ldr	r0, [r4, #108]	; 0x6c
   29ddc:	lsl	r1, r1, #1
   29de0:	str	r1, [r4, #112]	; 0x70
   29de4:	ldr	r1, [r4, #116]	; 0x74
   29de8:	cmp	r0, #1
   29dec:	blt	29e0c <__assert_fail@plt+0x18160>
   29df0:	sub	r2, r0, #1
   29df4:	add	r2, r2, r2, lsl #1
   29df8:	add	r2, r1, r2, lsl #3
   29dfc:	ldr	r3, [r2, #4]
   29e00:	cmp	r3, r9
   29e04:	moveq	r3, #1
   29e08:	strbeq	r3, [r2, #20]
   29e0c:	add	r2, r0, r0, lsl #1
   29e10:	cmp	sl, r5
   29e14:	mov	r3, #0
   29e18:	add	r0, r0, #1
   29e1c:	str	r7, [r1, r2, lsl #3]!
   29e20:	mov	r2, #0
   29e24:	mvneq	r3, #0
   29e28:	str	r9, [r1, #4]
   29e2c:	str	r5, [r1, #8]
   29e30:	str	sl, [r1, #12]
   29e34:	str	r3, [r1, #16]
   29e38:	str	r0, [r4, #108]	; 0x6c
   29e3c:	strb	r2, [r1, #20]
   29e40:	sub	r0, sl, r5
   29e44:	ldr	r1, [r4, #120]	; 0x78
   29e48:	cmp	r1, r0
   29e4c:	strlt	r0, [r4, #120]	; 0x78
   29e50:	ldr	r0, [r6, #4]
   29e54:	ldr	r1, [r8]
   29e58:	ldr	r7, [r4, #104]	; 0x68
   29e5c:	add	r0, r0, r9
   29e60:	sub	r6, r0, r1
   29e64:	ldr	r0, [r4, #36]	; 0x24
   29e68:	cmp	r0, r6
   29e6c:	ldrle	r1, [r4, #48]	; 0x30
   29e70:	cmple	r0, r1
   29e74:	blt	29ec8 <__assert_fail@plt+0x1821c>
   29e78:	ldr	r0, [r4, #28]
   29e7c:	cmp	r0, r6
   29e80:	ldrle	r1, [r4, #48]	; 0x30
   29e84:	cmple	r0, r1
   29e88:	blt	29ec8 <__assert_fail@plt+0x1821c>
   29e8c:	mov	r5, #0
   29e90:	cmp	r6, r7
   29e94:	ble	29d74 <__assert_fail@plt+0x180c8>
   29e98:	sub	r0, r6, r7
   29e9c:	mov	r1, #0
   29ea0:	mov	r5, #0
   29ea4:	lsl	r2, r0, #2
   29ea8:	ldr	r0, [r4, #100]	; 0x64
   29eac:	add	r0, r0, r7, lsl #2
   29eb0:	add	r0, r0, #4
   29eb4:	bl	11b2c <memset@plt>
   29eb8:	str	r6, [r4, #104]	; 0x68
   29ebc:	mov	r0, r5
   29ec0:	sub	sp, fp, #28
   29ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ec8:	add	r1, r6, #1
   29ecc:	mov	r0, r4
   29ed0:	bl	29638 <__assert_fail@plt+0x1798c>
   29ed4:	mov	r5, r0
   29ed8:	cmp	r0, #0
   29edc:	bne	29d74 <__assert_fail@plt+0x180c8>
   29ee0:	b	29e8c <__assert_fail@plt+0x181e0>
   29ee4:	ldr	r0, [r4, #116]	; 0x74
   29ee8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   29eec:	mov	r5, #12
   29ef0:	mov	r0, r5
   29ef4:	sub	sp, fp, #28
   29ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f00:	add	fp, sp, #28
   29f04:	sub	sp, sp, #84	; 0x54
   29f08:	ldr	sl, [r0, #84]	; 0x54
   29f0c:	mov	r8, r2
   29f10:	mov	r2, #0
   29f14:	mov	r9, r3
   29f18:	ldr	r3, [fp, #12]
   29f1c:	str	r0, [sp, #40]	; 0x28
   29f20:	str	r2, [fp, #-52]	; 0xffffffcc
   29f24:	ldr	r5, [r1, #4]
   29f28:	ldr	r2, [sl]
   29f2c:	str	sl, [sp, #20]
   29f30:	ldr	r2, [r2, r8, lsl #3]
   29f34:	str	r2, [sp, #24]
   29f38:	ldr	r2, [r0, #120]	; 0x78
   29f3c:	add	r2, r2, r3
   29f40:	cmp	r5, r2
   29f44:	ble	2a848 <__assert_fail@plt+0x18b9c>
   29f48:	add	r4, r1, #8
   29f4c:	ldr	r2, [r0, #40]	; 0x28
   29f50:	ldr	r5, [r1]
   29f54:	ldr	r3, [r0, #88]	; 0x58
   29f58:	str	r1, [sp, #16]
   29f5c:	str	r2, [sp, #12]
   29f60:	ldr	r2, [r0, #100]	; 0x64
   29f64:	cmp	r5, #0
   29f68:	moveq	r5, r9
   29f6c:	cmp	r5, #0
   29f70:	str	r2, [sp, #8]
   29f74:	ldr	r2, [r4]
   29f78:	str	r2, [r0, #100]	; 0x64
   29f7c:	str	r5, [r0, #40]	; 0x28
   29f80:	ble	29fc4 <__assert_fail@plt+0x18318>
   29f84:	ldr	r2, [r0, #48]	; 0x30
   29f88:	sub	r7, r5, #1
   29f8c:	cmp	r2, r7
   29f90:	beq	2a8b8 <__assert_fail@plt+0x18c0c>
   29f94:	ldr	r2, [r0, #80]	; 0x50
   29f98:	cmp	r2, #2
   29f9c:	blt	2a008 <__assert_fail@plt+0x1835c>
   29fa0:	ldr	r2, [r0, #8]
   29fa4:	mov	r3, r5
   29fa8:	sub	r2, r2, #4
   29fac:	ldr	r6, [r2, r3, lsl #2]
   29fb0:	cmn	r6, #1
   29fb4:	bne	2a03c <__assert_fail@plt+0x18390>
   29fb8:	sub	r3, r3, #1
   29fbc:	cmp	r3, #0
   29fc0:	bgt	29fac <__assert_fail@plt+0x18300>
   29fc4:	ldr	r7, [r0, #60]	; 0x3c
   29fc8:	cmp	r5, r9
   29fcc:	beq	2a06c <__assert_fail@plt+0x183c0>
   29fd0:	ldr	r0, [sp, #40]	; 0x28
   29fd4:	ldr	r0, [r0, #100]	; 0x64
   29fd8:	ldr	r4, [r0, r5, lsl #2]
   29fdc:	cmp	r4, #0
   29fe0:	beq	2a128 <__assert_fail@plt+0x1847c>
   29fe4:	ldrb	r0, [r4, #52]	; 0x34
   29fe8:	ldr	r8, [fp, #16]
   29fec:	tst	r0, #64	; 0x40
   29ff0:	bne	2a140 <__assert_fail@plt+0x18494>
   29ff4:	mov	r0, #0
   29ff8:	str	r0, [sp, #52]	; 0x34
   29ffc:	str	r0, [sp, #48]	; 0x30
   2a000:	str	r0, [sp, #56]	; 0x38
   2a004:	b	2a18c <__assert_fail@plt+0x184e0>
   2a008:	ldr	r3, [r0, #4]
   2a00c:	ldr	r2, [r0, #68]	; 0x44
   2a010:	ldrb	r0, [r3, r7]
   2a014:	mov	r7, #1
   2a018:	ubfx	r1, r0, #5, #3
   2a01c:	ldr	r1, [r2, r1, lsl #2]
   2a020:	and	r2, r0, #31
   2a024:	tst	r1, r7, lsl r2
   2a028:	bne	2a064 <__assert_fail@plt+0x183b8>
   2a02c:	mov	r7, #0
   2a030:	cmp	r0, #10
   2a034:	beq	2a054 <__assert_fail@plt+0x183a8>
   2a038:	b	2a064 <__assert_fail@plt+0x183b8>
   2a03c:	ldrb	r0, [r0, #78]	; 0x4e
   2a040:	cmp	r0, #0
   2a044:	bne	2a904 <__assert_fail@plt+0x18c58>
   2a048:	mov	r7, #0
   2a04c:	cmp	r6, #10
   2a050:	bne	2a064 <__assert_fail@plt+0x183b8>
   2a054:	ldr	r0, [sp, #40]	; 0x28
   2a058:	ldrb	r7, [r0, #77]	; 0x4d
   2a05c:	cmp	r7, #0
   2a060:	movwne	r7, #2
   2a064:	cmp	r5, r9
   2a068:	bne	29fd0 <__assert_fail@plt+0x18324>
   2a06c:	mov	r0, #1
   2a070:	str	r0, [sp, #52]	; 0x34
   2a074:	str	r0, [sp, #48]	; 0x30
   2a078:	mov	r0, #4
   2a07c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2a080:	cmp	r0, #0
   2a084:	str	r0, [sp, #56]	; 0x38
   2a088:	beq	2a8e4 <__assert_fail@plt+0x18c38>
   2a08c:	str	r8, [r0]
   2a090:	ldr	r8, [fp, #16]
   2a094:	ldr	r2, [sp, #24]
   2a098:	mov	r0, #0
   2a09c:	add	r1, sp, #48	; 0x30
   2a0a0:	str	r0, [fp, #-52]	; 0xffffffcc
   2a0a4:	mov	r0, sl
   2a0a8:	mov	r3, r8
   2a0ac:	bl	2a924 <__assert_fail@plt+0x18c78>
   2a0b0:	cmp	r0, #0
   2a0b4:	str	r0, [fp, #-52]	; 0xffffffcc
   2a0b8:	bne	2a8cc <__assert_fail@plt+0x18c20>
   2a0bc:	ldr	r0, [sp, #52]	; 0x34
   2a0c0:	cmp	r0, #0
   2a0c4:	beq	2a0ec <__assert_fail@plt+0x18440>
   2a0c8:	ldr	r0, [sp, #40]	; 0x28
   2a0cc:	ldr	r3, [sp, #24]
   2a0d0:	add	r1, sp, #48	; 0x30
   2a0d4:	mov	r2, r5
   2a0d8:	str	r8, [sp]
   2a0dc:	bl	2aa70 <__assert_fail@plt+0x18dc4>
   2a0e0:	cmp	r0, #0
   2a0e4:	str	r0, [fp, #-52]	; 0xffffffcc
   2a0e8:	bne	2a8cc <__assert_fail@plt+0x18c20>
   2a0ec:	ldr	r1, [sp, #20]
   2a0f0:	sub	r0, fp, #52	; 0x34
   2a0f4:	add	r2, sp, #48	; 0x30
   2a0f8:	mov	r3, r7
   2a0fc:	bl	2725c <__assert_fail@plt+0x155b0>
   2a100:	mov	r4, r0
   2a104:	cmp	r0, #0
   2a108:	bne	2a118 <__assert_fail@plt+0x1846c>
   2a10c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2a110:	cmp	r0, #0
   2a114:	bne	2a830 <__assert_fail@plt+0x18b84>
   2a118:	ldr	r0, [sp, #40]	; 0x28
   2a11c:	ldr	r0, [r0, #100]	; 0x64
   2a120:	str	r4, [r0, r5, lsl #2]
   2a124:	b	2a18c <__assert_fail@plt+0x184e0>
   2a128:	ldr	r8, [fp, #16]
   2a12c:	mov	r4, #0
   2a130:	str	r4, [sp, #52]	; 0x34
   2a134:	str	r4, [sp, #48]	; 0x30
   2a138:	str	r4, [sp, #56]	; 0x38
   2a13c:	b	2a18c <__assert_fail@plt+0x184e0>
   2a140:	ldr	r0, [r4, #8]
   2a144:	cmp	r0, #1
   2a148:	str	r0, [sp, #52]	; 0x34
   2a14c:	blt	2a7dc <__assert_fail@plt+0x18b30>
   2a150:	str	r0, [sp, #48]	; 0x30
   2a154:	lsl	r0, r0, #2
   2a158:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2a15c:	cmp	r0, #0
   2a160:	str	r0, [sp, #56]	; 0x38
   2a164:	beq	2a8e4 <__assert_fail@plt+0x18c38>
   2a168:	ldr	r2, [r4, #8]
   2a16c:	ldr	r1, [r4, #12]
   2a170:	lsl	r2, r2, #2
   2a174:	bl	118ec <memcpy@plt>
   2a178:	ldrb	r0, [r4, #52]	; 0x34
   2a17c:	mov	r1, #0
   2a180:	str	r1, [fp, #-52]	; 0xffffffcc
   2a184:	tst	r0, #64	; 0x40
   2a188:	bne	2a0c8 <__assert_fail@plt+0x1841c>
   2a18c:	str	r4, [sp, #36]	; 0x24
   2a190:	ldr	r4, [fp, #12]
   2a194:	mov	r9, r4
   2a198:	cmp	r5, r4
   2a19c:	bge	2a724 <__assert_fail@plt+0x18a78>
   2a1a0:	ldr	r7, [sp, #40]	; 0x28
   2a1a4:	ldr	r4, [sp, #20]
   2a1a8:	ldr	sl, [sp, #24]
   2a1ac:	mov	r0, #0
   2a1b0:	str	r0, [sp, #32]
   2a1b4:	ldr	r0, [r7, #120]	; 0x78
   2a1b8:	ldr	r1, [sp, #32]
   2a1bc:	cmp	r1, r0
   2a1c0:	bgt	2a728 <__assert_fail@plt+0x18a7c>
   2a1c4:	mov	r0, #0
   2a1c8:	add	r1, r5, #1
   2a1cc:	str	r0, [sp, #52]	; 0x34
   2a1d0:	str	r1, [sp, #28]
   2a1d4:	ldr	r0, [r7, #100]	; 0x64
   2a1d8:	ldr	r0, [r0, r1, lsl #2]
   2a1dc:	cmp	r0, #0
   2a1e0:	beq	2a1fc <__assert_fail@plt+0x18550>
   2a1e4:	add	r1, r0, #4
   2a1e8:	add	r0, sp, #48	; 0x30
   2a1ec:	bl	26f6c <__assert_fail@plt+0x152c0>
   2a1f0:	cmp	r0, #0
   2a1f4:	str	r0, [fp, #-52]	; 0xffffffcc
   2a1f8:	bne	2a830 <__assert_fail@plt+0x18b84>
   2a1fc:	ldr	r1, [sp, #36]	; 0x24
   2a200:	cmp	r1, #0
   2a204:	beq	2a598 <__assert_fail@plt+0x188ec>
   2a208:	mov	r0, #0
   2a20c:	ldr	r8, [r7, #84]	; 0x54
   2a210:	str	r0, [fp, #-32]	; 0xffffffe0
   2a214:	str	r0, [fp, #-44]	; 0xffffffd4
   2a218:	str	r0, [fp, #-48]	; 0xffffffd0
   2a21c:	str	r0, [fp, #-40]	; 0xffffffd8
   2a220:	ldr	r1, [r1, #20]
   2a224:	cmp	r1, #1
   2a228:	blt	2a588 <__assert_fail@plt+0x188dc>
   2a22c:	str	r5, [sp, #44]	; 0x2c
   2a230:	ldr	r5, [sp, #36]	; 0x24
   2a234:	mov	r4, #0
   2a238:	b	2a3f4 <__assert_fail@plt+0x18748>
   2a23c:	mov	r0, #1
   2a240:	str	r0, [sp, #52]	; 0x34
   2a244:	str	r0, [sp, #48]	; 0x30
   2a248:	mov	r0, #4
   2a24c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2a250:	cmp	r0, #0
   2a254:	str	r0, [sp, #56]	; 0x38
   2a258:	beq	2a7f4 <__assert_fail@plt+0x18b48>
   2a25c:	str	r6, [r0]
   2a260:	ldr	r0, [r5, #20]
   2a264:	add	r4, r4, #1
   2a268:	cmp	r4, r0
   2a26c:	blt	2a3f4 <__assert_fail@plt+0x18748>
   2a270:	b	2a570 <__assert_fail@plt+0x188c4>
   2a274:	cmp	r2, r1
   2a278:	bne	2a2e4 <__assert_fail@plt+0x18638>
   2a27c:	lsl	r0, r2, #1
   2a280:	lsl	r1, r2, #3
   2a284:	str	r0, [sp, #48]	; 0x30
   2a288:	ldr	r0, [sp, #56]	; 0x38
   2a28c:	bl	1bd04 <__assert_fail@plt+0xa058>
   2a290:	cmp	r0, #0
   2a294:	beq	2a800 <__assert_fail@plt+0x18b54>
   2a298:	str	r0, [sp, #56]	; 0x38
   2a29c:	ldr	r1, [sp, #52]	; 0x34
   2a2a0:	ldr	r2, [r0]
   2a2a4:	cmp	r2, r6
   2a2a8:	ble	2a2f4 <__assert_fail@plt+0x18648>
   2a2ac:	cmp	r1, #1
   2a2b0:	blt	2a324 <__assert_fail@plt+0x18678>
   2a2b4:	add	r2, r0, r1, lsl #2
   2a2b8:	add	r1, r1, #1
   2a2bc:	mov	r3, r2
   2a2c0:	ldr	r7, [r3, #-4]!
   2a2c4:	sub	r1, r1, #1
   2a2c8:	cmp	r1, #1
   2a2cc:	str	r7, [r2]
   2a2d0:	mov	r2, r3
   2a2d4:	bgt	2a2c0 <__assert_fail@plt+0x18614>
   2a2d8:	ldr	r7, [sp, #40]	; 0x28
   2a2dc:	sub	r1, r1, #1
   2a2e0:	b	2a324 <__assert_fail@plt+0x18678>
   2a2e4:	ldr	r0, [sp, #56]	; 0x38
   2a2e8:	ldr	r2, [r0]
   2a2ec:	cmp	r2, r6
   2a2f0:	bgt	2a2ac <__assert_fail@plt+0x18600>
   2a2f4:	add	r2, r0, r1, lsl #2
   2a2f8:	ldr	r3, [r2, #-4]
   2a2fc:	cmp	r3, r6
   2a300:	ble	2a324 <__assert_fail@plt+0x18678>
   2a304:	sub	r1, r1, #2
   2a308:	str	r3, [r2]
   2a30c:	sub	r1, r1, #1
   2a310:	ldr	r3, [r2, #-8]
   2a314:	sub	r2, r2, #4
   2a318:	cmp	r3, r6
   2a31c:	bgt	2a308 <__assert_fail@plt+0x1865c>
   2a320:	add	r1, r1, #2
   2a324:	str	r6, [r0, r1, lsl #2]
   2a328:	b	2a554 <__assert_fail@plt+0x188a8>
   2a32c:	cmp	r2, r1
   2a330:	bne	2a39c <__assert_fail@plt+0x186f0>
   2a334:	lsl	r0, r2, #1
   2a338:	lsl	r1, r2, #3
   2a33c:	str	r0, [fp, #-48]	; 0xffffffd0
   2a340:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a344:	bl	1bd04 <__assert_fail@plt+0xa058>
   2a348:	cmp	r0, #0
   2a34c:	beq	2a800 <__assert_fail@plt+0x18b54>
   2a350:	str	r0, [fp, #-40]	; 0xffffffd8
   2a354:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2a358:	ldr	r2, [r0]
   2a35c:	cmp	r2, r5
   2a360:	bgt	2a3ac <__assert_fail@plt+0x18700>
   2a364:	add	r2, r0, r1, lsl #2
   2a368:	ldr	r7, [sp, #40]	; 0x28
   2a36c:	ldr	r3, [r2, #-4]
   2a370:	cmp	r3, r5
   2a374:	ble	2a3e0 <__assert_fail@plt+0x18734>
   2a378:	sub	r1, r1, #2
   2a37c:	str	r3, [r2]
   2a380:	sub	r1, r1, #1
   2a384:	ldr	r3, [r2, #-8]
   2a388:	sub	r2, r2, #4
   2a38c:	cmp	r3, r5
   2a390:	bgt	2a37c <__assert_fail@plt+0x186d0>
   2a394:	add	r1, r1, #2
   2a398:	b	2a3e0 <__assert_fail@plt+0x18734>
   2a39c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a3a0:	ldr	r2, [r0]
   2a3a4:	cmp	r2, r5
   2a3a8:	ble	2a364 <__assert_fail@plt+0x186b8>
   2a3ac:	cmp	r1, #1
   2a3b0:	blt	2a3dc <__assert_fail@plt+0x18730>
   2a3b4:	add	r2, r0, r1, lsl #2
   2a3b8:	add	r1, r1, #1
   2a3bc:	mov	r3, r2
   2a3c0:	ldr	r7, [r3, #-4]!
   2a3c4:	sub	r1, r1, #1
   2a3c8:	cmp	r1, #1
   2a3cc:	str	r7, [r2]
   2a3d0:	mov	r2, r3
   2a3d4:	bgt	2a3c0 <__assert_fail@plt+0x18714>
   2a3d8:	sub	r1, r1, #1
   2a3dc:	ldr	r7, [sp, #40]	; 0x28
   2a3e0:	str	r5, [r0, r1, lsl #2]
   2a3e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2a3e8:	add	r0, r0, #1
   2a3ec:	str	r0, [fp, #-44]	; 0xffffffd4
   2a3f0:	b	2a4cc <__assert_fail@plt+0x18820>
   2a3f4:	ldr	r0, [r5, #24]
   2a3f8:	ldr	sl, [r0, r4, lsl #2]
   2a3fc:	ldr	r0, [r8]
   2a400:	add	r1, r0, sl, lsl #3
   2a404:	ldrb	r1, [r1, #6]
   2a408:	tst	r1, #16
   2a40c:	beq	2a514 <__assert_fail@plt+0x18868>
   2a410:	ldr	r5, [sp, #44]	; 0x2c
   2a414:	mov	r0, r8
   2a418:	mov	r1, sl
   2a41c:	mov	r2, r7
   2a420:	mov	r3, r5
   2a424:	bl	2b3b0 <__assert_fail@plt+0x19704>
   2a428:	mov	r9, r0
   2a42c:	cmp	r0, #2
   2a430:	blt	2a500 <__assert_fail@plt+0x18854>
   2a434:	ldr	r0, [sp, #40]	; 0x28
   2a438:	ldr	r1, [r8, #12]
   2a43c:	add	r6, r9, r5
   2a440:	ldr	r0, [r0, #100]	; 0x64
   2a444:	ldr	r5, [r1, sl, lsl #2]
   2a448:	mov	r1, #0
   2a44c:	ldr	r0, [r0, r6, lsl #2]
   2a450:	str	r1, [fp, #-44]	; 0xffffffd4
   2a454:	cmp	r0, #0
   2a458:	beq	2a474 <__assert_fail@plt+0x187c8>
   2a45c:	add	r1, r0, #4
   2a460:	sub	r0, fp, #48	; 0x30
   2a464:	bl	26f6c <__assert_fail@plt+0x152c0>
   2a468:	cmp	r0, #0
   2a46c:	str	r0, [fp, #-32]	; 0xffffffe0
   2a470:	bne	2a808 <__assert_fail@plt+0x18b5c>
   2a474:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2a478:	cmp	r2, #0
   2a47c:	beq	2a4a4 <__assert_fail@plt+0x187f8>
   2a480:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2a484:	cmp	r1, #0
   2a488:	bne	2a32c <__assert_fail@plt+0x18680>
   2a48c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a490:	str	r5, [r0]
   2a494:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2a498:	add	r0, r0, #1
   2a49c:	str	r0, [fp, #-44]	; 0xffffffd4
   2a4a0:	b	2a4c8 <__assert_fail@plt+0x1881c>
   2a4a4:	mov	r0, #1
   2a4a8:	str	r0, [fp, #-44]	; 0xffffffd4
   2a4ac:	str	r0, [fp, #-48]	; 0xffffffd0
   2a4b0:	mov	r0, #4
   2a4b4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2a4b8:	cmp	r0, #0
   2a4bc:	str	r0, [fp, #-40]	; 0xffffffd8
   2a4c0:	beq	2a818 <__assert_fail@plt+0x18b6c>
   2a4c4:	str	r5, [r0]
   2a4c8:	ldr	r7, [sp, #40]	; 0x28
   2a4cc:	sub	r0, fp, #32
   2a4d0:	mov	r1, r8
   2a4d4:	sub	r2, fp, #48	; 0x30
   2a4d8:	bl	2b110 <__assert_fail@plt+0x19464>
   2a4dc:	ldr	r1, [r7, #100]	; 0x64
   2a4e0:	str	r0, [r1, r6, lsl #2]
   2a4e4:	ldr	r0, [r7, #100]	; 0x64
   2a4e8:	ldr	r0, [r0, r6, lsl #2]
   2a4ec:	cmp	r0, #0
   2a4f0:	bne	2a500 <__assert_fail@plt+0x18854>
   2a4f4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2a4f8:	cmp	r7, #0
   2a4fc:	bne	2a80c <__assert_fail@plt+0x18b60>
   2a500:	ldr	r7, [sp, #40]	; 0x28
   2a504:	ldr	r5, [sp, #36]	; 0x24
   2a508:	cmp	r9, #0
   2a50c:	bne	2a52c <__assert_fail@plt+0x18880>
   2a510:	ldr	r0, [r8]
   2a514:	ldr	r2, [sp, #44]	; 0x2c
   2a518:	add	r1, r0, sl, lsl #3
   2a51c:	mov	r0, r7
   2a520:	bl	2b6c8 <__assert_fail@plt+0x19a1c>
   2a524:	cmp	r0, #0
   2a528:	beq	2a560 <__assert_fail@plt+0x188b4>
   2a52c:	ldr	r0, [r8, #12]
   2a530:	ldr	r2, [sp, #48]	; 0x30
   2a534:	ldr	r6, [r0, sl, lsl #2]
   2a538:	cmp	r2, #0
   2a53c:	beq	2a23c <__assert_fail@plt+0x18590>
   2a540:	ldr	r1, [sp, #52]	; 0x34
   2a544:	cmp	r1, #0
   2a548:	bne	2a274 <__assert_fail@plt+0x185c8>
   2a54c:	ldr	r0, [sp, #56]	; 0x38
   2a550:	str	r6, [r0]
   2a554:	ldr	r0, [sp, #52]	; 0x34
   2a558:	add	r0, r0, #1
   2a55c:	str	r0, [sp, #52]	; 0x34
   2a560:	ldr	r0, [r5, #20]
   2a564:	add	r4, r4, #1
   2a568:	cmp	r4, r0
   2a56c:	blt	2a3f4 <__assert_fail@plt+0x18748>
   2a570:	ldr	r4, [fp, #12]
   2a574:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a578:	ldr	sl, [sp, #24]
   2a57c:	ldr	r5, [sp, #44]	; 0x2c
   2a580:	mov	r9, r4
   2a584:	ldr	r4, [sp, #20]
   2a588:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2a58c:	ldr	r8, [fp, #16]
   2a590:	mov	r0, #0
   2a594:	str	r0, [fp, #-52]	; 0xffffffcc
   2a598:	ldr	r0, [sp, #52]	; 0x34
   2a59c:	cmp	r0, #0
   2a5a0:	beq	2a5ec <__assert_fail@plt+0x18940>
   2a5a4:	add	r6, sp, #48	; 0x30
   2a5a8:	mov	r0, r4
   2a5ac:	mov	r2, sl
   2a5b0:	mov	r3, r8
   2a5b4:	mov	r1, r6
   2a5b8:	bl	2a924 <__assert_fail@plt+0x18c78>
   2a5bc:	cmp	r0, #0
   2a5c0:	str	r0, [fp, #-52]	; 0xffffffcc
   2a5c4:	bne	2a830 <__assert_fail@plt+0x18b84>
   2a5c8:	ldr	r2, [sp, #28]
   2a5cc:	mov	r0, r7
   2a5d0:	mov	r1, r6
   2a5d4:	mov	r3, sl
   2a5d8:	str	r8, [sp]
   2a5dc:	bl	2aa70 <__assert_fail@plt+0x18dc4>
   2a5e0:	cmp	r0, #0
   2a5e4:	str	r0, [fp, #-52]	; 0xffffffcc
   2a5e8:	bne	2a830 <__assert_fail@plt+0x18b84>
   2a5ec:	cmn	r5, #1
   2a5f0:	ble	2a62c <__assert_fail@plt+0x18980>
   2a5f4:	ldr	r0, [r7, #48]	; 0x30
   2a5f8:	cmp	r0, r5
   2a5fc:	beq	2a6f0 <__assert_fail@plt+0x18a44>
   2a600:	ldr	r0, [r7, #80]	; 0x50
   2a604:	cmp	r0, #2
   2a608:	blt	2a638 <__assert_fail@plt+0x1898c>
   2a60c:	ldr	r0, [r7, #8]
   2a610:	ldr	r6, [r0, r5, lsl #2]
   2a614:	cmn	r6, #1
   2a618:	bne	2a670 <__assert_fail@plt+0x189c4>
   2a61c:	sub	r1, r5, #1
   2a620:	cmp	r5, #0
   2a624:	mov	r5, r1
   2a628:	bgt	2a610 <__assert_fail@plt+0x18964>
   2a62c:	ldr	r3, [r7, #60]	; 0x3c
   2a630:	add	r5, sp, #48	; 0x30
   2a634:	b	2a698 <__assert_fail@plt+0x189ec>
   2a638:	ldr	r0, [r7, #4]
   2a63c:	ldr	r1, [r7, #68]	; 0x44
   2a640:	mov	r3, #1
   2a644:	ldrb	r0, [r0, r5]
   2a648:	add	r5, sp, #48	; 0x30
   2a64c:	ubfx	r2, r0, #5, #3
   2a650:	ldr	r1, [r1, r2, lsl #2]
   2a654:	and	r2, r0, #31
   2a658:	tst	r1, r3, lsl r2
   2a65c:	bne	2a698 <__assert_fail@plt+0x189ec>
   2a660:	mov	r3, #0
   2a664:	cmp	r0, #10
   2a668:	beq	2a68c <__assert_fail@plt+0x189e0>
   2a66c:	b	2a698 <__assert_fail@plt+0x189ec>
   2a670:	ldrb	r0, [r7, #78]	; 0x4e
   2a674:	add	r5, sp, #48	; 0x30
   2a678:	cmp	r0, #0
   2a67c:	bne	2a704 <__assert_fail@plt+0x18a58>
   2a680:	mov	r3, #0
   2a684:	cmp	r6, #10
   2a688:	bne	2a698 <__assert_fail@plt+0x189ec>
   2a68c:	ldrb	r3, [r7, #77]	; 0x4d
   2a690:	cmp	r3, #0
   2a694:	movwne	r3, #2
   2a698:	sub	r0, fp, #52	; 0x34
   2a69c:	mov	r1, r4
   2a6a0:	mov	r2, r5
   2a6a4:	bl	2725c <__assert_fail@plt+0x155b0>
   2a6a8:	cmp	r0, #0
   2a6ac:	str	r0, [sp, #36]	; 0x24
   2a6b0:	bne	2a6c0 <__assert_fail@plt+0x18a14>
   2a6b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2a6b8:	cmp	r0, #0
   2a6bc:	bne	2a830 <__assert_fail@plt+0x18b84>
   2a6c0:	ldr	r1, [sp, #28]
   2a6c4:	ldr	r2, [sp, #36]	; 0x24
   2a6c8:	ldr	r0, [r7, #100]	; 0x64
   2a6cc:	str	r2, [r0, r1, lsl #2]
   2a6d0:	cmp	r2, #0
   2a6d4:	ldr	r2, [sp, #32]
   2a6d8:	mov	r0, #0
   2a6dc:	mov	r5, r1
   2a6e0:	addeq	r0, r2, #1
   2a6e4:	cmp	r1, r9
   2a6e8:	blt	2a1b0 <__assert_fail@plt+0x18504>
   2a6ec:	b	2a72c <__assert_fail@plt+0x18a80>
   2a6f0:	ldr	r0, [r7, #88]	; 0x58
   2a6f4:	add	r5, sp, #48	; 0x30
   2a6f8:	and	r0, r0, #2
   2a6fc:	eor	r3, r0, #10
   2a700:	b	2a698 <__assert_fail@plt+0x189ec>
   2a704:	mov	r0, r6
   2a708:	bl	11afc <iswalnum@plt>
   2a70c:	mov	r3, #1
   2a710:	cmp	r6, #95	; 0x5f
   2a714:	beq	2a698 <__assert_fail@plt+0x189ec>
   2a718:	cmp	r0, #0
   2a71c:	beq	2a680 <__assert_fail@plt+0x189d4>
   2a720:	b	2a698 <__assert_fail@plt+0x189ec>
   2a724:	ldr	r7, [sp, #40]	; 0x28
   2a728:	mov	r1, r5
   2a72c:	ldr	r0, [sp, #56]	; 0x38
   2a730:	mov	r4, r1
   2a734:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2a738:	ldr	r0, [r7, #100]	; 0x64
   2a73c:	mov	sl, #1
   2a740:	ldr	r1, [r0, r9, lsl #2]
   2a744:	ldr	r0, [sp, #16]
   2a748:	str	r4, [r0]
   2a74c:	ldr	r0, [sp, #12]
   2a750:	cmp	r1, #0
   2a754:	addne	r1, r1, #4
   2a758:	str	r0, [r7, #40]	; 0x28
   2a75c:	ldr	r0, [sp, #8]
   2a760:	str	r0, [r7, #100]	; 0x64
   2a764:	beq	2a7c0 <__assert_fail@plt+0x18b14>
   2a768:	ldr	r2, [r1, #4]
   2a76c:	cmp	r2, #1
   2a770:	blt	2a7cc <__assert_fail@plt+0x18b20>
   2a774:	ldr	r0, [fp, #8]
   2a778:	ldr	r1, [r1, #8]
   2a77c:	subs	r2, r2, #1
   2a780:	mov	sl, #0
   2a784:	mov	r3, #0
   2a788:	beq	2a7b4 <__assert_fail@plt+0x18b08>
   2a78c:	mov	r3, #0
   2a790:	mov	r7, #1
   2a794:	add	r5, r3, r2
   2a798:	lsr	r4, r5, #1
   2a79c:	ldr	r6, [r1, r4, lsl #2]
   2a7a0:	cmp	r6, r0
   2a7a4:	movge	r2, r4
   2a7a8:	addlt	r3, r7, r5, lsr #1
   2a7ac:	cmp	r3, r2
   2a7b0:	bcc	2a794 <__assert_fail@plt+0x18ae8>
   2a7b4:	ldr	r1, [r1, r3, lsl #2]
   2a7b8:	cmp	r1, r0
   2a7bc:	movne	sl, #1
   2a7c0:	mov	r0, sl
   2a7c4:	sub	sp, fp, #28
   2a7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7cc:	mov	sl, #1
   2a7d0:	mov	r0, sl
   2a7d4:	sub	sp, fp, #28
   2a7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7dc:	mov	r0, #0
   2a7e0:	str	r0, [sp, #52]	; 0x34
   2a7e4:	str	r0, [sp, #48]	; 0x30
   2a7e8:	str	r0, [sp, #56]	; 0x38
   2a7ec:	str	r0, [fp, #-52]	; 0xffffffcc
   2a7f0:	b	2a0ec <__assert_fail@plt+0x18440>
   2a7f4:	mov	r0, #0
   2a7f8:	str	r0, [sp, #48]	; 0x30
   2a7fc:	str	r0, [sp, #52]	; 0x34
   2a800:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a804:	b	2a824 <__assert_fail@plt+0x18b78>
   2a808:	mov	r7, r0
   2a80c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a810:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2a814:	b	2a82c <__assert_fail@plt+0x18b80>
   2a818:	mov	r0, #0
   2a81c:	str	r0, [fp, #-48]	; 0xffffffd0
   2a820:	str	r0, [fp, #-44]	; 0xffffffd4
   2a824:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2a828:	mov	r7, #12
   2a82c:	str	r7, [fp, #-52]	; 0xffffffcc
   2a830:	ldr	r0, [sp, #56]	; 0x38
   2a834:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2a838:	ldr	sl, [fp, #-52]	; 0xffffffcc
   2a83c:	mov	r0, sl
   2a840:	sub	sp, fp, #28
   2a844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a848:	mov	r6, r1
   2a84c:	mvn	r1, #-2147483648	; 0x80000000
   2a850:	mov	sl, #12
   2a854:	sub	r1, r1, r5
   2a858:	cmp	r1, r2
   2a85c:	ble	2a7c0 <__assert_fail@plt+0x18b14>
   2a860:	add	r0, r2, #1
   2a864:	add	r7, r0, r5
   2a868:	str	r0, [sp, #44]	; 0x2c
   2a86c:	cmn	r7, #-1073741823	; 0xc0000001
   2a870:	bhi	2a7c0 <__assert_fail@plt+0x18b14>
   2a874:	mov	r4, r6
   2a878:	lsl	r1, r7, #2
   2a87c:	ldr	r0, [r4, #8]!
   2a880:	bl	1bd04 <__assert_fail@plt+0xa058>
   2a884:	cmp	r0, #0
   2a888:	beq	2a7c0 <__assert_fail@plt+0x18b14>
   2a88c:	ldr	r1, [sp, #44]	; 0x2c
   2a890:	str	r7, [r6, #4]
   2a894:	str	r0, [r6, #8]
   2a898:	add	r0, r0, r5, lsl #2
   2a89c:	lsl	r2, r1, #2
   2a8a0:	mov	r1, #0
   2a8a4:	bl	11b2c <memset@plt>
   2a8a8:	ldr	r0, [sp, #40]	; 0x28
   2a8ac:	ldr	sl, [sp, #20]
   2a8b0:	mov	r1, r6
   2a8b4:	b	29f4c <__assert_fail@plt+0x182a0>
   2a8b8:	and	r0, r3, #2
   2a8bc:	eor	r7, r0, #10
   2a8c0:	cmp	r5, r9
   2a8c4:	beq	2a06c <__assert_fail@plt+0x183c0>
   2a8c8:	b	29fd0 <__assert_fail@plt+0x18324>
   2a8cc:	mov	sl, r0
   2a8d0:	ldr	r0, [sp, #56]	; 0x38
   2a8d4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2a8d8:	mov	r0, sl
   2a8dc:	sub	sp, fp, #28
   2a8e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8e4:	mov	r0, #0
   2a8e8:	mov	sl, #12
   2a8ec:	str	r0, [sp, #48]	; 0x30
   2a8f0:	str	r0, [sp, #52]	; 0x34
   2a8f4:	str	sl, [fp, #-52]	; 0xffffffcc
   2a8f8:	mov	r0, sl
   2a8fc:	sub	sp, fp, #28
   2a900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a904:	mov	r0, r6
   2a908:	bl	11afc <iswalnum@plt>
   2a90c:	mov	r7, #1
   2a910:	cmp	r6, #95	; 0x5f
   2a914:	beq	2a064 <__assert_fail@plt+0x183b8>
   2a918:	cmp	r0, #0
   2a91c:	beq	2a048 <__assert_fail@plt+0x1839c>
   2a920:	b	2a064 <__assert_fail@plt+0x183b8>
   2a924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a928:	add	fp, sp, #28
   2a92c:	sub	sp, sp, #28
   2a930:	str	r0, [sp, #12]
   2a934:	ldr	r0, [r1, #4]
   2a938:	mov	r4, r1
   2a93c:	mov	r1, #0
   2a940:	mov	sl, r3
   2a944:	mov	r8, r2
   2a948:	str	r1, [sp, #20]
   2a94c:	str	r0, [sp, #16]
   2a950:	lsl	r0, r0, #2
   2a954:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2a958:	cmp	r0, #0
   2a95c:	str	r0, [sp, #24]
   2a960:	beq	2aa60 <__assert_fail@plt+0x18db4>
   2a964:	ldr	r0, [r4, #4]
   2a968:	cmp	r0, #1
   2a96c:	blt	2aa38 <__assert_fail@plt+0x18d8c>
   2a970:	mov	r9, #0
   2a974:	str	r4, [sp, #8]
   2a978:	ldr	r0, [r4, #8]
   2a97c:	ldr	r1, [sp, #12]
   2a980:	ldr	r2, [r0, r9, lsl #2]
   2a984:	ldr	r1, [r1, #24]
   2a988:	add	r0, r2, r2, lsl #1
   2a98c:	add	r1, r1, r0, lsl #2
   2a990:	ldr	r0, [r1, #4]
   2a994:	cmp	r0, #1
   2a998:	blt	2a9d4 <__assert_fail@plt+0x18d28>
   2a99c:	ldr	r7, [sp, #12]
   2a9a0:	ldr	r3, [r1, #8]
   2a9a4:	mov	r6, #0
   2a9a8:	ldr	r7, [r7]
   2a9ac:	ldr	r4, [r3, r6, lsl #2]
   2a9b0:	add	r5, r7, r4, lsl #3
   2a9b4:	ldrb	r5, [r5, #4]
   2a9b8:	cmp	r5, sl
   2a9bc:	ldreq	r5, [r7, r4, lsl #3]
   2a9c0:	cmpeq	r5, r8
   2a9c4:	beq	2a9fc <__assert_fail@plt+0x18d50>
   2a9c8:	add	r6, r6, #1
   2a9cc:	cmp	r6, r0
   2a9d0:	blt	2a9ac <__assert_fail@plt+0x18d00>
   2a9d4:	add	r0, sp, #16
   2a9d8:	bl	26f6c <__assert_fail@plt+0x152c0>
   2a9dc:	cmp	r0, #0
   2a9e0:	bne	2aa20 <__assert_fail@plt+0x18d74>
   2a9e4:	ldr	r4, [sp, #8]
   2a9e8:	add	r9, r9, #1
   2a9ec:	ldr	r0, [r4, #4]
   2a9f0:	cmp	r9, r0
   2a9f4:	blt	2a978 <__assert_fail@plt+0x18ccc>
   2a9f8:	b	2aa38 <__assert_fail@plt+0x18d8c>
   2a9fc:	cmn	r4, #1
   2aa00:	beq	2a9d4 <__assert_fail@plt+0x18d28>
   2aa04:	ldr	r0, [sp, #12]
   2aa08:	add	r1, sp, #16
   2aa0c:	mov	r3, r8
   2aa10:	str	sl, [sp]
   2aa14:	bl	2afcc <__assert_fail@plt+0x19320>
   2aa18:	cmp	r0, #0
   2aa1c:	beq	2a9e4 <__assert_fail@plt+0x18d38>
   2aa20:	mov	r7, r0
   2aa24:	ldr	r0, [sp, #24]
   2aa28:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2aa2c:	mov	r0, r7
   2aa30:	sub	sp, fp, #28
   2aa34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa38:	ldr	r0, [r4, #8]
   2aa3c:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2aa40:	vldr	d16, [sp, #16]
   2aa44:	ldr	r0, [sp, #24]
   2aa48:	mov	r7, #0
   2aa4c:	str	r0, [r4, #8]
   2aa50:	vstr	d16, [r4]
   2aa54:	mov	r0, r7
   2aa58:	sub	sp, fp, #28
   2aa5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa60:	mov	r7, #12
   2aa64:	mov	r0, r7
   2aa68:	sub	sp, fp, #28
   2aa6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa74:	add	fp, sp, #28
   2aa78:	sub	sp, sp, #52	; 0x34
   2aa7c:	ldr	ip, [r0, #108]	; 0x6c
   2aa80:	mov	lr, r1
   2aa84:	ldr	r1, [r0, #84]	; 0x54
   2aa88:	str	r0, [sp, #24]
   2aa8c:	mov	sl, r2
   2aa90:	mov	r8, #0
   2aa94:	mov	r0, #0
   2aa98:	cmp	ip, #1
   2aa9c:	str	r1, [sp, #28]
   2aaa0:	blt	2aae4 <__assert_fail@plt+0x18e38>
   2aaa4:	ldr	r0, [sp, #24]
   2aaa8:	mov	r7, #1
   2aaac:	mov	r1, ip
   2aab0:	ldr	r2, [r0, #116]	; 0x74
   2aab4:	mov	r0, #0
   2aab8:	add	r6, r1, r0
   2aabc:	add	r6, r6, r6, lsr #31
   2aac0:	asr	r4, r6, #1
   2aac4:	add	r5, r4, r4, lsl #1
   2aac8:	add	r5, r2, r5, lsl #3
   2aacc:	ldr	r5, [r5, #4]
   2aad0:	cmp	r5, sl
   2aad4:	addlt	r0, r7, r6, asr #1
   2aad8:	movge	r1, r4
   2aadc:	cmp	r0, r1
   2aae0:	blt	2aab8 <__assert_fail@plt+0x18e0c>
   2aae4:	cmp	r0, ip
   2aae8:	bge	2afb0 <__assert_fail@plt+0x19304>
   2aaec:	cmn	r0, #1
   2aaf0:	beq	2afb0 <__assert_fail@plt+0x19304>
   2aaf4:	ldr	r1, [sp, #24]
   2aaf8:	add	r0, r0, r0, lsl #1
   2aafc:	str	r0, [sp, #8]
   2ab00:	ldr	r1, [r1, #116]	; 0x74
   2ab04:	add	r0, r1, r0, lsl #3
   2ab08:	ldr	r0, [r0, #4]
   2ab0c:	cmp	r0, sl
   2ab10:	bne	2afb0 <__assert_fail@plt+0x19304>
   2ab14:	str	r3, [sp, #12]
   2ab18:	mov	r9, #1
   2ab1c:	str	lr, [sp, #16]
   2ab20:	b	2ab2c <__assert_fail@plt+0x18e80>
   2ab24:	ldr	r0, [sp, #24]
   2ab28:	ldr	r1, [r0, #116]	; 0x74
   2ab2c:	ldr	r0, [sp, #8]
   2ab30:	add	r0, r1, r0, lsl #3
   2ab34:	mov	r8, r0
   2ab38:	ldr	r0, [lr, #4]
   2ab3c:	cmp	r0, #1
   2ab40:	blt	2ae48 <__assert_fail@plt+0x1919c>
   2ab44:	subs	r6, r0, #1
   2ab48:	ldr	r2, [r8]
   2ab4c:	ldr	r0, [lr, #8]
   2ab50:	mov	r3, #0
   2ab54:	beq	2ab7c <__assert_fail@plt+0x18ed0>
   2ab58:	mov	r1, r6
   2ab5c:	add	r7, r3, r1
   2ab60:	lsr	r5, r7, #1
   2ab64:	ldr	r4, [r0, r5, lsl #2]
   2ab68:	cmp	r4, r2
   2ab6c:	movge	r1, r5
   2ab70:	addlt	r3, r9, r7, lsr #1
   2ab74:	cmp	r3, r1
   2ab78:	bcc	2ab5c <__assert_fail@plt+0x18eb0>
   2ab7c:	ldr	r1, [r0, r3, lsl #2]
   2ab80:	cmp	r1, r2
   2ab84:	bne	2ae48 <__assert_fail@plt+0x1919c>
   2ab88:	ldr	r3, [r8, #12]
   2ab8c:	ldr	r1, [r8, #8]
   2ab90:	add	r3, r3, sl
   2ab94:	sub	r7, r3, r1
   2ab98:	cmp	r7, sl
   2ab9c:	bne	2ac94 <__assert_fail@plt+0x18fe8>
   2aba0:	ldr	r1, [sp, #28]
   2aba4:	add	r2, r2, r2, lsl #1
   2aba8:	cmp	r6, #0
   2abac:	ldr	r1, [r1, #20]
   2abb0:	add	r1, r1, r2, lsl #2
   2abb4:	mov	r2, #0
   2abb8:	ldr	r1, [r1, #8]
   2abbc:	ldr	r4, [r1]
   2abc0:	beq	2abe4 <__assert_fail@plt+0x18f38>
   2abc4:	add	r1, r2, r6
   2abc8:	lsr	r3, r1, #1
   2abcc:	ldr	r7, [r0, r3, lsl #2]
   2abd0:	cmp	r7, r4
   2abd4:	movge	r6, r3
   2abd8:	addlt	r2, r9, r1, lsr #1
   2abdc:	cmp	r2, r6
   2abe0:	bcc	2abc4 <__assert_fail@plt+0x18f18>
   2abe4:	ldr	r1, [r0, r2, lsl #2]
   2abe8:	mov	r0, #4
   2abec:	cmp	r1, r4
   2abf0:	beq	2ae3c <__assert_fail@plt+0x19190>
   2abf4:	mov	r0, #4
   2abf8:	str	r9, [sp, #36]	; 0x24
   2abfc:	str	r9, [sp, #32]
   2ac00:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2ac04:	cmp	r0, #0
   2ac08:	str	r0, [sp, #40]	; 0x28
   2ac0c:	beq	2ae5c <__assert_fail@plt+0x191b0>
   2ac10:	mov	r6, #0
   2ac14:	str	r4, [r0]
   2ac18:	ldr	r0, [sp, #28]
   2ac1c:	ldr	r2, [sp, #12]
   2ac20:	ldr	r3, [fp, #8]
   2ac24:	add	r4, sp, #32
   2ac28:	str	r6, [fp, #-32]	; 0xffffffe0
   2ac2c:	mov	r1, r4
   2ac30:	bl	2a924 <__assert_fail@plt+0x18c78>
   2ac34:	ldr	r5, [sp, #16]
   2ac38:	mov	r7, r0
   2ac3c:	mov	r1, r4
   2ac40:	mov	r0, r5
   2ac44:	bl	26f6c <__assert_fail@plt+0x152c0>
   2ac48:	mov	r4, r0
   2ac4c:	ldr	r0, [sp, #40]	; 0x28
   2ac50:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2ac54:	orr	r0, r7, r6
   2ac58:	mov	lr, r5
   2ac5c:	orrs	r0, r0, r4
   2ac60:	mov	r0, #2
   2ac64:	beq	2ae3c <__assert_fail@plt+0x19190>
   2ac68:	cmp	r7, #0
   2ac6c:	mov	r0, #1
   2ac70:	movne	r4, r7
   2ac74:	cmp	r6, #0
   2ac78:	movne	r4, r6
   2ac7c:	str	r4, [fp, #-32]	; 0xffffffe0
   2ac80:	str	r4, [sp, #20]
   2ac84:	cmp	r0, #0
   2ac88:	cmpne	r0, #4
   2ac8c:	beq	2ae48 <__assert_fail@plt+0x1919c>
   2ac90:	b	2afa4 <__assert_fail@plt+0x192f8>
   2ac94:	ldr	r0, [sp, #24]
   2ac98:	ldr	r0, [r0, #100]	; 0x64
   2ac9c:	ldr	r5, [r0, r7, lsl #2]
   2aca0:	ldr	r0, [sp, #28]
   2aca4:	ldr	r0, [r0, #12]
   2aca8:	cmp	r5, #0
   2acac:	ldr	r4, [r0, r2, lsl #2]
   2acb0:	beq	2ad78 <__assert_fail@plt+0x190cc>
   2acb4:	ldr	ip, [r5, #8]
   2acb8:	cmp	ip, #0
   2acbc:	ble	2ada4 <__assert_fail@plt+0x190f8>
   2acc0:	ldr	r0, [r5, #12]
   2acc4:	subs	r3, ip, #1
   2acc8:	mov	r2, #0
   2accc:	str	r7, [sp, #4]
   2acd0:	beq	2acf4 <__assert_fail@plt+0x19048>
   2acd4:	add	r6, r2, r3
   2acd8:	lsr	r7, r6, #1
   2acdc:	ldr	r1, [r0, r7, lsl #2]
   2ace0:	cmp	r1, r4
   2ace4:	movge	r3, r7
   2ace8:	addlt	r2, r9, r6, lsr #1
   2acec:	cmp	r2, r3
   2acf0:	bcc	2acd4 <__assert_fail@plt+0x19028>
   2acf4:	ldr	r1, [r0, r2, lsl #2]
   2acf8:	mov	r0, #4
   2acfc:	cmp	r1, r4
   2ad00:	beq	2ae3c <__assert_fail@plt+0x19190>
   2ad04:	ldr	r7, [sp, #4]
   2ad08:	cmp	ip, #1
   2ad0c:	str	ip, [sp, #36]	; 0x24
   2ad10:	blt	2ada8 <__assert_fail@plt+0x190fc>
   2ad14:	lsl	r0, ip, #2
   2ad18:	str	ip, [sp, #32]
   2ad1c:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2ad20:	cmp	r0, #0
   2ad24:	str	r0, [sp, #40]	; 0x28
   2ad28:	beq	2aec4 <__assert_fail@plt+0x19218>
   2ad2c:	ldr	r2, [r5, #8]
   2ad30:	ldr	r1, [r5, #12]
   2ad34:	mov	r5, r0
   2ad38:	lsl	r2, r2, #2
   2ad3c:	bl	118ec <memcpy@plt>
   2ad40:	ldr	r1, [sp, #32]
   2ad44:	mov	r6, #0
   2ad48:	str	r6, [fp, #-32]	; 0xffffffe0
   2ad4c:	cmp	r1, #0
   2ad50:	beq	2adbc <__assert_fail@plt+0x19110>
   2ad54:	ldr	r0, [sp, #36]	; 0x24
   2ad58:	cmp	r0, #0
   2ad5c:	bne	2aed8 <__assert_fail@plt+0x1922c>
   2ad60:	str	r4, [r5]
   2ad64:	str	r9, [sp, #36]	; 0x24
   2ad68:	mov	r6, #0
   2ad6c:	cmp	r6, #0
   2ad70:	beq	2ade4 <__assert_fail@plt+0x19138>
   2ad74:	b	2ae9c <__assert_fail@plt+0x191f0>
   2ad78:	mov	r0, #4
   2ad7c:	str	r9, [sp, #36]	; 0x24
   2ad80:	str	r9, [sp, #32]
   2ad84:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2ad88:	cmp	r0, #0
   2ad8c:	str	r0, [sp, #40]	; 0x28
   2ad90:	beq	2ae70 <__assert_fail@plt+0x191c4>
   2ad94:	str	r4, [r0]
   2ad98:	mov	r0, #0
   2ad9c:	str	r0, [fp, #-32]	; 0xffffffe0
   2ada0:	b	2ade4 <__assert_fail@plt+0x19138>
   2ada4:	str	ip, [sp, #36]	; 0x24
   2ada8:	mov	r6, #0
   2adac:	str	r6, [sp, #36]	; 0x24
   2adb0:	str	r6, [sp, #32]
   2adb4:	str	r6, [sp, #40]	; 0x28
   2adb8:	str	r6, [fp, #-32]	; 0xffffffe0
   2adbc:	mov	r0, #4
   2adc0:	str	r9, [sp, #36]	; 0x24
   2adc4:	str	r9, [sp, #32]
   2adc8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2adcc:	cmp	r0, #0
   2add0:	str	r0, [sp, #40]	; 0x28
   2add4:	beq	2ae90 <__assert_fail@plt+0x191e4>
   2add8:	str	r4, [r0]
   2addc:	cmp	r6, #0
   2ade0:	bne	2ae9c <__assert_fail@plt+0x191f0>
   2ade4:	ldr	r1, [sp, #28]
   2ade8:	sub	r0, fp, #32
   2adec:	add	r2, sp, #32
   2adf0:	bl	2b110 <__assert_fail@plt+0x19464>
   2adf4:	ldr	r4, [sp, #24]
   2adf8:	ldr	r1, [r4, #100]	; 0x64
   2adfc:	str	r0, [r1, r7, lsl #2]
   2ae00:	ldr	r0, [sp, #40]	; 0x28
   2ae04:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2ae08:	ldr	r0, [r4, #100]	; 0x64
   2ae0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2ae10:	ldr	r0, [r0, r7, lsl #2]
   2ae14:	cmp	r1, #0
   2ae18:	mov	r2, r1
   2ae1c:	movwne	r2, #1
   2ae20:	clz	r0, r0
   2ae24:	lsr	r0, r0, #5
   2ae28:	ands	r0, r0, r2
   2ae2c:	ldr	r2, [sp, #20]
   2ae30:	movne	r2, r1
   2ae34:	str	r2, [sp, #20]
   2ae38:	ldr	lr, [sp, #16]
   2ae3c:	cmp	r0, #0
   2ae40:	cmpne	r0, #4
   2ae44:	bne	2afa4 <__assert_fail@plt+0x192f8>
   2ae48:	ldrb	r1, [r8, #20]
   2ae4c:	add	r0, r8, #24
   2ae50:	cmp	r1, #0
   2ae54:	bne	2ab34 <__assert_fail@plt+0x18e88>
   2ae58:	b	2afbc <__assert_fail@plt+0x19310>
   2ae5c:	mov	r0, #0
   2ae60:	mov	r6, #12
   2ae64:	str	r0, [sp, #32]
   2ae68:	str	r0, [sp, #36]	; 0x24
   2ae6c:	b	2ac18 <__assert_fail@plt+0x18f6c>
   2ae70:	mov	r0, #0
   2ae74:	mov	r1, #12
   2ae78:	str	r0, [sp, #32]
   2ae7c:	str	r0, [sp, #36]	; 0x24
   2ae80:	mov	r0, #12
   2ae84:	str	r1, [fp, #-32]	; 0xffffffe0
   2ae88:	str	r0, [sp, #20]
   2ae8c:	b	2aebc <__assert_fail@plt+0x19210>
   2ae90:	mov	r0, #0
   2ae94:	str	r0, [sp, #32]
   2ae98:	str	r0, [sp, #36]	; 0x24
   2ae9c:	clz	r0, r6
   2aea0:	lsr	r4, r0, #5
   2aea4:	ldr	r0, [sp, #40]	; 0x28
   2aea8:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2aeac:	cmp	r4, #0
   2aeb0:	movwne	r6, #12
   2aeb4:	str	r6, [sp, #20]
   2aeb8:	str	r6, [fp, #-32]	; 0xffffffe0
   2aebc:	mov	r0, #1
   2aec0:	b	2ae38 <__assert_fail@plt+0x1918c>
   2aec4:	mov	r0, #0
   2aec8:	mov	r6, #12
   2aecc:	str	r0, [sp, #32]
   2aed0:	str	r0, [sp, #36]	; 0x24
   2aed4:	b	2adb8 <__assert_fail@plt+0x1910c>
   2aed8:	cmp	r1, r0
   2aedc:	bne	2af08 <__assert_fail@plt+0x1925c>
   2aee0:	lsl	r0, r1, #1
   2aee4:	lsl	r1, r1, #3
   2aee8:	str	r0, [sp, #32]
   2aeec:	mov	r0, r5
   2aef0:	bl	1bd04 <__assert_fail@plt+0xa058>
   2aef4:	cmp	r0, #0
   2aef8:	beq	2af9c <__assert_fail@plt+0x192f0>
   2aefc:	str	r0, [sp, #40]	; 0x28
   2af00:	mov	r5, r0
   2af04:	ldr	r0, [sp, #36]	; 0x24
   2af08:	ldr	r1, [r5]
   2af0c:	cmp	r1, r4
   2af10:	ble	2af48 <__assert_fail@plt+0x1929c>
   2af14:	cmp	r0, #1
   2af18:	blt	2af78 <__assert_fail@plt+0x192cc>
   2af1c:	add	r1, r5, r0, lsl #2
   2af20:	add	r0, r0, #1
   2af24:	mov	r2, r1
   2af28:	ldr	r3, [r2, #-4]!
   2af2c:	sub	r0, r0, #1
   2af30:	cmp	r0, #1
   2af34:	str	r3, [r1]
   2af38:	mov	r1, r2
   2af3c:	bgt	2af28 <__assert_fail@plt+0x1927c>
   2af40:	sub	r0, r0, #1
   2af44:	b	2af78 <__assert_fail@plt+0x192cc>
   2af48:	add	r1, r5, r0, lsl #2
   2af4c:	ldr	r2, [r1, #-4]
   2af50:	cmp	r2, r4
   2af54:	ble	2af78 <__assert_fail@plt+0x192cc>
   2af58:	sub	r0, r0, #2
   2af5c:	str	r2, [r1]
   2af60:	sub	r0, r0, #1
   2af64:	ldr	r2, [r1, #-8]
   2af68:	sub	r1, r1, #4
   2af6c:	cmp	r2, r4
   2af70:	bgt	2af5c <__assert_fail@plt+0x192b0>
   2af74:	add	r0, r0, #2
   2af78:	str	r4, [r5, r0, lsl #2]
   2af7c:	ldr	r7, [sp, #4]
   2af80:	mov	r6, #0
   2af84:	ldr	r0, [sp, #36]	; 0x24
   2af88:	add	r0, r0, #1
   2af8c:	str	r0, [sp, #36]	; 0x24
   2af90:	cmp	r6, #0
   2af94:	beq	2ade4 <__assert_fail@plt+0x19138>
   2af98:	b	2ae9c <__assert_fail@plt+0x191f0>
   2af9c:	mov	r6, #0
   2afa0:	b	2ae9c <__assert_fail@plt+0x191f0>
   2afa4:	cmp	r0, #2
   2afa8:	beq	2ab24 <__assert_fail@plt+0x18e78>
   2afac:	ldr	r8, [sp, #20]
   2afb0:	mov	r0, r8
   2afb4:	sub	sp, fp, #28
   2afb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afbc:	mov	r8, #0
   2afc0:	mov	r0, r8
   2afc4:	sub	sp, fp, #28
   2afc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afd0:	add	fp, sp, #28
   2afd4:	sub	sp, sp, #4
   2afd8:	ldr	r4, [fp, #8]
   2afdc:	mov	r9, r3
   2afe0:	mov	r7, r2
   2afe4:	mov	r8, r1
   2afe8:	mov	sl, r0
   2afec:	mov	r5, #1
   2aff0:	ldr	r0, [r8, #4]
   2aff4:	cmp	r0, #1
   2aff8:	bge	2b018 <__assert_fail@plt+0x1936c>
   2affc:	b	2b05c <__assert_fail@plt+0x193b0>
   2b000:	add	r0, r0, r7, lsl #2
   2b004:	ldr	r0, [r0, #8]
   2b008:	ldr	r7, [r0]
   2b00c:	ldr	r0, [r8, #4]
   2b010:	cmp	r0, #1
   2b014:	blt	2b05c <__assert_fail@plt+0x193b0>
   2b018:	subs	r2, r0, #1
   2b01c:	ldr	r0, [r8, #8]
   2b020:	mov	ip, r4
   2b024:	mov	r1, #0
   2b028:	beq	2b04c <__assert_fail@plt+0x193a0>
   2b02c:	add	r3, r1, r2
   2b030:	lsr	r6, r3, #1
   2b034:	ldr	r4, [r0, r6, lsl #2]
   2b038:	cmp	r4, r7
   2b03c:	movge	r2, r6
   2b040:	addlt	r1, r5, r3, lsr #1
   2b044:	cmp	r1, r2
   2b048:	bcc	2b02c <__assert_fail@plt+0x19380>
   2b04c:	ldr	r0, [r0, r1, lsl #2]
   2b050:	mov	r4, ip
   2b054:	cmp	r0, r7
   2b058:	beq	2b0f8 <__assert_fail@plt+0x1944c>
   2b05c:	ldr	r0, [sl]
   2b060:	add	r1, r0, r7, lsl #3
   2b064:	ldrb	r1, [r1, #4]
   2b068:	cmp	r1, r4
   2b06c:	ldreq	r0, [r0, r7, lsl #3]
   2b070:	cmpeq	r0, r9
   2b074:	beq	2b0dc <__assert_fail@plt+0x19430>
   2b078:	mov	r0, r8
   2b07c:	mov	r1, r7
   2b080:	bl	27114 <__assert_fail@plt+0x15468>
   2b084:	cmp	r0, #0
   2b088:	beq	2b104 <__assert_fail@plt+0x19458>
   2b08c:	ldr	r0, [sl, #20]
   2b090:	add	r7, r7, r7, lsl #1
   2b094:	add	r1, r0, r7, lsl #2
   2b098:	ldr	r2, [r1, #4]
   2b09c:	cmp	r2, #2
   2b0a0:	beq	2b0b0 <__assert_fail@plt+0x19404>
   2b0a4:	cmp	r2, #0
   2b0a8:	bne	2b000 <__assert_fail@plt+0x19354>
   2b0ac:	b	2b0f8 <__assert_fail@plt+0x1944c>
   2b0b0:	ldr	r0, [r1, #8]
   2b0b4:	mov	r1, r8
   2b0b8:	mov	r3, r9
   2b0bc:	ldr	r2, [r0, #4]
   2b0c0:	mov	r0, sl
   2b0c4:	str	r4, [sp]
   2b0c8:	bl	2afcc <__assert_fail@plt+0x19320>
   2b0cc:	cmp	r0, #0
   2b0d0:	bne	2b0fc <__assert_fail@plt+0x19450>
   2b0d4:	ldr	r0, [sl, #20]
   2b0d8:	b	2b000 <__assert_fail@plt+0x19354>
   2b0dc:	cmp	r4, #9
   2b0e0:	bne	2b0f8 <__assert_fail@plt+0x1944c>
   2b0e4:	mov	r0, r8
   2b0e8:	mov	r1, r7
   2b0ec:	bl	27114 <__assert_fail@plt+0x15468>
   2b0f0:	cmp	r0, #0
   2b0f4:	beq	2b104 <__assert_fail@plt+0x19458>
   2b0f8:	mov	r0, #0
   2b0fc:	sub	sp, fp, #28
   2b100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b104:	mov	r0, #12
   2b108:	sub	sp, fp, #28
   2b10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b114:	add	fp, sp, #28
   2b118:	sub	sp, sp, #4
   2b11c:	ldr	sl, [r2, #4]
   2b120:	cmp	sl, #0
   2b124:	beq	2b360 <__assert_fail@plt+0x196b4>
   2b128:	mov	r7, r2
   2b12c:	mov	r9, r1
   2b130:	cmp	sl, #1
   2b134:	mov	r6, sl
   2b138:	blt	2b1ac <__assert_fail@plt+0x19500>
   2b13c:	ldr	r5, [r7, #8]
   2b140:	mov	r2, #0
   2b144:	cmp	sl, #4
   2b148:	mov	r6, sl
   2b14c:	bcc	2b194 <__assert_fail@plt+0x194e8>
   2b150:	mov	r1, #0
   2b154:	bic	r2, sl, #3
   2b158:	vdup.32	q8, r1
   2b15c:	mov	r3, r2
   2b160:	mov	r1, r5
   2b164:	vmov.32	d16[0], sl
   2b168:	vld1.32	{d18-d19}, [r1]!
   2b16c:	subs	r3, r3, #4
   2b170:	vadd.i32	q8, q9, q8
   2b174:	bne	2b168 <__assert_fail@plt+0x194bc>
   2b178:	vext.8	q9, q8, q8, #8
   2b17c:	cmp	sl, r2
   2b180:	vadd.i32	q8, q8, q9
   2b184:	vdup.32	q9, d16[1]
   2b188:	vadd.i32	q8, q8, q9
   2b18c:	vmov.32	r6, d16[0]
   2b190:	beq	2b1ac <__assert_fail@plt+0x19500>
   2b194:	add	r1, r5, r2, lsl #2
   2b198:	sub	r2, sl, r2
   2b19c:	ldr	r3, [r1], #4
   2b1a0:	subs	r2, r2, #1
   2b1a4:	add	r6, r3, r6
   2b1a8:	bne	2b19c <__assert_fail@plt+0x194f0>
   2b1ac:	ldr	r1, [r9, #68]	; 0x44
   2b1b0:	ldr	r2, [r9, #32]
   2b1b4:	str	r0, [sp]
   2b1b8:	and	r1, r1, r6
   2b1bc:	add	r3, r1, r1, lsl #1
   2b1c0:	ldr	r1, [r2, r3, lsl #2]
   2b1c4:	cmp	r1, #1
   2b1c8:	blt	2b23c <__assert_fail@plt+0x19590>
   2b1cc:	cmp	r7, #0
   2b1d0:	beq	2b23c <__assert_fail@plt+0x19590>
   2b1d4:	add	r2, r2, r3, lsl #2
   2b1d8:	sub	ip, sl, #1
   2b1dc:	mov	r5, #0
   2b1e0:	ldr	lr, [r2, #8]
   2b1e4:	b	2b218 <__assert_fail@plt+0x1956c>
   2b1e8:	mov	r3, ip
   2b1ec:	add	r2, r3, #1
   2b1f0:	cmp	r2, #1
   2b1f4:	blt	2b354 <__assert_fail@plt+0x196a8>
   2b1f8:	ldr	r2, [r7, #8]
   2b1fc:	ldr	r0, [r4, #12]
   2b200:	ldr	r2, [r2, r3, lsl #2]
   2b204:	ldr	r0, [r0, r3, lsl #2]
   2b208:	sub	r3, r3, #1
   2b20c:	cmp	r0, r2
   2b210:	beq	2b1ec <__assert_fail@plt+0x19540>
   2b214:	b	2b230 <__assert_fail@plt+0x19584>
   2b218:	ldr	r4, [lr, r5, lsl #2]
   2b21c:	ldr	r3, [r4]
   2b220:	cmp	r6, r3
   2b224:	ldreq	r3, [r4, #8]
   2b228:	cmpeq	r3, sl
   2b22c:	beq	2b1e8 <__assert_fail@plt+0x1953c>
   2b230:	add	r5, r5, #1
   2b234:	cmp	r5, r1
   2b238:	blt	2b218 <__assert_fail@plt+0x1956c>
   2b23c:	mov	r0, #56	; 0x38
   2b240:	mov	r1, #1
   2b244:	bl	1b90c <__assert_fail@plt+0x9c60>
   2b248:	cmp	r0, #0
   2b24c:	beq	2b394 <__assert_fail@plt+0x196e8>
   2b250:	mov	r4, r0
   2b254:	ldr	r0, [r7, #4]
   2b258:	add	sl, r4, #4
   2b25c:	cmp	r0, #1
   2b260:	str	r0, [r4, #8]
   2b264:	blt	2b328 <__assert_fail@plt+0x1967c>
   2b268:	str	r0, [r4, #4]
   2b26c:	lsl	r0, r0, #2
   2b270:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2b274:	cmp	r0, #0
   2b278:	str	r0, [r4, #12]
   2b27c:	beq	2b380 <__assert_fail@plt+0x196d4>
   2b280:	ldmib	r7, {r5, r7}
   2b284:	lsl	r2, r5, #2
   2b288:	mov	r1, r7
   2b28c:	bl	118ec <memcpy@plt>
   2b290:	cmp	r5, #1
   2b294:	str	sl, [r4, #40]	; 0x28
   2b298:	blt	2b33c <__assert_fail@plt+0x19690>
   2b29c:	ldr	sl, [r9]
   2b2a0:	movw	ip, #65280	; 0xff00
   2b2a4:	mov	lr, #32
   2b2a8:	movt	ip, #3
   2b2ac:	add	r2, ip, #255	; 0xff
   2b2b0:	ldr	r0, [r7]
   2b2b4:	add	r1, sl, r0, lsl #3
   2b2b8:	ldr	r0, [r1, #4]!
   2b2bc:	and	r3, r0, r2
   2b2c0:	cmp	r3, #1
   2b2c4:	beq	2b318 <__assert_fail@plt+0x1966c>
   2b2c8:	ldrb	r8, [r4, #52]	; 0x34
   2b2cc:	and	r3, lr, r0, lsr #15
   2b2d0:	uxtb	r0, r0
   2b2d4:	cmp	r0, #12
   2b2d8:	orr	r3, r8, r3
   2b2dc:	strb	r3, [r4, #52]	; 0x34
   2b2e0:	beq	2b310 <__assert_fail@plt+0x19664>
   2b2e4:	cmp	r0, #4
   2b2e8:	beq	2b2fc <__assert_fail@plt+0x19650>
   2b2ec:	cmp	r0, #2
   2b2f0:	bne	2b304 <__assert_fail@plt+0x19658>
   2b2f4:	orr	r0, r3, #16
   2b2f8:	b	2b314 <__assert_fail@plt+0x19668>
   2b2fc:	orr	r0, r3, #64	; 0x40
   2b300:	b	2b314 <__assert_fail@plt+0x19668>
   2b304:	ldr	r0, [r1]
   2b308:	tst	r0, ip
   2b30c:	beq	2b318 <__assert_fail@plt+0x1966c>
   2b310:	orr	r0, r3, #128	; 0x80
   2b314:	strb	r0, [r4, #52]	; 0x34
   2b318:	add	r7, r7, #4
   2b31c:	subs	r5, r5, #1
   2b320:	bne	2b2b0 <__assert_fail@plt+0x19604>
   2b324:	b	2b33c <__assert_fail@plt+0x19690>
   2b328:	mov	r0, #0
   2b32c:	str	r0, [sl]
   2b330:	str	r0, [sl, #4]
   2b334:	str	r0, [sl, #8]
   2b338:	str	sl, [r4, #40]	; 0x28
   2b33c:	mov	r0, r9
   2b340:	mov	r1, r4
   2b344:	mov	r2, r6
   2b348:	bl	27c20 <__assert_fail@plt+0x15f74>
   2b34c:	cmp	r0, #0
   2b350:	bne	2b374 <__assert_fail@plt+0x196c8>
   2b354:	mov	r0, r4
   2b358:	sub	sp, fp, #28
   2b35c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b360:	mov	r4, #0
   2b364:	str	r4, [r0]
   2b368:	mov	r0, r4
   2b36c:	sub	sp, fp, #28
   2b370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b374:	mov	r0, r4
   2b378:	bl	211b0 <__assert_fail@plt+0xf504>
   2b37c:	b	2b394 <__assert_fail@plt+0x196e8>
   2b380:	mov	r0, #0
   2b384:	str	r0, [r4, #4]
   2b388:	str	r0, [r4, #8]
   2b38c:	mov	r0, r4
   2b390:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2b394:	ldr	r1, [sp]
   2b398:	mov	r0, #12
   2b39c:	mov	r4, #0
   2b3a0:	str	r0, [r1]
   2b3a4:	mov	r0, r4
   2b3a8:	sub	sp, fp, #28
   2b3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2b3b4:	add	fp, sp, #24
   2b3b8:	ldr	lr, [r0]
   2b3bc:	add	r7, lr, r1, lsl #3
   2b3c0:	ldrb	r9, [r7, #4]
   2b3c4:	cmp	r9, #7
   2b3c8:	beq	2b5ac <__assert_fail@plt+0x19900>
   2b3cc:	ldr	ip, [r2, #80]	; 0x50
   2b3d0:	mov	r6, #1
   2b3d4:	cmp	ip, #1
   2b3d8:	beq	2b414 <__assert_fail@plt+0x19768>
   2b3dc:	ldr	r5, [r2, #28]
   2b3e0:	add	r7, r3, #1
   2b3e4:	cmp	r7, r5
   2b3e8:	bge	2b414 <__assert_fail@plt+0x19768>
   2b3ec:	ldr	r6, [r2, #8]
   2b3f0:	add	r7, r6, r3, lsl #2
   2b3f4:	mov	r6, #1
   2b3f8:	ldr	r4, [r7, r6, lsl #2]
   2b3fc:	cmn	r4, #1
   2b400:	bne	2b414 <__assert_fail@plt+0x19768>
   2b404:	add	r6, r6, #1
   2b408:	add	r4, r3, r6
   2b40c:	cmp	r4, r5
   2b410:	blt	2b3f8 <__assert_fail@plt+0x1974c>
   2b414:	mov	r8, #0
   2b418:	cmp	r9, #5
   2b41c:	bne	2b464 <__assert_fail@plt+0x197b8>
   2b420:	cmp	r6, #2
   2b424:	blt	2b590 <__assert_fail@plt+0x198e4>
   2b428:	ldr	r0, [r0, #128]	; 0x80
   2b42c:	tst	r0, #64	; 0x40
   2b430:	bne	2b444 <__assert_fail@plt+0x19798>
   2b434:	ldr	r1, [r2, #4]
   2b438:	ldrb	r1, [r1, r3]
   2b43c:	cmp	r1, #10
   2b440:	beq	2b590 <__assert_fail@plt+0x198e4>
   2b444:	tst	r0, #128	; 0x80
   2b448:	beq	2b58c <__assert_fail@plt+0x198e0>
   2b44c:	ldr	r0, [r2, #4]
   2b450:	ldrb	r0, [r0, r3]
   2b454:	cmp	r0, #0
   2b458:	movne	r8, r6
   2b45c:	mov	r0, r8
   2b460:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b464:	cmp	r9, #6
   2b468:	bne	2b590 <__assert_fail@plt+0x198e4>
   2b46c:	cmp	r6, #2
   2b470:	blt	2b590 <__assert_fail@plt+0x198e4>
   2b474:	ldr	r7, [lr, r1, lsl #3]
   2b478:	ldr	r0, [r7, #32]
   2b47c:	cmp	r0, #0
   2b480:	bne	2b49c <__assert_fail@plt+0x197f0>
   2b484:	ldr	r1, [r7, #36]	; 0x24
   2b488:	cmp	r1, #0
   2b48c:	bne	2b49c <__assert_fail@plt+0x197f0>
   2b490:	ldr	r1, [r7, #20]
   2b494:	cmp	r1, #0
   2b498:	beq	2b598 <__assert_fail@plt+0x198ec>
   2b49c:	cmp	ip, #1
   2b4a0:	bne	2b4bc <__assert_fail@plt+0x19810>
   2b4a4:	ldr	r1, [r2, #4]
   2b4a8:	ldrb	r5, [r1, r3]
   2b4ac:	ldr	r1, [r7, #20]
   2b4b0:	cmp	r1, #1
   2b4b4:	bge	2b4d0 <__assert_fail@plt+0x19824>
   2b4b8:	b	2b4f0 <__assert_fail@plt+0x19844>
   2b4bc:	ldr	r1, [r2, #8]
   2b4c0:	ldr	r5, [r1, r3, lsl #2]
   2b4c4:	ldr	r1, [r7, #20]
   2b4c8:	cmp	r1, #1
   2b4cc:	blt	2b4f0 <__assert_fail@plt+0x19844>
   2b4d0:	ldr	r2, [r7]
   2b4d4:	mov	r3, #0
   2b4d8:	ldr	r4, [r2, r3, lsl #2]
   2b4dc:	cmp	r5, r4
   2b4e0:	beq	2b56c <__assert_fail@plt+0x198c0>
   2b4e4:	add	r3, r3, #1
   2b4e8:	cmp	r3, r1
   2b4ec:	blt	2b4d8 <__assert_fail@plt+0x1982c>
   2b4f0:	ldr	r1, [r7, #36]	; 0x24
   2b4f4:	cmp	r1, #1
   2b4f8:	blt	2b52c <__assert_fail@plt+0x19880>
   2b4fc:	mov	r4, #0
   2b500:	ldr	r0, [r7, #12]
   2b504:	ldr	r1, [r0, r4, lsl #2]
   2b508:	mov	r0, r5
   2b50c:	bl	11850 <iswctype@plt>
   2b510:	cmp	r0, #0
   2b514:	bne	2b56c <__assert_fail@plt+0x198c0>
   2b518:	ldr	r0, [r7, #36]	; 0x24
   2b51c:	add	r4, r4, #1
   2b520:	cmp	r4, r0
   2b524:	blt	2b500 <__assert_fail@plt+0x19854>
   2b528:	ldr	r0, [r7, #32]
   2b52c:	cmp	r0, #1
   2b530:	blt	2b564 <__assert_fail@plt+0x198b8>
   2b534:	ldr	r1, [r7, #4]
   2b538:	mov	r2, #0
   2b53c:	ldr	r3, [r1, r2, lsl #2]
   2b540:	cmp	r3, r5
   2b544:	bhi	2b558 <__assert_fail@plt+0x198ac>
   2b548:	ldr	r3, [r7, #8]
   2b54c:	ldr	r3, [r3, r2, lsl #2]
   2b550:	cmp	r5, r3
   2b554:	bls	2b56c <__assert_fail@plt+0x198c0>
   2b558:	add	r2, r2, #1
   2b55c:	cmp	r2, r0
   2b560:	blt	2b53c <__assert_fail@plt+0x19890>
   2b564:	mov	r0, #0
   2b568:	b	2b570 <__assert_fail@plt+0x198c4>
   2b56c:	mov	r0, r6
   2b570:	ldrb	r1, [r7, #16]
   2b574:	tst	r1, #1
   2b578:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b57c:	cmp	r0, #0
   2b580:	bgt	2b590 <__assert_fail@plt+0x198e4>
   2b584:	cmp	r6, #1
   2b588:	movle	r6, #1
   2b58c:	mov	r8, r6
   2b590:	mov	r0, r8
   2b594:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b598:	mov	r5, #0
   2b59c:	ldr	r1, [r7, #20]
   2b5a0:	cmp	r1, #1
   2b5a4:	bge	2b4d0 <__assert_fail@plt+0x19824>
   2b5a8:	b	2b4f0 <__assert_fail@plt+0x19844>
   2b5ac:	ldr	r0, [r2, #4]
   2b5b0:	mov	r8, #0
   2b5b4:	ldrb	r6, [r0, r3]
   2b5b8:	cmp	r6, #194	; 0xc2
   2b5bc:	bcc	2b590 <__assert_fail@plt+0x198e4>
   2b5c0:	ldr	r1, [r2, #48]	; 0x30
   2b5c4:	add	r2, r3, #2
   2b5c8:	cmp	r2, r1
   2b5cc:	bgt	2b590 <__assert_fail@plt+0x198e4>
   2b5d0:	add	r0, r0, r3
   2b5d4:	cmp	r6, #223	; 0xdf
   2b5d8:	ldrb	r7, [r0, #1]
   2b5dc:	bhi	2b600 <__assert_fail@plt+0x19954>
   2b5e0:	mov	r8, #2
   2b5e4:	cmp	r7, #191	; 0xbf
   2b5e8:	sxtb	r0, r7
   2b5ec:	movwhi	r8, #0
   2b5f0:	cmn	r0, #1
   2b5f4:	movwgt	r8, #0
   2b5f8:	mov	r0, r8
   2b5fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b600:	cmp	r6, #239	; 0xef
   2b604:	bhi	2b620 <__assert_fail@plt+0x19974>
   2b608:	mov	r2, #3
   2b60c:	cmp	r6, #224	; 0xe0
   2b610:	bne	2b67c <__assert_fail@plt+0x199d0>
   2b614:	cmp	r7, #160	; 0xa0
   2b618:	bcc	2b590 <__assert_fail@plt+0x198e4>
   2b61c:	b	2b67c <__assert_fail@plt+0x199d0>
   2b620:	cmp	r6, #247	; 0xf7
   2b624:	bhi	2b640 <__assert_fail@plt+0x19994>
   2b628:	mov	r2, #4
   2b62c:	cmp	r6, #240	; 0xf0
   2b630:	bne	2b67c <__assert_fail@plt+0x199d0>
   2b634:	cmp	r7, #144	; 0x90
   2b638:	bcc	2b590 <__assert_fail@plt+0x198e4>
   2b63c:	b	2b67c <__assert_fail@plt+0x199d0>
   2b640:	cmp	r6, #251	; 0xfb
   2b644:	bhi	2b660 <__assert_fail@plt+0x199b4>
   2b648:	mov	r2, #5
   2b64c:	cmp	r6, #248	; 0xf8
   2b650:	bne	2b67c <__assert_fail@plt+0x199d0>
   2b654:	cmp	r7, #136	; 0x88
   2b658:	bcc	2b590 <__assert_fail@plt+0x198e4>
   2b65c:	b	2b67c <__assert_fail@plt+0x199d0>
   2b660:	cmp	r6, #253	; 0xfd
   2b664:	bhi	2b590 <__assert_fail@plt+0x198e4>
   2b668:	mov	r2, #6
   2b66c:	cmp	r6, #252	; 0xfc
   2b670:	bne	2b67c <__assert_fail@plt+0x199d0>
   2b674:	cmp	r7, #132	; 0x84
   2b678:	bcc	2b590 <__assert_fail@plt+0x198e4>
   2b67c:	add	r3, r2, r3
   2b680:	cmp	r3, r1
   2b684:	bgt	2b590 <__assert_fail@plt+0x198e4>
   2b688:	mov	r1, #1
   2b68c:	ldrb	r3, [r0, r1]
   2b690:	sxtb	r7, r3
   2b694:	cmn	r7, #1
   2b698:	bgt	2b590 <__assert_fail@plt+0x198e4>
   2b69c:	cmp	r3, #191	; 0xbf
   2b6a0:	bhi	2b590 <__assert_fail@plt+0x198e4>
   2b6a4:	add	r1, r1, #1
   2b6a8:	cmp	r1, r2
   2b6ac:	movcs	r0, r2
   2b6b0:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b6b4:	ldrb	r3, [r0, r1]
   2b6b8:	sxtb	r7, r3
   2b6bc:	cmn	r7, #1
   2b6c0:	ble	2b69c <__assert_fail@plt+0x199f0>
   2b6c4:	b	2b590 <__assert_fail@plt+0x198e4>
   2b6c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2b6cc:	add	fp, sp, #24
   2b6d0:	ldr	r4, [r1, #4]
   2b6d4:	mov	r6, r0
   2b6d8:	mvn	r0, #0
   2b6dc:	mov	r8, #0
   2b6e0:	uxtab	r3, r0, r4
   2b6e4:	cmp	r3, #6
   2b6e8:	bhi	2b894 <__assert_fail@plt+0x19be8>
   2b6ec:	ldr	r0, [r6, #4]
   2b6f0:	mov	r9, r1
   2b6f4:	ldrb	r1, [r0, r2]
   2b6f8:	add	r7, pc, #4
   2b6fc:	sxtb	r0, r1
   2b700:	ldr	pc, [r7, r3, lsl #2]
   2b704:	andeq	fp, r2, r0, lsr #14
   2b708:	muleq	r2, r4, r8
   2b70c:	andeq	fp, r2, r4, lsr r7
   2b710:	muleq	r2, r4, r8
   2b714:	andeq	fp, r2, ip, asr r7
   2b718:	muleq	r2, r4, r8
   2b71c:	andeq	fp, r2, r4, asr r7
   2b720:	ldrb	r3, [r9]
   2b724:	uxtb	r7, r0
   2b728:	cmp	r3, r7
   2b72c:	beq	2b77c <__assert_fail@plt+0x19ad0>
   2b730:	b	2b894 <__assert_fail@plt+0x19be8>
   2b734:	ldr	r3, [r9]
   2b738:	ubfx	r7, r1, #5, #3
   2b73c:	mov	r5, #1
   2b740:	ldr	r3, [r3, r7, lsl #2]
   2b744:	and	r7, r1, #31
   2b748:	tst	r3, r5, lsl r7
   2b74c:	bne	2b77c <__assert_fail@plt+0x19ad0>
   2b750:	b	2b894 <__assert_fail@plt+0x19be8>
   2b754:	cmp	r0, #0
   2b758:	blt	2b894 <__assert_fail@plt+0x19be8>
   2b75c:	cmp	r1, #0
   2b760:	beq	2b828 <__assert_fail@plt+0x19b7c>
   2b764:	cmp	r1, #10
   2b768:	bne	2b77c <__assert_fail@plt+0x19ad0>
   2b76c:	ldr	r3, [r6, #84]	; 0x54
   2b770:	ldrb	r3, [r3, #128]	; 0x80
   2b774:	tst	r3, #64	; 0x40
   2b778:	beq	2b894 <__assert_fail@plt+0x19be8>
   2b77c:	movw	r3, #65280	; 0xff00
   2b780:	movt	r3, #3
   2b784:	tst	r4, r3
   2b788:	beq	2b7ec <__assert_fail@plt+0x19b40>
   2b78c:	cmn	r2, #1
   2b790:	ble	2b7cc <__assert_fail@plt+0x19b20>
   2b794:	ldr	r3, [r6, #48]	; 0x30
   2b798:	cmp	r3, r2
   2b79c:	beq	2b8b4 <__assert_fail@plt+0x19c08>
   2b7a0:	ldr	r3, [r6, #80]	; 0x50
   2b7a4:	cmp	r3, #2
   2b7a8:	blt	2b7f8 <__assert_fail@plt+0x19b4c>
   2b7ac:	ldr	r0, [r6, #8]
   2b7b0:	ldr	r7, [r0, r2, lsl #2]
   2b7b4:	cmn	r7, #1
   2b7b8:	bne	2b83c <__assert_fail@plt+0x19b90>
   2b7bc:	sub	r1, r2, #1
   2b7c0:	cmp	r2, #0
   2b7c4:	mov	r2, r1
   2b7c8:	bgt	2b7b0 <__assert_fail@plt+0x19b04>
   2b7cc:	ldr	r1, [r6, #60]	; 0x3c
   2b7d0:	and	r0, r1, #1
   2b7d4:	tst	r4, #1024	; 0x400
   2b7d8:	eor	r2, r0, #1
   2b7dc:	beq	2b870 <__assert_fail@plt+0x19bc4>
   2b7e0:	cmp	r0, #0
   2b7e4:	beq	2b894 <__assert_fail@plt+0x19be8>
   2b7e8:	b	2b870 <__assert_fail@plt+0x19bc4>
   2b7ec:	mov	r8, #1
   2b7f0:	mov	r0, r8
   2b7f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b7f8:	ldr	r2, [r6, #68]	; 0x44
   2b7fc:	ubfx	r3, r1, #5, #3
   2b800:	and	r7, r1, #31
   2b804:	mov	r1, #1
   2b808:	ldr	r3, [r2, r3, lsl #2]
   2b80c:	mov	r2, #0
   2b810:	tst	r3, r1, lsl r7
   2b814:	bne	2b870 <__assert_fail@plt+0x19bc4>
   2b818:	mov	r1, #0
   2b81c:	cmp	r0, #10
   2b820:	beq	2b854 <__assert_fail@plt+0x19ba8>
   2b824:	b	2b860 <__assert_fail@plt+0x19bb4>
   2b828:	ldr	r3, [r6, #84]	; 0x54
   2b82c:	ldrb	r3, [r3, #128]	; 0x80
   2b830:	tst	r3, #128	; 0x80
   2b834:	bne	2b894 <__assert_fail@plt+0x19be8>
   2b838:	b	2b77c <__assert_fail@plt+0x19ad0>
   2b83c:	ldrb	r0, [r6, #78]	; 0x4e
   2b840:	cmp	r0, #0
   2b844:	bne	2b8d4 <__assert_fail@plt+0x19c28>
   2b848:	mov	r1, #0
   2b84c:	cmp	r7, #10
   2b850:	bne	2b860 <__assert_fail@plt+0x19bb4>
   2b854:	ldrb	r1, [r6, #77]	; 0x4d
   2b858:	cmp	r1, #0
   2b85c:	movwne	r1, #2
   2b860:	and	r0, r1, #1
   2b864:	tst	r4, #1024	; 0x400
   2b868:	eor	r2, r0, #1
   2b86c:	bne	2b7e0 <__assert_fail@plt+0x19b34>
   2b870:	ldr	r0, [r9, #4]
   2b874:	cmp	r2, #0
   2b878:	bne	2b884 <__assert_fail@plt+0x19bd8>
   2b87c:	ands	r2, r0, #2048	; 0x800
   2b880:	bne	2b894 <__assert_fail@plt+0x19be8>
   2b884:	tst	r1, #2
   2b888:	bne	2b89c <__assert_fail@plt+0x19bf0>
   2b88c:	ands	r2, r0, #8192	; 0x2000
   2b890:	beq	2b89c <__assert_fail@plt+0x19bf0>
   2b894:	mov	r0, r8
   2b898:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b89c:	and	r0, r0, #32768	; 0x8000
   2b8a0:	mov	r2, #1
   2b8a4:	and	r1, r1, #8
   2b8a8:	eor	r0, r2, r0, lsr #15
   2b8ac:	orr	r0, r0, r1, lsr #3
   2b8b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b8b4:	ldr	r0, [r6, #88]	; 0x58
   2b8b8:	and	r0, r0, #2
   2b8bc:	eor	r1, r0, #10
   2b8c0:	and	r0, r1, #1
   2b8c4:	tst	r4, #1024	; 0x400
   2b8c8:	eor	r2, r0, #1
   2b8cc:	bne	2b7e0 <__assert_fail@plt+0x19b34>
   2b8d0:	b	2b870 <__assert_fail@plt+0x19bc4>
   2b8d4:	mov	r0, r7
   2b8d8:	bl	11afc <iswalnum@plt>
   2b8dc:	mov	r1, #1
   2b8e0:	mov	r2, #0
   2b8e4:	cmp	r7, #95	; 0x5f
   2b8e8:	beq	2b870 <__assert_fail@plt+0x19bc4>
   2b8ec:	cmp	r0, #0
   2b8f0:	beq	2b848 <__assert_fail@plt+0x19b9c>
   2b8f4:	b	2b870 <__assert_fail@plt+0x19bc4>
   2b8f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b8fc:	add	fp, sp, #28
   2b900:	sub	sp, sp, #4
   2b904:	vpush	{d8-d9}
   2b908:	sub	sp, sp, #216	; 0xd8
   2b90c:	sub	sp, sp, #14336	; 0x3800
   2b910:	sub	lr, fp, #1024	; 0x400
   2b914:	mov	r5, #0
   2b918:	mov	sl, r0
   2b91c:	vmov.i32	q4, #0	; 0x00000000
   2b920:	str	r1, [sp, #88]	; 0x58
   2b924:	sub	r2, lr, #56	; 0x38
   2b928:	str	r5, [r1, #44]	; 0x2c
   2b92c:	str	r5, [r1, #48]	; 0x30
   2b930:	mov	r0, r2
   2b934:	vst1.64	{d8-d9}, [r0]!
   2b938:	vst1.64	{d8-d9}, [r0]
   2b93c:	ldr	r0, [r1, #8]
   2b940:	cmp	r0, #1
   2b944:	blt	2d120 <__assert_fail@plt+0x1b474>
   2b948:	add	r0, sp, #160	; 0xa0
   2b94c:	mov	r5, #0
   2b950:	str	sl, [sp, #16]
   2b954:	add	r0, r0, #28
   2b958:	str	r0, [sp, #12]
   2b95c:	add	r0, sl, #112	; 0x70
   2b960:	str	r0, [sp, #4]
   2b964:	add	r0, sl, #96	; 0x60
   2b968:	str	r0, [sp]
   2b96c:	add	r0, r2, #16
   2b970:	str	r0, [sp, #8]
   2b974:	mov	r0, #0
   2b978:	str	r0, [sp, #112]	; 0x70
   2b97c:	ldr	r0, [sp, #88]	; 0x58
   2b980:	ldr	r1, [sp, #112]	; 0x70
   2b984:	ldr	r3, [sl]
   2b988:	ldr	r0, [r0, #12]
   2b98c:	ldr	r2, [r0, r1, lsl #2]
   2b990:	add	r0, r3, r2, lsl #3
   2b994:	ldr	r1, [r0, #4]
   2b998:	uxtb	ip, r1
   2b99c:	cmp	ip, #1
   2b9a0:	bne	2baa8 <__assert_fail@plt+0x19dfc>
   2b9a4:	mov	r8, r2
   2b9a8:	ldrb	r2, [r3, r2, lsl #3]
   2b9ac:	sub	lr, fp, #1024	; 0x400
   2b9b0:	mov	r0, r3
   2b9b4:	mov	r4, r5
   2b9b8:	mov	r5, #1
   2b9bc:	sub	r7, lr, #56	; 0x38
   2b9c0:	mov	r6, r7
   2b9c4:	ubfx	r3, r2, #5, #3
   2b9c8:	ldr	sl, [sp, #16]
   2b9cc:	and	r2, r2, #31
   2b9d0:	ldr	r7, [r7, r3, lsl #2]
   2b9d4:	orr	r2, r7, r5, lsl r2
   2b9d8:	mov	r5, r4
   2b9dc:	str	r2, [r6, r3, lsl #2]
   2b9e0:	movw	r2, #65280	; 0xff00
   2b9e4:	movt	r2, #3
   2b9e8:	ands	r2, r1, r2
   2b9ec:	mov	r2, r0
   2b9f0:	beq	2be00 <__assert_fail@plt+0x1a154>
   2b9f4:	tst	r1, #8192	; 0x2000
   2b9f8:	beq	2ba28 <__assert_fail@plt+0x19d7c>
   2b9fc:	mov	r0, r2
   2ba00:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   2ba04:	sub	lr, fp, #1024	; 0x400
   2ba08:	sub	r3, lr, #56	; 0x38
   2ba0c:	vst1.64	{d8-d9}, [r3]!
   2ba10:	vst1.64	{d8-d9}, [r3]
   2ba14:	tst	r2, #1024	; 0x400
   2ba18:	beq	2c6d4 <__assert_fail@plt+0x1aa28>
   2ba1c:	mov	r2, #1024	; 0x400
   2ba20:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2ba24:	mov	r2, r0
   2ba28:	tst	r1, #32768	; 0x8000
   2ba2c:	bne	2bba4 <__assert_fail@plt+0x19ef8>
   2ba30:	tst	r1, #1024	; 0x400
   2ba34:	bne	2bb8c <__assert_fail@plt+0x19ee0>
   2ba38:	tst	r1, #2048	; 0x800
   2ba3c:	beq	2be00 <__assert_fail@plt+0x1a154>
   2ba40:	tst	r1, #4194304	; 0x400000
   2ba44:	beq	2ba50 <__assert_fail@plt+0x19da4>
   2ba48:	cmp	ip, #1
   2ba4c:	beq	2bba4 <__assert_fail@plt+0x19ef8>
   2ba50:	ldr	r1, [sl, #92]	; 0x5c
   2ba54:	mov	r0, r2
   2ba58:	cmp	r1, #1
   2ba5c:	ble	2bd88 <__assert_fail@plt+0x1a0dc>
   2ba60:	ldr	r1, [sl, #60]	; 0x3c
   2ba64:	ldr	r2, [sp]
   2ba68:	sub	lr, fp, #1024	; 0x400
   2ba6c:	vld1.32	{d16-d17}, [r2]
   2ba70:	vld1.32	{d18-d19}, [r1]!
   2ba74:	sub	r2, lr, #56	; 0x38
   2ba78:	vld1.64	{d20-d21}, [r2]
   2ba7c:	vand	q8, q9, q8
   2ba80:	vbic	q9, q10, q8
   2ba84:	vst1.64	{d18-d19}, [r2]
   2ba88:	ldr	r2, [sp, #4]
   2ba8c:	vld1.32	{d20-d21}, [r1]
   2ba90:	ldr	r1, [sp, #8]
   2ba94:	vld1.32	{d16-d17}, [r2]
   2ba98:	vld1.32	{d22-d23}, [r1]
   2ba9c:	vand	q8, q10, q8
   2baa0:	vbic	q8, q11, q8
   2baa4:	b	2bdb8 <__assert_fail@plt+0x1a10c>
   2baa8:	mov	r0, r3
   2baac:	mov	r8, r2
   2bab0:	cmp	ip, #7
   2bab4:	beq	2bafc <__assert_fail@plt+0x19e50>
   2bab8:	cmp	ip, #5
   2babc:	beq	2bb48 <__assert_fail@plt+0x19e9c>
   2bac0:	cmp	ip, #3
   2bac4:	bne	2c6d4 <__assert_fail@plt+0x1aa28>
   2bac8:	ldr	r2, [r0, r8, lsl #3]
   2bacc:	sub	lr, fp, #1024	; 0x400
   2bad0:	sub	r3, lr, #56	; 0x38
   2bad4:	vld1.64	{d16-d17}, [r3]
   2bad8:	vld1.32	{d18-d19}, [r2]!
   2badc:	vorr	q8, q8, q9
   2bae0:	vst1.64	{d16-d17}, [r3]
   2bae4:	vld1.32	{d16-d17}, [r2]
   2bae8:	ldr	r2, [sp, #8]
   2baec:	vld1.32	{d18-d19}, [r2]
   2baf0:	vorr	q8, q9, q8
   2baf4:	vst1.32	{d16-d17}, [r2]
   2baf8:	b	2b9e0 <__assert_fail@plt+0x19d34>
   2bafc:	mvn	r2, #0
   2bb00:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2bb04:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2bb08:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2bb0c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2bb10:	ldr	r3, [sl, #128]	; 0x80
   2bb14:	and	r2, r3, #128	; 0x80
   2bb18:	ands	r3, r3, #64	; 0x40
   2bb1c:	beq	2bb28 <__assert_fail@plt+0x19e7c>
   2bb20:	cmp	r2, #0
   2bb24:	beq	2b9e0 <__assert_fail@plt+0x19d34>
   2bb28:	cmp	r3, #0
   2bb2c:	mvn	r3, #1
   2bb30:	movweq	r3, #64510	; 0xfbfe
   2bb34:	movteq	r3, #65535	; 0xffff
   2bb38:	cmp	r2, #0
   2bb3c:	mvneq	r3, #1024	; 0x400
   2bb40:	str	r3, [fp, #-1080]	; 0xfffffbc8
   2bb44:	b	2b9e0 <__assert_fail@plt+0x19d34>
   2bb48:	ldr	r2, [sl, #92]	; 0x5c
   2bb4c:	cmp	r2, #2
   2bb50:	blt	2bbb0 <__assert_fail@plt+0x19f04>
   2bb54:	ldr	r2, [sl, #60]	; 0x3c
   2bb58:	sub	lr, fp, #1024	; 0x400
   2bb5c:	sub	r3, lr, #56	; 0x38
   2bb60:	vld1.64	{d16-d17}, [r3]
   2bb64:	vld1.32	{d18-d19}, [r2]!
   2bb68:	vorr	q8, q8, q9
   2bb6c:	vst1.64	{d16-d17}, [r3]
   2bb70:	vld1.32	{d18-d19}, [r2]
   2bb74:	ldr	r2, [sp, #8]
   2bb78:	vld1.32	{d20-d21}, [r2]
   2bb7c:	vorr	q9, q10, q9
   2bb80:	vst1.32	{d18-d19}, [r2]
   2bb84:	vmov.32	r2, d16[0]
   2bb88:	b	2bbd4 <__assert_fail@plt+0x19f28>
   2bb8c:	mov	r0, r2
   2bb90:	movw	r2, #255	; 0xff
   2bb94:	movt	r2, #64	; 0x40
   2bb98:	and	r2, r1, r2
   2bb9c:	cmp	r2, #1
   2bba0:	bne	2bc00 <__assert_fail@plt+0x19f54>
   2bba4:	sub	lr, fp, #1024	; 0x400
   2bba8:	sub	r0, lr, #56	; 0x38
   2bbac:	b	2c6cc <__assert_fail@plt+0x1aa20>
   2bbb0:	mvn	r2, #0
   2bbb4:	str	r2, [fp, #-1052]	; 0xfffffbe4
   2bbb8:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2bbbc:	str	r2, [fp, #-1060]	; 0xfffffbdc
   2bbc0:	str	r2, [fp, #-1064]	; 0xfffffbd8
   2bbc4:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2bbc8:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2bbcc:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2bbd0:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2bbd4:	ldr	r3, [sl, #128]	; 0x80
   2bbd8:	ands	r7, r3, #64	; 0x40
   2bbdc:	and	r3, r3, #128	; 0x80
   2bbe0:	biceq	r2, r2, #1024	; 0x400
   2bbe4:	beq	2bbf0 <__assert_fail@plt+0x19f44>
   2bbe8:	cmp	r3, #0
   2bbec:	beq	2b9e0 <__assert_fail@plt+0x19d34>
   2bbf0:	cmp	r3, #0
   2bbf4:	bicne	r2, r2, #1
   2bbf8:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2bbfc:	b	2b9e0 <__assert_fail@plt+0x19d34>
   2bc00:	ldr	r2, [sl, #92]	; 0x5c
   2bc04:	cmp	r2, #1
   2bc08:	ble	2bca0 <__assert_fail@plt+0x19ff4>
   2bc0c:	ldr	r2, [sl, #60]	; 0x3c
   2bc10:	ldr	r3, [sp]
   2bc14:	sub	lr, fp, #1024	; 0x400
   2bc18:	vld1.32	{d16-d17}, [r3]
   2bc1c:	vld1.32	{d18-d19}, [r2]!
   2bc20:	sub	r3, lr, #56	; 0x38
   2bc24:	vld1.64	{d20-d21}, [r3]
   2bc28:	vorn	q8, q8, q9
   2bc2c:	vand	q8, q10, q8
   2bc30:	vst1.64	{d16-d17}, [r3]
   2bc34:	vmov.32	r3, d16[1]
   2bc38:	vld1.32	{d18-d19}, [r2]
   2bc3c:	ldr	r2, [sp, #4]
   2bc40:	vld1.32	{d20-d21}, [r2]
   2bc44:	ldr	r2, [sp, #8]
   2bc48:	vld1.32	{d22-d23}, [r2]
   2bc4c:	vorn	q9, q10, q9
   2bc50:	vand	q9, q11, q9
   2bc54:	vst1.32	{d18-d19}, [r2]
   2bc58:	vmov.32	r2, d16[0]
   2bc5c:	orr	r2, r3, r2
   2bc60:	vmov.32	r3, d17[0]
   2bc64:	orr	r2, r2, r3
   2bc68:	vmov.32	r3, d17[1]
   2bc6c:	orr	r2, r2, r3
   2bc70:	vmov.32	r3, d18[0]
   2bc74:	orr	r2, r2, r3
   2bc78:	vmov.32	r3, d18[1]
   2bc7c:	orr	r2, r2, r3
   2bc80:	vmov.32	r3, d19[0]
   2bc84:	orr	r2, r2, r3
   2bc88:	vmov.32	r3, d19[1]
   2bc8c:	orr	r2, r2, r3
   2bc90:	cmp	r2, #0
   2bc94:	mov	r2, r0
   2bc98:	bne	2ba38 <__assert_fail@plt+0x19d8c>
   2bc9c:	b	2c6d4 <__assert_fail@plt+0x1aa28>
   2bca0:	ldr	r2, [sl, #112]	; 0x70
   2bca4:	str	r0, [sp, #24]
   2bca8:	str	r8, [sp, #28]
   2bcac:	str	r5, [sp, #156]	; 0x9c
   2bcb0:	ldr	r3, [sl, #96]	; 0x60
   2bcb4:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2bcb8:	ldr	r0, [sl, #100]	; 0x64
   2bcbc:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2bcc0:	ldr	r8, [sl, #104]	; 0x68
   2bcc4:	ldr	r9, [sl, #108]	; 0x6c
   2bcc8:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2bccc:	str	r2, [sp, #140]	; 0x8c
   2bcd0:	ldr	r2, [sl, #116]	; 0x74
   2bcd4:	and	lr, r5, r0
   2bcd8:	and	r7, r4, r3
   2bcdc:	ldr	r0, [sp, #140]	; 0x8c
   2bce0:	str	r2, [sp, #144]	; 0x90
   2bce4:	ldr	r2, [sl, #120]	; 0x78
   2bce8:	str	r2, [sp, #148]	; 0x94
   2bcec:	ldr	r2, [sl, #124]	; 0x7c
   2bcf0:	and	sl, r6, r8
   2bcf4:	ldr	r8, [sp, #28]
   2bcf8:	str	r2, [sp, #152]	; 0x98
   2bcfc:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2bd00:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2bd04:	str	lr, [fp, #-1076]	; 0xfffffbcc
   2bd08:	str	sl, [fp, #-1072]	; 0xfffffbd0
   2bd0c:	orr	r7, lr, r7
   2bd10:	orr	r7, r7, sl
   2bd14:	ldr	sl, [sp, #16]
   2bd18:	and	r2, r2, r9
   2bd1c:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2bd20:	orr	r2, r7, r2
   2bd24:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   2bd28:	and	r9, r6, r0
   2bd2c:	ldr	r0, [sp, #144]	; 0x90
   2bd30:	str	r9, [fp, #-1064]	; 0xfffffbd8
   2bd34:	orr	r2, r2, r9
   2bd38:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2bd3c:	and	r4, r4, r0
   2bd40:	ldr	r0, [sp, #148]	; 0x94
   2bd44:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2bd48:	orr	r2, r2, r4
   2bd4c:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   2bd50:	and	r3, r3, r0
   2bd54:	ldr	r0, [sp, #152]	; 0x98
   2bd58:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2bd5c:	orr	r2, r2, r3
   2bd60:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   2bd64:	and	r6, r5, r0
   2bd68:	ldr	r0, [sp, #24]
   2bd6c:	ldr	r5, [sp, #156]	; 0x9c
   2bd70:	str	r6, [fp, #-1052]	; 0xfffffbe4
   2bd74:	orr	r2, r2, r6
   2bd78:	cmp	r2, #0
   2bd7c:	mov	r2, r0
   2bd80:	bne	2ba38 <__assert_fail@plt+0x19d8c>
   2bd84:	b	2c6d4 <__assert_fail@plt+0x1aa28>
   2bd88:	ldr	r1, [sp]
   2bd8c:	sub	lr, fp, #1024	; 0x400
   2bd90:	vld1.32	{d16-d17}, [r1]
   2bd94:	sub	r1, lr, #56	; 0x38
   2bd98:	vld1.64	{d18-d19}, [r1]
   2bd9c:	vbic	q9, q9, q8
   2bda0:	vst1.64	{d18-d19}, [r1]
   2bda4:	ldr	r1, [sp, #4]
   2bda8:	vld1.32	{d16-d17}, [r1]
   2bdac:	ldr	r1, [sp, #8]
   2bdb0:	vld1.32	{d20-d21}, [r1]
   2bdb4:	vbic	q8, q10, q8
   2bdb8:	vst1.32	{d16-d17}, [r1]
   2bdbc:	vmov.32	r1, d18[0]
   2bdc0:	vmov.32	r2, d18[1]
   2bdc4:	orr	r1, r2, r1
   2bdc8:	vmov.32	r2, d19[0]
   2bdcc:	orr	r1, r1, r2
   2bdd0:	vmov.32	r2, d19[1]
   2bdd4:	orr	r1, r1, r2
   2bdd8:	vmov.32	r2, d16[0]
   2bddc:	orr	r1, r1, r2
   2bde0:	vmov.32	r2, d16[1]
   2bde4:	orr	r1, r1, r2
   2bde8:	vmov.32	r2, d17[0]
   2bdec:	orr	r1, r1, r2
   2bdf0:	vmov.32	r2, d17[1]
   2bdf4:	orrs	r1, r1, r2
   2bdf8:	mov	r2, r0
   2bdfc:	beq	2c6d4 <__assert_fail@plt+0x1aa28>
   2be00:	cmp	r5, #1
   2be04:	blt	2c210 <__assert_fail@plt+0x1a564>
   2be08:	ldr	r6, [sp, #12]
   2be0c:	cmp	ip, #1
   2be10:	bne	2c220 <__assert_fail@plt+0x1a574>
   2be14:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2be18:	ldr	r7, [fp, #-1080]	; 0xfffffbc8
   2be1c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   2be20:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   2be24:	ldr	lr, [fp, #-1068]	; 0xfffffbd4
   2be28:	str	r5, [sp, #156]	; 0x9c
   2be2c:	mov	r4, #0
   2be30:	str	r6, [sp, #148]	; 0x94
   2be34:	add	r5, sp, #160	; 0xa0
   2be38:	mov	ip, r8
   2be3c:	str	r8, [sp, #28]
   2be40:	str	r2, [sp, #24]
   2be44:	str	r0, [sp, #140]	; 0x8c
   2be48:	sub	r0, fp, #6144	; 0x1800
   2be4c:	sub	r6, r0, #104	; 0x68
   2be50:	ldrb	r0, [r2, ip, lsl #3]
   2be54:	mov	r8, r2
   2be58:	mov	r2, #1
   2be5c:	ubfx	r1, r0, #5, #3
   2be60:	and	r0, r0, #31
   2be64:	add	r1, r5, r1, lsl #2
   2be68:	ldr	r1, [r1, r4, lsl #5]
   2be6c:	tst	r1, r2, lsl r0
   2be70:	beq	2c0e4 <__assert_fail@plt+0x1a438>
   2be74:	add	r0, r5, r4, lsl #5
   2be78:	str	r6, [sp, #116]	; 0x74
   2be7c:	str	r4, [sp, #152]	; 0x98
   2be80:	add	ip, r0, #8
   2be84:	ldr	r6, [r0, #4]
   2be88:	ldm	ip, {r1, r3, ip}
   2be8c:	ldr	r5, [sp, #148]	; 0x94
   2be90:	str	lr, [sp, #136]	; 0x88
   2be94:	str	sl, [sp, #132]	; 0x84
   2be98:	ldr	r8, [fp, #-1052]	; 0xfffffbe4
   2be9c:	str	r6, [sp, #124]	; 0x7c
   2bea0:	and	r6, r6, sl
   2bea4:	ldr	sl, [fp, #-1056]	; 0xfffffbe0
   2bea8:	ldr	r2, [r5, #-28]	; 0xffffffe4
   2beac:	and	r4, r1, r9
   2beb0:	str	r6, [sp, #84]	; 0x54
   2beb4:	str	r1, [sp, #104]	; 0x68
   2beb8:	ldr	r1, [r5]
   2bebc:	str	ip, [sp, #144]	; 0x90
   2bec0:	str	r3, [sp, #108]	; 0x6c
   2bec4:	str	r8, [sp, #100]	; 0x64
   2bec8:	str	r4, [sp, #96]	; 0x60
   2becc:	str	r2, [sp, #120]	; 0x78
   2bed0:	and	r2, r2, r7
   2bed4:	str	r1, [sp, #128]	; 0x80
   2bed8:	and	r1, r1, r8
   2bedc:	str	r2, [sp, #92]	; 0x5c
   2bee0:	orr	r2, r6, r2
   2bee4:	and	r6, r3, lr
   2bee8:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   2beec:	orr	r2, r2, r4
   2bef0:	str	r6, [sp, #80]	; 0x50
   2bef4:	orr	r2, r2, r6
   2bef8:	ldr	r6, [sp, #140]	; 0x8c
   2befc:	and	r4, ip, r6
   2bf00:	str	r4, [sp, #76]	; 0x4c
   2bf04:	orr	r4, r2, r4
   2bf08:	ldr	r2, [r0, #20]
   2bf0c:	and	r6, r2, lr
   2bf10:	str	r6, [sp, #72]	; 0x48
   2bf14:	orr	r6, r4, r6
   2bf18:	ldr	r4, [r0, #24]
   2bf1c:	and	ip, r4, sl
   2bf20:	orr	r6, r6, ip
   2bf24:	str	ip, [sp, #68]	; 0x44
   2bf28:	orrs	r6, r6, r1
   2bf2c:	beq	2c0f0 <__assert_fail@plt+0x1a444>
   2bf30:	str	r1, [sp, #20]
   2bf34:	ldr	r1, [sp, #120]	; 0x78
   2bf38:	mov	r8, r2
   2bf3c:	str	r2, [sp, #44]	; 0x2c
   2bf40:	ldr	r2, [sp, #132]	; 0x84
   2bf44:	ldr	ip, [sp, #104]	; 0x68
   2bf48:	ldr	r3, [sp, #140]	; 0x8c
   2bf4c:	bic	r6, r7, r1
   2bf50:	ldr	r1, [sp, #124]	; 0x7c
   2bf54:	str	r6, [sp, #64]	; 0x40
   2bf58:	bic	r6, r2, r1
   2bf5c:	ldr	r2, [sp, #108]	; 0x6c
   2bf60:	ldr	r1, [sp, #136]	; 0x88
   2bf64:	str	r6, [sp, #48]	; 0x30
   2bf68:	bic	r6, r9, ip
   2bf6c:	str	r6, [sp, #60]	; 0x3c
   2bf70:	bic	r6, r1, r2
   2bf74:	ldr	r1, [sp, #144]	; 0x90
   2bf78:	str	r6, [sp, #56]	; 0x38
   2bf7c:	bic	r6, r3, r1
   2bf80:	ldr	r1, [sp, #128]	; 0x80
   2bf84:	ldr	r3, [sp, #120]	; 0x78
   2bf88:	str	r6, [sp, #52]	; 0x34
   2bf8c:	bic	r6, lr, r8
   2bf90:	ldr	r8, [sp, #100]	; 0x64
   2bf94:	str	r6, [sp, #40]	; 0x28
   2bf98:	str	r6, [fp, #-1060]	; 0xfffffbdc
   2bf9c:	bic	r6, sl, r4
   2bfa0:	str	r6, [sp, #36]	; 0x24
   2bfa4:	str	r6, [fp, #-1056]	; 0xfffffbe0
   2bfa8:	bic	r7, r3, r7
   2bfac:	ldr	r3, [sp, #124]	; 0x7c
   2bfb0:	bic	r6, r8, r1
   2bfb4:	bic	r1, ip, r9
   2bfb8:	str	r6, [sp, #32]
   2bfbc:	str	r6, [fp, #-1052]	; 0xfffffbe4
   2bfc0:	ldr	r6, [sp, #132]	; 0x84
   2bfc4:	bic	r3, r3, r6
   2bfc8:	orr	r6, r3, r7
   2bfcc:	str	r3, [sp, #132]	; 0x84
   2bfd0:	mov	r3, r7
   2bfd4:	ldr	r7, [sp, #136]	; 0x88
   2bfd8:	orr	r6, r6, r1
   2bfdc:	bic	r2, r2, r7
   2bfe0:	ldr	r7, [sp, #140]	; 0x8c
   2bfe4:	str	r2, [sp, #136]	; 0x88
   2bfe8:	orr	r6, r6, r2
   2bfec:	ldr	r2, [sp, #144]	; 0x90
   2bff0:	bic	ip, r2, r7
   2bff4:	ldr	r2, [sp, #44]	; 0x2c
   2bff8:	orr	r6, r6, ip
   2bffc:	bic	lr, r2, lr
   2c000:	bic	r2, r4, sl
   2c004:	ldr	r4, [sp, #128]	; 0x80
   2c008:	orr	r6, r6, lr
   2c00c:	orr	r6, r6, r2
   2c010:	bic	r7, r4, r8
   2c014:	orrs	r6, r6, r7
   2c018:	beq	2c110 <__assert_fail@plt+0x1a464>
   2c01c:	ldr	r4, [sp, #156]	; 0x9c
   2c020:	add	r6, sp, #160	; 0xa0
   2c024:	str	r3, [r6, r4, lsl #5]
   2c028:	ldr	r3, [sp, #132]	; 0x84
   2c02c:	add	r6, r6, r4, lsl #5
   2c030:	str	r3, [r6, #4]
   2c034:	str	r1, [r6, #8]
   2c038:	ldr	r1, [sp, #136]	; 0x88
   2c03c:	add	r3, r6, #12
   2c040:	stm	r3, {r1, ip, lr}
   2c044:	str	r2, [r6, #24]
   2c048:	str	r7, [r6, #28]
   2c04c:	sub	lr, fp, #6144	; 0x1800
   2c050:	str	r4, [sp, #156]	; 0x9c
   2c054:	ldr	r1, [sp, #92]	; 0x5c
   2c058:	ldr	r6, [sp, #116]	; 0x74
   2c05c:	str	r1, [r5, #-28]	; 0xffffffe4
   2c060:	ldr	r1, [sp, #84]	; 0x54
   2c064:	str	r1, [r0, #4]
   2c068:	ldr	r1, [sp, #96]	; 0x60
   2c06c:	str	r1, [r0, #8]
   2c070:	ldr	r1, [sp, #80]	; 0x50
   2c074:	str	r1, [r0, #12]
   2c078:	ldr	r1, [sp, #76]	; 0x4c
   2c07c:	str	r1, [r0, #16]
   2c080:	ldr	r1, [sp, #72]	; 0x48
   2c084:	str	r1, [r0, #20]
   2c088:	ldr	r1, [sp, #68]	; 0x44
   2c08c:	str	r1, [r0, #24]
   2c090:	ldr	r0, [sp, #20]
   2c094:	sub	r1, lr, #104	; 0x68
   2c098:	str	r0, [r5]
   2c09c:	add	r0, r4, r4, lsl #1
   2c0a0:	add	r5, r1, r0, lsl #2
   2c0a4:	ldr	r0, [r6, #4]
   2c0a8:	mov	r4, r5
   2c0ac:	str	r0, [r4, #4]!
   2c0b0:	ldr	r8, [r6, #4]
   2c0b4:	cmp	r8, #0
   2c0b8:	ble	2c11c <__assert_fail@plt+0x1a470>
   2c0bc:	str	r0, [r5]
   2c0c0:	lsl	r0, r0, #2
   2c0c4:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2c0c8:	cmp	r0, #0
   2c0cc:	str	r0, [r5, #8]
   2c0d0:	beq	2d0b4 <__assert_fail@plt+0x1b408>
   2c0d4:	ldr	r1, [r6, #8]
   2c0d8:	lsl	r2, r8, #2
   2c0dc:	bl	118ec <memcpy@plt>
   2c0e0:	b	2c12c <__assert_fail@plt+0x1a480>
   2c0e4:	str	r9, [sp, #144]	; 0x90
   2c0e8:	mov	r2, r8
   2c0ec:	b	2c1bc <__assert_fail@plt+0x1a510>
   2c0f0:	ldr	r4, [sp, #152]	; 0x98
   2c0f4:	ldr	ip, [sp, #28]
   2c0f8:	ldr	r2, [sp, #24]
   2c0fc:	ldr	r6, [sp, #116]	; 0x74
   2c100:	ldr	lr, [sp, #136]	; 0x88
   2c104:	ldr	sl, [sp, #132]	; 0x84
   2c108:	str	r9, [sp, #144]	; 0x90
   2c10c:	b	2c1c0 <__assert_fail@plt+0x1a514>
   2c110:	ldr	r4, [sp, #152]	; 0x98
   2c114:	ldr	r6, [sp, #116]	; 0x74
   2c118:	b	2c13c <__assert_fail@plt+0x1a490>
   2c11c:	mov	r0, #0
   2c120:	str	r0, [r5]
   2c124:	str	r0, [r5, #4]
   2c128:	str	r0, [r5, #8]
   2c12c:	ldr	r0, [sp, #156]	; 0x9c
   2c130:	ldr	r4, [sp, #152]	; 0x98
   2c134:	add	r0, r0, #1
   2c138:	str	r0, [sp, #156]	; 0x9c
   2c13c:	ldr	r0, [sp, #88]	; 0x58
   2c140:	ldr	r1, [sp, #112]	; 0x70
   2c144:	ldr	r0, [r0, #12]
   2c148:	ldr	r1, [r0, r1, lsl #2]
   2c14c:	mov	r0, r6
   2c150:	bl	27114 <__assert_fail@plt+0x15468>
   2c154:	cmp	r0, #0
   2c158:	beq	2cba4 <__assert_fail@plt+0x1aef8>
   2c15c:	ldr	r2, [sp, #64]	; 0x40
   2c160:	ldr	sl, [sp, #48]	; 0x30
   2c164:	ldr	r9, [sp, #60]	; 0x3c
   2c168:	ldr	lr, [sp, #56]	; 0x38
   2c16c:	ldr	r1, [sp, #52]	; 0x34
   2c170:	ldr	r5, [sp, #40]	; 0x28
   2c174:	orr	r0, sl, r2
   2c178:	orr	r0, r0, r9
   2c17c:	orr	r0, r0, lr
   2c180:	orr	r0, r0, r1
   2c184:	orr	r0, r0, r5
   2c188:	ldr	r5, [sp, #36]	; 0x24
   2c18c:	orr	r0, r0, r5
   2c190:	ldr	r5, [sp, #32]
   2c194:	orrs	r0, r0, r5
   2c198:	mov	r0, #0
   2c19c:	movweq	r0, #17
   2c1a0:	cmp	r0, #0
   2c1a4:	bne	2c6fc <__assert_fail@plt+0x1aa50>
   2c1a8:	mov	r7, r2
   2c1ac:	ldr	ip, [sp, #28]
   2c1b0:	ldr	r2, [sp, #24]
   2c1b4:	str	r1, [sp, #140]	; 0x8c
   2c1b8:	str	r9, [sp, #144]	; 0x90
   2c1bc:	ldr	r5, [sp, #148]	; 0x94
   2c1c0:	ldr	r3, [sp, #156]	; 0x9c
   2c1c4:	ldr	r9, [sp, #144]	; 0x90
   2c1c8:	add	r5, r5, #32
   2c1cc:	add	r4, r4, #1
   2c1d0:	add	r6, r6, #12
   2c1d4:	str	r5, [sp, #148]	; 0x94
   2c1d8:	add	r5, sp, #160	; 0xa0
   2c1dc:	cmp	r4, r3
   2c1e0:	blt	2be50 <__assert_fail@plt+0x1a1a4>
   2c1e4:	ldr	r5, [sp, #156]	; 0x9c
   2c1e8:	ldr	r0, [sp, #140]	; 0x8c
   2c1ec:	str	sl, [fp, #-1076]	; 0xfffffbcc
   2c1f0:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2c1f4:	str	r9, [fp, #-1072]	; 0xfffffbd0
   2c1f8:	str	lr, [fp, #-1068]	; 0xfffffbd4
   2c1fc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2c200:	ldr	sl, [sp, #16]
   2c204:	cmp	r4, r5
   2c208:	beq	2c650 <__assert_fail@plt+0x1a9a4>
   2c20c:	b	2c6d4 <__assert_fail@plt+0x1aa28>
   2c210:	mov	r4, #0
   2c214:	cmp	r4, r5
   2c218:	beq	2c650 <__assert_fail@plt+0x1a9a4>
   2c21c:	b	2c6d4 <__assert_fail@plt+0x1aa28>
   2c220:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   2c224:	ldr	r9, [fp, #-1080]	; 0xfffffbc8
   2c228:	ldr	ip, [fp, #-1072]	; 0xfffffbd0
   2c22c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   2c230:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2c234:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   2c238:	sub	lr, fp, #6144	; 0x1800
   2c23c:	mov	r4, #0
   2c240:	str	r0, [sp, #144]	; 0x90
   2c244:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   2c248:	mov	r3, ip
   2c24c:	mov	r7, r9
   2c250:	str	r2, [sp, #80]	; 0x50
   2c254:	str	sl, [sp, #76]	; 0x4c
   2c258:	str	r0, [sp, #140]	; 0x8c
   2c25c:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   2c260:	str	r0, [sp, #84]	; 0x54
   2c264:	sub	r0, lr, #104	; 0x68
   2c268:	str	r0, [sp, #148]	; 0x94
   2c26c:	mov	r0, r6
   2c270:	add	r1, sp, #160	; 0xa0
   2c274:	str	r9, [sp, #136]	; 0x88
   2c278:	str	r7, [sp, #120]	; 0x78
   2c27c:	str	r3, [sp, #92]	; 0x5c
   2c280:	str	r8, [sp, #96]	; 0x60
   2c284:	str	ip, [sp, #124]	; 0x7c
   2c288:	str	sl, [sp, #128]	; 0x80
   2c28c:	str	r2, [sp, #132]	; 0x84
   2c290:	str	r5, [sp, #156]	; 0x9c
   2c294:	str	r4, [sp, #152]	; 0x98
   2c298:	add	r9, r1, r4, lsl #5
   2c29c:	ldmib	r9, {sl, ip}
   2c2a0:	ldr	lr, [r0, #-28]	; 0xffffffe4
   2c2a4:	ldr	r5, [r0]
   2c2a8:	str	r0, [sp, #116]	; 0x74
   2c2ac:	ldr	r4, [r9, #12]
   2c2b0:	ldr	r6, [r9, #16]
   2c2b4:	and	r0, lr, r7
   2c2b8:	ldr	r7, [sp, #76]	; 0x4c
   2c2bc:	and	r1, ip, r3
   2c2c0:	str	r4, [sp, #108]	; 0x6c
   2c2c4:	str	r6, [sp, #104]	; 0x68
   2c2c8:	str	r5, [sp, #100]	; 0x64
   2c2cc:	str	r0, [sp, #68]	; 0x44
   2c2d0:	str	r1, [sp, #72]	; 0x48
   2c2d4:	and	r2, sl, r7
   2c2d8:	orr	r0, r2, r0
   2c2dc:	str	r2, [sp, #64]	; 0x40
   2c2e0:	orr	r0, r0, r1
   2c2e4:	ldr	r1, [sp, #80]	; 0x50
   2c2e8:	and	r2, r4, r1
   2c2ec:	ldr	r4, [sp, #140]	; 0x8c
   2c2f0:	str	r2, [sp, #60]	; 0x3c
   2c2f4:	orr	r0, r0, r2
   2c2f8:	and	r2, r6, r8
   2c2fc:	ldr	r8, [sp, #84]	; 0x54
   2c300:	str	r2, [sp, #56]	; 0x38
   2c304:	orr	r0, r0, r2
   2c308:	ldr	r2, [r9, #20]
   2c30c:	and	r3, r2, r8
   2c310:	str	r3, [sp, #52]	; 0x34
   2c314:	orr	r0, r0, r3
   2c318:	ldr	r3, [r9, #24]
   2c31c:	and	r6, r3, r4
   2c320:	str	r6, [sp, #48]	; 0x30
   2c324:	orr	r0, r0, r6
   2c328:	ldr	r6, [sp, #144]	; 0x90
   2c32c:	and	r6, r5, r6
   2c330:	orrs	r0, r0, r6
   2c334:	beq	2c4e8 <__assert_fail@plt+0x1a83c>
   2c338:	ldr	r0, [sp, #120]	; 0x78
   2c33c:	ldr	r5, [sp, #92]	; 0x5c
   2c340:	str	sl, [sp, #24]
   2c344:	str	r6, [sp, #20]
   2c348:	ldr	r6, [sp, #144]	; 0x90
   2c34c:	str	ip, [sp, #28]
   2c350:	str	r4, [sp, #140]	; 0x8c
   2c354:	bic	r0, r0, lr
   2c358:	str	r0, [sp, #136]	; 0x88
   2c35c:	bic	r0, r7, sl
   2c360:	ldr	sl, [sp, #96]	; 0x60
   2c364:	str	r0, [sp, #128]	; 0x80
   2c368:	bic	r0, r5, ip
   2c36c:	str	r0, [sp, #124]	; 0x7c
   2c370:	ldr	r0, [sp, #108]	; 0x6c
   2c374:	bic	r0, r1, r0
   2c378:	str	r0, [sp, #132]	; 0x84
   2c37c:	ldr	r0, [sp, #104]	; 0x68
   2c380:	bic	r0, sl, r0
   2c384:	str	r0, [sp, #44]	; 0x2c
   2c388:	bic	r0, r8, r2
   2c38c:	bic	r2, r2, r8
   2c390:	str	r0, [sp, #40]	; 0x28
   2c394:	bic	r0, r4, r3
   2c398:	str	r0, [sp, #36]	; 0x24
   2c39c:	ldr	r0, [sp, #100]	; 0x64
   2c3a0:	bic	r0, r6, r0
   2c3a4:	str	r0, [sp, #32]
   2c3a8:	ldr	r0, [sp, #28]
   2c3ac:	bic	r0, r0, r5
   2c3b0:	ldr	r5, [sp, #120]	; 0x78
   2c3b4:	str	r0, [sp, #120]	; 0x78
   2c3b8:	bic	ip, lr, r5
   2c3bc:	ldr	r5, [sp, #24]
   2c3c0:	bic	r7, r5, r7
   2c3c4:	mov	r5, r6
   2c3c8:	str	r7, [sp, #92]	; 0x5c
   2c3cc:	orr	r7, r7, ip
   2c3d0:	orr	r4, r7, r0
   2c3d4:	ldr	r0, [sp, #108]	; 0x6c
   2c3d8:	bic	lr, r0, r1
   2c3dc:	ldr	r0, [sp, #104]	; 0x68
   2c3e0:	orr	r4, r4, lr
   2c3e4:	bic	r6, r0, sl
   2c3e8:	ldr	r0, [sp, #140]	; 0x8c
   2c3ec:	orr	r4, r4, r6
   2c3f0:	orr	r4, r4, r2
   2c3f4:	bic	r3, r3, r0
   2c3f8:	ldr	r0, [sp, #100]	; 0x64
   2c3fc:	orr	r4, r4, r3
   2c400:	bic	r1, r0, r5
   2c404:	orrs	r4, r4, r1
   2c408:	beq	2c514 <__assert_fail@plt+0x1a868>
   2c40c:	ldr	r7, [sp, #156]	; 0x9c
   2c410:	ldr	r5, [sp, #92]	; 0x5c
   2c414:	add	r4, sp, #160	; 0xa0
   2c418:	add	r0, r4, r7, lsl #5
   2c41c:	str	ip, [r4, r7, lsl #5]
   2c420:	mov	r8, r7
   2c424:	str	r5, [r0, #4]
   2c428:	ldr	r5, [sp, #120]	; 0x78
   2c42c:	str	r5, [r0, #8]
   2c430:	str	lr, [r0, #12]
   2c434:	str	r6, [r0, #16]
   2c438:	str	r2, [r0, #20]
   2c43c:	str	r3, [r0, #24]
   2c440:	str	r1, [r0, #28]
   2c444:	ldr	r0, [sp, #116]	; 0x74
   2c448:	ldr	r1, [sp, #68]	; 0x44
   2c44c:	sub	lr, fp, #6144	; 0x1800
   2c450:	str	r1, [r0, #-28]	; 0xffffffe4
   2c454:	ldr	r1, [sp, #64]	; 0x40
   2c458:	str	r1, [r9, #4]
   2c45c:	ldr	r1, [sp, #72]	; 0x48
   2c460:	str	r1, [r9, #8]
   2c464:	ldr	r1, [sp, #60]	; 0x3c
   2c468:	str	r1, [r9, #12]
   2c46c:	ldr	r1, [sp, #56]	; 0x38
   2c470:	str	r1, [r9, #16]
   2c474:	ldr	r1, [sp, #52]	; 0x34
   2c478:	str	r1, [r9, #20]
   2c47c:	ldr	r1, [sp, #48]	; 0x30
   2c480:	str	r1, [r9, #24]
   2c484:	ldr	r1, [sp, #20]
   2c488:	str	r1, [r0]
   2c48c:	add	r0, r7, r7, lsl #1
   2c490:	sub	r1, lr, #104	; 0x68
   2c494:	add	r6, r1, r0, lsl #2
   2c498:	ldr	r1, [sp, #148]	; 0x94
   2c49c:	mov	r4, r6
   2c4a0:	ldr	r0, [r1, #4]
   2c4a4:	str	r0, [r4, #4]!
   2c4a8:	ldr	r5, [r1, #4]
   2c4ac:	cmp	r5, #1
   2c4b0:	blt	2c524 <__assert_fail@plt+0x1a878>
   2c4b4:	str	r0, [r6]
   2c4b8:	lsl	r0, r0, #2
   2c4bc:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2c4c0:	ldr	r7, [sp, #40]	; 0x28
   2c4c4:	cmp	r0, #0
   2c4c8:	str	r0, [r6, #8]
   2c4cc:	beq	2cbdc <__assert_fail@plt+0x1af30>
   2c4d0:	ldr	r1, [sp, #148]	; 0x94
   2c4d4:	lsl	r2, r5, #2
   2c4d8:	ldr	r1, [r1, #8]
   2c4dc:	bl	118ec <memcpy@plt>
   2c4e0:	mov	r5, r8
   2c4e4:	b	2c53c <__assert_fail@plt+0x1a890>
   2c4e8:	ldr	r6, [sp, #120]	; 0x78
   2c4ec:	ldr	r1, [sp, #92]	; 0x5c
   2c4f0:	ldr	r0, [sp, #144]	; 0x90
   2c4f4:	ldr	r5, [sp, #156]	; 0x9c
   2c4f8:	ldr	r4, [sp, #152]	; 0x98
   2c4fc:	ldr	r9, [sp, #136]	; 0x88
   2c500:	ldr	r2, [sp, #132]	; 0x84
   2c504:	ldr	sl, [sp, #128]	; 0x80
   2c508:	ldr	ip, [sp, #124]	; 0x7c
   2c50c:	ldr	r8, [sp, #96]	; 0x60
   2c510:	b	2c5cc <__assert_fail@plt+0x1a920>
   2c514:	ldr	r5, [sp, #156]	; 0x9c
   2c518:	ldr	r4, [sp, #152]	; 0x98
   2c51c:	ldr	r7, [sp, #40]	; 0x28
   2c520:	b	2c544 <__assert_fail@plt+0x1a898>
   2c524:	ldr	r7, [sp, #40]	; 0x28
   2c528:	mov	r0, #0
   2c52c:	mov	r5, r8
   2c530:	str	r0, [r6]
   2c534:	str	r0, [r6, #4]
   2c538:	str	r0, [r6, #8]
   2c53c:	ldr	r4, [sp, #152]	; 0x98
   2c540:	add	r5, r5, #1
   2c544:	ldr	r0, [sp, #88]	; 0x58
   2c548:	ldr	r1, [sp, #112]	; 0x70
   2c54c:	ldr	r0, [r0, #12]
   2c550:	ldr	r1, [r0, r1, lsl #2]
   2c554:	ldr	r0, [sp, #148]	; 0x94
   2c558:	bl	27114 <__assert_fail@plt+0x15468>
   2c55c:	cmp	r0, #0
   2c560:	beq	2cb20 <__assert_fail@plt+0x1ae74>
   2c564:	ldr	r9, [sp, #136]	; 0x88
   2c568:	ldr	sl, [sp, #128]	; 0x80
   2c56c:	ldr	ip, [sp, #124]	; 0x7c
   2c570:	ldr	r2, [sp, #132]	; 0x84
   2c574:	ldr	r6, [sp, #44]	; 0x2c
   2c578:	ldr	r1, [sp, #36]	; 0x24
   2c57c:	ldr	lr, [sp, #32]
   2c580:	orr	r0, sl, r9
   2c584:	orr	r0, r0, ip
   2c588:	orr	r0, r0, r2
   2c58c:	orr	r0, r0, r6
   2c590:	orr	r0, r0, r7
   2c594:	orr	r0, r0, r1
   2c598:	orrs	r0, r0, lr
   2c59c:	mov	r0, #0
   2c5a0:	movweq	r0, #17
   2c5a4:	cmp	r0, #0
   2c5a8:	bne	2c5fc <__assert_fail@plt+0x1a950>
   2c5ac:	str	r1, [sp, #140]	; 0x8c
   2c5b0:	mov	r8, r6
   2c5b4:	mov	r0, lr
   2c5b8:	mov	r1, ip
   2c5bc:	mov	r6, r9
   2c5c0:	str	r7, [sp, #84]	; 0x54
   2c5c4:	str	r2, [sp, #80]	; 0x50
   2c5c8:	str	sl, [sp, #76]	; 0x4c
   2c5cc:	ldr	r7, [sp, #148]	; 0x94
   2c5d0:	str	r0, [sp, #144]	; 0x90
   2c5d4:	ldr	r0, [sp, #116]	; 0x74
   2c5d8:	add	r4, r4, #1
   2c5dc:	mov	r3, r1
   2c5e0:	cmp	r4, r5
   2c5e4:	add	r7, r7, #12
   2c5e8:	add	r0, r0, #32
   2c5ec:	str	r7, [sp, #148]	; 0x94
   2c5f0:	mov	r7, r6
   2c5f4:	blt	2c270 <__assert_fail@plt+0x1a5c4>
   2c5f8:	b	2c618 <__assert_fail@plt+0x1a96c>
   2c5fc:	cmp	r0, #17
   2c600:	bne	2c710 <__assert_fail@plt+0x1aa64>
   2c604:	mov	r8, r6
   2c608:	mov	r0, r7
   2c60c:	str	lr, [sp, #144]	; 0x90
   2c610:	str	r1, [sp, #140]	; 0x8c
   2c614:	str	r7, [sp, #84]	; 0x54
   2c618:	ldr	r0, [sp, #84]	; 0x54
   2c61c:	str	ip, [fp, #-1072]	; 0xfffffbd0
   2c620:	str	sl, [fp, #-1076]	; 0xfffffbcc
   2c624:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2c628:	str	r8, [fp, #-1064]	; 0xfffffbd8
   2c62c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2c630:	ldr	r0, [sp, #140]	; 0x8c
   2c634:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2c638:	ldr	r0, [sp, #144]	; 0x90
   2c63c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2c640:	str	r9, [fp, #-1080]	; 0xfffffbc8
   2c644:	ldr	sl, [sp, #16]
   2c648:	cmp	r4, r5
   2c64c:	bne	2c6d4 <__assert_fail@plt+0x1aa28>
   2c650:	sub	lr, fp, #1024	; 0x400
   2c654:	ldr	r1, [sp, #112]	; 0x70
   2c658:	sub	r7, lr, #56	; 0x38
   2c65c:	sub	lr, fp, #6144	; 0x1800
   2c660:	mov	r0, r7
   2c664:	mov	r9, r7
   2c668:	sub	r2, lr, #104	; 0x68
   2c66c:	vld1.32	{d16-d17}, [r0]!
   2c670:	vld1.64	{d18-d19}, [r0]
   2c674:	add	r0, sp, #160	; 0xa0
   2c678:	add	r0, r0, r4, lsl #5
   2c67c:	vst1.32	{d16-d17}, [r0]!
   2c680:	vst1.32	{d18-d19}, [r0]
   2c684:	ldr	r0, [sp, #88]	; 0x58
   2c688:	ldr	r0, [r0, #12]
   2c68c:	ldr	r7, [r0, r1, lsl #2]
   2c690:	add	r0, r4, r4, lsl #1
   2c694:	mov	r1, #1
   2c698:	add	r5, r2, r0, lsl #2
   2c69c:	str	r1, [r2, r0, lsl #2]
   2c6a0:	mov	r0, #4
   2c6a4:	mov	r6, r5
   2c6a8:	str	r1, [r6, #4]!
   2c6ac:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2c6b0:	cmp	r0, #0
   2c6b4:	str	r0, [r5, #8]
   2c6b8:	beq	2d168 <__assert_fail@plt+0x1b4bc>
   2c6bc:	ldr	sl, [sp, #16]
   2c6c0:	str	r7, [r0]
   2c6c4:	mov	r0, r9
   2c6c8:	add	r5, r4, #1
   2c6cc:	vst1.64	{d8-d9}, [r0]!
   2c6d0:	vst1.64	{d8-d9}, [r0]
   2c6d4:	ldr	r0, [sp, #88]	; 0x58
   2c6d8:	ldr	r1, [sp, #112]	; 0x70
   2c6dc:	ldr	r0, [r0, #8]
   2c6e0:	mov	r2, r1
   2c6e4:	add	r2, r1, #1
   2c6e8:	mov	r1, r2
   2c6ec:	str	r2, [sp, #112]	; 0x70
   2c6f0:	cmp	r2, r0
   2c6f4:	blt	2b97c <__assert_fail@plt+0x19cd0>
   2c6f8:	b	2c768 <__assert_fail@plt+0x1aabc>
   2c6fc:	cmp	r0, #17
   2c700:	bne	2c740 <__assert_fail@plt+0x1aa94>
   2c704:	mov	r7, r2
   2c708:	str	r1, [sp, #140]	; 0x8c
   2c70c:	b	2c1e4 <__assert_fail@plt+0x1a538>
   2c710:	str	ip, [fp, #-1072]	; 0xfffffbd0
   2c714:	str	sl, [fp, #-1076]	; 0xfffffbcc
   2c718:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2c71c:	str	r6, [fp, #-1064]	; 0xfffffbd8
   2c720:	str	r7, [fp, #-1060]	; 0xfffffbdc
   2c724:	str	r1, [fp, #-1056]	; 0xfffffbe0
   2c728:	str	lr, [fp, #-1052]	; 0xfffffbe4
   2c72c:	str	r9, [fp, #-1080]	; 0xfffffbc8
   2c730:	ldr	sl, [sp, #16]
   2c734:	cmp	r0, #0
   2c738:	beq	2c6d4 <__assert_fail@plt+0x1aa28>
   2c73c:	b	2c764 <__assert_fail@plt+0x1aab8>
   2c740:	ldr	r5, [sp, #156]	; 0x9c
   2c744:	str	sl, [fp, #-1076]	; 0xfffffbcc
   2c748:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2c74c:	str	r9, [fp, #-1072]	; 0xfffffbd0
   2c750:	str	lr, [fp, #-1068]	; 0xfffffbd4
   2c754:	str	r1, [fp, #-1064]	; 0xfffffbd8
   2c758:	ldr	sl, [sp, #16]
   2c75c:	cmp	r0, #0
   2c760:	beq	2c6d4 <__assert_fail@plt+0x1aa28>
   2c764:	b	2c770 <__assert_fail@plt+0x1aac4>
   2c768:	cmp	r5, #0
   2c76c:	ble	2d120 <__assert_fail@plt+0x1b474>
   2c770:	mov	r0, #0
   2c774:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2c778:	add	r0, r5, #1
   2c77c:	str	r0, [fp, #-3140]	; 0xfffff3bc
   2c780:	lsl	r0, r0, #2
   2c784:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2c788:	cmp	r0, #0
   2c78c:	str	r0, [fp, #-3132]	; 0xfffff3c4
   2c790:	mov	r0, #0
   2c794:	movweq	r0, #12
   2c798:	str	r0, [fp, #-56]	; 0xffffffc8
   2c79c:	beq	2d184 <__assert_fail@plt+0x1b4d8>
   2c7a0:	sub	lr, fp, #3072	; 0xc00
   2c7a4:	vmov.i32	q8, #0	; 0x00000000
   2c7a8:	mov	r1, #0
   2c7ac:	mov	r9, #0
   2c7b0:	mov	r6, #0
   2c7b4:	mov	r2, #0
   2c7b8:	mov	r7, #0
   2c7bc:	mov	r3, #0
   2c7c0:	mov	r8, #0
   2c7c4:	add	r4, sp, #160	; 0xa0
   2c7c8:	str	r5, [sp, #156]	; 0x9c
   2c7cc:	sub	r0, lr, #104	; 0x68
   2c7d0:	vst1.64	{d16-d17}, [r0]!
   2c7d4:	vst1.64	{d16-d17}, [r0]
   2c7d8:	mov	r0, #0
   2c7dc:	str	r0, [sp, #152]	; 0x98
   2c7e0:	mov	r0, #0
   2c7e4:	str	r0, [sp, #144]	; 0x90
   2c7e8:	mov	r0, #0
   2c7ec:	str	r0, [sp, #148]	; 0x94
   2c7f0:	mov	r0, #0
   2c7f4:	str	r0, [sp, #124]	; 0x7c
   2c7f8:	mov	r0, #0
   2c7fc:	sub	lr, fp, #6144	; 0x1800
   2c800:	str	r2, [sp, #140]	; 0x8c
   2c804:	str	r7, [sp, #136]	; 0x88
   2c808:	str	r3, [sp, #132]	; 0x84
   2c80c:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2c810:	add	r0, r8, r8, lsl #1
   2c814:	sub	r2, lr, #104	; 0x68
   2c818:	add	r2, r2, r0, lsl #2
   2c81c:	mov	r7, r2
   2c820:	ldr	r0, [r7, #4]!
   2c824:	cmp	r0, #1
   2c828:	blt	2c88c <__assert_fail@plt+0x1abe0>
   2c82c:	str	r9, [sp, #128]	; 0x80
   2c830:	add	r9, r2, #8
   2c834:	mov	r5, #0
   2c838:	ldr	r2, [r9]
   2c83c:	ldr	r3, [sl, #12]
   2c840:	ldr	r2, [r2, r5, lsl #2]
   2c844:	ldr	r2, [r3, r2, lsl #2]
   2c848:	cmn	r2, #1
   2c84c:	beq	2c878 <__assert_fail@plt+0x1abcc>
   2c850:	ldr	r0, [sl, #24]
   2c854:	add	r1, r2, r2, lsl #1
   2c858:	sub	lr, fp, #3072	; 0xc00
   2c85c:	add	r1, r0, r1, lsl #2
   2c860:	sub	r0, lr, #68	; 0x44
   2c864:	bl	26f6c <__assert_fail@plt+0x152c0>
   2c868:	cmp	r0, #0
   2c86c:	bne	2ca88 <__assert_fail@plt+0x1addc>
   2c870:	ldr	r0, [r7]
   2c874:	mov	r1, #0
   2c878:	add	r5, r5, #1
   2c87c:	cmp	r5, r0
   2c880:	blt	2c838 <__assert_fail@plt+0x1ab8c>
   2c884:	ldr	r9, [sp, #128]	; 0x80
   2c888:	str	r1, [fp, #-56]	; 0xffffffc8
   2c88c:	sub	lr, fp, #3072	; 0xc00
   2c890:	sub	r0, fp, #56	; 0x38
   2c894:	mov	r1, sl
   2c898:	mov	r3, #0
   2c89c:	sub	r2, lr, #68	; 0x44
   2c8a0:	bl	2725c <__assert_fail@plt+0x155b0>
   2c8a4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2c8a8:	mov	r7, r0
   2c8ac:	sub	lr, fp, #1024	; 0x400
   2c8b0:	sub	r0, lr, #56	; 0x38
   2c8b4:	cmp	r7, #0
   2c8b8:	str	r7, [r0, r8, lsl #2]
   2c8bc:	bne	2c8c8 <__assert_fail@plt+0x1ac1c>
   2c8c0:	cmp	r1, #0
   2c8c4:	bne	2cb68 <__assert_fail@plt+0x1aebc>
   2c8c8:	ldrsb	r0, [r7, #52]	; 0x34
   2c8cc:	cmn	r0, #1
   2c8d0:	ble	2c8f0 <__assert_fail@plt+0x1ac44>
   2c8d4:	sub	lr, fp, #3072	; 0xc00
   2c8d8:	sub	r0, lr, #56	; 0x38
   2c8dc:	sub	lr, fp, #2048	; 0x800
   2c8e0:	str	r7, [r0, r8, lsl #2]
   2c8e4:	sub	r0, lr, #56	; 0x38
   2c8e8:	str	r7, [r0, r8, lsl #2]
   2c8ec:	b	2c984 <__assert_fail@plt+0x1acd8>
   2c8f0:	sub	lr, fp, #3072	; 0xc00
   2c8f4:	sub	r0, fp, #56	; 0x38
   2c8f8:	mov	r1, sl
   2c8fc:	mov	r3, #1
   2c900:	sub	r2, lr, #68	; 0x44
   2c904:	bl	2725c <__assert_fail@plt+0x155b0>
   2c908:	sub	lr, fp, #2048	; 0x800
   2c90c:	cmp	r0, #0
   2c910:	sub	r1, lr, #56	; 0x38
   2c914:	str	r0, [r1, r8, lsl #2]
   2c918:	bne	2c928 <__assert_fail@plt+0x1ac7c>
   2c91c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2c920:	cmp	r1, #0
   2c924:	bne	2cb68 <__assert_fail@plt+0x1aebc>
   2c928:	cmp	r7, r0
   2c92c:	beq	2c94c <__assert_fail@plt+0x1aca0>
   2c930:	ldr	r0, [sl, #92]	; 0x5c
   2c934:	ldr	r1, [sp, #124]	; 0x7c
   2c938:	cmp	r0, #1
   2c93c:	mov	r0, #0
   2c940:	movwgt	r0, #1
   2c944:	orr	r1, r1, r0
   2c948:	str	r1, [sp, #124]	; 0x7c
   2c94c:	sub	lr, fp, #3072	; 0xc00
   2c950:	sub	r0, fp, #56	; 0x38
   2c954:	mov	r1, sl
   2c958:	mov	r3, #2
   2c95c:	sub	r2, lr, #68	; 0x44
   2c960:	bl	2725c <__assert_fail@plt+0x155b0>
   2c964:	sub	lr, fp, #3072	; 0xc00
   2c968:	cmp	r0, #0
   2c96c:	sub	r1, lr, #56	; 0x38
   2c970:	str	r0, [r1, r8, lsl #2]
   2c974:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2c978:	bne	2c984 <__assert_fail@plt+0x1acd8>
   2c97c:	cmp	r1, #0
   2c980:	bne	2cb68 <__assert_fail@plt+0x1aebc>
   2c984:	ldr	r0, [r4, r8, lsl #5]
   2c988:	ldr	r2, [sp, #148]	; 0x94
   2c98c:	ldr	sl, [sp, #16]
   2c990:	orr	r2, r2, r0
   2c994:	add	r0, r4, r8, lsl #5
   2c998:	add	r8, r8, #1
   2c99c:	str	r2, [sp, #148]	; 0x94
   2c9a0:	ldr	r2, [r0, #24]
   2c9a4:	ldr	ip, [r0, #4]
   2c9a8:	ldr	r3, [r0, #8]
   2c9ac:	ldr	r7, [r0, #12]
   2c9b0:	ldr	r5, [r0, #16]
   2c9b4:	ldr	r4, [r0, #20]
   2c9b8:	ldr	r0, [r0, #28]
   2c9bc:	orr	r9, r9, r0
   2c9c0:	ldr	r0, [sp, #152]	; 0x98
   2c9c4:	orr	r6, r6, r2
   2c9c8:	ldr	r2, [sp, #140]	; 0x8c
   2c9cc:	orr	r0, r0, r5
   2c9d0:	orr	r2, r2, r4
   2c9d4:	add	r4, sp, #160	; 0xa0
   2c9d8:	str	r0, [sp, #152]	; 0x98
   2c9dc:	ldr	r0, [sp, #136]	; 0x88
   2c9e0:	orr	r0, r0, r7
   2c9e4:	mov	r7, r0
   2c9e8:	ldr	r0, [sp, #132]	; 0x84
   2c9ec:	orr	r0, r0, r3
   2c9f0:	mov	r3, r0
   2c9f4:	ldr	r0, [sp, #144]	; 0x90
   2c9f8:	orr	r0, r0, ip
   2c9fc:	str	r0, [sp, #144]	; 0x90
   2ca00:	ldr	r0, [sp, #156]	; 0x9c
   2ca04:	cmp	r8, r0
   2ca08:	blt	2c7f8 <__assert_fail@plt+0x1ab4c>
   2ca0c:	ldr	r0, [sp, #144]	; 0x90
   2ca10:	ldr	r8, [sp, #124]	; 0x7c
   2ca14:	str	r0, [fp, #-3172]	; 0xfffff39c
   2ca18:	ldr	r0, [sp, #148]	; 0x94
   2ca1c:	tst	r8, #1
   2ca20:	str	r0, [fp, #-3176]	; 0xfffff398
   2ca24:	ldr	r0, [sp, #152]	; 0x98
   2ca28:	str	r3, [fp, #-3168]	; 0xfffff3a0
   2ca2c:	str	r7, [fp, #-3164]	; 0xfffff3a4
   2ca30:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2ca34:	mov	r0, #4
   2ca38:	str	r2, [fp, #-3156]	; 0xfffff3ac
   2ca3c:	str	r6, [fp, #-3152]	; 0xfffff3b0
   2ca40:	str	r9, [fp, #-3148]	; 0xfffff3b4
   2ca44:	bne	2d190 <__assert_fail@plt+0x1b4e4>
   2ca48:	mov	r1, #256	; 0x100
   2ca4c:	bl	1b90c <__assert_fail@plt+0x9c60>
   2ca50:	ldr	r1, [sp, #88]	; 0x58
   2ca54:	ldr	r5, [sp, #156]	; 0x9c
   2ca58:	cmp	r0, #0
   2ca5c:	str	r0, [r1, #44]	; 0x2c
   2ca60:	beq	2cacc <__assert_fail@plt+0x1ae20>
   2ca64:	ldr	ip, [fp, #-3176]	; 0xfffff398
   2ca68:	mov	r9, r5
   2ca6c:	cmp	ip, #0
   2ca70:	beq	2cc84 <__assert_fail@plt+0x1afd8>
   2ca74:	mov	r2, #0
   2ca78:	mov	r3, #1
   2ca7c:	mov	r1, ip
   2ca80:	mov	r7, #0
   2ca84:	b	2cc64 <__assert_fail@plt+0x1afb8>
   2ca88:	ldr	r1, [sp, #144]	; 0x90
   2ca8c:	str	r0, [fp, #-56]	; 0xffffffc8
   2ca90:	str	r1, [fp, #-3172]	; 0xfffff39c
   2ca94:	ldr	r1, [sp, #148]	; 0x94
   2ca98:	str	r1, [fp, #-3176]	; 0xfffff398
   2ca9c:	ldr	r1, [sp, #132]	; 0x84
   2caa0:	str	r1, [fp, #-3168]	; 0xfffff3a0
   2caa4:	ldr	r1, [sp, #136]	; 0x88
   2caa8:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2caac:	ldr	r1, [sp, #152]	; 0x98
   2cab0:	str	r1, [fp, #-3160]	; 0xfffff3a8
   2cab4:	ldr	r1, [sp, #140]	; 0x8c
   2cab8:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2cabc:	ldr	r1, [sp, #128]	; 0x80
   2cac0:	str	r6, [fp, #-3152]	; 0xfffff3b0
   2cac4:	str	r1, [fp, #-3148]	; 0xfffff3b4
   2cac8:	ldr	r5, [sp, #156]	; 0x9c
   2cacc:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2cad0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2cad4:	cmp	r5, #1
   2cad8:	blt	2cb0c <__assert_fail@plt+0x1ae60>
   2cadc:	sub	lr, fp, #6144	; 0x1800
   2cae0:	sub	r0, lr, #104	; 0x68
   2cae4:	add	r4, r0, #8
   2cae8:	ldr	r0, [r4], #12
   2caec:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2caf0:	subs	r5, r5, #1
   2caf4:	bne	2cae8 <__assert_fail@plt+0x1ae3c>
   2caf8:	mov	r0, #0
   2cafc:	sub	sp, fp, #48	; 0x30
   2cb00:	vpop	{d8-d9}
   2cb04:	add	sp, sp, #4
   2cb08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb0c:	mov	r0, #0
   2cb10:	sub	sp, fp, #48	; 0x30
   2cb14:	vpop	{d8-d9}
   2cb18:	add	sp, sp, #4
   2cb1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb20:	ldr	r0, [sp, #124]	; 0x7c
   2cb24:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2cb28:	ldr	r0, [sp, #128]	; 0x80
   2cb2c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2cb30:	ldr	r0, [sp, #132]	; 0x84
   2cb34:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2cb38:	ldr	r0, [sp, #44]	; 0x2c
   2cb3c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2cb40:	ldr	r0, [sp, #36]	; 0x24
   2cb44:	str	r7, [fp, #-1060]	; 0xfffffbdc
   2cb48:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2cb4c:	ldr	r0, [sp, #32]
   2cb50:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2cb54:	ldr	r0, [sp, #136]	; 0x88
   2cb58:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2cb5c:	cmp	r5, #1
   2cb60:	bge	2d100 <__assert_fail@plt+0x1b454>
   2cb64:	b	2d11c <__assert_fail@plt+0x1b470>
   2cb68:	ldr	r0, [sp, #144]	; 0x90
   2cb6c:	str	r0, [fp, #-3172]	; 0xfffff39c
   2cb70:	ldr	r0, [sp, #148]	; 0x94
   2cb74:	str	r0, [fp, #-3176]	; 0xfffff398
   2cb78:	ldr	r0, [sp, #132]	; 0x84
   2cb7c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2cb80:	ldr	r0, [sp, #136]	; 0x88
   2cb84:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2cb88:	ldr	r0, [sp, #152]	; 0x98
   2cb8c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2cb90:	ldr	r0, [sp, #140]	; 0x8c
   2cb94:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2cb98:	str	r6, [fp, #-3152]	; 0xfffff3b0
   2cb9c:	str	r9, [fp, #-3148]	; 0xfffff3b4
   2cba0:	b	2cac8 <__assert_fail@plt+0x1ae1c>
   2cba4:	ldr	r0, [sp, #48]	; 0x30
   2cba8:	ldr	r5, [sp, #156]	; 0x9c
   2cbac:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2cbb0:	ldr	r0, [sp, #64]	; 0x40
   2cbb4:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2cbb8:	ldr	r0, [sp, #60]	; 0x3c
   2cbbc:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2cbc0:	ldr	r0, [sp, #56]	; 0x38
   2cbc4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2cbc8:	ldr	r0, [sp, #52]	; 0x34
   2cbcc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2cbd0:	cmp	r5, #1
   2cbd4:	bge	2d100 <__assert_fail@plt+0x1b454>
   2cbd8:	b	2d11c <__assert_fail@plt+0x1b470>
   2cbdc:	ldr	r0, [sp, #124]	; 0x7c
   2cbe0:	mov	r5, r8
   2cbe4:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2cbe8:	ldr	r0, [sp, #128]	; 0x80
   2cbec:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2cbf0:	ldr	r0, [sp, #132]	; 0x84
   2cbf4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2cbf8:	ldr	r0, [sp, #44]	; 0x2c
   2cbfc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2cc00:	ldr	r0, [sp, #36]	; 0x24
   2cc04:	str	r7, [fp, #-1060]	; 0xfffffbdc
   2cc08:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2cc0c:	ldr	r0, [sp, #32]
   2cc10:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2cc14:	ldr	r0, [sp, #136]	; 0x88
   2cc18:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2cc1c:	b	2d0e0 <__assert_fail@plt+0x1b434>
   2cc20:	mov	lr, #0
   2cc24:	ldr	r5, [r4, lr, lsl #3]
   2cc28:	add	lr, lr, #4
   2cc2c:	tst	r5, r3
   2cc30:	beq	2cc24 <__assert_fail@plt+0x1af78>
   2cc34:	ldr	r5, [sp]
   2cc38:	sub	r6, fp, #1024	; 0x400
   2cc3c:	sub	r6, r6, #56	; 0x38
   2cc40:	ldr	r5, [r5]
   2cc44:	tst	r5, r3
   2cc48:	sub	r5, fp, #2048	; 0x800
   2cc4c:	sub	r5, r5, #56	; 0x38
   2cc50:	moveq	r5, r6
   2cc54:	add	r6, r5, lr
   2cc58:	ldr	r6, [r6, #-4]
   2cc5c:	str	r6, [r0, r7, lsl #2]
   2cc60:	b	2cc6c <__assert_fail@plt+0x1afc0>
   2cc64:	tst	r1, #1
   2cc68:	bne	2cc20 <__assert_fail@plt+0x1af74>
   2cc6c:	lsr	r6, r1, #1
   2cc70:	cmp	r2, r1, lsr #1
   2cc74:	add	r7, r7, #1
   2cc78:	lsl	r3, r3, #1
   2cc7c:	mov	r1, r6
   2cc80:	bne	2cc64 <__assert_fail@plt+0x1afb8>
   2cc84:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   2cc88:	cmp	r2, #0
   2cc8c:	beq	2cd0c <__assert_fail@plt+0x1b060>
   2cc90:	add	lr, r4, #4
   2cc94:	mov	r7, #32
   2cc98:	mov	r6, #1
   2cc9c:	mov	r5, #0
   2cca0:	b	2ccec <__assert_fail@plt+0x1b040>
   2cca4:	mov	r1, #0
   2cca8:	ldr	r4, [lr, r1, lsl #3]
   2ccac:	add	r1, r1, #4
   2ccb0:	tst	r4, r6
   2ccb4:	beq	2cca8 <__assert_fail@plt+0x1affc>
   2ccb8:	ldr	r3, [sp, #16]
   2ccbc:	ldr	r4, [r3, #100]	; 0x64
   2ccc0:	sub	r3, fp, #2048	; 0x800
   2ccc4:	tst	r4, r6
   2ccc8:	sub	r4, r3, #56	; 0x38
   2cccc:	sub	r3, fp, #1024	; 0x400
   2ccd0:	sub	r3, r3, #56	; 0x38
   2ccd4:	moveq	r4, r3
   2ccd8:	add	r1, r4, r1
   2ccdc:	add	r4, sp, #160	; 0xa0
   2cce0:	ldr	r1, [r1, #-4]
   2cce4:	str	r1, [r0, r7, lsl #2]
   2cce8:	b	2ccf4 <__assert_fail@plt+0x1b048>
   2ccec:	tst	r2, #1
   2ccf0:	bne	2cca4 <__assert_fail@plt+0x1aff8>
   2ccf4:	lsr	r1, r2, #1
   2ccf8:	cmp	r5, r2, lsr #1
   2ccfc:	add	r7, r7, #1
   2cd00:	lsl	r6, r6, #1
   2cd04:	mov	r2, r1
   2cd08:	bne	2ccec <__assert_fail@plt+0x1b040>
   2cd0c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   2cd10:	cmp	r2, #0
   2cd14:	beq	2cd94 <__assert_fail@plt+0x1b0e8>
   2cd18:	add	lr, r4, #8
   2cd1c:	mov	r7, #64	; 0x40
   2cd20:	mov	r6, #1
   2cd24:	mov	r5, #0
   2cd28:	b	2cd74 <__assert_fail@plt+0x1b0c8>
   2cd2c:	mov	r1, #0
   2cd30:	ldr	r4, [lr, r1, lsl #3]
   2cd34:	add	r1, r1, #4
   2cd38:	tst	r4, r6
   2cd3c:	beq	2cd30 <__assert_fail@plt+0x1b084>
   2cd40:	ldr	r3, [sp, #16]
   2cd44:	ldr	r4, [r3, #104]	; 0x68
   2cd48:	sub	r3, fp, #2048	; 0x800
   2cd4c:	tst	r4, r6
   2cd50:	sub	r4, r3, #56	; 0x38
   2cd54:	sub	r3, fp, #1024	; 0x400
   2cd58:	sub	r3, r3, #56	; 0x38
   2cd5c:	moveq	r4, r3
   2cd60:	add	r1, r4, r1
   2cd64:	add	r4, sp, #160	; 0xa0
   2cd68:	ldr	r1, [r1, #-4]
   2cd6c:	str	r1, [r0, r7, lsl #2]
   2cd70:	b	2cd7c <__assert_fail@plt+0x1b0d0>
   2cd74:	tst	r2, #1
   2cd78:	bne	2cd2c <__assert_fail@plt+0x1b080>
   2cd7c:	lsr	r1, r2, #1
   2cd80:	cmp	r5, r2, lsr #1
   2cd84:	add	r7, r7, #1
   2cd88:	lsl	r6, r6, #1
   2cd8c:	mov	r2, r1
   2cd90:	bne	2cd74 <__assert_fail@plt+0x1b0c8>
   2cd94:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   2cd98:	cmp	r2, #0
   2cd9c:	beq	2ce1c <__assert_fail@plt+0x1b170>
   2cda0:	add	lr, r4, #12
   2cda4:	mov	r7, #96	; 0x60
   2cda8:	mov	r6, #1
   2cdac:	mov	r5, #0
   2cdb0:	b	2cdfc <__assert_fail@plt+0x1b150>
   2cdb4:	mov	r1, #0
   2cdb8:	ldr	r4, [lr, r1, lsl #3]
   2cdbc:	add	r1, r1, #4
   2cdc0:	tst	r4, r6
   2cdc4:	beq	2cdb8 <__assert_fail@plt+0x1b10c>
   2cdc8:	ldr	r3, [sp, #16]
   2cdcc:	ldr	r4, [r3, #108]	; 0x6c
   2cdd0:	sub	r3, fp, #2048	; 0x800
   2cdd4:	tst	r4, r6
   2cdd8:	sub	r4, r3, #56	; 0x38
   2cddc:	sub	r3, fp, #1024	; 0x400
   2cde0:	sub	r3, r3, #56	; 0x38
   2cde4:	moveq	r4, r3
   2cde8:	add	r1, r4, r1
   2cdec:	add	r4, sp, #160	; 0xa0
   2cdf0:	ldr	r1, [r1, #-4]
   2cdf4:	str	r1, [r0, r7, lsl #2]
   2cdf8:	b	2ce04 <__assert_fail@plt+0x1b158>
   2cdfc:	tst	r2, #1
   2ce00:	bne	2cdb4 <__assert_fail@plt+0x1b108>
   2ce04:	lsr	r1, r2, #1
   2ce08:	cmp	r5, r2, lsr #1
   2ce0c:	add	r7, r7, #1
   2ce10:	lsl	r6, r6, #1
   2ce14:	mov	r2, r1
   2ce18:	bne	2cdfc <__assert_fail@plt+0x1b150>
   2ce1c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   2ce20:	cmp	r2, #0
   2ce24:	beq	2cea4 <__assert_fail@plt+0x1b1f8>
   2ce28:	add	lr, r4, #16
   2ce2c:	mov	r7, #128	; 0x80
   2ce30:	mov	r6, #1
   2ce34:	mov	r5, #0
   2ce38:	b	2ce84 <__assert_fail@plt+0x1b1d8>
   2ce3c:	mov	r1, #0
   2ce40:	ldr	r4, [lr, r1, lsl #3]
   2ce44:	add	r1, r1, #4
   2ce48:	tst	r4, r6
   2ce4c:	beq	2ce40 <__assert_fail@plt+0x1b194>
   2ce50:	ldr	r3, [sp, #4]
   2ce54:	ldr	r4, [r3]
   2ce58:	sub	r3, fp, #2048	; 0x800
   2ce5c:	tst	r4, r6
   2ce60:	sub	r4, r3, #56	; 0x38
   2ce64:	sub	r3, fp, #1024	; 0x400
   2ce68:	sub	r3, r3, #56	; 0x38
   2ce6c:	moveq	r4, r3
   2ce70:	add	r1, r4, r1
   2ce74:	add	r4, sp, #160	; 0xa0
   2ce78:	ldr	r1, [r1, #-4]
   2ce7c:	str	r1, [r0, r7, lsl #2]
   2ce80:	b	2ce8c <__assert_fail@plt+0x1b1e0>
   2ce84:	tst	r2, #1
   2ce88:	bne	2ce3c <__assert_fail@plt+0x1b190>
   2ce8c:	lsr	r1, r2, #1
   2ce90:	cmp	r5, r2, lsr #1
   2ce94:	add	r7, r7, #1
   2ce98:	lsl	r6, r6, #1
   2ce9c:	mov	r2, r1
   2cea0:	bne	2ce84 <__assert_fail@plt+0x1b1d8>
   2cea4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   2cea8:	cmp	r2, #0
   2ceac:	beq	2cf2c <__assert_fail@plt+0x1b280>
   2ceb0:	add	lr, r4, #20
   2ceb4:	mov	r7, #160	; 0xa0
   2ceb8:	mov	r6, #1
   2cebc:	mov	r5, #0
   2cec0:	b	2cf0c <__assert_fail@plt+0x1b260>
   2cec4:	mov	r1, #0
   2cec8:	ldr	r4, [lr, r1, lsl #3]
   2cecc:	add	r1, r1, #4
   2ced0:	tst	r4, r6
   2ced4:	beq	2cec8 <__assert_fail@plt+0x1b21c>
   2ced8:	ldr	r3, [sp, #16]
   2cedc:	ldr	r4, [r3, #116]	; 0x74
   2cee0:	sub	r3, fp, #2048	; 0x800
   2cee4:	tst	r4, r6
   2cee8:	sub	r4, r3, #56	; 0x38
   2ceec:	sub	r3, fp, #1024	; 0x400
   2cef0:	sub	r3, r3, #56	; 0x38
   2cef4:	moveq	r4, r3
   2cef8:	add	r1, r4, r1
   2cefc:	add	r4, sp, #160	; 0xa0
   2cf00:	ldr	r1, [r1, #-4]
   2cf04:	str	r1, [r0, r7, lsl #2]
   2cf08:	b	2cf14 <__assert_fail@plt+0x1b268>
   2cf0c:	tst	r2, #1
   2cf10:	bne	2cec4 <__assert_fail@plt+0x1b218>
   2cf14:	lsr	r1, r2, #1
   2cf18:	cmp	r5, r2, lsr #1
   2cf1c:	add	r7, r7, #1
   2cf20:	lsl	r6, r6, #1
   2cf24:	mov	r2, r1
   2cf28:	bne	2cf0c <__assert_fail@plt+0x1b260>
   2cf2c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   2cf30:	cmp	r2, #0
   2cf34:	beq	2cfb4 <__assert_fail@plt+0x1b308>
   2cf38:	add	lr, r4, #24
   2cf3c:	mov	r7, #192	; 0xc0
   2cf40:	mov	r6, #1
   2cf44:	mov	r5, #0
   2cf48:	b	2cf94 <__assert_fail@plt+0x1b2e8>
   2cf4c:	mov	r1, #0
   2cf50:	ldr	r4, [lr, r1, lsl #3]
   2cf54:	add	r1, r1, #4
   2cf58:	tst	r4, r6
   2cf5c:	beq	2cf50 <__assert_fail@plt+0x1b2a4>
   2cf60:	ldr	r3, [sp, #16]
   2cf64:	ldr	r4, [r3, #120]	; 0x78
   2cf68:	sub	r3, fp, #2048	; 0x800
   2cf6c:	tst	r4, r6
   2cf70:	sub	r4, r3, #56	; 0x38
   2cf74:	sub	r3, fp, #1024	; 0x400
   2cf78:	sub	r3, r3, #56	; 0x38
   2cf7c:	moveq	r4, r3
   2cf80:	add	r1, r4, r1
   2cf84:	add	r4, sp, #160	; 0xa0
   2cf88:	ldr	r1, [r1, #-4]
   2cf8c:	str	r1, [r0, r7, lsl #2]
   2cf90:	b	2cf9c <__assert_fail@plt+0x1b2f0>
   2cf94:	tst	r2, #1
   2cf98:	bne	2cf4c <__assert_fail@plt+0x1b2a0>
   2cf9c:	lsr	r1, r2, #1
   2cfa0:	cmp	r5, r2, lsr #1
   2cfa4:	add	r7, r7, #1
   2cfa8:	lsl	r6, r6, #1
   2cfac:	mov	r2, r1
   2cfb0:	bne	2cf94 <__assert_fail@plt+0x1b2e8>
   2cfb4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   2cfb8:	cmp	r2, #0
   2cfbc:	beq	2d038 <__assert_fail@plt+0x1b38c>
   2cfc0:	mov	r3, #224	; 0xe0
   2cfc4:	mov	r7, #1
   2cfc8:	mov	r6, #0
   2cfcc:	b	2d018 <__assert_fail@plt+0x1b36c>
   2cfd0:	ldr	r1, [sp, #12]
   2cfd4:	mov	lr, #0
   2cfd8:	ldr	r5, [r1, lr, lsl #3]
   2cfdc:	add	lr, lr, #4
   2cfe0:	tst	r5, r7
   2cfe4:	beq	2cfd8 <__assert_fail@plt+0x1b32c>
   2cfe8:	ldr	r1, [sp, #16]
   2cfec:	ldr	r5, [r1, #124]	; 0x7c
   2cff0:	sub	r1, fp, #2048	; 0x800
   2cff4:	tst	r5, r7
   2cff8:	sub	r5, r1, #56	; 0x38
   2cffc:	sub	r1, fp, #1024	; 0x400
   2d000:	sub	r1, r1, #56	; 0x38
   2d004:	moveq	r5, r1
   2d008:	add	r1, r5, lr
   2d00c:	ldr	r1, [r1, #-4]
   2d010:	str	r1, [r0, r3, lsl #2]
   2d014:	b	2d020 <__assert_fail@plt+0x1b374>
   2d018:	tst	r2, #1
   2d01c:	bne	2cfd0 <__assert_fail@plt+0x1b324>
   2d020:	lsr	r1, r2, #1
   2d024:	cmp	r6, r2, lsr #1
   2d028:	add	r3, r3, #1
   2d02c:	lsl	r7, r7, #1
   2d030:	mov	r2, r1
   2d034:	bne	2d018 <__assert_fail@plt+0x1b36c>
   2d038:	tst	ip, #1024	; 0x400
   2d03c:	beq	2d07c <__assert_fail@plt+0x1b3d0>
   2d040:	mov	r1, #0
   2d044:	add	r2, r4, r1, lsl #5
   2d048:	ldrb	r2, [r2, #1]
   2d04c:	tst	r2, #4
   2d050:	bne	2d064 <__assert_fail@plt+0x1b3b8>
   2d054:	add	r1, r1, #1
   2d058:	cmp	r1, r9
   2d05c:	blt	2d044 <__assert_fail@plt+0x1b398>
   2d060:	b	2d07c <__assert_fail@plt+0x1b3d0>
   2d064:	sub	lr, fp, #3072	; 0xc00
   2d068:	tst	r8, #1
   2d06c:	sub	r2, lr, #56	; 0x38
   2d070:	ldr	r1, [r2, r1, lsl #2]
   2d074:	str	r1, [r0, #40]	; 0x28
   2d078:	strne	r1, [r0, #1064]	; 0x428
   2d07c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2d080:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2d084:	sub	lr, fp, #6144	; 0x1800
   2d088:	sub	r0, lr, #104	; 0x68
   2d08c:	add	r4, r0, #8
   2d090:	ldr	r0, [r4], #12
   2d094:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2d098:	subs	r9, r9, #1
   2d09c:	bne	2d090 <__assert_fail@plt+0x1b3e4>
   2d0a0:	mov	r0, #1
   2d0a4:	sub	sp, fp, #48	; 0x30
   2d0a8:	vpop	{d8-d9}
   2d0ac:	add	sp, sp, #4
   2d0b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0b4:	ldr	r0, [sp, #48]	; 0x30
   2d0b8:	ldr	r5, [sp, #156]	; 0x9c
   2d0bc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2d0c0:	ldr	r0, [sp, #64]	; 0x40
   2d0c4:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2d0c8:	ldr	r0, [sp, #60]	; 0x3c
   2d0cc:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2d0d0:	ldr	r0, [sp, #56]	; 0x38
   2d0d4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2d0d8:	ldr	r0, [sp, #52]	; 0x34
   2d0dc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2d0e0:	sub	lr, fp, #6144	; 0x1800
   2d0e4:	mov	r0, #0
   2d0e8:	add	r1, r5, r5, lsl #1
   2d0ec:	sub	r2, lr, #104	; 0x68
   2d0f0:	str	r0, [r4]
   2d0f4:	str	r0, [r2, r1, lsl #2]
   2d0f8:	cmp	r5, #1
   2d0fc:	blt	2d11c <__assert_fail@plt+0x1b470>
   2d100:	sub	lr, fp, #6144	; 0x1800
   2d104:	sub	r0, lr, #104	; 0x68
   2d108:	add	r4, r0, #8
   2d10c:	ldr	r0, [r4], #12
   2d110:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2d114:	subs	r5, r5, #1
   2d118:	bne	2d10c <__assert_fail@plt+0x1b460>
   2d11c:	mvn	r5, #0
   2d120:	mov	r0, #0
   2d124:	cmp	r5, #0
   2d128:	beq	2d13c <__assert_fail@plt+0x1b490>
   2d12c:	sub	sp, fp, #48	; 0x30
   2d130:	vpop	{d8-d9}
   2d134:	add	sp, sp, #4
   2d138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d13c:	mov	r0, #4
   2d140:	mov	r1, #256	; 0x100
   2d144:	bl	1b90c <__assert_fail@plt+0x9c60>
   2d148:	ldr	r1, [sp, #88]	; 0x58
   2d14c:	cmp	r0, #0
   2d150:	str	r0, [r1, #44]	; 0x2c
   2d154:	movwne	r0, #1
   2d158:	sub	sp, fp, #48	; 0x30
   2d15c:	vpop	{d8-d9}
   2d160:	add	sp, sp, #4
   2d164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d168:	mov	r0, #0
   2d16c:	str	r0, [r6]
   2d170:	str	r0, [r5]
   2d174:	mov	r5, r4
   2d178:	cmp	r5, #1
   2d17c:	bge	2d100 <__assert_fail@plt+0x1b454>
   2d180:	b	2d11c <__assert_fail@plt+0x1b470>
   2d184:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2d188:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2d18c:	b	2cadc <__assert_fail@plt+0x1ae30>
   2d190:	mov	r1, #512	; 0x200
   2d194:	bl	1b90c <__assert_fail@plt+0x9c60>
   2d198:	ldr	r1, [sp, #88]	; 0x58
   2d19c:	ldr	r5, [sp, #156]	; 0x9c
   2d1a0:	cmp	r0, #0
   2d1a4:	str	r0, [r1, #48]	; 0x30
   2d1a8:	beq	2cacc <__assert_fail@plt+0x1ae20>
   2d1ac:	ldr	ip, [fp, #-3176]	; 0xfffff398
   2d1b0:	mov	r9, r5
   2d1b4:	cmp	ip, #0
   2d1b8:	beq	2d244 <__assert_fail@plt+0x1b598>
   2d1bc:	sub	lr, fp, #1024	; 0x400
   2d1c0:	mov	r7, #0
   2d1c4:	mov	r6, #1
   2d1c8:	mov	r5, #0
   2d1cc:	sub	r1, lr, #56	; 0x38
   2d1d0:	sub	lr, fp, #2048	; 0x800
   2d1d4:	sub	r4, r1, #4
   2d1d8:	sub	r1, lr, #56	; 0x38
   2d1dc:	sub	lr, r1, #4
   2d1e0:	mov	r1, ip
   2d1e4:	b	2d224 <__assert_fail@plt+0x1b578>
   2d1e8:	add	r3, sp, #160	; 0xa0
   2d1ec:	mov	r9, r4
   2d1f0:	mov	r8, lr
   2d1f4:	ldr	r2, [r3], #32
   2d1f8:	add	r9, r9, #4
   2d1fc:	add	r8, r8, #4
   2d200:	tst	r2, r6
   2d204:	beq	2d1f4 <__assert_fail@plt+0x1b548>
   2d208:	ldr	r2, [r9]
   2d20c:	mov	r3, r0
   2d210:	str	r2, [r3, r5, lsl #2]!
   2d214:	ldr	r2, [r8]
   2d218:	ldr	r9, [sp, #156]	; 0x9c
   2d21c:	str	r2, [r3, #1024]	; 0x400
   2d220:	b	2d22c <__assert_fail@plt+0x1b580>
   2d224:	tst	r1, #1
   2d228:	bne	2d1e8 <__assert_fail@plt+0x1b53c>
   2d22c:	lsr	r2, r1, #1
   2d230:	cmp	r7, r1, lsr #1
   2d234:	add	r5, r5, #1
   2d238:	lsl	r6, r6, #1
   2d23c:	mov	r1, r2
   2d240:	bne	2d224 <__assert_fail@plt+0x1b578>
   2d244:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   2d248:	cmp	r2, #0
   2d24c:	beq	2d2dc <__assert_fail@plt+0x1b630>
   2d250:	add	r1, sp, #160	; 0xa0
   2d254:	sub	lr, fp, #2048	; 0x800
   2d258:	mov	r5, #32
   2d25c:	mov	r3, #0
   2d260:	add	r4, r1, #4
   2d264:	sub	r1, lr, #56	; 0x38
   2d268:	sub	lr, r1, #4
   2d26c:	sub	r1, fp, #1024	; 0x400
   2d270:	sub	r1, r1, #56	; 0x38
   2d274:	sub	r8, r1, #4
   2d278:	mov	r1, #1
   2d27c:	b	2d2bc <__assert_fail@plt+0x1b610>
   2d280:	mov	r7, r4
   2d284:	mov	r9, lr
   2d288:	mov	sl, r8
   2d28c:	ldr	r6, [r7], #32
   2d290:	add	r9, r9, #4
   2d294:	add	sl, sl, #4
   2d298:	tst	r6, r1
   2d29c:	beq	2d28c <__assert_fail@plt+0x1b5e0>
   2d2a0:	ldr	r6, [sl]
   2d2a4:	mov	r7, r0
   2d2a8:	str	r6, [r7, r5, lsl #2]!
   2d2ac:	ldr	r6, [r9]
   2d2b0:	ldr	r9, [sp, #156]	; 0x9c
   2d2b4:	str	r6, [r7, #1024]	; 0x400
   2d2b8:	b	2d2c4 <__assert_fail@plt+0x1b618>
   2d2bc:	tst	r2, #1
   2d2c0:	bne	2d280 <__assert_fail@plt+0x1b5d4>
   2d2c4:	lsr	r6, r2, #1
   2d2c8:	cmp	r3, r2, lsr #1
   2d2cc:	add	r5, r5, #1
   2d2d0:	lsl	r1, r1, #1
   2d2d4:	mov	r2, r6
   2d2d8:	bne	2d2bc <__assert_fail@plt+0x1b610>
   2d2dc:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   2d2e0:	cmp	r2, #0
   2d2e4:	beq	2d374 <__assert_fail@plt+0x1b6c8>
   2d2e8:	add	r1, sp, #160	; 0xa0
   2d2ec:	sub	lr, fp, #2048	; 0x800
   2d2f0:	mov	r5, #64	; 0x40
   2d2f4:	mov	r3, #0
   2d2f8:	add	r4, r1, #8
   2d2fc:	sub	r1, lr, #56	; 0x38
   2d300:	sub	lr, r1, #4
   2d304:	sub	r1, fp, #1024	; 0x400
   2d308:	sub	r1, r1, #56	; 0x38
   2d30c:	sub	r8, r1, #4
   2d310:	mov	r1, #1
   2d314:	b	2d354 <__assert_fail@plt+0x1b6a8>
   2d318:	mov	r7, r4
   2d31c:	mov	r9, lr
   2d320:	mov	sl, r8
   2d324:	ldr	r6, [r7], #32
   2d328:	add	r9, r9, #4
   2d32c:	add	sl, sl, #4
   2d330:	tst	r6, r1
   2d334:	beq	2d324 <__assert_fail@plt+0x1b678>
   2d338:	ldr	r6, [sl]
   2d33c:	mov	r7, r0
   2d340:	str	r6, [r7, r5, lsl #2]!
   2d344:	ldr	r6, [r9]
   2d348:	ldr	r9, [sp, #156]	; 0x9c
   2d34c:	str	r6, [r7, #1024]	; 0x400
   2d350:	b	2d35c <__assert_fail@plt+0x1b6b0>
   2d354:	tst	r2, #1
   2d358:	bne	2d318 <__assert_fail@plt+0x1b66c>
   2d35c:	lsr	r6, r2, #1
   2d360:	cmp	r3, r2, lsr #1
   2d364:	add	r5, r5, #1
   2d368:	lsl	r1, r1, #1
   2d36c:	mov	r2, r6
   2d370:	bne	2d354 <__assert_fail@plt+0x1b6a8>
   2d374:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   2d378:	cmp	r2, #0
   2d37c:	beq	2d40c <__assert_fail@plt+0x1b760>
   2d380:	add	r1, sp, #160	; 0xa0
   2d384:	sub	lr, fp, #2048	; 0x800
   2d388:	mov	r5, #96	; 0x60
   2d38c:	mov	r3, #0
   2d390:	add	r4, r1, #12
   2d394:	sub	r1, lr, #56	; 0x38
   2d398:	sub	lr, r1, #4
   2d39c:	sub	r1, fp, #1024	; 0x400
   2d3a0:	sub	r1, r1, #56	; 0x38
   2d3a4:	sub	r8, r1, #4
   2d3a8:	mov	r1, #1
   2d3ac:	b	2d3ec <__assert_fail@plt+0x1b740>
   2d3b0:	mov	r7, r4
   2d3b4:	mov	r9, lr
   2d3b8:	mov	sl, r8
   2d3bc:	ldr	r6, [r7], #32
   2d3c0:	add	r9, r9, #4
   2d3c4:	add	sl, sl, #4
   2d3c8:	tst	r6, r1
   2d3cc:	beq	2d3bc <__assert_fail@plt+0x1b710>
   2d3d0:	ldr	r6, [sl]
   2d3d4:	mov	r7, r0
   2d3d8:	str	r6, [r7, r5, lsl #2]!
   2d3dc:	ldr	r6, [r9]
   2d3e0:	ldr	r9, [sp, #156]	; 0x9c
   2d3e4:	str	r6, [r7, #1024]	; 0x400
   2d3e8:	b	2d3f4 <__assert_fail@plt+0x1b748>
   2d3ec:	tst	r2, #1
   2d3f0:	bne	2d3b0 <__assert_fail@plt+0x1b704>
   2d3f4:	lsr	r6, r2, #1
   2d3f8:	cmp	r3, r2, lsr #1
   2d3fc:	add	r5, r5, #1
   2d400:	lsl	r1, r1, #1
   2d404:	mov	r2, r6
   2d408:	bne	2d3ec <__assert_fail@plt+0x1b740>
   2d40c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   2d410:	cmp	r2, #0
   2d414:	beq	2d4a4 <__assert_fail@plt+0x1b7f8>
   2d418:	add	r1, sp, #160	; 0xa0
   2d41c:	sub	lr, fp, #2048	; 0x800
   2d420:	mov	r5, #128	; 0x80
   2d424:	mov	r3, #0
   2d428:	add	r4, r1, #16
   2d42c:	sub	r1, lr, #56	; 0x38
   2d430:	sub	lr, r1, #4
   2d434:	sub	r1, fp, #1024	; 0x400
   2d438:	sub	r1, r1, #56	; 0x38
   2d43c:	sub	r8, r1, #4
   2d440:	mov	r1, #1
   2d444:	b	2d484 <__assert_fail@plt+0x1b7d8>
   2d448:	mov	r7, r4
   2d44c:	mov	r9, lr
   2d450:	mov	sl, r8
   2d454:	ldr	r6, [r7], #32
   2d458:	add	r9, r9, #4
   2d45c:	add	sl, sl, #4
   2d460:	tst	r6, r1
   2d464:	beq	2d454 <__assert_fail@plt+0x1b7a8>
   2d468:	ldr	r6, [sl]
   2d46c:	mov	r7, r0
   2d470:	str	r6, [r7, r5, lsl #2]!
   2d474:	ldr	r6, [r9]
   2d478:	ldr	r9, [sp, #156]	; 0x9c
   2d47c:	str	r6, [r7, #1024]	; 0x400
   2d480:	b	2d48c <__assert_fail@plt+0x1b7e0>
   2d484:	tst	r2, #1
   2d488:	bne	2d448 <__assert_fail@plt+0x1b79c>
   2d48c:	lsr	r6, r2, #1
   2d490:	cmp	r3, r2, lsr #1
   2d494:	add	r5, r5, #1
   2d498:	lsl	r1, r1, #1
   2d49c:	mov	r2, r6
   2d4a0:	bne	2d484 <__assert_fail@plt+0x1b7d8>
   2d4a4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   2d4a8:	cmp	r2, #0
   2d4ac:	beq	2d53c <__assert_fail@plt+0x1b890>
   2d4b0:	add	r1, sp, #160	; 0xa0
   2d4b4:	sub	lr, fp, #2048	; 0x800
   2d4b8:	mov	r5, #160	; 0xa0
   2d4bc:	mov	r3, #0
   2d4c0:	add	r4, r1, #20
   2d4c4:	sub	r1, lr, #56	; 0x38
   2d4c8:	sub	lr, r1, #4
   2d4cc:	sub	r1, fp, #1024	; 0x400
   2d4d0:	sub	r1, r1, #56	; 0x38
   2d4d4:	sub	r8, r1, #4
   2d4d8:	mov	r1, #1
   2d4dc:	b	2d51c <__assert_fail@plt+0x1b870>
   2d4e0:	mov	r7, r4
   2d4e4:	mov	r9, lr
   2d4e8:	mov	sl, r8
   2d4ec:	ldr	r6, [r7], #32
   2d4f0:	add	r9, r9, #4
   2d4f4:	add	sl, sl, #4
   2d4f8:	tst	r6, r1
   2d4fc:	beq	2d4ec <__assert_fail@plt+0x1b840>
   2d500:	ldr	r6, [sl]
   2d504:	mov	r7, r0
   2d508:	str	r6, [r7, r5, lsl #2]!
   2d50c:	ldr	r6, [r9]
   2d510:	ldr	r9, [sp, #156]	; 0x9c
   2d514:	str	r6, [r7, #1024]	; 0x400
   2d518:	b	2d524 <__assert_fail@plt+0x1b878>
   2d51c:	tst	r2, #1
   2d520:	bne	2d4e0 <__assert_fail@plt+0x1b834>
   2d524:	lsr	r6, r2, #1
   2d528:	cmp	r3, r2, lsr #1
   2d52c:	add	r5, r5, #1
   2d530:	lsl	r1, r1, #1
   2d534:	mov	r2, r6
   2d538:	bne	2d51c <__assert_fail@plt+0x1b870>
   2d53c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   2d540:	cmp	r2, #0
   2d544:	beq	2d5d4 <__assert_fail@plt+0x1b928>
   2d548:	add	r1, sp, #160	; 0xa0
   2d54c:	sub	lr, fp, #2048	; 0x800
   2d550:	mov	r5, #192	; 0xc0
   2d554:	mov	r3, #0
   2d558:	add	r4, r1, #24
   2d55c:	sub	r1, lr, #56	; 0x38
   2d560:	sub	lr, r1, #4
   2d564:	sub	r1, fp, #1024	; 0x400
   2d568:	sub	r1, r1, #56	; 0x38
   2d56c:	sub	r8, r1, #4
   2d570:	mov	r1, #1
   2d574:	b	2d5b4 <__assert_fail@plt+0x1b908>
   2d578:	mov	r7, r4
   2d57c:	mov	r9, lr
   2d580:	mov	sl, r8
   2d584:	ldr	r6, [r7], #32
   2d588:	add	r9, r9, #4
   2d58c:	add	sl, sl, #4
   2d590:	tst	r6, r1
   2d594:	beq	2d584 <__assert_fail@plt+0x1b8d8>
   2d598:	ldr	r6, [sl]
   2d59c:	mov	r7, r0
   2d5a0:	str	r6, [r7, r5, lsl #2]!
   2d5a4:	ldr	r6, [r9]
   2d5a8:	ldr	r9, [sp, #156]	; 0x9c
   2d5ac:	str	r6, [r7, #1024]	; 0x400
   2d5b0:	b	2d5bc <__assert_fail@plt+0x1b910>
   2d5b4:	tst	r2, #1
   2d5b8:	bne	2d578 <__assert_fail@plt+0x1b8cc>
   2d5bc:	lsr	r6, r2, #1
   2d5c0:	cmp	r3, r2, lsr #1
   2d5c4:	add	r5, r5, #1
   2d5c8:	lsl	r1, r1, #1
   2d5cc:	mov	r2, r6
   2d5d0:	bne	2d5b4 <__assert_fail@plt+0x1b908>
   2d5d4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   2d5d8:	cmp	r2, #0
   2d5dc:	beq	2d66c <__assert_fail@plt+0x1b9c0>
   2d5e0:	add	r1, sp, #160	; 0xa0
   2d5e4:	sub	lr, fp, #2048	; 0x800
   2d5e8:	mov	r5, #224	; 0xe0
   2d5ec:	mov	r3, #0
   2d5f0:	add	r4, r1, #28
   2d5f4:	sub	r1, lr, #56	; 0x38
   2d5f8:	sub	lr, r1, #4
   2d5fc:	sub	r1, fp, #1024	; 0x400
   2d600:	sub	r1, r1, #56	; 0x38
   2d604:	sub	r8, r1, #4
   2d608:	mov	r1, #1
   2d60c:	b	2d64c <__assert_fail@plt+0x1b9a0>
   2d610:	mov	r7, r4
   2d614:	mov	r9, lr
   2d618:	mov	sl, r8
   2d61c:	ldr	r6, [r7], #32
   2d620:	add	r9, r9, #4
   2d624:	add	sl, sl, #4
   2d628:	tst	r6, r1
   2d62c:	beq	2d61c <__assert_fail@plt+0x1b970>
   2d630:	ldr	r6, [sl]
   2d634:	mov	r7, r0
   2d638:	str	r6, [r7, r5, lsl #2]!
   2d63c:	ldr	r6, [r9]
   2d640:	ldr	r9, [sp, #156]	; 0x9c
   2d644:	str	r6, [r7, #1024]	; 0x400
   2d648:	b	2d654 <__assert_fail@plt+0x1b9a8>
   2d64c:	tst	r2, #1
   2d650:	bne	2d610 <__assert_fail@plt+0x1b964>
   2d654:	lsr	r6, r2, #1
   2d658:	cmp	r3, r2, lsr #1
   2d65c:	add	r5, r5, #1
   2d660:	lsl	r1, r1, #1
   2d664:	mov	r2, r6
   2d668:	bne	2d64c <__assert_fail@plt+0x1b9a0>
   2d66c:	ldr	r8, [sp, #124]	; 0x7c
   2d670:	add	r4, sp, #160	; 0xa0
   2d674:	tst	ip, #1024	; 0x400
   2d678:	bne	2d040 <__assert_fail@plt+0x1b394>
   2d67c:	b	2d07c <__assert_fail@plt+0x1b3d0>
   2d680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d684:	add	fp, sp, #28
   2d688:	sub	sp, sp, #68	; 0x44
   2d68c:	ldr	r4, [r1, #8]
   2d690:	ldr	r6, [r1, #12]
   2d694:	mov	r8, r0
   2d698:	mov	r0, #1
   2d69c:	mov	r5, r1
   2d6a0:	str	r0, [fp, #-36]	; 0xffffffdc
   2d6a4:	str	r0, [fp, #-40]	; 0xffffffd8
   2d6a8:	mov	r0, #4
   2d6ac:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2d6b0:	cmp	r0, #0
   2d6b4:	str	r0, [fp, #-32]	; 0xffffffe0
   2d6b8:	beq	2dd4c <__assert_fail@plt+0x1c0a0>
   2d6bc:	str	r4, [r0]
   2d6c0:	sub	r3, fp, #40	; 0x28
   2d6c4:	mov	r0, r8
   2d6c8:	mov	r1, r5
   2d6cc:	mov	r2, r6
   2d6d0:	str	r5, [sp, #28]
   2d6d4:	bl	2dd70 <__assert_fail@plt+0x1c0c4>
   2d6d8:	cmp	r0, #0
   2d6dc:	bne	2dd04 <__assert_fail@plt+0x1c058>
   2d6e0:	mov	r4, r6
   2d6e4:	mov	r9, #1
   2d6e8:	mov	r1, #0
   2d6ec:	str	r8, [sp, #48]	; 0x30
   2d6f0:	cmp	r4, #1
   2d6f4:	blt	2dd0c <__assert_fail@plt+0x1c060>
   2d6f8:	ldr	lr, [sp, #28]
   2d6fc:	ldr	r0, [lr]
   2d700:	ldr	r2, [r0, r4, lsl #2]
   2d704:	cmp	r2, #0
   2d708:	mov	r2, #0
   2d70c:	addeq	r2, r1, #1
   2d710:	ldr	r1, [r8, #120]	; 0x78
   2d714:	cmp	r2, r1
   2d718:	bgt	2dd14 <__assert_fail@plt+0x1c068>
   2d71c:	mov	r0, #0
   2d720:	str	r4, [sp, #36]	; 0x24
   2d724:	sub	r4, r4, #1
   2d728:	str	r2, [sp, #4]
   2d72c:	str	r0, [fp, #-36]	; 0xffffffdc
   2d730:	ldr	r0, [r8, #100]	; 0x64
   2d734:	ldr	r1, [r0, r4, lsl #2]
   2d738:	cmp	r1, #0
   2d73c:	beq	2dce4 <__assert_fail@plt+0x1c038>
   2d740:	ldr	r0, [r1, #20]
   2d744:	cmp	r0, #1
   2d748:	blt	2dce4 <__assert_fail@plt+0x1c038>
   2d74c:	ldr	r0, [r8, #84]	; 0x54
   2d750:	mov	r2, #0
   2d754:	str	r4, [sp, #32]
   2d758:	str	r1, [sp, #16]
   2d75c:	str	r0, [sp, #24]
   2d760:	b	2d820 <__assert_fail@plt+0x1bb74>
   2d764:	cmp	r2, r1
   2d768:	bne	2d7a4 <__assert_fail@plt+0x1baf8>
   2d76c:	lsl	r0, r2, #1
   2d770:	lsl	r1, r2, #3
   2d774:	str	r0, [fp, #-40]	; 0xffffffd8
   2d778:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2d77c:	bl	1bd04 <__assert_fail@plt+0xa058>
   2d780:	cmp	r0, #0
   2d784:	beq	2dd68 <__assert_fail@plt+0x1c0bc>
   2d788:	str	r0, [fp, #-32]	; 0xffffffe0
   2d78c:	ldr	lr, [sp, #28]
   2d790:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2d794:	ldr	r2, [r0]
   2d798:	cmp	r2, r5
   2d79c:	bgt	2d7b4 <__assert_fail@plt+0x1bb08>
   2d7a0:	b	2d7e8 <__assert_fail@plt+0x1bb3c>
   2d7a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2d7a8:	ldr	r2, [r0]
   2d7ac:	cmp	r2, r5
   2d7b0:	ble	2d7e8 <__assert_fail@plt+0x1bb3c>
   2d7b4:	cmp	r1, #1
   2d7b8:	blt	2d818 <__assert_fail@plt+0x1bb6c>
   2d7bc:	add	r2, r0, r1, lsl #2
   2d7c0:	add	r1, r1, #1
   2d7c4:	mov	r3, r2
   2d7c8:	ldr	r7, [r3, #-4]!
   2d7cc:	sub	r1, r1, #1
   2d7d0:	cmp	r1, #1
   2d7d4:	str	r7, [r2]
   2d7d8:	mov	r2, r3
   2d7dc:	bgt	2d7c8 <__assert_fail@plt+0x1bb1c>
   2d7e0:	sub	r1, r1, #1
   2d7e4:	b	2d818 <__assert_fail@plt+0x1bb6c>
   2d7e8:	add	r2, r0, r1, lsl #2
   2d7ec:	ldr	r3, [r2, #-4]
   2d7f0:	cmp	r3, r5
   2d7f4:	ble	2d818 <__assert_fail@plt+0x1bb6c>
   2d7f8:	sub	r1, r1, #2
   2d7fc:	str	r3, [r2]
   2d800:	sub	r1, r1, #1
   2d804:	ldr	r3, [r2, #-8]
   2d808:	sub	r2, r2, #4
   2d80c:	cmp	r3, r5
   2d810:	bgt	2d7fc <__assert_fail@plt+0x1bb50>
   2d814:	add	r1, r1, #2
   2d818:	str	r5, [r0, r1, lsl #2]
   2d81c:	b	2dc94 <__assert_fail@plt+0x1bfe8>
   2d820:	ldr	r0, [r1, #24]
   2d824:	str	r2, [sp, #20]
   2d828:	ldr	r2, [r0, r2, lsl #2]
   2d82c:	ldr	r0, [sp, #24]
   2d830:	ldr	r0, [r0]
   2d834:	mov	r1, r2
   2d838:	str	r2, [fp, #-44]	; 0xffffffd4
   2d83c:	add	r0, r0, r2, lsl #3
   2d840:	ldrb	r0, [r0, #6]
   2d844:	tst	r0, #16
   2d848:	bne	2d8e8 <__assert_fail@plt+0x1bc3c>
   2d84c:	ldr	r0, [sp, #24]
   2d850:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2d854:	mov	r2, r4
   2d858:	ldr	r0, [r0]
   2d85c:	add	r1, r0, r1, lsl #3
   2d860:	mov	r0, r8
   2d864:	bl	2b6c8 <__assert_fail@plt+0x19a1c>
   2d868:	ldr	lr, [sp, #28]
   2d86c:	cmp	r0, #0
   2d870:	beq	2dccc <__assert_fail@plt+0x1c020>
   2d874:	ldr	r0, [lr]
   2d878:	ldr	r1, [sp, #36]	; 0x24
   2d87c:	ldr	r0, [r0, r1, lsl #2]
   2d880:	cmp	r0, #0
   2d884:	beq	2dccc <__assert_fail@plt+0x1c020>
   2d888:	ldr	r2, [r0, #8]
   2d88c:	cmp	r2, #1
   2d890:	blt	2dccc <__assert_fail@plt+0x1c020>
   2d894:	ldr	r1, [sp, #24]
   2d898:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2d89c:	ldr	r0, [r0, #12]
   2d8a0:	ldr	r1, [r1, #12]
   2d8a4:	ldr	r1, [r1, r3, lsl #2]
   2d8a8:	subs	r3, r2, #1
   2d8ac:	mov	r2, #0
   2d8b0:	beq	2d8d4 <__assert_fail@plt+0x1bc28>
   2d8b4:	add	r7, r2, r3
   2d8b8:	lsr	r6, r7, #1
   2d8bc:	ldr	r5, [r0, r6, lsl #2]
   2d8c0:	cmp	r5, r1
   2d8c4:	movge	r3, r6
   2d8c8:	addlt	r2, r9, r7, lsr #1
   2d8cc:	cmp	r2, r3
   2d8d0:	bcc	2d8b4 <__assert_fail@plt+0x1bc08>
   2d8d4:	ldr	r2, [r0, r2, lsl #2]
   2d8d8:	mov	r0, #1
   2d8dc:	cmp	r2, r1
   2d8e0:	beq	2d944 <__assert_fail@plt+0x1bc98>
   2d8e4:	b	2dccc <__assert_fail@plt+0x1c020>
   2d8e8:	ldr	r7, [r8, #84]	; 0x54
   2d8ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2d8f0:	mov	r5, r4
   2d8f4:	ldr	r4, [lr, #12]
   2d8f8:	mov	r2, r8
   2d8fc:	mov	r3, r5
   2d900:	mov	r0, r7
   2d904:	bl	2b3b0 <__assert_fail@plt+0x19704>
   2d908:	cmp	r0, #1
   2d90c:	blt	2d934 <__assert_fail@plt+0x1bc88>
   2d910:	add	r1, r0, r5
   2d914:	cmp	r1, r4
   2d918:	ble	2d9ec <__assert_fail@plt+0x1bd40>
   2d91c:	ldr	lr, [sp, #28]
   2d920:	ldr	r4, [sp, #32]
   2d924:	ldr	ip, [lr, #20]
   2d928:	cmp	ip, #0
   2d92c:	bne	2d950 <__assert_fail@plt+0x1bca4>
   2d930:	b	2dc70 <__assert_fail@plt+0x1bfc4>
   2d934:	ldr	lr, [sp, #28]
   2d938:	cmp	r0, #0
   2d93c:	mov	r4, r5
   2d940:	beq	2d84c <__assert_fail@plt+0x1bba0>
   2d944:	ldr	ip, [lr, #20]
   2d948:	cmp	ip, #0
   2d94c:	beq	2dc70 <__assert_fail@plt+0x1bfc4>
   2d950:	add	r0, r0, r4
   2d954:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2d958:	str	r0, [sp, #40]	; 0x28
   2d95c:	ldr	r0, [sp, #24]
   2d960:	ldr	r0, [r0, #12]
   2d964:	ldr	r0, [r0, r1, lsl #2]
   2d968:	str	r0, [sp, #8]
   2d96c:	ldr	r0, [r8, #108]	; 0x6c
   2d970:	cmp	r0, #1
   2d974:	blt	2da68 <__assert_fail@plt+0x1bdbc>
   2d978:	ldr	r2, [r8, #116]	; 0x74
   2d97c:	ldr	r1, [sp, #40]	; 0x28
   2d980:	mov	sl, #0
   2d984:	mov	r3, r0
   2d988:	add	r7, r3, sl
   2d98c:	add	r7, r7, r7, lsr #31
   2d990:	asr	r6, r7, #1
   2d994:	add	r5, r6, r6, lsl #1
   2d998:	add	r5, r2, r5, lsl #3
   2d99c:	ldr	r5, [r5, #4]
   2d9a0:	cmp	r5, r1
   2d9a4:	addlt	sl, r9, r7, asr #1
   2d9a8:	movge	r3, r6
   2d9ac:	cmp	sl, r3
   2d9b0:	blt	2d988 <__assert_fail@plt+0x1bcdc>
   2d9b4:	cmp	sl, r0
   2d9b8:	bge	2da78 <__assert_fail@plt+0x1bdcc>
   2d9bc:	ldr	r2, [r8, #116]	; 0x74
   2d9c0:	add	r3, sl, sl, lsl #1
   2d9c4:	add	r2, r2, r3, lsl #3
   2d9c8:	ldr	r2, [r2, #4]
   2d9cc:	cmp	r2, r1
   2d9d0:	mvnne	sl, #0
   2d9d4:	cmp	r0, #1
   2d9d8:	bge	2da84 <__assert_fail@plt+0x1bdd8>
   2d9dc:	mov	r5, #0
   2d9e0:	cmp	r5, r0
   2d9e4:	blt	2dac4 <__assert_fail@plt+0x1be18>
   2d9e8:	b	2dae8 <__assert_fail@plt+0x1be3c>
   2d9ec:	ldr	lr, [sp, #28]
   2d9f0:	ldr	r4, [sp, #32]
   2d9f4:	ldr	r2, [lr]
   2d9f8:	ldr	r2, [r2, r1, lsl #2]
   2d9fc:	cmp	r2, #0
   2da00:	beq	2d84c <__assert_fail@plt+0x1bba0>
   2da04:	ldr	r3, [r2, #8]
   2da08:	cmp	r3, #1
   2da0c:	blt	2d84c <__assert_fail@plt+0x1bba0>
   2da10:	ldr	r1, [r7, #12]
   2da14:	ldr	r7, [fp, #-44]	; 0xffffffd4
   2da18:	ldr	r2, [r2, #12]
   2da1c:	ldr	r1, [r1, r7, lsl #2]
   2da20:	subs	r7, r3, #1
   2da24:	mov	r3, #0
   2da28:	beq	2da4c <__assert_fail@plt+0x1bda0>
   2da2c:	add	r6, r3, r7
   2da30:	lsr	r5, r6, #1
   2da34:	ldr	r4, [r2, r5, lsl #2]
   2da38:	cmp	r4, r1
   2da3c:	movge	r7, r5
   2da40:	addlt	r3, r9, r6, lsr #1
   2da44:	cmp	r3, r7
   2da48:	bcc	2da2c <__assert_fail@plt+0x1bd80>
   2da4c:	ldr	r4, [sp, #32]
   2da50:	cmp	r0, #0
   2da54:	beq	2d84c <__assert_fail@plt+0x1bba0>
   2da58:	ldr	r2, [r2, r3, lsl #2]
   2da5c:	cmp	r2, r1
   2da60:	beq	2d944 <__assert_fail@plt+0x1bc98>
   2da64:	b	2d84c <__assert_fail@plt+0x1bba0>
   2da68:	ldr	r1, [sp, #40]	; 0x28
   2da6c:	mov	sl, #0
   2da70:	cmp	sl, r0
   2da74:	blt	2d9bc <__assert_fail@plt+0x1bd10>
   2da78:	mvn	sl, #0
   2da7c:	cmp	r0, #1
   2da80:	blt	2d9dc <__assert_fail@plt+0x1bd30>
   2da84:	ldr	r2, [r8, #116]	; 0x74
   2da88:	mov	r5, #0
   2da8c:	mov	r3, r0
   2da90:	add	r7, r3, r5
   2da94:	add	r7, r7, r7, lsr #31
   2da98:	asr	r6, r7, #1
   2da9c:	add	r1, r6, r6, lsl #1
   2daa0:	add	r1, r2, r1, lsl #3
   2daa4:	ldr	r1, [r1, #4]
   2daa8:	cmp	r1, r4
   2daac:	addlt	r5, r9, r7, asr #1
   2dab0:	movge	r3, r6
   2dab4:	cmp	r5, r3
   2dab8:	blt	2da90 <__assert_fail@plt+0x1bde4>
   2dabc:	cmp	r5, r0
   2dac0:	bge	2dae8 <__assert_fail@plt+0x1be3c>
   2dac4:	ldr	r0, [r8, #116]	; 0x74
   2dac8:	add	r1, r5, r5, lsl #1
   2dacc:	add	r0, r0, r1, lsl #3
   2dad0:	ldr	r0, [r0, #4]
   2dad4:	cmp	r0, r4
   2dad8:	mvnne	r5, #0
   2dadc:	cmp	ip, #1
   2dae0:	bge	2daf4 <__assert_fail@plt+0x1be48>
   2dae4:	b	2dc70 <__assert_fail@plt+0x1bfc4>
   2dae8:	mvn	r5, #0
   2daec:	cmp	ip, #1
   2daf0:	blt	2dc70 <__assert_fail@plt+0x1bfc4>
   2daf4:	ldr	ip, [r8, #84]	; 0x54
   2daf8:	mov	r6, #0
   2dafc:	str	ip, [sp, #12]
   2db00:	ldr	r0, [lr, #24]
   2db04:	ldr	r3, [r8, #116]	; 0x74
   2db08:	ldr	r4, [ip]
   2db0c:	mvn	r8, #0
   2db10:	ldr	r2, [r0, r6, lsl #2]
   2db14:	mov	r0, r3
   2db18:	add	r1, r2, r2, lsl #1
   2db1c:	ldr	r7, [r0, r1, lsl #3]!
   2db20:	ldr	r4, [r4, r7, lsl #3]
   2db24:	ldr	r0, [r0, #8]
   2db28:	ldr	r7, [sp, #40]	; 0x28
   2db2c:	cmp	r0, r7
   2db30:	str	r4, [sp, #44]	; 0x2c
   2db34:	ble	2db50 <__assert_fail@plt+0x1bea4>
   2db38:	mvn	r9, #0
   2db3c:	ldr	r1, [sp, #36]	; 0x24
   2db40:	ldr	r4, [sp, #32]
   2db44:	cmp	r0, r1
   2db48:	blt	2dbd4 <__assert_fail@plt+0x1bf28>
   2db4c:	b	2dc50 <__assert_fail@plt+0x1bfa4>
   2db50:	add	r1, r3, r1, lsl #3
   2db54:	mov	r9, #1
   2db58:	ldr	r1, [r1, #12]
   2db5c:	cmp	r1, r7
   2db60:	blt	2dbc4 <__assert_fail@plt+0x1bf18>
   2db64:	sub	r1, r1, r7
   2db68:	cmp	r0, r7
   2db6c:	mov	r7, #1
   2db70:	clz	r1, r1
   2db74:	lsr	r4, r1, #5
   2db78:	lsl	r1, r4, #1
   2db7c:	orreq	r1, r7, r4, lsl #1
   2db80:	cmp	r1, #0
   2db84:	beq	2dc34 <__assert_fail@plt+0x1bf88>
   2db88:	ldr	r4, [sp, #48]	; 0x30
   2db8c:	ldr	r2, [sp, #44]	; 0x2c
   2db90:	ldr	r3, [sp, #8]
   2db94:	str	sl, [sp]
   2db98:	mov	r0, r4
   2db9c:	bl	2f2b0 <__assert_fail@plt+0x1d604>
   2dba0:	ldr	lr, [sp, #28]
   2dba4:	mov	r9, r0
   2dba8:	ldr	r3, [r4, #116]	; 0x74
   2dbac:	ldr	ip, [sp, #12]
   2dbb0:	ldr	r0, [lr, #24]
   2dbb4:	ldr	r2, [r0, r6, lsl #2]
   2dbb8:	add	r0, r2, r2, lsl #1
   2dbbc:	add	r0, r3, r0, lsl #3
   2dbc0:	ldr	r0, [r0, #8]
   2dbc4:	ldr	r1, [sp, #36]	; 0x24
   2dbc8:	ldr	r4, [sp, #32]
   2dbcc:	cmp	r0, r1
   2dbd0:	bge	2dc50 <__assert_fail@plt+0x1bfa4>
   2dbd4:	add	r1, r2, r2, lsl #1
   2dbd8:	mov	r8, #1
   2dbdc:	add	r1, r3, r1, lsl #3
   2dbe0:	ldr	r1, [r1, #12]
   2dbe4:	cmp	r1, r4
   2dbe8:	blt	2dc50 <__assert_fail@plt+0x1bfa4>
   2dbec:	sub	r1, r1, r4
   2dbf0:	cmp	r0, r4
   2dbf4:	mov	r0, #1
   2dbf8:	clz	r1, r1
   2dbfc:	lsr	r2, r1, #5
   2dc00:	lsl	r1, r2, #1
   2dc04:	orreq	r1, r0, r2, lsl #1
   2dc08:	cmp	r1, #0
   2dc0c:	beq	2dc4c <__assert_fail@plt+0x1bfa0>
   2dc10:	ldr	r0, [sp, #48]	; 0x30
   2dc14:	ldr	r2, [sp, #44]	; 0x2c
   2dc18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2dc1c:	str	r5, [sp]
   2dc20:	bl	2f2b0 <__assert_fail@plt+0x1d604>
   2dc24:	ldr	ip, [sp, #12]
   2dc28:	ldr	lr, [sp, #28]
   2dc2c:	mov	r8, r0
   2dc30:	b	2dc50 <__assert_fail@plt+0x1bfa4>
   2dc34:	mov	r9, #0
   2dc38:	ldr	r1, [sp, #36]	; 0x24
   2dc3c:	ldr	r4, [sp, #32]
   2dc40:	cmp	r0, r1
   2dc44:	blt	2dbd4 <__assert_fail@plt+0x1bf28>
   2dc48:	b	2dc50 <__assert_fail@plt+0x1bfa4>
   2dc4c:	mov	r8, #0
   2dc50:	cmp	r8, r9
   2dc54:	ldr	r8, [sp, #48]	; 0x30
   2dc58:	mov	r9, #1
   2dc5c:	bne	2dccc <__assert_fail@plt+0x1c020>
   2dc60:	ldr	r0, [lr, #20]
   2dc64:	add	r6, r6, #1
   2dc68:	cmp	r6, r0
   2dc6c:	blt	2db00 <__assert_fail@plt+0x1be54>
   2dc70:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2dc74:	cmp	r2, #0
   2dc78:	beq	2dca4 <__assert_fail@plt+0x1bff8>
   2dc7c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2dc80:	ldr	r5, [fp, #-44]	; 0xffffffd4
   2dc84:	cmp	r1, #0
   2dc88:	bne	2d764 <__assert_fail@plt+0x1bab8>
   2dc8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2dc90:	str	r5, [r0]
   2dc94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2dc98:	add	r0, r0, #1
   2dc9c:	str	r0, [fp, #-36]	; 0xffffffdc
   2dca0:	b	2dccc <__assert_fail@plt+0x1c020>
   2dca4:	mov	r0, #4
   2dca8:	str	r9, [fp, #-36]	; 0xffffffdc
   2dcac:	str	r9, [fp, #-40]	; 0xffffffd8
   2dcb0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2dcb4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2dcb8:	cmp	r0, #0
   2dcbc:	str	r0, [fp, #-32]	; 0xffffffe0
   2dcc0:	beq	2dd38 <__assert_fail@plt+0x1c08c>
   2dcc4:	ldr	lr, [sp, #28]
   2dcc8:	str	r1, [r0]
   2dccc:	ldr	r1, [sp, #16]
   2dcd0:	ldr	r2, [sp, #20]
   2dcd4:	ldr	r0, [r1, #20]
   2dcd8:	add	r2, r2, #1
   2dcdc:	cmp	r2, r0
   2dce0:	blt	2d820 <__assert_fail@plt+0x1bb74>
   2dce4:	mov	r0, r8
   2dce8:	mov	r1, lr
   2dcec:	mov	r2, r4
   2dcf0:	sub	r3, fp, #40	; 0x28
   2dcf4:	bl	2dd70 <__assert_fail@plt+0x1c0c4>
   2dcf8:	ldr	r1, [sp, #4]
   2dcfc:	cmp	r0, #0
   2dd00:	beq	2d6f0 <__assert_fail@plt+0x1ba44>
   2dd04:	mov	r7, r0
   2dd08:	b	2dd24 <__assert_fail@plt+0x1c078>
   2dd0c:	mov	r7, #0
   2dd10:	b	2dd24 <__assert_fail@plt+0x1c078>
   2dd14:	lsl	r2, r4, #2
   2dd18:	mov	r1, #0
   2dd1c:	mov	r7, #0
   2dd20:	bl	11b2c <memset@plt>
   2dd24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2dd28:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2dd2c:	mov	r0, r7
   2dd30:	sub	sp, fp, #28
   2dd34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd38:	mov	r0, #0
   2dd3c:	mov	r7, #12
   2dd40:	str	r0, [fp, #-40]	; 0xffffffd8
   2dd44:	str	r0, [fp, #-36]	; 0xffffffdc
   2dd48:	b	2dd24 <__assert_fail@plt+0x1c078>
   2dd4c:	mov	r0, #0
   2dd50:	mov	r7, #12
   2dd54:	str	r0, [fp, #-40]	; 0xffffffd8
   2dd58:	str	r0, [fp, #-36]	; 0xffffffdc
   2dd5c:	mov	r0, r7
   2dd60:	sub	sp, fp, #28
   2dd64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd68:	mov	r7, #12
   2dd6c:	b	2dd24 <__assert_fail@plt+0x1c078>
   2dd70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd74:	add	fp, sp, #28
   2dd78:	sub	sp, sp, #140	; 0x8c
   2dd7c:	mov	r9, r3
   2dd80:	mov	r3, #0
   2dd84:	ldr	r6, [r0, #84]	; 0x54
   2dd88:	mov	r4, r1
   2dd8c:	str	r2, [fp, #-80]	; 0xffffffb0
   2dd90:	str	r0, [sp, #64]	; 0x40
   2dd94:	str	r3, [fp, #-76]	; 0xffffffb4
   2dd98:	str	r4, [sp, #80]	; 0x50
   2dd9c:	ldr	r1, [r0, #100]	; 0x64
   2dda0:	ldr	r7, [r1, r2, lsl #2]
   2dda4:	cmp	r7, #0
   2dda8:	mov	r1, r7
   2ddac:	addne	r1, r1, #4
   2ddb0:	str	r1, [sp, #68]	; 0x44
   2ddb4:	ldr	r1, [r9, #4]
   2ddb8:	cmp	r1, #0
   2ddbc:	beq	2e1d4 <__assert_fail@plt+0x1c528>
   2ddc0:	cmp	r7, #0
   2ddc4:	beq	2e19c <__assert_fail@plt+0x1c4f0>
   2ddc8:	mov	r0, #0
   2ddcc:	mov	r1, r6
   2ddd0:	mov	r2, r9
   2ddd4:	str	r9, [sp, #60]	; 0x3c
   2ddd8:	str	r0, [fp, #-72]	; 0xffffffb8
   2dddc:	sub	r0, fp, #72	; 0x48
   2dde0:	bl	2b110 <__assert_fail@plt+0x19464>
   2dde4:	ldr	r9, [fp, #-72]	; 0xffffffb8
   2dde8:	cmp	r9, #0
   2ddec:	bne	2ebec <__assert_fail@plt+0x1cf40>
   2ddf0:	mov	r4, r0
   2ddf4:	mov	r5, r0
   2ddf8:	str	r6, [sp, #76]	; 0x4c
   2ddfc:	ldr	r0, [r4, #28]!
   2de00:	cmp	r0, #0
   2de04:	bne	2de98 <__assert_fail@plt+0x1c1ec>
   2de08:	ldr	r8, [sp, #60]	; 0x3c
   2de0c:	mov	r6, #0
   2de10:	ldr	r0, [r8, #4]
   2de14:	str	r0, [r5, #28]
   2de18:	lsl	r0, r0, #2
   2de1c:	str	r6, [r5, #32]
   2de20:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2de24:	cmp	r0, #0
   2de28:	mov	r9, #12
   2de2c:	str	r0, [r5, #36]	; 0x24
   2de30:	movweq	r6, #12
   2de34:	str	r6, [fp, #-72]	; 0xffffffb8
   2de38:	beq	2ebec <__assert_fail@plt+0x1cf40>
   2de3c:	ldr	r0, [r8, #4]
   2de40:	ldr	r6, [sp, #76]	; 0x4c
   2de44:	cmp	r0, #1
   2de48:	blt	2de98 <__assert_fail@plt+0x1c1ec>
   2de4c:	ldr	r6, [sp, #60]	; 0x3c
   2de50:	mov	r5, #0
   2de54:	ldr	r0, [r6, #8]
   2de58:	ldr	r1, [sp, #76]	; 0x4c
   2de5c:	ldr	r0, [r0, r5, lsl #2]
   2de60:	ldr	r1, [r1, #28]
   2de64:	add	r0, r0, r0, lsl #1
   2de68:	add	r1, r1, r0, lsl #2
   2de6c:	mov	r0, r4
   2de70:	bl	26f6c <__assert_fail@plt+0x152c0>
   2de74:	cmp	r0, #0
   2de78:	bne	2ebe8 <__assert_fail@plt+0x1cf3c>
   2de7c:	ldr	r0, [r6, #4]
   2de80:	add	r5, r5, #1
   2de84:	cmp	r5, r0
   2de88:	blt	2de54 <__assert_fail@plt+0x1c1a8>
   2de8c:	ldr	r6, [sp, #76]	; 0x4c
   2de90:	mov	r0, #0
   2de94:	str	r0, [fp, #-72]	; 0xffffffb8
   2de98:	ldr	r5, [sp, #68]	; 0x44
   2de9c:	ldr	r0, [sp, #60]	; 0x3c
   2dea0:	mov	r2, r4
   2dea4:	mov	r1, r5
   2dea8:	bl	2ec54 <__assert_fail@plt+0x1cfa8>
   2deac:	cmp	r0, #0
   2deb0:	str	r0, [fp, #-76]	; 0xffffffb4
   2deb4:	bne	2ec10 <__assert_fail@plt+0x1cf64>
   2deb8:	ldr	r4, [sp, #80]	; 0x50
   2debc:	ldr	r9, [sp, #60]	; 0x3c
   2dec0:	ldr	r0, [r4, #20]
   2dec4:	cmp	r0, #0
   2dec8:	beq	2e19c <__assert_fail@plt+0x1c4f0>
   2decc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2ded0:	cmp	r0, #1
   2ded4:	str	r7, [sp, #56]	; 0x38
   2ded8:	blt	2e190 <__assert_fail@plt+0x1c4e4>
   2dedc:	ldr	r0, [sp, #64]	; 0x40
   2dee0:	mov	r1, #0
   2dee4:	ldr	r0, [r0, #116]	; 0x74
   2dee8:	str	r0, [sp, #72]	; 0x48
   2deec:	ldr	r0, [r4, #24]
   2def0:	str	r1, [sp, #84]	; 0x54
   2def4:	ldr	r0, [r0, r1, lsl #2]
   2def8:	ldr	r1, [sp, #72]	; 0x48
   2defc:	add	r0, r0, r0, lsl #1
   2df00:	add	r1, r1, r0, lsl #3
   2df04:	ldr	r2, [r1, #8]
   2df08:	cmp	r2, lr
   2df0c:	bge	2e17c <__assert_fail@plt+0x1c4d0>
   2df10:	ldr	r1, [r1, #4]
   2df14:	cmp	r1, lr
   2df18:	blt	2e17c <__assert_fail@plt+0x1c4d0>
   2df1c:	ldr	r1, [sp, #72]	; 0x48
   2df20:	ldr	r2, [r6]
   2df24:	ldr	r0, [r1, r0, lsl #3]!
   2df28:	ldr	r1, [r1, #12]
   2df2c:	ldr	sl, [r2, r0, lsl #3]
   2df30:	ldr	r0, [r9, #4]
   2df34:	cmp	r1, lr
   2df38:	bne	2e100 <__assert_fail@plt+0x1c454>
   2df3c:	cmp	r0, #1
   2df40:	blt	2e17c <__assert_fail@plt+0x1c4d0>
   2df44:	ldr	r3, [r9, #8]
   2df48:	mvn	r8, #0
   2df4c:	mvn	r1, #0
   2df50:	ldr	r7, [r3]
   2df54:	add	r6, r2, r7, lsl #3
   2df58:	ldrb	r6, [r6, #4]
   2df5c:	cmp	r6, #9
   2df60:	beq	2df88 <__assert_fail@plt+0x1c2dc>
   2df64:	cmp	r6, #8
   2df68:	bne	2df78 <__assert_fail@plt+0x1c2cc>
   2df6c:	ldr	r6, [r2, r7, lsl #3]
   2df70:	cmp	sl, r6
   2df74:	moveq	r1, r7
   2df78:	add	r3, r3, #4
   2df7c:	subs	r0, r0, #1
   2df80:	bne	2df50 <__assert_fail@plt+0x1c2a4>
   2df84:	b	2dfa0 <__assert_fail@plt+0x1c2f4>
   2df88:	ldr	r6, [r2, r7, lsl #3]
   2df8c:	cmp	sl, r6
   2df90:	moveq	r8, r7
   2df94:	add	r3, r3, #4
   2df98:	subs	r0, r0, #1
   2df9c:	bne	2df50 <__assert_fail@plt+0x1c2a4>
   2dfa0:	ldr	r6, [sp, #76]	; 0x4c
   2dfa4:	cmp	r1, #0
   2dfa8:	blt	2dfc8 <__assert_fail@plt+0x1c31c>
   2dfac:	ldr	r2, [sp, #60]	; 0x3c
   2dfb0:	mov	r0, r6
   2dfb4:	mov	r3, r5
   2dfb8:	bl	2ee70 <__assert_fail@plt+0x1d1c4>
   2dfbc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2dfc0:	cmp	r0, #0
   2dfc4:	bne	2ebc0 <__assert_fail@plt+0x1cf14>
   2dfc8:	ldr	r9, [sp, #60]	; 0x3c
   2dfcc:	cmp	r8, #0
   2dfd0:	ldrge	ip, [r9, #4]
   2dfd4:	cmpge	ip, #1
   2dfd8:	blt	2e17c <__assert_fail@plt+0x1c4d0>
   2dfdc:	mov	sl, #0
   2dfe0:	ldr	r1, [r9, #8]
   2dfe4:	ldr	r3, [r6, #28]
   2dfe8:	ldr	r1, [r1, sl, lsl #2]
   2dfec:	add	r2, r1, r1, lsl #1
   2dff0:	add	r3, r3, r2, lsl #2
   2dff4:	ldr	r7, [r3, #4]
   2dff8:	cmp	r7, #1
   2dffc:	blt	2e060 <__assert_fail@plt+0x1c3b4>
   2e000:	ldr	r3, [r3, #8]
   2e004:	mov	lr, ip
   2e008:	subs	r6, r7, #1
   2e00c:	beq	2e03c <__assert_fail@plt+0x1c390>
   2e010:	mov	r7, #0
   2e014:	mov	ip, #1
   2e018:	add	r0, r7, r6
   2e01c:	lsr	r4, r0, #1
   2e020:	ldr	r5, [r3, r4, lsl #2]
   2e024:	cmp	r5, r8
   2e028:	movge	r6, r4
   2e02c:	addlt	r7, ip, r0, lsr #1
   2e030:	cmp	r7, r6
   2e034:	bcc	2e018 <__assert_fail@plt+0x1c36c>
   2e038:	b	2e040 <__assert_fail@plt+0x1c394>
   2e03c:	mov	r7, #0
   2e040:	ldr	r0, [r3, r7, lsl #2]
   2e044:	mov	ip, lr
   2e048:	ldr	r4, [sp, #80]	; 0x50
   2e04c:	ldr	r5, [sp, #68]	; 0x44
   2e050:	ldr	r6, [sp, #76]	; 0x4c
   2e054:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e058:	cmp	r0, r8
   2e05c:	beq	2e0f0 <__assert_fail@plt+0x1c444>
   2e060:	ldr	r0, [r6, #24]
   2e064:	add	r2, r0, r2, lsl #2
   2e068:	ldr	r3, [r2, #4]
   2e06c:	cmp	r3, #1
   2e070:	blt	2e0c8 <__assert_fail@plt+0x1c41c>
   2e074:	ldr	r2, [r2, #8]
   2e078:	subs	r7, r3, #1
   2e07c:	beq	2e0ac <__assert_fail@plt+0x1c400>
   2e080:	mov	r3, #0
   2e084:	mov	r4, #1
   2e088:	add	r0, r3, r7
   2e08c:	lsr	r6, r0, #1
   2e090:	ldr	r5, [r2, r6, lsl #2]
   2e094:	cmp	r5, r8
   2e098:	movge	r7, r6
   2e09c:	addlt	r3, r4, r0, lsr #1
   2e0a0:	cmp	r3, r7
   2e0a4:	bcc	2e088 <__assert_fail@plt+0x1c3dc>
   2e0a8:	b	2e0b0 <__assert_fail@plt+0x1c404>
   2e0ac:	mov	r3, #0
   2e0b0:	ldr	r0, [r2, r3, lsl #2]
   2e0b4:	ldr	r4, [sp, #80]	; 0x50
   2e0b8:	ldr	r5, [sp, #68]	; 0x44
   2e0bc:	ldr	r6, [sp, #76]	; 0x4c
   2e0c0:	cmp	r0, r8
   2e0c4:	beq	2e0f0 <__assert_fail@plt+0x1c444>
   2e0c8:	mov	r0, r6
   2e0cc:	mov	r2, r9
   2e0d0:	mov	r3, r5
   2e0d4:	bl	2ee70 <__assert_fail@plt+0x1d1c4>
   2e0d8:	cmp	r0, #0
   2e0dc:	bne	2ebc0 <__assert_fail@plt+0x1cf14>
   2e0e0:	ldr	ip, [r9, #4]
   2e0e4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e0e8:	sub	sl, sl, #1
   2e0ec:	mov	r1, r9
   2e0f0:	add	sl, sl, #1
   2e0f4:	cmp	sl, ip
   2e0f8:	blt	2dfe0 <__assert_fail@plt+0x1c334>
   2e0fc:	b	2e17c <__assert_fail@plt+0x1c4d0>
   2e100:	cmp	r0, #1
   2e104:	blt	2e17c <__assert_fail@plt+0x1c4d0>
   2e108:	mov	r7, #0
   2e10c:	b	2e114 <__assert_fail@plt+0x1c468>
   2e110:	ldr	r2, [r6]
   2e114:	ldr	r1, [r9, #8]
   2e118:	ldr	r1, [r1, r7, lsl #2]
   2e11c:	add	r3, r2, r1, lsl #3
   2e120:	ldr	r3, [r3, #4]
   2e124:	and	r3, r3, #254	; 0xfe
   2e128:	orr	r3, r3, #1
   2e12c:	cmp	r3, #9
   2e130:	ldreq	r2, [r2, r1, lsl #3]
   2e134:	cmpeq	sl, r2
   2e138:	beq	2e14c <__assert_fail@plt+0x1c4a0>
   2e13c:	add	r7, r7, #1
   2e140:	cmp	r7, r0
   2e144:	blt	2e110 <__assert_fail@plt+0x1c464>
   2e148:	b	2e17c <__assert_fail@plt+0x1c4d0>
   2e14c:	mov	r0, r6
   2e150:	mov	r2, r9
   2e154:	mov	r3, r5
   2e158:	bl	2ee70 <__assert_fail@plt+0x1d1c4>
   2e15c:	cmp	r0, #0
   2e160:	bne	2ebc0 <__assert_fail@plt+0x1cf14>
   2e164:	ldr	r0, [r9, #4]
   2e168:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e16c:	mov	r1, r9
   2e170:	add	r7, r7, #1
   2e174:	cmp	r7, r0
   2e178:	blt	2e110 <__assert_fail@plt+0x1c464>
   2e17c:	ldr	r1, [sp, #84]	; 0x54
   2e180:	ldr	r0, [r4, #20]
   2e184:	add	r1, r1, #1
   2e188:	cmp	r1, r0
   2e18c:	blt	2deec <__assert_fail@plt+0x1c240>
   2e190:	ldr	r7, [sp, #56]	; 0x38
   2e194:	mov	r0, #0
   2e198:	str	r0, [fp, #-76]	; 0xffffffb4
   2e19c:	sub	r0, fp, #76	; 0x4c
   2e1a0:	mov	r1, r6
   2e1a4:	mov	r2, r9
   2e1a8:	bl	2b110 <__assert_fail@plt+0x19464>
   2e1ac:	ldr	r1, [r4]
   2e1b0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   2e1b4:	str	r0, [r1, r4, lsl #2]
   2e1b8:	ldr	r0, [sp, #64]	; 0x40
   2e1bc:	ldr	r9, [fp, #-76]	; 0xffffffb4
   2e1c0:	cmp	r9, #0
   2e1c4:	bne	2eb90 <__assert_fail@plt+0x1cee4>
   2e1c8:	cmp	r7, #0
   2e1cc:	bne	2e1e8 <__assert_fail@plt+0x1c53c>
   2e1d0:	b	2ebb0 <__assert_fail@plt+0x1cf04>
   2e1d4:	ldr	r1, [r4]
   2e1d8:	mov	r4, r2
   2e1dc:	str	r3, [r1, r2, lsl #2]
   2e1e0:	cmp	r7, #0
   2e1e4:	beq	2ebb0 <__assert_fail@plt+0x1cf04>
   2e1e8:	ldr	r1, [r0, #100]	; 0x64
   2e1ec:	ldr	r1, [r1, r4, lsl #2]
   2e1f0:	ldrb	r1, [r1, #52]	; 0x34
   2e1f4:	tst	r1, #64	; 0x40
   2e1f8:	beq	2ebb0 <__assert_fail@plt+0x1cf04>
   2e1fc:	ldr	lr, [r0, #108]	; 0x6c
   2e200:	ldr	r8, [r0, #84]	; 0x54
   2e204:	cmp	lr, #1
   2e208:	blt	2eb9c <__assert_fail@plt+0x1cef0>
   2e20c:	ldr	r1, [r0, #116]	; 0x74
   2e210:	mov	ip, #0
   2e214:	mov	r2, #1
   2e218:	mov	r3, lr
   2e21c:	add	r7, r3, ip
   2e220:	add	r7, r7, r7, lsr #31
   2e224:	asr	r6, r7, #1
   2e228:	add	r5, r6, r6, lsl #1
   2e22c:	add	r5, r1, r5, lsl #3
   2e230:	ldr	r5, [r5, #4]
   2e234:	cmp	r5, r4
   2e238:	addlt	ip, r2, r7, asr #1
   2e23c:	movge	r3, r6
   2e240:	cmp	ip, r3
   2e244:	blt	2e21c <__assert_fail@plt+0x1c570>
   2e248:	cmp	ip, lr
   2e24c:	bge	2eba8 <__assert_fail@plt+0x1cefc>
   2e250:	cmn	ip, #1
   2e254:	beq	2eba8 <__assert_fail@plt+0x1cefc>
   2e258:	ldr	r2, [r0, #116]	; 0x74
   2e25c:	add	r1, ip, ip, lsl #1
   2e260:	str	r1, [sp, #20]
   2e264:	add	r1, r2, r1, lsl #3
   2e268:	ldr	r1, [r1, #4]
   2e26c:	cmp	r1, r4
   2e270:	bne	2eba8 <__assert_fail@plt+0x1cefc>
   2e274:	ldr	r1, [sp, #68]	; 0x44
   2e278:	mov	r2, #0
   2e27c:	str	r2, [fp, #-72]	; 0xffffffb8
   2e280:	ldr	r3, [r1, #4]
   2e284:	cmp	r3, #0
   2e288:	ble	2ebd4 <__assert_fail@plt+0x1cf28>
   2e28c:	sub	r0, fp, #72	; 0x48
   2e290:	ldr	r5, [sp, #80]	; 0x50
   2e294:	mov	r9, #1
   2e298:	mov	lr, #0
   2e29c:	mov	r7, r8
   2e2a0:	str	r8, [sp, #60]	; 0x3c
   2e2a4:	str	ip, [sp, #24]
   2e2a8:	add	r0, r0, #16
   2e2ac:	str	r0, [sp, #8]
   2e2b0:	mov	r0, #0
   2e2b4:	str	r0, [sp, #32]
   2e2b8:	ldr	r0, [r1, #8]
   2e2bc:	ldr	r1, [r5, #8]
   2e2c0:	str	sl, [sp, #48]	; 0x30
   2e2c4:	ldr	r8, [r0, lr, lsl #2]
   2e2c8:	ldr	r0, [r7]
   2e2cc:	add	r0, r0, r8, lsl #3
   2e2d0:	cmp	r8, r1
   2e2d4:	ldrb	r0, [r0, #4]
   2e2d8:	bne	2e2f4 <__assert_fail@plt+0x1c648>
   2e2dc:	cmp	r0, #4
   2e2e0:	bne	2eb50 <__assert_fail@plt+0x1cea4>
   2e2e4:	ldr	r0, [r5, #12]
   2e2e8:	cmp	r0, r4
   2e2ec:	bne	2e2fc <__assert_fail@plt+0x1c650>
   2e2f0:	b	2eb50 <__assert_fail@plt+0x1cea4>
   2e2f4:	cmp	r0, #4
   2e2f8:	bne	2eb50 <__assert_fail@plt+0x1cea4>
   2e2fc:	ldr	r0, [sp, #64]	; 0x40
   2e300:	ldr	r1, [sp, #20]
   2e304:	mov	r4, ip
   2e308:	str	lr, [sp, #36]	; 0x24
   2e30c:	str	r8, [sp, #56]	; 0x38
   2e310:	ldr	r0, [r0, #116]	; 0x74
   2e314:	add	sl, r0, r1, lsl #3
   2e318:	b	2e9c4 <__assert_fail@plt+0x1cd18>
   2e31c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   2e320:	mov	r9, #0
   2e324:	cmp	r9, r0
   2e328:	blt	2eac0 <__assert_fail@plt+0x1ce14>
   2e32c:	mvn	r9, #0
   2e330:	cmp	r0, #1
   2e334:	blt	2eae0 <__assert_fail@plt+0x1ce34>
   2e338:	ldr	r1, [r7, #116]	; 0x74
   2e33c:	ldr	r4, [sp, #84]	; 0x54
   2e340:	mov	r8, #0
   2e344:	mov	r2, r0
   2e348:	mov	lr, #1
   2e34c:	add	r3, r2, r8
   2e350:	add	r3, r3, r3, lsr #31
   2e354:	asr	r6, r3, #1
   2e358:	add	r5, r6, r6, lsl #1
   2e35c:	add	r5, r1, r5, lsl #3
   2e360:	ldr	r5, [r5, #4]
   2e364:	cmp	r5, r4
   2e368:	addlt	r8, lr, r3, asr #1
   2e36c:	movge	r2, r6
   2e370:	cmp	r8, r2
   2e374:	blt	2e34c <__assert_fail@plt+0x1c6a0>
   2e378:	ldr	lr, [sp, #64]	; 0x40
   2e37c:	cmp	r8, r0
   2e380:	bge	2eaf4 <__assert_fail@plt+0x1ce48>
   2e384:	ldr	r0, [lr, #116]	; 0x74
   2e388:	add	r1, r8, r8, lsl #1
   2e38c:	add	r0, r0, r1, lsl #3
   2e390:	ldr	r0, [r0, #4]
   2e394:	cmp	r0, r4
   2e398:	mvnne	r8, #0
   2e39c:	ldr	r5, [sp, #80]	; 0x50
   2e3a0:	ldr	r4, [r5, #20]
   2e3a4:	cmp	r4, #1
   2e3a8:	blt	2e520 <__assert_fail@plt+0x1c874>
   2e3ac:	ldr	ip, [lr, #84]	; 0x54
   2e3b0:	mov	r6, #0
   2e3b4:	str	ip, [sp, #52]	; 0x34
   2e3b8:	ldr	r0, [r5, #24]
   2e3bc:	ldr	r3, [lr, #116]	; 0x74
   2e3c0:	ldr	r4, [ip]
   2e3c4:	ldr	r7, [fp, #-80]	; 0xffffffb0
   2e3c8:	ldr	r2, [r0, r6, lsl #2]
   2e3cc:	mov	r0, r3
   2e3d0:	add	r1, r2, r2, lsl #1
   2e3d4:	ldr	r5, [r0, r1, lsl #3]!
   2e3d8:	ldr	r0, [r0, #8]
   2e3dc:	ldr	r4, [r4, r5, lsl #3]
   2e3e0:	mvn	r5, #0
   2e3e4:	cmp	r0, r7
   2e3e8:	str	r4, [sp, #76]	; 0x4c
   2e3ec:	ble	2e404 <__assert_fail@plt+0x1c758>
   2e3f0:	mvn	r4, #0
   2e3f4:	ldr	r7, [sp, #84]	; 0x54
   2e3f8:	cmp	r0, r7
   2e3fc:	ble	2e484 <__assert_fail@plt+0x1c7d8>
   2e400:	b	2e504 <__assert_fail@plt+0x1c858>
   2e404:	add	r1, r3, r1, lsl #3
   2e408:	mov	r4, #1
   2e40c:	ldr	r1, [r1, #12]
   2e410:	cmp	r1, r7
   2e414:	blt	2e478 <__assert_fail@plt+0x1c7cc>
   2e418:	sub	r1, r1, r7
   2e41c:	cmp	r0, r7
   2e420:	mov	r7, #1
   2e424:	clz	r1, r1
   2e428:	lsr	r4, r1, #5
   2e42c:	lsl	r1, r4, #1
   2e430:	orreq	r1, r7, r4, lsl #1
   2e434:	cmp	r1, #0
   2e438:	beq	2e4ec <__assert_fail@plt+0x1c840>
   2e43c:	ldr	r2, [sp, #76]	; 0x4c
   2e440:	ldr	r3, [sp, #56]	; 0x38
   2e444:	mov	r0, lr
   2e448:	str	r9, [sp]
   2e44c:	bl	2f2b0 <__assert_fail@plt+0x1d604>
   2e450:	mov	r4, r0
   2e454:	ldr	r0, [sp, #80]	; 0x50
   2e458:	ldr	lr, [sp, #64]	; 0x40
   2e45c:	ldr	ip, [sp, #52]	; 0x34
   2e460:	ldr	r0, [r0, #24]
   2e464:	ldr	r3, [lr, #116]	; 0x74
   2e468:	ldr	r2, [r0, r6, lsl #2]
   2e46c:	add	r0, r2, r2, lsl #1
   2e470:	add	r0, r3, r0, lsl #3
   2e474:	ldr	r0, [r0, #8]
   2e478:	ldr	r7, [sp, #84]	; 0x54
   2e47c:	cmp	r0, r7
   2e480:	bgt	2e504 <__assert_fail@plt+0x1c858>
   2e484:	add	r1, r2, r2, lsl #1
   2e488:	mov	r5, #1
   2e48c:	add	r1, r3, r1, lsl #3
   2e490:	ldr	r1, [r1, #12]
   2e494:	cmp	r1, r7
   2e498:	blt	2e504 <__assert_fail@plt+0x1c858>
   2e49c:	sub	r1, r1, r7
   2e4a0:	cmp	r0, r7
   2e4a4:	mov	r0, #1
   2e4a8:	clz	r1, r1
   2e4ac:	lsr	r2, r1, #5
   2e4b0:	lsl	r1, r2, #1
   2e4b4:	orreq	r1, r0, r2, lsl #1
   2e4b8:	cmp	r1, #0
   2e4bc:	beq	2e500 <__assert_fail@plt+0x1c854>
   2e4c0:	ldr	r2, [sp, #76]	; 0x4c
   2e4c4:	ldr	r3, [sp, #44]	; 0x2c
   2e4c8:	mov	r0, lr
   2e4cc:	str	r8, [sp]
   2e4d0:	bl	2f2b0 <__assert_fail@plt+0x1d604>
   2e4d4:	ldr	ip, [sp, #52]	; 0x34
   2e4d8:	ldr	lr, [sp, #64]	; 0x40
   2e4dc:	mov	r5, r0
   2e4e0:	cmp	r5, r4
   2e4e4:	beq	2e50c <__assert_fail@plt+0x1c860>
   2e4e8:	b	2e57c <__assert_fail@plt+0x1c8d0>
   2e4ec:	mov	r4, #0
   2e4f0:	ldr	r7, [sp, #84]	; 0x54
   2e4f4:	cmp	r0, r7
   2e4f8:	ble	2e484 <__assert_fail@plt+0x1c7d8>
   2e4fc:	b	2e504 <__assert_fail@plt+0x1c858>
   2e500:	mov	r5, #0
   2e504:	cmp	r5, r4
   2e508:	bne	2e57c <__assert_fail@plt+0x1c8d0>
   2e50c:	ldr	r5, [sp, #80]	; 0x50
   2e510:	add	r6, r6, #1
   2e514:	ldr	r4, [r5, #20]
   2e518:	cmp	r6, r4
   2e51c:	blt	2e3b8 <__assert_fail@plt+0x1c70c>
   2e520:	ldr	r0, [sp, #32]
   2e524:	cmp	r0, #0
   2e528:	beq	2e5a0 <__assert_fail@plt+0x1c8f4>
   2e52c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2e530:	mov	r2, #1
   2e534:	str	r0, [fp, #-60]	; 0xffffffc4
   2e538:	ldr	r0, [sp, #56]	; 0x38
   2e53c:	str	r0, [fp, #-64]	; 0xffffffc0
   2e540:	ldr	r0, [sp, #16]
   2e544:	cmp	r0, #0
   2e548:	beq	2e6bc <__assert_fail@plt+0x1ca10>
   2e54c:	ldr	r4, [sp, #40]	; 0x28
   2e550:	cmp	r4, #0
   2e554:	bne	2e9ac <__assert_fail@plt+0x1cd00>
   2e558:	ldr	sl, [sp, #48]	; 0x30
   2e55c:	ldr	r0, [sp, #72]	; 0x48
   2e560:	mov	r1, #1
   2e564:	str	r0, [sl]
   2e568:	mov	r0, #1
   2e56c:	str	r1, [fp, #-52]	; 0xffffffcc
   2e570:	str	sl, [sp, #28]
   2e574:	str	r0, [sp, #40]	; 0x28
   2e578:	b	2e758 <__assert_fail@plt+0x1caac>
   2e57c:	ldr	r5, [sp, #80]	; 0x50
   2e580:	ldr	r7, [sp, #60]	; 0x3c
   2e584:	ldr	ip, [sp, #24]
   2e588:	ldr	lr, [sp, #36]	; 0x24
   2e58c:	ldr	r8, [sp, #56]	; 0x38
   2e590:	ldr	r4, [sp, #72]	; 0x48
   2e594:	mov	r0, sl
   2e598:	mov	r9, #1
   2e59c:	b	2eb3c <__assert_fail@plt+0x1ce90>
   2e5a0:	mov	r0, r5
   2e5a4:	mov	r1, #12
   2e5a8:	cmp	r4, #1
   2e5ac:	mov	r2, #1
   2e5b0:	vld1.32	{d16-d17}, [r0], r1
   2e5b4:	sub	r1, fp, #72	; 0x48
   2e5b8:	vld1.32	{d18-d19}, [r0]
   2e5bc:	add	r0, r1, #12
   2e5c0:	vst1.32	{d18-d19}, [r0]
   2e5c4:	mov	r0, r1
   2e5c8:	mov	r1, #20
   2e5cc:	vst1.64	{d16-d17}, [r0], r1
   2e5d0:	str	r4, [r0]
   2e5d4:	blt	2e698 <__assert_fail@plt+0x1c9ec>
   2e5d8:	lsl	r0, r4, #2
   2e5dc:	str	r4, [fp, #-56]	; 0xffffffc8
   2e5e0:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2e5e4:	cmp	r0, #0
   2e5e8:	str	r0, [fp, #-48]	; 0xffffffd0
   2e5ec:	beq	2ec20 <__assert_fail@plt+0x1cf74>
   2e5f0:	mov	r6, r0
   2e5f4:	ldr	r0, [r5, #20]
   2e5f8:	ldr	r1, [r5, #24]
   2e5fc:	lsl	r2, r0, #2
   2e600:	mov	r0, r6
   2e604:	bl	118ec <memcpy@plt>
   2e608:	ldr	r0, [sp, #56]	; 0x38
   2e60c:	mov	sl, r6
   2e610:	str	r0, [fp, #-64]	; 0xffffffc0
   2e614:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2e618:	str	r0, [fp, #-60]	; 0xffffffc4
   2e61c:	lsl	r0, r4, #1
   2e620:	lsl	r1, r4, #3
   2e624:	str	r0, [sp, #16]
   2e628:	str	r0, [fp, #-56]	; 0xffffffc8
   2e62c:	mov	r0, r6
   2e630:	bl	1bd04 <__assert_fail@plt+0xa058>
   2e634:	cmp	r0, #0
   2e638:	beq	2ec40 <__assert_fail@plt+0x1cf94>
   2e63c:	mov	sl, r0
   2e640:	mov	r6, r0
   2e644:	str	r0, [fp, #-48]	; 0xffffffd0
   2e648:	str	r0, [sp, #12]
   2e64c:	ldr	r0, [sl]
   2e650:	ldr	r2, [sp, #72]	; 0x48
   2e654:	cmp	r0, r2
   2e658:	ble	2e704 <__assert_fail@plt+0x1ca58>
   2e65c:	ldr	lr, [sp, #64]	; 0x40
   2e660:	cmp	r4, #1
   2e664:	mov	r2, r4
   2e668:	blt	2e740 <__assert_fail@plt+0x1ca94>
   2e66c:	add	r1, sl, r4, lsl #2
   2e670:	add	r0, r4, #1
   2e674:	mov	r2, r1
   2e678:	ldr	r3, [r2, #-4]!
   2e67c:	sub	r0, r0, #1
   2e680:	cmp	r0, #1
   2e684:	str	r3, [r1]
   2e688:	mov	r1, r2
   2e68c:	bgt	2e678 <__assert_fail@plt+0x1c9cc>
   2e690:	sub	r2, r0, #1
   2e694:	b	2e740 <__assert_fail@plt+0x1ca94>
   2e698:	ldr	r1, [sp, #8]
   2e69c:	mov	r0, #0
   2e6a0:	str	r0, [r1]
   2e6a4:	str	r0, [r1, #4]
   2e6a8:	str	r0, [r1, #8]
   2e6ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2e6b0:	str	r0, [fp, #-60]	; 0xffffffc4
   2e6b4:	ldr	r0, [sp, #56]	; 0x38
   2e6b8:	str	r0, [fp, #-64]	; 0xffffffc0
   2e6bc:	mov	r0, #4
   2e6c0:	str	r2, [fp, #-52]	; 0xffffffcc
   2e6c4:	str	r2, [fp, #-56]	; 0xffffffc8
   2e6c8:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   2e6cc:	cmp	r0, #0
   2e6d0:	str	r0, [fp, #-48]	; 0xffffffd0
   2e6d4:	beq	2ec20 <__assert_fail@plt+0x1cf74>
   2e6d8:	mov	sl, r0
   2e6dc:	ldr	r0, [sp, #72]	; 0x48
   2e6e0:	ldr	lr, [sp, #64]	; 0x40
   2e6e4:	str	sl, [sp, #12]
   2e6e8:	str	sl, [sp, #28]
   2e6ec:	str	r0, [sl]
   2e6f0:	mov	r0, #1
   2e6f4:	str	r0, [sp, #40]	; 0x28
   2e6f8:	mov	r0, #1
   2e6fc:	str	r0, [sp, #16]
   2e700:	b	2e758 <__assert_fail@plt+0x1caac>
   2e704:	add	r0, sl, r4, lsl #2
   2e708:	ldr	lr, [sp, #64]	; 0x40
   2e70c:	ldr	r1, [r0, #-4]
   2e710:	cmp	r1, r2
   2e714:	mov	r2, r4
   2e718:	ble	2e740 <__assert_fail@plt+0x1ca94>
   2e71c:	ldr	r3, [sp, #72]	; 0x48
   2e720:	sub	r2, r4, #2
   2e724:	str	r1, [r0]
   2e728:	sub	r2, r2, #1
   2e72c:	ldr	r1, [r0, #-8]
   2e730:	sub	r0, r0, #4
   2e734:	cmp	r1, r3
   2e738:	bgt	2e724 <__assert_fail@plt+0x1ca78>
   2e73c:	add	r2, r2, #2
   2e740:	ldr	r0, [sp, #72]	; 0x48
   2e744:	add	r4, r4, #1
   2e748:	str	r6, [sp, #28]
   2e74c:	str	r4, [sp, #40]	; 0x28
   2e750:	str	r0, [sl, r2, lsl #2]
   2e754:	str	r4, [fp, #-52]	; 0xffffffcc
   2e758:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2e75c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2e760:	ldr	r6, [r1, r0, lsl #2]
   2e764:	mov	r8, r1
   2e768:	mov	r0, lr
   2e76c:	sub	r1, fp, #72	; 0x48
   2e770:	bl	2d680 <__assert_fail@plt+0x1b9d4>
   2e774:	cmp	r0, #0
   2e778:	bne	2ebfc <__assert_fail@plt+0x1cf50>
   2e77c:	ldr	r5, [r5, #4]
   2e780:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2e784:	ldr	r4, [sp, #72]	; 0x48
   2e788:	mov	r7, r8
   2e78c:	cmp	r5, #0
   2e790:	beq	2e840 <__assert_fail@plt+0x1cb94>
   2e794:	mov	r3, r0
   2e798:	cmp	r0, #0
   2e79c:	str	r6, [sp, #84]	; 0x54
   2e7a0:	blt	2e838 <__assert_fail@plt+0x1cb8c>
   2e7a4:	mov	r0, #0
   2e7a8:	mov	r6, r0
   2e7ac:	ldr	r0, [r7, r0, lsl #2]
   2e7b0:	ldr	r1, [r5, r6, lsl #2]
   2e7b4:	cmp	r1, #0
   2e7b8:	beq	2e828 <__assert_fail@plt+0x1cb7c>
   2e7bc:	cmp	r0, #0
   2e7c0:	beq	2e818 <__assert_fail@plt+0x1cb6c>
   2e7c4:	sub	r4, fp, #44	; 0x2c
   2e7c8:	add	r2, r0, #4
   2e7cc:	add	r1, r1, #4
   2e7d0:	mov	r0, r4
   2e7d4:	bl	29a9c <__assert_fail@plt+0x17df0>
   2e7d8:	cmp	r0, #0
   2e7dc:	str	r0, [fp, #-32]	; 0xffffffe0
   2e7e0:	bne	2ebfc <__assert_fail@plt+0x1cf50>
   2e7e4:	ldr	r1, [sp, #60]	; 0x3c
   2e7e8:	sub	r0, fp, #32
   2e7ec:	mov	r2, r4
   2e7f0:	bl	2b110 <__assert_fail@plt+0x19464>
   2e7f4:	str	r0, [r5, r6, lsl #2]
   2e7f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2e7fc:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2e800:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2e804:	ldr	r3, [fp, #-80]	; 0xffffffb0
   2e808:	ldr	r4, [sp, #72]	; 0x48
   2e80c:	mov	r7, r8
   2e810:	cmp	r9, #0
   2e814:	bne	2eb70 <__assert_fail@plt+0x1cec4>
   2e818:	add	r0, r6, #1
   2e81c:	cmp	r6, r3
   2e820:	blt	2e7a8 <__assert_fail@plt+0x1cafc>
   2e824:	b	2e838 <__assert_fail@plt+0x1cb8c>
   2e828:	str	r0, [r5, r6, lsl #2]
   2e82c:	add	r0, r6, #1
   2e830:	cmp	r6, r3
   2e834:	blt	2e7a8 <__assert_fail@plt+0x1cafc>
   2e838:	ldr	r6, [sp, #84]	; 0x54
   2e83c:	mov	r0, r3
   2e840:	str	r6, [r7, r0, lsl #2]
   2e844:	ldr	r0, [sp, #40]	; 0x28
   2e848:	str	r7, [sp, #32]
   2e84c:	str	sl, [sp, #48]	; 0x30
   2e850:	cmp	r0, #1
   2e854:	blt	2e8e8 <__assert_fail@plt+0x1cc3c>
   2e858:	ldr	r5, [sp, #80]	; 0x50
   2e85c:	ldr	ip, [sp, #24]
   2e860:	ldr	r8, [sp, #56]	; 0x38
   2e864:	subs	r0, r0, #1
   2e868:	mov	r9, #1
   2e86c:	mov	r1, #0
   2e870:	beq	2e898 <__assert_fail@plt+0x1cbec>
   2e874:	mov	r2, r0
   2e878:	add	r3, r1, r2
   2e87c:	lsr	r7, r3, #1
   2e880:	ldr	r6, [sl, r7, lsl #2]
   2e884:	cmp	r6, r4
   2e888:	movge	r2, r7
   2e88c:	addlt	r1, r9, r3, lsr #1
   2e890:	cmp	r1, r2
   2e894:	bcc	2e878 <__assert_fail@plt+0x1cbcc>
   2e898:	ldr	r2, [sl, r1, lsl #2]
   2e89c:	cmp	r2, r4
   2e8a0:	mov	r2, r1
   2e8a4:	mvnne	r2, #0
   2e8a8:	cmp	r2, #0
   2e8ac:	blt	2e904 <__assert_fail@plt+0x1cc58>
   2e8b0:	ldr	r3, [sp, #40]	; 0x28
   2e8b4:	ldr	r7, [sp, #60]	; 0x3c
   2e8b8:	cmp	r3, r2
   2e8bc:	ble	2e914 <__assert_fail@plt+0x1cc68>
   2e8c0:	cmp	r0, r2
   2e8c4:	str	r0, [fp, #-52]	; 0xffffffcc
   2e8c8:	ble	2e920 <__assert_fail@plt+0x1cc74>
   2e8cc:	ldr	r3, [sp, #40]	; 0x28
   2e8d0:	mvn	r2, r1
   2e8d4:	add	r3, r3, r2
   2e8d8:	cmp	r3, #4
   2e8dc:	bcs	2e92c <__assert_fail@plt+0x1cc80>
   2e8e0:	mov	r2, r1
   2e8e4:	b	2e984 <__assert_fail@plt+0x1ccd8>
   2e8e8:	ldr	r5, [sp, #80]	; 0x50
   2e8ec:	ldr	ip, [sp, #24]
   2e8f0:	ldr	lr, [sp, #36]	; 0x24
   2e8f4:	ldr	r8, [sp, #56]	; 0x38
   2e8f8:	ldr	r7, [sp, #60]	; 0x3c
   2e8fc:	mov	r9, #1
   2e900:	b	2e970 <__assert_fail@plt+0x1ccc4>
   2e904:	ldr	r0, [sp, #12]
   2e908:	ldr	r7, [sp, #60]	; 0x3c
   2e90c:	str	r0, [sp, #28]
   2e910:	b	2e96c <__assert_fail@plt+0x1ccc0>
   2e914:	ldr	r0, [sp, #12]
   2e918:	str	r0, [sp, #28]
   2e91c:	b	2e96c <__assert_fail@plt+0x1ccc0>
   2e920:	ldr	r1, [sp, #12]
   2e924:	str	r1, [sp, #28]
   2e928:	b	2e968 <__assert_fail@plt+0x1ccbc>
   2e92c:	bic	r6, r3, #3
   2e930:	add	r2, r1, r6
   2e934:	add	r1, sl, r1, lsl #2
   2e938:	mov	r7, r6
   2e93c:	add	r1, r1, #4
   2e940:	sub	r5, r1, #4
   2e944:	vld1.32	{d16-d17}, [r1]!
   2e948:	subs	r7, r7, #4
   2e94c:	vst1.32	{d16-d17}, [r5]
   2e950:	bne	2e940 <__assert_fail@plt+0x1cc94>
   2e954:	ldr	r5, [sp, #80]	; 0x50
   2e958:	ldr	r7, [sp, #60]	; 0x3c
   2e95c:	cmp	r3, r6
   2e960:	bne	2e984 <__assert_fail@plt+0x1ccd8>
   2e964:	str	sl, [sp, #28]
   2e968:	str	r0, [sp, #40]	; 0x28
   2e96c:	ldr	lr, [sp, #36]	; 0x24
   2e970:	ldr	r0, [sp, #64]	; 0x40
   2e974:	add	r1, r4, r4, lsl #1
   2e978:	ldr	r0, [r0, #116]	; 0x74
   2e97c:	add	r0, r0, r1, lsl #3
   2e980:	b	2eb3c <__assert_fail@plt+0x1ce90>
   2e984:	ldr	lr, [sp, #36]	; 0x24
   2e988:	add	r1, sl, r2, lsl #2
   2e98c:	ldr	r1, [r1, #4]
   2e990:	str	r1, [sl, r2, lsl #2]
   2e994:	add	r2, r2, #1
   2e998:	cmp	r0, r2
   2e99c:	bne	2e988 <__assert_fail@plt+0x1ccdc>
   2e9a0:	str	sl, [sp, #28]
   2e9a4:	str	r0, [sp, #40]	; 0x28
   2e9a8:	b	2e970 <__assert_fail@plt+0x1ccc4>
   2e9ac:	ldr	r0, [sp, #16]
   2e9b0:	ldr	sl, [sp, #48]	; 0x30
   2e9b4:	ldr	r6, [sp, #28]
   2e9b8:	cmp	r0, r4
   2e9bc:	beq	2e61c <__assert_fail@plt+0x1c970>
   2e9c0:	b	2e64c <__assert_fail@plt+0x1c9a0>
   2e9c4:	ldr	r0, [sl]
   2e9c8:	cmp	r0, r8
   2e9cc:	bne	2eb38 <__assert_fail@plt+0x1ce8c>
   2e9d0:	ldr	r0, [sl, #8]
   2e9d4:	ldr	r1, [sl, #12]
   2e9d8:	subs	r0, r1, r0
   2e9dc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2e9e0:	add	r0, r0, r1
   2e9e4:	str	r0, [sp, #84]	; 0x54
   2e9e8:	beq	2eb0c <__assert_fail@plt+0x1ce60>
   2e9ec:	ldr	r0, [r7, #12]
   2e9f0:	add	r0, r0, r8, lsl #2
   2e9f4:	ldr	r1, [r5, #12]
   2e9f8:	ldr	r2, [sp, #84]	; 0x54
   2e9fc:	cmp	r2, r1
   2ea00:	bgt	2eb38 <__assert_fail@plt+0x1ce8c>
   2ea04:	ldr	r1, [r5]
   2ea08:	ldr	r1, [r1, r2, lsl #2]
   2ea0c:	cmp	r1, #0
   2ea10:	beq	2eb38 <__assert_fail@plt+0x1ce8c>
   2ea14:	ldr	r2, [r1, #8]
   2ea18:	cmp	r2, #1
   2ea1c:	blt	2eb38 <__assert_fail@plt+0x1ce8c>
   2ea20:	ldr	r7, [r0]
   2ea24:	ldr	r0, [r1, #12]
   2ea28:	subs	r2, r2, #1
   2ea2c:	mov	r1, #0
   2ea30:	beq	2ea54 <__assert_fail@plt+0x1cda8>
   2ea34:	add	r3, r1, r2
   2ea38:	lsr	r6, r3, #1
   2ea3c:	ldr	r5, [r0, r6, lsl #2]
   2ea40:	cmp	r5, r7
   2ea44:	movge	r2, r6
   2ea48:	addlt	r1, r9, r3, lsr #1
   2ea4c:	cmp	r1, r2
   2ea50:	bcc	2ea34 <__assert_fail@plt+0x1cd88>
   2ea54:	ldr	r0, [r0, r1, lsl #2]
   2ea58:	cmp	r0, r7
   2ea5c:	bne	2eb30 <__assert_fail@plt+0x1ce84>
   2ea60:	str	r7, [sp, #44]	; 0x2c
   2ea64:	ldr	r7, [sp, #64]	; 0x40
   2ea68:	str	r4, [sp, #72]	; 0x48
   2ea6c:	ldr	r0, [r7, #108]	; 0x6c
   2ea70:	cmp	r0, #1
   2ea74:	blt	2e31c <__assert_fail@plt+0x1c670>
   2ea78:	ldr	r1, [r7, #116]	; 0x74
   2ea7c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   2ea80:	mov	r9, #0
   2ea84:	mov	r2, r0
   2ea88:	mov	r8, #1
   2ea8c:	add	r3, r2, r9
   2ea90:	add	r3, r3, r3, lsr #31
   2ea94:	asr	r6, r3, #1
   2ea98:	add	r5, r6, r6, lsl #1
   2ea9c:	add	r5, r1, r5, lsl #3
   2eaa0:	ldr	r5, [r5, #4]
   2eaa4:	cmp	r5, r4
   2eaa8:	addlt	r9, r8, r3, asr #1
   2eaac:	movge	r2, r6
   2eab0:	cmp	r9, r2
   2eab4:	blt	2ea8c <__assert_fail@plt+0x1cde0>
   2eab8:	cmp	r9, r0
   2eabc:	bge	2e32c <__assert_fail@plt+0x1c680>
   2eac0:	ldr	r1, [r7, #116]	; 0x74
   2eac4:	add	r2, r9, r9, lsl #1
   2eac8:	add	r1, r1, r2, lsl #3
   2eacc:	ldr	r1, [r1, #4]
   2ead0:	cmp	r1, r4
   2ead4:	mvnne	r9, #0
   2ead8:	cmp	r0, #1
   2eadc:	bge	2e338 <__assert_fail@plt+0x1c68c>
   2eae0:	ldr	r4, [sp, #84]	; 0x54
   2eae4:	mov	r8, #0
   2eae8:	ldr	lr, [sp, #64]	; 0x40
   2eaec:	cmp	r8, r0
   2eaf0:	blt	2e384 <__assert_fail@plt+0x1c6d8>
   2eaf4:	mvn	r8, #0
   2eaf8:	ldr	r5, [sp, #80]	; 0x50
   2eafc:	ldr	r4, [r5, #20]
   2eb00:	cmp	r4, #1
   2eb04:	bge	2e3ac <__assert_fail@plt+0x1c700>
   2eb08:	b	2e520 <__assert_fail@plt+0x1c874>
   2eb0c:	ldr	r0, [r7, #20]
   2eb10:	add	r1, r8, r8, lsl #1
   2eb14:	add	r0, r0, r1, lsl #2
   2eb18:	ldr	r0, [r0, #8]
   2eb1c:	ldr	r1, [r5, #12]
   2eb20:	ldr	r2, [sp, #84]	; 0x54
   2eb24:	cmp	r2, r1
   2eb28:	bgt	2eb38 <__assert_fail@plt+0x1ce8c>
   2eb2c:	b	2ea04 <__assert_fail@plt+0x1cd58>
   2eb30:	ldr	r5, [sp, #80]	; 0x50
   2eb34:	ldr	r7, [sp, #60]	; 0x3c
   2eb38:	mov	r0, sl
   2eb3c:	add	sl, r0, #24
   2eb40:	ldrb	r0, [r0, #20]
   2eb44:	add	r4, r4, #1
   2eb48:	cmp	r0, #0
   2eb4c:	bne	2e9c4 <__assert_fail@plt+0x1cd18>
   2eb50:	ldr	r1, [sp, #68]	; 0x44
   2eb54:	ldr	sl, [sp, #48]	; 0x30
   2eb58:	ldr	r4, [fp, #-80]	; 0xffffffb0
   2eb5c:	add	lr, lr, #1
   2eb60:	ldr	r0, [r1, #4]
   2eb64:	cmp	lr, r0
   2eb68:	blt	2e2b8 <__assert_fail@plt+0x1c60c>
   2eb6c:	mov	r9, #0
   2eb70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2eb74:	cmp	r0, #0
   2eb78:	beq	2eb84 <__assert_fail@plt+0x1ced8>
   2eb7c:	mov	r0, sl
   2eb80:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2eb84:	cmp	r9, #0
   2eb88:	str	r9, [fp, #-76]	; 0xffffffb4
   2eb8c:	moveq	r9, #0
   2eb90:	mov	r0, r9
   2eb94:	sub	sp, fp, #28
   2eb98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb9c:	mov	ip, #0
   2eba0:	cmp	ip, lr
   2eba4:	blt	2e250 <__assert_fail@plt+0x1c5a4>
   2eba8:	mov	r0, #0
   2ebac:	str	r0, [fp, #-76]	; 0xffffffb4
   2ebb0:	mov	r9, #0
   2ebb4:	mov	r0, r9
   2ebb8:	sub	sp, fp, #28
   2ebbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ebc0:	mov	r9, r0
   2ebc4:	str	r0, [fp, #-76]	; 0xffffffb4
   2ebc8:	mov	r0, r9
   2ebcc:	sub	sp, fp, #28
   2ebd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ebd4:	str	r2, [fp, #-76]	; 0xffffffb4
   2ebd8:	mov	r9, #0
   2ebdc:	mov	r0, r9
   2ebe0:	sub	sp, fp, #28
   2ebe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ebe8:	str	r0, [fp, #-72]	; 0xffffffb8
   2ebec:	str	r9, [fp, #-76]	; 0xffffffb4
   2ebf0:	mov	r0, r9
   2ebf4:	sub	sp, fp, #28
   2ebf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ebfc:	mov	r9, r0
   2ec00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2ec04:	cmp	r0, #0
   2ec08:	bne	2eb7c <__assert_fail@plt+0x1ced0>
   2ec0c:	b	2eb84 <__assert_fail@plt+0x1ced8>
   2ec10:	mov	r9, r0
   2ec14:	mov	r0, r9
   2ec18:	sub	sp, fp, #28
   2ec1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec20:	mov	sl, #0
   2ec24:	mov	r9, #12
   2ec28:	str	sl, [fp, #-56]	; 0xffffffc8
   2ec2c:	str	sl, [fp, #-52]	; 0xffffffcc
   2ec30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2ec34:	cmp	r0, #0
   2ec38:	bne	2eb7c <__assert_fail@plt+0x1ced0>
   2ec3c:	b	2eb84 <__assert_fail@plt+0x1ced8>
   2ec40:	mov	r9, #12
   2ec44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2ec48:	cmp	r0, #0
   2ec4c:	bne	2eb7c <__assert_fail@plt+0x1ced0>
   2ec50:	b	2eb84 <__assert_fail@plt+0x1ced8>
   2ec54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ec58:	add	fp, sp, #28
   2ec5c:	sub	sp, sp, #12
   2ec60:	ldr	ip, [r1, #4]
   2ec64:	mov	sl, r0
   2ec68:	mov	r0, #0
   2ec6c:	cmp	ip, #0
   2ec70:	ldrne	lr, [r2, #4]
   2ec74:	cmpne	lr, #0
   2ec78:	bne	2ec84 <__assert_fail@plt+0x1cfd8>
   2ec7c:	sub	sp, fp, #28
   2ec80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec84:	mov	r7, r1
   2ec88:	ldr	r1, [sl, #4]
   2ec8c:	ldr	r6, [sl]
   2ec90:	add	r3, lr, ip
   2ec94:	add	r4, r1, r3
   2ec98:	cmp	r4, r6
   2ec9c:	ble	2ece0 <__assert_fail@plt+0x1d034>
   2eca0:	mov	r5, r2
   2eca4:	mov	r2, sl
   2eca8:	add	r4, r6, r3
   2ecac:	ldr	r0, [r2, #8]!
   2ecb0:	lsl	r1, r4, #2
   2ecb4:	str	r2, [sp, #8]
   2ecb8:	bl	1bd04 <__assert_fail@plt+0xa058>
   2ecbc:	cmp	r0, #0
   2ecc0:	beq	2ee64 <__assert_fail@plt+0x1d1b8>
   2ecc4:	str	r4, [sl]
   2ecc8:	str	r0, [sl, #8]
   2eccc:	mov	r2, r5
   2ecd0:	ldr	r1, [sl, #4]
   2ecd4:	ldr	lr, [r5, #4]
   2ecd8:	ldr	ip, [r7, #4]
   2ecdc:	b	2ece8 <__assert_fail@plt+0x1d03c>
   2ece0:	add	r0, sl, #8
   2ece4:	str	r0, [sp, #8]
   2ece8:	str	r2, [sp, #4]
   2ecec:	ldr	r2, [r2, #8]
   2ecf0:	ldr	r4, [r7, #8]
   2ecf4:	add	r3, ip, r1
   2ecf8:	sub	r8, r1, #1
   2ecfc:	add	r9, r3, lr
   2ed00:	sub	ip, ip, #1
   2ed04:	sub	r3, lr, #1
   2ed08:	ldr	r1, [r2, r3, lsl #2]
   2ed0c:	ldr	r6, [r4, ip, lsl #2]
   2ed10:	cmp	r6, r1
   2ed14:	beq	2ed40 <__assert_fail@plt+0x1d094>
   2ed18:	blt	2ed30 <__assert_fail@plt+0x1d084>
   2ed1c:	sub	r5, ip, #1
   2ed20:	cmp	ip, #0
   2ed24:	mov	ip, r5
   2ed28:	bgt	2ed0c <__assert_fail@plt+0x1d060>
   2ed2c:	b	2edbc <__assert_fail@plt+0x1d110>
   2ed30:	cmp	lr, #2
   2ed34:	mov	lr, r3
   2ed38:	bge	2ed04 <__assert_fail@plt+0x1d058>
   2ed3c:	b	2edbc <__assert_fail@plt+0x1d110>
   2ed40:	mov	r0, r9
   2ed44:	cmp	r8, #0
   2ed48:	blt	2ed94 <__assert_fail@plt+0x1d0e8>
   2ed4c:	ldr	r1, [sp, #8]
   2ed50:	ldr	r9, [r1]
   2ed54:	mov	r1, r8
   2ed58:	ldr	r5, [r9, r1, lsl #2]
   2ed5c:	cmp	r5, r6
   2ed60:	ble	2ed78 <__assert_fail@plt+0x1d0cc>
   2ed64:	sub	r8, r1, #1
   2ed68:	cmp	r1, #0
   2ed6c:	mov	r1, r8
   2ed70:	bgt	2ed58 <__assert_fail@plt+0x1d0ac>
   2ed74:	b	2ed94 <__assert_fail@plt+0x1d0e8>
   2ed78:	mov	r8, r1
   2ed7c:	bne	2ed94 <__assert_fail@plt+0x1d0e8>
   2ed80:	mov	r8, r1
   2ed84:	mov	r9, r0
   2ed88:	cmp	ip, #1
   2ed8c:	bge	2edb0 <__assert_fail@plt+0x1d104>
   2ed90:	b	2edbc <__assert_fail@plt+0x1d110>
   2ed94:	ldr	r1, [sp, #8]
   2ed98:	mov	r9, r0
   2ed9c:	sub	r9, r0, #1
   2eda0:	ldr	r1, [r1]
   2eda4:	str	r6, [r1, r9, lsl #2]
   2eda8:	cmp	ip, #1
   2edac:	blt	2edbc <__assert_fail@plt+0x1d110>
   2edb0:	cmp	lr, #2
   2edb4:	mov	lr, r3
   2edb8:	bge	2ed00 <__assert_fail@plt+0x1d054>
   2edbc:	ldr	lr, [r7, #4]
   2edc0:	ldr	r7, [sp, #4]
   2edc4:	ldr	r2, [sl, #4]
   2edc8:	ldr	r0, [sl, #8]
   2edcc:	ldr	r4, [r7, #4]
   2edd0:	subs	r1, r2, #1
   2edd4:	add	r3, r1, lr
   2edd8:	add	r3, r3, r4
   2eddc:	sub	r5, r3, r9
   2ede0:	add	r6, r5, #1
   2ede4:	cmpge	r5, #0
   2ede8:	add	r7, r6, r2
   2edec:	str	r7, [sl, #4]
   2edf0:	blt	2ee48 <__assert_fail@plt+0x1d19c>
   2edf4:	add	r2, r2, r4
   2edf8:	add	r2, r2, lr
   2edfc:	sub	r2, r2, r9
   2ee00:	add	r7, r0, r2, lsl #2
   2ee04:	ldr	r2, [r0, r1, lsl #2]
   2ee08:	ldr	r5, [r0, r3, lsl #2]
   2ee0c:	cmp	r5, r2
   2ee10:	bgt	2ee2c <__assert_fail@plt+0x1d180>
   2ee14:	str	r2, [r7, r1, lsl #2]
   2ee18:	sub	r2, r1, #1
   2ee1c:	cmp	r1, #0
   2ee20:	mov	r1, r2
   2ee24:	bgt	2ee04 <__assert_fail@plt+0x1d158>
   2ee28:	b	2ee48 <__assert_fail@plt+0x1d19c>
   2ee2c:	str	r5, [r7, r1, lsl #2]
   2ee30:	sub	r7, r7, #4
   2ee34:	subs	r6, r6, #1
   2ee38:	sub	r3, r3, #1
   2ee3c:	mov	r2, #0
   2ee40:	bne	2ee04 <__assert_fail@plt+0x1d158>
   2ee44:	b	2ee4c <__assert_fail@plt+0x1d1a0>
   2ee48:	mov	r2, r6
   2ee4c:	add	r1, r0, r9, lsl #2
   2ee50:	lsl	r2, r2, #2
   2ee54:	bl	118ec <memcpy@plt>
   2ee58:	mov	r0, #0
   2ee5c:	sub	sp, fp, #28
   2ee60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee64:	mov	r0, #12
   2ee68:	sub	sp, fp, #28
   2ee6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee74:	add	fp, sp, #28
   2ee78:	sub	sp, sp, #44	; 0x2c
   2ee7c:	mov	ip, r0
   2ee80:	ldr	r0, [r0, #28]
   2ee84:	str	r3, [sp, #4]
   2ee88:	add	r3, r1, r1, lsl #1
   2ee8c:	mov	r9, #0
   2ee90:	str	r9, [sp, #36]	; 0x24
   2ee94:	str	r9, [sp, #32]
   2ee98:	str	r9, [sp, #40]	; 0x28
   2ee9c:	add	r3, r0, r3, lsl #2
   2eea0:	mov	r0, r3
   2eea4:	ldr	lr, [r0, #4]!
   2eea8:	cmp	lr, #1
   2eeac:	str	r0, [sp, #24]
   2eeb0:	blt	2f1c0 <__assert_fail@plt+0x1d514>
   2eeb4:	add	r4, r3, #8
   2eeb8:	mov	sl, #1
   2eebc:	str	r2, [sp, #28]
   2eec0:	str	r3, [sp]
   2eec4:	str	r1, [sp, #12]
   2eec8:	str	ip, [sp, #8]
   2eecc:	str	r4, [sp, #20]
   2eed0:	ldr	r3, [r4]
   2eed4:	ldr	r0, [r3, r9, lsl #2]
   2eed8:	cmp	r0, r1
   2eedc:	beq	2f084 <__assert_fail@plt+0x1d3d8>
   2eee0:	ldr	r2, [ip]
   2eee4:	add	r2, r2, r0, lsl #3
   2eee8:	ldrb	r2, [r2, #4]
   2eeec:	tst	r2, #8
   2eef0:	beq	2f084 <__assert_fail@plt+0x1d3d8>
   2eef4:	ldr	r2, [ip, #20]
   2eef8:	add	r0, r0, r0, lsl #1
   2eefc:	mvn	r8, #0
   2ef00:	str	r0, [sp, #16]
   2ef04:	add	r0, r2, r0, lsl #2
   2ef08:	ldr	r7, [r0, #4]
   2ef0c:	ldr	r0, [r0, #8]
   2ef10:	cmp	r7, #2
   2ef14:	ldr	r5, [r0]
   2ef18:	ldrge	r8, [r0, #4]
   2ef1c:	cmp	lr, #1
   2ef20:	blt	2ef60 <__assert_fail@plt+0x1d2b4>
   2ef24:	mov	r2, #0
   2ef28:	subs	r7, lr, #1
   2ef2c:	beq	2ef50 <__assert_fail@plt+0x1d2a4>
   2ef30:	add	r6, r2, r7
   2ef34:	lsr	r4, r6, #1
   2ef38:	ldr	r0, [r3, r4, lsl #2]
   2ef3c:	cmp	r0, r5
   2ef40:	movge	r7, r4
   2ef44:	addlt	r2, sl, r6, lsr #1
   2ef48:	cmp	r2, r7
   2ef4c:	bcc	2ef30 <__assert_fail@plt+0x1d284>
   2ef50:	ldr	r0, [r3, r2, lsl #2]
   2ef54:	ldr	r4, [sp, #20]
   2ef58:	cmp	r0, r5
   2ef5c:	beq	2efbc <__assert_fail@plt+0x1d310>
   2ef60:	ldr	r0, [sp, #28]
   2ef64:	ldr	r0, [r0, #4]
   2ef68:	cmp	r0, #1
   2ef6c:	blt	2efbc <__assert_fail@plt+0x1d310>
   2ef70:	subs	r6, r0, #1
   2ef74:	ldr	r0, [sp, #28]
   2ef78:	mov	r7, #0
   2ef7c:	ldr	r1, [r0, #8]
   2ef80:	beq	2efa4 <__assert_fail@plt+0x1d2f8>
   2ef84:	add	r0, r7, r6
   2ef88:	lsr	r4, r0, #1
   2ef8c:	ldr	ip, [r1, r4, lsl #2]
   2ef90:	cmp	ip, r5
   2ef94:	movge	r6, r4
   2ef98:	addlt	r7, sl, r0, lsr #1
   2ef9c:	cmp	r7, r6
   2efa0:	bcc	2ef84 <__assert_fail@plt+0x1d2d8>
   2efa4:	ldr	r0, [r1, r7, lsl #2]
   2efa8:	ldr	r1, [sp, #12]
   2efac:	ldr	ip, [sp, #8]
   2efb0:	ldr	r4, [sp, #20]
   2efb4:	cmp	r0, r5
   2efb8:	beq	2f054 <__assert_fail@plt+0x1d3a8>
   2efbc:	cmp	r8, #1
   2efc0:	blt	2f084 <__assert_fail@plt+0x1d3d8>
   2efc4:	cmp	lr, #1
   2efc8:	blt	2f004 <__assert_fail@plt+0x1d358>
   2efcc:	mov	r2, #0
   2efd0:	subs	r7, lr, #1
   2efd4:	beq	2eff8 <__assert_fail@plt+0x1d34c>
   2efd8:	add	r0, r2, r7
   2efdc:	lsr	r6, r0, #1
   2efe0:	ldr	r5, [r3, r6, lsl #2]
   2efe4:	cmp	r5, r8
   2efe8:	movge	r7, r6
   2efec:	addlt	r2, sl, r0, lsr #1
   2eff0:	cmp	r2, r7
   2eff4:	bcc	2efd8 <__assert_fail@plt+0x1d32c>
   2eff8:	ldr	r0, [r3, r2, lsl #2]
   2effc:	cmp	r0, r8
   2f000:	beq	2f084 <__assert_fail@plt+0x1d3d8>
   2f004:	ldr	r2, [sp, #28]
   2f008:	ldr	r0, [r2, #4]
   2f00c:	cmp	r0, #1
   2f010:	blt	2f084 <__assert_fail@plt+0x1d3d8>
   2f014:	ldr	r4, [r2, #8]
   2f018:	subs	r7, r0, #1
   2f01c:	mov	r3, #0
   2f020:	beq	2f044 <__assert_fail@plt+0x1d398>
   2f024:	add	r0, r3, r7
   2f028:	lsr	r6, r0, #1
   2f02c:	ldr	r5, [r4, r6, lsl #2]
   2f030:	cmp	r5, r8
   2f034:	movge	r7, r6
   2f038:	addlt	r3, sl, r0, lsr #1
   2f03c:	cmp	r3, r7
   2f040:	bcc	2f024 <__assert_fail@plt+0x1d378>
   2f044:	ldr	r0, [r4, r3, lsl #2]
   2f048:	ldr	r4, [sp, #20]
   2f04c:	cmp	r0, r8
   2f050:	bne	2f084 <__assert_fail@plt+0x1d3d8>
   2f054:	ldr	r0, [ip, #28]
   2f058:	ldr	r1, [sp, #16]
   2f05c:	add	r2, r0, r1, lsl #2
   2f060:	ldr	r1, [sp, #4]
   2f064:	add	r0, sp, #32
   2f068:	bl	2ec54 <__assert_fail@plt+0x1cfa8>
   2f06c:	cmp	r0, #0
   2f070:	bne	2f298 <__assert_fail@plt+0x1d5ec>
   2f074:	ldr	r0, [sp, #24]
   2f078:	ldr	r1, [sp, #12]
   2f07c:	ldr	ip, [sp, #8]
   2f080:	ldr	lr, [r0]
   2f084:	add	r9, r9, #1
   2f088:	cmp	r9, lr
   2f08c:	blt	2eed0 <__assert_fail@plt+0x1d224>
   2f090:	ldr	r2, [sp, #28]
   2f094:	ldr	r0, [sp]
   2f098:	cmp	lr, #0
   2f09c:	ble	2f1c0 <__assert_fail@plt+0x1d514>
   2f0a0:	ldr	r1, [sp, #36]	; 0x24
   2f0a4:	ldr	r9, [r0, #8]
   2f0a8:	ldr	r0, [sp, #40]	; 0x28
   2f0ac:	subs	lr, r1, #1
   2f0b0:	str	r9, [sp, #20]
   2f0b4:	blt	2f1d8 <__assert_fail@plt+0x1d52c>
   2f0b8:	mov	ip, #0
   2f0bc:	mov	r7, #1
   2f0c0:	b	2f0e4 <__assert_fail@plt+0x1d438>
   2f0c4:	add	r2, r5, r1, lsl #2
   2f0c8:	ldr	r2, [r2, #4]
   2f0cc:	str	r2, [r5, r1, lsl #2]
   2f0d0:	add	r1, r1, #1
   2f0d4:	ldr	r2, [r3, #4]
   2f0d8:	cmp	r1, r2
   2f0dc:	blt	2f0c4 <__assert_fail@plt+0x1d418>
   2f0e0:	b	2f1a8 <__assert_fail@plt+0x1d4fc>
   2f0e4:	ldr	r6, [r9, ip, lsl #2]
   2f0e8:	cmp	lr, #0
   2f0ec:	mov	r1, #0
   2f0f0:	beq	2f11c <__assert_fail@plt+0x1d470>
   2f0f4:	mov	r1, #0
   2f0f8:	mov	r2, lr
   2f0fc:	add	r5, r1, r2
   2f100:	lsr	r4, r5, #1
   2f104:	ldr	r3, [r0, r4, lsl #2]
   2f108:	cmp	r3, r6
   2f10c:	movge	r2, r4
   2f110:	addlt	r1, r7, r5, lsr #1
   2f114:	cmp	r1, r2
   2f118:	bcc	2f0fc <__assert_fail@plt+0x1d450>
   2f11c:	ldr	r1, [r0, r1, lsl #2]
   2f120:	cmp	r1, r6
   2f124:	ldr	r1, [sp, #28]
   2f128:	beq	2f1a8 <__assert_fail@plt+0x1d4fc>
   2f12c:	ldr	sl, [r1, #4]
   2f130:	cmp	sl, #1
   2f134:	blt	2f1a8 <__assert_fail@plt+0x1d4fc>
   2f138:	ldr	r5, [r1, #8]
   2f13c:	subs	r4, sl, #1
   2f140:	beq	2f170 <__assert_fail@plt+0x1d4c4>
   2f144:	mov	r1, #0
   2f148:	mov	r8, r4
   2f14c:	add	r3, r1, r4
   2f150:	lsr	r2, r3, #1
   2f154:	ldr	r9, [r5, r2, lsl #2]
   2f158:	cmp	r9, r6
   2f15c:	movge	r4, r2
   2f160:	addlt	r1, r7, r3, lsr #1
   2f164:	cmp	r1, r4
   2f168:	bcc	2f14c <__assert_fail@plt+0x1d4a0>
   2f16c:	b	2f178 <__assert_fail@plt+0x1d4cc>
   2f170:	mov	r8, r4
   2f174:	mov	r1, #0
   2f178:	ldr	r2, [r5, r1, lsl #2]
   2f17c:	ldr	r3, [sp, #28]
   2f180:	ldr	r9, [sp, #20]
   2f184:	mov	r4, r1
   2f188:	cmp	r2, r6
   2f18c:	mvnne	r4, #0
   2f190:	cmp	r4, #0
   2f194:	blt	2f1a8 <__assert_fail@plt+0x1d4fc>
   2f198:	cmp	sl, r4
   2f19c:	strgt	r8, [r3, #4]
   2f1a0:	cmpgt	r8, r4
   2f1a4:	bgt	2f0c4 <__assert_fail@plt+0x1d418>
   2f1a8:	ldr	r1, [sp, #24]
   2f1ac:	add	ip, ip, #1
   2f1b0:	ldr	r1, [r1]
   2f1b4:	cmp	ip, r1
   2f1b8:	blt	2f0e4 <__assert_fail@plt+0x1d438>
   2f1bc:	b	2f1c4 <__assert_fail@plt+0x1d518>
   2f1c0:	ldr	r0, [sp, #40]	; 0x28
   2f1c4:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2f1c8:	mov	r5, #0
   2f1cc:	mov	r0, r5
   2f1d0:	sub	sp, fp, #28
   2f1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f1d8:	ldr	r7, [r2, #4]
   2f1dc:	mov	sl, #0
   2f1e0:	mov	r9, #1
   2f1e4:	cmp	r7, #1
   2f1e8:	blt	2f280 <__assert_fail@plt+0x1d5d4>
   2f1ec:	ldr	r1, [sp, #20]
   2f1f0:	ldr	r6, [r2, #8]
   2f1f4:	subs	lr, r7, #1
   2f1f8:	mov	r5, #0
   2f1fc:	ldr	r1, [r1, sl, lsl #2]
   2f200:	beq	2f228 <__assert_fail@plt+0x1d57c>
   2f204:	mov	r4, lr
   2f208:	add	r3, r5, r4
   2f20c:	lsr	r2, r3, #1
   2f210:	ldr	ip, [r6, r2, lsl #2]
   2f214:	cmp	ip, r1
   2f218:	movge	r4, r2
   2f21c:	addlt	r5, r9, r3, lsr #1
   2f220:	cmp	r5, r4
   2f224:	bcc	2f208 <__assert_fail@plt+0x1d55c>
   2f228:	ldr	r2, [r6, r5, lsl #2]
   2f22c:	cmp	r2, r1
   2f230:	mov	r1, r5
   2f234:	mvnne	r1, #0
   2f238:	cmp	r1, #0
   2f23c:	blt	2f27c <__assert_fail@plt+0x1d5d0>
   2f240:	ldr	r2, [sp, #28]
   2f244:	cmp	r7, r1
   2f248:	ble	2f280 <__assert_fail@plt+0x1d5d4>
   2f24c:	cmp	lr, r1
   2f250:	mov	r7, lr
   2f254:	str	lr, [r2, #4]
   2f258:	ble	2f280 <__assert_fail@plt+0x1d5d4>
   2f25c:	add	r1, r6, r5, lsl #2
   2f260:	ldr	r1, [r1, #4]
   2f264:	str	r1, [r6, r5, lsl #2]
   2f268:	add	r5, r5, #1
   2f26c:	ldr	r7, [r2, #4]
   2f270:	cmp	r5, r7
   2f274:	blt	2f25c <__assert_fail@plt+0x1d5b0>
   2f278:	b	2f280 <__assert_fail@plt+0x1d5d4>
   2f27c:	ldr	r2, [sp, #28]
   2f280:	ldr	r1, [sp, #24]
   2f284:	add	sl, sl, #1
   2f288:	ldr	r1, [r1]
   2f28c:	cmp	sl, r1
   2f290:	blt	2f1e4 <__assert_fail@plt+0x1d538>
   2f294:	b	2f1c4 <__assert_fail@plt+0x1d518>
   2f298:	mov	r5, r0
   2f29c:	ldr	r0, [sp, #40]	; 0x28
   2f2a0:	bl	1bba8 <__assert_fail@plt+0x9efc>
   2f2a4:	mov	r0, r5
   2f2a8:	sub	sp, fp, #28
   2f2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f2b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f2b4:	add	fp, sp, #28
   2f2b8:	sub	sp, sp, #44	; 0x2c
   2f2bc:	ldr	r4, [r0, #84]	; 0x54
   2f2c0:	mov	r7, r0
   2f2c4:	str	r1, [fp, #-32]	; 0xffffffe0
   2f2c8:	add	r1, r3, r3, lsl #1
   2f2cc:	mov	r6, r2
   2f2d0:	str	r3, [sp, #36]	; 0x24
   2f2d4:	ldr	r0, [r4, #24]
   2f2d8:	add	r0, r0, r1, lsl #2
   2f2dc:	mov	r2, r0
   2f2e0:	ldr	r1, [r2, #4]!
   2f2e4:	cmp	r1, #1
   2f2e8:	str	r2, [sp, #28]
   2f2ec:	blt	2f5a0 <__assert_fail@plt+0x1d8f4>
   2f2f0:	mov	r1, #1
   2f2f4:	cmp	r6, #31
   2f2f8:	add	r0, r0, #8
   2f2fc:	mov	sl, #0
   2f300:	mvn	r2, r1, lsl r6
   2f304:	lsl	r1, r1, r6
   2f308:	str	r0, [sp, #32]
   2f30c:	str	r2, [sp, #16]
   2f310:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f314:	str	r1, [sp, #24]
   2f318:	mov	r1, #0
   2f31c:	movwgt	r1, #1
   2f320:	and	r3, r2, #2
   2f324:	and	r0, r2, #1
   2f328:	orr	r1, r1, r3, lsr #1
   2f32c:	str	r3, [sp, #20]
   2f330:	str	r0, [sp, #8]
   2f334:	str	r1, [sp, #12]
   2f338:	b	2f458 <__assert_fail@plt+0x1d7ac>
   2f33c:	ldr	r2, [sp, #12]
   2f340:	cmp	r2, #0
   2f344:	beq	2f3c4 <__assert_fail@plt+0x1d718>
   2f348:	add	r5, r0, r1, lsl #3
   2f34c:	ldr	r0, [r5]
   2f350:	cmp	r0, r8
   2f354:	bne	2f3b0 <__assert_fail@plt+0x1d704>
   2f358:	ldr	r0, [r4, #20]
   2f35c:	add	r1, r8, r8, lsl #1
   2f360:	add	r0, r0, r1, lsl #2
   2f364:	ldr	r0, [r0, #8]
   2f368:	ldr	r3, [r0]
   2f36c:	ldr	r0, [sp, #36]	; 0x24
   2f370:	cmp	r3, r0
   2f374:	beq	2f5b0 <__assert_fail@plt+0x1d904>
   2f378:	ldr	r0, [fp, #8]
   2f37c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f380:	mov	r2, r6
   2f384:	str	r0, [sp]
   2f388:	mov	r0, r7
   2f38c:	bl	2f2b0 <__assert_fail@plt+0x1d604>
   2f390:	cmp	r0, #0
   2f394:	beq	2f3a4 <__assert_fail@plt+0x1d6f8>
   2f398:	cmn	r0, #1
   2f39c:	bne	2f3b0 <__assert_fail@plt+0x1d704>
   2f3a0:	b	2f5c4 <__assert_fail@plt+0x1d918>
   2f3a4:	ldr	r0, [sp, #20]
   2f3a8:	cmp	r0, #0
   2f3ac:	bne	2f5c0 <__assert_fail@plt+0x1d914>
   2f3b0:	ldrb	r0, [r5, #20]
   2f3b4:	add	r5, r5, #24
   2f3b8:	cmp	r0, #0
   2f3bc:	bne	2f34c <__assert_fail@plt+0x1d6a0>
   2f3c0:	b	2f58c <__assert_fail@plt+0x1d8e0>
   2f3c4:	add	r0, r0, r1, lsl #3
   2f3c8:	add	r5, r0, #16
   2f3cc:	ldr	r0, [r5, #-16]
   2f3d0:	cmp	r0, r8
   2f3d4:	bne	2f420 <__assert_fail@plt+0x1d774>
   2f3d8:	ldr	r0, [r4, #20]
   2f3dc:	add	r1, r8, r8, lsl #1
   2f3e0:	add	r0, r0, r1, lsl #2
   2f3e4:	ldr	r0, [r0, #8]
   2f3e8:	ldr	r3, [r0]
   2f3ec:	ldr	r0, [sp, #36]	; 0x24
   2f3f0:	cmp	r3, r0
   2f3f4:	beq	2f5b0 <__assert_fail@plt+0x1d904>
   2f3f8:	ldr	r0, [fp, #8]
   2f3fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f400:	mov	r2, r6
   2f404:	str	r0, [sp]
   2f408:	mov	r0, r7
   2f40c:	bl	2f2b0 <__assert_fail@plt+0x1d604>
   2f410:	cmp	r0, #0
   2f414:	beq	2f434 <__assert_fail@plt+0x1d788>
   2f418:	cmn	r0, #1
   2f41c:	beq	2f5c4 <__assert_fail@plt+0x1d918>
   2f420:	ldrb	r0, [r5, #4]
   2f424:	add	r5, r5, #24
   2f428:	cmp	r0, #0
   2f42c:	bne	2f3cc <__assert_fail@plt+0x1d720>
   2f430:	b	2f58c <__assert_fail@plt+0x1d8e0>
   2f434:	ldr	r0, [r5]
   2f438:	ldr	r1, [sp, #16]
   2f43c:	and	r0, r0, r1
   2f440:	str	r0, [r5]
   2f444:	ldrb	r0, [r5, #4]
   2f448:	add	r5, r5, #24
   2f44c:	cmp	r0, #0
   2f450:	bne	2f3cc <__assert_fail@plt+0x1d720>
   2f454:	b	2f58c <__assert_fail@plt+0x1d8e0>
   2f458:	ldr	r0, [sp, #32]
   2f45c:	ldr	r0, [r0]
   2f460:	ldr	r8, [r0, sl, lsl #2]
   2f464:	ldr	r0, [r4]
   2f468:	add	r1, r0, r8, lsl #3
   2f46c:	ldrb	r1, [r1, #4]
   2f470:	cmp	r1, #9
   2f474:	beq	2f558 <__assert_fail@plt+0x1d8ac>
   2f478:	cmp	r1, #8
   2f47c:	beq	2f574 <__assert_fail@plt+0x1d8c8>
   2f480:	cmp	r1, #4
   2f484:	bne	2f58c <__assert_fail@plt+0x1d8e0>
   2f488:	ldr	r0, [fp, #8]
   2f48c:	cmn	r0, #1
   2f490:	beq	2f58c <__assert_fail@plt+0x1d8e0>
   2f494:	ldr	r1, [fp, #8]
   2f498:	ldr	r0, [r7, #116]	; 0x74
   2f49c:	cmp	r6, #31
   2f4a0:	add	r1, r1, r1, lsl #1
   2f4a4:	bgt	2f33c <__assert_fail@plt+0x1d690>
   2f4a8:	add	r0, r0, r1, lsl #3
   2f4ac:	add	r9, r0, #16
   2f4b0:	ldr	r0, [r9, #-16]
   2f4b4:	cmp	r0, r8
   2f4b8:	bne	2f544 <__assert_fail@plt+0x1d898>
   2f4bc:	ldr	r0, [r9]
   2f4c0:	ldr	r1, [sp, #24]
   2f4c4:	tst	r0, r1
   2f4c8:	beq	2f544 <__assert_fail@plt+0x1d898>
   2f4cc:	ldr	r0, [r4, #20]
   2f4d0:	add	r1, r8, r8, lsl #1
   2f4d4:	add	r0, r0, r1, lsl #2
   2f4d8:	ldr	r0, [r0, #8]
   2f4dc:	ldr	r3, [r0]
   2f4e0:	ldr	r0, [sp, #36]	; 0x24
   2f4e4:	cmp	r3, r0
   2f4e8:	beq	2f5b0 <__assert_fail@plt+0x1d904>
   2f4ec:	ldr	r0, [fp, #8]
   2f4f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f4f4:	mov	r2, r6
   2f4f8:	str	r0, [sp]
   2f4fc:	mov	r0, r7
   2f500:	bl	2f2b0 <__assert_fail@plt+0x1d604>
   2f504:	cmp	r0, #0
   2f508:	beq	2f518 <__assert_fail@plt+0x1d86c>
   2f50c:	cmn	r0, #1
   2f510:	bne	2f534 <__assert_fail@plt+0x1d888>
   2f514:	b	2f5c4 <__assert_fail@plt+0x1d918>
   2f518:	ldr	r0, [sp, #12]
   2f51c:	cmp	r0, #0
   2f520:	beq	2f534 <__assert_fail@plt+0x1d888>
   2f524:	ldr	r0, [sp, #20]
   2f528:	cmp	r0, #0
   2f52c:	beq	2f544 <__assert_fail@plt+0x1d898>
   2f530:	b	2f5c0 <__assert_fail@plt+0x1d914>
   2f534:	ldr	r0, [r9]
   2f538:	ldr	r1, [sp, #16]
   2f53c:	and	r0, r0, r1
   2f540:	str	r0, [r9]
   2f544:	ldrb	r0, [r9, #4]
   2f548:	add	r9, r9, #24
   2f54c:	cmp	r0, #0
   2f550:	bne	2f4b0 <__assert_fail@plt+0x1d804>
   2f554:	b	2f58c <__assert_fail@plt+0x1d8e0>
   2f558:	ldr	r1, [sp, #20]
   2f55c:	cmp	r1, #0
   2f560:	beq	2f58c <__assert_fail@plt+0x1d8e0>
   2f564:	ldr	r0, [r0, r8, lsl #3]
   2f568:	cmp	r0, r6
   2f56c:	bne	2f58c <__assert_fail@plt+0x1d8e0>
   2f570:	b	2f5c0 <__assert_fail@plt+0x1d914>
   2f574:	ldr	r1, [sp, #8]
   2f578:	cmp	r1, #0
   2f57c:	beq	2f58c <__assert_fail@plt+0x1d8e0>
   2f580:	ldr	r0, [r0, r8, lsl #3]
   2f584:	cmp	r0, r6
   2f588:	beq	2f5cc <__assert_fail@plt+0x1d920>
   2f58c:	ldr	r0, [sp, #28]
   2f590:	add	sl, sl, #1
   2f594:	ldr	r0, [r0]
   2f598:	cmp	sl, r0
   2f59c:	blt	2f458 <__assert_fail@plt+0x1d7ac>
   2f5a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f5a4:	ubfx	r0, r0, #1, #1
   2f5a8:	sub	sp, fp, #28
   2f5ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5b0:	ldr	r0, [sp, #8]
   2f5b4:	rsb	r0, r0, #0
   2f5b8:	sub	sp, fp, #28
   2f5bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5c0:	mov	r0, #0
   2f5c4:	sub	sp, fp, #28
   2f5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5cc:	mvn	r0, #0
   2f5d0:	sub	sp, fp, #28
   2f5d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f5dc:	add	fp, sp, #28
   2f5e0:	sub	sp, sp, #60	; 0x3c
   2f5e4:	sub	sp, sp, #1024	; 0x400
   2f5e8:	mov	r9, r0
   2f5ec:	ldrb	r0, [r0]
   2f5f0:	mov	sl, r1
   2f5f4:	cmp	r0, #0
   2f5f8:	beq	2f890 <__assert_fail@plt+0x1dbe4>
   2f5fc:	mov	r8, #1
   2f600:	mov	r4, #0
   2f604:	ldrb	r7, [sl, r4]
   2f608:	cmp	r7, #0
   2f60c:	beq	2f678 <__assert_fail@plt+0x1d9cc>
   2f610:	uxtb	r6, r0
   2f614:	bl	11a90 <__ctype_b_loc@plt>
   2f618:	ldr	r5, [r0]
   2f61c:	add	r0, r5, r6, lsl #1
   2f620:	ldrb	r0, [r0, #1]
   2f624:	tst	r0, #1
   2f628:	beq	2f638 <__assert_fail@plt+0x1d98c>
   2f62c:	bl	11a60 <__ctype_tolower_loc@plt>
   2f630:	ldr	r0, [r0]
   2f634:	ldr	r6, [r0, r6, lsl #2]
   2f638:	add	r0, r5, r7, lsl #1
   2f63c:	ldrb	r0, [r0, #1]
   2f640:	tst	r0, #1
   2f644:	beq	2f654 <__assert_fail@plt+0x1d9a8>
   2f648:	bl	11a60 <__ctype_tolower_loc@plt>
   2f64c:	ldr	r0, [r0]
   2f650:	ldr	r7, [r0, r7, lsl #2]
   2f654:	sub	r0, r6, r7
   2f658:	clz	r0, r0
   2f65c:	lsr	r0, r0, #5
   2f660:	and	r8, r8, r0
   2f664:	add	r0, r9, r4
   2f668:	add	r4, r4, #1
   2f66c:	ldrb	r0, [r0, #1]
   2f670:	cmp	r0, #0
   2f674:	bne	2f604 <__assert_fail@plt+0x1d958>
   2f678:	add	r0, sl, r4
   2f67c:	mov	r4, r9
   2f680:	ldrb	r1, [r0]
   2f684:	cmp	r1, #0
   2f688:	movwne	r4, #0
   2f68c:	tst	r8, #1
   2f690:	cmpeq	r1, #0
   2f694:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2f698:	sub	r8, r0, sl
   2f69c:	add	r0, r9, #1
   2f6a0:	cmp	r8, #31
   2f6a4:	str	r0, [sp, #28]
   2f6a8:	str	r8, [sp, #48]	; 0x30
   2f6ac:	bhi	2f8ac <__assert_fail@plt+0x1dc00>
   2f6b0:	add	r2, sp, #52	; 0x34
   2f6b4:	mov	r0, sl
   2f6b8:	mov	r1, r8
   2f6bc:	bl	302f0 <__assert_fail@plt+0x1e644>
   2f6c0:	ldr	r5, [sp, #52]	; 0x34
   2f6c4:	mov	r4, r0
   2f6c8:	mov	r0, sl
   2f6cc:	mov	r2, r4
   2f6d0:	add	r1, sl, r5
   2f6d4:	bl	11b08 <strncasecmp@plt>
   2f6d8:	cmp	r0, #0
   2f6dc:	str	r4, [sp, #40]	; 0x28
   2f6e0:	beq	2fd08 <__assert_fail@plt+0x1e05c>
   2f6e4:	sub	r0, r8, r4
   2f6e8:	mov	r1, #0
   2f6ec:	mov	r2, #1
   2f6f0:	cmp	r4, r0
   2f6f4:	movcs	r0, r4
   2f6f8:	mov	r4, #0
   2f6fc:	add	r0, r0, #1
   2f700:	str	r0, [sp, #20]
   2f704:	str	r0, [sp, #52]	; 0x34
   2f708:	add	r0, r9, r8
   2f70c:	bl	11b68 <memchr@plt>
   2f710:	cmp	r8, #0
   2f714:	beq	2f8a0 <__assert_fail@plt+0x1dbf4>
   2f718:	cmp	r0, #0
   2f71c:	str	r9, [sp, #32]
   2f720:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2f724:	ldr	r8, [sp, #48]	; 0x30
   2f728:	ldr	r1, [sp, #40]	; 0x28
   2f72c:	cmp	r8, r1
   2f730:	bls	30108 <__assert_fail@plt+0x1e45c>
   2f734:	ldr	r0, [sp, #32]
   2f738:	add	r9, sl, r1
   2f73c:	add	r0, r0, r1
   2f740:	add	r0, r0, #1
   2f744:	str	r0, [sp, #16]
   2f748:	sub	r0, sl, #1
   2f74c:	str	r0, [sp, #44]	; 0x2c
   2f750:	bl	11a90 <__ctype_b_loc@plt>
   2f754:	ldr	sl, [r0]
   2f758:	mov	r0, #0
   2f75c:	mov	r5, r8
   2f760:	str	r0, [sp, #36]	; 0x24
   2f764:	ldr	r0, [sp, #36]	; 0x24
   2f768:	ldr	r1, [sp, #16]
   2f76c:	ldr	r8, [sp, #48]	; 0x30
   2f770:	str	r5, [sp, #24]
   2f774:	mov	r4, #0
   2f778:	add	r5, r1, r0
   2f77c:	ldrb	r6, [r9, r4]
   2f780:	add	r0, sl, r6, lsl #1
   2f784:	ldrb	r0, [r0, #1]
   2f788:	tst	r0, #1
   2f78c:	beq	2f79c <__assert_fail@plt+0x1daf0>
   2f790:	bl	11a60 <__ctype_tolower_loc@plt>
   2f794:	ldr	r0, [r0]
   2f798:	ldr	r6, [r0, r6, lsl #2]
   2f79c:	ldrb	r7, [r5, r4]
   2f7a0:	add	r0, sl, r7, lsl #1
   2f7a4:	ldrb	r0, [r0, #1]
   2f7a8:	tst	r0, #1
   2f7ac:	beq	2f7bc <__assert_fail@plt+0x1db10>
   2f7b0:	bl	11a60 <__ctype_tolower_loc@plt>
   2f7b4:	ldr	r0, [r0]
   2f7b8:	ldr	r7, [r0, r7, lsl #2]
   2f7bc:	cmp	r6, r7
   2f7c0:	bne	2f84c <__assert_fail@plt+0x1dba0>
   2f7c4:	ldr	r0, [sp, #40]	; 0x28
   2f7c8:	add	r4, r4, #1
   2f7cc:	add	r0, r0, r4
   2f7d0:	cmp	r0, r8
   2f7d4:	bcc	2f77c <__assert_fail@plt+0x1dad0>
   2f7d8:	ldr	r0, [sp, #32]
   2f7dc:	ldr	r1, [sp, #36]	; 0x24
   2f7e0:	ldr	r5, [sp, #40]	; 0x28
   2f7e4:	add	r4, r0, r1
   2f7e8:	cmp	r5, #0
   2f7ec:	beq	301c8 <__assert_fail@plt+0x1e51c>
   2f7f0:	ldr	r0, [sp, #44]	; 0x2c
   2f7f4:	ldrb	r8, [r0, r5]
   2f7f8:	add	r0, sl, r8, lsl #1
   2f7fc:	ldrb	r0, [r0, #1]
   2f800:	tst	r0, #1
   2f804:	beq	2f814 <__assert_fail@plt+0x1db68>
   2f808:	bl	11a60 <__ctype_tolower_loc@plt>
   2f80c:	ldr	r0, [r0]
   2f810:	ldr	r8, [r0, r8, lsl #2]
   2f814:	ldrb	r6, [r4, r5]
   2f818:	add	r0, sl, r6, lsl #1
   2f81c:	ldrb	r0, [r0, #1]
   2f820:	tst	r0, #1
   2f824:	beq	2f834 <__assert_fail@plt+0x1db88>
   2f828:	bl	11a60 <__ctype_tolower_loc@plt>
   2f82c:	ldr	r0, [r0]
   2f830:	ldr	r6, [r0, r6, lsl #2]
   2f834:	cmp	r8, r6
   2f838:	ldr	r8, [sp, #48]	; 0x30
   2f83c:	sub	r5, r5, #1
   2f840:	beq	2f7e8 <__assert_fail@plt+0x1db3c>
   2f844:	ldr	r1, [sp, #20]
   2f848:	b	2f850 <__assert_fail@plt+0x1dba4>
   2f84c:	add	r1, r4, #1
   2f850:	ldr	r2, [sp, #36]	; 0x24
   2f854:	ldr	r0, [sp, #28]
   2f858:	ldr	r3, [sp, #24]
   2f85c:	mov	r4, #0
   2f860:	add	r2, r1, r2
   2f864:	add	r0, r0, r3
   2f868:	mov	r1, #0
   2f86c:	add	r5, r2, r8
   2f870:	str	r2, [sp, #36]	; 0x24
   2f874:	sub	r2, r5, r3
   2f878:	bl	11b68 <memchr@plt>
   2f87c:	cmp	r0, #0
   2f880:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2f884:	cmp	r5, #0
   2f888:	bne	2f764 <__assert_fail@plt+0x1dab8>
   2f88c:	b	2f8a0 <__assert_fail@plt+0x1dbf4>
   2f890:	ldrb	r0, [sl]
   2f894:	cmp	r0, #0
   2f898:	movne	r9, #0
   2f89c:	mov	r4, r9
   2f8a0:	mov	r0, r4
   2f8a4:	sub	sp, fp, #28
   2f8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f8ac:	sub	r2, fp, #36	; 0x24
   2f8b0:	mov	r0, sl
   2f8b4:	mov	r1, r8
   2f8b8:	sub	r6, r8, #1
   2f8bc:	bl	302f0 <__assert_fail@plt+0x1e644>
   2f8c0:	add	r2, sp, #52	; 0x34
   2f8c4:	str	r0, [sp, #16]
   2f8c8:	vdup.32	q8, r8
   2f8cc:	mov	r1, #1008	; 0x3f0
   2f8d0:	add	r0, r2, #16
   2f8d4:	vst1.32	{d16-d17}, [r0]
   2f8d8:	add	r0, r2, #32
   2f8dc:	vst1.32	{d16-d17}, [r0]
   2f8e0:	add	r0, r2, #48	; 0x30
   2f8e4:	vst1.32	{d16-d17}, [r0]
   2f8e8:	add	r0, r2, #64	; 0x40
   2f8ec:	vst1.32	{d16-d17}, [r0]
   2f8f0:	add	r0, r2, #80	; 0x50
   2f8f4:	vst1.32	{d16-d17}, [r0]
   2f8f8:	add	r0, r2, #96	; 0x60
   2f8fc:	vst1.32	{d16-d17}, [r0]
   2f900:	add	r0, r2, #112	; 0x70
   2f904:	vst1.32	{d16-d17}, [r0]
   2f908:	add	r0, r2, #128	; 0x80
   2f90c:	vst1.32	{d16-d17}, [r0]
   2f910:	add	r0, r2, #144	; 0x90
   2f914:	vst1.32	{d16-d17}, [r0]
   2f918:	add	r0, r2, #160	; 0xa0
   2f91c:	vst1.32	{d16-d17}, [r0]
   2f920:	add	r0, r2, #176	; 0xb0
   2f924:	vst1.32	{d16-d17}, [r0]
   2f928:	add	r0, r2, #192	; 0xc0
   2f92c:	vst1.32	{d16-d17}, [r0]
   2f930:	add	r0, r2, #208	; 0xd0
   2f934:	vst1.32	{d16-d17}, [r0]
   2f938:	add	r0, r2, #224	; 0xe0
   2f93c:	vst1.32	{d16-d17}, [r0]
   2f940:	add	r0, r2, #240	; 0xf0
   2f944:	vst1.32	{d16-d17}, [r0]
   2f948:	add	r0, r2, #256	; 0x100
   2f94c:	vst1.32	{d16-d17}, [r0]
   2f950:	add	r0, r2, #272	; 0x110
   2f954:	vst1.32	{d16-d17}, [r0]
   2f958:	mov	r0, r2
   2f95c:	vst1.32	{d16-d17}, [r0], r1
   2f960:	add	r1, r2, #304	; 0x130
   2f964:	vst1.32	{d16-d17}, [r1]
   2f968:	add	r1, r2, #288	; 0x120
   2f96c:	vst1.32	{d16-d17}, [r1]
   2f970:	add	r1, r2, #320	; 0x140
   2f974:	vst1.32	{d16-d17}, [r1]
   2f978:	add	r1, r2, #336	; 0x150
   2f97c:	vst1.32	{d16-d17}, [r1]
   2f980:	add	r1, r2, #352	; 0x160
   2f984:	vst1.32	{d16-d17}, [r1]
   2f988:	add	r1, r2, #368	; 0x170
   2f98c:	vst1.32	{d16-d17}, [r1]
   2f990:	add	r1, r2, #384	; 0x180
   2f994:	vst1.32	{d16-d17}, [r1]
   2f998:	add	r1, r2, #400	; 0x190
   2f99c:	vst1.32	{d16-d17}, [r1]
   2f9a0:	add	r1, r2, #416	; 0x1a0
   2f9a4:	vst1.32	{d16-d17}, [r1]
   2f9a8:	add	r1, r2, #432	; 0x1b0
   2f9ac:	vst1.32	{d16-d17}, [r1]
   2f9b0:	add	r1, r2, #448	; 0x1c0
   2f9b4:	vst1.32	{d16-d17}, [r1]
   2f9b8:	add	r1, r2, #464	; 0x1d0
   2f9bc:	vst1.32	{d16-d17}, [r1]
   2f9c0:	add	r1, r2, #480	; 0x1e0
   2f9c4:	vst1.32	{d16-d17}, [r1]
   2f9c8:	add	r1, r2, #496	; 0x1f0
   2f9cc:	vst1.32	{d16-d17}, [r1]
   2f9d0:	add	r1, r2, #512	; 0x200
   2f9d4:	vst1.32	{d16-d17}, [r1]
   2f9d8:	add	r1, r2, #528	; 0x210
   2f9dc:	vst1.32	{d16-d17}, [r1]
   2f9e0:	add	r1, r2, #544	; 0x220
   2f9e4:	vst1.32	{d16-d17}, [r1]
   2f9e8:	add	r1, r2, #560	; 0x230
   2f9ec:	vst1.32	{d16-d17}, [r1]
   2f9f0:	add	r1, r2, #576	; 0x240
   2f9f4:	vst1.32	{d16-d17}, [r1]
   2f9f8:	add	r1, r2, #608	; 0x260
   2f9fc:	vst1.32	{d16-d17}, [r1]
   2fa00:	add	r1, r2, #592	; 0x250
   2fa04:	vst1.32	{d16-d17}, [r1]
   2fa08:	add	r1, r2, #624	; 0x270
   2fa0c:	vst1.32	{d16-d17}, [r1]
   2fa10:	add	r1, r2, #640	; 0x280
   2fa14:	vst1.32	{d16-d17}, [r1]
   2fa18:	add	r1, r2, #656	; 0x290
   2fa1c:	vst1.32	{d16-d17}, [r1]
   2fa20:	add	r1, r2, #672	; 0x2a0
   2fa24:	vst1.32	{d16-d17}, [r1]
   2fa28:	add	r1, r2, #688	; 0x2b0
   2fa2c:	vst1.32	{d16-d17}, [r1]
   2fa30:	add	r1, r2, #704	; 0x2c0
   2fa34:	vst1.32	{d16-d17}, [r1]
   2fa38:	add	r1, r2, #720	; 0x2d0
   2fa3c:	vst1.32	{d16-d17}, [r1]
   2fa40:	add	r1, r2, #736	; 0x2e0
   2fa44:	vst1.32	{d16-d17}, [r1]
   2fa48:	add	r1, r2, #752	; 0x2f0
   2fa4c:	vst1.32	{d16-d17}, [r1]
   2fa50:	add	r1, r2, #768	; 0x300
   2fa54:	vst1.32	{d16-d17}, [r1]
   2fa58:	add	r1, r2, #784	; 0x310
   2fa5c:	vst1.32	{d16-d17}, [r1]
   2fa60:	add	r1, r2, #800	; 0x320
   2fa64:	vst1.32	{d16-d17}, [r1]
   2fa68:	add	r1, r2, #816	; 0x330
   2fa6c:	vst1.32	{d16-d17}, [r1]
   2fa70:	add	r1, r2, #832	; 0x340
   2fa74:	vst1.32	{d16-d17}, [r1]
   2fa78:	add	r1, r2, #848	; 0x350
   2fa7c:	vst1.32	{d16-d17}, [r1]
   2fa80:	add	r1, r2, #864	; 0x360
   2fa84:	vst1.32	{d16-d17}, [r1]
   2fa88:	add	r1, r2, #880	; 0x370
   2fa8c:	vst1.32	{d16-d17}, [r1]
   2fa90:	add	r1, r2, #912	; 0x390
   2fa94:	vst1.32	{d16-d17}, [r1]
   2fa98:	add	r1, r2, #896	; 0x380
   2fa9c:	vst1.32	{d16-d17}, [r1]
   2faa0:	add	r1, r2, #928	; 0x3a0
   2faa4:	vst1.32	{d16-d17}, [r1]
   2faa8:	add	r1, r2, #944	; 0x3b0
   2faac:	vst1.32	{d16-d17}, [r1]
   2fab0:	add	r1, r2, #960	; 0x3c0
   2fab4:	vst1.32	{d16-d17}, [r1]
   2fab8:	add	r1, r2, #976	; 0x3d0
   2fabc:	vst1.32	{d16-d17}, [r1]
   2fac0:	add	r1, r2, #992	; 0x3e0
   2fac4:	vst1.32	{d16-d17}, [r1]
   2fac8:	vst1.32	{d16-d17}, [r0]
   2facc:	bl	11a90 <__ctype_b_loc@plt>
   2fad0:	ldr	r4, [r0]
   2fad4:	mov	r5, sl
   2fad8:	str	r6, [sp, #40]	; 0x28
   2fadc:	ldrb	r7, [r5]
   2fae0:	add	r0, r4, r7, lsl #1
   2fae4:	ldrb	r0, [r0, #1]
   2fae8:	tst	r0, #1
   2faec:	beq	2fafc <__assert_fail@plt+0x1de50>
   2faf0:	bl	11a60 <__ctype_tolower_loc@plt>
   2faf4:	ldr	r0, [r0]
   2faf8:	ldr	r7, [r0, r7, lsl #2]
   2fafc:	add	r0, sp, #52	; 0x34
   2fb00:	add	r5, r5, #1
   2fb04:	str	r6, [r0, r7, lsl #2]
   2fb08:	sub	r6, r6, #1
   2fb0c:	cmn	r6, #1
   2fb10:	bne	2fadc <__assert_fail@plt+0x1de30>
   2fb14:	ldr	r6, [fp, #-36]	; 0xffffffdc
   2fb18:	ldr	r7, [sp, #16]
   2fb1c:	mov	r0, sl
   2fb20:	add	r1, sl, r6
   2fb24:	mov	r2, r7
   2fb28:	bl	11b08 <strncasecmp@plt>
   2fb2c:	cmp	r0, #0
   2fb30:	beq	2fed8 <__assert_fail@plt+0x1e22c>
   2fb34:	sub	r0, r8, r7
   2fb38:	mov	r1, #0
   2fb3c:	mov	r2, #1
   2fb40:	mov	r4, #0
   2fb44:	cmp	r7, r0
   2fb48:	movcs	r0, r7
   2fb4c:	add	r0, r0, #1
   2fb50:	str	r0, [sp, #36]	; 0x24
   2fb54:	str	r0, [fp, #-36]	; 0xffffffdc
   2fb58:	add	r0, r9, r8
   2fb5c:	bl	11b68 <memchr@plt>
   2fb60:	cmp	r8, #0
   2fb64:	beq	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fb68:	cmp	r0, #0
   2fb6c:	str	r9, [sp, #32]
   2fb70:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fb74:	bl	11a90 <__ctype_b_loc@plt>
   2fb78:	ldr	r8, [r0]
   2fb7c:	ldr	r0, [sp, #40]	; 0x28
   2fb80:	cmp	r7, r0
   2fb84:	bcs	301e0 <__assert_fail@plt+0x1e534>
   2fb88:	add	r0, sl, r7
   2fb8c:	ldr	r5, [sp, #48]	; 0x30
   2fb90:	sub	r9, sl, #1
   2fb94:	mov	sl, #0
   2fb98:	str	r0, [sp, #44]	; 0x2c
   2fb9c:	ldr	r0, [sp, #32]
   2fba0:	str	r9, [sp, #12]
   2fba4:	add	r0, r0, r7
   2fba8:	add	r0, r0, #1
   2fbac:	str	r0, [sp, #20]
   2fbb0:	ldr	r0, [sp, #32]
   2fbb4:	ldrb	r4, [r0, r5]
   2fbb8:	add	r0, r8, r4, lsl #1
   2fbbc:	ldrb	r0, [r0, #1]
   2fbc0:	tst	r0, #1
   2fbc4:	beq	2fbd4 <__assert_fail@plt+0x1df28>
   2fbc8:	bl	11a60 <__ctype_tolower_loc@plt>
   2fbcc:	ldr	r0, [r0]
   2fbd0:	ldr	r4, [r0, r4, lsl #2]
   2fbd4:	add	r0, sp, #52	; 0x34
   2fbd8:	ldr	r1, [r0, r4, lsl #2]
   2fbdc:	cmp	r1, #0
   2fbe0:	bne	2fccc <__assert_fail@plt+0x1e020>
   2fbe4:	ldr	r0, [sp, #20]
   2fbe8:	mov	r4, #0
   2fbec:	str	r5, [sp, #24]
   2fbf0:	add	r9, r0, sl
   2fbf4:	ldr	r0, [sp, #44]	; 0x2c
   2fbf8:	ldrb	r5, [r0, r4]
   2fbfc:	add	r0, r8, r5, lsl #1
   2fc00:	ldrb	r0, [r0, #1]
   2fc04:	tst	r0, #1
   2fc08:	beq	2fc18 <__assert_fail@plt+0x1df6c>
   2fc0c:	bl	11a60 <__ctype_tolower_loc@plt>
   2fc10:	ldr	r0, [r0]
   2fc14:	ldr	r5, [r0, r5, lsl #2]
   2fc18:	ldrb	r6, [r9, r4]
   2fc1c:	add	r0, r8, r6, lsl #1
   2fc20:	ldrb	r0, [r0, #1]
   2fc24:	tst	r0, #1
   2fc28:	beq	2fc38 <__assert_fail@plt+0x1df8c>
   2fc2c:	bl	11a60 <__ctype_tolower_loc@plt>
   2fc30:	ldr	r0, [r0]
   2fc34:	ldr	r6, [r0, r6, lsl #2]
   2fc38:	cmp	r5, r6
   2fc3c:	bne	2fcc4 <__assert_fail@plt+0x1e018>
   2fc40:	ldr	r1, [sp, #40]	; 0x28
   2fc44:	add	r4, r4, #1
   2fc48:	add	r0, r7, r4
   2fc4c:	cmp	r0, r1
   2fc50:	bcc	2fbf4 <__assert_fail@plt+0x1df48>
   2fc54:	ldr	r0, [sp, #32]
   2fc58:	ldr	r9, [sp, #12]
   2fc5c:	mov	r5, r7
   2fc60:	add	r4, r0, sl
   2fc64:	cmp	r5, #0
   2fc68:	beq	302c4 <__assert_fail@plt+0x1e618>
   2fc6c:	ldrb	r7, [r9, r5]
   2fc70:	add	r0, r8, r7, lsl #1
   2fc74:	ldrb	r0, [r0, #1]
   2fc78:	tst	r0, #1
   2fc7c:	beq	2fc8c <__assert_fail@plt+0x1dfe0>
   2fc80:	bl	11a60 <__ctype_tolower_loc@plt>
   2fc84:	ldr	r0, [r0]
   2fc88:	ldr	r7, [r0, r7, lsl #2]
   2fc8c:	ldrb	r6, [r4, r5]
   2fc90:	add	r0, r8, r6, lsl #1
   2fc94:	ldrb	r0, [r0, #1]
   2fc98:	tst	r0, #1
   2fc9c:	beq	2fcac <__assert_fail@plt+0x1e000>
   2fca0:	bl	11a60 <__ctype_tolower_loc@plt>
   2fca4:	ldr	r0, [r0]
   2fca8:	ldr	r6, [r0, r6, lsl #2]
   2fcac:	cmp	r7, r6
   2fcb0:	ldr	r7, [sp, #16]
   2fcb4:	sub	r5, r5, #1
   2fcb8:	beq	2fc64 <__assert_fail@plt+0x1dfb8>
   2fcbc:	ldr	r1, [sp, #36]	; 0x24
   2fcc0:	b	2fcc8 <__assert_fail@plt+0x1e01c>
   2fcc4:	add	r1, r4, #1
   2fcc8:	ldr	r5, [sp, #24]
   2fccc:	ldr	r0, [sp, #28]
   2fcd0:	add	sl, r1, sl
   2fcd4:	ldr	r1, [sp, #48]	; 0x30
   2fcd8:	mov	r2, r5
   2fcdc:	mov	r4, #0
   2fce0:	add	r0, r0, r5
   2fce4:	add	r5, sl, r1
   2fce8:	mov	r1, #0
   2fcec:	sub	r2, r5, r2
   2fcf0:	bl	11b68 <memchr@plt>
   2fcf4:	cmp	r0, #0
   2fcf8:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fcfc:	cmp	r5, #0
   2fd00:	bne	2fbb0 <__assert_fail@plt+0x1df04>
   2fd04:	b	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fd08:	add	r0, r9, r8
   2fd0c:	mov	r1, #0
   2fd10:	mov	r2, #1
   2fd14:	mov	r4, #0
   2fd18:	bl	11b68 <memchr@plt>
   2fd1c:	cmp	r8, #0
   2fd20:	beq	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fd24:	cmp	r0, #0
   2fd28:	str	r5, [sp, #20]
   2fd2c:	str	sl, [sp, #44]	; 0x2c
   2fd30:	str	r9, [sp, #32]
   2fd34:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fd38:	ldr	r0, [sp, #48]	; 0x30
   2fd3c:	ldr	r1, [sp, #20]
   2fd40:	mov	r8, #0
   2fd44:	sub	r1, r0, r1
   2fd48:	mov	r5, r0
   2fd4c:	str	r1, [sp, #16]
   2fd50:	ldr	r1, [sp, #44]	; 0x2c
   2fd54:	sub	sl, r1, #1
   2fd58:	ldr	r1, [sp, #40]	; 0x28
   2fd5c:	rsb	r1, r1, #0
   2fd60:	str	r1, [sp, #12]
   2fd64:	mov	r1, #0
   2fd68:	str	r1, [sp, #36]	; 0x24
   2fd6c:	ldr	r4, [sp, #40]	; 0x28
   2fd70:	ldr	r0, [sp, #48]	; 0x30
   2fd74:	str	r5, [sp, #24]
   2fd78:	cmp	r4, r8
   2fd7c:	movcc	r4, r8
   2fd80:	cmp	r4, r0
   2fd84:	bcs	2fdfc <__assert_fail@plt+0x1e150>
   2fd88:	ldr	r0, [sp, #32]
   2fd8c:	ldr	r1, [sp, #36]	; 0x24
   2fd90:	add	r9, r0, r1
   2fd94:	bl	11a90 <__ctype_b_loc@plt>
   2fd98:	ldr	r5, [r0]
   2fd9c:	ldr	r0, [sp, #44]	; 0x2c
   2fda0:	ldrb	r6, [r0, r4]
   2fda4:	add	r0, r5, r6, lsl #1
   2fda8:	ldrb	r0, [r0, #1]
   2fdac:	tst	r0, #1
   2fdb0:	beq	2fdc0 <__assert_fail@plt+0x1e114>
   2fdb4:	bl	11a60 <__ctype_tolower_loc@plt>
   2fdb8:	ldr	r0, [r0]
   2fdbc:	ldr	r6, [r0, r6, lsl #2]
   2fdc0:	add	r0, r9, r4
   2fdc4:	ldrb	r7, [r0, #1]
   2fdc8:	add	r0, r5, r7, lsl #1
   2fdcc:	ldrb	r0, [r0, #1]
   2fdd0:	tst	r0, #1
   2fdd4:	beq	2fde4 <__assert_fail@plt+0x1e138>
   2fdd8:	bl	11a60 <__ctype_tolower_loc@plt>
   2fddc:	ldr	r0, [r0]
   2fde0:	ldr	r7, [r0, r7, lsl #2]
   2fde4:	cmp	r6, r7
   2fde8:	bne	2fe84 <__assert_fail@plt+0x1e1d8>
   2fdec:	ldr	r0, [sp, #48]	; 0x30
   2fdf0:	add	r4, r4, #1
   2fdf4:	cmp	r4, r0
   2fdf8:	bcc	2fd9c <__assert_fail@plt+0x1e0f0>
   2fdfc:	ldr	r0, [sp, #32]
   2fe00:	ldr	r1, [sp, #36]	; 0x24
   2fe04:	add	r9, r0, r1
   2fe08:	ldr	r0, [sp, #40]	; 0x28
   2fe0c:	mov	r5, r0
   2fe10:	cmp	r8, r0
   2fe14:	bcs	2fe6c <__assert_fail@plt+0x1e1c0>
   2fe18:	bl	11a90 <__ctype_b_loc@plt>
   2fe1c:	ldrb	r6, [sl, r5]
   2fe20:	ldr	r7, [r0]
   2fe24:	add	r0, r7, r6, lsl #1
   2fe28:	ldrb	r0, [r0, #1]
   2fe2c:	tst	r0, #1
   2fe30:	beq	2fe40 <__assert_fail@plt+0x1e194>
   2fe34:	bl	11a60 <__ctype_tolower_loc@plt>
   2fe38:	ldr	r0, [r0]
   2fe3c:	ldr	r6, [r0, r6, lsl #2]
   2fe40:	ldrb	r4, [r9, r5]
   2fe44:	add	r0, r7, r4, lsl #1
   2fe48:	ldrb	r0, [r0, #1]
   2fe4c:	tst	r0, #1
   2fe50:	beq	2fe60 <__assert_fail@plt+0x1e1b4>
   2fe54:	bl	11a60 <__ctype_tolower_loc@plt>
   2fe58:	ldr	r0, [r0]
   2fe5c:	ldr	r4, [r0, r4, lsl #2]
   2fe60:	sub	r0, r5, #1
   2fe64:	cmp	r6, r4
   2fe68:	beq	2fe0c <__assert_fail@plt+0x1e160>
   2fe6c:	add	r0, r8, #1
   2fe70:	ldr	r8, [sp, #16]
   2fe74:	ldr	r1, [sp, #20]
   2fe78:	cmp	r5, r0
   2fe7c:	bcs	2fe94 <__assert_fail@plt+0x1e1e8>
   2fe80:	b	301c8 <__assert_fail@plt+0x1e51c>
   2fe84:	ldr	r0, [sp, #12]
   2fe88:	mov	r8, #0
   2fe8c:	add	r0, r0, r4
   2fe90:	add	r1, r0, #1
   2fe94:	ldr	r2, [sp, #36]	; 0x24
   2fe98:	ldr	r0, [sp, #28]
   2fe9c:	ldr	r3, [sp, #24]
   2fea0:	mov	r4, #0
   2fea4:	add	r2, r1, r2
   2fea8:	ldr	r1, [sp, #48]	; 0x30
   2feac:	add	r0, r0, r3
   2feb0:	str	r2, [sp, #36]	; 0x24
   2feb4:	add	r5, r2, r1
   2feb8:	mov	r1, #0
   2febc:	sub	r2, r5, r3
   2fec0:	bl	11b68 <memchr@plt>
   2fec4:	cmp	r0, #0
   2fec8:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fecc:	cmp	r5, #0
   2fed0:	bne	2fd6c <__assert_fail@plt+0x1e0c0>
   2fed4:	b	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fed8:	add	r0, r9, r8
   2fedc:	mov	r1, #0
   2fee0:	mov	r2, #1
   2fee4:	mov	r4, #0
   2fee8:	bl	11b68 <memchr@plt>
   2feec:	cmp	r8, #0
   2fef0:	beq	2f8a0 <__assert_fail@plt+0x1dbf4>
   2fef4:	cmp	r0, #0
   2fef8:	str	sl, [sp, #44]	; 0x2c
   2fefc:	str	r9, [sp, #32]
   2ff00:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   2ff04:	ldr	r4, [sp, #48]	; 0x30
   2ff08:	sub	r0, r4, r6
   2ff0c:	str	r0, [sp, #12]
   2ff10:	ldr	r0, [sp, #44]	; 0x2c
   2ff14:	sub	r0, r0, #1
   2ff18:	str	r0, [sp, #36]	; 0x24
   2ff1c:	rsb	r0, r7, #0
   2ff20:	str	r0, [sp, #4]
   2ff24:	bl	11a90 <__ctype_b_loc@plt>
   2ff28:	ldr	sl, [r0]
   2ff2c:	mov	r0, #0
   2ff30:	mov	r5, r4
   2ff34:	mov	r9, #0
   2ff38:	str	r6, [sp, #8]
   2ff3c:	str	r0, [sp, #24]
   2ff40:	ldr	r0, [sp, #32]
   2ff44:	str	r5, [sp, #20]
   2ff48:	ldrb	r4, [r0, r5]
   2ff4c:	add	r0, sl, r4, lsl #1
   2ff50:	ldrb	r0, [r0, #1]
   2ff54:	tst	r0, #1
   2ff58:	beq	2ff68 <__assert_fail@plt+0x1e2bc>
   2ff5c:	bl	11a60 <__ctype_tolower_loc@plt>
   2ff60:	ldr	r0, [r0]
   2ff64:	ldr	r4, [r0, r4, lsl #2]
   2ff68:	add	r0, sp, #52	; 0x34
   2ff6c:	ldr	r8, [sp, #48]	; 0x30
   2ff70:	ldr	r0, [r0, r4, lsl #2]
   2ff74:	cmp	r0, #0
   2ff78:	beq	2ff9c <__assert_fail@plt+0x1e2f0>
   2ff7c:	ldr	r2, [sp, #12]
   2ff80:	cmp	r0, r6
   2ff84:	mov	r1, r0
   2ff88:	movcc	r1, r2
   2ff8c:	cmp	r9, #0
   2ff90:	mov	r9, #0
   2ff94:	moveq	r1, r0
   2ff98:	b	300c8 <__assert_fail@plt+0x1e41c>
   2ff9c:	ldr	r0, [sp, #40]	; 0x28
   2ffa0:	cmp	r7, r9
   2ffa4:	mov	r4, r7
   2ffa8:	movcc	r4, r9
   2ffac:	cmp	r4, r0
   2ffb0:	bcs	30020 <__assert_fail@plt+0x1e374>
   2ffb4:	ldr	r0, [sp, #32]
   2ffb8:	ldr	r1, [sp, #24]
   2ffbc:	add	r8, r0, r1
   2ffc0:	ldr	r0, [sp, #44]	; 0x2c
   2ffc4:	ldrb	r6, [r0, r4]
   2ffc8:	add	r0, sl, r6, lsl #1
   2ffcc:	ldrb	r0, [r0, #1]
   2ffd0:	tst	r0, #1
   2ffd4:	beq	2ffe4 <__assert_fail@plt+0x1e338>
   2ffd8:	bl	11a60 <__ctype_tolower_loc@plt>
   2ffdc:	ldr	r0, [r0]
   2ffe0:	ldr	r6, [r0, r6, lsl #2]
   2ffe4:	add	r0, r8, r4
   2ffe8:	ldrb	r5, [r0, #1]
   2ffec:	add	r0, sl, r5, lsl #1
   2fff0:	ldrb	r0, [r0, #1]
   2fff4:	tst	r0, #1
   2fff8:	beq	30008 <__assert_fail@plt+0x1e35c>
   2fffc:	bl	11a60 <__ctype_tolower_loc@plt>
   30000:	ldr	r0, [r0]
   30004:	ldr	r5, [r0, r5, lsl #2]
   30008:	cmp	r6, r5
   3000c:	bne	300b0 <__assert_fail@plt+0x1e404>
   30010:	ldr	r0, [sp, #40]	; 0x28
   30014:	add	r4, r4, #1
   30018:	cmp	r4, r0
   3001c:	bcc	2ffc0 <__assert_fail@plt+0x1e314>
   30020:	ldr	r0, [sp, #32]
   30024:	ldr	r1, [sp, #24]
   30028:	ldr	r8, [sp, #48]	; 0x30
   3002c:	add	r4, r0, r1
   30030:	mov	r0, r7
   30034:	mov	r7, r0
   30038:	cmp	r9, r0
   3003c:	bcs	30090 <__assert_fail@plt+0x1e3e4>
   30040:	ldr	r0, [sp, #36]	; 0x24
   30044:	ldrb	r6, [r0, r7]
   30048:	add	r0, sl, r6, lsl #1
   3004c:	ldrb	r0, [r0, #1]
   30050:	tst	r0, #1
   30054:	beq	30064 <__assert_fail@plt+0x1e3b8>
   30058:	bl	11a60 <__ctype_tolower_loc@plt>
   3005c:	ldr	r0, [r0]
   30060:	ldr	r6, [r0, r6, lsl #2]
   30064:	ldrb	r5, [r4, r7]
   30068:	add	r0, sl, r5, lsl #1
   3006c:	ldrb	r0, [r0, #1]
   30070:	tst	r0, #1
   30074:	beq	30084 <__assert_fail@plt+0x1e3d8>
   30078:	bl	11a60 <__ctype_tolower_loc@plt>
   3007c:	ldr	r0, [r0]
   30080:	ldr	r5, [r0, r5, lsl #2]
   30084:	sub	r0, r7, #1
   30088:	cmp	r6, r5
   3008c:	beq	30034 <__assert_fail@plt+0x1e388>
   30090:	add	r0, r9, #1
   30094:	ldr	r6, [sp, #8]
   30098:	ldr	r9, [sp, #12]
   3009c:	cmp	r7, r0
   300a0:	ldr	r7, [sp, #16]
   300a4:	mov	r1, r6
   300a8:	bcs	300c8 <__assert_fail@plt+0x1e41c>
   300ac:	b	302d8 <__assert_fail@plt+0x1e62c>
   300b0:	ldr	r0, [sp, #4]
   300b4:	ldr	r8, [sp, #48]	; 0x30
   300b8:	ldr	r6, [sp, #8]
   300bc:	mov	r9, #0
   300c0:	add	r0, r0, r4
   300c4:	add	r1, r0, #1
   300c8:	ldr	r2, [sp, #24]
   300cc:	ldr	r0, [sp, #28]
   300d0:	ldr	r3, [sp, #20]
   300d4:	mov	r4, #0
   300d8:	add	r2, r1, r2
   300dc:	add	r0, r0, r3
   300e0:	mov	r1, #0
   300e4:	add	r5, r2, r8
   300e8:	str	r2, [sp, #24]
   300ec:	sub	r2, r5, r3
   300f0:	bl	11b68 <memchr@plt>
   300f4:	cmp	r0, #0
   300f8:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   300fc:	cmp	r5, #0
   30100:	bne	2ff40 <__assert_fail@plt+0x1e294>
   30104:	b	2f8a0 <__assert_fail@plt+0x1dbf4>
   30108:	sub	r9, sl, #1
   3010c:	mov	r0, #0
   30110:	str	r0, [sp, #36]	; 0x24
   30114:	ldr	r4, [sp, #40]	; 0x28
   30118:	ldr	sl, [sp, #32]
   3011c:	cmp	r4, #0
   30120:	beq	301c8 <__assert_fail@plt+0x1e51c>
   30124:	bl	11a90 <__ctype_b_loc@plt>
   30128:	ldrb	r5, [r9, r4]
   3012c:	ldr	r7, [r0]
   30130:	add	r0, r7, r5, lsl #1
   30134:	ldrb	r0, [r0, #1]
   30138:	tst	r0, #1
   3013c:	beq	3014c <__assert_fail@plt+0x1e4a0>
   30140:	bl	11a60 <__ctype_tolower_loc@plt>
   30144:	ldr	r0, [r0]
   30148:	ldr	r5, [r0, r5, lsl #2]
   3014c:	ldrb	r6, [sl, r4]
   30150:	add	r0, r7, r6, lsl #1
   30154:	ldrb	r0, [r0, #1]
   30158:	tst	r0, #1
   3015c:	beq	3016c <__assert_fail@plt+0x1e4c0>
   30160:	bl	11a60 <__ctype_tolower_loc@plt>
   30164:	ldr	r0, [r0]
   30168:	ldr	r6, [r0, r6, lsl #2]
   3016c:	sub	r4, r4, #1
   30170:	cmp	r5, r6
   30174:	beq	3011c <__assert_fail@plt+0x1e470>
   30178:	ldr	r6, [sp, #20]
   3017c:	ldr	r1, [sp, #36]	; 0x24
   30180:	ldr	r0, [sp, #48]	; 0x30
   30184:	mov	r4, #0
   30188:	add	r1, r1, r6
   3018c:	mov	r2, r6
   30190:	add	r5, r1, r0
   30194:	ldr	r0, [sp, #28]
   30198:	str	r1, [sp, #36]	; 0x24
   3019c:	mov	r1, #0
   301a0:	add	r0, r0, r8
   301a4:	bl	11b68 <memchr@plt>
   301a8:	cmp	r5, #0
   301ac:	beq	2f8a0 <__assert_fail@plt+0x1dbf4>
   301b0:	add	sl, sl, r6
   301b4:	cmp	r0, #0
   301b8:	mov	r8, r5
   301bc:	str	sl, [sp, #32]
   301c0:	beq	30114 <__assert_fail@plt+0x1e468>
   301c4:	b	2f8a0 <__assert_fail@plt+0x1dbf4>
   301c8:	ldr	r0, [sp, #28]
   301cc:	ldr	r1, [sp, #36]	; 0x24
   301d0:	add	r4, r0, r1
   301d4:	mov	r0, r4
   301d8:	sub	sp, fp, #28
   301dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301e0:	ldr	r5, [sp, #48]	; 0x30
   301e4:	sub	r6, sl, #1
   301e8:	mov	sl, #0
   301ec:	ldr	r0, [sp, #32]
   301f0:	str	r5, [sp, #44]	; 0x2c
   301f4:	ldrb	r4, [r0, r5]
   301f8:	add	r0, r8, r4, lsl #1
   301fc:	ldrb	r0, [r0, #1]
   30200:	tst	r0, #1
   30204:	beq	30214 <__assert_fail@plt+0x1e568>
   30208:	bl	11a60 <__ctype_tolower_loc@plt>
   3020c:	ldr	r0, [r0]
   30210:	ldr	r4, [r0, r4, lsl #2]
   30214:	add	r0, sp, #52	; 0x34
   30218:	ldr	r1, [r0, r4, lsl #2]
   3021c:	cmp	r1, #0
   30220:	bne	30288 <__assert_fail@plt+0x1e5dc>
   30224:	ldr	r0, [sp, #32]
   30228:	add	r4, r0, sl
   3022c:	cmp	r7, #0
   30230:	beq	302c4 <__assert_fail@plt+0x1e618>
   30234:	ldrb	r5, [r6, r7]
   30238:	add	r0, r8, r5, lsl #1
   3023c:	ldrb	r0, [r0, #1]
   30240:	tst	r0, #1
   30244:	beq	30254 <__assert_fail@plt+0x1e5a8>
   30248:	bl	11a60 <__ctype_tolower_loc@plt>
   3024c:	ldr	r0, [r0]
   30250:	ldr	r5, [r0, r5, lsl #2]
   30254:	ldrb	r9, [r4, r7]
   30258:	add	r0, r8, r9, lsl #1
   3025c:	ldrb	r0, [r0, #1]
   30260:	tst	r0, #1
   30264:	beq	30274 <__assert_fail@plt+0x1e5c8>
   30268:	bl	11a60 <__ctype_tolower_loc@plt>
   3026c:	ldr	r0, [r0]
   30270:	ldr	r9, [r0, r9, lsl #2]
   30274:	sub	r7, r7, #1
   30278:	cmp	r5, r9
   3027c:	beq	3022c <__assert_fail@plt+0x1e580>
   30280:	ldr	r1, [sp, #36]	; 0x24
   30284:	ldr	r7, [sp, #16]
   30288:	add	sl, r1, sl
   3028c:	ldr	r1, [sp, #48]	; 0x30
   30290:	ldr	r0, [sp, #28]
   30294:	ldr	r2, [sp, #44]	; 0x2c
   30298:	mov	r4, #0
   3029c:	add	r5, sl, r1
   302a0:	add	r0, r0, r2
   302a4:	mov	r1, #0
   302a8:	sub	r2, r5, r2
   302ac:	bl	11b68 <memchr@plt>
   302b0:	cmp	r0, #0
   302b4:	bne	2f8a0 <__assert_fail@plt+0x1dbf4>
   302b8:	cmp	r5, #0
   302bc:	bne	301ec <__assert_fail@plt+0x1e540>
   302c0:	b	2f8a0 <__assert_fail@plt+0x1dbf4>
   302c4:	ldr	r0, [sp, #28]
   302c8:	add	r4, r0, sl
   302cc:	mov	r0, r4
   302d0:	sub	sp, fp, #28
   302d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302d8:	ldr	r0, [sp, #28]
   302dc:	ldr	r1, [sp, #24]
   302e0:	add	r4, r0, r1
   302e4:	mov	r0, r4
   302e8:	sub	sp, fp, #28
   302ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   302f4:	add	fp, sp, #28
   302f8:	sub	sp, sp, #20
   302fc:	mov	r6, r1
   30300:	cmp	r1, #3
   30304:	str	r0, [sp, #16]
   30308:	bcs	30320 <__assert_fail@plt+0x1e674>
   3030c:	mov	r0, #1
   30310:	str	r0, [r2]
   30314:	sub	r0, r6, #1
   30318:	sub	sp, fp, #28
   3031c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30320:	str	r2, [sp]
   30324:	bl	11a90 <__ctype_b_loc@plt>
   30328:	ldr	r2, [r0]
   3032c:	mov	r0, #0
   30330:	mvn	r4, #0
   30334:	mov	r7, #1
   30338:	mov	r5, #1
   3033c:	mov	r1, #1
   30340:	str	r6, [sp, #12]
   30344:	str	r2, [sp, #4]
   30348:	mov	r6, r0
   3034c:	ldr	r0, [sp, #16]
   30350:	str	r1, [sp, #8]
   30354:	ldrb	r8, [r0, r7]
   30358:	add	r0, r2, r8, lsl #1
   3035c:	ldrb	r0, [r0, #1]
   30360:	tst	r0, #1
   30364:	beq	30378 <__assert_fail@plt+0x1e6cc>
   30368:	bl	11a60 <__ctype_tolower_loc@plt>
   3036c:	ldr	r0, [r0]
   30370:	ldr	r2, [sp, #4]
   30374:	ldrb	r8, [r0, r8, lsl #2]
   30378:	ldr	r1, [sp, #16]
   3037c:	add	r0, r4, r5
   30380:	mov	r9, r4
   30384:	ldrb	sl, [r1, r0]
   30388:	add	r0, r2, sl, lsl #1
   3038c:	ldrb	r0, [r0, #1]
   30390:	tst	r0, #1
   30394:	beq	303a8 <__assert_fail@plt+0x1e6fc>
   30398:	bl	11a60 <__ctype_tolower_loc@plt>
   3039c:	ldr	r0, [r0]
   303a0:	ldr	r2, [sp, #4]
   303a4:	ldrb	sl, [r0, sl, lsl #2]
   303a8:	cmp	r8, sl
   303ac:	bcs	303d4 <__assert_fail@plt+0x1e728>
   303b0:	mov	r4, r9
   303b4:	sub	r1, r7, r9
   303b8:	mov	r5, #1
   303bc:	mov	r0, r7
   303c0:	ldr	r6, [sp, #12]
   303c4:	add	r7, r0, r5
   303c8:	cmp	r7, r6
   303cc:	bcc	30348 <__assert_fail@plt+0x1e69c>
   303d0:	b	30434 <__assert_fail@plt+0x1e788>
   303d4:	bne	303f4 <__assert_fail@plt+0x1e748>
   303d8:	ldr	r1, [sp, #8]
   303dc:	cmp	r5, r1
   303e0:	bne	30418 <__assert_fail@plt+0x1e76c>
   303e4:	add	r0, r6, r5
   303e8:	mov	r1, r5
   303ec:	mov	r5, #1
   303f0:	b	30420 <__assert_fail@plt+0x1e774>
   303f4:	add	r0, r6, #1
   303f8:	mov	r1, #1
   303fc:	mov	r5, #1
   30400:	mov	r4, r6
   30404:	ldr	r6, [sp, #12]
   30408:	add	r7, r0, r5
   3040c:	cmp	r7, r6
   30410:	bcc	30348 <__assert_fail@plt+0x1e69c>
   30414:	b	30434 <__assert_fail@plt+0x1e788>
   30418:	add	r5, r5, #1
   3041c:	mov	r0, r6
   30420:	ldr	r6, [sp, #12]
   30424:	mov	r4, r9
   30428:	add	r7, r0, r5
   3042c:	cmp	r7, r6
   30430:	bcc	30348 <__assert_fail@plt+0x1e69c>
   30434:	ldr	r0, [sp]
   30438:	cmp	r6, #2
   3043c:	str	r4, [sp, #4]
   30440:	str	r1, [r0]
   30444:	bcc	30554 <__assert_fail@plt+0x1e8a8>
   30448:	bl	11a90 <__ctype_b_loc@plt>
   3044c:	ldr	r3, [r0]
   30450:	mov	r0, #0
   30454:	mvn	r5, #0
   30458:	mov	r7, #1
   3045c:	mov	sl, #1
   30460:	mov	r9, #1
   30464:	str	r3, [sp, #8]
   30468:	mov	r4, r0
   3046c:	ldr	r0, [sp, #16]
   30470:	ldrb	r6, [r0, r7]
   30474:	add	r0, r3, r6, lsl #1
   30478:	ldrb	r0, [r0, #1]
   3047c:	tst	r0, #1
   30480:	beq	30494 <__assert_fail@plt+0x1e7e8>
   30484:	bl	11a60 <__ctype_tolower_loc@plt>
   30488:	ldr	r0, [r0]
   3048c:	ldr	r3, [sp, #8]
   30490:	ldrb	r6, [r0, r6, lsl #2]
   30494:	ldr	r1, [sp, #16]
   30498:	add	r0, r5, sl
   3049c:	mov	r8, r5
   304a0:	ldrb	r5, [r1, r0]
   304a4:	add	r0, r3, r5, lsl #1
   304a8:	ldrb	r0, [r0, #1]
   304ac:	tst	r0, #1
   304b0:	beq	304c4 <__assert_fail@plt+0x1e818>
   304b4:	bl	11a60 <__ctype_tolower_loc@plt>
   304b8:	ldr	r0, [r0]
   304bc:	ldr	r3, [sp, #8]
   304c0:	ldrb	r5, [r0, r5, lsl #2]
   304c4:	cmp	r5, r6
   304c8:	bcs	304f0 <__assert_fail@plt+0x1e844>
   304cc:	mov	r5, r8
   304d0:	sub	r9, r7, r8
   304d4:	mov	sl, #1
   304d8:	mov	r0, r7
   304dc:	ldr	r1, [sp, #12]
   304e0:	add	r7, r0, sl
   304e4:	cmp	r7, r1
   304e8:	bcc	30468 <__assert_fail@plt+0x1e7bc>
   304ec:	b	3055c <__assert_fail@plt+0x1e8b0>
   304f0:	cmp	r6, r5
   304f4:	bne	30510 <__assert_fail@plt+0x1e864>
   304f8:	cmp	sl, r9
   304fc:	bne	30534 <__assert_fail@plt+0x1e888>
   30500:	add	r0, r4, sl
   30504:	mov	r9, sl
   30508:	mov	sl, #1
   3050c:	b	3053c <__assert_fail@plt+0x1e890>
   30510:	add	r0, r4, #1
   30514:	mov	r9, #1
   30518:	mov	sl, #1
   3051c:	mov	r5, r4
   30520:	ldr	r1, [sp, #12]
   30524:	add	r7, r0, sl
   30528:	cmp	r7, r1
   3052c:	bcc	30468 <__assert_fail@plt+0x1e7bc>
   30530:	b	3055c <__assert_fail@plt+0x1e8b0>
   30534:	add	sl, sl, #1
   30538:	mov	r0, r4
   3053c:	ldr	r1, [sp, #12]
   30540:	mov	r5, r8
   30544:	add	r7, r0, sl
   30548:	cmp	r7, r1
   3054c:	bcc	30468 <__assert_fail@plt+0x1e7bc>
   30550:	b	3055c <__assert_fail@plt+0x1e8b0>
   30554:	mvn	r5, #0
   30558:	mov	r9, #1
   3055c:	ldr	r0, [sp, #4]
   30560:	add	r1, r5, #1
   30564:	add	r0, r0, #1
   30568:	cmp	r1, r0
   3056c:	ldrcs	r0, [sp]
   30570:	strcs	r9, [r0]
   30574:	movcs	r0, r1
   30578:	sub	sp, fp, #28
   3057c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30584:	add	fp, sp, #28
   30588:	sub	sp, sp, #28
   3058c:	sub	sp, sp, #1024	; 0x400
   30590:	ldrb	r3, [r0]
   30594:	mov	r5, r0
   30598:	cmp	r3, #0
   3059c:	beq	30648 <__assert_fail@plt+0x1e99c>
   305a0:	mov	r0, #1
   305a4:	mov	r2, #0
   305a8:	ldrb	r7, [r1, r2]
   305ac:	cmp	r7, #0
   305b0:	uxtbne	r3, r3
   305b4:	subne	r3, r3, r7
   305b8:	clzne	r3, r3
   305bc:	lsrne	r3, r3, #5
   305c0:	andne	r0, r0, r3
   305c4:	addne	r3, r5, r2
   305c8:	addne	r2, r2, #1
   305cc:	ldrbne	r3, [r3, #1]
   305d0:	cmpne	r3, #0
   305d4:	bne	305a8 <__assert_fail@plt+0x1e8fc>
   305d8:	add	r4, r1, r2
   305dc:	mov	r6, r5
   305e0:	ldrb	r2, [r4]
   305e4:	cmp	r2, #0
   305e8:	movwne	r6, #0
   305ec:	tst	r0, #1
   305f0:	cmpeq	r2, #0
   305f4:	bne	30658 <__assert_fail@plt+0x1e9ac>
   305f8:	sub	r8, r4, r1
   305fc:	ldrb	r1, [r1]
   30600:	add	r0, r5, #1
   30604:	bl	11acc <strchr@plt>
   30608:	mov	r6, r0
   3060c:	cmp	r8, #1
   30610:	cmpne	r6, #0
   30614:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30618:	add	r0, r5, r8
   3061c:	sub	r9, r4, r8
   30620:	str	r6, [sp, #20]
   30624:	subs	r5, r0, r6
   30628:	movwcc	r5, #1
   3062c:	cmp	r8, #31
   30630:	bhi	30664 <__assert_fail@plt+0x1e9b8>
   30634:	cmp	r8, #3
   30638:	bcs	307ac <__assert_fail@plt+0x1eb00>
   3063c:	sub	r2, r8, #1
   30640:	mov	sl, #1
   30644:	b	30dec <__assert_fail@plt+0x1f140>
   30648:	ldrb	r0, [r1]
   3064c:	cmp	r0, #0
   30650:	movne	r5, #0
   30654:	mov	r6, r5
   30658:	mov	r0, r6
   3065c:	sub	sp, fp, #28
   30660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30664:	mvn	r1, #0
   30668:	mov	r0, #0
   3066c:	mov	r2, #1
   30670:	mov	ip, #1
   30674:	mov	r3, #1
   30678:	add	r6, r1, r3
   3067c:	ldrb	r7, [r9, r2]
   30680:	ldrb	r6, [r9, r6]
   30684:	cmp	r7, r6
   30688:	bcs	306a8 <__assert_fail@plt+0x1e9fc>
   3068c:	sub	ip, r2, r1
   30690:	mov	r3, #1
   30694:	mov	r0, r2
   30698:	add	r2, r3, r0
   3069c:	cmp	r2, r8
   306a0:	bcc	30678 <__assert_fail@plt+0x1e9cc>
   306a4:	b	30700 <__assert_fail@plt+0x1ea54>
   306a8:	bne	306cc <__assert_fail@plt+0x1ea20>
   306ac:	cmp	r3, ip
   306b0:	bne	306f0 <__assert_fail@plt+0x1ea44>
   306b4:	add	r0, r0, ip
   306b8:	mov	r3, #1
   306bc:	add	r2, r3, r0
   306c0:	cmp	r2, r8
   306c4:	bcc	30678 <__assert_fail@plt+0x1e9cc>
   306c8:	b	30700 <__assert_fail@plt+0x1ea54>
   306cc:	add	r2, r0, #1
   306d0:	mov	r1, r0
   306d4:	mov	r3, #1
   306d8:	mov	ip, #1
   306dc:	mov	r0, r2
   306e0:	add	r2, r3, r0
   306e4:	cmp	r2, r8
   306e8:	bcc	30678 <__assert_fail@plt+0x1e9cc>
   306ec:	b	30700 <__assert_fail@plt+0x1ea54>
   306f0:	add	r3, r3, #1
   306f4:	add	r2, r3, r0
   306f8:	cmp	r2, r8
   306fc:	bcc	30678 <__assert_fail@plt+0x1e9cc>
   30700:	cmp	r8, #2
   30704:	bcc	308f4 <__assert_fail@plt+0x1ec48>
   30708:	mvn	lr, #0
   3070c:	mov	r2, #0
   30710:	mov	r3, #1
   30714:	mov	sl, #1
   30718:	mov	r7, #1
   3071c:	add	r6, lr, r7
   30720:	ldrb	r0, [r9, r3]
   30724:	ldrb	r6, [r9, r6]
   30728:	cmp	r6, r0
   3072c:	bcs	3074c <__assert_fail@plt+0x1eaa0>
   30730:	sub	sl, r3, lr
   30734:	mov	r7, #1
   30738:	mov	r2, r3
   3073c:	add	r3, r7, r2
   30740:	cmp	r3, r8
   30744:	bcc	3071c <__assert_fail@plt+0x1ea70>
   30748:	b	308fc <__assert_fail@plt+0x1ec50>
   3074c:	cmp	r0, r6
   30750:	bne	30774 <__assert_fail@plt+0x1eac8>
   30754:	cmp	r7, sl
   30758:	bne	30798 <__assert_fail@plt+0x1eaec>
   3075c:	add	r2, r2, sl
   30760:	mov	r7, #1
   30764:	add	r3, r7, r2
   30768:	cmp	r3, r8
   3076c:	bcc	3071c <__assert_fail@plt+0x1ea70>
   30770:	b	308fc <__assert_fail@plt+0x1ec50>
   30774:	add	r0, r2, #1
   30778:	mov	lr, r2
   3077c:	mov	r7, #1
   30780:	mov	sl, #1
   30784:	mov	r2, r0
   30788:	add	r3, r7, r2
   3078c:	cmp	r3, r8
   30790:	bcc	3071c <__assert_fail@plt+0x1ea70>
   30794:	b	308fc <__assert_fail@plt+0x1ec50>
   30798:	add	r7, r7, #1
   3079c:	add	r3, r7, r2
   307a0:	cmp	r3, r8
   307a4:	bcc	3071c <__assert_fail@plt+0x1ea70>
   307a8:	b	308fc <__assert_fail@plt+0x1ec50>
   307ac:	mvn	r1, #0
   307b0:	mov	r0, #0
   307b4:	mov	r2, #1
   307b8:	mov	ip, #1
   307bc:	mov	r3, #1
   307c0:	add	r6, r1, r3
   307c4:	ldrb	r7, [r9, r2]
   307c8:	ldrb	r6, [r9, r6]
   307cc:	cmp	r7, r6
   307d0:	bcs	307f0 <__assert_fail@plt+0x1eb44>
   307d4:	sub	ip, r2, r1
   307d8:	mov	r3, #1
   307dc:	mov	r0, r2
   307e0:	add	r2, r3, r0
   307e4:	cmp	r2, r8
   307e8:	bcc	307c0 <__assert_fail@plt+0x1eb14>
   307ec:	b	30848 <__assert_fail@plt+0x1eb9c>
   307f0:	bne	30814 <__assert_fail@plt+0x1eb68>
   307f4:	cmp	r3, ip
   307f8:	bne	30838 <__assert_fail@plt+0x1eb8c>
   307fc:	add	r0, r0, ip
   30800:	mov	r3, #1
   30804:	add	r2, r3, r0
   30808:	cmp	r2, r8
   3080c:	bcc	307c0 <__assert_fail@plt+0x1eb14>
   30810:	b	30848 <__assert_fail@plt+0x1eb9c>
   30814:	add	r2, r0, #1
   30818:	mov	r1, r0
   3081c:	mov	r3, #1
   30820:	mov	ip, #1
   30824:	mov	r0, r2
   30828:	add	r2, r3, r0
   3082c:	cmp	r2, r8
   30830:	bcc	307c0 <__assert_fail@plt+0x1eb14>
   30834:	b	30848 <__assert_fail@plt+0x1eb9c>
   30838:	add	r3, r3, #1
   3083c:	add	r2, r3, r0
   30840:	cmp	r2, r8
   30844:	bcc	307c0 <__assert_fail@plt+0x1eb14>
   30848:	cmp	r8, #2
   3084c:	bcc	30dd0 <__assert_fail@plt+0x1f124>
   30850:	mvn	r7, #0
   30854:	mov	r2, #0
   30858:	mov	r3, #1
   3085c:	mov	sl, #1
   30860:	mov	r6, #1
   30864:	add	r4, r7, r6
   30868:	ldrb	r0, [r9, r3]
   3086c:	ldrb	r4, [r9, r4]
   30870:	cmp	r4, r0
   30874:	bcs	30894 <__assert_fail@plt+0x1ebe8>
   30878:	sub	sl, r3, r7
   3087c:	mov	r6, #1
   30880:	mov	r2, r3
   30884:	add	r3, r6, r2
   30888:	cmp	r3, r8
   3088c:	bcc	30864 <__assert_fail@plt+0x1ebb8>
   30890:	b	30dd8 <__assert_fail@plt+0x1f12c>
   30894:	cmp	r0, r4
   30898:	bne	308bc <__assert_fail@plt+0x1ec10>
   3089c:	cmp	r6, sl
   308a0:	bne	308e0 <__assert_fail@plt+0x1ec34>
   308a4:	add	r2, r2, sl
   308a8:	mov	r6, #1
   308ac:	add	r3, r6, r2
   308b0:	cmp	r3, r8
   308b4:	bcc	30864 <__assert_fail@plt+0x1ebb8>
   308b8:	b	30dd8 <__assert_fail@plt+0x1f12c>
   308bc:	add	r0, r2, #1
   308c0:	mov	r7, r2
   308c4:	mov	r6, #1
   308c8:	mov	sl, #1
   308cc:	mov	r2, r0
   308d0:	add	r3, r6, r2
   308d4:	cmp	r3, r8
   308d8:	bcc	30864 <__assert_fail@plt+0x1ebb8>
   308dc:	b	30dd8 <__assert_fail@plt+0x1f12c>
   308e0:	add	r6, r6, #1
   308e4:	add	r3, r6, r2
   308e8:	cmp	r3, r8
   308ec:	bcc	30864 <__assert_fail@plt+0x1ebb8>
   308f0:	b	30dd8 <__assert_fail@plt+0x1f12c>
   308f4:	mov	sl, #1
   308f8:	mvn	lr, #0
   308fc:	add	r6, sp, #24
   30900:	vdup.32	q8, r8
   30904:	add	r2, lr, #1
   30908:	add	r0, r6, #16
   3090c:	mov	r3, r6
   30910:	vst1.32	{d16-d17}, [r0]
   30914:	add	r0, r6, #32
   30918:	vst1.32	{d16-d17}, [r0]
   3091c:	add	r0, r6, #48	; 0x30
   30920:	vst1.32	{d16-d17}, [r0]
   30924:	add	r0, r6, #64	; 0x40
   30928:	vst1.32	{d16-d17}, [r0]
   3092c:	add	r0, r6, #80	; 0x50
   30930:	vst1.32	{d16-d17}, [r0]
   30934:	add	r0, r6, #96	; 0x60
   30938:	vst1.32	{d16-d17}, [r0]
   3093c:	add	r0, r6, #112	; 0x70
   30940:	vst1.32	{d16-d17}, [r0]
   30944:	add	r0, r6, #128	; 0x80
   30948:	vst1.32	{d16-d17}, [r0]
   3094c:	add	r0, r6, #144	; 0x90
   30950:	vst1.32	{d16-d17}, [r0]
   30954:	add	r0, r6, #160	; 0xa0
   30958:	vst1.32	{d16-d17}, [r0]
   3095c:	add	r0, r6, #176	; 0xb0
   30960:	vst1.32	{d16-d17}, [r0]
   30964:	add	r0, r6, #192	; 0xc0
   30968:	vst1.32	{d16-d17}, [r0]
   3096c:	add	r0, r6, #208	; 0xd0
   30970:	vst1.32	{d16-d17}, [r0]
   30974:	add	r0, r6, #224	; 0xe0
   30978:	vst1.32	{d16-d17}, [r0]
   3097c:	add	r0, r6, #240	; 0xf0
   30980:	vst1.32	{d16-d17}, [r0]
   30984:	add	r0, r6, #256	; 0x100
   30988:	vst1.32	{d16-d17}, [r0]
   3098c:	add	r0, r6, #272	; 0x110
   30990:	vst1.32	{d16-d17}, [r0]
   30994:	add	r0, r6, #288	; 0x120
   30998:	vst1.32	{d16-d17}, [r0]
   3099c:	mov	r0, #1008	; 0x3f0
   309a0:	vst1.32	{d16-d17}, [r3], r0
   309a4:	add	r0, r6, #320	; 0x140
   309a8:	vst1.32	{d16-d17}, [r0]
   309ac:	add	r0, r6, #304	; 0x130
   309b0:	vst1.32	{d16-d17}, [r0]
   309b4:	add	r0, r6, #336	; 0x150
   309b8:	vst1.32	{d16-d17}, [r0]
   309bc:	add	r0, r6, #352	; 0x160
   309c0:	vst1.32	{d16-d17}, [r0]
   309c4:	add	r0, r6, #368	; 0x170
   309c8:	vst1.32	{d16-d17}, [r0]
   309cc:	add	r0, r6, #384	; 0x180
   309d0:	vst1.32	{d16-d17}, [r0]
   309d4:	add	r0, r6, #400	; 0x190
   309d8:	vst1.32	{d16-d17}, [r0]
   309dc:	add	r0, r6, #416	; 0x1a0
   309e0:	vst1.32	{d16-d17}, [r0]
   309e4:	add	r0, r6, #432	; 0x1b0
   309e8:	vst1.32	{d16-d17}, [r0]
   309ec:	add	r0, r6, #448	; 0x1c0
   309f0:	vst1.32	{d16-d17}, [r0]
   309f4:	add	r0, r6, #464	; 0x1d0
   309f8:	vst1.32	{d16-d17}, [r0]
   309fc:	add	r0, r6, #480	; 0x1e0
   30a00:	vst1.32	{d16-d17}, [r0]
   30a04:	add	r0, r6, #496	; 0x1f0
   30a08:	vst1.32	{d16-d17}, [r0]
   30a0c:	add	r0, r6, #512	; 0x200
   30a10:	vst1.32	{d16-d17}, [r0]
   30a14:	add	r0, r6, #528	; 0x210
   30a18:	vst1.32	{d16-d17}, [r0]
   30a1c:	add	r0, r6, #544	; 0x220
   30a20:	vst1.32	{d16-d17}, [r0]
   30a24:	add	r0, r6, #560	; 0x230
   30a28:	vst1.32	{d16-d17}, [r0]
   30a2c:	add	r0, r6, #576	; 0x240
   30a30:	vst1.32	{d16-d17}, [r0]
   30a34:	add	r0, r6, #592	; 0x250
   30a38:	vst1.32	{d16-d17}, [r0]
   30a3c:	add	r0, r6, #624	; 0x270
   30a40:	vst1.32	{d16-d17}, [r0]
   30a44:	add	r0, r6, #608	; 0x260
   30a48:	vst1.32	{d16-d17}, [r0]
   30a4c:	add	r0, r6, #640	; 0x280
   30a50:	vst1.32	{d16-d17}, [r0]
   30a54:	add	r0, r6, #656	; 0x290
   30a58:	vst1.32	{d16-d17}, [r0]
   30a5c:	add	r0, r6, #672	; 0x2a0
   30a60:	vst1.32	{d16-d17}, [r0]
   30a64:	add	r0, r6, #688	; 0x2b0
   30a68:	vst1.32	{d16-d17}, [r0]
   30a6c:	add	r0, r6, #704	; 0x2c0
   30a70:	vst1.32	{d16-d17}, [r0]
   30a74:	add	r0, r6, #720	; 0x2d0
   30a78:	vst1.32	{d16-d17}, [r0]
   30a7c:	add	r0, r6, #736	; 0x2e0
   30a80:	vst1.32	{d16-d17}, [r0]
   30a84:	add	r0, r6, #752	; 0x2f0
   30a88:	vst1.32	{d16-d17}, [r0]
   30a8c:	add	r0, r6, #768	; 0x300
   30a90:	vst1.32	{d16-d17}, [r0]
   30a94:	add	r0, r6, #784	; 0x310
   30a98:	vst1.32	{d16-d17}, [r0]
   30a9c:	add	r0, r6, #800	; 0x320
   30aa0:	vst1.32	{d16-d17}, [r0]
   30aa4:	add	r0, r6, #816	; 0x330
   30aa8:	vst1.32	{d16-d17}, [r0]
   30aac:	add	r0, r6, #832	; 0x340
   30ab0:	vst1.32	{d16-d17}, [r0]
   30ab4:	add	r0, r6, #848	; 0x350
   30ab8:	vst1.32	{d16-d17}, [r0]
   30abc:	add	r0, r6, #864	; 0x360
   30ac0:	vst1.32	{d16-d17}, [r0]
   30ac4:	add	r0, r6, #880	; 0x370
   30ac8:	vst1.32	{d16-d17}, [r0]
   30acc:	add	r0, r6, #896	; 0x380
   30ad0:	vst1.32	{d16-d17}, [r0]
   30ad4:	add	r0, r6, #928	; 0x3a0
   30ad8:	vst1.32	{d16-d17}, [r0]
   30adc:	add	r0, r6, #912	; 0x390
   30ae0:	vst1.32	{d16-d17}, [r0]
   30ae4:	add	r0, r6, #944	; 0x3b0
   30ae8:	vst1.32	{d16-d17}, [r0]
   30aec:	add	r0, r6, #960	; 0x3c0
   30af0:	vst1.32	{d16-d17}, [r0]
   30af4:	add	r0, r6, #976	; 0x3d0
   30af8:	vst1.32	{d16-d17}, [r0]
   30afc:	add	r0, r6, #992	; 0x3e0
   30b00:	vst1.32	{d16-d17}, [r0]
   30b04:	add	r0, r1, #1
   30b08:	vst1.32	{d16-d17}, [r3]
   30b0c:	cmp	r2, r0
   30b10:	movcc	sl, ip
   30b14:	movcc	r2, r0
   30b18:	cmp	r8, #0
   30b1c:	beq	30b34 <__assert_fail@plt+0x1ee88>
   30b20:	mov	r0, r8
   30b24:	ldrb	r1, [r4, -r0]
   30b28:	subs	r0, r0, #1
   30b2c:	str	r0, [r6, r1, lsl #2]
   30b30:	bne	30b24 <__assert_fail@plt+0x1ee78>
   30b34:	add	r1, r9, sl
   30b38:	mov	r0, r9
   30b3c:	mov	r4, r2
   30b40:	bl	11934 <memcmp@plt>
   30b44:	cmp	r0, #0
   30b48:	str	r4, [sp, #16]
   30b4c:	beq	30c74 <__assert_fail@plt+0x1efc8>
   30b50:	ldr	r0, [sp, #20]
   30b54:	sub	r2, r8, r5
   30b58:	mov	r1, #0
   30b5c:	mov	r6, #0
   30b60:	add	r0, r0, r5
   30b64:	bl	11b68 <memchr@plt>
   30b68:	sub	r2, r8, r4
   30b6c:	cmp	r4, r2
   30b70:	movcs	r2, r4
   30b74:	cmp	r8, #0
   30b78:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30b7c:	ldr	lr, [sp, #20]
   30b80:	cmp	r0, #0
   30b84:	str	r2, [sp, #12]
   30b88:	bne	30658 <__assert_fail@plt+0x1e9ac>
   30b8c:	sub	r5, r8, #1
   30b90:	mov	r1, r4
   30b94:	cmp	r4, r5
   30b98:	bcs	31010 <__assert_fail@plt+0x1f364>
   30b9c:	add	r0, lr, r1
   30ba0:	add	sl, r9, r1
   30ba4:	mov	ip, #0
   30ba8:	mov	r7, r8
   30bac:	str	r0, [sp, #8]
   30bb0:	rsb	r0, r1, #1
   30bb4:	str	r0, [sp, #4]
   30bb8:	add	r0, lr, r7
   30bbc:	add	r3, sp, #24
   30bc0:	mov	r4, r7
   30bc4:	ldrb	r2, [r0, #-1]
   30bc8:	ldr	r2, [r3, r2, lsl #2]
   30bcc:	cmp	r2, #0
   30bd0:	beq	30bdc <__assert_fail@plt+0x1ef30>
   30bd4:	add	ip, r2, ip
   30bd8:	b	30c38 <__assert_fail@plt+0x1ef8c>
   30bdc:	ldr	r2, [sp, #8]
   30be0:	add	r3, r2, ip
   30be4:	mov	r2, #0
   30be8:	ldrb	r7, [r3, r2]
   30bec:	ldrb	r6, [sl, r2]
   30bf0:	cmp	r6, r7
   30bf4:	bne	30c30 <__assert_fail@plt+0x1ef84>
   30bf8:	add	r2, r2, #1
   30bfc:	add	r7, r1, r2
   30c00:	cmp	r7, r5
   30c04:	bcc	30be8 <__assert_fail@plt+0x1ef3c>
   30c08:	ldr	r3, [sp, #4]
   30c0c:	add	r2, lr, ip
   30c10:	cmp	r3, #1
   30c14:	beq	310a0 <__assert_fail@plt+0x1f3f4>
   30c18:	ldrb	r7, [r2, -r3]
   30c1c:	ldrb	r6, [r9, -r3]
   30c20:	add	r3, r3, #1
   30c24:	cmp	r6, r7
   30c28:	beq	30c10 <__assert_fail@plt+0x1ef64>
   30c2c:	ldr	r2, [sp, #12]
   30c30:	add	r2, ip, r2
   30c34:	add	ip, r2, #1
   30c38:	mov	r1, r4
   30c3c:	add	r7, ip, r8
   30c40:	mov	r4, ip
   30c44:	mov	r6, #0
   30c48:	sub	r2, r7, r1
   30c4c:	mov	r1, #0
   30c50:	bl	11b68 <memchr@plt>
   30c54:	cmp	r7, #0
   30c58:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30c5c:	ldr	lr, [sp, #20]
   30c60:	ldr	r1, [sp, #16]
   30c64:	cmp	r0, #0
   30c68:	mov	ip, r4
   30c6c:	beq	30bb8 <__assert_fail@plt+0x1ef0c>
   30c70:	b	30658 <__assert_fail@plt+0x1e9ac>
   30c74:	ldr	r0, [sp, #20]
   30c78:	sub	r2, r8, r5
   30c7c:	mov	r1, #0
   30c80:	mov	r6, #0
   30c84:	add	r0, r0, r5
   30c88:	bl	11b68 <memchr@plt>
   30c8c:	cmp	r8, #0
   30c90:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30c94:	ldr	lr, [sp, #20]
   30c98:	ldr	r7, [sp, #16]
   30c9c:	cmp	r0, #0
   30ca0:	str	sl, [sp, #12]
   30ca4:	bne	30658 <__assert_fail@plt+0x1e9ac>
   30ca8:	ldr	r0, [sp, #12]
   30cac:	sub	r5, r8, #1
   30cb0:	mov	sl, #0
   30cb4:	mov	ip, r8
   30cb8:	mov	r1, #0
   30cbc:	sub	r0, r8, r0
   30cc0:	str	r0, [sp, #8]
   30cc4:	sub	r0, r7, #1
   30cc8:	str	r0, [sp, #4]
   30ccc:	rsb	r0, r7, #0
   30cd0:	str	r0, [sp]
   30cd4:	add	r0, lr, ip
   30cd8:	add	r3, sp, #24
   30cdc:	ldrb	r2, [r0, #-1]
   30ce0:	ldr	r3, [r3, r2, lsl #2]
   30ce4:	cmp	r3, #0
   30ce8:	beq	30d10 <__assert_fail@plt+0x1f064>
   30cec:	ldr	r2, [sp, #12]
   30cf0:	ldr	r7, [sp, #8]
   30cf4:	cmp	r3, r2
   30cf8:	mov	r2, r3
   30cfc:	movcc	r2, r7
   30d00:	cmp	sl, #0
   30d04:	moveq	r2, r3
   30d08:	mov	sl, #0
   30d0c:	b	30d80 <__assert_fail@plt+0x1f0d4>
   30d10:	cmp	r7, sl
   30d14:	mov	r2, r7
   30d18:	movcc	r2, sl
   30d1c:	cmp	r2, r5
   30d20:	bcs	30d44 <__assert_fail@plt+0x1f098>
   30d24:	add	r3, lr, r1
   30d28:	ldrb	r7, [r3, r2]
   30d2c:	ldrb	r6, [r9, r2]
   30d30:	cmp	r6, r7
   30d34:	bne	30dc0 <__assert_fail@plt+0x1f114>
   30d38:	add	r2, r2, #1
   30d3c:	cmp	r2, r5
   30d40:	bcc	30d28 <__assert_fail@plt+0x1f07c>
   30d44:	ldr	r2, [sp, #4]
   30d48:	add	r6, lr, r1
   30d4c:	add	r3, r2, #1
   30d50:	cmp	sl, r3
   30d54:	bcs	30d6c <__assert_fail@plt+0x1f0c0>
   30d58:	ldrb	r7, [r6, r2]
   30d5c:	ldrb	r4, [r9, r2]
   30d60:	sub	r2, r2, #1
   30d64:	cmp	r4, r7
   30d68:	beq	30d4c <__assert_fail@plt+0x1f0a0>
   30d6c:	add	r2, sl, #1
   30d70:	ldr	sl, [sp, #8]
   30d74:	cmp	r3, r2
   30d78:	ldr	r2, [sp, #12]
   30d7c:	bcc	30658 <__assert_fail@plt+0x1e9ac>
   30d80:	add	r1, r2, r1
   30d84:	mov	r6, #0
   30d88:	add	r7, r1, r8
   30d8c:	mov	r4, r1
   30d90:	mov	r1, #0
   30d94:	sub	r2, r7, ip
   30d98:	bl	11b68 <memchr@plt>
   30d9c:	cmp	r7, #0
   30da0:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30da4:	mov	ip, r7
   30da8:	ldr	lr, [sp, #20]
   30dac:	ldr	r7, [sp, #16]
   30db0:	cmp	r0, #0
   30db4:	mov	r1, r4
   30db8:	beq	30cd4 <__assert_fail@plt+0x1f028>
   30dbc:	b	30658 <__assert_fail@plt+0x1e9ac>
   30dc0:	ldr	r3, [sp]
   30dc4:	add	r2, r3, r2
   30dc8:	add	r2, r2, #1
   30dcc:	b	30d08 <__assert_fail@plt+0x1f05c>
   30dd0:	mov	sl, #1
   30dd4:	mvn	r7, #0
   30dd8:	add	r0, r1, #1
   30ddc:	add	r2, r7, #1
   30de0:	cmp	r2, r0
   30de4:	movcc	sl, ip
   30de8:	movcc	r2, r0
   30dec:	add	r1, r9, sl
   30df0:	mov	r0, r9
   30df4:	mov	r4, r2
   30df8:	bl	11934 <memcmp@plt>
   30dfc:	cmp	r0, #0
   30e00:	str	r4, [sp, #16]
   30e04:	beq	30ef8 <__assert_fail@plt+0x1f24c>
   30e08:	ldr	r0, [sp, #20]
   30e0c:	sub	r2, r8, r5
   30e10:	mov	r1, #0
   30e14:	mov	r6, #0
   30e18:	add	r0, r0, r5
   30e1c:	bl	11b68 <memchr@plt>
   30e20:	sub	r5, r8, r4
   30e24:	cmp	r4, r5
   30e28:	movcs	r5, r4
   30e2c:	cmp	r8, #0
   30e30:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30e34:	ldr	ip, [sp, #20]
   30e38:	cmp	r0, #0
   30e3c:	bne	30658 <__assert_fail@plt+0x1e9ac>
   30e40:	cmp	r8, r4
   30e44:	bls	310b0 <__assert_fail@plt+0x1f404>
   30e48:	add	r0, ip, r4
   30e4c:	add	r7, r9, r4
   30e50:	mov	sl, #0
   30e54:	mov	r1, r8
   30e58:	str	r0, [sp, #12]
   30e5c:	rsb	r0, r4, #1
   30e60:	str	r0, [sp, #8]
   30e64:	ldr	r0, [sp, #12]
   30e68:	mov	r2, #0
   30e6c:	add	r0, r0, sl
   30e70:	ldrb	r3, [r0, r2]
   30e74:	ldrb	r6, [r7, r2]
   30e78:	cmp	r6, r3
   30e7c:	bne	30eb8 <__assert_fail@plt+0x1f20c>
   30e80:	add	r2, r2, #1
   30e84:	add	r3, r4, r2
   30e88:	cmp	r3, r8
   30e8c:	bcc	30e70 <__assert_fail@plt+0x1f1c4>
   30e90:	ldr	r2, [sp, #8]
   30e94:	add	r0, ip, sl
   30e98:	cmp	r2, #1
   30e9c:	beq	31128 <__assert_fail@plt+0x1f47c>
   30ea0:	ldrb	r3, [r0, -r2]
   30ea4:	ldrb	r6, [r9, -r2]
   30ea8:	add	r2, r2, #1
   30eac:	cmp	r6, r3
   30eb0:	beq	30e98 <__assert_fail@plt+0x1f1ec>
   30eb4:	mov	r2, r5
   30eb8:	add	r2, sl, r2
   30ebc:	add	r0, ip, r1
   30ec0:	mov	r6, #0
   30ec4:	add	sl, r2, #1
   30ec8:	add	r4, sl, r8
   30ecc:	sub	r2, r4, r1
   30ed0:	mov	r1, #0
   30ed4:	bl	11b68 <memchr@plt>
   30ed8:	cmp	r0, #0
   30edc:	bne	30658 <__assert_fail@plt+0x1e9ac>
   30ee0:	cmp	r4, #0
   30ee4:	mov	r1, r4
   30ee8:	ldr	ip, [sp, #20]
   30eec:	ldr	r4, [sp, #16]
   30ef0:	bne	30e64 <__assert_fail@plt+0x1f1b8>
   30ef4:	b	30658 <__assert_fail@plt+0x1e9ac>
   30ef8:	ldr	r0, [sp, #20]
   30efc:	sub	r2, r8, r5
   30f00:	mov	r1, #0
   30f04:	mov	r6, #0
   30f08:	add	r0, r0, r5
   30f0c:	bl	11b68 <memchr@plt>
   30f10:	cmp	r8, #0
   30f14:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30f18:	cmp	r0, #0
   30f1c:	ldr	r4, [sp, #20]
   30f20:	ldr	r0, [sp, #16]
   30f24:	str	sl, [sp, #12]
   30f28:	bne	30658 <__assert_fail@plt+0x1e9ac>
   30f2c:	ldr	r1, [sp, #12]
   30f30:	mov	sl, #0
   30f34:	mov	r5, #0
   30f38:	sub	r1, r8, r1
   30f3c:	str	r1, [sp, #8]
   30f40:	sub	r1, r0, #1
   30f44:	str	r1, [sp, #4]
   30f48:	rsb	r1, r0, #0
   30f4c:	str	r1, [sp]
   30f50:	mov	r1, r8
   30f54:	cmp	r0, sl
   30f58:	movcc	r0, sl
   30f5c:	cmp	r0, r8
   30f60:	bcs	30f84 <__assert_fail@plt+0x1f2d8>
   30f64:	add	r2, r4, r5
   30f68:	ldrb	r3, [r2, r0]
   30f6c:	ldrb	r7, [r9, r0]
   30f70:	cmp	r7, r3
   30f74:	bne	30fc4 <__assert_fail@plt+0x1f318>
   30f78:	add	r0, r0, #1
   30f7c:	cmp	r0, r8
   30f80:	bcc	30f68 <__assert_fail@plt+0x1f2bc>
   30f84:	ldr	r0, [sp, #4]
   30f88:	add	r6, r4, r5
   30f8c:	add	r2, r0, #1
   30f90:	cmp	sl, r2
   30f94:	bcs	30fac <__assert_fail@plt+0x1f300>
   30f98:	ldrb	r3, [r6, r0]
   30f9c:	ldrb	r7, [r9, r0]
   30fa0:	sub	r0, r0, #1
   30fa4:	cmp	r7, r3
   30fa8:	beq	30f8c <__assert_fail@plt+0x1f2e0>
   30fac:	add	r0, sl, #1
   30fb0:	ldr	sl, [sp, #8]
   30fb4:	cmp	r2, r0
   30fb8:	ldr	r2, [sp, #12]
   30fbc:	bcs	30fd4 <__assert_fail@plt+0x1f328>
   30fc0:	b	30658 <__assert_fail@plt+0x1e9ac>
   30fc4:	ldr	r2, [sp]
   30fc8:	mov	sl, #0
   30fcc:	add	r0, r2, r0
   30fd0:	add	r2, r0, #1
   30fd4:	add	r5, r2, r5
   30fd8:	add	r0, r4, r1
   30fdc:	mov	r6, #0
   30fe0:	add	r7, r5, r8
   30fe4:	sub	r2, r7, r1
   30fe8:	mov	r1, #0
   30fec:	bl	11b68 <memchr@plt>
   30ff0:	cmp	r7, #0
   30ff4:	beq	30658 <__assert_fail@plt+0x1e9ac>
   30ff8:	cmp	r0, #0
   30ffc:	ldr	r4, [sp, #20]
   31000:	ldr	r0, [sp, #16]
   31004:	mov	r1, r7
   31008:	beq	30f54 <__assert_fail@plt+0x1f2a8>
   3100c:	b	30658 <__assert_fail@plt+0x1e9ac>
   31010:	ldr	r0, [sp, #12]
   31014:	rsb	r5, r1, #1
   31018:	mov	ip, #0
   3101c:	mov	r1, r8
   31020:	add	sl, r0, #1
   31024:	add	r0, lr, r1
   31028:	add	r3, sp, #24
   3102c:	ldrb	r2, [r0, #-1]
   31030:	ldr	r2, [r3, r2, lsl #2]
   31034:	cmp	r2, #0
   31038:	bne	31064 <__assert_fail@plt+0x1f3b8>
   3103c:	add	r2, lr, ip
   31040:	mov	r3, r5
   31044:	cmp	r3, #1
   31048:	beq	310a0 <__assert_fail@plt+0x1f3f4>
   3104c:	ldrb	r7, [r2, -r3]
   31050:	ldrb	r6, [r9, -r3]
   31054:	add	r3, r3, #1
   31058:	cmp	r6, r7
   3105c:	beq	31044 <__assert_fail@plt+0x1f398>
   31060:	mov	r2, sl
   31064:	add	ip, r2, ip
   31068:	mov	r6, #0
   3106c:	add	r7, ip, r8
   31070:	mov	r4, ip
   31074:	sub	r2, r7, r1
   31078:	mov	r1, #0
   3107c:	bl	11b68 <memchr@plt>
   31080:	cmp	r7, #0
   31084:	beq	30658 <__assert_fail@plt+0x1e9ac>
   31088:	ldr	lr, [sp, #20]
   3108c:	cmp	r0, #0
   31090:	mov	r1, r7
   31094:	mov	ip, r4
   31098:	beq	31024 <__assert_fail@plt+0x1f378>
   3109c:	b	30658 <__assert_fail@plt+0x1e9ac>
   310a0:	add	r6, lr, ip
   310a4:	mov	r0, r6
   310a8:	sub	sp, fp, #28
   310ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310b0:	rsb	r4, r4, #1
   310b4:	add	r5, r5, #1
   310b8:	mov	sl, #0
   310bc:	mov	r7, ip
   310c0:	mov	r0, r8
   310c4:	mov	r1, r4
   310c8:	cmp	r1, #1
   310cc:	beq	31128 <__assert_fail@plt+0x1f47c>
   310d0:	ldrb	r6, [r7, -r1]
   310d4:	ldrb	r3, [r9, -r1]
   310d8:	add	r1, r1, #1
   310dc:	cmp	r3, r6
   310e0:	beq	310c8 <__assert_fail@plt+0x1f41c>
   310e4:	add	sl, r5, sl
   310e8:	add	r0, ip, r0
   310ec:	mov	r1, #0
   310f0:	mov	r2, r5
   310f4:	str	r4, [sp, #16]
   310f8:	mov	r6, #0
   310fc:	add	r4, sl, r8
   31100:	bl	11b68 <memchr@plt>
   31104:	cmp	r4, #0
   31108:	beq	30658 <__assert_fail@plt+0x1e9ac>
   3110c:	cmp	r0, #0
   31110:	mov	r0, r4
   31114:	ldr	ip, [sp, #20]
   31118:	ldr	r4, [sp, #16]
   3111c:	add	r7, r7, r5
   31120:	beq	310c4 <__assert_fail@plt+0x1f418>
   31124:	b	30658 <__assert_fail@plt+0x1e9ac>
   31128:	add	r6, ip, sl
   3112c:	mov	r0, r6
   31130:	sub	sp, fp, #28
   31134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31138:	push	{fp, lr}
   3113c:	mov	fp, sp
   31140:	movw	r0, #16816	; 0x41b0
   31144:	movt	r0, #4
   31148:	ldr	r0, [r0]
   3114c:	bl	11a9c <exit@plt>
   31150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31154:	add	fp, sp, #28
   31158:	sub	sp, sp, #12
   3115c:	mov	r4, r3
   31160:	mov	r9, r2
   31164:	mov	r7, r1
   31168:	mov	r8, r0
   3116c:	bl	11ac0 <strlen@plt>
   31170:	ldr	r6, [r7]
   31174:	cmp	r6, #0
   31178:	beq	31224 <__assert_fail@plt+0x1f578>
   3117c:	mov	r5, r0
   31180:	cmp	r9, #0
   31184:	beq	31234 <__assert_fail@plt+0x1f588>
   31188:	add	r0, r7, #4
   3118c:	mvn	sl, #0
   31190:	mov	r7, #0
   31194:	str	r9, [sp]
   31198:	str	r0, [sp, #8]
   3119c:	mov	r0, #0
   311a0:	str	r0, [sp, #4]
   311a4:	mov	r0, r9
   311a8:	mov	r0, r6
   311ac:	mov	r1, r8
   311b0:	mov	r2, r5
   311b4:	bl	11c64 <strncmp@plt>
   311b8:	cmp	r0, #0
   311bc:	bne	31208 <__assert_fail@plt+0x1f55c>
   311c0:	mov	r0, r6
   311c4:	bl	11ac0 <strlen@plt>
   311c8:	cmp	r0, r5
   311cc:	beq	31228 <__assert_fail@plt+0x1f57c>
   311d0:	cmn	sl, #1
   311d4:	beq	31204 <__assert_fail@plt+0x1f558>
   311d8:	ldr	r0, [sp]
   311dc:	mov	r1, r9
   311e0:	mov	r2, r4
   311e4:	mla	r0, sl, r4, r0
   311e8:	bl	11934 <memcmp@plt>
   311ec:	ldr	r1, [sp, #4]
   311f0:	cmp	r0, #0
   311f4:	movwne	r0, #1
   311f8:	orr	r1, r1, r0
   311fc:	str	r1, [sp, #4]
   31200:	b	31208 <__assert_fail@plt+0x1f55c>
   31204:	mov	sl, r7
   31208:	ldr	r0, [sp, #8]
   3120c:	add	r9, r9, r4
   31210:	ldr	r6, [r0, r7, lsl #2]
   31214:	add	r7, r7, #1
   31218:	cmp	r6, #0
   3121c:	bne	311a8 <__assert_fail@plt+0x1f4fc>
   31220:	b	3129c <__assert_fail@plt+0x1f5f0>
   31224:	mvn	r7, #0
   31228:	mov	r0, r7
   3122c:	sub	sp, fp, #28
   31230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31234:	add	r4, r7, #4
   31238:	mov	r0, #0
   3123c:	mvn	sl, #0
   31240:	mov	r7, #0
   31244:	str	r0, [sp, #4]
   31248:	mov	r0, r6
   3124c:	mov	r1, r8
   31250:	mov	r2, r5
   31254:	bl	11c64 <strncmp@plt>
   31258:	cmp	r0, #0
   3125c:	bne	3128c <__assert_fail@plt+0x1f5e0>
   31260:	mov	r0, r6
   31264:	bl	11ac0 <strlen@plt>
   31268:	cmp	r0, r5
   3126c:	beq	31228 <__assert_fail@plt+0x1f57c>
   31270:	ldr	r1, [sp, #4]
   31274:	cmn	sl, #1
   31278:	add	r0, sl, #1
   3127c:	movwne	r0, #1
   31280:	moveq	sl, r7
   31284:	orr	r1, r1, r0
   31288:	str	r1, [sp, #4]
   3128c:	ldr	r6, [r4, r7, lsl #2]
   31290:	add	r7, r7, #1
   31294:	cmp	r6, #0
   31298:	bne	31248 <__assert_fail@plt+0x1f59c>
   3129c:	ldr	r0, [sp, #4]
   312a0:	tst	r0, #1
   312a4:	mvnne	sl, #1
   312a8:	mov	r0, sl
   312ac:	sub	sp, fp, #28
   312b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   312b4:	push	{r4, r5, r6, sl, fp, lr}
   312b8:	add	fp, sp, #16
   312bc:	sub	sp, sp, #8
   312c0:	mov	r4, r1
   312c4:	movw	r1, #14584	; 0x38f8
   312c8:	mov	r5, r0
   312cc:	movw	r0, #14557	; 0x38dd
   312d0:	cmn	r2, #1
   312d4:	mov	r2, #5
   312d8:	movt	r0, #3
   312dc:	movt	r1, #3
   312e0:	moveq	r1, r0
   312e4:	mov	r0, #0
   312e8:	bl	11940 <dcgettext@plt>
   312ec:	mov	r6, r0
   312f0:	mov	r0, #0
   312f4:	mov	r1, #8
   312f8:	mov	r2, r4
   312fc:	bl	198dc <__assert_fail@plt+0x7c30>
   31300:	mov	r4, r0
   31304:	mov	r0, #1
   31308:	mov	r1, r5
   3130c:	bl	19e9c <__assert_fail@plt+0x81f0>
   31310:	str	r0, [sp]
   31314:	mov	r0, #0
   31318:	mov	r1, #0
   3131c:	mov	r2, r6
   31320:	mov	r3, r4
   31324:	bl	119e8 <error@plt>
   31328:	sub	sp, fp, #16
   3132c:	pop	{r4, r5, r6, sl, fp, pc}
   31330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31334:	add	fp, sp, #28
   31338:	sub	sp, sp, #4
   3133c:	mov	r5, r1
   31340:	movw	r1, #14613	; 0x3915
   31344:	mov	r9, r2
   31348:	mov	r7, r0
   3134c:	mov	r0, #0
   31350:	mov	r2, #5
   31354:	mov	r8, #0
   31358:	movt	r1, #3
   3135c:	bl	11940 <dcgettext@plt>
   31360:	movw	sl, #16912	; 0x4210
   31364:	movt	sl, #4
   31368:	ldr	r1, [sl]
   3136c:	bl	11c58 <fputs@plt>
   31370:	ldr	r6, [r7]
   31374:	cmp	r6, #0
   31378:	bne	31390 <__assert_fail@plt+0x1f6e4>
   3137c:	ldr	r1, [sl]
   31380:	mov	r0, #10
   31384:	sub	sp, fp, #28
   31388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3138c:	b	11c04 <putc@plt>
   31390:	add	r4, r7, #4
   31394:	mov	r7, #0
   31398:	str	r4, [sp]
   3139c:	cmp	r8, #0
   313a0:	beq	313e4 <__assert_fail@plt+0x1f738>
   313a4:	mov	r0, r7
   313a8:	mov	r1, r5
   313ac:	mov	r2, r9
   313b0:	bl	11934 <memcmp@plt>
   313b4:	cmp	r0, #0
   313b8:	bne	313e4 <__assert_fail@plt+0x1f738>
   313bc:	ldr	r4, [sl]
   313c0:	mov	r0, r6
   313c4:	bl	19eac <__assert_fail@plt+0x8200>
   313c8:	mov	r2, r0
   313cc:	mov	r0, r4
   313d0:	ldr	r4, [sp]
   313d4:	movw	r1, #14642	; 0x3932
   313d8:	movt	r1, #3
   313dc:	bl	11ad8 <fprintf@plt>
   313e0:	b	31408 <__assert_fail@plt+0x1f75c>
   313e4:	ldr	r7, [sl]
   313e8:	mov	r0, r6
   313ec:	bl	19eac <__assert_fail@plt+0x8200>
   313f0:	movw	r1, #14634	; 0x392a
   313f4:	mov	r2, r0
   313f8:	mov	r0, r7
   313fc:	movt	r1, #3
   31400:	bl	11ad8 <fprintf@plt>
   31404:	mov	r7, r5
   31408:	ldr	r6, [r4, -r8, lsl #2]
   3140c:	add	r5, r5, r9
   31410:	sub	r8, r8, #1
   31414:	cmp	r6, #0
   31418:	bne	3139c <__assert_fail@plt+0x1f6f0>
   3141c:	b	3137c <__assert_fail@plt+0x1f6d0>
   31420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31424:	add	fp, sp, #28
   31428:	sub	sp, sp, #4
   3142c:	ldr	r8, [fp, #8]
   31430:	mov	r7, r0
   31434:	mov	r4, r3
   31438:	mov	r5, r2
   3143c:	mov	r6, r1
   31440:	mov	r0, r1
   31444:	mov	r1, r2
   31448:	mov	r2, r3
   3144c:	mov	r3, r8
   31450:	bl	31150 <__assert_fail@plt+0x1f4a4>
   31454:	cmn	r0, #1
   31458:	ble	31464 <__assert_fail@plt+0x1f7b8>
   3145c:	sub	sp, fp, #28
   31460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31464:	movw	r0, #14557	; 0x38dd
   31468:	movw	r1, #14584	; 0x38f8
   3146c:	ldr	sl, [fp, #12]
   31470:	mov	r2, #5
   31474:	movt	r0, #3
   31478:	movt	r1, #3
   3147c:	moveq	r1, r0
   31480:	mov	r0, #0
   31484:	bl	11940 <dcgettext@plt>
   31488:	mov	r9, r0
   3148c:	mov	r0, #0
   31490:	mov	r1, #8
   31494:	mov	r2, r6
   31498:	bl	198dc <__assert_fail@plt+0x7c30>
   3149c:	mov	r6, r0
   314a0:	mov	r0, #1
   314a4:	mov	r1, r7
   314a8:	bl	19e9c <__assert_fail@plt+0x81f0>
   314ac:	str	r0, [sp]
   314b0:	mov	r0, #0
   314b4:	mov	r1, #0
   314b8:	mov	r2, r9
   314bc:	mov	r3, r6
   314c0:	bl	119e8 <error@plt>
   314c4:	mov	r0, r5
   314c8:	mov	r1, r4
   314cc:	mov	r2, r8
   314d0:	bl	31330 <__assert_fail@plt+0x1f684>
   314d4:	blx	sl
   314d8:	mvn	r0, #0
   314dc:	sub	sp, fp, #28
   314e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   314e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   314e8:	add	fp, sp, #24
   314ec:	ldr	r6, [r1]
   314f0:	cmp	r6, #0
   314f4:	beq	31558 <__assert_fail@plt+0x1f8ac>
   314f8:	mov	r8, r1
   314fc:	mov	r7, r2
   31500:	mov	r1, r2
   31504:	mov	r2, r3
   31508:	mov	r4, r3
   3150c:	mov	r9, r0
   31510:	bl	11934 <memcmp@plt>
   31514:	cmp	r0, #0
   31518:	beq	31550 <__assert_fail@plt+0x1f8a4>
   3151c:	add	r7, r7, r4
   31520:	add	r5, r8, #4
   31524:	ldr	r6, [r5]
   31528:	cmp	r6, #0
   3152c:	beq	31558 <__assert_fail@plt+0x1f8ac>
   31530:	mov	r0, r9
   31534:	mov	r1, r7
   31538:	mov	r2, r4
   3153c:	bl	11934 <memcmp@plt>
   31540:	add	r7, r7, r4
   31544:	add	r5, r5, #4
   31548:	cmp	r0, #0
   3154c:	bne	31524 <__assert_fail@plt+0x1f878>
   31550:	mov	r0, r6
   31554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31558:	mov	r6, #0
   3155c:	mov	r0, r6
   31560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31564:	push	{r4, r5, r6, sl, fp, lr}
   31568:	add	fp, sp, #16
   3156c:	mov	r4, r0
   31570:	bl	119d0 <__fpending@plt>
   31574:	mov	r5, r0
   31578:	mov	r0, r4
   3157c:	bl	118c8 <ferror@plt>
   31580:	mov	r6, r0
   31584:	mov	r0, r4
   31588:	bl	11b74 <fclose@plt>
   3158c:	cmp	r6, #0
   31590:	beq	315b0 <__assert_fail@plt+0x1f904>
   31594:	mvn	r4, #0
   31598:	cmp	r0, #0
   3159c:	bne	315e4 <__assert_fail@plt+0x1f938>
   315a0:	bl	11af0 <__errno_location@plt>
   315a4:	mov	r1, #0
   315a8:	str	r1, [r0]
   315ac:	b	315e4 <__assert_fail@plt+0x1f938>
   315b0:	cmp	r0, #0
   315b4:	mov	r4, r0
   315b8:	mvnne	r4, #0
   315bc:	cmp	r5, #0
   315c0:	bne	315e4 <__assert_fail@plt+0x1f938>
   315c4:	cmp	r0, #0
   315c8:	beq	315e4 <__assert_fail@plt+0x1f938>
   315cc:	bl	11af0 <__errno_location@plt>
   315d0:	ldr	r0, [r0]
   315d4:	subs	r4, r0, #9
   315d8:	mvnne	r4, #0
   315dc:	mov	r0, r4
   315e0:	pop	{r4, r5, r6, sl, fp, pc}
   315e4:	mov	r0, r4
   315e8:	pop	{r4, r5, r6, sl, fp, pc}
   315ec:	push	{r4, r5, r6, r7, fp, lr}
   315f0:	add	fp, sp, #16
   315f4:	mov	r4, r0
   315f8:	ldr	r0, [r0, #4]
   315fc:	mov	r5, r1
   31600:	cmp	r0, r1
   31604:	movcs	r0, #1
   31608:	strcs	r5, [r4]
   3160c:	popcs	{r4, r5, r6, r7, fp, pc}
   31610:	mov	r6, r3
   31614:	cmp	r3, #0
   31618:	beq	31640 <__assert_fail@plt+0x1f994>
   3161c:	mvn	r0, #0
   31620:	udiv	r0, r0, r6
   31624:	cmp	r0, r5
   31628:	bcs	31640 <__assert_fail@plt+0x1f994>
   3162c:	bl	11af0 <__errno_location@plt>
   31630:	mov	r1, #12
   31634:	str	r1, [r0]
   31638:	mov	r0, #0
   3163c:	pop	{r4, r5, r6, r7, fp, pc}
   31640:	ldr	r0, [r4, #8]
   31644:	mul	r1, r6, r5
   31648:	cmp	r0, r2
   3164c:	beq	31664 <__assert_fail@plt+0x1f9b8>
   31650:	bl	1bd04 <__assert_fail@plt+0xa058>
   31654:	mov	r7, r0
   31658:	cmp	r0, #0
   3165c:	bne	31694 <__assert_fail@plt+0x1f9e8>
   31660:	b	316a4 <__assert_fail@plt+0x1f9f8>
   31664:	mov	r0, r1
   31668:	bl	1bc74 <__assert_fail@plt+0x9fc8>
   3166c:	cmp	r0, #0
   31670:	beq	316a4 <__assert_fail@plt+0x1f9f8>
   31674:	ldr	r1, [r4, #8]
   31678:	mov	r7, r0
   3167c:	cmp	r1, #0
   31680:	beq	31694 <__assert_fail@plt+0x1f9e8>
   31684:	ldr	r0, [r4]
   31688:	mul	r2, r0, r6
   3168c:	mov	r0, r7
   31690:	bl	118ec <memcpy@plt>
   31694:	mov	r0, #1
   31698:	str	r5, [r4]
   3169c:	stmib	r4, {r5, r7}
   316a0:	pop	{r4, r5, r6, r7, fp, pc}
   316a4:	mov	r0, #0
   316a8:	pop	{r4, r5, r6, r7, fp, pc}
   316ac:	push	{r4, sl, fp, lr}
   316b0:	add	fp, sp, #8
   316b4:	sub	sp, sp, #264	; 0x108
   316b8:	add	r1, sp, #7
   316bc:	movw	r2, #257	; 0x101
   316c0:	bl	31890 <__assert_fail@plt+0x1fbe4>
   316c4:	mov	r4, #0
   316c8:	cmp	r0, #0
   316cc:	bne	31704 <__assert_fail@plt+0x1fa58>
   316d0:	movw	r1, #14647	; 0x3937
   316d4:	add	r0, sp, #7
   316d8:	movt	r1, #3
   316dc:	bl	1185c <strcmp@plt>
   316e0:	cmp	r0, #0
   316e4:	beq	31704 <__assert_fail@plt+0x1fa58>
   316e8:	movw	r1, #14649	; 0x3939
   316ec:	add	r0, sp, #7
   316f0:	movt	r1, #3
   316f4:	bl	1185c <strcmp@plt>
   316f8:	mov	r4, r0
   316fc:	cmp	r0, #0
   31700:	movwne	r4, #1
   31704:	mov	r0, r4
   31708:	sub	sp, fp, #8
   3170c:	pop	{r4, sl, fp, pc}
   31710:	push	{fp, lr}
   31714:	mov	fp, sp
   31718:	mov	r0, #14
   3171c:	bl	11bbc <nl_langinfo@plt>
   31720:	movw	r1, #11207	; 0x2bc7
   31724:	cmp	r0, #0
   31728:	movt	r1, #3
   3172c:	movne	r1, r0
   31730:	movw	r0, #14655	; 0x393f
   31734:	ldrb	r2, [r1]
   31738:	movt	r0, #3
   3173c:	cmp	r2, #0
   31740:	movne	r0, r1
   31744:	pop	{fp, pc}
   31748:	push	{r4, sl, fp, lr}
   3174c:	add	fp, sp, #8
   31750:	mov	r4, #0
   31754:	adds	r0, r0, #16
   31758:	adc	r1, r4, #0
   3175c:	rsb	r2, r1, #0
   31760:	eors	r2, r2, r1
   31764:	movwne	r2, #1
   31768:	cmp	r0, #0
   3176c:	blt	3178c <__assert_fail@plt+0x1fae0>
   31770:	cmp	r2, #0
   31774:	asreq	r2, r0, #31
   31778:	eoreq	r3, r0, r0
   3177c:	andeq	r2, r2, #1
   31780:	eoreq	r1, r1, r2
   31784:	orrseq	r1, r3, r1
   31788:	beq	31794 <__assert_fail@plt+0x1fae8>
   3178c:	mov	r0, r4
   31790:	pop	{r4, sl, fp, pc}
   31794:	bl	11a24 <malloc@plt>
   31798:	cmp	r0, #0
   3179c:	addne	r4, r0, #8
   317a0:	movne	r1, #8
   317a4:	bfine	r4, r1, #0, #4
   317a8:	subne	r0, r4, r0
   317ac:	strbne	r0, [r4, #-1]
   317b0:	mov	r0, r4
   317b4:	pop	{r4, sl, fp, pc}
   317b8:	tst	r0, #7
   317bc:	bne	317d4 <__assert_fail@plt+0x1fb28>
   317c0:	tst	r0, #8
   317c4:	bxeq	lr
   317c8:	ldrb	r1, [r0, #-1]
   317cc:	sub	r0, r0, r1
   317d0:	b	1bba8 <__assert_fail@plt+0x9efc>
   317d4:	push	{fp, lr}
   317d8:	mov	fp, sp
   317dc:	bl	11c70 <abort@plt>
   317e0:	push	{r4, sl, fp, lr}
   317e4:	add	fp, sp, #8
   317e8:	mov	r4, r0
   317ec:	bl	1188c <wcwidth@plt>
   317f0:	cmn	r0, #1
   317f4:	popgt	{r4, sl, fp, pc}
   317f8:	mov	r0, r4
   317fc:	bl	11964 <iswcntrl@plt>
   31800:	clz	r0, r0
   31804:	lsr	r0, r0, #5
   31808:	pop	{r4, sl, fp, pc}
   3180c:	push	{r4, r5, r6, sl, fp, lr}
   31810:	add	fp, sp, #16
   31814:	mov	r4, r0
   31818:	mov	r0, r1
   3181c:	mov	r5, r1
   31820:	ldr	r1, [r0], #16
   31824:	cmp	r1, r0
   31828:	beq	31834 <__assert_fail@plt+0x1fb88>
   3182c:	mov	r6, r1
   31830:	b	31844 <__assert_fail@plt+0x1fb98>
   31834:	ldr	r2, [r5, #4]
   31838:	add	r6, r4, #16
   3183c:	mov	r0, r6
   31840:	bl	118ec <memcpy@plt>
   31844:	str	r6, [r4]
   31848:	ldr	r0, [r5, #4]
   3184c:	str	r0, [r4, #4]
   31850:	ldrb	r0, [r5, #8]
   31854:	strb	r0, [r4, #8]
   31858:	cmp	r0, #0
   3185c:	ldrne	r0, [r5, #12]
   31860:	strne	r0, [r4, #12]
   31864:	pop	{r4, r5, r6, sl, fp, pc}
   31868:	movw	r2, #14664	; 0x3948
   3186c:	ubfx	r1, r0, #5, #3
   31870:	and	r0, r0, #31
   31874:	movt	r2, #3
   31878:	ldr	r1, [r2, r1, lsl #2]
   3187c:	mov	r2, #1
   31880:	and	r0, r1, r2, lsl r0
   31884:	cmp	r0, #0
   31888:	movwne	r0, #1
   3188c:	bx	lr
   31890:	push	{r4, r5, r6, r7, fp, lr}
   31894:	add	fp, sp, #16
   31898:	mov	r4, r1
   3189c:	mov	r1, #0
   318a0:	mov	r6, r2
   318a4:	bl	11ba4 <setlocale@plt>
   318a8:	cmp	r0, #0
   318ac:	beq	318dc <__assert_fail@plt+0x1fc30>
   318b0:	mov	r7, r0
   318b4:	bl	11ac0 <strlen@plt>
   318b8:	cmp	r0, r6
   318bc:	bcs	318fc <__assert_fail@plt+0x1fc50>
   318c0:	add	r2, r0, #1
   318c4:	mov	r0, r4
   318c8:	mov	r1, r7
   318cc:	bl	118ec <memcpy@plt>
   318d0:	mov	r5, #0
   318d4:	mov	r0, r5
   318d8:	pop	{r4, r5, r6, r7, fp, pc}
   318dc:	cmp	r6, #0
   318e0:	mov	r5, #22
   318e4:	movne	r0, #0
   318e8:	strbne	r0, [r4]
   318ec:	movne	r0, r5
   318f0:	popne	{r4, r5, r6, r7, fp, pc}
   318f4:	mov	r0, r5
   318f8:	pop	{r4, r5, r6, r7, fp, pc}
   318fc:	mov	r5, #34	; 0x22
   31900:	cmp	r6, #0
   31904:	beq	31924 <__assert_fail@plt+0x1fc78>
   31908:	sub	r6, r6, #1
   3190c:	mov	r0, r4
   31910:	mov	r1, r7
   31914:	mov	r2, r6
   31918:	bl	118ec <memcpy@plt>
   3191c:	mov	r0, #0
   31920:	strb	r0, [r4, r6]
   31924:	mov	r0, r5
   31928:	pop	{r4, r5, r6, r7, fp, pc}
   3192c:	mov	r1, #0
   31930:	b	11ba4 <setlocale@plt>
   31934:	mov	r1, #0
   31938:	mov	r2, #3
   3193c:	b	1b960 <__assert_fail@plt+0x9cb4>
   31940:	eor	r1, r1, #-2147483648	; 0x80000000
   31944:	b	3194c <__assert_fail@plt+0x1fca0>
   31948:	eor	r3, r3, #-2147483648	; 0x80000000
   3194c:	push	{r4, r5, lr}
   31950:	lsl	r4, r1, #1
   31954:	lsl	r5, r3, #1
   31958:	teq	r4, r5
   3195c:	teqeq	r0, r2
   31960:	orrsne	ip, r4, r0
   31964:	orrsne	ip, r5, r2
   31968:	mvnsne	ip, r4, asr #21
   3196c:	mvnsne	ip, r5, asr #21
   31970:	beq	31b5c <__assert_fail@plt+0x1feb0>
   31974:	lsr	r4, r4, #21
   31978:	rsbs	r5, r4, r5, lsr #21
   3197c:	rsblt	r5, r5, #0
   31980:	ble	319a0 <__assert_fail@plt+0x1fcf4>
   31984:	add	r4, r4, r5
   31988:	eor	r2, r0, r2
   3198c:	eor	r3, r1, r3
   31990:	eor	r0, r2, r0
   31994:	eor	r1, r3, r1
   31998:	eor	r2, r0, r2
   3199c:	eor	r3, r1, r3
   319a0:	cmp	r5, #54	; 0x36
   319a4:	pophi	{r4, r5, pc}
   319a8:	tst	r1, #-2147483648	; 0x80000000
   319ac:	lsl	r1, r1, #12
   319b0:	mov	ip, #1048576	; 0x100000
   319b4:	orr	r1, ip, r1, lsr #12
   319b8:	beq	319c4 <__assert_fail@plt+0x1fd18>
   319bc:	rsbs	r0, r0, #0
   319c0:	rsc	r1, r1, #0
   319c4:	tst	r3, #-2147483648	; 0x80000000
   319c8:	lsl	r3, r3, #12
   319cc:	orr	r3, ip, r3, lsr #12
   319d0:	beq	319dc <__assert_fail@plt+0x1fd30>
   319d4:	rsbs	r2, r2, #0
   319d8:	rsc	r3, r3, #0
   319dc:	teq	r4, r5
   319e0:	beq	31b44 <__assert_fail@plt+0x1fe98>
   319e4:	sub	r4, r4, #1
   319e8:	rsbs	lr, r5, #32
   319ec:	blt	31a08 <__assert_fail@plt+0x1fd5c>
   319f0:	lsl	ip, r2, lr
   319f4:	adds	r0, r0, r2, lsr r5
   319f8:	adc	r1, r1, #0
   319fc:	adds	r0, r0, r3, lsl lr
   31a00:	adcs	r1, r1, r3, asr r5
   31a04:	b	31a24 <__assert_fail@plt+0x1fd78>
   31a08:	sub	r5, r5, #32
   31a0c:	add	lr, lr, #32
   31a10:	cmp	r2, #1
   31a14:	lsl	ip, r3, lr
   31a18:	orrcs	ip, ip, #2
   31a1c:	adds	r0, r0, r3, asr r5
   31a20:	adcs	r1, r1, r3, asr #31
   31a24:	and	r5, r1, #-2147483648	; 0x80000000
   31a28:	bpl	31a38 <__assert_fail@plt+0x1fd8c>
   31a2c:	rsbs	ip, ip, #0
   31a30:	rscs	r0, r0, #0
   31a34:	rsc	r1, r1, #0
   31a38:	cmp	r1, #1048576	; 0x100000
   31a3c:	bcc	31a7c <__assert_fail@plt+0x1fdd0>
   31a40:	cmp	r1, #2097152	; 0x200000
   31a44:	bcc	31a64 <__assert_fail@plt+0x1fdb8>
   31a48:	lsrs	r1, r1, #1
   31a4c:	rrxs	r0, r0
   31a50:	rrx	ip, ip
   31a54:	add	r4, r4, #1
   31a58:	lsl	r2, r4, #21
   31a5c:	cmn	r2, #4194304	; 0x400000
   31a60:	bcs	31bbc <__assert_fail@plt+0x1ff10>
   31a64:	cmp	ip, #-2147483648	; 0x80000000
   31a68:	lsrseq	ip, r0, #1
   31a6c:	adcs	r0, r0, #0
   31a70:	adc	r1, r1, r4, lsl #20
   31a74:	orr	r1, r1, r5
   31a78:	pop	{r4, r5, pc}
   31a7c:	lsls	ip, ip, #1
   31a80:	adcs	r0, r0, r0
   31a84:	adc	r1, r1, r1
   31a88:	tst	r1, #1048576	; 0x100000
   31a8c:	sub	r4, r4, #1
   31a90:	bne	31a64 <__assert_fail@plt+0x1fdb8>
   31a94:	teq	r1, #0
   31a98:	moveq	r1, r0
   31a9c:	moveq	r0, #0
   31aa0:	clz	r3, r1
   31aa4:	addeq	r3, r3, #32
   31aa8:	sub	r3, r3, #11
   31aac:	subs	r2, r3, #32
   31ab0:	bge	31ad4 <__assert_fail@plt+0x1fe28>
   31ab4:	adds	r2, r2, #12
   31ab8:	ble	31ad0 <__assert_fail@plt+0x1fe24>
   31abc:	add	ip, r2, #20
   31ac0:	rsb	r2, r2, #12
   31ac4:	lsl	r0, r1, ip
   31ac8:	lsr	r1, r1, r2
   31acc:	b	31ae4 <__assert_fail@plt+0x1fe38>
   31ad0:	add	r2, r2, #20
   31ad4:	rsble	ip, r2, #32
   31ad8:	lsl	r1, r1, r2
   31adc:	orrle	r1, r1, r0, lsr ip
   31ae0:	lslle	r0, r0, r2
   31ae4:	subs	r4, r4, r3
   31ae8:	addge	r1, r1, r4, lsl #20
   31aec:	orrge	r1, r1, r5
   31af0:	popge	{r4, r5, pc}
   31af4:	mvn	r4, r4
   31af8:	subs	r4, r4, #31
   31afc:	bge	31b38 <__assert_fail@plt+0x1fe8c>
   31b00:	adds	r4, r4, #12
   31b04:	bgt	31b20 <__assert_fail@plt+0x1fe74>
   31b08:	add	r4, r4, #20
   31b0c:	rsb	r2, r4, #32
   31b10:	lsr	r0, r0, r4
   31b14:	orr	r0, r0, r1, lsl r2
   31b18:	orr	r1, r5, r1, lsr r4
   31b1c:	pop	{r4, r5, pc}
   31b20:	rsb	r4, r4, #12
   31b24:	rsb	r2, r4, #32
   31b28:	lsr	r0, r0, r2
   31b2c:	orr	r0, r0, r1, lsl r4
   31b30:	mov	r1, r5
   31b34:	pop	{r4, r5, pc}
   31b38:	lsr	r0, r1, r4
   31b3c:	mov	r1, r5
   31b40:	pop	{r4, r5, pc}
   31b44:	teq	r4, #0
   31b48:	eor	r3, r3, #1048576	; 0x100000
   31b4c:	eoreq	r1, r1, #1048576	; 0x100000
   31b50:	addeq	r4, r4, #1
   31b54:	subne	r5, r5, #1
   31b58:	b	319e4 <__assert_fail@plt+0x1fd38>
   31b5c:	mvns	ip, r4, asr #21
   31b60:	mvnsne	ip, r5, asr #21
   31b64:	beq	31bcc <__assert_fail@plt+0x1ff20>
   31b68:	teq	r4, r5
   31b6c:	teqeq	r0, r2
   31b70:	beq	31b84 <__assert_fail@plt+0x1fed8>
   31b74:	orrs	ip, r4, r0
   31b78:	moveq	r1, r3
   31b7c:	moveq	r0, r2
   31b80:	pop	{r4, r5, pc}
   31b84:	teq	r1, r3
   31b88:	movne	r1, #0
   31b8c:	movne	r0, #0
   31b90:	popne	{r4, r5, pc}
   31b94:	lsrs	ip, r4, #21
   31b98:	bne	31bac <__assert_fail@plt+0x1ff00>
   31b9c:	lsls	r0, r0, #1
   31ba0:	adcs	r1, r1, r1
   31ba4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   31ba8:	pop	{r4, r5, pc}
   31bac:	adds	r4, r4, #4194304	; 0x400000
   31bb0:	addcc	r1, r1, #1048576	; 0x100000
   31bb4:	popcc	{r4, r5, pc}
   31bb8:	and	r5, r1, #-2147483648	; 0x80000000
   31bbc:	orr	r1, r5, #2130706432	; 0x7f000000
   31bc0:	orr	r1, r1, #15728640	; 0xf00000
   31bc4:	mov	r0, #0
   31bc8:	pop	{r4, r5, pc}
   31bcc:	mvns	ip, r4, asr #21
   31bd0:	movne	r1, r3
   31bd4:	movne	r0, r2
   31bd8:	mvnseq	ip, r5, asr #21
   31bdc:	movne	r3, r1
   31be0:	movne	r2, r0
   31be4:	orrs	r4, r0, r1, lsl #12
   31be8:	orrseq	r5, r2, r3, lsl #12
   31bec:	teqeq	r1, r3
   31bf0:	orrne	r1, r1, #524288	; 0x80000
   31bf4:	pop	{r4, r5, pc}
   31bf8:	teq	r0, #0
   31bfc:	moveq	r1, #0
   31c00:	bxeq	lr
   31c04:	push	{r4, r5, lr}
   31c08:	mov	r4, #1024	; 0x400
   31c0c:	add	r4, r4, #50	; 0x32
   31c10:	mov	r5, #0
   31c14:	mov	r1, #0
   31c18:	b	31a94 <__assert_fail@plt+0x1fde8>
   31c1c:	teq	r0, #0
   31c20:	moveq	r1, #0
   31c24:	bxeq	lr
   31c28:	push	{r4, r5, lr}
   31c2c:	mov	r4, #1024	; 0x400
   31c30:	add	r4, r4, #50	; 0x32
   31c34:	ands	r5, r0, #-2147483648	; 0x80000000
   31c38:	rsbmi	r0, r0, #0
   31c3c:	mov	r1, #0
   31c40:	b	31a94 <__assert_fail@plt+0x1fde8>
   31c44:	lsls	r2, r0, #1
   31c48:	asr	r1, r2, #3
   31c4c:	rrx	r1, r1
   31c50:	lsl	r0, r2, #28
   31c54:	andsne	r3, r2, #-16777216	; 0xff000000
   31c58:	teqne	r3, #-16777216	; 0xff000000
   31c5c:	eorne	r1, r1, #939524096	; 0x38000000
   31c60:	bxne	lr
   31c64:	bics	r2, r2, #-16777216	; 0xff000000
   31c68:	bxeq	lr
   31c6c:	teq	r3, #-16777216	; 0xff000000
   31c70:	orreq	r1, r1, #524288	; 0x80000
   31c74:	bxeq	lr
   31c78:	push	{r4, r5, lr}
   31c7c:	mov	r4, #896	; 0x380
   31c80:	and	r5, r1, #-2147483648	; 0x80000000
   31c84:	bic	r1, r1, #-2147483648	; 0x80000000
   31c88:	b	31a94 <__assert_fail@plt+0x1fde8>
   31c8c:	orrs	r2, r0, r1
   31c90:	bxeq	lr
   31c94:	push	{r4, r5, lr}
   31c98:	mov	r5, #0
   31c9c:	b	31cbc <__assert_fail@plt+0x20010>
   31ca0:	orrs	r2, r0, r1
   31ca4:	bxeq	lr
   31ca8:	push	{r4, r5, lr}
   31cac:	ands	r5, r1, #-2147483648	; 0x80000000
   31cb0:	bpl	31cbc <__assert_fail@plt+0x20010>
   31cb4:	rsbs	r0, r0, #0
   31cb8:	rsc	r1, r1, #0
   31cbc:	mov	r4, #1024	; 0x400
   31cc0:	add	r4, r4, #50	; 0x32
   31cc4:	lsrs	ip, r1, #22
   31cc8:	beq	31a38 <__assert_fail@plt+0x1fd8c>
   31ccc:	mov	r2, #3
   31cd0:	lsrs	ip, ip, #3
   31cd4:	addne	r2, r2, #3
   31cd8:	lsrs	ip, ip, #3
   31cdc:	addne	r2, r2, #3
   31ce0:	add	r2, r2, ip, lsr #3
   31ce4:	rsb	r3, r2, #32
   31ce8:	lsl	ip, r0, r3
   31cec:	lsr	r0, r0, r2
   31cf0:	orr	r0, r0, r1, lsl r3
   31cf4:	lsr	r1, r1, r2
   31cf8:	add	r4, r4, r2
   31cfc:	b	31a38 <__assert_fail@plt+0x1fd8c>
   31d00:	cmp	r3, #0
   31d04:	cmpeq	r2, #0
   31d08:	bne	31d20 <__assert_fail@plt+0x20074>
   31d0c:	cmp	r1, #0
   31d10:	cmpeq	r0, #0
   31d14:	mvnne	r1, #0
   31d18:	mvnne	r0, #0
   31d1c:	b	31d3c <__assert_fail@plt+0x20090>
   31d20:	sub	sp, sp, #8
   31d24:	push	{sp, lr}
   31d28:	bl	31d90 <__assert_fail@plt+0x200e4>
   31d2c:	ldr	lr, [sp, #4]
   31d30:	add	sp, sp, #8
   31d34:	pop	{r2, r3}
   31d38:	bx	lr
   31d3c:	push	{r1, lr}
   31d40:	mov	r0, #8
   31d44:	bl	11838 <raise@plt>
   31d48:	pop	{r1, pc}
   31d4c:	andeq	r0, r0, r0
   31d50:	vmov	d6, r0, r1
   31d54:	vldr	d7, [pc, #36]	; 31d80 <__assert_fail@plt+0x200d4>
   31d58:	vldr	d5, [pc, #40]	; 31d88 <__assert_fail@plt+0x200dc>
   31d5c:	vmul.f64	d7, d6, d7
   31d60:	vcvt.u32.f64	s14, d7
   31d64:	vcvt.f64.u32	d4, s14
   31d68:	vmov	r1, s14
   31d6c:	vmls.f64	d6, d4, d5
   31d70:	vcvt.u32.f64	s15, d6
   31d74:	vmov	r0, s15
   31d78:	bx	lr
   31d7c:	nop			; (mov r0, r0)
   31d80:	andeq	r0, r0, r0
   31d84:	ldclcc	0, cr0, [r0]
   31d88:	andeq	r0, r0, r0
   31d8c:	mvnsmi	r0, r0
   31d90:	cmp	r1, r3
   31d94:	cmpeq	r0, r2
   31d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d9c:	mov	r4, r0
   31da0:	movcc	r0, #0
   31da4:	mov	r5, r1
   31da8:	ldr	lr, [sp, #36]	; 0x24
   31dac:	movcc	r1, r0
   31db0:	bcc	31eac <__assert_fail@plt+0x20200>
   31db4:	cmp	r3, #0
   31db8:	clzeq	ip, r2
   31dbc:	clzne	ip, r3
   31dc0:	addeq	ip, ip, #32
   31dc4:	cmp	r5, #0
   31dc8:	clzeq	r1, r4
   31dcc:	addeq	r1, r1, #32
   31dd0:	clzne	r1, r5
   31dd4:	sub	ip, ip, r1
   31dd8:	sub	sl, ip, #32
   31ddc:	lsl	r9, r3, ip
   31de0:	rsb	fp, ip, #32
   31de4:	orr	r9, r9, r2, lsl sl
   31de8:	orr	r9, r9, r2, lsr fp
   31dec:	lsl	r8, r2, ip
   31df0:	cmp	r5, r9
   31df4:	cmpeq	r4, r8
   31df8:	movcc	r0, #0
   31dfc:	movcc	r1, r0
   31e00:	bcc	31e1c <__assert_fail@plt+0x20170>
   31e04:	mov	r0, #1
   31e08:	subs	r4, r4, r8
   31e0c:	lsl	r1, r0, sl
   31e10:	orr	r1, r1, r0, lsr fp
   31e14:	lsl	r0, r0, ip
   31e18:	sbc	r5, r5, r9
   31e1c:	cmp	ip, #0
   31e20:	beq	31eac <__assert_fail@plt+0x20200>
   31e24:	lsr	r6, r8, #1
   31e28:	orr	r6, r6, r9, lsl #31
   31e2c:	lsr	r7, r9, #1
   31e30:	mov	r2, ip
   31e34:	b	31e58 <__assert_fail@plt+0x201ac>
   31e38:	subs	r3, r4, r6
   31e3c:	sbc	r8, r5, r7
   31e40:	adds	r3, r3, r3
   31e44:	adc	r8, r8, r8
   31e48:	adds	r4, r3, #1
   31e4c:	adc	r5, r8, #0
   31e50:	subs	r2, r2, #1
   31e54:	beq	31e74 <__assert_fail@plt+0x201c8>
   31e58:	cmp	r5, r7
   31e5c:	cmpeq	r4, r6
   31e60:	bcs	31e38 <__assert_fail@plt+0x2018c>
   31e64:	adds	r4, r4, r4
   31e68:	adc	r5, r5, r5
   31e6c:	subs	r2, r2, #1
   31e70:	bne	31e58 <__assert_fail@plt+0x201ac>
   31e74:	lsr	r3, r4, ip
   31e78:	orr	r3, r3, r5, lsl fp
   31e7c:	lsr	r2, r5, ip
   31e80:	orr	r3, r3, r5, lsr sl
   31e84:	adds	r0, r0, r4
   31e88:	mov	r4, r3
   31e8c:	lsl	r3, r2, ip
   31e90:	orr	r3, r3, r4, lsl sl
   31e94:	lsl	ip, r4, ip
   31e98:	orr	r3, r3, r4, lsr fp
   31e9c:	adc	r1, r1, r5
   31ea0:	subs	r0, r0, ip
   31ea4:	mov	r5, r2
   31ea8:	sbc	r1, r1, r3
   31eac:	cmp	lr, #0
   31eb0:	strdne	r4, [lr]
   31eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31eb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31ebc:	mov	r7, r0
   31ec0:	ldr	r6, [pc, #72]	; 31f10 <__assert_fail@plt+0x20264>
   31ec4:	ldr	r5, [pc, #72]	; 31f14 <__assert_fail@plt+0x20268>
   31ec8:	add	r6, pc, r6
   31ecc:	add	r5, pc, r5
   31ed0:	sub	r6, r6, r5
   31ed4:	mov	r8, r1
   31ed8:	mov	r9, r2
   31edc:	bl	117e8 <pthread_mutex_unlock@plt-0x20>
   31ee0:	asrs	r6, r6, #2
   31ee4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   31ee8:	mov	r4, #0
   31eec:	add	r4, r4, #1
   31ef0:	ldr	r3, [r5], #4
   31ef4:	mov	r2, r9
   31ef8:	mov	r1, r8
   31efc:	mov	r0, r7
   31f00:	blx	r3
   31f04:	cmp	r6, r4
   31f08:	bne	31eec <__assert_fail@plt+0x20240>
   31f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31f10:	andeq	r2, r1, ip, lsr r0
   31f14:	andeq	r2, r1, r4, lsr r0
   31f18:	bx	lr
   31f1c:	ldr	r3, [pc, #12]	; 31f30 <__assert_fail@plt+0x20284>
   31f20:	mov	r1, #0
   31f24:	add	r3, pc, r3
   31f28:	ldr	r2, [r3]
   31f2c:	b	11b14 <__cxa_atexit@plt>
   31f30:	andeq	r2, r1, r8, ror r2

Disassembly of section .fini:

00031f34 <.fini>:
   31f34:	push	{r3, lr}
   31f38:	pop	{r3, pc}
