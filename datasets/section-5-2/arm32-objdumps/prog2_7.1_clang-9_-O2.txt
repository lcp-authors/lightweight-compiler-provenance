
../repos/prog2/7.1:     file format elf32-littlearm


Disassembly of section .init:

00010e58 <.init>:
   10e58:	push	{r3, lr}
   10e5c:	bl	10f74 <_start@@Base+0x3c>
   10e60:	pop	{r3, pc}

Disassembly of section .plt:

00010e64 <strcmp@plt-0x14>:
   10e64:	push	{lr}		; (str lr, [sp, #-4]!)
   10e68:	ldr	lr, [pc, #4]	; 10e74 <strcmp@plt-0x4>
   10e6c:	add	lr, pc, lr
   10e70:	ldr	pc, [lr, #8]!
   10e74:	andeq	r2, r1, ip, lsl #3

00010e78 <strcmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #396]!	; 0x18c

00010e84 <printf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #388]!	; 0x184

00010e90 <fopen@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #73728	; 0x12000
   10e98:	ldr	pc, [ip, #380]!	; 0x17c

00010e9c <free@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #73728	; 0x12000
   10ea4:	ldr	pc, [ip, #372]!	; 0x174

00010ea8 <realloc@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #73728	; 0x12000
   10eb0:	ldr	pc, [ip, #364]!	; 0x16c

00010eb4 <strcpy@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #73728	; 0x12000
   10ebc:	ldr	pc, [ip, #356]!	; 0x164

00010ec0 <puts@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #73728	; 0x12000
   10ec8:	ldr	pc, [ip, #348]!	; 0x15c

00010ecc <malloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #73728	; 0x12000
   10ed4:	ldr	pc, [ip, #340]!	; 0x154

00010ed8 <__libc_start_main@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #73728	; 0x12000
   10ee0:	ldr	pc, [ip, #332]!	; 0x14c

00010ee4 <__gmon_start__@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #73728	; 0x12000
   10eec:	ldr	pc, [ip, #324]!	; 0x144

00010ef0 <strlen@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #73728	; 0x12000
   10ef8:	ldr	pc, [ip, #316]!	; 0x13c

00010efc <putchar@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #73728	; 0x12000
   10f04:	ldr	pc, [ip, #308]!	; 0x134

00010f08 <fclose@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #73728	; 0x12000
   10f10:	ldr	pc, [ip, #300]!	; 0x12c

00010f14 <strtok@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #73728	; 0x12000
   10f1c:	ldr	pc, [ip, #292]!	; 0x124

00010f20 <fgets_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #73728	; 0x12000
   10f28:	ldr	pc, [ip, #284]!	; 0x11c

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #73728	; 0x12000
   10f34:	ldr	pc, [ip, #276]!	; 0x114

Disassembly of section .text:

00010f38 <_start@@Base>:
   10f38:	mov	fp, #0
   10f3c:	mov	lr, #0
   10f40:	pop	{r1}		; (ldr r1, [sp], #4)
   10f44:	mov	r2, sp
   10f48:	push	{r2}		; (str r2, [sp, #-4]!)
   10f4c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f50:	ldr	ip, [pc, #16]	; 10f68 <_start@@Base+0x30>
   10f54:	push	{ip}		; (str ip, [sp, #-4]!)
   10f58:	ldr	r0, [pc, #12]	; 10f6c <_start@@Base+0x34>
   10f5c:	ldr	r3, [pc, #12]	; 10f70 <_start@@Base+0x38>
   10f60:	bl	10ed8 <__libc_start_main@plt>
   10f64:	bl	10f2c <abort@plt>
   10f68:	andeq	r2, r1, r8, lsl #8
   10f6c:	andeq	r1, r1, r8, lsr #32
   10f70:	andeq	r2, r1, r8, lsr #7
   10f74:	ldr	r3, [pc, #20]	; 10f90 <_start@@Base+0x58>
   10f78:	ldr	r2, [pc, #20]	; 10f94 <_start@@Base+0x5c>
   10f7c:	add	r3, pc, r3
   10f80:	ldr	r2, [r3, r2]
   10f84:	cmp	r2, #0
   10f88:	bxeq	lr
   10f8c:	b	10ee4 <__gmon_start__@plt>
   10f90:	andeq	r2, r1, ip, ror r0
   10f94:	andeq	r0, r0, ip, asr #32
   10f98:	ldr	r0, [pc, #24]	; 10fb8 <_start@@Base+0x80>
   10f9c:	ldr	r3, [pc, #24]	; 10fbc <_start@@Base+0x84>
   10fa0:	cmp	r3, r0
   10fa4:	bxeq	lr
   10fa8:	ldr	r3, [pc, #16]	; 10fc0 <_start@@Base+0x88>
   10fac:	cmp	r3, #0
   10fb0:	bxeq	lr
   10fb4:	bx	r3
   10fb8:	andeq	r3, r2, r8, asr r0
   10fbc:	andeq	r3, r2, r8, asr r0
   10fc0:	andeq	r0, r0, r0
   10fc4:	ldr	r0, [pc, #36]	; 10ff0 <_start@@Base+0xb8>
   10fc8:	ldr	r1, [pc, #36]	; 10ff4 <_start@@Base+0xbc>
   10fcc:	sub	r1, r1, r0
   10fd0:	asr	r1, r1, #2
   10fd4:	add	r1, r1, r1, lsr #31
   10fd8:	asrs	r1, r1, #1
   10fdc:	bxeq	lr
   10fe0:	ldr	r3, [pc, #16]	; 10ff8 <_start@@Base+0xc0>
   10fe4:	cmp	r3, #0
   10fe8:	bxeq	lr
   10fec:	bx	r3
   10ff0:	andeq	r3, r2, r8, asr r0
   10ff4:	andeq	r3, r2, r8, asr r0
   10ff8:	andeq	r0, r0, r0
   10ffc:	push	{r4, lr}
   11000:	ldr	r4, [pc, #24]	; 11020 <_start@@Base+0xe8>
   11004:	ldrb	r3, [r4]
   11008:	cmp	r3, #0
   1100c:	popne	{r4, pc}
   11010:	bl	10f98 <_start@@Base+0x60>
   11014:	mov	r3, #1
   11018:	strb	r3, [r4]
   1101c:	pop	{r4, pc}
   11020:	andeq	r3, r2, r8, asr r0
   11024:	b	10fc4 <_start@@Base+0x8c>

00011028 <main@@Base>:
   11028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1102c:	add	fp, sp, #24
   11030:	sub	sp, sp, #104	; 0x68
   11034:	ldr	r0, [pc, #532]	; 11250 <main@@Base+0x228>
   11038:	add	r0, pc, r0
   1103c:	bl	10ec0 <puts@plt>
   11040:	bl	11ec4 <bst_nova@@Base>
   11044:	ldr	r1, [pc, #520]	; 11254 <main@@Base+0x22c>
   11048:	mov	r4, r0
   1104c:	add	r1, pc, r1
   11050:	bl	12110 <bst_insere@@Base>
   11054:	ldr	r1, [pc, #508]	; 11258 <main@@Base+0x230>
   11058:	mov	r0, r4
   1105c:	add	r1, pc, r1
   11060:	bl	12110 <bst_insere@@Base>
   11064:	ldr	r1, [pc, #496]	; 1125c <main@@Base+0x234>
   11068:	mov	r0, r4
   1106c:	add	r1, pc, r1
   11070:	bl	12110 <bst_insere@@Base>
   11074:	ldr	r1, [pc, #484]	; 11260 <main@@Base+0x238>
   11078:	mov	r0, r4
   1107c:	add	r1, pc, r1
   11080:	bl	12110 <bst_insere@@Base>
   11084:	ldr	r1, [pc, #472]	; 11264 <main@@Base+0x23c>
   11088:	mov	r0, r4
   1108c:	add	r1, pc, r1
   11090:	bl	12110 <bst_insere@@Base>
   11094:	ldr	r1, [pc, #460]	; 11268 <main@@Base+0x240>
   11098:	mov	r0, r4
   1109c:	add	r1, pc, r1
   110a0:	bl	12110 <bst_insere@@Base>
   110a4:	ldr	r1, [pc, #448]	; 1126c <main@@Base+0x244>
   110a8:	mov	r0, r4
   110ac:	add	r1, pc, r1
   110b0:	bl	12110 <bst_insere@@Base>
   110b4:	ldr	r1, [pc, #436]	; 11270 <main@@Base+0x248>
   110b8:	mov	r0, r4
   110bc:	add	r1, pc, r1
   110c0:	bl	12110 <bst_insere@@Base>
   110c4:	ldr	r1, [pc, #424]	; 11274 <main@@Base+0x24c>
   110c8:	mov	r0, r4
   110cc:	add	r1, pc, r1
   110d0:	bl	12110 <bst_insere@@Base>
   110d4:	ldr	r1, [pc, #412]	; 11278 <main@@Base+0x250>
   110d8:	mov	r0, r4
   110dc:	add	r1, pc, r1
   110e0:	bl	12110 <bst_insere@@Base>
   110e4:	ldr	r0, [r4]
   110e8:	bl	12354 <bst_altura@@Base>
   110ec:	mov	r1, r0
   110f0:	ldr	r0, [pc, #388]	; 1127c <main@@Base+0x254>
   110f4:	add	r0, pc, r0
   110f8:	bl	10e84 <printf@plt>
   110fc:	mov	r0, r4
   11100:	bl	12290 <bst_imprime@@Base>
   11104:	ldr	r0, [pc, #372]	; 11280 <main@@Base+0x258>
   11108:	add	r0, pc, r0
   1110c:	bl	10ec0 <puts@plt>
   11110:	bl	112a8 <avl_nova@@Base>
   11114:	mov	r4, r0
   11118:	ldr	r0, [pc, #356]	; 11284 <main@@Base+0x25c>
   1111c:	ldr	r1, [pc, #356]	; 11288 <main@@Base+0x260>
   11120:	add	r0, pc, r0
   11124:	add	r1, pc, r1
   11128:	bl	10e90 <fopen@plt>
   1112c:	mov	r5, r0
   11130:	add	r6, sp, #4
   11134:	mov	r1, #100	; 0x64
   11138:	mov	r0, r6
   1113c:	mov	r2, r5
   11140:	bl	10f20 <fgets_unlocked@plt>
   11144:	cmp	r0, #0
   11148:	beq	111b8 <main@@Base+0x190>
   1114c:	ldr	r7, [pc, #312]	; 1128c <main@@Base+0x264>
   11150:	mov	r8, #0
   11154:	add	r7, pc, r7
   11158:	mov	r0, r6
   1115c:	mov	r1, r7
   11160:	bl	10f14 <strtok@plt>
   11164:	mov	r1, r0
   11168:	mov	r0, r6
   1116c:	bl	10eb4 <strcpy@plt>
   11170:	mov	r0, #0
   11174:	mov	r1, r7
   11178:	bl	10f14 <strtok@plt>
   1117c:	mov	r1, r0
   11180:	mov	r0, r6
   11184:	bl	10eb4 <strcpy@plt>
   11188:	bl	10ef0 <strlen@plt>
   1118c:	add	r0, r0, r6
   11190:	mov	r1, r6
   11194:	strb	r8, [r0, #-1]
   11198:	mov	r0, r4
   1119c:	bl	11814 <avl_insere@@Base>
   111a0:	mov	r0, r6
   111a4:	mov	r1, #100	; 0x64
   111a8:	mov	r2, r5
   111ac:	bl	10f20 <fgets_unlocked@plt>
   111b0:	cmp	r0, #0
   111b4:	bne	11158 <main@@Base+0x130>
   111b8:	mov	r0, r5
   111bc:	bl	10f08 <fclose@plt>
   111c0:	ldr	r1, [pc, #200]	; 11290 <main@@Base+0x268>
   111c4:	mov	r0, r4
   111c8:	add	r1, pc, r1
   111cc:	bl	11754 <avl_pesquisa@@Base>
   111d0:	cmp	r0, #0
   111d4:	beq	111ec <main@@Base+0x1c4>
   111d8:	ldr	r1, [r0]
   111dc:	ldr	r2, [r0, #16]
   111e0:	ldr	r0, [pc, #172]	; 11294 <main@@Base+0x26c>
   111e4:	add	r0, pc, r0
   111e8:	bl	10e84 <printf@plt>
   111ec:	ldr	r1, [pc, #164]	; 11298 <main@@Base+0x270>
   111f0:	mov	r0, r4
   111f4:	add	r1, pc, r1
   111f8:	bl	11754 <avl_pesquisa@@Base>
   111fc:	cmp	r0, #0
   11200:	beq	11218 <main@@Base+0x1f0>
   11204:	ldr	r1, [r0]
   11208:	ldr	r2, [r0, #16]
   1120c:	ldr	r0, [pc, #136]	; 1129c <main@@Base+0x274>
   11210:	add	r0, pc, r0
   11214:	bl	10e84 <printf@plt>
   11218:	ldr	r1, [pc, #128]	; 112a0 <main@@Base+0x278>
   1121c:	mov	r0, r4
   11220:	add	r1, pc, r1
   11224:	bl	11754 <avl_pesquisa@@Base>
   11228:	cmp	r0, #0
   1122c:	beq	11244 <main@@Base+0x21c>
   11230:	ldr	r1, [r0]
   11234:	ldr	r2, [r0, #16]
   11238:	ldr	r0, [pc, #100]	; 112a4 <main@@Base+0x27c>
   1123c:	add	r0, pc, r0
   11240:	bl	10e84 <printf@plt>
   11244:	mov	r0, #0
   11248:	sub	sp, fp, #24
   1124c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11250:	andeq	r1, r0, sp, lsr #8
   11254:	andeq	r1, r0, r4, asr #7
   11258:			; <UNDEFINED> instruction: 0x000013b6
   1125c:	andeq	r1, r0, r8, lsr #7
   11260:	muleq	r0, sl, r3
   11264:	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11268:	andeq	r1, r0, ip, ror r3
   1126c:	andeq	r1, r0, lr, ror #6
   11270:	andeq	r1, r0, r0, ror #6
   11274:	andeq	r1, r0, r2, asr r3
   11278:	andeq	r1, r0, r4, asr #6
   1127c:	andeq	r1, r0, lr, lsr #6
   11280:	andeq	r1, r0, r1, ror #6
   11284:	andeq	r1, r0, r6, lsl r3
   11288:	andeq	r1, r0, lr, lsl r3
   1128c:	strdeq	r1, [r0], -r0
   11290:	andeq	r1, r0, lr, ror r2
   11294:	andeq	r1, r0, fp, ror #4
   11298:	andeq	r1, r0, r4, ror #4
   1129c:	andeq	r1, r0, pc, lsr r2
   112a0:	andeq	r1, r0, lr, lsr r2
   112a4:	andeq	r1, r0, r3, lsl r2

000112a8 <avl_nova@@Base>:
   112a8:	push	{fp, lr}
   112ac:	mov	fp, sp
   112b0:	mov	r0, #4
   112b4:	bl	10ecc <malloc@plt>
   112b8:	cmp	r0, #0
   112bc:	moveq	r0, #0
   112c0:	movne	r1, #0
   112c4:	strne	r1, [r0]
   112c8:	pop	{fp, pc}

000112cc <avl_apaga@@Base>:
   112cc:	cmp	r0, #0
   112d0:	bxeq	lr
   112d4:	push	{r4, sl, fp, lr}
   112d8:	add	fp, sp, #8
   112dc:	mov	r4, r0
   112e0:	ldr	r0, [r0]
   112e4:	cmp	r0, #0
   112e8:	beq	11300 <avl_apaga@@Base+0x34>
   112ec:	ldr	r1, [r0]
   112f0:	bl	1130c <avl_remove_impl@@Base>
   112f4:	str	r0, [r4]
   112f8:	cmp	r0, #0
   112fc:	bne	112ec <avl_apaga@@Base+0x20>
   11300:	mov	r0, r4
   11304:	pop	{r4, sl, fp, lr}
   11308:	b	10e9c <free@plt>

0001130c <avl_remove_impl@@Base>:
   1130c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11310:	add	fp, sp, #24
   11314:	mov	r8, #0
   11318:	cmp	r0, #0
   1131c:	beq	1174c <avl_remove_impl@@Base+0x440>
   11320:	ldr	r6, [r0]
   11324:	mov	r5, r0
   11328:	mov	r7, r1
   1132c:	mov	r0, r1
   11330:	mov	r1, r6
   11334:	bl	10e78 <strcmp@plt>
   11338:	mov	r4, r5
   1133c:	cmn	r0, #1
   11340:	bgt	1134c <avl_remove_impl@@Base+0x40>
   11344:	ldr	r0, [r4, #4]!
   11348:	b	11358 <avl_remove_impl@@Base+0x4c>
   1134c:	cmp	r0, #0
   11350:	beq	115b0 <avl_remove_impl@@Base+0x2a4>
   11354:	ldr	r0, [r4, #8]!
   11358:	mov	r1, r7
   1135c:	bl	1130c <avl_remove_impl@@Base>
   11360:	str	r0, [r4]
   11364:	ldr	r1, [r5, #4]
   11368:	cmp	r1, #0
   1136c:	beq	11378 <avl_remove_impl@@Base+0x6c>
   11370:	ldr	r0, [r1, #12]
   11374:	b	1137c <avl_remove_impl@@Base+0x70>
   11378:	mvn	r0, #0
   1137c:	ldr	r2, [r5, #8]
   11380:	cmp	r2, #0
   11384:	beq	113b4 <avl_remove_impl@@Base+0xa8>
   11388:	ldr	r3, [r2, #12]
   1138c:	cmp	r0, r3
   11390:	movgt	r3, r0
   11394:	mov	r0, r5
   11398:	add	r3, r3, #1
   1139c:	str	r3, [r0, #12]!
   113a0:	ldr	r3, [r2, #12]
   113a4:	cmp	r1, #0
   113a8:	beq	113d0 <avl_remove_impl@@Base+0xc4>
   113ac:	ldr	r7, [r1, #12]
   113b0:	b	113d4 <avl_remove_impl@@Base+0xc8>
   113b4:	orr	r0, r0, r0, asr #31
   113b8:	add	r3, r0, #1
   113bc:	mov	r0, r5
   113c0:	str	r3, [r0, #12]!
   113c4:	mvn	r3, #0
   113c8:	cmp	r1, #0
   113cc:	bne	113ac <avl_remove_impl@@Base+0xa0>
   113d0:	mvn	r7, #0
   113d4:	sub	r3, r3, r7
   113d8:	cmp	r3, #2
   113dc:	blt	114bc <avl_remove_impl@@Base+0x1b0>
   113e0:	cmp	r2, #0
   113e4:	beq	11604 <avl_remove_impl@@Base+0x2f8>
   113e8:	ldr	r7, [r2, #8]
   113ec:	ldr	r8, [r2, #4]
   113f0:	mvn	r3, #0
   113f4:	mvn	r1, #0
   113f8:	cmp	r7, #0
   113fc:	ldrne	r3, [r7, #12]
   11400:	cmp	r8, #0
   11404:	ldrne	r1, [r8, #12]
   11408:	cmp	r3, r1
   1140c:	bge	1160c <avl_remove_impl@@Base+0x300>
   11410:	ldr	r7, [r8, #8]
   11414:	str	r2, [r8, #8]
   11418:	mvn	r3, #0
   1141c:	mvn	r1, #0
   11420:	str	r7, [r2, #4]
   11424:	cmp	r7, #0
   11428:	ldrne	r3, [r7, #12]
   1142c:	ldr	r7, [r2, #8]
   11430:	cmp	r7, #0
   11434:	ldrne	r1, [r7, #12]
   11438:	mvn	r7, #0
   1143c:	cmp	r3, r1
   11440:	movgt	r1, r3
   11444:	add	r3, r1, #1
   11448:	mvn	r1, #0
   1144c:	str	r3, [r2, #12]
   11450:	ldr	r2, [r8, #4]
   11454:	cmp	r2, #0
   11458:	ldrne	r7, [r2, #12]
   1145c:	str	r5, [r8, #4]
   11460:	cmp	r7, r3
   11464:	movgt	r3, r7
   11468:	mvn	r7, #0
   1146c:	add	r3, r3, #1
   11470:	str	r3, [r8, #12]
   11474:	str	r2, [r5, #8]
   11478:	ldr	r3, [r5, #4]
   1147c:	cmp	r3, #0
   11480:	ldrne	r1, [r3, #12]
   11484:	cmp	r2, #0
   11488:	mvn	r3, #0
   1148c:	ldrne	r7, [r2, #12]
   11490:	cmp	r1, r7
   11494:	movgt	r7, r1
   11498:	add	r1, r7, #1
   1149c:	str	r1, [r0]
   114a0:	ldr	r0, [r8, #8]
   114a4:	cmp	r0, #0
   114a8:	ldrne	r3, [r0, #12]
   114ac:	cmp	r1, r3
   114b0:	movgt	r3, r1
   114b4:	add	r0, r3, #1
   114b8:	b	1159c <avl_remove_impl@@Base+0x290>
   114bc:	cmn	r3, #2
   114c0:	bgt	115a8 <avl_remove_impl@@Base+0x29c>
   114c4:	cmp	r1, #0
   114c8:	beq	11670 <avl_remove_impl@@Base+0x364>
   114cc:	ldr	r8, [r1, #8]
   114d0:	ldr	r7, [r1, #4]
   114d4:	mvn	r3, #0
   114d8:	mvn	r2, #0
   114dc:	cmp	r8, #0
   114e0:	ldrne	r3, [r8, #12]
   114e4:	cmp	r7, #0
   114e8:	ldrne	r2, [r7, #12]
   114ec:	cmp	r3, r2
   114f0:	ble	11678 <avl_remove_impl@@Base+0x36c>
   114f4:	ldr	r3, [r8, #4]
   114f8:	str	r1, [r8, #4]
   114fc:	mvn	r7, #0
   11500:	mvn	r2, #0
   11504:	str	r3, [r1, #8]
   11508:	ldr	r6, [r1, #4]
   1150c:	cmp	r6, #0
   11510:	ldrne	r7, [r6, #12]
   11514:	cmp	r3, #0
   11518:	ldrne	r2, [r3, #12]
   1151c:	cmp	r7, r2
   11520:	movgt	r2, r7
   11524:	mvn	r7, #0
   11528:	add	r3, r2, #1
   1152c:	str	r3, [r1, #12]
   11530:	mvn	r1, #0
   11534:	ldr	r2, [r8, #8]
   11538:	cmp	r2, #0
   1153c:	ldrne	r7, [r2, #12]
   11540:	str	r5, [r8, #8]
   11544:	cmp	r3, r7
   11548:	movgt	r7, r3
   1154c:	cmp	r2, #0
   11550:	add	r3, r7, #1
   11554:	str	r3, [r8, #12]
   11558:	str	r2, [r5, #4]
   1155c:	mvn	r3, #0
   11560:	ldr	r7, [r5, #8]
   11564:	ldrne	r1, [r2, #12]
   11568:	mvn	r2, #0
   1156c:	cmp	r7, #0
   11570:	ldrne	r3, [r7, #12]
   11574:	cmp	r1, r3
   11578:	movgt	r3, r1
   1157c:	add	r1, r3, #1
   11580:	str	r1, [r0]
   11584:	ldr	r0, [r8, #4]
   11588:	cmp	r0, #0
   1158c:	ldrne	r2, [r0, #12]
   11590:	cmp	r2, r1
   11594:	movgt	r1, r2
   11598:	add	r0, r1, #1
   1159c:	str	r0, [r8, #12]
   115a0:	mov	r0, r8
   115a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115a8:	mov	r0, r5
   115ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115b0:	ldr	r0, [r4, #8]!
   115b4:	ldr	r7, [r4, #-4]
   115b8:	cmp	r7, #0
   115bc:	beq	116c0 <avl_remove_impl@@Base+0x3b4>
   115c0:	cmp	r0, #0
   115c4:	beq	116cc <avl_remove_impl@@Base+0x3c0>
   115c8:	mov	r7, r0
   115cc:	ldr	r0, [r0, #4]
   115d0:	cmp	r0, #0
   115d4:	bne	115c8 <avl_remove_impl@@Base+0x2bc>
   115d8:	ldr	r0, [r7]
   115dc:	bl	10ef0 <strlen@plt>
   115e0:	add	r1, r0, #1
   115e4:	mov	r0, r6
   115e8:	bl	10ea8 <realloc@plt>
   115ec:	str	r0, [r5]
   115f0:	ldr	r1, [r7]
   115f4:	bl	10eb4 <strcpy@plt>
   115f8:	ldr	r1, [r7]
   115fc:	ldr	r0, [r5, #8]
   11600:	b	1135c <avl_remove_impl@@Base+0x50>
   11604:	mov	r1, #4
   11608:	ldr	r8, [r1]
   1160c:	str	r5, [r2, #4]
   11610:	str	r8, [r5, #8]
   11614:	mvn	r3, #0
   11618:	mvn	r1, #0
   1161c:	ldr	r7, [r5, #4]
   11620:	cmp	r7, #0
   11624:	ldrne	r3, [r7, #12]
   11628:	cmp	r8, #0
   1162c:	ldrne	r1, [r8, #12]
   11630:	cmp	r3, r1
   11634:	movgt	r1, r3
   11638:	add	r1, r1, #1
   1163c:	str	r1, [r0]
   11640:	ldr	r0, [r2, #8]
   11644:	cmp	r0, #0
   11648:	beq	11654 <avl_remove_impl@@Base+0x348>
   1164c:	ldr	r0, [r0, #12]
   11650:	b	11658 <avl_remove_impl@@Base+0x34c>
   11654:	mvn	r0, #0
   11658:	cmp	r1, r0
   1165c:	movgt	r0, r1
   11660:	add	r0, r0, #1
   11664:	str	r0, [r2, #12]
   11668:	mov	r0, r2
   1166c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11670:	mov	r2, #8
   11674:	ldr	r8, [r2]
   11678:	str	r5, [r1, #8]
   1167c:	str	r8, [r5, #4]
   11680:	cmp	r8, #0
   11684:	mvn	r3, #0
   11688:	mvn	r2, #0
   1168c:	ldr	r7, [r5, #8]
   11690:	ldrne	r3, [r8, #12]
   11694:	cmp	r7, #0
   11698:	ldrne	r2, [r7, #12]
   1169c:	cmp	r3, r2
   116a0:	movgt	r2, r3
   116a4:	add	r2, r2, #1
   116a8:	str	r2, [r0]
   116ac:	ldr	r0, [r1, #4]
   116b0:	cmp	r0, #0
   116b4:	beq	1170c <avl_remove_impl@@Base+0x400>
   116b8:	ldr	r0, [r0, #12]
   116bc:	b	11710 <avl_remove_impl@@Base+0x404>
   116c0:	cmp	r0, #0
   116c4:	mov	r7, r0
   116c8:	beq	1172c <avl_remove_impl@@Base+0x420>
   116cc:	ldr	r0, [r7]
   116d0:	bl	10ef0 <strlen@plt>
   116d4:	add	r1, r0, #1
   116d8:	mov	r0, r6
   116dc:	bl	10ea8 <realloc@plt>
   116e0:	str	r0, [r5]
   116e4:	ldr	r1, [r7]
   116e8:	bl	10eb4 <strcpy@plt>
   116ec:	ldr	r0, [r7, #4]
   116f0:	str	r0, [r5, #4]
   116f4:	ldr	r0, [r7, #8]
   116f8:	str	r0, [r5, #8]
   116fc:	ldr	r0, [r7, #12]
   11700:	str	r0, [r5, #12]
   11704:	ldr	r6, [r7]
   11708:	b	11734 <avl_remove_impl@@Base+0x428>
   1170c:	mvn	r0, #0
   11710:	cmp	r0, r2
   11714:	mov	r8, r1
   11718:	movgt	r2, r0
   1171c:	add	r0, r2, #1
   11720:	str	r0, [r1, #12]
   11724:	mov	r0, r8
   11728:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1172c:	mov	r7, r5
   11730:	mov	r5, #0
   11734:	mov	r0, r6
   11738:	bl	10e9c <free@plt>
   1173c:	mov	r0, r7
   11740:	bl	10e9c <free@plt>
   11744:	cmp	r5, #0
   11748:	bne	11364 <avl_remove_impl@@Base+0x58>
   1174c:	mov	r0, r8
   11750:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00011754 <avl_pesquisa@@Base>:
   11754:	push	{r4, r5, r6, sl, fp, lr}
   11758:	add	fp, sp, #16
   1175c:	cmp	r0, #0
   11760:	mov	r4, #0
   11764:	movne	r5, r1
   11768:	cmpne	r1, #0
   1176c:	beq	117ac <avl_pesquisa@@Base+0x58>
   11770:	b	11778 <avl_pesquisa@@Base+0x24>
   11774:	add	r0, r6, #4
   11778:	ldr	r6, [r0]
   1177c:	cmp	r6, #0
   11780:	beq	117ac <avl_pesquisa@@Base+0x58>
   11784:	ldr	r1, [r6]
   11788:	mov	r0, r5
   1178c:	bl	10e78 <strcmp@plt>
   11790:	cmn	r0, #1
   11794:	ble	11774 <avl_pesquisa@@Base+0x20>
   11798:	cmp	r0, #0
   1179c:	beq	117a8 <avl_pesquisa@@Base+0x54>
   117a0:	add	r0, r6, #8
   117a4:	b	11778 <avl_pesquisa@@Base+0x24>
   117a8:	mov	r4, r6
   117ac:	mov	r0, r4
   117b0:	pop	{r4, r5, r6, sl, fp, pc}

000117b4 <avl_pesquisa_impl@@Base>:
   117b4:	push	{r4, r5, r6, sl, fp, lr}
   117b8:	add	fp, sp, #16
   117bc:	mov	r4, #0
   117c0:	cmp	r0, #0
   117c4:	beq	1180c <avl_pesquisa_impl@@Base+0x58>
   117c8:	mov	r5, r1
   117cc:	mov	r6, r0
   117d0:	b	117e4 <avl_pesquisa_impl@@Base+0x30>
   117d4:	add	r0, r6, #4
   117d8:	ldr	r6, [r0]
   117dc:	cmp	r6, #0
   117e0:	beq	1180c <avl_pesquisa_impl@@Base+0x58>
   117e4:	ldr	r1, [r6]
   117e8:	mov	r0, r5
   117ec:	bl	10e78 <strcmp@plt>
   117f0:	cmn	r0, #1
   117f4:	ble	117d4 <avl_pesquisa_impl@@Base+0x20>
   117f8:	cmp	r0, #0
   117fc:	beq	11808 <avl_pesquisa_impl@@Base+0x54>
   11800:	add	r0, r6, #8
   11804:	b	117d8 <avl_pesquisa_impl@@Base+0x24>
   11808:	mov	r4, r6
   1180c:	mov	r0, r4
   11810:	pop	{r4, r5, r6, sl, fp, pc}

00011814 <avl_insere@@Base>:
   11814:	push	{r4, sl, fp, lr}
   11818:	add	fp, sp, #8
   1181c:	mov	r4, r0
   11820:	mvn	r0, #0
   11824:	cmp	r4, #0
   11828:	cmpne	r1, #0
   1182c:	bne	11834 <avl_insere@@Base+0x20>
   11830:	pop	{r4, sl, fp, pc}
   11834:	ldr	r0, [r4]
   11838:	bl	11848 <avl_insere_impl@@Base>
   1183c:	str	r0, [r4]
   11840:	mov	r0, #0
   11844:	pop	{r4, sl, fp, pc}

00011848 <avl_insere_impl@@Base>:
   11848:	push	{r4, r5, r6, sl, fp, lr}
   1184c:	add	fp, sp, #16
   11850:	mov	r6, r1
   11854:	cmp	r0, #0
   11858:	beq	11894 <avl_insere_impl@@Base+0x4c>
   1185c:	ldr	r1, [r0]
   11860:	mov	r4, r0
   11864:	mov	r0, r6
   11868:	bl	10e78 <strcmp@plt>
   1186c:	cmn	r0, #1
   11870:	bgt	118dc <avl_insere_impl@@Base+0x94>
   11874:	ldr	r0, [r4, #4]
   11878:	mov	r1, r6
   1187c:	bl	11848 <avl_insere_impl@@Base>
   11880:	str	r0, [r4, #4]
   11884:	cmp	r0, #0
   11888:	beq	11900 <avl_insere_impl@@Base+0xb8>
   1188c:	ldr	r1, [r0, #12]
   11890:	b	11904 <avl_insere_impl@@Base+0xbc>
   11894:	mov	r0, #20
   11898:	bl	10ecc <malloc@plt>
   1189c:	mov	r5, r0
   118a0:	mov	r0, r6
   118a4:	bl	10ef0 <strlen@plt>
   118a8:	add	r0, r0, #1
   118ac:	bl	10ecc <malloc@plt>
   118b0:	mov	r1, r6
   118b4:	str	r0, [r5]
   118b8:	bl	10eb4 <strcpy@plt>
   118bc:	mov	r1, #0
   118c0:	mov	r0, #1
   118c4:	str	r1, [r5, #4]
   118c8:	str	r1, [r5, #8]
   118cc:	str	r1, [r5, #12]
   118d0:	str	r0, [r5, #16]
   118d4:	mov	r0, r5
   118d8:	pop	{r4, r5, r6, sl, fp, pc}
   118dc:	cmp	r0, #0
   118e0:	beq	11b38 <avl_insere_impl@@Base+0x2f0>
   118e4:	ldr	r0, [r4, #8]
   118e8:	mov	r1, r6
   118ec:	bl	11848 <avl_insere_impl@@Base>
   118f0:	str	r0, [r4, #8]
   118f4:	ldr	r0, [r4, #4]
   118f8:	cmp	r0, #0
   118fc:	bne	1188c <avl_insere_impl@@Base+0x44>
   11900:	mvn	r1, #0
   11904:	ldr	r2, [r4, #8]
   11908:	cmp	r2, #0
   1190c:	beq	1193c <avl_insere_impl@@Base+0xf4>
   11910:	ldr	r3, [r2, #12]
   11914:	cmp	r1, r3
   11918:	movgt	r3, r1
   1191c:	mov	r1, r4
   11920:	add	r3, r3, #1
   11924:	str	r3, [r1, #12]!
   11928:	ldr	r3, [r2, #12]
   1192c:	cmp	r0, #0
   11930:	beq	11958 <avl_insere_impl@@Base+0x110>
   11934:	ldr	r6, [r0, #12]
   11938:	b	1195c <avl_insere_impl@@Base+0x114>
   1193c:	orr	r1, r1, r1, asr #31
   11940:	add	r3, r1, #1
   11944:	mov	r1, r4
   11948:	str	r3, [r1, #12]!
   1194c:	mvn	r3, #0
   11950:	cmp	r0, #0
   11954:	bne	11934 <avl_insere_impl@@Base+0xec>
   11958:	mvn	r6, #0
   1195c:	sub	r3, r3, r6
   11960:	cmp	r3, #2
   11964:	blt	11a44 <avl_insere_impl@@Base+0x1fc>
   11968:	cmp	r2, #0
   1196c:	beq	11b4c <avl_insere_impl@@Base+0x304>
   11970:	ldr	r6, [r2, #8]
   11974:	ldr	r5, [r2, #4]
   11978:	mvn	r3, #0
   1197c:	mvn	r0, #0
   11980:	cmp	r6, #0
   11984:	ldrne	r3, [r6, #12]
   11988:	cmp	r5, #0
   1198c:	ldrne	r0, [r5, #12]
   11990:	cmp	r3, r0
   11994:	bge	11b54 <avl_insere_impl@@Base+0x30c>
   11998:	ldr	r6, [r5, #8]
   1199c:	str	r2, [r5, #8]
   119a0:	mvn	r3, #0
   119a4:	mvn	r0, #0
   119a8:	str	r6, [r2, #4]
   119ac:	cmp	r6, #0
   119b0:	ldrne	r3, [r6, #12]
   119b4:	ldr	r6, [r2, #8]
   119b8:	cmp	r6, #0
   119bc:	ldrne	r0, [r6, #12]
   119c0:	mvn	r6, #0
   119c4:	cmp	r3, r0
   119c8:	movgt	r0, r3
   119cc:	add	r3, r0, #1
   119d0:	mvn	r0, #0
   119d4:	str	r3, [r2, #12]
   119d8:	ldr	r2, [r5, #4]
   119dc:	cmp	r2, #0
   119e0:	ldrne	r6, [r2, #12]
   119e4:	str	r4, [r5, #4]
   119e8:	cmp	r6, r3
   119ec:	movgt	r3, r6
   119f0:	mvn	r6, #0
   119f4:	add	r3, r3, #1
   119f8:	str	r3, [r5, #12]
   119fc:	str	r2, [r4, #8]
   11a00:	ldr	r3, [r4, #4]
   11a04:	cmp	r3, #0
   11a08:	ldrne	r0, [r3, #12]
   11a0c:	cmp	r2, #0
   11a10:	mvn	r3, #0
   11a14:	ldrne	r6, [r2, #12]
   11a18:	cmp	r0, r6
   11a1c:	movgt	r6, r0
   11a20:	add	r0, r6, #1
   11a24:	str	r0, [r1]
   11a28:	ldr	r1, [r5, #8]
   11a2c:	cmp	r1, #0
   11a30:	ldrne	r3, [r1, #12]
   11a34:	cmp	r0, r3
   11a38:	movgt	r3, r0
   11a3c:	add	r0, r3, #1
   11a40:	b	11b24 <avl_insere_impl@@Base+0x2dc>
   11a44:	cmn	r3, #2
   11a48:	bgt	11b30 <avl_insere_impl@@Base+0x2e8>
   11a4c:	cmp	r0, #0
   11a50:	beq	11bb8 <avl_insere_impl@@Base+0x370>
   11a54:	ldr	r5, [r0, #8]
   11a58:	ldr	r6, [r0, #4]
   11a5c:	mvn	r3, #0
   11a60:	mvn	r2, #0
   11a64:	cmp	r5, #0
   11a68:	ldrne	r3, [r5, #12]
   11a6c:	cmp	r6, #0
   11a70:	ldrne	r2, [r6, #12]
   11a74:	cmp	r3, r2
   11a78:	ble	11bc0 <avl_insere_impl@@Base+0x378>
   11a7c:	ldr	r3, [r5, #4]
   11a80:	str	r0, [r5, #4]
   11a84:	mvn	r6, #0
   11a88:	mvn	r2, #0
   11a8c:	str	r3, [r0, #8]
   11a90:	ldr	ip, [r0, #4]
   11a94:	cmp	ip, #0
   11a98:	ldrne	r6, [ip, #12]
   11a9c:	cmp	r3, #0
   11aa0:	ldrne	r2, [r3, #12]
   11aa4:	cmp	r6, r2
   11aa8:	movgt	r2, r6
   11aac:	mvn	r6, #0
   11ab0:	add	r3, r2, #1
   11ab4:	str	r3, [r0, #12]
   11ab8:	mvn	r0, #0
   11abc:	ldr	r2, [r5, #8]
   11ac0:	cmp	r2, #0
   11ac4:	ldrne	r6, [r2, #12]
   11ac8:	str	r4, [r5, #8]
   11acc:	cmp	r3, r6
   11ad0:	movgt	r6, r3
   11ad4:	cmp	r2, #0
   11ad8:	add	r3, r6, #1
   11adc:	str	r3, [r5, #12]
   11ae0:	str	r2, [r4, #4]
   11ae4:	mvn	r3, #0
   11ae8:	ldr	r6, [r4, #8]
   11aec:	ldrne	r0, [r2, #12]
   11af0:	mvn	r2, #0
   11af4:	cmp	r6, #0
   11af8:	ldrne	r3, [r6, #12]
   11afc:	cmp	r0, r3
   11b00:	movgt	r3, r0
   11b04:	add	r0, r3, #1
   11b08:	str	r0, [r1]
   11b0c:	ldr	r1, [r5, #4]
   11b10:	cmp	r1, #0
   11b14:	ldrne	r2, [r1, #12]
   11b18:	cmp	r2, r0
   11b1c:	movgt	r0, r2
   11b20:	add	r0, r0, #1
   11b24:	str	r0, [r5, #12]
   11b28:	mov	r0, r5
   11b2c:	pop	{r4, r5, r6, sl, fp, pc}
   11b30:	mov	r0, r4
   11b34:	pop	{r4, r5, r6, sl, fp, pc}
   11b38:	ldr	r0, [r4, #16]
   11b3c:	add	r0, r0, #1
   11b40:	str	r0, [r4, #16]
   11b44:	mov	r0, r4
   11b48:	pop	{r4, r5, r6, sl, fp, pc}
   11b4c:	mov	r0, #4
   11b50:	ldr	r5, [r0]
   11b54:	str	r4, [r2, #4]
   11b58:	str	r5, [r4, #8]
   11b5c:	mvn	r3, #0
   11b60:	mvn	r0, #0
   11b64:	ldr	r6, [r4, #4]
   11b68:	cmp	r6, #0
   11b6c:	ldrne	r3, [r6, #12]
   11b70:	cmp	r5, #0
   11b74:	ldrne	r0, [r5, #12]
   11b78:	cmp	r3, r0
   11b7c:	movgt	r0, r3
   11b80:	add	r0, r0, #1
   11b84:	str	r0, [r1]
   11b88:	ldr	r1, [r2, #8]
   11b8c:	cmp	r1, #0
   11b90:	beq	11b9c <avl_insere_impl@@Base+0x354>
   11b94:	ldr	r1, [r1, #12]
   11b98:	b	11ba0 <avl_insere_impl@@Base+0x358>
   11b9c:	mvn	r1, #0
   11ba0:	cmp	r0, r1
   11ba4:	movgt	r1, r0
   11ba8:	add	r0, r1, #1
   11bac:	str	r0, [r2, #12]
   11bb0:	mov	r0, r2
   11bb4:	pop	{r4, r5, r6, sl, fp, pc}
   11bb8:	mov	r2, #8
   11bbc:	ldr	r5, [r2]
   11bc0:	str	r4, [r0, #8]
   11bc4:	str	r5, [r4, #4]
   11bc8:	cmp	r5, #0
   11bcc:	mvn	r3, #0
   11bd0:	mvn	r2, #0
   11bd4:	ldr	r6, [r4, #8]
   11bd8:	ldrne	r3, [r5, #12]
   11bdc:	cmp	r6, #0
   11be0:	ldrne	r2, [r6, #12]
   11be4:	cmp	r3, r2
   11be8:	movgt	r2, r3
   11bec:	add	r2, r2, #1
   11bf0:	str	r2, [r1]
   11bf4:	ldr	r1, [r0, #4]
   11bf8:	cmp	r1, #0
   11bfc:	beq	11c08 <avl_insere_impl@@Base+0x3c0>
   11c00:	ldr	r1, [r1, #12]
   11c04:	b	11c0c <avl_insere_impl@@Base+0x3c4>
   11c08:	mvn	r1, #0
   11c0c:	cmp	r1, r2
   11c10:	movgt	r2, r1
   11c14:	add	r1, r2, #1
   11c18:	str	r1, [r0, #12]
   11c1c:	pop	{r4, r5, r6, sl, fp, pc}

00011c20 <avl_remove@@Base>:
   11c20:	push	{r4, sl, fp, lr}
   11c24:	add	fp, sp, #8
   11c28:	mov	r4, r0
   11c2c:	mvn	r0, #0
   11c30:	cmp	r4, #0
   11c34:	cmpne	r1, #0
   11c38:	bne	11c40 <avl_remove@@Base+0x20>
   11c3c:	pop	{r4, sl, fp, pc}
   11c40:	ldr	r0, [r4]
   11c44:	bl	1130c <avl_remove_impl@@Base>
   11c48:	str	r0, [r4]
   11c4c:	mov	r0, #0
   11c50:	pop	{r4, sl, fp, pc}

00011c54 <avl_min@@Base>:
   11c54:	cmp	r0, #0
   11c58:	moveq	r0, #0
   11c5c:	bxeq	lr
   11c60:	ldr	r0, [r0]
   11c64:	mov	r1, r0
   11c68:	ldr	r0, [r0, #4]
   11c6c:	cmp	r0, #0
   11c70:	bne	11c64 <avl_min@@Base+0x10>
   11c74:	ldr	r0, [r1]
   11c78:	bx	lr

00011c7c <avl_no_valormin@@Base>:
   11c7c:	mov	r1, r0
   11c80:	ldr	r0, [r0, #4]
   11c84:	cmp	r0, #0
   11c88:	bne	11c7c <avl_no_valormin@@Base>
   11c8c:	mov	r0, r1
   11c90:	bx	lr

00011c94 <avl_max@@Base>:
   11c94:	cmp	r0, #0
   11c98:	moveq	r0, #0
   11c9c:	bxeq	lr
   11ca0:	ldr	r0, [r0]
   11ca4:	mov	r1, r0
   11ca8:	ldr	r0, [r0, #8]
   11cac:	cmp	r0, #0
   11cb0:	bne	11ca4 <avl_max@@Base+0x10>
   11cb4:	ldr	r0, [r1]
   11cb8:	bx	lr

00011cbc <avl_no_valormax@@Base>:
   11cbc:	mov	r1, r0
   11cc0:	ldr	r0, [r0, #8]
   11cc4:	cmp	r0, #0
   11cc8:	bne	11cbc <avl_no_valormax@@Base>
   11ccc:	mov	r0, r1
   11cd0:	bx	lr

00011cd4 <avl_imprime@@Base>:
   11cd4:	cmp	r0, #0
   11cd8:	bxeq	lr
   11cdc:	push	{fp, lr}
   11ce0:	mov	fp, sp
   11ce4:	ldr	r0, [r0]
   11ce8:	bl	11cf8 <avl_preordem_impl@@Base>
   11cec:	mov	r0, #10
   11cf0:	pop	{fp, lr}
   11cf4:	b	10efc <putchar@plt>

00011cf8 <avl_preordem_impl@@Base>:
   11cf8:	push	{r4, r5, fp, lr}
   11cfc:	add	fp, sp, #8
   11d00:	cmp	r0, #0
   11d04:	popeq	{r4, r5, fp, pc}
   11d08:	ldr	r5, [pc, #44]	; 11d3c <avl_preordem_impl@@Base+0x44>
   11d0c:	mov	r4, r0
   11d10:	add	r5, pc, r5
   11d14:	ldr	r1, [r4]
   11d18:	ldr	r2, [r4, #16]
   11d1c:	mov	r0, r5
   11d20:	bl	10e84 <printf@plt>
   11d24:	ldr	r0, [r4, #4]
   11d28:	bl	11cf8 <avl_preordem_impl@@Base>
   11d2c:	ldr	r4, [r4, #8]
   11d30:	cmp	r4, #0
   11d34:	bne	11d14 <avl_preordem_impl@@Base+0x1c>
   11d38:	pop	{r4, r5, fp, pc}
   11d3c:	andeq	r0, r0, sp, asr r7

00011d40 <avl_altura@@Base>:
   11d40:	cmp	r0, #0
   11d44:	ldrne	r0, [r0, #12]
   11d48:	mvneq	r0, #0
   11d4c:	bx	lr

00011d50 <max@@Base>:
   11d50:	cmp	r0, r1
   11d54:	movle	r0, r1
   11d58:	bx	lr

00011d5c <avl_novo_no@@Base>:
   11d5c:	push	{r4, r5, fp, lr}
   11d60:	add	fp, sp, #8
   11d64:	mov	r4, r0
   11d68:	mov	r0, #20
   11d6c:	bl	10ecc <malloc@plt>
   11d70:	mov	r5, r0
   11d74:	mov	r0, r4
   11d78:	bl	10ef0 <strlen@plt>
   11d7c:	add	r0, r0, #1
   11d80:	bl	10ecc <malloc@plt>
   11d84:	mov	r1, r4
   11d88:	str	r0, [r5]
   11d8c:	bl	10eb4 <strcpy@plt>
   11d90:	mov	r1, #0
   11d94:	mov	r0, #1
   11d98:	str	r1, [r5, #4]
   11d9c:	str	r1, [r5, #8]
   11da0:	str	r1, [r5, #12]
   11da4:	str	r0, [r5, #16]
   11da8:	mov	r0, r5
   11dac:	pop	{r4, r5, fp, pc}

00011db0 <roda_direita@@Base>:
   11db0:	mov	r1, r0
   11db4:	ldr	r0, [r0, #4]
   11db8:	mvn	ip, #0
   11dbc:	mvn	r2, #0
   11dc0:	ldr	r3, [r0, #8]
   11dc4:	str	r1, [r0, #8]
   11dc8:	str	r3, [r1, #4]
   11dcc:	cmp	r3, #0
   11dd0:	ldrne	ip, [r3, #12]
   11dd4:	ldr	r3, [r1, #8]
   11dd8:	cmp	r3, #0
   11ddc:	ldrne	r2, [r3, #12]
   11de0:	cmp	ip, r2
   11de4:	movgt	r2, ip
   11de8:	add	r2, r2, #1
   11dec:	str	r2, [r1, #12]
   11df0:	ldr	r1, [r0, #4]
   11df4:	cmp	r1, #0
   11df8:	beq	11e04 <roda_direita@@Base+0x54>
   11dfc:	ldr	r1, [r1, #12]
   11e00:	b	11e08 <roda_direita@@Base+0x58>
   11e04:	mvn	r1, #0
   11e08:	cmp	r1, r2
   11e0c:	movgt	r2, r1
   11e10:	add	r1, r2, #1
   11e14:	str	r1, [r0, #12]
   11e18:	bx	lr

00011e1c <roda_esquerda@@Base>:
   11e1c:	push	{fp, lr}
   11e20:	mov	fp, sp
   11e24:	mov	r1, r0
   11e28:	ldr	r0, [r0, #8]
   11e2c:	mvn	r3, #0
   11e30:	mvn	r2, #0
   11e34:	ldr	ip, [r0, #4]
   11e38:	str	r1, [r0, #4]
   11e3c:	str	ip, [r1, #8]
   11e40:	ldr	lr, [r1, #4]
   11e44:	cmp	lr, #0
   11e48:	ldrne	r3, [lr, #12]
   11e4c:	cmp	ip, #0
   11e50:	ldrne	r2, [ip, #12]
   11e54:	cmp	r3, r2
   11e58:	movgt	r2, r3
   11e5c:	add	r2, r2, #1
   11e60:	str	r2, [r1, #12]
   11e64:	ldr	r1, [r0, #8]
   11e68:	cmp	r1, #0
   11e6c:	beq	11e78 <roda_esquerda@@Base+0x5c>
   11e70:	ldr	r1, [r1, #12]
   11e74:	b	11e7c <roda_esquerda@@Base+0x60>
   11e78:	mvn	r1, #0
   11e7c:	cmp	r2, r1
   11e80:	movgt	r1, r2
   11e84:	add	r1, r1, #1
   11e88:	str	r1, [r0, #12]
   11e8c:	pop	{fp, pc}

00011e90 <calc_balanceamento@@Base>:
   11e90:	cmp	r0, #0
   11e94:	moveq	r0, #0
   11e98:	bxeq	lr
   11e9c:	ldr	r3, [r0, #8]
   11ea0:	ldr	r0, [r0, #4]
   11ea4:	mvn	r2, #0
   11ea8:	mvn	r1, #0
   11eac:	cmp	r3, #0
   11eb0:	ldrne	r2, [r3, #12]
   11eb4:	cmp	r0, #0
   11eb8:	ldrne	r1, [r0, #12]
   11ebc:	sub	r0, r2, r1
   11ec0:	bx	lr

00011ec4 <bst_nova@@Base>:
   11ec4:	push	{fp, lr}
   11ec8:	mov	fp, sp
   11ecc:	mov	r0, #4
   11ed0:	bl	10ecc <malloc@plt>
   11ed4:	cmp	r0, #0
   11ed8:	moveq	r0, #0
   11edc:	movne	r1, #0
   11ee0:	strne	r1, [r0]
   11ee4:	pop	{fp, pc}

00011ee8 <bst_apaga@@Base>:
   11ee8:	push	{r4, sl, fp, lr}
   11eec:	add	fp, sp, #8
   11ef0:	mov	r4, r0
   11ef4:	ldr	r0, [r0]
   11ef8:	cmp	r0, #0
   11efc:	beq	11f14 <bst_apaga@@Base+0x2c>
   11f00:	ldr	r1, [r0]
   11f04:	bl	11f20 <bst_remove_impl@@Base>
   11f08:	str	r0, [r4]
   11f0c:	cmp	r0, #0
   11f10:	bne	11f00 <bst_apaga@@Base+0x18>
   11f14:	mov	r0, r4
   11f18:	pop	{r4, sl, fp, lr}
   11f1c:	b	10e9c <free@plt>

00011f20 <bst_remove_impl@@Base>:
   11f20:	push	{r4, r5, r6, r7, fp, lr}
   11f24:	add	fp, sp, #16
   11f28:	cmp	r0, #0
   11f2c:	beq	11f68 <bst_remove_impl@@Base+0x48>
   11f30:	ldr	r5, [r0]
   11f34:	mov	r4, r0
   11f38:	mov	r6, r1
   11f3c:	mov	r0, r1
   11f40:	mov	r1, r5
   11f44:	bl	10e78 <strcmp@plt>
   11f48:	cmn	r0, #1
   11f4c:	bgt	11f74 <bst_remove_impl@@Base+0x54>
   11f50:	ldr	r0, [r4, #4]
   11f54:	mov	r1, r6
   11f58:	bl	11f20 <bst_remove_impl@@Base>
   11f5c:	str	r0, [r4, #4]
   11f60:	mov	r0, r4
   11f64:	pop	{r4, r5, r6, r7, fp, pc}
   11f68:	mov	r7, #0
   11f6c:	mov	r0, r7
   11f70:	pop	{r4, r5, r6, r7, fp, pc}
   11f74:	cmp	r0, #0
   11f78:	beq	11f94 <bst_remove_impl@@Base+0x74>
   11f7c:	ldr	r0, [r4, #8]
   11f80:	mov	r1, r6
   11f84:	bl	11f20 <bst_remove_impl@@Base>
   11f88:	str	r0, [r4, #8]
   11f8c:	mov	r0, r4
   11f90:	pop	{r4, r5, r6, r7, fp, pc}
   11f94:	ldr	r6, [r4, #4]
   11f98:	ldr	r0, [r4, #8]
   11f9c:	cmp	r6, #0
   11fa0:	beq	11fe8 <bst_remove_impl@@Base+0xc8>
   11fa4:	cmp	r0, #0
   11fa8:	beq	11ff4 <bst_remove_impl@@Base+0xd4>
   11fac:	mov	r6, r0
   11fb0:	ldr	r0, [r0, #4]
   11fb4:	cmp	r0, #0
   11fb8:	bne	11fac <bst_remove_impl@@Base+0x8c>
   11fbc:	ldr	r0, [r6]
   11fc0:	bl	10ef0 <strlen@plt>
   11fc4:	add	r1, r0, #1
   11fc8:	mov	r0, r5
   11fcc:	bl	10ea8 <realloc@plt>
   11fd0:	str	r0, [r4]
   11fd4:	ldr	r1, [r6]
   11fd8:	bl	10eb4 <strcpy@plt>
   11fdc:	ldr	r1, [r6]
   11fe0:	ldr	r0, [r4, #8]
   11fe4:	b	11f84 <bst_remove_impl@@Base+0x64>
   11fe8:	cmp	r0, #0
   11fec:	mov	r6, r0
   11ff0:	beq	12030 <bst_remove_impl@@Base+0x110>
   11ff4:	ldr	r0, [r6]
   11ff8:	bl	10ef0 <strlen@plt>
   11ffc:	add	r1, r0, #1
   12000:	mov	r0, r5
   12004:	bl	10ea8 <realloc@plt>
   12008:	str	r0, [r4]
   1200c:	ldr	r1, [r6]
   12010:	bl	10eb4 <strcpy@plt>
   12014:	ldr	r0, [r6, #4]
   12018:	mov	r7, r4
   1201c:	str	r0, [r4, #4]
   12020:	ldr	r0, [r6, #8]
   12024:	str	r0, [r4, #8]
   12028:	ldr	r5, [r6]
   1202c:	b	12038 <bst_remove_impl@@Base+0x118>
   12030:	mov	r7, #0
   12034:	mov	r6, r4
   12038:	mov	r0, r5
   1203c:	bl	10e9c <free@plt>
   12040:	mov	r0, r6
   12044:	bl	10e9c <free@plt>
   12048:	mov	r0, r7
   1204c:	pop	{r4, r5, r6, r7, fp, pc}

00012050 <bst_pesquisa@@Base>:
   12050:	push	{r4, r5, r6, sl, fp, lr}
   12054:	add	fp, sp, #16
   12058:	cmp	r0, #0
   1205c:	mov	r4, #0
   12060:	movne	r5, r1
   12064:	cmpne	r1, #0
   12068:	beq	120a8 <bst_pesquisa@@Base+0x58>
   1206c:	b	12074 <bst_pesquisa@@Base+0x24>
   12070:	add	r0, r6, #4
   12074:	ldr	r6, [r0]
   12078:	cmp	r6, #0
   1207c:	beq	120a8 <bst_pesquisa@@Base+0x58>
   12080:	ldr	r1, [r6]
   12084:	mov	r0, r5
   12088:	bl	10e78 <strcmp@plt>
   1208c:	cmn	r0, #1
   12090:	ble	12070 <bst_pesquisa@@Base+0x20>
   12094:	cmp	r0, #0
   12098:	beq	120a4 <bst_pesquisa@@Base+0x54>
   1209c:	add	r0, r6, #8
   120a0:	b	12074 <bst_pesquisa@@Base+0x24>
   120a4:	mov	r4, r6
   120a8:	mov	r0, r4
   120ac:	pop	{r4, r5, r6, sl, fp, pc}

000120b0 <bst_pesquisa_impl@@Base>:
   120b0:	push	{r4, r5, r6, sl, fp, lr}
   120b4:	add	fp, sp, #16
   120b8:	mov	r4, #0
   120bc:	cmp	r0, #0
   120c0:	beq	12108 <bst_pesquisa_impl@@Base+0x58>
   120c4:	mov	r5, r1
   120c8:	mov	r6, r0
   120cc:	b	120e0 <bst_pesquisa_impl@@Base+0x30>
   120d0:	add	r0, r6, #4
   120d4:	ldr	r6, [r0]
   120d8:	cmp	r6, #0
   120dc:	beq	12108 <bst_pesquisa_impl@@Base+0x58>
   120e0:	ldr	r1, [r6]
   120e4:	mov	r0, r5
   120e8:	bl	10e78 <strcmp@plt>
   120ec:	cmn	r0, #1
   120f0:	ble	120d0 <bst_pesquisa_impl@@Base+0x20>
   120f4:	cmp	r0, #0
   120f8:	beq	12104 <bst_pesquisa_impl@@Base+0x54>
   120fc:	add	r0, r6, #8
   12100:	b	120d4 <bst_pesquisa_impl@@Base+0x24>
   12104:	mov	r4, r6
   12108:	mov	r0, r4
   1210c:	pop	{r4, r5, r6, sl, fp, pc}

00012110 <bst_insere@@Base>:
   12110:	push	{r4, sl, fp, lr}
   12114:	add	fp, sp, #8
   12118:	mov	r4, r0
   1211c:	mvn	r0, #0
   12120:	cmp	r4, #0
   12124:	cmpne	r1, #0
   12128:	bne	12130 <bst_insere@@Base+0x20>
   1212c:	pop	{r4, sl, fp, pc}
   12130:	ldr	r0, [r4]
   12134:	bl	12144 <bst_insere_impl@@Base>
   12138:	str	r0, [r4]
   1213c:	mov	r0, #0
   12140:	pop	{r4, sl, fp, pc}

00012144 <bst_insere_impl@@Base>:
   12144:	push	{r4, r5, fp, lr}
   12148:	add	fp, sp, #8
   1214c:	mov	r5, r1
   12150:	cmp	r0, #0
   12154:	beq	12188 <bst_insere_impl@@Base+0x44>
   12158:	ldr	r1, [r0]
   1215c:	mov	r4, r0
   12160:	mov	r0, r5
   12164:	bl	10e78 <strcmp@plt>
   12168:	cmn	r0, #1
   1216c:	bgt	121bc <bst_insere_impl@@Base+0x78>
   12170:	ldr	r0, [r4, #4]
   12174:	mov	r1, r5
   12178:	bl	12144 <bst_insere_impl@@Base>
   1217c:	str	r0, [r4, #4]
   12180:	mov	r0, r4
   12184:	pop	{r4, r5, fp, pc}
   12188:	mov	r0, #12
   1218c:	bl	10ecc <malloc@plt>
   12190:	mov	r4, r0
   12194:	mov	r0, r5
   12198:	bl	10ef0 <strlen@plt>
   1219c:	add	r0, r0, #1
   121a0:	bl	10ecc <malloc@plt>
   121a4:	mov	r1, r5
   121a8:	str	r0, [r4]
   121ac:	bl	10eb4 <strcpy@plt>
   121b0:	mov	r0, #0
   121b4:	str	r0, [r4, #4]
   121b8:	b	121d0 <bst_insere_impl@@Base+0x8c>
   121bc:	cmp	r0, #0
   121c0:	beq	121d4 <bst_insere_impl@@Base+0x90>
   121c4:	ldr	r0, [r4, #8]
   121c8:	mov	r1, r5
   121cc:	bl	12144 <bst_insere_impl@@Base>
   121d0:	str	r0, [r4, #8]
   121d4:	mov	r0, r4
   121d8:	pop	{r4, r5, fp, pc}

000121dc <bst_remove@@Base>:
   121dc:	push	{r4, sl, fp, lr}
   121e0:	add	fp, sp, #8
   121e4:	mov	r4, r0
   121e8:	mvn	r0, #0
   121ec:	cmp	r4, #0
   121f0:	cmpne	r1, #0
   121f4:	bne	121fc <bst_remove@@Base+0x20>
   121f8:	pop	{r4, sl, fp, pc}
   121fc:	ldr	r0, [r4]
   12200:	bl	11f20 <bst_remove_impl@@Base>
   12204:	str	r0, [r4]
   12208:	mov	r0, #0
   1220c:	pop	{r4, sl, fp, pc}

00012210 <bst_min@@Base>:
   12210:	cmp	r0, #0
   12214:	moveq	r0, #0
   12218:	bxeq	lr
   1221c:	ldr	r0, [r0]
   12220:	mov	r1, r0
   12224:	ldr	r0, [r0, #4]
   12228:	cmp	r0, #0
   1222c:	bne	12220 <bst_min@@Base+0x10>
   12230:	ldr	r0, [r1]
   12234:	bx	lr

00012238 <bst_no_valormin@@Base>:
   12238:	mov	r1, r0
   1223c:	ldr	r0, [r0, #4]
   12240:	cmp	r0, #0
   12244:	bne	12238 <bst_no_valormin@@Base>
   12248:	mov	r0, r1
   1224c:	bx	lr

00012250 <bst_max@@Base>:
   12250:	cmp	r0, #0
   12254:	moveq	r0, #0
   12258:	bxeq	lr
   1225c:	ldr	r0, [r0]
   12260:	mov	r1, r0
   12264:	ldr	r0, [r0, #8]
   12268:	cmp	r0, #0
   1226c:	bne	12260 <bst_max@@Base+0x10>
   12270:	ldr	r0, [r1]
   12274:	bx	lr

00012278 <bst_no_valormax@@Base>:
   12278:	mov	r1, r0
   1227c:	ldr	r0, [r0, #8]
   12280:	cmp	r0, #0
   12284:	bne	12278 <bst_no_valormax@@Base>
   12288:	mov	r0, r1
   1228c:	bx	lr

00012290 <bst_imprime@@Base>:
   12290:	cmp	r0, #0
   12294:	bxeq	lr
   12298:	push	{r4, sl, fp, lr}
   1229c:	add	fp, sp, #8
   122a0:	mov	r4, r0
   122a4:	ldr	r0, [pc, #24]	; 122c4 <bst_imprime@@Base+0x34>
   122a8:	add	r0, pc, r0
   122ac:	bl	10e84 <printf@plt>
   122b0:	ldr	r0, [r4]
   122b4:	bl	122c8 <bst_preordem_impl@@Base>
   122b8:	mov	r0, #10
   122bc:	pop	{r4, sl, fp, lr}
   122c0:	b	10efc <putchar@plt>
   122c4:	andeq	r0, r0, ip, asr #3

000122c8 <bst_preordem_impl@@Base>:
   122c8:	push	{r4, r5, fp, lr}
   122cc:	add	fp, sp, #8
   122d0:	cmp	r0, #0
   122d4:	popeq	{r4, r5, fp, pc}
   122d8:	ldr	r5, [pc, #40]	; 12308 <bst_preordem_impl@@Base+0x40>
   122dc:	mov	r4, r0
   122e0:	add	r5, pc, r5
   122e4:	ldr	r1, [r4]
   122e8:	mov	r0, r5
   122ec:	bl	10e84 <printf@plt>
   122f0:	ldr	r0, [r4, #4]
   122f4:	bl	122c8 <bst_preordem_impl@@Base>
   122f8:	ldr	r4, [r4, #8]
   122fc:	cmp	r4, #0
   12300:	bne	122e4 <bst_preordem_impl@@Base+0x1c>
   12304:	pop	{r4, r5, fp, pc}
   12308:	muleq	r0, pc, r1	; <UNPREDICTABLE>

0001230c <bst_novo_no@@Base>:
   1230c:	push	{r4, r5, fp, lr}
   12310:	add	fp, sp, #8
   12314:	mov	r4, r0
   12318:	mov	r0, #12
   1231c:	bl	10ecc <malloc@plt>
   12320:	mov	r5, r0
   12324:	mov	r0, r4
   12328:	bl	10ef0 <strlen@plt>
   1232c:	add	r0, r0, #1
   12330:	bl	10ecc <malloc@plt>
   12334:	mov	r1, r4
   12338:	str	r0, [r5]
   1233c:	bl	10eb4 <strcpy@plt>
   12340:	mov	r0, #0
   12344:	str	r0, [r5, #4]
   12348:	str	r0, [r5, #8]
   1234c:	mov	r0, r5
   12350:	pop	{r4, r5, fp, pc}

00012354 <bst_altura@@Base>:
   12354:	push	{r4, r5, fp, lr}
   12358:	add	fp, sp, #8
   1235c:	cmp	r0, #0
   12360:	beq	12398 <bst_altura@@Base+0x44>
   12364:	ldmib	r0, {r1, r4}
   12368:	orrs	r0, r4, r1
   1236c:	mov	r0, #0
   12370:	popeq	{r4, r5, fp, pc}
   12374:	mov	r0, r1
   12378:	bl	12354 <bst_altura@@Base>
   1237c:	mov	r5, r0
   12380:	mov	r0, r4
   12384:	bl	12354 <bst_altura@@Base>
   12388:	cmp	r5, r0
   1238c:	ble	123a0 <bst_altura@@Base+0x4c>
   12390:	add	r0, r5, #1
   12394:	pop	{r4, r5, fp, pc}
   12398:	mvn	r0, #0
   1239c:	pop	{r4, r5, fp, pc}
   123a0:	add	r0, r0, #1
   123a4:	pop	{r4, r5, fp, pc}

000123a8 <__libc_csu_init@@Base>:
   123a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   123ac:	mov	r7, r0
   123b0:	ldr	r6, [pc, #72]	; 12400 <__libc_csu_init@@Base+0x58>
   123b4:	ldr	r5, [pc, #72]	; 12404 <__libc_csu_init@@Base+0x5c>
   123b8:	add	r6, pc, r6
   123bc:	add	r5, pc, r5
   123c0:	sub	r6, r6, r5
   123c4:	mov	r8, r1
   123c8:	mov	r9, r2
   123cc:	bl	10e58 <strcmp@plt-0x20>
   123d0:	asrs	r6, r6, #2
   123d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   123d8:	mov	r4, #0
   123dc:	add	r4, r4, #1
   123e0:	ldr	r3, [r5], #4
   123e4:	mov	r2, r9
   123e8:	mov	r1, r8
   123ec:	mov	r0, r7
   123f0:	blx	r3
   123f4:	cmp	r6, r4
   123f8:	bne	123dc <__libc_csu_init@@Base+0x34>
   123fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12400:	andeq	r0, r1, ip, asr #22
   12404:	andeq	r0, r1, r4, asr #22

00012408 <__libc_csu_fini@@Base>:
   12408:	bx	lr

Disassembly of section .fini:

0001240c <.fini>:
   1240c:	push	{r3, lr}
   12410:	pop	{r3, pc}
