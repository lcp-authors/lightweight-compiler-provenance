
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11194 <__assert_fail@plt+0x48>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <calloc@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <calloc@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	r7, r1, ip, asr #2

00010eb8 <calloc@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <fputs_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <posix_fadvise64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <fflush@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <memmove@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <free@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <ferror@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <fwrite_unlocked@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <dcgettext@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <realloc@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <textdomain@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <iswprint@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <fwrite@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <lseek64@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__ctype_get_mb_cur_max@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fread@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <__fpending@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <mbrtowc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <error@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <malloc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <__libc_start_main@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <__freading@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <__gmon_start__@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <getopt_long@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__ctype_b_loc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <exit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <bcmp@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <strlen@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <ungetc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <__errno_location@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <__cxa_atexit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <memset@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <fgetc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__printf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <fileno@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #28]!

0001108c <__fprintf_chk@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #20]!

00011098 <memchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fclose@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <fseeko64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <__uflow@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <__overflow@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <setlocale@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <strrchr@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <nl_langinfo@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <clearerr_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <fopen64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <qsort@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <bindtextdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <strncmp@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <abort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <strspn@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <__assert_fail@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

Disassembly of section .text:

00011158 <.text>:
   11158:	mov	fp, #0
   1115c:	mov	lr, #0
   11160:	pop	{r1}		; (ldr r1, [sp], #4)
   11164:	mov	r2, sp
   11168:	push	{r2}		; (str r2, [sp, #-4]!)
   1116c:	push	{r0}		; (str r0, [sp, #-4]!)
   11170:	ldr	ip, [pc, #16]	; 11188 <__assert_fail@plt+0x3c>
   11174:	push	{ip}		; (str ip, [sp, #-4]!)
   11178:	ldr	r0, [pc, #12]	; 1118c <__assert_fail@plt+0x40>
   1117c:	ldr	r3, [pc, #12]	; 11190 <__assert_fail@plt+0x44>
   11180:	bl	10fd8 <__libc_start_main@plt>
   11184:	bl	11134 <abort@plt>
   11188:			; <UNDEFINED> instruction: 0x000164b4
   1118c:	andeq	r1, r1, r8, lsl #11
   11190:	andeq	r6, r1, r4, asr r4
   11194:	ldr	r3, [pc, #20]	; 111b0 <__assert_fail@plt+0x64>
   11198:	ldr	r2, [pc, #20]	; 111b4 <__assert_fail@plt+0x68>
   1119c:	add	r3, pc, r3
   111a0:	ldr	r2, [r3, r2]
   111a4:	cmp	r2, #0
   111a8:	bxeq	lr
   111ac:	b	10ff0 <__gmon_start__@plt>
   111b0:	andeq	r6, r1, ip, asr lr
   111b4:	andeq	r0, r0, ip, ror #1
   111b8:	ldr	r0, [pc, #24]	; 111d8 <__assert_fail@plt+0x8c>
   111bc:	ldr	r3, [pc, #24]	; 111dc <__assert_fail@plt+0x90>
   111c0:	cmp	r3, r0
   111c4:	bxeq	lr
   111c8:	ldr	r3, [pc, #16]	; 111e0 <__assert_fail@plt+0x94>
   111cc:	cmp	r3, #0
   111d0:	bxeq	lr
   111d4:	bx	r3
   111d8:	andeq	r8, r2, r0, asr #2
   111dc:	andeq	r8, r2, r0, asr #2
   111e0:	andeq	r0, r0, r0
   111e4:	ldr	r0, [pc, #36]	; 11210 <__assert_fail@plt+0xc4>
   111e8:	ldr	r1, [pc, #36]	; 11214 <__assert_fail@plt+0xc8>
   111ec:	sub	r1, r1, r0
   111f0:	asr	r1, r1, #2
   111f4:	add	r1, r1, r1, lsr #31
   111f8:	asrs	r1, r1, #1
   111fc:	bxeq	lr
   11200:	ldr	r3, [pc, #16]	; 11218 <__assert_fail@plt+0xcc>
   11204:	cmp	r3, #0
   11208:	bxeq	lr
   1120c:	bx	r3
   11210:	andeq	r8, r2, r0, asr #2
   11214:	andeq	r8, r2, r0, asr #2
   11218:	andeq	r0, r0, r0
   1121c:	push	{r4, lr}
   11220:	ldr	r4, [pc, #24]	; 11240 <__assert_fail@plt+0xf4>
   11224:	ldrb	r3, [r4]
   11228:	cmp	r3, #0
   1122c:	popne	{r4, pc}
   11230:	bl	111b8 <__assert_fail@plt+0x6c>
   11234:	mov	r3, #1
   11238:	strb	r3, [r4]
   1123c:	pop	{r4, pc}
   11240:	andeq	r8, r2, r4, ror #2
   11244:	b	111e4 <__assert_fail@plt+0x98>
   11248:	push	{fp, lr}
   1124c:	mov	fp, sp
   11250:	sub	sp, sp, #56	; 0x38
   11254:	mov	r4, r0
   11258:	cmp	r0, #0
   1125c:	bne	11544 <__assert_fail@plt+0x3f8>
   11260:	movw	r1, #25859	; 0x6503
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f48 <dcgettext@plt>
   11274:	mov	r1, r0
   11278:	movw	r0, #33172	; 0x8194
   1127c:	movt	r0, #2
   11280:	ldr	r2, [r0]
   11284:	mov	r0, #1
   11288:	bl	11074 <__printf_chk@plt>
   1128c:	movw	r1, #25890	; 0x6522
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10f48 <dcgettext@plt>
   112a0:	movw	r7, #33116	; 0x815c
   112a4:	movt	r7, #2
   112a8:	ldr	r1, [r7]
   112ac:	bl	10ec4 <fputs_unlocked@plt>
   112b0:	movw	r1, #27690	; 0x6c2a
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10f48 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10ec4 <fputs_unlocked@plt>
   112cc:	movw	r1, #27746	; 0x6c62
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10f48 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10ec4 <fputs_unlocked@plt>
   112e8:	movw	r1, #25956	; 0x6564
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10f48 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10ec4 <fputs_unlocked@plt>
   11304:	movw	r1, #26133	; 0x6615
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10f48 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10ec4 <fputs_unlocked@plt>
   11320:	movw	r1, #26371	; 0x6703
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10f48 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10ec4 <fputs_unlocked@plt>
   1133c:	movw	r1, #26485	; 0x6775
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10f48 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10ec4 <fputs_unlocked@plt>
   11358:	movw	r1, #26695	; 0x6847
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10f48 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10ec4 <fputs_unlocked@plt>
   11374:	movw	r1, #26758	; 0x6886
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	movt	r1, #1
   11384:	bl	10f48 <dcgettext@plt>
   11388:	ldr	r1, [r7]
   1138c:	bl	10ec4 <fputs_unlocked@plt>
   11390:	movw	r1, #26803	; 0x68b3
   11394:	mov	r0, #0
   11398:	mov	r2, #5
   1139c:	movt	r1, #1
   113a0:	bl	10f48 <dcgettext@plt>
   113a4:	ldr	r1, [r7]
   113a8:	bl	10ec4 <fputs_unlocked@plt>
   113ac:	movw	r1, #26857	; 0x68e9
   113b0:	mov	r0, #0
   113b4:	mov	r2, #5
   113b8:	movt	r1, #1
   113bc:	bl	10f48 <dcgettext@plt>
   113c0:	ldr	r1, [r7]
   113c4:	bl	10ec4 <fputs_unlocked@plt>
   113c8:	movw	r1, #27061	; 0x69b5
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	10f48 <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10ec4 <fputs_unlocked@plt>
   113e4:	movw	r0, #28448	; 0x6f20
   113e8:	mov	r2, #48	; 0x30
   113ec:	mov	r6, sp
   113f0:	movw	r5, #27323	; 0x6abb
   113f4:	movt	r0, #1
   113f8:	movt	r5, #1
   113fc:	add	r1, r0, #32
   11400:	add	r3, r0, #16
   11404:	vld1.64	{d18-d19}, [r0], r2
   11408:	vld1.64	{d16-d17}, [r1]
   1140c:	vld1.64	{d20-d21}, [r3]
   11410:	vldr	d22, [r0]
   11414:	add	r1, r6, #32
   11418:	add	r0, r6, #16
   1141c:	vst1.64	{d16-d17}, [r1]
   11420:	movw	r1, #27821	; 0x6cad
   11424:	vst1.64	{d20-d21}, [r0]
   11428:	mov	r0, r6
   1142c:	movt	r1, #1
   11430:	vst1.64	{d18-d19}, [r0], r2
   11434:	vstr	d22, [r0]
   11438:	mov	r0, r5
   1143c:	bl	10ed0 <strcmp@plt>
   11440:	cmp	r0, #0
   11444:	ldrne	r1, [r6, #8]!
   11448:	cmpne	r1, #0
   1144c:	bne	11438 <__assert_fail@plt+0x2ec>
   11450:	movw	r1, #27916	; 0x6d0c
   11454:	ldr	r6, [r6, #4]
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	movt	r1, #1
   11464:	bl	10f48 <dcgettext@plt>
   11468:	movw	r2, #27435	; 0x6b2b
   1146c:	movw	r3, #27939	; 0x6d23
   11470:	mov	r1, r0
   11474:	mov	r0, #1
   11478:	movt	r2, #1
   1147c:	movt	r3, #1
   11480:	bl	11074 <__printf_chk@plt>
   11484:	cmp	r6, #0
   11488:	mov	r0, #5
   1148c:	mov	r1, #0
   11490:	moveq	r6, r5
   11494:	bl	110d4 <setlocale@plt>
   11498:	cmp	r0, #0
   1149c:	beq	114d4 <__assert_fail@plt+0x388>
   114a0:	movw	r1, #27979	; 0x6d4b
   114a4:	mov	r2, #3
   114a8:	movt	r1, #1
   114ac:	bl	11128 <strncmp@plt>
   114b0:	cmp	r0, #0
   114b4:	beq	114d4 <__assert_fail@plt+0x388>
   114b8:	movw	r1, #27983	; 0x6d4f
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	10f48 <dcgettext@plt>
   114cc:	ldr	r1, [r7]
   114d0:	bl	10ec4 <fputs_unlocked@plt>
   114d4:	movw	r1, #28054	; 0x6d96
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	movt	r1, #1
   114e4:	bl	10f48 <dcgettext@plt>
   114e8:	movw	r2, #27939	; 0x6d23
   114ec:	mov	r1, r0
   114f0:	mov	r0, #1
   114f4:	mov	r3, r5
   114f8:	movt	r2, #1
   114fc:	bl	11074 <__printf_chk@plt>
   11500:	movw	r1, #28081	; 0x6db1
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	10f48 <dcgettext@plt>
   11514:	mov	r1, r0
   11518:	movw	r0, #27849	; 0x6cc9
   1151c:	movw	r3, #28131	; 0x6de3
   11520:	cmp	r6, r5
   11524:	mov	r2, r6
   11528:	movt	r0, #1
   1152c:	movt	r3, #1
   11530:	moveq	r3, r0
   11534:	mov	r0, #1
   11538:	bl	11074 <__printf_chk@plt>
   1153c:	mov	r0, r4
   11540:	bl	11014 <exit@plt>
   11544:	movw	r0, #33104	; 0x8150
   11548:	movw	r1, #25820	; 0x64dc
   1154c:	mov	r2, #5
   11550:	movt	r0, #2
   11554:	movt	r1, #1
   11558:	ldr	r5, [r0]
   1155c:	mov	r0, #0
   11560:	bl	10f48 <dcgettext@plt>
   11564:	mov	r2, r0
   11568:	movw	r0, #33172	; 0x8194
   1156c:	mov	r1, #1
   11570:	movt	r0, #2
   11574:	ldr	r3, [r0]
   11578:	mov	r0, r5
   1157c:	bl	1108c <__fprintf_chk@plt>
   11580:	mov	r0, r4
   11584:	bl	11014 <exit@plt>
   11588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1158c:	add	fp, sp, #28
   11590:	sub	sp, sp, #20
   11594:	mov	r5, r0
   11598:	ldr	r0, [r1]
   1159c:	mov	r8, r1
   115a0:	bl	13338 <__assert_fail@plt+0x21ec>
   115a4:	movw	r1, #28131	; 0x6de3
   115a8:	mov	r0, #6
   115ac:	movt	r1, #1
   115b0:	bl	110d4 <setlocale@plt>
   115b4:	movw	r6, #27439	; 0x6b2f
   115b8:	movw	r1, #27327	; 0x6abf
   115bc:	movt	r6, #1
   115c0:	movt	r1, #1
   115c4:	mov	r0, r6
   115c8:	bl	1111c <bindtextdomain@plt>
   115cc:	mov	r0, r6
   115d0:	bl	10f60 <textdomain@plt>
   115d4:	movw	r0, #10932	; 0x2ab4
   115d8:	movt	r0, #1
   115dc:	bl	164b8 <__assert_fail@plt+0x536c>
   115e0:	movw	sl, #33128	; 0x8168
   115e4:	movw	r7, #27351	; 0x6ad7
   115e8:	movw	r3, #28272	; 0x6e70
   115ec:	mov	r2, #0
   115f0:	mov	r4, #0
   115f4:	mov	r9, #0
   115f8:	mov	r6, #0
   115fc:	movt	sl, #2
   11600:	movt	r7, #1
   11604:	movt	r3, #1
   11608:	strb	r2, [sl, #2]
   1160c:	strh	r2, [sl]
   11610:	str	r2, [sp]
   11614:	mov	r0, r5
   11618:	mov	r1, r8
   1161c:	mov	r2, r7
   11620:	bl	10ffc <getopt_long@plt>
   11624:	cmp	r0, #97	; 0x61
   11628:	ble	117a0 <__assert_fail@plt+0x654>
   1162c:	sub	r1, r0, #98	; 0x62
   11630:	cmp	r1, #24
   11634:	bhi	116d4 <__assert_fail@plt+0x588>
   11638:	movw	r7, #27351	; 0x6ad7
   1163c:	movw	r3, #28272	; 0x6e70
   11640:	add	r0, pc, #12
   11644:	mov	r2, #0
   11648:	movt	r7, #1
   1164c:	movt	r3, #1
   11650:	ldr	pc, [r0, r1, lsl #2]
   11654:			; <UNDEFINED> instruction: 0x000116b8
   11658:			; <UNDEFINED> instruction: 0x000116b8
   1165c:	andeq	r1, r1, ip, lsr r7
   11660:	andeq	r1, r1, r8, lsl #19
   11664:			; <UNDEFINED> instruction: 0x000116bc
   11668:	andeq	r1, r1, r8, lsl #19
   1166c:	andeq	r1, r1, r8, lsl #19
   11670:	andeq	r1, r1, r8, lsl #19
   11674:	andeq	r1, r1, r8, lsl #19
   11678:	andeq	r1, r1, r8, lsl #19
   1167c:	andeq	r1, r1, r8, lsl #19
   11680:	andeq	r1, r1, r8, lsl #19
   11684:	andeq	r1, r1, r0, lsl r6
   11688:	andeq	r1, r1, r8, lsl #19
   1168c:	andeq	r1, r1, r8, lsl #19
   11690:	andeq	r1, r1, r8, lsl #19
   11694:	andeq	r1, r1, r8, lsl #19
   11698:	andeq	r1, r1, ip, ror #14
   1169c:	andeq	r1, r1, r8, lsl #19
   116a0:	andeq	r1, r1, r8, lsl #19
   116a4:	andeq	r1, r1, r8, lsl #19
   116a8:	andeq	r1, r1, r8, lsl #19
   116ac:	andeq	r1, r1, r8, lsl #19
   116b0:	andeq	r1, r1, r8, lsl #19
   116b4:	andeq	r1, r1, r0, lsr r7
   116b8:	mov	r9, #1
   116bc:	cmp	r6, #0
   116c0:	bne	11964 <__assert_fail@plt+0x818>
   116c4:	movw	r0, #33120	; 0x8160
   116c8:	movt	r0, #2
   116cc:	ldr	r6, [r0]
   116d0:	b	11610 <__assert_fail@plt+0x4c4>
   116d4:	movw	r7, #27351	; 0x6ad7
   116d8:	movw	r3, #28272	; 0x6e70
   116dc:	cmp	r0, #256	; 0x100
   116e0:	mov	r2, #0
   116e4:	movt	r7, #1
   116e8:	movt	r3, #1
   116ec:	bne	11778 <__assert_fail@plt+0x62c>
   116f0:	movw	r0, #33120	; 0x8160
   116f4:	movt	r0, #2
   116f8:	ldr	r1, [r0]
   116fc:	ldrb	r0, [r1]
   11700:	cmp	r0, #0
   11704:	beq	11790 <__assert_fail@plt+0x644>
   11708:	mov	r0, r1
   1170c:	mov	r7, r1
   11710:	bl	1102c <strlen@plt>
   11714:	movw	r3, #28272	; 0x6e70
   11718:	mov	r1, r7
   1171c:	movw	r7, #27351	; 0x6ad7
   11720:	mov	r2, #0
   11724:	movt	r3, #1
   11728:	movt	r7, #1
   1172c:	b	11794 <__assert_fail@plt+0x648>
   11730:	mov	r0, #1
   11734:	strb	r0, [sl, #3]
   11738:	b	11610 <__assert_fail@plt+0x4c4>
   1173c:	movw	r0, #33120	; 0x8160
   11740:	movt	r0, #2
   11744:	ldr	r1, [r0]
   11748:	ldrb	r0, [r1]
   1174c:	cmp	r0, #0
   11750:	beq	11760 <__assert_fail@plt+0x614>
   11754:	ldrb	r1, [r1, #1]
   11758:	cmp	r1, #0
   1175c:	bne	11970 <__assert_fail@plt+0x824>
   11760:	strb	r0, [sl, #1]
   11764:	mov	r4, #1
   11768:	b	11610 <__assert_fail@plt+0x4c4>
   1176c:	mov	r0, #1
   11770:	strb	r0, [sl]
   11774:	b	11610 <__assert_fail@plt+0x4c4>
   11778:	movw	r1, #257	; 0x101
   1177c:	cmp	r0, r1
   11780:	bne	11988 <__assert_fail@plt+0x83c>
   11784:	mov	r0, #1
   11788:	strb	r0, [sl, #4]
   1178c:	b	11610 <__assert_fail@plt+0x4c4>
   11790:	mov	r0, #1
   11794:	str	r0, [sl, #8]
   11798:	str	r1, [sl, #12]
   1179c:	b	11610 <__assert_fail@plt+0x4c4>
   117a0:	cmn	r0, #1
   117a4:	bne	118f0 <__assert_fail@plt+0x7a4>
   117a8:	cmp	r6, #0
   117ac:	beq	1197c <__assert_fail@plt+0x830>
   117b0:	tst	r9, #1
   117b4:	beq	117cc <__assert_fail@plt+0x680>
   117b8:	tst	r4, #1
   117bc:	bne	11990 <__assert_fail@plt+0x844>
   117c0:	ldrb	r0, [sl]
   117c4:	cmp	r0, #1
   117c8:	beq	1199c <__assert_fail@plt+0x850>
   117cc:	ldrb	r0, [sl, #4]
   117d0:	ands	r1, r9, #1
   117d4:	movwne	r1, #4
   117d8:	bfi	r1, r0, #1, #1
   117dc:	mov	r0, r6
   117e0:	bl	1226c <__assert_fail@plt+0x1120>
   117e4:	tst	r4, #1
   117e8:	moveq	r0, #9
   117ec:	strbeq	r0, [sl, #1]
   117f0:	ldr	r0, [sl, #12]
   117f4:	cmp	r0, #0
   117f8:	bne	11818 <__assert_fail@plt+0x6cc>
   117fc:	movw	r0, #33480	; 0x82c8
   11800:	mov	r1, #1
   11804:	movt	r0, #2
   11808:	str	r1, [sl, #8]
   1180c:	str	r0, [sl, #12]
   11810:	ldrb	r1, [sl, #1]
   11814:	strb	r1, [r0]
   11818:	movw	r4, #33096	; 0x8148
   1181c:	movw	r0, #6600	; 0x19c8
   11820:	movw	r7, #7104	; 0x1bc0
   11824:	tst	r9, #1
   11828:	movt	r4, #2
   1182c:	movt	r0, #1
   11830:	movt	r7, #1
   11834:	ldr	r1, [r4]
   11838:	movne	r7, r0
   1183c:	cmp	r1, r5
   11840:	bne	11868 <__assert_fail@plt+0x71c>
   11844:	movw	r0, #28660	; 0x6ff4
   11848:	mov	r1, r7
   1184c:	movt	r0, #1
   11850:	bl	12158 <__assert_fail@plt+0x100c>
   11854:	mov	r6, r0
   11858:	ldrb	r0, [sl, #2]
   1185c:	cmp	r0, #1
   11860:	beq	118a4 <__assert_fail@plt+0x758>
   11864:	b	118bc <__assert_fail@plt+0x770>
   11868:	mov	r6, #1
   1186c:	bge	11898 <__assert_fail@plt+0x74c>
   11870:	mov	r6, #1
   11874:	ldr	r0, [r8, r1, lsl #2]
   11878:	mov	r1, r7
   1187c:	bl	12158 <__assert_fail@plt+0x100c>
   11880:	ldr	r1, [r4]
   11884:	and	r6, r6, r0
   11888:	add	r1, r1, #1
   1188c:	cmp	r1, r5
   11890:	str	r1, [r4]
   11894:	blt	11874 <__assert_fail@plt+0x728>
   11898:	ldrb	r0, [sl, #2]
   1189c:	cmp	r0, #1
   118a0:	bne	118bc <__assert_fail@plt+0x770>
   118a4:	movw	r0, #33112	; 0x8158
   118a8:	movt	r0, #2
   118ac:	ldr	r0, [r0]
   118b0:	bl	12be0 <__assert_fail@plt+0x1a94>
   118b4:	cmn	r0, #1
   118b8:	beq	118c8 <__assert_fail@plt+0x77c>
   118bc:	eor	r0, r6, #1
   118c0:	sub	sp, fp, #28
   118c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118c8:	bl	11044 <__errno_location@plt>
   118cc:	ldr	r1, [r0]
   118d0:	movw	r2, #28660	; 0x6ff4
   118d4:	mov	r0, #0
   118d8:	mov	r6, #0
   118dc:	movt	r2, #1
   118e0:	bl	10fc0 <error@plt>
   118e4:	eor	r0, r6, #1
   118e8:	sub	sp, fp, #28
   118ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118f0:	cmn	r0, #3
   118f4:	bne	11954 <__assert_fail@plt+0x808>
   118f8:	movw	r0, #33016	; 0x80f8
   118fc:	movw	r2, #27480	; 0x6b58
   11900:	movw	r6, #27449	; 0x6b39
   11904:	movw	r7, #27464	; 0x6b48
   11908:	mov	r1, #0
   1190c:	movt	r0, #2
   11910:	movt	r2, #1
   11914:	movt	r6, #1
   11918:	movt	r7, #1
   1191c:	ldr	r3, [r0]
   11920:	movw	r0, #33116	; 0x815c
   11924:	stm	sp, {r6, r7}
   11928:	str	r2, [sp, #8]
   1192c:	movw	r2, #27435	; 0x6b2b
   11930:	str	r1, [sp, #12]
   11934:	movw	r1, #27323	; 0x6abb
   11938:	movt	r0, #2
   1193c:	movt	r1, #1
   11940:	movt	r2, #1
   11944:	ldr	r0, [r0]
   11948:	bl	157a0 <__assert_fail@plt+0x4654>
   1194c:	mov	r0, #0
   11950:	bl	11014 <exit@plt>
   11954:	cmn	r0, #2
   11958:	bne	11988 <__assert_fail@plt+0x83c>
   1195c:	mov	r0, #0
   11960:	bl	11248 <__assert_fail@plt+0xfc>
   11964:	movw	r1, #27363	; 0x6ae3
   11968:	movt	r1, #1
   1196c:	b	119a4 <__assert_fail@plt+0x858>
   11970:	movw	r1, #27394	; 0x6b02
   11974:	movt	r1, #1
   11978:	b	119a4 <__assert_fail@plt+0x858>
   1197c:	movw	r1, #27493	; 0x6b65
   11980:	movt	r1, #1
   11984:	b	119a4 <__assert_fail@plt+0x858>
   11988:	mov	r0, #1
   1198c:	bl	11248 <__assert_fail@plt+0xfc>
   11990:	movw	r1, #27549	; 0x6b9d
   11994:	movt	r1, #1
   11998:	b	119a4 <__assert_fail@plt+0x858>
   1199c:	movw	r1, #27615	; 0x6bdf
   119a0:	movt	r1, #1
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	bl	10f48 <dcgettext@plt>
   119b0:	mov	r2, r0
   119b4:	mov	r0, #0
   119b8:	mov	r1, #0
   119bc:	bl	10fc0 <error@plt>
   119c0:	mov	r0, #1
   119c4:	bl	11248 <__assert_fail@plt+0xfc>
   119c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119cc:	add	fp, sp, #28
   119d0:	sub	sp, sp, #4
   119d4:	mov	r4, r0
   119d8:	movw	r0, #33484	; 0x82cc
   119dc:	movw	r6, #33128	; 0x8168
   119e0:	movw	lr, #33116	; 0x815c
   119e4:	mov	r7, #0
   119e8:	movt	r0, #2
   119ec:	movt	r6, #2
   119f0:	movt	lr, #2
   119f4:	ldr	r0, [r0]
   119f8:	str	r0, [r6, #16]
   119fc:	mov	r8, #0
   11a00:	mov	r9, #0
   11a04:	ldmib	r4, {r0, r1}
   11a08:	cmp	r0, r1
   11a0c:	bcs	11afc <__assert_fail@plt+0x9b0>
   11a10:	add	r1, r0, #1
   11a14:	str	r1, [r4, #4]
   11a18:	ldrb	r5, [r0]
   11a1c:	ldrb	r0, [r6, #3]
   11a20:	mov	r1, #10
   11a24:	cmp	r0, #0
   11a28:	movwne	r1, #0
   11a2c:	cmp	r5, r1
   11a30:	beq	11b38 <__assert_fail@plt+0x9ec>
   11a34:	cmn	r5, #1
   11a38:	beq	11b84 <__assert_fail@plt+0xa38>
   11a3c:	ldr	r0, [r6, #16]
   11a40:	adds	r7, r7, #1
   11a44:	adc	r8, r8, #0
   11a48:	ldrd	r2, [r0, #8]
   11a4c:	subs	r1, r2, r7
   11a50:	sbcs	r1, r3, r8
   11a54:	addcc	r0, r0, #16
   11a58:	strcc	r0, [r6, #16]
   11a5c:	ldr	r2, [r0]
   11a60:	ldr	r1, [r0, #4]
   11a64:	subs	r0, r7, r2
   11a68:	sbcs	r0, r8, r1
   11a6c:	bcc	11a04 <__assert_fail@plt+0x8b8>
   11a70:	ldr	r0, [r6, #12]
   11a74:	movw	ip, #33480	; 0x82c8
   11a78:	movt	ip, #2
   11a7c:	subs	r3, r0, ip
   11a80:	movwne	r3, #1
   11a84:	cmp	r0, ip
   11a88:	orr	sl, r9, r3
   11a8c:	beq	11acc <__assert_fail@plt+0x980>
   11a90:	eor	r3, r9, #1
   11a94:	tst	r3, #1
   11a98:	bne	11acc <__assert_fail@plt+0x980>
   11a9c:	eor	r2, r2, r7
   11aa0:	eor	r1, r1, r8
   11aa4:	mov	sl, #1
   11aa8:	orrs	r1, r2, r1
   11aac:	bne	11acc <__assert_fail@plt+0x980>
   11ab0:	ldr	r3, [lr]
   11ab4:	ldr	r2, [r6, #8]
   11ab8:	mov	r1, #1
   11abc:	mov	sl, #1
   11ac0:	mov	r9, lr
   11ac4:	bl	10f3c <fwrite_unlocked@plt>
   11ac8:	mov	lr, r9
   11acc:	ldr	r0, [lr]
   11ad0:	ldr	r1, [r0, #20]
   11ad4:	ldr	r2, [r0, #24]
   11ad8:	cmp	r1, r2
   11adc:	bcs	11b14 <__assert_fail@plt+0x9c8>
   11ae0:	add	r2, r1, #1
   11ae4:	mov	r9, sl
   11ae8:	str	r2, [r0, #20]
   11aec:	strb	r5, [r1]
   11af0:	ldmib	r4, {r0, r1}
   11af4:	cmp	r0, r1
   11af8:	bcc	11a10 <__assert_fail@plt+0x8c4>
   11afc:	mov	r0, r4
   11b00:	mov	r5, lr
   11b04:	bl	110bc <__uflow@plt>
   11b08:	mov	lr, r5
   11b0c:	mov	r5, r0
   11b10:	b	11a1c <__assert_fail@plt+0x8d0>
   11b14:	uxtb	r1, r5
   11b18:	mov	r5, lr
   11b1c:	bl	110c8 <__overflow@plt>
   11b20:	mov	lr, r5
   11b24:	mov	r9, sl
   11b28:	ldmib	r4, {r0, r1}
   11b2c:	cmp	r0, r1
   11b30:	bcc	11a10 <__assert_fail@plt+0x8c4>
   11b34:	b	11afc <__assert_fail@plt+0x9b0>
   11b38:	ldr	r0, [lr]
   11b3c:	ldr	r1, [r0, #20]
   11b40:	ldr	r2, [r0, #24]
   11b44:	cmp	r1, r2
   11b48:	bcs	11b70 <__assert_fail@plt+0xa24>
   11b4c:	add	r2, r1, #1
   11b50:	str	r2, [r0, #20]
   11b54:	strb	r5, [r1]
   11b58:	movw	r0, #33484	; 0x82cc
   11b5c:	mov	r7, #0
   11b60:	movt	r0, #2
   11b64:	ldr	r0, [r0]
   11b68:	str	r0, [r6, #16]
   11b6c:	b	119fc <__assert_fail@plt+0x8b0>
   11b70:	uxtb	r1, r5
   11b74:	mov	r7, lr
   11b78:	bl	110c8 <__overflow@plt>
   11b7c:	mov	lr, r7
   11b80:	b	11b58 <__assert_fail@plt+0xa0c>
   11b84:	orrs	r0, r7, r8
   11b88:	beq	11bac <__assert_fail@plt+0xa60>
   11b8c:	ldr	r0, [lr]
   11b90:	ldr	r2, [r0, #20]
   11b94:	ldr	r3, [r0, #24]
   11b98:	cmp	r2, r3
   11b9c:	bcs	11bb4 <__assert_fail@plt+0xa68>
   11ba0:	add	r3, r2, #1
   11ba4:	str	r3, [r0, #20]
   11ba8:	strb	r1, [r2]
   11bac:	sub	sp, fp, #28
   11bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb4:	sub	sp, fp, #28
   11bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bbc:	b	110c8 <__overflow@plt>
   11bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc4:	add	fp, sp, #28
   11bc8:	sub	sp, sp, #20
   11bcc:	mov	r4, r0
   11bd0:	movw	r0, #33484	; 0x82cc
   11bd4:	movw	r8, #33128	; 0x8168
   11bd8:	movt	r0, #2
   11bdc:	movt	r8, #2
   11be0:	ldr	r0, [r0]
   11be4:	str	r0, [r8, #16]
   11be8:	ldmib	r4, {r0, r1}
   11bec:	cmp	r0, r1
   11bf0:	bcs	12120 <__assert_fail@plt+0xfd4>
   11bf4:	add	r1, r0, #1
   11bf8:	str	r1, [r4, #4]
   11bfc:	ldrb	r0, [r0]
   11c00:	mov	r1, r4
   11c04:	bl	11038 <ungetc@plt>
   11c08:	ldr	r0, [r8, #16]
   11c0c:	movw	r9, #33116	; 0x815c
   11c10:	mov	ip, #0
   11c14:	mov	lr, #1
   11c18:	mov	sl, #0
   11c1c:	mov	r5, #0
   11c20:	movt	r9, #2
   11c24:	ldrd	r0, [r0]
   11c28:	subs	r0, r0, #2
   11c2c:	sbcs	r0, r1, #0
   11c30:	ldrb	r1, [r8]
   11c34:	mov	r0, #0
   11c38:	movwcc	r0, #1
   11c3c:	eor	r0, r1, r0
   11c40:	str	r0, [sp, #16]
   11c44:	b	11c68 <__assert_fail@plt+0xb1c>
   11c48:	ldr	r0, [r8, #16]
   11c4c:	adds	lr, lr, #1
   11c50:	adc	ip, ip, #0
   11c54:	ldrd	r2, [r0, #8]
   11c58:	subs	r1, r2, lr
   11c5c:	sbcs	r1, r3, ip
   11c60:	addcc	r0, r0, #16
   11c64:	strcc	r0, [r8, #16]
   11c68:	ldr	r1, [sp, #16]
   11c6c:	eor	r0, lr, #1
   11c70:	orrs	r0, r0, ip
   11c74:	movwne	r0, #1
   11c78:	orr	r0, r1, r0
   11c7c:	tst	r0, #1
   11c80:	beq	11d0c <__assert_fail@plt+0xbc0>
   11c84:	ldr	r0, [r8, #16]
   11c88:	ldrd	r0, [r0]
   11c8c:	subs	r0, lr, r0
   11c90:	sbcs	r0, ip, r1
   11c94:	bcs	11e84 <__assert_fail@plt+0xd38>
   11c98:	ldmib	r4, {r0, r1}
   11c9c:	mov	r7, r5
   11ca0:	cmp	r0, r1
   11ca4:	bcs	11ce0 <__assert_fail@plt+0xb94>
   11ca8:	add	r1, r0, #1
   11cac:	str	r1, [r4, #4]
   11cb0:	ldrb	r5, [r0]
   11cb4:	ldrb	r0, [r8, #1]
   11cb8:	cmp	r5, r0
   11cbc:	beq	11f74 <__assert_fail@plt+0xe28>
   11cc0:	ldrb	r1, [r8, #3]
   11cc4:	cmp	r1, #0
   11cc8:	mov	r1, #10
   11ccc:	movwne	r1, #0
   11cd0:	cmn	r5, #1
   11cd4:	cmpne	r5, r1
   11cd8:	bne	11c98 <__assert_fail@plt+0xb4c>
   11cdc:	b	11f74 <__assert_fail@plt+0xe28>
   11ce0:	mov	r0, r4
   11ce4:	mov	r5, ip
   11ce8:	mov	r6, lr
   11cec:	bl	110bc <__uflow@plt>
   11cf0:	mov	ip, r5
   11cf4:	mov	lr, r6
   11cf8:	mov	r5, r0
   11cfc:	ldrb	r0, [r8, #1]
   11d00:	cmp	r5, r0
   11d04:	bne	11cc0 <__assert_fail@plt+0xb74>
   11d08:	b	11f74 <__assert_fail@plt+0xe28>
   11d0c:	ldrb	r1, [r8, #3]
   11d10:	ldrb	r0, [r8, #1]
   11d14:	add	r5, r8, #20
   11d18:	add	r6, r8, #24
   11d1c:	cmp	r1, #0
   11d20:	mov	r1, #10
   11d24:	movwne	r1, #0
   11d28:	stm	sp, {r0, r1, r4}
   11d2c:	b	11d54 <__assert_fail@plt+0xc08>
   11d30:	add	r3, r2, #1
   11d34:	str	r3, [r0, #20]
   11d38:	strb	r1, [r2]
   11d3c:	ldrb	r1, [r8, #3]
   11d40:	ldrb	r0, [r8, #1]
   11d44:	cmp	r1, #0
   11d48:	mov	r1, #10
   11d4c:	movwne	r1, #0
   11d50:	stm	sp, {r0, r1, r4}
   11d54:	mov	r0, r5
   11d58:	mov	r1, r6
   11d5c:	mov	r2, #0
   11d60:	mvn	r3, #0
   11d64:	bl	12da8 <__assert_fail@plt+0x1c5c>
   11d68:	mov	r2, r0
   11d6c:	cmp	r0, #0
   11d70:	bmi	120fc <__assert_fail@plt+0xfb0>
   11d74:	cmp	r2, #0
   11d78:	beq	12134 <__assert_fail@plt+0xfe8>
   11d7c:	ldr	r0, [r8, #20]
   11d80:	sub	r7, r2, #1
   11d84:	ldrb	r3, [r8, #1]
   11d88:	ldrb	r1, [r0, r7]
   11d8c:	cmp	r1, r3
   11d90:	beq	11de8 <__assert_fail@plt+0xc9c>
   11d94:	ldrb	r1, [r8]
   11d98:	cmp	r1, #0
   11d9c:	bne	11d3c <__assert_fail@plt+0xbf0>
   11da0:	ldr	r3, [r9]
   11da4:	mov	r1, #1
   11da8:	bl	10f3c <fwrite_unlocked@plt>
   11dac:	ldr	r0, [r8, #20]
   11db0:	ldrb	r1, [r8, #3]
   11db4:	ldrb	r0, [r0, r7]
   11db8:	cmp	r1, #0
   11dbc:	mov	r1, #10
   11dc0:	movwne	r1, #0
   11dc4:	cmp	r1, r0
   11dc8:	beq	11d3c <__assert_fail@plt+0xbf0>
   11dcc:	ldr	r0, [r9]
   11dd0:	ldr	r2, [r0, #20]
   11dd4:	ldr	r3, [r0, #24]
   11dd8:	cmp	r2, r3
   11ddc:	bcc	11d30 <__assert_fail@plt+0xbe4>
   11de0:	bl	110c8 <__overflow@plt>
   11de4:	b	11d3c <__assert_fail@plt+0xbf0>
   11de8:	ldr	r1, [r8, #16]
   11dec:	ldrd	r2, [r1]
   11df0:	rsbs	r1, r2, #1
   11df4:	rscs	r1, r3, #0
   11df8:	bcc	11e4c <__assert_fail@plt+0xd00>
   11dfc:	ldr	r3, [r9]
   11e00:	mov	r1, #1
   11e04:	mov	r2, r7
   11e08:	bl	10f3c <fwrite_unlocked@plt>
   11e0c:	ldrb	r1, [r8, #3]
   11e10:	ldrb	r0, [r8, #1]
   11e14:	cmp	r1, #0
   11e18:	mov	r1, #10
   11e1c:	movwne	r1, #0
   11e20:	cmp	r1, r0
   11e24:	bne	11e48 <__assert_fail@plt+0xcfc>
   11e28:	ldmib	r4, {r0, r1}
   11e2c:	cmp	r0, r1
   11e30:	bcs	120e8 <__assert_fail@plt+0xf9c>
   11e34:	add	r1, r0, #1
   11e38:	str	r1, [r4, #4]
   11e3c:	ldrb	r0, [r0]
   11e40:	mov	r1, r4
   11e44:	bl	11038 <ungetc@plt>
   11e48:	mov	sl, #1
   11e4c:	ldr	r0, [r8, #16]
   11e50:	mov	ip, #0
   11e54:	mov	lr, #2
   11e58:	mov	r5, #0
   11e5c:	ldrd	r2, [r0, #8]
   11e60:	rsbs	r1, r2, #1
   11e64:	rscs	r1, r3, #0
   11e68:	addcs	r0, r0, #16
   11e6c:	movcs	ip, #0
   11e70:	strcs	r0, [r8, #16]
   11e74:	ldrd	r0, [r0]
   11e78:	subs	r0, lr, r0
   11e7c:	sbcs	r0, ip, r1
   11e80:	bcc	11c98 <__assert_fail@plt+0xb4c>
   11e84:	tst	sl, #1
   11e88:	beq	11f28 <__assert_fail@plt+0xddc>
   11e8c:	ldr	r3, [r9]
   11e90:	ldr	r2, [r8, #8]
   11e94:	ldr	r0, [r8, #12]
   11e98:	mov	r1, #1
   11e9c:	mov	r6, ip
   11ea0:	mov	r7, lr
   11ea4:	bl	10f3c <fwrite_unlocked@plt>
   11ea8:	mov	lr, r7
   11eac:	mov	ip, r6
   11eb0:	b	11f28 <__assert_fail@plt+0xddc>
   11eb4:	ldr	r0, [r9]
   11eb8:	ldr	r1, [r0, #20]
   11ebc:	ldr	r2, [r0, #24]
   11ec0:	cmp	r1, r2
   11ec4:	bcs	11f0c <__assert_fail@plt+0xdc0>
   11ec8:	add	r2, r1, #1
   11ecc:	mov	r5, r6
   11ed0:	str	r2, [r0, #20]
   11ed4:	strb	r6, [r1]
   11ed8:	b	11f28 <__assert_fail@plt+0xddc>
   11edc:	mov	r0, r4
   11ee0:	mov	r6, ip
   11ee4:	mov	r7, lr
   11ee8:	bl	110bc <__uflow@plt>
   11eec:	mov	ip, r6
   11ef0:	mov	lr, r7
   11ef4:	mov	r6, r0
   11ef8:	ldrb	r0, [r8, #1]
   11efc:	mov	sl, #1
   11f00:	cmp	r6, r0
   11f04:	bne	11f50 <__assert_fail@plt+0xe04>
   11f08:	b	11f6c <__assert_fail@plt+0xe20>
   11f0c:	uxtb	r1, r6
   11f10:	mov	r5, ip
   11f14:	mov	r7, lr
   11f18:	bl	110c8 <__overflow@plt>
   11f1c:	mov	ip, r5
   11f20:	mov	lr, r7
   11f24:	mov	r5, r6
   11f28:	ldmib	r4, {r0, r1}
   11f2c:	cmp	r0, r1
   11f30:	bcs	11edc <__assert_fail@plt+0xd90>
   11f34:	add	r1, r0, #1
   11f38:	str	r1, [r4, #4]
   11f3c:	ldrb	r6, [r0]
   11f40:	ldrb	r0, [r8, #1]
   11f44:	mov	sl, #1
   11f48:	cmp	r6, r0
   11f4c:	beq	11f6c <__assert_fail@plt+0xe20>
   11f50:	ldrb	r1, [r8, #3]
   11f54:	cmp	r1, #0
   11f58:	mov	r1, #10
   11f5c:	movwne	r1, #0
   11f60:	cmn	r6, #1
   11f64:	cmpne	r6, r1
   11f68:	bne	11eb4 <__assert_fail@plt+0xd68>
   11f6c:	mov	r7, r5
   11f70:	mov	r5, r6
   11f74:	ldrb	r1, [r8, #3]
   11f78:	cmp	r1, #0
   11f7c:	mov	r1, #10
   11f80:	movwne	r1, #0
   11f84:	cmp	r5, r0
   11f88:	cmpeq	r1, r0
   11f8c:	beq	11f9c <__assert_fail@plt+0xe50>
   11f90:	cmp	r5, r0
   11f94:	beq	11c48 <__assert_fail@plt+0xafc>
   11f98:	b	11fe0 <__assert_fail@plt+0xe94>
   11f9c:	ldmib	r4, {r0, r1}
   11fa0:	mov	r9, lr
   11fa4:	mov	r6, ip
   11fa8:	cmp	r0, r1
   11fac:	bcs	12058 <__assert_fail@plt+0xf0c>
   11fb0:	add	r1, r0, #1
   11fb4:	str	r1, [r4, #4]
   11fb8:	ldrb	r0, [r0]
   11fbc:	mov	r1, r4
   11fc0:	bl	11038 <ungetc@plt>
   11fc4:	ldrb	r0, [r8, #1]
   11fc8:	mov	lr, r9
   11fcc:	movw	r9, #33116	; 0x815c
   11fd0:	mov	ip, r6
   11fd4:	movt	r9, #2
   11fd8:	cmp	r5, r0
   11fdc:	beq	11c48 <__assert_fail@plt+0xafc>
   11fe0:	ldrb	r1, [r8, #3]
   11fe4:	add	r2, r5, #1
   11fe8:	clz	r2, r2
   11fec:	lsr	r6, r2, #5
   11ff0:	cmp	r1, #0
   11ff4:	mov	r1, #10
   11ff8:	movwne	r1, #0
   11ffc:	cmn	r5, #1
   12000:	cmpne	r5, r1
   12004:	bne	11c68 <__assert_fail@plt+0xb1c>
   12008:	tst	sl, #1
   1200c:	eoreq	r2, lr, #1
   12010:	orrseq	r2, r2, ip
   12014:	beq	120a4 <__assert_fail@plt+0xf58>
   12018:	cmp	r7, r1
   1201c:	bne	1202c <__assert_fail@plt+0xee0>
   12020:	cmp	r5, r1
   12024:	cmpne	r1, r0
   12028:	bne	120b0 <__assert_fail@plt+0xf64>
   1202c:	ldr	r0, [r9]
   12030:	ldr	r2, [r0, #20]
   12034:	ldr	r3, [r0, #24]
   12038:	cmp	r2, r3
   1203c:	bcs	120d8 <__assert_fail@plt+0xf8c>
   12040:	add	r3, r2, #1
   12044:	str	r3, [r0, #20]
   12048:	strb	r1, [r2]
   1204c:	cmp	r6, #0
   12050:	beq	120b8 <__assert_fail@plt+0xf6c>
   12054:	b	12118 <__assert_fail@plt+0xfcc>
   12058:	mov	r0, r4
   1205c:	bl	110bc <__uflow@plt>
   12060:	cmn	r0, #1
   12064:	bne	11fbc <__assert_fail@plt+0xe70>
   12068:	ldrb	r1, [r8, #3]
   1206c:	ldrb	r0, [r8, #1]
   12070:	mov	lr, r9
   12074:	movw	r9, #33116	; 0x815c
   12078:	mov	ip, r6
   1207c:	mvn	r5, #0
   12080:	mov	r6, #1
   12084:	movt	r9, #2
   12088:	cmp	r1, #0
   1208c:	mov	r1, #10
   12090:	movwne	r1, #0
   12094:	tst	sl, #1
   12098:	eoreq	r2, lr, #1
   1209c:	orrseq	r2, r2, ip
   120a0:	bne	12018 <__assert_fail@plt+0xecc>
   120a4:	ldrb	r2, [r8]
   120a8:	cmp	r2, #0
   120ac:	beq	12018 <__assert_fail@plt+0xecc>
   120b0:	cmp	r6, #0
   120b4:	bne	12118 <__assert_fail@plt+0xfcc>
   120b8:	movw	r0, #33484	; 0x82cc
   120bc:	mov	ip, #0
   120c0:	mov	lr, #1
   120c4:	mov	sl, #0
   120c8:	movt	r0, #2
   120cc:	ldr	r0, [r0]
   120d0:	str	r0, [r8, #16]
   120d4:	b	11c68 <__assert_fail@plt+0xb1c>
   120d8:	bl	110c8 <__overflow@plt>
   120dc:	cmp	r6, #0
   120e0:	beq	120b8 <__assert_fail@plt+0xf6c>
   120e4:	b	12118 <__assert_fail@plt+0xfcc>
   120e8:	mov	r0, r4
   120ec:	bl	110bc <__uflow@plt>
   120f0:	cmn	r0, #1
   120f4:	bne	11e40 <__assert_fail@plt+0xcf4>
   120f8:	b	11e4c <__assert_fail@plt+0xd00>
   120fc:	ldr	r0, [r8, #20]
   12100:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   12104:	mov	r0, #0
   12108:	str	r0, [r8, #20]
   1210c:	ldrb	r0, [r4]
   12110:	tst	r0, #48	; 0x30
   12114:	beq	12154 <__assert_fail@plt+0x1008>
   12118:	sub	sp, fp, #28
   1211c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12120:	mov	r0, r4
   12124:	bl	110bc <__uflow@plt>
   12128:	cmn	r0, #1
   1212c:	bne	11c00 <__assert_fail@plt+0xab4>
   12130:	b	12118 <__assert_fail@plt+0xfcc>
   12134:	movw	r0, #28221	; 0x6e3d
   12138:	movw	r1, #28234	; 0x6e4a
   1213c:	movw	r3, #28244	; 0x6e54
   12140:	movw	r2, #315	; 0x13b
   12144:	movt	r0, #1
   12148:	movt	r1, #1
   1214c:	movt	r3, #1
   12150:	bl	1114c <__assert_fail@plt>
   12154:	bl	15f10 <__assert_fail@plt+0x4dc4>
   12158:	push	{r4, r5, r6, r7, fp, lr}
   1215c:	add	fp, sp, #16
   12160:	mov	r5, r1
   12164:	movw	r1, #28660	; 0x6ff4
   12168:	mov	r4, r0
   1216c:	movt	r1, #1
   12170:	bl	10ed0 <strcmp@plt>
   12174:	cmp	r0, #0
   12178:	beq	121a4 <__assert_fail@plt+0x1058>
   1217c:	movw	r1, #27433	; 0x6b29
   12180:	mov	r0, r4
   12184:	movt	r1, #1
   12188:	bl	11104 <fopen64@plt>
   1218c:	mov	r6, r0
   12190:	cmp	r0, #0
   12194:	bne	121c0 <__assert_fail@plt+0x1074>
   12198:	bl	11044 <__errno_location@plt>
   1219c:	ldr	r5, [r0]
   121a0:	b	1221c <__assert_fail@plt+0x10d0>
   121a4:	movw	r0, #33128	; 0x8168
   121a8:	mov	r1, #1
   121ac:	movt	r0, #2
   121b0:	strb	r1, [r0, #2]
   121b4:	movw	r0, #33112	; 0x8158
   121b8:	movt	r0, #2
   121bc:	ldr	r6, [r0]
   121c0:	mov	r0, r6
   121c4:	mov	r1, #2
   121c8:	bl	12ba4 <__assert_fail@plt+0x1a58>
   121cc:	mov	r0, r6
   121d0:	blx	r5
   121d4:	bl	11044 <__errno_location@plt>
   121d8:	ldr	r1, [r6]
   121dc:	mov	r7, r0
   121e0:	ldr	r0, [r0]
   121e4:	lsl	r1, r1, #26
   121e8:	and	r5, r0, r1, asr #31
   121ec:	movw	r1, #28660	; 0x6ff4
   121f0:	mov	r0, r4
   121f4:	movt	r1, #1
   121f8:	bl	10ed0 <strcmp@plt>
   121fc:	cmp	r0, #0
   12200:	beq	12250 <__assert_fail@plt+0x1104>
   12204:	mov	r0, r6
   12208:	bl	12be0 <__assert_fail@plt+0x1a94>
   1220c:	cmn	r0, #1
   12210:	ldreq	r5, [r7]
   12214:	cmp	r5, #0
   12218:	beq	12260 <__assert_fail@plt+0x1114>
   1221c:	mov	r0, #0
   12220:	mov	r1, #3
   12224:	mov	r2, r4
   12228:	mov	r6, #0
   1222c:	bl	15050 <__assert_fail@plt+0x3f04>
   12230:	movw	r2, #28918	; 0x70f6
   12234:	mov	r3, r0
   12238:	mov	r0, #0
   1223c:	mov	r1, r5
   12240:	movt	r2, #1
   12244:	bl	10fc0 <error@plt>
   12248:	mov	r0, r6
   1224c:	pop	{r4, r5, r6, r7, fp, pc}
   12250:	mov	r0, r6
   12254:	bl	110f8 <clearerr_unlocked@plt>
   12258:	cmp	r5, #0
   1225c:	bne	1221c <__assert_fail@plt+0x10d0>
   12260:	mov	r6, #1
   12264:	mov	r0, r6
   12268:	pop	{r4, r5, r6, r7, fp, pc}
   1226c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12270:	add	fp, sp, #28
   12274:	sub	sp, sp, #20
   12278:	mov	r5, r0
   1227c:	ands	r0, r1, #1
   12280:	mov	r2, #0
   12284:	str	r1, [sp]
   12288:	str	r0, [sp, #4]
   1228c:	beq	122c0 <__assert_fail@plt+0x1174>
   12290:	movw	r1, #28660	; 0x6ff4
   12294:	mov	r0, r5
   12298:	movt	r1, #1
   1229c:	bl	10ed0 <strcmp@plt>
   122a0:	cmp	r0, #0
   122a4:	clz	r0, r0
   122a8:	mov	r2, #0
   122ac:	mov	r8, #0
   122b0:	lsr	r9, r0, #5
   122b4:	addeq	r5, r5, #1
   122b8:	mov	r1, r9
   122bc:	b	122cc <__assert_fail@plt+0x1180>
   122c0:	mov	r9, #0
   122c4:	mov	r8, #0
   122c8:	mov	r1, #0
   122cc:	movw	ip, #33488	; 0x82d0
   122d0:	movw	lr, #33156	; 0x8184
   122d4:	mov	r0, #1
   122d8:	mov	r7, r1
   122dc:	mov	r4, #0
   122e0:	mov	r3, #0
   122e4:	movt	ip, #2
   122e8:	movt	lr, #2
   122ec:	str	r0, [sp, #12]
   122f0:	ldrb	r6, [r5]
   122f4:	str	r5, [sp, #16]
   122f8:	cmp	r6, #44	; 0x2c
   122fc:	beq	1246c <__assert_fail@plt+0x1320>
   12300:	cmp	r6, #45	; 0x2d
   12304:	bne	1235c <__assert_fail@plt+0x1210>
   12308:	tst	r7, #1
   1230c:	bne	129bc <__assert_fail@plt+0x1870>
   12310:	ldr	r5, [sp, #16]
   12314:	orrs	r0, r9, r8
   12318:	eoreq	r0, r1, #1
   1231c:	tsteq	r0, #1
   12320:	beq	12930 <__assert_fail@plt+0x17e4>
   12324:	ands	r3, r1, #1
   12328:	mov	r7, #1
   1232c:	mov	r4, #0
   12330:	add	r5, r5, #1
   12334:	moveq	r9, r7
   12338:	movne	r3, r8
   1233c:	mov	r8, #0
   12340:	str	r9, [sp, #12]
   12344:	mov	r9, #0
   12348:	ldrb	r6, [r5]
   1234c:	str	r5, [sp, #16]
   12350:	cmp	r6, #44	; 0x2c
   12354:	bne	12300 <__assert_fail@plt+0x11b4>
   12358:	b	1246c <__assert_fail@plt+0x1320>
   1235c:	str	r3, [sp, #8]
   12360:	mov	r5, r2
   12364:	mov	sl, r1
   12368:	bl	11008 <__ctype_b_loc@plt>
   1236c:	ldr	r3, [sp, #8]
   12370:	movw	lr, #33156	; 0x8184
   12374:	movw	ip, #33488	; 0x82d0
   12378:	mov	r1, sl
   1237c:	mov	r2, r5
   12380:	cmp	r6, #0
   12384:	movt	lr, #2
   12388:	movt	ip, #2
   1238c:	beq	1246c <__assert_fail@plt+0x1320>
   12390:	ldr	r0, [r0]
   12394:	add	r0, r0, r6, lsl #1
   12398:	ldrh	r0, [r0]
   1239c:	ands	r0, r0, #1
   123a0:	bne	1246c <__assert_fail@plt+0x1320>
   123a4:	sub	r0, r6, #48	; 0x30
   123a8:	cmp	r0, #9
   123ac:	bhi	129e8 <__assert_fail@plt+0x189c>
   123b0:	ldr	r6, [lr]
   123b4:	cmp	r6, #0
   123b8:	mov	r1, r6
   123bc:	movwne	r1, #1
   123c0:	tst	r4, r1
   123c4:	movw	r1, #39321	; 0x9999
   123c8:	ldreq	r6, [sp, #16]
   123cc:	movt	r1, #39321	; 0x9999
   123d0:	streq	r6, [lr]
   123d4:	subs	r1, r1, r9
   123d8:	movw	r1, #39321	; 0x9999
   123dc:	movt	r1, #6553	; 0x1999
   123e0:	sbcs	r1, r1, r8
   123e4:	bcc	12944 <__assert_fail@plt+0x17f8>
   123e8:	mov	r1, #10
   123ec:	add	r3, r8, r8, lsl #2
   123f0:	umull	r1, r2, r9, r1
   123f4:	add	r2, r2, r3, lsl #1
   123f8:	adds	r1, r1, r0
   123fc:	adc	r0, r2, r0, asr #31
   12400:	subs	r2, r1, r9
   12404:	sbcs	r2, r0, r8
   12408:	mov	r2, #0
   1240c:	movwcc	r2, #1
   12410:	cmp	r2, #0
   12414:	moveq	r8, r0
   12418:	moveq	r9, r1
   1241c:	cmp	r2, #0
   12420:	bne	12944 <__assert_fail@plt+0x17f8>
   12424:	mvn	r1, #0
   12428:	eor	r0, r9, r1
   1242c:	eor	r1, r8, r1
   12430:	orrs	r0, r0, r1
   12434:	beq	12944 <__assert_fail@plt+0x17f8>
   12438:	mov	r2, r5
   1243c:	orr	r2, r5, r7
   12440:	ldr	r5, [sp, #16]
   12444:	ldr	r3, [sp, #8]
   12448:	eor	r0, r7, #1
   1244c:	mov	r1, sl
   12450:	mov	r4, #1
   12454:	orr	r1, sl, r0
   12458:	add	r5, r5, #1
   1245c:	ldrb	r6, [r5]
   12460:	str	r5, [sp, #16]
   12464:	cmp	r6, #44	; 0x2c
   12468:	bne	12300 <__assert_fail@plt+0x11b4>
   1246c:	tst	r7, #1
   12470:	beq	12500 <__assert_fail@plt+0x13b4>
   12474:	orr	r0, r1, r2
   12478:	ldr	r1, [sp, #12]
   1247c:	mov	sl, #1
   12480:	movw	r4, #33484	; 0x82cc
   12484:	ands	r6, r0, #1
   12488:	movt	r4, #2
   1248c:	movne	r6, r3
   12490:	movne	sl, r1
   12494:	ldr	r1, [sp, #4]
   12498:	cmp	r1, #0
   1249c:	tsteq	r0, #1
   124a0:	beq	129dc <__assert_fail@plt+0x1890>
   124a4:	ldr	r5, [sp, #16]
   124a8:	tst	r2, #1
   124ac:	beq	12554 <__assert_fail@plt+0x1408>
   124b0:	subs	r0, r9, sl
   124b4:	sbcs	r0, r8, r6
   124b8:	bcc	12a38 <__assert_fail@plt+0x18ec>
   124bc:	ldr	r1, [ip]
   124c0:	ldr	r0, [lr, #4]
   124c4:	cmp	r1, r0
   124c8:	bne	125d4 <__assert_fail@plt+0x1488>
   124cc:	ldr	r0, [r4]
   124d0:	add	r1, lr, #4
   124d4:	mov	r2, #16
   124d8:	mov	r7, r3
   124dc:	bl	15b80 <__assert_fail@plt+0x4a34>
   124e0:	movw	ip, #33488	; 0x82d0
   124e4:	movw	lr, #33156	; 0x8184
   124e8:	mov	r3, r7
   124ec:	str	r0, [r4]
   124f0:	movt	ip, #2
   124f4:	movt	lr, #2
   124f8:	ldr	r1, [ip]
   124fc:	b	125d8 <__assert_fail@plt+0x148c>
   12500:	movw	r4, #33484	; 0x82cc
   12504:	orrs	r0, r9, r8
   12508:	movt	r4, #2
   1250c:	beq	12930 <__assert_fail@plt+0x17e4>
   12510:	ldr	r1, [ip]
   12514:	ldr	r0, [lr, #4]
   12518:	cmp	r1, r0
   1251c:	bne	12590 <__assert_fail@plt+0x1444>
   12520:	ldr	r0, [r4]
   12524:	add	r1, lr, #4
   12528:	mov	r2, #16
   1252c:	mov	r6, r3
   12530:	bl	15b80 <__assert_fail@plt+0x4a34>
   12534:	movw	ip, #33488	; 0x82d0
   12538:	movw	lr, #33156	; 0x8184
   1253c:	mov	r3, r6
   12540:	str	r0, [r4]
   12544:	movt	ip, #2
   12548:	movt	lr, #2
   1254c:	ldr	r1, [ip]
   12550:	b	12594 <__assert_fail@plt+0x1448>
   12554:	ldr	r1, [ip]
   12558:	ldr	r0, [lr, #4]
   1255c:	cmp	r1, r0
   12560:	bne	125b4 <__assert_fail@plt+0x1468>
   12564:	ldr	r0, [r4]
   12568:	add	r1, lr, #4
   1256c:	mov	r2, #16
   12570:	bl	15b80 <__assert_fail@plt+0x4a34>
   12574:	movw	ip, #33488	; 0x82d0
   12578:	movw	lr, #33156	; 0x8184
   1257c:	str	r0, [r4]
   12580:	movt	ip, #2
   12584:	movt	lr, #2
   12588:	ldr	r1, [ip]
   1258c:	b	125b8 <__assert_fail@plt+0x146c>
   12590:	ldr	r0, [r4]
   12594:	vmov.32	d16[0], r9
   12598:	ldr	r5, [sp, #16]
   1259c:	ldr	sl, [sp, #12]
   125a0:	add	r2, r0, r1, lsl #4
   125a4:	vmov.32	d16[1], r8
   125a8:	vorr	d17, d16, d16
   125ac:	vst1.64	{d16-d17}, [r2]
   125b0:	b	125ec <__assert_fail@plt+0x14a0>
   125b4:	ldr	r0, [r4]
   125b8:	mov	r2, r0
   125bc:	mvn	r3, #0
   125c0:	str	sl, [r2, r1, lsl #4]!
   125c4:	str	r6, [r2, #4]
   125c8:	str	r3, [r2, #8]
   125cc:	str	r3, [r2, #12]
   125d0:	b	125f0 <__assert_fail@plt+0x14a4>
   125d4:	ldr	r0, [r4]
   125d8:	mov	r2, r0
   125dc:	str	sl, [r2, r1, lsl #4]!
   125e0:	stmib	r2, {r6, r9}
   125e4:	str	r8, [r2, #12]
   125e8:	ldr	sl, [sp, #12]
   125ec:	mov	r6, r3
   125f0:	add	r1, r1, #1
   125f4:	str	r1, [ip]
   125f8:	ldrb	r2, [r5]
   125fc:	cmp	r2, #0
   12600:	beq	12628 <__assert_fail@plt+0x14dc>
   12604:	mov	r9, #0
   12608:	mov	r8, #0
   1260c:	mov	r1, #0
   12610:	mov	r2, #0
   12614:	mov	r7, #0
   12618:	mov	r4, #0
   1261c:	str	sl, [sp, #12]
   12620:	mov	r3, r6
   12624:	b	12458 <__assert_fail@plt+0x130c>
   12628:	cmp	r1, #0
   1262c:	beq	12a64 <__assert_fail@plt+0x1918>
   12630:	movw	r3, #10872	; 0x2a78
   12634:	mov	r2, #16
   12638:	movt	r3, #1
   1263c:	bl	11110 <qsort@plt>
   12640:	movw	lr, #33488	; 0x82d0
   12644:	movt	lr, #2
   12648:	ldr	r8, [lr]
   1264c:	cmp	r8, #0
   12650:	beq	12710 <__assert_fail@plt+0x15c4>
   12654:	mov	r6, #0
   12658:	mov	sl, r6
   1265c:	add	r6, r6, #1
   12660:	cmp	r6, r8
   12664:	bcc	12680 <__assert_fail@plt+0x1534>
   12668:	cmp	r6, r8
   1266c:	bcs	12714 <__assert_fail@plt+0x15c8>
   12670:	mov	sl, r6
   12674:	add	r6, r6, #1
   12678:	cmp	r6, r8
   1267c:	bcs	12668 <__assert_fail@plt+0x151c>
   12680:	mvn	r0, #-268435455	; 0xf0000001
   12684:	sub	r9, r0, sl
   12688:	ldr	r5, [r4]
   1268c:	add	r1, r5, sl, lsl #4
   12690:	mov	r0, r5
   12694:	ldr	r7, [r0, r6, lsl #4]!
   12698:	ldr	r2, [r1, #8]!
   1269c:	ldr	r3, [r1, #4]
   126a0:	ldr	r0, [r0, #4]
   126a4:	subs	r7, r2, r7
   126a8:	sbcs	r0, r3, r0
   126ac:	bcc	12668 <__assert_fail@plt+0x151c>
   126b0:	add	r0, r5, r6, lsl #4
   126b4:	ldrd	r4, [r0, #8]
   126b8:	subs	r7, r2, r4
   126bc:	sbcs	r7, r3, r5
   126c0:	mov	r7, #0
   126c4:	movwcc	r7, #1
   126c8:	cmp	r7, #0
   126cc:	movne	r2, r4
   126d0:	movne	r3, r5
   126d4:	movw	r4, #33484	; 0x82cc
   126d8:	strd	r2, [r1]
   126dc:	add	r2, r9, r8
   126e0:	add	r1, r0, #16
   126e4:	movt	r4, #2
   126e8:	lsl	r2, r2, #4
   126ec:	bl	10ef4 <memmove@plt>
   126f0:	movw	lr, #33488	; 0x82d0
   126f4:	movt	lr, #2
   126f8:	ldr	r0, [lr]
   126fc:	sub	r8, r0, #1
   12700:	cmp	r6, r8
   12704:	str	r8, [lr]
   12708:	bcc	12688 <__assert_fail@plt+0x153c>
   1270c:	b	12668 <__assert_fail@plt+0x151c>
   12710:	mov	r8, #0
   12714:	ldr	r0, [sp]
   12718:	tst	r0, #2
   1271c:	beq	128ec <__assert_fail@plt+0x17a0>
   12720:	movw	r2, #33156	; 0x8184
   12724:	ldr	r7, [r4]
   12728:	mov	r0, #0
   1272c:	movt	r2, #2
   12730:	str	r0, [lr]
   12734:	str	r0, [r4]
   12738:	str	r0, [r2, #4]
   1273c:	ldr	r6, [r7]
   12740:	ldr	r5, [r7, #4]
   12744:	subs	r1, r6, #2
   12748:	sbcs	r1, r5, #0
   1274c:	bcc	127ac <__assert_fail@plt+0x1660>
   12750:	add	r1, r2, #4
   12754:	mov	r0, #0
   12758:	mov	r2, #16
   1275c:	mov	r9, #0
   12760:	bl	15b80 <__assert_fail@plt+0x4a34>
   12764:	movw	lr, #33488	; 0x82d0
   12768:	mov	r2, #1
   1276c:	mov	r3, r0
   12770:	str	r0, [r4]
   12774:	movt	lr, #2
   12778:	ldr	r1, [lr]
   1277c:	str	r2, [r3, r1, lsl #4]!
   12780:	subs	r2, r6, #1
   12784:	add	ip, r1, #1
   12788:	sbc	r6, r5, #0
   1278c:	str	r9, [r3, #4]
   12790:	str	r2, [r3, #8]
   12794:	str	r6, [r3, #12]
   12798:	str	ip, [lr]
   1279c:	cmp	r8, #2
   127a0:	str	r7, [sp, #16]
   127a4:	bcs	127bc <__assert_fail@plt+0x1670>
   127a8:	b	12854 <__assert_fail@plt+0x1708>
   127ac:	mov	ip, #0
   127b0:	cmp	r8, #2
   127b4:	str	r7, [sp, #16]
   127b8:	bcc	12854 <__assert_fail@plt+0x1708>
   127bc:	add	r6, r7, #16
   127c0:	sub	r7, r8, #1
   127c4:	b	127ec <__assert_fail@plt+0x16a0>
   127c8:	mov	r1, r0
   127cc:	str	r9, [r1, ip, lsl #4]!
   127d0:	add	ip, ip, #1
   127d4:	stmib	r1, {r5, sl}
   127d8:	str	r4, [r1, #12]
   127dc:	str	ip, [lr]
   127e0:	add	r6, r6, #16
   127e4:	subs	r7, r7, #1
   127e8:	beq	12854 <__assert_fail@plt+0x1708>
   127ec:	ldr	r5, [r6, #-8]
   127f0:	ldr	r4, [r6, #-4]
   127f4:	ldm	r6, {r2, r3}
   127f8:	adds	r9, r5, #1
   127fc:	adc	r5, r4, #0
   12800:	eor	r1, r9, r2
   12804:	eor	r4, r5, r3
   12808:	orrs	r1, r1, r4
   1280c:	beq	127e0 <__assert_fail@plt+0x1694>
   12810:	subs	sl, r2, #1
   12814:	movw	r2, #33156	; 0x8184
   12818:	movt	r2, #2
   1281c:	sbc	r4, r3, #0
   12820:	ldr	r1, [r2, #4]
   12824:	cmp	ip, r1
   12828:	bne	127c8 <__assert_fail@plt+0x167c>
   1282c:	add	r1, r2, #4
   12830:	mov	r2, #16
   12834:	bl	15b80 <__assert_fail@plt+0x4a34>
   12838:	movw	lr, #33488	; 0x82d0
   1283c:	movw	r1, #33484	; 0x82cc
   12840:	movt	lr, #2
   12844:	movt	r1, #2
   12848:	ldr	ip, [lr]
   1284c:	str	r0, [r1]
   12850:	b	127c8 <__assert_fail@plt+0x167c>
   12854:	ldr	r4, [sp, #16]
   12858:	mvn	r1, #0
   1285c:	add	r2, r4, r8, lsl #4
   12860:	ldrd	r2, [r2, #-8]
   12864:	eor	r7, r3, r1
   12868:	eor	r6, r2, r1
   1286c:	orrs	r7, r6, r7
   12870:	beq	128d0 <__assert_fail@plt+0x1784>
   12874:	adds	r6, r2, #1
   12878:	movw	r2, #33156	; 0x8184
   1287c:	movt	r2, #2
   12880:	adc	r5, r3, #0
   12884:	ldr	r1, [r2, #4]
   12888:	cmp	ip, r1
   1288c:	bne	128b4 <__assert_fail@plt+0x1768>
   12890:	add	r1, r2, #4
   12894:	mov	r2, #16
   12898:	bl	15b80 <__assert_fail@plt+0x4a34>
   1289c:	movw	lr, #33488	; 0x82d0
   128a0:	movw	r1, #33484	; 0x82cc
   128a4:	movt	lr, #2
   128a8:	movt	r1, #2
   128ac:	ldr	ip, [lr]
   128b0:	str	r0, [r1]
   128b4:	str	r6, [r0, ip, lsl #4]!
   128b8:	mvn	r1, #0
   128bc:	str	r5, [r0, #4]
   128c0:	str	r1, [r0, #8]
   128c4:	str	r1, [r0, #12]
   128c8:	add	r0, ip, #1
   128cc:	str	r0, [lr]
   128d0:	mov	r0, r4
   128d4:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   128d8:	movw	lr, #33488	; 0x82d0
   128dc:	movw	r4, #33484	; 0x82cc
   128e0:	movt	lr, #2
   128e4:	movt	r4, #2
   128e8:	ldr	r8, [lr]
   128ec:	ldr	r0, [r4]
   128f0:	add	r1, r8, #1
   128f4:	mov	r5, r4
   128f8:	mov	r4, lr
   128fc:	str	r1, [lr]
   12900:	lsl	r1, r1, #4
   12904:	bl	15a1c <__assert_fail@plt+0x48d0>
   12908:	ldr	r1, [r4]
   1290c:	str	r0, [r5]
   12910:	add	r0, r0, r1, lsl #4
   12914:	mvn	r1, #0
   12918:	str	r1, [r0, #-16]
   1291c:	str	r1, [r0, #-12]
   12920:	str	r1, [r0, #-8]
   12924:	str	r1, [r0, #-4]
   12928:	sub	sp, fp, #28
   1292c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12930:	movw	r0, #28601	; 0x6fb9
   12934:	movw	r1, #28556	; 0x6f8c
   12938:	movt	r0, #1
   1293c:	movt	r1, #1
   12940:	b	129cc <__assert_fail@plt+0x1880>
   12944:	movw	r1, #28687	; 0x700f
   12948:	mov	r0, r6
   1294c:	movt	r1, #1
   12950:	bl	11140 <strspn@plt>
   12954:	mov	r1, r0
   12958:	mov	r0, r6
   1295c:	bl	15e9c <__assert_fail@plt+0x4d50>
   12960:	ldr	r2, [sp]
   12964:	mov	r5, r0
   12968:	movw	r0, #28736	; 0x7040
   1296c:	movw	r1, #28698	; 0x701a
   12970:	movt	r0, #1
   12974:	movt	r1, #1
   12978:	tst	r2, #4
   1297c:	mov	r2, #5
   12980:	moveq	r1, r0
   12984:	mov	r0, #0
   12988:	bl	10f48 <dcgettext@plt>
   1298c:	mov	r4, r0
   12990:	mov	r0, r5
   12994:	bl	152fc <__assert_fail@plt+0x41b0>
   12998:	mov	r3, r0
   1299c:	mov	r0, #0
   129a0:	mov	r1, #0
   129a4:	mov	r2, r4
   129a8:	bl	10fc0 <error@plt>
   129ac:	mov	r0, r5
   129b0:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   129b4:	mov	r0, #1
   129b8:	bl	11248 <__assert_fail@plt+0xfc>
   129bc:	movw	r0, #28536	; 0x6f78
   129c0:	movw	r1, #28504	; 0x6f58
   129c4:	movt	r0, #1
   129c8:	movt	r1, #1
   129cc:	ldr	r2, [sp]
   129d0:	tst	r2, #4
   129d4:	moveq	r1, r0
   129d8:	b	12a40 <__assert_fail@plt+0x18f4>
   129dc:	movw	r1, #28628	; 0x6fd4
   129e0:	movt	r1, #1
   129e4:	b	12a40 <__assert_fail@plt+0x18f4>
   129e8:	ldr	r2, [sp]
   129ec:	movw	r0, #28800	; 0x7080
   129f0:	movw	r1, #28765	; 0x705d
   129f4:	movt	r0, #1
   129f8:	movt	r1, #1
   129fc:	tst	r2, #4
   12a00:	mov	r2, #5
   12a04:	moveq	r1, r0
   12a08:	mov	r0, #0
   12a0c:	bl	10f48 <dcgettext@plt>
   12a10:	mov	r4, r0
   12a14:	ldr	r0, [sp, #16]
   12a18:	bl	152fc <__assert_fail@plt+0x41b0>
   12a1c:	mov	r3, r0
   12a20:	mov	r0, #0
   12a24:	mov	r1, #0
   12a28:	mov	r2, r4
   12a2c:	bl	10fc0 <error@plt>
   12a30:	mov	r0, #1
   12a34:	bl	11248 <__assert_fail@plt+0xfc>
   12a38:	movw	r1, #28662	; 0x6ff6
   12a3c:	movt	r1, #1
   12a40:	mov	r0, #0
   12a44:	mov	r2, #5
   12a48:	bl	10f48 <dcgettext@plt>
   12a4c:	mov	r2, r0
   12a50:	mov	r0, #0
   12a54:	mov	r1, #0
   12a58:	bl	10fc0 <error@plt>
   12a5c:	mov	r0, #1
   12a60:	bl	11248 <__assert_fail@plt+0xfc>
   12a64:	movw	r0, #28864	; 0x70c0
   12a68:	movw	r1, #28823	; 0x7097
   12a6c:	movt	r0, #1
   12a70:	movt	r1, #1
   12a74:	b	129cc <__assert_fail@plt+0x1880>
   12a78:	ldr	r2, [r0]
   12a7c:	ldr	r1, [r1]
   12a80:	mov	r0, #0
   12a84:	cmp	r2, r1
   12a88:	movwgt	r0, #1
   12a8c:	mvnlt	r0, #0
   12a90:	bx	lr
   12a94:	movw	r1, #33164	; 0x818c
   12a98:	movt	r1, #2
   12a9c:	str	r0, [r1, #4]
   12aa0:	bx	lr
   12aa4:	movw	r1, #33164	; 0x818c
   12aa8:	movt	r1, #2
   12aac:	strb	r0, [r1]
   12ab0:	bx	lr
   12ab4:	push	{r4, r5, r6, sl, fp, lr}
   12ab8:	add	fp, sp, #16
   12abc:	sub	sp, sp, #8
   12ac0:	movw	r0, #33116	; 0x815c
   12ac4:	movt	r0, #2
   12ac8:	ldr	r0, [r0]
   12acc:	bl	1602c <__assert_fail@plt+0x4ee0>
   12ad0:	cmp	r0, #0
   12ad4:	beq	12afc <__assert_fail@plt+0x19b0>
   12ad8:	movw	r5, #33164	; 0x818c
   12adc:	movt	r5, #2
   12ae0:	ldrb	r0, [r5]
   12ae4:	cmp	r0, #0
   12ae8:	beq	12b28 <__assert_fail@plt+0x19dc>
   12aec:	bl	11044 <__errno_location@plt>
   12af0:	ldr	r0, [r0]
   12af4:	cmp	r0, #32
   12af8:	bne	12b28 <__assert_fail@plt+0x19dc>
   12afc:	movw	r0, #33104	; 0x8150
   12b00:	movt	r0, #2
   12b04:	ldr	r0, [r0]
   12b08:	bl	1602c <__assert_fail@plt+0x4ee0>
   12b0c:	cmp	r0, #0
   12b10:	subeq	sp, fp, #16
   12b14:	popeq	{r4, r5, r6, sl, fp, pc}
   12b18:	movw	r0, #33020	; 0x80fc
   12b1c:	movt	r0, #2
   12b20:	ldr	r0, [r0]
   12b24:	bl	10f18 <_exit@plt>
   12b28:	movw	r1, #28902	; 0x70e6
   12b2c:	mov	r0, #0
   12b30:	mov	r2, #5
   12b34:	movt	r1, #1
   12b38:	bl	10f48 <dcgettext@plt>
   12b3c:	ldr	r6, [r5, #4]
   12b40:	mov	r4, r0
   12b44:	bl	11044 <__errno_location@plt>
   12b48:	ldr	r5, [r0]
   12b4c:	cmp	r6, #0
   12b50:	bne	12b6c <__assert_fail@plt+0x1a20>
   12b54:	movw	r2, #28918	; 0x70f6
   12b58:	mov	r0, #0
   12b5c:	mov	r1, r5
   12b60:	mov	r3, r4
   12b64:	movt	r2, #1
   12b68:	b	12b8c <__assert_fail@plt+0x1a40>
   12b6c:	mov	r0, r6
   12b70:	bl	14f74 <__assert_fail@plt+0x3e28>
   12b74:	movw	r2, #28914	; 0x70f2
   12b78:	mov	r3, r0
   12b7c:	str	r4, [sp]
   12b80:	mov	r0, #0
   12b84:	mov	r1, r5
   12b88:	movt	r2, #1
   12b8c:	bl	10fc0 <error@plt>
   12b90:	movw	r0, #33020	; 0x80fc
   12b94:	movt	r0, #2
   12b98:	ldr	r0, [r0]
   12b9c:	bl	10f18 <_exit@plt>
   12ba0:	b	10edc <posix_fadvise64@plt>
   12ba4:	cmp	r0, #0
   12ba8:	bxeq	lr
   12bac:	push	{r4, sl, fp, lr}
   12bb0:	add	fp, sp, #8
   12bb4:	sub	sp, sp, #16
   12bb8:	mov	r4, r1
   12bbc:	bl	11080 <fileno@plt>
   12bc0:	mov	r1, #0
   12bc4:	mov	r2, #0
   12bc8:	mov	r3, #0
   12bcc:	str	r1, [sp]
   12bd0:	stmib	sp, {r1, r4}
   12bd4:	bl	10edc <posix_fadvise64@plt>
   12bd8:	sub	sp, fp, #8
   12bdc:	pop	{r4, sl, fp, pc}
   12be0:	push	{r4, r5, r6, sl, fp, lr}
   12be4:	add	fp, sp, #16
   12be8:	sub	sp, sp, #8
   12bec:	mov	r4, r0
   12bf0:	bl	11080 <fileno@plt>
   12bf4:	cmn	r0, #1
   12bf8:	ble	12c6c <__assert_fail@plt+0x1b20>
   12bfc:	mov	r0, r4
   12c00:	bl	10fe4 <__freading@plt>
   12c04:	cmp	r0, #0
   12c08:	beq	12c34 <__assert_fail@plt+0x1ae8>
   12c0c:	mov	r0, r4
   12c10:	bl	11080 <fileno@plt>
   12c14:	mov	r1, #1
   12c18:	mov	r2, #0
   12c1c:	mov	r3, #0
   12c20:	str	r1, [sp]
   12c24:	bl	10f84 <lseek64@plt>
   12c28:	and	r0, r0, r1
   12c2c:	cmn	r0, #1
   12c30:	beq	12c6c <__assert_fail@plt+0x1b20>
   12c34:	mov	r0, r4
   12c38:	bl	12c7c <__assert_fail@plt+0x1b30>
   12c3c:	cmp	r0, #0
   12c40:	beq	12c6c <__assert_fail@plt+0x1b20>
   12c44:	bl	11044 <__errno_location@plt>
   12c48:	ldr	r6, [r0]
   12c4c:	mov	r5, r0
   12c50:	mov	r0, r4
   12c54:	bl	110a4 <fclose@plt>
   12c58:	cmp	r6, #0
   12c5c:	strne	r6, [r5]
   12c60:	mvnne	r0, #0
   12c64:	sub	sp, fp, #16
   12c68:	pop	{r4, r5, r6, sl, fp, pc}
   12c6c:	mov	r0, r4
   12c70:	sub	sp, fp, #16
   12c74:	pop	{r4, r5, r6, sl, fp, lr}
   12c78:	b	110a4 <fclose@plt>
   12c7c:	push	{r4, sl, fp, lr}
   12c80:	add	fp, sp, #8
   12c84:	sub	sp, sp, #8
   12c88:	mov	r4, r0
   12c8c:	cmp	r0, #0
   12c90:	beq	12cc8 <__assert_fail@plt+0x1b7c>
   12c94:	mov	r0, r4
   12c98:	bl	10fe4 <__freading@plt>
   12c9c:	cmp	r0, #0
   12ca0:	beq	12cc8 <__assert_fail@plt+0x1b7c>
   12ca4:	ldrb	r0, [r4, #1]
   12ca8:	tst	r0, #1
   12cac:	beq	12cc8 <__assert_fail@plt+0x1b7c>
   12cb0:	mov	r0, #1
   12cb4:	mov	r2, #0
   12cb8:	mov	r3, #0
   12cbc:	str	r0, [sp]
   12cc0:	mov	r0, r4
   12cc4:	bl	12d00 <__assert_fail@plt+0x1bb4>
   12cc8:	mov	r0, r4
   12ccc:	sub	sp, fp, #8
   12cd0:	pop	{r4, sl, fp, lr}
   12cd4:	b	10ee8 <fflush@plt>
   12cd8:	push	{r4, r5, r6, sl, fp, lr}
   12cdc:	add	fp, sp, #16
   12ce0:	mov	r4, r0
   12ce4:	bl	11044 <__errno_location@plt>
   12ce8:	ldr	r6, [r0]
   12cec:	mov	r5, r0
   12cf0:	mov	r0, r4
   12cf4:	bl	10f00 <free@plt>
   12cf8:	str	r6, [r5]
   12cfc:	pop	{r4, r5, r6, sl, fp, pc}
   12d00:	push	{r4, r5, r6, r7, fp, lr}
   12d04:	add	fp, sp, #16
   12d08:	sub	sp, sp, #8
   12d0c:	mov	r4, r0
   12d10:	ldr	r0, [r0, #4]
   12d14:	mov	r5, r3
   12d18:	mov	r6, r2
   12d1c:	ldr	r1, [r4, #8]
   12d20:	cmp	r1, r0
   12d24:	bne	12d40 <__assert_fail@plt+0x1bf4>
   12d28:	ldrd	r0, [r4, #16]
   12d2c:	cmp	r1, r0
   12d30:	bne	12d40 <__assert_fail@plt+0x1bf4>
   12d34:	ldr	r0, [r4, #36]	; 0x24
   12d38:	cmp	r0, #0
   12d3c:	beq	12d58 <__assert_fail@plt+0x1c0c>
   12d40:	mov	r0, r4
   12d44:	mov	r2, r6
   12d48:	mov	r3, r5
   12d4c:	sub	sp, fp, #16
   12d50:	pop	{r4, r5, r6, r7, fp, lr}
   12d54:	b	110b0 <fseeko64@plt>
   12d58:	ldr	r7, [fp, #8]
   12d5c:	mov	r0, r4
   12d60:	bl	11080 <fileno@plt>
   12d64:	mov	r2, r6
   12d68:	mov	r3, r5
   12d6c:	str	r7, [sp]
   12d70:	bl	10f84 <lseek64@plt>
   12d74:	and	r2, r0, r1
   12d78:	cmn	r2, #1
   12d7c:	beq	12d9c <__assert_fail@plt+0x1c50>
   12d80:	strd	r0, [r4, #80]	; 0x50
   12d84:	ldr	r0, [r4]
   12d88:	bic	r0, r0, #16
   12d8c:	str	r0, [r4]
   12d90:	mov	r0, #0
   12d94:	sub	sp, fp, #16
   12d98:	pop	{r4, r5, r6, r7, fp, pc}
   12d9c:	mvn	r0, #0
   12da0:	sub	sp, fp, #16
   12da4:	pop	{r4, r5, r6, r7, fp, pc}
   12da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dac:	add	fp, sp, #28
   12db0:	sub	sp, sp, #44	; 0x2c
   12db4:	ldr	r4, [r0]
   12db8:	mov	r6, r3
   12dbc:	mov	r7, r2
   12dc0:	mov	sl, r1
   12dc4:	mov	r5, r0
   12dc8:	cmp	r4, #0
   12dcc:	beq	12de0 <__assert_fail@plt+0x1c94>
   12dd0:	ldr	r8, [sl]
   12dd4:	cmp	r8, r7
   12dd8:	bcs	12e08 <__assert_fail@plt+0x1cbc>
   12ddc:	b	13220 <__assert_fail@plt+0x20d4>
   12de0:	cmp	r6, #64	; 0x40
   12de4:	mov	r8, r6
   12de8:	movcs	r8, #64	; 0x40
   12dec:	mov	r0, r8
   12df0:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   12df4:	mov	r4, r0
   12df8:	cmp	r0, #0
   12dfc:	beq	13228 <__assert_fail@plt+0x20dc>
   12e00:	cmp	r8, r7
   12e04:	bcc	13220 <__assert_fail@plt+0x20d4>
   12e08:	sub	r9, r8, r7
   12e0c:	cmp	r8, r6
   12e10:	str	r7, [sp, #20]
   12e14:	str	r6, [sp, #36]	; 0x24
   12e18:	bcc	12e24 <__assert_fail@plt+0x1cd8>
   12e1c:	cmp	r9, #0
   12e20:	beq	13220 <__assert_fail@plt+0x20d4>
   12e24:	ldr	r0, [fp, #12]
   12e28:	ldr	r2, [fp, #8]
   12e2c:	stmib	sp, {r5, sl}
   12e30:	ldr	r5, [fp, #16]
   12e34:	cmn	r0, #1
   12e38:	mov	r1, r0
   12e3c:	moveq	r1, r2
   12e40:	cmn	r2, #1
   12e44:	moveq	r1, r0
   12e48:	moveq	r2, r0
   12e4c:	ldr	r0, [sp, #20]
   12e50:	cmn	r2, #1
   12e54:	str	r1, [sp, #24]
   12e58:	str	r2, [sp, #16]
   12e5c:	add	r6, r4, r0
   12e60:	eor	r0, r0, #-2147483648	; 0x80000000
   12e64:	str	r0, [sp, #12]
   12e68:	beq	13038 <__assert_fail@plt+0x1eec>
   12e6c:	b	12e7c <__assert_fail@plt+0x1d30>
   12e70:	ldr	r0, [sp, #28]
   12e74:	cmp	r0, #0
   12e78:	bne	131e4 <__assert_fail@plt+0x2098>
   12e7c:	mov	r0, r5
   12e80:	sub	r1, fp, #32
   12e84:	bl	160b0 <__assert_fail@plt+0x4f64>
   12e88:	mov	r7, r0
   12e8c:	cmp	r0, #0
   12e90:	beq	12ecc <__assert_fail@plt+0x1d80>
   12e94:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12e98:	ldr	r1, [sp, #16]
   12e9c:	ldr	r2, [sp, #24]
   12ea0:	mov	r0, r7
   12ea4:	mov	r3, sl
   12ea8:	bl	1323c <__assert_fail@plt+0x20f0>
   12eac:	cmp	r0, #0
   12eb0:	ldr	r2, [sp, #32]
   12eb4:	moveq	r0, #0
   12eb8:	subne	r0, r0, r7
   12ebc:	addne	sl, r0, #1
   12ec0:	movne	r0, #1
   12ec4:	strne	sl, [fp, #-32]	; 0xffffffe0
   12ec8:	b	12f10 <__assert_fail@plt+0x1dc4>
   12ecc:	ldmib	r5, {r0, r1}
   12ed0:	cmp	r0, r1
   12ed4:	bcs	13020 <__assert_fail@plt+0x1ed4>
   12ed8:	add	r1, r0, #1
   12edc:	str	r1, [r5, #4]
   12ee0:	ldrb	r2, [r0]
   12ee4:	ldr	r0, [sp, #24]
   12ee8:	ldr	r1, [sp, #16]
   12eec:	mov	sl, #1
   12ef0:	str	sl, [fp, #-32]	; 0xffffffe0
   12ef4:	sub	r0, r2, r0
   12ef8:	sub	r1, r2, r1
   12efc:	clz	r0, r0
   12f00:	clz	r1, r1
   12f04:	lsr	r0, r0, #5
   12f08:	lsr	r1, r1, #5
   12f0c:	orr	r0, r1, r0
   12f10:	str	r0, [sp, #28]
   12f14:	ldr	r0, [sp, #36]	; 0x24
   12f18:	str	r2, [sp, #32]
   12f1c:	cmp	r8, r0
   12f20:	addcc	r0, sl, #1
   12f24:	cmpcc	r9, r0
   12f28:	bcc	12f60 <__assert_fail@plt+0x1e14>
   12f2c:	cmp	r9, #2
   12f30:	bcc	12fe4 <__assert_fail@plt+0x1e98>
   12f34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12f38:	sub	r5, r9, #1
   12f3c:	cmp	r0, r5
   12f40:	movcc	r5, r0
   12f44:	cmp	r7, #0
   12f48:	beq	12ff0 <__assert_fail@plt+0x1ea4>
   12f4c:	mov	r0, r6
   12f50:	mov	r1, r7
   12f54:	mov	r2, r5
   12f58:	bl	10f24 <memcpy@plt>
   12f5c:	b	12ff4 <__assert_fail@plt+0x1ea8>
   12f60:	cmp	r8, #64	; 0x40
   12f64:	lsl	r1, r8, #1
   12f68:	sub	r6, r6, r4
   12f6c:	addcc	r1, r8, #64	; 0x40
   12f70:	sub	r2, r1, r6
   12f74:	cmp	r2, r0
   12f78:	addcc	r1, r0, r6
   12f7c:	ldr	r0, [sp, #36]	; 0x24
   12f80:	mov	r5, r1
   12f84:	cmp	r1, r0
   12f88:	movhi	r5, r0
   12f8c:	cmp	r8, r1
   12f90:	movcs	r5, r0
   12f94:	ldr	r0, [sp, #20]
   12f98:	sub	r0, r5, r0
   12f9c:	cmn	r0, #1
   12fa0:	bgt	12fb0 <__assert_fail@plt+0x1e64>
   12fa4:	ldr	r5, [sp, #12]
   12fa8:	cmp	r8, r5
   12fac:	beq	13218 <__assert_fail@plt+0x20cc>
   12fb0:	mov	r0, r4
   12fb4:	mov	r1, r5
   12fb8:	bl	15fd8 <__assert_fail@plt+0x4e8c>
   12fbc:	cmp	r0, #0
   12fc0:	beq	1321c <__assert_fail@plt+0x20d0>
   12fc4:	sub	r9, r5, r6
   12fc8:	mov	r8, r5
   12fcc:	ldr	r5, [fp, #16]
   12fd0:	ldr	r2, [sp, #32]
   12fd4:	add	r6, r0, r6
   12fd8:	mov	r4, r0
   12fdc:	cmp	r9, #2
   12fe0:	bcs	12f34 <__assert_fail@plt+0x1de8>
   12fe4:	cmp	r7, #0
   12fe8:	bne	13008 <__assert_fail@plt+0x1ebc>
   12fec:	b	12e70 <__assert_fail@plt+0x1d24>
   12ff0:	strb	r2, [r6]
   12ff4:	sub	r9, r9, r5
   12ff8:	add	r6, r6, r5
   12ffc:	ldr	r5, [fp, #16]
   13000:	cmp	r7, #0
   13004:	beq	12e70 <__assert_fail@plt+0x1d24>
   13008:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1300c:	mov	r0, r5
   13010:	bl	160e4 <__assert_fail@plt+0x4f98>
   13014:	cmp	r0, #0
   13018:	beq	12e70 <__assert_fail@plt+0x1d24>
   1301c:	b	1321c <__assert_fail@plt+0x20d0>
   13020:	mov	r0, r5
   13024:	bl	110bc <__uflow@plt>
   13028:	mov	r2, r0
   1302c:	cmn	r0, #1
   13030:	bne	12ee4 <__assert_fail@plt+0x1d98>
   13034:	b	131dc <__assert_fail@plt+0x2090>
   13038:	sub	r7, fp, #32
   1303c:	b	1304c <__assert_fail@plt+0x1f00>
   13040:	ldr	r0, [sp, #28]
   13044:	cmp	r0, #0
   13048:	bne	131e4 <__assert_fail@plt+0x2098>
   1304c:	mov	r0, r5
   13050:	mov	r1, r7
   13054:	bl	160b0 <__assert_fail@plt+0x4f64>
   13058:	mov	sl, r0
   1305c:	cmp	r0, #0
   13060:	beq	13078 <__assert_fail@plt+0x1f2c>
   13064:	mov	r0, #0
   13068:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1306c:	str	r0, [sp, #28]
   13070:	ldr	r0, [sp, #32]
   13074:	b	130bc <__assert_fail@plt+0x1f70>
   13078:	ldmib	r5, {r0, r1}
   1307c:	cmp	r0, r1
   13080:	bcs	131cc <__assert_fail@plt+0x2080>
   13084:	add	r1, r0, #1
   13088:	str	r1, [r5, #4]
   1308c:	ldrb	r0, [r0]
   13090:	ldr	r1, [sp, #24]
   13094:	add	r2, r0, #1
   13098:	mov	r3, #1
   1309c:	clz	r2, r2
   130a0:	str	r3, [fp, #-32]	; 0xffffffe0
   130a4:	lsr	r2, r2, #5
   130a8:	sub	r1, r0, r1
   130ac:	clz	r1, r1
   130b0:	lsr	r1, r1, #5
   130b4:	orr	r1, r2, r1
   130b8:	str	r1, [sp, #28]
   130bc:	ldr	r1, [sp, #36]	; 0x24
   130c0:	str	r0, [sp, #32]
   130c4:	cmp	r8, r1
   130c8:	addcc	r3, r3, #1
   130cc:	cmpcc	r9, r3
   130d0:	bcc	13108 <__assert_fail@plt+0x1fbc>
   130d4:	cmp	r9, #2
   130d8:	bcc	13190 <__assert_fail@plt+0x2044>
   130dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   130e0:	sub	r5, r9, #1
   130e4:	cmp	r1, r5
   130e8:	movcc	r5, r1
   130ec:	cmp	sl, #0
   130f0:	beq	1319c <__assert_fail@plt+0x2050>
   130f4:	mov	r0, r6
   130f8:	mov	r1, sl
   130fc:	mov	r2, r5
   13100:	bl	10f24 <memcpy@plt>
   13104:	b	131a0 <__assert_fail@plt+0x2054>
   13108:	cmp	r8, #64	; 0x40
   1310c:	lsl	r1, r8, #1
   13110:	sub	r5, r6, r4
   13114:	ldr	r0, [sp, #36]	; 0x24
   13118:	addcc	r1, r8, #64	; 0x40
   1311c:	sub	r2, r1, r5
   13120:	cmp	r2, r3
   13124:	addcc	r1, r3, r5
   13128:	cmp	r1, r0
   1312c:	mov	r7, r1
   13130:	movhi	r7, r0
   13134:	cmp	r8, r1
   13138:	movcs	r7, r0
   1313c:	ldr	r0, [sp, #20]
   13140:	sub	r0, r7, r0
   13144:	cmn	r0, #1
   13148:	bgt	13158 <__assert_fail@plt+0x200c>
   1314c:	ldr	r7, [sp, #12]
   13150:	cmp	r8, r7
   13154:	beq	13218 <__assert_fail@plt+0x20cc>
   13158:	mov	r0, r4
   1315c:	mov	r1, r7
   13160:	bl	15fd8 <__assert_fail@plt+0x4e8c>
   13164:	cmp	r0, #0
   13168:	beq	1321c <__assert_fail@plt+0x20d0>
   1316c:	sub	r9, r7, r5
   13170:	add	r6, r0, r5
   13174:	mov	r4, r0
   13178:	ldr	r5, [fp, #16]
   1317c:	ldr	r0, [sp, #32]
   13180:	mov	r8, r7
   13184:	sub	r7, fp, #32
   13188:	cmp	r9, #2
   1318c:	bcs	130dc <__assert_fail@plt+0x1f90>
   13190:	cmp	sl, #0
   13194:	bne	131b4 <__assert_fail@plt+0x2068>
   13198:	b	13040 <__assert_fail@plt+0x1ef4>
   1319c:	strb	r0, [r6]
   131a0:	sub	r9, r9, r5
   131a4:	add	r6, r6, r5
   131a8:	ldr	r5, [fp, #16]
   131ac:	cmp	sl, #0
   131b0:	beq	13040 <__assert_fail@plt+0x1ef4>
   131b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   131b8:	mov	r0, r5
   131bc:	bl	160e4 <__assert_fail@plt+0x4f98>
   131c0:	cmp	r0, #0
   131c4:	beq	13040 <__assert_fail@plt+0x1ef4>
   131c8:	b	1321c <__assert_fail@plt+0x20d0>
   131cc:	mov	r0, r5
   131d0:	bl	110bc <__uflow@plt>
   131d4:	cmn	r0, #1
   131d8:	bne	13090 <__assert_fail@plt+0x1f44>
   131dc:	cmp	r6, r4
   131e0:	beq	13234 <__assert_fail@plt+0x20e8>
   131e4:	ldr	r0, [sp, #20]
   131e8:	mov	r1, #0
   131ec:	add	r0, r4, r0
   131f0:	strb	r1, [r6], -r0
   131f4:	ldr	r0, [sp, #4]
   131f8:	cmp	r6, #0
   131fc:	mvneq	r6, #0
   13200:	str	r4, [r0]
   13204:	ldr	r0, [sp, #8]
   13208:	str	r8, [r0]
   1320c:	mov	r0, r6
   13210:	sub	sp, fp, #28
   13214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13218:	ldr	r8, [sp, #12]
   1321c:	ldmib	sp, {r5, sl}
   13220:	str	r4, [r5]
   13224:	str	r8, [sl]
   13228:	mvn	r0, #0
   1322c:	sub	sp, fp, #28
   13230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13234:	mov	r4, r6
   13238:	b	1321c <__assert_fail@plt+0x20d0>
   1323c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13240:	add	fp, sp, #24
   13244:	uxtb	ip, r2
   13248:	uxtb	r1, r1
   1324c:	cmp	r1, ip
   13250:	bne	13260 <__assert_fail@plt+0x2114>
   13254:	mov	r2, r3
   13258:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1325c:	b	11098 <memchr@plt>
   13260:	cmp	r3, #0
   13264:	beq	1328c <__assert_fail@plt+0x2140>
   13268:	ands	r2, r0, #3
   1326c:	beq	1328c <__assert_fail@plt+0x2140>
   13270:	ldrb	r2, [r0]
   13274:	cmp	r1, r2
   13278:	cmpne	ip, r2
   1327c:	beq	13334 <__assert_fail@plt+0x21e8>
   13280:	subs	r3, r3, #1
   13284:	add	r0, r0, #1
   13288:	bne	13268 <__assert_fail@plt+0x211c>
   1328c:	orr	r7, ip, ip, lsl #8
   13290:	movw	r6, #32896	; 0x8080
   13294:	rsb	r2, r0, #0
   13298:	movt	r6, #32896	; 0x8080
   1329c:	orr	r8, r7, r7, lsl #16
   132a0:	orr	r7, r1, r1, lsl #8
   132a4:	orr	r9, r7, r7, lsl #16
   132a8:	movw	r7, #65279	; 0xfeff
   132ac:	movt	r7, #65278	; 0xfefe
   132b0:	mov	lr, r3
   132b4:	mov	r4, r2
   132b8:	cmp	r3, #4
   132bc:	bcc	13300 <__assert_fail@plt+0x21b4>
   132c0:	rsb	r2, r4, #0
   132c4:	add	r0, r0, #4
   132c8:	ldr	r2, [r2]
   132cc:	eor	r3, r2, r8
   132d0:	eor	r2, r2, r9
   132d4:	eor	r5, r3, r6
   132d8:	add	r3, r3, r7
   132dc:	and	r3, r3, r5
   132e0:	eor	r5, r2, r6
   132e4:	add	r2, r2, r7
   132e8:	and	r2, r2, r5
   132ec:	orr	r5, r2, r3
   132f0:	sub	r2, r4, #4
   132f4:	sub	r3, lr, #4
   132f8:	tst	r5, r6
   132fc:	beq	132b0 <__assert_fail@plt+0x2164>
   13300:	mov	r0, #0
   13304:	cmp	lr, #0
   13308:	beq	13334 <__assert_fail@plt+0x21e8>
   1330c:	ldrb	r2, [r0, -r4]
   13310:	cmp	r1, r2
   13314:	cmpne	ip, r2
   13318:	beq	13330 <__assert_fail@plt+0x21e4>
   1331c:	add	r0, r0, #1
   13320:	cmp	lr, r0
   13324:	bne	1330c <__assert_fail@plt+0x21c0>
   13328:	mov	r0, #0
   1332c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13330:	sub	r0, r0, r4
   13334:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13338:	push	{r4, r5, fp, lr}
   1333c:	add	fp, sp, #8
   13340:	cmp	r0, #0
   13344:	beq	133d8 <__assert_fail@plt+0x228c>
   13348:	mov	r1, #47	; 0x2f
   1334c:	mov	r4, r0
   13350:	bl	110e0 <strrchr@plt>
   13354:	cmp	r0, #0
   13358:	mov	r5, r4
   1335c:	addne	r5, r0, #1
   13360:	sub	r0, r5, r4
   13364:	cmp	r0, #7
   13368:	blt	133bc <__assert_fail@plt+0x2270>
   1336c:	movw	r1, #28977	; 0x7131
   13370:	sub	r0, r5, #7
   13374:	mov	r2, #7
   13378:	movt	r1, #1
   1337c:	bl	11128 <strncmp@plt>
   13380:	cmp	r0, #0
   13384:	bne	133bc <__assert_fail@plt+0x2270>
   13388:	movw	r1, #28985	; 0x7139
   1338c:	mov	r0, r5
   13390:	mov	r2, #3
   13394:	movt	r1, #1
   13398:	bl	11128 <strncmp@plt>
   1339c:	cmp	r0, #0
   133a0:	beq	133ac <__assert_fail@plt+0x2260>
   133a4:	mov	r4, r5
   133a8:	b	133bc <__assert_fail@plt+0x2270>
   133ac:	movw	r0, #33088	; 0x8140
   133b0:	add	r4, r5, #3
   133b4:	movt	r0, #2
   133b8:	str	r4, [r0]
   133bc:	movw	r0, #33092	; 0x8144
   133c0:	movt	r0, #2
   133c4:	str	r4, [r0]
   133c8:	movw	r0, #33172	; 0x8194
   133cc:	movt	r0, #2
   133d0:	str	r4, [r0]
   133d4:	pop	{r4, r5, fp, pc}
   133d8:	movw	r0, #33104	; 0x8150
   133dc:	mov	r1, #55	; 0x37
   133e0:	mov	r2, #1
   133e4:	movt	r0, #2
   133e8:	ldr	r3, [r0]
   133ec:	movw	r0, #28921	; 0x70f9
   133f0:	movt	r0, #1
   133f4:	bl	10f78 <fwrite@plt>
   133f8:	bl	11134 <abort@plt>
   133fc:	push	{r4, r5, r6, sl, fp, lr}
   13400:	add	fp, sp, #16
   13404:	mov	r4, r0
   13408:	movw	r0, #33176	; 0x8198
   1340c:	movt	r0, #2
   13410:	cmp	r4, #0
   13414:	moveq	r4, r0
   13418:	bl	11044 <__errno_location@plt>
   1341c:	ldr	r6, [r0]
   13420:	mov	r5, r0
   13424:	mov	r0, r4
   13428:	mov	r1, #48	; 0x30
   1342c:	bl	15e34 <__assert_fail@plt+0x4ce8>
   13430:	str	r6, [r5]
   13434:	pop	{r4, r5, r6, sl, fp, pc}
   13438:	movw	r1, #33176	; 0x8198
   1343c:	cmp	r0, #0
   13440:	movt	r1, #2
   13444:	movne	r1, r0
   13448:	ldr	r0, [r1]
   1344c:	bx	lr
   13450:	movw	r2, #33176	; 0x8198
   13454:	cmp	r0, #0
   13458:	movt	r2, #2
   1345c:	movne	r2, r0
   13460:	str	r1, [r2]
   13464:	bx	lr
   13468:	movw	r3, #33176	; 0x8198
   1346c:	cmp	r0, #0
   13470:	and	r2, r2, #1
   13474:	movt	r3, #2
   13478:	movne	r3, r0
   1347c:	ubfx	r0, r1, #5, #3
   13480:	and	r1, r1, #31
   13484:	add	ip, r3, r0, lsl #2
   13488:	mov	r0, #1
   1348c:	ldr	r3, [ip, #8]
   13490:	and	r0, r0, r3, lsr r1
   13494:	eor	r2, r0, r2
   13498:	eor	r1, r3, r2, lsl r1
   1349c:	str	r1, [ip, #8]
   134a0:	bx	lr
   134a4:	movw	r2, #33176	; 0x8198
   134a8:	cmp	r0, #0
   134ac:	movt	r2, #2
   134b0:	movne	r2, r0
   134b4:	ldr	r0, [r2, #4]
   134b8:	str	r1, [r2, #4]
   134bc:	bx	lr
   134c0:	push	{fp, lr}
   134c4:	mov	fp, sp
   134c8:	movw	r3, #33176	; 0x8198
   134cc:	cmp	r0, #0
   134d0:	movt	r3, #2
   134d4:	movne	r3, r0
   134d8:	cmp	r1, #0
   134dc:	mov	r0, #10
   134e0:	cmpne	r2, #0
   134e4:	str	r0, [r3]
   134e8:	bne	134f0 <__assert_fail@plt+0x23a4>
   134ec:	bl	11134 <abort@plt>
   134f0:	str	r1, [r3, #40]	; 0x28
   134f4:	str	r2, [r3, #44]	; 0x2c
   134f8:	pop	{fp, pc}
   134fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13500:	add	fp, sp, #28
   13504:	sub	sp, sp, #20
   13508:	mov	r7, r0
   1350c:	ldr	r0, [fp, #8]
   13510:	movw	r5, #33176	; 0x8198
   13514:	mov	r8, r3
   13518:	mov	r9, r2
   1351c:	mov	sl, r1
   13520:	movt	r5, #2
   13524:	cmp	r0, #0
   13528:	movne	r5, r0
   1352c:	bl	11044 <__errno_location@plt>
   13530:	ldr	r2, [r5, #40]	; 0x28
   13534:	ldr	r3, [r5, #44]	; 0x2c
   13538:	mov	r4, r0
   1353c:	ldm	r5, {r0, r1}
   13540:	add	r5, r5, #8
   13544:	ldr	r6, [r4]
   13548:	stm	sp, {r0, r1, r5}
   1354c:	mov	r0, r7
   13550:	mov	r1, sl
   13554:	str	r2, [sp, #12]
   13558:	str	r3, [sp, #16]
   1355c:	mov	r2, r9
   13560:	mov	r3, r8
   13564:	bl	13574 <__assert_fail@plt+0x2428>
   13568:	str	r6, [r4]
   1356c:	sub	sp, fp, #28
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13578:	add	fp, sp, #28
   1357c:	sub	sp, sp, #156	; 0x9c
   13580:	str	r0, [fp, #-84]	; 0xffffffac
   13584:	add	r0, r2, #1
   13588:	mov	r6, r1
   1358c:	mov	r7, r3
   13590:	str	r2, [fp, #-80]	; 0xffffffb0
   13594:	str	r0, [sp, #80]	; 0x50
   13598:	ldr	r0, [fp, #12]
   1359c:	and	r1, r0, #1
   135a0:	str	r1, [sp, #36]	; 0x24
   135a4:	and	r1, r0, #4
   135a8:	str	r1, [sp, #32]
   135ac:	ubfx	r8, r0, #1, #1
   135b0:	bl	10f90 <__ctype_get_mb_cur_max@plt>
   135b4:	str	r0, [sp, #40]	; 0x28
   135b8:	ldr	r0, [fp, #24]
   135bc:	ldr	r4, [fp, #8]
   135c0:	mov	r1, #0
   135c4:	str	r1, [fp, #-52]	; 0xffffffcc
   135c8:	mov	r1, #0
   135cc:	str	r1, [sp, #60]	; 0x3c
   135d0:	mov	r1, #1
   135d4:	str	r1, [sp, #84]	; 0x54
   135d8:	str	r0, [sp, #76]	; 0x4c
   135dc:	ldr	r0, [fp, #20]
   135e0:	str	r0, [sp, #72]	; 0x48
   135e4:	mov	r0, #0
   135e8:	str	r0, [sp, #56]	; 0x38
   135ec:	mov	r0, #0
   135f0:	str	r0, [fp, #-88]	; 0xffffffa8
   135f4:	mov	r0, #0
   135f8:	str	r0, [fp, #-72]	; 0xffffffb8
   135fc:	mov	r0, #0
   13600:	cmp	r4, #10
   13604:	bhi	14920 <__assert_fail@plt+0x37d4>
   13608:	add	r1, pc, #24
   1360c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13610:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13614:	mov	r5, r6
   13618:	mov	r9, #0
   1361c:	mov	r2, #1
   13620:	mov	r3, #0
   13624:	ldr	pc, [r1, r4, lsl #2]
   13628:	strdeq	r3, [r1], -r0
   1362c:	andeq	r3, r1, ip, lsr #14
   13630:	andeq	r3, r1, r0, lsl #14
   13634:	andeq	r3, r1, r8, ror #13
   13638:	andeq	r3, r1, r0, lsr #14
   1363c:	andeq	r3, r1, r4, lsl #15
   13640:	andeq	r3, r1, r0, lsl r7
   13644:	strdeq	r3, [r1], -ip
   13648:	andeq	r3, r1, r4, asr r6
   1364c:	andeq	r3, r1, r4, asr r6
   13650:	andeq	r3, r1, ip, lsl #17
   13654:	movw	r6, #29067	; 0x718b
   13658:	mov	r0, #0
   1365c:	mov	r2, #5
   13660:	movt	r6, #1
   13664:	mov	r1, r6
   13668:	bl	10f48 <dcgettext@plt>
   1366c:	cmp	r0, r6
   13670:	str	r0, [sp, #72]	; 0x48
   13674:	bne	13864 <__assert_fail@plt+0x2718>
   13678:	bl	16230 <__assert_fail@plt+0x50e4>
   1367c:	ldrb	r1, [r0]
   13680:	and	r1, r1, #223	; 0xdf
   13684:	cmp	r1, #71	; 0x47
   13688:	beq	137e4 <__assert_fail@plt+0x2698>
   1368c:	cmp	r1, #85	; 0x55
   13690:	bne	13848 <__assert_fail@plt+0x26fc>
   13694:	ldrb	r1, [r0, #1]
   13698:	and	r1, r1, #223	; 0xdf
   1369c:	cmp	r1, #84	; 0x54
   136a0:	bne	13848 <__assert_fail@plt+0x26fc>
   136a4:	ldrb	r1, [r0, #2]
   136a8:	and	r1, r1, #223	; 0xdf
   136ac:	cmp	r1, #70	; 0x46
   136b0:	bne	13848 <__assert_fail@plt+0x26fc>
   136b4:	ldrb	r1, [r0, #3]
   136b8:	cmp	r1, #45	; 0x2d
   136bc:	bne	13848 <__assert_fail@plt+0x26fc>
   136c0:	ldrb	r1, [r0, #4]
   136c4:	cmp	r1, #56	; 0x38
   136c8:	bne	13848 <__assert_fail@plt+0x26fc>
   136cc:	ldrb	r0, [r0, #5]
   136d0:	cmp	r0, #0
   136d4:	movw	r0, #29071	; 0x718f
   136d8:	movt	r0, #1
   136dc:	str	r0, [sp, #72]	; 0x48
   136e0:	bne	13848 <__assert_fail@plt+0x26fc>
   136e4:	b	13864 <__assert_fail@plt+0x2718>
   136e8:	mov	r0, #1
   136ec:	b	1372c <__assert_fail@plt+0x25e0>
   136f0:	mov	r4, #0
   136f4:	mov	r9, #0
   136f8:	mov	r2, r0
   136fc:	b	1377c <__assert_fail@plt+0x2630>
   13700:	tst	r8, #1
   13704:	bne	1372c <__assert_fail@plt+0x25e0>
   13708:	mov	r2, r0
   1370c:	b	13754 <__assert_fail@plt+0x2608>
   13710:	mov	r0, #1
   13714:	mov	r9, #0
   13718:	mov	r4, #5
   1371c:	b	13798 <__assert_fail@plt+0x264c>
   13720:	mov	r2, #1
   13724:	tst	r8, #1
   13728:	beq	13754 <__assert_fail@plt+0x2608>
   1372c:	mov	r1, #1
   13730:	mov	r9, #0
   13734:	mov	r4, #2
   13738:	mov	r2, r0
   1373c:	mov	r3, #1
   13740:	str	r1, [fp, #-72]	; 0xffffffb8
   13744:	movw	r1, #29069	; 0x718d
   13748:	movt	r1, #1
   1374c:	str	r1, [fp, #-88]	; 0xffffffa8
   13750:	b	139fc <__assert_fail@plt+0x28b0>
   13754:	cmp	r5, #0
   13758:	mov	r9, #1
   1375c:	mov	r4, #2
   13760:	movne	r0, #39	; 0x27
   13764:	strbne	r0, [ip]
   13768:	movw	r0, #29069	; 0x718d
   1376c:	movt	r0, #1
   13770:	str	r0, [fp, #-88]	; 0xffffffa8
   13774:	mov	r0, #1
   13778:	str	r0, [fp, #-72]	; 0xffffffb8
   1377c:	mov	r3, #0
   13780:	b	139fc <__assert_fail@plt+0x28b0>
   13784:	mov	r4, #5
   13788:	tst	r8, #1
   1378c:	beq	137b4 <__assert_fail@plt+0x2668>
   13790:	mov	r0, #1
   13794:	mov	r9, #0
   13798:	str	r0, [fp, #-72]	; 0xffffffb8
   1379c:	movw	r0, #29065	; 0x7189
   137a0:	mov	r2, #1
   137a4:	mov	r3, #1
   137a8:	movt	r0, #1
   137ac:	str	r0, [fp, #-88]	; 0xffffffa8
   137b0:	b	139fc <__assert_fail@plt+0x28b0>
   137b4:	cmp	r5, #0
   137b8:	mov	r3, #0
   137bc:	mov	r9, #1
   137c0:	mov	r2, #1
   137c4:	movne	r0, #34	; 0x22
   137c8:	strbne	r0, [ip]
   137cc:	movw	r0, #29065	; 0x7189
   137d0:	movt	r0, #1
   137d4:	str	r0, [fp, #-88]	; 0xffffffa8
   137d8:	mov	r0, #1
   137dc:	str	r0, [fp, #-72]	; 0xffffffb8
   137e0:	b	139fc <__assert_fail@plt+0x28b0>
   137e4:	ldrb	r1, [r0, #1]
   137e8:	and	r1, r1, #223	; 0xdf
   137ec:	cmp	r1, #66	; 0x42
   137f0:	bne	13848 <__assert_fail@plt+0x26fc>
   137f4:	ldrb	r1, [r0, #2]
   137f8:	cmp	r1, #49	; 0x31
   137fc:	bne	13848 <__assert_fail@plt+0x26fc>
   13800:	ldrb	r1, [r0, #3]
   13804:	cmp	r1, #56	; 0x38
   13808:	bne	13848 <__assert_fail@plt+0x26fc>
   1380c:	ldrb	r1, [r0, #4]
   13810:	cmp	r1, #48	; 0x30
   13814:	bne	13848 <__assert_fail@plt+0x26fc>
   13818:	ldrb	r1, [r0, #5]
   1381c:	cmp	r1, #51	; 0x33
   13820:	bne	13848 <__assert_fail@plt+0x26fc>
   13824:	ldrb	r1, [r0, #6]
   13828:	cmp	r1, #48	; 0x30
   1382c:	bne	13848 <__assert_fail@plt+0x26fc>
   13830:	ldrb	r0, [r0, #7]
   13834:	cmp	r0, #0
   13838:	movw	r0, #29079	; 0x7197
   1383c:	movt	r0, #1
   13840:	str	r0, [sp, #72]	; 0x48
   13844:	beq	13864 <__assert_fail@plt+0x2718>
   13848:	movw	r1, #29065	; 0x7189
   1384c:	movw	r0, #29069	; 0x718d
   13850:	cmp	r4, #9
   13854:	movt	r1, #1
   13858:	movt	r0, #1
   1385c:	moveq	r0, r1
   13860:	str	r0, [sp, #72]	; 0x48
   13864:	movw	r6, #29069	; 0x718d
   13868:	mov	r0, #0
   1386c:	mov	r2, #5
   13870:	movt	r6, #1
   13874:	mov	r1, r6
   13878:	bl	10f48 <dcgettext@plt>
   1387c:	cmp	r0, r6
   13880:	str	r0, [sp, #76]	; 0x4c
   13884:	beq	138d0 <__assert_fail@plt+0x2784>
   13888:	ldr	ip, [fp, #-84]	; 0xffffffac
   1388c:	mov	r9, #0
   13890:	tst	r8, #1
   13894:	bne	139d8 <__assert_fail@plt+0x288c>
   13898:	ldr	r0, [sp, #72]	; 0x48
   1389c:	ldrb	r0, [r0]
   138a0:	cmp	r0, #0
   138a4:	beq	139d8 <__assert_fail@plt+0x288c>
   138a8:	ldr	r1, [sp, #72]	; 0x48
   138ac:	mov	r9, #0
   138b0:	add	r1, r1, #1
   138b4:	cmp	r9, r5
   138b8:	strbcc	r0, [ip, r9]
   138bc:	ldrb	r0, [r1, r9]
   138c0:	add	r9, r9, #1
   138c4:	cmp	r0, #0
   138c8:	bne	138b4 <__assert_fail@plt+0x2768>
   138cc:	b	139d8 <__assert_fail@plt+0x288c>
   138d0:	bl	16230 <__assert_fail@plt+0x50e4>
   138d4:	ldrb	r1, [r0]
   138d8:	and	r1, r1, #223	; 0xdf
   138dc:	cmp	r1, #71	; 0x47
   138e0:	beq	13950 <__assert_fail@plt+0x2804>
   138e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   138e8:	cmp	r1, #85	; 0x55
   138ec:	bne	139ac <__assert_fail@plt+0x2860>
   138f0:	ldrb	r1, [r0, #1]
   138f4:	and	r1, r1, #223	; 0xdf
   138f8:	cmp	r1, #84	; 0x54
   138fc:	bne	139ac <__assert_fail@plt+0x2860>
   13900:	ldrb	r1, [r0, #2]
   13904:	and	r1, r1, #223	; 0xdf
   13908:	cmp	r1, #70	; 0x46
   1390c:	bne	139ac <__assert_fail@plt+0x2860>
   13910:	ldrb	r1, [r0, #3]
   13914:	cmp	r1, #45	; 0x2d
   13918:	bne	139ac <__assert_fail@plt+0x2860>
   1391c:	ldrb	r1, [r0, #4]
   13920:	cmp	r1, #56	; 0x38
   13924:	bne	139ac <__assert_fail@plt+0x2860>
   13928:	ldrb	r0, [r0, #5]
   1392c:	cmp	r0, #0
   13930:	bne	139ac <__assert_fail@plt+0x2860>
   13934:	movw	r0, #29075	; 0x7193
   13938:	movt	r0, #1
   1393c:	str	r0, [sp, #76]	; 0x4c
   13940:	mov	r9, #0
   13944:	tst	r8, #1
   13948:	beq	13898 <__assert_fail@plt+0x274c>
   1394c:	b	139d8 <__assert_fail@plt+0x288c>
   13950:	ldrb	r1, [r0, #1]
   13954:	ldr	ip, [fp, #-84]	; 0xffffffac
   13958:	and	r1, r1, #223	; 0xdf
   1395c:	cmp	r1, #66	; 0x42
   13960:	bne	139ac <__assert_fail@plt+0x2860>
   13964:	ldrb	r1, [r0, #2]
   13968:	cmp	r1, #49	; 0x31
   1396c:	bne	139ac <__assert_fail@plt+0x2860>
   13970:	ldrb	r1, [r0, #3]
   13974:	cmp	r1, #56	; 0x38
   13978:	bne	139ac <__assert_fail@plt+0x2860>
   1397c:	ldrb	r1, [r0, #4]
   13980:	cmp	r1, #48	; 0x30
   13984:	bne	139ac <__assert_fail@plt+0x2860>
   13988:	ldrb	r1, [r0, #5]
   1398c:	cmp	r1, #51	; 0x33
   13990:	bne	139ac <__assert_fail@plt+0x2860>
   13994:	ldrb	r1, [r0, #6]
   13998:	cmp	r1, #48	; 0x30
   1399c:	bne	139ac <__assert_fail@plt+0x2860>
   139a0:	ldrb	r0, [r0, #7]
   139a4:	cmp	r0, #0
   139a8:	beq	147c0 <__assert_fail@plt+0x3674>
   139ac:	movw	r0, #29069	; 0x718d
   139b0:	cmp	r4, #9
   139b4:	movt	r0, #1
   139b8:	mov	r1, r0
   139bc:	movw	r0, #29065	; 0x7189
   139c0:	movt	r0, #1
   139c4:	moveq	r1, r0
   139c8:	str	r1, [sp, #76]	; 0x4c
   139cc:	mov	r9, #0
   139d0:	tst	r8, #1
   139d4:	beq	13898 <__assert_fail@plt+0x274c>
   139d8:	ldr	r6, [sp, #76]	; 0x4c
   139dc:	mov	r0, r6
   139e0:	bl	1102c <strlen@plt>
   139e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   139e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   139ec:	str	r0, [fp, #-72]	; 0xffffffb8
   139f0:	str	r6, [fp, #-88]	; 0xffffffa8
   139f4:	mov	r2, #1
   139f8:	mov	r3, r8
   139fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a00:	str	r4, [fp, #-64]	; 0xffffffc0
   13a04:	mov	sl, #0
   13a08:	str	r3, [fp, #-76]	; 0xffffffb4
   13a0c:	str	r2, [sp, #88]	; 0x58
   13a10:	cmp	r0, #0
   13a14:	movwne	r0, #1
   13a18:	and	r1, r0, r3
   13a1c:	and	r1, r2, r1
   13a20:	str	r1, [sp, #48]	; 0x30
   13a24:	sub	r1, r4, #2
   13a28:	clz	r1, r1
   13a2c:	lsr	r1, r1, #5
   13a30:	and	r1, r1, r3
   13a34:	str	r1, [sp, #44]	; 0x2c
   13a38:	subs	r1, r4, #2
   13a3c:	eor	r4, r3, #1
   13a40:	movwne	r1, #1
   13a44:	str	r4, [sp, #92]	; 0x5c
   13a48:	orr	r4, r1, r4
   13a4c:	and	r1, r1, r2
   13a50:	and	r0, r0, r1
   13a54:	str	r4, [sp, #64]	; 0x40
   13a58:	ldr	r4, [sp, #84]	; 0x54
   13a5c:	str	r0, [fp, #-60]	; 0xffffffc4
   13a60:	orr	r0, r1, r3
   13a64:	ldr	r1, [fp, #16]
   13a68:	eor	r0, r0, #1
   13a6c:	clz	r1, r1
   13a70:	lsr	r1, r1, #5
   13a74:	orr	r0, r1, r0
   13a78:	str	r0, [fp, #-68]	; 0xffffffbc
   13a7c:	eor	r0, r2, #1
   13a80:	str	r0, [sp, #52]	; 0x34
   13a84:	cmn	r7, #1
   13a88:	beq	13a98 <__assert_fail@plt+0x294c>
   13a8c:	cmp	sl, r7
   13a90:	bne	13aa4 <__assert_fail@plt+0x2958>
   13a94:	b	14738 <__assert_fail@plt+0x35ec>
   13a98:	ldrb	r0, [lr, sl]
   13a9c:	cmp	r0, #0
   13aa0:	beq	14740 <__assert_fail@plt+0x35f4>
   13aa4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13aa8:	cmp	r0, #0
   13aac:	beq	13b0c <__assert_fail@plt+0x29c0>
   13ab0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ab4:	mov	r6, r5
   13ab8:	add	r5, sl, r0
   13abc:	cmp	r0, #2
   13ac0:	bcc	13b2c <__assert_fail@plt+0x29e0>
   13ac4:	mov	r0, #0
   13ac8:	cmn	r7, #1
   13acc:	str	r0, [fp, #-56]	; 0xffffffc8
   13ad0:	bne	13ae8 <__assert_fail@plt+0x299c>
   13ad4:	mov	r0, lr
   13ad8:	bl	1102c <strlen@plt>
   13adc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ae0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ae4:	mov	r7, r0
   13ae8:	cmp	r5, r7
   13aec:	bls	13b3c <__assert_fail@plt+0x29f0>
   13af0:	mov	r0, #0
   13af4:	mov	r5, r6
   13af8:	str	r0, [fp, #-48]	; 0xffffffd0
   13afc:	ldrb	r6, [lr, sl]
   13b00:	cmp	r6, #126	; 0x7e
   13b04:	bls	13b8c <__assert_fail@plt+0x2a40>
   13b08:	b	140e8 <__assert_fail@plt+0x2f9c>
   13b0c:	mov	r0, #0
   13b10:	str	r0, [fp, #-56]	; 0xffffffc8
   13b14:	mov	r0, #0
   13b18:	str	r0, [fp, #-48]	; 0xffffffd0
   13b1c:	ldrb	r6, [lr, sl]
   13b20:	cmp	r6, #126	; 0x7e
   13b24:	bls	13b8c <__assert_fail@plt+0x2a40>
   13b28:	b	140e8 <__assert_fail@plt+0x2f9c>
   13b2c:	mov	r0, #0
   13b30:	str	r0, [fp, #-56]	; 0xffffffc8
   13b34:	cmp	r5, r7
   13b38:	bhi	13af0 <__assert_fail@plt+0x29a4>
   13b3c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13b40:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13b44:	add	r0, lr, sl
   13b48:	bl	11020 <bcmp@plt>
   13b4c:	ldr	r2, [sp, #92]	; 0x5c
   13b50:	cmp	r0, #0
   13b54:	mov	r1, r0
   13b58:	mov	r5, r6
   13b5c:	movwne	r1, #1
   13b60:	orr	r1, r1, r2
   13b64:	tst	r1, #1
   13b68:	beq	14800 <__assert_fail@plt+0x36b4>
   13b6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b70:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13b74:	clz	r0, r0
   13b78:	lsr	r0, r0, #5
   13b7c:	str	r0, [fp, #-48]	; 0xffffffd0
   13b80:	ldrb	r6, [lr, sl]
   13b84:	cmp	r6, #126	; 0x7e
   13b88:	bhi	140e8 <__assert_fail@plt+0x2f9c>
   13b8c:	add	r3, pc, #16
   13b90:	mov	r8, #1
   13b94:	mov	r2, #110	; 0x6e
   13b98:	mov	r0, #97	; 0x61
   13b9c:	mov	r1, #0
   13ba0:	ldr	pc, [r3, r6, lsl #2]
   13ba4:	andeq	r3, r1, r0, lsr #29
   13ba8:	andeq	r4, r1, r8, ror #1
   13bac:	andeq	r4, r1, r8, ror #1
   13bb0:	andeq	r4, r1, r8, ror #1
   13bb4:	andeq	r4, r1, r8, ror #1
   13bb8:	andeq	r4, r1, r8, ror #1
   13bbc:	andeq	r4, r1, r8, ror #1
   13bc0:	muleq	r1, ip, r1
   13bc4:	andeq	r3, r1, r0, lsl #29
   13bc8:	andeq	r3, r1, r8, ror lr
   13bcc:	andeq	r3, r1, ip, lsl #29
   13bd0:			; <UNDEFINED> instruction: 0x00013fbc
   13bd4:	andeq	r3, r1, r0, ror lr
   13bd8:	andeq	r3, r1, r8, lsl #29
   13bdc:	andeq	r4, r1, r8, ror #1
   13be0:	andeq	r4, r1, r8, ror #1
   13be4:	andeq	r4, r1, r8, ror #1
   13be8:	andeq	r4, r1, r8, ror #1
   13bec:	andeq	r4, r1, r8, ror #1
   13bf0:	andeq	r4, r1, r8, ror #1
   13bf4:	andeq	r4, r1, r8, ror #1
   13bf8:	andeq	r4, r1, r8, ror #1
   13bfc:	andeq	r4, r1, r8, ror #1
   13c00:	andeq	r4, r1, r8, ror #1
   13c04:	andeq	r4, r1, r8, ror #1
   13c08:	andeq	r4, r1, r8, ror #1
   13c0c:	andeq	r4, r1, r8, ror #1
   13c10:	andeq	r4, r1, r8, ror #1
   13c14:	andeq	r4, r1, r8, ror #1
   13c18:	andeq	r4, r1, r8, ror #1
   13c1c:	andeq	r4, r1, r8, ror #1
   13c20:	andeq	r4, r1, r8, ror #1
   13c24:	andeq	r3, r1, r4, lsl lr
   13c28:	andeq	r3, r1, r8, lsl lr
   13c2c:	andeq	r3, r1, r8, lsl lr
   13c30:	andeq	r3, r1, r8, lsl #28
   13c34:	andeq	r3, r1, r8, lsl lr
   13c38:	andeq	r3, r1, r0, lsr #27
   13c3c:	andeq	r3, r1, r8, lsl lr
   13c40:	andeq	r3, r1, r4, asr #31
   13c44:	andeq	r3, r1, r8, lsl lr
   13c48:	andeq	r3, r1, r8, lsl lr
   13c4c:	andeq	r3, r1, r8, lsl lr
   13c50:	andeq	r3, r1, r0, lsr #27
   13c54:	andeq	r3, r1, r0, lsr #27
   13c58:	andeq	r3, r1, r0, lsr #27
   13c5c:	andeq	r3, r1, r0, lsr #27
   13c60:	andeq	r3, r1, r0, lsr #27
   13c64:	andeq	r3, r1, r0, lsr #27
   13c68:	andeq	r3, r1, r0, lsr #27
   13c6c:	andeq	r3, r1, r0, lsr #27
   13c70:	andeq	r3, r1, r0, lsr #27
   13c74:	andeq	r3, r1, r0, lsr #27
   13c78:	andeq	r3, r1, r0, lsr #27
   13c7c:	andeq	r3, r1, r0, lsr #27
   13c80:	andeq	r3, r1, r0, lsr #27
   13c84:	andeq	r3, r1, r0, lsr #27
   13c88:	andeq	r3, r1, r0, lsr #27
   13c8c:	andeq	r3, r1, r0, lsr #27
   13c90:	andeq	r3, r1, r8, lsl lr
   13c94:	andeq	r3, r1, r8, lsl lr
   13c98:	andeq	r3, r1, r8, lsl lr
   13c9c:	andeq	r3, r1, r8, lsl lr
   13ca0:	andeq	r3, r1, r8, lsl #31
   13ca4:	andeq	r4, r1, r8, ror #1
   13ca8:	andeq	r3, r1, r0, lsr #27
   13cac:	andeq	r3, r1, r0, lsr #27
   13cb0:	andeq	r3, r1, r0, lsr #27
   13cb4:	andeq	r3, r1, r0, lsr #27
   13cb8:	andeq	r3, r1, r0, lsr #27
   13cbc:	andeq	r3, r1, r0, lsr #27
   13cc0:	andeq	r3, r1, r0, lsr #27
   13cc4:	andeq	r3, r1, r0, lsr #27
   13cc8:	andeq	r3, r1, r0, lsr #27
   13ccc:	andeq	r3, r1, r0, lsr #27
   13cd0:	andeq	r3, r1, r0, lsr #27
   13cd4:	andeq	r3, r1, r0, lsr #27
   13cd8:	andeq	r3, r1, r0, lsr #27
   13cdc:	andeq	r3, r1, r0, lsr #27
   13ce0:	andeq	r3, r1, r0, lsr #27
   13ce4:	andeq	r3, r1, r0, lsr #27
   13ce8:	andeq	r3, r1, r0, lsr #27
   13cec:	andeq	r3, r1, r0, lsr #27
   13cf0:	andeq	r3, r1, r0, lsr #27
   13cf4:	andeq	r3, r1, r0, lsr #27
   13cf8:	andeq	r3, r1, r0, lsr #27
   13cfc:	andeq	r3, r1, r0, lsr #27
   13d00:	andeq	r3, r1, r0, lsr #27
   13d04:	andeq	r3, r1, r0, lsr #27
   13d08:	andeq	r3, r1, r0, lsr #27
   13d0c:	andeq	r3, r1, r0, lsr #27
   13d10:	andeq	r3, r1, r8, lsl lr
   13d14:	andeq	r3, r1, ip, asr #28
   13d18:	andeq	r3, r1, r0, lsr #27
   13d1c:	andeq	r3, r1, r8, lsl lr
   13d20:	andeq	r3, r1, r0, lsr #27
   13d24:	andeq	r3, r1, r8, lsl lr
   13d28:	andeq	r3, r1, r0, lsr #27
   13d2c:	andeq	r3, r1, r0, lsr #27
   13d30:	andeq	r3, r1, r0, lsr #27
   13d34:	andeq	r3, r1, r0, lsr #27
   13d38:	andeq	r3, r1, r0, lsr #27
   13d3c:	andeq	r3, r1, r0, lsr #27
   13d40:	andeq	r3, r1, r0, lsr #27
   13d44:	andeq	r3, r1, r0, lsr #27
   13d48:	andeq	r3, r1, r0, lsr #27
   13d4c:	andeq	r3, r1, r0, lsr #27
   13d50:	andeq	r3, r1, r0, lsr #27
   13d54:	andeq	r3, r1, r0, lsr #27
   13d58:	andeq	r3, r1, r0, lsr #27
   13d5c:	andeq	r3, r1, r0, lsr #27
   13d60:	andeq	r3, r1, r0, lsr #27
   13d64:	andeq	r3, r1, r0, lsr #27
   13d68:	andeq	r3, r1, r0, lsr #27
   13d6c:	andeq	r3, r1, r0, lsr #27
   13d70:	andeq	r3, r1, r0, lsr #27
   13d74:	andeq	r3, r1, r0, lsr #27
   13d78:	andeq	r3, r1, r0, lsr #27
   13d7c:	andeq	r3, r1, r0, lsr #27
   13d80:	andeq	r3, r1, r0, lsr #27
   13d84:	andeq	r3, r1, r0, lsr #27
   13d88:	andeq	r3, r1, r0, lsr #27
   13d8c:	andeq	r3, r1, r0, lsr #27
   13d90:	andeq	r3, r1, r0, ror #27
   13d94:	andeq	r3, r1, r8, lsl lr
   13d98:	andeq	r3, r1, r0, ror #27
   13d9c:	andeq	r3, r1, r8, lsl #28
   13da0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13da4:	tst	r0, #1
   13da8:	bne	14060 <__assert_fail@plt+0x2f14>
   13dac:	ldr	r1, [fp, #16]
   13db0:	ubfx	r0, r6, #5, #3
   13db4:	mov	r2, #1
   13db8:	ldr	r0, [r1, r0, lsl #2]
   13dbc:	and	r1, r6, #31
   13dc0:	tst	r0, r2, lsl r1
   13dc4:	beq	14060 <__assert_fail@plt+0x2f14>
   13dc8:	mov	r0, r6
   13dcc:	mov	r1, r8
   13dd0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13dd4:	tst	r2, #1
   13dd8:	beq	14080 <__assert_fail@plt+0x2f34>
   13ddc:	b	147dc <__assert_fail@plt+0x3690>
   13de0:	cmp	r7, #1
   13de4:	beq	13e08 <__assert_fail@plt+0x2cbc>
   13de8:	mov	r8, #0
   13dec:	cmn	r7, #1
   13df0:	bne	1404c <__assert_fail@plt+0x2f00>
   13df4:	ldrb	r0, [lr, #1]
   13df8:	cmp	r0, #0
   13dfc:	beq	13e08 <__assert_fail@plt+0x2cbc>
   13e00:	mvn	r7, #0
   13e04:	b	1404c <__assert_fail@plt+0x2f00>
   13e08:	mov	r8, #0
   13e0c:	cmp	sl, #0
   13e10:	bne	1404c <__assert_fail@plt+0x2f00>
   13e14:	mov	r1, #1
   13e18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e1c:	cmp	r0, #2
   13e20:	bne	13e38 <__assert_fail@plt+0x2cec>
   13e24:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e28:	mov	r8, r1
   13e2c:	tst	r0, #1
   13e30:	beq	13da0 <__assert_fail@plt+0x2c54>
   13e34:	b	147dc <__assert_fail@plt+0x3690>
   13e38:	mov	r8, r1
   13e3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e40:	tst	r0, #1
   13e44:	beq	13dac <__assert_fail@plt+0x2c60>
   13e48:	b	14060 <__assert_fail@plt+0x2f14>
   13e4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e50:	cmp	r0, #2
   13e54:	bne	14114 <__assert_fail@plt+0x2fc8>
   13e58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e5c:	tst	r0, #1
   13e60:	bne	147dc <__assert_fail@plt+0x3690>
   13e64:	mov	r0, #0
   13e68:	str	r0, [fp, #-56]	; 0xffffffc8
   13e6c:	b	1412c <__assert_fail@plt+0x2fe0>
   13e70:	mov	r0, #102	; 0x66
   13e74:	b	1419c <__assert_fail@plt+0x3050>
   13e78:	mov	r2, #116	; 0x74
   13e7c:	b	13e8c <__assert_fail@plt+0x2d40>
   13e80:	mov	r0, #98	; 0x62
   13e84:	b	1419c <__assert_fail@plt+0x3050>
   13e88:	mov	r2, #114	; 0x72
   13e8c:	ldr	r0, [sp, #64]	; 0x40
   13e90:	tst	r0, #1
   13e94:	mov	r0, r2
   13e98:	bne	1419c <__assert_fail@plt+0x3050>
   13e9c:	b	147dc <__assert_fail@plt+0x3690>
   13ea0:	ldr	r0, [sp, #88]	; 0x58
   13ea4:	tst	r0, #1
   13ea8:	beq	141bc <__assert_fail@plt+0x3070>
   13eac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13eb0:	tst	r0, #1
   13eb4:	bne	14918 <__assert_fail@plt+0x37cc>
   13eb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ebc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13ec0:	subs	r0, r0, #2
   13ec4:	movwne	r0, #1
   13ec8:	orr	r0, r0, r1
   13ecc:	tst	r0, #1
   13ed0:	bne	13f0c <__assert_fail@plt+0x2dc0>
   13ed4:	cmp	r9, r5
   13ed8:	movcc	r0, #39	; 0x27
   13edc:	strbcc	r0, [ip, r9]
   13ee0:	add	r0, r9, #1
   13ee4:	cmp	r0, r5
   13ee8:	movcc	r1, #36	; 0x24
   13eec:	strbcc	r1, [ip, r0]
   13ef0:	add	r0, r9, #2
   13ef4:	add	r9, r9, #3
   13ef8:	cmp	r0, r5
   13efc:	movcc	r1, #39	; 0x27
   13f00:	strbcc	r1, [ip, r0]
   13f04:	mov	r0, #1
   13f08:	str	r0, [fp, #-52]	; 0xffffffcc
   13f0c:	mov	r1, #1
   13f10:	cmp	r9, r5
   13f14:	mov	r8, #0
   13f18:	mov	r6, #48	; 0x30
   13f1c:	str	r1, [fp, #-56]	; 0xffffffc8
   13f20:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13f24:	movcc	r0, #92	; 0x5c
   13f28:	strbcc	r0, [ip, r9]
   13f2c:	add	r0, r9, #1
   13f30:	cmp	r1, #2
   13f34:	beq	14388 <__assert_fail@plt+0x323c>
   13f38:	add	r1, sl, #1
   13f3c:	cmp	r1, r7
   13f40:	bcs	14388 <__assert_fail@plt+0x323c>
   13f44:	ldrb	r1, [lr, r1]
   13f48:	sub	r1, r1, #48	; 0x30
   13f4c:	uxtb	r1, r1
   13f50:	cmp	r1, #9
   13f54:	bhi	14388 <__assert_fail@plt+0x323c>
   13f58:	cmp	r0, r5
   13f5c:	movcc	r1, #48	; 0x30
   13f60:	strbcc	r1, [ip, r0]
   13f64:	add	r0, r9, #2
   13f68:	add	r9, r9, #3
   13f6c:	cmp	r0, r5
   13f70:	movcc	r1, #48	; 0x30
   13f74:	strbcc	r1, [ip, r0]
   13f78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f7c:	tst	r0, #1
   13f80:	beq	13dac <__assert_fail@plt+0x2c60>
   13f84:	b	14060 <__assert_fail@plt+0x2f14>
   13f88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f8c:	mov	r6, #63	; 0x3f
   13f90:	cmp	r0, #5
   13f94:	beq	1439c <__assert_fail@plt+0x3250>
   13f98:	mov	r1, #0
   13f9c:	cmp	r0, #2
   13fa0:	str	r1, [fp, #-56]	; 0xffffffc8
   13fa4:	bne	14464 <__assert_fail@plt+0x3318>
   13fa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13fac:	mov	r8, #0
   13fb0:	tst	r0, #1
   13fb4:	beq	13da0 <__assert_fail@plt+0x2c54>
   13fb8:	b	147dc <__assert_fail@plt+0x3690>
   13fbc:	mov	r0, #118	; 0x76
   13fc0:	b	1419c <__assert_fail@plt+0x3050>
   13fc4:	mov	r0, #1
   13fc8:	mov	r6, #39	; 0x27
   13fcc:	str	r0, [sp, #60]	; 0x3c
   13fd0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13fd4:	cmp	r0, #2
   13fd8:	bne	141dc <__assert_fail@plt+0x3090>
   13fdc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13fe0:	tst	r0, #1
   13fe4:	bne	147dc <__assert_fail@plt+0x3690>
   13fe8:	ldr	r2, [sp, #56]	; 0x38
   13fec:	clz	r1, r5
   13ff0:	mov	r8, #1
   13ff4:	lsr	r1, r1, #5
   13ff8:	cmp	r2, #0
   13ffc:	mov	r0, r2
   14000:	movwne	r0, #1
   14004:	orrs	r0, r0, r1
   14008:	moveq	r2, r5
   1400c:	moveq	r5, r0
   14010:	cmp	r9, r5
   14014:	str	r2, [sp, #56]	; 0x38
   14018:	movcc	r0, #39	; 0x27
   1401c:	strbcc	r0, [ip, r9]
   14020:	add	r0, r9, #1
   14024:	cmp	r0, r5
   14028:	movcc	r1, #92	; 0x5c
   1402c:	strbcc	r1, [ip, r0]
   14030:	add	r0, r9, #2
   14034:	add	r9, r9, #3
   14038:	cmp	r0, r5
   1403c:	movcc	r1, #39	; 0x27
   14040:	strbcc	r1, [ip, r0]
   14044:	mov	r0, #0
   14048:	str	r0, [fp, #-52]	; 0xffffffcc
   1404c:	mov	r0, #0
   14050:	str	r0, [fp, #-56]	; 0xffffffc8
   14054:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14058:	tst	r0, #1
   1405c:	beq	13dac <__assert_fail@plt+0x2c60>
   14060:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14064:	mov	r1, r8
   14068:	cmp	r0, #0
   1406c:	mov	r0, r6
   14070:	beq	14134 <__assert_fail@plt+0x2fe8>
   14074:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14078:	tst	r2, #1
   1407c:	bne	147dc <__assert_fail@plt+0x3690>
   14080:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14084:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14088:	subs	r2, r2, #2
   1408c:	movwne	r2, #1
   14090:	orr	r2, r2, r3
   14094:	tst	r2, #1
   14098:	bne	140d4 <__assert_fail@plt+0x2f88>
   1409c:	cmp	r9, r5
   140a0:	movcc	r2, #39	; 0x27
   140a4:	strbcc	r2, [ip, r9]
   140a8:	add	r2, r9, #1
   140ac:	cmp	r2, r5
   140b0:	movcc	r3, #36	; 0x24
   140b4:	strbcc	r3, [ip, r2]
   140b8:	add	r2, r9, #2
   140bc:	add	r9, r9, #3
   140c0:	cmp	r2, r5
   140c4:	movcc	r3, #39	; 0x27
   140c8:	strbcc	r3, [ip, r2]
   140cc:	mov	r2, #1
   140d0:	str	r2, [fp, #-52]	; 0xffffffcc
   140d4:	cmp	r9, r5
   140d8:	movcc	r2, #92	; 0x5c
   140dc:	strbcc	r2, [ip, r9]
   140e0:	add	r9, r9, #1
   140e4:	b	1417c <__assert_fail@plt+0x3030>
   140e8:	ldr	r0, [sp, #40]	; 0x28
   140ec:	cmp	r0, #1
   140f0:	bne	141f0 <__assert_fail@plt+0x30a4>
   140f4:	bl	11008 <__ctype_b_loc@plt>
   140f8:	ldr	r0, [r0]
   140fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14100:	mov	r1, #1
   14104:	add	r0, r0, r6, lsl #1
   14108:	ldrb	r0, [r0, #1]
   1410c:	ubfx	r8, r0, #6, #1
   14110:	b	14548 <__assert_fail@plt+0x33fc>
   14114:	ldr	r1, [sp, #48]	; 0x30
   14118:	mov	r0, #0
   1411c:	str	r0, [fp, #-56]	; 0xffffffc8
   14120:	mov	r0, #92	; 0x5c
   14124:	cmp	r1, #0
   14128:	beq	1419c <__assert_fail@plt+0x3050>
   1412c:	mov	r6, #92	; 0x5c
   14130:	mov	r8, #0
   14134:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14138:	cmp	r0, #0
   1413c:	bne	14174 <__assert_fail@plt+0x3028>
   14140:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14144:	tst	r0, #1
   14148:	beq	14174 <__assert_fail@plt+0x3028>
   1414c:	cmp	r9, r5
   14150:	movcc	r0, #39	; 0x27
   14154:	strbcc	r0, [ip, r9]
   14158:	add	r0, r9, #1
   1415c:	add	r9, r9, #2
   14160:	cmp	r0, r5
   14164:	movcc	r1, #39	; 0x27
   14168:	strbcc	r1, [ip, r0]
   1416c:	mov	r0, #0
   14170:	str	r0, [fp, #-52]	; 0xffffffcc
   14174:	mov	r1, r8
   14178:	mov	r0, r6
   1417c:	cmp	r9, r5
   14180:	and	r4, r4, r1
   14184:	strbcc	r0, [ip, r9]
   14188:	add	r9, r9, #1
   1418c:	add	sl, sl, #1
   14190:	cmn	r7, #1
   14194:	bne	13a8c <__assert_fail@plt+0x2940>
   14198:	b	13a98 <__assert_fail@plt+0x294c>
   1419c:	mov	r1, #0
   141a0:	mov	r8, #0
   141a4:	str	r1, [fp, #-56]	; 0xffffffc8
   141a8:	ldr	r1, [sp, #88]	; 0x58
   141ac:	tst	r1, #1
   141b0:	mov	r1, #0
   141b4:	beq	13da0 <__assert_fail@plt+0x2c54>
   141b8:	b	14074 <__assert_fail@plt+0x2f28>
   141bc:	ldr	r0, [sp, #36]	; 0x24
   141c0:	mov	r6, #0
   141c4:	mov	r8, #0
   141c8:	cmp	r0, #0
   141cc:	mov	r0, #0
   141d0:	str	r0, [fp, #-56]	; 0xffffffc8
   141d4:	bne	1418c <__assert_fail@plt+0x3040>
   141d8:	b	13da0 <__assert_fail@plt+0x2c54>
   141dc:	mov	r8, #1
   141e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141e4:	tst	r0, #1
   141e8:	beq	13dac <__assert_fail@plt+0x2c60>
   141ec:	b	14060 <__assert_fail@plt+0x2f14>
   141f0:	mov	r0, #0
   141f4:	cmn	r7, #1
   141f8:	str	r0, [fp, #-36]	; 0xffffffdc
   141fc:	str	r0, [fp, #-40]	; 0xffffffd8
   14200:	bne	14214 <__assert_fail@plt+0x30c8>
   14204:	mov	r0, lr
   14208:	bl	1102c <strlen@plt>
   1420c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14210:	mov	r7, r0
   14214:	ldr	r0, [sp, #44]	; 0x2c
   14218:	str	r4, [sp, #84]	; 0x54
   1421c:	str	r5, [sp, #28]
   14220:	cmp	r0, #0
   14224:	beq	14478 <__assert_fail@plt+0x332c>
   14228:	ldr	r0, [sp, #80]	; 0x50
   1422c:	mov	r8, #1
   14230:	mov	r5, #0
   14234:	add	r0, r0, sl
   14238:	str	r0, [sp, #24]
   1423c:	sub	r0, fp, #40	; 0x28
   14240:	mov	r3, r0
   14244:	b	14280 <__assert_fail@plt+0x3134>
   14248:	ldr	r5, [sp, #68]	; 0x44
   1424c:	add	r5, r0, r5
   14250:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14254:	bl	10f6c <iswprint@plt>
   14258:	cmp	r0, #0
   1425c:	sub	r4, fp, #40	; 0x28
   14260:	movwne	r0, #1
   14264:	and	r8, r8, r0
   14268:	mov	r0, r4
   1426c:	bl	10f30 <mbsinit@plt>
   14270:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14274:	mov	r3, r4
   14278:	cmp	r0, #0
   1427c:	bne	1453c <__assert_fail@plt+0x33f0>
   14280:	str	r5, [sp, #68]	; 0x44
   14284:	add	r5, r5, sl
   14288:	sub	r0, fp, #44	; 0x2c
   1428c:	add	r1, lr, r5
   14290:	sub	r2, r7, r5
   14294:	bl	16268 <__assert_fail@plt+0x511c>
   14298:	cmn	r0, #2
   1429c:	beq	144fc <__assert_fail@plt+0x33b0>
   142a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   142a4:	cmn	r0, #1
   142a8:	beq	144f0 <__assert_fail@plt+0x33a4>
   142ac:	cmp	r0, #0
   142b0:	beq	144f4 <__assert_fail@plt+0x33a8>
   142b4:	cmp	r0, #2
   142b8:	bcc	14248 <__assert_fail@plt+0x30fc>
   142bc:	ldr	r1, [sp, #68]	; 0x44
   142c0:	ldr	r2, [sp, #24]
   142c4:	add	r1, r2, r1
   142c8:	sub	r2, r0, #1
   142cc:	ldrb	r3, [r1]
   142d0:	sub	r3, r3, #91	; 0x5b
   142d4:	cmp	r3, #33	; 0x21
   142d8:	bls	142f8 <__assert_fail@plt+0x31ac>
   142dc:	add	r1, r1, #1
   142e0:	subs	r2, r2, #1
   142e4:	beq	14248 <__assert_fail@plt+0x30fc>
   142e8:	ldrb	r3, [r1]
   142ec:	sub	r3, r3, #91	; 0x5b
   142f0:	cmp	r3, #33	; 0x21
   142f4:	bhi	142dc <__assert_fail@plt+0x3190>
   142f8:	add	r5, pc, #0
   142fc:	ldr	pc, [r5, r3, lsl #2]
   14300:	andeq	r4, r1, r4, lsl r8
   14304:	andeq	r4, r1, r4, lsl r8
   14308:	ldrdeq	r4, [r1], -ip
   1430c:	andeq	r4, r1, r4, lsl r8
   14310:	ldrdeq	r4, [r1], -ip
   14314:	andeq	r4, r1, r4, lsl r8
   14318:	ldrdeq	r4, [r1], -ip
   1431c:	ldrdeq	r4, [r1], -ip
   14320:	ldrdeq	r4, [r1], -ip
   14324:	ldrdeq	r4, [r1], -ip
   14328:	ldrdeq	r4, [r1], -ip
   1432c:	ldrdeq	r4, [r1], -ip
   14330:	ldrdeq	r4, [r1], -ip
   14334:	ldrdeq	r4, [r1], -ip
   14338:	ldrdeq	r4, [r1], -ip
   1433c:	ldrdeq	r4, [r1], -ip
   14340:	ldrdeq	r4, [r1], -ip
   14344:	ldrdeq	r4, [r1], -ip
   14348:	ldrdeq	r4, [r1], -ip
   1434c:	ldrdeq	r4, [r1], -ip
   14350:	ldrdeq	r4, [r1], -ip
   14354:	ldrdeq	r4, [r1], -ip
   14358:	ldrdeq	r4, [r1], -ip
   1435c:	ldrdeq	r4, [r1], -ip
   14360:	ldrdeq	r4, [r1], -ip
   14364:	ldrdeq	r4, [r1], -ip
   14368:	ldrdeq	r4, [r1], -ip
   1436c:	ldrdeq	r4, [r1], -ip
   14370:	ldrdeq	r4, [r1], -ip
   14374:	ldrdeq	r4, [r1], -ip
   14378:	ldrdeq	r4, [r1], -ip
   1437c:	ldrdeq	r4, [r1], -ip
   14380:	ldrdeq	r4, [r1], -ip
   14384:	andeq	r4, r1, r4, lsl r8
   14388:	mov	r9, r0
   1438c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14390:	tst	r0, #1
   14394:	beq	13dac <__assert_fail@plt+0x2c60>
   14398:	b	14060 <__assert_fail@plt+0x2f14>
   1439c:	mov	r0, #0
   143a0:	str	r0, [fp, #-56]	; 0xffffffc8
   143a4:	ldr	r0, [sp, #32]
   143a8:	cmp	r0, #0
   143ac:	beq	14464 <__assert_fail@plt+0x3318>
   143b0:	add	r0, sl, #2
   143b4:	mov	r1, r7
   143b8:	cmp	r0, r7
   143bc:	bcs	14464 <__assert_fail@plt+0x3318>
   143c0:	add	r1, sl, lr
   143c4:	ldrb	r1, [r1, #1]
   143c8:	cmp	r1, #63	; 0x3f
   143cc:	bne	14464 <__assert_fail@plt+0x3318>
   143d0:	ldrb	r8, [lr, r0]
   143d4:	sub	r2, r8, #33	; 0x21
   143d8:	cmp	r2, #29
   143dc:	bhi	14464 <__assert_fail@plt+0x3318>
   143e0:	mov	r1, r4
   143e4:	movw	r4, #20929	; 0x51c1
   143e8:	mov	r3, #1
   143ec:	movt	r4, #14336	; 0x3800
   143f0:	tst	r4, r3, lsl r2
   143f4:	beq	14720 <__assert_fail@plt+0x35d4>
   143f8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   143fc:	tst	r2, #1
   14400:	bne	147dc <__assert_fail@plt+0x3690>
   14404:	cmp	r9, r5
   14408:	mov	r6, r8
   1440c:	mov	r4, r1
   14410:	mov	sl, r0
   14414:	mov	r8, #0
   14418:	movcc	r2, #63	; 0x3f
   1441c:	strbcc	r2, [ip, r9]
   14420:	add	r2, r9, #1
   14424:	cmp	r2, r5
   14428:	movcc	r3, #34	; 0x22
   1442c:	strbcc	r3, [ip, r2]
   14430:	add	r2, r9, #2
   14434:	cmp	r2, r5
   14438:	movcc	r3, #34	; 0x22
   1443c:	strbcc	r3, [ip, r2]
   14440:	add	r2, r9, #3
   14444:	add	r9, r9, #4
   14448:	cmp	r2, r5
   1444c:	movcc	r3, #63	; 0x3f
   14450:	strbcc	r3, [ip, r2]
   14454:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14458:	tst	r0, #1
   1445c:	beq	13dac <__assert_fail@plt+0x2c60>
   14460:	b	14060 <__assert_fail@plt+0x2f14>
   14464:	mov	r8, #0
   14468:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1446c:	tst	r0, #1
   14470:	beq	13dac <__assert_fail@plt+0x2c60>
   14474:	b	14060 <__assert_fail@plt+0x2f14>
   14478:	mov	r8, #1
   1447c:	mov	r5, #0
   14480:	sub	r4, fp, #40	; 0x28
   14484:	str	r5, [sp, #68]	; 0x44
   14488:	add	r5, r5, sl
   1448c:	sub	r0, fp, #44	; 0x2c
   14490:	mov	r3, r4
   14494:	add	r1, lr, r5
   14498:	sub	r2, r7, r5
   1449c:	bl	16268 <__assert_fail@plt+0x511c>
   144a0:	cmn	r0, #2
   144a4:	beq	144fc <__assert_fail@plt+0x33b0>
   144a8:	cmn	r0, #1
   144ac:	beq	144f0 <__assert_fail@plt+0x33a4>
   144b0:	ldr	r5, [sp, #68]	; 0x44
   144b4:	cmp	r0, #0
   144b8:	beq	14538 <__assert_fail@plt+0x33ec>
   144bc:	add	r5, r0, r5
   144c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   144c4:	bl	10f6c <iswprint@plt>
   144c8:	cmp	r0, #0
   144cc:	sub	r4, fp, #40	; 0x28
   144d0:	movwne	r0, #1
   144d4:	and	r8, r8, r0
   144d8:	mov	r0, r4
   144dc:	bl	10f30 <mbsinit@plt>
   144e0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   144e4:	cmp	r0, #0
   144e8:	beq	14484 <__assert_fail@plt+0x3338>
   144ec:	b	1453c <__assert_fail@plt+0x33f0>
   144f0:	mov	r8, #0
   144f4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   144f8:	b	14530 <__assert_fail@plt+0x33e4>
   144fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14500:	mov	r8, #0
   14504:	cmp	r5, r7
   14508:	bcs	14530 <__assert_fail@plt+0x33e4>
   1450c:	ldrb	r0, [lr, r5]
   14510:	cmp	r0, #0
   14514:	beq	14530 <__assert_fail@plt+0x33e4>
   14518:	ldr	r0, [sp, #68]	; 0x44
   1451c:	add	r0, r0, #1
   14520:	add	r5, r0, sl
   14524:	str	r0, [sp, #68]	; 0x44
   14528:	cmp	r5, r7
   1452c:	bcc	1450c <__assert_fail@plt+0x33c0>
   14530:	ldr	r5, [sp, #68]	; 0x44
   14534:	b	1453c <__assert_fail@plt+0x33f0>
   14538:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1453c:	mov	r1, r5
   14540:	ldr	r5, [sp, #28]
   14544:	ldr	r4, [sp, #84]	; 0x54
   14548:	ldr	r0, [sp, #52]	; 0x34
   1454c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14550:	cmp	r1, #1
   14554:	orr	r2, r8, r0
   14558:	mov	r0, r1
   1455c:	bhi	14568 <__assert_fail@plt+0x341c>
   14560:	tst	r2, #1
   14564:	bne	13da0 <__assert_fail@plt+0x2c54>
   14568:	add	r0, r0, sl
   1456c:	str	r2, [sp, #84]	; 0x54
   14570:	str	r0, [fp, #-56]	; 0xffffffc8
   14574:	mov	r0, #0
   14578:	tst	r2, #1
   1457c:	bne	1465c <__assert_fail@plt+0x3510>
   14580:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14584:	tst	r1, #1
   14588:	bne	147dc <__assert_fail@plt+0x3690>
   1458c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14590:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14594:	subs	r2, r1, #2
   14598:	movwne	r2, #1
   1459c:	orr	r2, r2, r0
   145a0:	tst	r2, #1
   145a4:	bne	145e0 <__assert_fail@plt+0x3494>
   145a8:	cmp	r9, r5
   145ac:	add	r2, r9, #1
   145b0:	mov	r0, #1
   145b4:	movcc	r1, #39	; 0x27
   145b8:	str	r0, [fp, #-52]	; 0xffffffcc
   145bc:	strbcc	r1, [ip, r9]
   145c0:	cmp	r2, r5
   145c4:	movcc	r1, #36	; 0x24
   145c8:	strbcc	r1, [ip, r2]
   145cc:	add	r2, r9, #2
   145d0:	add	r9, r9, #3
   145d4:	cmp	r2, r5
   145d8:	movcc	r1, #39	; 0x27
   145dc:	strbcc	r1, [ip, r2]
   145e0:	cmp	r9, r5
   145e4:	add	r2, r9, #1
   145e8:	movcc	r1, #92	; 0x5c
   145ec:	strbcc	r1, [ip, r9]
   145f0:	cmp	r2, r5
   145f4:	bcs	14608 <__assert_fail@plt+0x34bc>
   145f8:	uxtb	r3, r6
   145fc:	mov	r1, #48	; 0x30
   14600:	orr	r3, r1, r3, lsr #6
   14604:	strb	r3, [ip, r2]
   14608:	add	r2, r9, #2
   1460c:	add	r9, r9, #3
   14610:	cmp	r2, r5
   14614:	lsrcc	r3, r6, #3
   14618:	movcc	r1, #6
   1461c:	bficc	r3, r1, #3, #29
   14620:	mov	r1, #6
   14624:	bfi	r6, r1, #3, #29
   14628:	strbcc	r3, [ip, r2]
   1462c:	mov	r2, #1
   14630:	b	14690 <__assert_fail@plt+0x3544>
   14634:	ldr	r1, [sp, #80]	; 0x50
   14638:	cmp	r9, r2
   1463c:	mov	r5, r2
   14640:	ldr	r2, [sp, #84]	; 0x54
   14644:	strbcc	r6, [ip, r9]
   14648:	add	r9, r9, #1
   1464c:	ldrb	r6, [r1, sl]
   14650:	mov	sl, r3
   14654:	tst	r2, #1
   14658:	beq	14580 <__assert_fail@plt+0x3434>
   1465c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14660:	tst	r1, #1
   14664:	beq	14684 <__assert_fail@plt+0x3538>
   14668:	cmp	r9, r5
   1466c:	mov	r2, r0
   14670:	movcc	r1, #92	; 0x5c
   14674:	strbcc	r1, [ip, r9]
   14678:	add	r9, r9, #1
   1467c:	mov	r1, #0
   14680:	b	1468c <__assert_fail@plt+0x3540>
   14684:	mov	r1, #0
   14688:	mov	r2, r0
   1468c:	str	r1, [fp, #-48]	; 0xffffffd0
   14690:	mov	r0, r2
   14694:	and	r1, r2, #1
   14698:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1469c:	add	r3, sl, #1
   146a0:	cmp	r2, r3
   146a4:	bls	14704 <__assert_fail@plt+0x35b8>
   146a8:	mov	r2, r5
   146ac:	ldr	r5, [fp, #-52]	; 0xffffffcc
   146b0:	cmp	r1, #0
   146b4:	movwne	r1, #1
   146b8:	mvn	r5, r5
   146bc:	orr	r5, r5, r1
   146c0:	tst	r5, #1
   146c4:	bne	14634 <__assert_fail@plt+0x34e8>
   146c8:	cmp	r9, r2
   146cc:	movcc	r5, r4
   146d0:	movcc	r4, #39	; 0x27
   146d4:	strbcc	r4, [ip, r9]
   146d8:	movcc	r4, r5
   146dc:	add	r5, r9, #1
   146e0:	add	r9, r9, #2
   146e4:	cmp	r5, r2
   146e8:	movcc	r1, r4
   146ec:	movcc	r4, #39	; 0x27
   146f0:	strbcc	r4, [ip, r5]
   146f4:	movcc	r4, r1
   146f8:	mov	r1, #0
   146fc:	str	r1, [fp, #-52]	; 0xffffffcc
   14700:	b	14634 <__assert_fail@plt+0x34e8>
   14704:	cmp	r1, #0
   14708:	movwne	r1, #1
   1470c:	str	r1, [fp, #-56]	; 0xffffffc8
   14710:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14714:	cmp	r0, #0
   14718:	beq	14140 <__assert_fail@plt+0x2ff4>
   1471c:	b	14174 <__assert_fail@plt+0x3028>
   14720:	mov	r8, #0
   14724:	mov	r4, r1
   14728:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1472c:	tst	r0, #1
   14730:	beq	13dac <__assert_fail@plt+0x2c60>
   14734:	b	14060 <__assert_fail@plt+0x2f14>
   14738:	mov	r7, sl
   1473c:	b	14744 <__assert_fail@plt+0x35f8>
   14740:	mvn	r7, #0
   14744:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14748:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1474c:	ldr	r2, [sp, #88]	; 0x58
   14750:	eor	r0, r1, #2
   14754:	orr	r0, r0, r9
   14758:	clz	r0, r0
   1475c:	lsr	r0, r0, #5
   14760:	tst	r3, r0
   14764:	bne	147dc <__assert_fail@plt+0x3690>
   14768:	subs	r0, r1, #2
   1476c:	movwne	r0, #1
   14770:	orr	r0, r3, r0
   14774:	tst	r0, #1
   14778:	ldreq	r0, [sp, #60]	; 0x3c
   1477c:	eoreq	r0, r0, #1
   14780:	tsteq	r0, #1
   14784:	bne	148b8 <__assert_fail@plt+0x376c>
   14788:	tst	r4, #1
   1478c:	bne	1487c <__assert_fail@plt+0x3730>
   14790:	ldr	r6, [sp, #56]	; 0x38
   14794:	mov	r8, #0
   14798:	cmp	r6, #0
   1479c:	beq	148b4 <__assert_fail@plt+0x3768>
   147a0:	mov	r1, #0
   147a4:	mov	r4, #2
   147a8:	cmp	r5, #0
   147ac:	mov	r0, r2
   147b0:	mov	r3, #0
   147b4:	str	r1, [sp, #84]	; 0x54
   147b8:	beq	13600 <__assert_fail@plt+0x24b4>
   147bc:	b	148b8 <__assert_fail@plt+0x376c>
   147c0:	movw	r0, #29083	; 0x719b
   147c4:	movt	r0, #1
   147c8:	str	r0, [sp, #76]	; 0x4c
   147cc:	mov	r9, #0
   147d0:	tst	r8, #1
   147d4:	beq	13898 <__assert_fail@plt+0x274c>
   147d8:	b	139d8 <__assert_fail@plt+0x288c>
   147dc:	ldr	r1, [sp, #88]	; 0x58
   147e0:	mov	r0, #2
   147e4:	tst	r1, #1
   147e8:	movwne	r0, #4
   147ec:	ldr	r2, [fp, #-64]	; 0xffffffc0
   147f0:	ldr	r1, [fp, #12]
   147f4:	cmp	r2, #2
   147f8:	moveq	r2, r0
   147fc:	b	14834 <__assert_fail@plt+0x36e8>
   14800:	ldr	ip, [fp, #-84]	; 0xffffffac
   14804:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14808:	ldr	r1, [fp, #12]
   1480c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14810:	b	14834 <__assert_fail@plt+0x36e8>
   14814:	ldr	r1, [sp, #88]	; 0x58
   14818:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1481c:	ldr	r5, [sp, #28]
   14820:	mov	r0, #2
   14824:	tst	r1, #1
   14828:	ldr	r1, [fp, #12]
   1482c:	movwne	r0, #4
   14830:	mov	r2, r0
   14834:	mov	r0, #0
   14838:	bic	r1, r1, #2
   1483c:	str	r2, [sp]
   14840:	mov	r2, lr
   14844:	str	r0, [sp, #8]
   14848:	ldr	r0, [sp, #72]	; 0x48
   1484c:	str	r1, [sp, #4]
   14850:	mov	r1, r5
   14854:	str	r0, [sp, #12]
   14858:	ldr	r0, [sp, #76]	; 0x4c
   1485c:	str	r0, [sp, #16]
   14860:	mov	r0, ip
   14864:	mov	r3, r7
   14868:	bl	13574 <__assert_fail@plt+0x2428>
   1486c:	mov	r9, r0
   14870:	mov	r0, r9
   14874:	sub	sp, fp, #28
   14878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1487c:	mov	r0, #5
   14880:	ldr	r1, [sp, #56]	; 0x38
   14884:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14888:	str	r0, [sp]
   1488c:	ldr	r0, [fp, #12]
   14890:	str	r0, [sp, #4]
   14894:	ldr	r0, [fp, #16]
   14898:	str	r0, [sp, #8]
   1489c:	ldr	r0, [sp, #72]	; 0x48
   148a0:	str	r0, [sp, #12]
   148a4:	ldr	r0, [sp, #76]	; 0x4c
   148a8:	str	r0, [sp, #16]
   148ac:	ldr	r0, [fp, #-84]	; 0xffffffac
   148b0:	b	14864 <__assert_fail@plt+0x3718>
   148b4:	mov	r3, #0
   148b8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   148bc:	cmp	r1, #0
   148c0:	beq	148fc <__assert_fail@plt+0x37b0>
   148c4:	ldr	r2, [fp, #-84]	; 0xffffffac
   148c8:	tst	r3, #1
   148cc:	bne	14900 <__assert_fail@plt+0x37b4>
   148d0:	ldrb	r0, [r1]
   148d4:	cmp	r0, #0
   148d8:	beq	14900 <__assert_fail@plt+0x37b4>
   148dc:	add	r1, r1, #1
   148e0:	cmp	r9, r5
   148e4:	strbcc	r0, [r2, r9]
   148e8:	add	r9, r9, #1
   148ec:	ldrb	r0, [r1], #1
   148f0:	cmp	r0, #0
   148f4:	bne	148e0 <__assert_fail@plt+0x3794>
   148f8:	b	14900 <__assert_fail@plt+0x37b4>
   148fc:	ldr	r2, [fp, #-84]	; 0xffffffac
   14900:	cmp	r9, r5
   14904:	movcc	r0, #0
   14908:	strbcc	r0, [r2, r9]
   1490c:	mov	r0, r9
   14910:	sub	sp, fp, #28
   14914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14918:	mov	r0, #4
   1491c:	b	147ec <__assert_fail@plt+0x36a0>
   14920:	bl	11134 <abort@plt>
   14924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14928:	add	fp, sp, #28
   1492c:	sub	sp, sp, #28
   14930:	movw	r5, #33176	; 0x8198
   14934:	cmp	r2, #0
   14938:	mov	r4, r1
   1493c:	mov	r7, r0
   14940:	str	r0, [sp, #20]
   14944:	movt	r5, #2
   14948:	movne	r5, r2
   1494c:	bl	11044 <__errno_location@plt>
   14950:	mov	sl, r0
   14954:	ldr	r2, [r5, #40]	; 0x28
   14958:	ldr	r3, [r5, #44]	; 0x2c
   1495c:	ldm	r5, {r0, r1}
   14960:	orr	r8, r1, #1
   14964:	add	r9, r5, #8
   14968:	mov	r1, #0
   1496c:	ldr	r6, [sl]
   14970:	stm	sp, {r0, r8, r9}
   14974:	mov	r0, #0
   14978:	str	r2, [sp, #12]
   1497c:	str	r3, [sp, #16]
   14980:	mov	r2, r7
   14984:	mov	r3, r4
   14988:	str	r6, [sp, #24]
   1498c:	mov	r6, r4
   14990:	bl	13574 <__assert_fail@plt+0x2428>
   14994:	add	r7, r0, #1
   14998:	mov	r0, r7
   1499c:	bl	15a04 <__assert_fail@plt+0x48b8>
   149a0:	mov	r4, r0
   149a4:	ldr	r0, [r5]
   149a8:	ldr	r2, [r5, #44]	; 0x2c
   149ac:	ldr	r1, [r5, #40]	; 0x28
   149b0:	mov	r3, r6
   149b4:	stm	sp, {r0, r8, r9}
   149b8:	str	r2, [sp, #16]
   149bc:	ldr	r2, [sp, #20]
   149c0:	str	r1, [sp, #12]
   149c4:	mov	r0, r4
   149c8:	mov	r1, r7
   149cc:	bl	13574 <__assert_fail@plt+0x2428>
   149d0:	ldr	r0, [sp, #24]
   149d4:	str	r0, [sl]
   149d8:	mov	r0, r4
   149dc:	sub	sp, fp, #28
   149e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149e8:	add	fp, sp, #28
   149ec:	sub	sp, sp, #36	; 0x24
   149f0:	movw	r8, #33176	; 0x8198
   149f4:	cmp	r3, #0
   149f8:	mov	r4, r2
   149fc:	str	r2, [sp, #24]
   14a00:	mov	r5, r1
   14a04:	mov	r6, r0
   14a08:	str	r0, [sp, #20]
   14a0c:	movt	r8, #2
   14a10:	movne	r8, r3
   14a14:	bl	11044 <__errno_location@plt>
   14a18:	str	r0, [sp, #28]
   14a1c:	ldr	r1, [r8, #40]	; 0x28
   14a20:	ldr	r2, [r8, #44]	; 0x2c
   14a24:	ldr	r7, [r0]
   14a28:	cmp	r4, #0
   14a2c:	add	sl, r8, #8
   14a30:	mov	r0, #0
   14a34:	ldm	r8, {r3, r9}
   14a38:	orreq	r9, r9, #1
   14a3c:	stm	sp, {r3, r9, sl}
   14a40:	str	r1, [sp, #12]
   14a44:	str	r2, [sp, #16]
   14a48:	mov	r1, #0
   14a4c:	mov	r2, r6
   14a50:	mov	r3, r5
   14a54:	str	r7, [sp, #32]
   14a58:	mov	r7, r5
   14a5c:	bl	13574 <__assert_fail@plt+0x2428>
   14a60:	add	r4, r0, #1
   14a64:	mov	r5, r0
   14a68:	mov	r0, r4
   14a6c:	bl	15a04 <__assert_fail@plt+0x48b8>
   14a70:	mov	r6, r0
   14a74:	ldr	r0, [r8]
   14a78:	ldr	r2, [r8, #44]	; 0x2c
   14a7c:	ldr	r1, [r8, #40]	; 0x28
   14a80:	mov	r3, r7
   14a84:	stm	sp, {r0, r9, sl}
   14a88:	str	r2, [sp, #16]
   14a8c:	ldr	r2, [sp, #20]
   14a90:	str	r1, [sp, #12]
   14a94:	mov	r0, r6
   14a98:	mov	r1, r4
   14a9c:	bl	13574 <__assert_fail@plt+0x2428>
   14aa0:	ldr	r0, [sp, #24]
   14aa4:	ldr	r1, [sp, #32]
   14aa8:	ldr	r2, [sp, #28]
   14aac:	cmp	r0, #0
   14ab0:	str	r1, [r2]
   14ab4:	strne	r5, [r0]
   14ab8:	mov	r0, r6
   14abc:	sub	sp, fp, #28
   14ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac4:	push	{r4, r5, r6, r7, fp, lr}
   14ac8:	add	fp, sp, #16
   14acc:	movw	r4, #33072	; 0x8130
   14ad0:	movt	r4, #2
   14ad4:	ldrd	r6, [r4]
   14ad8:	cmp	r7, #2
   14adc:	blt	14b08 <__assert_fail@plt+0x39bc>
   14ae0:	add	r5, r6, #12
   14ae4:	mov	r7, #0
   14ae8:	ldr	r0, [r5, r7, lsl #3]
   14aec:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   14af0:	ldr	r1, [r4, #4]
   14af4:	add	r2, r7, #2
   14af8:	add	r0, r7, #1
   14afc:	mov	r7, r0
   14b00:	cmp	r2, r1
   14b04:	blt	14ae8 <__assert_fail@plt+0x399c>
   14b08:	ldr	r0, [r6, #4]
   14b0c:	movw	r5, #33224	; 0x81c8
   14b10:	movt	r5, #2
   14b14:	cmp	r0, r5
   14b18:	beq	14b2c <__assert_fail@plt+0x39e0>
   14b1c:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   14b20:	mov	r0, #256	; 0x100
   14b24:	str	r0, [r4, #8]
   14b28:	str	r5, [r4, #12]
   14b2c:	add	r5, r4, #8
   14b30:	cmp	r6, r5
   14b34:	beq	14b44 <__assert_fail@plt+0x39f8>
   14b38:	mov	r0, r6
   14b3c:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   14b40:	str	r5, [r4]
   14b44:	mov	r0, #1
   14b48:	str	r0, [r4, #4]
   14b4c:	pop	{r4, r5, r6, r7, fp, pc}
   14b50:	movw	r3, #33176	; 0x8198
   14b54:	mvn	r2, #0
   14b58:	movt	r3, #2
   14b5c:	b	14b60 <__assert_fail@plt+0x3a14>
   14b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b64:	add	fp, sp, #28
   14b68:	sub	sp, sp, #44	; 0x2c
   14b6c:	mov	r7, r3
   14b70:	str	r2, [sp, #36]	; 0x24
   14b74:	str	r1, [sp, #32]
   14b78:	mov	r5, r0
   14b7c:	bl	11044 <__errno_location@plt>
   14b80:	cmp	r5, #0
   14b84:	bmi	14cec <__assert_fail@plt+0x3ba0>
   14b88:	cmn	r5, #-2147483647	; 0x80000001
   14b8c:	beq	14cec <__assert_fail@plt+0x3ba0>
   14b90:	movw	r8, #33072	; 0x8130
   14b94:	mov	r4, r0
   14b98:	ldr	r0, [r0]
   14b9c:	movt	r8, #2
   14ba0:	str	r4, [sp, #28]
   14ba4:	ldr	r1, [r8, #4]
   14ba8:	ldr	r6, [r8]
   14bac:	str	r0, [sp, #24]
   14bb0:	cmp	r1, r5
   14bb4:	ble	14bc0 <__assert_fail@plt+0x3a74>
   14bb8:	mov	sl, r6
   14bbc:	b	14c28 <__assert_fail@plt+0x3adc>
   14bc0:	mov	r0, #8
   14bc4:	add	r9, r8, #8
   14bc8:	str	r1, [fp, #-32]	; 0xffffffe0
   14bcc:	sub	r1, r5, r1
   14bd0:	mvn	r3, #-2147483648	; 0x80000000
   14bd4:	str	r0, [sp]
   14bd8:	subs	r0, r6, r9
   14bdc:	add	r2, r1, #1
   14be0:	sub	r1, fp, #32
   14be4:	movne	r0, r6
   14be8:	bl	15c04 <__assert_fail@plt+0x4ab8>
   14bec:	mov	sl, r0
   14bf0:	cmp	r6, r9
   14bf4:	str	r0, [r8]
   14bf8:	bne	14c04 <__assert_fail@plt+0x3ab8>
   14bfc:	ldrd	r0, [r8, #8]
   14c00:	stm	sl, {r0, r1}
   14c04:	ldr	r1, [r8, #4]
   14c08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c0c:	add	r0, sl, r1, lsl #3
   14c10:	sub	r1, r2, r1
   14c14:	lsl	r2, r1, #3
   14c18:	mov	r1, #0
   14c1c:	bl	1105c <memset@plt>
   14c20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14c24:	str	r0, [r8, #4]
   14c28:	mov	r9, sl
   14c2c:	ldm	r7, {r0, r1}
   14c30:	orr	r8, r1, #1
   14c34:	add	r1, r7, #8
   14c38:	ldr	r2, [r7, #40]	; 0x28
   14c3c:	ldr	r3, [r7, #44]	; 0x2c
   14c40:	ldr	r6, [r9, r5, lsl #3]!
   14c44:	str	r1, [sp, #20]
   14c48:	ldr	r4, [r9, #4]!
   14c4c:	stm	sp, {r0, r8}
   14c50:	add	r0, sp, #8
   14c54:	stm	r0, {r1, r2, r3}
   14c58:	ldr	r2, [sp, #32]
   14c5c:	ldr	r3, [sp, #36]	; 0x24
   14c60:	mov	r1, r6
   14c64:	mov	r0, r4
   14c68:	bl	13574 <__assert_fail@plt+0x2428>
   14c6c:	cmp	r6, r0
   14c70:	bhi	14cd4 <__assert_fail@plt+0x3b88>
   14c74:	add	r6, r0, #1
   14c78:	movw	r0, #33224	; 0x81c8
   14c7c:	movt	r0, #2
   14c80:	str	r6, [sl, r5, lsl #3]
   14c84:	cmp	r4, r0
   14c88:	beq	14c94 <__assert_fail@plt+0x3b48>
   14c8c:	mov	r0, r4
   14c90:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   14c94:	mov	r0, r6
   14c98:	bl	15a04 <__assert_fail@plt+0x48b8>
   14c9c:	str	r0, [r9]
   14ca0:	mov	r4, r0
   14ca4:	add	r3, sp, #8
   14ca8:	ldr	r0, [r7]
   14cac:	ldr	r1, [r7, #40]	; 0x28
   14cb0:	ldr	r2, [r7, #44]	; 0x2c
   14cb4:	stm	sp, {r0, r8}
   14cb8:	ldr	r0, [sp, #20]
   14cbc:	stm	r3, {r0, r1, r2}
   14cc0:	ldr	r2, [sp, #32]
   14cc4:	ldr	r3, [sp, #36]	; 0x24
   14cc8:	mov	r0, r4
   14ccc:	mov	r1, r6
   14cd0:	bl	13574 <__assert_fail@plt+0x2428>
   14cd4:	ldr	r1, [sp, #24]
   14cd8:	ldr	r0, [sp, #28]
   14cdc:	str	r1, [r0]
   14ce0:	mov	r0, r4
   14ce4:	sub	sp, fp, #28
   14ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cec:	bl	11134 <abort@plt>
   14cf0:	movw	r3, #33176	; 0x8198
   14cf4:	movt	r3, #2
   14cf8:	b	14b60 <__assert_fail@plt+0x3a14>
   14cfc:	movw	r3, #33176	; 0x8198
   14d00:	mov	r1, r0
   14d04:	mov	r0, #0
   14d08:	mvn	r2, #0
   14d0c:	movt	r3, #2
   14d10:	b	14b60 <__assert_fail@plt+0x3a14>
   14d14:	movw	r3, #33176	; 0x8198
   14d18:	mov	r2, r1
   14d1c:	mov	r1, r0
   14d20:	mov	r0, #0
   14d24:	movt	r3, #2
   14d28:	b	14b60 <__assert_fail@plt+0x3a14>
   14d2c:	push	{fp, lr}
   14d30:	mov	fp, sp
   14d34:	sub	sp, sp, #48	; 0x30
   14d38:	vmov.i32	q8, #0	; 0x00000000
   14d3c:	mov	ip, #32
   14d40:	mov	r3, sp
   14d44:	mov	lr, r2
   14d48:	cmp	r1, #10
   14d4c:	add	r2, r3, #16
   14d50:	vst1.64	{d16-d17}, [r3], ip
   14d54:	vst1.64	{d16-d17}, [r2]
   14d58:	vst1.64	{d16-d17}, [r3]
   14d5c:	beq	14d7c <__assert_fail@plt+0x3c30>
   14d60:	str	r1, [sp]
   14d64:	mov	r3, sp
   14d68:	mov	r1, lr
   14d6c:	mvn	r2, #0
   14d70:	bl	14b60 <__assert_fail@plt+0x3a14>
   14d74:	mov	sp, fp
   14d78:	pop	{fp, pc}
   14d7c:	bl	11134 <abort@plt>
   14d80:	push	{r4, sl, fp, lr}
   14d84:	add	fp, sp, #8
   14d88:	sub	sp, sp, #48	; 0x30
   14d8c:	vmov.i32	q8, #0	; 0x00000000
   14d90:	mov	ip, r3
   14d94:	mov	r3, sp
   14d98:	mov	lr, #32
   14d9c:	cmp	r1, #10
   14da0:	add	r4, r3, #16
   14da4:	vst1.64	{d16-d17}, [r3], lr
   14da8:	vst1.64	{d16-d17}, [r4]
   14dac:	vst1.64	{d16-d17}, [r3]
   14db0:	beq	14dd0 <__assert_fail@plt+0x3c84>
   14db4:	str	r1, [sp]
   14db8:	mov	r1, r2
   14dbc:	mov	r3, sp
   14dc0:	mov	r2, ip
   14dc4:	bl	14b60 <__assert_fail@plt+0x3a14>
   14dc8:	sub	sp, fp, #8
   14dcc:	pop	{r4, sl, fp, pc}
   14dd0:	bl	11134 <abort@plt>
   14dd4:	push	{fp, lr}
   14dd8:	mov	fp, sp
   14ddc:	sub	sp, sp, #48	; 0x30
   14de0:	vmov.i32	q8, #0	; 0x00000000
   14de4:	mov	r3, sp
   14de8:	mov	ip, #32
   14dec:	cmp	r0, #10
   14df0:	add	r2, r3, #16
   14df4:	vst1.64	{d16-d17}, [r3], ip
   14df8:	vst1.64	{d16-d17}, [r2]
   14dfc:	vst1.64	{d16-d17}, [r3]
   14e00:	beq	14e20 <__assert_fail@plt+0x3cd4>
   14e04:	str	r0, [sp]
   14e08:	mov	r3, sp
   14e0c:	mov	r0, #0
   14e10:	mvn	r2, #0
   14e14:	bl	14b60 <__assert_fail@plt+0x3a14>
   14e18:	mov	sp, fp
   14e1c:	pop	{fp, pc}
   14e20:	bl	11134 <abort@plt>
   14e24:	push	{fp, lr}
   14e28:	mov	fp, sp
   14e2c:	sub	sp, sp, #48	; 0x30
   14e30:	vmov.i32	q8, #0	; 0x00000000
   14e34:	mov	r3, sp
   14e38:	mov	ip, #32
   14e3c:	cmp	r0, #10
   14e40:	add	lr, r3, #16
   14e44:	vst1.64	{d16-d17}, [r3], ip
   14e48:	vst1.64	{d16-d17}, [lr]
   14e4c:	vst1.64	{d16-d17}, [r3]
   14e50:	beq	14e6c <__assert_fail@plt+0x3d20>
   14e54:	str	r0, [sp]
   14e58:	mov	r3, sp
   14e5c:	mov	r0, #0
   14e60:	bl	14b60 <__assert_fail@plt+0x3a14>
   14e64:	mov	sp, fp
   14e68:	pop	{fp, pc}
   14e6c:	bl	11134 <abort@plt>
   14e70:	push	{r4, sl, fp, lr}
   14e74:	add	fp, sp, #8
   14e78:	sub	sp, sp, #48	; 0x30
   14e7c:	mov	lr, r0
   14e80:	movw	r0, #33176	; 0x8198
   14e84:	mov	ip, r1
   14e88:	mov	r1, #32
   14e8c:	mov	r4, #1
   14e90:	movt	r0, #2
   14e94:	add	r3, r0, #16
   14e98:	vld1.64	{d16-d17}, [r0], r1
   14e9c:	vld1.64	{d20-d21}, [r0]
   14ea0:	vld1.64	{d18-d19}, [r3]
   14ea4:	mov	r3, sp
   14ea8:	add	r0, r3, #32
   14eac:	add	r1, r3, #16
   14eb0:	vst1.64	{d20-d21}, [r0]
   14eb4:	mov	r0, #28
   14eb8:	vst1.64	{d18-d19}, [r1]
   14ebc:	mov	r1, r3
   14ec0:	and	r0, r0, r2, lsr #3
   14ec4:	and	r2, r2, #31
   14ec8:	vst1.64	{d16-d17}, [r1], r0
   14ecc:	ldr	r0, [r1, #8]
   14ed0:	bic	r4, r4, r0, lsr r2
   14ed4:	eor	r0, r0, r4, lsl r2
   14ed8:	mov	r2, ip
   14edc:	str	r0, [r1, #8]
   14ee0:	mov	r0, #0
   14ee4:	mov	r1, lr
   14ee8:	bl	14b60 <__assert_fail@plt+0x3a14>
   14eec:	sub	sp, fp, #8
   14ef0:	pop	{r4, sl, fp, pc}
   14ef4:	push	{fp, lr}
   14ef8:	mov	fp, sp
   14efc:	sub	sp, sp, #48	; 0x30
   14f00:	mov	ip, r0
   14f04:	movw	r0, #33176	; 0x8198
   14f08:	mov	r2, #32
   14f0c:	movt	r0, #2
   14f10:	add	r3, r0, #16
   14f14:	vld1.64	{d16-d17}, [r0], r2
   14f18:	vld1.64	{d20-d21}, [r0]
   14f1c:	vld1.64	{d18-d19}, [r3]
   14f20:	mov	r3, sp
   14f24:	add	r0, r3, #32
   14f28:	add	r2, r3, #16
   14f2c:	vst1.64	{d20-d21}, [r0]
   14f30:	mov	r0, #28
   14f34:	vst1.64	{d18-d19}, [r2]
   14f38:	mov	r2, r3
   14f3c:	and	r0, r0, r1, lsr #3
   14f40:	and	r1, r1, #31
   14f44:	vst1.64	{d16-d17}, [r2], r0
   14f48:	mov	r0, #1
   14f4c:	ldr	lr, [r2, #8]
   14f50:	bic	r0, r0, lr, lsr r1
   14f54:	eor	r0, lr, r0, lsl r1
   14f58:	mov	r1, ip
   14f5c:	str	r0, [r2, #8]
   14f60:	mov	r0, #0
   14f64:	mvn	r2, #0
   14f68:	bl	14b60 <__assert_fail@plt+0x3a14>
   14f6c:	mov	sp, fp
   14f70:	pop	{fp, pc}
   14f74:	push	{fp, lr}
   14f78:	mov	fp, sp
   14f7c:	sub	sp, sp, #48	; 0x30
   14f80:	mov	r1, r0
   14f84:	movw	r0, #33176	; 0x8198
   14f88:	mov	r3, #32
   14f8c:	movt	r0, #2
   14f90:	add	r2, r0, #16
   14f94:	vld1.64	{d16-d17}, [r0], r3
   14f98:	mov	r3, sp
   14f9c:	vld1.64	{d18-d19}, [r2]
   14fa0:	vld1.64	{d20-d21}, [r0]
   14fa4:	add	r2, r3, #16
   14fa8:	add	r0, r3, #32
   14fac:	vst1.64	{d18-d19}, [r2]
   14fb0:	vst1.64	{d20-d21}, [r0]
   14fb4:	mov	r0, #12
   14fb8:	mov	r2, r3
   14fbc:	vst1.64	{d16-d17}, [r2], r0
   14fc0:	ldr	r0, [r2]
   14fc4:	orr	r0, r0, #67108864	; 0x4000000
   14fc8:	str	r0, [r2]
   14fcc:	mov	r0, #0
   14fd0:	mvn	r2, #0
   14fd4:	bl	14b60 <__assert_fail@plt+0x3a14>
   14fd8:	mov	sp, fp
   14fdc:	pop	{fp, pc}
   14fe0:	push	{fp, lr}
   14fe4:	mov	fp, sp
   14fe8:	sub	sp, sp, #48	; 0x30
   14fec:	mov	ip, r1
   14ff0:	mov	r1, r0
   14ff4:	movw	r0, #33176	; 0x8198
   14ff8:	mov	r2, #32
   14ffc:	movt	r0, #2
   15000:	add	r3, r0, #16
   15004:	vld1.64	{d16-d17}, [r0], r2
   15008:	vld1.64	{d18-d19}, [r3]
   1500c:	vld1.64	{d20-d21}, [r0]
   15010:	mov	r3, sp
   15014:	add	r2, r3, #16
   15018:	add	r0, r3, #32
   1501c:	vst1.64	{d18-d19}, [r2]
   15020:	vst1.64	{d20-d21}, [r0]
   15024:	mov	r0, #12
   15028:	mov	r2, r3
   1502c:	vst1.64	{d16-d17}, [r2], r0
   15030:	ldr	r0, [r2]
   15034:	orr	r0, r0, #67108864	; 0x4000000
   15038:	str	r0, [r2]
   1503c:	mov	r0, #0
   15040:	mov	r2, ip
   15044:	bl	14b60 <__assert_fail@plt+0x3a14>
   15048:	mov	sp, fp
   1504c:	pop	{fp, pc}
   15050:	push	{r4, sl, fp, lr}
   15054:	add	fp, sp, #8
   15058:	sub	sp, sp, #96	; 0x60
   1505c:	vmov.i32	q8, #0	; 0x00000000
   15060:	mov	ip, r2
   15064:	mov	r2, sp
   15068:	mov	r4, #28
   1506c:	cmp	r1, #10
   15070:	mov	r3, r2
   15074:	add	lr, r2, #16
   15078:	vst1.64	{d16-d17}, [r3], r4
   1507c:	vst1.64	{d16-d17}, [lr]
   15080:	vst1.32	{d16-d17}, [r3]
   15084:	beq	150d4 <__assert_fail@plt+0x3f88>
   15088:	vld1.64	{d16-d17}, [r2], r4
   1508c:	vld1.64	{d18-d19}, [lr]
   15090:	add	r3, sp, #48	; 0x30
   15094:	vld1.32	{d20-d21}, [r2]
   15098:	add	r2, r3, #20
   1509c:	add	r4, r3, #4
   150a0:	vst1.32	{d18-d19}, [r2]
   150a4:	add	r2, r3, #32
   150a8:	vst1.32	{d16-d17}, [r4]
   150ac:	vst1.32	{d20-d21}, [r2]
   150b0:	str	r1, [sp, #48]	; 0x30
   150b4:	mvn	r2, #0
   150b8:	ldr	r1, [sp, #60]	; 0x3c
   150bc:	orr	r1, r1, #67108864	; 0x4000000
   150c0:	str	r1, [sp, #60]	; 0x3c
   150c4:	mov	r1, ip
   150c8:	bl	14b60 <__assert_fail@plt+0x3a14>
   150cc:	sub	sp, fp, #8
   150d0:	pop	{r4, sl, fp, pc}
   150d4:	bl	11134 <abort@plt>
   150d8:	push	{r4, r5, r6, sl, fp, lr}
   150dc:	add	fp, sp, #16
   150e0:	sub	sp, sp, #48	; 0x30
   150e4:	mov	ip, r3
   150e8:	movw	r3, #33176	; 0x8198
   150ec:	mov	r6, #32
   150f0:	cmp	r1, #0
   150f4:	mov	r4, sp
   150f8:	movt	r3, #2
   150fc:	cmpne	r2, #0
   15100:	add	r5, r4, #16
   15104:	add	lr, r3, #16
   15108:	vld1.64	{d16-d17}, [r3], r6
   1510c:	vld1.64	{d18-d19}, [lr]
   15110:	vld1.64	{d20-d21}, [r3]
   15114:	mov	r3, #10
   15118:	vst1.64	{d16-d17}, [r4], r6
   1511c:	vst1.64	{d18-d19}, [r5]
   15120:	vst1.64	{d20-d21}, [r4]
   15124:	str	r3, [sp]
   15128:	bne	15130 <__assert_fail@plt+0x3fe4>
   1512c:	bl	11134 <abort@plt>
   15130:	str	r2, [sp, #44]	; 0x2c
   15134:	str	r1, [sp, #40]	; 0x28
   15138:	mov	r3, sp
   1513c:	mov	r1, ip
   15140:	mvn	r2, #0
   15144:	bl	14b60 <__assert_fail@plt+0x3a14>
   15148:	sub	sp, fp, #16
   1514c:	pop	{r4, r5, r6, sl, fp, pc}
   15150:	push	{r4, r5, r6, sl, fp, lr}
   15154:	add	fp, sp, #16
   15158:	sub	sp, sp, #48	; 0x30
   1515c:	mov	lr, r3
   15160:	movw	r3, #33176	; 0x8198
   15164:	mov	r6, #32
   15168:	cmp	r1, #0
   1516c:	mov	r4, sp
   15170:	movt	r3, #2
   15174:	cmpne	r2, #0
   15178:	add	r5, r4, #16
   1517c:	add	ip, r3, #16
   15180:	vld1.64	{d16-d17}, [r3], r6
   15184:	vld1.64	{d18-d19}, [ip]
   15188:	vld1.64	{d20-d21}, [r3]
   1518c:	mov	r3, #10
   15190:	vst1.64	{d16-d17}, [r4], r6
   15194:	vst1.64	{d18-d19}, [r5]
   15198:	vst1.64	{d20-d21}, [r4]
   1519c:	str	r3, [sp]
   151a0:	bne	151a8 <__assert_fail@plt+0x405c>
   151a4:	bl	11134 <abort@plt>
   151a8:	ldr	ip, [fp, #8]
   151ac:	str	r2, [sp, #44]	; 0x2c
   151b0:	str	r1, [sp, #40]	; 0x28
   151b4:	mov	r3, sp
   151b8:	mov	r1, lr
   151bc:	mov	r2, ip
   151c0:	bl	14b60 <__assert_fail@plt+0x3a14>
   151c4:	sub	sp, fp, #16
   151c8:	pop	{r4, r5, r6, sl, fp, pc}
   151cc:	push	{r4, sl, fp, lr}
   151d0:	add	fp, sp, #8
   151d4:	sub	sp, sp, #48	; 0x30
   151d8:	movw	r3, #33176	; 0x8198
   151dc:	mov	lr, #32
   151e0:	mov	ip, r2
   151e4:	cmp	r0, #0
   151e8:	movt	r3, #2
   151ec:	cmpne	r1, #0
   151f0:	add	r2, r3, #16
   151f4:	vld1.64	{d16-d17}, [r3], lr
   151f8:	vld1.64	{d20-d21}, [r3]
   151fc:	vld1.64	{d18-d19}, [r2]
   15200:	mov	r2, sp
   15204:	add	r4, r2, #16
   15208:	vst1.64	{d16-d17}, [r2], lr
   1520c:	vst1.64	{d20-d21}, [r2]
   15210:	mov	r2, #10
   15214:	vst1.64	{d18-d19}, [r4]
   15218:	str	r2, [sp]
   1521c:	bne	15224 <__assert_fail@plt+0x40d8>
   15220:	bl	11134 <abort@plt>
   15224:	str	r1, [sp, #44]	; 0x2c
   15228:	str	r0, [sp, #40]	; 0x28
   1522c:	mov	r3, sp
   15230:	mov	r0, #0
   15234:	mov	r1, ip
   15238:	mvn	r2, #0
   1523c:	bl	14b60 <__assert_fail@plt+0x3a14>
   15240:	sub	sp, fp, #8
   15244:	pop	{r4, sl, fp, pc}
   15248:	push	{r4, r5, fp, lr}
   1524c:	add	fp, sp, #8
   15250:	sub	sp, sp, #48	; 0x30
   15254:	mov	ip, r3
   15258:	movw	r3, #33176	; 0x8198
   1525c:	mov	r4, #32
   15260:	mov	lr, r2
   15264:	cmp	r0, #0
   15268:	movt	r3, #2
   1526c:	cmpne	r1, #0
   15270:	add	r2, r3, #16
   15274:	vld1.64	{d16-d17}, [r3], r4
   15278:	vld1.64	{d20-d21}, [r3]
   1527c:	vld1.64	{d18-d19}, [r2]
   15280:	mov	r2, sp
   15284:	add	r5, r2, #16
   15288:	vst1.64	{d16-d17}, [r2], r4
   1528c:	vst1.64	{d20-d21}, [r2]
   15290:	mov	r2, #10
   15294:	vst1.64	{d18-d19}, [r5]
   15298:	str	r2, [sp]
   1529c:	bne	152a4 <__assert_fail@plt+0x4158>
   152a0:	bl	11134 <abort@plt>
   152a4:	str	r1, [sp, #44]	; 0x2c
   152a8:	str	r0, [sp, #40]	; 0x28
   152ac:	mov	r3, sp
   152b0:	mov	r0, #0
   152b4:	mov	r1, lr
   152b8:	mov	r2, ip
   152bc:	bl	14b60 <__assert_fail@plt+0x3a14>
   152c0:	sub	sp, fp, #8
   152c4:	pop	{r4, r5, fp, pc}
   152c8:	movw	r3, #33024	; 0x8100
   152cc:	movt	r3, #2
   152d0:	b	14b60 <__assert_fail@plt+0x3a14>
   152d4:	movw	r3, #33024	; 0x8100
   152d8:	mov	r2, r1
   152dc:	mov	r1, r0
   152e0:	mov	r0, #0
   152e4:	movt	r3, #2
   152e8:	b	14b60 <__assert_fail@plt+0x3a14>
   152ec:	movw	r3, #33024	; 0x8100
   152f0:	mvn	r2, #0
   152f4:	movt	r3, #2
   152f8:	b	14b60 <__assert_fail@plt+0x3a14>
   152fc:	movw	r3, #33024	; 0x8100
   15300:	mov	r1, r0
   15304:	mov	r0, #0
   15308:	mvn	r2, #0
   1530c:	movt	r3, #2
   15310:	b	14b60 <__assert_fail@plt+0x3a14>
   15314:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15318:	add	fp, sp, #24
   1531c:	sub	sp, sp, #32
   15320:	ldr	r6, [fp, #12]
   15324:	ldr	r7, [fp, #8]
   15328:	mov	r4, r2
   1532c:	mov	r8, r0
   15330:	cmp	r1, #0
   15334:	beq	1535c <__assert_fail@plt+0x4210>
   15338:	movw	r2, #29172	; 0x71f4
   1533c:	mov	r5, r1
   15340:	str	r3, [sp, #4]
   15344:	str	r4, [sp]
   15348:	mov	r0, r8
   1534c:	mov	r1, #1
   15350:	movt	r2, #1
   15354:	mov	r3, r5
   15358:	b	15374 <__assert_fail@plt+0x4228>
   1535c:	movw	r2, #29184	; 0x7200
   15360:	str	r3, [sp]
   15364:	mov	r0, r8
   15368:	mov	r1, #1
   1536c:	mov	r3, r4
   15370:	movt	r2, #1
   15374:	bl	1108c <__fprintf_chk@plt>
   15378:	movw	r1, #29191	; 0x7207
   1537c:	mov	r0, #0
   15380:	mov	r2, #5
   15384:	movt	r1, #1
   15388:	bl	10f48 <dcgettext@plt>
   1538c:	movw	r2, #29909	; 0x74d5
   15390:	mov	r3, r0
   15394:	movw	r0, #2022	; 0x7e6
   15398:	mov	r1, #1
   1539c:	movt	r2, #1
   153a0:	str	r0, [sp]
   153a4:	mov	r0, r8
   153a8:	bl	1108c <__fprintf_chk@plt>
   153ac:	movw	r4, #28130	; 0x6de2
   153b0:	mov	r1, r8
   153b4:	movt	r4, #1
   153b8:	mov	r0, r4
   153bc:	bl	10ec4 <fputs_unlocked@plt>
   153c0:	movw	r1, #29195	; 0x720b
   153c4:	mov	r0, #0
   153c8:	mov	r2, #5
   153cc:	movt	r1, #1
   153d0:	bl	10f48 <dcgettext@plt>
   153d4:	movw	r3, #29366	; 0x72b6
   153d8:	mov	r2, r0
   153dc:	mov	r0, r8
   153e0:	mov	r1, #1
   153e4:	movt	r3, #1
   153e8:	bl	1108c <__fprintf_chk@plt>
   153ec:	mov	r0, r4
   153f0:	mov	r1, r8
   153f4:	bl	10ec4 <fputs_unlocked@plt>
   153f8:	cmp	r6, #9
   153fc:	bhi	15438 <__assert_fail@plt+0x42ec>
   15400:	add	r0, pc, #0
   15404:	ldr	pc, [r0, r6, lsl #2]
   15408:	andeq	r5, r1, r0, lsr r4
   1540c:	andeq	r5, r1, r4, asr #8
   15410:	andeq	r5, r1, r4, ror r4
   15414:	muleq	r1, ip, r4
   15418:	andeq	r5, r1, r4, asr #9
   1541c:	andeq	r5, r1, ip, ror #9
   15420:	andeq	r5, r1, r4, lsl r5
   15424:	andeq	r5, r1, ip, asr #10
   15428:	strdeq	r5, [r1], -r4
   1542c:	muleq	r1, ip, r5
   15430:	sub	sp, fp, #24
   15434:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15438:	movw	r1, #29719	; 0x7417
   1543c:	movt	r1, #1
   15440:	b	155a4 <__assert_fail@plt+0x4458>
   15444:	movw	r1, #29400	; 0x72d8
   15448:	mov	r0, #0
   1544c:	mov	r2, #5
   15450:	movt	r1, #1
   15454:	bl	10f48 <dcgettext@plt>
   15458:	ldr	r3, [r7]
   1545c:	mov	r2, r0
   15460:	mov	r0, r8
   15464:	mov	r1, #1
   15468:	sub	sp, fp, #24
   1546c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15470:	b	1108c <__fprintf_chk@plt>
   15474:	movw	r1, #29416	; 0x72e8
   15478:	mov	r0, #0
   1547c:	mov	r2, #5
   15480:	movt	r1, #1
   15484:	bl	10f48 <dcgettext@plt>
   15488:	mov	r2, r0
   1548c:	ldr	r3, [r7]
   15490:	ldr	r0, [r7, #4]
   15494:	str	r0, [sp]
   15498:	b	15588 <__assert_fail@plt+0x443c>
   1549c:	movw	r1, #29439	; 0x72ff
   154a0:	mov	r0, #0
   154a4:	mov	r2, #5
   154a8:	movt	r1, #1
   154ac:	bl	10f48 <dcgettext@plt>
   154b0:	mov	r2, r0
   154b4:	ldr	r3, [r7]
   154b8:	ldmib	r7, {r0, r1}
   154bc:	stm	sp, {r0, r1}
   154c0:	b	15588 <__assert_fail@plt+0x443c>
   154c4:	movw	r1, #29467	; 0x731b
   154c8:	mov	r0, #0
   154cc:	mov	r2, #5
   154d0:	movt	r1, #1
   154d4:	bl	10f48 <dcgettext@plt>
   154d8:	ldr	r3, [r7]
   154dc:	mov	r2, r0
   154e0:	ldmib	r7, {r0, r1, r7}
   154e4:	stm	sp, {r0, r1, r7}
   154e8:	b	15588 <__assert_fail@plt+0x443c>
   154ec:	movw	r1, #29499	; 0x733b
   154f0:	mov	r0, #0
   154f4:	mov	r2, #5
   154f8:	movt	r1, #1
   154fc:	bl	10f48 <dcgettext@plt>
   15500:	ldr	r3, [r7]
   15504:	mov	r2, r0
   15508:	ldmib	r7, {r0, r1, r6, r7}
   1550c:	stm	sp, {r0, r1, r6, r7}
   15510:	b	15588 <__assert_fail@plt+0x443c>
   15514:	movw	r1, #29535	; 0x735f
   15518:	mov	r0, #0
   1551c:	mov	r2, #5
   15520:	movt	r1, #1
   15524:	bl	10f48 <dcgettext@plt>
   15528:	mov	r2, r0
   1552c:	ldr	r3, [r7]
   15530:	ldmib	r7, {r0, r1, r6}
   15534:	ldr	r5, [r7, #16]
   15538:	ldr	r7, [r7, #20]
   1553c:	stm	sp, {r0, r1, r6}
   15540:	str	r5, [sp, #12]
   15544:	str	r7, [sp, #16]
   15548:	b	15588 <__assert_fail@plt+0x443c>
   1554c:	movw	r1, #29575	; 0x7387
   15550:	mov	r0, #0
   15554:	mov	r2, #5
   15558:	movt	r1, #1
   1555c:	bl	10f48 <dcgettext@plt>
   15560:	mov	r2, r0
   15564:	ldr	r3, [r7]
   15568:	ldmib	r7, {r0, r1, r6}
   1556c:	ldr	r5, [r7, #16]
   15570:	ldr	r4, [r7, #20]
   15574:	ldr	r7, [r7, #24]
   15578:	stm	sp, {r0, r1, r6}
   1557c:	str	r5, [sp, #12]
   15580:	str	r4, [sp, #16]
   15584:	str	r7, [sp, #20]
   15588:	mov	r0, r8
   1558c:	mov	r1, #1
   15590:	bl	1108c <__fprintf_chk@plt>
   15594:	sub	sp, fp, #24
   15598:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1559c:	movw	r1, #29667	; 0x73e3
   155a0:	movt	r1, #1
   155a4:	mov	r0, #0
   155a8:	mov	r2, #5
   155ac:	bl	10f48 <dcgettext@plt>
   155b0:	mov	ip, r0
   155b4:	ldr	r3, [r7]
   155b8:	ldr	r0, [r7, #4]
   155bc:	ldr	r1, [r7, #8]
   155c0:	ldr	r6, [r7, #12]
   155c4:	ldr	r5, [r7, #16]
   155c8:	ldr	r4, [r7, #20]
   155cc:	ldr	r2, [r7, #24]
   155d0:	ldr	lr, [r7, #28]
   155d4:	ldr	r7, [r7, #32]
   155d8:	stm	sp, {r0, r1, r6}
   155dc:	str	r5, [sp, #12]
   155e0:	str	r4, [sp, #16]
   155e4:	str	r2, [sp, #20]
   155e8:	str	lr, [sp, #24]
   155ec:	str	r7, [sp, #28]
   155f0:	b	15638 <__assert_fail@plt+0x44ec>
   155f4:	movw	r1, #29619	; 0x73b3
   155f8:	mov	r0, #0
   155fc:	mov	r2, #5
   15600:	movt	r1, #1
   15604:	bl	10f48 <dcgettext@plt>
   15608:	mov	ip, r0
   1560c:	ldr	r3, [r7]
   15610:	ldmib	r7, {r0, r1, r6}
   15614:	ldr	r5, [r7, #16]
   15618:	ldr	r4, [r7, #20]
   1561c:	ldr	r2, [r7, #24]
   15620:	ldr	r7, [r7, #28]
   15624:	stm	sp, {r0, r1, r6}
   15628:	str	r5, [sp, #12]
   1562c:	str	r4, [sp, #16]
   15630:	str	r2, [sp, #20]
   15634:	str	r7, [sp, #24]
   15638:	mov	r0, r8
   1563c:	mov	r1, #1
   15640:	mov	r2, ip
   15644:	bl	1108c <__fprintf_chk@plt>
   15648:	sub	sp, fp, #24
   1564c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15650:	push	{r4, sl, fp, lr}
   15654:	add	fp, sp, #8
   15658:	sub	sp, sp, #8
   1565c:	ldr	ip, [fp, #8]
   15660:	mov	lr, #0
   15664:	ldr	r4, [ip, lr, lsl #2]
   15668:	add	lr, lr, #1
   1566c:	cmp	r4, #0
   15670:	bne	15664 <__assert_fail@plt+0x4518>
   15674:	sub	r4, lr, #1
   15678:	str	ip, [sp]
   1567c:	str	r4, [sp, #4]
   15680:	bl	15314 <__assert_fail@plt+0x41c8>
   15684:	sub	sp, fp, #8
   15688:	pop	{r4, sl, fp, pc}
   1568c:	push	{fp, lr}
   15690:	mov	fp, sp
   15694:	sub	sp, sp, #48	; 0x30
   15698:	ldr	ip, [fp, #8]
   1569c:	ldr	lr, [ip]
   156a0:	cmp	lr, #0
   156a4:	str	lr, [sp, #8]
   156a8:	beq	15744 <__assert_fail@plt+0x45f8>
   156ac:	ldr	lr, [ip, #4]
   156b0:	cmp	lr, #0
   156b4:	str	lr, [sp, #12]
   156b8:	beq	1574c <__assert_fail@plt+0x4600>
   156bc:	ldr	lr, [ip, #8]
   156c0:	cmp	lr, #0
   156c4:	str	lr, [sp, #16]
   156c8:	beq	15754 <__assert_fail@plt+0x4608>
   156cc:	ldr	lr, [ip, #12]
   156d0:	cmp	lr, #0
   156d4:	str	lr, [sp, #20]
   156d8:	beq	1575c <__assert_fail@plt+0x4610>
   156dc:	ldr	lr, [ip, #16]
   156e0:	cmp	lr, #0
   156e4:	str	lr, [sp, #24]
   156e8:	beq	15764 <__assert_fail@plt+0x4618>
   156ec:	ldr	lr, [ip, #20]
   156f0:	cmp	lr, #0
   156f4:	str	lr, [sp, #28]
   156f8:	beq	1576c <__assert_fail@plt+0x4620>
   156fc:	ldr	lr, [ip, #24]
   15700:	cmp	lr, #0
   15704:	str	lr, [sp, #32]
   15708:	beq	15774 <__assert_fail@plt+0x4628>
   1570c:	ldr	lr, [ip, #28]
   15710:	cmp	lr, #0
   15714:	str	lr, [sp, #36]	; 0x24
   15718:	beq	1577c <__assert_fail@plt+0x4630>
   1571c:	ldr	lr, [ip, #32]
   15720:	cmp	lr, #0
   15724:	str	lr, [sp, #40]	; 0x28
   15728:	beq	15784 <__assert_fail@plt+0x4638>
   1572c:	ldr	lr, [ip, #36]	; 0x24
   15730:	mov	ip, #10
   15734:	cmp	lr, #0
   15738:	str	lr, [sp, #44]	; 0x2c
   1573c:	movweq	ip, #9
   15740:	b	15788 <__assert_fail@plt+0x463c>
   15744:	mov	ip, #0
   15748:	b	15788 <__assert_fail@plt+0x463c>
   1574c:	mov	ip, #1
   15750:	b	15788 <__assert_fail@plt+0x463c>
   15754:	mov	ip, #2
   15758:	b	15788 <__assert_fail@plt+0x463c>
   1575c:	mov	ip, #3
   15760:	b	15788 <__assert_fail@plt+0x463c>
   15764:	mov	ip, #4
   15768:	b	15788 <__assert_fail@plt+0x463c>
   1576c:	mov	ip, #5
   15770:	b	15788 <__assert_fail@plt+0x463c>
   15774:	mov	ip, #6
   15778:	b	15788 <__assert_fail@plt+0x463c>
   1577c:	mov	ip, #7
   15780:	b	15788 <__assert_fail@plt+0x463c>
   15784:	mov	ip, #8
   15788:	add	lr, sp, #8
   1578c:	str	ip, [sp, #4]
   15790:	str	lr, [sp]
   15794:	bl	15314 <__assert_fail@plt+0x41c8>
   15798:	mov	sp, fp
   1579c:	pop	{fp, pc}
   157a0:	push	{fp, lr}
   157a4:	mov	fp, sp
   157a8:	sub	sp, sp, #56	; 0x38
   157ac:	add	ip, fp, #8
   157b0:	str	ip, [sp, #12]
   157b4:	ldr	lr, [fp, #8]
   157b8:	cmp	lr, #0
   157bc:	str	lr, [sp, #16]
   157c0:	beq	1585c <__assert_fail@plt+0x4710>
   157c4:	ldr	lr, [ip, #4]
   157c8:	cmp	lr, #0
   157cc:	str	lr, [sp, #20]
   157d0:	beq	15864 <__assert_fail@plt+0x4718>
   157d4:	ldr	lr, [ip, #8]
   157d8:	cmp	lr, #0
   157dc:	str	lr, [sp, #24]
   157e0:	beq	1586c <__assert_fail@plt+0x4720>
   157e4:	ldr	lr, [ip, #12]
   157e8:	cmp	lr, #0
   157ec:	str	lr, [sp, #28]
   157f0:	beq	15874 <__assert_fail@plt+0x4728>
   157f4:	ldr	lr, [ip, #16]
   157f8:	cmp	lr, #0
   157fc:	str	lr, [sp, #32]
   15800:	beq	1587c <__assert_fail@plt+0x4730>
   15804:	ldr	lr, [ip, #20]
   15808:	cmp	lr, #0
   1580c:	str	lr, [sp, #36]	; 0x24
   15810:	beq	15884 <__assert_fail@plt+0x4738>
   15814:	ldr	lr, [ip, #24]
   15818:	cmp	lr, #0
   1581c:	str	lr, [sp, #40]	; 0x28
   15820:	beq	1588c <__assert_fail@plt+0x4740>
   15824:	ldr	lr, [ip, #28]
   15828:	cmp	lr, #0
   1582c:	str	lr, [sp, #44]	; 0x2c
   15830:	beq	15894 <__assert_fail@plt+0x4748>
   15834:	ldr	lr, [ip, #32]
   15838:	cmp	lr, #0
   1583c:	str	lr, [sp, #48]	; 0x30
   15840:	beq	1589c <__assert_fail@plt+0x4750>
   15844:	ldr	lr, [ip, #36]	; 0x24
   15848:	mov	ip, #10
   1584c:	cmp	lr, #0
   15850:	str	lr, [sp, #52]	; 0x34
   15854:	movweq	ip, #9
   15858:	b	158a0 <__assert_fail@plt+0x4754>
   1585c:	mov	ip, #0
   15860:	b	158a0 <__assert_fail@plt+0x4754>
   15864:	mov	ip, #1
   15868:	b	158a0 <__assert_fail@plt+0x4754>
   1586c:	mov	ip, #2
   15870:	b	158a0 <__assert_fail@plt+0x4754>
   15874:	mov	ip, #3
   15878:	b	158a0 <__assert_fail@plt+0x4754>
   1587c:	mov	ip, #4
   15880:	b	158a0 <__assert_fail@plt+0x4754>
   15884:	mov	ip, #5
   15888:	b	158a0 <__assert_fail@plt+0x4754>
   1588c:	mov	ip, #6
   15890:	b	158a0 <__assert_fail@plt+0x4754>
   15894:	mov	ip, #7
   15898:	b	158a0 <__assert_fail@plt+0x4754>
   1589c:	mov	ip, #8
   158a0:	add	lr, sp, #16
   158a4:	str	ip, [sp, #4]
   158a8:	str	lr, [sp]
   158ac:	bl	15314 <__assert_fail@plt+0x41c8>
   158b0:	mov	sp, fp
   158b4:	pop	{fp, pc}
   158b8:	push	{fp, lr}
   158bc:	mov	fp, sp
   158c0:	movw	r0, #33116	; 0x815c
   158c4:	movt	r0, #2
   158c8:	ldr	r1, [r0]
   158cc:	movw	r0, #28130	; 0x6de2
   158d0:	movt	r0, #1
   158d4:	bl	10ec4 <fputs_unlocked@plt>
   158d8:	movw	r1, #29779	; 0x7453
   158dc:	mov	r0, #0
   158e0:	mov	r2, #5
   158e4:	movt	r1, #1
   158e8:	bl	10f48 <dcgettext@plt>
   158ec:	movw	r2, #29799	; 0x7467
   158f0:	mov	r1, r0
   158f4:	mov	r0, #1
   158f8:	movt	r2, #1
   158fc:	bl	11074 <__printf_chk@plt>
   15900:	movw	r1, #29821	; 0x747d
   15904:	mov	r0, #0
   15908:	mov	r2, #5
   1590c:	movt	r1, #1
   15910:	bl	10f48 <dcgettext@plt>
   15914:	movw	r2, #27435	; 0x6b2b
   15918:	movw	r3, #27939	; 0x6d23
   1591c:	mov	r1, r0
   15920:	mov	r0, #1
   15924:	movt	r2, #1
   15928:	movt	r3, #1
   1592c:	bl	11074 <__printf_chk@plt>
   15930:	movw	r1, #29841	; 0x7491
   15934:	mov	r0, #0
   15938:	mov	r2, #5
   1593c:	movt	r1, #1
   15940:	bl	10f48 <dcgettext@plt>
   15944:	movw	r2, #29880	; 0x74b8
   15948:	mov	r1, r0
   1594c:	mov	r0, #1
   15950:	movt	r2, #1
   15954:	pop	{fp, lr}
   15958:	b	11074 <__printf_chk@plt>
   1595c:	push	{r4, r5, r6, sl, fp, lr}
   15960:	add	fp, sp, #16
   15964:	mov	r4, r2
   15968:	mov	r5, r1
   1596c:	mov	r6, r0
   15970:	bl	162cc <__assert_fail@plt+0x5180>
   15974:	cmp	r0, #0
   15978:	popne	{r4, r5, r6, sl, fp, pc}
   1597c:	cmp	r6, #0
   15980:	beq	15994 <__assert_fail@plt+0x4848>
   15984:	cmp	r5, #0
   15988:	cmpne	r4, #0
   1598c:	bne	15994 <__assert_fail@plt+0x4848>
   15990:	pop	{r4, r5, r6, sl, fp, pc}
   15994:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15998:	push	{r4, r5, r6, sl, fp, lr}
   1599c:	add	fp, sp, #16
   159a0:	mov	r4, r2
   159a4:	mov	r5, r1
   159a8:	mov	r6, r0
   159ac:	bl	162cc <__assert_fail@plt+0x5180>
   159b0:	cmp	r0, #0
   159b4:	popne	{r4, r5, r6, sl, fp, pc}
   159b8:	cmp	r6, #0
   159bc:	beq	159d0 <__assert_fail@plt+0x4884>
   159c0:	cmp	r5, #0
   159c4:	cmpne	r4, #0
   159c8:	bne	159d0 <__assert_fail@plt+0x4884>
   159cc:	pop	{r4, r5, r6, sl, fp, pc}
   159d0:	bl	15f10 <__assert_fail@plt+0x4dc4>
   159d4:	push	{fp, lr}
   159d8:	mov	fp, sp
   159dc:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   159e0:	cmp	r0, #0
   159e4:	popne	{fp, pc}
   159e8:	bl	15f10 <__assert_fail@plt+0x4dc4>
   159ec:	push	{fp, lr}
   159f0:	mov	fp, sp
   159f4:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   159f8:	cmp	r0, #0
   159fc:	popne	{fp, pc}
   15a00:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15a04:	push	{fp, lr}
   15a08:	mov	fp, sp
   15a0c:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   15a10:	cmp	r0, #0
   15a14:	popne	{fp, pc}
   15a18:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15a1c:	push	{r4, r5, fp, lr}
   15a20:	add	fp, sp, #8
   15a24:	mov	r4, r1
   15a28:	mov	r5, r0
   15a2c:	bl	15fd8 <__assert_fail@plt+0x4e8c>
   15a30:	cmp	r0, #0
   15a34:	popne	{r4, r5, fp, pc}
   15a38:	cmp	r5, #0
   15a3c:	beq	15a4c <__assert_fail@plt+0x4900>
   15a40:	cmp	r4, #0
   15a44:	bne	15a4c <__assert_fail@plt+0x4900>
   15a48:	pop	{r4, r5, fp, pc}
   15a4c:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15a50:	push	{fp, lr}
   15a54:	mov	fp, sp
   15a58:	cmp	r1, #0
   15a5c:	orreq	r1, r1, #1
   15a60:	bl	15fd8 <__assert_fail@plt+0x4e8c>
   15a64:	cmp	r0, #0
   15a68:	popne	{fp, pc}
   15a6c:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15a70:	push	{fp, lr}
   15a74:	mov	fp, sp
   15a78:	clz	r3, r2
   15a7c:	lsr	ip, r3, #5
   15a80:	clz	r3, r1
   15a84:	lsr	r3, r3, #5
   15a88:	orrs	r3, r3, ip
   15a8c:	movwne	r1, #1
   15a90:	movwne	r2, #1
   15a94:	bl	162cc <__assert_fail@plt+0x5180>
   15a98:	cmp	r0, #0
   15a9c:	popne	{fp, pc}
   15aa0:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15aa4:	push	{fp, lr}
   15aa8:	mov	fp, sp
   15aac:	mov	r2, r1
   15ab0:	mov	r1, r0
   15ab4:	mov	r0, #0
   15ab8:	bl	162cc <__assert_fail@plt+0x5180>
   15abc:	cmp	r0, #0
   15ac0:	popne	{fp, pc}
   15ac4:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	mov	r2, r1
   15ad4:	mov	r1, r0
   15ad8:	clz	r0, r2
   15adc:	clz	r3, r1
   15ae0:	lsr	r0, r0, #5
   15ae4:	lsr	r3, r3, #5
   15ae8:	orrs	r0, r3, r0
   15aec:	mov	r0, #0
   15af0:	movwne	r1, #1
   15af4:	movwne	r2, #1
   15af8:	bl	162cc <__assert_fail@plt+0x5180>
   15afc:	cmp	r0, #0
   15b00:	popne	{fp, pc}
   15b04:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15b08:	push	{r4, r5, r6, sl, fp, lr}
   15b0c:	add	fp, sp, #16
   15b10:	ldr	r5, [r1]
   15b14:	mov	r4, r1
   15b18:	mov	r6, r0
   15b1c:	cmp	r0, #0
   15b20:	beq	15b38 <__assert_fail@plt+0x49ec>
   15b24:	mov	r0, #1
   15b28:	add	r0, r0, r5, lsr #1
   15b2c:	adds	r5, r5, r0
   15b30:	bcc	15b40 <__assert_fail@plt+0x49f4>
   15b34:	b	15b7c <__assert_fail@plt+0x4a30>
   15b38:	cmp	r5, #0
   15b3c:	movweq	r5, #64	; 0x40
   15b40:	mov	r0, r6
   15b44:	mov	r1, r5
   15b48:	mov	r2, #1
   15b4c:	bl	162cc <__assert_fail@plt+0x5180>
   15b50:	cmp	r5, #0
   15b54:	mov	r1, r5
   15b58:	movwne	r1, #1
   15b5c:	cmp	r0, #0
   15b60:	bne	15b74 <__assert_fail@plt+0x4a28>
   15b64:	clz	r2, r6
   15b68:	lsr	r2, r2, #5
   15b6c:	orrs	r1, r2, r1
   15b70:	bne	15b7c <__assert_fail@plt+0x4a30>
   15b74:	str	r5, [r4]
   15b78:	pop	{r4, r5, r6, sl, fp, pc}
   15b7c:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15b80:	push	{r4, r5, r6, r7, fp, lr}
   15b84:	add	fp, sp, #16
   15b88:	ldr	r5, [r1]
   15b8c:	mov	r6, r2
   15b90:	mov	r4, r1
   15b94:	mov	r7, r0
   15b98:	cmp	r0, #0
   15b9c:	beq	15bb4 <__assert_fail@plt+0x4a68>
   15ba0:	mov	r0, #1
   15ba4:	add	r0, r0, r5, lsr #1
   15ba8:	adds	r5, r5, r0
   15bac:	bcc	15bcc <__assert_fail@plt+0x4a80>
   15bb0:	b	15c00 <__assert_fail@plt+0x4ab4>
   15bb4:	cmp	r5, #0
   15bb8:	bne	15bcc <__assert_fail@plt+0x4a80>
   15bbc:	mov	r0, #64	; 0x40
   15bc0:	cmp	r6, #64	; 0x40
   15bc4:	udiv	r5, r0, r6
   15bc8:	addhi	r5, r5, #1
   15bcc:	mov	r0, r7
   15bd0:	mov	r1, r5
   15bd4:	mov	r2, r6
   15bd8:	bl	162cc <__assert_fail@plt+0x5180>
   15bdc:	cmp	r0, #0
   15be0:	bne	15bf8 <__assert_fail@plt+0x4aac>
   15be4:	cmp	r7, #0
   15be8:	beq	15c00 <__assert_fail@plt+0x4ab4>
   15bec:	cmp	r6, #0
   15bf0:	cmpne	r5, #0
   15bf4:	bne	15c00 <__assert_fail@plt+0x4ab4>
   15bf8:	str	r5, [r4]
   15bfc:	pop	{r4, r5, r6, r7, fp, pc}
   15c00:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15c04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c08:	add	fp, sp, #24
   15c0c:	mov	r8, r1
   15c10:	ldr	r1, [r1]
   15c14:	mov	r5, r0
   15c18:	add	r0, r1, r1, asr #1
   15c1c:	cmp	r0, r1
   15c20:	mvnvs	r0, #-2147483648	; 0x80000000
   15c24:	cmp	r0, r3
   15c28:	mov	r7, r0
   15c2c:	movgt	r7, r3
   15c30:	cmn	r3, #1
   15c34:	movle	r7, r0
   15c38:	ldr	r0, [fp, #8]
   15c3c:	cmn	r0, #1
   15c40:	ble	15c68 <__assert_fail@plt+0x4b1c>
   15c44:	cmp	r0, #0
   15c48:	beq	15cbc <__assert_fail@plt+0x4b70>
   15c4c:	cmn	r7, #1
   15c50:	ble	15c90 <__assert_fail@plt+0x4b44>
   15c54:	mvn	r4, #-2147483648	; 0x80000000
   15c58:	udiv	r6, r4, r0
   15c5c:	cmp	r6, r7
   15c60:	bge	15cbc <__assert_fail@plt+0x4b70>
   15c64:	b	15ccc <__assert_fail@plt+0x4b80>
   15c68:	cmn	r7, #1
   15c6c:	ble	15cac <__assert_fail@plt+0x4b60>
   15c70:	cmn	r0, #1
   15c74:	beq	15cbc <__assert_fail@plt+0x4b70>
   15c78:	mov	r6, #-2147483648	; 0x80000000
   15c7c:	mvn	r4, #-2147483648	; 0x80000000
   15c80:	sdiv	r6, r6, r0
   15c84:	cmp	r6, r7
   15c88:	bge	15cbc <__assert_fail@plt+0x4b70>
   15c8c:	b	15ccc <__assert_fail@plt+0x4b80>
   15c90:	beq	15cbc <__assert_fail@plt+0x4b70>
   15c94:	mov	r6, #-2147483648	; 0x80000000
   15c98:	mvn	r4, #-2147483648	; 0x80000000
   15c9c:	sdiv	r6, r6, r7
   15ca0:	cmp	r6, r0
   15ca4:	bge	15cbc <__assert_fail@plt+0x4b70>
   15ca8:	b	15ccc <__assert_fail@plt+0x4b80>
   15cac:	mvn	r4, #-2147483648	; 0x80000000
   15cb0:	sdiv	r6, r4, r0
   15cb4:	cmp	r7, r6
   15cb8:	blt	15ccc <__assert_fail@plt+0x4b80>
   15cbc:	mul	r6, r7, r0
   15cc0:	mov	r4, #64	; 0x40
   15cc4:	cmp	r6, #63	; 0x3f
   15cc8:	bgt	15cd4 <__assert_fail@plt+0x4b88>
   15ccc:	sdiv	r7, r4, r0
   15cd0:	mul	r6, r7, r0
   15cd4:	cmp	r5, #0
   15cd8:	moveq	r4, #0
   15cdc:	streq	r4, [r8]
   15ce0:	sub	r4, r7, r1
   15ce4:	cmp	r4, r2
   15ce8:	bge	15d94 <__assert_fail@plt+0x4c48>
   15cec:	add	r7, r1, r2
   15cf0:	mov	r6, #0
   15cf4:	mov	r2, #0
   15cf8:	cmp	r7, r3
   15cfc:	movwgt	r6, #1
   15d00:	cmn	r3, #1
   15d04:	movwgt	r2, #1
   15d08:	cmp	r7, r1
   15d0c:	bvs	15dc8 <__assert_fail@plt+0x4c7c>
   15d10:	ands	r1, r2, r6
   15d14:	bne	15dc8 <__assert_fail@plt+0x4c7c>
   15d18:	cmn	r0, #1
   15d1c:	ble	15d44 <__assert_fail@plt+0x4bf8>
   15d20:	cmp	r0, #0
   15d24:	beq	15d90 <__assert_fail@plt+0x4c44>
   15d28:	cmn	r7, #1
   15d2c:	ble	15d68 <__assert_fail@plt+0x4c1c>
   15d30:	mvn	r1, #-2147483648	; 0x80000000
   15d34:	udiv	r1, r1, r0
   15d38:	cmp	r1, r7
   15d3c:	bge	15d90 <__assert_fail@plt+0x4c44>
   15d40:	b	15dc8 <__assert_fail@plt+0x4c7c>
   15d44:	cmn	r7, #1
   15d48:	ble	15d80 <__assert_fail@plt+0x4c34>
   15d4c:	cmn	r0, #1
   15d50:	beq	15d90 <__assert_fail@plt+0x4c44>
   15d54:	mov	r1, #-2147483648	; 0x80000000
   15d58:	sdiv	r1, r1, r0
   15d5c:	cmp	r1, r7
   15d60:	bge	15d90 <__assert_fail@plt+0x4c44>
   15d64:	b	15dc8 <__assert_fail@plt+0x4c7c>
   15d68:	beq	15d90 <__assert_fail@plt+0x4c44>
   15d6c:	mov	r1, #-2147483648	; 0x80000000
   15d70:	sdiv	r1, r1, r7
   15d74:	cmp	r1, r0
   15d78:	bge	15d90 <__assert_fail@plt+0x4c44>
   15d7c:	b	15dc8 <__assert_fail@plt+0x4c7c>
   15d80:	mvn	r1, #-2147483648	; 0x80000000
   15d84:	sdiv	r1, r1, r0
   15d88:	cmp	r7, r1
   15d8c:	blt	15dc8 <__assert_fail@plt+0x4c7c>
   15d90:	mul	r6, r7, r0
   15d94:	mov	r0, r5
   15d98:	mov	r1, r6
   15d9c:	bl	15fd8 <__assert_fail@plt+0x4e8c>
   15da0:	cmp	r6, #0
   15da4:	movwne	r6, #1
   15da8:	cmp	r0, #0
   15dac:	bne	15dc0 <__assert_fail@plt+0x4c74>
   15db0:	clz	r1, r5
   15db4:	lsr	r1, r1, #5
   15db8:	orrs	r1, r1, r6
   15dbc:	bne	15dc8 <__assert_fail@plt+0x4c7c>
   15dc0:	str	r7, [r8]
   15dc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15dc8:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15dcc:	push	{fp, lr}
   15dd0:	mov	fp, sp
   15dd4:	mov	r1, #1
   15dd8:	bl	15f54 <__assert_fail@plt+0x4e08>
   15ddc:	cmp	r0, #0
   15de0:	popne	{fp, pc}
   15de4:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15de8:	push	{fp, lr}
   15dec:	mov	fp, sp
   15df0:	bl	15f54 <__assert_fail@plt+0x4e08>
   15df4:	cmp	r0, #0
   15df8:	popne	{fp, pc}
   15dfc:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15e00:	push	{fp, lr}
   15e04:	mov	fp, sp
   15e08:	mov	r1, #1
   15e0c:	bl	15f54 <__assert_fail@plt+0x4e08>
   15e10:	cmp	r0, #0
   15e14:	popne	{fp, pc}
   15e18:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15e1c:	push	{fp, lr}
   15e20:	mov	fp, sp
   15e24:	bl	15f54 <__assert_fail@plt+0x4e08>
   15e28:	cmp	r0, #0
   15e2c:	popne	{fp, pc}
   15e30:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15e34:	push	{r4, r5, fp, lr}
   15e38:	add	fp, sp, #8
   15e3c:	mov	r5, r0
   15e40:	mov	r0, r1
   15e44:	mov	r4, r1
   15e48:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   15e4c:	cmp	r0, #0
   15e50:	beq	15e64 <__assert_fail@plt+0x4d18>
   15e54:	mov	r1, r5
   15e58:	mov	r2, r4
   15e5c:	pop	{r4, r5, fp, lr}
   15e60:	b	10f24 <memcpy@plt>
   15e64:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15e68:	push	{r4, r5, fp, lr}
   15e6c:	add	fp, sp, #8
   15e70:	mov	r5, r0
   15e74:	mov	r0, r1
   15e78:	mov	r4, r1
   15e7c:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   15e80:	cmp	r0, #0
   15e84:	beq	15e98 <__assert_fail@plt+0x4d4c>
   15e88:	mov	r1, r5
   15e8c:	mov	r2, r4
   15e90:	pop	{r4, r5, fp, lr}
   15e94:	b	10f24 <memcpy@plt>
   15e98:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15e9c:	push	{r4, r5, fp, lr}
   15ea0:	add	fp, sp, #8
   15ea4:	mov	r5, r0
   15ea8:	add	r0, r1, #1
   15eac:	mov	r4, r1
   15eb0:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   15eb4:	cmp	r0, #0
   15eb8:	beq	15ed4 <__assert_fail@plt+0x4d88>
   15ebc:	mov	r1, #0
   15ec0:	mov	r2, r4
   15ec4:	strb	r1, [r0, r4]
   15ec8:	mov	r1, r5
   15ecc:	pop	{r4, r5, fp, lr}
   15ed0:	b	10f24 <memcpy@plt>
   15ed4:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15ed8:	push	{r4, r5, fp, lr}
   15edc:	add	fp, sp, #8
   15ee0:	mov	r4, r0
   15ee4:	bl	1102c <strlen@plt>
   15ee8:	add	r5, r0, #1
   15eec:	mov	r0, r5
   15ef0:	bl	15fa8 <__assert_fail@plt+0x4e5c>
   15ef4:	cmp	r0, #0
   15ef8:	beq	15f0c <__assert_fail@plt+0x4dc0>
   15efc:	mov	r1, r4
   15f00:	mov	r2, r5
   15f04:	pop	{r4, r5, fp, lr}
   15f08:	b	10f24 <memcpy@plt>
   15f0c:	bl	15f10 <__assert_fail@plt+0x4dc4>
   15f10:	push	{fp, lr}
   15f14:	mov	fp, sp
   15f18:	movw	r0, #33020	; 0x80fc
   15f1c:	movw	r1, #29956	; 0x7504
   15f20:	mov	r2, #5
   15f24:	movt	r0, #2
   15f28:	movt	r1, #1
   15f2c:	ldr	r4, [r0]
   15f30:	mov	r0, #0
   15f34:	bl	10f48 <dcgettext@plt>
   15f38:	movw	r2, #28918	; 0x70f6
   15f3c:	mov	r3, r0
   15f40:	mov	r0, r4
   15f44:	mov	r1, #0
   15f48:	movt	r2, #1
   15f4c:	bl	10fc0 <error@plt>
   15f50:	bl	11134 <abort@plt>
   15f54:	clz	r2, r1
   15f58:	clz	r3, r0
   15f5c:	lsr	r2, r2, #5
   15f60:	lsr	r3, r3, #5
   15f64:	orrs	r2, r3, r2
   15f68:	movwne	r1, #1
   15f6c:	movwne	r0, #1
   15f70:	cmp	r1, #0
   15f74:	beq	15fa4 <__assert_fail@plt+0x4e58>
   15f78:	mvn	r2, #-2147483648	; 0x80000000
   15f7c:	udiv	r2, r2, r1
   15f80:	cmp	r2, r0
   15f84:	bcs	15fa4 <__assert_fail@plt+0x4e58>
   15f88:	push	{fp, lr}
   15f8c:	mov	fp, sp
   15f90:	bl	11044 <__errno_location@plt>
   15f94:	mov	r1, #12
   15f98:	str	r1, [r0]
   15f9c:	mov	r0, #0
   15fa0:	pop	{fp, pc}
   15fa4:	b	10eb8 <calloc@plt>
   15fa8:	cmp	r0, #0
   15fac:	movweq	r0, #1
   15fb0:	cmn	r0, #1
   15fb4:	ble	15fbc <__assert_fail@plt+0x4e70>
   15fb8:	b	10fcc <malloc@plt>
   15fbc:	push	{fp, lr}
   15fc0:	mov	fp, sp
   15fc4:	bl	11044 <__errno_location@plt>
   15fc8:	mov	r1, #12
   15fcc:	str	r1, [r0]
   15fd0:	mov	r0, #0
   15fd4:	pop	{fp, pc}
   15fd8:	push	{fp, lr}
   15fdc:	mov	fp, sp
   15fe0:	cmp	r0, #0
   15fe4:	beq	16000 <__assert_fail@plt+0x4eb4>
   15fe8:	cmp	r1, #0
   15fec:	beq	1600c <__assert_fail@plt+0x4ec0>
   15ff0:	cmn	r1, #1
   15ff4:	ble	16018 <__assert_fail@plt+0x4ecc>
   15ff8:	pop	{fp, lr}
   15ffc:	b	10f54 <realloc@plt>
   16000:	mov	r0, r1
   16004:	pop	{fp, lr}
   16008:	b	15fa8 <__assert_fail@plt+0x4e5c>
   1600c:	bl	12cd8 <__assert_fail@plt+0x1b8c>
   16010:	mov	r0, #0
   16014:	pop	{fp, pc}
   16018:	bl	11044 <__errno_location@plt>
   1601c:	mov	r1, #12
   16020:	str	r1, [r0]
   16024:	mov	r0, #0
   16028:	pop	{fp, pc}
   1602c:	push	{r4, r5, r6, sl, fp, lr}
   16030:	add	fp, sp, #16
   16034:	mov	r4, r0
   16038:	bl	10fa8 <__fpending@plt>
   1603c:	ldr	r6, [r4]
   16040:	mov	r5, r0
   16044:	mov	r0, r4
   16048:	bl	12be0 <__assert_fail@plt+0x1a94>
   1604c:	tst	r6, #32
   16050:	bne	16088 <__assert_fail@plt+0x4f3c>
   16054:	cmp	r0, #0
   16058:	mov	r4, r0
   1605c:	mvnne	r4, #0
   16060:	cmp	r5, #0
   16064:	bne	16094 <__assert_fail@plt+0x4f48>
   16068:	cmp	r0, #0
   1606c:	beq	16094 <__assert_fail@plt+0x4f48>
   16070:	bl	11044 <__errno_location@plt>
   16074:	ldr	r0, [r0]
   16078:	subs	r4, r0, #9
   1607c:	mvnne	r4, #0
   16080:	mov	r0, r4
   16084:	pop	{r4, r5, r6, sl, fp, pc}
   16088:	mvn	r4, #0
   1608c:	cmp	r0, #0
   16090:	beq	1609c <__assert_fail@plt+0x4f50>
   16094:	mov	r0, r4
   16098:	pop	{r4, r5, r6, sl, fp, pc}
   1609c:	bl	11044 <__errno_location@plt>
   160a0:	mov	r1, #0
   160a4:	str	r1, [r0]
   160a8:	mov	r0, r4
   160ac:	pop	{r4, r5, r6, sl, fp, pc}
   160b0:	push	{r4, r5, fp, lr}
   160b4:	add	fp, sp, #8
   160b8:	ldrd	r4, [r0, #16]
   160bc:	mov	r2, r0
   160c0:	mov	r0, #0
   160c4:	cmp	r5, r4
   160c8:	pophi	{r4, r5, fp, pc}
   160cc:	ldr	r3, [r2, #4]
   160d0:	ldr	r2, [r2, #8]
   160d4:	subs	r2, r2, r3
   160d8:	movne	r0, r3
   160dc:	strne	r2, [r1]
   160e0:	pop	{r4, r5, fp, pc}
   160e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160e8:	add	fp, sp, #24
   160ec:	sub	sp, sp, #8
   160f0:	sub	sp, sp, #4096	; 0x1000
   160f4:	mov	r8, #0
   160f8:	cmp	r1, #0
   160fc:	beq	16204 <__assert_fail@plt+0x50b8>
   16100:	mov	r6, r1
   16104:	mov	r5, r0
   16108:	bl	16308 <__assert_fail@plt+0x51bc>
   1610c:	mov	r7, r0
   16110:	add	r4, sp, #8
   16114:	cmp	r7, #0
   16118:	beq	1617c <__assert_fail@plt+0x5030>
   1611c:	mov	r0, r5
   16120:	mov	r1, r4
   16124:	bl	160b0 <__assert_fail@plt+0x4f64>
   16128:	cmp	r0, #0
   1612c:	ldrne	r0, [sp, #8]
   16130:	cmpne	r0, #0
   16134:	beq	1615c <__assert_fail@plt+0x5010>
   16138:	ldr	r1, [r5, #4]
   1613c:	cmp	r0, r6
   16140:	movcs	r0, r6
   16144:	subs	r6, r6, r0
   16148:	add	r1, r1, r0
   1614c:	str	r1, [r5, #4]
   16150:	beq	16204 <__assert_fail@plt+0x50b8>
   16154:	subs	r7, r7, r0
   16158:	beq	1617c <__assert_fail@plt+0x5030>
   1615c:	mov	r0, r5
   16160:	bl	11068 <fgetc@plt>
   16164:	cmn	r0, #1
   16168:	beq	16210 <__assert_fail@plt+0x50c4>
   1616c:	sub	r7, r7, #1
   16170:	subs	r6, r6, #1
   16174:	bne	16114 <__assert_fail@plt+0x4fc8>
   16178:	b	16204 <__assert_fail@plt+0x50b8>
   1617c:	mov	r0, r5
   16180:	bl	11080 <fileno@plt>
   16184:	cmp	r0, #0
   16188:	bmi	161cc <__assert_fail@plt+0x5080>
   1618c:	mov	r4, #1
   16190:	mov	r2, #0
   16194:	mov	r3, #0
   16198:	str	r4, [sp]
   1619c:	bl	10f84 <lseek64@plt>
   161a0:	cmp	r1, #0
   161a4:	bmi	161cc <__assert_fail@plt+0x5080>
   161a8:	mov	r0, r5
   161ac:	mov	r2, r6
   161b0:	mov	r3, #0
   161b4:	str	r4, [sp]
   161b8:	bl	12d00 <__assert_fail@plt+0x1bb4>
   161bc:	mov	r8, r0
   161c0:	mov	r0, r8
   161c4:	sub	sp, fp, #24
   161c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161cc:	add	r4, sp, #8
   161d0:	cmp	r6, #4096	; 0x1000
   161d4:	mov	r7, r6
   161d8:	mov	r0, r4
   161dc:	mov	r1, #1
   161e0:	mov	r3, r5
   161e4:	movcs	r7, #4096	; 0x1000
   161e8:	mov	r2, r7
   161ec:	bl	10f9c <fread@plt>
   161f0:	cmp	r0, r7
   161f4:	subcs	r6, r6, r7
   161f8:	bcc	16210 <__assert_fail@plt+0x50c4>
   161fc:	cmp	r6, #0
   16200:	bne	161d0 <__assert_fail@plt+0x5084>
   16204:	mov	r0, r8
   16208:	sub	sp, fp, #24
   1620c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16210:	mov	r0, r5
   16214:	bl	10f0c <ferror@plt>
   16218:	cmp	r0, #0
   1621c:	mov	r8, r0
   16220:	mvnne	r8, #0
   16224:	mov	r0, r8
   16228:	sub	sp, fp, #24
   1622c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16230:	push	{fp, lr}
   16234:	mov	fp, sp
   16238:	mov	r0, #14
   1623c:	bl	110ec <nl_langinfo@plt>
   16240:	movw	r1, #28131	; 0x6de3
   16244:	cmp	r0, #0
   16248:	movt	r1, #1
   1624c:	movne	r1, r0
   16250:	movw	r0, #29973	; 0x7515
   16254:	ldrb	r2, [r1]
   16258:	movt	r0, #1
   1625c:	cmp	r2, #0
   16260:	movne	r0, r1
   16264:	pop	{fp, pc}
   16268:	push	{r4, r5, r6, r7, fp, lr}
   1626c:	add	fp, sp, #16
   16270:	sub	sp, sp, #8
   16274:	cmp	r0, #0
   16278:	add	r5, sp, #4
   1627c:	mov	r7, r2
   16280:	mov	r4, r1
   16284:	movne	r5, r0
   16288:	mov	r0, r5
   1628c:	bl	10fb4 <mbrtowc@plt>
   16290:	mov	r6, r0
   16294:	cmp	r7, #0
   16298:	beq	162c0 <__assert_fail@plt+0x5174>
   1629c:	cmn	r6, #2
   162a0:	bcc	162c0 <__assert_fail@plt+0x5174>
   162a4:	mov	r0, #0
   162a8:	bl	16348 <__assert_fail@plt+0x51fc>
   162ac:	cmp	r0, #0
   162b0:	bne	162c0 <__assert_fail@plt+0x5174>
   162b4:	ldrb	r0, [r4]
   162b8:	mov	r6, #1
   162bc:	str	r0, [r5]
   162c0:	mov	r0, r6
   162c4:	sub	sp, fp, #16
   162c8:	pop	{r4, r5, r6, r7, fp, pc}
   162cc:	cmp	r2, #0
   162d0:	beq	16300 <__assert_fail@plt+0x51b4>
   162d4:	mvn	r3, #0
   162d8:	udiv	r3, r3, r2
   162dc:	cmp	r3, r1
   162e0:	bcs	16300 <__assert_fail@plt+0x51b4>
   162e4:	push	{fp, lr}
   162e8:	mov	fp, sp
   162ec:	bl	11044 <__errno_location@plt>
   162f0:	mov	r1, #12
   162f4:	str	r1, [r0]
   162f8:	mov	r0, #0
   162fc:	pop	{fp, pc}
   16300:	mul	r1, r2, r1
   16304:	b	15fd8 <__assert_fail@plt+0x4e8c>
   16308:	ldrd	r2, [r0, #16]
   1630c:	mov	r1, #0
   16310:	cmp	r3, r2
   16314:	bhi	16340 <__assert_fail@plt+0x51f4>
   16318:	ldrb	r3, [r0, #1]
   1631c:	ldmib	r0, {r1, r2}
   16320:	sub	r1, r2, r1
   16324:	mov	r2, #0
   16328:	tst	r3, #1
   1632c:	beq	1633c <__assert_fail@plt+0x51f0>
   16330:	ldr	r2, [r0, #36]	; 0x24
   16334:	ldr	r0, [r0, #44]	; 0x2c
   16338:	sub	r2, r0, r2
   1633c:	add	r1, r1, r2
   16340:	mov	r0, r1
   16344:	bx	lr
   16348:	push	{r4, sl, fp, lr}
   1634c:	add	fp, sp, #8
   16350:	sub	sp, sp, #264	; 0x108
   16354:	add	r1, sp, #7
   16358:	movw	r2, #257	; 0x101
   1635c:	bl	163b4 <__assert_fail@plt+0x5268>
   16360:	mov	r4, #0
   16364:	cmp	r0, #0
   16368:	bne	163a8 <__assert_fail@plt+0x525c>
   1636c:	movw	r1, #29979	; 0x751b
   16370:	add	r0, sp, #7
   16374:	mov	r2, #2
   16378:	movt	r1, #1
   1637c:	bl	11020 <bcmp@plt>
   16380:	cmp	r0, #0
   16384:	beq	163a8 <__assert_fail@plt+0x525c>
   16388:	movw	r1, #29981	; 0x751d
   1638c:	add	r0, sp, #7
   16390:	mov	r2, #6
   16394:	movt	r1, #1
   16398:	bl	11020 <bcmp@plt>
   1639c:	cmp	r0, #0
   163a0:	mov	r4, r0
   163a4:	movwne	r4, #1
   163a8:	mov	r0, r4
   163ac:	sub	sp, fp, #8
   163b0:	pop	{r4, sl, fp, pc}
   163b4:	push	{r4, r5, r6, r7, fp, lr}
   163b8:	add	fp, sp, #16
   163bc:	mov	r4, r1
   163c0:	mov	r1, #0
   163c4:	mov	r6, r2
   163c8:	bl	110d4 <setlocale@plt>
   163cc:	cmp	r0, #0
   163d0:	beq	16400 <__assert_fail@plt+0x52b4>
   163d4:	mov	r7, r0
   163d8:	bl	1102c <strlen@plt>
   163dc:	cmp	r0, r6
   163e0:	bcs	1641c <__assert_fail@plt+0x52d0>
   163e4:	add	r2, r0, #1
   163e8:	mov	r0, r4
   163ec:	mov	r1, r7
   163f0:	bl	10f24 <memcpy@plt>
   163f4:	mov	r5, #0
   163f8:	mov	r0, r5
   163fc:	pop	{r4, r5, r6, r7, fp, pc}
   16400:	mov	r5, #22
   16404:	cmp	r6, #0
   16408:	beq	16444 <__assert_fail@plt+0x52f8>
   1640c:	mov	r0, #0
   16410:	strb	r0, [r4]
   16414:	mov	r0, r5
   16418:	pop	{r4, r5, r6, r7, fp, pc}
   1641c:	mov	r5, #34	; 0x22
   16420:	cmp	r6, #0
   16424:	beq	16444 <__assert_fail@plt+0x52f8>
   16428:	sub	r6, r6, #1
   1642c:	mov	r0, r4
   16430:	mov	r1, r7
   16434:	mov	r2, r6
   16438:	bl	10f24 <memcpy@plt>
   1643c:	mov	r0, #0
   16440:	strb	r0, [r4, r6]
   16444:	mov	r0, r5
   16448:	pop	{r4, r5, r6, r7, fp, pc}
   1644c:	mov	r1, #0
   16450:	b	110d4 <setlocale@plt>
   16454:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16458:	mov	r7, r0
   1645c:	ldr	r6, [pc, #72]	; 164ac <__assert_fail@plt+0x5360>
   16460:	ldr	r5, [pc, #72]	; 164b0 <__assert_fail@plt+0x5364>
   16464:	add	r6, pc, r6
   16468:	add	r5, pc, r5
   1646c:	sub	r6, r6, r5
   16470:	mov	r8, r1
   16474:	mov	r9, r2
   16478:	bl	10e98 <calloc@plt-0x20>
   1647c:	asrs	r6, r6, #2
   16480:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16484:	mov	r4, #0
   16488:	add	r4, r4, #1
   1648c:	ldr	r3, [r5], #4
   16490:	mov	r2, r9
   16494:	mov	r1, r8
   16498:	mov	r0, r7
   1649c:	blx	r3
   164a0:	cmp	r6, r4
   164a4:	bne	16488 <__assert_fail@plt+0x533c>
   164a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164ac:	andeq	r1, r1, r0, lsr #21
   164b0:	muleq	r1, r8, sl
   164b4:	bx	lr
   164b8:	ldr	r3, [pc, #12]	; 164cc <__assert_fail@plt+0x5380>
   164bc:	mov	r1, #0
   164c0:	add	r3, pc, r3
   164c4:	ldr	r2, [r3]
   164c8:	b	11050 <__cxa_atexit@plt>
   164cc:	andeq	r1, r1, ip, lsr #24

Disassembly of section .fini:

000164d0 <.fini>:
   164d0:	push	{r3, lr}
   164d4:	pop	{r3, pc}
