
../repos/coreutils/src/mknod:     file format elf32-littlearm


Disassembly of section .init:

000117c4 <.init>:
   117c4:	push	{r3, lr}
   117c8:	bl	11c7c <__assert_fail@plt+0x48>
   117cc:	pop	{r3, pc}

Disassembly of section .plt:

000117d0 <fstatfs64@plt-0x14>:
   117d0:	push	{lr}		; (str lr, [sp, #-4]!)
   117d4:	ldr	lr, [pc, #4]	; 117e0 <fstatfs64@plt-0x4>
   117d8:	add	lr, pc, lr
   117dc:	ldr	pc, [lr, #8]!
   117e0:	andeq	sl, r1, r0, lsr #16

000117e4 <fstatfs64@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2080]!	; 0x820

000117f0 <selabel_lookup@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2072]!	; 0x818

000117fc <calloc@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2064]!	; 0x810

00011808 <fputs_unlocked@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2056]!	; 0x808

00011814 <raise@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2048]!	; 0x800

00011820 <is_selinux_enabled@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2040]!	; 0x7f8

0001182c <strcmp@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2032]!	; 0x7f0

00011838 <gnu_dev_makedev@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #106496	; 0x1a000
   11840:	ldr	pc, [ip, #2024]!	; 0x7e8

00011844 <context_type_get@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #106496	; 0x1a000
   1184c:	ldr	pc, [ip, #2016]!	; 0x7e0

00011850 <fflush@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #106496	; 0x1a000
   11858:	ldr	pc, [ip, #2008]!	; 0x7d8

0001185c <lsetfilecon@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #106496	; 0x1a000
   11864:	ldr	pc, [ip, #2000]!	; 0x7d0

00011868 <memmove@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #106496	; 0x1a000
   11870:	ldr	pc, [ip, #1992]!	; 0x7c8

00011874 <free@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #106496	; 0x1a000
   1187c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011880 <faccessat@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #106496	; 0x1a000
   11888:	ldr	pc, [ip, #1976]!	; 0x7b8

0001188c <_exit@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #106496	; 0x1a000
   11894:	ldr	pc, [ip, #1968]!	; 0x7b0

00011898 <memcpy@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #106496	; 0x1a000
   118a0:	ldr	pc, [ip, #1960]!	; 0x7a8

000118a4 <mbsinit@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #106496	; 0x1a000
   118ac:	ldr	pc, [ip, #1952]!	; 0x7a0

000118b0 <context_new@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #106496	; 0x1a000
   118b8:	ldr	pc, [ip, #1944]!	; 0x798

000118bc <memcmp@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #106496	; 0x1a000
   118c4:	ldr	pc, [ip, #1936]!	; 0x790

000118c8 <dcgettext@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #106496	; 0x1a000
   118d0:	ldr	pc, [ip, #1928]!	; 0x788

000118d4 <context_type_set@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #106496	; 0x1a000
   118dc:	ldr	pc, [ip, #1920]!	; 0x780

000118e0 <realloc@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #106496	; 0x1a000
   118e8:	ldr	pc, [ip, #1912]!	; 0x778

000118ec <fgetfilecon@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #106496	; 0x1a000
   118f4:	ldr	pc, [ip, #1904]!	; 0x770

000118f8 <textdomain@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #106496	; 0x1a000
   11900:	ldr	pc, [ip, #1896]!	; 0x768

00011904 <rawmemchr@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #106496	; 0x1a000
   1190c:	ldr	pc, [ip, #1888]!	; 0x760

00011910 <__fxstatat64@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #106496	; 0x1a000
   11918:	ldr	pc, [ip, #1880]!	; 0x758

0001191c <iswprint@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #106496	; 0x1a000
   11924:	ldr	pc, [ip, #1872]!	; 0x750

00011928 <__fxstat64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #106496	; 0x1a000
   11930:	ldr	pc, [ip, #1864]!	; 0x748

00011934 <readlink@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #106496	; 0x1a000
   1193c:	ldr	pc, [ip, #1856]!	; 0x740

00011940 <fwrite@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #106496	; 0x1a000
   11948:	ldr	pc, [ip, #1848]!	; 0x738

0001194c <lseek64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #106496	; 0x1a000
   11954:	ldr	pc, [ip, #1840]!	; 0x730

00011958 <__ctype_get_mb_cur_max@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #106496	; 0x1a000
   11960:	ldr	pc, [ip, #1832]!	; 0x728

00011964 <getcon@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #106496	; 0x1a000
   1196c:	ldr	pc, [ip, #1824]!	; 0x720

00011970 <__fpending@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #106496	; 0x1a000
   11978:	ldr	pc, [ip, #1816]!	; 0x718

0001197c <ferror_unlocked@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #106496	; 0x1a000
   11984:	ldr	pc, [ip, #1808]!	; 0x710

00011988 <mbrtowc@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #106496	; 0x1a000
   11990:	ldr	pc, [ip, #1800]!	; 0x708

00011994 <error@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #106496	; 0x1a000
   1199c:	ldr	pc, [ip, #1792]!	; 0x700

000119a0 <open64@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #106496	; 0x1a000
   119a8:	ldr	pc, [ip, #1784]!	; 0x6f8

000119ac <lgetfilecon@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #106496	; 0x1a000
   119b4:	ldr	pc, [ip, #1776]!	; 0x6f0

000119b8 <malloc@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #106496	; 0x1a000
   119c0:	ldr	pc, [ip, #1768]!	; 0x6e8

000119c4 <__libc_start_main@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #106496	; 0x1a000
   119cc:	ldr	pc, [ip, #1760]!	; 0x6e0

000119d0 <__freading@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #106496	; 0x1a000
   119d8:	ldr	pc, [ip, #1752]!	; 0x6d8

000119dc <__gmon_start__@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #106496	; 0x1a000
   119e4:	ldr	pc, [ip, #1744]!	; 0x6d0

000119e8 <context_free@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #106496	; 0x1a000
   119f0:	ldr	pc, [ip, #1736]!	; 0x6c8

000119f4 <getopt_long@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #106496	; 0x1a000
   119fc:	ldr	pc, [ip, #1728]!	; 0x6c0

00011a00 <__ctype_b_loc@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #106496	; 0x1a000
   11a08:	ldr	pc, [ip, #1720]!	; 0x6b8

00011a0c <getcwd@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #106496	; 0x1a000
   11a14:	ldr	pc, [ip, #1712]!	; 0x6b0

00011a18 <exit@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #106496	; 0x1a000
   11a20:	ldr	pc, [ip, #1704]!	; 0x6a8

00011a24 <getfilecon@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #106496	; 0x1a000
   11a2c:	ldr	pc, [ip, #1696]!	; 0x6a0

00011a30 <strlen@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #106496	; 0x1a000
   11a38:	ldr	pc, [ip, #1688]!	; 0x698

00011a3c <selabel_open@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #106496	; 0x1a000
   11a44:	ldr	pc, [ip, #1680]!	; 0x690

00011a48 <strchr@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #106496	; 0x1a000
   11a50:	ldr	pc, [ip, #1672]!	; 0x688

00011a54 <openat64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #106496	; 0x1a000
   11a5c:	ldr	pc, [ip, #1664]!	; 0x680

00011a60 <setfscreatecon@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #106496	; 0x1a000
   11a68:	ldr	pc, [ip, #1656]!	; 0x678

00011a6c <__errno_location@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #106496	; 0x1a000
   11a74:	ldr	pc, [ip, #1648]!	; 0x670

00011a78 <__sprintf_chk@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #106496	; 0x1a000
   11a80:	ldr	pc, [ip, #1640]!	; 0x668

00011a84 <__cxa_atexit@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #106496	; 0x1a000
   11a8c:	ldr	pc, [ip, #1632]!	; 0x660

00011a90 <memset@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #106496	; 0x1a000
   11a98:	ldr	pc, [ip, #1624]!	; 0x658

00011a9c <__printf_chk@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #106496	; 0x1a000
   11aa4:	ldr	pc, [ip, #1616]!	; 0x650

00011aa8 <fileno@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #106496	; 0x1a000
   11ab0:	ldr	pc, [ip, #1608]!	; 0x648

00011ab4 <strtoumax@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #106496	; 0x1a000
   11abc:	ldr	pc, [ip, #1600]!	; 0x640

00011ac0 <__fprintf_chk@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #106496	; 0x1a000
   11ac8:	ldr	pc, [ip, #1592]!	; 0x638

00011acc <fclose@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #106496	; 0x1a000
   11ad4:	ldr	pc, [ip, #1584]!	; 0x630

00011ad8 <fseeko64@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #106496	; 0x1a000
   11ae0:	ldr	pc, [ip, #1576]!	; 0x628

00011ae4 <fcntl64@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #106496	; 0x1a000
   11aec:	ldr	pc, [ip, #1568]!	; 0x620

00011af0 <setlocale@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #106496	; 0x1a000
   11af8:	ldr	pc, [ip, #1560]!	; 0x618

00011afc <fsetfilecon@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #106496	; 0x1a000
   11b04:	ldr	pc, [ip, #1552]!	; 0x610

00011b08 <strrchr@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #106496	; 0x1a000
   11b10:	ldr	pc, [ip, #1544]!	; 0x608

00011b14 <nl_langinfo@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #106496	; 0x1a000
   11b1c:	ldr	pc, [ip, #1536]!	; 0x600

00011b20 <readdir64@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #106496	; 0x1a000
   11b28:	ldr	pc, [ip, #1528]!	; 0x5f8

00011b2c <fdopendir@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #106496	; 0x1a000
   11b34:	ldr	pc, [ip, #1520]!	; 0x5f0

00011b38 <security_compute_create@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #106496	; 0x1a000
   11b40:	ldr	pc, [ip, #1512]!	; 0x5e8

00011b44 <dirfd@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #106496	; 0x1a000
   11b4c:	ldr	pc, [ip, #1504]!	; 0x5e0

00011b50 <fchdir@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #106496	; 0x1a000
   11b58:	ldr	pc, [ip, #1496]!	; 0x5d8

00011b5c <qsort@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #106496	; 0x1a000
   11b64:	ldr	pc, [ip, #1488]!	; 0x5d0

00011b68 <freecon@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #106496	; 0x1a000
   11b70:	ldr	pc, [ip, #1480]!	; 0x5c8

00011b74 <bindtextdomain@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #106496	; 0x1a000
   11b7c:	ldr	pc, [ip, #1472]!	; 0x5c0

00011b80 <getfscreatecon@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #106496	; 0x1a000
   11b88:	ldr	pc, [ip, #1464]!	; 0x5b8

00011b8c <umask@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #106496	; 0x1a000
   11b94:	ldr	pc, [ip, #1456]!	; 0x5b0

00011b98 <context_str@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #106496	; 0x1a000
   11ba0:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ba4 <chmod@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #106496	; 0x1a000
   11bac:	ldr	pc, [ip, #1440]!	; 0x5a0

00011bb0 <__xstat64@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #106496	; 0x1a000
   11bb8:	ldr	pc, [ip, #1432]!	; 0x598

00011bbc <__xmknod@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #106496	; 0x1a000
   11bc4:	ldr	pc, [ip, #1424]!	; 0x590

00011bc8 <strncmp@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #106496	; 0x1a000
   11bd0:	ldr	pc, [ip, #1416]!	; 0x588

00011bd4 <abort@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #106496	; 0x1a000
   11bdc:	ldr	pc, [ip, #1408]!	; 0x580

00011be0 <close@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #106496	; 0x1a000
   11be8:	ldr	pc, [ip, #1400]!	; 0x578

00011bec <__lxstat64@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #106496	; 0x1a000
   11bf4:	ldr	pc, [ip, #1392]!	; 0x570

00011bf8 <mkfifo@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #106496	; 0x1a000
   11c00:	ldr	pc, [ip, #1384]!	; 0x568

00011c04 <mode_to_security_class@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #106496	; 0x1a000
   11c0c:	ldr	pc, [ip, #1376]!	; 0x560

00011c10 <closedir@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #106496	; 0x1a000
   11c18:	ldr	pc, [ip, #1368]!	; 0x558

00011c1c <strspn@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #106496	; 0x1a000
   11c24:	ldr	pc, [ip, #1360]!	; 0x550

00011c28 <__mempcpy_chk@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #106496	; 0x1a000
   11c30:	ldr	pc, [ip, #1352]!	; 0x548

00011c34 <__assert_fail@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #106496	; 0x1a000
   11c3c:	ldr	pc, [ip, #1344]!	; 0x540

Disassembly of section .text:

00011c40 <lchmod@@Base-0x4d0c>:
   11c40:	mov	fp, #0
   11c44:	mov	lr, #0
   11c48:	pop	{r1}		; (ldr r1, [sp], #4)
   11c4c:	mov	r2, sp
   11c50:	push	{r2}		; (str r2, [sp, #-4]!)
   11c54:	push	{r0}		; (str r0, [sp, #-4]!)
   11c58:	ldr	ip, [pc, #16]	; 11c70 <__assert_fail@plt+0x3c>
   11c5c:	push	{ip}		; (str ip, [sp, #-4]!)
   11c60:	ldr	r0, [pc, #12]	; 11c74 <__assert_fail@plt+0x40>
   11c64:	ldr	r3, [pc, #12]	; 11c78 <__assert_fail@plt+0x44>
   11c68:	bl	119c4 <__libc_start_main@plt>
   11c6c:	bl	11bd4 <abort@plt>
   11c70:			; <UNDEFINED> instruction: 0x0001adb8
   11c74:	andeq	r2, r1, ip, rrx
   11c78:	andeq	sl, r1, r8, asr sp
   11c7c:	ldr	r3, [pc, #20]	; 11c98 <__assert_fail@plt+0x64>
   11c80:	ldr	r2, [pc, #20]	; 11c9c <__assert_fail@plt+0x68>
   11c84:	add	r3, pc, r3
   11c88:	ldr	r2, [r3, r2]
   11c8c:	cmp	r2, #0
   11c90:	bxeq	lr
   11c94:	b	119dc <__gmon_start__@plt>
   11c98:	andeq	sl, r1, r4, ror r3
   11c9c:	andeq	r0, r0, r0, lsl #3
   11ca0:	ldr	r0, [pc, #24]	; 11cc0 <__assert_fail@plt+0x8c>
   11ca4:	ldr	r3, [pc, #24]	; 11cc4 <__assert_fail@plt+0x90>
   11ca8:	cmp	r3, r0
   11cac:	bxeq	lr
   11cb0:	ldr	r3, [pc, #16]	; 11cc8 <__assert_fail@plt+0x94>
   11cb4:	cmp	r3, #0
   11cb8:	bxeq	lr
   11cbc:	bx	r3
   11cc0:	ldrdeq	ip, [r2], -r8
   11cc4:	ldrdeq	ip, [r2], -r8
   11cc8:	andeq	r0, r0, r0
   11ccc:	ldr	r0, [pc, #36]	; 11cf8 <__assert_fail@plt+0xc4>
   11cd0:	ldr	r1, [pc, #36]	; 11cfc <__assert_fail@plt+0xc8>
   11cd4:	sub	r1, r1, r0
   11cd8:	asr	r1, r1, #2
   11cdc:	add	r1, r1, r1, lsr #31
   11ce0:	asrs	r1, r1, #1
   11ce4:	bxeq	lr
   11ce8:	ldr	r3, [pc, #16]	; 11d00 <__assert_fail@plt+0xcc>
   11cec:	cmp	r3, #0
   11cf0:	bxeq	lr
   11cf4:	bx	r3
   11cf8:	ldrdeq	ip, [r2], -r8
   11cfc:	ldrdeq	ip, [r2], -r8
   11d00:	andeq	r0, r0, r0
   11d04:	push	{r4, lr}
   11d08:	ldr	r4, [pc, #24]	; 11d28 <__assert_fail@plt+0xf4>
   11d0c:	ldrb	r3, [r4]
   11d10:	cmp	r3, #0
   11d14:	popne	{r4, pc}
   11d18:	bl	11ca0 <__assert_fail@plt+0x6c>
   11d1c:	mov	r3, #1
   11d20:	strb	r3, [r4]
   11d24:	pop	{r4, pc}
   11d28:	strdeq	ip, [r2], -r4
   11d2c:	b	11ccc <__assert_fail@plt+0x98>
   11d30:	push	{fp, lr}
   11d34:	mov	fp, sp
   11d38:	mov	r4, r0
   11d3c:	cmp	r0, #0
   11d40:	bne	11e74 <__assert_fail@plt+0x240>
   11d44:	movw	r1, #44683	; 0xae8b
   11d48:	movt	r1, #1
   11d4c:	mov	r0, #0
   11d50:	mov	r2, #5
   11d54:	bl	118c8 <dcgettext@plt>
   11d58:	mov	r1, r0
   11d5c:	movw	r0, #49664	; 0xc200
   11d60:	movt	r0, #2
   11d64:	ldr	r2, [r0]
   11d68:	mov	r0, #1
   11d6c:	bl	11a9c <__printf_chk@plt>
   11d70:	movw	r1, #44730	; 0xaeba
   11d74:	movt	r1, #1
   11d78:	mov	r0, #0
   11d7c:	mov	r2, #5
   11d80:	bl	118c8 <dcgettext@plt>
   11d84:	movw	r5, #49644	; 0xc1ec
   11d88:	movt	r5, #2
   11d8c:	ldr	r1, [r5]
   11d90:	bl	11808 <fputs_unlocked@plt>
   11d94:	bl	11eb8 <__assert_fail@plt+0x284>
   11d98:	movw	r1, #44779	; 0xaeeb
   11d9c:	movt	r1, #1
   11da0:	mov	r0, #0
   11da4:	mov	r2, #5
   11da8:	bl	118c8 <dcgettext@plt>
   11dac:	ldr	r1, [r5]
   11db0:	bl	11808 <fputs_unlocked@plt>
   11db4:	movw	r1, #44852	; 0xaf34
   11db8:	movt	r1, #1
   11dbc:	mov	r0, #0
   11dc0:	mov	r2, #5
   11dc4:	bl	118c8 <dcgettext@plt>
   11dc8:	ldr	r1, [r5]
   11dcc:	bl	11808 <fputs_unlocked@plt>
   11dd0:	movw	r1, #45059	; 0xb003
   11dd4:	movt	r1, #1
   11dd8:	mov	r0, #0
   11ddc:	mov	r2, #5
   11de0:	bl	118c8 <dcgettext@plt>
   11de4:	ldr	r1, [r5]
   11de8:	bl	11808 <fputs_unlocked@plt>
   11dec:	movw	r1, #45104	; 0xb030
   11df0:	movt	r1, #1
   11df4:	mov	r0, #0
   11df8:	mov	r2, #5
   11dfc:	bl	118c8 <dcgettext@plt>
   11e00:	ldr	r1, [r5]
   11e04:	bl	11808 <fputs_unlocked@plt>
   11e08:	movw	r1, #45158	; 0xb066
   11e0c:	movt	r1, #1
   11e10:	mov	r0, #0
   11e14:	mov	r2, #5
   11e18:	bl	118c8 <dcgettext@plt>
   11e1c:	ldr	r1, [r5]
   11e20:	bl	11808 <fputs_unlocked@plt>
   11e24:	movw	r1, #45419	; 0xb16b
   11e28:	movt	r1, #1
   11e2c:	mov	r0, #0
   11e30:	mov	r2, #5
   11e34:	bl	118c8 <dcgettext@plt>
   11e38:	ldr	r1, [r5]
   11e3c:	bl	11808 <fputs_unlocked@plt>
   11e40:	movw	r1, #45546	; 0xb1ea
   11e44:	movt	r1, #1
   11e48:	mov	r0, #0
   11e4c:	mov	r2, #5
   11e50:	bl	118c8 <dcgettext@plt>
   11e54:	mov	r1, r0
   11e58:	movw	r2, #45737	; 0xb2a9
   11e5c:	movt	r2, #1
   11e60:	mov	r0, #1
   11e64:	bl	11a9c <__printf_chk@plt>
   11e68:	bl	11ee8 <__assert_fail@plt+0x2b4>
   11e6c:	mov	r0, r4
   11e70:	bl	11a18 <exit@plt>
   11e74:	movw	r0, #49640	; 0xc1e8
   11e78:	movt	r0, #2
   11e7c:	ldr	r5, [r0]
   11e80:	movw	r1, #44644	; 0xae64
   11e84:	movt	r1, #1
   11e88:	mov	r0, #0
   11e8c:	mov	r2, #5
   11e90:	bl	118c8 <dcgettext@plt>
   11e94:	mov	r2, r0
   11e98:	movw	r0, #49664	; 0xc200
   11e9c:	movt	r0, #2
   11ea0:	ldr	r3, [r0]
   11ea4:	mov	r0, r5
   11ea8:	mov	r1, #1
   11eac:	bl	11ac0 <__fprintf_chk@plt>
   11eb0:	mov	r0, r4
   11eb4:	bl	11a18 <exit@plt>
   11eb8:	push	{fp, lr}
   11ebc:	mov	fp, sp
   11ec0:	movw	r1, #46306	; 0xb4e2
   11ec4:	movt	r1, #1
   11ec8:	mov	r0, #0
   11ecc:	mov	r2, #5
   11ed0:	bl	118c8 <dcgettext@plt>
   11ed4:	movw	r1, #49644	; 0xc1ec
   11ed8:	movt	r1, #2
   11edc:	ldr	r1, [r1]
   11ee0:	pop	{fp, lr}
   11ee4:	b	11808 <fputs_unlocked@plt>
   11ee8:	push	{r4, r5, fp, lr}
   11eec:	add	fp, sp, #8
   11ef0:	sub	sp, sp, #56	; 0x38
   11ef4:	movw	r0, #46792	; 0xb6c8
   11ef8:	movt	r0, #1
   11efc:	add	r1, r0, #32
   11f00:	mov	r5, sp
   11f04:	mov	r2, #48	; 0x30
   11f08:	vld1.64	{d16-d17}, [r1]
   11f0c:	add	r1, r5, #32
   11f10:	add	r3, r0, #16
   11f14:	vld1.64	{d18-d19}, [r0], r2
   11f18:	vld1.64	{d20-d21}, [r3]
   11f1c:	vldr	d22, [r0]
   11f20:	vst1.64	{d16-d17}, [r1]
   11f24:	add	r0, r5, #16
   11f28:	vst1.64	{d20-d21}, [r0]
   11f2c:	mov	r0, r5
   11f30:	vst1.64	{d18-d19}, [r0], r2
   11f34:	vstr	d22, [r0]
   11f38:	ldr	r1, [sp]
   11f3c:	cmp	r1, #0
   11f40:	beq	11f68 <__assert_fail@plt+0x334>
   11f44:	mov	r5, sp
   11f48:	movw	r4, #45737	; 0xb2a9
   11f4c:	movt	r4, #1
   11f50:	mov	r0, r4
   11f54:	bl	1182c <strcmp@plt>
   11f58:	cmp	r0, #0
   11f5c:	ldrne	r1, [r5, #8]!
   11f60:	cmpne	r1, #0
   11f64:	bne	11f50 <__assert_fail@plt+0x31c>
   11f68:	ldr	r4, [r5, #4]
   11f6c:	movw	r1, #46476	; 0xb58c
   11f70:	movt	r1, #1
   11f74:	mov	r0, #0
   11f78:	mov	r2, #5
   11f7c:	bl	118c8 <dcgettext@plt>
   11f80:	mov	r1, r0
   11f84:	movw	r2, #45872	; 0xb330
   11f88:	movt	r2, #1
   11f8c:	movw	r3, #46499	; 0xb5a3
   11f90:	movt	r3, #1
   11f94:	mov	r0, #1
   11f98:	bl	11a9c <__printf_chk@plt>
   11f9c:	movw	r5, #45737	; 0xb2a9
   11fa0:	movt	r5, #1
   11fa4:	cmp	r4, #0
   11fa8:	moveq	r4, r5
   11fac:	mov	r0, #5
   11fb0:	mov	r1, #0
   11fb4:	bl	11af0 <setlocale@plt>
   11fb8:	cmp	r0, #0
   11fbc:	beq	11ffc <__assert_fail@plt+0x3c8>
   11fc0:	movw	r1, #46539	; 0xb5cb
   11fc4:	movt	r1, #1
   11fc8:	mov	r2, #3
   11fcc:	bl	11bc8 <strncmp@plt>
   11fd0:	cmp	r0, #0
   11fd4:	beq	11ffc <__assert_fail@plt+0x3c8>
   11fd8:	movw	r1, #46543	; 0xb5cf
   11fdc:	movt	r1, #1
   11fe0:	mov	r0, #0
   11fe4:	mov	r2, #5
   11fe8:	bl	118c8 <dcgettext@plt>
   11fec:	movw	r1, #49644	; 0xc1ec
   11ff0:	movt	r1, #2
   11ff4:	ldr	r1, [r1]
   11ff8:	bl	11808 <fputs_unlocked@plt>
   11ffc:	movw	r1, #46614	; 0xb616
   12000:	movt	r1, #1
   12004:	mov	r0, #0
   12008:	mov	r2, #5
   1200c:	bl	118c8 <dcgettext@plt>
   12010:	mov	r1, r0
   12014:	movw	r2, #46499	; 0xb5a3
   12018:	movt	r2, #1
   1201c:	mov	r0, #1
   12020:	mov	r3, r5
   12024:	bl	11a9c <__printf_chk@plt>
   12028:	movw	r1, #46641	; 0xb631
   1202c:	movt	r1, #1
   12030:	mov	r0, #0
   12034:	mov	r2, #5
   12038:	bl	118c8 <dcgettext@plt>
   1203c:	mov	r1, r0
   12040:	movw	r0, #46409	; 0xb549
   12044:	movt	r0, #1
   12048:	movw	r3, #46691	; 0xb663
   1204c:	movt	r3, #1
   12050:	cmp	r4, r5
   12054:	moveq	r3, r0
   12058:	mov	r0, #1
   1205c:	mov	r2, r4
   12060:	bl	11a9c <__printf_chk@plt>
   12064:	sub	sp, fp, #8
   12068:	pop	{r4, r5, fp, pc}
   1206c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12070:	add	fp, sp, #28
   12074:	sub	sp, sp, #44	; 0x2c
   12078:	mov	r8, r1
   1207c:	mov	r6, r0
   12080:	ldr	r0, [r1]
   12084:	bl	170cc <lchmod@@Base+0x780>
   12088:	movw	r1, #46691	; 0xb663
   1208c:	movt	r1, #1
   12090:	mov	r0, #6
   12094:	bl	11af0 <setlocale@plt>
   12098:	movw	r5, #45876	; 0xb334
   1209c:	movt	r5, #1
   120a0:	movw	r1, #45743	; 0xb2af
   120a4:	movt	r1, #1
   120a8:	mov	r0, r5
   120ac:	bl	11b74 <bindtextdomain@plt>
   120b0:	mov	r0, r5
   120b4:	bl	118f8 <textdomain@plt>
   120b8:	movw	r0, #13648	; 0x3550
   120bc:	movt	r0, #1
   120c0:	bl	1adbc <lchmod@@Base+0x4470>
   120c4:	mov	r5, #0
   120c8:	movw	r7, #45767	; 0xb2c7
   120cc:	movt	r7, #1
   120d0:	movw	r9, #46712	; 0xb678
   120d4:	movt	r9, #1
   120d8:	movw	sl, #49648	; 0xc1f0
   120dc:	movt	sl, #2
   120e0:	mov	r0, #0
   120e4:	str	r0, [sp, #16]
   120e8:	mov	r1, #0
   120ec:	mov	r4, #0
   120f0:	b	12134 <__assert_fail@plt+0x500>
   120f4:	bl	11a6c <__errno_location@plt>
   120f8:	str	r4, [sp, #12]
   120fc:	ldr	r4, [r0]
   12100:	mov	r0, #0
   12104:	str	r0, [sp, #16]
   12108:	mov	r0, #0
   1210c:	movw	r1, #45771	; 0xb2cb
   12110:	movt	r1, #1
   12114:	mov	r2, #5
   12118:	bl	118c8 <dcgettext@plt>
   1211c:	mov	r2, r0
   12120:	mov	r0, #0
   12124:	mov	r1, r4
   12128:	ldr	r4, [sp, #12]
   1212c:	bl	11994 <error@plt>
   12130:	ldr	r1, [sp, #20]
   12134:	str	r1, [sp, #20]
   12138:	b	12140 <__assert_fail@plt+0x50c>
   1213c:	ldr	r4, [sl]
   12140:	str	r5, [sp]
   12144:	mov	r0, r6
   12148:	mov	r1, r8
   1214c:	mov	r2, r7
   12150:	mov	r3, r9
   12154:	bl	119f4 <getopt_long@plt>
   12158:	cmp	r0, #89	; 0x59
   1215c:	ble	121e4 <__assert_fail@plt+0x5b0>
   12160:	cmp	r0, #90	; 0x5a
   12164:	bne	121a8 <__assert_fail@plt+0x574>
   12168:	bl	11820 <is_selinux_enabled@plt>
   1216c:	ldr	r1, [sl]
   12170:	cmp	r0, #1
   12174:	bge	121b4 <__assert_fail@plt+0x580>
   12178:	cmp	r1, #0
   1217c:	beq	12140 <__assert_fail@plt+0x50c>
   12180:	mov	r0, #0
   12184:	movw	r1, #45799	; 0xb2e7
   12188:	movt	r1, #1
   1218c:	mov	r2, #5
   12190:	bl	118c8 <dcgettext@plt>
   12194:	mov	r2, r0
   12198:	mov	r0, #0
   1219c:	mov	r1, #0
   121a0:	bl	11994 <error@plt>
   121a4:	b	12140 <__assert_fail@plt+0x50c>
   121a8:	cmp	r0, #109	; 0x6d
   121ac:	beq	1213c <__assert_fail@plt+0x508>
   121b0:	b	12760 <__assert_fail@plt+0xb2c>
   121b4:	cmp	r1, #0
   121b8:	bne	12134 <__assert_fail@plt+0x500>
   121bc:	mov	r0, #0
   121c0:	mov	r1, #0
   121c4:	mov	r2, #0
   121c8:	bl	11a3c <selabel_open@plt>
   121cc:	str	r0, [sp, #16]
   121d0:	cmp	r0, #0
   121d4:	ldr	r0, [sp, #20]
   121d8:	mov	r1, r0
   121dc:	bne	12134 <__assert_fail@plt+0x500>
   121e0:	b	120f4 <__assert_fail@plt+0x4c0>
   121e4:	cmn	r0, #1
   121e8:	bne	12518 <__assert_fail@plt+0x8e4>
   121ec:	cmp	r4, #0
   121f0:	beq	12254 <__assert_fail@plt+0x620>
   121f4:	mov	r0, r4
   121f8:	bl	16a68 <lchmod@@Base+0x11c>
   121fc:	cmp	r0, #0
   12200:	beq	12684 <__assert_fail@plt+0xa50>
   12204:	mov	r5, r0
   12208:	mov	r9, #0
   1220c:	mov	r0, #0
   12210:	bl	11b8c <umask@plt>
   12214:	mov	r7, r0
   12218:	bl	11b8c <umask@plt>
   1221c:	str	r9, [sp]
   12220:	movw	r0, #438	; 0x1b6
   12224:	mov	r1, #0
   12228:	mov	r2, r7
   1222c:	mov	r3, r5
   12230:	bl	16f24 <lchmod@@Base+0x5d8>
   12234:	mov	r7, r0
   12238:	mov	r0, r5
   1223c:	bl	137c0 <__assert_fail@plt+0x1b8c>
   12240:	cmp	r7, #512	; 0x200
   12244:	bcc	12258 <__assert_fail@plt+0x624>
   12248:	movw	r1, #45915	; 0xb35b
   1224c:	movt	r1, #1
   12250:	b	1268c <__assert_fail@plt+0xa58>
   12254:	movw	r7, #438	; 0x1b6
   12258:	movw	r0, #49632	; 0xc1e0
   1225c:	movt	r0, #2
   12260:	ldr	r0, [r0]
   12264:	cmp	r0, r6
   12268:	bge	12290 <__assert_fail@plt+0x65c>
   1226c:	add	r1, r0, #1
   12270:	mov	r5, #4
   12274:	mov	r9, #0
   12278:	cmp	r1, r6
   1227c:	bge	12298 <__assert_fail@plt+0x664>
   12280:	ldr	r1, [r8, r1, lsl #2]
   12284:	ldrb	r1, [r1]
   12288:	cmp	r1, #112	; 0x70
   1228c:	bne	12298 <__assert_fail@plt+0x664>
   12290:	mov	r5, #2
   12294:	mov	r9, #1
   12298:	sub	r1, r6, r0
   1229c:	cmp	r1, r5
   122a0:	bcc	125bc <__assert_fail@plt+0x988>
   122a4:	cmp	r5, r1
   122a8:	bcc	12608 <__assert_fail@plt+0x9d4>
   122ac:	str	r7, [sp, #12]
   122b0:	ldr	r6, [sp, #20]
   122b4:	cmp	r6, #0
   122b8:	beq	122cc <__assert_fail@plt+0x698>
   122bc:	mov	r0, r6
   122c0:	bl	11a60 <setfscreatecon@plt>
   122c4:	cmn	r0, #1
   122c8:	ble	126a8 <__assert_fail@plt+0xa74>
   122cc:	movw	r6, #49632	; 0xc1e0
   122d0:	movt	r6, #2
   122d4:	ldr	r7, [r6]
   122d8:	add	r1, r8, r7, lsl #2
   122dc:	ldr	r2, [r1, #4]
   122e0:	ldrb	r2, [r2]
   122e4:	sub	r2, r2, #98	; 0x62
   122e8:	cmp	r2, #19
   122ec:	bhi	12578 <__assert_fail@plt+0x944>
   122f0:	mov	sl, #24576	; 0x6000
   122f4:	add	r3, pc, #0
   122f8:	ldr	pc, [r3, r2, lsl #2]
   122fc:	andeq	r2, r1, r0, asr r3
   12300:	andeq	r2, r1, ip, asr #6
   12304:	andeq	r2, r1, r8, ror r5
   12308:	andeq	r2, r1, r8, ror r5
   1230c:	andeq	r2, r1, r8, ror r5
   12310:	andeq	r2, r1, r8, ror r5
   12314:	andeq	r2, r1, r8, ror r5
   12318:	andeq	r2, r1, r8, ror r5
   1231c:	andeq	r2, r1, r8, ror r5
   12320:	andeq	r2, r1, r8, ror r5
   12324:	andeq	r2, r1, r8, ror r5
   12328:	andeq	r2, r1, r8, ror r5
   1232c:	andeq	r2, r1, r8, ror r5
   12330:	andeq	r2, r1, r8, ror r5
   12334:	andeq	r2, r1, ip, lsl r4
   12338:	andeq	r2, r1, r8, ror r5
   1233c:	andeq	r2, r1, r8, ror r5
   12340:	andeq	r2, r1, r8, ror r5
   12344:	andeq	r2, r1, r8, ror r5
   12348:	andeq	r2, r1, ip, asr #6
   1234c:	mov	sl, #8192	; 0x2000
   12350:	ldr	r6, [r1, #8]
   12354:	ldr	r5, [r1, #12]
   12358:	movw	r7, #46691	; 0xb663
   1235c:	movt	r7, #1
   12360:	str	r7, [sp]
   12364:	add	r3, sp, #32
   12368:	mov	r0, r6
   1236c:	mov	r1, #0
   12370:	mov	r2, #0
   12374:	bl	198e8 <lchmod@@Base+0x2f9c>
   12378:	cmp	r0, #0
   1237c:	ldreq	r0, [sp, #36]	; 0x24
   12380:	cmpeq	r0, #0
   12384:	beq	123bc <__assert_fail@plt+0x788>
   12388:	movw	r1, #46171	; 0xb45b
   1238c:	movt	r1, #1
   12390:	mov	r0, #0
   12394:	mov	r2, #5
   12398:	bl	118c8 <dcgettext@plt>
   1239c:	mov	r5, r0
   123a0:	mov	r0, r6
   123a4:	bl	18904 <lchmod@@Base+0x1fb8>
   123a8:	mov	r3, r0
   123ac:	mov	r0, #1
   123b0:	mov	r1, #0
   123b4:	mov	r2, r5
   123b8:	bl	11994 <error@plt>
   123bc:	str	r6, [sp, #20]
   123c0:	str	r7, [sp]
   123c4:	add	r3, sp, #24
   123c8:	mov	r0, r5
   123cc:	mov	r1, #0
   123d0:	mov	r2, #0
   123d4:	bl	198e8 <lchmod@@Base+0x2f9c>
   123d8:	cmp	r0, #0
   123dc:	ldreq	r0, [sp, #28]
   123e0:	cmpeq	r0, #0
   123e4:	beq	1247c <__assert_fail@plt+0x848>
   123e8:	movw	r1, #46202	; 0xb47a
   123ec:	movt	r1, #1
   123f0:	mov	r0, #0
   123f4:	mov	r2, #5
   123f8:	bl	118c8 <dcgettext@plt>
   123fc:	mov	r4, r0
   12400:	mov	r0, r5
   12404:	bl	18904 <lchmod@@Base+0x1fb8>
   12408:	mov	r3, r0
   1240c:	mov	r0, #1
   12410:	mov	r1, #0
   12414:	mov	r2, r4
   12418:	bl	11994 <error@plt>
   1241c:	ldr	r0, [sp, #16]
   12420:	cmp	r0, #0
   12424:	beq	12434 <__assert_fail@plt+0x800>
   12428:	ldr	r1, [r8, r7, lsl #2]
   1242c:	mov	r2, #4096	; 0x1000
   12430:	bl	127dc <__assert_fail@plt+0xba8>
   12434:	ldr	r0, [r6]
   12438:	ldr	r0, [r8, r0, lsl #2]
   1243c:	ldr	r5, [sp, #12]
   12440:	mov	r1, r5
   12444:	bl	11bf8 <mkfifo@plt>
   12448:	cmp	r0, #0
   1244c:	bne	124e4 <__assert_fail@plt+0x8b0>
   12450:	cmp	r4, #0
   12454:	beq	12470 <__assert_fail@plt+0x83c>
   12458:	ldr	r0, [r6]
   1245c:	ldr	r0, [r8, r0, lsl #2]
   12460:	mov	r1, r5
   12464:	bl	1694c <lchmod@@Base>
   12468:	cmp	r0, #0
   1246c:	bne	12768 <__assert_fail@plt+0xb34>
   12470:	mov	r0, #0
   12474:	sub	sp, fp, #28
   12478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1247c:	ldr	r1, [sp, #24]
   12480:	ldr	r0, [sp, #32]
   12484:	bl	11838 <gnu_dev_makedev@plt>
   12488:	mov	r7, r0
   1248c:	and	r0, r0, r1
   12490:	cmn	r0, #1
   12494:	beq	127b0 <__assert_fail@plt+0xb7c>
   12498:	mov	r9, r1
   1249c:	ldr	r0, [sp, #16]
   124a0:	cmp	r0, #0
   124a4:	movw	r6, #49632	; 0xc1e0
   124a8:	movt	r6, #2
   124ac:	beq	124c0 <__assert_fail@plt+0x88c>
   124b0:	ldr	r1, [r6]
   124b4:	ldr	r1, [r8, r1, lsl #2]
   124b8:	mov	r2, sl
   124bc:	bl	127dc <__assert_fail@plt+0xba8>
   124c0:	ldr	r0, [r6]
   124c4:	ldr	r0, [r8, r0, lsl #2]
   124c8:	ldr	r5, [sp, #12]
   124cc:	orr	r1, sl, r5
   124d0:	mov	r2, r7
   124d4:	mov	r3, r9
   124d8:	bl	1ae2c <lchmod@@Base+0x44e0>
   124dc:	cmp	r0, #0
   124e0:	beq	12450 <__assert_fail@plt+0x81c>
   124e4:	bl	11a6c <__errno_location@plt>
   124e8:	ldr	r1, [r6]
   124ec:	ldr	r2, [r8, r1, lsl #2]
   124f0:	ldr	r4, [r0]
   124f4:	mov	r0, #0
   124f8:	mov	r1, #3
   124fc:	bl	187c4 <lchmod@@Base+0x1e78>
   12500:	mov	r3, r0
   12504:	movw	r2, #46879	; 0xb71f
   12508:	movt	r2, #1
   1250c:	mov	r0, #1
   12510:	mov	r1, r4
   12514:	bl	11994 <error@plt>
   12518:	cmn	r0, #3
   1251c:	bne	12568 <__assert_fail@plt+0x934>
   12520:	movw	r0, #49552	; 0xc190
   12524:	movt	r0, #2
   12528:	ldr	r3, [r0]
   1252c:	movw	r0, #49644	; 0xc1ec
   12530:	movt	r0, #2
   12534:	ldr	r0, [r0]
   12538:	mov	r1, #0
   1253c:	movw	r2, #45886	; 0xb33e
   12540:	movt	r2, #1
   12544:	str	r2, [sp]
   12548:	str	r1, [sp, #4]
   1254c:	movw	r1, #45737	; 0xb2a9
   12550:	movt	r1, #1
   12554:	movw	r2, #45872	; 0xb330
   12558:	movt	r2, #1
   1255c:	bl	19370 <lchmod@@Base+0x2a24>
   12560:	mov	r0, #0
   12564:	bl	11a18 <exit@plt>
   12568:	cmn	r0, #2
   1256c:	bne	12760 <__assert_fail@plt+0xb2c>
   12570:	mov	r0, #0
   12574:	bl	11d30 <__assert_fail@plt+0xfc>
   12578:	movw	r1, #46254	; 0xb4ae
   1257c:	movt	r1, #1
   12580:	mov	r0, #0
   12584:	mov	r2, #5
   12588:	bl	118c8 <dcgettext@plt>
   1258c:	mov	r5, r0
   12590:	ldr	r0, [r6]
   12594:	add	r0, r8, r0, lsl #2
   12598:	ldr	r0, [r0, #4]
   1259c:	bl	18904 <lchmod@@Base+0x1fb8>
   125a0:	mov	r3, r0
   125a4:	mov	r0, #0
   125a8:	mov	r1, #0
   125ac:	mov	r2, r5
   125b0:	bl	11994 <error@plt>
   125b4:	mov	r0, #1
   125b8:	bl	11d30 <__assert_fail@plt+0xfc>
   125bc:	cmp	r0, r6
   125c0:	bge	126e4 <__assert_fail@plt+0xab0>
   125c4:	movw	r1, #45975	; 0xb397
   125c8:	movt	r1, #1
   125cc:	mov	r0, #0
   125d0:	mov	r2, #5
   125d4:	bl	118c8 <dcgettext@plt>
   125d8:	mov	r5, r0
   125dc:	add	r0, r8, r6, lsl #2
   125e0:	ldr	r0, [r0, #-4]
   125e4:	bl	18904 <lchmod@@Base+0x1fb8>
   125e8:	mov	r3, r0
   125ec:	mov	r0, #0
   125f0:	mov	r1, #0
   125f4:	mov	r2, r5
   125f8:	bl	11994 <error@plt>
   125fc:	cmp	r9, #0
   12600:	beq	12710 <__assert_fail@plt+0xadc>
   12604:	b	12760 <__assert_fail@plt+0xb2c>
   12608:	movw	r1, #46054	; 0xb3e6
   1260c:	movt	r1, #1
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	bl	118c8 <dcgettext@plt>
   1261c:	mov	r4, r0
   12620:	movw	r0, #49632	; 0xc1e0
   12624:	movt	r0, #2
   12628:	ldr	r0, [r0]
   1262c:	add	r0, r0, r5
   12630:	ldr	r0, [r8, r0, lsl #2]
   12634:	bl	18904 <lchmod@@Base+0x1fb8>
   12638:	mov	r3, r0
   1263c:	mov	r0, #0
   12640:	mov	r1, #0
   12644:	mov	r2, r4
   12648:	bl	11994 <error@plt>
   1264c:	cmp	r9, #0
   12650:	beq	12760 <__assert_fail@plt+0xb2c>
   12654:	movw	r0, #49632	; 0xc1e0
   12658:	movt	r0, #2
   1265c:	ldr	r0, [r0]
   12660:	sub	r0, r6, r0
   12664:	cmp	r0, #4
   12668:	bne	12760 <__assert_fail@plt+0xb2c>
   1266c:	movw	r0, #49640	; 0xc1e8
   12670:	movt	r0, #2
   12674:	ldr	r4, [r0]
   12678:	movw	r1, #46071	; 0xb3f7
   1267c:	movt	r1, #1
   12680:	b	1273c <__assert_fail@plt+0xb08>
   12684:	movw	r1, #45902	; 0xb34e
   12688:	movt	r1, #1
   1268c:	mov	r0, #0
   12690:	mov	r2, #5
   12694:	bl	118c8 <dcgettext@plt>
   12698:	mov	r2, r0
   1269c:	mov	r0, #1
   126a0:	mov	r1, #0
   126a4:	bl	11994 <error@plt>
   126a8:	bl	11a6c <__errno_location@plt>
   126ac:	ldr	r4, [r0]
   126b0:	movw	r1, #46121	; 0xb429
   126b4:	movt	r1, #1
   126b8:	mov	r0, #0
   126bc:	mov	r2, #5
   126c0:	bl	118c8 <dcgettext@plt>
   126c4:	mov	r5, r0
   126c8:	mov	r0, r6
   126cc:	bl	18904 <lchmod@@Base+0x1fb8>
   126d0:	mov	r3, r0
   126d4:	mov	r0, #1
   126d8:	mov	r1, r4
   126dc:	mov	r2, r5
   126e0:	bl	11994 <error@plt>
   126e4:	movw	r1, #45959	; 0xb387
   126e8:	movt	r1, #1
   126ec:	mov	r0, #0
   126f0:	mov	r2, #5
   126f4:	bl	118c8 <dcgettext@plt>
   126f8:	mov	r2, r0
   126fc:	mov	r0, #0
   12700:	mov	r1, #0
   12704:	bl	11994 <error@plt>
   12708:	cmp	r9, #0
   1270c:	bne	12760 <__assert_fail@plt+0xb2c>
   12710:	movw	r0, #49632	; 0xc1e0
   12714:	movt	r0, #2
   12718:	ldr	r0, [r0]
   1271c:	sub	r0, r6, r0
   12720:	cmp	r0, #2
   12724:	bne	12760 <__assert_fail@plt+0xb2c>
   12728:	movw	r0, #49640	; 0xc1e8
   1272c:	movt	r0, #2
   12730:	ldr	r4, [r0]
   12734:	movw	r1, #46000	; 0xb3b0
   12738:	movt	r1, #1
   1273c:	mov	r0, #0
   12740:	mov	r2, #5
   12744:	bl	118c8 <dcgettext@plt>
   12748:	mov	r3, r0
   1274c:	movw	r2, #47362	; 0xb902
   12750:	movt	r2, #1
   12754:	mov	r0, r4
   12758:	mov	r1, #1
   1275c:	bl	11ac0 <__fprintf_chk@plt>
   12760:	mov	r0, #1
   12764:	bl	11d30 <__assert_fail@plt+0xfc>
   12768:	bl	11a6c <__errno_location@plt>
   1276c:	ldr	r5, [r0]
   12770:	movw	r1, #46277	; 0xb4c5
   12774:	movt	r1, #1
   12778:	mov	r0, #0
   1277c:	mov	r2, #5
   12780:	bl	118c8 <dcgettext@plt>
   12784:	mov	r1, r6
   12788:	mov	r6, r0
   1278c:	ldr	r0, [r1]
   12790:	ldr	r1, [r8, r0, lsl #2]
   12794:	mov	r0, #4
   12798:	bl	18710 <lchmod@@Base+0x1dc4>
   1279c:	mov	r3, r0
   127a0:	mov	r0, #1
   127a4:	mov	r1, r5
   127a8:	mov	r2, r6
   127ac:	bl	11994 <error@plt>
   127b0:	movw	r1, #46233	; 0xb499
   127b4:	movt	r1, #1
   127b8:	mov	r0, #0
   127bc:	mov	r2, #5
   127c0:	bl	118c8 <dcgettext@plt>
   127c4:	mov	r2, r0
   127c8:	str	r5, [sp]
   127cc:	mov	r0, #1
   127d0:	mov	r1, #0
   127d4:	ldr	r3, [sp, #20]
   127d8:	bl	11994 <error@plt>
   127dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   127e0:	add	fp, sp, #24
   127e4:	sub	sp, sp, #8
   127e8:	mov	r5, r2
   127ec:	mov	r6, r1
   127f0:	mov	r7, r0
   127f4:	mov	r4, #0
   127f8:	str	r4, [sp, #4]
   127fc:	str	r4, [sp]
   12800:	ldrb	r0, [r1]
   12804:	cmp	r0, #47	; 0x2f
   12808:	beq	12828 <__assert_fail@plt+0xbf4>
   1280c:	mov	r0, r6
   12810:	mov	r1, #2
   12814:	bl	12d80 <__assert_fail@plt+0x114c>
   12818:	mov	r4, r0
   1281c:	cmp	r0, #0
   12820:	mov	r6, r0
   12824:	beq	128f8 <__assert_fail@plt+0xcc4>
   12828:	add	r1, sp, #4
   1282c:	mov	r0, r7
   12830:	mov	r2, r6
   12834:	mov	r3, r5
   12838:	bl	117f0 <selabel_lookup@plt>
   1283c:	cmn	r0, #1
   12840:	ble	128d4 <__assert_fail@plt+0xca0>
   12844:	mov	r2, sp
   12848:	mov	r0, r6
   1284c:	mov	r1, r5
   12850:	bl	12954 <__assert_fail@plt+0xd20>
   12854:	mvn	r8, #0
   12858:	cmp	r0, #0
   1285c:	blt	128c8 <__assert_fail@plt+0xc94>
   12860:	ldr	r0, [sp, #4]
   12864:	bl	118b0 <context_new@plt>
   12868:	cmp	r0, #0
   1286c:	beq	128c8 <__assert_fail@plt+0xc94>
   12870:	mov	r7, r0
   12874:	ldr	r0, [sp]
   12878:	bl	118b0 <context_new@plt>
   1287c:	cmp	r0, #0
   12880:	beq	1290c <__assert_fail@plt+0xcd8>
   12884:	mov	r9, r0
   12888:	mov	r0, r7
   1288c:	bl	11844 <context_type_get@plt>
   12890:	cmp	r0, #0
   12894:	beq	12910 <__assert_fail@plt+0xcdc>
   12898:	mov	r1, r0
   1289c:	mov	r0, r9
   128a0:	bl	118d4 <context_type_set@plt>
   128a4:	cmp	r0, #0
   128a8:	bne	12910 <__assert_fail@plt+0xcdc>
   128ac:	mov	r0, r9
   128b0:	bl	11b98 <context_str@plt>
   128b4:	cmp	r0, #0
   128b8:	beq	12910 <__assert_fail@plt+0xcdc>
   128bc:	bl	11a60 <setfscreatecon@plt>
   128c0:	mov	r8, r0
   128c4:	b	12910 <__assert_fail@plt+0xcdc>
   128c8:	mov	r9, #0
   128cc:	mov	r7, #0
   128d0:	b	12910 <__assert_fail@plt+0xcdc>
   128d4:	bl	11a6c <__errno_location@plt>
   128d8:	ldr	r1, [r0]
   128dc:	mvn	r8, #0
   128e0:	mov	r9, #0
   128e4:	cmp	r1, #2
   128e8:	moveq	r1, #61	; 0x3d
   128ec:	streq	r1, [r0]
   128f0:	mov	r7, #0
   128f4:	b	12910 <__assert_fail@plt+0xcdc>
   128f8:	mov	r9, #0
   128fc:	mvn	r8, #0
   12900:	mov	r7, #0
   12904:	mov	r4, #0
   12908:	b	12910 <__assert_fail@plt+0xcdc>
   1290c:	mov	r9, #0
   12910:	bl	11a6c <__errno_location@plt>
   12914:	mov	r5, r0
   12918:	ldr	r6, [r0]
   1291c:	mov	r0, r7
   12920:	bl	119e8 <context_free@plt>
   12924:	mov	r0, r9
   12928:	bl	119e8 <context_free@plt>
   1292c:	ldr	r0, [sp, #4]
   12930:	bl	11b68 <freecon@plt>
   12934:	ldr	r0, [sp]
   12938:	bl	11b68 <freecon@plt>
   1293c:	mov	r0, r4
   12940:	bl	137c0 <__assert_fail@plt+0x1b8c>
   12944:	str	r6, [r5]
   12948:	mov	r0, r8
   1294c:	sub	sp, fp, #24
   12950:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12954:	push	{r4, r5, r6, r7, fp, lr}
   12958:	add	fp, sp, #16
   1295c:	sub	sp, sp, #8
   12960:	mov	r6, r2
   12964:	mov	r7, r1
   12968:	mov	r1, #0
   1296c:	str	r1, [sp, #4]
   12970:	str	r1, [sp]
   12974:	bl	13638 <__assert_fail@plt+0x1a04>
   12978:	mov	r4, r0
   1297c:	add	r0, sp, #4
   12980:	bl	11964 <getcon@plt>
   12984:	mvn	r5, #0
   12988:	cmp	r0, #0
   1298c:	blt	129cc <__assert_fail@plt+0xd98>
   12990:	mov	r1, sp
   12994:	mov	r0, r4
   12998:	bl	18eac <lchmod@@Base+0x2560>
   1299c:	cmp	r0, #0
   129a0:	blt	129cc <__assert_fail@plt+0xd98>
   129a4:	mov	r0, r7
   129a8:	bl	11c04 <mode_to_security_class@plt>
   129ac:	cmp	r0, #0
   129b0:	beq	129cc <__assert_fail@plt+0xd98>
   129b4:	mov	r2, r0
   129b8:	ldr	r1, [sp]
   129bc:	ldr	r0, [sp, #4]
   129c0:	mov	r3, r6
   129c4:	bl	11b38 <security_compute_create@plt>
   129c8:	mov	r5, r0
   129cc:	bl	11a6c <__errno_location@plt>
   129d0:	mov	r6, r0
   129d4:	ldr	r7, [r0]
   129d8:	mov	r0, r4
   129dc:	bl	137c0 <__assert_fail@plt+0x1b8c>
   129e0:	ldr	r0, [sp, #4]
   129e4:	bl	11b68 <freecon@plt>
   129e8:	ldr	r0, [sp]
   129ec:	bl	11b68 <freecon@plt>
   129f0:	str	r7, [r6]
   129f4:	mov	r0, r5
   129f8:	sub	sp, fp, #16
   129fc:	pop	{r4, r5, r6, r7, fp, pc}
   12a00:	push	{r4, r5, r6, r7, fp, lr}
   12a04:	add	fp, sp, #16
   12a08:	sub	sp, sp, #8
   12a0c:	mov	r6, r2
   12a10:	mov	r5, r0
   12a14:	ldrb	r0, [r1]
   12a18:	mov	r4, #0
   12a1c:	cmp	r0, #47	; 0x2f
   12a20:	beq	12a48 <__assert_fail@plt+0xe14>
   12a24:	mov	r0, r1
   12a28:	mov	r1, #2
   12a2c:	bl	12d80 <__assert_fail@plt+0x114c>
   12a30:	mov	r4, r0
   12a34:	cmp	r0, #0
   12a38:	mov	r1, r0
   12a3c:	moveq	r0, #0
   12a40:	subeq	sp, fp, #16
   12a44:	popeq	{r4, r5, r6, r7, fp, pc}
   12a48:	cmp	r6, #0
   12a4c:	beq	12ae4 <__assert_fail@plt+0xeb0>
   12a50:	mov	r7, #0
   12a54:	stm	sp, {r1, r7}
   12a58:	mov	r0, sp
   12a5c:	mov	r1, #16
   12a60:	mov	r2, #0
   12a64:	bl	1986c <lchmod@@Base+0x2f20>
   12a68:	mov	r6, r0
   12a6c:	bl	14120 <__assert_fail@plt+0x24ec>
   12a70:	cmp	r0, #0
   12a74:	beq	12aa8 <__assert_fail@plt+0xe74>
   12a78:	mov	r7, #0
   12a7c:	ldr	r1, [r6, #24]
   12a80:	mov	r0, r5
   12a84:	bl	12b1c <__assert_fail@plt+0xee8>
   12a88:	cmn	r0, #1
   12a8c:	bgt	12a98 <__assert_fail@plt+0xe64>
   12a90:	bl	11a6c <__errno_location@plt>
   12a94:	ldr	r7, [r0]
   12a98:	mov	r0, r6
   12a9c:	bl	14120 <__assert_fail@plt+0x24ec>
   12aa0:	cmp	r0, #0
   12aa4:	bne	12a7c <__assert_fail@plt+0xe48>
   12aa8:	bl	11a6c <__errno_location@plt>
   12aac:	mov	r5, r0
   12ab0:	ldr	r0, [r0]
   12ab4:	cmp	r0, #0
   12ab8:	movne	r7, r0
   12abc:	mov	r0, r6
   12ac0:	bl	13f94 <__assert_fail@plt+0x2360>
   12ac4:	cmp	r0, #0
   12ac8:	ldrne	r7, [r5]
   12acc:	mov	r0, r4
   12ad0:	bl	137c0 <__assert_fail@plt+0x1b8c>
   12ad4:	clz	r0, r7
   12ad8:	lsr	r0, r0, #5
   12adc:	sub	sp, fp, #16
   12ae0:	pop	{r4, r5, r6, r7, fp, pc}
   12ae4:	mov	r0, r5
   12ae8:	bl	12b1c <__assert_fail@plt+0xee8>
   12aec:	mov	r5, r0
   12af0:	bl	11a6c <__errno_location@plt>
   12af4:	mov	r6, r0
   12af8:	ldr	r7, [r0]
   12afc:	mov	r0, r4
   12b00:	bl	137c0 <__assert_fail@plt+0x1b8c>
   12b04:	str	r7, [r6]
   12b08:	add	r0, r5, #1
   12b0c:	cmn	r5, #1
   12b10:	movwne	r0, #1
   12b14:	sub	sp, fp, #16
   12b18:	pop	{r4, r5, r6, r7, fp, pc}
   12b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b20:	add	fp, sp, #28
   12b24:	sub	sp, sp, #116	; 0x74
   12b28:	mov	r7, r1
   12b2c:	mov	r5, r0
   12b30:	mov	r0, #0
   12b34:	str	r0, [sp, #4]
   12b38:	str	r0, [sp]
   12b3c:	cmp	r5, #0
   12b40:	beq	12b90 <__assert_fail@plt+0xf5c>
   12b44:	mov	r0, r7
   12b48:	mov	r1, #32768	; 0x8000
   12b4c:	bl	119a0 <open64@plt>
   12b50:	mov	r4, r0
   12b54:	cmn	r0, #1
   12b58:	beq	12bd8 <__assert_fail@plt+0xfa4>
   12b5c:	add	r1, sp, #8
   12b60:	mov	r0, r4
   12b64:	bl	1ade4 <lchmod@@Base+0x4498>
   12b68:	mov	r9, #1
   12b6c:	cmn	r0, #1
   12b70:	bgt	12c00 <__assert_fail@plt+0xfcc>
   12b74:	bl	11a6c <__errno_location@plt>
   12b78:	mov	r7, r0
   12b7c:	ldr	r6, [r0]
   12b80:	mov	r8, #0
   12b84:	mvn	r5, #0
   12b88:	mov	sl, #0
   12b8c:	b	12d38 <__assert_fail@plt+0x1104>
   12b90:	mov	r0, sp
   12b94:	bl	11b80 <getfscreatecon@plt>
   12b98:	mvn	r5, #0
   12b9c:	cmp	r0, #0
   12ba0:	blt	12d64 <__assert_fail@plt+0x1130>
   12ba4:	ldr	r1, [sp]
   12ba8:	cmp	r1, #0
   12bac:	beq	12c94 <__assert_fail@plt+0x1060>
   12bb0:	mov	r0, r7
   12bb4:	bl	1185c <lsetfilecon@plt>
   12bb8:	mov	r5, r0
   12bbc:	bl	11a6c <__errno_location@plt>
   12bc0:	mov	r4, r0
   12bc4:	ldr	r6, [r0]
   12bc8:	ldr	r0, [sp]
   12bcc:	bl	11b68 <freecon@plt>
   12bd0:	str	r6, [r4]
   12bd4:	b	12d64 <__assert_fail@plt+0x1130>
   12bd8:	bl	11a6c <__errno_location@plt>
   12bdc:	ldr	r0, [r0]
   12be0:	cmp	r0, #40	; 0x28
   12be4:	bne	12c54 <__assert_fail@plt+0x1020>
   12be8:	add	r1, sp, #8
   12bec:	mov	r0, r7
   12bf0:	bl	1adf4 <lchmod@@Base+0x44a8>
   12bf4:	mov	r9, #0
   12bf8:	cmp	r0, #0
   12bfc:	blt	12c54 <__assert_fail@plt+0x1020>
   12c00:	ldr	r3, [sp, #24]
   12c04:	add	r1, sp, #4
   12c08:	mov	r0, r5
   12c0c:	mov	r2, r7
   12c10:	bl	117f0 <selabel_lookup@plt>
   12c14:	cmn	r0, #1
   12c18:	ble	12c70 <__assert_fail@plt+0x103c>
   12c1c:	ldr	r0, [sp, #4]
   12c20:	bl	118b0 <context_new@plt>
   12c24:	mvn	r5, #0
   12c28:	cmp	r0, #0
   12c2c:	beq	12ca4 <__assert_fail@plt+0x1070>
   12c30:	mov	r8, r0
   12c34:	mov	r1, sp
   12c38:	cmp	r9, #0
   12c3c:	beq	12cb0 <__assert_fail@plt+0x107c>
   12c40:	mov	r0, r4
   12c44:	bl	18f54 <lchmod@@Base+0x2608>
   12c48:	cmp	r0, #0
   12c4c:	bge	12cc0 <__assert_fail@plt+0x108c>
   12c50:	b	12d20 <__assert_fail@plt+0x10ec>
   12c54:	bl	11a6c <__errno_location@plt>
   12c58:	mov	r7, r0
   12c5c:	ldr	r6, [r0]
   12c60:	mov	r8, #0
   12c64:	mvn	r5, #0
   12c68:	mov	sl, #0
   12c6c:	b	12d40 <__assert_fail@plt+0x110c>
   12c70:	bl	11a6c <__errno_location@plt>
   12c74:	ldr	r1, [r0]
   12c78:	mvn	r5, #0
   12c7c:	mov	sl, #0
   12c80:	cmp	r1, #2
   12c84:	moveq	r1, #61	; 0x3d
   12c88:	streq	r1, [r0]
   12c8c:	mov	r8, #0
   12c90:	b	12d24 <__assert_fail@plt+0x10f0>
   12c94:	bl	11a6c <__errno_location@plt>
   12c98:	mov	r1, #61	; 0x3d
   12c9c:	str	r1, [r0]
   12ca0:	b	12d64 <__assert_fail@plt+0x1130>
   12ca4:	mov	sl, #0
   12ca8:	mov	r8, #0
   12cac:	b	12d24 <__assert_fail@plt+0x10f0>
   12cb0:	mov	r0, r7
   12cb4:	bl	18f38 <lchmod@@Base+0x25ec>
   12cb8:	cmp	r0, #0
   12cbc:	blt	12d20 <__assert_fail@plt+0x10ec>
   12cc0:	ldr	r0, [sp]
   12cc4:	bl	118b0 <context_new@plt>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12d20 <__assert_fail@plt+0x10ec>
   12cd0:	mov	sl, r0
   12cd4:	mov	r0, r8
   12cd8:	bl	11844 <context_type_get@plt>
   12cdc:	cmp	r0, #0
   12ce0:	beq	12d24 <__assert_fail@plt+0x10f0>
   12ce4:	mov	r1, r0
   12ce8:	mov	r0, sl
   12cec:	bl	118d4 <context_type_set@plt>
   12cf0:	cmp	r0, #0
   12cf4:	bne	12d24 <__assert_fail@plt+0x10f0>
   12cf8:	mov	r0, sl
   12cfc:	bl	11b98 <context_str@plt>
   12d00:	cmp	r0, #0
   12d04:	beq	12d24 <__assert_fail@plt+0x10f0>
   12d08:	mov	r1, r0
   12d0c:	cmp	r9, #0
   12d10:	beq	12d70 <__assert_fail@plt+0x113c>
   12d14:	mov	r0, r4
   12d18:	bl	11afc <fsetfilecon@plt>
   12d1c:	b	12d78 <__assert_fail@plt+0x1144>
   12d20:	mov	sl, #0
   12d24:	bl	11a6c <__errno_location@plt>
   12d28:	mov	r7, r0
   12d2c:	ldr	r6, [r0]
   12d30:	cmn	r4, #1
   12d34:	beq	12d40 <__assert_fail@plt+0x110c>
   12d38:	mov	r0, r4
   12d3c:	bl	11be0 <close@plt>
   12d40:	mov	r0, r8
   12d44:	bl	119e8 <context_free@plt>
   12d48:	mov	r0, sl
   12d4c:	bl	119e8 <context_free@plt>
   12d50:	ldr	r0, [sp, #4]
   12d54:	bl	11b68 <freecon@plt>
   12d58:	ldr	r0, [sp]
   12d5c:	bl	11b68 <freecon@plt>
   12d60:	str	r6, [r7]
   12d64:	mov	r0, r5
   12d68:	sub	sp, fp, #28
   12d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d70:	mov	r0, r7
   12d74:	bl	1185c <lsetfilecon@plt>
   12d78:	mov	r5, r0
   12d7c:	b	12d24 <__assert_fail@plt+0x10f0>
   12d80:	push	{r4, r5, fp, lr}
   12d84:	add	fp, sp, #8
   12d88:	sub	sp, sp, #8
   12d8c:	sub	sp, sp, #1024	; 0x400
   12d90:	mov	r2, sp
   12d94:	bl	12da0 <__assert_fail@plt+0x116c>
   12d98:	sub	sp, fp, #8
   12d9c:	pop	{r4, r5, fp, pc}
   12da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12da4:	add	fp, sp, #28
   12da8:	sub	sp, sp, #164	; 0xa4
   12dac:	sub	sp, sp, #2048	; 0x800
   12db0:	mov	sl, r2
   12db4:	mov	r5, r1
   12db8:	mov	r9, r0
   12dbc:	mov	r6, #0
   12dc0:	str	r6, [fp, #-36]	; 0xffffffdc
   12dc4:	and	r0, r1, #3
   12dc8:	str	r0, [sp, #28]
   12dcc:	bl	133a4 <__assert_fail@plt+0x1770>
   12dd0:	cmp	r0, #0
   12dd4:	beq	12de8 <__assert_fail@plt+0x11b4>
   12dd8:	bl	11a6c <__errno_location@plt>
   12ddc:	mov	r1, #22
   12de0:	str	r1, [r0]
   12de4:	b	1337c <__assert_fail@plt+0x1748>
   12de8:	cmp	r9, #0
   12dec:	beq	12e48 <__assert_fail@plt+0x1214>
   12df0:	ldrb	r0, [r9]
   12df4:	cmp	r0, #0
   12df8:	beq	12e54 <__assert_fail@plt+0x1220>
   12dfc:	sub	r0, fp, #1072	; 0x430
   12e00:	bl	133b4 <__assert_fail@plt+0x1780>
   12e04:	add	r0, sp, #136	; 0x88
   12e08:	bl	133b4 <__assert_fail@plt+0x1780>
   12e0c:	mov	r0, sl
   12e10:	bl	133b4 <__assert_fail@plt+0x1780>
   12e14:	ldr	r4, [sl]
   12e18:	ldrb	r0, [r9]
   12e1c:	cmp	r0, #47	; 0x2f
   12e20:	bne	12e68 <__assert_fail@plt+0x1234>
   12e24:	mov	r0, r4
   12e28:	mov	r1, r9
   12e2c:	mov	r2, #0
   12e30:	mvn	r3, #0
   12e34:	bl	11c28 <__mempcpy_chk@plt>
   12e38:	mov	r6, r0
   12e3c:	mov	r0, #47	; 0x2f
   12e40:	strb	r0, [r6], #1
   12e44:	b	12e8c <__assert_fail@plt+0x1258>
   12e48:	bl	11a6c <__errno_location@plt>
   12e4c:	mov	r1, #22
   12e50:	b	12e5c <__assert_fail@plt+0x1228>
   12e54:	bl	11a6c <__errno_location@plt>
   12e58:	mov	r1, #2
   12e5c:	str	r1, [r0]
   12e60:	mov	r6, #0
   12e64:	b	1337c <__assert_fail@plt+0x1748>
   12e68:	ldr	r1, [sl, #4]
   12e6c:	mov	r0, r4
   12e70:	bl	11a0c <getcwd@plt>
   12e74:	cmp	r0, #0
   12e78:	beq	132d4 <__assert_fail@plt+0x16a0>
   12e7c:	mov	r0, r4
   12e80:	mov	r1, #0
   12e84:	bl	11904 <rawmemchr@plt>
   12e88:	mov	r6, r0
   12e8c:	ldrb	r0, [r9]
   12e90:	cmp	r0, #0
   12e94:	beq	132b0 <__assert_fail@plt+0x167c>
   12e98:	and	r1, r5, #4
   12e9c:	str	r1, [sp, #24]
   12ea0:	mov	r1, #0
   12ea4:	str	r1, [sp, #4]
   12ea8:	mov	r1, #0
   12eac:	str	r1, [sp, #12]
   12eb0:	str	sl, [sp, #20]
   12eb4:	uxtb	r1, r0
   12eb8:	cmp	r1, #47	; 0x2f
   12ebc:	bne	12ecc <__assert_fail@plt+0x1298>
   12ec0:	ldrb	r0, [r9, #1]!
   12ec4:	cmp	r0, #47	; 0x2f
   12ec8:	beq	12ec0 <__assert_fail@plt+0x128c>
   12ecc:	mov	r8, r9
   12ed0:	b	12ed8 <__assert_fail@plt+0x12a4>
   12ed4:	add	r8, r8, #1
   12ed8:	ldrb	r1, [r8]
   12edc:	cmp	r1, #0
   12ee0:	cmpne	r1, #47	; 0x2f
   12ee4:	bne	12ed4 <__assert_fail@plt+0x12a0>
   12ee8:	sub	r7, r8, r9
   12eec:	cmp	r7, #1
   12ef0:	beq	12f08 <__assert_fail@plt+0x12d4>
   12ef4:	cmp	r7, #2
   12ef8:	beq	12f18 <__assert_fail@plt+0x12e4>
   12efc:	cmp	r7, #0
   12f00:	bne	12f2c <__assert_fail@plt+0x12f8>
   12f04:	b	132b0 <__assert_fail@plt+0x167c>
   12f08:	uxtb	r0, r0
   12f0c:	cmp	r0, #46	; 0x2e
   12f10:	bne	12f2c <__assert_fail@plt+0x12f8>
   12f14:	b	1324c <__assert_fail@plt+0x1618>
   12f18:	uxtb	r0, r0
   12f1c:	cmp	r0, #46	; 0x2e
   12f20:	ldrbeq	r0, [r9, #1]
   12f24:	cmpeq	r0, #46	; 0x2e
   12f28:	beq	1320c <__assert_fail@plt+0x15d8>
   12f2c:	ldrb	r0, [r6, #-1]
   12f30:	cmp	r0, #47	; 0x2f
   12f34:	movne	r0, #47	; 0x2f
   12f38:	strbne	r0, [r6], #1
   12f3c:	ldr	r0, [sl, #4]
   12f40:	add	r0, r4, r0
   12f44:	sub	r0, r0, r6
   12f48:	add	r5, r7, #2
   12f4c:	cmp	r0, r5
   12f50:	bcc	12f78 <__assert_fail@plt+0x1344>
   12f54:	b	12f8c <__assert_fail@plt+0x1358>
   12f58:	sub	r0, r6, r4
   12f5c:	ldr	r4, [sl]
   12f60:	ldr	r1, [sl, #4]
   12f64:	add	r6, r4, r0
   12f68:	add	r0, r4, r1
   12f6c:	sub	r0, r0, r6
   12f70:	cmp	r0, r5
   12f74:	bcs	12f8c <__assert_fail@plt+0x1358>
   12f78:	mov	r0, sl
   12f7c:	bl	18e04 <lchmod@@Base+0x24b8>
   12f80:	cmp	r0, #0
   12f84:	bne	12f58 <__assert_fail@plt+0x1324>
   12f88:	b	133a0 <__assert_fail@plt+0x176c>
   12f8c:	mov	r0, r6
   12f90:	mov	r1, r9
   12f94:	str	r7, [sp, #16]
   12f98:	mov	r2, r7
   12f9c:	mvn	r3, #0
   12fa0:	bl	11c28 <__mempcpy_chk@plt>
   12fa4:	mov	r6, r0
   12fa8:	mov	r0, #0
   12fac:	strb	r0, [r6]
   12fb0:	ldr	r0, [sp, #24]
   12fb4:	cmp	r0, #0
   12fb8:	bne	13018 <__assert_fail@plt+0x13e4>
   12fbc:	ldr	r5, [sp, #136]	; 0x88
   12fc0:	ldr	r0, [sp, #140]	; 0x8c
   12fc4:	sub	r7, r0, #1
   12fc8:	mov	r0, r4
   12fcc:	mov	r1, r5
   12fd0:	mov	r2, r7
   12fd4:	bl	11934 <readlink@plt>
   12fd8:	cmp	r0, r7
   12fdc:	blt	12ff4 <__assert_fail@plt+0x13c0>
   12fe0:	add	r0, sp, #136	; 0x88
   12fe4:	bl	18d80 <lchmod@@Base+0x2434>
   12fe8:	cmp	r0, #0
   12fec:	bne	12fbc <__assert_fail@plt+0x1388>
   12ff0:	b	133a0 <__assert_fail@plt+0x176c>
   12ff4:	mov	sl, r0
   12ff8:	cmp	r0, #0
   12ffc:	blt	13018 <__assert_fail@plt+0x13e4>
   13000:	ldr	r0, [sp, #4]
   13004:	cmp	r0, #19
   13008:	bgt	13088 <__assert_fail@plt+0x1454>
   1300c:	add	r0, r0, #1
   13010:	str	r0, [sp, #4]
   13014:	b	13100 <__assert_fail@plt+0x14cc>
   13018:	ldr	r0, [sp, #28]
   1301c:	cmp	r0, #2
   13020:	bne	13030 <__assert_fail@plt+0x13fc>
   13024:	mov	r9, r8
   13028:	ldr	sl, [sp, #20]
   1302c:	b	132a4 <__assert_fail@plt+0x1670>
   13030:	mov	r0, r8
   13034:	bl	13460 <__assert_fail@plt+0x182c>
   13038:	cmp	r0, #0
   1303c:	beq	1305c <__assert_fail@plt+0x1428>
   13040:	mov	r0, r4
   13044:	mov	r1, r6
   13048:	bl	134e8 <__assert_fail@plt+0x18b4>
   1304c:	cmp	r0, #0
   13050:	ldr	sl, [sp, #20]
   13054:	bne	1324c <__assert_fail@plt+0x1618>
   13058:	b	13264 <__assert_fail@plt+0x1630>
   1305c:	ldr	r0, [sp, #24]
   13060:	cmp	r0, #0
   13064:	ldr	sl, [sp, #20]
   13068:	beq	1323c <__assert_fail@plt+0x1608>
   1306c:	ldrb	r0, [r8]
   13070:	cmp	r0, #0
   13074:	beq	13254 <__assert_fail@plt+0x1620>
   13078:	mov	r9, r8
   1307c:	cmp	r0, #0
   13080:	bne	12eb4 <__assert_fail@plt+0x1280>
   13084:	b	132b0 <__assert_fail@plt+0x167c>
   13088:	ldrb	r0, [r9]
   1308c:	cmp	r0, #0
   13090:	beq	13100 <__assert_fail@plt+0x14cc>
   13094:	mov	r0, #0
   13098:	ldr	r7, [sp, #16]
   1309c:	strb	r0, [r6, -r7]
   130a0:	ldrb	r0, [r4]
   130a4:	cmp	r0, #0
   130a8:	mov	r0, r4
   130ac:	movw	r1, #46883	; 0xb723
   130b0:	movt	r1, #1
   130b4:	moveq	r0, r1
   130b8:	add	r1, sp, #32
   130bc:	bl	1add4 <lchmod@@Base+0x4488>
   130c0:	cmp	r0, #0
   130c4:	bne	13394 <__assert_fail@plt+0x1760>
   130c8:	rsb	r0, r7, #0
   130cc:	ldrb	r1, [r9]
   130d0:	strb	r1, [r6, r0]
   130d4:	sub	r0, fp, #36	; 0x24
   130d8:	mov	r1, r9
   130dc:	add	r2, sp, #32
   130e0:	bl	133c8 <__assert_fail@plt+0x1794>
   130e4:	cmp	r0, #0
   130e8:	beq	13100 <__assert_fail@plt+0x14cc>
   130ec:	ldr	r0, [sp, #28]
   130f0:	cmp	r0, #2
   130f4:	ldr	sl, [sp, #20]
   130f8:	beq	1324c <__assert_fail@plt+0x1618>
   130fc:	b	13388 <__assert_fail@plt+0x1754>
   13100:	mov	r0, #0
   13104:	strb	r0, [r5, sl]
   13108:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   1310c:	ldr	r0, [sp, #12]
   13110:	tst	r0, #1
   13114:	ldr	r0, [sp, #8]
   13118:	subne	r0, r8, r9
   1311c:	str	r0, [sp, #8]
   13120:	mov	r0, r8
   13124:	bl	11a30 <strlen@plt>
   13128:	str	r0, [sp, #16]
   1312c:	adds	r7, r0, sl
   13130:	bcs	133a0 <__assert_fail@plt+0x176c>
   13134:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   13138:	cmp	r0, r7
   1313c:	bhi	13160 <__assert_fail@plt+0x152c>
   13140:	sub	r0, fp, #1072	; 0x430
   13144:	bl	18e04 <lchmod@@Base+0x24b8>
   13148:	cmp	r0, #0
   1314c:	beq	133a0 <__assert_fail@plt+0x176c>
   13150:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   13154:	cmp	r0, r7
   13158:	bls	13140 <__assert_fail@plt+0x150c>
   1315c:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   13160:	ldr	r0, [sp, #12]
   13164:	tst	r0, #1
   13168:	ldr	r0, [sp, #8]
   1316c:	addne	r8, r9, r0
   13170:	add	r0, r9, sl
   13174:	ldr	r1, [sp, #16]
   13178:	add	r2, r1, #1
   1317c:	mov	r1, r8
   13180:	bl	11868 <memmove@plt>
   13184:	mov	r0, r9
   13188:	mov	r1, r5
   1318c:	mov	r2, sl
   13190:	bl	11898 <memcpy@plt>
   13194:	ldrb	r0, [r5]
   13198:	cmp	r0, #47	; 0x2f
   1319c:	bne	131d0 <__assert_fail@plt+0x159c>
   131a0:	mov	r0, r4
   131a4:	mov	r1, r5
   131a8:	mov	r2, #0
   131ac:	mvn	r3, #0
   131b0:	bl	11c28 <__mempcpy_chk@plt>
   131b4:	mov	r6, r0
   131b8:	mov	r0, #47	; 0x2f
   131bc:	strb	r0, [r6], #1
   131c0:	mov	r0, #1
   131c4:	str	r0, [sp, #12]
   131c8:	ldr	sl, [sp, #20]
   131cc:	b	132a4 <__assert_fail@plt+0x1670>
   131d0:	add	r0, r4, #1
   131d4:	mov	r1, #1
   131d8:	str	r1, [sp, #12]
   131dc:	cmp	r6, r0
   131e0:	ldr	sl, [sp, #20]
   131e4:	bls	132a4 <__assert_fail@plt+0x1670>
   131e8:	sub	r0, r6, #1
   131ec:	mov	r6, r0
   131f0:	cmp	r0, r4
   131f4:	bls	132a4 <__assert_fail@plt+0x1670>
   131f8:	mov	r0, r6
   131fc:	ldrb	r1, [r0, #-1]!
   13200:	cmp	r1, #47	; 0x2f
   13204:	bne	131ec <__assert_fail@plt+0x15b8>
   13208:	b	132a4 <__assert_fail@plt+0x1670>
   1320c:	add	r0, r4, #1
   13210:	cmp	r6, r0
   13214:	bls	1324c <__assert_fail@plt+0x1618>
   13218:	sub	r0, r6, #1
   1321c:	mov	r6, r0
   13220:	cmp	r0, r4
   13224:	bls	1324c <__assert_fail@plt+0x1618>
   13228:	mov	r0, r6
   1322c:	ldrb	r1, [r0, #-1]!
   13230:	cmp	r1, #47	; 0x2f
   13234:	bne	1321c <__assert_fail@plt+0x15e8>
   13238:	b	1324c <__assert_fail@plt+0x1618>
   1323c:	bl	11a6c <__errno_location@plt>
   13240:	ldr	r0, [r0]
   13244:	cmp	r0, #22
   13248:	bne	13264 <__assert_fail@plt+0x1630>
   1324c:	mov	r9, r8
   13250:	b	132a4 <__assert_fail@plt+0x1670>
   13254:	mov	r0, r4
   13258:	bl	134f4 <__assert_fail@plt+0x18c0>
   1325c:	cmp	r0, #0
   13260:	bne	1324c <__assert_fail@plt+0x1618>
   13264:	mov	r5, #1
   13268:	ldr	r0, [sp, #28]
   1326c:	cmp	r0, #1
   13270:	bne	13324 <__assert_fail@plt+0x16f0>
   13274:	bl	11a6c <__errno_location@plt>
   13278:	ldr	r0, [r0]
   1327c:	cmp	r0, #2
   13280:	bne	13324 <__assert_fail@plt+0x16f0>
   13284:	mov	r0, r8
   13288:	movw	r1, #48089	; 0xbbd9
   1328c:	movt	r1, #1
   13290:	bl	11c1c <strspn@plt>
   13294:	ldrb	r0, [r8, r0]
   13298:	cmp	r0, #0
   1329c:	mov	r9, r8
   132a0:	bne	13324 <__assert_fail@plt+0x16f0>
   132a4:	ldrb	r0, [r9]
   132a8:	cmp	r0, #0
   132ac:	bne	12eb4 <__assert_fail@plt+0x1280>
   132b0:	add	r0, r4, #1
   132b4:	mov	r5, #0
   132b8:	cmp	r6, r0
   132bc:	bls	13324 <__assert_fail@plt+0x16f0>
   132c0:	mov	r0, r6
   132c4:	ldrb	r1, [r0, #-1]!
   132c8:	cmp	r1, #47	; 0x2f
   132cc:	moveq	r6, r0
   132d0:	b	13324 <__assert_fail@plt+0x16f0>
   132d4:	bl	11a6c <__errno_location@plt>
   132d8:	mov	r6, r0
   132dc:	ldr	r0, [r6]
   132e0:	cmp	r0, #34	; 0x22
   132e4:	bne	13314 <__assert_fail@plt+0x16e0>
   132e8:	mov	r0, sl
   132ec:	bl	18d80 <lchmod@@Base+0x2434>
   132f0:	cmp	r0, #0
   132f4:	beq	133a0 <__assert_fail@plt+0x176c>
   132f8:	ldr	r4, [sl]
   132fc:	ldr	r1, [sl, #4]
   13300:	mov	r0, r4
   13304:	bl	11a0c <getcwd@plt>
   13308:	cmp	r0, #0
   1330c:	beq	132dc <__assert_fail@plt+0x16a8>
   13310:	b	12e7c <__assert_fail@plt+0x1248>
   13314:	cmp	r0, #12
   13318:	beq	133a0 <__assert_fail@plt+0x176c>
   1331c:	mov	r5, #1
   13320:	mov	r6, r4
   13324:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13328:	cmp	r0, #0
   1332c:	beq	13334 <__assert_fail@plt+0x1700>
   13330:	bl	1600c <__assert_fail@plt+0x43d8>
   13334:	sub	r0, fp, #1072	; 0x430
   13338:	bl	1351c <__assert_fail@plt+0x18e8>
   1333c:	add	r0, sp, #136	; 0x88
   13340:	bl	1351c <__assert_fail@plt+0x18e8>
   13344:	cmp	r5, #0
   13348:	beq	1335c <__assert_fail@plt+0x1728>
   1334c:	mov	r0, sl
   13350:	bl	1351c <__assert_fail@plt+0x18e8>
   13354:	mov	r6, #0
   13358:	b	1337c <__assert_fail@plt+0x1748>
   1335c:	mov	r0, #0
   13360:	strb	r0, [r6], #1
   13364:	sub	r1, r6, r4
   13368:	mov	r0, sl
   1336c:	bl	18d18 <lchmod@@Base+0x23cc>
   13370:	mov	r6, r0
   13374:	cmp	r0, #0
   13378:	beq	133a0 <__assert_fail@plt+0x176c>
   1337c:	mov	r0, r6
   13380:	sub	sp, fp, #28
   13384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13388:	bl	11a6c <__errno_location@plt>
   1338c:	mov	r1, #40	; 0x28
   13390:	str	r1, [r0]
   13394:	mov	r5, #1
   13398:	ldr	sl, [sp, #20]
   1339c:	b	13324 <__assert_fail@plt+0x16f0>
   133a0:	bl	19828 <lchmod@@Base+0x2edc>
   133a4:	sub	r1, r0, #1
   133a8:	ands	r0, r1, r0
   133ac:	movwne	r0, #1
   133b0:	bx	lr
   133b4:	mov	r1, #1024	; 0x400
   133b8:	add	r2, r0, #8
   133bc:	str	r2, [r0]
   133c0:	str	r1, [r0, #4]
   133c4:	bx	lr
   133c8:	push	{r4, r5, r6, sl, fp, lr}
   133cc:	add	fp, sp, #16
   133d0:	sub	sp, sp, #8
   133d4:	mov	r4, r2
   133d8:	mov	r5, r1
   133dc:	mov	r6, r0
   133e0:	ldr	r0, [r0]
   133e4:	cmp	r0, #0
   133e8:	bne	13420 <__assert_fail@plt+0x17ec>
   133ec:	movw	r0, #26720	; 0x6860
   133f0:	movt	r0, #1
   133f4:	str	r0, [sp]
   133f8:	movw	r2, #26576	; 0x67d0
   133fc:	movt	r2, #1
   13400:	movw	r3, #26632	; 0x6808
   13404:	movt	r3, #1
   13408:	mov	r0, #7
   1340c:	mov	r1, #0
   13410:	bl	15d38 <__assert_fail@plt+0x4104>
   13414:	str	r0, [r6]
   13418:	cmp	r0, #0
   1341c:	beq	1345c <__assert_fail@plt+0x1828>
   13420:	ldr	r0, [r6]
   13424:	mov	r1, r5
   13428:	mov	r2, r4
   1342c:	bl	13774 <__assert_fail@plt+0x1b40>
   13430:	mov	r1, r0
   13434:	mov	r0, #1
   13438:	cmp	r1, #0
   1343c:	bne	13454 <__assert_fail@plt+0x1820>
   13440:	ldr	r0, [r6]
   13444:	mov	r1, r5
   13448:	mov	r2, r4
   1344c:	bl	136f8 <__assert_fail@plt+0x1ac4>
   13450:	mov	r0, #0
   13454:	sub	sp, fp, #16
   13458:	pop	{r4, r5, r6, sl, fp, pc}
   1345c:	bl	19828 <lchmod@@Base+0x2edc>
   13460:	mov	r1, r0
   13464:	ldrb	r2, [r0]
   13468:	mov	r0, #0
   1346c:	cmp	r2, #47	; 0x2f
   13470:	bxne	lr
   13474:	mov	r0, #1
   13478:	mov	ip, #0
   1347c:	mov	r3, r1
   13480:	ldrb	r2, [r1, #1]!
   13484:	cmp	r2, #47	; 0x2f
   13488:	beq	1347c <__assert_fail@plt+0x1848>
   1348c:	cmp	r2, #46	; 0x2e
   13490:	bne	134d0 <__assert_fail@plt+0x189c>
   13494:	add	r1, r3, #2
   13498:	ldrb	r2, [r1]
   1349c:	cmp	r2, #47	; 0x2f
   134a0:	beq	1347c <__assert_fail@plt+0x1848>
   134a4:	cmp	r2, #0
   134a8:	moveq	ip, #1
   134ac:	moveq	r0, ip
   134b0:	bxeq	lr
   134b4:	cmp	r2, #46	; 0x2e
   134b8:	bne	134e0 <__assert_fail@plt+0x18ac>
   134bc:	ldrb	r1, [r3, #3]
   134c0:	cmp	r1, #0
   134c4:	cmpne	r1, #47	; 0x2f
   134c8:	bne	134e0 <__assert_fail@plt+0x18ac>
   134cc:	bx	lr
   134d0:	cmp	r2, #0
   134d4:	movne	r0, ip
   134d8:	bxne	lr
   134dc:	bx	lr
   134e0:	mov	r0, #0
   134e4:	bx	lr
   134e8:	mov	r2, #47	; 0x2f
   134ec:	strh	r2, [r1]
   134f0:	b	134f4 <__assert_fail@plt+0x18c0>
   134f4:	push	{fp, lr}
   134f8:	mov	fp, sp
   134fc:	mov	r1, r0
   13500:	mvn	r0, #99	; 0x63
   13504:	mov	r2, #0
   13508:	mov	r3, #512	; 0x200
   1350c:	bl	11880 <faccessat@plt>
   13510:	clz	r0, r0
   13514:	lsr	r0, r0, #5
   13518:	pop	{fp, pc}
   1351c:	mov	r1, r0
   13520:	ldr	r0, [r1], #8
   13524:	cmp	r0, r1
   13528:	bxeq	lr
   1352c:	b	137c0 <__assert_fail@plt+0x1b8c>
   13530:	movw	r1, #49656	; 0xc1f8
   13534:	movt	r1, #2
   13538:	str	r0, [r1]
   1353c:	bx	lr
   13540:	movw	r1, #49660	; 0xc1fc
   13544:	movt	r1, #2
   13548:	strb	r0, [r1]
   1354c:	bx	lr
   13550:	push	{r4, r5, r6, sl, fp, lr}
   13554:	add	fp, sp, #16
   13558:	sub	sp, sp, #8
   1355c:	movw	r0, #49644	; 0xc1ec
   13560:	movt	r0, #2
   13564:	ldr	r0, [r0]
   13568:	bl	1a3f0 <lchmod@@Base+0x3aa4>
   1356c:	cmp	r0, #0
   13570:	beq	13598 <__assert_fail@plt+0x1964>
   13574:	movw	r0, #49660	; 0xc1fc
   13578:	movt	r0, #2
   1357c:	ldrb	r0, [r0]
   13580:	cmp	r0, #0
   13584:	beq	135b8 <__assert_fail@plt+0x1984>
   13588:	bl	11a6c <__errno_location@plt>
   1358c:	ldr	r0, [r0]
   13590:	cmp	r0, #32
   13594:	bne	135b8 <__assert_fail@plt+0x1984>
   13598:	movw	r0, #49640	; 0xc1e8
   1359c:	movt	r0, #2
   135a0:	ldr	r0, [r0]
   135a4:	bl	1a3f0 <lchmod@@Base+0x3aa4>
   135a8:	cmp	r0, #0
   135ac:	subeq	sp, fp, #16
   135b0:	popeq	{r4, r5, r6, sl, fp, pc}
   135b4:	b	13628 <__assert_fail@plt+0x19f4>
   135b8:	movw	r1, #46863	; 0xb70f
   135bc:	movt	r1, #1
   135c0:	mov	r0, #0
   135c4:	mov	r2, #5
   135c8:	bl	118c8 <dcgettext@plt>
   135cc:	mov	r4, r0
   135d0:	movw	r0, #49656	; 0xc1f8
   135d4:	movt	r0, #2
   135d8:	ldr	r6, [r0]
   135dc:	bl	11a6c <__errno_location@plt>
   135e0:	ldr	r5, [r0]
   135e4:	cmp	r6, #0
   135e8:	bne	13604 <__assert_fail@plt+0x19d0>
   135ec:	movw	r2, #46879	; 0xb71f
   135f0:	movt	r2, #1
   135f4:	mov	r0, #0
   135f8:	mov	r1, r5
   135fc:	mov	r3, r4
   13600:	b	13624 <__assert_fail@plt+0x19f0>
   13604:	mov	r0, r6
   13608:	bl	187b4 <lchmod@@Base+0x1e68>
   1360c:	mov	r3, r0
   13610:	str	r4, [sp]
   13614:	movw	r2, #46875	; 0xb71b
   13618:	movt	r2, #1
   1361c:	mov	r0, #0
   13620:	mov	r1, r5
   13624:	bl	11994 <error@plt>
   13628:	movw	r0, #49556	; 0xc194
   1362c:	movt	r0, #2
   13630:	ldr	r0, [r0]
   13634:	bl	1188c <_exit@plt>
   13638:	push	{fp, lr}
   1363c:	mov	fp, sp
   13640:	bl	13698 <__assert_fail@plt+0x1a64>
   13644:	cmp	r0, #0
   13648:	popne	{fp, pc}
   1364c:	bl	19828 <lchmod@@Base+0x2edc>
   13650:	push	{r4, r5, r6, sl, fp, lr}
   13654:	add	fp, sp, #16
   13658:	mov	r4, r0
   1365c:	mov	r5, r0
   13660:	ldrb	r6, [r5], #-1
   13664:	bl	19ef4 <lchmod@@Base+0x35a8>
   13668:	sub	r2, r0, r4
   1366c:	sub	r0, r6, #47	; 0x2f
   13670:	clz	r0, r0
   13674:	lsr	r1, r0, #5
   13678:	mov	r0, r2
   1367c:	cmp	r2, r1
   13680:	popls	{r4, r5, r6, sl, fp, pc}
   13684:	ldrb	r3, [r5, r0]
   13688:	sub	r2, r0, #1
   1368c:	cmp	r3, #47	; 0x2f
   13690:	beq	13678 <__assert_fail@plt+0x1a44>
   13694:	pop	{r4, r5, r6, sl, fp, pc}
   13698:	push	{r4, r5, r6, sl, fp, lr}
   1369c:	add	fp, sp, #16
   136a0:	mov	r6, r0
   136a4:	bl	13650 <__assert_fail@plt+0x1a1c>
   136a8:	mov	r4, r0
   136ac:	cmp	r0, #0
   136b0:	addeq	r0, r0, #1
   136b4:	add	r0, r0, #1
   136b8:	bl	19e70 <lchmod@@Base+0x3524>
   136bc:	mov	r5, r0
   136c0:	cmp	r0, #0
   136c4:	beq	136f0 <__assert_fail@plt+0x1abc>
   136c8:	mov	r0, r5
   136cc:	mov	r1, r6
   136d0:	mov	r2, r4
   136d4:	bl	11898 <memcpy@plt>
   136d8:	cmp	r4, #0
   136dc:	moveq	r0, #46	; 0x2e
   136e0:	strbeq	r0, [r5, r4]
   136e4:	moveq	r4, #1
   136e8:	mov	r0, #0
   136ec:	strb	r0, [r5, r4]
   136f0:	mov	r0, r5
   136f4:	pop	{r4, r5, r6, sl, fp, pc}
   136f8:	push	{r4, r5, r6, r7, fp, lr}
   136fc:	add	fp, sp, #16
   13700:	cmp	r0, #0
   13704:	popeq	{r4, r5, r6, r7, fp, pc}
   13708:	mov	r6, r2
   1370c:	mov	r7, r1
   13710:	mov	r5, r0
   13714:	mov	r0, #24
   13718:	bl	19478 <lchmod@@Base+0x2b2c>
   1371c:	mov	r4, r0
   13720:	mov	r0, r7
   13724:	bl	19808 <lchmod@@Base+0x2ebc>
   13728:	str	r0, [r4]
   1372c:	ldrd	r0, [r6, #96]	; 0x60
   13730:	str	r1, [r4, #12]
   13734:	str	r0, [r4, #8]
   13738:	ldrd	r0, [r6]
   1373c:	str	r1, [r4, #20]
   13740:	str	r0, [r4, #16]
   13744:	mov	r0, r5
   13748:	mov	r1, r4
   1374c:	bl	165c8 <__assert_fail@plt+0x4994>
   13750:	cmp	r0, #0
   13754:	beq	13770 <__assert_fail@plt+0x1b3c>
   13758:	cmp	r0, r4
   1375c:	beq	1376c <__assert_fail@plt+0x1b38>
   13760:	mov	r0, r4
   13764:	pop	{r4, r5, r6, r7, fp, lr}
   13768:	b	16860 <__assert_fail@plt+0x4c2c>
   1376c:	pop	{r4, r5, r6, r7, fp, pc}
   13770:	bl	19828 <lchmod@@Base+0x2edc>
   13774:	cmp	r0, #0
   13778:	moveq	r0, #0
   1377c:	bxeq	lr
   13780:	push	{r4, r5, fp, lr}
   13784:	add	fp, sp, #8
   13788:	sub	sp, sp, #24
   1378c:	str	r1, [sp]
   13790:	ldrd	r4, [r2, #96]	; 0x60
   13794:	str	r5, [sp, #12]
   13798:	str	r4, [sp, #8]
   1379c:	ldrd	r2, [r2]
   137a0:	str	r3, [sp, #20]
   137a4:	str	r2, [sp, #16]
   137a8:	mov	r1, sp
   137ac:	bl	15ab0 <__assert_fail@plt+0x3e7c>
   137b0:	cmp	r0, #0
   137b4:	movwne	r0, #1
   137b8:	sub	sp, fp, #8
   137bc:	pop	{r4, r5, fp, pc}
   137c0:	push	{r4, r5, r6, sl, fp, lr}
   137c4:	add	fp, sp, #16
   137c8:	mov	r4, r0
   137cc:	bl	11a6c <__errno_location@plt>
   137d0:	mov	r5, r0
   137d4:	ldr	r6, [r0]
   137d8:	mov	r0, r4
   137dc:	bl	11874 <free@plt>
   137e0:	str	r6, [r5]
   137e4:	pop	{r4, r5, r6, sl, fp, pc}
   137e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137ec:	add	fp, sp, #28
   137f0:	sub	sp, sp, #12
   137f4:	cmp	r1, #4096	; 0x1000
   137f8:	bcs	13814 <__assert_fail@plt+0x1be0>
   137fc:	mov	r6, r1
   13800:	mov	r7, r0
   13804:	and	r0, r1, #516	; 0x204
   13808:	cmp	r0, #516	; 0x204
   1380c:	tstne	r6, #18
   13810:	bne	13830 <__assert_fail@plt+0x1bfc>
   13814:	bl	11a6c <__errno_location@plt>
   13818:	mov	r1, #22
   1381c:	str	r1, [r0]
   13820:	mov	r4, #0
   13824:	mov	r0, r4
   13828:	sub	sp, fp, #28
   1382c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13830:	mov	sl, r2
   13834:	mov	r0, #1
   13838:	mov	r1, #96	; 0x60
   1383c:	bl	19e1c <lchmod@@Base+0x34d0>
   13840:	cmp	r0, #0
   13844:	beq	13820 <__assert_fail@plt+0x1bec>
   13848:	mov	r4, r0
   1384c:	mvn	r0, #99	; 0x63
   13850:	str	r0, [r4, #32]
   13854:	bic	r0, r6, #516	; 0x204
   13858:	tst	r6, #2
   1385c:	mov	r1, r6
   13860:	orrne	r1, r0, #4
   13864:	str	sl, [r4, #44]	; 0x2c
   13868:	str	r1, [r4, #48]	; 0x30
   1386c:	mov	r0, r7
   13870:	bl	13ae4 <__assert_fail@plt+0x1eb0>
   13874:	mov	r1, r0
   13878:	cmp	r0, #4096	; 0x1000
   1387c:	movls	r1, #4096	; 0x1000
   13880:	mov	r0, r4
   13884:	bl	13b28 <__assert_fail@plt+0x1ef4>
   13888:	cmp	r0, #0
   1388c:	beq	13ad8 <__assert_fail@plt+0x1ea4>
   13890:	ldr	r0, [r7]
   13894:	cmp	r0, #0
   13898:	beq	138c8 <__assert_fail@plt+0x1c94>
   1389c:	movw	r1, #46691	; 0xb663
   138a0:	movt	r1, #1
   138a4:	mov	r0, r4
   138a8:	mov	r2, #0
   138ac:	bl	13ba0 <__assert_fail@plt+0x1f6c>
   138b0:	cmp	r0, #0
   138b4:	beq	13ad0 <__assert_fail@plt+0x1e9c>
   138b8:	mov	r8, r0
   138bc:	mvn	r0, #0
   138c0:	str	r0, [r8, #48]	; 0x30
   138c4:	b	138cc <__assert_fail@plt+0x1c98>
   138c8:	mov	r8, #0
   138cc:	cmp	sl, #0
   138d0:	ldrbne	r0, [r4, #49]	; 0x31
   138d4:	ubfxne	r0, r0, #2, #1
   138d8:	moveq	r0, #1
   138dc:	ldr	r5, [r7]
   138e0:	cmp	r5, #0
   138e4:	beq	13a10 <__assert_fail@plt+0x1ddc>
   138e8:	and	r1, r6, #2048	; 0x800
   138ec:	str	r1, [sp, #8]
   138f0:	eor	r0, r0, #1
   138f4:	str	r0, [sp, #4]
   138f8:	mov	r9, #0
   138fc:	mov	r0, #0
   13900:	str	r0, [sp]
   13904:	mov	r6, #0
   13908:	mov	r0, r5
   1390c:	bl	11a30 <strlen@plt>
   13910:	mov	r2, r0
   13914:	ldr	r0, [sp, #8]
   13918:	cmp	r0, #0
   1391c:	bne	13954 <__assert_fail@plt+0x1d20>
   13920:	cmp	r2, #3
   13924:	bcc	13954 <__assert_fail@plt+0x1d20>
   13928:	add	r0, r5, r2
   1392c:	ldrb	r0, [r0, #-1]
   13930:	cmp	r0, #47	; 0x2f
   13934:	bne	13954 <__assert_fail@plt+0x1d20>
   13938:	sub	r0, r5, #2
   1393c:	ldrb	r1, [r0, r2]
   13940:	cmp	r1, #47	; 0x2f
   13944:	bne	13954 <__assert_fail@plt+0x1d20>
   13948:	sub	r2, r2, #1
   1394c:	cmp	r2, #1
   13950:	bhi	1393c <__assert_fail@plt+0x1d08>
   13954:	mov	r0, r4
   13958:	mov	r1, r5
   1395c:	bl	13ba0 <__assert_fail@plt+0x1f6c>
   13960:	cmp	r0, #0
   13964:	beq	13ac0 <__assert_fail@plt+0x1e8c>
   13968:	mov	r5, r0
   1396c:	str	r8, [r0, #4]
   13970:	mov	r0, #0
   13974:	str	r0, [r5, #48]	; 0x30
   13978:	add	r0, r5, #168	; 0xa8
   1397c:	str	r0, [r5, #24]
   13980:	clz	r0, r9
   13984:	lsr	r0, r0, #5
   13988:	ldr	r1, [sp, #4]
   1398c:	orrs	r0, r1, r0
   13990:	bne	139bc <__assert_fail@plt+0x1d88>
   13994:	mov	r0, #11
   13998:	strh	r0, [r5, #56]	; 0x38
   1399c:	mov	r0, r5
   139a0:	mov	r1, #1
   139a4:	bl	13c20 <__assert_fail@plt+0x1fec>
   139a8:	cmp	sl, #0
   139ac:	beq	139d8 <__assert_fail@plt+0x1da4>
   139b0:	str	r9, [r5, #8]
   139b4:	mov	r9, r5
   139b8:	b	139f4 <__assert_fail@plt+0x1dc0>
   139bc:	mov	r0, r4
   139c0:	mov	r1, r5
   139c4:	mov	r2, #0
   139c8:	bl	13c50 <__assert_fail@plt+0x201c>
   139cc:	strh	r0, [r5, #56]	; 0x38
   139d0:	cmp	sl, #0
   139d4:	bne	139b0 <__assert_fail@plt+0x1d7c>
   139d8:	mov	r0, #0
   139dc:	str	r0, [r5, #8]
   139e0:	cmp	r9, #0
   139e4:	beq	13a08 <__assert_fail@plt+0x1dd4>
   139e8:	ldr	r0, [sp]
   139ec:	str	r5, [r0, #8]
   139f0:	str	r5, [sp]
   139f4:	add	r6, r6, #1
   139f8:	ldr	r5, [r7, #4]!
   139fc:	cmp	r5, #0
   13a00:	bne	13908 <__assert_fail@plt+0x1cd4>
   13a04:	b	13a18 <__assert_fail@plt+0x1de4>
   13a08:	str	r5, [sp]
   13a0c:	b	139b4 <__assert_fail@plt+0x1d80>
   13a10:	mov	r9, #0
   13a14:	b	13a3c <__assert_fail@plt+0x1e08>
   13a18:	cmp	sl, #0
   13a1c:	beq	13a3c <__assert_fail@plt+0x1e08>
   13a20:	cmp	r6, #2
   13a24:	bcc	13a3c <__assert_fail@plt+0x1e08>
   13a28:	mov	r0, r4
   13a2c:	mov	r1, r9
   13a30:	mov	r2, r6
   13a34:	bl	13db8 <__assert_fail@plt+0x2184>
   13a38:	mov	r9, r0
   13a3c:	movw	r1, #46691	; 0xb663
   13a40:	movt	r1, #1
   13a44:	mov	r0, r4
   13a48:	mov	r2, #0
   13a4c:	bl	13ba0 <__assert_fail@plt+0x1f6c>
   13a50:	str	r0, [r4]
   13a54:	cmp	r0, #0
   13a58:	beq	13ac0 <__assert_fail@plt+0x1e8c>
   13a5c:	mov	r1, #9
   13a60:	strh	r1, [r0, #56]	; 0x38
   13a64:	str	r9, [r0, #8]
   13a68:	mov	r1, #1
   13a6c:	str	r1, [r0, #48]	; 0x30
   13a70:	mov	r0, r4
   13a74:	bl	13e98 <__assert_fail@plt+0x2264>
   13a78:	cmp	r0, #0
   13a7c:	beq	13ac0 <__assert_fail@plt+0x1e8c>
   13a80:	ldrh	r0, [r4, #48]	; 0x30
   13a84:	tst	r0, #516	; 0x204
   13a88:	bne	13ab0 <__assert_fail@plt+0x1e7c>
   13a8c:	movw	r1, #46883	; 0xb723
   13a90:	movt	r1, #1
   13a94:	mov	r0, r4
   13a98:	bl	13f24 <__assert_fail@plt+0x22f0>
   13a9c:	str	r0, [r4, #28]
   13aa0:	cmn	r0, #1
   13aa4:	ldrle	r0, [r4, #48]	; 0x30
   13aa8:	orrle	r0, r0, #4
   13aac:	strle	r0, [r4, #48]	; 0x30
   13ab0:	add	r0, r4, #60	; 0x3c
   13ab4:	mvn	r1, #0
   13ab8:	bl	16880 <__assert_fail@plt+0x4c4c>
   13abc:	b	13824 <__assert_fail@plt+0x1bf0>
   13ac0:	mov	r0, r9
   13ac4:	bl	13f54 <__assert_fail@plt+0x2320>
   13ac8:	mov	r0, r8
   13acc:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13ad0:	ldr	r0, [r4, #24]
   13ad4:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13ad8:	mov	r0, r4
   13adc:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13ae0:	b	13820 <__assert_fail@plt+0x1bec>
   13ae4:	mov	r1, r0
   13ae8:	ldr	r0, [r0]
   13aec:	cmp	r0, #0
   13af0:	moveq	r0, #1
   13af4:	bxeq	lr
   13af8:	push	{r4, r5, fp, lr}
   13afc:	add	fp, sp, #8
   13b00:	add	r5, r1, #4
   13b04:	mov	r4, #0
   13b08:	bl	11a30 <strlen@plt>
   13b0c:	cmp	r0, r4
   13b10:	movhi	r4, r0
   13b14:	ldr	r0, [r5], #4
   13b18:	cmp	r0, #0
   13b1c:	bne	13b08 <__assert_fail@plt+0x1ed4>
   13b20:	add	r0, r4, #1
   13b24:	pop	{r4, r5, fp, pc}
   13b28:	push	{r4, r5, fp, lr}
   13b2c:	add	fp, sp, #8
   13b30:	mov	r4, r0
   13b34:	ldr	r0, [r0, #36]	; 0x24
   13b38:	add	r1, r1, #256	; 0x100
   13b3c:	adds	r1, r1, r0
   13b40:	bcc	13b68 <__assert_fail@plt+0x1f34>
   13b44:	ldr	r0, [r4, #24]
   13b48:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13b4c:	mov	r5, #0
   13b50:	str	r5, [r4, #24]
   13b54:	bl	11a6c <__errno_location@plt>
   13b58:	mov	r1, #36	; 0x24
   13b5c:	str	r1, [r0]
   13b60:	mov	r0, r5
   13b64:	pop	{r4, r5, fp, pc}
   13b68:	str	r1, [r4, #36]	; 0x24
   13b6c:	ldr	r0, [r4, #24]
   13b70:	bl	19ea0 <lchmod@@Base+0x3554>
   13b74:	cmp	r0, #0
   13b78:	strne	r0, [r4, #24]
   13b7c:	movne	r5, #1
   13b80:	movne	r0, r5
   13b84:	popne	{r4, r5, fp, pc}
   13b88:	ldr	r0, [r4, #24]
   13b8c:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13b90:	mov	r5, #0
   13b94:	str	r5, [r4, #24]
   13b98:	mov	r0, r5
   13b9c:	pop	{r4, r5, fp, pc}
   13ba0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ba4:	add	fp, sp, #24
   13ba8:	mov	r6, r2
   13bac:	mov	r8, r1
   13bb0:	mov	r5, r0
   13bb4:	add	r0, r2, #176	; 0xb0
   13bb8:	bic	r0, r0, #7
   13bbc:	bl	19e70 <lchmod@@Base+0x3524>
   13bc0:	cmp	r0, #0
   13bc4:	moveq	r4, #0
   13bc8:	moveq	r0, r4
   13bcc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bd0:	mov	r4, r0
   13bd4:	add	r7, r0, #168	; 0xa8
   13bd8:	mov	r0, r7
   13bdc:	mov	r1, r8
   13be0:	mov	r2, r6
   13be4:	bl	11898 <memcpy@plt>
   13be8:	mov	r0, #0
   13bec:	strb	r0, [r7, r6]
   13bf0:	str	r6, [r4, #52]	; 0x34
   13bf4:	str	r5, [r4, #44]	; 0x2c
   13bf8:	ldr	r1, [r5, #24]
   13bfc:	mov	r2, #196608	; 0x30000
   13c00:	str	r2, [r4, #58]	; 0x3a
   13c04:	str	r0, [r4, #12]
   13c08:	str	r0, [r4, #16]
   13c0c:	str	r0, [r4, #20]
   13c10:	str	r1, [r4, #28]
   13c14:	str	r0, [r4, #32]
   13c18:	mov	r0, r4
   13c1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c20:	ldrh	r2, [r0, #56]	; 0x38
   13c24:	cmp	r2, #11
   13c28:	bne	13c44 <__assert_fail@plt+0x2010>
   13c2c:	mov	r3, #0
   13c30:	mov	r2, #1
   13c34:	cmp	r1, #0
   13c38:	movwne	r2, #2
   13c3c:	strd	r2, [r0, #112]	; 0x70
   13c40:	bx	lr
   13c44:	push	{fp, lr}
   13c48:	mov	fp, sp
   13c4c:	bl	11bd4 <abort@plt>
   13c50:	push	{r4, r5, r6, sl, fp, lr}
   13c54:	add	fp, sp, #16
   13c58:	mov	r4, r1
   13c5c:	ldr	r1, [r1, #48]	; 0x30
   13c60:	cmp	r1, #0
   13c64:	ldrbeq	r1, [r0, #48]	; 0x30
   13c68:	andeq	r1, r1, #1
   13c6c:	orreq	r2, r1, r2
   13c70:	add	r5, r4, #64	; 0x40
   13c74:	cmp	r2, #0
   13c78:	ldreq	r1, [r0, #48]	; 0x30
   13c7c:	andseq	r1, r1, #2
   13c80:	beq	13cd0 <__assert_fail@plt+0x209c>
   13c84:	ldr	r0, [r4, #24]
   13c88:	mov	r1, r5
   13c8c:	bl	1add4 <lchmod@@Base+0x4488>
   13c90:	cmp	r0, #0
   13c94:	beq	13d44 <__assert_fail@plt+0x2110>
   13c98:	bl	11a6c <__errno_location@plt>
   13c9c:	mov	r6, r0
   13ca0:	ldr	r0, [r0]
   13ca4:	cmp	r0, #2
   13ca8:	bne	13cf4 <__assert_fail@plt+0x20c0>
   13cac:	ldr	r0, [r4, #24]
   13cb0:	mov	r1, r5
   13cb4:	bl	1adf4 <lchmod@@Base+0x44a8>
   13cb8:	cmp	r0, #0
   13cbc:	bne	13cf4 <__assert_fail@plt+0x20c0>
   13cc0:	mov	r0, #0
   13cc4:	str	r0, [r6]
   13cc8:	mov	r0, #13
   13ccc:	pop	{r4, r5, r6, sl, fp, pc}
   13cd0:	ldr	r1, [r4, #24]
   13cd4:	ldr	r0, [r0, #32]
   13cd8:	mov	r2, r5
   13cdc:	mov	r3, #256	; 0x100
   13ce0:	bl	1ae04 <lchmod@@Base+0x44b8>
   13ce4:	cmp	r0, #0
   13ce8:	beq	13d44 <__assert_fail@plt+0x2110>
   13cec:	bl	11a6c <__errno_location@plt>
   13cf0:	mov	r6, r0
   13cf4:	ldr	r0, [r6]
   13cf8:	str	r0, [r4, #32]
   13cfc:	mov	r0, #0
   13d00:	vmov.i32	q8, #0	; 0x00000000
   13d04:	str	r0, [r5, #96]	; 0x60
   13d08:	add	r1, r5, #80	; 0x50
   13d0c:	vst1.64	{d16-d17}, [r1]
   13d10:	add	r1, r5, #64	; 0x40
   13d14:	vst1.64	{d16-d17}, [r1]
   13d18:	add	r1, r5, #48	; 0x30
   13d1c:	vst1.64	{d16-d17}, [r1]
   13d20:	add	r1, r5, #32
   13d24:	vst1.64	{d16-d17}, [r1]
   13d28:	add	r1, r5, #16
   13d2c:	vst1.64	{d16-d17}, [r1]
   13d30:	mov	r1, #100	; 0x64
   13d34:	vst1.64	{d16-d17}, [r5], r1
   13d38:	str	r0, [r5]
   13d3c:	mov	r0, #10
   13d40:	pop	{r4, r5, r6, sl, fp, pc}
   13d44:	ldr	r0, [r4, #80]	; 0x50
   13d48:	and	r0, r0, #61440	; 0xf000
   13d4c:	cmp	r0, #40960	; 0xa000
   13d50:	moveq	r0, #12
   13d54:	popeq	{r4, r5, r6, sl, fp, pc}
   13d58:	cmp	r0, #32768	; 0x8000
   13d5c:	moveq	r0, #8
   13d60:	popeq	{r4, r5, r6, sl, fp, pc}
   13d64:	cmp	r0, #16384	; 0x4000
   13d68:	bne	13d9c <__assert_fail@plt+0x2168>
   13d6c:	ldrb	r1, [r4, #168]	; 0xa8
   13d70:	mov	r0, #1
   13d74:	cmp	r1, #46	; 0x2e
   13d78:	popne	{r4, r5, r6, sl, fp, pc}
   13d7c:	ldrb	r1, [r4, #169]	; 0xa9
   13d80:	cmp	r1, #0
   13d84:	beq	13da4 <__assert_fail@plt+0x2170>
   13d88:	cmp	r1, #46	; 0x2e
   13d8c:	ldrbeq	r1, [r4, #170]	; 0xaa
   13d90:	cmpeq	r1, #0
   13d94:	beq	13da4 <__assert_fail@plt+0x2170>
   13d98:	pop	{r4, r5, r6, sl, fp, pc}
   13d9c:	mov	r0, #3
   13da0:	pop	{r4, r5, r6, sl, fp, pc}
   13da4:	ldr	r1, [r4, #48]	; 0x30
   13da8:	mov	r0, #5
   13dac:	cmp	r1, #0
   13db0:	movweq	r0, #1
   13db4:	pop	{r4, r5, r6, sl, fp, pc}
   13db8:	push	{r4, r5, r6, r7, fp, lr}
   13dbc:	add	fp, sp, #16
   13dc0:	mov	r6, r2
   13dc4:	mov	r4, r1
   13dc8:	mov	r5, r0
   13dcc:	ldr	r7, [r0, #44]	; 0x2c
   13dd0:	ldr	r0, [r0, #40]	; 0x28
   13dd4:	cmp	r0, r2
   13dd8:	bcs	13e04 <__assert_fail@plt+0x21d0>
   13ddc:	add	r1, r6, #40	; 0x28
   13de0:	str	r1, [r5, #40]	; 0x28
   13de4:	cmn	r1, #-1073741823	; 0xc0000001
   13de8:	bhi	13e7c <__assert_fail@plt+0x2248>
   13dec:	ldr	r0, [r5, #8]
   13df0:	lsl	r1, r1, #2
   13df4:	bl	19ea0 <lchmod@@Base+0x3554>
   13df8:	cmp	r0, #0
   13dfc:	beq	13e7c <__assert_fail@plt+0x2248>
   13e00:	str	r0, [r5, #8]
   13e04:	cmp	r4, #0
   13e08:	beq	13e20 <__assert_fail@plt+0x21ec>
   13e0c:	ldr	r0, [r5, #8]
   13e10:	str	r4, [r0], #4
   13e14:	ldr	r4, [r4, #8]
   13e18:	cmp	r4, #0
   13e1c:	bne	13e10 <__assert_fail@plt+0x21dc>
   13e20:	ldr	r0, [r5, #8]
   13e24:	mov	r1, r6
   13e28:	mov	r2, #4
   13e2c:	mov	r3, r7
   13e30:	bl	11b5c <qsort@plt>
   13e34:	subs	r1, r6, #1
   13e38:	ldr	r0, [r5, #8]
   13e3c:	ldr	r4, [r0]
   13e40:	beq	13e68 <__assert_fail@plt+0x2234>
   13e44:	add	r2, r0, #4
   13e48:	rsb	r3, r6, #1
   13e4c:	ldr	r7, [r2, #-4]
   13e50:	ldr	r6, [r2]
   13e54:	str	r6, [r7, #8]
   13e58:	add	r2, r2, #4
   13e5c:	adds	r3, r3, #1
   13e60:	bne	13e4c <__assert_fail@plt+0x2218>
   13e64:	add	r0, r0, r1, lsl #2
   13e68:	ldr	r0, [r0]
   13e6c:	mov	r1, #0
   13e70:	str	r1, [r0, #8]
   13e74:	mov	r0, r4
   13e78:	pop	{r4, r5, r6, r7, fp, pc}
   13e7c:	ldr	r0, [r5, #8]
   13e80:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13e84:	mov	r0, #0
   13e88:	str	r0, [r5, #40]	; 0x28
   13e8c:	str	r0, [r5, #8]
   13e90:	mov	r0, r4
   13e94:	pop	{r4, r5, r6, r7, fp, pc}
   13e98:	push	{r4, r5, fp, lr}
   13e9c:	add	fp, sp, #8
   13ea0:	sub	sp, sp, #8
   13ea4:	mov	r4, r0
   13ea8:	ldrh	r0, [r0, #48]	; 0x30
   13eac:	movw	r1, #258	; 0x102
   13eb0:	tst	r0, r1
   13eb4:	beq	13ef4 <__assert_fail@plt+0x22c0>
   13eb8:	movw	r0, #14272	; 0x37c0
   13ebc:	movt	r0, #1
   13ec0:	str	r0, [sp]
   13ec4:	mov	r5, #0
   13ec8:	movw	r2, #21896	; 0x5588
   13ecc:	movt	r2, #1
   13ed0:	movw	r3, #21928	; 0x55a8
   13ed4:	movt	r3, #1
   13ed8:	mov	r0, #31
   13edc:	mov	r1, #0
   13ee0:	bl	15d38 <__assert_fail@plt+0x4104>
   13ee4:	str	r0, [r4, #56]	; 0x38
   13ee8:	cmp	r0, #0
   13eec:	movne	r5, #1
   13ef0:	b	13f18 <__assert_fail@plt+0x22e4>
   13ef4:	mov	r0, #32
   13ef8:	bl	19e70 <lchmod@@Base+0x3524>
   13efc:	str	r0, [r4, #56]	; 0x38
   13f00:	cmp	r0, #0
   13f04:	beq	13f14 <__assert_fail@plt+0x22e0>
   13f08:	bl	1a478 <lchmod@@Base+0x3b2c>
   13f0c:	mov	r5, #1
   13f10:	b	13f18 <__assert_fail@plt+0x22e4>
   13f14:	mov	r5, #0
   13f18:	mov	r0, r5
   13f1c:	sub	sp, fp, #8
   13f20:	pop	{r4, r5, fp, pc}
   13f24:	ldr	r3, [r0, #48]	; 0x30
   13f28:	mov	r2, #32768	; 0x8000
   13f2c:	and	r2, r2, r3, lsl #11
   13f30:	orr	r2, r2, #18688	; 0x4900
   13f34:	orr	r2, r2, #524288	; 0x80000
   13f38:	tst	r3, #512	; 0x200
   13f3c:	bne	13f4c <__assert_fail@plt+0x2318>
   13f40:	mov	r0, r1
   13f44:	mov	r1, r2
   13f48:	b	1a818 <lchmod@@Base+0x3ecc>
   13f4c:	ldr	r0, [r0, #32]
   13f50:	b	1702c <lchmod@@Base+0x6e0>
   13f54:	push	{r4, r6, r7, sl, fp, lr}
   13f58:	add	fp, sp, #16
   13f5c:	cmp	r0, #0
   13f60:	popeq	{r4, r6, r7, sl, fp, pc}
   13f64:	mov	r4, r0
   13f68:	ldrd	r6, [r4, #8]
   13f6c:	cmp	r7, #0
   13f70:	beq	13f7c <__assert_fail@plt+0x2348>
   13f74:	mov	r0, r7
   13f78:	bl	11c10 <closedir@plt>
   13f7c:	mov	r0, r4
   13f80:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13f84:	cmp	r6, #0
   13f88:	mov	r4, r6
   13f8c:	bne	13f68 <__assert_fail@plt+0x2334>
   13f90:	pop	{r4, r6, r7, sl, fp, pc}
   13f94:	push	{r4, r5, fp, lr}
   13f98:	add	fp, sp, #8
   13f9c:	mov	r4, r0
   13fa0:	ldr	r0, [r0]
   13fa4:	cmp	r0, #0
   13fa8:	beq	13fe8 <__assert_fail@plt+0x23b4>
   13fac:	ldr	r1, [r0, #48]	; 0x30
   13fb0:	cmp	r1, #0
   13fb4:	blt	13fdc <__assert_fail@plt+0x23a8>
   13fb8:	ldr	r5, [r0, #8]
   13fbc:	cmp	r5, #0
   13fc0:	ldreq	r5, [r0, #4]
   13fc4:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13fc8:	ldr	r0, [r5, #48]	; 0x30
   13fcc:	cmn	r0, #1
   13fd0:	mov	r0, r5
   13fd4:	bgt	13fb8 <__assert_fail@plt+0x2384>
   13fd8:	b	13fe0 <__assert_fail@plt+0x23ac>
   13fdc:	mov	r5, r0
   13fe0:	mov	r0, r5
   13fe4:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13fe8:	ldr	r0, [r4, #4]
   13fec:	cmp	r0, #0
   13ff0:	blne	13f54 <__assert_fail@plt+0x2320>
   13ff4:	ldr	r0, [r4, #8]
   13ff8:	bl	137c0 <__assert_fail@plt+0x1b8c>
   13ffc:	ldr	r0, [r4, #24]
   14000:	bl	137c0 <__assert_fail@plt+0x1b8c>
   14004:	ldr	r0, [r4, #48]	; 0x30
   14008:	tst	r0, #512	; 0x200
   1400c:	bne	14038 <__assert_fail@plt+0x2404>
   14010:	mov	r5, #0
   14014:	tst	r0, #4
   14018:	bne	1407c <__assert_fail@plt+0x2448>
   1401c:	ldr	r0, [r4, #28]
   14020:	bl	11b50 <fchdir@plt>
   14024:	cmp	r0, #0
   14028:	beq	14058 <__assert_fail@plt+0x2424>
   1402c:	bl	11a6c <__errno_location@plt>
   14030:	ldr	r5, [r0]
   14034:	b	1405c <__assert_fail@plt+0x2428>
   14038:	ldr	r0, [r4, #32]
   1403c:	mov	r5, #0
   14040:	cmp	r0, #0
   14044:	blt	1407c <__assert_fail@plt+0x2448>
   14048:	bl	11be0 <close@plt>
   1404c:	cmp	r0, #0
   14050:	bne	14074 <__assert_fail@plt+0x2440>
   14054:	b	1407c <__assert_fail@plt+0x2448>
   14058:	mov	r5, #0
   1405c:	ldr	r0, [r4, #28]
   14060:	bl	11be0 <close@plt>
   14064:	cmp	r5, #0
   14068:	bne	1407c <__assert_fail@plt+0x2448>
   1406c:	cmp	r0, #0
   14070:	beq	1407c <__assert_fail@plt+0x2448>
   14074:	bl	11a6c <__errno_location@plt>
   14078:	ldr	r5, [r0]
   1407c:	add	r0, r4, #60	; 0x3c
   14080:	bl	140c0 <__assert_fail@plt+0x248c>
   14084:	ldr	r0, [r4, #52]	; 0x34
   14088:	cmp	r0, #0
   1408c:	beq	14094 <__assert_fail@plt+0x2460>
   14090:	bl	1600c <__assert_fail@plt+0x43d8>
   14094:	mov	r0, r4
   14098:	bl	140f8 <__assert_fail@plt+0x24c4>
   1409c:	mov	r0, r4
   140a0:	bl	137c0 <__assert_fail@plt+0x1b8c>
   140a4:	cmp	r5, #0
   140a8:	moveq	r0, #0
   140ac:	popeq	{r4, r5, fp, pc}
   140b0:	bl	11a6c <__errno_location@plt>
   140b4:	str	r5, [r0]
   140b8:	mvn	r0, #0
   140bc:	pop	{r4, r5, fp, pc}
   140c0:	push	{r4, sl, fp, lr}
   140c4:	add	fp, sp, #8
   140c8:	mov	r4, r0
   140cc:	b	140d4 <__assert_fail@plt+0x24a0>
   140d0:	mov	r0, r4
   140d4:	bl	168ac <__assert_fail@plt+0x4c78>
   140d8:	cmp	r0, #0
   140dc:	popne	{r4, sl, fp, pc}
   140e0:	mov	r0, r4
   140e4:	bl	168f8 <__assert_fail@plt+0x4cc4>
   140e8:	cmp	r0, #0
   140ec:	blt	140d0 <__assert_fail@plt+0x249c>
   140f0:	bl	11be0 <close@plt>
   140f4:	b	140d0 <__assert_fail@plt+0x249c>
   140f8:	ldrh	r1, [r0, #48]	; 0x30
   140fc:	movw	r2, #258	; 0x102
   14100:	tst	r1, r2
   14104:	beq	14118 <__assert_fail@plt+0x24e4>
   14108:	ldr	r0, [r0, #56]	; 0x38
   1410c:	cmp	r0, #0
   14110:	bxeq	lr
   14114:	b	1600c <__assert_fail@plt+0x43d8>
   14118:	ldr	r0, [r0, #56]	; 0x38
   1411c:	b	137c0 <__assert_fail@plt+0x1b8c>
   14120:	push	{r4, r5, r6, r7, fp, lr}
   14124:	add	fp, sp, #16
   14128:	ldr	r6, [r0]
   1412c:	mov	r5, #0
   14130:	cmp	r6, #0
   14134:	beq	146cc <__assert_fail@plt+0x2a98>
   14138:	mov	r4, r0
   1413c:	ldr	r1, [r0, #48]	; 0x30
   14140:	tst	r1, #8192	; 0x2000
   14144:	bne	146cc <__assert_fail@plt+0x2a98>
   14148:	ldrh	r0, [r6, #60]	; 0x3c
   1414c:	mov	r2, #3
   14150:	strh	r2, [r6, #60]	; 0x3c
   14154:	cmp	r0, #2
   14158:	beq	14180 <__assert_fail@plt+0x254c>
   1415c:	cmp	r0, #1
   14160:	bne	141ec <__assert_fail@plt+0x25b8>
   14164:	mov	r0, r4
   14168:	mov	r1, r6
   1416c:	mov	r2, #0
   14170:	bl	13c50 <__assert_fail@plt+0x201c>
   14174:	strh	r0, [r6, #56]	; 0x38
   14178:	mov	r0, r6
   1417c:	pop	{r4, r5, r6, r7, fp, pc}
   14180:	ldrh	r2, [r6, #56]	; 0x38
   14184:	movw	r3, #65534	; 0xfffe
   14188:	and	r2, r2, r3
   1418c:	cmp	r2, #12
   14190:	bne	141ec <__assert_fail@plt+0x25b8>
   14194:	mov	r0, r4
   14198:	mov	r1, r6
   1419c:	mov	r2, #1
   141a0:	bl	13c50 <__assert_fail@plt+0x201c>
   141a4:	strh	r0, [r6, #56]	; 0x38
   141a8:	cmp	r0, #1
   141ac:	bne	142b4 <__assert_fail@plt+0x2680>
   141b0:	ldrb	r0, [r4, #48]	; 0x30
   141b4:	tst	r0, #4
   141b8:	bne	142b4 <__assert_fail@plt+0x2680>
   141bc:	movw	r1, #46883	; 0xb723
   141c0:	movt	r1, #1
   141c4:	mov	r0, r4
   141c8:	bl	13f24 <__assert_fail@plt+0x22f0>
   141cc:	str	r0, [r6, #36]	; 0x24
   141d0:	cmn	r0, #1
   141d4:	ble	145ac <__assert_fail@plt+0x2978>
   141d8:	ldrh	r0, [r6, #58]	; 0x3a
   141dc:	orr	r0, r0, #2
   141e0:	strh	r0, [r6, #58]	; 0x3a
   141e4:	mov	r5, r6
   141e8:	b	14454 <__assert_fail@plt+0x2820>
   141ec:	ldrh	r2, [r6, #56]	; 0x38
   141f0:	cmp	r2, #1
   141f4:	bne	14248 <__assert_fail@plt+0x2614>
   141f8:	cmp	r0, #4
   141fc:	bne	142bc <__assert_fail@plt+0x2688>
   14200:	ldrb	r0, [r6, #58]	; 0x3a
   14204:	tst	r0, #2
   14208:	beq	14214 <__assert_fail@plt+0x25e0>
   1420c:	ldr	r0, [r6, #36]	; 0x24
   14210:	bl	11be0 <close@plt>
   14214:	ldr	r0, [r4, #4]
   14218:	cmp	r0, #0
   1421c:	beq	1422c <__assert_fail@plt+0x25f8>
   14220:	bl	13f54 <__assert_fail@plt+0x2320>
   14224:	mov	r0, #0
   14228:	str	r0, [r4, #4]
   1422c:	mov	r0, #6
   14230:	strh	r0, [r6, #56]	; 0x38
   14234:	mov	r0, r4
   14238:	mov	r1, r6
   1423c:	bl	146d8 <__assert_fail@plt+0x2aa4>
   14240:	mov	r0, r6
   14244:	pop	{r4, r5, r6, r7, fp, pc}
   14248:	ldr	r5, [r6, #8]
   1424c:	cmp	r5, #0
   14250:	beq	14354 <__assert_fail@plt+0x2720>
   14254:	str	r5, [r4]
   14258:	mov	r0, r6
   1425c:	bl	137c0 <__assert_fail@plt+0x1b8c>
   14260:	ldr	r0, [r5, #48]	; 0x30
   14264:	cmp	r0, #0
   14268:	beq	143a0 <__assert_fail@plt+0x276c>
   1426c:	ldrh	r0, [r5, #60]	; 0x3c
   14270:	cmp	r0, #4
   14274:	mov	r6, r5
   14278:	beq	14248 <__assert_fail@plt+0x2614>
   1427c:	cmp	r0, #2
   14280:	bne	14418 <__assert_fail@plt+0x27e4>
   14284:	mov	r0, r4
   14288:	mov	r1, r5
   1428c:	mov	r2, #1
   14290:	bl	13c50 <__assert_fail@plt+0x201c>
   14294:	strh	r0, [r5, #56]	; 0x38
   14298:	cmp	r0, #1
   1429c:	ldrbeq	r0, [r4, #48]	; 0x30
   142a0:	tsteq	r0, #4
   142a4:	beq	14638 <__assert_fail@plt+0x2a04>
   142a8:	mov	r0, #3
   142ac:	strh	r0, [r5, #60]	; 0x3c
   142b0:	b	14418 <__assert_fail@plt+0x27e4>
   142b4:	mov	r5, r6
   142b8:	b	14454 <__assert_fail@plt+0x2820>
   142bc:	tst	r1, #64	; 0x40
   142c0:	beq	142e4 <__assert_fail@plt+0x26b0>
   142c4:	ldr	r0, [r4, #16]
   142c8:	ldr	r3, [r4, #20]
   142cc:	ldr	r2, [r6, #64]	; 0x40
   142d0:	ldr	r5, [r6, #68]	; 0x44
   142d4:	eor	r3, r5, r3
   142d8:	eor	r0, r2, r0
   142dc:	orrs	r0, r0, r3
   142e0:	bne	14200 <__assert_fail@plt+0x25cc>
   142e4:	ldr	r0, [r4, #4]
   142e8:	cmp	r0, #0
   142ec:	beq	143f4 <__assert_fail@plt+0x27c0>
   142f0:	tst	r1, #4096	; 0x1000
   142f4:	bne	143e0 <__assert_fail@plt+0x27ac>
   142f8:	ldr	r3, [r6, #24]
   142fc:	mov	r0, r4
   14300:	mov	r1, r6
   14304:	mvn	r2, #0
   14308:	bl	147a8 <__assert_fail@plt+0x2b74>
   1430c:	cmp	r0, #0
   14310:	beq	1440c <__assert_fail@plt+0x27d8>
   14314:	bl	11a6c <__errno_location@plt>
   14318:	ldr	r0, [r0]
   1431c:	str	r0, [r6, #32]
   14320:	ldrh	r0, [r6, #58]	; 0x3a
   14324:	orr	r0, r0, #1
   14328:	strh	r0, [r6, #58]	; 0x3a
   1432c:	ldr	r0, [r4, #4]
   14330:	cmp	r0, #0
   14334:	beq	1440c <__assert_fail@plt+0x27d8>
   14338:	ldmib	r0, {r1, r2}
   1433c:	ldr	r1, [r1, #24]
   14340:	str	r1, [r0, #24]
   14344:	cmp	r2, #0
   14348:	mov	r0, r2
   1434c:	bne	14338 <__assert_fail@plt+0x2704>
   14350:	b	1440c <__assert_fail@plt+0x27d8>
   14354:	ldr	r0, [r6, #4]
   14358:	ldr	r1, [r0, #12]
   1435c:	cmp	r1, #0
   14360:	beq	14510 <__assert_fail@plt+0x28dc>
   14364:	str	r0, [r4]
   14368:	ldr	r1, [r4, #24]
   1436c:	ldr	r0, [r0, #40]	; 0x28
   14370:	mov	r5, #0
   14374:	strb	r5, [r1, r0]
   14378:	mov	r0, r4
   1437c:	mov	r1, #3
   14380:	bl	14988 <__assert_fail@plt+0x2d54>
   14384:	cmp	r0, #0
   14388:	beq	14504 <__assert_fail@plt+0x28d0>
   1438c:	mov	r7, r0
   14390:	mov	r0, r6
   14394:	bl	137c0 <__assert_fail@plt+0x1b8c>
   14398:	mov	r5, r7
   1439c:	b	14418 <__assert_fail@plt+0x27e4>
   143a0:	mov	r0, r4
   143a4:	bl	151f4 <__assert_fail@plt+0x35c0>
   143a8:	cmp	r0, #0
   143ac:	beq	143c0 <__assert_fail@plt+0x278c>
   143b0:	ldr	r0, [r4, #48]	; 0x30
   143b4:	orr	r0, r0, #8192	; 0x2000
   143b8:	str	r0, [r4, #48]	; 0x30
   143bc:	b	144cc <__assert_fail@plt+0x2898>
   143c0:	mov	r0, r4
   143c4:	bl	140f8 <__assert_fail@plt+0x24c4>
   143c8:	mov	r0, r4
   143cc:	mov	r1, r5
   143d0:	bl	15250 <__assert_fail@plt+0x361c>
   143d4:	mov	r0, r4
   143d8:	bl	13e98 <__assert_fail@plt+0x2264>
   143dc:	b	14454 <__assert_fail@plt+0x2820>
   143e0:	bic	r1, r1, #4096	; 0x1000
   143e4:	str	r1, [r4, #48]	; 0x30
   143e8:	bl	13f54 <__assert_fail@plt+0x2320>
   143ec:	mov	r0, #0
   143f0:	str	r0, [r4, #4]
   143f4:	mov	r0, r4
   143f8:	mov	r1, #3
   143fc:	bl	14988 <__assert_fail@plt+0x2d54>
   14400:	str	r0, [r4, #4]
   14404:	cmp	r0, #0
   14408:	beq	144d8 <__assert_fail@plt+0x28a4>
   1440c:	ldr	r5, [r4, #4]
   14410:	mov	r0, #0
   14414:	str	r0, [r4, #4]
   14418:	ldr	r0, [r5, #4]
   1441c:	ldr	r1, [r0, #28]
   14420:	ldr	r0, [r0, #40]	; 0x28
   14424:	sub	r2, r0, #1
   14428:	ldrb	r1, [r1, r2]
   1442c:	cmp	r1, #47	; 0x2f
   14430:	moveq	r0, r2
   14434:	ldr	r1, [r4, #24]
   14438:	mov	r2, #47	; 0x2f
   1443c:	strb	r2, [r1, r0]!
   14440:	add	r0, r1, #1
   14444:	add	r1, r5, #168	; 0xa8
   14448:	ldr	r2, [r5, #52]	; 0x34
   1444c:	add	r2, r2, #1
   14450:	bl	11868 <memmove@plt>
   14454:	str	r5, [r4]
   14458:	ldrh	r0, [r5, #56]	; 0x38
   1445c:	cmp	r0, #11
   14460:	bne	14494 <__assert_fail@plt+0x2860>
   14464:	ldrd	r0, [r5, #112]	; 0x70
   14468:	eor	r2, r0, #1
   1446c:	orrs	r2, r2, r1
   14470:	beq	146cc <__assert_fail@plt+0x2a98>
   14474:	eor	r0, r0, #2
   14478:	orrs	r0, r0, r1
   1447c:	bne	146d4 <__assert_fail@plt+0x2aa0>
   14480:	mov	r0, r4
   14484:	mov	r1, r5
   14488:	mov	r2, #0
   1448c:	bl	13c50 <__assert_fail@plt+0x201c>
   14490:	strh	r0, [r5, #56]	; 0x38
   14494:	cmp	r0, #1
   14498:	bne	146cc <__assert_fail@plt+0x2a98>
   1449c:	ldr	r0, [r5, #48]	; 0x30
   144a0:	cmp	r0, #0
   144a4:	ldrdeq	r0, [r5, #64]	; 0x40
   144a8:	strdeq	r0, [r4, #16]
   144ac:	mov	r0, r4
   144b0:	mov	r1, r5
   144b4:	bl	152d8 <__assert_fail@plt+0x36a4>
   144b8:	cmp	r0, #0
   144bc:	bne	146cc <__assert_fail@plt+0x2a98>
   144c0:	bl	11a6c <__errno_location@plt>
   144c4:	mov	r1, #12
   144c8:	str	r1, [r0]
   144cc:	mov	r5, #0
   144d0:	mov	r0, r5
   144d4:	pop	{r4, r5, r6, r7, fp, pc}
   144d8:	ldrb	r0, [r4, #49]	; 0x31
   144dc:	tst	r0, #32
   144e0:	mov	r5, #0
   144e4:	bne	146cc <__assert_fail@plt+0x2a98>
   144e8:	ldr	r0, [r6, #32]
   144ec:	cmp	r0, #0
   144f0:	ldrhne	r0, [r6, #56]	; 0x38
   144f4:	cmpne	r0, #4
   144f8:	beq	14234 <__assert_fail@plt+0x2600>
   144fc:	mov	r0, #7
   14500:	b	14230 <__assert_fail@plt+0x25fc>
   14504:	ldrb	r0, [r4, #49]	; 0x31
   14508:	tst	r0, #32
   1450c:	bne	146cc <__assert_fail@plt+0x2a98>
   14510:	ldr	r5, [r6, #4]
   14514:	str	r5, [r4]
   14518:	mov	r0, r6
   1451c:	bl	137c0 <__assert_fail@plt+0x1b8c>
   14520:	ldr	r0, [r5, #48]	; 0x30
   14524:	cmn	r0, #1
   14528:	beq	1458c <__assert_fail@plt+0x2958>
   1452c:	ldrh	r0, [r5, #56]	; 0x38
   14530:	cmp	r0, #11
   14534:	beq	146d4 <__assert_fail@plt+0x2aa0>
   14538:	ldr	r0, [r5, #40]	; 0x28
   1453c:	ldr	r1, [r4, #24]
   14540:	mov	r2, #0
   14544:	strb	r2, [r1, r0]
   14548:	ldr	r0, [r5, #48]	; 0x30
   1454c:	cmp	r0, #0
   14550:	beq	145c8 <__assert_fail@plt+0x2994>
   14554:	ldrh	r0, [r5, #58]	; 0x3a
   14558:	tst	r0, #2
   1455c:	bne	145f4 <__assert_fail@plt+0x29c0>
   14560:	tst	r0, #1
   14564:	bne	14690 <__assert_fail@plt+0x2a5c>
   14568:	ldr	r1, [r5, #4]
   1456c:	movw	r3, #46882	; 0xb722
   14570:	movt	r3, #1
   14574:	mov	r0, r4
   14578:	mvn	r2, #0
   1457c:	bl	147a8 <__assert_fail@plt+0x2b74>
   14580:	cmp	r0, #0
   14584:	bne	145d8 <__assert_fail@plt+0x29a4>
   14588:	b	14690 <__assert_fail@plt+0x2a5c>
   1458c:	mov	r0, r5
   14590:	bl	137c0 <__assert_fail@plt+0x1b8c>
   14594:	bl	11a6c <__errno_location@plt>
   14598:	mov	r5, #0
   1459c:	str	r5, [r0]
   145a0:	str	r5, [r4]
   145a4:	mov	r0, r5
   145a8:	pop	{r4, r5, r6, r7, fp, pc}
   145ac:	bl	11a6c <__errno_location@plt>
   145b0:	ldr	r0, [r0]
   145b4:	mov	r1, #7
   145b8:	strh	r1, [r6, #56]	; 0x38
   145bc:	str	r0, [r6, #32]
   145c0:	mov	r5, r6
   145c4:	b	14454 <__assert_fail@plt+0x2820>
   145c8:	mov	r0, r4
   145cc:	bl	151f4 <__assert_fail@plt+0x35c0>
   145d0:	cmp	r0, #0
   145d4:	beq	14690 <__assert_fail@plt+0x2a5c>
   145d8:	bl	11a6c <__errno_location@plt>
   145dc:	ldr	r0, [r0]
   145e0:	str	r0, [r5, #32]
   145e4:	ldr	r0, [r4, #48]	; 0x30
   145e8:	orr	r0, r0, #8192	; 0x2000
   145ec:	str	r0, [r4, #48]	; 0x30
   145f0:	b	14690 <__assert_fail@plt+0x2a5c>
   145f4:	ldr	r0, [r4, #48]	; 0x30
   145f8:	tst	r0, #4
   145fc:	bne	14688 <__assert_fail@plt+0x2a54>
   14600:	ldr	r1, [r5, #36]	; 0x24
   14604:	tst	r0, #512	; 0x200
   14608:	bne	1467c <__assert_fail@plt+0x2a48>
   1460c:	mov	r0, r1
   14610:	bl	11b50 <fchdir@plt>
   14614:	cmp	r0, #0
   14618:	beq	14688 <__assert_fail@plt+0x2a54>
   1461c:	bl	11a6c <__errno_location@plt>
   14620:	ldr	r0, [r0]
   14624:	str	r0, [r5, #32]
   14628:	ldr	r0, [r4, #48]	; 0x30
   1462c:	orr	r0, r0, #8192	; 0x2000
   14630:	str	r0, [r4, #48]	; 0x30
   14634:	b	14688 <__assert_fail@plt+0x2a54>
   14638:	movw	r1, #46883	; 0xb723
   1463c:	movt	r1, #1
   14640:	mov	r0, r4
   14644:	bl	13f24 <__assert_fail@plt+0x22f0>
   14648:	str	r0, [r5, #36]	; 0x24
   1464c:	cmn	r0, #1
   14650:	ble	14664 <__assert_fail@plt+0x2a30>
   14654:	ldrh	r0, [r5, #58]	; 0x3a
   14658:	orr	r0, r0, #2
   1465c:	strh	r0, [r5, #58]	; 0x3a
   14660:	b	142a8 <__assert_fail@plt+0x2674>
   14664:	bl	11a6c <__errno_location@plt>
   14668:	ldr	r0, [r0]
   1466c:	mov	r1, #7
   14670:	strh	r1, [r5, #56]	; 0x38
   14674:	str	r0, [r5, #32]
   14678:	b	142a8 <__assert_fail@plt+0x2674>
   1467c:	mov	r0, r4
   14680:	mov	r2, #1
   14684:	bl	15390 <__assert_fail@plt+0x375c>
   14688:	ldr	r0, [r5, #36]	; 0x24
   1468c:	bl	11be0 <close@plt>
   14690:	ldrh	r0, [r5, #56]	; 0x38
   14694:	cmp	r0, #2
   14698:	beq	146c0 <__assert_fail@plt+0x2a8c>
   1469c:	ldr	r0, [r5, #32]
   146a0:	mov	r1, #7
   146a4:	cmp	r0, #0
   146a8:	movweq	r1, #6
   146ac:	strh	r1, [r5, #56]	; 0x38
   146b0:	bne	146c0 <__assert_fail@plt+0x2a8c>
   146b4:	mov	r0, r4
   146b8:	mov	r1, r5
   146bc:	bl	146d8 <__assert_fail@plt+0x2aa4>
   146c0:	ldrb	r0, [r4, #49]	; 0x31
   146c4:	tst	r0, #32
   146c8:	movne	r5, #0
   146cc:	mov	r0, r5
   146d0:	pop	{r4, r5, r6, r7, fp, pc}
   146d4:	bl	11bd4 <abort@plt>
   146d8:	push	{r4, r5, r6, r7, fp, lr}
   146dc:	add	fp, sp, #16
   146e0:	sub	sp, sp, #24
   146e4:	add	lr, r1, #64	; 0x40
   146e8:	ldrh	r2, [r0, #48]	; 0x30
   146ec:	movw	r3, #258	; 0x102
   146f0:	tst	r2, r3
   146f4:	beq	1472c <__assert_fail@plt+0x2af8>
   146f8:	ldrd	r2, [lr]
   146fc:	stm	sp, {r2, r3}
   14700:	ldrd	r2, [r1, #160]	; 0xa0
   14704:	str	r3, [sp, #12]
   14708:	str	r2, [sp, #8]
   1470c:	ldr	r0, [r0, #56]	; 0x38
   14710:	mov	r1, sp
   14714:	bl	16608 <__assert_fail@plt+0x49d4>
   14718:	cmp	r0, #0
   1471c:	beq	147a4 <__assert_fail@plt+0x2b70>
   14720:	bl	137c0 <__assert_fail@plt+0x1b8c>
   14724:	sub	sp, fp, #16
   14728:	pop	{r4, r5, r6, r7, fp, pc}
   1472c:	ldr	r2, [r1, #4]
   14730:	cmp	r2, #0
   14734:	beq	1479c <__assert_fail@plt+0x2b68>
   14738:	ldr	r3, [r2, #48]	; 0x30
   1473c:	cmp	r3, #0
   14740:	blt	1479c <__assert_fail@plt+0x2b68>
   14744:	ldr	ip, [r0, #56]	; 0x38
   14748:	ldrd	r4, [ip, #16]
   1474c:	orrs	r3, r4, r5
   14750:	beq	147a4 <__assert_fail@plt+0x2b70>
   14754:	ldrd	r4, [r1, #160]	; 0xa0
   14758:	ldrd	r6, [ip]
   1475c:	eor	r1, r7, r5
   14760:	eor	r3, r6, r4
   14764:	orrs	r1, r3, r1
   14768:	bne	1479c <__assert_fail@plt+0x2b68>
   1476c:	ldrd	r4, [lr]
   14770:	ldr	r1, [ip, #8]!
   14774:	eor	r1, r1, r4
   14778:	ldr	r3, [ip, #4]
   1477c:	eor	r3, r3, r5
   14780:	orrs	r1, r1, r3
   14784:	bne	1479c <__assert_fail@plt+0x2b68>
   14788:	ldrd	r4, [r2, #64]	; 0x40
   1478c:	strd	r4, [ip]
   14790:	ldr	r0, [r0, #56]	; 0x38
   14794:	ldrd	r2, [r2, #160]	; 0xa0
   14798:	strd	r2, [r0]
   1479c:	sub	sp, fp, #16
   147a0:	pop	{r4, r5, r6, r7, fp, pc}
   147a4:	bl	11bd4 <abort@plt>
   147a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   147ac:	add	fp, sp, #24
   147b0:	sub	sp, sp, #104	; 0x68
   147b4:	mov	r7, r3
   147b8:	mov	r4, r2
   147bc:	mov	r8, r1
   147c0:	mov	r5, r0
   147c4:	cmp	r3, #0
   147c8:	beq	147ec <__assert_fail@plt+0x2bb8>
   147cc:	movw	r1, #46882	; 0xb722
   147d0:	movt	r1, #1
   147d4:	mov	r0, r7
   147d8:	bl	1182c <strcmp@plt>
   147dc:	mov	r6, r0
   147e0:	cmp	r0, #0
   147e4:	movwne	r6, #1
   147e8:	b	147f0 <__assert_fail@plt+0x2bbc>
   147ec:	mov	r6, #1
   147f0:	ldr	r0, [r5, #48]	; 0x30
   147f4:	tst	r0, #4
   147f8:	bne	14850 <__assert_fail@plt+0x2c1c>
   147fc:	mov	r9, #0
   14800:	cmn	r4, #1
   14804:	mov	r1, #0
   14808:	movwgt	r1, #1
   1480c:	orrs	r1, r1, r6
   14810:	bne	14870 <__assert_fail@plt+0x2c3c>
   14814:	ands	r0, r0, #512	; 0x200
   14818:	beq	14870 <__assert_fail@plt+0x2c3c>
   1481c:	add	r4, r5, #60	; 0x3c
   14820:	mov	r0, r4
   14824:	bl	168ac <__assert_fail@plt+0x4c78>
   14828:	cmp	r0, #0
   1482c:	bne	14878 <__assert_fail@plt+0x2c44>
   14830:	mov	r0, r4
   14834:	bl	168f8 <__assert_fail@plt+0x4cc4>
   14838:	cmn	r0, #1
   1483c:	ble	14878 <__assert_fail@plt+0x2c44>
   14840:	mov	r4, r0
   14844:	mov	r9, #0
   14848:	mov	r7, #0
   1484c:	b	14894 <__assert_fail@plt+0x2c60>
   14850:	mov	r5, #0
   14854:	cmp	r4, #0
   14858:	blt	1497c <__assert_fail@plt+0x2d48>
   1485c:	ands	r0, r0, #512	; 0x200
   14860:	beq	1497c <__assert_fail@plt+0x2d48>
   14864:	mov	r0, r4
   14868:	bl	11be0 <close@plt>
   1486c:	b	1497c <__assert_fail@plt+0x2d48>
   14870:	cmn	r4, #1
   14874:	bgt	14894 <__assert_fail@plt+0x2c60>
   14878:	mov	r0, r5
   1487c:	mov	r1, r7
   14880:	bl	13f24 <__assert_fail@plt+0x22f0>
   14884:	cmp	r0, #0
   14888:	blt	1492c <__assert_fail@plt+0x2cf8>
   1488c:	mov	r4, r0
   14890:	mov	r9, #1
   14894:	ldrb	r0, [r5, #48]	; 0x30
   14898:	tst	r0, #2
   1489c:	bne	148c0 <__assert_fail@plt+0x2c8c>
   148a0:	cmp	r7, #0
   148a4:	beq	14908 <__assert_fail@plt+0x2cd4>
   148a8:	movw	r1, #46882	; 0xb722
   148ac:	movt	r1, #1
   148b0:	mov	r0, r7
   148b4:	bl	1182c <strcmp@plt>
   148b8:	cmp	r0, #0
   148bc:	bne	14908 <__assert_fail@plt+0x2cd4>
   148c0:	mov	r1, sp
   148c4:	mov	r0, r4
   148c8:	bl	1ade4 <lchmod@@Base+0x4498>
   148cc:	cmp	r0, #0
   148d0:	bne	14958 <__assert_fail@plt+0x2d24>
   148d4:	ldrd	r0, [r8, #64]	; 0x40
   148d8:	ldm	sp, {r2, r3}
   148dc:	eor	r1, r1, r3
   148e0:	eor	r0, r0, r2
   148e4:	orrs	r0, r0, r1
   148e8:	bne	1494c <__assert_fail@plt+0x2d18>
   148ec:	ldrd	r0, [r8, #160]	; 0xa0
   148f0:	ldr	r2, [sp, #96]	; 0x60
   148f4:	ldr	r3, [sp, #100]	; 0x64
   148f8:	eor	r1, r1, r3
   148fc:	eor	r0, r0, r2
   14900:	orrs	r0, r0, r1
   14904:	bne	1494c <__assert_fail@plt+0x2d18>
   14908:	ldrb	r0, [r5, #49]	; 0x31
   1490c:	tst	r0, #2
   14910:	bne	14934 <__assert_fail@plt+0x2d00>
   14914:	mov	r0, r4
   14918:	bl	11b50 <fchdir@plt>
   1491c:	mov	r5, r0
   14920:	cmp	r9, #0
   14924:	bne	14964 <__assert_fail@plt+0x2d30>
   14928:	b	1497c <__assert_fail@plt+0x2d48>
   1492c:	mvn	r5, #0
   14930:	b	1497c <__assert_fail@plt+0x2d48>
   14934:	mov	r0, r5
   14938:	mov	r1, r4
   1493c:	mov	r2, r6
   14940:	bl	15390 <__assert_fail@plt+0x375c>
   14944:	mov	r5, #0
   14948:	b	1497c <__assert_fail@plt+0x2d48>
   1494c:	bl	11a6c <__errno_location@plt>
   14950:	mov	r1, #2
   14954:	str	r1, [r0]
   14958:	mvn	r5, #0
   1495c:	cmp	r9, #0
   14960:	beq	1497c <__assert_fail@plt+0x2d48>
   14964:	bl	11a6c <__errno_location@plt>
   14968:	mov	r6, r0
   1496c:	ldr	r7, [r0]
   14970:	mov	r0, r4
   14974:	bl	11be0 <close@plt>
   14978:	str	r7, [r6]
   1497c:	mov	r0, r5
   14980:	sub	sp, fp, #24
   14984:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1498c:	add	fp, sp, #28
   14990:	sub	sp, sp, #68	; 0x44
   14994:	mov	r4, r1
   14998:	ldr	sl, [r0]
   1499c:	ldr	r7, [sl, #12]
   149a0:	cmp	r7, #0
   149a4:	str	r0, [fp, #-36]	; 0xffffffdc
   149a8:	beq	14d1c <__assert_fail@plt+0x30e8>
   149ac:	mov	r0, r7
   149b0:	bl	11b44 <dirfd@plt>
   149b4:	str	r0, [fp, #-32]	; 0xffffffe0
   149b8:	cmn	r0, #1
   149bc:	ble	14d54 <__assert_fail@plt+0x3120>
   149c0:	ldr	ip, [fp, #-36]	; 0xffffffdc
   149c4:	mov	r1, ip
   149c8:	ldr	r0, [r1, #44]!	; 0x2c
   149cc:	str	r1, [fp, #-44]	; 0xffffffd4
   149d0:	mvn	r1, #0
   149d4:	cmp	r0, #0
   149d8:	movweq	r1, #34464	; 0x86a0
   149dc:	movteq	r1, #1
   149e0:	str	r1, [sp, #28]
   149e4:	mov	r0, #1
   149e8:	str	r0, [sp, #4]
   149ec:	str	r4, [sp, #8]
   149f0:	ldr	r1, [sl, #28]
   149f4:	ldr	r0, [sl, #40]	; 0x28
   149f8:	sub	r2, r0, #1
   149fc:	ldrb	r1, [r1, r2]
   14a00:	cmp	r1, #47	; 0x2f
   14a04:	moveq	r0, r2
   14a08:	ldrb	r1, [ip, #48]	; 0x30
   14a0c:	mov	r9, #0
   14a10:	tst	r1, #4
   14a14:	mov	r1, #0
   14a18:	str	r1, [sp, #40]	; 0x28
   14a1c:	beq	14a34 <__assert_fail@plt+0x2e00>
   14a20:	ldr	r1, [ip, #24]
   14a24:	mov	r2, #47	; 0x2f
   14a28:	strb	r2, [r1, r0]!
   14a2c:	add	r1, r1, #1
   14a30:	str	r1, [sp, #40]	; 0x28
   14a34:	str	r7, [sp, #12]
   14a38:	add	r1, r0, #1
   14a3c:	ldr	r4, [sl, #12]
   14a40:	cmp	r4, #0
   14a44:	str	r1, [fp, #-40]	; 0xffffffd8
   14a48:	beq	14d70 <__assert_fail@plt+0x313c>
   14a4c:	ldr	r0, [sl, #48]	; 0x30
   14a50:	add	r0, r0, #1
   14a54:	str	r0, [sp, #24]
   14a58:	ldr	r0, [ip, #36]	; 0x24
   14a5c:	sub	r0, r0, r1
   14a60:	str	r0, [sp, #44]	; 0x2c
   14a64:	mov	r6, #0
   14a68:	bl	11a6c <__errno_location@plt>
   14a6c:	str	r0, [sp, #36]	; 0x24
   14a70:	mov	r9, #0
   14a74:	mov	r7, #0
   14a78:	mov	r0, #0
   14a7c:	str	r0, [sp, #48]	; 0x30
   14a80:	mov	r0, #0
   14a84:	str	r0, [sp, #20]
   14a88:	mov	r0, #0
   14a8c:	str	r0, [sp, #16]
   14a90:	str	sl, [sp, #32]
   14a94:	ldr	r0, [sp, #36]	; 0x24
   14a98:	str	r6, [r0]
   14a9c:	mov	r0, r4
   14aa0:	bl	11b20 <readdir64@plt>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14fa8 <__assert_fail@plt+0x3374>
   14aac:	mov	r8, r0
   14ab0:	mov	r6, r9
   14ab4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14ab8:	ldrb	r0, [r5, #48]	; 0x30
   14abc:	tst	r0, #32
   14ac0:	ldrbeq	r0, [r8, #19]
   14ac4:	cmpeq	r0, #46	; 0x2e
   14ac8:	beq	14b70 <__assert_fail@plt+0x2f3c>
   14acc:	add	r4, r8, #19
   14ad0:	mov	r0, r4
   14ad4:	bl	11a30 <strlen@plt>
   14ad8:	mov	sl, r0
   14adc:	mov	r0, r5
   14ae0:	mov	r1, r4
   14ae4:	mov	r2, sl
   14ae8:	bl	13ba0 <__assert_fail@plt+0x1f6c>
   14aec:	mov	r9, r0
   14af0:	cmp	r0, #0
   14af4:	beq	14d84 <__assert_fail@plt+0x3150>
   14af8:	ldr	r0, [sp, #44]	; 0x2c
   14afc:	cmp	sl, r0
   14b00:	bcs	14b18 <__assert_fail@plt+0x2ee4>
   14b04:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14b08:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14b0c:	adds	r0, sl, r3
   14b10:	bcc	14bb4 <__assert_fail@plt+0x2f80>
   14b14:	b	15118 <__assert_fail@plt+0x34e4>
   14b18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b1c:	add	r0, sl, r0
   14b20:	add	r1, r0, #1
   14b24:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14b28:	ldr	r4, [r5, #24]
   14b2c:	mov	r0, r5
   14b30:	bl	13b28 <__assert_fail@plt+0x1ef4>
   14b34:	cmp	r0, #0
   14b38:	beq	14d84 <__assert_fail@plt+0x3150>
   14b3c:	ldr	r0, [r5, #24]
   14b40:	cmp	r4, r0
   14b44:	mov	r2, r5
   14b48:	beq	14b9c <__assert_fail@plt+0x2f68>
   14b4c:	ldrb	r1, [r2, #48]	; 0x30
   14b50:	tst	r1, #4
   14b54:	ldr	r1, [sp, #40]	; 0x28
   14b58:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14b5c:	addne	r1, r0, r3
   14b60:	str	r1, [sp, #40]	; 0x28
   14b64:	mov	r0, #1
   14b68:	str	r0, [sp, #16]
   14b6c:	b	14ba0 <__assert_fail@plt+0x2f6c>
   14b70:	ldrb	r0, [r8, #20]
   14b74:	cmp	r0, #0
   14b78:	beq	14b8c <__assert_fail@plt+0x2f58>
   14b7c:	cmp	r0, #46	; 0x2e
   14b80:	ldrbeq	r0, [r8, #21]
   14b84:	cmpeq	r0, #0
   14b88:	bne	14acc <__assert_fail@plt+0x2e98>
   14b8c:	ldr	sl, [sp, #32]
   14b90:	mov	r9, r6
   14b94:	mov	r6, #0
   14b98:	b	14d00 <__assert_fail@plt+0x30cc>
   14b9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14ba0:	ldr	r0, [r2, #36]	; 0x24
   14ba4:	sub	r0, r0, r3
   14ba8:	str	r0, [sp, #44]	; 0x2c
   14bac:	adds	r0, sl, r3
   14bb0:	bcs	15118 <__assert_fail@plt+0x34e4>
   14bb4:	ldr	r1, [sp, #24]
   14bb8:	str	r1, [r9, #48]	; 0x30
   14bbc:	ldr	r1, [r2]
   14bc0:	str	r0, [r9, #40]	; 0x28
   14bc4:	str	r1, [r9, #4]
   14bc8:	ldrd	r0, [r8]
   14bcc:	strd	r0, [r9, #160]	; 0xa0
   14bd0:	ldrb	r0, [r2, #48]	; 0x30
   14bd4:	tst	r0, #4
   14bd8:	ldr	sl, [sp, #32]
   14bdc:	mov	r5, r6
   14be0:	bne	14bf0 <__assert_fail@plt+0x2fbc>
   14be4:	add	r0, r9, #168	; 0xa8
   14be8:	str	r0, [r9, #24]
   14bec:	b	14c10 <__assert_fail@plt+0x2fdc>
   14bf0:	ldr	r0, [r9, #28]
   14bf4:	ldr	r2, [r9, #52]	; 0x34
   14bf8:	str	r0, [r9, #24]
   14bfc:	add	r1, r9, #168	; 0xa8
   14c00:	add	r2, r2, #1
   14c04:	ldr	r0, [sp, #40]	; 0x28
   14c08:	bl	11868 <memmove@plt>
   14c0c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14c10:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14c14:	ldr	r0, [r0]
   14c18:	cmp	r0, #0
   14c1c:	beq	14c44 <__assert_fail@plt+0x3010>
   14c20:	ldrb	r0, [r2, #49]	; 0x31
   14c24:	tst	r0, #4
   14c28:	bne	14c44 <__assert_fail@plt+0x3010>
   14c2c:	mov	r0, r2
   14c30:	mov	r1, r9
   14c34:	mov	r2, #0
   14c38:	bl	13c50 <__assert_fail@plt+0x201c>
   14c3c:	strh	r0, [r9, #56]	; 0x38
   14c40:	b	14c94 <__assert_fail@plt+0x3060>
   14c44:	add	r0, r9, #64	; 0x40
   14c48:	ldr	r1, [r2, #48]	; 0x30
   14c4c:	mov	r4, #0
   14c50:	tst	r1, #8
   14c54:	beq	14c78 <__assert_fail@plt+0x3044>
   14c58:	ldrb	r2, [r8, #18]
   14c5c:	orr	r3, r2, #4
   14c60:	cmp	r3, #4
   14c64:	beq	14c78 <__assert_fail@plt+0x3044>
   14c68:	eor	r2, r2, #10
   14c6c:	and	r1, r1, #16
   14c70:	orrs	r4, r1, r2
   14c74:	movwne	r4, #1
   14c78:	mov	r1, #11
   14c7c:	strh	r1, [r9, #56]	; 0x38
   14c80:	ldrb	r1, [r8, #18]
   14c84:	bl	15658 <__assert_fail@plt+0x3a24>
   14c88:	eor	r1, r4, #1
   14c8c:	mov	r0, r9
   14c90:	bl	13c20 <__assert_fail@plt+0x1fec>
   14c94:	mov	r6, #0
   14c98:	str	r6, [r9, #8]
   14c9c:	cmp	r5, #0
   14ca0:	mov	r4, r9
   14ca4:	ldrne	r0, [sp, #48]	; 0x30
   14ca8:	strne	r9, [r0, #8]
   14cac:	movne	r4, r5
   14cb0:	movw	r0, #10000	; 0x2710
   14cb4:	cmp	r7, r0
   14cb8:	bne	14cdc <__assert_fail@plt+0x30a8>
   14cbc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14cc0:	ldr	r0, [r0]
   14cc4:	cmp	r0, #0
   14cc8:	bne	14cdc <__assert_fail@plt+0x30a8>
   14ccc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14cd0:	mov	r0, sl
   14cd4:	bl	15678 <__assert_fail@plt+0x3a44>
   14cd8:	str	r0, [sp, #20]
   14cdc:	add	r7, r7, #1
   14ce0:	ldr	r0, [sp, #28]
   14ce4:	cmp	r0, r7
   14ce8:	mov	r0, #0
   14cec:	movwls	r0, #15
   14cf0:	cmp	r0, #0
   14cf4:	bne	15164 <__assert_fail@plt+0x3530>
   14cf8:	str	r9, [sp, #48]	; 0x30
   14cfc:	mov	r9, r4
   14d00:	ldr	r4, [sl, #12]
   14d04:	cmp	r4, #0
   14d08:	bne	14a94 <__assert_fail@plt+0x2e60>
   14d0c:	ldr	r0, [sp, #16]
   14d10:	tst	r0, #1
   14d14:	ldr	r4, [sp, #8]
   14d18:	b	14ff4 <__assert_fail@plt+0x33c0>
   14d1c:	mov	r2, r0
   14d20:	ldr	r3, [r0, #48]	; 0x30
   14d24:	and	r1, r3, #516	; 0x204
   14d28:	mvn	r0, #99	; 0x63
   14d2c:	cmp	r1, #512	; 0x200
   14d30:	ldreq	r0, [r2, #32]
   14d34:	ldr	r1, [sl, #24]
   14d38:	mov	r2, #0
   14d3c:	tst	r3, #16
   14d40:	beq	14dd8 <__assert_fail@plt+0x31a4>
   14d44:	tst	r3, #1
   14d48:	bne	14dcc <__assert_fail@plt+0x3198>
   14d4c:	mov	r2, #32768	; 0x8000
   14d50:	b	14dd8 <__assert_fail@plt+0x31a4>
   14d54:	ldr	r0, [sl, #12]
   14d58:	bl	11c10 <closedir@plt>
   14d5c:	mov	r9, #0
   14d60:	str	r9, [sl, #12]
   14d64:	cmp	r4, #3
   14d68:	beq	14e24 <__assert_fail@plt+0x31f0>
   14d6c:	b	151cc <__assert_fail@plt+0x3598>
   14d70:	mov	r7, #0
   14d74:	mov	r0, #0
   14d78:	str	r0, [sp, #20]
   14d7c:	ldr	r4, [sp, #8]
   14d80:	b	1500c <__assert_fail@plt+0x33d8>
   14d84:	ldr	r4, [sp, #36]	; 0x24
   14d88:	ldr	r8, [r4]
   14d8c:	mov	r0, r9
   14d90:	bl	137c0 <__assert_fail@plt+0x1b8c>
   14d94:	mov	r0, r6
   14d98:	bl	13f54 <__assert_fail@plt+0x2320>
   14d9c:	ldr	r7, [sp, #32]
   14da0:	ldr	r0, [r7, #12]
   14da4:	bl	11c10 <closedir@plt>
   14da8:	mov	r9, #0
   14dac:	str	r9, [r7, #12]
   14db0:	mov	r0, #7
   14db4:	strh	r0, [r7, #56]	; 0x38
   14db8:	ldr	r0, [r5, #48]	; 0x30
   14dbc:	orr	r0, r0, #8192	; 0x2000
   14dc0:	str	r0, [r5, #48]	; 0x30
   14dc4:	str	r8, [r4]
   14dc8:	b	151cc <__assert_fail@plt+0x3598>
   14dcc:	ldr	r3, [sl, #48]	; 0x30
   14dd0:	cmp	r3, #0
   14dd4:	movne	r2, #32768	; 0x8000
   14dd8:	sub	r3, fp, #32
   14ddc:	bl	17070 <lchmod@@Base+0x724>
   14de0:	str	r0, [sl, #12]
   14de4:	cmp	r0, #0
   14de8:	beq	14e18 <__assert_fail@plt+0x31e4>
   14dec:	ldrh	r0, [sl, #56]	; 0x38
   14df0:	cmp	r0, #11
   14df4:	bne	14e3c <__assert_fail@plt+0x3208>
   14df8:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14dfc:	mov	r0, r6
   14e00:	mov	r1, sl
   14e04:	mov	r2, #0
   14e08:	bl	13c50 <__assert_fail@plt+0x201c>
   14e0c:	mov	ip, r6
   14e10:	strh	r0, [sl, #56]	; 0x38
   14e14:	b	14e84 <__assert_fail@plt+0x3250>
   14e18:	mov	r9, #0
   14e1c:	cmp	r4, #3
   14e20:	bne	151cc <__assert_fail@plt+0x3598>
   14e24:	mov	r0, #4
   14e28:	strh	r0, [sl, #56]	; 0x38
   14e2c:	bl	11a6c <__errno_location@plt>
   14e30:	ldr	r0, [r0]
   14e34:	str	r0, [sl, #32]
   14e38:	b	151cc <__assert_fail@plt+0x3598>
   14e3c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14e40:	ldrb	r0, [ip, #49]	; 0x31
   14e44:	tst	r0, #1
   14e48:	beq	14e84 <__assert_fail@plt+0x3250>
   14e4c:	mov	r0, ip
   14e50:	mov	r1, sl
   14e54:	bl	146d8 <__assert_fail@plt+0x2aa4>
   14e58:	mov	r9, #0
   14e5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14e60:	mov	r1, sl
   14e64:	mov	r2, #0
   14e68:	bl	13c50 <__assert_fail@plt+0x201c>
   14e6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14e70:	mov	r1, sl
   14e74:	bl	152d8 <__assert_fail@plt+0x36a4>
   14e78:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14e7c:	cmp	r0, #0
   14e80:	beq	15188 <__assert_fail@plt+0x3554>
   14e84:	mov	r1, ip
   14e88:	ldr	r0, [r1, #44]!	; 0x2c
   14e8c:	str	r1, [fp, #-44]	; 0xffffffd4
   14e90:	mvn	r1, #0
   14e94:	cmp	r0, #0
   14e98:	movweq	r1, #34464	; 0x86a0
   14e9c:	movteq	r1, #1
   14ea0:	str	r1, [sp, #28]
   14ea4:	mov	r6, #0
   14ea8:	cmp	r4, #2
   14eac:	beq	14ed0 <__assert_fail@plt+0x329c>
   14eb0:	ldr	r0, [ip, #48]	; 0x30
   14eb4:	and	r1, r0, #56	; 0x38
   14eb8:	mov	r0, #0
   14ebc:	cmp	r1, #24
   14ec0:	ldreq	r1, [sl, #84]	; 0x54
   14ec4:	cmpeq	r1, #2
   14ec8:	beq	151d8 <__assert_fail@plt+0x35a4>
   14ecc:	eor	r6, r0, #1
   14ed0:	cmp	r4, #3
   14ed4:	beq	14ee8 <__assert_fail@plt+0x32b4>
   14ed8:	cmp	r6, #0
   14edc:	bne	14ee8 <__assert_fail@plt+0x32b4>
   14ee0:	str	r6, [sp, #4]
   14ee4:	b	149ec <__assert_fail@plt+0x2db8>
   14ee8:	ldrb	r0, [ip, #49]	; 0x31
   14eec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14ef0:	tst	r0, #2
   14ef4:	beq	14f14 <__assert_fail@plt+0x32e0>
   14ef8:	mov	r0, r2
   14efc:	movw	r1, #1030	; 0x406
   14f00:	mov	r2, #3
   14f04:	bl	1a634 <lchmod@@Base+0x3ce8>
   14f08:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14f0c:	mov	r2, r0
   14f10:	str	r0, [fp, #-32]	; 0xffffffe0
   14f14:	cmp	r2, #0
   14f18:	blt	14f38 <__assert_fail@plt+0x3304>
   14f1c:	mov	r0, ip
   14f20:	mov	r1, sl
   14f24:	mov	r3, #0
   14f28:	bl	147a8 <__assert_fail@plt+0x2b74>
   14f2c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14f30:	cmp	r0, #0
   14f34:	beq	149e4 <__assert_fail@plt+0x2db0>
   14f38:	subs	r0, r4, #3
   14f3c:	movwne	r0, #1
   14f40:	eor	r1, r6, #1
   14f44:	orrs	r0, r0, r1
   14f48:	bne	14f58 <__assert_fail@plt+0x3324>
   14f4c:	bl	11a6c <__errno_location@plt>
   14f50:	ldr	r0, [r0]
   14f54:	str	r0, [sl, #32]
   14f58:	ldrh	r0, [sl, #58]	; 0x3a
   14f5c:	orr	r0, r0, #1
   14f60:	strh	r0, [sl, #58]	; 0x3a
   14f64:	ldr	r0, [sl, #12]
   14f68:	bl	11c10 <closedir@plt>
   14f6c:	mov	r6, #0
   14f70:	str	r6, [sl, #12]
   14f74:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14f78:	ldr	r0, [ip, #48]	; 0x30
   14f7c:	tst	r0, #512	; 0x200
   14f80:	beq	14f98 <__assert_fail@plt+0x3364>
   14f84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14f88:	cmp	r0, #0
   14f8c:	blt	14f98 <__assert_fail@plt+0x3364>
   14f90:	bl	11be0 <close@plt>
   14f94:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14f98:	mov	r0, #0
   14f9c:	str	r0, [sp, #4]
   14fa0:	str	r6, [sl, #12]
   14fa4:	b	149ec <__assert_fail@plt+0x2db8>
   14fa8:	ldr	r0, [sp, #36]	; 0x24
   14fac:	ldr	r0, [r0]
   14fb0:	cmp	r0, #0
   14fb4:	beq	14fd0 <__assert_fail@plt+0x339c>
   14fb8:	str	r0, [sl, #32]
   14fbc:	ldr	r0, [sp, #12]
   14fc0:	orrs	r0, r0, r7
   14fc4:	mov	r0, #4
   14fc8:	movwne	r0, #7
   14fcc:	strh	r0, [sl, #56]	; 0x38
   14fd0:	ldr	r0, [sl, #12]
   14fd4:	cmp	r0, #0
   14fd8:	ldr	r4, [sp, #8]
   14fdc:	beq	15174 <__assert_fail@plt+0x3540>
   14fe0:	bl	11c10 <closedir@plt>
   14fe4:	mov	r0, #0
   14fe8:	str	r0, [sl, #12]
   14fec:	ldr	r0, [sp, #16]
   14ff0:	tst	r0, #1
   14ff4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14ff8:	beq	1500c <__assert_fail@plt+0x33d8>
   14ffc:	mov	r0, ip
   15000:	mov	r1, r9
   15004:	bl	156bc <__assert_fail@plt+0x3a88>
   15008:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1500c:	ldrb	r0, [ip, #48]	; 0x30
   15010:	tst	r0, #4
   15014:	beq	15040 <__assert_fail@plt+0x340c>
   15018:	ldr	r0, [ip, #36]	; 0x24
   1501c:	ldr	r2, [sp, #40]	; 0x28
   15020:	sub	r1, r2, #1
   15024:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15028:	cmp	r3, r0
   1502c:	moveq	r2, r1
   15030:	cmp	r7, #0
   15034:	moveq	r2, r1
   15038:	mov	r0, #0
   1503c:	strb	r0, [r2]
   15040:	ldr	r0, [sp, #12]
   15044:	cmp	r0, #0
   15048:	ldreq	r0, [sp, #4]
   1504c:	eorseq	r0, r0, #1
   15050:	beq	1507c <__assert_fail@plt+0x3448>
   15054:	cmp	r7, #0
   15058:	bne	150b0 <__assert_fail@plt+0x347c>
   1505c:	cmp	r4, #3
   15060:	bne	151c0 <__assert_fail@plt+0x358c>
   15064:	ldrh	r0, [sl, #56]	; 0x38
   15068:	cmp	r0, #4
   1506c:	cmpne	r0, #7
   15070:	movne	r0, #6
   15074:	strhne	r0, [sl, #56]	; 0x38
   15078:	b	151c0 <__assert_fail@plt+0x358c>
   1507c:	cmp	r4, #1
   15080:	cmpne	r7, #0
   15084:	bne	150b0 <__assert_fail@plt+0x347c>
   15088:	ldr	r0, [sl, #48]	; 0x30
   1508c:	cmp	r0, #0
   15090:	beq	15198 <__assert_fail@plt+0x3564>
   15094:	ldr	r1, [sl, #4]
   15098:	movw	r3, #46882	; 0xb722
   1509c:	movt	r3, #1
   150a0:	mov	r0, ip
   150a4:	mvn	r2, #0
   150a8:	bl	147a8 <__assert_fail@plt+0x2b74>
   150ac:	b	151a0 <__assert_fail@plt+0x356c>
   150b0:	ldr	r0, [sp, #20]
   150b4:	tst	r0, #1
   150b8:	beq	150e8 <__assert_fail@plt+0x34b4>
   150bc:	movw	r0, #22340	; 0x5744
   150c0:	movt	r0, #1
   150c4:	str	r0, [ip, #44]	; 0x2c
   150c8:	mov	r0, ip
   150cc:	mov	r1, r9
   150d0:	mov	r2, r7
   150d4:	bl	13db8 <__assert_fail@plt+0x2184>
   150d8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   150dc:	mov	r9, r0
   150e0:	mov	r0, #0
   150e4:	str	r0, [ip, #44]	; 0x2c
   150e8:	cmp	r7, #2
   150ec:	bcc	151cc <__assert_fail@plt+0x3598>
   150f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   150f4:	ldr	r0, [r0]
   150f8:	cmp	r0, #0
   150fc:	beq	151cc <__assert_fail@plt+0x3598>
   15100:	mov	r0, ip
   15104:	mov	r1, r9
   15108:	mov	r2, r7
   1510c:	bl	13db8 <__assert_fail@plt+0x2184>
   15110:	mov	r9, r0
   15114:	b	151cc <__assert_fail@plt+0x3598>
   15118:	mov	r0, r9
   1511c:	mov	r4, r2
   15120:	bl	137c0 <__assert_fail@plt+0x1b8c>
   15124:	mov	r0, r6
   15128:	bl	13f54 <__assert_fail@plt+0x2320>
   1512c:	ldr	r5, [sp, #32]
   15130:	ldr	r0, [r5, #12]
   15134:	bl	11c10 <closedir@plt>
   15138:	mov	r9, #0
   1513c:	str	r9, [r5, #12]
   15140:	mov	r0, #7
   15144:	strh	r0, [r5, #56]	; 0x38
   15148:	ldr	r0, [r4, #48]	; 0x30
   1514c:	orr	r0, r0, #8192	; 0x2000
   15150:	str	r0, [r4, #48]	; 0x30
   15154:	mov	r0, #36	; 0x24
   15158:	ldr	r1, [sp, #36]	; 0x24
   1515c:	str	r0, [r1]
   15160:	b	151cc <__assert_fail@plt+0x3598>
   15164:	cmp	r0, #15
   15168:	bne	151c8 <__assert_fail@plt+0x3594>
   1516c:	mov	r9, r4
   15170:	ldr	r4, [sp, #8]
   15174:	ldr	ip, [fp, #-36]	; 0xffffffdc
   15178:	ldr	r0, [sp, #16]
   1517c:	tst	r0, #1
   15180:	bne	14ffc <__assert_fail@plt+0x33c8>
   15184:	b	1500c <__assert_fail@plt+0x33d8>
   15188:	bl	11a6c <__errno_location@plt>
   1518c:	mov	r1, #12
   15190:	str	r1, [r0]
   15194:	b	151cc <__assert_fail@plt+0x3598>
   15198:	mov	r0, ip
   1519c:	bl	151f4 <__assert_fail@plt+0x35c0>
   151a0:	ldr	ip, [fp, #-36]	; 0xffffffdc
   151a4:	cmp	r0, #0
   151a8:	beq	15054 <__assert_fail@plt+0x3420>
   151ac:	mov	r0, #7
   151b0:	strh	r0, [sl, #56]	; 0x38
   151b4:	ldr	r0, [ip, #48]	; 0x30
   151b8:	orr	r0, r0, #8192	; 0x2000
   151bc:	str	r0, [ip, #48]	; 0x30
   151c0:	mov	r0, r9
   151c4:	bl	13f54 <__assert_fail@plt+0x2320>
   151c8:	mov	r9, #0
   151cc:	mov	r0, r9
   151d0:	sub	sp, fp, #28
   151d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   151dc:	mov	r0, sl
   151e0:	bl	155f0 <__assert_fail@plt+0x39bc>
   151e4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   151e8:	cmp	r0, #0
   151ec:	movwne	r0, #1
   151f0:	b	14ecc <__assert_fail@plt+0x3298>
   151f4:	push	{r4, r5, fp, lr}
   151f8:	add	fp, sp, #8
   151fc:	mov	r4, r0
   15200:	ldr	r0, [r0, #48]	; 0x30
   15204:	mov	r5, #0
   15208:	tst	r0, #4
   1520c:	bne	15240 <__assert_fail@plt+0x360c>
   15210:	tst	r0, #512	; 0x200
   15214:	bne	15230 <__assert_fail@plt+0x35fc>
   15218:	ldr	r0, [r4, #28]
   1521c:	bl	11b50 <fchdir@plt>
   15220:	mov	r5, r0
   15224:	cmp	r0, #0
   15228:	movwne	r5, #1
   1522c:	b	15240 <__assert_fail@plt+0x360c>
   15230:	mov	r0, r4
   15234:	mvn	r1, #99	; 0x63
   15238:	mov	r2, #1
   1523c:	bl	15390 <__assert_fail@plt+0x375c>
   15240:	add	r0, r4, #60	; 0x3c
   15244:	bl	140c0 <__assert_fail@plt+0x248c>
   15248:	mov	r0, r5
   1524c:	pop	{r4, r5, fp, pc}
   15250:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15254:	add	fp, sp, #24
   15258:	mov	r4, r1
   1525c:	mov	r8, r0
   15260:	ldr	r1, [r1, #52]	; 0x34
   15264:	str	r1, [r4, #40]	; 0x28
   15268:	ldr	r0, [r0, #24]
   1526c:	add	r6, r4, #168	; 0xa8
   15270:	add	r2, r1, #1
   15274:	mov	r1, r6
   15278:	bl	11868 <memmove@plt>
   1527c:	mov	r0, r6
   15280:	mov	r1, #47	; 0x2f
   15284:	bl	11b08 <strrchr@plt>
   15288:	cmp	r0, #0
   1528c:	beq	152c8 <__assert_fail@plt+0x3694>
   15290:	cmp	r0, r6
   15294:	bne	152a4 <__assert_fail@plt+0x3670>
   15298:	ldrb	r1, [r0, #1]
   1529c:	cmp	r1, #0
   152a0:	beq	152c8 <__assert_fail@plt+0x3694>
   152a4:	add	r7, r0, #1
   152a8:	mov	r0, r7
   152ac:	bl	11a30 <strlen@plt>
   152b0:	mov	r5, r0
   152b4:	add	r2, r0, #1
   152b8:	mov	r0, r6
   152bc:	mov	r1, r7
   152c0:	bl	11868 <memmove@plt>
   152c4:	str	r5, [r4, #52]	; 0x34
   152c8:	ldr	r0, [r8, #24]
   152cc:	str	r0, [r4, #24]
   152d0:	str	r0, [r4, #28]
   152d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152d8:	push	{r4, r5, r6, r7, fp, lr}
   152dc:	add	fp, sp, #16
   152e0:	mov	r4, r1
   152e4:	mov	r6, r0
   152e8:	ldrh	r0, [r0, #48]	; 0x30
   152ec:	movw	r1, #258	; 0x102
   152f0:	tst	r0, r1
   152f4:	beq	15368 <__assert_fail@plt+0x3734>
   152f8:	mov	r0, #24
   152fc:	bl	19e70 <lchmod@@Base+0x3524>
   15300:	mov	r5, #0
   15304:	cmp	r0, #0
   15308:	beq	15388 <__assert_fail@plt+0x3754>
   1530c:	mov	r7, r0
   15310:	ldrd	r0, [r4, #64]	; 0x40
   15314:	stm	r7, {r0, r1}
   15318:	ldrd	r0, [r4, #160]	; 0xa0
   1531c:	add	r2, r7, #8
   15320:	stm	r2, {r0, r1, r4}
   15324:	ldr	r0, [r6, #56]	; 0x38
   15328:	mov	r1, r7
   1532c:	bl	165c8 <__assert_fail@plt+0x4994>
   15330:	cmp	r0, r7
   15334:	beq	1535c <__assert_fail@plt+0x3728>
   15338:	mov	r6, r0
   1533c:	mov	r0, r7
   15340:	bl	137c0 <__assert_fail@plt+0x1b8c>
   15344:	cmp	r6, #0
   15348:	beq	15388 <__assert_fail@plt+0x3754>
   1534c:	ldr	r0, [r6, #16]
   15350:	mov	r1, #2
   15354:	strh	r1, [r4, #56]	; 0x38
   15358:	str	r0, [r4]
   1535c:	mov	r5, #1
   15360:	mov	r0, r5
   15364:	pop	{r4, r5, r6, r7, fp, pc}
   15368:	ldr	r0, [r6, #56]	; 0x38
   1536c:	add	r1, r4, #64	; 0x40
   15370:	bl	1a494 <lchmod@@Base+0x3b48>
   15374:	mov	r5, #1
   15378:	cmp	r0, #0
   1537c:	movne	r0, #2
   15380:	strhne	r0, [r4, #56]	; 0x38
   15384:	strne	r4, [r4]
   15388:	mov	r0, r5
   1538c:	pop	{r4, r5, r6, r7, fp, pc}
   15390:	push	{r4, r5, fp, lr}
   15394:	add	fp, sp, #8
   15398:	mov	r4, r1
   1539c:	mov	r5, r0
   153a0:	ldr	r1, [r0, #32]
   153a4:	cmp	r1, r4
   153a8:	bne	153b4 <__assert_fail@plt+0x3780>
   153ac:	cmn	r1, #100	; 0x64
   153b0:	bne	153f4 <__assert_fail@plt+0x37c0>
   153b4:	cmp	r2, #0
   153b8:	beq	153d0 <__assert_fail@plt+0x379c>
   153bc:	add	r0, r5, #60	; 0x3c
   153c0:	bl	168b4 <__assert_fail@plt+0x4c80>
   153c4:	cmp	r0, #0
   153c8:	bge	153e8 <__assert_fail@plt+0x37b4>
   153cc:	b	153ec <__assert_fail@plt+0x37b8>
   153d0:	cmp	r1, #0
   153d4:	blt	153ec <__assert_fail@plt+0x37b8>
   153d8:	ldr	r0, [r5, #48]	; 0x30
   153dc:	ands	r0, r0, #4
   153e0:	bne	153ec <__assert_fail@plt+0x37b8>
   153e4:	mov	r0, r1
   153e8:	bl	11be0 <close@plt>
   153ec:	str	r4, [r5, #32]
   153f0:	pop	{r4, r5, fp, pc}
   153f4:	bl	11bd4 <abort@plt>
   153f8:	cmp	r2, #5
   153fc:	strhcc	r2, [r1, #60]	; 0x3c
   15400:	movcc	r0, #0
   15404:	bxcc	lr
   15408:	push	{fp, lr}
   1540c:	mov	fp, sp
   15410:	bl	11a6c <__errno_location@plt>
   15414:	mov	r1, #22
   15418:	str	r1, [r0]
   1541c:	mov	r0, #1
   15420:	pop	{fp, pc}
   15424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15428:	add	fp, sp, #28
   1542c:	sub	sp, sp, #4
   15430:	mov	r5, r0
   15434:	orr	r0, r1, #4096	; 0x1000
   15438:	cmp	r0, #4096	; 0x1000
   1543c:	bne	1547c <__assert_fail@plt+0x3848>
   15440:	mov	r7, r1
   15444:	ldr	r6, [r5]
   15448:	bl	11a6c <__errno_location@plt>
   1544c:	mov	sl, r0
   15450:	mov	r4, #0
   15454:	str	r4, [r0]
   15458:	ldrb	r0, [r5, #49]	; 0x31
   1545c:	tst	r0, #32
   15460:	bne	1548c <__assert_fail@plt+0x3858>
   15464:	ldrh	r0, [r6, #56]	; 0x38
   15468:	cmp	r0, #1
   1546c:	beq	15498 <__assert_fail@plt+0x3864>
   15470:	cmp	r0, #9
   15474:	ldreq	r4, [r6, #8]
   15478:	b	1548c <__assert_fail@plt+0x3858>
   1547c:	bl	11a6c <__errno_location@plt>
   15480:	mov	r1, #22
   15484:	str	r1, [r0]
   15488:	mov	r4, #0
   1548c:	mov	r0, r4
   15490:	sub	sp, fp, #28
   15494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15498:	ldr	r0, [r5, #4]
   1549c:	cmp	r0, #0
   154a0:	blne	13f54 <__assert_fail@plt+0x2320>
   154a4:	mov	r9, #1
   154a8:	cmp	r7, #4096	; 0x1000
   154ac:	ldreq	r0, [r5, #48]	; 0x30
   154b0:	orreq	r0, r0, #4096	; 0x1000
   154b4:	streq	r0, [r5, #48]	; 0x30
   154b8:	moveq	r9, #2
   154bc:	ldr	r0, [r6, #48]	; 0x30
   154c0:	cmp	r0, #0
   154c4:	bne	15540 <__assert_fail@plt+0x390c>
   154c8:	ldr	r0, [r6, #24]
   154cc:	ldrb	r0, [r0]
   154d0:	cmp	r0, #47	; 0x2f
   154d4:	beq	15540 <__assert_fail@plt+0x390c>
   154d8:	ldrb	r0, [r5, #48]	; 0x30
   154dc:	tst	r0, #4
   154e0:	bne	15540 <__assert_fail@plt+0x390c>
   154e4:	movw	r1, #46883	; 0xb723
   154e8:	movt	r1, #1
   154ec:	mov	r0, r5
   154f0:	bl	13f24 <__assert_fail@plt+0x22f0>
   154f4:	cmn	r0, #1
   154f8:	ble	15558 <__assert_fail@plt+0x3924>
   154fc:	mov	r8, r0
   15500:	mov	r0, r5
   15504:	mov	r1, r9
   15508:	bl	14988 <__assert_fail@plt+0x2d54>
   1550c:	str	r0, [r5, #4]
   15510:	ldrb	r0, [r5, #49]	; 0x31
   15514:	tst	r0, #2
   15518:	bne	15564 <__assert_fail@plt+0x3930>
   1551c:	mov	r0, r8
   15520:	bl	11b50 <fchdir@plt>
   15524:	cmp	r0, #0
   15528:	beq	15578 <__assert_fail@plt+0x3944>
   1552c:	ldr	r5, [sl]
   15530:	mov	r0, r8
   15534:	bl	11be0 <close@plt>
   15538:	str	r5, [sl]
   1553c:	b	1548c <__assert_fail@plt+0x3858>
   15540:	mov	r0, r5
   15544:	mov	r1, r9
   15548:	bl	14988 <__assert_fail@plt+0x2d54>
   1554c:	mov	r4, r0
   15550:	str	r0, [r5, #4]
   15554:	b	1548c <__assert_fail@plt+0x3858>
   15558:	mov	r4, #0
   1555c:	str	r4, [r5, #4]
   15560:	b	1548c <__assert_fail@plt+0x3858>
   15564:	mov	r0, r5
   15568:	mov	r1, r8
   1556c:	mov	r2, #1
   15570:	bl	15390 <__assert_fail@plt+0x375c>
   15574:	b	15580 <__assert_fail@plt+0x394c>
   15578:	mov	r0, r8
   1557c:	bl	11be0 <close@plt>
   15580:	ldr	r4, [r5, #4]
   15584:	b	1548c <__assert_fail@plt+0x3858>
   15588:	push	{fp, lr}
   1558c:	mov	fp, sp
   15590:	mov	r2, r1
   15594:	ldrd	r0, [r0, #8]
   15598:	mov	r3, #0
   1559c:	bl	1abe4 <lchmod@@Base+0x4298>
   155a0:	mov	r0, r2
   155a4:	pop	{fp, pc}
   155a8:	push	{r4, r5, fp, lr}
   155ac:	add	fp, sp, #8
   155b0:	ldrd	r2, [r1, #8]
   155b4:	ldrd	r4, [r0, #8]
   155b8:	eor	r3, r5, r3
   155bc:	eor	r2, r4, r2
   155c0:	orrs	r2, r2, r3
   155c4:	mov	r2, #0
   155c8:	bne	155e8 <__assert_fail@plt+0x39b4>
   155cc:	ldrd	r2, [r1]
   155d0:	ldrd	r0, [r0]
   155d4:	eor	r1, r1, r3
   155d8:	eor	r0, r0, r2
   155dc:	orr	r0, r0, r1
   155e0:	clz	r0, r0
   155e4:	lsr	r2, r0, #5
   155e8:	mov	r0, r2
   155ec:	pop	{r4, r5, fp, pc}
   155f0:	push	{fp, lr}
   155f4:	mov	fp, sp
   155f8:	bl	1577c <__assert_fail@plt+0x3b48>
   155fc:	mov	r1, r0
   15600:	mov	r0, #0
   15604:	movw	r2, #26984	; 0x6968
   15608:	cmp	r1, r2
   1560c:	ble	1563c <__assert_fail@plt+0x3a08>
   15610:	movw	r2, #26985	; 0x6969
   15614:	cmp	r1, r2
   15618:	movwne	r2, #40864	; 0x9fa0
   1561c:	cmpne	r1, r2
   15620:	beq	15654 <__assert_fail@plt+0x3a20>
   15624:	movw	r2, #16719	; 0x414f
   15628:	movt	r2, #21318	; 0x5346
   1562c:	cmp	r1, r2
   15630:	popeq	{fp, pc}
   15634:	mov	r0, #1
   15638:	pop	{fp, pc}
   1563c:	movw	r2, #19778	; 0x4d42
   15640:	movt	r2, #65363	; 0xff53
   15644:	cmp	r1, r2
   15648:	beq	15654 <__assert_fail@plt+0x3a20>
   1564c:	cmp	r1, #0
   15650:	movne	r0, #1
   15654:	pop	{fp, pc}
   15658:	sub	r2, r1, #1
   1565c:	mov	r1, #0
   15660:	cmp	r2, #11
   15664:	movwls	r1, #46896	; 0xb730
   15668:	movtls	r1, #1
   1566c:	ldrls	r1, [r1, r2, lsl #2]
   15670:	str	r1, [r0, #16]
   15674:	bx	lr
   15678:	push	{fp, lr}
   1567c:	mov	fp, sp
   15680:	bl	1577c <__assert_fail@plt+0x3b48>
   15684:	mov	r1, r0
   15688:	mov	r0, #0
   1568c:	movw	r2, #19778	; 0x4d42
   15690:	movt	r2, #65363	; 0xff53
   15694:	cmp	r1, r2
   15698:	movwne	r2, #26985	; 0x6969
   1569c:	cmpne	r1, r2
   156a0:	bne	156a8 <__assert_fail@plt+0x3a74>
   156a4:	pop	{fp, pc}
   156a8:	movw	r2, #6548	; 0x1994
   156ac:	movt	r2, #258	; 0x102
   156b0:	cmp	r1, r2
   156b4:	movne	r0, #1
   156b8:	pop	{fp, pc}
   156bc:	ldr	r2, [r0, #4]
   156c0:	ldr	ip, [r0, #24]
   156c4:	cmp	r2, #0
   156c8:	beq	156f8 <__assert_fail@plt+0x3ac4>
   156cc:	ldr	r3, [r2, #24]
   156d0:	add	r0, r2, #168	; 0xa8
   156d4:	cmp	r3, r0
   156d8:	ldrne	r0, [r2, #28]
   156dc:	subne	r0, r3, r0
   156e0:	addne	r0, ip, r0
   156e4:	strne	r0, [r2, #24]
   156e8:	str	ip, [r2, #28]
   156ec:	ldr	r2, [r2, #8]
   156f0:	cmp	r2, #0
   156f4:	bne	156cc <__assert_fail@plt+0x3a98>
   156f8:	ldr	r2, [r1, #48]	; 0x30
   156fc:	cmp	r2, #0
   15700:	bxlt	lr
   15704:	ldr	r2, [r1, #24]
   15708:	add	r0, r1, #168	; 0xa8
   1570c:	cmp	r2, r0
   15710:	ldrne	r0, [r1, #28]
   15714:	subne	r0, r2, r0
   15718:	addne	r0, ip, r0
   1571c:	strne	r0, [r1, #24]
   15720:	str	ip, [r1, #28]
   15724:	ldr	r2, [r1, #8]
   15728:	cmp	r2, #0
   1572c:	ldreq	r2, [r1, #4]
   15730:	ldr	r0, [r2, #48]	; 0x30
   15734:	cmn	r0, #1
   15738:	mov	r1, r2
   1573c:	bgt	15704 <__assert_fail@plt+0x3ad0>
   15740:	bx	lr
   15744:	push	{r4, r5, fp, lr}
   15748:	add	fp, sp, #8
   1574c:	ldr	r0, [r0]
   15750:	ldrd	r2, [r0, #160]	; 0xa0
   15754:	ldr	r0, [r1]
   15758:	ldrd	r4, [r0, #160]	; 0xa0
   1575c:	mov	r0, #0
   15760:	subs	r1, r4, r2
   15764:	sbcs	r1, r5, r3
   15768:	movwcc	r0, #1
   1576c:	subs	r1, r2, r4
   15770:	sbcs	r1, r3, r5
   15774:	subcc	r0, r0, #1
   15778:	pop	{r4, r5, fp, pc}
   1577c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15780:	add	fp, sp, #24
   15784:	sub	sp, sp, #96	; 0x60
   15788:	mov	r4, r0
   1578c:	ldr	r7, [r0, #44]	; 0x2c
   15790:	ldrb	r0, [r7, #49]	; 0x31
   15794:	mov	r5, #0
   15798:	tst	r0, #2
   1579c:	beq	15898 <__assert_fail@plt+0x3c64>
   157a0:	mov	r9, r1
   157a4:	ldr	r6, [r7, #52]	; 0x34
   157a8:	cmp	r6, #0
   157ac:	bne	157ec <__assert_fail@plt+0x3bb8>
   157b0:	movw	r0, #14272	; 0x37c0
   157b4:	movt	r0, #1
   157b8:	str	r0, [sp]
   157bc:	mov	r8, #0
   157c0:	movw	r2, #22692	; 0x58a4
   157c4:	movt	r2, #1
   157c8:	movw	r3, #22724	; 0x58c4
   157cc:	movt	r3, #1
   157d0:	mov	r0, #13
   157d4:	mov	r1, #0
   157d8:	bl	15d38 <__assert_fail@plt+0x4104>
   157dc:	mov	r6, r0
   157e0:	str	r0, [r7, #52]	; 0x34
   157e4:	cmp	r0, #0
   157e8:	beq	15824 <__assert_fail@plt+0x3bf0>
   157ec:	ldrd	r0, [r4, #64]	; 0x40
   157f0:	str	r1, [sp, #12]
   157f4:	str	r0, [sp, #8]
   157f8:	add	r1, sp, #8
   157fc:	mov	r0, r6
   15800:	bl	15ab0 <__assert_fail@plt+0x3e7c>
   15804:	cmp	r0, #0
   15808:	beq	15814 <__assert_fail@plt+0x3be0>
   1580c:	ldr	r5, [r0, #8]
   15810:	b	15898 <__assert_fail@plt+0x3c64>
   15814:	mov	r8, #1
   15818:	cmp	r9, #0
   1581c:	bge	15830 <__assert_fail@plt+0x3bfc>
   15820:	b	15898 <__assert_fail@plt+0x3c64>
   15824:	mov	r6, #0
   15828:	cmp	r9, #0
   1582c:	blt	15898 <__assert_fail@plt+0x3c64>
   15830:	add	r1, sp, #8
   15834:	mov	r0, r9
   15838:	bl	117e4 <fstatfs64@plt>
   1583c:	cmp	r0, #0
   15840:	bne	15898 <__assert_fail@plt+0x3c64>
   15844:	cmp	r8, #0
   15848:	beq	15894 <__assert_fail@plt+0x3c60>
   1584c:	mov	r0, #16
   15850:	bl	19e70 <lchmod@@Base+0x3524>
   15854:	cmp	r0, #0
   15858:	beq	15894 <__assert_fail@plt+0x3c60>
   1585c:	mov	r5, r0
   15860:	ldrd	r0, [r4, #64]	; 0x40
   15864:	ldr	r2, [sp, #8]
   15868:	stm	r5, {r0, r1, r2}
   1586c:	mov	r0, r6
   15870:	mov	r1, r5
   15874:	bl	165c8 <__assert_fail@plt+0x4994>
   15878:	cmp	r0, #0
   1587c:	beq	1588c <__assert_fail@plt+0x3c58>
   15880:	cmp	r0, r5
   15884:	beq	15894 <__assert_fail@plt+0x3c60>
   15888:	bl	11bd4 <abort@plt>
   1588c:	mov	r0, r5
   15890:	bl	137c0 <__assert_fail@plt+0x1b8c>
   15894:	ldr	r5, [sp, #8]
   15898:	mov	r0, r5
   1589c:	sub	sp, fp, #24
   158a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   158a4:	push	{fp, lr}
   158a8:	mov	fp, sp
   158ac:	mov	r2, r1
   158b0:	ldrd	r0, [r0]
   158b4:	mov	r3, #0
   158b8:	bl	1abe4 <lchmod@@Base+0x4298>
   158bc:	mov	r0, r2
   158c0:	pop	{fp, pc}
   158c4:	ldrd	r2, [r1]
   158c8:	ldrd	r0, [r0]
   158cc:	eor	r1, r1, r3
   158d0:	eor	r0, r0, r2
   158d4:	orr	r0, r0, r1
   158d8:	clz	r0, r0
   158dc:	lsr	r0, r0, #5
   158e0:	bx	lr
   158e4:	andeq	r0, r0, r0
   158e8:	ldr	r0, [r0, #8]
   158ec:	bx	lr
   158f0:	ldr	r0, [r0, #12]
   158f4:	bx	lr
   158f8:	ldr	r0, [r0, #16]
   158fc:	bx	lr
   15900:	mov	r2, r0
   15904:	ldm	r0, {r1, r3}
   15908:	mov	r0, #0
   1590c:	cmp	r1, r3
   15910:	bxcs	lr
   15914:	ldr	ip, [r2, #4]
   15918:	mov	r0, #0
   1591c:	ldr	r2, [r1]
   15920:	cmp	r2, #0
   15924:	beq	15948 <__assert_fail@plt+0x3d14>
   15928:	mov	r3, #0
   1592c:	mov	r2, r1
   15930:	add	r3, r3, #1
   15934:	ldr	r2, [r2, #4]
   15938:	cmp	r2, #0
   1593c:	bne	15930 <__assert_fail@plt+0x3cfc>
   15940:	cmp	r3, r0
   15944:	movhi	r0, r3
   15948:	add	r1, r1, #8
   1594c:	cmp	r1, ip
   15950:	bcc	1591c <__assert_fail@plt+0x3ce8>
   15954:	bx	lr
   15958:	push	{fp, lr}
   1595c:	mov	fp, sp
   15960:	ldr	r3, [r0]
   15964:	ldr	r1, [r0, #4]
   15968:	mov	lr, #0
   1596c:	cmp	r3, r1
   15970:	mov	r1, #0
   15974:	bcs	159b4 <__assert_fail@plt+0x3d80>
   15978:	ldr	ip, [r0, #4]
   1597c:	mov	r1, #0
   15980:	mov	lr, #0
   15984:	ldr	r2, [r3]
   15988:	cmp	r2, #0
   1598c:	beq	159a8 <__assert_fail@plt+0x3d74>
   15990:	mov	r2, r3
   15994:	add	r1, r1, #1
   15998:	ldr	r2, [r2, #4]
   1599c:	cmp	r2, #0
   159a0:	bne	15994 <__assert_fail@plt+0x3d60>
   159a4:	add	lr, lr, #1
   159a8:	add	r3, r3, #8
   159ac:	cmp	r3, ip
   159b0:	bcc	15984 <__assert_fail@plt+0x3d50>
   159b4:	ldr	r2, [r0, #12]
   159b8:	cmp	lr, r2
   159bc:	bne	159d4 <__assert_fail@plt+0x3da0>
   159c0:	ldr	r2, [r0, #16]
   159c4:	mov	r0, #1
   159c8:	cmp	r1, r2
   159cc:	movne	r0, #0
   159d0:	pop	{fp, pc}
   159d4:	mov	r0, #0
   159d8:	pop	{fp, pc}
   159dc:	nop	{0}
   159e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159e4:	add	fp, sp, #24
   159e8:	sub	sp, sp, #8
   159ec:	mov	r4, r1
   159f0:	mov	r5, r0
   159f4:	bl	158f8 <__assert_fail@plt+0x3cc4>
   159f8:	mov	r8, r0
   159fc:	mov	r0, r5
   15a00:	bl	158e8 <__assert_fail@plt+0x3cb4>
   15a04:	mov	r7, r0
   15a08:	mov	r0, r5
   15a0c:	bl	158f0 <__assert_fail@plt+0x3cbc>
   15a10:	mov	r6, r0
   15a14:	mov	r0, r5
   15a18:	bl	15900 <__assert_fail@plt+0x3ccc>
   15a1c:	mov	r5, r0
   15a20:	movw	r2, #46944	; 0xb760
   15a24:	movt	r2, #1
   15a28:	mov	r0, r4
   15a2c:	mov	r1, #1
   15a30:	mov	r3, r8
   15a34:	bl	11ac0 <__fprintf_chk@plt>
   15a38:	movw	r2, #46968	; 0xb778
   15a3c:	movt	r2, #1
   15a40:	mov	r0, r4
   15a44:	mov	r1, #1
   15a48:	mov	r3, r7
   15a4c:	bl	11ac0 <__fprintf_chk@plt>
   15a50:	vldr	d16, [pc, #80]	; 15aa8 <__assert_fail@plt+0x3e74>
   15a54:	vmov	s0, r6
   15a58:	vmov	s2, r7
   15a5c:	vcvt.f64.u32	d17, s0
   15a60:	vcvt.f64.u32	d18, s2
   15a64:	vmul.f64	d16, d17, d16
   15a68:	vdiv.f64	d16, d16, d18
   15a6c:	vstr	d16, [sp]
   15a70:	movw	r2, #46992	; 0xb790
   15a74:	movt	r2, #1
   15a78:	mov	r0, r4
   15a7c:	mov	r1, #1
   15a80:	mov	r3, r6
   15a84:	bl	11ac0 <__fprintf_chk@plt>
   15a88:	movw	r2, #47025	; 0xb7b1
   15a8c:	movt	r2, #1
   15a90:	mov	r0, r4
   15a94:	mov	r1, #1
   15a98:	mov	r3, r5
   15a9c:	sub	sp, fp, #24
   15aa0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15aa4:	b	11ac0 <__fprintf_chk@plt>
   15aa8:	andeq	r0, r0, r0
   15aac:	subsmi	r0, r9, r0
   15ab0:	push	{r4, r5, r6, r7, fp, lr}
   15ab4:	add	fp, sp, #16
   15ab8:	mov	r5, r1
   15abc:	mov	r6, r0
   15ac0:	bl	15b14 <__assert_fail@plt+0x3ee0>
   15ac4:	mov	r7, r0
   15ac8:	ldr	r0, [r0]
   15acc:	mov	r4, #0
   15ad0:	cmp	r0, #0
   15ad4:	bne	15ae0 <__assert_fail@plt+0x3eac>
   15ad8:	b	15b0c <__assert_fail@plt+0x3ed8>
   15adc:	ldr	r7, [r7, #4]
   15ae0:	cmp	r7, #0
   15ae4:	beq	15b0c <__assert_fail@plt+0x3ed8>
   15ae8:	ldr	r1, [r7]
   15aec:	cmp	r1, r5
   15af0:	beq	15b08 <__assert_fail@plt+0x3ed4>
   15af4:	ldr	r2, [r6, #28]
   15af8:	mov	r0, r5
   15afc:	blx	r2
   15b00:	cmp	r0, #0
   15b04:	beq	15adc <__assert_fail@plt+0x3ea8>
   15b08:	ldr	r4, [r7]
   15b0c:	mov	r0, r4
   15b10:	pop	{r4, r5, r6, r7, fp, pc}
   15b14:	push	{r4, sl, fp, lr}
   15b18:	add	fp, sp, #8
   15b1c:	mov	r2, r1
   15b20:	mov	r4, r0
   15b24:	ldr	r1, [r0, #8]
   15b28:	ldr	r3, [r0, #24]
   15b2c:	mov	r0, r2
   15b30:	blx	r3
   15b34:	ldr	r1, [r4, #8]
   15b38:	cmp	r0, r1
   15b3c:	ldrcc	r1, [r4]
   15b40:	addcc	r0, r1, r0, lsl #3
   15b44:	popcc	{r4, sl, fp, pc}
   15b48:	bl	11bd4 <abort@plt>
   15b4c:	ldr	r1, [r0, #16]
   15b50:	cmp	r1, #0
   15b54:	moveq	r1, #0
   15b58:	moveq	r0, r1
   15b5c:	bxeq	lr
   15b60:	ldr	r2, [r0]
   15b64:	b	15b78 <__assert_fail@plt+0x3f44>
   15b68:	ldr	r1, [r2], #8
   15b6c:	cmp	r1, #0
   15b70:	movne	r0, r1
   15b74:	bxne	lr
   15b78:	ldr	r1, [r0, #4]
   15b7c:	cmp	r2, r1
   15b80:	bcc	15b68 <__assert_fail@plt+0x3f34>
   15b84:	push	{fp, lr}
   15b88:	mov	fp, sp
   15b8c:	bl	11bd4 <abort@plt>
   15b90:	push	{r4, r5, fp, lr}
   15b94:	add	fp, sp, #8
   15b98:	mov	r5, r1
   15b9c:	mov	r4, r0
   15ba0:	bl	15b14 <__assert_fail@plt+0x3ee0>
   15ba4:	mov	r1, r0
   15ba8:	ldr	r2, [r1]
   15bac:	cmp	r2, r5
   15bb0:	bne	15bc4 <__assert_fail@plt+0x3f90>
   15bb4:	ldr	r2, [r1, #4]
   15bb8:	cmp	r2, #0
   15bbc:	ldrne	r0, [r2]
   15bc0:	popne	{r4, r5, fp, pc}
   15bc4:	ldr	r1, [r1, #4]
   15bc8:	cmp	r1, #0
   15bcc:	bne	15ba8 <__assert_fail@plt+0x3f74>
   15bd0:	add	r1, r0, #8
   15bd4:	ldr	r2, [r4, #4]
   15bd8:	cmp	r1, r2
   15bdc:	movcs	r0, #0
   15be0:	popcs	{r4, r5, fp, pc}
   15be4:	ldr	r0, [r1], #8
   15be8:	cmp	r0, #0
   15bec:	popne	{r4, r5, fp, pc}
   15bf0:	b	15bd8 <__assert_fail@plt+0x3fa4>
   15bf4:	push	{r4, sl, fp, lr}
   15bf8:	add	fp, sp, #8
   15bfc:	mov	ip, r0
   15c00:	ldr	lr, [r0]
   15c04:	ldr	r3, [r0, #4]
   15c08:	mov	r0, #0
   15c0c:	cmp	lr, r3
   15c10:	bcs	15c5c <__assert_fail@plt+0x4028>
   15c14:	mov	r0, #0
   15c18:	ldr	r3, [lr]
   15c1c:	cmp	r3, #0
   15c20:	cmpne	lr, #0
   15c24:	beq	15c4c <__assert_fail@plt+0x4018>
   15c28:	mov	r3, lr
   15c2c:	cmp	r0, r2
   15c30:	popcs	{r4, sl, fp, pc}
   15c34:	ldr	r4, [r3]
   15c38:	str	r4, [r1, r0, lsl #2]
   15c3c:	add	r0, r0, #1
   15c40:	ldr	r3, [r3, #4]
   15c44:	cmp	r3, #0
   15c48:	bne	15c2c <__assert_fail@plt+0x3ff8>
   15c4c:	ldr	r3, [ip, #4]
   15c50:	add	lr, lr, #8
   15c54:	cmp	lr, r3
   15c58:	bcc	15c18 <__assert_fail@plt+0x3fe4>
   15c5c:	pop	{r4, sl, fp, pc}
   15c60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15c64:	add	fp, sp, #24
   15c68:	mov	r8, r0
   15c6c:	ldr	r9, [r0]
   15c70:	ldr	r0, [r0, #4]
   15c74:	mov	r6, #0
   15c78:	cmp	r9, r0
   15c7c:	bcs	15cdc <__assert_fail@plt+0x40a8>
   15c80:	mov	r4, r2
   15c84:	mov	r5, r1
   15c88:	mov	r6, #0
   15c8c:	b	15cbc <__assert_fail@plt+0x4088>
   15c90:	mov	r7, r9
   15c94:	ldr	r0, [r7]
   15c98:	mov	r1, r4
   15c9c:	blx	r5
   15ca0:	cmp	r0, #0
   15ca4:	beq	15cdc <__assert_fail@plt+0x40a8>
   15ca8:	add	r6, r6, #1
   15cac:	ldr	r7, [r7, #4]
   15cb0:	cmp	r7, #0
   15cb4:	bne	15c94 <__assert_fail@plt+0x4060>
   15cb8:	b	15ccc <__assert_fail@plt+0x4098>
   15cbc:	ldr	r0, [r9]
   15cc0:	cmp	r0, #0
   15cc4:	cmpne	r9, #0
   15cc8:	bne	15c90 <__assert_fail@plt+0x405c>
   15ccc:	ldr	r0, [r8, #4]
   15cd0:	add	r9, r9, #8
   15cd4:	cmp	r9, r0
   15cd8:	bcc	15cbc <__assert_fail@plt+0x4088>
   15cdc:	mov	r0, r6
   15ce0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ce4:	ldrb	r2, [r0]
   15ce8:	cmp	r2, #0
   15cec:	moveq	r0, #0
   15cf0:	bxeq	lr
   15cf4:	add	r3, r0, #1
   15cf8:	mov	r0, #0
   15cfc:	rsb	r0, r0, r0, lsl #5
   15d00:	uxtab	r0, r0, r2
   15d04:	udiv	r2, r0, r1
   15d08:	mls	r0, r2, r1, r0
   15d0c:	ldrb	r2, [r3], #1
   15d10:	cmp	r2, #0
   15d14:	bne	15cfc <__assert_fail@plt+0x40c8>
   15d18:	bx	lr
   15d1c:	movw	r1, #47056	; 0xb7d0
   15d20:	movt	r1, #1
   15d24:	vld1.32	{d16-d17}, [r1]!
   15d28:	vst1.32	{d16-d17}, [r0]!
   15d2c:	ldr	r1, [r1]
   15d30:	str	r1, [r0]
   15d34:	bx	lr
   15d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d3c:	add	fp, sp, #28
   15d40:	sub	sp, sp, #4
   15d44:	mov	r7, r1
   15d48:	mov	r8, r0
   15d4c:	movw	sl, #24120	; 0x5e38
   15d50:	movt	sl, #1
   15d54:	cmp	r3, #0
   15d58:	movne	sl, r3
   15d5c:	movw	r5, #24088	; 0x5e18
   15d60:	movt	r5, #1
   15d64:	cmp	r2, #0
   15d68:	movne	r5, r2
   15d6c:	mov	r0, #40	; 0x28
   15d70:	bl	19e70 <lchmod@@Base+0x3524>
   15d74:	mov	r9, #0
   15d78:	cmp	r0, #0
   15d7c:	beq	15e0c <__assert_fail@plt+0x41d8>
   15d80:	mov	r4, r0
   15d84:	movw	r6, #47056	; 0xb7d0
   15d88:	movt	r6, #1
   15d8c:	cmp	r7, #0
   15d90:	movne	r6, r7
   15d94:	str	r6, [r0, #20]
   15d98:	bl	15e48 <__assert_fail@plt+0x4214>
   15d9c:	cmp	r0, #0
   15da0:	beq	15e04 <__assert_fail@plt+0x41d0>
   15da4:	mov	r0, r8
   15da8:	mov	r1, r6
   15dac:	bl	15ef4 <__assert_fail@plt+0x42c0>
   15db0:	str	r0, [r4, #8]
   15db4:	cmp	r0, #0
   15db8:	beq	15e04 <__assert_fail@plt+0x41d0>
   15dbc:	mov	r1, #8
   15dc0:	bl	19e1c <lchmod@@Base+0x34d0>
   15dc4:	str	r0, [r4]
   15dc8:	cmp	r0, #0
   15dcc:	beq	15e04 <__assert_fail@plt+0x41d0>
   15dd0:	ldr	r1, [fp, #8]
   15dd4:	mov	r2, #0
   15dd8:	str	r2, [r4, #12]
   15ddc:	str	r2, [r4, #16]
   15de0:	str	r5, [r4, #24]
   15de4:	str	sl, [r4, #28]
   15de8:	str	r1, [r4, #32]
   15dec:	str	r2, [r4, #36]	; 0x24
   15df0:	ldr	r1, [r4, #8]
   15df4:	add	r0, r0, r1, lsl #3
   15df8:	str	r0, [r4, #4]
   15dfc:	mov	r9, r4
   15e00:	b	15e0c <__assert_fail@plt+0x41d8>
   15e04:	mov	r0, r4
   15e08:	bl	137c0 <__assert_fail@plt+0x1b8c>
   15e0c:	mov	r0, r9
   15e10:	sub	sp, fp, #28
   15e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e18:	push	{r4, sl, fp, lr}
   15e1c:	add	fp, sp, #8
   15e20:	mov	r4, r1
   15e24:	mov	r1, #3
   15e28:	bl	1a054 <lchmod@@Base+0x3708>
   15e2c:	udiv	r1, r0, r4
   15e30:	mls	r0, r1, r4, r0
   15e34:	pop	{r4, sl, fp, pc}
   15e38:	sub	r0, r0, r1
   15e3c:	clz	r0, r0
   15e40:	lsr	r0, r0, #5
   15e44:	bx	lr
   15e48:	mov	r1, r0
   15e4c:	ldr	r3, [r0, #20]
   15e50:	mov	r0, #1
   15e54:	movw	r2, #47056	; 0xb7d0
   15e58:	movt	r2, #1
   15e5c:	cmp	r3, r2
   15e60:	beq	15ee4 <__assert_fail@plt+0x42b0>
   15e64:	vldr	s2, [pc, #124]	; 15ee8 <__assert_fail@plt+0x42b4>
   15e68:	vldr	s0, [r3, #8]
   15e6c:	vcmpe.f32	s0, s2
   15e70:	vmrs	APSR_nzcv, fpscr
   15e74:	ble	15edc <__assert_fail@plt+0x42a8>
   15e78:	vldr	s4, [pc, #108]	; 15eec <__assert_fail@plt+0x42b8>
   15e7c:	vcmpe.f32	s0, s4
   15e80:	vmrs	APSR_nzcv, fpscr
   15e84:	bpl	15edc <__assert_fail@plt+0x42a8>
   15e88:	vldr	s4, [pc, #96]	; 15ef0 <__assert_fail@plt+0x42bc>
   15e8c:	vldr	s6, [r3, #12]
   15e90:	vcmpe.f32	s6, s4
   15e94:	vmrs	APSR_nzcv, fpscr
   15e98:	ble	15edc <__assert_fail@plt+0x42a8>
   15e9c:	vldr	s4, [r3]
   15ea0:	vcmpe.f32	s4, #0.0
   15ea4:	vmrs	APSR_nzcv, fpscr
   15ea8:	blt	15edc <__assert_fail@plt+0x42a8>
   15eac:	vadd.f32	s2, s4, s2
   15eb0:	vcmpe.f32	s2, s0
   15eb4:	vmrs	APSR_nzcv, fpscr
   15eb8:	bpl	15edc <__assert_fail@plt+0x42a8>
   15ebc:	vldr	s0, [r3, #4]
   15ec0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15ec4:	vcmpe.f32	s0, s4
   15ec8:	vmrs	APSR_nzcv, fpscr
   15ecc:	bhi	15edc <__assert_fail@plt+0x42a8>
   15ed0:	vcmpe.f32	s2, s0
   15ed4:	vmrs	APSR_nzcv, fpscr
   15ed8:	bxmi	lr
   15edc:	str	r2, [r1, #20]
   15ee0:	mov	r0, #0
   15ee4:	bx	lr
   15ee8:	stclcc	12, cr12, [ip, #820]	; 0x334
   15eec:	svccc	0x00666666
   15ef0:	svccc	0x008ccccd
   15ef4:	ldrb	r2, [r1, #16]
   15ef8:	cmp	r2, #0
   15efc:	bne	15f2c <__assert_fail@plt+0x42f8>
   15f00:	vldr	s0, [r1, #8]
   15f04:	vmov	s2, r0
   15f08:	vcvt.f32.u32	s2, s2
   15f0c:	vdiv.f32	s2, s2, s0
   15f10:	vcvt.u32.f32	s0, s2
   15f14:	vldr	s4, [pc, #44]	; 15f48 <__assert_fail@plt+0x4314>
   15f18:	mov	r0, #0
   15f1c:	vcmpe.f32	s2, s4
   15f20:	vmrs	APSR_nzcv, fpscr
   15f24:	bxge	lr
   15f28:	vmov	r0, s0
   15f2c:	push	{fp, lr}
   15f30:	mov	fp, sp
   15f34:	bl	16718 <__assert_fail@plt+0x4ae4>
   15f38:	cmn	r0, #-536870911	; 0xe0000001
   15f3c:	movwhi	r0, #0
   15f40:	pop	{fp, lr}
   15f44:	bx	lr
   15f48:	svcmi	0x00800000
   15f4c:	push	{r4, r5, r6, r7, fp, lr}
   15f50:	add	fp, sp, #16
   15f54:	mov	r4, r0
   15f58:	ldr	r5, [r0]
   15f5c:	ldr	r0, [r0, #4]
   15f60:	cmp	r5, r0
   15f64:	bcs	15ffc <__assert_fail@plt+0x43c8>
   15f68:	mov	r6, #0
   15f6c:	ldr	r0, [r5]
   15f70:	cmp	r0, #0
   15f74:	beq	15fec <__assert_fail@plt+0x43b8>
   15f78:	ldr	r7, [r5, #4]
   15f7c:	ldr	r1, [r4, #32]
   15f80:	cmp	r1, #0
   15f84:	mov	r0, r1
   15f88:	movwne	r0, #1
   15f8c:	cmp	r7, #0
   15f90:	beq	15fd4 <__assert_fail@plt+0x43a0>
   15f94:	tst	r0, #1
   15f98:	beq	15fa4 <__assert_fail@plt+0x4370>
   15f9c:	ldr	r0, [r7]
   15fa0:	blx	r1
   15fa4:	str	r6, [r7]
   15fa8:	ldr	r2, [r7, #4]
   15fac:	ldr	r0, [r4, #36]	; 0x24
   15fb0:	str	r0, [r7, #4]
   15fb4:	str	r7, [r4, #36]	; 0x24
   15fb8:	ldr	r1, [r4, #32]
   15fbc:	cmp	r1, #0
   15fc0:	mov	r0, r1
   15fc4:	movwne	r0, #1
   15fc8:	cmp	r2, #0
   15fcc:	mov	r7, r2
   15fd0:	bne	15f94 <__assert_fail@plt+0x4360>
   15fd4:	cmp	r0, #0
   15fd8:	beq	15fe4 <__assert_fail@plt+0x43b0>
   15fdc:	ldr	r0, [r5]
   15fe0:	blx	r1
   15fe4:	str	r6, [r5]
   15fe8:	str	r6, [r5, #4]
   15fec:	ldr	r0, [r4, #4]
   15ff0:	add	r5, r5, #8
   15ff4:	cmp	r5, r0
   15ff8:	bcc	15f6c <__assert_fail@plt+0x4338>
   15ffc:	mov	r0, #0
   16000:	str	r0, [r4, #12]
   16004:	str	r0, [r4, #16]
   16008:	pop	{r4, r5, r6, r7, fp, pc}
   1600c:	push	{r4, r5, r6, sl, fp, lr}
   16010:	add	fp, sp, #16
   16014:	mov	r4, r0
   16018:	ldr	r0, [r0, #32]
   1601c:	cmp	r0, #0
   16020:	ldrne	r0, [r4, #16]
   16024:	cmpne	r0, #0
   16028:	beq	16080 <__assert_fail@plt+0x444c>
   1602c:	ldr	r5, [r4]
   16030:	ldr	r0, [r4, #4]
   16034:	cmp	r5, r0
   16038:	bcc	16050 <__assert_fail@plt+0x441c>
   1603c:	b	16080 <__assert_fail@plt+0x444c>
   16040:	ldr	r0, [r4, #4]
   16044:	add	r5, r5, #8
   16048:	cmp	r5, r0
   1604c:	bcs	16080 <__assert_fail@plt+0x444c>
   16050:	ldr	r0, [r5]
   16054:	cmp	r0, #0
   16058:	cmpne	r5, #0
   1605c:	beq	16040 <__assert_fail@plt+0x440c>
   16060:	mov	r6, r5
   16064:	ldr	r0, [r6]
   16068:	ldr	r1, [r4, #32]
   1606c:	blx	r1
   16070:	ldr	r6, [r6, #4]
   16074:	cmp	r6, #0
   16078:	bne	16064 <__assert_fail@plt+0x4430>
   1607c:	b	16040 <__assert_fail@plt+0x440c>
   16080:	ldr	r5, [r4]
   16084:	ldr	r0, [r4, #4]
   16088:	cmp	r5, r0
   1608c:	bcc	160a4 <__assert_fail@plt+0x4470>
   16090:	b	160c8 <__assert_fail@plt+0x4494>
   16094:	ldr	r0, [r4, #4]
   16098:	add	r5, r5, #8
   1609c:	cmp	r5, r0
   160a0:	bcs	160c8 <__assert_fail@plt+0x4494>
   160a4:	ldr	r0, [r5, #4]
   160a8:	cmp	r0, #0
   160ac:	beq	16094 <__assert_fail@plt+0x4460>
   160b0:	ldr	r6, [r0, #4]
   160b4:	bl	137c0 <__assert_fail@plt+0x1b8c>
   160b8:	cmp	r6, #0
   160bc:	mov	r0, r6
   160c0:	bne	160b0 <__assert_fail@plt+0x447c>
   160c4:	b	16094 <__assert_fail@plt+0x4460>
   160c8:	ldr	r0, [r4, #36]	; 0x24
   160cc:	cmp	r0, #0
   160d0:	beq	160e8 <__assert_fail@plt+0x44b4>
   160d4:	ldr	r5, [r0, #4]
   160d8:	bl	137c0 <__assert_fail@plt+0x1b8c>
   160dc:	cmp	r5, #0
   160e0:	mov	r0, r5
   160e4:	bne	160d4 <__assert_fail@plt+0x44a0>
   160e8:	ldr	r0, [r4]
   160ec:	bl	137c0 <__assert_fail@plt+0x1b8c>
   160f0:	mov	r0, r4
   160f4:	pop	{r4, r5, r6, sl, fp, lr}
   160f8:	b	137c0 <__assert_fail@plt+0x1b8c>
   160fc:	push	{r4, r5, r6, sl, fp, lr}
   16100:	add	fp, sp, #16
   16104:	sub	sp, sp, #40	; 0x28
   16108:	mov	r2, r1
   1610c:	mov	r4, r0
   16110:	ldr	r1, [r0, #20]
   16114:	mov	r0, r2
   16118:	bl	15ef4 <__assert_fail@plt+0x42c0>
   1611c:	mov	r5, #0
   16120:	cmp	r0, #0
   16124:	beq	16200 <__assert_fail@plt+0x45cc>
   16128:	mov	r6, r0
   1612c:	ldr	r0, [r4, #8]
   16130:	cmp	r6, r0
   16134:	bne	16140 <__assert_fail@plt+0x450c>
   16138:	mov	r5, #1
   1613c:	b	16200 <__assert_fail@plt+0x45cc>
   16140:	mov	r0, r6
   16144:	mov	r1, #8
   16148:	bl	19e1c <lchmod@@Base+0x34d0>
   1614c:	str	r0, [sp]
   16150:	cmp	r0, #0
   16154:	beq	16200 <__assert_fail@plt+0x45cc>
   16158:	str	r6, [sp, #8]
   1615c:	mov	r0, #0
   16160:	str	r0, [sp, #12]
   16164:	str	r0, [sp, #16]
   16168:	ldr	r0, [sp]
   1616c:	add	r0, r0, r6, lsl #3
   16170:	str	r0, [sp, #4]
   16174:	add	r6, r4, #20
   16178:	ldm	r6, {r0, r1, r2, r3, r6}
   1617c:	add	ip, sp, #20
   16180:	stm	ip, {r0, r1, r2, r3, r6}
   16184:	mov	r0, sp
   16188:	mov	r1, r4
   1618c:	mov	r2, #0
   16190:	bl	16210 <__assert_fail@plt+0x45dc>
   16194:	cmp	r0, #0
   16198:	beq	161bc <__assert_fail@plt+0x4588>
   1619c:	ldr	r0, [r4]
   161a0:	bl	137c0 <__assert_fail@plt+0x1b8c>
   161a4:	ldm	sp, {r0, r1, r2, r3}
   161a8:	stm	r4, {r0, r1, r2, r3}
   161ac:	ldr	r0, [sp, #36]	; 0x24
   161b0:	str	r0, [r4, #36]	; 0x24
   161b4:	mov	r5, #1
   161b8:	b	16200 <__assert_fail@plt+0x45cc>
   161bc:	ldr	r0, [sp, #36]	; 0x24
   161c0:	str	r0, [r4, #36]	; 0x24
   161c4:	mov	r1, sp
   161c8:	mov	r0, r4
   161cc:	mov	r2, #1
   161d0:	bl	16210 <__assert_fail@plt+0x45dc>
   161d4:	cmp	r0, #0
   161d8:	beq	1620c <__assert_fail@plt+0x45d8>
   161dc:	mov	r1, sp
   161e0:	mov	r5, #0
   161e4:	mov	r0, r4
   161e8:	mov	r2, #0
   161ec:	bl	16210 <__assert_fail@plt+0x45dc>
   161f0:	cmp	r0, #0
   161f4:	beq	1620c <__assert_fail@plt+0x45d8>
   161f8:	ldr	r0, [sp]
   161fc:	bl	137c0 <__assert_fail@plt+0x1b8c>
   16200:	mov	r0, r5
   16204:	sub	sp, fp, #16
   16208:	pop	{r4, r5, r6, sl, fp, pc}
   1620c:	bl	11bd4 <abort@plt>
   16210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16214:	add	fp, sp, #28
   16218:	sub	sp, sp, #4
   1621c:	mov	r7, r0
   16220:	ldr	r6, [r1]
   16224:	ldr	r0, [r1, #4]
   16228:	cmp	r6, r0
   1622c:	bcs	16330 <__assert_fail@plt+0x46fc>
   16230:	mov	r9, r2
   16234:	mov	sl, r1
   16238:	ldr	r0, [r6]
   1623c:	cmp	r0, #0
   16240:	beq	16320 <__assert_fail@plt+0x46ec>
   16244:	ldr	r4, [r6, #4]
   16248:	cmp	r4, #0
   1624c:	beq	162a8 <__assert_fail@plt+0x4674>
   16250:	ldr	r5, [r4]
   16254:	mov	r0, r7
   16258:	mov	r1, r5
   1625c:	bl	15b14 <__assert_fail@plt+0x3ee0>
   16260:	ldr	r1, [r0]
   16264:	ldr	r8, [r4, #4]
   16268:	cmp	r1, #0
   1626c:	beq	16280 <__assert_fail@plt+0x464c>
   16270:	ldr	r1, [r0, #4]
   16274:	str	r1, [r4, #4]
   16278:	str	r4, [r0, #4]
   1627c:	b	1629c <__assert_fail@plt+0x4668>
   16280:	str	r5, [r0]
   16284:	ldr	r0, [r7, #12]
   16288:	add	r0, r0, #1
   1628c:	str	r0, [r7, #12]
   16290:	mov	r0, r7
   16294:	mov	r1, r4
   16298:	bl	167b8 <__assert_fail@plt+0x4b84>
   1629c:	cmp	r8, #0
   162a0:	mov	r4, r8
   162a4:	bne	16250 <__assert_fail@plt+0x461c>
   162a8:	mov	r0, #0
   162ac:	str	r0, [r6, #4]
   162b0:	cmp	r9, #0
   162b4:	bne	16320 <__assert_fail@plt+0x46ec>
   162b8:	ldr	r4, [r6]
   162bc:	mov	r0, r7
   162c0:	mov	r1, r4
   162c4:	bl	15b14 <__assert_fail@plt+0x3ee0>
   162c8:	mov	r5, r0
   162cc:	ldr	r0, [r0]
   162d0:	cmp	r0, #0
   162d4:	beq	162fc <__assert_fail@plt+0x46c8>
   162d8:	mov	r0, r7
   162dc:	bl	1659c <__assert_fail@plt+0x4968>
   162e0:	cmp	r0, #0
   162e4:	beq	1633c <__assert_fail@plt+0x4708>
   162e8:	str	r4, [r0]
   162ec:	ldr	r1, [r5, #4]
   162f0:	str	r1, [r0, #4]
   162f4:	str	r0, [r5, #4]
   162f8:	b	1630c <__assert_fail@plt+0x46d8>
   162fc:	str	r4, [r5]
   16300:	ldr	r0, [r7, #12]
   16304:	add	r0, r0, #1
   16308:	str	r0, [r7, #12]
   1630c:	mov	r0, #0
   16310:	str	r0, [r6]
   16314:	ldr	r0, [sl, #12]
   16318:	sub	r0, r0, #1
   1631c:	str	r0, [sl, #12]
   16320:	add	r6, r6, #8
   16324:	ldr	r0, [sl, #4]
   16328:	cmp	r6, r0
   1632c:	bcc	16238 <__assert_fail@plt+0x4604>
   16330:	mov	r0, #1
   16334:	sub	sp, fp, #28
   16338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1633c:	mov	r0, #0
   16340:	sub	sp, fp, #28
   16344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16348:	push	{r4, r5, r6, r7, fp, lr}
   1634c:	add	fp, sp, #16
   16350:	sub	sp, sp, #8
   16354:	cmp	r1, #0
   16358:	beq	164b8 <__assert_fail@plt+0x4884>
   1635c:	mov	r7, r2
   16360:	mov	r5, r1
   16364:	mov	r4, r0
   16368:	add	r2, sp, #4
   1636c:	mov	r6, #0
   16370:	mov	r3, #0
   16374:	bl	164c0 <__assert_fail@plt+0x488c>
   16378:	cmp	r0, #0
   1637c:	beq	1638c <__assert_fail@plt+0x4758>
   16380:	cmp	r7, #0
   16384:	strne	r0, [r7]
   16388:	b	164ac <__assert_fail@plt+0x4878>
   1638c:	vldr	s0, [r4, #8]
   16390:	vldr	s2, [r4, #12]
   16394:	ldr	r0, [r4, #20]
   16398:	vldr	s4, [r0, #8]
   1639c:	vcvt.f32.u32	s0, s0
   163a0:	vcvt.f32.u32	s2, s2
   163a4:	vmul.f32	s0, s4, s0
   163a8:	vcmpe.f32	s0, s2
   163ac:	vmrs	APSR_nzcv, fpscr
   163b0:	bpl	16444 <__assert_fail@plt+0x4810>
   163b4:	mov	r0, r4
   163b8:	bl	15e48 <__assert_fail@plt+0x4214>
   163bc:	vldr	s0, [r4, #8]
   163c0:	vldr	s4, [r4, #12]
   163c4:	ldr	r0, [r4, #20]
   163c8:	vcvt.f32.u32	s2, s0
   163cc:	vldr	s0, [r0, #8]
   163d0:	vcvt.f32.u32	s4, s4
   163d4:	vmul.f32	s6, s0, s2
   163d8:	vcmpe.f32	s6, s4
   163dc:	vmrs	APSR_nzcv, fpscr
   163e0:	bpl	16444 <__assert_fail@plt+0x4810>
   163e4:	vldr	s4, [r0, #12]
   163e8:	vmul.f32	s2, s4, s2
   163ec:	ldrb	r0, [r0, #16]
   163f0:	vmul.f32	s0, s0, s2
   163f4:	mvn	r6, #0
   163f8:	vldr	s4, [pc, #188]	; 164bc <__assert_fail@plt+0x4888>
   163fc:	cmp	r0, #0
   16400:	vseleq.f32	s0, s0, s2
   16404:	vcmpe.f32	s0, s4
   16408:	vmrs	APSR_nzcv, fpscr
   1640c:	bge	164ac <__assert_fail@plt+0x4878>
   16410:	vcvt.u32.f32	s0, s0
   16414:	vmov	r1, s0
   16418:	mov	r0, r4
   1641c:	bl	160fc <__assert_fail@plt+0x44c8>
   16420:	cmp	r0, #0
   16424:	beq	164ac <__assert_fail@plt+0x4878>
   16428:	add	r2, sp, #4
   1642c:	mov	r0, r4
   16430:	mov	r1, r5
   16434:	mov	r3, #0
   16438:	bl	164c0 <__assert_fail@plt+0x488c>
   1643c:	cmp	r0, #0
   16440:	bne	164b8 <__assert_fail@plt+0x4884>
   16444:	ldr	r6, [sp, #4]
   16448:	ldr	r0, [r6]
   1644c:	cmp	r0, #0
   16450:	beq	16484 <__assert_fail@plt+0x4850>
   16454:	mov	r0, r4
   16458:	bl	1659c <__assert_fail@plt+0x4968>
   1645c:	cmp	r0, #0
   16460:	beq	164a8 <__assert_fail@plt+0x4874>
   16464:	str	r5, [r0]
   16468:	ldr	r1, [r6, #4]
   1646c:	str	r1, [r0, #4]
   16470:	str	r0, [r6, #4]
   16474:	ldr	r0, [r4, #16]
   16478:	add	r0, r0, #1
   1647c:	str	r0, [r4, #16]
   16480:	b	164a0 <__assert_fail@plt+0x486c>
   16484:	str	r5, [r6]
   16488:	ldr	r0, [r4, #12]
   1648c:	ldr	r1, [r4, #16]
   16490:	add	r1, r1, #1
   16494:	add	r0, r0, #1
   16498:	str	r0, [r4, #12]
   1649c:	str	r1, [r4, #16]
   164a0:	mov	r6, #1
   164a4:	b	164ac <__assert_fail@plt+0x4878>
   164a8:	mvn	r6, #0
   164ac:	mov	r0, r6
   164b0:	sub	sp, fp, #16
   164b4:	pop	{r4, r5, r6, r7, fp, pc}
   164b8:	bl	11bd4 <abort@plt>
   164bc:	svcmi	0x00800000
   164c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164c4:	add	fp, sp, #24
   164c8:	mov	r8, r3
   164cc:	mov	r4, r2
   164d0:	mov	r7, r1
   164d4:	mov	r5, r0
   164d8:	bl	15b14 <__assert_fail@plt+0x3ee0>
   164dc:	str	r0, [r4]
   164e0:	ldr	r1, [r0]
   164e4:	mov	r4, #0
   164e8:	cmp	r1, #0
   164ec:	beq	16594 <__assert_fail@plt+0x4960>
   164f0:	mov	r6, r0
   164f4:	cmp	r1, r7
   164f8:	beq	16510 <__assert_fail@plt+0x48dc>
   164fc:	ldr	r2, [r5, #28]
   16500:	mov	r0, r7
   16504:	blx	r2
   16508:	cmp	r0, #0
   1650c:	beq	16538 <__assert_fail@plt+0x4904>
   16510:	ldr	r4, [r6]
   16514:	cmp	r8, #0
   16518:	beq	16594 <__assert_fail@plt+0x4960>
   1651c:	ldr	r1, [r6, #4]
   16520:	cmp	r1, #0
   16524:	beq	1658c <__assert_fail@plt+0x4958>
   16528:	ldm	r1, {r0, r2}
   1652c:	stm	r6, {r0, r2}
   16530:	b	1657c <__assert_fail@plt+0x4948>
   16534:	ldr	r6, [r6]
   16538:	ldr	r0, [r6, #4]!
   1653c:	cmp	r0, #0
   16540:	beq	16594 <__assert_fail@plt+0x4960>
   16544:	ldr	r1, [r0]
   16548:	cmp	r1, r7
   1654c:	beq	16564 <__assert_fail@plt+0x4930>
   16550:	ldr	r2, [r5, #28]
   16554:	mov	r0, r7
   16558:	blx	r2
   1655c:	cmp	r0, #0
   16560:	beq	16534 <__assert_fail@plt+0x4900>
   16564:	ldr	r1, [r6]
   16568:	ldr	r4, [r1]
   1656c:	cmp	r8, #0
   16570:	beq	16594 <__assert_fail@plt+0x4960>
   16574:	ldr	r0, [r1, #4]
   16578:	str	r0, [r6]
   1657c:	mov	r0, r5
   16580:	bl	167b8 <__assert_fail@plt+0x4b84>
   16584:	mov	r0, r4
   16588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1658c:	mov	r0, #0
   16590:	str	r0, [r6]
   16594:	mov	r0, r4
   16598:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1659c:	mov	r1, r0
   165a0:	ldr	r0, [r0, #36]	; 0x24
   165a4:	cmp	r0, #0
   165a8:	ldrne	r2, [r0, #4]
   165ac:	strne	r2, [r1, #36]	; 0x24
   165b0:	bxne	lr
   165b4:	push	{fp, lr}
   165b8:	mov	fp, sp
   165bc:	mov	r0, #8
   165c0:	bl	19e70 <lchmod@@Base+0x3524>
   165c4:	pop	{fp, pc}
   165c8:	push	{r4, sl, fp, lr}
   165cc:	add	fp, sp, #8
   165d0:	sub	sp, sp, #8
   165d4:	mov	r4, r1
   165d8:	add	r2, sp, #4
   165dc:	bl	16348 <__assert_fail@plt+0x4714>
   165e0:	cmn	r0, #1
   165e4:	beq	165f8 <__assert_fail@plt+0x49c4>
   165e8:	ldr	r1, [sp, #4]
   165ec:	cmp	r0, #0
   165f0:	moveq	r4, r1
   165f4:	b	165fc <__assert_fail@plt+0x49c8>
   165f8:	mov	r4, #0
   165fc:	mov	r0, r4
   16600:	sub	sp, fp, #8
   16604:	pop	{r4, sl, fp, pc}
   16608:	push	{r4, r5, r6, sl, fp, lr}
   1660c:	add	fp, sp, #16
   16610:	sub	sp, sp, #8
   16614:	mov	r4, r0
   16618:	add	r2, sp, #4
   1661c:	mov	r3, #1
   16620:	bl	164c0 <__assert_fail@plt+0x488c>
   16624:	mov	r5, r0
   16628:	cmp	r0, #0
   1662c:	beq	16708 <__assert_fail@plt+0x4ad4>
   16630:	ldr	r0, [r4, #16]
   16634:	sub	r0, r0, #1
   16638:	str	r0, [r4, #16]
   1663c:	ldr	r0, [sp, #4]
   16640:	ldr	r0, [r0]
   16644:	cmp	r0, #0
   16648:	bne	16708 <__assert_fail@plt+0x4ad4>
   1664c:	ldr	r0, [r4, #12]
   16650:	sub	r0, r0, #1
   16654:	vldr	s0, [r4, #8]
   16658:	str	r0, [r4, #12]
   1665c:	ldr	r1, [r4, #20]
   16660:	vldr	s2, [r1]
   16664:	vcvt.f32.u32	s0, s0
   16668:	vmov	s4, r0
   1666c:	vcvt.f32.u32	s4, s4
   16670:	vmul.f32	s0, s2, s0
   16674:	vcmpe.f32	s0, s4
   16678:	vmrs	APSR_nzcv, fpscr
   1667c:	ble	16708 <__assert_fail@plt+0x4ad4>
   16680:	mov	r0, r4
   16684:	bl	15e48 <__assert_fail@plt+0x4214>
   16688:	vldr	s0, [r4, #8]
   1668c:	vldr	s2, [r4, #12]
   16690:	ldr	r0, [r4, #20]
   16694:	vcvt.f32.u32	s0, s0
   16698:	vldr	s4, [r0]
   1669c:	vcvt.f32.u32	s2, s2
   166a0:	vmul.f32	s4, s4, s0
   166a4:	vcmpe.f32	s4, s2
   166a8:	vmrs	APSR_nzcv, fpscr
   166ac:	ble	16708 <__assert_fail@plt+0x4ad4>
   166b0:	vldr	s2, [r0, #4]
   166b4:	ldrb	r1, [r0, #16]
   166b8:	vmul.f32	s0, s2, s0
   166bc:	cmp	r1, #0
   166c0:	vldreq	s2, [r0, #8]
   166c4:	vmuleq.f32	s0, s0, s2
   166c8:	vcvt.u32.f32	s0, s0
   166cc:	vmov	r1, s0
   166d0:	mov	r0, r4
   166d4:	bl	160fc <__assert_fail@plt+0x44c8>
   166d8:	cmp	r0, #0
   166dc:	bne	16708 <__assert_fail@plt+0x4ad4>
   166e0:	ldr	r0, [r4, #36]	; 0x24
   166e4:	cmp	r0, #0
   166e8:	beq	16700 <__assert_fail@plt+0x4acc>
   166ec:	ldr	r6, [r0, #4]
   166f0:	bl	137c0 <__assert_fail@plt+0x1b8c>
   166f4:	cmp	r6, #0
   166f8:	mov	r0, r6
   166fc:	bne	166ec <__assert_fail@plt+0x4ab8>
   16700:	mov	r0, #0
   16704:	str	r0, [r4, #36]	; 0x24
   16708:	mov	r0, r5
   1670c:	sub	sp, fp, #16
   16710:	pop	{r4, r5, r6, sl, fp, pc}
   16714:	b	16608 <__assert_fail@plt+0x49d4>
   16718:	push	{r4, r5, fp, lr}
   1671c:	add	fp, sp, #8
   16720:	cmp	r0, #10
   16724:	movls	r0, #10
   16728:	orr	r5, r0, #1
   1672c:	mvn	r4, #0
   16730:	cmn	r5, #1
   16734:	bne	1674c <__assert_fail@plt+0x4b18>
   16738:	mov	r0, r4
   1673c:	pop	{r4, r5, fp, pc}
   16740:	add	r5, r5, #2
   16744:	cmn	r5, #1
   16748:	beq	16738 <__assert_fail@plt+0x4b04>
   1674c:	mov	r0, r5
   16750:	bl	16768 <__assert_fail@plt+0x4b34>
   16754:	cmp	r0, #0
   16758:	beq	16740 <__assert_fail@plt+0x4b0c>
   1675c:	mov	r4, r5
   16760:	mov	r0, r4
   16764:	pop	{r4, r5, fp, pc}
   16768:	mov	ip, #3
   1676c:	cmp	r0, #10
   16770:	bcc	167a4 <__assert_fail@plt+0x4b70>
   16774:	mov	ip, #3
   16778:	mov	r2, #9
   1677c:	mov	r3, #16
   16780:	udiv	r1, r0, ip
   16784:	mls	r1, r1, ip, r0
   16788:	cmp	r1, #0
   1678c:	beq	167a4 <__assert_fail@plt+0x4b70>
   16790:	add	r2, r3, r2
   16794:	add	r3, r3, #8
   16798:	add	ip, ip, #2
   1679c:	cmp	r2, r0
   167a0:	bcc	16780 <__assert_fail@plt+0x4b4c>
   167a4:	udiv	r1, r0, ip
   167a8:	mls	r0, r1, ip, r0
   167ac:	cmp	r0, #0
   167b0:	movwne	r0, #1
   167b4:	bx	lr
   167b8:	mov	r2, #0
   167bc:	str	r2, [r1]
   167c0:	ldr	r2, [r0, #36]	; 0x24
   167c4:	str	r2, [r1, #4]
   167c8:	str	r1, [r0, #36]	; 0x24
   167cc:	bx	lr
   167d0:	push	{r4, r5, fp, lr}
   167d4:	add	fp, sp, #8
   167d8:	mov	r4, r1
   167dc:	mov	r5, r0
   167e0:	ldr	r0, [r0]
   167e4:	bl	1a96c <lchmod@@Base+0x4020>
   167e8:	ldrd	r2, [r5, #8]
   167ec:	eor	r0, r2, r0
   167f0:	mov	r1, r3
   167f4:	mov	r2, r4
   167f8:	mov	r3, #0
   167fc:	bl	1abe4 <lchmod@@Base+0x4298>
   16800:	mov	r0, r2
   16804:	pop	{r4, r5, fp, pc}
   16808:	push	{r4, r5, r6, r7, fp, lr}
   1680c:	add	fp, sp, #16
   16810:	ldrd	r2, [r1, #8]
   16814:	ldrd	r4, [r0, #8]
   16818:	eor	r3, r5, r3
   1681c:	eor	r2, r4, r2
   16820:	orrs	r2, r2, r3
   16824:	mov	r2, #0
   16828:	bne	16858 <__assert_fail@plt+0x4c24>
   1682c:	ldrd	r4, [r1, #16]
   16830:	ldrd	r6, [r0, #16]
   16834:	eor	r3, r7, r5
   16838:	eor	r7, r6, r4
   1683c:	orrs	r3, r7, r3
   16840:	bne	16858 <__assert_fail@plt+0x4c24>
   16844:	ldr	r1, [r1]
   16848:	ldr	r0, [r0]
   1684c:	bl	1182c <strcmp@plt>
   16850:	clz	r0, r0
   16854:	lsr	r2, r0, #5
   16858:	mov	r0, r2
   1685c:	pop	{r4, r5, r6, r7, fp, pc}
   16860:	push	{r4, sl, fp, lr}
   16864:	add	fp, sp, #8
   16868:	mov	r4, r0
   1686c:	ldr	r0, [r0]
   16870:	bl	137c0 <__assert_fail@plt+0x1b8c>
   16874:	mov	r0, r4
   16878:	pop	{r4, sl, fp, lr}
   1687c:	b	137c0 <__assert_fail@plt+0x1b8c>
   16880:	mov	r2, #0
   16884:	mov	r3, #1
   16888:	strb	r3, [r0, #28]
   1688c:	str	r2, [r0, #20]
   16890:	str	r2, [r0, #24]
   16894:	str	r1, [r0, r2, lsl #2]
   16898:	add	r2, r2, #1
   1689c:	cmp	r2, #4
   168a0:	bne	16894 <__assert_fail@plt+0x4c60>
   168a4:	str	r1, [r0, #16]
   168a8:	bx	lr
   168ac:	ldrb	r0, [r0, #28]
   168b0:	bx	lr
   168b4:	ldr	r2, [r0, #20]
   168b8:	ldrb	r3, [r0, #28]
   168bc:	eor	r3, r3, #1
   168c0:	add	r2, r2, r3
   168c4:	and	r2, r2, #3
   168c8:	ldr	ip, [r0, r2, lsl #2]
   168cc:	str	r1, [r0, r2, lsl #2]
   168d0:	str	r2, [r0, #20]
   168d4:	ldr	r1, [r0, #24]
   168d8:	cmp	r2, r1
   168dc:	addeq	r1, r1, r3
   168e0:	andeq	r1, r1, #3
   168e4:	streq	r1, [r0, #24]
   168e8:	mov	r1, #0
   168ec:	strb	r1, [r0, #28]
   168f0:	mov	r0, ip
   168f4:	bx	lr
   168f8:	push	{r4, sl, fp, lr}
   168fc:	add	fp, sp, #8
   16900:	mov	r4, r0
   16904:	bl	168ac <__assert_fail@plt+0x4c78>
   16908:	cmp	r0, #0
   1690c:	bne	16948 <__assert_fail@plt+0x4d14>
   16910:	ldr	r1, [r4, #16]
   16914:	ldr	r2, [r4, #20]
   16918:	ldr	r0, [r4, r2, lsl #2]
   1691c:	str	r1, [r4, r2, lsl #2]
   16920:	ldr	r1, [r4, #20]
   16924:	ldr	r2, [r4, #24]
   16928:	cmp	r1, r2
   1692c:	moveq	r1, #1
   16930:	strbeq	r1, [r4, #28]
   16934:	popeq	{r4, sl, fp, pc}
   16938:	sub	r1, r1, #1
   1693c:	and	r1, r1, #3
   16940:	str	r1, [r4, #20]
   16944:	pop	{r4, sl, fp, pc}
   16948:	bl	11bd4 <abort@plt>

0001694c <lchmod@@Base>:
   1694c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16950:	add	fp, sp, #24
   16954:	sub	sp, sp, #136	; 0x88
   16958:	mov	r4, r1
   1695c:	mov	r5, r0
   16960:	mov	r1, #2654208	; 0x288000
   16964:	bl	119a0 <open64@plt>
   16968:	mov	r6, r0
   1696c:	cmp	r0, #0
   16970:	blt	169b4 <lchmod@@Base+0x68>
   16974:	movw	r1, #46691	; 0xb663
   16978:	movt	r1, #1
   1697c:	add	r2, sp, #32
   16980:	mov	r0, r6
   16984:	mov	r3, #4096	; 0x1000
   16988:	bl	1ae04 <lchmod@@Base+0x44b8>
   1698c:	cmp	r0, #0
   16990:	beq	169bc <lchmod@@Base+0x70>
   16994:	bl	11a6c <__errno_location@plt>
   16998:	mov	r4, r0
   1699c:	ldr	r5, [r0]
   169a0:	mov	r0, r6
   169a4:	bl	11be0 <close@plt>
   169a8:	str	r5, [r4]
   169ac:	mvn	r7, #0
   169b0:	b	16a5c <lchmod@@Base+0x110>
   169b4:	mov	r7, r6
   169b8:	b	16a5c <lchmod@@Base+0x110>
   169bc:	ldr	r0, [sp, #48]	; 0x30
   169c0:	and	r0, r0, #61440	; 0xf000
   169c4:	cmp	r0, #40960	; 0xa000
   169c8:	bne	169e8 <lchmod@@Base+0x9c>
   169cc:	mov	r0, r6
   169d0:	bl	11be0 <close@plt>
   169d4:	bl	11a6c <__errno_location@plt>
   169d8:	mov	r1, #95	; 0x5f
   169dc:	str	r1, [r0]
   169e0:	mvn	r7, #0
   169e4:	b	16a5c <lchmod@@Base+0x110>
   169e8:	str	r6, [sp]
   169ec:	add	r7, sp, #6
   169f0:	movw	r3, #47076	; 0xb7e4
   169f4:	movt	r3, #1
   169f8:	mov	r0, r7
   169fc:	mov	r1, #1
   16a00:	mov	r2, #26
   16a04:	bl	11a78 <__sprintf_chk@plt>
   16a08:	mov	r0, r7
   16a0c:	mov	r1, r4
   16a10:	bl	11ba4 <chmod@plt>
   16a14:	mov	r7, r0
   16a18:	bl	11a6c <__errno_location@plt>
   16a1c:	mov	r8, r0
   16a20:	ldr	r9, [r0]
   16a24:	mov	r0, r6
   16a28:	bl	11be0 <close@plt>
   16a2c:	cmp	r7, #0
   16a30:	beq	16a50 <lchmod@@Base+0x104>
   16a34:	cmp	r9, #2
   16a38:	bne	16a58 <lchmod@@Base+0x10c>
   16a3c:	mov	r0, r5
   16a40:	mov	r1, r4
   16a44:	bl	11ba4 <chmod@plt>
   16a48:	mov	r7, r0
   16a4c:	b	16a5c <lchmod@@Base+0x110>
   16a50:	mov	r7, #0
   16a54:	b	16a5c <lchmod@@Base+0x110>
   16a58:	str	r9, [r8]
   16a5c:	mov	r0, r7
   16a60:	sub	sp, fp, #24
   16a64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a6c:	add	fp, sp, #28
   16a70:	sub	sp, sp, #4
   16a74:	mov	r5, r0
   16a78:	ldrb	r7, [r0]
   16a7c:	and	r0, r7, #248	; 0xf8
   16a80:	cmp	r0, #48	; 0x30
   16a84:	bne	16af0 <lchmod@@Base+0x1a4>
   16a88:	mov	r4, #0
   16a8c:	mov	r0, #0
   16a90:	mov	r1, r5
   16a94:	mov	r6, r5
   16a98:	ldrb	r2, [r6], #1
   16a9c:	add	r0, r2, r0, lsl #3
   16aa0:	sub	r0, r0, #48	; 0x30
   16aa4:	cmp	r4, r0, lsr #12
   16aa8:	bne	16e8c <lchmod@@Base+0x540>
   16aac:	ldrb	r2, [r1, #1]
   16ab0:	and	r1, r2, #248	; 0xf8
   16ab4:	cmp	r1, #48	; 0x30
   16ab8:	mov	r1, r6
   16abc:	beq	16a98 <lchmod@@Base+0x14c>
   16ac0:	cmp	r2, #0
   16ac4:	bne	16e8c <lchmod@@Base+0x540>
   16ac8:	bl	16ea8 <lchmod@@Base+0x55c>
   16acc:	sub	r2, r6, r5
   16ad0:	and	r3, r0, #3072	; 0xc00
   16ad4:	movw	r7, #1023	; 0x3ff
   16ad8:	movw	r1, #4095	; 0xfff
   16adc:	cmp	r2, #5
   16ae0:	orrlt	r1, r3, r7
   16ae4:	sub	sp, fp, #28
   16ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16aec:	b	16eac <lchmod@@Base+0x560>
   16af0:	mov	r1, #1
   16af4:	mvn	r2, #42	; 0x2a
   16af8:	movw	r8, #5
   16afc:	movt	r8, #4
   16b00:	mov	r3, #1
   16b04:	mov	r0, #1
   16b08:	b	16b18 <lchmod@@Base+0x1cc>
   16b0c:	add	r0, r6, r0
   16b10:	ldrb	r7, [r5, r3]
   16b14:	add	r3, r3, #1
   16b18:	uxtab	r6, r2, r7
   16b1c:	uxtb	r7, r7
   16b20:	cmp	r6, #18
   16b24:	bhi	16b34 <lchmod@@Base+0x1e8>
   16b28:	tst	r8, r1, lsl r6
   16b2c:	mov	r6, #1
   16b30:	bne	16b0c <lchmod@@Base+0x1c0>
   16b34:	cmp	r7, #0
   16b38:	beq	16b44 <lchmod@@Base+0x1f8>
   16b3c:	mov	r6, #0
   16b40:	b	16b0c <lchmod@@Base+0x1c0>
   16b44:	mov	r1, #16
   16b48:	bl	19514 <lchmod@@Base+0x2bc8>
   16b4c:	mov	r4, r0
   16b50:	mov	r9, #0
   16b54:	mov	ip, #1
   16b58:	mvn	lr, #87	; 0x57
   16b5c:	mov	sl, #0
   16b60:	b	16b6c <lchmod@@Base+0x220>
   16b64:	add	r5, r5, #1
   16b68:	mov	sl, r0
   16b6c:	mov	r1, #0
   16b70:	b	16b7c <lchmod@@Base+0x230>
   16b74:	orr	r1, r1, r0
   16b78:	add	r5, r5, #1
   16b7c:	ldrb	r0, [r5]
   16b80:	sub	r2, r0, #97	; 0x61
   16b84:	cmp	r2, #20
   16b88:	bhi	16c04 <lchmod@@Base+0x2b8>
   16b8c:	mov	r0, #2496	; 0x9c0
   16b90:	add	r3, pc, #0
   16b94:	ldr	pc, [r3, r2, lsl #2]
   16b98:	andeq	r6, r1, ip, ror #23
   16b9c:	andeq	r6, r1, r0, lsl #29
   16ba0:	andeq	r6, r1, r0, lsl #29
   16ba4:	andeq	r6, r1, r0, lsl #29
   16ba8:	andeq	r6, r1, r0, lsl #29
   16bac:	andeq	r6, r1, r0, lsl #29
   16bb0:	strdeq	r6, [r1], -r4
   16bb4:	andeq	r6, r1, r0, lsl #29
   16bb8:	andeq	r6, r1, r0, lsl #29
   16bbc:	andeq	r6, r1, r0, lsl #29
   16bc0:	andeq	r6, r1, r0, lsl #29
   16bc4:	andeq	r6, r1, r0, lsl #29
   16bc8:	andeq	r6, r1, r0, lsl #29
   16bcc:	andeq	r6, r1, r0, lsl #29
   16bd0:	strdeq	r6, [r1], -ip
   16bd4:	andeq	r6, r1, r0, lsl #29
   16bd8:	andeq	r6, r1, r0, lsl #29
   16bdc:	andeq	r6, r1, r0, lsl #29
   16be0:	andeq	r6, r1, r0, lsl #29
   16be4:	andeq	r6, r1, r0, lsl #29
   16be8:	andeq	r6, r1, r4, ror fp
   16bec:	movw	r0, #4095	; 0xfff
   16bf0:	b	16b74 <lchmod@@Base+0x228>
   16bf4:	movw	r0, #1080	; 0x438
   16bf8:	b	16b74 <lchmod@@Base+0x228>
   16bfc:	movw	r0, #519	; 0x207
   16c00:	b	16b74 <lchmod@@Base+0x228>
   16c04:	sub	r0, r0, #43	; 0x2b
   16c08:	cmp	r0, #18
   16c0c:	bhi	16e80 <lchmod@@Base+0x534>
   16c10:	tst	r8, ip, lsl r0
   16c14:	beq	16e80 <lchmod@@Base+0x534>
   16c18:	ldrb	r6, [r5]
   16c1c:	mov	r2, r5
   16c20:	ldrb	r7, [r2, #1]!
   16c24:	sub	r0, r7, #48	; 0x30
   16c28:	cmp	r0, #8
   16c2c:	bcs	16c94 <lchmod@@Base+0x348>
   16c30:	mov	r0, #0
   16c34:	mov	r5, r2
   16c38:	ldrb	r3, [r5], #1
   16c3c:	add	r0, r3, r0, lsl #3
   16c40:	sub	r0, r0, #48	; 0x30
   16c44:	cmp	r9, r0, lsr #12
   16c48:	bne	16e80 <lchmod@@Base+0x534>
   16c4c:	ldrb	r3, [r2, #1]
   16c50:	and	r2, r3, #248	; 0xf8
   16c54:	cmp	r2, #48	; 0x30
   16c58:	mov	r2, r5
   16c5c:	beq	16c38 <lchmod@@Base+0x2ec>
   16c60:	cmp	r1, #0
   16c64:	bne	16e80 <lchmod@@Base+0x534>
   16c68:	cmp	r3, #44	; 0x2c
   16c6c:	cmpne	r3, #0
   16c70:	bne	16e80 <lchmod@@Base+0x534>
   16c74:	str	r6, [sp]
   16c78:	bl	16ea8 <lchmod@@Base+0x55c>
   16c7c:	mvn	lr, #87	; 0x57
   16c80:	mov	ip, #1
   16c84:	mov	r6, #1
   16c88:	movw	r1, #4095	; 0xfff
   16c8c:	movw	r3, #4095	; 0xfff
   16c90:	b	16dd4 <lchmod@@Base+0x488>
   16c94:	cmp	r7, #103	; 0x67
   16c98:	str	r6, [sp]
   16c9c:	beq	16cc4 <lchmod@@Base+0x378>
   16ca0:	cmp	r7, #111	; 0x6f
   16ca4:	beq	16cd8 <lchmod@@Base+0x38c>
   16ca8:	cmp	r7, #117	; 0x75
   16cac:	bne	16cec <lchmod@@Base+0x3a0>
   16cb0:	add	r5, r5, #2
   16cb4:	mov	r6, #3
   16cb8:	mov	r3, #0
   16cbc:	mov	r0, #448	; 0x1c0
   16cc0:	b	16dd4 <lchmod@@Base+0x488>
   16cc4:	add	r5, r5, #2
   16cc8:	mov	r6, #3
   16ccc:	mov	r3, #0
   16cd0:	mov	r0, #56	; 0x38
   16cd4:	b	16dd4 <lchmod@@Base+0x488>
   16cd8:	add	r5, r5, #2
   16cdc:	mov	r6, #3
   16ce0:	mov	r3, #0
   16ce4:	mov	r0, #7
   16ce8:	b	16dd4 <lchmod@@Base+0x488>
   16cec:	add	r3, r5, #2
   16cf0:	mov	r2, #1
   16cf4:	mov	r0, #0
   16cf8:	b	16d00 <lchmod@@Base+0x3b4>
   16cfc:	ldrb	r7, [r3], #1
   16d00:	mov	r6, r2
   16d04:	uxtab	r7, lr, r7
   16d08:	cmp	r7, #32
   16d0c:	bhi	16dcc <lchmod@@Base+0x480>
   16d10:	mov	r2, #2
   16d14:	add	r5, pc, #0
   16d18:	ldr	pc, [r5, r7, lsl #2]
   16d1c:	strdeq	r6, [r1], -ip
   16d20:	andeq	r6, r1, ip, asr #27
   16d24:	andeq	r6, r1, ip, asr #27
   16d28:	andeq	r6, r1, ip, asr #27
   16d2c:	andeq	r6, r1, ip, asr #27
   16d30:	andeq	r6, r1, ip, asr #27
   16d34:	andeq	r6, r1, ip, asr #27
   16d38:	andeq	r6, r1, ip, asr #27
   16d3c:	andeq	r6, r1, ip, asr #27
   16d40:	andeq	r6, r1, ip, asr #27
   16d44:	andeq	r6, r1, ip, asr #27
   16d48:	andeq	r6, r1, ip, asr #27
   16d4c:	andeq	r6, r1, ip, asr #27
   16d50:	andeq	r6, r1, ip, asr #27
   16d54:	andeq	r6, r1, ip, asr #27
   16d58:	andeq	r6, r1, ip, asr #27
   16d5c:	andeq	r6, r1, ip, asr #27
   16d60:	andeq	r6, r1, ip, asr #27
   16d64:	andeq	r6, r1, ip, asr #27
   16d68:	andeq	r6, r1, ip, asr #27
   16d6c:	andeq	r6, r1, ip, asr #27
   16d70:	andeq	r6, r1, ip, asr #27
   16d74:	andeq	r6, r1, ip, asr #27
   16d78:	andeq	r6, r1, ip, asr #27
   16d7c:	andeq	r6, r1, ip, asr #27
   16d80:	andeq	r6, r1, ip, asr #27
   16d84:	andeq	r6, r1, r0, lsr #27
   16d88:	andeq	r6, r1, r8, lsr #27
   16d8c:			; <UNDEFINED> instruction: 0x00016db0
   16d90:	andeq	r6, r1, ip, asr #27
   16d94:	andeq	r6, r1, ip, asr #27
   16d98:			; <UNDEFINED> instruction: 0x00016db8
   16d9c:	andeq	r6, r1, r0, asr #27
   16da0:	orr	r0, r0, #292	; 0x124
   16da4:	b	16dc4 <lchmod@@Base+0x478>
   16da8:	orr	r0, r0, #3072	; 0xc00
   16dac:	b	16dc4 <lchmod@@Base+0x478>
   16db0:	orr	r0, r0, #512	; 0x200
   16db4:	b	16dc4 <lchmod@@Base+0x478>
   16db8:	orr	r0, r0, #146	; 0x92
   16dbc:	b	16dc4 <lchmod@@Base+0x478>
   16dc0:	orr	r0, r0, #73	; 0x49
   16dc4:	mov	r2, r6
   16dc8:	b	16cfc <lchmod@@Base+0x3b0>
   16dcc:	sub	r5, r3, #1
   16dd0:	mov	r3, #0
   16dd4:	mov	r2, r4
   16dd8:	ldr	r7, [sp]
   16ddc:	strb	r7, [r2, sl, lsl #4]!
   16de0:	strb	r6, [r2, #1]
   16de4:	str	r1, [r2, #4]
   16de8:	str	r0, [r2, #8]
   16dec:	cmp	r3, #0
   16df0:	bne	16e00 <lchmod@@Base+0x4b4>
   16df4:	cmp	r1, #0
   16df8:	andne	r0, r0, r1
   16dfc:	mov	r3, r0
   16e00:	add	r0, sl, #1
   16e04:	add	r2, r4, sl, lsl #4
   16e08:	str	r3, [r2, #12]
   16e0c:	ldrb	r2, [r5]
   16e10:	sub	r2, r2, #43	; 0x2b
   16e14:	cmp	r2, #18
   16e18:	bhi	16e74 <lchmod@@Base+0x528>
   16e1c:	add	r3, pc, #4
   16e20:	mov	sl, r0
   16e24:	ldr	pc, [r3, r2, lsl #2]
   16e28:	andeq	r6, r1, r8, lsl ip
   16e2c:	andeq	r6, r1, r4, ror #22
   16e30:	andeq	r6, r1, r8, lsl ip
   16e34:	andeq	r6, r1, r4, ror lr
   16e38:	andeq	r6, r1, r4, ror lr
   16e3c:	andeq	r6, r1, r4, ror lr
   16e40:	andeq	r6, r1, r4, ror lr
   16e44:	andeq	r6, r1, r4, ror lr
   16e48:	andeq	r6, r1, r4, ror lr
   16e4c:	andeq	r6, r1, r4, ror lr
   16e50:	andeq	r6, r1, r4, ror lr
   16e54:	andeq	r6, r1, r4, ror lr
   16e58:	andeq	r6, r1, r4, ror lr
   16e5c:	andeq	r6, r1, r4, ror lr
   16e60:	andeq	r6, r1, r4, ror lr
   16e64:	andeq	r6, r1, r4, ror lr
   16e68:	andeq	r6, r1, r4, ror lr
   16e6c:	andeq	r6, r1, r4, ror lr
   16e70:	andeq	r6, r1, r8, lsl ip
   16e74:	ldrb	r1, [r5]
   16e78:	cmp	r1, #0
   16e7c:	beq	16e98 <lchmod@@Base+0x54c>
   16e80:	mov	r0, r4
   16e84:	bl	137c0 <__assert_fail@plt+0x1b8c>
   16e88:	mov	r4, #0
   16e8c:	mov	r0, r4
   16e90:	sub	sp, fp, #28
   16e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e98:	add	r0, r4, r0, lsl #4
   16e9c:	mov	r1, #0
   16ea0:	strb	r1, [r0, #1]
   16ea4:	b	16e8c <lchmod@@Base+0x540>
   16ea8:	bx	lr
   16eac:	push	{r4, r5, fp, lr}
   16eb0:	add	fp, sp, #8
   16eb4:	mov	r4, r1
   16eb8:	mov	r5, r0
   16ebc:	mov	r0, #32
   16ec0:	bl	19478 <lchmod@@Base+0x2b2c>
   16ec4:	movw	r1, #317	; 0x13d
   16ec8:	strh	r1, [r0]
   16ecc:	movw	r1, #4095	; 0xfff
   16ed0:	stmib	r0, {r1, r5}
   16ed4:	str	r4, [r0, #12]
   16ed8:	mov	r1, #0
   16edc:	strb	r1, [r0, #17]
   16ee0:	pop	{r4, r5, fp, pc}
   16ee4:	push	{fp, lr}
   16ee8:	mov	fp, sp
   16eec:	sub	sp, sp, #104	; 0x68
   16ef0:	mov	r1, sp
   16ef4:	bl	1add4 <lchmod@@Base+0x4488>
   16ef8:	mov	r1, r0
   16efc:	mov	r0, #0
   16f00:	cmp	r1, #0
   16f04:	beq	16f10 <lchmod@@Base+0x5c4>
   16f08:	mov	sp, fp
   16f0c:	pop	{fp, pc}
   16f10:	ldr	r0, [sp, #16]
   16f14:	movw	r1, #4095	; 0xfff
   16f18:	bl	16eac <lchmod@@Base+0x560>
   16f1c:	mov	sp, fp
   16f20:	pop	{fp, pc}
   16f24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f28:	add	fp, sp, #24
   16f2c:	bfc	r0, #12, #20
   16f30:	ldrb	r4, [r3, #1]
   16f34:	ldr	ip, [fp, #8]
   16f38:	cmp	r4, #0
   16f3c:	beq	1701c <lchmod@@Base+0x6d0>
   16f40:	add	r3, r3, #8
   16f44:	cmp	r1, #0
   16f48:	mov	lr, r1
   16f4c:	movwne	lr, #3072	; 0xc00
   16f50:	mov	r9, #0
   16f54:	movw	r8, #4095	; 0xfff
   16f58:	mov	r5, r3
   16f5c:	ldr	r7, [r3, #-4]
   16f60:	ldr	r3, [r3]
   16f64:	ldr	r6, [r5, #4]
   16f68:	bic	r6, lr, r6
   16f6c:	uxtb	r4, r4
   16f70:	cmp	r4, #2
   16f74:	beq	16fa0 <lchmod@@Base+0x654>
   16f78:	cmp	r4, #3
   16f7c:	bne	16fac <lchmod@@Base+0x660>
   16f80:	and	r4, r3, r0
   16f84:	tst	r4, #146	; 0x92
   16f88:	mov	r3, r4
   16f8c:	orrne	r3, r3, #146	; 0x92
   16f90:	tst	r4, #292	; 0x124
   16f94:	orrne	r3, r3, #292	; 0x124
   16f98:	tst	r4, #73	; 0x49
   16f9c:	b	16fa8 <lchmod@@Base+0x65c>
   16fa0:	and	r4, r0, #73	; 0x49
   16fa4:	orrs	r4, r4, r1
   16fa8:	orrne	r3, r3, #73	; 0x49
   16fac:	cmp	r7, #0
   16fb0:	mov	r4, r7
   16fb4:	mvneq	r4, r2
   16fb8:	bic	r4, r4, r6
   16fbc:	and	r3, r4, r3
   16fc0:	ldrb	r4, [r5, #-8]
   16fc4:	cmp	r4, #43	; 0x2b
   16fc8:	beq	16ff8 <lchmod@@Base+0x6ac>
   16fcc:	cmp	r4, #45	; 0x2d
   16fd0:	beq	17000 <lchmod@@Base+0x6b4>
   16fd4:	cmp	r4, #61	; 0x3d
   16fd8:	bne	17008 <lchmod@@Base+0x6bc>
   16fdc:	mvn	r4, r7
   16fe0:	cmp	r7, #0
   16fe4:	orrne	r6, r6, r4
   16fe8:	and	r0, r6, r0
   16fec:	orr	r0, r3, r0
   16ff0:	bic	r3, r8, r6
   16ff4:	b	17004 <lchmod@@Base+0x6b8>
   16ff8:	orr	r0, r3, r0
   16ffc:	b	17004 <lchmod@@Base+0x6b8>
   17000:	bic	r0, r0, r3
   17004:	orr	r9, r3, r9
   17008:	add	r3, r5, #16
   1700c:	ldrb	r4, [r5, #9]
   17010:	cmp	r4, #0
   17014:	bne	16f58 <lchmod@@Base+0x60c>
   17018:	b	17020 <lchmod@@Base+0x6d4>
   1701c:	mov	r9, #0
   17020:	cmp	ip, #0
   17024:	strne	r9, [ip]
   17028:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1702c:	sub	sp, sp, #4
   17030:	push	{fp, lr}
   17034:	mov	fp, sp
   17038:	sub	sp, sp, #4
   1703c:	str	r3, [fp, #8]
   17040:	mov	r3, #0
   17044:	tst	r2, #64	; 0x40
   17048:	addne	r3, fp, #8
   1704c:	addne	r3, r3, #4
   17050:	strne	r3, [sp]
   17054:	ldrne	r3, [fp, #8]
   17058:	bl	11a54 <openat64@plt>
   1705c:	bl	18f70 <lchmod@@Base+0x2624>
   17060:	mov	sp, fp
   17064:	pop	{fp, lr}
   17068:	add	sp, sp, #4
   1706c:	bx	lr
   17070:	push	{r4, r5, r6, sl, fp, lr}
   17074:	add	fp, sp, #16
   17078:	mov	r4, r3
   1707c:	orr	r2, r2, #18688	; 0x4900
   17080:	orr	r2, r2, #524288	; 0x80000
   17084:	bl	1702c <lchmod@@Base+0x6e0>
   17088:	mov	r5, r0
   1708c:	mov	r0, #0
   17090:	cmp	r5, #0
   17094:	poplt	{r4, r5, r6, sl, fp, pc}
   17098:	mov	r0, r5
   1709c:	bl	11b2c <fdopendir@plt>
   170a0:	cmp	r0, #0
   170a4:	strne	r5, [r4]
   170a8:	popne	{r4, r5, r6, sl, fp, pc}
   170ac:	bl	11a6c <__errno_location@plt>
   170b0:	mov	r4, r0
   170b4:	ldr	r6, [r0]
   170b8:	mov	r0, r5
   170bc:	bl	11be0 <close@plt>
   170c0:	str	r6, [r4]
   170c4:	mov	r0, #0
   170c8:	pop	{r4, r5, r6, sl, fp, pc}
   170cc:	push	{r4, r5, fp, lr}
   170d0:	add	fp, sp, #8
   170d4:	cmp	r0, #0
   170d8:	beq	1716c <lchmod@@Base+0x820>
   170dc:	mov	r4, r0
   170e0:	mov	r1, #47	; 0x2f
   170e4:	bl	11b08 <strrchr@plt>
   170e8:	cmp	r0, #0
   170ec:	mov	r5, r4
   170f0:	addne	r5, r0, #1
   170f4:	sub	r0, r5, r4
   170f8:	cmp	r0, #7
   170fc:	blt	17150 <lchmod@@Base+0x804>
   17100:	sub	r0, r5, #7
   17104:	movw	r1, #47149	; 0xb82d
   17108:	movt	r1, #1
   1710c:	mov	r2, #7
   17110:	bl	11bc8 <strncmp@plt>
   17114:	cmp	r0, #0
   17118:	bne	17150 <lchmod@@Base+0x804>
   1711c:	movw	r1, #47157	; 0xb835
   17120:	movt	r1, #1
   17124:	mov	r0, r5
   17128:	mov	r2, #3
   1712c:	bl	11bc8 <strncmp@plt>
   17130:	cmp	r0, #0
   17134:	beq	17140 <lchmod@@Base+0x7f4>
   17138:	mov	r4, r5
   1713c:	b	17150 <lchmod@@Base+0x804>
   17140:	add	r4, r5, #3
   17144:	movw	r0, #49624	; 0xc1d8
   17148:	movt	r0, #2
   1714c:	str	r4, [r0]
   17150:	movw	r0, #49628	; 0xc1dc
   17154:	movt	r0, #2
   17158:	str	r4, [r0]
   1715c:	movw	r0, #49664	; 0xc200
   17160:	movt	r0, #2
   17164:	str	r4, [r0]
   17168:	pop	{r4, r5, fp, pc}
   1716c:	movw	r0, #49640	; 0xc1e8
   17170:	movt	r0, #2
   17174:	ldr	r3, [r0]
   17178:	movw	r0, #47093	; 0xb7f5
   1717c:	movt	r0, #1
   17180:	mov	r1, #55	; 0x37
   17184:	mov	r2, #1
   17188:	bl	11940 <fwrite@plt>
   1718c:	bl	11bd4 <abort@plt>
   17190:	push	{r4, r5, r6, sl, fp, lr}
   17194:	add	fp, sp, #16
   17198:	mov	r4, r0
   1719c:	movw	r0, #49672	; 0xc208
   171a0:	movt	r0, #2
   171a4:	cmp	r4, #0
   171a8:	moveq	r4, r0
   171ac:	bl	11a6c <__errno_location@plt>
   171b0:	mov	r5, r0
   171b4:	ldr	r6, [r0]
   171b8:	mov	r0, r4
   171bc:	mov	r1, #48	; 0x30
   171c0:	bl	1976c <lchmod@@Base+0x2e20>
   171c4:	str	r6, [r5]
   171c8:	pop	{r4, r5, r6, sl, fp, pc}
   171cc:	movw	r1, #49672	; 0xc208
   171d0:	movt	r1, #2
   171d4:	cmp	r0, #0
   171d8:	movne	r1, r0
   171dc:	ldr	r0, [r1]
   171e0:	bx	lr
   171e4:	movw	r2, #49672	; 0xc208
   171e8:	movt	r2, #2
   171ec:	cmp	r0, #0
   171f0:	movne	r2, r0
   171f4:	str	r1, [r2]
   171f8:	bx	lr
   171fc:	movw	r3, #49672	; 0xc208
   17200:	movt	r3, #2
   17204:	cmp	r0, #0
   17208:	movne	r3, r0
   1720c:	ubfx	r0, r1, #5, #3
   17210:	add	r0, r3, r0, lsl #2
   17214:	ldr	r3, [r0, #8]
   17218:	and	r1, r1, #31
   1721c:	eor	r2, r2, r3, lsr r1
   17220:	and	r2, r2, #1
   17224:	eor	r2, r3, r2, lsl r1
   17228:	str	r2, [r0, #8]
   1722c:	mov	r0, #1
   17230:	and	r0, r0, r3, lsr r1
   17234:	bx	lr
   17238:	movw	r2, #49672	; 0xc208
   1723c:	movt	r2, #2
   17240:	cmp	r0, #0
   17244:	movne	r2, r0
   17248:	ldr	r0, [r2, #4]
   1724c:	str	r1, [r2, #4]
   17250:	bx	lr
   17254:	movw	r3, #49672	; 0xc208
   17258:	movt	r3, #2
   1725c:	cmp	r0, #0
   17260:	movne	r3, r0
   17264:	mov	r0, #10
   17268:	str	r0, [r3]
   1726c:	cmp	r1, #0
   17270:	cmpne	r2, #0
   17274:	bne	17284 <lchmod@@Base+0x938>
   17278:	push	{fp, lr}
   1727c:	mov	fp, sp
   17280:	bl	11bd4 <abort@plt>
   17284:	str	r1, [r3, #40]	; 0x28
   17288:	str	r2, [r3, #44]	; 0x2c
   1728c:	bx	lr
   17290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17294:	add	fp, sp, #28
   17298:	sub	sp, sp, #20
   1729c:	mov	r8, r3
   172a0:	mov	r9, r2
   172a4:	mov	sl, r1
   172a8:	mov	r7, r0
   172ac:	ldr	r0, [fp, #8]
   172b0:	movw	r5, #49672	; 0xc208
   172b4:	movt	r5, #2
   172b8:	cmp	r0, #0
   172bc:	movne	r5, r0
   172c0:	bl	11a6c <__errno_location@plt>
   172c4:	mov	r4, r0
   172c8:	ldm	r5, {r0, r1}
   172cc:	ldr	r2, [r5, #40]	; 0x28
   172d0:	ldr	r3, [r5, #44]	; 0x2c
   172d4:	ldr	r6, [r4]
   172d8:	add	r5, r5, #8
   172dc:	stm	sp, {r0, r1, r5}
   172e0:	str	r2, [sp, #12]
   172e4:	str	r3, [sp, #16]
   172e8:	mov	r0, r7
   172ec:	mov	r1, sl
   172f0:	mov	r2, r9
   172f4:	mov	r3, r8
   172f8:	bl	17308 <lchmod@@Base+0x9bc>
   172fc:	str	r6, [r4]
   17300:	sub	sp, fp, #28
   17304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1730c:	add	fp, sp, #28
   17310:	sub	sp, sp, #156	; 0x9c
   17314:	mov	r9, r3
   17318:	str	r2, [fp, #-84]	; 0xffffffac
   1731c:	mov	r6, r1
   17320:	mov	r7, r0
   17324:	ldr	r0, [fp, #12]
   17328:	and	r1, r0, #4
   1732c:	str	r1, [sp, #32]
   17330:	and	r1, r0, #1
   17334:	str	r1, [sp, #36]	; 0x24
   17338:	ubfx	sl, r0, #1, #1
   1733c:	bl	11958 <__ctype_get_mb_cur_max@plt>
   17340:	str	r0, [sp, #40]	; 0x28
   17344:	ldr	r0, [fp, #24]
   17348:	str	r0, [sp, #76]	; 0x4c
   1734c:	ldr	r0, [fp, #20]
   17350:	str	r0, [sp, #68]	; 0x44
   17354:	ldr	r0, [fp, #8]
   17358:	str	r0, [fp, #-60]	; 0xffffffc4
   1735c:	mov	r0, #0
   17360:	str	r0, [sp, #72]	; 0x48
   17364:	mov	r0, #0
   17368:	str	r0, [sp, #92]	; 0x5c
   1736c:	mov	r0, #0
   17370:	str	r0, [fp, #-72]	; 0xffffffb8
   17374:	mov	r0, #0
   17378:	mov	r1, #0
   1737c:	str	r1, [fp, #-56]	; 0xffffffc8
   17380:	mov	r1, #0
   17384:	str	r1, [sp, #56]	; 0x38
   17388:	mov	r5, #1
   1738c:	str	r7, [sp, #80]	; 0x50
   17390:	mov	r4, r6
   17394:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17398:	cmp	r6, #10
   1739c:	bhi	18304 <lchmod@@Base+0x19b8>
   173a0:	add	r1, pc, #20
   173a4:	mov	r8, #0
   173a8:	mov	r2, #1
   173ac:	mov	r3, #0
   173b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   173b4:	mov	lr, r9
   173b8:	ldr	pc, [r1, r6, lsl #2]
   173bc:	muleq	r1, r4, r4
   173c0:	andeq	r7, r1, r4, asr #9
   173c4:	andeq	r7, r1, r4, lsl #9
   173c8:	andeq	r7, r1, ip, ror r4
   173cc:			; <UNDEFINED> instruction: 0x000174b8
   173d0:	andeq	r7, r1, r8, lsl r5
   173d4:	andeq	r7, r1, r4, lsr #9
   173d8:	andeq	r7, r1, r4, ror r5
   173dc:	andeq	r7, r1, r8, ror #7
   173e0:	andeq	r7, r1, r8, ror #7
   173e4:	andeq	r7, r1, r0, lsl r4
   173e8:	movw	r0, #47239	; 0xb887
   173ec:	movt	r0, #1
   173f0:	mov	r1, r6
   173f4:	bl	18910 <lchmod@@Base+0x1fc4>
   173f8:	str	r0, [sp, #68]	; 0x44
   173fc:	movw	r0, #47241	; 0xb889
   17400:	movt	r0, #1
   17404:	mov	r1, r6
   17408:	bl	18910 <lchmod@@Base+0x1fc4>
   1740c:	str	r0, [sp, #76]	; 0x4c
   17410:	mov	r8, #0
   17414:	tst	sl, #1
   17418:	bne	17450 <lchmod@@Base+0xb04>
   1741c:	ldr	r0, [sp, #68]	; 0x44
   17420:	ldrb	r0, [r0]
   17424:	cmp	r0, #0
   17428:	beq	17450 <lchmod@@Base+0xb04>
   1742c:	ldr	r1, [sp, #68]	; 0x44
   17430:	add	r1, r1, #1
   17434:	mov	r8, #0
   17438:	cmp	r8, r4
   1743c:	strbcc	r0, [r7, r8]
   17440:	ldrb	r0, [r1, r8]
   17444:	add	r8, r8, #1
   17448:	cmp	r0, #0
   1744c:	bne	17438 <lchmod@@Base+0xaec>
   17450:	ldr	r6, [sp, #76]	; 0x4c
   17454:	mov	r0, r6
   17458:	bl	11a30 <strlen@plt>
   1745c:	str	r0, [fp, #-72]	; 0xffffffb8
   17460:	str	r6, [sp, #92]	; 0x5c
   17464:	mov	r2, #1
   17468:	mov	r3, sl
   1746c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17470:	mov	lr, r9
   17474:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17478:	b	17574 <lchmod@@Base+0xc28>
   1747c:	mov	r0, #1
   17480:	b	174c4 <lchmod@@Base+0xb78>
   17484:	tst	sl, #1
   17488:	bne	174c4 <lchmod@@Base+0xb78>
   1748c:	mov	r2, r0
   17490:	b	174ec <lchmod@@Base+0xba0>
   17494:	mov	r6, #0
   17498:	mov	r8, #0
   1749c:	mov	r2, r0
   174a0:	b	17570 <lchmod@@Base+0xc24>
   174a4:	mov	r0, #1
   174a8:	str	r0, [fp, #-72]	; 0xffffffb8
   174ac:	mov	r8, #0
   174b0:	mov	r6, #5
   174b4:	b	17530 <lchmod@@Base+0xbe4>
   174b8:	mov	r2, #1
   174bc:	tst	sl, #1
   174c0:	beq	174ec <lchmod@@Base+0xba0>
   174c4:	mov	r1, #1
   174c8:	str	r1, [fp, #-72]	; 0xffffffb8
   174cc:	mov	r8, #0
   174d0:	mov	r6, #2
   174d4:	movw	r1, #47241	; 0xb889
   174d8:	movt	r1, #1
   174dc:	str	r1, [sp, #92]	; 0x5c
   174e0:	mov	r2, r0
   174e4:	mov	r3, #1
   174e8:	b	17574 <lchmod@@Base+0xc28>
   174ec:	mov	r8, #1
   174f0:	mov	r6, #2
   174f4:	cmp	r4, #0
   174f8:	movne	r0, #39	; 0x27
   174fc:	strbne	r0, [r7]
   17500:	movw	r0, #47241	; 0xb889
   17504:	movt	r0, #1
   17508:	str	r0, [sp, #92]	; 0x5c
   1750c:	mov	r0, #1
   17510:	str	r0, [fp, #-72]	; 0xffffffb8
   17514:	b	17570 <lchmod@@Base+0xc24>
   17518:	mov	r6, #5
   1751c:	tst	sl, #1
   17520:	beq	17548 <lchmod@@Base+0xbfc>
   17524:	mov	r0, #1
   17528:	str	r0, [fp, #-72]	; 0xffffffb8
   1752c:	mov	r8, #0
   17530:	movw	r0, #47237	; 0xb885
   17534:	movt	r0, #1
   17538:	str	r0, [sp, #92]	; 0x5c
   1753c:	mov	r2, #1
   17540:	mov	r3, #1
   17544:	b	17574 <lchmod@@Base+0xc28>
   17548:	cmp	r4, #0
   1754c:	movne	r0, #34	; 0x22
   17550:	strbne	r0, [r7]
   17554:	mov	r8, #1
   17558:	movw	r0, #47237	; 0xb885
   1755c:	movt	r0, #1
   17560:	str	r0, [sp, #92]	; 0x5c
   17564:	mov	r0, #1
   17568:	str	r0, [fp, #-72]	; 0xffffffb8
   1756c:	mov	r2, #1
   17570:	mov	r3, #0
   17574:	ldr	r0, [fp, #16]
   17578:	cmp	r0, #0
   1757c:	movwne	r0, #1
   17580:	and	r0, r0, r3
   17584:	str	r0, [fp, #-88]	; 0xffffffa8
   17588:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1758c:	cmp	r0, #0
   17590:	movwne	r0, #1
   17594:	and	r1, r0, r3
   17598:	and	r1, r2, r1
   1759c:	str	r1, [sp, #48]	; 0x30
   175a0:	str	r6, [fp, #-60]	; 0xffffffc4
   175a4:	subs	r6, r6, #2
   175a8:	clz	r1, r6
   175ac:	lsr	r1, r1, #5
   175b0:	and	r1, r1, r3
   175b4:	str	r1, [sp, #60]	; 0x3c
   175b8:	str	r6, [fp, #-80]	; 0xffffffb0
   175bc:	mov	r1, r6
   175c0:	movwne	r1, #1
   175c4:	str	r3, [fp, #-76]	; 0xffffffb4
   175c8:	eor	r3, r3, #1
   175cc:	str	r3, [sp, #88]	; 0x58
   175d0:	orr	r3, r1, r3
   175d4:	str	r3, [sp, #64]	; 0x40
   175d8:	and	r1, r1, r2
   175dc:	str	r1, [fp, #-68]	; 0xffffffbc
   175e0:	and	r0, r0, r1
   175e4:	str	r0, [fp, #-64]	; 0xffffffc0
   175e8:	str	r2, [sp, #84]	; 0x54
   175ec:	eor	r0, r2, #1
   175f0:	str	r0, [sp, #52]	; 0x34
   175f4:	mov	r6, #0
   175f8:	cmn	lr, #1
   175fc:	beq	1760c <lchmod@@Base+0xcc0>
   17600:	cmp	r6, lr
   17604:	bne	17618 <lchmod@@Base+0xccc>
   17608:	b	18184 <lchmod@@Base+0x1838>
   1760c:	ldrb	r0, [ip, r6]
   17610:	cmp	r0, #0
   17614:	beq	18184 <lchmod@@Base+0x1838>
   17618:	str	r5, [fp, #-48]	; 0xffffffd0
   1761c:	mov	sl, #0
   17620:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17624:	cmp	r0, #0
   17628:	beq	1765c <lchmod@@Base+0xd10>
   1762c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17630:	add	r5, r6, r0
   17634:	cmp	r0, #2
   17638:	bcc	17654 <lchmod@@Base+0xd08>
   1763c:	cmn	lr, #1
   17640:	bne	17654 <lchmod@@Base+0xd08>
   17644:	mov	r0, ip
   17648:	bl	11a30 <strlen@plt>
   1764c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17650:	mov	lr, r0
   17654:	cmp	r5, lr
   17658:	bls	17668 <lchmod@@Base+0xd1c>
   1765c:	mov	r0, #0
   17660:	str	r0, [fp, #-52]	; 0xffffffcc
   17664:	b	176b4 <lchmod@@Base+0xd68>
   17668:	mov	r5, r4
   1766c:	mov	r4, lr
   17670:	add	r0, ip, r6
   17674:	ldr	r1, [sp, #92]	; 0x5c
   17678:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1767c:	bl	118bc <memcmp@plt>
   17680:	cmp	r0, #0
   17684:	mov	r1, r0
   17688:	movwne	r1, #1
   1768c:	ldr	r2, [sp, #88]	; 0x58
   17690:	orr	r1, r1, r2
   17694:	tst	r1, #1
   17698:	beq	18248 <lchmod@@Base+0x18fc>
   1769c:	clz	r0, r0
   176a0:	lsr	r0, r0, #5
   176a4:	str	r0, [fp, #-52]	; 0xffffffcc
   176a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   176ac:	mov	lr, r4
   176b0:	mov	r4, r5
   176b4:	ldrb	r5, [ip, r6]
   176b8:	cmp	r5, #126	; 0x7e
   176bc:	bhi	17a78 <lchmod@@Base+0x112c>
   176c0:	mov	r9, #1
   176c4:	mov	r2, #110	; 0x6e
   176c8:	mov	r0, #97	; 0x61
   176cc:	add	r3, pc, #4
   176d0:	mov	r1, #0
   176d4:	ldr	pc, [r3, r5, lsl #2]
   176d8:	andeq	r7, r1, r0, ror r9
   176dc:	andeq	r7, r1, r8, ror sl
   176e0:	andeq	r7, r1, r8, ror sl
   176e4:	andeq	r7, r1, r8, ror sl
   176e8:	andeq	r7, r1, r8, ror sl
   176ec:	andeq	r7, r1, r8, ror sl
   176f0:	andeq	r7, r1, r8, ror sl
   176f4:	andeq	r7, r1, ip, lsr fp
   176f8:	andeq	r7, r1, r0, asr r9
   176fc:	andeq	r7, r1, r8, asr #18
   17700:	andeq	r7, r1, ip, asr r9
   17704:	andeq	r7, r1, r0, ror #19
   17708:	andeq	r7, r1, r0, asr #18
   1770c:	andeq	r7, r1, r8, asr r9
   17710:	andeq	r7, r1, r8, ror sl
   17714:	andeq	r7, r1, r8, ror sl
   17718:	andeq	r7, r1, r8, ror sl
   1771c:	andeq	r7, r1, r8, ror sl
   17720:	andeq	r7, r1, r8, ror sl
   17724:	andeq	r7, r1, r8, ror sl
   17728:	andeq	r7, r1, r8, ror sl
   1772c:	andeq	r7, r1, r8, ror sl
   17730:	andeq	r7, r1, r8, ror sl
   17734:	andeq	r7, r1, r8, ror sl
   17738:	andeq	r7, r1, r8, ror sl
   1773c:	andeq	r7, r1, r8, ror sl
   17740:	andeq	r7, r1, r8, ror sl
   17744:	andeq	r7, r1, r8, ror sl
   17748:	andeq	r7, r1, r8, ror sl
   1774c:	andeq	r7, r1, r8, ror sl
   17750:	andeq	r7, r1, r8, ror sl
   17754:	andeq	r7, r1, r8, ror sl
   17758:	andeq	r7, r1, ip, ror #21
   1775c:	strdeq	r7, [r1], -r0
   17760:	strdeq	r7, [r1], -r0
   17764:	andeq	r7, r1, r8, ror #17
   17768:	strdeq	r7, [r1], -r0
   1776c:	ldrdeq	r7, [r1], -r4
   17770:	strdeq	r7, [r1], -r0
   17774:	andeq	r7, r1, r8, ror #19
   17778:	strdeq	r7, [r1], -r0
   1777c:	strdeq	r7, [r1], -r0
   17780:	strdeq	r7, [r1], -r0
   17784:	ldrdeq	r7, [r1], -r4
   17788:	ldrdeq	r7, [r1], -r4
   1778c:	ldrdeq	r7, [r1], -r4
   17790:	ldrdeq	r7, [r1], -r4
   17794:	ldrdeq	r7, [r1], -r4
   17798:	ldrdeq	r7, [r1], -r4
   1779c:	ldrdeq	r7, [r1], -r4
   177a0:	ldrdeq	r7, [r1], -r4
   177a4:	ldrdeq	r7, [r1], -r4
   177a8:	ldrdeq	r7, [r1], -r4
   177ac:	ldrdeq	r7, [r1], -r4
   177b0:	ldrdeq	r7, [r1], -r4
   177b4:	ldrdeq	r7, [r1], -r4
   177b8:	ldrdeq	r7, [r1], -r4
   177bc:	ldrdeq	r7, [r1], -r4
   177c0:	ldrdeq	r7, [r1], -r4
   177c4:	strdeq	r7, [r1], -r0
   177c8:	strdeq	r7, [r1], -r0
   177cc:	strdeq	r7, [r1], -r0
   177d0:	strdeq	r7, [r1], -r0
   177d4:			; <UNDEFINED> instruction: 0x000179b0
   177d8:	andeq	r7, r1, r8, ror sl
   177dc:	ldrdeq	r7, [r1], -r4
   177e0:	ldrdeq	r7, [r1], -r4
   177e4:	ldrdeq	r7, [r1], -r4
   177e8:	ldrdeq	r7, [r1], -r4
   177ec:	ldrdeq	r7, [r1], -r4
   177f0:	ldrdeq	r7, [r1], -r4
   177f4:	ldrdeq	r7, [r1], -r4
   177f8:	ldrdeq	r7, [r1], -r4
   177fc:	ldrdeq	r7, [r1], -r4
   17800:	ldrdeq	r7, [r1], -r4
   17804:	ldrdeq	r7, [r1], -r4
   17808:	ldrdeq	r7, [r1], -r4
   1780c:	ldrdeq	r7, [r1], -r4
   17810:	ldrdeq	r7, [r1], -r4
   17814:	ldrdeq	r7, [r1], -r4
   17818:	ldrdeq	r7, [r1], -r4
   1781c:	ldrdeq	r7, [r1], -r4
   17820:	ldrdeq	r7, [r1], -r4
   17824:	ldrdeq	r7, [r1], -r4
   17828:	ldrdeq	r7, [r1], -r4
   1782c:	ldrdeq	r7, [r1], -r4
   17830:	ldrdeq	r7, [r1], -r4
   17834:	ldrdeq	r7, [r1], -r4
   17838:	ldrdeq	r7, [r1], -r4
   1783c:	ldrdeq	r7, [r1], -r4
   17840:	ldrdeq	r7, [r1], -r4
   17844:	strdeq	r7, [r1], -r0
   17848:	andeq	r7, r1, ip, lsl r9
   1784c:	ldrdeq	r7, [r1], -r4
   17850:	strdeq	r7, [r1], -r0
   17854:	ldrdeq	r7, [r1], -r4
   17858:	strdeq	r7, [r1], -r0
   1785c:	ldrdeq	r7, [r1], -r4
   17860:	ldrdeq	r7, [r1], -r4
   17864:	ldrdeq	r7, [r1], -r4
   17868:	ldrdeq	r7, [r1], -r4
   1786c:	ldrdeq	r7, [r1], -r4
   17870:	ldrdeq	r7, [r1], -r4
   17874:	ldrdeq	r7, [r1], -r4
   17878:	ldrdeq	r7, [r1], -r4
   1787c:	ldrdeq	r7, [r1], -r4
   17880:	ldrdeq	r7, [r1], -r4
   17884:	ldrdeq	r7, [r1], -r4
   17888:	ldrdeq	r7, [r1], -r4
   1788c:	ldrdeq	r7, [r1], -r4
   17890:	ldrdeq	r7, [r1], -r4
   17894:	ldrdeq	r7, [r1], -r4
   17898:	ldrdeq	r7, [r1], -r4
   1789c:	ldrdeq	r7, [r1], -r4
   178a0:	ldrdeq	r7, [r1], -r4
   178a4:	ldrdeq	r7, [r1], -r4
   178a8:	ldrdeq	r7, [r1], -r4
   178ac:	ldrdeq	r7, [r1], -r4
   178b0:	ldrdeq	r7, [r1], -r4
   178b4:	ldrdeq	r7, [r1], -r4
   178b8:	ldrdeq	r7, [r1], -r4
   178bc:	ldrdeq	r7, [r1], -r4
   178c0:	ldrdeq	r7, [r1], -r4
   178c4:	strdeq	r7, [r1], -ip
   178c8:	strdeq	r7, [r1], -r0
   178cc:	strdeq	r7, [r1], -ip
   178d0:	andeq	r7, r1, r8, ror #17
   178d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178d8:	cmp	r0, #0
   178dc:	beq	17b50 <lchmod@@Base+0x1204>
   178e0:	ldr	r0, [fp, #16]
   178e4:	b	17b54 <lchmod@@Base+0x1208>
   178e8:	mov	r9, #0
   178ec:	cmp	r6, #0
   178f0:	beq	17aec <lchmod@@Base+0x11a0>
   178f4:	mov	sl, #0
   178f8:	b	178d4 <lchmod@@Base+0xf88>
   178fc:	mov	r9, #0
   17900:	cmn	lr, #1
   17904:	beq	17ad0 <lchmod@@Base+0x1184>
   17908:	cmp	r6, #0
   1790c:	bne	178f4 <lchmod@@Base+0xfa8>
   17910:	cmp	lr, #1
   17914:	beq	17aec <lchmod@@Base+0x11a0>
   17918:	b	178f4 <lchmod@@Base+0xfa8>
   1791c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17920:	cmp	r0, #2
   17924:	bne	17b18 <lchmod@@Base+0x11cc>
   17928:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1792c:	tst	r0, #1
   17930:	bne	18260 <lchmod@@Base+0x1914>
   17934:	mov	sl, #0
   17938:	mov	r0, #92	; 0x5c
   1793c:	b	17b2c <lchmod@@Base+0x11e0>
   17940:	mov	r0, #102	; 0x66
   17944:	b	17b3c <lchmod@@Base+0x11f0>
   17948:	mov	r2, #116	; 0x74
   1794c:	b	1795c <lchmod@@Base+0x1010>
   17950:	mov	r0, #98	; 0x62
   17954:	b	17b3c <lchmod@@Base+0x11f0>
   17958:	mov	r2, #114	; 0x72
   1795c:	ldr	r0, [sp, #64]	; 0x40
   17960:	tst	r0, #1
   17964:	mov	r0, r2
   17968:	bne	17b3c <lchmod@@Base+0x11f0>
   1796c:	b	18260 <lchmod@@Base+0x1914>
   17970:	ldr	r0, [sp, #84]	; 0x54
   17974:	tst	r0, #1
   17978:	beq	17c2c <lchmod@@Base+0x12e0>
   1797c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17980:	tst	r0, #1
   17984:	bne	18260 <lchmod@@Base+0x1914>
   17988:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1798c:	cmp	r0, #2
   17990:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17994:	movwne	r0, #1
   17998:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1799c:	orr	r0, r0, r2
   179a0:	tst	r0, #1
   179a4:	beq	18020 <lchmod@@Base+0x16d4>
   179a8:	mov	r0, r8
   179ac:	b	18054 <lchmod@@Base+0x1708>
   179b0:	mov	sl, #0
   179b4:	mov	r5, #63	; 0x3f
   179b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   179bc:	cmp	r0, #5
   179c0:	beq	17de0 <lchmod@@Base+0x1494>
   179c4:	cmp	r0, #2
   179c8:	bne	17e80 <lchmod@@Base+0x1534>
   179cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   179d0:	tst	r0, #1
   179d4:	mov	r9, #0
   179d8:	beq	178d4 <lchmod@@Base+0xf88>
   179dc:	b	18260 <lchmod@@Base+0x1914>
   179e0:	mov	r0, #118	; 0x76
   179e4:	b	17b3c <lchmod@@Base+0x11f0>
   179e8:	mov	r5, #39	; 0x27
   179ec:	mov	r0, #1
   179f0:	str	r0, [sp, #56]	; 0x38
   179f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   179f8:	cmp	r0, #2
   179fc:	bne	17c4c <lchmod@@Base+0x1300>
   17a00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17a04:	tst	r0, #1
   17a08:	bne	18260 <lchmod@@Base+0x1914>
   17a0c:	ldr	r2, [sp, #72]	; 0x48
   17a10:	cmp	r2, #0
   17a14:	mov	r0, r2
   17a18:	movwne	r0, #1
   17a1c:	clz	r1, r4
   17a20:	lsr	r1, r1, #5
   17a24:	orrs	r0, r0, r1
   17a28:	moveq	r2, r4
   17a2c:	str	r2, [sp, #72]	; 0x48
   17a30:	moveq	r4, r0
   17a34:	cmp	r8, r4
   17a38:	movcc	r0, #39	; 0x27
   17a3c:	strbcc	r0, [r7, r8]
   17a40:	add	r0, r8, #1
   17a44:	cmp	r0, r4
   17a48:	movcc	r1, #92	; 0x5c
   17a4c:	strbcc	r1, [r7, r0]
   17a50:	add	r0, r8, #2
   17a54:	cmp	r0, r4
   17a58:	movcc	r1, #39	; 0x27
   17a5c:	strbcc	r1, [r7, r0]
   17a60:	add	r8, r8, #3
   17a64:	mov	r0, #0
   17a68:	str	r0, [fp, #-56]	; 0xffffffc8
   17a6c:	mov	sl, #0
   17a70:	mov	r9, #1
   17a74:	b	178d4 <lchmod@@Base+0xf88>
   17a78:	str	r4, [sp, #24]
   17a7c:	ldr	r0, [sp, #40]	; 0x28
   17a80:	cmp	r0, #1
   17a84:	bne	17c54 <lchmod@@Base+0x1308>
   17a88:	str	lr, [sp, #28]
   17a8c:	bl	11a00 <__ctype_b_loc@plt>
   17a90:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a94:	ldr	r0, [r0]
   17a98:	add	r0, r0, r5, lsl #1
   17a9c:	ldrb	r0, [r0, #1]
   17aa0:	ubfx	r9, r0, #6, #1
   17aa4:	mov	r1, #1
   17aa8:	ldr	r4, [sp, #24]
   17aac:	ldr	r0, [sp, #52]	; 0x34
   17ab0:	orr	r0, r9, r0
   17ab4:	mov	r2, r1
   17ab8:	cmp	r1, #1
   17abc:	bhi	17e88 <lchmod@@Base+0x153c>
   17ac0:	tst	r0, #1
   17ac4:	beq	17e88 <lchmod@@Base+0x153c>
   17ac8:	ldr	lr, [sp, #28]
   17acc:	b	178d4 <lchmod@@Base+0xf88>
   17ad0:	cmp	r6, #0
   17ad4:	ldrbeq	r0, [ip, #1]
   17ad8:	cmpeq	r0, #0
   17adc:	beq	17aec <lchmod@@Base+0x11a0>
   17ae0:	mvn	lr, #0
   17ae4:	mov	sl, #0
   17ae8:	b	178d4 <lchmod@@Base+0xf88>
   17aec:	mov	r1, #1
   17af0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17af4:	cmp	r0, #2
   17af8:	bne	17b10 <lchmod@@Base+0x11c4>
   17afc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17b00:	tst	r0, #1
   17b04:	mov	r9, r1
   17b08:	beq	178d4 <lchmod@@Base+0xf88>
   17b0c:	b	18260 <lchmod@@Base+0x1914>
   17b10:	mov	r9, r1
   17b14:	b	178d4 <lchmod@@Base+0xf88>
   17b18:	mov	sl, #0
   17b1c:	mov	r0, #92	; 0x5c
   17b20:	ldr	r1, [sp, #48]	; 0x30
   17b24:	cmp	r1, #0
   17b28:	beq	17b3c <lchmod@@Base+0x11f0>
   17b2c:	mov	r9, #0
   17b30:	cmp	sl, #0
   17b34:	beq	180ec <lchmod@@Base+0x17a0>
   17b38:	b	18128 <lchmod@@Base+0x17dc>
   17b3c:	mov	r9, #0
   17b40:	ldr	r1, [sp, #84]	; 0x54
   17b44:	tst	r1, #1
   17b48:	mov	sl, #0
   17b4c:	bne	17b8c <lchmod@@Base+0x1240>
   17b50:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17b54:	cmp	r0, #0
   17b58:	mov	r0, r5
   17b5c:	beq	17b80 <lchmod@@Base+0x1234>
   17b60:	ubfx	r0, r5, #5, #3
   17b64:	ldr	r1, [fp, #16]
   17b68:	ldr	r0, [r1, r0, lsl #2]
   17b6c:	and	r1, r5, #31
   17b70:	mov	r2, #1
   17b74:	tst	r0, r2, lsl r1
   17b78:	mov	r0, r5
   17b7c:	bne	17b8c <lchmod@@Base+0x1240>
   17b80:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17b84:	cmp	r1, #0
   17b88:	beq	180e4 <lchmod@@Base+0x1798>
   17b8c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17b90:	tst	r1, #1
   17b94:	bne	18260 <lchmod@@Base+0x1914>
   17b98:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17b9c:	cmp	r1, #2
   17ba0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17ba4:	movwne	r1, #1
   17ba8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17bac:	orr	r1, r1, r2
   17bb0:	tst	r1, #1
   17bb4:	beq	17bc0 <lchmod@@Base+0x1274>
   17bb8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17bbc:	b	17bfc <lchmod@@Base+0x12b0>
   17bc0:	cmp	r8, r4
   17bc4:	movcc	r1, #39	; 0x27
   17bc8:	strbcc	r1, [r7, r8]
   17bcc:	add	r1, r8, #1
   17bd0:	cmp	r1, r4
   17bd4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17bd8:	movcc	r2, #36	; 0x24
   17bdc:	strbcc	r2, [r7, r1]
   17be0:	add	r1, r8, #2
   17be4:	cmp	r1, r4
   17be8:	movcc	r2, #39	; 0x27
   17bec:	strbcc	r2, [r7, r1]
   17bf0:	add	r8, r8, #3
   17bf4:	mov	r1, #1
   17bf8:	str	r1, [fp, #-56]	; 0xffffffc8
   17bfc:	cmp	r8, r4
   17c00:	movcc	r1, #92	; 0x5c
   17c04:	strbcc	r1, [r7, r8]
   17c08:	add	r8, r8, #1
   17c0c:	cmp	r8, r4
   17c10:	strbcc	r0, [r7, r8]
   17c14:	and	r5, r5, r9
   17c18:	add	r8, r8, #1
   17c1c:	add	r6, r6, #1
   17c20:	cmn	lr, #1
   17c24:	bne	17600 <lchmod@@Base+0xcb4>
   17c28:	b	1760c <lchmod@@Base+0xcc0>
   17c2c:	mov	r9, #0
   17c30:	ldr	r0, [sp, #36]	; 0x24
   17c34:	cmp	r0, #0
   17c38:	mov	sl, #0
   17c3c:	mov	r5, #0
   17c40:	beq	17b50 <lchmod@@Base+0x1204>
   17c44:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17c48:	b	17c1c <lchmod@@Base+0x12d0>
   17c4c:	mov	r9, #1
   17c50:	b	178d4 <lchmod@@Base+0xf88>
   17c54:	mov	r0, #0
   17c58:	str	r0, [fp, #-36]	; 0xffffffdc
   17c5c:	str	r0, [fp, #-40]	; 0xffffffd8
   17c60:	cmn	lr, #1
   17c64:	bne	17c78 <lchmod@@Base+0x132c>
   17c68:	mov	r0, ip
   17c6c:	bl	11a30 <strlen@plt>
   17c70:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c74:	mov	lr, r0
   17c78:	add	r0, ip, r6
   17c7c:	str	r0, [sp, #20]
   17c80:	mov	r9, #1
   17c84:	mov	r7, #0
   17c88:	sub	r4, fp, #40	; 0x28
   17c8c:	str	lr, [sp, #28]
   17c90:	str	r7, [sp, #44]	; 0x2c
   17c94:	add	r7, r7, r6
   17c98:	add	r1, ip, r7
   17c9c:	sub	r2, lr, r7
   17ca0:	sub	r0, fp, #44	; 0x2c
   17ca4:	mov	r3, r4
   17ca8:	bl	1aa30 <lchmod@@Base+0x40e4>
   17cac:	cmp	r0, #0
   17cb0:	beq	18170 <lchmod@@Base+0x1824>
   17cb4:	cmn	r0, #1
   17cb8:	beq	18130 <lchmod@@Base+0x17e4>
   17cbc:	cmn	r0, #2
   17cc0:	ldr	lr, [sp, #28]
   17cc4:	beq	18138 <lchmod@@Base+0x17ec>
   17cc8:	cmp	r0, #2
   17ccc:	mov	r1, #0
   17cd0:	movwcc	r1, #1
   17cd4:	ldr	r2, [sp, #60]	; 0x3c
   17cd8:	eor	r2, r2, #1
   17cdc:	orrs	r1, r2, r1
   17ce0:	ldr	r4, [sp, #24]
   17ce4:	bne	17da4 <lchmod@@Base+0x1458>
   17ce8:	ldr	r1, [sp, #44]	; 0x2c
   17cec:	ldr	r2, [sp, #20]
   17cf0:	add	r1, r2, r1
   17cf4:	mov	r2, #1
   17cf8:	ldrb	r3, [r1, r2]
   17cfc:	sub	r3, r3, #91	; 0x5b
   17d00:	cmp	r3, #33	; 0x21
   17d04:	bhi	17d98 <lchmod@@Base+0x144c>
   17d08:	add	r7, pc, #0
   17d0c:	ldr	pc, [r7, r3, lsl #2]
   17d10:	andeq	r8, r1, r8, asr r2
   17d14:	andeq	r8, r1, r8, asr r2
   17d18:	muleq	r1, r8, sp
   17d1c:	andeq	r8, r1, r8, asr r2
   17d20:	muleq	r1, r8, sp
   17d24:	andeq	r8, r1, r8, asr r2
   17d28:	muleq	r1, r8, sp
   17d2c:	muleq	r1, r8, sp
   17d30:	muleq	r1, r8, sp
   17d34:	muleq	r1, r8, sp
   17d38:	muleq	r1, r8, sp
   17d3c:	muleq	r1, r8, sp
   17d40:	muleq	r1, r8, sp
   17d44:	muleq	r1, r8, sp
   17d48:	muleq	r1, r8, sp
   17d4c:	muleq	r1, r8, sp
   17d50:	muleq	r1, r8, sp
   17d54:	muleq	r1, r8, sp
   17d58:	muleq	r1, r8, sp
   17d5c:	muleq	r1, r8, sp
   17d60:	muleq	r1, r8, sp
   17d64:	muleq	r1, r8, sp
   17d68:	muleq	r1, r8, sp
   17d6c:	muleq	r1, r8, sp
   17d70:	muleq	r1, r8, sp
   17d74:	muleq	r1, r8, sp
   17d78:	muleq	r1, r8, sp
   17d7c:	muleq	r1, r8, sp
   17d80:	muleq	r1, r8, sp
   17d84:	muleq	r1, r8, sp
   17d88:	muleq	r1, r8, sp
   17d8c:	muleq	r1, r8, sp
   17d90:	muleq	r1, r8, sp
   17d94:	andeq	r8, r1, r8, asr r2
   17d98:	add	r2, r2, #1
   17d9c:	cmp	r2, r0
   17da0:	bcc	17cf8 <lchmod@@Base+0x13ac>
   17da4:	ldr	r7, [sp, #44]	; 0x2c
   17da8:	add	r7, r0, r7
   17dac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17db0:	bl	1191c <iswprint@plt>
   17db4:	cmp	r0, #0
   17db8:	movwne	r0, #1
   17dbc:	and	r9, r9, r0
   17dc0:	sub	r4, fp, #40	; 0x28
   17dc4:	mov	r0, r4
   17dc8:	bl	118a4 <mbsinit@plt>
   17dcc:	ldr	lr, [sp, #28]
   17dd0:	cmp	r0, #0
   17dd4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17dd8:	beq	17c90 <lchmod@@Base+0x1344>
   17ddc:	b	18178 <lchmod@@Base+0x182c>
   17de0:	ldr	r0, [sp, #32]
   17de4:	cmp	r0, #0
   17de8:	beq	17e80 <lchmod@@Base+0x1534>
   17dec:	add	r0, r6, #2
   17df0:	cmp	r0, lr
   17df4:	bcs	17e80 <lchmod@@Base+0x1534>
   17df8:	add	r1, ip, r6
   17dfc:	ldrb	r1, [r1, #1]
   17e00:	cmp	r1, #63	; 0x3f
   17e04:	bne	17e80 <lchmod@@Base+0x1534>
   17e08:	ldrb	r9, [ip, r0]
   17e0c:	sub	r2, r9, #33	; 0x21
   17e10:	cmp	r2, #29
   17e14:	bhi	17e80 <lchmod@@Base+0x1534>
   17e18:	mov	r3, #1
   17e1c:	movw	r1, #20929	; 0x51c1
   17e20:	movt	r1, #14336	; 0x3800
   17e24:	tst	r1, r3, lsl r2
   17e28:	beq	17e80 <lchmod@@Base+0x1534>
   17e2c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17e30:	tst	r1, #1
   17e34:	bne	18260 <lchmod@@Base+0x1914>
   17e38:	cmp	r8, r4
   17e3c:	movcc	r1, #63	; 0x3f
   17e40:	strbcc	r1, [r7, r8]
   17e44:	add	r2, r8, #1
   17e48:	cmp	r2, r4
   17e4c:	movcc	r1, #34	; 0x22
   17e50:	strbcc	r1, [r7, r2]
   17e54:	add	r2, r8, #2
   17e58:	cmp	r2, r4
   17e5c:	movcc	r1, #34	; 0x22
   17e60:	strbcc	r1, [r7, r2]
   17e64:	add	r2, r8, #3
   17e68:	cmp	r2, r4
   17e6c:	movcc	r1, #63	; 0x3f
   17e70:	strbcc	r1, [r7, r2]
   17e74:	add	r8, r8, #4
   17e78:	mov	r6, r0
   17e7c:	mov	r5, r9
   17e80:	mov	r9, #0
   17e84:	b	178d4 <lchmod@@Base+0xf88>
   17e88:	add	r1, r2, r6
   17e8c:	str	r1, [sp, #44]	; 0x2c
   17e90:	add	r1, r6, #1
   17e94:	mov	r3, #0
   17e98:	ldr	lr, [sp, #28]
   17e9c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17ea0:	tst	r0, #1
   17ea4:	bne	17f98 <lchmod@@Base+0x164c>
   17ea8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17eac:	tst	r2, #1
   17eb0:	bne	18260 <lchmod@@Base+0x1914>
   17eb4:	cmp	r6, #2
   17eb8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17ebc:	movwne	r3, #1
   17ec0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17ec4:	orr	r3, r3, r2
   17ec8:	tst	r3, #1
   17ecc:	bne	17f08 <lchmod@@Base+0x15bc>
   17ed0:	cmp	r8, r4
   17ed4:	movcc	r2, #39	; 0x27
   17ed8:	strbcc	r2, [r7, r8]
   17edc:	add	r3, r8, #1
   17ee0:	cmp	r3, r4
   17ee4:	movcc	r2, #36	; 0x24
   17ee8:	strbcc	r2, [r7, r3]
   17eec:	add	r3, r8, #2
   17ef0:	cmp	r3, r4
   17ef4:	movcc	r2, #39	; 0x27
   17ef8:	strbcc	r2, [r7, r3]
   17efc:	add	r8, r8, #3
   17f00:	mov	r2, #1
   17f04:	str	r2, [fp, #-56]	; 0xffffffc8
   17f08:	cmp	r8, r4
   17f0c:	movcc	r2, #92	; 0x5c
   17f10:	strbcc	r2, [r7, r8]
   17f14:	add	r3, r8, #1
   17f18:	cmp	r3, r4
   17f1c:	bcs	17f3c <lchmod@@Base+0x15f0>
   17f20:	and	r7, r5, #192	; 0xc0
   17f24:	mov	r2, #48	; 0x30
   17f28:	orr	r7, r2, r7, lsr #6
   17f2c:	ldr	r6, [sp, #80]	; 0x50
   17f30:	strb	r7, [r6, r3]
   17f34:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17f38:	ldr	r7, [sp, #80]	; 0x50
   17f3c:	add	r3, r8, #2
   17f40:	cmp	r3, r4
   17f44:	bcs	17f64 <lchmod@@Base+0x1618>
   17f48:	lsr	r7, r5, #3
   17f4c:	mov	r2, #6
   17f50:	bfi	r7, r2, #3, #29
   17f54:	ldr	r6, [sp, #80]	; 0x50
   17f58:	strb	r7, [r6, r3]
   17f5c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17f60:	ldr	r7, [sp, #80]	; 0x50
   17f64:	mov	r2, #6
   17f68:	bfi	r5, r2, #3, #29
   17f6c:	add	r8, r8, #3
   17f70:	mov	r3, #1
   17f74:	b	17fbc <lchmod@@Base+0x1670>
   17f78:	ldr	r7, [sp, #80]	; 0x50
   17f7c:	cmp	r8, r4
   17f80:	strbcc	r5, [r7, r8]
   17f84:	ldrb	r5, [ip, r1]
   17f88:	add	r1, r1, #1
   17f8c:	add	r8, r8, #1
   17f90:	tst	r0, #1
   17f94:	beq	17ea8 <lchmod@@Base+0x155c>
   17f98:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17f9c:	tst	r2, #1
   17fa0:	beq	17fb4 <lchmod@@Base+0x1668>
   17fa4:	cmp	r8, r4
   17fa8:	movcc	r2, #92	; 0x5c
   17fac:	strbcc	r2, [r7, r8]
   17fb0:	add	r8, r8, #1
   17fb4:	mov	r2, #0
   17fb8:	str	r2, [fp, #-52]	; 0xffffffcc
   17fbc:	and	sl, r3, #1
   17fc0:	ldr	r2, [sp, #44]	; 0x2c
   17fc4:	cmp	r2, r1
   17fc8:	bls	180d4 <lchmod@@Base+0x1788>
   17fcc:	cmp	sl, #0
   17fd0:	movwne	sl, #1
   17fd4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17fd8:	mvn	r7, r2
   17fdc:	orr	r7, r7, sl
   17fe0:	tst	r7, #1
   17fe4:	bne	17f78 <lchmod@@Base+0x162c>
   17fe8:	cmp	r8, r4
   17fec:	ldrcc	r7, [sp, #80]	; 0x50
   17ff0:	movcc	r2, #39	; 0x27
   17ff4:	strbcc	r2, [r7, r8]
   17ff8:	add	r7, r8, #1
   17ffc:	cmp	r7, r4
   18000:	ldrcc	r6, [sp, #80]	; 0x50
   18004:	movcc	r2, #39	; 0x27
   18008:	strbcc	r2, [r6, r7]
   1800c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   18010:	add	r8, r8, #2
   18014:	mov	r2, #0
   18018:	str	r2, [fp, #-56]	; 0xffffffc8
   1801c:	b	17f78 <lchmod@@Base+0x162c>
   18020:	cmp	r8, r4
   18024:	movcc	r0, #39	; 0x27
   18028:	strbcc	r0, [r7, r8]
   1802c:	add	r0, r8, #1
   18030:	cmp	r0, r4
   18034:	movcc	r1, #36	; 0x24
   18038:	strbcc	r1, [r7, r0]
   1803c:	add	r0, r8, #2
   18040:	cmp	r0, r4
   18044:	movcc	r1, #39	; 0x27
   18048:	strbcc	r1, [r7, r0]
   1804c:	add	r0, r8, #3
   18050:	mov	r2, #1
   18054:	cmp	r0, r4
   18058:	movcc	r1, #92	; 0x5c
   1805c:	strbcc	r1, [r7, r0]
   18060:	str	r2, [fp, #-56]	; 0xffffffc8
   18064:	add	r8, r0, #1
   18068:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1806c:	cmp	r1, #2
   18070:	beq	180c4 <lchmod@@Base+0x1778>
   18074:	add	r1, r6, #1
   18078:	mov	r9, #0
   1807c:	mov	sl, #1
   18080:	mov	r5, #48	; 0x30
   18084:	cmp	r1, lr
   18088:	bcs	178d4 <lchmod@@Base+0xf88>
   1808c:	ldrb	r1, [ip, r1]
   18090:	sub	r1, r1, #48	; 0x30
   18094:	uxtb	r1, r1
   18098:	cmp	r1, #9
   1809c:	bhi	178d4 <lchmod@@Base+0xf88>
   180a0:	cmp	r8, r4
   180a4:	movcc	r1, #48	; 0x30
   180a8:	strbcc	r1, [r7, r8]
   180ac:	add	r1, r0, #2
   180b0:	cmp	r1, r4
   180b4:	movcc	r2, #48	; 0x30
   180b8:	strbcc	r2, [r7, r1]
   180bc:	add	r8, r0, #3
   180c0:	b	178d4 <lchmod@@Base+0xf88>
   180c4:	mov	r0, #48	; 0x30
   180c8:	mov	sl, #1
   180cc:	mov	r9, #0
   180d0:	b	17b80 <lchmod@@Base+0x1234>
   180d4:	sub	r6, r1, #1
   180d8:	cmp	sl, #0
   180dc:	movwne	sl, #1
   180e0:	mov	r0, r5
   180e4:	cmp	sl, #0
   180e8:	bne	18128 <lchmod@@Base+0x17dc>
   180ec:	ldr	r1, [fp, #-56]	; 0xffffffc8
   180f0:	tst	r1, #1
   180f4:	beq	18128 <lchmod@@Base+0x17dc>
   180f8:	cmp	r8, r4
   180fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18100:	movcc	r1, #39	; 0x27
   18104:	strbcc	r1, [r7, r8]
   18108:	add	r1, r8, #1
   1810c:	cmp	r1, r4
   18110:	movcc	r2, #39	; 0x27
   18114:	strbcc	r2, [r7, r1]
   18118:	add	r8, r8, #2
   1811c:	mov	r1, #0
   18120:	str	r1, [fp, #-56]	; 0xffffffc8
   18124:	b	17c0c <lchmod@@Base+0x12c0>
   18128:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1812c:	b	17c0c <lchmod@@Base+0x12c0>
   18130:	mov	r9, #0
   18134:	b	18170 <lchmod@@Base+0x1824>
   18138:	mov	r9, #0
   1813c:	cmp	r7, lr
   18140:	bcs	18170 <lchmod@@Base+0x1824>
   18144:	ldr	ip, [fp, #-84]	; 0xffffffac
   18148:	ldr	r7, [sp, #44]	; 0x2c
   1814c:	ldr	r0, [sp, #20]
   18150:	ldrb	r0, [r0, r7]
   18154:	cmp	r0, #0
   18158:	beq	18178 <lchmod@@Base+0x182c>
   1815c:	add	r7, r7, #1
   18160:	add	r0, r6, r7
   18164:	cmp	r0, lr
   18168:	bcc	1814c <lchmod@@Base+0x1800>
   1816c:	b	18178 <lchmod@@Base+0x182c>
   18170:	ldr	ip, [fp, #-84]	; 0xffffffac
   18174:	ldr	r7, [sp, #44]	; 0x2c
   18178:	mov	r1, r7
   1817c:	ldr	r7, [sp, #80]	; 0x50
   18180:	b	17aa8 <lchmod@@Base+0x115c>
   18184:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18188:	eor	r0, r1, #2
   1818c:	orr	r0, r0, r8
   18190:	clz	r0, r0
   18194:	lsr	r0, r0, #5
   18198:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1819c:	tst	r2, r0
   181a0:	bne	18260 <lchmod@@Base+0x1914>
   181a4:	cmp	r1, #2
   181a8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   181ac:	movwne	r0, #1
   181b0:	orr	r0, r2, r0
   181b4:	tst	r0, #1
   181b8:	ldreq	r0, [sp, #56]	; 0x38
   181bc:	eoreq	r0, r0, #1
   181c0:	tsteq	r0, #1
   181c4:	bne	181f8 <lchmod@@Base+0x18ac>
   181c8:	mov	r9, lr
   181cc:	tst	r5, #1
   181d0:	bne	182c8 <lchmod@@Base+0x197c>
   181d4:	ldr	r0, [sp, #72]	; 0x48
   181d8:	cmp	r0, #0
   181dc:	beq	181f8 <lchmod@@Base+0x18ac>
   181e0:	mov	r5, #0
   181e4:	cmp	r4, #0
   181e8:	ldr	r0, [sp, #84]	; 0x54
   181ec:	mov	sl, r2
   181f0:	ldr	r6, [sp, #72]	; 0x48
   181f4:	beq	17390 <lchmod@@Base+0xa44>
   181f8:	ldr	r1, [sp, #92]	; 0x5c
   181fc:	clz	r0, r1
   18200:	lsr	r0, r0, #5
   18204:	orr	r0, r0, r2
   18208:	tst	r0, #1
   1820c:	bne	18238 <lchmod@@Base+0x18ec>
   18210:	ldrb	r0, [r1]
   18214:	cmp	r0, #0
   18218:	beq	18238 <lchmod@@Base+0x18ec>
   1821c:	add	r1, r1, #1
   18220:	cmp	r8, r4
   18224:	strbcc	r0, [r7, r8]
   18228:	add	r8, r8, #1
   1822c:	ldrb	r0, [r1], #1
   18230:	cmp	r0, #0
   18234:	bne	18220 <lchmod@@Base+0x18d4>
   18238:	cmp	r8, r4
   1823c:	movcc	r0, #0
   18240:	strbcc	r0, [r7, r8]
   18244:	b	182bc <lchmod@@Base+0x1970>
   18248:	ldr	ip, [fp, #-84]	; 0xffffffac
   1824c:	mov	lr, r4
   18250:	mov	r4, r5
   18254:	b	18260 <lchmod@@Base+0x1914>
   18258:	ldr	r7, [sp, #80]	; 0x50
   1825c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18260:	mov	r0, #0
   18264:	ldr	r1, [fp, #12]
   18268:	bic	r1, r1, #2
   1826c:	ldr	r2, [sp, #84]	; 0x54
   18270:	tst	r2, #1
   18274:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18278:	mov	r2, r3
   1827c:	movwne	r2, #4
   18280:	cmp	r3, #2
   18284:	movne	r2, r3
   18288:	str	r2, [sp]
   1828c:	str	r1, [sp, #4]
   18290:	str	r0, [sp, #8]
   18294:	ldr	r0, [sp, #68]	; 0x44
   18298:	str	r0, [sp, #12]
   1829c:	ldr	r0, [sp, #76]	; 0x4c
   182a0:	str	r0, [sp, #16]
   182a4:	mov	r0, r7
   182a8:	mov	r1, r4
   182ac:	mov	r2, ip
   182b0:	mov	r3, lr
   182b4:	bl	17308 <lchmod@@Base+0x9bc>
   182b8:	mov	r8, r0
   182bc:	mov	r0, r8
   182c0:	sub	sp, fp, #28
   182c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c8:	mov	r0, #5
   182cc:	str	r0, [sp]
   182d0:	ldr	r0, [fp, #12]
   182d4:	str	r0, [sp, #4]
   182d8:	ldr	r0, [fp, #16]
   182dc:	str	r0, [sp, #8]
   182e0:	ldr	r0, [sp, #68]	; 0x44
   182e4:	str	r0, [sp, #12]
   182e8:	ldr	r0, [sp, #76]	; 0x4c
   182ec:	str	r0, [sp, #16]
   182f0:	mov	r0, r7
   182f4:	ldr	r1, [sp, #72]	; 0x48
   182f8:	ldr	r2, [fp, #-84]	; 0xffffffac
   182fc:	mov	r3, r9
   18300:	b	182b4 <lchmod@@Base+0x1968>
   18304:	bl	11bd4 <abort@plt>
   18308:	mov	r3, r2
   1830c:	mov	r2, #0
   18310:	b	18314 <lchmod@@Base+0x19c8>
   18314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18318:	add	fp, sp, #28
   1831c:	sub	sp, sp, #36	; 0x24
   18320:	mov	r4, r2
   18324:	str	r2, [sp, #24]
   18328:	mov	r5, r1
   1832c:	mov	r6, r0
   18330:	str	r0, [sp, #20]
   18334:	movw	r8, #49672	; 0xc208
   18338:	movt	r8, #2
   1833c:	cmp	r3, #0
   18340:	movne	r8, r3
   18344:	bl	11a6c <__errno_location@plt>
   18348:	str	r0, [sp, #28]
   1834c:	ldm	r8, {r3, r9}
   18350:	ldr	r1, [r8, #40]	; 0x28
   18354:	ldr	r2, [r8, #44]	; 0x2c
   18358:	ldr	r7, [r0]
   1835c:	str	r7, [sp, #32]
   18360:	add	sl, r8, #8
   18364:	cmp	r4, #0
   18368:	orreq	r9, r9, #1
   1836c:	stm	sp, {r3, r9, sl}
   18370:	str	r1, [sp, #12]
   18374:	str	r2, [sp, #16]
   18378:	mov	r0, #0
   1837c:	mov	r1, #0
   18380:	mov	r2, r6
   18384:	mov	r3, r5
   18388:	mov	r7, r5
   1838c:	bl	17308 <lchmod@@Base+0x9bc>
   18390:	mov	r5, r0
   18394:	add	r4, r0, #1
   18398:	mov	r0, r4
   1839c:	bl	194b4 <lchmod@@Base+0x2b68>
   183a0:	mov	r6, r0
   183a4:	ldr	r0, [r8]
   183a8:	ldr	r1, [r8, #40]	; 0x28
   183ac:	ldr	r2, [r8, #44]	; 0x2c
   183b0:	stm	sp, {r0, r9, sl}
   183b4:	str	r1, [sp, #12]
   183b8:	str	r2, [sp, #16]
   183bc:	mov	r0, r6
   183c0:	mov	r1, r4
   183c4:	ldr	r2, [sp, #20]
   183c8:	mov	r3, r7
   183cc:	bl	17308 <lchmod@@Base+0x9bc>
   183d0:	ldr	r0, [sp, #24]
   183d4:	ldr	r1, [sp, #32]
   183d8:	ldr	r2, [sp, #28]
   183dc:	str	r1, [r2]
   183e0:	cmp	r0, #0
   183e4:	strne	r5, [r0]
   183e8:	mov	r0, r6
   183ec:	sub	sp, fp, #28
   183f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   183f8:	add	fp, sp, #24
   183fc:	movw	r8, #49560	; 0xc198
   18400:	movt	r8, #2
   18404:	ldr	r4, [r8]
   18408:	movw	r5, #49564	; 0xc19c
   1840c:	movt	r5, #2
   18410:	ldr	r0, [r5]
   18414:	cmp	r0, #2
   18418:	blt	18444 <lchmod@@Base+0x1af8>
   1841c:	add	r7, r4, #12
   18420:	mov	r6, #0
   18424:	ldr	r0, [r7, r6, lsl #3]
   18428:	bl	137c0 <__assert_fail@plt+0x1b8c>
   1842c:	add	r0, r6, #1
   18430:	ldr	r1, [r5]
   18434:	add	r2, r6, #2
   18438:	cmp	r2, r1
   1843c:	mov	r6, r0
   18440:	blt	18424 <lchmod@@Base+0x1ad8>
   18444:	ldr	r0, [r4, #4]
   18448:	movw	r7, #49720	; 0xc238
   1844c:	movt	r7, #2
   18450:	cmp	r0, r7
   18454:	beq	1846c <lchmod@@Base+0x1b20>
   18458:	bl	137c0 <__assert_fail@plt+0x1b8c>
   1845c:	movw	r0, #49568	; 0xc1a0
   18460:	movt	r0, #2
   18464:	mov	r6, #256	; 0x100
   18468:	strd	r6, [r0]
   1846c:	movw	r6, #49568	; 0xc1a0
   18470:	movt	r6, #2
   18474:	cmp	r4, r6
   18478:	beq	18488 <lchmod@@Base+0x1b3c>
   1847c:	mov	r0, r4
   18480:	bl	137c0 <__assert_fail@plt+0x1b8c>
   18484:	str	r6, [r8]
   18488:	mov	r0, #1
   1848c:	str	r0, [r5]
   18490:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18494:	movw	r3, #49672	; 0xc208
   18498:	movt	r3, #2
   1849c:	mvn	r2, #0
   184a0:	b	184a4 <lchmod@@Base+0x1b58>
   184a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a8:	add	fp, sp, #28
   184ac:	sub	sp, sp, #44	; 0x2c
   184b0:	mov	r7, r3
   184b4:	str	r2, [sp, #36]	; 0x24
   184b8:	str	r1, [sp, #32]
   184bc:	mov	r5, r0
   184c0:	bl	11a6c <__errno_location@plt>
   184c4:	cmp	r5, #0
   184c8:	blt	18634 <lchmod@@Base+0x1ce8>
   184cc:	cmn	r5, #-2147483647	; 0x80000001
   184d0:	beq	18634 <lchmod@@Base+0x1ce8>
   184d4:	movw	r4, #49560	; 0xc198
   184d8:	movt	r4, #2
   184dc:	ldr	r6, [r4]
   184e0:	str	r0, [sp, #28]
   184e4:	ldr	r0, [r0]
   184e8:	str	r0, [sp, #24]
   184ec:	movw	r8, #49564	; 0xc19c
   184f0:	movt	r8, #2
   184f4:	ldr	r1, [r8]
   184f8:	cmp	r1, r5
   184fc:	ble	18508 <lchmod@@Base+0x1bbc>
   18500:	mov	sl, r6
   18504:	b	18570 <lchmod@@Base+0x1c24>
   18508:	str	r1, [fp, #-32]	; 0xffffffe0
   1850c:	mov	r0, #8
   18510:	str	r0, [sp]
   18514:	movw	r9, #49568	; 0xc1a0
   18518:	movt	r9, #2
   1851c:	subs	r0, r6, r9
   18520:	movne	r0, r6
   18524:	add	r2, r5, #1
   18528:	sub	r2, r2, r1
   1852c:	sub	r1, fp, #32
   18530:	mvn	r3, #-2147483648	; 0x80000000
   18534:	bl	1959c <lchmod@@Base+0x2c50>
   18538:	mov	sl, r0
   1853c:	str	r0, [r4]
   18540:	cmp	r6, r9
   18544:	ldrdeq	r0, [r9]
   18548:	stmeq	sl, {r0, r1}
   1854c:	ldr	r1, [r8]
   18550:	add	r0, sl, r1, lsl #3
   18554:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18558:	sub	r1, r2, r1
   1855c:	lsl	r2, r1, #3
   18560:	mov	r1, #0
   18564:	bl	11a90 <memset@plt>
   18568:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1856c:	str	r0, [r8]
   18570:	mov	r9, sl
   18574:	ldr	r6, [r9, r5, lsl #3]!
   18578:	ldr	r4, [r9, #4]!
   1857c:	ldm	r7, {r0, r1}
   18580:	ldr	r2, [r7, #40]	; 0x28
   18584:	ldr	r3, [r7, #44]	; 0x2c
   18588:	orr	r8, r1, #1
   1858c:	add	r1, r7, #8
   18590:	stm	sp, {r0, r8}
   18594:	str	r1, [sp, #20]
   18598:	add	r0, sp, #8
   1859c:	stm	r0, {r1, r2, r3}
   185a0:	mov	r0, r4
   185a4:	mov	r1, r6
   185a8:	ldr	r2, [sp, #32]
   185ac:	ldr	r3, [sp, #36]	; 0x24
   185b0:	bl	17308 <lchmod@@Base+0x9bc>
   185b4:	cmp	r6, r0
   185b8:	bhi	1861c <lchmod@@Base+0x1cd0>
   185bc:	add	r6, r0, #1
   185c0:	str	r6, [sl, r5, lsl #3]
   185c4:	movw	r0, #49720	; 0xc238
   185c8:	movt	r0, #2
   185cc:	cmp	r4, r0
   185d0:	beq	185dc <lchmod@@Base+0x1c90>
   185d4:	mov	r0, r4
   185d8:	bl	137c0 <__assert_fail@plt+0x1b8c>
   185dc:	mov	r0, r6
   185e0:	bl	194b4 <lchmod@@Base+0x2b68>
   185e4:	mov	r4, r0
   185e8:	str	r0, [r9]
   185ec:	ldr	r0, [r7]
   185f0:	ldr	r1, [r7, #40]	; 0x28
   185f4:	ldr	r2, [r7, #44]	; 0x2c
   185f8:	stm	sp, {r0, r8}
   185fc:	ldr	r0, [sp, #20]
   18600:	add	r3, sp, #8
   18604:	stm	r3, {r0, r1, r2}
   18608:	mov	r0, r4
   1860c:	mov	r1, r6
   18610:	ldr	r2, [sp, #32]
   18614:	ldr	r3, [sp, #36]	; 0x24
   18618:	bl	17308 <lchmod@@Base+0x9bc>
   1861c:	ldr	r0, [sp, #28]
   18620:	ldr	r1, [sp, #24]
   18624:	str	r1, [r0]
   18628:	mov	r0, r4
   1862c:	sub	sp, fp, #28
   18630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18634:	bl	11bd4 <abort@plt>
   18638:	movw	r3, #49672	; 0xc208
   1863c:	movt	r3, #2
   18640:	b	184a4 <lchmod@@Base+0x1b58>
   18644:	mov	r1, r0
   18648:	mov	r0, #0
   1864c:	b	18494 <lchmod@@Base+0x1b48>
   18650:	mov	r2, r1
   18654:	mov	r1, r0
   18658:	mov	r0, #0
   1865c:	b	18638 <lchmod@@Base+0x1cec>
   18660:	push	{r4, r5, r6, sl, fp, lr}
   18664:	add	fp, sp, #16
   18668:	sub	sp, sp, #48	; 0x30
   1866c:	mov	r4, r2
   18670:	mov	r5, r0
   18674:	mov	r6, sp
   18678:	mov	r0, r6
   1867c:	bl	1869c <lchmod@@Base+0x1d50>
   18680:	mov	r0, r5
   18684:	mov	r1, r4
   18688:	mvn	r2, #0
   1868c:	mov	r3, r6
   18690:	bl	184a4 <lchmod@@Base+0x1b58>
   18694:	sub	sp, fp, #16
   18698:	pop	{r4, r5, r6, sl, fp, pc}
   1869c:	vmov.i32	q8, #0	; 0x00000000
   186a0:	mov	r2, #32
   186a4:	mov	r3, r0
   186a8:	vst1.32	{d16-d17}, [r3], r2
   186ac:	vst1.32	{d16-d17}, [r3]
   186b0:	add	r2, r0, #16
   186b4:	vst1.32	{d16-d17}, [r2]
   186b8:	cmp	r1, #10
   186bc:	strne	r1, [r0]
   186c0:	bxne	lr
   186c4:	push	{fp, lr}
   186c8:	mov	fp, sp
   186cc:	bl	11bd4 <abort@plt>
   186d0:	push	{r4, r5, r6, r7, fp, lr}
   186d4:	add	fp, sp, #16
   186d8:	sub	sp, sp, #48	; 0x30
   186dc:	mov	r4, r3
   186e0:	mov	r5, r2
   186e4:	mov	r6, r0
   186e8:	mov	r7, sp
   186ec:	mov	r0, r7
   186f0:	bl	1869c <lchmod@@Base+0x1d50>
   186f4:	mov	r0, r6
   186f8:	mov	r1, r5
   186fc:	mov	r2, r4
   18700:	mov	r3, r7
   18704:	bl	184a4 <lchmod@@Base+0x1b58>
   18708:	sub	sp, fp, #16
   1870c:	pop	{r4, r5, r6, r7, fp, pc}
   18710:	mov	r2, r1
   18714:	mov	r1, r0
   18718:	mov	r0, #0
   1871c:	b	18660 <lchmod@@Base+0x1d14>
   18720:	mov	r3, r2
   18724:	mov	r2, r1
   18728:	mov	r1, r0
   1872c:	mov	r0, #0
   18730:	b	186d0 <lchmod@@Base+0x1d84>
   18734:	push	{r4, r5, r6, sl, fp, lr}
   18738:	add	fp, sp, #16
   1873c:	sub	sp, sp, #48	; 0x30
   18740:	mov	r4, r1
   18744:	mov	r5, r0
   18748:	mov	r0, #32
   1874c:	movw	r1, #49672	; 0xc208
   18750:	movt	r1, #2
   18754:	add	r3, r1, #16
   18758:	vld1.64	{d16-d17}, [r1], r0
   1875c:	mov	r6, sp
   18760:	vld1.64	{d18-d19}, [r3]
   18764:	add	r3, r6, #16
   18768:	vld1.64	{d20-d21}, [r1]
   1876c:	vst1.64	{d18-d19}, [r3]
   18770:	mov	r1, r6
   18774:	vst1.64	{d16-d17}, [r1], r0
   18778:	vst1.64	{d20-d21}, [r1]
   1877c:	mov	r0, r6
   18780:	mov	r1, r2
   18784:	mov	r2, #1
   18788:	bl	171fc <lchmod@@Base+0x8b0>
   1878c:	mov	r0, #0
   18790:	mov	r1, r5
   18794:	mov	r2, r4
   18798:	mov	r3, r6
   1879c:	bl	184a4 <lchmod@@Base+0x1b58>
   187a0:	sub	sp, fp, #16
   187a4:	pop	{r4, r5, r6, sl, fp, pc}
   187a8:	mov	r2, r1
   187ac:	mvn	r1, #0
   187b0:	b	18734 <lchmod@@Base+0x1de8>
   187b4:	mov	r1, #58	; 0x3a
   187b8:	b	187a8 <lchmod@@Base+0x1e5c>
   187bc:	mov	r2, #58	; 0x3a
   187c0:	b	18734 <lchmod@@Base+0x1de8>
   187c4:	push	{r4, r5, r6, sl, fp, lr}
   187c8:	add	fp, sp, #16
   187cc:	sub	sp, sp, #48	; 0x30
   187d0:	mov	r4, r2
   187d4:	mov	r5, r0
   187d8:	mov	r6, sp
   187dc:	mov	r0, r6
   187e0:	bl	1869c <lchmod@@Base+0x1d50>
   187e4:	mov	r0, r6
   187e8:	mov	r1, #58	; 0x3a
   187ec:	mov	r2, #1
   187f0:	bl	171fc <lchmod@@Base+0x8b0>
   187f4:	mov	r0, r5
   187f8:	mov	r1, r4
   187fc:	mvn	r2, #0
   18800:	mov	r3, r6
   18804:	bl	184a4 <lchmod@@Base+0x1b58>
   18808:	sub	sp, fp, #16
   1880c:	pop	{r4, r5, r6, sl, fp, pc}
   18810:	push	{fp, lr}
   18814:	mov	fp, sp
   18818:	sub	sp, sp, #8
   1881c:	mvn	ip, #0
   18820:	str	ip, [sp]
   18824:	bl	18830 <lchmod@@Base+0x1ee4>
   18828:	mov	sp, fp
   1882c:	pop	{fp, pc}
   18830:	push	{r4, r5, r6, r7, fp, lr}
   18834:	add	fp, sp, #16
   18838:	sub	sp, sp, #48	; 0x30
   1883c:	mov	r7, r3
   18840:	mov	r5, r0
   18844:	mov	r0, #32
   18848:	movw	r3, #49672	; 0xc208
   1884c:	movt	r3, #2
   18850:	add	r4, r3, #16
   18854:	vld1.64	{d16-d17}, [r3], r0
   18858:	mov	r6, sp
   1885c:	vld1.64	{d18-d19}, [r4]
   18860:	add	r4, r6, #16
   18864:	vld1.64	{d20-d21}, [r3]
   18868:	vst1.64	{d18-d19}, [r4]
   1886c:	mov	r3, r6
   18870:	vst1.64	{d16-d17}, [r3], r0
   18874:	vst1.64	{d20-d21}, [r3]
   18878:	mov	r0, r6
   1887c:	bl	17254 <lchmod@@Base+0x908>
   18880:	ldr	r2, [fp, #8]
   18884:	mov	r0, r5
   18888:	mov	r1, r7
   1888c:	mov	r3, r6
   18890:	bl	184a4 <lchmod@@Base+0x1b58>
   18894:	sub	sp, fp, #16
   18898:	pop	{r4, r5, r6, r7, fp, pc}
   1889c:	mov	r3, r2
   188a0:	mov	r2, r1
   188a4:	mov	r1, r0
   188a8:	mov	r0, #0
   188ac:	b	18810 <lchmod@@Base+0x1ec4>
   188b0:	push	{fp, lr}
   188b4:	mov	fp, sp
   188b8:	sub	sp, sp, #8
   188bc:	mov	ip, r2
   188c0:	mov	r2, r1
   188c4:	mov	r1, r0
   188c8:	str	r3, [sp]
   188cc:	mov	r0, #0
   188d0:	mov	r3, ip
   188d4:	bl	18830 <lchmod@@Base+0x1ee4>
   188d8:	mov	sp, fp
   188dc:	pop	{fp, pc}
   188e0:	movw	r3, #49576	; 0xc1a8
   188e4:	movt	r3, #2
   188e8:	b	184a4 <lchmod@@Base+0x1b58>
   188ec:	mov	r2, r1
   188f0:	mov	r1, r0
   188f4:	mov	r0, #0
   188f8:	b	188e0 <lchmod@@Base+0x1f94>
   188fc:	mvn	r2, #0
   18900:	b	188e0 <lchmod@@Base+0x1f94>
   18904:	mov	r1, r0
   18908:	mov	r0, #0
   1890c:	b	188fc <lchmod@@Base+0x1fb0>
   18910:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18914:	add	fp, sp, #24
   18918:	sub	sp, sp, #16
   1891c:	mov	r4, r1
   18920:	mov	r5, r0
   18924:	mov	r7, #0
   18928:	mov	r0, #0
   1892c:	mov	r1, r5
   18930:	mov	r2, #5
   18934:	bl	118c8 <dcgettext@plt>
   18938:	cmp	r0, r5
   1893c:	beq	18948 <lchmod@@Base+0x1ffc>
   18940:	sub	sp, fp, #24
   18944:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18948:	bl	1a9f8 <lchmod@@Base+0x40ac>
   1894c:	mov	r6, r0
   18950:	mov	r8, #56	; 0x38
   18954:	mov	r0, #45	; 0x2d
   18958:	stm	sp, {r0, r8}
   1895c:	str	r7, [sp, #8]
   18960:	str	r7, [sp, #12]
   18964:	mov	r0, r6
   18968:	mov	r1, #85	; 0x55
   1896c:	mov	r2, #84	; 0x54
   18970:	mov	r3, #70	; 0x46
   18974:	bl	18a0c <lchmod@@Base+0x20c0>
   18978:	cmp	r0, #0
   1897c:	beq	18998 <lchmod@@Base+0x204c>
   18980:	ldrb	r1, [r5]
   18984:	movw	r2, #47243	; 0xb88b
   18988:	movt	r2, #1
   1898c:	movw	r0, #47247	; 0xb88f
   18990:	movt	r0, #1
   18994:	b	189dc <lchmod@@Base+0x2090>
   18998:	mov	r0, #48	; 0x30
   1899c:	mov	r1, #51	; 0x33
   189a0:	str	r8, [sp]
   189a4:	stmib	sp, {r0, r1}
   189a8:	str	r0, [sp, #12]
   189ac:	mov	r0, r6
   189b0:	mov	r1, #71	; 0x47
   189b4:	mov	r2, #66	; 0x42
   189b8:	mov	r3, #49	; 0x31
   189bc:	bl	18a0c <lchmod@@Base+0x20c0>
   189c0:	cmp	r0, #0
   189c4:	beq	189ec <lchmod@@Base+0x20a0>
   189c8:	ldrb	r1, [r5]
   189cc:	movw	r2, #47251	; 0xb893
   189d0:	movt	r2, #1
   189d4:	movw	r0, #47255	; 0xb897
   189d8:	movt	r0, #1
   189dc:	cmp	r1, #96	; 0x60
   189e0:	moveq	r0, r2
   189e4:	sub	sp, fp, #24
   189e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   189ec:	movw	r1, #47237	; 0xb885
   189f0:	movt	r1, #1
   189f4:	movw	r0, #47241	; 0xb889
   189f8:	movt	r0, #1
   189fc:	cmp	r4, #9
   18a00:	moveq	r0, r1
   18a04:	sub	sp, fp, #24
   18a08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a0c:	push	{r4, r5, r6, r7, fp, lr}
   18a10:	add	fp, sp, #16
   18a14:	sub	sp, sp, #16
   18a18:	mov	r4, r3
   18a1c:	mov	r5, r2
   18a20:	mov	r7, r1
   18a24:	mov	r6, r0
   18a28:	mov	r0, r1
   18a2c:	bl	1a380 <lchmod@@Base+0x3a34>
   18a30:	ldrb	r1, [r6]
   18a34:	cmp	r0, #0
   18a38:	andne	r1, r1, #223	; 0xdf
   18a3c:	mov	r0, #0
   18a40:	cmp	r1, r7
   18a44:	bne	18a84 <lchmod@@Base+0x2138>
   18a48:	cmp	r7, #0
   18a4c:	moveq	r0, #1
   18a50:	subeq	sp, fp, #16
   18a54:	popeq	{r4, r5, r6, r7, fp, pc}
   18a58:	ldr	r0, [fp, #20]
   18a5c:	ldr	r1, [fp, #16]
   18a60:	ldr	r2, [fp, #12]
   18a64:	ldr	r3, [fp, #8]
   18a68:	str	r2, [sp]
   18a6c:	str	r1, [sp, #4]
   18a70:	str	r0, [sp, #8]
   18a74:	mov	r0, r6
   18a78:	mov	r1, r5
   18a7c:	mov	r2, r4
   18a80:	bl	18a8c <lchmod@@Base+0x2140>
   18a84:	sub	sp, fp, #16
   18a88:	pop	{r4, r5, r6, r7, fp, pc}
   18a8c:	push	{r4, r5, r6, r7, fp, lr}
   18a90:	add	fp, sp, #16
   18a94:	sub	sp, sp, #8
   18a98:	mov	r4, r3
   18a9c:	mov	r5, r2
   18aa0:	mov	r7, r1
   18aa4:	mov	r6, r0
   18aa8:	mov	r0, r1
   18aac:	bl	1a380 <lchmod@@Base+0x3a34>
   18ab0:	ldrb	r1, [r6, #1]
   18ab4:	cmp	r0, #0
   18ab8:	andne	r1, r1, #223	; 0xdf
   18abc:	mov	r0, #0
   18ac0:	cmp	r1, r7
   18ac4:	bne	18afc <lchmod@@Base+0x21b0>
   18ac8:	cmp	r7, #0
   18acc:	moveq	r0, #1
   18ad0:	subeq	sp, fp, #16
   18ad4:	popeq	{r4, r5, r6, r7, fp, pc}
   18ad8:	ldr	r0, [fp, #16]
   18adc:	ldr	r1, [fp, #12]
   18ae0:	ldr	r3, [fp, #8]
   18ae4:	str	r1, [sp]
   18ae8:	str	r0, [sp, #4]
   18aec:	mov	r0, r6
   18af0:	mov	r1, r5
   18af4:	mov	r2, r4
   18af8:	bl	18b04 <lchmod@@Base+0x21b8>
   18afc:	sub	sp, fp, #16
   18b00:	pop	{r4, r5, r6, r7, fp, pc}
   18b04:	push	{r4, r5, r6, r7, fp, lr}
   18b08:	add	fp, sp, #16
   18b0c:	sub	sp, sp, #8
   18b10:	mov	r4, r3
   18b14:	mov	r5, r2
   18b18:	mov	r7, r1
   18b1c:	mov	r6, r0
   18b20:	mov	r0, r1
   18b24:	bl	1a380 <lchmod@@Base+0x3a34>
   18b28:	ldrb	r1, [r6, #2]
   18b2c:	cmp	r0, #0
   18b30:	andne	r1, r1, #223	; 0xdf
   18b34:	mov	r0, #0
   18b38:	cmp	r1, r7
   18b3c:	bne	18b6c <lchmod@@Base+0x2220>
   18b40:	cmp	r7, #0
   18b44:	moveq	r0, #1
   18b48:	subeq	sp, fp, #16
   18b4c:	popeq	{r4, r5, r6, r7, fp, pc}
   18b50:	ldr	r0, [fp, #12]
   18b54:	ldr	r3, [fp, #8]
   18b58:	str	r0, [sp]
   18b5c:	mov	r0, r6
   18b60:	mov	r1, r5
   18b64:	mov	r2, r4
   18b68:	bl	18b74 <lchmod@@Base+0x2228>
   18b6c:	sub	sp, fp, #16
   18b70:	pop	{r4, r5, r6, r7, fp, pc}
   18b74:	push	{r4, r5, r6, r7, fp, lr}
   18b78:	add	fp, sp, #16
   18b7c:	mov	r4, r3
   18b80:	mov	r5, r2
   18b84:	mov	r7, r1
   18b88:	mov	r6, r0
   18b8c:	mov	r0, r1
   18b90:	bl	1a380 <lchmod@@Base+0x3a34>
   18b94:	ldrb	r1, [r6, #3]
   18b98:	ldr	r3, [fp, #8]
   18b9c:	cmp	r0, #0
   18ba0:	andne	r1, r1, #223	; 0xdf
   18ba4:	mov	r0, #0
   18ba8:	cmp	r1, r7
   18bac:	popne	{r4, r5, r6, r7, fp, pc}
   18bb0:	cmp	r7, #0
   18bb4:	beq	18bcc <lchmod@@Base+0x2280>
   18bb8:	mov	r0, r6
   18bbc:	mov	r1, r5
   18bc0:	mov	r2, r4
   18bc4:	pop	{r4, r5, r6, r7, fp, lr}
   18bc8:	b	18bd4 <lchmod@@Base+0x2288>
   18bcc:	mov	r0, #1
   18bd0:	pop	{r4, r5, r6, r7, fp, pc}
   18bd4:	push	{r4, r5, r6, r7, fp, lr}
   18bd8:	add	fp, sp, #16
   18bdc:	mov	r4, r3
   18be0:	mov	r5, r2
   18be4:	mov	r7, r1
   18be8:	mov	r6, r0
   18bec:	mov	r0, r1
   18bf0:	bl	1a380 <lchmod@@Base+0x3a34>
   18bf4:	ldrb	r1, [r6, #4]
   18bf8:	cmp	r0, #0
   18bfc:	andne	r1, r1, #223	; 0xdf
   18c00:	mov	r0, #0
   18c04:	cmp	r1, r7
   18c08:	popne	{r4, r5, r6, r7, fp, pc}
   18c0c:	cmp	r7, #0
   18c10:	beq	18c28 <lchmod@@Base+0x22dc>
   18c14:	mov	r0, r6
   18c18:	mov	r1, r5
   18c1c:	mov	r2, r4
   18c20:	pop	{r4, r5, r6, r7, fp, lr}
   18c24:	b	18c30 <lchmod@@Base+0x22e4>
   18c28:	mov	r0, #1
   18c2c:	pop	{r4, r5, r6, r7, fp, pc}
   18c30:	push	{r4, r5, r6, sl, fp, lr}
   18c34:	add	fp, sp, #16
   18c38:	mov	r4, r2
   18c3c:	mov	r6, r1
   18c40:	mov	r5, r0
   18c44:	mov	r0, r1
   18c48:	bl	1a380 <lchmod@@Base+0x3a34>
   18c4c:	ldrb	r1, [r5, #5]
   18c50:	cmp	r0, #0
   18c54:	andne	r1, r1, #223	; 0xdf
   18c58:	mov	r0, #0
   18c5c:	cmp	r1, r6
   18c60:	popne	{r4, r5, r6, sl, fp, pc}
   18c64:	cmp	r6, #0
   18c68:	beq	18c7c <lchmod@@Base+0x2330>
   18c6c:	mov	r0, r5
   18c70:	mov	r1, r4
   18c74:	pop	{r4, r5, r6, sl, fp, lr}
   18c78:	b	18c84 <lchmod@@Base+0x2338>
   18c7c:	mov	r0, #1
   18c80:	pop	{r4, r5, r6, sl, fp, pc}
   18c84:	push	{r4, r5, fp, lr}
   18c88:	add	fp, sp, #8
   18c8c:	mov	r5, r1
   18c90:	mov	r4, r0
   18c94:	mov	r0, r1
   18c98:	bl	1a380 <lchmod@@Base+0x3a34>
   18c9c:	ldrb	r1, [r4, #6]
   18ca0:	cmp	r0, #0
   18ca4:	andne	r1, r1, #223	; 0xdf
   18ca8:	mov	r0, #0
   18cac:	cmp	r1, r5
   18cb0:	popne	{r4, r5, fp, pc}
   18cb4:	cmp	r5, #0
   18cb8:	beq	18cc8 <lchmod@@Base+0x237c>
   18cbc:	mov	r0, r4
   18cc0:	pop	{r4, r5, fp, lr}
   18cc4:	b	18cd0 <lchmod@@Base+0x2384>
   18cc8:	mov	r0, #1
   18ccc:	pop	{r4, r5, fp, pc}
   18cd0:	push	{r4, sl, fp, lr}
   18cd4:	add	fp, sp, #8
   18cd8:	mov	r4, r0
   18cdc:	mov	r0, #0
   18ce0:	bl	1a380 <lchmod@@Base+0x3a34>
   18ce4:	ldrb	r1, [r4, #7]
   18ce8:	cmp	r0, #0
   18cec:	beq	18d04 <lchmod@@Base+0x23b8>
   18cf0:	tst	r1, #223	; 0xdf
   18cf4:	moveq	r0, #1
   18cf8:	popeq	{r4, sl, fp, pc}
   18cfc:	mov	r0, #0
   18d00:	pop	{r4, sl, fp, pc}
   18d04:	cmp	r1, #0
   18d08:	moveq	r0, #1
   18d0c:	popeq	{r4, sl, fp, pc}
   18d10:	mov	r0, #0
   18d14:	pop	{r4, sl, fp, pc}
   18d18:	push	{r4, r5, r6, sl, fp, lr}
   18d1c:	add	fp, sp, #16
   18d20:	mov	r5, r1
   18d24:	ldr	r4, [r0], #8
   18d28:	cmp	r4, r0
   18d2c:	beq	18d50 <lchmod@@Base+0x2404>
   18d30:	mov	r0, r4
   18d34:	mov	r1, r5
   18d38:	bl	19ea0 <lchmod@@Base+0x3554>
   18d3c:	mov	r6, r0
   18d40:	cmp	r0, #0
   18d44:	moveq	r6, r4
   18d48:	mov	r0, r6
   18d4c:	pop	{r4, r5, r6, sl, fp, pc}
   18d50:	mov	r0, r5
   18d54:	bl	19e70 <lchmod@@Base+0x3524>
   18d58:	cmp	r0, #0
   18d5c:	moveq	r6, #0
   18d60:	moveq	r0, r6
   18d64:	popeq	{r4, r5, r6, sl, fp, pc}
   18d68:	mov	r6, r0
   18d6c:	mov	r1, r4
   18d70:	mov	r2, r5
   18d74:	bl	11898 <memcpy@plt>
   18d78:	mov	r0, r6
   18d7c:	pop	{r4, r5, r6, sl, fp, pc}
   18d80:	push	{r4, r5, fp, lr}
   18d84:	add	fp, sp, #8
   18d88:	mov	r4, r0
   18d8c:	ldr	r5, [r0, #4]
   18d90:	bl	18ddc <lchmod@@Base+0x2490>
   18d94:	ldr	r0, [r4, #4]
   18d98:	cmp	r0, r5, lsl #1
   18d9c:	bhi	18dc0 <lchmod@@Base+0x2474>
   18da0:	lsl	r5, r5, #1
   18da4:	mov	r0, r5
   18da8:	bl	19e70 <lchmod@@Base+0x3524>
   18dac:	cmp	r0, #0
   18db0:	stmne	r4, {r0, r5}
   18db4:	movne	r0, #1
   18db8:	popne	{r4, r5, fp, pc}
   18dbc:	b	18dcc <lchmod@@Base+0x2480>
   18dc0:	bl	11a6c <__errno_location@plt>
   18dc4:	mov	r1, #12
   18dc8:	str	r1, [r0]
   18dcc:	mov	r0, r4
   18dd0:	bl	18df0 <lchmod@@Base+0x24a4>
   18dd4:	mov	r0, #0
   18dd8:	pop	{r4, r5, fp, pc}
   18ddc:	mov	r1, r0
   18de0:	ldr	r0, [r1], #8
   18de4:	cmp	r0, r1
   18de8:	bxeq	lr
   18dec:	b	137c0 <__assert_fail@plt+0x1b8c>
   18df0:	mov	r1, #1024	; 0x400
   18df4:	add	r2, r0, #8
   18df8:	str	r2, [r0]
   18dfc:	str	r1, [r0, #4]
   18e00:	bx	lr
   18e04:	push	{r4, r5, r6, r7, fp, lr}
   18e08:	add	fp, sp, #16
   18e0c:	mov	r4, r0
   18e10:	add	r5, r0, #8
   18e14:	ldrd	r0, [r0]
   18e18:	lsl	r7, r1, #1
   18e1c:	cmp	r0, r5
   18e20:	beq	18e44 <lchmod@@Base+0x24f8>
   18e24:	cmp	r7, r1
   18e28:	bcc	18e74 <lchmod@@Base+0x2528>
   18e2c:	mov	r1, r7
   18e30:	bl	19ea0 <lchmod@@Base+0x3554>
   18e34:	mov	r6, r0
   18e38:	cmp	r0, #0
   18e3c:	bne	18e68 <lchmod@@Base+0x251c>
   18e40:	b	18e80 <lchmod@@Base+0x2534>
   18e44:	mov	r0, r7
   18e48:	bl	19e70 <lchmod@@Base+0x3524>
   18e4c:	cmp	r0, #0
   18e50:	moveq	r0, #0
   18e54:	popeq	{r4, r5, r6, r7, fp, pc}
   18e58:	mov	r6, r0
   18e5c:	ldr	r2, [r4, #4]
   18e60:	mov	r1, r5
   18e64:	bl	11898 <memcpy@plt>
   18e68:	strd	r6, [r4]
   18e6c:	mov	r0, #1
   18e70:	pop	{r4, r5, r6, r7, fp, pc}
   18e74:	bl	11a6c <__errno_location@plt>
   18e78:	mov	r1, #12
   18e7c:	str	r1, [r0]
   18e80:	ldr	r0, [r4]
   18e84:	bl	137c0 <__assert_fail@plt+0x1b8c>
   18e88:	mov	r0, r4
   18e8c:	bl	18e98 <lchmod@@Base+0x254c>
   18e90:	mov	r0, #0
   18e94:	pop	{r4, r5, r6, r7, fp, pc}
   18e98:	mov	r1, #1024	; 0x400
   18e9c:	add	r2, r0, #8
   18ea0:	str	r2, [r0]
   18ea4:	str	r1, [r0, #4]
   18ea8:	bx	lr
   18eac:	push	{r4, sl, fp, lr}
   18eb0:	add	fp, sp, #8
   18eb4:	mov	r4, r1
   18eb8:	bl	11a24 <getfilecon@plt>
   18ebc:	mov	r1, r4
   18ec0:	pop	{r4, sl, fp, lr}
   18ec4:	b	18ec8 <lchmod@@Base+0x257c>
   18ec8:	push	{r4, r5, fp, lr}
   18ecc:	add	fp, sp, #8
   18ed0:	cmp	r0, #10
   18ed4:	beq	18eec <lchmod@@Base+0x25a0>
   18ed8:	cmp	r0, #0
   18edc:	bne	18f34 <lchmod@@Base+0x25e8>
   18ee0:	bl	11a6c <__errno_location@plt>
   18ee4:	mov	r1, #95	; 0x5f
   18ee8:	b	18f2c <lchmod@@Base+0x25e0>
   18eec:	mov	r4, r1
   18ef0:	ldr	r5, [r1]
   18ef4:	movw	r1, #47344	; 0xb8f0
   18ef8:	movt	r1, #1
   18efc:	mov	r0, r5
   18f00:	bl	1182c <strcmp@plt>
   18f04:	mov	r1, r0
   18f08:	mov	r0, #10
   18f0c:	cmp	r1, #0
   18f10:	popne	{r4, r5, fp, pc}
   18f14:	mov	r0, r5
   18f18:	bl	11b68 <freecon@plt>
   18f1c:	mov	r0, #0
   18f20:	str	r0, [r4]
   18f24:	bl	11a6c <__errno_location@plt>
   18f28:	mov	r1, #61	; 0x3d
   18f2c:	str	r1, [r0]
   18f30:	mvn	r0, #0
   18f34:	pop	{r4, r5, fp, pc}
   18f38:	push	{r4, sl, fp, lr}
   18f3c:	add	fp, sp, #8
   18f40:	mov	r4, r1
   18f44:	bl	119ac <lgetfilecon@plt>
   18f48:	mov	r1, r4
   18f4c:	pop	{r4, sl, fp, lr}
   18f50:	b	18ec8 <lchmod@@Base+0x257c>
   18f54:	push	{r4, sl, fp, lr}
   18f58:	add	fp, sp, #8
   18f5c:	mov	r4, r1
   18f60:	bl	118ec <fgetfilecon@plt>
   18f64:	mov	r1, r4
   18f68:	pop	{r4, sl, fp, lr}
   18f6c:	b	18ec8 <lchmod@@Base+0x257c>
   18f70:	push	{r4, r5, r6, r7, fp, lr}
   18f74:	add	fp, sp, #16
   18f78:	mov	r4, r0
   18f7c:	cmp	r0, #2
   18f80:	movhi	r0, r4
   18f84:	pophi	{r4, r5, r6, r7, fp, pc}
   18f88:	mov	r0, r4
   18f8c:	bl	1aacc <lchmod@@Base+0x4180>
   18f90:	mov	r5, r0
   18f94:	bl	11a6c <__errno_location@plt>
   18f98:	mov	r6, r0
   18f9c:	ldr	r7, [r0]
   18fa0:	mov	r0, r4
   18fa4:	bl	11be0 <close@plt>
   18fa8:	str	r7, [r6]
   18fac:	mov	r0, r5
   18fb0:	pop	{r4, r5, r6, r7, fp, pc}
   18fb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18fb8:	add	fp, sp, #24
   18fbc:	sub	sp, sp, #32
   18fc0:	mov	r4, r2
   18fc4:	mov	r8, r0
   18fc8:	ldr	r6, [fp, #12]
   18fcc:	ldr	r7, [fp, #8]
   18fd0:	cmp	r1, #0
   18fd4:	beq	18ffc <lchmod@@Base+0x26b0>
   18fd8:	mov	r5, r1
   18fdc:	str	r4, [sp]
   18fe0:	str	r3, [sp, #4]
   18fe4:	movw	r2, #47354	; 0xb8fa
   18fe8:	movt	r2, #1
   18fec:	mov	r0, r8
   18ff0:	mov	r1, #1
   18ff4:	mov	r3, r5
   18ff8:	b	19014 <lchmod@@Base+0x26c8>
   18ffc:	str	r3, [sp]
   19000:	movw	r2, #47366	; 0xb906
   19004:	movt	r2, #1
   19008:	mov	r0, r8
   1900c:	mov	r1, #1
   19010:	mov	r3, r4
   19014:	bl	11ac0 <__fprintf_chk@plt>
   19018:	movw	r1, #47373	; 0xb90d
   1901c:	movt	r1, #1
   19020:	mov	r0, #0
   19024:	mov	r2, #5
   19028:	bl	118c8 <dcgettext@plt>
   1902c:	mov	r3, r0
   19030:	movw	r0, #2022	; 0x7e6
   19034:	str	r0, [sp]
   19038:	movw	r2, #48091	; 0xbbdb
   1903c:	movt	r2, #1
   19040:	mov	r0, r8
   19044:	mov	r1, #1
   19048:	bl	11ac0 <__fprintf_chk@plt>
   1904c:	movw	r4, #46690	; 0xb662
   19050:	movt	r4, #1
   19054:	mov	r0, r4
   19058:	mov	r1, r8
   1905c:	bl	11808 <fputs_unlocked@plt>
   19060:	movw	r1, #47377	; 0xb911
   19064:	movt	r1, #1
   19068:	mov	r0, #0
   1906c:	mov	r2, #5
   19070:	bl	118c8 <dcgettext@plt>
   19074:	mov	r2, r0
   19078:	movw	r3, #47548	; 0xb9bc
   1907c:	movt	r3, #1
   19080:	mov	r0, r8
   19084:	mov	r1, #1
   19088:	bl	11ac0 <__fprintf_chk@plt>
   1908c:	mov	r0, r4
   19090:	mov	r1, r8
   19094:	bl	11808 <fputs_unlocked@plt>
   19098:	cmp	r6, #9
   1909c:	bhi	190d8 <lchmod@@Base+0x278c>
   190a0:	add	r0, pc, #0
   190a4:	ldr	pc, [r0, r6, lsl #2]
   190a8:	ldrdeq	r9, [r1], -r0
   190ac:	andeq	r9, r1, r4, ror #1
   190b0:	andeq	r9, r1, r4, lsl r1
   190b4:	andeq	r9, r1, ip, lsr r1
   190b8:	andeq	r9, r1, r4, ror #2
   190bc:	andeq	r9, r1, ip, lsl #3
   190c0:			; <UNDEFINED> instruction: 0x000191b4
   190c4:	andeq	r9, r1, ip, ror #3
   190c8:	andeq	r9, r1, ip, lsl #5
   190cc:	andeq	r9, r1, r4, lsr r2
   190d0:	sub	sp, fp, #24
   190d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   190d8:	movw	r1, #47901	; 0xbb1d
   190dc:	movt	r1, #1
   190e0:	b	1923c <lchmod@@Base+0x28f0>
   190e4:	movw	r1, #47582	; 0xb9de
   190e8:	movt	r1, #1
   190ec:	mov	r0, #0
   190f0:	mov	r2, #5
   190f4:	bl	118c8 <dcgettext@plt>
   190f8:	mov	r2, r0
   190fc:	ldr	r3, [r7]
   19100:	mov	r0, r8
   19104:	mov	r1, #1
   19108:	sub	sp, fp, #24
   1910c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19110:	b	11ac0 <__fprintf_chk@plt>
   19114:	movw	r1, #47598	; 0xb9ee
   19118:	movt	r1, #1
   1911c:	mov	r0, #0
   19120:	mov	r2, #5
   19124:	bl	118c8 <dcgettext@plt>
   19128:	mov	r2, r0
   1912c:	ldr	r3, [r7]
   19130:	ldr	r0, [r7, #4]
   19134:	str	r0, [sp]
   19138:	b	19228 <lchmod@@Base+0x28dc>
   1913c:	movw	r1, #47621	; 0xba05
   19140:	movt	r1, #1
   19144:	mov	r0, #0
   19148:	mov	r2, #5
   1914c:	bl	118c8 <dcgettext@plt>
   19150:	mov	r2, r0
   19154:	ldr	r3, [r7]
   19158:	ldmib	r7, {r0, r1}
   1915c:	stm	sp, {r0, r1}
   19160:	b	19228 <lchmod@@Base+0x28dc>
   19164:	movw	r1, #47649	; 0xba21
   19168:	movt	r1, #1
   1916c:	mov	r0, #0
   19170:	mov	r2, #5
   19174:	bl	118c8 <dcgettext@plt>
   19178:	mov	r2, r0
   1917c:	ldr	r3, [r7]
   19180:	ldmib	r7, {r0, r1, r7}
   19184:	stm	sp, {r0, r1, r7}
   19188:	b	19228 <lchmod@@Base+0x28dc>
   1918c:	movw	r1, #47681	; 0xba41
   19190:	movt	r1, #1
   19194:	mov	r0, #0
   19198:	mov	r2, #5
   1919c:	bl	118c8 <dcgettext@plt>
   191a0:	mov	r2, r0
   191a4:	ldr	r3, [r7]
   191a8:	ldmib	r7, {r0, r1, r6, r7}
   191ac:	stm	sp, {r0, r1, r6, r7}
   191b0:	b	19228 <lchmod@@Base+0x28dc>
   191b4:	movw	r1, #47717	; 0xba65
   191b8:	movt	r1, #1
   191bc:	mov	r0, #0
   191c0:	mov	r2, #5
   191c4:	bl	118c8 <dcgettext@plt>
   191c8:	mov	r2, r0
   191cc:	ldr	r3, [r7]
   191d0:	ldmib	r7, {r0, r1, r6}
   191d4:	ldr	r5, [r7, #16]
   191d8:	ldr	r7, [r7, #20]
   191dc:	stm	sp, {r0, r1, r6}
   191e0:	str	r5, [sp, #12]
   191e4:	str	r7, [sp, #16]
   191e8:	b	19228 <lchmod@@Base+0x28dc>
   191ec:	movw	r1, #47757	; 0xba8d
   191f0:	movt	r1, #1
   191f4:	mov	r0, #0
   191f8:	mov	r2, #5
   191fc:	bl	118c8 <dcgettext@plt>
   19200:	mov	r2, r0
   19204:	ldr	r3, [r7]
   19208:	ldmib	r7, {r0, r1, r6}
   1920c:	ldr	r5, [r7, #16]
   19210:	ldr	r4, [r7, #20]
   19214:	ldr	r7, [r7, #24]
   19218:	stm	sp, {r0, r1, r6}
   1921c:	str	r5, [sp, #12]
   19220:	str	r4, [sp, #16]
   19224:	str	r7, [sp, #20]
   19228:	mov	r0, r8
   1922c:	mov	r1, #1
   19230:	b	192dc <lchmod@@Base+0x2990>
   19234:	movw	r1, #47849	; 0xbae9
   19238:	movt	r1, #1
   1923c:	mov	r0, #0
   19240:	mov	r2, #5
   19244:	bl	118c8 <dcgettext@plt>
   19248:	mov	ip, r0
   1924c:	ldr	r3, [r7]
   19250:	ldr	r0, [r7, #4]
   19254:	ldr	r1, [r7, #8]
   19258:	ldr	r6, [r7, #12]
   1925c:	ldr	r5, [r7, #16]
   19260:	ldr	r4, [r7, #20]
   19264:	ldr	r2, [r7, #24]
   19268:	ldr	lr, [r7, #28]
   1926c:	ldr	r7, [r7, #32]
   19270:	stm	sp, {r0, r1, r6}
   19274:	str	r5, [sp, #12]
   19278:	str	r4, [sp, #16]
   1927c:	str	r2, [sp, #20]
   19280:	str	lr, [sp, #24]
   19284:	str	r7, [sp, #28]
   19288:	b	192d0 <lchmod@@Base+0x2984>
   1928c:	movw	r1, #47801	; 0xbab9
   19290:	movt	r1, #1
   19294:	mov	r0, #0
   19298:	mov	r2, #5
   1929c:	bl	118c8 <dcgettext@plt>
   192a0:	mov	ip, r0
   192a4:	ldr	r3, [r7]
   192a8:	ldmib	r7, {r0, r1, r6}
   192ac:	ldr	r5, [r7, #16]
   192b0:	ldr	r4, [r7, #20]
   192b4:	ldr	r2, [r7, #24]
   192b8:	ldr	r7, [r7, #28]
   192bc:	stm	sp, {r0, r1, r6}
   192c0:	str	r5, [sp, #12]
   192c4:	str	r4, [sp, #16]
   192c8:	str	r2, [sp, #20]
   192cc:	str	r7, [sp, #24]
   192d0:	mov	r0, r8
   192d4:	mov	r1, #1
   192d8:	mov	r2, ip
   192dc:	bl	11ac0 <__fprintf_chk@plt>
   192e0:	sub	sp, fp, #24
   192e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192e8:	push	{r4, sl, fp, lr}
   192ec:	add	fp, sp, #8
   192f0:	sub	sp, sp, #8
   192f4:	mov	lr, #0
   192f8:	ldr	ip, [fp, #8]
   192fc:	ldr	r4, [ip, lr, lsl #2]
   19300:	add	lr, lr, #1
   19304:	cmp	r4, #0
   19308:	bne	192fc <lchmod@@Base+0x29b0>
   1930c:	sub	r4, lr, #1
   19310:	str	ip, [sp]
   19314:	str	r4, [sp, #4]
   19318:	bl	18fb4 <lchmod@@Base+0x2668>
   1931c:	sub	sp, fp, #8
   19320:	pop	{r4, sl, fp, pc}
   19324:	push	{r4, r5, fp, lr}
   19328:	add	fp, sp, #8
   1932c:	sub	sp, sp, #48	; 0x30
   19330:	mov	ip, #0
   19334:	ldr	r4, [fp, #8]
   19338:	add	lr, sp, #8
   1933c:	ldr	r5, [r4]
   19340:	str	r5, [lr, ip, lsl #2]
   19344:	cmp	r5, #0
   19348:	beq	1935c <lchmod@@Base+0x2a10>
   1934c:	add	ip, ip, #1
   19350:	add	r4, r4, #4
   19354:	cmp	ip, #10
   19358:	bcc	1933c <lchmod@@Base+0x29f0>
   1935c:	str	lr, [sp]
   19360:	str	ip, [sp, #4]
   19364:	bl	18fb4 <lchmod@@Base+0x2668>
   19368:	sub	sp, fp, #8
   1936c:	pop	{r4, r5, fp, pc}
   19370:	push	{fp, lr}
   19374:	mov	fp, sp
   19378:	sub	sp, sp, #8
   1937c:	add	ip, fp, #8
   19380:	str	ip, [sp, #4]
   19384:	str	ip, [sp]
   19388:	bl	19324 <lchmod@@Base+0x29d8>
   1938c:	mov	sp, fp
   19390:	pop	{fp, pc}
   19394:	push	{fp, lr}
   19398:	mov	fp, sp
   1939c:	movw	r0, #49644	; 0xc1ec
   193a0:	movt	r0, #2
   193a4:	ldr	r1, [r0]
   193a8:	movw	r0, #46690	; 0xb662
   193ac:	movt	r0, #1
   193b0:	bl	11808 <fputs_unlocked@plt>
   193b4:	movw	r1, #47961	; 0xbb59
   193b8:	movt	r1, #1
   193bc:	mov	r0, #0
   193c0:	mov	r2, #5
   193c4:	bl	118c8 <dcgettext@plt>
   193c8:	mov	r1, r0
   193cc:	movw	r2, #47981	; 0xbb6d
   193d0:	movt	r2, #1
   193d4:	mov	r0, #1
   193d8:	bl	11a9c <__printf_chk@plt>
   193dc:	movw	r1, #48003	; 0xbb83
   193e0:	movt	r1, #1
   193e4:	mov	r0, #0
   193e8:	mov	r2, #5
   193ec:	bl	118c8 <dcgettext@plt>
   193f0:	mov	r1, r0
   193f4:	movw	r2, #45872	; 0xb330
   193f8:	movt	r2, #1
   193fc:	movw	r3, #46499	; 0xb5a3
   19400:	movt	r3, #1
   19404:	mov	r0, #1
   19408:	bl	11a9c <__printf_chk@plt>
   1940c:	movw	r1, #48023	; 0xbb97
   19410:	movt	r1, #1
   19414:	mov	r0, #0
   19418:	mov	r2, #5
   1941c:	bl	118c8 <dcgettext@plt>
   19420:	mov	r1, r0
   19424:	movw	r2, #48062	; 0xbbbe
   19428:	movt	r2, #1
   1942c:	mov	r0, #1
   19430:	pop	{fp, lr}
   19434:	b	11a9c <__printf_chk@plt>
   19438:	b	1943c <lchmod@@Base+0x2af0>
   1943c:	push	{r4, r5, r6, sl, fp, lr}
   19440:	add	fp, sp, #16
   19444:	mov	r4, r2
   19448:	mov	r5, r1
   1944c:	mov	r6, r0
   19450:	bl	1aa90 <lchmod@@Base+0x4144>
   19454:	cmp	r0, #0
   19458:	popne	{r4, r5, r6, sl, fp, pc}
   1945c:	cmp	r6, #0
   19460:	beq	19474 <lchmod@@Base+0x2b28>
   19464:	cmp	r5, #0
   19468:	cmpne	r4, #0
   1946c:	bne	19474 <lchmod@@Base+0x2b28>
   19470:	pop	{r4, r5, r6, sl, fp, pc}
   19474:	bl	19828 <lchmod@@Base+0x2edc>
   19478:	push	{fp, lr}
   1947c:	mov	fp, sp
   19480:	bl	19e70 <lchmod@@Base+0x3524>
   19484:	bl	1948c <lchmod@@Base+0x2b40>
   19488:	pop	{fp, pc}
   1948c:	cmp	r0, #0
   19490:	bxne	lr
   19494:	push	{fp, lr}
   19498:	mov	fp, sp
   1949c:	bl	19828 <lchmod@@Base+0x2edc>
   194a0:	push	{fp, lr}
   194a4:	mov	fp, sp
   194a8:	bl	1a9c4 <lchmod@@Base+0x4078>
   194ac:	bl	1948c <lchmod@@Base+0x2b40>
   194b0:	pop	{fp, pc}
   194b4:	b	19478 <lchmod@@Base+0x2b2c>
   194b8:	push	{r4, r5, fp, lr}
   194bc:	add	fp, sp, #8
   194c0:	mov	r4, r1
   194c4:	mov	r5, r0
   194c8:	bl	19ea0 <lchmod@@Base+0x3554>
   194cc:	cmp	r0, #0
   194d0:	popne	{r4, r5, fp, pc}
   194d4:	cmp	r5, #0
   194d8:	beq	194e8 <lchmod@@Base+0x2b9c>
   194dc:	cmp	r4, #0
   194e0:	bne	194e8 <lchmod@@Base+0x2b9c>
   194e4:	pop	{r4, r5, fp, pc}
   194e8:	bl	19828 <lchmod@@Base+0x2edc>
   194ec:	push	{fp, lr}
   194f0:	mov	fp, sp
   194f4:	bl	1a9c8 <lchmod@@Base+0x407c>
   194f8:	bl	1948c <lchmod@@Base+0x2b40>
   194fc:	pop	{fp, pc}
   19500:	push	{fp, lr}
   19504:	mov	fp, sp
   19508:	bl	1a9d8 <lchmod@@Base+0x408c>
   1950c:	bl	1948c <lchmod@@Base+0x2b40>
   19510:	pop	{fp, pc}
   19514:	push	{fp, lr}
   19518:	mov	fp, sp
   1951c:	mov	r2, r1
   19520:	mov	r1, r0
   19524:	mov	r0, #0
   19528:	bl	1943c <lchmod@@Base+0x2af0>
   1952c:	pop	{fp, pc}
   19530:	mov	r2, r1
   19534:	mov	r1, r0
   19538:	mov	r0, #0
   1953c:	b	19500 <lchmod@@Base+0x2bb4>
   19540:	mov	r2, #1
   19544:	b	19548 <lchmod@@Base+0x2bfc>
   19548:	push	{r4, r5, fp, lr}
   1954c:	add	fp, sp, #8
   19550:	mov	r4, r1
   19554:	ldr	r5, [r1]
   19558:	cmp	r0, #0
   1955c:	beq	19574 <lchmod@@Base+0x2c28>
   19560:	mov	r1, #1
   19564:	add	r1, r1, r5, lsr #1
   19568:	adds	r5, r5, r1
   1956c:	bcc	1958c <lchmod@@Base+0x2c40>
   19570:	bl	19828 <lchmod@@Base+0x2edc>
   19574:	cmp	r5, #0
   19578:	bne	1958c <lchmod@@Base+0x2c40>
   1957c:	mov	r1, #64	; 0x40
   19580:	udiv	r5, r1, r2
   19584:	cmp	r2, #64	; 0x40
   19588:	addhi	r5, r5, #1
   1958c:	mov	r1, r5
   19590:	bl	1943c <lchmod@@Base+0x2af0>
   19594:	str	r5, [r4]
   19598:	pop	{r4, r5, fp, pc}
   1959c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   195a0:	add	fp, sp, #24
   195a4:	mov	r8, r1
   195a8:	ldr	r6, [r1]
   195ac:	add	r1, r6, r6, asr #1
   195b0:	cmp	r1, r6
   195b4:	mvnvs	r1, #-2147483648	; 0x80000000
   195b8:	cmp	r1, r3
   195bc:	mov	r5, r1
   195c0:	movgt	r5, r3
   195c4:	cmn	r3, #1
   195c8:	movle	r5, r1
   195cc:	ldr	r4, [fp, #8]
   195d0:	cmn	r4, #1
   195d4:	ble	195fc <lchmod@@Base+0x2cb0>
   195d8:	cmp	r4, #0
   195dc:	beq	19650 <lchmod@@Base+0x2d04>
   195e0:	cmn	r5, #1
   195e4:	ble	19624 <lchmod@@Base+0x2cd8>
   195e8:	mvn	r7, #-2147483648	; 0x80000000
   195ec:	udiv	r1, r7, r4
   195f0:	cmp	r1, r5
   195f4:	bge	19650 <lchmod@@Base+0x2d04>
   195f8:	b	19660 <lchmod@@Base+0x2d14>
   195fc:	cmn	r5, #1
   19600:	ble	19640 <lchmod@@Base+0x2cf4>
   19604:	cmn	r4, #1
   19608:	beq	19650 <lchmod@@Base+0x2d04>
   1960c:	mov	r1, #-2147483648	; 0x80000000
   19610:	sdiv	r1, r1, r4
   19614:	mvn	r7, #-2147483648	; 0x80000000
   19618:	cmp	r1, r5
   1961c:	bge	19650 <lchmod@@Base+0x2d04>
   19620:	b	19660 <lchmod@@Base+0x2d14>
   19624:	beq	19650 <lchmod@@Base+0x2d04>
   19628:	mov	r1, #-2147483648	; 0x80000000
   1962c:	sdiv	r1, r1, r5
   19630:	mvn	r7, #-2147483648	; 0x80000000
   19634:	cmp	r1, r4
   19638:	bge	19650 <lchmod@@Base+0x2d04>
   1963c:	b	19660 <lchmod@@Base+0x2d14>
   19640:	mvn	r7, #-2147483648	; 0x80000000
   19644:	sdiv	r1, r7, r4
   19648:	cmp	r5, r1
   1964c:	blt	19660 <lchmod@@Base+0x2d14>
   19650:	mul	r1, r5, r4
   19654:	mov	r7, #64	; 0x40
   19658:	cmp	r1, #63	; 0x3f
   1965c:	bgt	19668 <lchmod@@Base+0x2d1c>
   19660:	sdiv	r5, r7, r4
   19664:	mul	r1, r5, r4
   19668:	cmp	r0, #0
   1966c:	moveq	r7, #0
   19670:	streq	r7, [r8]
   19674:	sub	r7, r5, r6
   19678:	cmp	r7, r2
   1967c:	bge	19728 <lchmod@@Base+0x2ddc>
   19680:	add	r5, r6, r2
   19684:	mov	r1, #0
   19688:	cmp	r5, r3
   1968c:	mov	r2, #0
   19690:	movwgt	r2, #1
   19694:	cmn	r3, #1
   19698:	movwgt	r1, #1
   1969c:	cmp	r5, r6
   196a0:	bvs	19710 <lchmod@@Base+0x2dc4>
   196a4:	ands	r1, r1, r2
   196a8:	bne	19710 <lchmod@@Base+0x2dc4>
   196ac:	cmn	r4, #1
   196b0:	ble	196d8 <lchmod@@Base+0x2d8c>
   196b4:	cmp	r4, #0
   196b8:	beq	19724 <lchmod@@Base+0x2dd8>
   196bc:	cmn	r5, #1
   196c0:	ble	196fc <lchmod@@Base+0x2db0>
   196c4:	mvn	r1, #-2147483648	; 0x80000000
   196c8:	udiv	r1, r1, r4
   196cc:	cmp	r1, r5
   196d0:	bge	19724 <lchmod@@Base+0x2dd8>
   196d4:	b	19710 <lchmod@@Base+0x2dc4>
   196d8:	cmn	r5, #1
   196dc:	ble	19714 <lchmod@@Base+0x2dc8>
   196e0:	cmn	r4, #1
   196e4:	beq	19724 <lchmod@@Base+0x2dd8>
   196e8:	mov	r1, #-2147483648	; 0x80000000
   196ec:	sdiv	r1, r1, r4
   196f0:	cmp	r1, r5
   196f4:	bge	19724 <lchmod@@Base+0x2dd8>
   196f8:	b	19710 <lchmod@@Base+0x2dc4>
   196fc:	beq	19724 <lchmod@@Base+0x2dd8>
   19700:	mov	r1, #-2147483648	; 0x80000000
   19704:	sdiv	r1, r1, r5
   19708:	cmp	r1, r4
   1970c:	bge	19724 <lchmod@@Base+0x2dd8>
   19710:	bl	19828 <lchmod@@Base+0x2edc>
   19714:	mvn	r1, #-2147483648	; 0x80000000
   19718:	sdiv	r1, r1, r4
   1971c:	cmp	r5, r1
   19720:	blt	19710 <lchmod@@Base+0x2dc4>
   19724:	mul	r1, r5, r4
   19728:	bl	194b8 <lchmod@@Base+0x2b6c>
   1972c:	str	r5, [r8]
   19730:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19734:	mov	r1, #1
   19738:	b	1973c <lchmod@@Base+0x2df0>
   1973c:	push	{fp, lr}
   19740:	mov	fp, sp
   19744:	bl	19e1c <lchmod@@Base+0x34d0>
   19748:	bl	1948c <lchmod@@Base+0x2b40>
   1974c:	pop	{fp, pc}
   19750:	mov	r1, #1
   19754:	b	19758 <lchmod@@Base+0x2e0c>
   19758:	push	{fp, lr}
   1975c:	mov	fp, sp
   19760:	bl	1a9d4 <lchmod@@Base+0x4088>
   19764:	bl	1948c <lchmod@@Base+0x2b40>
   19768:	pop	{fp, pc}
   1976c:	push	{r4, r5, r6, sl, fp, lr}
   19770:	add	fp, sp, #16
   19774:	mov	r4, r1
   19778:	mov	r5, r0
   1977c:	mov	r0, r1
   19780:	bl	19478 <lchmod@@Base+0x2b2c>
   19784:	mov	r6, r0
   19788:	mov	r1, r5
   1978c:	mov	r2, r4
   19790:	bl	11898 <memcpy@plt>
   19794:	mov	r0, r6
   19798:	pop	{r4, r5, r6, sl, fp, pc}
   1979c:	push	{r4, r5, r6, sl, fp, lr}
   197a0:	add	fp, sp, #16
   197a4:	mov	r4, r1
   197a8:	mov	r5, r0
   197ac:	mov	r0, r1
   197b0:	bl	194a0 <lchmod@@Base+0x2b54>
   197b4:	mov	r6, r0
   197b8:	mov	r1, r5
   197bc:	mov	r2, r4
   197c0:	bl	11898 <memcpy@plt>
   197c4:	mov	r0, r6
   197c8:	pop	{r4, r5, r6, sl, fp, pc}
   197cc:	push	{r4, r5, r6, sl, fp, lr}
   197d0:	add	fp, sp, #16
   197d4:	mov	r4, r1
   197d8:	mov	r5, r0
   197dc:	add	r0, r1, #1
   197e0:	bl	194a0 <lchmod@@Base+0x2b54>
   197e4:	mov	r6, r0
   197e8:	mov	r0, #0
   197ec:	strb	r0, [r6, r4]
   197f0:	mov	r0, r6
   197f4:	mov	r1, r5
   197f8:	mov	r2, r4
   197fc:	bl	11898 <memcpy@plt>
   19800:	mov	r0, r6
   19804:	pop	{r4, r5, r6, sl, fp, pc}
   19808:	push	{r4, sl, fp, lr}
   1980c:	add	fp, sp, #8
   19810:	mov	r4, r0
   19814:	bl	11a30 <strlen@plt>
   19818:	add	r1, r0, #1
   1981c:	mov	r0, r4
   19820:	pop	{r4, sl, fp, lr}
   19824:	b	1976c <lchmod@@Base+0x2e20>
   19828:	push	{fp, lr}
   1982c:	mov	fp, sp
   19830:	movw	r0, #49556	; 0xc194
   19834:	movt	r0, #2
   19838:	ldr	r4, [r0]
   1983c:	movw	r1, #48138	; 0xbc0a
   19840:	movt	r1, #1
   19844:	mov	r0, #0
   19848:	mov	r2, #5
   1984c:	bl	118c8 <dcgettext@plt>
   19850:	mov	r3, r0
   19854:	movw	r2, #46879	; 0xb71f
   19858:	movt	r2, #1
   1985c:	mov	r0, r4
   19860:	mov	r1, #0
   19864:	bl	11994 <error@plt>
   19868:	bl	11bd4 <abort@plt>
   1986c:	push	{fp, lr}
   19870:	mov	fp, sp
   19874:	orr	r1, r1, #512	; 0x200
   19878:	bl	137e8 <__assert_fail@plt+0x1bb4>
   1987c:	cmp	r0, #0
   19880:	popne	{fp, pc}
   19884:	bl	11a6c <__errno_location@plt>
   19888:	ldr	r0, [r0]
   1988c:	cmp	r0, #22
   19890:	bne	198b4 <lchmod@@Base+0x2f68>
   19894:	movw	r0, #48155	; 0xbc1b
   19898:	movt	r0, #1
   1989c:	movw	r1, #48171	; 0xbc2b
   198a0:	movt	r1, #1
   198a4:	movw	r3, #48182	; 0xbc36
   198a8:	movt	r3, #1
   198ac:	mov	r2, #41	; 0x29
   198b0:	bl	11c34 <__assert_fail@plt>
   198b4:	bl	19828 <lchmod@@Base+0x2edc>
   198b8:	ldr	r0, [r0, #48]	; 0x30
   198bc:	and	r2, r0, #17
   198c0:	mov	r0, #1
   198c4:	cmp	r2, #16
   198c8:	beq	198e4 <lchmod@@Base+0x2f98>
   198cc:	mov	r0, #0
   198d0:	cmp	r2, #17
   198d4:	bxne	lr
   198d8:	ldr	r0, [r1, #48]	; 0x30
   198dc:	cmp	r0, #0
   198e0:	movwne	r0, #1
   198e4:	bx	lr
   198e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198ec:	add	fp, sp, #28
   198f0:	sub	sp, sp, #20
   198f4:	cmp	r2, #37	; 0x25
   198f8:	bcs	19d28 <lchmod@@Base+0x33dc>
   198fc:	mov	r5, r2
   19900:	mov	r6, r1
   19904:	mov	r4, r0
   19908:	str	r3, [sp, #4]
   1990c:	ldr	sl, [fp, #8]
   19910:	bl	11a6c <__errno_location@plt>
   19914:	mov	r7, r0
   19918:	mov	r0, #0
   1991c:	str	r0, [r7]
   19920:	bl	11a00 <__ctype_b_loc@plt>
   19924:	ldr	r1, [r0]
   19928:	mov	r2, r4
   1992c:	ldrb	r0, [r2], #1
   19930:	add	r3, r1, r0, lsl #1
   19934:	ldrb	r3, [r3, #1]
   19938:	tst	r3, #32
   1993c:	bne	1992c <lchmod@@Base+0x2fe0>
   19940:	add	r9, sp, #16
   19944:	cmp	r6, #0
   19948:	movne	r9, r6
   1994c:	mov	r8, #4
   19950:	cmp	r0, #45	; 0x2d
   19954:	beq	19d1c <lchmod@@Base+0x33d0>
   19958:	mov	r0, r4
   1995c:	mov	r1, r9
   19960:	mov	r2, r5
   19964:	bl	11ab4 <strtoumax@plt>
   19968:	str	r1, [sp, #12]
   1996c:	str	r0, [sp, #8]
   19970:	ldr	r6, [r9]
   19974:	cmp	r6, r4
   19978:	beq	199a0 <lchmod@@Base+0x3054>
   1997c:	ldr	r0, [r7]
   19980:	cmp	r0, #0
   19984:	beq	199d4 <lchmod@@Base+0x3088>
   19988:	cmp	r0, #34	; 0x22
   1998c:	bne	19d1c <lchmod@@Base+0x33d0>
   19990:	mov	r8, #1
   19994:	cmp	sl, #0
   19998:	bne	199e0 <lchmod@@Base+0x3094>
   1999c:	b	19d0c <lchmod@@Base+0x33c0>
   199a0:	cmp	sl, #0
   199a4:	ldrbne	r1, [r6]
   199a8:	cmpne	r1, #0
   199ac:	beq	19d1c <lchmod@@Base+0x33d0>
   199b0:	mov	r0, sl
   199b4:	bl	11a48 <strchr@plt>
   199b8:	cmp	r0, #0
   199bc:	beq	19d1c <lchmod@@Base+0x33d0>
   199c0:	mov	r8, #0
   199c4:	str	r8, [sp, #12]
   199c8:	mov	r0, #1
   199cc:	str	r0, [sp, #8]
   199d0:	b	199e0 <lchmod@@Base+0x3094>
   199d4:	mov	r8, r0
   199d8:	cmp	sl, #0
   199dc:	beq	19d0c <lchmod@@Base+0x33c0>
   199e0:	ldrb	r4, [r6]
   199e4:	cmp	r4, #0
   199e8:	beq	19d0c <lchmod@@Base+0x33c0>
   199ec:	mov	r0, sl
   199f0:	mov	r1, r4
   199f4:	bl	11a48 <strchr@plt>
   199f8:	cmp	r0, #0
   199fc:	beq	19c0c <lchmod@@Base+0x32c0>
   19a00:	sub	r0, r4, #69	; 0x45
   19a04:	mov	r7, #1
   19a08:	mov	r5, #1024	; 0x400
   19a0c:	cmp	r0, #47	; 0x2f
   19a10:	bhi	19b08 <lchmod@@Base+0x31bc>
   19a14:	add	r1, pc, #0
   19a18:	ldr	pc, [r1, r0, lsl #2]
   19a1c:	ldrdeq	r9, [r1], -ip
   19a20:	andeq	r9, r1, r8, lsl #22
   19a24:	ldrdeq	r9, [r1], -ip
   19a28:	andeq	r9, r1, r8, lsl #22
   19a2c:	andeq	r9, r1, r8, lsl #22
   19a30:	andeq	r9, r1, r8, lsl #22
   19a34:	ldrdeq	r9, [r1], -ip
   19a38:	andeq	r9, r1, r8, lsl #22
   19a3c:	ldrdeq	r9, [r1], -ip
   19a40:	andeq	r9, r1, r8, lsl #22
   19a44:	andeq	r9, r1, r8, lsl #22
   19a48:	ldrdeq	r9, [r1], -ip
   19a4c:	andeq	r9, r1, r8, lsl #22
   19a50:	andeq	r9, r1, r8, lsl #22
   19a54:	andeq	r9, r1, r8, lsl #22
   19a58:	ldrdeq	r9, [r1], -ip
   19a5c:	andeq	r9, r1, r8, lsl #22
   19a60:	andeq	r9, r1, r8, lsl #22
   19a64:	andeq	r9, r1, r8, lsl #22
   19a68:	andeq	r9, r1, r8, lsl #22
   19a6c:	ldrdeq	r9, [r1], -ip
   19a70:	ldrdeq	r9, [r1], -ip
   19a74:	andeq	r9, r1, r8, lsl #22
   19a78:	andeq	r9, r1, r8, lsl #22
   19a7c:	andeq	r9, r1, r8, lsl #22
   19a80:	andeq	r9, r1, r8, lsl #22
   19a84:	andeq	r9, r1, r8, lsl #22
   19a88:	andeq	r9, r1, r8, lsl #22
   19a8c:	andeq	r9, r1, r8, lsl #22
   19a90:	andeq	r9, r1, r8, lsl #22
   19a94:	andeq	r9, r1, r8, lsl #22
   19a98:	andeq	r9, r1, r8, lsl #22
   19a9c:	andeq	r9, r1, r8, lsl #22
   19aa0:	andeq	r9, r1, r8, lsl #22
   19aa4:	ldrdeq	r9, [r1], -ip
   19aa8:	andeq	r9, r1, r8, lsl #22
   19aac:	andeq	r9, r1, r8, lsl #22
   19ab0:	andeq	r9, r1, r8, lsl #22
   19ab4:	ldrdeq	r9, [r1], -ip
   19ab8:	andeq	r9, r1, r8, lsl #22
   19abc:	ldrdeq	r9, [r1], -ip
   19ac0:	andeq	r9, r1, r8, lsl #22
   19ac4:	andeq	r9, r1, r8, lsl #22
   19ac8:	andeq	r9, r1, r8, lsl #22
   19acc:	andeq	r9, r1, r8, lsl #22
   19ad0:	andeq	r9, r1, r8, lsl #22
   19ad4:	andeq	r9, r1, r8, lsl #22
   19ad8:	ldrdeq	r9, [r1], -ip
   19adc:	mov	r0, sl
   19ae0:	mov	r1, #48	; 0x30
   19ae4:	bl	11a48 <strchr@plt>
   19ae8:	cmp	r0, #0
   19aec:	beq	19b08 <lchmod@@Base+0x31bc>
   19af0:	ldrb	r0, [r6, #1]
   19af4:	cmp	r0, #66	; 0x42
   19af8:	cmpne	r0, #68	; 0x44
   19afc:	bne	19c24 <lchmod@@Base+0x32d8>
   19b00:	mov	r7, #2
   19b04:	mov	r5, #1000	; 0x3e8
   19b08:	sub	r1, r4, #66	; 0x42
   19b0c:	cmp	r1, #53	; 0x35
   19b10:	bhi	19c0c <lchmod@@Base+0x32c0>
   19b14:	mov	r0, #0
   19b18:	add	r2, pc, #0
   19b1c:	ldr	pc, [r2, r1, lsl #2]
   19b20:	muleq	r1, r0, ip
   19b24:	andeq	r9, r1, ip, lsl #24
   19b28:	andeq	r9, r1, ip, lsl #24
   19b2c:	muleq	r1, ip, ip
   19b30:	andeq	r9, r1, ip, lsl #24
   19b34:	strdeq	r9, [r1], -r8
   19b38:	andeq	r9, r1, ip, lsl #24
   19b3c:	andeq	r9, r1, ip, lsl #24
   19b40:	andeq	r9, r1, ip, lsl #24
   19b44:	andeq	r9, r1, r0, asr #24
   19b48:	andeq	r9, r1, ip, lsl #24
   19b4c:	andeq	r9, r1, r4, asr ip
   19b50:	andeq	r9, r1, ip, lsl #24
   19b54:	andeq	r9, r1, ip, lsl #24
   19b58:			; <UNDEFINED> instruction: 0x00019cb0
   19b5c:	andeq	r9, r1, ip, lsl #24
   19b60:	andeq	r9, r1, ip, lsl #24
   19b64:	andeq	r9, r1, ip, lsl #24
   19b68:	andeq	r9, r1, r8, ror #24
   19b6c:	andeq	r9, r1, ip, lsl #24
   19b70:	andeq	r9, r1, ip, lsl #24
   19b74:	andeq	r9, r1, ip, lsl #24
   19b78:	andeq	r9, r1, ip, lsl #24
   19b7c:	andeq	r9, r1, r4, asr #25
   19b80:	andeq	r9, r1, ip, ror ip
   19b84:	andeq	r9, r1, ip, lsl #24
   19b88:	andeq	r9, r1, ip, lsl #24
   19b8c:	andeq	r9, r1, ip, lsl #24
   19b90:	andeq	r9, r1, ip, lsl #24
   19b94:	andeq	r9, r1, ip, lsl #24
   19b98:	andeq	r9, r1, ip, lsl #24
   19b9c:	andeq	r9, r1, ip, lsl #24
   19ba0:	ldrdeq	r9, [r1], -r8
   19ba4:	strdeq	r9, [r1], -r0
   19ba8:	andeq	r9, r1, ip, lsl #24
   19bac:	andeq	r9, r1, ip, lsl #24
   19bb0:	andeq	r9, r1, ip, lsl #24
   19bb4:	strdeq	r9, [r1], -r8
   19bb8:	andeq	r9, r1, ip, lsl #24
   19bbc:	andeq	r9, r1, ip, lsl #24
   19bc0:	andeq	r9, r1, ip, lsl #24
   19bc4:	andeq	r9, r1, r0, asr #24
   19bc8:	andeq	r9, r1, ip, lsl #24
   19bcc:	andeq	r9, r1, r4, asr ip
   19bd0:	andeq	r9, r1, ip, lsl #24
   19bd4:	andeq	r9, r1, ip, lsl #24
   19bd8:	andeq	r9, r1, ip, lsl #24
   19bdc:	andeq	r9, r1, ip, lsl #24
   19be0:	andeq	r9, r1, ip, lsl #24
   19be4:	andeq	r9, r1, ip, lsl #24
   19be8:	andeq	r9, r1, r8, ror #24
   19bec:	andeq	r9, r1, ip, lsl #24
   19bf0:	andeq	r9, r1, ip, lsl #24
   19bf4:	andeq	r9, r1, r4, ror #25
   19bf8:	add	r0, sp, #8
   19bfc:	mov	r1, r5
   19c00:	mov	r2, #3
   19c04:	bl	19dd4 <lchmod@@Base+0x3488>
   19c08:	b	19cf0 <lchmod@@Base+0x33a4>
   19c0c:	ldr	r0, [sp, #8]
   19c10:	ldr	r1, [sp, #12]
   19c14:	ldr	r2, [sp, #4]
   19c18:	strd	r0, [r2]
   19c1c:	orr	r8, r8, #2
   19c20:	b	19d1c <lchmod@@Base+0x33d0>
   19c24:	cmp	r0, #105	; 0x69
   19c28:	bne	19b08 <lchmod@@Base+0x31bc>
   19c2c:	ldrb	r0, [r6, #2]
   19c30:	mov	r7, #1
   19c34:	cmp	r0, #66	; 0x42
   19c38:	movweq	r7, #3
   19c3c:	b	19b08 <lchmod@@Base+0x31bc>
   19c40:	add	r0, sp, #8
   19c44:	mov	r1, r5
   19c48:	mov	r2, #1
   19c4c:	bl	19dd4 <lchmod@@Base+0x3488>
   19c50:	b	19cf0 <lchmod@@Base+0x33a4>
   19c54:	add	r0, sp, #8
   19c58:	mov	r1, r5
   19c5c:	mov	r2, #2
   19c60:	bl	19dd4 <lchmod@@Base+0x3488>
   19c64:	b	19cf0 <lchmod@@Base+0x33a4>
   19c68:	add	r0, sp, #8
   19c6c:	mov	r1, r5
   19c70:	mov	r2, #4
   19c74:	bl	19dd4 <lchmod@@Base+0x3488>
   19c78:	b	19cf0 <lchmod@@Base+0x33a4>
   19c7c:	add	r0, sp, #8
   19c80:	mov	r1, r5
   19c84:	mov	r2, #7
   19c88:	bl	19dd4 <lchmod@@Base+0x3488>
   19c8c:	b	19cf0 <lchmod@@Base+0x33a4>
   19c90:	add	r0, sp, #8
   19c94:	mov	r1, #1024	; 0x400
   19c98:	b	19cec <lchmod@@Base+0x33a0>
   19c9c:	add	r0, sp, #8
   19ca0:	mov	r1, r5
   19ca4:	mov	r2, #6
   19ca8:	bl	19dd4 <lchmod@@Base+0x3488>
   19cac:	b	19cf0 <lchmod@@Base+0x33a4>
   19cb0:	add	r0, sp, #8
   19cb4:	mov	r1, r5
   19cb8:	mov	r2, #5
   19cbc:	bl	19dd4 <lchmod@@Base+0x3488>
   19cc0:	b	19cf0 <lchmod@@Base+0x33a4>
   19cc4:	add	r0, sp, #8
   19cc8:	mov	r1, r5
   19ccc:	mov	r2, #8
   19cd0:	bl	19dd4 <lchmod@@Base+0x3488>
   19cd4:	b	19cf0 <lchmod@@Base+0x33a4>
   19cd8:	add	r0, sp, #8
   19cdc:	mov	r1, #512	; 0x200
   19ce0:	b	19cec <lchmod@@Base+0x33a0>
   19ce4:	add	r0, sp, #8
   19ce8:	mov	r1, #2
   19cec:	bl	19d48 <lchmod@@Base+0x33fc>
   19cf0:	ldr	r1, [r9]
   19cf4:	add	r2, r1, r7
   19cf8:	str	r2, [r9]
   19cfc:	ldrb	r1, [r1, r7]
   19d00:	orr	r8, r0, r8
   19d04:	cmp	r1, #0
   19d08:	orrne	r8, r8, #2
   19d0c:	ldr	r0, [sp, #8]
   19d10:	ldr	r1, [sp, #12]
   19d14:	ldr	r2, [sp, #4]
   19d18:	strd	r0, [r2]
   19d1c:	mov	r0, r8
   19d20:	sub	sp, fp, #28
   19d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d28:	movw	r0, #48260	; 0xbc84
   19d2c:	movt	r0, #1
   19d30:	movw	r1, #48298	; 0xbcaa
   19d34:	movt	r1, #1
   19d38:	movw	r3, #48314	; 0xbcba
   19d3c:	movt	r3, #1
   19d40:	mov	r2, #85	; 0x55
   19d44:	bl	11c34 <__assert_fail@plt>
   19d48:	push	{r4, r5, r6, r7, fp, lr}
   19d4c:	add	fp, sp, #16
   19d50:	mov	r5, r1
   19d54:	mov	r4, r0
   19d58:	cmn	r1, #1
   19d5c:	ble	19d94 <lchmod@@Base+0x3448>
   19d60:	cmp	r5, #0
   19d64:	beq	19db4 <lchmod@@Base+0x3468>
   19d68:	asr	r3, r5, #31
   19d6c:	mvn	r6, #0
   19d70:	mvn	r0, #0
   19d74:	mvn	r1, #0
   19d78:	mov	r2, r5
   19d7c:	bl	1abe4 <lchmod@@Base+0x4298>
   19d80:	ldrd	r2, [r4]
   19d84:	subs	r0, r0, r2
   19d88:	sbcs	r0, r1, r3
   19d8c:	bcc	19da4 <lchmod@@Base+0x3458>
   19d90:	b	19db4 <lchmod@@Base+0x3468>
   19d94:	ldrd	r0, [r4]
   19d98:	orrs	r0, r0, r1
   19d9c:	beq	19db4 <lchmod@@Base+0x3468>
   19da0:	mvn	r6, #0
   19da4:	mov	r0, #1
   19da8:	mvn	r7, #0
   19dac:	strd	r6, [r4]
   19db0:	pop	{r4, r5, r6, r7, fp, pc}
   19db4:	ldrd	r0, [r4]
   19db8:	umull	r6, r2, r0, r5
   19dbc:	asr	r3, r5, #31
   19dc0:	mla	r0, r0, r3, r2
   19dc4:	mla	r7, r1, r5, r0
   19dc8:	mov	r0, #0
   19dcc:	strd	r6, [r4]
   19dd0:	pop	{r4, r5, r6, r7, fp, pc}
   19dd4:	push	{r4, r5, r6, r7, fp, lr}
   19dd8:	add	fp, sp, #16
   19ddc:	cmp	r2, #0
   19de0:	moveq	r6, #0
   19de4:	moveq	r0, r6
   19de8:	popeq	{r4, r5, r6, r7, fp, pc}
   19dec:	mov	r4, r2
   19df0:	mov	r5, r1
   19df4:	mov	r7, r0
   19df8:	mov	r6, #0
   19dfc:	mov	r0, r7
   19e00:	mov	r1, r5
   19e04:	bl	19d48 <lchmod@@Base+0x33fc>
   19e08:	orr	r6, r0, r6
   19e0c:	subs	r4, r4, #1
   19e10:	bne	19dfc <lchmod@@Base+0x34b0>
   19e14:	mov	r0, r6
   19e18:	pop	{r4, r5, r6, r7, fp, pc}
   19e1c:	clz	r2, r1
   19e20:	lsr	r2, r2, #5
   19e24:	clz	r3, r0
   19e28:	lsr	r3, r3, #5
   19e2c:	orrs	r2, r3, r2
   19e30:	movwne	r1, #1
   19e34:	movwne	r0, #1
   19e38:	cmp	r1, #0
   19e3c:	beq	19e6c <lchmod@@Base+0x3520>
   19e40:	mvn	r2, #-2147483648	; 0x80000000
   19e44:	udiv	r2, r2, r1
   19e48:	cmp	r2, r0
   19e4c:	bcs	19e6c <lchmod@@Base+0x3520>
   19e50:	push	{fp, lr}
   19e54:	mov	fp, sp
   19e58:	bl	11a6c <__errno_location@plt>
   19e5c:	mov	r1, #12
   19e60:	str	r1, [r0]
   19e64:	mov	r0, #0
   19e68:	pop	{fp, pc}
   19e6c:	b	117fc <calloc@plt>
   19e70:	cmp	r0, #0
   19e74:	movweq	r0, #1
   19e78:	cmn	r0, #1
   19e7c:	ble	19e84 <lchmod@@Base+0x3538>
   19e80:	b	119b8 <malloc@plt>
   19e84:	push	{fp, lr}
   19e88:	mov	fp, sp
   19e8c:	bl	11a6c <__errno_location@plt>
   19e90:	mov	r1, #12
   19e94:	str	r1, [r0]
   19e98:	mov	r0, #0
   19e9c:	pop	{fp, pc}
   19ea0:	push	{fp, lr}
   19ea4:	mov	fp, sp
   19ea8:	cmp	r0, #0
   19eac:	beq	19ec8 <lchmod@@Base+0x357c>
   19eb0:	cmp	r1, #0
   19eb4:	beq	19ed4 <lchmod@@Base+0x3588>
   19eb8:	cmn	r1, #1
   19ebc:	ble	19ee0 <lchmod@@Base+0x3594>
   19ec0:	pop	{fp, lr}
   19ec4:	b	118e0 <realloc@plt>
   19ec8:	mov	r0, r1
   19ecc:	pop	{fp, lr}
   19ed0:	b	19e70 <lchmod@@Base+0x3524>
   19ed4:	bl	137c0 <__assert_fail@plt+0x1b8c>
   19ed8:	mov	r0, #0
   19edc:	pop	{fp, pc}
   19ee0:	bl	11a6c <__errno_location@plt>
   19ee4:	mov	r1, #12
   19ee8:	str	r1, [r0]
   19eec:	mov	r0, #0
   19ef0:	pop	{fp, pc}
   19ef4:	sub	r0, r0, #1
   19ef8:	ldrb	r3, [r0, #1]!
   19efc:	cmp	r3, #47	; 0x2f
   19f00:	beq	19ef8 <lchmod@@Base+0x35ac>
   19f04:	mov	r2, #0
   19f08:	mov	r1, r0
   19f0c:	b	19f28 <lchmod@@Base+0x35dc>
   19f10:	cmp	r3, #0
   19f14:	bxeq	lr
   19f18:	tst	r2, #1
   19f1c:	movne	r0, r1
   19f20:	mov	r2, #0
   19f24:	ldrb	r3, [r1, #1]!
   19f28:	uxtb	r3, r3
   19f2c:	cmp	r3, #47	; 0x2f
   19f30:	bne	19f10 <lchmod@@Base+0x35c4>
   19f34:	mov	r2, #1
   19f38:	ldrb	r3, [r1, #1]!
   19f3c:	b	19f28 <lchmod@@Base+0x35dc>
   19f40:	push	{r4, sl, fp, lr}
   19f44:	add	fp, sp, #8
   19f48:	mov	r4, r0
   19f4c:	bl	11a30 <strlen@plt>
   19f50:	mov	r1, r0
   19f54:	sub	r2, r4, #1
   19f58:	mov	r0, r1
   19f5c:	cmp	r1, #2
   19f60:	popcc	{r4, sl, fp, pc}
   19f64:	ldrb	r3, [r2, r0]
   19f68:	sub	r1, r0, #1
   19f6c:	cmp	r3, #47	; 0x2f
   19f70:	beq	19f58 <lchmod@@Base+0x360c>
   19f74:	pop	{r4, sl, fp, pc}
   19f78:	push	{r4, r5, fp, lr}
   19f7c:	add	fp, sp, #8
   19f80:	rsb	lr, r2, #64	; 0x40
   19f84:	lsr	ip, r0, lr
   19f88:	rsb	r3, lr, #32
   19f8c:	orr	ip, ip, r1, lsl r3
   19f90:	rsb	r4, r2, #32
   19f94:	cmp	r4, #0
   19f98:	lsrge	ip, r1, r4
   19f9c:	lsl	r3, r0, r2
   19fa0:	sub	r5, r2, #32
   19fa4:	cmp	r5, #0
   19fa8:	movwge	r3, #0
   19fac:	orr	ip, ip, r3
   19fb0:	lsr	r3, r0, r4
   19fb4:	orr	r2, r3, r1, lsl r2
   19fb8:	lslge	r2, r0, r5
   19fbc:	lsr	r0, r1, lr
   19fc0:	cmp	r4, #0
   19fc4:	movwge	r0, #0
   19fc8:	orr	r1, r0, r2
   19fcc:	mov	r0, ip
   19fd0:	pop	{r4, r5, fp, pc}
   19fd4:	push	{r4, r5, fp, lr}
   19fd8:	add	fp, sp, #8
   19fdc:	lsr	ip, r0, r2
   19fe0:	rsb	r3, r2, #32
   19fe4:	orr	ip, ip, r1, lsl r3
   19fe8:	sub	lr, r2, #32
   19fec:	cmp	lr, #0
   19ff0:	lsrge	ip, r1, lr
   19ff4:	rsb	r4, r2, #64	; 0x40
   19ff8:	lsl	r5, r0, r4
   19ffc:	cmp	r3, #0
   1a000:	movwge	r5, #0
   1a004:	orr	ip, r5, ip
   1a008:	rsb	r5, r4, #32
   1a00c:	lsr	r5, r0, r5
   1a010:	orr	r4, r5, r1, lsl r4
   1a014:	cmp	r3, #0
   1a018:	lslge	r4, r0, r3
   1a01c:	lsr	r0, r1, r2
   1a020:	cmp	lr, #0
   1a024:	movwge	r0, #0
   1a028:	orr	r1, r4, r0
   1a02c:	mov	r0, ip
   1a030:	pop	{r4, r5, fp, pc}
   1a034:	rsb	r1, r1, #32
   1a038:	ror	r0, r0, r1
   1a03c:	bx	lr
   1a040:	ror	r0, r0, r1
   1a044:	bx	lr
   1a048:	rsb	r1, r1, #32
   1a04c:	ror	r0, r0, r1
   1a050:	bx	lr
   1a054:	ror	r0, r0, r1
   1a058:	bx	lr
   1a05c:	and	r2, r1, #15
   1a060:	lsl	r2, r0, r2
   1a064:	rsb	r1, r1, #0
   1a068:	and	r1, r1, #15
   1a06c:	orr	r0, r2, r0, lsr r1
   1a070:	uxth	r0, r0
   1a074:	bx	lr
   1a078:	and	r2, r1, #15
   1a07c:	lsr	r2, r0, r2
   1a080:	rsb	r1, r1, #0
   1a084:	and	r1, r1, #15
   1a088:	orr	r0, r2, r0, lsl r1
   1a08c:	uxth	r0, r0
   1a090:	bx	lr
   1a094:	and	r2, r1, #7
   1a098:	lsl	r2, r0, r2
   1a09c:	rsb	r1, r1, #0
   1a0a0:	and	r1, r1, #7
   1a0a4:	orr	r0, r2, r0, lsr r1
   1a0a8:	uxtb	r0, r0
   1a0ac:	bx	lr
   1a0b0:	and	r2, r1, #7
   1a0b4:	lsr	r2, r0, r2
   1a0b8:	rsb	r1, r1, #0
   1a0bc:	and	r1, r1, #7
   1a0c0:	orr	r0, r2, r0, lsl r1
   1a0c4:	uxtb	r0, r0
   1a0c8:	bx	lr
   1a0cc:	mov	r1, r0
   1a0d0:	sub	r2, r0, #65	; 0x41
   1a0d4:	mov	r0, #1
   1a0d8:	cmp	r2, #26
   1a0dc:	subcs	r2, r1, #97	; 0x61
   1a0e0:	cmpcs	r2, #26
   1a0e4:	bcs	1a0ec <lchmod@@Base+0x37a0>
   1a0e8:	bx	lr
   1a0ec:	sub	r1, r1, #48	; 0x30
   1a0f0:	cmp	r1, #10
   1a0f4:	movcs	r0, #0
   1a0f8:	bx	lr
   1a0fc:	mov	r1, r0
   1a100:	sub	r2, r0, #65	; 0x41
   1a104:	mov	r0, #1
   1a108:	cmp	r2, #26
   1a10c:	subcs	r1, r1, #97	; 0x61
   1a110:	cmpcs	r1, #26
   1a114:	movcs	r0, #0
   1a118:	bx	lr
   1a11c:	mov	r1, #0
   1a120:	cmp	r0, #128	; 0x80
   1a124:	movwcc	r1, #1
   1a128:	mov	r0, r1
   1a12c:	bx	lr
   1a130:	sub	r1, r0, #9
   1a134:	clz	r1, r1
   1a138:	lsr	r1, r1, #5
   1a13c:	sub	r0, r0, #32
   1a140:	clz	r0, r0
   1a144:	lsr	r0, r0, #5
   1a148:	orr	r0, r0, r1
   1a14c:	bx	lr
   1a150:	mov	r1, r0
   1a154:	mov	r0, #1
   1a158:	cmp	r1, #32
   1a15c:	bxcc	lr
   1a160:	cmp	r1, #127	; 0x7f
   1a164:	movne	r0, #0
   1a168:	bx	lr
   1a16c:	sub	r1, r0, #48	; 0x30
   1a170:	mov	r0, #0
   1a174:	cmp	r1, #10
   1a178:	movwcc	r0, #1
   1a17c:	bx	lr
   1a180:	sub	r1, r0, #33	; 0x21
   1a184:	mov	r0, #0
   1a188:	cmp	r1, #94	; 0x5e
   1a18c:	movwcc	r0, #1
   1a190:	bx	lr
   1a194:	sub	r1, r0, #97	; 0x61
   1a198:	mov	r0, #0
   1a19c:	cmp	r1, #26
   1a1a0:	movwcc	r0, #1
   1a1a4:	bx	lr
   1a1a8:	sub	r1, r0, #32
   1a1ac:	mov	r0, #0
   1a1b0:	cmp	r1, #95	; 0x5f
   1a1b4:	movwcc	r0, #1
   1a1b8:	bx	lr
   1a1bc:	sub	r1, r0, #33	; 0x21
   1a1c0:	cmp	r1, #93	; 0x5d
   1a1c4:	bhi	1a350 <lchmod@@Base+0x3a04>
   1a1c8:	mov	r0, #1
   1a1cc:	add	r2, pc, #0
   1a1d0:	ldr	pc, [r2, r1, lsl #2]
   1a1d4:	andeq	sl, r1, ip, asr #6
   1a1d8:	andeq	sl, r1, ip, asr #6
   1a1dc:	andeq	sl, r1, ip, asr #6
   1a1e0:	andeq	sl, r1, ip, asr #6
   1a1e4:	andeq	sl, r1, ip, asr #6
   1a1e8:	andeq	sl, r1, ip, asr #6
   1a1ec:	andeq	sl, r1, ip, asr #6
   1a1f0:	andeq	sl, r1, ip, asr #6
   1a1f4:	andeq	sl, r1, ip, asr #6
   1a1f8:	andeq	sl, r1, ip, asr #6
   1a1fc:	andeq	sl, r1, ip, asr #6
   1a200:	andeq	sl, r1, ip, asr #6
   1a204:	andeq	sl, r1, ip, asr #6
   1a208:	andeq	sl, r1, ip, asr #6
   1a20c:	andeq	sl, r1, ip, asr #6
   1a210:	andeq	sl, r1, r0, asr r3
   1a214:	andeq	sl, r1, r0, asr r3
   1a218:	andeq	sl, r1, r0, asr r3
   1a21c:	andeq	sl, r1, r0, asr r3
   1a220:	andeq	sl, r1, r0, asr r3
   1a224:	andeq	sl, r1, r0, asr r3
   1a228:	andeq	sl, r1, r0, asr r3
   1a22c:	andeq	sl, r1, r0, asr r3
   1a230:	andeq	sl, r1, r0, asr r3
   1a234:	andeq	sl, r1, r0, asr r3
   1a238:	andeq	sl, r1, ip, asr #6
   1a23c:	andeq	sl, r1, ip, asr #6
   1a240:	andeq	sl, r1, ip, asr #6
   1a244:	andeq	sl, r1, ip, asr #6
   1a248:	andeq	sl, r1, ip, asr #6
   1a24c:	andeq	sl, r1, ip, asr #6
   1a250:	andeq	sl, r1, ip, asr #6
   1a254:	andeq	sl, r1, r0, asr r3
   1a258:	andeq	sl, r1, r0, asr r3
   1a25c:	andeq	sl, r1, r0, asr r3
   1a260:	andeq	sl, r1, r0, asr r3
   1a264:	andeq	sl, r1, r0, asr r3
   1a268:	andeq	sl, r1, r0, asr r3
   1a26c:	andeq	sl, r1, r0, asr r3
   1a270:	andeq	sl, r1, r0, asr r3
   1a274:	andeq	sl, r1, r0, asr r3
   1a278:	andeq	sl, r1, r0, asr r3
   1a27c:	andeq	sl, r1, r0, asr r3
   1a280:	andeq	sl, r1, r0, asr r3
   1a284:	andeq	sl, r1, r0, asr r3
   1a288:	andeq	sl, r1, r0, asr r3
   1a28c:	andeq	sl, r1, r0, asr r3
   1a290:	andeq	sl, r1, r0, asr r3
   1a294:	andeq	sl, r1, r0, asr r3
   1a298:	andeq	sl, r1, r0, asr r3
   1a29c:	andeq	sl, r1, r0, asr r3
   1a2a0:	andeq	sl, r1, r0, asr r3
   1a2a4:	andeq	sl, r1, r0, asr r3
   1a2a8:	andeq	sl, r1, r0, asr r3
   1a2ac:	andeq	sl, r1, r0, asr r3
   1a2b0:	andeq	sl, r1, r0, asr r3
   1a2b4:	andeq	sl, r1, r0, asr r3
   1a2b8:	andeq	sl, r1, r0, asr r3
   1a2bc:	andeq	sl, r1, ip, asr #6
   1a2c0:	andeq	sl, r1, ip, asr #6
   1a2c4:	andeq	sl, r1, ip, asr #6
   1a2c8:	andeq	sl, r1, ip, asr #6
   1a2cc:	andeq	sl, r1, ip, asr #6
   1a2d0:	andeq	sl, r1, ip, asr #6
   1a2d4:	andeq	sl, r1, r0, asr r3
   1a2d8:	andeq	sl, r1, r0, asr r3
   1a2dc:	andeq	sl, r1, r0, asr r3
   1a2e0:	andeq	sl, r1, r0, asr r3
   1a2e4:	andeq	sl, r1, r0, asr r3
   1a2e8:	andeq	sl, r1, r0, asr r3
   1a2ec:	andeq	sl, r1, r0, asr r3
   1a2f0:	andeq	sl, r1, r0, asr r3
   1a2f4:	andeq	sl, r1, r0, asr r3
   1a2f8:	andeq	sl, r1, r0, asr r3
   1a2fc:	andeq	sl, r1, r0, asr r3
   1a300:	andeq	sl, r1, r0, asr r3
   1a304:	andeq	sl, r1, r0, asr r3
   1a308:	andeq	sl, r1, r0, asr r3
   1a30c:	andeq	sl, r1, r0, asr r3
   1a310:	andeq	sl, r1, r0, asr r3
   1a314:	andeq	sl, r1, r0, asr r3
   1a318:	andeq	sl, r1, r0, asr r3
   1a31c:	andeq	sl, r1, r0, asr r3
   1a320:	andeq	sl, r1, r0, asr r3
   1a324:	andeq	sl, r1, r0, asr r3
   1a328:	andeq	sl, r1, r0, asr r3
   1a32c:	andeq	sl, r1, r0, asr r3
   1a330:	andeq	sl, r1, r0, asr r3
   1a334:	andeq	sl, r1, r0, asr r3
   1a338:	andeq	sl, r1, r0, asr r3
   1a33c:	andeq	sl, r1, ip, asr #6
   1a340:	andeq	sl, r1, ip, asr #6
   1a344:	andeq	sl, r1, ip, asr #6
   1a348:	andeq	sl, r1, ip, asr #6
   1a34c:	bx	lr
   1a350:	mov	r0, #0
   1a354:	bx	lr
   1a358:	sub	r0, r0, #9
   1a35c:	cmp	r0, #23
   1a360:	movhi	r0, #0
   1a364:	bxhi	lr
   1a368:	bic	r0, r0, #-16777216	; 0xff000000
   1a36c:	movw	r1, #31
   1a370:	movt	r1, #128	; 0x80
   1a374:	mov	r2, #1
   1a378:	and	r0, r2, r1, lsr r0
   1a37c:	bx	lr
   1a380:	sub	r1, r0, #65	; 0x41
   1a384:	mov	r0, #0
   1a388:	cmp	r1, #26
   1a38c:	movwcc	r0, #1
   1a390:	bx	lr
   1a394:	mov	r1, r0
   1a398:	sub	r2, r0, #48	; 0x30
   1a39c:	mov	r0, #1
   1a3a0:	cmp	r2, #22
   1a3a4:	bhi	1a3bc <lchmod@@Base+0x3a70>
   1a3a8:	mov	ip, #1
   1a3ac:	movw	r3, #1023	; 0x3ff
   1a3b0:	movt	r3, #126	; 0x7e
   1a3b4:	tst	r3, ip, lsl r2
   1a3b8:	bxne	lr
   1a3bc:	sub	r1, r1, #97	; 0x61
   1a3c0:	cmp	r1, #6
   1a3c4:	movcs	r0, #0
   1a3c8:	bxcs	lr
   1a3cc:	bx	lr
   1a3d0:	sub	r1, r0, #65	; 0x41
   1a3d4:	cmp	r1, #26
   1a3d8:	addcc	r0, r0, #32
   1a3dc:	bx	lr
   1a3e0:	sub	r1, r0, #97	; 0x61
   1a3e4:	cmp	r1, #26
   1a3e8:	subcc	r0, r0, #32
   1a3ec:	bx	lr
   1a3f0:	push	{r4, r5, r6, sl, fp, lr}
   1a3f4:	add	fp, sp, #16
   1a3f8:	mov	r4, r0
   1a3fc:	bl	11970 <__fpending@plt>
   1a400:	mov	r5, r0
   1a404:	mov	r0, r4
   1a408:	bl	1197c <ferror_unlocked@plt>
   1a40c:	mov	r6, r0
   1a410:	mov	r0, r4
   1a414:	bl	1a594 <lchmod@@Base+0x3c48>
   1a418:	cmp	r6, #0
   1a41c:	beq	1a43c <lchmod@@Base+0x3af0>
   1a420:	mvn	r4, #0
   1a424:	cmp	r0, #0
   1a428:	bne	1a470 <lchmod@@Base+0x3b24>
   1a42c:	bl	11a6c <__errno_location@plt>
   1a430:	mov	r1, #0
   1a434:	str	r1, [r0]
   1a438:	b	1a470 <lchmod@@Base+0x3b24>
   1a43c:	cmp	r0, #0
   1a440:	mov	r4, r0
   1a444:	mvnne	r4, #0
   1a448:	cmp	r5, #0
   1a44c:	bne	1a470 <lchmod@@Base+0x3b24>
   1a450:	cmp	r0, #0
   1a454:	beq	1a470 <lchmod@@Base+0x3b24>
   1a458:	bl	11a6c <__errno_location@plt>
   1a45c:	ldr	r0, [r0]
   1a460:	subs	r4, r0, #9
   1a464:	mvnne	r4, #0
   1a468:	mov	r0, r4
   1a46c:	pop	{r4, r5, r6, sl, fp, pc}
   1a470:	mov	r0, r4
   1a474:	pop	{r4, r5, r6, sl, fp, pc}
   1a478:	mov	r1, #0
   1a47c:	movw	r2, #62998	; 0xf616
   1a480:	movt	r2, #149	; 0x95
   1a484:	str	r1, [r0, #16]
   1a488:	str	r1, [r0, #20]
   1a48c:	str	r2, [r0, #24]
   1a490:	bx	lr
   1a494:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1a498:	add	fp, sp, #24
   1a49c:	mov	r5, r1
   1a4a0:	mov	r4, r0
   1a4a4:	ldr	r0, [r0, #24]
   1a4a8:	movw	r1, #62998	; 0xf616
   1a4ac:	movt	r1, #149	; 0x95
   1a4b0:	cmp	r0, r1
   1a4b4:	bne	1a554 <lchmod@@Base+0x3c08>
   1a4b8:	mov	r1, r4
   1a4bc:	ldr	r2, [r1, #16]!
   1a4c0:	ldr	r3, [r1, #4]
   1a4c4:	orrs	r0, r2, r3
   1a4c8:	beq	1a508 <lchmod@@Base+0x3bbc>
   1a4cc:	ldm	r4, {r0, r7}
   1a4d0:	ldr	r6, [r5, #96]	; 0x60
   1a4d4:	ldr	r9, [r5, #100]	; 0x64
   1a4d8:	eor	r7, r9, r7
   1a4dc:	eor	r0, r6, r0
   1a4e0:	orrs	r0, r0, r7
   1a4e4:	bne	1a508 <lchmod@@Base+0x3bbc>
   1a4e8:	ldr	r0, [r4, #8]
   1a4ec:	ldr	r7, [r4, #12]
   1a4f0:	ldm	r5, {r6, r9}
   1a4f4:	eor	r7, r9, r7
   1a4f8:	eor	r0, r6, r0
   1a4fc:	orrs	r0, r0, r7
   1a500:	mov	r0, #1
   1a504:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a508:	adds	r6, r2, #1
   1a50c:	adc	r7, r3, #0
   1a510:	strd	r6, [r1]
   1a514:	mov	r0, r6
   1a518:	mov	r1, r7
   1a51c:	bl	1a574 <lchmod@@Base+0x3c28>
   1a520:	mov	r1, r0
   1a524:	mov	r0, #0
   1a528:	cmp	r1, #0
   1a52c:	beq	1a550 <lchmod@@Base+0x3c04>
   1a530:	orrs	r1, r6, r7
   1a534:	moveq	r0, #1
   1a538:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a53c:	ldrd	r2, [r5]
   1a540:	str	r3, [r4, #12]
   1a544:	str	r2, [r4, #8]
   1a548:	ldrd	r2, [r5, #96]	; 0x60
   1a54c:	stm	r4, {r2, r3}
   1a550:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a554:	movw	r0, #48393	; 0xbd09
   1a558:	movt	r0, #1
   1a55c:	movw	r1, #48417	; 0xbd21
   1a560:	movt	r1, #1
   1a564:	movw	r3, #48435	; 0xbd33
   1a568:	movt	r3, #1
   1a56c:	mov	r2, #60	; 0x3c
   1a570:	bl	11c34 <__assert_fail@plt>
   1a574:	subs	r2, r0, #1
   1a578:	and	r0, r2, r0
   1a57c:	sbc	r2, r1, #0
   1a580:	and	r1, r2, r1
   1a584:	orr	r0, r0, r1
   1a588:	clz	r0, r0
   1a58c:	lsr	r0, r0, #5
   1a590:	bx	lr
   1a594:	push	{r4, r5, fp, lr}
   1a598:	add	fp, sp, #8
   1a59c:	sub	sp, sp, #8
   1a5a0:	mov	r4, r0
   1a5a4:	bl	11aa8 <fileno@plt>
   1a5a8:	cmn	r0, #1
   1a5ac:	ble	1a624 <lchmod@@Base+0x3cd8>
   1a5b0:	mov	r0, r4
   1a5b4:	bl	119d0 <__freading@plt>
   1a5b8:	cmp	r0, #0
   1a5bc:	beq	1a5e8 <lchmod@@Base+0x3c9c>
   1a5c0:	mov	r0, r4
   1a5c4:	bl	11aa8 <fileno@plt>
   1a5c8:	mov	r1, #1
   1a5cc:	str	r1, [sp]
   1a5d0:	mov	r2, #0
   1a5d4:	mov	r3, #0
   1a5d8:	bl	1194c <lseek64@plt>
   1a5dc:	and	r0, r0, r1
   1a5e0:	cmn	r0, #1
   1a5e4:	beq	1a624 <lchmod@@Base+0x3cd8>
   1a5e8:	mov	r0, r4
   1a5ec:	bl	1a860 <lchmod@@Base+0x3f14>
   1a5f0:	cmp	r0, #0
   1a5f4:	beq	1a624 <lchmod@@Base+0x3cd8>
   1a5f8:	bl	11a6c <__errno_location@plt>
   1a5fc:	ldr	r5, [r0]
   1a600:	mov	r0, r4
   1a604:	bl	11acc <fclose@plt>
   1a608:	cmp	r5, #0
   1a60c:	beq	1a61c <lchmod@@Base+0x3cd0>
   1a610:	bl	11a6c <__errno_location@plt>
   1a614:	str	r5, [r0]
   1a618:	mvn	r0, #0
   1a61c:	sub	sp, fp, #8
   1a620:	pop	{r4, r5, fp, pc}
   1a624:	mov	r0, r4
   1a628:	sub	sp, fp, #8
   1a62c:	pop	{r4, r5, fp, lr}
   1a630:	b	11acc <fclose@plt>
   1a634:	sub	sp, sp, #8
   1a638:	push	{fp, lr}
   1a63c:	mov	fp, sp
   1a640:	sub	sp, sp, #8
   1a644:	str	r3, [fp, #12]
   1a648:	str	r2, [fp, #8]
   1a64c:	add	r2, fp, #8
   1a650:	str	r2, [sp, #4]
   1a654:	cmp	r1, #11
   1a658:	bhi	1a698 <lchmod@@Base+0x3d4c>
   1a65c:	mov	r2, #1
   1a660:	movw	r3, #1300	; 0x514
   1a664:	tst	r3, r2, lsl r1
   1a668:	bne	1a6e8 <lchmod@@Base+0x3d9c>
   1a66c:	movw	r3, #2570	; 0xa0a
   1a670:	tst	r3, r2, lsl r1
   1a674:	bne	1a6c0 <lchmod@@Base+0x3d74>
   1a678:	cmp	r1, #0
   1a67c:	bne	1a698 <lchmod@@Base+0x3d4c>
   1a680:	ldr	r1, [sp, #4]
   1a684:	add	r2, r1, #4
   1a688:	str	r2, [sp, #4]
   1a68c:	ldr	r1, [r1]
   1a690:	bl	1a70c <lchmod@@Base+0x3dc0>
   1a694:	b	1a6fc <lchmod@@Base+0x3db0>
   1a698:	sub	r2, r1, #1024	; 0x400
   1a69c:	cmp	r2, #10
   1a6a0:	bhi	1a6e8 <lchmod@@Base+0x3d9c>
   1a6a4:	mov	ip, #1
   1a6a8:	movw	r3, #645	; 0x285
   1a6ac:	tst	r3, ip, lsl r2
   1a6b0:	bne	1a6e8 <lchmod@@Base+0x3d9c>
   1a6b4:	movw	r3, #1282	; 0x502
   1a6b8:	tst	r3, ip, lsl r2
   1a6bc:	beq	1a6c8 <lchmod@@Base+0x3d7c>
   1a6c0:	bl	11ae4 <fcntl64@plt>
   1a6c4:	b	1a6fc <lchmod@@Base+0x3db0>
   1a6c8:	cmp	r2, #6
   1a6cc:	bne	1a6e8 <lchmod@@Base+0x3d9c>
   1a6d0:	ldr	r1, [sp, #4]
   1a6d4:	add	r2, r1, #4
   1a6d8:	str	r2, [sp, #4]
   1a6dc:	ldr	r1, [r1]
   1a6e0:	bl	1a718 <lchmod@@Base+0x3dcc>
   1a6e4:	b	1a6fc <lchmod@@Base+0x3db0>
   1a6e8:	ldr	r2, [sp, #4]
   1a6ec:	add	r3, r2, #4
   1a6f0:	str	r3, [sp, #4]
   1a6f4:	ldr	r2, [r2]
   1a6f8:	bl	11ae4 <fcntl64@plt>
   1a6fc:	mov	sp, fp
   1a700:	pop	{fp, lr}
   1a704:	add	sp, sp, #8
   1a708:	bx	lr
   1a70c:	mov	r2, r1
   1a710:	mov	r1, #0
   1a714:	b	11ae4 <fcntl64@plt>
   1a718:	push	{r4, r5, r6, r7, fp, lr}
   1a71c:	add	fp, sp, #16
   1a720:	mov	r5, r1
   1a724:	mov	r6, r0
   1a728:	movw	r7, #49976	; 0xc338
   1a72c:	movt	r7, #2
   1a730:	ldr	r0, [r7]
   1a734:	cmp	r0, #0
   1a738:	blt	1a79c <lchmod@@Base+0x3e50>
   1a73c:	mov	r0, r6
   1a740:	movw	r1, #1030	; 0x406
   1a744:	mov	r2, r5
   1a748:	bl	11ae4 <fcntl64@plt>
   1a74c:	mov	r4, r0
   1a750:	cmn	r0, #1
   1a754:	bgt	1a788 <lchmod@@Base+0x3e3c>
   1a758:	bl	11a6c <__errno_location@plt>
   1a75c:	ldr	r0, [r0]
   1a760:	cmp	r0, #22
   1a764:	bne	1a788 <lchmod@@Base+0x3e3c>
   1a768:	mov	r0, r6
   1a76c:	mov	r1, r5
   1a770:	bl	1a70c <lchmod@@Base+0x3dc0>
   1a774:	mov	r4, r0
   1a778:	cmp	r0, #0
   1a77c:	blt	1a7ec <lchmod@@Base+0x3ea0>
   1a780:	mvn	r0, #0
   1a784:	b	1a78c <lchmod@@Base+0x3e40>
   1a788:	mov	r0, #1
   1a78c:	str	r0, [r7]
   1a790:	cmp	r4, #0
   1a794:	bge	1a7b4 <lchmod@@Base+0x3e68>
   1a798:	b	1a7ec <lchmod@@Base+0x3ea0>
   1a79c:	mov	r0, r6
   1a7a0:	mov	r1, r5
   1a7a4:	bl	1a70c <lchmod@@Base+0x3dc0>
   1a7a8:	mov	r4, r0
   1a7ac:	cmp	r4, #0
   1a7b0:	blt	1a7ec <lchmod@@Base+0x3ea0>
   1a7b4:	ldr	r0, [r7]
   1a7b8:	cmn	r0, #1
   1a7bc:	bne	1a7ec <lchmod@@Base+0x3ea0>
   1a7c0:	mov	r0, r4
   1a7c4:	mov	r1, #1
   1a7c8:	bl	11ae4 <fcntl64@plt>
   1a7cc:	cmp	r0, #0
   1a7d0:	blt	1a7f4 <lchmod@@Base+0x3ea8>
   1a7d4:	orr	r2, r0, #1
   1a7d8:	mov	r0, r4
   1a7dc:	mov	r1, #2
   1a7e0:	bl	11ae4 <fcntl64@plt>
   1a7e4:	cmn	r0, #1
   1a7e8:	beq	1a7f4 <lchmod@@Base+0x3ea8>
   1a7ec:	mov	r0, r4
   1a7f0:	pop	{r4, r5, r6, r7, fp, pc}
   1a7f4:	bl	11a6c <__errno_location@plt>
   1a7f8:	mov	r5, r0
   1a7fc:	ldr	r6, [r0]
   1a800:	mov	r0, r4
   1a804:	bl	11be0 <close@plt>
   1a808:	str	r6, [r5]
   1a80c:	mvn	r4, #0
   1a810:	mov	r0, r4
   1a814:	pop	{r4, r5, r6, r7, fp, pc}
   1a818:	sub	sp, sp, #8
   1a81c:	push	{fp, lr}
   1a820:	mov	fp, sp
   1a824:	sub	sp, sp, #8
   1a828:	str	r3, [fp, #12]
   1a82c:	str	r2, [fp, #8]
   1a830:	mov	r2, #0
   1a834:	tst	r1, #64	; 0x40
   1a838:	addne	r2, fp, #8
   1a83c:	orrne	r2, r2, #4
   1a840:	strne	r2, [sp, #4]
   1a844:	ldrne	r2, [fp, #8]
   1a848:	bl	119a0 <open64@plt>
   1a84c:	bl	18f70 <lchmod@@Base+0x2624>
   1a850:	mov	sp, fp
   1a854:	pop	{fp, lr}
   1a858:	add	sp, sp, #8
   1a85c:	bx	lr
   1a860:	push	{r4, sl, fp, lr}
   1a864:	add	fp, sp, #8
   1a868:	mov	r4, r0
   1a86c:	cmp	r0, #0
   1a870:	beq	1a888 <lchmod@@Base+0x3f3c>
   1a874:	mov	r0, r4
   1a878:	bl	119d0 <__freading@plt>
   1a87c:	cmp	r0, #0
   1a880:	movne	r0, r4
   1a884:	blne	1a894 <lchmod@@Base+0x3f48>
   1a888:	mov	r0, r4
   1a88c:	pop	{r4, sl, fp, lr}
   1a890:	b	11850 <fflush@plt>
   1a894:	ldrb	r1, [r0, #1]
   1a898:	tst	r1, #1
   1a89c:	bxeq	lr
   1a8a0:	push	{fp, lr}
   1a8a4:	mov	fp, sp
   1a8a8:	sub	sp, sp, #8
   1a8ac:	mov	r1, #1
   1a8b0:	str	r1, [sp]
   1a8b4:	mov	r2, #0
   1a8b8:	mov	r3, #0
   1a8bc:	bl	1a8c8 <lchmod@@Base+0x3f7c>
   1a8c0:	mov	sp, fp
   1a8c4:	pop	{fp, pc}
   1a8c8:	push	{r4, r5, r6, r7, fp, lr}
   1a8cc:	add	fp, sp, #16
   1a8d0:	sub	sp, sp, #8
   1a8d4:	mov	r5, r3
   1a8d8:	mov	r6, r2
   1a8dc:	mov	r4, r0
   1a8e0:	ldr	r0, [r0, #4]
   1a8e4:	ldr	r1, [r4, #8]
   1a8e8:	cmp	r1, r0
   1a8ec:	bne	1a908 <lchmod@@Base+0x3fbc>
   1a8f0:	ldrd	r0, [r4, #16]
   1a8f4:	cmp	r1, r0
   1a8f8:	bne	1a908 <lchmod@@Base+0x3fbc>
   1a8fc:	ldr	r0, [r4, #36]	; 0x24
   1a900:	cmp	r0, #0
   1a904:	beq	1a920 <lchmod@@Base+0x3fd4>
   1a908:	mov	r0, r4
   1a90c:	mov	r2, r6
   1a910:	mov	r3, r5
   1a914:	sub	sp, fp, #16
   1a918:	pop	{r4, r5, r6, r7, fp, lr}
   1a91c:	b	11ad8 <fseeko64@plt>
   1a920:	ldr	r7, [fp, #8]
   1a924:	mov	r0, r4
   1a928:	bl	11aa8 <fileno@plt>
   1a92c:	str	r7, [sp]
   1a930:	mov	r2, r6
   1a934:	mov	r3, r5
   1a938:	bl	1194c <lseek64@plt>
   1a93c:	and	r2, r0, r1
   1a940:	cmn	r2, #1
   1a944:	mvneq	r0, #0
   1a948:	subeq	sp, fp, #16
   1a94c:	popeq	{r4, r5, r6, r7, fp, pc}
   1a950:	strd	r0, [r4, #80]	; 0x50
   1a954:	ldr	r0, [r4]
   1a958:	bic	r0, r0, #16
   1a95c:	str	r0, [r4]
   1a960:	mov	r0, #0
   1a964:	sub	sp, fp, #16
   1a968:	pop	{r4, r5, r6, r7, fp, pc}
   1a96c:	ldrb	r2, [r0]
   1a970:	cmp	r2, #0
   1a974:	beq	1a998 <lchmod@@Base+0x404c>
   1a978:	add	r3, r0, #1
   1a97c:	mov	r0, #0
   1a980:	ror	r0, r0, #23
   1a984:	uxtab	r0, r0, r2
   1a988:	ldrb	r2, [r3], #1
   1a98c:	cmp	r2, #0
   1a990:	bne	1a980 <lchmod@@Base+0x4034>
   1a994:	b	1a99c <lchmod@@Base+0x4050>
   1a998:	mov	r0, #0
   1a99c:	udiv	r2, r0, r1
   1a9a0:	mls	r0, r2, r1, r0
   1a9a4:	bx	lr
   1a9a8:	push	{fp, lr}
   1a9ac:	mov	fp, sp
   1a9b0:	bl	11a6c <__errno_location@plt>
   1a9b4:	mov	r1, #12
   1a9b8:	str	r1, [r0]
   1a9bc:	mov	r0, #0
   1a9c0:	pop	{fp, pc}
   1a9c4:	b	19e70 <lchmod@@Base+0x3524>
   1a9c8:	cmp	r1, #0
   1a9cc:	orreq	r1, r1, #1
   1a9d0:	b	19ea0 <lchmod@@Base+0x3554>
   1a9d4:	b	19e1c <lchmod@@Base+0x34d0>
   1a9d8:	clz	r3, r2
   1a9dc:	lsr	ip, r3, #5
   1a9e0:	clz	r3, r1
   1a9e4:	lsr	r3, r3, #5
   1a9e8:	orrs	r3, r3, ip
   1a9ec:	movwne	r1, #1
   1a9f0:	movwne	r2, #1
   1a9f4:	b	1aa90 <lchmod@@Base+0x4144>
   1a9f8:	push	{fp, lr}
   1a9fc:	mov	fp, sp
   1aa00:	mov	r0, #14
   1aa04:	bl	11b14 <nl_langinfo@plt>
   1aa08:	movw	r1, #46691	; 0xb663
   1aa0c:	movt	r1, #1
   1aa10:	cmp	r0, #0
   1aa14:	movne	r1, r0
   1aa18:	ldrb	r2, [r1]
   1aa1c:	movw	r0, #48502	; 0xbd76
   1aa20:	movt	r0, #1
   1aa24:	cmp	r2, #0
   1aa28:	movne	r0, r1
   1aa2c:	pop	{fp, pc}
   1aa30:	push	{r4, r5, r6, r7, fp, lr}
   1aa34:	add	fp, sp, #16
   1aa38:	sub	sp, sp, #8
   1aa3c:	mov	r7, r2
   1aa40:	mov	r4, r1
   1aa44:	add	r5, sp, #4
   1aa48:	cmp	r0, #0
   1aa4c:	movne	r5, r0
   1aa50:	mov	r0, r5
   1aa54:	bl	11988 <mbrtowc@plt>
   1aa58:	mov	r6, r0
   1aa5c:	cmp	r7, #0
   1aa60:	beq	1aa84 <lchmod@@Base+0x4138>
   1aa64:	cmn	r6, #2
   1aa68:	bcc	1aa84 <lchmod@@Base+0x4138>
   1aa6c:	mov	r0, #0
   1aa70:	bl	1aad8 <lchmod@@Base+0x418c>
   1aa74:	cmp	r0, #0
   1aa78:	ldrbeq	r0, [r4]
   1aa7c:	streq	r0, [r5]
   1aa80:	moveq	r6, #1
   1aa84:	mov	r0, r6
   1aa88:	sub	sp, fp, #16
   1aa8c:	pop	{r4, r5, r6, r7, fp, pc}
   1aa90:	cmp	r2, #0
   1aa94:	beq	1aac4 <lchmod@@Base+0x4178>
   1aa98:	mvn	r3, #0
   1aa9c:	udiv	r3, r3, r2
   1aaa0:	cmp	r3, r1
   1aaa4:	bcs	1aac4 <lchmod@@Base+0x4178>
   1aaa8:	push	{fp, lr}
   1aaac:	mov	fp, sp
   1aab0:	bl	11a6c <__errno_location@plt>
   1aab4:	mov	r1, #12
   1aab8:	str	r1, [r0]
   1aabc:	mov	r0, #0
   1aac0:	pop	{fp, pc}
   1aac4:	mul	r1, r2, r1
   1aac8:	b	19ea0 <lchmod@@Base+0x3554>
   1aacc:	mov	r1, #0
   1aad0:	mov	r2, #3
   1aad4:	b	1a634 <lchmod@@Base+0x3ce8>
   1aad8:	push	{r4, sl, fp, lr}
   1aadc:	add	fp, sp, #8
   1aae0:	sub	sp, sp, #264	; 0x108
   1aae4:	add	r1, sp, #7
   1aae8:	movw	r2, #257	; 0x101
   1aaec:	bl	1ab3c <lchmod@@Base+0x41f0>
   1aaf0:	mov	r4, #0
   1aaf4:	cmp	r0, #0
   1aaf8:	bne	1ab30 <lchmod@@Base+0x41e4>
   1aafc:	add	r0, sp, #7
   1ab00:	movw	r1, #48508	; 0xbd7c
   1ab04:	movt	r1, #1
   1ab08:	bl	1182c <strcmp@plt>
   1ab0c:	cmp	r0, #0
   1ab10:	beq	1ab30 <lchmod@@Base+0x41e4>
   1ab14:	add	r0, sp, #7
   1ab18:	movw	r1, #48510	; 0xbd7e
   1ab1c:	movt	r1, #1
   1ab20:	bl	1182c <strcmp@plt>
   1ab24:	mov	r4, r0
   1ab28:	cmp	r0, #0
   1ab2c:	movwne	r4, #1
   1ab30:	mov	r0, r4
   1ab34:	sub	sp, fp, #8
   1ab38:	pop	{r4, sl, fp, pc}
   1ab3c:	b	1ab40 <lchmod@@Base+0x41f4>
   1ab40:	push	{r4, r5, r6, r7, fp, lr}
   1ab44:	add	fp, sp, #16
   1ab48:	mov	r6, r2
   1ab4c:	mov	r4, r1
   1ab50:	bl	1abdc <lchmod@@Base+0x4290>
   1ab54:	cmp	r0, #0
   1ab58:	beq	1ab88 <lchmod@@Base+0x423c>
   1ab5c:	mov	r7, r0
   1ab60:	bl	11a30 <strlen@plt>
   1ab64:	cmp	r0, r6
   1ab68:	bcs	1aba8 <lchmod@@Base+0x425c>
   1ab6c:	add	r2, r0, #1
   1ab70:	mov	r0, r4
   1ab74:	mov	r1, r7
   1ab78:	bl	11898 <memcpy@plt>
   1ab7c:	mov	r5, #0
   1ab80:	mov	r0, r5
   1ab84:	pop	{r4, r5, r6, r7, fp, pc}
   1ab88:	mov	r5, #22
   1ab8c:	cmp	r6, #0
   1ab90:	movne	r0, #0
   1ab94:	strbne	r0, [r4]
   1ab98:	movne	r0, r5
   1ab9c:	popne	{r4, r5, r6, r7, fp, pc}
   1aba0:	mov	r0, r5
   1aba4:	pop	{r4, r5, r6, r7, fp, pc}
   1aba8:	mov	r5, #34	; 0x22
   1abac:	cmp	r6, #0
   1abb0:	beq	1abd0 <lchmod@@Base+0x4284>
   1abb4:	sub	r6, r6, #1
   1abb8:	mov	r0, r4
   1abbc:	mov	r1, r7
   1abc0:	mov	r2, r6
   1abc4:	bl	11898 <memcpy@plt>
   1abc8:	mov	r0, #0
   1abcc:	strb	r0, [r4, r6]
   1abd0:	mov	r0, r5
   1abd4:	pop	{r4, r5, r6, r7, fp, pc}
   1abd8:	b	1abdc <lchmod@@Base+0x4290>
   1abdc:	mov	r1, #0
   1abe0:	b	11af0 <setlocale@plt>
   1abe4:	cmp	r3, #0
   1abe8:	cmpeq	r2, #0
   1abec:	bne	1ac04 <lchmod@@Base+0x42b8>
   1abf0:	cmp	r1, #0
   1abf4:	cmpeq	r0, #0
   1abf8:	mvnne	r1, #0
   1abfc:	mvnne	r0, #0
   1ac00:	b	1ac20 <lchmod@@Base+0x42d4>
   1ac04:	sub	sp, sp, #8
   1ac08:	push	{sp, lr}
   1ac0c:	bl	1ac30 <lchmod@@Base+0x42e4>
   1ac10:	ldr	lr, [sp, #4]
   1ac14:	add	sp, sp, #8
   1ac18:	pop	{r2, r3}
   1ac1c:	bx	lr
   1ac20:	push	{r1, lr}
   1ac24:	mov	r0, #8
   1ac28:	bl	11814 <raise@plt>
   1ac2c:	pop	{r1, pc}
   1ac30:	cmp	r1, r3
   1ac34:	cmpeq	r0, r2
   1ac38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac3c:	mov	r4, r0
   1ac40:	movcc	r0, #0
   1ac44:	mov	r5, r1
   1ac48:	ldr	lr, [sp, #36]	; 0x24
   1ac4c:	movcc	r1, r0
   1ac50:	bcc	1ad4c <lchmod@@Base+0x4400>
   1ac54:	cmp	r3, #0
   1ac58:	clzeq	ip, r2
   1ac5c:	clzne	ip, r3
   1ac60:	addeq	ip, ip, #32
   1ac64:	cmp	r5, #0
   1ac68:	clzeq	r1, r4
   1ac6c:	addeq	r1, r1, #32
   1ac70:	clzne	r1, r5
   1ac74:	sub	ip, ip, r1
   1ac78:	sub	sl, ip, #32
   1ac7c:	lsl	r9, r3, ip
   1ac80:	rsb	fp, ip, #32
   1ac84:	orr	r9, r9, r2, lsl sl
   1ac88:	orr	r9, r9, r2, lsr fp
   1ac8c:	lsl	r8, r2, ip
   1ac90:	cmp	r5, r9
   1ac94:	cmpeq	r4, r8
   1ac98:	movcc	r0, #0
   1ac9c:	movcc	r1, r0
   1aca0:	bcc	1acbc <lchmod@@Base+0x4370>
   1aca4:	mov	r0, #1
   1aca8:	subs	r4, r4, r8
   1acac:	lsl	r1, r0, sl
   1acb0:	orr	r1, r1, r0, lsr fp
   1acb4:	lsl	r0, r0, ip
   1acb8:	sbc	r5, r5, r9
   1acbc:	cmp	ip, #0
   1acc0:	beq	1ad4c <lchmod@@Base+0x4400>
   1acc4:	lsr	r6, r8, #1
   1acc8:	orr	r6, r6, r9, lsl #31
   1accc:	lsr	r7, r9, #1
   1acd0:	mov	r2, ip
   1acd4:	b	1acf8 <lchmod@@Base+0x43ac>
   1acd8:	subs	r3, r4, r6
   1acdc:	sbc	r8, r5, r7
   1ace0:	adds	r3, r3, r3
   1ace4:	adc	r8, r8, r8
   1ace8:	adds	r4, r3, #1
   1acec:	adc	r5, r8, #0
   1acf0:	subs	r2, r2, #1
   1acf4:	beq	1ad14 <lchmod@@Base+0x43c8>
   1acf8:	cmp	r5, r7
   1acfc:	cmpeq	r4, r6
   1ad00:	bcs	1acd8 <lchmod@@Base+0x438c>
   1ad04:	adds	r4, r4, r4
   1ad08:	adc	r5, r5, r5
   1ad0c:	subs	r2, r2, #1
   1ad10:	bne	1acf8 <lchmod@@Base+0x43ac>
   1ad14:	lsr	r3, r4, ip
   1ad18:	orr	r3, r3, r5, lsl fp
   1ad1c:	lsr	r2, r5, ip
   1ad20:	orr	r3, r3, r5, lsr sl
   1ad24:	adds	r0, r0, r4
   1ad28:	mov	r4, r3
   1ad2c:	lsl	r3, r2, ip
   1ad30:	orr	r3, r3, r4, lsl sl
   1ad34:	lsl	ip, r4, ip
   1ad38:	orr	r3, r3, r4, lsr fp
   1ad3c:	adc	r1, r1, r5
   1ad40:	subs	r0, r0, ip
   1ad44:	mov	r5, r2
   1ad48:	sbc	r1, r1, r3
   1ad4c:	cmp	lr, #0
   1ad50:	strdne	r4, [lr]
   1ad54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad5c:	mov	r7, r0
   1ad60:	ldr	r6, [pc, #72]	; 1adb0 <lchmod@@Base+0x4464>
   1ad64:	ldr	r5, [pc, #72]	; 1adb4 <lchmod@@Base+0x4468>
   1ad68:	add	r6, pc, r6
   1ad6c:	add	r5, pc, r5
   1ad70:	sub	r6, r6, r5
   1ad74:	mov	r8, r1
   1ad78:	mov	r9, r2
   1ad7c:	bl	117c4 <fstatfs64@plt-0x20>
   1ad80:	asrs	r6, r6, #2
   1ad84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad88:	mov	r4, #0
   1ad8c:	add	r4, r4, #1
   1ad90:	ldr	r3, [r5], #4
   1ad94:	mov	r2, r9
   1ad98:	mov	r1, r8
   1ad9c:	mov	r0, r7
   1ada0:	blx	r3
   1ada4:	cmp	r6, r4
   1ada8:	bne	1ad8c <lchmod@@Base+0x4440>
   1adac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1adb0:	muleq	r1, r4, r1
   1adb4:	andeq	r1, r1, ip, lsl #3
   1adb8:	bx	lr
   1adbc:	ldr	r3, [pc, #12]	; 1add0 <lchmod@@Base+0x4484>
   1adc0:	mov	r1, #0
   1adc4:	add	r3, pc, r3
   1adc8:	ldr	r2, [r3]
   1adcc:	b	11a84 <__cxa_atexit@plt>
   1add0:	andeq	r1, r1, r0, asr #7
   1add4:	mov	r2, r1
   1add8:	mov	r1, r0
   1addc:	mov	r0, #3
   1ade0:	b	11bb0 <__xstat64@plt>
   1ade4:	mov	r2, r1
   1ade8:	mov	r1, r0
   1adec:	mov	r0, #3
   1adf0:	b	11928 <__fxstat64@plt>
   1adf4:	mov	r2, r1
   1adf8:	mov	r1, r0
   1adfc:	mov	r0, #3
   1ae00:	b	11bec <__lxstat64@plt>
   1ae04:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae08:	sub	sp, sp, #12
   1ae0c:	str	r3, [sp]
   1ae10:	mov	r3, r2
   1ae14:	mov	r2, r1
   1ae18:	mov	r1, r0
   1ae1c:	mov	r0, #3
   1ae20:	bl	11910 <__fxstatat64@plt>
   1ae24:	add	sp, sp, #12
   1ae28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae2c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae30:	sub	sp, sp, #12
   1ae34:	strd	r2, [sp]
   1ae38:	mov	r2, r1
   1ae3c:	mov	r3, sp
   1ae40:	mov	r1, r0
   1ae44:	mov	r0, #1
   1ae48:	bl	11bbc <__xmknod@plt>
   1ae4c:	add	sp, sp, #12
   1ae50:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001ae54 <.fini>:
   1ae54:	push	{r3, lr}
   1ae58:	pop	{r3, pc}
