
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e74 <.init>:
   10e74:	push	{r3, lr}
   10e78:	bl	11164 <__assert_fail@plt+0x48>
   10e7c:	pop	{r3, pc}

Disassembly of section .plt:

00010e80 <calloc@plt-0x14>:
   10e80:	push	{lr}		; (str lr, [sp, #-4]!)
   10e84:	ldr	lr, [pc, #4]	; 10e90 <calloc@plt-0x4>
   10e88:	add	lr, pc, lr
   10e8c:	ldr	pc, [lr, #8]!
   10e90:	andeq	r7, r1, r0, ror r1

00010e94 <calloc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #368]!	; 0x170

00010ea0 <fputs_unlocked@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #360]!	; 0x168

00010eac <raise@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #352]!	; 0x160

00010eb8 <strcmp@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #344]!	; 0x158

00010ec4 <fflush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #336]!	; 0x150

00010ed0 <free@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #328]!	; 0x148

00010edc <_exit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #320]!	; 0x140

00010ee8 <memcpy@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #312]!	; 0x138

00010ef4 <execvp@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #304]!	; 0x130

00010f00 <__strtoull_internal@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #296]!	; 0x128

00010f0c <mbsinit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #288]!	; 0x120

00010f18 <memcmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #280]!	; 0x118

00010f24 <dcgettext@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #272]!	; 0x110

00010f30 <realloc@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #264]!	; 0x108

00010f3c <textdomain@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #256]!	; 0x100

00010f48 <iswprint@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #248]!	; 0xf8

00010f54 <readlink@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #240]!	; 0xf0

00010f60 <fwrite@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #232]!	; 0xe8

00010f6c <lseek64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #224]!	; 0xe0

00010f78 <__ctype_get_mb_cur_max@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #216]!	; 0xd8

00010f84 <__fpending@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #208]!	; 0xd0

00010f90 <mbrtowc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #200]!	; 0xc8

00010f9c <error@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #192]!	; 0xc0

00010fa8 <__asprintf_chk@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #184]!	; 0xb8

00010fb4 <getenv@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #176]!	; 0xb0

00010fc0 <malloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #168]!	; 0xa8

00010fcc <__libc_start_main@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #160]!	; 0xa0

00010fd8 <__freading@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #152]!	; 0x98

00010fe4 <__ctype_toupper_loc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #144]!	; 0x90

00010ff0 <__gmon_start__@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #136]!	; 0x88

00010ffc <getopt_long@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #128]!	; 0x80

00011008 <__ctype_b_loc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #120]!	; 0x78

00011014 <exit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #112]!	; 0x70

00011020 <strlen@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #104]!	; 0x68

0001102c <strchr@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #96]!	; 0x60

00011038 <__errno_location@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #88]!	; 0x58

00011044 <__cxa_atexit@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #80]!	; 0x50

00011050 <memset@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #72]!	; 0x48

0001105c <__printf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #64]!	; 0x40

00011068 <fileno@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #56]!	; 0x38

00011074 <__fprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #48]!	; 0x30

00011080 <access@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #40]!	; 0x28

0001108c <fclose@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #32]!

00011098 <fseeko64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #24]!

000110a4 <strtok@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #16]!

000110b0 <setlocale@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #8]!

000110bc <putenv@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #0]!

000110c8 <strrchr@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4088]!	; 0xff8

000110d4 <nl_langinfo@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4080]!	; 0xff0

000110e0 <bindtextdomain@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110ec <__xstat64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110f8 <strncmp@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4056]!	; 0xfd8

00011104 <abort@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011110 <__mempcpy_chk@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4040]!	; 0xfc8

0001111c <__assert_fail@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4032]!	; 0xfc0

Disassembly of section .text:

00011128 <.text>:
   11128:	mov	fp, #0
   1112c:	mov	lr, #0
   11130:	pop	{r1}		; (ldr r1, [sp], #4)
   11134:	mov	r2, sp
   11138:	push	{r2}		; (str r2, [sp, #-4]!)
   1113c:	push	{r0}		; (str r0, [sp, #-4]!)
   11140:	ldr	ip, [pc, #16]	; 11158 <__assert_fail@plt+0x3c>
   11144:	push	{ip}		; (str ip, [sp, #-4]!)
   11148:	ldr	r0, [pc, #12]	; 1115c <__assert_fail@plt+0x40>
   1114c:	ldr	r3, [pc, #12]	; 11160 <__assert_fail@plt+0x44>
   11150:	bl	10fcc <__libc_start_main@plt>
   11154:	bl	11104 <abort@plt>
   11158:	andeq	r6, r1, ip, asr r2
   1115c:	andeq	r1, r1, r4, lsl #10
   11160:	strdeq	r6, [r1], -ip
   11164:	ldr	r3, [pc, #20]	; 11180 <__assert_fail@plt+0x64>
   11168:	ldr	r2, [pc, #20]	; 11184 <__assert_fail@plt+0x68>
   1116c:	add	r3, pc, r3
   11170:	ldr	r2, [r3, r2]
   11174:	cmp	r2, #0
   11178:	bxeq	lr
   1117c:	b	10ff0 <__gmon_start__@plt>
   11180:	andeq	r6, r1, ip, lsl #29
   11184:	andeq	r0, r0, r8, ror #1
   11188:	ldr	r0, [pc, #24]	; 111a8 <__assert_fail@plt+0x8c>
   1118c:	ldr	r3, [pc, #24]	; 111ac <__assert_fail@plt+0x90>
   11190:	cmp	r3, r0
   11194:	bxeq	lr
   11198:	ldr	r3, [pc, #16]	; 111b0 <__assert_fail@plt+0x94>
   1119c:	cmp	r3, #0
   111a0:	bxeq	lr
   111a4:	bx	r3
   111a8:	andeq	r8, r2, r0, asr #2
   111ac:	andeq	r8, r2, r0, asr #2
   111b0:	andeq	r0, r0, r0
   111b4:	ldr	r0, [pc, #36]	; 111e0 <__assert_fail@plt+0xc4>
   111b8:	ldr	r1, [pc, #36]	; 111e4 <__assert_fail@plt+0xc8>
   111bc:	sub	r1, r1, r0
   111c0:	asr	r1, r1, #2
   111c4:	add	r1, r1, r1, lsr #31
   111c8:	asrs	r1, r1, #1
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0xcc>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r8, r2, r0, asr #2
   111e4:	andeq	r8, r2, r0, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	push	{r4, lr}
   111f0:	ldr	r4, [pc, #24]	; 11210 <__assert_fail@plt+0xf4>
   111f4:	ldrb	r3, [r4]
   111f8:	cmp	r3, #0
   111fc:	popne	{r4, pc}
   11200:	bl	11188 <__assert_fail@plt+0x6c>
   11204:	mov	r3, #1
   11208:	strb	r3, [r4]
   1120c:	pop	{r4, pc}
   11210:	andeq	r8, r2, ip, asr r1
   11214:	b	111b4 <__assert_fail@plt+0x98>
   11218:	push	{fp, lr}
   1121c:	mov	fp, sp
   11220:	sub	sp, sp, #56	; 0x38
   11224:	mov	r4, r0
   11228:	cmp	r0, #0
   1122c:	bne	114c0 <__assert_fail@plt+0x3a4>
   11230:	movw	r1, #25259	; 0x62ab
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10f24 <dcgettext@plt>
   11244:	mov	r1, r0
   11248:	movw	r0, #33168	; 0x8190
   1124c:	movt	r0, #2
   11250:	ldr	r2, [r0]
   11254:	mov	r0, #1
   11258:	bl	1105c <__printf_chk@plt>
   1125c:	movw	r1, #25288	; 0x62c8
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10f24 <dcgettext@plt>
   11270:	movw	r7, #33108	; 0x8154
   11274:	movt	r7, #2
   11278:	ldr	r1, [r7]
   1127c:	bl	10ea0 <fputs_unlocked@plt>
   11280:	movw	r1, #26620	; 0x67fc
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10f24 <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10ea0 <fputs_unlocked@plt>
   1129c:	movw	r1, #25363	; 0x6313
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10f24 <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ea0 <fputs_unlocked@plt>
   112b8:	movw	r1, #25545	; 0x63c9
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f24 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ea0 <fputs_unlocked@plt>
   112d4:	movw	r1, #25590	; 0x63f6
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f24 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ea0 <fputs_unlocked@plt>
   112f0:	movw	r1, #25644	; 0x642c
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f24 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ea0 <fputs_unlocked@plt>
   1130c:	movw	r1, #25753	; 0x6499
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f24 <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ea0 <fputs_unlocked@plt>
   11328:	movw	r1, #25815	; 0x64d7
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f24 <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ea0 <fputs_unlocked@plt>
   11344:	movw	r1, #26127	; 0x660f
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f24 <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ea0 <fputs_unlocked@plt>
   11360:	movw	r0, #27320	; 0x6ab8
   11364:	mov	r2, #48	; 0x30
   11368:	mov	r6, sp
   1136c:	movw	r5, #26394	; 0x671a
   11370:	movt	r0, #1
   11374:	movt	r5, #1
   11378:	add	r1, r0, #32
   1137c:	add	r3, r0, #16
   11380:	vld1.64	{d18-d19}, [r0], r2
   11384:	vld1.64	{d16-d17}, [r1]
   11388:	vld1.64	{d20-d21}, [r3]
   1138c:	add	r1, r6, #32
   11390:	vldr	d22, [r0]
   11394:	add	r0, r6, #16
   11398:	vst1.64	{d16-d17}, [r1]
   1139c:	movw	r1, #26695	; 0x6847
   113a0:	vst1.64	{d20-d21}, [r0]
   113a4:	mov	r0, r6
   113a8:	vst1.64	{d18-d19}, [r0], r2
   113ac:	movt	r1, #1
   113b0:	vstr	d22, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10eb8 <strcmp@plt>
   113bc:	cmp	r0, #0
   113c0:	ldrne	r1, [r6, #8]!
   113c4:	cmpne	r1, #0
   113c8:	bne	113b4 <__assert_fail@plt+0x298>
   113cc:	ldr	r6, [r6, #4]
   113d0:	movw	r1, #26790	; 0x68a6
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f24 <dcgettext@plt>
   113e4:	movw	r2, #26485	; 0x6775
   113e8:	movw	r3, #26813	; 0x68bd
   113ec:	mov	r1, r0
   113f0:	mov	r0, #1
   113f4:	movt	r2, #1
   113f8:	movt	r3, #1
   113fc:	bl	1105c <__printf_chk@plt>
   11400:	cmp	r6, #0
   11404:	mov	r0, #5
   11408:	mov	r1, #0
   1140c:	moveq	r6, r5
   11410:	bl	110b0 <setlocale@plt>
   11414:	cmp	r0, #0
   11418:	beq	11450 <__assert_fail@plt+0x334>
   1141c:	movw	r1, #26853	; 0x68e5
   11420:	mov	r2, #3
   11424:	movt	r1, #1
   11428:	bl	110f8 <strncmp@plt>
   1142c:	cmp	r0, #0
   11430:	beq	11450 <__assert_fail@plt+0x334>
   11434:	movw	r1, #26857	; 0x68e9
   11438:	mov	r0, #0
   1143c:	mov	r2, #5
   11440:	movt	r1, #1
   11444:	bl	10f24 <dcgettext@plt>
   11448:	ldr	r1, [r7]
   1144c:	bl	10ea0 <fputs_unlocked@plt>
   11450:	movw	r1, #26928	; 0x6930
   11454:	mov	r0, #0
   11458:	mov	r2, #5
   1145c:	movt	r1, #1
   11460:	bl	10f24 <dcgettext@plt>
   11464:	movw	r2, #26813	; 0x68bd
   11468:	mov	r1, r0
   1146c:	mov	r0, #1
   11470:	mov	r3, r5
   11474:	movt	r2, #1
   11478:	bl	1105c <__printf_chk@plt>
   1147c:	movw	r1, #26955	; 0x694b
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	10f24 <dcgettext@plt>
   11490:	movw	r3, #27005	; 0x697d
   11494:	mov	r1, r0
   11498:	movw	r0, #26723	; 0x6863
   1149c:	cmp	r6, r5
   114a0:	mov	r2, r6
   114a4:	movt	r0, #1
   114a8:	movt	r3, #1
   114ac:	moveq	r3, r0
   114b0:	mov	r0, #1
   114b4:	bl	1105c <__printf_chk@plt>
   114b8:	mov	r0, r4
   114bc:	bl	11014 <exit@plt>
   114c0:	movw	r0, #33104	; 0x8150
   114c4:	movw	r1, #25220	; 0x6284
   114c8:	mov	r2, #5
   114cc:	movt	r0, #2
   114d0:	movt	r1, #1
   114d4:	ldr	r5, [r0]
   114d8:	mov	r0, #0
   114dc:	bl	10f24 <dcgettext@plt>
   114e0:	mov	r2, r0
   114e4:	movw	r0, #33168	; 0x8190
   114e8:	mov	r1, #1
   114ec:	movt	r0, #2
   114f0:	ldr	r3, [r0]
   114f4:	mov	r0, r5
   114f8:	bl	11074 <__fprintf_chk@plt>
   114fc:	mov	r0, r4
   11500:	bl	11014 <exit@plt>
   11504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11508:	add	fp, sp, #28
   1150c:	sub	sp, sp, #148	; 0x94
   11510:	mov	r5, r0
   11514:	ldr	r0, [r1]
   11518:	str	r1, [sp, #20]
   1151c:	bl	11fe0 <__assert_fail@plt+0xec4>
   11520:	movw	r1, #27005	; 0x697d
   11524:	mov	r0, #6
   11528:	movt	r1, #1
   1152c:	bl	110b0 <setlocale@plt>
   11530:	movw	r4, #26489	; 0x6779
   11534:	movw	r1, #26401	; 0x6721
   11538:	movt	r4, #1
   1153c:	movt	r1, #1
   11540:	mov	r0, r4
   11544:	bl	110e0 <bindtextdomain@plt>
   11548:	mov	r0, r4
   1154c:	bl	10f3c <textdomain@plt>
   11550:	movw	r0, #33020	; 0x80fc
   11554:	mov	r1, #125	; 0x7d
   11558:	movt	r0, #2
   1155c:	str	r1, [r0]
   11560:	movw	r0, #7392	; 0x1ce0
   11564:	movt	r0, #1
   11568:	bl	16260 <__assert_fail@plt+0x5144>
   1156c:	movw	r6, #26425	; 0x6739
   11570:	movw	r7, #27224	; 0x6a58
   11574:	movw	r9, #33112	; 0x8158
   11578:	mov	r8, #0
   1157c:	movt	r6, #1
   11580:	movt	r7, #1
   11584:	movt	r9, #2
   11588:	b	1159c <__assert_fail@plt+0x480>
   1158c:	ldr	r4, [sp, #24]
   11590:	bl	11038 <__errno_location@plt>
   11594:	str	r8, [r0]
   11598:	str	r4, [sl, #4]
   1159c:	ldr	r1, [sp, #20]
   115a0:	mov	r0, r5
   115a4:	mov	r2, r6
   115a8:	mov	r3, r7
   115ac:	str	r8, [sp]
   115b0:	bl	10ffc <getopt_long@plt>
   115b4:	cmp	r0, #100	; 0x64
   115b8:	ble	116b0 <__assert_fail@plt+0x594>
   115bc:	cmp	r0, #101	; 0x65
   115c0:	beq	115d4 <__assert_fail@plt+0x4b8>
   115c4:	cmp	r0, #111	; 0x6f
   115c8:	bne	115dc <__assert_fail@plt+0x4c0>
   115cc:	mov	r1, #1
   115d0:	b	115e8 <__assert_fail@plt+0x4cc>
   115d4:	mov	r1, #2
   115d8:	b	115e8 <__assert_fail@plt+0x4cc>
   115dc:	cmp	r0, #105	; 0x69
   115e0:	bne	11c48 <__assert_fail@plt+0xb2c>
   115e4:	mov	r1, #0
   115e8:	ldr	r4, [r9]
   115ec:	movw	r2, #33120	; 0x8160
   115f0:	add	r1, r1, r1, lsl #1
   115f4:	movt	r2, #2
   115f8:	add	sl, r2, r1, lsl #2
   115fc:	str	r0, [sl, #8]
   11600:	ldrb	r1, [r4]
   11604:	sub	r2, r1, #9
   11608:	cmp	r2, #5
   1160c:	bcs	11628 <__assert_fail@plt+0x50c>
   11610:	add	r4, r4, #1
   11614:	str	r4, [r9]
   11618:	ldrb	r1, [r4]
   1161c:	sub	r2, r1, #9
   11620:	cmp	r2, #5
   11624:	bcc	11610 <__assert_fail@plt+0x4f4>
   11628:	cmp	r1, #32
   1162c:	beq	11610 <__assert_fail@plt+0x4f4>
   11630:	str	r4, [sl, #12]
   11634:	cmp	r0, #105	; 0x69
   11638:	ldrbeq	r0, [r4]
   1163c:	cmpeq	r0, #76	; 0x4c
   11640:	beq	11c3c <__assert_fail@plt+0xb20>
   11644:	movw	r1, #27048	; 0x69a8
   11648:	mov	r0, r4
   1164c:	movt	r1, #1
   11650:	bl	10eb8 <strcmp@plt>
   11654:	cmp	r0, #0
   11658:	beq	1159c <__assert_fail@plt+0x480>
   1165c:	movw	r0, #27032	; 0x6998
   11660:	mov	r1, #0
   11664:	mov	r2, #10
   11668:	add	r3, sp, #24
   1166c:	movt	r0, #1
   11670:	str	r0, [sp]
   11674:	mov	r0, r4
   11678:	bl	14c0c <__assert_fail@plt+0x3af0>
   1167c:	ldr	r1, [sp, #28]
   11680:	cmp	r1, #0
   11684:	mov	r1, r0
   11688:	movwne	r1, #1
   1168c:	cmp	r0, #0
   11690:	movne	r1, r0
   11694:	cmp	r1, #0
   11698:	beq	1158c <__assert_fail@plt+0x470>
   1169c:	cmp	r1, #1
   116a0:	bne	11c50 <__assert_fail@plt+0xb34>
   116a4:	mov	r4, #75	; 0x4b
   116a8:	bl	11038 <__errno_location@plt>
   116ac:	b	11c58 <__assert_fail@plt+0xb3c>
   116b0:	cmn	r0, #1
   116b4:	bne	11bb4 <__assert_fail@plt+0xa98>
   116b8:	movw	r0, #33096	; 0x8148
   116bc:	movw	r6, #33120	; 0x8160
   116c0:	movt	r0, #2
   116c4:	movt	r6, #2
   116c8:	ldr	r7, [r0]
   116cc:	cmp	r7, r5
   116d0:	bge	11c94 <__assert_fail@plt+0xb78>
   116d4:	ldr	r0, [r6, #12]
   116d8:	cmp	r0, #0
   116dc:	beq	11720 <__assert_fail@plt+0x604>
   116e0:	ldr	r4, [r6, #8]
   116e4:	ldrb	r5, [r0]
   116e8:	add	r0, r4, #128	; 0x80
   116ec:	lsr	r0, r0, #7
   116f0:	cmp	r0, #2
   116f4:	bhi	11704 <__assert_fail@plt+0x5e8>
   116f8:	bl	10fe4 <__ctype_toupper_loc@plt>
   116fc:	ldr	r0, [r0]
   11700:	ldr	r4, [r0, r4, lsl #2]
   11704:	cmp	r5, #76	; 0x4c
   11708:	bne	1177c <__assert_fail@plt+0x660>
   1170c:	movw	r2, #27043	; 0x69a3
   11710:	str	r4, [sp]
   11714:	add	r0, sp, #24
   11718:	movt	r2, #1
   1171c:	b	1179c <__assert_fail@plt+0x680>
   11720:	mov	r0, #0
   11724:	ldr	r1, [r6, #24]
   11728:	cmp	r1, #0
   1172c:	bne	117d4 <__assert_fail@plt+0x6b8>
   11730:	ldr	r1, [r6, #36]	; 0x24
   11734:	cmp	r1, #0
   11738:	beq	1186c <__assert_fail@plt+0x750>
   1173c:	ldr	r4, [r6, #32]
   11740:	ldrb	r5, [r1]
   11744:	add	r0, r4, #128	; 0x80
   11748:	lsr	r0, r0, #7
   1174c:	cmp	r0, #2
   11750:	bhi	11760 <__assert_fail@plt+0x644>
   11754:	bl	10fe4 <__ctype_toupper_loc@plt>
   11758:	ldr	r0, [r0]
   1175c:	ldr	r4, [r0, r4, lsl #2]
   11760:	cmp	r5, #76	; 0x4c
   11764:	bne	11880 <__assert_fail@plt+0x764>
   11768:	movw	r2, #27043	; 0x69a3
   1176c:	add	r0, sp, #24
   11770:	str	r4, [sp]
   11774:	movt	r2, #1
   11778:	b	118a0 <__assert_fail@plt+0x784>
   1177c:	ldr	r0, [r6, #4]
   11780:	movw	r2, #27059	; 0x69b3
   11784:	mov	r1, #0
   11788:	str	r4, [sp]
   1178c:	movt	r2, #1
   11790:	str	r1, [sp, #12]
   11794:	str	r0, [sp, #8]
   11798:	add	r0, sp, #24
   1179c:	movw	r3, #27050	; 0x69aa
   117a0:	mov	r1, #1
   117a4:	movt	r3, #1
   117a8:	bl	10fa8 <__asprintf_chk@plt>
   117ac:	cmn	r0, #1
   117b0:	ble	11b78 <__assert_fail@plt+0xa5c>
   117b4:	ldr	r0, [sp, #24]
   117b8:	bl	110bc <putenv@plt>
   117bc:	cmp	r0, #0
   117c0:	bne	11c14 <__assert_fail@plt+0xaf8>
   117c4:	mov	r0, #1
   117c8:	ldr	r1, [r6, #24]
   117cc:	cmp	r1, #0
   117d0:	beq	11730 <__assert_fail@plt+0x614>
   117d4:	ldr	r4, [r6, #20]
   117d8:	ldrb	r5, [r1]
   117dc:	add	r0, r4, #128	; 0x80
   117e0:	lsr	r0, r0, #7
   117e4:	cmp	r0, #2
   117e8:	bhi	117f8 <__assert_fail@plt+0x6dc>
   117ec:	bl	10fe4 <__ctype_toupper_loc@plt>
   117f0:	ldr	r0, [r0]
   117f4:	ldr	r4, [r0, r4, lsl #2]
   117f8:	cmp	r5, #76	; 0x4c
   117fc:	bne	11814 <__assert_fail@plt+0x6f8>
   11800:	movw	r2, #27043	; 0x69a3
   11804:	add	r0, sp, #24
   11808:	str	r4, [sp]
   1180c:	movt	r2, #1
   11810:	b	11834 <__assert_fail@plt+0x718>
   11814:	ldr	r0, [r6, #16]
   11818:	movw	r2, #27059	; 0x69b3
   1181c:	mov	r1, #0
   11820:	str	r4, [sp]
   11824:	str	r1, [sp, #12]
   11828:	movt	r2, #1
   1182c:	str	r0, [sp, #8]
   11830:	add	r0, sp, #24
   11834:	movw	r3, #27050	; 0x69aa
   11838:	mov	r1, #1
   1183c:	movt	r3, #1
   11840:	bl	10fa8 <__asprintf_chk@plt>
   11844:	cmp	r0, #0
   11848:	blt	11b78 <__assert_fail@plt+0xa5c>
   1184c:	ldr	r0, [sp, #24]
   11850:	bl	110bc <putenv@plt>
   11854:	cmp	r0, #0
   11858:	bne	11c14 <__assert_fail@plt+0xaf8>
   1185c:	mov	r0, #1
   11860:	ldr	r1, [r6, #36]	; 0x24
   11864:	cmp	r1, #0
   11868:	bne	1173c <__assert_fail@plt+0x620>
   1186c:	cmp	r0, #0
   11870:	bne	118c8 <__assert_fail@plt+0x7ac>
   11874:	movw	r1, #26529	; 0x67a1
   11878:	movt	r1, #1
   1187c:	b	11c9c <__assert_fail@plt+0xb80>
   11880:	ldr	r0, [r6, #28]
   11884:	movw	r2, #27059	; 0x69b3
   11888:	mov	r1, #0
   1188c:	str	r4, [sp]
   11890:	str	r1, [sp, #12]
   11894:	movt	r2, #1
   11898:	str	r0, [sp, #8]
   1189c:	add	r0, sp, #24
   118a0:	movw	r3, #27050	; 0x69aa
   118a4:	mov	r1, #1
   118a8:	movt	r3, #1
   118ac:	bl	10fa8 <__asprintf_chk@plt>
   118b0:	cmp	r0, #0
   118b4:	blt	11b78 <__assert_fail@plt+0xa5c>
   118b8:	ldr	r0, [sp, #24]
   118bc:	bl	110bc <putenv@plt>
   118c0:	cmp	r0, #0
   118c4:	bne	11c14 <__assert_fail@plt+0xaf8>
   118c8:	movw	r0, #33168	; 0x8190
   118cc:	mov	r1, #47	; 0x2f
   118d0:	movt	r0, #2
   118d4:	ldr	r4, [r0]
   118d8:	mov	r0, r4
   118dc:	bl	1102c <strchr@plt>
   118e0:	cmp	r0, #0
   118e4:	str	r7, [sp, #16]
   118e8:	beq	11900 <__assert_fail@plt+0x7e4>
   118ec:	mov	r0, r4
   118f0:	bl	11dcc <__assert_fail@plt+0xcb0>
   118f4:	mov	r5, r0
   118f8:	str	r0, [r6]
   118fc:	b	11934 <__assert_fail@plt+0x818>
   11900:	movw	r0, #27110	; 0x69e6
   11904:	movt	r0, #1
   11908:	bl	14bd8 <__assert_fail@plt+0x3abc>
   1190c:	cmp	r0, #0
   11910:	beq	11ad0 <__assert_fail@plt+0x9b4>
   11914:	mov	r5, r0
   11918:	bl	11dcc <__assert_fail@plt+0xcb0>
   1191c:	str	r0, [r6]
   11920:	mov	r0, r5
   11924:	bl	11fb8 <__assert_fail@plt+0xe9c>
   11928:	ldr	r5, [r6]
   1192c:	cmp	r5, #0
   11930:	beq	11b48 <__assert_fail@plt+0xa2c>
   11934:	movw	r0, #27130	; 0x69fa
   11938:	movt	r0, #1
   1193c:	bl	10fb4 <getenv@plt>
   11940:	mov	r9, r0
   11944:	movw	r0, #27141	; 0x6a05
   11948:	movt	r0, #1
   1194c:	str	r0, [fp, #-36]	; 0xffffffdc
   11950:	mov	r0, #0
   11954:	str	r5, [fp, #-40]	; 0xffffffd8
   11958:	str	r0, [fp, #-32]	; 0xffffffe0
   1195c:	ldrb	r0, [r5]
   11960:	cmp	r0, #0
   11964:	beq	119e8 <__assert_fail@plt+0x8cc>
   11968:	movw	sl, #27170	; 0x6a22
   1196c:	movw	r7, #27183	; 0x6a2f
   11970:	sub	r0, fp, #40	; 0x28
   11974:	sub	r8, fp, #44	; 0x2c
   11978:	add	r4, sp, #24
   1197c:	add	r6, r0, #4
   11980:	movt	sl, #1
   11984:	movt	r7, #1
   11988:	mov	r0, r8
   1198c:	mov	r1, #1
   11990:	mov	r2, r7
   11994:	mov	r3, r5
   11998:	str	sl, [sp]
   1199c:	bl	10fa8 <__asprintf_chk@plt>
   119a0:	cmn	r0, #1
   119a4:	ble	11b78 <__assert_fail@plt+0xa5c>
   119a8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   119ac:	mov	r0, #3
   119b0:	mov	r2, r4
   119b4:	bl	110ec <__xstat64@plt>
   119b8:	mov	r1, r0
   119bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   119c0:	cmp	r1, #0
   119c4:	beq	119f8 <__assert_fail@plt+0x8dc>
   119c8:	bl	11fb8 <__assert_fail@plt+0xe9c>
   119cc:	ldr	r0, [r6]
   119d0:	cmp	r0, #0
   119d4:	beq	11b7c <__assert_fail@plt+0xa60>
   119d8:	ldr	r5, [r6], #4
   119dc:	ldrb	r0, [r5]
   119e0:	cmp	r0, #0
   119e4:	bne	11988 <__assert_fail@plt+0x86c>
   119e8:	movw	r0, #27170	; 0x6a22
   119ec:	movt	r0, #1
   119f0:	bl	14b54 <__assert_fail@plt+0x3a38>
   119f4:	str	r0, [fp, #-44]	; 0xffffffd4
   119f8:	ldr	r4, [sp, #16]
   119fc:	cmp	r9, #0
   11a00:	beq	11a1c <__assert_fail@plt+0x900>
   11a04:	movw	r2, #27207	; 0x6a47
   11a08:	str	r0, [sp, #4]
   11a0c:	str	r9, [sp]
   11a10:	add	r0, sp, #24
   11a14:	movt	r2, #1
   11a18:	b	11a2c <__assert_fail@plt+0x910>
   11a1c:	movw	r2, #27216	; 0x6a50
   11a20:	str	r0, [sp]
   11a24:	add	r0, sp, #24
   11a28:	movt	r2, #1
   11a2c:	movw	r3, #27130	; 0x69fa
   11a30:	mov	r1, #1
   11a34:	movt	r3, #1
   11a38:	bl	10fa8 <__asprintf_chk@plt>
   11a3c:	movw	r5, #33120	; 0x8160
   11a40:	cmn	r0, #1
   11a44:	movt	r5, #2
   11a48:	ble	11b78 <__assert_fail@plt+0xa5c>
   11a4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11a50:	bl	11fb8 <__assert_fail@plt+0xe9c>
   11a54:	ldr	r0, [sp, #24]
   11a58:	bl	110bc <putenv@plt>
   11a5c:	cmp	r0, #0
   11a60:	bne	11c14 <__assert_fail@plt+0xaf8>
   11a64:	ldr	r0, [sp, #20]
   11a68:	add	r4, r0, r4, lsl #2
   11a6c:	ldr	r0, [r5]
   11a70:	bl	11fb8 <__assert_fail@plt+0xe9c>
   11a74:	ldr	r0, [r4]
   11a78:	mov	r1, r4
   11a7c:	bl	10ef4 <execvp@plt>
   11a80:	bl	11038 <__errno_location@plt>
   11a84:	ldr	r5, [r0]
   11a88:	movw	r1, #26595	; 0x67e3
   11a8c:	mov	r0, #0
   11a90:	mov	r2, #5
   11a94:	movt	r1, #1
   11a98:	bl	10f24 <dcgettext@plt>
   11a9c:	mov	r6, r0
   11aa0:	ldr	r0, [r4]
   11aa4:	bl	13f5c <__assert_fail@plt+0x2e40>
   11aa8:	mov	r3, r0
   11aac:	mov	r0, #0
   11ab0:	mov	r1, r5
   11ab4:	mov	r2, r6
   11ab8:	bl	10f9c <error@plt>
   11abc:	mov	r0, #126	; 0x7e
   11ac0:	cmp	r5, #2
   11ac4:	movweq	r0, #127	; 0x7f
   11ac8:	sub	sp, fp, #28
   11acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ad0:	movw	r0, #27125	; 0x69f5
   11ad4:	movt	r0, #1
   11ad8:	bl	10fb4 <getenv@plt>
   11adc:	cmp	r0, #0
   11ae0:	beq	11b58 <__assert_fail@plt+0xa3c>
   11ae4:	bl	14b54 <__assert_fail@plt+0x3a38>
   11ae8:	movw	r1, #26431	; 0x673f
   11aec:	mov	r5, r0
   11af0:	movt	r1, #1
   11af4:	bl	110a4 <strtok@plt>
   11af8:	cmp	r0, #0
   11afc:	beq	11920 <__assert_fail@plt+0x804>
   11b00:	movw	r8, #26431	; 0x673f
   11b04:	movt	r8, #1
   11b08:	mov	r1, r4
   11b0c:	mov	r2, #0
   11b10:	bl	11ec0 <__assert_fail@plt+0xda4>
   11b14:	mov	r1, #1
   11b18:	mov	r7, r0
   11b1c:	bl	11080 <access@plt>
   11b20:	cmp	r0, #0
   11b24:	beq	11b60 <__assert_fail@plt+0xa44>
   11b28:	mov	r0, r7
   11b2c:	bl	11fb8 <__assert_fail@plt+0xe9c>
   11b30:	mov	r0, #0
   11b34:	mov	r1, r8
   11b38:	bl	110a4 <strtok@plt>
   11b3c:	cmp	r0, #0
   11b40:	bne	11b08 <__assert_fail@plt+0x9ec>
   11b44:	b	11920 <__assert_fail@plt+0x804>
   11b48:	movw	r0, #26570	; 0x67ca
   11b4c:	movt	r0, #1
   11b50:	bl	14b54 <__assert_fail@plt+0x3a38>
   11b54:	b	118f4 <__assert_fail@plt+0x7d8>
   11b58:	mov	r5, #0
   11b5c:	b	11920 <__assert_fail@plt+0x804>
   11b60:	mov	r0, r7
   11b64:	bl	11dcc <__assert_fail@plt+0xcb0>
   11b68:	str	r0, [r6]
   11b6c:	mov	r0, r7
   11b70:	bl	11fb8 <__assert_fail@plt+0xe9c>
   11b74:	b	11920 <__assert_fail@plt+0x804>
   11b78:	bl	14b94 <__assert_fail@plt+0x3a78>
   11b7c:	movw	r1, #27189	; 0x6a35
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	movt	r1, #1
   11b8c:	bl	10f24 <dcgettext@plt>
   11b90:	mov	r4, r0
   11b94:	movw	r0, #27170	; 0x6a22
   11b98:	movt	r0, #1
   11b9c:	bl	13f5c <__assert_fail@plt+0x2e40>
   11ba0:	mov	r3, r0
   11ba4:	mov	r0, #125	; 0x7d
   11ba8:	mov	r1, #0
   11bac:	mov	r2, r4
   11bb0:	bl	10f9c <error@plt>
   11bb4:	cmn	r0, #3
   11bb8:	bne	11c04 <__assert_fail@plt+0xae8>
   11bbc:	movw	r0, #33016	; 0x80f8
   11bc0:	movw	r2, #26499	; 0x6783
   11bc4:	mov	r1, #0
   11bc8:	movt	r0, #2
   11bcc:	movt	r2, #1
   11bd0:	str	r1, [sp, #4]
   11bd4:	movw	r1, #26394	; 0x671a
   11bd8:	ldr	r3, [r0]
   11bdc:	movw	r0, #33108	; 0x8154
   11be0:	str	r2, [sp]
   11be4:	movw	r2, #26485	; 0x6775
   11be8:	movt	r1, #1
   11bec:	movt	r0, #2
   11bf0:	movt	r2, #1
   11bf4:	ldr	r0, [r0]
   11bf8:	bl	14400 <__assert_fail@plt+0x32e4>
   11bfc:	mov	r0, #0
   11c00:	bl	11014 <exit@plt>
   11c04:	cmn	r0, #2
   11c08:	bne	11c48 <__assert_fail@plt+0xb2c>
   11c0c:	mov	r0, #0
   11c10:	bl	11218 <__assert_fail@plt+0xfc>
   11c14:	bl	11038 <__errno_location@plt>
   11c18:	ldr	r4, [r0]
   11c1c:	movw	r1, #27069	; 0x69bd
   11c20:	mov	r0, #0
   11c24:	mov	r2, #5
   11c28:	movt	r1, #1
   11c2c:	bl	10f24 <dcgettext@plt>
   11c30:	mov	r5, r0
   11c34:	ldr	r0, [sp, #24]
   11c38:	b	11c7c <__assert_fail@plt+0xb60>
   11c3c:	movw	r1, #26433	; 0x6741
   11c40:	movt	r1, #1
   11c44:	b	11c9c <__assert_fail@plt+0xb80>
   11c48:	mov	r0, #125	; 0x7d
   11c4c:	bl	11218 <__assert_fail@plt+0xfc>
   11c50:	bl	11038 <__errno_location@plt>
   11c54:	ldr	r4, [r0]
   11c58:	str	r4, [r0]
   11c5c:	movw	r1, #26469	; 0x6765
   11c60:	mov	r2, #5
   11c64:	ldr	r4, [r0]
   11c68:	movt	r1, #1
   11c6c:	mov	r0, #0
   11c70:	bl	10f24 <dcgettext@plt>
   11c74:	mov	r5, r0
   11c78:	ldr	r0, [r9]
   11c7c:	bl	13f5c <__assert_fail@plt+0x2e40>
   11c80:	mov	r3, r0
   11c84:	mov	r0, #125	; 0x7d
   11c88:	mov	r1, r4
   11c8c:	mov	r2, r5
   11c90:	bl	10f9c <error@plt>
   11c94:	movw	r1, #26513	; 0x6791
   11c98:	movt	r1, #1
   11c9c:	mov	r0, #0
   11ca0:	mov	r2, #5
   11ca4:	bl	10f24 <dcgettext@plt>
   11ca8:	mov	r2, r0
   11cac:	mov	r0, #0
   11cb0:	mov	r1, #0
   11cb4:	bl	10f9c <error@plt>
   11cb8:	mov	r0, #125	; 0x7d
   11cbc:	bl	11218 <__assert_fail@plt+0xfc>
   11cc0:	movw	r1, #33160	; 0x8188
   11cc4:	movt	r1, #2
   11cc8:	str	r0, [r1, #4]
   11ccc:	bx	lr
   11cd0:	movw	r1, #33160	; 0x8188
   11cd4:	movt	r1, #2
   11cd8:	strb	r0, [r1]
   11cdc:	bx	lr
   11ce0:	push	{r4, r5, r6, sl, fp, lr}
   11ce4:	add	fp, sp, #16
   11ce8:	sub	sp, sp, #8
   11cec:	movw	r0, #33108	; 0x8154
   11cf0:	movt	r0, #2
   11cf4:	ldr	r0, [r0]
   11cf8:	bl	15c80 <__assert_fail@plt+0x4b64>
   11cfc:	cmp	r0, #0
   11d00:	beq	11d28 <__assert_fail@plt+0xc0c>
   11d04:	movw	r5, #33160	; 0x8188
   11d08:	movt	r5, #2
   11d0c:	ldrb	r0, [r5]
   11d10:	cmp	r0, #0
   11d14:	beq	11d54 <__assert_fail@plt+0xc38>
   11d18:	bl	11038 <__errno_location@plt>
   11d1c:	ldr	r0, [r0]
   11d20:	cmp	r0, #32
   11d24:	bne	11d54 <__assert_fail@plt+0xc38>
   11d28:	movw	r0, #33104	; 0x8150
   11d2c:	movt	r0, #2
   11d30:	ldr	r0, [r0]
   11d34:	bl	15c80 <__assert_fail@plt+0x4b64>
   11d38:	cmp	r0, #0
   11d3c:	subeq	sp, fp, #16
   11d40:	popeq	{r4, r5, r6, sl, fp, pc}
   11d44:	movw	r0, #33020	; 0x80fc
   11d48:	movt	r0, #2
   11d4c:	ldr	r0, [r0]
   11d50:	bl	10edc <_exit@plt>
   11d54:	movw	r1, #27391	; 0x6aff
   11d58:	mov	r0, #0
   11d5c:	mov	r2, #5
   11d60:	movt	r1, #1
   11d64:	bl	10f24 <dcgettext@plt>
   11d68:	ldr	r6, [r5, #4]
   11d6c:	mov	r4, r0
   11d70:	bl	11038 <__errno_location@plt>
   11d74:	ldr	r5, [r0]
   11d78:	cmp	r6, #0
   11d7c:	bne	11d98 <__assert_fail@plt+0xc7c>
   11d80:	movw	r2, #27407	; 0x6b0f
   11d84:	mov	r0, #0
   11d88:	mov	r1, r5
   11d8c:	mov	r3, r4
   11d90:	movt	r2, #1
   11d94:	b	11db8 <__assert_fail@plt+0xc9c>
   11d98:	mov	r0, r6
   11d9c:	bl	13bd4 <__assert_fail@plt+0x2ab8>
   11da0:	movw	r2, #27403	; 0x6b0b
   11da4:	mov	r3, r0
   11da8:	str	r4, [sp]
   11dac:	mov	r0, #0
   11db0:	mov	r1, r5
   11db4:	movt	r2, #1
   11db8:	bl	10f9c <error@plt>
   11dbc:	movw	r0, #33020	; 0x80fc
   11dc0:	movt	r0, #2
   11dc4:	ldr	r0, [r0]
   11dc8:	bl	10edc <_exit@plt>
   11dcc:	push	{fp, lr}
   11dd0:	mov	fp, sp
   11dd4:	bl	11e2c <__assert_fail@plt+0xd10>
   11dd8:	cmp	r0, #0
   11ddc:	popne	{fp, pc}
   11de0:	bl	14b94 <__assert_fail@plt+0x3a78>
   11de4:	push	{r4, r5, r6, sl, fp, lr}
   11de8:	add	fp, sp, #16
   11dec:	mov	r5, r0
   11df0:	mov	r4, r0
   11df4:	ldrb	r6, [r5], #-1
   11df8:	bl	159f8 <__assert_fail@plt+0x48dc>
   11dfc:	sub	r2, r0, r4
   11e00:	sub	r0, r6, #47	; 0x2f
   11e04:	clz	r0, r0
   11e08:	lsr	r1, r0, #5
   11e0c:	mov	r0, r2
   11e10:	cmp	r2, r1
   11e14:	popls	{r4, r5, r6, sl, fp, pc}
   11e18:	ldrb	r3, [r5, r0]
   11e1c:	sub	r2, r0, #1
   11e20:	cmp	r3, #47	; 0x2f
   11e24:	beq	11e0c <__assert_fail@plt+0xcf0>
   11e28:	pop	{r4, r5, r6, sl, fp, pc}
   11e2c:	push	{r4, r5, r6, sl, fp, lr}
   11e30:	add	fp, sp, #16
   11e34:	mov	r6, r0
   11e38:	mov	r4, r0
   11e3c:	ldrb	r5, [r6], #-1
   11e40:	bl	159f8 <__assert_fail@plt+0x48dc>
   11e44:	sub	r1, r0, r4
   11e48:	sub	r0, r5, #47	; 0x2f
   11e4c:	clz	r0, r0
   11e50:	lsr	r0, r0, #5
   11e54:	mov	r5, r1
   11e58:	cmp	r1, r0
   11e5c:	bls	11e70 <__assert_fail@plt+0xd54>
   11e60:	ldrb	r2, [r6, r5]
   11e64:	sub	r1, r5, #1
   11e68:	cmp	r2, #47	; 0x2f
   11e6c:	beq	11e54 <__assert_fail@plt+0xd38>
   11e70:	cmp	r5, #0
   11e74:	mov	r0, r5
   11e78:	addeq	r0, r0, #1
   11e7c:	add	r0, r0, #1
   11e80:	bl	15914 <__assert_fail@plt+0x47f8>
   11e84:	mov	r6, r0
   11e88:	cmp	r0, #0
   11e8c:	beq	11eb8 <__assert_fail@plt+0xd9c>
   11e90:	mov	r0, r6
   11e94:	mov	r1, r4
   11e98:	mov	r2, r5
   11e9c:	bl	10ee8 <memcpy@plt>
   11ea0:	cmp	r5, #0
   11ea4:	moveq	r0, #46	; 0x2e
   11ea8:	moveq	r5, #1
   11eac:	strbeq	r0, [r6]
   11eb0:	mov	r0, #0
   11eb4:	strb	r0, [r6, r5]
   11eb8:	mov	r0, r6
   11ebc:	pop	{r4, r5, r6, sl, fp, pc}
   11ec0:	push	{fp, lr}
   11ec4:	mov	fp, sp
   11ec8:	bl	11ed8 <__assert_fail@plt+0xdbc>
   11ecc:	cmp	r0, #0
   11ed0:	popne	{fp, pc}
   11ed4:	bl	14b94 <__assert_fail@plt+0x3a78>
   11ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11edc:	add	fp, sp, #28
   11ee0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ee4:	mov	sl, r1
   11ee8:	mov	r7, r0
   11eec:	bl	159f8 <__assert_fail@plt+0x48dc>
   11ef0:	sub	r4, r0, r7
   11ef4:	bl	15a58 <__assert_fail@plt+0x493c>
   11ef8:	mov	r6, r0
   11efc:	add	r5, r4, r0
   11f00:	mov	r0, sl
   11f04:	bl	11020 <strlen@plt>
   11f08:	mov	r9, r0
   11f0c:	cmp	r6, #0
   11f10:	beq	11f38 <__assert_fail@plt+0xe1c>
   11f14:	add	r0, r7, r5
   11f18:	mov	r4, #0
   11f1c:	ldrb	r0, [r0, #-1]
   11f20:	cmp	r0, #47	; 0x2f
   11f24:	beq	11f48 <__assert_fail@plt+0xe2c>
   11f28:	ldrb	r0, [sl]
   11f2c:	subs	r4, r0, #47	; 0x2f
   11f30:	movwne	r4, #47	; 0x2f
   11f34:	b	11f48 <__assert_fail@plt+0xe2c>
   11f38:	ldrb	r0, [sl]
   11f3c:	mov	r4, #0
   11f40:	cmp	r0, #47	; 0x2f
   11f44:	movweq	r4, #46	; 0x2e
   11f48:	uxtb	r8, r4
   11f4c:	add	r0, r9, r5
   11f50:	cmp	r8, #0
   11f54:	movwne	r8, #1
   11f58:	add	r0, r0, r8
   11f5c:	add	r0, r0, #1
   11f60:	bl	15914 <__assert_fail@plt+0x47f8>
   11f64:	mov	r6, r0
   11f68:	cmp	r0, #0
   11f6c:	beq	11fac <__assert_fail@plt+0xe90>
   11f70:	mov	r0, r6
   11f74:	mov	r1, r7
   11f78:	mov	r2, r5
   11f7c:	mvn	r3, #0
   11f80:	bl	11110 <__mempcpy_chk@plt>
   11f84:	ldr	r1, [sp]
   11f88:	strb	r4, [r0], r8
   11f8c:	mov	r2, r9
   11f90:	mvn	r3, #0
   11f94:	cmp	r1, #0
   11f98:	strne	r0, [r1]
   11f9c:	mov	r1, sl
   11fa0:	bl	11110 <__mempcpy_chk@plt>
   11fa4:	mov	r1, #0
   11fa8:	strb	r1, [r0]
   11fac:	mov	r0, r6
   11fb0:	sub	sp, fp, #28
   11fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fb8:	push	{r4, r5, r6, sl, fp, lr}
   11fbc:	add	fp, sp, #16
   11fc0:	mov	r4, r0
   11fc4:	bl	11038 <__errno_location@plt>
   11fc8:	ldr	r6, [r0]
   11fcc:	mov	r5, r0
   11fd0:	mov	r0, r4
   11fd4:	bl	10ed0 <free@plt>
   11fd8:	str	r6, [r5]
   11fdc:	pop	{r4, r5, r6, sl, fp, pc}
   11fe0:	push	{r4, r5, fp, lr}
   11fe4:	add	fp, sp, #8
   11fe8:	cmp	r0, #0
   11fec:	beq	12080 <__assert_fail@plt+0xf64>
   11ff0:	mov	r1, #47	; 0x2f
   11ff4:	mov	r4, r0
   11ff8:	bl	110c8 <strrchr@plt>
   11ffc:	cmp	r0, #0
   12000:	mov	r5, r4
   12004:	addne	r5, r0, #1
   12008:	sub	r0, r5, r4
   1200c:	cmp	r0, #7
   12010:	blt	12064 <__assert_fail@plt+0xf48>
   12014:	movw	r1, #27466	; 0x6b4a
   12018:	sub	r0, r5, #7
   1201c:	mov	r2, #7
   12020:	movt	r1, #1
   12024:	bl	110f8 <strncmp@plt>
   12028:	cmp	r0, #0
   1202c:	bne	12064 <__assert_fail@plt+0xf48>
   12030:	movw	r1, #27474	; 0x6b52
   12034:	mov	r0, r5
   12038:	mov	r2, #3
   1203c:	movt	r1, #1
   12040:	bl	110f8 <strncmp@plt>
   12044:	cmp	r0, #0
   12048:	beq	12054 <__assert_fail@plt+0xf38>
   1204c:	mov	r4, r5
   12050:	b	12064 <__assert_fail@plt+0xf48>
   12054:	movw	r0, #33088	; 0x8140
   12058:	add	r4, r5, #3
   1205c:	movt	r0, #2
   12060:	str	r4, [r0]
   12064:	movw	r0, #33092	; 0x8144
   12068:	movt	r0, #2
   1206c:	str	r4, [r0]
   12070:	movw	r0, #33168	; 0x8190
   12074:	movt	r0, #2
   12078:	str	r4, [r0]
   1207c:	pop	{r4, r5, fp, pc}
   12080:	movw	r0, #33104	; 0x8150
   12084:	mov	r1, #55	; 0x37
   12088:	mov	r2, #1
   1208c:	movt	r0, #2
   12090:	ldr	r3, [r0]
   12094:	movw	r0, #27410	; 0x6b12
   12098:	movt	r0, #1
   1209c:	bl	10f60 <fwrite@plt>
   120a0:	bl	11104 <abort@plt>
   120a4:	push	{r4, r5, r6, sl, fp, lr}
   120a8:	add	fp, sp, #16
   120ac:	mov	r4, r0
   120b0:	movw	r0, #33176	; 0x8198
   120b4:	movt	r0, #2
   120b8:	cmp	r4, #0
   120bc:	moveq	r4, r0
   120c0:	bl	11038 <__errno_location@plt>
   120c4:	ldr	r6, [r0]
   120c8:	mov	r5, r0
   120cc:	mov	r0, r4
   120d0:	mov	r1, #48	; 0x30
   120d4:	bl	14a94 <__assert_fail@plt+0x3978>
   120d8:	str	r6, [r5]
   120dc:	pop	{r4, r5, r6, sl, fp, pc}
   120e0:	movw	r1, #33176	; 0x8198
   120e4:	cmp	r0, #0
   120e8:	movt	r1, #2
   120ec:	movne	r1, r0
   120f0:	ldr	r0, [r1]
   120f4:	bx	lr
   120f8:	movw	r2, #33176	; 0x8198
   120fc:	cmp	r0, #0
   12100:	movt	r2, #2
   12104:	movne	r2, r0
   12108:	str	r1, [r2]
   1210c:	bx	lr
   12110:	movw	r3, #33176	; 0x8198
   12114:	cmp	r0, #0
   12118:	movt	r3, #2
   1211c:	movne	r3, r0
   12120:	ubfx	r0, r1, #5, #3
   12124:	and	r1, r1, #31
   12128:	add	r0, r3, r0, lsl #2
   1212c:	ldr	r3, [r0, #8]
   12130:	eor	r2, r2, r3, lsr r1
   12134:	and	r2, r2, #1
   12138:	eor	r2, r3, r2, lsl r1
   1213c:	str	r2, [r0, #8]
   12140:	mov	r0, #1
   12144:	and	r0, r0, r3, lsr r1
   12148:	bx	lr
   1214c:	movw	r2, #33176	; 0x8198
   12150:	cmp	r0, #0
   12154:	movt	r2, #2
   12158:	movne	r2, r0
   1215c:	ldr	r0, [r2, #4]
   12160:	str	r1, [r2, #4]
   12164:	bx	lr
   12168:	movw	r3, #33176	; 0x8198
   1216c:	cmp	r0, #0
   12170:	movt	r3, #2
   12174:	movne	r3, r0
   12178:	cmp	r1, #0
   1217c:	mov	r0, #10
   12180:	cmpne	r2, #0
   12184:	str	r0, [r3]
   12188:	bne	12198 <__assert_fail@plt+0x107c>
   1218c:	push	{fp, lr}
   12190:	mov	fp, sp
   12194:	bl	11104 <abort@plt>
   12198:	str	r1, [r3, #40]	; 0x28
   1219c:	str	r2, [r3, #44]	; 0x2c
   121a0:	bx	lr
   121a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121a8:	add	fp, sp, #28
   121ac:	sub	sp, sp, #20
   121b0:	mov	r7, r0
   121b4:	ldr	r0, [fp, #8]
   121b8:	movw	r5, #33176	; 0x8198
   121bc:	mov	r8, r3
   121c0:	mov	r9, r2
   121c4:	mov	sl, r1
   121c8:	movt	r5, #2
   121cc:	cmp	r0, #0
   121d0:	movne	r5, r0
   121d4:	bl	11038 <__errno_location@plt>
   121d8:	mov	r4, r0
   121dc:	ldm	r5, {r0, r1}
   121e0:	ldr	r2, [r5, #40]	; 0x28
   121e4:	ldr	r3, [r5, #44]	; 0x2c
   121e8:	add	r5, r5, #8
   121ec:	ldr	r6, [r4]
   121f0:	stm	sp, {r0, r1, r5}
   121f4:	str	r2, [sp, #12]
   121f8:	str	r3, [sp, #16]
   121fc:	mov	r0, r7
   12200:	mov	r1, sl
   12204:	mov	r2, r9
   12208:	mov	r3, r8
   1220c:	bl	1221c <__assert_fail@plt+0x1100>
   12210:	str	r6, [r4]
   12214:	sub	sp, fp, #28
   12218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1221c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12220:	add	fp, sp, #28
   12224:	sub	sp, sp, #156	; 0x9c
   12228:	str	r0, [sp, #76]	; 0x4c
   1222c:	ldr	r0, [fp, #12]
   12230:	mov	r6, r1
   12234:	str	r3, [sp, #84]	; 0x54
   12238:	str	r2, [fp, #-84]	; 0xffffffac
   1223c:	and	r1, r0, #4
   12240:	str	r1, [sp, #24]
   12244:	and	r1, r0, #1
   12248:	str	r1, [sp, #28]
   1224c:	ubfx	r8, r0, #1, #1
   12250:	bl	10f78 <__ctype_get_mb_cur_max@plt>
   12254:	str	r0, [sp, #32]
   12258:	ldr	r0, [fp, #24]
   1225c:	ldr	r7, [fp, #8]
   12260:	mov	r1, #0
   12264:	mov	r2, #0
   12268:	mov	r4, #1
   1226c:	str	r1, [sp, #52]	; 0x34
   12270:	str	r0, [sp, #72]	; 0x48
   12274:	ldr	r0, [fp, #20]
   12278:	str	r0, [sp, #68]	; 0x44
   1227c:	mov	r0, #0
   12280:	str	r0, [sp, #48]	; 0x30
   12284:	mov	r0, #0
   12288:	str	r0, [sp, #92]	; 0x5c
   1228c:	mov	r0, #0
   12290:	str	r0, [fp, #-76]	; 0xffffffb4
   12294:	mov	r0, #0
   12298:	cmp	r7, #10
   1229c:	bhi	13584 <__assert_fail@plt+0x2468>
   122a0:	add	r1, pc, #28
   122a4:	mov	sl, r6
   122a8:	ldr	r6, [sp, #76]	; 0x4c
   122ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   122b0:	ldr	lr, [sp, #84]	; 0x54
   122b4:	mov	r9, #0
   122b8:	mov	r3, #1
   122bc:	mov	r5, #0
   122c0:	ldr	pc, [r1, r7, lsl #2]
   122c4:	muleq	r1, r4, r3
   122c8:	ldrdeq	r2, [r1], -r0
   122cc:	andeq	r2, r1, r4, lsr #7
   122d0:	andeq	r2, r1, ip, lsl #7
   122d4:	andeq	r2, r1, r4, asr #7
   122d8:	strdeq	r2, [r1], -r8
   122dc:			; <UNDEFINED> instruction: 0x000123b4
   122e0:	andeq	r2, r1, r4, lsl #12
   122e4:	strdeq	r2, [r1], -r0
   122e8:	strdeq	r2, [r1], -r0
   122ec:	muleq	r1, r8, r5
   122f0:	mov	r9, r4
   122f4:	movw	r4, #27556	; 0x6ba4
   122f8:	mov	r5, r8
   122fc:	mov	r8, r2
   12300:	mov	r0, #0
   12304:	mov	r2, #5
   12308:	movt	r4, #1
   1230c:	mov	r1, r4
   12310:	bl	10f24 <dcgettext@plt>
   12314:	cmp	r0, r4
   12318:	str	r0, [sp, #68]	; 0x44
   1231c:	bne	124ac <__assert_fail@plt+0x1390>
   12320:	bl	15eac <__assert_fail@plt+0x4d90>
   12324:	ldrb	r1, [r0]
   12328:	and	r1, r1, #223	; 0xdf
   1232c:	cmp	r1, #71	; 0x47
   12330:	beq	12478 <__assert_fail@plt+0x135c>
   12334:	cmp	r1, #85	; 0x55
   12338:	bne	12490 <__assert_fail@plt+0x1374>
   1233c:	ldrb	r1, [r0, #1]
   12340:	and	r1, r1, #223	; 0xdf
   12344:	cmp	r1, #84	; 0x54
   12348:	bne	12490 <__assert_fail@plt+0x1374>
   1234c:	ldrb	r1, [r0, #2]
   12350:	and	r1, r1, #223	; 0xdf
   12354:	cmp	r1, #70	; 0x46
   12358:	bne	12490 <__assert_fail@plt+0x1374>
   1235c:	ldrb	r1, [r0, #3]
   12360:	cmp	r1, #45	; 0x2d
   12364:	ldrbeq	r1, [r0, #4]
   12368:	cmpeq	r1, #56	; 0x38
   1236c:	bne	12490 <__assert_fail@plt+0x1374>
   12370:	ldrb	r0, [r0, #5]
   12374:	cmp	r0, #0
   12378:	movw	r0, #27560	; 0x6ba8
   1237c:	movt	r0, #1
   12380:	str	r0, [sp, #68]	; 0x44
   12384:	bne	12490 <__assert_fail@plt+0x1374>
   12388:	b	124ac <__assert_fail@plt+0x1390>
   1238c:	mov	r0, #1
   12390:	b	123d0 <__assert_fail@plt+0x12b4>
   12394:	mov	r7, #0
   12398:	mov	r9, #0
   1239c:	mov	r3, r0
   123a0:	b	12470 <__assert_fail@plt+0x1354>
   123a4:	tst	r8, #1
   123a8:	bne	123d0 <__assert_fail@plt+0x12b4>
   123ac:	mov	r3, r0
   123b0:	b	12428 <__assert_fail@plt+0x130c>
   123b4:	mov	r0, #1
   123b8:	mov	r9, #0
   123bc:	mov	r7, #5
   123c0:	b	1240c <__assert_fail@plt+0x12f0>
   123c4:	mov	r3, #1
   123c8:	tst	r8, #1
   123cc:	beq	12428 <__assert_fail@plt+0x130c>
   123d0:	mov	r1, #1
   123d4:	mov	r9, #0
   123d8:	mov	r7, #2
   123dc:	mov	r3, r0
   123e0:	mov	r5, #1
   123e4:	str	r1, [fp, #-76]	; 0xffffffb4
   123e8:	movw	r1, #27558	; 0x6ba6
   123ec:	movt	r1, #1
   123f0:	str	r1, [sp, #92]	; 0x5c
   123f4:	b	12604 <__assert_fail@plt+0x14e8>
   123f8:	mov	r7, #5
   123fc:	tst	r8, #1
   12400:	beq	12448 <__assert_fail@plt+0x132c>
   12404:	mov	r0, #1
   12408:	mov	r9, #0
   1240c:	str	r0, [fp, #-76]	; 0xffffffb4
   12410:	movw	r0, #27554	; 0x6ba2
   12414:	mov	r3, #1
   12418:	mov	r5, #1
   1241c:	movt	r0, #1
   12420:	str	r0, [sp, #92]	; 0x5c
   12424:	b	12604 <__assert_fail@plt+0x14e8>
   12428:	cmp	sl, #0
   1242c:	mov	r9, #1
   12430:	mov	r7, #2
   12434:	movne	r0, #39	; 0x27
   12438:	strbne	r0, [r6]
   1243c:	movw	r0, #27558	; 0x6ba6
   12440:	movt	r0, #1
   12444:	b	12464 <__assert_fail@plt+0x1348>
   12448:	cmp	sl, #0
   1244c:	mov	r9, #1
   12450:	mov	r3, #1
   12454:	movne	r0, #34	; 0x22
   12458:	strbne	r0, [r6]
   1245c:	movw	r0, #27554	; 0x6ba2
   12460:	movt	r0, #1
   12464:	str	r0, [sp, #92]	; 0x5c
   12468:	mov	r0, #1
   1246c:	str	r0, [fp, #-76]	; 0xffffffb4
   12470:	mov	r5, #0
   12474:	b	12604 <__assert_fail@plt+0x14e8>
   12478:	ldrb	r1, [r0, #1]
   1247c:	and	r1, r1, #223	; 0xdf
   12480:	cmp	r1, #66	; 0x42
   12484:	ldrbeq	r1, [r0, #2]
   12488:	cmpeq	r1, #49	; 0x31
   1248c:	beq	133ac <__assert_fail@plt+0x2290>
   12490:	movw	r0, #27558	; 0x6ba6
   12494:	movw	r1, #27554	; 0x6ba2
   12498:	cmp	r7, #9
   1249c:	movt	r0, #1
   124a0:	movt	r1, #1
   124a4:	moveq	r0, r1
   124a8:	str	r0, [sp, #68]	; 0x44
   124ac:	movw	r4, #27558	; 0x6ba6
   124b0:	mov	r0, #0
   124b4:	mov	r2, #5
   124b8:	movt	r4, #1
   124bc:	mov	r1, r4
   124c0:	bl	10f24 <dcgettext@plt>
   124c4:	cmp	r0, r4
   124c8:	str	r0, [sp, #72]	; 0x48
   124cc:	beq	124dc <__assert_fail@plt+0x13c0>
   124d0:	mov	r4, r9
   124d4:	mov	r2, r8
   124d8:	b	12594 <__assert_fail@plt+0x1478>
   124dc:	bl	15eac <__assert_fail@plt+0x4d90>
   124e0:	ldrb	r1, [r0]
   124e4:	mov	r4, r9
   124e8:	and	r1, r1, #223	; 0xdf
   124ec:	cmp	r1, #71	; 0x47
   124f0:	beq	1254c <__assert_fail@plt+0x1430>
   124f4:	cmp	r1, #85	; 0x55
   124f8:	mov	r2, r8
   124fc:	bne	12574 <__assert_fail@plt+0x1458>
   12500:	ldrb	r1, [r0, #1]
   12504:	and	r1, r1, #223	; 0xdf
   12508:	cmp	r1, #84	; 0x54
   1250c:	bne	12574 <__assert_fail@plt+0x1458>
   12510:	ldrb	r1, [r0, #2]
   12514:	and	r1, r1, #223	; 0xdf
   12518:	cmp	r1, #70	; 0x46
   1251c:	ldrbeq	r1, [r0, #3]
   12520:	cmpeq	r1, #45	; 0x2d
   12524:	bne	12574 <__assert_fail@plt+0x1458>
   12528:	ldrb	r1, [r0, #4]
   1252c:	cmp	r1, #56	; 0x38
   12530:	ldrbeq	r0, [r0, #5]
   12534:	cmpeq	r0, #0
   12538:	bne	12574 <__assert_fail@plt+0x1458>
   1253c:	movw	r0, #27564	; 0x6bac
   12540:	movt	r0, #1
   12544:	str	r0, [sp, #72]	; 0x48
   12548:	b	12594 <__assert_fail@plt+0x1478>
   1254c:	ldrb	r1, [r0, #1]
   12550:	mov	r2, r8
   12554:	and	r1, r1, #223	; 0xdf
   12558:	cmp	r1, #66	; 0x42
   1255c:	bne	12574 <__assert_fail@plt+0x1458>
   12560:	ldrb	r1, [r0, #2]
   12564:	cmp	r1, #49	; 0x31
   12568:	ldrbeq	r1, [r0, #3]
   1256c:	cmpeq	r1, #56	; 0x38
   12570:	beq	133f0 <__assert_fail@plt+0x22d4>
   12574:	movw	r0, #27558	; 0x6ba6
   12578:	cmp	r7, #9
   1257c:	movt	r0, #1
   12580:	mov	r1, r0
   12584:	movw	r0, #27554	; 0x6ba2
   12588:	movt	r0, #1
   1258c:	moveq	r1, r0
   12590:	str	r1, [sp, #72]	; 0x48
   12594:	mov	r8, r5
   12598:	mov	r9, #0
   1259c:	tst	r8, #1
   125a0:	mov	r5, r8
   125a4:	str	r2, [fp, #-48]	; 0xffffffd0
   125a8:	bne	125e0 <__assert_fail@plt+0x14c4>
   125ac:	ldr	r0, [sp, #68]	; 0x44
   125b0:	ldrb	r0, [r0]
   125b4:	cmp	r0, #0
   125b8:	beq	125e0 <__assert_fail@plt+0x14c4>
   125bc:	ldr	r1, [sp, #68]	; 0x44
   125c0:	mov	r9, #0
   125c4:	add	r1, r1, #1
   125c8:	cmp	r9, sl
   125cc:	strbcc	r0, [r6, r9]
   125d0:	ldrb	r0, [r1, r9]
   125d4:	add	r9, r9, #1
   125d8:	cmp	r0, #0
   125dc:	bne	125c8 <__assert_fail@plt+0x14ac>
   125e0:	ldr	r8, [sp, #72]	; 0x48
   125e4:	mov	r0, r8
   125e8:	bl	11020 <strlen@plt>
   125ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   125f0:	ldr	lr, [sp, #84]	; 0x54
   125f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   125f8:	str	r0, [fp, #-76]	; 0xffffffb4
   125fc:	str	r8, [sp, #92]	; 0x5c
   12600:	mov	r3, #1
   12604:	ldr	r0, [fp, #16]
   12608:	str	r7, [fp, #-64]	; 0xffffffc0
   1260c:	str	r5, [fp, #-72]	; 0xffffffb8
   12610:	str	r3, [sp, #80]	; 0x50
   12614:	cmp	r0, #0
   12618:	movwne	r0, #1
   1261c:	and	r0, r0, r5
   12620:	str	r0, [fp, #-88]	; 0xffffffa8
   12624:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12628:	cmp	r0, #0
   1262c:	movwne	r0, #1
   12630:	subs	r7, r7, #2
   12634:	and	r1, r0, r5
   12638:	str	r7, [fp, #-80]	; 0xffffffb0
   1263c:	and	r1, r3, r1
   12640:	str	r1, [sp, #40]	; 0x28
   12644:	clz	r1, r7
   12648:	lsr	r1, r1, #5
   1264c:	and	r1, r1, r5
   12650:	eor	r5, r5, #1
   12654:	str	r1, [sp, #36]	; 0x24
   12658:	mov	r1, r7
   1265c:	str	r5, [sp, #88]	; 0x58
   12660:	mov	r7, #0
   12664:	movwne	r1, #1
   12668:	orr	r5, r1, r5
   1266c:	and	r1, r1, r3
   12670:	and	r0, r0, r1
   12674:	str	r5, [sp, #60]	; 0x3c
   12678:	str	r1, [fp, #-68]	; 0xffffffbc
   1267c:	str	r0, [fp, #-60]	; 0xffffffc4
   12680:	eor	r0, r3, #1
   12684:	str	r0, [sp, #44]	; 0x2c
   12688:	cmn	lr, #1
   1268c:	beq	1269c <__assert_fail@plt+0x1580>
   12690:	cmp	r7, lr
   12694:	bne	126a8 <__assert_fail@plt+0x158c>
   12698:	b	13320 <__assert_fail@plt+0x2204>
   1269c:	ldrb	r0, [ip, r7]
   126a0:	cmp	r0, #0
   126a4:	beq	13328 <__assert_fail@plt+0x220c>
   126a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   126ac:	mov	r8, #0
   126b0:	str	r4, [fp, #-52]	; 0xffffffcc
   126b4:	str	r2, [fp, #-48]	; 0xffffffd0
   126b8:	cmp	r0, #0
   126bc:	beq	126f0 <__assert_fail@plt+0x15d4>
   126c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   126c4:	add	r4, r7, r0
   126c8:	cmp	r0, #2
   126cc:	bcc	126e8 <__assert_fail@plt+0x15cc>
   126d0:	cmn	lr, #1
   126d4:	bne	126e8 <__assert_fail@plt+0x15cc>
   126d8:	mov	r0, ip
   126dc:	bl	11020 <strlen@plt>
   126e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   126e4:	mov	lr, r0
   126e8:	cmp	r4, lr
   126ec:	bls	12708 <__assert_fail@plt+0x15ec>
   126f0:	mov	r0, #0
   126f4:	str	r0, [fp, #-56]	; 0xffffffc8
   126f8:	ldrb	r5, [ip, r7]
   126fc:	cmp	r5, #126	; 0x7e
   12700:	bls	12758 <__assert_fail@plt+0x163c>
   12704:	b	12b60 <__assert_fail@plt+0x1a44>
   12708:	ldr	r1, [sp, #92]	; 0x5c
   1270c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12710:	add	r0, ip, r7
   12714:	mov	r4, lr
   12718:	bl	10f18 <memcmp@plt>
   1271c:	ldr	r2, [sp, #88]	; 0x58
   12720:	cmp	r0, #0
   12724:	mov	r1, r0
   12728:	movwne	r1, #1
   1272c:	orr	r1, r1, r2
   12730:	tst	r1, #1
   12734:	beq	13434 <__assert_fail@plt+0x2318>
   12738:	ldr	ip, [fp, #-84]	; 0xffffffac
   1273c:	clz	r0, r0
   12740:	mov	lr, r4
   12744:	lsr	r0, r0, #5
   12748:	str	r0, [fp, #-56]	; 0xffffffc8
   1274c:	ldrb	r5, [ip, r7]
   12750:	cmp	r5, #126	; 0x7e
   12754:	bhi	12b60 <__assert_fail@plt+0x1a44>
   12758:	add	r3, pc, #16
   1275c:	mov	r4, #1
   12760:	mov	r2, #110	; 0x6e
   12764:	mov	r0, #97	; 0x61
   12768:	mov	r1, #0
   1276c:	ldr	pc, [r3, r5, lsl #2]
   12770:	andeq	r2, r1, r0, asr #20
   12774:	andeq	r2, r1, r0, ror #22
   12778:	andeq	r2, r1, r0, ror #22
   1277c:	andeq	r2, r1, r0, ror #22
   12780:	andeq	r2, r1, r0, ror #22
   12784:	andeq	r2, r1, r0, ror #22
   12788:	andeq	r2, r1, r0, ror #22
   1278c:	andeq	r2, r1, ip, lsr ip
   12790:	andeq	r2, r1, r0, lsr #20
   12794:	andeq	r2, r1, r8, lsl #20
   12798:	andeq	r2, r1, ip, lsr #20
   1279c:			; <UNDEFINED> instruction: 0x00012abc
   127a0:	andeq	r2, r1, r0, lsl #20
   127a4:	andeq	r2, r1, r8, lsr #20
   127a8:	andeq	r2, r1, r0, ror #22
   127ac:	andeq	r2, r1, r0, ror #22
   127b0:	andeq	r2, r1, r0, ror #22
   127b4:	andeq	r2, r1, r0, ror #22
   127b8:	andeq	r2, r1, r0, ror #22
   127bc:	andeq	r2, r1, r0, ror #22
   127c0:	andeq	r2, r1, r0, ror #22
   127c4:	andeq	r2, r1, r0, ror #22
   127c8:	andeq	r2, r1, r0, ror #22
   127cc:	andeq	r2, r1, r0, ror #22
   127d0:	andeq	r2, r1, r0, ror #22
   127d4:	andeq	r2, r1, r0, ror #22
   127d8:	andeq	r2, r1, r0, ror #22
   127dc:	andeq	r2, r1, r0, ror #22
   127e0:	andeq	r2, r1, r0, ror #22
   127e4:	andeq	r2, r1, r0, ror #22
   127e8:	andeq	r2, r1, r0, ror #22
   127ec:	andeq	r2, r1, r0, ror #22
   127f0:			; <UNDEFINED> instruction: 0x00012bb8
   127f4:			; <UNDEFINED> instruction: 0x00012bbc
   127f8:			; <UNDEFINED> instruction: 0x00012bbc
   127fc:	andeq	r2, r1, ip, lsl #19
   12800:			; <UNDEFINED> instruction: 0x00012bbc
   12804:	andeq	r2, r1, ip, ror #18
   12808:			; <UNDEFINED> instruction: 0x00012bbc
   1280c:	andeq	r2, r1, r4, asr #21
   12810:			; <UNDEFINED> instruction: 0x00012bbc
   12814:			; <UNDEFINED> instruction: 0x00012bbc
   12818:			; <UNDEFINED> instruction: 0x00012bbc
   1281c:	andeq	r2, r1, ip, ror #18
   12820:	andeq	r2, r1, ip, ror #18
   12824:	andeq	r2, r1, ip, ror #18
   12828:	andeq	r2, r1, ip, ror #18
   1282c:	andeq	r2, r1, ip, ror #18
   12830:	andeq	r2, r1, ip, ror #18
   12834:	andeq	r2, r1, ip, ror #18
   12838:	andeq	r2, r1, ip, ror #18
   1283c:	andeq	r2, r1, ip, ror #18
   12840:	andeq	r2, r1, ip, ror #18
   12844:	andeq	r2, r1, ip, ror #18
   12848:	andeq	r2, r1, ip, ror #18
   1284c:	andeq	r2, r1, ip, ror #18
   12850:	andeq	r2, r1, ip, ror #18
   12854:	andeq	r2, r1, ip, ror #18
   12858:	andeq	r2, r1, ip, ror #18
   1285c:			; <UNDEFINED> instruction: 0x00012bbc
   12860:			; <UNDEFINED> instruction: 0x00012bbc
   12864:			; <UNDEFINED> instruction: 0x00012bbc
   12868:			; <UNDEFINED> instruction: 0x00012bbc
   1286c:	andeq	r2, r1, r0, lsl #21
   12870:	andeq	r2, r1, r0, ror #22
   12874:	andeq	r2, r1, ip, ror #18
   12878:	andeq	r2, r1, ip, ror #18
   1287c:	andeq	r2, r1, ip, ror #18
   12880:	andeq	r2, r1, ip, ror #18
   12884:	andeq	r2, r1, ip, ror #18
   12888:	andeq	r2, r1, ip, ror #18
   1288c:	andeq	r2, r1, ip, ror #18
   12890:	andeq	r2, r1, ip, ror #18
   12894:	andeq	r2, r1, ip, ror #18
   12898:	andeq	r2, r1, ip, ror #18
   1289c:	andeq	r2, r1, ip, ror #18
   128a0:	andeq	r2, r1, ip, ror #18
   128a4:	andeq	r2, r1, ip, ror #18
   128a8:	andeq	r2, r1, ip, ror #18
   128ac:	andeq	r2, r1, ip, ror #18
   128b0:	andeq	r2, r1, ip, ror #18
   128b4:	andeq	r2, r1, ip, ror #18
   128b8:	andeq	r2, r1, ip, ror #18
   128bc:	andeq	r2, r1, ip, ror #18
   128c0:	andeq	r2, r1, ip, ror #18
   128c4:	andeq	r2, r1, ip, ror #18
   128c8:	andeq	r2, r1, ip, ror #18
   128cc:	andeq	r2, r1, ip, ror #18
   128d0:	andeq	r2, r1, ip, ror #18
   128d4:	andeq	r2, r1, ip, ror #18
   128d8:	andeq	r2, r1, ip, ror #18
   128dc:			; <UNDEFINED> instruction: 0x00012bbc
   128e0:	andeq	r2, r1, ip, asr #19
   128e4:	andeq	r2, r1, ip, ror #18
   128e8:			; <UNDEFINED> instruction: 0x00012bbc
   128ec:	andeq	r2, r1, ip, ror #18
   128f0:			; <UNDEFINED> instruction: 0x00012bbc
   128f4:	andeq	r2, r1, ip, ror #18
   128f8:	andeq	r2, r1, ip, ror #18
   128fc:	andeq	r2, r1, ip, ror #18
   12900:	andeq	r2, r1, ip, ror #18
   12904:	andeq	r2, r1, ip, ror #18
   12908:	andeq	r2, r1, ip, ror #18
   1290c:	andeq	r2, r1, ip, ror #18
   12910:	andeq	r2, r1, ip, ror #18
   12914:	andeq	r2, r1, ip, ror #18
   12918:	andeq	r2, r1, ip, ror #18
   1291c:	andeq	r2, r1, ip, ror #18
   12920:	andeq	r2, r1, ip, ror #18
   12924:	andeq	r2, r1, ip, ror #18
   12928:	andeq	r2, r1, ip, ror #18
   1292c:	andeq	r2, r1, ip, ror #18
   12930:	andeq	r2, r1, ip, ror #18
   12934:	andeq	r2, r1, ip, ror #18
   12938:	andeq	r2, r1, ip, ror #18
   1293c:	andeq	r2, r1, ip, ror #18
   12940:	andeq	r2, r1, ip, ror #18
   12944:	andeq	r2, r1, ip, ror #18
   12948:	andeq	r2, r1, ip, ror #18
   1294c:	andeq	r2, r1, ip, ror #18
   12950:	andeq	r2, r1, ip, ror #18
   12954:	andeq	r2, r1, ip, ror #18
   12958:	andeq	r2, r1, ip, ror #18
   1295c:	andeq	r2, r1, ip, lsr #19
   12960:			; <UNDEFINED> instruction: 0x00012bbc
   12964:	andeq	r2, r1, ip, lsr #19
   12968:	andeq	r2, r1, ip, lsl #19
   1296c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12970:	cmp	r0, #0
   12974:	beq	12c50 <__assert_fail@plt+0x1b34>
   12978:	ldr	r0, [fp, #16]
   1297c:	cmp	r0, #0
   12980:	mov	r0, r5
   12984:	bne	12c60 <__assert_fail@plt+0x1b44>
   12988:	b	12c80 <__assert_fail@plt+0x1b64>
   1298c:	mov	r4, #0
   12990:	cmp	r7, #0
   12994:	beq	12bb8 <__assert_fail@plt+0x1a9c>
   12998:	mov	r8, #0
   1299c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129a0:	cmp	r0, #0
   129a4:	bne	12978 <__assert_fail@plt+0x185c>
   129a8:	b	12c50 <__assert_fail@plt+0x1b34>
   129ac:	mov	r4, #0
   129b0:	cmn	lr, #1
   129b4:	beq	12b90 <__assert_fail@plt+0x1a74>
   129b8:	cmp	r7, #0
   129bc:	bne	12998 <__assert_fail@plt+0x187c>
   129c0:	cmp	lr, #1
   129c4:	beq	12bb8 <__assert_fail@plt+0x1a9c>
   129c8:	b	12998 <__assert_fail@plt+0x187c>
   129cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129d0:	cmp	r0, #2
   129d4:	bne	12be8 <__assert_fail@plt+0x1acc>
   129d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129dc:	tst	r0, #1
   129e0:	bne	13448 <__assert_fail@plt+0x232c>
   129e4:	mov	r8, #0
   129e8:	mov	r0, #92	; 0x5c
   129ec:	mov	r4, #0
   129f0:	cmp	r8, #0
   129f4:	beq	12c08 <__assert_fail@plt+0x1aec>
   129f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   129fc:	b	12cfc <__assert_fail@plt+0x1be0>
   12a00:	mov	r0, #102	; 0x66
   12a04:	b	12c3c <__assert_fail@plt+0x1b20>
   12a08:	mov	r2, #116	; 0x74
   12a0c:	ldr	r0, [sp, #60]	; 0x3c
   12a10:	tst	r0, #1
   12a14:	mov	r0, r2
   12a18:	bne	12c3c <__assert_fail@plt+0x1b20>
   12a1c:	b	13448 <__assert_fail@plt+0x232c>
   12a20:	mov	r0, #98	; 0x62
   12a24:	b	12c3c <__assert_fail@plt+0x1b20>
   12a28:	mov	r2, #114	; 0x72
   12a2c:	ldr	r0, [sp, #60]	; 0x3c
   12a30:	tst	r0, #1
   12a34:	mov	r0, r2
   12a38:	bne	12c3c <__assert_fail@plt+0x1b20>
   12a3c:	b	13448 <__assert_fail@plt+0x232c>
   12a40:	ldr	r0, [sp, #80]	; 0x50
   12a44:	tst	r0, #1
   12a48:	beq	12d24 <__assert_fail@plt+0x1c08>
   12a4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a50:	tst	r0, #1
   12a54:	bne	13570 <__assert_fail@plt+0x2454>
   12a58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a5c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12a60:	cmp	r0, #2
   12a64:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12a68:	movwne	r0, #1
   12a6c:	orr	r0, r0, r2
   12a70:	tst	r0, #1
   12a74:	beq	1301c <__assert_fail@plt+0x1f00>
   12a78:	mov	r0, r9
   12a7c:	b	13050 <__assert_fail@plt+0x1f34>
   12a80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a84:	mov	r8, #0
   12a88:	mov	r5, #63	; 0x3f
   12a8c:	cmp	r0, #5
   12a90:	beq	12ed8 <__assert_fail@plt+0x1dbc>
   12a94:	cmp	r0, #2
   12a98:	bne	12f88 <__assert_fail@plt+0x1e6c>
   12a9c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12aa0:	tst	r0, #1
   12aa4:	bne	13448 <__assert_fail@plt+0x232c>
   12aa8:	mov	r4, #0
   12aac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ab0:	cmp	r0, #0
   12ab4:	bne	12978 <__assert_fail@plt+0x185c>
   12ab8:	b	12c50 <__assert_fail@plt+0x1b34>
   12abc:	mov	r0, #118	; 0x76
   12ac0:	b	12c3c <__assert_fail@plt+0x1b20>
   12ac4:	mov	r0, #1
   12ac8:	mov	r5, #39	; 0x27
   12acc:	str	r0, [sp, #52]	; 0x34
   12ad0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ad4:	cmp	r0, #2
   12ad8:	bne	12b4c <__assert_fail@plt+0x1a30>
   12adc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ae0:	tst	r0, #1
   12ae4:	bne	13448 <__assert_fail@plt+0x232c>
   12ae8:	ldr	r2, [sp, #48]	; 0x30
   12aec:	clz	r1, sl
   12af0:	mov	r8, #0
   12af4:	lsr	r1, r1, #5
   12af8:	cmp	r2, #0
   12afc:	mov	r0, r2
   12b00:	movwne	r0, #1
   12b04:	orrs	r0, r0, r1
   12b08:	moveq	r2, sl
   12b0c:	moveq	sl, r0
   12b10:	cmp	r9, sl
   12b14:	str	r2, [sp, #48]	; 0x30
   12b18:	movcc	r0, #39	; 0x27
   12b1c:	strbcc	r0, [r6, r9]
   12b20:	add	r0, r9, #1
   12b24:	cmp	r0, sl
   12b28:	movcc	r1, #92	; 0x5c
   12b2c:	strbcc	r1, [r6, r0]
   12b30:	add	r0, r9, #2
   12b34:	add	r9, r9, #3
   12b38:	cmp	r0, sl
   12b3c:	movcc	r1, #39	; 0x27
   12b40:	strbcc	r1, [r6, r0]
   12b44:	mov	r0, #0
   12b48:	str	r0, [fp, #-48]	; 0xffffffd0
   12b4c:	mov	r4, #1
   12b50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b54:	cmp	r0, #0
   12b58:	bne	12978 <__assert_fail@plt+0x185c>
   12b5c:	b	12c50 <__assert_fail@plt+0x1b34>
   12b60:	ldr	r0, [sp, #32]
   12b64:	cmp	r0, #1
   12b68:	bne	12d54 <__assert_fail@plt+0x1c38>
   12b6c:	str	lr, [sp, #84]	; 0x54
   12b70:	bl	11008 <__ctype_b_loc@plt>
   12b74:	ldr	r0, [r0]
   12b78:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b7c:	mov	r1, #1
   12b80:	add	r0, r0, r5, lsl #1
   12b84:	ldrb	r0, [r0, #1]
   12b88:	ubfx	r4, r0, #6, #1
   12b8c:	b	1314c <__assert_fail@plt+0x2030>
   12b90:	cmp	r7, #0
   12b94:	ldrbeq	r0, [ip, #1]
   12b98:	cmpeq	r0, #0
   12b9c:	beq	12bb8 <__assert_fail@plt+0x1a9c>
   12ba0:	mvn	lr, #0
   12ba4:	mov	r8, #0
   12ba8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bac:	cmp	r0, #0
   12bb0:	bne	12978 <__assert_fail@plt+0x185c>
   12bb4:	b	12c50 <__assert_fail@plt+0x1b34>
   12bb8:	mov	r1, #1
   12bbc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bc0:	cmp	r0, #2
   12bc4:	bne	12bd4 <__assert_fail@plt+0x1ab8>
   12bc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12bcc:	tst	r0, #1
   12bd0:	bne	13448 <__assert_fail@plt+0x232c>
   12bd4:	mov	r4, r1
   12bd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bdc:	cmp	r0, #0
   12be0:	bne	12978 <__assert_fail@plt+0x185c>
   12be4:	b	12c50 <__assert_fail@plt+0x1b34>
   12be8:	ldr	r1, [sp, #40]	; 0x28
   12bec:	mov	r8, #0
   12bf0:	mov	r0, #92	; 0x5c
   12bf4:	cmp	r1, #0
   12bf8:	beq	12c3c <__assert_fail@plt+0x1b20>
   12bfc:	mov	r4, #0
   12c00:	cmp	r8, #0
   12c04:	bne	129f8 <__assert_fail@plt+0x18dc>
   12c08:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12c0c:	tst	r2, #1
   12c10:	beq	12cfc <__assert_fail@plt+0x1be0>
   12c14:	cmp	r9, sl
   12c18:	movcc	r1, #39	; 0x27
   12c1c:	strbcc	r1, [r6, r9]
   12c20:	add	r1, r9, #1
   12c24:	add	r9, r9, #2
   12c28:	cmp	r1, sl
   12c2c:	movcc	r2, #39	; 0x27
   12c30:	strbcc	r2, [r6, r1]
   12c34:	mov	r2, #0
   12c38:	b	12cfc <__assert_fail@plt+0x1be0>
   12c3c:	ldr	r1, [sp, #80]	; 0x50
   12c40:	mov	r4, #0
   12c44:	mov	r8, #0
   12c48:	tst	r1, #1
   12c4c:	bne	12c8c <__assert_fail@plt+0x1b70>
   12c50:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12c54:	cmp	r0, #0
   12c58:	mov	r0, r5
   12c5c:	beq	12c80 <__assert_fail@plt+0x1b64>
   12c60:	ldr	r1, [fp, #16]
   12c64:	ubfx	r0, r5, #5, #3
   12c68:	mov	r2, #1
   12c6c:	ldr	r0, [r1, r0, lsl #2]
   12c70:	and	r1, r5, #31
   12c74:	tst	r0, r2, lsl r1
   12c78:	mov	r0, r5
   12c7c:	bne	12c8c <__assert_fail@plt+0x1b70>
   12c80:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12c84:	cmp	r1, #0
   12c88:	beq	130e4 <__assert_fail@plt+0x1fc8>
   12c8c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12c90:	tst	r1, #1
   12c94:	bne	13428 <__assert_fail@plt+0x230c>
   12c98:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12c9c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ca0:	cmp	r1, #2
   12ca4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12ca8:	movwne	r1, #1
   12cac:	orr	r1, r1, r2
   12cb0:	tst	r1, #1
   12cb4:	bne	12cec <__assert_fail@plt+0x1bd0>
   12cb8:	cmp	r9, sl
   12cbc:	movcc	r1, #39	; 0x27
   12cc0:	strbcc	r1, [r6, r9]
   12cc4:	add	r1, r9, #1
   12cc8:	cmp	r1, sl
   12ccc:	movcc	r2, #36	; 0x24
   12cd0:	strbcc	r2, [r6, r1]
   12cd4:	add	r1, r9, #2
   12cd8:	add	r9, r9, #3
   12cdc:	cmp	r1, sl
   12ce0:	movcc	r2, #39	; 0x27
   12ce4:	strbcc	r2, [r6, r1]
   12ce8:	mov	r2, #1
   12cec:	cmp	r9, sl
   12cf0:	movcc	r1, #92	; 0x5c
   12cf4:	strbcc	r1, [r6, r9]
   12cf8:	add	r9, r9, #1
   12cfc:	cmp	r9, sl
   12d00:	add	r7, r7, #1
   12d04:	strbcc	r0, [r6, r9]
   12d08:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12d0c:	add	r9, r9, #1
   12d10:	and	r0, r0, r4
   12d14:	mov	r4, r0
   12d18:	cmn	lr, #1
   12d1c:	bne	12690 <__assert_fail@plt+0x1574>
   12d20:	b	1269c <__assert_fail@plt+0x1580>
   12d24:	ldr	r0, [sp, #28]
   12d28:	mov	r4, #0
   12d2c:	mov	r8, #0
   12d30:	mov	r5, #0
   12d34:	cmp	r0, #0
   12d38:	beq	12c50 <__assert_fail@plt+0x1b34>
   12d3c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   12d40:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12d44:	add	r7, r7, #1
   12d48:	cmn	lr, #1
   12d4c:	bne	12690 <__assert_fail@plt+0x1574>
   12d50:	b	1269c <__assert_fail@plt+0x1580>
   12d54:	mov	r0, #0
   12d58:	cmn	lr, #1
   12d5c:	str	r0, [fp, #-36]	; 0xffffffdc
   12d60:	str	r0, [fp, #-40]	; 0xffffffd8
   12d64:	bne	12d78 <__assert_fail@plt+0x1c5c>
   12d68:	mov	r0, ip
   12d6c:	bl	11020 <strlen@plt>
   12d70:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d74:	mov	lr, r0
   12d78:	ldr	r0, [sp, #36]	; 0x24
   12d7c:	str	sl, [sp, #56]	; 0x38
   12d80:	str	lr, [sp, #84]	; 0x54
   12d84:	cmp	r0, #0
   12d88:	beq	12fa0 <__assert_fail@plt+0x1e84>
   12d8c:	add	r0, ip, r7
   12d90:	mov	r4, #1
   12d94:	mov	r6, #0
   12d98:	sub	sl, fp, #40	; 0x28
   12d9c:	str	r0, [sp, #20]
   12da0:	str	r6, [sp, #64]	; 0x40
   12da4:	add	r6, r6, r7
   12da8:	sub	r0, fp, #44	; 0x2c
   12dac:	mov	r3, sl
   12db0:	add	r1, ip, r6
   12db4:	sub	r2, lr, r6
   12db8:	bl	15ee4 <__assert_fail@plt+0x4dc8>
   12dbc:	cmn	r0, #2
   12dc0:	beq	130fc <__assert_fail@plt+0x1fe0>
   12dc4:	ldr	sl, [sp, #56]	; 0x38
   12dc8:	cmn	r0, #1
   12dcc:	beq	130f0 <__assert_fail@plt+0x1fd4>
   12dd0:	cmp	r0, #0
   12dd4:	beq	130f4 <__assert_fail@plt+0x1fd8>
   12dd8:	cmp	r0, #2
   12ddc:	bcc	12e9c <__assert_fail@plt+0x1d80>
   12de0:	ldr	r1, [sp, #64]	; 0x40
   12de4:	ldr	r2, [sp, #20]
   12de8:	add	r1, r2, r1
   12dec:	mov	r2, #1
   12df0:	ldrb	r3, [r1, r2]
   12df4:	sub	r3, r3, #91	; 0x5b
   12df8:	cmp	r3, #33	; 0x21
   12dfc:	bhi	12e90 <__assert_fail@plt+0x1d74>
   12e00:	add	r6, pc, #0
   12e04:	ldr	pc, [r6, r3, lsl #2]
   12e08:	andeq	r3, r1, r4, asr r4
   12e0c:	andeq	r3, r1, r4, asr r4
   12e10:	muleq	r1, r0, lr
   12e14:	andeq	r3, r1, r4, asr r4
   12e18:	muleq	r1, r0, lr
   12e1c:	andeq	r3, r1, r4, asr r4
   12e20:	muleq	r1, r0, lr
   12e24:	muleq	r1, r0, lr
   12e28:	muleq	r1, r0, lr
   12e2c:	muleq	r1, r0, lr
   12e30:	muleq	r1, r0, lr
   12e34:	muleq	r1, r0, lr
   12e38:	muleq	r1, r0, lr
   12e3c:	muleq	r1, r0, lr
   12e40:	muleq	r1, r0, lr
   12e44:	muleq	r1, r0, lr
   12e48:	muleq	r1, r0, lr
   12e4c:	muleq	r1, r0, lr
   12e50:	muleq	r1, r0, lr
   12e54:	muleq	r1, r0, lr
   12e58:	muleq	r1, r0, lr
   12e5c:	muleq	r1, r0, lr
   12e60:	muleq	r1, r0, lr
   12e64:	muleq	r1, r0, lr
   12e68:	muleq	r1, r0, lr
   12e6c:	muleq	r1, r0, lr
   12e70:	muleq	r1, r0, lr
   12e74:	muleq	r1, r0, lr
   12e78:	muleq	r1, r0, lr
   12e7c:	muleq	r1, r0, lr
   12e80:	muleq	r1, r0, lr
   12e84:	muleq	r1, r0, lr
   12e88:	muleq	r1, r0, lr
   12e8c:	andeq	r3, r1, r4, asr r4
   12e90:	add	r2, r2, #1
   12e94:	cmp	r2, r0
   12e98:	bcc	12df0 <__assert_fail@plt+0x1cd4>
   12e9c:	ldr	r6, [sp, #64]	; 0x40
   12ea0:	add	r6, r0, r6
   12ea4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12ea8:	bl	10f48 <iswprint@plt>
   12eac:	cmp	r0, #0
   12eb0:	sub	sl, fp, #40	; 0x28
   12eb4:	movwne	r0, #1
   12eb8:	and	r4, r4, r0
   12ebc:	mov	r0, sl
   12ec0:	bl	10f0c <mbsinit@plt>
   12ec4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ec8:	ldr	lr, [sp, #84]	; 0x54
   12ecc:	cmp	r0, #0
   12ed0:	beq	12da0 <__assert_fail@plt+0x1c84>
   12ed4:	b	13140 <__assert_fail@plt+0x2024>
   12ed8:	ldr	r0, [sp, #24]
   12edc:	cmp	r0, #0
   12ee0:	beq	12f88 <__assert_fail@plt+0x1e6c>
   12ee4:	add	r0, r7, #2
   12ee8:	cmp	r0, lr
   12eec:	bcs	12f88 <__assert_fail@plt+0x1e6c>
   12ef0:	add	r1, ip, r7
   12ef4:	ldrb	r1, [r1, #1]
   12ef8:	cmp	r1, #63	; 0x3f
   12efc:	bne	12f88 <__assert_fail@plt+0x1e6c>
   12f00:	ldrb	r5, [ip, r0]
   12f04:	sub	r1, r5, #33	; 0x21
   12f08:	cmp	r1, #29
   12f0c:	bhi	12f88 <__assert_fail@plt+0x1e6c>
   12f10:	movw	r3, #20929	; 0x51c1
   12f14:	mov	r2, #1
   12f18:	movt	r3, #14336	; 0x3800
   12f1c:	tst	r3, r2, lsl r1
   12f20:	beq	12f88 <__assert_fail@plt+0x1e6c>
   12f24:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12f28:	tst	r1, #1
   12f2c:	bne	13578 <__assert_fail@plt+0x245c>
   12f30:	cmp	r9, sl
   12f34:	mov	r7, r0
   12f38:	mov	r4, #0
   12f3c:	movcc	r1, #63	; 0x3f
   12f40:	strbcc	r1, [r6, r9]
   12f44:	add	r1, r9, #1
   12f48:	cmp	r1, sl
   12f4c:	movcc	r2, #34	; 0x22
   12f50:	strbcc	r2, [r6, r1]
   12f54:	add	r1, r9, #2
   12f58:	cmp	r1, sl
   12f5c:	movcc	r2, #34	; 0x22
   12f60:	strbcc	r2, [r6, r1]
   12f64:	add	r1, r9, #3
   12f68:	add	r9, r9, #4
   12f6c:	cmp	r1, sl
   12f70:	movcc	r2, #63	; 0x3f
   12f74:	strbcc	r2, [r6, r1]
   12f78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f7c:	cmp	r0, #0
   12f80:	bne	12978 <__assert_fail@plt+0x185c>
   12f84:	b	12c50 <__assert_fail@plt+0x1b34>
   12f88:	mov	r5, #63	; 0x3f
   12f8c:	mov	r4, #0
   12f90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f94:	cmp	r0, #0
   12f98:	bne	12978 <__assert_fail@plt+0x185c>
   12f9c:	b	12c50 <__assert_fail@plt+0x1b34>
   12fa0:	mov	r4, #1
   12fa4:	mov	r6, #0
   12fa8:	sub	sl, fp, #40	; 0x28
   12fac:	str	r6, [sp, #64]	; 0x40
   12fb0:	add	r6, r6, r7
   12fb4:	sub	r0, fp, #44	; 0x2c
   12fb8:	mov	r3, sl
   12fbc:	add	r1, ip, r6
   12fc0:	sub	r2, lr, r6
   12fc4:	bl	15ee4 <__assert_fail@plt+0x4dc8>
   12fc8:	cmn	r0, #2
   12fcc:	beq	130fc <__assert_fail@plt+0x1fe0>
   12fd0:	cmn	r0, #1
   12fd4:	beq	130f0 <__assert_fail@plt+0x1fd4>
   12fd8:	ldr	r6, [sp, #64]	; 0x40
   12fdc:	cmp	r0, #0
   12fe0:	beq	1313c <__assert_fail@plt+0x2020>
   12fe4:	add	r6, r0, r6
   12fe8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12fec:	bl	10f48 <iswprint@plt>
   12ff0:	cmp	r0, #0
   12ff4:	sub	sl, fp, #40	; 0x28
   12ff8:	movwne	r0, #1
   12ffc:	and	r4, r4, r0
   13000:	mov	r0, sl
   13004:	bl	10f0c <mbsinit@plt>
   13008:	ldr	ip, [fp, #-84]	; 0xffffffac
   1300c:	ldr	lr, [sp, #84]	; 0x54
   13010:	cmp	r0, #0
   13014:	beq	12fac <__assert_fail@plt+0x1e90>
   13018:	b	13140 <__assert_fail@plt+0x2024>
   1301c:	cmp	r9, sl
   13020:	mov	r2, #1
   13024:	movcc	r0, #39	; 0x27
   13028:	strbcc	r0, [r6, r9]
   1302c:	add	r0, r9, #1
   13030:	cmp	r0, sl
   13034:	movcc	r1, #36	; 0x24
   13038:	strbcc	r1, [r6, r0]
   1303c:	add	r0, r9, #2
   13040:	cmp	r0, sl
   13044:	movcc	r1, #39	; 0x27
   13048:	strbcc	r1, [r6, r0]
   1304c:	add	r0, r9, #3
   13050:	cmp	r0, sl
   13054:	add	r9, r0, #1
   13058:	str	r2, [fp, #-48]	; 0xffffffd0
   1305c:	movcc	r1, #92	; 0x5c
   13060:	strbcc	r1, [r6, r0]
   13064:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13068:	cmp	r1, #2
   1306c:	beq	130cc <__assert_fail@plt+0x1fb0>
   13070:	add	r1, r7, #1
   13074:	mov	r4, #0
   13078:	mov	r8, #1
   1307c:	mov	r5, #48	; 0x30
   13080:	cmp	r1, lr
   13084:	bcs	1296c <__assert_fail@plt+0x1850>
   13088:	ldrb	r1, [ip, r1]
   1308c:	sub	r1, r1, #48	; 0x30
   13090:	uxtb	r1, r1
   13094:	cmp	r1, #9
   13098:	bhi	1296c <__assert_fail@plt+0x1850>
   1309c:	cmp	r9, sl
   130a0:	movcc	r1, #48	; 0x30
   130a4:	strbcc	r1, [r6, r9]
   130a8:	add	r1, r0, #2
   130ac:	add	r9, r0, #3
   130b0:	cmp	r1, sl
   130b4:	movcc	r2, #48	; 0x30
   130b8:	strbcc	r2, [r6, r1]
   130bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130c0:	cmp	r0, #0
   130c4:	bne	12978 <__assert_fail@plt+0x185c>
   130c8:	b	12c50 <__assert_fail@plt+0x1b34>
   130cc:	mov	r0, #48	; 0x30
   130d0:	mov	r8, #1
   130d4:	mov	r4, #0
   130d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   130dc:	cmp	r1, #0
   130e0:	bne	12c8c <__assert_fail@plt+0x1b70>
   130e4:	cmp	r8, #0
   130e8:	beq	12c08 <__assert_fail@plt+0x1aec>
   130ec:	b	129f8 <__assert_fail@plt+0x18dc>
   130f0:	mov	r4, #0
   130f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   130f8:	b	13134 <__assert_fail@plt+0x2018>
   130fc:	ldr	r1, [sp, #84]	; 0x54
   13100:	ldr	ip, [fp, #-84]	; 0xffffffac
   13104:	mov	r4, #0
   13108:	cmp	r6, r1
   1310c:	bcs	13134 <__assert_fail@plt+0x2018>
   13110:	ldrb	r0, [ip, r6]
   13114:	cmp	r0, #0
   13118:	beq	13134 <__assert_fail@plt+0x2018>
   1311c:	ldr	r0, [sp, #64]	; 0x40
   13120:	add	r0, r0, #1
   13124:	add	r6, r0, r7
   13128:	str	r0, [sp, #64]	; 0x40
   1312c:	cmp	r6, r1
   13130:	bcc	13110 <__assert_fail@plt+0x1ff4>
   13134:	ldr	r6, [sp, #64]	; 0x40
   13138:	b	13140 <__assert_fail@plt+0x2024>
   1313c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13140:	mov	r1, r6
   13144:	ldr	r6, [sp, #76]	; 0x4c
   13148:	ldr	sl, [sp, #56]	; 0x38
   1314c:	ldr	r0, [sp, #44]	; 0x2c
   13150:	cmp	r1, #1
   13154:	orr	r2, r4, r0
   13158:	mov	r0, r1
   1315c:	bhi	1317c <__assert_fail@plt+0x2060>
   13160:	tst	r2, #1
   13164:	beq	1317c <__assert_fail@plt+0x2060>
   13168:	ldr	lr, [sp, #84]	; 0x54
   1316c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13170:	cmp	r0, #0
   13174:	bne	12978 <__assert_fail@plt+0x185c>
   13178:	b	12c50 <__assert_fail@plt+0x1b34>
   1317c:	str	r2, [sp, #64]	; 0x40
   13180:	add	r0, r0, r7
   13184:	add	r1, r7, #1
   13188:	ldr	lr, [sp, #84]	; 0x54
   1318c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13190:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13194:	mov	r3, #0
   13198:	str	r0, [sp, #56]	; 0x38
   1319c:	ldr	r0, [sp, #64]	; 0x40
   131a0:	tst	r0, #1
   131a4:	bne	1328c <__assert_fail@plt+0x2170>
   131a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   131ac:	tst	r0, #1
   131b0:	bne	1342c <__assert_fail@plt+0x2310>
   131b4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   131b8:	cmp	r7, #2
   131bc:	movwne	r3, #1
   131c0:	orr	r3, r3, r2
   131c4:	tst	r3, #1
   131c8:	bne	13200 <__assert_fail@plt+0x20e4>
   131cc:	cmp	r9, sl
   131d0:	add	r3, r9, #1
   131d4:	movcc	r2, #39	; 0x27
   131d8:	strbcc	r2, [r6, r9]
   131dc:	cmp	r3, sl
   131e0:	movcc	r2, #36	; 0x24
   131e4:	strbcc	r2, [r6, r3]
   131e8:	add	r3, r9, #2
   131ec:	add	r9, r9, #3
   131f0:	cmp	r3, sl
   131f4:	movcc	r2, #39	; 0x27
   131f8:	strbcc	r2, [r6, r3]
   131fc:	mov	r2, #1
   13200:	cmp	r9, sl
   13204:	mov	r0, r2
   13208:	movcc	r3, #92	; 0x5c
   1320c:	strbcc	r3, [r6, r9]
   13210:	add	r3, r9, #1
   13214:	cmp	r3, sl
   13218:	andcc	r7, r5, #192	; 0xc0
   1321c:	movcc	r2, #48	; 0x30
   13220:	orrcc	r7, r2, r7, lsr #6
   13224:	strbcc	r7, [r6, r3]
   13228:	add	r3, r9, #2
   1322c:	add	r9, r9, #3
   13230:	cmp	r3, sl
   13234:	lsrcc	r7, r5, #3
   13238:	movcc	r2, #6
   1323c:	bficc	r7, r2, #3, #29
   13240:	mov	r2, #6
   13244:	strbcc	r7, [r6, r3]
   13248:	bfi	r5, r2, #3, #29
   1324c:	mov	r3, #1
   13250:	mov	r2, r0
   13254:	ldr	r0, [sp, #56]	; 0x38
   13258:	and	r8, r3, #1
   1325c:	cmp	r0, r1
   13260:	bhi	132c0 <__assert_fail@plt+0x21a4>
   13264:	b	13300 <__assert_fail@plt+0x21e4>
   13268:	cmp	r9, sl
   1326c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13270:	strbcc	r5, [r6, r9]
   13274:	add	r9, r9, #1
   13278:	ldrb	r5, [ip, r1]
   1327c:	add	r1, r1, #1
   13280:	ldr	r0, [sp, #64]	; 0x40
   13284:	tst	r0, #1
   13288:	beq	131a8 <__assert_fail@plt+0x208c>
   1328c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13290:	tst	r7, #1
   13294:	beq	132a8 <__assert_fail@plt+0x218c>
   13298:	cmp	r9, sl
   1329c:	movcc	r7, #92	; 0x5c
   132a0:	strbcc	r7, [r6, r9]
   132a4:	add	r9, r9, #1
   132a8:	mov	r7, #0
   132ac:	str	r7, [fp, #-56]	; 0xffffffc8
   132b0:	ldr	r0, [sp, #56]	; 0x38
   132b4:	and	r8, r3, #1
   132b8:	cmp	r0, r1
   132bc:	bls	13300 <__assert_fail@plt+0x21e4>
   132c0:	cmp	r8, #0
   132c4:	mvn	r7, r2
   132c8:	movwne	r8, #1
   132cc:	orr	r7, r7, r8
   132d0:	tst	r7, #1
   132d4:	bne	13268 <__assert_fail@plt+0x214c>
   132d8:	cmp	r9, sl
   132dc:	movcc	r7, #39	; 0x27
   132e0:	strbcc	r7, [r6, r9]
   132e4:	add	r7, r9, #1
   132e8:	add	r9, r9, #2
   132ec:	cmp	r7, sl
   132f0:	movcc	r2, #39	; 0x27
   132f4:	strbcc	r2, [r6, r7]
   132f8:	mov	r2, #0
   132fc:	b	13268 <__assert_fail@plt+0x214c>
   13300:	cmp	r8, #0
   13304:	sub	r7, r1, #1
   13308:	mov	r0, r5
   1330c:	str	r2, [fp, #-48]	; 0xffffffd0
   13310:	movwne	r8, #1
   13314:	cmp	r8, #0
   13318:	beq	12c08 <__assert_fail@plt+0x1aec>
   1331c:	b	129f8 <__assert_fail@plt+0x18dc>
   13320:	mov	lr, r7
   13324:	b	1332c <__assert_fail@plt+0x2210>
   13328:	mvn	lr, #0
   1332c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13330:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13334:	eor	r0, r7, #2
   13338:	orr	r0, r0, r9
   1333c:	clz	r0, r0
   13340:	lsr	r0, r0, #5
   13344:	tst	r1, r0
   13348:	bne	13448 <__assert_fail@plt+0x232c>
   1334c:	mov	r0, r1
   13350:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13354:	cmp	r7, #2
   13358:	movwne	r1, #1
   1335c:	orr	r0, r0, r1
   13360:	tst	r0, #1
   13364:	ldreq	r0, [sp, #52]	; 0x34
   13368:	streq	lr, [sp, #84]	; 0x54
   1336c:	eoreq	r0, r0, #1
   13370:	tsteq	r0, #1
   13374:	bne	1350c <__assert_fail@plt+0x23f0>
   13378:	tst	r4, #1
   1337c:	bne	134c8 <__assert_fail@plt+0x23ac>
   13380:	ldr	r6, [sp, #48]	; 0x30
   13384:	mov	r8, #0
   13388:	cmp	r6, #0
   1338c:	beq	13504 <__assert_fail@plt+0x23e8>
   13390:	ldr	r0, [sp, #80]	; 0x50
   13394:	mov	r1, #0
   13398:	cmp	sl, #0
   1339c:	mov	r4, #0
   133a0:	str	r1, [fp, #-72]	; 0xffffffb8
   133a4:	beq	12298 <__assert_fail@plt+0x117c>
   133a8:	b	1350c <__assert_fail@plt+0x23f0>
   133ac:	ldrb	r1, [r0, #3]
   133b0:	cmp	r1, #56	; 0x38
   133b4:	ldrbeq	r1, [r0, #4]
   133b8:	cmpeq	r1, #48	; 0x30
   133bc:	bne	12490 <__assert_fail@plt+0x1374>
   133c0:	ldrb	r1, [r0, #5]
   133c4:	cmp	r1, #51	; 0x33
   133c8:	ldrbeq	r1, [r0, #6]
   133cc:	cmpeq	r1, #48	; 0x30
   133d0:	bne	12490 <__assert_fail@plt+0x1374>
   133d4:	ldrb	r0, [r0, #7]
   133d8:	cmp	r0, #0
   133dc:	movw	r0, #27568	; 0x6bb0
   133e0:	movt	r0, #1
   133e4:	str	r0, [sp, #68]	; 0x44
   133e8:	bne	12490 <__assert_fail@plt+0x1374>
   133ec:	b	124ac <__assert_fail@plt+0x1390>
   133f0:	ldrb	r1, [r0, #4]
   133f4:	cmp	r1, #48	; 0x30
   133f8:	ldrbeq	r1, [r0, #5]
   133fc:	cmpeq	r1, #51	; 0x33
   13400:	bne	12574 <__assert_fail@plt+0x1458>
   13404:	ldrb	r1, [r0, #6]
   13408:	cmp	r1, #48	; 0x30
   1340c:	ldrbeq	r0, [r0, #7]
   13410:	cmpeq	r0, #0
   13414:	bne	12574 <__assert_fail@plt+0x1458>
   13418:	movw	r0, #27572	; 0x6bb4
   1341c:	movt	r0, #1
   13420:	str	r0, [sp, #72]	; 0x48
   13424:	b	12594 <__assert_fail@plt+0x1478>
   13428:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1342c:	ldr	r2, [sp, #80]	; 0x50
   13430:	b	13468 <__assert_fail@plt+0x234c>
   13434:	ldr	ip, [fp, #-84]	; 0xffffffac
   13438:	mov	r2, #1
   1343c:	mov	lr, r4
   13440:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13444:	b	13468 <__assert_fail@plt+0x234c>
   13448:	ldr	r2, [sp, #80]	; 0x50
   1344c:	mov	r7, #2
   13450:	b	13468 <__assert_fail@plt+0x234c>
   13454:	ldr	r6, [sp, #76]	; 0x4c
   13458:	ldr	ip, [fp, #-84]	; 0xffffffac
   1345c:	ldr	lr, [sp, #84]	; 0x54
   13460:	ldr	r2, [sp, #80]	; 0x50
   13464:	mov	r7, #2
   13468:	mov	r0, #0
   1346c:	ldr	r1, [fp, #12]
   13470:	tst	r2, #1
   13474:	mov	r2, r7
   13478:	mov	r3, lr
   1347c:	str	r0, [sp, #8]
   13480:	ldr	r0, [sp, #68]	; 0x44
   13484:	movwne	r2, #4
   13488:	cmp	r7, #2
   1348c:	movne	r2, r7
   13490:	str	r2, [sp]
   13494:	mov	r2, ip
   13498:	bic	r1, r1, #2
   1349c:	str	r0, [sp, #12]
   134a0:	ldr	r0, [sp, #72]	; 0x48
   134a4:	str	r1, [sp, #4]
   134a8:	mov	r1, sl
   134ac:	str	r0, [sp, #16]
   134b0:	mov	r0, r6
   134b4:	bl	1221c <__assert_fail@plt+0x1100>
   134b8:	mov	r9, r0
   134bc:	mov	r0, r9
   134c0:	sub	sp, fp, #28
   134c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134c8:	mov	r0, #5
   134cc:	ldr	r1, [sp, #48]	; 0x30
   134d0:	ldr	r2, [fp, #-84]	; 0xffffffac
   134d4:	ldr	r3, [sp, #84]	; 0x54
   134d8:	str	r0, [sp]
   134dc:	ldr	r0, [fp, #12]
   134e0:	str	r0, [sp, #4]
   134e4:	ldr	r0, [fp, #16]
   134e8:	str	r0, [sp, #8]
   134ec:	ldr	r0, [sp, #68]	; 0x44
   134f0:	str	r0, [sp, #12]
   134f4:	ldr	r0, [sp, #72]	; 0x48
   134f8:	str	r0, [sp, #16]
   134fc:	ldr	r0, [sp, #76]	; 0x4c
   13500:	b	134b4 <__assert_fail@plt+0x2398>
   13504:	mov	r0, #0
   13508:	str	r0, [fp, #-72]	; 0xffffffb8
   1350c:	ldr	r1, [sp, #92]	; 0x5c
   13510:	cmp	r1, #0
   13514:	beq	13554 <__assert_fail@plt+0x2438>
   13518:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1351c:	ldr	r2, [sp, #76]	; 0x4c
   13520:	tst	r0, #1
   13524:	bne	13558 <__assert_fail@plt+0x243c>
   13528:	ldrb	r0, [r1]
   1352c:	cmp	r0, #0
   13530:	beq	13558 <__assert_fail@plt+0x243c>
   13534:	add	r1, r1, #1
   13538:	cmp	r9, sl
   1353c:	strbcc	r0, [r2, r9]
   13540:	add	r9, r9, #1
   13544:	ldrb	r0, [r1], #1
   13548:	cmp	r0, #0
   1354c:	bne	13538 <__assert_fail@plt+0x241c>
   13550:	b	13558 <__assert_fail@plt+0x243c>
   13554:	ldr	r2, [sp, #76]	; 0x4c
   13558:	cmp	r9, sl
   1355c:	movcc	r0, #0
   13560:	strbcc	r0, [r2, r9]
   13564:	mov	r0, r9
   13568:	sub	sp, fp, #28
   1356c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13570:	mov	r2, #1
   13574:	b	13440 <__assert_fail@plt+0x2324>
   13578:	ldr	r2, [sp, #80]	; 0x50
   1357c:	mov	r7, #5
   13580:	b	13468 <__assert_fail@plt+0x234c>
   13584:	bl	11104 <abort@plt>
   13588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1358c:	add	fp, sp, #28
   13590:	sub	sp, sp, #28
   13594:	movw	r5, #33176	; 0x8198
   13598:	cmp	r2, #0
   1359c:	mov	r4, r1
   135a0:	mov	r7, r0
   135a4:	str	r0, [sp, #20]
   135a8:	movt	r5, #2
   135ac:	movne	r5, r2
   135b0:	bl	11038 <__errno_location@plt>
   135b4:	mov	sl, r0
   135b8:	ldm	r5, {r0, r1}
   135bc:	ldr	r2, [r5, #40]	; 0x28
   135c0:	ldr	r3, [r5, #44]	; 0x2c
   135c4:	add	r9, r5, #8
   135c8:	ldr	r6, [sl]
   135cc:	orr	r8, r1, #1
   135d0:	mov	r1, #0
   135d4:	str	r6, [sp, #24]
   135d8:	stm	sp, {r0, r8, r9}
   135dc:	str	r2, [sp, #12]
   135e0:	str	r3, [sp, #16]
   135e4:	mov	r0, #0
   135e8:	mov	r2, r7
   135ec:	mov	r3, r4
   135f0:	mov	r6, r4
   135f4:	bl	1221c <__assert_fail@plt+0x1100>
   135f8:	add	r7, r0, #1
   135fc:	mov	r0, r7
   13600:	bl	14664 <__assert_fail@plt+0x3548>
   13604:	mov	r4, r0
   13608:	ldr	r0, [r5]
   1360c:	ldr	r2, [r5, #44]	; 0x2c
   13610:	ldr	r1, [r5, #40]	; 0x28
   13614:	mov	r3, r6
   13618:	stm	sp, {r0, r8, r9}
   1361c:	str	r2, [sp, #16]
   13620:	str	r1, [sp, #12]
   13624:	mov	r0, r4
   13628:	mov	r1, r7
   1362c:	ldr	r2, [sp, #20]
   13630:	bl	1221c <__assert_fail@plt+0x1100>
   13634:	ldr	r0, [sp, #24]
   13638:	str	r0, [sl]
   1363c:	mov	r0, r4
   13640:	sub	sp, fp, #28
   13644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1364c:	add	fp, sp, #28
   13650:	sub	sp, sp, #36	; 0x24
   13654:	movw	r8, #33176	; 0x8198
   13658:	cmp	r3, #0
   1365c:	mov	r4, r2
   13660:	str	r2, [sp, #24]
   13664:	mov	r5, r1
   13668:	mov	r6, r0
   1366c:	str	r0, [sp, #20]
   13670:	movt	r8, #2
   13674:	movne	r8, r3
   13678:	bl	11038 <__errno_location@plt>
   1367c:	str	r0, [sp, #28]
   13680:	cmp	r4, #0
   13684:	add	sl, r8, #8
   13688:	ldm	r8, {r3, r9}
   1368c:	ldr	r7, [r0]
   13690:	ldr	r1, [r8, #40]	; 0x28
   13694:	ldr	r2, [r8, #44]	; 0x2c
   13698:	mov	r0, #0
   1369c:	orreq	r9, r9, #1
   136a0:	str	r7, [sp, #32]
   136a4:	mov	r7, r5
   136a8:	stm	sp, {r3, r9, sl}
   136ac:	str	r1, [sp, #12]
   136b0:	str	r2, [sp, #16]
   136b4:	mov	r1, #0
   136b8:	mov	r2, r6
   136bc:	mov	r3, r5
   136c0:	bl	1221c <__assert_fail@plt+0x1100>
   136c4:	add	r4, r0, #1
   136c8:	mov	r5, r0
   136cc:	mov	r0, r4
   136d0:	bl	14664 <__assert_fail@plt+0x3548>
   136d4:	mov	r6, r0
   136d8:	ldr	r0, [r8]
   136dc:	ldr	r2, [r8, #44]	; 0x2c
   136e0:	ldr	r1, [r8, #40]	; 0x28
   136e4:	mov	r3, r7
   136e8:	stm	sp, {r0, r9, sl}
   136ec:	str	r2, [sp, #16]
   136f0:	str	r1, [sp, #12]
   136f4:	mov	r0, r6
   136f8:	mov	r1, r4
   136fc:	ldr	r2, [sp, #20]
   13700:	bl	1221c <__assert_fail@plt+0x1100>
   13704:	ldr	r0, [sp, #24]
   13708:	ldr	r1, [sp, #32]
   1370c:	ldr	r2, [sp, #28]
   13710:	cmp	r0, #0
   13714:	str	r1, [r2]
   13718:	strne	r5, [r0]
   1371c:	mov	r0, r6
   13720:	sub	sp, fp, #28
   13724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13728:	push	{r4, r5, r6, r7, fp, lr}
   1372c:	add	fp, sp, #16
   13730:	movw	r4, #33072	; 0x8130
   13734:	movt	r4, #2
   13738:	ldrd	r6, [r4]
   1373c:	cmp	r7, #2
   13740:	blt	1376c <__assert_fail@plt+0x2650>
   13744:	add	r5, r6, #12
   13748:	mov	r7, #0
   1374c:	ldr	r0, [r5, r7, lsl #3]
   13750:	bl	11fb8 <__assert_fail@plt+0xe9c>
   13754:	ldr	r1, [r4, #4]
   13758:	add	r2, r7, #2
   1375c:	add	r0, r7, #1
   13760:	mov	r7, r0
   13764:	cmp	r2, r1
   13768:	blt	1374c <__assert_fail@plt+0x2630>
   1376c:	ldr	r0, [r6, #4]
   13770:	movw	r5, #33224	; 0x81c8
   13774:	movt	r5, #2
   13778:	cmp	r0, r5
   1377c:	beq	13790 <__assert_fail@plt+0x2674>
   13780:	bl	11fb8 <__assert_fail@plt+0xe9c>
   13784:	mov	r0, #256	; 0x100
   13788:	str	r0, [r4, #8]
   1378c:	str	r5, [r4, #12]
   13790:	add	r5, r4, #8
   13794:	cmp	r6, r5
   13798:	beq	137a8 <__assert_fail@plt+0x268c>
   1379c:	mov	r0, r6
   137a0:	bl	11fb8 <__assert_fail@plt+0xe9c>
   137a4:	str	r5, [r4]
   137a8:	mov	r0, #1
   137ac:	str	r0, [r4, #4]
   137b0:	pop	{r4, r5, r6, r7, fp, pc}
   137b4:	movw	r3, #33176	; 0x8198
   137b8:	mvn	r2, #0
   137bc:	movt	r3, #2
   137c0:	b	137c4 <__assert_fail@plt+0x26a8>
   137c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137c8:	add	fp, sp, #28
   137cc:	sub	sp, sp, #44	; 0x2c
   137d0:	mov	r7, r3
   137d4:	str	r2, [sp, #36]	; 0x24
   137d8:	str	r1, [sp, #32]
   137dc:	mov	r5, r0
   137e0:	bl	11038 <__errno_location@plt>
   137e4:	cmp	r5, #0
   137e8:	blt	1394c <__assert_fail@plt+0x2830>
   137ec:	cmn	r5, #-2147483647	; 0x80000001
   137f0:	beq	1394c <__assert_fail@plt+0x2830>
   137f4:	movw	r8, #33072	; 0x8130
   137f8:	mov	r4, r0
   137fc:	movt	r8, #2
   13800:	ldr	r6, [r8]
   13804:	ldr	r1, [r8, #4]
   13808:	ldr	r0, [r0]
   1380c:	str	r4, [sp, #28]
   13810:	cmp	r1, r5
   13814:	str	r0, [sp, #24]
   13818:	ble	13824 <__assert_fail@plt+0x2708>
   1381c:	mov	sl, r6
   13820:	b	13888 <__assert_fail@plt+0x276c>
   13824:	mov	r0, #8
   13828:	add	r9, r8, #8
   1382c:	add	r2, r5, #1
   13830:	str	r1, [fp, #-32]	; 0xffffffe0
   13834:	mvn	r3, #-2147483648	; 0x80000000
   13838:	str	r0, [sp]
   1383c:	subs	r0, r6, r9
   13840:	sub	r2, r2, r1
   13844:	sub	r1, fp, #32
   13848:	movne	r0, r6
   1384c:	bl	14864 <__assert_fail@plt+0x3748>
   13850:	str	r0, [r8]
   13854:	cmp	r6, r9
   13858:	mov	sl, r0
   1385c:	ldrdeq	r0, [r8, #8]
   13860:	stmeq	sl, {r0, r1}
   13864:	ldr	r1, [r8, #4]
   13868:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1386c:	add	r0, sl, r1, lsl #3
   13870:	sub	r1, r2, r1
   13874:	lsl	r2, r1, #3
   13878:	mov	r1, #0
   1387c:	bl	11050 <memset@plt>
   13880:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13884:	str	r0, [r8, #4]
   13888:	mov	r9, sl
   1388c:	ldr	r6, [r9, r5, lsl #3]!
   13890:	ldr	r4, [r9, #4]!
   13894:	ldm	r7, {r0, r1}
   13898:	ldr	r2, [r7, #40]	; 0x28
   1389c:	ldr	r3, [r7, #44]	; 0x2c
   138a0:	orr	r8, r1, #1
   138a4:	add	r1, r7, #8
   138a8:	stm	sp, {r0, r8}
   138ac:	add	r0, sp, #8
   138b0:	str	r1, [sp, #20]
   138b4:	stm	r0, {r1, r2, r3}
   138b8:	mov	r0, r4
   138bc:	mov	r1, r6
   138c0:	ldr	r2, [sp, #32]
   138c4:	ldr	r3, [sp, #36]	; 0x24
   138c8:	bl	1221c <__assert_fail@plt+0x1100>
   138cc:	cmp	r6, r0
   138d0:	bhi	13934 <__assert_fail@plt+0x2818>
   138d4:	add	r6, r0, #1
   138d8:	movw	r0, #33224	; 0x81c8
   138dc:	movt	r0, #2
   138e0:	str	r6, [sl, r5, lsl #3]
   138e4:	cmp	r4, r0
   138e8:	beq	138f4 <__assert_fail@plt+0x27d8>
   138ec:	mov	r0, r4
   138f0:	bl	11fb8 <__assert_fail@plt+0xe9c>
   138f4:	mov	r0, r6
   138f8:	bl	14664 <__assert_fail@plt+0x3548>
   138fc:	str	r0, [r9]
   13900:	mov	r4, r0
   13904:	add	r3, sp, #8
   13908:	ldr	r0, [r7]
   1390c:	ldr	r1, [r7, #40]	; 0x28
   13910:	ldr	r2, [r7, #44]	; 0x2c
   13914:	stm	sp, {r0, r8}
   13918:	ldr	r0, [sp, #20]
   1391c:	stm	r3, {r0, r1, r2}
   13920:	mov	r0, r4
   13924:	mov	r1, r6
   13928:	ldr	r2, [sp, #32]
   1392c:	ldr	r3, [sp, #36]	; 0x24
   13930:	bl	1221c <__assert_fail@plt+0x1100>
   13934:	ldr	r1, [sp, #24]
   13938:	ldr	r0, [sp, #28]
   1393c:	str	r1, [r0]
   13940:	mov	r0, r4
   13944:	sub	sp, fp, #28
   13948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1394c:	bl	11104 <abort@plt>
   13950:	movw	r3, #33176	; 0x8198
   13954:	movt	r3, #2
   13958:	b	137c4 <__assert_fail@plt+0x26a8>
   1395c:	movw	r3, #33176	; 0x8198
   13960:	mov	r1, r0
   13964:	mov	r0, #0
   13968:	mvn	r2, #0
   1396c:	movt	r3, #2
   13970:	b	137c4 <__assert_fail@plt+0x26a8>
   13974:	movw	r3, #33176	; 0x8198
   13978:	mov	r2, r1
   1397c:	mov	r1, r0
   13980:	mov	r0, #0
   13984:	movt	r3, #2
   13988:	b	137c4 <__assert_fail@plt+0x26a8>
   1398c:	push	{fp, lr}
   13990:	mov	fp, sp
   13994:	sub	sp, sp, #48	; 0x30
   13998:	vmov.i32	q8, #0	; 0x00000000
   1399c:	mov	ip, #32
   139a0:	mov	r3, sp
   139a4:	mov	lr, r2
   139a8:	cmp	r1, #10
   139ac:	add	r2, r3, #16
   139b0:	vst1.64	{d16-d17}, [r3], ip
   139b4:	vst1.64	{d16-d17}, [r3]
   139b8:	vst1.64	{d16-d17}, [r2]
   139bc:	beq	139dc <__assert_fail@plt+0x28c0>
   139c0:	str	r1, [sp]
   139c4:	mov	r3, sp
   139c8:	mov	r1, lr
   139cc:	mvn	r2, #0
   139d0:	bl	137c4 <__assert_fail@plt+0x26a8>
   139d4:	mov	sp, fp
   139d8:	pop	{fp, pc}
   139dc:	bl	11104 <abort@plt>
   139e0:	push	{r4, sl, fp, lr}
   139e4:	add	fp, sp, #8
   139e8:	sub	sp, sp, #48	; 0x30
   139ec:	mov	ip, r3
   139f0:	mov	r3, sp
   139f4:	vmov.i32	q8, #0	; 0x00000000
   139f8:	mov	lr, #32
   139fc:	cmp	r1, #10
   13a00:	add	r4, r3, #16
   13a04:	vst1.64	{d16-d17}, [r3], lr
   13a08:	vst1.64	{d16-d17}, [r3]
   13a0c:	vst1.64	{d16-d17}, [r4]
   13a10:	beq	13a30 <__assert_fail@plt+0x2914>
   13a14:	str	r1, [sp]
   13a18:	mov	r1, r2
   13a1c:	mov	r3, sp
   13a20:	mov	r2, ip
   13a24:	bl	137c4 <__assert_fail@plt+0x26a8>
   13a28:	sub	sp, fp, #8
   13a2c:	pop	{r4, sl, fp, pc}
   13a30:	bl	11104 <abort@plt>
   13a34:	push	{fp, lr}
   13a38:	mov	fp, sp
   13a3c:	sub	sp, sp, #48	; 0x30
   13a40:	mov	r3, sp
   13a44:	vmov.i32	q8, #0	; 0x00000000
   13a48:	mov	ip, #32
   13a4c:	cmp	r0, #10
   13a50:	add	r2, r3, #16
   13a54:	vst1.64	{d16-d17}, [r3], ip
   13a58:	vst1.64	{d16-d17}, [r3]
   13a5c:	vst1.64	{d16-d17}, [r2]
   13a60:	beq	13a80 <__assert_fail@plt+0x2964>
   13a64:	str	r0, [sp]
   13a68:	mov	r3, sp
   13a6c:	mov	r0, #0
   13a70:	mvn	r2, #0
   13a74:	bl	137c4 <__assert_fail@plt+0x26a8>
   13a78:	mov	sp, fp
   13a7c:	pop	{fp, pc}
   13a80:	bl	11104 <abort@plt>
   13a84:	push	{fp, lr}
   13a88:	mov	fp, sp
   13a8c:	sub	sp, sp, #48	; 0x30
   13a90:	mov	r3, sp
   13a94:	vmov.i32	q8, #0	; 0x00000000
   13a98:	mov	ip, #32
   13a9c:	cmp	r0, #10
   13aa0:	add	lr, r3, #16
   13aa4:	vst1.64	{d16-d17}, [r3], ip
   13aa8:	vst1.64	{d16-d17}, [r3]
   13aac:	vst1.64	{d16-d17}, [lr]
   13ab0:	beq	13acc <__assert_fail@plt+0x29b0>
   13ab4:	str	r0, [sp]
   13ab8:	mov	r3, sp
   13abc:	mov	r0, #0
   13ac0:	bl	137c4 <__assert_fail@plt+0x26a8>
   13ac4:	mov	sp, fp
   13ac8:	pop	{fp, pc}
   13acc:	bl	11104 <abort@plt>
   13ad0:	push	{r4, sl, fp, lr}
   13ad4:	add	fp, sp, #8
   13ad8:	sub	sp, sp, #48	; 0x30
   13adc:	mov	lr, r0
   13ae0:	movw	r0, #33176	; 0x8198
   13ae4:	mov	r3, #32
   13ae8:	mov	ip, r1
   13aec:	mov	r4, #1
   13af0:	movt	r0, #2
   13af4:	add	r1, r0, #16
   13af8:	vld1.64	{d16-d17}, [r0], r3
   13afc:	mov	r3, sp
   13b00:	vld1.64	{d18-d19}, [r1]
   13b04:	add	r1, r3, #16
   13b08:	vld1.64	{d20-d21}, [r0]
   13b0c:	add	r0, r3, #32
   13b10:	vst1.64	{d18-d19}, [r1]
   13b14:	mov	r1, r3
   13b18:	vst1.64	{d20-d21}, [r0]
   13b1c:	mov	r0, #28
   13b20:	and	r0, r0, r2, lsr #3
   13b24:	and	r2, r2, #31
   13b28:	vst1.64	{d16-d17}, [r1], r0
   13b2c:	ldr	r0, [r1, #8]
   13b30:	bic	r4, r4, r0, lsr r2
   13b34:	eor	r0, r0, r4, lsl r2
   13b38:	mov	r2, ip
   13b3c:	str	r0, [r1, #8]
   13b40:	mov	r0, #0
   13b44:	mov	r1, lr
   13b48:	bl	137c4 <__assert_fail@plt+0x26a8>
   13b4c:	sub	sp, fp, #8
   13b50:	pop	{r4, sl, fp, pc}
   13b54:	push	{fp, lr}
   13b58:	mov	fp, sp
   13b5c:	sub	sp, sp, #48	; 0x30
   13b60:	mov	ip, r0
   13b64:	movw	r0, #33176	; 0x8198
   13b68:	mov	r3, #32
   13b6c:	movt	r0, #2
   13b70:	add	r2, r0, #16
   13b74:	vld1.64	{d16-d17}, [r0], r3
   13b78:	mov	r3, sp
   13b7c:	vld1.64	{d18-d19}, [r2]
   13b80:	add	r2, r3, #16
   13b84:	vld1.64	{d20-d21}, [r0]
   13b88:	add	r0, r3, #32
   13b8c:	vst1.64	{d18-d19}, [r2]
   13b90:	mov	r2, r3
   13b94:	vst1.64	{d20-d21}, [r0]
   13b98:	mov	r0, #28
   13b9c:	and	r0, r0, r1, lsr #3
   13ba0:	and	r1, r1, #31
   13ba4:	vst1.64	{d16-d17}, [r2], r0
   13ba8:	mov	r0, #1
   13bac:	ldr	lr, [r2, #8]
   13bb0:	bic	r0, r0, lr, lsr r1
   13bb4:	eor	r0, lr, r0, lsl r1
   13bb8:	mov	r1, ip
   13bbc:	str	r0, [r2, #8]
   13bc0:	mov	r0, #0
   13bc4:	mvn	r2, #0
   13bc8:	bl	137c4 <__assert_fail@plt+0x26a8>
   13bcc:	mov	sp, fp
   13bd0:	pop	{fp, pc}
   13bd4:	push	{fp, lr}
   13bd8:	mov	fp, sp
   13bdc:	sub	sp, sp, #48	; 0x30
   13be0:	movw	r2, #33176	; 0x8198
   13be4:	mov	r3, #32
   13be8:	mov	r1, r0
   13bec:	movt	r2, #2
   13bf0:	add	r0, r2, #16
   13bf4:	vld1.64	{d16-d17}, [r2], r3
   13bf8:	mov	r3, sp
   13bfc:	vld1.64	{d18-d19}, [r0]
   13c00:	add	r0, r3, #16
   13c04:	vld1.64	{d20-d21}, [r2]
   13c08:	mov	r2, r3
   13c0c:	vst1.64	{d18-d19}, [r0]
   13c10:	add	r0, r3, #32
   13c14:	vst1.64	{d20-d21}, [r0]
   13c18:	mov	r0, #12
   13c1c:	vst1.64	{d16-d17}, [r2], r0
   13c20:	ldr	r0, [r2]
   13c24:	orr	r0, r0, #67108864	; 0x4000000
   13c28:	str	r0, [r2]
   13c2c:	mov	r0, #0
   13c30:	mvn	r2, #0
   13c34:	bl	137c4 <__assert_fail@plt+0x26a8>
   13c38:	mov	sp, fp
   13c3c:	pop	{fp, pc}
   13c40:	push	{fp, lr}
   13c44:	mov	fp, sp
   13c48:	sub	sp, sp, #48	; 0x30
   13c4c:	mov	ip, r1
   13c50:	mov	r1, r0
   13c54:	movw	r0, #33176	; 0x8198
   13c58:	mov	r3, #32
   13c5c:	movt	r0, #2
   13c60:	add	r2, r0, #16
   13c64:	vld1.64	{d16-d17}, [r0], r3
   13c68:	mov	r3, sp
   13c6c:	vld1.64	{d18-d19}, [r2]
   13c70:	add	r2, r3, #16
   13c74:	vld1.64	{d20-d21}, [r0]
   13c78:	add	r0, r3, #32
   13c7c:	vst1.64	{d18-d19}, [r2]
   13c80:	mov	r2, r3
   13c84:	vst1.64	{d20-d21}, [r0]
   13c88:	mov	r0, #12
   13c8c:	vst1.64	{d16-d17}, [r2], r0
   13c90:	ldr	r0, [r2]
   13c94:	orr	r0, r0, #67108864	; 0x4000000
   13c98:	str	r0, [r2]
   13c9c:	mov	r0, #0
   13ca0:	mov	r2, ip
   13ca4:	bl	137c4 <__assert_fail@plt+0x26a8>
   13ca8:	mov	sp, fp
   13cac:	pop	{fp, pc}
   13cb0:	push	{r4, sl, fp, lr}
   13cb4:	add	fp, sp, #8
   13cb8:	sub	sp, sp, #96	; 0x60
   13cbc:	mov	ip, r2
   13cc0:	mov	r2, sp
   13cc4:	vmov.i32	q8, #0	; 0x00000000
   13cc8:	mov	r4, #28
   13ccc:	cmp	r1, #10
   13cd0:	mov	r3, r2
   13cd4:	add	lr, r2, #16
   13cd8:	vst1.64	{d16-d17}, [r3], r4
   13cdc:	vst1.64	{d16-d17}, [lr]
   13ce0:	vst1.32	{d16-d17}, [r3]
   13ce4:	beq	13d34 <__assert_fail@plt+0x2c18>
   13ce8:	vld1.64	{d16-d17}, [r2], r4
   13cec:	vld1.64	{d18-d19}, [lr]
   13cf0:	add	r3, sp, #48	; 0x30
   13cf4:	add	r4, r3, #4
   13cf8:	vld1.32	{d20-d21}, [r2]
   13cfc:	add	r2, r3, #20
   13d00:	vst1.32	{d16-d17}, [r4]
   13d04:	vst1.32	{d18-d19}, [r2]
   13d08:	add	r2, r3, #32
   13d0c:	vst1.32	{d20-d21}, [r2]
   13d10:	str	r1, [sp, #48]	; 0x30
   13d14:	mvn	r2, #0
   13d18:	ldr	r1, [sp, #60]	; 0x3c
   13d1c:	orr	r1, r1, #67108864	; 0x4000000
   13d20:	str	r1, [sp, #60]	; 0x3c
   13d24:	mov	r1, ip
   13d28:	bl	137c4 <__assert_fail@plt+0x26a8>
   13d2c:	sub	sp, fp, #8
   13d30:	pop	{r4, sl, fp, pc}
   13d34:	bl	11104 <abort@plt>
   13d38:	push	{r4, r5, fp, lr}
   13d3c:	add	fp, sp, #8
   13d40:	sub	sp, sp, #48	; 0x30
   13d44:	mov	ip, r3
   13d48:	movw	r3, #33176	; 0x8198
   13d4c:	mov	lr, #32
   13d50:	cmp	r1, #0
   13d54:	mov	r5, sp
   13d58:	movt	r3, #2
   13d5c:	cmpne	r2, #0
   13d60:	add	r4, r3, #16
   13d64:	vld1.64	{d16-d17}, [r3], lr
   13d68:	vld1.64	{d18-d19}, [r4]
   13d6c:	add	r4, r5, #16
   13d70:	vld1.64	{d20-d21}, [r3]
   13d74:	vst1.64	{d16-d17}, [r5], lr
   13d78:	mov	r3, #10
   13d7c:	vst1.64	{d18-d19}, [r4]
   13d80:	vst1.64	{d20-d21}, [r5]
   13d84:	str	r3, [sp]
   13d88:	bne	13d90 <__assert_fail@plt+0x2c74>
   13d8c:	bl	11104 <abort@plt>
   13d90:	str	r2, [sp, #44]	; 0x2c
   13d94:	str	r1, [sp, #40]	; 0x28
   13d98:	mov	r3, sp
   13d9c:	mov	r1, ip
   13da0:	mvn	r2, #0
   13da4:	bl	137c4 <__assert_fail@plt+0x26a8>
   13da8:	sub	sp, fp, #8
   13dac:	pop	{r4, r5, fp, pc}
   13db0:	push	{r4, r5, fp, lr}
   13db4:	add	fp, sp, #8
   13db8:	sub	sp, sp, #48	; 0x30
   13dbc:	mov	lr, r3
   13dc0:	movw	r3, #33176	; 0x8198
   13dc4:	mov	ip, #32
   13dc8:	cmp	r1, #0
   13dcc:	mov	r5, sp
   13dd0:	movt	r3, #2
   13dd4:	cmpne	r2, #0
   13dd8:	add	r4, r3, #16
   13ddc:	vld1.64	{d16-d17}, [r3], ip
   13de0:	vld1.64	{d18-d19}, [r4]
   13de4:	add	r4, r5, #16
   13de8:	vld1.64	{d20-d21}, [r3]
   13dec:	vst1.64	{d16-d17}, [r5], ip
   13df0:	mov	r3, #10
   13df4:	vst1.64	{d18-d19}, [r4]
   13df8:	vst1.64	{d20-d21}, [r5]
   13dfc:	str	r3, [sp]
   13e00:	bne	13e08 <__assert_fail@plt+0x2cec>
   13e04:	bl	11104 <abort@plt>
   13e08:	ldr	ip, [fp, #8]
   13e0c:	str	r2, [sp, #44]	; 0x2c
   13e10:	str	r1, [sp, #40]	; 0x28
   13e14:	mov	r3, sp
   13e18:	mov	r1, lr
   13e1c:	mov	r2, ip
   13e20:	bl	137c4 <__assert_fail@plt+0x26a8>
   13e24:	sub	sp, fp, #8
   13e28:	pop	{r4, r5, fp, pc}
   13e2c:	push	{r4, sl, fp, lr}
   13e30:	add	fp, sp, #8
   13e34:	sub	sp, sp, #48	; 0x30
   13e38:	mov	ip, r2
   13e3c:	movw	r2, #33176	; 0x8198
   13e40:	mov	lr, #32
   13e44:	cmp	r0, #0
   13e48:	mov	r4, sp
   13e4c:	movt	r2, #2
   13e50:	cmpne	r1, #0
   13e54:	add	r3, r2, #16
   13e58:	vld1.64	{d16-d17}, [r2], lr
   13e5c:	vld1.64	{d18-d19}, [r3]
   13e60:	add	r3, r4, #16
   13e64:	vld1.64	{d20-d21}, [r2]
   13e68:	vst1.64	{d16-d17}, [r4], lr
   13e6c:	mov	r2, #10
   13e70:	vst1.64	{d18-d19}, [r3]
   13e74:	vst1.64	{d20-d21}, [r4]
   13e78:	str	r2, [sp]
   13e7c:	bne	13e84 <__assert_fail@plt+0x2d68>
   13e80:	bl	11104 <abort@plt>
   13e84:	str	r1, [sp, #44]	; 0x2c
   13e88:	str	r0, [sp, #40]	; 0x28
   13e8c:	mov	r3, sp
   13e90:	mov	r0, #0
   13e94:	mov	r1, ip
   13e98:	mvn	r2, #0
   13e9c:	bl	137c4 <__assert_fail@plt+0x26a8>
   13ea0:	sub	sp, fp, #8
   13ea4:	pop	{r4, sl, fp, pc}
   13ea8:	push	{r4, r5, fp, lr}
   13eac:	add	fp, sp, #8
   13eb0:	sub	sp, sp, #48	; 0x30
   13eb4:	mov	lr, r2
   13eb8:	movw	r2, #33176	; 0x8198
   13ebc:	mov	ip, r3
   13ec0:	mov	r3, #32
   13ec4:	cmp	r0, #0
   13ec8:	mov	r5, sp
   13ecc:	movt	r2, #2
   13ed0:	cmpne	r1, #0
   13ed4:	add	r4, r2, #16
   13ed8:	vld1.64	{d16-d17}, [r2], r3
   13edc:	vld1.64	{d18-d19}, [r4]
   13ee0:	add	r4, r5, #16
   13ee4:	vld1.64	{d20-d21}, [r2]
   13ee8:	vst1.64	{d16-d17}, [r5], r3
   13eec:	mov	r2, #10
   13ef0:	vst1.64	{d18-d19}, [r4]
   13ef4:	vst1.64	{d20-d21}, [r5]
   13ef8:	str	r2, [sp]
   13efc:	bne	13f04 <__assert_fail@plt+0x2de8>
   13f00:	bl	11104 <abort@plt>
   13f04:	str	r1, [sp, #44]	; 0x2c
   13f08:	str	r0, [sp, #40]	; 0x28
   13f0c:	mov	r3, sp
   13f10:	mov	r0, #0
   13f14:	mov	r1, lr
   13f18:	mov	r2, ip
   13f1c:	bl	137c4 <__assert_fail@plt+0x26a8>
   13f20:	sub	sp, fp, #8
   13f24:	pop	{r4, r5, fp, pc}
   13f28:	movw	r3, #33024	; 0x8100
   13f2c:	movt	r3, #2
   13f30:	b	137c4 <__assert_fail@plt+0x26a8>
   13f34:	movw	r3, #33024	; 0x8100
   13f38:	mov	r2, r1
   13f3c:	mov	r1, r0
   13f40:	mov	r0, #0
   13f44:	movt	r3, #2
   13f48:	b	137c4 <__assert_fail@plt+0x26a8>
   13f4c:	movw	r3, #33024	; 0x8100
   13f50:	mvn	r2, #0
   13f54:	movt	r3, #2
   13f58:	b	137c4 <__assert_fail@plt+0x26a8>
   13f5c:	movw	r3, #33024	; 0x8100
   13f60:	mov	r1, r0
   13f64:	mov	r0, #0
   13f68:	mvn	r2, #0
   13f6c:	movt	r3, #2
   13f70:	b	137c4 <__assert_fail@plt+0x26a8>
   13f74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f78:	add	fp, sp, #24
   13f7c:	sub	sp, sp, #32
   13f80:	ldr	r6, [fp, #12]
   13f84:	ldr	r7, [fp, #8]
   13f88:	mov	r4, r2
   13f8c:	mov	r8, r0
   13f90:	cmp	r1, #0
   13f94:	beq	13fbc <__assert_fail@plt+0x2ea0>
   13f98:	movw	r2, #27660	; 0x6c0c
   13f9c:	mov	r5, r1
   13fa0:	str	r3, [sp, #4]
   13fa4:	str	r4, [sp]
   13fa8:	mov	r0, r8
   13fac:	mov	r1, #1
   13fb0:	movt	r2, #1
   13fb4:	mov	r3, r5
   13fb8:	b	13fd4 <__assert_fail@plt+0x2eb8>
   13fbc:	movw	r2, #27672	; 0x6c18
   13fc0:	str	r3, [sp]
   13fc4:	mov	r0, r8
   13fc8:	mov	r1, #1
   13fcc:	mov	r3, r4
   13fd0:	movt	r2, #1
   13fd4:	bl	11074 <__fprintf_chk@plt>
   13fd8:	movw	r1, #27679	; 0x6c1f
   13fdc:	mov	r0, #0
   13fe0:	mov	r2, #5
   13fe4:	movt	r1, #1
   13fe8:	bl	10f24 <dcgettext@plt>
   13fec:	movw	r2, #28397	; 0x6eed
   13ff0:	mov	r3, r0
   13ff4:	movw	r0, #2022	; 0x7e6
   13ff8:	mov	r1, #1
   13ffc:	str	r0, [sp]
   14000:	movt	r2, #1
   14004:	mov	r0, r8
   14008:	bl	11074 <__fprintf_chk@plt>
   1400c:	movw	r4, #27004	; 0x697c
   14010:	mov	r1, r8
   14014:	movt	r4, #1
   14018:	mov	r0, r4
   1401c:	bl	10ea0 <fputs_unlocked@plt>
   14020:	movw	r1, #27683	; 0x6c23
   14024:	mov	r0, #0
   14028:	mov	r2, #5
   1402c:	movt	r1, #1
   14030:	bl	10f24 <dcgettext@plt>
   14034:	movw	r3, #27854	; 0x6cce
   14038:	mov	r2, r0
   1403c:	mov	r0, r8
   14040:	mov	r1, #1
   14044:	movt	r3, #1
   14048:	bl	11074 <__fprintf_chk@plt>
   1404c:	mov	r0, r4
   14050:	mov	r1, r8
   14054:	bl	10ea0 <fputs_unlocked@plt>
   14058:	cmp	r6, #9
   1405c:	bhi	14098 <__assert_fail@plt+0x2f7c>
   14060:	add	r0, pc, #0
   14064:	ldr	pc, [r0, r6, lsl #2]
   14068:	muleq	r1, r0, r0
   1406c:	andeq	r4, r1, r4, lsr #1
   14070:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14074:	strdeq	r4, [r1], -ip
   14078:	andeq	r4, r1, r4, lsr #2
   1407c:	andeq	r4, r1, ip, asr #2
   14080:	andeq	r4, r1, r4, ror r1
   14084:	andeq	r4, r1, ip, lsr #3
   14088:	andeq	r4, r1, r4, asr r2
   1408c:	strdeq	r4, [r1], -ip
   14090:	sub	sp, fp, #24
   14094:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14098:	movw	r1, #28207	; 0x6e2f
   1409c:	movt	r1, #1
   140a0:	b	14204 <__assert_fail@plt+0x30e8>
   140a4:	movw	r1, #27888	; 0x6cf0
   140a8:	mov	r0, #0
   140ac:	mov	r2, #5
   140b0:	movt	r1, #1
   140b4:	bl	10f24 <dcgettext@plt>
   140b8:	ldr	r3, [r7]
   140bc:	mov	r2, r0
   140c0:	mov	r0, r8
   140c4:	mov	r1, #1
   140c8:	sub	sp, fp, #24
   140cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   140d0:	b	11074 <__fprintf_chk@plt>
   140d4:	movw	r1, #27904	; 0x6d00
   140d8:	mov	r0, #0
   140dc:	mov	r2, #5
   140e0:	movt	r1, #1
   140e4:	bl	10f24 <dcgettext@plt>
   140e8:	mov	r2, r0
   140ec:	ldr	r3, [r7]
   140f0:	ldr	r0, [r7, #4]
   140f4:	str	r0, [sp]
   140f8:	b	141e8 <__assert_fail@plt+0x30cc>
   140fc:	movw	r1, #27927	; 0x6d17
   14100:	mov	r0, #0
   14104:	mov	r2, #5
   14108:	movt	r1, #1
   1410c:	bl	10f24 <dcgettext@plt>
   14110:	ldr	r3, [r7]
   14114:	mov	r2, r0
   14118:	ldmib	r7, {r0, r1}
   1411c:	stm	sp, {r0, r1}
   14120:	b	141e8 <__assert_fail@plt+0x30cc>
   14124:	movw	r1, #27955	; 0x6d33
   14128:	mov	r0, #0
   1412c:	mov	r2, #5
   14130:	movt	r1, #1
   14134:	bl	10f24 <dcgettext@plt>
   14138:	ldr	r3, [r7]
   1413c:	mov	r2, r0
   14140:	ldmib	r7, {r0, r1, r7}
   14144:	stm	sp, {r0, r1, r7}
   14148:	b	141e8 <__assert_fail@plt+0x30cc>
   1414c:	movw	r1, #27987	; 0x6d53
   14150:	mov	r0, #0
   14154:	mov	r2, #5
   14158:	movt	r1, #1
   1415c:	bl	10f24 <dcgettext@plt>
   14160:	ldr	r3, [r7]
   14164:	mov	r2, r0
   14168:	ldmib	r7, {r0, r1, r6, r7}
   1416c:	stm	sp, {r0, r1, r6, r7}
   14170:	b	141e8 <__assert_fail@plt+0x30cc>
   14174:	movw	r1, #28023	; 0x6d77
   14178:	mov	r0, #0
   1417c:	mov	r2, #5
   14180:	movt	r1, #1
   14184:	bl	10f24 <dcgettext@plt>
   14188:	ldr	r3, [r7]
   1418c:	mov	r2, r0
   14190:	ldmib	r7, {r0, r1, r6}
   14194:	ldr	r5, [r7, #16]
   14198:	ldr	r7, [r7, #20]
   1419c:	stm	sp, {r0, r1, r6}
   141a0:	str	r5, [sp, #12]
   141a4:	str	r7, [sp, #16]
   141a8:	b	141e8 <__assert_fail@plt+0x30cc>
   141ac:	movw	r1, #28063	; 0x6d9f
   141b0:	mov	r0, #0
   141b4:	mov	r2, #5
   141b8:	movt	r1, #1
   141bc:	bl	10f24 <dcgettext@plt>
   141c0:	ldr	r3, [r7]
   141c4:	mov	r2, r0
   141c8:	ldmib	r7, {r0, r1, r6}
   141cc:	ldr	r5, [r7, #16]
   141d0:	ldr	r4, [r7, #20]
   141d4:	ldr	r7, [r7, #24]
   141d8:	stm	sp, {r0, r1, r6}
   141dc:	str	r5, [sp, #12]
   141e0:	str	r4, [sp, #16]
   141e4:	str	r7, [sp, #20]
   141e8:	mov	r0, r8
   141ec:	mov	r1, #1
   141f0:	bl	11074 <__fprintf_chk@plt>
   141f4:	sub	sp, fp, #24
   141f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141fc:	movw	r1, #28155	; 0x6dfb
   14200:	movt	r1, #1
   14204:	mov	r0, #0
   14208:	mov	r2, #5
   1420c:	bl	10f24 <dcgettext@plt>
   14210:	mov	ip, r0
   14214:	ldr	r3, [r7]
   14218:	ldr	r0, [r7, #4]
   1421c:	ldr	r1, [r7, #8]
   14220:	ldr	r6, [r7, #12]
   14224:	ldr	r5, [r7, #16]
   14228:	ldr	r4, [r7, #20]
   1422c:	ldr	r2, [r7, #24]
   14230:	ldr	lr, [r7, #28]
   14234:	ldr	r7, [r7, #32]
   14238:	stm	sp, {r0, r1, r6}
   1423c:	str	r5, [sp, #12]
   14240:	str	r4, [sp, #16]
   14244:	str	r2, [sp, #20]
   14248:	str	lr, [sp, #24]
   1424c:	str	r7, [sp, #28]
   14250:	b	14298 <__assert_fail@plt+0x317c>
   14254:	movw	r1, #28107	; 0x6dcb
   14258:	mov	r0, #0
   1425c:	mov	r2, #5
   14260:	movt	r1, #1
   14264:	bl	10f24 <dcgettext@plt>
   14268:	mov	ip, r0
   1426c:	ldr	r3, [r7]
   14270:	ldmib	r7, {r0, r1, r6}
   14274:	ldr	r5, [r7, #16]
   14278:	ldr	r4, [r7, #20]
   1427c:	ldr	r2, [r7, #24]
   14280:	ldr	r7, [r7, #28]
   14284:	stm	sp, {r0, r1, r6}
   14288:	str	r5, [sp, #12]
   1428c:	str	r4, [sp, #16]
   14290:	str	r2, [sp, #20]
   14294:	str	r7, [sp, #24]
   14298:	mov	r0, r8
   1429c:	mov	r1, #1
   142a0:	mov	r2, ip
   142a4:	bl	11074 <__fprintf_chk@plt>
   142a8:	sub	sp, fp, #24
   142ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142b0:	push	{r4, sl, fp, lr}
   142b4:	add	fp, sp, #8
   142b8:	sub	sp, sp, #8
   142bc:	ldr	ip, [fp, #8]
   142c0:	mov	lr, #0
   142c4:	ldr	r4, [ip, lr, lsl #2]
   142c8:	add	lr, lr, #1
   142cc:	cmp	r4, #0
   142d0:	bne	142c4 <__assert_fail@plt+0x31a8>
   142d4:	sub	r4, lr, #1
   142d8:	str	ip, [sp]
   142dc:	str	r4, [sp, #4]
   142e0:	bl	13f74 <__assert_fail@plt+0x2e58>
   142e4:	sub	sp, fp, #8
   142e8:	pop	{r4, sl, fp, pc}
   142ec:	push	{fp, lr}
   142f0:	mov	fp, sp
   142f4:	sub	sp, sp, #48	; 0x30
   142f8:	ldr	ip, [fp, #8]
   142fc:	ldr	lr, [ip]
   14300:	cmp	lr, #0
   14304:	str	lr, [sp, #8]
   14308:	beq	143a4 <__assert_fail@plt+0x3288>
   1430c:	ldr	lr, [ip, #4]
   14310:	cmp	lr, #0
   14314:	str	lr, [sp, #12]
   14318:	beq	143ac <__assert_fail@plt+0x3290>
   1431c:	ldr	lr, [ip, #8]
   14320:	cmp	lr, #0
   14324:	str	lr, [sp, #16]
   14328:	beq	143b4 <__assert_fail@plt+0x3298>
   1432c:	ldr	lr, [ip, #12]
   14330:	cmp	lr, #0
   14334:	str	lr, [sp, #20]
   14338:	beq	143bc <__assert_fail@plt+0x32a0>
   1433c:	ldr	lr, [ip, #16]
   14340:	cmp	lr, #0
   14344:	str	lr, [sp, #24]
   14348:	beq	143c4 <__assert_fail@plt+0x32a8>
   1434c:	ldr	lr, [ip, #20]
   14350:	cmp	lr, #0
   14354:	str	lr, [sp, #28]
   14358:	beq	143cc <__assert_fail@plt+0x32b0>
   1435c:	ldr	lr, [ip, #24]
   14360:	cmp	lr, #0
   14364:	str	lr, [sp, #32]
   14368:	beq	143d4 <__assert_fail@plt+0x32b8>
   1436c:	ldr	lr, [ip, #28]
   14370:	cmp	lr, #0
   14374:	str	lr, [sp, #36]	; 0x24
   14378:	beq	143dc <__assert_fail@plt+0x32c0>
   1437c:	ldr	lr, [ip, #32]
   14380:	cmp	lr, #0
   14384:	str	lr, [sp, #40]	; 0x28
   14388:	beq	143e4 <__assert_fail@plt+0x32c8>
   1438c:	ldr	lr, [ip, #36]	; 0x24
   14390:	mov	ip, #10
   14394:	cmp	lr, #0
   14398:	str	lr, [sp, #44]	; 0x2c
   1439c:	movweq	ip, #9
   143a0:	b	143e8 <__assert_fail@plt+0x32cc>
   143a4:	mov	ip, #0
   143a8:	b	143e8 <__assert_fail@plt+0x32cc>
   143ac:	mov	ip, #1
   143b0:	b	143e8 <__assert_fail@plt+0x32cc>
   143b4:	mov	ip, #2
   143b8:	b	143e8 <__assert_fail@plt+0x32cc>
   143bc:	mov	ip, #3
   143c0:	b	143e8 <__assert_fail@plt+0x32cc>
   143c4:	mov	ip, #4
   143c8:	b	143e8 <__assert_fail@plt+0x32cc>
   143cc:	mov	ip, #5
   143d0:	b	143e8 <__assert_fail@plt+0x32cc>
   143d4:	mov	ip, #6
   143d8:	b	143e8 <__assert_fail@plt+0x32cc>
   143dc:	mov	ip, #7
   143e0:	b	143e8 <__assert_fail@plt+0x32cc>
   143e4:	mov	ip, #8
   143e8:	add	lr, sp, #8
   143ec:	str	ip, [sp, #4]
   143f0:	str	lr, [sp]
   143f4:	bl	13f74 <__assert_fail@plt+0x2e58>
   143f8:	mov	sp, fp
   143fc:	pop	{fp, pc}
   14400:	push	{fp, lr}
   14404:	mov	fp, sp
   14408:	sub	sp, sp, #56	; 0x38
   1440c:	add	ip, fp, #8
   14410:	str	ip, [sp, #12]
   14414:	ldr	lr, [fp, #8]
   14418:	cmp	lr, #0
   1441c:	str	lr, [sp, #16]
   14420:	beq	144bc <__assert_fail@plt+0x33a0>
   14424:	ldr	lr, [ip, #4]
   14428:	cmp	lr, #0
   1442c:	str	lr, [sp, #20]
   14430:	beq	144c4 <__assert_fail@plt+0x33a8>
   14434:	ldr	lr, [ip, #8]
   14438:	cmp	lr, #0
   1443c:	str	lr, [sp, #24]
   14440:	beq	144cc <__assert_fail@plt+0x33b0>
   14444:	ldr	lr, [ip, #12]
   14448:	cmp	lr, #0
   1444c:	str	lr, [sp, #28]
   14450:	beq	144d4 <__assert_fail@plt+0x33b8>
   14454:	ldr	lr, [ip, #16]
   14458:	cmp	lr, #0
   1445c:	str	lr, [sp, #32]
   14460:	beq	144dc <__assert_fail@plt+0x33c0>
   14464:	ldr	lr, [ip, #20]
   14468:	cmp	lr, #0
   1446c:	str	lr, [sp, #36]	; 0x24
   14470:	beq	144e4 <__assert_fail@plt+0x33c8>
   14474:	ldr	lr, [ip, #24]
   14478:	cmp	lr, #0
   1447c:	str	lr, [sp, #40]	; 0x28
   14480:	beq	144ec <__assert_fail@plt+0x33d0>
   14484:	ldr	lr, [ip, #28]
   14488:	cmp	lr, #0
   1448c:	str	lr, [sp, #44]	; 0x2c
   14490:	beq	144f4 <__assert_fail@plt+0x33d8>
   14494:	ldr	lr, [ip, #32]
   14498:	cmp	lr, #0
   1449c:	str	lr, [sp, #48]	; 0x30
   144a0:	beq	144fc <__assert_fail@plt+0x33e0>
   144a4:	ldr	lr, [ip, #36]	; 0x24
   144a8:	mov	ip, #10
   144ac:	cmp	lr, #0
   144b0:	str	lr, [sp, #52]	; 0x34
   144b4:	movweq	ip, #9
   144b8:	b	14500 <__assert_fail@plt+0x33e4>
   144bc:	mov	ip, #0
   144c0:	b	14500 <__assert_fail@plt+0x33e4>
   144c4:	mov	ip, #1
   144c8:	b	14500 <__assert_fail@plt+0x33e4>
   144cc:	mov	ip, #2
   144d0:	b	14500 <__assert_fail@plt+0x33e4>
   144d4:	mov	ip, #3
   144d8:	b	14500 <__assert_fail@plt+0x33e4>
   144dc:	mov	ip, #4
   144e0:	b	14500 <__assert_fail@plt+0x33e4>
   144e4:	mov	ip, #5
   144e8:	b	14500 <__assert_fail@plt+0x33e4>
   144ec:	mov	ip, #6
   144f0:	b	14500 <__assert_fail@plt+0x33e4>
   144f4:	mov	ip, #7
   144f8:	b	14500 <__assert_fail@plt+0x33e4>
   144fc:	mov	ip, #8
   14500:	add	lr, sp, #16
   14504:	str	ip, [sp, #4]
   14508:	str	lr, [sp]
   1450c:	bl	13f74 <__assert_fail@plt+0x2e58>
   14510:	mov	sp, fp
   14514:	pop	{fp, pc}
   14518:	push	{fp, lr}
   1451c:	mov	fp, sp
   14520:	movw	r0, #33108	; 0x8154
   14524:	movt	r0, #2
   14528:	ldr	r1, [r0]
   1452c:	movw	r0, #27004	; 0x697c
   14530:	movt	r0, #1
   14534:	bl	10ea0 <fputs_unlocked@plt>
   14538:	movw	r1, #28267	; 0x6e6b
   1453c:	mov	r0, #0
   14540:	mov	r2, #5
   14544:	movt	r1, #1
   14548:	bl	10f24 <dcgettext@plt>
   1454c:	movw	r2, #28287	; 0x6e7f
   14550:	mov	r1, r0
   14554:	mov	r0, #1
   14558:	movt	r2, #1
   1455c:	bl	1105c <__printf_chk@plt>
   14560:	movw	r1, #28309	; 0x6e95
   14564:	mov	r0, #0
   14568:	mov	r2, #5
   1456c:	movt	r1, #1
   14570:	bl	10f24 <dcgettext@plt>
   14574:	movw	r2, #26485	; 0x6775
   14578:	movw	r3, #26813	; 0x68bd
   1457c:	mov	r1, r0
   14580:	mov	r0, #1
   14584:	movt	r2, #1
   14588:	movt	r3, #1
   1458c:	bl	1105c <__printf_chk@plt>
   14590:	movw	r1, #28329	; 0x6ea9
   14594:	mov	r0, #0
   14598:	mov	r2, #5
   1459c:	movt	r1, #1
   145a0:	bl	10f24 <dcgettext@plt>
   145a4:	movw	r2, #28368	; 0x6ed0
   145a8:	mov	r1, r0
   145ac:	mov	r0, #1
   145b0:	movt	r2, #1
   145b4:	pop	{fp, lr}
   145b8:	b	1105c <__printf_chk@plt>
   145bc:	push	{r4, r5, r6, sl, fp, lr}
   145c0:	add	fp, sp, #16
   145c4:	mov	r4, r2
   145c8:	mov	r5, r1
   145cc:	mov	r6, r0
   145d0:	bl	15f44 <__assert_fail@plt+0x4e28>
   145d4:	cmp	r0, #0
   145d8:	popne	{r4, r5, r6, sl, fp, pc}
   145dc:	cmp	r6, #0
   145e0:	beq	145f4 <__assert_fail@plt+0x34d8>
   145e4:	cmp	r5, #0
   145e8:	cmpne	r4, #0
   145ec:	bne	145f4 <__assert_fail@plt+0x34d8>
   145f0:	pop	{r4, r5, r6, sl, fp, pc}
   145f4:	bl	14b94 <__assert_fail@plt+0x3a78>
   145f8:	push	{r4, r5, r6, sl, fp, lr}
   145fc:	add	fp, sp, #16
   14600:	mov	r4, r2
   14604:	mov	r5, r1
   14608:	mov	r6, r0
   1460c:	bl	15f44 <__assert_fail@plt+0x4e28>
   14610:	cmp	r0, #0
   14614:	popne	{r4, r5, r6, sl, fp, pc}
   14618:	cmp	r6, #0
   1461c:	beq	14630 <__assert_fail@plt+0x3514>
   14620:	cmp	r5, #0
   14624:	cmpne	r4, #0
   14628:	bne	14630 <__assert_fail@plt+0x3514>
   1462c:	pop	{r4, r5, r6, sl, fp, pc}
   14630:	bl	14b94 <__assert_fail@plt+0x3a78>
   14634:	push	{fp, lr}
   14638:	mov	fp, sp
   1463c:	bl	15914 <__assert_fail@plt+0x47f8>
   14640:	cmp	r0, #0
   14644:	popne	{fp, pc}
   14648:	bl	14b94 <__assert_fail@plt+0x3a78>
   1464c:	push	{fp, lr}
   14650:	mov	fp, sp
   14654:	bl	15914 <__assert_fail@plt+0x47f8>
   14658:	cmp	r0, #0
   1465c:	popne	{fp, pc}
   14660:	bl	14b94 <__assert_fail@plt+0x3a78>
   14664:	push	{fp, lr}
   14668:	mov	fp, sp
   1466c:	bl	15914 <__assert_fail@plt+0x47f8>
   14670:	cmp	r0, #0
   14674:	popne	{fp, pc}
   14678:	bl	14b94 <__assert_fail@plt+0x3a78>
   1467c:	push	{r4, r5, fp, lr}
   14680:	add	fp, sp, #8
   14684:	mov	r4, r1
   14688:	mov	r5, r0
   1468c:	bl	15944 <__assert_fail@plt+0x4828>
   14690:	cmp	r0, #0
   14694:	popne	{r4, r5, fp, pc}
   14698:	cmp	r5, #0
   1469c:	beq	146ac <__assert_fail@plt+0x3590>
   146a0:	cmp	r4, #0
   146a4:	bne	146ac <__assert_fail@plt+0x3590>
   146a8:	pop	{r4, r5, fp, pc}
   146ac:	bl	14b94 <__assert_fail@plt+0x3a78>
   146b0:	push	{fp, lr}
   146b4:	mov	fp, sp
   146b8:	cmp	r1, #0
   146bc:	orreq	r1, r1, #1
   146c0:	bl	15944 <__assert_fail@plt+0x4828>
   146c4:	cmp	r0, #0
   146c8:	popne	{fp, pc}
   146cc:	bl	14b94 <__assert_fail@plt+0x3a78>
   146d0:	push	{fp, lr}
   146d4:	mov	fp, sp
   146d8:	clz	r3, r2
   146dc:	lsr	ip, r3, #5
   146e0:	clz	r3, r1
   146e4:	lsr	r3, r3, #5
   146e8:	orrs	r3, r3, ip
   146ec:	movwne	r1, #1
   146f0:	movwne	r2, #1
   146f4:	bl	15f44 <__assert_fail@plt+0x4e28>
   146f8:	cmp	r0, #0
   146fc:	popne	{fp, pc}
   14700:	bl	14b94 <__assert_fail@plt+0x3a78>
   14704:	push	{fp, lr}
   14708:	mov	fp, sp
   1470c:	mov	r2, r1
   14710:	mov	r1, r0
   14714:	mov	r0, #0
   14718:	bl	15f44 <__assert_fail@plt+0x4e28>
   1471c:	cmp	r0, #0
   14720:	popne	{fp, pc}
   14724:	bl	14b94 <__assert_fail@plt+0x3a78>
   14728:	push	{fp, lr}
   1472c:	mov	fp, sp
   14730:	mov	r2, r1
   14734:	mov	r1, r0
   14738:	clz	r0, r2
   1473c:	clz	r3, r1
   14740:	lsr	r0, r0, #5
   14744:	lsr	r3, r3, #5
   14748:	orrs	r0, r3, r0
   1474c:	movwne	r1, #1
   14750:	movwne	r2, #1
   14754:	mov	r0, #0
   14758:	bl	15f44 <__assert_fail@plt+0x4e28>
   1475c:	cmp	r0, #0
   14760:	popne	{fp, pc}
   14764:	bl	14b94 <__assert_fail@plt+0x3a78>
   14768:	push	{r4, r5, r6, sl, fp, lr}
   1476c:	add	fp, sp, #16
   14770:	ldr	r5, [r1]
   14774:	mov	r4, r1
   14778:	mov	r6, r0
   1477c:	cmp	r0, #0
   14780:	beq	14798 <__assert_fail@plt+0x367c>
   14784:	mov	r0, #1
   14788:	add	r0, r0, r5, lsr #1
   1478c:	adds	r5, r5, r0
   14790:	bcc	147a0 <__assert_fail@plt+0x3684>
   14794:	b	147dc <__assert_fail@plt+0x36c0>
   14798:	cmp	r5, #0
   1479c:	movweq	r5, #64	; 0x40
   147a0:	mov	r0, r6
   147a4:	mov	r1, r5
   147a8:	mov	r2, #1
   147ac:	bl	15f44 <__assert_fail@plt+0x4e28>
   147b0:	cmp	r5, #0
   147b4:	mov	r1, r5
   147b8:	movwne	r1, #1
   147bc:	cmp	r0, #0
   147c0:	bne	147d4 <__assert_fail@plt+0x36b8>
   147c4:	clz	r2, r6
   147c8:	lsr	r2, r2, #5
   147cc:	orrs	r1, r2, r1
   147d0:	bne	147dc <__assert_fail@plt+0x36c0>
   147d4:	str	r5, [r4]
   147d8:	pop	{r4, r5, r6, sl, fp, pc}
   147dc:	bl	14b94 <__assert_fail@plt+0x3a78>
   147e0:	push	{r4, r5, r6, r7, fp, lr}
   147e4:	add	fp, sp, #16
   147e8:	ldr	r5, [r1]
   147ec:	mov	r6, r2
   147f0:	mov	r4, r1
   147f4:	mov	r7, r0
   147f8:	cmp	r0, #0
   147fc:	beq	14814 <__assert_fail@plt+0x36f8>
   14800:	mov	r0, #1
   14804:	add	r0, r0, r5, lsr #1
   14808:	adds	r5, r5, r0
   1480c:	bcc	1482c <__assert_fail@plt+0x3710>
   14810:	b	14860 <__assert_fail@plt+0x3744>
   14814:	cmp	r5, #0
   14818:	bne	1482c <__assert_fail@plt+0x3710>
   1481c:	mov	r0, #64	; 0x40
   14820:	cmp	r6, #64	; 0x40
   14824:	udiv	r5, r0, r6
   14828:	addhi	r5, r5, #1
   1482c:	mov	r0, r7
   14830:	mov	r1, r5
   14834:	mov	r2, r6
   14838:	bl	15f44 <__assert_fail@plt+0x4e28>
   1483c:	cmp	r0, #0
   14840:	bne	14858 <__assert_fail@plt+0x373c>
   14844:	cmp	r7, #0
   14848:	beq	14860 <__assert_fail@plt+0x3744>
   1484c:	cmp	r6, #0
   14850:	cmpne	r5, #0
   14854:	bne	14860 <__assert_fail@plt+0x3744>
   14858:	str	r5, [r4]
   1485c:	pop	{r4, r5, r6, r7, fp, pc}
   14860:	bl	14b94 <__assert_fail@plt+0x3a78>
   14864:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14868:	add	fp, sp, #24
   1486c:	mov	r8, r1
   14870:	ldr	r1, [r1]
   14874:	mov	r5, r0
   14878:	add	r0, r1, r1, asr #1
   1487c:	cmp	r0, r1
   14880:	mvnvs	r0, #-2147483648	; 0x80000000
   14884:	cmp	r0, r3
   14888:	mov	r7, r0
   1488c:	movgt	r7, r3
   14890:	cmn	r3, #1
   14894:	movle	r7, r0
   14898:	ldr	r0, [fp, #8]
   1489c:	cmn	r0, #1
   148a0:	ble	148c8 <__assert_fail@plt+0x37ac>
   148a4:	cmp	r0, #0
   148a8:	beq	1491c <__assert_fail@plt+0x3800>
   148ac:	cmn	r7, #1
   148b0:	ble	148f0 <__assert_fail@plt+0x37d4>
   148b4:	mvn	r4, #-2147483648	; 0x80000000
   148b8:	udiv	r6, r4, r0
   148bc:	cmp	r6, r7
   148c0:	bge	1491c <__assert_fail@plt+0x3800>
   148c4:	b	1492c <__assert_fail@plt+0x3810>
   148c8:	cmn	r7, #1
   148cc:	ble	1490c <__assert_fail@plt+0x37f0>
   148d0:	cmn	r0, #1
   148d4:	beq	1491c <__assert_fail@plt+0x3800>
   148d8:	mov	r6, #-2147483648	; 0x80000000
   148dc:	mvn	r4, #-2147483648	; 0x80000000
   148e0:	sdiv	r6, r6, r0
   148e4:	cmp	r6, r7
   148e8:	bge	1491c <__assert_fail@plt+0x3800>
   148ec:	b	1492c <__assert_fail@plt+0x3810>
   148f0:	beq	1491c <__assert_fail@plt+0x3800>
   148f4:	mov	r6, #-2147483648	; 0x80000000
   148f8:	mvn	r4, #-2147483648	; 0x80000000
   148fc:	sdiv	r6, r6, r7
   14900:	cmp	r6, r0
   14904:	bge	1491c <__assert_fail@plt+0x3800>
   14908:	b	1492c <__assert_fail@plt+0x3810>
   1490c:	mvn	r4, #-2147483648	; 0x80000000
   14910:	sdiv	r6, r4, r0
   14914:	cmp	r7, r6
   14918:	blt	1492c <__assert_fail@plt+0x3810>
   1491c:	mul	r6, r7, r0
   14920:	mov	r4, #64	; 0x40
   14924:	cmp	r6, #63	; 0x3f
   14928:	bgt	14934 <__assert_fail@plt+0x3818>
   1492c:	sdiv	r7, r4, r0
   14930:	mul	r6, r7, r0
   14934:	cmp	r5, #0
   14938:	moveq	r4, #0
   1493c:	streq	r4, [r8]
   14940:	sub	r4, r7, r1
   14944:	cmp	r4, r2
   14948:	bge	149f4 <__assert_fail@plt+0x38d8>
   1494c:	add	r7, r1, r2
   14950:	mov	r6, #0
   14954:	mov	r2, #0
   14958:	cmp	r7, r3
   1495c:	movwgt	r6, #1
   14960:	cmn	r3, #1
   14964:	movwgt	r2, #1
   14968:	cmp	r7, r1
   1496c:	bvs	14a28 <__assert_fail@plt+0x390c>
   14970:	ands	r1, r2, r6
   14974:	bne	14a28 <__assert_fail@plt+0x390c>
   14978:	cmn	r0, #1
   1497c:	ble	149a4 <__assert_fail@plt+0x3888>
   14980:	cmp	r0, #0
   14984:	beq	149f0 <__assert_fail@plt+0x38d4>
   14988:	cmn	r7, #1
   1498c:	ble	149c8 <__assert_fail@plt+0x38ac>
   14990:	mvn	r1, #-2147483648	; 0x80000000
   14994:	udiv	r1, r1, r0
   14998:	cmp	r1, r7
   1499c:	bge	149f0 <__assert_fail@plt+0x38d4>
   149a0:	b	14a28 <__assert_fail@plt+0x390c>
   149a4:	cmn	r7, #1
   149a8:	ble	149e0 <__assert_fail@plt+0x38c4>
   149ac:	cmn	r0, #1
   149b0:	beq	149f0 <__assert_fail@plt+0x38d4>
   149b4:	mov	r1, #-2147483648	; 0x80000000
   149b8:	sdiv	r1, r1, r0
   149bc:	cmp	r1, r7
   149c0:	bge	149f0 <__assert_fail@plt+0x38d4>
   149c4:	b	14a28 <__assert_fail@plt+0x390c>
   149c8:	beq	149f0 <__assert_fail@plt+0x38d4>
   149cc:	mov	r1, #-2147483648	; 0x80000000
   149d0:	sdiv	r1, r1, r7
   149d4:	cmp	r1, r0
   149d8:	bge	149f0 <__assert_fail@plt+0x38d4>
   149dc:	b	14a28 <__assert_fail@plt+0x390c>
   149e0:	mvn	r1, #-2147483648	; 0x80000000
   149e4:	sdiv	r1, r1, r0
   149e8:	cmp	r7, r1
   149ec:	blt	14a28 <__assert_fail@plt+0x390c>
   149f0:	mul	r6, r7, r0
   149f4:	mov	r0, r5
   149f8:	mov	r1, r6
   149fc:	bl	15944 <__assert_fail@plt+0x4828>
   14a00:	cmp	r6, #0
   14a04:	movwne	r6, #1
   14a08:	cmp	r0, #0
   14a0c:	bne	14a20 <__assert_fail@plt+0x3904>
   14a10:	clz	r1, r5
   14a14:	lsr	r1, r1, #5
   14a18:	orrs	r1, r1, r6
   14a1c:	bne	14a28 <__assert_fail@plt+0x390c>
   14a20:	str	r7, [r8]
   14a24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a28:	bl	14b94 <__assert_fail@plt+0x3a78>
   14a2c:	push	{fp, lr}
   14a30:	mov	fp, sp
   14a34:	mov	r1, #1
   14a38:	bl	158c0 <__assert_fail@plt+0x47a4>
   14a3c:	cmp	r0, #0
   14a40:	popne	{fp, pc}
   14a44:	bl	14b94 <__assert_fail@plt+0x3a78>
   14a48:	push	{fp, lr}
   14a4c:	mov	fp, sp
   14a50:	bl	158c0 <__assert_fail@plt+0x47a4>
   14a54:	cmp	r0, #0
   14a58:	popne	{fp, pc}
   14a5c:	bl	14b94 <__assert_fail@plt+0x3a78>
   14a60:	push	{fp, lr}
   14a64:	mov	fp, sp
   14a68:	mov	r1, #1
   14a6c:	bl	158c0 <__assert_fail@plt+0x47a4>
   14a70:	cmp	r0, #0
   14a74:	popne	{fp, pc}
   14a78:	bl	14b94 <__assert_fail@plt+0x3a78>
   14a7c:	push	{fp, lr}
   14a80:	mov	fp, sp
   14a84:	bl	158c0 <__assert_fail@plt+0x47a4>
   14a88:	cmp	r0, #0
   14a8c:	popne	{fp, pc}
   14a90:	bl	14b94 <__assert_fail@plt+0x3a78>
   14a94:	push	{r4, r5, r6, sl, fp, lr}
   14a98:	add	fp, sp, #16
   14a9c:	mov	r5, r0
   14aa0:	mov	r0, r1
   14aa4:	mov	r4, r1
   14aa8:	bl	15914 <__assert_fail@plt+0x47f8>
   14aac:	cmp	r0, #0
   14ab0:	beq	14acc <__assert_fail@plt+0x39b0>
   14ab4:	mov	r1, r5
   14ab8:	mov	r2, r4
   14abc:	mov	r6, r0
   14ac0:	bl	10ee8 <memcpy@plt>
   14ac4:	mov	r0, r6
   14ac8:	pop	{r4, r5, r6, sl, fp, pc}
   14acc:	bl	14b94 <__assert_fail@plt+0x3a78>
   14ad0:	push	{r4, r5, r6, sl, fp, lr}
   14ad4:	add	fp, sp, #16
   14ad8:	mov	r5, r0
   14adc:	mov	r0, r1
   14ae0:	mov	r4, r1
   14ae4:	bl	15914 <__assert_fail@plt+0x47f8>
   14ae8:	cmp	r0, #0
   14aec:	beq	14b08 <__assert_fail@plt+0x39ec>
   14af0:	mov	r1, r5
   14af4:	mov	r2, r4
   14af8:	mov	r6, r0
   14afc:	bl	10ee8 <memcpy@plt>
   14b00:	mov	r0, r6
   14b04:	pop	{r4, r5, r6, sl, fp, pc}
   14b08:	bl	14b94 <__assert_fail@plt+0x3a78>
   14b0c:	push	{r4, r5, r6, sl, fp, lr}
   14b10:	add	fp, sp, #16
   14b14:	mov	r5, r0
   14b18:	add	r0, r1, #1
   14b1c:	mov	r4, r1
   14b20:	bl	15914 <__assert_fail@plt+0x47f8>
   14b24:	cmp	r0, #0
   14b28:	beq	14b50 <__assert_fail@plt+0x3a34>
   14b2c:	mov	r6, r0
   14b30:	mov	r0, #0
   14b34:	mov	r1, r5
   14b38:	mov	r2, r4
   14b3c:	strb	r0, [r6, r4]
   14b40:	mov	r0, r6
   14b44:	bl	10ee8 <memcpy@plt>
   14b48:	mov	r0, r6
   14b4c:	pop	{r4, r5, r6, sl, fp, pc}
   14b50:	bl	14b94 <__assert_fail@plt+0x3a78>
   14b54:	push	{r4, r5, r6, sl, fp, lr}
   14b58:	add	fp, sp, #16
   14b5c:	mov	r4, r0
   14b60:	bl	11020 <strlen@plt>
   14b64:	add	r5, r0, #1
   14b68:	mov	r0, r5
   14b6c:	bl	15914 <__assert_fail@plt+0x47f8>
   14b70:	cmp	r0, #0
   14b74:	beq	14b90 <__assert_fail@plt+0x3a74>
   14b78:	mov	r1, r4
   14b7c:	mov	r2, r5
   14b80:	mov	r6, r0
   14b84:	bl	10ee8 <memcpy@plt>
   14b88:	mov	r0, r6
   14b8c:	pop	{r4, r5, r6, sl, fp, pc}
   14b90:	bl	14b94 <__assert_fail@plt+0x3a78>
   14b94:	push	{fp, lr}
   14b98:	mov	fp, sp
   14b9c:	movw	r0, #33020	; 0x80fc
   14ba0:	movw	r1, #28444	; 0x6f1c
   14ba4:	mov	r2, #5
   14ba8:	movt	r0, #2
   14bac:	movt	r1, #1
   14bb0:	ldr	r4, [r0]
   14bb4:	mov	r0, #0
   14bb8:	bl	10f24 <dcgettext@plt>
   14bbc:	movw	r2, #27407	; 0x6b0f
   14bc0:	mov	r3, r0
   14bc4:	mov	r0, r4
   14bc8:	mov	r1, #0
   14bcc:	movt	r2, #1
   14bd0:	bl	10f9c <error@plt>
   14bd4:	bl	11104 <abort@plt>
   14bd8:	push	{r4, sl, fp, lr}
   14bdc:	add	fp, sp, #8
   14be0:	bl	15998 <__assert_fail@plt+0x487c>
   14be4:	mov	r4, r0
   14be8:	cmp	r0, #0
   14bec:	bne	14c00 <__assert_fail@plt+0x3ae4>
   14bf0:	bl	11038 <__errno_location@plt>
   14bf4:	ldr	r0, [r0]
   14bf8:	cmp	r0, #12
   14bfc:	beq	14c08 <__assert_fail@plt+0x3aec>
   14c00:	mov	r0, r4
   14c04:	pop	{r4, sl, fp, pc}
   14c08:	bl	14b94 <__assert_fail@plt+0x3a78>
   14c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c10:	add	fp, sp, #28
   14c14:	sub	sp, sp, #44	; 0x2c
   14c18:	cmp	r2, #37	; 0x25
   14c1c:	bcs	158a0 <__assert_fail@plt+0x4784>
   14c20:	ldr	sl, [fp, #8]
   14c24:	mov	r6, r2
   14c28:	mov	r7, r1
   14c2c:	mov	r4, r0
   14c30:	str	r3, [sp, #36]	; 0x24
   14c34:	bl	11038 <__errno_location@plt>
   14c38:	mov	r5, r0
   14c3c:	mov	r0, #0
   14c40:	str	r0, [r5]
   14c44:	bl	11008 <__ctype_b_loc@plt>
   14c48:	ldr	r1, [r0]
   14c4c:	mov	r2, r4
   14c50:	ldrb	r0, [r2], #1
   14c54:	add	r3, r1, r0, lsl #1
   14c58:	ldrb	r3, [r3, #1]
   14c5c:	tst	r3, #32
   14c60:	bne	14c50 <__assert_fail@plt+0x3b34>
   14c64:	sub	r9, fp, #32
   14c68:	cmp	r7, #0
   14c6c:	mov	r8, #4
   14c70:	movne	r9, r7
   14c74:	cmp	r0, #45	; 0x2d
   14c78:	beq	15038 <__assert_fail@plt+0x3f1c>
   14c7c:	mov	r0, r4
   14c80:	mov	r1, r9
   14c84:	mov	r2, r6
   14c88:	mov	r3, #0
   14c8c:	bl	10f00 <__strtoull_internal@plt>
   14c90:	mov	r7, r1
   14c94:	ldr	r1, [r9]
   14c98:	cmp	r1, r4
   14c9c:	beq	14cd4 <__assert_fail@plt+0x3bb8>
   14ca0:	mov	r6, r0
   14ca4:	ldr	r0, [r5]
   14ca8:	cmp	r0, #0
   14cac:	beq	14ff0 <__assert_fail@plt+0x3ed4>
   14cb0:	cmp	r0, #34	; 0x22
   14cb4:	bne	15038 <__assert_fail@plt+0x3f1c>
   14cb8:	mov	r8, #1
   14cbc:	cmp	sl, #0
   14cc0:	beq	1588c <__assert_fail@plt+0x4770>
   14cc4:	ldrb	r4, [r1]
   14cc8:	cmp	r4, #0
   14ccc:	bne	14d18 <__assert_fail@plt+0x3bfc>
   14cd0:	b	1588c <__assert_fail@plt+0x4770>
   14cd4:	cmp	sl, #0
   14cd8:	beq	15038 <__assert_fail@plt+0x3f1c>
   14cdc:	mov	r5, r1
   14ce0:	ldrb	r1, [r4]
   14ce4:	cmp	r1, #0
   14ce8:	beq	15038 <__assert_fail@plt+0x3f1c>
   14cec:	mov	r0, sl
   14cf0:	bl	1102c <strchr@plt>
   14cf4:	cmp	r0, #0
   14cf8:	beq	15038 <__assert_fail@plt+0x3f1c>
   14cfc:	mov	r1, r5
   14d00:	mov	r8, #0
   14d04:	mov	r6, #1
   14d08:	mov	r7, #0
   14d0c:	ldrb	r4, [r1]
   14d10:	cmp	r4, #0
   14d14:	beq	1588c <__assert_fail@plt+0x4770>
   14d18:	str	r1, [sp, #32]
   14d1c:	mov	r0, sl
   14d20:	mov	r1, r4
   14d24:	bl	1102c <strchr@plt>
   14d28:	cmp	r0, #0
   14d2c:	beq	1502c <__assert_fail@plt+0x3f10>
   14d30:	sub	r0, r4, #69	; 0x45
   14d34:	mov	r1, #1
   14d38:	mov	r3, #0
   14d3c:	mov	r5, #1024	; 0x400
   14d40:	cmp	r0, #47	; 0x2f
   14d44:	str	r1, [sp, #28]
   14d48:	bhi	14e4c <__assert_fail@plt+0x3d30>
   14d4c:	add	r1, pc, #0
   14d50:	ldr	pc, [r1, r0, lsl #2]
   14d54:	andeq	r4, r1, r4, lsl lr
   14d58:	andeq	r4, r1, ip, asr #28
   14d5c:	andeq	r4, r1, r4, lsl lr
   14d60:	andeq	r4, r1, ip, asr #28
   14d64:	andeq	r4, r1, ip, asr #28
   14d68:	andeq	r4, r1, ip, asr #28
   14d6c:	andeq	r4, r1, r4, lsl lr
   14d70:	andeq	r4, r1, ip, asr #28
   14d74:	andeq	r4, r1, r4, lsl lr
   14d78:	andeq	r4, r1, ip, asr #28
   14d7c:	andeq	r4, r1, ip, asr #28
   14d80:	andeq	r4, r1, r4, lsl lr
   14d84:	andeq	r4, r1, ip, asr #28
   14d88:	andeq	r4, r1, ip, asr #28
   14d8c:	andeq	r4, r1, ip, asr #28
   14d90:	andeq	r4, r1, r4, lsl lr
   14d94:	andeq	r4, r1, ip, asr #28
   14d98:	andeq	r4, r1, ip, asr #28
   14d9c:	andeq	r4, r1, ip, asr #28
   14da0:	andeq	r4, r1, ip, asr #28
   14da4:	andeq	r4, r1, r4, lsl lr
   14da8:	andeq	r4, r1, r4, lsl lr
   14dac:	andeq	r4, r1, ip, asr #28
   14db0:	andeq	r4, r1, ip, asr #28
   14db4:	andeq	r4, r1, ip, asr #28
   14db8:	andeq	r4, r1, ip, asr #28
   14dbc:	andeq	r4, r1, ip, asr #28
   14dc0:	andeq	r4, r1, ip, asr #28
   14dc4:	andeq	r4, r1, ip, asr #28
   14dc8:	andeq	r4, r1, ip, asr #28
   14dcc:	andeq	r4, r1, ip, asr #28
   14dd0:	andeq	r4, r1, ip, asr #28
   14dd4:	andeq	r4, r1, ip, asr #28
   14dd8:	andeq	r4, r1, ip, asr #28
   14ddc:	andeq	r4, r1, r4, lsl lr
   14de0:	andeq	r4, r1, ip, asr #28
   14de4:	andeq	r4, r1, ip, asr #28
   14de8:	andeq	r4, r1, ip, asr #28
   14dec:	andeq	r4, r1, r4, lsl lr
   14df0:	andeq	r4, r1, ip, asr #28
   14df4:	andeq	r4, r1, r4, lsl lr
   14df8:	andeq	r4, r1, ip, asr #28
   14dfc:	andeq	r4, r1, ip, asr #28
   14e00:	andeq	r4, r1, ip, asr #28
   14e04:	andeq	r4, r1, ip, asr #28
   14e08:	andeq	r4, r1, ip, asr #28
   14e0c:	andeq	r4, r1, ip, asr #28
   14e10:	andeq	r4, r1, r4, lsl lr
   14e14:	mov	r0, sl
   14e18:	mov	r1, #48	; 0x30
   14e1c:	bl	1102c <strchr@plt>
   14e20:	cmp	r0, #0
   14e24:	beq	14e48 <__assert_fail@plt+0x3d2c>
   14e28:	ldr	r1, [sp, #32]
   14e2c:	ldrb	r0, [r1, #1]
   14e30:	cmp	r0, #66	; 0x42
   14e34:	cmpne	r0, #68	; 0x44
   14e38:	bne	15000 <__assert_fail@plt+0x3ee4>
   14e3c:	mov	r5, #1000	; 0x3e8
   14e40:	mov	r0, #2
   14e44:	str	r0, [sp, #28]
   14e48:	mov	r3, #0
   14e4c:	sub	r0, r4, #66	; 0x42
   14e50:	cmp	r0, #53	; 0x35
   14e54:	bhi	1502c <__assert_fail@plt+0x3f10>
   14e58:	add	r1, pc, #0
   14e5c:	ldr	pc, [r1, r0, lsl #2]
   14e60:	muleq	r1, ip, r3
   14e64:	andeq	r5, r1, ip, lsr #32
   14e68:	andeq	r5, r1, ip, lsr #32
   14e6c:	andeq	r5, r1, r4, asr #7
   14e70:	andeq	r5, r1, ip, lsr #32
   14e74:	andeq	r4, r1, r8, lsr pc
   14e78:	andeq	r5, r1, ip, lsr #32
   14e7c:	andeq	r5, r1, ip, lsr #32
   14e80:	andeq	r5, r1, ip, lsr #32
   14e84:	andeq	r5, r1, r4, asr #32
   14e88:	andeq	r5, r1, ip, lsr #32
   14e8c:	andeq	r5, r1, ip, lsl #1
   14e90:	andeq	r5, r1, ip, lsr #32
   14e94:	andeq	r5, r1, ip, lsr #32
   14e98:	andeq	r5, r1, r8, lsl r5
   14e9c:	andeq	r5, r1, ip, lsr #32
   14ea0:	andeq	r5, r1, ip, lsr #32
   14ea4:	andeq	r5, r1, ip, lsr #32
   14ea8:	andeq	r5, r1, r8, lsl r1
   14eac:	andeq	r5, r1, ip, lsr #32
   14eb0:	andeq	r5, r1, ip, lsr #32
   14eb4:	andeq	r5, r1, ip, lsr #32
   14eb8:	andeq	r5, r1, ip, lsr #32
   14ebc:	andeq	r5, r1, r0, asr #12
   14ec0:	andeq	r5, r1, r0, lsl #4
   14ec4:	andeq	r5, r1, ip, lsr #32
   14ec8:	andeq	r5, r1, ip, lsr #32
   14ecc:	andeq	r5, r1, ip, lsr #32
   14ed0:	andeq	r5, r1, ip, lsr #32
   14ed4:	andeq	r5, r1, ip, lsr #32
   14ed8:	andeq	r5, r1, ip, lsr #32
   14edc:	andeq	r5, r1, ip, lsr #32
   14ee0:	andeq	r5, r1, r4, lsl r8
   14ee4:	andeq	r5, r1, ip, ror #16
   14ee8:	andeq	r5, r1, ip, lsr #32
   14eec:	andeq	r5, r1, ip, lsr #32
   14ef0:	andeq	r5, r1, ip, lsr #32
   14ef4:	andeq	r4, r1, r8, lsr pc
   14ef8:	andeq	r5, r1, ip, lsr #32
   14efc:	andeq	r5, r1, ip, lsr #32
   14f00:	andeq	r5, r1, ip, lsr #32
   14f04:	andeq	r5, r1, r4, asr #32
   14f08:	andeq	r5, r1, ip, lsr #32
   14f0c:	andeq	r5, r1, ip, lsl #1
   14f10:	andeq	r5, r1, ip, lsr #32
   14f14:	andeq	r5, r1, ip, lsr #32
   14f18:	andeq	r5, r1, ip, lsr #32
   14f1c:	andeq	r5, r1, ip, lsr #32
   14f20:	andeq	r5, r1, ip, lsr #32
   14f24:	andeq	r5, r1, ip, lsr #32
   14f28:	andeq	r5, r1, r8, lsl r1
   14f2c:	andeq	r5, r1, ip, lsr #32
   14f30:	andeq	r5, r1, ip, lsr #32
   14f34:	andeq	r5, r1, r8, asr #16
   14f38:	mvn	r0, #0
   14f3c:	mvn	r1, #0
   14f40:	mov	r2, r5
   14f44:	mov	sl, r3
   14f48:	bl	16088 <__assert_fail@plt+0x4f6c>
   14f4c:	subs	r3, r0, r6
   14f50:	mov	lr, #0
   14f54:	umull	r4, r2, r6, r5
   14f58:	str	r1, [sp, #20]
   14f5c:	sbcs	r3, r1, r7
   14f60:	mla	ip, r6, sl, r2
   14f64:	mov	r2, r1
   14f68:	movwcc	lr, #1
   14f6c:	mla	r7, r7, r5, ip
   14f70:	mov	r2, #0
   14f74:	cmp	lr, #0
   14f78:	mvnne	r4, #0
   14f7c:	mvnne	r7, #0
   14f80:	subs	r6, r0, r4
   14f84:	sbcs	r6, r1, r7
   14f88:	movwcc	r2, #1
   14f8c:	umull	r3, r6, r4, r5
   14f90:	cmp	r2, #0
   14f94:	str	r6, [sp, #16]
   14f98:	mvnne	r3, #0
   14f9c:	cmp	r2, #0
   14fa0:	umull	r6, ip, r3, r5
   14fa4:	mla	r1, r3, sl, ip
   14fa8:	ldr	ip, [sp, #16]
   14fac:	str	r1, [sp, #12]
   14fb0:	mla	r4, r4, sl, ip
   14fb4:	mla	r4, r7, r5, r4
   14fb8:	ldr	r7, [sp, #12]
   14fbc:	mvnne	r4, #0
   14fc0:	subs	r0, r0, r3
   14fc4:	ldr	r0, [sp, #20]
   14fc8:	mla	r7, r4, r5, r7
   14fcc:	sbcs	r0, r0, r4
   14fd0:	mov	r0, #0
   14fd4:	movwcc	r0, #1
   14fd8:	cmp	r0, #0
   14fdc:	mov	r1, r0
   14fe0:	orr	r0, lr, r2
   14fe4:	mvnne	r7, #0
   14fe8:	mvnne	r6, #0
   14fec:	b	15638 <__assert_fail@plt+0x451c>
   14ff0:	mov	r8, r0
   14ff4:	cmp	sl, #0
   14ff8:	bne	14cc4 <__assert_fail@plt+0x3ba8>
   14ffc:	b	1588c <__assert_fail@plt+0x4770>
   15000:	cmp	r0, #105	; 0x69
   15004:	mov	r3, #0
   15008:	bne	14e4c <__assert_fail@plt+0x3d30>
   1500c:	ldrb	r0, [r1, #2]
   15010:	mov	r1, #1
   15014:	cmp	r0, #66	; 0x42
   15018:	movweq	r1, #3
   1501c:	str	r1, [sp, #28]
   15020:	sub	r0, r4, #66	; 0x42
   15024:	cmp	r0, #53	; 0x35
   15028:	bls	14e58 <__assert_fail@plt+0x3d3c>
   1502c:	ldr	r0, [sp, #36]	; 0x24
   15030:	orr	r8, r8, #2
   15034:	strd	r6, [r0]
   15038:	mov	r0, r8
   1503c:	sub	sp, fp, #28
   15040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15044:	mvn	r0, #0
   15048:	mvn	r1, #0
   1504c:	mov	r2, r5
   15050:	mov	r4, r3
   15054:	bl	16088 <__assert_fail@plt+0x4f6c>
   15058:	subs	r0, r0, r6
   1505c:	mov	r2, #0
   15060:	sbcs	r0, r1, r7
   15064:	movwcc	r2, #1
   15068:	umull	r0, r1, r6, r5
   1506c:	mla	r1, r6, r4, r1
   15070:	cmp	r2, #0
   15074:	mov	r3, r2
   15078:	mla	r7, r7, r5, r1
   1507c:	mvnne	r0, #0
   15080:	mvnne	r7, #0
   15084:	mov	r6, r0
   15088:	b	1586c <__assert_fail@plt+0x4750>
   1508c:	mvn	r0, #0
   15090:	mvn	r1, #0
   15094:	mov	r2, r5
   15098:	str	r3, [sp, #24]
   1509c:	bl	16088 <__assert_fail@plt+0x4f6c>
   150a0:	subs	r3, r0, r6
   150a4:	mov	ip, r0
   150a8:	umull	r4, r0, r6, r5
   150ac:	mov	sl, #0
   150b0:	sbcs	r3, r1, r7
   150b4:	str	r0, [sp, #20]
   150b8:	ldr	r0, [sp, #24]
   150bc:	mov	r3, #0
   150c0:	movwcc	r3, #1
   150c4:	cmp	r3, #0
   150c8:	mvnne	r4, #0
   150cc:	cmp	r3, #0
   150d0:	umull	lr, r2, r4, r5
   150d4:	mla	r2, r4, r0, r2
   150d8:	str	r2, [sp, #16]
   150dc:	ldr	r2, [sp, #20]
   150e0:	mla	r6, r6, r0, r2
   150e4:	ldr	r0, [sp, #16]
   150e8:	mla	r6, r7, r5, r6
   150ec:	mvnne	r6, #0
   150f0:	mla	r7, r6, r5, r0
   150f4:	subs	r0, ip, r4
   150f8:	sbcs	r0, r1, r6
   150fc:	movwcc	sl, #1
   15100:	cmp	sl, #0
   15104:	orr	r3, r3, sl
   15108:	mvnne	lr, #0
   1510c:	mvnne	r7, #0
   15110:	mov	r6, lr
   15114:	b	1586c <__assert_fail@plt+0x4750>
   15118:	mvn	r0, #0
   1511c:	mvn	r1, #0
   15120:	mov	r2, r5
   15124:	mov	sl, r3
   15128:	bl	16088 <__assert_fail@plt+0x4f6c>
   1512c:	subs	r3, r0, r6
   15130:	mov	ip, r1
   15134:	umull	r2, lr, r6, r5
   15138:	str	r0, [sp, #20]
   1513c:	sbcs	r3, r1, r7
   15140:	mov	r1, #0
   15144:	mla	r6, r6, sl, lr
   15148:	mov	lr, #0
   1514c:	str	ip, [sp, #16]
   15150:	movwcc	r1, #1
   15154:	mla	r7, r7, r5, r6
   15158:	cmp	r1, #0
   1515c:	mvnne	r2, #0
   15160:	cmp	r1, #0
   15164:	umull	r3, r4, r2, r5
   15168:	mvnne	r7, #0
   1516c:	mla	r4, r2, sl, r4
   15170:	subs	r2, r0, r2
   15174:	sbcs	r2, ip, r7
   15178:	mla	r4, r7, r5, r4
   1517c:	movwcc	lr, #1
   15180:	mov	r2, #0
   15184:	cmp	lr, #0
   15188:	mvnne	r3, #0
   1518c:	mvnne	r4, #0
   15190:	subs	r7, r0, r3
   15194:	mov	r0, r5
   15198:	sbcs	r7, ip, r4
   1519c:	movwcc	r2, #1
   151a0:	umull	r5, r7, r3, r5
   151a4:	cmp	r2, #0
   151a8:	mla	r3, r3, sl, r7
   151ac:	mvnne	r5, #0
   151b0:	mla	r3, r4, r0, r3
   151b4:	cmp	r2, #0
   151b8:	umull	r6, ip, r5, r0
   151bc:	mvnne	r3, #0
   151c0:	mla	ip, r5, sl, ip
   151c4:	mla	r7, r3, r0, ip
   151c8:	ldr	r0, [sp, #20]
   151cc:	subs	r0, r0, r5
   151d0:	ldr	r0, [sp, #16]
   151d4:	sbcs	r0, r0, r3
   151d8:	mov	r0, #0
   151dc:	movwcc	r0, #1
   151e0:	cmp	r0, #0
   151e4:	mov	r3, r0
   151e8:	orr	r0, r1, lr
   151ec:	orr	r0, r0, r2
   151f0:	mvnne	r7, #0
   151f4:	mvnne	r6, #0
   151f8:	orr	r3, r0, r3
   151fc:	b	1586c <__assert_fail@plt+0x4750>
   15200:	mvn	r0, #0
   15204:	mvn	r1, #0
   15208:	mov	r2, r5
   1520c:	mov	r4, r3
   15210:	str	r3, [sp, #24]
   15214:	bl	16088 <__assert_fail@plt+0x4f6c>
   15218:	umull	r3, r2, r6, r5
   1521c:	mla	r2, r6, r4, r2
   15220:	subs	r6, r0, r6
   15224:	sbcs	r6, r1, r7
   15228:	mla	r2, r7, r5, r2
   1522c:	mov	r7, #0
   15230:	mov	r6, #0
   15234:	movwcc	r6, #1
   15238:	cmp	r6, #0
   1523c:	str	r6, [sp, #20]
   15240:	mvnne	r3, #0
   15244:	mvnne	r2, #0
   15248:	subs	r4, r0, r3
   1524c:	umull	r6, ip, r3, r5
   15250:	sbcs	r4, r1, r2
   15254:	ldr	r4, [sp, #24]
   15258:	movwcc	r7, #1
   1525c:	cmp	r7, #0
   15260:	mov	lr, r7
   15264:	str	r7, [sp, #16]
   15268:	mvnne	r6, #0
   1526c:	cmp	lr, #0
   15270:	mov	lr, #0
   15274:	umull	sl, r7, r6, r5
   15278:	mla	r3, r3, r4, ip
   1527c:	mla	r7, r6, r4, r7
   15280:	mov	r4, r0
   15284:	mla	r2, r2, r5, r3
   15288:	mvnne	r2, #0
   1528c:	subs	r3, r0, r6
   15290:	mov	r0, #0
   15294:	mla	r7, r2, r5, r7
   15298:	sbcs	r2, r1, r2
   1529c:	mov	r3, r4
   152a0:	movwcc	r0, #1
   152a4:	str	r3, [sp, #4]
   152a8:	cmp	r0, #0
   152ac:	str	r0, [sp, #12]
   152b0:	mov	r0, r1
   152b4:	mvnne	sl, #0
   152b8:	mvnne	r7, #0
   152bc:	str	r0, [sp, #8]
   152c0:	subs	r2, r4, sl
   152c4:	ldr	r4, [sp, #24]
   152c8:	sbcs	r2, r1, r7
   152cc:	movwcc	lr, #1
   152d0:	umull	r6, r2, sl, r5
   152d4:	cmp	lr, #0
   152d8:	mvnne	r6, #0
   152dc:	mla	r2, sl, r4, r2
   152e0:	cmp	lr, #0
   152e4:	umull	r1, ip, r6, r5
   152e8:	mla	r2, r7, r5, r2
   152ec:	mla	ip, r6, r4, ip
   152f0:	mvnne	r2, #0
   152f4:	subs	r6, r3, r6
   152f8:	mla	r7, r2, r5, ip
   152fc:	sbcs	r2, r0, r2
   15300:	mov	ip, #0
   15304:	movwcc	ip, #1
   15308:	mov	r2, #0
   1530c:	cmp	ip, #0
   15310:	mvnne	r1, #0
   15314:	mvnne	r7, #0
   15318:	subs	r6, r3, r1
   1531c:	ldr	r3, [sp, #24]
   15320:	sbcs	r6, r0, r7
   15324:	umull	r0, sl, r1, r5
   15328:	movwcc	r2, #1
   1532c:	cmp	r2, #0
   15330:	mvnne	r0, #0
   15334:	mla	r1, r1, r3, sl
   15338:	cmp	r2, #0
   1533c:	umull	r6, r4, r0, r5
   15340:	mla	r1, r7, r5, r1
   15344:	mla	r4, r0, r3, r4
   15348:	ldr	r3, [sp, #4]
   1534c:	mvnne	r1, #0
   15350:	mla	r7, r1, r5, r4
   15354:	ldr	r5, [sp, #16]
   15358:	subs	r0, r3, r0
   1535c:	ldr	r0, [sp, #8]
   15360:	sbcs	r0, r0, r1
   15364:	mov	r0, #0
   15368:	movwcc	r0, #1
   1536c:	cmp	r0, #0
   15370:	mov	r1, r0
   15374:	ldr	r0, [sp, #20]
   15378:	mvnne	r7, #0
   1537c:	mvnne	r6, #0
   15380:	orr	r0, r0, r5
   15384:	ldr	r5, [sp, #12]
   15388:	orr	r0, r0, r5
   1538c:	orr	r0, r0, lr
   15390:	orr	r0, r0, ip
   15394:	orr	r0, r0, r2
   15398:	b	15808 <__assert_fail@plt+0x46ec>
   1539c:	mov	r1, #0
   153a0:	lsl	r2, r7, #10
   153a4:	lsl	r0, r6, #10
   153a8:	lsr	r3, r7, #22
   153ac:	cmp	r1, r7, lsr #22
   153b0:	orr	r2, r2, r6, lsr #22
   153b4:	mvnne	r0, #0
   153b8:	movwne	r3, #1
   153bc:	cmp	r1, r7, lsr #22
   153c0:	b	15838 <__assert_fail@plt+0x471c>
   153c4:	mvn	r0, #0
   153c8:	mvn	r1, #0
   153cc:	mov	r2, r5
   153d0:	mov	sl, r3
   153d4:	bl	16088 <__assert_fail@plt+0x4f6c>
   153d8:	subs	r2, r0, r6
   153dc:	mov	ip, r0
   153e0:	mov	r0, #0
   153e4:	sbcs	r2, r1, r7
   153e8:	movwcc	r0, #1
   153ec:	umull	r4, r2, r6, r5
   153f0:	cmp	r0, #0
   153f4:	mla	r2, r6, sl, r2
   153f8:	str	r0, [sp, #20]
   153fc:	mvnne	r4, #0
   15400:	cmp	r0, #0
   15404:	mla	r2, r7, r5, r2
   15408:	mov	r0, #0
   1540c:	umull	lr, r3, r4, r5
   15410:	mvnne	r2, #0
   15414:	mla	r3, r4, sl, r3
   15418:	mla	r6, r2, r5, r3
   1541c:	subs	r3, ip, r4
   15420:	sbcs	r2, r1, r2
   15424:	mov	r3, r1
   15428:	movwcc	r0, #1
   1542c:	str	r3, [sp, #8]
   15430:	cmp	r0, #0
   15434:	str	r0, [sp, #16]
   15438:	mov	r0, ip
   1543c:	mvnne	lr, #0
   15440:	mvnne	r6, #0
   15444:	str	r0, [sp, #12]
   15448:	subs	r2, ip, lr
   1544c:	umull	r7, r4, lr, r5
   15450:	sbcs	r2, r1, r6
   15454:	mla	r4, lr, sl, r4
   15458:	mov	r2, #0
   1545c:	mla	r6, r6, r5, r4
   15460:	mov	r4, #0
   15464:	movwcc	r2, #1
   15468:	cmp	r2, #0
   1546c:	mvnne	r7, #0
   15470:	cmp	r2, #0
   15474:	umull	r1, ip, r7, r5
   15478:	mvnne	r6, #0
   1547c:	mla	ip, r7, sl, ip
   15480:	subs	r7, r0, r7
   15484:	mla	lr, r6, r5, ip
   15488:	sbcs	r7, r3, r6
   1548c:	mov	ip, #0
   15490:	movwcc	ip, #1
   15494:	cmp	ip, #0
   15498:	mvnne	r1, #0
   1549c:	mvnne	lr, #0
   154a0:	subs	r7, r0, r1
   154a4:	sbcs	r7, r3, lr
   154a8:	movwcc	r4, #1
   154ac:	umull	r0, r7, r1, r5
   154b0:	cmp	r4, #0
   154b4:	mla	r1, r1, sl, r7
   154b8:	mvnne	r0, #0
   154bc:	mla	r1, lr, r5, r1
   154c0:	cmp	r4, #0
   154c4:	umull	r6, r3, r0, r5
   154c8:	mvnne	r1, #0
   154cc:	mla	r3, r0, sl, r3
   154d0:	mla	r7, r1, r5, r3
   154d4:	ldr	r3, [sp, #12]
   154d8:	subs	r0, r3, r0
   154dc:	ldr	r3, [sp, #16]
   154e0:	ldr	r0, [sp, #8]
   154e4:	sbcs	r0, r0, r1
   154e8:	mov	r0, #0
   154ec:	movwcc	r0, #1
   154f0:	cmp	r0, #0
   154f4:	mov	r1, r0
   154f8:	ldr	r0, [sp, #20]
   154fc:	mvnne	r7, #0
   15500:	mvnne	r6, #0
   15504:	orr	r0, r0, r3
   15508:	orr	r0, r0, r2
   1550c:	orr	r0, r0, ip
   15510:	orr	r0, r0, r4
   15514:	b	15638 <__assert_fail@plt+0x451c>
   15518:	mvn	r0, #0
   1551c:	mvn	r1, #0
   15520:	mov	r2, r5
   15524:	mov	sl, r3
   15528:	bl	16088 <__assert_fail@plt+0x4f6c>
   1552c:	umull	r3, r2, r6, r5
   15530:	mov	lr, r1
   15534:	mov	r1, r0
   15538:	mla	r2, r6, sl, r2
   1553c:	subs	r6, r0, r6
   15540:	mov	r0, #0
   15544:	sbcs	r6, lr, r7
   15548:	mla	r2, r7, r5, r2
   1554c:	movwcc	r0, #1
   15550:	cmp	r0, #0
   15554:	str	r0, [sp, #20]
   15558:	mov	r0, r1
   1555c:	mvnne	r3, #0
   15560:	mvnne	r2, #0
   15564:	str	r0, [sp, #16]
   15568:	subs	r4, r1, r3
   1556c:	umull	r7, ip, r3, r5
   15570:	sbcs	r4, lr, r2
   15574:	mla	r3, r3, sl, ip
   15578:	mov	ip, #0
   1557c:	mov	r4, #0
   15580:	mla	r2, r2, r5, r3
   15584:	movwcc	r4, #1
   15588:	cmp	r4, #0
   1558c:	mvnne	r7, #0
   15590:	cmp	r4, #0
   15594:	umull	r1, r6, r7, r5
   15598:	mvnne	r2, #0
   1559c:	mla	r6, r7, sl, r6
   155a0:	mla	r3, r2, r5, r6
   155a4:	subs	r6, r0, r7
   155a8:	sbcs	r2, lr, r2
   155ac:	movwcc	ip, #1
   155b0:	mov	r2, #0
   155b4:	cmp	ip, #0
   155b8:	mvnne	r1, #0
   155bc:	mvnne	r3, #0
   155c0:	subs	r6, r0, r1
   155c4:	sbcs	r6, lr, r3
   155c8:	movwcc	r2, #1
   155cc:	umull	r0, r6, r1, r5
   155d0:	cmp	r2, #0
   155d4:	str	r6, [sp, #12]
   155d8:	mvnne	r0, #0
   155dc:	cmp	r2, #0
   155e0:	umull	r6, r7, r0, r5
   155e4:	mla	r7, r0, sl, r7
   155e8:	str	r7, [sp, #8]
   155ec:	ldr	r7, [sp, #12]
   155f0:	mla	r1, r1, sl, r7
   155f4:	mla	r1, r3, r5, r1
   155f8:	ldr	r3, [sp, #8]
   155fc:	mvnne	r1, #0
   15600:	mla	r7, r1, r5, r3
   15604:	ldr	r3, [sp, #16]
   15608:	subs	r0, r3, r0
   1560c:	sbcs	r0, lr, r1
   15610:	mov	r0, #0
   15614:	movwcc	r0, #1
   15618:	cmp	r0, #0
   1561c:	mov	r1, r0
   15620:	ldr	r0, [sp, #20]
   15624:	mvnne	r7, #0
   15628:	mvnne	r6, #0
   1562c:	orr	r0, r0, r4
   15630:	orr	r0, r0, ip
   15634:	orr	r0, r0, r2
   15638:	orr	r3, r0, r1
   1563c:	b	1586c <__assert_fail@plt+0x4750>
   15640:	mvn	r0, #0
   15644:	mvn	r1, #0
   15648:	mov	r2, r5
   1564c:	mov	sl, r3
   15650:	bl	16088 <__assert_fail@plt+0x4f6c>
   15654:	mov	ip, r1
   15658:	subs	r1, r0, r6
   1565c:	umull	r3, lr, r6, r5
   15660:	mov	r2, r5
   15664:	sbcs	r1, ip, r7
   15668:	mla	r6, r6, sl, lr
   1566c:	str	ip, [sp, #4]
   15670:	mov	r1, #0
   15674:	mla	r7, r7, r2, r6
   15678:	movwcc	r1, #1
   1567c:	cmp	r1, #0
   15680:	str	r1, [sp, #20]
   15684:	mvnne	r3, #0
   15688:	cmp	r1, #0
   1568c:	mov	r1, r0
   15690:	umull	r4, r5, r3, r5
   15694:	mvnne	r7, #0
   15698:	mov	lr, r1
   1569c:	mla	r5, r3, sl, r5
   156a0:	subs	r3, r0, r3
   156a4:	sbcs	r0, ip, r7
   156a8:	mla	r5, r7, r2, r5
   156ac:	mov	r0, #0
   156b0:	movwcc	r0, #1
   156b4:	cmp	r0, #0
   156b8:	str	r0, [sp, #16]
   156bc:	mvnne	r4, #0
   156c0:	mvnne	r5, #0
   156c4:	subs	r0, r1, r4
   156c8:	mov	r1, #0
   156cc:	sbcs	r0, ip, r5
   156d0:	movwcc	r1, #1
   156d4:	umull	r3, r0, r4, r2
   156d8:	cmp	r1, #0
   156dc:	mla	r0, r4, sl, r0
   156e0:	mov	r4, lr
   156e4:	str	r1, [sp, #12]
   156e8:	mvnne	r3, #0
   156ec:	mla	r0, r5, r2, r0
   156f0:	cmp	r1, #0
   156f4:	str	r4, [sp]
   156f8:	umull	r7, r6, r3, r2
   156fc:	mvnne	r0, #0
   15700:	mla	r6, r3, sl, r6
   15704:	subs	r3, lr, r3
   15708:	mla	r5, r0, r2, r6
   1570c:	sbcs	r0, ip, r0
   15710:	mov	r3, #0
   15714:	mov	r0, #0
   15718:	movwcc	r0, #1
   1571c:	cmp	r0, #0
   15720:	str	r0, [sp, #8]
   15724:	mvnne	r7, #0
   15728:	mvnne	r5, #0
   1572c:	subs	r0, lr, r7
   15730:	sbcs	r0, ip, r5
   15734:	movwcc	r3, #1
   15738:	umull	r6, r0, r7, r2
   1573c:	cmp	r3, #0
   15740:	mla	r7, r7, sl, r0
   15744:	mov	r0, ip
   15748:	mvnne	r6, #0
   1574c:	mla	r7, r5, r2, r7
   15750:	cmp	r3, #0
   15754:	mov	r5, #0
   15758:	umull	r1, lr, r6, r2
   1575c:	mvnne	r7, #0
   15760:	mla	lr, r6, sl, lr
   15764:	subs	r6, r4, r6
   15768:	mla	lr, r7, r2, lr
   1576c:	sbcs	r7, ip, r7
   15770:	mov	ip, #0
   15774:	movwcc	ip, #1
   15778:	cmp	ip, #0
   1577c:	mvnne	r1, #0
   15780:	mvnne	lr, #0
   15784:	subs	r7, r4, r1
   15788:	sbcs	r7, r0, lr
   1578c:	movwcc	r5, #1
   15790:	umull	r0, r7, r1, r2
   15794:	cmp	r5, #0
   15798:	mla	r1, r1, sl, r7
   1579c:	mvnne	r0, #0
   157a0:	mla	r1, lr, r2, r1
   157a4:	cmp	r5, #0
   157a8:	umull	r6, r4, r0, r2
   157ac:	mvnne	r1, #0
   157b0:	mla	r4, r0, sl, r4
   157b4:	mla	r7, r1, r2, r4
   157b8:	ldr	r2, [sp]
   157bc:	subs	r0, r2, r0
   157c0:	ldr	r2, [sp, #16]
   157c4:	ldr	r0, [sp, #4]
   157c8:	sbcs	r0, r0, r1
   157cc:	mov	r0, #0
   157d0:	movwcc	r0, #1
   157d4:	cmp	r0, #0
   157d8:	mov	r1, r0
   157dc:	ldr	r0, [sp, #20]
   157e0:	mvnne	r7, #0
   157e4:	mvnne	r6, #0
   157e8:	orr	r0, r0, r2
   157ec:	ldr	r2, [sp, #12]
   157f0:	orr	r0, r0, r2
   157f4:	ldr	r2, [sp, #8]
   157f8:	orr	r0, r0, r2
   157fc:	orr	r0, r0, r3
   15800:	orr	r0, r0, ip
   15804:	orr	r0, r0, r5
   15808:	orr	r0, r0, r1
   1580c:	and	r3, r0, #1
   15810:	b	1586c <__assert_fail@plt+0x4750>
   15814:	mov	r1, #0
   15818:	lsl	r2, r7, #9
   1581c:	lsl	r0, r6, #9
   15820:	lsr	r3, r7, #23
   15824:	cmp	r1, r7, lsr #23
   15828:	orr	r2, r2, r6, lsr #23
   1582c:	mvnne	r0, #0
   15830:	movwne	r3, #1
   15834:	cmp	r1, r7, lsr #23
   15838:	mvnne	r2, #0
   1583c:	mov	r6, r0
   15840:	mov	r7, r2
   15844:	b	1586c <__assert_fail@plt+0x4750>
   15848:	lsl	r1, r7, #1
   1584c:	lsl	r0, r6, #1
   15850:	cmp	r7, #0
   15854:	lsr	r3, r7, #31
   15858:	orr	r1, r1, r6, lsr #31
   1585c:	mvnlt	r0, #0
   15860:	mvnlt	r1, #0
   15864:	mov	r6, r0
   15868:	mov	r7, r1
   1586c:	ldr	r1, [sp, #32]
   15870:	ldr	r2, [sp, #28]
   15874:	orr	r8, r3, r8
   15878:	add	r0, r1, r2
   1587c:	str	r0, [r9]
   15880:	ldrb	r0, [r1, r2]
   15884:	cmp	r0, #0
   15888:	orrne	r8, r8, #2
   1588c:	ldr	r0, [sp, #36]	; 0x24
   15890:	strd	r6, [r0]
   15894:	mov	r0, r8
   15898:	sub	sp, fp, #28
   1589c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158a0:	movw	r0, #28461	; 0x6f2d
   158a4:	movw	r1, #28499	; 0x6f53
   158a8:	movw	r3, #28515	; 0x6f63
   158ac:	mov	r2, #85	; 0x55
   158b0:	movt	r0, #1
   158b4:	movt	r1, #1
   158b8:	movt	r3, #1
   158bc:	bl	1111c <__assert_fail@plt>
   158c0:	clz	r2, r1
   158c4:	clz	r3, r0
   158c8:	lsr	r2, r2, #5
   158cc:	lsr	r3, r3, #5
   158d0:	orrs	r2, r3, r2
   158d4:	movwne	r1, #1
   158d8:	movwne	r0, #1
   158dc:	cmp	r1, #0
   158e0:	beq	15910 <__assert_fail@plt+0x47f4>
   158e4:	mvn	r2, #-2147483648	; 0x80000000
   158e8:	udiv	r2, r2, r1
   158ec:	cmp	r2, r0
   158f0:	bcs	15910 <__assert_fail@plt+0x47f4>
   158f4:	push	{fp, lr}
   158f8:	mov	fp, sp
   158fc:	bl	11038 <__errno_location@plt>
   15900:	mov	r1, #12
   15904:	str	r1, [r0]
   15908:	mov	r0, #0
   1590c:	pop	{fp, pc}
   15910:	b	10e94 <calloc@plt>
   15914:	cmp	r0, #0
   15918:	movweq	r0, #1
   1591c:	cmn	r0, #1
   15920:	ble	15928 <__assert_fail@plt+0x480c>
   15924:	b	10fc0 <malloc@plt>
   15928:	push	{fp, lr}
   1592c:	mov	fp, sp
   15930:	bl	11038 <__errno_location@plt>
   15934:	mov	r1, #12
   15938:	str	r1, [r0]
   1593c:	mov	r0, #0
   15940:	pop	{fp, pc}
   15944:	push	{fp, lr}
   15948:	mov	fp, sp
   1594c:	cmp	r0, #0
   15950:	beq	1596c <__assert_fail@plt+0x4850>
   15954:	cmp	r1, #0
   15958:	beq	15978 <__assert_fail@plt+0x485c>
   1595c:	cmn	r1, #1
   15960:	ble	15984 <__assert_fail@plt+0x4868>
   15964:	pop	{fp, lr}
   15968:	b	10f30 <realloc@plt>
   1596c:	mov	r0, r1
   15970:	pop	{fp, lr}
   15974:	b	15914 <__assert_fail@plt+0x47f8>
   15978:	bl	11fb8 <__assert_fail@plt+0xe9c>
   1597c:	mov	r0, #0
   15980:	pop	{fp, pc}
   15984:	bl	11038 <__errno_location@plt>
   15988:	mov	r1, #12
   1598c:	str	r1, [r0]
   15990:	mov	r0, #0
   15994:	pop	{fp, pc}
   15998:	push	{fp, lr}
   1599c:	mov	fp, sp
   159a0:	sub	sp, sp, #8
   159a4:	mov	r1, r0
   159a8:	movw	r0, #22996	; 0x59d4
   159ac:	mov	r2, #0
   159b0:	mov	r3, #0
   159b4:	movt	r0, #1
   159b8:	str	r2, [sp]
   159bc:	mov	r2, #0
   159c0:	str	r0, [sp, #4]
   159c4:	mvn	r0, #99	; 0x63
   159c8:	bl	15a90 <__assert_fail@plt+0x4974>
   159cc:	mov	sp, fp
   159d0:	pop	{fp, pc}
   159d4:	cmn	r0, #100	; 0x64
   159d8:	bne	159ec <__assert_fail@plt+0x48d0>
   159dc:	mov	r0, r1
   159e0:	mov	r1, r2
   159e4:	mov	r2, r3
   159e8:	b	10f54 <readlink@plt>
   159ec:	push	{fp, lr}
   159f0:	mov	fp, sp
   159f4:	bl	11104 <abort@plt>
   159f8:	sub	r0, r0, #1
   159fc:	ldrb	r3, [r0, #1]!
   15a00:	cmp	r3, #47	; 0x2f
   15a04:	beq	159fc <__assert_fail@plt+0x48e0>
   15a08:	mov	r2, #0
   15a0c:	mov	r1, r0
   15a10:	uxtb	r3, r3
   15a14:	cmp	r3, #47	; 0x2f
   15a18:	beq	15a40 <__assert_fail@plt+0x4924>
   15a1c:	cmp	r3, #0
   15a20:	bxeq	lr
   15a24:	tst	r2, #1
   15a28:	mov	r2, #0
   15a2c:	movne	r0, r1
   15a30:	ldrb	r3, [r1, #1]!
   15a34:	uxtb	r3, r3
   15a38:	cmp	r3, #47	; 0x2f
   15a3c:	bne	15a1c <__assert_fail@plt+0x4900>
   15a40:	ldrb	r3, [r1, #1]!
   15a44:	mov	r2, #1
   15a48:	uxtb	r3, r3
   15a4c:	cmp	r3, #47	; 0x2f
   15a50:	bne	15a1c <__assert_fail@plt+0x4900>
   15a54:	b	15a40 <__assert_fail@plt+0x4924>
   15a58:	push	{r4, sl, fp, lr}
   15a5c:	add	fp, sp, #8
   15a60:	mov	r4, r0
   15a64:	bl	11020 <strlen@plt>
   15a68:	mov	r1, r0
   15a6c:	sub	r2, r4, #1
   15a70:	mov	r0, r1
   15a74:	cmp	r1, #2
   15a78:	popcc	{r4, sl, fp, pc}
   15a7c:	ldrb	r3, [r2, r0]
   15a80:	sub	r1, r0, #1
   15a84:	cmp	r3, #47	; 0x2f
   15a88:	beq	15a70 <__assert_fail@plt+0x4954>
   15a8c:	pop	{r4, sl, fp, pc}
   15a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a94:	add	fp, sp, #28
   15a98:	sub	sp, sp, #4
   15a9c:	sub	sp, sp, #1024	; 0x400
   15aa0:	mov	r9, r0
   15aa4:	mov	r5, r2
   15aa8:	mov	r0, sp
   15aac:	cmp	r2, #0
   15ab0:	mov	r4, r3
   15ab4:	ldr	sl, [fp, #12]
   15ab8:	movw	r7, #28600	; 0x6fb8
   15abc:	mov	r8, r1
   15ac0:	moveq	r5, r0
   15ac4:	ldr	r0, [fp, #8]
   15ac8:	movweq	r4, #1024	; 0x400
   15acc:	movt	r7, #1
   15ad0:	cmn	r4, #-2147483647	; 0x80000001
   15ad4:	mov	r6, r5
   15ad8:	mvncs	r4, #-2147483648	; 0x80000000
   15adc:	cmp	r0, #0
   15ae0:	movne	r7, r0
   15ae4:	mov	r0, r9
   15ae8:	mov	r1, r8
   15aec:	mov	r2, r6
   15af0:	mov	r3, r4
   15af4:	blx	sl
   15af8:	cmn	r0, #1
   15afc:	ble	15b64 <__assert_fail@plt+0x4a48>
   15b00:	cmp	r0, r4
   15b04:	blt	15b98 <__assert_fail@plt+0x4a7c>
   15b08:	cmp	r6, r5
   15b0c:	beq	15b1c <__assert_fail@plt+0x4a00>
   15b10:	ldr	r1, [r7, #8]
   15b14:	mov	r0, r6
   15b18:	blx	r1
   15b1c:	cmn	r4, #-1073741823	; 0xc0000001
   15b20:	bge	15bf0 <__assert_fail@plt+0x4ad4>
   15b24:	ldr	r1, [r7]
   15b28:	mov	r0, #1
   15b2c:	orr	r4, r0, r4, lsl #1
   15b30:	mov	r0, r4
   15b34:	blx	r1
   15b38:	mov	r6, r0
   15b3c:	cmp	r0, #0
   15b40:	bne	15ae4 <__assert_fail@plt+0x49c8>
   15b44:	ldr	r1, [r7, #12]
   15b48:	cmp	r1, #0
   15b4c:	beq	15b58 <__assert_fail@plt+0x4a3c>
   15b50:	mov	r0, r4
   15b54:	blx	r1
   15b58:	bl	11038 <__errno_location@plt>
   15b5c:	mov	r1, #12
   15b60:	b	15bf8 <__assert_fail@plt+0x4adc>
   15b64:	mov	r4, #0
   15b68:	cmp	r6, r5
   15b6c:	beq	15b8c <__assert_fail@plt+0x4a70>
   15b70:	bl	11038 <__errno_location@plt>
   15b74:	ldr	r1, [r7, #8]
   15b78:	ldr	r8, [r0]
   15b7c:	mov	r5, r0
   15b80:	mov	r0, r6
   15b84:	blx	r1
   15b88:	str	r8, [r5]
   15b8c:	mov	r0, r4
   15b90:	sub	sp, fp, #28
   15b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b98:	mov	r1, #0
   15b9c:	add	r8, r0, #1
   15ba0:	strb	r1, [r6, r0]
   15ba4:	mov	r0, sp
   15ba8:	cmp	r6, r0
   15bac:	beq	15c0c <__assert_fail@plt+0x4af0>
   15bb0:	cmp	r6, r5
   15bb4:	beq	15c3c <__assert_fail@plt+0x4b20>
   15bb8:	cmp	r8, r4
   15bbc:	bge	15c4c <__assert_fail@plt+0x4b30>
   15bc0:	ldr	r2, [r7, #4]
   15bc4:	cmp	r2, #0
   15bc8:	beq	15c70 <__assert_fail@plt+0x4b54>
   15bcc:	mov	r0, r6
   15bd0:	mov	r1, r8
   15bd4:	blx	r2
   15bd8:	mov	r4, r0
   15bdc:	cmp	r0, #0
   15be0:	moveq	r4, r6
   15be4:	mov	r0, r4
   15be8:	sub	sp, fp, #28
   15bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bf0:	bl	11038 <__errno_location@plt>
   15bf4:	mov	r1, #36	; 0x24
   15bf8:	mov	r4, #0
   15bfc:	str	r1, [r0]
   15c00:	mov	r0, r4
   15c04:	sub	sp, fp, #28
   15c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c0c:	ldr	r1, [r7]
   15c10:	mov	r0, r8
   15c14:	blx	r1
   15c18:	cmp	r0, #0
   15c1c:	beq	15c5c <__assert_fail@plt+0x4b40>
   15c20:	mov	r1, sp
   15c24:	mov	r2, r8
   15c28:	mov	r4, r0
   15c2c:	bl	10ee8 <memcpy@plt>
   15c30:	mov	r0, r4
   15c34:	sub	sp, fp, #28
   15c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c3c:	mov	r4, r6
   15c40:	mov	r0, r4
   15c44:	sub	sp, fp, #28
   15c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c4c:	mov	r4, r6
   15c50:	mov	r0, r4
   15c54:	sub	sp, fp, #28
   15c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c5c:	mov	r4, r8
   15c60:	ldr	r1, [r7, #12]
   15c64:	cmp	r1, #0
   15c68:	bne	15b50 <__assert_fail@plt+0x4a34>
   15c6c:	b	15b58 <__assert_fail@plt+0x4a3c>
   15c70:	mov	r4, r6
   15c74:	mov	r0, r4
   15c78:	sub	sp, fp, #28
   15c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c80:	push	{r4, r5, r6, sl, fp, lr}
   15c84:	add	fp, sp, #16
   15c88:	mov	r4, r0
   15c8c:	bl	10f84 <__fpending@plt>
   15c90:	ldr	r6, [r4]
   15c94:	mov	r5, r0
   15c98:	mov	r0, r4
   15c9c:	bl	15d04 <__assert_fail@plt+0x4be8>
   15ca0:	tst	r6, #32
   15ca4:	bne	15cdc <__assert_fail@plt+0x4bc0>
   15ca8:	cmp	r0, #0
   15cac:	mov	r4, r0
   15cb0:	mvnne	r4, #0
   15cb4:	cmp	r5, #0
   15cb8:	bne	15ce8 <__assert_fail@plt+0x4bcc>
   15cbc:	cmp	r0, #0
   15cc0:	beq	15ce8 <__assert_fail@plt+0x4bcc>
   15cc4:	bl	11038 <__errno_location@plt>
   15cc8:	ldr	r0, [r0]
   15ccc:	subs	r4, r0, #9
   15cd0:	mvnne	r4, #0
   15cd4:	mov	r0, r4
   15cd8:	pop	{r4, r5, r6, sl, fp, pc}
   15cdc:	mvn	r4, #0
   15ce0:	cmp	r0, #0
   15ce4:	beq	15cf0 <__assert_fail@plt+0x4bd4>
   15ce8:	mov	r0, r4
   15cec:	pop	{r4, r5, r6, sl, fp, pc}
   15cf0:	bl	11038 <__errno_location@plt>
   15cf4:	mov	r1, #0
   15cf8:	str	r1, [r0]
   15cfc:	mov	r0, r4
   15d00:	pop	{r4, r5, r6, sl, fp, pc}
   15d04:	push	{r4, r5, r6, sl, fp, lr}
   15d08:	add	fp, sp, #16
   15d0c:	sub	sp, sp, #8
   15d10:	mov	r4, r0
   15d14:	bl	11068 <fileno@plt>
   15d18:	cmn	r0, #1
   15d1c:	ble	15d90 <__assert_fail@plt+0x4c74>
   15d20:	mov	r0, r4
   15d24:	bl	10fd8 <__freading@plt>
   15d28:	cmp	r0, #0
   15d2c:	beq	15d58 <__assert_fail@plt+0x4c3c>
   15d30:	mov	r0, r4
   15d34:	bl	11068 <fileno@plt>
   15d38:	mov	r1, #1
   15d3c:	mov	r2, #0
   15d40:	mov	r3, #0
   15d44:	str	r1, [sp]
   15d48:	bl	10f6c <lseek64@plt>
   15d4c:	and	r0, r0, r1
   15d50:	cmn	r0, #1
   15d54:	beq	15d90 <__assert_fail@plt+0x4c74>
   15d58:	mov	r0, r4
   15d5c:	bl	15da0 <__assert_fail@plt+0x4c84>
   15d60:	cmp	r0, #0
   15d64:	beq	15d90 <__assert_fail@plt+0x4c74>
   15d68:	bl	11038 <__errno_location@plt>
   15d6c:	ldr	r6, [r0]
   15d70:	mov	r5, r0
   15d74:	mov	r0, r4
   15d78:	bl	1108c <fclose@plt>
   15d7c:	cmp	r6, #0
   15d80:	strne	r6, [r5]
   15d84:	mvnne	r0, #0
   15d88:	sub	sp, fp, #16
   15d8c:	pop	{r4, r5, r6, sl, fp, pc}
   15d90:	mov	r0, r4
   15d94:	sub	sp, fp, #16
   15d98:	pop	{r4, r5, r6, sl, fp, lr}
   15d9c:	b	1108c <fclose@plt>
   15da0:	push	{r4, sl, fp, lr}
   15da4:	add	fp, sp, #8
   15da8:	sub	sp, sp, #8
   15dac:	mov	r4, r0
   15db0:	cmp	r0, #0
   15db4:	beq	15dd0 <__assert_fail@plt+0x4cb4>
   15db8:	mov	r0, r4
   15dbc:	bl	10fd8 <__freading@plt>
   15dc0:	cmp	r0, #0
   15dc4:	ldrbne	r0, [r4, #1]
   15dc8:	tstne	r0, #1
   15dcc:	bne	15de0 <__assert_fail@plt+0x4cc4>
   15dd0:	mov	r0, r4
   15dd4:	sub	sp, fp, #8
   15dd8:	pop	{r4, sl, fp, lr}
   15ddc:	b	10ec4 <fflush@plt>
   15de0:	mov	r0, #1
   15de4:	mov	r2, #0
   15de8:	mov	r3, #0
   15dec:	str	r0, [sp]
   15df0:	mov	r0, r4
   15df4:	bl	15e08 <__assert_fail@plt+0x4cec>
   15df8:	mov	r0, r4
   15dfc:	sub	sp, fp, #8
   15e00:	pop	{r4, sl, fp, lr}
   15e04:	b	10ec4 <fflush@plt>
   15e08:	push	{r4, r5, r6, r7, fp, lr}
   15e0c:	add	fp, sp, #16
   15e10:	sub	sp, sp, #8
   15e14:	mov	r4, r0
   15e18:	ldr	r0, [r0, #4]
   15e1c:	mov	r5, r3
   15e20:	mov	r6, r2
   15e24:	ldr	r1, [r4, #8]
   15e28:	cmp	r1, r0
   15e2c:	bne	15e48 <__assert_fail@plt+0x4d2c>
   15e30:	ldrd	r0, [r4, #16]
   15e34:	cmp	r1, r0
   15e38:	bne	15e48 <__assert_fail@plt+0x4d2c>
   15e3c:	ldr	r0, [r4, #36]	; 0x24
   15e40:	cmp	r0, #0
   15e44:	beq	15e60 <__assert_fail@plt+0x4d44>
   15e48:	mov	r0, r4
   15e4c:	mov	r2, r6
   15e50:	mov	r3, r5
   15e54:	sub	sp, fp, #16
   15e58:	pop	{r4, r5, r6, r7, fp, lr}
   15e5c:	b	11098 <fseeko64@plt>
   15e60:	ldr	r7, [fp, #8]
   15e64:	mov	r0, r4
   15e68:	bl	11068 <fileno@plt>
   15e6c:	mov	r2, r6
   15e70:	mov	r3, r5
   15e74:	str	r7, [sp]
   15e78:	bl	10f6c <lseek64@plt>
   15e7c:	and	r2, r0, r1
   15e80:	cmn	r2, #1
   15e84:	mvneq	r0, #0
   15e88:	subeq	sp, fp, #16
   15e8c:	popeq	{r4, r5, r6, r7, fp, pc}
   15e90:	strd	r0, [r4, #80]	; 0x50
   15e94:	ldr	r0, [r4]
   15e98:	bic	r0, r0, #16
   15e9c:	str	r0, [r4]
   15ea0:	mov	r0, #0
   15ea4:	sub	sp, fp, #16
   15ea8:	pop	{r4, r5, r6, r7, fp, pc}
   15eac:	push	{fp, lr}
   15eb0:	mov	fp, sp
   15eb4:	mov	r0, #14
   15eb8:	bl	110d4 <nl_langinfo@plt>
   15ebc:	movw	r1, #27005	; 0x697d
   15ec0:	cmp	r0, #0
   15ec4:	movt	r1, #1
   15ec8:	movne	r1, r0
   15ecc:	movw	r0, #28594	; 0x6fb2
   15ed0:	ldrb	r2, [r1]
   15ed4:	movt	r0, #1
   15ed8:	cmp	r2, #0
   15edc:	movne	r0, r1
   15ee0:	pop	{fp, pc}
   15ee4:	push	{r4, r5, r6, r7, fp, lr}
   15ee8:	add	fp, sp, #16
   15eec:	sub	sp, sp, #8
   15ef0:	add	r5, sp, #4
   15ef4:	cmp	r0, #0
   15ef8:	mov	r7, r2
   15efc:	mov	r4, r1
   15f00:	movne	r5, r0
   15f04:	mov	r0, r5
   15f08:	bl	10f90 <mbrtowc@plt>
   15f0c:	mov	r6, r0
   15f10:	cmp	r7, #0
   15f14:	beq	15f38 <__assert_fail@plt+0x4e1c>
   15f18:	cmn	r6, #2
   15f1c:	bcc	15f38 <__assert_fail@plt+0x4e1c>
   15f20:	mov	r0, #0
   15f24:	bl	15f80 <__assert_fail@plt+0x4e64>
   15f28:	cmp	r0, #0
   15f2c:	ldrbeq	r0, [r4]
   15f30:	moveq	r6, #1
   15f34:	streq	r0, [r5]
   15f38:	mov	r0, r6
   15f3c:	sub	sp, fp, #16
   15f40:	pop	{r4, r5, r6, r7, fp, pc}
   15f44:	cmp	r2, #0
   15f48:	beq	15f78 <__assert_fail@plt+0x4e5c>
   15f4c:	mvn	r3, #0
   15f50:	udiv	r3, r3, r2
   15f54:	cmp	r3, r1
   15f58:	bcs	15f78 <__assert_fail@plt+0x4e5c>
   15f5c:	push	{fp, lr}
   15f60:	mov	fp, sp
   15f64:	bl	11038 <__errno_location@plt>
   15f68:	mov	r1, #12
   15f6c:	str	r1, [r0]
   15f70:	mov	r0, #0
   15f74:	pop	{fp, pc}
   15f78:	mul	r1, r2, r1
   15f7c:	b	15944 <__assert_fail@plt+0x4828>
   15f80:	push	{r4, sl, fp, lr}
   15f84:	add	fp, sp, #8
   15f88:	sub	sp, sp, #264	; 0x108
   15f8c:	add	r1, sp, #7
   15f90:	movw	r2, #257	; 0x101
   15f94:	bl	15fe4 <__assert_fail@plt+0x4ec8>
   15f98:	mov	r4, #0
   15f9c:	cmp	r0, #0
   15fa0:	bne	15fd8 <__assert_fail@plt+0x4ebc>
   15fa4:	movw	r1, #28616	; 0x6fc8
   15fa8:	add	r0, sp, #7
   15fac:	movt	r1, #1
   15fb0:	bl	10eb8 <strcmp@plt>
   15fb4:	cmp	r0, #0
   15fb8:	beq	15fd8 <__assert_fail@plt+0x4ebc>
   15fbc:	movw	r1, #28618	; 0x6fca
   15fc0:	add	r0, sp, #7
   15fc4:	movt	r1, #1
   15fc8:	bl	10eb8 <strcmp@plt>
   15fcc:	mov	r4, r0
   15fd0:	cmp	r0, #0
   15fd4:	movwne	r4, #1
   15fd8:	mov	r0, r4
   15fdc:	sub	sp, fp, #8
   15fe0:	pop	{r4, sl, fp, pc}
   15fe4:	push	{r4, r5, r6, r7, fp, lr}
   15fe8:	add	fp, sp, #16
   15fec:	mov	r4, r1
   15ff0:	mov	r1, #0
   15ff4:	mov	r6, r2
   15ff8:	bl	110b0 <setlocale@plt>
   15ffc:	cmp	r0, #0
   16000:	beq	16030 <__assert_fail@plt+0x4f14>
   16004:	mov	r7, r0
   16008:	bl	11020 <strlen@plt>
   1600c:	cmp	r0, r6
   16010:	bcs	16050 <__assert_fail@plt+0x4f34>
   16014:	add	r2, r0, #1
   16018:	mov	r0, r4
   1601c:	mov	r1, r7
   16020:	bl	10ee8 <memcpy@plt>
   16024:	mov	r5, #0
   16028:	mov	r0, r5
   1602c:	pop	{r4, r5, r6, r7, fp, pc}
   16030:	cmp	r6, #0
   16034:	mov	r5, #22
   16038:	movne	r0, #0
   1603c:	strbne	r0, [r4]
   16040:	movne	r0, r5
   16044:	popne	{r4, r5, r6, r7, fp, pc}
   16048:	mov	r0, r5
   1604c:	pop	{r4, r5, r6, r7, fp, pc}
   16050:	mov	r5, #34	; 0x22
   16054:	cmp	r6, #0
   16058:	beq	16078 <__assert_fail@plt+0x4f5c>
   1605c:	sub	r6, r6, #1
   16060:	mov	r0, r4
   16064:	mov	r1, r7
   16068:	mov	r2, r6
   1606c:	bl	10ee8 <memcpy@plt>
   16070:	mov	r0, #0
   16074:	strb	r0, [r4, r6]
   16078:	mov	r0, r5
   1607c:	pop	{r4, r5, r6, r7, fp, pc}
   16080:	mov	r1, #0
   16084:	b	110b0 <setlocale@plt>
   16088:	cmp	r3, #0
   1608c:	cmpeq	r2, #0
   16090:	bne	160a8 <__assert_fail@plt+0x4f8c>
   16094:	cmp	r1, #0
   16098:	cmpeq	r0, #0
   1609c:	mvnne	r1, #0
   160a0:	mvnne	r0, #0
   160a4:	b	160c4 <__assert_fail@plt+0x4fa8>
   160a8:	sub	sp, sp, #8
   160ac:	push	{sp, lr}
   160b0:	bl	160d4 <__assert_fail@plt+0x4fb8>
   160b4:	ldr	lr, [sp, #4]
   160b8:	add	sp, sp, #8
   160bc:	pop	{r2, r3}
   160c0:	bx	lr
   160c4:	push	{r1, lr}
   160c8:	mov	r0, #8
   160cc:	bl	10eac <raise@plt>
   160d0:	pop	{r1, pc}
   160d4:	cmp	r1, r3
   160d8:	cmpeq	r0, r2
   160dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e0:	mov	r4, r0
   160e4:	movcc	r0, #0
   160e8:	mov	r5, r1
   160ec:	ldr	lr, [sp, #36]	; 0x24
   160f0:	movcc	r1, r0
   160f4:	bcc	161f0 <__assert_fail@plt+0x50d4>
   160f8:	cmp	r3, #0
   160fc:	clzeq	ip, r2
   16100:	clzne	ip, r3
   16104:	addeq	ip, ip, #32
   16108:	cmp	r5, #0
   1610c:	clzeq	r1, r4
   16110:	addeq	r1, r1, #32
   16114:	clzne	r1, r5
   16118:	sub	ip, ip, r1
   1611c:	sub	sl, ip, #32
   16120:	lsl	r9, r3, ip
   16124:	rsb	fp, ip, #32
   16128:	orr	r9, r9, r2, lsl sl
   1612c:	orr	r9, r9, r2, lsr fp
   16130:	lsl	r8, r2, ip
   16134:	cmp	r5, r9
   16138:	cmpeq	r4, r8
   1613c:	movcc	r0, #0
   16140:	movcc	r1, r0
   16144:	bcc	16160 <__assert_fail@plt+0x5044>
   16148:	mov	r0, #1
   1614c:	subs	r4, r4, r8
   16150:	lsl	r1, r0, sl
   16154:	orr	r1, r1, r0, lsr fp
   16158:	lsl	r0, r0, ip
   1615c:	sbc	r5, r5, r9
   16160:	cmp	ip, #0
   16164:	beq	161f0 <__assert_fail@plt+0x50d4>
   16168:	lsr	r6, r8, #1
   1616c:	orr	r6, r6, r9, lsl #31
   16170:	lsr	r7, r9, #1
   16174:	mov	r2, ip
   16178:	b	1619c <__assert_fail@plt+0x5080>
   1617c:	subs	r3, r4, r6
   16180:	sbc	r8, r5, r7
   16184:	adds	r3, r3, r3
   16188:	adc	r8, r8, r8
   1618c:	adds	r4, r3, #1
   16190:	adc	r5, r8, #0
   16194:	subs	r2, r2, #1
   16198:	beq	161b8 <__assert_fail@plt+0x509c>
   1619c:	cmp	r5, r7
   161a0:	cmpeq	r4, r6
   161a4:	bcs	1617c <__assert_fail@plt+0x5060>
   161a8:	adds	r4, r4, r4
   161ac:	adc	r5, r5, r5
   161b0:	subs	r2, r2, #1
   161b4:	bne	1619c <__assert_fail@plt+0x5080>
   161b8:	lsr	r3, r4, ip
   161bc:	orr	r3, r3, r5, lsl fp
   161c0:	lsr	r2, r5, ip
   161c4:	orr	r3, r3, r5, lsr sl
   161c8:	adds	r0, r0, r4
   161cc:	mov	r4, r3
   161d0:	lsl	r3, r2, ip
   161d4:	orr	r3, r3, r4, lsl sl
   161d8:	lsl	ip, r4, ip
   161dc:	orr	r3, r3, r4, lsr fp
   161e0:	adc	r1, r1, r5
   161e4:	subs	r0, r0, ip
   161e8:	mov	r5, r2
   161ec:	sbc	r1, r1, r3
   161f0:	cmp	lr, #0
   161f4:	strdne	r4, [lr]
   161f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16200:	mov	r7, r0
   16204:	ldr	r6, [pc, #72]	; 16254 <__assert_fail@plt+0x5138>
   16208:	ldr	r5, [pc, #72]	; 16258 <__assert_fail@plt+0x513c>
   1620c:	add	r6, pc, r6
   16210:	add	r5, pc, r5
   16214:	sub	r6, r6, r5
   16218:	mov	r8, r1
   1621c:	mov	r9, r2
   16220:	bl	10e74 <calloc@plt-0x20>
   16224:	asrs	r6, r6, #2
   16228:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1622c:	mov	r4, #0
   16230:	add	r4, r4, #1
   16234:	ldr	r3, [r5], #4
   16238:	mov	r2, r9
   1623c:	mov	r1, r8
   16240:	mov	r0, r7
   16244:	blx	r3
   16248:	cmp	r6, r4
   1624c:	bne	16230 <__assert_fail@plt+0x5114>
   16250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16254:	strdeq	r1, [r1], -r8
   16258:	strdeq	r1, [r1], -r0
   1625c:	bx	lr
   16260:	ldr	r3, [pc, #12]	; 16274 <__assert_fail@plt+0x5158>
   16264:	mov	r1, #0
   16268:	add	r3, pc, r3
   1626c:	ldr	r2, [r3]
   16270:	b	11044 <__cxa_atexit@plt>
   16274:	andeq	r1, r1, r4, lsl #29

Disassembly of section .fini:

00016278 <.fini>:
   16278:	push	{r3, lr}
   1627c:	pop	{r3, pc}
