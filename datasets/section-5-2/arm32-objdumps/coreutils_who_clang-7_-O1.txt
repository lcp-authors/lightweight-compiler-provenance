
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

000110ac <.init>:
   110ac:	push	{r3, lr}
   110b0:	bl	11408 <__assert_fail@plt+0x48>
   110b4:	pop	{r3, pc}

Disassembly of section .plt:

000110b8 <calloc@plt-0x14>:
   110b8:	push	{lr}		; (str lr, [sp, #-4]!)
   110bc:	ldr	lr, [pc, #4]	; 110c8 <calloc@plt-0x4>
   110c0:	add	lr, pc, lr
   110c4:	ldr	pc, [lr, #8]!
   110c8:	andeq	r6, r1, r8, lsr pc

000110cc <calloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #3896]!	; 0xf38

000110d8 <fputs_unlocked@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #3888]!	; 0xf30

000110e4 <raise@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #3880]!	; 0xf28

000110f0 <strcmp@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #3872]!	; 0xf20

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #3864]!	; 0xf18

00011108 <utmpxname@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #3856]!	; 0xf10

00011114 <free@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #3848]!	; 0xf08

00011120 <gai_strerror@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #3840]!	; 0xf00

0001112c <_exit@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3832]!	; 0xef8

00011138 <memcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3824]!	; 0xef0

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #3816]!	; 0xee8

00011150 <time@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3808]!	; 0xee0

0001115c <memcmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3800]!	; 0xed8

00011168 <stpcpy@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3792]!	; 0xed0

00011174 <dcgettext@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3784]!	; 0xec8

00011180 <strdup@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3776]!	; 0xec0

0001118c <setutxent@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3768]!	; 0xeb8

00011198 <realloc@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #90112	; 0x16000
   111a0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111a4 <textdomain@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #90112	; 0x16000
   111ac:	ldr	pc, [ip, #3752]!	; 0xea8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #90112	; 0x16000
   111b8:	ldr	pc, [ip, #3744]!	; 0xea0

000111bc <fwrite@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #90112	; 0x16000
   111c4:	ldr	pc, [ip, #3736]!	; 0xe98

000111c8 <lseek64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #90112	; 0x16000
   111d0:	ldr	pc, [ip, #3728]!	; 0xe90

000111d4 <__ctype_get_mb_cur_max@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #90112	; 0x16000
   111dc:	ldr	pc, [ip, #3720]!	; 0xe88

000111e0 <__fpending@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #90112	; 0x16000
   111e8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ec <ferror_unlocked@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #90112	; 0x16000
   111f4:	ldr	pc, [ip, #3704]!	; 0xe78

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #90112	; 0x16000
   11200:	ldr	pc, [ip, #3696]!	; 0xe70

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3688]!	; 0xe68

00011210 <__asprintf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3680]!	; 0xe60

0001121c <puts@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3672]!	; 0xe58

00011228 <malloc@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3664]!	; 0xe50

00011234 <__libc_start_main@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3656]!	; 0xe48

00011240 <strftime@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3648]!	; 0xe40

0001124c <__freading@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3640]!	; 0xe38

00011258 <localtime@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #90112	; 0x16000
   11260:	ldr	pc, [ip, #3632]!	; 0xe30

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #90112	; 0x16000
   1126c:	ldr	pc, [ip, #3624]!	; 0xe28

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #90112	; 0x16000
   11278:	ldr	pc, [ip, #3616]!	; 0xe20

0001127c <kill@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #90112	; 0x16000
   11284:	ldr	pc, [ip, #3608]!	; 0xe18

00011288 <__ctype_b_loc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #90112	; 0x16000
   11290:	ldr	pc, [ip, #3600]!	; 0xe10

00011294 <exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #90112	; 0x16000
   1129c:	ldr	pc, [ip, #3592]!	; 0xe08

000112a0 <ttyname@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #90112	; 0x16000
   112a8:	ldr	pc, [ip, #3584]!	; 0xe00

000112ac <strlen@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #90112	; 0x16000
   112b4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #90112	; 0x16000
   112c0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #90112	; 0x16000
   112cc:	ldr	pc, [ip, #3560]!	; 0xde8

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #90112	; 0x16000
   112d8:	ldr	pc, [ip, #3552]!	; 0xde0

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #90112	; 0x16000
   112e4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #90112	; 0x16000
   112f0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112f4 <strncpy@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #90112	; 0x16000
   112fc:	ldr	pc, [ip, #3528]!	; 0xdc8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #90112	; 0x16000
   11308:	ldr	pc, [ip, #3520]!	; 0xdc0

0001130c <fileno@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #90112	; 0x16000
   11314:	ldr	pc, [ip, #3512]!	; 0xdb8

00011318 <__fprintf_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #90112	; 0x16000
   11320:	ldr	pc, [ip, #3504]!	; 0xdb0

00011324 <fclose@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #90112	; 0x16000
   1132c:	ldr	pc, [ip, #3496]!	; 0xda8

00011330 <fseeko64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #90112	; 0x16000
   11338:	ldr	pc, [ip, #3488]!	; 0xda0

0001133c <endutxent@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #90112	; 0x16000
   11344:	ldr	pc, [ip, #3480]!	; 0xd98

00011348 <setlocale@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #90112	; 0x16000
   11350:	ldr	pc, [ip, #3472]!	; 0xd90

00011354 <strrchr@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #90112	; 0x16000
   1135c:	ldr	pc, [ip, #3464]!	; 0xd88

00011360 <nl_langinfo@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #90112	; 0x16000
   11368:	ldr	pc, [ip, #3456]!	; 0xd80

0001136c <freeaddrinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #90112	; 0x16000
   11374:	ldr	pc, [ip, #3448]!	; 0xd78

00011378 <getaddrinfo@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #90112	; 0x16000
   11380:	ldr	pc, [ip, #3440]!	; 0xd70

00011384 <bindtextdomain@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #90112	; 0x16000
   1138c:	ldr	pc, [ip, #3432]!	; 0xd68

00011390 <__xstat64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #90112	; 0x16000
   11398:	ldr	pc, [ip, #3424]!	; 0xd60

0001139c <strncmp@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #90112	; 0x16000
   113a4:	ldr	pc, [ip, #3416]!	; 0xd58

000113a8 <abort@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #90112	; 0x16000
   113b0:	ldr	pc, [ip, #3408]!	; 0xd50

000113b4 <getutxent@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #90112	; 0x16000
   113bc:	ldr	pc, [ip, #3400]!	; 0xd48

000113c0 <__assert_fail@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #90112	; 0x16000
   113c8:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113cc <.text>:
   113cc:	mov	fp, #0
   113d0:	mov	lr, #0
   113d4:	pop	{r1}		; (ldr r1, [sp], #4)
   113d8:	mov	r2, sp
   113dc:	push	{r2}		; (str r2, [sp, #-4]!)
   113e0:	push	{r0}		; (str r0, [sp, #-4]!)
   113e4:	ldr	ip, [pc, #16]	; 113fc <__assert_fail@plt+0x3c>
   113e8:	push	{ip}		; (str ip, [sp, #-4]!)
   113ec:	ldr	r0, [pc, #12]	; 11400 <__assert_fail@plt+0x40>
   113f0:	ldr	r3, [pc, #12]	; 11404 <__assert_fail@plt+0x44>
   113f4:	bl	11234 <__libc_start_main@plt>
   113f8:	bl	113a8 <abort@plt>
   113fc:	andeq	r6, r1, ip, lsl #3
   11400:	andeq	r1, r1, r8, ror #15
   11404:	andeq	r6, r1, ip, lsr #2
   11408:	ldr	r3, [pc, #20]	; 11424 <__assert_fail@plt+0x64>
   1140c:	ldr	r2, [pc, #20]	; 11428 <__assert_fail@plt+0x68>
   11410:	add	r3, pc, r3
   11414:	ldr	r2, [r3, r2]
   11418:	cmp	r2, #0
   1141c:	bxeq	lr
   11420:	b	11264 <__gmon_start__@plt>
   11424:	andeq	r6, r1, r8, ror #23
   11428:	andeq	r0, r0, ip, lsl #2
   1142c:	ldr	r0, [pc, #24]	; 1144c <__assert_fail@plt+0x8c>
   11430:	ldr	r3, [pc, #24]	; 11450 <__assert_fail@plt+0x90>
   11434:	cmp	r3, r0
   11438:	bxeq	lr
   1143c:	ldr	r3, [pc, #16]	; 11454 <__assert_fail@plt+0x94>
   11440:	cmp	r3, #0
   11444:	bxeq	lr
   11448:	bx	r3
   1144c:	andeq	r8, r2, r8, ror #2
   11450:	andeq	r8, r2, r8, ror #2
   11454:	andeq	r0, r0, r0
   11458:	ldr	r0, [pc, #36]	; 11484 <__assert_fail@plt+0xc4>
   1145c:	ldr	r1, [pc, #36]	; 11488 <__assert_fail@plt+0xc8>
   11460:	sub	r1, r1, r0
   11464:	asr	r1, r1, #2
   11468:	add	r1, r1, r1, lsr #31
   1146c:	asrs	r1, r1, #1
   11470:	bxeq	lr
   11474:	ldr	r3, [pc, #16]	; 1148c <__assert_fail@plt+0xcc>
   11478:	cmp	r3, #0
   1147c:	bxeq	lr
   11480:	bx	r3
   11484:	andeq	r8, r2, r8, ror #2
   11488:	andeq	r8, r2, r8, ror #2
   1148c:	andeq	r0, r0, r0
   11490:	push	{r4, lr}
   11494:	ldr	r4, [pc, #24]	; 114b4 <__assert_fail@plt+0xf4>
   11498:	ldrb	r3, [r4]
   1149c:	cmp	r3, #0
   114a0:	popne	{r4, pc}
   114a4:	bl	1142c <__assert_fail@plt+0x6c>
   114a8:	mov	r3, #1
   114ac:	strb	r3, [r4]
   114b0:	pop	{r4, pc}
   114b4:	andeq	r8, r2, r0, lsl #3
   114b8:	b	11458 <__assert_fail@plt+0x98>
   114bc:	push	{fp, lr}
   114c0:	mov	fp, sp
   114c4:	mov	r4, r0
   114c8:	cmp	r0, #0
   114cc:	bne	11620 <__assert_fail@plt+0x260>
   114d0:	movw	r1, #25067	; 0x61eb
   114d4:	movt	r1, #1
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	bl	11174 <dcgettext@plt>
   114e4:	mov	r1, r0
   114e8:	movw	r0, #33284	; 0x8204
   114ec:	movt	r0, #2
   114f0:	ldr	r2, [r0]
   114f4:	mov	r0, #1
   114f8:	bl	11300 <__printf_chk@plt>
   114fc:	movw	r1, #25111	; 0x6217
   11500:	movt	r1, #1
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	bl	11174 <dcgettext@plt>
   11510:	movw	r5, #33148	; 0x817c
   11514:	movt	r5, #2
   11518:	ldr	r1, [r5]
   1151c:	bl	110d8 <fputs_unlocked@plt>
   11520:	movw	r1, #25171	; 0x6253
   11524:	movt	r1, #1
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	bl	11174 <dcgettext@plt>
   11534:	ldr	r1, [r5]
   11538:	bl	110d8 <fputs_unlocked@plt>
   1153c:	movw	r1, #25366	; 0x6316
   11540:	movt	r1, #1
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	bl	11174 <dcgettext@plt>
   11550:	ldr	r1, [r5]
   11554:	bl	110d8 <fputs_unlocked@plt>
   11558:	movw	r1, #25416	; 0x6348
   1155c:	movt	r1, #1
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	bl	11174 <dcgettext@plt>
   1156c:	ldr	r1, [r5]
   11570:	bl	110d8 <fputs_unlocked@plt>
   11574:	movw	r1, #25603	; 0x6403
   11578:	movt	r1, #1
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	bl	11174 <dcgettext@plt>
   11588:	ldr	r1, [r5]
   1158c:	bl	110d8 <fputs_unlocked@plt>
   11590:	movw	r1, #25826	; 0x64e2
   11594:	movt	r1, #1
   11598:	mov	r0, #0
   1159c:	mov	r2, #5
   115a0:	bl	11174 <dcgettext@plt>
   115a4:	ldr	r1, [r5]
   115a8:	bl	110d8 <fputs_unlocked@plt>
   115ac:	movw	r1, #25989	; 0x6585
   115b0:	movt	r1, #1
   115b4:	mov	r0, #0
   115b8:	mov	r2, #5
   115bc:	bl	11174 <dcgettext@plt>
   115c0:	ldr	r1, [r5]
   115c4:	bl	110d8 <fputs_unlocked@plt>
   115c8:	movw	r1, #26034	; 0x65b2
   115cc:	movt	r1, #1
   115d0:	mov	r0, #0
   115d4:	mov	r2, #5
   115d8:	bl	11174 <dcgettext@plt>
   115dc:	ldr	r1, [r5]
   115e0:	bl	110d8 <fputs_unlocked@plt>
   115e4:	movw	r1, #26088	; 0x65e8
   115e8:	movt	r1, #1
   115ec:	mov	r0, #0
   115f0:	mov	r2, #5
   115f4:	bl	11174 <dcgettext@plt>
   115f8:	mov	r1, r0
   115fc:	movw	r2, #26213	; 0x6665
   11600:	movt	r2, #1
   11604:	movw	r3, #26227	; 0x6673
   11608:	movt	r3, #1
   1160c:	mov	r0, #1
   11610:	bl	11300 <__printf_chk@plt>
   11614:	bl	11664 <__assert_fail@plt+0x2a4>
   11618:	mov	r0, r4
   1161c:	bl	11294 <exit@plt>
   11620:	movw	r0, #33144	; 0x8178
   11624:	movt	r0, #2
   11628:	ldr	r5, [r0]
   1162c:	movw	r1, #25028	; 0x61c4
   11630:	movt	r1, #1
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	bl	11174 <dcgettext@plt>
   11640:	mov	r2, r0
   11644:	movw	r0, #33284	; 0x8204
   11648:	movt	r0, #2
   1164c:	ldr	r3, [r0]
   11650:	mov	r0, r5
   11654:	mov	r1, #1
   11658:	bl	11318 <__fprintf_chk@plt>
   1165c:	mov	r0, r4
   11660:	bl	11294 <exit@plt>
   11664:	push	{r4, r5, fp, lr}
   11668:	add	fp, sp, #8
   1166c:	sub	sp, sp, #56	; 0x38
   11670:	movw	r0, #27424	; 0x6b20
   11674:	movt	r0, #1
   11678:	add	r1, r0, #32
   1167c:	mov	r5, sp
   11680:	mov	r2, #48	; 0x30
   11684:	vld1.64	{d16-d17}, [r1]
   11688:	add	r1, r5, #32
   1168c:	add	r3, r0, #16
   11690:	vld1.64	{d18-d19}, [r0], r2
   11694:	vld1.64	{d20-d21}, [r3]
   11698:	vldr	d22, [r0]
   1169c:	vst1.64	{d16-d17}, [r1]
   116a0:	add	r0, r5, #16
   116a4:	vst1.64	{d20-d21}, [r0]
   116a8:	mov	r0, r5
   116ac:	vst1.64	{d18-d19}, [r0], r2
   116b0:	vstr	d22, [r0]
   116b4:	ldr	r1, [sp]
   116b8:	cmp	r1, #0
   116bc:	beq	116e4 <__assert_fail@plt+0x324>
   116c0:	mov	r5, sp
   116c4:	movw	r4, #26241	; 0x6681
   116c8:	movt	r4, #1
   116cc:	mov	r0, r4
   116d0:	bl	110f0 <strcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	ldrne	r1, [r5, #8]!
   116dc:	cmpne	r1, #0
   116e0:	bne	116cc <__assert_fail@plt+0x30c>
   116e4:	ldr	r4, [r5, #4]
   116e8:	movw	r1, #26484	; 0x6774
   116ec:	movt	r1, #1
   116f0:	mov	r0, #0
   116f4:	mov	r2, #5
   116f8:	bl	11174 <dcgettext@plt>
   116fc:	mov	r1, r0
   11700:	movw	r2, #26284	; 0x66ac
   11704:	movt	r2, #1
   11708:	movw	r3, #26507	; 0x678b
   1170c:	movt	r3, #1
   11710:	mov	r0, #1
   11714:	bl	11300 <__printf_chk@plt>
   11718:	movw	r5, #26241	; 0x6681
   1171c:	movt	r5, #1
   11720:	cmp	r4, #0
   11724:	moveq	r4, r5
   11728:	mov	r0, #5
   1172c:	mov	r1, #0
   11730:	bl	11348 <setlocale@plt>
   11734:	cmp	r0, #0
   11738:	beq	11778 <__assert_fail@plt+0x3b8>
   1173c:	movw	r1, #26547	; 0x67b3
   11740:	movt	r1, #1
   11744:	mov	r2, #3
   11748:	bl	1139c <strncmp@plt>
   1174c:	cmp	r0, #0
   11750:	beq	11778 <__assert_fail@plt+0x3b8>
   11754:	movw	r1, #26551	; 0x67b7
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	11174 <dcgettext@plt>
   11768:	movw	r1, #33148	; 0x817c
   1176c:	movt	r1, #2
   11770:	ldr	r1, [r1]
   11774:	bl	110d8 <fputs_unlocked@plt>
   11778:	movw	r1, #26622	; 0x67fe
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11174 <dcgettext@plt>
   1178c:	mov	r1, r0
   11790:	movw	r2, #26507	; 0x678b
   11794:	movt	r2, #1
   11798:	mov	r0, #1
   1179c:	mov	r3, r5
   117a0:	bl	11300 <__printf_chk@plt>
   117a4:	movw	r1, #26649	; 0x6819
   117a8:	movt	r1, #1
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	bl	11174 <dcgettext@plt>
   117b8:	mov	r1, r0
   117bc:	movw	r0, #26417	; 0x6731
   117c0:	movt	r0, #1
   117c4:	movw	r3, #26699	; 0x684b
   117c8:	movt	r3, #1
   117cc:	cmp	r4, r5
   117d0:	moveq	r3, r0
   117d4:	mov	r0, #1
   117d8:	mov	r2, r4
   117dc:	bl	11300 <__printf_chk@plt>
   117e0:	sub	sp, fp, #8
   117e4:	pop	{r4, r5, fp, pc}
   117e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117ec:	add	fp, sp, #28
   117f0:	sub	sp, sp, #20
   117f4:	mov	r4, r1
   117f8:	mov	r5, r0
   117fc:	ldr	r0, [r1]
   11800:	bl	13378 <__assert_fail@plt+0x1fb8>
   11804:	movw	r1, #26699	; 0x684b
   11808:	movt	r1, #1
   1180c:	mov	r0, #6
   11810:	bl	11348 <setlocale@plt>
   11814:	movw	r6, #26288	; 0x66b0
   11818:	movt	r6, #1
   1181c:	movw	r1, #26245	; 0x6685
   11820:	movt	r1, #1
   11824:	mov	r0, r6
   11828:	bl	11384 <bindtextdomain@plt>
   1182c:	mov	r0, r6
   11830:	bl	111a4 <textdomain@plt>
   11834:	movw	r0, #12612	; 0x3144
   11838:	movt	r0, #1
   1183c:	bl	16190 <__assert_fail@plt+0x4dd0>
   11840:	mov	r6, #1
   11844:	movw	r9, #27136	; 0x6a00
   11848:	movt	r9, #1
   1184c:	movw	r7, #33156	; 0x8184
   11850:	movt	r7, #2
   11854:	mov	sl, #1
   11858:	b	11860 <__assert_fail@plt+0x4a0>
   1185c:	strb	r6, [r0]
   11860:	mov	r8, sl
   11864:	mov	sl, #0
   11868:	str	sl, [sp]
   1186c:	mov	r0, r5
   11870:	mov	r1, r4
   11874:	movw	r2, #26269	; 0x669d
   11878:	movt	r2, #1
   1187c:	mov	r3, r9
   11880:	bl	11270 <getopt_long@plt>
   11884:	add	r1, r0, #3
   11888:	cmp	r1, #122	; 0x7a
   1188c:	bhi	11a94 <__assert_fail@plt+0x6d4>
   11890:	add	r2, pc, #4
   11894:	mov	r0, r7
   11898:	ldr	pc, [r2, r1, lsl #2]
   1189c:	andeq	r1, r1, ip, lsr #25
   118a0:	andeq	r1, r1, r8, lsl #26
   118a4:			; <UNDEFINED> instruction: 0x00011bbc
   118a8:	andeq	r1, r1, r4, lsr #25
   118ac:	andeq	r1, r1, r4, lsr #25
   118b0:	andeq	r1, r1, r4, lsr #25
   118b4:	andeq	r1, r1, r4, lsr #25
   118b8:	andeq	r1, r1, r4, lsr #25
   118bc:	andeq	r1, r1, r4, lsr #25
   118c0:	andeq	r1, r1, r4, lsr #25
   118c4:	andeq	r1, r1, r4, lsr #25
   118c8:	andeq	r1, r1, r4, lsr #25
   118cc:	andeq	r1, r1, r4, lsr #25
   118d0:	andeq	r1, r1, r4, lsr #25
   118d4:	andeq	r1, r1, r4, lsr #25
   118d8:	andeq	r1, r1, r4, lsr #25
   118dc:	andeq	r1, r1, r4, lsr #25
   118e0:	andeq	r1, r1, r4, lsr #25
   118e4:	andeq	r1, r1, r4, lsr #25
   118e8:	andeq	r1, r1, r4, lsr #25
   118ec:	andeq	r1, r1, r4, lsr #25
   118f0:	andeq	r1, r1, r4, lsr #25
   118f4:	andeq	r1, r1, r4, lsr #25
   118f8:	andeq	r1, r1, r4, lsr #25
   118fc:	andeq	r1, r1, r4, lsr #25
   11900:	andeq	r1, r1, r4, lsr #25
   11904:	andeq	r1, r1, r4, lsr #25
   11908:	andeq	r1, r1, r4, lsr #25
   1190c:	andeq	r1, r1, r4, lsr #25
   11910:	andeq	r1, r1, r4, lsr #25
   11914:	andeq	r1, r1, r4, lsr #25
   11918:	andeq	r1, r1, r4, lsr #25
   1191c:	andeq	r1, r1, r4, lsr #25
   11920:	andeq	r1, r1, r4, lsr #25
   11924:	andeq	r1, r1, r4, lsr #25
   11928:	andeq	r1, r1, r4, lsr #25
   1192c:	andeq	r1, r1, r4, lsr #25
   11930:	andeq	r1, r1, r4, lsr #25
   11934:	andeq	r1, r1, r4, lsr #25
   11938:	andeq	r1, r1, r4, lsr #25
   1193c:	andeq	r1, r1, r4, lsr #25
   11940:	andeq	r1, r1, r4, lsr #25
   11944:	andeq	r1, r1, r4, lsr #25
   11948:	andeq	r1, r1, r4, lsr #25
   1194c:	andeq	r1, r1, r4, lsr #25
   11950:	andeq	r1, r1, r4, lsr #25
   11954:	andeq	r1, r1, r4, lsr #25
   11958:	andeq	r1, r1, r4, lsr #25
   1195c:	andeq	r1, r1, r4, lsr #25
   11960:	andeq	r1, r1, r4, lsr #25
   11964:	andeq	r1, r1, r4, lsr #25
   11968:	andeq	r1, r1, r4, lsr #25
   1196c:	andeq	r1, r1, r4, lsr #25
   11970:	andeq	r1, r1, r4, lsr #25
   11974:	andeq	r1, r1, r4, lsr #25
   11978:	andeq	r1, r1, r4, lsr #25
   1197c:	andeq	r1, r1, r4, lsr #25
   11980:	andeq	r1, r1, r4, lsr #25
   11984:	andeq	r1, r1, r4, lsr #25
   11988:	andeq	r1, r1, r4, lsr #25
   1198c:	andeq	r1, r1, r4, lsr #25
   11990:	andeq	r1, r1, r4, lsr #25
   11994:	andeq	r1, r1, r4, lsr #25
   11998:	andeq	r1, r1, r4, lsr #25
   1199c:	andeq	r1, r1, r4, lsr #25
   119a0:	andeq	r1, r1, r4, lsr #25
   119a4:	andeq	r1, r1, r4, lsr #25
   119a8:	andeq	r1, r1, r4, lsr #25
   119ac:	andeq	r1, r1, r4, lsr #25
   119b0:	andeq	r1, r1, r4, lsr #25
   119b4:	andeq	r1, r1, r4, lsr #25
   119b8:	andeq	r1, r1, r4, lsr #25
   119bc:	andeq	r1, r1, r4, lsr #25
   119c0:	andeq	r1, r1, r4, lsr #25
   119c4:	andeq	r1, r1, r4, lsr #25
   119c8:	andeq	r1, r1, r8, ror #21
   119cc:	andeq	r1, r1, r4, lsr #25
   119d0:	andeq	r1, r1, r4, lsr #25
   119d4:	andeq	r1, r1, r4, lsr #25
   119d8:	andeq	r1, r1, r4, lsr #25
   119dc:	andeq	r1, r1, r4, lsr #25
   119e0:	andeq	r1, r1, r4, lsr #25
   119e4:	andeq	r1, r1, r4, lsr #25
   119e8:	andeq	r1, r1, r4, lsr #25
   119ec:	andeq	r1, r1, r4, lsr #25
   119f0:	andeq	r1, r1, r4, lsr #25
   119f4:	andeq	r1, r1, r4, lsr #25
   119f8:	andeq	r1, r1, r8, lsl #21
   119fc:	andeq	r1, r1, r4, lsr #25
   11a00:	andeq	r1, r1, r4, lsr #25
   11a04:	andeq	r1, r1, r4, lsr #25
   11a08:	andeq	r1, r1, r4, lsr #25
   11a0c:	andeq	r1, r1, r4, lsr #25
   11a10:	andeq	r1, r1, r4, lsr #25
   11a14:	andeq	r1, r1, r4, lsr #25
   11a18:	andeq	r1, r1, r4, lsr #25
   11a1c:	andeq	r1, r1, r4, lsr #25
   11a20:	andeq	r1, r1, r4, lsr #25
   11a24:	andeq	r1, r1, r4, lsr #25
   11a28:	andeq	r1, r1, r4, lsr #25
   11a2c:	andeq	r1, r1, r0, lsl fp
   11a30:	andeq	r1, r1, ip, asr r8
   11a34:	andeq	r1, r1, r4, lsr #25
   11a38:	andeq	r1, r1, r4, asr #21
   11a3c:	andeq	r1, r1, r4, lsr #25
   11a40:	andeq	r1, r1, r4, lsr #25
   11a44:	andeq	r1, r1, r4, lsr #25
   11a48:	andeq	r1, r1, r4, lsr #25
   11a4c:	andeq	r1, r1, r4, lsr #25
   11a50:	andeq	r1, r1, r4, lsr #25
   11a54:	andeq	r1, r1, r4, lsr #25
   11a58:	ldrdeq	r1, [r1], -ip
   11a5c:	andeq	r1, r1, r4, lsl #23
   11a60:	andeq	r1, r1, r4, lsr #25
   11a64:	andeq	r1, r1, r4, lsr #25
   11a68:	strdeq	r1, [r1], -r4
   11a6c:	andeq	r1, r1, r8, lsr #21
   11a70:	andeq	r1, r1, r4, lsl #22
   11a74:	andeq	r1, r1, ip, lsr #23
   11a78:			; <UNDEFINED> instruction: 0x00011ab4
   11a7c:	muleq	r1, r0, fp
   11a80:	andeq	r1, r1, r4, lsr #25
   11a84:	andeq	r1, r1, r8, lsl #21
   11a88:	movw	r0, #33163	; 0x818b
   11a8c:	movt	r0, #2
   11a90:	b	11bb4 <__assert_fail@plt+0x7f4>
   11a94:	cmp	r0, #256	; 0x100
   11a98:	bne	11ca4 <__assert_fail@plt+0x8e4>
   11a9c:	movw	r0, #33170	; 0x8192
   11aa0:	movt	r0, #2
   11aa4:	b	11bb4 <__assert_fail@plt+0x7f4>
   11aa8:	movw	r0, #33168	; 0x8190
   11aac:	movt	r0, #2
   11ab0:	b	11bb4 <__assert_fail@plt+0x7f4>
   11ab4:	movw	r0, #33161	; 0x8189
   11ab8:	movt	r0, #2
   11abc:	strb	r6, [r0]
   11ac0:	b	11860 <__assert_fail@plt+0x4a0>
   11ac4:	movw	r0, #33164	; 0x818c
   11ac8:	movt	r0, #2
   11acc:	strb	r6, [r0]
   11ad0:	movw	r0, #33157	; 0x8185
   11ad4:	movt	r0, #2
   11ad8:	b	11b70 <__assert_fail@plt+0x7b0>
   11adc:	movw	r0, #33158	; 0x8186
   11ae0:	movt	r0, #2
   11ae4:	b	11b98 <__assert_fail@plt+0x7d8>
   11ae8:	movw	r0, #33166	; 0x818e
   11aec:	movt	r0, #2
   11af0:	b	11bb4 <__assert_fail@plt+0x7f4>
   11af4:	movw	r0, #33159	; 0x8187
   11af8:	movt	r0, #2
   11afc:	strb	r6, [r0]
   11b00:	b	11860 <__assert_fail@plt+0x4a0>
   11b04:	movw	r0, #33160	; 0x8188
   11b08:	movt	r0, #2
   11b0c:	b	11b98 <__assert_fail@plt+0x7d8>
   11b10:	movw	r0, #33157	; 0x8185
   11b14:	movt	r0, #2
   11b18:	strb	r6, [r0]
   11b1c:	strb	r6, [r7]
   11b20:	movw	r0, #33158	; 0x8186
   11b24:	movt	r0, #2
   11b28:	strb	r6, [r0]
   11b2c:	movw	r0, #33159	; 0x8187
   11b30:	movt	r0, #2
   11b34:	strb	r6, [r0]
   11b38:	movw	r0, #33160	; 0x8188
   11b3c:	movt	r0, #2
   11b40:	strb	r6, [r0]
   11b44:	movw	r0, #33161	; 0x8189
   11b48:	movt	r0, #2
   11b4c:	strb	r6, [r0]
   11b50:	movw	r0, #33162	; 0x818a
   11b54:	movt	r0, #2
   11b58:	strb	r6, [r0]
   11b5c:	movw	r0, #33163	; 0x818b
   11b60:	movt	r0, #2
   11b64:	strb	r6, [r0]
   11b68:	movw	r0, #33164	; 0x818c
   11b6c:	movt	r0, #2
   11b70:	strb	r6, [r0]
   11b74:	movw	r0, #33165	; 0x818d
   11b78:	movt	r0, #2
   11b7c:	strb	r6, [r0]
   11b80:	b	11860 <__assert_fail@plt+0x4a0>
   11b84:	movw	r0, #33167	; 0x818f
   11b88:	movt	r0, #2
   11b8c:	b	11bb4 <__assert_fail@plt+0x7f4>
   11b90:	movw	r0, #33162	; 0x818a
   11b94:	movt	r0, #2
   11b98:	strb	r6, [r0]
   11b9c:	movw	r0, #33164	; 0x818c
   11ba0:	movt	r0, #2
   11ba4:	strb	r6, [r0]
   11ba8:	b	11860 <__assert_fail@plt+0x4a0>
   11bac:	movw	r0, #33169	; 0x8191
   11bb0:	movt	r0, #2
   11bb4:	mov	sl, r8
   11bb8:	b	1185c <__assert_fail@plt+0x49c>
   11bbc:	tst	r8, #1
   11bc0:	beq	11be0 <__assert_fail@plt+0x820>
   11bc4:	movw	r0, #33169	; 0x8191
   11bc8:	movt	r0, #2
   11bcc:	mov	r1, #1
   11bd0:	strb	r1, [r0]
   11bd4:	movw	r0, #33162	; 0x818a
   11bd8:	movt	r0, #2
   11bdc:	strb	r1, [r0]
   11be0:	movw	r0, #33165	; 0x818d
   11be4:	movt	r0, #2
   11be8:	ldrb	r0, [r0]
   11bec:	cmp	r0, #1
   11bf0:	movweq	r0, #33169	; 0x8191
   11bf4:	movteq	r0, #2
   11bf8:	moveq	r1, #0
   11bfc:	strbeq	r1, [r0]
   11c00:	mov	r0, #2
   11c04:	bl	13254 <__assert_fail@plt+0x1e94>
   11c08:	movw	r1, #26345	; 0x66e9
   11c0c:	movt	r1, #1
   11c10:	movw	r2, #26360	; 0x66f8
   11c14:	movt	r2, #1
   11c18:	cmp	r0, #0
   11c1c:	movne	r2, r1
   11c20:	movw	r0, #33172	; 0x8194
   11c24:	movt	r0, #2
   11c28:	str	r2, [r0]
   11c2c:	mov	r0, #12
   11c30:	movwne	r0, #16
   11c34:	movw	r1, #33176	; 0x8198
   11c38:	movt	r1, #2
   11c3c:	str	r0, [r1]
   11c40:	movw	r6, #33136	; 0x8170
   11c44:	movt	r6, #2
   11c48:	ldr	r0, [r6]
   11c4c:	sub	r1, r5, r0
   11c50:	add	r2, r1, #1
   11c54:	cmp	r2, #2
   11c58:	bcc	11c7c <__assert_fail@plt+0x8bc>
   11c5c:	cmp	r1, #1
   11c60:	beq	11c8c <__assert_fail@plt+0x8cc>
   11c64:	cmp	r1, #2
   11c68:	bne	11d10 <__assert_fail@plt+0x950>
   11c6c:	movw	r0, #33167	; 0x818f
   11c70:	movt	r0, #2
   11c74:	mov	r1, #1
   11c78:	strb	r1, [r0]
   11c7c:	movw	r0, #26213	; 0x6665
   11c80:	movt	r0, #1
   11c84:	mov	r1, #1
   11c88:	b	11c94 <__assert_fail@plt+0x8d4>
   11c8c:	ldr	r0, [r4, r0, lsl #2]
   11c90:	mov	r1, #0
   11c94:	bl	11d54 <__assert_fail@plt+0x994>
   11c98:	mov	r0, #0
   11c9c:	sub	sp, fp, #28
   11ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ca4:	mov	r0, #1
   11ca8:	bl	114bc <__assert_fail@plt+0xfc>
   11cac:	movw	r0, #33056	; 0x8120
   11cb0:	movt	r0, #2
   11cb4:	ldr	r3, [r0]
   11cb8:	movw	r0, #33148	; 0x817c
   11cbc:	movt	r0, #2
   11cc0:	ldr	r0, [r0]
   11cc4:	mov	r1, #0
   11cc8:	movw	r2, #26331	; 0x66db
   11ccc:	movt	r2, #1
   11cd0:	movw	r7, #26315	; 0x66cb
   11cd4:	movt	r7, #1
   11cd8:	movw	r6, #26298	; 0x66ba
   11cdc:	movt	r6, #1
   11ce0:	stm	sp, {r6, r7}
   11ce4:	str	r2, [sp, #8]
   11ce8:	str	r1, [sp, #12]
   11cec:	movw	r1, #26241	; 0x6681
   11cf0:	movt	r1, #1
   11cf4:	movw	r2, #26284	; 0x66ac
   11cf8:	movt	r2, #1
   11cfc:	bl	155f4 <__assert_fail@plt+0x4234>
   11d00:	mov	r0, #0
   11d04:	bl	11294 <exit@plt>
   11d08:	mov	r0, #0
   11d0c:	bl	114bc <__assert_fail@plt+0xfc>
   11d10:	movw	r1, #26372	; 0x6704
   11d14:	movt	r1, #1
   11d18:	mov	r0, #0
   11d1c:	mov	r2, #5
   11d20:	bl	11174 <dcgettext@plt>
   11d24:	mov	r5, r0
   11d28:	ldr	r0, [r6]
   11d2c:	add	r0, r4, r0, lsl #2
   11d30:	ldr	r0, [r0, #8]
   11d34:	bl	14bb0 <__assert_fail@plt+0x37f0>
   11d38:	mov	r3, r0
   11d3c:	mov	r0, #0
   11d40:	mov	r1, #0
   11d44:	mov	r2, r5
   11d48:	bl	11204 <error@plt>
   11d4c:	mov	r0, #1
   11d50:	bl	114bc <__assert_fail@plt+0xfc>
   11d54:	push	{r4, r5, fp, lr}
   11d58:	add	fp, sp, #8
   11d5c:	sub	sp, sp, #8
   11d60:	mov	r3, r1
   11d64:	mov	r4, r0
   11d68:	add	r1, sp, #4
   11d6c:	mov	r2, sp
   11d70:	bl	1502c <__assert_fail@plt+0x3c6c>
   11d74:	cmp	r0, #0
   11d78:	bne	11db4 <__assert_fail@plt+0x9f4>
   11d7c:	movw	r0, #33168	; 0x8190
   11d80:	movt	r0, #2
   11d84:	ldrb	r2, [r0]
   11d88:	ldr	r1, [sp]
   11d8c:	ldr	r0, [sp, #4]
   11d90:	cmp	r2, #1
   11d94:	bne	11da0 <__assert_fail@plt+0x9e0>
   11d98:	bl	11de4 <__assert_fail@plt+0xa24>
   11d9c:	b	11da4 <__assert_fail@plt+0x9e4>
   11da0:	bl	11ea8 <__assert_fail@plt+0xae8>
   11da4:	ldr	r0, [sp]
   11da8:	bl	1322c <__assert_fail@plt+0x1e6c>
   11dac:	sub	sp, fp, #8
   11db0:	pop	{r4, r5, fp, pc}
   11db4:	bl	112c4 <__errno_location@plt>
   11db8:	ldr	r5, [r0]
   11dbc:	mov	r0, #0
   11dc0:	mov	r1, #3
   11dc4:	mov	r2, r4
   11dc8:	bl	14a70 <__assert_fail@plt+0x36b0>
   11dcc:	mov	r3, r0
   11dd0:	movw	r2, #27511	; 0x6b77
   11dd4:	movt	r2, #1
   11dd8:	mov	r0, #1
   11ddc:	mov	r1, r5
   11de0:	bl	11204 <error@plt>
   11de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de8:	add	fp, sp, #28
   11dec:	sub	sp, sp, #4
   11df0:	cmp	r0, #0
   11df4:	beq	11e78 <__assert_fail@plt+0xab8>
   11df8:	mov	r5, r1
   11dfc:	mov	r6, r0
   11e00:	mov	r9, #0
   11e04:	movw	r7, #26699	; 0x684b
   11e08:	movt	r7, #1
   11e0c:	movw	r8, #26805	; 0x68b5
   11e10:	movt	r8, #1
   11e14:	movw	sl, #26954	; 0x694a
   11e18:	movt	sl, #1
   11e1c:	ldrb	r0, [r5, #44]	; 0x2c
   11e20:	sub	r6, r6, #1
   11e24:	cmp	r0, #0
   11e28:	beq	11e68 <__assert_fail@plt+0xaa8>
   11e2c:	ldrh	r0, [r5]
   11e30:	cmp	r0, #7
   11e34:	bne	11e68 <__assert_fail@plt+0xaa8>
   11e38:	mov	r0, r5
   11e3c:	bl	14fc4 <__assert_fail@plt+0x3c04>
   11e40:	mov	r4, r0
   11e44:	mov	r0, #1
   11e48:	mov	r1, r8
   11e4c:	mov	r2, r7
   11e50:	mov	r3, r4
   11e54:	bl	11300 <__printf_chk@plt>
   11e58:	mov	r0, r4
   11e5c:	bl	1322c <__assert_fail@plt+0x1e6c>
   11e60:	add	r9, r9, #1
   11e64:	mov	r7, sl
   11e68:	add	r5, r5, #384	; 0x180
   11e6c:	cmp	r6, #0
   11e70:	bne	11e1c <__assert_fail@plt+0xa5c>
   11e74:	b	11e7c <__assert_fail@plt+0xabc>
   11e78:	mov	r9, #0
   11e7c:	movw	r1, #26810	; 0x68ba
   11e80:	movt	r1, #1
   11e84:	mov	r0, #0
   11e88:	mov	r2, #5
   11e8c:	bl	11174 <dcgettext@plt>
   11e90:	mov	r1, r0
   11e94:	mov	r0, #1
   11e98:	mov	r2, r9
   11e9c:	sub	sp, fp, #28
   11ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea4:	b	11300 <__printf_chk@plt>
   11ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eac:	add	fp, sp, #28
   11eb0:	sub	sp, sp, #4
   11eb4:	mov	r4, r1
   11eb8:	mov	r5, r0
   11ebc:	movw	r0, #33166	; 0x818e
   11ec0:	movt	r0, #2
   11ec4:	ldrb	r0, [r0]
   11ec8:	cmp	r0, #1
   11ecc:	bleq	12088 <__assert_fail@plt+0xcc8>
   11ed0:	movw	r8, #33167	; 0x818f
   11ed4:	movt	r8, #2
   11ed8:	ldrb	r0, [r8]
   11edc:	cmp	r0, #1
   11ee0:	bne	11f10 <__assert_fail@plt+0xb50>
   11ee4:	mov	r0, #0
   11ee8:	bl	112a0 <ttyname@plt>
   11eec:	cmp	r0, #0
   11ef0:	beq	12080 <__assert_fail@plt+0xcc0>
   11ef4:	mov	r6, r0
   11ef8:	movw	r1, #26824	; 0x68c8
   11efc:	movt	r1, #1
   11f00:	mov	r2, #5
   11f04:	bl	1139c <strncmp@plt>
   11f08:	cmp	r0, #0
   11f0c:	addeq	r6, r6, #5
   11f10:	cmp	r5, #0
   11f14:	beq	12080 <__assert_fail@plt+0xcc0>
   11f18:	mov	r7, #-2147483648	; 0x80000000
   11f1c:	movw	r9, #33162	; 0x818a
   11f20:	movt	r9, #2
   11f24:	movw	sl, #33160	; 0x8188
   11f28:	movt	sl, #2
   11f2c:	ldrb	r0, [r8]
   11f30:	cmp	r0, #1
   11f34:	bne	11f50 <__assert_fail@plt+0xb90>
   11f38:	add	r1, r4, #8
   11f3c:	mov	r0, r6
   11f40:	mov	r2, #32
   11f44:	bl	1139c <strncmp@plt>
   11f48:	cmp	r0, #0
   11f4c:	bne	12064 <__assert_fail@plt+0xca4>
   11f50:	ldrb	r0, [r9]
   11f54:	cmp	r0, #1
   11f58:	bne	11f84 <__assert_fail@plt+0xbc4>
   11f5c:	ldrb	r0, [r4, #44]	; 0x2c
   11f60:	cmp	r0, #0
   11f64:	beq	11f84 <__assert_fail@plt+0xbc4>
   11f68:	ldrh	r0, [r4]
   11f6c:	cmp	r0, #7
   11f70:	bne	11f84 <__assert_fail@plt+0xbc4>
   11f74:	mov	r0, r4
   11f78:	mov	r1, r7
   11f7c:	bl	12168 <__assert_fail@plt+0xda8>
   11f80:	b	12064 <__assert_fail@plt+0xca4>
   11f84:	ldrb	r0, [sl]
   11f88:	cmp	r0, #1
   11f8c:	ldrheq	r0, [r4]
   11f90:	cmpeq	r0, #1
   11f94:	beq	1202c <__assert_fail@plt+0xc6c>
   11f98:	movw	r0, #33156	; 0x8184
   11f9c:	movt	r0, #2
   11fa0:	ldrb	r0, [r0]
   11fa4:	cmp	r0, #1
   11fa8:	ldrheq	r0, [r4]
   11fac:	cmpeq	r0, #2
   11fb0:	beq	12038 <__assert_fail@plt+0xc78>
   11fb4:	movw	r0, #33161	; 0x8189
   11fb8:	movt	r0, #2
   11fbc:	ldrb	r0, [r0]
   11fc0:	cmp	r0, #1
   11fc4:	ldrheq	r0, [r4]
   11fc8:	cmpeq	r0, #3
   11fcc:	beq	12044 <__assert_fail@plt+0xc84>
   11fd0:	movw	r0, #33159	; 0x8187
   11fd4:	movt	r0, #2
   11fd8:	ldrb	r0, [r0]
   11fdc:	cmp	r0, #1
   11fe0:	ldrheq	r0, [r4]
   11fe4:	cmpeq	r0, #5
   11fe8:	beq	12050 <__assert_fail@plt+0xc90>
   11fec:	movw	r0, #33158	; 0x8186
   11ff0:	movt	r0, #2
   11ff4:	ldrb	r0, [r0]
   11ff8:	cmp	r0, #1
   11ffc:	ldrheq	r0, [r4]
   12000:	cmpeq	r0, #6
   12004:	beq	1205c <__assert_fail@plt+0xc9c>
   12008:	movw	r0, #33157	; 0x8185
   1200c:	movt	r0, #2
   12010:	ldrb	r0, [r0]
   12014:	cmp	r0, #1
   12018:	ldrheq	r0, [r4]
   1201c:	cmpeq	r0, #8
   12020:	moveq	r0, r4
   12024:	bleq	127bc <__assert_fail@plt+0x13fc>
   12028:	b	12064 <__assert_fail@plt+0xca4>
   1202c:	mov	r0, r4
   12030:	bl	12470 <__assert_fail@plt+0x10b0>
   12034:	b	12064 <__assert_fail@plt+0xca4>
   12038:	mov	r0, r4
   1203c:	bl	125d8 <__assert_fail@plt+0x1218>
   12040:	b	12064 <__assert_fail@plt+0xca4>
   12044:	mov	r0, r4
   12048:	bl	1263c <__assert_fail@plt+0x127c>
   1204c:	b	12064 <__assert_fail@plt+0xca4>
   12050:	mov	r0, r4
   12054:	bl	126a0 <__assert_fail@plt+0x12e0>
   12058:	b	12064 <__assert_fail@plt+0xca4>
   1205c:	mov	r0, r4
   12060:	bl	12720 <__assert_fail@plt+0x1360>
   12064:	sub	r5, r5, #1
   12068:	ldrh	r0, [r4]
   1206c:	cmp	r0, #2
   12070:	ldreq	r7, [r4, #340]	; 0x154
   12074:	add	r4, r4, #384	; 0x180
   12078:	cmp	r5, #0
   1207c:	bne	11f2c <__assert_fail@plt+0xb6c>
   12080:	sub	sp, fp, #28
   12084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12088:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1208c:	add	fp, sp, #24
   12090:	sub	sp, sp, #24
   12094:	movw	r1, #26830	; 0x68ce
   12098:	movt	r1, #1
   1209c:	mov	r0, #0
   120a0:	mov	r2, #5
   120a4:	bl	11174 <dcgettext@plt>
   120a8:	mov	r8, r0
   120ac:	movw	r1, #26835	; 0x68d3
   120b0:	movt	r1, #1
   120b4:	mov	r0, #0
   120b8:	mov	r2, #5
   120bc:	bl	11174 <dcgettext@plt>
   120c0:	mov	r9, r0
   120c4:	movw	r1, #26840	; 0x68d8
   120c8:	movt	r1, #1
   120cc:	mov	r0, #0
   120d0:	mov	r2, #5
   120d4:	bl	11174 <dcgettext@plt>
   120d8:	mov	r6, r0
   120dc:	movw	r1, #26845	; 0x68dd
   120e0:	movt	r1, #1
   120e4:	mov	r0, #0
   120e8:	mov	r2, #5
   120ec:	bl	11174 <dcgettext@plt>
   120f0:	mov	r7, r0
   120f4:	movw	r1, #26850	; 0x68e2
   120f8:	movt	r1, #1
   120fc:	mov	r0, #0
   12100:	mov	r2, #5
   12104:	bl	11174 <dcgettext@plt>
   12108:	mov	r4, r0
   1210c:	movw	r1, #26854	; 0x68e6
   12110:	movt	r1, #1
   12114:	mov	r0, #0
   12118:	mov	r2, #5
   1211c:	bl	11174 <dcgettext@plt>
   12120:	mov	r5, r0
   12124:	movw	r1, #26862	; 0x68ee
   12128:	movt	r1, #1
   1212c:	mov	r0, #0
   12130:	mov	r2, #5
   12134:	bl	11174 <dcgettext@plt>
   12138:	str	r9, [sp]
   1213c:	stmib	sp, {r6, r7}
   12140:	str	r4, [sp, #12]
   12144:	str	r5, [sp, #16]
   12148:	str	r0, [sp, #20]
   1214c:	mvn	r0, #0
   12150:	mov	r1, r8
   12154:	mov	r2, #32
   12158:	mvn	r3, #0
   1215c:	bl	128fc <__assert_fail@plt+0x153c>
   12160:	sub	sp, fp, #24
   12164:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1216c:	add	fp, sp, #28
   12170:	sub	sp, sp, #468	; 0x1d4
   12174:	mov	r5, r1
   12178:	mov	r7, r0
   1217c:	ldr	r0, [r0, #4]
   12180:	str	r0, [sp]
   12184:	sub	r8, fp, #196	; 0xc4
   12188:	movw	r3, #26924	; 0x692c
   1218c:	movt	r3, #1
   12190:	mov	r0, r8
   12194:	mov	r1, #1
   12198:	mov	r2, #12
   1219c:	bl	112d0 <__sprintf_chk@plt>
   121a0:	mov	r4, r7
   121a4:	ldrb	r0, [r4, #8]!
   121a8:	cmp	r0, #47	; 0x2f
   121ac:	bne	121b8 <__assert_fail@plt+0xdf8>
   121b0:	sub	r0, fp, #184	; 0xb8
   121b4:	b	121d4 <__assert_fail@plt+0xe14>
   121b8:	mov	r0, #47	; 0x2f
   121bc:	strh	r0, [fp, #-180]	; 0xffffff4c
   121c0:	movw	r0, #25647	; 0x642f
   121c4:	movt	r0, #30309	; 0x7665
   121c8:	str	r0, [fp, #-184]	; 0xffffff48
   121cc:	sub	r0, fp, #184	; 0xb8
   121d0:	orr	r0, r0, #5
   121d4:	mov	r1, r4
   121d8:	mov	r2, #32
   121dc:	bl	12b20 <__assert_fail@plt+0x1760>
   121e0:	sub	r0, fp, #184	; 0xb8
   121e4:	sub	r1, fp, #136	; 0x88
   121e8:	bl	161a8 <__assert_fail@plt+0x4de8>
   121ec:	mov	r6, #63	; 0x3f
   121f0:	cmp	r0, #0
   121f4:	beq	12208 <__assert_fail@plt+0xe48>
   121f8:	sub	r0, fp, #143	; 0x8f
   121fc:	movw	r3, #26933	; 0x6935
   12200:	movt	r3, #1
   12204:	b	12248 <__assert_fail@plt+0xe88>
   12208:	sub	r0, fp, #136	; 0x88
   1220c:	bl	12b54 <__assert_fail@plt+0x1794>
   12210:	mov	r6, #45	; 0x2d
   12214:	cmp	r0, #0
   12218:	movwne	r6, #43	; 0x2b
   1221c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12220:	cmp	r0, #0
   12224:	beq	121f8 <__assert_fail@plt+0xe38>
   12228:	mov	r1, r5
   1222c:	bl	12b60 <__assert_fail@plt+0x17a0>
   12230:	mov	r1, #6
   12234:	str	r1, [sp]
   12238:	str	r0, [sp, #4]
   1223c:	sub	r0, fp, #143	; 0x8f
   12240:	movw	r3, #26928	; 0x6930
   12244:	movt	r3, #1
   12248:	mov	r1, #1
   1224c:	mov	r2, #7
   12250:	bl	112d0 <__sprintf_chk@plt>
   12254:	mov	r1, r7
   12258:	ldrb	r0, [r1, #76]!	; 0x4c
   1225c:	cmp	r0, #0
   12260:	beq	12358 <__assert_fail@plt+0xf98>
   12264:	add	r5, sp, #43	; 0x2b
   12268:	mov	r0, r5
   1226c:	mov	r2, #256	; 0x100
   12270:	bl	12b20 <__assert_fail@plt+0x1760>
   12274:	mov	r0, r5
   12278:	mov	r1, #58	; 0x3a
   1227c:	bl	112b8 <strchr@plt>
   12280:	mov	r2, #0
   12284:	cmp	r0, #0
   12288:	mov	sl, #0
   1228c:	movne	r1, #0
   12290:	strbne	r1, [r0], #1
   12294:	movne	sl, r0
   12298:	ldrb	r0, [sp, #43]	; 0x2b
   1229c:	cmp	r0, #0
   122a0:	str	r7, [sp, #36]	; 0x24
   122a4:	str	r6, [sp, #28]
   122a8:	mov	r6, r4
   122ac:	mov	r4, r8
   122b0:	beq	122d4 <__assert_fail@plt+0xf14>
   122b4:	movw	r0, #33170	; 0x8192
   122b8:	movt	r0, #2
   122bc:	ldrb	r0, [r0]
   122c0:	cmp	r0, #1
   122c4:	bne	122d4 <__assert_fail@plt+0xf14>
   122c8:	add	r0, sp, #43	; 0x2b
   122cc:	bl	13074 <__assert_fail@plt+0x1cb4>
   122d0:	mov	r2, r0
   122d4:	cmp	r2, #0
   122d8:	str	r2, [sp, #32]
   122dc:	movne	r5, r2
   122e0:	movw	r0, #33184	; 0x81a0
   122e4:	movt	r0, #2
   122e8:	mov	r7, r0
   122ec:	ldr	r9, [r0]
   122f0:	mov	r0, r5
   122f4:	bl	112ac <strlen@plt>
   122f8:	mov	r8, r0
   122fc:	cmp	sl, #0
   12300:	beq	123a8 <__assert_fail@plt+0xfe8>
   12304:	mov	r0, sl
   12308:	bl	112ac <strlen@plt>
   1230c:	add	r0, r8, r0
   12310:	add	r0, r0, #4
   12314:	cmp	r9, r0
   12318:	bcs	1233c <__assert_fail@plt+0xf7c>
   1231c:	str	r0, [r7]
   12320:	movw	r8, #33180	; 0x819c
   12324:	movt	r8, #2
   12328:	ldr	r0, [r8]
   1232c:	bl	1322c <__assert_fail@plt+0x1e6c>
   12330:	ldr	r0, [r7]
   12334:	bl	156fc <__assert_fail@plt+0x433c>
   12338:	str	r0, [r8]
   1233c:	movw	r0, #33180	; 0x819c
   12340:	movt	r0, #2
   12344:	ldr	r0, [r0]
   12348:	stm	sp, {r5, sl}
   1234c:	movw	r3, #26937	; 0x6939
   12350:	movt	r3, #1
   12354:	b	123ec <__assert_fail@plt+0x102c>
   12358:	movw	r5, #33184	; 0x81a0
   1235c:	movt	r5, #2
   12360:	ldr	r0, [r5]
   12364:	cmp	r0, #0
   12368:	bne	12390 <__assert_fail@plt+0xfd0>
   1236c:	mov	r0, #1
   12370:	str	r0, [r5]
   12374:	movw	r9, #33180	; 0x819c
   12378:	movt	r9, #2
   1237c:	ldr	r0, [r9]
   12380:	bl	1322c <__assert_fail@plt+0x1e6c>
   12384:	ldr	r0, [r5]
   12388:	bl	156fc <__assert_fail@plt+0x433c>
   1238c:	str	r0, [r9]
   12390:	movw	r0, #33180	; 0x819c
   12394:	movt	r0, #2
   12398:	ldr	r0, [r0]
   1239c:	mov	r1, #0
   123a0:	strb	r1, [r0]
   123a4:	b	1241c <__assert_fail@plt+0x105c>
   123a8:	add	r0, r8, #3
   123ac:	cmp	r9, r0
   123b0:	bcs	123d4 <__assert_fail@plt+0x1014>
   123b4:	str	r0, [r7]
   123b8:	movw	r8, #33180	; 0x819c
   123bc:	movt	r8, #2
   123c0:	ldr	r0, [r8]
   123c4:	bl	1322c <__assert_fail@plt+0x1e6c>
   123c8:	ldr	r0, [r7]
   123cc:	bl	156fc <__assert_fail@plt+0x433c>
   123d0:	str	r0, [r8]
   123d4:	movw	r0, #33180	; 0x819c
   123d8:	movt	r0, #2
   123dc:	ldr	r0, [r0]
   123e0:	str	r5, [sp]
   123e4:	movw	r3, #26945	; 0x6941
   123e8:	movt	r3, #1
   123ec:	mov	r1, #1
   123f0:	mvn	r2, #0
   123f4:	bl	112d0 <__sprintf_chk@plt>
   123f8:	mov	r8, r4
   123fc:	mov	r4, r6
   12400:	ldr	r7, [sp, #36]	; 0x24
   12404:	ldr	r6, [sp, #28]
   12408:	ldr	r0, [sp, #32]
   1240c:	cmp	r0, #0
   12410:	beq	1241c <__assert_fail@plt+0x105c>
   12414:	mov	r0, r5
   12418:	bl	1322c <__assert_fail@plt+0x1e6c>
   1241c:	mov	r0, r7
   12420:	bl	12c78 <__assert_fail@plt+0x18b8>
   12424:	movw	r1, #33180	; 0x819c
   12428:	movt	r1, #2
   1242c:	ldr	r1, [r1]
   12430:	movw	r2, #26699	; 0x684b
   12434:	movt	r2, #1
   12438:	sub	r3, fp, #143	; 0x8f
   1243c:	cmp	r1, #0
   12440:	moveq	r1, r2
   12444:	str	r4, [sp]
   12448:	stmib	sp, {r0, r3, r8}
   1244c:	str	r1, [sp, #16]
   12450:	str	r2, [sp, #20]
   12454:	add	r1, r7, #44	; 0x2c
   12458:	mov	r0, #32
   1245c:	mov	r2, r6
   12460:	mov	r3, #32
   12464:	bl	128fc <__assert_fail@plt+0x153c>
   12468:	sub	sp, fp, #28
   1246c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12470:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12474:	add	fp, sp, #24
   12478:	sub	sp, sp, #24
   1247c:	mov	r4, r0
   12480:	ldr	r7, [r0, #4]
   12484:	asr	r0, r7, #31
   12488:	add	r5, r7, r0, lsr #24
   1248c:	movw	r8, #33228	; 0x81cc
   12490:	movt	r8, #2
   12494:	ldr	r0, [r8]
   12498:	cmp	r0, #0
   1249c:	bne	124c4 <__assert_fail@plt+0x1104>
   124a0:	movw	r1, #27052	; 0x69ac
   124a4:	movt	r1, #1
   124a8:	mov	r0, #0
   124ac:	mov	r2, #5
   124b0:	bl	11174 <dcgettext@plt>
   124b4:	bl	112ac <strlen@plt>
   124b8:	add	r0, r0, #3
   124bc:	bl	156fc <__assert_fail@plt+0x433c>
   124c0:	str	r0, [r8]
   124c4:	asr	r6, r5, #8
   124c8:	ldr	r5, [r8]
   124cc:	movw	r1, #27052	; 0x69ac
   124d0:	movt	r1, #1
   124d4:	mov	r0, #0
   124d8:	mov	r2, #5
   124dc:	bl	11174 <dcgettext@plt>
   124e0:	uxtb	r1, r7
   124e4:	stm	sp, {r0, r1}
   124e8:	movw	r3, #27062	; 0x69b6
   124ec:	movt	r3, #1
   124f0:	mov	r0, r5
   124f4:	mov	r1, #1
   124f8:	mvn	r2, #0
   124fc:	bl	112d0 <__sprintf_chk@plt>
   12500:	movw	r7, #33232	; 0x81d0
   12504:	movt	r7, #2
   12508:	ldr	r0, [r7]
   1250c:	cmp	r0, #0
   12510:	bne	12538 <__assert_fail@plt+0x1178>
   12514:	movw	r1, #27068	; 0x69bc
   12518:	movt	r1, #1
   1251c:	mov	r0, #0
   12520:	mov	r2, #5
   12524:	bl	11174 <dcgettext@plt>
   12528:	bl	112ac <strlen@plt>
   1252c:	add	r0, r0, #2
   12530:	bl	156fc <__assert_fail@plt+0x433c>
   12534:	str	r0, [r7]
   12538:	ldr	r5, [r7]
   1253c:	movw	r1, #27068	; 0x69bc
   12540:	movt	r1, #1
   12544:	mov	r0, #0
   12548:	mov	r2, #5
   1254c:	bl	11174 <dcgettext@plt>
   12550:	uxtb	r6, r6
   12554:	cmp	r6, #78	; 0x4e
   12558:	mov	r1, r6
   1255c:	movweq	r1, #83	; 0x53
   12560:	stm	sp, {r0, r1}
   12564:	movw	r3, #27074	; 0x69c2
   12568:	movt	r3, #1
   1256c:	mov	r0, r5
   12570:	mov	r1, #1
   12574:	mvn	r2, #0
   12578:	bl	112d0 <__sprintf_chk@plt>
   1257c:	ldr	r5, [r8]
   12580:	mov	r0, r4
   12584:	bl	12c78 <__assert_fail@plt+0x18b8>
   12588:	mov	r4, r0
   1258c:	mov	r0, r6
   12590:	bl	12e2c <__assert_fail@plt+0x1a6c>
   12594:	ldr	r2, [r7]
   12598:	movw	r1, #26699	; 0x684b
   1259c:	movt	r1, #1
   125a0:	cmp	r0, #0
   125a4:	moveq	r2, r1
   125a8:	str	r5, [sp]
   125ac:	str	r4, [sp, #4]
   125b0:	str	r1, [sp, #8]
   125b4:	str	r1, [sp, #12]
   125b8:	str	r2, [sp, #16]
   125bc:	str	r1, [sp, #20]
   125c0:	mvn	r0, #0
   125c4:	mov	r2, #32
   125c8:	mvn	r3, #0
   125cc:	bl	128fc <__assert_fail@plt+0x153c>
   125d0:	sub	sp, fp, #24
   125d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   125d8:	push	{r4, r5, fp, lr}
   125dc:	add	fp, sp, #8
   125e0:	sub	sp, sp, #24
   125e4:	mov	r4, r0
   125e8:	movw	r1, #27079	; 0x69c7
   125ec:	movt	r1, #1
   125f0:	mov	r0, #0
   125f4:	mov	r2, #5
   125f8:	bl	11174 <dcgettext@plt>
   125fc:	mov	r5, r0
   12600:	mov	r0, r4
   12604:	bl	12c78 <__assert_fail@plt+0x18b8>
   12608:	movw	r1, #26699	; 0x684b
   1260c:	movt	r1, #1
   12610:	str	r5, [sp]
   12614:	stmib	sp, {r0, r1}
   12618:	str	r1, [sp, #12]
   1261c:	str	r1, [sp, #16]
   12620:	str	r1, [sp, #20]
   12624:	mvn	r0, #0
   12628:	mov	r2, #32
   1262c:	mvn	r3, #0
   12630:	bl	128fc <__assert_fail@plt+0x153c>
   12634:	sub	sp, fp, #8
   12638:	pop	{r4, r5, fp, pc}
   1263c:	push	{r4, r5, fp, lr}
   12640:	add	fp, sp, #8
   12644:	sub	sp, sp, #24
   12648:	mov	r4, r0
   1264c:	movw	r1, #27091	; 0x69d3
   12650:	movt	r1, #1
   12654:	mov	r0, #0
   12658:	mov	r2, #5
   1265c:	bl	11174 <dcgettext@plt>
   12660:	mov	r5, r0
   12664:	mov	r0, r4
   12668:	bl	12c78 <__assert_fail@plt+0x18b8>
   1266c:	movw	r1, #26699	; 0x684b
   12670:	movt	r1, #1
   12674:	str	r5, [sp]
   12678:	stmib	sp, {r0, r1}
   1267c:	str	r1, [sp, #12]
   12680:	str	r1, [sp, #16]
   12684:	str	r1, [sp, #20]
   12688:	mvn	r0, #0
   1268c:	mov	r2, #32
   12690:	mvn	r3, #0
   12694:	bl	128fc <__assert_fail@plt+0x153c>
   12698:	sub	sp, fp, #8
   1269c:	pop	{r4, r5, fp, pc}
   126a0:	push	{r4, r5, r6, sl, fp, lr}
   126a4:	add	fp, sp, #16
   126a8:	sub	sp, sp, #40	; 0x28
   126ac:	mov	r5, r0
   126b0:	bl	12cec <__assert_fail@plt+0x192c>
   126b4:	mov	r4, r0
   126b8:	ldr	r0, [r5, #4]
   126bc:	str	r0, [sp]
   126c0:	add	r6, sp, #28
   126c4:	movw	r3, #26924	; 0x692c
   126c8:	movt	r3, #1
   126cc:	mov	r0, r6
   126d0:	mov	r1, #1
   126d4:	mov	r2, #12
   126d8:	bl	112d0 <__sprintf_chk@plt>
   126dc:	mov	r0, r5
   126e0:	bl	12c78 <__assert_fail@plt+0x18b8>
   126e4:	movw	r1, #26699	; 0x684b
   126e8:	movt	r1, #1
   126ec:	add	r2, r5, #8
   126f0:	str	r2, [sp]
   126f4:	stmib	sp, {r0, r1, r6}
   126f8:	str	r4, [sp, #16]
   126fc:	str	r1, [sp, #20]
   12700:	mvn	r0, #0
   12704:	mov	r2, #32
   12708:	mov	r3, #32
   1270c:	bl	128fc <__assert_fail@plt+0x153c>
   12710:	mov	r0, r4
   12714:	bl	1322c <__assert_fail@plt+0x1e6c>
   12718:	sub	sp, fp, #16
   1271c:	pop	{r4, r5, r6, sl, fp, pc}
   12720:	push	{r4, r5, r6, r7, fp, lr}
   12724:	add	fp, sp, #16
   12728:	sub	sp, sp, #40	; 0x28
   1272c:	mov	r5, r0
   12730:	bl	12cec <__assert_fail@plt+0x192c>
   12734:	mov	r4, r0
   12738:	ldr	r0, [r5, #4]
   1273c:	str	r0, [sp]
   12740:	add	r6, sp, #28
   12744:	movw	r3, #26924	; 0x692c
   12748:	movt	r3, #1
   1274c:	mov	r0, r6
   12750:	mov	r1, #1
   12754:	mov	r2, #12
   12758:	bl	112d0 <__sprintf_chk@plt>
   1275c:	movw	r1, #27108	; 0x69e4
   12760:	movt	r1, #1
   12764:	mov	r0, #0
   12768:	mov	r2, #5
   1276c:	bl	11174 <dcgettext@plt>
   12770:	mov	r7, r0
   12774:	mov	r0, r5
   12778:	bl	12c78 <__assert_fail@plt+0x18b8>
   1277c:	movw	r1, #26699	; 0x684b
   12780:	movt	r1, #1
   12784:	add	r2, r5, #8
   12788:	str	r2, [sp]
   1278c:	stmib	sp, {r0, r1, r6}
   12790:	str	r4, [sp, #16]
   12794:	str	r1, [sp, #20]
   12798:	mvn	r0, #0
   1279c:	mov	r1, r7
   127a0:	mov	r2, #32
   127a4:	mov	r3, #32
   127a8:	bl	128fc <__assert_fail@plt+0x153c>
   127ac:	mov	r0, r4
   127b0:	bl	1322c <__assert_fail@plt+0x1e6c>
   127b4:	sub	sp, fp, #16
   127b8:	pop	{r4, r5, r6, r7, fp, pc}
   127bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c0:	add	fp, sp, #28
   127c4:	sub	sp, sp, #36	; 0x24
   127c8:	mov	r5, r0
   127cc:	bl	12cec <__assert_fail@plt+0x192c>
   127d0:	mov	sl, r0
   127d4:	ldr	r0, [r5, #4]
   127d8:	str	r0, [sp]
   127dc:	add	r8, sp, #24
   127e0:	movw	r3, #26924	; 0x692c
   127e4:	movt	r3, #1
   127e8:	mov	r0, r8
   127ec:	mov	r1, #1
   127f0:	mov	r2, #12
   127f4:	bl	112d0 <__sprintf_chk@plt>
   127f8:	movw	r9, #33236	; 0x81d4
   127fc:	movt	r9, #2
   12800:	ldr	r0, [r9]
   12804:	cmp	r0, #0
   12808:	bne	12850 <__assert_fail@plt+0x1490>
   1280c:	movw	r1, #27114	; 0x69ea
   12810:	movt	r1, #1
   12814:	mov	r0, #0
   12818:	mov	r2, #5
   1281c:	bl	11174 <dcgettext@plt>
   12820:	bl	112ac <strlen@plt>
   12824:	mov	r7, r0
   12828:	movw	r1, #27120	; 0x69f0
   1282c:	movt	r1, #1
   12830:	mov	r0, #0
   12834:	mov	r2, #5
   12838:	bl	11174 <dcgettext@plt>
   1283c:	bl	112ac <strlen@plt>
   12840:	add	r0, r7, r0
   12844:	add	r0, r0, #14
   12848:	bl	156fc <__assert_fail@plt+0x433c>
   1284c:	str	r0, [r9]
   12850:	ldr	r7, [r9]
   12854:	movw	r1, #27114	; 0x69ea
   12858:	movt	r1, #1
   1285c:	mov	r0, #0
   12860:	mov	r2, #5
   12864:	bl	11174 <dcgettext@plt>
   12868:	mov	r6, r0
   1286c:	mov	r0, #332	; 0x14c
   12870:	ldrsh	r4, [r5, r0]
   12874:	movw	r1, #27120	; 0x69f0
   12878:	movt	r1, #1
   1287c:	mov	r0, #0
   12880:	mov	r2, #5
   12884:	bl	11174 <dcgettext@plt>
   12888:	movw	r1, #334	; 0x14e
   1288c:	ldrsh	r1, [r5, r1]
   12890:	str	r6, [sp]
   12894:	str	r4, [sp, #4]
   12898:	str	r0, [sp, #8]
   1289c:	str	r1, [sp, #12]
   128a0:	movw	r3, #27126	; 0x69f6
   128a4:	movt	r3, #1
   128a8:	mov	r0, r7
   128ac:	mov	r1, #1
   128b0:	mvn	r2, #0
   128b4:	bl	112d0 <__sprintf_chk@plt>
   128b8:	mov	r0, r5
   128bc:	bl	12c78 <__assert_fail@plt+0x18b8>
   128c0:	ldr	r2, [r9]
   128c4:	movw	r1, #26699	; 0x684b
   128c8:	movt	r1, #1
   128cc:	add	r3, r5, #8
   128d0:	str	r3, [sp]
   128d4:	stmib	sp, {r0, r1, r8, sl}
   128d8:	str	r2, [sp, #20]
   128dc:	mvn	r0, #0
   128e0:	mov	r2, #32
   128e4:	mov	r3, #32
   128e8:	bl	128fc <__assert_fail@plt+0x153c>
   128ec:	mov	r0, sl
   128f0:	bl	1322c <__assert_fail@plt+0x1e6c>
   128f4:	sub	sp, fp, #28
   128f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12900:	add	fp, sp, #28
   12904:	sub	sp, sp, #68	; 0x44
   12908:	mov	r9, r3
   1290c:	mov	r6, r1
   12910:	mov	r5, r0
   12914:	movw	r8, #33048	; 0x8118
   12918:	movt	r8, #2
   1291c:	strb	r2, [r8, #1]
   12920:	movw	r0, #33164	; 0x818c
   12924:	movt	r0, #2
   12928:	ldrb	r0, [r0]
   1292c:	cmp	r0, #1
   12930:	bne	1297c <__assert_fail@plt+0x15bc>
   12934:	movw	r0, #33169	; 0x8191
   12938:	movt	r0, #2
   1293c:	ldrb	r0, [r0]
   12940:	cmp	r0, #0
   12944:	bne	1297c <__assert_fail@plt+0x15bc>
   12948:	ldr	r4, [fp, #16]
   1294c:	mov	r0, r4
   12950:	bl	112ac <strlen@plt>
   12954:	cmp	r0, #6
   12958:	bhi	1297c <__assert_fail@plt+0x15bc>
   1295c:	str	r4, [sp]
   12960:	sub	r0, fp, #40	; 0x28
   12964:	movw	r3, #26867	; 0x68f3
   12968:	movt	r3, #1
   1296c:	mov	r1, #1
   12970:	mov	r2, #8
   12974:	bl	112d0 <__sprintf_chk@plt>
   12978:	b	12984 <__assert_fail@plt+0x15c4>
   1297c:	mov	r0, #0
   12980:	strb	r0, [fp, #-40]	; 0xffffffd8
   12984:	movw	r0, #33169	; 0x8191
   12988:	movt	r0, #2
   1298c:	ldrb	r0, [r0]
   12990:	cmp	r0, #0
   12994:	bne	129cc <__assert_fail@plt+0x160c>
   12998:	ldr	r4, [fp, #20]
   1299c:	mov	r0, r4
   129a0:	bl	112ac <strlen@plt>
   129a4:	cmp	r0, #11
   129a8:	bhi	129cc <__assert_fail@plt+0x160c>
   129ac:	str	r4, [sp]
   129b0:	add	r0, sp, #43	; 0x2b
   129b4:	movw	r3, #26873	; 0x68f9
   129b8:	movt	r3, #1
   129bc:	mov	r1, #1
   129c0:	mov	r2, #13
   129c4:	bl	112d0 <__sprintf_chk@plt>
   129c8:	b	129d4 <__assert_fail@plt+0x1614>
   129cc:	mov	r0, #0
   129d0:	strb	r0, [sp, #43]	; 0x2b
   129d4:	ldr	r4, [fp, #28]
   129d8:	movw	sl, #33165	; 0x818d
   129dc:	movt	sl, #2
   129e0:	ldrb	r1, [sl]
   129e4:	mov	r0, #1
   129e8:	cmp	r1, #1
   129ec:	bne	12a08 <__assert_fail@plt+0x1648>
   129f0:	mov	r0, r4
   129f4:	bl	112ac <strlen@plt>
   129f8:	mov	r1, r0
   129fc:	add	r0, r0, #2
   12a00:	cmp	r1, #12
   12a04:	movwcc	r0, #14
   12a08:	bl	156fc <__assert_fail@plt+0x433c>
   12a0c:	mov	r7, r0
   12a10:	ldrb	r0, [sl]
   12a14:	cmp	r0, #1
   12a18:	bne	12a3c <__assert_fail@plt+0x167c>
   12a1c:	str	r4, [sp]
   12a20:	movw	r3, #26879	; 0x68ff
   12a24:	movt	r3, #1
   12a28:	mov	r0, r7
   12a2c:	mov	r1, #1
   12a30:	mvn	r2, #0
   12a34:	bl	112d0 <__sprintf_chk@plt>
   12a38:	b	12a44 <__assert_fail@plt+0x1684>
   12a3c:	mov	r0, #0
   12a40:	strb	r0, [r7]
   12a44:	mov	r3, r5
   12a48:	movw	r0, #33163	; 0x818b
   12a4c:	movt	r0, #2
   12a50:	ldrb	r0, [r0]
   12a54:	movw	r1, #33176	; 0x8198
   12a58:	movt	r1, #2
   12a5c:	ldr	r1, [r1]
   12a60:	ldr	r2, [fp, #24]
   12a64:	str	r2, [sp, #32]
   12a68:	str	r7, [sp, #36]	; 0x24
   12a6c:	add	r2, sp, #43	; 0x2b
   12a70:	sub	r5, fp, #40	; 0x28
   12a74:	movw	r4, #26919	; 0x6927
   12a78:	movt	r4, #1
   12a7c:	cmp	r6, #0
   12a80:	movne	r4, r6
   12a84:	movw	r6, #26699	; 0x684b
   12a88:	movt	r6, #1
   12a8c:	cmp	r0, #0
   12a90:	movne	r6, r8
   12a94:	stm	sp, {r4, r6, r9}
   12a98:	ldr	r0, [fp, #8]
   12a9c:	str	r0, [sp, #12]
   12aa0:	str	r1, [sp, #16]
   12aa4:	ldr	r0, [fp, #12]
   12aa8:	str	r0, [sp, #20]
   12aac:	str	r5, [sp, #24]
   12ab0:	str	r2, [sp, #28]
   12ab4:	sub	r0, fp, #32
   12ab8:	movw	r2, #26886	; 0x6906
   12abc:	movt	r2, #1
   12ac0:	mov	r1, #1
   12ac4:	bl	11210 <__asprintf_chk@plt>
   12ac8:	cmn	r0, #1
   12acc:	beq	12b1c <__assert_fail@plt+0x175c>
   12ad0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12ad4:	mov	r0, r4
   12ad8:	bl	112ac <strlen@plt>
   12adc:	add	r0, r4, r0
   12ae0:	add	r0, r0, #1
   12ae4:	ldrb	r1, [r0, #-2]
   12ae8:	sub	r0, r0, #1
   12aec:	cmp	r1, #32
   12af0:	beq	12ae4 <__assert_fail@plt+0x1724>
   12af4:	mov	r1, #0
   12af8:	strb	r1, [r0]
   12afc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b00:	bl	1121c <puts@plt>
   12b04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b08:	bl	1322c <__assert_fail@plt+0x1e6c>
   12b0c:	mov	r0, r7
   12b10:	bl	1322c <__assert_fail@plt+0x1e6c>
   12b14:	sub	sp, fp, #28
   12b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b1c:	bl	15aac <__assert_fail@plt+0x46ec>
   12b20:	cmp	r2, #1
   12b24:	blt	12b48 <__assert_fail@plt+0x1788>
   12b28:	add	r2, r1, r2
   12b2c:	ldrb	r3, [r1]
   12b30:	cmp	r3, #0
   12b34:	beq	12b48 <__assert_fail@plt+0x1788>
   12b38:	strb	r3, [r0], #1
   12b3c:	add	r1, r1, #1
   12b40:	cmp	r1, r2
   12b44:	bcc	12b2c <__assert_fail@plt+0x176c>
   12b48:	mov	r1, #0
   12b4c:	strb	r1, [r0]
   12b50:	bx	lr
   12b54:	ldrb	r0, [r0, #16]
   12b58:	ubfx	r0, r0, #4, #1
   12b5c:	bx	lr
   12b60:	push	{r4, r5, r6, sl, fp, lr}
   12b64:	add	fp, sp, #16
   12b68:	sub	sp, sp, #8
   12b6c:	mov	r5, r1
   12b70:	mov	r4, r0
   12b74:	movw	r6, #33052	; 0x811c
   12b78:	movt	r6, #2
   12b7c:	ldr	r0, [r6]
   12b80:	cmp	r0, #-2147483648	; 0x80000000
   12b84:	bne	12b94 <__assert_fail@plt+0x17d4>
   12b88:	movw	r0, #33052	; 0x811c
   12b8c:	movt	r0, #2
   12b90:	bl	11150 <time@plt>
   12b94:	cmp	r5, r4
   12b98:	bge	12bd0 <__assert_fail@plt+0x1810>
   12b9c:	ldr	r0, [r6]
   12ba0:	cmp	r0, r4
   12ba4:	blt	12bd0 <__assert_fail@plt+0x1810>
   12ba8:	sub	r1, r0, #4480	; 0x1180
   12bac:	sub	r1, r1, #81920	; 0x14000
   12bb0:	cmp	r1, r4
   12bb4:	bge	12bd0 <__assert_fail@plt+0x1810>
   12bb8:	sub	r0, r0, r4
   12bbc:	cmp	r0, #60	; 0x3c
   12bc0:	bge	12bec <__assert_fail@plt+0x182c>
   12bc4:	movw	r4, #26950	; 0x6946
   12bc8:	movt	r4, #1
   12bcc:	b	12c4c <__assert_fail@plt+0x188c>
   12bd0:	movw	r1, #27046	; 0x69a6
   12bd4:	movt	r1, #1
   12bd8:	mov	r0, #0
   12bdc:	mov	r2, #5
   12be0:	sub	sp, fp, #16
   12be4:	pop	{r4, r5, r6, sl, fp, lr}
   12be8:	b	11174 <dcgettext@plt>
   12bec:	movw	r1, #20864	; 0x5180
   12bf0:	movt	r1, #1
   12bf4:	cmp	r0, r1
   12bf8:	bge	12c58 <__assert_fail@plt+0x1898>
   12bfc:	movw	r1, #46021	; 0xb3c5
   12c00:	movt	r1, #37282	; 0x91a2
   12c04:	umull	r1, r2, r0, r1
   12c08:	lsr	r1, r2, #11
   12c0c:	mov	r2, #3600	; 0xe10
   12c10:	mls	r0, r1, r2, r0
   12c14:	movw	r2, #34953	; 0x8889
   12c18:	movt	r2, #34952	; 0x8888
   12c1c:	umull	r0, r2, r0, r2
   12c20:	lsr	r0, r2, #5
   12c24:	str	r1, [sp]
   12c28:	str	r0, [sp, #4]
   12c2c:	movw	r4, #33188	; 0x81a4
   12c30:	movt	r4, #2
   12c34:	movw	r3, #27036	; 0x699c
   12c38:	movt	r3, #1
   12c3c:	mov	r0, r4
   12c40:	mov	r1, #1
   12c44:	mov	r2, #6
   12c48:	bl	112d0 <__sprintf_chk@plt>
   12c4c:	mov	r0, r4
   12c50:	sub	sp, fp, #16
   12c54:	pop	{r4, r5, r6, sl, fp, pc}
   12c58:	movw	r0, #26956	; 0x694c
   12c5c:	movt	r0, #1
   12c60:	movw	r1, #26986	; 0x696a
   12c64:	movt	r1, #1
   12c68:	movw	r3, #26996	; 0x6974
   12c6c:	movt	r3, #1
   12c70:	mov	r2, #205	; 0xcd
   12c74:	bl	113c0 <__assert_fail@plt>
   12c78:	push	{r4, sl, fp, lr}
   12c7c:	add	fp, sp, #8
   12c80:	sub	sp, sp, #8
   12c84:	ldr	r0, [r0, #340]	; 0x154
   12c88:	str	r0, [sp, #4]
   12c8c:	add	r0, sp, #4
   12c90:	bl	11258 <localtime@plt>
   12c94:	cmp	r0, #0
   12c98:	beq	12cc4 <__assert_fail@plt+0x1904>
   12c9c:	mov	r3, r0
   12ca0:	movw	r0, #33172	; 0x8194
   12ca4:	movt	r0, #2
   12ca8:	ldr	r2, [r0]
   12cac:	movw	r4, #33194	; 0x81aa
   12cb0:	movt	r4, #2
   12cb4:	mov	r0, r4
   12cb8:	mov	r1, #33	; 0x21
   12cbc:	bl	11240 <strftime@plt>
   12cc0:	b	12cd0 <__assert_fail@plt+0x1910>
   12cc4:	ldr	r0, [sp, #4]
   12cc8:	bl	12cdc <__assert_fail@plt+0x191c>
   12ccc:	mov	r4, r0
   12cd0:	mov	r0, r4
   12cd4:	sub	sp, fp, #8
   12cd8:	pop	{r4, sl, fp, pc}
   12cdc:	asr	r1, r0, #31
   12ce0:	movw	r2, #33194	; 0x81aa
   12ce4:	movt	r2, #2
   12ce8:	b	132b8 <__assert_fail@plt+0x1ef8>
   12cec:	push	{r4, r5, r6, sl, fp, lr}
   12cf0:	add	fp, sp, #16
   12cf4:	mov	r4, r0
   12cf8:	movw	r5, #27104	; 0x69e0
   12cfc:	movt	r5, #1
   12d00:	mov	r0, #0
   12d04:	mov	r1, r5
   12d08:	mov	r2, #5
   12d0c:	bl	11174 <dcgettext@plt>
   12d10:	bl	112ac <strlen@plt>
   12d14:	add	r0, r0, #5
   12d18:	bl	156fc <__assert_fail@plt+0x433c>
   12d1c:	mov	r6, r0
   12d20:	mov	r0, #0
   12d24:	mov	r1, r5
   12d28:	mov	r2, #5
   12d2c:	bl	11174 <dcgettext@plt>
   12d30:	mov	r1, r0
   12d34:	mov	r0, r6
   12d38:	bl	11168 <stpcpy@plt>
   12d3c:	add	r1, r4, #40	; 0x28
   12d40:	mov	r2, #4
   12d44:	bl	12b20 <__assert_fail@plt+0x1760>
   12d48:	mov	r0, r6
   12d4c:	pop	{r4, r5, r6, sl, fp, pc}
   12d50:	mov	r1, r0
   12d54:	sub	r2, r0, #65	; 0x41
   12d58:	mov	r0, #1
   12d5c:	cmp	r2, #26
   12d60:	subcs	r2, r1, #97	; 0x61
   12d64:	cmpcs	r2, #26
   12d68:	bcs	12d70 <__assert_fail@plt+0x19b0>
   12d6c:	bx	lr
   12d70:	sub	r1, r1, #48	; 0x30
   12d74:	cmp	r1, #10
   12d78:	movcs	r0, #0
   12d7c:	bx	lr
   12d80:	mov	r1, r0
   12d84:	sub	r2, r0, #65	; 0x41
   12d88:	mov	r0, #1
   12d8c:	cmp	r2, #26
   12d90:	subcs	r1, r1, #97	; 0x61
   12d94:	cmpcs	r1, #26
   12d98:	movcs	r0, #0
   12d9c:	bx	lr
   12da0:	mov	r1, #0
   12da4:	cmp	r0, #128	; 0x80
   12da8:	movwcc	r1, #1
   12dac:	mov	r0, r1
   12db0:	bx	lr
   12db4:	sub	r1, r0, #9
   12db8:	clz	r1, r1
   12dbc:	lsr	r1, r1, #5
   12dc0:	sub	r0, r0, #32
   12dc4:	clz	r0, r0
   12dc8:	lsr	r0, r0, #5
   12dcc:	orr	r0, r0, r1
   12dd0:	bx	lr
   12dd4:	mov	r1, r0
   12dd8:	mov	r0, #1
   12ddc:	cmp	r1, #32
   12de0:	bxcc	lr
   12de4:	cmp	r1, #127	; 0x7f
   12de8:	movne	r0, #0
   12dec:	bx	lr
   12df0:	sub	r1, r0, #48	; 0x30
   12df4:	mov	r0, #0
   12df8:	cmp	r1, #10
   12dfc:	movwcc	r0, #1
   12e00:	bx	lr
   12e04:	sub	r1, r0, #33	; 0x21
   12e08:	mov	r0, #0
   12e0c:	cmp	r1, #94	; 0x5e
   12e10:	movwcc	r0, #1
   12e14:	bx	lr
   12e18:	sub	r1, r0, #97	; 0x61
   12e1c:	mov	r0, #0
   12e20:	cmp	r1, #26
   12e24:	movwcc	r0, #1
   12e28:	bx	lr
   12e2c:	sub	r1, r0, #32
   12e30:	mov	r0, #0
   12e34:	cmp	r1, #95	; 0x5f
   12e38:	movwcc	r0, #1
   12e3c:	bx	lr
   12e40:	sub	r1, r0, #33	; 0x21
   12e44:	cmp	r1, #93	; 0x5d
   12e48:	bhi	12fd4 <__assert_fail@plt+0x1c14>
   12e4c:	mov	r0, #1
   12e50:	add	r2, pc, #0
   12e54:	ldr	pc, [r2, r1, lsl #2]
   12e58:	ldrdeq	r2, [r1], -r0
   12e5c:	ldrdeq	r2, [r1], -r0
   12e60:	ldrdeq	r2, [r1], -r0
   12e64:	ldrdeq	r2, [r1], -r0
   12e68:	ldrdeq	r2, [r1], -r0
   12e6c:	ldrdeq	r2, [r1], -r0
   12e70:	ldrdeq	r2, [r1], -r0
   12e74:	ldrdeq	r2, [r1], -r0
   12e78:	ldrdeq	r2, [r1], -r0
   12e7c:	ldrdeq	r2, [r1], -r0
   12e80:	ldrdeq	r2, [r1], -r0
   12e84:	ldrdeq	r2, [r1], -r0
   12e88:	ldrdeq	r2, [r1], -r0
   12e8c:	ldrdeq	r2, [r1], -r0
   12e90:	ldrdeq	r2, [r1], -r0
   12e94:	ldrdeq	r2, [r1], -r4
   12e98:	ldrdeq	r2, [r1], -r4
   12e9c:	ldrdeq	r2, [r1], -r4
   12ea0:	ldrdeq	r2, [r1], -r4
   12ea4:	ldrdeq	r2, [r1], -r4
   12ea8:	ldrdeq	r2, [r1], -r4
   12eac:	ldrdeq	r2, [r1], -r4
   12eb0:	ldrdeq	r2, [r1], -r4
   12eb4:	ldrdeq	r2, [r1], -r4
   12eb8:	ldrdeq	r2, [r1], -r4
   12ebc:	ldrdeq	r2, [r1], -r0
   12ec0:	ldrdeq	r2, [r1], -r0
   12ec4:	ldrdeq	r2, [r1], -r0
   12ec8:	ldrdeq	r2, [r1], -r0
   12ecc:	ldrdeq	r2, [r1], -r0
   12ed0:	ldrdeq	r2, [r1], -r0
   12ed4:	ldrdeq	r2, [r1], -r0
   12ed8:	ldrdeq	r2, [r1], -r4
   12edc:	ldrdeq	r2, [r1], -r4
   12ee0:	ldrdeq	r2, [r1], -r4
   12ee4:	ldrdeq	r2, [r1], -r4
   12ee8:	ldrdeq	r2, [r1], -r4
   12eec:	ldrdeq	r2, [r1], -r4
   12ef0:	ldrdeq	r2, [r1], -r4
   12ef4:	ldrdeq	r2, [r1], -r4
   12ef8:	ldrdeq	r2, [r1], -r4
   12efc:	ldrdeq	r2, [r1], -r4
   12f00:	ldrdeq	r2, [r1], -r4
   12f04:	ldrdeq	r2, [r1], -r4
   12f08:	ldrdeq	r2, [r1], -r4
   12f0c:	ldrdeq	r2, [r1], -r4
   12f10:	ldrdeq	r2, [r1], -r4
   12f14:	ldrdeq	r2, [r1], -r4
   12f18:	ldrdeq	r2, [r1], -r4
   12f1c:	ldrdeq	r2, [r1], -r4
   12f20:	ldrdeq	r2, [r1], -r4
   12f24:	ldrdeq	r2, [r1], -r4
   12f28:	ldrdeq	r2, [r1], -r4
   12f2c:	ldrdeq	r2, [r1], -r4
   12f30:	ldrdeq	r2, [r1], -r4
   12f34:	ldrdeq	r2, [r1], -r4
   12f38:	ldrdeq	r2, [r1], -r4
   12f3c:	ldrdeq	r2, [r1], -r4
   12f40:	ldrdeq	r2, [r1], -r0
   12f44:	ldrdeq	r2, [r1], -r0
   12f48:	ldrdeq	r2, [r1], -r0
   12f4c:	ldrdeq	r2, [r1], -r0
   12f50:	ldrdeq	r2, [r1], -r0
   12f54:	ldrdeq	r2, [r1], -r0
   12f58:	ldrdeq	r2, [r1], -r4
   12f5c:	ldrdeq	r2, [r1], -r4
   12f60:	ldrdeq	r2, [r1], -r4
   12f64:	ldrdeq	r2, [r1], -r4
   12f68:	ldrdeq	r2, [r1], -r4
   12f6c:	ldrdeq	r2, [r1], -r4
   12f70:	ldrdeq	r2, [r1], -r4
   12f74:	ldrdeq	r2, [r1], -r4
   12f78:	ldrdeq	r2, [r1], -r4
   12f7c:	ldrdeq	r2, [r1], -r4
   12f80:	ldrdeq	r2, [r1], -r4
   12f84:	ldrdeq	r2, [r1], -r4
   12f88:	ldrdeq	r2, [r1], -r4
   12f8c:	ldrdeq	r2, [r1], -r4
   12f90:	ldrdeq	r2, [r1], -r4
   12f94:	ldrdeq	r2, [r1], -r4
   12f98:	ldrdeq	r2, [r1], -r4
   12f9c:	ldrdeq	r2, [r1], -r4
   12fa0:	ldrdeq	r2, [r1], -r4
   12fa4:	ldrdeq	r2, [r1], -r4
   12fa8:	ldrdeq	r2, [r1], -r4
   12fac:	ldrdeq	r2, [r1], -r4
   12fb0:	ldrdeq	r2, [r1], -r4
   12fb4:	ldrdeq	r2, [r1], -r4
   12fb8:	ldrdeq	r2, [r1], -r4
   12fbc:	ldrdeq	r2, [r1], -r4
   12fc0:	ldrdeq	r2, [r1], -r0
   12fc4:	ldrdeq	r2, [r1], -r0
   12fc8:	ldrdeq	r2, [r1], -r0
   12fcc:	ldrdeq	r2, [r1], -r0
   12fd0:	bx	lr
   12fd4:	mov	r0, #0
   12fd8:	bx	lr
   12fdc:	sub	r0, r0, #9
   12fe0:	cmp	r0, #23
   12fe4:	movhi	r0, #0
   12fe8:	bxhi	lr
   12fec:	bic	r0, r0, #-16777216	; 0xff000000
   12ff0:	movw	r1, #31
   12ff4:	movt	r1, #128	; 0x80
   12ff8:	mov	r2, #1
   12ffc:	and	r0, r2, r1, lsr r0
   13000:	bx	lr
   13004:	sub	r1, r0, #65	; 0x41
   13008:	mov	r0, #0
   1300c:	cmp	r1, #26
   13010:	movwcc	r0, #1
   13014:	bx	lr
   13018:	mov	r1, r0
   1301c:	sub	r2, r0, #48	; 0x30
   13020:	mov	r0, #1
   13024:	cmp	r2, #22
   13028:	bhi	13040 <__assert_fail@plt+0x1c80>
   1302c:	mov	ip, #1
   13030:	movw	r3, #1023	; 0x3ff
   13034:	movt	r3, #126	; 0x7e
   13038:	tst	r3, ip, lsl r2
   1303c:	bxne	lr
   13040:	sub	r1, r1, #97	; 0x61
   13044:	cmp	r1, #6
   13048:	movcs	r0, #0
   1304c:	bxcs	lr
   13050:	bx	lr
   13054:	sub	r1, r0, #65	; 0x41
   13058:	cmp	r1, #26
   1305c:	addcc	r0, r0, #32
   13060:	bx	lr
   13064:	sub	r1, r0, #97	; 0x61
   13068:	cmp	r1, #26
   1306c:	subcc	r0, r0, #32
   13070:	bx	lr
   13074:	movw	r1, #33240	; 0x81d8
   13078:	movt	r1, #2
   1307c:	b	13080 <__assert_fail@plt+0x1cc0>
   13080:	push	{r4, r5, r6, sl, fp, lr}
   13084:	add	fp, sp, #16
   13088:	sub	sp, sp, #8
   1308c:	mov	r5, r1
   13090:	mov	r6, r0
   13094:	movw	r2, #33244	; 0x81dc
   13098:	movt	r2, #2
   1309c:	mov	r0, #2
   130a0:	str	r0, [r2]
   130a4:	mov	r4, #0
   130a8:	str	r4, [sp, #4]
   130ac:	add	r3, sp, #4
   130b0:	mov	r0, r6
   130b4:	mov	r1, #0
   130b8:	bl	11378 <getaddrinfo@plt>
   130bc:	cmp	r0, #0
   130c0:	beq	130d0 <__assert_fail@plt+0x1d10>
   130c4:	cmp	r5, #0
   130c8:	strne	r0, [r5]
   130cc:	b	13108 <__assert_fail@plt+0x1d48>
   130d0:	ldr	r0, [sp, #4]
   130d4:	ldr	r0, [r0, #24]
   130d8:	cmp	r0, #0
   130dc:	movne	r6, r0
   130e0:	mov	r0, r6
   130e4:	bl	11180 <strdup@plt>
   130e8:	mov	r4, r0
   130ec:	cmp	r5, #0
   130f0:	beq	13100 <__assert_fail@plt+0x1d40>
   130f4:	cmp	r4, #0
   130f8:	mvneq	r0, #9
   130fc:	streq	r0, [r5]
   13100:	ldr	r0, [sp, #4]
   13104:	bl	1136c <freeaddrinfo@plt>
   13108:	mov	r0, r4
   1310c:	sub	sp, fp, #16
   13110:	pop	{r4, r5, r6, sl, fp, pc}
   13114:	movw	r0, #33240	; 0x81d8
   13118:	movt	r0, #2
   1311c:	ldr	r0, [r0]
   13120:	b	11120 <gai_strerror@plt>
   13124:	movw	r1, #33276	; 0x81fc
   13128:	movt	r1, #2
   1312c:	str	r0, [r1]
   13130:	bx	lr
   13134:	movw	r1, #33280	; 0x8200
   13138:	movt	r1, #2
   1313c:	strb	r0, [r1]
   13140:	bx	lr
   13144:	push	{r4, r5, r6, sl, fp, lr}
   13148:	add	fp, sp, #16
   1314c:	sub	sp, sp, #8
   13150:	movw	r0, #33148	; 0x817c
   13154:	movt	r0, #2
   13158:	ldr	r0, [r0]
   1315c:	bl	15bc8 <__assert_fail@plt+0x4808>
   13160:	cmp	r0, #0
   13164:	beq	1318c <__assert_fail@plt+0x1dcc>
   13168:	movw	r0, #33280	; 0x8200
   1316c:	movt	r0, #2
   13170:	ldrb	r0, [r0]
   13174:	cmp	r0, #0
   13178:	beq	131ac <__assert_fail@plt+0x1dec>
   1317c:	bl	112c4 <__errno_location@plt>
   13180:	ldr	r0, [r0]
   13184:	cmp	r0, #32
   13188:	bne	131ac <__assert_fail@plt+0x1dec>
   1318c:	movw	r0, #33144	; 0x8178
   13190:	movt	r0, #2
   13194:	ldr	r0, [r0]
   13198:	bl	15bc8 <__assert_fail@plt+0x4808>
   1319c:	cmp	r0, #0
   131a0:	subeq	sp, fp, #16
   131a4:	popeq	{r4, r5, r6, sl, fp, pc}
   131a8:	b	1321c <__assert_fail@plt+0x1e5c>
   131ac:	movw	r1, #27495	; 0x6b67
   131b0:	movt	r1, #1
   131b4:	mov	r0, #0
   131b8:	mov	r2, #5
   131bc:	bl	11174 <dcgettext@plt>
   131c0:	mov	r4, r0
   131c4:	movw	r0, #33276	; 0x81fc
   131c8:	movt	r0, #2
   131cc:	ldr	r6, [r0]
   131d0:	bl	112c4 <__errno_location@plt>
   131d4:	ldr	r5, [r0]
   131d8:	cmp	r6, #0
   131dc:	bne	131f8 <__assert_fail@plt+0x1e38>
   131e0:	movw	r2, #27511	; 0x6b77
   131e4:	movt	r2, #1
   131e8:	mov	r0, #0
   131ec:	mov	r1, r5
   131f0:	mov	r3, r4
   131f4:	b	13218 <__assert_fail@plt+0x1e58>
   131f8:	mov	r0, r6
   131fc:	bl	14a60 <__assert_fail@plt+0x36a0>
   13200:	mov	r3, r0
   13204:	str	r4, [sp]
   13208:	movw	r2, #27507	; 0x6b73
   1320c:	movt	r2, #1
   13210:	mov	r0, #0
   13214:	mov	r1, r5
   13218:	bl	11204 <error@plt>
   1321c:	movw	r0, #33060	; 0x8124
   13220:	movt	r0, #2
   13224:	ldr	r0, [r0]
   13228:	bl	1112c <_exit@plt>
   1322c:	push	{r4, r5, r6, sl, fp, lr}
   13230:	add	fp, sp, #16
   13234:	mov	r4, r0
   13238:	bl	112c4 <__errno_location@plt>
   1323c:	mov	r5, r0
   13240:	ldr	r6, [r0]
   13244:	mov	r0, r4
   13248:	bl	11114 <free@plt>
   1324c:	str	r6, [r5]
   13250:	pop	{r4, r5, r6, sl, fp, pc}
   13254:	push	{r4, sl, fp, lr}
   13258:	add	fp, sp, #8
   1325c:	sub	sp, sp, #264	; 0x108
   13260:	add	r1, sp, #7
   13264:	movw	r2, #257	; 0x101
   13268:	bl	15190 <__assert_fail@plt+0x3dd0>
   1326c:	mov	r4, #0
   13270:	cmp	r0, #0
   13274:	bne	132ac <__assert_fail@plt+0x1eec>
   13278:	add	r0, sp, #7
   1327c:	movw	r1, #27514	; 0x6b7a
   13280:	movt	r1, #1
   13284:	bl	110f0 <strcmp@plt>
   13288:	cmp	r0, #0
   1328c:	beq	132ac <__assert_fail@plt+0x1eec>
   13290:	add	r0, sp, #7
   13294:	movw	r1, #27516	; 0x6b7c
   13298:	movt	r1, #1
   1329c:	bl	110f0 <strcmp@plt>
   132a0:	mov	r4, r0
   132a4:	cmp	r0, #0
   132a8:	movwne	r4, #1
   132ac:	mov	r0, r4
   132b0:	sub	sp, fp, #8
   132b4:	pop	{r4, sl, fp, pc}
   132b8:	push	{r4, r5, r6, sl, fp, lr}
   132bc:	add	fp, sp, #16
   132c0:	mov	r4, r1
   132c4:	mov	r5, r0
   132c8:	mov	r0, #0
   132cc:	strb	r0, [r2, #20]
   132d0:	add	r6, r2, #19
   132d4:	cmp	r1, #0
   132d8:	blt	13328 <__assert_fail@plt+0x1f68>
   132dc:	mov	r0, r5
   132e0:	mov	r1, r4
   132e4:	mov	r2, #10
   132e8:	mov	r3, #0
   132ec:	bl	15f20 <__assert_fail@plt+0x4b60>
   132f0:	add	r2, r0, r0, lsl #2
   132f4:	sub	r2, r5, r2, lsl #1
   132f8:	add	r2, r2, #48	; 0x30
   132fc:	strb	r2, [r6], #-1
   13300:	adds	r2, r5, #9
   13304:	adc	r3, r4, #0
   13308:	rsbs	r2, r2, #18
   1330c:	rscs	r2, r3, #0
   13310:	mov	r5, r0
   13314:	mov	r4, r1
   13318:	bcc	132dc <__assert_fail@plt+0x1f1c>
   1331c:	add	r6, r6, #1
   13320:	mov	r0, r6
   13324:	pop	{r4, r5, r6, sl, fp, pc}
   13328:	mov	r0, r5
   1332c:	mov	r1, r4
   13330:	mov	r2, #10
   13334:	mov	r3, #0
   13338:	bl	15f20 <__assert_fail@plt+0x4b60>
   1333c:	add	r2, r0, r0, lsl #2
   13340:	rsb	r2, r5, r2, lsl #1
   13344:	add	r2, r2, #48	; 0x30
   13348:	strb	r2, [r6], #-1
   1334c:	adds	r2, r5, #9
   13350:	adc	r3, r4, #0
   13354:	rsbs	r2, r2, #18
   13358:	rscs	r2, r3, #0
   1335c:	mov	r5, r0
   13360:	mov	r4, r1
   13364:	bcc	13328 <__assert_fail@plt+0x1f68>
   13368:	mov	r0, #45	; 0x2d
   1336c:	strb	r0, [r6]
   13370:	mov	r0, r6
   13374:	pop	{r4, r5, r6, sl, fp, pc}
   13378:	push	{r4, r5, fp, lr}
   1337c:	add	fp, sp, #8
   13380:	cmp	r0, #0
   13384:	beq	13418 <__assert_fail@plt+0x2058>
   13388:	mov	r4, r0
   1338c:	mov	r1, #47	; 0x2f
   13390:	bl	11354 <strrchr@plt>
   13394:	cmp	r0, #0
   13398:	mov	r5, r4
   1339c:	addne	r5, r0, #1
   133a0:	sub	r0, r5, r4
   133a4:	cmp	r0, #7
   133a8:	blt	133fc <__assert_fail@plt+0x203c>
   133ac:	sub	r0, r5, #7
   133b0:	movw	r1, #27578	; 0x6bba
   133b4:	movt	r1, #1
   133b8:	mov	r2, #7
   133bc:	bl	1139c <strncmp@plt>
   133c0:	cmp	r0, #0
   133c4:	bne	133fc <__assert_fail@plt+0x203c>
   133c8:	movw	r1, #27586	; 0x6bc2
   133cc:	movt	r1, #1
   133d0:	mov	r0, r5
   133d4:	mov	r2, #3
   133d8:	bl	1139c <strncmp@plt>
   133dc:	cmp	r0, #0
   133e0:	beq	133ec <__assert_fail@plt+0x202c>
   133e4:	mov	r4, r5
   133e8:	b	133fc <__assert_fail@plt+0x203c>
   133ec:	add	r4, r5, #3
   133f0:	movw	r0, #33128	; 0x8168
   133f4:	movt	r0, #2
   133f8:	str	r4, [r0]
   133fc:	movw	r0, #33132	; 0x816c
   13400:	movt	r0, #2
   13404:	str	r4, [r0]
   13408:	movw	r0, #33284	; 0x8204
   1340c:	movt	r0, #2
   13410:	str	r4, [r0]
   13414:	pop	{r4, r5, fp, pc}
   13418:	movw	r0, #33144	; 0x8178
   1341c:	movt	r0, #2
   13420:	ldr	r3, [r0]
   13424:	movw	r0, #27522	; 0x6b82
   13428:	movt	r0, #1
   1342c:	mov	r1, #55	; 0x37
   13430:	mov	r2, #1
   13434:	bl	111bc <fwrite@plt>
   13438:	bl	113a8 <abort@plt>
   1343c:	push	{r4, r5, r6, sl, fp, lr}
   13440:	add	fp, sp, #16
   13444:	mov	r4, r0
   13448:	movw	r0, #33288	; 0x8208
   1344c:	movt	r0, #2
   13450:	cmp	r4, #0
   13454:	moveq	r4, r0
   13458:	bl	112c4 <__errno_location@plt>
   1345c:	mov	r5, r0
   13460:	ldr	r6, [r0]
   13464:	mov	r0, r4
   13468:	mov	r1, #48	; 0x30
   1346c:	bl	159f0 <__assert_fail@plt+0x4630>
   13470:	str	r6, [r5]
   13474:	pop	{r4, r5, r6, sl, fp, pc}
   13478:	movw	r1, #33288	; 0x8208
   1347c:	movt	r1, #2
   13480:	cmp	r0, #0
   13484:	movne	r1, r0
   13488:	ldr	r0, [r1]
   1348c:	bx	lr
   13490:	movw	r2, #33288	; 0x8208
   13494:	movt	r2, #2
   13498:	cmp	r0, #0
   1349c:	movne	r2, r0
   134a0:	str	r1, [r2]
   134a4:	bx	lr
   134a8:	movw	r3, #33288	; 0x8208
   134ac:	movt	r3, #2
   134b0:	cmp	r0, #0
   134b4:	movne	r3, r0
   134b8:	ubfx	r0, r1, #5, #3
   134bc:	add	r0, r3, r0, lsl #2
   134c0:	ldr	r3, [r0, #8]
   134c4:	and	r1, r1, #31
   134c8:	eor	r2, r2, r3, lsr r1
   134cc:	and	r2, r2, #1
   134d0:	eor	r2, r3, r2, lsl r1
   134d4:	str	r2, [r0, #8]
   134d8:	mov	r0, #1
   134dc:	and	r0, r0, r3, lsr r1
   134e0:	bx	lr
   134e4:	movw	r2, #33288	; 0x8208
   134e8:	movt	r2, #2
   134ec:	cmp	r0, #0
   134f0:	movne	r2, r0
   134f4:	ldr	r0, [r2, #4]
   134f8:	str	r1, [r2, #4]
   134fc:	bx	lr
   13500:	movw	r3, #33288	; 0x8208
   13504:	movt	r3, #2
   13508:	cmp	r0, #0
   1350c:	movne	r3, r0
   13510:	mov	r0, #10
   13514:	str	r0, [r3]
   13518:	cmp	r1, #0
   1351c:	cmpne	r2, #0
   13520:	bne	13530 <__assert_fail@plt+0x2170>
   13524:	push	{fp, lr}
   13528:	mov	fp, sp
   1352c:	bl	113a8 <abort@plt>
   13530:	str	r1, [r3, #40]	; 0x28
   13534:	str	r2, [r3, #44]	; 0x2c
   13538:	bx	lr
   1353c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13540:	add	fp, sp, #28
   13544:	sub	sp, sp, #20
   13548:	mov	r8, r3
   1354c:	mov	r9, r2
   13550:	mov	sl, r1
   13554:	mov	r7, r0
   13558:	ldr	r0, [fp, #8]
   1355c:	movw	r5, #33288	; 0x8208
   13560:	movt	r5, #2
   13564:	cmp	r0, #0
   13568:	movne	r5, r0
   1356c:	bl	112c4 <__errno_location@plt>
   13570:	mov	r4, r0
   13574:	ldm	r5, {r0, r1}
   13578:	ldr	r2, [r5, #40]	; 0x28
   1357c:	ldr	r3, [r5, #44]	; 0x2c
   13580:	ldr	r6, [r4]
   13584:	add	r5, r5, #8
   13588:	stm	sp, {r0, r1, r5}
   1358c:	str	r2, [sp, #12]
   13590:	str	r3, [sp, #16]
   13594:	mov	r0, r7
   13598:	mov	r1, sl
   1359c:	mov	r2, r9
   135a0:	mov	r3, r8
   135a4:	bl	135b4 <__assert_fail@plt+0x21f4>
   135a8:	str	r6, [r4]
   135ac:	sub	sp, fp, #28
   135b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b8:	add	fp, sp, #28
   135bc:	sub	sp, sp, #156	; 0x9c
   135c0:	mov	r9, r3
   135c4:	str	r2, [fp, #-84]	; 0xffffffac
   135c8:	mov	r6, r1
   135cc:	mov	r7, r0
   135d0:	ldr	r0, [fp, #12]
   135d4:	and	r1, r0, #4
   135d8:	str	r1, [sp, #32]
   135dc:	and	r1, r0, #1
   135e0:	str	r1, [sp, #36]	; 0x24
   135e4:	ubfx	sl, r0, #1, #1
   135e8:	bl	111d4 <__ctype_get_mb_cur_max@plt>
   135ec:	str	r0, [sp, #40]	; 0x28
   135f0:	ldr	r0, [fp, #24]
   135f4:	str	r0, [sp, #76]	; 0x4c
   135f8:	ldr	r0, [fp, #20]
   135fc:	str	r0, [sp, #68]	; 0x44
   13600:	ldr	r0, [fp, #8]
   13604:	str	r0, [fp, #-60]	; 0xffffffc4
   13608:	mov	r0, #0
   1360c:	str	r0, [sp, #72]	; 0x48
   13610:	mov	r0, #0
   13614:	str	r0, [sp, #92]	; 0x5c
   13618:	mov	r0, #0
   1361c:	str	r0, [fp, #-72]	; 0xffffffb8
   13620:	mov	r0, #0
   13624:	mov	r1, #0
   13628:	str	r1, [fp, #-56]	; 0xffffffc8
   1362c:	mov	r1, #0
   13630:	str	r1, [sp, #56]	; 0x38
   13634:	mov	r5, #1
   13638:	str	r7, [sp, #80]	; 0x50
   1363c:	mov	r4, r6
   13640:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13644:	cmp	r6, #10
   13648:	bhi	145b0 <__assert_fail@plt+0x31f0>
   1364c:	add	r1, pc, #20
   13650:	mov	r8, #0
   13654:	mov	r2, #1
   13658:	mov	r3, #0
   1365c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13660:	mov	lr, r9
   13664:	ldr	pc, [r1, r6, lsl #2]
   13668:	andeq	r3, r1, r0, asr #14
   1366c:	andeq	r3, r1, r0, ror r7
   13670:	andeq	r3, r1, r0, lsr r7
   13674:	andeq	r3, r1, r8, lsr #14
   13678:	andeq	r3, r1, r4, ror #14
   1367c:	andeq	r3, r1, r4, asr #15
   13680:	andeq	r3, r1, r0, asr r7
   13684:	andeq	r3, r1, r0, lsr #16
   13688:	muleq	r1, r4, r6
   1368c:	muleq	r1, r4, r6
   13690:			; <UNDEFINED> instruction: 0x000136bc
   13694:	movw	r0, #27668	; 0x6c14
   13698:	movt	r0, #1
   1369c:	mov	r1, r6
   136a0:	bl	14bbc <__assert_fail@plt+0x37fc>
   136a4:	str	r0, [sp, #68]	; 0x44
   136a8:	movw	r0, #27670	; 0x6c16
   136ac:	movt	r0, #1
   136b0:	mov	r1, r6
   136b4:	bl	14bbc <__assert_fail@plt+0x37fc>
   136b8:	str	r0, [sp, #76]	; 0x4c
   136bc:	mov	r8, #0
   136c0:	tst	sl, #1
   136c4:	bne	136fc <__assert_fail@plt+0x233c>
   136c8:	ldr	r0, [sp, #68]	; 0x44
   136cc:	ldrb	r0, [r0]
   136d0:	cmp	r0, #0
   136d4:	beq	136fc <__assert_fail@plt+0x233c>
   136d8:	ldr	r1, [sp, #68]	; 0x44
   136dc:	add	r1, r1, #1
   136e0:	mov	r8, #0
   136e4:	cmp	r8, r4
   136e8:	strbcc	r0, [r7, r8]
   136ec:	ldrb	r0, [r1, r8]
   136f0:	add	r8, r8, #1
   136f4:	cmp	r0, #0
   136f8:	bne	136e4 <__assert_fail@plt+0x2324>
   136fc:	ldr	r6, [sp, #76]	; 0x4c
   13700:	mov	r0, r6
   13704:	bl	112ac <strlen@plt>
   13708:	str	r0, [fp, #-72]	; 0xffffffb8
   1370c:	str	r6, [sp, #92]	; 0x5c
   13710:	mov	r2, #1
   13714:	mov	r3, sl
   13718:	ldr	ip, [fp, #-84]	; 0xffffffac
   1371c:	mov	lr, r9
   13720:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13724:	b	13820 <__assert_fail@plt+0x2460>
   13728:	mov	r0, #1
   1372c:	b	13770 <__assert_fail@plt+0x23b0>
   13730:	tst	sl, #1
   13734:	bne	13770 <__assert_fail@plt+0x23b0>
   13738:	mov	r2, r0
   1373c:	b	13798 <__assert_fail@plt+0x23d8>
   13740:	mov	r6, #0
   13744:	mov	r8, #0
   13748:	mov	r2, r0
   1374c:	b	1381c <__assert_fail@plt+0x245c>
   13750:	mov	r0, #1
   13754:	str	r0, [fp, #-72]	; 0xffffffb8
   13758:	mov	r8, #0
   1375c:	mov	r6, #5
   13760:	b	137dc <__assert_fail@plt+0x241c>
   13764:	mov	r2, #1
   13768:	tst	sl, #1
   1376c:	beq	13798 <__assert_fail@plt+0x23d8>
   13770:	mov	r1, #1
   13774:	str	r1, [fp, #-72]	; 0xffffffb8
   13778:	mov	r8, #0
   1377c:	mov	r6, #2
   13780:	movw	r1, #27670	; 0x6c16
   13784:	movt	r1, #1
   13788:	str	r1, [sp, #92]	; 0x5c
   1378c:	mov	r2, r0
   13790:	mov	r3, #1
   13794:	b	13820 <__assert_fail@plt+0x2460>
   13798:	mov	r8, #1
   1379c:	mov	r6, #2
   137a0:	cmp	r4, #0
   137a4:	movne	r0, #39	; 0x27
   137a8:	strbne	r0, [r7]
   137ac:	movw	r0, #27670	; 0x6c16
   137b0:	movt	r0, #1
   137b4:	str	r0, [sp, #92]	; 0x5c
   137b8:	mov	r0, #1
   137bc:	str	r0, [fp, #-72]	; 0xffffffb8
   137c0:	b	1381c <__assert_fail@plt+0x245c>
   137c4:	mov	r6, #5
   137c8:	tst	sl, #1
   137cc:	beq	137f4 <__assert_fail@plt+0x2434>
   137d0:	mov	r0, #1
   137d4:	str	r0, [fp, #-72]	; 0xffffffb8
   137d8:	mov	r8, #0
   137dc:	movw	r0, #27666	; 0x6c12
   137e0:	movt	r0, #1
   137e4:	str	r0, [sp, #92]	; 0x5c
   137e8:	mov	r2, #1
   137ec:	mov	r3, #1
   137f0:	b	13820 <__assert_fail@plt+0x2460>
   137f4:	cmp	r4, #0
   137f8:	movne	r0, #34	; 0x22
   137fc:	strbne	r0, [r7]
   13800:	mov	r8, #1
   13804:	movw	r0, #27666	; 0x6c12
   13808:	movt	r0, #1
   1380c:	str	r0, [sp, #92]	; 0x5c
   13810:	mov	r0, #1
   13814:	str	r0, [fp, #-72]	; 0xffffffb8
   13818:	mov	r2, #1
   1381c:	mov	r3, #0
   13820:	ldr	r0, [fp, #16]
   13824:	cmp	r0, #0
   13828:	movwne	r0, #1
   1382c:	and	r0, r0, r3
   13830:	str	r0, [fp, #-88]	; 0xffffffa8
   13834:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13838:	cmp	r0, #0
   1383c:	movwne	r0, #1
   13840:	and	r1, r0, r3
   13844:	and	r1, r2, r1
   13848:	str	r1, [sp, #48]	; 0x30
   1384c:	str	r6, [fp, #-60]	; 0xffffffc4
   13850:	subs	r6, r6, #2
   13854:	clz	r1, r6
   13858:	lsr	r1, r1, #5
   1385c:	and	r1, r1, r3
   13860:	str	r1, [sp, #60]	; 0x3c
   13864:	str	r6, [fp, #-80]	; 0xffffffb0
   13868:	mov	r1, r6
   1386c:	movwne	r1, #1
   13870:	str	r3, [fp, #-76]	; 0xffffffb4
   13874:	eor	r3, r3, #1
   13878:	str	r3, [sp, #88]	; 0x58
   1387c:	orr	r3, r1, r3
   13880:	str	r3, [sp, #64]	; 0x40
   13884:	and	r1, r1, r2
   13888:	str	r1, [fp, #-68]	; 0xffffffbc
   1388c:	and	r0, r0, r1
   13890:	str	r0, [fp, #-64]	; 0xffffffc0
   13894:	str	r2, [sp, #84]	; 0x54
   13898:	eor	r0, r2, #1
   1389c:	str	r0, [sp, #52]	; 0x34
   138a0:	mov	r6, #0
   138a4:	cmn	lr, #1
   138a8:	beq	138b8 <__assert_fail@plt+0x24f8>
   138ac:	cmp	r6, lr
   138b0:	bne	138c4 <__assert_fail@plt+0x2504>
   138b4:	b	14430 <__assert_fail@plt+0x3070>
   138b8:	ldrb	r0, [ip, r6]
   138bc:	cmp	r0, #0
   138c0:	beq	14430 <__assert_fail@plt+0x3070>
   138c4:	str	r5, [fp, #-48]	; 0xffffffd0
   138c8:	mov	sl, #0
   138cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   138d0:	cmp	r0, #0
   138d4:	beq	13908 <__assert_fail@plt+0x2548>
   138d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   138dc:	add	r5, r6, r0
   138e0:	cmp	r0, #2
   138e4:	bcc	13900 <__assert_fail@plt+0x2540>
   138e8:	cmn	lr, #1
   138ec:	bne	13900 <__assert_fail@plt+0x2540>
   138f0:	mov	r0, ip
   138f4:	bl	112ac <strlen@plt>
   138f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   138fc:	mov	lr, r0
   13900:	cmp	r5, lr
   13904:	bls	13914 <__assert_fail@plt+0x2554>
   13908:	mov	r0, #0
   1390c:	str	r0, [fp, #-52]	; 0xffffffcc
   13910:	b	13960 <__assert_fail@plt+0x25a0>
   13914:	mov	r5, r4
   13918:	mov	r4, lr
   1391c:	add	r0, ip, r6
   13920:	ldr	r1, [sp, #92]	; 0x5c
   13924:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13928:	bl	1115c <memcmp@plt>
   1392c:	cmp	r0, #0
   13930:	mov	r1, r0
   13934:	movwne	r1, #1
   13938:	ldr	r2, [sp, #88]	; 0x58
   1393c:	orr	r1, r1, r2
   13940:	tst	r1, #1
   13944:	beq	144f4 <__assert_fail@plt+0x3134>
   13948:	clz	r0, r0
   1394c:	lsr	r0, r0, #5
   13950:	str	r0, [fp, #-52]	; 0xffffffcc
   13954:	ldr	ip, [fp, #-84]	; 0xffffffac
   13958:	mov	lr, r4
   1395c:	mov	r4, r5
   13960:	ldrb	r5, [ip, r6]
   13964:	cmp	r5, #126	; 0x7e
   13968:	bhi	13d24 <__assert_fail@plt+0x2964>
   1396c:	mov	r9, #1
   13970:	mov	r2, #110	; 0x6e
   13974:	mov	r0, #97	; 0x61
   13978:	add	r3, pc, #4
   1397c:	mov	r1, #0
   13980:	ldr	pc, [r3, r5, lsl #2]
   13984:	andeq	r3, r1, ip, lsl ip
   13988:	andeq	r3, r1, r4, lsr #26
   1398c:	andeq	r3, r1, r4, lsr #26
   13990:	andeq	r3, r1, r4, lsr #26
   13994:	andeq	r3, r1, r4, lsr #26
   13998:	andeq	r3, r1, r4, lsr #26
   1399c:	andeq	r3, r1, r4, lsr #26
   139a0:	andeq	r3, r1, r8, ror #27
   139a4:	strdeq	r3, [r1], -ip
   139a8:	strdeq	r3, [r1], -r4
   139ac:	andeq	r3, r1, r8, lsl #24
   139b0:	andeq	r3, r1, ip, lsl #25
   139b4:	andeq	r3, r1, ip, ror #23
   139b8:	andeq	r3, r1, r4, lsl #24
   139bc:	andeq	r3, r1, r4, lsr #26
   139c0:	andeq	r3, r1, r4, lsr #26
   139c4:	andeq	r3, r1, r4, lsr #26
   139c8:	andeq	r3, r1, r4, lsr #26
   139cc:	andeq	r3, r1, r4, lsr #26
   139d0:	andeq	r3, r1, r4, lsr #26
   139d4:	andeq	r3, r1, r4, lsr #26
   139d8:	andeq	r3, r1, r4, lsr #26
   139dc:	andeq	r3, r1, r4, lsr #26
   139e0:	andeq	r3, r1, r4, lsr #26
   139e4:	andeq	r3, r1, r4, lsr #26
   139e8:	andeq	r3, r1, r4, lsr #26
   139ec:	andeq	r3, r1, r4, lsr #26
   139f0:	andeq	r3, r1, r4, lsr #26
   139f4:	andeq	r3, r1, r4, lsr #26
   139f8:	andeq	r3, r1, r4, lsr #26
   139fc:	andeq	r3, r1, r4, lsr #26
   13a00:	andeq	r3, r1, r4, lsr #26
   13a04:	muleq	r1, r8, sp
   13a08:	muleq	r1, ip, sp
   13a0c:	muleq	r1, ip, sp
   13a10:	muleq	r1, r4, fp
   13a14:	muleq	r1, ip, sp
   13a18:	andeq	r3, r1, r0, lsl #23
   13a1c:	muleq	r1, ip, sp
   13a20:	muleq	r1, r4, ip
   13a24:	muleq	r1, ip, sp
   13a28:	muleq	r1, ip, sp
   13a2c:	muleq	r1, ip, sp
   13a30:	andeq	r3, r1, r0, lsl #23
   13a34:	andeq	r3, r1, r0, lsl #23
   13a38:	andeq	r3, r1, r0, lsl #23
   13a3c:	andeq	r3, r1, r0, lsl #23
   13a40:	andeq	r3, r1, r0, lsl #23
   13a44:	andeq	r3, r1, r0, lsl #23
   13a48:	andeq	r3, r1, r0, lsl #23
   13a4c:	andeq	r3, r1, r0, lsl #23
   13a50:	andeq	r3, r1, r0, lsl #23
   13a54:	andeq	r3, r1, r0, lsl #23
   13a58:	andeq	r3, r1, r0, lsl #23
   13a5c:	andeq	r3, r1, r0, lsl #23
   13a60:	andeq	r3, r1, r0, lsl #23
   13a64:	andeq	r3, r1, r0, lsl #23
   13a68:	andeq	r3, r1, r0, lsl #23
   13a6c:	andeq	r3, r1, r0, lsl #23
   13a70:	muleq	r1, ip, sp
   13a74:	muleq	r1, ip, sp
   13a78:	muleq	r1, ip, sp
   13a7c:	muleq	r1, ip, sp
   13a80:	andeq	r3, r1, ip, asr ip
   13a84:	andeq	r3, r1, r4, lsr #26
   13a88:	andeq	r3, r1, r0, lsl #23
   13a8c:	andeq	r3, r1, r0, lsl #23
   13a90:	andeq	r3, r1, r0, lsl #23
   13a94:	andeq	r3, r1, r0, lsl #23
   13a98:	andeq	r3, r1, r0, lsl #23
   13a9c:	andeq	r3, r1, r0, lsl #23
   13aa0:	andeq	r3, r1, r0, lsl #23
   13aa4:	andeq	r3, r1, r0, lsl #23
   13aa8:	andeq	r3, r1, r0, lsl #23
   13aac:	andeq	r3, r1, r0, lsl #23
   13ab0:	andeq	r3, r1, r0, lsl #23
   13ab4:	andeq	r3, r1, r0, lsl #23
   13ab8:	andeq	r3, r1, r0, lsl #23
   13abc:	andeq	r3, r1, r0, lsl #23
   13ac0:	andeq	r3, r1, r0, lsl #23
   13ac4:	andeq	r3, r1, r0, lsl #23
   13ac8:	andeq	r3, r1, r0, lsl #23
   13acc:	andeq	r3, r1, r0, lsl #23
   13ad0:	andeq	r3, r1, r0, lsl #23
   13ad4:	andeq	r3, r1, r0, lsl #23
   13ad8:	andeq	r3, r1, r0, lsl #23
   13adc:	andeq	r3, r1, r0, lsl #23
   13ae0:	andeq	r3, r1, r0, lsl #23
   13ae4:	andeq	r3, r1, r0, lsl #23
   13ae8:	andeq	r3, r1, r0, lsl #23
   13aec:	andeq	r3, r1, r0, lsl #23
   13af0:	muleq	r1, ip, sp
   13af4:	andeq	r3, r1, r8, asr #23
   13af8:	andeq	r3, r1, r0, lsl #23
   13afc:	muleq	r1, ip, sp
   13b00:	andeq	r3, r1, r0, lsl #23
   13b04:	muleq	r1, ip, sp
   13b08:	andeq	r3, r1, r0, lsl #23
   13b0c:	andeq	r3, r1, r0, lsl #23
   13b10:	andeq	r3, r1, r0, lsl #23
   13b14:	andeq	r3, r1, r0, lsl #23
   13b18:	andeq	r3, r1, r0, lsl #23
   13b1c:	andeq	r3, r1, r0, lsl #23
   13b20:	andeq	r3, r1, r0, lsl #23
   13b24:	andeq	r3, r1, r0, lsl #23
   13b28:	andeq	r3, r1, r0, lsl #23
   13b2c:	andeq	r3, r1, r0, lsl #23
   13b30:	andeq	r3, r1, r0, lsl #23
   13b34:	andeq	r3, r1, r0, lsl #23
   13b38:	andeq	r3, r1, r0, lsl #23
   13b3c:	andeq	r3, r1, r0, lsl #23
   13b40:	andeq	r3, r1, r0, lsl #23
   13b44:	andeq	r3, r1, r0, lsl #23
   13b48:	andeq	r3, r1, r0, lsl #23
   13b4c:	andeq	r3, r1, r0, lsl #23
   13b50:	andeq	r3, r1, r0, lsl #23
   13b54:	andeq	r3, r1, r0, lsl #23
   13b58:	andeq	r3, r1, r0, lsl #23
   13b5c:	andeq	r3, r1, r0, lsl #23
   13b60:	andeq	r3, r1, r0, lsl #23
   13b64:	andeq	r3, r1, r0, lsl #23
   13b68:	andeq	r3, r1, r0, lsl #23
   13b6c:	andeq	r3, r1, r0, lsl #23
   13b70:	andeq	r3, r1, r8, lsr #23
   13b74:	muleq	r1, ip, sp
   13b78:	andeq	r3, r1, r8, lsr #23
   13b7c:	muleq	r1, r4, fp
   13b80:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b84:	cmp	r0, #0
   13b88:	beq	13dfc <__assert_fail@plt+0x2a3c>
   13b8c:	ldr	r0, [fp, #16]
   13b90:	b	13e00 <__assert_fail@plt+0x2a40>
   13b94:	mov	r9, #0
   13b98:	cmp	r6, #0
   13b9c:	beq	13d98 <__assert_fail@plt+0x29d8>
   13ba0:	mov	sl, #0
   13ba4:	b	13b80 <__assert_fail@plt+0x27c0>
   13ba8:	mov	r9, #0
   13bac:	cmn	lr, #1
   13bb0:	beq	13d7c <__assert_fail@plt+0x29bc>
   13bb4:	cmp	r6, #0
   13bb8:	bne	13ba0 <__assert_fail@plt+0x27e0>
   13bbc:	cmp	lr, #1
   13bc0:	beq	13d98 <__assert_fail@plt+0x29d8>
   13bc4:	b	13ba0 <__assert_fail@plt+0x27e0>
   13bc8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13bcc:	cmp	r0, #2
   13bd0:	bne	13dc4 <__assert_fail@plt+0x2a04>
   13bd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bd8:	tst	r0, #1
   13bdc:	bne	1450c <__assert_fail@plt+0x314c>
   13be0:	mov	sl, #0
   13be4:	mov	r0, #92	; 0x5c
   13be8:	b	13dd8 <__assert_fail@plt+0x2a18>
   13bec:	mov	r0, #102	; 0x66
   13bf0:	b	13de8 <__assert_fail@plt+0x2a28>
   13bf4:	mov	r2, #116	; 0x74
   13bf8:	b	13c08 <__assert_fail@plt+0x2848>
   13bfc:	mov	r0, #98	; 0x62
   13c00:	b	13de8 <__assert_fail@plt+0x2a28>
   13c04:	mov	r2, #114	; 0x72
   13c08:	ldr	r0, [sp, #64]	; 0x40
   13c0c:	tst	r0, #1
   13c10:	mov	r0, r2
   13c14:	bne	13de8 <__assert_fail@plt+0x2a28>
   13c18:	b	1450c <__assert_fail@plt+0x314c>
   13c1c:	ldr	r0, [sp, #84]	; 0x54
   13c20:	tst	r0, #1
   13c24:	beq	13ed8 <__assert_fail@plt+0x2b18>
   13c28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c2c:	tst	r0, #1
   13c30:	bne	1450c <__assert_fail@plt+0x314c>
   13c34:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13c38:	cmp	r0, #2
   13c3c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13c40:	movwne	r0, #1
   13c44:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c48:	orr	r0, r0, r2
   13c4c:	tst	r0, #1
   13c50:	beq	142cc <__assert_fail@plt+0x2f0c>
   13c54:	mov	r0, r8
   13c58:	b	14300 <__assert_fail@plt+0x2f40>
   13c5c:	mov	sl, #0
   13c60:	mov	r5, #63	; 0x3f
   13c64:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13c68:	cmp	r0, #5
   13c6c:	beq	1408c <__assert_fail@plt+0x2ccc>
   13c70:	cmp	r0, #2
   13c74:	bne	1412c <__assert_fail@plt+0x2d6c>
   13c78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c7c:	tst	r0, #1
   13c80:	mov	r9, #0
   13c84:	beq	13b80 <__assert_fail@plt+0x27c0>
   13c88:	b	1450c <__assert_fail@plt+0x314c>
   13c8c:	mov	r0, #118	; 0x76
   13c90:	b	13de8 <__assert_fail@plt+0x2a28>
   13c94:	mov	r5, #39	; 0x27
   13c98:	mov	r0, #1
   13c9c:	str	r0, [sp, #56]	; 0x38
   13ca0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13ca4:	cmp	r0, #2
   13ca8:	bne	13ef8 <__assert_fail@plt+0x2b38>
   13cac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13cb0:	tst	r0, #1
   13cb4:	bne	1450c <__assert_fail@plt+0x314c>
   13cb8:	ldr	r2, [sp, #72]	; 0x48
   13cbc:	cmp	r2, #0
   13cc0:	mov	r0, r2
   13cc4:	movwne	r0, #1
   13cc8:	clz	r1, r4
   13ccc:	lsr	r1, r1, #5
   13cd0:	orrs	r0, r0, r1
   13cd4:	moveq	r2, r4
   13cd8:	str	r2, [sp, #72]	; 0x48
   13cdc:	moveq	r4, r0
   13ce0:	cmp	r8, r4
   13ce4:	movcc	r0, #39	; 0x27
   13ce8:	strbcc	r0, [r7, r8]
   13cec:	add	r0, r8, #1
   13cf0:	cmp	r0, r4
   13cf4:	movcc	r1, #92	; 0x5c
   13cf8:	strbcc	r1, [r7, r0]
   13cfc:	add	r0, r8, #2
   13d00:	cmp	r0, r4
   13d04:	movcc	r1, #39	; 0x27
   13d08:	strbcc	r1, [r7, r0]
   13d0c:	add	r8, r8, #3
   13d10:	mov	r0, #0
   13d14:	str	r0, [fp, #-56]	; 0xffffffc8
   13d18:	mov	sl, #0
   13d1c:	mov	r9, #1
   13d20:	b	13b80 <__assert_fail@plt+0x27c0>
   13d24:	str	r4, [sp, #24]
   13d28:	ldr	r0, [sp, #40]	; 0x28
   13d2c:	cmp	r0, #1
   13d30:	bne	13f00 <__assert_fail@plt+0x2b40>
   13d34:	str	lr, [sp, #28]
   13d38:	bl	11288 <__ctype_b_loc@plt>
   13d3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d40:	ldr	r0, [r0]
   13d44:	add	r0, r0, r5, lsl #1
   13d48:	ldrb	r0, [r0, #1]
   13d4c:	ubfx	r9, r0, #6, #1
   13d50:	mov	r1, #1
   13d54:	ldr	r4, [sp, #24]
   13d58:	ldr	r0, [sp, #52]	; 0x34
   13d5c:	orr	r0, r9, r0
   13d60:	mov	r2, r1
   13d64:	cmp	r1, #1
   13d68:	bhi	14134 <__assert_fail@plt+0x2d74>
   13d6c:	tst	r0, #1
   13d70:	beq	14134 <__assert_fail@plt+0x2d74>
   13d74:	ldr	lr, [sp, #28]
   13d78:	b	13b80 <__assert_fail@plt+0x27c0>
   13d7c:	cmp	r6, #0
   13d80:	ldrbeq	r0, [ip, #1]
   13d84:	cmpeq	r0, #0
   13d88:	beq	13d98 <__assert_fail@plt+0x29d8>
   13d8c:	mvn	lr, #0
   13d90:	mov	sl, #0
   13d94:	b	13b80 <__assert_fail@plt+0x27c0>
   13d98:	mov	r1, #1
   13d9c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13da0:	cmp	r0, #2
   13da4:	bne	13dbc <__assert_fail@plt+0x29fc>
   13da8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13dac:	tst	r0, #1
   13db0:	mov	r9, r1
   13db4:	beq	13b80 <__assert_fail@plt+0x27c0>
   13db8:	b	1450c <__assert_fail@plt+0x314c>
   13dbc:	mov	r9, r1
   13dc0:	b	13b80 <__assert_fail@plt+0x27c0>
   13dc4:	mov	sl, #0
   13dc8:	mov	r0, #92	; 0x5c
   13dcc:	ldr	r1, [sp, #48]	; 0x30
   13dd0:	cmp	r1, #0
   13dd4:	beq	13de8 <__assert_fail@plt+0x2a28>
   13dd8:	mov	r9, #0
   13ddc:	cmp	sl, #0
   13de0:	beq	14398 <__assert_fail@plt+0x2fd8>
   13de4:	b	143d4 <__assert_fail@plt+0x3014>
   13de8:	mov	r9, #0
   13dec:	ldr	r1, [sp, #84]	; 0x54
   13df0:	tst	r1, #1
   13df4:	mov	sl, #0
   13df8:	bne	13e38 <__assert_fail@plt+0x2a78>
   13dfc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13e00:	cmp	r0, #0
   13e04:	mov	r0, r5
   13e08:	beq	13e2c <__assert_fail@plt+0x2a6c>
   13e0c:	ubfx	r0, r5, #5, #3
   13e10:	ldr	r1, [fp, #16]
   13e14:	ldr	r0, [r1, r0, lsl #2]
   13e18:	and	r1, r5, #31
   13e1c:	mov	r2, #1
   13e20:	tst	r0, r2, lsl r1
   13e24:	mov	r0, r5
   13e28:	bne	13e38 <__assert_fail@plt+0x2a78>
   13e2c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13e30:	cmp	r1, #0
   13e34:	beq	14390 <__assert_fail@plt+0x2fd0>
   13e38:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13e3c:	tst	r1, #1
   13e40:	bne	1450c <__assert_fail@plt+0x314c>
   13e44:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e48:	cmp	r1, #2
   13e4c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13e50:	movwne	r1, #1
   13e54:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13e58:	orr	r1, r1, r2
   13e5c:	tst	r1, #1
   13e60:	beq	13e6c <__assert_fail@plt+0x2aac>
   13e64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e68:	b	13ea8 <__assert_fail@plt+0x2ae8>
   13e6c:	cmp	r8, r4
   13e70:	movcc	r1, #39	; 0x27
   13e74:	strbcc	r1, [r7, r8]
   13e78:	add	r1, r8, #1
   13e7c:	cmp	r1, r4
   13e80:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e84:	movcc	r2, #36	; 0x24
   13e88:	strbcc	r2, [r7, r1]
   13e8c:	add	r1, r8, #2
   13e90:	cmp	r1, r4
   13e94:	movcc	r2, #39	; 0x27
   13e98:	strbcc	r2, [r7, r1]
   13e9c:	add	r8, r8, #3
   13ea0:	mov	r1, #1
   13ea4:	str	r1, [fp, #-56]	; 0xffffffc8
   13ea8:	cmp	r8, r4
   13eac:	movcc	r1, #92	; 0x5c
   13eb0:	strbcc	r1, [r7, r8]
   13eb4:	add	r8, r8, #1
   13eb8:	cmp	r8, r4
   13ebc:	strbcc	r0, [r7, r8]
   13ec0:	and	r5, r5, r9
   13ec4:	add	r8, r8, #1
   13ec8:	add	r6, r6, #1
   13ecc:	cmn	lr, #1
   13ed0:	bne	138ac <__assert_fail@plt+0x24ec>
   13ed4:	b	138b8 <__assert_fail@plt+0x24f8>
   13ed8:	mov	r9, #0
   13edc:	ldr	r0, [sp, #36]	; 0x24
   13ee0:	cmp	r0, #0
   13ee4:	mov	sl, #0
   13ee8:	mov	r5, #0
   13eec:	beq	13dfc <__assert_fail@plt+0x2a3c>
   13ef0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13ef4:	b	13ec8 <__assert_fail@plt+0x2b08>
   13ef8:	mov	r9, #1
   13efc:	b	13b80 <__assert_fail@plt+0x27c0>
   13f00:	mov	r0, #0
   13f04:	str	r0, [fp, #-36]	; 0xffffffdc
   13f08:	str	r0, [fp, #-40]	; 0xffffffd8
   13f0c:	cmn	lr, #1
   13f10:	bne	13f24 <__assert_fail@plt+0x2b64>
   13f14:	mov	r0, ip
   13f18:	bl	112ac <strlen@plt>
   13f1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f20:	mov	lr, r0
   13f24:	add	r0, ip, r6
   13f28:	str	r0, [sp, #20]
   13f2c:	mov	r9, #1
   13f30:	mov	r7, #0
   13f34:	sub	r4, fp, #40	; 0x28
   13f38:	str	lr, [sp, #28]
   13f3c:	str	r7, [sp, #44]	; 0x2c
   13f40:	add	r7, r7, r6
   13f44:	add	r1, ip, r7
   13f48:	sub	r2, lr, r7
   13f4c:	sub	r0, fp, #44	; 0x2c
   13f50:	mov	r3, r4
   13f54:	bl	15e84 <__assert_fail@plt+0x4ac4>
   13f58:	cmp	r0, #0
   13f5c:	beq	1441c <__assert_fail@plt+0x305c>
   13f60:	cmn	r0, #1
   13f64:	beq	143dc <__assert_fail@plt+0x301c>
   13f68:	cmn	r0, #2
   13f6c:	ldr	lr, [sp, #28]
   13f70:	beq	143e4 <__assert_fail@plt+0x3024>
   13f74:	cmp	r0, #2
   13f78:	mov	r1, #0
   13f7c:	movwcc	r1, #1
   13f80:	ldr	r2, [sp, #60]	; 0x3c
   13f84:	eor	r2, r2, #1
   13f88:	orrs	r1, r2, r1
   13f8c:	ldr	r4, [sp, #24]
   13f90:	bne	14050 <__assert_fail@plt+0x2c90>
   13f94:	ldr	r1, [sp, #44]	; 0x2c
   13f98:	ldr	r2, [sp, #20]
   13f9c:	add	r1, r2, r1
   13fa0:	mov	r2, #1
   13fa4:	ldrb	r3, [r1, r2]
   13fa8:	sub	r3, r3, #91	; 0x5b
   13fac:	cmp	r3, #33	; 0x21
   13fb0:	bhi	14044 <__assert_fail@plt+0x2c84>
   13fb4:	add	r7, pc, #0
   13fb8:	ldr	pc, [r7, r3, lsl #2]
   13fbc:	andeq	r4, r1, r4, lsl #10
   13fc0:	andeq	r4, r1, r4, lsl #10
   13fc4:	andeq	r4, r1, r4, asr #32
   13fc8:	andeq	r4, r1, r4, lsl #10
   13fcc:	andeq	r4, r1, r4, asr #32
   13fd0:	andeq	r4, r1, r4, lsl #10
   13fd4:	andeq	r4, r1, r4, asr #32
   13fd8:	andeq	r4, r1, r4, asr #32
   13fdc:	andeq	r4, r1, r4, asr #32
   13fe0:	andeq	r4, r1, r4, asr #32
   13fe4:	andeq	r4, r1, r4, asr #32
   13fe8:	andeq	r4, r1, r4, asr #32
   13fec:	andeq	r4, r1, r4, asr #32
   13ff0:	andeq	r4, r1, r4, asr #32
   13ff4:	andeq	r4, r1, r4, asr #32
   13ff8:	andeq	r4, r1, r4, asr #32
   13ffc:	andeq	r4, r1, r4, asr #32
   14000:	andeq	r4, r1, r4, asr #32
   14004:	andeq	r4, r1, r4, asr #32
   14008:	andeq	r4, r1, r4, asr #32
   1400c:	andeq	r4, r1, r4, asr #32
   14010:	andeq	r4, r1, r4, asr #32
   14014:	andeq	r4, r1, r4, asr #32
   14018:	andeq	r4, r1, r4, asr #32
   1401c:	andeq	r4, r1, r4, asr #32
   14020:	andeq	r4, r1, r4, asr #32
   14024:	andeq	r4, r1, r4, asr #32
   14028:	andeq	r4, r1, r4, asr #32
   1402c:	andeq	r4, r1, r4, asr #32
   14030:	andeq	r4, r1, r4, asr #32
   14034:	andeq	r4, r1, r4, asr #32
   14038:	andeq	r4, r1, r4, asr #32
   1403c:	andeq	r4, r1, r4, asr #32
   14040:	andeq	r4, r1, r4, lsl #10
   14044:	add	r2, r2, #1
   14048:	cmp	r2, r0
   1404c:	bcc	13fa4 <__assert_fail@plt+0x2be4>
   14050:	ldr	r7, [sp, #44]	; 0x2c
   14054:	add	r7, r0, r7
   14058:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1405c:	bl	111b0 <iswprint@plt>
   14060:	cmp	r0, #0
   14064:	movwne	r0, #1
   14068:	and	r9, r9, r0
   1406c:	sub	r4, fp, #40	; 0x28
   14070:	mov	r0, r4
   14074:	bl	11144 <mbsinit@plt>
   14078:	ldr	lr, [sp, #28]
   1407c:	cmp	r0, #0
   14080:	ldr	ip, [fp, #-84]	; 0xffffffac
   14084:	beq	13f3c <__assert_fail@plt+0x2b7c>
   14088:	b	14424 <__assert_fail@plt+0x3064>
   1408c:	ldr	r0, [sp, #32]
   14090:	cmp	r0, #0
   14094:	beq	1412c <__assert_fail@plt+0x2d6c>
   14098:	add	r0, r6, #2
   1409c:	cmp	r0, lr
   140a0:	bcs	1412c <__assert_fail@plt+0x2d6c>
   140a4:	add	r1, ip, r6
   140a8:	ldrb	r1, [r1, #1]
   140ac:	cmp	r1, #63	; 0x3f
   140b0:	bne	1412c <__assert_fail@plt+0x2d6c>
   140b4:	ldrb	r9, [ip, r0]
   140b8:	sub	r2, r9, #33	; 0x21
   140bc:	cmp	r2, #29
   140c0:	bhi	1412c <__assert_fail@plt+0x2d6c>
   140c4:	mov	r3, #1
   140c8:	movw	r1, #20929	; 0x51c1
   140cc:	movt	r1, #14336	; 0x3800
   140d0:	tst	r1, r3, lsl r2
   140d4:	beq	1412c <__assert_fail@plt+0x2d6c>
   140d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   140dc:	tst	r1, #1
   140e0:	bne	1450c <__assert_fail@plt+0x314c>
   140e4:	cmp	r8, r4
   140e8:	movcc	r1, #63	; 0x3f
   140ec:	strbcc	r1, [r7, r8]
   140f0:	add	r2, r8, #1
   140f4:	cmp	r2, r4
   140f8:	movcc	r1, #34	; 0x22
   140fc:	strbcc	r1, [r7, r2]
   14100:	add	r2, r8, #2
   14104:	cmp	r2, r4
   14108:	movcc	r1, #34	; 0x22
   1410c:	strbcc	r1, [r7, r2]
   14110:	add	r2, r8, #3
   14114:	cmp	r2, r4
   14118:	movcc	r1, #63	; 0x3f
   1411c:	strbcc	r1, [r7, r2]
   14120:	add	r8, r8, #4
   14124:	mov	r6, r0
   14128:	mov	r5, r9
   1412c:	mov	r9, #0
   14130:	b	13b80 <__assert_fail@plt+0x27c0>
   14134:	add	r1, r2, r6
   14138:	str	r1, [sp, #44]	; 0x2c
   1413c:	add	r1, r6, #1
   14140:	mov	r3, #0
   14144:	ldr	lr, [sp, #28]
   14148:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1414c:	tst	r0, #1
   14150:	bne	14244 <__assert_fail@plt+0x2e84>
   14154:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14158:	tst	r2, #1
   1415c:	bne	1450c <__assert_fail@plt+0x314c>
   14160:	cmp	r6, #2
   14164:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14168:	movwne	r3, #1
   1416c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14170:	orr	r3, r3, r2
   14174:	tst	r3, #1
   14178:	bne	141b4 <__assert_fail@plt+0x2df4>
   1417c:	cmp	r8, r4
   14180:	movcc	r2, #39	; 0x27
   14184:	strbcc	r2, [r7, r8]
   14188:	add	r3, r8, #1
   1418c:	cmp	r3, r4
   14190:	movcc	r2, #36	; 0x24
   14194:	strbcc	r2, [r7, r3]
   14198:	add	r3, r8, #2
   1419c:	cmp	r3, r4
   141a0:	movcc	r2, #39	; 0x27
   141a4:	strbcc	r2, [r7, r3]
   141a8:	add	r8, r8, #3
   141ac:	mov	r2, #1
   141b0:	str	r2, [fp, #-56]	; 0xffffffc8
   141b4:	cmp	r8, r4
   141b8:	movcc	r2, #92	; 0x5c
   141bc:	strbcc	r2, [r7, r8]
   141c0:	add	r3, r8, #1
   141c4:	cmp	r3, r4
   141c8:	bcs	141e8 <__assert_fail@plt+0x2e28>
   141cc:	and	r7, r5, #192	; 0xc0
   141d0:	mov	r2, #48	; 0x30
   141d4:	orr	r7, r2, r7, lsr #6
   141d8:	ldr	r6, [sp, #80]	; 0x50
   141dc:	strb	r7, [r6, r3]
   141e0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   141e4:	ldr	r7, [sp, #80]	; 0x50
   141e8:	add	r3, r8, #2
   141ec:	cmp	r3, r4
   141f0:	bcs	14210 <__assert_fail@plt+0x2e50>
   141f4:	lsr	r7, r5, #3
   141f8:	mov	r2, #6
   141fc:	bfi	r7, r2, #3, #29
   14200:	ldr	r6, [sp, #80]	; 0x50
   14204:	strb	r7, [r6, r3]
   14208:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1420c:	ldr	r7, [sp, #80]	; 0x50
   14210:	mov	r2, #6
   14214:	bfi	r5, r2, #3, #29
   14218:	add	r8, r8, #3
   1421c:	mov	r3, #1
   14220:	b	14268 <__assert_fail@plt+0x2ea8>
   14224:	ldr	r7, [sp, #80]	; 0x50
   14228:	cmp	r8, r4
   1422c:	strbcc	r5, [r7, r8]
   14230:	ldrb	r5, [ip, r1]
   14234:	add	r1, r1, #1
   14238:	add	r8, r8, #1
   1423c:	tst	r0, #1
   14240:	beq	14154 <__assert_fail@plt+0x2d94>
   14244:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14248:	tst	r2, #1
   1424c:	beq	14260 <__assert_fail@plt+0x2ea0>
   14250:	cmp	r8, r4
   14254:	movcc	r2, #92	; 0x5c
   14258:	strbcc	r2, [r7, r8]
   1425c:	add	r8, r8, #1
   14260:	mov	r2, #0
   14264:	str	r2, [fp, #-52]	; 0xffffffcc
   14268:	and	sl, r3, #1
   1426c:	ldr	r2, [sp, #44]	; 0x2c
   14270:	cmp	r2, r1
   14274:	bls	14380 <__assert_fail@plt+0x2fc0>
   14278:	cmp	sl, #0
   1427c:	movwne	sl, #1
   14280:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14284:	mvn	r7, r2
   14288:	orr	r7, r7, sl
   1428c:	tst	r7, #1
   14290:	bne	14224 <__assert_fail@plt+0x2e64>
   14294:	cmp	r8, r4
   14298:	ldrcc	r7, [sp, #80]	; 0x50
   1429c:	movcc	r2, #39	; 0x27
   142a0:	strbcc	r2, [r7, r8]
   142a4:	add	r7, r8, #1
   142a8:	cmp	r7, r4
   142ac:	ldrcc	r6, [sp, #80]	; 0x50
   142b0:	movcc	r2, #39	; 0x27
   142b4:	strbcc	r2, [r6, r7]
   142b8:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   142bc:	add	r8, r8, #2
   142c0:	mov	r2, #0
   142c4:	str	r2, [fp, #-56]	; 0xffffffc8
   142c8:	b	14224 <__assert_fail@plt+0x2e64>
   142cc:	cmp	r8, r4
   142d0:	movcc	r0, #39	; 0x27
   142d4:	strbcc	r0, [r7, r8]
   142d8:	add	r0, r8, #1
   142dc:	cmp	r0, r4
   142e0:	movcc	r1, #36	; 0x24
   142e4:	strbcc	r1, [r7, r0]
   142e8:	add	r0, r8, #2
   142ec:	cmp	r0, r4
   142f0:	movcc	r1, #39	; 0x27
   142f4:	strbcc	r1, [r7, r0]
   142f8:	add	r0, r8, #3
   142fc:	mov	r2, #1
   14300:	cmp	r0, r4
   14304:	movcc	r1, #92	; 0x5c
   14308:	strbcc	r1, [r7, r0]
   1430c:	str	r2, [fp, #-56]	; 0xffffffc8
   14310:	add	r8, r0, #1
   14314:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14318:	cmp	r1, #2
   1431c:	beq	14370 <__assert_fail@plt+0x2fb0>
   14320:	add	r1, r6, #1
   14324:	mov	r9, #0
   14328:	mov	sl, #1
   1432c:	mov	r5, #48	; 0x30
   14330:	cmp	r1, lr
   14334:	bcs	13b80 <__assert_fail@plt+0x27c0>
   14338:	ldrb	r1, [ip, r1]
   1433c:	sub	r1, r1, #48	; 0x30
   14340:	uxtb	r1, r1
   14344:	cmp	r1, #9
   14348:	bhi	13b80 <__assert_fail@plt+0x27c0>
   1434c:	cmp	r8, r4
   14350:	movcc	r1, #48	; 0x30
   14354:	strbcc	r1, [r7, r8]
   14358:	add	r1, r0, #2
   1435c:	cmp	r1, r4
   14360:	movcc	r2, #48	; 0x30
   14364:	strbcc	r2, [r7, r1]
   14368:	add	r8, r0, #3
   1436c:	b	13b80 <__assert_fail@plt+0x27c0>
   14370:	mov	r0, #48	; 0x30
   14374:	mov	sl, #1
   14378:	mov	r9, #0
   1437c:	b	13e2c <__assert_fail@plt+0x2a6c>
   14380:	sub	r6, r1, #1
   14384:	cmp	sl, #0
   14388:	movwne	sl, #1
   1438c:	mov	r0, r5
   14390:	cmp	sl, #0
   14394:	bne	143d4 <__assert_fail@plt+0x3014>
   14398:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1439c:	tst	r1, #1
   143a0:	beq	143d4 <__assert_fail@plt+0x3014>
   143a4:	cmp	r8, r4
   143a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   143ac:	movcc	r1, #39	; 0x27
   143b0:	strbcc	r1, [r7, r8]
   143b4:	add	r1, r8, #1
   143b8:	cmp	r1, r4
   143bc:	movcc	r2, #39	; 0x27
   143c0:	strbcc	r2, [r7, r1]
   143c4:	add	r8, r8, #2
   143c8:	mov	r1, #0
   143cc:	str	r1, [fp, #-56]	; 0xffffffc8
   143d0:	b	13eb8 <__assert_fail@plt+0x2af8>
   143d4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   143d8:	b	13eb8 <__assert_fail@plt+0x2af8>
   143dc:	mov	r9, #0
   143e0:	b	1441c <__assert_fail@plt+0x305c>
   143e4:	mov	r9, #0
   143e8:	cmp	r7, lr
   143ec:	bcs	1441c <__assert_fail@plt+0x305c>
   143f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   143f4:	ldr	r7, [sp, #44]	; 0x2c
   143f8:	ldr	r0, [sp, #20]
   143fc:	ldrb	r0, [r0, r7]
   14400:	cmp	r0, #0
   14404:	beq	14424 <__assert_fail@plt+0x3064>
   14408:	add	r7, r7, #1
   1440c:	add	r0, r6, r7
   14410:	cmp	r0, lr
   14414:	bcc	143f8 <__assert_fail@plt+0x3038>
   14418:	b	14424 <__assert_fail@plt+0x3064>
   1441c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14420:	ldr	r7, [sp, #44]	; 0x2c
   14424:	mov	r1, r7
   14428:	ldr	r7, [sp, #80]	; 0x50
   1442c:	b	13d54 <__assert_fail@plt+0x2994>
   14430:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14434:	eor	r0, r1, #2
   14438:	orr	r0, r0, r8
   1443c:	clz	r0, r0
   14440:	lsr	r0, r0, #5
   14444:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14448:	tst	r2, r0
   1444c:	bne	1450c <__assert_fail@plt+0x314c>
   14450:	cmp	r1, #2
   14454:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14458:	movwne	r0, #1
   1445c:	orr	r0, r2, r0
   14460:	tst	r0, #1
   14464:	ldreq	r0, [sp, #56]	; 0x38
   14468:	eoreq	r0, r0, #1
   1446c:	tsteq	r0, #1
   14470:	bne	144a4 <__assert_fail@plt+0x30e4>
   14474:	mov	r9, lr
   14478:	tst	r5, #1
   1447c:	bne	14574 <__assert_fail@plt+0x31b4>
   14480:	ldr	r0, [sp, #72]	; 0x48
   14484:	cmp	r0, #0
   14488:	beq	144a4 <__assert_fail@plt+0x30e4>
   1448c:	mov	r5, #0
   14490:	cmp	r4, #0
   14494:	ldr	r0, [sp, #84]	; 0x54
   14498:	mov	sl, r2
   1449c:	ldr	r6, [sp, #72]	; 0x48
   144a0:	beq	1363c <__assert_fail@plt+0x227c>
   144a4:	ldr	r1, [sp, #92]	; 0x5c
   144a8:	clz	r0, r1
   144ac:	lsr	r0, r0, #5
   144b0:	orr	r0, r0, r2
   144b4:	tst	r0, #1
   144b8:	bne	144e4 <__assert_fail@plt+0x3124>
   144bc:	ldrb	r0, [r1]
   144c0:	cmp	r0, #0
   144c4:	beq	144e4 <__assert_fail@plt+0x3124>
   144c8:	add	r1, r1, #1
   144cc:	cmp	r8, r4
   144d0:	strbcc	r0, [r7, r8]
   144d4:	add	r8, r8, #1
   144d8:	ldrb	r0, [r1], #1
   144dc:	cmp	r0, #0
   144e0:	bne	144cc <__assert_fail@plt+0x310c>
   144e4:	cmp	r8, r4
   144e8:	movcc	r0, #0
   144ec:	strbcc	r0, [r7, r8]
   144f0:	b	14568 <__assert_fail@plt+0x31a8>
   144f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   144f8:	mov	lr, r4
   144fc:	mov	r4, r5
   14500:	b	1450c <__assert_fail@plt+0x314c>
   14504:	ldr	r7, [sp, #80]	; 0x50
   14508:	ldr	ip, [fp, #-84]	; 0xffffffac
   1450c:	mov	r0, #0
   14510:	ldr	r1, [fp, #12]
   14514:	bic	r1, r1, #2
   14518:	ldr	r2, [sp, #84]	; 0x54
   1451c:	tst	r2, #1
   14520:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14524:	mov	r2, r3
   14528:	movwne	r2, #4
   1452c:	cmp	r3, #2
   14530:	movne	r2, r3
   14534:	str	r2, [sp]
   14538:	str	r1, [sp, #4]
   1453c:	str	r0, [sp, #8]
   14540:	ldr	r0, [sp, #68]	; 0x44
   14544:	str	r0, [sp, #12]
   14548:	ldr	r0, [sp, #76]	; 0x4c
   1454c:	str	r0, [sp, #16]
   14550:	mov	r0, r7
   14554:	mov	r1, r4
   14558:	mov	r2, ip
   1455c:	mov	r3, lr
   14560:	bl	135b4 <__assert_fail@plt+0x21f4>
   14564:	mov	r8, r0
   14568:	mov	r0, r8
   1456c:	sub	sp, fp, #28
   14570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14574:	mov	r0, #5
   14578:	str	r0, [sp]
   1457c:	ldr	r0, [fp, #12]
   14580:	str	r0, [sp, #4]
   14584:	ldr	r0, [fp, #16]
   14588:	str	r0, [sp, #8]
   1458c:	ldr	r0, [sp, #68]	; 0x44
   14590:	str	r0, [sp, #12]
   14594:	ldr	r0, [sp, #76]	; 0x4c
   14598:	str	r0, [sp, #16]
   1459c:	mov	r0, r7
   145a0:	ldr	r1, [sp, #72]	; 0x48
   145a4:	ldr	r2, [fp, #-84]	; 0xffffffac
   145a8:	mov	r3, r9
   145ac:	b	14560 <__assert_fail@plt+0x31a0>
   145b0:	bl	113a8 <abort@plt>
   145b4:	mov	r3, r2
   145b8:	mov	r2, #0
   145bc:	b	145c0 <__assert_fail@plt+0x3200>
   145c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c4:	add	fp, sp, #28
   145c8:	sub	sp, sp, #36	; 0x24
   145cc:	mov	r4, r2
   145d0:	str	r2, [sp, #24]
   145d4:	mov	r5, r1
   145d8:	mov	r6, r0
   145dc:	str	r0, [sp, #20]
   145e0:	movw	r8, #33288	; 0x8208
   145e4:	movt	r8, #2
   145e8:	cmp	r3, #0
   145ec:	movne	r8, r3
   145f0:	bl	112c4 <__errno_location@plt>
   145f4:	str	r0, [sp, #28]
   145f8:	ldm	r8, {r3, r9}
   145fc:	ldr	r1, [r8, #40]	; 0x28
   14600:	ldr	r2, [r8, #44]	; 0x2c
   14604:	ldr	r7, [r0]
   14608:	str	r7, [sp, #32]
   1460c:	add	sl, r8, #8
   14610:	cmp	r4, #0
   14614:	orreq	r9, r9, #1
   14618:	stm	sp, {r3, r9, sl}
   1461c:	str	r1, [sp, #12]
   14620:	str	r2, [sp, #16]
   14624:	mov	r0, #0
   14628:	mov	r1, #0
   1462c:	mov	r2, r6
   14630:	mov	r3, r5
   14634:	mov	r7, r5
   14638:	bl	135b4 <__assert_fail@plt+0x21f4>
   1463c:	mov	r5, r0
   14640:	add	r4, r0, #1
   14644:	mov	r0, r4
   14648:	bl	15738 <__assert_fail@plt+0x4378>
   1464c:	mov	r6, r0
   14650:	ldr	r0, [r8]
   14654:	ldr	r1, [r8, #40]	; 0x28
   14658:	ldr	r2, [r8, #44]	; 0x2c
   1465c:	stm	sp, {r0, r9, sl}
   14660:	str	r1, [sp, #12]
   14664:	str	r2, [sp, #16]
   14668:	mov	r0, r6
   1466c:	mov	r1, r4
   14670:	ldr	r2, [sp, #20]
   14674:	mov	r3, r7
   14678:	bl	135b4 <__assert_fail@plt+0x21f4>
   1467c:	ldr	r0, [sp, #24]
   14680:	ldr	r1, [sp, #32]
   14684:	ldr	r2, [sp, #28]
   14688:	str	r1, [r2]
   1468c:	cmp	r0, #0
   14690:	strne	r5, [r0]
   14694:	mov	r0, r6
   14698:	sub	sp, fp, #28
   1469c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146a4:	add	fp, sp, #24
   146a8:	movw	r8, #33064	; 0x8128
   146ac:	movt	r8, #2
   146b0:	ldr	r4, [r8]
   146b4:	movw	r5, #33068	; 0x812c
   146b8:	movt	r5, #2
   146bc:	ldr	r0, [r5]
   146c0:	cmp	r0, #2
   146c4:	blt	146f0 <__assert_fail@plt+0x3330>
   146c8:	add	r7, r4, #12
   146cc:	mov	r6, #0
   146d0:	ldr	r0, [r7, r6, lsl #3]
   146d4:	bl	1322c <__assert_fail@plt+0x1e6c>
   146d8:	add	r0, r6, #1
   146dc:	ldr	r1, [r5]
   146e0:	add	r2, r6, #2
   146e4:	cmp	r2, r1
   146e8:	mov	r6, r0
   146ec:	blt	146d0 <__assert_fail@plt+0x3310>
   146f0:	ldr	r0, [r4, #4]
   146f4:	movw	r7, #33336	; 0x8238
   146f8:	movt	r7, #2
   146fc:	cmp	r0, r7
   14700:	beq	14718 <__assert_fail@plt+0x3358>
   14704:	bl	1322c <__assert_fail@plt+0x1e6c>
   14708:	movw	r0, #33072	; 0x8130
   1470c:	movt	r0, #2
   14710:	mov	r6, #256	; 0x100
   14714:	strd	r6, [r0]
   14718:	movw	r6, #33072	; 0x8130
   1471c:	movt	r6, #2
   14720:	cmp	r4, r6
   14724:	beq	14734 <__assert_fail@plt+0x3374>
   14728:	mov	r0, r4
   1472c:	bl	1322c <__assert_fail@plt+0x1e6c>
   14730:	str	r6, [r8]
   14734:	mov	r0, #1
   14738:	str	r0, [r5]
   1473c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14740:	movw	r3, #33288	; 0x8208
   14744:	movt	r3, #2
   14748:	mvn	r2, #0
   1474c:	b	14750 <__assert_fail@plt+0x3390>
   14750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14754:	add	fp, sp, #28
   14758:	sub	sp, sp, #44	; 0x2c
   1475c:	mov	r7, r3
   14760:	str	r2, [sp, #36]	; 0x24
   14764:	str	r1, [sp, #32]
   14768:	mov	r5, r0
   1476c:	bl	112c4 <__errno_location@plt>
   14770:	cmp	r5, #0
   14774:	blt	148e0 <__assert_fail@plt+0x3520>
   14778:	cmn	r5, #-2147483647	; 0x80000001
   1477c:	beq	148e0 <__assert_fail@plt+0x3520>
   14780:	movw	r4, #33064	; 0x8128
   14784:	movt	r4, #2
   14788:	ldr	r6, [r4]
   1478c:	str	r0, [sp, #28]
   14790:	ldr	r0, [r0]
   14794:	str	r0, [sp, #24]
   14798:	movw	r8, #33068	; 0x812c
   1479c:	movt	r8, #2
   147a0:	ldr	r1, [r8]
   147a4:	cmp	r1, r5
   147a8:	ble	147b4 <__assert_fail@plt+0x33f4>
   147ac:	mov	sl, r6
   147b0:	b	1481c <__assert_fail@plt+0x345c>
   147b4:	str	r1, [fp, #-32]	; 0xffffffe0
   147b8:	mov	r0, #8
   147bc:	str	r0, [sp]
   147c0:	movw	r9, #33072	; 0x8130
   147c4:	movt	r9, #2
   147c8:	subs	r0, r6, r9
   147cc:	movne	r0, r6
   147d0:	add	r2, r5, #1
   147d4:	sub	r2, r2, r1
   147d8:	sub	r1, fp, #32
   147dc:	mvn	r3, #-2147483648	; 0x80000000
   147e0:	bl	15820 <__assert_fail@plt+0x4460>
   147e4:	mov	sl, r0
   147e8:	str	r0, [r4]
   147ec:	cmp	r6, r9
   147f0:	ldrdeq	r0, [r9]
   147f4:	stmeq	sl, {r0, r1}
   147f8:	ldr	r1, [r8]
   147fc:	add	r0, sl, r1, lsl #3
   14800:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14804:	sub	r1, r2, r1
   14808:	lsl	r2, r1, #3
   1480c:	mov	r1, #0
   14810:	bl	112e8 <memset@plt>
   14814:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14818:	str	r0, [r8]
   1481c:	mov	r9, sl
   14820:	ldr	r6, [r9, r5, lsl #3]!
   14824:	ldr	r4, [r9, #4]!
   14828:	ldm	r7, {r0, r1}
   1482c:	ldr	r2, [r7, #40]	; 0x28
   14830:	ldr	r3, [r7, #44]	; 0x2c
   14834:	orr	r8, r1, #1
   14838:	add	r1, r7, #8
   1483c:	stm	sp, {r0, r8}
   14840:	str	r1, [sp, #20]
   14844:	add	r0, sp, #8
   14848:	stm	r0, {r1, r2, r3}
   1484c:	mov	r0, r4
   14850:	mov	r1, r6
   14854:	ldr	r2, [sp, #32]
   14858:	ldr	r3, [sp, #36]	; 0x24
   1485c:	bl	135b4 <__assert_fail@plt+0x21f4>
   14860:	cmp	r6, r0
   14864:	bhi	148c8 <__assert_fail@plt+0x3508>
   14868:	add	r6, r0, #1
   1486c:	str	r6, [sl, r5, lsl #3]
   14870:	movw	r0, #33336	; 0x8238
   14874:	movt	r0, #2
   14878:	cmp	r4, r0
   1487c:	beq	14888 <__assert_fail@plt+0x34c8>
   14880:	mov	r0, r4
   14884:	bl	1322c <__assert_fail@plt+0x1e6c>
   14888:	mov	r0, r6
   1488c:	bl	15738 <__assert_fail@plt+0x4378>
   14890:	mov	r4, r0
   14894:	str	r0, [r9]
   14898:	ldr	r0, [r7]
   1489c:	ldr	r1, [r7, #40]	; 0x28
   148a0:	ldr	r2, [r7, #44]	; 0x2c
   148a4:	stm	sp, {r0, r8}
   148a8:	ldr	r0, [sp, #20]
   148ac:	add	r3, sp, #8
   148b0:	stm	r3, {r0, r1, r2}
   148b4:	mov	r0, r4
   148b8:	mov	r1, r6
   148bc:	ldr	r2, [sp, #32]
   148c0:	ldr	r3, [sp, #36]	; 0x24
   148c4:	bl	135b4 <__assert_fail@plt+0x21f4>
   148c8:	ldr	r0, [sp, #28]
   148cc:	ldr	r1, [sp, #24]
   148d0:	str	r1, [r0]
   148d4:	mov	r0, r4
   148d8:	sub	sp, fp, #28
   148dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e0:	bl	113a8 <abort@plt>
   148e4:	movw	r3, #33288	; 0x8208
   148e8:	movt	r3, #2
   148ec:	b	14750 <__assert_fail@plt+0x3390>
   148f0:	mov	r1, r0
   148f4:	mov	r0, #0
   148f8:	b	14740 <__assert_fail@plt+0x3380>
   148fc:	mov	r2, r1
   14900:	mov	r1, r0
   14904:	mov	r0, #0
   14908:	b	148e4 <__assert_fail@plt+0x3524>
   1490c:	push	{r4, r5, r6, sl, fp, lr}
   14910:	add	fp, sp, #16
   14914:	sub	sp, sp, #48	; 0x30
   14918:	mov	r4, r2
   1491c:	mov	r5, r0
   14920:	mov	r6, sp
   14924:	mov	r0, r6
   14928:	bl	14948 <__assert_fail@plt+0x3588>
   1492c:	mov	r0, r5
   14930:	mov	r1, r4
   14934:	mvn	r2, #0
   14938:	mov	r3, r6
   1493c:	bl	14750 <__assert_fail@plt+0x3390>
   14940:	sub	sp, fp, #16
   14944:	pop	{r4, r5, r6, sl, fp, pc}
   14948:	vmov.i32	q8, #0	; 0x00000000
   1494c:	mov	r2, #32
   14950:	mov	r3, r0
   14954:	vst1.32	{d16-d17}, [r3], r2
   14958:	vst1.32	{d16-d17}, [r3]
   1495c:	add	r2, r0, #16
   14960:	vst1.32	{d16-d17}, [r2]
   14964:	cmp	r1, #10
   14968:	strne	r1, [r0]
   1496c:	bxne	lr
   14970:	push	{fp, lr}
   14974:	mov	fp, sp
   14978:	bl	113a8 <abort@plt>
   1497c:	push	{r4, r5, r6, r7, fp, lr}
   14980:	add	fp, sp, #16
   14984:	sub	sp, sp, #48	; 0x30
   14988:	mov	r4, r3
   1498c:	mov	r5, r2
   14990:	mov	r6, r0
   14994:	mov	r7, sp
   14998:	mov	r0, r7
   1499c:	bl	14948 <__assert_fail@plt+0x3588>
   149a0:	mov	r0, r6
   149a4:	mov	r1, r5
   149a8:	mov	r2, r4
   149ac:	mov	r3, r7
   149b0:	bl	14750 <__assert_fail@plt+0x3390>
   149b4:	sub	sp, fp, #16
   149b8:	pop	{r4, r5, r6, r7, fp, pc}
   149bc:	mov	r2, r1
   149c0:	mov	r1, r0
   149c4:	mov	r0, #0
   149c8:	b	1490c <__assert_fail@plt+0x354c>
   149cc:	mov	r3, r2
   149d0:	mov	r2, r1
   149d4:	mov	r1, r0
   149d8:	mov	r0, #0
   149dc:	b	1497c <__assert_fail@plt+0x35bc>
   149e0:	push	{r4, r5, r6, sl, fp, lr}
   149e4:	add	fp, sp, #16
   149e8:	sub	sp, sp, #48	; 0x30
   149ec:	mov	r4, r1
   149f0:	mov	r5, r0
   149f4:	mov	r0, #32
   149f8:	movw	r1, #33288	; 0x8208
   149fc:	movt	r1, #2
   14a00:	add	r3, r1, #16
   14a04:	vld1.64	{d16-d17}, [r1], r0
   14a08:	mov	r6, sp
   14a0c:	vld1.64	{d18-d19}, [r3]
   14a10:	add	r3, r6, #16
   14a14:	vld1.64	{d20-d21}, [r1]
   14a18:	vst1.64	{d18-d19}, [r3]
   14a1c:	mov	r1, r6
   14a20:	vst1.64	{d16-d17}, [r1], r0
   14a24:	vst1.64	{d20-d21}, [r1]
   14a28:	mov	r0, r6
   14a2c:	mov	r1, r2
   14a30:	mov	r2, #1
   14a34:	bl	134a8 <__assert_fail@plt+0x20e8>
   14a38:	mov	r0, #0
   14a3c:	mov	r1, r5
   14a40:	mov	r2, r4
   14a44:	mov	r3, r6
   14a48:	bl	14750 <__assert_fail@plt+0x3390>
   14a4c:	sub	sp, fp, #16
   14a50:	pop	{r4, r5, r6, sl, fp, pc}
   14a54:	mov	r2, r1
   14a58:	mvn	r1, #0
   14a5c:	b	149e0 <__assert_fail@plt+0x3620>
   14a60:	mov	r1, #58	; 0x3a
   14a64:	b	14a54 <__assert_fail@plt+0x3694>
   14a68:	mov	r2, #58	; 0x3a
   14a6c:	b	149e0 <__assert_fail@plt+0x3620>
   14a70:	push	{r4, r5, r6, sl, fp, lr}
   14a74:	add	fp, sp, #16
   14a78:	sub	sp, sp, #48	; 0x30
   14a7c:	mov	r4, r2
   14a80:	mov	r5, r0
   14a84:	mov	r6, sp
   14a88:	mov	r0, r6
   14a8c:	bl	14948 <__assert_fail@plt+0x3588>
   14a90:	mov	r0, r6
   14a94:	mov	r1, #58	; 0x3a
   14a98:	mov	r2, #1
   14a9c:	bl	134a8 <__assert_fail@plt+0x20e8>
   14aa0:	mov	r0, r5
   14aa4:	mov	r1, r4
   14aa8:	mvn	r2, #0
   14aac:	mov	r3, r6
   14ab0:	bl	14750 <__assert_fail@plt+0x3390>
   14ab4:	sub	sp, fp, #16
   14ab8:	pop	{r4, r5, r6, sl, fp, pc}
   14abc:	push	{fp, lr}
   14ac0:	mov	fp, sp
   14ac4:	sub	sp, sp, #8
   14ac8:	mvn	ip, #0
   14acc:	str	ip, [sp]
   14ad0:	bl	14adc <__assert_fail@plt+0x371c>
   14ad4:	mov	sp, fp
   14ad8:	pop	{fp, pc}
   14adc:	push	{r4, r5, r6, r7, fp, lr}
   14ae0:	add	fp, sp, #16
   14ae4:	sub	sp, sp, #48	; 0x30
   14ae8:	mov	r7, r3
   14aec:	mov	r5, r0
   14af0:	mov	r0, #32
   14af4:	movw	r3, #33288	; 0x8208
   14af8:	movt	r3, #2
   14afc:	add	r4, r3, #16
   14b00:	vld1.64	{d16-d17}, [r3], r0
   14b04:	mov	r6, sp
   14b08:	vld1.64	{d18-d19}, [r4]
   14b0c:	add	r4, r6, #16
   14b10:	vld1.64	{d20-d21}, [r3]
   14b14:	vst1.64	{d18-d19}, [r4]
   14b18:	mov	r3, r6
   14b1c:	vst1.64	{d16-d17}, [r3], r0
   14b20:	vst1.64	{d20-d21}, [r3]
   14b24:	mov	r0, r6
   14b28:	bl	13500 <__assert_fail@plt+0x2140>
   14b2c:	ldr	r2, [fp, #8]
   14b30:	mov	r0, r5
   14b34:	mov	r1, r7
   14b38:	mov	r3, r6
   14b3c:	bl	14750 <__assert_fail@plt+0x3390>
   14b40:	sub	sp, fp, #16
   14b44:	pop	{r4, r5, r6, r7, fp, pc}
   14b48:	mov	r3, r2
   14b4c:	mov	r2, r1
   14b50:	mov	r1, r0
   14b54:	mov	r0, #0
   14b58:	b	14abc <__assert_fail@plt+0x36fc>
   14b5c:	push	{fp, lr}
   14b60:	mov	fp, sp
   14b64:	sub	sp, sp, #8
   14b68:	mov	ip, r2
   14b6c:	mov	r2, r1
   14b70:	mov	r1, r0
   14b74:	str	r3, [sp]
   14b78:	mov	r0, #0
   14b7c:	mov	r3, ip
   14b80:	bl	14adc <__assert_fail@plt+0x371c>
   14b84:	mov	sp, fp
   14b88:	pop	{fp, pc}
   14b8c:	movw	r3, #33080	; 0x8138
   14b90:	movt	r3, #2
   14b94:	b	14750 <__assert_fail@plt+0x3390>
   14b98:	mov	r2, r1
   14b9c:	mov	r1, r0
   14ba0:	mov	r0, #0
   14ba4:	b	14b8c <__assert_fail@plt+0x37cc>
   14ba8:	mvn	r2, #0
   14bac:	b	14b8c <__assert_fail@plt+0x37cc>
   14bb0:	mov	r1, r0
   14bb4:	mov	r0, #0
   14bb8:	b	14ba8 <__assert_fail@plt+0x37e8>
   14bbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bc0:	add	fp, sp, #24
   14bc4:	sub	sp, sp, #16
   14bc8:	mov	r4, r1
   14bcc:	mov	r5, r0
   14bd0:	mov	r7, #0
   14bd4:	mov	r0, #0
   14bd8:	mov	r1, r5
   14bdc:	mov	r2, #5
   14be0:	bl	11174 <dcgettext@plt>
   14be4:	cmp	r0, r5
   14be8:	beq	14bf4 <__assert_fail@plt+0x3834>
   14bec:	sub	sp, fp, #24
   14bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bf4:	bl	15e4c <__assert_fail@plt+0x4a8c>
   14bf8:	mov	r6, r0
   14bfc:	mov	r8, #56	; 0x38
   14c00:	mov	r0, #45	; 0x2d
   14c04:	stm	sp, {r0, r8}
   14c08:	str	r7, [sp, #8]
   14c0c:	str	r7, [sp, #12]
   14c10:	mov	r0, r6
   14c14:	mov	r1, #85	; 0x55
   14c18:	mov	r2, #84	; 0x54
   14c1c:	mov	r3, #70	; 0x46
   14c20:	bl	14cb8 <__assert_fail@plt+0x38f8>
   14c24:	cmp	r0, #0
   14c28:	beq	14c44 <__assert_fail@plt+0x3884>
   14c2c:	ldrb	r1, [r5]
   14c30:	movw	r2, #27672	; 0x6c18
   14c34:	movt	r2, #1
   14c38:	movw	r0, #27676	; 0x6c1c
   14c3c:	movt	r0, #1
   14c40:	b	14c88 <__assert_fail@plt+0x38c8>
   14c44:	mov	r0, #48	; 0x30
   14c48:	mov	r1, #51	; 0x33
   14c4c:	str	r8, [sp]
   14c50:	stmib	sp, {r0, r1}
   14c54:	str	r0, [sp, #12]
   14c58:	mov	r0, r6
   14c5c:	mov	r1, #71	; 0x47
   14c60:	mov	r2, #66	; 0x42
   14c64:	mov	r3, #49	; 0x31
   14c68:	bl	14cb8 <__assert_fail@plt+0x38f8>
   14c6c:	cmp	r0, #0
   14c70:	beq	14c98 <__assert_fail@plt+0x38d8>
   14c74:	ldrb	r1, [r5]
   14c78:	movw	r2, #27680	; 0x6c20
   14c7c:	movt	r2, #1
   14c80:	movw	r0, #27684	; 0x6c24
   14c84:	movt	r0, #1
   14c88:	cmp	r1, #96	; 0x60
   14c8c:	moveq	r0, r2
   14c90:	sub	sp, fp, #24
   14c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c98:	movw	r1, #27666	; 0x6c12
   14c9c:	movt	r1, #1
   14ca0:	movw	r0, #27670	; 0x6c16
   14ca4:	movt	r0, #1
   14ca8:	cmp	r4, #9
   14cac:	moveq	r0, r1
   14cb0:	sub	sp, fp, #24
   14cb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14cb8:	push	{r4, r5, r6, r7, fp, lr}
   14cbc:	add	fp, sp, #16
   14cc0:	sub	sp, sp, #16
   14cc4:	mov	r4, r3
   14cc8:	mov	r5, r2
   14ccc:	mov	r7, r1
   14cd0:	mov	r6, r0
   14cd4:	mov	r0, r1
   14cd8:	bl	13004 <__assert_fail@plt+0x1c44>
   14cdc:	ldrb	r1, [r6]
   14ce0:	cmp	r0, #0
   14ce4:	andne	r1, r1, #223	; 0xdf
   14ce8:	mov	r0, #0
   14cec:	cmp	r1, r7
   14cf0:	bne	14d30 <__assert_fail@plt+0x3970>
   14cf4:	cmp	r7, #0
   14cf8:	moveq	r0, #1
   14cfc:	subeq	sp, fp, #16
   14d00:	popeq	{r4, r5, r6, r7, fp, pc}
   14d04:	ldr	r0, [fp, #20]
   14d08:	ldr	r1, [fp, #16]
   14d0c:	ldr	r2, [fp, #12]
   14d10:	ldr	r3, [fp, #8]
   14d14:	str	r2, [sp]
   14d18:	str	r1, [sp, #4]
   14d1c:	str	r0, [sp, #8]
   14d20:	mov	r0, r6
   14d24:	mov	r1, r5
   14d28:	mov	r2, r4
   14d2c:	bl	14d38 <__assert_fail@plt+0x3978>
   14d30:	sub	sp, fp, #16
   14d34:	pop	{r4, r5, r6, r7, fp, pc}
   14d38:	push	{r4, r5, r6, r7, fp, lr}
   14d3c:	add	fp, sp, #16
   14d40:	sub	sp, sp, #8
   14d44:	mov	r4, r3
   14d48:	mov	r5, r2
   14d4c:	mov	r7, r1
   14d50:	mov	r6, r0
   14d54:	mov	r0, r1
   14d58:	bl	13004 <__assert_fail@plt+0x1c44>
   14d5c:	ldrb	r1, [r6, #1]
   14d60:	cmp	r0, #0
   14d64:	andne	r1, r1, #223	; 0xdf
   14d68:	mov	r0, #0
   14d6c:	cmp	r1, r7
   14d70:	bne	14da8 <__assert_fail@plt+0x39e8>
   14d74:	cmp	r7, #0
   14d78:	moveq	r0, #1
   14d7c:	subeq	sp, fp, #16
   14d80:	popeq	{r4, r5, r6, r7, fp, pc}
   14d84:	ldr	r0, [fp, #16]
   14d88:	ldr	r1, [fp, #12]
   14d8c:	ldr	r3, [fp, #8]
   14d90:	str	r1, [sp]
   14d94:	str	r0, [sp, #4]
   14d98:	mov	r0, r6
   14d9c:	mov	r1, r5
   14da0:	mov	r2, r4
   14da4:	bl	14db0 <__assert_fail@plt+0x39f0>
   14da8:	sub	sp, fp, #16
   14dac:	pop	{r4, r5, r6, r7, fp, pc}
   14db0:	push	{r4, r5, r6, r7, fp, lr}
   14db4:	add	fp, sp, #16
   14db8:	sub	sp, sp, #8
   14dbc:	mov	r4, r3
   14dc0:	mov	r5, r2
   14dc4:	mov	r7, r1
   14dc8:	mov	r6, r0
   14dcc:	mov	r0, r1
   14dd0:	bl	13004 <__assert_fail@plt+0x1c44>
   14dd4:	ldrb	r1, [r6, #2]
   14dd8:	cmp	r0, #0
   14ddc:	andne	r1, r1, #223	; 0xdf
   14de0:	mov	r0, #0
   14de4:	cmp	r1, r7
   14de8:	bne	14e18 <__assert_fail@plt+0x3a58>
   14dec:	cmp	r7, #0
   14df0:	moveq	r0, #1
   14df4:	subeq	sp, fp, #16
   14df8:	popeq	{r4, r5, r6, r7, fp, pc}
   14dfc:	ldr	r0, [fp, #12]
   14e00:	ldr	r3, [fp, #8]
   14e04:	str	r0, [sp]
   14e08:	mov	r0, r6
   14e0c:	mov	r1, r5
   14e10:	mov	r2, r4
   14e14:	bl	14e20 <__assert_fail@plt+0x3a60>
   14e18:	sub	sp, fp, #16
   14e1c:	pop	{r4, r5, r6, r7, fp, pc}
   14e20:	push	{r4, r5, r6, r7, fp, lr}
   14e24:	add	fp, sp, #16
   14e28:	mov	r4, r3
   14e2c:	mov	r5, r2
   14e30:	mov	r7, r1
   14e34:	mov	r6, r0
   14e38:	mov	r0, r1
   14e3c:	bl	13004 <__assert_fail@plt+0x1c44>
   14e40:	ldrb	r1, [r6, #3]
   14e44:	ldr	r3, [fp, #8]
   14e48:	cmp	r0, #0
   14e4c:	andne	r1, r1, #223	; 0xdf
   14e50:	mov	r0, #0
   14e54:	cmp	r1, r7
   14e58:	popne	{r4, r5, r6, r7, fp, pc}
   14e5c:	cmp	r7, #0
   14e60:	beq	14e78 <__assert_fail@plt+0x3ab8>
   14e64:	mov	r0, r6
   14e68:	mov	r1, r5
   14e6c:	mov	r2, r4
   14e70:	pop	{r4, r5, r6, r7, fp, lr}
   14e74:	b	14e80 <__assert_fail@plt+0x3ac0>
   14e78:	mov	r0, #1
   14e7c:	pop	{r4, r5, r6, r7, fp, pc}
   14e80:	push	{r4, r5, r6, r7, fp, lr}
   14e84:	add	fp, sp, #16
   14e88:	mov	r4, r3
   14e8c:	mov	r5, r2
   14e90:	mov	r7, r1
   14e94:	mov	r6, r0
   14e98:	mov	r0, r1
   14e9c:	bl	13004 <__assert_fail@plt+0x1c44>
   14ea0:	ldrb	r1, [r6, #4]
   14ea4:	cmp	r0, #0
   14ea8:	andne	r1, r1, #223	; 0xdf
   14eac:	mov	r0, #0
   14eb0:	cmp	r1, r7
   14eb4:	popne	{r4, r5, r6, r7, fp, pc}
   14eb8:	cmp	r7, #0
   14ebc:	beq	14ed4 <__assert_fail@plt+0x3b14>
   14ec0:	mov	r0, r6
   14ec4:	mov	r1, r5
   14ec8:	mov	r2, r4
   14ecc:	pop	{r4, r5, r6, r7, fp, lr}
   14ed0:	b	14edc <__assert_fail@plt+0x3b1c>
   14ed4:	mov	r0, #1
   14ed8:	pop	{r4, r5, r6, r7, fp, pc}
   14edc:	push	{r4, r5, r6, sl, fp, lr}
   14ee0:	add	fp, sp, #16
   14ee4:	mov	r4, r2
   14ee8:	mov	r6, r1
   14eec:	mov	r5, r0
   14ef0:	mov	r0, r1
   14ef4:	bl	13004 <__assert_fail@plt+0x1c44>
   14ef8:	ldrb	r1, [r5, #5]
   14efc:	cmp	r0, #0
   14f00:	andne	r1, r1, #223	; 0xdf
   14f04:	mov	r0, #0
   14f08:	cmp	r1, r6
   14f0c:	popne	{r4, r5, r6, sl, fp, pc}
   14f10:	cmp	r6, #0
   14f14:	beq	14f28 <__assert_fail@plt+0x3b68>
   14f18:	mov	r0, r5
   14f1c:	mov	r1, r4
   14f20:	pop	{r4, r5, r6, sl, fp, lr}
   14f24:	b	14f30 <__assert_fail@plt+0x3b70>
   14f28:	mov	r0, #1
   14f2c:	pop	{r4, r5, r6, sl, fp, pc}
   14f30:	push	{r4, r5, fp, lr}
   14f34:	add	fp, sp, #8
   14f38:	mov	r5, r1
   14f3c:	mov	r4, r0
   14f40:	mov	r0, r1
   14f44:	bl	13004 <__assert_fail@plt+0x1c44>
   14f48:	ldrb	r1, [r4, #6]
   14f4c:	cmp	r0, #0
   14f50:	andne	r1, r1, #223	; 0xdf
   14f54:	mov	r0, #0
   14f58:	cmp	r1, r5
   14f5c:	popne	{r4, r5, fp, pc}
   14f60:	cmp	r5, #0
   14f64:	beq	14f74 <__assert_fail@plt+0x3bb4>
   14f68:	mov	r0, r4
   14f6c:	pop	{r4, r5, fp, lr}
   14f70:	b	14f7c <__assert_fail@plt+0x3bbc>
   14f74:	mov	r0, #1
   14f78:	pop	{r4, r5, fp, pc}
   14f7c:	push	{r4, sl, fp, lr}
   14f80:	add	fp, sp, #8
   14f84:	mov	r4, r0
   14f88:	mov	r0, #0
   14f8c:	bl	13004 <__assert_fail@plt+0x1c44>
   14f90:	ldrb	r1, [r4, #7]
   14f94:	cmp	r0, #0
   14f98:	beq	14fb0 <__assert_fail@plt+0x3bf0>
   14f9c:	tst	r1, #223	; 0xdf
   14fa0:	moveq	r0, #1
   14fa4:	popeq	{r4, sl, fp, pc}
   14fa8:	mov	r0, #0
   14fac:	pop	{r4, sl, fp, pc}
   14fb0:	cmp	r1, #0
   14fb4:	moveq	r0, #1
   14fb8:	popeq	{r4, sl, fp, pc}
   14fbc:	mov	r0, #0
   14fc0:	pop	{r4, sl, fp, pc}
   14fc4:	push	{r4, r5, fp, lr}
   14fc8:	add	fp, sp, #8
   14fcc:	mov	r5, r0
   14fd0:	mov	r0, #33	; 0x21
   14fd4:	bl	156fc <__assert_fail@plt+0x433c>
   14fd8:	mov	r4, r0
   14fdc:	add	r1, r5, #44	; 0x2c
   14fe0:	mov	r2, #32
   14fe4:	bl	112f4 <strncpy@plt>
   14fe8:	mov	r5, #0
   14fec:	strb	r5, [r4, #32]
   14ff0:	mov	r0, r4
   14ff4:	bl	112ac <strlen@plt>
   14ff8:	cmp	r0, #1
   14ffc:	blt	15024 <__assert_fail@plt+0x3c64>
   15000:	add	r1, r4, r0
   15004:	mov	r0, r1
   15008:	ldrb	r2, [r0, #-1]!
   1500c:	cmp	r2, #32
   15010:	bne	15024 <__assert_fail@plt+0x3c64>
   15014:	strb	r5, [r1, #-1]
   15018:	cmp	r4, r0
   1501c:	mov	r1, r0
   15020:	bcc	15008 <__assert_fail@plt+0x3c48>
   15024:	mov	r0, r4
   15028:	pop	{r4, r5, fp, pc}
   1502c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15030:	add	fp, sp, #28
   15034:	sub	sp, sp, #12
   15038:	mov	r6, r3
   1503c:	str	r2, [sp, #4]
   15040:	mov	r9, r1
   15044:	mov	r7, #0
   15048:	str	r7, [sp, #8]
   1504c:	bl	11108 <utmpxname@plt>
   15050:	bl	1118c <setutxent@plt>
   15054:	bl	113b4 <getutxent@plt>
   15058:	cmp	r0, #0
   1505c:	beq	150dc <__assert_fail@plt+0x3d1c>
   15060:	mov	r5, r0
   15064:	mov	r4, #0
   15068:	mov	r8, #384	; 0x180
   1506c:	add	sl, sp, #8
   15070:	mov	r7, #0
   15074:	mov	r0, r5
   15078:	mov	r1, r6
   1507c:	bl	150fc <__assert_fail@plt+0x3d3c>
   15080:	cmp	r0, #0
   15084:	beq	150c8 <__assert_fail@plt+0x3d08>
   15088:	ldr	r0, [sp, #8]
   1508c:	cmp	r4, r0
   15090:	bne	150b0 <__assert_fail@plt+0x3cf0>
   15094:	str	r8, [sp]
   15098:	mov	r0, r7
   1509c:	mov	r1, sl
   150a0:	mov	r2, #1
   150a4:	mvn	r3, #0
   150a8:	bl	15820 <__assert_fail@plt+0x4460>
   150ac:	mov	r7, r0
   150b0:	add	r0, r4, r4, lsl #1
   150b4:	add	r0, r7, r0, lsl #7
   150b8:	mov	r1, r5
   150bc:	mov	r2, #384	; 0x180
   150c0:	bl	11138 <memcpy@plt>
   150c4:	add	r4, r4, #1
   150c8:	bl	113b4 <getutxent@plt>
   150cc:	mov	r5, r0
   150d0:	cmp	r0, #0
   150d4:	bne	15074 <__assert_fail@plt+0x3cb4>
   150d8:	b	150e0 <__assert_fail@plt+0x3d20>
   150dc:	mov	r4, #0
   150e0:	bl	1133c <endutxent@plt>
   150e4:	str	r4, [r9]
   150e8:	ldr	r0, [sp, #4]
   150ec:	str	r7, [r0]
   150f0:	mov	r0, #0
   150f4:	sub	sp, fp, #28
   150f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150fc:	push	{r4, sl, fp, lr}
   15100:	add	fp, sp, #8
   15104:	ldrb	r2, [r0, #44]	; 0x2c
   15108:	mov	r4, #0
   1510c:	cmp	r2, #0
   15110:	mov	r2, #0
   15114:	ldrhne	r2, [r0]
   15118:	subne	r2, r2, #7
   1511c:	clzne	r2, r2
   15120:	lsrne	r2, r2, #5
   15124:	tst	r1, #2
   15128:	beq	1513c <__assert_fail@plt+0x3d7c>
   1512c:	cmp	r2, #0
   15130:	bne	1513c <__assert_fail@plt+0x3d7c>
   15134:	mov	r0, r4
   15138:	pop	{r4, sl, fp, pc}
   1513c:	tst	r1, #1
   15140:	beq	1516c <__assert_fail@plt+0x3dac>
   15144:	eors	r1, r2, #1
   15148:	bne	1516c <__assert_fail@plt+0x3dac>
   1514c:	ldr	r0, [r0, #4]
   15150:	cmp	r0, #1
   15154:	blt	1516c <__assert_fail@plt+0x3dac>
   15158:	mov	r4, #0
   1515c:	mov	r1, #0
   15160:	bl	1127c <kill@plt>
   15164:	cmn	r0, #1
   15168:	ble	15178 <__assert_fail@plt+0x3db8>
   1516c:	mov	r4, #1
   15170:	mov	r0, r4
   15174:	pop	{r4, sl, fp, pc}
   15178:	bl	112c4 <__errno_location@plt>
   1517c:	ldr	r0, [r0]
   15180:	cmp	r0, #3
   15184:	movne	r4, #1
   15188:	mov	r0, r4
   1518c:	pop	{r4, sl, fp, pc}
   15190:	b	15194 <__assert_fail@plt+0x3dd4>
   15194:	push	{r4, r5, r6, r7, fp, lr}
   15198:	add	fp, sp, #16
   1519c:	mov	r6, r2
   151a0:	mov	r4, r1
   151a4:	bl	15230 <__assert_fail@plt+0x3e70>
   151a8:	cmp	r0, #0
   151ac:	beq	151dc <__assert_fail@plt+0x3e1c>
   151b0:	mov	r7, r0
   151b4:	bl	112ac <strlen@plt>
   151b8:	cmp	r0, r6
   151bc:	bcs	151fc <__assert_fail@plt+0x3e3c>
   151c0:	add	r2, r0, #1
   151c4:	mov	r0, r4
   151c8:	mov	r1, r7
   151cc:	bl	11138 <memcpy@plt>
   151d0:	mov	r5, #0
   151d4:	mov	r0, r5
   151d8:	pop	{r4, r5, r6, r7, fp, pc}
   151dc:	mov	r5, #22
   151e0:	cmp	r6, #0
   151e4:	movne	r0, #0
   151e8:	strbne	r0, [r4]
   151ec:	movne	r0, r5
   151f0:	popne	{r4, r5, r6, r7, fp, pc}
   151f4:	mov	r0, r5
   151f8:	pop	{r4, r5, r6, r7, fp, pc}
   151fc:	mov	r5, #34	; 0x22
   15200:	cmp	r6, #0
   15204:	beq	15224 <__assert_fail@plt+0x3e64>
   15208:	sub	r6, r6, #1
   1520c:	mov	r0, r4
   15210:	mov	r1, r7
   15214:	mov	r2, r6
   15218:	bl	11138 <memcpy@plt>
   1521c:	mov	r0, #0
   15220:	strb	r0, [r4, r6]
   15224:	mov	r0, r5
   15228:	pop	{r4, r5, r6, r7, fp, pc}
   1522c:	b	15230 <__assert_fail@plt+0x3e70>
   15230:	mov	r1, #0
   15234:	b	11348 <setlocale@plt>
   15238:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1523c:	add	fp, sp, #24
   15240:	sub	sp, sp, #32
   15244:	mov	r4, r2
   15248:	mov	r8, r0
   1524c:	ldr	r6, [fp, #12]
   15250:	ldr	r7, [fp, #8]
   15254:	cmp	r1, #0
   15258:	beq	15280 <__assert_fail@plt+0x3ec0>
   1525c:	mov	r5, r1
   15260:	str	r4, [sp]
   15264:	str	r3, [sp, #4]
   15268:	movw	r2, #27772	; 0x6c7c
   1526c:	movt	r2, #1
   15270:	mov	r0, r8
   15274:	mov	r1, #1
   15278:	mov	r3, r5
   1527c:	b	15298 <__assert_fail@plt+0x3ed8>
   15280:	str	r3, [sp]
   15284:	movw	r2, #27784	; 0x6c88
   15288:	movt	r2, #1
   1528c:	mov	r0, r8
   15290:	mov	r1, #1
   15294:	mov	r3, r4
   15298:	bl	11318 <__fprintf_chk@plt>
   1529c:	movw	r1, #27791	; 0x6c8f
   152a0:	movt	r1, #1
   152a4:	mov	r0, #0
   152a8:	mov	r2, #5
   152ac:	bl	11174 <dcgettext@plt>
   152b0:	mov	r3, r0
   152b4:	movw	r0, #2022	; 0x7e6
   152b8:	str	r0, [sp]
   152bc:	movw	r2, #28509	; 0x6f5d
   152c0:	movt	r2, #1
   152c4:	mov	r0, r8
   152c8:	mov	r1, #1
   152cc:	bl	11318 <__fprintf_chk@plt>
   152d0:	movw	r4, #26698	; 0x684a
   152d4:	movt	r4, #1
   152d8:	mov	r0, r4
   152dc:	mov	r1, r8
   152e0:	bl	110d8 <fputs_unlocked@plt>
   152e4:	movw	r1, #27795	; 0x6c93
   152e8:	movt	r1, #1
   152ec:	mov	r0, #0
   152f0:	mov	r2, #5
   152f4:	bl	11174 <dcgettext@plt>
   152f8:	mov	r2, r0
   152fc:	movw	r3, #27966	; 0x6d3e
   15300:	movt	r3, #1
   15304:	mov	r0, r8
   15308:	mov	r1, #1
   1530c:	bl	11318 <__fprintf_chk@plt>
   15310:	mov	r0, r4
   15314:	mov	r1, r8
   15318:	bl	110d8 <fputs_unlocked@plt>
   1531c:	cmp	r6, #9
   15320:	bhi	1535c <__assert_fail@plt+0x3f9c>
   15324:	add	r0, pc, #0
   15328:	ldr	pc, [r0, r6, lsl #2]
   1532c:	andeq	r5, r1, r4, asr r3
   15330:	andeq	r5, r1, r8, ror #6
   15334:	muleq	r1, r8, r3
   15338:	andeq	r5, r1, r0, asr #7
   1533c:	andeq	r5, r1, r8, ror #7
   15340:	andeq	r5, r1, r0, lsl r4
   15344:	andeq	r5, r1, r8, lsr r4
   15348:	andeq	r5, r1, r0, ror r4
   1534c:	andeq	r5, r1, r0, lsl r5
   15350:			; <UNDEFINED> instruction: 0x000154b8
   15354:	sub	sp, fp, #24
   15358:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1535c:	movw	r1, #28319	; 0x6e9f
   15360:	movt	r1, #1
   15364:	b	154c0 <__assert_fail@plt+0x4100>
   15368:	movw	r1, #28000	; 0x6d60
   1536c:	movt	r1, #1
   15370:	mov	r0, #0
   15374:	mov	r2, #5
   15378:	bl	11174 <dcgettext@plt>
   1537c:	mov	r2, r0
   15380:	ldr	r3, [r7]
   15384:	mov	r0, r8
   15388:	mov	r1, #1
   1538c:	sub	sp, fp, #24
   15390:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15394:	b	11318 <__fprintf_chk@plt>
   15398:	movw	r1, #28016	; 0x6d70
   1539c:	movt	r1, #1
   153a0:	mov	r0, #0
   153a4:	mov	r2, #5
   153a8:	bl	11174 <dcgettext@plt>
   153ac:	mov	r2, r0
   153b0:	ldr	r3, [r7]
   153b4:	ldr	r0, [r7, #4]
   153b8:	str	r0, [sp]
   153bc:	b	154ac <__assert_fail@plt+0x40ec>
   153c0:	movw	r1, #28039	; 0x6d87
   153c4:	movt	r1, #1
   153c8:	mov	r0, #0
   153cc:	mov	r2, #5
   153d0:	bl	11174 <dcgettext@plt>
   153d4:	mov	r2, r0
   153d8:	ldr	r3, [r7]
   153dc:	ldmib	r7, {r0, r1}
   153e0:	stm	sp, {r0, r1}
   153e4:	b	154ac <__assert_fail@plt+0x40ec>
   153e8:	movw	r1, #28067	; 0x6da3
   153ec:	movt	r1, #1
   153f0:	mov	r0, #0
   153f4:	mov	r2, #5
   153f8:	bl	11174 <dcgettext@plt>
   153fc:	mov	r2, r0
   15400:	ldr	r3, [r7]
   15404:	ldmib	r7, {r0, r1, r7}
   15408:	stm	sp, {r0, r1, r7}
   1540c:	b	154ac <__assert_fail@plt+0x40ec>
   15410:	movw	r1, #28099	; 0x6dc3
   15414:	movt	r1, #1
   15418:	mov	r0, #0
   1541c:	mov	r2, #5
   15420:	bl	11174 <dcgettext@plt>
   15424:	mov	r2, r0
   15428:	ldr	r3, [r7]
   1542c:	ldmib	r7, {r0, r1, r6, r7}
   15430:	stm	sp, {r0, r1, r6, r7}
   15434:	b	154ac <__assert_fail@plt+0x40ec>
   15438:	movw	r1, #28135	; 0x6de7
   1543c:	movt	r1, #1
   15440:	mov	r0, #0
   15444:	mov	r2, #5
   15448:	bl	11174 <dcgettext@plt>
   1544c:	mov	r2, r0
   15450:	ldr	r3, [r7]
   15454:	ldmib	r7, {r0, r1, r6}
   15458:	ldr	r5, [r7, #16]
   1545c:	ldr	r7, [r7, #20]
   15460:	stm	sp, {r0, r1, r6}
   15464:	str	r5, [sp, #12]
   15468:	str	r7, [sp, #16]
   1546c:	b	154ac <__assert_fail@plt+0x40ec>
   15470:	movw	r1, #28175	; 0x6e0f
   15474:	movt	r1, #1
   15478:	mov	r0, #0
   1547c:	mov	r2, #5
   15480:	bl	11174 <dcgettext@plt>
   15484:	mov	r2, r0
   15488:	ldr	r3, [r7]
   1548c:	ldmib	r7, {r0, r1, r6}
   15490:	ldr	r5, [r7, #16]
   15494:	ldr	r4, [r7, #20]
   15498:	ldr	r7, [r7, #24]
   1549c:	stm	sp, {r0, r1, r6}
   154a0:	str	r5, [sp, #12]
   154a4:	str	r4, [sp, #16]
   154a8:	str	r7, [sp, #20]
   154ac:	mov	r0, r8
   154b0:	mov	r1, #1
   154b4:	b	15560 <__assert_fail@plt+0x41a0>
   154b8:	movw	r1, #28267	; 0x6e6b
   154bc:	movt	r1, #1
   154c0:	mov	r0, #0
   154c4:	mov	r2, #5
   154c8:	bl	11174 <dcgettext@plt>
   154cc:	mov	ip, r0
   154d0:	ldr	r3, [r7]
   154d4:	ldr	r0, [r7, #4]
   154d8:	ldr	r1, [r7, #8]
   154dc:	ldr	r6, [r7, #12]
   154e0:	ldr	r5, [r7, #16]
   154e4:	ldr	r4, [r7, #20]
   154e8:	ldr	r2, [r7, #24]
   154ec:	ldr	lr, [r7, #28]
   154f0:	ldr	r7, [r7, #32]
   154f4:	stm	sp, {r0, r1, r6}
   154f8:	str	r5, [sp, #12]
   154fc:	str	r4, [sp, #16]
   15500:	str	r2, [sp, #20]
   15504:	str	lr, [sp, #24]
   15508:	str	r7, [sp, #28]
   1550c:	b	15554 <__assert_fail@plt+0x4194>
   15510:	movw	r1, #28219	; 0x6e3b
   15514:	movt	r1, #1
   15518:	mov	r0, #0
   1551c:	mov	r2, #5
   15520:	bl	11174 <dcgettext@plt>
   15524:	mov	ip, r0
   15528:	ldr	r3, [r7]
   1552c:	ldmib	r7, {r0, r1, r6}
   15530:	ldr	r5, [r7, #16]
   15534:	ldr	r4, [r7, #20]
   15538:	ldr	r2, [r7, #24]
   1553c:	ldr	r7, [r7, #28]
   15540:	stm	sp, {r0, r1, r6}
   15544:	str	r5, [sp, #12]
   15548:	str	r4, [sp, #16]
   1554c:	str	r2, [sp, #20]
   15550:	str	r7, [sp, #24]
   15554:	mov	r0, r8
   15558:	mov	r1, #1
   1555c:	mov	r2, ip
   15560:	bl	11318 <__fprintf_chk@plt>
   15564:	sub	sp, fp, #24
   15568:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1556c:	push	{r4, sl, fp, lr}
   15570:	add	fp, sp, #8
   15574:	sub	sp, sp, #8
   15578:	mov	lr, #0
   1557c:	ldr	ip, [fp, #8]
   15580:	ldr	r4, [ip, lr, lsl #2]
   15584:	add	lr, lr, #1
   15588:	cmp	r4, #0
   1558c:	bne	15580 <__assert_fail@plt+0x41c0>
   15590:	sub	r4, lr, #1
   15594:	str	ip, [sp]
   15598:	str	r4, [sp, #4]
   1559c:	bl	15238 <__assert_fail@plt+0x3e78>
   155a0:	sub	sp, fp, #8
   155a4:	pop	{r4, sl, fp, pc}
   155a8:	push	{r4, r5, fp, lr}
   155ac:	add	fp, sp, #8
   155b0:	sub	sp, sp, #48	; 0x30
   155b4:	mov	ip, #0
   155b8:	ldr	r4, [fp, #8]
   155bc:	add	lr, sp, #8
   155c0:	ldr	r5, [r4]
   155c4:	str	r5, [lr, ip, lsl #2]
   155c8:	cmp	r5, #0
   155cc:	beq	155e0 <__assert_fail@plt+0x4220>
   155d0:	add	ip, ip, #1
   155d4:	add	r4, r4, #4
   155d8:	cmp	ip, #10
   155dc:	bcc	155c0 <__assert_fail@plt+0x4200>
   155e0:	str	lr, [sp]
   155e4:	str	ip, [sp, #4]
   155e8:	bl	15238 <__assert_fail@plt+0x3e78>
   155ec:	sub	sp, fp, #8
   155f0:	pop	{r4, r5, fp, pc}
   155f4:	push	{fp, lr}
   155f8:	mov	fp, sp
   155fc:	sub	sp, sp, #8
   15600:	add	ip, fp, #8
   15604:	str	ip, [sp, #4]
   15608:	str	ip, [sp]
   1560c:	bl	155a8 <__assert_fail@plt+0x41e8>
   15610:	mov	sp, fp
   15614:	pop	{fp, pc}
   15618:	push	{fp, lr}
   1561c:	mov	fp, sp
   15620:	movw	r0, #33148	; 0x817c
   15624:	movt	r0, #2
   15628:	ldr	r1, [r0]
   1562c:	movw	r0, #26698	; 0x684a
   15630:	movt	r0, #1
   15634:	bl	110d8 <fputs_unlocked@plt>
   15638:	movw	r1, #28379	; 0x6edb
   1563c:	movt	r1, #1
   15640:	mov	r0, #0
   15644:	mov	r2, #5
   15648:	bl	11174 <dcgettext@plt>
   1564c:	mov	r1, r0
   15650:	movw	r2, #28399	; 0x6eef
   15654:	movt	r2, #1
   15658:	mov	r0, #1
   1565c:	bl	11300 <__printf_chk@plt>
   15660:	movw	r1, #28421	; 0x6f05
   15664:	movt	r1, #1
   15668:	mov	r0, #0
   1566c:	mov	r2, #5
   15670:	bl	11174 <dcgettext@plt>
   15674:	mov	r1, r0
   15678:	movw	r2, #26284	; 0x66ac
   1567c:	movt	r2, #1
   15680:	movw	r3, #26507	; 0x678b
   15684:	movt	r3, #1
   15688:	mov	r0, #1
   1568c:	bl	11300 <__printf_chk@plt>
   15690:	movw	r1, #28441	; 0x6f19
   15694:	movt	r1, #1
   15698:	mov	r0, #0
   1569c:	mov	r2, #5
   156a0:	bl	11174 <dcgettext@plt>
   156a4:	mov	r1, r0
   156a8:	movw	r2, #28480	; 0x6f40
   156ac:	movt	r2, #1
   156b0:	mov	r0, #1
   156b4:	pop	{fp, lr}
   156b8:	b	11300 <__printf_chk@plt>
   156bc:	b	156c0 <__assert_fail@plt+0x4300>
   156c0:	push	{r4, r5, r6, sl, fp, lr}
   156c4:	add	fp, sp, #16
   156c8:	mov	r4, r2
   156cc:	mov	r5, r1
   156d0:	mov	r6, r0
   156d4:	bl	15ee4 <__assert_fail@plt+0x4b24>
   156d8:	cmp	r0, #0
   156dc:	popne	{r4, r5, r6, sl, fp, pc}
   156e0:	cmp	r6, #0
   156e4:	beq	156f8 <__assert_fail@plt+0x4338>
   156e8:	cmp	r5, #0
   156ec:	cmpne	r4, #0
   156f0:	bne	156f8 <__assert_fail@plt+0x4338>
   156f4:	pop	{r4, r5, r6, sl, fp, pc}
   156f8:	bl	15aac <__assert_fail@plt+0x46ec>
   156fc:	push	{fp, lr}
   15700:	mov	fp, sp
   15704:	bl	15b44 <__assert_fail@plt+0x4784>
   15708:	bl	15710 <__assert_fail@plt+0x4350>
   1570c:	pop	{fp, pc}
   15710:	cmp	r0, #0
   15714:	bxne	lr
   15718:	push	{fp, lr}
   1571c:	mov	fp, sp
   15720:	bl	15aac <__assert_fail@plt+0x46ec>
   15724:	push	{fp, lr}
   15728:	mov	fp, sp
   1572c:	bl	15e18 <__assert_fail@plt+0x4a58>
   15730:	bl	15710 <__assert_fail@plt+0x4350>
   15734:	pop	{fp, pc}
   15738:	b	156fc <__assert_fail@plt+0x433c>
   1573c:	push	{r4, r5, fp, lr}
   15740:	add	fp, sp, #8
   15744:	mov	r4, r1
   15748:	mov	r5, r0
   1574c:	bl	15b74 <__assert_fail@plt+0x47b4>
   15750:	cmp	r0, #0
   15754:	popne	{r4, r5, fp, pc}
   15758:	cmp	r5, #0
   1575c:	beq	1576c <__assert_fail@plt+0x43ac>
   15760:	cmp	r4, #0
   15764:	bne	1576c <__assert_fail@plt+0x43ac>
   15768:	pop	{r4, r5, fp, pc}
   1576c:	bl	15aac <__assert_fail@plt+0x46ec>
   15770:	push	{fp, lr}
   15774:	mov	fp, sp
   15778:	bl	15e1c <__assert_fail@plt+0x4a5c>
   1577c:	bl	15710 <__assert_fail@plt+0x4350>
   15780:	pop	{fp, pc}
   15784:	push	{fp, lr}
   15788:	mov	fp, sp
   1578c:	bl	15e2c <__assert_fail@plt+0x4a6c>
   15790:	bl	15710 <__assert_fail@plt+0x4350>
   15794:	pop	{fp, pc}
   15798:	push	{fp, lr}
   1579c:	mov	fp, sp
   157a0:	mov	r2, r1
   157a4:	mov	r1, r0
   157a8:	mov	r0, #0
   157ac:	bl	156c0 <__assert_fail@plt+0x4300>
   157b0:	pop	{fp, pc}
   157b4:	mov	r2, r1
   157b8:	mov	r1, r0
   157bc:	mov	r0, #0
   157c0:	b	15784 <__assert_fail@plt+0x43c4>
   157c4:	mov	r2, #1
   157c8:	b	157cc <__assert_fail@plt+0x440c>
   157cc:	push	{r4, r5, fp, lr}
   157d0:	add	fp, sp, #8
   157d4:	mov	r4, r1
   157d8:	ldr	r5, [r1]
   157dc:	cmp	r0, #0
   157e0:	beq	157f8 <__assert_fail@plt+0x4438>
   157e4:	mov	r1, #1
   157e8:	add	r1, r1, r5, lsr #1
   157ec:	adds	r5, r5, r1
   157f0:	bcc	15810 <__assert_fail@plt+0x4450>
   157f4:	bl	15aac <__assert_fail@plt+0x46ec>
   157f8:	cmp	r5, #0
   157fc:	bne	15810 <__assert_fail@plt+0x4450>
   15800:	mov	r1, #64	; 0x40
   15804:	udiv	r5, r1, r2
   15808:	cmp	r2, #64	; 0x40
   1580c:	addhi	r5, r5, #1
   15810:	mov	r1, r5
   15814:	bl	156c0 <__assert_fail@plt+0x4300>
   15818:	str	r5, [r4]
   1581c:	pop	{r4, r5, fp, pc}
   15820:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15824:	add	fp, sp, #24
   15828:	mov	r8, r1
   1582c:	ldr	r6, [r1]
   15830:	add	r1, r6, r6, asr #1
   15834:	cmp	r1, r6
   15838:	mvnvs	r1, #-2147483648	; 0x80000000
   1583c:	cmp	r1, r3
   15840:	mov	r5, r1
   15844:	movgt	r5, r3
   15848:	cmn	r3, #1
   1584c:	movle	r5, r1
   15850:	ldr	r4, [fp, #8]
   15854:	cmn	r4, #1
   15858:	ble	15880 <__assert_fail@plt+0x44c0>
   1585c:	cmp	r4, #0
   15860:	beq	158d4 <__assert_fail@plt+0x4514>
   15864:	cmn	r5, #1
   15868:	ble	158a8 <__assert_fail@plt+0x44e8>
   1586c:	mvn	r7, #-2147483648	; 0x80000000
   15870:	udiv	r1, r7, r4
   15874:	cmp	r1, r5
   15878:	bge	158d4 <__assert_fail@plt+0x4514>
   1587c:	b	158e4 <__assert_fail@plt+0x4524>
   15880:	cmn	r5, #1
   15884:	ble	158c4 <__assert_fail@plt+0x4504>
   15888:	cmn	r4, #1
   1588c:	beq	158d4 <__assert_fail@plt+0x4514>
   15890:	mov	r1, #-2147483648	; 0x80000000
   15894:	sdiv	r1, r1, r4
   15898:	mvn	r7, #-2147483648	; 0x80000000
   1589c:	cmp	r1, r5
   158a0:	bge	158d4 <__assert_fail@plt+0x4514>
   158a4:	b	158e4 <__assert_fail@plt+0x4524>
   158a8:	beq	158d4 <__assert_fail@plt+0x4514>
   158ac:	mov	r1, #-2147483648	; 0x80000000
   158b0:	sdiv	r1, r1, r5
   158b4:	mvn	r7, #-2147483648	; 0x80000000
   158b8:	cmp	r1, r4
   158bc:	bge	158d4 <__assert_fail@plt+0x4514>
   158c0:	b	158e4 <__assert_fail@plt+0x4524>
   158c4:	mvn	r7, #-2147483648	; 0x80000000
   158c8:	sdiv	r1, r7, r4
   158cc:	cmp	r5, r1
   158d0:	blt	158e4 <__assert_fail@plt+0x4524>
   158d4:	mul	r1, r5, r4
   158d8:	mov	r7, #64	; 0x40
   158dc:	cmp	r1, #63	; 0x3f
   158e0:	bgt	158ec <__assert_fail@plt+0x452c>
   158e4:	sdiv	r5, r7, r4
   158e8:	mul	r1, r5, r4
   158ec:	cmp	r0, #0
   158f0:	moveq	r7, #0
   158f4:	streq	r7, [r8]
   158f8:	sub	r7, r5, r6
   158fc:	cmp	r7, r2
   15900:	bge	159ac <__assert_fail@plt+0x45ec>
   15904:	add	r5, r6, r2
   15908:	mov	r1, #0
   1590c:	cmp	r5, r3
   15910:	mov	r2, #0
   15914:	movwgt	r2, #1
   15918:	cmn	r3, #1
   1591c:	movwgt	r1, #1
   15920:	cmp	r5, r6
   15924:	bvs	15994 <__assert_fail@plt+0x45d4>
   15928:	ands	r1, r1, r2
   1592c:	bne	15994 <__assert_fail@plt+0x45d4>
   15930:	cmn	r4, #1
   15934:	ble	1595c <__assert_fail@plt+0x459c>
   15938:	cmp	r4, #0
   1593c:	beq	159a8 <__assert_fail@plt+0x45e8>
   15940:	cmn	r5, #1
   15944:	ble	15980 <__assert_fail@plt+0x45c0>
   15948:	mvn	r1, #-2147483648	; 0x80000000
   1594c:	udiv	r1, r1, r4
   15950:	cmp	r1, r5
   15954:	bge	159a8 <__assert_fail@plt+0x45e8>
   15958:	b	15994 <__assert_fail@plt+0x45d4>
   1595c:	cmn	r5, #1
   15960:	ble	15998 <__assert_fail@plt+0x45d8>
   15964:	cmn	r4, #1
   15968:	beq	159a8 <__assert_fail@plt+0x45e8>
   1596c:	mov	r1, #-2147483648	; 0x80000000
   15970:	sdiv	r1, r1, r4
   15974:	cmp	r1, r5
   15978:	bge	159a8 <__assert_fail@plt+0x45e8>
   1597c:	b	15994 <__assert_fail@plt+0x45d4>
   15980:	beq	159a8 <__assert_fail@plt+0x45e8>
   15984:	mov	r1, #-2147483648	; 0x80000000
   15988:	sdiv	r1, r1, r5
   1598c:	cmp	r1, r4
   15990:	bge	159a8 <__assert_fail@plt+0x45e8>
   15994:	bl	15aac <__assert_fail@plt+0x46ec>
   15998:	mvn	r1, #-2147483648	; 0x80000000
   1599c:	sdiv	r1, r1, r4
   159a0:	cmp	r5, r1
   159a4:	blt	15994 <__assert_fail@plt+0x45d4>
   159a8:	mul	r1, r5, r4
   159ac:	bl	1573c <__assert_fail@plt+0x437c>
   159b0:	str	r5, [r8]
   159b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159b8:	mov	r1, #1
   159bc:	b	159c0 <__assert_fail@plt+0x4600>
   159c0:	push	{fp, lr}
   159c4:	mov	fp, sp
   159c8:	bl	15af0 <__assert_fail@plt+0x4730>
   159cc:	bl	15710 <__assert_fail@plt+0x4350>
   159d0:	pop	{fp, pc}
   159d4:	mov	r1, #1
   159d8:	b	159dc <__assert_fail@plt+0x461c>
   159dc:	push	{fp, lr}
   159e0:	mov	fp, sp
   159e4:	bl	15e28 <__assert_fail@plt+0x4a68>
   159e8:	bl	15710 <__assert_fail@plt+0x4350>
   159ec:	pop	{fp, pc}
   159f0:	push	{r4, r5, r6, sl, fp, lr}
   159f4:	add	fp, sp, #16
   159f8:	mov	r4, r1
   159fc:	mov	r5, r0
   15a00:	mov	r0, r1
   15a04:	bl	156fc <__assert_fail@plt+0x433c>
   15a08:	mov	r6, r0
   15a0c:	mov	r1, r5
   15a10:	mov	r2, r4
   15a14:	bl	11138 <memcpy@plt>
   15a18:	mov	r0, r6
   15a1c:	pop	{r4, r5, r6, sl, fp, pc}
   15a20:	push	{r4, r5, r6, sl, fp, lr}
   15a24:	add	fp, sp, #16
   15a28:	mov	r4, r1
   15a2c:	mov	r5, r0
   15a30:	mov	r0, r1
   15a34:	bl	15724 <__assert_fail@plt+0x4364>
   15a38:	mov	r6, r0
   15a3c:	mov	r1, r5
   15a40:	mov	r2, r4
   15a44:	bl	11138 <memcpy@plt>
   15a48:	mov	r0, r6
   15a4c:	pop	{r4, r5, r6, sl, fp, pc}
   15a50:	push	{r4, r5, r6, sl, fp, lr}
   15a54:	add	fp, sp, #16
   15a58:	mov	r4, r1
   15a5c:	mov	r5, r0
   15a60:	add	r0, r1, #1
   15a64:	bl	15724 <__assert_fail@plt+0x4364>
   15a68:	mov	r6, r0
   15a6c:	mov	r0, #0
   15a70:	strb	r0, [r6, r4]
   15a74:	mov	r0, r6
   15a78:	mov	r1, r5
   15a7c:	mov	r2, r4
   15a80:	bl	11138 <memcpy@plt>
   15a84:	mov	r0, r6
   15a88:	pop	{r4, r5, r6, sl, fp, pc}
   15a8c:	push	{r4, sl, fp, lr}
   15a90:	add	fp, sp, #8
   15a94:	mov	r4, r0
   15a98:	bl	112ac <strlen@plt>
   15a9c:	add	r1, r0, #1
   15aa0:	mov	r0, r4
   15aa4:	pop	{r4, sl, fp, lr}
   15aa8:	b	159f0 <__assert_fail@plt+0x4630>
   15aac:	push	{fp, lr}
   15ab0:	mov	fp, sp
   15ab4:	movw	r0, #33060	; 0x8124
   15ab8:	movt	r0, #2
   15abc:	ldr	r4, [r0]
   15ac0:	movw	r1, #28556	; 0x6f8c
   15ac4:	movt	r1, #1
   15ac8:	mov	r0, #0
   15acc:	mov	r2, #5
   15ad0:	bl	11174 <dcgettext@plt>
   15ad4:	mov	r3, r0
   15ad8:	movw	r2, #27511	; 0x6b77
   15adc:	movt	r2, #1
   15ae0:	mov	r0, r4
   15ae4:	mov	r1, #0
   15ae8:	bl	11204 <error@plt>
   15aec:	bl	113a8 <abort@plt>
   15af0:	clz	r2, r1
   15af4:	lsr	r2, r2, #5
   15af8:	clz	r3, r0
   15afc:	lsr	r3, r3, #5
   15b00:	orrs	r2, r3, r2
   15b04:	movwne	r1, #1
   15b08:	movwne	r0, #1
   15b0c:	cmp	r1, #0
   15b10:	beq	15b40 <__assert_fail@plt+0x4780>
   15b14:	mvn	r2, #-2147483648	; 0x80000000
   15b18:	udiv	r2, r2, r1
   15b1c:	cmp	r2, r0
   15b20:	bcs	15b40 <__assert_fail@plt+0x4780>
   15b24:	push	{fp, lr}
   15b28:	mov	fp, sp
   15b2c:	bl	112c4 <__errno_location@plt>
   15b30:	mov	r1, #12
   15b34:	str	r1, [r0]
   15b38:	mov	r0, #0
   15b3c:	pop	{fp, pc}
   15b40:	b	110cc <calloc@plt>
   15b44:	cmp	r0, #0
   15b48:	movweq	r0, #1
   15b4c:	cmn	r0, #1
   15b50:	ble	15b58 <__assert_fail@plt+0x4798>
   15b54:	b	11228 <malloc@plt>
   15b58:	push	{fp, lr}
   15b5c:	mov	fp, sp
   15b60:	bl	112c4 <__errno_location@plt>
   15b64:	mov	r1, #12
   15b68:	str	r1, [r0]
   15b6c:	mov	r0, #0
   15b70:	pop	{fp, pc}
   15b74:	push	{fp, lr}
   15b78:	mov	fp, sp
   15b7c:	cmp	r0, #0
   15b80:	beq	15b9c <__assert_fail@plt+0x47dc>
   15b84:	cmp	r1, #0
   15b88:	beq	15ba8 <__assert_fail@plt+0x47e8>
   15b8c:	cmn	r1, #1
   15b90:	ble	15bb4 <__assert_fail@plt+0x47f4>
   15b94:	pop	{fp, lr}
   15b98:	b	11198 <realloc@plt>
   15b9c:	mov	r0, r1
   15ba0:	pop	{fp, lr}
   15ba4:	b	15b44 <__assert_fail@plt+0x4784>
   15ba8:	bl	1322c <__assert_fail@plt+0x1e6c>
   15bac:	mov	r0, #0
   15bb0:	pop	{fp, pc}
   15bb4:	bl	112c4 <__errno_location@plt>
   15bb8:	mov	r1, #12
   15bbc:	str	r1, [r0]
   15bc0:	mov	r0, #0
   15bc4:	pop	{fp, pc}
   15bc8:	push	{r4, r5, r6, sl, fp, lr}
   15bcc:	add	fp, sp, #16
   15bd0:	mov	r4, r0
   15bd4:	bl	111e0 <__fpending@plt>
   15bd8:	mov	r5, r0
   15bdc:	mov	r0, r4
   15be0:	bl	111ec <ferror_unlocked@plt>
   15be4:	mov	r6, r0
   15be8:	mov	r0, r4
   15bec:	bl	15c50 <__assert_fail@plt+0x4890>
   15bf0:	cmp	r6, #0
   15bf4:	beq	15c14 <__assert_fail@plt+0x4854>
   15bf8:	mvn	r4, #0
   15bfc:	cmp	r0, #0
   15c00:	bne	15c48 <__assert_fail@plt+0x4888>
   15c04:	bl	112c4 <__errno_location@plt>
   15c08:	mov	r1, #0
   15c0c:	str	r1, [r0]
   15c10:	b	15c48 <__assert_fail@plt+0x4888>
   15c14:	cmp	r0, #0
   15c18:	mov	r4, r0
   15c1c:	mvnne	r4, #0
   15c20:	cmp	r5, #0
   15c24:	bne	15c48 <__assert_fail@plt+0x4888>
   15c28:	cmp	r0, #0
   15c2c:	beq	15c48 <__assert_fail@plt+0x4888>
   15c30:	bl	112c4 <__errno_location@plt>
   15c34:	ldr	r0, [r0]
   15c38:	subs	r4, r0, #9
   15c3c:	mvnne	r4, #0
   15c40:	mov	r0, r4
   15c44:	pop	{r4, r5, r6, sl, fp, pc}
   15c48:	mov	r0, r4
   15c4c:	pop	{r4, r5, r6, sl, fp, pc}
   15c50:	push	{r4, r5, fp, lr}
   15c54:	add	fp, sp, #8
   15c58:	sub	sp, sp, #8
   15c5c:	mov	r4, r0
   15c60:	bl	1130c <fileno@plt>
   15c64:	cmn	r0, #1
   15c68:	ble	15ce0 <__assert_fail@plt+0x4920>
   15c6c:	mov	r0, r4
   15c70:	bl	1124c <__freading@plt>
   15c74:	cmp	r0, #0
   15c78:	beq	15ca4 <__assert_fail@plt+0x48e4>
   15c7c:	mov	r0, r4
   15c80:	bl	1130c <fileno@plt>
   15c84:	mov	r1, #1
   15c88:	str	r1, [sp]
   15c8c:	mov	r2, #0
   15c90:	mov	r3, #0
   15c94:	bl	111c8 <lseek64@plt>
   15c98:	and	r0, r0, r1
   15c9c:	cmn	r0, #1
   15ca0:	beq	15ce0 <__assert_fail@plt+0x4920>
   15ca4:	mov	r0, r4
   15ca8:	bl	15cf0 <__assert_fail@plt+0x4930>
   15cac:	cmp	r0, #0
   15cb0:	beq	15ce0 <__assert_fail@plt+0x4920>
   15cb4:	bl	112c4 <__errno_location@plt>
   15cb8:	ldr	r5, [r0]
   15cbc:	mov	r0, r4
   15cc0:	bl	11324 <fclose@plt>
   15cc4:	cmp	r5, #0
   15cc8:	beq	15cd8 <__assert_fail@plt+0x4918>
   15ccc:	bl	112c4 <__errno_location@plt>
   15cd0:	str	r5, [r0]
   15cd4:	mvn	r0, #0
   15cd8:	sub	sp, fp, #8
   15cdc:	pop	{r4, r5, fp, pc}
   15ce0:	mov	r0, r4
   15ce4:	sub	sp, fp, #8
   15ce8:	pop	{r4, r5, fp, lr}
   15cec:	b	11324 <fclose@plt>
   15cf0:	push	{r4, sl, fp, lr}
   15cf4:	add	fp, sp, #8
   15cf8:	mov	r4, r0
   15cfc:	cmp	r0, #0
   15d00:	beq	15d18 <__assert_fail@plt+0x4958>
   15d04:	mov	r0, r4
   15d08:	bl	1124c <__freading@plt>
   15d0c:	cmp	r0, #0
   15d10:	movne	r0, r4
   15d14:	blne	15d24 <__assert_fail@plt+0x4964>
   15d18:	mov	r0, r4
   15d1c:	pop	{r4, sl, fp, lr}
   15d20:	b	110fc <fflush@plt>
   15d24:	ldrb	r1, [r0, #1]
   15d28:	tst	r1, #1
   15d2c:	bxeq	lr
   15d30:	push	{fp, lr}
   15d34:	mov	fp, sp
   15d38:	sub	sp, sp, #8
   15d3c:	mov	r1, #1
   15d40:	str	r1, [sp]
   15d44:	mov	r2, #0
   15d48:	mov	r3, #0
   15d4c:	bl	15d58 <__assert_fail@plt+0x4998>
   15d50:	mov	sp, fp
   15d54:	pop	{fp, pc}
   15d58:	push	{r4, r5, r6, r7, fp, lr}
   15d5c:	add	fp, sp, #16
   15d60:	sub	sp, sp, #8
   15d64:	mov	r5, r3
   15d68:	mov	r6, r2
   15d6c:	mov	r4, r0
   15d70:	ldr	r0, [r0, #4]
   15d74:	ldr	r1, [r4, #8]
   15d78:	cmp	r1, r0
   15d7c:	bne	15d98 <__assert_fail@plt+0x49d8>
   15d80:	ldrd	r0, [r4, #16]
   15d84:	cmp	r1, r0
   15d88:	bne	15d98 <__assert_fail@plt+0x49d8>
   15d8c:	ldr	r0, [r4, #36]	; 0x24
   15d90:	cmp	r0, #0
   15d94:	beq	15db0 <__assert_fail@plt+0x49f0>
   15d98:	mov	r0, r4
   15d9c:	mov	r2, r6
   15da0:	mov	r3, r5
   15da4:	sub	sp, fp, #16
   15da8:	pop	{r4, r5, r6, r7, fp, lr}
   15dac:	b	11330 <fseeko64@plt>
   15db0:	ldr	r7, [fp, #8]
   15db4:	mov	r0, r4
   15db8:	bl	1130c <fileno@plt>
   15dbc:	str	r7, [sp]
   15dc0:	mov	r2, r6
   15dc4:	mov	r3, r5
   15dc8:	bl	111c8 <lseek64@plt>
   15dcc:	and	r2, r0, r1
   15dd0:	cmn	r2, #1
   15dd4:	mvneq	r0, #0
   15dd8:	subeq	sp, fp, #16
   15ddc:	popeq	{r4, r5, r6, r7, fp, pc}
   15de0:	strd	r0, [r4, #80]	; 0x50
   15de4:	ldr	r0, [r4]
   15de8:	bic	r0, r0, #16
   15dec:	str	r0, [r4]
   15df0:	mov	r0, #0
   15df4:	sub	sp, fp, #16
   15df8:	pop	{r4, r5, r6, r7, fp, pc}
   15dfc:	push	{fp, lr}
   15e00:	mov	fp, sp
   15e04:	bl	112c4 <__errno_location@plt>
   15e08:	mov	r1, #12
   15e0c:	str	r1, [r0]
   15e10:	mov	r0, #0
   15e14:	pop	{fp, pc}
   15e18:	b	15b44 <__assert_fail@plt+0x4784>
   15e1c:	cmp	r1, #0
   15e20:	orreq	r1, r1, #1
   15e24:	b	15b74 <__assert_fail@plt+0x47b4>
   15e28:	b	15af0 <__assert_fail@plt+0x4730>
   15e2c:	clz	r3, r2
   15e30:	lsr	ip, r3, #5
   15e34:	clz	r3, r1
   15e38:	lsr	r3, r3, #5
   15e3c:	orrs	r3, r3, ip
   15e40:	movwne	r1, #1
   15e44:	movwne	r2, #1
   15e48:	b	15ee4 <__assert_fail@plt+0x4b24>
   15e4c:	push	{fp, lr}
   15e50:	mov	fp, sp
   15e54:	mov	r0, #14
   15e58:	bl	11360 <nl_langinfo@plt>
   15e5c:	movw	r1, #26699	; 0x684b
   15e60:	movt	r1, #1
   15e64:	cmp	r0, #0
   15e68:	movne	r1, r0
   15e6c:	ldrb	r2, [r1]
   15e70:	movw	r0, #28573	; 0x6f9d
   15e74:	movt	r0, #1
   15e78:	cmp	r2, #0
   15e7c:	movne	r0, r1
   15e80:	pop	{fp, pc}
   15e84:	push	{r4, r5, r6, r7, fp, lr}
   15e88:	add	fp, sp, #16
   15e8c:	sub	sp, sp, #8
   15e90:	mov	r7, r2
   15e94:	mov	r4, r1
   15e98:	add	r5, sp, #4
   15e9c:	cmp	r0, #0
   15ea0:	movne	r5, r0
   15ea4:	mov	r0, r5
   15ea8:	bl	111f8 <mbrtowc@plt>
   15eac:	mov	r6, r0
   15eb0:	cmp	r7, #0
   15eb4:	beq	15ed8 <__assert_fail@plt+0x4b18>
   15eb8:	cmn	r6, #2
   15ebc:	bcc	15ed8 <__assert_fail@plt+0x4b18>
   15ec0:	mov	r0, #0
   15ec4:	bl	13254 <__assert_fail@plt+0x1e94>
   15ec8:	cmp	r0, #0
   15ecc:	ldrbeq	r0, [r4]
   15ed0:	streq	r0, [r5]
   15ed4:	moveq	r6, #1
   15ed8:	mov	r0, r6
   15edc:	sub	sp, fp, #16
   15ee0:	pop	{r4, r5, r6, r7, fp, pc}
   15ee4:	cmp	r2, #0
   15ee8:	beq	15f18 <__assert_fail@plt+0x4b58>
   15eec:	mvn	r3, #0
   15ef0:	udiv	r3, r3, r2
   15ef4:	cmp	r3, r1
   15ef8:	bcs	15f18 <__assert_fail@plt+0x4b58>
   15efc:	push	{fp, lr}
   15f00:	mov	fp, sp
   15f04:	bl	112c4 <__errno_location@plt>
   15f08:	mov	r1, #12
   15f0c:	str	r1, [r0]
   15f10:	mov	r0, #0
   15f14:	pop	{fp, pc}
   15f18:	mul	r1, r2, r1
   15f1c:	b	15b74 <__assert_fail@plt+0x47b4>
   15f20:	cmp	r3, #0
   15f24:	cmpeq	r2, #0
   15f28:	bne	15f4c <__assert_fail@plt+0x4b8c>
   15f2c:	cmp	r1, #0
   15f30:	movlt	r1, #-2147483648	; 0x80000000
   15f34:	movlt	r0, #0
   15f38:	blt	15f48 <__assert_fail@plt+0x4b88>
   15f3c:	cmpeq	r0, #0
   15f40:	mvnne	r1, #-2147483648	; 0x80000000
   15f44:	mvnne	r0, #0
   15f48:	b	15ff4 <__assert_fail@plt+0x4c34>
   15f4c:	sub	sp, sp, #8
   15f50:	push	{sp, lr}
   15f54:	cmp	r1, #0
   15f58:	blt	15f78 <__assert_fail@plt+0x4bb8>
   15f5c:	cmp	r3, #0
   15f60:	blt	15fac <__assert_fail@plt+0x4bec>
   15f64:	bl	16004 <__assert_fail@plt+0x4c44>
   15f68:	ldr	lr, [sp, #4]
   15f6c:	add	sp, sp, #8
   15f70:	pop	{r2, r3}
   15f74:	bx	lr
   15f78:	rsbs	r0, r0, #0
   15f7c:	sbc	r1, r1, r1, lsl #1
   15f80:	cmp	r3, #0
   15f84:	blt	15fd0 <__assert_fail@plt+0x4c10>
   15f88:	bl	16004 <__assert_fail@plt+0x4c44>
   15f8c:	ldr	lr, [sp, #4]
   15f90:	add	sp, sp, #8
   15f94:	pop	{r2, r3}
   15f98:	rsbs	r0, r0, #0
   15f9c:	sbc	r1, r1, r1, lsl #1
   15fa0:	rsbs	r2, r2, #0
   15fa4:	sbc	r3, r3, r3, lsl #1
   15fa8:	bx	lr
   15fac:	rsbs	r2, r2, #0
   15fb0:	sbc	r3, r3, r3, lsl #1
   15fb4:	bl	16004 <__assert_fail@plt+0x4c44>
   15fb8:	ldr	lr, [sp, #4]
   15fbc:	add	sp, sp, #8
   15fc0:	pop	{r2, r3}
   15fc4:	rsbs	r0, r0, #0
   15fc8:	sbc	r1, r1, r1, lsl #1
   15fcc:	bx	lr
   15fd0:	rsbs	r2, r2, #0
   15fd4:	sbc	r3, r3, r3, lsl #1
   15fd8:	bl	16004 <__assert_fail@plt+0x4c44>
   15fdc:	ldr	lr, [sp, #4]
   15fe0:	add	sp, sp, #8
   15fe4:	pop	{r2, r3}
   15fe8:	rsbs	r2, r2, #0
   15fec:	sbc	r3, r3, r3, lsl #1
   15ff0:	bx	lr
   15ff4:	push	{r1, lr}
   15ff8:	mov	r0, #8
   15ffc:	bl	110e4 <raise@plt>
   16000:	pop	{r1, pc}
   16004:	cmp	r1, r3
   16008:	cmpeq	r0, r2
   1600c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16010:	mov	r4, r0
   16014:	movcc	r0, #0
   16018:	mov	r5, r1
   1601c:	ldr	lr, [sp, #36]	; 0x24
   16020:	movcc	r1, r0
   16024:	bcc	16120 <__assert_fail@plt+0x4d60>
   16028:	cmp	r3, #0
   1602c:	clzeq	ip, r2
   16030:	clzne	ip, r3
   16034:	addeq	ip, ip, #32
   16038:	cmp	r5, #0
   1603c:	clzeq	r1, r4
   16040:	addeq	r1, r1, #32
   16044:	clzne	r1, r5
   16048:	sub	ip, ip, r1
   1604c:	sub	sl, ip, #32
   16050:	lsl	r9, r3, ip
   16054:	rsb	fp, ip, #32
   16058:	orr	r9, r9, r2, lsl sl
   1605c:	orr	r9, r9, r2, lsr fp
   16060:	lsl	r8, r2, ip
   16064:	cmp	r5, r9
   16068:	cmpeq	r4, r8
   1606c:	movcc	r0, #0
   16070:	movcc	r1, r0
   16074:	bcc	16090 <__assert_fail@plt+0x4cd0>
   16078:	mov	r0, #1
   1607c:	subs	r4, r4, r8
   16080:	lsl	r1, r0, sl
   16084:	orr	r1, r1, r0, lsr fp
   16088:	lsl	r0, r0, ip
   1608c:	sbc	r5, r5, r9
   16090:	cmp	ip, #0
   16094:	beq	16120 <__assert_fail@plt+0x4d60>
   16098:	lsr	r6, r8, #1
   1609c:	orr	r6, r6, r9, lsl #31
   160a0:	lsr	r7, r9, #1
   160a4:	mov	r2, ip
   160a8:	b	160cc <__assert_fail@plt+0x4d0c>
   160ac:	subs	r3, r4, r6
   160b0:	sbc	r8, r5, r7
   160b4:	adds	r3, r3, r3
   160b8:	adc	r8, r8, r8
   160bc:	adds	r4, r3, #1
   160c0:	adc	r5, r8, #0
   160c4:	subs	r2, r2, #1
   160c8:	beq	160e8 <__assert_fail@plt+0x4d28>
   160cc:	cmp	r5, r7
   160d0:	cmpeq	r4, r6
   160d4:	bcs	160ac <__assert_fail@plt+0x4cec>
   160d8:	adds	r4, r4, r4
   160dc:	adc	r5, r5, r5
   160e0:	subs	r2, r2, #1
   160e4:	bne	160cc <__assert_fail@plt+0x4d0c>
   160e8:	lsr	r3, r4, ip
   160ec:	orr	r3, r3, r5, lsl fp
   160f0:	lsr	r2, r5, ip
   160f4:	orr	r3, r3, r5, lsr sl
   160f8:	adds	r0, r0, r4
   160fc:	mov	r4, r3
   16100:	lsl	r3, r2, ip
   16104:	orr	r3, r3, r4, lsl sl
   16108:	lsl	ip, r4, ip
   1610c:	orr	r3, r3, r4, lsr fp
   16110:	adc	r1, r1, r5
   16114:	subs	r0, r0, ip
   16118:	mov	r5, r2
   1611c:	sbc	r1, r1, r3
   16120:	cmp	lr, #0
   16124:	strdne	r4, [lr]
   16128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1612c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16130:	mov	r7, r0
   16134:	ldr	r6, [pc, #72]	; 16184 <__assert_fail@plt+0x4dc4>
   16138:	ldr	r5, [pc, #72]	; 16188 <__assert_fail@plt+0x4dc8>
   1613c:	add	r6, pc, r6
   16140:	add	r5, pc, r5
   16144:	sub	r6, r6, r5
   16148:	mov	r8, r1
   1614c:	mov	r9, r2
   16150:	bl	110ac <calloc@plt-0x20>
   16154:	asrs	r6, r6, #2
   16158:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1615c:	mov	r4, #0
   16160:	add	r4, r4, #1
   16164:	ldr	r3, [r5], #4
   16168:	mov	r2, r9
   1616c:	mov	r1, r8
   16170:	mov	r0, r7
   16174:	blx	r3
   16178:	cmp	r6, r4
   1617c:	bne	16160 <__assert_fail@plt+0x4da0>
   16180:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16184:	andeq	r1, r1, r8, asr #27
   16188:	andeq	r1, r1, r0, asr #27
   1618c:	bx	lr
   16190:	ldr	r3, [pc, #12]	; 161a4 <__assert_fail@plt+0x4de4>
   16194:	mov	r1, #0
   16198:	add	r3, pc, r3
   1619c:	ldr	r2, [r3]
   161a0:	b	112dc <__cxa_atexit@plt>
   161a4:	andeq	r1, r1, r4, ror pc
   161a8:	mov	r2, r1
   161ac:	mov	r1, r0
   161b0:	mov	r0, #3
   161b4:	b	11390 <__xstat64@plt>

Disassembly of section .fini:

000161b8 <.fini>:
   161b8:	push	{r3, lr}
   161bc:	pop	{r3, pc}
