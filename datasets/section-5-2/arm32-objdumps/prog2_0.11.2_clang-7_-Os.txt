
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010720 <.init>:
   10720:	push	{r3, lr}
   10724:	bl	107e8 <_start@@Base+0x3c>
   10728:	pop	{r3, pc}

Disassembly of section .plt:

0001072c <strcmp@plt-0x14>:
   1072c:	push	{lr}		; (str lr, [sp, #-4]!)
   10730:	ldr	lr, [pc, #4]	; 1073c <strcmp@plt-0x4>
   10734:	add	lr, pc, lr
   10738:	ldr	pc, [lr, #8]!
   1073c:	andeq	r0, r1, r4, asr #17

00010740 <strcmp@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #16, 20	; 0x10000
   10748:	ldr	pc, [ip, #2244]!	; 0x8c4

0001074c <strcat@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #16, 20	; 0x10000
   10754:	ldr	pc, [ip, #2236]!	; 0x8bc

00010758 <strcpy@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #16, 20	; 0x10000
   10760:	ldr	pc, [ip, #2228]!	; 0x8b4

00010764 <puts@plt>:
   10764:	add	ip, pc, #0, 12
   10768:	add	ip, ip, #16, 20	; 0x10000
   1076c:	ldr	pc, [ip, #2220]!	; 0x8ac

00010770 <__libc_start_main@plt>:
   10770:	add	ip, pc, #0, 12
   10774:	add	ip, ip, #16, 20	; 0x10000
   10778:	ldr	pc, [ip, #2212]!	; 0x8a4

0001077c <__gmon_start__@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #16, 20	; 0x10000
   10784:	ldr	pc, [ip, #2204]!	; 0x89c

00010788 <strlen@plt>:
   10788:	add	ip, pc, #0, 12
   1078c:	add	ip, ip, #16, 20	; 0x10000
   10790:	ldr	pc, [ip, #2196]!	; 0x894

00010794 <__isoc99_scanf@plt>:
   10794:	add	ip, pc, #0, 12
   10798:	add	ip, ip, #16, 20	; 0x10000
   1079c:	ldr	pc, [ip, #2188]!	; 0x88c

000107a0 <abort@plt>:
   107a0:	add	ip, pc, #0, 12
   107a4:	add	ip, ip, #16, 20	; 0x10000
   107a8:	ldr	pc, [ip, #2180]!	; 0x884

Disassembly of section .text:

000107ac <_start@@Base>:
   107ac:	mov	fp, #0
   107b0:	mov	lr, #0
   107b4:	pop	{r1}		; (ldr r1, [sp], #4)
   107b8:	mov	r2, sp
   107bc:	push	{r2}		; (str r2, [sp, #-4]!)
   107c0:	push	{r0}		; (str r0, [sp, #-4]!)
   107c4:	ldr	ip, [pc, #16]	; 107dc <_start@@Base+0x30>
   107c8:	push	{ip}		; (str ip, [sp, #-4]!)
   107cc:	ldr	r0, [pc, #12]	; 107e0 <_start@@Base+0x34>
   107d0:	ldr	r3, [pc, #12]	; 107e4 <_start@@Base+0x38>
   107d4:	bl	10770 <__libc_start_main@plt>
   107d8:	bl	107a0 <abort@plt>
   107dc:	andeq	r0, r1, ip, lsl #22
   107e0:	muleq	r1, ip, r8
   107e4:	andeq	r0, r1, ip, lsr #21
   107e8:	ldr	r3, [pc, #20]	; 10804 <_start@@Base+0x58>
   107ec:	ldr	r2, [pc, #20]	; 10808 <_start@@Base+0x5c>
   107f0:	add	r3, pc, r3
   107f4:	ldr	r2, [r3, r2]
   107f8:	cmp	r2, #0
   107fc:	bxeq	lr
   10800:	b	1077c <__gmon_start__@plt>
   10804:	andeq	r0, r1, r8, lsl #16
   10808:	andeq	r0, r0, r0, lsr r0
   1080c:	ldr	r0, [pc, #24]	; 1082c <_start@@Base+0x80>
   10810:	ldr	r3, [pc, #24]	; 10830 <_start@@Base+0x84>
   10814:	cmp	r3, r0
   10818:	bxeq	lr
   1081c:	ldr	r3, [pc, #16]	; 10834 <_start@@Base+0x88>
   10820:	cmp	r3, #0
   10824:	bxeq	lr
   10828:	bx	r3
   1082c:	andeq	r1, r2, ip, lsr r0
   10830:	andeq	r1, r2, ip, lsr r0
   10834:	andeq	r0, r0, r0
   10838:	ldr	r0, [pc, #36]	; 10864 <_start@@Base+0xb8>
   1083c:	ldr	r1, [pc, #36]	; 10868 <_start@@Base+0xbc>
   10840:	sub	r1, r1, r0
   10844:	asr	r1, r1, #2
   10848:	add	r1, r1, r1, lsr #31
   1084c:	asrs	r1, r1, #1
   10850:	bxeq	lr
   10854:	ldr	r3, [pc, #16]	; 1086c <_start@@Base+0xc0>
   10858:	cmp	r3, #0
   1085c:	bxeq	lr
   10860:	bx	r3
   10864:	andeq	r1, r2, ip, lsr r0
   10868:	andeq	r1, r2, ip, lsr r0
   1086c:	andeq	r0, r0, r0
   10870:	push	{r4, lr}
   10874:	ldr	r4, [pc, #24]	; 10894 <_start@@Base+0xe8>
   10878:	ldrb	r3, [r4]
   1087c:	cmp	r3, #0
   10880:	popne	{r4, pc}
   10884:	bl	1080c <_start@@Base+0x60>
   10888:	mov	r3, #1
   1088c:	strb	r3, [r4]
   10890:	pop	{r4, pc}
   10894:	andeq	r1, r2, ip, lsr r0
   10898:	b	10838 <_start@@Base+0x8c>

0001089c <main@@Base>:
   1089c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108a0:	add	fp, sp, #28
   108a4:	sub	sp, sp, #92	; 0x5c
   108a8:	vmov.i32	q8, #0	; 0x00000000
   108ac:	mov	r0, #10
   108b0:	add	r1, sp, #56	; 0x38
   108b4:	vst1.64	{d16-d17}, [r1], r0
   108b8:	movw	r0, #2844	; 0xb1c
   108bc:	vst1.16	{d16-d17}, [r1]
   108c0:	movt	r0, #1
   108c4:	sub	r1, fp, #38	; 0x26
   108c8:	bl	10794 <__isoc99_scanf@plt>
   108cc:	ldrb	r0, [fp, #-38]	; 0xffffffda
   108d0:	cmp	r0, #46	; 0x2e
   108d4:	beq	10984 <main@@Base+0xe8>
   108d8:	movw	sl, #2844	; 0xb1c
   108dc:	add	r6, sp, #56	; 0x38
   108e0:	sub	r9, fp, #38	; 0x26
   108e4:	add	r4, sp, #30
   108e8:	add	r5, sp, #4
   108ec:	movt	sl, #1
   108f0:	movw	r0, #2847	; 0xb1f
   108f4:	mov	r1, sp
   108f8:	movt	r0, #1
   108fc:	bl	10794 <__isoc99_scanf@plt>
   10900:	ldr	r7, [sp]
   10904:	mov	r0, #0
   10908:	strb	r0, [sp, #56]	; 0x38
   1090c:	cmp	r7, #1
   10910:	blt	10928 <main@@Base+0x8c>
   10914:	mov	r0, r6
   10918:	mov	r1, r9
   1091c:	bl	1074c <strcat@plt>
   10920:	subs	r7, r7, #1
   10924:	bne	10914 <main@@Base+0x78>
   10928:	mov	r0, r6
   1092c:	mov	r1, r4
   10930:	bl	109cc <R_ShiftString@@Base>
   10934:	mov	r0, r6
   10938:	mov	r1, r4
   1093c:	bl	10740 <strcmp@plt>
   10940:	mov	r8, r0
   10944:	mov	r0, r6
   10948:	bl	10764 <puts@plt>
   1094c:	mov	r0, r5
   10950:	mov	r1, r6
   10954:	bl	10758 <strcpy@plt>
   10958:	mov	r0, r5
   1095c:	mov	r1, r6
   10960:	bl	10a3c <L_ShiftString@@Base>
   10964:	cmp	r8, #0
   10968:	bne	10934 <main@@Base+0x98>
   1096c:	mov	r0, sl
   10970:	mov	r1, r9
   10974:	bl	10794 <__isoc99_scanf@plt>
   10978:	ldrb	r0, [fp, #-38]	; 0xffffffda
   1097c:	cmp	r0, #46	; 0x2e
   10980:	bne	108f0 <main@@Base+0x54>
   10984:	mov	r0, #0
   10988:	sub	sp, fp, #28
   1098c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010990 <StringSet@@Base>:
   10990:	push	{r4, r5, r6, sl, fp, lr}
   10994:	add	fp, sp, #16
   10998:	mov	r6, r0
   1099c:	mov	r0, #0
   109a0:	cmp	r2, #1
   109a4:	strb	r0, [r1]
   109a8:	poplt	{r4, r5, r6, sl, fp, pc}
   109ac:	mov	r4, r2
   109b0:	mov	r5, r1
   109b4:	mov	r0, r5
   109b8:	mov	r1, r6
   109bc:	bl	1074c <strcat@plt>
   109c0:	subs	r4, r4, #1
   109c4:	bne	109b4 <StringSet@@Base+0x24>
   109c8:	pop	{r4, r5, r6, sl, fp, pc}

000109cc <R_ShiftString@@Base>:
   109cc:	push	{r4, r5, r6, r7, fp, lr}
   109d0:	add	fp, sp, #16
   109d4:	mov	r4, r1
   109d8:	mov	r5, r0
   109dc:	bl	10788 <strlen@plt>
   109e0:	add	r0, r5, r0
   109e4:	ldrb	r0, [r0, #-1]
   109e8:	strb	r0, [r4]
   109ec:	mov	r0, r5
   109f0:	bl	10788 <strlen@plt>
   109f4:	mov	r1, #1
   109f8:	cmp	r0, #2
   109fc:	bcc	10a30 <R_ShiftString@@Base+0x64>
   10a00:	add	r6, r4, #1
   10a04:	mov	r7, #0
   10a08:	ldrb	r0, [r5, r7]
   10a0c:	strb	r0, [r6, r7]
   10a10:	mov	r0, r5
   10a14:	bl	10788 <strlen@plt>
   10a18:	add	r2, r7, #2
   10a1c:	add	r1, r7, #1
   10a20:	cmp	r2, r0
   10a24:	mov	r7, r1
   10a28:	bcc	10a08 <R_ShiftString@@Base+0x3c>
   10a2c:	add	r1, r1, #1
   10a30:	mov	r0, #0
   10a34:	strb	r0, [r4, r1]
   10a38:	pop	{r4, r5, r6, r7, fp, pc}

00010a3c <L_ShiftString@@Base>:
   10a3c:	push	{r4, r5, r6, sl, fp, lr}
   10a40:	add	fp, sp, #16
   10a44:	ldrb	r6, [r0]
   10a48:	mov	r4, r1
   10a4c:	mov	r5, r0
   10a50:	bl	10788 <strlen@plt>
   10a54:	add	r0, r4, r0
   10a58:	strb	r6, [r0, #-1]
   10a5c:	mov	r0, r5
   10a60:	bl	10788 <strlen@plt>
   10a64:	mov	r1, #1
   10a68:	cmp	r0, #2
   10a6c:	bcc	10aa0 <L_ShiftString@@Base+0x64>
   10a70:	mov	r6, #0
   10a74:	add	r0, r5, r6
   10a78:	ldrb	r0, [r0, #1]
   10a7c:	strb	r0, [r4, r6]
   10a80:	mov	r0, r5
   10a84:	bl	10788 <strlen@plt>
   10a88:	add	r2, r6, #2
   10a8c:	add	r1, r6, #1
   10a90:	cmp	r2, r0
   10a94:	mov	r6, r1
   10a98:	bcc	10a74 <L_ShiftString@@Base+0x38>
   10a9c:	add	r1, r1, #1
   10aa0:	mov	r0, #0
   10aa4:	strb	r0, [r4, r1]
   10aa8:	pop	{r4, r5, r6, sl, fp, pc}

00010aac <__libc_csu_init@@Base>:
   10aac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ab0:	mov	r7, r0
   10ab4:	ldr	r6, [pc, #72]	; 10b04 <__libc_csu_init@@Base+0x58>
   10ab8:	ldr	r5, [pc, #72]	; 10b08 <__libc_csu_init@@Base+0x5c>
   10abc:	add	r6, pc, r6
   10ac0:	add	r5, pc, r5
   10ac4:	sub	r6, r6, r5
   10ac8:	mov	r8, r1
   10acc:	mov	r9, r2
   10ad0:	bl	10720 <strcmp@plt-0x20>
   10ad4:	asrs	r6, r6, #2
   10ad8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10adc:	mov	r4, #0
   10ae0:	add	r4, r4, #1
   10ae4:	ldr	r3, [r5], #4
   10ae8:	mov	r2, r9
   10aec:	mov	r1, r8
   10af0:	mov	r0, r7
   10af4:	blx	r3
   10af8:	cmp	r6, r4
   10afc:	bne	10ae0 <__libc_csu_init@@Base+0x34>
   10b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b04:	andeq	r0, r1, r8, asr #8
   10b08:	andeq	r0, r1, r0, asr #8

00010b0c <__libc_csu_fini@@Base>:
   10b0c:	bx	lr

Disassembly of section .fini:

00010b10 <.fini>:
   10b10:	push	{r3, lr}
   10b14:	pop	{r3, pc}
