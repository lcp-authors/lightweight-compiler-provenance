
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

000109b0 <.init>:
   109b0:	push	{r3, lr}
   109b4:	bl	10bbc <__assert_fail@plt+0x48>
   109b8:	pop	{r3, pc}

Disassembly of section .plt:

000109bc <calloc@plt-0x14>:
   109bc:	push	{lr}		; (str lr, [sp, #-4]!)
   109c0:	ldr	lr, [pc, #4]	; 109cc <calloc@plt-0x4>
   109c4:	add	lr, pc, lr
   109c8:	ldr	pc, [lr, #8]!
   109cc:	andeq	r7, r1, r4, lsr r6

000109d0 <calloc@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #94208	; 0x17000
   109d8:	ldr	pc, [ip, #1588]!	; 0x634

000109dc <strcmp@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #94208	; 0x17000
   109e4:	ldr	pc, [ip, #1580]!	; 0x62c

000109e8 <strtol@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #94208	; 0x17000
   109f0:	ldr	pc, [ip, #1572]!	; 0x624

000109f4 <fopen@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #94208	; 0x17000
   109fc:	ldr	pc, [ip, #1564]!	; 0x61c

00010a00 <free@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #94208	; 0x17000
   10a08:	ldr	pc, [ip, #1556]!	; 0x614

00010a0c <utf8proc_get_property@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #94208	; 0x17000
   10a14:	ldr	pc, [ip, #1548]!	; 0x60c

00010a18 <fgets@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #94208	; 0x17000
   10a20:	ldr	pc, [ip, #1540]!	; 0x604

00010a24 <utf8proc_encode_char@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #94208	; 0x17000
   10a2c:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a30 <strdup@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #94208	; 0x17000
   10a38:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a3c <rewind@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #94208	; 0x17000
   10a44:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a48 <unlink@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #94208	; 0x17000
   10a50:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a54 <utf8proc_tolower@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #94208	; 0x17000
   10a5c:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a60 <__xstat@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #94208	; 0x17000
   10a68:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a6c <fwrite@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #94208	; 0x17000
   10a74:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a78 <fread@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #94208	; 0x17000
   10a80:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a84 <utf8proc_iterate@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #94208	; 0x17000
   10a8c:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a90 <malloc@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #94208	; 0x17000
   10a98:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a9c <__libc_start_main@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #94208	; 0x17000
   10aa4:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aa8 <__sysv_signal@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #94208	; 0x17000
   10ab0:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ab4 <__gmon_start__@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #94208	; 0x17000
   10abc:	ldr	pc, [ip, #1436]!	; 0x59c

00010ac0 <getpid@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #94208	; 0x17000
   10ac8:	ldr	pc, [ip, #1428]!	; 0x594

00010acc <exit@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #94208	; 0x17000
   10ad4:	ldr	pc, [ip, #1420]!	; 0x58c

00010ad8 <utf8proc_category@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #94208	; 0x17000
   10ae0:	ldr	pc, [ip, #1412]!	; 0x584

00010ae4 <strlen@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #94208	; 0x17000
   10aec:	ldr	pc, [ip, #1404]!	; 0x57c

00010af0 <fprintf@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #94208	; 0x17000
   10af8:	ldr	pc, [ip, #1396]!	; 0x574

00010afc <__isoc99_sscanf@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #94208	; 0x17000
   10b04:	ldr	pc, [ip, #1388]!	; 0x56c

00010b08 <fclose@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #94208	; 0x17000
   10b10:	ldr	pc, [ip, #1380]!	; 0x564

00010b14 <utf8proc_NFC@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #94208	; 0x17000
   10b1c:	ldr	pc, [ip, #1372]!	; 0x55c

00010b20 <fputc@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #94208	; 0x17000
   10b28:	ldr	pc, [ip, #1364]!	; 0x554

00010b2c <sprintf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1356]!	; 0x54c

00010b38 <utf8proc_errmsg@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1348]!	; 0x544

00010b44 <fputs@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1340]!	; 0x53c

00010b50 <strncmp@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1332]!	; 0x534

00010b5c <abort@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1324]!	; 0x52c

00010b68 <getc@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1316]!	; 0x524

00010b74 <__assert_fail@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1308]!	; 0x51c

Disassembly of section .text:

00010b80 <error@@Base-0x2380>:
   10b80:	mov	fp, #0
   10b84:	mov	lr, #0
   10b88:	pop	{r1}		; (ldr r1, [sp], #4)
   10b8c:	mov	r2, sp
   10b90:	push	{r2}		; (str r2, [sp, #-4]!)
   10b94:	push	{r0}		; (str r0, [sp, #-4]!)
   10b98:	ldr	ip, [pc, #16]	; 10bb0 <__assert_fail@plt+0x3c>
   10b9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10ba0:	ldr	r0, [pc, #12]	; 10bb4 <__assert_fail@plt+0x40>
   10ba4:	ldr	r3, [pc, #12]	; 10bb8 <__assert_fail@plt+0x44>
   10ba8:	bl	10a9c <__libc_start_main@plt>
   10bac:	bl	10b5c <abort@plt>
   10bb0:	andeq	r3, r1, r0, asr #23
   10bb4:	andeq	r1, r1, r0, asr #11
   10bb8:	andeq	r3, r1, r0, ror #22
   10bbc:	ldr	r3, [pc, #20]	; 10bd8 <__assert_fail@plt+0x64>
   10bc0:	ldr	r2, [pc, #20]	; 10bdc <__assert_fail@plt+0x68>
   10bc4:	add	r3, pc, r3
   10bc8:	ldr	r2, [r3, r2]
   10bcc:	cmp	r2, #0
   10bd0:	bxeq	lr
   10bd4:	b	10ab4 <__gmon_start__@plt>
   10bd8:	andeq	r7, r1, r4, lsr r4
   10bdc:	muleq	r0, ip, r0
   10be0:	ldr	r0, [pc, #24]	; 10c00 <__assert_fail@plt+0x8c>
   10be4:	ldr	r3, [pc, #24]	; 10c04 <__assert_fail@plt+0x90>
   10be8:	cmp	r3, r0
   10bec:	bxeq	lr
   10bf0:	ldr	r3, [pc, #16]	; 10c08 <__assert_fail@plt+0x94>
   10bf4:	cmp	r3, #0
   10bf8:	bxeq	lr
   10bfc:	bx	r3
   10c00:	andeq	r8, r2, r0, ror #1
   10c04:	andeq	r8, r2, r0, ror #1
   10c08:	andeq	r0, r0, r0
   10c0c:	ldr	r0, [pc, #36]	; 10c38 <__assert_fail@plt+0xc4>
   10c10:	ldr	r1, [pc, #36]	; 10c3c <__assert_fail@plt+0xc8>
   10c14:	sub	r1, r1, r0
   10c18:	asr	r1, r1, #2
   10c1c:	add	r1, r1, r1, lsr #31
   10c20:	asrs	r1, r1, #1
   10c24:	bxeq	lr
   10c28:	ldr	r3, [pc, #16]	; 10c40 <__assert_fail@plt+0xcc>
   10c2c:	cmp	r3, #0
   10c30:	bxeq	lr
   10c34:	bx	r3
   10c38:	andeq	r8, r2, r0, ror #1
   10c3c:	andeq	r8, r2, r0, ror #1
   10c40:	andeq	r0, r0, r0
   10c44:	push	{r4, lr}
   10c48:	ldr	r4, [pc, #24]	; 10c68 <__assert_fail@plt+0xf4>
   10c4c:	ldrb	r3, [r4]
   10c50:	cmp	r3, #0
   10c54:	popne	{r4, pc}
   10c58:	bl	10be0 <__assert_fail@plt+0x6c>
   10c5c:	mov	r3, #1
   10c60:	strb	r3, [r4]
   10c64:	pop	{r4, pc}
   10c68:	strdeq	r8, [r2], -r0
   10c6c:	b	10c0c <__assert_fail@plt+0x98>
   10c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10c74:	strd	r6, [sp, #8]
   10c78:	str	r8, [sp, #16]
   10c7c:	str	lr, [sp, #20]
   10c80:	mov	r4, r0
   10c84:	mov	r5, r1
   10c88:	movw	r3, #41260	; 0xa12c
   10c8c:	movt	r3, #2
   10c90:	add	r6, r3, r0, lsl #4
   10c94:	ldr	r0, [r6, #12]
   10c98:	mov	r1, #4
   10c9c:	add	r0, r0, #1
   10ca0:	bl	12f40 <error@@Base+0x40>
   10ca4:	ldr	r3, [r6, #12]
   10ca8:	cmp	r3, #0
   10cac:	ble	10d18 <__assert_fail@plt+0x1a4>
   10cb0:	mov	r1, #0
   10cb4:	mov	r3, r1
   10cb8:	movw	lr, #948	; 0x3b4
   10cbc:	movt	lr, #3
   10cc0:	rsb	r6, r4, #1
   10cc4:	movw	ip, #41260	; 0xa12c
   10cc8:	movt	ip, #2
   10ccc:	add	ip, ip, r4, lsl #4
   10cd0:	ldr	r2, [lr, r4, lsl #2]
   10cd4:	add	r7, r2, r3, lsl #3
   10cd8:	ldr	r2, [r2, r3, lsl #3]
   10cdc:	add	r2, r2, r6
   10ce0:	ldrb	r2, [r2, #12]
   10ce4:	cmp	r2, #0
   10ce8:	strne	r7, [r0, r1, lsl #2]
   10cec:	addne	r1, r1, #1
   10cf0:	add	r3, r3, #1
   10cf4:	ldr	r2, [ip, #12]
   10cf8:	cmp	r2, r3
   10cfc:	bgt	10cd0 <__assert_fail@plt+0x15c>
   10d00:	str	r1, [r5]
   10d04:	ldrd	r4, [sp]
   10d08:	ldrd	r6, [sp, #8]
   10d0c:	ldr	r8, [sp, #16]
   10d10:	add	sp, sp, #20
   10d14:	pop	{pc}		; (ldr pc, [sp], #4)
   10d18:	mov	r1, #0
   10d1c:	b	10d00 <__assert_fail@plt+0x18c>
   10d20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d24:	strd	r6, [sp, #8]
   10d28:	strd	r8, [sp, #16]
   10d2c:	strd	sl, [sp, #24]
   10d30:	str	lr, [sp, #32]
   10d34:	sub	sp, sp, #20
   10d38:	str	r0, [sp, #4]
   10d3c:	movw	fp, #41260	; 0xa12c
   10d40:	movt	fp, #2
   10d44:	movw	r7, #948	; 0x3b4
   10d48:	movt	r7, #3
   10d4c:	mov	sl, #0
   10d50:	movw	r3, #41216	; 0xa100
   10d54:	movt	r3, #2
   10d58:	str	r3, [sp, #8]
   10d5c:	movw	r3, #32936	; 0x80a8
   10d60:	movt	r3, #2
   10d64:	str	r3, [sp, #12]
   10d68:	movw	r3, #41308	; 0xa15c
   10d6c:	movt	r3, #2
   10d70:	str	r3, [sp]
   10d74:	b	10dc8 <__assert_fail@plt+0x254>
   10d78:	movw	r0, #15312	; 0x3bd0
   10d7c:	movt	r0, #1
   10d80:	bl	12f00 <error@@Base>
   10d84:	mov	r1, r4
   10d88:	mov	r0, fp
   10d8c:	bl	12734 <__assert_fail@plt+0x1bc0>
   10d90:	ldr	r0, [fp, #12]
   10d94:	mov	r1, #8
   10d98:	add	r0, r0, #1
   10d9c:	bl	12f40 <error@@Base+0x40>
   10da0:	str	r0, [r7]
   10da4:	ldr	r4, [fp]
   10da8:	cmp	r4, #0
   10dac:	bne	10e2c <__assert_fail@plt+0x2b8>
   10db0:	add	r3, sl, #1
   10db4:	cmp	r3, #1
   10db8:	bgt	10e94 <__assert_fail@plt+0x320>
   10dbc:	add	sl, sl, #1
   10dc0:	add	fp, fp, #16
   10dc4:	add	r7, r7, #4
   10dc8:	mov	r9, sl
   10dcc:	ldr	r3, [sp, #8]
   10dd0:	add	r4, r3, sl, lsl #4
   10dd4:	ldr	r5, [sp, #12]
   10dd8:	mov	r2, r5
   10ddc:	ldr	r3, [sp, #4]
   10de0:	ldr	r1, [r3, sl, lsl #2]
   10de4:	mov	r0, r4
   10de8:	bl	13344 <error@@Base+0x444>
   10dec:	cmp	sl, #0
   10df0:	bne	10d84 <__assert_fail@plt+0x210>
   10df4:	ldrb	r3, [r5, #11]
   10df8:	cmp	r3, #0
   10dfc:	bne	10d78 <__assert_fail@plt+0x204>
   10e00:	mov	r1, r4
   10e04:	mov	r0, fp
   10e08:	bl	12734 <__assert_fail@plt+0x1bc0>
   10e0c:	ldr	r0, [fp, #12]
   10e10:	mov	r1, #8
   10e14:	add	r0, r0, #1
   10e18:	bl	12f40 <error@@Base+0x40>
   10e1c:	str	r0, [r7]
   10e20:	ldr	r4, [fp]
   10e24:	cmp	r4, #0
   10e28:	beq	10dbc <__assert_fail@plt+0x248>
   10e2c:	mov	r6, #0
   10e30:	mov	r8, #1
   10e34:	b	10e58 <__assert_fail@plt+0x2e4>
   10e38:	add	r3, r5, r9
   10e3c:	strb	r8, [r3, #12]
   10e40:	ldr	r3, [r7]
   10e44:	str	r5, [r3, r6]
   10e48:	ldr	r4, [r4, #4]
   10e4c:	add	r6, r6, #8
   10e50:	cmp	r4, #0
   10e54:	beq	10db0 <__assert_fail@plt+0x23c>
   10e58:	ldr	r1, [r4, #8]
   10e5c:	ldr	r0, [sp]
   10e60:	bl	123e8 <__assert_fail@plt+0x1874>
   10e64:	subs	r5, r0, #0
   10e68:	bne	10e38 <__assert_fail@plt+0x2c4>
   10e6c:	mov	r1, #16
   10e70:	mov	r0, r8
   10e74:	bl	12f40 <error@@Base+0x40>
   10e78:	mov	r5, r0
   10e7c:	ldr	r3, [r4, #8]
   10e80:	str	r3, [r0, #8]
   10e84:	mov	r1, r0
   10e88:	ldr	r0, [sp]
   10e8c:	bl	12444 <__assert_fail@plt+0x18d0>
   10e90:	b	10e38 <__assert_fail@plt+0x2c4>
   10e94:	movw	r4, #940	; 0x3ac
   10e98:	movt	r4, #3
   10e9c:	mov	r1, r4
   10ea0:	mov	r0, #0
   10ea4:	bl	10c70 <__assert_fail@plt+0xfc>
   10ea8:	movw	r3, #936	; 0x3a8
   10eac:	movt	r3, #3
   10eb0:	str	r0, [r3]
   10eb4:	ldr	r3, [r4]
   10eb8:	cmp	r3, #65536	; 0x10000
   10ebc:	bge	10ef8 <__assert_fail@plt+0x384>
   10ec0:	movw	r1, #41252	; 0xa124
   10ec4:	movt	r1, #2
   10ec8:	mov	r0, #1
   10ecc:	bl	10c70 <__assert_fail@plt+0xfc>
   10ed0:	movw	r3, #41248	; 0xa120
   10ed4:	movt	r3, #2
   10ed8:	str	r0, [r3]
   10edc:	add	sp, sp, #20
   10ee0:	ldrd	r4, [sp]
   10ee4:	ldrd	r6, [sp, #8]
   10ee8:	ldrd	r8, [sp, #16]
   10eec:	ldrd	sl, [sp, #24]
   10ef0:	add	sp, sp, #32
   10ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   10ef8:	movw	r0, #15340	; 0x3bec
   10efc:	movt	r0, #1
   10f00:	bl	12f00 <error@@Base>
   10f04:	cmp	r1, #0
   10f08:	beq	10f70 <__assert_fail@plt+0x3fc>
   10f0c:	ldr	r3, [r1, #8]
   10f10:	rsb	ip, r3, #0
   10f14:	cmp	ip, r0
   10f18:	bge	10f7c <__assert_fail@plt+0x408>
   10f1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f20:	sub	ip, r0, #1
   10f24:	add	r3, r3, ip
   10f28:	ldr	lr, [r1, #12]
   10f2c:	bic	r3, r3, #1
   10f30:	ldrh	r3, [lr, r3]
   10f34:	str	ip, [r2]
   10f38:	ldr	lr, [r1, #8]
   10f3c:	cmp	lr, r0
   10f40:	ble	10f68 <__assert_fail@plt+0x3f4>
   10f44:	add	ip, r0, #1
   10f48:	add	lr, lr, ip
   10f4c:	ldr	r1, [r1, #12]
   10f50:	bic	lr, lr, #1
   10f54:	ldrh	r1, [r1, lr]
   10f58:	add	r1, r1, #1
   10f5c:	cmp	r3, r1
   10f60:	movle	r3, r1
   10f64:	strle	ip, [r2]
   10f68:	mov	r0, r3
   10f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   10f70:	mov	r3, #0
   10f74:	mov	r0, r3
   10f78:	bx	lr
   10f7c:	cmp	r3, r0
   10f80:	movle	r3, #0
   10f84:	ble	10f74 <__assert_fail@plt+0x400>
   10f88:	add	ip, r0, #1
   10f8c:	add	r3, r3, ip
   10f90:	ldr	r1, [r1, #12]
   10f94:	bic	r3, r3, #1
   10f98:	ldrh	r3, [r1, r3]
   10f9c:	add	r3, r3, #1
   10fa0:	str	ip, [r2]
   10fa4:	b	10f74 <__assert_fail@plt+0x400>
   10fa8:	strd	r4, [sp, #-20]!	; 0xffffffec
   10fac:	strd	r6, [sp, #8]
   10fb0:	str	lr, [sp, #16]
   10fb4:	sub	sp, sp, #12
   10fb8:	mov	r4, r0
   10fbc:	mov	r5, r1
   10fc0:	add	r2, sp, #4
   10fc4:	ldr	r1, [r1]
   10fc8:	bl	10f04 <__assert_fail@plt+0x390>
   10fcc:	add	r6, r4, r0
   10fd0:	movw	r3, #940	; 0x3ac
   10fd4:	movt	r3, #3
   10fd8:	ldr	r7, [r3]
   10fdc:	cmp	r0, r7
   10fe0:	bge	11070 <__assert_fail@plt+0x4fc>
   10fe4:	movw	r3, #41252	; 0xa124
   10fe8:	movt	r3, #2
   10fec:	ldr	lr, [r3]
   10ff0:	cmp	r6, lr
   10ff4:	bge	110ec <__assert_fail@plt+0x578>
   10ff8:	movw	r3, #936	; 0x3a8
   10ffc:	movt	r3, #3
   11000:	ldr	ip, [r3]
   11004:	add	r2, ip, r0, lsl #2
   11008:	movw	r3, #41248	; 0xa120
   1100c:	movt	r3, #2
   11010:	ldr	r1, [r3]
   11014:	add	r3, r1, r6, lsl #2
   11018:	ldr	ip, [ip, r0, lsl #2]
   1101c:	ldr	r1, [r1, r6, lsl #2]
   11020:	ldr	ip, [ip]
   11024:	ldr	r1, [r1]
   11028:	cmp	ip, r1
   1102c:	bne	110e4 <__assert_fail@plt+0x570>
   11030:	add	lr, lr, r0
   11034:	sub	lr, lr, r6
   11038:	add	r0, r0, #1
   1103c:	add	r6, r4, r0
   11040:	cmp	r0, r7
   11044:	beq	11080 <__assert_fail@plt+0x50c>
   11048:	cmp	r0, lr
   1104c:	beq	11094 <__assert_fail@plt+0x520>
   11050:	ldr	ip, [r2, #4]!
   11054:	ldr	r1, [r3, #4]!
   11058:	ldr	ip, [ip]
   1105c:	ldr	r1, [r1]
   11060:	cmp	ip, r1
   11064:	beq	11038 <__assert_fail@plt+0x4c4>
   11068:	mov	lr, r0
   1106c:	b	11094 <__assert_fail@plt+0x520>
   11070:	cmp	r0, r7
   11074:	movne	lr, r0
   11078:	bne	11094 <__assert_fail@plt+0x520>
   1107c:	mov	r7, r0
   11080:	movw	r3, #944	; 0x3b0
   11084:	movt	r3, #3
   11088:	add	r2, r4, #1
   1108c:	str	r2, [r3]
   11090:	mov	lr, r7
   11094:	movw	r3, #41252	; 0xa124
   11098:	movt	r3, #2
   1109c:	ldr	r3, [r3]
   110a0:	cmp	r3, r6
   110a4:	beq	110d0 <__assert_fail@plt+0x55c>
   110a8:	ldr	r3, [r5, #8]
   110ac:	add	r4, r4, r3
   110b0:	ldr	r3, [r5, #12]
   110b4:	bic	r4, r4, #1
   110b8:	strh	lr, [r3, r4]
   110bc:	add	sp, sp, #12
   110c0:	ldrd	r4, [sp]
   110c4:	ldrd	r6, [sp, #8]
   110c8:	add	sp, sp, #16
   110cc:	pop	{pc}		; (ldr pc, [sp], #4)
   110d0:	movw	r3, #932	; 0x3a4
   110d4:	movt	r3, #3
   110d8:	sub	r2, r4, #1
   110dc:	str	r2, [r3]
   110e0:	b	110a8 <__assert_fail@plt+0x534>
   110e4:	mov	lr, r0
   110e8:	b	110a8 <__assert_fail@plt+0x534>
   110ec:	mov	lr, r0
   110f0:	b	11094 <__assert_fail@plt+0x520>
   110f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   110f8:	strd	r6, [sp, #8]
   110fc:	strd	r8, [sp, #16]
   11100:	str	sl, [sp, #24]
   11104:	str	lr, [sp, #28]
   11108:	movw	r3, #944	; 0x3b0
   1110c:	movt	r3, #3
   11110:	movw	r2, #940	; 0x3ac
   11114:	movt	r2, #3
   11118:	ldr	r2, [r2]
   1111c:	rsb	r2, r2, #0
   11120:	str	r2, [r3]
   11124:	movw	r3, #932	; 0x3a4
   11128:	movt	r3, #3
   1112c:	movw	r2, #41252	; 0xa124
   11130:	movt	r2, #2
   11134:	ldr	r2, [r2]
   11138:	str	r2, [r3]
   1113c:	mvn	r4, #0
   11140:	movw	r9, #41252	; 0xa124
   11144:	movt	r9, #2
   11148:	mov	r8, r3
   1114c:	b	11188 <__assert_fail@plt+0x614>
   11150:	mov	r1, r7
   11154:	mov	r0, r4
   11158:	bl	10fa8 <__assert_fail@plt+0x434>
   1115c:	add	r4, r4, #2
   11160:	cmp	r5, r4
   11164:	blt	11184 <__assert_fail@plt+0x610>
   11168:	ldr	r3, [r6]
   1116c:	cmp	r3, r4
   11170:	bgt	1115c <__assert_fail@plt+0x5e8>
   11174:	ldr	r3, [r8]
   11178:	cmp	r3, r4
   1117c:	blt	1115c <__assert_fail@plt+0x5e8>
   11180:	b	11150 <__assert_fail@plt+0x5dc>
   11184:	mov	r4, r5
   11188:	movw	r2, #940	; 0x3ac
   1118c:	movt	r2, #3
   11190:	ldr	r3, [r9]
   11194:	ldr	r2, [r2]
   11198:	sub	r3, r3, r2
   1119c:	movw	r2, #944	; 0x3b0
   111a0:	movt	r2, #3
   111a4:	ldr	r2, [r2]
   111a8:	cmp	r3, r2
   111ac:	blt	11200 <__assert_fail@plt+0x68c>
   111b0:	mov	r1, #16
   111b4:	mov	r0, #1
   111b8:	bl	12f40 <error@@Base+0x40>
   111bc:	mov	r7, r0
   111c0:	add	r5, r4, #1
   111c4:	str	r5, [r0, #8]
   111c8:	mov	r1, #2
   111cc:	add	r0, r4, r1
   111d0:	bl	12f40 <error@@Base+0x40>
   111d4:	str	r0, [r7, #12]
   111d8:	mov	r1, r7
   111dc:	movw	r0, #41292	; 0xa14c
   111e0:	movt	r0, #2
   111e4:	bl	116e0 <__assert_fail@plt+0xb6c>
   111e8:	rsb	r4, r5, #0
   111ec:	cmp	r5, r4
   111f0:	blt	11184 <__assert_fail@plt+0x610>
   111f4:	movw	r6, #944	; 0x3b0
   111f8:	movt	r6, #3
   111fc:	b	11168 <__assert_fail@plt+0x5f4>
   11200:	ldrd	r4, [sp]
   11204:	ldrd	r6, [sp, #8]
   11208:	ldrd	r8, [sp, #16]
   1120c:	ldr	sl, [sp, #24]
   11210:	add	sp, sp, #28
   11214:	pop	{pc}		; (ldr pc, [sp], #4)
   11218:	strd	r4, [sp, #-20]!	; 0xffffffec
   1121c:	strd	r6, [sp, #8]
   11220:	str	lr, [sp, #16]
   11224:	sub	sp, sp, #12
   11228:	movw	r2, #41252	; 0xa124
   1122c:	movt	r2, #2
   11230:	movw	r3, #940	; 0x3ac
   11234:	movt	r3, #3
   11238:	ldr	r0, [r2]
   1123c:	ldr	r3, [r3]
   11240:	sub	r0, r0, r3
   11244:	movw	r3, #41292	; 0xa14c
   11248:	movt	r3, #2
   1124c:	ldr	r6, [r3, #4]
   11250:	cmp	r6, #0
   11254:	beq	112c8 <__assert_fail@plt+0x754>
   11258:	movw	r7, #936	; 0x3a8
   1125c:	movt	r7, #3
   11260:	mov	r5, #1
   11264:	b	11278 <__assert_fail@plt+0x704>
   11268:	ldr	r0, [sp, #4]
   1126c:	ldr	r6, [r6]
   11270:	cmp	r6, #0
   11274:	beq	112c8 <__assert_fail@plt+0x754>
   11278:	ldr	r3, [r6, #8]
   1127c:	add	r3, r0, r3
   11280:	ldr	r2, [r6, #12]
   11284:	bic	r3, r3, #1
   11288:	ldrh	r4, [r2, r3]
   1128c:	add	r2, sp, #4
   11290:	ldr	r1, [r6]
   11294:	bl	10f04 <__assert_fail@plt+0x390>
   11298:	cmp	r4, r0
   1129c:	ble	11268 <__assert_fail@plt+0x6f4>
   112a0:	ldr	r2, [r7]
   112a4:	sub	r3, r4, #1
   112a8:	add	r3, r2, r3, lsl #2
   112ac:	sub	r2, r2, #4
   112b0:	add	r0, r2, r0, lsl #2
   112b4:	ldr	r2, [r3], #-4
   112b8:	strb	r5, [r2, #4]
   112bc:	cmp	r3, r0
   112c0:	bne	112b4 <__assert_fail@plt+0x740>
   112c4:	b	11268 <__assert_fail@plt+0x6f4>
   112c8:	add	sp, sp, #12
   112cc:	ldrd	r4, [sp]
   112d0:	ldrd	r6, [sp, #8]
   112d4:	add	sp, sp, #16
   112d8:	pop	{pc}		; (ldr pc, [sp], #4)
   112dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112e0:	strd	r6, [sp, #8]
   112e4:	strd	r8, [sp, #16]
   112e8:	strd	sl, [sp, #24]
   112ec:	str	lr, [sp, #32]
   112f0:	sub	sp, sp, #4
   112f4:	mov	r7, r0
   112f8:	mov	r9, r1
   112fc:	mov	r8, r2
   11300:	bl	12514 <__assert_fail@plt+0x19a0>
   11304:	add	r3, r7, #4096	; 0x1000
   11308:	ldr	r3, [r3, #3956]	; 0xf74
   1130c:	cmp	r3, #0
   11310:	ble	113d0 <__assert_fail@plt+0x85c>
   11314:	mov	r6, #0
   11318:	add	r7, r7, #4096	; 0x1000
   1131c:	movw	sl, #49364	; 0xc0d4
   11320:	movt	sl, #2
   11324:	mov	fp, #1
   11328:	b	11374 <__assert_fail@plt+0x800>
   1132c:	cmp	r4, r5
   11330:	movne	r5, #0
   11334:	moveq	r5, #1
   11338:	mov	r2, r5
   1133c:	mov	r1, fp
   11340:	mov	r0, r8
   11344:	bl	11ec4 <__assert_fail@plt+0x1350>
   11348:	cmp	r4, #10
   1134c:	lslle	r0, r4, #3
   11350:	movgt	r0, #88	; 0x58
   11354:	mov	r2, r5
   11358:	mov	r1, fp
   1135c:	add	r0, r8, r0
   11360:	bl	11ec4 <__assert_fail@plt+0x1350>
   11364:	add	r6, r6, #1
   11368:	ldr	r3, [r7, #3956]	; 0xf74
   1136c:	cmp	r3, r6
   11370:	ble	113d0 <__assert_fail@plt+0x85c>
   11374:	ldr	r3, [r7, #3952]	; 0xf70
   11378:	ldr	r3, [r3, r6, lsl #2]
   1137c:	ldr	r4, [r3, #12]
   11380:	ldr	r5, [r3, #16]
   11384:	mov	r2, r5
   11388:	mov	r1, r4
   1138c:	mov	r0, sl
   11390:	bl	11ec4 <__assert_fail@plt+0x1350>
   11394:	mov	r2, r5
   11398:	mov	r1, r4
   1139c:	mov	r0, r9
   113a0:	bl	11ec4 <__assert_fail@plt+0x1350>
   113a4:	ldr	r3, [r7, #3952]	; 0xf70
   113a8:	ldr	r3, [r3, r6, lsl #2]
   113ac:	ldr	r0, [r3, #8]
   113b0:	bl	10ae4 <strlen@plt>
   113b4:	mov	r2, r5
   113b8:	mov	r1, r4
   113bc:	add	r0, r9, r0, lsl #3
   113c0:	bl	11ec4 <__assert_fail@plt+0x1350>
   113c4:	cmp	r8, #0
   113c8:	bne	1132c <__assert_fail@plt+0x7b8>
   113cc:	b	11364 <__assert_fail@plt+0x7f0>
   113d0:	add	sp, sp, #4
   113d4:	ldrd	r4, [sp]
   113d8:	ldrd	r6, [sp, #8]
   113dc:	ldrd	r8, [sp, #16]
   113e0:	ldrd	sl, [sp, #24]
   113e4:	add	sp, sp, #32
   113e8:	pop	{pc}		; (ldr pc, [sp], #4)
   113ec:	movw	r3, #41260	; 0xa12c
   113f0:	movt	r3, #2
   113f4:	ldr	r3, [r3, #12]
   113f8:	cmp	r3, #0
   113fc:	bxle	lr
   11400:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11404:	strd	r6, [sp, #8]
   11408:	strd	r8, [sp, #16]
   1140c:	strd	sl, [sp, #24]
   11410:	str	lr, [sp, #32]
   11414:	sub	sp, sp, #4
   11418:	mov	r8, #0
   1141c:	movw	r7, #41260	; 0xa12c
   11420:	movt	r7, #2
   11424:	movw	r9, #948	; 0x3b4
   11428:	movt	r9, #3
   1142c:	ldr	fp, [pc, #172]	; 114e0 <__assert_fail@plt+0x96c>
   11430:	add	sl, fp, #64	; 0x40
   11434:	b	11448 <__assert_fail@plt+0x8d4>
   11438:	add	r8, r8, #1
   1143c:	ldr	r3, [r7, #12]
   11440:	cmp	r3, r8
   11444:	ble	114c4 <__assert_fail@plt+0x950>
   11448:	ldr	r3, [r7, #12]
   1144c:	cmp	r3, r8
   11450:	ble	11438 <__assert_fail@plt+0x8c4>
   11454:	ldr	r3, [r9]
   11458:	add	r3, r3, r8, lsl #3
   1145c:	ldrb	r6, [r3, #4]
   11460:	ands	r6, r6, #1
   11464:	moveq	r2, #1
   11468:	movne	r2, #0
   1146c:	mov	r1, #1
   11470:	mov	r0, fp
   11474:	bl	11ec4 <__assert_fail@plt+0x1350>
   11478:	add	r4, r8, #1
   1147c:	add	r5, fp, #8
   11480:	ldr	r3, [r7, #12]
   11484:	cmp	r3, r4
   11488:	ble	11438 <__assert_fail@plt+0x8c4>
   1148c:	ldr	r3, [r9]
   11490:	add	r3, r3, r4, lsl #3
   11494:	ldrb	r3, [r3, #4]
   11498:	ands	r6, r6, r3
   1149c:	moveq	r2, #1
   114a0:	movne	r2, #0
   114a4:	mov	r1, #1
   114a8:	mov	r0, r5
   114ac:	bl	11ec4 <__assert_fail@plt+0x1350>
   114b0:	add	r4, r4, #1
   114b4:	add	r5, r5, #8
   114b8:	cmp	r5, sl
   114bc:	bne	11480 <__assert_fail@plt+0x90c>
   114c0:	b	11438 <__assert_fail@plt+0x8c4>
   114c4:	add	sp, sp, #4
   114c8:	ldrd	r4, [sp]
   114cc:	ldrd	r6, [sp, #8]
   114d0:	ldrd	r8, [sp, #16]
   114d4:	ldrd	sl, [sp, #24]
   114d8:	add	sp, sp, #32
   114dc:	pop	{pc}		; (ldr pc, [sp], #4)
   114e0:	andeq	ip, r2, r4, ror r4
   114e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   114e8:	strd	r6, [sp, #8]
   114ec:	str	r8, [sp, #16]
   114f0:	str	lr, [sp, #20]
   114f4:	movw	r3, #41260	; 0xa12c
   114f8:	movt	r3, #2
   114fc:	ldr	r3, [r3, #12]
   11500:	cmp	r3, #0
   11504:	ble	11578 <__assert_fail@plt+0xa04>
   11508:	mov	r4, #0
   1150c:	movw	r6, #948	; 0x3b4
   11510:	movt	r6, #3
   11514:	ldr	r8, [pc, #152]	; 115b4 <__assert_fail@plt+0xa40>
   11518:	ldr	r7, [pc, #152]	; 115b8 <__assert_fail@plt+0xa44>
   1151c:	lsl	r5, r4, #3
   11520:	ldr	r3, [r6]
   11524:	ldr	r3, [r3, r4, lsl #3]
   11528:	ldr	r0, [r3, #8]
   1152c:	bl	119b0 <__assert_fail@plt+0xe3c>
   11530:	ldr	r2, [r6]
   11534:	add	r5, r2, r5
   11538:	ldrb	r3, [r5, #4]
   1153c:	ldr	r1, [r2, r4, lsl #3]
   11540:	clz	r3, r3
   11544:	lsr	r3, r3, #5
   11548:	mov	r2, #1
   1154c:	ldr	r1, [r1, #8]
   11550:	cmp	r0, #0
   11554:	movne	r0, r8
   11558:	moveq	r0, r7
   1155c:	bl	11ee0 <__assert_fail@plt+0x136c>
   11560:	add	r4, r4, #1
   11564:	movw	r3, #41260	; 0xa12c
   11568:	movt	r3, #2
   1156c:	ldr	r3, [r3, #12]
   11570:	cmp	r3, r4
   11574:	bgt	1151c <__assert_fail@plt+0x9a8>
   11578:	ldr	r4, [pc, #60]	; 115bc <__assert_fail@plt+0xa48>
   1157c:	mov	r2, #0
   11580:	mov	r1, r4
   11584:	add	r0, r4, #984	; 0x3d8
   11588:	bl	112dc <__assert_fail@plt+0x768>
   1158c:	add	r2, r4, #816	; 0x330
   11590:	add	r1, r4, #408	; 0x198
   11594:	ldr	r0, [pc, #28]	; 115b8 <__assert_fail@plt+0xa44>
   11598:	bl	112dc <__assert_fail@plt+0x768>
   1159c:	bl	113ec <__assert_fail@plt+0x878>
   115a0:	ldrd	r4, [sp]
   115a4:	ldrd	r6, [sp, #8]
   115a8:	ldr	r8, [sp, #16]
   115ac:	add	sp, sp, #20
   115b0:	pop	{pc}		; (ldr pc, [sp], #4)
   115b4:			; <UNDEFINED> instruction: 0x0002c4b4
   115b8:	andeq	lr, r2, ip, lsr #8
   115bc:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   115c0:	push	{lr}		; (str lr, [sp, #-4]!)
   115c4:	sub	sp, sp, #12
   115c8:	str	r0, [sp, #4]
   115cc:	mov	r4, r1
   115d0:	ldr	r3, [pc, #108]	; 11644 <__assert_fail@plt+0xad0>
   115d4:	movw	r2, #15364	; 0x3c04
   115d8:	movt	r2, #1
   115dc:	add	r0, sp, #4
   115e0:	bl	1306c <error@@Base+0x16c>
   115e4:	ldr	r3, [sp, #4]
   115e8:	sub	r3, r3, #2
   115ec:	cmp	r3, #1
   115f0:	bls	11600 <__assert_fail@plt+0xa8c>
   115f4:	movw	r0, #15428	; 0x3c44
   115f8:	movt	r0, #1
   115fc:	bl	12f00 <error@@Base>
   11600:	movw	r3, #41256	; 0xa128
   11604:	movt	r3, #2
   11608:	ldr	r0, [r3]
   1160c:	bl	118dc <__assert_fail@plt+0xd68>
   11610:	mov	r0, r4
   11614:	bl	10d20 <__assert_fail@plt+0x1ac>
   11618:	bl	110f4 <__assert_fail@plt+0x580>
   1161c:	bl	11218 <__assert_fail@plt+0x6a4>
   11620:	bl	114e4 <__assert_fail@plt+0x970>
   11624:	ldr	r3, [sp, #4]
   11628:	cmp	r3, #3
   1162c:	ldreq	r1, [r4, #8]
   11630:	movne	r1, #0
   11634:	movw	r0, #49364	; 0xc0d4
   11638:	movt	r0, #2
   1163c:	bl	121bc <__assert_fail@plt+0x1648>
   11640:	bl	12ea0 <__assert_fail@plt+0x232c>
   11644:	strheq	r8, [r2], -r4
   11648:	str	r4, [sp, #-8]!
   1164c:	str	lr, [sp, #4]
   11650:	mov	r4, r0
   11654:	str	r1, [r2]
   11658:	str	r3, [r2, #4]
   1165c:	cmp	r1, #0
   11660:	strne	r2, [r1, #4]
   11664:	streq	r2, [r0]
   11668:	cmp	r3, #0
   1166c:	strne	r2, [r3]
   11670:	streq	r2, [r0, #4]
   11674:	ldr	r0, [r0, #8]
   11678:	cmp	r0, #0
   1167c:	beq	1168c <__assert_fail@plt+0xb18>
   11680:	bl	10a00 <free@plt>
   11684:	mov	r3, #0
   11688:	str	r3, [r4, #8]
   1168c:	ldr	r3, [r4, #12]
   11690:	add	r3, r3, #1
   11694:	str	r3, [r4, #12]
   11698:	ldr	r4, [sp]
   1169c:	add	sp, sp, #4
   116a0:	pop	{pc}		; (ldr pc, [sp], #4)
   116a4:	mov	r3, #0
   116a8:	str	r3, [r0, #4]
   116ac:	str	r3, [r0]
   116b0:	str	r3, [r0, #8]
   116b4:	str	r3, [r0, #12]
   116b8:	bx	lr
   116bc:	str	r4, [sp, #-8]!
   116c0:	str	lr, [sp, #4]
   116c4:	ldr	r3, [r0]
   116c8:	mov	r2, r1
   116cc:	mov	r1, #0
   116d0:	bl	11648 <__assert_fail@plt+0xad4>
   116d4:	ldr	r4, [sp]
   116d8:	add	sp, sp, #4
   116dc:	pop	{pc}		; (ldr pc, [sp], #4)
   116e0:	str	r4, [sp, #-8]!
   116e4:	str	lr, [sp, #4]
   116e8:	mov	r3, #0
   116ec:	mov	r2, r1
   116f0:	ldr	r1, [r0, #4]
   116f4:	bl	11648 <__assert_fail@plt+0xad4>
   116f8:	ldr	r4, [sp]
   116fc:	add	sp, sp, #4
   11700:	pop	{pc}		; (ldr pc, [sp], #4)
   11704:	str	r4, [sp, #-8]!
   11708:	str	lr, [sp, #4]
   1170c:	mov	ip, r2
   11710:	mov	r3, r2
   11714:	mov	r2, r1
   11718:	ldr	r1, [ip]
   1171c:	bl	11648 <__assert_fail@plt+0xad4>
   11720:	ldr	r4, [sp]
   11724:	add	sp, sp, #4
   11728:	pop	{pc}		; (ldr pc, [sp], #4)
   1172c:	str	r4, [sp, #-8]!
   11730:	str	lr, [sp, #4]
   11734:	ldr	r3, [r1, #4]
   11738:	bl	11648 <__assert_fail@plt+0xad4>
   1173c:	ldr	r4, [sp]
   11740:	add	sp, sp, #4
   11744:	pop	{pc}		; (ldr pc, [sp], #4)
   11748:	str	r4, [sp, #-8]!
   1174c:	str	lr, [sp, #4]
   11750:	mov	r4, r0
   11754:	ldr	r3, [r1]
   11758:	cmp	r3, #0
   1175c:	ldrne	r2, [r1, #4]
   11760:	strne	r2, [r3, #4]
   11764:	ldreq	r3, [r1, #4]
   11768:	streq	r3, [r0]
   1176c:	ldr	r3, [r1, #4]
   11770:	cmp	r3, #0
   11774:	ldrne	r2, [r1]
   11778:	strne	r2, [r3]
   1177c:	ldreq	r3, [r1]
   11780:	streq	r3, [r0, #4]
   11784:	mov	r3, #0
   11788:	str	r3, [r1, #4]
   1178c:	str	r3, [r1]
   11790:	ldr	r0, [r0, #8]
   11794:	cmp	r0, r3
   11798:	beq	117a8 <__assert_fail@plt+0xc34>
   1179c:	bl	10a00 <free@plt>
   117a0:	mov	r3, #0
   117a4:	str	r3, [r4, #8]
   117a8:	ldr	r3, [r4, #12]
   117ac:	sub	r3, r3, #1
   117b0:	str	r3, [r4, #12]
   117b4:	ldr	r4, [sp]
   117b8:	add	sp, sp, #4
   117bc:	pop	{pc}		; (ldr pc, [sp], #4)
   117c0:	ldr	r3, [r0, #8]
   117c4:	cmp	r3, #0
   117c8:	bxne	lr
   117cc:	ldr	r3, [r0, #12]
   117d0:	cmp	r3, #0
   117d4:	bxeq	lr
   117d8:	str	r4, [sp, #-8]!
   117dc:	str	lr, [sp, #4]
   117e0:	mov	r4, r0
   117e4:	mov	r1, #4
   117e8:	mov	r0, r3
   117ec:	bl	12f40 <error@@Base+0x40>
   117f0:	str	r0, [r4, #8]
   117f4:	ldr	r3, [r4]
   117f8:	cmp	r3, #0
   117fc:	beq	1181c <__assert_fail@plt+0xca8>
   11800:	mov	r2, #0
   11804:	ldr	r1, [r4, #8]
   11808:	str	r3, [r1, r2]
   1180c:	ldr	r3, [r3, #4]
   11810:	add	r2, r2, #4
   11814:	cmp	r3, #0
   11818:	bne	11804 <__assert_fail@plt+0xc90>
   1181c:	ldr	r4, [sp]
   11820:	add	sp, sp, #4
   11824:	pop	{pc}		; (ldr pc, [sp], #4)
   11828:	strd	r4, [sp, #-16]!
   1182c:	str	r6, [sp, #8]
   11830:	str	lr, [sp, #12]
   11834:	mov	r5, r0
   11838:	mov	r6, r1
   1183c:	ldr	r4, [r0]
   11840:	cmp	r4, #0
   11844:	beq	11868 <__assert_fail@plt+0xcf4>
   11848:	mov	r1, r4
   1184c:	mov	r0, r5
   11850:	bl	11748 <__assert_fail@plt+0xbd4>
   11854:	mov	r0, r4
   11858:	blx	r6
   1185c:	ldr	r4, [r5]
   11860:	cmp	r4, #0
   11864:	bne	11848 <__assert_fail@plt+0xcd4>
   11868:	ldrd	r4, [sp]
   1186c:	ldr	r6, [sp, #8]
   11870:	add	sp, sp, #12
   11874:	pop	{pc}		; (ldr pc, [sp], #4)
   11878:	str	r4, [sp, #-8]!
   1187c:	str	lr, [sp, #4]
   11880:	mov	r4, r0
   11884:	mov	r1, r0
   11888:	movw	r0, #33048	; 0x8118
   1188c:	movt	r0, #2
   11890:	bl	123e8 <__assert_fail@plt+0x1874>
   11894:	cmp	r0, #0
   11898:	beq	118b8 <__assert_fail@plt+0xd44>
   1189c:	mov	r1, r4
   118a0:	movw	r0, #15892	; 0x3e14
   118a4:	movt	r0, #1
   118a8:	bl	132c0 <error@@Base+0x3c0>
   118ac:	ldr	r4, [sp]
   118b0:	add	sp, sp, #4
   118b4:	pop	{pc}		; (ldr pc, [sp], #4)
   118b8:	mov	r1, #12
   118bc:	mov	r0, #1
   118c0:	bl	12f40 <error@@Base+0x40>
   118c4:	mov	r1, r0
   118c8:	str	r4, [r0, #8]
   118cc:	movw	r0, #33048	; 0x8118
   118d0:	movt	r0, #2
   118d4:	bl	12444 <__assert_fail@plt+0x18d0>
   118d8:	b	118ac <__assert_fail@plt+0xd38>
   118dc:	strd	r4, [sp, #-16]!
   118e0:	str	r6, [sp, #8]
   118e4:	str	lr, [sp, #12]
   118e8:	movw	r3, #33012	; 0x80f4
   118ec:	movt	r3, #2
   118f0:	ldrb	r3, [r3]
   118f4:	cmp	r3, #0
   118f8:	bne	11980 <__assert_fail@plt+0xe0c>
   118fc:	cmp	r0, #0
   11900:	beq	1198c <__assert_fail@plt+0xe18>
   11904:	movw	r4, #33012	; 0x80f4
   11908:	movt	r4, #2
   1190c:	add	r5, r4, #4
   11910:	movw	r2, #32972	; 0x80cc
   11914:	movt	r2, #2
   11918:	mov	r1, r0
   1191c:	mov	r0, r5
   11920:	bl	13344 <error@@Base+0x444>
   11924:	mov	r1, r5
   11928:	add	r0, r4, #20
   1192c:	bl	12734 <__assert_fail@plt+0x1bc0>
   11930:	movw	r1, #2560	; 0xa00
   11934:	movt	r1, #1
   11938:	mov	r0, r5
   1193c:	bl	11828 <__assert_fail@plt+0xcb4>
   11940:	ldr	r4, [r4, #20]
   11944:	cmp	r4, #0
   11948:	beq	11960 <__assert_fail@plt+0xdec>
   1194c:	ldr	r0, [r4, #8]
   11950:	bl	11878 <__assert_fail@plt+0xd04>
   11954:	ldr	r4, [r4, #4]
   11958:	cmp	r4, #0
   1195c:	bne	1194c <__assert_fail@plt+0xdd8>
   11960:	movw	r3, #33012	; 0x80f4
   11964:	movt	r3, #2
   11968:	mov	r2, #1
   1196c:	strb	r2, [r3]
   11970:	ldrd	r4, [sp]
   11974:	ldr	r6, [sp, #8]
   11978:	add	sp, sp, #12
   1197c:	pop	{pc}		; (ldr pc, [sp], #4)
   11980:	movw	r0, #15912	; 0x3e28
   11984:	movt	r0, #1
   11988:	bl	12f00 <error@@Base>
   1198c:	movw	r5, #15452	; 0x3c5c
   11990:	movt	r5, #1
   11994:	sub	r4, r5, #4
   11998:	add	r5, r5, #436	; 0x1b4
   1199c:	ldr	r0, [r4, #4]!
   119a0:	bl	11878 <__assert_fail@plt+0xd04>
   119a4:	cmp	r5, r4
   119a8:	bne	1199c <__assert_fail@plt+0xe28>
   119ac:	b	11960 <__assert_fail@plt+0xdec>
   119b0:	str	r4, [sp, #-8]!
   119b4:	str	lr, [sp, #4]
   119b8:	movw	r3, #33012	; 0x80f4
   119bc:	movt	r3, #2
   119c0:	ldrb	r3, [r3]
   119c4:	cmp	r3, #0
   119c8:	beq	119f0 <__assert_fail@plt+0xe7c>
   119cc:	mov	r1, r0
   119d0:	movw	r0, #33048	; 0x8118
   119d4:	movt	r0, #2
   119d8:	bl	123e8 <__assert_fail@plt+0x1874>
   119dc:	adds	r0, r0, #0
   119e0:	movne	r0, #1
   119e4:	ldr	r4, [sp]
   119e8:	add	sp, sp, #4
   119ec:	pop	{pc}		; (ldr pc, [sp], #4)
   119f0:	movw	r0, #15944	; 0x3e48
   119f4:	movt	r0, #1
   119f8:	bl	12f00 <error@@Base>
   119fc:	andeq	r0, r0, r0
   11a00:	str	r4, [sp, #-8]!
   11a04:	str	lr, [sp, #4]
   11a08:	mov	r2, r0
   11a0c:	mov	r1, #99	; 0x63
   11a10:	movw	r0, #41104	; 0xa090
   11a14:	movt	r0, #2
   11a18:	bl	10a18 <fgets@plt>
   11a1c:	adds	r0, r0, #0
   11a20:	movne	r0, #1
   11a24:	ldr	r4, [sp]
   11a28:	add	sp, sp, #4
   11a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a30:	str	r4, [sp, #-8]!
   11a34:	str	lr, [sp, #4]
   11a38:	mov	r4, r1
   11a3c:	bl	11a00 <__assert_fail@plt+0xe8c>
   11a40:	cmp	r0, #0
   11a44:	moveq	r0, #0
   11a48:	bne	11a58 <__assert_fail@plt+0xee4>
   11a4c:	ldr	r4, [sp]
   11a50:	add	sp, sp, #4
   11a54:	pop	{pc}		; (ldr pc, [sp], #4)
   11a58:	mov	r2, r4
   11a5c:	movw	r1, #16740	; 0x4164
   11a60:	movt	r1, #1
   11a64:	movw	r0, #41104	; 0xa090
   11a68:	movt	r0, #2
   11a6c:	bl	10afc <__isoc99_sscanf@plt>
   11a70:	cmp	r0, #1
   11a74:	movne	r0, #0
   11a78:	moveq	r0, #1
   11a7c:	b	11a4c <__assert_fail@plt+0xed8>
   11a80:	str	r4, [sp, #-8]!
   11a84:	str	lr, [sp, #4]
   11a88:	ldr	r3, [r1]
   11a8c:	cmp	r3, #0
   11a90:	bne	11ab8 <__assert_fail@plt+0xf44>
   11a94:	mov	r3, r0
   11a98:	mov	r2, #8
   11a9c:	mov	r1, #1
   11aa0:	movw	r0, #16616	; 0x40e8
   11aa4:	movt	r0, #1
   11aa8:	bl	10a6c <fwrite@plt>
   11aac:	ldr	r4, [sp]
   11ab0:	add	sp, sp, #4
   11ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ab8:	ldr	r2, [r1, #4]
   11abc:	sub	r2, r3, r2
   11ac0:	vmov	s12, r2
   11ac4:	vcvt.f64.s32	d6, s12
   11ac8:	vldr	d7, [pc, #32]	; 11af0 <__assert_fail@plt+0xf7c>
   11acc:	vmul.f64	d6, d6, d7
   11ad0:	vmov	s15, r3
   11ad4:	vcvt.f64.s32	d7, s15
   11ad8:	vdiv.f64	d7, d6, d7
   11adc:	vmov	r2, r3, d7
   11ae0:	movw	r1, #16628	; 0x40f4
   11ae4:	movt	r1, #1
   11ae8:	bl	10af0 <fprintf@plt>
   11aec:	b	11aac <__assert_fail@plt+0xf38>
   11af0:	andeq	r0, r0, r0
   11af4:	subsmi	r0, r9, r0
   11af8:	strd	r4, [sp, #-16]!
   11afc:	str	r6, [sp, #8]
   11b00:	str	lr, [sp, #12]
   11b04:	mov	r4, r0
   11b08:	subs	r5, r1, #0
   11b0c:	beq	11b58 <__assert_fail@plt+0xfe4>
   11b10:	ldr	r3, [r5, #4]
   11b14:	ldr	r2, [r5]
   11b18:	movw	r1, #16636	; 0x40fc
   11b1c:	movt	r1, #1
   11b20:	bl	10af0 <fprintf@plt>
   11b24:	mov	r1, r5
   11b28:	mov	r0, r4
   11b2c:	bl	11a80 <__assert_fail@plt+0xf0c>
   11b30:	mov	r3, r4
   11b34:	mov	r2, #3
   11b38:	mov	r1, #1
   11b3c:	movw	r0, #16676	; 0x4124
   11b40:	movt	r0, #1
   11b44:	bl	10a6c <fwrite@plt>
   11b48:	ldrd	r4, [sp]
   11b4c:	ldr	r6, [sp, #8]
   11b50:	add	sp, sp, #12
   11b54:	pop	{pc}		; (ldr pc, [sp], #4)
   11b58:	mov	r3, r0
   11b5c:	mov	r2, #26
   11b60:	mov	r1, #1
   11b64:	movw	r0, #16648	; 0x4108
   11b68:	movt	r0, #1
   11b6c:	bl	10a6c <fwrite@plt>
   11b70:	b	11b30 <__assert_fail@plt+0xfbc>
   11b74:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11b78:	strd	r6, [sp, #8]
   11b7c:	strd	r8, [sp, #16]
   11b80:	str	sl, [sp, #24]
   11b84:	str	lr, [sp, #28]
   11b88:	mov	r7, r0
   11b8c:	mov	r5, r1
   11b90:	mov	r6, r2
   11b94:	ldrb	r9, [sp, #32]
   11b98:	ldrb	sl, [sp, #36]	; 0x24
   11b9c:	mov	r2, r3
   11ba0:	movw	r1, #16680	; 0x4128
   11ba4:	movt	r1, #1
   11ba8:	bl	10af0 <fprintf@plt>
   11bac:	mov	r1, #0
   11bb0:	mov	r0, r7
   11bb4:	bl	11af8 <__assert_fail@plt+0xf84>
   11bb8:	cmp	r9, #0
   11bbc:	bne	11ca4 <__assert_fail@plt+0x1130>
   11bc0:	movw	r2, #16728	; 0x4158
   11bc4:	movt	r2, #1
   11bc8:	movw	r1, #30184	; 0x75e8
   11bcc:	movt	r1, #1
   11bd0:	mov	r0, r7
   11bd4:	bl	10af0 <fprintf@plt>
   11bd8:	cmp	r6, #0
   11bdc:	bgt	11cc4 <__assert_fail@plt+0x1150>
   11be0:	b	11c28 <__assert_fail@plt+0x10b4>
   11be4:	add	r4, r4, #1
   11be8:	sxth	r4, r4
   11bec:	cmp	r4, r6
   11bf0:	bgt	11c20 <__assert_fail@plt+0x10ac>
   11bf4:	add	r1, r5, r4, lsl #3
   11bf8:	ldr	r3, [r5, r4, lsl #3]
   11bfc:	cmp	r3, #0
   11c00:	ble	11be4 <__assert_fail@plt+0x1070>
   11c04:	mov	r0, r7
   11c08:	bl	11af8 <__assert_fail@plt+0xf84>
   11c0c:	mov	r2, r4
   11c10:	mov	r1, r8
   11c14:	mov	r0, r7
   11c18:	bl	10af0 <fprintf@plt>
   11c1c:	b	11be4 <__assert_fail@plt+0x1070>
   11c20:	cmp	r9, #0
   11c24:	bne	11c48 <__assert_fail@plt+0x10d4>
   11c28:	cmp	sl, #0
   11c2c:	bne	11c7c <__assert_fail@plt+0x1108>
   11c30:	ldrd	r4, [sp]
   11c34:	ldrd	r6, [sp, #8]
   11c38:	ldrd	r8, [sp, #16]
   11c3c:	ldr	sl, [sp, #24]
   11c40:	add	sp, sp, #28
   11c44:	pop	{pc}		; (ldr pc, [sp], #4)
   11c48:	add	r3, r6, #1
   11c4c:	add	r1, r5, r3, lsl #3
   11c50:	ldr	r3, [r5, r3, lsl #3]
   11c54:	cmp	r3, #0
   11c58:	ble	11c28 <__assert_fail@plt+0x10b4>
   11c5c:	mov	r0, r7
   11c60:	bl	11af8 <__assert_fail@plt+0xf84>
   11c64:	mov	r2, r6
   11c68:	movw	r1, #16700	; 0x413c
   11c6c:	movt	r1, #1
   11c70:	mov	r0, r7
   11c74:	bl	10af0 <fprintf@plt>
   11c78:	b	11c28 <__assert_fail@plt+0x10b4>
   11c7c:	mov	r1, r5
   11c80:	mov	r0, r7
   11c84:	bl	11af8 <__assert_fail@plt+0xf84>
   11c88:	mov	r3, r7
   11c8c:	mov	r2, #7
   11c90:	mov	r1, #1
   11c94:	movw	r0, #16712	; 0x4148
   11c98:	movt	r0, #1
   11c9c:	bl	10a6c <fwrite@plt>
   11ca0:	b	11c30 <__assert_fail@plt+0x10bc>
   11ca4:	movw	r2, #16720	; 0x4150
   11ca8:	movt	r2, #1
   11cac:	movw	r1, #30184	; 0x75e8
   11cb0:	movt	r1, #1
   11cb4:	mov	r0, r7
   11cb8:	bl	10af0 <fprintf@plt>
   11cbc:	cmp	r6, #0
   11cc0:	ble	11c48 <__assert_fail@plt+0x10d4>
   11cc4:	mov	r4, #1
   11cc8:	movw	r8, #16688	; 0x4130
   11ccc:	movt	r8, #1
   11cd0:	b	11bf4 <__assert_fail@plt+0x1080>
   11cd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11cd8:	strd	r6, [sp, #8]
   11cdc:	str	r8, [sp, #16]
   11ce0:	str	lr, [sp, #20]
   11ce4:	mov	r6, r0
   11ce8:	mov	r5, r1
   11cec:	mov	r7, r2
   11cf0:	mov	r0, r1
   11cf4:	bl	12514 <__assert_fail@plt+0x19a0>
   11cf8:	add	r4, r5, #4096	; 0x1000
   11cfc:	movw	r2, #7592	; 0x1da8
   11d00:	movt	r2, #1
   11d04:	ldr	r1, [r4, #3952]	; 0xf70
   11d08:	ldr	r0, [r4, #3956]	; 0xf74
   11d0c:	bl	13b28 <error@@Base+0xc28>
   11d10:	mov	r2, r7
   11d14:	movw	r1, #16680	; 0x4128
   11d18:	movt	r1, #1
   11d1c:	mov	r0, r6
   11d20:	bl	10af0 <fprintf@plt>
   11d24:	mov	r1, #0
   11d28:	mov	r0, r6
   11d2c:	bl	11af8 <__assert_fail@plt+0xf84>
   11d30:	mov	r1, r6
   11d34:	mov	r0, #10
   11d38:	bl	10b20 <fputc@plt>
   11d3c:	ldr	r3, [r4, #3956]	; 0xf74
   11d40:	cmp	r3, #0
   11d44:	ble	11d94 <__assert_fail@plt+0x1220>
   11d48:	mov	r4, #0
   11d4c:	add	r5, r5, #4096	; 0x1000
   11d50:	movw	r7, #30184	; 0x75e8
   11d54:	movt	r7, #1
   11d58:	ldr	r3, [r5, #3952]	; 0xf70
   11d5c:	ldr	r1, [r3, r4, lsl #2]
   11d60:	add	r1, r1, #12
   11d64:	mov	r0, r6
   11d68:	bl	11af8 <__assert_fail@plt+0xf84>
   11d6c:	ldr	r3, [r5, #3952]	; 0xf70
   11d70:	ldr	r3, [r3, r4, lsl #2]
   11d74:	ldr	r2, [r3, #8]
   11d78:	mov	r1, r7
   11d7c:	mov	r0, r6
   11d80:	bl	10af0 <fprintf@plt>
   11d84:	add	r4, r4, #1
   11d88:	ldr	r3, [r5, #3956]	; 0xf74
   11d8c:	cmp	r3, r4
   11d90:	bgt	11d58 <__assert_fail@plt+0x11e4>
   11d94:	ldrd	r4, [sp]
   11d98:	ldrd	r6, [sp, #8]
   11d9c:	ldr	r8, [sp, #16]
   11da0:	add	sp, sp, #20
   11da4:	pop	{pc}		; (ldr pc, [sp], #4)
   11da8:	str	r4, [sp, #-8]!
   11dac:	str	lr, [sp, #4]
   11db0:	ldr	r1, [r1, #8]
   11db4:	ldr	r0, [r0, #8]
   11db8:	bl	12d04 <__assert_fail@plt+0x2190>
   11dbc:	ldr	r4, [sp]
   11dc0:	add	sp, sp, #4
   11dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   11dc8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11dcc:	strd	r6, [sp, #8]
   11dd0:	strd	r8, [sp, #16]
   11dd4:	str	lr, [sp, #24]
   11dd8:	sub	sp, sp, #12
   11ddc:	mov	r5, r0
   11de0:	mov	r4, r1
   11de4:	bl	11a00 <__assert_fail@plt+0xe8c>
   11de8:	cmp	r0, #0
   11dec:	moveq	r6, #0
   11df0:	beq	11ea8 <__assert_fail@plt+0x1334>
   11df4:	mov	r0, r5
   11df8:	bl	11a00 <__assert_fail@plt+0xe8c>
   11dfc:	cmp	r0, #0
   11e00:	moveq	r6, #0
   11e04:	beq	11ea8 <__assert_fail@plt+0x1334>
   11e08:	mov	r6, #0
   11e0c:	movw	r9, #16736	; 0x4160
   11e10:	movt	r9, #1
   11e14:	movw	r8, #41104	; 0xa090
   11e18:	movt	r8, #2
   11e1c:	add	r7, r8, #29
   11e20:	b	11e98 <__assert_fail@plt+0x1324>
   11e24:	mov	r3, sp
   11e28:	add	r2, sp, #4
   11e2c:	mov	r1, r9
   11e30:	mov	r0, r8
   11e34:	bl	10afc <__isoc99_sscanf@plt>
   11e38:	cmp	r0, #2
   11e3c:	bne	11ea8 <__assert_fail@plt+0x1334>
   11e40:	mov	r2, #10
   11e44:	mov	r1, #0
   11e48:	mov	r0, r7
   11e4c:	bl	109e8 <strtol@plt>
   11e50:	cmp	r0, #0
   11e54:	bne	11e74 <__assert_fail@plt+0x1300>
   11e58:	movw	r1, #16712	; 0x4148
   11e5c:	movt	r1, #1
   11e60:	mov	r0, r7
   11e64:	bl	109dc <strcmp@plt>
   11e68:	cmp	r0, #0
   11e6c:	ldreq	r6, [sp, #4]
   11e70:	movne	r0, #11
   11e74:	add	r2, r4, r0, lsl #3
   11e78:	ldr	r3, [r4, r0, lsl #3]
   11e7c:	ldr	r1, [sp, #4]
   11e80:	add	r3, r3, r1
   11e84:	str	r3, [r4, r0, lsl #3]
   11e88:	ldr	r3, [r2, #4]
   11e8c:	ldr	r1, [sp]
   11e90:	add	r3, r3, r1
   11e94:	str	r3, [r2, #4]
   11e98:	mov	r0, r5
   11e9c:	bl	11a00 <__assert_fail@plt+0xe8c>
   11ea0:	cmp	r0, #0
   11ea4:	bne	11e24 <__assert_fail@plt+0x12b0>
   11ea8:	mov	r0, r6
   11eac:	add	sp, sp, #12
   11eb0:	ldrd	r4, [sp]
   11eb4:	ldrd	r6, [sp, #8]
   11eb8:	ldrd	r8, [sp, #16]
   11ebc:	add	sp, sp, #24
   11ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ec4:	ldr	r3, [r0]
   11ec8:	add	r1, r3, r1
   11ecc:	str	r1, [r0]
   11ed0:	ldr	r3, [r0, #4]
   11ed4:	add	r2, r3, r2
   11ed8:	str	r2, [r0, #4]
   11edc:	bx	lr
   11ee0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11ee4:	strd	r6, [sp, #8]
   11ee8:	str	r8, [sp, #16]
   11eec:	str	lr, [sp, #20]
   11ef0:	mov	r7, r0
   11ef4:	mov	r8, r1
   11ef8:	mov	r6, r2
   11efc:	mov	r5, r3
   11f00:	bl	123e8 <__assert_fail@plt+0x1874>
   11f04:	subs	r4, r0, #0
   11f08:	beq	11f38 <__assert_fail@plt+0x13c4>
   11f0c:	ldr	r2, [r4, #12]
   11f10:	add	r2, r2, r6
   11f14:	str	r2, [r4, #12]
   11f18:	ldr	r3, [r4, #16]
   11f1c:	add	r3, r3, r5
   11f20:	str	r3, [r4, #16]
   11f24:	ldrd	r4, [sp]
   11f28:	ldrd	r6, [sp, #8]
   11f2c:	ldr	r8, [sp, #16]
   11f30:	add	sp, sp, #20
   11f34:	pop	{pc}		; (ldr pc, [sp], #4)
   11f38:	mov	r1, #20
   11f3c:	mov	r0, #1
   11f40:	bl	12f40 <error@@Base+0x40>
   11f44:	mov	r4, r0
   11f48:	mov	r0, r8
   11f4c:	bl	10a30 <strdup@plt>
   11f50:	str	r0, [r4, #8]
   11f54:	mov	r1, r4
   11f58:	mov	r0, r7
   11f5c:	bl	12444 <__assert_fail@plt+0x18d0>
   11f60:	b	11f0c <__assert_fail@plt+0x1398>
   11f64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11f68:	strd	r6, [sp, #8]
   11f6c:	str	r8, [sp, #16]
   11f70:	str	lr, [sp, #20]
   11f74:	sub	sp, sp, #8
   11f78:	mov	r5, r0
   11f7c:	mov	r6, r1
   11f80:	bl	11a00 <__assert_fail@plt+0xe8c>
   11f84:	cmp	r0, #0
   11f88:	beq	12008 <__assert_fail@plt+0x1494>
   11f8c:	mov	r0, r5
   11f90:	bl	11a00 <__assert_fail@plt+0xe8c>
   11f94:	cmp	r0, #0
   11f98:	beq	12008 <__assert_fail@plt+0x1494>
   11f9c:	movw	r7, #16736	; 0x4160
   11fa0:	movt	r7, #1
   11fa4:	movw	r4, #41104	; 0xa090
   11fa8:	movt	r4, #2
   11fac:	add	r8, r4, #29
   11fb0:	b	11ff8 <__assert_fail@plt+0x1484>
   11fb4:	mov	r3, sp
   11fb8:	add	r2, sp, #4
   11fbc:	mov	r1, r7
   11fc0:	mov	r0, r4
   11fc4:	bl	10afc <__isoc99_sscanf@plt>
   11fc8:	cmp	r0, #2
   11fcc:	bne	12008 <__assert_fail@plt+0x1494>
   11fd0:	mov	r0, r4
   11fd4:	bl	10ae4 <strlen@plt>
   11fd8:	add	r0, r4, r0
   11fdc:	mov	r3, #0
   11fe0:	strb	r3, [r0, #-1]
   11fe4:	ldr	r3, [sp]
   11fe8:	ldr	r2, [sp, #4]
   11fec:	mov	r1, r8
   11ff0:	mov	r0, r6
   11ff4:	bl	11ee0 <__assert_fail@plt+0x136c>
   11ff8:	mov	r0, r5
   11ffc:	bl	11a00 <__assert_fail@plt+0xe8c>
   12000:	cmp	r0, #0
   12004:	bne	11fb4 <__assert_fail@plt+0x1440>
   12008:	add	sp, sp, #8
   1200c:	ldrd	r4, [sp]
   12010:	ldrd	r6, [sp, #8]
   12014:	ldr	r8, [sp, #16]
   12018:	add	sp, sp, #20
   1201c:	pop	{pc}		; (ldr pc, [sp], #4)
   12020:	strd	r4, [sp, #-20]!	; 0xffffffec
   12024:	strd	r6, [sp, #8]
   12028:	str	lr, [sp, #16]
   1202c:	sub	sp, sp, #12
   12030:	mov	r5, r0
   12034:	mov	r6, r1
   12038:	movw	r1, #16344	; 0x3fd8
   1203c:	movt	r1, #1
   12040:	mov	r0, r6
   12044:	bl	12fe8 <error@@Base+0xe8>
   12048:	mov	r4, r0
   1204c:	bl	11a00 <__assert_fail@plt+0xe8c>
   12050:	cmp	r0, #0
   12054:	beq	121a0 <__assert_fail@plt+0x162c>
   12058:	mov	r2, #45	; 0x2d
   1205c:	movw	r1, #16752	; 0x4170
   12060:	movt	r1, #1
   12064:	movw	r0, #41104	; 0xa090
   12068:	movt	r0, #2
   1206c:	bl	10b50 <strncmp@plt>
   12070:	cmp	r0, #0
   12074:	bne	121a0 <__assert_fail@plt+0x162c>
   12078:	mov	r0, r4
   1207c:	bl	11a00 <__assert_fail@plt+0xe8c>
   12080:	cmp	r0, #0
   12084:	beq	121a0 <__assert_fail@plt+0x162c>
   12088:	movw	r1, #30428	; 0x76dc
   1208c:	movt	r1, #1
   12090:	movw	r0, #41104	; 0xa090
   12094:	movt	r0, #2
   12098:	bl	109dc <strcmp@plt>
   1209c:	cmp	r0, #0
   120a0:	bne	121a0 <__assert_fail@plt+0x162c>
   120a4:	add	r1, sp, #4
   120a8:	mov	r0, r4
   120ac:	bl	11a30 <__assert_fail@plt+0xebc>
   120b0:	cmp	r0, #0
   120b4:	beq	121a0 <__assert_fail@plt+0x162c>
   120b8:	mov	r1, sp
   120bc:	mov	r0, r4
   120c0:	bl	11a30 <__assert_fail@plt+0xebc>
   120c4:	cmp	r0, #0
   120c8:	beq	121a0 <__assert_fail@plt+0x162c>
   120cc:	mov	r0, r4
   120d0:	bl	11a00 <__assert_fail@plt+0xe8c>
   120d4:	cmp	r0, #0
   120d8:	beq	121a0 <__assert_fail@plt+0x162c>
   120dc:	mov	r0, r4
   120e0:	bl	11a00 <__assert_fail@plt+0xe8c>
   120e4:	cmp	r0, #0
   120e8:	beq	121a0 <__assert_fail@plt+0x162c>
   120ec:	ldr	r3, [r5]
   120f0:	ldr	r2, [sp, #4]
   120f4:	add	r3, r3, r2
   120f8:	str	r3, [r5]
   120fc:	ldr	r3, [r5, #4]
   12100:	ldr	r2, [sp]
   12104:	add	r3, r3, r2
   12108:	str	r3, [r5, #4]
   1210c:	add	r1, r5, #8
   12110:	mov	r0, r4
   12114:	bl	11dc8 <__assert_fail@plt+0x1254>
   12118:	mov	r7, r0
   1211c:	add	r1, r5, #416	; 0x1a0
   12120:	mov	r0, r4
   12124:	bl	11dc8 <__assert_fail@plt+0x1254>
   12128:	mov	r6, r0
   1212c:	add	r1, r5, #824	; 0x338
   12130:	mov	r0, r4
   12134:	bl	11dc8 <__assert_fail@plt+0x1254>
   12138:	ldr	r3, [sp, #4]
   1213c:	cmp	r3, #0
   12140:	bgt	12160 <__assert_fail@plt+0x15ec>
   12144:	mov	r0, r4
   12148:	bl	12d8c <__assert_fail@plt+0x2218>
   1214c:	add	sp, sp, #12
   12150:	ldrd	r4, [sp]
   12154:	ldrd	r6, [sp, #8]
   12158:	add	sp, sp, #16
   1215c:	pop	{pc}		; (ldr pc, [sp], #4)
   12160:	add	r1, r5, #920	; 0x398
   12164:	mov	r0, r4
   12168:	bl	11dc8 <__assert_fail@plt+0x1254>
   1216c:	cmp	r7, #0
   12170:	bgt	12190 <__assert_fail@plt+0x161c>
   12174:	cmp	r6, #0
   12178:	ble	12144 <__assert_fail@plt+0x15d0>
   1217c:	add	r1, r5, #9024	; 0x2340
   12180:	add	r1, r1, #24
   12184:	mov	r0, r4
   12188:	bl	11f64 <__assert_fail@plt+0x13f0>
   1218c:	b	12144 <__assert_fail@plt+0x15d0>
   12190:	add	r1, r5, #992	; 0x3e0
   12194:	mov	r0, r4
   12198:	bl	11f64 <__assert_fail@plt+0x13f0>
   1219c:	b	12174 <__assert_fail@plt+0x1600>
   121a0:	movw	r1, #16744	; 0x4168
   121a4:	movt	r1, #1
   121a8:	cmp	r6, #0
   121ac:	movne	r1, r6
   121b0:	movw	r0, #16800	; 0x41a0
   121b4:	movt	r0, #1
   121b8:	bl	12fa4 <error@@Base+0xa4>
   121bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   121c0:	strd	r6, [sp, #8]
   121c4:	str	lr, [sp, #16]
   121c8:	sub	sp, sp, #12
   121cc:	mov	r5, r0
   121d0:	mov	r0, r1
   121d4:	movw	r1, #16820	; 0x41b4
   121d8:	movt	r1, #1
   121dc:	bl	12fe8 <error@@Base+0xe8>
   121e0:	mov	r4, r0
   121e4:	movw	r3, #30428	; 0x76dc
   121e8:	movt	r3, #1
   121ec:	movw	r2, #16752	; 0x4170
   121f0:	movt	r2, #1
   121f4:	movw	r1, #16824	; 0x41b8
   121f8:	movt	r1, #1
   121fc:	bl	10af0 <fprintf@plt>
   12200:	ldr	r2, [r5]
   12204:	movw	r1, #16832	; 0x41c0
   12208:	movt	r1, #1
   1220c:	mov	r0, r4
   12210:	bl	10af0 <fprintf@plt>
   12214:	ldr	r2, [r5, #4]
   12218:	movw	r1, #16848	; 0x41d0
   1221c:	movt	r1, #1
   12220:	mov	r0, r4
   12224:	bl	10af0 <fprintf@plt>
   12228:	mov	r1, r5
   1222c:	mov	r0, r4
   12230:	bl	11a80 <__assert_fail@plt+0xf0c>
   12234:	mov	r3, r4
   12238:	mov	r2, #12
   1223c:	mov	r1, #1
   12240:	movw	r0, #16872	; 0x41e8
   12244:	movt	r0, #1
   12248:	bl	10a6c <fwrite@plt>
   1224c:	mov	r6, #1
   12250:	str	r6, [sp, #4]
   12254:	mov	r7, #0
   12258:	str	r7, [sp]
   1225c:	movw	r3, #16888	; 0x41f8
   12260:	movt	r3, #1
   12264:	mov	r2, #50	; 0x32
   12268:	add	r1, r5, #8
   1226c:	mov	r0, r4
   12270:	bl	11b74 <__assert_fail@plt+0x1000>
   12274:	str	r6, [sp, #4]
   12278:	str	r7, [sp]
   1227c:	movw	r3, #16900	; 0x4204
   12280:	movt	r3, #1
   12284:	mov	r2, #50	; 0x32
   12288:	add	r1, r5, #416	; 0x1a0
   1228c:	mov	r0, r4
   12290:	bl	11b74 <__assert_fail@plt+0x1000>
   12294:	str	r6, [sp, #4]
   12298:	str	r6, [sp]
   1229c:	movw	r3, #16916	; 0x4214
   122a0:	movt	r3, #1
   122a4:	mov	r2, #10
   122a8:	add	r1, r5, #824	; 0x338
   122ac:	mov	r0, r4
   122b0:	bl	11b74 <__assert_fail@plt+0x1000>
   122b4:	ldr	r3, [r5]
   122b8:	cmp	r3, r7
   122bc:	bgt	122dc <__assert_fail@plt+0x1768>
   122c0:	mov	r0, r4
   122c4:	bl	12d8c <__assert_fail@plt+0x2218>
   122c8:	add	sp, sp, #12
   122cc:	ldrd	r4, [sp]
   122d0:	ldrd	r6, [sp, #8]
   122d4:	add	sp, sp, #16
   122d8:	pop	{pc}		; (ldr pc, [sp], #4)
   122dc:	str	r7, [sp, #4]
   122e0:	str	r7, [sp]
   122e4:	movw	r3, #16940	; 0x422c
   122e8:	movt	r3, #1
   122ec:	mov	r2, #8
   122f0:	add	r1, r5, #920	; 0x398
   122f4:	mov	r0, r4
   122f8:	bl	11b74 <__assert_fail@plt+0x1000>
   122fc:	ldr	r3, [r5, #8]
   12300:	cmp	r3, r7
   12304:	bgt	12330 <__assert_fail@plt+0x17bc>
   12308:	ldr	r3, [r5, #416]	; 0x1a0
   1230c:	cmp	r3, #0
   12310:	ble	122c0 <__assert_fail@plt+0x174c>
   12314:	movw	r2, #16900	; 0x4204
   12318:	movt	r2, #1
   1231c:	add	r1, r5, #9024	; 0x2340
   12320:	add	r1, r1, #24
   12324:	mov	r0, r4
   12328:	bl	11cd4 <__assert_fail@plt+0x1160>
   1232c:	b	122c0 <__assert_fail@plt+0x174c>
   12330:	movw	r2, #16888	; 0x41f8
   12334:	movt	r2, #1
   12338:	add	r1, r5, #992	; 0x3e0
   1233c:	mov	r0, r4
   12340:	bl	11cd4 <__assert_fail@plt+0x1160>
   12344:	b	12308 <__assert_fail@plt+0x1794>
   12348:	ldrb	r3, [r0]
   1234c:	cmp	r3, #0
   12350:	beq	12390 <__assert_fail@plt+0x181c>
   12354:	mov	r2, #0
   12358:	add	r2, r2, r3
   1235c:	ldrb	r3, [r0, #1]!
   12360:	cmp	r3, #0
   12364:	bne	12358 <__assert_fail@plt+0x17e4>
   12368:	movw	r3, #20065	; 0x4e61
   1236c:	movt	r3, #33354	; 0x824a
   12370:	smull	r1, r3, r3, r2
   12374:	add	r3, r3, r2
   12378:	asr	r0, r2, #31
   1237c:	rsb	r3, r0, r3, asr #8
   12380:	movw	r0, #503	; 0x1f7
   12384:	mls	r0, r0, r3, r2
   12388:	sxth	r0, r0
   1238c:	bx	lr
   12390:	mov	r2, #0
   12394:	b	12368 <__assert_fail@plt+0x17f4>
   12398:	strd	r4, [sp, #-16]!
   1239c:	str	r6, [sp, #8]
   123a0:	str	lr, [sp, #12]
   123a4:	mov	r6, r0
   123a8:	mov	r4, r0
   123ac:	add	r5, r0, #8000	; 0x1f40
   123b0:	add	r5, r5, #48	; 0x30
   123b4:	mov	r0, r4
   123b8:	bl	116a4 <__assert_fail@plt+0xb30>
   123bc:	add	r4, r4, #16
   123c0:	cmp	r4, r5
   123c4:	bne	123b4 <__assert_fail@plt+0x1840>
   123c8:	add	r6, r6, #4096	; 0x1000
   123cc:	mov	r3, #0
   123d0:	str	r3, [r6, #3952]	; 0xf70
   123d4:	str	r3, [r6, #3956]	; 0xf74
   123d8:	ldrd	r4, [sp]
   123dc:	ldr	r6, [sp, #8]
   123e0:	add	sp, sp, #12
   123e4:	pop	{pc}		; (ldr pc, [sp], #4)
   123e8:	strd	r4, [sp, #-16]!
   123ec:	str	r6, [sp, #8]
   123f0:	str	lr, [sp, #12]
   123f4:	mov	r4, r0
   123f8:	mov	r5, r1
   123fc:	mov	r0, r1
   12400:	bl	12348 <__assert_fail@plt+0x17d4>
   12404:	ldr	r4, [r4, r0, lsl #4]
   12408:	cmp	r4, #0
   1240c:	beq	12430 <__assert_fail@plt+0x18bc>
   12410:	ldr	r1, [r4, #8]
   12414:	mov	r0, r5
   12418:	bl	109dc <strcmp@plt>
   1241c:	cmp	r0, #0
   12420:	beq	12430 <__assert_fail@plt+0x18bc>
   12424:	ldr	r4, [r4, #4]
   12428:	cmp	r4, #0
   1242c:	bne	12410 <__assert_fail@plt+0x189c>
   12430:	mov	r0, r4
   12434:	ldrd	r4, [sp]
   12438:	ldr	r6, [sp, #8]
   1243c:	add	sp, sp, #12
   12440:	pop	{pc}		; (ldr pc, [sp], #4)
   12444:	strd	r4, [sp, #-16]!
   12448:	str	r6, [sp, #8]
   1244c:	str	lr, [sp, #12]
   12450:	mov	r4, r0
   12454:	mov	r5, r1
   12458:	ldr	r0, [r1, #8]
   1245c:	bl	12348 <__assert_fail@plt+0x17d4>
   12460:	mov	r1, r5
   12464:	add	r0, r4, r0, lsl #4
   12468:	bl	116bc <__assert_fail@plt+0xb48>
   1246c:	add	r3, r4, #4096	; 0x1000
   12470:	ldr	r0, [r3, #3952]	; 0xf70
   12474:	cmp	r0, #0
   12478:	beq	1248c <__assert_fail@plt+0x1918>
   1247c:	bl	10a00 <free@plt>
   12480:	add	r3, r4, #4096	; 0x1000
   12484:	mov	r2, #0
   12488:	str	r2, [r3, #3952]	; 0xf70
   1248c:	add	r4, r4, #4096	; 0x1000
   12490:	ldr	r3, [r4, #3956]	; 0xf74
   12494:	add	r3, r3, #1
   12498:	str	r3, [r4, #3956]	; 0xf74
   1249c:	ldrd	r4, [sp]
   124a0:	ldr	r6, [sp, #8]
   124a4:	add	sp, sp, #12
   124a8:	pop	{pc}		; (ldr pc, [sp], #4)
   124ac:	strd	r4, [sp, #-16]!
   124b0:	str	r6, [sp, #8]
   124b4:	str	lr, [sp, #12]
   124b8:	mov	r4, r0
   124bc:	mov	r5, r1
   124c0:	ldr	r0, [r1, #8]
   124c4:	bl	12348 <__assert_fail@plt+0x17d4>
   124c8:	mov	r1, r5
   124cc:	add	r0, r4, r0, lsl #4
   124d0:	bl	11748 <__assert_fail@plt+0xbd4>
   124d4:	add	r3, r4, #4096	; 0x1000
   124d8:	ldr	r0, [r3, #3952]	; 0xf70
   124dc:	cmp	r0, #0
   124e0:	beq	124f4 <__assert_fail@plt+0x1980>
   124e4:	bl	10a00 <free@plt>
   124e8:	add	r3, r4, #4096	; 0x1000
   124ec:	mov	r2, #0
   124f0:	str	r2, [r3, #3952]	; 0xf70
   124f4:	add	r4, r4, #4096	; 0x1000
   124f8:	ldr	r3, [r4, #3956]	; 0xf74
   124fc:	sub	r3, r3, #1
   12500:	str	r3, [r4, #3956]	; 0xf74
   12504:	ldrd	r4, [sp]
   12508:	ldr	r6, [sp, #8]
   1250c:	add	sp, sp, #12
   12510:	pop	{pc}		; (ldr pc, [sp], #4)
   12514:	add	r3, r0, #4096	; 0x1000
   12518:	ldr	r3, [r3, #3952]	; 0xf70
   1251c:	cmp	r3, #0
   12520:	bxne	lr
   12524:	add	r3, r0, #4096	; 0x1000
   12528:	ldr	r3, [r3, #3956]	; 0xf74
   1252c:	cmp	r3, #0
   12530:	bxeq	lr
   12534:	strd	r4, [sp, #-16]!
   12538:	str	r6, [sp, #8]
   1253c:	str	lr, [sp, #12]
   12540:	mov	r4, r0
   12544:	mov	r1, #4
   12548:	mov	r0, r3
   1254c:	bl	12f40 <error@@Base+0x40>
   12550:	add	r3, r4, #4096	; 0x1000
   12554:	str	r0, [r3, #3952]	; 0xf70
   12558:	mov	r1, #0
   1255c:	mov	lr, r1
   12560:	mov	ip, r3
   12564:	movw	r5, #503	; 0x1f7
   12568:	b	12578 <__assert_fail@plt+0x1a04>
   1256c:	add	lr, lr, #1
   12570:	cmp	lr, r5
   12574:	beq	125a8 <__assert_fail@plt+0x1a34>
   12578:	ldr	r3, [r4, lr, lsl #4]
   1257c:	cmp	r3, #0
   12580:	beq	1256c <__assert_fail@plt+0x19f8>
   12584:	lsl	r2, r1, #2
   12588:	add	r1, r1, #1
   1258c:	ldr	r0, [ip, #3952]	; 0xf70
   12590:	str	r3, [r0, r2]
   12594:	ldr	r3, [r3, #4]
   12598:	add	r2, r2, #4
   1259c:	cmp	r3, #0
   125a0:	bne	12588 <__assert_fail@plt+0x1a14>
   125a4:	b	1256c <__assert_fail@plt+0x19f8>
   125a8:	ldrd	r4, [sp]
   125ac:	ldr	r6, [sp, #8]
   125b0:	add	sp, sp, #12
   125b4:	pop	{pc}		; (ldr pc, [sp], #4)
   125b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   125bc:	strd	r6, [sp, #8]
   125c0:	str	r8, [sp, #16]
   125c4:	str	lr, [sp, #20]
   125c8:	mov	r7, r0
   125cc:	mov	r6, r1
   125d0:	mov	r4, r0
   125d4:	add	r5, r0, #8000	; 0x1f40
   125d8:	add	r5, r5, #48	; 0x30
   125dc:	mov	r1, r6
   125e0:	mov	r0, r4
   125e4:	bl	11828 <__assert_fail@plt+0xcb4>
   125e8:	add	r4, r4, #16
   125ec:	cmp	r4, r5
   125f0:	bne	125dc <__assert_fail@plt+0x1a68>
   125f4:	add	r3, r7, #4096	; 0x1000
   125f8:	ldr	r0, [r3, #3952]	; 0xf70
   125fc:	cmp	r0, #0
   12600:	beq	12614 <__assert_fail@plt+0x1aa0>
   12604:	bl	10a00 <free@plt>
   12608:	add	r3, r7, #4096	; 0x1000
   1260c:	mov	r2, #0
   12610:	str	r2, [r3, #3952]	; 0xf70
   12614:	add	r7, r7, #4096	; 0x1000
   12618:	mov	r3, #0
   1261c:	str	r3, [r7, #3956]	; 0xf74
   12620:	ldrd	r4, [sp]
   12624:	ldrd	r6, [sp, #8]
   12628:	ldr	r8, [sp, #16]
   1262c:	add	sp, sp, #20
   12630:	pop	{pc}		; (ldr pc, [sp], #4)
   12634:	cmp	r2, r1
   12638:	bcc	126b8 <__assert_fail@plt+0x1b44>
   1263c:	str	r4, [sp, #-8]!
   12640:	str	lr, [sp, #4]
   12644:	sub	r3, r2, r1
   12648:	add	r3, r1, r3, lsr #1
   1264c:	movw	ip, #16988	; 0x425c
   12650:	movt	ip, #1
   12654:	add	lr, r3, r3, lsl #1
   12658:	ldr	ip, [ip, lr, lsl #2]
   1265c:	cmp	ip, r0
   12660:	bhi	126a0 <__assert_fail@plt+0x1b2c>
   12664:	movw	r1, #16988	; 0x425c
   12668:	movt	r1, #1
   1266c:	add	ip, r3, r3, lsl #1
   12670:	add	r1, r1, ip, lsl #2
   12674:	ldr	r1, [r1, #4]
   12678:	cmp	r1, r0
   1267c:	bcc	126ac <__assert_fail@plt+0x1b38>
   12680:	movw	r1, #16988	; 0x425c
   12684:	movt	r1, #1
   12688:	add	r3, r3, r3, lsl #1
   1268c:	add	r3, r1, r3, lsl #2
   12690:	ldr	r0, [r3, #8]
   12694:	ldr	r4, [sp]
   12698:	add	sp, sp, #4
   1269c:	pop	{pc}		; (ldr pc, [sp], #4)
   126a0:	sub	r2, r3, #1
   126a4:	bl	12634 <__assert_fail@plt+0x1ac0>
   126a8:	b	12694 <__assert_fail@plt+0x1b20>
   126ac:	add	r1, r3, #1
   126b0:	bl	12634 <__assert_fail@plt+0x1ac0>
   126b4:	b	12694 <__assert_fail@plt+0x1b20>
   126b8:	mov	r0, #0
   126bc:	bx	lr
   126c0:	cmp	r0, #0
   126c4:	beq	126ec <__assert_fail@plt+0x1b78>
   126c8:	str	r4, [sp, #-8]!
   126cc:	str	lr, [sp, #4]
   126d0:	movw	r2, #1092	; 0x444
   126d4:	mov	r1, #0
   126d8:	ldr	r0, [r0, #12]
   126dc:	bl	12634 <__assert_fail@plt+0x1ac0>
   126e0:	ldr	r4, [sp]
   126e4:	add	sp, sp, #4
   126e8:	pop	{pc}		; (ldr pc, [sp], #4)
   126ec:	mov	r0, #18
   126f0:	bx	lr
   126f4:	str	r4, [sp, #-8]!
   126f8:	str	lr, [sp, #4]
   126fc:	subs	r4, r0, #0
   12700:	beq	12724 <__assert_fail@plt+0x1bb0>
   12704:	ldr	r4, [r4, #4]
   12708:	cmp	r4, #0
   1270c:	beq	12724 <__assert_fail@plt+0x1bb0>
   12710:	mov	r0, r4
   12714:	bl	126c0 <__assert_fail@plt+0x1b4c>
   12718:	bic	r0, r0, #2
   1271c:	cmp	r0, #4
   12720:	beq	12704 <__assert_fail@plt+0x1b90>
   12724:	mov	r0, r4
   12728:	ldr	r4, [sp]
   1272c:	add	sp, sp, #4
   12730:	pop	{pc}		; (ldr pc, [sp], #4)
   12734:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12738:	strd	r6, [sp, #8]
   1273c:	strd	r8, [sp, #16]
   12740:	strd	sl, [sp, #24]
   12744:	str	lr, [sp, #32]
   12748:	sub	sp, sp, #36	; 0x24
   1274c:	str	r0, [sp, #12]
   12750:	ldr	r9, [r1]
   12754:	mov	r3, #1
   12758:	str	r3, [sp, #8]
   1275c:	b	12af4 <__assert_fail@plt+0x1f80>
   12760:	ldr	r5, [r6, #4]
   12764:	cmp	r9, r5
   12768:	movne	r4, r9
   1276c:	movne	r7, #0
   12770:	beq	12b68 <__assert_fail@plt+0x1ff4>
   12774:	add	r1, sp, #16
   12778:	ldr	r0, [r4, #12]
   1277c:	bl	10a24 <utf8proc_encode_char@plt>
   12780:	cmp	r0, #0
   12784:	beq	127c0 <__assert_fail@plt+0x1c4c>
   12788:	add	r7, r7, r0
   1278c:	ldr	r4, [r4, #4]
   12790:	cmp	r5, r4
   12794:	beq	12b18 <__assert_fail@plt+0x1fa4>
   12798:	cmp	r4, #0
   1279c:	bne	12774 <__assert_fail@plt+0x1c00>
   127a0:	movw	r3, #16948	; 0x4234
   127a4:	movt	r3, #1
   127a8:	mov	r2, #249	; 0xf9
   127ac:	movw	r1, #30104	; 0x7598
   127b0:	movt	r1, #1
   127b4:	movw	r0, #30112	; 0x75a0
   127b8:	movt	r0, #1
   127bc:	bl	10b74 <__assert_fail@plt>
   127c0:	movw	r3, #16948	; 0x4234
   127c4:	movt	r3, #1
   127c8:	mov	r2, #253	; 0xfd
   127cc:	movw	r1, #30104	; 0x7598
   127d0:	movt	r1, #1
   127d4:	movw	r0, #30128	; 0x75b0
   127d8:	movt	r0, #1
   127dc:	bl	10b74 <__assert_fail@plt>
   127e0:	sub	r2, r5, #8
   127e4:	cmp	r2, #1
   127e8:	bls	1291c <__assert_fail@plt+0x1da8>
   127ec:	sub	r2, r5, #12
   127f0:	cmp	r5, #10
   127f4:	cmpne	r2, #1
   127f8:	bhi	12808 <__assert_fail@plt+0x1c94>
   127fc:	sub	r2, r0, #8
   12800:	cmp	r2, #1
   12804:	bls	1291c <__assert_fail@plt+0x1da8>
   12808:	cmp	r4, #8
   1280c:	movne	r2, #0
   12810:	moveq	r2, #1
   12814:	cmp	r5, #10
   12818:	movne	r1, #0
   1281c:	moveq	r1, #1
   12820:	tst	r2, r1
   12824:	movne	r4, r8
   12828:	bne	1291c <__assert_fail@plt+0x1da8>
   1282c:	b	129c8 <__assert_fail@plt+0x1e54>
   12830:	cmp	r4, #13
   12834:	bne	12bf0 <__assert_fail@plt+0x207c>
   12838:	sub	r2, r5, #8
   1283c:	cmp	r2, #1
   12840:	bls	1291c <__assert_fail@plt+0x1da8>
   12844:	cmp	r5, #10
   12848:	movne	r1, #0
   1284c:	moveq	r1, #1
   12850:	b	129e0 <__assert_fail@plt+0x1e6c>
   12854:	sub	r3, r5, #8
   12858:	cmp	r3, #1
   1285c:	bls	1291c <__assert_fail@plt+0x1da8>
   12860:	cmp	ip, #12
   12864:	orreq	r1, r1, #1
   12868:	cmp	r1, #0
   1286c:	beq	12878 <__assert_fail@plt+0x1d04>
   12870:	cmp	r0, #15
   12874:	beq	12aa0 <__assert_fail@plt+0x1f2c>
   12878:	cmp	r5, #7
   1287c:	movne	r0, #0
   12880:	moveq	r0, #1
   12884:	cmp	r5, #16
   12888:	beq	1291c <__assert_fail@plt+0x1da8>
   1288c:	cmp	r4, #16
   12890:	beq	128f0 <__assert_fail@plt+0x1d7c>
   12894:	cmp	r4, #5
   12898:	cmpeq	r5, #5
   1289c:	beq	12910 <__assert_fail@plt+0x1d9c>
   128a0:	cmp	r6, #0
   128a4:	bne	12aac <__assert_fail@plt+0x1f38>
   128a8:	add	sp, sp, #36	; 0x24
   128ac:	ldrd	r4, [sp]
   128b0:	ldrd	r6, [sp, #8]
   128b4:	ldrd	r8, [sp, #16]
   128b8:	ldrd	sl, [sp, #24]
   128bc:	add	sp, sp, #32
   128c0:	pop	{pc}		; (ldr pc, [sp], #4)
   128c4:	cmp	r4, #14
   128c8:	bne	12bb4 <__assert_fail@plt+0x2040>
   128cc:	cmp	r5, #15
   128d0:	beq	1291c <__assert_fail@plt+0x1da8>
   128d4:	cmp	r4, #7
   128d8:	movne	r1, #0
   128dc:	moveq	r1, #1
   128e0:	cmp	r5, #7
   128e4:	movne	r0, #0
   128e8:	moveq	r0, #1
   128ec:	b	12a6c <__assert_fail@plt+0x1ef8>
   128f0:	sub	r5, r5, #8
   128f4:	cmp	r5, #1
   128f8:	orrls	r2, r2, #1
   128fc:	cmp	r2, #0
   12900:	bne	1291c <__assert_fail@plt+0x1da8>
   12904:	cmp	r0, #0
   12908:	beq	128a0 <__assert_fail@plt+0x1d2c>
   1290c:	b	1291c <__assert_fail@plt+0x1da8>
   12910:	mov	r4, #5
   12914:	b	1291c <__assert_fail@plt+0x1da8>
   12918:	ldr	r4, [sp, #8]
   1291c:	ldr	r3, [r6, #4]
   12920:	cmp	r3, #0
   12924:	beq	12acc <__assert_fail@plt+0x1f58>
   12928:	mov	r7, r4
   1292c:	mov	r0, r6
   12930:	bl	126f4 <__assert_fail@plt+0x1b80>
   12934:	mov	r6, r0
   12938:	bl	126c0 <__assert_fail@plt+0x1b4c>
   1293c:	mov	r4, r0
   12940:	mov	r0, r6
   12944:	bl	126f4 <__assert_fail@plt+0x1b80>
   12948:	str	r0, [sp, #4]
   1294c:	bl	126c0 <__assert_fail@plt+0x1b4c>
   12950:	mov	r5, r0
   12954:	ldr	r0, [sp, #4]
   12958:	bl	126f4 <__assert_fail@plt+0x1b80>
   1295c:	bl	126c0 <__assert_fail@plt+0x1b4c>
   12960:	sub	r2, r4, #1
   12964:	cmp	r5, #2
   12968:	movne	r3, #0
   1296c:	moveq	r3, #1
   12970:	cmp	r4, #1
   12974:	cmpeq	r5, #2
   12978:	beq	12918 <__assert_fail@plt+0x1da4>
   1297c:	cmp	r2, #2
   12980:	bls	128a0 <__assert_fail@plt+0x1d2c>
   12984:	bic	ip, r5, #2
   12988:	cmp	ip, #1
   1298c:	orreq	r3, r3, #1
   12990:	cmp	r3, #0
   12994:	bne	128a0 <__assert_fail@plt+0x1d2c>
   12998:	sub	r3, r4, #8
   1299c:	cmp	r3, #1
   129a0:	bls	127e0 <__assert_fail@plt+0x1c6c>
   129a4:	sub	r2, r7, #8
   129a8:	cmp	r2, #1
   129ac:	bls	12830 <__assert_fail@plt+0x1cbc>
   129b0:	cmp	r4, #8
   129b4:	movne	r2, #0
   129b8:	moveq	r2, #1
   129bc:	cmp	r5, #10
   129c0:	movne	r1, #0
   129c4:	moveq	r1, #1
   129c8:	cmp	r5, #11
   129cc:	cmpeq	r0, #8
   129d0:	moveq	lr, #1
   129d4:	movne	lr, #0
   129d8:	tst	r2, lr
   129dc:	bne	12a88 <__assert_fail@plt+0x1f14>
   129e0:	cmp	r7, #8
   129e4:	cmpeq	r4, #11
   129e8:	moveq	r2, #1
   129ec:	movne	r2, #0
   129f0:	cmp	r5, #8
   129f4:	movne	r2, #0
   129f8:	andeq	r2, r2, #1
   129fc:	cmp	r2, #0
   12a00:	bne	12a90 <__assert_fail@plt+0x1f1c>
   12a04:	cmp	r4, #15
   12a08:	movne	lr, #0
   12a0c:	moveq	lr, #1
   12a10:	cmp	r5, #15
   12a14:	movne	r2, #0
   12a18:	moveq	r2, #1
   12a1c:	tst	lr, r2
   12a20:	bne	12a98 <__assert_fail@plt+0x1f24>
   12a24:	cmp	r3, #1
   12a28:	movhi	r3, #0
   12a2c:	movls	r3, #1
   12a30:	tst	r2, r3
   12a34:	bne	1291c <__assert_fail@plt+0x1da8>
   12a38:	cmp	r4, #15
   12a3c:	beq	12854 <__assert_fail@plt+0x1ce0>
   12a40:	cmp	r7, #15
   12a44:	beq	128c4 <__assert_fail@plt+0x1d50>
   12a48:	cmp	r4, #7
   12a4c:	movne	r1, #0
   12a50:	moveq	r1, #1
   12a54:	cmp	r5, #7
   12a58:	movne	r0, #0
   12a5c:	moveq	r0, #1
   12a60:	tst	r1, r0
   12a64:	movne	r4, sl
   12a68:	bne	1291c <__assert_fail@plt+0x1da8>
   12a6c:	orrs	r3, lr, r3
   12a70:	bne	12884 <__assert_fail@plt+0x1d10>
   12a74:	cmp	r4, #16
   12a78:	orreq	r1, r1, #1
   12a7c:	cmp	r1, #0
   12a80:	beq	12894 <__assert_fail@plt+0x1d20>
   12a84:	b	12884 <__assert_fail@plt+0x1d10>
   12a88:	mov	r4, r8
   12a8c:	b	1291c <__assert_fail@plt+0x1da8>
   12a90:	mov	r4, #11
   12a94:	b	1291c <__assert_fail@plt+0x1da8>
   12a98:	mov	r4, fp
   12a9c:	b	1291c <__assert_fail@plt+0x1da8>
   12aa0:	mov	r4, r0
   12aa4:	b	1291c <__assert_fail@plt+0x1da8>
   12aa8:	mov	r6, r4
   12aac:	ldr	r4, [r6, #4]
   12ab0:	cmp	r4, #0
   12ab4:	beq	12acc <__assert_fail@plt+0x1f58>
   12ab8:	mov	r0, r4
   12abc:	bl	126c0 <__assert_fail@plt+0x1b4c>
   12ac0:	bic	r0, r0, #2
   12ac4:	cmp	r0, #4
   12ac8:	beq	12aa8 <__assert_fail@plt+0x1f34>
   12acc:	ldr	r0, [r9, #12]
   12ad0:	bl	10a0c <utf8proc_get_property@plt>
   12ad4:	ldrsh	r3, [r0]
   12ad8:	cmp	r3, #0
   12adc:	ble	12af0 <__assert_fail@plt+0x1f7c>
   12ae0:	cmp	r3, #12
   12ae4:	ble	12760 <__assert_fail@plt+0x1bec>
   12ae8:	cmp	r3, #29
   12aec:	beq	12760 <__assert_fail@plt+0x1bec>
   12af0:	ldr	r9, [r6, #4]
   12af4:	str	r9, [sp, #20]
   12af8:	cmp	r9, #0
   12afc:	beq	128a8 <__assert_fail@plt+0x1d34>
   12b00:	mov	r7, #17
   12b04:	add	r6, sp, #16
   12b08:	mov	fp, #15
   12b0c:	mov	sl, #7
   12b10:	mov	r8, #8
   12b14:	b	1292c <__assert_fail@plt+0x1db8>
   12b18:	add	r0, r7, #1
   12b1c:	bl	10a90 <malloc@plt>
   12b20:	mov	r7, r0
   12b24:	mov	r4, #0
   12b28:	add	r1, r7, r4
   12b2c:	ldr	r0, [r9, #12]
   12b30:	bl	10a24 <utf8proc_encode_char@plt>
   12b34:	add	r4, r4, r0
   12b38:	ldr	r9, [r9, #4]
   12b3c:	cmp	r5, r9
   12b40:	beq	12b78 <__assert_fail@plt+0x2004>
   12b44:	cmp	r9, #0
   12b48:	bne	12b28 <__assert_fail@plt+0x1fb4>
   12b4c:	ldr	r3, [pc, #184]	; 12c0c <__assert_fail@plt+0x2098>
   12b50:	movw	r2, #269	; 0x10d
   12b54:	movw	r1, #30104	; 0x7598
   12b58:	movt	r1, #1
   12b5c:	movw	r0, #30112	; 0x75a0
   12b60:	movt	r0, #1
   12b64:	bl	10b74 <__assert_fail@plt>
   12b68:	mov	r0, #1
   12b6c:	bl	10a90 <malloc@plt>
   12b70:	mov	r7, r0
   12b74:	mov	r4, #0
   12b78:	mov	r3, #0
   12b7c:	strb	r3, [r7, r4]
   12b80:	mov	r1, #12
   12b84:	mov	r0, #1
   12b88:	bl	12f40 <error@@Base+0x40>
   12b8c:	mov	r4, r0
   12b90:	mov	r0, r7
   12b94:	bl	10b14 <utf8proc_NFC@plt>
   12b98:	str	r0, [r4, #8]
   12b9c:	mov	r1, r4
   12ba0:	ldr	r0, [sp, #12]
   12ba4:	bl	116e0 <__assert_fail@plt+0xb6c>
   12ba8:	mov	r0, r7
   12bac:	bl	10a00 <free@plt>
   12bb0:	b	12af0 <__assert_fail@plt+0x1f7c>
   12bb4:	sub	r7, r4, #10
   12bb8:	bics	r7, r7, #2
   12bbc:	bne	12a48 <__assert_fail@plt+0x1ed4>
   12bc0:	cmp	r5, #15
   12bc4:	beq	1291c <__assert_fail@plt+0x1da8>
   12bc8:	cmp	r4, #15
   12bcc:	beq	12860 <__assert_fail@plt+0x1cec>
   12bd0:	b	12a48 <__assert_fail@plt+0x1ed4>
   12bd4:	cmp	r4, #8
   12bd8:	movne	r2, #0
   12bdc:	moveq	r2, #1
   12be0:	cmp	r5, #10
   12be4:	movne	r1, #0
   12be8:	moveq	r1, #1
   12bec:	b	129c8 <__assert_fail@plt+0x1e54>
   12bf0:	sub	r2, r4, #10
   12bf4:	bics	r2, r2, #2
   12bf8:	bne	12bd4 <__assert_fail@plt+0x2060>
   12bfc:	sub	r2, r5, #8
   12c00:	cmp	r2, #1
   12c04:	bhi	12808 <__assert_fail@plt+0x1c94>
   12c08:	b	1291c <__assert_fail@plt+0x1da8>
   12c0c:	andeq	r4, r1, r8, asr #4
   12c10:	str	r4, [sp, #-8]!
   12c14:	str	lr, [sp, #4]
   12c18:	mov	r4, r0
   12c1c:	ldr	r0, [r0, #8]
   12c20:	bl	10a00 <free@plt>
   12c24:	mov	r0, r4
   12c28:	bl	10a00 <free@plt>
   12c2c:	ldr	r4, [sp]
   12c30:	add	sp, sp, #4
   12c34:	pop	{pc}		; (ldr pc, [sp], #4)
   12c38:	strd	r4, [sp, #-12]!
   12c3c:	str	lr, [sp, #8]
   12c40:	sub	sp, sp, #116	; 0x74
   12c44:	mov	r5, r0
   12c48:	movw	r3, #960	; 0x3c0
   12c4c:	movt	r3, #3
   12c50:	ldr	r4, [r3]
   12c54:	bl	10ac0 <getpid@plt>
   12c58:	str	r5, [sp]
   12c5c:	mov	r3, r0
   12c60:	mov	r2, r4
   12c64:	movw	r1, #30148	; 0x75c4
   12c68:	movt	r1, #1
   12c6c:	add	r0, sp, #12
   12c70:	bl	10b2c <sprintf@plt>
   12c74:	add	r0, sp, #12
   12c78:	bl	10a30 <strdup@plt>
   12c7c:	add	sp, sp, #116	; 0x74
   12c80:	ldrd	r4, [sp]
   12c84:	add	sp, sp, #8
   12c88:	pop	{pc}		; (ldr pc, [sp], #4)
   12c8c:	str	r7, [sp, #-8]!
   12c90:	str	lr, [sp, #4]
   12c94:	mov	r6, r0
   12c98:	movw	r3, #964	; 0x3c4
   12c9c:	movt	r3, #3
   12ca0:	ldr	r3, [r3]
   12ca4:	cmp	r3, #0
   12ca8:	beq	12cb0 <__assert_fail@plt+0x213c>
   12cac:	blx	r3
   12cb0:	movw	r3, #41204	; 0xa0f4
   12cb4:	movt	r3, #2
   12cb8:	ldrsh	r3, [r3]
   12cbc:	cmp	r3, #0
   12cc0:	ble	12cfc <__assert_fail@plt+0x2188>
   12cc4:	mov	r4, #1
   12cc8:	movw	r5, #41204	; 0xa0f4
   12ccc:	movt	r5, #2
   12cd0:	mov	r0, r4
   12cd4:	bl	12c38 <__assert_fail@plt+0x20c4>
   12cd8:	mov	r7, r0
   12cdc:	bl	10a48 <unlink@plt>
   12ce0:	mov	r0, r7
   12ce4:	bl	10a00 <free@plt>
   12ce8:	add	r4, r4, #1
   12cec:	sxth	r4, r4
   12cf0:	ldrsh	r3, [r5]
   12cf4:	cmp	r3, r4
   12cf8:	bge	12cd0 <__assert_fail@plt+0x215c>
   12cfc:	mov	r0, r6
   12d00:	bl	10acc <exit@plt>
   12d04:	str	r4, [sp, #-8]!
   12d08:	str	lr, [sp, #4]
   12d0c:	ldrb	r3, [r0]
   12d10:	cmp	r3, #0
   12d14:	beq	12d68 <__assert_fail@plt+0x21f4>
   12d18:	ldrb	r2, [r1]
   12d1c:	cmp	r2, r3
   12d20:	bne	12d84 <__assert_fail@plt+0x2210>
   12d24:	mov	ip, r1
   12d28:	mov	r2, r0
   12d2c:	rsb	r0, r0, #1
   12d30:	add	r4, r0, r2
   12d34:	ldrb	r3, [r2, #1]!
   12d38:	cmp	r3, #0
   12d3c:	beq	12d6c <__assert_fail@plt+0x21f8>
   12d40:	ldrb	lr, [ip, #1]!
   12d44:	cmp	lr, r3
   12d48:	beq	12d30 <__assert_fail@plt+0x21bc>
   12d4c:	ldrb	r2, [r1, r4]
   12d50:	cmp	r2, r3
   12d54:	mvnhi	r0, #0
   12d58:	movls	r0, #1
   12d5c:	ldr	r4, [sp]
   12d60:	add	sp, sp, #4
   12d64:	pop	{pc}		; (ldr pc, [sp], #4)
   12d68:	mov	r4, #0
   12d6c:	ldrb	r3, [r1, r4]
   12d70:	cmp	r3, #0
   12d74:	moveq	r0, #0
   12d78:	beq	12d5c <__assert_fail@plt+0x21e8>
   12d7c:	mov	r3, #0
   12d80:	b	12d4c <__assert_fail@plt+0x21d8>
   12d84:	mov	r4, #0
   12d88:	b	12d4c <__assert_fail@plt+0x21d8>
   12d8c:	movw	r3, #33000	; 0x80e8
   12d90:	movt	r3, #2
   12d94:	ldr	r3, [r3]
   12d98:	cmp	r3, r0
   12d9c:	bxeq	lr
   12da0:	movw	r3, #33004	; 0x80ec
   12da4:	movt	r3, #2
   12da8:	ldr	r3, [r3]
   12dac:	cmp	r3, r0
   12db0:	bxeq	lr
   12db4:	str	r4, [sp, #-8]!
   12db8:	str	lr, [sp, #4]
   12dbc:	bl	10b08 <fclose@plt>
   12dc0:	ldr	r4, [sp]
   12dc4:	add	sp, sp, #4
   12dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dcc:	push	{lr}		; (str lr, [sp, #-4]!)
   12dd0:	sub	sp, sp, #92	; 0x5c
   12dd4:	mov	r2, sp
   12dd8:	mov	r1, r0
   12ddc:	mov	r0, #3
   12de0:	bl	10a60 <__xstat@plt>
   12de4:	clz	r0, r0
   12de8:	lsr	r0, r0, #5
   12dec:	add	sp, sp, #92	; 0x5c
   12df0:	pop	{pc}		; (ldr pc, [sp], #4)
   12df4:	str	r4, [sp, #-8]!
   12df8:	str	lr, [sp, #4]
   12dfc:	movw	r3, #41204	; 0xa0f4
   12e00:	movt	r3, #2
   12e04:	ldrh	r0, [r3]
   12e08:	add	r0, r0, #1
   12e0c:	sxth	r0, r0
   12e10:	strh	r0, [r3]
   12e14:	bl	12c38 <__assert_fail@plt+0x20c4>
   12e18:	mov	r4, r0
   12e1c:	bl	10a48 <unlink@plt>
   12e20:	mov	r0, r4
   12e24:	ldr	r4, [sp]
   12e28:	add	sp, sp, #4
   12e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e30:	str	r4, [sp, #-8]!
   12e34:	str	lr, [sp, #4]
   12e38:	mov	r4, r0
   12e3c:	bl	10ae4 <strlen@plt>
   12e40:	uxth	r0, r0
   12e44:	sub	r2, r0, #1
   12e48:	sxth	r2, r2
   12e4c:	cmp	r2, #0
   12e50:	blt	12e8c <__assert_fail@plt+0x2318>
   12e54:	ldrb	r3, [r4, r2]
   12e58:	cmp	r3, #47	; 0x2f
   12e5c:	beq	12e8c <__assert_fail@plt+0x2318>
   12e60:	sub	r0, r0, #2
   12e64:	sxth	r3, r0
   12e68:	add	r1, r3, #1
   12e6c:	add	r1, r4, r1
   12e70:	sxth	r2, r3
   12e74:	cmp	r2, #0
   12e78:	blt	12e8c <__assert_fail@plt+0x2318>
   12e7c:	sub	r3, r3, #1
   12e80:	ldrb	r0, [r1, #-1]!
   12e84:	cmp	r0, #47	; 0x2f
   12e88:	bne	12e70 <__assert_fail@plt+0x22fc>
   12e8c:	add	r0, r2, #1
   12e90:	add	r0, r4, r0
   12e94:	ldr	r4, [sp]
   12e98:	add	sp, sp, #4
   12e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ea0:	str	r4, [sp, #-8]!
   12ea4:	str	lr, [sp, #4]
   12ea8:	mov	r0, #0
   12eac:	bl	12c8c <__assert_fail@plt+0x2118>
   12eb0:	str	r4, [sp, #-8]!
   12eb4:	str	lr, [sp, #4]
   12eb8:	movw	r2, #956	; 0x3bc
   12ebc:	movt	r2, #3
   12ec0:	ldr	r2, [r2]
   12ec4:	cmp	r2, #0
   12ec8:	beq	12ed4 <__assert_fail@plt+0x2360>
   12ecc:	blx	r2
   12ed0:	bl	12ea0 <__assert_fail@plt+0x232c>
   12ed4:	movw	r2, #960	; 0x3c0
   12ed8:	movt	r2, #3
   12edc:	movw	ip, #32992	; 0x80e0
   12ee0:	movt	ip, #2
   12ee4:	mov	r3, r0
   12ee8:	ldr	r2, [r2]
   12eec:	movw	r1, #30164	; 0x75d4
   12ef0:	movt	r1, #1
   12ef4:	ldr	r0, [ip]
   12ef8:	bl	10af0 <fprintf@plt>
   12efc:	b	12ed0 <__assert_fail@plt+0x235c>

00012f00 <error@@Base>:
   12f00:	str	r4, [sp, #-8]!
   12f04:	str	lr, [sp, #4]
   12f08:	movw	r2, #960	; 0x3c0
   12f0c:	movt	r2, #3
   12f10:	movw	ip, #32992	; 0x80e0
   12f14:	movt	ip, #2
   12f18:	mov	r3, r0
   12f1c:	ldr	r2, [r2]
   12f20:	movw	r1, #30180	; 0x75e4
   12f24:	movt	r1, #1
   12f28:	ldr	r0, [ip]
   12f2c:	bl	10af0 <fprintf@plt>
   12f30:	movw	r3, #32984	; 0x80d8
   12f34:	movt	r3, #2
   12f38:	ldr	r0, [r3]
   12f3c:	bl	12c8c <__assert_fail@plt+0x2118>
   12f40:	str	r4, [sp, #-8]!
   12f44:	str	lr, [sp, #4]
   12f48:	bl	109d0 <calloc@plt>
   12f4c:	cmp	r0, #0
   12f50:	beq	12f60 <error@@Base+0x60>
   12f54:	ldr	r4, [sp]
   12f58:	add	sp, sp, #4
   12f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f60:	movw	r0, #30188	; 0x75ec
   12f64:	movt	r0, #1
   12f68:	bl	12f00 <error@@Base>
   12f6c:	movw	r3, #41204	; 0xa0f4
   12f70:	movt	r3, #2
   12f74:	ldrb	r3, [r3, #2]
   12f78:	cmp	r3, #0
   12f7c:	bxne	lr
   12f80:	str	r4, [sp, #-8]!
   12f84:	str	lr, [sp, #4]
   12f88:	movw	r3, #41204	; 0xa0f4
   12f8c:	movt	r3, #2
   12f90:	mov	r2, #1
   12f94:	strb	r2, [r3, #2]
   12f98:	movw	r0, #30216	; 0x7608
   12f9c:	movt	r0, #1
   12fa0:	bl	12f00 <error@@Base>
   12fa4:	push	{lr}		; (str lr, [sp, #-4]!)
   12fa8:	sub	sp, sp, #12
   12fac:	movw	r2, #960	; 0x3c0
   12fb0:	movt	r2, #3
   12fb4:	movw	ip, #32992	; 0x80e0
   12fb8:	movt	ip, #2
   12fbc:	str	r1, [sp]
   12fc0:	mov	r3, r0
   12fc4:	ldr	r2, [r2]
   12fc8:	movw	r1, #30232	; 0x7618
   12fcc:	movt	r1, #1
   12fd0:	ldr	r0, [ip]
   12fd4:	bl	10af0 <fprintf@plt>
   12fd8:	movw	r3, #32984	; 0x80d8
   12fdc:	movt	r3, #2
   12fe0:	ldr	r0, [r3]
   12fe4:	bl	12c8c <__assert_fail@plt+0x2118>
   12fe8:	strd	r4, [sp, #-16]!
   12fec:	str	r6, [sp, #8]
   12ff0:	str	lr, [sp, #12]
   12ff4:	subs	r5, r0, #0
   12ff8:	beq	13020 <error@@Base+0x120>
   12ffc:	mov	r4, r1
   13000:	mov	r0, r5
   13004:	bl	109f4 <fopen@plt>
   13008:	cmp	r0, #0
   1300c:	beq	13040 <error@@Base+0x140>
   13010:	ldrd	r4, [sp]
   13014:	ldr	r6, [sp, #8]
   13018:	add	sp, sp, #12
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	ldrb	r3, [r1]
   13024:	cmp	r3, #114	; 0x72
   13028:	movweq	r3, #33000	; 0x80e8
   1302c:	movteq	r3, #2
   13030:	movwne	r3, #33004	; 0x80ec
   13034:	movtne	r3, #2
   13038:	ldr	r0, [r3]
   1303c:	b	13010 <error@@Base+0x110>
   13040:	ldrb	r3, [r4]
   13044:	cmp	r3, #119	; 0x77
   13048:	beq	1305c <error@@Base+0x15c>
   1304c:	mov	r1, r5
   13050:	movw	r0, #30272	; 0x7640
   13054:	movt	r0, #1
   13058:	bl	12fa4 <error@@Base+0xa4>
   1305c:	mov	r1, r5
   13060:	movw	r0, #30248	; 0x7628
   13064:	movt	r0, #1
   13068:	bl	12fa4 <error@@Base+0xa4>
   1306c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13070:	strd	r6, [sp, #8]
   13074:	strd	r8, [sp, #16]
   13078:	strd	sl, [sp, #24]
   1307c:	str	lr, [sp, #32]
   13080:	sub	sp, sp, #28
   13084:	mov	r5, r0
   13088:	str	r0, [sp, #4]
   1308c:	mov	r9, r1
   13090:	str	r2, [sp, #20]
   13094:	mov	r6, r3
   13098:	ldr	r0, [r1]
   1309c:	bl	12e30 <__assert_fail@plt+0x22bc>
   130a0:	movw	r3, #960	; 0x3c0
   130a4:	movt	r3, #3
   130a8:	str	r0, [r3]
   130ac:	movw	r4, #12140	; 0x2f6c
   130b0:	movt	r4, #1
   130b4:	mov	r1, r4
   130b8:	mov	r0, #2
   130bc:	bl	10aa8 <__sysv_signal@plt>
   130c0:	mov	r1, r4
   130c4:	mov	r0, #15
   130c8:	bl	10aa8 <__sysv_signal@plt>
   130cc:	ldr	r7, [r5]
   130d0:	cmp	r7, #1
   130d4:	beq	13100 <error@@Base+0x200>
   130d8:	movle	r8, #0
   130dc:	ble	13118 <error@@Base+0x218>
   130e0:	mov	r8, #0
   130e4:	mov	sl, #1
   130e8:	mov	r4, sl
   130ec:	movw	r3, #30292	; 0x7654
   130f0:	movt	r3, #1
   130f4:	str	r3, [sp, #12]
   130f8:	str	r6, [sp, #16]
   130fc:	b	131bc <error@@Base+0x2bc>
   13100:	movw	r3, #32984	; 0x80d8
   13104:	movt	r3, #2
   13108:	ldrb	r3, [r3, #4]
   1310c:	cmp	r3, #0
   13110:	moveq	r8, #0
   13114:	bne	1313c <error@@Base+0x23c>
   13118:	ldr	r3, [sp, #4]
   1311c:	str	r8, [r3]
   13120:	add	sp, sp, #28
   13124:	ldrd	r4, [sp]
   13128:	ldrd	r6, [sp, #8]
   1312c:	ldrd	r8, [sp, #16]
   13130:	ldrd	sl, [sp, #24]
   13134:	add	sp, sp, #32
   13138:	pop	{pc}		; (ldr pc, [sp], #4)
   1313c:	ldr	r0, [sp, #20]
   13140:	bl	12eb0 <__assert_fail@plt+0x233c>
   13144:	ldr	r0, [sp, #20]
   13148:	bl	12eb0 <__assert_fail@plt+0x233c>
   1314c:	ldr	r0, [sp, #16]
   13150:	b	13254 <error@@Base+0x354>
   13154:	ldr	r3, [r0, #8]
   13158:	cmp	r3, #0
   1315c:	beq	132b0 <error@@Base+0x3b0>
   13160:	ldrb	r2, [r5, #2]
   13164:	cmp	r2, #0
   13168:	bne	132b0 <error@@Base+0x3b0>
   1316c:	ldrb	r2, [r3]
   13170:	cmp	r2, #0
   13174:	bne	13184 <error@@Base+0x284>
   13178:	mov	r2, #1
   1317c:	strb	r2, [r3]
   13180:	b	131a0 <error@@Base+0x2a0>
   13184:	mov	r1, r5
   13188:	movw	r0, #30316	; 0x766c
   1318c:	movt	r0, #1
   13190:	bl	12fa4 <error@@Base+0xa4>
   13194:	add	r3, r8, #1
   13198:	str	r5, [r9, r8, lsl #2]
   1319c:	sxth	r8, r3
   131a0:	add	r4, r4, #1
   131a4:	sxth	r4, r4
   131a8:	mov	sl, r4
   131ac:	ldr	r3, [sp, #4]
   131b0:	ldr	r7, [r3]
   131b4:	cmp	r4, r7
   131b8:	bge	13118 <error@@Base+0x218>
   131bc:	lsl	r3, r4, #2
   131c0:	str	r3, [sp, #8]
   131c4:	ldr	r5, [r9, r4, lsl #2]
   131c8:	ldrb	r3, [r5]
   131cc:	cmp	r3, #45	; 0x2d
   131d0:	bne	13194 <error@@Base+0x294>
   131d4:	ldrb	fp, [r5, #1]
   131d8:	cmp	fp, #0
   131dc:	beq	13194 <error@@Base+0x294>
   131e0:	mov	r0, r5
   131e4:	bl	10ae4 <strlen@plt>
   131e8:	mov	r2, r0
   131ec:	mov	r1, r5
   131f0:	ldr	r0, [sp, #12]
   131f4:	bl	10b50 <strncmp@plt>
   131f8:	cmp	r0, #0
   131fc:	beq	13144 <error@@Base+0x244>
   13200:	add	sl, sl, #1
   13204:	cmp	sl, r7
   13208:	ldrlt	r3, [sp, #8]
   1320c:	addlt	r3, r9, r3
   13210:	ldrlt	r1, [r3, #4]
   13214:	movge	r1, #0
   13218:	cmp	r6, #0
   1321c:	beq	132b0 <error@@Base+0x3b0>
   13220:	ldrb	r3, [r6]
   13224:	cmp	fp, r3
   13228:	cmpne	r3, #0
   1322c:	beq	1314c <error@@Base+0x24c>
   13230:	mov	r2, #0
   13234:	add	r2, r2, #1
   13238:	sxth	r2, r2
   1323c:	add	r3, r2, r2, lsl #1
   13240:	add	r0, r6, r3, lsl #2
   13244:	ldrb	r3, [r6, r3, lsl #2]
   13248:	cmp	fp, r3
   1324c:	cmpne	r3, #0
   13250:	bne	13234 <error@@Base+0x334>
   13254:	cmp	r3, #0
   13258:	beq	132b0 <error@@Base+0x3b0>
   1325c:	ldr	r3, [r0, #4]
   13260:	cmp	r3, #0
   13264:	beq	13154 <error@@Base+0x254>
   13268:	ldrb	r2, [r5, #2]
   1326c:	cmp	r1, #0
   13270:	cmpeq	r2, #0
   13274:	beq	132a4 <error@@Base+0x3a4>
   13278:	ldr	r0, [r3]
   1327c:	cmp	r0, #0
   13280:	bne	13184 <error@@Base+0x284>
   13284:	cmp	r2, #0
   13288:	addne	r1, r5, #2
   1328c:	str	r1, [r3]
   13290:	ldrb	r3, [r5, #2]
   13294:	cmp	r3, #0
   13298:	addeq	r4, r4, #1
   1329c:	sxtheq	r4, r4
   132a0:	b	131a0 <error@@Base+0x2a0>
   132a4:	ldr	r3, [r0, #8]
   132a8:	cmp	r3, #0
   132ac:	bne	1316c <error@@Base+0x26c>
   132b0:	mov	r1, r5
   132b4:	movw	r0, #30300	; 0x765c
   132b8:	movt	r0, #1
   132bc:	bl	12fa4 <error@@Base+0xa4>
   132c0:	push	{lr}		; (str lr, [sp, #-4]!)
   132c4:	sub	sp, sp, #12
   132c8:	movw	r2, #960	; 0x3c0
   132cc:	movt	r2, #3
   132d0:	movw	ip, #32992	; 0x80e0
   132d4:	movt	ip, #2
   132d8:	str	r1, [sp]
   132dc:	mov	r3, r0
   132e0:	ldr	r2, [r2]
   132e4:	movw	r1, #30232	; 0x7618
   132e8:	movt	r1, #1
   132ec:	ldr	r0, [ip]
   132f0:	bl	10af0 <fprintf@plt>
   132f4:	add	sp, sp, #12
   132f8:	pop	{pc}		; (ldr pc, [sp], #4)
   132fc:	strd	r4, [sp, #-16]!
   13300:	str	r6, [sp, #8]
   13304:	str	lr, [sp, #12]
   13308:	mov	r4, r0
   1330c:	mov	r5, r2
   13310:	uxtb	r6, r1
   13314:	mov	r1, #16
   13318:	mov	r0, #1
   1331c:	bl	12f40 <error@@Base+0x40>
   13320:	mov	r1, r0
   13324:	strb	r6, [r0, #8]
   13328:	str	r5, [r0, #12]
   1332c:	mov	r0, r4
   13330:	bl	116e0 <__assert_fail@plt+0xb6c>
   13334:	ldrd	r4, [sp]
   13338:	ldr	r6, [sp, #8]
   1333c:	add	sp, sp, #12
   13340:	pop	{pc}		; (ldr pc, [sp], #4)
   13344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13348:	strd	r6, [sp, #8]
   1334c:	strd	r8, [sp, #16]
   13350:	strd	sl, [sp, #24]
   13354:	str	lr, [sp, #32]
   13358:	sub	sp, sp, #116	; 0x74
   1335c:	mov	r8, r0
   13360:	ldrb	r3, [r2]
   13364:	mov	r0, r1
   13368:	clz	r1, r1
   1336c:	lsr	r1, r1, #5
   13370:	cmp	r3, #0
   13374:	moveq	r1, #0
   13378:	cmp	r1, #0
   1337c:	bne	133ec <error@@Base+0x4ec>
   13380:	mov	r4, r2
   13384:	ldr	sl, [r8, #4]
   13388:	movw	r1, #16344	; 0x3fd8
   1338c:	movt	r1, #1
   13390:	bl	12fe8 <error@@Base+0xe8>
   13394:	str	r0, [sp]
   13398:	ldrb	r3, [r4]
   1339c:	cmp	r3, #0
   133a0:	bne	13400 <error@@Base+0x500>
   133a4:	ldrb	fp, [r4, #1]
   133a8:	ldr	r7, [r4, #4]
   133ac:	cmp	r7, #0
   133b0:	moveq	r7, #94	; 0x5e
   133b4:	ldr	r0, [sp]
   133b8:	bl	10b68 <getc@plt>
   133bc:	cmn	r0, #1
   133c0:	beq	13558 <error@@Base+0x658>
   133c4:	movw	r3, #32264	; 0x7e08
   133c8:	movt	r3, #2
   133cc:	ldrsb	r5, [r3, r0]
   133d0:	cmp	r5, #0
   133d4:	ble	134a0 <error@@Base+0x5a0>
   133d8:	mov	r3, #0
   133dc:	str	r3, [sp, #4]
   133e0:	movw	r9, #32264	; 0x7e08
   133e4:	movt	r9, #2
   133e8:	b	134f4 <error@@Base+0x5f4>
   133ec:	movw	r1, #30336	; 0x7680
   133f0:	movt	r1, #1
   133f4:	movw	r0, #30348	; 0x768c
   133f8:	movt	r0, #1
   133fc:	bl	12fa4 <error@@Base+0xa4>
   13400:	mov	r2, r0
   13404:	mov	r1, #99	; 0x63
   13408:	add	r0, sp, #12
   1340c:	bl	10a18 <fgets@plt>
   13410:	cmp	r0, #0
   13414:	beq	13434 <error@@Base+0x534>
   13418:	mov	r2, #51	; 0x33
   1341c:	movw	r1, #30364	; 0x769c
   13420:	movt	r1, #1
   13424:	add	r0, sp, #12
   13428:	bl	10b50 <strncmp@plt>
   1342c:	cmp	r0, #0
   13430:	beq	13448 <error@@Base+0x548>
   13434:	ldr	r0, [sp]
   13438:	bl	10a3c <rewind@plt>
   1343c:	mov	r3, #0
   13440:	strb	r3, [r4, #11]
   13444:	b	133a4 <error@@Base+0x4a4>
   13448:	mov	r5, #0
   1344c:	mov	r7, #99	; 0x63
   13450:	movw	r6, #30420	; 0x76d4
   13454:	movt	r6, #1
   13458:	ldr	r2, [sp]
   1345c:	mov	r1, r7
   13460:	add	r0, sp, #12
   13464:	bl	10a18 <fgets@plt>
   13468:	cmp	r0, #0
   1346c:	beq	13498 <error@@Base+0x598>
   13470:	mov	r1, r6
   13474:	add	r0, sp, #12
   13478:	bl	109dc <strcmp@plt>
   1347c:	cmp	r0, #0
   13480:	addeq	r5, r5, #1
   13484:	sxtheq	r5, r5
   13488:	cmp	r5, #1
   1348c:	ble	13458 <error@@Base+0x558>
   13490:	mov	r3, #1
   13494:	b	13440 <error@@Base+0x540>
   13498:	mov	r3, #1
   1349c:	b	13440 <error@@Base+0x540>
   134a0:	movw	r0, #30476	; 0x770c
   134a4:	movt	r0, #1
   134a8:	bl	12f00 <error@@Base>
   134ac:	movw	r0, #30500	; 0x7724
   134b0:	movt	r0, #1
   134b4:	bl	12f00 <error@@Base>
   134b8:	bl	10b38 <utf8proc_errmsg@plt>
   134bc:	bl	12f00 <error@@Base>
   134c0:	ldr	r2, [sp, #12]
   134c4:	ldr	r1, [sp, #4]
   134c8:	mov	r0, r8
   134cc:	bl	132fc <error@@Base+0x3fc>
   134d0:	mov	r3, #0
   134d4:	str	r3, [sp, #4]
   134d8:	ldr	r0, [sp]
   134dc:	bl	10b68 <getc@plt>
   134e0:	cmn	r0, #1
   134e4:	beq	13558 <error@@Base+0x658>
   134e8:	ldrsb	r5, [r9, r0]
   134ec:	cmp	r5, #0
   134f0:	ble	134a0 <error@@Base+0x5a0>
   134f4:	strb	r0, [sp, #8]
   134f8:	cmp	r5, #1
   134fc:	ble	13520 <error@@Base+0x620>
   13500:	sub	r6, r5, #1
   13504:	ldr	r3, [sp]
   13508:	mov	r2, r6
   1350c:	mov	r1, #1
   13510:	add	r0, sp, #9
   13514:	bl	10a78 <fread@plt>
   13518:	cmp	r6, r0
   1351c:	bne	134ac <error@@Base+0x5ac>
   13520:	add	r2, sp, #12
   13524:	mov	r1, #4
   13528:	add	r0, sp, #8
   1352c:	bl	10a84 <utf8proc_iterate@plt>
   13530:	cmp	r0, r5
   13534:	bne	134b8 <error@@Base+0x5b8>
   13538:	cmp	fp, #0
   1353c:	beq	134c0 <error@@Base+0x5c0>
   13540:	ldr	r3, [sp, #12]
   13544:	cmp	r7, r3
   13548:	bne	134c0 <error@@Base+0x5c0>
   1354c:	mov	r3, #1
   13550:	str	r3, [sp, #4]
   13554:	b	134d8 <error@@Base+0x5d8>
   13558:	ldr	r0, [sp]
   1355c:	bl	12d8c <__assert_fail@plt+0x2218>
   13560:	ldrb	r3, [r4, #9]
   13564:	cmp	r3, #0
   13568:	beq	136b4 <error@@Base+0x7b4>
   1356c:	cmp	sl, #0
   13570:	ldrne	r5, [sl, #4]
   13574:	ldreq	r5, [r8]
   13578:	cmp	r5, #0
   1357c:	beq	136b4 <error@@Base+0x7b4>
   13580:	mov	r6, r5
   13584:	mov	r9, #32
   13588:	mov	r7, #0
   1358c:	b	135c0 <error@@Base+0x6c0>
   13590:	cmp	fp, #160	; 0xa0
   13594:	beq	135b0 <error@@Base+0x6b0>
   13598:	ldrsh	r3, [r0]
   1359c:	sub	r3, r3, #23
   135a0:	cmp	r3, #2
   135a4:	movhi	r3, #0
   135a8:	movls	r3, #1
   135ac:	b	135f0 <error@@Base+0x6f0>
   135b0:	str	r9, [r6, #12]
   135b4:	ldr	r6, [r6, #4]
   135b8:	cmp	r6, #0
   135bc:	beq	135fc <error@@Base+0x6fc>
   135c0:	ldr	fp, [r6, #12]
   135c4:	mov	r0, fp
   135c8:	bl	10a0c <utf8proc_get_property@plt>
   135cc:	cmp	fp, #13
   135d0:	bhi	13590 <error@@Base+0x690>
   135d4:	cmp	fp, #11
   135d8:	bcs	135b0 <error@@Base+0x6b0>
   135dc:	cmp	fp, #9
   135e0:	beq	135b0 <error@@Base+0x6b0>
   135e4:	cmp	fp, #10
   135e8:	moveq	r3, r7
   135ec:	bne	13598 <error@@Base+0x698>
   135f0:	cmp	r3, #0
   135f4:	beq	135b4 <error@@Base+0x6b4>
   135f8:	b	135b0 <error@@Base+0x6b0>
   135fc:	mov	r7, #0
   13600:	b	1363c <error@@Base+0x73c>
   13604:	eor	r2, r7, #1
   13608:	cmp	r6, #0
   1360c:	moveq	r2, #1
   13610:	cmp	r2, #0
   13614:	bne	13668 <error@@Base+0x768>
   13618:	ldr	r2, [r6, #12]
   1361c:	cmp	r2, #10
   13620:	cmpne	r2, #32
   13624:	beq	1367c <error@@Base+0x77c>
   13628:	subs	r7, r3, #10
   1362c:	movne	r7, #1
   13630:	mov	r5, r6
   13634:	cmp	r6, #0
   13638:	beq	136b4 <error@@Base+0x7b4>
   1363c:	ldr	r6, [r5, #4]
   13640:	ldr	r3, [r5, #12]
   13644:	cmp	r3, #32
   13648:	beq	13604 <error@@Base+0x704>
   1364c:	eor	r2, r7, #1
   13650:	cmp	r3, #10
   13654:	movne	r2, #0
   13658:	andeq	r2, r2, #1
   1365c:	cmp	r2, #0
   13660:	beq	13628 <error@@Base+0x728>
   13664:	b	13688 <error@@Base+0x788>
   13668:	cmp	r6, #0
   1366c:	movne	r3, r7
   13670:	moveq	r3, #0
   13674:	cmp	r3, #0
   13678:	beq	13688 <error@@Base+0x788>
   1367c:	ldr	r3, [r6, #12]
   13680:	cmp	r3, #32
   13684:	beq	136a0 <error@@Base+0x7a0>
   13688:	mov	r1, r5
   1368c:	mov	r0, r8
   13690:	bl	11748 <__assert_fail@plt+0xbd4>
   13694:	mov	r0, r5
   13698:	bl	10a00 <free@plt>
   1369c:	b	13630 <error@@Base+0x730>
   136a0:	ldrb	r3, [r6, #8]
   136a4:	ldrb	r2, [r5, #8]
   136a8:	orr	r3, r3, r2
   136ac:	strb	r3, [r6, #8]
   136b0:	b	13688 <error@@Base+0x788>
   136b4:	ldrb	r3, [r4, #10]
   136b8:	cmp	r3, #0
   136bc:	beq	136ec <error@@Base+0x7ec>
   136c0:	cmp	sl, #0
   136c4:	ldrne	r4, [sl, #4]
   136c8:	ldreq	r4, [r8]
   136cc:	cmp	r4, #0
   136d0:	beq	136ec <error@@Base+0x7ec>
   136d4:	ldr	r0, [r4, #12]
   136d8:	bl	10a54 <utf8proc_tolower@plt>
   136dc:	str	r0, [r4, #12]
   136e0:	ldr	r4, [r4, #4]
   136e4:	cmp	r4, #0
   136e8:	bne	136d4 <error@@Base+0x7d4>
   136ec:	add	sp, sp, #116	; 0x74
   136f0:	ldrd	r4, [sp]
   136f4:	ldrd	r6, [sp, #8]
   136f8:	ldrd	r8, [sp, #16]
   136fc:	ldrd	sl, [sp, #24]
   13700:	add	sp, sp, #32
   13704:	pop	{pc}		; (ldr pc, [sp], #4)
   13708:	str	r4, [sp, #-8]!
   1370c:	str	lr, [sp, #4]
   13710:	bl	10a24 <utf8proc_encode_char@plt>
   13714:	cmp	r0, #0
   13718:	ble	1372c <error@@Base+0x82c>
   1371c:	sxtb	r0, r0
   13720:	ldr	r4, [sp]
   13724:	add	sp, sp, #4
   13728:	pop	{pc}		; (ldr pc, [sp], #4)
   1372c:	movw	r0, #30524	; 0x773c
   13730:	movt	r0, #1
   13734:	bl	12f00 <error@@Base>
   13738:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1373c:	strd	r6, [sp, #8]
   13740:	str	r8, [sp, #16]
   13744:	str	lr, [sp, #20]
   13748:	mov	r4, r1
   1374c:	mov	r6, r2
   13750:	uxtb	r0, r0
   13754:	uxtb	r7, r3
   13758:	cmp	r0, #0
   1375c:	moveq	r5, #0
   13760:	bne	137a0 <error@@Base+0x8a0>
   13764:	cmp	r4, #10
   13768:	bne	137b4 <error@@Base+0x8b4>
   1376c:	movw	r1, #30548	; 0x7754
   13770:	movt	r1, #1
   13774:	movw	r3, #16868	; 0x41e4
   13778:	movt	r3, #1
   1377c:	cmp	r7, #0
   13780:	moveq	r1, r3
   13784:	add	r0, r6, r5
   13788:	bl	10b2c <sprintf@plt>
   1378c:	ldrd	r4, [sp]
   13790:	ldrd	r6, [sp, #8]
   13794:	ldr	r8, [sp, #16]
   13798:	add	sp, sp, #20
   1379c:	pop	{pc}		; (ldr pc, [sp], #4)
   137a0:	mov	r1, r2
   137a4:	mov	r0, #94	; 0x5e
   137a8:	bl	13708 <error@@Base+0x808>
   137ac:	sxth	r5, r0
   137b0:	b	13764 <error@@Base+0x864>
   137b4:	mov	r0, r4
   137b8:	bl	10a0c <utf8proc_get_property@plt>
   137bc:	cmp	r4, #32
   137c0:	beq	137e0 <error@@Base+0x8e0>
   137c4:	ldrsh	r3, [r0]
   137c8:	cmp	r3, #0
   137cc:	ble	1382c <error@@Base+0x92c>
   137d0:	cmp	r3, #22
   137d4:	ble	137e0 <error@@Base+0x8e0>
   137d8:	cmp	r3, #29
   137dc:	bne	1382c <error@@Base+0x92c>
   137e0:	mov	r0, r4
   137e4:	bl	10ad8 <utf8proc_category@plt>
   137e8:	sub	r0, r0, #6
   137ec:	cmp	r0, #2
   137f0:	bls	13814 <error@@Base+0x914>
   137f4:	add	r1, r6, r5
   137f8:	mov	r0, r4
   137fc:	bl	13708 <error@@Base+0x808>
   13800:	add	r0, r0, r5
   13804:	sxth	r0, r0
   13808:	mov	r3, #0
   1380c:	strb	r3, [r6, r0]
   13810:	b	1378c <error@@Base+0x88c>
   13814:	add	r1, r6, r5
   13818:	movw	r0, #9676	; 0x25cc
   1381c:	bl	13708 <error@@Base+0x808>
   13820:	add	r5, r0, r5
   13824:	sxth	r5, r5
   13828:	b	137f4 <error@@Base+0x8f4>
   1382c:	cmp	r4, #255	; 0xff
   13830:	mov	r2, r4
   13834:	movwls	r1, #30556	; 0x775c
   13838:	movtls	r1, #1
   1383c:	movwhi	r1, #30564	; 0x7764
   13840:	movthi	r1, #1
   13844:	add	r0, r6, r5
   13848:	bl	10b2c <sprintf@plt>
   1384c:	b	1378c <error@@Base+0x88c>
   13850:	strd	r4, [sp, #-20]!	; 0xffffffec
   13854:	strd	r6, [sp, #8]
   13858:	str	lr, [sp, #16]
   1385c:	sub	sp, sp, #20
   13860:	mov	r7, r0
   13864:	mov	r0, r1
   13868:	mov	r6, r2
   1386c:	movw	r1, #16820	; 0x41b4
   13870:	movt	r1, #1
   13874:	bl	12fe8 <error@@Base+0xe8>
   13878:	mov	r5, r0
   1387c:	cmp	r6, #0
   13880:	beq	138d4 <error@@Base+0x9d4>
   13884:	mov	r3, r0
   13888:	mov	r2, #55	; 0x37
   1388c:	mov	r1, #1
   13890:	movw	r0, #30364	; 0x769c
   13894:	movt	r0, #1
   13898:	bl	10a6c <fwrite@plt>
   1389c:	movw	r4, #30420	; 0x76d4
   138a0:	movt	r4, #1
   138a4:	mov	r3, r5
   138a8:	mov	r2, #55	; 0x37
   138ac:	mov	r1, #1
   138b0:	mov	r0, r4
   138b4:	bl	10a6c <fwrite@plt>
   138b8:	mov	r0, r5
   138bc:	blx	r6
   138c0:	mov	r3, r5
   138c4:	mov	r2, #55	; 0x37
   138c8:	mov	r1, #1
   138cc:	mov	r0, r4
   138d0:	bl	10a6c <fwrite@plt>
   138d4:	ldr	r4, [r7]
   138d8:	cmp	r4, #0
   138dc:	beq	13910 <error@@Base+0xa10>
   138e0:	mov	r6, #0
   138e4:	mov	r3, r6
   138e8:	add	r2, sp, #4
   138ec:	ldr	r1, [r4, #12]
   138f0:	ldrb	r0, [r4, #8]
   138f4:	bl	13738 <error@@Base+0x838>
   138f8:	mov	r1, r5
   138fc:	add	r0, sp, #4
   13900:	bl	10b44 <fputs@plt>
   13904:	ldr	r4, [r4, #4]
   13908:	cmp	r4, #0
   1390c:	bne	138e4 <error@@Base+0x9e4>
   13910:	mov	r0, r5
   13914:	bl	12d8c <__assert_fail@plt+0x2218>
   13918:	add	sp, sp, #20
   1391c:	ldrd	r4, [sp]
   13920:	ldrd	r6, [sp, #8]
   13924:	add	sp, sp, #16
   13928:	pop	{pc}		; (ldr pc, [sp], #4)
   1392c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13930:	strd	r6, [sp, #8]
   13934:	str	r8, [sp, #16]
   13938:	str	lr, [sp, #20]
   1393c:	sub	sp, sp, #8
   13940:	mov	r3, #0
   13944:	str	r3, [sp, #4]
   13948:	ldrb	r3, [r1]
   1394c:	cmp	r3, #0
   13950:	beq	139a0 <error@@Base+0xaa0>
   13954:	mov	r6, r0
   13958:	mov	r4, r1
   1395c:	mvn	r5, #0
   13960:	mov	r7, #0
   13964:	add	r2, sp, #4
   13968:	mov	r1, r5
   1396c:	mov	r0, r4
   13970:	bl	10a84 <utf8proc_iterate@plt>
   13974:	subs	r8, r0, #0
   13978:	ble	139a8 <error@@Base+0xaa8>
   1397c:	ldr	r2, [sp, #4]
   13980:	mov	r1, r7
   13984:	mov	r0, r6
   13988:	bl	132fc <error@@Base+0x3fc>
   1398c:	ldrb	r3, [r4, r8]!
   13990:	cmp	r3, #0
   13994:	bne	13964 <error@@Base+0xa64>
   13998:	mov	r0, #1
   1399c:	b	139ac <error@@Base+0xaac>
   139a0:	mov	r0, #1
   139a4:	b	139ac <error@@Base+0xaac>
   139a8:	mov	r0, #0
   139ac:	add	sp, sp, #8
   139b0:	ldrd	r4, [sp]
   139b4:	ldrd	r6, [sp, #8]
   139b8:	ldr	r8, [sp, #16]
   139bc:	add	sp, sp, #20
   139c0:	pop	{pc}		; (ldr pc, [sp], #4)
   139c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   139c8:	strd	r6, [sp, #8]
   139cc:	strd	r8, [sp, #16]
   139d0:	str	sl, [sp, #24]
   139d4:	str	lr, [sp, #28]
   139d8:	mov	r8, r0
   139dc:	mov	r9, r1
   139e0:	movw	r3, #41208	; 0xa0f8
   139e4:	movt	r3, #2
   139e8:	ldr	r3, [r3]
   139ec:	ldr	r6, [r3, r0, lsl #2]
   139f0:	cmp	r0, r1
   139f4:	movge	r4, r1
   139f8:	movge	r7, r0
   139fc:	bge	13a68 <error@@Base+0xb68>
   13a00:	mov	r4, r1
   13a04:	mov	sl, r0
   13a08:	movw	r5, #41208	; 0xa0f8
   13a0c:	movt	r5, #2
   13a10:	b	13acc <error@@Base+0xbcc>
   13a14:	mov	r7, r4
   13a18:	cmp	sl, r7
   13a1c:	beq	13a64 <error@@Base+0xb64>
   13a20:	ldr	r3, [r5]
   13a24:	add	r4, sl, #1
   13a28:	ldr	r2, [r3, r7, lsl #2]
   13a2c:	str	r2, [r3, sl, lsl #2]
   13a30:	cmp	r4, r7
   13a34:	movge	sl, r4
   13a38:	bge	13aac <error@@Base+0xbac>
   13a3c:	ldr	r2, [r5]
   13a40:	ldr	r3, [r5, #4]
   13a44:	ldr	r1, [r2, r4, lsl #2]
   13a48:	mov	r0, r6
   13a4c:	blx	r3
   13a50:	cmp	r0, #0
   13a54:	ble	13aa8 <error@@Base+0xba8>
   13a58:	add	r4, r4, #1
   13a5c:	cmp	r4, r7
   13a60:	bne	13a3c <error@@Base+0xb3c>
   13a64:	mov	r4, r7
   13a68:	movw	r3, #41208	; 0xa0f8
   13a6c:	movt	r3, #2
   13a70:	ldr	r3, [r3]
   13a74:	str	r6, [r3, r4, lsl #2]
   13a78:	sub	r1, r4, #1
   13a7c:	cmp	r8, r1
   13a80:	blt	13b10 <error@@Base+0xc10>
   13a84:	add	r0, r7, #1
   13a88:	cmp	r9, r0
   13a8c:	bgt	13b1c <error@@Base+0xc1c>
   13a90:	ldrd	r4, [sp]
   13a94:	ldrd	r6, [sp, #8]
   13a98:	ldrd	r8, [sp, #16]
   13a9c:	ldr	sl, [sp, #24]
   13aa0:	add	sp, sp, #28
   13aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   13aa8:	mov	sl, r4
   13aac:	cmp	sl, r7
   13ab0:	beq	13a64 <error@@Base+0xb64>
   13ab4:	ldr	r3, [r5]
   13ab8:	sub	r4, r7, #1
   13abc:	ldr	r2, [r3, sl, lsl #2]
   13ac0:	str	r2, [r3, r7, lsl #2]
   13ac4:	cmp	r4, sl
   13ac8:	ble	13b08 <error@@Base+0xc08>
   13acc:	cmp	sl, r4
   13ad0:	movge	r7, r4
   13ad4:	bge	13a18 <error@@Base+0xb18>
   13ad8:	ldr	r2, [r5]
   13adc:	ldr	r3, [r5, #4]
   13ae0:	ldr	r1, [r2, r4, lsl #2]
   13ae4:	mov	r0, r6
   13ae8:	blx	r3
   13aec:	cmp	r0, #0
   13af0:	bge	13a14 <error@@Base+0xb14>
   13af4:	sub	r4, r4, #1
   13af8:	cmp	r4, sl
   13afc:	bne	13ad8 <error@@Base+0xbd8>
   13b00:	mov	r7, sl
   13b04:	b	13a64 <error@@Base+0xb64>
   13b08:	mov	r7, sl
   13b0c:	b	13a68 <error@@Base+0xb68>
   13b10:	mov	r0, r8
   13b14:	bl	139c4 <error@@Base+0xac4>
   13b18:	b	13a84 <error@@Base+0xb84>
   13b1c:	mov	r1, r9
   13b20:	bl	139c4 <error@@Base+0xac4>
   13b24:	b	13a90 <error@@Base+0xb90>
   13b28:	cmp	r0, #1
   13b2c:	bxle	lr
   13b30:	str	r4, [sp, #-8]!
   13b34:	str	lr, [sp, #4]
   13b38:	movw	r3, #41208	; 0xa0f8
   13b3c:	movt	r3, #2
   13b40:	str	r1, [r3]
   13b44:	str	r2, [r3, #4]
   13b48:	sub	r1, r0, #1
   13b4c:	mov	r0, #0
   13b50:	bl	139c4 <error@@Base+0xac4>
   13b54:	ldr	r4, [sp]
   13b58:	add	sp, sp, #4
   13b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b64:	mov	r7, r0
   13b68:	ldr	r6, [pc, #72]	; 13bb8 <error@@Base+0xcb8>
   13b6c:	ldr	r5, [pc, #72]	; 13bbc <error@@Base+0xcbc>
   13b70:	add	r6, pc, r6
   13b74:	add	r5, pc, r5
   13b78:	sub	r6, r6, r5
   13b7c:	mov	r8, r1
   13b80:	mov	r9, r2
   13b84:	bl	109b0 <calloc@plt-0x20>
   13b88:	asrs	r6, r6, #2
   13b8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b90:	mov	r4, #0
   13b94:	add	r4, r4, #1
   13b98:	ldr	r3, [r5], #4
   13b9c:	mov	r2, r9
   13ba0:	mov	r1, r8
   13ba4:	mov	r0, r7
   13ba8:	blx	r3
   13bac:	cmp	r6, r4
   13bb0:	bne	13b94 <error@@Base+0xc94>
   13bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bb8:	andeq	r4, r1, ip, lsl #5
   13bbc:	andeq	r4, r1, r4, lsl #5
   13bc0:	bx	lr

Disassembly of section .fini:

00013bc4 <.fini>:
   13bc4:	push	{r3, lr}
   13bc8:	pop	{r3, pc}
